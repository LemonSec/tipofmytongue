1
00:00:01,180 --> 00:00:14,730
[Music]

2
00:00:15,759 --> 00:00:16,720
hello everyone

3
00:00:16,720 --> 00:00:19,119
my name is louis xing i am an assistant

4
00:00:19,119 --> 00:00:20,640
professor at the indiana university of

5
00:00:20,640 --> 00:00:21,840
bloomington

6
00:00:21,840 --> 00:00:23,920
it's my great honor to speak at black

7
00:00:23,920 --> 00:00:25,920
hatch this is joint work with my

8
00:00:25,920 --> 00:00:26,960
colleague

9
00:00:26,960 --> 00:00:30,080
professor georginio and our phd student

10
00:00:30,080 --> 00:00:32,320
honolulu so today we are going to talk

11
00:00:32,320 --> 00:00:34,640
about the design platform and

12
00:00:34,640 --> 00:00:36,480
security challenges in the commercial

13
00:00:36,480 --> 00:00:37,760
mini programs

14
00:00:37,760 --> 00:00:41,200
on both android and ios

15
00:00:41,200 --> 00:00:42,960
so we are talking about a new mobile

16
00:00:42,960 --> 00:00:44,559
computing paradigm today

17
00:00:44,559 --> 00:00:47,039
it's called every app or sometimes

18
00:00:47,039 --> 00:00:49,280
called mini program paradigm

19
00:00:49,280 --> 00:00:51,680
it's quickly gaining huge popularity in

20
00:00:51,680 --> 00:00:54,559
the past a few years

21
00:00:54,559 --> 00:00:56,879
in this paradigm the mobile app called

22
00:00:56,879 --> 00:00:58,079
the host app

23
00:00:58,079 --> 00:01:02,160
such as snapchat recharge facebook

24
00:01:02,160 --> 00:01:05,438
they support a new feature delete other

25
00:01:05,438 --> 00:01:06,960
small apps

26
00:01:06,960 --> 00:01:11,119
wrong in them so those small

27
00:01:11,119 --> 00:01:14,560
two small apps also called mini programs

28
00:01:14,560 --> 00:01:14,880
or

29
00:01:14,880 --> 00:01:18,159
sub-apps they draw in the host app

30
00:01:18,159 --> 00:01:20,159
they significantly enrich the

31
00:01:20,159 --> 00:01:22,479
functionality of the whole step

32
00:01:22,479 --> 00:01:25,520
so here is an example

33
00:01:25,520 --> 00:01:29,920
this is a sub-app called item tickets

34
00:01:29,920 --> 00:01:33,360
it is running in the snapchat app

35
00:01:33,360 --> 00:01:36,240
so with this sub-app so the group of

36
00:01:36,240 --> 00:01:38,240
users in snapchat they can

37
00:01:38,240 --> 00:01:41,119
chat while purchasing movie tickets

38
00:01:41,119 --> 00:01:42,320
together

39
00:01:42,320 --> 00:01:44,960
instead of leaving snapchat and buy

40
00:01:44,960 --> 00:01:45,520
tickets

41
00:01:45,520 --> 00:01:49,280
individually so with sub-apps

42
00:01:49,280 --> 00:01:51,360
for example with amazon sub-apps you can

43
00:01:51,360 --> 00:01:52,560
also place

44
00:01:52,560 --> 00:01:55,840
amd orders inside a host app you can

45
00:01:55,840 --> 00:01:57,520
also use the tesla

46
00:01:57,520 --> 00:02:00,719
sub-app to check a nearby charging

47
00:02:00,719 --> 00:02:02,399
station for your tesla without

48
00:02:02,399 --> 00:02:05,360
leaving a host app sub-apps have been

49
00:02:05,360 --> 00:02:06,240
released by

50
00:02:06,240 --> 00:02:08,560
major app vendors and service providers

51
00:02:08,560 --> 00:02:10,878
such as amazon tesla google

52
00:02:10,878 --> 00:02:13,920
stockbox microsoft such a mini program

53
00:02:13,920 --> 00:02:15,440
paradigm

54
00:02:15,440 --> 00:02:19,200
or fpf paradigm allows the whole step

55
00:02:19,200 --> 00:02:21,599
vendor to build a ecosystem around the

56
00:02:21,599 --> 00:02:24,720
hostel vendor around the whole step

57
00:02:24,720 --> 00:02:27,040
so this paradigm has become very popular

58
00:02:27,040 --> 00:02:28,400
in the past a few years

59
00:02:28,400 --> 00:02:32,080
after first introduced by vchat in 2017

60
00:02:32,080 --> 00:02:34,160
so in this research we studied 11 cool

61
00:02:34,160 --> 00:02:35,200
steps that

62
00:02:35,200 --> 00:02:39,440
are providing the app feature

63
00:02:39,440 --> 00:02:43,599
i mean hosting mini apps

64
00:02:43,680 --> 00:02:47,040
to the those footsteps

65
00:02:47,040 --> 00:02:48,640
in total have more than 2 billion

66
00:02:48,640 --> 00:02:51,200
downloads examples of the whole steps

67
00:02:51,200 --> 00:02:53,599
include wechat tick tock

68
00:02:53,599 --> 00:02:57,200
facebook also refund more and more apps

69
00:02:57,200 --> 00:02:59,280
have started to support mini

70
00:02:59,280 --> 00:03:03,280
apps such as ipod imessage and the

71
00:03:03,280 --> 00:03:04,400
snapchat

72
00:03:04,400 --> 00:03:08,400
so to date there are more than one

73
00:03:08,400 --> 00:03:12,159
many suburbs or mini mini apps into the

74
00:03:12,159 --> 00:03:15,040
in the wild they are provided and

75
00:03:15,040 --> 00:03:16,159
released by the

76
00:03:16,159 --> 00:03:19,519
sub-app stores provided by the hosted

77
00:03:19,519 --> 00:03:20,239
vendors

78
00:03:20,239 --> 00:03:22,239
similar to google play and apple app

79
00:03:22,239 --> 00:03:24,560
store

80
00:03:24,720 --> 00:03:27,680
so how do they work how does this uh fpf

81
00:03:27,680 --> 00:03:29,280
paradigm work

82
00:03:29,280 --> 00:03:32,319
so here

83
00:03:32,319 --> 00:03:35,120
we see a typical fpf technical

84
00:03:35,120 --> 00:03:36,400
architecture

85
00:03:36,400 --> 00:03:37,840
which we learn through reverse

86
00:03:37,840 --> 00:03:39,440
engineering so

87
00:03:39,440 --> 00:03:41,280
in this architecture there is the whole

88
00:03:41,280 --> 00:03:44,560
step the operating system

89
00:03:44,560 --> 00:03:47,120
in the tab sub-apps draw on top of the

90
00:03:47,120 --> 00:03:48,879
whole step

91
00:03:48,879 --> 00:03:51,120
the hoof tab acts like an operating

92
00:03:51,120 --> 00:03:52,640
system

93
00:03:52,640 --> 00:03:55,040
to the sub-apps the whole steps provide

94
00:03:55,040 --> 00:03:57,519
a sub-app runtime to run servers

95
00:03:57,519 --> 00:04:00,640
the host-type provides a sub-app api so

96
00:04:00,640 --> 00:04:01,280
stop app

97
00:04:01,280 --> 00:04:04,720
card card.api to access the resources

98
00:04:04,720 --> 00:04:08,000
to access the surface and

99
00:04:08,000 --> 00:04:12,080
the host have a call corresponding

100
00:04:12,159 --> 00:04:15,760
system api to

101
00:04:15,760 --> 00:04:18,798
get the resources for the sub-apps

102
00:04:18,798 --> 00:04:22,000
if a sub-app api

103
00:04:22,000 --> 00:04:24,160
accesses sensitive resources then the

104
00:04:24,160 --> 00:04:27,280
whole step requires a permission check

105
00:04:27,280 --> 00:04:29,520
for the sub-app to call that api so

106
00:04:29,520 --> 00:04:31,120
those permissions are called server

107
00:04:31,120 --> 00:04:33,440
permissions they are similar or they are

108
00:04:33,440 --> 00:04:35,680
like the android permissions

109
00:04:35,680 --> 00:04:38,580
to restrict system api

110
00:04:38,580 --> 00:04:40,320
[Music]

111
00:04:40,320 --> 00:04:41,919
in terms of the security model in the

112
00:04:41,919 --> 00:04:43,360
fdm paradigm

113
00:04:43,360 --> 00:04:47,280
first sub-app api are restricted by

114
00:04:47,280 --> 00:04:50,880
web server permissions good permission

115
00:04:50,880 --> 00:04:51,199
must

116
00:04:51,199 --> 00:04:53,520
be granted by the user to the sub-apps

117
00:04:53,520 --> 00:04:56,479
so this is similar to how android and

118
00:04:56,479 --> 00:04:59,840
os apps request permissions second

119
00:04:59,840 --> 00:05:02,720
the sub-apps are isolated from each

120
00:05:02,720 --> 00:05:04,479
other

121
00:05:04,479 --> 00:05:07,520
by the hoofstab third

122
00:05:07,520 --> 00:05:11,280
the whole step usually has a sub-app

123
00:05:11,280 --> 00:05:14,560
store that reads sub-apps

124
00:05:14,560 --> 00:05:17,520
they check the malicious sub-app or

125
00:05:17,520 --> 00:05:18,080
detect

126
00:05:18,080 --> 00:05:22,080
those with the privacy violations

127
00:05:22,479 --> 00:05:25,360
this new fdmf paradigm introduced new

128
00:05:25,360 --> 00:05:27,199
security challenges

129
00:05:27,199 --> 00:05:29,120
first it is fundamentally difficult for

130
00:05:29,120 --> 00:05:30,880
the whole staff to properly manage

131
00:05:30,880 --> 00:05:33,360
subjects

132
00:05:33,520 --> 00:05:36,960
in particular the host tab cannot

133
00:05:36,960 --> 00:05:39,680
read the mechanism through which the os

134
00:05:39,680 --> 00:05:41,280
manages mobile apps

135
00:05:41,280 --> 00:05:43,360
for example android use the traditional

136
00:05:43,360 --> 00:05:44,639
linux user id

137
00:05:44,639 --> 00:05:47,759
to isolate mobile apps on android

138
00:05:47,759 --> 00:05:51,360
android assigned a linux uid to each

139
00:05:51,360 --> 00:05:54,320
app so the app each app and the

140
00:05:54,320 --> 00:05:56,000
resources are isolated

141
00:05:56,000 --> 00:05:58,960
naturally by the linux kernel however

142
00:05:58,960 --> 00:06:00,960
such a mechanism cannot be easily

143
00:06:00,960 --> 00:06:02,400
replicated to the

144
00:06:02,400 --> 00:06:05,520
whole step to isolate the servers

145
00:06:05,520 --> 00:06:09,360
also the hoof needs to securely manage

146
00:06:09,360 --> 00:06:11,919
system resources delegated to the

147
00:06:11,919 --> 00:06:14,240
sub-apps

148
00:06:14,240 --> 00:06:16,560
through permission policies such as

149
00:06:16,560 --> 00:06:18,880
similar to the android permission policy

150
00:06:18,880 --> 00:06:20,479
or ios entitlements

151
00:06:20,479 --> 00:06:22,319
however we found that the operating

152
00:06:22,319 --> 00:06:23,919
system level security policies

153
00:06:23,919 --> 00:06:27,440
are opaque scattered and never organized

154
00:06:27,440 --> 00:06:30,800
for the host vendor to reuse it's harder

155
00:06:30,800 --> 00:06:32,639
for the hoof type vendor to construct a

156
00:06:32,639 --> 00:06:33,520
sound

157
00:06:33,520 --> 00:06:35,520
security policies that are compliant

158
00:06:35,520 --> 00:06:37,280
with the operating system

159
00:06:37,280 --> 00:06:40,400
to regulate system resources also given

160
00:06:40,400 --> 00:06:43,120
the host limited

161
00:06:43,120 --> 00:06:46,160
capabilities and resources it's hard for

162
00:06:46,160 --> 00:06:47,680
them to manage the

163
00:06:47,680 --> 00:06:50,800
suburb ui model and life cycle which

164
00:06:50,800 --> 00:06:52,960
reveal detail of these attacks in this

165
00:06:52,960 --> 00:06:53,919
talk

166
00:06:53,919 --> 00:06:55,759
another challenge is the lack of

167
00:06:55,759 --> 00:06:57,599
standards

168
00:06:57,599 --> 00:06:59,440
we found that the different host apps

169
00:06:59,440 --> 00:07:00,720
today have

170
00:07:00,720 --> 00:07:04,080
provided heterogeneous sub-app apis and

171
00:07:04,080 --> 00:07:06,000
security policies even for accessing the

172
00:07:06,000 --> 00:07:07,680
same kind of resources

173
00:07:07,680 --> 00:07:11,280
in the absence of a standard

174
00:07:11,280 --> 00:07:13,759
the server app api and policies can

175
00:07:13,759 --> 00:07:15,599
easily go wrong

176
00:07:15,599 --> 00:07:18,639
unnecessarily convoluted and which can

177
00:07:18,639 --> 00:07:19,280
be hard

178
00:07:19,280 --> 00:07:22,400
to verify and protect so next i will

179
00:07:22,400 --> 00:07:23,680
hand over the

180
00:07:23,680 --> 00:07:25,919
talk to hora who will continue and

181
00:07:25,919 --> 00:07:27,680
introduce the new vulnerability that

182
00:07:27,680 --> 00:07:30,720
we found on the most popular epic system

183
00:07:30,720 --> 00:07:33,199
in the wild

184
00:07:33,199 --> 00:07:36,080
hi there yeah thanks for the

185
00:07:36,080 --> 00:07:38,000
introduction

186
00:07:38,000 --> 00:07:40,160
and all right i'm going to talk about

187
00:07:40,160 --> 00:07:41,199
the

188
00:07:41,199 --> 00:07:43,280
four design pitfalls we discovered

189
00:07:43,280 --> 00:07:45,360
during our study

190
00:07:45,360 --> 00:07:48,560
so namely the four pitfalls are

191
00:07:48,560 --> 00:07:51,680
system resource exposure the new overlay

192
00:07:51,680 --> 00:07:54,800
hazard a sub-window deception and the

193
00:07:54,800 --> 00:07:55,520
setback

194
00:07:55,520 --> 00:07:59,840
level select lifecycle hijacking

195
00:08:01,039 --> 00:08:02,479
the first one i'm going to talk about

196
00:08:02,479 --> 00:08:05,120
the system restore exposure

197
00:08:05,120 --> 00:08:08,080
ideally in app in app architecture

198
00:08:08,080 --> 00:08:09,360
software permissions

199
00:08:09,360 --> 00:08:12,560
required for setup api are supposed to

200
00:08:12,560 --> 00:08:13,680
be consistent

201
00:08:13,680 --> 00:08:15,599
with the permissions required by the

202
00:08:15,599 --> 00:08:16,800
operating system

203
00:08:16,800 --> 00:08:18,960
when using the relevant system apis

204
00:08:18,960 --> 00:08:20,160
label app

205
00:08:20,160 --> 00:08:23,759
for example recording audios need to use

206
00:08:23,759 --> 00:08:25,039
the microphone

207
00:08:25,039 --> 00:08:27,520
which can be accessed by the host app

208
00:08:27,520 --> 00:08:28,240
using

209
00:08:28,240 --> 00:08:30,639
using the corresponding android or os

210
00:08:30,639 --> 00:08:31,680
apis

211
00:08:31,680 --> 00:08:34,719
the host app wraps the api and provides

212
00:08:34,719 --> 00:08:35,679
a new unified

213
00:08:35,679 --> 00:08:38,880
server api since the operating system

214
00:08:38,880 --> 00:08:40,799
requires permission to use this oreo

215
00:08:40,799 --> 00:08:42,640
recording ada apis

216
00:08:42,640 --> 00:08:44,640
the sub-app apis should also be

217
00:08:44,640 --> 00:08:47,120
protected via sub-app permission

218
00:08:47,120 --> 00:08:49,519
in the example record audio permission

219
00:08:49,519 --> 00:08:50,480
on android

220
00:08:50,480 --> 00:08:52,800
and microphone usage entitlement on ios

221
00:08:52,800 --> 00:08:54,880
are required by the o-ring systems

222
00:08:54,880 --> 00:08:57,680
so the satellite permission scope.report

223
00:08:57,680 --> 00:09:00,480
is also required by the hoster

224
00:09:00,480 --> 00:09:03,519
however for the host as a third party

225
00:09:03,519 --> 00:09:06,720
it's very challenging to construct some

226
00:09:06,720 --> 00:09:09,519
separate api permission policies in our

227
00:09:09,519 --> 00:09:10,080
study

228
00:09:10,080 --> 00:09:12,000
we found inconsistent permission

229
00:09:12,000 --> 00:09:13,920
requirements between server

230
00:09:13,920 --> 00:09:17,760
api and system api which lead to system

231
00:09:17,760 --> 00:09:19,839
resource exposure

232
00:09:19,839 --> 00:09:22,880
an example is the unprotected wechat

233
00:09:22,880 --> 00:09:26,399
sub-app api that can perform wi-fi scan

234
00:09:26,399 --> 00:09:29,200
web scan can be accessed by wifi manager

235
00:09:29,200 --> 00:09:30,880
api on android

236
00:09:30,880 --> 00:09:34,080
and any hospital helper api on ls

237
00:09:34,080 --> 00:09:37,839
a host up recharge roughly

238
00:09:37,839 --> 00:09:41,640
2 and provide a server api

239
00:09:41,640 --> 00:09:44,480
wx.get wi-fi list

240
00:09:44,480 --> 00:09:47,200
wi-fi scan are protected through an

241
00:09:47,200 --> 00:09:47,920
entitlement

242
00:09:47,920 --> 00:09:51,120
hospital helper on ls and a dangerous

243
00:09:51,120 --> 00:09:52,399
level permission

244
00:09:52,399 --> 00:09:55,920
access fine location on android however

245
00:09:55,920 --> 00:09:58,959
the sub-app api provided by wechat is

246
00:09:58,959 --> 00:10:02,160
not protected by any sub-bad permission

247
00:10:02,160 --> 00:10:04,880
as a result the satellite api exposed

248
00:10:04,880 --> 00:10:06,720
the wifi scan capability

249
00:10:06,720 --> 00:10:10,000
to the sub-app leaking out user location

250
00:10:10,000 --> 00:10:13,200
we named such unprotected server api

251
00:10:13,200 --> 00:10:16,640
as escaped server api note that

252
00:10:16,640 --> 00:10:19,120
a high-profile host app for example

253
00:10:19,120 --> 00:10:19,920
wechat

254
00:10:19,920 --> 00:10:22,000
is typically granted the location

255
00:10:22,000 --> 00:10:23,760
permission and many other

256
00:10:23,760 --> 00:10:26,320
dangerous permissions due to its rich

257
00:10:26,320 --> 00:10:27,519
functionalities

258
00:10:27,519 --> 00:10:30,480
for example the camera and microphone as

259
00:10:30,480 --> 00:10:31,279
a result

260
00:10:31,279 --> 00:10:34,399
the adversary gains unauthorized access

261
00:10:34,399 --> 00:10:37,519
to system resources through the escape

262
00:10:37,519 --> 00:10:40,480
satellite api in addition to the example

263
00:10:40,480 --> 00:10:41,519
we show here

264
00:10:41,519 --> 00:10:44,880
we found many other escape sub apis

265
00:10:44,880 --> 00:10:49,120
in popular ibm systems affecting diverse

266
00:10:49,120 --> 00:10:52,240
sensitive system resources across ios

267
00:10:52,240 --> 00:10:54,880
and android

268
00:10:56,079 --> 00:10:58,079
so looking into the root cause of this

269
00:10:58,079 --> 00:11:00,000
escape subat apis we

270
00:11:00,000 --> 00:11:03,279
found two possibilities first is the

271
00:11:03,279 --> 00:11:06,079
unclear operating system level security

272
00:11:06,079 --> 00:11:07,279
policy

273
00:11:07,279 --> 00:11:09,440
and the second is the cross-platform

274
00:11:09,440 --> 00:11:10,320
discrepancy

275
00:11:10,320 --> 00:11:12,240
of permission requirement between

276
00:11:12,240 --> 00:11:14,720
android and allies

277
00:11:14,720 --> 00:11:17,760
so for the first root cause the

278
00:11:17,760 --> 00:11:19,839
operating system level security policies

279
00:11:19,839 --> 00:11:21,279
are opaque

280
00:11:21,279 --> 00:11:24,800
again we take the ufs scan as an example

281
00:11:24,800 --> 00:11:27,279
ls protect web scan with an entitlement

282
00:11:27,279 --> 00:11:28,880
named hospital helper

283
00:11:28,880 --> 00:11:31,120
to get this entitlement developer must

284
00:11:31,120 --> 00:11:32,399
file a dedicated

285
00:11:32,399 --> 00:11:35,760
written request justifying that the app

286
00:11:35,760 --> 00:11:38,800
will now have any malicious intention to

287
00:11:38,800 --> 00:11:42,079
get this system permission apple reviews

288
00:11:42,079 --> 00:11:43,600
the requests internally

289
00:11:43,600 --> 00:11:46,320
and possibly access the risk of location

290
00:11:46,320 --> 00:11:46,880
leakage

291
00:11:46,880 --> 00:11:50,000
from the app however the intelligent and

292
00:11:50,000 --> 00:11:51,680
its public information

293
00:11:51,680 --> 00:11:55,279
failed to show that wi-fi scan can

294
00:11:55,279 --> 00:11:58,320
cause location leakage such an opaque

295
00:11:58,320 --> 00:12:00,639
operating system level policy make it

296
00:12:00,639 --> 00:12:01,519
non-trivial

297
00:12:01,519 --> 00:12:04,320
to construct several level policies that

298
00:12:04,320 --> 00:12:06,560
are compliant

299
00:12:06,560 --> 00:12:08,639
in addition we found the open system

300
00:12:08,639 --> 00:12:10,800
level policies are scattered and

301
00:12:10,800 --> 00:12:12,320
disorganized

302
00:12:12,320 --> 00:12:14,800
state-of-the-art approaches leverage a

303
00:12:14,800 --> 00:12:15,680
program

304
00:12:15,680 --> 00:12:18,560
analysis-based best effort search in the

305
00:12:18,560 --> 00:12:19,839
android code space

306
00:12:19,839 --> 00:12:22,880
to construct the android api permission

307
00:12:22,880 --> 00:12:25,360
mappings the results suffer from

308
00:12:25,360 --> 00:12:27,360
surprising low coverage

309
00:12:27,360 --> 00:12:29,120
for example they own they will they are

310
00:12:29,120 --> 00:12:30,480
only able to find

311
00:12:30,480 --> 00:12:33,040
required dangerous permission for about

312
00:12:33,040 --> 00:12:36,160
half of the android apis

313
00:12:36,160 --> 00:12:38,240
the other root cause is the

314
00:12:38,240 --> 00:12:40,560
cross-platform discrepancy

315
00:12:40,560 --> 00:12:43,040
since server api is designed to be

316
00:12:43,040 --> 00:12:44,160
cross-platform

317
00:12:44,160 --> 00:12:46,160
the effort to build server api

318
00:12:46,160 --> 00:12:47,839
permission policies

319
00:12:47,839 --> 00:12:50,480
that are comply with all operating

320
00:12:50,480 --> 00:12:51,440
systems

321
00:12:51,440 --> 00:12:53,120
has been complicated by the

322
00:12:53,120 --> 00:12:56,160
inconsistency between android and lis

323
00:12:56,160 --> 00:12:59,040
is in terms of the resource protection

324
00:12:59,040 --> 00:13:01,440
consider bluetooth scan as an example

325
00:13:01,440 --> 00:13:04,639
android api bluetooth le scanner and ios

326
00:13:04,639 --> 00:13:05,440
api

327
00:13:05,440 --> 00:13:08,959
cv central manager provided the host app

328
00:13:08,959 --> 00:13:10,800
with success to the bluetooth scan

329
00:13:10,800 --> 00:13:12,160
results

330
00:13:12,160 --> 00:13:14,959
whose app reacted to aps and provide a

331
00:13:14,959 --> 00:13:15,600
sub 5

332
00:13:15,600 --> 00:13:20,880
api ws again bluetooth devices

333
00:13:20,880 --> 00:13:23,040
android protects x api with generous

334
00:13:23,040 --> 00:13:24,000
level permission

335
00:13:24,000 --> 00:13:27,040
access file location in contrast

336
00:13:27,040 --> 00:13:29,760
ls does not require any permissions or

337
00:13:29,760 --> 00:13:30,639
entitlements

338
00:13:30,639 --> 00:13:34,800
on its api in this case what should the

339
00:13:34,800 --> 00:13:38,320
self api permission be for the host

340
00:13:38,320 --> 00:13:40,079
that can be that should be required for

341
00:13:40,079 --> 00:13:42,560
the setup api

342
00:13:42,560 --> 00:13:45,760
the answer is host apps you already do

343
00:13:45,760 --> 00:13:47,839
not require any

344
00:13:47,839 --> 00:13:51,360
on the koreabook on the bluetooth

345
00:13:51,360 --> 00:13:54,800
server api we found that the fbi dealer

346
00:13:54,800 --> 00:13:57,120
tend to leave the related server api

347
00:13:57,120 --> 00:13:58,320
unprotected

348
00:13:58,320 --> 00:14:00,959
for example the server apis for

349
00:14:00,959 --> 00:14:03,279
bluetooth scan are not protected in

350
00:14:03,279 --> 00:14:05,040
multiple whole steps

351
00:14:05,040 --> 00:14:07,040
actually the difference in policy level

352
00:14:07,040 --> 00:14:08,160
protection

353
00:14:08,160 --> 00:14:10,800
could result from an additional security

354
00:14:10,800 --> 00:14:11,680
guard

355
00:14:11,680 --> 00:14:14,399
put in place by the opening systems

356
00:14:14,399 --> 00:14:14,800
which

357
00:14:14,800 --> 00:14:17,920
is unaware to the fpf designer

358
00:14:17,920 --> 00:14:21,199
in the bluetooth scan example

359
00:14:21,199 --> 00:14:23,120
combining the signal strength and the

360
00:14:23,120 --> 00:14:25,680
device id return value

361
00:14:25,680 --> 00:14:28,160
in the full scan result can review the

362
00:14:28,160 --> 00:14:31,600
user's geolocation on android

363
00:14:31,600 --> 00:14:34,079
the id and the signal stress are

364
00:14:34,079 --> 00:14:35,680
returned

365
00:14:35,680 --> 00:14:39,120
so the so at the android require

366
00:14:39,120 --> 00:14:40,000
permission

367
00:14:40,000 --> 00:14:43,120
on the only android api ios

368
00:14:43,120 --> 00:14:47,360
however one of the device id

369
00:14:47,360 --> 00:14:51,440
is authenticated so the ls

370
00:14:51,440 --> 00:14:54,320
result can now be elaborate to reveal

371
00:14:54,320 --> 00:14:56,320
the user skill location

372
00:14:56,320 --> 00:15:01,760
and so the app does not product this api

373
00:15:01,760 --> 00:15:04,160
in total we tested 11 host apps

374
00:15:04,160 --> 00:15:06,800
including apps like wechat and tiktok

375
00:15:06,800 --> 00:15:09,839
we found 39 escape separate apis in

376
00:15:09,839 --> 00:15:12,959
six of them this 39

377
00:15:12,959 --> 00:15:15,360
escape sub api covers five different

378
00:15:15,360 --> 00:15:16,720
system resources

379
00:15:16,720 --> 00:15:19,440
including wi-fi bluetooth microphone

380
00:15:19,440 --> 00:15:20,000
camera

381
00:15:20,000 --> 00:15:25,199
and ipcon the third weakness we found

382
00:15:25,199 --> 00:15:27,040
but the second weakness we found is a

383
00:15:27,040 --> 00:15:28,639
new overlay

384
00:15:28,639 --> 00:15:31,199
holder that exists in access control

385
00:15:31,199 --> 00:15:34,959
management of the ibm system

386
00:15:34,959 --> 00:15:37,120
this attack is a new type of ui

387
00:15:37,120 --> 00:15:38,160
redressing tab

388
00:15:38,160 --> 00:15:40,800
for the checking attack before we go

389
00:15:40,800 --> 00:15:42,480
into details of this attack

390
00:15:42,480 --> 00:15:44,800
let's quickly go over the basics of the

391
00:15:44,800 --> 00:15:46,320
click checking on android

392
00:15:46,320 --> 00:15:48,079
on android the permission grinding

393
00:15:48,079 --> 00:15:50,000
window features a protection

394
00:15:50,000 --> 00:15:52,959
against quickjacking gaps that is when

395
00:15:52,959 --> 00:15:54,560
the permission grounding window is

396
00:15:54,560 --> 00:15:55,199
covered

397
00:15:55,199 --> 00:15:58,320
by any other windows the user clicks

398
00:15:58,320 --> 00:15:59,759
will be rejected

399
00:15:59,759 --> 00:16:03,440
to stop any potential attacks

400
00:16:03,440 --> 00:16:06,079
so the defense of this attack is that

401
00:16:06,079 --> 00:16:07,199
the android will

402
00:16:07,199 --> 00:16:10,000
will remove the overlays created by

403
00:16:10,000 --> 00:16:12,079
third party apps

404
00:16:12,079 --> 00:16:14,399
and android designed a specific

405
00:16:14,399 --> 00:16:16,480
permission for this purpose

406
00:16:16,480 --> 00:16:23,839
that is hide non-system overlay windows

407
00:16:26,000 --> 00:16:28,000
however this permission is usually not

408
00:16:28,000 --> 00:16:29,839
available to host apps

409
00:16:29,839 --> 00:16:32,720
the permission is designed only to be

410
00:16:32,720 --> 00:16:33,360
available

411
00:16:33,360 --> 00:16:35,680
to system apps for us that are

412
00:16:35,680 --> 00:16:38,240
pre-installed by the device vendors

413
00:16:38,240 --> 00:16:40,160
this leaves an opportunity for us to

414
00:16:40,160 --> 00:16:42,560
explore

415
00:16:43,120 --> 00:16:45,440
recall that the host app are usually

416
00:16:45,440 --> 00:16:46,560
very powerful

417
00:16:46,560 --> 00:16:49,600
holding a lot of permissions and

418
00:16:49,600 --> 00:16:51,920
delegate them to the sub-apps through

419
00:16:51,920 --> 00:16:53,519
setup apis

420
00:16:53,519 --> 00:16:56,800
so the server apis are protected by

421
00:16:56,800 --> 00:16:58,720
satellite permissions and the select

422
00:16:58,720 --> 00:17:00,800
permissions granting window

423
00:17:00,800 --> 00:17:03,199
are not protected against click checking

424
00:17:03,199 --> 00:17:05,039
attacks

425
00:17:05,039 --> 00:17:07,119
so previous two channel tests only

426
00:17:07,119 --> 00:17:08,959
target the android permission graphing

427
00:17:08,959 --> 00:17:09,679
window

428
00:17:09,679 --> 00:17:12,319
and in this case we will target the

429
00:17:12,319 --> 00:17:13,679
information gradient window of these

430
00:17:13,679 --> 00:17:15,359
setup permissions

431
00:17:15,359 --> 00:17:17,839
so first user install the malicious

432
00:17:17,839 --> 00:17:18,640
android app

433
00:17:18,640 --> 00:17:20,799
which can draw overlays over the host

434
00:17:20,799 --> 00:17:21,760
apps

435
00:17:21,760 --> 00:17:24,799
then it can launch a colluding setup

436
00:17:24,799 --> 00:17:26,400
which does not need to be installed

437
00:17:26,400 --> 00:17:29,840
before by the user in many host apps

438
00:17:29,840 --> 00:17:31,919
the coding server will invoke the

439
00:17:31,919 --> 00:17:32,960
sensitive server

440
00:17:32,960 --> 00:17:35,840
apis accessing the sensitive resources

441
00:17:35,840 --> 00:17:38,160
of the users

442
00:17:38,160 --> 00:17:39,600
when you set up a permission grinding

443
00:17:39,600 --> 00:17:41,520
window of the wholesale

444
00:17:41,520 --> 00:17:44,840
pop-up the malicious android can draw

445
00:17:44,840 --> 00:17:47,600
overlay and allow the user to grant this

446
00:17:47,600 --> 00:17:49,280
setup permission

447
00:17:49,280 --> 00:17:52,400
to the loading setup the

448
00:17:52,400 --> 00:17:54,400
coordination of the malicious android

449
00:17:54,400 --> 00:17:56,320
app and the coding setup

450
00:17:56,320 --> 00:17:59,600
can be through the clipboard or

451
00:17:59,600 --> 00:18:00,480
websocket

452
00:18:00,480 --> 00:18:04,559
and any other technologies

453
00:18:05,280 --> 00:18:08,400
in total we tested 10 host apps that

454
00:18:08,400 --> 00:18:11,120
are available on android all 10 whole

455
00:18:11,120 --> 00:18:13,520
steps are vulnerable to our attack

456
00:18:13,520 --> 00:18:15,440
leveraging this attack the malicious

457
00:18:15,440 --> 00:18:17,679
android app can get access to the system

458
00:18:17,679 --> 00:18:18,960
resources like

459
00:18:18,960 --> 00:18:22,080
camera microphone that are considered

460
00:18:22,080 --> 00:18:25,199
well protected before

461
00:18:25,760 --> 00:18:27,840
the third weakness we found is the side

462
00:18:27,840 --> 00:18:30,160
window deception flow

463
00:18:30,160 --> 00:18:32,240
as a background we first introduced the

464
00:18:32,240 --> 00:18:34,480
fpf ui model

465
00:18:34,480 --> 00:18:36,799
the sub-app is displayed in a full

466
00:18:36,799 --> 00:18:37,679
screen window

467
00:18:37,679 --> 00:18:40,480
of the host app taking over the screen

468
00:18:40,480 --> 00:18:42,480
used by the hosa

469
00:18:42,480 --> 00:18:44,720
in the screenshot on the right areas

470
00:18:44,720 --> 00:18:45,919
color in

471
00:18:45,919 --> 00:18:49,120
green are controlled by the setup it is

472
00:18:49,120 --> 00:18:49,760
possible

473
00:18:49,760 --> 00:18:53,200
that a malaysia setup may fake the ui of

474
00:18:53,200 --> 00:18:56,080
the wholesale

475
00:18:56,080 --> 00:18:58,320
sensitive ui of the whole set for

476
00:18:58,320 --> 00:18:59,520
example the

477
00:18:59,520 --> 00:19:02,799
mobile wallet ui of wechat and alipay

478
00:19:02,799 --> 00:19:05,039
are also displayed in the area

479
00:19:05,039 --> 00:19:07,760
controlled by the server

480
00:19:07,760 --> 00:19:10,400
so in this case the server can fake

481
00:19:10,400 --> 00:19:11,760
local uis

482
00:19:11,760 --> 00:19:15,360
once explored the server can

483
00:19:15,360 --> 00:19:17,919
the server can steal users mobile wallet

484
00:19:17,919 --> 00:19:18,960
passwords

485
00:19:18,960 --> 00:19:22,960
which can be used for making payments

486
00:19:23,679 --> 00:19:26,000
we constructed a test sub-app that

487
00:19:26,000 --> 00:19:28,320
contains such phishing uis

488
00:19:28,320 --> 00:19:30,720
and submitted it to the wechat select

489
00:19:30,720 --> 00:19:34,960
store and passed their writing process

490
00:19:35,760 --> 00:19:38,720
a similar ui tool can attack the web app

491
00:19:38,720 --> 00:19:39,679
on chrome

492
00:19:39,679 --> 00:19:42,320
or as known as the progressive web app

493
00:19:42,320 --> 00:19:43,360
and the app click

494
00:19:43,360 --> 00:19:46,720
on safari when using a web app for the

495
00:19:46,720 --> 00:19:48,000
progressive web app

496
00:19:48,000 --> 00:19:50,880
the web app will be open in full screen

497
00:19:50,880 --> 00:19:52,000
without any ui

498
00:19:52,000 --> 00:19:54,640
of the browsers including the address

499
00:19:54,640 --> 00:19:55,120
bar

500
00:19:55,120 --> 00:19:57,360
that can tell you the current domain you

501
00:19:57,360 --> 00:19:58,799
are browsing

502
00:19:58,799 --> 00:20:01,200
users can freely navigate to other web

503
00:20:01,200 --> 00:20:02,080
pages

504
00:20:02,080 --> 00:20:04,480
outside of the domain of the current web

505
00:20:04,480 --> 00:20:05,360
app

506
00:20:05,360 --> 00:20:07,760
in this case the browser will display a

507
00:20:07,760 --> 00:20:09,840
banner on the top of the screen

508
00:20:09,840 --> 00:20:12,640
showing the origin of the web page as a

509
00:20:12,640 --> 00:20:14,720
defense

510
00:20:14,720 --> 00:20:16,799
in the screenshot on the right if we do

511
00:20:16,799 --> 00:20:17,919
a single sound

512
00:20:17,919 --> 00:20:21,280
using facebook you know in another web

513
00:20:21,280 --> 00:20:22,000
app

514
00:20:22,000 --> 00:20:24,240
then the browser will display a banner

515
00:20:24,240 --> 00:20:27,120
that is showing the facebook's url

516
00:20:27,120 --> 00:20:30,320
on top of the screen however

517
00:20:30,320 --> 00:20:33,039
the web app can imitate such banner when

518
00:20:33,039 --> 00:20:35,200
user is not even visiting the facebook

519
00:20:35,200 --> 00:20:36,400
page

520
00:20:36,400 --> 00:20:38,880
in this case the user would believe that

521
00:20:38,880 --> 00:20:39,679
she or he

522
00:20:39,679 --> 00:20:43,200
is on the facebook website and gave all

523
00:20:43,200 --> 00:20:43,760
their

524
00:20:43,760 --> 00:20:47,200
facebook credentials to the web app

525
00:20:47,200 --> 00:20:49,520
so the problem is has been acknowledged

526
00:20:49,520 --> 00:20:50,240
by the

527
00:20:50,240 --> 00:20:53,520
chrome and apple team

528
00:20:53,520 --> 00:20:55,760
so current phishing anti-fishing

529
00:20:55,760 --> 00:20:56,880
techniques

530
00:20:56,880 --> 00:21:00,240
that works only on app level which focus

531
00:21:00,240 --> 00:21:02,880
on identify the app of the foreground

532
00:21:02,880 --> 00:21:03,760
window

533
00:21:03,760 --> 00:21:06,240
in our attack the foreground window is

534
00:21:06,240 --> 00:21:07,760
always the whole step

535
00:21:07,760 --> 00:21:10,320
since from the percep perspective of the

536
00:21:10,320 --> 00:21:11,440
operating system

537
00:21:11,440 --> 00:21:13,120
the satellite is running within the

538
00:21:13,120 --> 00:21:15,600
wholesale and treaty

539
00:21:15,600 --> 00:21:18,640
as a whole by the operating system

540
00:21:18,640 --> 00:21:20,320
so they will now be able to tell the

541
00:21:20,320 --> 00:21:22,720
difference between a server and hosa

542
00:21:22,720 --> 00:21:25,200
so they are not able to detect that kind

543
00:21:25,200 --> 00:21:27,679
of attack

544
00:21:29,760 --> 00:21:32,080
the first attack we discard discover is

545
00:21:32,080 --> 00:21:33,039
the 7th

546
00:21:33,039 --> 00:21:35,120
left cycle hijacking which is the

547
00:21:35,120 --> 00:21:37,600
weakness in the lifecycle management

548
00:21:37,600 --> 00:21:39,330
of these sub-apps

549
00:21:39,330 --> 00:21:41,919
[Music]

550
00:21:41,919 --> 00:21:43,840
to give cell lab user a native outlet

551
00:21:43,840 --> 00:21:45,840
experience the whole set

552
00:21:45,840 --> 00:21:48,640
creates attacks for the sub-apps in the

553
00:21:48,640 --> 00:21:50,320
android recent screens

554
00:21:50,320 --> 00:21:53,120
in which user can quickly access as they

555
00:21:53,120 --> 00:21:54,480
opened before

556
00:21:54,480 --> 00:21:56,640
the screenshot on the right is an

557
00:21:56,640 --> 00:21:58,400
example of the task

558
00:21:58,400 --> 00:22:02,480
we check created for layer stub app

559
00:22:04,720 --> 00:22:07,360
to implement the recent screen feature

560
00:22:07,360 --> 00:22:09,760
each host up need to predefine a number

561
00:22:09,760 --> 00:22:10,080
of

562
00:22:10,080 --> 00:22:12,480
activities that will be used to

563
00:22:12,480 --> 00:22:13,280
accommodate

564
00:22:13,280 --> 00:22:15,760
this sub-app since the number of

565
00:22:15,760 --> 00:22:18,159
predefined activities is limited

566
00:22:18,159 --> 00:22:20,880
the number of the sub-apps user can see

567
00:22:20,880 --> 00:22:21,520
in the

568
00:22:21,520 --> 00:22:24,480
recent screen is also limited to limited

569
00:22:24,480 --> 00:22:26,400
the limit is different for different

570
00:22:26,400 --> 00:22:27,120
wholesale

571
00:22:27,120 --> 00:22:29,760
for example for wechat is file and for

572
00:22:29,760 --> 00:22:30,400
chrome is

573
00:22:30,400 --> 00:22:33,360
it when the limit is reached a mandatory

574
00:22:33,360 --> 00:22:34,559
recycling process

575
00:22:34,559 --> 00:22:37,520
starts the newly launched setup will

576
00:22:37,520 --> 00:22:38,400
replace the

577
00:22:38,400 --> 00:22:42,480
oldies-wise task in the recent screen

578
00:22:42,480 --> 00:22:45,520
silently which means the user will not

579
00:22:45,520 --> 00:22:48,640
know the first sub-app he or she used

580
00:22:48,640 --> 00:22:52,799
that is no longer exist in the recent

581
00:22:52,840 --> 00:22:55,039
screen

582
00:22:55,039 --> 00:22:58,000
so a malicious android app can imitate

583
00:22:58,000 --> 00:22:58,720
the

584
00:22:58,720 --> 00:23:01,760
disappeared sub-app's task by inserting

585
00:23:01,760 --> 00:23:02,799
a new text

586
00:23:02,799 --> 00:23:05,600
of its own in the recent screen which is

587
00:23:05,600 --> 00:23:07,120
also known as a test

588
00:23:07,120 --> 00:23:10,400
hijacking attack there are two questions

589
00:23:10,400 --> 00:23:11,840
to answer before we can

590
00:23:11,840 --> 00:23:15,280
insert the fake task first is

591
00:23:15,280 --> 00:23:18,240
what is the disappear setup the second

592
00:23:18,240 --> 00:23:18,640
is

593
00:23:18,640 --> 00:23:22,400
when shall we insert

594
00:23:22,400 --> 00:23:24,960
we found that there is a set channel

595
00:23:24,960 --> 00:23:27,760
that we can use to observe the sub-app

596
00:23:27,760 --> 00:23:31,200
launch operation in real time so we have

597
00:23:31,200 --> 00:23:34,240
answers for the two questions each time

598
00:23:34,240 --> 00:23:35,760
a sub-app is launched

599
00:23:35,760 --> 00:23:38,320
the hosa will add in some files in the

600
00:23:38,320 --> 00:23:39,840
external storage

601
00:23:39,840 --> 00:23:42,559
that is accessible by the malicious

602
00:23:42,559 --> 00:23:44,080
annual apps

603
00:23:44,080 --> 00:23:46,720
usually these files are for caching

604
00:23:46,720 --> 00:23:47,760
purpose

605
00:23:47,760 --> 00:23:50,720
we can reliably identify the sub-app

606
00:23:50,720 --> 00:23:51,600
being launched

607
00:23:51,600 --> 00:23:54,320
through those files and cut the number

608
00:23:54,320 --> 00:23:54,640
of

609
00:23:54,640 --> 00:23:57,200
launched setup so far to find the

610
00:23:57,200 --> 00:23:58,240
correct time

611
00:23:58,240 --> 00:24:02,159
to insert the fake task

612
00:24:02,240 --> 00:24:04,320
the consequence of this attack can be

613
00:24:04,320 --> 00:24:06,159
various and serious

614
00:24:06,159 --> 00:24:08,799
depending on the targeting setup for

615
00:24:08,799 --> 00:24:10,000
example if we target

616
00:24:10,000 --> 00:24:12,960
a health setup the health information of

617
00:24:12,960 --> 00:24:14,080
the victim user

618
00:24:14,080 --> 00:24:17,120
will be elite and we can also get the

619
00:24:17,120 --> 00:24:18,240
bank credentials

620
00:24:18,240 --> 00:24:21,440
or travel histories of the user if we

621
00:24:21,440 --> 00:24:22,000
task

622
00:24:22,000 --> 00:24:24,480
we target the banking setup or traveling

623
00:24:24,480 --> 00:24:27,520
set up they are using

624
00:24:27,760 --> 00:24:30,240
to understand the scope and magnitude of

625
00:24:30,240 --> 00:24:31,360
all four attacks

626
00:24:31,360 --> 00:24:34,080
we presented we analyzed eleven most

627
00:24:34,080 --> 00:24:35,360
popular commercial

628
00:24:35,360 --> 00:24:39,279
fpf ecosystem on both ios and android

629
00:24:39,279 --> 00:24:42,640
including wechat tiktok chrome etc

630
00:24:42,640 --> 00:24:46,400
all of them suffered some or all of the

631
00:24:46,400 --> 00:24:47,679
aforementioned

632
00:24:47,679 --> 00:24:50,080
attacks we mentioned of information

633
00:24:50,080 --> 00:24:52,399
attacks

634
00:24:53,200 --> 00:24:56,080
so to summarize doesn't mean as

635
00:24:56,080 --> 00:24:57,600
mainstream and vendors

636
00:24:57,600 --> 00:25:00,480
participate in the fbi paradigm by

637
00:25:00,480 --> 00:25:01,760
releasing sabbath

638
00:25:01,760 --> 00:25:04,400
supports their apps can no longer

639
00:25:04,400 --> 00:25:06,240
benefit from the protection

640
00:25:06,240 --> 00:25:08,640
offered by the of modern operating

641
00:25:08,640 --> 00:25:10,640
systems

642
00:25:10,640 --> 00:25:12,640
which have been hardened after years of

643
00:25:12,640 --> 00:25:14,880
open security research

644
00:25:14,880 --> 00:25:17,440
in this talk we presented the challenges

645
00:25:17,440 --> 00:25:19,240
in building a secure

646
00:25:19,240 --> 00:25:21,600
self-ecosystem on top of the operating

647
00:25:21,600 --> 00:25:22,559
system

648
00:25:22,559 --> 00:25:25,039
including the lack of security standard

649
00:25:25,039 --> 00:25:27,120
and practice in building an fdf

650
00:25:27,120 --> 00:25:28,240
ecosystem

651
00:25:28,240 --> 00:25:30,640
the security gap between the underlying

652
00:25:30,640 --> 00:25:31,679
operating system

653
00:25:31,679 --> 00:25:34,080
and the limited app level capabilities

654
00:25:34,080 --> 00:25:35,360
of the wholesale

655
00:25:35,360 --> 00:25:37,760
also the lack of operating system level

656
00:25:37,760 --> 00:25:40,158
support

657
00:25:40,720 --> 00:25:45,760
and thank you for your listening

