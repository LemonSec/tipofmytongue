1
00:00:01,180 --> 00:00:14,730
[Music]

2
00:00:17,279 --> 00:00:18,480
hello everyone

3
00:00:18,480 --> 00:00:21,119
i'm very happy to share our work hammers

4
00:00:21,119 --> 00:00:22,000
attack

5
00:00:22,000 --> 00:00:25,039
this work aim to steal the dna models

6
00:00:25,039 --> 00:00:28,840
in ai prioritization department

7
00:00:28,840 --> 00:00:31,760
scenarios before we go to details

8
00:00:31,760 --> 00:00:34,399
let me introduce the speakers and

9
00:00:34,399 --> 00:00:36,160
collaborators

10
00:00:36,160 --> 00:00:39,520
i'm yue chan chang i'm from baidu

11
00:00:39,520 --> 00:00:41,120
security research

12
00:00:41,120 --> 00:00:44,239
i'm working on the system security like

13
00:00:44,239 --> 00:00:48,320
sdx and suv and also some

14
00:00:48,320 --> 00:00:50,800
hardware securities like hammers and the

15
00:00:50,800 --> 00:00:52,480
macro architecture

16
00:00:52,480 --> 00:00:56,879
vulnerabilities like spectrum and stuff

17
00:00:56,879 --> 00:00:59,680
mr yang kunju working on the gpu

18
00:00:59,680 --> 00:01:00,399
security

19
00:01:00,399 --> 00:01:03,199
this work is mainly done during his

20
00:01:03,199 --> 00:01:05,199
internship at baidu

21
00:01:05,199 --> 00:01:08,880
uh dr huxung zhou working on the jpg

22
00:01:08,880 --> 00:01:12,159
hbc and some security staff stuff

23
00:01:12,159 --> 00:01:15,119
he's working in the women where this

24
00:01:15,119 --> 00:01:16,080
work

25
00:01:16,080 --> 00:01:19,759
we're using the hammers as the name

26
00:01:19,759 --> 00:01:22,720
because hammers is the master of shifts

27
00:01:22,720 --> 00:01:25,520
and the god of steels

28
00:01:25,520 --> 00:01:28,560
on this work we also uh published

29
00:01:28,560 --> 00:01:32,560
at using security 2021.

30
00:01:32,560 --> 00:01:34,720
the full version is accessible on the

31
00:01:34,720 --> 00:01:37,280
arcade

32
00:01:37,280 --> 00:01:39,680
now let's talk about some motivations

33
00:01:39,680 --> 00:01:40,880
the ai services

34
00:01:40,880 --> 00:01:44,240
is used everywhere from the autonomous

35
00:01:44,240 --> 00:01:45,040
driving

36
00:01:45,040 --> 00:01:48,079
to the prioritization department lots of

37
00:01:48,079 --> 00:01:48,479
big

38
00:01:48,479 --> 00:01:52,720
track and the big wonders in these areas

39
00:01:52,720 --> 00:01:55,520
so typically people need a very big data

40
00:01:55,520 --> 00:01:56,159
and uh

41
00:01:56,159 --> 00:01:59,600
tens of the gpos to training and guide

42
00:01:59,600 --> 00:02:01,759
very high quality dna models

43
00:02:01,759 --> 00:02:05,280
it's not cheap typically you need

44
00:02:05,280 --> 00:02:08,360
like one million dollars of

45
00:02:08,360 --> 00:02:12,640
400k dollars to gather very high quality

46
00:02:12,640 --> 00:02:14,879
services to deploy the commercial

47
00:02:14,879 --> 00:02:16,560
services

48
00:02:16,560 --> 00:02:19,760
so face such situations

49
00:02:19,760 --> 00:02:23,360
the attackers may propose say okay

50
00:02:23,360 --> 00:02:26,480
can we steal some information and

51
00:02:26,480 --> 00:02:28,400
there's some existing work

52
00:02:28,400 --> 00:02:32,560
indicate that the attackers can

53
00:02:32,560 --> 00:02:34,840
leak the architectures the

54
00:02:34,840 --> 00:02:36,560
hyperparameters

55
00:02:36,560 --> 00:02:39,599
and the parameters however

56
00:02:39,599 --> 00:02:43,360
all of them can only reconstruct the

57
00:02:43,360 --> 00:02:44,640
partial model

58
00:02:44,640 --> 00:02:47,120
meaning none of them can fully

59
00:02:47,120 --> 00:02:48,080
reconstruct

60
00:02:48,080 --> 00:02:51,599
the whole dna model and the hammers

61
00:02:51,599 --> 00:02:52,239
attack

62
00:02:52,239 --> 00:02:54,640
is the first work that can fully steal

63
00:02:54,640 --> 00:02:55,840
the dna models

64
00:02:55,840 --> 00:03:01,280
with zero inference accuracy detections

65
00:03:01,440 --> 00:03:05,360
uh the worst law scenario uh

66
00:03:05,360 --> 00:03:08,480
the left side is the uh the host there's

67
00:03:08,480 --> 00:03:10,239
some ai services

68
00:03:10,239 --> 00:03:14,080
executing there and the operating system

69
00:03:14,080 --> 00:03:17,440
windows mac os and linux and the

70
00:03:17,440 --> 00:03:20,480
hardware layer connected to a gpu

71
00:03:20,480 --> 00:03:23,599
through the pcie bus and we

72
00:03:23,599 --> 00:03:27,360
identify there's some pcie bus could be

73
00:03:27,360 --> 00:03:28,319
a new attack

74
00:03:28,319 --> 00:03:32,159
surface and is highly risk in this ai

75
00:03:32,159 --> 00:03:33,760
prioritization environment

76
00:03:33,760 --> 00:03:36,480
because attackers can physically access

77
00:03:36,480 --> 00:03:36,879
this

78
00:03:36,879 --> 00:03:39,920
working environment and they possibly to

79
00:03:39,920 --> 00:03:42,319
install some sniffing devices

80
00:03:42,319 --> 00:03:47,839
on the pcie bus to steal the data

81
00:03:48,080 --> 00:03:50,720
this is some background the dna is that

82
00:03:50,720 --> 00:03:52,080
system stack

83
00:03:52,080 --> 00:03:55,360
the up layer is ai services and the

84
00:03:55,360 --> 00:03:58,799
framework layer the tensorflow panel

85
00:03:58,799 --> 00:03:59,599
panel

86
00:03:59,599 --> 00:04:02,720
pen touch and the cuda

87
00:04:02,720 --> 00:04:06,879
open gl uh run upon the gpu runtime

88
00:04:06,879 --> 00:04:08,720
and the gpu driver in the kernel space

89
00:04:08,720 --> 00:04:10,000
communicate with

90
00:04:10,000 --> 00:04:12,799
system calls like l control and the

91
00:04:12,799 --> 00:04:14,400
bottom layer is the

92
00:04:14,400 --> 00:04:16,880
gpos they're connected to the system

93
00:04:16,880 --> 00:04:19,918
through the pcie bus

94
00:04:19,918 --> 00:04:22,639
and the working mode like the cpu and

95
00:04:22,639 --> 00:04:24,479
gpus are connected

96
00:04:24,479 --> 00:04:27,040
through the pcie bus so the gpu is a

97
00:04:27,040 --> 00:04:28,000
passive

98
00:04:28,000 --> 00:04:30,800
device so each time they want to run

99
00:04:30,800 --> 00:04:32,800
some services the gpu will

100
00:04:32,800 --> 00:04:36,240
issue a command so here this the host

101
00:04:36,240 --> 00:04:37,199
will send to

102
00:04:37,199 --> 00:04:40,840
the data sent to the code and launch the

103
00:04:40,840 --> 00:04:42,080
kernel

104
00:04:42,080 --> 00:04:44,400
after the finish the kernel will

105
00:04:44,400 --> 00:04:45,120
generate some

106
00:04:45,120 --> 00:04:50,000
output and send back to the cpu side

107
00:04:50,000 --> 00:04:52,720
so uh so this working mode we have two

108
00:04:52,720 --> 00:04:54,400
observations

109
00:04:54,400 --> 00:04:57,440
why is the to use the totally the

110
00:04:57,440 --> 00:04:59,759
command driveway interaction

111
00:04:59,759 --> 00:05:02,880
mode and

112
00:05:02,880 --> 00:05:05,600
the second observation is update and

113
00:05:05,600 --> 00:05:06,320
called

114
00:05:06,320 --> 00:05:10,080
a pass through the pcie bus

115
00:05:10,080 --> 00:05:13,120
so this is badass so it's highly

116
00:05:13,120 --> 00:05:14,080
possible

117
00:05:14,080 --> 00:05:17,120
we got the information by

118
00:05:17,120 --> 00:05:20,720
intercepting the pcie bus however

119
00:05:20,720 --> 00:05:23,360
the attack is not that straightforward

120
00:05:23,360 --> 00:05:24,080
there are many

121
00:05:24,080 --> 00:05:26,720
challenges there the first challenge is

122
00:05:26,720 --> 00:05:29,520
coming from the closed source

123
00:05:29,520 --> 00:05:32,639
code and undocumented data structures so

124
00:05:32,639 --> 00:05:34,320
all these obstacles

125
00:05:34,320 --> 00:05:38,000
is ask us we how to do the reverse

126
00:05:38,000 --> 00:05:40,080
engineered lots of the effort and the

127
00:05:40,080 --> 00:05:41,840
manpower in this

128
00:05:41,840 --> 00:05:45,840
topic and the third one

129
00:05:45,840 --> 00:05:48,720
the second one is the numerous noises

130
00:05:48,720 --> 00:05:49,680
and the out of

131
00:05:49,680 --> 00:05:53,280
orders in pcie packets

132
00:05:53,280 --> 00:05:56,039
so we have to do do the uh

133
00:05:56,039 --> 00:05:57,600
standardization to fill

134
00:05:57,600 --> 00:05:59,759
out all the parameters and we how to

135
00:05:59,759 --> 00:06:01,039
carefully we cannot

136
00:06:01,039 --> 00:06:03,520
filter out the useful package we only

137
00:06:03,520 --> 00:06:04,160
can

138
00:06:04,160 --> 00:06:07,680
fill out the noises and how to do the

139
00:06:07,680 --> 00:06:08,720
order correction

140
00:06:08,720 --> 00:06:11,360
to crack the order make them in the

141
00:06:11,360 --> 00:06:13,280
correct order

142
00:06:13,280 --> 00:06:15,199
and the third one is the semantic loss

143
00:06:15,199 --> 00:06:16,800
in the psi traffic

144
00:06:16,800 --> 00:06:20,000
on the whole side the gpu

145
00:06:20,000 --> 00:06:22,160
driver maintain everything they know the

146
00:06:22,160 --> 00:06:23,120
semantic

147
00:06:23,120 --> 00:06:25,840
but it does not necessarily to send out

148
00:06:25,840 --> 00:06:26,560
this

149
00:06:26,560 --> 00:06:29,840
uh semantic information to the

150
00:06:29,840 --> 00:06:32,800
uh gpu side so only use the command you

151
00:06:32,800 --> 00:06:33,120
just

152
00:06:33,120 --> 00:06:36,400
do this however in this situation we

153
00:06:36,400 --> 00:06:36,960
cannot

154
00:06:36,960 --> 00:06:40,639
intercept the semantic information so

155
00:06:40,639 --> 00:06:42,800
the laws of the semantic information we

156
00:06:42,800 --> 00:06:43,680
how to

157
00:06:43,680 --> 00:06:45,680
using some other information to

158
00:06:45,680 --> 00:06:48,240
reconstruct it is semantic

159
00:06:48,240 --> 00:06:51,759
so uh let me

160
00:06:51,759 --> 00:06:54,240
go over the attack overview to say how

161
00:06:54,240 --> 00:06:55,919
to

162
00:06:55,919 --> 00:06:59,360
overcome the about challenges in our

163
00:06:59,360 --> 00:07:03,199
work so this is a check overview

164
00:07:03,199 --> 00:07:06,560
from the original model we have to

165
00:07:06,560 --> 00:07:10,319
install a device to do a pcie

166
00:07:10,319 --> 00:07:12,960
intercepting and then we go to the

167
00:07:12,960 --> 00:07:14,240
traffic analysis

168
00:07:14,240 --> 00:07:17,199
we get we remove the noise we got uh in

169
00:07:17,199 --> 00:07:18,720
order traffic

170
00:07:18,720 --> 00:07:21,599
and then we extraction the infrared used

171
00:07:21,599 --> 00:07:23,680
for information like the command

172
00:07:23,680 --> 00:07:25,440
because it's a command drive with

173
00:07:25,440 --> 00:07:27,599
working mode and then we do the

174
00:07:27,599 --> 00:07:30,000
reconstruction to

175
00:07:30,000 --> 00:07:32,479
reconstruct the architecture

176
00:07:32,479 --> 00:07:34,560
hyperparameters and parameters

177
00:07:34,560 --> 00:07:37,440
and finally we got the generated model

178
00:07:37,440 --> 00:07:39,039
we expected the generator y

179
00:07:39,039 --> 00:07:41,759
is the same as the original one in terms

180
00:07:41,759 --> 00:07:44,960
of the inverse accuracy

181
00:07:44,960 --> 00:07:48,080
so let's first talk about the psi

182
00:07:48,080 --> 00:07:52,160
interceptors now this is our tester

183
00:07:52,160 --> 00:07:55,680
working byte so we

184
00:07:55,680 --> 00:07:59,440
are using this the gpu the gpua working

185
00:07:59,440 --> 00:08:02,080
three kind of gpus the nvidia enforced

186
00:08:02,080 --> 00:08:05,440
jt 730 and the rtx

187
00:08:05,440 --> 00:08:09,520
1080 rti rtx 20 adti

188
00:08:09,520 --> 00:08:12,240
and we are the interceptor we're using

189
00:08:12,240 --> 00:08:15,840
the pcie protocol analyzer

190
00:08:15,840 --> 00:08:18,479
and the dm models we're working on the

191
00:08:18,479 --> 00:08:22,639
menaced vgg and the rice knight

192
00:08:23,039 --> 00:08:26,240
oh to some terminologies we

193
00:08:26,240 --> 00:08:29,280
we can say there are some pcie packets

194
00:08:29,280 --> 00:08:32,958
the psi packet can divide into two parts

195
00:08:32,958 --> 00:08:36,399
one is a higher other is beside payload

196
00:08:36,399 --> 00:08:39,279
the higher there there is lots of field

197
00:08:39,279 --> 00:08:40,000
to indicate

198
00:08:40,000 --> 00:08:42,240
some different meaning and the important

199
00:08:42,240 --> 00:08:44,480
one is the type

200
00:08:44,480 --> 00:08:47,600
and the payload will in include contain

201
00:08:47,600 --> 00:08:48,080
the

202
00:08:48,080 --> 00:08:50,640
command the command also divided into

203
00:08:50,640 --> 00:08:52,640
two parties command header and command

204
00:08:52,640 --> 00:08:53,360
data

205
00:08:53,360 --> 00:08:56,480
command data will have the waste the

206
00:08:56,480 --> 00:09:00,080
command and the the

207
00:09:00,080 --> 00:09:02,640
kernels so all useful information will

208
00:09:02,640 --> 00:09:05,120
in this part

209
00:09:05,120 --> 00:09:08,399
so the tag is very important to

210
00:09:08,399 --> 00:09:10,959
indicate the package relationships if

211
00:09:10,959 --> 00:09:13,120
the tag value is the same

212
00:09:13,120 --> 00:09:16,160
we can link them together to say there

213
00:09:16,160 --> 00:09:17,360
is some up

214
00:09:17,360 --> 00:09:19,760
a stream package and downstream package

215
00:09:19,760 --> 00:09:21,680
and address and payload can link

216
00:09:21,680 --> 00:09:24,800
also through the tag

217
00:09:25,279 --> 00:09:28,640
okay let's talk about the traffic

218
00:09:28,640 --> 00:09:31,440
processing stage

219
00:09:31,440 --> 00:09:35,040
there are some quick facts the loss of

220
00:09:35,040 --> 00:09:35,680
numerous

221
00:09:35,680 --> 00:09:38,399
noises there this uh only using the

222
00:09:38,399 --> 00:09:40,240
meanings as an example

223
00:09:40,240 --> 00:09:44,399
so we intercept over one million packets

224
00:09:44,399 --> 00:09:47,760
but the useful package is quite a small

225
00:09:47,760 --> 00:09:48,560
portion

226
00:09:48,560 --> 00:09:52,080
like only 20 000 packages

227
00:09:52,080 --> 00:09:55,600
that's meaning up to

228
00:09:56,440 --> 00:09:59,360
98.3 packages are noise

229
00:09:59,360 --> 00:10:02,800
so we have to carefully pick out this a

230
00:10:02,800 --> 00:10:04,880
small portion of the

231
00:10:04,880 --> 00:10:07,600
useful packages and remove all the

232
00:10:07,600 --> 00:10:09,360
others

233
00:10:09,360 --> 00:10:12,480
unused part

234
00:10:12,800 --> 00:10:15,839
and we also found out there are some

235
00:10:15,839 --> 00:10:18,880
out of order issues you see this

236
00:10:18,880 --> 00:10:22,000
true part is out of order so this

237
00:10:22,000 --> 00:10:24,880
out of order issues is everywhere we how

238
00:10:24,880 --> 00:10:25,920
to

239
00:10:25,920 --> 00:10:28,720
address them so let's talk about the

240
00:10:28,720 --> 00:10:31,040
highlighter how to solve this problem

241
00:10:31,040 --> 00:10:34,480
like p3 is generated a package from the

242
00:10:34,480 --> 00:10:36,480
pcie protocol analyzer

243
00:10:36,480 --> 00:10:39,839
to how the downstream package id

244
00:10:39,839 --> 00:10:42,399
and the upstream package id under the

245
00:10:42,399 --> 00:10:44,720
content

246
00:10:44,720 --> 00:10:48,000
so we observe that the upstream package

247
00:10:48,000 --> 00:10:48,399
is

248
00:10:48,399 --> 00:10:51,360
ie order so we're starting from the

249
00:10:51,360 --> 00:10:52,160
upstream

250
00:10:52,160 --> 00:10:55,360
package we through the tag

251
00:10:55,360 --> 00:10:58,880
that's the tag to link to the downstream

252
00:10:58,880 --> 00:11:00,399
package

253
00:11:00,399 --> 00:11:02,800
and the classroom package and households

254
00:11:02,800 --> 00:11:04,800
room through the package id

255
00:11:04,800 --> 00:11:08,320
will go to a row of the in this package

256
00:11:08,320 --> 00:11:09,279
ray

257
00:11:09,279 --> 00:11:12,880
and this will be also corresponding to

258
00:11:12,880 --> 00:11:15,519
the option like this double confirm we

259
00:11:15,519 --> 00:11:15,920
got

260
00:11:15,920 --> 00:11:19,120
the correct link this is a

261
00:11:19,120 --> 00:11:23,839
loop so and then we will sort

262
00:11:23,839 --> 00:11:27,440
the upstream package id and generate the

263
00:11:27,440 --> 00:11:28,800
final

264
00:11:28,800 --> 00:11:32,160
package this is the p three prime and

265
00:11:32,160 --> 00:11:35,200
we found on this order is in order

266
00:11:35,200 --> 00:11:38,880
so but this part is off motor

267
00:11:40,160 --> 00:11:45,760
okay let's go to the second part

268
00:11:46,399 --> 00:11:48,880
the second part is is attracted the

269
00:11:48,880 --> 00:11:52,560
header and the command

270
00:11:53,519 --> 00:11:57,600
okay logged about the gpu command

271
00:11:57,600 --> 00:12:00,720
the gpu the driver will put the gpu

272
00:12:00,720 --> 00:12:03,440
command into a ring buffer

273
00:12:03,440 --> 00:12:06,560
and the gpu will fetch

274
00:12:06,560 --> 00:12:09,920
the command from this buffer select

275
00:12:09,920 --> 00:12:13,839
a model of the pop and stop so each

276
00:12:13,839 --> 00:12:17,440
gpu command have two parts firstly the

277
00:12:17,440 --> 00:12:19,360
size the second is offside

278
00:12:19,360 --> 00:12:24,079
so offside there is a command buffers

279
00:12:24,079 --> 00:12:27,760
so the outside is from the the base

280
00:12:27,760 --> 00:12:30,800
to uh to some location this offside

281
00:12:30,800 --> 00:12:34,320
so starting here and how large of data

282
00:12:34,320 --> 00:12:34,880
we should

283
00:12:34,880 --> 00:12:38,000
transfer it using this uh

284
00:12:38,000 --> 00:12:42,160
cpu command so this is the working mode

285
00:12:42,160 --> 00:12:45,920
for how gpu command works here

286
00:12:45,920 --> 00:12:49,519
and there are lots of the gpuo tabs like

287
00:12:49,519 --> 00:12:51,760
the gpu initialization command

288
00:12:51,760 --> 00:12:53,839
synchronization command

289
00:12:53,839 --> 00:12:56,160
date moment command kernel launch

290
00:12:56,160 --> 00:12:57,360
command

291
00:12:57,360 --> 00:13:00,399
so for our work we only introduced two

292
00:13:00,399 --> 00:13:01,279
kind of command

293
00:13:01,279 --> 00:13:03,279
first the data movement command we say

294
00:13:03,279 --> 00:13:04,720
is a d command

295
00:13:04,720 --> 00:13:06,720
and the chronological model is called

296
00:13:06,720 --> 00:13:08,399
the k command

297
00:13:08,399 --> 00:13:11,760
so we identify this d command and k

298
00:13:11,760 --> 00:13:14,000
commands or offline training later we'll

299
00:13:14,000 --> 00:13:15,360
talk about how to do

300
00:13:15,360 --> 00:13:18,160
to this offline training to build this

301
00:13:18,160 --> 00:13:18,959
command

302
00:13:18,959 --> 00:13:22,320
relationships so uh the

303
00:13:22,320 --> 00:13:26,880
extract hider from pizzai packet

304
00:13:29,920 --> 00:13:32,639
there are lots of we need to do to do

305
00:13:32,639 --> 00:13:34,399
the reverse engineer

306
00:13:34,399 --> 00:13:36,880
there are some fields like address field

307
00:13:36,880 --> 00:13:38,000
size field

308
00:13:38,000 --> 00:13:40,079
and the type field this is the important

309
00:13:40,079 --> 00:13:41,920
part we should using this type

310
00:13:41,920 --> 00:13:45,040
to understand the command type

311
00:13:45,040 --> 00:13:47,920
however even we know the command it's

312
00:13:47,920 --> 00:13:50,160
not easy to get the command

313
00:13:50,160 --> 00:13:53,680
extraction finished because there's

314
00:13:53,680 --> 00:13:56,880
some corner cases there let's take an

315
00:13:56,880 --> 00:13:58,000
example

316
00:13:58,000 --> 00:14:02,320
here the split command hiders

317
00:14:02,320 --> 00:14:05,360
as we highlighted this is the

318
00:14:05,360 --> 00:14:08,320
whole command but it's separated into

319
00:14:08,320 --> 00:14:10,079
two pcie package

320
00:14:10,079 --> 00:14:14,000
so we should realize these issues

321
00:14:14,000 --> 00:14:16,720
the second is the command data noise so

322
00:14:16,720 --> 00:14:18,560
the command

323
00:14:18,560 --> 00:14:21,920
here so the following should be

324
00:14:21,920 --> 00:14:24,800
the command data however there may be

325
00:14:24,800 --> 00:14:27,680
some noise between the command and data

326
00:14:27,680 --> 00:14:30,639
so we also should handle this part so

327
00:14:30,639 --> 00:14:31,680
all this

328
00:14:31,680 --> 00:14:34,880
we should check the address consistency

329
00:14:34,880 --> 00:14:37,600
so we find out this the address is not

330
00:14:37,600 --> 00:14:38,880
consistent

331
00:14:38,880 --> 00:14:41,120
the two the first one the second one the

332
00:14:41,120 --> 00:14:41,920
third one

333
00:14:41,920 --> 00:14:44,000
the first one should go to the third one

334
00:14:44,000 --> 00:14:45,440
this this should be connected

335
00:14:45,440 --> 00:14:49,199
consistent however is in the real case

336
00:14:49,199 --> 00:14:49,600
is

337
00:14:49,600 --> 00:14:52,720
much complex than what we are the

338
00:14:52,720 --> 00:14:54,240
examples here

339
00:14:54,240 --> 00:14:57,279
so we also introduce the max distance

340
00:14:57,279 --> 00:14:58,880
scan distance

341
00:14:58,880 --> 00:15:01,760
so if you want to know the details you

342
00:15:01,760 --> 00:15:03,839
how to

343
00:15:03,839 --> 00:15:06,560
go to the our paper to read all the

344
00:15:06,560 --> 00:15:09,119
details

345
00:15:09,519 --> 00:15:14,000
okay the third one is the

346
00:15:14,000 --> 00:15:16,639
semantic reconstruction and model

347
00:15:16,639 --> 00:15:19,839
reconstruction part

348
00:15:20,800 --> 00:15:23,519
the semantic reconstruction is changes

349
00:15:23,519 --> 00:15:24,880
because the layer type

350
00:15:24,880 --> 00:15:27,760
information is lost in the pcie traffic

351
00:15:27,760 --> 00:15:28,639
as i

352
00:15:28,639 --> 00:15:31,440
mentioned the cpu side the driver how

353
00:15:31,440 --> 00:15:32,800
this information but

354
00:15:32,800 --> 00:15:34,800
during the traffic there is no such

355
00:15:34,800 --> 00:15:36,560
information at all

356
00:15:36,560 --> 00:15:39,360
and we also observed each layer is

357
00:15:39,360 --> 00:15:40,000
completed

358
00:15:40,000 --> 00:15:42,800
through zero comma several kernels and

359
00:15:42,800 --> 00:15:43,440
the each

360
00:15:43,440 --> 00:15:46,639
kernel is launched using a k command

361
00:15:46,639 --> 00:15:49,120
and the k command how are you address

362
00:15:49,120 --> 00:15:51,199
pawn through the

363
00:15:51,199 --> 00:15:54,000
the kernel binaries so we also

364
00:15:54,000 --> 00:15:55,199
identified

365
00:15:55,199 --> 00:15:58,240
so each kernel however unique

366
00:15:58,240 --> 00:16:01,519
um kernel binaries are some

367
00:16:01,519 --> 00:16:05,040
unique kernel binary combinations

368
00:16:05,040 --> 00:16:07,839
so this inspired us why not we build a

369
00:16:07,839 --> 00:16:08,800
database

370
00:16:08,800 --> 00:16:12,639
with the pair of the kernel binaries

371
00:16:12,639 --> 00:16:15,279
and the layer types so if we have such

372
00:16:15,279 --> 00:16:16,000
information

373
00:16:16,000 --> 00:16:19,040
we can reconstruct it for unknown

374
00:16:19,040 --> 00:16:22,320
black box dna models okay

375
00:16:22,320 --> 00:16:24,560
so so how to do this offline database

376
00:16:24,560 --> 00:16:25,600
generation

377
00:16:25,600 --> 00:16:29,199
we have some existing non-dm models

378
00:16:29,199 --> 00:16:32,480
and each time we only using a single

379
00:16:32,480 --> 00:16:33,680
layer

380
00:16:33,680 --> 00:16:36,720
using this single layer we trace we do

381
00:16:36,720 --> 00:16:37,839
the inference

382
00:16:37,839 --> 00:16:40,160
and then we collected the kernel trees

383
00:16:40,160 --> 00:16:41,120
layer types

384
00:16:41,120 --> 00:16:43,040
and then we put them together because we

385
00:16:43,040 --> 00:16:44,480
exactly know

386
00:16:44,480 --> 00:16:46,959
this the single layer the type and we

387
00:16:46,959 --> 00:16:48,160
collected

388
00:16:48,160 --> 00:16:51,920
the kernel binaries so we we know the

389
00:16:51,920 --> 00:16:54,959
relationship between them so

390
00:16:54,959 --> 00:16:57,759
finally we put all this information into

391
00:16:57,759 --> 00:16:59,759
our database

392
00:16:59,759 --> 00:17:02,880
and this will service for some unknown

393
00:17:02,880 --> 00:17:06,480
and dna models is black box their models

394
00:17:06,480 --> 00:17:08,079
is the same thing we can

395
00:17:08,079 --> 00:17:11,760
using this to create the kernel binaries

396
00:17:11,760 --> 00:17:12,480
or kind of

397
00:17:12,480 --> 00:17:14,640
battery combinations to identify the

398
00:17:14,640 --> 00:17:18,400
layer types

399
00:17:18,400 --> 00:17:21,439
we go to the model risk construction

400
00:17:21,439 --> 00:17:24,400
model reconstruction how to thread a

401
00:17:24,400 --> 00:17:25,119
subtype

402
00:17:25,119 --> 00:17:28,240
steps first is architecture

403
00:17:28,240 --> 00:17:30,840
reconstruct architecture reconstruct the

404
00:17:30,840 --> 00:17:32,080
hyperparameters

405
00:17:32,080 --> 00:17:35,200
and then reconstruct the parameters so

406
00:17:35,200 --> 00:17:38,880
let's talk about the first step

407
00:17:39,039 --> 00:17:42,240
so so the attractor the architecture

408
00:17:42,240 --> 00:17:46,000
is straightforward for the sequential

409
00:17:46,000 --> 00:17:50,160
uh dn models like minister and the vgg

410
00:17:50,160 --> 00:17:53,039
because they are you know the order is

411
00:17:53,039 --> 00:17:53,600
there

412
00:17:53,600 --> 00:17:55,840
so we just record them and remove the

413
00:17:55,840 --> 00:17:58,160
noisy but it doesn't have

414
00:17:58,160 --> 00:18:01,679
effect the orders however this doesn't

415
00:18:01,679 --> 00:18:02,480
hold

416
00:18:02,480 --> 00:18:04,960
for the non-sequential dna models like

417
00:18:04,960 --> 00:18:06,480
the rest night

418
00:18:06,480 --> 00:18:09,600
to address this challenge we introduced

419
00:18:09,600 --> 00:18:11,360
the date flow graph

420
00:18:11,360 --> 00:18:14,720
solutions so for each layer

421
00:18:14,720 --> 00:18:18,480
we record the output and the input

422
00:18:18,480 --> 00:18:21,200
if the input is some layers output so

423
00:18:21,200 --> 00:18:22,320
there is a link

424
00:18:22,320 --> 00:18:25,120
this arrow here to indicate the data

425
00:18:25,120 --> 00:18:26,320
dependencies

426
00:18:26,320 --> 00:18:29,840
so repeat this step we build this graph

427
00:18:29,840 --> 00:18:33,360
and this graph will reconstructed the

428
00:18:33,360 --> 00:18:37,439
the dna models the architecture

429
00:18:37,520 --> 00:18:40,720
okay let's talk about the second step to

430
00:18:40,720 --> 00:18:44,559
reconstruct the hyperparameters

431
00:18:46,720 --> 00:18:48,880
to reconstruct the hyperparameter there

432
00:18:48,880 --> 00:18:50,000
are two cells

433
00:18:50,000 --> 00:18:52,480
why is we can directly obtain from the

434
00:18:52,480 --> 00:18:53,600
pisi bar

435
00:18:53,600 --> 00:18:56,480
the package so like the kernel size

436
00:18:56,480 --> 00:18:57,200
stride

437
00:18:57,200 --> 00:18:59,679
filters they're already there we just

438
00:18:59,679 --> 00:19:01,440
know the offside and

439
00:19:01,440 --> 00:19:04,480
the location with the direct read the

440
00:19:04,480 --> 00:19:06,559
the data information like the kernel

441
00:19:06,559 --> 00:19:09,120
side this is the three times three

442
00:19:09,120 --> 00:19:12,400
understand how to do the infer

443
00:19:12,400 --> 00:19:15,600
like this information doesn't contain

444
00:19:15,600 --> 00:19:19,760
uh in the pcie package but we can infer

445
00:19:19,760 --> 00:19:23,120
from the following operations

446
00:19:23,120 --> 00:19:25,360
like the activation function and the use

447
00:19:25,360 --> 00:19:27,039
bears field

448
00:19:27,039 --> 00:19:30,880
uh like if we check the uh use bears

449
00:19:30,880 --> 00:19:34,080
and following how the bears actually the

450
00:19:34,080 --> 00:19:34,960
layer

451
00:19:34,960 --> 00:19:38,000
so we can we if we observe this

452
00:19:38,000 --> 00:19:41,200
the various layer executed there so we

453
00:19:41,200 --> 00:19:42,720
know the use bars

454
00:19:42,720 --> 00:19:46,400
should be checked so based on this

455
00:19:46,400 --> 00:19:50,480
relationship we can infer to reconstruct

456
00:19:50,480 --> 00:19:54,320
such kind of hyperparameters

457
00:19:54,960 --> 00:19:58,400
under the third step is to reconstruct

458
00:19:58,400 --> 00:20:01,840
the parameters to re

459
00:20:01,840 --> 00:20:04,320
to the parameter typically we call is

460
00:20:04,320 --> 00:20:05,200
waste

461
00:20:05,200 --> 00:20:07,200
the waste is not that easy because the

462
00:20:07,200 --> 00:20:08,320
waste is mixed with

463
00:20:08,320 --> 00:20:12,000
the knowledges and at the beginning we

464
00:20:12,000 --> 00:20:12,480
have

465
00:20:12,480 --> 00:20:15,039
one assumption say are the weights maybe

466
00:20:15,039 --> 00:20:16,159
it should be

467
00:20:16,159 --> 00:20:19,520
in the range of the minus one to one

468
00:20:19,520 --> 00:20:22,320
however later we find out is not all

469
00:20:22,320 --> 00:20:22,960
always

470
00:20:22,960 --> 00:20:26,240
true for all the dna models so we get up

471
00:20:26,240 --> 00:20:30,080
give up these assumptions and then we

472
00:20:30,080 --> 00:20:33,120
also find out the there is no directed

473
00:20:33,120 --> 00:20:34,720
connections between the

474
00:20:34,720 --> 00:20:36,880
chronologic command and the return

475
00:20:36,880 --> 00:20:37,840
device

476
00:20:37,840 --> 00:20:40,559
previously this operation is hold for

477
00:20:40,559 --> 00:20:41,360
the

478
00:20:41,360 --> 00:20:44,559
for the kernel binaries but it doesn't

479
00:20:44,559 --> 00:20:45,360
hold

480
00:20:45,360 --> 00:20:47,440
this relationship these connections

481
00:20:47,440 --> 00:20:49,520
don't hold for the kernel launch command

482
00:20:49,520 --> 00:20:53,039
with the wizard device later we zoom

483
00:20:53,039 --> 00:20:55,360
into this eso we found out why this

484
00:20:55,360 --> 00:20:56,240
hyphen

485
00:20:56,240 --> 00:20:59,440
we found out the cuda memory copy

486
00:20:59,440 --> 00:21:01,600
device to device there is the device to

487
00:21:01,600 --> 00:21:02,960
device memory copy

488
00:21:02,960 --> 00:21:06,320
hyphen in the gpu side

489
00:21:06,320 --> 00:21:10,640
so the gpu copied the

490
00:21:10,640 --> 00:21:12,960
the weights from one location to another

491
00:21:12,960 --> 00:21:13,919
way of cause

492
00:21:13,919 --> 00:21:16,640
it's also driven by some command so we

493
00:21:16,640 --> 00:21:17,440
have to

494
00:21:17,440 --> 00:21:20,799
folding this copy event and just the

495
00:21:20,799 --> 00:21:21,760
arrows

496
00:21:21,760 --> 00:21:25,520
and then we know the final destination

497
00:21:25,520 --> 00:21:26,880
of the widths

498
00:21:26,880 --> 00:21:30,000
so folding these arrows we can get

499
00:21:30,000 --> 00:21:34,000
the starting address of the waste

500
00:21:34,000 --> 00:21:37,600
so the next question is we how we

501
00:21:37,600 --> 00:21:40,720
know how many number of ways there we

502
00:21:40,720 --> 00:21:44,080
how to reconstruct them

503
00:21:44,080 --> 00:21:46,080
okay for a number of ways there are some

504
00:21:46,080 --> 00:21:48,240
formulas we summarized

505
00:21:48,240 --> 00:21:51,360
the ways why is the uh the like

506
00:21:51,360 --> 00:21:54,720
like here the examples number of ways is

507
00:21:54,720 --> 00:21:58,480
the the kernel waist kernel heights

508
00:21:58,480 --> 00:22:02,559
and the input filter maps and

509
00:22:02,559 --> 00:22:06,960
output field maps the times together

510
00:22:06,960 --> 00:22:09,760
and for different layers the the formula

511
00:22:09,760 --> 00:22:10,880
will

512
00:22:10,880 --> 00:22:14,320
change a little bit so we summarize all

513
00:22:14,320 --> 00:22:15,440
these formulas

514
00:22:15,440 --> 00:22:17,840
we can know okay we know the type we

515
00:22:17,840 --> 00:22:19,679
know how to calculate

516
00:22:19,679 --> 00:22:22,799
so we how the starting address

517
00:22:22,799 --> 00:22:27,840
we can get the whole waste there

518
00:22:29,919 --> 00:22:32,960
okay let's talk about some evaluations

519
00:22:32,960 --> 00:22:35,840
so we do the evaluation using three

520
00:22:35,840 --> 00:22:36,640
models

521
00:22:36,640 --> 00:22:40,159
the meanest vg16 and 920

522
00:22:40,159 --> 00:22:43,280
and we also have recorded the number of

523
00:22:43,280 --> 00:22:43,760
layers

524
00:22:43,760 --> 00:22:46,080
number of parameters these size and the

525
00:22:46,080 --> 00:22:48,879
input shapes

526
00:22:49,840 --> 00:22:51,919
let's talk about the meanings

527
00:22:51,919 --> 00:22:55,200
architecture comparison first

528
00:22:55,200 --> 00:22:58,880
so this will visualize the the layers

529
00:22:58,880 --> 00:23:02,480
so for this we can find out

530
00:23:02,480 --> 00:23:05,039
the first is original model and this

531
00:23:05,039 --> 00:23:06,320
generated mode

532
00:23:06,320 --> 00:23:09,440
there are two difference one is the drop

533
00:23:09,440 --> 00:23:10,080
out

534
00:23:10,080 --> 00:23:13,200
drop out layer is only used in the

535
00:23:13,200 --> 00:23:15,120
training stage it doesn't

536
00:23:15,120 --> 00:23:18,480
use in the influence stage so in our

537
00:23:18,480 --> 00:23:21,440
attack we run the inference

538
00:23:21,440 --> 00:23:23,919
it doesn't capture this dropout actually

539
00:23:23,919 --> 00:23:24,480
it doesn't

540
00:23:24,480 --> 00:23:28,080
use in in the influence stage

541
00:23:28,080 --> 00:23:31,039
so it doesn't affect the accuracy the

542
00:23:31,039 --> 00:23:31,600
second

543
00:23:31,600 --> 00:23:34,640
is here there's a conclusion

544
00:23:34,640 --> 00:23:37,840
there with relu so the railu or

545
00:23:37,840 --> 00:23:39,600
separated

546
00:23:39,600 --> 00:23:42,559
we we treated the layer as a separated

547
00:23:42,559 --> 00:23:43,440
layer

548
00:23:43,440 --> 00:23:46,240
so this doesn't change the semantic

549
00:23:46,240 --> 00:23:46,640
meaning

550
00:23:46,640 --> 00:23:51,039
it just to to pick make it

551
00:23:51,039 --> 00:23:55,360
easily uh for the vgg

552
00:23:55,360 --> 00:23:58,480
architecture of the puzzle the first is

553
00:23:58,480 --> 00:23:59,279
original

554
00:23:59,279 --> 00:24:02,960
second is the generated we also find out

555
00:24:02,960 --> 00:24:06,400
all the job of layers that we remove

556
00:24:06,400 --> 00:24:07,360
them

557
00:24:07,360 --> 00:24:10,559
and we also find out uh

558
00:24:10,559 --> 00:24:14,080
some the dense layer and

559
00:24:14,080 --> 00:24:17,440
the relu layers there

560
00:24:17,440 --> 00:24:20,960
here uh we also comparing with the rest

561
00:24:20,960 --> 00:24:21,760
knight

562
00:24:21,760 --> 00:24:26,320
the original one and the generated one

563
00:24:26,320 --> 00:24:29,440
of them the same until the last one

564
00:24:29,440 --> 00:24:32,159
again for the for the activation

565
00:24:32,159 --> 00:24:34,640
function like the soft marks and relu

566
00:24:34,640 --> 00:24:38,880
we put we treat them in either

567
00:24:39,440 --> 00:24:42,400
a new layer so they are semantically

568
00:24:42,400 --> 00:24:43,760
equally

569
00:24:43,760 --> 00:24:48,320
so when we keep them as a separate layer

570
00:24:48,799 --> 00:24:51,039
okay we also do the accuracy and the

571
00:24:51,039 --> 00:24:51,919
efficiency

572
00:24:51,919 --> 00:24:55,440
evaluations so we're using the

573
00:24:55,440 --> 00:24:58,720
uh also the mean means the way to do

574
00:24:58,720 --> 00:25:00,640
rest that for the accuracy

575
00:25:00,640 --> 00:25:04,000
so we have our this original accuracies

576
00:25:04,000 --> 00:25:08,400
and on different platforms the jt 730

577
00:25:08,400 --> 00:25:11,520
1080 ti 2080 so all

578
00:25:11,520 --> 00:25:14,320
of them we say is the same accuracy

579
00:25:14,320 --> 00:25:16,480
always the same so this indicates we

580
00:25:16,480 --> 00:25:17,600
fully instructed

581
00:25:17,600 --> 00:25:20,720
the model there is zero accuracy

582
00:25:20,720 --> 00:25:21,919
reduction

583
00:25:21,919 --> 00:25:24,799
and we also do the inference timing

584
00:25:24,799 --> 00:25:25,840
efficiency

585
00:25:25,840 --> 00:25:28,799
three seconds we can also find they are

586
00:25:28,799 --> 00:25:29,440
almost

587
00:25:29,440 --> 00:25:33,840
the same thing there's no big difference

588
00:25:35,600 --> 00:25:38,640
finally we also do the evaluation on the

589
00:25:38,640 --> 00:25:40,840
reconstruction performance

590
00:25:40,840 --> 00:25:44,240
so we reconstruct

591
00:25:44,240 --> 00:25:47,120
the the number of commands number of k

592
00:25:47,120 --> 00:25:48,640
command

593
00:25:48,640 --> 00:25:51,600
number of a completion package under

594
00:25:51,600 --> 00:25:53,039
generation timing

595
00:25:53,039 --> 00:25:56,559
so we can say say the the reconstruction

596
00:25:56,559 --> 00:26:00,080
performance is quite efficient typically

597
00:26:00,080 --> 00:26:00,960
is to from

598
00:26:00,960 --> 00:26:04,080
5 minutes to 17 minutes

599
00:26:04,080 --> 00:26:07,120
so already is 10 minutes we can undo the

600
00:26:07,120 --> 00:26:08,880
reconstruction

601
00:26:08,880 --> 00:26:11,840
step

602
00:26:12,480 --> 00:26:16,000
okay let's show some demos

603
00:26:16,000 --> 00:26:19,360
to show how we do this

604
00:26:19,360 --> 00:26:24,240
hammers attack

605
00:26:24,240 --> 00:26:26,559
so the intercepted pcie protocols are

606
00:26:26,559 --> 00:26:27,679
three at

607
00:26:27,679 --> 00:26:31,360
immediate gpus so this original

608
00:26:31,360 --> 00:26:35,200
uh model and the guided accuracy

609
00:26:35,200 --> 00:26:38,400
and we do the reconstructions type and

610
00:26:38,400 --> 00:26:40,159
this on the jta

611
00:26:40,159 --> 00:26:42,960
730

612
00:26:45,200 --> 00:26:48,480
and we found out the accuracy efficiency

613
00:26:48,480 --> 00:26:52,400
accuracy is the same on the jt70 and

614
00:26:52,400 --> 00:26:55,200
then we change the device to the

615
00:26:55,200 --> 00:26:58,080
1080 ti and we first do the

616
00:26:58,080 --> 00:26:59,840
reconstructing because we

617
00:26:59,840 --> 00:27:02,720
on different device we capture different

618
00:27:02,720 --> 00:27:04,000
pci packages

619
00:27:04,000 --> 00:27:06,720
we should reconstruct this the model

620
00:27:06,720 --> 00:27:08,240
again

621
00:27:08,240 --> 00:27:11,440
and we also fully reconstruct it and we

622
00:27:11,440 --> 00:27:11,919
test

623
00:27:11,919 --> 00:27:14,960
the inference accuracy also the same

624
00:27:14,960 --> 00:27:17,279
accuracy

625
00:27:17,279 --> 00:27:20,399
finally we set the device to the

626
00:27:20,399 --> 00:27:24,080
2080 we do the intercepting and

627
00:27:24,080 --> 00:27:26,080
reconstructing again

628
00:27:26,080 --> 00:27:29,840
and to reconstruct the whole air model

629
00:27:29,840 --> 00:27:30,960
on the

630
00:27:30,960 --> 00:27:34,080
new devices so okay finished

631
00:27:34,080 --> 00:27:37,200
let's go to say test the accuracy

632
00:27:37,200 --> 00:27:41,360
okay also the same

633
00:27:43,200 --> 00:27:46,960
okay let's talk about some count miners

634
00:27:46,960 --> 00:27:50,320
first we should we have some

635
00:27:50,320 --> 00:27:53,600
hardware customizers like

636
00:27:53,600 --> 00:27:56,799
we using the gpu encryptions and the

637
00:27:56,799 --> 00:27:58,480
pcie encryptions

638
00:27:58,480 --> 00:28:00,880
however all such solutions need a

639
00:28:00,880 --> 00:28:03,840
hardware modification

640
00:28:03,840 --> 00:28:06,159
like gpu side you how to significant

641
00:28:06,159 --> 00:28:08,000
change either the encryption mode or you

642
00:28:08,000 --> 00:28:09,760
build the end-to-end

643
00:28:09,760 --> 00:28:12,480
communication channel with the cpu and

644
00:28:12,480 --> 00:28:14,240
there are lots of

645
00:28:14,240 --> 00:28:16,000
challenges there how to share the key

646
00:28:16,000 --> 00:28:18,880
how to management the the keys

647
00:28:18,880 --> 00:28:21,679
uh and again for the pcie encryption you

648
00:28:21,679 --> 00:28:24,000
have to change the pcie protocols

649
00:28:24,000 --> 00:28:27,440
uh also change the pcie controller

650
00:28:27,440 --> 00:28:30,320
and all the devices attached to the pcie

651
00:28:30,320 --> 00:28:31,200
bus

652
00:28:31,200 --> 00:28:33,919
this cannot finish the within a short

653
00:28:33,919 --> 00:28:35,200
period of time

654
00:28:35,200 --> 00:28:37,200
so this version may be hard in the

655
00:28:37,200 --> 00:28:38,799
future new architecture

656
00:28:38,799 --> 00:28:41,679
system but for the commodity operating

657
00:28:41,679 --> 00:28:42,960
system

658
00:28:42,960 --> 00:28:46,960
doesn't have for the software

659
00:28:46,960 --> 00:28:51,200
solutions why is the do the obfuscation

660
00:28:51,200 --> 00:28:53,919
like this idea from the binary of

661
00:28:53,919 --> 00:28:54,880
vascations

662
00:28:54,880 --> 00:28:57,200
so it will significantly increase the

663
00:28:57,200 --> 00:28:59,200
bar for the attacker to the reverse

664
00:28:59,200 --> 00:29:02,080
engineer but our fascication essentially

665
00:29:02,080 --> 00:29:02,799
doesn't

666
00:29:02,799 --> 00:29:06,000
completely solve this problem

667
00:29:06,000 --> 00:29:08,799
the only effect is increasing the bar

668
00:29:08,799 --> 00:29:09,520
the

669
00:29:09,520 --> 00:29:11,760
second one is offload the partial task

670
00:29:11,760 --> 00:29:13,360
onto cpus

671
00:29:13,360 --> 00:29:16,480
that's this idea is say we split

672
00:29:16,480 --> 00:29:20,000
the task wise on the cpu side there are

673
00:29:20,000 --> 00:29:21,840
others on the gpu side

674
00:29:21,840 --> 00:29:24,720
however this solution doesn't fully

675
00:29:24,720 --> 00:29:26,000
utilize the power of

676
00:29:26,000 --> 00:29:29,360
gpu why we offload the ai services

677
00:29:29,360 --> 00:29:31,919
to the gpu because the gpu is more

678
00:29:31,919 --> 00:29:33,679
powerful than cpu run

679
00:29:33,679 --> 00:29:36,640
and such kind of operations so such

680
00:29:36,640 --> 00:29:37,360
solutions

681
00:29:37,360 --> 00:29:40,640
will significantly reduce the ii

682
00:29:40,640 --> 00:29:44,559
the efficiency of the resources

683
00:29:44,559 --> 00:29:48,640
so uh all these countermeasures doesn't

684
00:29:48,640 --> 00:29:51,679
have a perfect they indicate our work

685
00:29:51,679 --> 00:29:54,720
needs lots of effort to investigate

686
00:29:54,720 --> 00:29:58,159
to to mitigate these issues

687
00:29:58,159 --> 00:30:00,960
so some take away the hammer attack is

688
00:30:00,960 --> 00:30:02,159
the first attack

689
00:30:02,159 --> 00:30:05,520
that can fully steal the models all

690
00:30:05,520 --> 00:30:08,399
previous attacks only can partially

691
00:30:08,399 --> 00:30:10,799
reconstructed their models

692
00:30:10,799 --> 00:30:13,679
we also spotted multi platforms multi

693
00:30:13,679 --> 00:30:14,880
gpos

694
00:30:14,880 --> 00:30:18,720
so all this technicals doesn't

695
00:30:18,720 --> 00:30:22,399
the platform uh independence it's

696
00:30:22,399 --> 00:30:25,679
not it is platform independent

697
00:30:25,679 --> 00:30:27,919
uh it's very hard to devise either from

698
00:30:27,919 --> 00:30:28,720
hardware we

699
00:30:28,720 --> 00:30:32,159
are the software way and all the gpus

700
00:30:32,159 --> 00:30:33,279
are not safe

701
00:30:33,279 --> 00:30:37,360
under our attack so we also help

702
00:30:37,360 --> 00:30:40,559
many people join this area to

703
00:30:40,559 --> 00:30:44,080
enhance the gpu security

704
00:30:44,080 --> 00:30:47,200
and the some reference we are using

705
00:30:47,200 --> 00:30:51,440
our work okay thanks

706
00:30:51,440 --> 00:30:57,760
any questions are welcome thank you

