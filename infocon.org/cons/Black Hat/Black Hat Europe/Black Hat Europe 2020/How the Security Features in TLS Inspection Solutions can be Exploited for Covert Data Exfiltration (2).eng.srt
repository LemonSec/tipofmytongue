1
00:00:01,180 --> 00:00:14,730
[Music]

2
00:00:14,960 --> 00:00:17,119
hello and welcome to our talks

3
00:00:17,119 --> 00:00:19,600
circumventing the guardians how the

4
00:00:19,600 --> 00:00:20,960
security features in

5
00:00:20,960 --> 00:00:23,199
state of the art tls inspection

6
00:00:23,199 --> 00:00:24,000
solutions

7
00:00:24,000 --> 00:00:26,480
can be exploited for cover data

8
00:00:26,480 --> 00:00:28,800
exfiltration

9
00:00:28,800 --> 00:00:31,920
my name is morton marstrander

10
00:00:31,920 --> 00:00:34,480
i'm a senior security consultant working

11
00:00:34,480 --> 00:00:35,840
for the norwegian

12
00:00:35,840 --> 00:00:39,440
cyber security firm called mnemonic

13
00:00:39,440 --> 00:00:41,920
and i'm mateo malvika a principal

14
00:00:41,920 --> 00:00:43,440
security researcher

15
00:00:43,440 --> 00:00:47,440
at the software company norton livelock

16
00:00:47,440 --> 00:00:50,239
and here is what you can expect from our

17
00:00:50,239 --> 00:00:51,920
talk

18
00:00:51,920 --> 00:00:54,480
first we're going to present the results

19
00:00:54,480 --> 00:00:55,920
of our research

20
00:00:55,920 --> 00:00:58,960
that we conducted lately then we're

21
00:00:58,960 --> 00:01:00,800
going to have a brief overview of tls

22
00:01:00,800 --> 00:01:01,920
inspection devices

23
00:01:01,920 --> 00:01:03,840
and more specifically on the hello

24
00:01:03,840 --> 00:01:05,840
packet

25
00:01:05,840 --> 00:01:07,920
then we're going to tell you a short

26
00:01:07,920 --> 00:01:09,840
story on how we develop

27
00:01:09,840 --> 00:01:12,400
the common in control around this new

28
00:01:12,400 --> 00:01:15,520
exfiltration method

29
00:01:15,520 --> 00:01:18,400
and we are going to conclude with the

30
00:01:18,400 --> 00:01:20,240
mitigation and detection

31
00:01:20,240 --> 00:01:25,119
and as a cherry on top live demo

32
00:01:25,119 --> 00:01:29,200
so uh during the start of 2020 we came

33
00:01:29,200 --> 00:01:30,479
up with an idea on

34
00:01:30,479 --> 00:01:33,200
how to exfiltrate data through tls

35
00:01:33,200 --> 00:01:34,479
inspection devices

36
00:01:34,479 --> 00:01:37,680
by using the sni fields as a container

37
00:01:37,680 --> 00:01:41,280
for data exfiltration

38
00:01:41,280 --> 00:01:43,360
our test validates that this was a

39
00:01:43,360 --> 00:01:44,640
widespread issue

40
00:01:44,640 --> 00:01:46,720
affecting different types of security

41
00:01:46,720 --> 00:01:48,720
solution as well as solution from a

42
00:01:48,720 --> 00:01:50,720
variety of vendors

43
00:01:50,720 --> 00:01:52,799
we successfully tested our technique

44
00:01:52,799 --> 00:01:54,159
against products from

45
00:01:54,159 --> 00:01:56,479
f5 networks palo alto networks and

46
00:01:56,479 --> 00:01:57,520
fortinet

47
00:01:57,520 --> 00:01:59,439
but this could uh have affected other

48
00:01:59,439 --> 00:02:02,158
vendors as well

49
00:02:02,320 --> 00:02:04,560
we had an excellent cooperation with the

50
00:02:04,560 --> 00:02:06,320
each of this vendor adhering to

51
00:02:06,320 --> 00:02:09,440
the responsible disclosure procedure

52
00:02:09,440 --> 00:02:11,920
powers and f5 publish their own security

53
00:02:11,920 --> 00:02:14,160
advisory along with workarounds

54
00:02:14,160 --> 00:02:16,000
fortinet is going to publish it as soon

55
00:02:16,000 --> 00:02:18,720
as they release a fix for that

56
00:02:18,720 --> 00:02:21,120
this joint of corporation results in the

57
00:02:21,120 --> 00:02:24,239
two following cvs

58
00:02:26,640 --> 00:02:29,520
the end product of these research of

59
00:02:29,520 --> 00:02:30,000
ours

60
00:02:30,000 --> 00:02:31,680
is a proof of concept open source

61
00:02:31,680 --> 00:02:34,080
project named snicket which stands for

62
00:02:34,080 --> 00:02:37,519
surname indication concatenator

63
00:02:37,519 --> 00:02:40,319
sneak it is a situ capable of navigating

64
00:02:40,319 --> 00:02:42,480
the file system of the compromise host

65
00:02:42,480 --> 00:02:42,720
in

66
00:02:42,720 --> 00:02:44,959
exfiltrate files through tls inspection

67
00:02:44,959 --> 00:02:47,360
devices sitting in between

68
00:02:47,360 --> 00:02:50,080
even if the c2 domain is black laces and

69
00:02:50,080 --> 00:02:52,959
configured to be blocked by the device

70
00:02:52,959 --> 00:02:55,200
sneak it comprises of two separate per

71
00:02:55,200 --> 00:02:57,360
interdependent components

72
00:02:57,360 --> 00:02:59,760
a passive agent that should be dropped

73
00:02:59,760 --> 00:03:00,879
on the target

74
00:03:00,879 --> 00:03:04,000
and that is already compromised and

75
00:03:04,000 --> 00:03:06,800
in its goal is to connect back to the c2

76
00:03:06,800 --> 00:03:08,800
and execute the provided command by the

77
00:03:08,800 --> 00:03:10,560
operator

78
00:03:10,560 --> 00:03:12,000
also we have the ct server which

79
00:03:12,000 --> 00:03:14,400
controls the agent from anywhere on the

80
00:03:14,400 --> 00:03:15,680
internet acting at the

81
00:03:15,680 --> 00:03:18,800
as the threat actor

82
00:03:18,800 --> 00:03:20,400
so we are about to describe each step

83
00:03:20,400 --> 00:03:22,879
involved in this process but first

84
00:03:22,879 --> 00:03:24,799
an introduction on tls inspection

85
00:03:24,799 --> 00:03:28,080
devices is mandatory

86
00:03:28,080 --> 00:03:31,920
yeah so during the

87
00:03:31,920 --> 00:03:34,400
handshake process the sni is uh

88
00:03:34,400 --> 00:03:36,640
populated by a value provided by the

89
00:03:36,640 --> 00:03:37,920
client

90
00:03:37,920 --> 00:03:41,599
and it instructs the server on the

91
00:03:41,599 --> 00:03:44,560
right side of this diagram which host

92
00:03:44,560 --> 00:03:46,000
name the client is trying to connect

93
00:03:46,000 --> 00:03:48,319
to and what certificate the server

94
00:03:48,319 --> 00:03:50,640
should present to the client

95
00:03:50,640 --> 00:03:53,200
in this example diagram we are using a

96
00:03:53,200 --> 00:03:55,760
tls inspection device

97
00:03:55,760 --> 00:03:58,159
either a next generation firewall or a

98
00:03:58,159 --> 00:04:00,959
web proxy of some sorts

99
00:04:00,959 --> 00:04:03,840
working as a legal man in the middle so

100
00:04:03,840 --> 00:04:04,799
to speak

101
00:04:04,799 --> 00:04:07,200
in order to inspect the traffic for

102
00:04:07,200 --> 00:04:09,360
malicious content

103
00:04:09,360 --> 00:04:11,280
look up the domain being used in a

104
00:04:11,280 --> 00:04:13,680
blacklist and block or allow said

105
00:04:13,680 --> 00:04:14,319
traffic

106
00:04:14,319 --> 00:04:18,560
based on the result so

107
00:04:18,560 --> 00:04:20,478
in step one the client begins by sending

108
00:04:20,478 --> 00:04:21,680
in client hello

109
00:04:21,680 --> 00:04:23,759
and in step two the tls inspection

110
00:04:23,759 --> 00:04:26,960
device forwards this to the server

111
00:04:26,960 --> 00:04:30,240
fair enough and step three the

112
00:04:30,240 --> 00:04:33,280
server responds with a server hello and

113
00:04:33,280 --> 00:04:33,680
a

114
00:04:33,680 --> 00:04:37,280
server certificate which the next such

115
00:04:37,280 --> 00:04:38,400
generation firewall or

116
00:04:38,400 --> 00:04:41,680
web proxy tls inspection device

117
00:04:41,680 --> 00:04:43,360
performs the following in step four it

118
00:04:43,360 --> 00:04:45,520
compares the sni

119
00:04:45,520 --> 00:04:49,270
with the server certificate subject name

120
00:04:49,270 --> 00:04:51,040
[Music]

121
00:04:51,040 --> 00:04:54,720
then thereby authenticating the server

122
00:04:54,720 --> 00:04:58,479
and also it validates if the

123
00:04:58,479 --> 00:05:00,720
certificate is trusted or not based on

124
00:05:00,720 --> 00:05:01,600
its

125
00:05:01,600 --> 00:05:05,199
internal trust store

126
00:05:05,600 --> 00:05:08,800
it then in step 5 performs a

127
00:05:08,800 --> 00:05:12,160
filtering decision based on comparing

128
00:05:12,160 --> 00:05:14,320
the content of the sni

129
00:05:14,320 --> 00:05:17,120
to a reputation database of domains and

130
00:05:17,120 --> 00:05:19,680
urls

131
00:05:21,840 --> 00:05:26,160
then the tls inspection device

132
00:05:26,160 --> 00:05:29,520
completes the handshake by

133
00:05:30,160 --> 00:05:33,440
signing an emulated version of

134
00:05:33,440 --> 00:05:35,840
the certificate presented by the origin

135
00:05:35,840 --> 00:05:36,960
server

136
00:05:36,960 --> 00:05:38,720
and it does this with its own internal

137
00:05:38,720 --> 00:05:40,160
ca

138
00:05:40,160 --> 00:05:43,600
uh this ca is trusted by the client

139
00:05:43,600 --> 00:05:46,639
and uh thereby the

140
00:05:46,639 --> 00:05:49,199
tls inspection device is able to to work

141
00:05:49,199 --> 00:05:51,039
as a man in the middle

142
00:05:51,039 --> 00:05:54,080
um the inspection device then presents

143
00:05:54,080 --> 00:05:55,840
this emulated certificate

144
00:05:55,840 --> 00:05:58,319
to the client uh while also emulating

145
00:05:58,319 --> 00:05:59,840
most of the values in the original

146
00:05:59,840 --> 00:06:00,560
certificates

147
00:06:00,560 --> 00:06:04,479
like validity if it's trusted untrusted

148
00:06:04,479 --> 00:06:07,840
self-signed etc

149
00:06:08,319 --> 00:06:11,840
also in some cases we saw some devices

150
00:06:11,840 --> 00:06:13,759
that

151
00:06:13,759 --> 00:06:16,639
not always emulate the certificate if it

152
00:06:16,639 --> 00:06:17,680
is

153
00:06:17,680 --> 00:06:20,800
untrusted then the device some of the

154
00:06:20,800 --> 00:06:23,120
some of the devices will instead send a

155
00:06:23,120 --> 00:06:24,720
reset to the client

156
00:06:24,720 --> 00:06:29,360
instead of the actual certificate um

157
00:06:29,440 --> 00:06:32,960
yes so after that step 6

158
00:06:32,960 --> 00:06:36,240
the handshake is complete and

159
00:06:36,240 --> 00:06:39,199
the application data application traffic

160
00:06:39,199 --> 00:06:40,560
starts flowing and

161
00:06:40,560 --> 00:06:43,759
the tls inspection will first

162
00:06:43,759 --> 00:06:45,919
then enforce a deny or allow decision

163
00:06:45,919 --> 00:06:48,000
based on the reputation lookup in step

164
00:06:48,000 --> 00:06:51,280
5. in addition as it

165
00:06:51,280 --> 00:06:53,360
is now acting as a man in the middle it

166
00:06:53,360 --> 00:06:54,560
can

167
00:06:54,560 --> 00:06:56,319
inspect the traffic and data for

168
00:06:56,319 --> 00:06:58,080
malicious content and

169
00:06:58,080 --> 00:07:02,800
deny or allow this traffic

170
00:07:02,800 --> 00:07:06,800
based on its policies configured

171
00:07:06,800 --> 00:07:11,680
so um what can we do with this well

172
00:07:11,680 --> 00:07:14,080
uh based on how these devices work we

173
00:07:14,080 --> 00:07:15,759
figured out a way to abuse

174
00:07:15,759 --> 00:07:19,039
the tls handshake for exfiltration in

175
00:07:19,039 --> 00:07:21,759
some devices this will even trigger

176
00:07:21,759 --> 00:07:22,800
false negatives

177
00:07:22,800 --> 00:07:26,479
in the tls inspection device logs

178
00:07:26,479 --> 00:07:29,520
which we will show you later in our

179
00:07:29,520 --> 00:07:32,000
demo but first let's have a look at the

180
00:07:32,000 --> 00:07:35,599
client hello in a bit more detail

181
00:07:37,360 --> 00:07:39,840
so here we see a simplified version of

182
00:07:39,840 --> 00:07:41,680
the tls handshake

183
00:07:41,680 --> 00:07:44,639
with a focus on the server name

184
00:07:44,639 --> 00:07:45,599
indication field

185
00:07:45,599 --> 00:07:49,759
or sni in short the purpose of the

186
00:07:49,759 --> 00:07:52,879
sni field is to tell the server which

187
00:07:52,879 --> 00:07:54,720
domain or sites you want to visit so

188
00:07:54,720 --> 00:07:55,120
that

189
00:07:55,120 --> 00:07:56,560
it can present you with the correct

190
00:07:56,560 --> 00:08:00,639
certificate as i explained earlier

191
00:08:00,639 --> 00:08:02,800
this originally became a necessity when

192
00:08:02,800 --> 00:08:04,080
using virtual hosting

193
00:08:04,080 --> 00:08:06,160
where a single web server hosted

194
00:08:06,160 --> 00:08:07,280
multiple sites with

195
00:08:07,280 --> 00:08:10,638
different server certificates

196
00:08:10,800 --> 00:08:13,120
any did hand and it then had to have a

197
00:08:13,120 --> 00:08:14,160
way to

198
00:08:14,160 --> 00:08:16,319
know uh what certificate it should

199
00:08:16,319 --> 00:08:17,199
present to

200
00:08:17,199 --> 00:08:21,440
the clients so sinai was a solution okay

201
00:08:21,440 --> 00:08:24,720
but uh what if we do something nefarious

202
00:08:24,720 --> 00:08:27,840
with sni

203
00:08:28,080 --> 00:08:31,680
so here we uh

204
00:08:31,680 --> 00:08:33,919
use a wildcard certificate on the web

205
00:08:33,919 --> 00:08:34,799
server

206
00:08:34,799 --> 00:08:38,839
for star.example.com

207
00:08:38,839 --> 00:08:42,880
uh but we add uh example.com

208
00:08:42,880 --> 00:08:46,080
to the sni uh but we also prepend the

209
00:08:46,080 --> 00:08:47,839
data we

210
00:08:47,839 --> 00:08:50,240
want to exfiltrate and then code it with

211
00:08:50,240 --> 00:08:51,760
the base32

212
00:08:51,760 --> 00:08:54,959
we use base32 in order to use a

213
00:08:54,959 --> 00:08:55,760
character set

214
00:08:55,760 --> 00:08:59,360
that is allowed in a domain name and

215
00:08:59,360 --> 00:09:02,800
so far here we have proved that it was

216
00:09:02,800 --> 00:09:03,680
possible to

217
00:09:03,680 --> 00:09:05,839
send data in the sni if the complete

218
00:09:05,839 --> 00:09:07,360
domain name matched the server

219
00:09:07,360 --> 00:09:08,720
certificate

220
00:09:08,720 --> 00:09:10,640
by using wildcard certificate in this

221
00:09:10,640 --> 00:09:12,399
case

222
00:09:12,399 --> 00:09:14,880
and that it also adhered to rfc

223
00:09:14,880 --> 00:09:15,600
standards

224
00:09:15,600 --> 00:09:17,600
and allowed character sets in a domain

225
00:09:17,600 --> 00:09:19,839
name

226
00:09:21,440 --> 00:09:24,880
so uh

227
00:09:24,880 --> 00:09:28,320
we were able to send data out okay so

228
00:09:28,320 --> 00:09:31,040
what's next after some tinkering we

229
00:09:31,040 --> 00:09:32,080
discovered a

230
00:09:32,080 --> 00:09:34,839
common denominator in every solution we

231
00:09:34,839 --> 00:09:36,080
tested

232
00:09:36,080 --> 00:09:38,640
as long as the server presents a valid

233
00:09:38,640 --> 00:09:39,839
and trusted certificate

234
00:09:39,839 --> 00:09:42,959
during the tls handshake the

235
00:09:42,959 --> 00:09:45,519
tls inspection device will always

236
00:09:45,519 --> 00:09:47,360
present an emulated version of that

237
00:09:47,360 --> 00:09:49,120
certificate to the client

238
00:09:49,120 --> 00:09:52,160
signed by the devices built in ca

239
00:09:52,160 --> 00:09:55,920
this behavior occurs even if the domain

240
00:09:55,920 --> 00:09:57,680
used is blacklisted by a reputation

241
00:09:57,680 --> 00:09:59,360
database

242
00:09:59,360 --> 00:10:02,000
as you can see it's in step 6 in this

243
00:10:02,000 --> 00:10:02,720
diagram

244
00:10:02,720 --> 00:10:05,839
it happens before the enforcement

245
00:10:05,839 --> 00:10:09,120
decision so uh in

246
00:10:09,120 --> 00:10:11,120
in addition by serving a self-signed

247
00:10:11,120 --> 00:10:13,279
certificate from a server

248
00:10:13,279 --> 00:10:16,959
or a unvalid untrusted certificate

249
00:10:16,959 --> 00:10:19,440
the tls inspection solution either

250
00:10:19,440 --> 00:10:21,279
presents the client with an emulated

251
00:10:21,279 --> 00:10:23,920
untrusted self-signed certificate or a

252
00:10:23,920 --> 00:10:27,120
simple tcp reset

253
00:10:27,120 --> 00:10:28,880
so this is to highlight the fact that

254
00:10:28,880 --> 00:10:30,800
our exfiltration method isn't just

255
00:10:30,800 --> 00:10:32,640
another exfiltration method it also

256
00:10:32,640 --> 00:10:33,839
manages to

257
00:10:33,839 --> 00:10:36,079
exfiltrate before the traffic is

258
00:10:36,079 --> 00:10:37,279
enforced blocked

259
00:10:37,279 --> 00:10:40,000
in the next generation firewall or web

260
00:10:40,000 --> 00:10:41,440
proxy

261
00:10:41,440 --> 00:10:44,880
solution performing tls inspection

262
00:10:44,880 --> 00:10:48,720
it also became a critical function

263
00:10:48,720 --> 00:10:51,200
of how we would implement a command and

264
00:10:51,200 --> 00:10:53,040
control solution

265
00:10:53,040 --> 00:10:56,240
which mateo will talk about in his tale

266
00:10:56,240 --> 00:11:01,279
yes so at the very inception or testing

267
00:11:01,279 --> 00:11:03,360
the channel was only working one way

268
00:11:03,360 --> 00:11:05,920
since every tesla solution was blocking

269
00:11:05,920 --> 00:11:07,040
the returning traffic

270
00:11:07,040 --> 00:11:09,120
coming back from the server and that was

271
00:11:09,120 --> 00:11:10,160
obviously not

272
00:11:10,160 --> 00:11:14,079
the optimal scenario we were stuck and

273
00:11:14,079 --> 00:11:16,000
in in need for a new way of letting the

274
00:11:16,000 --> 00:11:17,920
control server data pass back through

275
00:11:17,920 --> 00:11:20,800
the security solution

276
00:11:20,800 --> 00:11:22,720
to overcome this hurdle we built an

277
00:11:22,720 --> 00:11:25,040
interim out-of-band c2 based on the

278
00:11:25,040 --> 00:11:27,120
instagram social network which employed

279
00:11:27,120 --> 00:11:29,600
embedded c2 common in control

280
00:11:29,600 --> 00:11:33,279
inside instagram's own command section

281
00:11:33,279 --> 00:11:35,839
this was enough to get a working demo

282
00:11:35,839 --> 00:11:38,560
which proved our theory to be correct

283
00:11:38,560 --> 00:11:41,040
functional and hopefully extensible we

284
00:11:41,040 --> 00:11:42,880
were able to remotely control the

285
00:11:42,880 --> 00:11:44,160
compromised

286
00:11:44,160 --> 00:11:47,680
host and selectively exfiltrate data

287
00:11:47,680 --> 00:11:49,920
then our next goal was to replace the

288
00:11:49,920 --> 00:11:51,680
instagram component since

289
00:11:51,680 --> 00:11:54,000
it was not stealthy and we wanted to

290
00:11:54,000 --> 00:11:55,680
avoid relying on a

291
00:11:55,680 --> 00:11:59,760
third party beyond our own control

292
00:11:59,760 --> 00:12:01,440
in addition we also wanted to create a

293
00:12:01,440 --> 00:12:03,519
synchronous c2

294
00:12:03,519 --> 00:12:06,320
so we continue pursuing an alternative

295
00:12:06,320 --> 00:12:07,360
of establishing an

296
00:12:07,360 --> 00:12:09,920
end-to-end communication between the

297
00:12:09,920 --> 00:12:13,839
agent and the commanding control server

298
00:12:14,399 --> 00:12:16,240
on a very primitive communication

299
00:12:16,240 --> 00:12:17,839
channel a basic response

300
00:12:17,839 --> 00:12:19,839
will only require binary yes and no

301
00:12:19,839 --> 00:12:21,200
capability

302
00:12:21,200 --> 00:12:24,079
and so we added at that point a valid

303
00:12:24,079 --> 00:12:25,600
trusted certificate

304
00:12:25,600 --> 00:12:28,560
gives us yes an untrusted self-signed

305
00:12:28,560 --> 00:12:31,040
certificate gives us a no

306
00:12:31,040 --> 00:12:33,440
so we implemented this logic into our

307
00:12:33,440 --> 00:12:36,160
sneaker tool

308
00:12:37,600 --> 00:12:41,040
let's have a let's have a talk about

309
00:12:41,040 --> 00:12:43,519
how we can explain a little bit more the

310
00:12:43,519 --> 00:12:45,519
mechanism between the agent and the and

311
00:12:45,519 --> 00:12:46,720
the c2

312
00:12:46,720 --> 00:12:49,360
so the agent is shipped with the

313
00:12:49,360 --> 00:12:50,160
predefined

314
00:12:50,160 --> 00:12:53,200
set of command and it loops it starts by

315
00:12:53,200 --> 00:12:56,560
looping through every every command

316
00:12:56,560 --> 00:13:00,720
and after each loop it sends

317
00:13:00,720 --> 00:13:03,519
a request to the c2 and the cto replies

318
00:13:03,519 --> 00:13:05,839
with an untrusted certificate

319
00:13:05,839 --> 00:13:07,920
until a matching command is found the

320
00:13:07,920 --> 00:13:09,040
matching command is

321
00:13:09,040 --> 00:13:12,079
obviously the command issued by the c2

322
00:13:12,079 --> 00:13:15,199
operator in this case

323
00:13:15,519 --> 00:13:18,720
then when the c2

324
00:13:18,720 --> 00:13:21,360
is matching the command it replies with

325
00:13:21,360 --> 00:13:22,560
a trusted certificate

326
00:13:22,560 --> 00:13:24,240
indicating to the client that it should

327
00:13:24,240 --> 00:13:27,680
execute this very command

328
00:13:29,040 --> 00:13:31,519
for example if the operator has issued

329
00:13:31,519 --> 00:13:32,959
an ls

330
00:13:32,959 --> 00:13:35,279
command the agent encodes the file list

331
00:13:35,279 --> 00:13:37,120
with the base 32

332
00:13:37,120 --> 00:13:39,920
and appends a special training code by

333
00:13:39,920 --> 00:13:41,839
the end of it just to notify the city

334
00:13:41,839 --> 00:13:43,120
that the appellate is over

335
00:13:43,120 --> 00:13:45,839
and and then it can just decode

336
00:13:45,839 --> 00:13:46,639
everything

337
00:13:46,639 --> 00:13:50,720
at once at this point now

338
00:13:50,720 --> 00:13:53,279
both the c2 and the agent have identical

339
00:13:53,279 --> 00:13:54,639
copies of the file list

340
00:13:54,639 --> 00:13:57,839
so the c2 can actually

341
00:13:57,839 --> 00:14:03,519
react upon this logic

342
00:14:03,519 --> 00:14:06,720
yes if we dig a little bit better

343
00:14:06,720 --> 00:14:10,399
and deeper let's uh let's see um

344
00:14:10,399 --> 00:14:12,320
on the agent from the agent point of

345
00:14:12,320 --> 00:14:15,120
view an example of no matching command

346
00:14:15,120 --> 00:14:18,800
and above cert from the client side and

347
00:14:18,800 --> 00:14:22,079
we can see that the the operator well

348
00:14:22,079 --> 00:14:24,480
in the the agent in this case uh is

349
00:14:24,480 --> 00:14:25,519
trying to send the

350
00:14:25,519 --> 00:14:28,880
cd command and we can also see

351
00:14:28,880 --> 00:14:31,440
a random string appended to the command

352
00:14:31,440 --> 00:14:33,279
what's that

353
00:14:33,279 --> 00:14:36,079
this is a is made in order to prevent

354
00:14:36,079 --> 00:14:38,560
tls inspection device from caching

355
00:14:38,560 --> 00:14:41,600
the certificate response from our c2

356
00:14:41,600 --> 00:14:43,920
and we can also see that the handshakes

357
00:14:43,920 --> 00:14:44,880
fail so this

358
00:14:44,880 --> 00:14:47,120
was not the the internet command by the

359
00:14:47,120 --> 00:14:48,560
c2 operator

360
00:14:48,560 --> 00:14:50,560
we can also notice that this is not a

361
00:14:50,560 --> 00:14:52,160
trusted certificate since it's

362
00:14:52,160 --> 00:14:56,839
uh uh ubuntu generic self-signed

363
00:14:56,839 --> 00:14:58,240
certificate

364
00:14:58,240 --> 00:15:01,519
yeah in this uh traffic capture on the

365
00:15:01,519 --> 00:15:03,360
other hand we can see that the

366
00:15:03,360 --> 00:15:06,000
the c2 operator it's actually issued the

367
00:15:06,000 --> 00:15:07,279
the work command

368
00:15:07,279 --> 00:15:09,199
this is still captured from the agent

369
00:15:09,199 --> 00:15:11,360
perspective and we can see that the the

370
00:15:11,360 --> 00:15:12,000
handshake

371
00:15:12,000 --> 00:15:14,399
has completed successfully because

372
00:15:14,399 --> 00:15:15,040
there's no

373
00:15:15,040 --> 00:15:18,800
reset and we can also see

374
00:15:18,800 --> 00:15:21,839
the payload coming through and on this

375
00:15:21,839 --> 00:15:22,480
slide

376
00:15:22,480 --> 00:15:24,839
we can also see that this the

377
00:15:24,839 --> 00:15:26,079
certificate

378
00:15:26,079 --> 00:15:28,000
it's the it's a weicker certificate

379
00:15:28,000 --> 00:15:30,560
trusted by tls inspection device

380
00:15:30,560 --> 00:15:32,079
because it's signed by a public

381
00:15:32,079 --> 00:15:35,120
well-known ca

382
00:15:35,120 --> 00:15:38,639
yeah and we can also have a

383
00:15:38,639 --> 00:15:41,440
brief look at the core functionality on

384
00:15:41,440 --> 00:15:43,199
the on the codebase this is an

385
00:15:43,199 --> 00:15:46,000
excerpt from the github repo and it

386
00:15:46,000 --> 00:15:47,759
highlights a few core functionalities of

387
00:15:47,759 --> 00:15:50,240
the sneaker tool

388
00:15:50,240 --> 00:15:52,720
on the left on the left side we can see

389
00:15:52,720 --> 00:15:53,440
the

390
00:15:53,440 --> 00:15:56,880
c2 uh bit where it passes the

391
00:15:56,880 --> 00:15:59,920
the tls packet and

392
00:15:59,920 --> 00:16:02,560
in particular the the yellow packet and

393
00:16:02,560 --> 00:16:03,120
it's

394
00:16:03,120 --> 00:16:06,639
just react based on the on the value

395
00:16:06,639 --> 00:16:07,519
inside it

396
00:16:07,519 --> 00:16:11,360
with the good context or bad tls

397
00:16:11,360 --> 00:16:14,560
context so basically a trust cert and

398
00:16:14,560 --> 00:16:16,800
and the untrusted cert as we as we saw

399
00:16:16,800 --> 00:16:18,000
earlier

400
00:16:18,000 --> 00:16:20,720
on the right side instead we can see the

401
00:16:20,720 --> 00:16:21,519
agent

402
00:16:21,519 --> 00:16:24,160
uh code snippet where it actually

403
00:16:24,160 --> 00:16:25,040
encodes the

404
00:16:25,040 --> 00:16:29,360
the um comma output payload in the

405
00:16:29,360 --> 00:16:33,519
base 32 encode fashion and

406
00:16:33,519 --> 00:16:36,399
um the payload is actually divided into

407
00:16:36,399 --> 00:16:37,360
chunks

408
00:16:37,360 --> 00:16:40,000
of the maximum length allowed and then

409
00:16:40,000 --> 00:16:40,639
it is

410
00:16:40,639 --> 00:16:42,959
trailed with the with the finito code

411
00:16:42,959 --> 00:16:43,920
which is the

412
00:16:43,920 --> 00:16:46,320
a way to tell the c2 that the payload is

413
00:16:46,320 --> 00:16:48,000
finished and completed

414
00:16:48,000 --> 00:16:52,560
so you can just parse it to the operator

415
00:16:52,560 --> 00:16:55,600
yes then at this point we decided to

416
00:16:55,600 --> 00:16:59,120
build mitigation and detections of our

417
00:16:59,120 --> 00:17:01,519
own tool

418
00:17:01,759 --> 00:17:05,119
so um

419
00:17:05,119 --> 00:17:07,199
first from a tls inspection device point

420
00:17:07,199 --> 00:17:08,959
of view we recommend

421
00:17:08,959 --> 00:17:11,520
changing the blocked url categories

422
00:17:11,520 --> 00:17:12,079
logic

423
00:17:12,079 --> 00:17:14,959
logic to match the sni field and thus

424
00:17:14,959 --> 00:17:15,439
block

425
00:17:15,439 --> 00:17:18,160
or allow any session in case of a match

426
00:17:18,160 --> 00:17:19,679
occurring

427
00:17:19,679 --> 00:17:21,919
this should actually be performed before

428
00:17:21,919 --> 00:17:24,400
completing the server-side tls and shake

429
00:17:24,400 --> 00:17:27,039
and this way the data in the malicious

430
00:17:27,039 --> 00:17:29,360
sni will not be passed to the

431
00:17:29,360 --> 00:17:31,919
c2 if the site is already restricted by

432
00:17:31,919 --> 00:17:33,679
the blacklist or if it's not matching an

433
00:17:33,679 --> 00:17:36,799
explicit whitelist

434
00:17:37,679 --> 00:17:39,840
and we also have detection in the

435
00:17:39,840 --> 00:17:41,120
security parameter

436
00:17:41,120 --> 00:17:43,760
and in in the sense that performing

437
00:17:43,760 --> 00:17:45,200
heuristic on the

438
00:17:45,200 --> 00:17:48,799
clientele osni what we did we

439
00:17:48,799 --> 00:17:50,880
have successfully used custom logic to

440
00:17:50,880 --> 00:17:52,720
perform an entropy check

441
00:17:52,720 --> 00:17:55,120
on the esi field and detect anomalous

442
00:17:55,120 --> 00:17:57,600
sni by utilizing this method

443
00:17:57,600 --> 00:17:59,919
mnemonic also developed the cervical ids

444
00:17:59,919 --> 00:18:01,679
signature to specify

445
00:18:01,679 --> 00:18:05,919
to specifically detect our tool

446
00:18:05,919 --> 00:18:09,679
yeah and finally we also developed a

447
00:18:09,679 --> 00:18:12,400
very very early stage proof of concept

448
00:18:12,400 --> 00:18:15,440
of a passive sni detection tool which is

449
00:18:15,440 --> 00:18:17,360
conceptually similar to the well-known

450
00:18:17,360 --> 00:18:19,200
passive dns application

451
00:18:19,200 --> 00:18:21,760
and it works by constantly monitoring

452
00:18:21,760 --> 00:18:24,160
and logging every tls slow packets sent

453
00:18:24,160 --> 00:18:26,240
through any network socket interface on

454
00:18:26,240 --> 00:18:26,880
the

455
00:18:26,880 --> 00:18:29,600
on the hand host these generator logs

456
00:18:29,600 --> 00:18:30,080
can

457
00:18:30,080 --> 00:18:32,320
also be gathered and analyzed through a

458
00:18:32,320 --> 00:18:33,360
cm solution

459
00:18:33,360 --> 00:18:35,600
against any well-known signature or

460
00:18:35,600 --> 00:18:38,320
behavioral analytics

461
00:18:38,320 --> 00:18:41,600
yeah let's jump to

462
00:18:41,600 --> 00:18:46,080
conclusion yeah so

463
00:18:46,080 --> 00:18:48,080
core features of today's security per

464
00:18:48,080 --> 00:18:49,440
meter solution

465
00:18:49,440 --> 00:18:51,600
is to detect and prevent malicious

466
00:18:51,600 --> 00:18:54,000
traffic from passing through

467
00:18:54,000 --> 00:18:55,760
we attacked those features from

468
00:18:55,760 --> 00:18:58,160
different angles and discovered that no

469
00:18:58,160 --> 00:19:00,080
tls inspection solution

470
00:19:00,080 --> 00:19:03,520
analyzed the very start of a session

471
00:19:03,520 --> 00:19:05,520
we hope to improve such appliance by

472
00:19:05,520 --> 00:19:06,720
raising the bar on how

473
00:19:06,720 --> 00:19:09,120
tls session is handled and scrutinized

474
00:19:09,120 --> 00:19:11,840
by these products

475
00:19:11,840 --> 00:19:13,520
we could also speculate that other

476
00:19:13,520 --> 00:19:15,200
vendors than those mentioned in the

477
00:19:15,200 --> 00:19:17,039
stock are affected by sneakers even

478
00:19:17,039 --> 00:19:17,840
though

479
00:19:17,840 --> 00:19:19,679
it will have been interesting to test

480
00:19:19,679 --> 00:19:20,960
every network

481
00:19:20,960 --> 00:19:23,120
security solution on the market we had

482
00:19:23,120 --> 00:19:24,880
actually limited resources

483
00:19:24,880 --> 00:19:28,559
and and scope this time

484
00:19:28,559 --> 00:19:31,200
and we therefore advise vendors to test

485
00:19:31,200 --> 00:19:31,600
uh

486
00:19:31,600 --> 00:19:34,160
if their products is vulnerable not to

487
00:19:34,160 --> 00:19:36,799
to sneak at

488
00:19:37,200 --> 00:19:39,919
um again there's no silver bullet and

489
00:19:39,919 --> 00:19:40,480
the

490
00:19:40,480 --> 00:19:43,360
defense in depth is the it's still uh

491
00:19:43,360 --> 00:19:43,760
chief

492
00:19:43,760 --> 00:19:47,520
on that so um it can be taken for

493
00:19:47,520 --> 00:19:48,880
granted by it but

494
00:19:48,880 --> 00:19:51,600
it's still important and we demonstrated

495
00:19:51,600 --> 00:19:52,880
this fact when

496
00:19:52,880 --> 00:19:55,280
bypassing the security features of tls

497
00:19:55,280 --> 00:19:57,679
inspection devices

498
00:19:57,679 --> 00:20:01,120
and in addition end user and enterprises

499
00:20:01,120 --> 00:20:02,720
may find it helpful to test their

500
00:20:02,720 --> 00:20:04,640
solution with our proof of concept code

501
00:20:04,640 --> 00:20:05,120
that is

502
00:20:05,120 --> 00:20:07,440
it's available on on github so feel free

503
00:20:07,440 --> 00:20:08,559
to test sneak it

504
00:20:08,559 --> 00:20:11,600
on your own yeah

505
00:20:11,600 --> 00:20:14,159
so uh sneak out is a project conducted

506
00:20:14,159 --> 00:20:14,640
by us

507
00:20:14,640 --> 00:20:16,320
while we were working in demonic a

508
00:20:16,320 --> 00:20:18,880
norway region cyber security company

509
00:20:18,880 --> 00:20:22,159
and uh as we said earlier it is

510
00:20:22,159 --> 00:20:26,080
open source so feel free to try it out

511
00:20:26,080 --> 00:20:29,120
we have the github link here and also if

512
00:20:29,120 --> 00:20:30,799
you want to read more about the story of

513
00:20:30,799 --> 00:20:31,440
house

514
00:20:31,440 --> 00:20:34,159
kneecat came to be there's a blog post

515
00:20:34,159 --> 00:20:35,120
at mnemonics

516
00:20:35,120 --> 00:20:38,320
website as well so yeah with that being

517
00:20:38,320 --> 00:20:39,140
said i think

518
00:20:39,140 --> 00:20:40,400
[Music]

519
00:20:40,400 --> 00:20:42,960
it's time to introduce you guys for a

520
00:20:42,960 --> 00:20:43,600
demo

521
00:20:43,600 --> 00:20:46,880
yay so okay let's talk a bit about the

522
00:20:46,880 --> 00:20:48,000
demo environment before

523
00:20:48,000 --> 00:20:51,919
we begin it is a simulated environment

524
00:20:51,919 --> 00:20:55,280
where we have a simulated compromised

525
00:20:55,280 --> 00:20:59,120
client on the inside network

526
00:20:59,120 --> 00:21:02,480
and we have a c2

527
00:21:02,480 --> 00:21:04,960
server on on the outside network

528
00:21:04,960 --> 00:21:06,559
simulating a threat actor on the

529
00:21:06,559 --> 00:21:07,760
internet

530
00:21:07,760 --> 00:21:12,480
and in between the two hosts we have a

531
00:21:12,480 --> 00:21:17,840
palo alto next generation firewall um

532
00:21:17,919 --> 00:21:20,559
using tls inspection and threat

533
00:21:20,559 --> 00:21:23,200
prevention features

534
00:21:23,200 --> 00:21:28,320
so let's go over to the

535
00:21:28,840 --> 00:21:31,760
demo

536
00:21:31,760 --> 00:21:35,919
so here this is um the client

537
00:21:35,919 --> 00:21:40,240
and um as you can see uh i have tried to

538
00:21:40,240 --> 00:21:42,320
uh to visit a website here with my

539
00:21:42,320 --> 00:21:44,400
browser um

540
00:21:44,400 --> 00:21:47,600
and this is the domain name of our

541
00:21:47,600 --> 00:21:50,640
c2 server and i added

542
00:21:50,640 --> 00:21:53,919
the this domain name to a custom

543
00:21:53,919 --> 00:21:55,919
category on the palato

544
00:21:55,919 --> 00:21:58,159
that should be blocked and as you can

545
00:21:58,159 --> 00:21:59,760
see this is the web page that

546
00:21:59,760 --> 00:22:01,840
is returned to me by the palo alto

547
00:22:01,840 --> 00:22:03,280
device

548
00:22:03,280 --> 00:22:06,480
saying that the traffic was blocked and

549
00:22:06,480 --> 00:22:10,000
yes it actually is blocked so

550
00:22:10,000 --> 00:22:13,120
are we safe then um well let's see let's

551
00:22:13,120 --> 00:22:14,480
try with sneak out instead

552
00:22:14,480 --> 00:22:18,640
instead of ordinary browsing

553
00:22:18,640 --> 00:22:21,280
so okay let's try to fire up sneak out

554
00:22:21,280 --> 00:22:22,960
on the client

555
00:22:22,960 --> 00:22:25,919
in the context of the current logged on

556
00:22:25,919 --> 00:22:27,520
user

557
00:22:27,520 --> 00:22:31,039
okay it's idle waiting for the c2

558
00:22:31,039 --> 00:22:34,240
okay then so let's move over to the

559
00:22:34,240 --> 00:22:37,840
host our c2 server and

560
00:22:37,840 --> 00:22:41,440
fire up the c2 here we

561
00:22:41,440 --> 00:22:44,159
run it as root because we listen on port

562
00:22:44,159 --> 00:22:46,480
443

563
00:22:46,480 --> 00:22:49,679
so this is the c2

564
00:22:49,919 --> 00:22:52,559
and as you can see we have a help

565
00:22:52,559 --> 00:22:53,440
command here

566
00:22:53,440 --> 00:22:56,640
where we can display all our

567
00:22:56,640 --> 00:22:59,200
predefined commands feel free to extend

568
00:22:59,200 --> 00:22:59,840
uh

569
00:22:59,840 --> 00:23:02,080
with more commands uh it's open source

570
00:23:02,080 --> 00:23:03,760
so yeah

571
00:23:03,760 --> 00:23:06,799
be our guest uh it's um

572
00:23:06,799 --> 00:23:08,720
basically most of these are basically

573
00:23:08,720 --> 00:23:10,799
aliases of

574
00:23:10,799 --> 00:23:13,760
linux commands that are necessary to

575
00:23:13,760 --> 00:23:14,480
navigate

576
00:23:14,480 --> 00:23:18,159
in a file system so now that the client

577
00:23:18,159 --> 00:23:18,960
is constantly

578
00:23:18,960 --> 00:23:22,400
pulling the server let's try to

579
00:23:22,400 --> 00:23:26,960
use the wear command to see where in the

580
00:23:27,120 --> 00:23:30,080
directory we exist on the client which

581
00:23:30,080 --> 00:23:31,600
is basically basically the same as the

582
00:23:31,600 --> 00:23:33,760
as the linux pwd command

583
00:23:33,760 --> 00:23:37,200
yeah so here we go we got our reply

584
00:23:37,200 --> 00:23:40,240
uh the home folder of this user and it

585
00:23:40,240 --> 00:23:43,120
changed our output on the shell as well

586
00:23:43,120 --> 00:23:46,240
so we can see where we are at all times

587
00:23:46,240 --> 00:23:47,600
okay let's try something more

588
00:23:47,600 --> 00:23:49,279
interesting see what files are in that

589
00:23:49,279 --> 00:23:50,400
directory

590
00:23:50,400 --> 00:23:53,840
so let's try the ls command yeah

591
00:23:53,840 --> 00:23:56,960
okay that was fast reply ls command okay

592
00:23:56,960 --> 00:24:00,080
so we got a list of three files in the

593
00:24:00,080 --> 00:24:01,840
directory in the client

594
00:24:01,840 --> 00:24:03,600
and they are indexed with numbers in

595
00:24:03,600 --> 00:24:05,760
order to easily identify them when we

596
00:24:05,760 --> 00:24:07,039
want to exfiltrate

597
00:24:07,039 --> 00:24:09,279
file number one looks very juicy yeah

598
00:24:09,279 --> 00:24:10,640
let's try that

599
00:24:10,640 --> 00:24:18,080
file number one export rate

600
00:24:18,080 --> 00:24:20,480
here we go secrets dot text executed

601
00:24:20,480 --> 00:24:21,760
successfully

602
00:24:21,760 --> 00:24:24,879
yeah let's have a look at it then

603
00:24:27,760 --> 00:24:30,960
hey cheesy credentials and

604
00:24:30,960 --> 00:24:33,360
yeah yeah very interesting yeah gluten

605
00:24:33,360 --> 00:24:34,640
root yes so

606
00:24:34,640 --> 00:24:36,960
uh then the interesting question is uh

607
00:24:36,960 --> 00:24:39,120
what happened uh

608
00:24:39,120 --> 00:24:41,679
in the last inspection device well let's

609
00:24:41,679 --> 00:24:42,880
have a look

610
00:24:42,880 --> 00:24:44,240
because this was supposed to be blocked

611
00:24:44,240 --> 00:24:47,520
right so this is the palo alto interface

612
00:24:47,520 --> 00:24:49,919
i'm going to open the logs now refresh

613
00:24:49,919 --> 00:24:51,679
them

614
00:24:51,679 --> 00:24:55,279
and here you can see all our sni

615
00:24:55,279 --> 00:24:57,679
registered as urls in the custom

616
00:24:57,679 --> 00:24:59,679
category block

617
00:24:59,679 --> 00:25:01,520
these things are looks like they're

618
00:25:01,520 --> 00:25:02,720
blocked

619
00:25:02,720 --> 00:25:04,480
but in reality they were not as you

620
00:25:04,480 --> 00:25:06,000
could see

621
00:25:06,000 --> 00:25:08,159
so these are false false negatives sorry

622
00:25:08,159 --> 00:25:09,840
in the log

623
00:25:09,840 --> 00:25:11,440
which is quite interesting so an

624
00:25:11,440 --> 00:25:12,640
administrator would think these were

625
00:25:12,640 --> 00:25:16,080
blocked but in reality they are not

626
00:25:16,080 --> 00:25:19,120
so yeah that concludes uh our demo

627
00:25:19,120 --> 00:25:22,640
um and um

628
00:25:22,640 --> 00:25:24,799
thank you thank you if you have any

629
00:25:24,799 --> 00:25:25,840
questions

630
00:25:25,840 --> 00:25:28,400
please reach out reach out we're here

631
00:25:28,400 --> 00:25:32,720
thank you thank you

