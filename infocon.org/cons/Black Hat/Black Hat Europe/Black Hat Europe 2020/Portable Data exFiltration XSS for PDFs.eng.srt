1
00:00:01,180 --> 00:00:14,730
[Music]

2
00:00:17,520 --> 00:00:18,240
hello

3
00:00:18,240 --> 00:00:19,920
and welcome to portable data

4
00:00:19,920 --> 00:00:21,359
exfiltration

5
00:00:21,359 --> 00:00:25,119
xss for pdfs in this talk i'm going to

6
00:00:25,119 --> 00:00:25,680
show you

7
00:00:25,680 --> 00:00:29,679
how to booby trap a pdf document

8
00:00:29,679 --> 00:00:32,079
track when a pdf is opened or closed

9
00:00:32,079 --> 00:00:36,000
even when loaded from a file system

10
00:00:36,079 --> 00:00:38,399
and exfiltrate the contents of an

11
00:00:38,399 --> 00:00:39,440
unknown pdf

12
00:00:39,440 --> 00:00:42,719
on both acrobat and on chrome

13
00:00:42,719 --> 00:00:47,600
all these techniques use a pdf injection

14
00:00:48,079 --> 00:00:50,559
my colleague james kettle was watching a

15
00:00:50,559 --> 00:00:51,760
black hat talk

16
00:00:51,760 --> 00:00:54,879
about pdfs and he was looking at the pdf

17
00:00:54,879 --> 00:00:55,520
code

18
00:00:55,520 --> 00:00:57,920
and thought to himself this looks

19
00:00:57,920 --> 00:00:59,120
injectable

20
00:00:59,120 --> 00:01:01,280
and he got back to the office and we had

21
00:01:01,280 --> 00:01:03,120
a discussion about the

22
00:01:03,120 --> 00:01:07,280
pdf presentation and he said to me

23
00:01:07,280 --> 00:01:10,560
pdf code is totally injectable and i

24
00:01:10,560 --> 00:01:11,200
responded

25
00:01:11,200 --> 00:01:13,200
i think it's impossible you wouldn't

26
00:01:13,200 --> 00:01:14,880
know the structure of the pdf

27
00:01:14,880 --> 00:01:18,080
the xref table wouldn't work the objects

28
00:01:18,080 --> 00:01:19,040
wouldn't be linked to

29
00:01:19,040 --> 00:01:21,680
i just can't see how that would work but

30
00:01:21,680 --> 00:01:23,360
that didn't stop me there

31
00:01:23,360 --> 00:01:27,840
i then began to test for pdf injection

32
00:01:27,840 --> 00:01:29,680
so first i'm going to cover injection

33
00:01:29,680 --> 00:01:32,320
theory how you can get user input inside

34
00:01:32,320 --> 00:01:33,600
a pdf

35
00:01:33,600 --> 00:01:35,439
why you just can't inject arbitrary

36
00:01:35,439 --> 00:01:38,320
content i'll talk about my methodology i

37
00:01:38,320 --> 00:01:39,119
use to

38
00:01:39,119 --> 00:01:42,000
test the various libraries i'll discuss

39
00:01:42,000 --> 00:01:42,479
two

40
00:01:42,479 --> 00:01:45,439
libraries that i exploited and i will

41
00:01:45,439 --> 00:01:46,000
discuss

42
00:01:46,000 --> 00:01:48,399
exploiting the injections on chrome and

43
00:01:48,399 --> 00:01:49,200
acrobat

44
00:01:49,200 --> 00:01:51,600
as well as a hybrid injection that works

45
00:01:51,600 --> 00:01:55,439
on both i'll wrap up with defense

46
00:01:55,439 --> 00:01:56,799
and that will leave five minutes for

47
00:01:56,799 --> 00:01:59,280
questions

48
00:02:00,479 --> 00:02:03,200
so server-side pdf generation is

49
00:02:03,200 --> 00:02:04,399
everywhere

50
00:02:04,399 --> 00:02:06,560
it's in invoices in receipts in

51
00:02:06,560 --> 00:02:07,520
e-tickets

52
00:02:07,520 --> 00:02:10,239
even pair slips in boarding passes the

53
00:02:10,239 --> 00:02:11,599
list is endless

54
00:02:11,599 --> 00:02:13,680
so there's plenty of opportunity to get

55
00:02:13,680 --> 00:02:17,920
user input inside a pdf document

56
00:02:17,920 --> 00:02:20,800
if you think of a pdf injection point as

57
00:02:20,800 --> 00:02:22,720
xss for example

58
00:02:22,720 --> 00:02:26,239
and imagine your xss uh

59
00:02:26,239 --> 00:02:29,120
vulnerability executes within a

60
00:02:29,120 --> 00:02:30,160
parenthesis

61
00:02:30,160 --> 00:02:32,560
and in a function call then this is the

62
00:02:32,560 --> 00:02:34,160
same sort of situation

63
00:02:34,160 --> 00:02:37,280
you get with pdf injection

64
00:02:37,280 --> 00:02:39,440
like in a javascript injection you need

65
00:02:39,440 --> 00:02:41,040
to ensure that the syntax

66
00:02:41,040 --> 00:02:43,280
is valid so your injection needs to be

67
00:02:43,280 --> 00:02:44,080
valid and

68
00:02:44,080 --> 00:02:46,400
the existing chord needs to be valid and

69
00:02:46,400 --> 00:02:49,360
this means you need to repair the chord

70
00:02:49,360 --> 00:02:51,440
before the injection as well as after

71
00:02:51,440 --> 00:02:54,079
the injection

72
00:02:54,480 --> 00:02:57,280
so how a pdf is structured so we have

73
00:02:57,280 --> 00:02:58,159
objects

74
00:02:58,159 --> 00:03:00,159
we have the xrf table and we've got the

75
00:03:00,159 --> 00:03:01,360
trailer

76
00:03:01,360 --> 00:03:03,599
so the objects allow you to define

77
00:03:03,599 --> 00:03:05,760
images and text streams

78
00:03:05,760 --> 00:03:08,480
the xref table points to each of those

79
00:03:08,480 --> 00:03:10,480
images in the document

80
00:03:10,480 --> 00:03:12,000
and the trailer is at the end of the

81
00:03:12,000 --> 00:03:16,000
document and specifies the root

82
00:03:16,840 --> 00:03:18,640
object

83
00:03:18,640 --> 00:03:20,720
so here's what an object looks like in

84
00:03:20,720 --> 00:03:22,319
pdf code

85
00:03:22,319 --> 00:03:25,440
so this is the first object with one

86
00:03:25,440 --> 00:03:28,000
the revision of the object which is zero

87
00:03:28,000 --> 00:03:30,239
and then the keyword for the starting of

88
00:03:30,239 --> 00:03:32,400
the object

89
00:03:32,400 --> 00:03:35,440
and this is a dictionary so dictionaries

90
00:03:35,440 --> 00:03:37,200
begin with those characters

91
00:03:37,200 --> 00:03:39,120
and we also have a dictionary key in

92
00:03:39,120 --> 00:03:41,120
this case pages

93
00:03:41,120 --> 00:03:44,640
so pages refers to the amount of pages

94
00:03:44,640 --> 00:03:46,080
in the document

95
00:03:46,080 --> 00:03:49,200
and you'll notice the two space zero

96
00:03:49,200 --> 00:03:53,040
space are this is a reference in

97
00:03:53,040 --> 00:03:56,080
pdf code so what references do is allow

98
00:03:56,080 --> 00:03:57,120
you to link to

99
00:03:57,120 --> 00:04:00,159
other objects in the pdf document so

100
00:04:00,159 --> 00:04:01,360
this is get this is

101
00:04:01,360 --> 00:04:05,280
saying go to uh object number two

102
00:04:05,280 --> 00:04:08,720
revision number zero and link that

103
00:04:08,720 --> 00:04:11,519
to that object and that will define how

104
00:04:11,519 --> 00:04:14,480
many pages are on the page

105
00:04:14,480 --> 00:04:16,478
and that's the end of the dictionary so

106
00:04:16,478 --> 00:04:17,839
this is super basic

107
00:04:17,839 --> 00:04:20,880
uh intro to how a pdf object is

108
00:04:20,880 --> 00:04:21,680
structured

109
00:04:21,680 --> 00:04:24,000
but it'll give you enough information to

110
00:04:24,000 --> 00:04:28,000
understand the rest of this talk

111
00:04:28,000 --> 00:04:30,800
this is the xref table so an xrf table

112
00:04:30,800 --> 00:04:32,000
always begins with the

113
00:04:32,000 --> 00:04:35,440
xref keyword now

114
00:04:35,440 --> 00:04:38,560
uh the pdf specification specifies that

115
00:04:38,560 --> 00:04:40,160
you have

116
00:04:40,160 --> 00:04:43,040
a blank object at the start with a

117
00:04:43,040 --> 00:04:43,759
specific

118
00:04:43,759 --> 00:04:47,919
revision number so this this one is free

119
00:04:47,919 --> 00:04:51,440
and that's what f indicates after that

120
00:04:51,440 --> 00:04:53,600
object that is not used in the pdf

121
00:04:53,600 --> 00:04:54,479
document

122
00:04:54,479 --> 00:04:57,600
you have the first object and

123
00:04:57,600 --> 00:04:59,919
the number refers to the position in the

124
00:04:59,919 --> 00:05:01,199
document where this

125
00:05:01,199 --> 00:05:04,320
object occurs so in this case it's 10 so

126
00:05:04,320 --> 00:05:05,520
it's saying

127
00:05:05,520 --> 00:05:09,039
at 10 position of the document the first

128
00:05:09,039 --> 00:05:11,759
object is located

129
00:05:11,759 --> 00:05:15,520
the start xref keyword tells you

130
00:05:15,520 --> 00:05:19,199
where the start of the xref table occurs

131
00:05:19,199 --> 00:05:22,560
so in this case it's 430 so

132
00:05:22,560 --> 00:05:25,360
this tells you tells the clients where

133
00:05:25,360 --> 00:05:25,680
the

134
00:05:25,680 --> 00:05:28,880
xrf table begins

135
00:05:29,680 --> 00:05:31,039
so i want to give you a little bit of

136
00:05:31,039 --> 00:05:33,759
information about how the pdf is paused

137
00:05:33,759 --> 00:05:36,479
this is an ultra high level view of it

138
00:05:36,479 --> 00:05:38,320
just so you can understand where our

139
00:05:38,320 --> 00:05:40,720
injections occur

140
00:05:40,720 --> 00:05:43,039
so the start xref is read and points to

141
00:05:43,039 --> 00:05:45,039
the xref table

142
00:05:45,039 --> 00:05:47,759
the xref table then lists all the

143
00:05:47,759 --> 00:05:48,400
objects

144
00:05:48,400 --> 00:05:51,440
so the client the pdf client

145
00:05:51,440 --> 00:05:53,759
will look through all of the xrf table

146
00:05:53,759 --> 00:05:55,840
to gather all the objects

147
00:05:55,840 --> 00:05:57,919
and if you're going to do an injection

148
00:05:57,919 --> 00:05:59,199
it's probably going to

149
00:05:59,199 --> 00:06:01,759
occur within an object itself so our

150
00:06:01,759 --> 00:06:02,720
payload will be

151
00:06:02,720 --> 00:06:06,560
executed within an object so our payload

152
00:06:06,560 --> 00:06:08,160
will be executed when the object's

153
00:06:08,160 --> 00:06:10,160
executed and then the document is

154
00:06:10,160 --> 00:06:12,479
rendered

155
00:06:14,000 --> 00:06:16,479
so we have text streams and we have

156
00:06:16,479 --> 00:06:18,080
annotations

157
00:06:18,080 --> 00:06:20,560
in a text stream you can define your own

158
00:06:20,560 --> 00:06:21,360
text

159
00:06:21,360 --> 00:06:24,479
using a parenthesis

160
00:06:24,479 --> 00:06:26,479
so we have an object here which is

161
00:06:26,479 --> 00:06:28,560
number four it's got a length with the

162
00:06:28,560 --> 00:06:30,319
dictionary key length

163
00:06:30,319 --> 00:06:33,360
and the stream indicates it's a stream

164
00:06:33,360 --> 00:06:34,400
object

165
00:06:34,400 --> 00:06:37,680
the b team stands for begin text

166
00:06:37,680 --> 00:06:41,120
and we have the font and the font size

167
00:06:41,120 --> 00:06:43,520
and then finally we have where our

168
00:06:43,520 --> 00:06:45,520
injection can occur

169
00:06:45,520 --> 00:06:48,720
so inside parenthesis you can

170
00:06:48,720 --> 00:06:50,880
define your text which will be displayed

171
00:06:50,880 --> 00:06:51,840
on screen

172
00:06:51,840 --> 00:06:53,919
so if you can inject some a closing

173
00:06:53,919 --> 00:06:55,840
parenthesis then you can inject your own

174
00:06:55,840 --> 00:06:56,880
chord

175
00:06:56,880 --> 00:06:58,560
but there's a couple of problems we have

176
00:06:58,560 --> 00:07:00,880
here so

177
00:07:00,880 --> 00:07:03,280
if the length is different when you

178
00:07:03,280 --> 00:07:04,800
inject your code

179
00:07:04,800 --> 00:07:08,319
then the object won't be rendered and

180
00:07:08,319 --> 00:07:10,639
you'll need knowledge about the pdf when

181
00:07:10,639 --> 00:07:12,720
you inject here

182
00:07:12,720 --> 00:07:16,000
in order to link to other objects so i

183
00:07:16,000 --> 00:07:18,160
tried this on various libraries and i

184
00:07:18,160 --> 00:07:20,560
was unsuccessful in exploiting text

185
00:07:20,560 --> 00:07:23,280
text streams and this was because for

186
00:07:23,280 --> 00:07:24,400
two reasons

187
00:07:24,400 --> 00:07:28,400
one the um the parentheses were escaped

188
00:07:28,400 --> 00:07:28,960
correctly

189
00:07:28,960 --> 00:07:32,160
by the library and two the

190
00:07:32,160 --> 00:07:34,960
you you couldn't inject any chord

191
00:07:34,960 --> 00:07:36,400
because that would break the structure

192
00:07:36,400 --> 00:07:37,759
of the pdf

193
00:07:37,759 --> 00:07:40,319
so i was unsuccessful in exploiting text

194
00:07:40,319 --> 00:07:42,479
streams

195
00:07:42,479 --> 00:07:45,759
however i encountered annotations

196
00:07:45,759 --> 00:07:48,080
and annotations are great they'll let

197
00:07:48,080 --> 00:07:49,520
you specify

198
00:07:49,520 --> 00:07:52,720
a link anywhere in the document so you

199
00:07:52,720 --> 00:07:54,560
create a new annotation

200
00:07:54,560 --> 00:07:56,720
you give it a rectangle an area on the

201
00:07:56,720 --> 00:07:57,599
page to

202
00:07:57,599 --> 00:08:00,720
click you give it a border or whatever

203
00:08:00,720 --> 00:08:04,160
and you specify an action and

204
00:08:04,160 --> 00:08:06,720
that action can have a uri property or a

205
00:08:06,720 --> 00:08:07,440
uri

206
00:08:07,440 --> 00:08:10,720
dictionary key and in parenthesis

207
00:08:10,720 --> 00:08:14,080
you can specify a uri so our injection

208
00:08:14,080 --> 00:08:14,720
can occur

209
00:08:14,720 --> 00:08:17,759
here and this looks miles more promising

210
00:08:17,759 --> 00:08:18,560
for

211
00:08:18,560 --> 00:08:21,840
pdf injection attacks because we don't

212
00:08:21,840 --> 00:08:23,440
need knowledge of the pdf

213
00:08:23,440 --> 00:08:26,400
we can just inject another annotation

214
00:08:26,400 --> 00:08:28,240
and that won't affect the length

215
00:08:28,240 --> 00:08:31,759
of the object so it looks

216
00:08:31,759 --> 00:08:34,000
far more promising to inject inside

217
00:08:34,000 --> 00:08:36,719
annotations

218
00:08:38,159 --> 00:08:40,159
so i was testing various libraries i

219
00:08:40,159 --> 00:08:42,320
think i got to about eight

220
00:08:42,320 --> 00:08:44,560
and i came up with the following

221
00:08:44,560 --> 00:08:45,760
methodology

222
00:08:45,760 --> 00:08:48,880
identify construct and they exploit

223
00:08:48,880 --> 00:08:51,760
so first you need to identify can you

224
00:08:51,760 --> 00:08:53,519
break out of

225
00:08:53,519 --> 00:08:56,640
or can you use backslashes to escape

226
00:08:56,640 --> 00:08:59,839
the escapes added by the library i tried

227
00:08:59,839 --> 00:09:01,519
multi-byte characters

228
00:09:01,519 --> 00:09:05,440
so i use for example 5c 29 which is the

229
00:09:05,440 --> 00:09:08,000
backslash and a closing parenthesis and

230
00:09:08,000 --> 00:09:08,800
the library

231
00:09:08,800 --> 00:09:10,959
may convert those multi-characters to

232
00:09:10,959 --> 00:09:13,040
single back characters

233
00:09:13,040 --> 00:09:17,600
and allow you to escape the annotation

234
00:09:17,600 --> 00:09:20,880
i tried overflowing the ascii values so

235
00:09:20,880 --> 00:09:22,720
higher than the maximum amount allowed

236
00:09:22,720 --> 00:09:23,920
in ascii

237
00:09:23,920 --> 00:09:25,360
and that could overflow to other

238
00:09:25,360 --> 00:09:27,600
characters that might bypass

239
00:09:27,600 --> 00:09:30,000
the check

240
00:09:30,640 --> 00:09:33,839
i tried causing parsing errors by

241
00:09:33,839 --> 00:09:35,360
injecting nulls

242
00:09:35,360 --> 00:09:38,720
and injecting endeavour file markers

243
00:09:38,720 --> 00:09:41,760
and also comments once i

244
00:09:41,760 --> 00:09:45,279
identified that the library was

245
00:09:45,279 --> 00:09:46,320
vulnerable

246
00:09:46,320 --> 00:09:49,440
then i tried to construct the attack

247
00:09:49,440 --> 00:09:50,880
so there's two ways to construct the

248
00:09:50,880 --> 00:09:53,120
attack you can call the alert one

249
00:09:53,120 --> 00:09:54,000
function

250
00:09:54,000 --> 00:09:57,279
if you have a pdf that is not blind

251
00:09:57,279 --> 00:10:00,000
so you've got a reflected pdf injection

252
00:10:00,000 --> 00:10:01,519
vulnerability

253
00:10:01,519 --> 00:10:04,399
so you can use the alert function so

254
00:10:04,399 --> 00:10:05,839
it's app.alert in

255
00:10:05,839 --> 00:10:09,200
acrobat or in chrome and

256
00:10:09,200 --> 00:10:11,200
that will tell you whether the injection

257
00:10:11,200 --> 00:10:12,720
was successful

258
00:10:12,720 --> 00:10:15,279
but if you have a blind vulnerability so

259
00:10:15,279 --> 00:10:17,120
a blind pdf injection

260
00:10:17,120 --> 00:10:20,480
you have no idea what the

261
00:10:20,480 --> 00:10:23,600
pdf structure is going to be like you

262
00:10:23,600 --> 00:10:25,600
don't actually interact with the pdf

263
00:10:25,600 --> 00:10:28,000
somebody else does but you have no idea

264
00:10:28,000 --> 00:10:29,519
what that pdf

265
00:10:29,519 --> 00:10:32,000
looks like then you can use a callback

266
00:10:32,000 --> 00:10:34,399
using the submit form function

267
00:10:34,399 --> 00:10:36,320
in javascript or the submit form

268
00:10:36,320 --> 00:10:37,440
function in

269
00:10:37,440 --> 00:10:40,079
pdf actions and then once you've

270
00:10:40,079 --> 00:10:41,360
identified that the

271
00:10:41,360 --> 00:10:44,560
the victim has clicked on um somewhere

272
00:10:44,560 --> 00:10:45,839
in the pdf and your

273
00:10:45,839 --> 00:10:48,880
um your exploit then you can build your

274
00:10:48,880 --> 00:10:50,880
exploit to steal the contents of that

275
00:10:50,880 --> 00:10:53,519
unknown pdf using the submit form

276
00:10:53,519 --> 00:10:54,959
function

277
00:10:54,959 --> 00:10:57,760
or you can steal the contents of the pdf

278
00:10:57,760 --> 00:10:58,800
without javascript

279
00:10:58,800 --> 00:11:02,479
using the submit form action

280
00:11:03,600 --> 00:11:06,480
so on two vulnerable libraries so i

281
00:11:06,480 --> 00:11:07,440
tested around

282
00:11:07,440 --> 00:11:10,560
eight libraries until i encountered a

283
00:11:10,560 --> 00:11:11,200
vulnerable one

284
00:11:11,200 --> 00:11:12,320
[Music]

285
00:11:12,320 --> 00:11:14,320
the first vulnerable library was called

286
00:11:14,320 --> 00:11:16,399
pdf hyphen lib

287
00:11:16,399 --> 00:11:20,000
this is an npm uh module and works with

288
00:11:20,000 --> 00:11:20,800
node

289
00:11:20,800 --> 00:11:25,120
and it gets around 52 well over 52 000

290
00:11:25,120 --> 00:11:26,959
weekly downloads

291
00:11:26,959 --> 00:11:30,480
but they made a pretty huge mistake so

292
00:11:30,480 --> 00:11:34,880
here's some javascript on the um

293
00:11:34,880 --> 00:11:37,120
displayed on screen that allows you to

294
00:11:37,120 --> 00:11:39,120
construct a pdf

295
00:11:39,120 --> 00:11:42,240
and you can create an annotation and

296
00:11:42,240 --> 00:11:45,600
that annotation has a helper which is

297
00:11:45,600 --> 00:11:48,320
called pdfstring.off

298
00:11:48,320 --> 00:11:50,320
so if we zoom into that this is the

299
00:11:50,320 --> 00:11:51,680
vulnerable code

300
00:11:51,680 --> 00:11:54,880
so the uri property

301
00:11:54,880 --> 00:11:57,760
is using this function and your input

302
00:11:57,760 --> 00:11:58,240
lands

303
00:11:58,240 --> 00:12:01,440
inside this function and what you can do

304
00:12:01,440 --> 00:12:03,360
you can inject a parenthesis to break

305
00:12:03,360 --> 00:12:05,760
out of that

306
00:12:06,000 --> 00:12:09,200
text stream or annotation uri stream

307
00:12:09,200 --> 00:12:11,920
and you can break your you can inject

308
00:12:11,920 --> 00:12:15,199
your own pdf code

309
00:12:16,000 --> 00:12:18,120
the next library i encountered it is

310
00:12:18,120 --> 00:12:19,680
jspdf

311
00:12:19,680 --> 00:12:21,760
this has over a quarter of a million

312
00:12:21,760 --> 00:12:23,279
weekly downloads

313
00:12:23,279 --> 00:12:26,320
so it's quite popular

314
00:12:26,399 --> 00:12:29,120
they have it you can define annotations

315
00:12:29,120 --> 00:12:30,720
using their api

316
00:12:30,720 --> 00:12:32,959
and in their api they have a url

317
00:12:32,959 --> 00:12:34,160
property

318
00:12:34,160 --> 00:12:36,480
and the url property was vulnerable to

319
00:12:36,480 --> 00:12:40,079
pdf injection like the previous example

320
00:12:40,079 --> 00:12:43,200
so here your input occurs in this url

321
00:12:43,200 --> 00:12:43,920
property

322
00:12:43,920 --> 00:12:45,920
and you can inject parenthesis to inject

323
00:12:45,920 --> 00:12:49,120
your own pdf code

324
00:12:49,839 --> 00:12:51,600
so now let's talk about exploiting

325
00:12:51,600 --> 00:12:54,480
injections on acrobat

326
00:12:54,480 --> 00:12:57,519
so this is the alert one of pdf

327
00:12:57,519 --> 00:12:58,560
injection

328
00:12:58,560 --> 00:13:00,320
so like you've got an alert one in

329
00:13:00,320 --> 00:13:02,560
javascript this is the same sort of

330
00:13:02,560 --> 00:13:03,200
style

331
00:13:03,200 --> 00:13:06,560
for pdf injection so first we break out

332
00:13:06,560 --> 00:13:08,240
of the pdf string

333
00:13:08,240 --> 00:13:11,760
using the closing parenthesis we use the

334
00:13:11,760 --> 00:13:14,160
js dictionary to define our javascript

335
00:13:14,160 --> 00:13:15,480
so in this case

336
00:13:15,480 --> 00:13:18,880
app.alert1 we repair the

337
00:13:18,880 --> 00:13:21,040
existing action using an opening

338
00:13:21,040 --> 00:13:22,399
parenthesis

339
00:13:22,399 --> 00:13:24,959
and then this will create an alert box

340
00:13:24,959 --> 00:13:27,519
to prove that our injection worked

341
00:13:27,519 --> 00:13:30,639
i use this style of injection across

342
00:13:30,639 --> 00:13:33,040
many different injections

343
00:13:33,040 --> 00:13:34,959
to prove my injection worked and then

344
00:13:34,959 --> 00:13:38,560
build up on that and improve it

345
00:13:39,600 --> 00:13:42,880
so although i had javascript execution

346
00:13:42,880 --> 00:13:44,959
there was a couple of challenges and

347
00:13:44,959 --> 00:13:45,920
those challenges

348
00:13:45,920 --> 00:13:48,560
were the limitations of acrobat

349
00:13:48,560 --> 00:13:50,399
javascript

350
00:13:50,399 --> 00:13:53,120
you couldn't access the dom you couldn't

351
00:13:53,120 --> 00:13:54,560
read cookies

352
00:13:54,560 --> 00:13:57,199
you only had a basic selection of

353
00:13:57,199 --> 00:13:59,199
objects to choose from

354
00:13:59,199 --> 00:14:00,800
so although you've got javascript

355
00:14:00,800 --> 00:14:02,480
execution you're limited

356
00:14:02,480 --> 00:14:07,199
on what you can do in acrobat javascript

357
00:14:08,160 --> 00:14:10,720
but i thought well we can exfiltrate the

358
00:14:10,720 --> 00:14:11,680
contents

359
00:14:11,680 --> 00:14:14,560
of the pdf so we've got javascript

360
00:14:14,560 --> 00:14:15,279
execution

361
00:14:15,279 --> 00:14:18,240
why don't we get the contents of the pdf

362
00:14:18,240 --> 00:14:18,959
so

363
00:14:18,959 --> 00:14:22,240
here i injected the

364
00:14:22,240 --> 00:14:25,519
submit form function and called it

365
00:14:25,519 --> 00:14:28,399
to an external collaborator url and

366
00:14:28,399 --> 00:14:29,120
passed

367
00:14:29,120 --> 00:14:32,160
the submit as property to the submit

368
00:14:32,160 --> 00:14:32,880
form

369
00:14:32,880 --> 00:14:37,040
um function object

370
00:14:37,040 --> 00:14:40,399
and specified pdf this would then steal

371
00:14:40,399 --> 00:14:43,199
the contents of the entire pdf

372
00:14:43,199 --> 00:14:44,720
which is pretty cool because if you have

373
00:14:44,720 --> 00:14:46,639
a blind pdf injection

374
00:14:46,639 --> 00:14:48,480
then you can get the entire contents of

375
00:14:48,480 --> 00:14:49,680
that pdf

376
00:14:49,680 --> 00:14:51,920
whenever the user clicks anywhere on the

377
00:14:51,920 --> 00:14:54,399
pdf

378
00:14:54,800 --> 00:14:57,279
you can also do this without javascript

379
00:14:57,279 --> 00:15:00,000
which might be important when a client

380
00:15:00,000 --> 00:15:02,880
does not support javascript but allows

381
00:15:02,880 --> 00:15:04,800
you to use the submit form

382
00:15:04,800 --> 00:15:08,880
action so here i'm injecting

383
00:15:08,880 --> 00:15:11,920
a new annotation i specify the submit

384
00:15:11,920 --> 00:15:13,199
form action

385
00:15:13,199 --> 00:15:16,079
give it an external collaborator url and

386
00:15:16,079 --> 00:15:17,680
then

387
00:15:17,680 --> 00:15:20,880
pass the opening parenthesis

388
00:15:20,880 --> 00:15:24,240
to continue the

389
00:15:24,240 --> 00:15:27,519
rest of the code

390
00:15:27,519 --> 00:15:31,279
i use the flags dictionary key

391
00:15:31,279 --> 00:15:34,800
and if you specify 256

392
00:15:34,800 --> 00:15:37,839
then this means the entire contents of

393
00:15:37,839 --> 00:15:38,720
the pdf

394
00:15:38,720 --> 00:15:40,480
will be submitted to that external

395
00:15:40,480 --> 00:15:43,360
location so this is really handy for

396
00:15:43,360 --> 00:15:46,880
blind pdf injection

397
00:15:47,920 --> 00:15:50,480
and i found a way to booby trap the

398
00:15:50,480 --> 00:15:51,360
entire

399
00:15:51,360 --> 00:15:54,320
pdf document so no matter where the

400
00:15:54,320 --> 00:15:56,560
victim clicks on the page

401
00:15:56,560 --> 00:16:00,480
this javascript or submit form action

402
00:16:00,480 --> 00:16:02,880
will be called

403
00:16:02,880 --> 00:16:05,839
so first i inject a separate annotation

404
00:16:05,839 --> 00:16:06,160
i

405
00:16:06,160 --> 00:16:10,079
specify the wrecked dictionary key which

406
00:16:10,079 --> 00:16:11,519
specifies

407
00:16:11,519 --> 00:16:13,839
where on the page you want the

408
00:16:13,839 --> 00:16:14,880
annotation

409
00:16:14,880 --> 00:16:17,199
to be clickable so in this case it's the

410
00:16:17,199 --> 00:16:19,120
x and y coordinate and the width and

411
00:16:19,120 --> 00:16:19,920
height

412
00:16:19,920 --> 00:16:22,560
and this makes the entire page clickable

413
00:16:22,560 --> 00:16:23,199
and then

414
00:16:23,199 --> 00:16:25,519
i use the existing parenthesis to

415
00:16:25,519 --> 00:16:28,560
complete the injection

416
00:16:29,680 --> 00:16:32,320
you can also execute automatically on

417
00:16:32,320 --> 00:16:33,199
acrobat

418
00:16:33,199 --> 00:16:35,360
which is really powerful because you can

419
00:16:35,360 --> 00:16:37,759
inject an annotation and all the victim

420
00:16:37,759 --> 00:16:38,560
needs to do is

421
00:16:38,560 --> 00:16:41,839
open the pdf you can do this using the

422
00:16:41,839 --> 00:16:44,480
pv dictionary key once that's been

423
00:16:44,480 --> 00:16:45,600
specified

424
00:16:45,600 --> 00:16:49,040
then the annotation will execute

425
00:16:49,040 --> 00:16:50,240
automatically

426
00:16:50,240 --> 00:16:53,440
when the page is loaded

427
00:16:53,440 --> 00:16:58,560
there is also a pc dictionary key

428
00:16:58,560 --> 00:17:02,720
and this executes when the pdf is closed

429
00:17:02,720 --> 00:17:05,839
so you can do an injection

430
00:17:05,839 --> 00:17:09,439
on a blind pdf injection the victim can

431
00:17:09,439 --> 00:17:10,959
open the pdf

432
00:17:10,959 --> 00:17:12,880
you know when the victim has opened it

433
00:17:12,880 --> 00:17:14,720
and when the victim has closed it

434
00:17:14,720 --> 00:17:19,039
it is super powerful

435
00:17:19,039 --> 00:17:21,679
so then i came up with the shortest

436
00:17:21,679 --> 00:17:23,280
possible xs a

437
00:17:23,280 --> 00:17:27,280
pdf vector and

438
00:17:27,280 --> 00:17:29,200
here we have the existing chord on the

439
00:17:29,200 --> 00:17:32,160
page and on acrobat what you can do is

440
00:17:32,160 --> 00:17:35,679
reuse the existing annotation regardless

441
00:17:35,679 --> 00:17:38,160
of what it is so in this case it's a uri

442
00:17:38,160 --> 00:17:41,280
but it will allow you to inject um

443
00:17:41,280 --> 00:17:44,080
your own value for the the current

444
00:17:44,080 --> 00:17:44,960
annotation

445
00:17:44,960 --> 00:17:47,919
and execute javascript and this is the

446
00:17:47,919 --> 00:17:48,880
shortest that

447
00:17:48,880 --> 00:17:51,919
i managed to get the vector2 so

448
00:17:51,919 --> 00:17:55,120
it's pretty cool we inject a javascript

449
00:17:55,120 --> 00:17:56,080
that uses

450
00:17:56,080 --> 00:17:58,640
the existing action we call the alert

451
00:17:58,640 --> 00:17:59,520
function

452
00:17:59,520 --> 00:18:01,919
and we use the existing parenthesis to

453
00:18:01,919 --> 00:18:03,520
complete the injection

454
00:18:03,520 --> 00:18:07,520
so i think that's probably the shortest

455
00:18:08,240 --> 00:18:10,960
pdf injection vector possible but i

456
00:18:10,960 --> 00:18:11,840
challenge you to

457
00:18:11,840 --> 00:18:15,840
try and find one shorter

458
00:18:16,640 --> 00:18:20,799
so i've mentioned that we can open

459
00:18:20,799 --> 00:18:23,200
you can track when a pdf is opened or

460
00:18:23,200 --> 00:18:24,320
closed

461
00:18:24,320 --> 00:18:27,520
automatically from an annotation

462
00:18:27,520 --> 00:18:29,840
but what about when you're loading a pdf

463
00:18:29,840 --> 00:18:32,720
from the file system

464
00:18:32,720 --> 00:18:35,200
well there are a couple of challenges

465
00:18:35,200 --> 00:18:36,960
post requests are blocked

466
00:18:36,960 --> 00:18:39,200
so the user gets a prompt whether to

467
00:18:39,200 --> 00:18:41,280
allow or deny them

468
00:18:41,280 --> 00:18:43,360
well that's not very good for an

469
00:18:43,360 --> 00:18:45,840
attacker

470
00:18:45,840 --> 00:18:47,440
is there a way that we can make a

471
00:18:47,440 --> 00:18:49,760
request automatically

472
00:18:49,760 --> 00:18:52,240
regardless if the user clicks allow or

473
00:18:52,240 --> 00:18:53,520
deny

474
00:18:53,520 --> 00:18:55,679
well i wrote an enumerator to do just

475
00:18:55,679 --> 00:18:57,280
that

476
00:18:57,280 --> 00:18:59,919
so i wrote an enumerator to loop through

477
00:18:59,919 --> 00:19:01,520
all the

478
00:19:01,520 --> 00:19:04,960
objects and call every single function

479
00:19:04,960 --> 00:19:07,360
and pass the collaborator url as the

480
00:19:07,360 --> 00:19:08,720
argument

481
00:19:08,720 --> 00:19:13,440
and i skipped the functions that i knew

482
00:19:13,440 --> 00:19:17,360
required a prompt and then

483
00:19:17,360 --> 00:19:20,480
waited to see what results i would get i

484
00:19:20,480 --> 00:19:21,440
found a function

485
00:19:21,440 --> 00:19:24,640
it's called cbs shared review

486
00:19:24,640 --> 00:19:28,240
if offline dialogue wow okay that's a

487
00:19:28,240 --> 00:19:29,600
mouthful

488
00:19:29,600 --> 00:19:32,640
that is interesting though um so what

489
00:19:32,640 --> 00:19:34,240
happens

490
00:19:34,240 --> 00:19:37,440
is it makes a dns request

491
00:19:37,440 --> 00:19:39,520
regardless what option you choose in the

492
00:19:39,520 --> 00:19:40,480
prompt

493
00:19:40,480 --> 00:19:42,240
which is really cool because we can

494
00:19:42,240 --> 00:19:43,520
track when

495
00:19:43,520 --> 00:19:46,480
a user opens or closes the pdf from the

496
00:19:46,480 --> 00:19:47,679
file system

497
00:19:47,679 --> 00:19:49,440
and we can enumerate the contents of the

498
00:19:49,440 --> 00:19:52,480
pdf using dns

499
00:19:52,480 --> 00:19:56,080
and steal the contents of the pdf

500
00:19:56,080 --> 00:19:58,320
and this is what the dialog looks like

501
00:19:58,320 --> 00:19:59,520
so

502
00:19:59,520 --> 00:20:01,360
when you execute the function it makes

503
00:20:01,360 --> 00:20:03,280
the dns request

504
00:20:03,280 --> 00:20:06,159
and it says acrobat reader cannot

505
00:20:06,159 --> 00:20:07,919
connect to the review server

506
00:20:07,919 --> 00:20:10,880
and then shows the reverse dns so i know

507
00:20:10,880 --> 00:20:11,200
that

508
00:20:11,200 --> 00:20:12,720
that has worked correctly and i get an

509
00:20:12,720 --> 00:20:14,559
interaction in burp

510
00:20:14,559 --> 00:20:17,840
to tell to tell me that the

511
00:20:17,840 --> 00:20:20,159
request has been made and you've got two

512
00:20:20,159 --> 00:20:21,039
options

513
00:20:21,039 --> 00:20:23,280
work offline or keep trying and it

514
00:20:23,280 --> 00:20:24,480
doesn't matter which they click

515
00:20:24,480 --> 00:20:28,000
which is cool so you can track

516
00:20:28,000 --> 00:20:31,360
when the user open and close a pdf

517
00:20:31,360 --> 00:20:35,840
without any user interaction

518
00:20:36,559 --> 00:20:39,120
so i was quite pleased with exploiting

519
00:20:39,120 --> 00:20:40,240
acrobat

520
00:20:40,240 --> 00:20:43,440
but i wanted to exploit chrome too

521
00:20:43,440 --> 00:20:46,799
so i wanted to use my existing

522
00:20:46,799 --> 00:20:51,120
injections on chrome but they all failed

523
00:20:51,520 --> 00:20:54,880
so i tried all the existing vectors and

524
00:20:54,880 --> 00:20:56,159
they didn't work

525
00:20:56,159 --> 00:21:00,000
so then i tried to overwrite the url

526
00:21:00,000 --> 00:21:02,400
so instead of executing javascript i

527
00:21:02,400 --> 00:21:04,880
simply tried to change the url

528
00:21:04,880 --> 00:21:07,760
so i did this by injecting an additional

529
00:21:07,760 --> 00:21:10,159
annotation in the annotations array

530
00:21:10,159 --> 00:21:13,280
and specified a uri and specified an

531
00:21:13,280 --> 00:21:14,840
external

532
00:21:14,840 --> 00:21:18,559
url and um this allowed me to

533
00:21:18,559 --> 00:21:21,120
overwrite the url which was pretty cool

534
00:21:21,120 --> 00:21:22,240
so

535
00:21:22,240 --> 00:21:23,919
i could overwrite the existing action

536
00:21:23,919 --> 00:21:25,919
with a new action that would then change

537
00:21:25,919 --> 00:21:27,520
the url

538
00:21:27,520 --> 00:21:29,520
but we can't exfiltrate the pdf from

539
00:21:29,520 --> 00:21:31,840
that

540
00:21:32,960 --> 00:21:35,440
so there was a couple of challenges so

541
00:21:35,440 --> 00:21:36,799
the acrobat

542
00:21:36,799 --> 00:21:39,520
vectors didn't work javascript didn't

543
00:21:39,520 --> 00:21:39,919
work

544
00:21:39,919 --> 00:21:43,280
in annotations we could use over we

545
00:21:43,280 --> 00:21:44,559
could overwrite the url

546
00:21:44,559 --> 00:21:47,039
which was something but it was still not

547
00:21:47,039 --> 00:21:48,720
as impressive as

548
00:21:48,720 --> 00:21:51,520
executing javascript so can we make

549
00:21:51,520 --> 00:21:52,720
javascript work

550
00:21:52,720 --> 00:21:55,520
work in chrome

551
00:21:56,080 --> 00:21:59,440
well this was my first attempt to create

552
00:21:59,440 --> 00:22:01,440
javascript execution from a pdf

553
00:22:01,440 --> 00:22:03,520
injection on chrome

554
00:22:03,520 --> 00:22:06,640
and as you can see it's a lot of code a

555
00:22:06,640 --> 00:22:09,200
lot of pdf injection

556
00:22:09,200 --> 00:22:12,000
and some of parts of it requires

557
00:22:12,000 --> 00:22:13,919
knowledge and references to different

558
00:22:13,919 --> 00:22:15,760
objects in the pdf

559
00:22:15,760 --> 00:22:17,600
which of course we can't have because we

560
00:22:17,600 --> 00:22:21,280
have no knowledge of this pdf

561
00:22:22,559 --> 00:22:24,320
so i managed to reduce a lot of that

562
00:22:24,320 --> 00:22:26,159
code and

563
00:22:26,159 --> 00:22:29,360
um with this injection vector

564
00:22:29,360 --> 00:22:33,280
this will execute javascript on chrome

565
00:22:33,280 --> 00:22:35,440
first the field type is required so in

566
00:22:35,440 --> 00:22:37,200
this case a button

567
00:22:37,200 --> 00:22:39,679
and the value of the button in this case

568
00:22:39,679 --> 00:22:41,840
it doesn't matter we just put here

569
00:22:41,840 --> 00:22:46,640
but whenever you have the um

570
00:22:46,640 --> 00:22:49,840
if you link the annotation to a submit

571
00:22:49,840 --> 00:22:51,120
form button

572
00:22:51,120 --> 00:22:53,280
then chrome will allow javascript

573
00:22:53,280 --> 00:22:55,520
execution on that annotation

574
00:22:55,520 --> 00:22:58,799
which is super handy

575
00:23:00,320 --> 00:23:02,799
so there was a couple of challenges so

576
00:23:02,799 --> 00:23:04,400
no knowledge of the pdf

577
00:23:04,400 --> 00:23:06,640
is needed which is cool but we are

578
00:23:06,640 --> 00:23:09,200
restricted by pdf

579
00:23:09,200 --> 00:23:13,120
and the capabilities of the javascript

580
00:23:13,120 --> 00:23:16,799
so i could call the submit form function

581
00:23:16,799 --> 00:23:19,120
but it will not enable me to steal the

582
00:23:19,120 --> 00:23:21,760
entire contents of the pdf

583
00:23:21,760 --> 00:23:24,240
so it doesn't support all the features

584
00:23:24,240 --> 00:23:26,000
that acrobat supports

585
00:23:26,000 --> 00:23:27,600
so there was a couple of challenges

586
00:23:27,600 --> 00:23:31,199
there that i needed to solve

587
00:23:31,440 --> 00:23:34,960
so of course i wrote an enumerator and i

588
00:23:34,960 --> 00:23:36,559
enumerated every

589
00:23:36,559 --> 00:23:40,080
object and property and

590
00:23:40,080 --> 00:23:42,400
firstly a for loop and used get on

591
00:23:42,400 --> 00:23:44,000
property names to gather all the

592
00:23:44,000 --> 00:23:45,200
properties

593
00:23:45,200 --> 00:23:49,440
then because um acrobat doesn't allow

594
00:23:49,440 --> 00:23:53,360
the console object like acrobat does

595
00:23:53,360 --> 00:23:56,480
um i had to output the data

596
00:23:56,480 --> 00:23:59,360
in chunks so i could gather all the

597
00:23:59,360 --> 00:24:01,760
information in an alert box

598
00:24:01,760 --> 00:24:05,200
so here i add the

599
00:24:05,200 --> 00:24:08,320
various properties to the chunks

600
00:24:08,320 --> 00:24:11,120
of the data and then output each of the

601
00:24:11,120 --> 00:24:12,240
chunks

602
00:24:12,240 --> 00:24:14,000
to give me a list of properties

603
00:24:14,000 --> 00:24:18,080
supported by that object

604
00:24:18,080 --> 00:24:21,200
and i found some cool functions get page

605
00:24:21,200 --> 00:24:22,159
number of words

606
00:24:22,159 --> 00:24:25,360
get page nth word these sound really

607
00:24:25,360 --> 00:24:27,039
promising for stealing the contents of

608
00:24:27,039 --> 00:24:29,679
the pdf

609
00:24:30,159 --> 00:24:33,279
so here's how i extracted text from

610
00:24:33,279 --> 00:24:36,880
a chrome pdf injection

611
00:24:36,880 --> 00:24:40,559
so i used the base uh injection as i

612
00:24:40,559 --> 00:24:43,039
mentioned previously

613
00:24:43,039 --> 00:24:46,320
so we inject the form button

614
00:24:46,320 --> 00:24:50,159
on the parent dictionary key

615
00:24:50,159 --> 00:24:53,520
and then we inject our annotation

616
00:24:53,520 --> 00:24:56,159
with javascript and then i'll loop

617
00:24:56,159 --> 00:24:56,799
through

618
00:24:56,799 --> 00:25:00,080
the words on the page so first i use get

619
00:25:00,080 --> 00:25:01,600
page number of words

620
00:25:01,600 --> 00:25:04,799
then i use get page nth word to get me a

621
00:25:04,799 --> 00:25:06,640
specific word on the page

622
00:25:06,640 --> 00:25:08,880
and then i store them in an array and

623
00:25:08,880 --> 00:25:10,480
then output

624
00:25:10,480 --> 00:25:13,600
each of the or

625
00:25:13,600 --> 00:25:15,279
words on the page and that will show me

626
00:25:15,279 --> 00:25:17,200
the words of the pdf

627
00:25:17,200 --> 00:25:19,039
and then i could submit that to an

628
00:25:19,039 --> 00:25:20,640
external server

629
00:25:20,640 --> 00:25:22,880
so a user would have to click anywhere

630
00:25:22,880 --> 00:25:24,000
on the page

631
00:25:24,000 --> 00:25:25,760
i could then steal the contents of that

632
00:25:25,760 --> 00:25:27,039
unknown pdf

633
00:25:27,039 --> 00:25:28,799
totally blind and it could go to my

634
00:25:28,799 --> 00:25:31,200
server

635
00:25:32,799 --> 00:25:35,279
another cool technique that i came up

636
00:25:35,279 --> 00:25:36,520
with is using

637
00:25:36,520 --> 00:25:40,559
ssrf via a pdf injection

638
00:25:40,559 --> 00:25:42,240
which is really exciting because i'll

639
00:25:42,240 --> 00:25:44,400
allow you to change to change different

640
00:25:44,400 --> 00:25:46,799
vulnerabilities together

641
00:25:46,799 --> 00:25:49,600
so here again i use the base chrome

642
00:25:49,600 --> 00:25:51,520
injection that i mentioned

643
00:25:51,520 --> 00:25:54,000
and this time instead of injecting a

644
00:25:54,000 --> 00:25:55,200
form button

645
00:25:55,200 --> 00:25:58,000
i inject a text field and give this text

646
00:25:58,000 --> 00:25:59,279
field

647
00:25:59,279 --> 00:26:01,760
a parameter name so using the t

648
00:26:01,760 --> 00:26:03,679
dictionary key you can specify

649
00:26:03,679 --> 00:26:06,640
a parameter name and the v dictionary

650
00:26:06,640 --> 00:26:07,360
key will

651
00:26:07,360 --> 00:26:10,240
allow you to specify a parameter value

652
00:26:10,240 --> 00:26:11,279
and then i use the

653
00:26:11,279 --> 00:26:13,919
submit form function and pass these

654
00:26:13,919 --> 00:26:15,919
arguments to the submit form function

655
00:26:15,919 --> 00:26:18,720
that will allow me to make a request and

656
00:26:18,720 --> 00:26:20,720
this is what the request looks like

657
00:26:20,720 --> 00:26:22,720
so interestingly there's no content type

658
00:26:22,720 --> 00:26:24,000
header but

659
00:26:24,000 --> 00:26:27,360
i can control the um

660
00:26:27,360 --> 00:26:30,480
the post of the the post parameters

661
00:26:30,480 --> 00:26:33,039
so here i control through and bar and

662
00:26:33,039 --> 00:26:34,400
also interestingly

663
00:26:34,400 --> 00:26:37,440
you can embed raw new lines in the

664
00:26:37,440 --> 00:26:38,240
request

665
00:26:38,240 --> 00:26:40,799
which can be useful for other attacks

666
00:26:40,799 --> 00:26:44,158
such as request smuggling

667
00:26:46,080 --> 00:26:49,039
after exploiting chrome injections i

668
00:26:49,039 --> 00:26:49,679
thought

669
00:26:49,679 --> 00:26:53,440
how about one that works on both clients

670
00:26:53,440 --> 00:26:55,600
that would be pretty interesting and the

671
00:26:55,600 --> 00:26:57,039
way i can i can do that

672
00:26:57,039 --> 00:26:59,840
is reuse the existing annotation on

673
00:26:59,840 --> 00:27:00,720
acrobat

674
00:27:00,720 --> 00:27:04,000
so here we reuse the existing annotation

675
00:27:04,000 --> 00:27:06,559
and then which is a uri but we inject

676
00:27:06,559 --> 00:27:07,360
javascript

677
00:27:07,360 --> 00:27:09,200
acrobat happily allows that and that

678
00:27:09,200 --> 00:27:11,840
executes using the existing annotation

679
00:27:11,840 --> 00:27:14,799
on acrobat and then we inject a further

680
00:27:14,799 --> 00:27:16,000
annotation

681
00:27:16,000 --> 00:27:19,200
with a rectangle specific for

682
00:27:19,200 --> 00:27:21,840
chrome so it will cover half the page or

683
00:27:21,840 --> 00:27:22,559
something

684
00:27:22,559 --> 00:27:24,799
and then when the victim clicks on that

685
00:27:24,799 --> 00:27:26,799
it would then execute javascript on

686
00:27:26,799 --> 00:27:27,600
chrome

687
00:27:27,600 --> 00:27:29,039
and if they click on the existing

688
00:27:29,039 --> 00:27:30,799
annotation that would work

689
00:27:30,799 --> 00:27:34,799
on acrobat

690
00:27:34,799 --> 00:27:36,880
so now i'd like to give you a demo of a

691
00:27:36,880 --> 00:27:40,559
real-time chrome injection

692
00:27:42,380 --> 00:27:45,600
[Music]

693
00:27:45,600 --> 00:27:49,760
so here we have the jspdf library

694
00:27:49,760 --> 00:27:51,760
they have this cool interface where you

695
00:27:51,760 --> 00:27:53,840
can use javascript

696
00:27:53,840 --> 00:27:56,480
in this box and then generate a pdf in

697
00:27:56,480 --> 00:27:57,840
this box

698
00:27:57,840 --> 00:28:00,639
so here

699
00:28:01,520 --> 00:28:04,960
we create a new jspdf object

700
00:28:04,960 --> 00:28:07,279
we set the font size we create an

701
00:28:07,279 --> 00:28:08,640
annotation

702
00:28:08,640 --> 00:28:10,399
and that annotation allows you to

703
00:28:10,399 --> 00:28:12,320
specify the x and y coordinates and the

704
00:28:12,320 --> 00:28:13,760
width and height

705
00:28:13,760 --> 00:28:16,480
we give the annotation a type of the

706
00:28:16,480 --> 00:28:17,120
link

707
00:28:17,120 --> 00:28:20,880
on the url and our input will go here

708
00:28:20,880 --> 00:28:25,600
and also add the text

709
00:28:25,600 --> 00:28:29,679
so you have this library supports

710
00:28:29,679 --> 00:28:31,200
client-side javascript

711
00:28:31,200 --> 00:28:34,159
as well as server-side javascript so the

712
00:28:34,159 --> 00:28:36,720
server-side stuff works with node.js

713
00:28:36,720 --> 00:28:39,520
and the client-side stuff works in the

714
00:28:39,520 --> 00:28:41,120
browser which is pretty cool for a

715
00:28:41,120 --> 00:28:43,039
demonstration

716
00:28:43,039 --> 00:28:46,399
so um we'll take the

717
00:28:46,399 --> 00:28:49,360
injection that i mentioned in my talk so

718
00:28:49,360 --> 00:28:50,399
here we're

719
00:28:50,399 --> 00:28:53,200
um injecting a new annotation with a

720
00:28:53,200 --> 00:28:55,600
rectangle for the area

721
00:28:55,600 --> 00:28:59,520
we use the dictionary key to specify

722
00:28:59,520 --> 00:29:03,039
the form button and we use our

723
00:29:03,039 --> 00:29:05,039
we inject javascript that will just

724
00:29:05,039 --> 00:29:06,799
simply call the alert box

725
00:29:06,799 --> 00:29:09,760
so if i copy that

726
00:29:10,320 --> 00:29:13,520
and then if we

727
00:29:13,520 --> 00:29:16,660
inject into the url property

728
00:29:16,660 --> 00:29:17,919
[Music]

729
00:29:17,919 --> 00:29:21,200
so this is injecting raw pdf code

730
00:29:21,200 --> 00:29:24,159
in the url property so normally the

731
00:29:24,159 --> 00:29:25,200
attack would occur

732
00:29:25,200 --> 00:29:28,000
in a post request for example but for

733
00:29:28,000 --> 00:29:29,679
the purposes of demoing

734
00:29:29,679 --> 00:29:33,120
i'm showing you a client-side javascript

735
00:29:33,120 --> 00:29:35,520
representation instead

736
00:29:35,520 --> 00:29:37,919
so we've injected our pdf code and now

737
00:29:37,919 --> 00:29:38,960
as you can see

738
00:29:38,960 --> 00:29:41,279
the entire document is clickable you

739
00:29:41,279 --> 00:29:42,000
click on it

740
00:29:42,000 --> 00:29:45,279
and we get our alert box so that's how

741
00:29:45,279 --> 00:29:49,520
a pdf injection would work so this could

742
00:29:49,520 --> 00:29:52,880
apply to a non-blind

743
00:29:52,880 --> 00:29:54,720
situation where you know the structure

744
00:29:54,720 --> 00:29:57,360
of the pdf or a blind situation where

745
00:29:57,360 --> 00:29:58,480
you would call

746
00:29:58,480 --> 00:30:00,960
the submit form function to post to an

747
00:30:00,960 --> 00:30:02,480
external url

748
00:30:02,480 --> 00:30:06,159
now interestingly chrome will

749
00:30:06,159 --> 00:30:09,520
only allow you to call javascript or

750
00:30:09,520 --> 00:30:11,760
sorry not call javascript to call the

751
00:30:11,760 --> 00:30:12,880
form submission

752
00:30:12,880 --> 00:30:15,200
or the with a user interaction event so

753
00:30:15,200 --> 00:30:23,840
that's something to bear in mind

754
00:30:24,000 --> 00:30:27,840
so um whilst testing various pdf

755
00:30:27,840 --> 00:30:30,240
generation software and testing various

756
00:30:30,240 --> 00:30:31,279
sites

757
00:30:31,279 --> 00:30:34,480
i came across a hr application that was

758
00:30:34,480 --> 00:30:36,960
vulnerable to pdf upload

759
00:30:36,960 --> 00:30:40,240
and what was interesting was i could use

760
00:30:40,240 --> 00:30:43,679
insert scripts fantastic technique

761
00:30:43,679 --> 00:30:47,279
to read same origin resources

762
00:30:47,279 --> 00:30:50,640
and that was really cool but

763
00:30:50,640 --> 00:30:54,240
the waff was blocking the pdf user agent

764
00:30:54,240 --> 00:30:56,720
so my my attack wasn't working which was

765
00:30:56,720 --> 00:30:58,320
so unfortunate

766
00:30:58,320 --> 00:31:01,039
but thankfully i came around i found a

767
00:31:01,039 --> 00:31:02,000
solution

768
00:31:02,000 --> 00:31:04,960
to to bypass that by using cash

769
00:31:04,960 --> 00:31:06,320
resources

770
00:31:06,320 --> 00:31:09,360
so as long as the uh resource was cached

771
00:31:09,360 --> 00:31:11,919
i could read that using this technique

772
00:31:11,919 --> 00:31:12,799
without

773
00:31:12,799 --> 00:31:16,840
uh triggering the waff which was pretty

774
00:31:16,840 --> 00:31:18,960
cool

775
00:31:18,960 --> 00:31:22,799
so to wrap up um pdf libraries should

776
00:31:22,799 --> 00:31:24,399
escape pdf strings

777
00:31:24,399 --> 00:31:26,240
that includes parenthesis and

778
00:31:26,240 --> 00:31:27,519
backslashes

779
00:31:27,519 --> 00:31:28,960
if you don't escape any of those

780
00:31:28,960 --> 00:31:30,559
characters then you're in trouble

781
00:31:30,559 --> 00:31:33,760
too and vulnerable to pdf injection you

782
00:31:33,760 --> 00:31:34,320
can

783
00:31:34,320 --> 00:31:37,840
confirm that your software is

784
00:31:37,840 --> 00:31:40,799
not vulnerable to these attacks by using

785
00:31:40,799 --> 00:31:42,880
the vectors mentioned in this post

786
00:31:42,880 --> 00:31:44,840
and then confirming that none of them

787
00:31:44,840 --> 00:31:46,880
execute

788
00:31:46,880 --> 00:31:49,200
consider putting validation on user

789
00:31:49,200 --> 00:31:50,320
input going inside

790
00:31:50,320 --> 00:31:55,200
pdfs to prevent these sort of attacks

791
00:31:56,480 --> 00:31:58,960
so i was inspired greatly by a lot of

792
00:31:58,960 --> 00:32:00,720
people for this pdf talk

793
00:32:00,720 --> 00:32:04,080
but in particular um insert script

794
00:32:04,080 --> 00:32:07,519
was definitely um very inspirational for

795
00:32:07,519 --> 00:32:08,720
my talk

796
00:32:08,720 --> 00:32:12,080
his talk on pdf mess with the web

797
00:32:12,080 --> 00:32:15,200
was fantastic and groundbreaking um i

798
00:32:15,200 --> 00:32:16,399
really enjoyed that

799
00:32:16,399 --> 00:32:18,399
um and i didn't know anything about a

800
00:32:18,399 --> 00:32:20,880
pdf until i watched

801
00:32:20,880 --> 00:32:24,000
albertini's talk on how to write a pdf

802
00:32:24,000 --> 00:32:26,960
and that was so useful and so easy to

803
00:32:26,960 --> 00:32:28,000
understand

804
00:32:28,000 --> 00:32:31,519
um it was um brilliant uh work from him

805
00:32:31,519 --> 00:32:33,679
and without that i would not have been

806
00:32:33,679 --> 00:32:35,600
able to do this talk

807
00:32:35,600 --> 00:32:39,440
and also ben and cody they inspired the

808
00:32:39,440 --> 00:32:42,640
uh ssrf attack that i proposed

809
00:32:42,640 --> 00:32:44,720
based on their work with using pdfs and

810
00:32:44,720 --> 00:32:48,880
using ssrf attack

811
00:32:49,200 --> 00:32:50,880
so what do i want to tell you to take

812
00:32:50,880 --> 00:32:52,640
away from this talk

813
00:32:52,640 --> 00:32:54,960
well vulnerable libraries make user

814
00:32:54,960 --> 00:32:55,760
input

815
00:32:55,760 --> 00:32:59,200
inside pdfs dangerous chrome and acrobat

816
00:32:59,200 --> 00:33:02,399
enable these injections and one

817
00:33:02,399 --> 00:33:05,039
link can compromise the contents of a

818
00:33:05,039 --> 00:33:07,440
pdf

819
00:33:07,440 --> 00:33:10,080
if you want some further reading and

820
00:33:10,080 --> 00:33:10,559
also

821
00:33:10,559 --> 00:33:12,960
injection samples then please visit our

822
00:33:12,960 --> 00:33:15,200
post here

823
00:33:15,200 --> 00:33:17,200
and i hope you've enjoyed this talk and

824
00:33:17,200 --> 00:33:19,679
i'll take five minutes for questions

825
00:33:19,679 --> 00:33:23,440
thank you

