1
00:00:01,130 --> 00:00:14,690
[Music]

2
00:00:19,359 --> 00:00:20,320
hello this is

3
00:00:20,320 --> 00:00:22,800
siam ball from the chinese university of

4
00:00:22,800 --> 00:00:23,840
hong kong

5
00:00:23,840 --> 00:00:26,000
today i'm presenting a new kind of

6
00:00:26,000 --> 00:00:27,920
attack called fingerprint jacking

7
00:00:27,920 --> 00:00:30,560
attack and this is a practical

8
00:00:30,560 --> 00:00:31,279
fingerprint

9
00:00:31,279 --> 00:00:33,200
authorization hijacking attack in

10
00:00:33,200 --> 00:00:35,760
android apps

11
00:00:35,760 --> 00:00:37,440
and first of all let me give you a

12
00:00:37,440 --> 00:00:39,760
little bit introduction on myself

13
00:00:39,760 --> 00:00:42,640
i'm a second year phd student in the

14
00:00:42,640 --> 00:00:43,440
chinese

15
00:00:43,440 --> 00:00:45,680
chinese university of hong kong and i'm

16
00:00:45,680 --> 00:00:46,559
from the lab

17
00:00:46,559 --> 00:00:49,600
mobi tech and our lab actually did

18
00:00:49,600 --> 00:00:52,800
a lot of work on oas security before

19
00:00:52,800 --> 00:00:54,800
if you are interested you can check our

20
00:00:54,800 --> 00:00:56,079
previous talk

21
00:00:56,079 --> 00:00:58,960
including blackhead asia last year and

22
00:00:58,960 --> 00:00:59,920
blackhead europe

23
00:00:59,920 --> 00:01:03,680
in 2016. and for me my personal

24
00:01:03,680 --> 00:01:06,560
interests are mostly on web and android

25
00:01:06,560 --> 00:01:07,920
application security

26
00:01:07,920 --> 00:01:11,040
and i also love ctf and bug bounty

27
00:01:11,040 --> 00:01:12,640
basically anything happened in the

28
00:01:12,640 --> 00:01:14,320
security community

29
00:01:14,320 --> 00:01:17,600
and you can find me on twitter

30
00:01:17,600 --> 00:01:21,039
and this is my twitter handle

31
00:01:21,520 --> 00:01:24,840
okay let's directly jump into the

32
00:01:24,840 --> 00:01:26,159
demonstration

33
00:01:26,159 --> 00:01:29,280
and you can see now here we have an

34
00:01:29,280 --> 00:01:32,640
device running android 10 and

35
00:01:32,640 --> 00:01:36,159
we first open the app called the magix

36
00:01:36,159 --> 00:01:39,520
magix is a root manager app on android

37
00:01:39,520 --> 00:01:43,600
if you are an android developer or

38
00:01:43,600 --> 00:01:46,479
if you are a security researcher for

39
00:01:46,479 --> 00:01:47,040
android

40
00:01:47,040 --> 00:01:49,200
then you should be you may be very

41
00:01:49,200 --> 00:01:51,040
familiar with this one

42
00:01:51,040 --> 00:01:54,079
and it is just an app that can control

43
00:01:54,079 --> 00:01:56,640
which apps on your device can have the

44
00:01:56,640 --> 00:01:58,640
root access support that your device is

45
00:01:58,640 --> 00:02:00,399
already rooted

46
00:02:00,399 --> 00:02:03,759
then we can see in this in our

47
00:02:03,759 --> 00:02:06,960
magix manager currently there's no

48
00:02:06,960 --> 00:02:08,399
no apps being granted the rule

49
00:02:08,399 --> 00:02:10,639
permission then we open

50
00:02:10,639 --> 00:02:13,120
our demonstration app which is a very

51
00:02:13,120 --> 00:02:14,800
simple diary app

52
00:02:14,800 --> 00:02:16,560
which only have two buttons one is to

53
00:02:16,560 --> 00:02:18,480
create a new diary and another to view

54
00:02:18,480 --> 00:02:20,800
existing diaries

55
00:02:20,800 --> 00:02:23,200
then well the victim is using this app

56
00:02:23,200 --> 00:02:25,040
suddenly

57
00:02:25,040 --> 00:02:28,160
but he will he'll sing this interface of

58
00:02:28,160 --> 00:02:28,800
the

59
00:02:28,800 --> 00:02:31,840
lock screen if you like me you use your

60
00:02:31,840 --> 00:02:34,000
fingerprint to unlock your mobile device

61
00:02:34,000 --> 00:02:34,720
every day

62
00:02:34,720 --> 00:02:37,280
then you can have this impulse to put

63
00:02:37,280 --> 00:02:38,640
your fingerprint finger

64
00:02:38,640 --> 00:02:42,080
onto the fingerprint sensor right so

65
00:02:42,080 --> 00:02:45,360
this is what our victim did

66
00:02:45,360 --> 00:02:48,720
he put his fingerprint onto the sensor

67
00:02:48,720 --> 00:02:50,400
and try to unlock the device

68
00:02:50,400 --> 00:02:53,680
then then

69
00:02:53,680 --> 00:02:57,040
yeah it is unlocked and history his uh

70
00:02:57,040 --> 00:03:00,000
the interface is redirected back to the

71
00:03:00,000 --> 00:03:00,640
uh

72
00:03:00,640 --> 00:03:03,040
diary app however we can see that inside

73
00:03:03,040 --> 00:03:04,560
the diary app

74
00:03:04,560 --> 00:03:07,519
it actually executes some command with

75
00:03:07,519 --> 00:03:08,959
the root permission we can see it

76
00:03:08,959 --> 00:03:10,159
executed the id

77
00:03:10,159 --> 00:03:13,680
commands and return with the uid0

78
00:03:13,680 --> 00:03:16,879
so up to this point you may you may

79
00:03:16,879 --> 00:03:18,319
guess what happened

80
00:03:18,319 --> 00:03:21,440
are we presenting some local privilege

81
00:03:21,440 --> 00:03:23,920
privilege exclamation box here actually

82
00:03:23,920 --> 00:03:25,840
it's not we're just presenting some

83
00:03:25,840 --> 00:03:30,159
ui attack techniques so

84
00:03:30,159 --> 00:03:32,560
we can see that go back to the magics

85
00:03:32,560 --> 00:03:34,400
manager and see that

86
00:03:34,400 --> 00:03:37,760
inside the matches manager

87
00:03:37,760 --> 00:03:40,640
actually remember the list right now the

88
00:03:40,640 --> 00:03:41,040
list

89
00:03:41,040 --> 00:03:42,879
contains our demonstration app meaning

90
00:03:42,879 --> 00:03:45,120
that our app has been granted

91
00:03:45,120 --> 00:03:46,959
the root permission inside the magic

92
00:03:46,959 --> 00:03:49,440
through manager silently

93
00:03:49,440 --> 00:03:52,799
okay talking about the ui attack

94
00:03:52,799 --> 00:03:55,519
the one keyword jumping to your mind may

95
00:03:55,519 --> 00:03:57,760
be click jacking because our attack also

96
00:03:57,760 --> 00:03:58,879
called

97
00:03:58,879 --> 00:04:02,400
fingerprint jacking so click jacking is

98
00:04:02,400 --> 00:04:03,040
a

99
00:04:03,040 --> 00:04:06,000
very classic attack happening web

100
00:04:06,000 --> 00:04:07,280
browser

101
00:04:07,280 --> 00:04:10,799
have a history like 20 about 20 years

102
00:04:10,799 --> 00:04:14,159
so basically if you uh

103
00:04:14,159 --> 00:04:16,238
the attacker will make some malicious

104
00:04:16,238 --> 00:04:17,199
websites

105
00:04:17,199 --> 00:04:20,238
and meanwhile underneath the

106
00:04:20,238 --> 00:04:21,918
malicious website there will be some

107
00:04:21,918 --> 00:04:24,479
target website so that when the victim

108
00:04:24,479 --> 00:04:26,960
thinks it is like playing some game in

109
00:04:26,960 --> 00:04:27,600
this

110
00:04:27,600 --> 00:04:30,000
malicious website by click here and

111
00:04:30,000 --> 00:04:30,800
click there

112
00:04:30,800 --> 00:04:32,720
what actually happens that is clicking

113
00:04:32,720 --> 00:04:34,800
those buttons

114
00:04:34,800 --> 00:04:37,199
in the background which will authorize

115
00:04:37,199 --> 00:04:38,400
the money transfer

116
00:04:38,400 --> 00:04:42,880
for example in the online bank

117
00:04:42,880 --> 00:04:46,560
so our observation or our

118
00:04:46,560 --> 00:04:49,759
uh motivation is that nowadays

119
00:04:49,759 --> 00:04:53,120
people use the fingerprints everywhere

120
00:04:53,120 --> 00:04:54,960
especially on mobile devices

121
00:04:54,960 --> 00:04:57,440
for different purpose for example we can

122
00:04:57,440 --> 00:04:59,520
use simply use our fingerprint to

123
00:04:59,520 --> 00:05:01,600
authorize the money

124
00:05:01,600 --> 00:05:05,360
transferring in our mobile wallet or

125
00:05:05,360 --> 00:05:07,600
we can use the fingerprint to unlock

126
00:05:07,600 --> 00:05:09,440
this some app

127
00:05:09,440 --> 00:05:11,680
like the diary app in our first pre

128
00:05:11,680 --> 00:05:13,919
first demonstration

129
00:05:13,919 --> 00:05:16,960
so the fingerprint jack the high

130
00:05:16,960 --> 00:05:18,639
fingerprint jacking attack we present

131
00:05:18,639 --> 00:05:20,960
here is uh basically it's a ui

132
00:05:20,960 --> 00:05:24,080
attack and the target of this attack

133
00:05:24,080 --> 00:05:28,479
is to to let the user trick the user

134
00:05:28,479 --> 00:05:30,479
into authorizing some dangerous actions

135
00:05:30,479 --> 00:05:33,039
without noticing it

136
00:05:33,039 --> 00:05:35,039
so the interesting findings we want to

137
00:05:35,039 --> 00:05:36,720
share with you today is that first of

138
00:05:36,720 --> 00:05:37,600
all we find

139
00:05:37,600 --> 00:05:40,720
several attack techniques to

140
00:05:40,720 --> 00:05:44,000
conduct this fingerprint jacking attack

141
00:05:44,000 --> 00:05:45,759
and here the highlight highlighted

142
00:05:45,759 --> 00:05:47,600
keyword is practical and we'll

143
00:05:47,600 --> 00:05:50,080
explain later why our attack can be

144
00:05:50,080 --> 00:05:52,080
considered practical

145
00:05:52,080 --> 00:05:55,440
and then uh because we find that

146
00:05:55,440 --> 00:05:58,000
actually in android android uh have some

147
00:05:58,000 --> 00:06:00,880
mitigation to block this kind of attack

148
00:06:00,880 --> 00:06:03,039
however we managed to bypass the

149
00:06:03,039 --> 00:06:04,080
mitigation in

150
00:06:04,080 --> 00:06:08,560
android os mentioning about the ui

151
00:06:08,560 --> 00:06:09,600
attack

152
00:06:09,600 --> 00:06:12,080
in android the first thing we need to

153
00:06:12,080 --> 00:06:14,400
introduce here is the android activity

154
00:06:14,400 --> 00:06:16,080
lifecycle

155
00:06:16,080 --> 00:06:18,080
which is basically a state machine model

156
00:06:18,080 --> 00:06:19,600
for android activities

157
00:06:19,600 --> 00:06:21,840
active activity in android just means

158
00:06:21,840 --> 00:06:24,160
the windows or page page

159
00:06:24,160 --> 00:06:27,600
in android ui in either interface

160
00:06:27,600 --> 00:06:30,720
and in this below diagram

161
00:06:30,720 --> 00:06:33,919
it's a simplified illustration of the of

162
00:06:33,919 --> 00:06:35,520
the activity lifecycle model

163
00:06:35,520 --> 00:06:37,600
you can see when some activity is

164
00:06:37,600 --> 00:06:39,759
created it will first go into

165
00:06:39,759 --> 00:06:42,880
some create state and then it will go to

166
00:06:42,880 --> 00:06:44,800
the start state and finally stays in the

167
00:06:44,800 --> 00:06:46,840
resume state when it is running

168
00:06:46,840 --> 00:06:49,759
then after some time when it is

169
00:06:49,759 --> 00:06:50,479
switching

170
00:06:50,479 --> 00:06:52,720
it will switch to the background or some

171
00:06:52,720 --> 00:06:54,000
other app is

172
00:06:54,000 --> 00:06:56,160
bring brought to the foreground covering

173
00:06:56,160 --> 00:06:58,720
it then it will go into the pulse state

174
00:06:58,720 --> 00:07:01,120
and if it is invisible it will finally

175
00:07:01,120 --> 00:07:02,000
go into the

176
00:07:02,000 --> 00:07:05,759
stop state now you have

177
00:07:05,759 --> 00:07:08,479
we have the basic idea of how the

178
00:07:08,479 --> 00:07:09,919
activity life cycle works

179
00:07:09,919 --> 00:07:13,039
then let's look at uh what's the

180
00:07:13,039 --> 00:07:13,919
activity like

181
00:07:13,919 --> 00:07:16,800
life cycle behavior when some normal

182
00:07:16,800 --> 00:07:18,160
apps do the fingerprint

183
00:07:18,160 --> 00:07:21,520
authorization here we are here we have

184
00:07:21,520 --> 00:07:23,360
we have some normal apps and when it

185
00:07:23,360 --> 00:07:25,039
tries to do the fingerprint

186
00:07:25,039 --> 00:07:28,080
authorization or or authentication it

187
00:07:28,080 --> 00:07:28,880
will

188
00:07:28,880 --> 00:07:31,919
start or launch a new activity which

189
00:07:31,919 --> 00:07:34,240
is contains the fingerprint

190
00:07:34,240 --> 00:07:37,199
authorization functionality

191
00:07:37,199 --> 00:07:39,199
and then this new activity fingerprint

192
00:07:39,199 --> 00:07:40,720
activity will go through the create

193
00:07:40,720 --> 00:07:41,919
state create

194
00:07:41,919 --> 00:07:45,280
start and stays in the resume state and

195
00:07:45,280 --> 00:07:48,319
later when the switch to the background

196
00:07:48,319 --> 00:07:51,120
or some other apps goes into the

197
00:07:51,120 --> 00:07:52,560
foreground

198
00:07:52,560 --> 00:07:56,560
then it will go into the pulse state

199
00:07:56,560 --> 00:07:59,840
and then if it is invisible it will go

200
00:07:59,840 --> 00:08:03,599
into the stop state well

201
00:08:03,599 --> 00:08:06,080
right now the very important question

202
00:08:06,080 --> 00:08:07,759
for attackers is that

203
00:08:07,759 --> 00:08:11,280
whether the fingerprint activity can

204
00:08:11,280 --> 00:08:12,000
continue

205
00:08:12,000 --> 00:08:14,400
listening to fingerprint inputs when it

206
00:08:14,400 --> 00:08:17,758
is in the foreground

207
00:08:19,759 --> 00:08:23,599
and this brings up our

208
00:08:23,599 --> 00:08:25,840
initial idea for the fingerprint jacking

209
00:08:25,840 --> 00:08:27,039
attack the

210
00:08:27,039 --> 00:08:29,840
basic idea is like this we have first of

211
00:08:29,840 --> 00:08:30,080
all

212
00:08:30,080 --> 00:08:32,159
we assume that we already have some

213
00:08:32,159 --> 00:08:33,679
malicious app

214
00:08:33,679 --> 00:08:35,599
installed on victim device and this

215
00:08:35,599 --> 00:08:37,039
malicious app actually can

216
00:08:37,039 --> 00:08:39,519
disguise itself as some normal benign

217
00:08:39,519 --> 00:08:40,559
app

218
00:08:40,559 --> 00:08:43,519
then after some attack setup finally

219
00:08:43,519 --> 00:08:44,399
what

220
00:08:44,399 --> 00:08:47,920
the malicious app can do is that he can

221
00:08:47,920 --> 00:08:50,240
launch

222
00:08:50,240 --> 00:08:52,240
the fingerprint activity in the target

223
00:08:52,240 --> 00:08:53,279
app

224
00:08:53,279 --> 00:08:55,760
and meanwhile he can use some coloring

225
00:08:55,760 --> 00:08:57,600
activity to cover the fingerprint

226
00:08:57,600 --> 00:08:59,360
activity

227
00:08:59,360 --> 00:09:03,200
and he can make some visual contents

228
00:09:03,200 --> 00:09:05,440
to lure the victim to input his

229
00:09:05,440 --> 00:09:06,480
fingerprints and

230
00:09:06,480 --> 00:09:09,760
actually the fingerprint is goes into

231
00:09:09,760 --> 00:09:10,080
the

232
00:09:10,080 --> 00:09:13,040
background target app so now the

233
00:09:13,040 --> 00:09:15,040
question is what kind of

234
00:09:15,040 --> 00:09:18,240
attack setup can allow this uh

235
00:09:18,240 --> 00:09:21,519
hosing happen to to

236
00:09:21,519 --> 00:09:23,519
to introduce that we actually need to

237
00:09:23,519 --> 00:09:24,720
consider different

238
00:09:24,720 --> 00:09:27,040
apps implementation pattern and

239
00:09:27,040 --> 00:09:30,640
different android os versions

240
00:09:32,399 --> 00:09:36,640
here this uh complex style diagram

241
00:09:36,640 --> 00:09:40,080
oh summarize uh

242
00:09:40,080 --> 00:09:42,160
all the fingerprint jacking attack

243
00:09:42,160 --> 00:09:43,200
techniques we know

244
00:09:43,200 --> 00:09:46,240
including some previously uh

245
00:09:46,240 --> 00:09:48,720
introduced pre some known attacks as

246
00:09:48,720 --> 00:09:49,279
well as

247
00:09:49,279 --> 00:09:52,160
some new attacks we represent in this

248
00:09:52,160 --> 00:09:53,600
talk

249
00:09:53,600 --> 00:09:57,040
and to tell you the truth uh

250
00:09:57,040 --> 00:09:59,440
we didn't do this research from the

251
00:09:59,440 --> 00:10:01,440
beginning to do such a thorough study on

252
00:10:01,440 --> 00:10:02,399
this

253
00:10:02,399 --> 00:10:05,519
at first i was uh trying to do the bug

254
00:10:05,519 --> 00:10:06,959
hunting in some particular

255
00:10:06,959 --> 00:10:10,320
mobile wallet app and then i find one

256
00:10:10,320 --> 00:10:12,320
one technique to make this fingerprint

257
00:10:12,320 --> 00:10:13,760
checking happen

258
00:10:13,760 --> 00:10:17,040
and then further we we do more study and

259
00:10:17,040 --> 00:10:20,160
grow into this complex diagram

260
00:10:20,160 --> 00:10:22,240
and you can see on the right hand side

261
00:10:22,240 --> 00:10:24,000
there are actually five attack

262
00:10:24,000 --> 00:10:24,640
techniques

263
00:10:24,640 --> 00:10:27,600
translucent attack wake up bypass

264
00:10:27,600 --> 00:10:29,839
including the wrist attack

265
00:10:29,839 --> 00:10:32,560
those in the red boxes are our new

266
00:10:32,560 --> 00:10:33,760
attacks

267
00:10:33,760 --> 00:10:36,720
and the attacks for the tech techniques

268
00:10:36,720 --> 00:10:37,279
can be

269
00:10:37,279 --> 00:10:39,360
categorized in three categories the

270
00:10:39,360 --> 00:10:40,480
first one

271
00:10:40,480 --> 00:10:43,040
they exploit some unusual features or

272
00:10:43,040 --> 00:10:44,399
some special permissions

273
00:10:44,399 --> 00:10:47,680
in android apps and the second one they

274
00:10:47,680 --> 00:10:50,640
exploit apps implementation flaws and

275
00:10:50,640 --> 00:10:52,240
there are also some attacks that

276
00:10:52,240 --> 00:10:54,480
exploit the bot in the android system

277
00:10:54,480 --> 00:10:56,880
itself

278
00:10:57,200 --> 00:10:59,440
first of all let's review some existing

279
00:10:59,440 --> 00:11:00,240
techniques

280
00:11:00,240 --> 00:11:03,440
the earliest similar attacks

281
00:11:03,440 --> 00:11:06,959
i can find online is also a presentation

282
00:11:06,959 --> 00:11:11,440
in blackhead euro blackhead usa 2015

283
00:11:11,440 --> 00:11:13,600
because at that time android didn't even

284
00:11:13,600 --> 00:11:14,480
provide

285
00:11:14,480 --> 00:11:17,680
an official api for fingerprints

286
00:11:17,680 --> 00:11:21,279
the the speakers the their introduced

287
00:11:21,279 --> 00:11:22,000
attack are

288
00:11:22,000 --> 00:11:25,040
targeting some old samsung device and

289
00:11:25,040 --> 00:11:26,240
then more recently

290
00:11:26,240 --> 00:11:30,160
in 2018 in some academic paper titled

291
00:11:30,160 --> 00:11:33,839
broken fingers the authors proposed

292
00:11:33,839 --> 00:11:37,279
to use the draw or draw over other apps

293
00:11:37,279 --> 00:11:38,880
permission which is a quite dangerous

294
00:11:38,880 --> 00:11:40,640
permission to to perform

295
00:11:40,640 --> 00:11:43,360
the ui confusion attack for fingerprint

296
00:11:43,360 --> 00:11:44,640
authorization

297
00:11:44,640 --> 00:11:47,120
at this permission you may have already

298
00:11:47,120 --> 00:11:48,320
know that

299
00:11:48,320 --> 00:11:51,839
but are widely used by those for example

300
00:11:51,839 --> 00:11:53,200
some video

301
00:11:53,200 --> 00:11:54,639
video call when you do some video

302
00:11:54,639 --> 00:11:56,320
calling some app you can see

303
00:11:56,320 --> 00:11:59,519
this smaller windows floating around and

304
00:11:59,519 --> 00:12:00,880
always display above

305
00:12:00,880 --> 00:12:04,399
other apps and in the same

306
00:12:04,399 --> 00:12:08,160
paper they also propose to to

307
00:12:08,160 --> 00:12:10,639
the malicious app can actually control

308
00:12:10,639 --> 00:12:12,480
the brightness of your screen

309
00:12:12,480 --> 00:12:14,959
and they can they can adjust the

310
00:12:14,959 --> 00:12:15,760
brightness to

311
00:12:15,760 --> 00:12:18,399
to to be very dark then the user may the

312
00:12:18,399 --> 00:12:19,680
victim is saying that

313
00:12:19,680 --> 00:12:21,519
he needs to unlock the device and he

314
00:12:21,519 --> 00:12:23,279
will put his fingerprint

315
00:12:23,279 --> 00:12:26,399
on the sensor which makes the attack

316
00:12:26,399 --> 00:12:29,680
happen and

317
00:12:29,680 --> 00:12:32,480
what do we want for our fingerprint

318
00:12:32,480 --> 00:12:34,720
jacking attack is that first of all

319
00:12:34,720 --> 00:12:38,240
we want our malicious app to require no

320
00:12:38,240 --> 00:12:40,320
permissions meaning that the victim

321
00:12:40,320 --> 00:12:41,519
doesn't need to

322
00:12:41,519 --> 00:12:43,920
grant any permission either at

323
00:12:43,920 --> 00:12:45,600
installation or during the app is

324
00:12:45,600 --> 00:12:47,360
running

325
00:12:47,360 --> 00:12:50,320
and also we want our attack to work on

326
00:12:50,320 --> 00:12:53,279
even the latest android versions

327
00:12:53,279 --> 00:12:56,320
so first of all let's look at what a

328
00:12:56,320 --> 00:12:56,959
developer

329
00:12:56,959 --> 00:12:59,920
what developers can use if they want to

330
00:12:59,920 --> 00:13:00,800
implement

331
00:13:00,800 --> 00:13:03,200
fingerprint functionality in android

332
00:13:03,200 --> 00:13:04,320
they have two choices

333
00:13:04,320 --> 00:13:07,279
the first one is fingerprint manager api

334
00:13:07,279 --> 00:13:08,639
which is introduced in

335
00:13:08,639 --> 00:13:12,480
android 6. this api only provides the

336
00:13:12,480 --> 00:13:14,560
function to call the fingerprint sensor

337
00:13:14,560 --> 00:13:16,639
but they don't provide the ui

338
00:13:16,639 --> 00:13:20,320
user interface and then uh later

339
00:13:20,320 --> 00:13:22,079
starting from android 9 they also

340
00:13:22,079 --> 00:13:24,720
introduced it by metric from api which

341
00:13:24,720 --> 00:13:26,800
is a new api for fingerprint

342
00:13:26,800 --> 00:13:29,200
and it has a unified ui and it's more

343
00:13:29,200 --> 00:13:30,160
secure however

344
00:13:30,160 --> 00:13:33,120
it is not backward compatible actually

345
00:13:33,120 --> 00:13:34,320
nowadays in the market you

346
00:13:34,320 --> 00:13:36,880
you can we still see a lot of apps are

347
00:13:36,880 --> 00:13:38,240
still using the old

348
00:13:38,240 --> 00:13:41,519
uh fingerprint manager api and this is

349
00:13:41,519 --> 00:13:42,320
our

350
00:13:42,320 --> 00:13:45,360
target for in this presentation

351
00:13:45,360 --> 00:13:47,440
and let's go back to our original

352
00:13:47,440 --> 00:13:49,040
question can apps listen to the

353
00:13:49,040 --> 00:13:51,360
fingerprint inputs in the background

354
00:13:51,360 --> 00:13:54,320
the answer is that it it depends on

355
00:13:54,320 --> 00:13:54,880
which

356
00:13:54,880 --> 00:13:57,600
android system you're using if the

357
00:13:57,600 --> 00:13:58,079
victim

358
00:13:58,079 --> 00:14:01,680
runs the android a or android 7

359
00:14:01,680 --> 00:14:04,399
basically before android 9 then yes the

360
00:14:04,399 --> 00:14:05,360
app can

361
00:14:05,360 --> 00:14:07,120
listen to fingerprint inputs in the

362
00:14:07,120 --> 00:14:09,120
background however starting from

363
00:14:09,120 --> 00:14:11,920
android 9 they added some mitigation

364
00:14:11,920 --> 00:14:14,079
into the fingerprint manager api

365
00:14:14,079 --> 00:14:15,839
to block the background fingerprint

366
00:14:15,839 --> 00:14:18,399
inputs you can also see that

367
00:14:18,399 --> 00:14:20,880
we you may notice that we put a question

368
00:14:20,880 --> 00:14:22,720
mark here so

369
00:14:22,720 --> 00:14:24,880
does this mitigation actually works and

370
00:14:24,880 --> 00:14:28,639
how can we find any bypass to it

371
00:14:28,639 --> 00:14:32,000
before we talk about those uh first

372
00:14:32,000 --> 00:14:34,560
we will talk we will introduce the case

373
00:14:34,560 --> 00:14:35,360
when

374
00:14:35,360 --> 00:14:37,519
the victim is running older android

375
00:14:37,519 --> 00:14:40,959
versions for example android 8

376
00:14:40,959 --> 00:14:43,680
because before android 9 there's no

377
00:14:43,680 --> 00:14:45,040
system level protection

378
00:14:45,040 --> 00:14:47,199
so the apps need to block the background

379
00:14:47,199 --> 00:14:49,760
fingerprint input by themselves

380
00:14:49,760 --> 00:14:53,120
and we observe that there are two common

381
00:14:53,120 --> 00:14:54,720
implementation patterns for

382
00:14:54,720 --> 00:14:57,120
apps using fingerprint the first one

383
00:14:57,120 --> 00:14:58,639
that is that they will

384
00:14:58,639 --> 00:15:00,720
the apps will cancel the fingerprint

385
00:15:00,720 --> 00:15:02,480
listening

386
00:15:02,480 --> 00:15:05,360
inside the impulse event of the activity

387
00:15:05,360 --> 00:15:06,720
and the second

388
00:15:06,720 --> 00:15:09,279
one is that they will cancel it in the

389
00:15:09,279 --> 00:15:10,160
stop

390
00:15:10,160 --> 00:15:12,560
event so which one is correct the answer

391
00:15:12,560 --> 00:15:13,839
is they need to

392
00:15:13,839 --> 00:15:18,399
cancel it in on pulse even why

393
00:15:18,399 --> 00:15:21,199
so to explain to explain it first we

394
00:15:21,199 --> 00:15:21,680
need to

395
00:15:21,680 --> 00:15:24,880
introduce the some property for android

396
00:15:24,880 --> 00:15:27,839
activity called translucent

397
00:15:27,839 --> 00:15:30,240
and active and translucent activity

398
00:15:30,240 --> 00:15:31,199
running in

399
00:15:31,199 --> 00:15:33,040
the foreground carrying some background

400
00:15:33,040 --> 00:15:35,120
activity then the background activity

401
00:15:35,120 --> 00:15:36,399
will be considered

402
00:15:36,399 --> 00:15:39,519
visible by the system and that means

403
00:15:39,519 --> 00:15:41,600
it will only go into pulse state but not

404
00:15:41,600 --> 00:15:42,880
a stop state

405
00:15:42,880 --> 00:15:46,560
and this uh diagram shows the

406
00:15:46,560 --> 00:15:49,680
difference in activity life cycle on the

407
00:15:49,680 --> 00:15:52,240
left hand side it's a normal case where

408
00:15:52,240 --> 00:15:54,720
the active one the background activity

409
00:15:54,720 --> 00:15:58,560
starts activity 2 which is covering

410
00:15:58,560 --> 00:16:00,880
then because the covering is a normal

411
00:16:00,880 --> 00:16:02,000
activity then

412
00:16:02,000 --> 00:16:05,040
the background activity ftp 1 will go

413
00:16:05,040 --> 00:16:06,959
into the pause state and then go into

414
00:16:06,959 --> 00:16:09,920
stop state as usual on the right hand

415
00:16:09,920 --> 00:16:11,199
side is the case where

416
00:16:11,199 --> 00:16:14,079
the covering has the translucent process

417
00:16:14,079 --> 00:16:15,839
then the background activity one

418
00:16:15,839 --> 00:16:18,320
will only go into the pause state but

419
00:16:18,320 --> 00:16:21,519
not the stop state

420
00:16:21,519 --> 00:16:24,160
so this leads to our first attack called

421
00:16:24,160 --> 00:16:26,240
translucent attack

422
00:16:26,240 --> 00:16:30,240
in this attack uh the malicious app

423
00:16:30,240 --> 00:16:33,680
will first try to launch or try to

424
00:16:33,680 --> 00:16:35,600
invoke the target apps fingerprint

425
00:16:35,600 --> 00:16:36,079
activity

426
00:16:36,079 --> 00:16:39,680
and let the target app listening to

427
00:16:39,680 --> 00:16:42,000
users fingerprint inputs and then at the

428
00:16:42,000 --> 00:16:42,880
meantime

429
00:16:42,880 --> 00:16:46,079
it will also launch a malicious carving

430
00:16:46,079 --> 00:16:47,279
a malicious

431
00:16:47,279 --> 00:16:50,079
which is some prepared activity where

432
00:16:50,079 --> 00:16:52,079
some visual content can alert the victim

433
00:16:52,079 --> 00:16:54,880
to input his fingerprint

434
00:16:54,880 --> 00:16:56,800
now because this covering has

435
00:16:56,800 --> 00:16:58,639
translucent property then the background

436
00:16:58,639 --> 00:17:00,240
fingerprint activity

437
00:17:00,240 --> 00:17:03,279
which only cancel in the stop state

438
00:17:03,279 --> 00:17:05,760
will not trigger the canceling process

439
00:17:05,760 --> 00:17:06,640
so it can

440
00:17:06,640 --> 00:17:09,039
it can continue listening to user

441
00:17:09,039 --> 00:17:10,640
fingerprint

442
00:17:10,640 --> 00:17:12,880
so when user put his fingerprint onto

443
00:17:12,880 --> 00:17:14,079
the sensor he thinks he

444
00:17:14,079 --> 00:17:16,880
he is using uh he's using it to

445
00:17:16,880 --> 00:17:18,799
authorize what he's seen

446
00:17:18,799 --> 00:17:22,160
on the screen however his fingerprint is

447
00:17:22,160 --> 00:17:25,119
utilized by the background activity to

448
00:17:25,119 --> 00:17:26,079
to

449
00:17:26,079 --> 00:17:29,280
to authorize other scenes so a natural

450
00:17:29,280 --> 00:17:31,840
question is how many apps in the market

451
00:17:31,840 --> 00:17:34,080
have this implementation flaw we

452
00:17:34,080 --> 00:17:35,600
actually built this

453
00:17:35,600 --> 00:17:38,000
automatic static analyzer based on flow

454
00:17:38,000 --> 00:17:39,200
droid to

455
00:17:39,200 --> 00:17:42,400
do this valuation we collected more than

456
00:17:42,400 --> 00:17:45,200
2000 sample apps from markets

457
00:17:45,200 --> 00:17:48,160
and then among them our analyzer can

458
00:17:48,160 --> 00:17:48,720
success

459
00:17:48,720 --> 00:17:51,760
successfully handle about 700

460
00:17:51,760 --> 00:17:55,440
apps um and inside just 700 apps

461
00:17:55,440 --> 00:17:57,600
we find that almost half of them contain

462
00:17:57,600 --> 00:17:58,799
implementation flaws

463
00:17:58,799 --> 00:18:01,840
notice that this uh analyze the

464
00:18:01,840 --> 00:18:02,559
rebuilding

465
00:18:02,559 --> 00:18:05,440
only performs conservative analyze this

466
00:18:05,440 --> 00:18:06,640
means the situation

467
00:18:06,640 --> 00:18:10,960
uh true situation can be even worse

468
00:18:10,960 --> 00:18:13,039
okay so this attack we just mentioned

469
00:18:13,039 --> 00:18:14,080
only works on

470
00:18:14,080 --> 00:18:16,320
older android versions so what happened

471
00:18:16,320 --> 00:18:18,480
in android 9

472
00:18:18,480 --> 00:18:20,000
starting from android 9 the add

473
00:18:20,000 --> 00:18:21,520
mitigation to block the background

474
00:18:21,520 --> 00:18:22,640
fingerprint inputs

475
00:18:22,640 --> 00:18:25,600
and we look look into the source code of

476
00:18:25,600 --> 00:18:26,000
the

477
00:18:26,000 --> 00:18:28,720
android project and find that the

478
00:18:28,720 --> 00:18:31,440
mitigation logic is like this

479
00:18:31,440 --> 00:18:34,799
it will it will try it will uh

480
00:18:34,799 --> 00:18:36,640
the mitigation will be triggered

481
00:18:36,640 --> 00:18:38,320
whenever the activity stack

482
00:18:38,320 --> 00:18:40,799
changes so when the activities that

483
00:18:40,799 --> 00:18:42,480
change it means that there are some new

484
00:18:42,480 --> 00:18:43,679
activities uh

485
00:18:43,679 --> 00:18:46,320
appearing it's being created or some

486
00:18:46,320 --> 00:18:47,840
activities being

487
00:18:47,840 --> 00:18:51,600
uh destroyed

488
00:18:51,600 --> 00:18:54,480
then the system will check whether

489
00:18:54,480 --> 00:18:55,280
current

490
00:18:55,280 --> 00:18:57,600
foreground activity belongs to the same

491
00:18:57,600 --> 00:19:00,000
app as that app is using the finger

492
00:19:00,000 --> 00:19:02,240
listening to the fingerprint inputs if

493
00:19:02,240 --> 00:19:03,840
they don't belong

494
00:19:03,840 --> 00:19:05,440
they don't belong to the same app then

495
00:19:05,440 --> 00:19:06,880
the system will queue that

496
00:19:06,880 --> 00:19:08,559
that will keep the fingerprint listener

497
00:19:08,559 --> 00:19:11,200
for you

498
00:19:11,200 --> 00:19:14,400
but can we find the bypass if we want to

499
00:19:14,400 --> 00:19:16,559
when we want to find the bypass for the

500
00:19:16,559 --> 00:19:18,160
mitigation it means that we want to find

501
00:19:18,160 --> 00:19:20,400
a bot in the mitigation

502
00:19:20,400 --> 00:19:23,520
and well we all know that when we want

503
00:19:23,520 --> 00:19:25,440
to find the bar we just

504
00:19:25,440 --> 00:19:28,400
first thing we go to is go to thinking

505
00:19:28,400 --> 00:19:30,080
about those corner cases

506
00:19:30,080 --> 00:19:31,919
so what's the corner case here remember

507
00:19:31,919 --> 00:19:33,200
that the

508
00:19:33,200 --> 00:19:35,360
this mitigation is only triggered when

509
00:19:35,360 --> 00:19:36,480
the activity stack

510
00:19:36,480 --> 00:19:39,679
changes so how about we first put the

511
00:19:39,679 --> 00:19:40,320
activity

512
00:19:40,320 --> 00:19:41,919
fingerprint activity in the background

513
00:19:41,919 --> 00:19:44,720
and then let's the fingerprint

514
00:19:44,720 --> 00:19:46,960
listener start listening then there will

515
00:19:46,960 --> 00:19:48,960
be no stack change after it starts

516
00:19:48,960 --> 00:19:51,200
listening

517
00:19:51,200 --> 00:19:54,640
so also let's recall how this developers

518
00:19:54,640 --> 00:19:56,559
they usually do the implantation

519
00:19:56,559 --> 00:19:59,840
they usually have such kind of as such

520
00:19:59,840 --> 00:20:00,240
uh

521
00:20:00,240 --> 00:20:02,000
fingerprint activity and they will

522
00:20:02,000 --> 00:20:03,679
automatically start the fingerprint

523
00:20:03,679 --> 00:20:05,120
listener

524
00:20:05,120 --> 00:20:09,039
inside on resume events of that activity

525
00:20:09,039 --> 00:20:12,880
so this uh sim this makes the attackers

526
00:20:12,880 --> 00:20:16,000
our bypass id uh

527
00:20:16,000 --> 00:20:18,480
trick easier so what we want to do is

528
00:20:18,480 --> 00:20:19,840
that we want to put the fingerprint

529
00:20:19,840 --> 00:20:21,200
activity in the background

530
00:20:21,200 --> 00:20:25,280
and then just let it resume

531
00:20:25,280 --> 00:20:28,320
and this is our first idea for the

532
00:20:28,320 --> 00:20:29,039
bypass

533
00:20:29,039 --> 00:20:32,159
it caused a wake up bypass basically the

534
00:20:32,159 --> 00:20:33,120
malicious step

535
00:20:33,120 --> 00:20:35,440
as before it will first launch the

536
00:20:35,440 --> 00:20:36,880
fingerprint activity then

537
00:20:36,880 --> 00:20:40,159
launch the carrying activity but because

538
00:20:40,159 --> 00:20:41,360
the mitigation

539
00:20:41,360 --> 00:20:43,520
when it when it launched launches the

540
00:20:43,520 --> 00:20:44,720
current activity

541
00:20:44,720 --> 00:20:46,840
the background fingerprint activity will

542
00:20:46,840 --> 00:20:49,679
be cancelled by os

543
00:20:49,679 --> 00:20:51,840
then it will just wait the victim to

544
00:20:51,840 --> 00:20:52,799
lock the screen

545
00:20:52,799 --> 00:20:55,760
and later unlock the screen what happens

546
00:20:55,760 --> 00:20:56,799
when the victim

547
00:20:56,799 --> 00:20:59,360
when the device is unlocked is that all

548
00:20:59,360 --> 00:21:01,600
those visible activities will

549
00:21:01,600 --> 00:21:05,039
be resumed that which which which cause

550
00:21:05,039 --> 00:21:06,880
that which cause the background finger

551
00:21:06,880 --> 00:21:08,799
print activity starts doing the

552
00:21:08,799 --> 00:21:11,200
fingerprint listening

553
00:21:11,200 --> 00:21:14,320
all of this is done without and causing

554
00:21:14,320 --> 00:21:16,240
any change to the activity stack

555
00:21:16,240 --> 00:21:18,480
so the mitigation is never triggered

556
00:21:18,480 --> 00:21:20,000
here

557
00:21:20,000 --> 00:21:22,480
and a more practical more practical way

558
00:21:22,480 --> 00:21:23,919
to launch this attack is

559
00:21:23,919 --> 00:21:27,120
the malicious app can monitoring to

560
00:21:27,120 --> 00:21:30,320
the action of the screen screen of

561
00:21:30,320 --> 00:21:33,120
broadcast which allows it to know when

562
00:21:33,120 --> 00:21:33,520
when

563
00:21:33,520 --> 00:21:36,640
before that the user tries to lock the

564
00:21:36,640 --> 00:21:38,320
screen and then

565
00:21:38,320 --> 00:21:41,039
right before that the malicious app can

566
00:21:41,039 --> 00:21:43,679
set up the attack

567
00:21:43,679 --> 00:21:45,520
and this is the second bypass which is

568
00:21:45,520 --> 00:21:46,880
more more interesting

569
00:21:46,880 --> 00:21:50,240
and but it works like this before

570
00:21:50,240 --> 00:21:52,960
because uh starting from android 7

571
00:21:52,960 --> 00:21:53,600
androids

572
00:21:53,600 --> 00:21:56,000
uh support a new feature called uh split

573
00:21:56,000 --> 00:21:58,159
screen basically the user can use

574
00:21:58,159 --> 00:21:59,919
multiple string at the same time

575
00:21:59,919 --> 00:22:03,120
however the activity life cycle is not

576
00:22:03,120 --> 00:22:05,600
changed meaning that there will only be

577
00:22:05,600 --> 00:22:07,600
one activity can be in the resume state

578
00:22:07,600 --> 00:22:08,720
at the same time

579
00:22:08,720 --> 00:22:12,000
and we also notice that when the user

580
00:22:12,000 --> 00:22:13,919
try to resize a split screen it will

581
00:22:13,919 --> 00:22:15,840
result in updates of the

582
00:22:15,840 --> 00:22:18,880
activity lifecycle and here

583
00:22:18,880 --> 00:22:22,000
the diagram shows how this attack will

584
00:22:22,000 --> 00:22:22,640
work

585
00:22:22,640 --> 00:22:25,360
first as usual we have the malicious app

586
00:22:25,360 --> 00:22:26,880
running in one of the split screen

587
00:22:26,880 --> 00:22:27,840
window

588
00:22:27,840 --> 00:22:31,600
then this app can put the can

589
00:22:31,600 --> 00:22:33,039
put the fingerprint activity and the

590
00:22:33,039 --> 00:22:35,280
carving into the adjacent

591
00:22:35,280 --> 00:22:39,200
window by setting some flags and then

592
00:22:39,200 --> 00:22:41,120
but because the victims see that there's

593
00:22:41,120 --> 00:22:42,400
not something happening in

594
00:22:42,400 --> 00:22:45,679
a smaller window and he may want to

595
00:22:45,679 --> 00:22:47,600
enlarge to see what hap enlarge it to

596
00:22:47,600 --> 00:22:48,559
see what happened

597
00:22:48,559 --> 00:22:50,240
and at the same time when he do the

598
00:22:50,240 --> 00:22:51,679
resize

599
00:22:51,679 --> 00:22:54,799
then the activities in that window will

600
00:22:54,799 --> 00:22:57,120
become active again which result in the

601
00:22:57,120 --> 00:22:58,480
resumes they

602
00:22:58,480 --> 00:23:00,799
resume even being triggered and that

603
00:23:00,799 --> 00:23:01,520
means

604
00:23:01,520 --> 00:23:03,440
the activity the fingerprint listener

605
00:23:03,440 --> 00:23:04,880
will start listening

606
00:23:04,880 --> 00:23:07,840
however the stack has never been changed

607
00:23:07,840 --> 00:23:09,039
here

608
00:23:09,039 --> 00:23:13,039
so this can again bypass the mitigation

609
00:23:13,039 --> 00:23:16,080
and the third one third bypass is uh

610
00:23:16,080 --> 00:23:20,000
some some case we find uh we found

611
00:23:20,000 --> 00:23:22,799
accidentally basically when we are doing

612
00:23:22,799 --> 00:23:23,760
testing

613
00:23:23,760 --> 00:23:28,400
testing this attack on some uh oem raw

614
00:23:28,400 --> 00:23:31,360
based on android knight we find that uh

615
00:23:31,360 --> 00:23:32,159
we can

616
00:23:32,159 --> 00:23:34,720
we can first we instead of launch

617
00:23:34,720 --> 00:23:36,000
directly launching the car

618
00:23:36,000 --> 00:23:39,440
we can first launch some activity in

619
00:23:39,440 --> 00:23:42,799
some arbitrary app however this activity

620
00:23:42,799 --> 00:23:46,320
will crash we may we make it so it will

621
00:23:46,320 --> 00:23:46,799
crash

622
00:23:46,799 --> 00:23:50,000
after it immediately after it launched

623
00:23:50,000 --> 00:23:53,360
so after the that activity crashed

624
00:23:53,360 --> 00:23:55,279
then the malicious activity at any time

625
00:23:55,279 --> 00:23:57,120
he can it can just

626
00:23:57,120 --> 00:24:00,960
again launch the car ring now this time

627
00:24:00,960 --> 00:24:04,000
although there are stack changes however

628
00:24:04,000 --> 00:24:07,120
the mitigation is not triggered

629
00:24:07,120 --> 00:24:10,480
and uh because this oem is closed source

630
00:24:10,480 --> 00:24:13,679
and we didn't investigate further to

631
00:24:13,679 --> 00:24:18,320
understand the exact reason behind it

632
00:24:18,320 --> 00:24:21,760
and okay finally it comes to the most

633
00:24:21,760 --> 00:24:25,039
powerful attack in this presentation

634
00:24:25,039 --> 00:24:28,240
it's called the wrist attack which

635
00:24:28,240 --> 00:24:30,640
exploits some risk condition bug in

636
00:24:30,640 --> 00:24:32,000
android system

637
00:24:32,000 --> 00:24:35,120
and we find that if we

638
00:24:35,120 --> 00:24:37,039
launch two activities within a very

639
00:24:37,039 --> 00:24:39,120
short period of time

640
00:24:39,120 --> 00:24:41,279
it may cause some risk condition in the

641
00:24:41,279 --> 00:24:43,840
android activity life cycle

642
00:24:43,840 --> 00:24:46,799
and on the right hand side you can see

643
00:24:46,799 --> 00:24:48,400
it is a

644
00:24:48,400 --> 00:24:50,960
three slot even three slot of android

645
00:24:50,960 --> 00:24:52,559
activity

646
00:24:52,559 --> 00:24:55,679
and the upper part choose choose the

647
00:24:55,679 --> 00:24:57,039
case when we

648
00:24:57,039 --> 00:24:58,880
normally launch a victim activity and

649
00:24:58,880 --> 00:25:01,039
then use the malicious carving to cover

650
00:25:01,039 --> 00:25:02,080
it

651
00:25:02,080 --> 00:25:04,880
then as expected we can see the on the

652
00:25:04,880 --> 00:25:05,520
background

653
00:25:05,520 --> 00:25:08,320
victim activity goes into the pulse

654
00:25:08,320 --> 00:25:10,159
state

655
00:25:10,159 --> 00:25:13,520
and in the below part that is what

656
00:25:13,520 --> 00:25:14,000
happened

657
00:25:14,000 --> 00:25:15,360
when the risk condition block is

658
00:25:15,360 --> 00:25:17,039
triggered we can see the background

659
00:25:17,039 --> 00:25:18,159
victim activity

660
00:25:18,159 --> 00:25:21,200
only goes into the resume state

661
00:25:21,200 --> 00:25:24,480
so this renders the

662
00:25:24,480 --> 00:25:28,000
the the cancellation in on pulse become

663
00:25:28,000 --> 00:25:29,039
useless meaning that

664
00:25:29,039 --> 00:25:30,559
even apps have the correct

665
00:25:30,559 --> 00:25:32,559
implementation they are still vulnerable

666
00:25:32,559 --> 00:25:34,640
to our fingerprint jacking attack

667
00:25:34,640 --> 00:25:36,880
and also because this spark breaks the

668
00:25:36,880 --> 00:25:38,559
android activity life cycle

669
00:25:38,559 --> 00:25:43,279
it also breaks android nice mitigation

670
00:25:43,279 --> 00:25:45,520
and

671
00:25:46,480 --> 00:25:49,600
actually we reported this issue to

672
00:25:49,600 --> 00:25:51,440
google about

673
00:25:51,440 --> 00:25:54,159
half a year ago and we provided proof of

674
00:25:54,159 --> 00:25:56,559
concept video and also source code

675
00:25:56,559 --> 00:25:58,880
later on they requested us to test this

676
00:25:58,880 --> 00:26:01,440
on the latest android so we

677
00:26:01,440 --> 00:26:04,720
installed android 11 and yeah proved it

678
00:26:04,720 --> 00:26:07,279
find out it also worked on even android

679
00:26:07,279 --> 00:26:09,039
11.

680
00:26:09,039 --> 00:26:11,360
recently we are informed that uh they

681
00:26:11,360 --> 00:26:14,000
will assign a cv id to the spa and

682
00:26:14,000 --> 00:26:17,039
also they plan to release the patch in

683
00:26:17,039 --> 00:26:20,480
january so before they uh

684
00:26:20,480 --> 00:26:23,120
after the patch they release the patch

685
00:26:23,120 --> 00:26:24,400
we may

686
00:26:24,400 --> 00:26:26,799
we may be able to disclose more details

687
00:26:26,799 --> 00:26:27,679
like

688
00:26:27,679 --> 00:26:30,400
uh actually we find several ways to

689
00:26:30,400 --> 00:26:33,200
trigger this risk condition bar and also

690
00:26:33,200 --> 00:26:35,279
this spot actually breaks the activity

691
00:26:35,279 --> 00:26:37,520
life cycle so it may also

692
00:26:37,520 --> 00:26:39,919
break other things apart from just the

693
00:26:39,919 --> 00:26:42,400
fingerprint

694
00:26:42,400 --> 00:26:46,000
hijacking attacks represented here

695
00:26:46,720 --> 00:26:50,240
and okay this is basically our

696
00:26:50,240 --> 00:26:53,440
new attack techniques and

697
00:26:53,440 --> 00:26:55,440
to this point you may think that oh it

698
00:26:55,440 --> 00:26:56,960
is not cool because

699
00:26:56,960 --> 00:26:59,360
you assume that some malicious app is

700
00:26:59,360 --> 00:27:01,039
installed

701
00:27:01,039 --> 00:27:04,559
in the victim's device well

702
00:27:04,559 --> 00:27:08,000
because i'm a web security guy so i also

703
00:27:08,000 --> 00:27:11,279
i don't like such a strong assumption so

704
00:27:11,279 --> 00:27:12,159
i try to

705
00:27:12,159 --> 00:27:14,640
make this attack work in web browsers

706
00:27:14,640 --> 00:27:17,200
and finally i find that it is possible

707
00:27:17,200 --> 00:27:20,480
but just with more conditions so

708
00:27:20,480 --> 00:27:22,880
the condition can be summarized as two

709
00:27:22,880 --> 00:27:25,039
points first one you need to find some

710
00:27:25,039 --> 00:27:27,600
current gadget which i will explain

711
00:27:27,600 --> 00:27:30,960
in the next slide and the second is that

712
00:27:30,960 --> 00:27:33,679
the target app fingerprint authorization

713
00:27:33,679 --> 00:27:34,799
needs to be able to

714
00:27:34,799 --> 00:27:37,360
invoked from the browser this can happen

715
00:27:37,360 --> 00:27:38,880
for example in some

716
00:27:38,880 --> 00:27:41,279
because some of the mobile payment apps

717
00:27:41,279 --> 00:27:42,960
they want to support the user

718
00:27:42,960 --> 00:27:46,640
to do the payment from the web browsers

719
00:27:46,640 --> 00:27:49,120
and okay so what is the current gadget

720
00:27:49,120 --> 00:27:50,320
carbon gadgets

721
00:27:50,320 --> 00:27:54,720
are those activities in the benign apps

722
00:27:54,720 --> 00:27:56,799
that first of all it allows the location

723
00:27:56,799 --> 00:27:58,159
from browser of course

724
00:27:58,159 --> 00:28:01,039
and second it allows the attacker to

725
00:28:01,039 --> 00:28:02,000
control

726
00:28:02,000 --> 00:28:05,279
to control its visual content and the

727
00:28:05,279 --> 00:28:07,279
third one is that it has to have

728
00:28:07,279 --> 00:28:10,320
the translucent property

729
00:28:10,320 --> 00:28:13,360
so the carbon gadgets usually come

730
00:28:13,360 --> 00:28:16,880
in the form of the blinks one

731
00:28:16,880 --> 00:28:19,919
common cases i i've seen are

732
00:28:19,919 --> 00:28:23,039
in those uh bug bounty program i think

733
00:28:23,039 --> 00:28:25,760
people can find some openly direct in

734
00:28:25,760 --> 00:28:26,559
webview

735
00:28:26,559 --> 00:28:29,200
in some popular apps so in this case

736
00:28:29,200 --> 00:28:29,600
that

737
00:28:29,600 --> 00:28:31,919
this case actually uh already met the

738
00:28:31,919 --> 00:28:33,520
first two conditions

739
00:28:33,520 --> 00:28:35,760
however the more difficult one is also

740
00:28:35,760 --> 00:28:37,039
the this uh

741
00:28:37,039 --> 00:28:39,200
webview activity needs to have the

742
00:28:39,200 --> 00:28:40,799
translucent property

743
00:28:40,799 --> 00:28:43,440
so i know it is not easy to find such

744
00:28:43,440 --> 00:28:44,799
kind of carving gadgets

745
00:28:44,799 --> 00:28:48,000
and for me i i didn't spend much time on

746
00:28:48,000 --> 00:28:49,120
this one

747
00:28:49,120 --> 00:28:52,399
currently so i only be able to find one

748
00:28:52,399 --> 00:28:56,240
of such casings some rather popular app

749
00:28:56,240 --> 00:28:59,279
with partial content control

750
00:28:59,279 --> 00:29:02,399
suppose that uh you already have uh

751
00:29:02,399 --> 00:29:05,679
find some carbon gadget and then

752
00:29:05,679 --> 00:29:09,360
what you want to do is that in your

753
00:29:09,360 --> 00:29:11,760
malicious web page or your attack web

754
00:29:11,760 --> 00:29:13,120
page

755
00:29:13,120 --> 00:29:16,000
you you want to first use deep link to

756
00:29:16,000 --> 00:29:19,679
launch the target fingerprint activity

757
00:29:19,679 --> 00:29:22,880
and then at the same time you will use

758
00:29:22,880 --> 00:29:26,320
script to launch the carving gadget

759
00:29:26,320 --> 00:29:29,279
mainly those carving activities inside

760
00:29:29,279 --> 00:29:30,880
existing

761
00:29:30,880 --> 00:29:33,360
apps you can see that here we prepared

762
00:29:33,360 --> 00:29:34,640
several

763
00:29:34,640 --> 00:29:36,640
several current gadgets in the same

764
00:29:36,640 --> 00:29:38,640
attack that's that because from

765
00:29:38,640 --> 00:29:40,960
only from the web browser the attacker

766
00:29:40,960 --> 00:29:41,840
cannot know

767
00:29:41,840 --> 00:29:44,240
which app is installed on the victim

768
00:29:44,240 --> 00:29:45,279
device

769
00:29:45,279 --> 00:29:47,360
so the better strategy here is that he

770
00:29:47,360 --> 00:29:50,159
would try and try all of them

771
00:29:50,159 --> 00:29:52,159
once one of them is installed then the

772
00:29:52,159 --> 00:29:55,440
tech can work

773
00:29:55,440 --> 00:29:59,440
and this table this table here

774
00:30:00,000 --> 00:30:04,640
this table here summarize all of our

775
00:30:04,640 --> 00:30:07,279
attack techniques as well as those known

776
00:30:07,279 --> 00:30:08,480
attacks

777
00:30:08,480 --> 00:30:11,200
and the green cells in the table means

778
00:30:11,200 --> 00:30:11,840
that

779
00:30:11,840 --> 00:30:14,559
it is easier or more practical to launch

780
00:30:14,559 --> 00:30:15,360
that attack

781
00:30:15,360 --> 00:30:17,360
so you can see that the most powerful

782
00:30:17,360 --> 00:30:19,200
attack for sure is

783
00:30:19,200 --> 00:30:22,720
risk attack that is exploiting

784
00:30:22,720 --> 00:30:27,039
the android uh risk condition bug

785
00:30:27,039 --> 00:30:29,360
another difference you may notice of our

786
00:30:29,360 --> 00:30:31,279
new text

787
00:30:31,279 --> 00:30:33,679
from those known attacks is that our new

788
00:30:33,679 --> 00:30:34,960
attacks

789
00:30:34,960 --> 00:30:37,600
doesn't require any permission so it can

790
00:30:37,600 --> 00:30:40,720
be considered more practical here

791
00:30:40,720 --> 00:30:43,039
finally some suggestions to android

792
00:30:43,039 --> 00:30:44,320
developers first of all

793
00:30:44,320 --> 00:30:47,520
use the android x biometric api

794
00:30:47,520 --> 00:30:50,480
which is a wrapper for the fingerprint

795
00:30:50,480 --> 00:30:52,559
manager and biometric prompt api

796
00:30:52,559 --> 00:30:54,480
and it's it has more secure

797
00:30:54,480 --> 00:30:55,840
implementation

798
00:30:55,840 --> 00:30:58,799
and second i suggest you to use those

799
00:30:58,799 --> 00:30:59,519
third party

800
00:30:59,519 --> 00:31:01,039
live fingerprint libraries more

801
00:31:01,039 --> 00:31:03,039
carefully because we also did some

802
00:31:03,039 --> 00:31:04,799
investigation into those open source

803
00:31:04,799 --> 00:31:06,159
libraries and find

804
00:31:06,159 --> 00:31:09,919
some of them actually viable finally if

805
00:31:09,919 --> 00:31:12,000
you you may want to check your existing

806
00:31:12,000 --> 00:31:13,039
implementations

807
00:31:13,039 --> 00:31:15,039
and if you are using the fingerprint

808
00:31:15,039 --> 00:31:16,240
manager api

809
00:31:16,240 --> 00:31:19,360
you may want to try you may want to make

810
00:31:19,360 --> 00:31:19,760
sure

811
00:31:19,760 --> 00:31:23,200
that you do the canceling in the correct

812
00:31:23,200 --> 00:31:24,000
place

813
00:31:24,000 --> 00:31:27,360
namely on post events

814
00:31:27,360 --> 00:31:29,679
and this is the last part again some

815
00:31:29,679 --> 00:31:30,559
demonstration

816
00:31:30,559 --> 00:31:33,600
and this time we will

817
00:31:33,600 --> 00:31:36,320
we will show the demonstration with the

818
00:31:36,320 --> 00:31:37,200
coverings

819
00:31:37,200 --> 00:31:39,600
being set to be transparent so you can

820
00:31:39,600 --> 00:31:41,760
see what happens in the background

821
00:31:41,760 --> 00:31:43,360
and there will be two demonstrations and

822
00:31:43,360 --> 00:31:44,880
the first one is the same as

823
00:31:44,880 --> 00:31:47,679
our first demonstration just with

824
00:31:47,679 --> 00:31:49,120
transparent occurring

825
00:31:49,120 --> 00:31:51,279
and the second one is more interesting

826
00:31:51,279 --> 00:31:52,640
it is uh

827
00:31:52,640 --> 00:31:54,880
it's it's targeting some payment app and

828
00:31:54,880 --> 00:31:55,919
it's it also

829
00:31:55,919 --> 00:31:57,679
combines the touch jacking attack

830
00:31:57,679 --> 00:31:59,440
techniques here

831
00:31:59,440 --> 00:32:02,960
so this is the first demonstration

832
00:32:04,080 --> 00:32:06,480
first we launch the matrix manager to

833
00:32:06,480 --> 00:32:07,679
check the

834
00:32:07,679 --> 00:32:11,120
super user list as euro

835
00:32:11,120 --> 00:32:14,399
we can see right now there's no

836
00:32:14,399 --> 00:32:17,600
app being granted the root permission

837
00:32:17,600 --> 00:32:19,600
then we launch our demonstration

838
00:32:19,600 --> 00:32:21,760
malicious app

839
00:32:21,760 --> 00:32:25,200
and when the attack happens you can see

840
00:32:25,200 --> 00:32:26,799
underneath the covering there's the

841
00:32:26,799 --> 00:32:30,000
fingerprint dialer requesting user to

842
00:32:30,000 --> 00:32:33,120
input his fingerprint to authorize

843
00:32:33,120 --> 00:32:38,479
the root permission and after user do so

844
00:32:38,640 --> 00:32:41,200
then our malicious app has been granted

845
00:32:41,200 --> 00:32:42,799
the rule permission

846
00:32:42,799 --> 00:32:45,039
but the attacker for sure they don't

847
00:32:45,039 --> 00:32:47,440
need to make the carving translucent

848
00:32:47,440 --> 00:32:51,039
to to and to let the

849
00:32:51,039 --> 00:32:54,320
victim know what happens and the second

850
00:32:54,320 --> 00:32:54,640
one

851
00:32:54,640 --> 00:33:00,640
is the attack targeting the payment app

852
00:33:01,600 --> 00:33:07,360
and we can see when this attack happens

853
00:33:07,360 --> 00:33:09,760
what happens in the background is first

854
00:33:09,760 --> 00:33:11,679
in inside that payment app

855
00:33:11,679 --> 00:33:13,919
it will first ask the user to tap some

856
00:33:13,919 --> 00:33:15,200
button so

857
00:33:15,200 --> 00:33:17,440
this is why we need the touch jacking

858
00:33:17,440 --> 00:33:19,519
here to trick the user into

859
00:33:19,519 --> 00:33:22,640
pushing the button and then after

860
00:33:22,640 --> 00:33:25,679
the user put tap the button then

861
00:33:25,679 --> 00:33:29,840
it's the the fingerprint dialog

862
00:33:29,840 --> 00:33:32,720
need user to authorize to to proceed to

863
00:33:32,720 --> 00:33:34,799
the page to complete the payment

864
00:33:34,799 --> 00:33:37,519
then we use the fingerprint jacking as

865
00:33:37,519 --> 00:33:39,440
before

866
00:33:39,440 --> 00:33:42,080
after the user put his finger onto the

867
00:33:42,080 --> 00:33:44,720
fingerprint sensor

868
00:33:44,720 --> 00:33:46,640
the payment transaction has been

869
00:33:46,640 --> 00:33:48,960
completed and the money has been

870
00:33:48,960 --> 00:33:52,960
transferred to our malicious app

871
00:33:52,960 --> 00:33:56,799
yeah and this is our final demonstration

872
00:33:56,799 --> 00:33:59,440
and thank you for your time and we if

873
00:33:59,440 --> 00:34:00,880
you're interested in this talk you may

874
00:34:00,880 --> 00:34:01,760
also want to check

875
00:34:01,760 --> 00:34:03,679
our white paper which includes more

876
00:34:03,679 --> 00:34:04,880
details

877
00:34:04,880 --> 00:34:08,280
and well any questions are welcome

878
00:34:08,280 --> 00:34:11,280
thanks

