1
00:00:01,180 --> 00:00:16,320
[Music]

2
00:00:16,320 --> 00:00:17,359
hi everyone

3
00:00:17,359 --> 00:00:19,359
my name is timur yunusoff and today i

4
00:00:19,359 --> 00:00:20,800
have my co-speaker

5
00:00:20,800 --> 00:00:23,359
alexis tennikov and our presentation

6
00:00:23,359 --> 00:00:23,920
today

7
00:00:23,920 --> 00:00:26,480
is post world should you be afraid of

8
00:00:26,480 --> 00:00:28,640
hands-on payment devices

9
00:00:28,640 --> 00:00:31,039
and today we are going to talk about two

10
00:00:31,039 --> 00:00:32,800
major point of sale vendors

11
00:00:32,800 --> 00:00:35,120
and vulnerabilities that we found in

12
00:00:35,120 --> 00:00:36,559
their devices

13
00:00:36,559 --> 00:00:38,719
and for us that was quite a journey

14
00:00:38,719 --> 00:00:40,480
absolutely new world

15
00:00:40,480 --> 00:00:43,040
new creatures new habitants with its own

16
00:00:43,040 --> 00:00:44,879
rules and that's why today

17
00:00:44,879 --> 00:00:46,800
we are trying to do this maybe a little

18
00:00:46,800 --> 00:00:48,559
bit childish metaphor

19
00:00:48,559 --> 00:00:51,680
of pokemons and we call this world the

20
00:00:51,680 --> 00:00:55,120
boss world so what the post world

21
00:00:55,120 --> 00:00:56,160
consists of

22
00:00:56,160 --> 00:00:58,480
what the rules are what creatures do

23
00:00:58,480 --> 00:01:00,640
they have and how secure these creatures

24
00:01:00,640 --> 00:01:01,039
are

25
00:01:01,039 --> 00:01:03,600
that's what we are going to answer today

26
00:01:03,600 --> 00:01:05,119
on top of everything we have

27
00:01:05,119 --> 00:01:08,320
pci scc or payment card industry

28
00:01:08,320 --> 00:01:12,640
security standard council and whose main

29
00:01:12,640 --> 00:01:15,040
job is to maintain pci dss

30
00:01:15,040 --> 00:01:17,840
or data security standard so you see

31
00:01:17,840 --> 00:01:18,960
this is kind of the

32
00:01:18,960 --> 00:01:21,759
book of the book of main rules of this

33
00:01:21,759 --> 00:01:22,400
world

34
00:01:22,400 --> 00:01:25,520
in terms of security then we have

35
00:01:25,520 --> 00:01:27,520
mastercard and visa two major current

36
00:01:27,520 --> 00:01:30,720
brands we have verifone and ingenica

37
00:01:30,720 --> 00:01:32,880
major point of sale vendors today we are

38
00:01:32,880 --> 00:01:34,000
going to talk about

39
00:01:34,000 --> 00:01:36,640
only two of them and we have issues and

40
00:01:36,640 --> 00:01:38,799
acquiring banks who are doing payments

41
00:01:38,799 --> 00:01:40,159
responsible for cars

42
00:01:40,159 --> 00:01:43,680
issuing and for receiving payments

43
00:01:43,680 --> 00:01:46,159
then we have merchants essentially shops

44
00:01:46,159 --> 00:01:48,399
and we have customers

45
00:01:48,399 --> 00:01:52,240
and we also have hackers so hackers can

46
00:01:52,240 --> 00:01:55,759
act as rock merchants or customers and

47
00:01:55,759 --> 00:01:57,600
this is basically how we jumped

48
00:01:57,600 --> 00:02:00,479
into this research ourselves you see

49
00:02:00,479 --> 00:02:02,479
over the last four years we

50
00:02:02,479 --> 00:02:04,719
had a few banks and service providers

51
00:02:04,719 --> 00:02:07,200
who were particularly interested in

52
00:02:07,200 --> 00:02:10,479
how much security is in their devices

53
00:02:10,479 --> 00:02:12,239
devices that they use and their

54
00:02:12,239 --> 00:02:14,160
customers use

55
00:02:14,160 --> 00:02:16,480
if you look at the payment process

56
00:02:16,480 --> 00:02:17,840
hackers can act

57
00:02:17,840 --> 00:02:19,760
as external entities against

58
00:02:19,760 --> 00:02:21,120
point-of-sale terminals

59
00:02:21,120 --> 00:02:24,000
if they are customers but if they are

60
00:02:24,000 --> 00:02:25,120
rock merchants

61
00:02:25,120 --> 00:02:27,360
they try to compromise the devices and

62
00:02:27,360 --> 00:02:28,480
they try

63
00:02:28,480 --> 00:02:31,599
can try to insert data

64
00:02:31,599 --> 00:02:35,440
in card stream fraud and commit

65
00:02:35,440 --> 00:02:38,580
fraud on much higher scale you see

66
00:02:38,580 --> 00:02:39,920
[Music]

67
00:02:39,920 --> 00:02:41,920
so if you talk about security

68
00:02:41,920 --> 00:02:43,040
requirements

69
00:02:43,040 --> 00:02:46,080
of pci we have a few documents and each

70
00:02:46,080 --> 00:02:48,080
of these documents have

71
00:02:48,080 --> 00:02:51,840
uh dozens of pages with spreadsheets

72
00:02:51,840 --> 00:02:52,239
with

73
00:02:52,239 --> 00:02:55,760
requirements questionaries we have ptas

74
00:02:55,760 --> 00:02:58,080
pin transaction security document and we

75
00:02:58,080 --> 00:02:59,920
have pin entry device security

76
00:02:59,920 --> 00:03:01,120
requirements

77
00:03:01,120 --> 00:03:03,040
but i will try to save you time and

78
00:03:03,040 --> 00:03:04,800
explain your rules

79
00:03:04,800 --> 00:03:08,400
in a few lines so the main role of pci

80
00:03:08,400 --> 00:03:11,280
do not store send or process sensitive

81
00:03:11,280 --> 00:03:12,080
data

82
00:03:12,080 --> 00:03:14,560
customer card holder or card data

83
00:03:14,560 --> 00:03:16,000
without encryption

84
00:03:16,000 --> 00:03:18,720
so these data include pin codes track to

85
00:03:18,720 --> 00:03:19,519
data

86
00:03:19,519 --> 00:03:22,159
or cv codes from the back side of your

87
00:03:22,159 --> 00:03:23,280
cart

88
00:03:23,280 --> 00:03:26,720
then if device uh if someone is trying

89
00:03:26,720 --> 00:03:27,920
to open the device

90
00:03:27,920 --> 00:03:30,400
these should be detected so device

91
00:03:30,400 --> 00:03:32,080
should be tamper-proof

92
00:03:32,080 --> 00:03:35,040
and once this is detected you should act

93
00:03:35,040 --> 00:03:35,680
so

94
00:03:35,680 --> 00:03:38,720
terminal should turn on even if it's off

95
00:03:38,720 --> 00:03:41,599
and delete sensitive data which includes

96
00:03:41,599 --> 00:03:42,799
encryption keys and

97
00:03:42,799 --> 00:03:45,680
payment apps and we'll talk about this a

98
00:03:45,680 --> 00:03:47,599
little bit later

99
00:03:47,599 --> 00:03:50,640
and also terminal needs to indicate that

100
00:03:50,640 --> 00:03:52,799
the device has been compromised

101
00:03:52,799 --> 00:03:54,879
so it basically should be turned into a

102
00:03:54,879 --> 00:03:57,200
brick

103
00:03:57,200 --> 00:04:00,480
now let's talk about hackers so we had

104
00:04:00,480 --> 00:04:02,640
a few researches about point of social

105
00:04:02,640 --> 00:04:03,840
security in the past

106
00:04:03,840 --> 00:04:06,400
so within the last 10 years guys from

107
00:04:06,400 --> 00:04:08,159
the university of cambridge

108
00:04:08,159 --> 00:04:10,560
made the research about hacking point of

109
00:04:10,560 --> 00:04:11,920
sale devices

110
00:04:11,920 --> 00:04:14,080
then within the last five years we have

111
00:04:14,080 --> 00:04:15,840
sr labs and carstenol

112
00:04:15,840 --> 00:04:18,320
who have presented vulnerabilities about

113
00:04:18,320 --> 00:04:19,358
major

114
00:04:19,358 --> 00:04:22,560
european uh point of sale vendor and

115
00:04:22,560 --> 00:04:25,280
we ourselves within the last three years

116
00:04:25,280 --> 00:04:27,440
made a research about mobile point of

117
00:04:27,440 --> 00:04:28,320
sale

118
00:04:28,320 --> 00:04:32,560
and security in these devices

119
00:04:32,560 --> 00:04:34,560
so now we are going to talk about the

120
00:04:34,560 --> 00:04:36,639
terminals what is inside what

121
00:04:36,639 --> 00:04:38,320
vulnerabilities they have

122
00:04:38,320 --> 00:04:40,880
how to attack and how to weaponize them

123
00:04:40,880 --> 00:04:42,320
and finally

124
00:04:42,320 --> 00:04:44,720
we sort of know the requirements of this

125
00:04:44,720 --> 00:04:46,320
world already but we still

126
00:04:46,320 --> 00:04:48,320
don't understand the rules of how this

127
00:04:48,320 --> 00:04:49,440
world operates

128
00:04:49,440 --> 00:04:51,680
and i would like to pass the microphone

129
00:04:51,680 --> 00:04:53,600
to alexi

130
00:04:53,600 --> 00:04:56,880
hi there thanks timur the first step in

131
00:04:56,880 --> 00:04:58,479
order to make your own evil and

132
00:04:58,479 --> 00:05:01,039
weaponized creature is understanding in

133
00:05:01,039 --> 00:05:04,240
its weaknesses and internals

134
00:05:04,240 --> 00:05:06,560
basically every terminal hides from your

135
00:05:06,560 --> 00:05:08,000
bunch of legacy code

136
00:05:08,000 --> 00:05:10,960
technologies and strange approaches and

137
00:05:10,960 --> 00:05:12,240
it's great to understand world

138
00:05:12,240 --> 00:05:13,759
technologies takes starting from

139
00:05:13,759 --> 00:05:15,759
hardware

140
00:05:15,759 --> 00:05:17,759
in this talk we don't have enough time

141
00:05:17,759 --> 00:05:19,759
to describe point-of-sale hardware in

142
00:05:19,759 --> 00:05:20,880
details

143
00:05:20,880 --> 00:05:22,720
but we have already published this

144
00:05:22,720 --> 00:05:26,000
information on defcon payload village

145
00:05:26,000 --> 00:05:27,840
more details you will find on the

146
00:05:27,840 --> 00:05:29,759
village youtube channel

147
00:05:29,759 --> 00:05:32,320
i'd recommend to you to pay attention to

148
00:05:32,320 --> 00:05:34,720
this channel because it also contain

149
00:05:34,720 --> 00:05:37,360
other useful information and now we are

150
00:05:37,360 --> 00:05:38,800
going to shed light on software

151
00:05:38,800 --> 00:05:41,520
components

152
00:05:41,600 --> 00:05:44,160
it's time to weaponize your post

153
00:05:44,160 --> 00:05:45,759
terminal

154
00:05:45,759 --> 00:05:47,520
we should keep in mind that we are going

155
00:05:47,520 --> 00:05:49,680
to break into secured well protected and

156
00:05:49,680 --> 00:05:51,440
certified devices

157
00:05:51,440 --> 00:05:53,120
when the vendor goes to pci

158
00:05:53,120 --> 00:05:55,680
certification he should satisfy pci

159
00:05:55,680 --> 00:05:56,639
rules

160
00:05:56,639 --> 00:05:58,560
and fill a form like previously

161
00:05:58,560 --> 00:06:00,080
discussed one

162
00:06:00,080 --> 00:06:02,800
suddenly this successful certification

163
00:06:02,800 --> 00:06:04,960
itself don't guarantee that devices

164
00:06:04,960 --> 00:06:07,759
completely unhackable

165
00:06:07,759 --> 00:06:09,759
the first creature to weaponize is

166
00:06:09,759 --> 00:06:11,199
ingenico pin pad

167
00:06:11,199 --> 00:06:14,160
let it be slowpoke our findings affect

168
00:06:14,160 --> 00:06:15,759
the wall product line of such

169
00:06:15,759 --> 00:06:17,840
terminals there is basically no

170
00:06:17,840 --> 00:06:19,039
difference

171
00:06:19,039 --> 00:06:22,160
is it portable or counter top they all

172
00:06:22,160 --> 00:06:24,000
built using the same hardware

173
00:06:24,000 --> 00:06:26,240
and uses the same telem 2 operating

174
00:06:26,240 --> 00:06:27,440
system

175
00:06:27,440 --> 00:06:29,680
this is just an example of this series

176
00:06:29,680 --> 00:06:32,160
but i sure this kind of terminals

177
00:06:32,160 --> 00:06:34,960
is well known for all of you it is

178
00:06:34,960 --> 00:06:36,639
expectable

179
00:06:36,639 --> 00:06:38,319
that all the communications to the bank

180
00:06:38,319 --> 00:06:39,840
servers are encrypted

181
00:06:39,840 --> 00:06:42,560
but there is an alternative way to get

182
00:06:42,560 --> 00:06:43,759
into it

183
00:06:43,759 --> 00:06:48,000
the maintenance tools and special modes

184
00:06:48,000 --> 00:06:49,840
the main software for server section is

185
00:06:49,840 --> 00:06:51,039
called llt

186
00:06:51,039 --> 00:06:53,680
it is usually used for application and

187
00:06:53,680 --> 00:06:55,280
operation system

188
00:06:55,280 --> 00:06:57,919
locks collection firmware upload and

189
00:06:57,919 --> 00:07:01,039
operating system and application updates

190
00:07:01,039 --> 00:07:04,080
to connect a pin pad to lte software you

191
00:07:04,080 --> 00:07:05,680
should boot the device

192
00:07:05,680 --> 00:07:08,560
with special key combination what does

193
00:07:08,560 --> 00:07:11,360
this mod hide

194
00:07:11,360 --> 00:07:15,120
first of all it uses very strange way to

195
00:07:15,120 --> 00:07:16,000
establish connection

196
00:07:16,000 --> 00:07:18,639
to the device the terminal itself is

197
00:07:18,639 --> 00:07:20,639
recognized as a virtual com port when

198
00:07:20,639 --> 00:07:22,800
usb cable is connected

199
00:07:22,800 --> 00:07:25,440
llt software brings up pvp connection

200
00:07:25,440 --> 00:07:26,160
over this

201
00:07:26,160 --> 00:07:28,960
virtual com port when this connection is

202
00:07:28,960 --> 00:07:30,880
established the pin pad initiates

203
00:07:30,880 --> 00:07:34,080
connection to pc6000 tcp port

204
00:07:34,080 --> 00:07:37,360
and weighs a response from lt software

205
00:07:37,360 --> 00:07:39,360
usually the llt software sends the

206
00:07:39,360 --> 00:07:41,120
command to pinpad to open

207
00:07:41,120 --> 00:07:43,919
ftp server in order to get access to

208
00:07:43,919 --> 00:07:46,720
some part of device file system

209
00:07:46,720 --> 00:07:49,120
the interesting thing here is the code

210
00:07:49,120 --> 00:07:51,360
credentials for every step

211
00:07:51,360 --> 00:07:53,360
also no one has an ability to change

212
00:07:53,360 --> 00:07:54,879
these passwords

213
00:07:54,879 --> 00:07:57,039
because they are part of operating

214
00:07:57,039 --> 00:07:59,360
system binaries

215
00:07:59,360 --> 00:08:02,800
the protocol on 6000 tcp port used to

216
00:08:02,800 --> 00:08:03,199
open

217
00:08:03,199 --> 00:08:07,199
ftp server is called ntpt3

218
00:08:07,199 --> 00:08:09,120
it is completely insecure with

219
00:08:09,120 --> 00:08:12,000
absolutely no authentication

220
00:08:12,000 --> 00:08:15,599
and other integrity control mechanisms

221
00:08:15,599 --> 00:08:17,759
by exploiting this vulnerability and

222
00:08:17,759 --> 00:08:19,680
having direct connection to terminals

223
00:08:19,680 --> 00:08:22,160
usb and attacker gain access to internal

224
00:08:22,160 --> 00:08:24,720
ftp servers it also has some

225
00:08:24,720 --> 00:08:26,800
undocumented comments

226
00:08:26,800 --> 00:08:30,879
lt is allowed to read only file system

227
00:08:30,879 --> 00:08:33,760
the directories host and swap one

228
00:08:33,760 --> 00:08:35,279
vulnerability allows

229
00:08:35,279 --> 00:08:38,240
reading any files whose absolute path is

230
00:08:38,240 --> 00:08:38,880
less

231
00:08:38,880 --> 00:08:42,479
than 17 characters long

232
00:08:42,479 --> 00:08:44,080
it allows an attacker to obtain

233
00:08:44,080 --> 00:08:45,680
cryptographic keys

234
00:08:45,680 --> 00:08:48,000
and manipulate traffic between point of

235
00:08:48,000 --> 00:08:48,720
sale and

236
00:08:48,720 --> 00:08:51,839
acquire also some extra functions

237
00:08:51,839 --> 00:08:56,080
of this protocol are buggy too

238
00:08:56,160 --> 00:08:58,240
the third intestines finding in this

239
00:08:58,240 --> 00:09:00,160
chain is trace protocol

240
00:09:00,160 --> 00:09:03,200
with no authentication and encryption

241
00:09:03,200 --> 00:09:05,440
trace mode is intended to monitor

242
00:09:05,440 --> 00:09:07,279
performance of banking application

243
00:09:07,279 --> 00:09:07,760
during

244
00:09:07,760 --> 00:09:11,440
development for post debugging and

245
00:09:11,440 --> 00:09:14,560
assist developer feedback capabilities

246
00:09:14,560 --> 00:09:16,720
by using this protocol and having direct

247
00:09:16,720 --> 00:09:18,160
connection to the terminals

248
00:09:18,160 --> 00:09:21,200
interfaces for example usb an attacker

249
00:09:21,200 --> 00:09:23,839
gain access to terminal operating system

250
00:09:23,839 --> 00:09:26,240
and application internals via trace

251
00:09:26,240 --> 00:09:28,480
command line interface

252
00:09:28,480 --> 00:09:32,160
anyone has access to this command line

253
00:09:32,160 --> 00:09:34,399
interface just using the config file

254
00:09:34,399 --> 00:09:35,519
magic

255
00:09:35,519 --> 00:09:37,360
and the trace 2 from software

256
00:09:37,360 --> 00:09:39,279
development kit

257
00:09:39,279 --> 00:09:41,519
example of trace tool output is the

258
00:09:41,519 --> 00:09:44,080
following

259
00:09:45,120 --> 00:09:47,360
this command line interface has help

260
00:09:47,360 --> 00:09:49,519
commands in order to get description for

261
00:09:49,519 --> 00:09:51,680
every available comment

262
00:09:51,680 --> 00:09:53,760
but a research wouldn't be complete

263
00:09:53,760 --> 00:09:56,560
without bunch of non-declared comments

264
00:09:56,560 --> 00:09:58,880
as you may see it exposes to attack or

265
00:09:58,880 --> 00:10:00,880
additional function

266
00:10:00,880 --> 00:10:03,760
to get hardware and software status and

267
00:10:03,760 --> 00:10:07,680
some additional debug capabilities

268
00:10:07,760 --> 00:10:10,720
as a result this sim debug mode allows

269
00:10:10,720 --> 00:10:13,040
full control of the pin pad

270
00:10:13,040 --> 00:10:15,360
the exposed commands allow to allocate

271
00:10:15,360 --> 00:10:17,200
and de-allocate memory

272
00:10:17,200 --> 00:10:20,399
display the contents of all files

273
00:10:20,399 --> 00:10:22,640
of the terminal internal file system

274
00:10:22,640 --> 00:10:24,720
including encryption keys

275
00:10:24,720 --> 00:10:27,120
and to suspend resume and terminate

276
00:10:27,120 --> 00:10:30,480
processes and threads

277
00:10:31,120 --> 00:10:32,959
the example attraction error is

278
00:10:32,959 --> 00:10:34,160
classical

279
00:10:34,160 --> 00:10:36,480
allocate a memory for malicious code

280
00:10:36,480 --> 00:10:37,519
then

281
00:10:37,519 --> 00:10:40,320
write malicious code to allocated memory

282
00:10:40,320 --> 00:10:43,360
suspend and modify a non-important task

283
00:10:43,360 --> 00:10:46,560
in order to point to our

284
00:10:46,560 --> 00:10:50,320
code and then just resume suspended task

285
00:10:50,320 --> 00:10:53,680
finally we have code execution on

286
00:10:53,680 --> 00:10:56,720
any italian-based angelica terminals

287
00:10:56,720 --> 00:11:00,000
is it a good result for such research

288
00:11:00,000 --> 00:11:02,959
definitely yes is it a good news for

289
00:11:02,959 --> 00:11:04,480
their customers

290
00:11:04,480 --> 00:11:08,000
probably no but anyway

291
00:11:08,000 --> 00:11:10,079
we have another creatures in our

292
00:11:10,079 --> 00:11:12,640
research

293
00:11:13,360 --> 00:11:15,040
the next question is well known very

294
00:11:15,040 --> 00:11:17,200
foreign terminals this is an example of

295
00:11:17,200 --> 00:11:21,200
their vx series terminal vx-520

296
00:11:21,200 --> 00:11:23,040
let's figure out what can we do with

297
00:11:23,040 --> 00:11:24,560
this creature

298
00:11:24,560 --> 00:11:26,720
the entire vx product line uses works

299
00:11:26,720 --> 00:11:28,880
vx5 operating system

300
00:11:28,880 --> 00:11:31,120
it is proprietary one as in previous

301
00:11:31,120 --> 00:11:32,399
example

302
00:11:32,399 --> 00:11:34,480
executables for varex operating system

303
00:11:34,480 --> 00:11:36,720
has dot out extension with their own

304
00:11:36,720 --> 00:11:38,160
binary format

305
00:11:38,160 --> 00:11:40,000
and should be signed in order to be

306
00:11:40,000 --> 00:11:42,640
executed on the pin pad

307
00:11:42,640 --> 00:11:44,880
the default password for this type of

308
00:11:44,880 --> 00:11:47,120
pin pair discussed many many times but

309
00:11:47,120 --> 00:11:48,640
no one changes it

310
00:11:48,640 --> 00:11:51,360
you can find the same password even in

311
00:11:51,360 --> 00:11:52,399
ancient

312
00:11:52,399 --> 00:11:55,600
zone xl pin pads from 18th of previous

313
00:11:55,600 --> 00:11:56,959
century

314
00:11:56,959 --> 00:11:59,040
to enter the service mode you have to

315
00:11:59,040 --> 00:12:00,399
press f2 and

316
00:12:00,399 --> 00:12:03,519
f4 keys during the boot of pinpat

317
00:12:03,519 --> 00:12:06,720
and enter the password this mod allows

318
00:12:06,720 --> 00:12:07,519
to modify

319
00:12:07,519 --> 00:12:10,160
internal variables and obtain technical

320
00:12:10,160 --> 00:12:11,360
information about

321
00:12:11,360 --> 00:12:14,560
the exact pinpad model and extra install

322
00:12:14,560 --> 00:12:16,240
updates

323
00:12:16,240 --> 00:12:19,279
example of such variable is go variable

324
00:12:19,279 --> 00:12:21,440
it should contain an executable file

325
00:12:21,440 --> 00:12:23,760
name for autorun when terminal

326
00:12:23,760 --> 00:12:27,279
it turn is turned on

327
00:12:28,320 --> 00:12:31,440
the vx5 base terminal has a file system

328
00:12:31,440 --> 00:12:33,440
divided to multiple drives

329
00:12:33,440 --> 00:12:35,360
some of them mentioned in documentation

330
00:12:35,360 --> 00:12:36,720
but some of them

331
00:12:36,720 --> 00:12:39,040
are used internally by the vendor and

332
00:12:39,040 --> 00:12:40,480
are contained

333
00:12:40,480 --> 00:12:43,360
run drive some partition on non-flash

334
00:12:43,360 --> 00:12:44,320
drive

335
00:12:44,320 --> 00:12:46,560
drives related to boot block and

336
00:12:46,560 --> 00:12:49,040
additional file systems

337
00:12:49,040 --> 00:12:51,440
the drives mentioned below the list are

338
00:12:51,440 --> 00:12:52,880
marked as reserved and

339
00:12:52,880 --> 00:12:55,200
written by varex operating system during

340
00:12:55,200 --> 00:12:56,880
production

341
00:12:56,880 --> 00:12:58,880
this is very interesting thing because

342
00:12:58,880 --> 00:13:00,880
we haven't found any useful information

343
00:13:00,880 --> 00:13:02,560
related to these drives

344
00:13:02,560 --> 00:13:06,399
in any sources in the recent reason

345
00:13:06,399 --> 00:13:08,720
we paid attention to them and found some

346
00:13:08,720 --> 00:13:11,440
gifts from developers

347
00:13:11,440 --> 00:13:14,480
we all know that all executable files

348
00:13:14,480 --> 00:13:16,880
should have their digital signatures

349
00:13:16,880 --> 00:13:20,160
but the drive t is another case its

350
00:13:20,160 --> 00:13:21,279
contents

351
00:13:21,279 --> 00:13:25,519
can be modified and all the binaries

352
00:13:25,519 --> 00:13:27,760
you can find there are trusted by

353
00:13:27,760 --> 00:13:29,920
operating system by default

354
00:13:29,920 --> 00:13:32,399
you can modify the configuration file on

355
00:13:32,399 --> 00:13:34,000
file system menu

356
00:13:34,000 --> 00:13:37,200
in order to execute any of dot out files

357
00:13:37,200 --> 00:13:39,440
from drivet

358
00:13:39,440 --> 00:13:42,079
the most interesting of findings on the

359
00:13:42,079 --> 00:13:42,880
internal and

360
00:13:42,880 --> 00:13:45,120
undocumented file system is the shell

361
00:13:45,120 --> 00:13:46,240
binary

362
00:13:46,240 --> 00:13:49,360
probably once upon time this was used

363
00:13:49,360 --> 00:13:51,519
for recovery and debugging

364
00:13:51,519 --> 00:13:53,440
but now it's just legacy piece of

365
00:13:53,440 --> 00:13:55,360
executable code

366
00:13:55,360 --> 00:13:58,639
to execute it we should modify go and r

367
00:13:58,639 --> 00:14:03,680
variable as you can see on the slide

368
00:14:03,680 --> 00:14:05,440
the results of this modification is the

369
00:14:05,440 --> 00:14:07,279
following instead of merchant

370
00:14:07,279 --> 00:14:09,279
application the pin parts cited the kind

371
00:14:09,279 --> 00:14:10,399
of shell

372
00:14:10,399 --> 00:14:12,639
it is accessible via serial port and

373
00:14:12,639 --> 00:14:14,320
maintenance cable

374
00:14:14,320 --> 00:14:17,279
it has an ability to run signed binaries

375
00:14:17,279 --> 00:14:19,120
list and dump contents

376
00:14:19,120 --> 00:14:22,399
of the file system upload new files

377
00:14:22,399 --> 00:14:26,560
to the pin pad and some other comments

378
00:14:26,560 --> 00:14:28,480
it is very useful but we still don't

379
00:14:28,480 --> 00:14:30,399
have an ability to run our

380
00:14:30,399 --> 00:14:34,240
unsigned code as a result we can upload

381
00:14:34,240 --> 00:14:35,760
any files execute

382
00:14:35,760 --> 00:14:38,160
signed binaries modifier configuration

383
00:14:38,160 --> 00:14:39,440
of the device

384
00:14:39,440 --> 00:14:41,680
but we are still limited by digital

385
00:14:41,680 --> 00:14:43,600
signature checks

386
00:14:43,600 --> 00:14:46,079
in this case we already have extended

387
00:14:46,079 --> 00:14:47,040
user input

388
00:14:47,040 --> 00:14:49,680
from the merchant application to some

389
00:14:49,680 --> 00:14:51,360
internal commands

390
00:14:51,360 --> 00:14:53,199
once the merged application is limited

391
00:14:53,199 --> 00:14:56,240
to the encrypted tms server interaction

392
00:14:56,240 --> 00:14:59,279
and whereas from bank to bank let's

393
00:14:59,279 --> 00:15:02,399
focus to vendor specific issues

394
00:15:02,399 --> 00:15:05,360
we need to look what can we do with some

395
00:15:05,360 --> 00:15:08,160
shell commands

396
00:15:08,320 --> 00:15:10,880
when we try to file the user input for

397
00:15:10,880 --> 00:15:11,920
some comments

398
00:15:11,920 --> 00:15:14,959
we've got a crash we passed too many

399
00:15:14,959 --> 00:15:15,680
symbols

400
00:15:15,680 --> 00:15:17,920
to shell command and we got classic

401
00:15:17,920 --> 00:15:20,240
buffer overflow

402
00:15:20,240 --> 00:15:24,320
also useful scene is in this crash

403
00:15:24,320 --> 00:15:26,959
is output on the display we can see

404
00:15:26,959 --> 00:15:28,320
crash addresses

405
00:15:28,320 --> 00:15:31,839
and some register contents as you may be

406
00:15:31,839 --> 00:15:33,519
noticed

407
00:15:33,519 --> 00:15:37,120
13 in hex in the least significant bit

408
00:15:37,120 --> 00:15:40,240
of cpsr register

409
00:15:40,240 --> 00:15:42,880
means that we got a crash in supervisor

410
00:15:42,880 --> 00:15:43,680
mode

411
00:15:43,680 --> 00:15:47,040
it equals to the crash in vx5 operating

412
00:15:47,040 --> 00:15:49,680
system kernel

413
00:15:49,680 --> 00:15:52,079
the investigation of this crash points

414
00:15:52,079 --> 00:15:55,120
as to buffer overflow inverse operating

415
00:15:55,120 --> 00:15:56,399
system

416
00:15:56,399 --> 00:15:59,199
system call as you can you can see on

417
00:15:59,199 --> 00:16:00,639
the cd code

418
00:16:00,639 --> 00:16:03,040
there is a classical memory copy mistake

419
00:16:03,040 --> 00:16:04,480
on the stack

420
00:16:04,480 --> 00:16:07,279
additionally it is needed to be said

421
00:16:07,279 --> 00:16:08,079
that

422
00:16:08,079 --> 00:16:10,240
there is no measures turned on in order

423
00:16:10,240 --> 00:16:12,480
to prevent code execution

424
00:16:12,480 --> 00:16:15,040
finally we have got a code execution on

425
00:16:15,040 --> 00:16:16,160
any verifix

426
00:16:16,160 --> 00:16:19,440
device because they all have the same

427
00:16:19,440 --> 00:16:20,560
code base

428
00:16:20,560 --> 00:16:22,560
but another interesting thing is the

429
00:16:22,560 --> 00:16:26,319
case in the boot chain

430
00:16:26,480 --> 00:16:28,800
every vendor reinvented their own boot

431
00:16:28,800 --> 00:16:29,600
order

432
00:16:29,600 --> 00:16:32,399
in the case of pin pad devices sometimes

433
00:16:32,399 --> 00:16:33,839
the boot order chain

434
00:16:33,839 --> 00:16:37,680
is very long it also has a lot of legacy

435
00:16:37,680 --> 00:16:39,360
because almost all of these

436
00:16:39,360 --> 00:16:42,000
operating systems developed before

437
00:16:42,000 --> 00:16:44,000
traditional secure boot approach became

438
00:16:44,000 --> 00:16:45,440
a mainstream

439
00:16:45,440 --> 00:16:47,600
after reset a zero stage bootloader

440
00:16:47,600 --> 00:16:49,440
should be started

441
00:16:49,440 --> 00:16:52,560
usually it is located inside mcu in form

442
00:16:52,560 --> 00:16:52,880
of

443
00:16:52,880 --> 00:16:55,680
mask rom it loads the next step

444
00:16:55,680 --> 00:16:57,839
bootloader from flash memory

445
00:16:57,839 --> 00:17:00,560
and checks its cryptographic signature

446
00:17:00,560 --> 00:17:02,320
using the key stored

447
00:17:02,320 --> 00:17:07,439
in otp rom and any other secure memory

448
00:17:07,439 --> 00:17:09,760
every next bootloader also should check

449
00:17:09,760 --> 00:17:12,000
the cryptographic signature of

450
00:17:12,000 --> 00:17:15,599
every loaded piece of code etc etc

451
00:17:15,599 --> 00:17:17,919
finally when operating system loads an

452
00:17:17,919 --> 00:17:20,000
application it also should check

453
00:17:20,000 --> 00:17:22,799
its signature

454
00:17:23,119 --> 00:17:25,359
now you see the works operating system

455
00:17:25,359 --> 00:17:26,240
terminal

456
00:17:26,240 --> 00:17:29,840
boot log output internally it is called

457
00:17:29,840 --> 00:17:33,679
sbi as you may see it can work with usb

458
00:17:33,679 --> 00:17:34,240
sticks

459
00:17:34,240 --> 00:17:36,559
and in this case it loads works

460
00:17:36,559 --> 00:17:38,559
operating system kernel

461
00:17:38,559 --> 00:17:40,240
please look at the operating system

462
00:17:40,240 --> 00:17:42,160
kernel output

463
00:17:42,160 --> 00:17:44,720
here you can see the broadcom cpu model

464
00:17:44,720 --> 00:17:45,440
that

465
00:17:45,440 --> 00:17:47,440
was previously operated to internal

466
00:17:47,440 --> 00:17:49,120
verify name

467
00:17:49,120 --> 00:17:51,600
this bootloader is located at the start

468
00:17:51,600 --> 00:17:53,840
of non-flash memory

469
00:17:53,840 --> 00:17:56,000
the purpose of interaction with usb

470
00:17:56,000 --> 00:17:56,880
flash is factor

471
00:17:56,880 --> 00:18:00,720
restore if usb stick is recognized it

472
00:18:00,720 --> 00:18:03,280
goes to look for science script file

473
00:18:03,280 --> 00:18:05,760
that executes a sequence of actions to

474
00:18:05,760 --> 00:18:06,480
burn you

475
00:18:06,480 --> 00:18:09,679
operating system kernel for example

476
00:18:09,679 --> 00:18:11,440
another interesting ability of this

477
00:18:11,440 --> 00:18:14,160
script is to put the bootloader to low

478
00:18:14,160 --> 00:18:16,400
level command line interface

479
00:18:16,400 --> 00:18:19,760
however we don't have any examples of

480
00:18:19,760 --> 00:18:22,799
science scripts

481
00:18:22,880 --> 00:18:25,280
when we had a look into bootloader we

482
00:18:25,280 --> 00:18:26,000
found

483
00:18:26,000 --> 00:18:29,760
some protocol handler if you dive deeper

484
00:18:29,760 --> 00:18:31,039
we faced with the

485
00:18:31,039 --> 00:18:33,360
same protocol as used in usual

486
00:18:33,360 --> 00:18:35,760
maintenance for terminal loading

487
00:18:35,760 --> 00:18:38,400
the utility for this protocol is called

488
00:18:38,400 --> 00:18:39,600
ddl

489
00:18:39,600 --> 00:18:42,960
and can be found in the internet

490
00:18:42,960 --> 00:18:45,600
and finally there is another classic

491
00:18:45,600 --> 00:18:48,640
memory copy related black was found

492
00:18:48,640 --> 00:18:50,640
the weak logic is contained in the

493
00:18:50,640 --> 00:18:52,400
update format parser

494
00:18:52,400 --> 00:18:54,480
and allowed us to write any memory

495
00:18:54,480 --> 00:18:57,039
regions without any restrictions

496
00:18:57,039 --> 00:18:58,960
the most fast way to exploit this

497
00:18:58,960 --> 00:19:01,039
vulnerability is to call restricted part

498
00:19:01,039 --> 00:19:02,799
of bootloader

499
00:19:02,799 --> 00:19:05,280
as we have mentioned before there is

500
00:19:05,280 --> 00:19:06,960
very useful command line interface

501
00:19:06,960 --> 00:19:08,000
parser

502
00:19:08,000 --> 00:19:12,320
and now we are able to call it

503
00:19:12,640 --> 00:19:14,320
as you can see this command line

504
00:19:14,320 --> 00:19:16,480
interface prompt called without

505
00:19:16,480 --> 00:19:20,400
valid signal script file this mod allows

506
00:19:20,400 --> 00:19:22,880
us to access the wall file system

507
00:19:22,880 --> 00:19:25,600
to dump and burn in regions of flash

508
00:19:25,600 --> 00:19:26,640
memory

509
00:19:26,640 --> 00:19:29,200
to load any code into memory and pass

510
00:19:29,200 --> 00:19:31,919
execution to it

511
00:19:31,919 --> 00:19:34,400
as a result this pin pad can be

512
00:19:34,400 --> 00:19:35,440
exploited

513
00:19:35,440 --> 00:19:37,280
using the physical connection before

514
00:19:37,280 --> 00:19:40,879
operating system is loaded

515
00:19:41,120 --> 00:19:44,240
the last case is linux based mx series

516
00:19:44,240 --> 00:19:45,440
verifone

517
00:19:45,440 --> 00:19:49,120
this is one of most recent pin pad model

518
00:19:49,120 --> 00:19:52,080
and it is also pci certified it has

519
00:19:52,080 --> 00:19:53,760
advanced permission settings like

520
00:19:53,760 --> 00:19:57,440
supervisor user and maintenance mods

521
00:19:57,440 --> 00:20:00,000
also the road user isn't allowed to get

522
00:20:00,000 --> 00:20:03,280
access to different files on the pin pad

523
00:20:03,280 --> 00:20:06,720
file system during to role based access

524
00:20:06,720 --> 00:20:08,480
control settings

525
00:20:08,480 --> 00:20:10,320
we have already seen the research

526
00:20:10,320 --> 00:20:14,080
related to these models at different 25

527
00:20:14,080 --> 00:20:17,440
three years ago the mx series of

528
00:20:17,440 --> 00:20:19,039
verifone pin pads

529
00:20:19,039 --> 00:20:22,000
already were hacked but in some reasons

530
00:20:22,000 --> 00:20:24,240
we have seen exactly the same problems

531
00:20:24,240 --> 00:20:26,000
on our projects with the latest

532
00:20:26,000 --> 00:20:27,360
firmwares

533
00:20:27,360 --> 00:20:29,440
the exploitation chain is default

534
00:20:29,440 --> 00:20:31,440
password for system mode

535
00:20:31,440 --> 00:20:34,559
command injection in maintenance mode

536
00:20:34,559 --> 00:20:36,720
privilege escalation based on vendor

537
00:20:36,720 --> 00:20:37,760
service

538
00:20:37,760 --> 00:20:40,000
and finally write condition in role

539
00:20:40,000 --> 00:20:43,200
based access control configuration

540
00:20:43,200 --> 00:20:45,039
this presentation describes all the

541
00:20:45,039 --> 00:20:48,159
steps how to get into this model but

542
00:20:48,159 --> 00:20:50,080
this is not the end of a story

543
00:20:50,080 --> 00:20:53,360
about mx series

544
00:20:53,919 --> 00:20:57,520
in the bootlock we see the same chip

545
00:20:57,520 --> 00:21:01,120
what already known as

546
00:21:01,200 --> 00:21:03,919
9 bcm5892 surprisingly faced with the

547
00:21:03,919 --> 00:21:05,280
same bootloader as

548
00:21:05,280 --> 00:21:08,720
in where x5 pin pads but in this case

549
00:21:08,720 --> 00:21:10,880
it loads not the proprietary kernel

550
00:21:10,880 --> 00:21:11,760
model

551
00:21:11,760 --> 00:21:15,280
it loads you boot finally it has

552
00:21:15,280 --> 00:21:16,320
literally the same

553
00:21:16,320 --> 00:21:18,720
code and can be exploited in the same

554
00:21:18,720 --> 00:21:21,600
way before operating system is loaded

555
00:21:21,600 --> 00:21:24,080
that's almost all about technical parts

556
00:21:24,080 --> 00:21:25,840
of terminal weaponizing

557
00:21:25,840 --> 00:21:28,480
and i am going to pass our virtual floor

558
00:21:28,480 --> 00:21:30,880
to tmur

559
00:21:30,880 --> 00:21:32,799
now when we are finally familiar with

560
00:21:32,799 --> 00:21:35,840
vulnerabilities of possible species

561
00:21:35,840 --> 00:21:37,919
we can try to establish the rules of

562
00:21:37,919 --> 00:21:38,960
this world

563
00:21:38,960 --> 00:21:42,000
so rule number one i guess is that if

564
00:21:42,000 --> 00:21:43,919
pci console does not require any

565
00:21:43,919 --> 00:21:45,679
specific security measures

566
00:21:45,679 --> 00:21:47,360
they will never be applied in the real

567
00:21:47,360 --> 00:21:50,320
world for example pci does not say

568
00:21:50,320 --> 00:21:52,640
that you need to delete firmware and

569
00:21:52,640 --> 00:21:53,679
vendors delete

570
00:21:53,679 --> 00:21:56,960
only applications on the main operating

571
00:21:56,960 --> 00:21:59,600
system it's also probably quite time

572
00:21:59,600 --> 00:22:01,679
consuming to delete quite a large

573
00:22:01,679 --> 00:22:05,039
chunk of firmware with a tiny small

574
00:22:05,039 --> 00:22:06,400
battery

575
00:22:06,400 --> 00:22:09,760
next is keys should be deleted yeah

576
00:22:09,760 --> 00:22:12,960
but pci does not specify how exactly

577
00:22:12,960 --> 00:22:16,000
uh vendors should delete their keys so

578
00:22:16,000 --> 00:22:17,200
in most of the cases

579
00:22:17,200 --> 00:22:19,919
vendors just put a special mark on the

580
00:22:19,919 --> 00:22:21,840
files in file system saying that

581
00:22:21,840 --> 00:22:24,799
files add files are deleted and not

582
00:22:24,799 --> 00:22:25,520
delete them

583
00:22:25,520 --> 00:22:28,960
in a very secure way so

584
00:22:28,960 --> 00:22:32,080
rule number two is probably that

585
00:22:32,080 --> 00:22:35,919
over the years all vendors are doing

586
00:22:35,919 --> 00:22:39,200
uh sort of security through obscurity

587
00:22:39,200 --> 00:22:43,120
approach of their devices of security of

588
00:22:43,120 --> 00:22:44,400
their devices

589
00:22:44,400 --> 00:22:46,640
so they were using proprietary operating

590
00:22:46,640 --> 00:22:48,480
systems for long long time they were

591
00:22:48,480 --> 00:22:50,880
using special proprietary protocols

592
00:22:50,880 --> 00:22:55,440
and outputs formats of files formats of

593
00:22:55,440 --> 00:22:58,559
physical outputs you can see that there

594
00:22:58,559 --> 00:23:00,880
are a lot of special modes skill switch

595
00:23:00,880 --> 00:23:02,559
combinations which allow

596
00:23:02,559 --> 00:23:06,080
to get access to special secret comments

597
00:23:06,080 --> 00:23:08,480
and probably security through obscurity

598
00:23:08,480 --> 00:23:09,840
is not the best

599
00:23:09,840 --> 00:23:13,200
approach security wise

600
00:23:13,200 --> 00:23:16,080
next let's see at the difference what

601
00:23:16,080 --> 00:23:16,640
you can

602
00:23:16,640 --> 00:23:18,480
and what you can't do in different

603
00:23:18,480 --> 00:23:19,760
models of

604
00:23:19,760 --> 00:23:22,720
point of sales so because ingenica has a

605
00:23:22,720 --> 00:23:23,840
dedicated

606
00:23:23,840 --> 00:23:26,159
chip for the cryptography which we could

607
00:23:26,159 --> 00:23:28,000
not get access to

608
00:23:28,000 --> 00:23:31,039
it actually should seem very secure

609
00:23:31,039 --> 00:23:33,600
even though you can compromise the main

610
00:23:33,600 --> 00:23:34,400
uh

611
00:23:34,400 --> 00:23:37,520
part of the reader however it's not so

612
00:23:37,520 --> 00:23:38,159
you still

613
00:23:38,159 --> 00:23:40,400
are able to send arbitrary packets that

614
00:23:40,400 --> 00:23:42,640
make sense we'll come to this just in a

615
00:23:42,640 --> 00:23:43,919
minute finally

616
00:23:43,919 --> 00:23:46,240
and we still can clone cards including

617
00:23:46,240 --> 00:23:48,640
pin codes and track 2 data

618
00:23:48,640 --> 00:23:51,360
and cv which is quite strange and i will

619
00:23:51,360 --> 00:23:52,159
explain this

620
00:23:52,159 --> 00:23:54,559
just in a minute the only one difference

621
00:23:54,559 --> 00:23:56,640
is that you can clone terminals

622
00:23:56,640 --> 00:23:58,080
themselves

623
00:23:58,080 --> 00:24:01,840
because keys for terminals will be

624
00:24:01,840 --> 00:24:04,080
stored on the dedicated chip

625
00:24:04,080 --> 00:24:07,600
and the problem is in jennica is that

626
00:24:07,600 --> 00:24:10,080
your malicious code will be rewritten

627
00:24:10,080 --> 00:24:12,480
after each reboot so you won't you will

628
00:24:12,480 --> 00:24:13,520
have to

629
00:24:13,520 --> 00:24:18,720
in fact device after each reboot

630
00:24:18,720 --> 00:24:20,960
let's talk about cloning cards cloning

631
00:24:20,960 --> 00:24:22,159
pins

632
00:24:22,159 --> 00:24:25,919
how you we all would have presumed that

633
00:24:25,919 --> 00:24:28,640
pin entry process works for example so

634
00:24:28,640 --> 00:24:30,880
the customer enters pin

635
00:24:30,880 --> 00:24:34,000
on the pin path and information goes

636
00:24:34,000 --> 00:24:36,640
there from there to a dedicated chip for

637
00:24:36,640 --> 00:24:37,760
the encryption

638
00:24:37,760 --> 00:24:39,760
and already encrypted goes to the main

639
00:24:39,760 --> 00:24:42,000
operating system and the main part main

640
00:24:42,000 --> 00:24:42,799
chip

641
00:24:42,799 --> 00:24:45,919
where it goes in the transaction stream

642
00:24:45,919 --> 00:24:47,520
over the network

643
00:24:47,520 --> 00:24:51,360
however in fact it's not the case the

644
00:24:51,360 --> 00:24:54,080
algorithm how most of the vendors do

645
00:24:54,080 --> 00:24:55,120
this procedure

646
00:24:55,120 --> 00:24:58,480
is that pinpat customer enters pin

647
00:24:58,480 --> 00:25:01,039
on on the pin pad and it goes straight

648
00:25:01,039 --> 00:25:03,200
to the main operating system to the main

649
00:25:03,200 --> 00:25:04,080
app

650
00:25:04,080 --> 00:25:07,039
where to get access to you need to have

651
00:25:07,039 --> 00:25:08,320
maximum privileges

652
00:25:08,320 --> 00:25:11,960
root access or work with the

653
00:25:11,960 --> 00:25:13,120
[Music]

654
00:25:13,120 --> 00:25:16,159
kernel kernel rights

655
00:25:16,159 --> 00:25:18,799
and only after that from the main app it

656
00:25:18,799 --> 00:25:19,600
goes

657
00:25:19,600 --> 00:25:22,880
to the specific chip by

658
00:25:22,880 --> 00:25:25,679
api for encryption gets back already

659
00:25:25,679 --> 00:25:26,799
encrypted and then

660
00:25:26,799 --> 00:25:29,840
goes in the transaction stream so

661
00:25:29,840 --> 00:25:32,799
you can see flow here right if you'll be

662
00:25:32,799 --> 00:25:34,000
able to

663
00:25:34,000 --> 00:25:37,279
run special malware special software

664
00:25:37,279 --> 00:25:38,640
which will allow

665
00:25:38,640 --> 00:25:42,640
to scrape the memory of the main app

666
00:25:42,640 --> 00:25:46,799
and still the spin codes still track to

667
00:25:46,799 --> 00:25:47,279
date

668
00:25:47,279 --> 00:25:51,120
before it will go to be encrypted

669
00:25:51,120 --> 00:25:54,480
that's it hackers can get access to

670
00:25:54,480 --> 00:25:58,400
pin codes to track 2 data and it's quite

671
00:25:58,400 --> 00:25:58,799
bad

672
00:25:58,799 --> 00:26:02,080
shall we say so now let's talk

673
00:26:02,080 --> 00:26:05,520
how to clone the terminals yeah

674
00:26:05,520 --> 00:26:08,159
only one vendor allows to clone the

675
00:26:08,159 --> 00:26:09,120
terminals

676
00:26:09,120 --> 00:26:11,600
and to do that you need to steal quite a

677
00:26:11,600 --> 00:26:14,159
fistful amount of different keys

678
00:26:14,159 --> 00:26:15,679
you need to steal the keys for

679
00:26:15,679 --> 00:26:17,840
encrypting network communication you

680
00:26:17,840 --> 00:26:18,960
need to steal the key

681
00:26:18,960 --> 00:26:21,279
for pin encryption you need to steal a

682
00:26:21,279 --> 00:26:22,000
key for

683
00:26:22,000 --> 00:26:25,279
signing message authentication codes and

684
00:26:25,279 --> 00:26:27,360
you need to steal

685
00:26:27,360 --> 00:26:29,840
a few additional keys like the key for

686
00:26:29,840 --> 00:26:31,840
storage encryption and the key for

687
00:26:31,840 --> 00:26:33,760
integrity control for the operating

688
00:26:33,760 --> 00:26:34,480
system

689
00:26:34,480 --> 00:26:37,039
but once you've done it you get a fully

690
00:26:37,039 --> 00:26:38,080
functional clone

691
00:26:38,080 --> 00:26:40,640
of the original point of sale and that

692
00:26:40,640 --> 00:26:42,400
allows you for example to make

693
00:26:42,400 --> 00:26:43,279
transactions

694
00:26:43,279 --> 00:26:46,240
pretending to be a part of the big

695
00:26:46,240 --> 00:26:47,120
merchant

696
00:26:47,120 --> 00:26:50,159
and carry out transaction stream fraud

697
00:26:50,159 --> 00:26:52,799
or carry out for example money movements

698
00:26:52,799 --> 00:26:54,480
and refunds

699
00:26:54,480 --> 00:26:57,679
which is quite nasty at the end

700
00:26:57,679 --> 00:27:00,799
so and finally let's talk about

701
00:27:00,799 --> 00:27:02,559
weaponizing terminals and making

702
00:27:02,559 --> 00:27:03,840
payments attack

703
00:27:03,840 --> 00:27:06,240
so when we begin this project that was

704
00:27:06,240 --> 00:27:08,320
the one of the original goals where

705
00:27:08,320 --> 00:27:09,520
customers said

706
00:27:09,520 --> 00:27:13,520
is it possible these infected terminals

707
00:27:13,520 --> 00:27:16,640
to carry out some actual fraud for the

708
00:27:16,640 --> 00:27:17,520
banks

709
00:27:17,520 --> 00:27:20,480
and we have done this uh and shown these

710
00:27:20,480 --> 00:27:21,919
to our customers

711
00:27:21,919 --> 00:27:25,039
and we actually even done a

712
00:27:25,039 --> 00:27:28,559
a bit of site research so once you get

713
00:27:28,559 --> 00:27:31,120
access to the transaction forward

714
00:27:31,120 --> 00:27:33,840
to the transaction stream it's really

715
00:27:33,840 --> 00:27:34,720
easy

716
00:27:34,720 --> 00:27:37,840
to send arbitrary packets and try

717
00:27:37,840 --> 00:27:40,720
to confirm fraudulent transactions and

718
00:27:40,720 --> 00:27:42,720
it's much easier as if that would be

719
00:27:42,720 --> 00:27:44,960
just a regular customer with stolen

720
00:27:44,960 --> 00:27:46,399
cards and

721
00:27:46,399 --> 00:27:48,399
these fraudulent transactions will be

722
00:27:48,399 --> 00:27:50,080
accepted in the end

723
00:27:50,080 --> 00:27:54,399
so as you may know uh european banks now

724
00:27:54,399 --> 00:27:57,919
adopt adopting new payment rules

725
00:27:57,919 --> 00:28:01,039
called uh psd2 or payment

726
00:28:01,039 --> 00:28:04,159
service directive across the board

727
00:28:04,159 --> 00:28:07,039
and we've shown how it's possible to

728
00:28:07,039 --> 00:28:08,240
bypass

729
00:28:08,240 --> 00:28:11,360
pin requirements pin checking process

730
00:28:11,360 --> 00:28:12,080
and reset

731
00:28:12,080 --> 00:28:14,240
cumulative limits for contactless

732
00:28:14,240 --> 00:28:15,360
transactions

733
00:28:15,360 --> 00:28:17,919
so in normal circumstances this attack

734
00:28:17,919 --> 00:28:19,919
would have required specialist equipment

735
00:28:19,919 --> 00:28:20,960
for a few thousand

736
00:28:20,960 --> 00:28:23,500
grand and

737
00:28:23,500 --> 00:28:25,120
[Music]

738
00:28:25,120 --> 00:28:27,520
what we have done instead we just

739
00:28:27,520 --> 00:28:28,159
tweaked

740
00:28:28,159 --> 00:28:31,200
a couple of bits of information

741
00:28:31,200 --> 00:28:34,799
in the transaction stream with

742
00:28:34,799 --> 00:28:37,440
modified terminals and we were able to

743
00:28:37,440 --> 00:28:38,720
save us a lot of time

744
00:28:38,720 --> 00:28:41,760
and a lot of resources and we have done

745
00:28:41,760 --> 00:28:44,240
these attacks and fraudulent

746
00:28:44,240 --> 00:28:45,279
transactions

747
00:28:45,279 --> 00:28:48,320
were accepted using these attacks

748
00:28:48,320 --> 00:28:50,799
so i'm not gonna spoil you can read

749
00:28:50,799 --> 00:28:51,679
about this

750
00:28:51,679 --> 00:28:54,799
uh in a white paper this research uh

751
00:28:54,799 --> 00:28:56,840
now is about something completely

752
00:28:56,840 --> 00:28:59,840
different

753
00:29:00,559 --> 00:29:03,760
so for engenica we arranged 10 different

754
00:29:03,760 --> 00:29:04,559
cves

755
00:29:04,559 --> 00:29:07,960
and as you can see they were informed in

756
00:29:07,960 --> 00:29:09,200
2018

757
00:29:09,200 --> 00:29:11,840
that's why we call this pokemon a

758
00:29:11,840 --> 00:29:12,880
slowpok

759
00:29:12,880 --> 00:29:15,760
yeah as you can see it took two years

760
00:29:15,760 --> 00:29:16,559
for vendor

761
00:29:16,559 --> 00:29:19,679
to get back to us and to confirm

762
00:29:19,679 --> 00:29:21,919
that vulnerabilities were fixed the

763
00:29:21,919 --> 00:29:22,960
problem is that

764
00:29:22,960 --> 00:29:25,679
we still don't even know how badly or

765
00:29:25,679 --> 00:29:26,399
how

766
00:29:26,399 --> 00:29:28,480
really good they were fixed because we

767
00:29:28,480 --> 00:29:29,600
never received

768
00:29:29,600 --> 00:29:32,080
any update we never received any

769
00:29:32,080 --> 00:29:32,960
software

770
00:29:32,960 --> 00:29:36,000
or firmware or the hardware with the

771
00:29:36,000 --> 00:29:38,320
updates

772
00:29:38,320 --> 00:29:41,039
very fun on the other side is quite good

773
00:29:41,039 --> 00:29:41,919
and acting

774
00:29:41,919 --> 00:29:44,559
quite proactively so we inform them in

775
00:29:44,559 --> 00:29:45,679
2018

776
00:29:45,679 --> 00:29:48,159
they get back to us reasonably quickly

777
00:29:48,159 --> 00:29:49,600
and once all

778
00:29:49,600 --> 00:29:52,559
vulnerabilities were fixed uh they even

779
00:29:52,559 --> 00:29:53,360
send us

780
00:29:53,360 --> 00:29:56,240
updated devices to confirm from our site

781
00:29:56,240 --> 00:29:56,880
that all

782
00:29:56,880 --> 00:30:00,960
vulnerabilities were effectively uh

783
00:30:00,960 --> 00:30:01,820
mitigated

784
00:30:01,820 --> 00:30:04,960
[Music]

785
00:30:04,960 --> 00:30:08,559
so we still have a few open questions

786
00:30:08,559 --> 00:30:11,520
yeah one of that is that we still don't

787
00:30:11,520 --> 00:30:12,640
know how good

788
00:30:12,640 --> 00:30:14,960
very ingenica fixed their

789
00:30:14,960 --> 00:30:17,039
vulnerabilities we never received

790
00:30:17,039 --> 00:30:20,320
any updates from them and these

791
00:30:20,320 --> 00:30:22,080
vulnerabilities still can present

792
00:30:22,080 --> 00:30:24,320
in the modern versions of their point of

793
00:30:24,320 --> 00:30:25,520
sales

794
00:30:25,520 --> 00:30:28,399
uh we also don't know the difference

795
00:30:28,399 --> 00:30:29,279
between

796
00:30:29,279 --> 00:30:31,679
end-of-life devices and new devices

797
00:30:31,679 --> 00:30:33,039
newer devices that

798
00:30:33,039 --> 00:30:36,240
both vendors supply because

799
00:30:36,240 --> 00:30:38,399
at the end of the day bad security is a

800
00:30:38,399 --> 00:30:39,600
bad security

801
00:30:39,600 --> 00:30:41,679
and if you do mistakes and if your

802
00:30:41,679 --> 00:30:43,120
developers do mistakes

803
00:30:43,120 --> 00:30:44,960
that means that they probably will be

804
00:30:44,960 --> 00:30:47,200
found in the whole range

805
00:30:47,200 --> 00:30:50,320
of your products

806
00:30:50,320 --> 00:30:52,399
and then i would like to say thanks to

807
00:30:52,399 --> 00:30:55,120
all researchers and reverse engineers

808
00:30:55,120 --> 00:30:57,919
who were participating in this project

809
00:30:57,919 --> 00:31:00,159
and thanks to all of you guys this

810
00:31:00,159 --> 00:31:02,240
project would not be done without here

811
00:31:02,240 --> 00:31:05,360
it's really nice job and if you have any

812
00:31:05,360 --> 00:31:06,320
questions

813
00:31:06,320 --> 00:31:09,360
uh you can let us know and we're already

814
00:31:09,360 --> 00:31:10,159
publishing

815
00:31:10,159 --> 00:31:13,360
our research our white paper today so

816
00:31:13,360 --> 00:31:14,720
links are available

817
00:31:14,720 --> 00:31:17,440
on our twitter pages so go ahead and

818
00:31:17,440 --> 00:31:20,919
read and thanks so much for listening

819
00:31:20,919 --> 00:31:23,919
us

