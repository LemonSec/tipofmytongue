1
00:00:01,130 --> 00:00:14,690
[Music]

2
00:00:18,800 --> 00:00:19,760
hi everyone

3
00:00:19,760 --> 00:00:21,600
thanks for tuning in to this black hat

4
00:00:21,600 --> 00:00:24,320
briefing my name is colin estep

5
00:00:24,320 --> 00:00:26,560
and i'm a senior security researcher at

6
00:00:26,560 --> 00:00:28,560
netskope threat labs

7
00:00:28,560 --> 00:00:29,920
today i'm going to be talking about

8
00:00:29,920 --> 00:00:33,040
permission mining in gcp

9
00:00:33,040 --> 00:00:34,960
so first i want to go through a concept

10
00:00:34,960 --> 00:00:37,280
i'm calling i am exposure

11
00:00:37,280 --> 00:00:39,840
which is the risk related to the

12
00:00:39,840 --> 00:00:41,760
identity and access management in our

13
00:00:41,760 --> 00:00:43,760
cloud environments

14
00:00:43,760 --> 00:00:45,680
then i'm going to go into a little bit

15
00:00:45,680 --> 00:00:46,800
of detail about how

16
00:00:46,800 --> 00:00:48,879
identity and access management works in

17
00:00:48,879 --> 00:00:50,640
gcp specifically

18
00:00:50,640 --> 00:00:54,320
since our project is related to gcp

19
00:00:54,320 --> 00:00:56,320
then i'm going to present a real example

20
00:00:56,320 --> 00:00:58,079
that we found in a production

21
00:00:58,079 --> 00:01:00,960
gcp environment and walk you through how

22
00:01:00,960 --> 00:01:03,199
we found that example

23
00:01:03,199 --> 00:01:05,040
by showing you our permission mining

24
00:01:05,040 --> 00:01:07,200
solution which is a project that we're

25
00:01:07,200 --> 00:01:09,040
going to be releasing to the open source

26
00:01:09,040 --> 00:01:09,920
community

27
00:01:09,920 --> 00:01:12,799
along with this talk lastly i'll be

28
00:01:12,799 --> 00:01:14,320
going through some results that we

29
00:01:14,320 --> 00:01:16,080
produce from our solution

30
00:01:16,080 --> 00:01:18,720
remediation steps that we've seen and

31
00:01:18,720 --> 00:01:22,400
future enhancements for the project

32
00:01:23,840 --> 00:01:26,000
data exposure for cloud environments has

33
00:01:26,000 --> 00:01:27,759
been in the news quite a bit

34
00:01:27,759 --> 00:01:29,439
i think we've all seen these headlines

35
00:01:29,439 --> 00:01:30,880
that talk about some kind of a data

36
00:01:30,880 --> 00:01:31,680
breach

37
00:01:31,680 --> 00:01:34,640
or data leak from a storage bucket we

38
00:01:34,640 --> 00:01:36,320
don't see the same amount of coverage in

39
00:01:36,320 --> 00:01:38,240
the media about i am exposure

40
00:01:38,240 --> 00:01:40,000
but it's an important topic that i think

41
00:01:40,000 --> 00:01:41,600
deserves consideration from

42
00:01:41,600 --> 00:01:44,560
any organization that might be using the

43
00:01:44,560 --> 00:01:45,840
cloud

44
00:01:45,840 --> 00:01:49,600
so what do i mean by i am exposure

45
00:01:49,600 --> 00:01:51,759
mainly it's the risk associated with

46
00:01:51,759 --> 00:01:54,240
each user in your environment

47
00:01:54,240 --> 00:01:56,320
if you knew what each of your users were

48
00:01:56,320 --> 00:01:57,439
capable of

49
00:01:57,439 --> 00:01:59,040
then this would be an easy thing to

50
00:01:59,040 --> 00:02:00,880
evaluate

51
00:02:00,880 --> 00:02:03,280
unfortunately i think most organizations

52
00:02:03,280 --> 00:02:05,680
are not able to answer that question

53
00:02:05,680 --> 00:02:07,600
and we have seen incidents related to

54
00:02:07,600 --> 00:02:09,280
this happening in the wild

55
00:02:09,280 --> 00:02:11,520
the most egregious example happened to a

56
00:02:11,520 --> 00:02:13,680
company named codespaces

57
00:02:13,680 --> 00:02:16,879
they ran their business from aws and

58
00:02:16,879 --> 00:02:18,720
an attacker was able to gain access to

59
00:02:18,720 --> 00:02:20,000
the environment

60
00:02:20,000 --> 00:02:22,000
the attacker demanded a ransom from the

61
00:02:22,000 --> 00:02:24,160
company and instead of giving in

62
00:02:24,160 --> 00:02:26,239
code spaces attempted to evict the

63
00:02:26,239 --> 00:02:28,560
attacker

64
00:02:28,560 --> 00:02:31,200
they did not have a great insight into

65
00:02:31,200 --> 00:02:33,040
how strong of a foothold the attacker

66
00:02:33,040 --> 00:02:34,319
had so their

67
00:02:34,319 --> 00:02:36,959
attempts were unsuccessful and

68
00:02:36,959 --> 00:02:38,720
unfortunately the attacker ended up

69
00:02:38,720 --> 00:02:39,840
deleting

70
00:02:39,840 --> 00:02:42,959
all of their data and their resources

71
00:02:42,959 --> 00:02:44,879
so it got to a point where code spaces

72
00:02:44,879 --> 00:02:46,480
couldn't recover and had to go out of

73
00:02:46,480 --> 00:02:48,480
business

74
00:02:48,480 --> 00:02:50,400
even if you're confident that an attack

75
00:02:50,400 --> 00:02:52,000
like this would not happen to that

76
00:02:52,000 --> 00:02:54,000
extent within your organization

77
00:02:54,000 --> 00:02:56,239
it's extremely important to monitor and

78
00:02:56,239 --> 00:02:57,599
audit the risk

79
00:02:57,599 --> 00:03:00,159
your users pose i think we all want to

80
00:03:00,159 --> 00:03:01,920
be able to answer some simple questions

81
00:03:01,920 --> 00:03:04,640
like what can all of my users do

82
00:03:04,640 --> 00:03:06,720
and what is the likelihood that any

83
00:03:06,720 --> 00:03:07,920
compromised credential

84
00:03:07,920 --> 00:03:10,159
could result in administrator level

85
00:03:10,159 --> 00:03:13,440
access to my environment

86
00:03:13,840 --> 00:03:15,280
as cloud customers it's our

87
00:03:15,280 --> 00:03:17,280
responsibility to figure out what kind

88
00:03:17,280 --> 00:03:18,560
of permissions to grant

89
00:03:18,560 --> 00:03:21,120
to each user this is part of the shared

90
00:03:21,120 --> 00:03:22,720
responsibility model

91
00:03:22,720 --> 00:03:24,959
that we adopt when we become a cloud

92
00:03:24,959 --> 00:03:27,200
customer

93
00:03:27,200 --> 00:03:29,120
so unfortunately there's some factors

94
00:03:29,120 --> 00:03:30,879
that lead to us not being able to do

95
00:03:30,879 --> 00:03:31,280
this

96
00:03:31,280 --> 00:03:34,400
successfully every time some examples

97
00:03:34,400 --> 00:03:35,280
may be

98
00:03:35,280 --> 00:03:38,159
hey there's a project that really needs

99
00:03:38,159 --> 00:03:39,920
to get off the ground quick

100
00:03:39,920 --> 00:03:43,120
and we're under a time crunch to

101
00:03:43,120 --> 00:03:45,200
provision the right privileges so that

102
00:03:45,200 --> 00:03:46,480
there's no friction there

103
00:03:46,480 --> 00:03:48,879
so we may provision too many privileges

104
00:03:48,879 --> 00:03:50,000
in advance

105
00:03:50,000 --> 00:03:51,840
and think oh we'll come back and tune it

106
00:03:51,840 --> 00:03:55,519
later but later never comes

107
00:03:55,519 --> 00:03:57,439
also we may have some confusion about

108
00:03:57,439 --> 00:03:59,360
the capability that we're granting when

109
00:03:59,360 --> 00:04:00,000
we

110
00:04:00,000 --> 00:04:02,799
provision these permissions i borrowed

111
00:04:02,799 --> 00:04:05,120
this diagram on the slide from aws's

112
00:04:05,120 --> 00:04:06,000
documentation

113
00:04:06,000 --> 00:04:08,319
and as you can tell from looking at this

114
00:04:08,319 --> 00:04:09,200
diagram

115
00:04:09,200 --> 00:04:10,640
determining whether or not something

116
00:04:10,640 --> 00:04:12,840
will be allowed isn't always a simple

117
00:04:12,840 --> 00:04:14,239
process so

118
00:04:14,239 --> 00:04:17,839
it's easy to get confused and even if we

119
00:04:17,839 --> 00:04:19,199
are able to

120
00:04:19,199 --> 00:04:21,918
provision our permissions successfully

121
00:04:21,918 --> 00:04:23,280
the first time around

122
00:04:23,280 --> 00:04:26,240
and in a way that we're confident it's

123
00:04:26,240 --> 00:04:27,600
difficult to audit

124
00:04:27,600 --> 00:04:30,560
indirect permissions or the implication

125
00:04:30,560 --> 00:04:33,600
of these permissions at scale

126
00:04:33,600 --> 00:04:34,960
since cloud environments are really

127
00:04:34,960 --> 00:04:37,840
dynamic the implications can change over

128
00:04:37,840 --> 00:04:40,159
time

129
00:04:40,400 --> 00:04:42,160
so now that i've given you a brief

130
00:04:42,160 --> 00:04:43,600
overview of the problem

131
00:04:43,600 --> 00:04:45,680
let's talk a little bit more about im

132
00:04:45,680 --> 00:04:48,320
and gcp specifically

133
00:04:48,320 --> 00:04:50,720
there's four different identity types in

134
00:04:50,720 --> 00:04:53,120
gcp which are called members

135
00:04:53,120 --> 00:04:54,479
users and groups are pretty

136
00:04:54,479 --> 00:04:56,479
straightforward it's similar to any

137
00:04:56,479 --> 00:04:57,280
other system

138
00:04:57,280 --> 00:05:00,320
you might deal with a domain

139
00:05:00,320 --> 00:05:03,360
is related to what you find in g suite

140
00:05:03,360 --> 00:05:06,080
where you set up say netscope.com and

141
00:05:06,080 --> 00:05:07,520
then all of your users have a

142
00:05:07,520 --> 00:05:08,560
netscope.com

143
00:05:08,560 --> 00:05:11,840
email address so if you're using g suite

144
00:05:11,840 --> 00:05:12,800
and then you want to give

145
00:05:12,800 --> 00:05:16,400
everyone in gcp a baseline permission

146
00:05:16,400 --> 00:05:19,360
you can grant that to the domain and

147
00:05:19,360 --> 00:05:21,680
then lastly service accounts

148
00:05:21,680 --> 00:05:23,919
are what you use if you want to provide

149
00:05:23,919 --> 00:05:25,680
programmatic access to an

150
00:05:25,680 --> 00:05:29,680
app or a resource since

151
00:05:29,680 --> 00:05:32,160
all these are different you might think

152
00:05:32,160 --> 00:05:33,199
that you have to do something

153
00:05:33,199 --> 00:05:34,560
differently for each one

154
00:05:34,560 --> 00:05:36,479
but actually the permissions are

155
00:05:36,479 --> 00:05:39,840
assigned to them in the same way

156
00:05:40,639 --> 00:05:42,560
now let's go through some terminology

157
00:05:42,560 --> 00:05:44,240
especially around how these permissions

158
00:05:44,240 --> 00:05:45,440
are assigned

159
00:05:45,440 --> 00:05:48,960
so in gcp they call a permission

160
00:05:48,960 --> 00:05:52,160
basically allowing a specific api call

161
00:05:52,160 --> 00:05:53,840
so in this diagram on the slide i'm

162
00:05:53,840 --> 00:05:55,680
showing an example of

163
00:05:55,680 --> 00:05:57,919
some permissions and you'll see compute

164
00:05:57,919 --> 00:05:59,440
instance delete compute

165
00:05:59,440 --> 00:06:02,240
instances get and some other ones these

166
00:06:02,240 --> 00:06:04,000
are actual api calls that are being

167
00:06:04,000 --> 00:06:04,880
allowed

168
00:06:04,880 --> 00:06:07,280
but we don't want to go one by one and

169
00:06:07,280 --> 00:06:07,919
assigned

170
00:06:07,919 --> 00:06:11,280
individual api calls to a user

171
00:06:11,280 --> 00:06:13,919
so instead we use a role and a role is

172
00:06:13,919 --> 00:06:16,080
just a collection of these permissions

173
00:06:16,080 --> 00:06:18,080
but that's what we need in order to be

174
00:06:18,080 --> 00:06:19,680
able to assign the permissions

175
00:06:19,680 --> 00:06:22,880
to a particular member

176
00:06:23,680 --> 00:06:25,840
when we when we end up assigning

177
00:06:25,840 --> 00:06:27,680
permissions to a member that's called a

178
00:06:27,680 --> 00:06:29,280
binding

179
00:06:29,280 --> 00:06:31,919
so that's the relationship between a

180
00:06:31,919 --> 00:06:32,400
role

181
00:06:32,400 --> 00:06:34,720
and a member and a collection of

182
00:06:34,720 --> 00:06:36,000
bindings is called an

183
00:06:36,000 --> 00:06:39,600
i am policy in gcp

184
00:06:39,600 --> 00:06:42,160
so there's also different types of roles

185
00:06:42,160 --> 00:06:43,520
that we're going to be referring to

186
00:06:43,520 --> 00:06:45,199
throughout this talk

187
00:06:45,199 --> 00:06:48,319
the first one is called a basic rule and

188
00:06:48,319 --> 00:06:50,479
these roles are pre-packaged in every

189
00:06:50,479 --> 00:06:52,080
gcp environment

190
00:06:52,080 --> 00:06:54,080
however google recommends that you don't

191
00:06:54,080 --> 00:06:56,160
use them unless you really know how they

192
00:06:56,160 --> 00:06:57,280
work

193
00:06:57,280 --> 00:06:58,960
and that's because they're very

194
00:06:58,960 --> 00:07:00,960
permissive they're very broad

195
00:07:00,960 --> 00:07:04,080
and so they could give a member too many

196
00:07:04,080 --> 00:07:04,800
privileges

197
00:07:04,800 --> 00:07:07,599
if you don't understand them well the

198
00:07:07,599 --> 00:07:09,599
second type of role is called predefined

199
00:07:09,599 --> 00:07:10,400
roles

200
00:07:10,400 --> 00:07:12,479
and these are also provided by google

201
00:07:12,479 --> 00:07:15,360
out of the box in every gcp environment

202
00:07:15,360 --> 00:07:17,919
and they're more job-based so the

203
00:07:17,919 --> 00:07:19,840
example i had in the previous slide was

204
00:07:19,840 --> 00:07:22,080
the role of compute instance admin

205
00:07:22,080 --> 00:07:23,520
this is an example of one of the

206
00:07:23,520 --> 00:07:25,280
predefined roles that they come out with

207
00:07:25,280 --> 00:07:26,880
that's a little more granular

208
00:07:26,880 --> 00:07:29,199
than the basic rules so they do

209
00:07:29,199 --> 00:07:31,919
recommend using pre-defined roles

210
00:07:31,919 --> 00:07:34,080
and then lastly if you're an advanced

211
00:07:34,080 --> 00:07:35,840
customer and you really understand

212
00:07:35,840 --> 00:07:37,599
how these permissions work and where you

213
00:07:37,599 --> 00:07:39,759
want them you can create your own custom

214
00:07:39,759 --> 00:07:44,000
roles to give members

215
00:07:44,000 --> 00:07:46,240
another thing we need to understand is

216
00:07:46,240 --> 00:07:48,800
that there's a hierarchy in gcp

217
00:07:48,800 --> 00:07:50,639
the top level item is called an

218
00:07:50,639 --> 00:07:52,080
organization so

219
00:07:52,080 --> 00:07:54,240
this is similar to the concept in g

220
00:07:54,240 --> 00:07:55,919
suite of a domain

221
00:07:55,919 --> 00:07:59,360
so if i have netscope.com that will be

222
00:07:59,360 --> 00:07:59,680
my

223
00:07:59,680 --> 00:08:02,720
organization and then under that i can

224
00:08:02,720 --> 00:08:03,759
create folders

225
00:08:03,759 --> 00:08:06,000
and folders could represent anything

226
00:08:06,000 --> 00:08:08,000
from different geographies

227
00:08:08,000 --> 00:08:10,879
different teams or business units within

228
00:08:10,879 --> 00:08:13,120
your organization

229
00:08:13,120 --> 00:08:15,919
and as shown here folders can actually

230
00:08:15,919 --> 00:08:17,039
be embedded within

231
00:08:17,039 --> 00:08:20,000
other folders so you can have quite a

232
00:08:20,000 --> 00:08:21,280
big

233
00:08:21,280 --> 00:08:25,199
sort of tree next we have projects

234
00:08:25,199 --> 00:08:28,160
and projects are used to group resources

235
00:08:28,160 --> 00:08:28,800
together

236
00:08:28,800 --> 00:08:31,120
so as we see here in this example you

237
00:08:31,120 --> 00:08:31,919
can have dev

238
00:08:31,919 --> 00:08:34,399
test and prod in different projects and

239
00:08:34,399 --> 00:08:35,839
so that way there's

240
00:08:35,839 --> 00:08:38,000
a boundary between these things so that

241
00:08:38,000 --> 00:08:39,679
you don't have um

242
00:08:39,679 --> 00:08:42,719
you know production data in

243
00:08:42,719 --> 00:08:45,760
a dev environment for example

244
00:08:45,760 --> 00:08:47,680
and then last we have the resource level

245
00:08:47,680 --> 00:08:49,279
and these are individual virtual

246
00:08:49,279 --> 00:08:49,920
machines

247
00:08:49,920 --> 00:08:52,720
buckets databases anything like that

248
00:08:52,720 --> 00:08:54,240
that you're going to be creating

249
00:08:54,240 --> 00:08:56,160
and those always have to exist in a

250
00:08:56,160 --> 00:08:58,640
project

251
00:08:59,760 --> 00:09:02,560
so now that we've covered both the i am

252
00:09:02,560 --> 00:09:03,200
structure

253
00:09:03,200 --> 00:09:05,680
and then the hierarchy in gcp let's put

254
00:09:05,680 --> 00:09:07,600
these two things together

255
00:09:07,600 --> 00:09:10,560
so this slide shows a diagram on the

256
00:09:10,560 --> 00:09:11,760
left side we see

257
00:09:11,760 --> 00:09:14,800
the i am policy and on the right side we

258
00:09:14,800 --> 00:09:17,440
see the hierarchy in gcp

259
00:09:17,440 --> 00:09:19,440
and what we're trying to show here is

260
00:09:19,440 --> 00:09:22,240
the relationship between the two

261
00:09:22,240 --> 00:09:24,560
and what this is showing is that you can

262
00:09:24,560 --> 00:09:25,680
basically assign

263
00:09:25,680 --> 00:09:27,760
permissions at any level in the

264
00:09:27,760 --> 00:09:30,399
hierarchy within gcp

265
00:09:30,399 --> 00:09:32,560
so i could assign a user permissions at

266
00:09:32,560 --> 00:09:34,320
the organization level

267
00:09:34,320 --> 00:09:36,800
but i have to know that those

268
00:09:36,800 --> 00:09:38,480
permissions are going to be inherited

269
00:09:38,480 --> 00:09:42,399
all the way through the organization so

270
00:09:42,399 --> 00:09:44,800
any folder that gets created any project

271
00:09:44,800 --> 00:09:46,480
and any resource

272
00:09:46,480 --> 00:09:49,120
in the entire environment will inherit

273
00:09:49,120 --> 00:09:51,680
those permissions from the organization

274
00:09:51,680 --> 00:09:54,399
there's no inherent way within iam and

275
00:09:54,399 --> 00:09:55,200
gcp

276
00:09:55,200 --> 00:09:57,200
to deny access that's already been

277
00:09:57,200 --> 00:09:58,880
granted

278
00:09:58,880 --> 00:10:01,279
so you have to think about this and plan

279
00:10:01,279 --> 00:10:02,880
ahead when you're provisioning your

280
00:10:02,880 --> 00:10:03,600
permissions

281
00:10:03,600 --> 00:10:05,920
in a gcp environment so that you don't

282
00:10:05,920 --> 00:10:07,120
get caught up

283
00:10:07,120 --> 00:10:10,320
in an unexpected scenario of having

284
00:10:10,320 --> 00:10:13,519
a top level entity be able to operate on

285
00:10:13,519 --> 00:10:15,279
resources you don't want them to have

286
00:10:15,279 --> 00:10:19,839
access to

287
00:10:20,079 --> 00:10:22,079
so now that we've covered some of those

288
00:10:22,079 --> 00:10:23,360
concepts at a high level

289
00:10:23,360 --> 00:10:25,360
let's dive a little bit deeper into

290
00:10:25,360 --> 00:10:27,279
service accounts

291
00:10:27,279 --> 00:10:28,640
the reason why i'm going to talk about

292
00:10:28,640 --> 00:10:31,200
that is that this is directly applicable

293
00:10:31,200 --> 00:10:32,160
to our project

294
00:10:32,160 --> 00:10:34,720
and they're kind of unique in gcp

295
00:10:34,720 --> 00:10:35,360
because they're

296
00:10:35,360 --> 00:10:38,720
both identities and resources

297
00:10:38,720 --> 00:10:40,800
and since they're resources they must be

298
00:10:40,800 --> 00:10:42,959
created in a project in gcp just like

299
00:10:42,959 --> 00:10:47,279
any other resource

300
00:10:47,279 --> 00:10:50,079
so here's an example where we have a

301
00:10:50,079 --> 00:10:51,760
project that has several service

302
00:10:51,760 --> 00:10:52,880
accounts in it

303
00:10:52,880 --> 00:10:54,480
and then we have a user that we want to

304
00:10:54,480 --> 00:10:56,640
give access to be able to use a service

305
00:10:56,640 --> 00:10:57,600
account

306
00:10:57,600 --> 00:10:59,279
now what this means is that the user

307
00:10:59,279 --> 00:11:01,680
will be able to actually

308
00:11:01,680 --> 00:11:03,760
activate that service account which

309
00:11:03,760 --> 00:11:06,000
means the user will be able to assume

310
00:11:06,000 --> 00:11:08,079
the identity of the service account and

311
00:11:08,079 --> 00:11:09,200
be able to

312
00:11:09,200 --> 00:11:12,240
use its permissions to conduct some api

313
00:11:12,240 --> 00:11:13,600
calls

314
00:11:13,600 --> 00:11:16,000
so here i'm showing the i am binding at

315
00:11:16,000 --> 00:11:17,839
just one service account

316
00:11:17,839 --> 00:11:21,279
so this red box

317
00:11:21,279 --> 00:11:25,680
is just telling us that hey he can't see

318
00:11:25,680 --> 00:11:28,160
or activate any other service account in

319
00:11:28,160 --> 00:11:28,880
the project

320
00:11:28,880 --> 00:11:31,920
it's just this one

321
00:11:31,920 --> 00:11:34,399
however if i put an i am binding for the

322
00:11:34,399 --> 00:11:36,640
user at the project level

323
00:11:36,640 --> 00:11:40,160
now that user can enumerate and activate

324
00:11:40,160 --> 00:11:44,480
any service account in that project

325
00:11:45,680 --> 00:11:47,519
so let's go through a real example in

326
00:11:47,519 --> 00:11:51,519
gcp to make this even more concrete

327
00:11:51,519 --> 00:11:54,639
so here i'm showing a gcp environment

328
00:11:54,639 --> 00:11:56,560
and this is a real example in a

329
00:11:56,560 --> 00:11:58,079
production environment

330
00:11:58,079 --> 00:12:01,120
so i mentioned folders earlier

331
00:12:01,120 --> 00:12:02,560
but you don't really need to have

332
00:12:02,560 --> 00:12:04,320
folders if you don't want to you can

333
00:12:04,320 --> 00:12:06,079
have an organization node

334
00:12:06,079 --> 00:12:07,200
and then you could have a bunch of

335
00:12:07,200 --> 00:12:09,440
projects under the organization directly

336
00:12:09,440 --> 00:12:11,120
so in this particular case we had a

337
00:12:11,120 --> 00:12:14,000
project under the organization directly

338
00:12:14,000 --> 00:12:16,399
and the project had some pretty normal

339
00:12:16,399 --> 00:12:17,680
stuff going on

340
00:12:17,680 --> 00:12:20,000
it had compute engine instances

341
00:12:20,000 --> 00:12:21,440
kubernetes

342
00:12:21,440 --> 00:12:25,200
and a bigquery instance

343
00:12:25,200 --> 00:12:26,959
and the admins decided to create a

344
00:12:26,959 --> 00:12:29,600
service account within this project

345
00:12:29,600 --> 00:12:33,040
and then they went and created a binding

346
00:12:33,040 --> 00:12:35,680
but that binding was what they call an

347
00:12:35,680 --> 00:12:36,399
owner role

348
00:12:36,399 --> 00:12:39,760
this is a basic role provided by gcp

349
00:12:39,760 --> 00:12:42,079
again this is not recommended unless you

350
00:12:42,079 --> 00:12:44,320
really understand what's happening here

351
00:12:44,320 --> 00:12:46,720
and it was bound at the organization

352
00:12:46,720 --> 00:12:47,440
level

353
00:12:47,440 --> 00:12:50,839
so this was at the highest level in the

354
00:12:50,839 --> 00:12:52,320
environment

355
00:12:52,320 --> 00:12:55,440
so why is this a problem well the owner

356
00:12:55,440 --> 00:12:56,320
role

357
00:12:56,320 --> 00:12:59,040
has full access to all resources as we

358
00:12:59,040 --> 00:13:00,560
can see in the description

359
00:13:00,560 --> 00:13:03,120
this is a screenshot i took from the gcp

360
00:13:03,120 --> 00:13:04,320
console

361
00:13:04,320 --> 00:13:06,000
so when you look at the role in the

362
00:13:06,000 --> 00:13:07,760
console you can see this

363
00:13:07,760 --> 00:13:10,240
that it says it's got full access to all

364
00:13:10,240 --> 00:13:11,440
resources

365
00:13:11,440 --> 00:13:15,120
and it's got over 3 400 api calls that

366
00:13:15,120 --> 00:13:16,959
it can make successfully

367
00:13:16,959 --> 00:13:20,160
now these api calls include logging

368
00:13:20,160 --> 00:13:23,040
creating users changing permissions

369
00:13:23,040 --> 00:13:24,000
destroying

370
00:13:24,000 --> 00:13:27,360
and adding resources so it's basically a

371
00:13:27,360 --> 00:13:30,320
full admin

372
00:13:30,880 --> 00:13:33,839
so next in the same environment we have

373
00:13:33,839 --> 00:13:35,680
a user come along who needs to be able

374
00:13:35,680 --> 00:13:37,279
to do a few things they need to be able

375
00:13:37,279 --> 00:13:39,760
to create and delete some resources

376
00:13:39,760 --> 00:13:42,639
they need to be able to query data and

377
00:13:42,639 --> 00:13:44,240
they're going to be doing a wide

378
00:13:44,240 --> 00:13:46,480
ar a wide variety of things in the

379
00:13:46,480 --> 00:13:47,440
project

380
00:13:47,440 --> 00:13:49,920
so the administrators just decided to

381
00:13:49,920 --> 00:13:50,880
give this user

382
00:13:50,880 --> 00:13:54,240
the editor role at the project level

383
00:13:54,240 --> 00:13:57,519
and again the editor role is another

384
00:13:57,519 --> 00:13:58,959
basic role

385
00:13:58,959 --> 00:14:02,560
that is very broad so from the gcp

386
00:14:02,560 --> 00:14:03,199
console

387
00:14:03,199 --> 00:14:05,839
if we look at it we can see over 3 100

388
00:14:05,839 --> 00:14:07,279
permissions allowed

389
00:14:07,279 --> 00:14:10,240
by this role and it has edited access to

390
00:14:10,240 --> 00:14:11,600
all resources

391
00:14:11,600 --> 00:14:13,680
so that means that whatever level you

392
00:14:13,680 --> 00:14:15,199
apply this at

393
00:14:15,199 --> 00:14:18,000
it will have edit access to any resource

394
00:14:18,000 --> 00:14:20,480
under that level

395
00:14:20,480 --> 00:14:22,639
so this user has edit access to

396
00:14:22,639 --> 00:14:24,560
everything in the project

397
00:14:24,560 --> 00:14:26,480
and that includes the surface account

398
00:14:26,480 --> 00:14:30,079
resource that exists in the project

399
00:14:30,079 --> 00:14:32,959
since he has the editor role he can

400
00:14:32,959 --> 00:14:33,839
actually go in

401
00:14:33,839 --> 00:14:36,000
and look at every single service account

402
00:14:36,000 --> 00:14:36,880
in the project

403
00:14:36,880 --> 00:14:40,800
and activate them so now he has a route

404
00:14:40,800 --> 00:14:41,519
to

405
00:14:41,519 --> 00:14:43,839
escalate his privileges up from just

406
00:14:43,839 --> 00:14:45,360
being in that one project

407
00:14:45,360 --> 00:14:47,839
to the overall organization and have

408
00:14:47,839 --> 00:14:49,120
full administrator

409
00:14:49,120 --> 00:14:51,199
permissions throughout the entire

410
00:14:51,199 --> 00:14:53,760
environment

411
00:14:54,560 --> 00:14:56,959
so why is this such a problem to track

412
00:14:56,959 --> 00:14:58,399
down

413
00:14:58,399 --> 00:15:01,680
well a lot of people attending this talk

414
00:15:01,680 --> 00:15:02,720
or watching this talk

415
00:15:02,720 --> 00:15:04,399
might have their own tooling already

416
00:15:04,399 --> 00:15:05,839
that looks at

417
00:15:05,839 --> 00:15:09,040
gcp environments by making api calls

418
00:15:09,040 --> 00:15:11,760
but if you don't have some sort of a

419
00:15:11,760 --> 00:15:12,880
custom tool

420
00:15:12,880 --> 00:15:16,320
that you created or you found then

421
00:15:16,320 --> 00:15:18,399
looking in the console you're not going

422
00:15:18,399 --> 00:15:20,639
to be able to tell this very easily

423
00:15:20,639 --> 00:15:22,880
there's various different consoles to

424
00:15:22,880 --> 00:15:23,760
look in

425
00:15:23,760 --> 00:15:26,399
and uh you need to sort of piece the

426
00:15:26,399 --> 00:15:27,920
things together on your own

427
00:15:27,920 --> 00:15:30,399
so here i'm looking at the service

428
00:15:30,399 --> 00:15:31,519
account console

429
00:15:31,519 --> 00:15:34,560
in in gcp and i'm looking at this

430
00:15:34,560 --> 00:15:36,560
one service account that i created to

431
00:15:36,560 --> 00:15:38,160
sort of model what we found in the

432
00:15:38,160 --> 00:15:40,639
production environment

433
00:15:40,639 --> 00:15:42,639
so this service account has that full

434
00:15:42,639 --> 00:15:43,920
ownership permissions at the

435
00:15:43,920 --> 00:15:45,600
organization level

436
00:15:45,600 --> 00:15:48,240
and on the right side of the screenshot

437
00:15:48,240 --> 00:15:50,639
i can see a bunch of things

438
00:15:50,639 --> 00:15:52,880
that have permissions over this service

439
00:15:52,880 --> 00:15:55,519
account that have been inherited down

440
00:15:55,519 --> 00:15:56,880
you know from some point in the

441
00:15:56,880 --> 00:16:00,000
organization but

442
00:16:00,000 --> 00:16:02,560
looking at the service account itself i

443
00:16:02,560 --> 00:16:04,560
can't tell that this carries with it

444
00:16:04,560 --> 00:16:07,920
any sort of great risk you know compared

445
00:16:07,920 --> 00:16:09,680
to any other service account i have in

446
00:16:09,680 --> 00:16:10,959
this project

447
00:16:10,959 --> 00:16:12,880
so just looking at this i kind of don't

448
00:16:12,880 --> 00:16:14,079
have a clue

449
00:16:14,079 --> 00:16:16,000
i have to go back and look in the i am

450
00:16:16,000 --> 00:16:17,680
console and see

451
00:16:17,680 --> 00:16:19,199
what permissions are assigned to this

452
00:16:19,199 --> 00:16:20,959
thing as an identity

453
00:16:20,959 --> 00:16:24,480
and then sort of piece it together

454
00:16:24,480 --> 00:16:26,320
so that's where our permission mining

455
00:16:26,320 --> 00:16:27,680
solution comes into play

456
00:16:27,680 --> 00:16:30,079
we really want to make this easier to to

457
00:16:30,079 --> 00:16:32,240
visualize

458
00:16:32,240 --> 00:16:34,839
so what does our solution do basically

459
00:16:34,839 --> 00:16:36,480
it's

460
00:16:36,480 --> 00:16:38,800
it's just making api calls to see what

461
00:16:38,800 --> 00:16:41,040
your current configuration is

462
00:16:41,040 --> 00:16:44,079
and by doing this you can actually use

463
00:16:44,079 --> 00:16:45,759
it to continually monitor the

464
00:16:45,759 --> 00:16:46,639
environment

465
00:16:46,639 --> 00:16:49,600
so you could run our tool once a month

466
00:16:49,600 --> 00:16:51,680
or you could run it once an hour

467
00:16:51,680 --> 00:16:53,519
whatever you deem appropriate for your

468
00:16:53,519 --> 00:16:55,680
environment

469
00:16:55,680 --> 00:16:57,360
once it grabs all the data from these

470
00:16:57,360 --> 00:16:59,279
api calls

471
00:16:59,279 --> 00:17:01,279
it actually uses a graph to find

472
00:17:01,279 --> 00:17:04,160
privilege escalation potential

473
00:17:04,160 --> 00:17:06,640
and it provides you a report containing

474
00:17:06,640 --> 00:17:07,359
the direct

475
00:17:07,359 --> 00:17:09,199
and indirect permissions for every

476
00:17:09,199 --> 00:17:11,839
member in your environment

477
00:17:11,839 --> 00:17:14,000
so this way users of the tool can

478
00:17:14,000 --> 00:17:15,280
monitor and mitigate

479
00:17:15,280 --> 00:17:19,599
these risks in real time

480
00:17:19,599 --> 00:17:21,919
so let's kind of walk through what it's

481
00:17:21,919 --> 00:17:25,280
doing what is the tool really doing

482
00:17:25,280 --> 00:17:27,359
first it needs to take an inventory of

483
00:17:27,359 --> 00:17:28,400
the hierarchy

484
00:17:28,400 --> 00:17:30,240
in the particular environment it's

485
00:17:30,240 --> 00:17:31,840
running in

486
00:17:31,840 --> 00:17:34,080
because every environment is different

487
00:17:34,080 --> 00:17:35,280
there could be folders

488
00:17:35,280 --> 00:17:37,600
there could be no folders there could be

489
00:17:37,600 --> 00:17:39,679
500 projects or there could be one

490
00:17:39,679 --> 00:17:40,720
project

491
00:17:40,720 --> 00:17:43,520
so first we go through and we take an

492
00:17:43,520 --> 00:17:45,600
inventory of of the whole structure of

493
00:17:45,600 --> 00:17:46,960
the hierarchy

494
00:17:46,960 --> 00:17:48,960
and figure out where the folders are

495
00:17:48,960 --> 00:17:50,640
where the projects are

496
00:17:50,640 --> 00:17:53,440
and group the service accounts under the

497
00:17:53,440 --> 00:17:56,400
correct projects

498
00:17:57,120 --> 00:17:59,600
then what we do is we compile the direct

499
00:17:59,600 --> 00:18:00,320
bindings

500
00:18:00,320 --> 00:18:03,600
for every member so in

501
00:18:03,600 --> 00:18:05,600
what i'm showing here is an example of

502
00:18:05,600 --> 00:18:07,280
what we found in the production

503
00:18:07,280 --> 00:18:08,160
environment

504
00:18:08,160 --> 00:18:10,000
where i'm modeling it in my test

505
00:18:10,000 --> 00:18:11,600
environment

506
00:18:11,600 --> 00:18:14,640
so i have a member called cstep and

507
00:18:14,640 --> 00:18:17,120
i gave him editor permissions at the

508
00:18:17,120 --> 00:18:18,559
project level

509
00:18:18,559 --> 00:18:20,559
and within that project i have a service

510
00:18:20,559 --> 00:18:21,919
account that's got

511
00:18:21,919 --> 00:18:24,880
some higher level permissions below this

512
00:18:24,880 --> 00:18:26,480
i'm showing another member that has

513
00:18:26,480 --> 00:18:28,559
different permissions that

514
00:18:28,559 --> 00:18:30,960
does not imply any sort of way of

515
00:18:30,960 --> 00:18:32,960
impersonating a service account

516
00:18:32,960 --> 00:18:35,280
but we want to compile all the direct

517
00:18:35,280 --> 00:18:36,000
permissions

518
00:18:36,000 --> 00:18:38,480
so that in our report we get a full view

519
00:18:38,480 --> 00:18:42,000
of what's going on

520
00:18:42,000 --> 00:18:43,360
so once we have all the direct

521
00:18:43,360 --> 00:18:44,960
permissions that's when we can start to

522
00:18:44,960 --> 00:18:45,600
figure out

523
00:18:45,600 --> 00:18:48,240
who are our impersonators meaning who

524
00:18:48,240 --> 00:18:49,520
are the members

525
00:18:49,520 --> 00:18:52,480
who are capable of impersonating a

526
00:18:52,480 --> 00:18:53,280
service account

527
00:18:53,280 --> 00:18:56,080
and doing something in our environment

528
00:18:56,080 --> 00:18:56,640
and

529
00:18:56,640 --> 00:18:58,240
that really comes down to these five

530
00:18:58,240 --> 00:19:01,120
main roles and i've grouped them here

531
00:19:01,120 --> 00:19:03,600
in order of most permissive with owner

532
00:19:03,600 --> 00:19:04,320
at the top

533
00:19:04,320 --> 00:19:06,240
and then least permissive with service

534
00:19:06,240 --> 00:19:08,160
account user at the bottom

535
00:19:08,160 --> 00:19:10,160
and you'll see the screenshot here from

536
00:19:10,160 --> 00:19:11,440
the console again

537
00:19:11,440 --> 00:19:13,919
showing service account user with only

538
00:19:13,919 --> 00:19:14,799
five

539
00:19:14,799 --> 00:19:17,200
permissions assigned to it even though

540
00:19:17,200 --> 00:19:19,200
it only has these five permissions it's

541
00:19:19,200 --> 00:19:20,240
very powerful

542
00:19:20,240 --> 00:19:23,039
because it enables whoever has this

543
00:19:23,039 --> 00:19:24,799
permission whoever has this role

544
00:19:24,799 --> 00:19:26,240
assigned

545
00:19:26,240 --> 00:19:29,280
can enumerate and impersonate any

546
00:19:29,280 --> 00:19:30,670
service accounts in their scope

547
00:19:30,670 --> 00:19:33,739
[Music]

548
00:19:34,240 --> 00:19:36,720
so finally once we have that information

549
00:19:36,720 --> 00:19:38,320
we construct a graph

550
00:19:38,320 --> 00:19:40,320
and we chose the graph data structure

551
00:19:40,320 --> 00:19:42,720
because it's really great for

552
00:19:42,720 --> 00:19:44,880
modeling entities and relationships

553
00:19:44,880 --> 00:19:45,840
which is what

554
00:19:45,840 --> 00:19:48,720
this environment really is is you know

555
00:19:48,720 --> 00:19:49,520
finding

556
00:19:49,520 --> 00:19:52,799
who has permissions and at what level

557
00:19:52,799 --> 00:19:55,200
so what we start doing is laying out the

558
00:19:55,200 --> 00:19:56,559
impersonators

559
00:19:56,559 --> 00:19:59,520
and creating the bindings that give them

560
00:19:59,520 --> 00:20:02,000
some impersonation capability

561
00:20:02,000 --> 00:20:05,039
at the right position in the hierarchy

562
00:20:05,039 --> 00:20:06,880
since we have the hierarchy and we have

563
00:20:06,880 --> 00:20:09,120
an inventory of the service accounts

564
00:20:09,120 --> 00:20:11,120
this will enable us to effectively

565
00:20:11,120 --> 00:20:12,640
traverse the graph and find

566
00:20:12,640 --> 00:20:16,880
out what the scope is for each member

567
00:20:18,240 --> 00:20:20,240
so like i mentioned once we have the

568
00:20:20,240 --> 00:20:22,400
graph constructed we can find potential

569
00:20:22,400 --> 00:20:23,039
privilege

570
00:20:23,039 --> 00:20:26,240
escalation by traversing the graph

571
00:20:26,240 --> 00:20:28,640
and this will tell us every service

572
00:20:28,640 --> 00:20:30,159
account that they have

573
00:20:30,159 --> 00:20:33,200
in their scope and then we can compile

574
00:20:33,200 --> 00:20:34,000
the permissions

575
00:20:34,000 --> 00:20:36,320
assigned to those service accounts and

576
00:20:36,320 --> 00:20:37,600
say that this

577
00:20:37,600 --> 00:20:39,679
member actually has an indirect

578
00:20:39,679 --> 00:20:40,799
permission or

579
00:20:40,799 --> 00:20:43,280
what we call an extended binding to be

580
00:20:43,280 --> 00:20:48,159
able to do something else

581
00:20:48,159 --> 00:20:50,240
so now that i described what we're doing

582
00:20:50,240 --> 00:20:51,280
in the solution

583
00:20:51,280 --> 00:20:53,360
let's see what does this kind of look

584
00:20:53,360 --> 00:20:55,600
like

585
00:20:56,000 --> 00:20:57,760
so the results we get from the solution

586
00:20:57,760 --> 00:21:01,120
will include a report for every member

587
00:21:01,120 --> 00:21:04,000
and i've made it sort of uh easy to look

588
00:21:04,000 --> 00:21:04,799
at for this

589
00:21:04,799 --> 00:21:07,760
presentation but here you'll get an idea

590
00:21:07,760 --> 00:21:08,480
of what it's

591
00:21:08,480 --> 00:21:11,520
giving us so here i'm showing an excerpt

592
00:21:11,520 --> 00:21:12,559
of a report for

593
00:21:12,559 --> 00:21:15,600
my user cstep and it shows that he has

594
00:21:15,600 --> 00:21:16,960
direct bindings

595
00:21:16,960 --> 00:21:19,520
and there are project bindings and so i

596
00:21:19,520 --> 00:21:21,440
see the name of the project here

597
00:21:21,440 --> 00:21:24,880
called sifsec gcp dev

598
00:21:24,880 --> 00:21:28,000
and at that level cstep has

599
00:21:28,000 --> 00:21:31,440
the role editor assigned to him

600
00:21:31,440 --> 00:21:33,679
then under that i'm showing the extended

601
00:21:33,679 --> 00:21:35,679
bindings so these are bindings that we

602
00:21:35,679 --> 00:21:36,880
recovered

603
00:21:36,880 --> 00:21:39,520
from service accounts that cstep can

604
00:21:39,520 --> 00:21:39,919
actually

605
00:21:39,919 --> 00:21:42,960
impersonate and it's showing that within

606
00:21:42,960 --> 00:21:44,880
those extended bindings there are some

607
00:21:44,880 --> 00:21:47,120
at the organization level

608
00:21:47,120 --> 00:21:49,440
and i see the name of the organization

609
00:21:49,440 --> 00:21:50,240
node here

610
00:21:50,240 --> 00:21:52,720
called sifsac.com and then i have an

611
00:21:52,720 --> 00:21:54,720
array of roles

612
00:21:54,720 --> 00:21:57,280
at that level and the one highlighted in

613
00:21:57,280 --> 00:21:59,679
yellow is the owner roll which is our

614
00:21:59,679 --> 00:22:00,159
full

615
00:22:00,159 --> 00:22:03,840
admin uh permissions so that's really

616
00:22:03,840 --> 00:22:05,120
important to be able to see

617
00:22:05,120 --> 00:22:08,400
that cstep although we think he may only

618
00:22:08,400 --> 00:22:09,039
have

619
00:22:09,039 --> 00:22:11,520
permissions over one project that's not

620
00:22:11,520 --> 00:22:12,400
really the case

621
00:22:12,400 --> 00:22:15,039
if he makes use of the service accounts

622
00:22:15,039 --> 00:22:17,840
in his scope

623
00:22:19,039 --> 00:22:20,480
and here's what it would look like in a

624
00:22:20,480 --> 00:22:22,480
graph

625
00:22:22,480 --> 00:22:24,320
the graph that i'm constructing in the

626
00:22:24,320 --> 00:22:26,720
project is not meant as a ui

627
00:22:26,720 --> 00:22:28,640
but i thought it'd be useful to show it

628
00:22:28,640 --> 00:22:31,200
here so

629
00:22:31,200 --> 00:22:34,080
just quickly the legend for the graph

630
00:22:34,080 --> 00:22:35,360
the blue node

631
00:22:35,360 --> 00:22:38,720
is our organization node the green nodes

632
00:22:38,720 --> 00:22:41,840
are our members light pink is the

633
00:22:41,840 --> 00:22:42,400
project

634
00:22:42,400 --> 00:22:44,080
and you'll see the project associated

635
00:22:44,080 --> 00:22:46,159
with the organization

636
00:22:46,159 --> 00:22:49,120
and then the dark pink or more reddish

637
00:22:49,120 --> 00:22:49,679
nodes

638
00:22:49,679 --> 00:22:52,240
are the service accounts located within

639
00:22:52,240 --> 00:22:55,120
the project

640
00:22:55,120 --> 00:22:57,200
and as you'll see here i have my surface

641
00:22:57,200 --> 00:23:00,000
account that i set up as the

642
00:23:00,000 --> 00:23:02,320
admin in the organization it actually

643
00:23:02,320 --> 00:23:04,320
has two different nodes to represent one

644
00:23:04,320 --> 00:23:05,039
account

645
00:23:05,039 --> 00:23:07,280
and that's because a service account is

646
00:23:07,280 --> 00:23:08,080
a resource

647
00:23:08,080 --> 00:23:11,520
and an identity so in order to be able

648
00:23:11,520 --> 00:23:13,200
to traverse the graph effectively

649
00:23:13,200 --> 00:23:15,919
i want to i want to represent that state

650
00:23:15,919 --> 00:23:17,280
in both ways

651
00:23:17,280 --> 00:23:19,679
so i can show the service account that's

652
00:23:19,679 --> 00:23:21,360
in scope under the project

653
00:23:21,360 --> 00:23:23,280
and then i can show its binding at some

654
00:23:23,280 --> 00:23:26,480
level in the hierarchy

655
00:23:27,120 --> 00:23:30,159
next i have the impersonator associated

656
00:23:30,159 --> 00:23:31,600
to the project

657
00:23:31,600 --> 00:23:34,320
so again i can see what he has the

658
00:23:34,320 --> 00:23:36,880
capability to do

659
00:23:36,880 --> 00:23:40,559
and that's how we created our report

660
00:23:40,559 --> 00:23:43,039
so what does this look like for real

661
00:23:43,039 --> 00:23:44,640
well when we run the tool in a

662
00:23:44,640 --> 00:23:46,559
production environment

663
00:23:46,559 --> 00:23:49,760
it can get pretty hairy the graph here

664
00:23:49,760 --> 00:23:50,000
has

665
00:23:50,000 --> 00:23:53,279
over 500 projects several hundred

666
00:23:53,279 --> 00:23:54,400
members

667
00:23:54,400 --> 00:23:57,120
and so it's no wonder that this is

668
00:23:57,120 --> 00:23:59,120
really hard to keep track of

669
00:23:59,120 --> 00:24:02,240
unless you have a tool that's actively

670
00:24:02,240 --> 00:24:04,400
monitoring the situation

671
00:24:04,400 --> 00:24:05,919
it's going to be hard for anyone to

672
00:24:05,919 --> 00:24:07,679
manually understand

673
00:24:07,679 --> 00:24:10,080
what every single user is capable of in

674
00:24:10,080 --> 00:24:12,799
the environment

675
00:24:14,240 --> 00:24:16,080
so now that we've gone through what the

676
00:24:16,080 --> 00:24:19,760
tool produces what's its value

677
00:24:19,760 --> 00:24:21,760
well some of the remediation that we've

678
00:24:21,760 --> 00:24:24,000
seen happen as a result of this

679
00:24:24,000 --> 00:24:27,200
has been the following um bringing

680
00:24:27,200 --> 00:24:28,799
service account bindings down the

681
00:24:28,799 --> 00:24:29,760
hierarchy

682
00:24:29,760 --> 00:24:32,400
is one way to to deal with this so you

683
00:24:32,400 --> 00:24:34,240
might look at the result and say well

684
00:24:34,240 --> 00:24:35,440
you know what

685
00:24:35,440 --> 00:24:37,279
the service account needs to have owner

686
00:24:37,279 --> 00:24:39,520
permissions for whatever reason

687
00:24:39,520 --> 00:24:41,120
but maybe we don't need it at the

688
00:24:41,120 --> 00:24:42,880
organization level maybe we should

689
00:24:42,880 --> 00:24:44,000
create a folder

690
00:24:44,000 --> 00:24:47,200
and put it there and

691
00:24:47,200 --> 00:24:50,480
that'll limit the range here

692
00:24:50,480 --> 00:24:54,159
or we see that hey the service account

693
00:24:54,159 --> 00:24:55,520
doesn't need

694
00:24:55,520 --> 00:24:58,080
a basic role we should really apply more

695
00:24:58,080 --> 00:25:00,640
granular permissions to limit its scope

696
00:25:00,640 --> 00:25:03,760
and so people do that as well and then

697
00:25:03,760 --> 00:25:05,279
lastly

698
00:25:05,279 --> 00:25:06,960
you know sometimes you set up a new

699
00:25:06,960 --> 00:25:09,679
environment and you do some testing

700
00:25:09,679 --> 00:25:13,440
and you just set up some quick things

701
00:25:13,440 --> 00:25:15,200
you put some permissions in place just

702
00:25:15,200 --> 00:25:17,039
to quickly evaluate something

703
00:25:17,039 --> 00:25:18,960
but then you didn't go back and clean it

704
00:25:18,960 --> 00:25:20,799
up and so

705
00:25:20,799 --> 00:25:22,400
in some cases you don't need the binding

706
00:25:22,400 --> 00:25:24,880
at all and you can just remove it

707
00:25:24,880 --> 00:25:26,880
the idea is that we want to proactively

708
00:25:26,880 --> 00:25:28,480
reduce the risk in the environment

709
00:25:28,480 --> 00:25:31,039
without waiting for a compromise

710
00:25:31,039 --> 00:25:32,960
you know we want to have a smart way to

711
00:25:32,960 --> 00:25:34,480
audit everything

712
00:25:34,480 --> 00:25:37,679
and view that risk and make

713
00:25:37,679 --> 00:25:39,520
smart decisions about where we're going

714
00:25:39,520 --> 00:25:41,120
to take that risk

715
00:25:41,120 --> 00:25:44,240
whereas maybe we need to reduce friction

716
00:25:44,240 --> 00:25:47,279
but the idea is that we need to have all

717
00:25:47,279 --> 00:25:48,960
the information available to make the

718
00:25:48,960 --> 00:25:51,440
right call

719
00:25:52,159 --> 00:25:55,760
so our first version of the tool that's

720
00:25:55,760 --> 00:25:56,880
going to be open sourced

721
00:25:56,880 --> 00:25:58,880
i think is a good start but there's

722
00:25:58,880 --> 00:26:00,640
definitely some things that

723
00:26:00,640 --> 00:26:03,039
that could be added to it so i just want

724
00:26:03,039 --> 00:26:03,919
to go through

725
00:26:03,919 --> 00:26:06,400
a few things that we could add to the

726
00:26:06,400 --> 00:26:07,919
project going forward

727
00:26:07,919 --> 00:26:09,840
and just in case anybody's seen this

728
00:26:09,840 --> 00:26:11,120
talk and is

729
00:26:11,120 --> 00:26:13,760
interested in contributing um i just

730
00:26:13,760 --> 00:26:15,120
wanted to share this part

731
00:26:15,120 --> 00:26:17,039
because maybe you'd find it interesting

732
00:26:17,039 --> 00:26:19,760
and want to add

733
00:26:20,159 --> 00:26:22,240
so the first thing that came to mind was

734
00:26:22,240 --> 00:26:23,360
the compute engine

735
00:26:23,360 --> 00:26:25,200
so when you have compute engine

736
00:26:25,200 --> 00:26:26,720
instances running

737
00:26:26,720 --> 00:26:29,600
um you're going to want to allow in most

738
00:26:29,600 --> 00:26:31,279
cases you're going to want to allow your

739
00:26:31,279 --> 00:26:32,240
users to

740
00:26:32,240 --> 00:26:35,600
ssh into them and have shell access to

741
00:26:35,600 --> 00:26:39,200
be able to do what they need to do

742
00:26:39,200 --> 00:26:42,480
you know in a lot of cases there's going

743
00:26:42,480 --> 00:26:44,240
to be service accounts associated to

744
00:26:44,240 --> 00:26:46,000
these instances

745
00:26:46,000 --> 00:26:49,760
and so even if your user doesn't have

746
00:26:49,760 --> 00:26:51,600
the permission to access a service

747
00:26:51,600 --> 00:26:52,000
account

748
00:26:52,000 --> 00:26:54,159
directly this is a way that they could

749
00:26:54,159 --> 00:26:55,600
actually get into

750
00:26:55,600 --> 00:26:57,679
an instance and use their shell access

751
00:26:57,679 --> 00:26:59,039
to make api calls

752
00:26:59,039 --> 00:27:01,440
as that service account so this is

753
00:27:01,440 --> 00:27:03,840
another path for privilege escalation

754
00:27:03,840 --> 00:27:05,600
that is not currently handled in our

755
00:27:05,600 --> 00:27:07,840
solution

756
00:27:09,200 --> 00:27:11,440
another one that's interesting are

757
00:27:11,440 --> 00:27:13,440
within cloud functions

758
00:27:13,440 --> 00:27:14,720
what i'm showing here is another

759
00:27:14,720 --> 00:27:16,640
screenshot from the console

760
00:27:16,640 --> 00:27:18,799
and this is a cloud functions developer

761
00:27:18,799 --> 00:27:20,000
role it's only

762
00:27:20,000 --> 00:27:23,120
got 16 assigned permissions but the idea

763
00:27:23,120 --> 00:27:26,080
of it is to allow someone to deploy and

764
00:27:26,080 --> 00:27:26,640
update

765
00:27:26,640 --> 00:27:28,880
code for a cloud function for anyone

766
00:27:28,880 --> 00:27:31,600
who's not aware a cloud function is

767
00:27:31,600 --> 00:27:34,720
similar to like a lambda function in aws

768
00:27:34,720 --> 00:27:36,480
where you're just deploying code and

769
00:27:36,480 --> 00:27:39,120
letting the cloud platform run it for

770
00:27:39,120 --> 00:27:41,919
you so you don't have to maintain

771
00:27:41,919 --> 00:27:43,600
a compute instance or something like

772
00:27:43,600 --> 00:27:45,760
that

773
00:27:45,840 --> 00:27:48,559
so in this case of gcp cloud functions

774
00:27:48,559 --> 00:27:49,520
by default

775
00:27:49,520 --> 00:27:51,840
use the app engine default service

776
00:27:51,840 --> 00:27:52,960
account

777
00:27:52,960 --> 00:27:55,120
and that app engine default service

778
00:27:55,120 --> 00:27:56,880
account is in the second screenshot on

779
00:27:56,880 --> 00:27:57,919
this slide

780
00:27:57,919 --> 00:27:59,520
and that shows that it's using the

781
00:27:59,520 --> 00:28:01,120
editor role which is

782
00:28:01,120 --> 00:28:03,440
again that basic role that has over 3

783
00:28:03,440 --> 00:28:06,080
100 permissions associated with it

784
00:28:06,080 --> 00:28:08,880
so the point here is that you could have

785
00:28:08,880 --> 00:28:09,520
a user

786
00:28:09,520 --> 00:28:12,640
that has very granular permissions but

787
00:28:12,640 --> 00:28:14,159
needs to be able to update cloud

788
00:28:14,159 --> 00:28:16,000
functions and they could

789
00:28:16,000 --> 00:28:18,480
actually deploy code that would allow

790
00:28:18,480 --> 00:28:20,240
them to escalate their privileges and

791
00:28:20,240 --> 00:28:22,080
make changes in the environment that may

792
00:28:22,080 --> 00:28:22,640
have been

793
00:28:22,640 --> 00:28:25,360
unintended because that app engine

794
00:28:25,360 --> 00:28:26,480
service account

795
00:28:26,480 --> 00:28:28,840
has way more permissions associated with

796
00:28:28,840 --> 00:28:31,120
it

797
00:28:31,120 --> 00:28:34,640
then lastly organization policies

798
00:28:34,640 --> 00:28:37,360
these are separate from identity and

799
00:28:37,360 --> 00:28:39,440
access management in gcp

800
00:28:39,440 --> 00:28:41,440
but they do have an effect on what

801
00:28:41,440 --> 00:28:44,480
people can do in the environment so this

802
00:28:44,480 --> 00:28:45,919
is something i think we need to take

803
00:28:45,919 --> 00:28:47,039
into account

804
00:28:47,039 --> 00:28:49,679
and despite the name policies

805
00:28:49,679 --> 00:28:51,120
organization policies

806
00:28:51,120 --> 00:28:53,039
don't have to be associated at the

807
00:28:53,039 --> 00:28:54,559
organization level

808
00:28:54,559 --> 00:28:57,760
they can be associated to projects

809
00:28:57,760 --> 00:29:01,039
so here i'm showing a screenshot for

810
00:29:01,039 --> 00:29:03,919
a project a test project that i have and

811
00:29:03,919 --> 00:29:05,840
there are some service account related

812
00:29:05,840 --> 00:29:07,760
constraints

813
00:29:07,760 --> 00:29:09,919
and these constraints if they're enabled

814
00:29:09,919 --> 00:29:11,919
can prevent people from creating their

815
00:29:11,919 --> 00:29:13,440
own service accounts

816
00:29:13,440 --> 00:29:16,320
or creating keys for service accounts

817
00:29:16,320 --> 00:29:17,919
that would allow them to impersonate

818
00:29:17,919 --> 00:29:18,880
them

819
00:29:18,880 --> 00:29:20,559
so we should really take that into

820
00:29:20,559 --> 00:29:22,399
account as a mitigation

821
00:29:22,399 --> 00:29:24,799
if these policies are in place because

822
00:29:24,799 --> 00:29:25,760
we don't see that

823
00:29:25,760 --> 00:29:28,960
at all in the i am policies if these are

824
00:29:28,960 --> 00:29:29,840
turned on

825
00:29:29,840 --> 00:29:31,840
so it's just another service that we'll

826
00:29:31,840 --> 00:29:32,880
have to check

827
00:29:32,880 --> 00:29:34,799
and take into account if we want to

828
00:29:34,799 --> 00:29:36,880
present some really accurate

829
00:29:36,880 --> 00:29:41,840
risk information in our reporting

830
00:29:42,159 --> 00:29:43,840
so with that i just want to say thank

831
00:29:43,840 --> 00:29:45,919
you for your time

832
00:29:45,919 --> 00:29:48,480
if you found this helpful or interesting

833
00:29:48,480 --> 00:29:49,840
please go visit

834
00:29:49,840 --> 00:29:52,399
our netskope threat labs blog we're

835
00:29:52,399 --> 00:29:54,480
always posting things there as we find

836
00:29:54,480 --> 00:29:54,960
them

837
00:29:54,960 --> 00:29:56,799
and things that we think the community

838
00:29:56,799 --> 00:29:58,399
should know about

839
00:29:58,399 --> 00:30:00,559
uh i have my twitter handle here my

840
00:30:00,559 --> 00:30:02,559
linkedin if you'd like to

841
00:30:02,559 --> 00:30:04,559
to reach out and talk about this i'm

842
00:30:04,559 --> 00:30:06,720
more than happy to do that

843
00:30:06,720 --> 00:30:10,080
and then also here's our open source url

844
00:30:10,080 --> 00:30:12,320
for the project that we're releasing

845
00:30:12,320 --> 00:30:13,279
along with the talk

846
00:30:13,279 --> 00:30:16,320
it's called ias permission mining

847
00:30:16,320 --> 00:30:19,360
and under it you'll see a gcp folder for

848
00:30:19,360 --> 00:30:21,679
uh the code related to this particular

849
00:30:21,679 --> 00:30:22,960
talk

850
00:30:22,960 --> 00:30:25,600
so thank you again and i hope to hear

851
00:30:25,600 --> 00:30:26,000
from

852
00:30:26,000 --> 00:30:27,120
people who are interested in

853
00:30:27,120 --> 00:30:34,158
participating thank you

