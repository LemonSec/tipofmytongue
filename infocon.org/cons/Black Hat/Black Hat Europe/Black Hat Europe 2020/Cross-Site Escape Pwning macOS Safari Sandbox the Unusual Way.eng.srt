1
00:00:01,130 --> 00:00:13,678
[Music]

2
00:00:13,679 --> 00:00:14,639
hello everyone

3
00:00:14,639 --> 00:00:17,359
my name is joju welcome to my talk it's

4
00:00:17,359 --> 00:00:19,119
called curlsite escape

5
00:00:19,119 --> 00:00:21,039
panimeko has the first sandbox the

6
00:00:21,039 --> 00:00:22,720
unusual way

7
00:00:22,720 --> 00:00:24,400
now first thing first please allow me to

8
00:00:24,400 --> 00:00:25,760
introduce myself

9
00:00:25,760 --> 00:00:27,199
this is my twitter handle called

10
00:00:27,199 --> 00:00:29,599
colorist i work for end security like

11
00:00:29,599 --> 00:00:30,640
the labs now

12
00:00:30,640 --> 00:00:32,159
mostly on product security and

13
00:00:32,159 --> 00:00:34,160
vulnerability research

14
00:00:34,160 --> 00:00:36,719
i've spoken at several conferences i

15
00:00:36,719 --> 00:00:37,760
have won

16
00:00:37,760 --> 00:00:40,559
iphone category at 10th cup 2020 and it

17
00:00:40,559 --> 00:00:42,480
was the first ever public successful

18
00:00:42,480 --> 00:00:43,520
hours challenge

19
00:00:43,520 --> 00:00:46,000
in such competitions after pac has been

20
00:00:46,000 --> 00:00:47,840
introduced

21
00:00:47,840 --> 00:00:51,039
this talk mainly consists of three parts

22
00:00:51,039 --> 00:00:53,199
since it's only 25 minutes long i have

23
00:00:53,199 --> 00:00:55,120
to do things so quickly

24
00:00:55,120 --> 00:00:57,199
most of the talk is about case studies

25
00:00:57,199 --> 00:00:58,239
but hopefully

26
00:00:58,239 --> 00:00:59,920
you can gain more insights on these

27
00:00:59,920 --> 00:01:02,320
special attack surfaces

28
00:01:02,320 --> 00:01:05,358
so let's get it started

29
00:01:06,000 --> 00:01:07,680
here is the definition of cross-site

30
00:01:07,680 --> 00:01:10,880
scripting from wikipedia

31
00:01:10,880 --> 00:01:12,640
so are we going to talk about web

32
00:01:12,640 --> 00:01:14,640
security today

33
00:01:14,640 --> 00:01:17,680
absolutely no

34
00:01:17,680 --> 00:01:19,119
i borrowed the name from crosstalk

35
00:01:19,119 --> 00:01:20,799
scripting because they have things in

36
00:01:20,799 --> 00:01:22,400
common

37
00:01:22,400 --> 00:01:25,360
cursor scripting and my attack both want

38
00:01:25,360 --> 00:01:25,680
to

39
00:01:25,680 --> 00:01:27,920
inject javascript to a different context

40
00:01:27,920 --> 00:01:30,240
that is not supposed to be controllable

41
00:01:30,240 --> 00:01:31,840
while crosstalk scripting is targeting

42
00:01:31,840 --> 00:01:34,400
web applications our target is to run

43
00:01:34,400 --> 00:01:35,280
javascript

44
00:01:35,280 --> 00:01:38,240
in a more privileged local process

45
00:01:38,240 --> 00:01:39,840
cross-scripting nuisance

46
00:01:39,840 --> 00:01:44,240
uses various http parameters

47
00:01:44,240 --> 00:01:46,560
while ours uses inter-process

48
00:01:46,560 --> 00:01:48,159
communication

49
00:01:48,159 --> 00:01:50,240
the goal for cross-site scripting is to

50
00:01:50,240 --> 00:01:52,799
bypass same origin policy

51
00:01:52,799 --> 00:01:54,720
where our attack wants to gain native

52
00:01:54,720 --> 00:01:56,000
code execution

53
00:01:56,000 --> 00:02:00,079
and break out of safari sandbox

54
00:02:00,960 --> 00:02:04,159
apart from the web browser safari there

55
00:02:04,159 --> 00:02:06,479
are actually more applications

56
00:02:06,479 --> 00:02:08,560
that supports web content rendering with

57
00:02:08,560 --> 00:02:11,119
webview

58
00:02:11,280 --> 00:02:13,680
there are two kinds of webviews on mac

59
00:02:13,680 --> 00:02:14,720
os

60
00:02:14,720 --> 00:02:18,160
they're both based on webkit wkwebview

61
00:02:18,160 --> 00:02:21,120
is the successor of legacy webview

62
00:02:21,120 --> 00:02:24,160
it has isolated renderer process sandbox

63
00:02:24,160 --> 00:02:25,920
and cheat support

64
00:02:25,920 --> 00:02:28,239
the legacy web wheel is duplicated it

65
00:02:28,239 --> 00:02:30,480
does not support multi-process

66
00:02:30,480 --> 00:02:34,560
no render sandbox no jit

67
00:02:35,040 --> 00:02:37,920
lexi webviews still exist they often

68
00:02:37,920 --> 00:02:38,400
expose

69
00:02:38,400 --> 00:02:41,120
extra functionalities to javascript and

70
00:02:41,120 --> 00:02:43,200
they don't have sandbox

71
00:02:43,200 --> 00:02:46,480
if we manage to inject our js payload to

72
00:02:46,480 --> 00:02:47,360
den

73
00:02:47,360 --> 00:02:49,440
would it be possible to escape browser

74
00:02:49,440 --> 00:02:51,040
sandbox

75
00:02:51,040 --> 00:02:55,040
so let's see this case studies first one

76
00:02:55,040 --> 00:02:57,120
exploiting a ton of checktown of use

77
00:02:57,120 --> 00:03:00,400
with process escape

78
00:03:01,360 --> 00:03:03,440
there was a sandbox bug in core

79
00:03:03,440 --> 00:03:04,720
foundation before

80
00:03:04,720 --> 00:03:08,319
mac os mojave to reproduce it

81
00:03:08,319 --> 00:03:11,120
first turn off rootless so you can debug

82
00:03:11,120 --> 00:03:12,800
safari renderer

83
00:03:12,800 --> 00:03:16,159
attach ldb to any rendering process

84
00:03:16,159 --> 00:03:18,879
and use this command to read the p list

85
00:03:18,879 --> 00:03:20,400
from a location

86
00:03:20,400 --> 00:03:23,120
where it is not accessible by the

87
00:03:23,120 --> 00:03:25,760
sandbox

88
00:03:25,920 --> 00:03:28,959
they act like there is no sandbox at all

89
00:03:28,959 --> 00:03:30,480
and you can actually read

90
00:03:30,480 --> 00:03:34,480
the value from calculator.app

91
00:03:34,480 --> 00:03:36,798
why

92
00:03:37,760 --> 00:03:39,680
the root cause of this bug is by

93
00:03:39,680 --> 00:03:41,120
coincidence

94
00:03:41,120 --> 00:03:43,840
cf preferences api families are based on

95
00:03:43,840 --> 00:03:45,200
xpc

96
00:03:45,200 --> 00:03:48,480
there is a demo daemon process cf

97
00:03:48,480 --> 00:03:49,440
preference

98
00:03:49,440 --> 00:03:52,480
d who is responsible for data

99
00:03:52,480 --> 00:03:56,080
persistence it does have sandbox check

100
00:03:56,080 --> 00:04:00,000
to read and write but implementation is

101
00:04:00,000 --> 00:04:03,360
bugging so look at this code it only

102
00:04:03,360 --> 00:04:03,840
costs

103
00:04:03,840 --> 00:04:07,040
sandbox check once per process

104
00:04:07,040 --> 00:04:12,159
then this result is catched forever

105
00:04:12,159 --> 00:04:15,360
if a process happens to assess

106
00:04:15,360 --> 00:04:18,238
preferences sanderbox before sanderbox

107
00:04:18,238 --> 00:04:19,759
lockdown

108
00:04:19,759 --> 00:04:23,520
cf preference d still syncs its own

109
00:04:23,520 --> 00:04:27,199
sandbox and allowed all the read and

110
00:04:27,199 --> 00:04:29,840
writes

111
00:04:30,639 --> 00:04:32,960
unfortunately there is a time window

112
00:04:32,960 --> 00:04:34,080
that web content

113
00:04:34,080 --> 00:04:36,720
is not sandbox at all it should have

114
00:04:36,720 --> 00:04:37,120
been

115
00:04:37,120 --> 00:04:39,600
safe because webkit won't load any

116
00:04:39,600 --> 00:04:42,400
untrusted content during this time

117
00:04:42,400 --> 00:04:45,040
but just at this stage time there is a

118
00:04:45,040 --> 00:04:47,280
framework called app kit

119
00:04:47,280 --> 00:04:50,160
that happens to assess preferences in

120
00:04:50,160 --> 00:04:51,919
this time window

121
00:04:51,919 --> 00:04:55,280
so the renderer is marked on sandbox

122
00:04:55,280 --> 00:04:58,799
by cf preference d

123
00:05:00,400 --> 00:05:03,840
the timeline is like this first part

124
00:05:03,840 --> 00:05:06,880
initialization web content is a normal

125
00:05:06,880 --> 00:05:08,000
process

126
00:05:08,000 --> 00:05:11,840
and it reads preferences

127
00:05:12,400 --> 00:05:15,280
then cf preference d check the sandbox

128
00:05:15,280 --> 00:05:16,400
states

129
00:05:16,400 --> 00:05:20,479
and mark it as not sam the box

130
00:05:20,479 --> 00:05:22,720
now we enter the sandbox lockdown with

131
00:05:22,720 --> 00:05:26,720
sandbox init with parameters

132
00:05:27,840 --> 00:05:30,240
now try to read and write preferences

133
00:05:30,240 --> 00:05:32,560
again

134
00:05:32,720 --> 00:05:38,000
no problem that's a big problem

135
00:05:38,000 --> 00:05:42,960
okay now where is our cross-site script

136
00:05:44,160 --> 00:05:46,720
let's meet dashboard a legacy mac os

137
00:05:46,720 --> 00:05:48,240
feature that has been removed on

138
00:05:48,240 --> 00:05:49,680
catalina

139
00:05:49,680 --> 00:05:52,240
it was an application for apple smac os

140
00:05:52,240 --> 00:05:53,360
operating systems

141
00:05:53,360 --> 00:05:55,840
uses a secondary desktop for hosting

142
00:05:55,840 --> 00:05:57,199
many applications

143
00:05:57,199 --> 00:06:00,400
known as widgets

144
00:06:00,639 --> 00:06:02,479
widgets are written in html and

145
00:06:02,479 --> 00:06:04,479
javascript and they are presented in the

146
00:06:04,479 --> 00:06:04,800
web

147
00:06:04,800 --> 00:06:07,759
views of dashboard yeah that's where

148
00:06:07,759 --> 00:06:08,639
we're gonna

149
00:06:08,639 --> 00:06:11,680
inject malicious script too everywhere

150
00:06:11,680 --> 00:06:13,840
just has a manifest file in playlist

151
00:06:13,840 --> 00:06:14,880
format

152
00:06:14,880 --> 00:06:18,000
here are some of its keys main html is

153
00:06:18,000 --> 00:06:19,440
the file name of

154
00:06:19,440 --> 00:06:22,720
main user interface if this allowed

155
00:06:22,720 --> 00:06:23,520
network

156
00:06:23,520 --> 00:06:26,319
access is set as true the widget can

157
00:06:26,319 --> 00:06:27,919
send http requests

158
00:06:27,919 --> 00:06:31,600
in jacks there is a key named allow

159
00:06:31,600 --> 00:06:32,880
system

160
00:06:32,880 --> 00:06:35,680
if enabled the javascript of the widget

161
00:06:35,680 --> 00:06:38,160
can call dashboard.system function

162
00:06:38,160 --> 00:06:41,440
to execute shell commands

163
00:06:41,440 --> 00:06:45,280
that's pretty scary

164
00:06:45,520 --> 00:06:47,840
the web content sandbox allows reading

165
00:06:47,840 --> 00:06:50,240
files to a temporary directory

166
00:06:50,240 --> 00:06:52,639
that's where we're gonna release the

167
00:06:52,639 --> 00:06:54,080
html and javascript

168
00:06:54,080 --> 00:06:58,080
payloads we can we can extract

169
00:06:58,080 --> 00:07:01,520
a widget bundle here

170
00:07:01,520 --> 00:07:04,160
now remember we have to write two p list

171
00:07:04,160 --> 00:07:04,960
files

172
00:07:04,960 --> 00:07:08,080
one is for our all we just manifest

173
00:07:08,080 --> 00:07:10,800
another one is to install our widget

174
00:07:10,800 --> 00:07:11,919
bundle

175
00:07:11,919 --> 00:07:14,800
to com.apple.dashboard where we can

176
00:07:14,800 --> 00:07:15,599
supply the

177
00:07:15,599 --> 00:07:18,400
absolute path to our bundle in our

178
00:07:18,400 --> 00:07:21,198
temporary path

179
00:07:22,400 --> 00:07:25,360
that's it cross-site script to dashboard

180
00:07:25,360 --> 00:07:26,560
webview

181
00:07:26,560 --> 00:07:31,759
through an ipc bug

182
00:07:31,759 --> 00:07:34,639
now we have inject injected scripts to

183
00:07:34,639 --> 00:07:35,680
dashboard

184
00:07:35,680 --> 00:07:38,400
there is no need to re-exploit the

185
00:07:38,400 --> 00:07:40,240
renderer twice

186
00:07:40,240 --> 00:07:43,440
remember remember the allow system key

187
00:07:43,440 --> 00:07:45,759
just enable it and window.dashboard

188
00:07:45,759 --> 00:07:48,160
assistant is available for us to execute

189
00:07:48,160 --> 00:07:50,960
shell commands no sandboxes time of

190
00:07:50,960 --> 00:07:53,280
course

191
00:07:55,120 --> 00:07:58,080
but there are still two problems what if

192
00:07:58,080 --> 00:07:59,919
dashboard is disabled

193
00:07:59,919 --> 00:08:01,680
and how do we switch to dashboard

194
00:08:01,680 --> 00:08:05,520
desktop to activate the script

195
00:08:06,319 --> 00:08:08,479
further investigation shows that web

196
00:08:08,479 --> 00:08:11,599
content is allowed to talk to

197
00:08:11,599 --> 00:08:15,039
server doc has been attracted

198
00:08:15,039 --> 00:08:17,520
at least twice at pong21 but i guess my

199
00:08:17,520 --> 00:08:18,319
exploit

200
00:08:18,319 --> 00:08:20,720
is more interesting now look at this

201
00:08:20,720 --> 00:08:26,000
dock related apis

202
00:08:26,000 --> 00:08:29,280
there is a preferences pane

203
00:08:29,280 --> 00:08:32,559
for turning dashboard on and off to my

204
00:08:32,559 --> 00:08:34,080
surprise

205
00:08:34,080 --> 00:08:37,360
it's so if you want to use dashboard you

206
00:08:37,360 --> 00:08:37,919
have to

207
00:08:37,919 --> 00:08:41,039
set it to a space or

208
00:08:41,039 --> 00:08:44,240
as overlay but to my surprise it's

209
00:08:44,240 --> 00:08:45,920
possible to change this setting

210
00:08:45,920 --> 00:08:50,000
through the dark mig

211
00:08:50,800 --> 00:08:54,399
core desk core dock set preferences

212
00:08:54,399 --> 00:08:57,279
function can enable it and chrome dock

213
00:08:57,279 --> 00:08:58,640
send notification

214
00:08:58,640 --> 00:09:01,040
can switch to the secondary desktop for

215
00:09:01,040 --> 00:09:02,320
widgets

216
00:09:02,320 --> 00:09:06,320
now all we need is list two line of code

217
00:09:06,320 --> 00:09:09,600
two lines of code

218
00:09:09,600 --> 00:09:11,519
now putting all things together here's

219
00:09:11,519 --> 00:09:13,839
our demo

220
00:09:13,839 --> 00:09:18,000
combining our exploit at pontoon 2017

221
00:09:18,000 --> 00:09:20,959
exploiting the web sql to gain initial

222
00:09:20,959 --> 00:09:22,240
remote code execution

223
00:09:22,240 --> 00:09:23,920
and then use this kind of chat handle

224
00:09:23,920 --> 00:09:27,519
use to finally escape

225
00:09:30,320 --> 00:09:32,880
here comes the third case study how we

226
00:09:32,880 --> 00:09:34,839
will exit cross-site scripting

227
00:09:34,839 --> 00:09:37,839
again

228
00:09:38,160 --> 00:09:42,519
this is basically a copycat of cve

229
00:09:42,519 --> 00:09:44,240
2017-2361

230
00:09:44,240 --> 00:09:46,080
project xero's ex-member lockheed hart

231
00:09:46,080 --> 00:09:47,760
found his client's side crosstalk script

232
00:09:47,760 --> 00:09:49,519
they can jump from safari to a local

233
00:09:49,519 --> 00:09:50,480
application

234
00:09:50,480 --> 00:09:52,399
then run calculator without any memory

235
00:09:52,399 --> 00:09:54,080
corruption this is so

236
00:09:54,080 --> 00:09:58,399
impressive the truth about security is

237
00:09:58,399 --> 00:09:58,880
that

238
00:09:58,880 --> 00:10:01,680
developers never learn from box but we

239
00:10:01,680 --> 00:10:04,560
researchers do

240
00:10:04,560 --> 00:10:07,040
his bug exploited help viewer which is

241
00:10:07,040 --> 00:10:08,480
trusted by safari

242
00:10:08,480 --> 00:10:10,800
safari has a list of hard-coded trusted

243
00:10:10,800 --> 00:10:12,399
url schemes

244
00:10:12,399 --> 00:10:14,480
and redirection to these schemes won't

245
00:10:14,480 --> 00:10:16,480
trigger confirmation

246
00:10:16,480 --> 00:10:18,640
these apps are built in system apps and

247
00:10:18,640 --> 00:10:21,200
some apple internal tools

248
00:10:21,200 --> 00:10:23,519
they must have digital signature by

249
00:10:23,519 --> 00:10:25,839
apple

250
00:10:27,200 --> 00:10:30,240
the one explained by loki heart is help

251
00:10:30,240 --> 00:10:34,720
but what about this x apple help basic

252
00:10:34,800 --> 00:10:37,360
it's another legacy url skin accepted by

253
00:10:37,360 --> 00:10:38,480
hellviewer

254
00:10:38,480 --> 00:10:42,320
it replaces the urls the uil skin x

255
00:10:42,320 --> 00:10:46,640
apple help basic to https

256
00:10:46,640 --> 00:10:49,680
and open the url in a web view only

257
00:10:49,680 --> 00:10:53,199
apple.com is accepted

258
00:10:54,240 --> 00:10:56,720
and in this process in this jump there's

259
00:10:56,720 --> 00:10:58,399
no confirmation at all

260
00:10:58,399 --> 00:11:01,440
this webview is not sandbox and it's

261
00:11:01,440 --> 00:11:02,880
possible to fan

262
00:11:02,880 --> 00:11:05,120
to find in crosstalk script or open

263
00:11:05,120 --> 00:11:07,839
redirection on apple.com to make it

264
00:11:07,839 --> 00:11:10,959
loads arbitrary scripts

265
00:11:10,959 --> 00:11:12,880
we haven't got render remote code

266
00:11:12,880 --> 00:11:14,320
execution yet

267
00:11:14,320 --> 00:11:17,279
but we have already bypassed sandbox

268
00:11:17,279 --> 00:11:19,360
help viewer webview has no cheat

269
00:11:19,360 --> 00:11:22,399
nor sandbox which means we have we need

270
00:11:22,399 --> 00:11:25,920
one more except one more dom bug exploit

271
00:11:25,920 --> 00:11:28,880
we can we can execute arbitrary native

272
00:11:28,880 --> 00:11:29,279
code

273
00:11:29,279 --> 00:11:32,959
outside sandbox which is a food chain

274
00:11:32,959 --> 00:11:35,439
exploit

275
00:11:35,600 --> 00:11:38,079
and this webview can open more universal

276
00:11:38,079 --> 00:11:39,279
links which

277
00:11:39,279 --> 00:11:42,800
maybe may open more attack surfaces for

278
00:11:42,800 --> 00:11:43,279
us

279
00:11:43,279 --> 00:11:47,440
for example like this vnc or ssh you can

280
00:11:47,440 --> 00:11:49,600
connect to a remote machine

281
00:11:49,600 --> 00:11:52,240
and here are some real bugs that

282
00:11:52,240 --> 00:11:53,440
reported to this

283
00:11:53,440 --> 00:11:56,079
to the re here are some bug examples for

284
00:11:56,079 --> 00:11:57,839
the vnc client

285
00:11:57,839 --> 00:12:01,360
clients to be attacked by the server but

286
00:12:01,360 --> 00:12:03,839
unfortunately file is not allowed here

287
00:12:03,839 --> 00:12:04,560
because we

288
00:12:04,560 --> 00:12:07,839
are in https domain otherwise we can

289
00:12:07,839 --> 00:12:08,240
just

290
00:12:08,240 --> 00:12:11,399
execute a local application by using

291
00:12:11,399 --> 00:12:13,360
location.replace

292
00:12:13,360 --> 00:12:18,079
and point it to a calculator.app

293
00:12:19,040 --> 00:12:21,440
i have tried another approach to trying

294
00:12:21,440 --> 00:12:24,079
to extract local files

295
00:12:24,079 --> 00:12:27,440
in this this contact webkit supports

296
00:12:27,440 --> 00:12:30,639
url interception using an sui protocol

297
00:12:30,639 --> 00:12:33,600
and i found that this there are three

298
00:12:33,600 --> 00:12:35,200
and sql protocols in hub

299
00:12:35,200 --> 00:12:38,800
viewer this protocol you

300
00:12:38,800 --> 00:12:41,440
with this protocol you can hijack the

301
00:12:41,440 --> 00:12:42,240
url

302
00:12:42,240 --> 00:12:45,680
request and return custom content

303
00:12:45,680 --> 00:12:48,240
and please do not confuse url here with

304
00:12:48,240 --> 00:12:50,480
the universal app link we

305
00:12:50,480 --> 00:12:54,079
jump from it before this is about

306
00:12:54,079 --> 00:12:57,360
resource loading and

307
00:12:57,360 --> 00:13:00,639
here is a an hv help ui protocol

308
00:13:00,639 --> 00:13:03,200
that can that is able to load local

309
00:13:03,200 --> 00:13:04,000
files

310
00:13:04,000 --> 00:13:05,839
and this function actually help url

311
00:13:05,839 --> 00:13:07,200
protocol start loading

312
00:13:07,200 --> 00:13:09,839
it accepts a url parameter and extracts

313
00:13:09,839 --> 00:13:10,720
its path

314
00:13:10,720 --> 00:13:13,360
then use nsdata to read the content from

315
00:13:13,360 --> 00:13:14,880
this path

316
00:13:14,880 --> 00:13:18,720
if we if we use this url help whatever

317
00:13:18,720 --> 00:13:21,120
htc password even results in the

318
00:13:21,120 --> 00:13:23,360
contents of etc password file

319
00:13:23,360 --> 00:13:27,200
in your local system so we need to

320
00:13:27,200 --> 00:13:32,320
jump from https to help

321
00:13:32,320 --> 00:13:35,440
then we can use ejects to read from

322
00:13:35,440 --> 00:13:38,800
local files before catalina we can use

323
00:13:38,800 --> 00:13:42,000
this nfs to mount a remote source

324
00:13:42,000 --> 00:13:45,760
and for example help and this hostname

325
00:13:45,760 --> 00:13:47,040
does not matter

326
00:13:47,040 --> 00:13:50,639
and you can use this net this special

327
00:13:50,639 --> 00:13:53,040
this special path this mount point

328
00:13:53,040 --> 00:13:54,240
called net

329
00:13:54,240 --> 00:13:57,120
and followed by the host name of the

330
00:13:57,120 --> 00:13:58,639
remote machine

331
00:13:58,639 --> 00:14:01,240
and then the path name we can use this

332
00:14:01,240 --> 00:14:03,680
reader.html from a remote machine

333
00:14:03,680 --> 00:14:06,800
to read arbitrary local paths but

334
00:14:06,800 --> 00:14:10,399
unfortunately on catalina an fs

335
00:14:10,399 --> 00:14:13,920
auto mountain was removed so i use

336
00:14:13,920 --> 00:14:14,839
another

337
00:14:14,839 --> 00:14:18,240
approach i try to use finder to mount

338
00:14:18,240 --> 00:14:22,320
a remote volume using samba

339
00:14:22,320 --> 00:14:25,199
i have to use this samba url and i

340
00:14:25,199 --> 00:14:26,560
directly pass my

341
00:14:26,560 --> 00:14:30,000
username and password then if

342
00:14:30,000 --> 00:14:33,199
i sus if i succeed if i succeeded

343
00:14:33,199 --> 00:14:36,959
this reader.html will be mounted to this

344
00:14:36,959 --> 00:14:40,600
path name volumes slash file stage slash

345
00:14:40,600 --> 00:14:42,160
reader.html

346
00:14:42,160 --> 00:14:44,399
then i can make a redirection to this

347
00:14:44,399 --> 00:14:45,760
url

348
00:14:45,760 --> 00:14:48,560
to load reader.html and finally use this

349
00:14:48,560 --> 00:14:50,639
reader.html to read from

350
00:14:50,639 --> 00:14:53,839
local files but this approach failed

351
00:14:53,839 --> 00:14:56,720
because it as it actually asks for

352
00:14:56,720 --> 00:14:57,600
confirmation

353
00:14:57,600 --> 00:15:00,639
in finder before the samba

354
00:15:00,639 --> 00:15:04,560
volume was mounted

355
00:15:04,800 --> 00:15:07,360
another thing in this review is that i

356
00:15:07,360 --> 00:15:09,279
found that it's able to call

357
00:15:09,279 --> 00:15:12,639
limited objective c message

358
00:15:12,639 --> 00:15:15,519
there is an hv webview delegate object

359
00:15:15,519 --> 00:15:16,480
assessing both

360
00:15:16,480 --> 00:15:20,320
while window.help viewer but

361
00:15:20,320 --> 00:15:24,320
there is no interesting interface

362
00:15:25,040 --> 00:15:27,680
here's some drama for this bug i found

363
00:15:27,680 --> 00:15:28,480
this

364
00:15:28,480 --> 00:15:32,160
i actually had an exploit prepared for

365
00:15:32,160 --> 00:15:33,360
10th cup

366
00:15:33,360 --> 00:15:36,560
but mac os 10.15 developer beta

367
00:15:36,560 --> 00:15:39,199
killed my sandbox exploit like a month

368
00:15:39,199 --> 00:15:41,279
before so i have to find another

369
00:15:41,279 --> 00:15:44,639
replacement and there's no there was no

370
00:15:44,639 --> 00:15:47,120
enough time for me to do so i

371
00:15:47,120 --> 00:15:49,199
accidentally found this help we were

372
00:15:49,199 --> 00:15:50,560
schemed about

373
00:15:50,560 --> 00:15:52,720
just one week before 10th cup and i

374
00:15:52,720 --> 00:15:54,079
rushed to find another croissant

375
00:15:54,079 --> 00:15:55,199
scripting

376
00:15:55,199 --> 00:16:00,240
on apple.com one day just one day later

377
00:16:00,240 --> 00:16:02,320
at this point it's already a sandbox

378
00:16:02,320 --> 00:16:04,320
escape but i still need

379
00:16:04,320 --> 00:16:06,480
one more dom exploit to achieve native

380
00:16:06,480 --> 00:16:07,600
code execution

381
00:16:07,600 --> 00:16:10,800
but i didn't make it so i got a partial

382
00:16:10,800 --> 00:16:11,199
win

383
00:16:11,199 --> 00:16:14,480
and but other partic participator of

384
00:16:14,480 --> 00:16:15,680
this competition

385
00:16:15,680 --> 00:16:17,680
didn't want to share the awards so they

386
00:16:17,680 --> 00:16:18,720
all gave up

387
00:16:18,720 --> 00:16:21,600
i was the only one who want this

388
00:16:21,600 --> 00:16:23,839
category

389
00:16:25,600 --> 00:16:28,639
but that bug was actually no fun so

390
00:16:28,639 --> 00:16:31,759
here are some really real masterpiece i

391
00:16:31,759 --> 00:16:33,759
call it masterpiece

392
00:16:33,759 --> 00:16:37,600
let's look up the shell in dictionary

393
00:16:37,600 --> 00:16:42,399
this is a story for cve 2020-979

394
00:16:42,399 --> 00:16:46,320
we got trust issue so mac os and ios

395
00:16:46,320 --> 00:16:48,880
regularly pull ota updates from this

396
00:16:48,880 --> 00:16:52,639
website mesu.ipro.com and store them

397
00:16:52,639 --> 00:16:55,920
to system library assets typically

398
00:16:55,920 --> 00:16:58,720
these assets are not executable there is

399
00:16:58,720 --> 00:17:00,240
for example there are some

400
00:17:00,240 --> 00:17:02,399
there are some dictionary fonts and

401
00:17:02,399 --> 00:17:03,759
mobile accessories

402
00:17:03,759 --> 00:17:07,039
etc it's implemented in mobile assets

403
00:17:07,039 --> 00:17:12,319
framework and a daemon called mobile ssd

404
00:17:12,319 --> 00:17:14,799
it provides some private apis for you to

405
00:17:14,799 --> 00:17:16,079
opt to query and

406
00:17:16,079 --> 00:17:20,000
update the assets for in this particular

407
00:17:20,000 --> 00:17:23,039
class as asset you can update the

408
00:17:23,039 --> 00:17:24,000
properties

409
00:17:24,000 --> 00:17:26,079
of an asset and trigger the download

410
00:17:26,079 --> 00:17:28,480
action

411
00:17:28,960 --> 00:17:32,400
the attributes of this asset class

412
00:17:32,400 --> 00:17:35,120
is an unnext dictionary that includes

413
00:17:35,120 --> 00:17:36,880
following keys

414
00:17:36,880 --> 00:17:38,960
you can either use a base url and a

415
00:17:38,960 --> 00:17:40,720
relative path to con

416
00:17:40,720 --> 00:17:44,400
to compose of an absolute url

417
00:17:44,400 --> 00:17:48,400
or just use a full remote url to set

418
00:17:48,400 --> 00:17:52,559
the remote location of an asset

419
00:17:52,559 --> 00:17:55,080
the host doesn't have to be

420
00:17:55,080 --> 00:17:56,559
memso.apple.com

421
00:17:56,559 --> 00:17:58,799
actually it can be anything there is no

422
00:17:58,799 --> 00:18:00,960
checking at all

423
00:18:00,960 --> 00:18:05,440
so we can use this trust bug to download

424
00:18:05,440 --> 00:18:09,200
anything from anywhere you like

425
00:18:09,280 --> 00:18:12,960
and you have to supply the

426
00:18:12,960 --> 00:18:15,840
corresponding download size and archive

427
00:18:15,840 --> 00:18:17,360
size and measurement

428
00:18:17,360 --> 00:18:20,559
to the resource otherwise it will not

429
00:18:20,559 --> 00:18:21,440
pass the check

430
00:18:21,440 --> 00:18:23,200
and the integrated check and the

431
00:18:23,200 --> 00:18:25,360
download will fail

432
00:18:25,360 --> 00:18:28,960
now we try to exploit this bug

433
00:18:28,960 --> 00:18:33,200
firstly we will use this asset query

434
00:18:33,200 --> 00:18:35,919
to to find the asset that we want to

435
00:18:35,919 --> 00:18:37,360
replace

436
00:18:37,360 --> 00:18:40,400
and we attach its attributes to point to

437
00:18:40,400 --> 00:18:42,320
our remote resource

438
00:18:42,320 --> 00:18:44,880
and then we invoke this aes asset begin

439
00:18:44,880 --> 00:18:46,720
download with options method

440
00:18:46,720 --> 00:18:49,280
to actually download it and replace the

441
00:18:49,280 --> 00:18:49,840
local

442
00:18:49,840 --> 00:18:53,760
one now this

443
00:18:53,760 --> 00:18:56,320
this service is accessible by web

444
00:18:56,320 --> 00:18:57,840
content sandbox

445
00:18:57,840 --> 00:19:00,480
to update some certain resource the

446
00:19:00,480 --> 00:19:01,360
caller must

447
00:19:01,360 --> 00:19:03,679
sometimes needs to hold an entitlement

448
00:19:03,679 --> 00:19:06,880
called com.private.accessible

449
00:19:06,880 --> 00:19:10,480
asset types which is a an array of all

450
00:19:10,480 --> 00:19:11,440
the assets type

451
00:19:11,440 --> 00:19:13,679
string but fortunately some of the

452
00:19:13,679 --> 00:19:14,720
resources don't

453
00:19:14,720 --> 00:19:18,640
require this entitlement for example

454
00:19:20,200 --> 00:19:22,000
com.apple.mobileasset.dictionaryservices.dictionaryos10

455
00:19:22,000 --> 00:19:25,120
it's hardcoded in this function

456
00:19:25,120 --> 00:19:26,880
so in this way we can download from

457
00:19:26,880 --> 00:19:28,640
arbitrary remote url

458
00:19:28,640 --> 00:19:33,760
and replace arbitrary dictionaries

459
00:19:33,760 --> 00:19:35,520
and what's even better is that mobile

460
00:19:35,520 --> 00:19:38,000
asset d doesn't set this com.current

461
00:19:38,000 --> 00:19:38,960
thing flag to

462
00:19:38,960 --> 00:19:42,160
download the file so we can bypass the

463
00:19:42,160 --> 00:19:44,880
gatekeeper

464
00:19:45,039 --> 00:19:48,400
now here is the dictionary app is one of

465
00:19:48,400 --> 00:19:49,440
the built-in apps

466
00:19:49,440 --> 00:19:52,000
that comes with mac os it's basically

467
00:19:52,000 --> 00:19:54,160
some local html and javascript in a web

468
00:19:54,160 --> 00:19:55,039
view

469
00:19:55,039 --> 00:19:58,160
in the url the domain is file

470
00:19:58,160 --> 00:20:00,880
since we have exploited the debug and

471
00:20:00,880 --> 00:20:01,840
mobile set

472
00:20:01,840 --> 00:20:04,720
asset framework we can inject cross-site

473
00:20:04,720 --> 00:20:06,960
cross-scripting payload from safari to

474
00:20:06,960 --> 00:20:07,760
dictionary

475
00:20:07,760 --> 00:20:10,240
webview and what can we do in this

476
00:20:10,240 --> 00:20:11,679
webview

477
00:20:11,679 --> 00:20:13,760
ideally that i tried something in this

478
00:20:13,760 --> 00:20:15,039
webview and i

479
00:20:15,039 --> 00:20:18,159
managed to create and manage it to

480
00:20:18,159 --> 00:20:20,559
launch the calculator from these

481
00:20:20,559 --> 00:20:23,600
three lines of code i can you

482
00:20:23,600 --> 00:20:26,640
create an entry element and

483
00:20:26,640 --> 00:20:30,080
trigger the click event to it and

484
00:20:30,080 --> 00:20:32,400
it actually works the calculator shows

485
00:20:32,400 --> 00:20:33,440
up

486
00:20:33,440 --> 00:20:36,799
but another one another way to redirect

487
00:20:36,799 --> 00:20:39,919
the page that assign and string to the

488
00:20:39,919 --> 00:20:41,039
location object

489
00:20:41,039 --> 00:20:45,039
does not work nothing happen

490
00:20:47,440 --> 00:20:50,320
so how could this even happen this is

491
00:20:50,320 --> 00:20:51,840
where it's changed

492
00:20:51,840 --> 00:20:55,039
the answer is inside this delegate

493
00:20:55,039 --> 00:20:57,120
handler it's called decide policy for

494
00:20:57,120 --> 00:20:58,799
navigation action

495
00:20:58,799 --> 00:21:01,200
it will fire each time the webview needs

496
00:21:01,200 --> 00:21:03,360
to redirect the url

497
00:21:03,360 --> 00:21:06,240
it fetch the url from the entry only in

498
00:21:06,240 --> 00:21:09,600
this web action element key

499
00:21:09,600 --> 00:21:12,159
it wouldn't handle for location

500
00:21:12,159 --> 00:21:13,039
redirection

501
00:21:13,039 --> 00:21:16,720
that's how that's what we saw

502
00:21:16,720 --> 00:21:19,840
when this url is started

503
00:21:19,840 --> 00:21:24,240
is started by when this url is not is

504
00:21:24,240 --> 00:21:27,440
in file url

505
00:21:27,440 --> 00:21:32,640
it will try to ask the next workspace

506
00:21:32,720 --> 00:21:36,000
to open it which

507
00:21:36,000 --> 00:21:39,600
is a well-known vector for opening local

508
00:21:39,600 --> 00:21:43,360
apps and files when the file url points

509
00:21:43,360 --> 00:21:45,039
to an app bundle

510
00:21:45,039 --> 00:21:48,720
it gets executed by the launch service

511
00:21:48,720 --> 00:21:50,640
now of course the file must not have

512
00:21:50,640 --> 00:21:53,039
this com.current thing flagged

513
00:21:53,039 --> 00:21:55,280
otherwise it will be blocked by the

514
00:21:55,280 --> 00:21:56,880
gatekeeper

515
00:21:56,880 --> 00:21:59,360
the new process does not inherit sandbox

516
00:21:59,360 --> 00:22:01,200
profile from dictionary app

517
00:22:01,200 --> 00:22:04,000
which makes it much more ideal for

518
00:22:04,000 --> 00:22:06,960
sandbox escape

519
00:22:06,960 --> 00:22:09,600
so now how do we jump to dictionary

520
00:22:09,600 --> 00:22:12,320
obviously we cannot just use this url

521
00:22:12,320 --> 00:22:16,080
redirect there is an

522
00:22:16,080 --> 00:22:18,640
ipc in webkit that can open a dictionary

523
00:22:18,640 --> 00:22:20,960
lookup window

524
00:22:20,960 --> 00:22:23,200
and it's all is is able to open a

525
00:22:23,200 --> 00:22:26,559
dictionary in this way

526
00:22:26,559 --> 00:22:29,200
now first we create a text selection in

527
00:22:29,200 --> 00:22:31,039
javascript

528
00:22:31,039 --> 00:22:33,760
now we draw our exploit to get shell

529
00:22:33,760 --> 00:22:36,240
code executed

530
00:22:36,240 --> 00:22:38,799
then we exploit this mobile asset to

531
00:22:38,799 --> 00:22:40,400
download the malicious dictionary from

532
00:22:40,400 --> 00:22:41,679
the internet

533
00:22:41,679 --> 00:22:43,360
and we send this ipc to perform the

534
00:22:43,360 --> 00:22:45,760
lookup and show this local view service

535
00:22:45,760 --> 00:22:47,440
over late

536
00:22:47,440 --> 00:22:49,760
it will trigger our first crosstalk

537
00:22:49,760 --> 00:22:50,480
script

538
00:22:50,480 --> 00:22:54,240
in this overlay in this in our in this

539
00:22:54,240 --> 00:22:54,720
course

540
00:22:54,720 --> 00:22:57,760
in this payload we will use another

541
00:22:57,760 --> 00:23:00,880
location to redirect to this

542
00:23:00,880 --> 00:23:04,000
universal link to open the dictionary

543
00:23:04,000 --> 00:23:07,440
the app without confirmation

544
00:23:07,440 --> 00:23:09,120
then the dictionary app will load our

545
00:23:09,120 --> 00:23:10,640
malicious script

546
00:23:10,640 --> 00:23:14,080
and execute the final payload outside

547
00:23:14,080 --> 00:23:16,879
the sandbox

548
00:23:17,919 --> 00:23:21,120
let's see the demo now here's the second

549
00:23:21,120 --> 00:23:22,960
demonstration today

550
00:23:22,960 --> 00:23:25,200
first we use a cheat box to gain remote

551
00:23:25,200 --> 00:23:27,440
control execution in a renderer process

552
00:23:27,440 --> 00:23:30,080
then we use the wireless ipc to download

553
00:23:30,080 --> 00:23:31,280
the meshes

554
00:23:31,280 --> 00:23:34,840
dictionary and finally execute our

555
00:23:34,840 --> 00:23:36,640
payload

556
00:23:36,640 --> 00:23:38,720
now putting it all together here's the

557
00:23:38,720 --> 00:23:40,080
summary

558
00:23:40,080 --> 00:23:42,799
in this talk we have just demonstrated a

559
00:23:42,799 --> 00:23:44,159
new technique

560
00:23:44,159 --> 00:23:46,159
that you can inject javascript to a

561
00:23:46,159 --> 00:23:48,080
privileged process

562
00:23:48,080 --> 00:23:51,440
through inter process communication

563
00:23:51,440 --> 00:23:55,279
to escape from safari sandbox or mac os

564
00:23:55,279 --> 00:23:56,960
and it's part there are some possible

565
00:23:56,960 --> 00:23:59,279
vectors including uil schemes and

566
00:23:59,279 --> 00:24:00,400
traditional

567
00:24:00,400 --> 00:24:02,880
inter-process communication like xpc or

568
00:24:02,880 --> 00:24:04,880
mig or even webkit

569
00:24:04,880 --> 00:24:08,400
rpc sometimes you don't have to you

570
00:24:08,400 --> 00:24:09,520
don't need the initial

571
00:24:09,520 --> 00:24:12,240
renderer remote code execution to jump

572
00:24:12,240 --> 00:24:13,440
to another url's

573
00:24:13,440 --> 00:24:16,840
universal link to escape from the

574
00:24:16,840 --> 00:24:18,320
sandbox

575
00:24:18,320 --> 00:24:22,240
ending in this those privileged webview

576
00:24:22,240 --> 00:24:25,520
you have to do some reverse engineering

577
00:24:25,520 --> 00:24:28,320
to develop your next step of

578
00:24:28,320 --> 00:24:29,840
exploitation

579
00:24:29,840 --> 00:24:32,320
you have to focus on delegates for

580
00:24:32,320 --> 00:24:33,440
resource loading

581
00:24:33,440 --> 00:24:36,159
navigation file download etc and

582
00:24:36,159 --> 00:24:37,520
sometimes there will be some

583
00:24:37,520 --> 00:24:41,039
objective c message exposed by briefly

584
00:24:41,039 --> 00:24:43,919
bridge to javascript call which you can

585
00:24:43,919 --> 00:24:44,960
call this

586
00:24:44,960 --> 00:24:48,240
message to execute

587
00:24:48,240 --> 00:24:53,360
code or something and sometimes

588
00:24:53,360 --> 00:24:56,480
it will be in the file url in the web

589
00:24:56,480 --> 00:24:59,279
view in this web in the legacy web will

590
00:24:59,279 --> 00:25:00,080
file url

591
00:25:00,080 --> 00:25:02,720
is treated as privilege that it can has

592
00:25:02,720 --> 00:25:05,039
a universal process scripting to access

593
00:25:05,039 --> 00:25:06,000
arbitrary

594
00:25:06,000 --> 00:25:10,320
remote url and arbitrary local files

595
00:25:10,480 --> 00:25:13,840
and in this webview you are often

596
00:25:13,840 --> 00:25:16,320
able to silently open more url schemes

597
00:25:16,320 --> 00:25:17,679
than safari which

598
00:25:17,679 --> 00:25:20,000
opens a greater attack surface than

599
00:25:20,000 --> 00:25:22,400
before

600
00:25:22,559 --> 00:25:26,400
and the takeaways from this talk is that

601
00:25:26,400 --> 00:25:28,799
this desktop operating systems have

602
00:25:28,799 --> 00:25:30,720
complex attack surfaces

603
00:25:30,720 --> 00:25:33,520
that may be on your imagination and

604
00:25:33,520 --> 00:25:35,679
sometimes this legacy of components

605
00:25:35,679 --> 00:25:38,880
may lower your security baseline and

606
00:25:38,880 --> 00:25:40,400
find and of course we have

607
00:25:40,400 --> 00:25:43,840
shown three full sandbox escape

608
00:25:43,840 --> 00:25:47,919
exploits on safari

609
00:25:47,919 --> 00:25:51,520
with zero memory corruption

610
00:25:51,760 --> 00:25:53,760
if you have any questions you can ask me

611
00:25:53,760 --> 00:25:55,039
now

612
00:25:55,039 --> 00:25:57,840
thank you

