1
00:00:00,010 --> 00:00:03,510
today the traditional method is finding
these tools by hash

2
00:00:03,510 --> 00:00:08,210
everybody's got these different archive
file different art II our archive to

3
00:00:08,210 --> 00:00:12,990
Bob zips and unzips tools and machines
using a hash is just

4
00:00:12,990 --> 00:00:17,740
is silly because it's really pointless
because what we gonna look for

5
00:00:17,740 --> 00:00:22,340
are per se so and it also makes you
always question what side

6
00:00:22,340 --> 00:00:29,109
what's inside the archive payers

7
00:00:29,109 --> 00:00:32,300
my name's the Muslim their gym just so
trusted

8
00:00:32,300 --> 00:00:36,380
with reversing ups am before we continue
I'm just gonna switch this lies because

9
00:00:36,380 --> 00:00:37,190
I'm sure

10
00:00:37,190 --> 00:00:40,280
that everything we we are meant to

11
00:00:40,280 --> 00:00:43,760
present to the and the presentation is
in here

12
00:00:43,760 --> 00:00:47,030
get more microphone closer

13
00:00:47,030 --> 00:00:52,750
KK here so this is the Peoria talked
about us

14
00:00:52,750 --> 00:00:56,610
and we gonna continue with story about

15
00:00:56,610 --> 00:01:00,960
what we discovered and how so if you
look at the ER performance

16
00:01:00,960 --> 00:01:04,059
usually you talking about the most
popular ones and these are

17
00:01:04,059 --> 00:01:07,220
the ones as if rar caps on the fringes
it

18
00:01:07,220 --> 00:01:11,229
now these are the files you will
normally find in any operating system

19
00:01:11,229 --> 00:01:15,080
and any peace in the world but

20
00:01:15,080 --> 00:01:18,150
if we look at them this way you'll most
certainly find

21
00:01:18,150 --> 00:01:21,200
this first floor on Windows and Unix a

22
00:01:21,200 --> 00:01:24,600
4G is it but that doesn't mean thats

23
00:01:24,600 --> 00:01:28,320
going to be the case because father just
that by any reason they're not bind to

24
00:01:28,320 --> 00:01:29,430
the operating system

25
00:01:29,430 --> 00:01:33,470
it in any form but we selected few

26
00:01:33,470 --> 00:01:36,829
with them this way because they're are
coprocessors

27
00:01:36,829 --> 00:01:41,340
are coming the bill forties platforms
now

28
00:01:41,340 --> 00:01:46,770
first formats is the file format and it
is most common file format to use today

29
00:01:46,770 --> 00:01:50,790
what's interesting about it is that its
over 20 years

30
00:01:50,790 --> 00:01:56,320
old so it wasn't meant did for created
in 1986 Michael Katz for peak is it

31
00:01:56,320 --> 00:02:00,659
of course the format itself is fully
documented and this is very important

32
00:02:00,659 --> 00:02:03,860
that the condition for the this file
format is to do

33
00:02:03,860 --> 00:02:07,649
k-line text file so if you're
implementing your own solution you

34
00:02:07,649 --> 00:02:09,170
really have to go through all that

35
00:02:09,170 --> 00:02:12,530
and even the most popular archive

36
00:02:12,530 --> 00:02:15,790
processors such as WinZip haven't
implemented old features

37
00:02:15,790 --> 00:02:19,250
so you seen you can weaker file that's a

38
00:02:19,250 --> 00:02:24,400
legal by the pigmentation but to it
really really can be opened by a.m.

39
00:02:24,400 --> 00:02:28,190
sander tool to use peso such as WinZip
which is the most popular

40
00:02:28,190 --> 00:02:31,480
zipper archive the program hours it for
been rar and

41
00:02:31,480 --> 00:02:35,180
sums up the course which is the open
source version

42
00:02:35,180 --> 00:02:40,280
now this format sports are recovering
well to disbanding encryption and this

43
00:02:40,280 --> 00:02:40,950
affects

44
00:02:40,950 --> 00:02:44,340
it has multiple compression algorithms
but the default one is complete

45
00:02:44,340 --> 00:02:48,180
now address part file format

46
00:02:48,180 --> 00:02:51,569
is a very popular one it was developed
by Eugene Rushil

47
00:02:51,569 --> 00:02:56,500
and meet this partially documented it's
a technical note to you kept the program

48
00:02:56,500 --> 00:02:59,959
and it doesn't really contain everything
you need to know about format but

49
00:02:59,959 --> 00:03:03,180
its place start so I'll

50
00:03:03,180 --> 00:03:07,560
it is the is the compression is
supported by mean of course which is

51
00:03:07,560 --> 00:03:10,610
its me theater i cum processor and

52
00:03:10,610 --> 00:03:13,959
you can at a low then is the key which
works with the

53
00:03:13,959 --> 00:03:18,739
and right kinds but it only gives you an
option to decompress the archives you

54
00:03:18,739 --> 00:03:19,780
cannot compress them

55
00:03:19,780 --> 00:03:25,370
and these other programs course now this
format of course supports a recovering

56
00:03:25,370 --> 00:03:27,510
well to this planning profession and its
effects

57
00:03:27,510 --> 00:03:32,220
those are the most common features we
found if the we find in today's

58
00:03:32,220 --> 00:03:37,450
are coprocessors compression algorithm
is a bit different but is based on LG it

59
00:03:37,450 --> 00:03:41,840
and ppm dy those proprietary so that's
why you need a license for it

60
00:03:41,840 --> 00:03:45,360
now to get file format is a very common

61
00:03:45,360 --> 00:03:49,340
dollar for months to it's very really
use by users

62
00:03:49,340 --> 00:03:52,879
a it's created by Microsoft and its used
as

63
00:03:52,879 --> 00:03:57,209
I'm installer format for their platform
it is fully documented

64
00:03:57,209 --> 00:04:01,150
it has a 20 page PDF I like to look at
it's pretty cool one

65
00:04:01,150 --> 00:04:04,200
so get fogleman's

66
00:04:04,200 --> 00:04:07,370
or supported by many so futility such as
Microsoft Windows

67
00:04:07,370 --> 00:04:11,920
who has I included the compressed
folders and it s

68
00:04:11,920 --> 00:04:16,169
support for both defend cap files and

69
00:04:16,169 --> 00:04:20,620
what's interesting is that all ok all
these tools only powerArchiver can

70
00:04:20,620 --> 00:04:21,430
compress

71
00:04:21,430 --> 00:04:25,130
files into cab archives and once you
create a

72
00:04:25,130 --> 00:04:29,040
kept archive you cannot at any more
files to it because that's how

73
00:04:29,040 --> 00:04:33,500
specs work and it supports all the
spending

74
00:04:33,500 --> 00:04:37,360
the digital signage signing anesthetics
uses for

75
00:04:37,360 --> 00:04:40,520
pushing on with themselves yes late
print them and Anissa

76
00:04:40,520 --> 00:04:44,430
some za as we talk to it's an open
source

77
00:04:44,430 --> 00:04:47,810
format it started in 2002 developed by

78
00:04:47,810 --> 00:04:53,800
your Paul p.m. it is fully documented
the test series of text files you can

79
00:04:53,800 --> 00:04:55,199
look at and see how

80
00:04:55,199 --> 00:04:58,669
format looks on desk and its native

81
00:04:58,669 --> 00:05:02,060
processor is something zip force all the
other tools

82
00:05:02,060 --> 00:05:05,060
also sport 7-zip

83
00:05:05,060 --> 00:05:09,139
it has moved to the spending caption
contest pics it to

84
00:05:09,139 --> 00:05:14,800
for professional with me uses its own
Chelsea variation coleville CME

85
00:05:14,800 --> 00:05:17,960
now the JIT file format is most commonly
found in units

86
00:05:17,960 --> 00:05:21,560
a it was created to in 1992 and it is

87
00:05:21,560 --> 00:05:24,710
heard documented just a few pages and

88
00:05:24,710 --> 00:05:30,289
United six no it is also supported by
every known

89
00:05:30,289 --> 00:05:35,440
and most popular are co-processor now
it's a sports complex in single file

90
00:05:35,440 --> 00:05:38,530
so if you want to press more files kept
you up

91
00:05:38,530 --> 00:05:42,720
bind them together with 10 other program
usually start

92
00:05:42,720 --> 00:05:48,530
and then compress the and results he'd
only uses the fatal gritty

93
00:05:48,530 --> 00:05:51,850
now in it's been all this about these
formats

94
00:05:51,850 --> 00:05:56,180
we wanted to know be what kinda for

95
00:05:56,180 --> 00:05:59,210
what does it all mean it means that all
files on the filesystem

96
00:05:59,210 --> 00:06:02,669
are basically just by injuries and
issues

97
00:06:02,669 --> 00:06:06,810
look at any file I mean doc PowerPoint
presentation movie or an archive

98
00:06:06,810 --> 00:06:10,509
is it just the binary you can receive a
text editor

99
00:06:10,509 --> 00:06:14,789
and edit any fight said you're choosing
box to edit files

100
00:06:14,789 --> 00:06:19,500
successfully have to know the the
condition for that particular format

101
00:06:19,500 --> 00:06:22,550
in order to 150 correctly so a

102
00:06:22,550 --> 00:06:26,310
whether our goals when it comes to mow
forming files

103
00:06:26,310 --> 00:06:31,039
from this technology standpoint want to
hide files or any messages from you

104
00:06:31,039 --> 00:06:36,139
and we want to do that to in a process
which can be reversed so once you

105
00:06:36,139 --> 00:06:40,530
a hidden something inside an archive you
must be able to retrieve it later

106
00:06:40,530 --> 00:06:43,850
and from other religious standpoint we
don't wanna hide anything

107
00:06:43,850 --> 00:06:46,780
what they want to break in our
co-processor now that this is really

108
00:06:46,780 --> 00:06:48,509
neat because the

109
00:06:48,509 --> 00:06:52,169
multiple security vendors have developed
their own archive processors

110
00:06:52,169 --> 00:06:56,660
and since for als as if we said that the
conditions is

111
00:06:56,660 --> 00:07:01,419
32k lines long you bats there are some
things they looked over

112
00:07:01,419 --> 00:07:04,479
no might this fuzzy doesn't like this in
area because

113
00:07:04,479 --> 00:07:08,280
a we want a crash program we just don't
wanna

114
00:07:08,280 --> 00:07:11,530
breaking our purpose is to just skips
over a filing

115
00:07:11,530 --> 00:07:16,520
doesn't scan it in full know how is it
achieves

116
00:07:16,520 --> 00:07:19,819
first and foremost have to know the
conclusion nothing take from it you have

117
00:07:19,819 --> 00:07:20,130
to

118
00:07:20,130 --> 00:07:23,169
read the entire the condition and just
think

119
00:07:23,169 --> 00:07:28,000
a of certain features such as this is
something nobody would implement and

120
00:07:28,000 --> 00:07:30,120
just try that and if that works

121
00:07:30,120 --> 00:07:33,319
wit are co-processor such as WinZip

122
00:07:33,319 --> 00:07:37,880
and you might want to try that with the
security tools

123
00:07:37,880 --> 00:07:42,389
now the condition itself is not perfect
there something that the

124
00:07:42,389 --> 00:07:46,590
really unclear and if you look at it as
if the conditions are sentences

125
00:07:46,590 --> 00:07:49,879
that the really don't make no sense

126
00:07:49,879 --> 00:07:53,229
so you can use that to your advantage in
think of the ways

127
00:07:53,229 --> 00:07:57,150
al anybody would implement that

128
00:07:57,150 --> 00:08:00,960
you can use rarely use feels as I said
that is basically known to the

129
00:08:00,960 --> 00:08:02,940
competition very well

130
00:08:02,940 --> 00:08:06,199
and you can you combine couple of other
file formats together

131
00:08:06,199 --> 00:08:10,919
to create this sort of a beard file we
will present later when we combined

132
00:08:10,919 --> 00:08:14,090
as if 64 for match with the normals a
were format

133
00:08:14,090 --> 00:08:18,639
and the strike to you a mess with the
format identifications so

134
00:08:18,639 --> 00:08:22,569
another proper all within czar used to
decompress the archive

135
00:08:22,569 --> 00:08:26,470
and of course is trying to methods you
can just try to

136
00:08:26,470 --> 00:08:29,740
change some by to see how that works or
doesn't

137
00:08:29,740 --> 00:08:33,219
now steganography to you by all the ball

138
00:08:33,219 --> 00:08:37,690
and you can also inject more data into
the archives

139
00:08:37,690 --> 00:08:41,269
now there were some previous works in
this area there were some like Emma

140
00:08:41,269 --> 00:08:45,029
permission tests that were published in
2004 by defense

141
00:08:45,029 --> 00:08:48,980
and their implications are quite nicely
put by he said

142
00:08:48,980 --> 00:08:52,380
I'm gonna reduce says with her that we
believe he was caused by the fact that

143
00:08:52,380 --> 00:08:55,700
some archive compression decompression
software including WinZip incorrectly

144
00:08:55,700 --> 00:08:56,740
handled compression

145
00:08:56,740 --> 00:09:00,260
compressed files with the limited
damaged file headers does in fact

146
00:09:00,260 --> 00:09:03,750
hello increase in damage archive files
that would automatically be repaired on

147
00:09:03,750 --> 00:09:06,490
the victim's computer without notifying
users

148
00:09:06,490 --> 00:09:10,089
and that's that's what what this is
really about

149
00:09:10,089 --> 00:09:14,550
ness is what we focused our testing on
thats first thing we want no

150
00:09:14,550 --> 00:09:17,620
is how fast and how accurately

151
00:09:17,620 --> 00:09:20,709
are with techie formats this is very
important because this is

152
00:09:20,709 --> 00:09:24,130
first step in processing any format
second one is

153
00:09:24,130 --> 00:09:28,690
if you get the file you have to know if
it's valid or not and if it's corrupted

154
00:09:28,690 --> 00:09:33,570
you have to know at what what amount to
the day you can recover from that

155
00:09:33,570 --> 00:09:38,029
and of course if our code was wonderful
to any of the known attacks

156
00:09:38,029 --> 00:09:43,480
or the future ones and then stick know
if he came into the picture and we want

157
00:09:43,480 --> 00:09:44,279
to know the following

158
00:09:44,279 --> 00:09:48,279
we know want to know is very interesting
data between all these files and

159
00:09:48,279 --> 00:09:49,010
archives

160
00:09:49,010 --> 00:09:52,670
and in so if there is this data can be
corrupted

161
00:09:52,670 --> 00:09:56,149
candidate to have a self-destruct button

162
00:09:56,149 --> 00:09:59,649
now here's what we found in our tests
from second purpose

