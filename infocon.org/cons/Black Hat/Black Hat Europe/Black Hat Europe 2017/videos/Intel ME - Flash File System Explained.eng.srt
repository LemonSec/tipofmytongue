1
00:00:00,000 --> 00:00:03,419
hello<font color="#E5E5E5"> thanks for coming to</font><font color="#CCCCCC"> listen for my</font>

2
00:00:02,639 --> 00:00:06,270
presentation

3
00:00:03,419 --> 00:00:08,309
my name is<font color="#CCCCCC"> Matias clarify am employed as</font>

4
00:00:06,270 --> 00:00:11,840
head of<font color="#E5E5E5"> rares engineering company</font>

5
00:00:08,309 --> 00:00:15,719
positive<font color="#CCCCCC"> technologist</font><font color="#E5E5E5"> and today I will</font>

6
00:00:11,840 --> 00:00:18,869
<font color="#E5E5E5">explain some findings that we achieve</font>

7
00:00:15,719 --> 00:00:22,680
during exploring of into management

8
00:00:18,869 --> 00:00:24,509
<font color="#E5E5E5">engine file system</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> research was</font>

9
00:00:22,680 --> 00:00:26,670
performed in cooperation with two of my

10
00:00:24,510 --> 00:00:29,939
<font color="#CCCCCC">colleagues maxim</font><font color="#E5E5E5"> gorky</font>

11
00:00:26,670 --> 00:00:34,940
marker and mark<font color="#E5E5E5"> yermolov they already</font>

12
00:00:29,939 --> 00:00:40,340
have several<font color="#E5E5E5"> presentations about Intel</font>

13
00:00:34,940 --> 00:00:44,129
Intel hardware<font color="#E5E5E5"> and management engine and</font>

14
00:00:40,340 --> 00:00:47,309
they will have their<font color="#E5E5E5"> own speak here at</font>

15
00:00:44,129 --> 00:00:49,890
blackhat today at 3:30 at room<font color="#E5E5E5"> B so I</font>

16
00:00:47,309 --> 00:00:52,559
recommend you<font color="#E5E5E5"> to visit their</font>

17
00:00:49,890 --> 00:00:57,989
presentation if<font color="#CCCCCC"> you're interested in ME</font>

18
00:00:52,559 --> 00:01:00,718
<font color="#CCCCCC">ME security and I present my previous</font>

19
00:00:57,989 --> 00:01:04,408
research about management<font color="#E5E5E5"> engine on</font>

20
00:01:00,719 --> 00:01:06,960
<font color="#E5E5E5">troopers in April this year and I</font>

21
00:01:04,409 --> 00:01:10,350
recommend<font color="#E5E5E5"> you to briefly</font><font color="#CCCCCC"> look at my</font>

22
00:01:06,960 --> 00:01:12,869
presentation<font color="#E5E5E5"> later if you're interested</font>

23
00:01:10,350 --> 00:01:20,149
<font color="#E5E5E5">in this</font><font color="#CCCCCC"> error</font><font color="#E5E5E5"> because it's connected</font>

24
00:01:12,869 --> 00:01:25,860
<font color="#CCCCCC">with this one</font><font color="#E5E5E5"> in my presentation I will</font>

25
00:01:20,150 --> 00:01:28,439
explain what's a me file system<font color="#E5E5E5"> and make</font>

26
00:01:25,860 --> 00:01:33,380
some notes<font color="#E5E5E5"> about flash file system</font>

27
00:01:28,439 --> 00:01:39,570
design also<font color="#E5E5E5"> I will describe how</font><font color="#CCCCCC"> em FS</font>

28
00:01:33,380 --> 00:01:42,000
built inside<font color="#E5E5E5"> what is consists of and I</font>

29
00:01:39,570 --> 00:01:47,000
will explain<font color="#E5E5E5"> how</font><font color="#CCCCCC"> it use it by management</font>

30
00:01:42,000 --> 00:01:51,240
<font color="#E5E5E5">engine and what are interesting finding</font>

31
00:01:47,000 --> 00:01:54,920
<font color="#E5E5E5">related with with this technology so</font>

32
00:01:51,240 --> 00:01:58,219
let's start<font color="#E5E5E5"> management engine is</font>

33
00:01:54,920 --> 00:02:03,810
technology<font color="#CCCCCC"> produced by Intel and</font>

34
00:01:58,219 --> 00:02:06,658
initially it<font color="#CCCCCC"> was released as part of</font><font color="#E5E5E5"> Mt</font>

35
00:02:03,810 --> 00:02:09,959
advanced management technology and it's

36
00:02:06,659 --> 00:02:12,030
originated from<font color="#E5E5E5"> year 2005 so it's more</font>

37
00:02:09,959 --> 00:02:14,610
than<font color="#CCCCCC"> 10 years older</font>

38
00:02:12,030 --> 00:02:17,720
and<font color="#E5E5E5"> almost every modern computer</font>

39
00:02:14,610 --> 00:02:20,790
<font color="#E5E5E5">produced by Intel for last five years</font>

40
00:02:17,720 --> 00:02:23,310
<font color="#CCCCCC">deals with</font><font color="#E5E5E5"> management engine it's built</font>

41
00:02:20,790 --> 00:02:26,459
inside<font color="#E5E5E5"> some cheap not inside the central</font>

42
00:02:23,310 --> 00:02:29,910
processor<font color="#E5E5E5"> it's additional processor and</font>

43
00:02:26,460 --> 00:02:32,580
<font color="#E5E5E5">it's works even when your computer</font>

44
00:02:29,910 --> 00:02:35,100
plugged in the<font color="#E5E5E5"> wall socket but not</font>

45
00:02:32,580 --> 00:02:37,680
turned on so it's already operates and

46
00:02:35,100 --> 00:02:40,980
<font color="#CCCCCC">it could run</font><font color="#E5E5E5"> without central processor</font>

47
00:02:37,680 --> 00:02:43,140
without dynamic memory<font color="#E5E5E5"> but could could</font>

48
00:02:40,980 --> 00:02:46,829
communicate with<font color="#E5E5E5"> them and you could see</font>

49
00:02:43,140 --> 00:02:50,880
<font color="#CCCCCC">on the Left slide that</font><font color="#E5E5E5"> management engine</font>

50
00:02:46,830 --> 00:02:53,190
is in<font color="#E5E5E5"> the center of the computer system</font>

51
00:02:50,880 --> 00:02:54,750
according<font color="#E5E5E5"> to Intel documentation from</font>

52
00:02:53,190 --> 00:02:57,209
old version of<font color="#E5E5E5"> advanced management</font>

53
00:02:54,750 --> 00:02:59,520
<font color="#E5E5E5">technology it could communicate with</font>

54
00:02:57,209 --> 00:03:02,220
central processor with integrated

55
00:02:59,520 --> 00:03:03,780
controller hub with flash memory and

56
00:03:02,220 --> 00:03:07,080
with everything<font color="#E5E5E5"> else with network</font>

57
00:03:03,780 --> 00:03:09,120
adapter<font color="#E5E5E5"> also there is known is</font>

58
00:03:07,080 --> 00:03:12,780
documented by Intel that<font color="#E5E5E5"> management</font>

59
00:03:09,120 --> 00:03:15,540
engine<font color="#E5E5E5"> have</font><font color="#CCCCCC"> so-called out-of-band</font><font color="#E5E5E5"> access</font>

60
00:03:12,780 --> 00:03:18,630
to network<font color="#CCCCCC"> cards so it could send and</font>

61
00:03:15,540 --> 00:03:20,730
receive packets<font color="#E5E5E5"> and that packets would</font>

62
00:03:18,630 --> 00:03:22,140
not be<font color="#E5E5E5"> visible from the level of the</font>

63
00:03:20,730 --> 00:03:26,790
<font color="#E5E5E5">operating system running on the computer</font>

64
00:03:22,140 --> 00:03:30,660
<font color="#E5E5E5">and if speaking about privileges and</font>

65
00:03:26,790 --> 00:03:33,810
rights on the modern computer<font color="#E5E5E5"> system we</font>

66
00:03:30,660 --> 00:03:36,390
all<font color="#CCCCCC"> know - upper level</font><font color="#E5E5E5"> on this picture</font>

67
00:03:33,810 --> 00:03:39,620
<font color="#CCCCCC">user and kernel level</font><font color="#E5E5E5"> which was</font>

68
00:03:36,390 --> 00:03:43,619
initially implemented in Intel 386

69
00:03:39,620 --> 00:03:46,370
<font color="#E5E5E5">central processor and later processors</font>

70
00:03:43,620 --> 00:03:47,519
<font color="#E5E5E5">starts offering hypervisor level of</font>

71
00:03:46,370 --> 00:03:51,600
<font color="#CCCCCC">isolation</font>

72
00:03:47,519 --> 00:03:53,549
so<font color="#E5E5E5"> from even from kernel level you are</font>

73
00:03:51,600 --> 00:03:54,630
unable<font color="#E5E5E5"> to control what's</font><font color="#CCCCCC"> happened inside</font>

74
00:03:53,549 --> 00:03:59,209
<font color="#E5E5E5">the hypervisor</font>

75
00:03:54,630 --> 00:04:03,630
<font color="#E5E5E5">but if talk for system management mode</font>

76
00:03:59,209 --> 00:04:09,299
<font color="#CCCCCC">it's run below hypervisor so</font><font color="#E5E5E5"> it could</font>

77
00:04:03,630 --> 00:04:12,989
control hypervisor<font color="#E5E5E5"> on its decision but</font>

78
00:04:09,299 --> 00:04:15,360
<font color="#E5E5E5">at the absolutely bottom of the system</font>

79
00:04:12,989 --> 00:04:18,168
<font color="#CCCCCC">various management</font><font color="#E5E5E5"> engine these four</font>

80
00:04:15,360 --> 00:04:20,549
pieces are inside the central processor

81
00:04:18,168 --> 00:04:23,609
<font color="#E5E5E5">management engine in separate chip it's</font>

82
00:04:20,548 --> 00:04:29,159
in<font color="#E5E5E5"> South Bridge I believe</font>

83
00:04:23,610 --> 00:04:31,289
and it's a<font color="#E5E5E5"> half have</font><font color="#CCCCCC"> almost any any</font>

84
00:04:29,159 --> 00:04:35,030
control<font color="#CCCCCC"> over the computer</font><font color="#E5E5E5"> system it</font>

85
00:04:31,289 --> 00:04:39,030
could access digital<font color="#CCCCCC"> RAM</font><font color="#E5E5E5"> dynamic</font><font color="#CCCCCC"> Ram</font>

86
00:04:35,030 --> 00:04:41,520
<font color="#E5E5E5">using digital direct memory access it</font>

87
00:04:39,030 --> 00:04:44,460
could communicate with<font color="#E5E5E5"> central processor</font>

88
00:04:41,520 --> 00:04:48,780
it could<font color="#E5E5E5"> handle power</font><font color="#CCCCCC"> management of the</font>

89
00:04:44,460 --> 00:04:51,299
whole<font color="#CCCCCC"> system and</font><font color="#E5E5E5"> so on</font><font color="#CCCCCC"> so from upper</font>

90
00:04:48,780 --> 00:04:54,330
level you are able to<font color="#E5E5E5"> communicate</font><font color="#CCCCCC"> to</font>

91
00:04:51,300 --> 00:04:56,610
lower level<font color="#E5E5E5"> only</font><font color="#CCCCCC"> using some predefined</font>

92
00:04:54,330 --> 00:04:59,669
interface and<font color="#CCCCCC"> that interfaces are</font>

93
00:04:56,610 --> 00:05:01,710
limited and<font color="#E5E5E5"> you're almost not</font><font color="#CCCCCC"> able to</font>

94
00:04:59,669 --> 00:05:03,870
control what's<font color="#E5E5E5"> happened at the lowest</font>

95
00:05:01,710 --> 00:05:06,930
level but from lowest level you<font color="#CCCCCC"> are able</font>

96
00:05:03,870 --> 00:05:09,419
to<font color="#E5E5E5"> control everything and this research</font>

97
00:05:06,930 --> 00:05:12,150
is about info management engine which<font color="#CCCCCC"> is</font>

98
00:05:09,419 --> 00:05:14,698
in the bottom so if you are<font color="#E5E5E5"> able to</font>

99
00:05:12,150 --> 00:05:16,318
<font color="#E5E5E5">control</font><font color="#CCCCCC"> management engine</font><font color="#E5E5E5"> in theory you</font>

100
00:05:14,699 --> 00:05:20,520
are able<font color="#E5E5E5"> to control everything that</font>

101
00:05:16,319 --> 00:05:23,400
<font color="#CCCCCC">happens on your</font><font color="#E5E5E5"> computer</font><font color="#CCCCCC"> we will talk</font>

102
00:05:20,520 --> 00:05:25,620
<font color="#E5E5E5">about flash</font><font color="#CCCCCC"> on modern computers there is</font>

103
00:05:23,400 --> 00:05:29,758
<font color="#CCCCCC">spi flash chip serial programming</font>

104
00:05:25,620 --> 00:05:32,960
interface and<font color="#E5E5E5"> that</font><font color="#CCCCCC"> flash chip contains</font>

105
00:05:29,759 --> 00:05:36,379
several pieces of software it contains

106
00:05:32,960 --> 00:05:39,719
code for bias<font color="#E5E5E5"> code for management engine</font>

107
00:05:36,379 --> 00:05:42,719
<font color="#CCCCCC">some data for gigabyte Ethernet and so</font>

108
00:05:39,719 --> 00:05:44,969
on and within management<font color="#CCCCCC"> plans in the</font>

109
00:05:42,719 --> 00:05:48,949
region there is<font color="#E5E5E5"> a kind of partition</font>

110
00:05:44,969 --> 00:05:53,430
table that<font color="#CCCCCC"> describes what's inside the</font>

111
00:05:48,949 --> 00:05:56,520
<font color="#CCCCCC">Amir region and one of partitions calls</font>

112
00:05:53,430 --> 00:06:01,319
<font color="#CCCCCC">em FS</font><font color="#E5E5E5"> I believe</font><font color="#CCCCCC"> it shortcut for a me</font>

113
00:05:56,520 --> 00:06:03,688
file system<font color="#E5E5E5"> there are</font><font color="#CCCCCC"> is tools of</font>

114
00:06:01,319 --> 00:06:07,800
available on the internet that helps you

115
00:06:03,689 --> 00:06:10,289
<font color="#E5E5E5">to split any image to different</font>

116
00:06:07,800 --> 00:06:12,810
partitions and extract em FS partition

117
00:06:10,289 --> 00:06:15,688
<font color="#E5E5E5">and the first partition actually is</font>

118
00:06:12,810 --> 00:06:17,819
appears to<font color="#CCCCCC"> be a set of pages</font><font color="#E5E5E5"> and I will</font>

119
00:06:15,689 --> 00:06:22,050
talk<font color="#CCCCCC"> about this in details little bit</font>

120
00:06:17,819 --> 00:06:27,300
<font color="#CCCCCC">later</font><font color="#E5E5E5"> and now several words about flash</font>

121
00:06:22,050 --> 00:06:28,750
memory<font color="#E5E5E5"> flash</font><font color="#CCCCCC"> memory is operates at user</font>

122
00:06:27,300 --> 00:06:31,860
level

123
00:06:28,750 --> 00:06:34,180
usually like<font color="#E5E5E5"> like all type of</font>

124
00:06:31,860 --> 00:06:37,210
<font color="#E5E5E5">information storage devices like hard</font>

125
00:06:34,180 --> 00:06:42,220
<font color="#CCCCCC">disks</font><font color="#E5E5E5"> but in hard disk</font><font color="#CCCCCC"> you are able to</font>

126
00:06:37,210 --> 00:06:44,650
read and write<font color="#E5E5E5"> only using sector amount</font>

127
00:06:42,220 --> 00:06:48,270
of information<font color="#E5E5E5"> but</font><font color="#CCCCCC"> for flash memory you</font>

128
00:06:44,650 --> 00:06:50,919
could access arbitrary<font color="#CCCCCC"> cell of memory</font>

129
00:06:48,270 --> 00:06:56,640
<font color="#E5E5E5">separately so you don't need to write</font>

130
00:06:50,920 --> 00:07:01,090
<font color="#E5E5E5">the whole page of data</font><font color="#CCCCCC"> but physical</font>

131
00:06:56,640 --> 00:07:05,409
physical methods that behind the flash

132
00:07:01,090 --> 00:07:08,830
<font color="#E5E5E5">memory allows you to modify any</font><font color="#CCCCCC"> bit</font><font color="#E5E5E5"> that</font>

133
00:07:05,410 --> 00:07:11,620
already<font color="#CCCCCC"> 1</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> 0 state</font><font color="#E5E5E5"> but if you want to</font>

134
00:07:08,830 --> 00:07:14,640
return it back from<font color="#E5E5E5"> 0 to 1 you need to</font>

135
00:07:11,620 --> 00:07:17,470
perform erase and erase operation<font color="#CCCCCC"> is</font>

136
00:07:14,640 --> 00:07:24,099
performed<font color="#E5E5E5"> only on the whole page or</font>

137
00:07:17,470 --> 00:07:27,060
block and there is one limitation<font color="#E5E5E5"> on the</font>

138
00:07:24,100 --> 00:07:30,010
flash<font color="#CCCCCC"> memory a very important one that</font>

139
00:07:27,060 --> 00:07:33,040
<font color="#E5E5E5">deals with number of erase cycles that's</font>

140
00:07:30,010 --> 00:07:35,710
supported<font color="#E5E5E5"> by the flash chip usually that</font>

141
00:07:33,040 --> 00:07:38,620
number is between 10,000<font color="#E5E5E5"> and 1 million</font>

142
00:07:35,710 --> 00:07:42,280
and<font color="#CCCCCC"> after some amount</font><font color="#E5E5E5"> of erases of some</font>

143
00:07:38,620 --> 00:07:44,140
<font color="#CCCCCC">specific page this page is unable to be</font>

144
00:07:42,280 --> 00:07:47,200
<font color="#E5E5E5">erase it</font><font color="#CCCCCC"> anymore so you are unable to</font>

145
00:07:44,140 --> 00:07:50,890
set all bits of that page to one state

146
00:07:47,200 --> 00:07:55,090
and<font color="#CCCCCC"> it means</font><font color="#E5E5E5"> that it's damaged it it's</font>

147
00:07:50,890 --> 00:07:57,400
bad and you're unable to<font color="#E5E5E5"> use it so when</font>

148
00:07:55,090 --> 00:08:00,359
someone tried to<font color="#CCCCCC"> design</font><font color="#E5E5E5"> file systems</font>

149
00:07:57,400 --> 00:08:04,450
that<font color="#E5E5E5"> would store</font><font color="#CCCCCC"> it data inside the</font>

150
00:08:00,360 --> 00:08:08,260
<font color="#E5E5E5">flash memory</font><font color="#CCCCCC"> you need to think about</font>

151
00:08:04,450 --> 00:08:11,469
that limitation<font color="#E5E5E5"> so there are two primary</font>

152
00:08:08,260 --> 00:08:15,250
<font color="#E5E5E5">goals when designing file system first</font>

153
00:08:11,470 --> 00:08:18,160
<font color="#E5E5E5">one is minimizing the</font><font color="#CCCCCC"> rice count so if</font>

154
00:08:15,250 --> 00:08:21,400
<font color="#CCCCCC">you have small piece of</font><font color="#E5E5E5"> information that</font>

155
00:08:18,160 --> 00:08:23,080
<font color="#CCCCCC">should be written</font><font color="#E5E5E5"> in the flesh you don't</font>

156
00:08:21,400 --> 00:08:25,929
need to write<font color="#E5E5E5"> the whole page you need to</font>

157
00:08:23,080 --> 00:08:29,320
<font color="#E5E5E5">write as little piece as possible and</font>

158
00:08:25,930 --> 00:08:33,130
add additional<font color="#E5E5E5"> pieces of data to</font>

159
00:08:29,320 --> 00:08:35,710
existing page and another goal is we're

160
00:08:33,130 --> 00:08:38,828
leveling so you need to<font color="#E5E5E5"> count how many</font>

161
00:08:35,710 --> 00:08:42,809
times you erase some specific page and

162
00:08:38,828 --> 00:08:47,109
try to erase every page within your<font color="#E5E5E5"> area</font>

163
00:08:42,808 --> 00:08:49,929
<font color="#CCCCCC">even with even number of erases</font><font color="#E5E5E5"> so not</font>

164
00:08:47,110 --> 00:08:52,749
not came to<font color="#CCCCCC"> a situation</font><font color="#E5E5E5"> where one page</font>

165
00:08:49,929 --> 00:08:56,559
<font color="#E5E5E5">erase</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> thousands of times and another</font>

166
00:08:52,749 --> 00:08:59,079
one<font color="#E5E5E5"> notarize it</font><font color="#CCCCCC"> at all and there are a</font>

167
00:08:56,559 --> 00:09:01,600
<font color="#E5E5E5">lot of different types of flash file</font>

168
00:08:59,079 --> 00:09:05,138
system already designed in Linux you

169
00:09:01,600 --> 00:09:07,929
could find that<font color="#E5E5E5"> there are six of them</font>

170
00:09:05,139 --> 00:09:10,809
<font color="#E5E5E5">listed on this slide and for sure there</font>

171
00:09:07,929 --> 00:09:14,799
are more<font color="#CCCCCC"> of them</font><font color="#E5E5E5"> exist but</font><font color="#CCCCCC"> in two</font>

172
00:09:10,809 --> 00:09:17,860
<font color="#E5E5E5">designs their own file system</font><font color="#CCCCCC"> and I will</font>

173
00:09:14,799 --> 00:09:21,819
describe it if<font color="#E5E5E5"> you</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> interested in</font>

174
00:09:17,860 --> 00:09:25,049
<font color="#CCCCCC">Emme in</font><font color="#E5E5E5"> general I strongly recommend to</font>

175
00:09:21,819 --> 00:09:28,509
read<font color="#E5E5E5"> this perfect book because it's</font>

176
00:09:25,049 --> 00:09:33,879
<font color="#CCCCCC">helped understand what it's really for</font>

177
00:09:28,509 --> 00:09:41,769
<font color="#CCCCCC">and describes in not not</font><font color="#E5E5E5"> in detail</font><font color="#CCCCCC"> but</font>

178
00:09:33,879 --> 00:09:44,230
in very<font color="#CCCCCC"> a very</font><font color="#E5E5E5"> useful way how a whole</font>

179
00:09:41,769 --> 00:09:47,769
security<font color="#CCCCCC"> and we will speak about</font>

180
00:09:44,230 --> 00:09:50,399
security today<font color="#E5E5E5"> also</font><font color="#CCCCCC"> great presentation</font>

181
00:09:47,769 --> 00:09:53,649
is<font color="#E5E5E5"> in to any secrets by</font><font color="#CCCCCC"> egress</font><font color="#E5E5E5"> Kachinsky</font>

182
00:09:50,399 --> 00:09:58,269
<font color="#E5E5E5">it's pretty old</font><font color="#CCCCCC"> it's not about the</font>

183
00:09:53,649 --> 00:10:02,470
latest<font color="#E5E5E5"> version of</font><font color="#CCCCCC"> e latest one is 11</font>

184
00:09:58,269 --> 00:10:05,259
<font color="#E5E5E5">it's was developed for skylake</font>

185
00:10:02,470 --> 00:10:08,139
architecture and now was there a<font color="#E5E5E5"> sky</font>

186
00:10:05,259 --> 00:10:13,779
like and catalytic process or work on<font color="#CCCCCC"> m</font>

187
00:10:08,139 --> 00:10:16,959
<font color="#E5E5E5">e 11 and this one for older version of a</font>

188
00:10:13,779 --> 00:10:19,179
me but it<font color="#E5E5E5"> still contains a lot of</font>

189
00:10:16,959 --> 00:10:23,859
interesting<font color="#CCCCCC"> facts and i</font><font color="#E5E5E5"> recommend it</font>

190
00:10:19,179 --> 00:10:26,589
strongly<font color="#CCCCCC"> and here is a e xi project on</font>

191
00:10:23,860 --> 00:10:28,910
the github<font color="#E5E5E5"> it's our code that helps</font><font color="#CCCCCC"> you</font>

192
00:10:26,589 --> 00:10:33,050
<font color="#E5E5E5">to split</font>

193
00:10:28,910 --> 00:10:35,769
image<font color="#CCCCCC"> me region to partition extract</font>

194
00:10:33,050 --> 00:10:39,790
modules and after that you are<font color="#CCCCCC"> able to</font>

195
00:10:35,769 --> 00:10:42,620
for example disassemble them<font color="#E5E5E5"> because</font>

196
00:10:39,790 --> 00:10:49,430
previous version<font color="#E5E5E5"> of management engine</font>

197
00:10:42,620 --> 00:10:55,579
uses some not not so common<font color="#CCCCCC"> cpu type</font><font color="#E5E5E5"> arc</font>

198
00:10:49,430 --> 00:10:58,099
and from<font color="#CCCCCC"> m11 they use x86 architecture</font>

199
00:10:55,579 --> 00:11:00,109
so it's very<font color="#E5E5E5"> easy</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> disassemble it</font>

200
00:10:58,100 --> 00:11:05,149
because there<font color="#E5E5E5"> are a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> perfect tools</font>

201
00:11:00,110 --> 00:11:07,209
available<font color="#E5E5E5"> for that so let's start</font>

202
00:11:05,149 --> 00:11:12,079
<font color="#CCCCCC">looking at intervals of the</font><font color="#E5E5E5"> management</font>

203
00:11:07,209 --> 00:11:13,579
<font color="#E5E5E5">engine file system when you find</font><font color="#CCCCCC"> a my</font>

204
00:11:12,079 --> 00:11:16,399
<font color="#CCCCCC">first partition</font><font color="#E5E5E5"> you could easily</font>

205
00:11:13,579 --> 00:11:19,579
discover that it could be<font color="#E5E5E5"> split it on</font>

206
00:11:16,399 --> 00:11:23,690
separate<font color="#E5E5E5"> pages every page is 8 kilobytes</font>

207
00:11:19,579 --> 00:11:28,189
inside and it's in size and every 12th

208
00:11:23,690 --> 00:11:30,800
page is system page system<font color="#CCCCCC"> page doesn't</font>

209
00:11:28,190 --> 00:11:34,339
<font color="#E5E5E5">contains data but contains information</font>

210
00:11:30,800 --> 00:11:38,660
that<font color="#CCCCCC"> is necessary to</font><font color="#E5E5E5"> recover</font><font color="#CCCCCC"> that data</font>

211
00:11:34,339 --> 00:11:41,959
<font color="#E5E5E5">to to build it at the file level</font><font color="#CCCCCC"> there</font>

212
00:11:38,660 --> 00:11:45,680
is<font color="#E5E5E5"> always one empty page page that not</font>

213
00:11:41,959 --> 00:11:49,130
use it<font color="#E5E5E5"> later by system data nor by file</font>

214
00:11:45,680 --> 00:11:52,000
data and all other pages are data<font color="#E5E5E5"> pages</font>

215
00:11:49,130 --> 00:11:56,630
and usually<font color="#CCCCCC"> as they are the most</font>

216
00:11:52,000 --> 00:12:00,410
valuable<font color="#E5E5E5"> and they occupies the most</font>

217
00:11:56,630 --> 00:12:03,339
number<font color="#CCCCCC"> of pages</font><font color="#E5E5E5"> and here is like see</font>

218
00:12:00,410 --> 00:12:07,730
<font color="#E5E5E5">like definition of how to calculate</font>

219
00:12:03,339 --> 00:12:11,750
<font color="#E5E5E5">number of data and system pages every</font>

220
00:12:07,730 --> 00:12:15,259
system and data page starts from<font color="#E5E5E5"> page</font>

221
00:12:11,750 --> 00:12:17,660
header page here<font color="#E5E5E5"> starts with</font><font color="#CCCCCC"> fixed fixes</font>

222
00:12:15,259 --> 00:12:19,399
signature<font color="#CCCCCC"> which fixes value and the</font><font color="#E5E5E5"> only</font>

223
00:12:17,660 --> 00:12:23,959
page that doesn't doesn't<font color="#E5E5E5"> have that</font>

224
00:12:19,399 --> 00:12:26,300
value<font color="#E5E5E5"> is empty page</font><font color="#CCCCCC"> then there</font><font color="#E5E5E5"> is very</font>

225
00:12:23,959 --> 00:12:29,479
important field<font color="#E5E5E5"> us an update sequence</font>

226
00:12:26,300 --> 00:12:32,510
number<font color="#E5E5E5"> this is sequential number when</font>

227
00:12:29,480 --> 00:12:35,750
you erase some page and<font color="#CCCCCC"> write</font>

228
00:12:32,510 --> 00:12:41,200
<font color="#E5E5E5">you hid</font><font color="#CCCCCC"> or for it</font><font color="#E5E5E5"> you just increment the</font>

229
00:12:35,750 --> 00:12:45,710
largest<font color="#CCCCCC"> USN by one</font><font color="#E5E5E5"> so every page</font><font color="#CCCCCC"> of the</font>

230
00:12:41,200 --> 00:12:49,130
storage<font color="#E5E5E5"> have its own</font><font color="#CCCCCC"> USF value and using</font>

231
00:12:45,710 --> 00:12:54,410
this value<font color="#E5E5E5"> you could find in which order</font>

232
00:12:49,130 --> 00:12:57,350
pages<font color="#E5E5E5"> was</font><font color="#CCCCCC"> erase it next field stores</font><font color="#E5E5E5"> the</font>

233
00:12:54,410 --> 00:12:59,540
<font color="#E5E5E5">number of erases and I believe</font><font color="#CCCCCC"> it's use</font>

234
00:12:57,350 --> 00:13:02,300
it for we're leveling because<font color="#CCCCCC"> without it</font>

235
00:12:59,540 --> 00:13:06,920
it's impossible<font color="#E5E5E5"> to discover how many</font>

236
00:13:02,300 --> 00:13:11,180
times<font color="#CCCCCC"> the page was raised a next field</font>

237
00:13:06,920 --> 00:13:14,780
<font color="#CCCCCC">I called</font><font color="#E5E5E5"> next</font><font color="#CCCCCC"> raised field</font>

238
00:13:11,180 --> 00:13:17,359
it contains<font color="#E5E5E5"> index of the page that would</font>

239
00:13:14,780 --> 00:13:20,420
be erase it next I believe<font color="#CCCCCC"> it's kind of</font>

240
00:13:17,360 --> 00:13:25,040
strategic planning<font color="#E5E5E5"> for where we're</font>

241
00:13:20,420 --> 00:13:28,010
leveling for file system<font color="#E5E5E5"> this names just</font>

242
00:13:25,040 --> 00:13:33,380
just my guesses it's not documented by

243
00:13:28,010 --> 00:13:39,170
<font color="#E5E5E5">Intel so</font><font color="#CCCCCC"> I add names</font><font color="#E5E5E5"> by my own decision</font>

244
00:13:33,380 --> 00:13:42,020
<font color="#E5E5E5">and final data field is first chunk this</font>

245
00:13:39,170 --> 00:13:45,160
field is<font color="#CCCCCC"> 0 it for system page</font><font color="#E5E5E5"> and</font>

246
00:13:42,020 --> 00:13:47,270
contains some value for data pages<font color="#E5E5E5"> and</font>

247
00:13:45,160 --> 00:13:48,860
using this field you<font color="#E5E5E5"> could make</font>

248
00:13:47,270 --> 00:13:52,819
<font color="#E5E5E5">distinguish between system and data</font>

249
00:13:48,860 --> 00:13:56,030
pages then there is 1 by checksum<font color="#E5E5E5"> of all</font>

250
00:13:52,820 --> 00:14:00,230
previous<font color="#E5E5E5"> data and the last byte is</font>

251
00:13:56,030 --> 00:14:03,410
always<font color="#E5E5E5"> 0 so when you split your file</font>

252
00:14:00,230 --> 00:14:05,870
system on pages using<font color="#E5E5E5"> this field you</font>

253
00:14:03,410 --> 00:14:08,089
could find<font color="#E5E5E5"> empty page and using first</font>

254
00:14:05,870 --> 00:14:16,970
chunk field you could separate system

255
00:14:08,090 --> 00:14:21,110
and data pages the most<font color="#CCCCCC"> atomic piece of</font>

256
00:14:16,970 --> 00:14:25,420
data in<font color="#CCCCCC"> ME file system is chunk a chunk</font>

257
00:14:21,110 --> 00:14:28,970
is 64<font color="#E5E5E5"> bytes of payload of user</font><font color="#CCCCCC"> data and</font>

258
00:14:25,420 --> 00:14:32,959
<font color="#E5E5E5">2 bytes of checksum checksum is</font>

259
00:14:28,970 --> 00:14:35,530
calculated from data and<font color="#E5E5E5"> index of chunk</font>

260
00:14:32,960 --> 00:14:39,260
<font color="#E5E5E5">all chance system and data have</font>

261
00:14:35,530 --> 00:14:41,510
continuous<font color="#E5E5E5"> numbering numbering starting</font>

262
00:14:39,260 --> 00:14:47,870
from<font color="#E5E5E5"> 0 there are system chance and</font>

263
00:14:41,510 --> 00:14:49,970
<font color="#E5E5E5">some data chunks and on this picture you</font>

264
00:14:47,870 --> 00:14:52,360
<font color="#E5E5E5">could see that the same data for</font>

265
00:14:49,970 --> 00:14:56,450
<font color="#E5E5E5">different chunk IDs produce different</font>

266
00:14:52,360 --> 00:15:01,090
<font color="#E5E5E5">checksum and checksum</font><font color="#CCCCCC"> is 16 bits</font><font color="#E5E5E5"> and</font>

267
00:14:56,450 --> 00:15:05,510
it's easy<font color="#CCCCCC"> to make reversion of CRC</font>

268
00:15:01,090 --> 00:15:07,850
algorithm so if you have<font color="#E5E5E5"> payload and</font>

269
00:15:05,510 --> 00:15:10,310
checksum you could easily reconstruct

270
00:15:07,850 --> 00:15:12,620
the index number<font color="#CCCCCC"> you could calculate</font><font color="#E5E5E5"> it</font>

271
00:15:10,310 --> 00:15:17,780
from other sources but<font color="#CCCCCC"> it's way to check</font>

272
00:15:12,620 --> 00:15:20,950
<font color="#CCCCCC">that you</font><font color="#E5E5E5"> calculated properly when we</font>

273
00:15:17,780 --> 00:15:24,860
speak about system pages they<font color="#CCCCCC"> have</font>

274
00:15:20,950 --> 00:15:28,900
ability of incremental update system

275
00:15:24,860 --> 00:15:32,450
<font color="#E5E5E5">page consists of header then array of</font>

276
00:15:28,900 --> 00:15:34,850
indexes which is<font color="#E5E5E5"> associated I don't know</font>

277
00:15:32,450 --> 00:15:38,360
why it's the<font color="#E5E5E5"> only thing I seen</font>

278
00:15:34,850 --> 00:15:40,280
associated inside<font color="#CCCCCC"> M II</font><font color="#E5E5E5"> probably there is</font>

279
00:15:38,360 --> 00:15:43,430
<font color="#E5E5E5">some mathematical result for</font><font color="#CCCCCC"> that</font>

280
00:15:40,280 --> 00:15:45,949
<font color="#CCCCCC">probably is just attempt</font><font color="#E5E5E5"> to make</font>

281
00:15:43,430 --> 00:15:48,849
analysis of the file system<font color="#CCCCCC"> more</font>

282
00:15:45,950 --> 00:15:53,870
<font color="#E5E5E5">difficult but it's easy to bypass using</font>

283
00:15:48,850 --> 00:15:55,840
<font color="#E5E5E5">CRC reconstruct your C version and then</font>

284
00:15:53,870 --> 00:15:59,620
there is an array of chunks<font color="#E5E5E5"> there are</font>

285
00:15:55,840 --> 00:16:03,170
120 chance and number<font color="#E5E5E5"> of elements in</font>

286
00:15:59,620 --> 00:16:09,830
index array is one more<font color="#E5E5E5"> than number of</font>

287
00:16:03,170 --> 00:16:12,709
chunks<font color="#E5E5E5"> when you see just erase</font><font color="#CCCCCC"> it empty</font>

288
00:16:09,830 --> 00:16:17,120
system page<font color="#E5E5E5"> all elements of the array</font>

289
00:16:12,710 --> 00:16:20,630
<font color="#E5E5E5">are filled with ffff values so it means</font>

290
00:16:17,120 --> 00:16:23,150
that<font color="#E5E5E5"> they are not used elements that</font>

291
00:16:20,630 --> 00:16:26,560
would<font color="#E5E5E5"> be</font><font color="#CCCCCC"> arrays that next would be used</font>

292
00:16:23,150 --> 00:16:29,990
<font color="#CCCCCC">text have higher bits drop it to 0</font><font color="#E5E5E5"> and</font>

293
00:16:26,560 --> 00:16:34,969
when<font color="#E5E5E5"> you write some meaningful</font>

294
00:16:29,990 --> 00:16:38,870
<font color="#E5E5E5">information</font><font color="#CCCCCC"> index of the chunk to some</font>

295
00:16:34,970 --> 00:16:43,260
element<font color="#E5E5E5"> you need to drop second bit too</font>

296
00:16:38,870 --> 00:16:47,310
so this value<font color="#E5E5E5"> never will</font>

297
00:16:43,260 --> 00:16:51,990
we'll have<font color="#CCCCCC"> two upper bits</font><font color="#E5E5E5"> set in one</font>

298
00:16:47,310 --> 00:16:56,569
state<font color="#E5E5E5"> so I don't know why they</font><font color="#CCCCCC"> used to</font>

299
00:16:51,990 --> 00:17:00,360
<font color="#E5E5E5">bits probably</font><font color="#CCCCCC"> its way of support</font>

300
00:16:56,570 --> 00:17:03,600
transaction<font color="#E5E5E5"> so you need to write in two</font>

301
00:17:00,360 --> 00:17:06,329
different<font color="#E5E5E5"> pieces of system page you need</font>

302
00:17:03,600 --> 00:17:10,050
<font color="#E5E5E5">to modify index value and you need to</font>

303
00:17:06,329 --> 00:17:13,169
save data<font color="#E5E5E5"> in chunks array so you</font>

304
00:17:10,050 --> 00:17:15,959
couldn't did it in one<font color="#CCCCCC"> write</font><font color="#E5E5E5"> operation</font>

305
00:17:13,170 --> 00:17:18,870
and if for<font color="#E5E5E5"> example system</font><font color="#CCCCCC"> file system</font>

306
00:17:15,959 --> 00:17:21,630
power failure will happen between<font color="#E5E5E5"> zit</font>

307
00:17:18,869 --> 00:17:26,849
varieties<font color="#CCCCCC"> right</font><font color="#E5E5E5"> this system will be in</font>

308
00:17:21,630 --> 00:17:29,160
<font color="#E5E5E5">unstable conditions and probably second</font>

309
00:17:26,849 --> 00:17:31,350
bit<font color="#CCCCCC"> is used just</font><font color="#E5E5E5"> to make that</font>

310
00:17:29,160 --> 00:17:34,770
transaction<font color="#CCCCCC"> start the transaction ended</font>

311
00:17:31,350 --> 00:17:37,980
I don't know exactly

312
00:17:34,770 --> 00:17:41,760
data pages<font color="#E5E5E5"> are little bit simpler they</font>

313
00:17:37,980 --> 00:17:45,390
have a set of chunks<font color="#E5E5E5"> there are 122 of</font>

314
00:17:41,760 --> 00:17:50,400
them<font color="#E5E5E5"> and they have array of parts above</font>

315
00:17:45,390 --> 00:17:54,620
bytes<font color="#E5E5E5"> that contains marks either chunk</font>

316
00:17:50,400 --> 00:17:57,179
is occupied by data or not initially<font color="#CCCCCC"> all</font>

317
00:17:54,620 --> 00:18:01,559
elements of that array are filled with

318
00:17:57,179 --> 00:18:05,730
<font color="#CCCCCC">FF value and when some chunk is</font><font color="#E5E5E5"> store it</font>

319
00:18:01,559 --> 00:18:08,610
<font color="#E5E5E5">it's dropped to</font><font color="#CCCCCC"> zero</font><font color="#E5E5E5"> and as I said in</font>

320
00:18:05,730 --> 00:18:13,020
shader there is a number<font color="#CCCCCC"> of the first</font>

321
00:18:08,610 --> 00:18:15,990
chunk<font color="#E5E5E5"> in this index of the first chunk</font>

322
00:18:13,020 --> 00:18:19,559
that<font color="#E5E5E5"> store it within this page so when</font>

323
00:18:15,990 --> 00:18:22,620
you use the index<font color="#E5E5E5"> of data chunk you just</font>

324
00:18:19,559 --> 00:18:25,080
find proper page you<font color="#E5E5E5"> just find offset</font>

325
00:18:22,620 --> 00:18:27,989
within that page look<font color="#E5E5E5"> at the free</font>

326
00:18:25,080 --> 00:18:30,419
elements array and see if<font color="#E5E5E5"> it's store it</font>

327
00:18:27,990 --> 00:18:34,980
or not and extracted data it's<font color="#E5E5E5"> very easy</font>

328
00:18:30,420 --> 00:18:37,980
<font color="#E5E5E5">operation</font><font color="#CCCCCC"> so and this light you</font><font color="#E5E5E5"> could</font>

329
00:18:34,980 --> 00:18:41,780
see the logical process<font color="#CCCCCC"> of</font>

330
00:18:37,980 --> 00:18:45,059
reconstruction of data<font color="#E5E5E5"> area of the</font><font color="#CCCCCC"> m</font><font color="#E5E5E5"> FS</font>

331
00:18:41,780 --> 00:18:47,070
<font color="#E5E5E5">number of that data chance over the</font><font color="#CCCCCC"> file</font>

332
00:18:45,059 --> 00:18:49,710
system just plain multiplication of

333
00:18:47,070 --> 00:18:52,980
number<font color="#CCCCCC"> of data pages</font><font color="#E5E5E5"> and the number of</font>

334
00:18:49,710 --> 00:18:54,820
chunks<font color="#E5E5E5"> on one data page and to</font>

335
00:18:52,980 --> 00:18:57,970
<font color="#E5E5E5">reconstruct all</font>

336
00:18:54,820 --> 00:19:01,389
set of chunks<font color="#E5E5E5"> you need just enumerate</font>

337
00:18:57,970 --> 00:19:04,450
<font color="#CCCCCC">every data pages and and rate</font><font color="#E5E5E5"> all chunks</font>

338
00:19:01,390 --> 00:19:07,090
within that page<font color="#E5E5E5"> every chunk every date</font>

339
00:19:04,450 --> 00:19:11,920
a chunk<font color="#CCCCCC"> store</font><font color="#E5E5E5"> it on the</font><font color="#CCCCCC"> file system only</font>

340
00:19:07,090 --> 00:19:14,379
<font color="#CCCCCC">once</font><font color="#E5E5E5"> so it's very easy to find it for 16</font>

341
00:19:11,920 --> 00:19:18,690
pages<font color="#E5E5E5"> reconstruction process is little</font>

342
00:19:14,380 --> 00:19:23,680
bit complicated<font color="#CCCCCC"> number logical number of</font>

343
00:19:18,690 --> 00:19:26,140
system chunks is much less than capacity

344
00:19:23,680 --> 00:19:29,320
of<font color="#E5E5E5"> system pages so system pages could</font>

345
00:19:26,140 --> 00:19:32,110
store more system<font color="#E5E5E5"> chance that it's</font>

346
00:19:29,320 --> 00:19:35,080
necessary because system chunks<font color="#CCCCCC"> could be</font>

347
00:19:32,110 --> 00:19:38,620
stored in arbitrary<font color="#CCCCCC"> order and you could</font>

348
00:19:35,080 --> 00:19:41,409
just<font color="#CCCCCC"> incrementally update any chunk so</font>

349
00:19:38,620 --> 00:19:43,169
you need to enumerate system pages in

350
00:19:41,410 --> 00:19:47,820
<font color="#E5E5E5">update sequence number order</font>

351
00:19:43,170 --> 00:19:52,870
<font color="#E5E5E5">then you need to decode index of every</font>

352
00:19:47,820 --> 00:19:56,939
chunk<font color="#E5E5E5"> on the page and store it data in</font>

353
00:19:52,870 --> 00:20:00,459
output array<font color="#E5E5E5"> and it is possible that</font>

354
00:19:56,940 --> 00:20:02,740
<font color="#E5E5E5">some chunks will be overwritten twice or</font>

355
00:20:00,460 --> 00:20:08,470
<font color="#E5E5E5">ten times</font><font color="#CCCCCC"> its normal time</font>

356
00:20:02,740 --> 00:20:12,120
because when driver for<font color="#CCCCCC"> m</font><font color="#E5E5E5"> FS updates</font>

357
00:20:08,470 --> 00:20:16,690
<font color="#E5E5E5">data its tries to make as little</font>

358
00:20:12,120 --> 00:20:20,199
<font color="#CCCCCC">races as possible and it just rewrite</font>

359
00:20:16,690 --> 00:20:25,290
overwrite some pieces of system<font color="#E5E5E5"> area to</font>

360
00:20:20,200 --> 00:20:28,470
avoid additional additional<font color="#E5E5E5"> erases and</font>

361
00:20:25,290 --> 00:20:32,770
when you rebuild the whole system<font color="#E5E5E5"> area</font>

362
00:20:28,470 --> 00:20:36,160
<font color="#E5E5E5">you could find that inside it</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> is</font>

363
00:20:32,770 --> 00:20:40,090
<font color="#E5E5E5">two fields first one is the</font><font color="#CCCCCC"> volume of</font>

364
00:20:36,160 --> 00:20:43,000
the volume<font color="#CCCCCC"> header</font><font color="#E5E5E5"> I'm a first volume</font>

365
00:20:40,090 --> 00:20:46,659
volume consists of signatures<font color="#E5E5E5"> that have</font>

366
00:20:43,000 --> 00:20:50,080
<font color="#E5E5E5">always constant value also there is 30</font>

367
00:20:46,660 --> 00:20:52,540
bit values values<font color="#E5E5E5"> that always hold one I</font>

368
00:20:50,080 --> 00:20:55,810
believe<font color="#CCCCCC"> its kind of version</font><font color="#E5E5E5"> of the of</font>

369
00:20:52,540 --> 00:20:59,299
the file<font color="#E5E5E5"> system and I never see anything</font>

370
00:20:55,810 --> 00:21:03,220
<font color="#E5E5E5">else than one</font>

371
00:20:59,299 --> 00:21:07,029
then there is<font color="#CCCCCC"> total</font><font color="#E5E5E5"> amount of bytes in</font>

372
00:21:03,220 --> 00:21:11,269
<font color="#E5E5E5">system error and data error together</font><font color="#CCCCCC"> and</font>

373
00:21:07,029 --> 00:21:13,730
lost field<font color="#E5E5E5"> 16 bits is number of files</font>

374
00:21:11,269 --> 00:21:16,999
<font color="#CCCCCC">that could distort</font><font color="#E5E5E5"> within this file</font>

375
00:21:13,730 --> 00:21:21,590
system<font color="#E5E5E5"> this number is</font><font color="#CCCCCC"> used in the second</font>

376
00:21:16,999 --> 00:21:25,340
field<font color="#E5E5E5"> second field is looks like final</font>

377
00:21:21,590 --> 00:21:31,100
location table<font color="#E5E5E5"> from all the file system</font>

378
00:21:25,340 --> 00:21:34,039
from Microsoft<font color="#CCCCCC"> there is</font><font color="#E5E5E5"> number</font><font color="#CCCCCC"> of</font>

379
00:21:31,100 --> 00:21:37,639
entries here is number<font color="#E5E5E5"> of data chunks</font>

380
00:21:34,039 --> 00:21:40,249
and number<font color="#E5E5E5"> of files so first and files</font>

381
00:21:37,639 --> 00:21:42,408
elements contains information about

382
00:21:40,249 --> 00:21:45,619
<font color="#CCCCCC">finding the beginning of the file</font><font color="#E5E5E5"> and</font>

383
00:21:42,409 --> 00:21:49,009
all others contains information about

384
00:21:45,619 --> 00:21:52,699
<font color="#E5E5E5">how</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> find continuation of the file and</font>

385
00:21:49,009 --> 00:21:56,989
<font color="#E5E5E5">its indexing is very very looks looks</font>

386
00:21:52,700 --> 00:22:01,999
very like<font color="#CCCCCC"> lack of old dos file</font><font color="#E5E5E5"> system</font>

387
00:21:56,989 --> 00:22:04,970
<font color="#E5E5E5">fat this diagram represents the sequence</font>

388
00:22:01,999 --> 00:22:07,850
of action you need to<font color="#E5E5E5"> reconstruct the</font>

389
00:22:04,970 --> 00:22:10,429
content of the file<font color="#CCCCCC"> at the</font><font color="#E5E5E5"> lowest level</font>

390
00:22:07,850 --> 00:22:13,850
of amethyst<font color="#CCCCCC"> there is no file</font><font color="#E5E5E5"> names there</font>

391
00:22:10,429 --> 00:22:17,210
is<font color="#E5E5E5"> only numbers number of files that</font>

392
00:22:13,850 --> 00:22:22,399
<font color="#E5E5E5">could be stored hold in volume header</font>

393
00:22:17,210 --> 00:22:25,190
and as input to<font color="#E5E5E5"> the data retrieval</font>

394
00:22:22,399 --> 00:22:28,668
function you have<font color="#E5E5E5"> file index you look</font>

395
00:22:25,190 --> 00:22:33,109
into the fat and extract index of the

396
00:22:28,669 --> 00:22:36,889
<font color="#CCCCCC">first block if it's have some predefined</font>

397
00:22:33,109 --> 00:22:38,678
value 0 or<font color="#E5E5E5"> minus 2 in 16-bit signed</font>

398
00:22:36,889 --> 00:22:41,359
version

399
00:22:38,679 --> 00:22:47,659
this means that file doesn't exist<font color="#CCCCCC"> I</font>

400
00:22:41,359 --> 00:22:52,668
believe<font color="#CCCCCC"> 0 is for file that not store it</font>

401
00:22:47,659 --> 00:22:56,600
or erase it and<font color="#E5E5E5"> minus 2 is vice-versa</font>

402
00:22:52,669 --> 00:22:57,409
but<font color="#CCCCCC"> I don't know</font><font color="#E5E5E5"> both of them works in</font>

403
00:22:56,600 --> 00:23:01,070
the same way

404
00:22:57,409 --> 00:23:04,580
if this<font color="#E5E5E5"> value is</font><font color="#CCCCCC"> start an</font><font color="#E5E5E5"> index no such</font>

405
00:23:01,070 --> 00:23:07,529
file exists another special value minus

406
00:23:04,580 --> 00:23:10,870
1<font color="#E5E5E5"> is used to</font>

407
00:23:07,529 --> 00:23:14,350
to display<font color="#E5E5E5"> that this file is empty so</font>

408
00:23:10,870 --> 00:23:20,279
there is no data<font color="#CCCCCC"> chance</font><font color="#E5E5E5"> is occupied</font><font color="#CCCCCC"> by</font>

409
00:23:14,350 --> 00:23:23,168
that file and in other case<font color="#E5E5E5"> you extract</font>

410
00:23:20,279 --> 00:23:27,669
data chunks that<font color="#CCCCCC"> are referred by</font><font color="#E5E5E5"> that</font>

411
00:23:23,169 --> 00:23:30,640
index<font color="#E5E5E5"> and you need to extract next index</font>

412
00:23:27,669 --> 00:23:33,669
from the same array from<font color="#E5E5E5"> fat file</font>

413
00:23:30,640 --> 00:23:37,960
location<font color="#E5E5E5"> table</font><font color="#CCCCCC"> and if it's</font><font color="#E5E5E5"> value less</font>

414
00:23:33,669 --> 00:23:41,080
than<font color="#CCCCCC"> 44</font><font color="#E5E5E5"> less or equal than 44 64 then</font>

415
00:23:37,960 --> 00:23:43,299
<font color="#E5E5E5">this is last chunk in a sequence and you</font>

416
00:23:41,080 --> 00:23:46,480
<font color="#E5E5E5">need to</font><font color="#CCCCCC"> output specified number number</font>

417
00:23:43,299 --> 00:23:48,820
of bytes<font color="#CCCCCC"> to the output stream and file</font>

418
00:23:46,480 --> 00:23:50,679
<font color="#E5E5E5">processing is</font><font color="#CCCCCC"> finished otherwise you</font>

419
00:23:48,820 --> 00:23:56,230
need to<font color="#E5E5E5"> output the whole chunk and</font>

420
00:23:50,679 --> 00:24:01,799
repeat the process<font color="#E5E5E5"> so it's if you knew</font>

421
00:23:56,230 --> 00:24:07,870
how fat<font color="#E5E5E5"> table works it's very very</font>

422
00:24:01,799 --> 00:24:10,090
similar<font color="#E5E5E5"> with one difference MF s doesn't</font>

423
00:24:07,870 --> 00:24:13,479
store the<font color="#E5E5E5"> length of the file in the</font>

424
00:24:10,090 --> 00:24:17,080
direct way<font color="#E5E5E5"> so the only way to find the</font>

425
00:24:13,480 --> 00:24:21,100
lengths you need to enumerate all chunks

426
00:24:17,080 --> 00:24:24,250
in a sequence using<font color="#E5E5E5"> this way and when</font>

427
00:24:21,100 --> 00:24:27,459
you find love<font color="#E5E5E5"> chunk you will knew the</font>

428
00:24:24,250 --> 00:24:30,340
<font color="#E5E5E5">length of the file so it's very</font><font color="#CCCCCC"> easy to</font>

429
00:24:27,460 --> 00:24:32,860
extract<font color="#E5E5E5"> anything and any file</font><font color="#CCCCCC"> with some</font>

430
00:24:30,340 --> 00:24:37,270
specified<font color="#CCCCCC"> number from the</font><font color="#E5E5E5"> MF s using</font>

431
00:24:32,860 --> 00:24:40,990
<font color="#CCCCCC">this information</font><font color="#E5E5E5"> and in my previous</font>

432
00:24:37,270 --> 00:24:44,830
presentation<font color="#E5E5E5"> that was mentioned at the</font>

433
00:24:40,990 --> 00:24:47,169
beginning<font color="#E5E5E5"> I described that we find a lot</font>

434
00:24:44,830 --> 00:24:51,340
<font color="#CCCCCC">of information</font><font color="#E5E5E5"> by extracting resources</font>

435
00:24:47,169 --> 00:24:56,409
from feet<font color="#CCCCCC"> exact</font><font color="#E5E5E5"> feet</font>

436
00:24:51,340 --> 00:25:00,270
it's short for flesh imaging tool that's

437
00:24:56,409 --> 00:25:02,950
<font color="#CCCCCC">two provided</font><font color="#E5E5E5"> by Intel to vendors to</font>

438
00:25:00,270 --> 00:25:08,500
companies<font color="#CCCCCC"> that produce master abortion</font>

439
00:25:02,950 --> 00:25:11,950
and notebooks<font color="#E5E5E5"> and actually it's not a</font>

440
00:25:08,500 --> 00:25:16,120
public binary<font color="#E5E5E5"> so you are unable to</font>

441
00:25:11,950 --> 00:25:17,170
<font color="#CCCCCC">download it from Intel site but options</font>

442
00:25:16,120 --> 00:25:20,709
<font color="#E5E5E5">that</font>

443
00:25:17,170 --> 00:25:23,680
that file is included<font color="#E5E5E5"> in bills update</font>

444
00:25:20,710 --> 00:25:28,000
that<font color="#CCCCCC"> deliver</font><font color="#E5E5E5"> for example from a store</font>

445
00:25:23,680 --> 00:25:31,240
<font color="#CCCCCC">website to a sir customers so you</font><font color="#E5E5E5"> could</font>

446
00:25:28,000 --> 00:25:33,850
easily find this binary extract

447
00:25:31,240 --> 00:25:36,490
<font color="#CCCCCC">resources and there will be three</font><font color="#E5E5E5"> files</font>

448
00:25:33,850 --> 00:25:39,490
three binary<font color="#E5E5E5"> files among the other</font>

449
00:25:36,490 --> 00:25:42,610
resources they are<font color="#E5E5E5"> prototypes for</font>

450
00:25:39,490 --> 00:25:47,760
different<font color="#E5E5E5"> for file system of different</font>

451
00:25:42,610 --> 00:25:52,360
capacity<font color="#E5E5E5"> so there is the main number</font>

452
00:25:47,760 --> 00:25:57,820
number of file slots from 2056<font color="#E5E5E5"> up to</font>

453
00:25:52,360 --> 00:26:00,070
1024<font color="#CCCCCC"> and on different platforms with</font>

454
00:25:57,820 --> 00:26:03,340
different management<font color="#E5E5E5"> engine</font><font color="#CCCCCC"> modules</font>

455
00:26:00,070 --> 00:26:09,460
<font color="#E5E5E5">required a different number of files to</font>

456
00:26:03,340 --> 00:26:14,159
<font color="#E5E5E5">be stored</font><font color="#CCCCCC"> in to uses different file</font>

457
00:26:09,460 --> 00:26:19,390
system sizes so it's<font color="#E5E5E5"> just kind of</font>

458
00:26:14,160 --> 00:26:23,650
statistics<font color="#E5E5E5"> and now when we know how to</font>

459
00:26:19,390 --> 00:26:28,570
extract<font color="#E5E5E5"> data from the file system how to</font>

460
00:26:23,650 --> 00:26:34,210
<font color="#E5E5E5">extract memberid files we need to see</font>

461
00:26:28,570 --> 00:26:37,090
how<font color="#CCCCCC"> Amy uses file system how it</font><font color="#E5E5E5"> transfer</font>

462
00:26:34,210 --> 00:26:41,520
transform it to<font color="#CCCCCC"> a common file system</font>

463
00:26:37,090 --> 00:26:46,600
with names with directories<font color="#E5E5E5"> and so on</font>

464
00:26:41,520 --> 00:26:50,680
<font color="#E5E5E5">some number file members have predefined</font>

465
00:26:46,600 --> 00:26:54,100
<font color="#E5E5E5">meaning and use it in many different</font>

466
00:26:50,680 --> 00:26:57,520
<font color="#E5E5E5">places for example</font><font color="#CCCCCC"> files</font><font color="#E5E5E5"> number two and</font>

467
00:26:54,100 --> 00:27:00,340
<font color="#CCCCCC">three use it for</font><font color="#E5E5E5"> creating an</font><font color="#CCCCCC"> T reply</font>

468
00:26:57,520 --> 00:27:03,250
tables and to<font color="#E5E5E5"> replace one of security</font>

469
00:27:00,340 --> 00:27:07,120
mechanisms<font color="#E5E5E5"> that's supported by e it</font>

470
00:27:03,250 --> 00:27:12,910
prevents you from just reverting to

471
00:27:07,120 --> 00:27:18,550
previous file state by direct<font color="#E5E5E5"> write to</font>

472
00:27:12,910 --> 00:27:21,160
em FS they have two counters and<font color="#CCCCCC"> two to</font>

473
00:27:18,550 --> 00:27:23,590
<font color="#CCCCCC">places to store a counter one within</font>

474
00:27:21,160 --> 00:27:25,810
<font color="#E5E5E5">file metadata and another one in entre</font>

475
00:27:23,590 --> 00:27:28,510
play table<font color="#E5E5E5"> and counters should match if</font>

476
00:27:25,810 --> 00:27:30,710
they didn't match file system considered

477
00:27:28,510 --> 00:27:34,129
to be damaged

478
00:27:30,710 --> 00:27:39,070
so there is file number<font color="#E5E5E5"> for</font><font color="#CCCCCC"> that use it</font>

479
00:27:34,130 --> 00:27:41,990
to migrate data from previous to next

480
00:27:39,070 --> 00:27:45,620
<font color="#CCCCCC">SVN secure</font><font color="#E5E5E5"> version number I will speak</font>

481
00:27:41,990 --> 00:27:50,570
<font color="#CCCCCC">about</font><font color="#E5E5E5"> that little bit later</font><font color="#CCCCCC"> five file</font>

482
00:27:45,620 --> 00:27:52,699
<font color="#E5E5E5">number five manager</font><font color="#CCCCCC"> use it</font><font color="#E5E5E5"> for storing</font>

483
00:27:50,570 --> 00:27:56,020
<font color="#E5E5E5">filesystem</font><font color="#CCCCCC"> quotas there are two types of</font>

484
00:27:52,700 --> 00:28:01,429
quarter quarter for amount of data and

485
00:27:56,020 --> 00:28:04,610
<font color="#E5E5E5">quota for number</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> erases so this quote</font>

486
00:28:01,429 --> 00:28:08,140
could<font color="#E5E5E5"> be used to limit some specific</font>

487
00:28:04,610 --> 00:28:13,760
model of<font color="#CCCCCC"> a management</font><font color="#E5E5E5"> engine by</font>

488
00:28:08,140 --> 00:28:16,909
performing excessive number of<font color="#E5E5E5"> writes</font>

489
00:28:13,760 --> 00:28:21,140
<font color="#E5E5E5">that leads to excessive number</font><font color="#CCCCCC"> to erases</font>

490
00:28:16,909 --> 00:28:24,799
so they help to preserve<font color="#CCCCCC"> denial</font><font color="#E5E5E5"> of</font>

491
00:28:21,140 --> 00:28:31,190
<font color="#E5E5E5">service on</font><font color="#CCCCCC"> flesh by</font><font color="#E5E5E5"> limiting number of</font>

492
00:28:24,799 --> 00:28:34,730
operation by some module file number six

493
00:28:31,190 --> 00:28:39,470
is very interesting one<font color="#CCCCCC"> it's later</font>

494
00:28:34,730 --> 00:28:42,080
method to name<font color="#CCCCCC"> into CPG which holds</font>

495
00:28:39,470 --> 00:28:45,409
<font color="#E5E5E5">default state</font><font color="#CCCCCC"> of the file system when</font>

496
00:28:42,080 --> 00:28:48,649
you<font color="#E5E5E5"> initially get motherboards for</font>

497
00:28:45,409 --> 00:28:51,559
<font color="#E5E5E5">example it have not deployed management</font>

498
00:28:48,649 --> 00:28:55,370
engine it can till contains<font color="#CCCCCC"> only this</font>

499
00:28:51,559 --> 00:28:58,668
file or<font color="#E5E5E5"> probably the</font><font color="#CCCCCC"> next one</font><font color="#E5E5E5"> and at the</font>

500
00:28:55,370 --> 00:29:03,830
<font color="#E5E5E5">first start</font><font color="#CCCCCC"> its read the data</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> that</font>

501
00:28:58,669 --> 00:29:07,250
file and<font color="#CCCCCC"> Explorer explode it and create</font>

502
00:29:03,830 --> 00:29:09,408
the whole file system and file number

503
00:29:07,250 --> 00:29:12,830
seven<font color="#E5E5E5"> contains the same data but</font>

504
00:29:09,409 --> 00:29:17,600
difference between them that this one

505
00:29:12,830 --> 00:29:20,270
could<font color="#CCCCCC"> be created by vendor by companies</font>

506
00:29:17,600 --> 00:29:25,250
<font color="#CCCCCC">that produce motherboard</font><font color="#E5E5E5"> but this one is</font>

507
00:29:20,270 --> 00:29:30,620
created by Intel<font color="#E5E5E5"> it have hash storage</font>

508
00:29:25,250 --> 00:29:34,380
inside one<font color="#CCCCCC"> of records within header of</font>

509
00:29:30,620 --> 00:29:37,889
the called partition directory

510
00:29:34,380 --> 00:29:42,630
<font color="#E5E5E5">Emme region and any manipulation of this</font>

511
00:29:37,890 --> 00:29:44,669
file will lead to an ability to boot<font color="#E5E5E5"> so</font>

512
00:29:42,630 --> 00:29:47,520
management<font color="#E5E5E5"> engine will will not work</font>

513
00:29:44,669 --> 00:29:52,140
<font color="#CCCCCC">properly</font><font color="#E5E5E5"> but this file could be</font>

514
00:29:47,520 --> 00:29:54,980
manipulated in any way it's again<font color="#E5E5E5"> flash</font>

515
00:29:52,140 --> 00:29:58,470
<font color="#E5E5E5">image to could be used for for that and</font>

516
00:29:54,980 --> 00:30:01,230
I will discuss<font color="#CCCCCC"> about in terms</font><font color="#E5E5E5"> of the</font>

517
00:29:58,470 --> 00:30:04,410
file right<font color="#CCCCCC"> now and the</font><font color="#E5E5E5"> foul number</font><font color="#CCCCCC"> eight</font>

518
00:30:01,230 --> 00:30:07,530
contains home<font color="#E5E5E5"> directories so starting</font>

519
00:30:04,410 --> 00:30:11,280
from file<font color="#E5E5E5"> eight there is</font><font color="#CCCCCC"> filenames</font>

520
00:30:07,530 --> 00:30:14,090
appears so<font color="#E5E5E5"> inside file</font><font color="#CCCCCC"> eight there are</font>

521
00:30:11,280 --> 00:30:20,129
<font color="#E5E5E5">information that necessary to extract</font>

522
00:30:14,090 --> 00:30:22,949
files like in Linux or Windows<font color="#E5E5E5"> here is a</font>

523
00:30:20,130 --> 00:30:27,090
short<font color="#CCCCCC"> description of in</font><font color="#E5E5E5"> terms of integer</font>

524
00:30:22,950 --> 00:30:29,730
<font color="#CCCCCC">or</font><font color="#E5E5E5"> fits CPG file starts with 32 bits</font>

525
00:30:27,090 --> 00:30:32,270
<font color="#E5E5E5">value that holds number of Records and</font>

526
00:30:29,730 --> 00:30:35,460
then records with the<font color="#E5E5E5"> pixel structure</font>

527
00:30:32,270 --> 00:30:38,460
it's I<font color="#E5E5E5"> believe</font><font color="#CCCCCC"> it's self-described</font><font color="#E5E5E5"> I</font>

528
00:30:35,460 --> 00:30:41,789
don't need to read<font color="#CCCCCC"> it user ad group</font><font color="#E5E5E5"> idea</font>

529
00:30:38,460 --> 00:30:46,230
UNIX likes rights and the most

530
00:30:41,789 --> 00:30:55,280
<font color="#E5E5E5">interesting features beats in mode field</font>

531
00:30:46,230 --> 00:31:00,030
<font color="#CCCCCC">I a letter I means that that file have</font>

532
00:30:55,280 --> 00:31:03,510
integrity<font color="#CCCCCC"> protection</font><font color="#E5E5E5"> enables so it will</font>

533
00:31:00,030 --> 00:31:05,070
be<font color="#E5E5E5"> protected with a schmuck and you will</font>

534
00:31:03,510 --> 00:31:08,299
be unable to modify it without

535
00:31:05,070 --> 00:31:11,039
<font color="#E5E5E5">destroying that touch my H Mac value</font><font color="#CCCCCC"> II</font>

536
00:31:08,299 --> 00:31:15,240
means that file should be encrypted<font color="#E5E5E5"> and</font>

537
00:31:11,039 --> 00:31:20,908
it will be encrypted with<font color="#CCCCCC"> is 100</font>

538
00:31:15,240 --> 00:31:26,130
I believe 2056<font color="#E5E5E5"> in counter mode and later</font>

539
00:31:20,909 --> 00:31:29,250
<font color="#E5E5E5">a means that file is subject to</font><font color="#CCCCCC"> anti</font>

540
00:31:26,130 --> 00:31:35,490
reply protection also<font color="#CCCCCC"> there</font><font color="#E5E5E5"> is</font>

541
00:31:29,250 --> 00:31:39,450
additional option field<font color="#E5E5E5"> we see that</font>

542
00:31:35,490 --> 00:31:43,679
there<font color="#CCCCCC"> are four beats use it</font><font color="#E5E5E5"> in this</font>

543
00:31:39,450 --> 00:31:46,250
<font color="#E5E5E5">field for Emmy 11 the lowest beat means</font>

544
00:31:43,679 --> 00:31:49,909
that that file could<font color="#CCCCCC"> be overridden</font>

545
00:31:46,250 --> 00:31:54,830
by<font color="#CCCCCC"> fitzy Fiji</font><font color="#E5E5E5"> so if in in Tulsa Fiji</font>

546
00:31:49,909 --> 00:31:58,990
<font color="#E5E5E5">this bit have zero data from fitzy Fiji</font>

547
00:31:54,830 --> 00:31:58,990
would not be used at all<font color="#CCCCCC"> for this file</font>

548
00:32:00,730 --> 00:32:09,230
number<font color="#CCCCCC"> bit number one means</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> MC</font>

549
00:32:05,210 --> 00:32:12,309
process<font color="#CCCCCC"> could modify the state of that</font>

550
00:32:09,230 --> 00:32:15,770
file<font color="#E5E5E5"> and there is some communication</font>

551
00:32:12,309 --> 00:32:19,010
mechanism<font color="#CCCCCC"> between</font><font color="#E5E5E5"> hosts between central</font>

552
00:32:15,770 --> 00:32:22,158
processor and<font color="#E5E5E5"> a me exists that</font><font color="#CCCCCC"> allows to</font>

553
00:32:19,010 --> 00:32:27,080
manage<font color="#E5E5E5"> that files files with such type</font>

554
00:32:22,159 --> 00:32:30,620
<font color="#CCCCCC">of access and two other bits still</font>

555
00:32:27,080 --> 00:32:33,559
unknown we have no idea what they for

556
00:32:30,620 --> 00:32:38,330
but for<font color="#E5E5E5"> some files</font><font color="#CCCCCC"> they enable and for</font>

557
00:32:33,559 --> 00:32:41,389
other files they not<font color="#E5E5E5"> and finally every</font>

558
00:32:38,330 --> 00:32:46,730
file descriptor have length of the file

559
00:32:41,390 --> 00:32:48,620
and offset of<font color="#CCCCCC"> the data within the cpg</font>

560
00:32:46,730 --> 00:32:53,390
file that allows<font color="#E5E5E5"> you to extract extract</font>

561
00:32:48,620 --> 00:32:57,678
<font color="#E5E5E5">content of that file and here is just</font>

562
00:32:53,390 --> 00:33:00,260
dump of<font color="#E5E5E5"> a piece of</font><font color="#CCCCCC"> MFI of CPG</font><font color="#E5E5E5"> file and</font>

563
00:32:57,679 --> 00:33:04,429
you could see<font color="#E5E5E5"> that there is names there</font>

564
00:33:00,260 --> 00:33:06,610
is double dot names that means that you

565
00:33:04,429 --> 00:33:10,730
<font color="#E5E5E5">returned back to</font><font color="#CCCCCC"> previous directory and</font>

566
00:33:06,610 --> 00:33:13,370
here<font color="#CCCCCC"> is</font><font color="#E5E5E5"> expansion of the passes and for</font>

567
00:33:10,730 --> 00:33:16,549
<font color="#E5E5E5">example you could see on file CT that</font>

568
00:33:13,370 --> 00:33:19,668
will would reside in home<font color="#CCCCCC"> bub city</font>

569
00:33:16,549 --> 00:33:22,610
directory<font color="#E5E5E5"> in</font><font color="#CCCCCC"> whole bob directory</font><font color="#E5E5E5"> file</font>

570
00:33:19,669 --> 00:33:25,820
name city it has<font color="#E5E5E5"> no additional</font>

571
00:33:22,610 --> 00:33:28,490
attributes like integrity<font color="#E5E5E5"> check so you</font>

572
00:33:25,820 --> 00:33:32,330
are<font color="#E5E5E5"> able</font><font color="#CCCCCC"> to modify it in in any</font>

573
00:33:28,490 --> 00:33:34,760
desirable way and if you will attend

574
00:33:32,330 --> 00:33:40,720
<font color="#CCCCCC">that speech of my colleagues there would</font>

575
00:33:34,760 --> 00:33:44,960
be a lot<font color="#CCCCCC"> of speech about this file and</font>

576
00:33:40,720 --> 00:33:48,950
when system is<font color="#E5E5E5"> deployed file number</font>

577
00:33:44,960 --> 00:33:53,900
<font color="#E5E5E5">eight appeared on the file system it</font>

578
00:33:48,950 --> 00:33:58,039
contains directory which actually is set

579
00:33:53,900 --> 00:33:58,880
of file records<font color="#E5E5E5"> file records always 24</font>

580
00:33:58,039 --> 00:34:03,530
bytes

581
00:33:58,880 --> 00:34:08,600
<font color="#CCCCCC">scrapp by this this structure again</font>

582
00:34:03,530 --> 00:34:14,810
there<font color="#CCCCCC"> is file or within MF s file nor</font>

583
00:34:08,600 --> 00:34:18,230
have structures<font color="#E5E5E5"> that built from</font>

584
00:34:14,810 --> 00:34:23,590
different pieces<font color="#E5E5E5"> for file systems that</font>

585
00:34:18,230 --> 00:34:27,500
<font color="#E5E5E5">store it on the</font><font color="#CCCCCC"> flesh highest four bits</font>

586
00:34:23,590 --> 00:34:30,500
<font color="#E5E5E5">contains file system ID and for</font><font color="#CCCCCC"> MF</font><font color="#E5E5E5"> s</font>

587
00:34:27,500 --> 00:34:33,530
it's always<font color="#E5E5E5"> one so it means that it</font>

588
00:34:30,500 --> 00:34:36,440
should<font color="#E5E5E5"> be processed by handlers</font><font color="#CCCCCC"> at</font>

589
00:34:33,530 --> 00:34:38,690
support flash file system and<font color="#CCCCCC"> we'll</font><font color="#E5E5E5"> I</font>

590
00:34:36,440 --> 00:34:42,889
will note another types of file system

591
00:34:38,690 --> 00:34:47,690
little<font color="#E5E5E5"> bit later</font><font color="#CCCCCC"> lowest ten lowest</font>

592
00:34:42,889 --> 00:34:50,000
<font color="#E5E5E5">twelve bits describes files file no</font>

593
00:34:47,690 --> 00:34:53,000
number that<font color="#CCCCCC"> could be used</font><font color="#E5E5E5"> to extract</font>

594
00:34:50,000 --> 00:34:56,239
<font color="#E5E5E5">content of file from</font><font color="#CCCCCC"> NFS by number as</font>

595
00:34:53,000 --> 00:34:59,360
was described earlier<font color="#E5E5E5"> and other bits use</font>

596
00:34:56,239 --> 00:35:04,520
it for<font color="#CCCCCC"> assault</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> different types</font><font color="#E5E5E5"> of</font>

597
00:34:59,360 --> 00:35:07,010
file system<font color="#E5E5E5"> this four bits</font><font color="#CCCCCC"> use it always</font>

598
00:35:04,520 --> 00:35:09,620
<font color="#E5E5E5">in this way and all other could be</font><font color="#CCCCCC"> use</font>

599
00:35:07,010 --> 00:35:13,150
<font color="#CCCCCC">it in any different way for</font><font color="#E5E5E5"> example on</font>

600
00:35:09,620 --> 00:35:16,190
the on file<font color="#E5E5E5"> on some file systems that</font>

601
00:35:13,150 --> 00:35:19,670
<font color="#CCCCCC">bits can contains</font><font color="#E5E5E5"> contains information</font>

602
00:35:16,190 --> 00:35:23,750
about<font color="#E5E5E5"> where data is</font><font color="#CCCCCC"> stored and how long</font>

603
00:35:19,670 --> 00:35:27,260
is it for some constant records but for

604
00:35:23,750 --> 00:35:31,100
<font color="#E5E5E5">home file system it's always use it in</font>

605
00:35:27,260 --> 00:35:36,320
this<font color="#E5E5E5"> way there is another salt value 16</font>

606
00:35:31,100 --> 00:35:40,310
<font color="#E5E5E5">bits and when you explode the file</font>

607
00:35:36,320 --> 00:35:44,390
system it will will be converted to dump

608
00:35:40,310 --> 00:35:47,870
like this<font color="#E5E5E5"> one this means that it's</font>

609
00:35:44,390 --> 00:35:51,410
directory file<font color="#CCCCCC"> protected with integrity</font>

610
00:35:47,870 --> 00:35:55,220
file protected with encryption user ID

611
00:35:51,410 --> 00:36:01,000
group ID salt value here is another salt

612
00:35:55,220 --> 00:36:03,709
value and there are additional bits

613
00:36:01,000 --> 00:36:06,950
<font color="#E5E5E5">appears here integrity encryption and</font>

614
00:36:03,710 --> 00:36:09,200
replay are copied<font color="#CCCCCC"> from Intel CPG during</font>

615
00:36:06,950 --> 00:36:12,049
deployment<font color="#CCCCCC"> or created by</font><font color="#E5E5E5"> some</font><font color="#CCCCCC"> process</font>

616
00:36:09,200 --> 00:36:16,308
that<font color="#E5E5E5"> writes new files to file system</font>

617
00:36:12,049 --> 00:36:18,739
<font color="#E5E5E5">this bit</font><font color="#CCCCCC"> very interesting because there</font>

618
00:36:16,309 --> 00:36:21,499
<font color="#E5E5E5">are two types of encryption</font>

619
00:36:18,739 --> 00:36:27,499
<font color="#CCCCCC">two sets of</font><font color="#E5E5E5"> encryption keys</font><font color="#CCCCCC"> use it in</font>

620
00:36:21,499 --> 00:36:30,729
<font color="#CCCCCC">Intel em FS</font><font color="#E5E5E5"> they called Intel and non in</font>

621
00:36:27,499 --> 00:36:34,129
Tokyo<font color="#CCCCCC"> I don't know why they have such</font>

622
00:36:30,729 --> 00:36:37,249
<font color="#E5E5E5">separation but some files protected with</font>

623
00:36:34,130 --> 00:36:38,170
non<font color="#E5E5E5"> Intel keys and some other files with</font>

624
00:36:37,249 --> 00:36:41,269
<font color="#E5E5E5">Intel keys</font>

625
00:36:38,170 --> 00:36:44,269
so using this bit<font color="#E5E5E5"> you could find which</font>

626
00:36:41,269 --> 00:36:51,189
type of<font color="#CCCCCC"> Keys use it here is always known</font>

627
00:36:44,269 --> 00:36:55,249
<font color="#E5E5E5">Intel key and if file have</font><font color="#CCCCCC"> bit.i</font>

628
00:36:51,189 --> 00:36:58,670
integrity enabled then<font color="#E5E5E5"> raw file that</font>

629
00:36:55,249 --> 00:37:05,678
could be<font color="#CCCCCC"> extracted from file system</font><font color="#E5E5E5"> ends</font>

630
00:36:58,670 --> 00:37:08,269
with 52 by its trailer which contains

631
00:37:05,679 --> 00:37:11,329
additional security information<font color="#CCCCCC"> for that</font>

632
00:37:08,269 --> 00:37:14,959
<font color="#E5E5E5">file layout of</font><font color="#CCCCCC"> that information</font><font color="#E5E5E5"> shown</font><font color="#CCCCCC"> on</font>

633
00:37:11,329 --> 00:37:19,400
this picture<font color="#E5E5E5"> it's always have a 'shmock</font>

634
00:37:14,959 --> 00:37:22,669
<font color="#E5E5E5">value that check file</font><font color="#CCCCCC"> integrity</font><font color="#E5E5E5"> it have</font>

635
00:37:19,400 --> 00:37:26,299
bit field that contains properties<font color="#E5E5E5"> about</font>

636
00:37:22,670 --> 00:37:30,019
<font color="#CCCCCC">int reply encryption and so on</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> two</font>

637
00:37:26,299 --> 00:37:33,049
<font color="#CCCCCC">beats</font><font color="#E5E5E5"> this bit contains index in anti</font>

638
00:37:30,019 --> 00:37:35,359
reply table we have two files file

639
00:37:33,049 --> 00:37:39,619
number<font color="#E5E5E5"> two and file I must read probably</font>

640
00:37:35,359 --> 00:37:42,769
a game<font color="#E5E5E5"> it's allows make atomic operation</font>

641
00:37:39,619 --> 00:37:49,749
when you need multiple writes to file

642
00:37:42,769 --> 00:37:57,859
<font color="#E5E5E5">system to change your data and there is</font>

643
00:37:49,749 --> 00:38:00,979
<font color="#E5E5E5">Union that have months</font><font color="#CCCCCC"> four is counter</font>

644
00:37:57,859 --> 00:38:04,308
mode that unique for<font color="#CCCCCC"> every file and have</font>

645
00:38:00,979 --> 00:38:07,069
random and counter values that<font color="#CCCCCC"> store it</font>

646
00:38:04,309 --> 00:38:09,049
in<font color="#CCCCCC"> a file metadata</font><font color="#E5E5E5"> and in anti reply</font>

647
00:38:07,069 --> 00:38:12,288
table and these two values<font color="#CCCCCC"> should match</font>

648
00:38:09,049 --> 00:38:18,140
otherwise<font color="#E5E5E5"> file</font><font color="#CCCCCC"> considered to</font><font color="#E5E5E5"> be altered</font>

649
00:38:12,289 --> 00:38:22,489
in<font color="#E5E5E5"> in proper way and files that have I</font>

650
00:38:18,140 --> 00:38:24,170
<font color="#E5E5E5">beat sets have always such type</font><font color="#CCCCCC"> of</font>

651
00:38:22,489 --> 00:38:26,450
security<font color="#E5E5E5"> blockers and</font>

652
00:38:24,170 --> 00:38:29,450
and files<font color="#E5E5E5"> number</font><font color="#CCCCCC"> two three and eight</font>

653
00:38:26,450 --> 00:38:32,540
have that security blow up<font color="#CCCCCC"> too</font><font color="#E5E5E5"> because</font>

654
00:38:29,450 --> 00:38:36,950
they<font color="#E5E5E5"> don't have direct reference from</font>

655
00:38:32,540 --> 00:38:39,200
<font color="#CCCCCC">the file system they are the files to</font><font color="#E5E5E5"> s3</font>

656
00:38:36,950 --> 00:38:43,520
<font color="#E5E5E5">outside the file system and file eight</font>

657
00:38:39,200 --> 00:38:45,649
is beginning of<font color="#E5E5E5"> the file system</font><font color="#CCCCCC"> so they</font>

658
00:38:43,520 --> 00:38:48,650
are always<font color="#CCCCCC"> protected with integrity but</font>

659
00:38:45,650 --> 00:38:54,290
not protected<font color="#CCCCCC"> nasara by</font><font color="#E5E5E5"> anti replay nor</font>

660
00:38:48,650 --> 00:38:57,470
<font color="#E5E5E5">by encryption and to calculate H mark</font>

661
00:38:54,290 --> 00:39:04,509
<font color="#E5E5E5">you need</font><font color="#CCCCCC"> two new secret keys that use it</font>

662
00:38:57,470 --> 00:39:09,169
to control<font color="#E5E5E5"> H mark value and you need to</font>

663
00:39:04,510 --> 00:39:12,619
hash file data<font color="#E5E5E5"> you need to</font><font color="#CCCCCC"> hash the</font>

664
00:39:09,170 --> 00:39:16,369
whole security structure with H<font color="#CCCCCC"> Mak zero</font>

665
00:39:12,619 --> 00:39:19,490
<font color="#E5E5E5">and also there is file</font><font color="#CCCCCC"> no and salt</font><font color="#E5E5E5"> that</font>

666
00:39:16,369 --> 00:39:22,309
was extracted<font color="#CCCCCC"> from file from directory</font>

667
00:39:19,490 --> 00:39:25,609
are involved in<font color="#E5E5E5"> calculation calculation</font>

668
00:39:22,309 --> 00:39:28,250
<font color="#E5E5E5">of H mark so you</font><font color="#CCCCCC"> just couldn't swap two</font>

669
00:39:25,609 --> 00:39:31,339
files<font color="#CCCCCC"> because they have different file</font>

670
00:39:28,250 --> 00:39:33,710
numbers and you couldn't manipulate them

671
00:39:31,339 --> 00:39:39,410
easily<font color="#CCCCCC"> you need you need to</font><font color="#E5E5E5"> know a smart</font>

672
00:39:33,710 --> 00:39:41,720
key which is secret so using

673
00:39:39,410 --> 00:39:44,960
<font color="#E5E5E5">confirmation I provide earlier you are</font>

674
00:39:41,720 --> 00:39:50,439
able<font color="#E5E5E5"> to extract data you could find</font>

675
00:39:44,960 --> 00:39:50,440
is it encrypt it or not oops sorry

676
00:39:56,940 --> 00:40:04,910
and now let's turn to security part of

677
00:40:01,320 --> 00:40:08,040
the research<font color="#E5E5E5"> actually there are up to</font><font color="#CCCCCC"> 10</font>

678
00:40:04,910 --> 00:40:12,420
security<font color="#E5E5E5"> keys could be used</font><font color="#CCCCCC"> to provide</font>

679
00:40:08,040 --> 00:40:16,740
security for files stored in<font color="#CCCCCC"> em FS two</font>

680
00:40:12,420 --> 00:40:19,470
of them called rpm<font color="#E5E5E5"> C keys</font><font color="#CCCCCC"> replay</font>

681
00:40:16,740 --> 00:40:21,930
protection protection monotonic counter

682
00:40:19,470 --> 00:40:27,000
actually its feature of the<font color="#E5E5E5"> spi flash</font>

683
00:40:21,930 --> 00:40:31,680
chip<font color="#E5E5E5"> we never see such chips with such</font>

684
00:40:27,000 --> 00:40:34,170
option enabled<font color="#CCCCCC"> but this one kind</font><font color="#E5E5E5"> of</font>

685
00:40:31,680 --> 00:40:40,649
<font color="#E5E5E5">hardware counters that you can could</font>

686
00:40:34,170 --> 00:40:43,170
manipulate<font color="#E5E5E5"> if there is no H</font><font color="#CCCCCC"> rpm C</font>

687
00:40:40,650 --> 00:40:46,830
counter available management engine

688
00:40:43,170 --> 00:40:51,390
<font color="#CCCCCC">assimilated by software</font><font color="#E5E5E5"> software version</font>

689
00:40:46,830 --> 00:40:54,450
of counter<font color="#E5E5E5"> and as I said owners there</font>

690
00:40:51,390 --> 00:40:58,129
are two set of<font color="#E5E5E5"> key Intel and non in</font>

691
00:40:54,450 --> 00:41:00,439
Turkey's and set contains<font color="#E5E5E5"> two keys</font>

692
00:40:58,130 --> 00:41:02,760
<font color="#E5E5E5">integrity key and</font><font color="#CCCCCC"> contingent</font>

693
00:41:00,440 --> 00:41:05,340
<font color="#E5E5E5">confidentiality key</font><font color="#CCCCCC"> confidentiality</font><font color="#E5E5E5"> keys</font>

694
00:41:02,760 --> 00:41:08,820
<font color="#E5E5E5">you use it for calculated</font><font color="#CCCCCC"> H mark and</font>

695
00:41:05,340 --> 00:41:10,980
integrity<font color="#E5E5E5"> sorry integrity use it for</font>

696
00:41:08,820 --> 00:41:14,460
calculate H mark and<font color="#E5E5E5"> confidentiality use</font>

697
00:41:10,980 --> 00:41:18,480
it for is<font color="#E5E5E5"> encryption and also there</font><font color="#CCCCCC"> are</font>

698
00:41:14,460 --> 00:41:26,100
two versions<font color="#CCCCCC"> of the key previous and</font>

699
00:41:18,480 --> 00:41:29,730
current keys<font color="#E5E5E5"> when you when Intel decided</font>

700
00:41:26,100 --> 00:41:32,220
that there is some problem<font color="#E5E5E5"> with current</font>

701
00:41:29,730 --> 00:41:34,440
version of management engine and you

702
00:41:32,220 --> 00:41:37,490
need to upgrade it they could increase

703
00:41:34,440 --> 00:41:41,640
secure version number<font color="#E5E5E5"> and after</font><font color="#CCCCCC"> that</font>

704
00:41:37,490 --> 00:41:47,370
<font color="#E5E5E5">there are no standard</font><font color="#CCCCCC"> way to roll back</font>

705
00:41:41,640 --> 00:41:49,560
<font color="#E5E5E5">to previous version of SVM so for the</font>

706
00:41:47,370 --> 00:41:53,040
long times the current<font color="#E5E5E5"> version of SVM</font>

707
00:41:49,560 --> 00:41:57,210
was one after latest patches that Intel

708
00:41:53,040 --> 00:42:00,470
published<font color="#E5E5E5"> several weeks ago the current</font>

709
00:41:57,210 --> 00:42:03,600
version is<font color="#CCCCCC"> three if you install the</font>

710
00:42:00,470 --> 00:42:06,200
firmware version<font color="#CCCCCC"> 3 you will be</font><font color="#E5E5E5"> unable</font><font color="#CCCCCC"> to</font>

711
00:42:03,600 --> 00:42:09,480
return back<font color="#E5E5E5"> to firmware version</font><font color="#CCCCCC"> 1 and</font>

712
00:42:06,200 --> 00:42:10,680
<font color="#CCCCCC">the calculation</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> keys of all of</font>

713
00:42:09,480 --> 00:42:15,240
<font color="#E5E5E5">that Keys accepts</font>

714
00:42:10,680 --> 00:42:19,200
<font color="#CCCCCC">pmc involves us via</font><font color="#E5E5E5"> number so if your</font>

715
00:42:15,240 --> 00:42:22,410
new keys for old<font color="#E5E5E5"> file system it's not</font>

716
00:42:19,200 --> 00:42:25,680
<font color="#E5E5E5">suitable</font><font color="#CCCCCC"> for new one and that</font><font color="#E5E5E5"> keys are</font>

717
00:42:22,410 --> 00:42:30,359
calculated at<font color="#CCCCCC"> the very early stage of</font><font color="#E5E5E5"> a</font>

718
00:42:25,680 --> 00:42:33,990
<font color="#CCCCCC">mere running and there is special checks</font>

719
00:42:30,360 --> 00:42:37,380
that current as the inversion is above

720
00:42:33,990 --> 00:42:40,709
than one and there<font color="#E5E5E5"> is special partition</font>

721
00:42:37,380 --> 00:42:44,790
named<font color="#E5E5E5"> peace van contains previous as via</font>

722
00:42:40,710 --> 00:42:47,400
<font color="#E5E5E5">number and in this case two additional</font>

723
00:42:44,790 --> 00:42:49,290
keys would be calculated<font color="#CCCCCC"> an additional</font>

724
00:42:47,400 --> 00:42:51,980
set of<font color="#E5E5E5"> keys could be would be calculated</font>

725
00:42:49,290 --> 00:42:54,750
<font color="#CCCCCC">and</font><font color="#E5E5E5"> when</font><font color="#CCCCCC"> file system discovers that</font>

726
00:42:51,980 --> 00:42:56,040
there is attempt<font color="#E5E5E5"> to access files that</font>

727
00:42:54,750 --> 00:42:59,100
<font color="#CCCCCC">protected with integrity of</font>

728
00:42:56,040 --> 00:42:59,610
confidentiality<font color="#E5E5E5"> and current keys doesn't</font>

729
00:42:59,100 --> 00:43:01,830
work

730
00:42:59,610 --> 00:43:04,050
it tries prayer<font color="#E5E5E5"> schemes they are</font>

731
00:43:01,830 --> 00:43:06,630
available and this allows migration

732
00:43:04,050 --> 00:43:13,940
after you change a firmware version to

733
00:43:06,630 --> 00:43:18,770
Nu SVM also it should<font color="#CCCCCC"> be said that</font>

734
00:43:13,940 --> 00:43:24,480
<font color="#E5E5E5">hardware of management engine have some</font>

735
00:43:18,770 --> 00:43:25,950
additional hardware devices that helps

736
00:43:24,480 --> 00:43:29,550
to provide security

737
00:43:25,950 --> 00:43:33,149
they have special engines for is RSA and

738
00:43:29,550 --> 00:43:35,760
<font color="#CCCCCC">hashing</font><font color="#E5E5E5"> and H mark also they have a</font>

739
00:43:33,150 --> 00:43:38,430
secure<font color="#CCCCCC"> key storage</font><font color="#E5E5E5"> that allows you to</font>

740
00:43:35,760 --> 00:43:41,610
store key inside it and use<font color="#CCCCCC"> it</font><font color="#E5E5E5"> in</font>

741
00:43:38,430 --> 00:43:44,460
conjunction with hashing a schmuck and

742
00:43:41,610 --> 00:43:47,630
<font color="#CCCCCC">iOS encryption</font><font color="#E5E5E5"> but you will be unable</font><font color="#CCCCCC"> to</font>

743
00:43:44,460 --> 00:43:51,450
extract data from<font color="#E5E5E5"> that storage and</font>

744
00:43:47,630 --> 00:43:55,290
access<font color="#CCCCCC"> to</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> Hardware</font><font color="#E5E5E5"> security</font>

745
00:43:51,450 --> 00:43:57,899
features<font color="#E5E5E5"> very limited so only</font><font color="#CCCCCC"> roam</font>

746
00:43:55,290 --> 00:44:01,140
initial code that runs on<font color="#E5E5E5"> the Emmy</font>

747
00:43:57,900 --> 00:44:04,530
module named Bob bring up and model

748
00:44:01,140 --> 00:44:06,960
krypter have access to that devices none

749
00:44:04,530 --> 00:44:09,720
<font color="#E5E5E5">of other models able to perform crypt</font>

750
00:44:06,960 --> 00:44:15,350
operation or<font color="#CCCCCC"> for example use</font><font color="#E5E5E5"> keys</font><font color="#CCCCCC"> throw</font>

751
00:44:09,720 --> 00:44:19,580
<font color="#CCCCCC">stored</font><font color="#E5E5E5"> in SKS also Intel designed very</font>

752
00:44:15,350 --> 00:44:23,549
<font color="#CCCCCC">secure process of deviation of that</font><font color="#E5E5E5"> keys</font>

753
00:44:19,580 --> 00:44:27,390
at<font color="#E5E5E5"> the very beginning in</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> room</font>

754
00:44:23,550 --> 00:44:30,900
some data loaded<font color="#E5E5E5"> from device</font><font color="#CCCCCC"> called gem</font>

755
00:44:27,390 --> 00:44:34,560
generator<font color="#CCCCCC"> I don't know how its created I</font>

756
00:44:30,900 --> 00:44:38,490
will talk little about it on the next

757
00:44:34,560 --> 00:44:40,770
slide<font color="#E5E5E5"> but</font><font color="#CCCCCC"> it's the</font><font color="#E5E5E5"> most valuable secret</font>

758
00:44:38,490 --> 00:44:42,950
data for the whole<font color="#CCCCCC"> and II</font><font color="#E5E5E5"> it's kind of</font>

759
00:44:40,770 --> 00:44:50,520
root of trust<font color="#E5E5E5"> the data stored in gem</font>

760
00:44:42,950 --> 00:44:53,460
<font color="#E5E5E5">then the data loaded</font><font color="#CCCCCC"> to SK SSH Maki</font><font color="#E5E5E5"> then</font>

761
00:44:50,520 --> 00:44:55,680
<font color="#E5E5E5">next key is</font><font color="#CCCCCC"> derive it and</font><font color="#E5E5E5"> store it in</font>

762
00:44:53,460 --> 00:45:00,120
memory for short time after that<font color="#E5E5E5"> it</font>

763
00:44:55,680 --> 00:45:03,660
<font color="#E5E5E5">rapid with is encryption</font><font color="#CCCCCC"> and store it in</font>

764
00:45:00,120 --> 00:45:06,240
memory and plaintext key is removed<font color="#E5E5E5"> from</font>

765
00:45:03,660 --> 00:45:09,270
memory<font color="#CCCCCC"> so</font><font color="#E5E5E5"> at that point there</font><font color="#CCCCCC"> is no</font>

766
00:45:06,240 --> 00:45:14,839
plain text version<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the key available</font>

767
00:45:09,270 --> 00:45:17,850
<font color="#E5E5E5">even inside a me only only rapid version</font>

768
00:45:14,840 --> 00:45:19,770
to use this key<font color="#E5E5E5"> you need to unwrap it</font>

769
00:45:17,850 --> 00:45:21,960
<font color="#E5E5E5">but you are unable to unwrap it in</font>

770
00:45:19,770 --> 00:45:23,970
memory<font color="#CCCCCC"> you are able</font><font color="#E5E5E5"> to unwrap it only in</font>

771
00:45:21,960 --> 00:45:26,940
secure key storage<font color="#E5E5E5"> and then you could</font>

772
00:45:23,970 --> 00:45:30,180
use it<font color="#E5E5E5"> from</font><font color="#CCCCCC"> sakura case storage</font><font color="#E5E5E5"> in</font>

773
00:45:26,940 --> 00:45:33,810
conjunction with encryption<font color="#E5E5E5"> or h mac</font>

774
00:45:30,180 --> 00:45:36,450
calculation<font color="#E5E5E5"> so if you</font><font color="#CCCCCC"> on this</font><font color="#E5E5E5"> point you</font>

775
00:45:33,810 --> 00:45:38,610
<font color="#E5E5E5">are unable</font><font color="#CCCCCC"> to extract this key this key</font>

776
00:45:36,450 --> 00:45:40,950
exists in memory of a very short time

777
00:45:38,610 --> 00:45:43,800
<font color="#E5E5E5">but if you have direct</font><font color="#CCCCCC"> access to</font>

778
00:45:40,950 --> 00:45:47,339
encryption device to secure case storage

779
00:45:43,800 --> 00:45:51,750
<font color="#E5E5E5">and is which</font><font color="#CCCCCC"> mac you</font><font color="#E5E5E5"> could repeat the</font>

780
00:45:47,340 --> 00:45:57,290
calculation of the skis and<font color="#E5E5E5"> derives</font><font color="#CCCCCC"> key</font>

781
00:45:51,750 --> 00:46:00,570
by your own and this table describes

782
00:45:57,290 --> 00:46:03,920
<font color="#E5E5E5">different aspects of key usage that</font><font color="#CCCCCC"> we</font>

783
00:46:00,570 --> 00:46:07,620
discover from<font color="#E5E5E5"> management engine</font>

784
00:46:03,920 --> 00:46:10,830
<font color="#E5E5E5">plaintext ki nazar confidentiality</font><font color="#CCCCCC"> nor</font>

785
00:46:07,620 --> 00:46:13,080
integrity<font color="#E5E5E5"> never</font><font color="#CCCCCC"> stirred</font><font color="#E5E5E5"> on the flesh in</font>

786
00:46:10,830 --> 00:46:18,270
any form so you are unable<font color="#CCCCCC"> to read them</font>

787
00:46:13,080 --> 00:46:22,380
from the flesh actually the story in

788
00:46:18,270 --> 00:46:25,920
memory for<font color="#E5E5E5"> for long time between</font><font color="#CCCCCC"> prot</font>

789
00:46:22,380 --> 00:46:30,510
<font color="#E5E5E5">switches and so on they always wrap it</font>

790
00:46:25,920 --> 00:46:32,850
on the key number 21<font color="#E5E5E5"> so if you find the</font>

791
00:46:30,510 --> 00:46:35,250
<font color="#CCCCCC">way</font><font color="#E5E5E5"> to read the memory you will get</font>

792
00:46:32,850 --> 00:46:36,549
nothing<font color="#CCCCCC"> you</font><font color="#E5E5E5"> will get only encrypted key</font>

793
00:46:35,250 --> 00:46:39,459
but you<font color="#E5E5E5"> don't know</font>

794
00:46:36,549 --> 00:46:44,969
the decryption<font color="#E5E5E5"> key and you are unable to</font>

795
00:46:39,459 --> 00:46:50,049
decrypt it in memory<font color="#E5E5E5"> using access to</font><font color="#CCCCCC"> SKS</font>

796
00:46:44,969 --> 00:46:53,709
all keys are depends on<font color="#CCCCCC"> svm value</font><font color="#E5E5E5"> so if</font>

797
00:46:50,049 --> 00:46:56,229
you are<font color="#E5E5E5"> able to exploit some specific</font>

798
00:46:53,709 --> 00:47:00,328
version of management engine for<font color="#CCCCCC"> example</font>

799
00:46:56,229 --> 00:47:04,239
with<font color="#CCCCCC"> SVN one that would be nothing</font><font color="#E5E5E5"> that</font>

800
00:47:00,329 --> 00:47:09,130
<font color="#E5E5E5">Kevin couldn't help you</font><font color="#CCCCCC"> by x4 exploiting</font>

801
00:47:04,239 --> 00:47:13,089
a new version<font color="#E5E5E5"> of SVM all secrets depends</font>

802
00:47:09,130 --> 00:47:17,309
on data obtained<font color="#CCCCCC"> from Jen device</font><font color="#E5E5E5"> Jen</font>

803
00:47:13,089 --> 00:47:20,259
device is handled<font color="#E5E5E5"> very careful when Rome</font>

804
00:47:17,309 --> 00:47:23,529
<font color="#E5E5E5">finished its processing and passed</font>

805
00:47:20,259 --> 00:47:29,559
control to<font color="#CCCCCC"> RBE</font><font color="#E5E5E5"> module which is starting</font>

806
00:47:23,529 --> 00:47:33,779
module 4 and E<font color="#E5E5E5"> its empties Jen and race</font>

807
00:47:29,559 --> 00:47:41,279
copy of data<font color="#E5E5E5"> that holds for deriving</font>

808
00:47:33,779 --> 00:47:44,469
purposes so after you after a mere

809
00:47:41,279 --> 00:47:47,140
perform any room any necessary<font color="#E5E5E5"> room</font>

810
00:47:44,469 --> 00:47:51,910
operations there would be no<font color="#CCCCCC"> Jen data</font>

811
00:47:47,140 --> 00:47:57,339
available the<font color="#CCCCCC"> only exclusion we find</font><font color="#E5E5E5"> its</font>

812
00:47:51,910 --> 00:48:02,879
<font color="#CCCCCC">so-called</font><font color="#E5E5E5"> GL MP partition which could be</font>

813
00:47:57,339 --> 00:48:09,788
present<font color="#E5E5E5"> in any file</font><font color="#CCCCCC"> amelie region and</font>

814
00:48:02,880 --> 00:48:14,349
<font color="#CCCCCC">wrong lot code</font><font color="#E5E5E5"> from GL MP partition if</font>

815
00:48:09,789 --> 00:48:20,709
it's<font color="#CCCCCC"> exists and</font><font color="#E5E5E5"> execute it and if there</font>

816
00:48:14,349 --> 00:48:24,459
is some<font color="#E5E5E5"> code that access key</font><font color="#CCCCCC"> it's able</font>

817
00:48:20,709 --> 00:48:30,629
<font color="#E5E5E5">to read gen data and we find new version</font>

818
00:48:24,459 --> 00:48:30,629
of easy use this<font color="#E5E5E5"> operation probably for</font>

819
00:48:31,859 --> 00:48:41,619
purposes<font color="#E5E5E5"> related with digital content</font>

820
00:48:35,439 --> 00:48:46,808
<font color="#CCCCCC">protection and the most</font><font color="#E5E5E5"> unexpected thing</font>

821
00:48:41,619 --> 00:48:48,859
that there are two pieces<font color="#CCCCCC"> of</font><font color="#E5E5E5"> gen secret</font>

822
00:48:46,809 --> 00:48:51,709
for<font color="#E5E5E5"> Intel</font><font color="#CCCCCC"> Keys and non Intel</font>

823
00:48:48,859 --> 00:48:54,319
and if you<font color="#CCCCCC"> manage to run manage engine</font>

824
00:48:51,709 --> 00:48:56,808
<font color="#E5E5E5">management engine under</font><font color="#CCCCCC"> J Tech from</font><font color="#E5E5E5"> the</font>

825
00:48:54,319 --> 00:49:03,469
starting vector<font color="#E5E5E5"> you will be unable</font><font color="#CCCCCC"> to</font>

826
00:48:56,809 --> 00:49:06,380
read anything<font color="#CCCCCC"> from</font><font color="#E5E5E5"> related for</font><font color="#CCCCCC"> Intel</font>

827
00:49:03,469 --> 00:49:07,369
<font color="#CCCCCC">Keys</font><font color="#E5E5E5"> because this piece this part of gem</font>

828
00:49:06,380 --> 00:49:09,739
is disabled

829
00:49:07,369 --> 00:49:12,589
there would be<font color="#E5E5E5"> random value not actual</font>

830
00:49:09,739 --> 00:49:16,819
one but data<font color="#E5E5E5"> related with</font><font color="#CCCCCC"> non</font><font color="#E5E5E5"> Intel key</font>

831
00:49:12,589 --> 00:49:19,959
still there so if Intel<font color="#E5E5E5"> not change</font>

832
00:49:16,819 --> 00:49:23,959
everything<font color="#CCCCCC"> you will be able to</font><font color="#E5E5E5"> derive</font>

833
00:49:19,959 --> 00:49:27,649
keys<font color="#E5E5E5"> that necessary for non Intel</font>

834
00:49:23,959 --> 00:49:31,879
security<font color="#E5E5E5"> files and it will be suitable</font>

835
00:49:27,650 --> 00:49:34,039
for<font color="#E5E5E5"> any version of SVM and most files on</font>

836
00:49:31,880 --> 00:49:36,319
the file system<font color="#E5E5E5"> are protected with non</font>

837
00:49:34,039 --> 00:49:39,769
in<font color="#E5E5E5"> Toki's only this little amount of</font>

838
00:49:36,319 --> 00:49:43,910
models are used for uses<font color="#E5E5E5"> Intel Keys</font>

839
00:49:39,769 --> 00:49:46,939
module<font color="#E5E5E5"> PTT which is TPM software TPM</font>

840
00:49:43,910 --> 00:49:53,558
<font color="#E5E5E5">dull IBM which is Java Virtual Machine</font>

841
00:49:46,940 --> 00:49:53,559
<font color="#E5E5E5">and</font><font color="#CCCCCC"> M C which uses for deployment</font><font color="#E5E5E5"> and</font>

842
00:49:53,650 --> 00:50:01,849
<font color="#E5E5E5">last words about different types of file</font>

843
00:49:57,650 --> 00:50:03,739
system we find<font color="#E5E5E5"> the seven types root</font>

844
00:50:01,849 --> 00:50:07,549
<font color="#E5E5E5">filesystem is constant</font><font color="#CCCCCC"> file system</font>

845
00:50:03,739 --> 00:50:09,079
defined in module<font color="#E5E5E5"> v FS which contains</font>

846
00:50:07,549 --> 00:50:12,349
very<font color="#CCCCCC"> little amount of</font><font color="#E5E5E5"> files but</font>

847
00:50:09,079 --> 00:50:13,069
additional files are mounted to<font color="#CCCCCC"> the root</font>

848
00:50:12,349 --> 00:50:16,880
filesystem

849
00:50:13,069 --> 00:50:21,349
<font color="#E5E5E5">home file system</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> described it further</font>

850
00:50:16,880 --> 00:50:24,319
for this<font color="#E5E5E5"> whole presentation</font><font color="#CCCCCC"> being it's</font>

851
00:50:21,349 --> 00:50:27,529
another types of file systems<font color="#E5E5E5"> that</font>

852
00:50:24,319 --> 00:50:30,229
creates when different binary modules

853
00:50:27,529 --> 00:50:32,449
are extracted and<font color="#E5E5E5"> loaded to</font><font color="#CCCCCC"> the</font>

854
00:50:30,229 --> 00:50:34,640
operating systems they<font color="#CCCCCC"> are available to</font>

855
00:50:32,449 --> 00:50:37,339
<font color="#CCCCCC">the ME operating system</font><font color="#E5E5E5"> they are</font>

856
00:50:34,640 --> 00:50:42,400
<font color="#E5E5E5">available in the bin</font><font color="#CCCCCC"> directory they just</font>

857
00:50:37,339 --> 00:50:45,558
<font color="#CCCCCC">mounted at</font><font color="#E5E5E5"> the directory SAS ROM is</font>

858
00:50:42,400 --> 00:50:47,390
independent non-volatile storage that

859
00:50:45,559 --> 00:50:50,809
holds very little amount of information

860
00:50:47,390 --> 00:50:54,098
<font color="#E5E5E5">on non-volatile suspend</font><font color="#CCCCCC"> Ram and it's</font>

861
00:50:50,809 --> 00:50:57,559
described in bring<font color="#E5E5E5"> gap and VFS modules</font>

862
00:50:54,099 --> 00:51:00,529
<font color="#CCCCCC">FPF</font><font color="#E5E5E5"> it's filled probe</font><font color="#CCCCCC"> field programmable</font>

863
00:50:57,559 --> 00:51:01,590
fuses<font color="#E5E5E5"> its one-time programmable pieces</font>

864
00:51:00,529 --> 00:51:03,870
of memory

865
00:51:01,590 --> 00:51:05,520
and<font color="#CCCCCC"> they're supported by separate model</font>

866
00:51:03,870 --> 00:51:10,880
and not<font color="#E5E5E5"> available</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> several platform</font>

867
00:51:05,520 --> 00:51:14,280
services and their folder is like Linux

868
00:51:10,880 --> 00:51:16,950
holds all special files that could be

869
00:51:14,280 --> 00:51:19,520
used<font color="#E5E5E5"> by different process and</font><font color="#CCCCCC"> my</font>

870
00:51:16,950 --> 00:51:22,230
presentation<font color="#CCCCCC"> from</font><font color="#E5E5E5"> troopers holds</font>

871
00:51:19,520 --> 00:51:25,950
description where to find the names of

872
00:51:22,230 --> 00:51:27,780
<font color="#E5E5E5">that files and there is some funny you</font>

873
00:51:25,950 --> 00:51:30,779
<font color="#E5E5E5">my FSU</font><font color="#CCCCCC"> meit's unified memory</font>

874
00:51:27,780 --> 00:51:32,640
<font color="#E5E5E5">architecture and there is name but no</font>

875
00:51:30,780 --> 00:51:37,320
references<font color="#E5E5E5"> to</font><font color="#CCCCCC"> that file system probably</font>

876
00:51:32,640 --> 00:51:40,740
<font color="#CCCCCC">it's just</font><font color="#E5E5E5"> experiment from</font><font color="#CCCCCC"> Intel so final</font>

877
00:51:37,320 --> 00:51:44,280
words about<font color="#E5E5E5"> my presentation if you</font><font color="#CCCCCC"> have</font>

878
00:51:40,740 --> 00:51:46,799
physical<font color="#E5E5E5"> access</font><font color="#CCCCCC"> to SP a</font><font color="#E5E5E5"> chip you are</font>

879
00:51:44,280 --> 00:51:50,430
able to read<font color="#E5E5E5"> the file system and modify</font>

880
00:51:46,800 --> 00:51:54,170
it<font color="#E5E5E5"> at the lowest level at</font><font color="#CCCCCC"> fees at</font><font color="#E5E5E5"> RF</font><font color="#CCCCCC"> row</font>

881
00:51:50,430 --> 00:51:59,750
<font color="#CCCCCC">file</font><font color="#E5E5E5"> level but</font><font color="#CCCCCC"> you need to know</font><font color="#E5E5E5"> the keys</font>

882
00:51:54,170 --> 00:52:02,610
<font color="#E5E5E5">for a file system if you want to</font>

883
00:51:59,750 --> 00:52:04,260
<font color="#E5E5E5">manipulate with protected files and it's</font>

884
00:52:02,610 --> 00:52:08,900
not too<font color="#E5E5E5"> easy</font>

885
00:52:04,260 --> 00:52:11,340
but despite<font color="#CCCCCC"> Intel designed very</font>

886
00:52:08,900 --> 00:52:12,180
complicated and I believe<font color="#CCCCCC"> Smart Security</font>

887
00:52:11,340 --> 00:52:19,760
<font color="#E5E5E5">model</font>

888
00:52:12,180 --> 00:52:23,910
they left<font color="#E5E5E5"> ability</font><font color="#CCCCCC"> to get secrets from</font>

889
00:52:19,760 --> 00:52:27,360
<font color="#E5E5E5">gen for non</font><font color="#CCCCCC"> intel keys and if you have</font>

890
00:52:23,910 --> 00:52:30,029
exploit in<font color="#E5E5E5"> but module you are able to</font>

891
00:52:27,360 --> 00:52:32,430
recalculate the keys for<font color="#E5E5E5"> the current</font>

892
00:52:30,030 --> 00:52:35,490
<font color="#CCCCCC">version of SVN</font><font color="#E5E5E5"> and you will be able to</font>

893
00:52:32,430 --> 00:52:39,049
manipulate<font color="#E5E5E5"> with any file on the file</font>

894
00:52:35,490 --> 00:52:41,779
<font color="#CCCCCC">system for</font><font color="#E5E5E5"> example if you extract</font>

895
00:52:39,050 --> 00:52:45,030
<font color="#E5E5E5">confidentiality key you will be able to</font>

896
00:52:41,780 --> 00:52:49,260
<font color="#E5E5E5">just decrypt the password that use it</font>

897
00:52:45,030 --> 00:52:54,600
<font color="#E5E5E5">for</font><font color="#CCCCCC"> mt4</font><font color="#E5E5E5"> remote access</font><font color="#CCCCCC"> it's just storage</font>

898
00:52:49,260 --> 00:52:58,980
encrypted by s<font color="#E5E5E5"> and we did that so they</font>

899
00:52:54,600 --> 00:53:02,279
<font color="#E5E5E5">have good security features but not not</font>

900
00:52:58,980 --> 00:53:04,680
not perfect that's all that I want to

901
00:53:02,280 --> 00:53:09,500
say for today<font color="#E5E5E5"> thank you if you have a</font>

902
00:53:04,680 --> 00:53:09,500
questions we have five minutes<font color="#CCCCCC"> thank</font><font color="#E5E5E5"> you</font>

