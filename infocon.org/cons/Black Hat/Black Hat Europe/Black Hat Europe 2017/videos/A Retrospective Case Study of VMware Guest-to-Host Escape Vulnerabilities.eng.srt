1
00:00:00,420 --> 00:00:05,640
thanks everyone for<font color="#E5E5E5"> coming over to</font>

2
00:00:03,750 --> 00:00:07,410
<font color="#CCCCCC">listen to our presentation</font><font color="#E5E5E5"> today and</font>

3
00:00:05,640 --> 00:00:09,179
thank<font color="#E5E5E5"> you black hat for having us</font><font color="#CCCCCC"> this</font>

4
00:00:07,410 --> 00:00:11,940
<font color="#CCCCCC">is indeed a great pleasure to be here</font>

5
00:00:09,179 --> 00:00:14,280
with<font color="#E5E5E5"> you</font><font color="#CCCCCC"> so if you are</font><font color="#E5E5E5"> here</font>

6
00:00:11,940 --> 00:00:16,079
<font color="#E5E5E5">I already</font><font color="#CCCCCC"> assume that you have been you</font>

7
00:00:14,280 --> 00:00:18,990
already know what VMware Workstation and

8
00:00:16,079 --> 00:00:20,759
<font color="#CCCCCC">fusion is so we</font><font color="#E5E5E5"> have been exploring</font>

9
00:00:18,990 --> 00:00:22,650
vulnerabilities in VMware<font color="#E5E5E5"> and VMware</font>

10
00:00:20,760 --> 00:00:24,330
patches for a while now and the

11
00:00:22,650 --> 00:00:26,279
presentation title<font color="#E5E5E5"> the</font><font color="#CCCCCC"> great escape so</font>

12
00:00:24,330 --> 00:00:28,919
via<font color="#CCCCCC"> are kind of</font><font color="#E5E5E5"> summarizes our findings</font>

13
00:00:26,279 --> 00:00:31,710
<font color="#CCCCCC">and what all</font><font color="#E5E5E5"> days to host</font><font color="#CCCCCC"> escape attacks</font>

14
00:00:28,920 --> 00:00:33,059
we<font color="#CCCCCC"> have seen in the recent past</font><font color="#E5E5E5"> so we</font>

15
00:00:31,710 --> 00:00:35,309
have pretty much<font color="#E5E5E5"> lot of content to share</font>

16
00:00:33,059 --> 00:00:36,480
with you today<font color="#E5E5E5"> and with some demos so</font>

17
00:00:35,309 --> 00:00:37,680
what<font color="#CCCCCC"> we will try</font><font color="#E5E5E5"> to do we will try to</font>

18
00:00:36,480 --> 00:00:40,078
push the demos to the end of our

19
00:00:37,680 --> 00:00:45,180
<font color="#E5E5E5">presentation</font><font color="#CCCCCC"> so that we are we are</font><font color="#E5E5E5"> good</font>

20
00:00:40,079 --> 00:00:46,920
with<font color="#CCCCCC"> the timings</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> this is about me my</font>

21
00:00:45,180 --> 00:00:49,140
name<font color="#CCCCCC"> is - I</font><font color="#E5E5E5"> am currently working in</font>

22
00:00:46,920 --> 00:00:51,180
<font color="#E5E5E5">makka philips</font><font color="#CCCCCC"> IPS vulnerability</font><font color="#E5E5E5"> system</font>

23
00:00:49,140 --> 00:00:54,449
as a part of the team my primary job<font color="#E5E5E5"> is</font>

24
00:00:51,180 --> 00:00:59,129
<font color="#E5E5E5">to</font><font color="#CCCCCC"> kind of find new attacks and provide</font>

25
00:00:54,449 --> 00:01:00,960
mitigation for them and this is<font color="#CCCCCC"> my</font>

26
00:00:59,129 --> 00:01:03,718
<font color="#E5E5E5">colleague yeah</font><font color="#CCCCCC"> cool can</font><font color="#E5E5E5"> you please hello</font>

27
00:01:00,960 --> 00:01:05,850
everyone<font color="#CCCCCC"> i'm also my</font><font color="#E5E5E5"> name is Jacqueline</font>

28
00:01:03,719 --> 00:01:09,330
John and I'm also a speedy researcher

29
00:01:05,850 --> 00:01:11,970
from McAfee IPS<font color="#CCCCCC"> Ron ability 13 I was</font>

30
00:01:09,330 --> 00:01:14,250
<font color="#CCCCCC">somehow and that</font><font color="#E5E5E5"> is in the power of</font><font color="#CCCCCC"> past</font>

31
00:01:11,970 --> 00:01:15,600
a few<font color="#E5E5E5"> years now</font><font color="#CCCCCC"> I am focusing on</font>

32
00:01:14,250 --> 00:01:17,790
software<font color="#E5E5E5"> and</font><font color="#CCCCCC"> I didn't ask</font>

33
00:01:15,600 --> 00:01:22,589
<font color="#E5E5E5">colonel security you can find me on</font>

34
00:01:17,790 --> 00:01:24,330
<font color="#E5E5E5">Twitter thing thanks a cool so this is</font>

35
00:01:22,590 --> 00:01:26,970
the agent of our talk<font color="#CCCCCC"> today will will</font>

36
00:01:24,330 --> 00:01:28,408
quickly start with why we started this

37
00:01:26,970 --> 00:01:30,689
<font color="#E5E5E5">research what was the motivation</font><font color="#CCCCCC"> behind</font>

38
00:01:28,409 --> 00:01:33,360
doing<font color="#E5E5E5"> this</font><font color="#CCCCCC"> VM our patch analysis that we</font>

39
00:01:30,689 --> 00:01:34,889
have been<font color="#E5E5E5"> doing for past one</font><font color="#CCCCCC"> year</font><font color="#E5E5E5"> so</font>

40
00:01:33,360 --> 00:01:37,049
after<font color="#CCCCCC"> that we are going</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> quickly jump</font>

41
00:01:34,890 --> 00:01:38,970
<font color="#CCCCCC">into the most</font><font color="#E5E5E5"> popular attack surfaces</font>

42
00:01:37,049 --> 00:01:40,740
that we have seen that has been<font color="#E5E5E5"> targeted</font>

43
00:01:38,970 --> 00:01:43,048
by vulnerability researchers<font color="#E5E5E5"> to perform</font>

44
00:01:40,740 --> 00:01:44,189
<font color="#CCCCCC">guest to host escapes after that into</font>

45
00:01:43,049 --> 00:01:45,930
<font color="#E5E5E5">this</font><font color="#CCCCCC"> talk we are</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to basically</font>

46
00:01:44,189 --> 00:01:46,500
<font color="#E5E5E5">three attack surfaces the first one is</font>

47
00:01:45,930 --> 00:01:48,240
the RPC

48
00:01:46,500 --> 00:01:49,740
the second one is the virtual printer

49
00:01:48,240 --> 00:01:52,079
attack surface and<font color="#E5E5E5"> after that we are</font>

50
00:01:49,740 --> 00:01:54,298
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to move to the graphics components</font>

51
00:01:52,079 --> 00:01:56,219
of<font color="#CCCCCC"> vmware and after that we'll be</font>

52
00:01:54,299 --> 00:01:57,990
<font color="#E5E5E5">finishing our talk with the</font>

53
00:01:56,219 --> 00:01:59,939
vulnerability trend analysis<font color="#CCCCCC"> of vm r</font>

54
00:01:57,990 --> 00:02:02,810
<font color="#E5E5E5">that we have seen and</font><font color="#CCCCCC"> that we may see</font><font color="#E5E5E5"> in</font>

55
00:01:59,939 --> 00:02:02,809
<font color="#E5E5E5">the near future</font><font color="#CCCCCC"> so</font>

56
00:02:03,630 --> 00:02:06,899
<font color="#E5E5E5">vm</font><font color="#CCCCCC"> escape is something that scares all</font>

57
00:02:05,280 --> 00:02:08,489
of us if<font color="#CCCCCC"> you are</font><font color="#E5E5E5"> someone who</font><font color="#CCCCCC"> is dealing</font>

58
00:02:06,899 --> 00:02:10,318
with<font color="#E5E5E5"> untrusted code on a daily basis</font>

59
00:02:08,489 --> 00:02:13,200
<font color="#E5E5E5">there cannot be anything more scarier</font>

60
00:02:10,318 --> 00:02:13,769
than vm escape so as you all know that

61
00:02:13,200 --> 00:02:15,839
vm

62
00:02:13,770 --> 00:02:17,670
humor is a kind of a sophisticated<font color="#E5E5E5"> piece</font>

63
00:02:15,840 --> 00:02:19,920
<font color="#CCCCCC">of software</font><font color="#E5E5E5"> and when it comes to</font>

64
00:02:17,670 --> 00:02:21,420
understanding<font color="#E5E5E5"> the internals and security</font>

65
00:02:19,920 --> 00:02:23,519
implementation of any huge software

66
00:02:21,420 --> 00:02:25,410
<font color="#E5E5E5">beginning is probably always the hardest</font>

67
00:02:23,520 --> 00:02:26,820
<font color="#CCCCCC">because you don't have</font><font color="#E5E5E5"> any port of entry</font>

68
00:02:25,410 --> 00:02:29,730
<font color="#E5E5E5">you don't know where to get</font><font color="#CCCCCC"> started from</font>

69
00:02:26,820 --> 00:02:31,410
so we have seen that VMware<font color="#E5E5E5"> has been</font>

70
00:02:29,730 --> 00:02:34,500
targeted in many exploitation<font color="#CCCCCC"> contests</font>

71
00:02:31,410 --> 00:02:36,420
in the<font color="#E5E5E5"> recent past and and what we have</font>

72
00:02:34,500 --> 00:02:38,610
seen in after the<font color="#E5E5E5"> contest that most of</font>

73
00:02:36,420 --> 00:02:42,000
the details<font color="#CCCCCC"> are not even available</font><font color="#E5E5E5"> to</font>

74
00:02:38,610 --> 00:02:43,860
<font color="#CCCCCC">public so the successful exploits were</font>

75
00:02:42,000 --> 00:02:46,650
demonstrated but the details were<font color="#CCCCCC"> not</font>

76
00:02:43,860 --> 00:02:49,770
public<font color="#E5E5E5"> so the our</font><font color="#CCCCCC"> VMs story kind</font><font color="#E5E5E5"> of</font>

77
00:02:46,650 --> 00:02:51,930
<font color="#CCCCCC">started in November 2016</font><font color="#E5E5E5"> when in the in</font>

78
00:02:49,770 --> 00:02:54,600
when VMware exploitation was exploited

79
00:02:51,930 --> 00:02:57,240
twice I guess<font color="#E5E5E5"> if I'm not wrong in the</font>

80
00:02:54,600 --> 00:02:59,540
pond<font color="#E5E5E5"> fest exploitation contest and</font><font color="#CCCCCC"> to</font>

81
00:02:57,240 --> 00:03:02,490
successful<font color="#CCCCCC"> exploits where I demonstrated</font>

82
00:02:59,540 --> 00:03:03,840
<font color="#E5E5E5">so we</font><font color="#CCCCCC"> won't</font><font color="#E5E5E5"> say security</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> acted</font>

83
00:03:02,490 --> 00:03:07,140
really<font color="#E5E5E5"> fast and they have release</font>

84
00:03:03,840 --> 00:03:09,870
patches<font color="#E5E5E5"> for those</font><font color="#CCCCCC"> vulnerabilities so we</font>

85
00:03:07,140 --> 00:03:11,640
actually<font color="#E5E5E5"> thought probably we can</font><font color="#CCCCCC"> the it</font>

86
00:03:09,870 --> 00:03:13,650
was right time to do some<font color="#CCCCCC"> performer</font>

87
00:03:11,640 --> 00:03:15,359
binary<font color="#E5E5E5"> dipping and patch defeat to</font><font color="#CCCCCC"> the</font>

88
00:03:13,650 --> 00:03:17,970
patches<font color="#E5E5E5"> because if you do binary</font>

89
00:03:15,360 --> 00:03:19,530
difficult patch<font color="#E5E5E5"> dipping so it it doesn't</font>

90
00:03:17,970 --> 00:03:21,570
<font color="#E5E5E5">only give you a port of entry to</font><font color="#CCCCCC"> a huge</font>

91
00:03:19,530 --> 00:03:23,070
software<font color="#E5E5E5"> but it also takes you to the</font>

92
00:03:21,570 --> 00:03:25,709
software components that matters the

93
00:03:23,070 --> 00:03:27,690
most<font color="#CCCCCC"> and the best</font><font color="#E5E5E5"> thing about post</font>

94
00:03:25,710 --> 00:03:28,980
exploitation<font color="#CCCCCC"> context patches are they</font>

95
00:03:27,690 --> 00:03:31,050
will be<font color="#E5E5E5"> mostly having security fixes</font>

96
00:03:28,980 --> 00:03:33,329
they are free from<font color="#CCCCCC"> any functional or</font>

97
00:03:31,050 --> 00:03:34,650
design<font color="#E5E5E5"> changes so we thought probably</font>

98
00:03:33,330 --> 00:03:38,850
<font color="#E5E5E5">that was the right time</font><font color="#CCCCCC"> to get started</font>

99
00:03:34,650 --> 00:03:40,890
<font color="#CCCCCC">with it so when we</font><font color="#E5E5E5"> at the very early</font>

100
00:03:38,850 --> 00:03:43,769
stage<font color="#CCCCCC"> of our research what we</font><font color="#E5E5E5"> started</font>

101
00:03:40,890 --> 00:03:45,839
doing we we wanted to find<font color="#CCCCCC"> out</font><font color="#E5E5E5"> the most</font>

102
00:03:43,770 --> 00:03:47,970
popular<font color="#E5E5E5"> components of</font><font color="#CCCCCC"> via</font><font color="#E5E5E5"> mod that has</font>

103
00:03:45,840 --> 00:03:51,060
been targeted<font color="#CCCCCC"> so we started analyzing</font>

104
00:03:47,970 --> 00:03:53,280
the advisory that<font color="#CCCCCC"> VMR publishes and and</font>

105
00:03:51,060 --> 00:03:54,810
this<font color="#E5E5E5"> is what we have come</font><font color="#CCCCCC"> up with the</font>

106
00:03:53,280 --> 00:03:57,810
advisories are mostly not very technical

107
00:03:54,810 --> 00:03:59,670
<font color="#E5E5E5">but but it will have</font><font color="#CCCCCC"> some component</font>

108
00:03:57,810 --> 00:04:01,560
details which it was affecting which

109
00:03:59,670 --> 00:04:03,809
component<font color="#E5E5E5"> so we have seen</font><font color="#CCCCCC"> some</font>

110
00:04:01,560 --> 00:04:05,490
vulnerabilities in SVG component which

111
00:04:03,810 --> 00:04:08,730
<font color="#CCCCCC">is the graphics</font><font color="#E5E5E5"> of VMware Workstation</font>

112
00:04:05,490 --> 00:04:10,980
<font color="#CCCCCC">and we did see some</font><font color="#E5E5E5"> issues getting fixed</font>

113
00:04:08,730 --> 00:04:12,329
in our PC here and we have seen some

114
00:04:10,980 --> 00:04:15,299
issues<font color="#CCCCCC"> getting fixed in virtual printer</font>

115
00:04:12,330 --> 00:04:17,549
<font color="#E5E5E5">as well</font><font color="#CCCCCC"> we did see some other issues but</font>

116
00:04:15,300 --> 00:04:19,140
the numbers<font color="#CCCCCC"> were not</font><font color="#E5E5E5"> too much so</font><font color="#CCCCCC"> in this</font>

117
00:04:17,548 --> 00:04:23,429
<font color="#E5E5E5">presentation</font><font color="#CCCCCC"> we are going to discuss the</font>

118
00:04:19,140 --> 00:04:25,590
major one so we have seen that<font color="#E5E5E5"> vm our</font>

119
00:04:23,430 --> 00:04:27,160
work station<font color="#E5E5E5"> and fusions shares most of</font>

120
00:04:25,590 --> 00:04:28,780
<font color="#CCCCCC">the core functionalities</font>

121
00:04:27,160 --> 00:04:30,610
whenever any patch was applied to

122
00:04:28,780 --> 00:04:32,650
<font color="#CCCCCC">workstation</font><font color="#E5E5E5"> it was getting applied to</font>

123
00:04:30,610 --> 00:04:34,000
<font color="#E5E5E5">fusion as well</font><font color="#CCCCCC"> but some of the</font>

124
00:04:32,650 --> 00:04:36,340
vulnerability that<font color="#CCCCCC"> we're</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font>

125
00:04:34,000 --> 00:04:38,290
demonstrate today<font color="#CCCCCC"> we're</font><font color="#E5E5E5"> mostly</font><font color="#CCCCCC"> we'll</font>

126
00:04:36,340 --> 00:04:39,940
showcase in workstation but they will be

127
00:04:38,290 --> 00:04:43,450
they were they were affecting<font color="#E5E5E5"> fusion as</font>

128
00:04:39,940 --> 00:04:44,980
<font color="#CCCCCC">well so these are as I have</font><font color="#E5E5E5"> already said</font>

129
00:04:43,450 --> 00:04:45,760
<font color="#E5E5E5">these are the three attack surfaces we</font>

130
00:04:44,980 --> 00:04:47,680
are going to cover in<font color="#CCCCCC"> today's</font>

131
00:04:45,760 --> 00:04:51,520
presentation<font color="#CCCCCC"> so we are</font><font color="#E5E5E5"> going to start</font>

132
00:04:47,680 --> 00:04:53,500
with<font color="#E5E5E5"> the RPC so</font><font color="#CCCCCC"> so the guest operating</font>

133
00:04:51,520 --> 00:04:55,030
<font color="#CCCCCC">system and the host operating system has</font>

134
00:04:53,500 --> 00:04:57,550
<font color="#CCCCCC">to communicate with each</font><font color="#E5E5E5"> other for a lot</font>

135
00:04:55,030 --> 00:04:59,650
of<font color="#E5E5E5"> reasons</font><font color="#CCCCCC"> so if I have to if I have to</font>

136
00:04:57,550 --> 00:05:01,270
<font color="#E5E5E5">define the</font><font color="#CCCCCC"> via RPC in single sentence</font><font color="#E5E5E5"> it</font>

137
00:04:59,650 --> 00:05:03,549
will be like it can<font color="#E5E5E5"> be considered</font><font color="#CCCCCC"> as a</font>

138
00:05:01,270 --> 00:05:04,870
communication channel<font color="#CCCCCC"> that is used by</font>

139
00:05:03,550 --> 00:05:06,100
guest operating system and<font color="#E5E5E5"> host</font>

140
00:05:04,870 --> 00:05:09,850
operating system<font color="#E5E5E5"> to</font><font color="#CCCCCC"> communicate with</font>

141
00:05:06,100 --> 00:05:12,700
each<font color="#E5E5E5"> other so if you're familiar with</font><font color="#CCCCCC"> vm</font>

142
00:05:09,850 --> 00:05:14,890
<font color="#CCCCCC">tools vmware</font><font color="#E5E5E5"> you must be</font><font color="#CCCCCC"> familiar</font><font color="#E5E5E5"> with a</font>

143
00:05:12,700 --> 00:05:16,000
tool called<font color="#CCCCCC"> vm tools that you usually</font>

144
00:05:14,890 --> 00:05:18,070
install inside the guest operating

145
00:05:16,000 --> 00:05:19,540
<font color="#E5E5E5">system so this is a tiny piece</font><font color="#CCCCCC"> of</font>

146
00:05:18,070 --> 00:05:21,700
software that<font color="#CCCCCC"> you install inside the</font>

147
00:05:19,540 --> 00:05:24,640
<font color="#E5E5E5">guest operating</font><font color="#CCCCCC"> system and it makes you</font>

148
00:05:21,700 --> 00:05:26,590
life lot<font color="#E5E5E5"> easier by by bringing lot of</font>

149
00:05:24,640 --> 00:05:29,200
features like file<font color="#CCCCCC"> folders sharing</font>

150
00:05:26,590 --> 00:05:31,770
between guest and host the clipboard

151
00:05:29,200 --> 00:05:34,000
sharing<font color="#E5E5E5"> drag-and-drop</font><font color="#CCCCCC"> copy paste and</font>

152
00:05:31,770 --> 00:05:35,979
<font color="#CCCCCC">clock synchronization</font><font color="#E5E5E5"> and there are many</font>

153
00:05:34,000 --> 00:05:37,540
<font color="#CCCCCC">features so most</font><font color="#E5E5E5"> of these features</font>

154
00:05:35,980 --> 00:05:39,700
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> need smooth</font><font color="#E5E5E5"> communication</font>

155
00:05:37,540 --> 00:05:41,590
between guest and host so vehicles

156
00:05:39,700 --> 00:05:43,570
<font color="#CCCCCC">actually makes use of RPC channel</font><font color="#E5E5E5"> to</font>

157
00:05:41,590 --> 00:05:45,789
enable many of these<font color="#CCCCCC"> VM pool features in</font>

158
00:05:43,570 --> 00:05:48,340
the guest<font color="#CCCCCC"> operating system</font><font color="#E5E5E5"> so once you</font>

159
00:05:45,790 --> 00:05:50,530
install VM<font color="#E5E5E5"> tools what you see</font><font color="#CCCCCC"> in a new</font>

160
00:05:48,340 --> 00:05:53,169
process get started every time the<font color="#CCCCCC"> test</font>

161
00:05:50,530 --> 00:05:56,140
boots up the process name is VM<font color="#E5E5E5"> tools</font><font color="#CCCCCC"> D</font>

162
00:05:53,170 --> 00:05:58,360
dot exe so this<font color="#E5E5E5"> process is actually</font>

163
00:05:56,140 --> 00:06:00,789
responsible<font color="#CCCCCC"> for</font><font color="#E5E5E5"> interacting</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> the RPC</font>

164
00:05:58,360 --> 00:06:04,000
<font color="#CCCCCC">channel and do some stuffs that the</font>

165
00:06:00,790 --> 00:06:06,010
improved rings so when talking about

166
00:06:04,000 --> 00:06:07,600
<font color="#E5E5E5">this starting C mechanism any</font>

167
00:06:06,010 --> 00:06:09,159
application inside the guest<font color="#CCCCCC"> operating</font>

168
00:06:07,600 --> 00:06:11,080
system<font color="#E5E5E5"> willing to communicate with that</font>

169
00:06:09,160 --> 00:06:13,540
<font color="#CCCCCC">easy</font><font color="#E5E5E5"> channel has a couple of</font><font color="#CCCCCC"> options to</font>

170
00:06:11,080 --> 00:06:14,979
do that<font color="#E5E5E5"> to communicate the first option</font>

171
00:06:13,540 --> 00:06:17,440
they have is<font color="#E5E5E5"> it can</font><font color="#CCCCCC"> directly</font><font color="#E5E5E5"> interact</font>

172
00:06:14,980 --> 00:06:19,780
with<font color="#E5E5E5"> the VM backdoor so VM backdoor is a</font>

173
00:06:17,440 --> 00:06:21,370
special<font color="#CCCCCC"> i/o port specific to VM</font><font color="#E5E5E5"> are we</font>

174
00:06:19,780 --> 00:06:24,250
<font color="#E5E5E5">are going to come back to this later</font><font color="#CCCCCC"> on</font>

175
00:06:21,370 --> 00:06:27,040
so the next option it<font color="#E5E5E5"> has it</font><font color="#CCCCCC"> can use the</font>

176
00:06:24,250 --> 00:06:29,470
existing API is that<font color="#E5E5E5"> VM tools provide to</font>

177
00:06:27,040 --> 00:06:31,180
the application<font color="#E5E5E5"> so VM tools actually</font>

178
00:06:29,470 --> 00:06:33,670
<font color="#CCCCCC">comes with a DLL that is known as VM</font>

179
00:06:31,180 --> 00:06:35,440
<font color="#E5E5E5">tools or DLL it exports many ApS that</font>

180
00:06:33,670 --> 00:06:38,200
<font color="#E5E5E5">you can see here these are</font><font color="#CCCCCC"> all mostly</font>

181
00:06:35,440 --> 00:06:40,420
RPC related api's so<font color="#E5E5E5"> then any</font>

182
00:06:38,200 --> 00:06:41,830
application<font color="#CCCCCC"> can use this</font><font color="#E5E5E5"> DLL and</font><font color="#CCCCCC"> I</font>

183
00:06:40,420 --> 00:06:47,500
<font color="#CCCCCC">ported API is to communicate with the</font>

184
00:06:41,830 --> 00:06:50,349
<font color="#E5E5E5">RTC channel so now let's talk</font><font color="#CCCCCC"> about the</font>

185
00:06:47,500 --> 00:06:52,210
<font color="#E5E5E5">VM</font><font color="#CCCCCC"> backbone so</font><font color="#E5E5E5"> we back door can</font><font color="#CCCCCC"> be</font>

186
00:06:50,350 --> 00:06:55,330
considered as<font color="#CCCCCC"> the</font><font color="#E5E5E5"> lowest component of</font>

187
00:06:52,210 --> 00:06:57,250
RPC<font color="#E5E5E5"> implementation in</font><font color="#CCCCCC"> vmware and this is</font>

188
00:06:55,330 --> 00:06:58,630
<font color="#E5E5E5">nothing but</font><font color="#CCCCCC"> a special i hope or the set</font>

189
00:06:57,250 --> 00:07:01,960
of assembly instruction that<font color="#E5E5E5"> you see</font>

190
00:06:58,630 --> 00:07:03,610
here and<font color="#E5E5E5"> that has to</font><font color="#CCCCCC"> be executed to be</font>

191
00:07:01,960 --> 00:07:05,950
able<font color="#E5E5E5"> to interact with the vm bed bore</font>

192
00:07:03,610 --> 00:07:09,880
the here the<font color="#CCCCCC"> e^x register is holding the</font>

193
00:07:05,950 --> 00:07:12,580
<font color="#CCCCCC">VMware magic bytes</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> VX will will</font><font color="#E5E5E5"> hold</font>

194
00:07:09,880 --> 00:07:14,620
the command number for<font color="#E5E5E5"> guest to host RPC</font>

195
00:07:12,580 --> 00:07:17,979
the command has<font color="#CCCCCC"> to be</font><font color="#E5E5E5"> set</font><font color="#CCCCCC"> to hex 1e and</font>

196
00:07:14,620 --> 00:07:20,530
the<font color="#CCCCCC"> eb x will hold the holds the</font>

197
00:07:17,980 --> 00:07:23,020
parameter<font color="#E5E5E5"> required for the for the</font>

198
00:07:20,530 --> 00:07:24,969
command and<font color="#CCCCCC"> edx will hold the</font><font color="#E5E5E5"> VM our i/o</font>

199
00:07:23,020 --> 00:07:26,890
port<font color="#E5E5E5"> there are basically two VM our i/o</font>

200
00:07:24,970 --> 00:07:28,960
ports<font color="#CCCCCC"> five six five eight for the low</font>

201
00:07:26,890 --> 00:07:30,789
bandwidth<font color="#E5E5E5"> and five six five nine is for</font>

202
00:07:28,960 --> 00:07:33,190
the high bandwidth<font color="#CCCCCC"> communication and</font>

203
00:07:30,790 --> 00:07:35,230
after that we see a<font color="#E5E5E5"> privileged</font>

204
00:07:33,190 --> 00:07:36,880
<font color="#CCCCCC">instruction that is called in so this</font>

205
00:07:35,230 --> 00:07:38,560
<font color="#E5E5E5">instruction when execute inside the</font>

206
00:07:36,880 --> 00:07:41,370
<font color="#E5E5E5">guest operating</font><font color="#CCCCCC"> system the hypervisor</font>

207
00:07:38,560 --> 00:07:44,230
<font color="#CCCCCC">kind of hijacks</font><font color="#E5E5E5"> the control flow and</font>

208
00:07:41,370 --> 00:07:46,330
process the<font color="#E5E5E5"> request accordingly so this</font>

209
00:07:44,230 --> 00:07:50,710
VM back door actually<font color="#E5E5E5"> supports two</font>

210
00:07:46,330 --> 00:07:52,270
protocols<font color="#CCCCCC"> one is our PCI and TCL oh the</font>

211
00:07:50,710 --> 00:07:54,760
<font color="#CCCCCC">interesting</font><font color="#E5E5E5"> part about the</font><font color="#CCCCCC"> back door is</font>

212
00:07:52,270 --> 00:07:56,169
you cannot disable it fully<font color="#E5E5E5"> so</font><font color="#CCCCCC"> it</font>

213
00:07:54,760 --> 00:07:57,460
<font color="#E5E5E5">doesn't matter if you</font><font color="#CCCCCC"> have VM tools</font>

214
00:07:56,170 --> 00:07:59,050
inside in the your guest operating

215
00:07:57,460 --> 00:08:03,549
system or<font color="#E5E5E5"> not you cannot disable it</font>

216
00:07:59,050 --> 00:08:04,930
fully so we have talked about<font color="#E5E5E5"> some</font><font color="#CCCCCC"> of</font>

217
00:08:03,550 --> 00:08:07,000
<font color="#E5E5E5">this feature of</font><font color="#CCCCCC"> their</font><font color="#E5E5E5"> VM will bring</font>

218
00:08:04,930 --> 00:08:09,190
inside the<font color="#E5E5E5"> guest operating system so to</font>

219
00:08:07,000 --> 00:08:11,020
be able<font color="#E5E5E5"> to communicate with the host the</font>

220
00:08:09,190 --> 00:08:13,480
guest operating<font color="#E5E5E5"> system has</font><font color="#CCCCCC"> to send some</font>

221
00:08:11,020 --> 00:08:14,950
command<font color="#E5E5E5"> from</font><font color="#CCCCCC"> base to</font><font color="#E5E5E5"> host so the guest</font>

222
00:08:13,480 --> 00:08:18,400
<font color="#E5E5E5">operating system usually does this by</font>

223
00:08:14,950 --> 00:08:21,490
<font color="#E5E5E5">sending RPC RPC packet from glass to</font>

224
00:08:18,400 --> 00:08:23,620
<font color="#E5E5E5">host as you can see here this is a row</font>

225
00:08:21,490 --> 00:08:27,700
RPC packet we have taken from<font color="#CCCCCC"> VM to</font><font color="#E5E5E5"> SD</font>

226
00:08:23,620 --> 00:08:29,650
dot exe process so<font color="#CCCCCC"> it each and</font><font color="#E5E5E5"> every VC</font>

227
00:08:27,700 --> 00:08:32,470
packet of<font color="#E5E5E5"> VMR actually starts</font><font color="#CCCCCC"> with a</font>

228
00:08:29,650 --> 00:08:33,939
<font color="#CCCCCC">commands IPC</font><font color="#E5E5E5"> command stream so when the</font>

229
00:08:32,470 --> 00:08:36,100
packet is actually received at the<font color="#E5E5E5"> host</font>

230
00:08:33,940 --> 00:08:37,690
and the belt on<font color="#E5E5E5"> this based on this</font>

231
00:08:36,100 --> 00:08:41,290
command<font color="#E5E5E5"> the host actually decides how to</font>

232
00:08:37,690 --> 00:08:43,060
process<font color="#E5E5E5"> the packet so as you can</font><font color="#CCCCCC"> see</font>

233
00:08:41,289 --> 00:08:44,709
here we<font color="#CCCCCC"> are</font><font color="#E5E5E5"> actually sending the process</font>

234
00:08:43,059 --> 00:08:47,790
is actually<font color="#E5E5E5"> sending</font><font color="#CCCCCC"> vmx to is</font><font color="#E5E5E5"> gate</font>

235
00:08:44,710 --> 00:08:50,230
version command to<font color="#CCCCCC"> the host from</font><font color="#E5E5E5"> guest</font>

236
00:08:47,790 --> 00:08:52,660
so now let's talk about RPC packet

237
00:08:50,230 --> 00:08:53,410
handling so<font color="#E5E5E5"> we have come so</font><font color="#CCCCCC"> far that</font><font color="#E5E5E5"> the</font>

238
00:08:52,660 --> 00:08:55,329
guest

239
00:08:53,410 --> 00:08:56,829
operating system has<font color="#CCCCCC"> send</font><font color="#E5E5E5"> RPC packet to</font>

240
00:08:55,330 --> 00:08:59,500
the host<font color="#CCCCCC"> operating systems</font><font color="#E5E5E5"> now what</font>

241
00:08:56,830 --> 00:09:01,180
happens in the host operating system<font color="#E5E5E5"> so</font>

242
00:08:59,500 --> 00:09:03,400
if you have a Windows host

243
00:09:01,180 --> 00:09:06,489
for each running<font color="#E5E5E5"> virtual machine you see</font>

244
00:09:03,400 --> 00:09:08,980
in a process will be there and the

245
00:09:06,490 --> 00:09:10,630
process name is<font color="#CCCCCC"> VAR b MX dot exe</font><font color="#E5E5E5"> this</font>

246
00:09:08,980 --> 00:09:12,370
process actually<font color="#E5E5E5"> holds the most of the</font>

247
00:09:10,630 --> 00:09:15,670
virtualization<font color="#E5E5E5"> code the hypervisor code</font>

248
00:09:12,370 --> 00:09:18,490
and since this is<font color="#E5E5E5"> pretty complex</font><font color="#CCCCCC"> it is</font>

249
00:09:15,670 --> 00:09:20,650
<font color="#CCCCCC">very attacked wrong</font><font color="#E5E5E5"> and this this binary</font>

250
00:09:18,490 --> 00:09:22,090
will actually handle all<font color="#CCCCCC"> these IPC</font>

251
00:09:20,650 --> 00:09:26,860
commands<font color="#E5E5E5"> that is received from the guest</font>

252
00:09:22,090 --> 00:09:28,660
of the guest<font color="#CCCCCC"> operating system so since</font>

253
00:09:26,860 --> 00:09:29,770
this<font color="#E5E5E5"> handles lot of untrusted data that</font>

254
00:09:28,660 --> 00:09:31,600
is<font color="#CCCCCC"> coming from the guest operating</font>

255
00:09:29,770 --> 00:09:33,610
system this<font color="#E5E5E5"> is considered as the most</font>

256
00:09:31,600 --> 00:09:38,740
popular<font color="#E5E5E5"> gateway to escape from VMware</font>

257
00:09:33,610 --> 00:09:41,460
virtual machines<font color="#CCCCCC"> so to be able</font><font color="#E5E5E5"> to hit</font>

258
00:09:38,740 --> 00:09:44,200
those are<font color="#CCCCCC"> easy command handler we</font>

259
00:09:41,460 --> 00:09:46,420
somehow should be able<font color="#E5E5E5"> to send custom</font>

260
00:09:44,200 --> 00:09:47,950
RPC packet from<font color="#CCCCCC"> rest to</font><font color="#E5E5E5"> host as I have</font>

261
00:09:46,420 --> 00:09:50,709
already said there are multiple option

262
00:09:47,950 --> 00:09:52,060
to do<font color="#E5E5E5"> that but then what</font><font color="#CCCCCC"> you have seen</font>

263
00:09:50,710 --> 00:09:54,820
that the easiest<font color="#E5E5E5"> option probably would</font>

264
00:09:52,060 --> 00:09:56,829
be to use the existing API is to send

265
00:09:54,820 --> 00:10:00,340
those RPC command<font color="#E5E5E5"> as you can see here we</font>

266
00:09:56,830 --> 00:10:02,140
are<font color="#E5E5E5"> using Python C type privy to and we</font>

267
00:10:00,340 --> 00:10:06,190
<font color="#E5E5E5">are using VM tools or DLL to use the</font>

268
00:10:02,140 --> 00:10:08,290
existing API to send RPC command<font color="#E5E5E5"> so we</font>

269
00:10:06,190 --> 00:10:11,080
are<font color="#CCCCCC"> basically</font><font color="#E5E5E5"> using RPC start RPC send</font>

270
00:10:08,290 --> 00:10:14,680
RPC stop function from VM to<font color="#CCCCCC"> a DLL to</font>

271
00:10:11,080 --> 00:10:16,720
send our<font color="#CCCCCC"> PC packets so now we are going</font>

272
00:10:14,680 --> 00:10:18,069
<font color="#E5E5E5">to take a quick look at some</font><font color="#CCCCCC"> of the</font>

273
00:10:16,720 --> 00:10:24,520
vulnerabilities<font color="#CCCCCC"> that has been fixed</font><font color="#E5E5E5"> in</font>

274
00:10:18,070 --> 00:10:26,430
RPC layer or<font color="#CCCCCC"> VMR so when he started</font>

275
00:10:24,520 --> 00:10:29,199
patch<font color="#CCCCCC"> analysis what we</font><font color="#E5E5E5"> have seen that</font>

276
00:10:26,430 --> 00:10:30,189
<font color="#E5E5E5">after the</font><font color="#CCCCCC"> Pampas</font><font color="#E5E5E5"> was over and we started</font>

277
00:10:29,200 --> 00:10:33,040
doing binary<font color="#CCCCCC"> decay</font>

278
00:10:30,190 --> 00:10:34,150
this is what we have come<font color="#CCCCCC"> up with as you</font>

279
00:10:33,040 --> 00:10:36,280
can see the left<font color="#E5E5E5"> side this is a</font>

280
00:10:34,150 --> 00:10:37,780
<font color="#E5E5E5">vulnerable code and VMO her has added a</font>

281
00:10:36,280 --> 00:10:39,730
fix for<font color="#E5E5E5"> this validity by adding a small</font>

282
00:10:37,780 --> 00:10:41,560
<font color="#E5E5E5">chip so what is interesting about the</font>

283
00:10:39,730 --> 00:10:44,020
vulnerability what<font color="#E5E5E5"> you see here that</font>

284
00:10:41,560 --> 00:10:47,469
<font color="#E5E5E5">there is a memcpy mem copy call here</font>

285
00:10:44,020 --> 00:10:49,720
which is highlighted<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the red and the</font>

286
00:10:47,470 --> 00:10:51,040
arguments of<font color="#E5E5E5"> the main CPU mem copy call</font>

287
00:10:49,720 --> 00:10:52,000
was<font color="#CCCCCC"> actually coming from</font><font color="#E5E5E5"> the second</font>

288
00:10:51,040 --> 00:10:54,520
<font color="#E5E5E5">layer woman that was passed to that</font>

289
00:10:52,000 --> 00:10:56,520
function so when he did some reverse

290
00:10:54,520 --> 00:10:58,689
engineering<font color="#E5E5E5"> what we have found that that</font>

291
00:10:56,520 --> 00:11:00,130
<font color="#CCCCCC">second argument</font><font color="#E5E5E5"> was actually directly</font>

292
00:10:58,690 --> 00:11:02,140
<font color="#E5E5E5">coming from the guest operating system</font>

293
00:11:00,130 --> 00:11:04,360
and which is<font color="#CCCCCC"> definitely untrusted data</font>

294
00:11:02,140 --> 00:11:06,220
and the data<font color="#CCCCCC"> that we are</font><font color="#E5E5E5"> getting as a</font>

295
00:11:04,360 --> 00:11:07,209
second argument<font color="#E5E5E5"> of the function it is</font>

296
00:11:06,220 --> 00:11:10,329
nothing but<font color="#E5E5E5"> a</font><font color="#CCCCCC"> D</font>

297
00:11:07,209 --> 00:11:11,888
disappea RPC packet and this<font color="#E5E5E5"> entire</font>

298
00:11:10,329 --> 00:11:13,508
things are untrusted data and coming

299
00:11:11,889 --> 00:11:15,720
<font color="#E5E5E5">from host operating system what we have</font>

300
00:11:13,509 --> 00:11:17,920
<font color="#E5E5E5">seen that some of these highlighted</font>

301
00:11:15,720 --> 00:11:19,990
structure<font color="#CCCCCC"> members if you can play with</font>

302
00:11:17,920 --> 00:11:25,748
that<font color="#E5E5E5"> we can do some interesting</font><font color="#CCCCCC"> stuff</font>

303
00:11:19,990 --> 00:11:27,100
<font color="#E5E5E5">using</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> vulnerability so after doing</font>

304
00:11:25,749 --> 00:11:29,470
some analysis what<font color="#CCCCCC"> you have seen</font><font color="#E5E5E5"> that we</font>

305
00:11:27,100 --> 00:11:33,939
can you achieve<font color="#E5E5E5"> out of bound</font><font color="#CCCCCC"> weed</font><font color="#E5E5E5"> using</font>

306
00:11:29,470 --> 00:11:36,069
that bug<font color="#E5E5E5"> so to be able to achieve an out</font>

307
00:11:33,939 --> 00:11:37,839
about<font color="#E5E5E5"> read condition what you have to do</font>

308
00:11:36,069 --> 00:11:39,998
<font color="#CCCCCC">you have to</font><font color="#E5E5E5"> send an RPC packet with</font>

309
00:11:37,839 --> 00:11:42,399
following characteristics<font color="#E5E5E5"> first we set</font>

310
00:11:39,999 --> 00:11:45,100
the packet payload size to maybe<font color="#CCCCCC"> 4</font><font color="#E5E5E5"> 500</font>

311
00:11:42,399 --> 00:11:48,129
bytes<font color="#E5E5E5"> and we do not put any payload into</font>

312
00:11:45,100 --> 00:11:51,100
it so when the mem CP when the memcpy

313
00:11:48,129 --> 00:11:53,259
<font color="#E5E5E5">mem copy call will execute since we have</font>

314
00:11:51,100 --> 00:11:55,149
set the payload<font color="#CCCCCC"> size to 500</font><font color="#E5E5E5"> but there is</font>

315
00:11:53,259 --> 00:11:56,829
no payload in it will actually over it

316
00:11:55,149 --> 00:12:02,589
some data<font color="#E5E5E5"> from the next address and he</font>

317
00:11:56,829 --> 00:12:05,050
block and we have an outer bound read so

318
00:12:02,589 --> 00:12:07,149
<font color="#CCCCCC">that so the interesting</font><font color="#E5E5E5"> part about the</font>

319
00:12:05,050 --> 00:12:08,859
<font color="#CCCCCC">disavow already</font><font color="#E5E5E5"> was using the same</font><font color="#CCCCCC"> back</font>

320
00:12:07,149 --> 00:12:11,019
we can achieve<font color="#CCCCCC"> outer bound</font><font color="#E5E5E5"> over</font><font color="#CCCCCC"> write as</font>

321
00:12:08,860 --> 00:12:12,549
well so to be able<font color="#E5E5E5"> to achieve outer</font>

322
00:12:11,019 --> 00:12:14,679
bound over write you have<font color="#CCCCCC"> to</font><font color="#E5E5E5"> send more</font>

323
00:12:12,549 --> 00:12:18,129
<font color="#E5E5E5">than one packet from this to host with</font>

324
00:12:14,679 --> 00:12:19,720
<font color="#CCCCCC">the following characteristics point to</font>

325
00:12:18,129 --> 00:12:22,049
be<font color="#E5E5E5"> noted here the session ID of the</font>

326
00:12:19,720 --> 00:12:24,699
packet<font color="#E5E5E5"> should be the same on let's see</font>

327
00:12:22,049 --> 00:12:26,829
so once the first<font color="#E5E5E5"> packet it received at</font>

328
00:12:24,699 --> 00:12:30,128
<font color="#E5E5E5">the host end the vimana daemons process</font>

329
00:12:26,829 --> 00:12:32,769
will<font color="#E5E5E5"> actually allocate a memory</font><font color="#CCCCCC"> in heap</font>

330
00:12:30,129 --> 00:12:35,110
of thousand by 10,000 bytes

331
00:12:32,769 --> 00:12:38,559
<font color="#CCCCCC">since the binary size is set to 10,000</font>

332
00:12:35,110 --> 00:12:41,290
<font color="#E5E5E5">and since the payload size is set to 500</font>

333
00:12:38,559 --> 00:12:44,019
it will copy 500 bytes of data into the

334
00:12:41,290 --> 00:12:46,179
allocated buffer now once the second

335
00:12:44,019 --> 00:12:48,549
packet is received at<font color="#CCCCCC"> the vemma at the</font>

336
00:12:46,179 --> 00:12:50,920
<font color="#E5E5E5">host end the since the session ID is</font>

337
00:12:48,549 --> 00:12:53,439
same<font color="#CCCCCC"> VMR</font><font color="#E5E5E5"> vmx you will actually use the</font>

338
00:12:50,920 --> 00:12:56,469
same allocated buffer to copy the new

339
00:12:53,439 --> 00:12:59,498
payload<font color="#E5E5E5"> since the new payload size is FC</font>

340
00:12:56,470 --> 00:13:02,769
0 0 and we<font color="#CCCCCC"> have if we sum up</font><font color="#E5E5E5"> we see that</font>

341
00:12:59,499 --> 00:13:05,019
we we have a 100 byte<font color="#E5E5E5"> overwrite heap</font>

342
00:13:02,769 --> 00:13:07,149
over it it<font color="#E5E5E5"> will actually overwrite the</font>

343
00:13:05,019 --> 00:13:09,759
first few bites<font color="#E5E5E5"> of next adjacent heap</font>

344
00:13:07,149 --> 00:13:11,279
block so this<font color="#E5E5E5"> is actually how we can</font>

345
00:13:09,759 --> 00:13:17,049
achieve<font color="#CCCCCC"> outer</font><font color="#E5E5E5"> bound right</font>

346
00:13:11,279 --> 00:13:20,079
using the<font color="#CCCCCC"> bug so we have talked about</font>

347
00:13:17,049 --> 00:13:20,829
<font color="#E5E5E5">this outer boundary right now how we can</font>

348
00:13:20,079 --> 00:13:22,329
do some

349
00:13:20,830 --> 00:13:26,740
interesting stuff<font color="#E5E5E5"> using that</font><font color="#CCCCCC"> outbound</font>

350
00:13:22,330 --> 00:13:29,050
right<font color="#E5E5E5"> so SLR is a is something that you</font>

351
00:13:26,740 --> 00:13:31,240
has to<font color="#CCCCCC"> be bypassed to be able</font><font color="#E5E5E5"> to perform</font>

352
00:13:29,050 --> 00:13:33,040
<font color="#E5E5E5">exploitation in modern operating system</font>

353
00:13:31,240 --> 00:13:35,020
so now we are going<font color="#E5E5E5"> to take a look how</font>

354
00:13:33,040 --> 00:13:39,400
can<font color="#CCCCCC"> we bypass a seller using that outer</font>

355
00:13:35,020 --> 00:13:41,650
bound right so to be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to steal info</font>

356
00:13:39,400 --> 00:13:43,050
from<font color="#E5E5E5"> vrb mix process</font><font color="#CCCCCC"> what do you need we</font>

357
00:13:41,650 --> 00:13:46,209
need<font color="#E5E5E5"> to prepare a certain memory layout</font>

358
00:13:43,050 --> 00:13:48,040
<font color="#E5E5E5">so this is what you see this is</font><font color="#CCCCCC"> the this</font>

359
00:13:46,210 --> 00:13:50,590
is it should<font color="#E5E5E5"> be the memory layout we</font>

360
00:13:48,040 --> 00:13:53,170
<font color="#E5E5E5">need to prepare from in the guest in the</font>

361
00:13:50,590 --> 00:13:55,180
<font color="#E5E5E5">host operating system to be able to</font><font color="#CCCCCC"> leak</font>

362
00:13:53,170 --> 00:13:58,900
some interesting information<font color="#E5E5E5"> so we see</font>

363
00:13:55,180 --> 00:14:01,030
we<font color="#CCCCCC"> we set up</font><font color="#E5E5E5"> and the red block that you</font>

364
00:13:58,900 --> 00:14:03,250
<font color="#E5E5E5">see it's the</font><font color="#CCCCCC"> overflow junk on which we</font>

365
00:14:01,030 --> 00:14:05,350
<font color="#CCCCCC">are going</font><font color="#E5E5E5"> to trigger the overflow and</font>

366
00:14:03,250 --> 00:14:06,850
this is the yellow<font color="#CCCCCC"> one is the control</font>

367
00:14:05,350 --> 00:14:10,090
string which you control<font color="#E5E5E5"> from the guest</font>

368
00:14:06,850 --> 00:14:12,100
operating<font color="#E5E5E5"> system so the interesting</font>

369
00:14:10,090 --> 00:14:14,500
<font color="#E5E5E5">thing I think about control string is</font>

370
00:14:12,100 --> 00:14:16,270
you have from the guest<font color="#E5E5E5"> operating system</font>

371
00:14:14,500 --> 00:14:18,790
you have access<font color="#CCCCCC"> to the read and</font><font color="#E5E5E5"> write</font><font color="#CCCCCC"> to</font>

372
00:14:16,270 --> 00:14:22,120
<font color="#CCCCCC">that block and after</font><font color="#E5E5E5"> that we have a DND</font>

373
00:14:18,790 --> 00:14:23,860
<font color="#E5E5E5">CP object so once we trigger the</font>

374
00:14:22,120 --> 00:14:26,680
overflow<font color="#E5E5E5"> we are going to overwrite some</font>

375
00:14:23,860 --> 00:14:28,390
of the initial bytes of the<font color="#E5E5E5"> the next</font>

376
00:14:26,680 --> 00:14:30,430
adjacent<font color="#CCCCCC"> key block which is a control</font><font color="#E5E5E5"> C</font>

377
00:14:28,390 --> 00:14:33,130
and and we do this and we<font color="#CCCCCC"> actually</font>

378
00:14:30,430 --> 00:14:35,109
modify the<font color="#CCCCCC"> the length of the string</font><font color="#E5E5E5"> the</font>

379
00:14:33,130 --> 00:14:37,960
control string and when the string is

380
00:14:35,110 --> 00:14:39,850
<font color="#E5E5E5">the length of the string</font><font color="#CCCCCC"> is modified and</font>

381
00:14:37,960 --> 00:14:41,590
if you try<font color="#E5E5E5"> to read back the stream from</font>

382
00:14:39,850 --> 00:14:43,000
<font color="#E5E5E5">the guest</font><font color="#CCCCCC"> operating system what we have</font>

383
00:14:41,590 --> 00:14:44,980
<font color="#E5E5E5">will have the address of we have double</font>

384
00:14:43,000 --> 00:14:47,890
address of<font color="#CCCCCC"> Dien</font><font color="#E5E5E5"> disappear object in the</font>

385
00:14:44,980 --> 00:14:49,930
guest<font color="#CCCCCC"> operating system so once we have</font>

386
00:14:47,890 --> 00:14:53,710
the<font color="#CCCCCC"> VF</font><font color="#E5E5E5"> table address of Beamer vmx</font>

387
00:14:49,930 --> 00:14:55,630
we can easily craft our<font color="#E5E5E5"> basic find the</font>

388
00:14:53,710 --> 00:14:59,380
base address<font color="#CCCCCC"> of lemur vmix and craft our</font>

389
00:14:55,630 --> 00:15:01,689
rope gadget and perform exploitation so

390
00:14:59,380 --> 00:15:04,510
this<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> this was actually it</font><font color="#E5E5E5"> was</font>

391
00:15:01,690 --> 00:15:07,060
shown by<font color="#CCCCCC"> Chen security research lab they</font>

392
00:15:04,510 --> 00:15:12,100
<font color="#CCCCCC">have published a blog post</font><font color="#E5E5E5"> I have a few</font>

393
00:15:07,060 --> 00:15:14,680
months<font color="#CCCCCC"> back I guess so we have seen yet</font>

394
00:15:12,100 --> 00:15:17,020
another bug<font color="#E5E5E5"> that was uncovered in</font><font color="#CCCCCC"> ID in</font>

395
00:15:14,680 --> 00:15:19,300
<font color="#CCCCCC">DCP</font><font color="#E5E5E5"> the interesting thing about the bug</font>

396
00:15:17,020 --> 00:15:22,000
is this bug is completely identical to

397
00:15:19,300 --> 00:15:24,339
the bug we have just discussed<font color="#CCCCCC"> but the</font>

398
00:15:22,000 --> 00:15:26,740
only<font color="#E5E5E5"> issue</font><font color="#CCCCCC"> is this bug was residing</font><font color="#E5E5E5"> in</font>

399
00:15:24,340 --> 00:15:28,600
the DNA CP version<font color="#CCCCCC"> 3 so to be able</font><font color="#E5E5E5"> to</font>

400
00:15:26,740 --> 00:15:30,760
trigger<font color="#E5E5E5"> the vulnerable code</font><font color="#CCCCCC"> to reach the</font>

401
00:15:28,600 --> 00:15:32,350
vulnerable<font color="#E5E5E5"> code the from the guest</font>

402
00:15:30,760 --> 00:15:33,310
<font color="#CCCCCC">operating system what attacker has to do</font>

403
00:15:32,350 --> 00:15:35,110
has to<font color="#CCCCCC"> at</font>

404
00:15:33,310 --> 00:15:37,750
has to downgrade<font color="#E5E5E5"> the DND version to</font>

405
00:15:35,110 --> 00:15:40,600
<font color="#CCCCCC">three from four so to be able</font><font color="#E5E5E5"> to do that</font>

406
00:15:37,750 --> 00:15:43,090
you need to simply send following set<font color="#CCCCCC"> of</font>

407
00:15:40,600 --> 00:15:44,800
a<font color="#E5E5E5"> PC command from this to host once the</font>

408
00:15:43,090 --> 00:15:48,850
version is downloaded in the host<font color="#E5E5E5"> you</font>

409
00:15:44,800 --> 00:15:50,469
<font color="#E5E5E5">can simply you can simply perform the</font>

410
00:15:48,850 --> 00:15:59,860
expert Asian in the same way we have

411
00:15:50,470 --> 00:16:02,020
<font color="#CCCCCC">just discussed so we have seen a use of</font>

412
00:15:59,860 --> 00:16:04,480
<font color="#CCCCCC">the free also</font><font color="#E5E5E5"> issue also got passed in</font>

413
00:16:02,020 --> 00:16:07,089
<font color="#CCCCCC">VMware</font><font color="#E5E5E5"> in recent days so this use after</font>

414
00:16:04,480 --> 00:16:08,740
free<font color="#E5E5E5"> POC</font><font color="#CCCCCC"> is quite</font><font color="#E5E5E5"> simple what you have</font>

415
00:16:07,089 --> 00:16:11,589
to do you have<font color="#CCCCCC"> to send</font><font color="#E5E5E5"> certain</font><font color="#CCCCCC"> sequence</font>

416
00:16:08,740 --> 00:16:13,420
of RPC command so first we<font color="#CCCCCC"> need to set</font>

417
00:16:11,589 --> 00:16:17,800
the DND version to<font color="#CCCCCC"> two by sending</font><font color="#E5E5E5"> these</font>

418
00:16:13,420 --> 00:16:19,569
commands<font color="#E5E5E5"> and</font><font color="#CCCCCC"> after the DND version is</font>

419
00:16:17,800 --> 00:16:21,790
set to two we need<font color="#E5E5E5"> to change the version</font>

420
00:16:19,570 --> 00:16:25,839
<font color="#CCCCCC">to r irresistibility version two three</font>

421
00:16:21,790 --> 00:16:27,459
so once the now once the we said we

422
00:16:25,839 --> 00:16:29,500
registered the<font color="#CCCCCC"> DNS</font><font color="#E5E5E5"> IP version two three</font>

423
00:16:27,460 --> 00:16:31,390
<font color="#E5E5E5">the host will actually register version</font>

424
00:16:29,500 --> 00:16:33,250
<font color="#CCCCCC">three</font><font color="#E5E5E5"> RPC and three some function</font>

425
00:16:31,390 --> 00:16:35,020
pointers registered<font color="#E5E5E5"> for different words</font>

426
00:16:33,250 --> 00:16:36,070
<font color="#E5E5E5">from</font><font color="#CCCCCC"> to our</font><font color="#E5E5E5"> pcs the structure actually</font>

427
00:16:35,020 --> 00:16:40,060
<font color="#E5E5E5">we have found by reverse engineering</font>

428
00:16:36,070 --> 00:16:42,040
<font color="#CCCCCC">that you can see here so although the</font>

429
00:16:40,060 --> 00:16:43,510
function pointers are freed the<font color="#CCCCCC"> some of</font>

430
00:16:42,040 --> 00:16:45,699
the associated callbacks that<font color="#E5E5E5"> you see</font>

431
00:16:43,510 --> 00:16:48,670
here are remain active that<font color="#E5E5E5"> was a</font>

432
00:16:45,700 --> 00:16:50,589
problem actually<font color="#E5E5E5"> in this issue so after</font>

433
00:16:48,670 --> 00:16:53,079
that when this scenario<font color="#CCCCCC"> is this</font><font color="#E5E5E5"> is a</font>

434
00:16:50,589 --> 00:16:55,000
<font color="#CCCCCC">situation</font><font color="#E5E5E5"> in the host process after</font><font color="#CCCCCC"> that</font>

435
00:16:53,080 --> 00:16:56,410
if<font color="#E5E5E5"> you send any of this RPC call from</font>

436
00:16:55,000 --> 00:16:58,570
guest operating system to host operating

437
00:16:56,410 --> 00:17:05,230
system<font color="#E5E5E5"> we can actually trigger and use</font>

438
00:16:58,570 --> 00:17:06,939
after free so there is an interesting

439
00:17:05,230 --> 00:17:08,439
<font color="#CCCCCC">block that was published recently</font><font color="#E5E5E5"> we</font>

440
00:17:06,939 --> 00:17:10,480
have added<font color="#CCCCCC"> the</font><font color="#E5E5E5"> blog into</font><font color="#CCCCCC"> the reference</font>

441
00:17:08,439 --> 00:17:16,720
<font color="#CCCCCC">section you regarding the exploitation</font>

442
00:17:10,480 --> 00:17:19,599
<font color="#E5E5E5">of this bug so now the question</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> how</font>

443
00:17:16,720 --> 00:17:21,220
these issues<font color="#E5E5E5"> could be identified and now</font>

444
00:17:19,599 --> 00:17:23,438
in future<font color="#E5E5E5"> how</font><font color="#CCCCCC"> can you find similar</font>

445
00:17:21,220 --> 00:17:25,390
issues<font color="#E5E5E5"> in the VMware Workstation</font><font color="#CCCCCC"> so what</font>

446
00:17:23,439 --> 00:17:27,220
you have what<font color="#CCCCCC"> we can conclude here we</font>

447
00:17:25,390 --> 00:17:28,900
have seen to be able<font color="#E5E5E5"> to audit</font><font color="#CCCCCC"> this RPC</font>

448
00:17:27,220 --> 00:17:31,240
command handlers we need<font color="#CCCCCC"> basically four</font>

449
00:17:28,900 --> 00:17:33,670
<font color="#CCCCCC">things</font><font color="#E5E5E5"> so we need some valid RPC</font>

450
00:17:31,240 --> 00:17:36,250
commands we<font color="#E5E5E5"> need some valid RPC packet</font>

451
00:17:33,670 --> 00:17:38,080
structure and any way to send RPC

452
00:17:36,250 --> 00:17:40,810
command from<font color="#CCCCCC"> nest</font><font color="#E5E5E5"> to host and some</font>

453
00:17:38,080 --> 00:17:42,730
monitoring<font color="#E5E5E5"> engine in the host to monitor</font>

454
00:17:40,810 --> 00:17:45,250
some of the interesting event that

455
00:17:42,730 --> 00:17:46,080
occurred<font color="#E5E5E5"> inside the host process so this</font>

456
00:17:45,250 --> 00:17:47,610
the<font color="#CCCCCC"> Bell</font>

457
00:17:46,080 --> 00:17:49,080
<font color="#E5E5E5">our</font><font color="#CCCCCC"> PC commands can be easily collected</font>

458
00:17:47,610 --> 00:17:51,238
from the open source component of<font color="#E5E5E5"> VM</font>

459
00:17:49,080 --> 00:17:53,009
<font color="#E5E5E5">tools and also you can reverse</font><font color="#CCCCCC"> engineer</font>

460
00:17:51,239 --> 00:17:56,100
the VM or vmx process to find<font color="#E5E5E5"> out this</font>

461
00:17:53,009 --> 00:17:57,239
command<font color="#E5E5E5"> and our pcs structures are very</font>

462
00:17:56,100 --> 00:18:00,238
<font color="#E5E5E5">well defined in the open source</font>

463
00:17:57,239 --> 00:18:01,830
component of<font color="#CCCCCC"> VM tools so and we have</font>

464
00:18:00,239 --> 00:18:03,899
<font color="#CCCCCC">already</font><font color="#E5E5E5"> seen how can we send custom</font>

465
00:18:01,830 --> 00:18:06,960
custom<font color="#CCCCCC"> RPC packet from</font><font color="#E5E5E5"> this to host</font>

466
00:18:03,899 --> 00:18:08,729
operating system<font color="#E5E5E5"> so we just need to we</font>

467
00:18:06,960 --> 00:18:12,559
just<font color="#CCCCCC"> need</font><font color="#E5E5E5"> to implement a monitoring</font>

468
00:18:08,730 --> 00:18:12,559
engine the host<font color="#E5E5E5"> so that we can perform</font>

469
00:18:12,830 --> 00:18:17,939
the first for this RPC command handlers

470
00:18:15,509 --> 00:18:20,700
so we actually<font color="#E5E5E5"> have no</font><font color="#CCCCCC"> idea how these</font>

471
00:18:17,940 --> 00:18:22,889
bugs were identified<font color="#E5E5E5"> but we think</font><font color="#CCCCCC"> that</font>

472
00:18:20,700 --> 00:18:25,769
probably<font color="#CCCCCC"> it can be result of some semi</font>

473
00:18:22,889 --> 00:18:27,988
<font color="#CCCCCC">dumb fuzzy and if and similar</font><font color="#E5E5E5"> issues can</font>

474
00:18:25,769 --> 00:18:31,559
be<font color="#E5E5E5"> identified if we craft the further in</font>

475
00:18:27,989 --> 00:18:34,049
<font color="#E5E5E5">this way so now I'd like to request</font>

476
00:18:31,559 --> 00:18:35,340
<font color="#CCCCCC">yacón to you know explain the virtual</font>

477
00:18:34,049 --> 00:18:38,580
filter<font color="#E5E5E5"> part</font><font color="#CCCCCC"> okay</font>

478
00:18:35,340 --> 00:18:40,980
the second attack surface we would like

479
00:18:38,580 --> 00:18:44,249
to<font color="#E5E5E5"> show</font><font color="#CCCCCC"> you is a either</font><font color="#E5E5E5"> VMware virtual</font>

480
00:18:40,980 --> 00:18:46,049
printer we were virtual printer is a

481
00:18:44,249 --> 00:18:48,989
feature that<font color="#CCCCCC"> allows guests to virtual</font>

482
00:18:46,049 --> 00:18:51,320
machine to print<font color="#CCCCCC"> documents by using the</font>

483
00:18:48,989 --> 00:18:54,149
available<font color="#E5E5E5"> printers in all the hosts</font>

484
00:18:51,320 --> 00:18:56,939
considering some security reasons it<font color="#E5E5E5"> is</font>

485
00:18:54,149 --> 00:19:00,119
<font color="#E5E5E5">not the default feature on the windward</font>

486
00:18:56,940 --> 00:19:03,799
workstation<font color="#CCCCCC"> user should enable this this</font>

487
00:19:00,119 --> 00:19:06,629
feature in<font color="#E5E5E5"> the viewer preferences menu</font>

488
00:19:03,799 --> 00:19:08,730
before puts the virtual machine<font color="#E5E5E5"> casteau</font>

489
00:19:06,629 --> 00:19:12,600
virtual machine uses com1<font color="#E5E5E5"> power to talk</font>

490
00:19:08,730 --> 00:19:15,149
<font color="#E5E5E5">to the virtual printer proxy on a host</font>

491
00:19:12,600 --> 00:19:18,389
when user puts a guest a virtual machine

492
00:19:15,149 --> 00:19:21,449
<font color="#CCCCCC">with a virtual printer feature enabled</font>

493
00:19:18,389 --> 00:19:26,029
we<font color="#E5E5E5"> print proxy</font><font color="#CCCCCC"> de XE will</font><font color="#E5E5E5"> be launched by</font>

494
00:19:21,450 --> 00:19:28,859
<font color="#CCCCCC">on a</font><font color="#E5E5E5"> hosta by VMware</font><font color="#CCCCCC"> vm x dot exe</font>

495
00:19:26,029 --> 00:19:31,499
<font color="#CCCCCC">meanwhile vm x dot exe and</font><font color="#E5E5E5"> we print</font>

496
00:19:28,859 --> 00:19:34,859
proxy<font color="#CCCCCC"> directs e communicated with each</font>

497
00:19:31,499 --> 00:19:36,769
other through<font color="#CCCCCC"> name pipes</font><font color="#E5E5E5"> so one user in</font>

498
00:19:34,859 --> 00:19:41,428
the<font color="#CCCCCC"> castro virtual machine writes data</font>

499
00:19:36,769 --> 00:19:44,039
<font color="#E5E5E5">write state to</font><font color="#CCCCCC"> calm one pot the data</font>

500
00:19:41,429 --> 00:19:45,269
<font color="#E5E5E5">will eventually as an input in</font><font color="#CCCCCC"> v print</font>

501
00:19:44,039 --> 00:19:50,249
proxy taxi

502
00:19:45,269 --> 00:19:53,100
so in this procedure<font color="#E5E5E5"> some operations of</font>

503
00:19:50,249 --> 00:19:55,919
some operations of<font color="#CCCCCC"> VMS</font><font color="#E5E5E5"> spoonful will be</font>

504
00:19:53,100 --> 00:19:59,189
processed from<font color="#E5E5E5"> the gas to the</font><font color="#CCCCCC"> host EMF</font>

505
00:19:55,919 --> 00:20:00,160
spoon is a meta file format<font color="#E5E5E5"> that starts</font>

506
00:19:59,190 --> 00:20:02,700
a<font color="#E5E5E5"> printer</font>

507
00:20:00,160 --> 00:20:07,240
it contains that device settings and

508
00:20:02,700 --> 00:20:10,240
print<font color="#CCCCCC"> contents which is represented by</font>

509
00:20:07,240 --> 00:20:14,920
EMI file<font color="#E5E5E5"> we will not go</font><font color="#CCCCCC"> over the</font><font color="#E5E5E5"> details</font>

510
00:20:10,240 --> 00:20:17,679
of EMF<font color="#E5E5E5"> spoon fire in in this talk when</font>

511
00:20:14,920 --> 00:20:21,970
we print proxy<font color="#CCCCCC"> de</font><font color="#E5E5E5"> XE received</font><font color="#CCCCCC"> the print</font>

512
00:20:17,679 --> 00:20:25,600
job<font color="#CCCCCC"> it to</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> low</font><font color="#E5E5E5"> TP VDRL</font><font color="#CCCCCC"> to to do a print</font>

513
00:20:21,970 --> 00:20:27,549
<font color="#E5E5E5">preview work</font><font color="#CCCCCC"> TP</font><font color="#E5E5E5"> idea will pass the EMF</font>

514
00:20:25,600 --> 00:20:30,070
content and render the preview on<font color="#E5E5E5"> the</font>

515
00:20:27,549 --> 00:20:33,129
screen because<font color="#CCCCCC"> of this</font><font color="#E5E5E5"> interesting</font>

516
00:20:30,070 --> 00:20:35,740
function of t<font color="#CCCCCC"> v-- VOD are one can craft</font>

517
00:20:33,130 --> 00:20:38,530
<font color="#CCCCCC">mel</font><font color="#E5E5E5"> from the EMF spoon and the EMF file</font>

518
00:20:35,740 --> 00:20:41,200
<font color="#CCCCCC">a right to calm one party in the</font><font color="#E5E5E5"> guest</font><font color="#CCCCCC"> /</font>

519
00:20:38,530 --> 00:20:43,750
<font color="#CCCCCC">chill machine trigger</font><font color="#E5E5E5"> box in</font><font color="#CCCCCC"> we print</font>

520
00:20:41,200 --> 00:20:46,929
proxy exe and finally get a code

521
00:20:43,750 --> 00:20:49,330
execution on the<font color="#E5E5E5"> host the architecture</font>

522
00:20:46,929 --> 00:20:52,630
is like<font color="#E5E5E5"> this gaston virtual machine</font>

523
00:20:49,330 --> 00:20:55,480
writes data to come one<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the weimar vm</font>

524
00:20:52,630 --> 00:20:58,870
x dot exe<font color="#E5E5E5"> on the host we had</font><font color="#CCCCCC"> an win</font>

525
00:20:55,480 --> 00:21:01,919
<font color="#CCCCCC">where BMX bikes at the exe will</font>

526
00:20:58,870 --> 00:21:05,469
communicate with<font color="#E5E5E5"> we print proxy direct</font><font color="#CCCCCC"> c</font>

527
00:21:01,919 --> 00:21:08,530
by named pipes<font color="#E5E5E5"> we print proxy</font><font color="#CCCCCC"> de USC</font>

528
00:21:05,470 --> 00:21:13,240
<font color="#E5E5E5">gather content and</font><font color="#CCCCCC"> lo t pv l to do the</font>

529
00:21:08,530 --> 00:21:15,160
print print preview job after we learned

530
00:21:13,240 --> 00:21:18,220
the architecture we would like to know

531
00:21:15,160 --> 00:21:20,620
how<font color="#E5E5E5"> to trigger this</font><font color="#CCCCCC"> print preview job by</font>

532
00:21:18,220 --> 00:21:22,540
<font color="#CCCCCC">crop by programming first</font><font color="#E5E5E5"> though we</font>

533
00:21:20,620 --> 00:21:24,340
would like to<font color="#E5E5E5"> thanks</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> Google security</font>

534
00:21:22,540 --> 00:21:27,010
<font color="#CCCCCC">researcher Castilla</font>

535
00:21:24,340 --> 00:21:28,720
<font color="#CCCCCC">he did a</font><font color="#E5E5E5"> great job on fuzzing TV we</font>

536
00:21:27,010 --> 00:21:31,510
<font color="#CCCCCC">taught the area of vulnerabilities many</font>

537
00:21:28,720 --> 00:21:35,980
years ago<font color="#E5E5E5"> our</font><font color="#CCCCCC"> triggering code is based</font>

538
00:21:31,510 --> 00:21:38,049
on his one<font color="#CCCCCC"> PLC</font><font color="#E5E5E5"> code in this PLC code the</font>

539
00:21:35,980 --> 00:21:40,450
variable<font color="#CCCCCC"> thief mode contains many</font>

540
00:21:38,049 --> 00:21:43,870
preview settings such as<font color="#CCCCCC"> the preview</font>

541
00:21:40,450 --> 00:21:47,200
page width and height variables EMF

542
00:21:43,870 --> 00:21:50,770
spoon header and the<font color="#CCCCCC"> EMRI</font><font color="#E5E5E5"> meta fire</font><font color="#CCCCCC"> ext</font>

543
00:21:47,200 --> 00:21:53,410
<font color="#CCCCCC">are commonly</font><font color="#E5E5E5"> no need to change what we</font>

544
00:21:50,770 --> 00:21:56,559
should do is preparing a crafty the EMF

545
00:21:53,410 --> 00:21:58,780
far as the<font color="#E5E5E5"> argument of this trigger</font>

546
00:21:56,559 --> 00:22:02,230
function they need to be fun to do the

547
00:21:58,780 --> 00:22:04,840
printed job for us<font color="#E5E5E5"> obviously</font><font color="#CCCCCC"> this code</font>

548
00:22:02,230 --> 00:22:08,800
structure can be<font color="#E5E5E5"> easily changed to make</font>

549
00:22:04,840 --> 00:22:11,830
<font color="#CCCCCC">a father as well</font><font color="#E5E5E5"> now let me simply</font>

550
00:22:08,800 --> 00:22:13,030
explain what is the<font color="#E5E5E5"> UML file EMF is an</font>

551
00:22:11,830 --> 00:22:15,580
abbreviation

552
00:22:13,030 --> 00:22:18,580
enhanced metafile format<font color="#E5E5E5"> it's a matter</font>

553
00:22:15,580 --> 00:22:21,760
of it's a<font color="#E5E5E5"> file format</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> store in</font>

554
00:22:18,580 --> 00:22:25,480
<font color="#E5E5E5">the</font><font color="#CCCCCC"> device</font><font color="#E5E5E5"> independent representations</font>

555
00:22:21,760 --> 00:22:28,030
of graphics images<font color="#E5E5E5"> it is very widely</font>

556
00:22:25,480 --> 00:22:30,670
<font color="#E5E5E5">used on many software's</font>

557
00:22:28,030 --> 00:22:32,940
such as the Internet Explorer Microsoft

558
00:22:30,670 --> 00:22:35,740
Office and some<font color="#E5E5E5"> printer drivers</font>

559
00:22:32,940 --> 00:22:38,860
including him<font color="#E5E5E5"> know</font><font color="#CCCCCC"> be aware virtual</font>

560
00:22:35,740 --> 00:22:41,950
printer<font color="#E5E5E5"> besides the general</font><font color="#CCCCCC"> fyodor it is</font>

561
00:22:38,860 --> 00:22:46,030
mainly composed<font color="#E5E5E5"> of many many records</font>

562
00:22:41,950 --> 00:22:47,950
<font color="#E5E5E5">named the EMR structures and accept the</font>

563
00:22:46,030 --> 00:22:50,410
default<font color="#CCCCCC"> record types if you wish to</font>

564
00:22:47,950 --> 00:22:52,990
<font color="#E5E5E5">print something like a JPEG file your</font>

565
00:22:50,410 --> 00:22:57,580
<font color="#E5E5E5">JPEG file will</font><font color="#CCCCCC"> be embedded</font><font color="#E5E5E5"> in an EMF</font>

566
00:22:52,990 --> 00:23:00,910
file as a customer the record as we

567
00:22:57,580 --> 00:23:03,699
mentioned the EMR is the EMF record

568
00:23:00,910 --> 00:23:06,670
<font color="#E5E5E5">structure it contains the properties and</font>

569
00:23:03,700 --> 00:23:09,520
the definitions<font color="#E5E5E5"> for representing the</font><font color="#CCCCCC"> EMF</font>

570
00:23:06,670 --> 00:23:11,500
file EMR has a lot of default types

571
00:23:09,520 --> 00:23:14,320
<font color="#E5E5E5">these types are grouped into many</font>

572
00:23:11,500 --> 00:23:17,560
categories such as a bit in bitmap

573
00:23:14,320 --> 00:23:20,500
<font color="#E5E5E5">record types control record times and so</font>

574
00:23:17,560 --> 00:23:22,780
<font color="#CCCCCC">on for the</font><font color="#E5E5E5"> full details about EMF and</font>

575
00:23:20,500 --> 00:23:25,410
<font color="#E5E5E5">EMR structures you can find a</font>

576
00:23:22,780 --> 00:23:28,990
<font color="#CCCCCC">well-documented materials on the</font>

577
00:23:25,410 --> 00:23:31,570
Microsoft<font color="#E5E5E5"> website now let's dive into</font>

578
00:23:28,990 --> 00:23:34,090
the issues<font color="#CCCCCC"> about the viewer virtual</font>

579
00:23:31,570 --> 00:23:36,310
printer in these years<font color="#E5E5E5"> we wear a virtual</font>

580
00:23:34,090 --> 00:23:39,040
printer has been<font color="#CCCCCC"> regarded as</font><font color="#E5E5E5"> one of the</font>

581
00:23:36,310 --> 00:23:41,500
<font color="#E5E5E5">most important attack surfaces in</font><font color="#CCCCCC"> vain'</font>

582
00:23:39,040 --> 00:23:45,520
were for many years<font color="#E5E5E5"> early in VMware</font>

583
00:23:41,500 --> 00:23:47,170
Workstation<font color="#E5E5E5"> 11.1</font><font color="#CCCCCC"> kostia of</font><font color="#E5E5E5"> google</font>

584
00:23:45,520 --> 00:23:49,560
security team has<font color="#E5E5E5"> found a lot</font><font color="#CCCCCC"> of</font>

585
00:23:47,170 --> 00:23:53,140
<font color="#E5E5E5">vulnerabilities in</font><font color="#CCCCCC"> TB VDRL</font>

586
00:23:49,560 --> 00:23:57,010
he has leveraged one<font color="#E5E5E5"> stack overflow</font>

587
00:23:53,140 --> 00:24:00,310
vulnerabilities in TV idea<font color="#CCCCCC"> jpeg2000</font>

588
00:23:57,010 --> 00:24:03,879
handling function to<font color="#E5E5E5"> fool</font><font color="#CCCCCC"> linguae</font><font color="#E5E5E5"> escape</font>

589
00:24:00,310 --> 00:24:07,510
exploit his exploit code is also<font color="#E5E5E5"> used by</font>

590
00:24:03,880 --> 00:24:10,030
many<font color="#E5E5E5"> other following researchers in last</font>

591
00:24:07,510 --> 00:24:12,250
year Mateus you checked<font color="#E5E5E5"> first on the</font>

592
00:24:10,030 --> 00:24:17,050
same<font color="#E5E5E5"> module based on</font><font color="#CCCCCC"> Costas code and</font>

593
00:24:12,250 --> 00:24:20,530
discovered<font color="#CCCCCC"> through CBS TV series</font><font color="#E5E5E5"> 2016 70</font>

594
00:24:17,050 --> 00:24:23,590
80 to 83<font color="#E5E5E5"> and 84 here we would</font><font color="#CCCCCC"> like to</font>

595
00:24:20,530 --> 00:24:26,680
<font color="#CCCCCC">thanks to comatose hacks great work</font><font color="#E5E5E5"> we</font>

596
00:24:23,590 --> 00:24:31,629
were also released an address or a<font color="#E5E5E5"> VMs</font>

597
00:24:26,680 --> 00:24:34,420
say 2016 double 14<font color="#CCCCCC"> to</font><font color="#E5E5E5"> 4 for these three</font>

598
00:24:31,630 --> 00:24:36,640
TVs<font color="#CCCCCC"> so they should already</font><font color="#E5E5E5"> be patched on</font>

599
00:24:34,420 --> 00:24:40,630
<font color="#E5E5E5">VMware Workstation version</font><font color="#CCCCCC"> twelve point</font>

600
00:24:36,640 --> 00:24:42,940
<font color="#CCCCCC">five point zero not next</font><font color="#E5E5E5"> we will show</font>

601
00:24:40,630 --> 00:24:46,330
<font color="#CCCCCC">you the details of</font><font color="#E5E5E5"> these three series</font>

602
00:24:42,940 --> 00:24:49,350
and their patch codes for case studies

603
00:24:46,330 --> 00:24:52,570
the first<font color="#E5E5E5"> one I want to show you is a CV</font>

604
00:24:49,350 --> 00:24:57,040
2016<font color="#E5E5E5"> 7080 - it's a</font><font color="#CCCCCC"> tab</font><font color="#E5E5E5"> of free</font>

605
00:24:52,570 --> 00:24:59,050
vulnerability in<font color="#E5E5E5"> TPU</font><font color="#CCCCCC"> DMR small textile W</font>

606
00:24:57,040 --> 00:25:01,300
record handling function in this

607
00:24:59,050 --> 00:25:04,800
function<font color="#E5E5E5"> after</font><font color="#CCCCCC"> some record data passed</font>

608
00:25:01,300 --> 00:25:08,530
the function tried to<font color="#E5E5E5"> text out the text</font>

609
00:25:04,800 --> 00:25:10,930
<font color="#E5E5E5">in um are small textile W record as you</font>

610
00:25:08,530 --> 00:25:15,220
<font color="#CCCCCC">could see in the Ida's screenshot at the</font>

611
00:25:10,930 --> 00:25:17,860
end of<font color="#E5E5E5"> this function pointer v8 will be</font>

612
00:25:15,220 --> 00:25:20,320
free twice because the first<font color="#CCCCCC"> of three is</font>

613
00:25:17,860 --> 00:25:22,990
in the<font color="#CCCCCC"> heirs</font><font color="#E5E5E5"> branch the question is how</font>

614
00:25:20,320 --> 00:25:26,230
could we bypass the<font color="#E5E5E5"> if</font><font color="#CCCCCC"> branch conditions</font>

615
00:25:22,990 --> 00:25:28,960
<font color="#CCCCCC">matter so you check set the pointer of a</font>

616
00:25:26,230 --> 00:25:33,310
<font color="#E5E5E5">three at</font><font color="#CCCCCC"> forty four value is always be a</font>

617
00:25:28,960 --> 00:25:35,650
<font color="#CCCCCC">nonzero</font><font color="#E5E5E5"> value so it's difficult to</font><font color="#CCCCCC"> enter</font>

618
00:25:33,310 --> 00:25:38,169
the else branch to<font color="#E5E5E5"> get a</font><font color="#CCCCCC"> dab of</font><font color="#E5E5E5"> free</font><font color="#CCCCCC"> and</font>

619
00:25:35,650 --> 00:25:40,390
triggered<font color="#E5E5E5"> after we did some reverse</font>

620
00:25:38,170 --> 00:25:43,180
engineering on the memory we finally

621
00:25:40,390 --> 00:25:46,270
called<font color="#E5E5E5"> the achieved method is as easily</font>

622
00:25:43,180 --> 00:25:49,330
as you<font color="#E5E5E5"> just need to add a registry key</font>

623
00:25:46,270 --> 00:25:52,090
on the<font color="#E5E5E5"> host machine</font><font color="#CCCCCC"> the registry key you</font>

624
00:25:49,330 --> 00:25:55,270
you need<font color="#E5E5E5"> to add is HK local machine</font>

625
00:25:52,090 --> 00:25:58,750
software<font color="#CCCCCC"> imprint</font><font color="#E5E5E5"> TP view and under this</font>

626
00:25:55,270 --> 00:26:01,960
key<font color="#CCCCCC"> you also need to add a t1 named</font>

627
00:25:58,750 --> 00:26:05,350
cliprect<font color="#E5E5E5"> and set its value as 0 then the</font>

628
00:26:01,960 --> 00:26:08,050
pointer of<font color="#CCCCCC"> a three and forty-four value</font>

629
00:26:05,350 --> 00:26:10,330
will be<font color="#CCCCCC"> zero then the if condition will</font>

630
00:26:08,050 --> 00:26:13,960
be bypassed and<font color="#E5E5E5"> double free</font>

631
00:26:10,330 --> 00:26:16,990
<font color="#CCCCCC">vulnerability will be triggered</font><font color="#E5E5E5"> in this</font>

632
00:26:13,960 --> 00:26:19,600
<font color="#CCCCCC">win debug screen shot you</font><font color="#E5E5E5"> could see the</font>

633
00:26:16,990 --> 00:26:24,880
EDI register is a pointer<font color="#CCCCCC"> which would</font>

634
00:26:19,600 --> 00:26:26,770
will be free twice before we called the

635
00:26:24,880 --> 00:26:29,590
second<font color="#E5E5E5"> free call the points are pointed</font>

636
00:26:26,770 --> 00:26:32,230
he father was already be freed<font color="#E5E5E5"> then we</font>

637
00:26:29,590 --> 00:26:37,389
will invoke the<font color="#CCCCCC"> second free car and we</font>

638
00:26:32,230 --> 00:26:38,360
call the hip<font color="#CCCCCC"> Erik</font><font color="#E5E5E5"> detected</font><font color="#CCCCCC"> now we would</font>

639
00:26:37,390 --> 00:26:42,260
like

640
00:26:38,360 --> 00:26:47,120
as we saw in the previous slide<font color="#E5E5E5"> viewers</font>

641
00:26:42,260 --> 00:26:50,600
<font color="#CCCCCC">released em advisory</font><font color="#E5E5E5"> VMs a 2016 double</font>

642
00:26:47,120 --> 00:26:53,209
14 to fix the<font color="#CCCCCC"> CBE issue has already</font><font color="#E5E5E5"> been</font>

643
00:26:50,600 --> 00:26:56,240
patched<font color="#E5E5E5"> however the truth is we were</font>

644
00:26:53,210 --> 00:26:58,789
didn't<font color="#E5E5E5"> Patchett the picture I show</font><font color="#CCCCCC"> you</font>

645
00:26:56,240 --> 00:27:01,100
is<font color="#CCCCCC"> the dispatch of the C usual function</font>

646
00:26:58,789 --> 00:27:05,720
between the<font color="#CCCCCC"> VMware Workstation version</font>

647
00:27:01,100 --> 00:27:07,070
2.1 point 1 and<font color="#E5E5E5"> version 2 upon 5.0 you</font>

648
00:27:05,720 --> 00:27:09,620
<font color="#E5E5E5">could see there is no any difference</font>

649
00:27:07,070 --> 00:27:12,918
<font color="#E5E5E5">between the two</font><font color="#CCCCCC"> versions even in the</font>

650
00:27:09,620 --> 00:27:16,158
latest version we were 14 and<font color="#CCCCCC"> one</font>

651
00:27:12,919 --> 00:27:20,779
<font color="#E5E5E5">abilities do exist now we would like to</font>

652
00:27:16,159 --> 00:27:28,090
<font color="#E5E5E5">show you a demo about this issue on</font><font color="#CCCCCC"> the</font>

653
00:27:20,779 --> 00:27:32,320
<font color="#E5E5E5">latest work of</font><font color="#CCCCCC"> the word</font><font color="#E5E5E5"> version 14mm</font>

654
00:27:28,090 --> 00:27:38,090
<font color="#E5E5E5">because we can we can discuss many</font>

655
00:27:32,320 --> 00:27:40,639
details<font color="#E5E5E5"> so we just a show a proof of</font>

656
00:27:38,090 --> 00:27:44,059
concept of this issue in<font color="#E5E5E5"> the latest</font>

657
00:27:40,639 --> 00:27:46,939
version of we were you<font color="#CCCCCC"> could see the</font>

658
00:27:44,059 --> 00:27:57,470
version<font color="#E5E5E5"> is the latest version 14</font><font color="#CCCCCC"> newer</font>

659
00:27:46,940 --> 00:28:03,110
<font color="#CCCCCC">14 point zero point zero when I</font><font color="#E5E5E5"> run the</font>

660
00:27:57,470 --> 00:28:08,169
POC code you could<font color="#E5E5E5"> see the reprint proxy</font>

661
00:28:03,110 --> 00:28:08,168
de acción<font color="#CCCCCC"> a hosta has been</font><font color="#E5E5E5"> crushed</font>

662
00:28:19,950 --> 00:28:27,790
and we've already reported co2 to be

663
00:28:24,820 --> 00:28:31,560
more security<font color="#E5E5E5"> team and we think they</font>

664
00:28:27,790 --> 00:28:36,879
have<font color="#E5E5E5"> already</font><font color="#CCCCCC"> had some solution on this</font>

665
00:28:31,560 --> 00:28:39,190
<font color="#CCCCCC">ii</font><font color="#E5E5E5"> cv cv 2016 78 III he said memory</font>

666
00:28:36,880 --> 00:28:41,350
corruption vulnerability interview data

667
00:28:39,190 --> 00:28:45,130
<font color="#E5E5E5">one handling a malformed the truth -</font>

668
00:28:41,350 --> 00:28:48,909
file embedded<font color="#CCCCCC"> ems</font><font color="#E5E5E5"> boom file in this case</font>

669
00:28:45,130 --> 00:28:51,190
<font color="#E5E5E5">in the EMF spoon</font><font color="#CCCCCC"> file</font><font color="#E5E5E5"> after</font><font color="#CCCCCC"> AMF content</font>

670
00:28:48,910 --> 00:28:54,160
<font color="#E5E5E5">we need to add</font><font color="#CCCCCC"> another structure named</font>

671
00:28:51,190 --> 00:28:57,700
the MRI<font color="#E5E5E5"> engine phone structure it</font>

672
00:28:54,160 --> 00:29:00,550
contains<font color="#E5E5E5"> a malformed to type on fire TP</font>

673
00:28:57,700 --> 00:29:04,570
view data will pass the truth -<font color="#E5E5E5"> fire</font>

674
00:29:00,550 --> 00:29:06,790
content get a name table in it<font color="#E5E5E5"> extract</font>

675
00:29:04,570 --> 00:29:10,240
the name<font color="#E5E5E5"> buffer and name size structure</font>

676
00:29:06,790 --> 00:29:12,330
<font color="#E5E5E5">then</font><font color="#CCCCCC"> comments ask function to feel the</font>

677
00:29:10,240 --> 00:29:16,740
name buffer which name size last<font color="#CCCCCC"> arrow</font>

678
00:29:12,330 --> 00:29:19,600
this issue is yes before the<font color="#CCCCCC"> mem cycle</font>

679
00:29:16,740 --> 00:29:22,900
there is<font color="#CCCCCC"> no any security check to</font>

680
00:29:19,600 --> 00:29:26,080
restrict the name size and the name size

681
00:29:22,900 --> 00:29:29,890
is in our crafted the<font color="#CCCCCC"> truth - fire it is</font>

682
00:29:26,080 --> 00:29:32,439
controlled by<font color="#E5E5E5"> us so if the name size is</font>

683
00:29:29,890 --> 00:29:34,600
malformed<font color="#E5E5E5"> as a very large number</font><font color="#CCCCCC"> the</font>

684
00:29:32,440 --> 00:29:37,030
process will overwrite<font color="#CCCCCC"> the memory with</font>

685
00:29:34,600 --> 00:29:41,169
<font color="#E5E5E5">the</font><font color="#CCCCCC"> arrow far beyond the name</font><font color="#E5E5E5"> buffer to</font>

686
00:29:37,030 --> 00:29:44,590
be an<font color="#E5E5E5"> out of bounds</font><font color="#CCCCCC"> right issue now look</font>

687
00:29:41,170 --> 00:29:46,720
at the<font color="#CCCCCC"> I</font><font color="#E5E5E5"> - screenshot of variable v7 is</font>

688
00:29:44,590 --> 00:29:49,570
a name sighs<font color="#CCCCCC"> what we could control</font>

689
00:29:46,720 --> 00:29:53,290
before the<font color="#E5E5E5"> mem mem cycle there is no any</font>

690
00:29:49,570 --> 00:29:55,600
v7 check to ensure its value in a windy

691
00:29:53,290 --> 00:29:58,780
back picture the<font color="#E5E5E5"> EDI register is the</font>

692
00:29:55,600 --> 00:30:02,560
<font color="#CCCCCC">name size it is</font><font color="#E5E5E5"> set has a very large</font>

693
00:29:58,780 --> 00:30:07,420
<font color="#E5E5E5">number hex 8f and then after we call the</font>

694
00:30:02,560 --> 00:30:09,550
memset it made the memory corruption<font color="#CCCCCC"> the</font>

695
00:30:07,420 --> 00:30:11,950
patch code added some necessary<font color="#E5E5E5"> checks</font>

696
00:30:09,550 --> 00:30:15,940
before<font color="#CCCCCC"> ma'amselle</font><font color="#E5E5E5"> call to mitigate the</font>

697
00:30:11,950 --> 00:30:20,530
the vulnerability the<font color="#CCCCCC"> lastest CV I will</font>

698
00:30:15,940 --> 00:30:23,770
show you it<font color="#CCCCCC"> CV 2016 70 80 for it's</font><font color="#E5E5E5"> a set</font>

699
00:30:20,530 --> 00:30:26,860
of vulnerabilities<font color="#CCCCCC"> when TP view data are</font>

700
00:30:23,770 --> 00:30:29,400
decompressed<font color="#CCCCCC"> the jpeg2000</font><font color="#E5E5E5"> file this CV</font>

701
00:30:26,860 --> 00:30:31,899
includes nearly<font color="#E5E5E5"> 40</font><font color="#CCCCCC"> different crashes</font>

702
00:30:29,400 --> 00:30:33,159
discovered by<font color="#CCCCCC"> Mateusz</font><font color="#E5E5E5"> you jack</font>

703
00:30:31,900 --> 00:30:35,200
from the crashes

704
00:30:33,159 --> 00:30:38,830
you know the real reasons of every box

705
00:30:35,200 --> 00:30:41,259
<font color="#E5E5E5">one should know jpeg2000 decompression</font>

706
00:30:38,830 --> 00:30:43,899
algorithm<font color="#E5E5E5"> very much it's really not a</font>

707
00:30:41,259 --> 00:30:46,570
small work for us in our talk<font color="#E5E5E5"> I've</font>

708
00:30:43,899 --> 00:30:49,049
explained one of them as a case study

709
00:30:46,570 --> 00:30:52,359
it's an<font color="#CCCCCC"> outer</font><font color="#E5E5E5"> bounds right vulnerability</font>

710
00:30:49,049 --> 00:30:57,700
this outer bounds right<font color="#E5E5E5"> of vulnerability</font>

711
00:30:52,359 --> 00:31:00,789
is presenting<font color="#E5E5E5"> tpv</font><font color="#CCCCCC"> tlgb to decompression</font>

712
00:30:57,700 --> 00:31:03,190
image function<font color="#E5E5E5"> in this function it will</font>

713
00:31:00,789 --> 00:31:06,399
<font color="#E5E5E5">allocates many buffers</font><font color="#CCCCCC"> to place every</font>

714
00:31:03,190 --> 00:31:10,019
decompressed data and also<font color="#CCCCCC"> to some</font><font color="#E5E5E5"> data</font>

715
00:31:06,399 --> 00:31:12,728
operations<font color="#CCCCCC"> on them</font><font color="#E5E5E5"> look at the picture</font>

716
00:31:10,019 --> 00:31:17,320
<font color="#E5E5E5">in this function there is</font><font color="#CCCCCC"> a while loop</font>

717
00:31:12,729 --> 00:31:19,739
<font color="#E5E5E5">takes up the value in hip buffer at some</font>

718
00:31:17,320 --> 00:31:22,928
other data then<font color="#E5E5E5"> refuse them to itself</font>

719
00:31:19,739 --> 00:31:26,349
<font color="#E5E5E5">the loop the loop who will do the same</font>

720
00:31:22,929 --> 00:31:29,109
operation for<font color="#CCCCCC"> the Hokie buffer being a</font>

721
00:31:26,349 --> 00:31:31,119
<font color="#CCCCCC">hip entry sizes hex peel the</font><font color="#E5E5E5"> feeling</font>

722
00:31:29,109 --> 00:31:34,989
operation starts from the hip user of

723
00:31:31,119 --> 00:31:39,340
set<font color="#CCCCCC"> 8 and every value type is a what</font>

724
00:31:34,989 --> 00:31:43,619
type because<font color="#E5E5E5"> exp o</font><font color="#CCCCCC"> subtracted</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> heap</font>

725
00:31:39,340 --> 00:31:48,129
header and offset<font color="#E5E5E5"> 8 equals to hex a oh</font>

726
00:31:43,619 --> 00:31:52,090
<font color="#E5E5E5">it's definitely equals to hex 28 times</font>

727
00:31:48,129 --> 00:31:55,359
the word lands for so the loop times

728
00:31:52,090 --> 00:31:57,820
should be hex 28 in programming we<font color="#E5E5E5"> know</font>

729
00:31:55,359 --> 00:32:01,359
the loop count variable starts from<font color="#E5E5E5"> 0 so</font>

730
00:31:57,820 --> 00:32:03,729
<font color="#E5E5E5">the variable should n do is hex 27 and</font>

731
00:32:01,359 --> 00:32:06,189
the problem here<font color="#E5E5E5"> is there are</font><font color="#CCCCCC"> written</font>

732
00:32:03,729 --> 00:32:08,889
and there is no check for the loop times

733
00:32:06,190 --> 00:32:12,669
the while loop<font color="#CCCCCC"> will only stop when a</font>

734
00:32:08,889 --> 00:32:14,738
decompressed data is consumed<font color="#E5E5E5"> so this</font>

735
00:32:12,669 --> 00:32:17,489
issue gives us a chance to do an

736
00:32:14,739 --> 00:32:21,039
<font color="#CCCCCC">out-of-bounds</font><font color="#E5E5E5"> right to the next</font><font color="#CCCCCC"> EP</font><font color="#E5E5E5"> entry</font>

737
00:32:17,489 --> 00:32:25,450
in this windy bag screenshot the heap

738
00:32:21,039 --> 00:32:29,049
buffer<font color="#E5E5E5"> the hip ever is</font><font color="#CCCCCC"> extra 3 a o to a</font>

739
00:32:25,450 --> 00:32:31,419
fo the EDI register is<font color="#E5E5E5"> the value of the</font>

740
00:32:29,049 --> 00:32:34,330
function will add to the power value and

741
00:32:31,419 --> 00:32:36,899
the<font color="#E5E5E5"> edx register is the</font><font color="#CCCCCC"> loop counter</font>

742
00:32:34,330 --> 00:32:41,168
which is<font color="#E5E5E5"> already be hexed 29 and</font>

743
00:32:36,899 --> 00:32:43,928
actually<font color="#CCCCCC"> one it was hex to 8 is already</font>

744
00:32:41,169 --> 00:32:47,140
out<font color="#CCCCCC"> of bounds right however</font><font color="#E5E5E5"> at that time</font>

745
00:32:43,929 --> 00:32:49,780
<font color="#CCCCCC">the EDI</font><font color="#E5E5E5"> register is</font><font color="#CCCCCC"> 0</font>

746
00:32:47,140 --> 00:32:52,360
so after the value-added<font color="#CCCCCC"> there is no</font>

747
00:32:49,780 --> 00:32:55,720
impact<font color="#E5E5E5"> on the memory but at this time</font>

748
00:32:52,360 --> 00:32:59,770
<font color="#CCCCCC">the EDI register is hexie the target</font>

749
00:32:55,720 --> 00:33:01,810
address<font color="#E5E5E5"> is hex 3 802</font><font color="#CCCCCC"> beam eiffel which</font>

750
00:32:59,770 --> 00:33:04,450
belongs to the next heat buffer header

751
00:33:01,810 --> 00:33:08,370
<font color="#E5E5E5">so after we step over the instruction</font>

752
00:33:04,450 --> 00:33:11,950
the next keep entry header is corrupted

753
00:33:08,370 --> 00:33:14,770
at last in the patch code added some

754
00:33:11,950 --> 00:33:16,660
safety checks<font color="#E5E5E5"> the loop times could</font><font color="#CCCCCC"> no</font>

755
00:33:14,770 --> 00:33:21,220
longer<font color="#E5E5E5"> larger than or you go to the</font>

756
00:33:16,660 --> 00:33:23,980
proper value<font color="#E5E5E5"> as we saw above</font><font color="#CCCCCC"> be aware</font>

757
00:33:21,220 --> 00:33:26,920
virtual printer is so important we were

758
00:33:23,980 --> 00:33:29,980
<font color="#CCCCCC">attack surface it is</font><font color="#E5E5E5"> very worth to do</font>

759
00:33:26,920 --> 00:33:33,790
more<font color="#CCCCCC"> forcing work on this and the EMF</font>

760
00:33:29,980 --> 00:33:37,090
fire is composed of many complex<font color="#CCCCCC"> emi EMR</font>

761
00:33:33,790 --> 00:33:40,030
structures so it's truly<font color="#E5E5E5"> an appropriate</font>

762
00:33:37,090 --> 00:33:43,149
<font color="#E5E5E5">Farzin target thanks to costea's code</font>

763
00:33:40,030 --> 00:33:46,480
our fasting work is only<font color="#E5E5E5"> to mutate the</font>

764
00:33:43,150 --> 00:33:50,110
EMR structures and combine them to to be

765
00:33:46,480 --> 00:33:52,480
<font color="#E5E5E5">crafted</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> emi file</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> sent the</font><font color="#CCCCCC"> the</font>

766
00:33:50,110 --> 00:33:55,629
EMF are to worship printer and<font color="#E5E5E5"> wait for</font>

767
00:33:52,480 --> 00:33:58,840
capturing<font color="#E5E5E5"> a lucky</font><font color="#CCCCCC"> crash</font><font color="#E5E5E5"> and finally by</font>

768
00:33:55,630 --> 00:34:00,850
this work<font color="#CCCCCC"> we've got a couple</font><font color="#E5E5E5"> of</font>

769
00:33:58,840 --> 00:34:04,300
<font color="#E5E5E5">interesting issues and the we</font><font color="#CCCCCC"> bar</font>

770
00:34:00,850 --> 00:34:08,139
<font color="#E5E5E5">already report them to</font><font color="#CCCCCC"> universe security</font>

771
00:34:04,300 --> 00:34:10,989
team<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> thanks</font><font color="#CCCCCC"> yeah cool</font>

772
00:34:08,139 --> 00:34:13,029
so now we are going<font color="#E5E5E5"> to talk</font><font color="#CCCCCC"> about the</font>

773
00:34:10,989 --> 00:34:14,620
vmware workstation graphics<font color="#CCCCCC"> components</font>

774
00:34:13,030 --> 00:34:17,200
that are susceptible to place to host

775
00:34:14,620 --> 00:34:19,418
escape attacks<font color="#E5E5E5"> so we have talked about</font>

776
00:34:17,199 --> 00:34:21,009
vm tools before<font color="#E5E5E5"> if you install vm tools</font>

777
00:34:19,418 --> 00:34:22,899
in the guest<font color="#CCCCCC"> operating system and so</font>

778
00:34:21,010 --> 00:34:24,850
along<font color="#CCCCCC"> with other component it it also</font>

779
00:34:22,899 --> 00:34:27,399
installs a completely fake graphics card

780
00:34:24,850 --> 00:34:29,589
<font color="#CCCCCC">so under device manager in any Windows</font>

781
00:34:27,399 --> 00:34:31,989
host<font color="#E5E5E5"> UK it can be seen as</font><font color="#CCCCCC"> VM our SVG a</font>

782
00:34:29,590 --> 00:34:34,270
3d device that's the special thing<font color="#CCCCCC"> about</font>

783
00:34:31,989 --> 00:34:36,729
this<font color="#E5E5E5"> this graphics card</font><font color="#CCCCCC"> is there is no</font>

784
00:34:34,270 --> 00:34:38,739
no hardware actually<font color="#CCCCCC"> exists for</font><font color="#E5E5E5"> this for</font>

785
00:34:36,730 --> 00:34:41,770
this device<font color="#E5E5E5"> so this is a completely fake</font>

786
00:34:38,739 --> 00:34:43,600
graphics card<font color="#CCCCCC"> so when the guest has to</font>

787
00:34:41,770 --> 00:34:45,219
<font color="#CCCCCC">perform some graphics related operations</font>

788
00:34:43,600 --> 00:34:47,889
<font color="#E5E5E5">the guest has to</font><font color="#CCCCCC"> communicate with this</font>

789
00:34:45,219 --> 00:34:49,989
fake device and to be able<font color="#E5E5E5"> to make this</font>

790
00:34:47,889 --> 00:34:51,668
<font color="#CCCCCC">communication easier this fake device</font>

791
00:34:49,989 --> 00:34:53,918
actually<font color="#E5E5E5"> provides several memory ranges</font>

792
00:34:51,668 --> 00:34:57,129
which can be used by<font color="#E5E5E5"> the guest OS to</font>

793
00:34:53,918 --> 00:34:58,720
communicate with<font color="#E5E5E5"> this virtual GPU so</font>

794
00:34:57,129 --> 00:35:00,700
this is a very<font color="#CCCCCC"> high-level overview of</font>

795
00:34:58,720 --> 00:35:03,759
<font color="#E5E5E5">the</font><font color="#CCCCCC"> VM RSPCA to device</font>

796
00:35:00,700 --> 00:35:06,339
<font color="#E5E5E5">as you can see the the PCI device can</font>

797
00:35:03,760 --> 00:35:07,270
communicate<font color="#CCCCCC"> with the host with within</font>

798
00:35:06,339 --> 00:35:09,460
three medium

799
00:35:07,270 --> 00:35:11,440
the first one is IO port the this is a

800
00:35:09,460 --> 00:35:13,119
simple<font color="#CCCCCC"> in and out instruction that that</font>

801
00:35:11,440 --> 00:35:14,950
is executed to<font color="#CCCCCC"> send some stuff to the</font>

802
00:35:13,119 --> 00:35:17,020
host and the next one is the 2d frame

803
00:35:14,950 --> 00:35:19,598
<font color="#E5E5E5">buffer</font><font color="#CCCCCC"> pudy frame buffer is quite</font><font color="#E5E5E5"> simple</font>

804
00:35:17,020 --> 00:35:22,329
<font color="#E5E5E5">the pixels to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> range to be rendered</font>

805
00:35:19,599 --> 00:35:23,589
<font color="#E5E5E5">has to be has to be written in this 2d</font>

806
00:35:22,329 --> 00:35:26,349
frame buffer and<font color="#E5E5E5"> it will be rendered</font>

807
00:35:23,589 --> 00:35:27,820
<font color="#E5E5E5">accordingly</font><font color="#CCCCCC"> and the last one is the FIFO</font>

808
00:35:26,349 --> 00:35:30,040
memory cube this<font color="#CCCCCC"> is quite interesting</font>

809
00:35:27,820 --> 00:35:32,050
and complex because<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be able to</font>

810
00:35:30,040 --> 00:35:34,660
<font color="#E5E5E5">interact with this FIFO memory cube the</font>

811
00:35:32,050 --> 00:35:36,700
guest OS has to write FIFO commands to

812
00:35:34,660 --> 00:35:38,470
this<font color="#E5E5E5"> FIFO memory queue and wait for the</font>

813
00:35:36,700 --> 00:35:41,290
GPU to process the command once the

814
00:35:38,470 --> 00:35:42,819
command is processed the the GPU will

815
00:35:41,290 --> 00:35:45,029
actually<font color="#E5E5E5"> execute the command</font>

816
00:35:42,820 --> 00:35:47,980
asynchronously<font color="#CCCCCC"> and get the result back</font>

817
00:35:45,030 --> 00:35:51,490
so the interesting thing<font color="#E5E5E5"> about this this</font>

818
00:35:47,980 --> 00:35:53,050
FIFO memory queue and this virtual CPU

819
00:35:51,490 --> 00:35:55,569
<font color="#CCCCCC">that</font><font color="#E5E5E5"> most of these components are</font>

820
00:35:53,050 --> 00:35:57,160
<font color="#CCCCCC">actually implemented</font><font color="#E5E5E5"> VMware vm x dot exe</font>

821
00:35:55,570 --> 00:35:59,530
process which<font color="#E5E5E5"> you see in the host</font><font color="#CCCCCC"> and</font>

822
00:35:57,160 --> 00:36:01,180
including the<font color="#E5E5E5"> two memory ranges we have</font>

823
00:35:59,530 --> 00:36:03,310
talked about 2d frame<font color="#E5E5E5"> buffer and FIFO</font>

824
00:36:01,180 --> 00:36:05,259
memory<font color="#E5E5E5"> they are actually directly mapped</font>

825
00:36:03,310 --> 00:36:09,700
to the<font color="#E5E5E5"> VM</font><font color="#CCCCCC"> our viewing</font><font color="#E5E5E5"> process</font><font color="#CCCCCC"> when when</font>

826
00:36:05,260 --> 00:36:11,230
<font color="#CCCCCC">anyway when when you VM is running so</font>

827
00:36:09,700 --> 00:36:14,020
here are<font color="#E5E5E5"> some of the example of 2d</font>

828
00:36:11,230 --> 00:36:16,060
commands and 3d commands<font color="#E5E5E5"> for very</font>

829
00:36:14,020 --> 00:36:17,650
obvious reasons since the 3d commands

830
00:36:16,060 --> 00:36:20,380
are used<font color="#E5E5E5"> to do more complex graphic</font>

831
00:36:17,650 --> 00:36:24,220
<font color="#CCCCCC">stuffs the command 3d Command handlers</font>

832
00:36:20,380 --> 00:36:25,900
are more complex than 2d commands so now

833
00:36:24,220 --> 00:36:27,939
if we<font color="#CCCCCC"> look at</font><font color="#E5E5E5"> some of the history</font><font color="#CCCCCC"> of the</font>

834
00:36:25,900 --> 00:36:30,730
bugs in it this FIFO command handling

835
00:36:27,940 --> 00:36:33,280
will definitely have to<font color="#CCCCCC"> mention the bug</font>

836
00:36:30,730 --> 00:36:35,740
<font color="#E5E5E5">that was named as</font><font color="#CCCCCC"> cloudburst</font><font color="#E5E5E5"> so this is</font>

837
00:36:33,280 --> 00:36:38,020
a very popular bulk the command<font color="#CCCCCC"> hand the</font>

838
00:36:35,740 --> 00:36:41,259
the<font color="#CCCCCC"> bug was actually present in the</font><font color="#E5E5E5"> 2d</font>

839
00:36:38,020 --> 00:36:42,970
command is<font color="#CCCCCC"> VGA CMD read copy and the</font>

840
00:36:41,260 --> 00:36:46,290
command handler<font color="#E5E5E5"> did not actually have</font>

841
00:36:42,970 --> 00:36:49,299
any check to verify whether whether the

842
00:36:46,290 --> 00:36:53,020
the rectangle<font color="#E5E5E5"> that</font><font color="#CCCCCC"> is given for copy it</font>

843
00:36:49,300 --> 00:36:54,730
is inside<font color="#CCCCCC"> the frame buffer or not so</font>

844
00:36:53,020 --> 00:36:56,770
when the source rectangle is outside the

845
00:36:54,730 --> 00:36:58,960
frame buffer<font color="#CCCCCC"> and the</font><font color="#E5E5E5"> destination inside</font>

846
00:36:56,770 --> 00:37:00,670
the frame buffer<font color="#E5E5E5"> we can actually read</font>

847
00:36:58,960 --> 00:37:02,170
arbitrary<font color="#CCCCCC"> data</font><font color="#E5E5E5"> from the</font><font color="#CCCCCC"> Vrba's</font>

848
00:37:00,670 --> 00:37:04,000
<font color="#E5E5E5">processing to the frame buffer and</font><font color="#CCCCCC"> we</font>

849
00:37:02,170 --> 00:37:05,380
<font color="#E5E5E5">have to remember that the frame the gist</font>

850
00:37:04,000 --> 00:37:07,119
frame buffer actually accessible<font color="#CCCCCC"> from</font>

851
00:37:05,380 --> 00:37:08,680
<font color="#CCCCCC">the host</font><font color="#E5E5E5"> so once we have the required</font>

852
00:37:07,119 --> 00:37:10,030
<font color="#CCCCCC">data inside the</font><font color="#E5E5E5"> frame buffer we can</font>

853
00:37:08,680 --> 00:37:11,618
easily<font color="#E5E5E5"> get the</font><font color="#CCCCCC"> data inside the guest</font>

854
00:37:10,030 --> 00:37:13,060
<font color="#CCCCCC">operating system so in this way we can</font>

855
00:37:11,619 --> 00:37:15,060
steal arbitrary<font color="#CCCCCC"> information from the</font>

856
00:37:13,060 --> 00:37:17,680
<font color="#E5E5E5">phone via our beings process</font>

857
00:37:15,060 --> 00:37:20,770
so when the<font color="#CCCCCC"> distillation</font><font color="#E5E5E5"> is outside the</font>

858
00:37:17,680 --> 00:37:22,180
frame buffer<font color="#E5E5E5"> and and the the</font><font color="#CCCCCC"> source is</font>

859
00:37:20,770 --> 00:37:23,710
inside<font color="#CCCCCC"> the frame buffer what you can do</font>

860
00:37:22,180 --> 00:37:27,009
we can<font color="#CCCCCC"> achieve an arbitrary overwrite as</font>

861
00:37:23,710 --> 00:37:28,630
well so the<font color="#CCCCCC"> author has demonstrated how</font>

862
00:37:27,010 --> 00:37:30,760
he has achieved a full-fledged<font color="#CCCCCC"> exploit</font>

863
00:37:28,630 --> 00:37:33,840
gets<font color="#E5E5E5"> two hosts x-ray it gets two hosts</font>

864
00:37:30,760 --> 00:37:36,580
<font color="#CCCCCC">ik</font><font color="#E5E5E5"> explored</font><font color="#CCCCCC"> using this</font><font color="#E5E5E5"> abusing this</font>

865
00:37:33,840 --> 00:37:38,050
abusing<font color="#E5E5E5"> this vulnerability so we'll add</font>

866
00:37:36,580 --> 00:37:39,430
we<font color="#E5E5E5"> have added that in the reference</font>

867
00:37:38,050 --> 00:37:43,720
<font color="#CCCCCC">section if you are interested in</font><font color="#E5E5E5"> details</font>

868
00:37:39,430 --> 00:37:45,549
you can refer to<font color="#E5E5E5"> those so the bug we</font>

869
00:37:43,720 --> 00:37:48,819
have just discussed<font color="#E5E5E5"> was actually</font><font color="#CCCCCC"> mainly</font>

870
00:37:45,550 --> 00:37:50,290
in the FIFO command handler but when we

871
00:37:48,820 --> 00:37:51,790
<font color="#CCCCCC">are analyzing</font><font color="#E5E5E5"> VM our passes in the</font>

872
00:37:50,290 --> 00:37:53,170
recent days<font color="#CCCCCC"> well if we have noticed</font><font color="#E5E5E5"> that</font>

873
00:37:51,790 --> 00:37:55,750
there<font color="#CCCCCC"> is a certain</font><font color="#E5E5E5"> shift in the focus</font>

874
00:37:53,170 --> 00:37:57,220
<font color="#E5E5E5">and that what we have</font><font color="#CCCCCC"> seen researchers</font>

875
00:37:55,750 --> 00:37:59,080
and volumetric searchers have shifted

876
00:37:57,220 --> 00:38:01,480
<font color="#E5E5E5">their focus to more complex graphics</font>

877
00:37:59,080 --> 00:38:04,420
graphics<font color="#E5E5E5"> components for example graphic</font>

878
00:38:01,480 --> 00:38:05,619
shader so shaders<font color="#CCCCCC"> under VMware huge</font>

879
00:38:04,420 --> 00:38:08,619
attack surface because of<font color="#E5E5E5"> their</font>

880
00:38:05,619 --> 00:38:09,310
<font color="#E5E5E5">complexity so shaders are actually</font>

881
00:38:08,619 --> 00:38:11,020
everywhere

882
00:38:09,310 --> 00:38:13,210
virtually every<font color="#E5E5E5"> modern graphics</font>

883
00:38:11,020 --> 00:38:15,759
simulation you see in<font color="#E5E5E5"> your everyday life</font>

884
00:38:13,210 --> 00:38:17,770
<font color="#CCCCCC">in somewhere powered by codes that is</font>

885
00:38:15,760 --> 00:38:19,210
<font color="#E5E5E5">written for the GPU</font><font color="#CCCCCC"> at the starting</font><font color="#E5E5E5"> from</font>

886
00:38:17,770 --> 00:38:21,070
the realistic lighting effect in the

887
00:38:19,210 --> 00:38:23,920
cutting edge triple<font color="#E5E5E5"> a glimpse to the 2d</font>

888
00:38:21,070 --> 00:38:26,020
post-processing effects<font color="#CCCCCC"> a shader can be</font>

889
00:38:23,920 --> 00:38:28,150
considered as a program<font color="#CCCCCC"> that is that</font>

890
00:38:26,020 --> 00:38:30,100
runs in the graphics pipeline and tells

891
00:38:28,150 --> 00:38:32,859
the computer how to render each pixels

892
00:38:30,100 --> 00:38:34,299
<font color="#E5E5E5">so this is this</font><font color="#CCCCCC"> is mainly used for the</font>

893
00:38:32,859 --> 00:38:36,759
shading<font color="#E5E5E5"> applying appropriate level of</font>

894
00:38:34,300 --> 00:38:41,800
lights<font color="#E5E5E5"> darkness and color within an</font>

895
00:38:36,760 --> 00:38:43,570
image so the shader actually can be in

896
00:38:41,800 --> 00:38:45,010
simple word what we can say shaders

897
00:38:43,570 --> 00:38:46,960
allow graphics developer to directly

898
00:38:45,010 --> 00:38:49,180
program the GPU so this is how the

899
00:38:46,960 --> 00:38:50,770
shredder input<font color="#E5E5E5"> looks like and after it</font>

900
00:38:49,180 --> 00:38:52,810
<font color="#CCCCCC">is compiled and</font><font color="#E5E5E5"> render this is what we</font>

901
00:38:50,770 --> 00:38:55,570
get<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is a as</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> see there</font><font color="#CCCCCC"> are</font>

902
00:38:52,810 --> 00:38:56,890
some<font color="#E5E5E5"> Lightning effect shading effect so</font>

903
00:38:55,570 --> 00:38:58,930
there<font color="#E5E5E5"> are there</font><font color="#CCCCCC"> are two types of</font>

904
00:38:56,890 --> 00:39:01,330
shredder<font color="#E5E5E5"> 2d shaders and 3d shaders and</font>

905
00:38:58,930 --> 00:39:03,009
there are two<font color="#E5E5E5"> popular graphics libraries</font>

906
00:39:01,330 --> 00:39:05,020
available<font color="#E5E5E5"> for 2d and</font><font color="#CCCCCC"> 3d</font><font color="#E5E5E5"> graphics</font>

907
00:39:03,010 --> 00:39:06,490
rendering<font color="#CCCCCC"> there OpenGL and direct3d</font>

908
00:39:05,020 --> 00:39:09,580
<font color="#E5E5E5">since in this talk</font><font color="#CCCCCC"> we'll</font><font color="#E5E5E5"> be mostly</font>

909
00:39:06,490 --> 00:39:11,500
<font color="#E5E5E5">talking on window stuffs whenever we</font>

910
00:39:09,580 --> 00:39:16,180
refer<font color="#CCCCCC"> to graphics API</font><font color="#E5E5E5"> we refer to</font>

911
00:39:11,500 --> 00:39:18,520
direct3d so now let's talk about<font color="#E5E5E5"> the</font>

912
00:39:16,180 --> 00:39:20,049
life of a shader<font color="#E5E5E5"> how so</font><font color="#CCCCCC"> as we already</font>

913
00:39:18,520 --> 00:39:22,030
<font color="#E5E5E5">said the shaders are usually written in</font>

914
00:39:20,050 --> 00:39:25,660
<font color="#CCCCCC">HLSL</font><font color="#E5E5E5"> at the high level shading language</font>

915
00:39:22,030 --> 00:39:27,880
which looks<font color="#E5E5E5"> something like this and in</font>

916
00:39:25,660 --> 00:39:29,170
direct3d version 9 the shader

917
00:39:27,880 --> 00:39:31,029
<font color="#CCCCCC">are actually</font><font color="#E5E5E5"> allowed to</font><font color="#CCCCCC"> be written in</font>

918
00:39:29,170 --> 00:39:33,759
intermediate<font color="#E5E5E5"> assembly language but from</font>

919
00:39:31,029 --> 00:39:35,319
<font color="#E5E5E5">directory</font><font color="#CCCCCC"> 10 it is</font><font color="#E5E5E5"> mandatory to write</font>

920
00:39:33,759 --> 00:39:36,069
the shredder in<font color="#CCCCCC"> HLSL which looks</font>

921
00:39:35,319 --> 00:39:37,720
something<font color="#E5E5E5"> like this</font>

922
00:39:36,069 --> 00:39:39,819
so once the<font color="#CCCCCC"> shredder is compiled using</font>

923
00:39:37,720 --> 00:39:41,709
<font color="#E5E5E5">direct CDA P is what we get is shredder</font>

924
00:39:39,819 --> 00:39:43,359
<font color="#E5E5E5">bytecode and if you disassemble the</font>

925
00:39:41,710 --> 00:39:45,190
shredder<font color="#CCCCCC"> byte code using any shredder</font>

926
00:39:43,359 --> 00:39:47,470
disassembler what we find is

927
00:39:45,190 --> 00:39:48,880
intermediate<font color="#E5E5E5"> assembly language so this</font>

928
00:39:47,470 --> 00:39:51,129
intermediate<font color="#CCCCCC"> assembly language actually</font>

929
00:39:48,880 --> 00:39:53,500
<font color="#E5E5E5">get passed to the GPU driver and GPU</font>

930
00:39:51,130 --> 00:39:55,599
driver will actually convert them<font color="#CCCCCC"> to the</font>

931
00:39:53,500 --> 00:39:57,130
to the<font color="#E5E5E5"> to its proprietary instruction</font>

932
00:39:55,599 --> 00:39:59,890
and the GPU will actually execute those

933
00:39:57,130 --> 00:40:02,940
instructions<font color="#E5E5E5"> and what we see what</font><font color="#CCCCCC"> we we</font>

934
00:39:59,890 --> 00:40:06,220
<font color="#CCCCCC">see some graphics effect in our screen</font>

935
00:40:02,940 --> 00:40:08,289
<font color="#E5E5E5">so now we are going to talk about what</font>

936
00:40:06,220 --> 00:40:10,868
what if we render a shader inside a

937
00:40:08,289 --> 00:40:13,450
VMware Workstation<font color="#CCCCCC"> so in the case</font><font color="#E5E5E5"> to any</font>

938
00:40:10,869 --> 00:40:15,700
any application you<font color="#E5E5E5"> said</font><font color="#CCCCCC"> err</font><font color="#E5E5E5"> it uses</font>

939
00:40:13,450 --> 00:40:17,589
some<font color="#E5E5E5"> several user mode API</font><font color="#CCCCCC"> is to to</font>

940
00:40:15,700 --> 00:40:19,149
<font color="#E5E5E5">process the shader the shader actually</font>

941
00:40:17,589 --> 00:40:22,089
first get compiled<font color="#E5E5E5"> and what we get is</font>

942
00:40:19,150 --> 00:40:23,980
shader bytecode<font color="#E5E5E5"> and once the shader is</font>

943
00:40:22,089 --> 00:40:25,720
compiled some<font color="#CCCCCC"> vm v mode specific</font>

944
00:40:23,980 --> 00:40:27,670
<font color="#CCCCCC">libraries comes into picture which</font>

945
00:40:25,720 --> 00:40:29,980
actually<font color="#E5E5E5"> packs the shredder and shredder</font>

946
00:40:27,670 --> 00:40:31,599
in<font color="#CCCCCC"> P SVG 3d command buffer and the</font>

947
00:40:29,980 --> 00:40:33,940
buffer get passed to the kernel mode

948
00:40:31,599 --> 00:40:36,220
<font color="#CCCCCC">component of the device in</font><font color="#E5E5E5"> this case</font>

949
00:40:33,940 --> 00:40:38,650
which is virtual SVG device and once

950
00:40:36,220 --> 00:40:40,419
<font color="#E5E5E5">this is passed this this virtual this</font>

951
00:40:38,650 --> 00:40:42,190
this GPU will have a fake GP will

952
00:40:40,420 --> 00:40:44,289
actually pass those this 3d<font color="#E5E5E5"> command</font>

953
00:40:42,190 --> 00:40:45,880
buffer to<font color="#CCCCCC"> the host for processing</font><font color="#E5E5E5"> so</font>

954
00:40:44,289 --> 00:40:48,250
once we have received<font color="#E5E5E5"> the raw shader</font>

955
00:40:45,880 --> 00:40:50,589
<font color="#E5E5E5">bytecode inside this in host operating</font>

956
00:40:48,250 --> 00:40:51,880
system<font color="#E5E5E5"> the shader bytecode that we have</font>

957
00:40:50,589 --> 00:40:53,230
received at<font color="#CCCCCC"> the</font><font color="#E5E5E5"> host it doesn't</font>

958
00:40:51,880 --> 00:40:55,329
necessarily have to<font color="#E5E5E5"> be</font><font color="#CCCCCC"> comfortable</font><font color="#E5E5E5"> with</font>

959
00:40:53,230 --> 00:40:58,029
the<font color="#E5E5E5"> host</font><font color="#CCCCCC"> so the</font><font color="#E5E5E5"> VM or vmx process will</font>

960
00:40:55,329 --> 00:41:00,130
have to do some translation parsing and

961
00:40:58,029 --> 00:41:01,089
conversion<font color="#E5E5E5"> to</font><font color="#CCCCCC"> make the shader bytecode</font>

962
00:41:00,130 --> 00:41:03,190
compatible with the host operating

963
00:41:01,089 --> 00:41:06,009
system so once this conversion<font color="#E5E5E5"> is</font><font color="#CCCCCC"> done</font>

964
00:41:03,190 --> 00:41:07,390
<font color="#E5E5E5">and transmission is done the and the GPU</font>

965
00:41:06,009 --> 00:41:10,450
<font color="#E5E5E5">rendered the process we see some</font>

966
00:41:07,390 --> 00:41:18,009
graphics graphics special effects in the

967
00:41:10,450 --> 00:41:19,538
screen<font color="#E5E5E5"> so we have talked about passing</font>

968
00:41:18,009 --> 00:41:21,759
3d<font color="#CCCCCC"> command buffer along</font><font color="#E5E5E5"> with shader</font>

969
00:41:19,539 --> 00:41:23,680
bytecode from<font color="#CCCCCC"> guest to host</font><font color="#E5E5E5"> before now</font>

970
00:41:21,759 --> 00:41:26,650
we are going<font color="#E5E5E5"> to see how it is</font><font color="#CCCCCC"> usually</font>

971
00:41:23,680 --> 00:41:28,660
done in the guest<font color="#E5E5E5"> end it is done using a</font>

972
00:41:26,650 --> 00:41:31,089
protocol that<font color="#E5E5E5"> is called SVG a 3d</font>

973
00:41:28,660 --> 00:41:33,970
protocol SVG a 3d protocol is designed

974
00:41:31,089 --> 00:41:35,828
<font color="#E5E5E5">to be</font><font color="#CCCCCC"> API vendor and API neutral but for</font>

975
00:41:33,970 --> 00:41:37,419
convenience<font color="#E5E5E5"> it has been designed to be</font>

976
00:41:35,829 --> 00:41:39,549
<font color="#CCCCCC">comfortable</font><font color="#E5E5E5"> with direct3d most of the</font>

977
00:41:37,420 --> 00:41:42,010
places<font color="#CCCCCC"> so the first</font><font color="#E5E5E5"> the shader</font><font color="#CCCCCC"> bytecode</font>

978
00:41:39,549 --> 00:41:44,470
can<font color="#E5E5E5"> be passed from guest to host</font>

979
00:41:42,010 --> 00:41:47,050
using a<font color="#E5E5E5"> 3d command called SVG 3d CMD</font>

980
00:41:44,470 --> 00:41:48,549
<font color="#E5E5E5">shader define the parameters to be sent</font>

981
00:41:47,050 --> 00:41:50,650
along<font color="#E5E5E5"> with this particular 3d commands</font>

982
00:41:48,550 --> 00:41:52,210
<font color="#E5E5E5">are are defined in a structure which</font>

983
00:41:50,650 --> 00:41:54,460
looks<font color="#E5E5E5"> something like this as you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> see</font>

984
00:41:52,210 --> 00:41:55,750
so as you can<font color="#E5E5E5"> see the structure holds</font>

985
00:41:54,460 --> 00:41:58,090
some characteristics about the<font color="#E5E5E5"> shader</font>

986
00:41:55,750 --> 00:42:01,119
which is shader type and it also<font color="#E5E5E5"> holds</font>

987
00:41:58,090 --> 00:42:03,010
<font color="#CCCCCC">the raw shader</font><font color="#E5E5E5"> bytecode so after that</font>

988
00:42:01,119 --> 00:42:04,990
the space for the particular<font color="#E5E5E5"> 3d command</font>

989
00:42:03,010 --> 00:42:06,880
needs to<font color="#E5E5E5"> be and</font><font color="#CCCCCC"> n</font><font color="#E5E5E5"> its parameter needs to</font>

990
00:42:04,990 --> 00:42:10,000
be reserved in<font color="#E5E5E5"> the FIFO memory cube so</font>

991
00:42:06,880 --> 00:42:12,400
in this example<font color="#E5E5E5"> the function name is SVG</font>

992
00:42:10,000 --> 00:42:15,040
a 3d<font color="#CCCCCC"> FIFO razor</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> reserved</font><font color="#E5E5E5"> the space</font>

993
00:42:12,400 --> 00:42:17,740
for this<font color="#E5E5E5"> SVG 3d</font><font color="#CCCCCC"> fee fie foe command and</font>

994
00:42:15,040 --> 00:42:19,480
arguments this reservation<font color="#E5E5E5"> has to be</font>

995
00:42:17,740 --> 00:42:22,359
done by making<font color="#E5E5E5"> use of a structure called</font>

996
00:42:19,480 --> 00:42:24,340
<font color="#E5E5E5">SVG a 3d CMD header this header actually</font>

997
00:42:22,360 --> 00:42:25,960
<font color="#E5E5E5">looks something like this and as</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can</font>

998
00:42:24,340 --> 00:42:28,690
<font color="#CCCCCC">see this</font><font color="#E5E5E5"> structure actually holds some</font>

999
00:42:25,960 --> 00:42:30,340
hold some characteristics about<font color="#E5E5E5"> the 3d</font>

1000
00:42:28,690 --> 00:42:34,300
command<font color="#E5E5E5"> that we are going to pass to the</font>

1001
00:42:30,340 --> 00:42:36,130
GPU<font color="#E5E5E5"> for to execute after after this this</font>

1002
00:42:34,300 --> 00:42:37,750
reservation<font color="#E5E5E5"> is done what we have to do</font>

1003
00:42:36,130 --> 00:42:40,270
we have<font color="#E5E5E5"> to simply commit those commands</font>

1004
00:42:37,750 --> 00:42:45,610
for GPU to<font color="#CCCCCC"> be</font><font color="#E5E5E5"> processed and wait for the</font>

1005
00:42:40,270 --> 00:42:47,230
GPU<font color="#CCCCCC"> to finish the the</font><font color="#E5E5E5"> execution so what</font>

1006
00:42:45,610 --> 00:42:48,430
we have seen so far we have received<font color="#E5E5E5"> the</font>

1007
00:42:47,230 --> 00:42:50,560
raw shader bytecode in the host

1008
00:42:48,430 --> 00:42:52,629
<font color="#E5E5E5">operating system now as you have already</font>

1009
00:42:50,560 --> 00:42:55,090
<font color="#E5E5E5">said the shooter is the shader at the</font>

1010
00:42:52,630 --> 00:42:57,100
shader needs to be translated<font color="#E5E5E5"> and the</font>

1011
00:42:55,090 --> 00:43:00,400
host process<font color="#CCCCCC"> actually has to make it</font>

1012
00:42:57,100 --> 00:43:01,650
compatible<font color="#E5E5E5"> with the</font><font color="#CCCCCC"> the host GPU</font><font color="#E5E5E5"> so for</font>

1013
00:43:00,400 --> 00:43:03,970
that actually there are lot<font color="#CCCCCC"> of</font>

1014
00:43:01,650 --> 00:43:05,619
translation and parsing going on and you

1015
00:43:03,970 --> 00:43:06,970
have<font color="#CCCCCC"> to remember that when when we</font><font color="#E5E5E5"> are</font>

1016
00:43:05,619 --> 00:43:09,190
<font color="#CCCCCC">actually parsing</font><font color="#E5E5E5"> some untrusted data</font>

1017
00:43:06,970 --> 00:43:11,319
there can be some serious issues<font color="#E5E5E5"> so in</font>

1018
00:43:09,190 --> 00:43:13,300
the screenshot what you see inside the

1019
00:43:11,320 --> 00:43:14,590
viewer<font color="#CCCCCC"> vmx</font><font color="#E5E5E5"> it translate each and every</font>

1020
00:43:13,300 --> 00:43:16,090
guest<font color="#E5E5E5"> set of instruction to</font><font color="#CCCCCC"> the host</font>

1021
00:43:14,590 --> 00:43:18,280
specific children instruction the

1022
00:43:16,090 --> 00:43:20,320
screenshot here shows<font color="#CCCCCC"> how to how the</font>

1023
00:43:18,280 --> 00:43:22,180
shader<font color="#CCCCCC"> opcodes each of codes of this</font>

1024
00:43:20,320 --> 00:43:29,410
intermediate shader assembly<font color="#E5E5E5"> you get</font>

1025
00:43:22,180 --> 00:43:30,669
they get<font color="#CCCCCC"> converted so now we are going</font>

1026
00:43:29,410 --> 00:43:31,779
<font color="#E5E5E5">to take a quick look some of the</font>

1027
00:43:30,670 --> 00:43:36,609
vulnerabilities<font color="#E5E5E5"> that has been passed</font>

1028
00:43:31,780 --> 00:43:39,820
<font color="#CCCCCC">past in a VM this VM</font><font color="#E5E5E5"> our workstation</font><font color="#CCCCCC"> the</font>

1029
00:43:36,609 --> 00:43:41,290
<font color="#E5E5E5">shaders so the these are the these are</font>

1030
00:43:39,820 --> 00:43:43,359
<font color="#E5E5E5">some of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> advisories that</font><font color="#CCCCCC"> has</font><font color="#E5E5E5"> fixed</font>

1031
00:43:41,290 --> 00:43:46,600
<font color="#E5E5E5">some shadow related issues we are going</font>

1032
00:43:43,359 --> 00:43:48,040
<font color="#E5E5E5">to discuss couple of them so this is</font>

1033
00:43:46,600 --> 00:43:51,000
this<font color="#E5E5E5"> is one of the paths that we have</font>

1034
00:43:48,040 --> 00:43:54,520
notice when<font color="#CCCCCC"> vm</font><font color="#E5E5E5"> i</font><font color="#CCCCCC"> wrote about 5.5 was</font>

1035
00:43:51,000 --> 00:43:55,240
released what you have seen that<font color="#CCCCCC"> that</font>

1036
00:43:54,520 --> 00:43:56,680
this this

1037
00:43:55,240 --> 00:44:00,250
particular piece<font color="#CCCCCC"> of code</font><font color="#E5E5E5"> I actually</font>

1038
00:43:56,680 --> 00:44:02,080
responsible for parsing the<font color="#CCCCCC"> shadow</font>

1039
00:44:00,250 --> 00:44:05,619
assembly instruction<font color="#CCCCCC"> DCL index table</font><font color="#E5E5E5"> Tim</font>

1040
00:44:02,080 --> 00:44:07,240
<font color="#E5E5E5">and what</font><font color="#CCCCCC"> you can see here the argument</font>

1041
00:44:05,619 --> 00:44:10,390
<font color="#E5E5E5">to of this function was actually</font>

1042
00:44:07,240 --> 00:44:11,709
<font color="#E5E5E5">directly coming from argument</font><font color="#CCCCCC"> two was we</font>

1043
00:44:10,390 --> 00:44:13,690
are<font color="#E5E5E5"> writing</font><font color="#CCCCCC"> to the this</font><font color="#E5E5E5"> is the heap</font>

1044
00:44:11,710 --> 00:44:15,369
buffer that was that<font color="#E5E5E5"> were writing to and</font>

1045
00:44:13,690 --> 00:44:16,810
argument<font color="#E5E5E5"> three was directly</font><font color="#CCCCCC"> coming from</font>

1046
00:44:15,369 --> 00:44:19,210
the guest<font color="#E5E5E5"> operating system which is</font>

1047
00:44:16,810 --> 00:44:21,549
untrusted so using this bug actually<font color="#E5E5E5"> we</font>

1048
00:44:19,210 --> 00:44:22,900
can trigger an arbitrary<font color="#CCCCCC"> overrate so</font>

1049
00:44:21,550 --> 00:44:25,060
this is a this<font color="#CCCCCC"> is a live debugging</font>

1050
00:44:22,900 --> 00:44:26,830
screenshot<font color="#CCCCCC"> but you can see</font><font color="#E5E5E5"> here the</font>

1051
00:44:25,060 --> 00:44:28,720
<font color="#E5E5E5">destination is</font><font color="#CCCCCC"> RCX which is the</font>

1052
00:44:26,830 --> 00:44:31,960
destination heap buffer it is pointing

1053
00:44:28,720 --> 00:44:33,730
to him and this<font color="#E5E5E5"> rd8 actually directly</font>

1054
00:44:31,960 --> 00:44:35,380
coming<font color="#CCCCCC"> from the host against based</font>

1055
00:44:33,730 --> 00:44:36,280
operating system as you can<font color="#E5E5E5"> see it is</font>

1056
00:44:35,380 --> 00:44:38,470
set<font color="#E5E5E5"> to</font><font color="#CCCCCC"> four</font><font color="#E5E5E5"> two</font><font color="#CCCCCC"> four</font><font color="#E5E5E5"> two</font>

1057
00:44:36,280 --> 00:44:40,119
so using this bug<font color="#CCCCCC"> actually we can</font>

1058
00:44:38,470 --> 00:44:41,919
trigger an arbitrary overwrite and we

1059
00:44:40,119 --> 00:44:45,160
can<font color="#E5E5E5"> write some data into that into this</font>

1060
00:44:41,920 --> 00:44:47,250
<font color="#CCCCCC">hey buffer now</font><font color="#E5E5E5"> I'm going to show a quick</font>

1061
00:44:45,160 --> 00:44:47,250
demo

1062
00:44:59,269 --> 00:45:03,779
so this is a vulnerable<font color="#CCCCCC"> version of</font>

1063
00:45:01,829 --> 00:45:06,890
VMware<font color="#E5E5E5"> Workstation</font><font color="#CCCCCC"> this is you see that</font>

1064
00:45:03,779 --> 00:45:06,890
we have<font color="#CCCCCC"> developed</font><font color="#E5E5E5"> from the patch</font>

1065
00:45:13,940 --> 00:45:18,589
so under<font color="#E5E5E5"> Windows 10 there is</font><font color="#CCCCCC"> a process</font>

1066
00:45:16,760 --> 00:45:20,630
<font color="#CCCCCC">called search UI dot exe which actually</font>

1067
00:45:18,589 --> 00:45:22,308
<font color="#CCCCCC">uses</font><font color="#E5E5E5"> shredder to perform some animation</font>

1068
00:45:20,630 --> 00:45:23,869
they start the<font color="#CCCCCC"> animation that you see in</font>

1069
00:45:22,309 --> 00:45:26,119
the<font color="#E5E5E5"> Start menu it is usually done using</font>

1070
00:45:23,869 --> 00:45:29,079
<font color="#E5E5E5">shredder so this process it will cease</font>

1071
00:45:26,119 --> 00:45:31,010
will load all many<font color="#E5E5E5"> of the direct3d</font>

1072
00:45:29,079 --> 00:45:35,180
<font color="#E5E5E5">dealers that are associated</font><font color="#CCCCCC"> with</font>

1073
00:45:31,010 --> 00:45:37,280
direct3d<font color="#E5E5E5"> as you can see some</font><font color="#CCCCCC"> of these</font>

1074
00:45:35,180 --> 00:45:46,549
dll's are loaded inside cells UI dot exe

1075
00:45:37,280 --> 00:45:49,849
process now we have a driver in this

1076
00:45:46,549 --> 00:45:51,710
place<font color="#CCCCCC"> so before the</font><font color="#E5E5E5"> SPG</font><font color="#CCCCCC"> virtualize vsvg</font>

1077
00:45:49,849 --> 00:45:53,329
a device<font color="#CCCCCC"> passed the</font><font color="#E5E5E5"> SVG a 3d command</font>

1078
00:45:51,710 --> 00:45:55,549
buffer to<font color="#CCCCCC"> the host operating</font><font color="#E5E5E5"> system it</font>

1079
00:45:53,329 --> 00:45:57,619
simply intercept the content and write

1080
00:45:55,549 --> 00:46:00,020
our own shader<font color="#CCCCCC"> bytecode custom by</font><font color="#E5E5E5"> a</font>

1081
00:45:57,619 --> 00:46:02,270
custom shader<font color="#CCCCCC"> bytecode to be able</font><font color="#E5E5E5"> to</font>

1082
00:46:00,020 --> 00:46:03,859
trigger<font color="#E5E5E5"> the vulnerability so now when</font><font color="#CCCCCC"> we</font>

1083
00:46:02,270 --> 00:46:06,530
click<font color="#E5E5E5"> on the start</font><font color="#CCCCCC"> button it should send</font>

1084
00:46:03,859 --> 00:46:07,880
some shader<font color="#CCCCCC"> 3 SVG 3d command buffer and</font>

1085
00:46:06,530 --> 00:46:10,309
along with some shader<font color="#E5E5E5"> bytecode to the</font>

1086
00:46:07,880 --> 00:46:12,410
host<font color="#E5E5E5"> operating system when you click on</font>

1087
00:46:10,309 --> 00:46:17,329
<font color="#E5E5E5">it as you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> see the VMware Workstation</font>

1088
00:46:12,410 --> 00:46:18,890
has been crashed so this is not a<font color="#CCCCCC"> zero</font>

1089
00:46:17,329 --> 00:46:20,740
to this<font color="#CCCCCC"> villanova</font><font color="#E5E5E5"> T's has already been</font>

1090
00:46:18,890 --> 00:46:30,859
fixed<font color="#E5E5E5"> by VMware we just developed this</font>

1091
00:46:20,740 --> 00:46:32,569
<font color="#CCCCCC">POC from the patch so we have seen</font><font color="#E5E5E5"> lot</font>

1092
00:46:30,859 --> 00:46:34,520
of<font color="#E5E5E5"> similar issues got pass into the</font>

1093
00:46:32,569 --> 00:46:36,440
shader parsing code<font color="#E5E5E5"> here is another</font>

1094
00:46:34,520 --> 00:46:40,400
issue that<font color="#E5E5E5"> has</font><font color="#CCCCCC"> been fixed</font><font color="#E5E5E5"> by</font><font color="#CCCCCC"> VMware as</font>

1095
00:46:36,440 --> 00:46:42,319
you can see here the the<font color="#CCCCCC"> a2 was the</font>

1096
00:46:40,400 --> 00:46:44,180
second argument of<font color="#E5E5E5"> the function was</font>

1097
00:46:42,319 --> 00:46:45,440
directly<font color="#CCCCCC"> coming from the guest guest</font>

1098
00:46:44,180 --> 00:46:48,879
operating system and it<font color="#E5E5E5"> is actually</font>

1099
00:46:45,440 --> 00:46:51,470
untrusted and and we are writing some

1100
00:46:48,880 --> 00:46:54,319
writing some content to<font color="#E5E5E5"> the certain</font>

1101
00:46:51,470 --> 00:46:56,209
offset<font color="#E5E5E5"> and we can actually achieve out</font>

1102
00:46:54,319 --> 00:46:57,859
of<font color="#E5E5E5"> bound</font><font color="#CCCCCC"> write</font><font color="#E5E5E5"> using this and what you</font>

1103
00:46:56,210 --> 00:46:59,960
can<font color="#CCCCCC"> see here Beamer has added a tiny</font>

1104
00:46:57,859 --> 00:47:02,690
<font color="#E5E5E5">little fix for this just</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> make</font><font color="#CCCCCC"> sure</font>

1105
00:46:59,960 --> 00:47:04,250
that this the<font color="#E5E5E5"> argument</font><font color="#CCCCCC"> that is coming</font>

1106
00:47:02,690 --> 00:47:07,960
<font color="#CCCCCC">from</font><font color="#E5E5E5"> the guest operating system has</font>

1107
00:47:04,250 --> 00:47:10,130
added some bounds checking for<font color="#E5E5E5"> that and</font>

1108
00:47:07,960 --> 00:47:12,619
there<font color="#CCCCCC"> is another</font><font color="#E5E5E5"> issue</font><font color="#CCCCCC"> that has been</font>

1109
00:47:10,130 --> 00:47:14,299
fixed in a<font color="#E5E5E5"> shader model for</font><font color="#CCCCCC"> DCL</font>

1110
00:47:12,619 --> 00:47:17,049
intermediate constant<font color="#CCCCCC"> were</font><font color="#E5E5E5"> for parser</font><font color="#CCCCCC"> as</font>

1111
00:47:14,299 --> 00:47:19,788
you can see there is an MCP call<font color="#E5E5E5"> and</font>

1112
00:47:17,049 --> 00:47:21,619
this the heart<font color="#CCCCCC"> the third argument which</font>

1113
00:47:19,789 --> 00:47:23,089
is<font color="#CCCCCC"> the size of the memcpy</font><font color="#E5E5E5"> it was</font>

1114
00:47:21,619 --> 00:47:24,770
directly coming<font color="#CCCCCC"> from the host based</font>

1115
00:47:23,089 --> 00:47:27,349
operating<font color="#E5E5E5"> system and since this is</font>

1116
00:47:24,770 --> 00:47:27,920
untrusted<font color="#E5E5E5"> data and we can trigger an</font>

1117
00:47:27,349 --> 00:47:31,319
outer bound

1118
00:47:27,920 --> 00:47:33,660
<font color="#E5E5E5">condition here using this memcpy and VMO</font>

1119
00:47:31,319 --> 00:47:35,099
has added a fix for<font color="#E5E5E5"> this by adding a</font>

1120
00:47:33,660 --> 00:47:37,410
small check for this<font color="#E5E5E5"> just to make sure</font>

1121
00:47:35,099 --> 00:47:40,829
<font color="#E5E5E5">that it is not greater than</font><font color="#CCCCCC"> hexed and</font>

1122
00:47:37,410 --> 00:47:42,328
hits<font color="#CCCCCC"> 1000</font><font color="#E5E5E5"> and if it is more</font><font color="#CCCCCC"> than</font><font color="#E5E5E5"> 1000 it</font>

1123
00:47:40,829 --> 00:47:45,180
will<font color="#E5E5E5"> actually take you</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> some error and</font>

1124
00:47:42,329 --> 00:47:47,160
it will just handle the error so the

1125
00:47:45,180 --> 00:47:50,299
vulnerabilities we have discussed<font color="#E5E5E5"> so far</font>

1126
00:47:47,160 --> 00:47:52,890
<font color="#CCCCCC">are mostly</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> the shader model for but</font>

1127
00:47:50,299 --> 00:47:54,180
since as<font color="#CCCCCC"> we have already said that view</font>

1128
00:47:52,890 --> 00:47:56,700
more supports many other operating

1129
00:47:54,180 --> 00:47:58,379
system and it the<font color="#E5E5E5"> vmware vm x will have</font>

1130
00:47:56,700 --> 00:48:00,629
other shader model parser code as well

1131
00:47:58,380 --> 00:48:02,849
<font color="#E5E5E5">so this is an interesting patch that we</font>

1132
00:48:00,630 --> 00:48:04,730
have noticed in VMware<font color="#E5E5E5"> Workstation</font><font color="#CCCCCC"> what</font>

1133
00:48:02,849 --> 00:48:07,019
you can see<font color="#E5E5E5"> here the second argument</font>

1134
00:48:04,730 --> 00:48:08,849
second<font color="#CCCCCC"> argument was actually coming from</font>

1135
00:48:07,019 --> 00:48:12,779
<font color="#CCCCCC">the directly from the guest operating</font>

1136
00:48:08,849 --> 00:48:14,599
system<font color="#E5E5E5"> and yeah and this is</font><font color="#CCCCCC"> untested vm</font>

1137
00:48:12,779 --> 00:48:16,829
are actually added this<font color="#E5E5E5"> tiny little fix</font>

1138
00:48:14,599 --> 00:48:20,609
<font color="#E5E5E5">just to make</font><font color="#CCCCCC"> sure that the untrusted</font>

1139
00:48:16,829 --> 00:48:23,849
<font color="#E5E5E5">data is is</font><font color="#CCCCCC"> enter they had added some</font>

1140
00:48:20,609 --> 00:48:24,869
<font color="#E5E5E5">sanity sanity check on the untested data</font>

1141
00:48:23,849 --> 00:48:26,880
that is<font color="#E5E5E5"> coming from the guest operating</font>

1142
00:48:24,869 --> 00:48:29,190
<font color="#E5E5E5">system this function actually handles</font>

1143
00:48:26,880 --> 00:48:31,170
the national model<font color="#E5E5E5"> of call</font><font color="#CCCCCC"> instruction</font>

1144
00:48:29,190 --> 00:48:32,910
as you can see it was directly

1145
00:48:31,170 --> 00:48:34,440
<font color="#E5E5E5">cross-referenced to that function</font><font color="#CCCCCC"> this</font>

1146
00:48:32,910 --> 00:48:37,109
<font color="#E5E5E5">is the actual shader model</font><font color="#CCCCCC"> one parser</font>

1147
00:48:34,440 --> 00:48:39,420
code depending on<font color="#CCCCCC"> the</font><font color="#E5E5E5"> different</font>

1148
00:48:37,109 --> 00:48:43,859
different<font color="#E5E5E5"> assembly instruction</font><font color="#CCCCCC"> it will</font>

1149
00:48:39,420 --> 00:48:47,099
redirect so we have talked about<font color="#E5E5E5"> some of</font>

1150
00:48:43,859 --> 00:48:48,930
<font color="#E5E5E5">the three attack surfaces that that is</font>

1151
00:48:47,099 --> 00:48:51,119
that we have seen<font color="#CCCCCC"> attack most by the</font>

1152
00:48:48,930 --> 00:48:53,640
volume will be<font color="#E5E5E5"> searched to perform this</font>

1153
00:48:51,119 --> 00:48:55,319
to host escape<font color="#E5E5E5"> attack but what we what</font>

1154
00:48:53,640 --> 00:48:56,489
we<font color="#CCCCCC"> know that VMR is a very complex</font><font color="#E5E5E5"> piece</font>

1155
00:48:55,319 --> 00:48:59,339
of<font color="#CCCCCC"> software and</font><font color="#E5E5E5"> there are other</font>

1156
00:48:56,489 --> 00:49:01,559
components<font color="#CCCCCC"> as well so we we predict that</font>

1157
00:48:59,339 --> 00:49:04,558
<font color="#E5E5E5">we in future we may see some more bugs</font>

1158
00:49:01,559 --> 00:49:07,049
in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> SVG</font><font color="#E5E5E5"> components as well because</font>

1159
00:49:04,559 --> 00:49:10,529
and there are many other stuffs<font color="#E5E5E5"> many</font>

1160
00:49:07,049 --> 00:49:12,210
other this shader assembly parser<font color="#E5E5E5"> so we</font>

1161
00:49:10,529 --> 00:49:14,670
may see some<font color="#E5E5E5"> more bugs in SVG</font><font color="#CCCCCC"> a to</font>

1162
00:49:12,210 --> 00:49:16,950
implementation<font color="#E5E5E5"> and a unity feature is</font>

1163
00:49:14,670 --> 00:49:18,960
one of the one of the<font color="#CCCCCC"> very</font><font color="#E5E5E5"> complex</font>

1164
00:49:16,950 --> 00:49:21,328
<font color="#E5E5E5">feature that VMware Workstation provide</font>

1165
00:49:18,960 --> 00:49:23,430
so<font color="#E5E5E5"> we may see some bugs in the unity</font>

1166
00:49:21,329 --> 00:49:25,950
feature as well<font color="#E5E5E5"> since this is a quite</font>

1167
00:49:23,430 --> 00:49:29,038
<font color="#E5E5E5">complex and which which bugs may allow</font>

1168
00:49:25,950 --> 00:49:30,839
to perform<font color="#E5E5E5"> this to</font><font color="#CCCCCC"> host escapes and and</font>

1169
00:49:29,039 --> 00:49:32,609
other than<font color="#E5E5E5"> that every emulated device</font>

1170
00:49:30,839 --> 00:49:34,170
that is that we see inside<font color="#E5E5E5"> the guest</font>

1171
00:49:32,609 --> 00:49:36,119
<font color="#CCCCCC">operating system can</font><font color="#E5E5E5"> be susceptible to</font>

1172
00:49:34,170 --> 00:49:38,099
<font color="#E5E5E5">guest to host escape attacks including</font>

1173
00:49:36,119 --> 00:49:40,799
the<font color="#E5E5E5"> network card including the sound and</font>

1174
00:49:38,099 --> 00:49:41,819
everything<font color="#E5E5E5"> so we may see some attacks in</font>

1175
00:49:40,799 --> 00:49:45,959
the other virtual

1176
00:49:41,819 --> 00:49:49,319
<font color="#CCCCCC">as well so now this is a take ways of</font>

1177
00:49:45,959 --> 00:49:51,239
our<font color="#E5E5E5"> talk as we as with other</font><font color="#CCCCCC"> softwares</font>

1178
00:49:49,319 --> 00:49:54,449
<font color="#E5E5E5">when VM with</font><font color="#CCCCCC"> us virtualization</font><font color="#E5E5E5"> software</font>

1179
00:49:51,239 --> 00:49:56,369
so<font color="#CCCCCC"> our develop</font><font color="#E5E5E5"> probably this this gets</font>

1180
00:49:54,449 --> 00:49:59,670
to host escape attacks were not<font color="#E5E5E5"> seen as</font>

1181
00:49:56,369 --> 00:50:00,449
<font color="#CCCCCC">a problem</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> guest</font><font color="#E5E5E5"> to host escapes</font><font color="#CCCCCC"> are</font>

1182
00:49:59,670 --> 00:50:02,130
real now

1183
00:50:00,449 --> 00:50:04,289
so probably it is<font color="#CCCCCC"> the right time to</font><font color="#E5E5E5"> make</font>

1184
00:50:02,130 --> 00:50:07,469
some<font color="#E5E5E5"> changes or security improvement in</font>

1185
00:50:04,289 --> 00:50:08,940
the core virtualization<font color="#E5E5E5"> tools so we have</font>

1186
00:50:07,469 --> 00:50:10,859
<font color="#CCCCCC">to while doing that</font><font color="#E5E5E5"> we have to keep in</font>

1187
00:50:08,940 --> 00:50:13,529
<font color="#CCCCCC">mind</font><font color="#E5E5E5"> the attack surface the overall</font>

1188
00:50:10,859 --> 00:50:15,660
virtualization<font color="#E5E5E5"> security and definitely</font>

1189
00:50:13,529 --> 00:50:17,190
<font color="#E5E5E5">that</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> to host escapes so in terms of</font>

1190
00:50:15,660 --> 00:50:18,420
exploitation what we have seen while

1191
00:50:17,190 --> 00:50:21,299
reverse engineering VMware Workstation

1192
00:50:18,420 --> 00:50:23,160
<font color="#E5E5E5">it it lacks couple of things like for</font>

1193
00:50:21,299 --> 00:50:25,739
<font color="#CCCCCC">example there</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> no C of G protection so</font>

1194
00:50:23,160 --> 00:50:27,868
far in the<font color="#CCCCCC"> vm r vm x process but but we</font>

1195
00:50:25,739 --> 00:50:32,160
are we are we are hopeful that<font color="#E5E5E5"> EMR will</font>

1196
00:50:27,869 --> 00:50:34,289
improve<font color="#E5E5E5"> this real soon</font><font color="#CCCCCC"> so one more</font>

1197
00:50:32,160 --> 00:50:37,170
solution<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> virtualization</font><font color="#E5E5E5"> software</font>

1198
00:50:34,289 --> 00:50:39,410
user would<font color="#CCCCCC"> be we what they should do</font>

1199
00:50:37,170 --> 00:50:43,410
they should minimize<font color="#E5E5E5"> attack surface by</font>

1200
00:50:39,410 --> 00:50:45,089
by minimizing<font color="#CCCCCC"> the minimizing</font><font color="#E5E5E5"> by</font>

1201
00:50:43,410 --> 00:50:46,949
detaching the unused or<font color="#E5E5E5"> running</font>

1202
00:50:45,089 --> 00:50:48,839
<font color="#E5E5E5">unimportant virtualized components from</font>

1203
00:50:46,949 --> 00:50:52,019
<font color="#E5E5E5">the</font><font color="#CCCCCC"> virtual machines which definitely</font>

1204
00:50:48,839 --> 00:50:55,319
makes<font color="#E5E5E5"> the</font><font color="#CCCCCC"> guest to host escape more</font>

1205
00:50:52,019 --> 00:50:57,598
<font color="#E5E5E5">difficult for attackers so these are</font>

1206
00:50:55,319 --> 00:50:59,099
some recommended reads that would

1207
00:50:57,599 --> 00:51:01,079
recommend to read if<font color="#E5E5E5"> you are interested</font>

1208
00:50:59,099 --> 00:51:03,719
<font color="#CCCCCC">more about some</font><font color="#E5E5E5"> of this issues most of</font>

1209
00:51:01,079 --> 00:51:07,109
this this paper<font color="#E5E5E5"> so I had not published</font>

1210
00:51:03,719 --> 00:51:10,289
<font color="#CCCCCC">but it got published</font><font color="#E5E5E5"> in last one two</font>

1211
00:51:07,109 --> 00:51:12,930
months I guess so this<font color="#CCCCCC"> brings us to the</font>

1212
00:51:10,289 --> 00:51:15,839
end<font color="#E5E5E5"> of today's presentation</font><font color="#CCCCCC"> thank you</font>

1213
00:51:12,930 --> 00:51:17,489
guys<font color="#E5E5E5"> for</font><font color="#CCCCCC"> your valuable attention and we</font>

1214
00:51:15,839 --> 00:51:19,259
would like<font color="#CCCCCC"> to thank the entire</font><font color="#E5E5E5"> IDT</font>

1215
00:51:17,489 --> 00:51:22,349
research team<font color="#E5E5E5"> and specially being</font><font color="#CCCCCC"> son</font>

1216
00:51:19,259 --> 00:51:24,180
<font color="#E5E5E5">now we are open to questions and later</font>

1217
00:51:22,349 --> 00:51:34,079
<font color="#E5E5E5">also if you can send questions to our</font>

1218
00:51:24,180 --> 00:51:37,038
email addresses<font color="#CCCCCC"> Thanks any questions</font>

1219
00:51:34,079 --> 00:51:37,039
yeah

1220
00:51:43,500 --> 00:51:48,670
thanks for the<font color="#E5E5E5"> presentation</font>

1221
00:51:45,670 --> 00:51:51,070
do you have any knowledge about to what

1222
00:51:48,670 --> 00:51:56,050
<font color="#E5E5E5">extent these vulnerabilities they also</font>

1223
00:51:51,070 --> 00:51:58,570
exist<font color="#E5E5E5"> in VMware server see</font><font color="#CCCCCC"> our primary</font>

1224
00:51:56,050 --> 00:52:00,640
focus<font color="#E5E5E5"> was mainly the</font><font color="#CCCCCC"> view my workstation</font>

1225
00:51:58,570 --> 00:52:04,240
<font color="#CCCCCC">we haven't yet analyzed the VMS</font><font color="#E5E5E5"> servers</font>

1226
00:52:00,640 --> 00:52:06,279
<font color="#E5E5E5">but yeah since this is this probably</font>

1227
00:52:04,240 --> 00:52:08,589
<font color="#CCCCCC">share</font><font color="#E5E5E5"> some core functionalities so some</font>

1228
00:52:06,280 --> 00:52:10,990
of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> vulnerabilities</font><font color="#E5E5E5"> and maybe we can</font>

1229
00:52:08,590 --> 00:52:13,390
see in the service as well<font color="#E5E5E5"> but we are</font><font color="#CCCCCC"> we</font>

1230
00:52:10,990 --> 00:52:16,319
<font color="#CCCCCC">I have no idea</font><font color="#E5E5E5"> because we our focus was</font>

1231
00:52:13,390 --> 00:52:16,319
mainly<font color="#E5E5E5"> the VMware Workstation</font>

1232
00:52:17,760 --> 00:52:22,920
so did<font color="#CCCCCC"> I adequately and say yeah thanks</font>

1233
00:52:23,910 --> 00:52:30,879
hello<font color="#CCCCCC"> Hey very great presentation</font><font color="#E5E5E5"> I</font>

1234
00:52:27,370 --> 00:52:34,420
would<font color="#CCCCCC"> like to know I</font><font color="#E5E5E5"> hope so in on one</font>

1235
00:52:30,880 --> 00:52:37,210
of the<font color="#E5E5E5"> slides that the cord for the</font>

1236
00:52:34,420 --> 00:52:40,960
<font color="#E5E5E5">graphical process I generated in the VM</font>

1237
00:52:37,210 --> 00:52:43,750
<font color="#E5E5E5">can it be used to talk the cute coat on</font>

1238
00:52:40,960 --> 00:52:46,420
the on the host machine<font color="#E5E5E5"> and to grab the</font>

1239
00:52:43,750 --> 00:52:49,090
<font color="#E5E5E5">data out</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> I did</font><font color="#E5E5E5"> you can you repeat</font>

1240
00:52:46,420 --> 00:52:51,640
<font color="#CCCCCC">once I yeah</font><font color="#E5E5E5"> the graphical code is</font>

1241
00:52:49,090 --> 00:52:55,330
generated<font color="#E5E5E5"> in the virtual machine</font><font color="#CCCCCC"> itself</font>

1242
00:52:51,640 --> 00:52:58,420
<font color="#CCCCCC">okay exactly</font>

1243
00:52:55,330 --> 00:53:01,750
<font color="#E5E5E5">can it be used to steal the data from</font>

1244
00:52:58,420 --> 00:53:03,910
the host machine see see you are passing

1245
00:53:01,750 --> 00:53:05,740
<font color="#CCCCCC">the untrusted data to the host</font><font color="#E5E5E5"> operating</font>

1246
00:53:03,910 --> 00:53:07,750
system<font color="#E5E5E5"> right yeah so it there is no you</font>

1247
00:53:05,740 --> 00:53:09,520
can steal data<font color="#E5E5E5"> you can add you can</font><font color="#CCCCCC"> fit</font>

1248
00:53:07,750 --> 00:53:11,230
arbitrary data to the guest<font color="#CCCCCC"> OS</font><font color="#E5E5E5"> and you</font>

1249
00:53:09,520 --> 00:53:12,460
may<font color="#E5E5E5"> corrupt some memory and do this but</font>

1250
00:53:11,230 --> 00:53:14,020
there is<font color="#E5E5E5"> no way you can steal</font><font color="#CCCCCC"> data</font>

1251
00:53:12,460 --> 00:53:17,380
because it is a<font color="#CCCCCC"> one-way you are sending</font>

1252
00:53:14,020 --> 00:53:20,860
<font color="#E5E5E5">those data is from this</font><font color="#CCCCCC"> to host ok I</font>

1253
00:53:17,380 --> 00:53:22,900
understand<font color="#E5E5E5"> but if you if you are</font><font color="#CCCCCC"> able to</font>

1254
00:53:20,860 --> 00:53:24,520
<font color="#E5E5E5">trigger some memory corruption into that</font>

1255
00:53:22,900 --> 00:53:26,590
host process right<font color="#E5E5E5"> by sending those</font>

1256
00:53:24,520 --> 00:53:28,600
untrusted data then you can<font color="#E5E5E5"> trigger some</font>

1257
00:53:26,590 --> 00:53:30,760
you can steal some information<font color="#E5E5E5"> from the</font>

1258
00:53:28,600 --> 00:53:32,830
process<font color="#E5E5E5"> but this is nothing</font><font color="#CCCCCC"> to do with</font>

1259
00:53:30,760 --> 00:53:34,330
the<font color="#E5E5E5"> shader bytecode this is a normal</font>

1260
00:53:32,830 --> 00:53:36,850
exploitation that<font color="#E5E5E5"> we have discussed here</font>

1261
00:53:34,330 --> 00:53:39,970
right how do how<font color="#CCCCCC"> to bypass</font><font color="#E5E5E5"> the SLR and</font>

1262
00:53:36,850 --> 00:53:42,160
<font color="#E5E5E5">all this so there is</font><font color="#CCCCCC"> nothing</font><font color="#E5E5E5"> to do with</font>

1263
00:53:39,970 --> 00:53:43,839
the<font color="#E5E5E5"> stealing</font><font color="#CCCCCC"> information just using the</font>

1264
00:53:42,160 --> 00:53:46,350
shader bytecode<font color="#CCCCCC"> ok thank you</font>

1265
00:53:43,840 --> 00:53:46,350
<font color="#CCCCCC">Thanks</font>

1266
00:53:50,630 --> 00:53:56,550
and what is your claim<font color="#CCCCCC"> about the depth</font>

1267
00:53:53,400 --> 00:53:58,320
<font color="#CCCCCC">of</font><font color="#E5E5E5"> free bug is it the US only or is it</font>

1268
00:53:56,550 --> 00:54:02,910
more than<font color="#CCCCCC"> that</font><font color="#E5E5E5"> because the demo was only</font>

1269
00:53:58,320 --> 00:54:05,400
a crash yeah<font color="#E5E5E5"> the devil free crash that</font>

1270
00:54:02,910 --> 00:54:11,069
we have shown yeah is it<font color="#E5E5E5"> I mean did you</font>

1271
00:54:05,400 --> 00:54:12,359
get a chance<font color="#CCCCCC"> to look into the WC but you</font>

1272
00:54:11,070 --> 00:54:14,580
are<font color="#CCCCCC"> talking about</font><font color="#E5E5E5"> the use of</font><font color="#CCCCCC"> Tuffy in</font>

1273
00:54:12,359 --> 00:54:18,000
the RPC or the you<font color="#CCCCCC"> know the double</font><font color="#E5E5E5"> free</font>

1274
00:54:14,580 --> 00:54:20,190
double<font color="#CCCCCC"> one</font><font color="#E5E5E5"> so what is the claim hey are</font>

1275
00:54:18,000 --> 00:54:22,710
you claiming is it more than<font color="#E5E5E5"> that or is</font>

1276
00:54:20,190 --> 00:54:25,730
it<font color="#CCCCCC"> just</font><font color="#E5E5E5"> at the</font><font color="#CCCCCC"> US</font><font color="#E5E5E5"> so did you get a</font>

1277
00:54:22,710 --> 00:54:25,730
chance<font color="#CCCCCC"> to check</font><font color="#E5E5E5"> whether it is</font>

1278
00:54:40,830 --> 00:54:45,020
<font color="#CCCCCC">okay this not only this one</font>

1279
00:54:49,150 --> 00:54:55,570
you're talking about<font color="#CCCCCC"> this</font><font color="#E5E5E5"> all right yes</font>

1280
00:54:51,370 --> 00:54:58,359
right so what is the<font color="#E5E5E5"> claim is it</font><font color="#CCCCCC"> a do s</font>

1281
00:54:55,570 --> 00:55:00,160
bug or is it the exploitable bug<font color="#CCCCCC"> so I</font>

1282
00:54:58,360 --> 00:55:01,510
think what we<font color="#CCCCCC"> have</font><font color="#E5E5E5"> done so far we have</font>

1283
00:55:00,160 --> 00:55:03,310
to get the just to trigger<font color="#E5E5E5"> the</font>

1284
00:55:01,510 --> 00:55:05,740
vulnerable<font color="#E5E5E5"> code and it is a just review</font>

1285
00:55:03,310 --> 00:55:08,529
as<font color="#E5E5E5"> but it is definitely exportable on</font>

1286
00:55:05,740 --> 00:55:11,890
<font color="#CCCCCC">Windows 1 Windows right is it because</font>

1287
00:55:08,530 --> 00:55:14,530
<font color="#E5E5E5">they using their own management of hip</font>

1288
00:55:11,890 --> 00:55:16,210
or the<font color="#CCCCCC"> VMware is using its own</font>

1289
00:55:14,530 --> 00:55:19,540
management<font color="#E5E5E5"> or is it a</font><font color="#CCCCCC"> Windows management</font>

1290
00:55:16,210 --> 00:55:21,550
<font color="#E5E5E5">here see what I feel that since it's a</font>

1291
00:55:19,540 --> 00:55:23,920
double<font color="#CCCCCC"> free issue right we need</font><font color="#E5E5E5"> to find</font>

1292
00:55:21,550 --> 00:55:26,200
a way<font color="#E5E5E5"> to create a fake object right to</font>

1293
00:55:23,920 --> 00:55:27,850
be able<font color="#E5E5E5"> to to be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to to be able to</font>

1294
00:55:26,200 --> 00:55:29,529
<font color="#E5E5E5">exploit this condition so I</font><font color="#CCCCCC"> think we</font>

1295
00:55:27,850 --> 00:55:31,810
haven't<font color="#E5E5E5"> done any</font><font color="#CCCCCC"> research on</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> fake</font>

1296
00:55:29,530 --> 00:55:34,720
<font color="#E5E5E5">object creation so if you if you have a</font>

1297
00:55:31,810 --> 00:55:36,910
way to<font color="#E5E5E5"> create a fake object into that</font>

1298
00:55:34,720 --> 00:55:38,379
feed object inside<font color="#E5E5E5"> the frame</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> freed</font>

1299
00:55:36,910 --> 00:55:40,569
object will be able to<font color="#E5E5E5"> probably gain</font>

1300
00:55:38,380 --> 00:55:43,120
code execution using that<font color="#CCCCCC"> not the only</font>

1301
00:55:40,570 --> 00:55:46,060
way I'm asking is because double for a

1302
00:55:43,120 --> 00:55:49,569
mitigation<font color="#E5E5E5"> on Windows was way past in</font>

1303
00:55:46,060 --> 00:55:54,130
Windows<font color="#CCCCCC"> service pack 2 so to have a safe</font>

1304
00:55:49,570 --> 00:55:56,470
unlinking<font color="#E5E5E5"> as a matter of the fact is we</font>

1305
00:55:54,130 --> 00:55:58,210
haven't<font color="#E5E5E5"> really get a chance to</font><font color="#CCCCCC"> look</font><font color="#E5E5E5"> into</font>

1306
00:55:56,470 --> 00:56:01,149
the expert ability of the bug but the

1307
00:55:58,210 --> 00:56:09,640
<font color="#E5E5E5">EMR has fix this issue already so we are</font>

1308
00:56:01,150 --> 00:56:11,680
not really<font color="#CCCCCC"> quite sure about this</font><font color="#E5E5E5"> okay I</font>

1309
00:56:09,640 --> 00:56:14,109
<font color="#CCCCCC">think that's it then</font><font color="#E5E5E5"> thank you</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> much</font>

1310
00:56:11,680 --> 00:56:15,669
guys and we'll encourage<font color="#E5E5E5"> you to the</font>

1311
00:56:14,110 --> 00:56:18,760
submit feedback<font color="#CCCCCC"> probably you will</font><font color="#E5E5E5"> get a</font>

1312
00:56:15,670 --> 00:56:21,250
<font color="#E5E5E5">feedback link in your</font><font color="#CCCCCC"> registered email</font>

1313
00:56:18,760 --> 00:56:22,620
address<font color="#CCCCCC"> we'll appreciate</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> thank you</font>

1314
00:56:21,250 --> 00:56:27,090
<font color="#E5E5E5">very much for your</font><font color="#CCCCCC"> time</font>

1315
00:56:22,620 --> 00:56:27,089
[Applause]

