1
00:00:00,299 --> 00:00:03,570
hi<font color="#E5E5E5"> everyone thank you for</font><font color="#CCCCCC"> coming to my</font>

2
00:00:03,330 --> 00:00:08,760
talk

3
00:00:03,570 --> 00:00:11,519
<font color="#E5E5E5">so I'm Mario Polina</font><font color="#CCCCCC"> I recently</font><font color="#E5E5E5"> got my</font>

4
00:00:08,760 --> 00:00:14,519
PhD from<font color="#E5E5E5"> Politecnico di Milano</font><font color="#CCCCCC"> working</font>

5
00:00:11,519 --> 00:00:17,970
mostly on malware analysis<font color="#E5E5E5"> so I'm gonna</font>

6
00:00:14,519 --> 00:00:20,189
talk<font color="#CCCCCC"> you about</font><font color="#E5E5E5"> the Huntington and</font><font color="#CCCCCC"> the</font>

7
00:00:17,970 --> 00:00:24,979
instrumentation<font color="#CCCCCC"> and ever super</font><font color="#E5E5E5"> marker</font>

8
00:00:20,189 --> 00:00:27,930
<font color="#E5E5E5">okay so this is the agenda for my talk</font>

9
00:00:24,980 --> 00:00:33,149
the talk is<font color="#CCCCCC"> about</font><font color="#E5E5E5"> Iran China a framework</font>

10
00:00:27,930 --> 00:00:36,540
that we developed them<font color="#E5E5E5"> to to contrast</font>

11
00:00:33,149 --> 00:00:39,750
the episode of<font color="#E5E5E5"> agua so before actually</font>

12
00:00:36,540 --> 00:00:44,190
<font color="#E5E5E5">explain you how we did it</font><font color="#CCCCCC"> I will give</font>

13
00:00:39,750 --> 00:00:47,370
you a brief<font color="#E5E5E5"> introduction on dynamic</font><font color="#CCCCCC"> man</font>

14
00:00:44,190 --> 00:00:50,968
instrumentation and then I<font color="#E5E5E5"> explain</font><font color="#CCCCCC"> you</font>

15
00:00:47,370 --> 00:00:55,769
how<font color="#E5E5E5"> to create some evasion or detection</font>

16
00:00:50,969 --> 00:00:57,719
for this kind of analysis<font color="#CCCCCC"> then I gonna</font>

17
00:00:55,770 --> 00:01:01,170
<font color="#E5E5E5">talk</font><font color="#CCCCCC"> about an</font><font color="#E5E5E5"> experiment we</font><font color="#CCCCCC"> did a</font>

18
00:00:57,719 --> 00:01:02,550
measurement<font color="#CCCCCC"> about how much</font><font color="#E5E5E5"> ever Sigma</font>

19
00:01:01,170 --> 00:01:06,360
<font color="#E5E5E5">we're actually using those kind of</font>

20
00:01:02,550 --> 00:01:08,640
technique<font color="#E5E5E5"> and briefly show you</font><font color="#CCCCCC"> we talked</font>

21
00:01:06,360 --> 00:01:11,580
<font color="#E5E5E5">about an unpacking tool that we</font>

22
00:01:08,640 --> 00:01:14,369
implemented<font color="#E5E5E5"> on</font><font color="#CCCCCC"> top of our</font><font color="#E5E5E5"> receiver until</font>

23
00:01:11,580 --> 00:01:17,789
ant ant<font color="#E5E5E5"> ant instrumentation system and</font>

24
00:01:14,369 --> 00:01:21,210
at the end I'll give<font color="#E5E5E5"> you a really quick</font>

25
00:01:17,790 --> 00:01:24,530
<font color="#E5E5E5">demo</font><font color="#CCCCCC"> on on our tools so that you may</font><font color="#E5E5E5"> may</font>

26
00:01:21,210 --> 00:01:28,110
want to use it<font color="#E5E5E5"> okay so let's talk about</font>

27
00:01:24,530 --> 00:01:31,250
<font color="#E5E5E5">1900 our engine so this is actually an</font>

28
00:01:28,110 --> 00:01:35,009
<font color="#CCCCCC">ion channel okay so it's a</font><font color="#E5E5E5"> nutrient</font>

29
00:01:31,250 --> 00:01:38,159
delicious food it's a bowl of<font color="#E5E5E5"> rice deep</font>

30
00:01:35,009 --> 00:01:41,400
<font color="#E5E5E5">fried</font><font color="#CCCCCC"> with inside</font><font color="#E5E5E5"> meat and piece</font><font color="#CCCCCC"> okay so</font>

31
00:01:38,159 --> 00:01:44,820
you may<font color="#E5E5E5"> wonder why why we have</font><font color="#CCCCCC"> a ranch</font><font color="#E5E5E5"> I</font>

32
00:01:41,400 --> 00:01:46,560
know so me<font color="#CCCCCC"> and Ray are</font><font color="#E5E5E5"> used to eat a lot</font>

33
00:01:44,820 --> 00:01:48,360
<font color="#CCCCCC">of different you know</font><font color="#E5E5E5"> during the night</font>

34
00:01:46,560 --> 00:01:50,399
the banking<font color="#E5E5E5"> stuff so at some point we</font>

35
00:01:48,360 --> 00:01:52,920
decided<font color="#E5E5E5"> we had</font><font color="#CCCCCC"> to name</font><font color="#E5E5E5"> something</font><font color="#CCCCCC"> that</font>

36
00:01:50,399 --> 00:01:56,850
after<font color="#CCCCCC"> orangey and we named this tool</font>

37
00:01:52,920 --> 00:02:00,420
after after this one<font color="#E5E5E5"> so if you go to</font>

38
00:01:56,850 --> 00:02:02,699
<font color="#E5E5E5">Italy</font><font color="#CCCCCC"> you should really try that</font><font color="#E5E5E5"> then</font><font color="#CCCCCC"> of</font>

39
00:02:00,420 --> 00:02:04,890
course I'm not gonna talk on how to make

40
00:02:02,700 --> 00:02:07,350
this energy no I mean<font color="#CCCCCC"> me call my mother</font>

41
00:02:04,890 --> 00:02:10,590
<font color="#CCCCCC">to</font><font color="#E5E5E5"> about talk on that but I cannot make</font>

42
00:02:07,350 --> 00:02:11,260
that<font color="#E5E5E5"> so this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> Dr Ng</font><font color="#CCCCCC"> no I'm actually</font>

43
00:02:10,590 --> 00:02:14,080
<font color="#CCCCCC">going to</font><font color="#E5E5E5"> talk</font>

44
00:02:11,260 --> 00:02:18,459
you about<font color="#E5E5E5"> okay so it's a framework he</font>

45
00:02:14,080 --> 00:02:21,700
has many modules<font color="#E5E5E5"> and and we can</font><font color="#CCCCCC"> combine</font>

46
00:02:18,459 --> 00:02:25,780
them to have some to defeat<font color="#CCCCCC"> aversive my</font>

47
00:02:21,700 --> 00:02:27,700
<font color="#CCCCCC">words</font><font color="#E5E5E5"> so I don't want to start explain</font>

48
00:02:25,780 --> 00:02:32,799
you<font color="#E5E5E5"> the old framework and then show you</font>

49
00:02:27,700 --> 00:02:35,890
the<font color="#E5E5E5"> are we use it what I gonna do is I'm</font>

50
00:02:32,799 --> 00:02:38,579
<font color="#E5E5E5">gonna</font><font color="#CCCCCC"> show you</font><font color="#E5E5E5"> each technique</font><font color="#CCCCCC"> on most of</font>

51
00:02:35,890 --> 00:02:42,578
<font color="#E5E5E5">the evasive technique that we found and</font>

52
00:02:38,579 --> 00:02:44,409
I gonna explain<font color="#CCCCCC"> you the the right model</font>

53
00:02:42,579 --> 00:02:46,060
that we used to<font color="#E5E5E5"> defeat that technique</font>

54
00:02:44,409 --> 00:02:48,220
<font color="#CCCCCC">okay that's that's the plan</font>

55
00:02:46,060 --> 00:02:50,920
I'll show you the aversive technique and

56
00:02:48,220 --> 00:02:52,299
then I<font color="#E5E5E5"> show the module that can trust</font>

57
00:02:50,920 --> 00:02:56,730
<font color="#E5E5E5">that</font><font color="#CCCCCC"> technique</font>

58
00:02:52,299 --> 00:02:59,590
so before<font color="#CCCCCC"> actually starting</font><font color="#E5E5E5"> talking</font>

59
00:02:56,730 --> 00:03:02,108
<font color="#E5E5E5">doing the this this journey about the</font>

60
00:02:59,590 --> 00:03:03,730
and experimentation<font color="#CCCCCC"> a brief introduction</font>

61
00:03:02,109 --> 00:03:07,060
<font color="#CCCCCC">of</font><font color="#E5E5E5"> my</font><font color="#CCCCCC"> granite</font><font color="#E5E5E5"> is that is what they do so</font>

62
00:03:03,730 --> 00:03:09,429
malware analysis is the way that we use

63
00:03:07,060 --> 00:03:13,690
to actually understand<font color="#E5E5E5"> what what</font><font color="#CCCCCC"> our</font>

64
00:03:09,430 --> 00:03:15,579
software<font color="#CCCCCC"> is</font><font color="#E5E5E5"> doing</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> we may discovers</font>

65
00:03:13,690 --> 00:03:17,799
if something is<font color="#E5E5E5"> malicious or not looking</font>

66
00:03:15,579 --> 00:03:20,079
at the<font color="#CCCCCC"> others behavior and historically</font>

67
00:03:17,799 --> 00:03:22,870
<font color="#E5E5E5">let's say</font><font color="#CCCCCC"> historically we have two kind</font>

68
00:03:20,079 --> 00:03:25,180
of big technically studied malware

69
00:03:22,870 --> 00:03:26,949
analysis and dynamic malware analysis so

70
00:03:25,180 --> 00:03:29,949
the static the<font color="#CCCCCC"> static analysis is</font>

71
00:03:26,949 --> 00:03:32,500
<font color="#CCCCCC">usually the stuff about</font><font color="#E5E5E5"> reversing the</font>

72
00:03:29,949 --> 00:03:35,470
code building<font color="#E5E5E5"> the control flow</font><font color="#CCCCCC"> graph and</font>

73
00:03:32,500 --> 00:03:39,280
and so forth so<font color="#CCCCCC"> on</font><font color="#E5E5E5"> okay and that's not</font>

74
00:03:35,470 --> 00:03:40,930
the<font color="#E5E5E5"> part I'm gonna talk about so this</font>

75
00:03:39,280 --> 00:03:44,199
<font color="#E5E5E5">the static analysis a big limitation</font>

76
00:03:40,930 --> 00:03:47,650
<font color="#E5E5E5">that is I can obfuscate the code and</font>

77
00:03:44,199 --> 00:03:49,329
then it's it's harder to<font color="#E5E5E5"> be able to</font>

78
00:03:47,650 --> 00:03:51,069
skate and and look at<font color="#E5E5E5"> the stuff so</font>

79
00:03:49,329 --> 00:03:52,989
<font color="#E5E5E5">people came out with what we call</font>

80
00:03:51,069 --> 00:03:55,060
dynamic<font color="#E5E5E5"> malware analysis that is</font>

81
00:03:52,989 --> 00:03:56,889
actually<font color="#E5E5E5"> looking and interaction between</font>

82
00:03:55,060 --> 00:03:58,269
<font color="#E5E5E5">the software and the operand the</font>

83
00:03:56,889 --> 00:04:02,799
underlying operating<font color="#CCCCCC"> system</font><font color="#E5E5E5"> so I</font><font color="#CCCCCC"> can</font>

84
00:03:58,269 --> 00:04:04,720
trace<font color="#E5E5E5"> down system call files I can</font><font color="#CCCCCC"> look</font>

85
00:04:02,799 --> 00:04:08,470
at the memory<font color="#E5E5E5"> all this kind of stuff and</font>

86
00:04:04,720 --> 00:04:12,040
this<font color="#E5E5E5"> make much easier to to actually</font>

87
00:04:08,470 --> 00:04:14,739
<font color="#E5E5E5">perform this kind of analysis</font><font color="#CCCCCC"> so the</font>

88
00:04:12,040 --> 00:04:16,478
problem with the the prominence a with

89
00:04:14,739 --> 00:04:18,579
the dynamic analysis<font color="#E5E5E5"> to act well this</font>

90
00:04:16,478 --> 00:04:20,219
control on on what what is<font color="#E5E5E5"> happening</font>

91
00:04:18,579 --> 00:04:22,479
usually<font color="#E5E5E5"> people do what is called</font>

92
00:04:20,219 --> 00:04:24,130
instrumentation<font color="#E5E5E5"> of something I can</font>

93
00:04:22,479 --> 00:04:26,289
instrument<font color="#CCCCCC"> a virtual</font><font color="#E5E5E5"> machine</font>

94
00:04:24,130 --> 00:04:29,890
I can instrument an emulator<font color="#E5E5E5"> or I can</font>

95
00:04:26,290 --> 00:04:32,650
instrument<font color="#CCCCCC"> a</font><font color="#E5E5E5"> banner but because there is</font>

96
00:04:29,890 --> 00:04:34,120
this kind<font color="#E5E5E5"> of instrumentation</font><font color="#CCCCCC"> we can</font>

97
00:04:32,650 --> 00:04:40,780
write code<font color="#CCCCCC"> like that</font>

98
00:04:34,120 --> 00:04:45,490
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> I can check if</font><font color="#E5E5E5"> for small</font>

99
00:04:40,780 --> 00:04:48,190
differences between what I expect<font color="#CCCCCC"> from a</font>

100
00:04:45,490 --> 00:04:50,080
<font color="#E5E5E5">bare-metal execution and from an</font>

101
00:04:48,190 --> 00:04:52,600
execution that<font color="#E5E5E5"> is actually made inside</font>

102
00:04:50,080 --> 00:04:55,359
an<font color="#E5E5E5"> instrumented environment so if I</font>

103
00:04:52,600 --> 00:04:57,370
found those little differences<font color="#CCCCCC"> then I</font>

104
00:04:55,360 --> 00:04:59,200
can write this<font color="#E5E5E5"> can for this kind of code</font>

105
00:04:57,370 --> 00:05:02,140
<font color="#E5E5E5">if I am under</font><font color="#CCCCCC"> analysis</font><font color="#E5E5E5"> just I don't</font><font color="#CCCCCC"> know</font>

106
00:04:59,200 --> 00:05:04,060
<font color="#E5E5E5">I don't</font><font color="#CCCCCC"> do anything</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> otherwise I can</font>

107
00:05:02,140 --> 00:05:06,099
be malicious<font color="#E5E5E5"> and this of</font><font color="#CCCCCC"> course defeat</font>

108
00:05:04,060 --> 00:05:09,910
the purpose<font color="#E5E5E5"> of the purpose of dynamic</font>

109
00:05:06,100 --> 00:05:13,150
analysis<font color="#CCCCCC"> okay so</font><font color="#E5E5E5"> those small differences</font>

110
00:05:09,910 --> 00:05:15,160
<font color="#E5E5E5">are what we gonna call activate okay</font>

111
00:05:13,150 --> 00:05:18,130
there are<font color="#CCCCCC"> some activity introduced it on</font>

112
00:05:15,160 --> 00:05:20,080
the<font color="#E5E5E5"> system because you did some</font>

113
00:05:18,130 --> 00:05:25,060
instrumentation<font color="#CCCCCC"> you are not using</font><font color="#E5E5E5"> bare</font>

114
00:05:20,080 --> 00:05:27,669
metal machines<font color="#CCCCCC"> okay cool so let's talk</font>

115
00:05:25,060 --> 00:05:30,640
about<font color="#E5E5E5"> dynamic value instrumentation so</font>

116
00:05:27,670 --> 00:05:32,500
the dynamic binding cementation is one

117
00:05:30,640 --> 00:05:36,550
kind<font color="#E5E5E5"> of instrumentation</font><font color="#CCCCCC"> that you may</font>

118
00:05:32,500 --> 00:05:39,940
perform in order<font color="#CCCCCC"> to</font><font color="#E5E5E5"> perform malware</font>

119
00:05:36,550 --> 00:05:41,380
analysis<font color="#E5E5E5"> and the idea behind dynamic</font>

120
00:05:39,940 --> 00:05:44,200
<font color="#E5E5E5">binding cementation is that you don't</font>

121
00:05:41,380 --> 00:05:47,980
need a voice<font color="#E5E5E5"> for machine or an emulator</font>

122
00:05:44,200 --> 00:05:51,969
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> what you do is actually adding some</font>

123
00:05:47,980 --> 00:05:53,410
code inside<font color="#E5E5E5"> the executable so you you</font>

124
00:05:51,970 --> 00:05:55,240
<font color="#E5E5E5">are the executable you had something</font>

125
00:05:53,410 --> 00:05:58,960
inside<font color="#E5E5E5"> that is actually logging and</font>

126
00:05:55,240 --> 00:06:03,940
perform they<font color="#CCCCCC"> deny that you using the</font>

127
00:05:58,960 --> 00:06:09,340
tools that<font color="#E5E5E5"> they are called</font><font color="#CCCCCC"> dbi so to</font>

128
00:06:03,940 --> 00:06:14,310
understand<font color="#E5E5E5"> how</font><font color="#CCCCCC"> a dbi works we need we</font>

129
00:06:09,340 --> 00:06:18,010
actually need a bit<font color="#E5E5E5"> of introduction on</font>

130
00:06:14,310 --> 00:06:19,360
on how the<font color="#E5E5E5"> the binary is</font><font color="#CCCCCC"> may</font><font color="#E5E5E5"> know so you</font>

131
00:06:18,010 --> 00:06:21,370
have basic blocks that are<font color="#E5E5E5"> basically</font>

132
00:06:19,360 --> 00:06:24,970
instruction<font color="#E5E5E5"> that are executed always</font>

133
00:06:21,370 --> 00:06:26,710
<font color="#CCCCCC">together</font><font color="#E5E5E5"> and they are connected by jumps</font>

134
00:06:24,970 --> 00:06:31,990
and they build a big control flow graph

135
00:06:26,710 --> 00:06:33,460
and<font color="#E5E5E5"> then if you take</font><font color="#CCCCCC"> a set</font><font color="#E5E5E5"> of basic</font>

136
00:06:31,990 --> 00:06:36,880
block<font color="#E5E5E5"> that are connecting two together</font>

137
00:06:33,460 --> 00:06:37,900
you will get<font color="#E5E5E5"> what</font><font color="#CCCCCC"> is called a trace okay</font>

138
00:06:36,880 --> 00:06:39,969
Tracy

139
00:06:37,900 --> 00:06:43,750
<font color="#E5E5E5">multiple basic block that usually are</font>

140
00:06:39,970 --> 00:06:48,130
close enough to<font color="#CCCCCC"> be executed almost</font>

141
00:06:43,750 --> 00:06:50,710
together<font color="#E5E5E5"> and most</font><font color="#CCCCCC"> DB I told actually</font>

142
00:06:48,130 --> 00:06:52,539
used to<font color="#CCCCCC"> mint</font><font color="#E5E5E5"> a trace at a time so they</font>

143
00:06:50,710 --> 00:06:55,900
load<font color="#E5E5E5"> a chess instrument the test and</font>

144
00:06:52,539 --> 00:06:59,650
then they load another chess<font color="#E5E5E5"> instrument</font>

145
00:06:55,900 --> 00:07:02,710
the other one so how'd they do that

146
00:06:59,650 --> 00:07:04,690
they took a trace they copied in some

147
00:07:02,710 --> 00:07:08,109
other part of the<font color="#E5E5E5"> memory</font><font color="#CCCCCC"> that is called</font>

148
00:07:04,690 --> 00:07:10,300
<font color="#E5E5E5">the code cache and then they use what is</font>

149
00:07:08,110 --> 00:07:13,180
called a<font color="#E5E5E5"> magic compiler just-in-time</font>

150
00:07:10,300 --> 00:07:15,340
compiler<font color="#CCCCCC"> okay so it's something that as</font>

151
00:07:13,180 --> 00:07:18,130
an<font color="#E5E5E5"> input the origin of code and</font>

152
00:07:15,340 --> 00:07:21,159
something<font color="#E5E5E5"> that you want hard</font><font color="#CCCCCC"> okay it's</font>

153
00:07:18,130 --> 00:07:24,490
actually<font color="#E5E5E5"> recompiling your binary code</font>

154
00:07:21,160 --> 00:07:27,729
adding this stuff inside<font color="#CCCCCC"> okay and you</font>

155
00:07:24,490 --> 00:07:28,960
can the great thing about dynamic<font color="#CCCCCC"> burn</font>

156
00:07:27,729 --> 00:07:31,690
instrumentation is that you have a

157
00:07:28,960 --> 00:07:34,299
really<font color="#E5E5E5"> fine</font><font color="#CCCCCC"> direct control on what you</font>

158
00:07:31,690 --> 00:07:37,330
<font color="#CCCCCC">are doing</font><font color="#E5E5E5"> okay you can insert the</font>

159
00:07:34,300 --> 00:07:39,430
instruction between certain<font color="#E5E5E5"> specific</font>

160
00:07:37,330 --> 00:07:43,448
<font color="#CCCCCC">instruction</font><font color="#E5E5E5"> between blessing box between</font>

161
00:07:39,430 --> 00:07:46,419
chess you can search for read

162
00:07:43,449 --> 00:07:49,060
instruction for<font color="#E5E5E5"> Cisco</font><font color="#CCCCCC"> structure for</font>

163
00:07:46,419 --> 00:07:50,590
interrupt<font color="#E5E5E5"> for you have a really fine</font>

164
00:07:49,060 --> 00:07:53,110
<font color="#E5E5E5">grid control and this is the great</font>

165
00:07:50,590 --> 00:07:56,099
<font color="#CCCCCC">advantage of using vbi instead of using</font>

166
00:07:53,110 --> 00:08:01,570
a<font color="#CCCCCC"> virtual machine</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> remember it okay</font>

167
00:07:56,099 --> 00:08:05,440
so<font color="#E5E5E5"> I so those are the four</font><font color="#CCCCCC"> vbi tools</font>

168
00:08:01,570 --> 00:08:07,419
that I know<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> some of them like</font>

169
00:08:05,440 --> 00:08:10,870
bargaining<font color="#CCCCCC"> then revenge</font>

170
00:08:07,419 --> 00:08:14,198
they actually works only on Linux as far

171
00:08:10,870 --> 00:08:16,270
as I know and the one we actually<font color="#E5E5E5"> use is</font>

172
00:08:14,199 --> 00:08:18,430
<font color="#CCCCCC">intern</font><font color="#E5E5E5"> pin that is actually the most</font>

173
00:08:16,270 --> 00:08:20,680
<font color="#CCCCCC">used and</font><font color="#E5E5E5"> it's also the one</font><font color="#CCCCCC"> that is</font>

174
00:08:18,430 --> 00:08:24,280
actually<font color="#CCCCCC"> better documented</font><font color="#E5E5E5"> usually so</font>

175
00:08:20,680 --> 00:08:28,479
<font color="#CCCCCC">all go all the talk is based on</font><font color="#E5E5E5"> opinion</font>

176
00:08:24,280 --> 00:08:29,460
<font color="#CCCCCC">okay so let's talk about</font><font color="#E5E5E5"> a massive</font>

177
00:08:28,479 --> 00:08:36,338
malware then

178
00:08:29,460 --> 00:08:42,819
so in<font color="#CCCCCC"> deactivate</font><font color="#E5E5E5"> we actually divided all</font>

179
00:08:36,339 --> 00:08:44,830
the<font color="#CCCCCC"> article that</font><font color="#E5E5E5"> we found by by</font><font color="#CCCCCC"> their</font>

180
00:08:42,820 --> 00:08:47,260
check<font color="#E5E5E5"> okay so we come up with basically</font>

181
00:08:44,830 --> 00:08:49,089
<font color="#E5E5E5">four categories that are those one so we</font>

182
00:08:47,260 --> 00:08:50,170
have<font color="#CCCCCC"> cocci</font><font color="#E5E5E5"> artifact need compare</font>

183
00:08:49,089 --> 00:08:53,350
detection and<font color="#CCCCCC"> vial</font>

184
00:08:50,170 --> 00:08:55,479
<font color="#CCCCCC">artherton Oberon detection and I go</font><font color="#E5E5E5"> I</font>

185
00:08:53,350 --> 00:09:00,700
<font color="#E5E5E5">gonna go to all of</font><font color="#CCCCCC"> them</font><font color="#E5E5E5"> so let's start</font>

186
00:08:55,480 --> 00:09:03,700
with code cache<font color="#E5E5E5"> active</font><font color="#CCCCCC"> okay so what are</font>

187
00:09:00,700 --> 00:09:08,079
the code cache<font color="#CCCCCC"> shockula's the basic are</font>

188
00:09:03,700 --> 00:09:10,120
all the artifact<font color="#E5E5E5"> that</font><font color="#CCCCCC"> exists because</font><font color="#E5E5E5"> you</font>

189
00:09:08,079 --> 00:09:11,739
are using the<font color="#E5E5E5"> cultish okay the code</font>

190
00:09:10,120 --> 00:09:15,250
cache is the one<font color="#E5E5E5"> I</font><font color="#CCCCCC"> just explained you is</font>

191
00:09:11,740 --> 00:09:18,730
the part of memory<font color="#E5E5E5"> that the dynamic</font>

192
00:09:15,250 --> 00:09:22,510
binding simulation tool is using to

193
00:09:18,730 --> 00:09:28,180
<font color="#E5E5E5">create the the instrumented binary and</font>

194
00:09:22,510 --> 00:09:32,430
we can basically<font color="#E5E5E5"> to kind of code cache</font>

195
00:09:28,180 --> 00:09:35,019
detect<font color="#E5E5E5"> detection is the first one is</font>

196
00:09:32,430 --> 00:09:37,329
instruction pointer detection<font color="#E5E5E5"> okay the</font>

197
00:09:35,019 --> 00:09:39,579
fact<font color="#E5E5E5"> that you are actually executing</font>

198
00:09:37,329 --> 00:09:41,469
something<font color="#E5E5E5"> inside the code cache and not</font>

199
00:09:39,579 --> 00:09:43,750
<font color="#E5E5E5">something inside the original text</font>

200
00:09:41,470 --> 00:09:45,279
session section<font color="#E5E5E5"> it means that your</font>

201
00:09:43,750 --> 00:09:49,990
restriction<font color="#E5E5E5"> point is different</font><font color="#CCCCCC"> and you</font>

202
00:09:45,279 --> 00:09:52,930
may<font color="#E5E5E5"> let this so I'll you can detect</font><font color="#CCCCCC"> this</font>

203
00:09:49,990 --> 00:09:58,180
<font color="#E5E5E5">we basically</font><font color="#CCCCCC"> have two ways that are</font>

204
00:09:52,930 --> 00:10:00,969
actually working<font color="#CCCCCC"> the first</font><font color="#E5E5E5"> one is is the</font>

205
00:09:58,180 --> 00:10:04,029
one of using the<font color="#CCCCCC"> interrupt</font><font color="#E5E5E5"> to e okay</font>

206
00:10:00,970 --> 00:10:06,370
<font color="#E5E5E5">that is the instruction</font><font color="#CCCCCC"> that was</font>

207
00:10:04,029 --> 00:10:09,990
historically<font color="#E5E5E5"> used for doing be anti</font>

208
00:10:06,370 --> 00:10:13,990
<font color="#CCCCCC">cisco when you call the interrupt to</font><font color="#E5E5E5"> e</font>

209
00:10:09,990 --> 00:10:16,120
you<font color="#CCCCCC"> have as a side effect that is the</font>

210
00:10:13,990 --> 00:10:19,300
current<font color="#E5E5E5"> instruction pointer is copying</font>

211
00:10:16,120 --> 00:10:23,140
in the in the index register and this is

212
00:10:19,300 --> 00:10:24,640
one one time the other one is using some

213
00:10:23,140 --> 00:10:28,269
<font color="#CCCCCC">instructions that are actually related</font>

214
00:10:24,640 --> 00:10:29,920
<font color="#CCCCCC">to</font><font color="#E5E5E5"> floating-point context if used one of</font>

215
00:10:28,269 --> 00:10:33,360
those<font color="#E5E5E5"> instruction they are basically</font>

216
00:10:29,920 --> 00:10:35,439
storing in on top<font color="#E5E5E5"> of the stack</font>

217
00:10:33,360 --> 00:10:37,990
<font color="#E5E5E5">information about the context that</font>

218
00:10:35,440 --> 00:10:42,310
actually contains<font color="#E5E5E5"> also the instruction</font>

219
00:10:37,990 --> 00:10:44,440
<font color="#CCCCCC">port</font><font color="#E5E5E5"> okay so if you call in to it</font><font color="#CCCCCC"> you</font>

220
00:10:42,310 --> 00:10:47,469
<font color="#CCCCCC">get the edx</font>

221
00:10:44,440 --> 00:10:51,880
with the instruction pointer<font color="#E5E5E5"> if you if</font>

222
00:10:47,470 --> 00:10:54,010
you call<font color="#CCCCCC"> f safe on this instruction</font><font color="#E5E5E5"> here</font>

223
00:10:51,880 --> 00:10:56,560
you have the instruction pointer set<font color="#E5E5E5"> on</font>

224
00:10:54,010 --> 00:11:01,000
on the stack<font color="#CCCCCC"> some of you may may wonder</font>

225
00:10:56,560 --> 00:11:02,979
<font color="#CCCCCC">i can do other tricks like I can call</font>

226
00:11:01,000 --> 00:11:07,530
<font color="#E5E5E5">five instruction head</font>

227
00:11:02,980 --> 00:11:10,180
so I am so that I have on the stack the

228
00:11:07,530 --> 00:11:11,740
destruction point<font color="#E5E5E5"> that if you if you if</font>

229
00:11:10,180 --> 00:11:13,630
you know all the<font color="#E5E5E5"> cold</font><font color="#CCCCCC"> works is pushing</font>

230
00:11:11,740 --> 00:11:15,460
on the stack<font color="#CCCCCC"> D in such a man but this</font>

231
00:11:13,630 --> 00:11:19,510
using the goal is actually<font color="#E5E5E5"> already</font>

232
00:11:15,460 --> 00:11:23,740
entered by pin out and and so pin is

233
00:11:19,510 --> 00:11:26,410
already because of<font color="#E5E5E5"> pin because</font><font color="#CCCCCC"> of our</font>

234
00:11:23,740 --> 00:11:29,320
pin works<font color="#CCCCCC"> you</font><font color="#E5E5E5"> basically will not end up</font>

235
00:11:26,410 --> 00:11:31,300
<font color="#E5E5E5">with the code cache in structure inside</font>

236
00:11:29,320 --> 00:11:33,840
<font color="#CCCCCC">the stack but we do the</font><font color="#E5E5E5"> beauty channel</font>

237
00:11:31,300 --> 00:11:38,370
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> so the only</font><font color="#CCCCCC"> tool</font><font color="#E5E5E5"> I am aware</font><font color="#CCCCCC"> of are</font>

238
00:11:33,840 --> 00:11:44,470
those that was does this way to actually

239
00:11:38,370 --> 00:11:46,720
identify the instruction point so what

240
00:11:44,470 --> 00:11:49,060
we did what we<font color="#E5E5E5"> did we did this before</font>

241
00:11:46,720 --> 00:11:50,980
but we<font color="#CCCCCC"> have a module</font><font color="#E5E5E5"> that is called</font><font color="#CCCCCC"> the</font>

242
00:11:49,060 --> 00:11:55,199
pattern matching module<font color="#CCCCCC"> okay that we're</font>

243
00:11:50,980 --> 00:11:58,990
gonna use to defeat this technique of

244
00:11:55,200 --> 00:12:00,760
instrumentation detection so the pattern

245
00:11:58,990 --> 00:12:02,830
matching module is basically<font color="#CCCCCC"> two</font>

246
00:12:00,760 --> 00:12:06,420
components<font color="#CCCCCC"> the first one is what we</font><font color="#E5E5E5"> call</font>

247
00:12:02,830 --> 00:12:10,320
the patch map is<font color="#E5E5E5"> basically a list of</font>

248
00:12:06,420 --> 00:12:13,750
instruction that<font color="#CCCCCC"> we know can be used for</font>

249
00:12:10,320 --> 00:12:16,120
<font color="#E5E5E5">detection and then function pointer that</font>

250
00:12:13,750 --> 00:12:19,900
are basically<font color="#E5E5E5"> function that gonna patch</font>

251
00:12:16,120 --> 00:12:22,090
the result of the of<font color="#CCCCCC"> our instruction</font><font color="#E5E5E5"> and</font>

252
00:12:19,900 --> 00:12:25,270
the patch dispatcher is basically the

253
00:12:22,090 --> 00:12:27,460
module that is actually during<font color="#E5E5E5"> the</font><font color="#CCCCCC"> beta</font>

254
00:12:25,270 --> 00:12:31,510
<font color="#E5E5E5">build of the Tres is actually going to</font>

255
00:12:27,460 --> 00:12:34,360
search for<font color="#CCCCCC"> the instruction</font><font color="#E5E5E5"> okay to to</font>

256
00:12:31,510 --> 00:12:37,420
patch okay<font color="#E5E5E5"> so I give</font><font color="#CCCCCC"> you an example</font><font color="#E5E5E5"> an</font>

257
00:12:34,360 --> 00:12:37,990
<font color="#CCCCCC">example here on the on you're right</font>

258
00:12:37,420 --> 00:12:41,410
actually

259
00:12:37,990 --> 00:12:43,270
<font color="#E5E5E5">so you have the trace the</font><font color="#CCCCCC"> original trace</font>

260
00:12:41,410 --> 00:12:45,280
<font color="#E5E5E5">okay in the middle we have the patch</font>

261
00:12:43,270 --> 00:12:47,319
dispatcher<font color="#CCCCCC"> and</font><font color="#E5E5E5"> on the left is the</font>

262
00:12:45,280 --> 00:12:49,959
<font color="#CCCCCC">Patchett trace</font><font color="#E5E5E5"> and the idea of the</font><font color="#CCCCCC"> patch</font>

263
00:12:47,320 --> 00:12:51,940
<font color="#CCCCCC">is pasture is that you are</font><font color="#E5E5E5"> loading each</font>

264
00:12:49,960 --> 00:12:55,630
time one instruction you are checking

265
00:12:51,940 --> 00:12:58,300
inside<font color="#E5E5E5"> your list if is a blacklisted</font>

266
00:12:55,630 --> 00:13:01,120
instruction it's not you're<font color="#E5E5E5"> gonna save</font>

267
00:12:58,300 --> 00:13:03,660
<font color="#CCCCCC">it as it</font><font color="#E5E5E5"> is if you have one of those</font>

268
00:13:01,120 --> 00:13:07,630
instruction<font color="#E5E5E5"> what you do you just</font><font color="#CCCCCC"> add</font>

269
00:13:03,660 --> 00:13:11,250
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> patch function for for</font><font color="#CCCCCC"> this</font>

270
00:13:07,630 --> 00:13:16,320
specific instruction so

271
00:13:11,250 --> 00:13:19,050
all the patch is working<font color="#CCCCCC"> so here I'll</font>

272
00:13:16,320 --> 00:13:22,140
show<font color="#CCCCCC"> you</font><font color="#E5E5E5"> the we know that</font><font color="#CCCCCC"> into is</font>

273
00:13:19,050 --> 00:13:25,109
basically storing<font color="#CCCCCC"> inside the register</font><font color="#E5E5E5"> it</font>

274
00:13:22,140 --> 00:13:27,449
eats<font color="#CCCCCC"> the bronc</font><font color="#E5E5E5"> instruction pointer so</font>

275
00:13:25,110 --> 00:13:31,010
the patch is easier so<font color="#CCCCCC"> you may think I</font>

276
00:13:27,450 --> 00:13:33,840
just<font color="#E5E5E5"> change</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> the value inside</font><font color="#CCCCCC"> the</font>

277
00:13:31,010 --> 00:13:37,110
<font color="#E5E5E5">register</font><font color="#CCCCCC"> ok and that's all you need to</font>

278
00:13:33,840 --> 00:13:40,920
actually<font color="#CCCCCC"> page this for the floating</font>

279
00:13:37,110 --> 00:13:43,290
<font color="#E5E5E5">point for the floating point instruction</font>

280
00:13:40,920 --> 00:13:44,760
<font color="#E5E5E5">you need to patch the memory inside the</font>

281
00:13:43,290 --> 00:13:48,630
stack but the<font color="#CCCCCC"> principal is</font><font color="#E5E5E5"> basically the</font>

282
00:13:44,760 --> 00:13:51,930
same<font color="#CCCCCC"> ok cool so that's</font><font color="#E5E5E5"> the first example</font>

283
00:13:48,630 --> 00:13:53,820
<font color="#CCCCCC">show and then we have another</font><font color="#E5E5E5"> one that</font>

284
00:13:51,930 --> 00:13:59,930
<font color="#CCCCCC">is even more interesting</font>

285
00:13:53,820 --> 00:14:02,670
<font color="#CCCCCC">that is the self-modifying code so the</font>

286
00:13:59,930 --> 00:14:04,859
idea of self-modifying code is the code

287
00:14:02,670 --> 00:14:07,680
that<font color="#E5E5E5"> is changing itself during the</font>

288
00:14:04,860 --> 00:14:09,870
execution<font color="#E5E5E5"> so I'll give you this example</font>

289
00:14:07,680 --> 00:14:12,540
<font color="#E5E5E5">I have a set of instruction that you can</font>

290
00:14:09,870 --> 00:14:16,260
see here and one of them<font color="#E5E5E5"> the third one</font>

291
00:14:12,540 --> 00:14:19,620
is what I wrote<font color="#E5E5E5"> a strong construction</font><font color="#CCCCCC"> ok</font>

292
00:14:16,260 --> 00:14:21,450
it may actually<font color="#E5E5E5"> be literally something</font>

293
00:14:19,620 --> 00:14:23,880
<font color="#E5E5E5">that cannot be disassembled so it's</font>

294
00:14:21,450 --> 00:14:27,420
wrong instruction or they may<font color="#CCCCCC"> be</font>

295
00:14:23,880 --> 00:14:29,700
<font color="#CCCCCC">something</font><font color="#E5E5E5"> like some privileged</font>

296
00:14:27,420 --> 00:14:32,040
instruction like in out something<font color="#E5E5E5"> that</font>

297
00:14:29,700 --> 00:14:34,680
<font color="#E5E5E5">you need</font><font color="#CCCCCC"> to be in a drink zero to</font>

298
00:14:32,040 --> 00:14:37,949
execute<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> no you cannot executing in</font>

299
00:14:34,680 --> 00:14:40,020
user mode or it can be some access on on

300
00:14:37,950 --> 00:14:42,390
memory that you know it's not allocated

301
00:14:40,020 --> 00:14:46,020
so the idea is something<font color="#E5E5E5"> that is</font>

302
00:14:42,390 --> 00:14:48,810
crashing the<font color="#E5E5E5"> program so what happened</font>

303
00:14:46,020 --> 00:14:51,480
with self-modifying code is you have

304
00:14:48,810 --> 00:14:53,550
collided<font color="#E5E5E5"> you like this you collect the</font>

305
00:14:51,480 --> 00:14:55,950
chess and put it<font color="#CCCCCC"> inside</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> cob dish</font><font color="#E5E5E5"> and</font>

306
00:14:53,550 --> 00:14:58,170
then you start executing<font color="#CCCCCC"> and the first</font>

307
00:14:55,950 --> 00:15:01,920
<font color="#E5E5E5">distraction is actually changing the</font>

308
00:14:58,170 --> 00:15:02,579
third one to an<font color="#CCCCCC"> extraction</font><font color="#E5E5E5"> that can be</font>

309
00:15:01,920 --> 00:15:05,400
executed

310
00:15:02,580 --> 00:15:08,910
<font color="#CCCCCC">ok so you keep executing</font><font color="#E5E5E5"> and when you</font>

311
00:15:05,400 --> 00:15:12,000
reach destruction tree<font color="#E5E5E5"> the page</font><font color="#CCCCCC"> happened</font>

312
00:15:08,910 --> 00:15:13,800
only<font color="#E5E5E5"> on the original text so you</font>

313
00:15:12,000 --> 00:15:16,560
executing the code cache you get a crash

314
00:15:13,800 --> 00:15:20,339
<font color="#CCCCCC">ok you die</font><font color="#E5E5E5"> you identify that there is</font>

315
00:15:16,560 --> 00:15:22,760
<font color="#E5E5E5">something wrong so we want to flip</font><font color="#CCCCCC"> that</font>

316
00:15:20,339 --> 00:15:24,360
so we write a specific<font color="#E5E5E5"> module for</font>

317
00:15:22,760 --> 00:15:29,220
self-modifying code

318
00:15:24,360 --> 00:15:32,279
<font color="#CCCCCC">and</font><font color="#E5E5E5"> he has</font><font color="#CCCCCC"> basically two functions one</font>

319
00:15:29,220 --> 00:15:35,910
that is called<font color="#CCCCCC"> mathlete written address</font>

320
00:15:32,279 --> 00:15:37,709
that<font color="#E5E5E5"> we put before each instruction that</font>

321
00:15:35,910 --> 00:15:40,680
actually writes something inside the

322
00:15:37,709 --> 00:15:43,920
memory<font color="#E5E5E5"> okay and the other one that is</font>

323
00:15:40,680 --> 00:15:46,920
check IP written is basically put it

324
00:15:43,920 --> 00:15:49,439
before<font color="#E5E5E5"> each instruction so what we add</font>

325
00:15:46,920 --> 00:15:51,240
is something like that<font color="#E5E5E5"> so I</font><font color="#CCCCCC"> Section 1</font><font color="#E5E5E5"> is</font>

326
00:15:49,440 --> 00:15:53,820
<font color="#CCCCCC">actually writing something</font><font color="#E5E5E5"> in the memory</font>

327
00:15:51,240 --> 00:15:56,040
so we have both<font color="#E5E5E5"> the the function the</font>

328
00:15:53,820 --> 00:15:58,140
other are not writing<font color="#E5E5E5"> anything so we</font>

329
00:15:56,040 --> 00:16:01,469
have only the check and then<font color="#E5E5E5"> it's easy</font>

330
00:15:58,140 --> 00:16:03,439
<font color="#E5E5E5">when when we exit before actually</font>

331
00:16:01,470 --> 00:16:06,750
<font color="#CCCCCC">securing the first subtraction we check</font>

332
00:16:03,440 --> 00:16:09,529
which part of memories<font color="#E5E5E5"> Donna is</font><font color="#CCCCCC"> gonna</font>

333
00:16:06,750 --> 00:16:13,589
bright and we store it<font color="#CCCCCC"> in a list okay</font>

334
00:16:09,529 --> 00:16:16,680
<font color="#E5E5E5">then the B patch happen at</font><font color="#CCCCCC"> every</font><font color="#E5E5E5"> time</font>

335
00:16:13,589 --> 00:16:19,410
that before actually<font color="#E5E5E5"> executing</font><font color="#CCCCCC"> interest</font>

336
00:16:16,680 --> 00:16:21,599
<font color="#E5E5E5">action we're gonna check the</font><font color="#CCCCCC"> the list to</font>

337
00:16:19,410 --> 00:16:24,899
see<font color="#CCCCCC"> if the instruction we are about to</font>

338
00:16:21,600 --> 00:16:29,310
<font color="#E5E5E5">execute is an extraction that</font><font color="#CCCCCC"> is has</font>

339
00:16:24,899 --> 00:16:31,290
<font color="#CCCCCC">been modified</font><font color="#E5E5E5"> or not</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> so the</font>

340
00:16:29,310 --> 00:16:34,579
instruction to<font color="#E5E5E5"> have not been</font><font color="#CCCCCC"> modified so</font>

341
00:16:31,290 --> 00:16:37,399
we can go<font color="#E5E5E5"> on when we reach</font><font color="#CCCCCC"> destruction</font><font color="#E5E5E5"> 3</font>

342
00:16:34,579 --> 00:16:41,370
we know<font color="#E5E5E5"> destruction 3 has been modified</font>

343
00:16:37,399 --> 00:16:44,850
so we just trigger<font color="#E5E5E5"> a</font><font color="#CCCCCC"> invalidation</font><font color="#E5E5E5"> of</font>

344
00:16:41,370 --> 00:16:49,320
<font color="#CCCCCC">dictation ok we actually trigger what is</font>

345
00:16:44,850 --> 00:16:50,940
called a trace recollection<font color="#CCCCCC"> so basically</font>

346
00:16:49,320 --> 00:16:54,390
the case is invalidated

347
00:16:50,940 --> 00:16:57,000
so we recollect the chase from that

348
00:16:54,390 --> 00:17:00,839
point on and now<font color="#E5E5E5"> the new trace actually</font>

349
00:16:57,000 --> 00:17:03,029
contain<font color="#E5E5E5"> the instruction page so we can</font>

350
00:17:00,839 --> 00:17:06,600
keep executing<font color="#CCCCCC"> because</font><font color="#E5E5E5"> we have the new</font>

351
00:17:03,029 --> 00:17:08,790
instruction<font color="#CCCCCC"> ok so that's</font><font color="#E5E5E5"> the idea</font>

352
00:17:06,599 --> 00:17:10,770
it's kind of heavy<font color="#CCCCCC"> as you may think</font>

353
00:17:08,790 --> 00:17:13,438
because<font color="#CCCCCC"> we</font><font color="#E5E5E5"> are basically adding</font>

354
00:17:10,770 --> 00:17:21,260
something<font color="#CCCCCC"> or each instruction</font><font color="#E5E5E5"> but this</font>

355
00:17:13,439 --> 00:17:24,260
work<font color="#E5E5E5"> okay so that's for the first part</font>

356
00:17:21,260 --> 00:17:24,260
so

357
00:17:25,669 --> 00:17:31,139
now I want to<font color="#E5E5E5"> talk about environment</font>

358
00:17:27,898 --> 00:17:35,610
<font color="#CCCCCC">Hartford so you may see environment</font>

359
00:17:31,139 --> 00:17:37,408
<font color="#E5E5E5">hotspots as the same</font><font color="#CCCCCC"> miscellany of of</font>

360
00:17:35,610 --> 00:17:41,279
the<font color="#CCCCCC"> octopods okay</font><font color="#E5E5E5"> are actually those</font>

361
00:17:37,409 --> 00:17:44,100
artifact<font color="#E5E5E5"> that I'm not specific</font><font color="#CCCCCC"> about the</font>

362
00:17:41,279 --> 00:17:48,779
JIT compiler or the<font color="#E5E5E5"> code cache or the</font>

363
00:17:44,100 --> 00:17:50,699
other<font color="#E5E5E5"> end detection okay we have some</font>

364
00:17:48,779 --> 00:17:53,010
that is<font color="#E5E5E5"> trillion some</font><font color="#CCCCCC"> of it</font><font color="#E5E5E5"> is less</font>

365
00:17:50,700 --> 00:17:57,179
<font color="#CCCCCC">cheetah so the first one the</font><font color="#E5E5E5"> trivial one</font>

366
00:17:53,010 --> 00:18:01,620
is<font color="#CCCCCC"> pollen detection so we can basically</font>

367
00:17:57,179 --> 00:18:05,850
check the list of process and see okay

368
00:18:01,620 --> 00:18:08,580
the<font color="#E5E5E5"> the</font><font color="#CCCCCC"> may further</font><font color="#E5E5E5"> process spin so</font><font color="#CCCCCC"> I'm</font>

369
00:18:05,850 --> 00:18:11,070
and extra mentation<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> it's easy as</font><font color="#CCCCCC"> as</font>

370
00:18:08,580 --> 00:18:12,539
<font color="#E5E5E5">in</font><font color="#CCCCCC"> this there</font><font color="#E5E5E5"> is two way you can check</font>

371
00:18:11,070 --> 00:18:17,070
your father

372
00:18:12,539 --> 00:18:19,350
there<font color="#E5E5E5"> is one using Windows system called</font>

373
00:18:17,070 --> 00:18:23,220
so the<font color="#CCCCCC"> Aquarian</font><font color="#E5E5E5"> system information and</font>

374
00:18:19,350 --> 00:18:25,709
<font color="#E5E5E5">the</font><font color="#CCCCCC"> other one is looking inside the CSI</font>

375
00:18:23,220 --> 00:18:28,830
RSS process that is actually a useful

376
00:18:25,710 --> 00:18:30,840
<font color="#CCCCCC">and process that that keeps an entire</font>

377
00:18:28,830 --> 00:18:35,299
list of process inside<font color="#CCCCCC"> its memory so you</font>

378
00:18:30,840 --> 00:18:39,899
can you<font color="#CCCCCC"> can read it from from</font><font color="#E5E5E5"> his memory</font>

379
00:18:35,299 --> 00:18:41,309
<font color="#E5E5E5">so we can</font><font color="#CCCCCC"> easily defeat</font><font color="#E5E5E5"> this with</font><font color="#CCCCCC"> you</font>

380
00:18:39,899 --> 00:18:44,908
<font color="#CCCCCC">key modules</font><font color="#E5E5E5"> okay you looking</font><font color="#CCCCCC"> is</font>

381
00:18:41,309 --> 00:18:47,789
something<font color="#E5E5E5"> that is well known so in the</font>

382
00:18:44,909 --> 00:18:50,970
communities the idea is<font color="#CCCCCC"> are I intercept</font>

383
00:18:47,789 --> 00:18:55,860
<font color="#E5E5E5">some function</font><font color="#CCCCCC"> looking some function we</font>

384
00:18:50,970 --> 00:18:59,549
implemented in our framework<font color="#E5E5E5"> to way to</font>

385
00:18:55,860 --> 00:19:01,918
<font color="#CCCCCC">hooking modules</font><font color="#E5E5E5"> one that is the function</font>

386
00:18:59,549 --> 00:19:04,620
module and the other one that<font color="#CCCCCC"> is looking</font>

387
00:19:01,919 --> 00:19:07,250
<font color="#E5E5E5">at the</font><font color="#CCCCCC"> Cisco</font><font color="#E5E5E5"> so the second one is is</font>

388
00:19:04,620 --> 00:19:09,689
<font color="#E5E5E5">working searching</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> the instruction</font>

389
00:19:07,250 --> 00:19:12,590
for the Cisco instruction the one that

390
00:19:09,690 --> 00:19:16,500
has<font color="#E5E5E5"> actually triggering the Cisco</font><font color="#CCCCCC"> adding</font>

391
00:19:12,590 --> 00:19:19,970
something after and and the first<font color="#E5E5E5"> one is</font>

392
00:19:16,500 --> 00:19:21,630
<font color="#CCCCCC">actually different because it's it's on</font>

393
00:19:19,970 --> 00:19:25,799
it's on yellow

394
00:19:21,630 --> 00:19:29,610
so the idea<font color="#E5E5E5"> about the</font><font color="#CCCCCC"> new module</font><font color="#E5E5E5"> is that</font>

395
00:19:25,799 --> 00:19:32,549
<font color="#E5E5E5">when you</font><font color="#CCCCCC"> are loading a new DLL inside</font>

396
00:19:29,610 --> 00:19:36,740
the memory<font color="#CCCCCC"> are you check on with with a</font>

397
00:19:32,549 --> 00:19:39,500
dispatcher if if some of the<font color="#CCCCCC"> phone</font>

398
00:19:36,740 --> 00:19:42,440
inside<font color="#E5E5E5"> this</font><font color="#CCCCCC"> dll is on your list so if</font>

399
00:19:39,500 --> 00:19:45,289
it's on<font color="#CCCCCC"> your list</font><font color="#E5E5E5"> what you do is</font>

400
00:19:42,440 --> 00:19:46,760
actually putting a<font color="#E5E5E5"> jump at the beginning</font>

401
00:19:45,289 --> 00:19:48,289
<font color="#E5E5E5">of the function is the classical hook</font>

402
00:19:46,760 --> 00:19:51,260
you put a jump at the beginning<font color="#E5E5E5"> of the</font>

403
00:19:48,289 --> 00:19:55,789
function<font color="#E5E5E5"> and the jump is jumping</font><font color="#CCCCCC"> inside</font>

404
00:19:51,260 --> 00:19:58,070
your function define the place doing

405
00:19:55,789 --> 00:20:00,620
<font color="#E5E5E5">whatever you want a jumping back okay</font>

406
00:19:58,070 --> 00:20:03,620
<font color="#CCCCCC">that's a pretty standard</font><font color="#E5E5E5"> way of</font><font color="#CCCCCC"> looking</font>

407
00:20:00,620 --> 00:20:07,428
<font color="#E5E5E5">functions and what we can do is</font>

408
00:20:03,620 --> 00:20:11,120
basically<font color="#CCCCCC"> hooking the antiquary system</font>

409
00:20:07,429 --> 00:20:13,010
information and changing the value

410
00:20:11,120 --> 00:20:15,168
returned<font color="#E5E5E5"> by the function so if there</font><font color="#CCCCCC"> is</font>

411
00:20:13,010 --> 00:20:17,149
<font color="#E5E5E5">pin it's a blacklist if there is</font><font color="#CCCCCC"> pin the</font>

412
00:20:15,169 --> 00:20:21,470
<font color="#CCCCCC">tax inside</font><font color="#E5E5E5"> a change it with common</font><font color="#CCCCCC"> dot</font>

413
00:20:17,149 --> 00:20:26,289
<font color="#CCCCCC">exact</font><font color="#E5E5E5"> okay just a blacklist</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> to deny</font>

414
00:20:21,470 --> 00:20:30,740
access to<font color="#E5E5E5"> the memory further process we</font>

415
00:20:26,289 --> 00:20:34,730
we hook the empty open process okay<font color="#E5E5E5"> so</font>

416
00:20:30,740 --> 00:20:37,419
that basically<font color="#E5E5E5"> when when you try to open</font>

417
00:20:34,730 --> 00:20:41,299
<font color="#E5E5E5">opening the memory of the process you</font>

418
00:20:37,419 --> 00:20:45,799
<font color="#E5E5E5">cannot of</font><font color="#CCCCCC"> course Daniel is where you may</font>

419
00:20:41,299 --> 00:20:49,820
may think oh but if I<font color="#E5E5E5"> don't if I</font><font color="#CCCCCC"> don't I</font>

420
00:20:45,799 --> 00:20:51,830
cannot have<font color="#E5E5E5"> access to this process it's</font>

421
00:20:49,820 --> 00:20:54,260
a way<font color="#E5E5E5"> to detect the system and this</font><font color="#CCCCCC"> is</font>

422
00:20:51,830 --> 00:20:56,480
true but<font color="#E5E5E5"> you may use other model to</font>

423
00:20:54,260 --> 00:21:00,200
<font color="#E5E5E5">actually I'll show you later to</font><font color="#CCCCCC"> actually</font>

424
00:20:56,480 --> 00:21:01,909
affect<font color="#CCCCCC"> the read of memory</font><font color="#E5E5E5"> okay but if</font>

425
00:21:00,200 --> 00:21:05,960
you implement<font color="#E5E5E5"> in this way and then yes</font>

426
00:21:01,909 --> 00:21:11,210
you<font color="#E5E5E5"> there's another</font><font color="#CCCCCC"> activity basically</font>

427
00:21:05,960 --> 00:21:13,640
to display this cool so and this is the

428
00:21:11,210 --> 00:21:14,330
<font color="#E5E5E5">parent detection that is pretty pretty</font>

429
00:21:13,640 --> 00:21:18,169
easy

430
00:21:14,330 --> 00:21:21,408
so the second environment<font color="#E5E5E5"> artifact that</font>

431
00:21:18,169 --> 00:21:26,029
I want to show you is what<font color="#CCCCCC"> we call</font>

432
00:21:21,409 --> 00:21:30,740
memory fingerprint so the idea<font color="#E5E5E5"> of memory</font>

433
00:21:26,029 --> 00:21:36,350
fingerprinting is you can start looking

434
00:21:30,740 --> 00:21:41,980
<font color="#E5E5E5">inside the memory for forced strings for</font>

435
00:21:36,350 --> 00:21:45,740
binary sequence for whatever is<font color="#E5E5E5"> actually</font>

436
00:21:41,980 --> 00:21:47,840
something that<font color="#E5E5E5"> you know it's it's from</font>

437
00:21:45,740 --> 00:21:49,309
ping you know<font color="#E5E5E5"> there's the</font><font color="#CCCCCC"> pintle</font><font color="#E5E5E5"> DLL</font>

438
00:21:47,840 --> 00:21:50,090
inside<font color="#E5E5E5"> the memory so if I start</font>

439
00:21:49,309 --> 00:21:52,129
searching

440
00:21:50,090 --> 00:21:55,220
in the<font color="#E5E5E5"> memory</font><font color="#CCCCCC"> at some point I'm gonna</font>

441
00:21:52,130 --> 00:21:57,410
find the<font color="#CCCCCC"> dependence I see if I</font><font color="#E5E5E5"> find it</font>

442
00:21:55,220 --> 00:22:01,460
<font color="#E5E5E5">okay I know it I'm under instrumentation</font>

443
00:21:57,410 --> 00:22:02,750
<font color="#E5E5E5">so the problem of searching the memory</font>

444
00:22:01,460 --> 00:22:08,060
like<font color="#E5E5E5"> I</font><font color="#CCCCCC"> shown you</font>

445
00:22:02,750 --> 00:22:12,140
going back and forth is that you<font color="#E5E5E5"> cannot</font>

446
00:22:08,060 --> 00:22:14,080
jumping around<font color="#E5E5E5"> around with any address</font>

447
00:22:12,140 --> 00:22:18,710
inside the memory<font color="#E5E5E5"> because if you end up</font>

448
00:22:14,080 --> 00:22:22,250
in<font color="#E5E5E5"> a place like this</font><font color="#CCCCCC"> that is basically</font>

449
00:22:18,710 --> 00:22:23,630
some memory that<font color="#CCCCCC"> is not allocated you</font>

450
00:22:22,250 --> 00:22:26,360
basically get<font color="#CCCCCC"> a crash</font>

451
00:22:23,630 --> 00:22:28,940
<font color="#CCCCCC">No so you cannot go through the memory</font>

452
00:22:26,360 --> 00:22:33,830
like<font color="#E5E5E5"> okay start from zero and then I try</font>

453
00:22:28,940 --> 00:22:39,200
a very<font color="#CCCCCC"> address and so to search to the</font>

454
00:22:33,830 --> 00:22:41,990
memory you usually use some some<font color="#E5E5E5"> call so</font>

455
00:22:39,200 --> 00:22:45,290
some system call<font color="#E5E5E5"> asking the operating</font>

456
00:22:41,990 --> 00:22:47,420
<font color="#E5E5E5">system about the memory layout now the</font>

457
00:22:45,290 --> 00:22:50,300
idea is<font color="#CCCCCC"> oh I use the virtual query and</font>

458
00:22:47,420 --> 00:22:52,670
then<font color="#E5E5E5"> I ask to the operating system</font><font color="#CCCCCC"> this</font>

459
00:22:50,300 --> 00:22:54,409
<font color="#E5E5E5">memory is allocated or not and then the</font>

460
00:22:52,670 --> 00:22:56,540
<font color="#CCCCCC">operating</font><font color="#E5E5E5"> system is</font><font color="#CCCCCC"> Daniel yeah</font><font color="#E5E5E5"> I so</font>

461
00:22:54,410 --> 00:22:59,060
locator or<font color="#E5E5E5"> not in this way you know</font>

462
00:22:56,540 --> 00:23:03,139
which is<font color="#CCCCCC"> the memory layout and you just</font>

463
00:22:59,060 --> 00:23:06,950
search inside<font color="#E5E5E5"> not that memory that</font><font color="#CCCCCC"> you</font>

464
00:23:03,140 --> 00:23:10,390
know is allocated so you may guess the

465
00:23:06,950 --> 00:23:14,480
way we used to<font color="#CCCCCC"> treat this we basically</font>

466
00:23:10,390 --> 00:23:18,430
<font color="#CCCCCC">hook the diverter</font><font color="#E5E5E5"> query and we created a</font>

467
00:23:14,480 --> 00:23:21,500
<font color="#CCCCCC">whitelist</font><font color="#E5E5E5"> of accessible memory so that</font>

468
00:23:18,430 --> 00:23:24,290
every<font color="#CCCCCC"> time</font><font color="#E5E5E5"> you try to query the system</font>

469
00:23:21,500 --> 00:23:27,280
<font color="#E5E5E5">it tells you</font><font color="#CCCCCC"> that the free memory</font><font color="#E5E5E5"> is</font>

470
00:23:24,290 --> 00:23:32,180
only<font color="#E5E5E5"> the one</font><font color="#CCCCCC"> that you want</font><font color="#E5E5E5"> to show and</font>

471
00:23:27,280 --> 00:23:32,600
the memo released<font color="#E5E5E5"> is actually updated at</font>

472
00:23:32,180 --> 00:23:37,460
runtime

473
00:23:32,600 --> 00:23:39,290
<font color="#E5E5E5">okay so inside the list we have the main</font>

474
00:23:37,460 --> 00:23:41,570
module of course the text<font color="#E5E5E5"> module and</font>

475
00:23:39,290 --> 00:23:45,139
then a library and there is another hook

476
00:23:41,570 --> 00:23:47,060
inside the load library such that if<font color="#E5E5E5"> you</font>

477
00:23:45,140 --> 00:23:50,300
actually loading a new<font color="#E5E5E5"> library we know</font>

478
00:23:47,060 --> 00:23:53,419
it if you're<font color="#E5E5E5"> loading later so we</font><font color="#CCCCCC"> can add</font>

479
00:23:50,300 --> 00:23:56,540
<font color="#CCCCCC">to</font><font color="#E5E5E5"> to the to do it to the a whitelist</font>

480
00:23:53,420 --> 00:23:59,060
<font color="#CCCCCC">and of course you have the heap the</font>

481
00:23:56,540 --> 00:24:00,918
stack and then you have some of<font color="#CCCCCC"> the</font>

482
00:23:59,060 --> 00:24:04,620
windows table

483
00:24:00,919 --> 00:24:10,770
<font color="#E5E5E5">and the Muppet file</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> when you are</font>

484
00:24:04,620 --> 00:24:14,539
<font color="#E5E5E5">mapping something okay so that's the</font>

485
00:24:10,770 --> 00:24:19,200
second step we are halfway there<font color="#E5E5E5"> okay</font>

486
00:24:14,539 --> 00:24:22,379
so stay<font color="#E5E5E5"> with me another another 20</font>

487
00:24:19,200 --> 00:24:29,789
<font color="#CCCCCC">minutes so</font><font color="#E5E5E5"> big compiler detection okay</font>

488
00:24:22,380 --> 00:24:32,780
we are using<font color="#CCCCCC"> read compilers and</font><font color="#E5E5E5"> actually</font>

489
00:24:29,789 --> 00:24:36,450
it's not<font color="#CCCCCC"> DT Street</font><font color="#E5E5E5"> good compiler so I</font>

490
00:24:32,780 --> 00:24:39,418
can<font color="#E5E5E5"> detect</font><font color="#CCCCCC"> big I can</font><font color="#E5E5E5"> detect that I'm</font>

491
00:24:36,450 --> 00:24:43,590
using this stuff compiling inside the

492
00:24:39,419 --> 00:24:45,659
memory<font color="#CCCCCC"> no so what one of</font><font color="#E5E5E5"> the way to to</font>

493
00:24:43,590 --> 00:24:48,330
detect I do comparison

494
00:24:45,659 --> 00:24:53,340
looking at the<font color="#CCCCCC"> edit permission of the</font>

495
00:24:48,330 --> 00:24:55,710
pages<font color="#E5E5E5"> because because you are</font><font color="#CCCCCC"> bragging</font>

496
00:24:53,340 --> 00:24:59,459
the<font color="#CCCCCC"> code that you</font><font color="#E5E5E5"> want to execute your</font>

497
00:24:55,710 --> 00:25:05,669
pages<font color="#CCCCCC"> will have writing and</font><font color="#E5E5E5"> executable</font>

498
00:24:59,460 --> 00:25:07,470
permission<font color="#E5E5E5"> so you can just list the the</font>

499
00:25:05,669 --> 00:25:09,720
pages and see oh<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> I have a lot of</font>

500
00:25:07,470 --> 00:25:14,730
<font color="#E5E5E5">writing and executable so I didn't use</font>

501
00:25:09,720 --> 00:25:21,090
<font color="#E5E5E5">any on my mother so I know this there is</font>

502
00:25:14,730 --> 00:25:23,159
something odd and so this is the problem

503
00:25:21,090 --> 00:25:27,840
<font color="#E5E5E5">with the memory pages and another thing</font>

504
00:25:23,159 --> 00:25:32,010
<font color="#CCCCCC">that</font><font color="#E5E5E5"> you can do is you can detect that</font>

505
00:25:27,840 --> 00:25:34,649
someone hooked<font color="#E5E5E5"> some functions okay</font>

506
00:25:32,010 --> 00:25:38,340
and pin is<font color="#CCCCCC"> actually looking some</font>

507
00:25:34,650 --> 00:25:40,620
function<font color="#E5E5E5"> to to perform</font><font color="#CCCCCC"> is tracing every</font>

508
00:25:38,340 --> 00:25:44,070
building<font color="#E5E5E5"> and on and so forth and all</font>

509
00:25:40,620 --> 00:25:47,789
this stuff<font color="#CCCCCC"> so I</font><font color="#E5E5E5"> can look inside the</font>

510
00:25:44,070 --> 00:25:50,309
memory of of a<font color="#CCCCCC"> dll</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> set some</font>

511
00:25:47,789 --> 00:25:52,919
functions<font color="#CCCCCC"> that I know pin is gonna hook</font>

512
00:25:50,309 --> 00:25:55,440
and if the beginning<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> function is</font>

513
00:25:52,919 --> 00:25:58,049
not what I expect<font color="#E5E5E5"> I know there is</font><font color="#CCCCCC"> no so</font>

514
00:25:55,440 --> 00:26:02,190
that's actually<font color="#E5E5E5"> the example this is the</font>

515
00:25:58,049 --> 00:26:04,379
example<font color="#E5E5E5"> on now pin is soaking the user a</font>

516
00:26:02,190 --> 00:26:07,350
PC dispatcher<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so it's basically</font>

517
00:26:04,380 --> 00:26:12,179
adding a jump<font color="#E5E5E5"> at the beginning as I show</font>

518
00:26:07,350 --> 00:26:14,669
<font color="#CCCCCC">you</font><font color="#E5E5E5"> so I can read it and I know I'm an</font>

519
00:26:12,179 --> 00:26:18,060
instrumentation so we have a<font color="#CCCCCC"> module for</font>

520
00:26:14,670 --> 00:26:22,920
of course<font color="#E5E5E5"> so it's called</font><font color="#CCCCCC"> a fakery dental</font>

521
00:26:18,060 --> 00:26:24,960
module<font color="#CCCCCC"> what it does is basically you can</font>

522
00:26:22,920 --> 00:26:29,090
see as a<font color="#CCCCCC"> built on memory on</font><font color="#E5E5E5"> top of</font>

523
00:26:24,960 --> 00:26:31,980
<font color="#CCCCCC">crystal memory</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> I gonna</font><font color="#E5E5E5"> show you now</font>

524
00:26:29,090 --> 00:26:35,520
<font color="#CCCCCC">the idea</font><font color="#E5E5E5"> is I of the function</font><font color="#CCCCCC"> there</font>

525
00:26:31,980 --> 00:26:38,640
inside<font color="#E5E5E5"> the memory and what I expecting</font>

526
00:26:35,520 --> 00:26:40,560
there is this<font color="#CCCCCC"> Lea instruction but of</font>

527
00:26:38,640 --> 00:26:46,350
<font color="#E5E5E5">course</font><font color="#CCCCCC"> it's suit so I have a jump</font>

528
00:26:40,560 --> 00:26:50,580
instruction<font color="#CCCCCC"> so when when we</font><font color="#E5E5E5"> are building</font>

529
00:26:46,350 --> 00:26:52,530
the chase we search for<font color="#CCCCCC"> for</font><font color="#E5E5E5"> rate for</font>

530
00:26:50,580 --> 00:26:56,129
instruction<font color="#E5E5E5"> that</font><font color="#CCCCCC"> are performing every</font>

531
00:26:52,530 --> 00:27:00,149
inside the memory like the movie<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so</font>

532
00:26:56,130 --> 00:27:03,180
it's reading inside<font color="#E5E5E5"> the memory</font><font color="#CCCCCC"> we keep a</font>

533
00:27:00,150 --> 00:27:05,670
<font color="#E5E5E5">list of you can look at the hook</font><font color="#CCCCCC"> that</font>

534
00:27:03,180 --> 00:27:09,840
functions<font color="#E5E5E5"> inside the insert another part</font>

535
00:27:05,670 --> 00:27:12,540
<font color="#E5E5E5">of memory as if the if the memory if the</font>

536
00:27:09,840 --> 00:27:15,899
if the memory<font color="#E5E5E5"> we are going to read is</font>

537
00:27:12,540 --> 00:27:17,730
inside our our list we basically

538
00:27:15,900 --> 00:27:21,720
redirect the memory to<font color="#CCCCCC"> another address</font>

539
00:27:17,730 --> 00:27:25,940
where we<font color="#E5E5E5"> stored the</font><font color="#CCCCCC"> real</font><font color="#E5E5E5"> volume okay so</font>

540
00:27:21,720 --> 00:27:29,790
<font color="#E5E5E5">every time we actually</font><font color="#CCCCCC"> perform a hook we</font>

541
00:27:25,940 --> 00:27:35,340
we saved the<font color="#CCCCCC"> old value somewhere else</font>

542
00:27:29,790 --> 00:27:37,620
<font color="#E5E5E5">and then we keep a list of of where are</font>

543
00:27:35,340 --> 00:27:41,490
our stuff where<font color="#E5E5E5"> we put the old value and</font>

544
00:27:37,620 --> 00:27:43,020
when we you are trying<font color="#E5E5E5"> to read to read</font>

545
00:27:41,490 --> 00:27:45,840
the beginning<font color="#CCCCCC"> of</font><font color="#E5E5E5"> our function we just</font>

546
00:27:43,020 --> 00:27:48,389
<font color="#CCCCCC">change the</font><font color="#E5E5E5"> address on</font><font color="#CCCCCC"> distraction so</font>

547
00:27:45,840 --> 00:27:52,470
<font color="#CCCCCC">that you can read another place okay so</font>

548
00:27:48,390 --> 00:27:54,060
you read<font color="#CCCCCC"> the original</font><font color="#E5E5E5"> it's the actual</font>

549
00:27:52,470 --> 00:27:55,590
and then you are fine<font color="#E5E5E5"> because of the</font>

550
00:27:54,060 --> 00:28:01,100
compare and<font color="#E5E5E5"> check that you are doing</font>

551
00:27:55,590 --> 00:28:05,419
it's<font color="#E5E5E5"> actually what you expected so we</font>

552
00:28:01,100 --> 00:28:11,790
<font color="#CCCCCC">have another</font><font color="#E5E5E5"> one another thing that is</font>

553
00:28:05,420 --> 00:28:14,280
memory allocations<font color="#CCCCCC"> so the the</font><font color="#E5E5E5"> decompiler</font>

554
00:28:11,790 --> 00:28:17,340
inside pin is actually<font color="#CCCCCC"> performing a lot</font>

555
00:28:14,280 --> 00:28:22,440
<font color="#CCCCCC">of</font><font color="#E5E5E5"> memory allocation so every time you</font>

556
00:28:17,340 --> 00:28:25,020
need more space for building it stress

557
00:28:22,440 --> 00:28:28,130
is actually locating something<font color="#E5E5E5"> so</font>

558
00:28:25,020 --> 00:28:28,129
another easy way to

559
00:28:28,260 --> 00:28:37,680
detect the<font color="#CCCCCC"> detect ID digit Kampala</font><font color="#E5E5E5"> is</font>

560
00:28:33,240 --> 00:28:41,850
the one of<font color="#CCCCCC"> King the develop memory</font>

561
00:28:37,680 --> 00:28:46,160
<font color="#E5E5E5">function okay</font><font color="#CCCCCC"> so I'm the malware I'm</font>

562
00:28:41,850 --> 00:28:50,879
making the hook on the allocated memory

563
00:28:46,160 --> 00:28:52,050
<font color="#E5E5E5">so I can</font><font color="#CCCCCC"> actually count how</font><font color="#E5E5E5"> many</font><font color="#CCCCCC"> a</font>

564
00:28:50,880 --> 00:28:55,830
<font color="#CCCCCC">location are there</font>

565
00:28:52,050 --> 00:28:58,110
<font color="#E5E5E5">this is our there is the our function 10</font>

566
00:28:55,830 --> 00:29:00,600
I could<font color="#E5E5E5"> be jump back I increment a</font>

567
00:28:58,110 --> 00:29:02,969
counter and then<font color="#CCCCCC"> hm</font><font color="#E5E5E5"> I jump back in this</font>

568
00:29:00,600 --> 00:29:09,000
<font color="#E5E5E5">way I can count how many</font><font color="#CCCCCC"> allocation are</font>

569
00:29:02,970 --> 00:29:11,040
there and you may not perform any any

570
00:29:09,000 --> 00:29:13,410
counting so if there is<font color="#E5E5E5"> as if the</font>

571
00:29:11,040 --> 00:29:15,210
counter<font color="#CCCCCC"> is greater</font><font color="#E5E5E5"> than</font><font color="#CCCCCC"> 0</font><font color="#E5E5E5"> you know that</font>

572
00:29:13,410 --> 00:29:18,840
<font color="#CCCCCC">basically around under</font><font color="#E5E5E5"> instrumentation</font>

573
00:29:15,210 --> 00:29:21,450
so like so what we did is<font color="#CCCCCC"> actually so</font>

574
00:29:18,840 --> 00:29:23,129
this<font color="#E5E5E5"> is our</font><font color="#CCCCCC"> reception in New</font><font color="#E5E5E5"> York</font><font color="#CCCCCC"> okay</font>

575
00:29:21,450 --> 00:29:26,130
you are the malware someone<font color="#E5E5E5"> you're</font>

576
00:29:23,130 --> 00:29:30,780
writing inside<font color="#E5E5E5"> the jump so what we did</font>

577
00:29:26,130 --> 00:29:33,030
is actually it's similar<font color="#E5E5E5"> to the read</font>

578
00:29:30,780 --> 00:29:36,240
stuff I<font color="#CCCCCC"> just show you</font><font color="#E5E5E5"> but this time with</font>

579
00:29:33,030 --> 00:29:38,100
<font color="#E5E5E5">the right so</font><font color="#CCCCCC"> we're basically using the</font>

580
00:29:36,240 --> 00:29:42,720
fake<font color="#CCCCCC"> right hander module that is</font>

581
00:29:38,100 --> 00:29:45,179
basically stopping<font color="#E5E5E5"> the</font><font color="#CCCCCC"> bright of what is</font>

582
00:29:42,720 --> 00:29:47,790
actually doing<font color="#E5E5E5"> is redirect redirecting</font>

583
00:29:45,180 --> 00:29:51,570
the bright sound somewhere else<font color="#CCCCCC"> okay so</font>

584
00:29:47,790 --> 00:29:55,740
we basically change<font color="#CCCCCC"> release will</font><font color="#E5E5E5"> is</font>

585
00:29:51,570 --> 00:29:57,689
while you<font color="#E5E5E5"> are building the chase we we</font>

586
00:29:55,740 --> 00:29:59,460
are checking for<font color="#E5E5E5"> all the destruction</font>

587
00:29:57,690 --> 00:30:02,130
<font color="#E5E5E5">that are performing on a memory right</font>

588
00:29:59,460 --> 00:30:05,130
<font color="#E5E5E5">and then we change the address</font>

589
00:30:02,130 --> 00:30:06,930
putting the bright<font color="#CCCCCC"> something's in other</font>

590
00:30:05,130 --> 00:30:10,740
place<font color="#E5E5E5"> other place we are located for</font>

591
00:30:06,930 --> 00:30:13,920
some reason okay so of course what we do

592
00:30:10,740 --> 00:30:14,640
is when you try to read that memory

593
00:30:13,920 --> 00:30:18,270
location

594
00:30:14,640 --> 00:30:20,700
you we still have the<font color="#CCCCCC"> module</font><font color="#E5E5E5"> that</font>

595
00:30:18,270 --> 00:30:23,220
<font color="#E5E5E5">factory</font><font color="#CCCCCC"> its so we</font><font color="#E5E5E5"> can basically redirect</font>

596
00:30:20,700 --> 00:30:25,470
<font color="#E5E5E5">the read</font><font color="#CCCCCC"> also in the same place you</font>

597
00:30:23,220 --> 00:30:27,750
brought<font color="#E5E5E5"> so you're so awesome aware you</font>

598
00:30:25,470 --> 00:30:30,420
are<font color="#E5E5E5"> thinking</font><font color="#CCCCCC"> too right inside the ntdll</font>

599
00:30:27,750 --> 00:30:32,070
<font color="#E5E5E5">or reading there but basically</font>

600
00:30:30,420 --> 00:30:35,700
everything<font color="#CCCCCC"> you are doing</font><font color="#E5E5E5"> on that address</font>

601
00:30:32,070 --> 00:30:38,220
<font color="#E5E5E5">is ready read some somewhere else so you</font>

602
00:30:35,700 --> 00:30:39,510
perform<font color="#CCCCCC"> nuke</font><font color="#E5E5E5"> you think it's fine because</font>

603
00:30:38,220 --> 00:30:41,640
<font color="#E5E5E5">you're reading back the value you</font>

604
00:30:39,510 --> 00:30:41,970
brought<font color="#E5E5E5"> but actually there is no</font><font color="#CCCCCC"> hook in</font>

605
00:30:41,640 --> 00:30:45,630
<font color="#E5E5E5">place</font>

606
00:30:41,970 --> 00:30:51,840
and so you cannot count any any<font color="#E5E5E5"> a</font>

607
00:30:45,630 --> 00:30:55,320
<font color="#E5E5E5">location okay so we are almost there</font>

608
00:30:51,840 --> 00:30:58,830
with the with the instrumentation and

609
00:30:55,320 --> 00:31:02,370
<font color="#E5E5E5">discrimination part this is going</font><font color="#CCCCCC"> to be</font>

610
00:30:58,830 --> 00:31:09,330
a bit<font color="#E5E5E5"> quicker it's about over at</font>

611
00:31:02,370 --> 00:31:11,070
detection so this is<font color="#E5E5E5"> also a kind of well</font>

612
00:31:09,330 --> 00:31:14,129
<font color="#CCCCCC">know technique</font><font color="#E5E5E5"> when when you are</font>

613
00:31:11,070 --> 00:31:19,409
<font color="#E5E5E5">performing any instrumentation</font><font color="#CCCCCC"> of any</font>

614
00:31:14,130 --> 00:31:22,500
time actually<font color="#CCCCCC"> so I count the time</font><font color="#E5E5E5"> I I</font>

615
00:31:19,410 --> 00:31:24,390
come the time my my<font color="#CCCCCC"> script my executable</font>

616
00:31:22,500 --> 00:31:26,720
is taking it<font color="#E5E5E5"> to perform some action and</font>

617
00:31:24,390 --> 00:31:31,560
because there<font color="#E5E5E5"> is some instrumentation</font>

618
00:31:26,720 --> 00:31:35,400
involved I'm actually my execution is

619
00:31:31,560 --> 00:31:38,909
gonna be longer than expected<font color="#CCCCCC"> on a bare</font>

620
00:31:35,400 --> 00:31:41,700
metal machine<font color="#E5E5E5"> okay so this is of course</font>

621
00:31:38,910 --> 00:31:43,290
<font color="#CCCCCC">also true with</font><font color="#E5E5E5"> we think it's even more</font>

622
00:31:41,700 --> 00:31:44,700
<font color="#CCCCCC">true</font><font color="#E5E5E5"> if you use module like</font>

623
00:31:43,290 --> 00:31:47,210
self-modifying code that I'll show you

624
00:31:44,700 --> 00:31:52,250
<font color="#E5E5E5">that it's</font><font color="#CCCCCC"> having an instruction maybe</font>

625
00:31:47,210 --> 00:31:55,380
between<font color="#E5E5E5"> each instruction so there are</font>

626
00:31:52,250 --> 00:31:59,520
two big way to<font color="#E5E5E5"> actually detect the the</font>

627
00:31:55,380 --> 00:32:02,340
overhead<font color="#CCCCCC"> the first one is you basically</font>

628
00:31:59,520 --> 00:32:04,770
check the time<font color="#E5E5E5"> using the windows</font>

629
00:32:02,340 --> 00:32:08,449
functions<font color="#CCCCCC"> so there</font><font color="#E5E5E5"> are two API that are</font>

630
00:32:04,770 --> 00:32:11,340
called get account and time get time

631
00:32:08,450 --> 00:32:15,660
<font color="#E5E5E5">that are basically giving you the</font>

632
00:32:11,340 --> 00:32:18,149
<font color="#E5E5E5">execution time but what does API are</font>

633
00:32:15,660 --> 00:32:22,680
actually<font color="#CCCCCC"> doing is reading</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> a memory</font>

634
00:32:18,150 --> 00:32:24,630
<font color="#CCCCCC">a</font><font color="#E5E5E5"> memory structure a structure inside</font>

635
00:32:22,680 --> 00:32:27,540
<font color="#CCCCCC">the memory is called K</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> searched</font><font color="#E5E5E5"> data</font>

636
00:32:24,630 --> 00:32:32,520
<font color="#CCCCCC">but basically add some</font><font color="#E5E5E5"> value some</font>

637
00:32:27,540 --> 00:32:34,649
counter that is keeping<font color="#E5E5E5"> them so you may</font>

638
00:32:32,520 --> 00:32:37,410
guess the solution<font color="#E5E5E5"> here is we use the</font>

639
00:32:34,650 --> 00:32:42,360
<font color="#CCCCCC">yukkin yukkin module for the ethic time</font>

640
00:32:37,410 --> 00:32:48,290
and we use the sacred module for usage

641
00:32:42,360 --> 00:32:51,570
at that<font color="#CCCCCC"> it's this</font><font color="#E5E5E5"> cap this part is not</font>

642
00:32:48,290 --> 00:32:53,730
automatic as you may think<font color="#E5E5E5"> because</font><font color="#CCCCCC"> the</font>

643
00:32:51,570 --> 00:32:54,740
problem is<font color="#E5E5E5"> which</font><font color="#CCCCCC"> while you're</font><font color="#E5E5E5"> gonna put</font>

644
00:32:53,730 --> 00:32:58,630
inside<font color="#CCCCCC"> there okay</font>

645
00:32:54,740 --> 00:33:02,870
and I'll say<font color="#E5E5E5"> trial is it right now is</font>

646
00:32:58,630 --> 00:33:05,720
<font color="#CCCCCC">kinda</font><font color="#E5E5E5"> manually so we we estimated the</font>

647
00:33:02,870 --> 00:33:08,750
<font color="#CCCCCC">value for our</font><font color="#E5E5E5"> tools for</font><font color="#CCCCCC"> our framework</font>

648
00:33:05,720 --> 00:33:10,820
<font color="#E5E5E5">okay and we are</font><font color="#CCCCCC"> using a fixed value</font>

649
00:33:08,750 --> 00:33:14,420
there<font color="#E5E5E5"> but you can change it if</font><font color="#CCCCCC"> you are</font>

650
00:33:10,820 --> 00:33:17,120
<font color="#E5E5E5">using with with the other other value</font>

651
00:33:14,420 --> 00:33:24,140
that<font color="#E5E5E5"> you may think it works and there is</font>

652
00:33:17,120 --> 00:33:28,969
a another<font color="#CCCCCC"> way to actually detect the do</font>

653
00:33:24,140 --> 00:33:33,500
birth of yoga<font color="#E5E5E5"> read of your program that</font>

654
00:33:28,970 --> 00:33:35,510
<font color="#E5E5E5">is using the FD a DTS</font><font color="#CCCCCC"> C instruction</font><font color="#E5E5E5"> that</font>

655
00:33:33,500 --> 00:33:41,210
these are actually<font color="#E5E5E5"> destruction is giving</font>

656
00:33:35,510 --> 00:33:44,090
you the<font color="#CCCCCC"> count on CPU cycle and also here</font>

657
00:33:41,210 --> 00:33:46,370
you<font color="#CCCCCC"> right now may already know which</font>

658
00:33:44,090 --> 00:33:50,600
part of the tool we want<font color="#E5E5E5"> to use for that</font>

659
00:33:46,370 --> 00:33:52,699
<font color="#E5E5E5">we use the pattern matching module that</font>

660
00:33:50,600 --> 00:33:54,409
is the module that<font color="#E5E5E5"> we also use for the</font>

661
00:33:52,700 --> 00:33:57,070
into<font color="#CCCCCC"> e now is the module that</font><font color="#E5E5E5"> is</font>

662
00:33:54,410 --> 00:33:59,450
searching for<font color="#E5E5E5"> some instruction and then</font>

663
00:33:57,070 --> 00:34:00,110
patching adding some function<font color="#CCCCCC"> after</font>

664
00:33:59,450 --> 00:34:03,380
<font color="#E5E5E5">destruction</font>

665
00:34:00,110 --> 00:34:09,379
so you just change the the<font color="#E5E5E5"> return value</font>

666
00:34:03,380 --> 00:34:12,050
of<font color="#CCCCCC"> of this instruction okay so that's</font>

667
00:34:09,379 --> 00:34:13,839
<font color="#E5E5E5">enough</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> the for the end</font>

668
00:34:12,050 --> 00:34:19,250
discrimination<font color="#E5E5E5"> now I'm gonna talk about</font>

669
00:34:13,840 --> 00:34:24,740
the experiment<font color="#E5E5E5"> we did</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> aversive</font>

670
00:34:19,250 --> 00:34:26,840
malware so our idea is we had this tool

671
00:34:24,739 --> 00:34:28,609
<font color="#E5E5E5">okay I mean and then we know okay it's</font>

672
00:34:26,840 --> 00:34:31,220
useful it's not we<font color="#E5E5E5"> don't</font><font color="#CCCCCC"> really know</font>

673
00:34:28,609 --> 00:34:36,168
because<font color="#E5E5E5"> we don't know how</font><font color="#CCCCCC"> many ever</font><font color="#E5E5E5"> seen</font>

674
00:34:31,219 --> 00:34:38,359
malware out<font color="#E5E5E5"> there so what we we thought</font>

675
00:34:36,168 --> 00:34:42,739
<font color="#E5E5E5">okay let's</font><font color="#CCCCCC"> add a bunch</font><font color="#E5E5E5"> of malware and</font>

676
00:34:38,359 --> 00:34:45,168
<font color="#E5E5E5">try to understand if they are performing</font>

677
00:34:42,739 --> 00:34:47,649
some aversive be<font color="#E5E5E5"> aid or not so that's</font>

678
00:34:45,168 --> 00:34:53,330
<font color="#CCCCCC">basically what we</font><font color="#E5E5E5"> did we collected</font><font color="#CCCCCC"> about</font>

679
00:34:47,649 --> 00:34:55,549
<font color="#CCCCCC">7,000 binary from about of total with</font>

680
00:34:53,330 --> 00:34:58,759
<font color="#E5E5E5">the condition</font><font color="#CCCCCC"> that they are detected at</font>

681
00:34:55,550 --> 00:35:00,770
least from some antivirus<font color="#CCCCCC"> because we</font>

682
00:34:58,760 --> 00:35:05,930
want them<font color="#CCCCCC"> to be malicious</font>

683
00:35:00,770 --> 00:35:07,550
that's from October to flat body<font color="#E5E5E5"> illa</font>

684
00:35:05,930 --> 00:35:10,520
last year<font color="#E5E5E5"> okay</font>

685
00:35:07,550 --> 00:35:14,180
and we<font color="#E5E5E5"> run it actually</font><font color="#CCCCCC"> on a virtual</font>

686
00:35:10,520 --> 00:35:17,380
<font color="#E5E5E5">machine</font><font color="#CCCCCC"> that's because we</font><font color="#E5E5E5"> need to run</font>

687
00:35:14,180 --> 00:35:20,330
<font color="#CCCCCC">7,000 binary and we know Nelson thousand</font>

688
00:35:17,380 --> 00:35:22,250
bare-metal machine so the experiment has

689
00:35:20,330 --> 00:35:24,440
been<font color="#CCCCCC"> done onions</font><font color="#E5E5E5"> out the inside the</font>

690
00:35:22,250 --> 00:35:28,160
<font color="#CCCCCC">diverter</font><font color="#E5E5E5"> machine but we were checking</font>

691
00:35:24,440 --> 00:35:30,619
<font color="#CCCCCC">for ant instrumentation technique so for</font>

692
00:35:28,160 --> 00:35:32,990
<font color="#CCCCCC">10 ft burna instrumentation</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> course we</font>

693
00:35:30,619 --> 00:35:34,970
may add some false positive because<font color="#E5E5E5"> the</font>

694
00:35:32,990 --> 00:35:37,879
malware<font color="#E5E5E5"> was actually detecting the</font>

695
00:35:34,970 --> 00:35:40,430
<font color="#E5E5E5">virtual machine</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> on the anyway we</font>

696
00:35:37,880 --> 00:35:44,420
<font color="#E5E5E5">talked we tried our best to make to make</font>

697
00:35:40,430 --> 00:35:46,540
<font color="#E5E5E5">the Goethe machinist</font><font color="#CCCCCC"> as complete as</font>

698
00:35:44,420 --> 00:35:49,280
possible<font color="#E5E5E5"> so we installed a bunch of</font>

699
00:35:46,540 --> 00:35:51,650
application we<font color="#E5E5E5"> even stored some</font>

700
00:35:49,280 --> 00:35:56,510
<font color="#CCCCCC">credential some cookies some browser</font>

701
00:35:51,650 --> 00:35:59,119
history<font color="#E5E5E5"> so to</font><font color="#CCCCCC"> be as free as</font><font color="#E5E5E5"> possible</font><font color="#CCCCCC"> and</font>

702
00:35:56,510 --> 00:36:01,810
of<font color="#CCCCCC"> course we</font><font color="#E5E5E5"> are the moving mouse and</font>

703
00:35:59,119 --> 00:36:05,210
some other to the<font color="#CCCCCC"> blanching application</font>

704
00:36:01,810 --> 00:36:10,070
this stuff and we run each application

705
00:36:05,210 --> 00:36:11,420
for at least<font color="#CCCCCC"> 5 minutes ok so those</font><font color="#E5E5E5"> are</font>

706
00:36:10,070 --> 00:36:16,570
<font color="#E5E5E5">the results</font><font color="#CCCCCC"> more or</font><font color="#E5E5E5"> less</font>

707
00:36:11,420 --> 00:36:19,609
so we from all the banner we collected

708
00:36:16,570 --> 00:36:22,700
we run them through<font color="#E5E5E5"> every class that</font><font color="#CCCCCC"> is</font>

709
00:36:19,609 --> 00:36:26,029
this tool<font color="#CCCCCC"> that basically give you the</font>

710
00:36:22,700 --> 00:36:29,210
family<font color="#CCCCCC"> of the malware so the name</font><font color="#E5E5E5"> that</font>

711
00:36:26,030 --> 00:36:34,130
you see here is the the name given<font color="#CCCCCC"> to</font>

712
00:36:29,210 --> 00:36:36,710
you by the<font color="#CCCCCC"> by every class so what</font><font color="#E5E5E5"> you</font>

713
00:36:34,130 --> 00:36:40,099
can see is that we<font color="#CCCCCC"> have a really</font><font color="#E5E5E5"> huge</font>

714
00:36:36,710 --> 00:36:43,130
number<font color="#CCCCCC"> of very lock is</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> 80% so this</font>

715
00:36:40,099 --> 00:36:46,130
is how much<font color="#E5E5E5"> of this specific family</font>

716
00:36:43,130 --> 00:36:49,520
<font color="#CCCCCC">we're</font><font color="#E5E5E5"> inside our sample so there are</font>

717
00:36:46,130 --> 00:36:53,660
many<font color="#CCCCCC"> abilities are about the about 9</font>

718
00:36:49,520 --> 00:36:57,290
<font color="#CCCCCC">percent</font><font color="#E5E5E5"> we think that it's because</font>

719
00:36:53,660 --> 00:37:00,020
during February and and and actually

720
00:36:57,290 --> 00:37:02,480
<font color="#CCCCCC">during a</font><font color="#E5E5E5"> temporary February that was</font>

721
00:37:00,020 --> 00:37:04,310
more submitted than others<font color="#CCCCCC"> I actually</font>

722
00:37:02,480 --> 00:37:07,280
talked with the guy who<font color="#E5E5E5"> developed the</font>

723
00:37:04,310 --> 00:37:09,680
class and he it told me<font color="#CCCCCC"> that Barak is</font>

724
00:37:07,280 --> 00:37:13,970
<font color="#E5E5E5">not so common as a family inside them</font>

725
00:37:09,680 --> 00:37:16,310
<font color="#E5E5E5">inside</font><font color="#CCCCCC"> they're told so this is the</font>

726
00:37:13,970 --> 00:37:18,470
<font color="#CCCCCC">reason</font><font color="#E5E5E5"> and what you see in the middle is</font>

727
00:37:16,310 --> 00:37:20,380
the percentage<font color="#E5E5E5"> of sample of that family</font>

728
00:37:18,470 --> 00:37:23,109
<font color="#CCCCCC">that is a ratio so</font>

729
00:37:20,380 --> 00:37:26,529
the<font color="#E5E5E5"> bed lock is almost always amazing</font>

730
00:37:23,109 --> 00:37:30,130
<font color="#E5E5E5">but for rather you</font><font color="#CCCCCC"> you see</font><font color="#E5E5E5"> that they</font>

731
00:37:26,529 --> 00:37:33,339
never<font color="#CCCCCC"> cheater any of our our technique</font>

732
00:37:30,130 --> 00:37:35,589
<font color="#CCCCCC">and of course on</font><font color="#E5E5E5"> the on day on on the</font>

733
00:37:33,339 --> 00:37:38,619
last column<font color="#E5E5E5"> there you see how many</font>

734
00:37:35,589 --> 00:37:44,038
<font color="#E5E5E5">different technique they</font><font color="#CCCCCC"> triggered okay</font>

735
00:37:38,619 --> 00:37:47,140
so this table<font color="#E5E5E5"> may be more interesting</font>

736
00:37:44,039 --> 00:37:52,779
<font color="#CCCCCC">here we basically ordered the family</font>

737
00:37:47,140 --> 00:37:55,660
about the<font color="#CCCCCC"> ever silliness I mean the</font>

738
00:37:52,779 --> 00:37:59,109
first<font color="#CCCCCC"> one is the one that is 100%</font><font color="#E5E5E5"> and so</font>

739
00:37:55,660 --> 00:38:02,589
<font color="#CCCCCC">on so as you may may see there are few</font>

740
00:37:59,109 --> 00:38:05,799
family that<font color="#CCCCCC"> are basically</font><font color="#E5E5E5"> 100%</font><font color="#CCCCCC"> Avis if</font>

741
00:38:02,589 --> 00:38:08,410
they always implement some<font color="#E5E5E5"> sort of</font><font color="#CCCCCC"> dbi</font>

742
00:38:05,799 --> 00:38:12,009
<font color="#E5E5E5">and the instrumentation technique and</font>

743
00:38:08,410 --> 00:38:15,009
some other that<font color="#CCCCCC"> actually have a few few</font>

744
00:38:12,009 --> 00:38:17,470
sample that implements those technique

745
00:38:15,009 --> 00:38:24,329
so let's see which technique they

746
00:38:17,470 --> 00:38:27,189
actually implement so the first one is

747
00:38:24,329 --> 00:38:28,890
the soft modifying code and this<font color="#E5E5E5"> is not</font>

748
00:38:27,190 --> 00:38:32,739
<font color="#E5E5E5">actually surprising because</font>

749
00:38:28,890 --> 00:38:35,589
self-modifying code is not only<font color="#CCCCCC"> used</font><font color="#E5E5E5"> to</font>

750
00:38:32,739 --> 00:38:40,180
<font color="#E5E5E5">the fifth dynamic values to</font><font color="#CCCCCC"> mentorship</font>

751
00:38:35,589 --> 00:38:42,069
is useful for many reason it can also<font color="#E5E5E5"> be</font>

752
00:38:40,180 --> 00:38:45,549
like<font color="#E5E5E5"> a side effect that is actually</font>

753
00:38:42,069 --> 00:38:47,249
breaking also<font color="#CCCCCC"> be bi if if you if you</font>

754
00:38:45,549 --> 00:38:52,739
want<font color="#E5E5E5"> to be honnest</font>

755
00:38:47,249 --> 00:38:55,868
but another<font color="#E5E5E5"> the second spot is</font><font color="#CCCCCC"> kinda</font>

756
00:38:52,739 --> 00:38:59,589
more interesting because they<font color="#E5E5E5"> are doing</font>

757
00:38:55,869 --> 00:39:03,670
<font color="#E5E5E5">the parent detection check many of them</font>

758
00:38:59,589 --> 00:39:05,950
and that<font color="#E5E5E5"> is a super easy trick so that's</font>

759
00:39:03,670 --> 00:39:09,219
probably<font color="#E5E5E5"> the</font><font color="#CCCCCC"> reason because many many</font>

760
00:39:05,950 --> 00:39:11,529
<font color="#E5E5E5">members have have it implemented but</font>

761
00:39:09,219 --> 00:39:14,950
it's also one of the easier to<font color="#E5E5E5"> actually</font>

762
00:39:11,529 --> 00:39:17,950
bypass<font color="#CCCCCC"> know and then we have other so</font>

763
00:39:14,950 --> 00:39:19,718
the<font color="#CCCCCC"> bright on protecting memory region</font>

764
00:39:17,950 --> 00:39:23,799
<font color="#CCCCCC">II means basically</font><font color="#E5E5E5"> each I taught</font>

765
00:39:19,719 --> 00:39:27,670
something<font color="#CCCCCC"> okay and we have</font><font color="#E5E5E5"> other classic</font>

766
00:39:23,799 --> 00:39:30,400
stuff like that the bug flag or and and

767
00:39:27,670 --> 00:39:32,730
very few they actually<font color="#E5E5E5"> did memory</font>

768
00:39:30,400 --> 00:39:38,880
finger-painting so searching<font color="#E5E5E5"> to the memo</font>

769
00:39:32,730 --> 00:39:41,700
for for stuff so another disclaimer<font color="#E5E5E5"> here</font>

770
00:39:38,880 --> 00:39:45,420
<font color="#E5E5E5">the memory fingerprinting memory finger</font>

771
00:39:41,700 --> 00:39:47,580
<font color="#CCCCCC">Kingdom may not be done to actually</font>

772
00:39:45,420 --> 00:39:50,580
<font color="#E5E5E5">identify</font><font color="#CCCCCC"> pain it may be done to identify</font>

773
00:39:47,580 --> 00:39:55,259
<font color="#E5E5E5">other stuff but they were doing memory</font>

774
00:39:50,580 --> 00:39:57,870
fingerprinting<font color="#E5E5E5"> somehow okay so about</font>

775
00:39:55,260 --> 00:40:00,630
<font color="#E5E5E5">override of our tool because as I</font><font color="#CCCCCC"> told</font>

776
00:39:57,870 --> 00:40:05,460
you<font color="#E5E5E5"> all this stuff doesn't come for free</font>

777
00:40:00,630 --> 00:40:09,300
<font color="#E5E5E5">and we here I</font><font color="#CCCCCC"> just show you some rough</font>

778
00:40:05,460 --> 00:40:11,790
number on overhead and the percentage of

779
00:40:09,300 --> 00:40:13,890
the red is actually<font color="#E5E5E5"> on top of pin</font>

780
00:40:11,790 --> 00:40:18,390
overhead with<font color="#CCCCCC"> peanuts its own</font><font color="#E5E5E5"> overhead</font>

781
00:40:13,890 --> 00:40:21,540
so when you say we<font color="#E5E5E5"> we need to to use the</font>

782
00:40:18,390 --> 00:40:23,810
<font color="#CCCCCC">sacred module two hundred fifty four</font>

783
00:40:21,540 --> 00:40:25,470
percent it<font color="#E5E5E5"> means on top</font><font color="#CCCCCC"> of pin</font>

784
00:40:23,810 --> 00:40:31,470
instrumentation<font color="#E5E5E5"> okay</font>

785
00:40:25,470 --> 00:40:33,000
and we don't<font color="#E5E5E5"> have one for for the for</font>

786
00:40:31,470 --> 00:40:34,500
<font color="#E5E5E5">the self-modifying code because they</font>

787
00:40:33,000 --> 00:40:37,650
<font color="#E5E5E5">have modified</font><font color="#CCCCCC"> code</font><font color="#E5E5E5"> was not</font><font color="#CCCCCC"> working</font>

788
00:40:34,500 --> 00:40:41,850
without<font color="#E5E5E5"> our implementation basically it</font>

789
00:40:37,650 --> 00:40:47,880
was crashing<font color="#E5E5E5"> every time okay we are</font>

790
00:40:41,850 --> 00:40:51,630
almost done<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is a feature</font><font color="#CCCCCC"> that we</font>

791
00:40:47,880 --> 00:40:54,810
have<font color="#E5E5E5"> in our tool so last year public at</font>

792
00:40:51,630 --> 00:40:56,970
<font color="#CCCCCC">USA the guys who</font><font color="#E5E5E5"> actually</font><font color="#CCCCCC"> develop</font><font color="#E5E5E5"> the</font>

793
00:40:54,810 --> 00:40:59,820
part of this stuff<font color="#E5E5E5"> they</font><font color="#CCCCCC"> about talked</font>

794
00:40:56,970 --> 00:41:03,240
about unpacking<font color="#CCCCCC"> packet</font><font color="#E5E5E5"> unpacking</font><font color="#CCCCCC"> tools</font>

795
00:40:59,820 --> 00:41:06,810
that<font color="#E5E5E5"> was called pin demonium so pinned</font>

796
00:41:03,240 --> 00:41:09,540
<font color="#E5E5E5">ammonia is actually integrated with with</font>

797
00:41:06,810 --> 00:41:15,960
Iran China<font color="#CCCCCC"> okay and</font><font color="#E5E5E5"> in Timonium what was</font>

798
00:41:09,540 --> 00:41:19,890
doing really<font color="#E5E5E5"> neat stuff like detecting</font>

799
00:41:15,960 --> 00:41:21,710
the the<font color="#CCCCCC"> brighten executable region was</font>

800
00:41:19,890 --> 00:41:24,180
dumping the<font color="#CCCCCC"> program identifying the</font>

801
00:41:21,710 --> 00:41:26,370
original entry<font color="#E5E5E5"> pointing at the end which</font>

802
00:41:24,180 --> 00:41:29,160
<font color="#E5E5E5">was also</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to reconstruct the</font>

803
00:41:26,370 --> 00:41:32,370
executable<font color="#E5E5E5"> some time and so you have all</font>

804
00:41:29,160 --> 00:41:37,379
this stuff<font color="#E5E5E5"> on top of I can enable some</font>

805
00:41:32,370 --> 00:41:40,109
<font color="#E5E5E5">anti received system so last year we</font>

806
00:41:37,380 --> 00:41:44,760
weren't supporting at all obsidium that

807
00:41:40,110 --> 00:41:45,680
is actually doing<font color="#E5E5E5"> some some anti aunt in</font>

808
00:41:44,760 --> 00:41:49,700
the banking test

809
00:41:45,680 --> 00:41:53,058
<font color="#CCCCCC">a bank check</font><font color="#E5E5E5"> so now our tool can also</font>

810
00:41:49,700 --> 00:41:57,529
end the obsidium as Hassan al-bakr<font color="#E5E5E5"> so</font>

811
00:41:53,059 --> 00:42:01,030
for<font color="#E5E5E5"> one of you didn't follow the talk</font>

812
00:41:57,530 --> 00:42:05,540
the the green the green<font color="#E5E5E5"> spot means</font>

813
00:42:01,030 --> 00:42:07,579
basically<font color="#E5E5E5"> we can fold the recover the</font>

814
00:42:05,540 --> 00:42:10,190
executable<font color="#E5E5E5"> it means that the output</font><font color="#CCCCCC"> is</font>

815
00:42:07,579 --> 00:42:13,760
an executable<font color="#E5E5E5"> that you can run the</font>

816
00:42:10,190 --> 00:42:15,950
yellow means you add the<font color="#E5E5E5"> unpackage code</font>

817
00:42:13,760 --> 00:42:18,829
but it's not not<font color="#E5E5E5"> runnable because we</font>

818
00:42:15,950 --> 00:42:22,098
fail<font color="#CCCCCC"> to detect the import</font><font color="#E5E5E5"> table</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> this</font>

819
00:42:18,829 --> 00:42:24,859
<font color="#E5E5E5">canister</font><font color="#CCCCCC"> okay and and the tool is</font>

820
00:42:22,099 --> 00:42:26,869
<font color="#CCCCCC">actually working on many this</font><font color="#E5E5E5"> is an</font>

821
00:42:24,859 --> 00:42:29,720
experiment<font color="#E5E5E5"> where we did were basically</font>

822
00:42:26,869 --> 00:42:36,170
trying to unpacking random stuff and<font color="#CCCCCC"> it</font>

823
00:42:29,720 --> 00:42:39,319
works<font color="#E5E5E5"> on more than 60% of random random</font>

824
00:42:36,170 --> 00:42:44,319
<font color="#CCCCCC">Packers okay so they've</font><font color="#E5E5E5"> been randomly</font>

825
00:42:39,319 --> 00:42:48,380
<font color="#E5E5E5">chose from from virustotal ah good so</font>

826
00:42:44,319 --> 00:42:51,950
demo time so<font color="#E5E5E5"> i gonna show</font><font color="#CCCCCC"> you quickly</font>

827
00:42:48,380 --> 00:42:54,530
how<font color="#CCCCCC"> to use</font><font color="#E5E5E5"> the tool so for the</font>

828
00:42:51,950 --> 00:42:57,470
demonstration I'm actually using excite

829
00:42:54,530 --> 00:43:01,210
excited<font color="#CCCCCC"> czar tool</font><font color="#E5E5E5"> written by some guy</font>

830
00:42:57,470 --> 00:43:04,098
from<font color="#CCCCCC"> Kerr security</font><font color="#E5E5E5"> they basically they</font>

831
00:43:01,210 --> 00:43:08,450
<font color="#E5E5E5">have implemented some</font><font color="#CCCCCC"> of those technique</font>

832
00:43:04,099 --> 00:43:13,130
I<font color="#CCCCCC"> just show you</font><font color="#E5E5E5"> so I am Bobby I'm here</font>

833
00:43:08,450 --> 00:43:17,270
and I tried<font color="#E5E5E5"> 20 times this morning</font><font color="#CCCCCC"> the</font>

834
00:43:13,130 --> 00:43:25,880
demo I hope still<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> work so we have</font>

835
00:43:17,270 --> 00:43:31,599
the<font color="#CCCCCC"> excite binary</font><font color="#E5E5E5"> here okay and for</font>

836
00:43:25,880 --> 00:43:37,119
example<font color="#CCCCCC"> I can tell okay detect direct</font>

837
00:43:31,599 --> 00:43:40,880
<font color="#CCCCCC">buy into it</font><font color="#E5E5E5"> okay said they</font><font color="#CCCCCC"> ll actually</font>

838
00:43:37,119 --> 00:43:44,140
detecting if I'm if I'm<font color="#E5E5E5"> is using the</font>

839
00:43:40,880 --> 00:43:45,920
into<font color="#CCCCCC"> instruction to detect</font><font color="#E5E5E5"> me the</font>

840
00:43:44,140 --> 00:43:48,618
instrumentation of course I'm not using

841
00:43:45,920 --> 00:43:51,220
pin so the<font color="#CCCCCC"> textual fail</font><font color="#E5E5E5"> so if I actually</font>

842
00:43:48,619 --> 00:43:51,220
use pin

843
00:43:52,790 --> 00:44:05,470
<font color="#E5E5E5">you see that is detecting</font><font color="#CCCCCC"> pills so let's</font>

844
00:43:55,160 --> 00:44:09,080
use our<font color="#CCCCCC"> stall and we have many flags</font>

845
00:44:05,470 --> 00:44:12,290
that<font color="#CCCCCC"> you can enable</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> anti-air is the</font>

846
00:44:09,080 --> 00:44:14,150
<font color="#E5E5E5">generic flag for the instruction</font>

847
00:44:12,290 --> 00:44:18,350
specific patch you know<font color="#E5E5E5"> you need to</font><font color="#CCCCCC"> use</font>

848
00:44:14,150 --> 00:44:20,740
the<font color="#E5E5E5"> entire instruction patch and now you</font>

849
00:44:18,350 --> 00:44:26,750
see it's actually<font color="#E5E5E5"> not detected</font><font color="#CCCCCC"> anymore</font>

850
00:44:20,740 --> 00:44:30,140
<font color="#E5E5E5">okay so another couple of stuff I can</font>

851
00:44:26,750 --> 00:44:42,230
show you we have<font color="#E5E5E5"> the easy parent that</font>

852
00:44:30,140 --> 00:44:53,060
action so<font color="#E5E5E5"> parent okay okay and you can</font>

853
00:44:42,230 --> 00:45:01,010
just use the ante up flag to<font color="#CCCCCC"> to defeat</font>

854
00:44:53,060 --> 00:45:05,860
<font color="#CCCCCC">that what okay okay or another one that</font>

855
00:45:01,010 --> 00:45:14,840
is cool is the the one that is actually

856
00:45:05,860 --> 00:45:17,110
<font color="#CCCCCC">booking stuff so is detect</font><font color="#E5E5E5"> ntdll</font>

857
00:45:14,840 --> 00:45:17,110
<font color="#E5E5E5">books</font>

858
00:45:19,970 --> 00:45:25,129
<font color="#CCCCCC">okay and you can</font><font color="#E5E5E5"> use the hunt every</font><font color="#CCCCCC"> day</font>

859
00:45:25,160 --> 00:45:35,160
<font color="#CCCCCC">just</font><font color="#E5E5E5"> read okay</font><font color="#CCCCCC"> mister so I</font><font color="#E5E5E5"> can spend all</font>

860
00:45:32,280 --> 00:45:40,230
day show you<font color="#E5E5E5"> this stuff that that's</font>

861
00:45:35,160 --> 00:45:46,259
<font color="#CCCCCC">almost it so</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so let's wrap up</font><font color="#E5E5E5"> the</font>

862
00:45:40,230 --> 00:45:48,660
talk so I show<font color="#CCCCCC"> you</font><font color="#E5E5E5"> that some anti</font>

863
00:45:46,260 --> 00:45:51,990
fermentation technique<font color="#CCCCCC"> I show you a</font>

864
00:45:48,660 --> 00:45:53,970
framework that we built to defeat those

865
00:45:51,990 --> 00:45:56,578
techniques selectively<font color="#E5E5E5"> you can enable</font>

866
00:45:53,970 --> 00:45:58,439
some part or<font color="#E5E5E5"> other and you can</font>

867
00:45:56,579 --> 00:46:02,190
eventually<font color="#E5E5E5"> use the framework to</font>

868
00:45:58,440 --> 00:46:08,280
implement some other page that<font color="#CCCCCC"> you</font><font color="#E5E5E5"> want</font>

869
00:46:02,190 --> 00:46:11,220
to add<font color="#E5E5E5"> for other reason and we show you</font>

870
00:46:08,280 --> 00:46:13,559
<font color="#E5E5E5">that there are actually malware that are</font>

871
00:46:11,220 --> 00:46:16,770
using<font color="#E5E5E5"> those kind of technique there</font>

872
00:46:13,559 --> 00:46:20,069
directly to<font color="#CCCCCC"> the fit pin or not and I</font>

873
00:46:16,770 --> 00:46:22,920
show<font color="#CCCCCC"> that we have a</font><font color="#E5E5E5"> tracker that is</font>

874
00:46:20,069 --> 00:46:27,930
actually a<font color="#E5E5E5"> evasion resilient</font><font color="#CCCCCC"> right now</font>

875
00:46:22,920 --> 00:46:31,500
so that's almost it for my talk you can

876
00:46:27,930 --> 00:46:33,270
find the the tool on github if you're

877
00:46:31,500 --> 00:46:36,930
gonna<font color="#E5E5E5"> there you can download it we also</font>

878
00:46:33,270 --> 00:46:41,009
<font color="#E5E5E5">have the some samples to</font><font color="#CCCCCC"> check the stuff</font>

879
00:46:36,930 --> 00:46:44,578
and right now if you have any question

880
00:46:41,010 --> 00:46:46,829
we can<font color="#E5E5E5"> chat about this stuff or if you</font>

881
00:46:44,579 --> 00:46:49,500
<font color="#CCCCCC">wanna so there is</font><font color="#E5E5E5"> someone with</font><font color="#CCCCCC"> the</font>

882
00:46:46,829 --> 00:46:52,349
microphone and<font color="#CCCCCC"> you can ask a question</font><font color="#E5E5E5"> on</font>

883
00:46:49,500 --> 00:46:54,710
<font color="#E5E5E5">the microphone or maybe we can talk</font>

884
00:46:52,349 --> 00:46:57,390
<font color="#CCCCCC">later I still</font><font color="#E5E5E5"> be around for a while</font>

885
00:46:54,710 --> 00:47:00,599
definitely wanna follow the<font color="#E5E5E5"> the</font>

886
00:46:57,390 --> 00:47:04,140
<font color="#E5E5E5">following</font><font color="#CCCCCC"> talk so okay</font><font color="#E5E5E5"> let's go</font><font color="#CCCCCC"> about</font>

887
00:47:00,599 --> 00:47:06,210
<font color="#E5E5E5">some some question okay guys what are</font>

888
00:47:04,140 --> 00:47:08,629
the<font color="#CCCCCC"> questions that</font><font color="#E5E5E5"> you will like to ask</font>

889
00:47:06,210 --> 00:47:08,630
<font color="#E5E5E5">Mario</font>

890
00:47:16,710 --> 00:47:25,560
<font color="#E5E5E5">okay there's a</font><font color="#CCCCCC"> question down</font><font color="#E5E5E5"> here it is</font>

891
00:47:25,590 --> 00:47:31,030
quick question on the way you were

892
00:47:28,360 --> 00:47:34,230
detecting<font color="#E5E5E5"> cheat emulation you said that</font>

893
00:47:31,030 --> 00:47:38,890
at<font color="#E5E5E5"> every step you are basically checking</font>

894
00:47:34,230 --> 00:47:40,630
what's that was the address if the

895
00:47:38,890 --> 00:47:44,109
address<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the one</font><font color="#E5E5E5"> of the binary yeah</font>

896
00:47:40,630 --> 00:47:46,900
yeah<font color="#CCCCCC"> so why didn't you</font><font color="#E5E5E5"> just map those</font>

897
00:47:44,110 --> 00:47:51,640
magic pages as read-only and then trap

898
00:47:46,900 --> 00:47:53,560
on executing<font color="#CCCCCC"> you're right those pages so</font>

899
00:47:51,640 --> 00:47:58,480
the pages<font color="#E5E5E5"> were you mapped your original</font>

900
00:47:53,560 --> 00:48:02,980
text file<font color="#CCCCCC"> so you're saying let</font><font color="#E5E5E5"> me go</font>

901
00:47:58,480 --> 00:48:07,180
back you are saying why we so the

902
00:48:02,980 --> 00:48:08,680
question<font color="#E5E5E5"> was about the defector in man</font>

903
00:48:07,180 --> 00:48:12,810
<font color="#CCCCCC">mod right</font>

904
00:48:08,680 --> 00:48:17,830
so why<font color="#E5E5E5"> we redirect the</font><font color="#CCCCCC"> raid</font><font color="#E5E5E5"> instead of</font>

905
00:48:12,810 --> 00:48:20,200
catching the<font color="#CCCCCC"> the readin and stopping</font><font color="#E5E5E5"> it</font>

906
00:48:17,830 --> 00:48:22,299
<font color="#CCCCCC">yes so you basically have</font><font color="#E5E5E5"> in one of</font><font color="#CCCCCC"> your</font>

907
00:48:20,200 --> 00:48:27,629
<font color="#E5E5E5">prevention techniques you basically have</font>

908
00:48:22,300 --> 00:48:30,790
after every<font color="#E5E5E5"> what is it read you have</font>

909
00:48:27,630 --> 00:48:32,230
where do I check<font color="#E5E5E5"> the PC check the PC</font>

910
00:48:30,790 --> 00:48:33,340
against the<font color="#CCCCCC"> day oh what's the stuff</font>

911
00:48:32,230 --> 00:48:36,850
modifying<font color="#E5E5E5"> call me maybe</font>

912
00:48:33,340 --> 00:48:40,450
<font color="#E5E5E5">yeah okay so your question is why we why</font>

913
00:48:36,850 --> 00:48:46,120
<font color="#CCCCCC">don't you just map the original DLL</font>

914
00:48:40,450 --> 00:48:48,970
pages as<font color="#E5E5E5"> read-only because this</font><font color="#CCCCCC"> of</font>

915
00:48:46,120 --> 00:48:54,339
modifying code was about the malware

916
00:48:48,970 --> 00:48:57,549
changing itself okay<font color="#E5E5E5"> so</font><font color="#CCCCCC"> it so you need</font>

917
00:48:54,340 --> 00:49:00,010
the right yes<font color="#CCCCCC"> it needs to be to</font><font color="#E5E5E5"> change</font>

918
00:48:57,550 --> 00:49:03,550
it itself to<font color="#E5E5E5"> actually works because</font><font color="#CCCCCC"> it's</font>

919
00:49:00,010 --> 00:49:07,180
not<font color="#E5E5E5"> fully thankful okay so it's changing</font>

920
00:49:03,550 --> 00:49:08,920
itself in a working version so at the

921
00:49:07,180 --> 00:49:11,560
<font color="#CCCCCC">beginning is not working because here it</font>

922
00:49:08,920 --> 00:49:14,920
has the wrong instruction so it is

923
00:49:11,560 --> 00:49:17,380
patching itself<font color="#E5E5E5"> so we we don't even know</font>

924
00:49:14,920 --> 00:49:20,200
how is going<font color="#E5E5E5"> to patch it before actually</font>

925
00:49:17,380 --> 00:49:23,230
before<font color="#E5E5E5"> the execution</font><font color="#CCCCCC"> so we not we cannot</font>

926
00:49:20,200 --> 00:49:25,870
like redirect the<font color="#CCCCCC"> read or</font><font color="#E5E5E5"> this kind of</font>

927
00:49:23,230 --> 00:49:26,330
<font color="#E5E5E5">stuff so we came up</font><font color="#CCCCCC"> with this social I</font>

928
00:49:25,870 --> 00:49:28,910
<font color="#E5E5E5">think</font>

929
00:49:26,330 --> 00:49:31,670
can be improved<font color="#CCCCCC"> I mean of course</font>

930
00:49:28,910 --> 00:49:38,480
checking<font color="#E5E5E5"> for</font><font color="#CCCCCC"> forever instruction we may</font>

931
00:49:31,670 --> 00:49:42,080
do<font color="#E5E5E5"> something like we reinstall ain't</font>

932
00:49:38,480 --> 00:49:44,180
only<font color="#CCCCCC"> on</font><font color="#E5E5E5"> on those on those memory</font>

933
00:49:42,080 --> 00:49:47,210
addresses that<font color="#E5E5E5"> are market inside our</font>

934
00:49:44,180 --> 00:49:50,569
list<font color="#CCCCCC"> something like</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> I think this</font>

935
00:49:47,210 --> 00:49:53,240
<font color="#E5E5E5">can be improved a bit but yeah the</font>

936
00:49:50,570 --> 00:49:57,320
reason<font color="#E5E5E5"> because</font><font color="#CCCCCC"> we are not mapping</font><font color="#E5E5E5"> we are</font>

937
00:49:53,240 --> 00:50:00,200
not<font color="#E5E5E5"> catching the not</font><font color="#CCCCCC"> back mapping with</font>

938
00:49:57,320 --> 00:50:03,530
<font color="#CCCCCC">only or whatever is true because we are</font>

939
00:50:00,200 --> 00:50:13,609
<font color="#E5E5E5">not controlling</font><font color="#CCCCCC"> the we don't know what</font>

940
00:50:03,530 --> 00:50:16,580
is<font color="#E5E5E5"> gonna</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> think I have but not</font>

941
00:50:13,610 --> 00:50:19,280
<font color="#E5E5E5">voice</font><font color="#CCCCCC"> but okay</font><font color="#E5E5E5"> so have you ever tried to</font>

942
00:50:16,580 --> 00:50:23,380
<font color="#CCCCCC">use the tool to defuse protection</font>

943
00:50:19,280 --> 00:50:26,390
<font color="#CCCCCC">impecca mechanism like the protect or</font>

944
00:50:23,380 --> 00:50:28,670
<font color="#CCCCCC">the unprotect or for example the media</font>

945
00:50:26,390 --> 00:50:31,520
supply<font color="#E5E5E5"> that there are obviously the most</font>

946
00:50:28,670 --> 00:50:34,130
<font color="#E5E5E5">complicated - yes so I</font><font color="#CCCCCC"> think they</font>

947
00:50:31,520 --> 00:50:37,070
probably to me that was<font color="#E5E5E5"> that I wear I'm</font>

948
00:50:34,130 --> 00:50:40,100
packing tool is not able to<font color="#E5E5E5"> to unpack</font>

949
00:50:37,070 --> 00:50:41,840
<font color="#CCCCCC">tamina yeah I am a reverse I know quite</font>

950
00:50:40,100 --> 00:50:43,790
well<font color="#CCCCCC"> that is very difficult</font><font color="#E5E5E5"> to achieve</font>

951
00:50:41,840 --> 00:50:46,520
that so I'm really<font color="#CCCCCC"> interested in</font>

952
00:50:43,790 --> 00:50:50,000
<font color="#CCCCCC">understanding the porch the song so the</font>

953
00:50:46,520 --> 00:50:52,670
<font color="#E5E5E5">impact</font><font color="#CCCCCC"> is not</font><font color="#E5E5E5"> I'm doing</font><font color="#CCCCCC"> Tomita</font><font color="#E5E5E5"> and we</font>

954
00:50:50,000 --> 00:50:54,710
didn't try<font color="#E5E5E5"> to run it with</font><font color="#CCCCCC"> the ante</font>

955
00:50:52,670 --> 00:50:59,420
<font color="#E5E5E5">evasion</font><font color="#CCCCCC"> of stuff but</font><font color="#E5E5E5"> I actually</font><font color="#CCCCCC"> might</font>

956
00:50:54,710 --> 00:51:04,010
try to<font color="#E5E5E5"> do now that you you</font><font color="#CCCCCC"> said so to</font>

957
00:50:59,420 --> 00:51:07,400
answer your question<font color="#E5E5E5"> is the other thing</font>

958
00:51:04,010 --> 00:51:10,100
is about<font color="#E5E5E5"> the set of</font><font color="#CCCCCC"> samples that you</font>

959
00:51:07,400 --> 00:51:13,430
<font color="#E5E5E5">have</font><font color="#CCCCCC"> collected from</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> solo</font><font color="#E5E5E5"> I normally</font>

960
00:51:10,100 --> 00:51:16,370
am facing malware<font color="#E5E5E5"> that is very low in</font>

961
00:51:13,430 --> 00:51:18,049
terms<font color="#E5E5E5"> of ratio from</font><font color="#CCCCCC"> virus total IMAP</font>

962
00:51:16,370 --> 00:51:20,660
about one or two<font color="#E5E5E5"> just</font><font color="#CCCCCC"> because the</font>

963
00:51:18,050 --> 00:51:22,700
antivirus definitely not enough<font color="#E5E5E5"> to be</font>

964
00:51:20,660 --> 00:51:26,120
able<font color="#E5E5E5"> to catch that stuff so what I'm</font>

965
00:51:22,700 --> 00:51:28,879
asking<font color="#CCCCCC"> is if you have a try to analyze</font>

966
00:51:26,120 --> 00:51:31,310
with this show<font color="#E5E5E5"> malware that even</font>

967
00:51:28,880 --> 00:51:33,410
<font color="#E5E5E5">available from virus</font><font color="#CCCCCC"> Ola</font><font color="#E5E5E5"> have low ratio</font>

968
00:51:31,310 --> 00:51:35,450
<font color="#E5E5E5">but definitely is malicious because it's</font>

969
00:51:33,410 --> 00:51:39,609
reported by I<font color="#E5E5E5"> don't know apt groups and</font>

970
00:51:35,450 --> 00:51:42,310
study<font color="#CCCCCC"> about upon up empty groups</font>

971
00:51:39,610 --> 00:51:44,710
the of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> stopped we analyzed were</font>

972
00:51:42,310 --> 00:51:48,190
actually<font color="#CCCCCC"> at low ratio so our limit was</font>

973
00:51:44,710 --> 00:51:51,790
at least<font color="#CCCCCC"> three antiviruses so that we</font>

974
00:51:48,190 --> 00:51:53,530
know it's<font color="#E5E5E5"> malicious</font><font color="#CCCCCC"> so I don't have</font>

975
00:51:51,790 --> 00:51:55,630
numbers<font color="#E5E5E5"> on that I I didn't check if</font>

976
00:51:53,530 --> 00:51:57,730
which one it was<font color="#CCCCCC"> low right if I'd</font>

977
00:51:55,630 --> 00:52:01,540
<font color="#E5E5E5">motivation but this is actually</font><font color="#CCCCCC"> another</font>

978
00:51:57,730 --> 00:52:04,990
interesting<font color="#E5E5E5"> number to actually happen</font>

979
00:52:01,540 --> 00:52:08,020
<font color="#CCCCCC">and so uh</font><font color="#E5E5E5"> so we add for sure run it on</font>

980
00:52:04,990 --> 00:52:08,680
on low ratio but the power<font color="#E5E5E5"> but I don't</font>

981
00:52:08,020 --> 00:52:17,680
know the number

982
00:52:08,680 --> 00:52:19,330
<font color="#E5E5E5">okay thank you emerging next question</font><font color="#CCCCCC"> do</font>

983
00:52:17,680 --> 00:52:21,549
you<font color="#E5E5E5"> think you can extend this</font><font color="#CCCCCC"> to other</font>

984
00:52:19,330 --> 00:52:24,220
dynamic binary instrumentation<font color="#E5E5E5"> tools</font>

985
00:52:21,550 --> 00:52:31,360
like create a library<font color="#E5E5E5"> or</font><font color="#CCCCCC"> something that</font>

986
00:52:24,220 --> 00:52:33,430
can<font color="#E5E5E5"> be added so okay</font><font color="#CCCCCC"> so more</font><font color="#E5E5E5"> than other</font>

987
00:52:31,360 --> 00:52:36,520
dynamic balance<font color="#E5E5E5"> transition tool was what</font>

988
00:52:33,430 --> 00:52:40,810
I was thinking<font color="#E5E5E5"> about is to extend to</font>

989
00:52:36,520 --> 00:52:44,920
other other<font color="#E5E5E5"> nations other detection</font>

990
00:52:40,810 --> 00:52:49,170
mechanism like<font color="#CCCCCC"> VM detection so I may use</font>

991
00:52:44,920 --> 00:52:52,030
pin okay right now<font color="#E5E5E5"> I'm using pin to</font>

992
00:52:49,170 --> 00:52:54,340
avoid pin detection because pin is

993
00:52:52,030 --> 00:52:56,710
powerful enough<font color="#CCCCCC"> but</font><font color="#E5E5E5"> I mean you</font><font color="#CCCCCC"> so soap</font>

994
00:52:54,340 --> 00:52:59,740
into<font color="#E5E5E5"> about</font><font color="#CCCCCC"> VM detection or to avoid</font>

995
00:52:56,710 --> 00:53:02,140
another emulator<font color="#E5E5E5"> of detection yeah I'm</font>

996
00:52:59,740 --> 00:53:06,189
<font color="#E5E5E5">okay that but there are companies and</font>

997
00:53:02,140 --> 00:53:09,370
people<font color="#E5E5E5"> that use different custom dynamic</font>

998
00:53:06,190 --> 00:53:11,500
binary structures and I see this as a

999
00:53:09,370 --> 00:53:17,410
useful<font color="#CCCCCC"> thing like a</font><font color="#E5E5E5"> library that can be</font>

1000
00:53:11,500 --> 00:53:18,790
easily added<font color="#E5E5E5"> in their systems so</font><font color="#CCCCCC"> the</font>

1001
00:53:17,410 --> 00:53:22,930
problem with<font color="#CCCCCC"> that is that I</font><font color="#E5E5E5"> don't</font><font color="#CCCCCC"> have</font>

1002
00:53:18,790 --> 00:53:26,440
access<font color="#CCCCCC"> to</font><font color="#E5E5E5"> those tools</font><font color="#CCCCCC"> so it's kind of as</font>

1003
00:53:22,930 --> 00:53:30,520
<font color="#E5E5E5">you I should as I show</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> many of those</font>

1004
00:53:26,440 --> 00:53:33,130
techniques are can a<font color="#CCCCCC"> one-point of a</font><font color="#E5E5E5"> kind</font>

1005
00:53:30,520 --> 00:53:37,930
of specific<font color="#E5E5E5"> on pain okay so you need to</font>

1006
00:53:33,130 --> 00:53:42,850
know<font color="#E5E5E5"> how the the tool is working to</font>

1007
00:53:37,930 --> 00:53:44,830
<font color="#CCCCCC">creates or some</font><font color="#E5E5E5"> simulation but I mean</font>

1008
00:53:42,850 --> 00:53:47,529
the framework is already there<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be</font>

1009
00:53:44,830 --> 00:53:49,730
used in this way<font color="#E5E5E5"> okay it's open source</font>

1010
00:53:47,530 --> 00:53:53,200
<font color="#CCCCCC">oh yeah yeah it's on</font>

1011
00:53:49,730 --> 00:53:58,010
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> so let me</font><font color="#CCCCCC"> show you</font>

1012
00:53:53,200 --> 00:54:01,189
yes<font color="#E5E5E5"> you can search</font><font color="#CCCCCC"> aren t know on Google</font>

1013
00:53:58,010 --> 00:54:02,270
but I also<font color="#CCCCCC"> depart because</font><font color="#E5E5E5"> if</font><font color="#CCCCCC"> you just</font>

1014
00:54:01,190 --> 00:54:06,080
search challenge<font color="#CCCCCC"> II know you get the</font>

1015
00:54:02,270 --> 00:54:07,160
<font color="#E5E5E5">Italian food</font><font color="#CCCCCC"> ok so if you go on github</font>

1016
00:54:06,080 --> 00:54:07,940
and search for aren't you know you

1017
00:54:07,160 --> 00:54:14,569
you're<font color="#E5E5E5"> fine</font>

1018
00:54:07,940 --> 00:54:17,930
I have the link at the<font color="#CCCCCC"> end sorry I'm not</font>

1019
00:54:14,570 --> 00:54:19,850
this question<font color="#CCCCCC"> um what if your tool your</font>

1020
00:54:17,930 --> 00:54:22,149
dynamic binary instrumentation tool uses

1021
00:54:19,850 --> 00:54:27,290
those functions<font color="#E5E5E5"> that you actually patch</font>

1022
00:54:22,150 --> 00:54:32,500
like empty<font color="#CCCCCC"> virtual whatever that read</font>

1023
00:54:27,290 --> 00:54:37,279
the<font color="#E5E5E5"> memory and so you're asking if</font><font color="#CCCCCC"> they</font>

1024
00:54:32,500 --> 00:54:38,600
DLL<font color="#CCCCCC"> the ntdll functions if them</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> were</font>

1025
00:54:37,280 --> 00:54:41,120
<font color="#E5E5E5">try talks that stuff</font>

1026
00:54:38,600 --> 00:54:43,130
no<font color="#E5E5E5"> no if if your dynamic binary</font>

1027
00:54:41,120 --> 00:54:48,080
instrumentation tool actually uses those

1028
00:54:43,130 --> 00:54:50,150
so is using<font color="#CCCCCC"> some of them so we don't</font>

1029
00:54:48,080 --> 00:54:55,360
<font color="#E5E5E5">change the yoke of</font><font color="#CCCCCC"> the binary</font><font color="#E5E5E5"> we just</font>

1030
00:54:50,150 --> 00:55:00,800
add<font color="#CCCCCC"> it with the fake memory read</font><font color="#E5E5E5"> okay</font>

1031
00:54:55,360 --> 00:55:03,370
<font color="#E5E5E5">okay so there are another question</font><font color="#CCCCCC"> I</font>

1032
00:55:00,800 --> 00:55:06,370
thank you all for<font color="#CCCCCC"> coming to my talk and</font>

1033
00:55:03,370 --> 00:55:06,370
see

