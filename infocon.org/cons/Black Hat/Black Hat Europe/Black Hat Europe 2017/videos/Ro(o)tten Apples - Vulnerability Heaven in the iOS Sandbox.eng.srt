1
00:00:00,030 --> 00:00:06,629
okay so everyone good noon<font color="#E5E5E5"> thank you for</font>

2
00:00:04,170 --> 00:00:08,400
coming<font color="#CCCCCC"> to for</font><font color="#E5E5E5"> tonight presentation</font><font color="#CCCCCC"> today</font>

3
00:00:06,629 --> 00:00:12,210
<font color="#CCCCCC">I'm going</font><font color="#E5E5E5"> to present</font><font color="#CCCCCC"> you a research that</font>

4
00:00:08,400 --> 00:00:15,680
I've done on an iOS kernel module<font color="#E5E5E5"> and</font>

5
00:00:12,210 --> 00:00:18,180
<font color="#E5E5E5">ice driver called</font><font color="#CCCCCC"> Ethel</font><font color="#E5E5E5"> a ve driver and</font>

6
00:00:15,680 --> 00:00:22,740
so the agenda<font color="#CCCCCC"> the main agenda for today</font>

7
00:00:18,180 --> 00:00:26,250
<font color="#E5E5E5">first we will review</font><font color="#CCCCCC"> some of the core</font>

8
00:00:22,740 --> 00:00:29,669
attack vectors<font color="#CCCCCC"> on iOS and some of the</font>

9
00:00:26,250 --> 00:00:32,149
actually also<font color="#E5E5E5"> related to Mac OS second</font>

10
00:00:29,670 --> 00:00:34,320
for a second<font color="#E5E5E5"> I will present the</font>

11
00:00:32,149 --> 00:00:37,290
vulnerabilities that I found some of

12
00:00:34,320 --> 00:00:38,879
<font color="#E5E5E5">them and then we'll get</font><font color="#CCCCCC"> to the</font>

13
00:00:37,290 --> 00:00:40,860
exploitation<font color="#E5E5E5"> part of how to actually</font>

14
00:00:38,879 --> 00:00:44,519
<font color="#E5E5E5">take those from abilities and take them</font>

15
00:00:40,860 --> 00:00:47,219
<font color="#CCCCCC">into a fully working exploit</font><font color="#E5E5E5"> and then</font>

16
00:00:44,520 --> 00:00:51,710
fewer to<font color="#E5E5E5"> bore jailbreak and small</font>

17
00:00:47,219 --> 00:00:55,079
surprise and finally QA QA and

18
00:00:51,710 --> 00:00:57,780
disclosure timeline<font color="#E5E5E5"> so a little</font><font color="#CCCCCC"> bit</font>

19
00:00:55,079 --> 00:01:01,160
about myself<font color="#E5E5E5"> my</font><font color="#CCCCCC"> name is</font><font color="#E5E5E5"> Adam donenfeld</font>

20
00:00:57,780 --> 00:01:03,110
<font color="#CCCCCC">I'm</font><font color="#E5E5E5"> a security researcher work mainly on</font>

21
00:01:01,160 --> 00:01:07,140
iOS and Android

22
00:01:03,110 --> 00:01:09,869
<font color="#CCCCCC">I I do over mobility assessment and</font>

23
00:01:07,140 --> 00:01:13,200
exploitation<font color="#E5E5E5"> so more the offensive part</font>

24
00:01:09,869 --> 00:01:17,070
and currently I work as a senior

25
00:01:13,200 --> 00:01:19,710
<font color="#CCCCCC">security researcher for</font><font color="#E5E5E5"> as imperium and</font>

26
00:01:17,070 --> 00:01:23,250
additionally<font color="#E5E5E5"> additionally I would like</font>

27
00:01:19,710 --> 00:01:25,250
to thank<font color="#CCCCCC"> sook of</font><font color="#E5E5E5"> RAM and Univ Carter for</font>

28
00:01:23,250 --> 00:01:27,869
helping me with<font color="#E5E5E5"> the presentation and</font>

29
00:01:25,250 --> 00:01:32,250
supporting me during the times of

30
00:01:27,869 --> 00:01:33,869
frustration<font color="#E5E5E5"> so let's start</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> will start</font>

31
00:01:32,250 --> 00:01:38,850
like I said with the review<font color="#CCCCCC"> of the</font>

32
00:01:33,869 --> 00:01:42,140
attack surfaces so in iOS and also<font color="#CCCCCC"> on</font>

33
00:01:38,850 --> 00:01:45,890
<font color="#E5E5E5">Mac OS there are a lot of attack surface</font>

34
00:01:42,140 --> 00:01:49,380
we can categorize them<font color="#E5E5E5"> into different</font>

35
00:01:45,890 --> 00:01:55,020
sections<font color="#E5E5E5"> let's call it this way mainly</font>

36
00:01:49,380 --> 00:01:59,699
<font color="#CCCCCC">cisco</font><font color="#E5E5E5"> sitting calls now on iOS</font><font color="#CCCCCC"> on new we</font>

37
00:01:55,020 --> 00:02:01,770
have<font color="#CCCCCC"> Maxis calls and</font><font color="#E5E5E5"> FreeBSD syscalls we</font>

38
00:01:59,700 --> 00:02:04,550
also have a<font color="#E5E5E5"> MIG which is an</font>

39
00:02:01,770 --> 00:02:07,890
auto-generated

40
00:02:04,550 --> 00:02:11,100
messages interface<font color="#E5E5E5"> so you</font><font color="#CCCCCC"> can just put</font>

41
00:02:07,890 --> 00:02:14,640
<font color="#CCCCCC">it's like it works like an idea</font><font color="#E5E5E5"> you you</font>

42
00:02:11,100 --> 00:02:16,710
write<font color="#E5E5E5"> an idea ideal and templates</font>

43
00:02:14,640 --> 00:02:19,769
templates and then some code is

44
00:02:16,710 --> 00:02:23,070
<font color="#CCCCCC">auto-generated and finally we have iokit</font>

45
00:02:19,770 --> 00:02:26,970
<font color="#E5E5E5">and by the way</font><font color="#CCCCCC"> I okay</font><font color="#E5E5E5"> it is profoundly</font>

46
00:02:23,070 --> 00:02:29,100
based on me<font color="#CCCCCC"> so to actually issue IO kit</font>

47
00:02:26,970 --> 00:02:33,810
<font color="#E5E5E5">cause eventually everything is</font>

48
00:02:29,100 --> 00:02:38,130
everything goes through<font color="#E5E5E5"> a nigga but I</font>

49
00:02:33,810 --> 00:02:41,240
get is a huge platform<font color="#E5E5E5"> and even though</font>

50
00:02:38,130 --> 00:02:45,240
everything is that is going<font color="#CCCCCC"> over</font><font color="#E5E5E5"> big it</font>

51
00:02:41,240 --> 00:02:48,480
deserves its own bullet here as in an

52
00:02:45,240 --> 00:02:53,670
independent<font color="#E5E5E5"> category so</font><font color="#CCCCCC"> sixty seconds</font>

53
00:02:48,480 --> 00:02:57,440
about our<font color="#E5E5E5"> kit so I</font><font color="#CCCCCC"> hope it is apples</font>

54
00:02:53,670 --> 00:03:00,809
<font color="#E5E5E5">apples collections of resources tools</font>

55
00:02:57,440 --> 00:03:06,030
frameworks and everything for creating

56
00:03:00,810 --> 00:03:08,970
<font color="#E5E5E5">Bibles</font><font color="#CCCCCC"> falls new and unlike let's say</font>

57
00:03:06,030 --> 00:03:11,940
unlike Linux driver for example<font color="#E5E5E5"> those</font>

58
00:03:08,970 --> 00:03:14,520
drivers are actually<font color="#E5E5E5"> written in C++ it</font>

59
00:03:11,940 --> 00:03:17,190
is done because<font color="#E5E5E5"> they do have some macros</font>

60
00:03:14,520 --> 00:03:19,890
which gives you<font color="#CCCCCC"> some basic reflection</font>

61
00:03:17,190 --> 00:03:22,980
capabilities now it's super cool<font color="#E5E5E5"> in my</font>

62
00:03:19,890 --> 00:03:27,809
<font color="#E5E5E5">opinion</font><font color="#CCCCCC"> for divers</font><font color="#E5E5E5"> and additionally</font><font color="#CCCCCC"> you</font>

63
00:03:22,980 --> 00:03:30,570
<font color="#CCCCCC">have some</font><font color="#E5E5E5"> layers some isolation between</font>

64
00:03:27,810 --> 00:03:32,700
an actual driver and the communication

65
00:03:30,570 --> 00:03:36,859
channel of the user mode and<font color="#E5E5E5"> the driver</font>

66
00:03:32,700 --> 00:03:39,470
<font color="#E5E5E5">again</font><font color="#CCCCCC"> if we compared to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> normal</font><font color="#E5E5E5"> Linux</font>

67
00:03:36,860 --> 00:03:42,690
drivers of Windows rivals

68
00:03:39,470 --> 00:03:46,530
additionally<font color="#E5E5E5"> Apple gave a huge amount of</font>

69
00:03:42,690 --> 00:03:49,680
<font color="#E5E5E5">pre built-in types you have pre-built</font>

70
00:03:46,530 --> 00:03:52,980
dictionaries arrays integer strings

71
00:03:49,680 --> 00:03:57,540
<font color="#CCCCCC">whether</font><font color="#E5E5E5"> that's you have those types from</font>

72
00:03:52,980 --> 00:04:00,480
<font color="#E5E5E5">Apple and finally I think this is the</font>

73
00:03:57,540 --> 00:04:03,299
best<font color="#E5E5E5"> gift Apple could give</font><font color="#CCCCCC"> to offensive</font>

74
00:04:00,480 --> 00:04:06,179
researchers<font color="#E5E5E5"> because it's an amazing</font>

75
00:04:03,300 --> 00:04:10,580
platform for<font color="#E5E5E5"> exploitation of this new</font>

76
00:04:06,180 --> 00:04:13,980
kernel<font color="#E5E5E5"> now I want to review</font><font color="#CCCCCC"> some of the</font>

77
00:04:10,580 --> 00:04:16,169
projects that have<font color="#CCCCCC"> added dependent on</font><font color="#E5E5E5"> IO</font>

78
00:04:13,980 --> 00:04:20,069
kids<font color="#E5E5E5"> so you can see</font>

79
00:04:16,168 --> 00:04:23,128
that's<font color="#CCCCCC"> a list of recent jail breaks that</font>

80
00:04:20,069 --> 00:04:25,289
were based on<font color="#CCCCCC"> IO</font><font color="#E5E5E5"> kids own abilities it's</font>

81
00:04:23,129 --> 00:04:26,789
not the fullest<font color="#CCCCCC"> the only reason I</font>

82
00:04:25,289 --> 00:04:28,949
actually didn't try to move them is

83
00:04:26,789 --> 00:04:32,279
<font color="#E5E5E5">because I didn't have room in the on the</font>

84
00:04:28,949 --> 00:04:36,810
slide<font color="#E5E5E5"> but there are more jail breaks and</font>

85
00:04:32,279 --> 00:04:39,029
projects<font color="#E5E5E5"> and obviously probably you know</font>

86
00:04:36,810 --> 00:04:42,419
more<font color="#CCCCCC"> texts that</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> no</font><font color="#E5E5E5"> jail breaks which</font>

87
00:04:39,029 --> 00:04:46,409
depend<font color="#E5E5E5"> on iokit now the question that's</font>

88
00:04:42,419 --> 00:04:48,270
probably<font color="#E5E5E5"> most of us asked is why hackers</font>

89
00:04:46,409 --> 00:04:51,840
love I get so much what makes<font color="#CCCCCC"> Eric it's</font>

90
00:04:48,270 --> 00:04:53,810
such a good<font color="#E5E5E5"> platform for attacking so</font>

91
00:04:51,840 --> 00:04:56,039
first of all there<font color="#CCCCCC"> are a lot of drivers</font>

92
00:04:53,810 --> 00:05:02,159
which definitely increase the attack

93
00:04:56,039 --> 00:05:03,659
surface now<font color="#E5E5E5"> there's no I mean we don't</font>

94
00:05:02,159 --> 00:05:06,389
<font color="#CCCCCC">really</font><font color="#E5E5E5"> know that for</font><font color="#CCCCCC"> a hundred percent</font>

95
00:05:03,659 --> 00:05:08,969
<font color="#E5E5E5">but I believe there is</font><font color="#CCCCCC"> a there is</font><font color="#E5E5E5"> a disk</font>

96
00:05:06,389 --> 00:05:11,250
the people<font color="#E5E5E5"> who</font><font color="#CCCCCC"> work on</font><font color="#E5E5E5"> our kids don't</font>

97
00:05:08,969 --> 00:05:13,229
really<font color="#E5E5E5"> work on</font><font color="#CCCCCC"> is new and that's why</font>

98
00:05:11,250 --> 00:05:18,710
there<font color="#E5E5E5"> are some miscommunications between</font>

99
00:05:13,229 --> 00:05:22,139
those two groups<font color="#E5E5E5"> which leads to bugs I</font>

100
00:05:18,710 --> 00:05:25,888
hope it is like I<font color="#E5E5E5"> said out it is written</font>

101
00:05:22,139 --> 00:05:27,839
in C++<font color="#CCCCCC"> and</font><font color="#E5E5E5"> which means there it does</font>

102
00:05:25,889 --> 00:05:30,539
have actually objects<font color="#E5E5E5"> so for example</font><font color="#CCCCCC"> you</font>

103
00:05:27,839 --> 00:05:32,669
<font color="#CCCCCC">have V tables now</font><font color="#E5E5E5"> if you can overwrite</font>

104
00:05:30,539 --> 00:05:34,529
<font color="#E5E5E5">something and you can override a veto a</font>

105
00:05:32,669 --> 00:05:36,599
bill you can override function pointers

106
00:05:34,529 --> 00:05:38,789
and you can hijack the kernel very

107
00:05:36,599 --> 00:05:42,360
easily which<font color="#E5E5E5"> is by the way</font><font color="#CCCCCC"> something</font>

108
00:05:38,789 --> 00:05:45,240
that<font color="#E5E5E5"> you can also also do to bypass the</font>

109
00:05:42,360 --> 00:05:48,779
new<font color="#CCCCCC"> kpp and</font><font color="#E5E5E5"> MTC mitigations because</font>

110
00:05:45,240 --> 00:05:51,149
those are<font color="#E5E5E5"> not protected finally because</font>

111
00:05:48,779 --> 00:05:55,770
most of the IOT drivers are not

112
00:05:51,149 --> 00:05:58,469
<font color="#CCCCCC">open-source</font><font color="#E5E5E5"> less people look</font><font color="#CCCCCC"> audit that</font>

113
00:05:55,770 --> 00:06:02,219
code<font color="#CCCCCC"> I think it's a mistake and I</font><font color="#E5E5E5"> think</font>

114
00:05:58,469 --> 00:06:05,430
our kids<font color="#CCCCCC"> is our</font><font color="#E5E5E5"> kids</font><font color="#CCCCCC"> Intel in term of</font>

115
00:06:02,219 --> 00:06:07,169
<font color="#CCCCCC">Security's</font><font color="#E5E5E5"> underrated undermined</font><font color="#CCCCCC"> I mean</font>

116
00:06:05,430 --> 00:06:09,839
<font color="#CCCCCC">is new</font><font color="#E5E5E5"> is a little bit more protected in</font>

117
00:06:07,169 --> 00:06:12,210
my opinion again<font color="#CCCCCC"> just my personal</font>

118
00:06:09,839 --> 00:06:13,919
experience<font color="#E5E5E5"> so how do we actually use</font>

119
00:06:12,210 --> 00:06:16,859
<font color="#E5E5E5">iokit how do we actually communicate</font>

120
00:06:13,919 --> 00:06:19,318
<font color="#E5E5E5">with</font><font color="#CCCCCC"> titles so the first thing we do and</font>

121
00:06:16,860 --> 00:06:22,830
I<font color="#CCCCCC"> just wrote a basic snippets here</font><font color="#E5E5E5"> to</font>

122
00:06:19,319 --> 00:06:25,319
get the get a handle to a driver<font color="#E5E5E5"> so this</font>

123
00:06:22,830 --> 00:06:27,089
function gets it gives out a<font color="#E5E5E5"> connection</font>

124
00:06:25,319 --> 00:06:29,610
to a driver which is<font color="#E5E5E5"> by the way just a</font>

125
00:06:27,089 --> 00:06:32,129
<font color="#E5E5E5">port and it's a</font>

126
00:06:29,610 --> 00:06:35,129
it gets a name of a driver that<font color="#CCCCCC"> it has</font>

127
00:06:32,129 --> 00:06:37,830
to<font color="#E5E5E5"> look for so the first thing we do we</font>

128
00:06:35,129 --> 00:06:43,759
call<font color="#CCCCCC"> that we gets the i/o master</font><font color="#E5E5E5"> pot but</font>

129
00:06:37,830 --> 00:06:46,979
this is like I<font color="#CCCCCC"> said I hope</font><font color="#E5E5E5"> it is</font><font color="#CCCCCC"> fun</font>

130
00:06:43,759 --> 00:06:48,960
<font color="#E5E5E5">essentially based on me</font><font color="#CCCCCC"> so this is a MIG</font>

131
00:06:46,979 --> 00:06:52,258
<font color="#CCCCCC">Pole which gives us</font><font color="#E5E5E5"> that being master</font>

132
00:06:48,960 --> 00:06:54,568
port<font color="#E5E5E5"> the master</font><font color="#CCCCCC"> port is used to it to</font>

133
00:06:52,259 --> 00:06:57,030
get<font color="#E5E5E5"> a list of drivers so here we say</font>

134
00:06:54,569 --> 00:06:59,969
yeah give me<font color="#E5E5E5"> all the drivers</font><font color="#CCCCCC"> which are</font>

135
00:06:57,030 --> 00:07:03,508
based on<font color="#CCCCCC"> IO service which is all the</font>

136
00:06:59,969 --> 00:07:05,430
<font color="#CCCCCC">drivers</font><font color="#E5E5E5"> as we will see soon we get an</font>

137
00:07:03,509 --> 00:07:07,529
iterator back and then we<font color="#E5E5E5"> can iterate</font>

138
00:07:05,430 --> 00:07:10,740
<font color="#E5E5E5">all the drivers</font><font color="#CCCCCC"> we get the name</font><font color="#E5E5E5"> of the</font>

139
00:07:07,529 --> 00:07:12,509
driver<font color="#CCCCCC"> we check</font><font color="#E5E5E5"> the name that we are</font>

140
00:07:10,740 --> 00:07:14,669
currently<font color="#E5E5E5"> running on and if that's the</font>

141
00:07:12,509 --> 00:07:18,029
name<font color="#E5E5E5"> once we just call I will service</font>

142
00:07:14,669 --> 00:07:20,938
<font color="#E5E5E5">open another API that uses me to get a</font>

143
00:07:18,029 --> 00:07:23,759
<font color="#E5E5E5">connection to the driver so you can see</font>

144
00:07:20,939 --> 00:07:26,819
master<font color="#CCCCCC"> ports gives us an iterator</font><font color="#E5E5E5"> which</font>

145
00:07:23,759 --> 00:07:28,620
gives us a service like we<font color="#E5E5E5"> can iterate</font>

146
00:07:26,819 --> 00:07:33,270
the service and the service is

147
00:07:28,620 --> 00:07:36,960
eventually<font color="#E5E5E5"> deport so how do how do we</font>

148
00:07:33,270 --> 00:07:39,870
<font color="#E5E5E5">actually write</font><font color="#CCCCCC"> diverse for iOS</font><font color="#E5E5E5"> oh no</font>

149
00:07:36,960 --> 00:07:42,448
it's actually<font color="#E5E5E5"> not really documented and</font>

150
00:07:39,870 --> 00:07:44,370
I personally understood how to do<font color="#CCCCCC"> that</font>

151
00:07:42,449 --> 00:07:47,639
<font color="#E5E5E5">just from reverse engineering drivers</font>

152
00:07:44,370 --> 00:07:50,610
<font color="#E5E5E5">this</font><font color="#CCCCCC"> cannot function it so those levels</font>

153
00:07:47,639 --> 00:07:52,800
have an external methods if you're

154
00:07:50,610 --> 00:07:58,289
familiar<font color="#E5E5E5"> with Linux it kind of reminds</font>

155
00:07:52,800 --> 00:08:00,779
<font color="#CCCCCC">il CDL drivers</font><font color="#E5E5E5"> of there's like mmm</font>

156
00:07:58,289 --> 00:08:02,669
<font color="#E5E5E5">drivers overrides the external method</font>

157
00:08:00,779 --> 00:08:04,199
function which is called<font color="#CCCCCC"> every time the</font>

158
00:08:02,669 --> 00:08:08,969
<font color="#E5E5E5">user wants</font><font color="#CCCCCC"> to communicate</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> the</font>

159
00:08:04,199 --> 00:08:11,159
driver<font color="#E5E5E5"> the</font><font color="#CCCCCC"> users issue those</font><font color="#E5E5E5"> the issue</font>

160
00:08:08,969 --> 00:08:13,110
those comments<font color="#CCCCCC"> using an API called</font><font color="#E5E5E5"> IO</font>

161
00:08:11,159 --> 00:08:15,839
<font color="#CCCCCC">connect call method</font><font color="#E5E5E5"> we'll see an example</font>

162
00:08:13,110 --> 00:08:18,900
<font color="#E5E5E5">soon so like I said the drivers must</font>

163
00:08:15,839 --> 00:08:21,930
override the external<font color="#CCCCCC"> method and because</font>

164
00:08:18,900 --> 00:08:23,638
everything<font color="#E5E5E5"> is based on me everything is</font>

165
00:08:21,930 --> 00:08:26,310
based on messages because<font color="#E5E5E5"> maybe it's</font>

166
00:08:23,639 --> 00:08:28,139
just a messages so again I'll connect

167
00:08:26,310 --> 00:08:31,889
call method<font color="#E5E5E5"> ultimately calls</font><font color="#CCCCCC"> mash</font>

168
00:08:28,139 --> 00:08:34,229
message<font color="#E5E5E5"> will see example</font><font color="#CCCCCC"> soon</font><font color="#E5E5E5"> flow so</font>

169
00:08:31,889 --> 00:08:35,849
that's the<font color="#E5E5E5"> signature of the of the</font>

170
00:08:34,229 --> 00:08:39,240
external method functions that drivers

171
00:08:35,849 --> 00:08:41,150
<font color="#CCCCCC">have to</font><font color="#E5E5E5"> override and what the user gives</font>

172
00:08:39,240 --> 00:08:43,909
<font color="#E5E5E5">is an index</font>

173
00:08:41,150 --> 00:08:46,880
that's the selector<font color="#CCCCCC"> so that's just an</font>

174
00:08:43,909 --> 00:08:50,030
index<font color="#CCCCCC"> to recommend let's color this way</font>

175
00:08:46,880 --> 00:08:52,250
<font color="#E5E5E5">it also gets arguments which is a struct</font>

176
00:08:50,030 --> 00:08:55,510
<font color="#E5E5E5">that contains the input buffers and the</font>

177
00:08:52,250 --> 00:08:59,870
<font color="#CCCCCC">output buffers from</font><font color="#E5E5E5"> ends to the user</font>

178
00:08:55,510 --> 00:09:02,510
this patch is<font color="#E5E5E5"> the pointer</font><font color="#CCCCCC"> that dispatch</font>

179
00:08:59,870 --> 00:09:04,550
<font color="#CCCCCC">is the block</font><font color="#E5E5E5"> of is the function the</font>

180
00:09:02,510 --> 00:09:06,080
script<font color="#E5E5E5"> oh let's call this way the file</font>

181
00:09:04,550 --> 00:09:08,329
the function the script<font color="#E5E5E5"> oh that will</font>

182
00:09:06,080 --> 00:09:11,000
eventually<font color="#E5E5E5"> be called target is the</font>

183
00:09:08,330 --> 00:09:14,360
actual driver and reference is something

184
00:09:11,000 --> 00:09:16,310
that I actually never saw you know<font color="#CCCCCC"> I</font>

185
00:09:14,360 --> 00:09:21,830
never<font color="#E5E5E5"> seen any driver using it actually</font>

186
00:09:16,310 --> 00:09:23,560
so that's an example<font color="#E5E5E5"> of the the override</font>

187
00:09:21,830 --> 00:09:26,090
<font color="#CCCCCC">of that function so like I</font><font color="#E5E5E5"> said before</font>

188
00:09:23,560 --> 00:09:28,640
the selector<font color="#E5E5E5"> is something the user</font>

189
00:09:26,090 --> 00:09:30,770
supplies<font color="#E5E5E5"> so obviously because it is</font>

190
00:09:28,640 --> 00:09:33,890
completely<font color="#E5E5E5"> controlled by the user you</font>

191
00:09:30,770 --> 00:09:36,170
have to check that<font color="#CCCCCC"> this is the actual</font>

192
00:09:33,890 --> 00:09:40,460
method<font color="#E5E5E5"> account that it doesn't go beyond</font>

193
00:09:36,170 --> 00:09:42,760
that<font color="#CCCCCC"> account</font><font color="#E5E5E5"> then the driver takes the</font>

194
00:09:40,460 --> 00:09:45,260
appropriate<font color="#E5E5E5"> function block this is the</font>

195
00:09:42,760 --> 00:09:47,930
external on method dispatch it takes the

196
00:09:45,260 --> 00:09:49,939
<font color="#E5E5E5">function block like the function script</font>

197
00:09:47,930 --> 00:09:52,790
<font color="#E5E5E5">oh it takes it it puts it into the</font>

198
00:09:49,940 --> 00:09:54,530
dispatch target is the driver<font color="#E5E5E5"> itself</font>

199
00:09:52,790 --> 00:09:56,329
because like I<font color="#CCCCCC"> said in the beginning</font>

200
00:09:54,530 --> 00:09:58,760
<font color="#CCCCCC">there is an</font><font color="#E5E5E5"> isolation between the</font>

201
00:09:56,330 --> 00:10:01,880
connection of the<font color="#CCCCCC"> communication of</font><font color="#E5E5E5"> the</font>

202
00:09:58,760 --> 00:10:05,000
user and<font color="#E5E5E5"> the driver</font><font color="#CCCCCC"> so that's the driver</font>

203
00:10:01,880 --> 00:10:08,060
<font color="#E5E5E5">and this is the communication</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> I said</font>

204
00:10:05,000 --> 00:10:12,500
the ref is<font color="#E5E5E5"> never used and then the the</font>

205
00:10:08,060 --> 00:10:14,359
super implementation of Excel a method

206
00:10:12,500 --> 00:10:17,870
is being called<font color="#E5E5E5"> there are</font><font color="#CCCCCC"> you user</font>

207
00:10:14,360 --> 00:10:20,720
<font color="#CCCCCC">client implementation</font><font color="#E5E5E5"> and this is just</font>

208
00:10:17,870 --> 00:10:23,090
checks that the user buffers<font color="#E5E5E5"> in the say</font>

209
00:10:20,720 --> 00:10:24,830
in the appropriate size with the

210
00:10:23,090 --> 00:10:26,750
function block and that's<font color="#E5E5E5"> actually what</font>

211
00:10:24,830 --> 00:10:28,790
that's ultimately<font color="#CCCCCC"> called for the</font>

212
00:10:26,750 --> 00:10:31,280
<font color="#E5E5E5">function it's not necessary</font><font color="#CCCCCC"> to call that</font>

213
00:10:28,790 --> 00:10:33,020
but that's what that's<font color="#E5E5E5"> the appropriate</font>

214
00:10:31,280 --> 00:10:35,480
way<font color="#CCCCCC"> to do it but you can do</font><font color="#E5E5E5"> it yourself</font>

215
00:10:33,020 --> 00:10:37,579
also<font color="#E5E5E5"> without calling this one so we saw</font>

216
00:10:35,480 --> 00:10:39,980
how the<font color="#CCCCCC"> drivers</font><font color="#E5E5E5"> implement its nuts</font>

217
00:10:37,580 --> 00:10:42,200
<font color="#E5E5E5">everything</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> have to know to actually</font>

218
00:10:39,980 --> 00:10:44,480
call implement the most basic user

219
00:10:42,200 --> 00:10:48,280
<font color="#CCCCCC">driver communication</font><font color="#E5E5E5"> now let's see what</font>

220
00:10:44,480 --> 00:10:51,560
the<font color="#E5E5E5"> user does so that's the function</font><font color="#CCCCCC"> I</font>

221
00:10:48,280 --> 00:10:54,279
showed before<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> the driver while</font>

222
00:10:51,560 --> 00:10:56,349
trying to<font color="#CCCCCC"> communicate with so a lav</font>

223
00:10:54,279 --> 00:10:57,850
<font color="#E5E5E5">it is just the communication with the</font>

224
00:10:56,350 --> 00:11:02,740
<font color="#CCCCCC">driver that's the handles of the driver</font>

225
00:10:57,850 --> 00:11:06,310
<font color="#E5E5E5">now we call function with index</font><font color="#CCCCCC"> 0 so</font>

226
00:11:02,740 --> 00:11:09,610
I'll select<font color="#CCCCCC"> o is</font><font color="#E5E5E5"> 0 here we create</font><font color="#CCCCCC"> a</font>

227
00:11:06,310 --> 00:11:12,819
struck<font color="#CCCCCC"> and input my buffer in in the</font>

228
00:11:09,610 --> 00:11:16,629
size of 8 bytes<font color="#E5E5E5"> and output struct 4</font>

229
00:11:12,819 --> 00:11:18,699
bytes<font color="#CCCCCC"> and we actually because the output</font>

230
00:11:16,629 --> 00:11:21,279
<font color="#E5E5E5">the size might be different we actually</font>

231
00:11:18,699 --> 00:11:23,699
have to supply a size parameter which

232
00:11:21,279 --> 00:11:26,889
the kernel can<font color="#CCCCCC"> override so like I said</font>

233
00:11:23,699 --> 00:11:30,339
<font color="#CCCCCC">index 0 and we</font><font color="#E5E5E5"> can see that here because</font>

234
00:11:26,889 --> 00:11:33,339
<font color="#E5E5E5">we select</font><font color="#CCCCCC"> though is now 0 it takes the</font>

235
00:11:30,339 --> 00:11:38,559
<font color="#E5E5E5">first the first the</font><font color="#CCCCCC"> script</font><font color="#E5E5E5"> off from here</font>

236
00:11:33,339 --> 00:11:41,019
so in our<font color="#E5E5E5"> case</font><font color="#CCCCCC"> s open and like like here</font>

237
00:11:38,559 --> 00:11:44,319
<font color="#E5E5E5">you see that the input</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> 8 bytes the</font>

238
00:11:41,019 --> 00:11:47,499
output is 4 bytes so here<font color="#CCCCCC"> eight bytes 4</font>

239
00:11:44,319 --> 00:11:49,719
bytes and that's it that's the<font color="#E5E5E5"> whole</font>

240
00:11:47,499 --> 00:11:52,689
thing between<font color="#E5E5E5"> user and drive a lot like</font>

241
00:11:49,720 --> 00:11:55,809
the basic communication<font color="#CCCCCC"> so again the</font>

242
00:11:52,689 --> 00:11:57,399
<font color="#CCCCCC">whole flow</font><font color="#E5E5E5"> user calls</font><font color="#CCCCCC"> IO</font><font color="#E5E5E5"> Connect called</font>

243
00:11:55,809 --> 00:12:00,279
method we see it here

244
00:11:57,399 --> 00:12:04,059
<font color="#E5E5E5">io connect</font><font color="#CCCCCC"> or method which calls</font><font color="#E5E5E5"> the MiG</font>

245
00:12:00,279 --> 00:12:06,339
function<font color="#CCCCCC"> IO connect method which calls</font>

246
00:12:04,059 --> 00:12:09,069
<font color="#CCCCCC">much message</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> drops into the kernel</font>

247
00:12:06,339 --> 00:12:12,009
<font color="#E5E5E5">the calendar gets into</font><font color="#CCCCCC"> x io connect</font>

248
00:12:09,069 --> 00:12:14,709
method which calls is<font color="#CCCCCC"> IO Connect method</font>

249
00:12:12,009 --> 00:12:18,129
<font color="#E5E5E5">which eventually</font><font color="#CCCCCC"> calls the drivers</font>

250
00:12:14,709 --> 00:12:20,378
external method implementation so so far

251
00:12:18,129 --> 00:12:21,670
that's everything about<font color="#E5E5E5"> the code now</font>

252
00:12:20,379 --> 00:12:26,829
let's see how<font color="#E5E5E5"> it actually looks in the</font>

253
00:12:21,670 --> 00:12:29,740
binary so so<font color="#E5E5E5"> this is an example from the</font>

254
00:12:26,829 --> 00:12:32,589
drive<font color="#E5E5E5"> API lav driver like I showed you</font>

255
00:12:29,740 --> 00:12:34,870
<font color="#E5E5E5">before that's exactly like in the code</font>

256
00:12:32,589 --> 00:12:37,240
<font color="#E5E5E5">you have a pointer to</font><font color="#CCCCCC"> a function</font><font color="#E5E5E5"> you</font>

257
00:12:34,870 --> 00:12:39,339
have<font color="#E5E5E5"> the struct input size you have the</font>

258
00:12:37,240 --> 00:12:42,610
struct output size by the way<font color="#E5E5E5"> this is</font>

259
00:12:39,339 --> 00:12:47,019
<font color="#E5E5E5">these two zeros if you want to just pass</font>

260
00:12:42,610 --> 00:12:48,670
an array of<font color="#E5E5E5"> integers</font><font color="#CCCCCC"> but I mean you can</font>

261
00:12:47,019 --> 00:12:51,009
just<font color="#CCCCCC"> pass an array</font><font color="#E5E5E5"> of integers but it'll</font>

262
00:12:48,670 --> 00:12:53,889
cannot pass a struct so it's up<font color="#CCCCCC"> to</font><font color="#E5E5E5"> date</font>

263
00:12:51,009 --> 00:12:56,350
today to the drive you to the size so

264
00:12:53,889 --> 00:12:58,990
that's<font color="#CCCCCC"> it now we know more</font><font color="#E5E5E5"> or less how</font>

265
00:12:56,350 --> 00:13:01,929
drivers<font color="#CCCCCC"> work and how users</font><font color="#E5E5E5"> communicate</font>

266
00:12:58,990 --> 00:13:05,709
with them so now let's see the

267
00:13:01,929 --> 00:13:07,270
vulnerabilities<font color="#E5E5E5"> so here's the list of</font>

268
00:13:05,709 --> 00:13:09,790
<font color="#E5E5E5">the vulnerabilities I</font>

269
00:13:07,270 --> 00:13:11,560
found one of them is in<font color="#CCCCCC"> IO surface</font><font color="#E5E5E5"> I'm</font>

270
00:13:09,790 --> 00:13:14,199
not going to get into<font color="#CCCCCC"> that vulnerability</font>

271
00:13:11,560 --> 00:13:16,569
<font color="#E5E5E5">but if you I mean details</font><font color="#CCCCCC"> are available</font>

272
00:13:14,200 --> 00:13:19,210
online<font color="#CCCCCC"> and if you want more explanation</font>

273
00:13:16,570 --> 00:13:21,970
feel free to ask<font color="#E5E5E5"> me about it and what I</font>

274
00:13:19,210 --> 00:13:24,850
am<font color="#CCCCCC"> going to talk about</font><font color="#E5E5E5"> is so much the</font>

275
00:13:21,970 --> 00:13:26,620
vulnerabilities I found here<font color="#E5E5E5"> I didn't</font>

276
00:13:24,850 --> 00:13:30,850
<font color="#E5E5E5">have to use all</font><font color="#CCCCCC"> of them to actually</font>

277
00:13:26,620 --> 00:13:32,770
<font color="#E5E5E5">create</font><font color="#CCCCCC"> write a full exploit but I'm</font>

278
00:13:30,850 --> 00:13:36,490
going to show<font color="#CCCCCC"> a few of them that I may</font>

279
00:13:32,770 --> 00:13:38,170
be enthused<font color="#E5E5E5"> just to learn now in order</font>

280
00:13:36,490 --> 00:13:42,700
<font color="#E5E5E5">to understand some of them we have</font><font color="#CCCCCC"> to</font>

281
00:13:38,170 --> 00:13:45,430
talk<font color="#E5E5E5"> a little bit about IO surface so 60</font>

282
00:13:42,700 --> 00:13:48,930
seconds<font color="#CCCCCC"> about our surface our surface is</font>

283
00:13:45,430 --> 00:13:53,410
a channel object which is used<font color="#E5E5E5"> to share</font>

284
00:13:48,930 --> 00:13:56,979
hardware accelerated graphics data so

285
00:13:53,410 --> 00:14:01,150
frame buffers<font color="#E5E5E5"> for example you can show</font>

286
00:13:56,980 --> 00:14:03,700
<font color="#CCCCCC">them across</font><font color="#E5E5E5"> multiple processes the the</font>

287
00:14:01,150 --> 00:14:06,550
advantages of using<font color="#CCCCCC"> an IO surface object</font>

288
00:14:03,700 --> 00:14:10,960
and not actually<font color="#CCCCCC"> send the frame buffer</font>

289
00:14:06,550 --> 00:14:13,390
data<font color="#E5E5E5"> is that idle surface</font><font color="#CCCCCC"> Maps the data</font>

290
00:14:10,960 --> 00:14:15,940
<font color="#E5E5E5">so instead of sending out gigabytes of</font>

291
00:14:13,390 --> 00:14:18,370
information you can<font color="#CCCCCC"> just send</font><font color="#E5E5E5"> an</font><font color="#CCCCCC"> hour</font>

292
00:14:15,940 --> 00:14:20,980
surface object<font color="#CCCCCC"> like the earth surface</font>

293
00:14:18,370 --> 00:14:23,230
object<font color="#E5E5E5"> the process asked the colonel to</font>

294
00:14:20,980 --> 00:14:26,200
map the data that<font color="#CCCCCC"> the earth surface</font>

295
00:14:23,230 --> 00:14:28,780
<font color="#E5E5E5">object handles and then the calendars</font>

296
00:14:26,200 --> 00:14:31,480
<font color="#CCCCCC">Maps the data</font><font color="#E5E5E5"> so just the mapping of the</font>

297
00:14:28,780 --> 00:14:33,880
same<font color="#E5E5E5"> physical memory which</font><font color="#CCCCCC"> is a lot of</font>

298
00:14:31,480 --> 00:14:37,270
time and it's a very<font color="#E5E5E5"> convenient way</font><font color="#CCCCCC"> of</font>

299
00:14:33,880 --> 00:14:40,060
<font color="#E5E5E5">passing a lot of</font><font color="#CCCCCC"> information and our</font>

300
00:14:37,270 --> 00:14:42,069
surfaces<font color="#E5E5E5"> are shared by an ID you</font><font color="#CCCCCC"> can</font>

301
00:14:40,060 --> 00:14:45,550
create a<font color="#CCCCCC"> global surface so anyone can</font>

302
00:14:42,070 --> 00:14:47,710
<font color="#E5E5E5">each map that information based on an</font>

303
00:14:45,550 --> 00:14:49,540
i/o surface ID<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can create a</font><font color="#E5E5E5"> platter</font>

304
00:14:47,710 --> 00:14:51,280
you<font color="#E5E5E5"> can create private ones doesn't</font>

305
00:14:49,540 --> 00:14:55,270
<font color="#CCCCCC">really matter for</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> specific case</font><font color="#E5E5E5"> but</font>

306
00:14:51,280 --> 00:14:56,980
still<font color="#E5E5E5"> nice to know so to summarize it</font>

307
00:14:55,270 --> 00:15:00,430
<font color="#E5E5E5">our surface is just</font><font color="#CCCCCC"> an object that</font>

308
00:14:56,980 --> 00:15:05,260
<font color="#E5E5E5">allows you to transfer data so now what</font>

309
00:15:00,430 --> 00:15:07,449
is<font color="#E5E5E5"> a</font><font color="#CCCCCC"> PLA V driver so every driver is</font>

310
00:15:05,260 --> 00:15:10,000
responsible<font color="#CCCCCC"> for hardware accelerated</font>

311
00:15:07,450 --> 00:15:14,070
encoding a video encoding in iOS it's

312
00:15:10,000 --> 00:15:16,630
not available on<font color="#CCCCCC"> all</font><font color="#E5E5E5"> six unfortunately</font>

313
00:15:14,070 --> 00:15:18,950
there is absolutely no information<font color="#CCCCCC"> or</font>

314
00:15:16,630 --> 00:15:22,189
documentation<font color="#E5E5E5"> about it on the Internet</font>

315
00:15:18,950 --> 00:15:24,170
and unfortunately<font color="#E5E5E5"> like most of the</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> key</font>

316
00:15:22,190 --> 00:15:27,230
drivers<font color="#CCCCCC"> there are no</font><font color="#E5E5E5"> source codes which</font>

317
00:15:24,170 --> 00:15:31,670
means that<font color="#E5E5E5"> I had</font><font color="#CCCCCC"> to reverse engineer it</font>

318
00:15:27,230 --> 00:15:38,180
<font color="#E5E5E5">so here's the table of the</font><font color="#CCCCCC"> external</font>

319
00:15:31,670 --> 00:15:41,360
methods of<font color="#CCCCCC"> epilady</font><font color="#E5E5E5"> driver</font><font color="#CCCCCC"> I just moved</font>

320
00:15:38,180 --> 00:15:44,388
the the properties of every function<font color="#E5E5E5"> so</font>

321
00:15:41,360 --> 00:15:45,889
it gets into<font color="#E5E5E5"> one slide but one</font><font color="#CCCCCC"> of the</font>

322
00:15:44,389 --> 00:15:48,560
things that<font color="#E5E5E5"> really attracts my attention</font>

323
00:15:45,889 --> 00:15:51,860
in<font color="#CCCCCC"> that table</font><font color="#E5E5E5"> is that one of the</font>

324
00:15:48,560 --> 00:15:55,489
<font color="#E5E5E5">functions required a very large amount</font>

325
00:15:51,860 --> 00:15:57,199
<font color="#E5E5E5">of input which</font><font color="#CCCCCC"> could somehow understand</font>

326
00:15:55,490 --> 00:16:00,050
because yeah<font color="#E5E5E5"> videos have a lot of</font>

327
00:15:57,199 --> 00:16:02,930
properties<font color="#CCCCCC"> so maybe I don't</font><font color="#E5E5E5"> really know</font>

328
00:16:00,050 --> 00:16:06,109
what's going<font color="#CCCCCC"> on I mean offer</font><font color="#E5E5E5"> a reference</font>

329
00:16:02,930 --> 00:16:07,638
glance it looks suspicious<font color="#CCCCCC"> but you know</font>

330
00:16:06,110 --> 00:16:09,920
it's not<font color="#CCCCCC"> like I can do something about</font>

331
00:16:07,639 --> 00:16:12,500
<font color="#CCCCCC">it</font><font color="#E5E5E5"> but it also gave a lot</font><font color="#CCCCCC"> of information</font>

332
00:16:09,920 --> 00:16:14,689
out which is also<font color="#CCCCCC"> something that usually</font>

333
00:16:12,500 --> 00:16:17,000
you wouldn't<font color="#E5E5E5"> expect from a driver</font>

334
00:16:14,690 --> 00:16:18,920
so I started reverse engineering that

335
00:16:17,000 --> 00:16:21,470
function also<font color="#CCCCCC"> said session settings</font>

336
00:16:18,920 --> 00:16:24,050
<font color="#E5E5E5">that's the name I gave to</font><font color="#CCCCCC"> the function</font>

337
00:16:21,470 --> 00:16:27,589
based on logs from the based on<font color="#E5E5E5"> the</font>

338
00:16:24,050 --> 00:16:29,990
prints<font color="#CCCCCC"> in that</font><font color="#E5E5E5"> function so I spoke</font>

339
00:16:27,589 --> 00:16:33,230
before about this function this script

340
00:16:29,990 --> 00:16:36,680
<font color="#CCCCCC">oh so you have a function pointer</font><font color="#E5E5E5"> input</font>

341
00:16:33,230 --> 00:16:39,980
count and output count<font color="#E5E5E5"> so a buffer sorry</font>

342
00:16:36,680 --> 00:16:44,959
<font color="#E5E5E5">so the input buffer is in offset 30 and</font>

343
00:16:39,980 --> 00:16:47,649
the output<font color="#E5E5E5"> buffers in offset 58 so x1 is</font>

344
00:16:44,959 --> 00:16:50,839
the<font color="#CCCCCC"> input buffer</font><font color="#E5E5E5"> x2 is the output</font><font color="#CCCCCC"> buffer</font>

345
00:16:47,649 --> 00:16:56,209
now let's see what a function does<font color="#E5E5E5"> so</font>

346
00:16:50,839 --> 00:16:59,899
first of all we<font color="#CCCCCC"> put here yeah</font><font color="#E5E5E5"> so the</font>

347
00:16:56,209 --> 00:17:01,760
input buffer gets into X 19 and the

348
00:16:59,899 --> 00:17:05,179
driver itself<font color="#E5E5E5"> gets into the the</font>

349
00:17:01,760 --> 00:17:08,169
connection<font color="#CCCCCC"> so it gets into the X 20</font><font color="#E5E5E5"> so</font>

350
00:17:05,179 --> 00:17:11,600
it fetches something from our input<font color="#E5E5E5"> some</font>

351
00:17:08,169 --> 00:17:13,339
keyword then if we<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> put</font>

352
00:17:11,599 --> 00:17:14,899
something<font color="#E5E5E5"> in</font><font color="#CCCCCC"> that offset which we</font>

353
00:17:13,339 --> 00:17:18,319
completely control because that's the

354
00:17:14,900 --> 00:17:22,549
input<font color="#CCCCCC"> buffer if we supply if it's not</font>

355
00:17:18,319 --> 00:17:26,178
<font color="#CCCCCC">now then</font><font color="#E5E5E5"> we jump here but if it's not we</font>

356
00:17:22,549 --> 00:17:30,559
see that<font color="#E5E5E5"> it gets it</font><font color="#CCCCCC"> gets</font><font color="#E5E5E5"> something it</font>

357
00:17:26,179 --> 00:17:31,360
gets some integer from our inputs which

358
00:17:30,559 --> 00:17:33,010
<font color="#E5E5E5">of</font>

359
00:17:31,360 --> 00:17:34,570
<font color="#CCCCCC">reversing reverse</font><font color="#E5E5E5"> engineering that</font>

360
00:17:33,010 --> 00:17:37,240
function<font color="#E5E5E5"> I know that this is an iOS</font>

361
00:17:34,570 --> 00:17:40,780
surface<font color="#E5E5E5"> ID then it just gets the ice</font>

362
00:17:37,240 --> 00:17:45,280
surface<font color="#E5E5E5"> ID it puts it back in to offset</font>

363
00:17:40,780 --> 00:17:46,450
<font color="#CCCCCC">1 7 8</font><font color="#E5E5E5"> into the input buffer which is not</font>

364
00:17:45,280 --> 00:17:48,970
suitable<font color="#E5E5E5"> from the user anymore by the</font>

365
00:17:46,450 --> 00:17:51,850
way and then it continues it continues

366
00:17:48,970 --> 00:17:56,200
further<font color="#E5E5E5"> now what what we see here is</font>

367
00:17:51,850 --> 00:17:58,719
that we can supply something<font color="#E5E5E5"> and if we</font>

368
00:17:56,200 --> 00:18:01,179
don't supply it<font color="#E5E5E5"> the</font><font color="#CCCCCC"> camel puts there a</font>

369
00:17:58,720 --> 00:18:04,150
valid channel pointer and continues on

370
00:18:01,179 --> 00:18:06,220
which<font color="#E5E5E5"> means we control we can get the</font>

371
00:18:04,150 --> 00:18:09,190
kind<font color="#E5E5E5"> of thinking that we</font><font color="#CCCCCC"> have an</font><font color="#E5E5E5"> outer</font>

372
00:18:06,220 --> 00:18:11,080
surface object control and we can<font color="#E5E5E5"> supply</font>

373
00:18:09,190 --> 00:18:13,299
any others<font color="#CCCCCC"> we want</font><font color="#E5E5E5"> and the can I will</font>

374
00:18:11,080 --> 00:18:14,320
believe<font color="#E5E5E5"> that this is indeed and our</font>

375
00:18:13,299 --> 00:18:16,720
surface object

376
00:18:14,320 --> 00:18:19,840
<font color="#E5E5E5">so to summarize the primitive we have</font>

377
00:18:16,720 --> 00:18:22,030
here we can supply any<font color="#E5E5E5"> can address we</font>

378
00:18:19,840 --> 00:18:24,939
want and they cannot<font color="#CCCCCC"> believe it's an</font>

379
00:18:22,030 --> 00:18:27,250
isle surface<font color="#E5E5E5"> object you know it's it's</font>

380
00:18:24,940 --> 00:18:30,790
important to mention<font color="#E5E5E5"> we can also also</font>

381
00:18:27,250 --> 00:18:34,200
supply a user mode<font color="#E5E5E5"> address but because I</font>

382
00:18:30,790 --> 00:18:36,879
wanted to<font color="#CCCCCC"> O bypass the</font><font color="#E5E5E5"> SMAP or pun</font>

383
00:18:34,200 --> 00:18:40,179
mitigation that are in the new versions

384
00:18:36,880 --> 00:18:42,309
I'm sticking to channel<font color="#E5E5E5"> Channel pointers</font>

385
00:18:40,179 --> 00:18:46,530
<font color="#E5E5E5">here because the kernel will not accept</font>

386
00:18:42,309 --> 00:18:51,910
user<font color="#E5E5E5"> addresses if</font><font color="#CCCCCC"> if that mitigation</font><font color="#E5E5E5"> is</font>

387
00:18:46,530 --> 00:18:54,639
enabled<font color="#CCCCCC"> so one thing</font><font color="#E5E5E5"> that surprised me</font>

388
00:18:51,910 --> 00:18:56,350
with<font color="#E5E5E5"> that</font><font color="#CCCCCC"> behavior is that</font><font color="#E5E5E5"> why is the</font>

389
00:18:54,640 --> 00:19:00,400
kernel expecting the user to<font color="#CCCCCC"> actually</font>

390
00:18:56,350 --> 00:19:03,070
give in<font color="#E5E5E5"> channel addresses so I said it</font>

391
00:19:00,400 --> 00:19:07,900
must probably<font color="#CCCCCC"> someone supply those</font>

392
00:19:03,070 --> 00:19:11,710
channel addresses to<font color="#CCCCCC"> the user so I look</font>

393
00:19:07,900 --> 00:19:15,910
for that and<font color="#E5E5E5"> in</font><font color="#CCCCCC"> selector</font><font color="#E5E5E5"> number</font><font color="#CCCCCC"> seven I</font>

394
00:19:11,710 --> 00:19:20,440
<font color="#E5E5E5">saw that just like before we can supply</font>

395
00:19:15,910 --> 00:19:22,450
<font color="#E5E5E5">a surface ID it puts that into the input</font>

396
00:19:20,440 --> 00:19:24,730
<font color="#CCCCCC">buffer but then for some reason</font>

397
00:19:22,450 --> 00:19:27,490
<font color="#CCCCCC">inference for</font><font color="#E5E5E5"> some reason dictates it</font>

398
00:19:24,730 --> 00:19:30,309
from the input<font color="#CCCCCC"> buffer into X 9 and it</font>

399
00:19:27,490 --> 00:19:33,370
puts<font color="#E5E5E5"> it back</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> output buffer so what</font>

400
00:19:30,309 --> 00:19:36,490
we<font color="#E5E5E5"> get</font><font color="#CCCCCC"> here is an info leak so we can</font>

401
00:19:33,370 --> 00:19:38,799
supply any<font color="#E5E5E5"> i/o surface ID which is</font>

402
00:19:36,490 --> 00:19:40,360
<font color="#E5E5E5">completely</font><font color="#CCCCCC"> something that his user</font><font color="#E5E5E5"> I</font>

403
00:19:38,799 --> 00:19:42,340
mean it's not really<font color="#E5E5E5"> usable but it's</font>

404
00:19:40,360 --> 00:19:44,629
something<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> could</font><font color="#E5E5E5"> share to to</font>

405
00:19:42,340 --> 00:19:46,280
talk<font color="#CCCCCC"> about the specific</font><font color="#E5E5E5"> surface</font>

406
00:19:44,630 --> 00:19:48,230
we can get<font color="#CCCCCC"> it scandal address which is</font>

407
00:19:46,280 --> 00:19:52,340
<font color="#E5E5E5">completely something that user is not</font>

408
00:19:48,230 --> 00:19:54,650
supposed to have so let's summarize<font color="#E5E5E5"> what</font>

409
00:19:52,340 --> 00:19:57,230
we<font color="#CCCCCC"> have so far</font><font color="#E5E5E5"> to actually craft the</font>

410
00:19:54,650 --> 00:19:59,840
exploits<font color="#E5E5E5"> we can fake</font><font color="#CCCCCC"> a nice</font><font color="#E5E5E5"> surface</font>

411
00:19:57,230 --> 00:20:02,090
object<font color="#E5E5E5"> which is an</font><font color="#CCCCCC"> aggregate object</font><font color="#E5E5E5"> so</font>

412
00:19:59,840 --> 00:20:04,100
it has variables so we can fake a

413
00:20:02,090 --> 00:20:07,580
variable which<font color="#CCCCCC"> means you</font><font color="#E5E5E5"> can hijack the</font>

414
00:20:04,100 --> 00:20:09,919
kernel code execution we also have the

415
00:20:07,580 --> 00:20:12,679
address of<font color="#CCCCCC"> that aisle surface which</font>

416
00:20:09,920 --> 00:20:14,240
<font color="#E5E5E5">which means we have the answer which</font>

417
00:20:12,680 --> 00:20:16,520
means they have we can bypass map

418
00:20:14,240 --> 00:20:20,000
because we can still stick to kernel

419
00:20:16,520 --> 00:20:24,020
addresses<font color="#E5E5E5"> the only thing we don't have</font>

420
00:20:20,000 --> 00:20:25,880
is some some way to bypass<font color="#E5E5E5"> a sub</font><font color="#CCCCCC"> KS</font>

421
00:20:24,020 --> 00:20:28,700
allowed<font color="#E5E5E5"> so that's the last thing we have</font>

422
00:20:25,880 --> 00:20:31,310
and then more or less we<font color="#E5E5E5"> have all the</font>

423
00:20:28,700 --> 00:20:34,310
bypasses<font color="#CCCCCC"> for every mitigation</font><font color="#E5E5E5"> in order</font>

424
00:20:31,310 --> 00:20:36,980
to I<font color="#CCCCCC"> Jack</font><font color="#E5E5E5"> the camel code execution so I</font>

425
00:20:34,310 --> 00:20:39,530
at that<font color="#E5E5E5"> point</font><font color="#CCCCCC"> I said okay this level is</font>

426
00:20:36,980 --> 00:20:41,630
<font color="#CCCCCC">very interesting let's dig further to</font>

427
00:20:39,530 --> 00:20:46,030
what it does and I saw that eventually

428
00:20:41,630 --> 00:20:49,970
all<font color="#CCCCCC"> of those functions</font><font color="#E5E5E5"> lead to the same</font>

429
00:20:46,030 --> 00:20:52,850
<font color="#E5E5E5">do the same code into the same</font><font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> the</font>

430
00:20:49,970 --> 00:20:56,690
same function<font color="#CCCCCC"> so all</font><font color="#E5E5E5"> of those</font><font color="#CCCCCC"> selectors</font>

431
00:20:52,850 --> 00:20:58,310
<font color="#CCCCCC">wrote just wrappers to</font><font color="#E5E5E5"> the main logic by</font>

432
00:20:56,690 --> 00:21:01,520
the way<font color="#E5E5E5"> command gate if someone is</font>

433
00:20:58,310 --> 00:21:05,090
<font color="#E5E5E5">interested</font><font color="#CCCCCC"> it's a way it's in a</font>

434
00:21:01,520 --> 00:21:08,450
synchronization<font color="#E5E5E5"> mechanism in iOS and</font><font color="#CCCCCC"> o6</font>

435
00:21:05,090 --> 00:21:12,560
not really relevant to<font color="#E5E5E5"> this example but</font>

436
00:21:08,450 --> 00:21:15,230
<font color="#CCCCCC">there's also very importance</font><font color="#E5E5E5"> to know so</font>

437
00:21:12,560 --> 00:21:17,870
that's how the main<font color="#E5E5E5"> logic looks really</font>

438
00:21:15,230 --> 00:21:20,690
unpleasant<font color="#CCCCCC"> if you have to do a click</font>

439
00:21:17,870 --> 00:21:22,850
<font color="#E5E5E5">reverse engineer</font><font color="#CCCCCC"> nevertheless we have to</font>

440
00:21:20,690 --> 00:21:26,270
<font color="#E5E5E5">head to reverse engineer it's understand</font>

441
00:21:22,850 --> 00:21:30,050
what's going on<font color="#E5E5E5"> so let's quickly brief</font>

442
00:21:26,270 --> 00:21:32,330
it<font color="#E5E5E5"> so the driver is put into X xx the</font>

443
00:21:30,050 --> 00:21:34,190
user the<font color="#E5E5E5"> user</font><font color="#CCCCCC"> client like the</font>

444
00:21:32,330 --> 00:21:37,159
<font color="#E5E5E5">communication channel of the user is put</font>

445
00:21:34,190 --> 00:21:39,710
into 22 and something which you are<font color="#E5E5E5"> not</font>

446
00:21:37,160 --> 00:21:45,890
so exactly sure what<font color="#E5E5E5"> is is put into 21</font>

447
00:21:39,710 --> 00:21:48,950
and 25 is our input buffer so what I saw

448
00:21:45,890 --> 00:21:52,910
<font color="#CCCCCC">someone is that it's takes like I said</font>

449
00:21:48,950 --> 00:21:56,210
25 is our input buffer<font color="#E5E5E5"> it takes from X</font>

450
00:21:52,910 --> 00:21:57,670
25<font color="#E5E5E5"> a surface channel address which we</font>

451
00:21:56,210 --> 00:21:59,860
can control<font color="#E5E5E5"> but</font>

452
00:21:57,670 --> 00:22:04,150
we can also put a valid<font color="#CCCCCC"> journalist here</font>

453
00:21:59,860 --> 00:22:06,399
<font color="#E5E5E5">so x 1.is</font><font color="#CCCCCC"> canal an</font><font color="#E5E5E5"> isosurface</font><font color="#CCCCCC"> scandal</font>

454
00:22:04,150 --> 00:22:08,230
others it puts<font color="#CCCCCC"> idiots</font><font color="#E5E5E5"> also a lot of</font>

455
00:22:06,400 --> 00:22:10,570
<font color="#E5E5E5">other</font><font color="#CCCCCC"> information</font><font color="#E5E5E5"> not really relevant</font>

456
00:22:08,230 --> 00:22:13,390
<font color="#CCCCCC">i'll</font><font color="#E5E5E5"> surmise it because it's not the</font>

457
00:22:10,570 --> 00:22:16,149
important part<font color="#CCCCCC"> here</font><font color="#E5E5E5"> what it does it it</font>

458
00:22:13,390 --> 00:22:18,790
gets the<font color="#E5E5E5"> iris surface object and then</font>

459
00:22:16,150 --> 00:22:21,640
like I<font color="#E5E5E5"> said before it</font><font color="#CCCCCC"> maps</font><font color="#E5E5E5"> them from</font><font color="#CCCCCC"> all</font>

460
00:22:18,790 --> 00:22:24,460
surfaces<font color="#E5E5E5"> are meant to map to assured</font>

461
00:22:21,640 --> 00:22:27,730
information<font color="#E5E5E5"> so it Maps the information</font>

462
00:22:24,460 --> 00:22:30,610
to<font color="#E5E5E5"> another address</font><font color="#CCCCCC"> space so what</font>

463
00:22:27,730 --> 00:22:33,970
<font color="#CCCCCC">eventually it does is it puts into</font><font color="#E5E5E5"> X 26</font>

464
00:22:30,610 --> 00:22:37,750
the map of the data of the<font color="#CCCCCC"> Isle surface</font>

465
00:22:33,970 --> 00:22:39,850
<font color="#E5E5E5">so everything X 26 points to a kernel</font>

466
00:22:37,750 --> 00:22:43,780
address which we<font color="#E5E5E5"> fully control its</font>

467
00:22:39,850 --> 00:22:47,409
content<font color="#CCCCCC"> and because</font><font color="#E5E5E5"> it's mapping we can</font>

468
00:22:43,780 --> 00:22:49,690
also modify<font color="#E5E5E5"> that data and during the</font>

469
00:22:47,410 --> 00:22:52,810
execution which<font color="#CCCCCC"> unfortunately they</font>

470
00:22:49,690 --> 00:22:56,110
cannot didn't consider at all<font color="#E5E5E5"> so nothing</font>

471
00:22:52,810 --> 00:23:00,840
is locked in<font color="#CCCCCC"> buffalo everything</font><font color="#E5E5E5"> that is</font>

472
00:22:56,110 --> 00:23:03,219
in this buffer can be<font color="#E5E5E5"> changed anytime</font><font color="#CCCCCC"> so</font>

473
00:23:00,840 --> 00:23:07,120
what I saw eventually that the camera

474
00:23:03,220 --> 00:23:10,060
does is here's the<font color="#E5E5E5"> X 23 is the</font><font color="#CCCCCC"> channel</font>

475
00:23:07,120 --> 00:23:13,120
address of that<font color="#E5E5E5"> mapping mapping it takes</font>

476
00:23:10,060 --> 00:23:16,540
some<font color="#E5E5E5"> commands from</font><font color="#CCCCCC"> the form X 23</font><font color="#E5E5E5"> then</font>

477
00:23:13,120 --> 00:23:18,639
there is a switch case one of<font color="#E5E5E5"> the</font>

478
00:23:16,540 --> 00:23:21,159
examples that<font color="#E5E5E5"> I saw in that switch case</font>

479
00:23:18,640 --> 00:23:24,040
is that it takes a kernel address from

480
00:23:21,160 --> 00:23:27,040
<font color="#CCCCCC">that mapping</font><font color="#E5E5E5"> it checks if this kernel</font>

481
00:23:24,040 --> 00:23:29,920
address is<font color="#E5E5E5"> not now if it's not now</font><font color="#CCCCCC"> mmm</font>

482
00:23:27,040 --> 00:23:32,350
if it's<font color="#CCCCCC"> null it allocates</font><font color="#E5E5E5"> some data</font><font color="#CCCCCC"> puts</font>

483
00:23:29,920 --> 00:23:34,930
it<font color="#E5E5E5"> back into the mapping which is</font><font color="#CCCCCC"> also</font>

484
00:23:32,350 --> 00:23:37,959
an<font color="#CCCCCC"> information disclosure because we get</font>

485
00:23:34,930 --> 00:23:41,230
to how to have<font color="#CCCCCC"> camel address in the size</font>

486
00:23:37,960 --> 00:23:43,390
of X 28<font color="#E5E5E5"> and because it's</font><font color="#CCCCCC"> mapping we can</font>

487
00:23:41,230 --> 00:23:46,570
read it and<font color="#E5E5E5"> then it takes that pointer</font>

488
00:23:43,390 --> 00:23:49,440
and<font color="#E5E5E5"> it's it initializes it so not</font><font color="#CCCCCC"> only</font>

489
00:23:46,570 --> 00:23:53,050
it's an info<font color="#E5E5E5"> leak but we can also</font>

490
00:23:49,440 --> 00:23:55,300
initialize the first<font color="#E5E5E5"> X 28 bytes of any</font>

491
00:23:53,050 --> 00:23:57,669
<font color="#CCCCCC">kernel point that we want which is by</font>

492
00:23:55,300 --> 00:24:00,280
itself might sometimes be sufficient to

493
00:23:57,670 --> 00:24:02,200
<font color="#E5E5E5">create a full exploit but why</font><font color="#CCCCCC"> borrow</font>

494
00:24:00,280 --> 00:24:07,250
<font color="#CCCCCC">when</font><font color="#E5E5E5"> we have such better primitives here</font>

495
00:24:02,200 --> 00:24:09,770
so<font color="#E5E5E5"> again our</font><font color="#CCCCCC"> goal is to</font><font color="#E5E5E5"> eventually</font>

496
00:24:07,250 --> 00:24:14,750
<font color="#E5E5E5">it's the</font><font color="#CCCCCC"> kernel-based to bypass que</font><font color="#E5E5E5"> es</font>

497
00:24:09,770 --> 00:24:17,420
<font color="#CCCCCC">Salaam so eventually it gets to some</font>

498
00:24:14,750 --> 00:24:18,320
function<font color="#CCCCCC"> which is</font><font color="#E5E5E5"> called</font><font color="#CCCCCC"> map y UV input</font>

499
00:24:17,420 --> 00:24:20,180
form<font color="#CCCCCC"> say Sadie</font>

500
00:24:18,320 --> 00:24:23,810
again<font color="#E5E5E5"> that's the name because from the</font>

501
00:24:20,180 --> 00:24:24,980
idea<font color="#E5E5E5"> of it from the</font><font color="#CCCCCC"> KA prints but</font><font color="#E5E5E5"> we</font>

502
00:24:23,810 --> 00:24:28,370
<font color="#E5E5E5">don't really have to understand what</font><font color="#CCCCCC"> it</font>

503
00:24:24,980 --> 00:24:31,400
means to<font color="#E5E5E5"> find the bug there so it gets</font>

504
00:24:28,370 --> 00:24:34,699
the soil surface<font color="#CCCCCC"> can</font><font color="#E5E5E5"> I let us into it</font>

505
00:24:31,400 --> 00:24:39,200
<font color="#E5E5E5">three puts it into our map date</font><font color="#CCCCCC"> map</font><font color="#E5E5E5"> data</font>

506
00:24:34,700 --> 00:24:43,250
lots another one late again<font color="#CCCCCC"> and what it</font>

507
00:24:39,200 --> 00:24:46,160
eventually does is<font color="#CCCCCC"> x-23</font><font color="#E5E5E5"> is our mapping</font>

508
00:24:43,250 --> 00:24:48,980
so it takes an integer<font color="#E5E5E5"> a controllable</font>

509
00:24:46,160 --> 00:24:49,970
integer from<font color="#CCCCCC"> there and it also takes a</font>

510
00:24:48,980 --> 00:24:55,160
pointer from<font color="#E5E5E5"> there</font>

511
00:24:49,970 --> 00:24:58,670
now then<font color="#E5E5E5"> x2 is</font><font color="#CCCCCC"> get in here and mix to is</font>

512
00:24:55,160 --> 00:25:02,270
a point<font color="#CCCCCC"> to be completely control now</font><font color="#E5E5E5"> I</font>

513
00:24:58,670 --> 00:25:03,590
<font color="#CCCCCC">puts the</font><font color="#E5E5E5"> code here into a pseudo code</font>

514
00:25:02,270 --> 00:25:05,810
because in assembly it's a little bit

515
00:25:03,590 --> 00:25:08,720
more annoying<font color="#E5E5E5"> so and I want everyone to</font>

516
00:25:05,810 --> 00:25:13,690
understand so controllable pointer is

517
00:25:08,720 --> 00:25:16,610
the mapped pointer we put<font color="#E5E5E5"> there from</font>

518
00:25:13,690 --> 00:25:19,190
here<font color="#E5E5E5"> so it's it's something</font><font color="#CCCCCC"> we</font>

519
00:25:16,610 --> 00:25:22,790
completely control it puts there a

520
00:25:19,190 --> 00:25:25,550
mapping then it extracts the<font color="#E5E5E5"> the address</font>

521
00:25:22,790 --> 00:25:28,520
in from that pointer and then what it

522
00:25:25,550 --> 00:25:31,610
does<font color="#E5E5E5"> it from data extracted address</font><font color="#CCCCCC"> it's</font>

523
00:25:28,520 --> 00:25:34,160
the references this address<font color="#E5E5E5"> in specific</font>

524
00:25:31,610 --> 00:25:37,280
offsets into our<font color="#E5E5E5"> controllable pointer</font>

525
00:25:34,160 --> 00:25:39,950
then in some of that it checks<font color="#CCCCCC"> whether</font>

526
00:25:37,280 --> 00:25:45,530
this is it checked<font color="#E5E5E5"> keyword it checks</font>

527
00:25:39,950 --> 00:25:49,730
well the<font color="#E5E5E5"> high 32 bits are</font><font color="#CCCCCC"> zero</font><font color="#E5E5E5"> and if</font>

528
00:25:45,530 --> 00:25:51,920
you're not and<font color="#E5E5E5"> the kernel panics so this</font>

529
00:25:49,730 --> 00:25:54,080
is a very interesting<font color="#E5E5E5"> primitive</font><font color="#CCCCCC"> view</font>

530
00:25:51,920 --> 00:25:56,630
because we can put any others<font color="#CCCCCC"> we want</font>

531
00:25:54,080 --> 00:25:59,179
<font color="#E5E5E5">into controllable pointer and</font><font color="#CCCCCC"> we can</font>

532
00:25:56,630 --> 00:26:01,760
read<font color="#E5E5E5"> from that address</font><font color="#CCCCCC"> so we can have a</font>

533
00:25:59,180 --> 00:26:04,970
very powerful<font color="#E5E5E5"> in folic now the reason</font>

534
00:26:01,760 --> 00:26:08,240
again that this is not there isn't<font color="#E5E5E5"> that</font>

535
00:26:04,970 --> 00:26:10,310
here it's any others<font color="#CCCCCC"> we</font><font color="#E5E5E5"> want and not</font><font color="#CCCCCC"> iOS</font>

536
00:26:08,240 --> 00:26:13,160
surface<font color="#CCCCCC"> buffer manager</font><font color="#E5E5E5"> is because this</font>

537
00:26:10,310 --> 00:26:15,110
is a controllable pointer<font color="#E5E5E5"> so after</font><font color="#CCCCCC"> iOS</font>

538
00:26:13,160 --> 00:26:17,870
surface<font color="#CCCCCC"> before manager is being put here</font>

539
00:26:15,110 --> 00:26:19,639
<font color="#CCCCCC">we can still</font><font color="#E5E5E5"> change the content of</font><font color="#CCCCCC"> that</font>

540
00:26:17,870 --> 00:26:20,479
pointer because this is the point of<font color="#E5E5E5"> a</font>

541
00:26:19,640 --> 00:26:23,600
completely<font color="#E5E5E5"> control</font>

542
00:26:20,480 --> 00:26:25,280
so if you put it in if we<font color="#CCCCCC"> point</font><font color="#E5E5E5"> it into</font>

543
00:26:23,600 --> 00:26:28,219
something we<font color="#E5E5E5"> control you can just change</font>

544
00:26:25,280 --> 00:26:33,230
<font color="#E5E5E5">it right after it sets your day before</font>

545
00:26:28,220 --> 00:26:36,740
manager so if we summarize<font color="#CCCCCC"> the problem</font>

546
00:26:33,230 --> 00:26:39,680
we have here<font color="#CCCCCC"> our expert if you want to</font>

547
00:26:36,740 --> 00:26:43,370
<font color="#E5E5E5">leak a specific address at least</font><font color="#CCCCCC"> one of</font>

548
00:26:39,680 --> 00:26:46,130
those rules<font color="#CCCCCC"> have to happen</font><font color="#E5E5E5"> because if</font>

549
00:26:43,370 --> 00:26:49,520
you want to<font color="#E5E5E5"> lick</font><font color="#CCCCCC"> pad with</font><font color="#E5E5E5"> 100 we can</font>

550
00:26:46,130 --> 00:26:52,910
<font color="#E5E5E5">take</font><font color="#CCCCCC"> 100 - 38</font><font color="#E5E5E5"> and then</font><font color="#CCCCCC"> we have to make</font>

551
00:26:49,520 --> 00:26:56,330
<font color="#E5E5E5">sure that you know that Delta plus 50 is</font>

552
00:26:52,910 --> 00:26:58,130
not<font color="#E5E5E5"> here and that's the summarize of our</font>

553
00:26:56,330 --> 00:27:00,889
primitive<font color="#E5E5E5"> at least if one of those</font>

554
00:26:58,130 --> 00:27:03,410
addresses<font color="#CCCCCC"> is not now we can lick any</font>

555
00:27:00,890 --> 00:27:05,510
other so the address<font color="#CCCCCC"> and of course</font>

556
00:27:03,410 --> 00:27:07,850
because<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is just the reference</font><font color="#E5E5E5"> in</font>

557
00:27:05,510 --> 00:27:11,240
<font color="#CCCCCC">kernel memory mix has to be a valid</font>

558
00:27:07,850 --> 00:27:14,810
kernel<font color="#E5E5E5"> address</font><font color="#CCCCCC"> so here we have an info</font>

559
00:27:11,240 --> 00:27:18,470
leak<font color="#CCCCCC"> we have</font><font color="#E5E5E5"> heap in</font><font color="#CCCCCC"> Falak we have sort</font>

560
00:27:14,810 --> 00:27:22,159
<font color="#E5E5E5">of semi absolutes Colonel Reed and you</font>

561
00:27:18,470 --> 00:27:23,720
<font color="#CCCCCC">have a</font><font color="#E5E5E5"> channel called hijack so we have</font>

562
00:27:22,160 --> 00:27:26,330
a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> freight</font><font color="#CCCCCC"> is let's see if we can</font>

563
00:27:23,720 --> 00:27:30,410
craft and exploit from<font color="#E5E5E5"> all of them so</font>

564
00:27:26,330 --> 00:27:32,840
<font color="#E5E5E5">our plan</font><font color="#CCCCCC"> is as follows first</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> create</font>

565
00:27:30,410 --> 00:27:35,360
an<font color="#CCCCCC"> our surface object we will</font><font color="#E5E5E5"> lick its</font>

566
00:27:32,840 --> 00:27:37,520
can<font color="#E5E5E5"> huddle address because</font><font color="#CCCCCC"> we have the</font>

567
00:27:35,360 --> 00:27:42,080
vulnerability that<font color="#E5E5E5"> gives us the</font><font color="#CCCCCC"> general</font>

568
00:27:37,520 --> 00:27:46,000
address from any surface ID and then we

569
00:27:42,080 --> 00:27:48,830
somehow have to<font color="#CCCCCC"> lick the kernel base to</font>

570
00:27:46,000 --> 00:27:52,250
me to find the<font color="#E5E5E5"> K</font><font color="#CCCCCC"> cellar slide</font>

571
00:27:48,830 --> 00:27:55,370
calculation we<font color="#E5E5E5"> three with</font><font color="#CCCCCC"> three the the</font>

572
00:27:52,250 --> 00:27:58,010
<font color="#CCCCCC">i/o</font><font color="#E5E5E5"> surface object we spray data in the</font>

573
00:27:55,370 --> 00:28:00,530
same<font color="#E5E5E5"> size so our spray data gets into</font>

574
00:27:58,010 --> 00:28:02,180
the same kernel address we have<font color="#E5E5E5"> to so</font>

575
00:28:00,530 --> 00:28:05,320
<font color="#E5E5E5">that it gets in the same channel address</font>

576
00:28:02,180 --> 00:28:08,150
but statistics show<font color="#CCCCCC"> that this is</font>

577
00:28:05,320 --> 00:28:10,820
<font color="#E5E5E5">unbelievably available and then we give</font>

578
00:28:08,150 --> 00:28:13,900
the kernel address to the channel and

579
00:28:10,820 --> 00:28:16,780
they<font color="#CCCCCC"> cannot believe it's a real surface</font>

580
00:28:13,900 --> 00:28:19,610
object because that's the first one

581
00:28:16,780 --> 00:28:22,250
<font color="#E5E5E5">availability I showed here this time we</font>

582
00:28:19,610 --> 00:28:26,840
can put different<font color="#CCCCCC"> V table pointer for</font>

583
00:28:22,250 --> 00:28:29,240
example which will lead to execution of

584
00:28:26,840 --> 00:28:31,730
the kernel to somewhere<font color="#E5E5E5"> else</font><font color="#CCCCCC"> you want</font>

585
00:28:29,240 --> 00:28:33,520
and ultimately our goal is to<font color="#CCCCCC"> get can</font>

586
00:28:31,730 --> 00:28:37,420
<font color="#CCCCCC">read write gives</font>

587
00:28:33,520 --> 00:28:40,210
sell food<font color="#CCCCCC"> and enjoy</font><font color="#E5E5E5"> your</font><font color="#CCCCCC"> life so again</font>

588
00:28:37,420 --> 00:28:48,130
and let's see how<font color="#E5E5E5"> we</font><font color="#CCCCCC"> take advantages of</font>

589
00:28:40,210 --> 00:28:50,860
an advantage<font color="#E5E5E5"> of the absolute</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> so again</font>

590
00:28:48,130 --> 00:28:53,410
<font color="#CCCCCC">our goal</font><font color="#E5E5E5"> is to lick a constant</font><font color="#CCCCCC"> journal</font>

591
00:28:50,860 --> 00:28:56,229
address so we can<font color="#E5E5E5"> calculate this slide</font>

592
00:28:53,410 --> 00:28:59,710
between<font color="#CCCCCC"> the leeks address and the</font>

593
00:28:56,230 --> 00:29:02,650
original<font color="#CCCCCC"> artists</font><font color="#E5E5E5"> so again X has to</font><font color="#CCCCCC"> be a</font>

594
00:28:59,710 --> 00:29:04,690
valid<font color="#CCCCCC"> journalist so we do have</font><font color="#E5E5E5"> a valid</font>

595
00:29:02,650 --> 00:29:07,180
<font color="#E5E5E5">kernel address we have the i/o surface</font>

596
00:29:04,690 --> 00:29:09,790
object which is a can a valid key others

597
00:29:07,180 --> 00:29:13,020
<font color="#E5E5E5">so let's start to see if we can somehow</font>

598
00:29:09,790 --> 00:29:15,010
<font color="#CCCCCC">leak something</font><font color="#E5E5E5"> constant from the coladas</font>

599
00:29:13,020 --> 00:29:17,530
obviously the first thing<font color="#CCCCCC"> that comes to</font>

600
00:29:15,010 --> 00:29:20,010
mind is<font color="#CCCCCC"> the</font><font color="#E5E5E5"> V table because it's</font><font color="#CCCCCC"> always</font>

601
00:29:17,530 --> 00:29:23,760
it's a<font color="#E5E5E5"> content is constant</font><font color="#CCCCCC"> Cutlass</font>

602
00:29:20,010 --> 00:29:28,690
always slided from the candelabras so

603
00:29:23,760 --> 00:29:31,660
that's the<font color="#CCCCCC"> Isle surface object and again</font>

604
00:29:28,690 --> 00:29:39,780
<font color="#E5E5E5">these are the offsets we have we need</font><font color="#CCCCCC"> X</font>

605
00:29:31,660 --> 00:29:47,020
18<font color="#CCCCCC"> 1</font><font color="#E5E5E5"> C and 3 C so 18 is that one C is</font>

606
00:29:39,780 --> 00:29:50,230
<font color="#E5E5E5">also that and 3 C is the current is the</font>

607
00:29:47,020 --> 00:29:55,900
memory descriptor and unfortunately this

608
00:29:50,230 --> 00:29:58,180
<font color="#CCCCCC">is never now and remember</font><font color="#E5E5E5"> this crypto is</font>

609
00:29:55,900 --> 00:30:00,340
the memo is<font color="#E5E5E5"> that actually it's the</font>

610
00:29:58,180 --> 00:30:02,530
actual<font color="#E5E5E5"> memory that the object</font><font color="#CCCCCC"> that map's</font>

611
00:30:00,340 --> 00:30:05,470
the<font color="#CCCCCC"> data of the</font><font color="#E5E5E5"> earth surface</font><font color="#CCCCCC"> so of</font>

612
00:30:02,530 --> 00:30:07,480
course this is<font color="#CCCCCC"> also never not so we</font>

613
00:30:05,470 --> 00:30:11,290
can't unfortunately<font color="#CCCCCC"> leak the V table of</font>

614
00:30:07,480 --> 00:30:15,120
the<font color="#E5E5E5"> i/o surface but lucky for us</font>

615
00:30:11,290 --> 00:30:18,399
<font color="#CCCCCC">pirate surface is a</font><font color="#E5E5E5"> very big object so I</font>

616
00:30:15,120 --> 00:30:20,290
just<font color="#E5E5E5"> reversed I just kept understanding</font>

617
00:30:18,400 --> 00:30:24,100
<font color="#CCCCCC">what's the other parameters the</font><font color="#E5E5E5"> other</font>

618
00:30:20,290 --> 00:30:27,430
variables of the object are so our

619
00:30:24,100 --> 00:30:29,290
surface<font color="#E5E5E5"> creates and an object</font><font color="#CCCCCC"> surface</font>

620
00:30:27,430 --> 00:30:31,330
<font color="#E5E5E5">maintains the list of something called</font>

621
00:30:29,290 --> 00:30:33,040
<font color="#E5E5E5">IO fence we don't really have to</font>

622
00:30:31,330 --> 00:30:35,740
understand a lot<font color="#CCCCCC"> about it</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> just a</font>

623
00:30:33,040 --> 00:30:39,520
second ization object that<font color="#E5E5E5"> our surface</font>

624
00:30:35,740 --> 00:30:42,910
uses it<font color="#E5E5E5"> so it actually has a list of</font>

625
00:30:39,520 --> 00:30:45,639
those<font color="#E5E5E5"> and lucky for us after that list</font>

626
00:30:42,910 --> 00:30:48,849
<font color="#E5E5E5">there is a lot</font><font color="#CCCCCC"> of controllable</font>

627
00:30:45,639 --> 00:30:52,029
information<font color="#E5E5E5"> these are called bulks I</font>

628
00:30:48,849 --> 00:30:54,489
have no idea what they actually<font color="#E5E5E5"> used for</font>

629
00:30:52,029 --> 00:30:57,249
<font color="#CCCCCC">but we can completely control them so</font>

630
00:30:54,489 --> 00:31:01,119
<font color="#CCCCCC">everything we see here is</font><font color="#E5E5E5"> completely</font>

631
00:30:57,249 --> 00:31:04,989
<font color="#E5E5E5">controlled</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> the user</font><font color="#CCCCCC"> so we want to</font>

632
00:31:01,119 --> 00:31:07,299
<font color="#E5E5E5">lick either one of those lists so lucky</font>

633
00:31:04,989 --> 00:31:10,929
<font color="#E5E5E5">for us if we control everything here we</font>

634
00:31:07,299 --> 00:31:14,109
<font color="#E5E5E5">are able</font><font color="#CCCCCC"> to actually click one of the 1n</font>

635
00:31:10,929 --> 00:31:16,570
<font color="#E5E5E5">and I offense object so now once we have</font>

636
00:31:14,109 --> 00:31:20,678
<font color="#E5E5E5">it let's see how our</font><font color="#CCCCCC"> face looks</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> when</font>

637
00:31:16,570 --> 00:31:23,049
we can lick<font color="#E5E5E5"> its variable so most of the</font>

638
00:31:20,679 --> 00:31:27,940
of the offsets we<font color="#E5E5E5"> need to be zero or not</font>

639
00:31:23,049 --> 00:31:31,389
<font color="#CCCCCC">snarl lucky for us the last one is zero</font>

640
00:31:27,940 --> 00:31:34,479
if the<font color="#E5E5E5"> eye offense is in a surface kill</font>

641
00:31:31,389 --> 00:31:36,189
now because we lick the<font color="#E5E5E5"> eye</font><font color="#CCCCCC"> offence</font><font color="#E5E5E5"> form</font>

642
00:31:34,479 --> 00:31:37,989
a surface<font color="#CCCCCC"> skill that</font><font color="#E5E5E5"> it must be in</font>

643
00:31:36,190 --> 00:31:40,209
<font color="#E5E5E5">surface</font><font color="#CCCCCC"> skill which means completed is</font>

644
00:31:37,989 --> 00:31:44,219
never zero in<font color="#E5E5E5"> our case so we can lick</font>

645
00:31:40,209 --> 00:31:47,769
the<font color="#CCCCCC"> vtable and</font><font color="#E5E5E5"> calculate the</font><font color="#CCCCCC"> aslo</font><font color="#E5E5E5"> so</font>

646
00:31:44,219 --> 00:31:50,109
back to our plan we create an<font color="#CCCCCC"> object in</font>

647
00:31:47,769 --> 00:31:53,169
our surface object<font color="#CCCCCC"> lick the address</font><font color="#E5E5E5"> now</font>

648
00:31:50,109 --> 00:31:56,739
<font color="#E5E5E5">we can lick a</font><font color="#CCCCCC"> vtable of an</font><font color="#E5E5E5"> eye</font><font color="#CCCCCC"> offence</font>

649
00:31:53,169 --> 00:32:00,519
<font color="#E5E5E5">so we can calculate the</font><font color="#CCCCCC"> ksl of slide 3d</font>

650
00:31:56,739 --> 00:32:04,269
surface spray<font color="#E5E5E5"> with a fake object with a</font>

651
00:32:00,519 --> 00:32:08,019
fake<font color="#CCCCCC"> v table and then hijack the code</font>

652
00:32:04,269 --> 00:32:11,289
execution<font color="#E5E5E5"> now what I wanted to do here</font>

653
00:32:08,019 --> 00:32:14,529
is to have<font color="#E5E5E5"> the best spray the best</font>

654
00:32:11,289 --> 00:32:16,690
reliable spray ever so that I wanted<font color="#E5E5E5"> to</font>

655
00:32:14,529 --> 00:32:19,989
make the exploit<font color="#E5E5E5"> as</font><font color="#CCCCCC"> reliable and stable</font>

656
00:32:16,690 --> 00:32:21,849
<font color="#E5E5E5">as</font><font color="#CCCCCC"> possible</font><font color="#E5E5E5"> and now for those of</font><font color="#CCCCCC"> you who</font>

657
00:32:19,989 --> 00:32:26,950
are not familiar with I was spraying

658
00:32:21,849 --> 00:32:30,428
<font color="#E5E5E5">there is a very common play</font><font color="#CCCCCC"> Colonel hips</font>

659
00:32:26,950 --> 00:32:33,759
playing iOS and<font color="#E5E5E5"> our six as</font><font color="#CCCCCC"> well and I</font>

660
00:32:30,429 --> 00:32:37,329
all uncivilized XML<font color="#E5E5E5"> you just give an XML</font>

661
00:32:33,759 --> 00:32:39,219
to the kernel they can serialize the XML

662
00:32:37,329 --> 00:32:43,168
object<font color="#E5E5E5"> which by the way had a very</font>

663
00:32:39,219 --> 00:32:45,070
interesting vulnerability I think it was

664
00:32:43,169 --> 00:32:48,459
last<font color="#E5E5E5"> year</font><font color="#CCCCCC"> yeah</font>

665
00:32:45,070 --> 00:32:52,299
and anyway<font color="#E5E5E5"> so but there are a few</font>

666
00:32:48,459 --> 00:32:55,529
<font color="#CCCCCC">problems with</font><font color="#E5E5E5"> that first of all there is</font>

667
00:32:52,299 --> 00:32:58,040
<font color="#E5E5E5">up to this presentation I didn't see any</font>

668
00:32:55,529 --> 00:33:01,610
persistent family<font color="#E5E5E5"> so usually</font>

669
00:32:58,040 --> 00:33:04,129
<font color="#CCCCCC">can you just</font><font color="#E5E5E5"> answer as the XML extract</font>

670
00:33:01,610 --> 00:33:06,679
<font color="#E5E5E5">the relevant information and then</font>

671
00:33:04,130 --> 00:33:08,600
immediately free that information<font color="#E5E5E5"> and I</font>

672
00:33:06,680 --> 00:33:10,430
<font color="#E5E5E5">also didn't want any limitation on the</font>

673
00:33:08,600 --> 00:33:14,840
spread data and I wanted<font color="#E5E5E5"> to be able to</font>

674
00:33:10,430 --> 00:33:16,520
spray as many times<font color="#CCCCCC"> as possible and so</font>

675
00:33:14,840 --> 00:33:19,520
luckily<font color="#CCCCCC"> if lucky for</font><font color="#E5E5E5"> us</font>

676
00:33:16,520 --> 00:33:22,070
I'll surface maintains a list of

677
00:33:19,520 --> 00:33:26,840
properties which are<font color="#CCCCCC"> written as an XML</font>

678
00:33:22,070 --> 00:33:29,860
data<font color="#E5E5E5"> so why do we select</font><font color="#CCCCCC"> online for</font>

679
00:33:26,840 --> 00:33:34,100
those<font color="#E5E5E5"> of you interested so what it does</font>

680
00:33:29,860 --> 00:33:36,709
it just<font color="#CCCCCC"> uncivilized or invalid data then</font>

681
00:33:34,100 --> 00:33:39,770
it gets the first object as the<font color="#CCCCCC"> value</font>

682
00:33:36,710 --> 00:33:42,140
the second object as<font color="#CCCCCC"> the key</font><font color="#E5E5E5"> and then it</font>

683
00:33:39,770 --> 00:33:45,530
<font color="#E5E5E5">just</font><font color="#CCCCCC"> puts that into dictionary</font>

684
00:33:42,140 --> 00:33:48,380
dictionary which<font color="#CCCCCC"> our surface holds</font>

685
00:33:45,530 --> 00:33:51,649
<font color="#E5E5E5">that's how the set value function looks</font>

686
00:33:48,380 --> 00:33:52,340
like<font color="#E5E5E5"> it</font><font color="#CCCCCC"> just checks</font><font color="#E5E5E5"> that the key the</font><font color="#CCCCCC"> key</font>

687
00:33:51,650 --> 00:33:55,070
is nuts

688
00:33:52,340 --> 00:33:57,949
creation properties and if it's not it

689
00:33:55,070 --> 00:34:00,439
just<font color="#E5E5E5"> calls the it just takes</font><font color="#CCCCCC"> the all</font>

690
00:33:57,950 --> 00:34:02,930
properties dictionary<font color="#E5E5E5"> and</font><font color="#CCCCCC"> such puts</font><font color="#E5E5E5"> the</font>

691
00:34:00,440 --> 00:34:07,820
<font color="#E5E5E5">other object which</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the key and the</font>

692
00:34:02,930 --> 00:34:10,250
value is<font color="#E5E5E5"> supplied so yeah so this</font><font color="#CCCCCC"> is</font>

693
00:34:07,820 --> 00:34:12,259
<font color="#CCCCCC">very good for us</font><font color="#E5E5E5"> because it's persistent</font>

694
00:34:10,250 --> 00:34:14,120
in the<font color="#E5E5E5"> memory because these are</font><font color="#CCCCCC"> only</font>

695
00:34:12,260 --> 00:34:16,850
<font color="#E5E5E5">properties</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> being kept in the</font>

696
00:34:14,120 --> 00:34:19,100
memory we<font color="#E5E5E5"> can spray pretty much any data</font>

697
00:34:16,850 --> 00:34:20,960
we want<font color="#E5E5E5"> because there was no specific</font>

698
00:34:19,100 --> 00:34:24,710
limitation<font color="#E5E5E5"> the implementation as long as</font>

699
00:34:20,960 --> 00:34:26,929
it's valid as long<font color="#CCCCCC"> as</font><font color="#E5E5E5"> our XML is valid</font>

700
00:34:24,710 --> 00:34:29,000
<font color="#E5E5E5">and we can do that as many</font><font color="#CCCCCC"> times as we</font>

701
00:34:26,929 --> 00:34:31,970
<font color="#CCCCCC">want</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> put as many values as you</font>

702
00:34:29,000 --> 00:34:34,668
<font color="#E5E5E5">want into the i/o surface object and we</font>

703
00:34:31,969 --> 00:34:37,580
<font color="#E5E5E5">can create a door thing that is an</font>

704
00:34:34,668 --> 00:34:39,350
actual limitation on the number<font color="#E5E5E5"> of i/o</font>

705
00:34:37,580 --> 00:34:42,529
surfaces<font color="#E5E5E5"> just</font><font color="#CCCCCC"> the common memory</font>

706
00:34:39,350 --> 00:34:44,360
limitation and<font color="#E5E5E5"> but that's not</font><font color="#CCCCCC"> everything</font>

707
00:34:42,530 --> 00:34:48,470
about display<font color="#E5E5E5"> and this is the first time</font>

708
00:34:44,360 --> 00:34:52,880
I saw a good channel<font color="#E5E5E5"> generic</font><font color="#CCCCCC"> Kalakh can</font>

709
00:34:48,469 --> 00:34:55,159
display in iOS like that it's not<font color="#E5E5E5"> only</font>

710
00:34:52,880 --> 00:34:58,580
<font color="#E5E5E5">that you</font><font color="#CCCCCC"> can put and set those</font>

711
00:34:55,159 --> 00:35:00,589
properties you can<font color="#E5E5E5"> also with those</font>

712
00:34:58,580 --> 00:35:02,150
properties<font color="#CCCCCC"> back because that's that's</font>

713
00:35:00,590 --> 00:35:03,320
the point<font color="#E5E5E5"> of those properties if you can</font>

714
00:35:02,150 --> 00:35:06,980
set them<font color="#E5E5E5"> you can also read them back</font>

715
00:35:03,320 --> 00:35:09,620
which means that we can also everything

716
00:35:06,980 --> 00:35:11,350
respite can be read back<font color="#E5E5E5"> so for example</font>

717
00:35:09,620 --> 00:35:13,390
if we<font color="#E5E5E5"> spray the</font><font color="#CCCCCC"> channel</font>

718
00:35:11,350 --> 00:35:16,930
and the<font color="#CCCCCC"> channel modifiers our spread</font>

719
00:35:13,390 --> 00:35:20,109
data<font color="#E5E5E5"> due</font><font color="#CCCCCC"> to another vulnerability</font><font color="#E5E5E5"> we can</font>

720
00:35:16,930 --> 00:35:24,490
just read back<font color="#CCCCCC"> from any Kiwi ones</font><font color="#E5E5E5"> our</font>

721
00:35:20,110 --> 00:35:27,580
data so eventually we<font color="#E5E5E5"> can also also hit</font>

722
00:35:24,490 --> 00:35:30,459
hit our information<font color="#E5E5E5"> so this is</font><font color="#CCCCCC"> extremely</font>

723
00:35:27,580 --> 00:35:32,710
<font color="#CCCCCC">powerful it can save us</font><font color="#E5E5E5"> for example an</font>

724
00:35:30,460 --> 00:35:36,130
information disclosure<font color="#E5E5E5"> because again if</font>

725
00:35:32,710 --> 00:35:38,950
the if for<font color="#CCCCCC"> example we we spray in an</font>

726
00:35:36,130 --> 00:35:41,740
object and then<font color="#E5E5E5"> the</font><font color="#CCCCCC"> kernel are no puts</font>

727
00:35:38,950 --> 00:35:44,020
it into a<font color="#E5E5E5"> list we can</font><font color="#CCCCCC"> leak that list</font><font color="#E5E5E5"> if</font>

728
00:35:41,740 --> 00:35:47,339
it's a linked list<font color="#CCCCCC"> just that's</font><font color="#E5E5E5"> just one</font>

729
00:35:44,020 --> 00:35:51,340
<font color="#CCCCCC">example and this is extremely</font><font color="#E5E5E5"> useful for</font>

730
00:35:47,340 --> 00:35:56,500
<font color="#E5E5E5">us playing in a camel hip</font><font color="#CCCCCC"> sprain in iOS</font>

731
00:35:51,340 --> 00:35:59,200
and<font color="#CCCCCC"> o6</font><font color="#E5E5E5"> now again my goal is to the goals</font>

732
00:35:56,500 --> 00:36:01,630
<font color="#CCCCCC">are have arbitrary kernel he general</font>

733
00:35:59,200 --> 00:36:03,970
<font color="#E5E5E5">memory read write and we I also want to</font>

734
00:36:01,630 --> 00:36:05,320
be able<font color="#E5E5E5"> to call any function and I want</font>

735
00:36:03,970 --> 00:36:09,700
to be do<font color="#E5E5E5"> that to be able to</font><font color="#CCCCCC"> do that</font>

736
00:36:05,320 --> 00:36:13,450
<font color="#E5E5E5">anytime</font><font color="#CCCCCC"> I want</font><font color="#E5E5E5"> without any statistics in</font>

737
00:36:09,700 --> 00:36:17,649
mind so deterministically<font color="#CCCCCC"> so our current</font>

738
00:36:13,450 --> 00:36:20,169
primitive is to hijack<font color="#CCCCCC"> I put a fake V</font>

739
00:36:17,650 --> 00:36:21,790
table<font color="#E5E5E5"> so we can we</font><font color="#CCCCCC"> can hijack any</font>

740
00:36:20,170 --> 00:36:23,890
<font color="#E5E5E5">channel</font><font color="#CCCCCC"> out of three ones so you</font><font color="#E5E5E5"> can</font>

741
00:36:21,790 --> 00:36:26,800
<font color="#E5E5E5">call any candle address we want and we</font>

742
00:36:23,890 --> 00:36:29,980
control<font color="#E5E5E5"> only or we control only the</font>

743
00:36:26,800 --> 00:36:34,960
first parameter which is<font color="#CCCCCC"> the</font><font color="#E5E5E5"> actual the</font>

744
00:36:29,980 --> 00:36:37,450
actual spray of react we had so now it's

745
00:36:34,960 --> 00:36:39,970
<font color="#E5E5E5">time for to look</font><font color="#CCCCCC"> for the gadget</font><font color="#E5E5E5"> so there</font>

746
00:36:37,450 --> 00:36:40,960
is a very fair<font color="#CCCCCC"> now</font><font color="#E5E5E5"> it's a very famous</font>

747
00:36:39,970 --> 00:36:44,589
gadget called

748
00:36:40,960 --> 00:36:50,280
on<font color="#CCCCCC"> unsterilized theorized again we</font>

749
00:36:44,590 --> 00:36:53,020
control<font color="#CCCCCC"> x 0 3 control both these X 1 X 3</font>

750
00:36:50,280 --> 00:36:57,580
then we control<font color="#E5E5E5"> X 9 because it also</font>

751
00:36:53,020 --> 00:37:00,220
<font color="#E5E5E5">derives from extent and eventually X 3</font>

752
00:36:57,580 --> 00:37:02,650
is again something that we control so

753
00:37:00,220 --> 00:37:06,220
this gives us<font color="#E5E5E5"> the</font><font color="#CCCCCC"> opportunity to</font><font color="#E5E5E5"> control</font>

754
00:37:02,650 --> 00:37:09,220
the first<font color="#CCCCCC"> parameter X</font><font color="#E5E5E5"> 0 the second</font>

755
00:37:06,220 --> 00:37:11,200
parameter X 1 and we can jump to any

756
00:37:09,220 --> 00:37:13,720
<font color="#E5E5E5">function</font><font color="#CCCCCC"> 1 we</font><font color="#E5E5E5"> are not able to control</font>

757
00:37:11,200 --> 00:37:16,509
the third parameter<font color="#E5E5E5"> however so what I</font>

758
00:37:13,720 --> 00:37:19,720
did here<font color="#CCCCCC"> I wanted</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> con a I</font>

759
00:37:16,510 --> 00:37:20,910
had to put interesting<font color="#E5E5E5"> stuff</font><font color="#CCCCCC"> into extent</font>

760
00:37:19,720 --> 00:37:26,160
and

761
00:37:20,910 --> 00:37:31,830
<font color="#E5E5E5">18 so extent is just the kernel spread</font>

762
00:37:26,160 --> 00:37:35,069
address plus some offset X 18 is what we

763
00:37:31,830 --> 00:37:40,230
<font color="#E5E5E5">will see soon be the third parameter for</font>

764
00:37:35,070 --> 00:37:44,400
a final<font color="#E5E5E5"> vote</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> it free is just that see</font>

765
00:37:40,230 --> 00:37:47,910
Scott I'll handle size twice and X 20 is

766
00:37:44,400 --> 00:37:50,310
just<font color="#E5E5E5"> calling unsterilized</font><font color="#CCCCCC"> also always</font>

767
00:37:47,910 --> 00:37:51,750
<font color="#E5E5E5">say</font><font color="#CCCCCC"> let us analyze again what will</font>

768
00:37:50,310 --> 00:37:56,060
happen is<font color="#CCCCCC"> that we will</font><font color="#E5E5E5"> get to</font><font color="#CCCCCC"> that</font>

769
00:37:51,750 --> 00:38:01,530
function<font color="#CCCCCC"> again and</font><font color="#E5E5E5"> we are</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to have</font>

770
00:37:56,060 --> 00:38:04,110
to use<font color="#E5E5E5"> that as the first parameter the</font>

771
00:38:01,530 --> 00:38:07,710
second parameter is<font color="#E5E5E5"> going to be X 18</font>

772
00:38:04,110 --> 00:38:10,890
<font color="#E5E5E5">from before because we control X 1</font><font color="#CCCCCC"> so if</font>

773
00:38:07,710 --> 00:38:13,170
we call<font color="#E5E5E5"> it again it's going to be</font><font color="#CCCCCC"> X 8</font><font color="#E5E5E5"> so</font>

774
00:38:10,890 --> 00:38:16,109
it's the third parameter this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the</font>

775
00:38:13,170 --> 00:38:19,440
<font color="#E5E5E5">fill parameter the the second parameter</font>

776
00:38:16,110 --> 00:38:23,130
<font color="#E5E5E5">is going it is going to be LD cache size</font>

777
00:38:19,440 --> 00:38:25,910
handler which is a sis cattle and the

778
00:38:23,130 --> 00:38:30,000
function we<font color="#CCCCCC"> are going to call is copy</font><font color="#E5E5E5"> in</font>

779
00:38:25,910 --> 00:38:33,170
which gives us a new industry primitive

780
00:38:30,000 --> 00:38:37,320
<font color="#E5E5E5">we can call any function we want and</font>

781
00:38:33,170 --> 00:38:40,290
control the first three arguments which

782
00:38:37,320 --> 00:38:43,320
is enough<font color="#E5E5E5"> for a single deterministic</font>

783
00:38:40,290 --> 00:38:46,670
<font color="#E5E5E5">right on the kernel arbitrary address</font>

784
00:38:43,320 --> 00:38:53,130
arbitrary data and arbitrary size so

785
00:38:46,670 --> 00:38:55,020
what should<font color="#CCCCCC"> be over</font><font color="#E5E5E5"> right so</font><font color="#CCCCCC"> a small so</font>

786
00:38:53,130 --> 00:39:00,510
my guess most you know there is a new

787
00:38:55,020 --> 00:39:02,630
mitigation Apple did<font color="#E5E5E5"> its</font><font color="#CCCCCC"> kpp or</font><font color="#E5E5E5"> a MCC so</font>

788
00:39:00,510 --> 00:39:06,690
unfortunately we can't<font color="#E5E5E5"> override</font>

789
00:39:02,630 --> 00:39:09,270
constants<font color="#E5E5E5"> or we can and we also cannot</font>

790
00:39:06,690 --> 00:39:12,350
override kernel make a text so kernel

791
00:39:09,270 --> 00:39:15,660
code<font color="#E5E5E5"> so we cannot override</font>

792
00:39:12,350 --> 00:39:18,350
we cannot change<font color="#E5E5E5"> V tables because they</font>

793
00:39:15,660 --> 00:39:22,589
are<font color="#E5E5E5"> constant but what Apple didn't</font>

794
00:39:18,350 --> 00:39:24,960
protect is<font color="#E5E5E5"> this cattle</font>

795
00:39:22,590 --> 00:39:27,390
now the reason<font color="#E5E5E5"> sis cattle are not</font>

796
00:39:24,960 --> 00:39:30,200
protected is that they are<font color="#E5E5E5"> dynamically</font>

797
00:39:27,390 --> 00:39:33,129
loaded and therefore they cannot be

798
00:39:30,200 --> 00:39:35,230
static they<font color="#E5E5E5"> cannot be it</font>

799
00:39:33,130 --> 00:39:38,380
that's why the function point tell us

800
00:39:35,230 --> 00:39:39,069
which Apple did<font color="#CCCCCC"> not protect and we can</font>

801
00:39:38,380 --> 00:39:41,339
override<font color="#E5E5E5"> it</font>

802
00:39:39,069 --> 00:39:44,710
so again our goal<font color="#E5E5E5"> is to be able to</font>

803
00:39:41,339 --> 00:39:47,589
authorize to be<font color="#E5E5E5"> able to be able to read</font>

804
00:39:44,710 --> 00:39:48,069
write<font color="#CCCCCC"> and Bob deterministically</font><font color="#E5E5E5"> anytime</font>

805
00:39:47,589 --> 00:39:50,230
we want

806
00:39:48,069 --> 00:39:52,180
so what it is and by of course<font color="#CCCCCC"> wiper</font>

807
00:39:50,230 --> 00:39:54,819
<font color="#E5E5E5">sync npc and all the new medications</font>

808
00:39:52,180 --> 00:39:59,200
<font color="#CCCCCC">Smurfs</font><font color="#E5E5E5"> and everything</font><font color="#CCCCCC"> so what I did</font><font color="#E5E5E5"> was</font>

809
00:39:54,819 --> 00:40:03,369
<font color="#CCCCCC">I of about - Cisco tells one of them to</font>

810
00:39:59,200 --> 00:40:06,308
walk to my<font color="#E5E5E5"> spread data to my splayed</font>

811
00:40:03,369 --> 00:40:08,589
<font color="#CCCCCC">channel address and the second one is</font><font color="#E5E5E5"> to</font>

812
00:40:06,309 --> 00:40:10,089
<font color="#E5E5E5">modify my sprite channel address again</font>

813
00:40:08,589 --> 00:40:13,420
because I wanted<font color="#E5E5E5"> to be deterministic so</font>

814
00:40:10,089 --> 00:40:15,849
once we established<font color="#E5E5E5"> a successful single</font>

815
00:40:13,420 --> 00:40:19,690
right<font color="#E5E5E5"> I want to be able to</font><font color="#CCCCCC"> establish as</font>

816
00:40:15,849 --> 00:40:24,430
many red lights<font color="#CCCCCC"> as possible</font><font color="#E5E5E5"> so the way</font>

817
00:40:19,690 --> 00:40:28,930
it looks is<font color="#CCCCCC"> that I have two sisters so</font>

818
00:40:24,430 --> 00:40:31,868
the first<font color="#E5E5E5"> one of them</font><font color="#CCCCCC"> over lights</font><font color="#E5E5E5"> our</font>

819
00:40:28,930 --> 00:40:34,480
spreads data which is which resides in

820
00:40:31,869 --> 00:40:38,109
the kernel so we<font color="#CCCCCC"> over also we overcome</font>

821
00:40:34,480 --> 00:40:40,960
this map<font color="#CCCCCC"> our mitigation the second</font><font color="#E5E5E5"> sis</font>

822
00:40:38,109 --> 00:40:44,470
cattle takes a small portion from our

823
00:40:40,960 --> 00:40:46,839
spread data and<font color="#CCCCCC"> wops based</font><font color="#E5E5E5"> and issues</font>

824
00:40:44,470 --> 00:40:50,680
hope to<font color="#E5E5E5"> always realize or serialize</font>

825
00:40:46,839 --> 00:40:54,038
based on this data so again what I want

826
00:40:50,680 --> 00:40:57,640
to do to<font color="#E5E5E5"> actually issue any call is call</font>

827
00:40:54,039 --> 00:41:00,339
<font color="#E5E5E5">sis cattle and once this cattle to</font>

828
00:40:57,640 --> 00:41:03,368
modify<font color="#CCCCCC"> my data call this second one to</font>

829
00:41:00,339 --> 00:41:07,420
use my kernel resided<font color="#E5E5E5"> modified data and</font>

830
00:41:03,369 --> 00:41:10,390
then<font color="#CCCCCC"> we can we can get</font><font color="#E5E5E5"> to any others to</font>

831
00:41:07,420 --> 00:41:13,599
<font color="#CCCCCC">job or</font><font color="#E5E5E5"> up to any other swans so the way</font>

832
00:41:10,390 --> 00:41:19,499
it looks is first of all we we have two

833
00:41:13,599 --> 00:41:19,499
valid<font color="#CCCCCC"> Cisco cells we call formal first</font>

834
00:41:19,829 --> 00:41:26,680
call<font color="#E5E5E5"> we call our</font><font color="#CCCCCC"> sterilizer serialize we</font>

835
00:41:23,470 --> 00:41:29,439
control only<font color="#E5E5E5"> the first two arguments we</font>

836
00:41:26,680 --> 00:41:32,470
call over<font color="#E5E5E5"> serialize</font><font color="#CCCCCC"> until all</font><font color="#E5E5E5"> civilized</font>

837
00:41:29,440 --> 00:41:35,890
<font color="#CCCCCC">civilized</font><font color="#E5E5E5"> again this time we control</font>

838
00:41:32,470 --> 00:41:39,430
three arguments we call from<font color="#E5E5E5"> that</font><font color="#CCCCCC"> I mean</font>

839
00:41:35,890 --> 00:41:41,769
we call again using those<font color="#E5E5E5"> control three</font>

840
00:41:39,430 --> 00:41:45,098
arguments we call copying which

841
00:41:41,769 --> 00:41:45,999
overrides<font color="#E5E5E5"> those two sis</font><font color="#CCCCCC"> Qatar's and now</font>

842
00:41:45,099 --> 00:41:49,149
every time<font color="#CCCCCC"> I want to</font>

843
00:41:45,999 --> 00:41:52,078
call some function<font color="#CCCCCC"> I call once eschaton</font>

844
00:41:49,149 --> 00:41:54,759
<font color="#E5E5E5">this cattle calls copying which is</font>

845
00:41:52,079 --> 00:41:57,099
constant which constantly overrides<font color="#E5E5E5"> a</font>

846
00:41:54,759 --> 00:42:00,219
specific kernel address which<font color="#CCCCCC"> is our</font>

847
00:41:57,099 --> 00:42:02,679
spread data so we<font color="#E5E5E5"> override some</font>

848
00:42:00,219 --> 00:42:06,209
parameters here<font color="#CCCCCC"> this second sis cattle</font>

849
00:42:02,679 --> 00:42:09,309
will call the oil<font color="#E5E5E5"> de-serialize</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> gadget</font>

850
00:42:06,209 --> 00:42:11,769
which will call itself again to control

851
00:42:09,309 --> 00:42:15,639
three arguments which which ultimately

852
00:42:11,769 --> 00:42:21,008
<font color="#E5E5E5">will call our modified data this way we</font>

853
00:42:15,639 --> 00:42:23,969
can achieve<font color="#E5E5E5"> kernel</font><font color="#CCCCCC"> readwrite and kernel</font>

854
00:42:21,009 --> 00:42:28,989
function call deterministically<font color="#CCCCCC"> and so</font>

855
00:42:23,969 --> 00:42:30,789
we have we have<font color="#CCCCCC"> cantaloupe</font><font color="#E5E5E5"> so the way</font>

856
00:42:28,989 --> 00:42:33,039
how<font color="#CCCCCC"> are we going</font><font color="#E5E5E5"> to achieve</font><font color="#CCCCCC"> cannily</font>

857
00:42:30,789 --> 00:42:35,049
<font color="#CCCCCC">rights so because we can call any kind</font>

858
00:42:33,039 --> 00:42:39,099
<font color="#E5E5E5">address we</font><font color="#CCCCCC"> can also call copying and</font>

859
00:42:35,049 --> 00:42:40,329
copy out which means<font color="#CCCCCC"> we have arbitrary</font>

860
00:42:39,099 --> 00:42:43,149
<font color="#CCCCCC">candlelit</font><font color="#E5E5E5"> light from user</font>

861
00:42:40,329 --> 00:42:45,549
deterministically<font color="#CCCCCC"> and that's it we</font>

862
00:42:43,149 --> 00:42:46,839
that's the<font color="#CCCCCC"> exploit the capabilities were</font>

863
00:42:45,549 --> 00:42:51,519
looking for and we<font color="#E5E5E5"> successfully</font>

864
00:42:46,839 --> 00:42:56,919
successfully achieved them<font color="#CCCCCC"> so a few</font><font color="#E5E5E5"> auto</font>

865
00:42:51,519 --> 00:42:59,529
jailbreak the exploit is available on

866
00:42:56,919 --> 00:43:06,339
github you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> download it and just use</font>

867
00:42:59,529 --> 00:43:10,839
it<font color="#E5E5E5"> in</font><font color="#CCCCCC"> goods</font><font color="#E5E5E5"> friendly</font><font color="#CCCCCC"> behavior and not</font><font color="#E5E5E5"> in</font>

868
00:43:06,339 --> 00:43:13,419
any unintended way about<font color="#CCCCCC"> jailbreaks so I</font>

869
00:43:10,839 --> 00:43:16,599
said before<font color="#CCCCCC"> that I</font><font color="#E5E5E5"> don't intend to walk</font>

870
00:43:13,419 --> 00:43:19,299
on a jailbreak<font color="#CCCCCC"> not</font><font color="#E5E5E5"> because I</font><font color="#CCCCCC"> am against</font>

871
00:43:16,599 --> 00:43:23,139
<font color="#E5E5E5">it I think</font><font color="#CCCCCC"> javac is a very important</font>

872
00:43:19,299 --> 00:43:25,989
power<font color="#E5E5E5"> part of iOS it's just that Cydia</font>

873
00:43:23,139 --> 00:43:28,299
<font color="#E5E5E5">in my opinion is not</font><font color="#CCCCCC"> good enough</font><font color="#E5E5E5"> we have</font>

874
00:43:25,989 --> 00:43:29,379
kernel exploits<font color="#E5E5E5"> we will always probably</font>

875
00:43:28,299 --> 00:43:34,239
<font color="#E5E5E5">have them</font>

876
00:43:29,379 --> 00:43:38,879
CD has to be refactored and changed<font color="#E5E5E5"> to</font>

877
00:43:34,239 --> 00:43:42,609
be able<font color="#CCCCCC"> to walk good with a MCC and kpp</font>

878
00:43:38,879 --> 00:43:45,038
now<font color="#CCCCCC"> Ziva I test the diva</font><font color="#E5E5E5"> on ten point</font>

879
00:43:42,609 --> 00:43:48,939
three point<font color="#E5E5E5"> one with with triple fetch</font>

880
00:43:45,039 --> 00:43:50,589
and I got it to be very stable and so at

881
00:43:48,939 --> 00:43:53,709
<font color="#E5E5E5">least ten point three point fund is</font>

882
00:43:50,589 --> 00:43:56,889
possible to be<font color="#E5E5E5"> a pound</font><font color="#CCCCCC"> if you want to</font>

883
00:43:53,709 --> 00:43:59,500
experiment<font color="#CCCCCC"> with that</font><font color="#E5E5E5"> ten</font><font color="#CCCCCC"> point two point</font>

884
00:43:56,889 --> 00:44:01,960
one already<font color="#E5E5E5"> has</font><font color="#CCCCCC"> a working</font><font color="#E5E5E5"> experts for</font>

885
00:43:59,500 --> 00:44:05,650
<font color="#E5E5E5">some devices</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> only the only reason</font>

886
00:44:01,960 --> 00:44:08,320
<font color="#CCCCCC">TenPoint</font><font color="#E5E5E5"> 3.1 wasn't implemented in my</font>

887
00:44:05,650 --> 00:44:10,390
opinion<font color="#CCCCCC"> it's just</font><font color="#E5E5E5"> um</font><font color="#CCCCCC"> just because of the</font>

888
00:44:08,320 --> 00:44:12,850
offsets nobody actually<font color="#E5E5E5"> took the</font><font color="#CCCCCC"> liberty</font>

889
00:44:10,390 --> 00:44:15,339
of modifying<font color="#E5E5E5"> the offsets for ten point</font>

890
00:44:12,850 --> 00:44:19,930
three point<font color="#CCCCCC"> one other than that I don't</font>

891
00:44:15,340 --> 00:44:22,060
see<font color="#E5E5E5"> why someone wouldn't use</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> by the</font>

892
00:44:19,930 --> 00:44:24,640
way someone did write a jailbreak for

893
00:44:22,060 --> 00:44:27,930
ten point two point one by using Ziva<font color="#CCCCCC"> I</font>

894
00:44:24,640 --> 00:44:31,150
didn't test it<font color="#E5E5E5"> myself though so</font>

895
00:44:27,930 --> 00:44:35,410
conclusion given<font color="#E5E5E5"> a little surprise and</font>

896
00:44:31,150 --> 00:44:37,750
this<font color="#E5E5E5"> is closure timeline so I must say</font>

897
00:44:35,410 --> 00:44:40,540
<font color="#E5E5E5">Apple are not abuse the first</font><font color="#CCCCCC"> vandal I'm</font>

898
00:44:37,750 --> 00:44:42,970
walking on but they<font color="#E5E5E5"> have been the</font><font color="#CCCCCC"> best</font>

899
00:44:40,540 --> 00:44:44,950
one<font color="#E5E5E5"> in communicating in communication</font>

900
00:44:42,970 --> 00:44:48,490
with security researchers they are very

901
00:44:44,950 --> 00:44:51,730
<font color="#E5E5E5">open and friendly they listened</font><font color="#CCCCCC"> listens</font>

902
00:44:48,490 --> 00:44:53,799
to my<font color="#E5E5E5"> opinion suggestions and they</font>

903
00:44:51,730 --> 00:44:55,690
actually cooperated with some<font color="#CCCCCC"> babies I</font>

904
00:44:53,800 --> 00:44:57,220
<font color="#E5E5E5">asked them to</font><font color="#CCCCCC"> do some</font><font color="#E5E5E5"> changes in the</font>

905
00:44:55,690 --> 00:44:59,380
advisory and they did it

906
00:44:57,220 --> 00:45:01,419
unlike other<font color="#CCCCCC"> vendors</font><font color="#E5E5E5"> and they never</font>

907
00:44:59,380 --> 00:45:04,270
ignored me and which is something<font color="#CCCCCC"> that</font>

908
00:45:01,420 --> 00:45:06,580
sounds that it sounds like<font color="#CCCCCC"> that's a way</font>

909
00:45:04,270 --> 00:45:08,980
<font color="#CCCCCC">to be but it</font><font color="#E5E5E5"> I mean other vendors just</font>

910
00:45:06,580 --> 00:45:13,330
<font color="#E5E5E5">stopped the communication for some</font>

911
00:45:08,980 --> 00:45:15,480
reason it<font color="#E5E5E5"> is compared currently in my</font>

912
00:45:13,330 --> 00:45:20,279
<font color="#E5E5E5">opinion the most secure operating system</font>

913
00:45:15,480 --> 00:45:24,460
<font color="#E5E5E5">the still some work still has to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> done</font>

914
00:45:20,280 --> 00:45:26,710
<font color="#CCCCCC">but I mean we are getting</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> FL</font>

915
00:45:24,460 --> 00:45:30,540
<font color="#E5E5E5">adding</font><font color="#CCCCCC"> ever led any new very powerful</font>

916
00:45:26,710 --> 00:45:33,910
mitigations<font color="#E5E5E5"> over the time now in iOS</font><font color="#CCCCCC"> 11</font>

917
00:45:30,540 --> 00:45:35,890
<font color="#CCCCCC">in</font><font color="#E5E5E5"> - eggs Apple fix all the bugs and</font>

918
00:45:33,910 --> 00:45:37,600
that's it we can<font color="#E5E5E5"> purple stuff and go</font>

919
00:45:35,890 --> 00:45:40,480
home<font color="#CCCCCC"> or not</font>

920
00:45:37,600 --> 00:45:43,420
and so I<font color="#E5E5E5"> just I wanted</font><font color="#CCCCCC"> to give a little</font>

921
00:45:40,480 --> 00:45:44,940
<font color="#CCCCCC">bit a</font><font color="#E5E5E5"> small sneak</font><font color="#CCCCCC"> peek about</font><font color="#E5E5E5"> a new</font>

922
00:45:43,420 --> 00:45:48,610
<font color="#CCCCCC">project we are working on</font>

923
00:45:44,940 --> 00:45:50,920
it's a<font color="#E5E5E5"> kernel exploits this time</font>

924
00:45:48,610 --> 00:45:54,480
accessible from<font color="#CCCCCC"> the sandbox a very</font>

925
00:45:50,920 --> 00:45:57,520
powerful<font color="#E5E5E5"> kernel buffer overflow</font>

926
00:45:54,480 --> 00:45:59,200
unfortunately<font color="#E5E5E5"> I can't give more</font>

927
00:45:57,520 --> 00:46:01,240
information<font color="#CCCCCC"> about that</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> Apple</font>

928
00:45:59,200 --> 00:46:05,049
asked me asks me enough<font color="#E5E5E5"> to but I</font>

929
00:46:01,240 --> 00:46:07,990
<font color="#E5E5E5">promised</font><font color="#CCCCCC"> to put a working for at least</font>

930
00:46:05,050 --> 00:46:10,620
the full crash<font color="#E5E5E5"> because I did not explore</font>

931
00:46:07,990 --> 00:46:12,779
it to be to<font color="#E5E5E5"> be completely working so far</font>

932
00:46:10,620 --> 00:46:15,960
<font color="#E5E5E5">like a full</font>

933
00:46:12,780 --> 00:46:19,110
would exploit<font color="#E5E5E5"> but I think it does have</font>

934
00:46:15,960 --> 00:46:22,590
potential<font color="#E5E5E5"> and what we see here is iPhone</font>

935
00:46:19,110 --> 00:46:24,540
<font color="#E5E5E5">10 11 point one point two</font><font color="#CCCCCC"> eleven eleven</font>

936
00:46:22,590 --> 00:46:26,790
point<font color="#E5E5E5"> two was released</font><font color="#CCCCCC"> this week</font><font color="#E5E5E5"> I</font>

937
00:46:24,540 --> 00:46:28,470
didn't have the time to<font color="#E5E5E5"> upgrade</font><font color="#CCCCCC"> and test</font>

938
00:46:26,790 --> 00:46:31,710
it I'm not<font color="#E5E5E5"> sure if Apple fix that or not</font>

939
00:46:28,470 --> 00:46:35,819
<font color="#E5E5E5">I think they did but I'm</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> sure if you</font>

940
00:46:31,710 --> 00:46:38,520
want I also have the device here with me

941
00:46:35,820 --> 00:46:40,400
so someone wants<font color="#CCCCCC"> to see</font><font color="#E5E5E5"> like the</font><font color="#CCCCCC"> version</font>

942
00:46:38,520 --> 00:46:42,800
and<font color="#E5E5E5"> everything and the device crashes</font>

943
00:46:40,400 --> 00:46:45,240
you know<font color="#CCCCCC"> I don't think it's that's</font>

944
00:46:42,800 --> 00:46:50,760
important but if you want to see it then

945
00:46:45,240 --> 00:46:52,770
<font color="#CCCCCC">can</font><font color="#E5E5E5"> come and</font><font color="#CCCCCC"> asks later</font><font color="#E5E5E5"> and so that was</font>

946
00:46:50,760 --> 00:46:55,410
it<font color="#E5E5E5"> thank you</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> much</font>

947
00:46:52,770 --> 00:46:58,380
if you have questions<font color="#E5E5E5"> about everything</font>

948
00:46:55,410 --> 00:47:01,020
<font color="#CCCCCC">as long as it's not oh</font><font color="#E5E5E5"> an</font><font color="#CCCCCC"> 88 jailbreak</font>

949
00:46:58,380 --> 00:47:03,480
but job like questions are also welcome

950
00:47:01,020 --> 00:47:04,830
to<font color="#E5E5E5"> you that's the time thank you</font><font color="#CCCCCC"> very</font>

951
00:47:03,480 --> 00:47:16,610
much I hope<font color="#E5E5E5"> you enjoyed the presentation</font>

952
00:47:04,830 --> 00:47:20,250
and i beautiful<font color="#E5E5E5"> questions any questions</font>

953
00:47:16,610 --> 00:47:23,060
<font color="#E5E5E5">yeah</font><font color="#CCCCCC"> I mean someone's</font><font color="#E5E5E5"> coming with a</font>

954
00:47:20,250 --> 00:47:23,060
microphone<font color="#E5E5E5"> just a second</font>

955
00:47:25,869 --> 00:47:30,670
hi thank you very well presentation

956
00:47:28,969 --> 00:47:33,380
<font color="#CCCCCC">Thanks</font>

957
00:47:30,670 --> 00:47:35,299
just a quick question<font color="#E5E5E5"> that</font><font color="#CCCCCC"> however</font>

958
00:47:33,380 --> 00:47:38,450
everybody<font color="#CCCCCC"> is</font><font color="#E5E5E5"> always asking never got a</font>

959
00:47:35,299 --> 00:47:41,930
<font color="#E5E5E5">question</font><font color="#CCCCCC"> that answered how much time</font>

960
00:47:38,450 --> 00:47:45,200
this type of thing<font color="#E5E5E5"> cost and work and how</font>

961
00:47:41,930 --> 00:47:48,379
<font color="#E5E5E5">much about about</font><font color="#CCCCCC"> this device right yeah</font>

962
00:47:45,200 --> 00:47:52,819
well<font color="#E5E5E5"> finding this and exploiting</font><font color="#CCCCCC"> that</font>

963
00:47:48,380 --> 00:47:55,219
and<font color="#E5E5E5"> making work okay so the</font><font color="#CCCCCC"> IO surface</font>

964
00:47:52,819 --> 00:47:59,390
hijack vulnerability and the<font color="#E5E5E5"> information</font>

965
00:47:55,219 --> 00:48:02,479
disclosure it was like I don't know<font color="#E5E5E5"> it</font>

966
00:47:59,390 --> 00:48:05,538
was<font color="#E5E5E5"> already done on the same day</font><font color="#CCCCCC"> the</font>

967
00:48:02,479 --> 00:48:07,939
problem<font color="#E5E5E5"> I mean the the thing that</font><font color="#CCCCCC"> took</font>

968
00:48:05,539 --> 00:48:09,640
<font color="#E5E5E5">most of the time was first of all the</font>

969
00:48:07,940 --> 00:48:15,769
<font color="#E5E5E5">information</font><font color="#CCCCCC"> disclosure</font>

970
00:48:09,640 --> 00:48:17,779
second of all debugging those<font color="#E5E5E5"> crashes is</font>

971
00:48:15,769 --> 00:48:20,569
an unpleasant process you have to<font color="#E5E5E5"> read</font>

972
00:48:17,779 --> 00:48:24,589
from a crash dump you have to fetch<font color="#CCCCCC"> it</font>

973
00:48:20,569 --> 00:48:26,660
<font color="#CCCCCC">and it with device specifically</font><font color="#E5E5E5"> because</font>

974
00:48:24,589 --> 00:48:29,210
it requires a sandbox escape<font color="#E5E5E5"> each</font>

975
00:48:26,660 --> 00:48:31,489
iteration you wanted you needed a

976
00:48:29,210 --> 00:48:34,819
sandbox escape and debug was written

977
00:48:31,489 --> 00:48:38,569
before the<font color="#E5E5E5"> I mean I could always do it</font>

978
00:48:34,819 --> 00:48:40,460
on earlier<font color="#E5E5E5"> versions</font><font color="#CCCCCC"> then 10.2</font><font color="#E5E5E5"> but</font>

979
00:48:38,569 --> 00:48:43,130
actually debugging it is not the most

980
00:48:40,460 --> 00:48:45,559
pleasant experience<font color="#CCCCCC"> but</font><font color="#E5E5E5"> from the point</font>

981
00:48:43,130 --> 00:48:51,559
<font color="#CCCCCC">that I</font><font color="#E5E5E5"> said from the point I found the</font>

982
00:48:45,559 --> 00:48:52,849
first<font color="#CCCCCC"> I hijack a execution which was the</font>

983
00:48:51,559 --> 00:48:56,479
first<font color="#CCCCCC"> day of</font><font color="#E5E5E5"> the researcher</font><font color="#CCCCCC"> of that</font>

984
00:48:52,849 --> 00:48:59,479
title<font color="#CCCCCC"> till the</font><font color="#E5E5E5"> day I said</font><font color="#CCCCCC"> okay we're</font>

985
00:48:56,479 --> 00:49:02,689
done<font color="#E5E5E5"> it was within a time range of less</font>

986
00:48:59,479 --> 00:49:04,808
than<font color="#CCCCCC"> two weeks</font><font color="#E5E5E5"> everything</font><font color="#CCCCCC"> so I think and</font>

987
00:49:02,690 --> 00:49:07,309
it required more<font color="#CCCCCC"> time because</font><font color="#E5E5E5"> I</font>

988
00:49:04,809 --> 00:49:09,559
dependent on another information

989
00:49:07,309 --> 00:49:12,739
disclosure<font color="#E5E5E5"> vulnerability but</font>

990
00:49:09,559 --> 00:49:15,529
<font color="#E5E5E5">unfortunately it didn't work</font><font color="#CCCCCC"> out 12 19</font>

991
00:49:12,739 --> 00:49:17,719
<font color="#CCCCCC">different</font><font color="#E5E5E5"> problems so I really had</font><font color="#CCCCCC"> to</font>

992
00:49:15,529 --> 00:49:19,670
<font color="#CCCCCC">work most</font><font color="#E5E5E5"> I didn't expect this delay I</font>

993
00:49:17,719 --> 00:49:22,789
think it would could have been done in

994
00:49:19,670 --> 00:49:24,920
<font color="#E5E5E5">less time but everything was in one and</font>

995
00:49:22,789 --> 00:49:29,829
a half weeks<font color="#E5E5E5"> maybe something like that</font>

996
00:49:24,920 --> 00:49:29,829
so<font color="#E5E5E5"> that's it any other questions</font>

997
00:49:31,470 --> 00:49:37,620
I just wanted to more about<font color="#E5E5E5"> the</font>

998
00:49:34,860 --> 00:49:39,510
questions and it's not always<font color="#E5E5E5"> the case</font>

999
00:49:37,620 --> 00:49:41,880
it<font color="#E5E5E5"> really depends on the vulnerabilities</font>

1000
00:49:39,510 --> 00:49:44,190
<font color="#CCCCCC">and on the</font><font color="#E5E5E5"> left how reliable you want</font>

1001
00:49:41,880 --> 00:49:47,070
the exploit to<font color="#CCCCCC"> be how many version</font>

1002
00:49:44,190 --> 00:49:50,160
versions you have<font color="#E5E5E5"> to support and a good</font>

1003
00:49:47,070 --> 00:49:51,600
<font color="#CCCCCC">Pacific deterministic exploit in my</font>

1004
00:49:50,160 --> 00:49:54,899
opinion again<font color="#E5E5E5"> it depends on the</font>

1005
00:49:51,600 --> 00:49:56,850
<font color="#E5E5E5">primitives you have might take again it</font>

1006
00:49:54,900 --> 00:49:59,700
might take sometimes six months and I

1007
00:49:56,850 --> 00:50:01,950
take one month<font color="#E5E5E5"> it</font><font color="#CCCCCC"> might</font><font color="#E5E5E5"> take three days</font>

1008
00:49:59,700 --> 00:50:04,230
<font color="#E5E5E5">again depends on the primitives</font><font color="#CCCCCC"> you have</font>

1009
00:50:01,950 --> 00:50:10,290
so that's my two cents<font color="#CCCCCC"> about it</font>

1010
00:50:04,230 --> 00:50:12,620
any other questions<font color="#CCCCCC"> okay so thank you</font>

1011
00:50:10,290 --> 00:50:12,620
<font color="#CCCCCC">very much</font>

