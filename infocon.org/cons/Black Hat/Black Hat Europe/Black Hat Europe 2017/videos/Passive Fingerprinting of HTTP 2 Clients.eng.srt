1
00:00:00,149 --> 00:00:03,689
thank you<font color="#E5E5E5"> for attending this</font>

2
00:00:01,230 --> 00:00:05,250
<font color="#CCCCCC">presentation</font><font color="#E5E5E5"> and I'd like</font><font color="#CCCCCC"> to thank Black</font>

3
00:00:03,689 --> 00:00:08,969
<font color="#CCCCCC">Hat for</font><font color="#E5E5E5"> the opportunity to present our</font>

4
00:00:05,250 --> 00:00:11,040
<font color="#CCCCCC">work here now before we</font><font color="#E5E5E5"> begin I'd like</font>

5
00:00:08,970 --> 00:00:12,840
<font color="#CCCCCC">to know just how many of you are</font>

6
00:00:11,040 --> 00:00:14,639
<font color="#CCCCCC">actually familiar with the second</font>

7
00:00:12,840 --> 00:00:19,410
version of<font color="#E5E5E5"> the HTTP protocol you could</font>

8
00:00:14,639 --> 00:00:20,698
raise<font color="#CCCCCC"> your hand okay second</font><font color="#E5E5E5"> question</font><font color="#CCCCCC"> how</font>

9
00:00:19,410 --> 00:00:23,220
many of<font color="#E5E5E5"> you have actually got to</font>

10
00:00:20,699 --> 00:00:26,490
<font color="#E5E5E5">implement it as part of I don't know you</font>

11
00:00:23,220 --> 00:00:26,849
had to write a<font color="#CCCCCC"> client or software thank</font>

12
00:00:26,490 --> 00:00:28,889
you

13
00:00:26,849 --> 00:00:31,320
and one last<font color="#CCCCCC"> question is how many of</font><font color="#E5E5E5"> you</font>

14
00:00:28,890 --> 00:00:33,120
<font color="#CCCCCC">have actually done a passive client</font>

15
00:00:31,320 --> 00:00:37,980
fingerprinting or any sort of client

16
00:00:33,120 --> 00:00:40,919
fingerprinting<font color="#E5E5E5"> okay thank you so this</font><font color="#CCCCCC"> is</font>

17
00:00:37,980 --> 00:00:42,569
<font color="#CCCCCC">the</font><font color="#E5E5E5"> agendas for today's presentation</font><font color="#CCCCCC"> I'm</font>

18
00:00:40,920 --> 00:00:44,309
going<font color="#CCCCCC"> to walk you through some of it</font>

19
00:00:42,570 --> 00:00:46,860
<font color="#E5E5E5">we're going to look</font><font color="#CCCCCC"> at the research data</font>

20
00:00:44,309 --> 00:00:49,680
<font color="#CCCCCC">and how we gathered it for this http/2</font>

21
00:00:46,860 --> 00:00:53,340
research<font color="#E5E5E5"> then I'm going to do a quick</font>

22
00:00:49,680 --> 00:00:55,410
<font color="#CCCCCC">overview of the http/2 protocol by the</font>

23
00:00:53,340 --> 00:00:57,420
end of which I<font color="#E5E5E5"> hope all of you would be</font>

24
00:00:55,410 --> 00:00:59,550
quite familiar<font color="#E5E5E5"> with the key elements of</font>

25
00:00:57,420 --> 00:01:02,670
the protocol<font color="#E5E5E5"> especially the ones we've</font>

26
00:00:59,550 --> 00:01:04,709
used for the fingerprinting<font color="#E5E5E5"> and</font><font color="#CCCCCC"> the key</font>

27
00:01:02,670 --> 00:01:07,220
differences<font color="#CCCCCC"> between the second version</font>

28
00:01:04,709 --> 00:01:10,710
of the protocol<font color="#E5E5E5"> and</font><font color="#CCCCCC"> the prior versions</font>

29
00:01:07,220 --> 00:01:13,080
<font color="#E5E5E5">once</font><font color="#CCCCCC"> we once we've</font><font color="#E5E5E5"> established that</font>

30
00:01:10,710 --> 00:01:15,270
<font color="#E5E5E5">we're going to go through the concept of</font>

31
00:01:13,080 --> 00:01:17,759
passive clan fingerprinting and more

32
00:01:15,270 --> 00:01:21,420
specifically<font color="#E5E5E5"> how we propose</font><font color="#CCCCCC"> to do it on</font>

33
00:01:17,759 --> 00:01:23,310
the HTTP<font color="#CCCCCC"> to protocol</font><font color="#E5E5E5"> and last but not</font>

34
00:01:21,420 --> 00:01:27,509
least the bonus slide of the threat

35
00:01:23,310 --> 00:01:31,049
landscape<font color="#CCCCCC"> we will cover for so</font><font color="#E5E5E5"> just a</font>

36
00:01:27,509 --> 00:01:33,150
<font color="#CCCCCC">little bit about me I work at Akamai</font><font color="#E5E5E5"> i</font>

37
00:01:31,049 --> 00:01:35,310
fairly enjoy<font color="#E5E5E5"> big data and single malt</font>

38
00:01:33,150 --> 00:01:37,140
whiskies<font color="#CCCCCC"> so if you got any or do you</font>

39
00:01:35,310 --> 00:01:40,740
want to take some after the presentation

40
00:01:37,140 --> 00:01:42,380
<font color="#CCCCCC">I'd be happy to</font><font color="#E5E5E5"> meet with you some</font>

41
00:01:40,740 --> 00:01:44,820
acknowledgments are<font color="#CCCCCC"> due this</font>

42
00:01:42,380 --> 00:01:46,530
presentation is based on a white<font color="#E5E5E5"> paper</font>

43
00:01:44,820 --> 00:01:48,600
<font color="#CCCCCC">that we've published a few months ago</font>

44
00:01:46,530 --> 00:01:51,390
and I invite you<font color="#CCCCCC"> to go search it</font><font color="#E5E5E5"> and</font>

45
00:01:48,600 --> 00:01:53,640
read<font color="#CCCCCC"> the full white paper the research</font>

46
00:01:51,390 --> 00:01:56,280
was led by two other researchers<font color="#CCCCCC"> Ori</font>

47
00:01:53,640 --> 00:01:58,590
<font color="#CCCCCC">Seagal which</font><font color="#E5E5E5"> is the director and manager</font>

48
00:01:56,280 --> 00:02:00,960
of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> threat research</font><font color="#E5E5E5"> team and by</font>

49
00:01:58,590 --> 00:02:05,159
another security<font color="#E5E5E5"> researcher called Aaron</font>

50
00:02:00,960 --> 00:02:06,829
<font color="#CCCCCC">Freedman</font><font color="#E5E5E5"> so acknowledgments to</font><font color="#CCCCCC"> them so</font>

51
00:02:05,159 --> 00:02:09,660
let's talk<font color="#CCCCCC"> about some data collections</font>

52
00:02:06,829 --> 00:02:11,849
<font color="#E5E5E5">this is the research data corpus for</font>

53
00:02:09,660 --> 00:02:13,650
<font color="#E5E5E5">this white paper for the work we've done</font>

54
00:02:11,849 --> 00:02:16,048
we've actually looked at

55
00:02:13,650 --> 00:02:19,260
<font color="#E5E5E5">ten million different</font><font color="#CCCCCC"> http/2 connections</font>

56
00:02:16,049 --> 00:02:22,200
<font color="#E5E5E5">and I'll explain shortly what</font><font color="#CCCCCC"> http/2</font>

57
00:02:19,260 --> 00:02:25,019
connection mean and we reviewed more

58
00:02:22,200 --> 00:02:27,440
<font color="#CCCCCC">than 40,000 unique user agents which</font>

59
00:02:25,019 --> 00:02:32,760
cover hundreds of different<font color="#E5E5E5"> actually</font>

60
00:02:27,440 --> 00:02:36,150
<font color="#CCCCCC">http/2 implementations the data was</font>

61
00:02:32,760 --> 00:02:38,879
covered was<font color="#E5E5E5"> sorry</font>

62
00:02:36,150 --> 00:02:41,040
the data was<font color="#CCCCCC"> a group from Akuma is</font>

63
00:02:38,879 --> 00:02:43,828
intelligent platform<font color="#E5E5E5"> for those of you do</font>

64
00:02:41,040 --> 00:02:48,358
not know Akamai Akamai is a leading CDN

65
00:02:43,829 --> 00:02:49,799
<font color="#CCCCCC">and we have a very deployed</font><font color="#E5E5E5"> network</font><font color="#CCCCCC"> two</font>

66
00:02:48,359 --> 00:02:51,829
<font color="#CCCCCC">hundred and</font><font color="#E5E5E5"> twenty thousand eight</font>

67
00:02:49,799 --> 00:02:55,170
servers which<font color="#E5E5E5"> are deployed</font><font color="#CCCCCC"> worldwide in</font>

68
00:02:51,829 --> 00:02:57,750
129 countries we are essentially<font color="#CCCCCC"> 90</font>

69
00:02:55,170 --> 00:03:01,559
<font color="#E5E5E5">percent away one hop</font><font color="#CCCCCC"> away from ninety</font>

70
00:02:57,750 --> 00:03:03,629
<font color="#CCCCCC">percent</font><font color="#E5E5E5"> of the Internet users and we</font>

71
00:03:01,560 --> 00:03:06,000
actually<font color="#E5E5E5"> provide</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> content for some of</font>

72
00:03:03,629 --> 00:03:08,129
the biggest hosts and<font color="#CCCCCC"> web sites in the</font>

73
00:03:06,000 --> 00:03:10,170
<font color="#CCCCCC">world</font><font color="#E5E5E5"> and we estimate that we deliver</font>

74
00:03:08,129 --> 00:03:12,540
<font color="#E5E5E5">about fifteen to thirty percent</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> all</font>

75
00:03:10,170 --> 00:03:14,280
the web traffic<font color="#E5E5E5"> so this is the the</font>

76
00:03:12,540 --> 00:03:18,510
platform<font color="#CCCCCC"> that</font><font color="#E5E5E5"> was used to gather in this</font>

77
00:03:14,280 --> 00:03:20,160
data<font color="#E5E5E5"> so I think it's a fairly it's a</font>

78
00:03:18,510 --> 00:03:24,000
first sample that<font color="#E5E5E5"> would show what is</font>

79
00:03:20,160 --> 00:03:25,739
going on in the real world when we get

80
00:03:24,000 --> 00:03:27,359
to the threat landscape<font color="#CCCCCC"> one of the</font>

81
00:03:25,739 --> 00:03:29,280
things that we do analyze<font color="#E5E5E5"> and collect on</font>

82
00:03:27,359 --> 00:03:32,370
<font color="#E5E5E5">this platform is web attacks and we see</font>

83
00:03:29,280 --> 00:03:34,829
a lot of<font color="#E5E5E5"> those attempts so that was used</font>

84
00:03:32,370 --> 00:03:38,370
<font color="#E5E5E5">for depicting the lamp thread scape as</font>

85
00:03:34,829 --> 00:03:40,470
well some<font color="#E5E5E5"> statistics about h2 that we</font>

86
00:03:38,370 --> 00:03:42,299
see on<font color="#E5E5E5"> the platform</font>

87
00:03:40,470 --> 00:03:44,819
I know that from time to time there are

88
00:03:42,299 --> 00:03:46,290
some adoption<font color="#E5E5E5"> rate statistics in the</font>

89
00:03:44,819 --> 00:03:48,448
<font color="#CCCCCC">internet the latest one that</font><font color="#E5E5E5"> I've</font><font color="#CCCCCC"> seen</font>

90
00:03:46,290 --> 00:03:51,720
or from<font color="#E5E5E5"> I think</font><font color="#CCCCCC"> September and they are</font>

91
00:03:48,449 --> 00:03:54,359
<font color="#E5E5E5">talking about 17% of h2 adoption which</font>

92
00:03:51,720 --> 00:03:56,340
is quite high we currently see<font color="#CCCCCC"> on our</font>

93
00:03:54,359 --> 00:04:00,569
platform about 1 billion requests per

94
00:03:56,340 --> 00:04:04,019
<font color="#CCCCCC">day and we see 27</font><font color="#E5E5E5"> million</font><font color="#CCCCCC"> IPs using HTTP</font>

95
00:04:00,569 --> 00:04:06,208
<font color="#E5E5E5">2 and more than 15,000 hosts supporting</font>

96
00:04:04,019 --> 00:04:09,329
that<font color="#E5E5E5"> that's a lot of a lot</font><font color="#CCCCCC"> of numbers</font>

97
00:04:06,209 --> 00:04:12,030
overall<font color="#E5E5E5"> you can say that 10% of the</font>

98
00:04:09,329 --> 00:04:15,810
<font color="#CCCCCC">entire traffic going on the platform is</font>

99
00:04:12,030 --> 00:04:17,880
on h2<font color="#E5E5E5"> and you should keep</font><font color="#CCCCCC"> that in mind</font>

100
00:04:15,810 --> 00:04:19,738
and<font color="#E5E5E5"> correlate</font><font color="#CCCCCC"> it with</font><font color="#E5E5E5"> the numbers of 17</font>

101
00:04:17,880 --> 00:04:23,849
adoption<font color="#CCCCCC"> rate % of adoption rate that</font>

102
00:04:19,738 --> 00:04:25,890
<font color="#E5E5E5">that is published in various</font><font color="#CCCCCC"> sites so</font>

103
00:04:23,849 --> 00:04:27,180
let's do a deep dive<font color="#CCCCCC"> into the h2 and</font>

104
00:04:25,890 --> 00:04:30,479
overview of<font color="#E5E5E5"> the protocol</font>

105
00:04:27,180 --> 00:04:34,590
<font color="#CCCCCC">I would start with</font><font color="#E5E5E5"> a simple HTTP one</font>

106
00:04:30,479 --> 00:04:37,560
request<font color="#E5E5E5"> and have you keep it in mind</font><font color="#CCCCCC"> for</font>

107
00:04:34,590 --> 00:04:40,109
<font color="#CCCCCC">those</font><font color="#E5E5E5"> of you who doesn't</font><font color="#CCCCCC"> know HTTP</font><font color="#E5E5E5"> this</font>

108
00:04:37,560 --> 00:04:41,880
is a simple request this is a text

109
00:04:40,110 --> 00:04:44,699
protocol<font color="#CCCCCC"> version</font><font color="#E5E5E5"> 1</font><font color="#CCCCCC"> and 1.1 of the</font>

110
00:04:41,880 --> 00:04:47,340
protocol was a text protocol<font color="#E5E5E5"> first line</font>

111
00:04:44,699 --> 00:04:49,710
we get the<font color="#CCCCCC"> method the resource in this</font>

112
00:04:47,340 --> 00:04:52,948
in this case it's a get method<font color="#E5E5E5"> to</font>

113
00:04:49,710 --> 00:04:55,310
<font color="#E5E5E5">index.html we have the protocol version</font>

114
00:04:52,949 --> 00:05:00,090
<font color="#E5E5E5">and some of the hosts</font><font color="#CCCCCC"> that depict</font>

115
00:04:55,310 --> 00:05:02,610
<font color="#E5E5E5">information about this request keep that</font>

116
00:05:00,090 --> 00:05:03,508
in<font color="#E5E5E5"> mind and let's start doing the HTTP</font><font color="#CCCCCC"> 2</font>

117
00:05:02,610 --> 00:05:05,910
overview

118
00:05:03,509 --> 00:05:07,830
HTTP 2 is based on a protocol<font color="#CCCCCC"> called</font>

119
00:05:05,910 --> 00:05:10,889
speedy that was developed by<font color="#E5E5E5"> Google and</font>

120
00:05:07,830 --> 00:05:13,710
it was actually formalized late 2015

121
00:05:10,889 --> 00:05:15,570
<font color="#CCCCCC">into</font><font color="#E5E5E5"> RFC's 1 dealing with the actual</font>

122
00:05:13,710 --> 00:05:17,758
<font color="#E5E5E5">protocol and the second one is dealing</font>

123
00:05:15,570 --> 00:05:21,560
with a header compression mechanism

124
00:05:17,759 --> 00:05:24,300
called<font color="#E5E5E5"> H</font><font color="#CCCCCC"> pack</font><font color="#E5E5E5"> now as opposed to the</font>

125
00:05:21,560 --> 00:05:27,120
<font color="#E5E5E5">version 1</font><font color="#CCCCCC"> and 1.1 of</font><font color="#E5E5E5"> the protocol</font><font color="#CCCCCC"> this</font>

126
00:05:24,300 --> 00:05:30,660
is a binary<font color="#CCCCCC"> protocol</font><font color="#E5E5E5"> and we'll see what</font>

127
00:05:27,120 --> 00:05:33,870
does that mean later<font color="#CCCCCC"> on it can</font><font color="#E5E5E5"> be</font>

128
00:05:30,660 --> 00:05:37,110
<font color="#E5E5E5">submitted either over clear text or over</font>

129
00:05:33,870 --> 00:05:38,340
an<font color="#E5E5E5"> encrypted</font><font color="#CCCCCC"> Channel though I have not</font>

130
00:05:37,110 --> 00:05:40,199
seen up<font color="#E5E5E5"> until today a single</font>

131
00:05:38,340 --> 00:05:43,109
implementation which is<font color="#E5E5E5"> being</font>

132
00:05:40,199 --> 00:05:44,669
transmitted over<font color="#CCCCCC"> a</font><font color="#E5E5E5"> TCP clear text all of</font>

133
00:05:43,110 --> 00:05:50,010
the implementations<font color="#CCCCCC"> that we witnessed</font>

134
00:05:44,669 --> 00:05:52,380
<font color="#E5E5E5">are using TLS</font><font color="#CCCCCC"> and last but not least</font><font color="#E5E5E5"> its</font>

135
00:05:50,010 --> 00:05:54,419
purpose is to<font color="#E5E5E5"> address some of the</font>

136
00:05:52,380 --> 00:05:57,570
challenges<font color="#CCCCCC"> mainly</font><font color="#E5E5E5"> around performance</font>

137
00:05:54,419 --> 00:06:01,380
<font color="#E5E5E5">that prior versions of the protocol</font><font color="#CCCCCC"> did</font>

138
00:05:57,570 --> 00:06:04,139
have so<font color="#E5E5E5"> what are the</font><font color="#CCCCCC"> challenges the</font>

139
00:06:01,380 --> 00:06:05,729
first one is concurrency<font color="#E5E5E5"> and</font><font color="#CCCCCC"> in order</font><font color="#E5E5E5"> to</font>

140
00:06:04,139 --> 00:06:07,650
achieve concurrency in the first

141
00:06:05,729 --> 00:06:10,740
versions<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the protocol you had to do</font>

142
00:06:07,650 --> 00:06:12,900
multiple<font color="#CCCCCC"> TCP connections can anybody</font>

143
00:06:10,740 --> 00:06:15,710
think<font color="#E5E5E5"> why is that not such a good idea</font>

144
00:06:12,900 --> 00:06:15,710
in terms<font color="#E5E5E5"> of performance</font>

145
00:06:16,400 --> 00:06:22,020
well<font color="#CCCCCC"> TCP has a mechanism called slow</font>

146
00:06:20,430 --> 00:06:24,270
start it's part of<font color="#E5E5E5"> it flow control</font>

147
00:06:22,020 --> 00:06:26,909
mechanism where it starts<font color="#E5E5E5"> very slow and</font>

148
00:06:24,270 --> 00:06:30,740
exponentially brings up the<font color="#E5E5E5"> paste until</font>

149
00:06:26,909 --> 00:06:33,930
<font color="#E5E5E5">it's understanding rate until until it</font>

150
00:06:30,740 --> 00:06:36,510
encounters<font color="#CCCCCC"> the fill the</font><font color="#E5E5E5"> first loss</font><font color="#CCCCCC"> and</font>

151
00:06:33,930 --> 00:06:38,340
if you do multiple<font color="#E5E5E5"> TCP connections and</font>

152
00:06:36,510 --> 00:06:40,080
you keep<font color="#CCCCCC"> opening those TCP connections</font>

153
00:06:38,340 --> 00:06:40,679
<font color="#E5E5E5">and closing them you are actually</font>

154
00:06:40,080 --> 00:06:42,359
<font color="#E5E5E5">getting a</font>

155
00:06:40,680 --> 00:06:48,900
hit a performance hit by the slow start

156
00:06:42,360 --> 00:06:51,090
mechanism of TCP<font color="#CCCCCC"> in version 1.1 1.0 of</font>

157
00:06:48,900 --> 00:06:54,150
the HTTP protocol<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> have only</font><font color="#E5E5E5"> one</font>

158
00:06:51,090 --> 00:06:57,960
standing<font color="#CCCCCC"> requests on each TCP connection</font>

159
00:06:54,150 --> 00:06:59,849
<font color="#E5E5E5">in version 1.1 and new mechanism was</font>

160
00:06:57,960 --> 00:07:02,070
introduced<font color="#E5E5E5"> called request pipelining</font>

161
00:06:59,850 --> 00:07:03,810
where you could actually<font color="#E5E5E5"> pipeline</font>

162
00:07:02,070 --> 00:07:06,539
several<font color="#E5E5E5"> requests on the same TCP</font>

163
00:07:03,810 --> 00:07:08,520
connection but the downside<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> if</font>

164
00:07:06,539 --> 00:07:10,409
you had one<font color="#E5E5E5"> big request or one big</font>

165
00:07:08,520 --> 00:07:13,099
response<font color="#E5E5E5"> to was</font><font color="#CCCCCC"> ahead of</font><font color="#E5E5E5"> line</font><font color="#CCCCCC"> blocking</font>

166
00:07:10,410 --> 00:07:16,500
<font color="#E5E5E5">it wasn't so efficient</font>

167
00:07:13,099 --> 00:07:18,509
the second<font color="#CCCCCC"> challenge here is the header</font>

168
00:07:16,500 --> 00:07:21,449
compression<font color="#CCCCCC"> as you've all seen in the</font>

169
00:07:18,509 --> 00:07:24,690
slide<font color="#CCCCCC"> about the first</font><font color="#E5E5E5"> request in HTTP 1</font>

170
00:07:21,449 --> 00:07:26,310
the headers are very verbose and and

171
00:07:24,690 --> 00:07:29,639
they<font color="#E5E5E5"> are tend to</font><font color="#CCCCCC"> be a very repetitive</font>

172
00:07:26,310 --> 00:07:31,320
<font color="#CCCCCC">some of the headers go back and force in</font>

173
00:07:29,639 --> 00:07:33,389
<font color="#E5E5E5">each request or in each response and</font>

174
00:07:31,320 --> 00:07:35,759
this is an ideal<font color="#CCCCCC"> ground for compression</font>

175
00:07:33,389 --> 00:07:37,349
<font color="#E5E5E5">and no such compression mechanism was</font>

176
00:07:35,759 --> 00:07:40,560
introduced for<font color="#E5E5E5"> the headers in Prior</font>

177
00:07:37,349 --> 00:07:44,840
versions of the<font color="#E5E5E5"> protocol last but not</font>

178
00:07:40,560 --> 00:07:47,250
least<font color="#CCCCCC"> the passive server concept in h1</font>

179
00:07:44,840 --> 00:07:49,260
<font color="#E5E5E5">actually the the server could not</font>

180
00:07:47,250 --> 00:07:51,479
initiate any sending of data to<font color="#E5E5E5"> the</font>

181
00:07:49,260 --> 00:07:54,030
<font color="#CCCCCC">client</font><font color="#E5E5E5"> without</font><font color="#CCCCCC"> having the client</font><font color="#E5E5E5"> first</font>

182
00:07:51,479 --> 00:07:56,039
<font color="#E5E5E5">request that data and you might wonder</font>

183
00:07:54,030 --> 00:07:57,659
why<font color="#CCCCCC"> is that important</font><font color="#E5E5E5"> why should the</font>

184
00:07:56,039 --> 00:07:59,849
server want to proactively send data

185
00:07:57,659 --> 00:08:01,349
<font color="#E5E5E5">where there are a lot of situation in</font>

186
00:07:59,849 --> 00:08:04,380
which the server can know ahead<font color="#CCCCCC"> of time</font>

187
00:08:01,349 --> 00:08:05,699
<font color="#E5E5E5">in a very high level of probability that</font>

188
00:08:04,380 --> 00:08:07,919
the client<font color="#E5E5E5"> is going to ask for several</font>

189
00:08:05,699 --> 00:08:10,169
resources<font color="#E5E5E5"> the classic example is when</font>

190
00:08:07,919 --> 00:08:12,539
you download the main page<font color="#E5E5E5"> HTML page and</font>

191
00:08:10,169 --> 00:08:14,219
<font color="#E5E5E5">the client starts to parse it and it's</font>

192
00:08:12,539 --> 00:08:15,840
<font color="#E5E5E5">quite obvious that the next step is</font>

193
00:08:14,220 --> 00:08:17,909
<font color="#E5E5E5">going to generate</font><font color="#CCCCCC"> more</font><font color="#E5E5E5"> requests for the</font>

194
00:08:15,840 --> 00:08:19,859
static<font color="#CCCCCC"> content</font><font color="#E5E5E5"> for the CSS and</font><font color="#CCCCCC"> the</font>

195
00:08:17,909 --> 00:08:22,259
JavaScript file if we could have the

196
00:08:19,860 --> 00:08:24,060
server<font color="#E5E5E5"> send those file to him with the</font>

197
00:08:22,259 --> 00:08:26,580
initial request<font color="#E5E5E5"> we could save a lot of</font>

198
00:08:24,060 --> 00:08:28,199
<font color="#E5E5E5">time and as</font><font color="#CCCCCC"> I've said these</font><font color="#E5E5E5"> are</font>

199
00:08:26,580 --> 00:08:29,849
<font color="#CCCCCC">performance seats that the second</font>

200
00:08:28,199 --> 00:08:35,099
version<font color="#E5E5E5"> of the protocol is trying to</font>

201
00:08:29,849 --> 00:08:37,169
actually<font color="#E5E5E5"> address so in terms of</font>

202
00:08:35,099 --> 00:08:41,010
<font color="#E5E5E5">concurrency</font><font color="#CCCCCC"> we no longer</font><font color="#E5E5E5"> have multiple</font>

203
00:08:37,169 --> 00:08:43,860
<font color="#CCCCCC">TCP connection</font><font color="#E5E5E5"> HTTP</font><font color="#CCCCCC"> 2 uses a</font><font color="#E5E5E5"> single TCP</font>

204
00:08:41,010 --> 00:08:48,360
connection<font color="#CCCCCC"> and</font><font color="#E5E5E5"> everything is</font><font color="#CCCCCC"> multiplexed</font>

205
00:08:43,860 --> 00:08:50,610
<font color="#E5E5E5">on this connection</font><font color="#CCCCCC"> for compression we</font>

206
00:08:48,360 --> 00:08:52,500
now have<font color="#CCCCCC"> h-back ii RFC that was</font>

207
00:08:50,610 --> 00:08:53,580
published<font color="#E5E5E5"> along with the RFC for the</font>

208
00:08:52,500 --> 00:08:55,520
<font color="#E5E5E5">protocol</font>

209
00:08:53,580 --> 00:08:59,130
which now compresses the headers and

210
00:08:55,520 --> 00:09:01,590
that is much<font color="#E5E5E5"> more efficient and a new</font>

211
00:08:59,130 --> 00:09:04,590
concept for<font color="#CCCCCC"> serverpush was introduced in</font>

212
00:09:01,590 --> 00:09:06,780
an industry protocol<font color="#CCCCCC"> and if any of you</font>

213
00:09:04,590 --> 00:09:09,360
is feeling uncomfortable<font color="#CCCCCC"> with the</font><font color="#E5E5E5"> fact</font>

214
00:09:06,780 --> 00:09:11,100
that the server could be proactive<font color="#E5E5E5"> there</font>

215
00:09:09,360 --> 00:09:13,020
is a way for the client to<font color="#E5E5E5"> opt out of it</font>

216
00:09:11,100 --> 00:09:14,910
<font color="#CCCCCC">at the</font><font color="#E5E5E5"> beginning of connection and say</font>

217
00:09:13,020 --> 00:09:20,100
not interested in you pushing me

218
00:09:14,910 --> 00:09:22,850
<font color="#E5E5E5">anything</font><font color="#CCCCCC"> okay so we have a single</font><font color="#E5E5E5"> TCP</font>

219
00:09:20,100 --> 00:09:27,720
connection<font color="#E5E5E5"> in which</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> data flows and</font>

220
00:09:22,850 --> 00:09:30,600
<font color="#E5E5E5">that connection is divided into logical</font>

221
00:09:27,720 --> 00:09:32,250
conversations or we can grouped into

222
00:09:30,600 --> 00:09:34,860
some kind of conversations called

223
00:09:32,250 --> 00:09:38,190
streams these streams are numbered going

224
00:09:34,860 --> 00:09:42,210
from<font color="#CCCCCC"> 0 and up where essentially</font><font color="#E5E5E5"> even</font>

225
00:09:38,190 --> 00:09:43,620
number strings are according<font color="#CCCCCC"> to the RFC</font>

226
00:09:42,210 --> 00:09:46,080
should be our streams that were

227
00:09:43,620 --> 00:09:48,680
<font color="#CCCCCC">initiated by the server and</font><font color="#E5E5E5"> odd-numbered</font>

228
00:09:46,080 --> 00:09:52,070
streams are initiated by<font color="#CCCCCC"> the client</font>

229
00:09:48,680 --> 00:09:54,660
<font color="#E5E5E5">stream 0 is the only stream which</font><font color="#CCCCCC"> is</font>

230
00:09:52,070 --> 00:09:56,070
dealing<font color="#CCCCCC"> with the parameters for the</font>

231
00:09:54,660 --> 00:09:59,520
entire connections and we'll see<font color="#CCCCCC"> that</font>

232
00:09:56,070 --> 00:10:01,830
<font color="#E5E5E5">later so this is the definition</font><font color="#CCCCCC"> of a</font>

233
00:09:59,520 --> 00:10:04,710
stream according to the RFC<font color="#E5E5E5"> it's an</font>

234
00:10:01,830 --> 00:10:06,900
independent independent<font color="#E5E5E5"> bi-directional</font>

235
00:10:04,710 --> 00:10:08,880
sequence of frames<font color="#E5E5E5"> exchanged between the</font>

236
00:10:06,900 --> 00:10:11,250
client and<font color="#E5E5E5"> the server</font><font color="#CCCCCC"> so now we are</font>

237
00:10:08,880 --> 00:10:13,050
going to<font color="#E5E5E5"> see the most important unit of</font>

238
00:10:11,250 --> 00:10:15,660
<font color="#CCCCCC">communication in the h2</font><font color="#E5E5E5"> protocol and</font>

239
00:10:13,050 --> 00:10:18,270
that's<font color="#E5E5E5"> the frames and each frame which</font>

240
00:10:15,660 --> 00:10:20,699
is<font color="#E5E5E5"> going over the over</font><font color="#CCCCCC"> the wire between</font>

241
00:10:18,270 --> 00:10:23,750
the<font color="#E5E5E5"> two peers is allocated to a certain</font>

242
00:10:20,700 --> 00:10:27,330
stream in this case<font color="#CCCCCC"> it's stream 93 and</font>

243
00:10:23,750 --> 00:10:30,300
these frames are<font color="#CCCCCC"> actually the basic unit</font>

244
00:10:27,330 --> 00:10:33,030
of communication<font color="#E5E5E5"> in this protocol now</font>

245
00:10:30,300 --> 00:10:35,069
just as a HTTP message<font color="#E5E5E5"> in version</font><font color="#CCCCCC"> 1</font>

246
00:10:33,030 --> 00:10:37,530
<font color="#E5E5E5">protocol could have two sections</font><font color="#CCCCCC"> a</font>

247
00:10:35,070 --> 00:10:39,510
header section<font color="#E5E5E5"> and the actual body of</font>

248
00:10:37,530 --> 00:10:42,329
<font color="#CCCCCC">the message or it could have only</font><font color="#E5E5E5"> a</font>

249
00:10:39,510 --> 00:10:43,590
<font color="#E5E5E5">single section a get request with</font>

250
00:10:42,330 --> 00:10:46,740
nothing in the body<font color="#E5E5E5"> would only have</font>

251
00:10:43,590 --> 00:10:49,050
<font color="#CCCCCC">headers so we group streams which are</font>

252
00:10:46,740 --> 00:10:51,630
logically<font color="#E5E5E5"> can be mapped into</font><font color="#CCCCCC"> requests or</font>

253
00:10:49,050 --> 00:10:53,459
responses and for<font color="#E5E5E5"> example a request</font>

254
00:10:51,630 --> 00:10:56,189
<font color="#E5E5E5">would have a headers frame and a data</font>

255
00:10:53,460 --> 00:10:57,900
frame<font color="#E5E5E5"> just as</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> regular HTTP message</font>

256
00:10:56,190 --> 00:11:02,210
<font color="#E5E5E5">will have them I don't</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> why you are</font>

257
00:10:57,900 --> 00:11:02,209
<font color="#E5E5E5">seeing them as white but</font><font color="#CCCCCC"> okay</font>

258
00:11:03,150 --> 00:11:08,880
so these are the key elements<font color="#CCCCCC"> we've</font>

259
00:11:06,870 --> 00:11:12,300
spoken<font color="#E5E5E5"> about friends and</font><font color="#CCCCCC"> we'll</font><font color="#E5E5E5"> elaborate</font>

260
00:11:08,880 --> 00:11:14,160
<font color="#E5E5E5">about them shortly</font><font color="#CCCCCC"> and we have spoken</font>

261
00:11:12,300 --> 00:11:16,050
about streams and we've mentioned that

262
00:11:14,160 --> 00:11:18,449
<font color="#CCCCCC">each stream should have a unique</font><font color="#E5E5E5"> stream</font>

263
00:11:16,050 --> 00:11:21,180
ID and it could have a priority set to

264
00:11:18,450 --> 00:11:23,029
him and a message would<font color="#E5E5E5"> be</font><font color="#CCCCCC"> a sequence of</font>

265
00:11:21,180 --> 00:11:25,170
frame which will<font color="#E5E5E5"> be logical</font>

266
00:11:23,029 --> 00:11:29,430
logically mapped into<font color="#CCCCCC"> requests</font><font color="#E5E5E5"> or</font>

267
00:11:25,170 --> 00:11:31,469
responses so let's talk about frames

268
00:11:29,430 --> 00:11:34,079
<font color="#E5E5E5">this this is the most important unity in</font>

269
00:11:31,470 --> 00:11:36,300
the protocol<font color="#E5E5E5"> the RFC defines ten types</font>

270
00:11:34,080 --> 00:11:38,370
of frames<font color="#E5E5E5"> and they can be mapped into</font>

271
00:11:36,300 --> 00:11:39,540
three logical groups<font color="#E5E5E5"> first of all the</font>

272
00:11:38,370 --> 00:11:41,730
frames which deal<font color="#CCCCCC"> with the actual</font>

273
00:11:39,540 --> 00:11:43,740
<font color="#E5E5E5">messaging and there are two types</font><font color="#CCCCCC"> of</font>

274
00:11:41,730 --> 00:11:47,040
them the headers frame and the data

275
00:11:43,740 --> 00:11:49,200
frame the<font color="#CCCCCC"> other frame are dealing either</font>

276
00:11:47,040 --> 00:11:51,540
with flow control of the protocol

277
00:11:49,200 --> 00:11:54,390
<font color="#E5E5E5">adjusting the windows update for example</font>

278
00:11:51,540 --> 00:11:55,770
or adjusting the priority<font color="#E5E5E5"> or with</font>

279
00:11:54,390 --> 00:11:58,860
<font color="#E5E5E5">anything that has</font><font color="#CCCCCC"> to do with tree</font>

280
00:11:55,770 --> 00:12:00,930
management<font color="#E5E5E5"> those streams that we saw on</font>

281
00:11:58,860 --> 00:12:02,910
<font color="#E5E5E5">the single TCP connection can</font><font color="#CCCCCC"> be opened</font>

282
00:12:00,930 --> 00:12:05,699
and closed and there are some frames

283
00:12:02,910 --> 00:12:11,850
that<font color="#E5E5E5"> deal with this overhead of stream</font>

284
00:12:05,700 --> 00:12:14,430
management so I've mentioned<font color="#CCCCCC"> that</font><font color="#E5E5E5"> HTTP</font><font color="#CCCCCC"> 2</font>

285
00:12:11,850 --> 00:12:16,320
is a binary<font color="#E5E5E5"> protocol and that</font><font color="#CCCCCC"> means that</font>

286
00:12:14,430 --> 00:12:19,260
everything<font color="#E5E5E5"> is getting packed into a</font>

287
00:12:16,320 --> 00:12:22,560
<font color="#E5E5E5">binary structure and this is the layout</font>

288
00:12:19,260 --> 00:12:24,390
<font color="#CCCCCC">of a frame</font><font color="#E5E5E5"> according</font><font color="#CCCCCC"> to the RFC</font><font color="#E5E5E5"> where</font>

289
00:12:22,560 --> 00:12:26,279
the frame might change<font color="#E5E5E5"> but the headers</font>

290
00:12:24,390 --> 00:12:30,689
<font color="#CCCCCC">of the frame are constant you</font><font color="#E5E5E5"> have the</font>

291
00:12:26,279 --> 00:12:33,209
free<font color="#E5E5E5"> the first nine octet of a frame</font><font color="#CCCCCC"> the</font>

292
00:12:30,690 --> 00:12:36,029
first<font color="#E5E5E5"> 24 bit is an unsigned</font><font color="#CCCCCC"> integer that</font>

293
00:12:33,209 --> 00:12:37,859
<font color="#CCCCCC">we denote the length of the payload next</font>

294
00:12:36,029 --> 00:12:39,660
you<font color="#E5E5E5"> have one byte or eight bits that</font>

295
00:12:37,860 --> 00:12:41,850
denote the type of the frame<font color="#E5E5E5"> if it's a</font>

296
00:12:39,660 --> 00:12:45,540
header frame<font color="#CCCCCC"> a data frame and</font><font color="#E5E5E5"> so on so</font>

297
00:12:41,850 --> 00:12:48,779
<font color="#E5E5E5">forth next we have 8 bits for</font><font color="#CCCCCC"> frame</font>

298
00:12:45,540 --> 00:12:50,730
<font color="#E5E5E5">flags another reserved bit which</font>

299
00:12:48,779 --> 00:12:53,339
currently has<font color="#CCCCCC"> no functionality assigned</font>

300
00:12:50,730 --> 00:12:56,850
to it and the<font color="#E5E5E5"> rest of the 31 bits would</font>

301
00:12:53,339 --> 00:13:00,150
be 31 bit unsigned integer for the

302
00:12:56,850 --> 00:13:00,839
stream ID let's look at an actual

303
00:13:00,150 --> 00:13:04,050
example

304
00:13:00,839 --> 00:13:07,110
so as<font color="#CCCCCC"> I've said the first 24 bits</font><font color="#E5E5E5"> would</font>

305
00:13:04,050 --> 00:13:09,390
denote the<font color="#CCCCCC"> length of the payload</font><font color="#E5E5E5"> the</font>

306
00:13:07,110 --> 00:13:13,050
next byte or<font color="#E5E5E5"> 8 bits would show that</font><font color="#CCCCCC"> this</font>

307
00:13:09,390 --> 00:13:14,660
is a herald frame in this<font color="#E5E5E5"> case</font><font color="#CCCCCC"> hex</font>

308
00:13:13,050 --> 00:13:17,758
notation of<font color="#CCCCCC"> 1</font>

309
00:13:14,660 --> 00:13:21,179
the next<font color="#CCCCCC"> 8-bit we have some flags turn</font>

310
00:13:17,759 --> 00:13:21,749
<font color="#CCCCCC">gene</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> herders priority and so on so</font>

311
00:13:21,179 --> 00:13:26,519
forth

312
00:13:21,749 --> 00:13:30,029
<font color="#CCCCCC">reserve</font><font color="#E5E5E5"> beat the stream ID and this is</font>

313
00:13:26,519 --> 00:13:34,049
the actual<font color="#E5E5E5"> frame payload I'm sorry you</font>

314
00:13:30,029 --> 00:13:35,879
can<font color="#E5E5E5"> see the</font><font color="#CCCCCC"> gray background</font><font color="#E5E5E5"> keep in mind</font>

315
00:13:34,049 --> 00:13:38,129
this is<font color="#CCCCCC"> the headers frame and</font><font color="#E5E5E5"> I've</font>

316
00:13:35,879 --> 00:13:41,639
mentioned<font color="#E5E5E5"> that</font><font color="#CCCCCC"> errors in HTTP</font><font color="#E5E5E5"> 2 are not</font>

317
00:13:38,129 --> 00:13:44,220
going<font color="#E5E5E5"> as a string representations there</font>

318
00:13:41,639 --> 00:13:46,410
will be<font color="#E5E5E5"> compressed using H back and then</font>

319
00:13:44,220 --> 00:13:49,529
packed into this binary formation but

320
00:13:46,410 --> 00:13:52,319
<font color="#E5E5E5">I've left them on just for you know so</font>

321
00:13:49,529 --> 00:13:54,569
you can have a better look<font color="#E5E5E5"> at what is</font>

322
00:13:52,319 --> 00:13:57,118
going<font color="#E5E5E5"> on notice that</font><font color="#CCCCCC"> the first four</font>

323
00:13:54,569 --> 00:14:00,029
headers are starting with a<font color="#E5E5E5"> colon these</font>

324
00:13:57,119 --> 00:14:02,309
are not regular HTTP headers HTTP<font color="#CCCCCC"> 2 has</font>

325
00:14:00,029 --> 00:14:05,129
introduced a new<font color="#E5E5E5"> concept which</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> called</font>

326
00:14:02,309 --> 00:14:06,839
pseudo headers and those are the<font color="#E5E5E5"> four</font>

327
00:14:05,129 --> 00:14:13,369
headers that<font color="#E5E5E5"> start with colons I'll talk</font>

328
00:14:06,839 --> 00:14:16,709
about<font color="#E5E5E5"> them later</font><font color="#CCCCCC"> so to do a small recap</font>

329
00:14:13,369 --> 00:14:18,899
<font color="#E5E5E5">we have</font><font color="#CCCCCC"> a single TCP connection and on</font>

330
00:14:16,709 --> 00:14:20,638
top<font color="#CCCCCC"> of</font><font color="#E5E5E5"> that connection we have different</font>

331
00:14:18,899 --> 00:14:23,509
frames<font color="#E5E5E5"> each of them allocated to</font>

332
00:14:20,639 --> 00:14:26,669
different<font color="#CCCCCC"> streams map to conversation so</font>

333
00:14:23,509 --> 00:14:28,709
get<font color="#E5E5E5"> request using the</font><font color="#CCCCCC"> hello stream</font><font color="#E5E5E5"> could</font>

334
00:14:26,669 --> 00:14:30,689
be user

335
00:14:28,709 --> 00:14:32,609
I'm sorry using<font color="#E5E5E5"> the Adams headers frame</font>

336
00:14:30,689 --> 00:14:34,498
could<font color="#E5E5E5"> be sent on a single stream and the</font>

337
00:14:32,610 --> 00:14:37,049
server would respond on the same stream

338
00:14:34,499 --> 00:14:38,489
meanwhile another get request could be

339
00:14:37,049 --> 00:14:42,089
sent<font color="#E5E5E5"> on a different stream and the</font>

340
00:14:38,489 --> 00:14:44,189
server<font color="#E5E5E5"> will respond</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> that now I have a</font>

341
00:14:42,089 --> 00:14:46,589
<font color="#E5E5E5">small video here</font><font color="#CCCCCC"> of demonstration you</font>

342
00:14:44,189 --> 00:14:49,019
can<font color="#E5E5E5"> look go and search for Akamai HTTP</font><font color="#CCCCCC"> 2</font>

343
00:14:46,589 --> 00:14:52,589
<font color="#E5E5E5">demo</font><font color="#CCCCCC"> well we see the same image being</font>

344
00:14:49,019 --> 00:14:55,199
pulled up first in HTTP 1.1<font color="#E5E5E5"> and the</font>

345
00:14:52,589 --> 00:14:58,769
second one<font color="#E5E5E5"> the same is images pulled up</font>

346
00:14:55,199 --> 00:15:00,959
in<font color="#CCCCCC"> version 2 of</font><font color="#E5E5E5"> the protocol</font><font color="#CCCCCC"> and in</font><font color="#E5E5E5"> this</font>

347
00:14:58,769 --> 00:15:02,910
case it was twice as<font color="#E5E5E5"> fast I think</font><font color="#CCCCCC"> I</font>

348
00:15:00,959 --> 00:15:04,768
recorded it in an internet cafe with

349
00:15:02,910 --> 00:15:06,600
some<font color="#E5E5E5"> internet late latency but if you'll</font>

350
00:15:04,769 --> 00:15:08,660
do<font color="#E5E5E5"> that at your office's or back at home</font>

351
00:15:06,600 --> 00:15:12,029
<font color="#E5E5E5">you would see a speed increase of up to</font>

352
00:15:08,660 --> 00:15:17,459
<font color="#E5E5E5">4 times</font><font color="#CCCCCC"> or five times more faster</font><font color="#E5E5E5"> using</font>

353
00:15:12,029 --> 00:15:19,860
<font color="#CCCCCC">the the h2</font><font color="#E5E5E5"> method a few things we</font><font color="#CCCCCC"> have</font>

354
00:15:17,459 --> 00:15:21,628
<font color="#E5E5E5">to keep in</font><font color="#CCCCCC"> mind when we are</font><font color="#E5E5E5"> trying to</font>

355
00:15:19,860 --> 00:15:24,089
analyze this protocol and<font color="#E5E5E5"> inspect the</font>

356
00:15:21,629 --> 00:15:26,879
content and see the conversations first

357
00:15:24,089 --> 00:15:27,480
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is a binary</font><font color="#E5E5E5"> protocol you can</font><font color="#CCCCCC"> just</font>

358
00:15:26,879 --> 00:15:29,220
use

359
00:15:27,480 --> 00:15:32,490
that<font color="#E5E5E5"> cut</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> draft the traffic and see</font>

360
00:15:29,220 --> 00:15:34,380
what's going on it's it's not so simple

361
00:15:32,490 --> 00:15:36,480
second<font color="#E5E5E5"> of all if you add to that that</font>

362
00:15:34,380 --> 00:15:41,240
all<font color="#E5E5E5"> implementations that I've seen are</font>

363
00:15:36,480 --> 00:15:41,240
using TLS<font color="#CCCCCC"> the content is encrypted</font><font color="#E5E5E5"> and</font>

364
00:15:41,269 --> 00:15:46,980
most of the intercepting proxies we are

365
00:15:44,130 --> 00:15:49,500
<font color="#E5E5E5">agreat we are using currently</font><font color="#CCCCCC"> in the web</font>

366
00:15:46,980 --> 00:15:52,889
application<font color="#CCCCCC"> security</font><font color="#E5E5E5"> feel like burp</font>

367
00:15:49,500 --> 00:15:54,540
<font color="#CCCCCC">fiddler</font><font color="#E5E5E5"> still don't support h2 so if you</font>

368
00:15:52,889 --> 00:15:56,070
would like<font color="#E5E5E5"> to intercept a request that</font>

369
00:15:54,540 --> 00:16:00,349
becomes not so<font color="#CCCCCC"> trivial</font>

370
00:15:56,070 --> 00:16:03,000
so which tools can we<font color="#E5E5E5"> use to watch these</font>

371
00:16:00,350 --> 00:16:06,480
conversations<font color="#E5E5E5"> well on the server side</font>

372
00:16:03,000 --> 00:16:09,329
I'm using the<font color="#E5E5E5"> ng HTTP</font><font color="#CCCCCC"> 2 server logs</font>

373
00:16:06,480 --> 00:16:11,639
these are verbose logs<font color="#E5E5E5"> debug logs and</font>

374
00:16:09,329 --> 00:16:14,638
we'll dive<font color="#E5E5E5"> into them and</font><font color="#CCCCCC"> see exactly</font>

375
00:16:11,639 --> 00:16:17,790
what<font color="#E5E5E5"> goes on in these conversations if</font>

376
00:16:14,639 --> 00:16:20,310
<font color="#E5E5E5">we're on the client side</font><font color="#CCCCCC"> I urge</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> to</font>

377
00:16:17,790 --> 00:16:22,260
use Chrome chrome has the net internals

378
00:16:20,310 --> 00:16:24,779
where you can<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> look at all the</font>

379
00:16:22,260 --> 00:16:27,000
HTTP<font color="#CCCCCC"> 2 sessions you're</font><font color="#E5E5E5"> having and see a</font>

380
00:16:24,779 --> 00:16:31,110
complete verbose log of anything<font color="#CCCCCC"> that</font>

381
00:16:27,000 --> 00:16:36,029
goes<font color="#CCCCCC"> in</font><font color="#E5E5E5"> that session so</font><font color="#CCCCCC"> let's get</font>

382
00:16:31,110 --> 00:16:38,310
familiarized with with the logs this is

383
00:16:36,029 --> 00:16:40,260
a snippet<font color="#CCCCCC"> from the server log so keep in</font>

384
00:16:38,310 --> 00:16:43,199
mind<font color="#CCCCCC"> whenever you see sent</font><font color="#E5E5E5"> or receive</font>

385
00:16:40,260 --> 00:16:45,630
this is the server side and I<font color="#E5E5E5"> just want</font>

386
00:16:43,199 --> 00:16:47,399
<font color="#E5E5E5">to bring you two examples</font><font color="#CCCCCC"> to see</font><font color="#E5E5E5"> how we</font>

387
00:16:45,630 --> 00:16:49,170
can read those logs<font color="#CCCCCC"> so in the first</font>

388
00:16:47,399 --> 00:16:51,510
<font color="#E5E5E5">example</font><font color="#CCCCCC"> we see that the</font><font color="#E5E5E5"> server</font><font color="#CCCCCC"> is</font>

389
00:16:49,170 --> 00:16:54,719
sending<font color="#E5E5E5"> a settings settings frame over</font>

390
00:16:51,510 --> 00:16:57,600
<font color="#E5E5E5">stream ID 0 and within that frame there</font>

391
00:16:54,720 --> 00:16:59,069
is<font color="#E5E5E5"> a single setting which is the maximum</font>

392
00:16:57,600 --> 00:17:01,589
<font color="#CCCCCC">current streams that the server is</font>

393
00:16:59,069 --> 00:17:05,040
<font color="#E5E5E5">willing</font><font color="#CCCCCC"> to handle in this</font><font color="#E5E5E5"> connection as</font>

394
00:17:01,589 --> 00:17:07,740
<font color="#E5E5E5">the general settings frame</font><font color="#CCCCCC"> a give each</font>

395
00:17:05,040 --> 00:17:08,909
view of the connection can express some

396
00:17:07,740 --> 00:17:11,250
<font color="#CCCCCC">of its characteristics and limitations</font>

397
00:17:08,910 --> 00:17:14,790
<font color="#CCCCCC">and the other side of the connection</font>

398
00:17:11,250 --> 00:17:16,500
<font color="#E5E5E5">must respect them next the server</font>

399
00:17:14,790 --> 00:17:18,569
receives the settings frame from<font color="#E5E5E5"> the</font>

400
00:17:16,500 --> 00:17:21,000
client which has three<font color="#E5E5E5"> different</font>

401
00:17:18,569 --> 00:17:23,520
<font color="#CCCCCC">settings</font><font color="#E5E5E5"> the maximum side of the header</font>

402
00:17:21,000 --> 00:17:27,089
size what is<font color="#CCCCCC"> the initial window size and</font>

403
00:17:23,520 --> 00:17:31,500
<font color="#E5E5E5">the maximum frame side that the client</font>

404
00:17:27,089 --> 00:17:34,080
is<font color="#E5E5E5"> willing to digest this is a typical</font>

405
00:17:31,500 --> 00:17:35,669
conversation<font color="#CCCCCC"> in this case it's a get</font>

406
00:17:34,080 --> 00:17:38,399
request that didn't include<font color="#CCCCCC"> the headers</font>

407
00:17:35,669 --> 00:17:39,540
because<font color="#E5E5E5"> of a</font><font color="#CCCCCC"> slight real-estate but we</font>

408
00:17:38,400 --> 00:17:41,240
have a<font color="#CCCCCC"> hydros frame</font>

409
00:17:39,540 --> 00:17:43,309
sent<font color="#E5E5E5"> over stream ID 15</font>

410
00:17:41,240 --> 00:17:45,410
can see that on the right<font color="#E5E5E5"> corner this is</font>

411
00:17:43,309 --> 00:17:48,410
essentially a<font color="#E5E5E5"> catch request with no body</font>

412
00:17:45,410 --> 00:17:51,410
payload next to client sends a<font color="#E5E5E5"> Windows</font>

413
00:17:48,410 --> 00:17:53,360
<font color="#E5E5E5">Update frame which would increase the</font>

414
00:17:51,410 --> 00:17:55,790
window size for this particular stream

415
00:17:53,360 --> 00:17:58,909
<font color="#E5E5E5">this is sent over stream ID 15 you can</font>

416
00:17:55,790 --> 00:18:01,460
<font color="#E5E5E5">see it up</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> on the corner and</font><font color="#CCCCCC"> there</font>

417
00:17:58,910 --> 00:18:03,980
<font color="#CCCCCC">December the server would</font><font color="#E5E5E5"> response in a</font>

418
00:18:01,460 --> 00:18:07,070
server in a response<font color="#CCCCCC"> probably I think</font>

419
00:18:03,980 --> 00:18:10,730
<font color="#CCCCCC">this was a</font><font color="#E5E5E5"> 404 with no content over</font><font color="#CCCCCC"> the</font>

420
00:18:07,070 --> 00:18:13,399
same stream ID so<font color="#E5E5E5"> this should give you a</font>

421
00:18:10,730 --> 00:18:16,490
roughly a good idea of how does<font color="#CCCCCC"> an h2</font>

422
00:18:13,400 --> 00:18:18,500
conversation look like<font color="#E5E5E5"> first the</font>

423
00:18:16,490 --> 00:18:21,050
connection is<font color="#E5E5E5"> established and there are</font>

424
00:18:18,500 --> 00:18:24,650
some negotiations<font color="#E5E5E5"> now as I've said the</font>

425
00:18:21,050 --> 00:18:26,419
RFC does allow communication<font color="#E5E5E5"> over to</font>

426
00:18:24,650 --> 00:18:29,090
your text but I won't<font color="#E5E5E5"> go into that</font>

427
00:18:26,420 --> 00:18:31,309
<font color="#CCCCCC">because it's</font><font color="#E5E5E5"> not really prevalent</font><font color="#CCCCCC"> if the</font>

428
00:18:29,090 --> 00:18:33,409
<font color="#CCCCCC">communication is done over TLS</font><font color="#E5E5E5"> than the</font>

429
00:18:31,309 --> 00:18:36,020
<font color="#E5E5E5">first stage in the TLS when the client</font>

430
00:18:33,410 --> 00:18:38,480
sends<font color="#E5E5E5"> the first message of the handshake</font>

431
00:18:36,020 --> 00:18:41,480
<font color="#CCCCCC">that the client allow there</font><font color="#E5E5E5"> is a TLS</font>

432
00:18:38,480 --> 00:18:44,809
extension called<font color="#E5E5E5"> a LPN the application</font>

433
00:18:41,480 --> 00:18:46,309
<font color="#E5E5E5">level protocol negotiation in which the</font>

434
00:18:44,809 --> 00:18:49,428
<font color="#E5E5E5">client states that he</font><font color="#CCCCCC"> is willing</font><font color="#E5E5E5"> to</font>

435
00:18:46,309 --> 00:18:53,059
<font color="#E5E5E5">communicate either in h2 or an HTTP 1.1</font>

436
00:18:49,429 --> 00:18:57,080
<font color="#E5E5E5">if the server supports h2</font><font color="#CCCCCC"> that protocol</font>

437
00:18:53,059 --> 00:18:59,870
<font color="#E5E5E5">is negotiated and from that part on the</font>

438
00:18:57,080 --> 00:19:02,210
client<font color="#E5E5E5"> and the server continue to to</font>

439
00:18:59,870 --> 00:19:05,540
conversate the conversation in the<font color="#E5E5E5"> h2</font>

440
00:19:02,210 --> 00:19:06,320
protocol next there is<font color="#CCCCCC"> a</font><font color="#E5E5E5"> settings</font>

441
00:19:05,540 --> 00:19:10,100
exchange

442
00:19:06,320 --> 00:19:12,260
now the RFC mandates<font color="#E5E5E5"> both side</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

443
00:19:10,100 --> 00:19:15,139
connection<font color="#CCCCCC"> to send a settings frame as</font>

444
00:19:12,260 --> 00:19:17,809
the<font color="#E5E5E5"> first frame</font><font color="#CCCCCC"> in every HTTP 2</font>

445
00:19:15,140 --> 00:19:19,850
connection this<font color="#E5E5E5"> is mandatory</font><font color="#CCCCCC"> it could be</font>

446
00:19:17,809 --> 00:19:21,649
an empty<font color="#E5E5E5"> settings frame but the first</font>

447
00:19:19,850 --> 00:19:24,559
frame<font color="#CCCCCC"> growing on a new connection</font><font color="#E5E5E5"> has to</font>

448
00:19:21,650 --> 00:19:26,480
<font color="#E5E5E5">be</font><font color="#CCCCCC"> a settings frame and as I've</font>

449
00:19:24,559 --> 00:19:28,190
mentioned<font color="#E5E5E5"> settings frame</font><font color="#CCCCCC"> I don't deal</font>

450
00:19:26,480 --> 00:19:30,110
with specific stream they deal with

451
00:19:28,190 --> 00:19:32,840
characteristics<font color="#CCCCCC"> of the entire connection</font>

452
00:19:30,110 --> 00:19:36,110
<font color="#CCCCCC">and therefore they are</font><font color="#E5E5E5"> always allocated</font>

453
00:19:32,840 --> 00:19:39,590
with stream ID<font color="#E5E5E5"> 0 so connection was</font>

454
00:19:36,110 --> 00:19:41,809
<font color="#CCCCCC">established</font><font color="#E5E5E5"> we've we've exchanged some</font>

455
00:19:39,590 --> 00:19:44,120
settings frame<font color="#E5E5E5"> now we can do the request</font>

456
00:19:41,809 --> 00:19:47,720
<font color="#CCCCCC">this is a full snippet of a request as</font>

457
00:19:44,120 --> 00:19:50,719
you<font color="#E5E5E5"> can see this is a get request which</font>

458
00:19:47,720 --> 00:19:54,250
<font color="#E5E5E5">is sent in a headers frame</font><font color="#CCCCCC"> over stream</font>

459
00:19:50,720 --> 00:19:56,230
ID 1 and the server<font color="#E5E5E5"> can now</font>

460
00:19:54,250 --> 00:19:58,720
with its<font color="#E5E5E5"> own server response in this</font>

461
00:19:56,230 --> 00:20:02,169
<font color="#E5E5E5">case</font><font color="#CCCCCC"> the response has both the headers</font>

462
00:19:58,720 --> 00:20:06,700
frame and data frame for the actual<font color="#E5E5E5"> body</font>

463
00:20:02,169 --> 00:20:07,750
payload of<font color="#CCCCCC"> the message so</font><font color="#E5E5E5"> hopefully by</font>

464
00:20:06,700 --> 00:20:11,020
now you have<font color="#CCCCCC"> a fairly good understanding</font>

465
00:20:07,750 --> 00:20:12,340
and I'll do<font color="#CCCCCC"> just a</font><font color="#E5E5E5"> quick recap</font><font color="#CCCCCC"> these are</font>

466
00:20:11,020 --> 00:20:15,070
the key<font color="#E5E5E5"> differences between the two</font>

467
00:20:12,340 --> 00:20:17,408
versions<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> protocol first protocol</font>

468
00:20:15,070 --> 00:20:20,289
<font color="#CCCCCC">I'm sorry I don't</font><font color="#E5E5E5"> know why you can see</font>

469
00:20:17,409 --> 00:20:23,740
the car so well it should be orange<font color="#CCCCCC"> but</font>

470
00:20:20,289 --> 00:20:25,480
<font color="#CCCCCC">I'll</font><font color="#E5E5E5"> try to read that</font><font color="#CCCCCC"> out to you</font><font color="#E5E5E5"> the</font>

471
00:20:23,740 --> 00:20:27,820
first version of the protocol is a

472
00:20:25,480 --> 00:20:30,700
text-based protocol<font color="#E5E5E5"> where a second</font>

473
00:20:27,820 --> 00:20:32,139
version is<font color="#E5E5E5"> a binary protocol both of the</font>

474
00:20:30,700 --> 00:20:34,360
work of both of the protocols either

475
00:20:32,140 --> 00:20:36,850
version<font color="#CCCCCC"> 2 version 1 could</font><font color="#E5E5E5"> be transmitted</font>

476
00:20:34,360 --> 00:20:40,330
over<font color="#E5E5E5"> clear text TCP or over an encrypted</font>

477
00:20:36,850 --> 00:20:42,158
<font color="#CCCCCC">Channel as</font><font color="#E5E5E5"> for concurrency first</font>

478
00:20:40,330 --> 00:20:44,408
versions of<font color="#E5E5E5"> the protocol use multiple</font>

479
00:20:42,159 --> 00:20:47,039
TCP connections<font color="#E5E5E5"> and request pipelining</font>

480
00:20:44,409 --> 00:20:50,110
that would it introduced in HTTP<font color="#E5E5E5"> 1.1</font>

481
00:20:47,039 --> 00:20:52,900
<font color="#E5E5E5">whereas HTTP 2 uses</font><font color="#CCCCCC"> a single</font><font color="#E5E5E5"> TCP</font>

482
00:20:50,110 --> 00:20:55,389
connection and does request multiplexing

483
00:20:52,900 --> 00:20:57,549
and last but not least you<font color="#CCCCCC"> have two new</font>

484
00:20:55,390 --> 00:20:59,320
mechanisms that were introduced to the

485
00:20:57,549 --> 00:21:03,850
protocol the<font color="#CCCCCC"> H pack header compression</font>

486
00:20:59,320 --> 00:21:06,689
<font color="#E5E5E5">and the server push concept and that's</font><font color="#CCCCCC"> a</font>

487
00:21:03,850 --> 00:21:10,959
<font color="#CCCCCC">neat image I saw from the</font><font color="#E5E5E5"> ng Ingenix</font>

488
00:21:06,690 --> 00:21:12,850
documentation where you have the first

489
00:21:10,960 --> 00:21:19,510
request<font color="#E5E5E5"> in HTTP 1 and the binary</font>

490
00:21:12,850 --> 00:21:20,350
<font color="#CCCCCC">representation of</font><font color="#E5E5E5"> HTTP 2</font><font color="#CCCCCC"> requests so now</font>

491
00:21:19,510 --> 00:21:22,270
that you have<font color="#CCCCCC"> a fairly</font><font color="#E5E5E5"> good</font>

492
00:21:20,350 --> 00:21:26,678
<font color="#CCCCCC">understanding of H</font><font color="#E5E5E5"> 2</font><font color="#CCCCCC"> let's talk about</font>

493
00:21:22,270 --> 00:21:29,139
passive client fingerprinting<font color="#E5E5E5"> now as the</font>

494
00:21:26,679 --> 00:21:31,600
name suggests this is a passive form<font color="#E5E5E5"> of</font>

495
00:21:29,140 --> 00:21:33,610
fingerprinting<font color="#E5E5E5"> we do not inject anything</font>

496
00:21:31,600 --> 00:21:36,730
to the client<font color="#E5E5E5"> we do not execute or</font><font color="#CCCCCC"> run</font>

497
00:21:33,610 --> 00:21:38,559
<font color="#E5E5E5">anything</font><font color="#CCCCCC"> on the client side all we do is</font>

498
00:21:36,730 --> 00:21:40,990
simply observe the behavior of the

499
00:21:38,559 --> 00:21:43,418
client<font color="#E5E5E5"> and from that we</font><font color="#CCCCCC"> are trying</font><font color="#E5E5E5"> to</font>

500
00:21:40,990 --> 00:21:45,700
expose<font color="#E5E5E5"> some consistent unique behavior</font>

501
00:21:43,419 --> 00:21:47,789
that<font color="#CCCCCC"> would differentiate this client</font>

502
00:21:45,700 --> 00:21:50,230
from other clients

503
00:21:47,789 --> 00:21:52,720
<font color="#CCCCCC">where would</font><font color="#E5E5E5"> we look to see such</font>

504
00:21:50,230 --> 00:21:54,370
<font color="#CCCCCC">behaviour well we can do</font><font color="#E5E5E5"> that in any of</font>

505
00:21:52,720 --> 00:21:56,260
the<font color="#E5E5E5"> layers of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> communication so we</font>

506
00:21:54,370 --> 00:21:59,199
can do that<font color="#E5E5E5"> on the transport layer</font>

507
00:21:56,260 --> 00:22:01,059
<font color="#E5E5E5">looking at the TCP characteristics we</font>

508
00:21:59,200 --> 00:22:03,730
<font color="#E5E5E5">can do that in the session</font><font color="#CCCCCC"> we're looking</font>

509
00:22:01,059 --> 00:22:05,379
at the TLS implementation<font color="#CCCCCC"> or like we do</font>

510
00:22:03,730 --> 00:22:06,050
in<font color="#E5E5E5"> the h2 can look at the application</font>

511
00:22:05,380 --> 00:22:09,880
<font color="#CCCCCC">layer</font>

512
00:22:06,050 --> 00:22:12,710
actually derive this behavior from<font color="#CCCCCC"> their</font>

513
00:22:09,880 --> 00:22:14,360
who are we trying<font color="#E5E5E5"> to fingerprint</font><font color="#CCCCCC"> I just</font>

514
00:22:12,710 --> 00:22:16,910
want to make<font color="#E5E5E5"> sure we are</font><font color="#CCCCCC"> not trying to</font>

515
00:22:14,360 --> 00:22:18,740
fingerprint<font color="#CCCCCC"> end-users and either if we</font>

516
00:22:16,910 --> 00:22:21,050
want if even if we were trying to

517
00:22:18,740 --> 00:22:23,180
fingerprint<font color="#E5E5E5"> end-users we we cannot do</font>

518
00:22:21,050 --> 00:22:25,610
that<font color="#E5E5E5"> using passive transfigure</font><font color="#CCCCCC"> pin</font><font color="#E5E5E5"> all</font>

519
00:22:23,180 --> 00:22:27,800
we do<font color="#E5E5E5"> is look at the software</font><font color="#CCCCCC"> the way a</font>

520
00:22:25,610 --> 00:22:30,770
<font color="#E5E5E5">certain client is implementing a certain</font>

521
00:22:27,800 --> 00:22:33,830
protocol<font color="#E5E5E5"> and by that we can infer</font>

522
00:22:30,770 --> 00:22:34,280
something<font color="#E5E5E5"> on that client why do we do</font>

523
00:22:33,830 --> 00:22:36,050
that

524
00:22:34,280 --> 00:22:38,270
well<font color="#E5E5E5"> we want you to do something</font><font color="#CCCCCC"> maybe</font>

525
00:22:36,050 --> 00:22:41,000
<font color="#E5E5E5">about the uptime</font><font color="#CCCCCC"> of the client</font><font color="#E5E5E5"> the</font>

526
00:22:38,270 --> 00:22:42,770
running OS maybe about the<font color="#CCCCCC"> running</font>

527
00:22:41,000 --> 00:22:44,450
version<font color="#CCCCCC"> of these particular clients and</font>

528
00:22:42,770 --> 00:22:47,180
all of these information<font color="#E5E5E5"> would allow</font><font color="#CCCCCC"> us</font>

529
00:22:44,450 --> 00:22:51,560
<font color="#E5E5E5">to depreciate this client form other</font>

530
00:22:47,180 --> 00:22:53,960
clients now specifically for actually<font color="#E5E5E5"> P</font>

531
00:22:51,560 --> 00:22:55,730
<font color="#CCCCCC">2 we are</font><font color="#E5E5E5"> going to observe the way</font>

532
00:22:53,960 --> 00:22:58,490
clients behave when they<font color="#CCCCCC"> are established</font>

533
00:22:55,730 --> 00:23:00,500
<font color="#CCCCCC">in</font><font color="#E5E5E5"> connection and it seems that there</font>

534
00:22:58,490 --> 00:23:03,050
<font color="#CCCCCC">are a lot of consistent behaviors when</font>

535
00:23:00,500 --> 00:23:04,610
you do that<font color="#E5E5E5"> on HTTP 2 we are going to</font>

536
00:23:03,050 --> 00:23:06,290
look into<font color="#E5E5E5"> the way that the initial</font>

537
00:23:04,610 --> 00:23:09,199
connection<font color="#E5E5E5"> settings are being sent and</font>

538
00:23:06,290 --> 00:23:10,670
<font color="#E5E5E5">the actual parameters we are going to</font>

539
00:23:09,200 --> 00:23:13,340
look at the way that clients<font color="#CCCCCC"> handled</font>

540
00:23:10,670 --> 00:23:14,750
flow controls and priority and last but

541
00:23:13,340 --> 00:23:19,129
<font color="#E5E5E5">not least we are going</font><font color="#CCCCCC"> to look at at</font>

542
00:23:14,750 --> 00:23:20,690
<font color="#E5E5E5">pseudo</font><font color="#CCCCCC"> headers</font><font color="#E5E5E5"> I've</font><font color="#CCCCCC"> mentioned before now</font>

543
00:23:19,130 --> 00:23:22,850
you should if you remember this slide

544
00:23:20,690 --> 00:23:25,280
<font color="#E5E5E5">these are the</font><font color="#CCCCCC"> ten types of frames which</font>

545
00:23:22,850 --> 00:23:26,929
<font color="#CCCCCC">are defined in</font><font color="#E5E5E5"> the RFC and for the</font>

546
00:23:25,280 --> 00:23:29,570
fingerprinting we are only<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> use</font>

547
00:23:26,930 --> 00:23:31,700
four of<font color="#E5E5E5"> them the settings frame the</font>

548
00:23:29,570 --> 00:23:33,889
<font color="#E5E5E5">Windows Update frame priority and the</font>

549
00:23:31,700 --> 00:23:37,420
pseudo headers so let's deep dive into

550
00:23:33,890 --> 00:23:39,500
them first one is the settings frame

551
00:23:37,420 --> 00:23:41,870
<font color="#CCCCCC">well as I've mentioned</font><font color="#E5E5E5"> the settings</font>

552
00:23:39,500 --> 00:23:44,750
<font color="#E5E5E5">friend should convey configuration</font>

553
00:23:41,870 --> 00:23:47,000
parameters from<font color="#E5E5E5"> the entire connection</font>

554
00:23:44,750 --> 00:23:49,340
and they must always be sent by both

555
00:23:47,000 --> 00:23:52,100
<font color="#CCCCCC">endpoints of the</font><font color="#E5E5E5"> connection at the start</font>

556
00:23:49,340 --> 00:23:53,780
<font color="#E5E5E5">of any connection now we would</font><font color="#CCCCCC"> actually</font>

557
00:23:52,100 --> 00:23:57,530
look<font color="#E5E5E5"> at the default</font><font color="#CCCCCC"> parameters and</font>

558
00:23:53,780 --> 00:24:00,470
harvest them for<font color="#CCCCCC"> our fingerprint in</font>

559
00:23:57,530 --> 00:24:03,920
general the RFC defines<font color="#E5E5E5"> six type of</font>

560
00:24:00,470 --> 00:24:06,250
parameters that<font color="#CCCCCC"> can be</font><font color="#E5E5E5"> used and each of</font>

561
00:24:03,920 --> 00:24:09,980
them<font color="#E5E5E5"> is assigned with a unique ID</font><font color="#CCCCCC"> and</font>

562
00:24:06,250 --> 00:24:13,550
<font color="#E5E5E5">some of them deal with server push the</font>

563
00:24:09,980 --> 00:24:15,350
frame size the headers table<font color="#CCCCCC"> and we</font>

564
00:24:13,550 --> 00:24:18,399
would look at the ones which are<font color="#E5E5E5"> being</font>

565
00:24:15,350 --> 00:24:20,439
<font color="#E5E5E5">sent this is an example for Firefox 55</font>

566
00:24:18,400 --> 00:24:23,170
which sends upon any new connection

567
00:24:20,440 --> 00:24:25,810
<font color="#E5E5E5">these exact settings it would say</font>

568
00:24:23,170 --> 00:24:27,850
exactly<font color="#CCCCCC"> three parameter settings each of</font>

569
00:24:25,810 --> 00:24:30,429
them with those exact parameters<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we</font>

570
00:24:27,850 --> 00:24:34,780
just look<font color="#E5E5E5"> at that and we harvest that</font>

571
00:24:30,430 --> 00:24:36,550
into<font color="#CCCCCC"> our fingerprint Safari for example</font>

572
00:24:34,780 --> 00:24:38,350
<font color="#CCCCCC">we'd</font><font color="#E5E5E5"> send different</font><font color="#CCCCCC"> set of parameters</font>

573
00:24:36,550 --> 00:24:41,110
and<font color="#CCCCCC"> for each parameters it would have a</font>

574
00:24:38,350 --> 00:24:43,629
different<font color="#CCCCCC"> type of values and I've</font><font color="#E5E5E5"> added</font>

575
00:24:41,110 --> 00:24:46,990
<font color="#E5E5E5">some examples for edge and for</font><font color="#CCCCCC"> chrome</font>

576
00:24:43,630 --> 00:24:49,000
<font color="#E5E5E5">and taking all these settings and</font>

577
00:24:46,990 --> 00:24:50,830
putting them in<font color="#E5E5E5"> one table was the first</font>

578
00:24:49,000 --> 00:24:53,080
step<font color="#CCCCCC"> towards the fingerprint you</font><font color="#E5E5E5"> can</font>

579
00:24:50,830 --> 00:24:55,060
start<font color="#E5E5E5"> I'm sorry</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> see that</font><font color="#CCCCCC"> very well</font>

580
00:24:53,080 --> 00:24:57,280
but you can see all of the one or all of

581
00:24:55,060 --> 00:24:59,379
<font color="#E5E5E5">those six</font><font color="#CCCCCC"> parameters here and you can</font>

582
00:24:57,280 --> 00:25:02,230
see that<font color="#E5E5E5"> for</font><font color="#CCCCCC"> different clients</font><font color="#E5E5E5"> like for</font>

583
00:24:59,380 --> 00:25:05,910
Firefox 52<font color="#E5E5E5"> on Android</font><font color="#CCCCCC"> 6</font><font color="#E5E5E5"> sends different</font>

584
00:25:02,230 --> 00:25:10,870
parameters then<font color="#E5E5E5"> Android you know my</font>

585
00:25:05,910 --> 00:25:13,720
<font color="#E5E5E5">Chrome on my Android pixel Excel so we</font>

586
00:25:10,870 --> 00:25:16,590
started plotting out this table<font color="#E5E5E5"> and next</font>

587
00:25:13,720 --> 00:25:19,330
we moved on<font color="#CCCCCC"> in to forging a fingerprint</font>

588
00:25:16,590 --> 00:25:22,959
<font color="#E5E5E5">so for the settings part we take the</font>

589
00:25:19,330 --> 00:25:27,240
parameter ID and the value<font color="#E5E5E5"> and we start</font>

590
00:25:22,960 --> 00:25:30,280
to concatenate<font color="#E5E5E5"> them</font><font color="#CCCCCC"> this is for an edge</font>

591
00:25:27,240 --> 00:25:32,020
the same example<font color="#CCCCCC"> can be made for Firefox</font>

592
00:25:30,280 --> 00:25:33,790
we take those<font color="#E5E5E5"> three</font><font color="#CCCCCC"> parameters and</font>

593
00:25:32,020 --> 00:25:36,100
parameters<font color="#E5E5E5"> ID and we start to</font>

594
00:25:33,790 --> 00:25:39,190
<font color="#CCCCCC">concatenate them</font><font color="#E5E5E5"> but that wasn't enough</font>

595
00:25:36,100 --> 00:25:41,110
<font color="#CCCCCC">that did not give us enough entropy to</font>

596
00:25:39,190 --> 00:25:45,370
<font color="#E5E5E5">differentiate and distinguish between a</font>

597
00:25:41,110 --> 00:25:47,500
large number<font color="#CCCCCC"> of</font><font color="#E5E5E5"> clients so we</font><font color="#CCCCCC"> moved on</font>

598
00:25:45,370 --> 00:25:49,830
to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> Windows Update</font><font color="#CCCCCC"> now apparently</font>

599
00:25:47,500 --> 00:25:52,810
some of the clients and<font color="#E5E5E5"> a</font><font color="#CCCCCC"> lot of them</font>

600
00:25:49,830 --> 00:25:54,580
when establishing<font color="#E5E5E5"> a new connection does</font>

601
00:25:52,810 --> 00:25:57,510
<font color="#CCCCCC">not only stand</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> Settings frame</font>

602
00:25:54,580 --> 00:26:00,370
they also<font color="#CCCCCC"> say</font><font color="#E5E5E5"> a Windows Update frame and</font>

603
00:25:57,510 --> 00:26:04,060
the value which is included within that

604
00:26:00,370 --> 00:26:05,739
frame is quite consistent now as I've

605
00:26:04,060 --> 00:26:07,840
mentioned the<font color="#E5E5E5"> windows update frame deals</font>

606
00:26:05,740 --> 00:26:10,480
with flow control<font color="#E5E5E5"> there is an initial</font>

607
00:26:07,840 --> 00:26:13,750
<font color="#CCCCCC">Windows which</font><font color="#E5E5E5"> is could</font><font color="#CCCCCC"> be set implicitly</font>

608
00:26:10,480 --> 00:26:16,480
or explicitly<font color="#CCCCCC"> there</font><font color="#E5E5E5"> is a default size</font>

609
00:26:13,750 --> 00:26:18,220
mentioned in the<font color="#CCCCCC"> RFC</font><font color="#E5E5E5"> and clients</font><font color="#CCCCCC"> can use</font>

610
00:26:16,480 --> 00:26:22,990
<font color="#E5E5E5">a settings frame to set the initial</font>

611
00:26:18,220 --> 00:26:25,540
<font color="#E5E5E5">window size so</font><font color="#CCCCCC"> we take the value from</font>

612
00:26:22,990 --> 00:26:28,590
<font color="#CCCCCC">the</font><font color="#E5E5E5"> windows update frame and we add it</font>

613
00:26:25,540 --> 00:26:31,840
<font color="#CCCCCC">to our</font><font color="#E5E5E5"> fingerprint now if there was no</font>

614
00:26:28,590 --> 00:26:33,429
value sent we<font color="#CCCCCC"> would just put 0</font>

615
00:26:31,840 --> 00:26:35,230
so the first part<font color="#E5E5E5"> of the fingerprint</font>

616
00:26:33,430 --> 00:26:37,600
would be composed<font color="#E5E5E5"> of the settings frame</font>

617
00:26:35,230 --> 00:26:39,580
<font color="#E5E5E5">the second part would be composed of the</font>

618
00:26:37,600 --> 00:26:41,980
value<font color="#E5E5E5"> of the windows increment size in</font>

619
00:26:39,580 --> 00:26:44,710
the<font color="#CCCCCC"> Windows Update</font><font color="#E5E5E5"> frame and if there</font>

620
00:26:41,980 --> 00:26:50,410
was<font color="#E5E5E5"> no value or no frame</font><font color="#CCCCCC"> sent we would</font>

621
00:26:44,710 --> 00:26:52,810
add<font color="#CCCCCC"> 0 to it</font><font color="#E5E5E5"> still not enough entropy so</font>

622
00:26:50,410 --> 00:26:55,360
we<font color="#E5E5E5"> look further and we</font><font color="#CCCCCC"> cut the research</font>

623
00:26:52,810 --> 00:26:57,159
and we found<font color="#E5E5E5"> that we can use the</font>

624
00:26:55,360 --> 00:26:59,050
priority frame mechanism and this is

625
00:26:57,160 --> 00:27:03,910
actually<font color="#E5E5E5"> quite an interesting</font><font color="#CCCCCC"> mechanism</font>

626
00:26:59,050 --> 00:27:06,820
in the protocol<font color="#E5E5E5"> now</font><font color="#CCCCCC"> http/2</font><font color="#E5E5E5"> allows to set</font>

627
00:27:03,910 --> 00:27:08,740
a dependency tree<font color="#E5E5E5"> between frames I'm</font>

628
00:27:06,820 --> 00:27:15,520
sorry you cannot see<font color="#CCCCCC"> everything here</font>

629
00:27:08,740 --> 00:27:16,840
well if you look at the left side<font color="#E5E5E5"> from</font>

630
00:27:15,520 --> 00:27:21,960
<font color="#E5E5E5">your perspective of the frame</font><font color="#CCCCCC"> you see</font>

631
00:27:16,840 --> 00:27:25,629
<font color="#CCCCCC">five stream stream Dec</font><font color="#E5E5E5"> a and B where</font>

632
00:27:21,960 --> 00:27:28,150
<font color="#CCCCCC">stream a</font><font color="#E5E5E5"> and C are dependent on stream D</font>

633
00:27:25,630 --> 00:27:34,600
and stream<font color="#E5E5E5"> a and B are dependent on</font>

634
00:27:28,150 --> 00:27:38,170
stream on stream<font color="#CCCCCC"> C now each parent</font>

635
00:27:34,600 --> 00:27:40,750
stream the stream on which others depend

636
00:27:38,170 --> 00:27:42,880
on is called a parent stream and the

637
00:27:40,750 --> 00:27:46,330
streams<font color="#E5E5E5"> below it are called</font><font color="#CCCCCC"> dependent</font>

638
00:27:42,880 --> 00:27:48,820
stream so what does that mean<font color="#E5E5E5"> the RFC</font>

639
00:27:46,330 --> 00:27:51,790
allows the client to express its

640
00:27:48,820 --> 00:27:54,070
preferences<font color="#CCCCCC"> of how the server should</font>

641
00:27:51,790 --> 00:27:56,050
<font color="#E5E5E5">allocate resources in case it doesn't</font>

642
00:27:54,070 --> 00:28:00,280
<font color="#E5E5E5">have enough resource to send all the</font>

643
00:27:56,050 --> 00:28:01,899
data<font color="#E5E5E5"> now this is just a suggestion the</font>

644
00:28:00,280 --> 00:28:04,300
server does not<font color="#E5E5E5"> have to comply to the</font>

645
00:28:01,900 --> 00:28:06,010
client<font color="#CCCCCC"> preferences but never the same</font>

646
00:28:04,300 --> 00:28:10,570
the client can express those preferences

647
00:28:06,010 --> 00:28:12,160
<font color="#CCCCCC">and each of these</font><font color="#E5E5E5"> streams have weights</font>

648
00:28:10,570 --> 00:28:14,139
below<font color="#E5E5E5"> them for example</font><font color="#CCCCCC"> in this</font><font color="#E5E5E5"> example</font>

649
00:28:12,160 --> 00:28:16,000
<font color="#CCCCCC">the</font><font color="#E5E5E5"> client is</font><font color="#CCCCCC"> telling the server listen</font>

650
00:28:14,140 --> 00:28:18,580
if you have some kind of a resource

651
00:28:16,000 --> 00:28:21,610
limitations<font color="#E5E5E5"> please use your resources</font>

652
00:28:18,580 --> 00:28:24,879
first on stream<font color="#E5E5E5"> D once you are done with</font>

653
00:28:21,610 --> 00:28:26,830
<font color="#E5E5E5">D use your resources</font><font color="#CCCCCC"> for stream E and C</font>

654
00:28:24,880 --> 00:28:29,140
and each of them has the weight of<font color="#CCCCCC"> 8</font>

655
00:28:26,830 --> 00:28:31,360
that<font color="#E5E5E5"> means</font><font color="#CCCCCC"> that the</font><font color="#E5E5E5"> resources between</font>

656
00:28:29,140 --> 00:28:34,120
<font color="#E5E5E5">them should be speed 50 percent and 50</font>

657
00:28:31,360 --> 00:28:36,760
percent<font color="#E5E5E5"> once you are done with stream C</font>

658
00:28:34,120 --> 00:28:39,969
please allocate your resources to stream

659
00:28:36,760 --> 00:28:42,400
a and B and if<font color="#E5E5E5"> the weights are 12 and 4</font>

660
00:28:39,970 --> 00:28:44,100
we can surmise<font color="#E5E5E5"> that the resources should</font>

661
00:28:42,400 --> 00:28:46,950
<font color="#CCCCCC">be distributed</font><font color="#E5E5E5"> as 70</font>

662
00:28:44,100 --> 00:28:51,830
<font color="#CCCCCC">75%</font><font color="#E5E5E5"> of the research should go to stream</font>

663
00:28:46,950 --> 00:28:56,309
a and 4%<font color="#E5E5E5"> and 25% should go to stream B</font>

664
00:28:51,830 --> 00:28:58,590
so we found out<font color="#E5E5E5"> that some</font><font color="#CCCCCC"> of the some of</font>

665
00:28:56,309 --> 00:29:00,600
the clients<font color="#E5E5E5"> actually does not only send</font>

666
00:28:58,590 --> 00:29:03,360
a settings frame and the<font color="#CCCCCC"> windows update</font>

667
00:29:00,600 --> 00:29:05,939
frame but immediately after that<font color="#E5E5E5"> they</font>

668
00:29:03,360 --> 00:29:08,549
start sending priority frames<font color="#E5E5E5"> and this</font>

669
00:29:05,940 --> 00:29:10,710
is a live example<font color="#E5E5E5"> for Firefox Firefox</font>

670
00:29:08,549 --> 00:29:13,590
would send a settings frame we would set

671
00:29:10,710 --> 00:29:17,400
<font color="#E5E5E5">an</font><font color="#CCCCCC"> windows update frame and right after</font>

672
00:29:13,590 --> 00:29:19,439
<font color="#CCCCCC">that five or six priority frames and can</font>

673
00:29:17,400 --> 00:29:23,000
<font color="#E5E5E5">anyone think</font><font color="#CCCCCC"> why</font><font color="#E5E5E5"> would Firefox do that</font>

674
00:29:19,440 --> 00:29:25,350
why would he create<font color="#E5E5E5"> this dependency tree</font>

675
00:29:23,000 --> 00:29:27,120
<font color="#E5E5E5">well essentially there are</font><font color="#CCCCCC"> three lines</font>

676
00:29:25,350 --> 00:29:29,189
he has the high priority frame over

677
00:29:27,120 --> 00:29:31,260
<font color="#E5E5E5">there</font><font color="#CCCCCC"> and stream number three</font><font color="#E5E5E5"> he has the</font>

678
00:29:29,190 --> 00:29:34,380
normal<font color="#CCCCCC"> priority</font><font color="#E5E5E5"> stream numbers five and</font>

679
00:29:31,260 --> 00:29:37,169
<font color="#CCCCCC">low priority stream number</font><font color="#E5E5E5"> seven so we</font>

680
00:29:34,380 --> 00:29:39,179
collect all of the data which<font color="#CCCCCC"> is sent in</font>

681
00:29:37,169 --> 00:29:41,549
the priority<font color="#CCCCCC"> strand the dependent the</font>

682
00:29:39,179 --> 00:29:45,150
dependent tree the weights<font color="#E5E5E5"> and another</font>

683
00:29:41,549 --> 00:29:46,918
exclusivity bit and we've<font color="#E5E5E5"> actually</font>

684
00:29:45,150 --> 00:29:50,760
looked<font color="#E5E5E5"> into that this is a snippet from</font>

685
00:29:46,919 --> 00:29:52,919
<font color="#E5E5E5">the from the comments in the source code</font>

686
00:29:50,760 --> 00:29:54,870
<font color="#CCCCCC">of five Firefox and</font><font color="#E5E5E5"> this is actually</font>

687
00:29:52,919 --> 00:29:57,090
<font color="#CCCCCC">hard-coded the behavior which are</font>

688
00:29:54,870 --> 00:29:59,039
depicted<font color="#CCCCCC"> up</font><font color="#E5E5E5"> until now the set of the</font>

689
00:29:57,090 --> 00:30:00,600
sending<font color="#E5E5E5"> of settings frame next standing</font>

690
00:29:59,039 --> 00:30:02,820
<font color="#E5E5E5">of a Windows Update frame and the</font>

691
00:30:00,600 --> 00:30:05,309
standing of<font color="#CCCCCC"> the priority frames</font><font color="#E5E5E5"> and the</font>

692
00:30:02,820 --> 00:30:06,809
values would be<font color="#E5E5E5"> hard-coded so those are</font>

693
00:30:05,309 --> 00:30:09,059
consistent<font color="#CCCCCC"> and would differentiate</font>

694
00:30:06,809 --> 00:30:13,440
Firefox from<font color="#E5E5E5"> other browsers that don't</font>

695
00:30:09,059 --> 00:30:18,570
behave in that manner<font color="#CCCCCC"> so now we have a</font>

696
00:30:13,440 --> 00:30:20,400
small recap<font color="#E5E5E5"> this is all of the three</font>

697
00:30:18,570 --> 00:30:23,460
elements we've picked up<font color="#CCCCCC"> apple till now</font>

698
00:30:20,400 --> 00:30:25,470
and you can<font color="#E5E5E5"> start seeing that we can now</font>

699
00:30:23,460 --> 00:30:29,700
differentiate between a Chrome<font color="#CCCCCC"> browser</font>

700
00:30:25,470 --> 00:30:31,919
on<font color="#E5E5E5"> Mac OS</font><font color="#CCCCCC"> 6</font><font color="#E5E5E5"> between a request sent by ok</font>

701
00:30:29,700 --> 00:30:34,830
HTTP library<font color="#E5E5E5"> in a Java</font><font color="#CCCCCC"> library or the</font>

702
00:30:31,919 --> 00:30:36,990
<font color="#E5E5E5">curl library</font><font color="#CCCCCC"> a curl client or the ng</font>

703
00:30:34,830 --> 00:30:42,090
HTTP<font color="#CCCCCC"> 2 client</font><font color="#E5E5E5"> each of them has different</font>

704
00:30:36,990 --> 00:30:43,049
<font color="#CCCCCC">signature and this</font><font color="#E5E5E5"> is awesome well we</font>

705
00:30:42,090 --> 00:30:45,449
are almost there

706
00:30:43,049 --> 00:30:47,639
one last element this was did not<font color="#E5E5E5"> this</font>

707
00:30:45,450 --> 00:30:50,000
was really nice<font color="#CCCCCC"> but</font><font color="#E5E5E5"> he did not generate</font>

708
00:30:47,640 --> 00:30:52,650
enough<font color="#E5E5E5"> entropy we needed another</font>

709
00:30:50,000 --> 00:30:53,410
<font color="#CCCCCC">component that</font><font color="#E5E5E5"> would help us further</font>

710
00:30:52,650 --> 00:30:54,940
this

711
00:30:53,410 --> 00:30:56,170
distinguish between clients because

712
00:30:54,940 --> 00:30:59,920
<font color="#CCCCCC">there were there were a lot of</font><font color="#E5E5E5"> clients</font>

713
00:30:56,170 --> 00:31:02,950
that that step<font color="#CCCCCC"> that stage that still had</font>

714
00:30:59,920 --> 00:31:05,200
similar<font color="#CCCCCC"> characteristics</font><font color="#E5E5E5"> so we've</font>

715
00:31:02,950 --> 00:31:06,640
introduced the pseudo headers<font color="#E5E5E5"> now what</font>

716
00:31:05,200 --> 00:31:09,370
are the pseudo headers the pseudo the

717
00:31:06,640 --> 00:31:12,430
RFC defines<font color="#E5E5E5"> a closed set of pseudo</font>

718
00:31:09,370 --> 00:31:15,639
headers<font color="#E5E5E5"> one for the response and four</font>

719
00:31:12,430 --> 00:31:19,810
for<font color="#E5E5E5"> each request now if you think about</font>

720
00:31:15,640 --> 00:31:22,540
it in terms of HTTP 1.1<font color="#CCCCCC"> some of the</font>

721
00:31:19,810 --> 00:31:24,700
headers<font color="#E5E5E5"> the data in the headers is the</font>

722
00:31:22,540 --> 00:31:28,210
data<font color="#E5E5E5"> that was included in the request</font>

723
00:31:24,700 --> 00:31:31,510
<font color="#E5E5E5">line you can see the method to get the</font>

724
00:31:28,210 --> 00:31:33,880
path the resource which is requested<font color="#E5E5E5"> the</font>

725
00:31:31,510 --> 00:31:35,379
<font color="#CCCCCC">authority</font><font color="#E5E5E5"> used to be sent in</font><font color="#CCCCCC"> the prior</font>

726
00:31:33,880 --> 00:31:38,740
versions of the protocol<font color="#E5E5E5"> in the host</font>

727
00:31:35,380 --> 00:31:41,260
<font color="#E5E5E5">header and there was we</font><font color="#CCCCCC"> added the scheme</font>

728
00:31:38,740 --> 00:31:43,300
<font color="#E5E5E5">those are the four pseudo header does</font><font color="#CCCCCC"> a</font>

729
00:31:41,260 --> 00:31:45,100
<font color="#CCCCCC">closed list</font><font color="#E5E5E5"> no one can add to</font><font color="#CCCCCC"> it if</font>

730
00:31:43,300 --> 00:31:48,250
<font color="#E5E5E5">someone would actually try to add</font><font color="#CCCCCC"> to</font>

731
00:31:45,100 --> 00:31:50,110
these headers<font color="#E5E5E5"> the protocol would mandate</font>

732
00:31:48,250 --> 00:31:51,820
<font color="#CCCCCC">that it would be considered as the</font>

733
00:31:50,110 --> 00:31:56,620
protocol<font color="#CCCCCC"> error and the connection would</font>

734
00:31:51,820 --> 00:31:58,120
<font color="#E5E5E5">be broken so what was interesting about</font>

735
00:31:56,620 --> 00:32:00,159
<font color="#E5E5E5">these headers and of course from the</font>

736
00:31:58,120 --> 00:32:01,810
client perspective we only we're only

737
00:32:00,160 --> 00:32:05,220
interested in<font color="#E5E5E5"> the request</font><font color="#CCCCCC"> pseudo headers</font>

738
00:32:01,810 --> 00:32:07,990
<font color="#E5E5E5">is that if you look at different clients</font>

739
00:32:05,220 --> 00:32:10,600
each of them send<font color="#E5E5E5"> those hairs in a</font>

740
00:32:07,990 --> 00:32:12,700
different order<font color="#E5E5E5"> like one would send</font>

741
00:32:10,600 --> 00:32:16,209
method authorities scheme and path

742
00:32:12,700 --> 00:32:19,030
whereas Safari would do<font color="#E5E5E5"> method scheme</font>

743
00:32:16,210 --> 00:32:21,520
<font color="#E5E5E5">path and</font><font color="#CCCCCC"> ass or an authority so if you</font>

744
00:32:19,030 --> 00:32:23,200
look at<font color="#E5E5E5"> that you can once again use</font><font color="#CCCCCC"> that</font>

745
00:32:21,520 --> 00:32:28,050
<font color="#E5E5E5">and differentiate I don't know the gorge</font>

746
00:32:23,200 --> 00:32:28,050
TDP client from<font color="#E5E5E5"> the</font><font color="#CCCCCC"> JDL HTTP client</font>

747
00:32:29,100 --> 00:32:34,240
looking into<font color="#E5E5E5"> a chrome source code</font>

748
00:32:31,530 --> 00:32:37,450
<font color="#E5E5E5">actually validates the assumption that</font>

749
00:32:34,240 --> 00:32:39,610
this<font color="#CCCCCC"> is consistent the the structure</font><font color="#E5E5E5"> in</font>

750
00:32:37,450 --> 00:32:41,890
which the headers<font color="#E5E5E5"> the pseudo headers are</font>

751
00:32:39,610 --> 00:32:45,699
sent is a constant and it would not

752
00:32:41,890 --> 00:32:47,860
<font color="#CCCCCC">change for Chrome so now we get</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> the</font>

753
00:32:45,700 --> 00:32:49,540
final fingerprint we've<font color="#E5E5E5"> reviewed all of</font>

754
00:32:47,860 --> 00:32:52,090
the<font color="#E5E5E5"> elements the first element would be</font>

755
00:32:49,540 --> 00:32:55,149
<font color="#E5E5E5">collecting the settings parameters the</font>

756
00:32:52,090 --> 00:32:58,209
<font color="#CCCCCC">IDS</font><font color="#E5E5E5"> and the parameter values next we</font>

757
00:32:55,150 --> 00:33:00,690
would collect the<font color="#CCCCCC"> windows update third</font>

758
00:32:58,210 --> 00:33:03,160
we would look at<font color="#E5E5E5"> the priority frame and</font>

759
00:33:00,690 --> 00:33:05,750
if there is no windows update or

760
00:33:03,160 --> 00:33:08,600
priority we would actually

761
00:33:05,750 --> 00:33:10,850
zero there<font color="#E5E5E5"> and the fourth element</font><font color="#CCCCCC"> is</font>

762
00:33:08,600 --> 00:33:12,230
encoding those four pseudo headers and

763
00:33:10,850 --> 00:33:15,320
looking at the order<font color="#E5E5E5"> in</font><font color="#CCCCCC"> which they</font>

764
00:33:12,230 --> 00:33:17,270
<font color="#CCCCCC">appear now the fourth element is a bit</font>

765
00:33:15,320 --> 00:33:19,070
<font color="#E5E5E5">different from the previous</font><font color="#CCCCCC"> one because</font>

766
00:33:17,270 --> 00:33:21,290
<font color="#E5E5E5">we actually have to</font><font color="#CCCCCC"> wait for the first</font>

767
00:33:19,070 --> 00:33:23,780
response<font color="#CCCCCC"> I'm sorry for the first request</font>

768
00:33:21,290 --> 00:33:26,300
<font color="#E5E5E5">to collect the pseudo headers but</font>

769
00:33:23,780 --> 00:33:30,260
<font color="#E5E5E5">initially every connection is usually</font>

770
00:33:26,300 --> 00:33:33,379
being created in order<font color="#E5E5E5"> to send requests</font>

771
00:33:30,260 --> 00:33:34,490
so this is the only<font color="#E5E5E5"> difference the key</font>

772
00:33:33,380 --> 00:33:39,320
difference<font color="#CCCCCC"> between the fourth element</font>

773
00:33:34,490 --> 00:33:43,730
<font color="#CCCCCC">and the other three so what are the use</font>

774
00:33:39,320 --> 00:33:47,840
cases<font color="#CCCCCC"> can any of you think about</font><font color="#E5E5E5"> nice</font>

775
00:33:43,730 --> 00:33:51,500
use cases for<font color="#E5E5E5"> these fingerprints</font><font color="#CCCCCC"> I know</font>

776
00:33:47,840 --> 00:33:53,780
<font color="#CCCCCC">3:30</font><font color="#E5E5E5"> it's hard well there are several</font>

777
00:33:51,500 --> 00:33:57,500
use cases for<font color="#E5E5E5"> this</font><font color="#CCCCCC"> first of all it's</font>

778
00:33:53,780 --> 00:33:59,690
positive security<font color="#E5E5E5"> if someone if if a</font>

779
00:33:57,500 --> 00:34:01,760
<font color="#E5E5E5">request is</font><font color="#CCCCCC"> coming from a browser</font><font color="#E5E5E5"> which</font>

780
00:33:59,690 --> 00:34:02,330
asserts to be a certain version<font color="#CCCCCC"> of</font>

781
00:34:01,760 --> 00:34:04,070
<font color="#E5E5E5">Chrome</font>

782
00:34:02,330 --> 00:34:06,409
associated with<font color="#CCCCCC"> a</font><font color="#E5E5E5"> certain operating</font>

783
00:34:04,070 --> 00:34:08,389
system you can<font color="#CCCCCC"> validate that you can</font>

784
00:34:06,410 --> 00:34:10,010
look at the fingerprint and see if it

785
00:34:08,389 --> 00:34:11,899
<font color="#E5E5E5">matches the print the fingerprint that</font>

786
00:34:10,010 --> 00:34:13,100
<font color="#E5E5E5">we have recorded for this particular</font>

787
00:34:11,899 --> 00:34:15,739
version<font color="#CCCCCC"> and for this particular</font>

788
00:34:13,100 --> 00:34:18,440
<font color="#E5E5E5">operating</font><font color="#CCCCCC"> system that would</font><font color="#E5E5E5"> allow</font><font color="#CCCCCC"> us to</font>

789
00:34:15,739 --> 00:34:21,370
<font color="#CCCCCC">intact</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> detect browser impersonator</font><font color="#E5E5E5"> we</font>

790
00:34:18,440 --> 00:34:23,990
can detect search engine impersonators

791
00:34:21,370 --> 00:34:28,250
<font color="#E5E5E5">we can detect all sorts of other tools</font>

792
00:34:23,989 --> 00:34:31,729
<font color="#E5E5E5">and the last thing we can</font><font color="#CCCCCC"> do is that</font><font color="#E5E5E5"> if</font>

793
00:34:28,250 --> 00:34:34,879
we see an IP<font color="#CCCCCC"> address from which a very</font>

794
00:34:31,730 --> 00:34:37,040
large<font color="#E5E5E5"> amount of distinct</font><font color="#CCCCCC"> finger prints</font>

795
00:34:34,879 --> 00:34:39,020
are originating from<font color="#E5E5E5"> and these</font>

796
00:34:37,040 --> 00:34:41,239
fingerprints<font color="#E5E5E5"> are attributed</font><font color="#CCCCCC"> to different</font>

797
00:34:39,020 --> 00:34:44,389
operating systems<font color="#E5E5E5"> and different versions</font>

798
00:34:41,239 --> 00:34:46,040
<font color="#E5E5E5">and we can try</font><font color="#CCCCCC"> and use that data to</font>

799
00:34:44,389 --> 00:34:47,690
<font color="#E5E5E5">surmise that this is some kind</font><font color="#CCCCCC"> of a</font>

800
00:34:46,040 --> 00:34:50,210
shared IP<font color="#CCCCCC"> it could be a corporate</font>

801
00:34:47,690 --> 00:34:52,370
gateway and if the amounts are really

802
00:34:50,210 --> 00:34:55,580
big it could be an<font color="#CCCCCC"> anonymous proxy or a</font>

803
00:34:52,370 --> 00:34:57,680
VPN so for any<font color="#E5E5E5"> of you who is interested</font>

804
00:34:55,580 --> 00:35:01,310
<font color="#E5E5E5">in those</font><font color="#CCCCCC"> capabilities it can be used for</font>

805
00:34:57,680 --> 00:35:02,990
<font color="#E5E5E5">detection of such IPS as well now the</font>

806
00:35:01,310 --> 00:35:04,370
last<font color="#E5E5E5"> comment I included is very</font>

807
00:35:02,990 --> 00:35:07,009
important for everyone was doing

808
00:35:04,370 --> 00:35:10,220
fingerprinting it is always to get

809
00:35:07,010 --> 00:35:12,590
optimal results<font color="#E5E5E5"> it is always best to</font>

810
00:35:10,220 --> 00:35:14,750
combine fingerprinting from different

811
00:35:12,590 --> 00:35:18,320
<font color="#CCCCCC">players if you</font><font color="#E5E5E5"> can fingerprint</font>

812
00:35:14,750 --> 00:35:19,970
everything look at<font color="#E5E5E5"> the at the</font>

813
00:35:18,320 --> 00:35:21,530
at the session there and look at the

814
00:35:19,970 --> 00:35:25,040
application<font color="#CCCCCC"> there look at the transport</font>

815
00:35:21,530 --> 00:35:28,010
<font color="#E5E5E5">layer</font><font color="#CCCCCC"> combine the TCP with the HTTP</font>

816
00:35:25,040 --> 00:35:29,210
version<font color="#CCCCCC"> and if you're</font><font color="#E5E5E5"> doing some active</font>

817
00:35:28,010 --> 00:35:30,290
client fingerprinting I don't know

818
00:35:29,210 --> 00:35:32,510
you're doing some JavaScript

819
00:35:30,290 --> 00:35:33,650
fingerprinting<font color="#CCCCCC"> combine that as well</font><font color="#E5E5E5"> so</font>

820
00:35:32,510 --> 00:35:36,230
<font color="#CCCCCC">you</font><font color="#E5E5E5"> get the whole picture for each</font>

821
00:35:33,650 --> 00:35:38,630
<font color="#E5E5E5">client and you'll be you have a lot</font><font color="#CCCCCC"> more</font>

822
00:35:36,230 --> 00:35:45,770
to go by in<font color="#E5E5E5"> differentiating those</font>

823
00:35:38,630 --> 00:35:48,830
<font color="#E5E5E5">clients well I thought that every</font>

824
00:35:45,770 --> 00:35:50,900
lecture<font color="#CCCCCC"> about h2 in blackhat should at</font>

825
00:35:48,830 --> 00:35:53,660
least address the threat landscape for

826
00:35:50,900 --> 00:35:57,050
h2<font color="#E5E5E5"> and as I've</font><font color="#CCCCCC"> said in Akamai we see</font>

827
00:35:53,660 --> 00:35:58,850
huge amounts of<font color="#E5E5E5"> traffic's and a lot of</font>

828
00:35:57,050 --> 00:36:00,860
this traffic is attack<font color="#CCCCCC"> traffic and we</font>

829
00:35:58,850 --> 00:36:03,170
can differentiate and plot a

830
00:36:00,860 --> 00:36:06,830
visualization of what would the threat

831
00:36:03,170 --> 00:36:08,180
landscape for h2<font color="#E5E5E5"> look like and before</font>

832
00:36:06,830 --> 00:36:10,940
<font color="#E5E5E5">making this</font><font color="#CCCCCC"> presentation and</font><font color="#E5E5E5"> the</font>

833
00:36:08,180 --> 00:36:13,940
research I've gone<font color="#E5E5E5"> and and queried our</font>

834
00:36:10,940 --> 00:36:15,860
system and our<font color="#E5E5E5"> logs to see how does the</font>

835
00:36:13,940 --> 00:36:21,710
threat landscape for h2 looks and it

836
00:36:15,860 --> 00:36:24,320
<font color="#E5E5E5">looks like and there you have</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> it's a</font>

837
00:36:21,710 --> 00:36:29,720
complete desert<font color="#E5E5E5"> actually there's not a</font>

838
00:36:24,320 --> 00:36:34,100
lot<font color="#CCCCCC"> of attacks over h2 especially if you</font>

839
00:36:29,720 --> 00:36:36,620
if you<font color="#E5E5E5"> compare</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> to HTTP</font><font color="#CCCCCC"> 1 and and</font>

840
00:36:34,100 --> 00:36:38,509
that got<font color="#CCCCCC"> me</font><font color="#E5E5E5"> thinking why is that why is</font>

841
00:36:36,620 --> 00:36:40,790
that the case why why<font color="#CCCCCC"> should that be the</font>

842
00:36:38,510 --> 00:36:42,530
case I<font color="#E5E5E5"> mean it's a faster protocol to</font>

843
00:36:40,790 --> 00:36:46,370
new protocol<font color="#CCCCCC"> which has been around</font><font color="#E5E5E5"> for</font>

844
00:36:42,530 --> 00:36:49,010
almost<font color="#E5E5E5"> two years now why don't</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> see</font>

845
00:36:46,370 --> 00:36:54,440
attacks for the h2 protocol<font color="#E5E5E5"> well there</font>

846
00:36:49,010 --> 00:36:56,750
are several<font color="#CCCCCC"> reasons first</font><font color="#E5E5E5"> of all most</font>

847
00:36:54,440 --> 00:36:59,150
security tools the tools of the trade

848
00:36:56,750 --> 00:37:02,240
<font color="#CCCCCC">that most of you know still does not</font>

849
00:36:59,150 --> 00:37:04,780
support<font color="#E5E5E5"> h2 you have some</font><font color="#CCCCCC"> decent names up</font>

850
00:37:02,240 --> 00:37:10,310
<font color="#CCCCCC">there I don't know</font><font color="#E5E5E5"> if you can see it</font>

851
00:37:04,780 --> 00:37:15,080
burp<font color="#CCCCCC"> Fidler tone doesn't</font><font color="#E5E5E5"> support h2</font><font color="#CCCCCC"> that</font>

852
00:37:10,310 --> 00:37:18,529
or wasp<font color="#E5E5E5"> zap scanners like a kinetic</font>

853
00:37:15,080 --> 00:37:21,500
scanners<font color="#CCCCCC"> net sparker apps</font><font color="#E5E5E5"> can don't</font>

854
00:37:18,530 --> 00:37:23,360
support<font color="#CCCCCC"> H to attack tools you have</font><font color="#E5E5E5"> up</font>

855
00:37:21,500 --> 00:37:24,980
there<font color="#E5E5E5"> which are usually used for a</font>

856
00:37:23,360 --> 00:37:27,260
penetration<font color="#CCCCCC"> testing and</font><font color="#E5E5E5"> for other</font>

857
00:37:24,980 --> 00:37:28,540
purposes<font color="#E5E5E5"> still do not support</font><font color="#CCCCCC"> h2</font><font color="#E5E5E5"> your</font>

858
00:37:27,260 --> 00:37:32,050
SQL map

859
00:37:28,540 --> 00:37:36,340
<font color="#E5E5E5">Hydra century NBA for credential abuse</font>

860
00:37:32,050 --> 00:37:39,700
<font color="#CCCCCC">all of these does not support h2</font><font color="#E5E5E5"> why is</font>

861
00:37:36,340 --> 00:37:44,109
that so first of<font color="#E5E5E5"> all there's not enough</font>

862
00:37:39,700 --> 00:37:45,939
incentive<font color="#E5E5E5"> for attackers to do that most</font>

863
00:37:44,109 --> 00:37:48,400
of the<font color="#E5E5E5"> servers if not all of</font><font color="#CCCCCC"> the servers</font>

864
00:37:45,940 --> 00:37:51,040
that<font color="#CCCCCC"> I've encountered don't support</font>

865
00:37:48,400 --> 00:37:52,869
solely h2<font color="#CCCCCC"> they have a fallback</font><font color="#E5E5E5"> to h1 to</font>

866
00:37:51,040 --> 00:37:55,810
be compatible<font color="#CCCCCC"> with most</font><font color="#E5E5E5"> browsers in the</font>

867
00:37:52,869 --> 00:37:58,480
<font color="#CCCCCC">internet</font><font color="#E5E5E5"> and if you take in the fact</font>

868
00:37:55,810 --> 00:37:59,920
<font color="#E5E5E5">that most HTTP libraries are not so</font>

869
00:37:58,480 --> 00:38:02,410
Commons I mean all of<font color="#E5E5E5"> the large</font>

870
00:37:59,920 --> 00:38:04,900
<font color="#E5E5E5">programming languages do have them but</font>

871
00:38:02,410 --> 00:38:07,569
<font color="#E5E5E5">they are</font><font color="#CCCCCC"> not so mature</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> so easy to</font>

872
00:38:04,900 --> 00:38:10,630
<font color="#E5E5E5">use as the ones you</font><font color="#CCCCCC"> have in</font><font color="#E5E5E5"> the HTTP</font><font color="#CCCCCC"> one</font>

873
00:38:07,570 --> 00:38:12,670
wall<font color="#E5E5E5"> so essentially taking</font><font color="#CCCCCC"> the cost of</font>

874
00:38:10,630 --> 00:38:14,890
<font color="#CCCCCC">taking your existing</font><font color="#E5E5E5"> code and porting it</font>

875
00:38:12,670 --> 00:38:17,920
<font color="#E5E5E5">to to work with</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> new</font><font color="#CCCCCC"> binary protocol</font>

876
00:38:14,890 --> 00:38:19,839
<font color="#E5E5E5">just</font><font color="#CCCCCC"> exceeds the game if at the end</font><font color="#E5E5E5"> of</font>

877
00:38:17,920 --> 00:38:21,070
the day all you<font color="#E5E5E5"> want to do is take your</font>

878
00:38:19,840 --> 00:38:23,740
payload and make sure that the

879
00:38:21,070 --> 00:38:25,240
<font color="#E5E5E5">application gets it you can use HTTP 1</font>

880
00:38:23,740 --> 00:38:27,729
for that<font color="#E5E5E5"> the messaging layer is not</font>

881
00:38:25,240 --> 00:38:30,100
really important<font color="#E5E5E5"> and though you can gain</font>

882
00:38:27,730 --> 00:38:33,550
some performance<font color="#E5E5E5"> the cost of porting the</font>

883
00:38:30,100 --> 00:38:35,830
code would<font color="#E5E5E5"> be quite big</font><font color="#CCCCCC"> I would like</font><font color="#E5E5E5"> to</font>

884
00:38:33,550 --> 00:38:37,570
mention that<font color="#CCCCCC"> in</font><font color="#E5E5E5"> 2016 there were some</font>

885
00:38:35,830 --> 00:38:39,880
server implementation flaws that<font color="#E5E5E5"> were</font>

886
00:38:37,570 --> 00:38:42,490
found by researchers I think<font color="#E5E5E5"> for my</font>

887
00:38:39,880 --> 00:38:44,619
Imperva those are not flaws in the

888
00:38:42,490 --> 00:38:47,109
protocol<font color="#E5E5E5"> no flaws has been found for the</font>

889
00:38:44,619 --> 00:38:49,320
h2 protocol<font color="#CCCCCC"> those are flaws that were</font>

890
00:38:47,109 --> 00:38:51,580
found in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> way that</font><font color="#E5E5E5"> certain servers</font>

891
00:38:49,320 --> 00:38:53,619
<font color="#E5E5E5">implement the protocol and more</font>

892
00:38:51,580 --> 00:38:57,569
specifically<font color="#E5E5E5"> the way they handle stream</font>

893
00:38:53,619 --> 00:38:57,570
management and the header compressions

894
00:38:59,520 --> 00:39:05,380
so what are my<font color="#E5E5E5"> key takeaways from you</font>

895
00:39:01,869 --> 00:39:07,990
guys<font color="#CCCCCC"> I hope that by now you have a</font>

896
00:39:05,380 --> 00:39:12,460
fairly good understanding of how HTTP 2

897
00:39:07,990 --> 00:39:14,560
works and more specifically of its key

898
00:39:12,460 --> 00:39:16,210
elements that<font color="#E5E5E5"> we've covered and the key</font>

899
00:39:14,560 --> 00:39:19,060
differences between prior versions of

900
00:39:16,210 --> 00:39:20,500
the protocol<font color="#CCCCCC"> I hope that by now</font><font color="#E5E5E5"> you</font>

901
00:39:19,060 --> 00:39:22,450
should have<font color="#E5E5E5"> a good understanding of what</font>

902
00:39:20,500 --> 00:39:24,220
passive client fingerprinting is and

903
00:39:22,450 --> 00:39:27,520
more specifically of<font color="#CCCCCC"> the fingerprint we</font>

904
00:39:24,220 --> 00:39:30,879
proposed<font color="#E5E5E5"> for h2 and last but not least</font>

905
00:39:27,520 --> 00:39:34,230
you<font color="#CCCCCC"> are now</font><font color="#E5E5E5"> well aware of the lack of</font>

906
00:39:30,880 --> 00:39:39,960
<font color="#E5E5E5">threat landscape current landscape in</font>

907
00:39:34,230 --> 00:39:39,960
HTTP<font color="#CCCCCC"> two questions</font><font color="#E5E5E5"> please</font>

908
00:39:43,840 --> 00:39:50,840
<font color="#E5E5E5">yep</font>

909
00:39:45,220 --> 00:39:51,410
<font color="#E5E5E5">oh there's a mic okay she'll get you</font>

910
00:39:50,840 --> 00:39:55,550
yeah

911
00:39:51,410 --> 00:39:59,299
can you there we go<font color="#CCCCCC"> so you</font><font color="#E5E5E5"> mentioned</font>

912
00:39:55,550 --> 00:40:04,280
that<font color="#E5E5E5"> clients can opt out</font><font color="#CCCCCC"> if the sort</font><font color="#E5E5E5"> of</font>

913
00:39:59,300 --> 00:40:06,290
proactive<font color="#E5E5E5"> push</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> server</font><font color="#CCCCCC"> do you have</font>

914
00:40:04,280 --> 00:40:10,120
any idea of what percentage<font color="#CCCCCC"> of them</font>

915
00:40:06,290 --> 00:40:16,670
<font color="#E5E5E5">bother to do</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> I don't</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> that</font>

916
00:40:10,120 --> 00:40:18,740
<font color="#E5E5E5">statistics ready-made</font><font color="#CCCCCC"> I don't throw</font><font color="#E5E5E5"> you</font>

917
00:40:16,670 --> 00:40:19,370
a wrong number<font color="#CCCCCC"> I don't</font><font color="#E5E5E5"> wanna throw you</font>

918
00:40:18,740 --> 00:40:20,629
know<font color="#E5E5E5"> okay</font>

919
00:40:19,370 --> 00:40:22,339
there are quite<font color="#CCCCCC"> a few that does take</font>

920
00:40:20,630 --> 00:40:26,510
care that does take advantage of that

921
00:40:22,340 --> 00:40:28,400
and allow<font color="#E5E5E5"> don't if you've seen if you</font>

922
00:40:26,510 --> 00:40:31,370
remember the slide I think<font color="#E5E5E5"> about Safari</font>

923
00:40:28,400 --> 00:40:33,770
<font color="#CCCCCC">Safari</font><font color="#E5E5E5"> is opting out</font><font color="#CCCCCC"> of it</font><font color="#E5E5E5"> at every</font>

924
00:40:31,370 --> 00:40:37,009
initial<font color="#E5E5E5"> communication and that's a large</font>

925
00:40:33,770 --> 00:40:39,320
portion of you know usage that won't a

926
00:40:37,010 --> 00:40:42,400
lot<font color="#E5E5E5"> of users from these browsers won't</font>

927
00:40:39,320 --> 00:40:44,950
be able<font color="#E5E5E5"> to enjoy</font><font color="#CCCCCC"> that currently</font><font color="#E5E5E5"> okay and</font>

928
00:40:42,400 --> 00:40:47,360
presumably there's a performance<font color="#E5E5E5"> impact</font>

929
00:40:44,950 --> 00:40:49,790
<font color="#CCCCCC">associated with with opting else is</font>

930
00:40:47,360 --> 00:40:51,830
there because<font color="#CCCCCC"> you</font><font color="#E5E5E5"> said the h2 is about</font>

931
00:40:49,790 --> 00:40:54,410
four<font color="#E5E5E5"> times faster normally and I'm</font>

932
00:40:51,830 --> 00:40:56,180
guessing the<font color="#E5E5E5"> server's</font><font color="#CCCCCC"> can't sort of push</font>

933
00:40:54,410 --> 00:40:58,160
stuff they expect you to need that's

934
00:40:56,180 --> 00:41:01,250
<font color="#E5E5E5">going to drop off pretty significantly</font>

935
00:40:58,160 --> 00:41:03,080
yeah the whole point of doing<font color="#CCCCCC"> a server</font>

936
00:41:01,250 --> 00:41:05,480
<font color="#E5E5E5">pushes to improve your performance</font><font color="#CCCCCC"> so</font>

937
00:41:03,080 --> 00:41:08,770
human performance drop in terms of the

938
00:41:05,480 --> 00:41:14,050
server performance<font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> oh yes if I were</font>

939
00:41:08,770 --> 00:41:16,190
browsing<font color="#E5E5E5"> and I opted out of server push</font>

940
00:41:14,050 --> 00:41:17,480
is<font color="#CCCCCC"> there still</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to be a performance</font>

941
00:41:16,190 --> 00:41:19,400
gain at<font color="#CCCCCC"> the end of the day</font><font color="#E5E5E5"> from using</font>

942
00:41:17,480 --> 00:41:22,310
HTTP tools or does it<font color="#CCCCCC"> become sort of</font>

943
00:41:19,400 --> 00:41:24,080
<font color="#E5E5E5">pointless at that point absolutely</font><font color="#CCCCCC"> just</font>

944
00:41:22,310 --> 00:41:26,180
a mere fact that<font color="#E5E5E5"> you're</font><font color="#CCCCCC"> using now</font><font color="#E5E5E5"> single</font>

945
00:41:24,080 --> 00:41:28,520
TCP connection and there are like

946
00:41:26,180 --> 00:41:30,290
<font color="#E5E5E5">headers is being compressed and send you</font>

947
00:41:28,520 --> 00:41:31,610
know you know you don't<font color="#E5E5E5"> have a</font>

948
00:41:30,290 --> 00:41:33,380
<font color="#E5E5E5">connection which is waiting for a</font>

949
00:41:31,610 --> 00:41:35,240
response to send another<font color="#CCCCCC"> request</font>

950
00:41:33,380 --> 00:41:37,430
everything is multiplexed<font color="#E5E5E5"> and compressed</font>

951
00:41:35,240 --> 00:41:39,229
even without the server push you will

952
00:41:37,430 --> 00:41:44,799
have a significant performance

953
00:41:39,230 --> 00:41:44,800
improvements<font color="#CCCCCC"> okay thanks</font>

954
00:41:53,530 --> 00:41:58,849
thanks for the talk

955
00:41:55,210 --> 00:42:01,190
thank you<font color="#CCCCCC"> so</font><font color="#E5E5E5"> they're working yeah I have</font>

956
00:41:58,849 --> 00:42:04,390
a question regarding<font color="#E5E5E5"> basic understanding</font>

957
00:42:01,190 --> 00:42:06,950
of HP<font color="#CCCCCC"> Zhu and</font><font color="#E5E5E5"> server push yes which is</font>

958
00:42:04,390 --> 00:42:09,500
<font color="#E5E5E5">if the server wants to take</font><font color="#CCCCCC"> advantage of</font>

959
00:42:06,950 --> 00:42:11,720
the server push and pushing for example

960
00:42:09,500 --> 00:42:14,030
<font color="#E5E5E5">CSS and JavaScript contents to</font><font color="#CCCCCC"> the</font>

961
00:42:11,720 --> 00:42:16,450
client doesn't<font color="#CCCCCC"> the server have to parse</font>

962
00:42:14,030 --> 00:42:19,760
the HTML document in order<font color="#CCCCCC"> to do that</font>

963
00:42:16,450 --> 00:42:24,770
well is this yes absolutely

964
00:42:19,760 --> 00:42:28,880
yes and this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> up to the server to know</font>

965
00:42:24,770 --> 00:42:31,280
which resources<font color="#E5E5E5"> to push and it depends</font>

966
00:42:28,880 --> 00:42:34,369
on<font color="#E5E5E5"> the server implementation but the</font>

967
00:42:31,280 --> 00:42:34,760
answer is<font color="#E5E5E5"> yes so parsing is needed for</font>

968
00:42:34,369 --> 00:42:37,730
<font color="#E5E5E5">that</font>

969
00:42:34,760 --> 00:42:39,619
yeah<font color="#CCCCCC"> it would</font><font color="#E5E5E5"> have to be done beforehand</font>

970
00:42:37,730 --> 00:42:42,770
<font color="#E5E5E5">so the server would know what to push</font>

971
00:42:39,619 --> 00:42:45,710
and not just push<font color="#E5E5E5"> everything okay it's a</font>

972
00:42:42,770 --> 00:42:47,690
mechanism<font color="#E5E5E5"> which is</font><font color="#CCCCCC"> enabled so the RFC</font>

973
00:42:45,710 --> 00:42:50,030
does not exactly<font color="#E5E5E5"> you know tell you how</font>

974
00:42:47,690 --> 00:42:51,410
to<font color="#E5E5E5"> implement</font><font color="#CCCCCC"> that part it just gives you</font>

975
00:42:50,030 --> 00:42:53,720
the actual<font color="#E5E5E5"> functionality within</font><font color="#CCCCCC"> a</font>

976
00:42:51,410 --> 00:43:04,038
<font color="#E5E5E5">protocol and it's up</font><font color="#CCCCCC"> to you the server</font>

977
00:42:53,720 --> 00:43:07,308
implemented to decide how you do that<font color="#CCCCCC"> do</font>

978
00:43:04,039 --> 00:43:10,400
you<font color="#E5E5E5"> think that</font><font color="#CCCCCC"> h2 features can be used</font>

979
00:43:07,309 --> 00:43:14,720
to fingerprint<font color="#CCCCCC"> also servers</font><font color="#E5E5E5"> what server</font>

980
00:43:10,400 --> 00:43:15,980
<font color="#E5E5E5">or this is an interesting question</font><font color="#CCCCCC"> we</font>

981
00:43:14,720 --> 00:43:17,839
are<font color="#CCCCCC"> not in the</font><font color="#E5E5E5"> business of</font>

982
00:43:15,980 --> 00:43:22,520
<font color="#E5E5E5">fingerprinting servers but absolutely</font>

983
00:43:17,839 --> 00:43:25,400
absolutely<font color="#E5E5E5"> because for</font><font color="#CCCCCC"> example if you</font>

984
00:43:22,520 --> 00:43:28,460
know that<font color="#E5E5E5"> some servers don't never take</font>

985
00:43:25,400 --> 00:43:30,109
an adventure<font color="#E5E5E5"> advantage of the server</font>

986
00:43:28,460 --> 00:43:31,579
push you<font color="#E5E5E5"> can look that you can look at</font>

987
00:43:30,109 --> 00:43:33,680
the way<font color="#E5E5E5"> that the server</font><font color="#CCCCCC"> actually the</font>

988
00:43:31,579 --> 00:43:34,819
settings that<font color="#E5E5E5"> is sent because both sides</font>

989
00:43:33,680 --> 00:43:36,828
<font color="#E5E5E5">of the connections should exchange</font>

990
00:43:34,819 --> 00:43:39,770
<font color="#CCCCCC">setting</font><font color="#E5E5E5"> streams so we can fingerprint</font>

991
00:43:36,829 --> 00:43:41,150
the server back as well you can look at

992
00:43:39,770 --> 00:43:44,049
the<font color="#E5E5E5"> default values you</font><font color="#CCCCCC"> can you get the</font>

993
00:43:41,150 --> 00:43:47,359
way that the server is managing streams

994
00:43:44,049 --> 00:43:50,089
you have some<font color="#E5E5E5"> statistics maybe some</font>

995
00:43:47,359 --> 00:43:52,848
number about<font color="#E5E5E5"> how many servers does</font>

996
00:43:50,089 --> 00:43:55,038
implement<font color="#E5E5E5"> 82 I told you from what we see</font>

997
00:43:52,849 --> 00:43:58,460
we've seen<font color="#E5E5E5"> I don't know in</font><font color="#CCCCCC"> terms of</font>

998
00:43:55,039 --> 00:44:00,670
servers but we've seen more than

999
00:43:58,460 --> 00:44:03,680
I don't know<font color="#CCCCCC"> it's the the number was</font>

1000
00:44:00,670 --> 00:44:06,020
<font color="#CCCCCC">15,000 700 different hosts which support</font>

1001
00:44:03,680 --> 00:44:07,669
h2<font color="#CCCCCC"> I don't know how to</font><font color="#E5E5E5"> translate that</font>

1002
00:44:06,020 --> 00:44:09,020
into actual how<font color="#CCCCCC"> much server versions</font>

1003
00:44:07,670 --> 00:44:11,720
<font color="#E5E5E5">implementation eyes but there's a lot of</font>

1004
00:44:09,020 --> 00:44:14,890
<font color="#E5E5E5">adoption it's not a negligent number</font>

1005
00:44:11,720 --> 00:44:14,890
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> thank you very</font><font color="#CCCCCC"> much</font>

1006
00:44:15,609 --> 00:44:24,710
what someone back<font color="#CCCCCC"> there oh</font><font color="#E5E5E5"> you mentioned</font>

1007
00:44:22,880 --> 00:44:26,660
<font color="#E5E5E5">earlier</font><font color="#CCCCCC"> on in you</font><font color="#E5E5E5"> talked</font><font color="#CCCCCC"> about trying to</font>

1008
00:44:24,710 --> 00:44:28,520
<font color="#E5E5E5">discover client uptime was that</font>

1009
00:44:26,660 --> 00:44:31,098
something you managed to<font color="#CCCCCC"> get out</font><font color="#E5E5E5"> of the</font>

1010
00:44:28,520 --> 00:44:33,079
fingerprinting<font color="#CCCCCC"> no this is a feature that</font>

1011
00:44:31,099 --> 00:44:35,630
<font color="#E5E5E5">you can get from TCP fingerprinting and</font>

1012
00:44:33,079 --> 00:44:38,900
certain operating<font color="#CCCCCC"> systems you can deduce</font>

1013
00:44:35,630 --> 00:44:50,359
things<font color="#E5E5E5"> about the uptime of of a certain</font>

1014
00:44:38,900 --> 00:44:53,960
client not<font color="#CCCCCC"> in the HTTP jeweler hi hi are</font>

1015
00:44:50,359 --> 00:44:56,390
<font color="#E5E5E5">you fingerprinting the the traffic just</font>

1016
00:44:53,960 --> 00:44:58,520
for the purpose<font color="#E5E5E5"> of this talk or do you</font>

1017
00:44:56,390 --> 00:45:02,779
routinely fingerprint everything that

1018
00:44:58,520 --> 00:45:04,910
goes through Akamai<font color="#CCCCCC"> is Network well this</font>

1019
00:45:02,780 --> 00:45:07,430
could<font color="#E5E5E5"> be like something which is part of</font>

1020
00:45:04,910 --> 00:45:11,240
certain products like if a customer

1021
00:45:07,430 --> 00:45:14,029
would<font color="#CCCCCC"> want some of our</font><font color="#E5E5E5"> cars are given a</font>

1022
00:45:11,240 --> 00:45:15,439
concrete example<font color="#CCCCCC"> if a customer's</font><font color="#E5E5E5"> wants</font>

1023
00:45:14,030 --> 00:45:18,290
to leverage a product which<font color="#E5E5E5"> is dealing</font>

1024
00:45:15,440 --> 00:45:20,329
<font color="#E5E5E5">with</font><font color="#CCCCCC"> the mitigation of poor</font><font color="#E5E5E5"> traffic one</font>

1025
00:45:18,290 --> 00:45:23,619
of the way to identify<font color="#CCCCCC"> BOTS from humans</font>

1026
00:45:20,329 --> 00:45:26,059
without<font color="#E5E5E5"> you know doing a collection of</font>

1027
00:45:23,619 --> 00:45:28,069
biometric attributes or things<font color="#CCCCCC"> like that</font>

1028
00:45:26,059 --> 00:45:30,710
which<font color="#E5E5E5"> we currently don't do is actually</font>

1029
00:45:28,069 --> 00:45:33,470
look at the protocol fingerprinting as

1030
00:45:30,710 --> 00:45:36,020
I've<font color="#E5E5E5"> said this</font><font color="#CCCCCC"> is absolutely</font><font color="#E5E5E5"> passive we</font>

1031
00:45:33,470 --> 00:45:37,819
do not prod<font color="#E5E5E5"> into the client</font><font color="#CCCCCC"> we only</font>

1032
00:45:36,020 --> 00:45:41,059
<font color="#E5E5E5">observe</font><font color="#CCCCCC"> the way that the client behaves</font>

1033
00:45:37,819 --> 00:45:43,730
and it does not correlate to any<font color="#E5E5E5"> end</font>

1034
00:45:41,059 --> 00:45:46,010
<font color="#E5E5E5">users because all it says is how this</font>

1035
00:45:43,730 --> 00:45:47,630
<font color="#E5E5E5">particular piece of software is</font>

1036
00:45:46,010 --> 00:45:53,589
implementing<font color="#E5E5E5"> this particular protocol</font>

1037
00:45:47,630 --> 00:45:57,230
<font color="#E5E5E5">that's it and keep in mind that</font>

1038
00:45:53,589 --> 00:46:00,430
sophisticated attackers could fool you<font color="#CCCCCC"> I</font>

1039
00:45:57,230 --> 00:46:04,460
mean if you<font color="#CCCCCC"> are writing your own client</font>

1040
00:46:00,430 --> 00:46:10,190
for HTTP<font color="#CCCCCC"> 2 you can you know you can</font>

1041
00:46:04,460 --> 00:46:11,680
decide to randomize the values for the

1042
00:46:10,190 --> 00:46:13,510
windows increment you can

1043
00:46:11,680 --> 00:46:15,520
<font color="#CCCCCC">you can do all sorts</font><font color="#E5E5E5"> of stuff</font><font color="#CCCCCC"> but at the</font>

1044
00:46:13,510 --> 00:46:18,040
<font color="#CCCCCC">end of the day when you</font><font color="#E5E5E5"> are dealing</font><font color="#CCCCCC"> with</font>

1045
00:46:15,520 --> 00:46:20,170
a big platform<font color="#CCCCCC"> and the big numbers that</font>

1046
00:46:18,040 --> 00:46:22,808
we see at Akamai<font color="#E5E5E5"> you would stand out</font>

1047
00:46:20,170 --> 00:46:25,780
even<font color="#CCCCCC"> more</font><font color="#E5E5E5"> because all of the Chrome's if</font>

1048
00:46:22,809 --> 00:46:27,760
you try to you<font color="#E5E5E5"> know to pass as a legit</font>

1049
00:46:25,780 --> 00:46:29,319
browsers<font color="#E5E5E5"> for</font><font color="#CCCCCC"> a certain version</font><font color="#E5E5E5"> of</font>

1050
00:46:27,760 --> 00:46:31,990
Firefox for a first pass certain

1051
00:46:29,319 --> 00:46:34,690
operating systems<font color="#E5E5E5"> the big numbers of</font>

1052
00:46:31,990 --> 00:46:37,479
this particular<font color="#CCCCCC"> software you would stand</font>

1053
00:46:34,690 --> 00:46:39,010
out trying to randomize all kinds<font color="#E5E5E5"> of</font>

1054
00:46:37,480 --> 00:46:48,460
other parameters<font color="#E5E5E5"> because you would be</font>

1055
00:46:39,010 --> 00:46:50,109
the only<font color="#E5E5E5"> one doing that yeah I'm sorry I</font>

1056
00:46:48,460 --> 00:46:52,030
didn't answer just<font color="#CCCCCC"> one bit of</font><font color="#E5E5E5"> a question</font>

1057
00:46:50,109 --> 00:46:55,000
<font color="#E5E5E5">there is some</font><font color="#CCCCCC"> performance hit in terms</font>

1058
00:46:52,030 --> 00:46:56,740
<font color="#E5E5E5">of running fingerprinting and some cost</font>

1059
00:46:55,000 --> 00:47:00,089
associated to<font color="#CCCCCC"> it so we don't</font><font color="#E5E5E5"> do it for</font>

1060
00:46:56,740 --> 00:47:03,729
<font color="#E5E5E5">all of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> traffic</font><font color="#CCCCCC"> going over Akamai's</font>

1061
00:47:00,089 --> 00:47:07,029
permutations<font color="#E5E5E5"> hi hi what do you think</font>

1062
00:47:03,730 --> 00:47:10,089
<font color="#CCCCCC">about the</font><font color="#E5E5E5"> quake</font><font color="#CCCCCC"> protocol used recently</font>

1063
00:47:07,030 --> 00:47:13,540
<font color="#CCCCCC">by Google how this</font><font color="#E5E5E5"> all week</font>

1064
00:47:10,089 --> 00:47:16,210
quick probably<font color="#CCCCCC"> okay yeah well</font><font color="#E5E5E5"> quick is</font>

1065
00:47:13,540 --> 00:47:20,799
<font color="#E5E5E5">first of all the protocol based on UDP</font>

1066
00:47:16,210 --> 00:47:23,740
<font color="#E5E5E5">and it's exciting</font><font color="#CCCCCC"> new protocol it's not</font>

1067
00:47:20,799 --> 00:47:27,329
so new but I think it's a great<font color="#E5E5E5"> protocol</font>

1068
00:47:23,740 --> 00:47:30,308
<font color="#E5E5E5">because in the in today's Internet</font>

1069
00:47:27,329 --> 00:47:32,500
<font color="#E5E5E5">reliability is not such an issue</font><font color="#CCCCCC"> and</font>

1070
00:47:30,309 --> 00:47:34,240
it's very fast UDP is very fast<font color="#E5E5E5"> it's</font>

1071
00:47:32,500 --> 00:47:37,079
implemented<font color="#E5E5E5"> is its own set of</font>

1072
00:47:34,240 --> 00:47:40,598
<font color="#E5E5E5">cryptography which is very interesting</font>

1073
00:47:37,079 --> 00:47:44,040
it's an interesting<font color="#E5E5E5"> way</font><font color="#CCCCCC"> I think it's a</font>

1074
00:47:40,599 --> 00:47:44,040
<font color="#E5E5E5">very</font><font color="#CCCCCC"> interesting subject for exploration</font>

1075
00:47:47,579 --> 00:47:52,990
if the question<font color="#E5E5E5"> was in terms of</font>

1076
00:47:50,200 --> 00:47:56,740
fingerprinting yeah you know it's

1077
00:47:52,990 --> 00:47:59,680
<font color="#CCCCCC">absolutely a target for free search it</font>

1078
00:47:56,740 --> 00:48:02,169
was more mean like do you see<font color="#E5E5E5"> quake as</font>

1079
00:47:59,680 --> 00:48:06,160
something that could compete<font color="#CCCCCC"> with</font><font color="#E5E5E5"> h2</font>

1080
00:48:02,170 --> 00:48:08,950
absolutely absolutely<font color="#CCCCCC"> it's hard to</font>

1081
00:48:06,160 --> 00:48:12,180
defeat<font color="#E5E5E5"> the protocol which runs of over</font>

1082
00:48:08,950 --> 00:48:12,180
<font color="#CCCCCC">UDP in terms of performance</font>

1083
00:48:16,430 --> 00:48:21,020
<font color="#CCCCCC">okay thank you very</font><font color="#E5E5E5"> much for taking the</font>

1084
00:48:19,500 --> 00:48:27,550
time<font color="#CCCCCC"> to attend this</font><font color="#E5E5E5"> presentation</font>

1085
00:48:21,020 --> 00:48:27,550
[Applause]

