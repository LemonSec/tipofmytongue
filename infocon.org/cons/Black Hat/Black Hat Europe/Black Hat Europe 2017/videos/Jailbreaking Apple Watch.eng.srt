1
00:00:00,030 --> 00:00:06,420
hi everyone<font color="#E5E5E5"> welcome to jailbreaking</font>

2
00:00:02,909 --> 00:00:09,360
<font color="#E5E5E5">Apple watch my name is</font><font color="#CCCCCC"> Max Vitali</font><font color="#E5E5E5"> and I</font>

3
00:00:06,420 --> 00:00:11,040
guess we beginning<font color="#E5E5E5"> how my security</font>

4
00:00:09,360 --> 00:00:13,139
researcher had company<font color="#E5E5E5"> name</font>

5
00:00:11,040 --> 00:00:16,108
look out<font color="#CCCCCC"> where</font><font color="#E5E5E5"> I focus it on hardware</font>

6
00:00:13,139 --> 00:00:18,750
and<font color="#CCCCCC"> software</font><font color="#E5E5E5"> exploitation for the last</font>

7
00:00:16,109 --> 00:00:23,730
few<font color="#CCCCCC"> years I was after of</font><font color="#E5E5E5"> viral jailbreak</font>

8
00:00:18,750 --> 00:00:25,198
for<font color="#CCCCCC"> iOS TV IAS</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> Alfre watches and the</font>

9
00:00:23,730 --> 00:00:28,920
last year<font color="#CCCCCC"> I was lead researcher on</font><font color="#E5E5E5"> a</font>

10
00:00:25,199 --> 00:00:30,710
Pegasus exploit chain so Apple watch

11
00:00:28,920 --> 00:00:33,360
<font color="#CCCCCC">what is Apple watch</font>

12
00:00:30,710 --> 00:00:37,230
basically it's smart<font color="#E5E5E5"> voice device that</font>

13
00:00:33,360 --> 00:00:41,370
was<font color="#E5E5E5"> released in 2015 it's used Apple s1</font>

14
00:00:37,230 --> 00:00:44,550
s2 or s3<font color="#CCCCCC"> protesser depend on a model but</font>

15
00:00:41,370 --> 00:00:47,489
all the protesters just<font color="#CCCCCC"> 32-bit are m7k</font>

16
00:00:44,550 --> 00:00:53,669
architecture which<font color="#CCCCCC"> is derived from</font><font color="#E5E5E5"> our</font>

17
00:00:47,489 --> 00:00:58,019
<font color="#CCCCCC">m7a instruction set so depending the</font>

18
00:00:53,670 --> 00:01:00,780
model it 512<font color="#CCCCCC"> for 768 megabytes of RAM 1</font>

19
00:00:58,020 --> 00:01:05,129
or dual-core processors<font color="#E5E5E5"> and all the</font>

20
00:01:00,780 --> 00:01:08,220
models<font color="#E5E5E5"> around</font><font color="#CCCCCC"> watches</font><font color="#E5E5E5"> how does</font><font color="#CCCCCC"> it work</font>

21
00:01:05,129 --> 00:01:09,780
<font color="#E5E5E5">so before</font><font color="#CCCCCC"> you can use the Apple watch</font>

22
00:01:08,220 --> 00:01:13,530
the Apple which need to be paired with

23
00:01:09,780 --> 00:01:16,860
iPhone device<font color="#E5E5E5"> and Apple watch prefer the</font>

24
00:01:13,530 --> 00:01:20,220
Bluetooth connection for pairing and for

25
00:01:16,860 --> 00:01:22,289
install an application like extensions

26
00:01:20,220 --> 00:01:25,890
or over-the-air the back<font color="#E5E5E5"> so it's use</font>

27
00:01:22,290 --> 00:01:28,799
<font color="#CCCCCC">bluetooth Apple watch can use Wi-Fi as</font>

28
00:01:25,890 --> 00:01:31,950
well<font color="#E5E5E5"> for receive any calls or receiving</font>

29
00:01:28,799 --> 00:01:34,939
emails or messages but<font color="#CCCCCC"> Bluetooth</font>

30
00:01:31,950 --> 00:01:37,530
<font color="#CCCCCC">reminders main communication channel a</font>

31
00:01:34,939 --> 00:01:41,130
few<font color="#E5E5E5"> times I hear a question like why do</font>

32
00:01:37,530 --> 00:01:43,799
we<font color="#CCCCCC"> even need</font><font color="#E5E5E5"> to jailbreak a watch</font><font color="#CCCCCC"> first</font>

33
00:01:41,130 --> 00:01:45,750
of all it was interesting<font color="#CCCCCC"> for me from a</font>

34
00:01:43,799 --> 00:01:47,850
<font color="#E5E5E5">security researcher point of view to get</font>

35
00:01:45,750 --> 00:01:51,869
a test to a<font color="#E5E5E5"> filesystem</font><font color="#CCCCCC"> to understand how</font>

36
00:01:47,850 --> 00:01:54,089
the war<font color="#E5E5E5"> chest works and maybe like quick</font>

37
00:01:51,869 --> 00:01:57,180
interesting user data like messages or

38
00:01:54,090 --> 00:01:59,759
emails<font color="#CCCCCC"> and</font><font color="#E5E5E5"> after all it will be nice to</font>

39
00:01:57,180 --> 00:02:04,500
<font color="#CCCCCC">run the buck tools on this small teeny</font>

40
00:01:59,759 --> 00:02:07,350
<font color="#CCCCCC">award screen</font><font color="#E5E5E5"> like radar or Frida</font><font color="#CCCCCC"> and it</font>

41
00:02:04,500 --> 00:02:09,090
can be used<font color="#E5E5E5"> to attack iPhone so we can</font>

42
00:02:07,350 --> 00:02:12,340
<font color="#E5E5E5">send them out</font><font color="#CCCCCC"> for my data back to iPhone</font>

43
00:02:09,090 --> 00:02:15,700
and<font color="#E5E5E5"> see what happens</font>

44
00:02:12,340 --> 00:02:17,410
so before<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to like deep into</font>

45
00:02:15,700 --> 00:02:20,260
jailbreak details<font color="#CCCCCC"> a quick</font><font color="#E5E5E5"> overview</font><font color="#CCCCCC"> of</font>

46
00:02:17,410 --> 00:02:23,140
<font color="#E5E5E5">airport security</font><font color="#CCCCCC"> I will not like focus</font>

47
00:02:20,260 --> 00:02:25,510
on each of those<font color="#E5E5E5"> points just want to say</font>

48
00:02:23,140 --> 00:02:26,140
that our security<font color="#E5E5E5"> is mostly called in is</font>

49
00:02:25,510 --> 00:02:28,179
security

50
00:02:26,140 --> 00:02:29,920
they're like secure boot chain the code

51
00:02:28,180 --> 00:02:31,810
sign in the sandbox<font color="#CCCCCC"> even the exploit</font>

52
00:02:29,920 --> 00:02:34,000
mitigations like address space layout

53
00:02:31,810 --> 00:02:37,330
randomization<font color="#CCCCCC"> kernel mode user mode</font>

54
00:02:34,000 --> 00:02:39,819
<font color="#E5E5E5">stack and heap Canaries</font><font color="#CCCCCC"> data execution</font>

55
00:02:37,330 --> 00:02:43,599
prevention<font color="#E5E5E5"> like pretty much</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> the same</font>

56
00:02:39,819 --> 00:02:46,329
as we see in highlights so what is the

57
00:02:43,599 --> 00:02:49,869
possible attack vectors<font color="#CCCCCC"> I get a pretty</font>

58
00:02:46,330 --> 00:02:52,209
good<font color="#CCCCCC"> like one day exploit for WebKit and</font>

59
00:02:49,870 --> 00:02:54,130
that I plan to use on a<font color="#E5E5E5"> Apple watch</font><font color="#CCCCCC"> but</font>

60
00:02:52,209 --> 00:02:58,000
<font color="#CCCCCC">unfortunately the WebKit is not</font>

61
00:02:54,130 --> 00:03:01,630
supported yet on what<font color="#CCCCCC"> shares</font><font color="#E5E5E5"> so I played</font>

62
00:02:58,000 --> 00:03:03,280
a<font color="#E5E5E5"> little bit</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> the export so there is</font>

63
00:03:01,630 --> 00:03:06,849
a small<font color="#E5E5E5"> a diagnostic port on Apple watch</font>

64
00:03:03,280 --> 00:03:09,069
<font color="#CCCCCC">that we can connect to boot</font><font color="#E5E5E5"> ROM and I</font>

65
00:03:06,849 --> 00:03:11,280
boot send some message<font color="#E5E5E5"> receive some data</font>

66
00:03:09,069 --> 00:03:11,280
back

67
00:03:11,580 --> 00:03:16,870
this research is<font color="#CCCCCC"> still ongoing</font><font color="#E5E5E5"> so</font>

68
00:03:13,870 --> 00:03:18,640
<font color="#E5E5E5">basically I switch to make more easier</font>

69
00:03:16,870 --> 00:03:21,070
way to<font color="#E5E5E5"> drill break a watch which called</font>

70
00:03:18,640 --> 00:03:25,750
<font color="#CCCCCC">application</font><font color="#E5E5E5"> extension</font><font color="#CCCCCC"> base it started</font>

71
00:03:21,070 --> 00:03:27,100
from<font color="#CCCCCC"> watch ways to Apple added support</font>

72
00:03:25,750 --> 00:03:28,870
for application extension which means

73
00:03:27,100 --> 00:03:32,108
native code that's running<font color="#E5E5E5"> on a watch</font>

74
00:03:28,870 --> 00:03:34,530
and if we pack<font color="#E5E5E5"> our jailbreak inside the</font>

75
00:03:32,109 --> 00:03:37,359
application extension and run on a watch

76
00:03:34,530 --> 00:03:40,390
<font color="#CCCCCC">we can achieve the initial</font><font color="#E5E5E5"> codification</font>

77
00:03:37,359 --> 00:03:43,510
so this is how the jailbreak may look

78
00:03:40,390 --> 00:03:45,869
like<font color="#E5E5E5"> the initial code execution can be</font>

79
00:03:43,510 --> 00:03:48,130
achieve it by<font color="#CCCCCC"> packin ever seen in</font>

80
00:03:45,870 --> 00:03:50,079
application extension<font color="#E5E5E5"> then we need to</font>

81
00:03:48,130 --> 00:03:51,910
<font color="#CCCCCC">leak a kernel base</font><font color="#E5E5E5"> or like break ISL our</font>

82
00:03:50,079 --> 00:03:54,280
next<font color="#CCCCCC"> dump</font><font color="#E5E5E5"> the whole kernel</font>

83
00:03:51,910 --> 00:03:56,470
<font color="#E5E5E5">only for a kernel there</font><font color="#CCCCCC"> encrypted</font><font color="#E5E5E5"> I will</font>

84
00:03:54,280 --> 00:03:59,980
talk<font color="#E5E5E5"> about this a little bit later next</font>

85
00:03:56,470 --> 00:04:01,720
<font color="#CCCCCC">fine</font><font color="#E5E5E5"> gadget set up a primitives</font><font color="#CCCCCC"> patched</font>

86
00:03:59,980 --> 00:04:05,170
kernel<font color="#CCCCCC"> disable security restrictions</font>

87
00:04:01,720 --> 00:04:08,620
run stage client on a watch looks looks

88
00:04:05,170 --> 00:04:10,600
doable right<font color="#E5E5E5"> so what</font><font color="#CCCCCC"> is the</font><font color="#E5E5E5"> box of</font>

89
00:04:08,620 --> 00:04:14,530
<font color="#E5E5E5">interest that can be used to jailbreak a</font>

90
00:04:10,600 --> 00:04:17,500
watch I found that CV<font color="#CCCCCC"> 46:56</font>

91
00:04:14,530 --> 00:04:20,019
was never<font color="#CCCCCC"> fix</font><font color="#E5E5E5"> it on</font><font color="#CCCCCC"> watch us to it was</font>

92
00:04:17,500 --> 00:04:23,020
<font color="#E5E5E5">fixed only</font><font color="#CCCCCC"> on what you s3 release</font><font color="#E5E5E5"> and in</font>

93
00:04:20,019 --> 00:04:26,300
combination<font color="#CCCCCC"> with CV 4680</font><font color="#E5E5E5"> it can be used</font>

94
00:04:23,020 --> 00:04:28,818
<font color="#E5E5E5">to jailbreak any versions of</font><font color="#CCCCCC"> fortress 2</font>

95
00:04:26,300 --> 00:04:31,970
for what you<font color="#CCCCCC"> three that</font><font color="#E5E5E5"> little bit</font>

96
00:04:28,819 --> 00:04:34,580
different story<font color="#CCCCCC"> Siri 2370 is is a pretty</font>

97
00:04:31,970 --> 00:04:37,099
nice<font color="#CCCCCC"> but and one bug is enough to</font>

98
00:04:34,580 --> 00:04:39,530
jailbreak<font color="#CCCCCC"> the whole system</font><font color="#E5E5E5"> and for</font><font color="#CCCCCC"> watch</font>

99
00:04:37,099 --> 00:04:43,340
was for<font color="#E5E5E5"> its it's still in building</font>

100
00:04:39,530 --> 00:04:48,948
research but<font color="#CCCCCC"> CV 1386 one looks</font><font color="#E5E5E5"> pretty</font>

101
00:04:43,340 --> 00:04:50,299
promising<font color="#E5E5E5"> back to watch is</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> so if</font><font color="#CCCCCC"> you</font>

102
00:04:48,949 --> 00:04:52,970
remember<font color="#CCCCCC"> the least</font><font color="#E5E5E5"> we need to</font><font color="#CCCCCC"> lick a</font>

103
00:04:50,300 --> 00:04:57,139
<font color="#E5E5E5">kernel base and there is a CV which is</font>

104
00:04:52,970 --> 00:05:00,740
<font color="#CCCCCC">680</font><font color="#E5E5E5"> it is the bug that I discovered back</font>

105
00:04:57,139 --> 00:05:02,300
<font color="#E5E5E5">in January and there is a lot of</font>

106
00:05:00,740 --> 00:05:05,840
<font color="#CCCCCC">information how</font><font color="#E5E5E5"> to exploit it I just</font>

107
00:05:02,300 --> 00:05:07,639
<font color="#CCCCCC">make a quick overview so the object</font>

108
00:05:05,840 --> 00:05:10,130
constructor<font color="#E5E5E5"> missing bound checking and</font>

109
00:05:07,639 --> 00:05:11,930
the object<font color="#E5E5E5"> is always number which</font>

110
00:05:10,130 --> 00:05:14,330
basically represent a number<font color="#E5E5E5"> in any</font>

111
00:05:11,930 --> 00:05:16,759
tournament and attacker can create<font color="#E5E5E5"> oh</font>

112
00:05:14,330 --> 00:05:19,250
it's number object<font color="#E5E5E5"> with higher number of</font>

113
00:05:16,759 --> 00:05:22,159
<font color="#E5E5E5">bits or in other words with control at</font>

114
00:05:19,250 --> 00:05:25,009
length<font color="#E5E5E5"> and the problem is that later</font><font color="#CCCCCC"> on</font>

115
00:05:22,159 --> 00:05:27,379
<font color="#E5E5E5">when we try to read object back to user</font>

116
00:05:25,009 --> 00:05:30,710
mode the object length will be used to

117
00:05:27,379 --> 00:05:32,300
<font color="#CCCCCC">copy that many bytes from kernel stack</font>

118
00:05:30,710 --> 00:05:34,310
<font color="#E5E5E5">it needed so in other words would</font>

119
00:05:32,300 --> 00:05:36,229
control<font color="#E5E5E5"> how</font><font color="#CCCCCC"> many bytes</font><font color="#E5E5E5"> will be copied</font>

120
00:05:34,310 --> 00:05:37,909
from<font color="#E5E5E5"> a kernel stack we can lick the</font>

121
00:05:36,229 --> 00:05:39,830
kernel pointer and one kernel pointer is

122
00:05:37,909 --> 00:05:42,590
enough to<font color="#CCCCCC"> determinate where the</font><font color="#E5E5E5"> kernel</font>

123
00:05:39,830 --> 00:05:44,508
is located and this bug is nice because

124
00:05:42,590 --> 00:05:47,960
it<font color="#E5E5E5"> can be triggered from the application</font>

125
00:05:44,509 --> 00:05:48,949
sandbox<font color="#CCCCCC"> and in combination with Stevie</font>

126
00:05:47,960 --> 00:05:51,138
46:56

127
00:05:48,949 --> 00:05:53,990
which is<font color="#E5E5E5"> used to</font><font color="#CCCCCC"> free in is</font><font color="#E5E5E5"> centralized</font>

128
00:05:51,139 --> 00:05:57,710
binary today<font color="#E5E5E5"> Adam was like point</font><font color="#CCCCCC"> in to</font>

129
00:05:53,990 --> 00:05:59,210
<font color="#E5E5E5">the debug again there is a</font><font color="#CCCCCC"> lot of</font>

130
00:05:57,710 --> 00:06:02,870
information<font color="#E5E5E5"> how to exploit it</font><font color="#CCCCCC"> I just</font>

131
00:05:59,210 --> 00:06:05,630
<font color="#CCCCCC">made a quick overview so</font><font color="#E5E5E5"> there is code</font>

132
00:06:02,870 --> 00:06:08,900
that doing the<font color="#CCCCCC"> serialization of the</font>

133
00:06:05,630 --> 00:06:10,520
binary encoded data<font color="#E5E5E5"> and the object that</font>

134
00:06:08,900 --> 00:06:14,380
represents a string<font color="#E5E5E5"> called</font><font color="#CCCCCC"> our string</font>

135
00:06:10,520 --> 00:06:16,758
was delegated<font color="#E5E5E5"> during the initialization</font>

136
00:06:14,380 --> 00:06:18,949
<font color="#E5E5E5">but the pointer to the object still</font>

137
00:06:16,759 --> 00:06:21,400
exists in<font color="#CCCCCC"> the memory so later on</font><font color="#E5E5E5"> the</font>

138
00:06:18,949 --> 00:06:24,169
retain method will be called on

139
00:06:21,400 --> 00:06:27,770
delegated object and<font color="#E5E5E5"> cause to use after</font>

140
00:06:24,169 --> 00:06:31,310
<font color="#CCCCCC">3 which means</font><font color="#E5E5E5"> if we reallocate or a</font>

141
00:06:27,770 --> 00:06:33,740
string object<font color="#E5E5E5"> fast enough and point into</font>

142
00:06:31,310 --> 00:06:36,380
like a fake<font color="#CCCCCC"> we table we can get kernel</font>

143
00:06:33,740 --> 00:06:39,220
level code execution this<font color="#CCCCCC"> bug can be</font>

144
00:06:36,380 --> 00:06:42,830
triggered from<font color="#CCCCCC"> the sandbox</font><font color="#E5E5E5"> as well</font>

145
00:06:39,220 --> 00:06:44,540
so we know<font color="#E5E5E5"> larger currents located in</font>

146
00:06:42,830 --> 00:06:46,700
the memory will break the<font color="#CCCCCC"> cattle are</font><font color="#E5E5E5"> we</font>

147
00:06:44,540 --> 00:06:52,960
<font color="#E5E5E5">service</font><font color="#CCCCCC"> info leak</font><font color="#E5E5E5"> we get the</font><font color="#CCCCCC"> kernel</font>

148
00:06:46,700 --> 00:06:55,340
<font color="#E5E5E5">exact now it's time</font><font color="#CCCCCC"> to execute like</font>

149
00:06:52,960 --> 00:06:58,549
interesting<font color="#CCCCCC"> edges</font><font color="#E5E5E5"> in the kernel but</font>

150
00:06:55,340 --> 00:07:00,169
here's the problem<font color="#CCCCCC"> for a watches</font><font color="#E5E5E5"> - in a</font>

151
00:06:58,550 --> 00:07:02,630
time I was<font color="#E5E5E5"> working</font><font color="#CCCCCC"> on jailbreak there</font>

152
00:07:00,170 --> 00:07:05,210
was no<font color="#E5E5E5"> watch s kernel dumps available in</font>

153
00:07:02,630 --> 00:07:07,490
public as well there<font color="#CCCCCC"> is</font><font color="#E5E5E5"> no decryption</font>

154
00:07:05,210 --> 00:07:11,000
keys or Apple which<font color="#CCCCCC"> kernels so</font><font color="#E5E5E5"> back in</font>

155
00:07:07,490 --> 00:07:14,270
in a time<font color="#E5E5E5"> Apple was encrypting</font><font color="#CCCCCC"> kernels</font>

156
00:07:11,000 --> 00:07:16,940
for<font color="#E5E5E5"> ideas watches and TV OS before they</font>

157
00:07:14,270 --> 00:07:19,900
release<font color="#E5E5E5"> watch a 3 so I have</font><font color="#CCCCCC"> an</font><font color="#E5E5E5"> idea if</font>

158
00:07:16,940 --> 00:07:22,130
we<font color="#E5E5E5"> control the oystering we can point</font>

159
00:07:19,900 --> 00:07:24,650
the<font color="#E5E5E5"> oystering to beginning of the kernel</font>

160
00:07:22,130 --> 00:07:29,120
Android kernel<font color="#E5E5E5"> is like a string to user</font>

161
00:07:24,650 --> 00:07:33,020
mode the problem is that we need upset

162
00:07:29,120 --> 00:07:35,260
for a we table which mean<font color="#E5E5E5"> and this we</font>

163
00:07:33,020 --> 00:07:38,240
table<font color="#E5E5E5"> of set is store it in a kernel</font>

164
00:07:35,260 --> 00:07:40,190
<font color="#CCCCCC">which means to dump a kernel we need to</font>

165
00:07:38,240 --> 00:07:43,100
know some information<font color="#E5E5E5"> inside</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> car like</font>

166
00:07:40,190 --> 00:07:45,830
<font color="#CCCCCC">a</font><font color="#E5E5E5"> chicken-and-egg</font><font color="#CCCCCC"> problem</font><font color="#E5E5E5"> and I start to</font>

167
00:07:43,100 --> 00:07:48,590
looking for<font color="#E5E5E5"> any way</font><font color="#CCCCCC"> to dump this or</font>

168
00:07:45,830 --> 00:07:51,890
<font color="#CCCCCC">stinky</font><font color="#E5E5E5"> table and found there is a</font>

169
00:07:48,590 --> 00:07:54,739
reference of<font color="#CCCCCC"> a stream pool table in iOS</font>

170
00:07:51,890 --> 00:07:56,599
and<font color="#E5E5E5"> sterilized binary and</font><font color="#CCCCCC"> IO centralized</font>

171
00:07:54,740 --> 00:07:59,750
binary is referenced in IO centralized

172
00:07:56,600 --> 00:08:01,970
<font color="#E5E5E5">XML but the</font><font color="#CCCCCC"> fund</font><font color="#E5E5E5"> seemed did I all</font>

173
00:07:59,750 --> 00:08:04,340
centralized binary is exactly the same

174
00:08:01,970 --> 00:08:07,190
function<font color="#CCCCCC"> that we get our bug that we can</font>

175
00:08:04,340 --> 00:08:09,380
call the<font color="#E5E5E5"> user 3 and we can control the</font>

176
00:08:07,190 --> 00:08:12,790
all the input arguments in a centralized

177
00:08:09,380 --> 00:08:15,590
binary so I<font color="#E5E5E5"> have an idea</font>

178
00:08:12,790 --> 00:08:17,690
why not try<font color="#E5E5E5"> to like leak some</font>

179
00:08:15,590 --> 00:08:19,940
information of a kernel by a penny<font color="#E5E5E5"> clock</font>

180
00:08:17,690 --> 00:08:22,300
<font color="#E5E5E5">the penny clock is just</font><font color="#CCCCCC"> a log that</font>

181
00:08:19,940 --> 00:08:26,120
created by system<font color="#E5E5E5"> when</font><font color="#CCCCCC"> when it crashed</font>

182
00:08:22,300 --> 00:08:28,090
so we can control<font color="#E5E5E5"> the fake object we can</font>

183
00:08:26,120 --> 00:08:32,810
control the pointer to a fake with table

184
00:08:28,090 --> 00:08:35,299
so what<font color="#E5E5E5"> is we use the address we want to</font>

185
00:08:32,809 --> 00:08:37,549
leak as the<font color="#E5E5E5"> address of the we table so</font>

186
00:08:35,299 --> 00:08:39,109
this<font color="#E5E5E5"> address will be and call the user</font>

187
00:08:37,549 --> 00:08:41,390
to free so this<font color="#E5E5E5"> address will be the</font>

188
00:08:39,110 --> 00:08:42,770
<font color="#CCCCCC">reference</font><font color="#E5E5E5"> it will retain call the system</font>

189
00:08:41,390 --> 00:08:44,569
will crash because<font color="#E5E5E5"> this address is not</font>

190
00:08:42,770 --> 00:08:48,439
executed<font color="#E5E5E5"> but it will save the penny</font>

191
00:08:44,570 --> 00:08:49,459
clock and the penny clock will save all

192
00:08:48,440 --> 00:08:51,820
the register<font color="#CCCCCC"> stage</font>

193
00:08:49,459 --> 00:08:54,849
and one<font color="#CCCCCC"> of the register will</font>

194
00:08:51,820 --> 00:08:57,790
see the content of the address<font color="#CCCCCC"> so in</font>

195
00:08:54,850 --> 00:08:59,800
other<font color="#E5E5E5"> word we can dump the four bytes</font><font color="#CCCCCC"> of</font>

196
00:08:57,790 --> 00:09:02,439
a<font color="#E5E5E5"> kernel so I say hmm that's that's</font>

197
00:08:59,800 --> 00:09:05,229
<font color="#CCCCCC">interesting</font><font color="#E5E5E5"> that may work</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> maybe not</font>

198
00:09:02,440 --> 00:09:08,350
<font color="#E5E5E5">the</font><font color="#CCCCCC"> best</font><font color="#E5E5E5"> way</font><font color="#CCCCCC"> to dump a kernel but I</font>

199
00:09:05,230 --> 00:09:10,900
start to to dump a kernel by<font color="#CCCCCC"> four byte</font>

200
00:09:08,350 --> 00:09:15,670
<font color="#E5E5E5">until I find the</font><font color="#CCCCCC"> reference to</font><font color="#E5E5E5"> our</font>

201
00:09:10,900 --> 00:09:17,650
<font color="#CCCCCC">sterilized</font><font color="#E5E5E5"> our string</font><font color="#CCCCCC"> every table so we</font>

202
00:09:15,670 --> 00:09:20,020
use that<font color="#E5E5E5"> rest one to week as a we table</font>

203
00:09:17,650 --> 00:09:22,060
address the<font color="#CCCCCC"> watch will crash away wait</font>

204
00:09:20,020 --> 00:09:24,490
<font color="#E5E5E5">until it restore then</font><font color="#CCCCCC"> i jailbreak</font><font color="#E5E5E5"> my</font>

205
00:09:22,060 --> 00:09:26,109
phone<font color="#CCCCCC"> SSH to</font><font color="#E5E5E5"> phone it's around the</font>

206
00:09:24,490 --> 00:09:30,270
spatial<font color="#E5E5E5"> synchronization service which</font>

207
00:09:26,110 --> 00:09:33,520
fetch all the<font color="#E5E5E5"> crash reports back to</font><font color="#CCCCCC"> home</font>

208
00:09:30,270 --> 00:09:36,160
<font color="#E5E5E5">copied them to my Mac parse this panic</font>

209
00:09:33,520 --> 00:09:38,620
part<font color="#CCCCCC"> of the register state</font><font color="#E5E5E5"> read four</font>

210
00:09:36,160 --> 00:09:42,699
bytes and put it in the assembler then

211
00:09:38,620 --> 00:09:46,900
repeat the whole<font color="#E5E5E5"> thing so overall it</font>

212
00:09:42,700 --> 00:09:50,560
takes me<font color="#E5E5E5"> I don't know like more than</font><font color="#CCCCCC"> 50</font>

213
00:09:46,900 --> 00:09:55,180
crashes to dump like<font color="#CCCCCC"> this for provide</font>

214
00:09:50,560 --> 00:09:57,430
and like<font color="#E5E5E5"> after</font><font color="#CCCCCC"> which crash watch take</font>

215
00:09:55,180 --> 00:09:59,050
like<font color="#CCCCCC"> four</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> five</font><font color="#E5E5E5"> minutes to recover as</font>

216
00:09:57,430 --> 00:10:01,989
I use the very very<font color="#CCCCCC"> third generation of</font>

217
00:09:59,050 --> 00:10:04,569
Apple watch<font color="#E5E5E5"> and it takes another four</font>

218
00:10:01,990 --> 00:10:07,330
<font color="#E5E5E5">minutes to run</font><font color="#CCCCCC"> the synchronization</font>

219
00:10:04,570 --> 00:10:11,050
service<font color="#CCCCCC"> copied</font><font color="#E5E5E5"> back to my Mac so it's</font>

220
00:10:07,330 --> 00:10:15,480
like<font color="#E5E5E5"> 10 minutes per one crash and it</font>

221
00:10:11,050 --> 00:10:18,280
takes in two weeks<font color="#E5E5E5"> to dump</font><font color="#CCCCCC"> OS 3</font><font color="#E5E5E5"> imitable</font>

222
00:10:15,480 --> 00:10:20,560
but but it was enough it was enough<font color="#CCCCCC"> to</font>

223
00:10:18,280 --> 00:10:22,449
construct<font color="#E5E5E5"> my exploit so now I can create</font>

224
00:10:20,560 --> 00:10:25,359
the OS drink object<font color="#CCCCCC"> point it to the</font>

225
00:10:22,450 --> 00:10:27,400
<font color="#E5E5E5">beginning</font><font color="#CCCCCC"> of the kernel I get the real</font>

226
00:10:25,360 --> 00:10:29,680
<font color="#CCCCCC">with table offset</font><font color="#E5E5E5"> so I read</font><font color="#CCCCCC"> it to user</font>

227
00:10:27,400 --> 00:10:31,810
mode using<font color="#CCCCCC"> our registry and show gate</font>

228
00:10:29,680 --> 00:10:34,209
property so lick the kernel<font color="#E5E5E5"> heater</font>

229
00:10:31,810 --> 00:10:37,719
calculate the kernel size<font color="#E5E5E5"> and read the</font>

230
00:10:34,210 --> 00:10:40,870
whole kernel<font color="#E5E5E5"> into user mode which is</font>

231
00:10:37,720 --> 00:10:42,970
good but there is no<font color="#CCCCCC"> symbolist in it</font><font color="#E5E5E5"> so</font>

232
00:10:40,870 --> 00:10:45,370
like there is just just<font color="#E5E5E5"> a raw memory</font>

233
00:10:42,970 --> 00:10:49,240
dump<font color="#CCCCCC"> so I look for all the kernel</font>

234
00:10:45,370 --> 00:10:53,050
extensions by looking for micro<font color="#CCCCCC"> header</font>

235
00:10:49,240 --> 00:10:56,770
magic<font color="#E5E5E5"> find and list all the</font><font color="#CCCCCC"> contentions</font>

236
00:10:53,050 --> 00:10:59,910
<font color="#CCCCCC">I find the cyst</font><font color="#E5E5E5"> end table and the trick</font>

237
00:10:56,770 --> 00:11:03,040
here<font color="#CCCCCC"> that Apple did not change the</font>

238
00:10:59,910 --> 00:11:04,719
sequence<font color="#E5E5E5"> of the system calls to not</font>

239
00:11:03,040 --> 00:11:05,540
break the backward compatibility<font color="#CCCCCC"> which</font>

240
00:11:04,720 --> 00:11:07,339
means as

241
00:11:05,540 --> 00:11:09,170
to find the<font color="#CCCCCC"> beginning of the system</font><font color="#E5E5E5"> cold</font>

242
00:11:07,339 --> 00:11:12,949
table<font color="#CCCCCC"> you can automatically resolve</font>

243
00:11:09,170 --> 00:11:15,860
around<font color="#E5E5E5"> like 500 symbols the same thing</font>

244
00:11:12,949 --> 00:11:19,250
for<font color="#CCCCCC"> market reps so if you</font><font color="#E5E5E5"> find this two</font>

245
00:11:15,860 --> 00:11:20,290
tables<font color="#E5E5E5"> you get around like 600 symbols</font>

246
00:11:19,250 --> 00:11:23,449
in<font color="#E5E5E5"> in a</font><font color="#CCCCCC"> Down</font>

247
00:11:20,290 --> 00:11:28,160
well<font color="#E5E5E5"> I kids object with table resolving</font>

248
00:11:23,449 --> 00:11:30,500
may be useful<font color="#CCCCCC"> to anyway</font><font color="#E5E5E5"> I get a colonel</font>

249
00:11:28,160 --> 00:11:33,589
down<font color="#E5E5E5"> I get a semi symbolic a to colonel</font>

250
00:11:30,500 --> 00:11:36,110
so as can<font color="#CCCCCC"> carry off for a for a good</font>

251
00:11:33,589 --> 00:11:39,680
gadget and as I get the<font color="#E5E5E5"> exact primitive</font>

252
00:11:36,110 --> 00:11:41,329
with user to free I just use read and

253
00:11:39,680 --> 00:11:44,239
write primitive read and write gadgets

254
00:11:41,329 --> 00:11:46,729
to set<font color="#E5E5E5"> up a primitive again I will not</font>

255
00:11:44,240 --> 00:11:48,470
focus that much on a primitive<font color="#E5E5E5"> there is</font>

256
00:11:46,730 --> 00:11:53,000
a white paper<font color="#E5E5E5"> so it interesting please</font>

257
00:11:48,470 --> 00:11:54,680
like reference date watcher is<font color="#CCCCCC"> three</font>

258
00:11:53,000 --> 00:11:56,990
there<font color="#CCCCCC"> is a different story</font>

259
00:11:54,680 --> 00:11:58,609
so<font color="#CCCCCC"> caramels are not</font><font color="#E5E5E5"> encrypted</font><font color="#CCCCCC"> anymore so</font>

260
00:11:56,990 --> 00:12:00,350
which means<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> dump</font>

261
00:11:58,610 --> 00:12:04,009
it like<font color="#CCCCCC"> where</font><font color="#E5E5E5"> four bytes and symbolic</font>

262
00:12:00,350 --> 00:12:06,889
<font color="#CCCCCC">ate it you've got a symbols but Apple</font>

263
00:12:04,009 --> 00:12:09,920
changed<font color="#E5E5E5"> a little bit security which like</font>

264
00:12:06,889 --> 00:12:10,850
new<font color="#CCCCCC"> heap loud sound fixes in Apple</font>

265
00:12:09,920 --> 00:12:12,769
mobile file integrity

266
00:12:10,850 --> 00:12:15,949
<font color="#CCCCCC">it is a driver the chicken or like code</font>

267
00:12:12,769 --> 00:12:18,980
sign and<font color="#CCCCCC"> all the certificate</font><font color="#E5E5E5"> and there</font>

268
00:12:15,949 --> 00:12:22,880
is<font color="#E5E5E5"> more</font><font color="#CCCCCC"> sandbox restrictions but it's</font>

269
00:12:18,980 --> 00:12:28,519
still vulnerable to<font color="#CCCCCC"> CV 23 70 which is</font>

270
00:12:22,880 --> 00:12:31,939
<font color="#CCCCCC">pretty nice bug it's a</font><font color="#E5E5E5"> heap overflow in</font>

271
00:12:28,519 --> 00:12:34,569
<font color="#E5E5E5">a</font><font color="#CCCCCC"> Mac voucher extra reside and the</font>

272
00:12:31,940 --> 00:12:36,829
<font color="#E5E5E5">problem is that there is a user mode</font>

273
00:12:34,569 --> 00:12:39,260
structure<font color="#E5E5E5"> and one of the</font><font color="#CCCCCC"> structure</font>

274
00:12:36,829 --> 00:12:43,399
fields will<font color="#CCCCCC"> be</font><font color="#E5E5E5"> used as argument</font><font color="#CCCCCC"> to copy</font>

275
00:12:39,260 --> 00:12:45,829
in front<font color="#CCCCCC"> and the copying copying data</font>

276
00:12:43,399 --> 00:12:48,019
from user allocated buffer to a

277
00:12:45,829 --> 00:12:50,239
communicated buffer and as we control

278
00:12:48,019 --> 00:12:52,430
what<font color="#E5E5E5"> we copying and we control how</font><font color="#CCCCCC"> many</font>

279
00:12:50,240 --> 00:12:55,850
bytes we are talking it lead to<font color="#E5E5E5"> a fully</font>

280
00:12:52,430 --> 00:12:58,969
controllable<font color="#E5E5E5"> hip overflow there are a</font>

281
00:12:55,850 --> 00:13:02,360
few ways to<font color="#E5E5E5"> exploit this bug</font><font color="#CCCCCC"> I prefer</font>

282
00:12:58,970 --> 00:13:05,389
the<font color="#E5E5E5"> ones that can be represented which</font>

283
00:13:02,360 --> 00:13:07,610
we can<font color="#CCCCCC"> allocate the Mac messages and</font>

284
00:13:05,389 --> 00:13:12,350
corrupt<font color="#E5E5E5"> the Mac message headers and</font>

285
00:13:07,610 --> 00:13:14,569
corrupt<font color="#CCCCCC"> the</font><font color="#E5E5E5"> mark message buffer bounds</font>

286
00:13:12,350 --> 00:13:17,779
which leads it we can read and write out

287
00:13:14,569 --> 00:13:19,430
of mark<font color="#E5E5E5"> message bound and this</font><font color="#CCCCCC"> bug can</font>

288
00:13:17,779 --> 00:13:23,810
<font color="#CCCCCC">be</font><font color="#E5E5E5"> even use it to</font><font color="#CCCCCC"> lick</font><font color="#E5E5E5"> the castle</font>

289
00:13:19,430 --> 00:13:25,520
so if we<font color="#E5E5E5"> still know or lick the address</font>

290
00:13:23,810 --> 00:13:28,160
of the<font color="#CCCCCC"> hip</font><font color="#E5E5E5"> we can allocate the user</font>

291
00:13:25,520 --> 00:13:30,380
client<font color="#E5E5E5"> and read it back</font><font color="#CCCCCC"> and the very</font>

292
00:13:28,160 --> 00:13:33,560
first pointer of object will be pointer

293
00:13:30,380 --> 00:13:35,150
to we table and the we table is<font color="#E5E5E5"> always a</font>

294
00:13:33,560 --> 00:13:38,959
constant<font color="#E5E5E5"> so we can</font><font color="#CCCCCC"> calculate the</font><font color="#E5E5E5"> Kaiser</font>

295
00:13:35,150 --> 00:13:40,579
our slide from the table address again

296
00:13:38,960 --> 00:13:44,540
this<font color="#CCCCCC"> bug can be triggered from the</font>

297
00:13:40,580 --> 00:13:47,620
application<font color="#E5E5E5"> sandbox so for bus for</font>

298
00:13:44,540 --> 00:13:50,540
watches<font color="#CCCCCC"> to</font><font color="#E5E5E5"> in watch</font><font color="#CCCCCC"> a3 will get caramels</font>

299
00:13:47,620 --> 00:13:53,660
<font color="#CCCCCC">we set up the primitives now it's time</font>

300
00:13:50,540 --> 00:13:55,099
to patch a<font color="#E5E5E5"> kernel so I use a classic</font>

301
00:13:53,660 --> 00:13:57,410
<font color="#CCCCCC">approach is</font><font color="#E5E5E5"> called the</font><font color="#CCCCCC"> patch finder as</font>

302
00:13:55,100 --> 00:13:59,570
all the gel<font color="#E5E5E5"> breaks do before to support</font>

303
00:13:57,410 --> 00:14:02,510
that many variations of<font color="#CCCCCC"> different</font>

304
00:13:59,570 --> 00:14:04,550
kernels and offsets so you look for

305
00:14:02,510 --> 00:14:06,710
stringer bite pattern<font color="#E5E5E5"> find the reference</font>

306
00:14:04,550 --> 00:14:08,689
to it<font color="#E5E5E5"> and with some additional</font>

307
00:14:06,710 --> 00:14:10,540
instruction analysis<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> easier to</font><font color="#E5E5E5"> find</font>

308
00:14:08,690 --> 00:14:14,630
<font color="#E5E5E5">beginning of the</font><font color="#CCCCCC"> function or the</font>

309
00:14:10,540 --> 00:14:17,000
variable you want<font color="#E5E5E5"> to reference simple</font>

310
00:14:14,630 --> 00:14:20,420
<font color="#CCCCCC">armed emulator is super helpful to</font><font color="#E5E5E5"> not</font>

311
00:14:17,000 --> 00:14:22,550
do it<font color="#E5E5E5"> all the calculation by hand and</font>

312
00:14:20,420 --> 00:14:24,380
<font color="#E5E5E5">again</font><font color="#CCCCCC"> fiscal table and mock back table</font>

313
00:14:22,550 --> 00:14:26,240
<font color="#CCCCCC">so as soon</font><font color="#E5E5E5"> as you find the</font><font color="#CCCCCC"> beginning of</font>

314
00:14:24,380 --> 00:14:32,330
the tables<font color="#E5E5E5"> it automatically give</font><font color="#CCCCCC"> around</font>

315
00:14:26,240 --> 00:14:35,660
600 symbols which<font color="#CCCCCC"> can be used to</font><font color="#E5E5E5"> do a</font>

316
00:14:32,330 --> 00:14:38,930
patches so now it's<font color="#E5E5E5"> time to patch a</font>

317
00:14:35,660 --> 00:14:42,439
kernel the first patch is how to get

318
00:14:38,930 --> 00:14:45,319
<font color="#E5E5E5">root as we still in a sandbox we still</font>

319
00:14:42,440 --> 00:14:47,000
run it as a<font color="#E5E5E5"> mobile and the fun thing</font>

320
00:14:45,320 --> 00:14:49,490
there is<font color="#E5E5E5"> no kernel page protector on</font>

321
00:14:47,000 --> 00:14:53,090
<font color="#E5E5E5">Apple watch so which means as soon as we</font>

322
00:14:49,490 --> 00:14:55,220
get the kernel right<font color="#CCCCCC"> we can</font><font color="#E5E5E5"> easily dodge</font>

323
00:14:53,090 --> 00:14:59,120
the kernel code and we<font color="#E5E5E5"> can easily by the</font>

324
00:14:55,220 --> 00:15:03,350
<font color="#E5E5E5">kernel page tables to switch these pages</font>

325
00:14:59,120 --> 00:15:05,870
to be writable so in other words<font color="#E5E5E5"> just</font>

326
00:15:03,350 --> 00:15:08,860
find set<font color="#CCCCCC"> ready function and write</font><font color="#E5E5E5"> out</font>

327
00:15:05,870 --> 00:15:12,530
the<font color="#CCCCCC"> check</font><font color="#E5E5E5"> which prevent you from</font>

328
00:15:08,860 --> 00:15:15,800
non-privileged process<font color="#CCCCCC"> to escalate your</font>

329
00:15:12,530 --> 00:15:18,350
<font color="#E5E5E5">root and</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> call</font><font color="#CCCCCC"> tetra</font><font color="#E5E5E5"> 8000 you get</font>

330
00:15:15,800 --> 00:15:20,120
root or if you don't<font color="#CCCCCC"> want to patch a</font>

331
00:15:18,350 --> 00:15:23,660
kernel and like mess with all this

332
00:15:20,120 --> 00:15:24,790
kernel text<font color="#CCCCCC"> we</font><font color="#E5E5E5"> can iterate a heap and</font>

333
00:15:23,660 --> 00:15:27,199
find

334
00:15:24,790 --> 00:15:29,689
<font color="#CCCCCC">proc structure for</font><font color="#E5E5E5"> our process</font><font color="#CCCCCC"> in a heap</font>

335
00:15:27,200 --> 00:15:31,940
and in this proc structure it will be a

336
00:15:29,690 --> 00:15:33,230
pointer to<font color="#E5E5E5"> you</font><font color="#CCCCCC"> cred</font><font color="#E5E5E5"> structure in this</font>

337
00:15:31,940 --> 00:15:36,440
<font color="#E5E5E5">you cred structure will</font>

338
00:15:33,230 --> 00:15:40,670
feels like<font color="#CCCCCC"> UID GID</font><font color="#E5E5E5"> just sets</font><font color="#CCCCCC"> into zeros</font>

339
00:15:36,440 --> 00:15:42,710
which leads<font color="#E5E5E5"> it our process became the</font>

340
00:15:40,670 --> 00:15:45,500
same thing for sandbox<font color="#CCCCCC"> so we are still</font>

341
00:15:42,710 --> 00:15:47,360
sandbox it but in you cred<font color="#E5E5E5"> structure</font>

342
00:15:45,500 --> 00:15:50,240
there is<font color="#E5E5E5"> a pointer to assemble label and</font>

343
00:15:47,360 --> 00:15:51,860
if we knew out<font color="#E5E5E5"> the sandbox label there</font>

344
00:15:50,240 --> 00:15:53,630
is<font color="#CCCCCC"> no</font><font color="#E5E5E5"> label there is no sandbox so we</font>

345
00:15:51,860 --> 00:15:59,060
can read and<font color="#E5E5E5"> write</font><font color="#CCCCCC"> pretty much anywhere</font>

346
00:15:53,630 --> 00:16:02,750
on<font color="#CCCCCC"> a system getting a kernel task so</font>

347
00:15:59,060 --> 00:16:04,579
<font color="#CCCCCC">care</font><font color="#E5E5E5"> no task is pretty nice way to read</font>

348
00:16:02,750 --> 00:16:07,550
anywhere<font color="#CCCCCC"> write anywhere in allocate the</font>

349
00:16:04,580 --> 00:16:09,230
kernel memory again if you can<font color="#CCCCCC"> patch the</font>

350
00:16:07,550 --> 00:16:12,349
kernel we can patch the task for pit

351
00:16:09,230 --> 00:16:17,510
function and remove a check which

352
00:16:12,350 --> 00:16:19,450
preventing get kernel task<font color="#E5E5E5"> port or there</font>

353
00:16:17,510 --> 00:16:22,069
is other way without<font color="#E5E5E5"> patching a kernel</font>

354
00:16:19,450 --> 00:16:25,070
iterate<font color="#E5E5E5"> a heap and find like the kernel</font>

355
00:16:22,070 --> 00:16:28,040
task and save the<font color="#CCCCCC"> send right</font><font color="#E5E5E5"> which is</font>

356
00:16:25,070 --> 00:16:30,470
like itself into our<font color="#E5E5E5"> protest ask which</font>

357
00:16:28,040 --> 00:16:33,050
support then read<font color="#CCCCCC"> it back by task get</font>

358
00:16:30,470 --> 00:16:35,390
special port and swap everything back<font color="#CCCCCC"> so</font>

359
00:16:33,050 --> 00:16:39,770
<font color="#CCCCCC">in other</font><font color="#E5E5E5"> words we get the kernel</font>

360
00:16:35,390 --> 00:16:42,410
centroids and return the special

361
00:16:39,770 --> 00:16:44,270
<font color="#E5E5E5">structure in user mode which contained</font>

362
00:16:42,410 --> 00:16:47,990
<font color="#CCCCCC">the kernels</font><font color="#E5E5E5"> and write on it in other</font>

363
00:16:44,270 --> 00:16:52,370
words it cannot<font color="#E5E5E5"> happen and no care no</font>

364
00:16:47,990 --> 00:16:54,980
<font color="#E5E5E5">question so we get it</font><font color="#CCCCCC"> colonel tasks</font><font color="#E5E5E5"> now</font>

365
00:16:52,370 --> 00:16:56,540
it's time to disable code sign checks<font color="#E5E5E5"> so</font>

366
00:16:54,980 --> 00:16:59,690
there is a global<font color="#CCCCCC"> variable called</font><font color="#E5E5E5"> debug</font>

367
00:16:56,540 --> 00:17:01,099
and it's<font color="#E5E5E5"> got</font><font color="#CCCCCC"> reference</font><font color="#E5E5E5"> by a function</font>

368
00:16:59,690 --> 00:17:04,100
called PE<font color="#E5E5E5"> I can help debugger</font>

369
00:17:01,100 --> 00:17:06,349
it's like internal<font color="#CCCCCC"> Eponine and</font><font color="#E5E5E5"> it</font>

370
00:17:04,099 --> 00:17:08,060
<font color="#E5E5E5">enabled the debugger capabilities around</font>

371
00:17:06,349 --> 00:17:11,209
the kernel<font color="#E5E5E5"> and all the kernel extension</font>

372
00:17:08,060 --> 00:17:14,450
<font color="#E5E5E5">so</font><font color="#CCCCCC"> we can patch it globally</font><font color="#E5E5E5"> by setting</font>

373
00:17:11,210 --> 00:17:17,900
the back to<font color="#CCCCCC"> 1 or there is a import table</font>

374
00:17:14,450 --> 00:17:20,960
like<font color="#E5E5E5"> NL</font><font color="#CCCCCC"> simple pointers</font><font color="#E5E5E5"> and there is</font>

375
00:17:17,900 --> 00:17:23,360
like imports in kernel<font color="#CCCCCC"> extensions so</font><font color="#E5E5E5"> we</font>

376
00:17:20,960 --> 00:17:25,190
can<font color="#CCCCCC"> redirect the</font><font color="#E5E5E5"> simples to sound</font>

377
00:17:23,359 --> 00:17:27,829
<font color="#E5E5E5">functions at like</font><font color="#CCCCCC"> Row 2 Row</font><font color="#E5E5E5"> 1 so in</font>

378
00:17:25,190 --> 00:17:29,980
other words set P I can<font color="#E5E5E5"> help debugger</font>

379
00:17:27,829 --> 00:17:32,750
<font color="#E5E5E5">only for a kernel extension that we need</font>

380
00:17:29,980 --> 00:17:34,820
in addition<font color="#E5E5E5"> we need to patch c CS</font>

381
00:17:32,750 --> 00:17:38,240
enforcement<font color="#CCCCCC"> disable and allow invalid</font>

382
00:17:34,820 --> 00:17:42,800
signatures<font color="#CCCCCC"> there are</font><font color="#E5E5E5"> two variables in</font><font color="#CCCCCC"> MV</font>

383
00:17:38,240 --> 00:17:45,980
kernel extension in<font color="#E5E5E5"> an a constant data</font>

384
00:17:42,800 --> 00:17:47,090
just by jump to one and this<font color="#CCCCCC"> leaf that</font>

385
00:17:45,980 --> 00:17:50,870
<font color="#E5E5E5">we can run any ensign</font>

386
00:17:47,090 --> 00:17:54,020
<font color="#E5E5E5">called an apology one last thing is</font>

387
00:17:50,870 --> 00:17:55,939
around the root of s so root of s<font color="#E5E5E5"> this</font>

388
00:17:54,020 --> 00:17:57,950
<font color="#CCCCCC">mounted is read</font><font color="#E5E5E5"> only which means if you</font>

389
00:17:55,940 --> 00:17:59,570
<font color="#CCCCCC">want</font><font color="#E5E5E5"> to add the new file</font><font color="#CCCCCC"> as the root</font>

390
00:17:57,950 --> 00:18:01,700
<font color="#CCCCCC">filesystem</font><font color="#E5E5E5"> or like change any of</font>

391
00:17:59,570 --> 00:18:05,178
existing ones<font color="#E5E5E5"> suitable prevent us from</font>

392
00:18:01,700 --> 00:18:07,429
doing<font color="#E5E5E5"> it</font><font color="#CCCCCC"> but there is a function in a</font>

393
00:18:05,179 --> 00:18:09,260
kernel called the<font color="#CCCCCC"> mock mount</font><font color="#E5E5E5"> and it is</font>

394
00:18:07,429 --> 00:18:11,840
checking<font color="#E5E5E5"> if it is a root filesystem and</font>

395
00:18:09,260 --> 00:18:15,529
if we<font color="#CCCCCC"> run it on the</font><font color="#E5E5E5"> release kernels like</font>

396
00:18:11,840 --> 00:18:17,899
return null or so so just watch out this

397
00:18:15,529 --> 00:18:20,120
check and called call mount to remount

398
00:18:17,900 --> 00:18:24,350
system<font color="#CCCCCC"> partitions that the</font><font color="#E5E5E5"> partition as</font>

399
00:18:20,120 --> 00:18:26,418
a read/write<font color="#E5E5E5"> there is other way to</font><font color="#CCCCCC"> make</font>

400
00:18:24,350 --> 00:18:30,799
this patch without like touching<font color="#E5E5E5"> a</font>

401
00:18:26,419 --> 00:18:34,100
kernel text all in a heap there is a

402
00:18:30,799 --> 00:18:37,789
root<font color="#E5E5E5"> fSV node pointer and there is a</font>

403
00:18:34,100 --> 00:18:39,770
pointer to mount flags<font color="#E5E5E5"> and one of the</font>

404
00:18:37,789 --> 00:18:41,658
mount flags it represented this file

405
00:18:39,770 --> 00:18:43,580
<font color="#E5E5E5">system with a root filesystem just</font>

406
00:18:41,659 --> 00:18:46,490
remove the root filesystem flag<font color="#E5E5E5"> call</font>

407
00:18:43,580 --> 00:18:48,559
remount<font color="#E5E5E5"> and switch everything back</font><font color="#CCCCCC"> so we</font>

408
00:18:46,490 --> 00:18:51,860
we can remount filesystem without

409
00:18:48,559 --> 00:18:55,610
touching you cannot cannot<font color="#E5E5E5"> text on a</font>

410
00:18:51,860 --> 00:18:58,250
systems before<font color="#CCCCCC"> Apple filesystem</font><font color="#E5E5E5"> there is</font>

411
00:18:55,610 --> 00:19:00,260
two additional patch required and there

412
00:18:58,250 --> 00:19:02,120
is<font color="#E5E5E5"> lightweight volume manager which</font>

413
00:19:00,260 --> 00:19:04,039
basically set a<font color="#E5E5E5"> hook on</font><font color="#CCCCCC"> the right so</font>

414
00:19:02,120 --> 00:19:05,600
when<font color="#E5E5E5"> you</font><font color="#CCCCCC"> try and even if is remounted</font>

415
00:19:04,039 --> 00:19:10,279
<font color="#E5E5E5">filesystem when you're trying to copy</font>

416
00:19:05,600 --> 00:19:11,629
file<font color="#E5E5E5"> is</font><font color="#CCCCCC"> to protected partition it will</font>

417
00:19:10,279 --> 00:19:14,630
not write any data it will<font color="#E5E5E5"> just write</font>

418
00:19:11,630 --> 00:19:17,090
zeros so we need to patch is write

419
00:19:14,630 --> 00:19:20,210
protected check and set<font color="#CCCCCC"> B ICANN has</font>

420
00:19:17,090 --> 00:19:24,620
debugger<font color="#CCCCCC"> to one on all the</font><font color="#E5E5E5"> systems</font>

421
00:19:20,210 --> 00:19:27,409
before<font color="#CCCCCC"> Apple file system anyway</font><font color="#E5E5E5"> i</font>

422
00:19:24,620 --> 00:19:30,559
remounted the root filesystem<font color="#CCCCCC"> and it's</font>

423
00:19:27,409 --> 00:19:33,260
time to<font color="#E5E5E5"> like drop the payload so I</font>

424
00:19:30,559 --> 00:19:36,020
reckon<font color="#E5E5E5"> pile the</font><font color="#CCCCCC"> SSH client</font><font color="#E5E5E5"> for our m7k</font>

425
00:19:33,260 --> 00:19:39,408
<font color="#E5E5E5">and CH as well recompile the basic tool</font>

426
00:19:36,020 --> 00:19:43,779
package<font color="#E5E5E5"> like LS mode for our m7 key and</font>

427
00:19:39,409 --> 00:19:43,779
copy everything<font color="#E5E5E5"> to root filesystem</font>

428
00:19:44,950 --> 00:19:52,460
then I<font color="#E5E5E5"> run a drop beer and was surprised</font>

429
00:19:48,649 --> 00:19:54,949
because it got<font color="#E5E5E5"> killed by sandbox which</font>

430
00:19:52,460 --> 00:19:57,470
means it on watch here there is much

431
00:19:54,950 --> 00:20:01,010
more restricted sandbox and<font color="#E5E5E5"> on</font><font color="#CCCCCC"> is so the</font>

432
00:19:57,470 --> 00:20:03,610
calls like bind connects and receive the

433
00:20:01,010 --> 00:20:06,560
forbidden but as we get<font color="#E5E5E5"> the colonel</font>

434
00:20:03,610 --> 00:20:08,629
<font color="#CCCCCC">right</font><font color="#E5E5E5"> we can</font><font color="#CCCCCC"> knew our specific sandbox</font>

435
00:20:06,560 --> 00:20:12,169
<font color="#CCCCCC">operations</font><font color="#E5E5E5"> just in the sandbox</font><font color="#CCCCCC"> term</font>

436
00:20:08,630 --> 00:20:15,230
extension so I done<font color="#E5E5E5"> this around the SSH</font>

437
00:20:12,170 --> 00:20:17,360
and<font color="#E5E5E5"> here's a problem</font><font color="#CCCCCC"> here's a</font><font color="#E5E5E5"> list of</font>

438
00:20:15,230 --> 00:20:22,910
all the available interfaces on the

439
00:20:17,360 --> 00:20:25,429
<font color="#CCCCCC">watches there is a</font><font color="#E5E5E5"> WL 0 which look like</font>

440
00:20:22,910 --> 00:20:27,620
like<font color="#CCCCCC"> Apple Wi-Fi direct</font><font color="#E5E5E5"> but in my case</font>

441
00:20:25,430 --> 00:20:30,080
<font color="#CCCCCC">it's support only the Bluetooth</font>

442
00:20:27,620 --> 00:20:32,060
<font color="#E5E5E5">connection and it was the problem it was</font>

443
00:20:30,080 --> 00:20:34,760
a problem<font color="#E5E5E5"> for me</font><font color="#CCCCCC"> because I plan to</font>

444
00:20:32,060 --> 00:20:38,480
connect to Apple watch directly<font color="#CCCCCC"> from my</font>

445
00:20:34,760 --> 00:20:41,810
Mac and<font color="#CCCCCC"> start looking</font><font color="#E5E5E5"> for a way how we</font>

446
00:20:38,480 --> 00:20:46,570
can do<font color="#E5E5E5"> it since for Luca</font><font color="#CCCCCC"> Tedesco or</font>

447
00:20:41,810 --> 00:20:50,300
point me to<font color="#E5E5E5"> this trick we we can use</font>

448
00:20:46,570 --> 00:20:53,540
mobile<font color="#E5E5E5"> framework on on a</font><font color="#CCCCCC"> Mac to</font><font color="#E5E5E5"> send a</font>

449
00:20:50,300 --> 00:20:55,190
special message to<font color="#CCCCCC"> a phone say hey</font>

450
00:20:53,540 --> 00:20:57,710
please start forwarding service port

451
00:20:55,190 --> 00:21:00,200
with the<font color="#E5E5E5"> port number 22 from from a</font>

452
00:20:57,710 --> 00:21:02,030
watch we still bind<font color="#CCCCCC"> a port</font><font color="#E5E5E5"> and a watch</font>

453
00:21:00,200 --> 00:21:04,700
to some random port<font color="#E5E5E5"> on a phone and</font>

454
00:21:02,030 --> 00:21:10,280
return it in companion proxy service

455
00:21:04,700 --> 00:21:12,770
<font color="#E5E5E5">port so in other words we can bind the</font>

456
00:21:10,280 --> 00:21:15,440
port on a watch to a port<font color="#E5E5E5"> on a phone</font>

457
00:21:12,770 --> 00:21:18,560
then bind the port on the phone to port

458
00:21:15,440 --> 00:21:20,870
on a<font color="#E5E5E5"> Mac and connect it over the local</font>

459
00:21:18,560 --> 00:21:25,760
<font color="#E5E5E5">host this is</font><font color="#CCCCCC"> how it look like I run</font><font color="#E5E5E5"> my</font>

460
00:21:20,870 --> 00:21:28,429
proxy did bind<font color="#E5E5E5"> the port and now I can</font>

461
00:21:25,760 --> 00:21:32,000
connect to the port<font color="#CCCCCC"> abandoned from my</font>

462
00:21:28,430 --> 00:21:34,280
Mac it will use iPhone<font color="#E5E5E5"> as a proxy over</font>

463
00:21:32,000 --> 00:21:36,350
<font color="#E5E5E5">like USB</font><font color="#CCCCCC"> Bluetooth proxy to connect to</font>

464
00:21:34,280 --> 00:21:40,220
watch yeah we'll get the shells found it

465
00:21:36,350 --> 00:21:43,760
we run the new name<font color="#E5E5E5"> and we see</font><font color="#CCCCCC"> its</font><font color="#E5E5E5"> watch</font>

466
00:21:40,220 --> 00:21:45,680
<font color="#CCCCCC">is</font><font color="#E5E5E5"> 2.2 running on the very first</font>

467
00:21:43,760 --> 00:21:48,140
generation<font color="#CCCCCC"> of watch</font>

468
00:21:45,680 --> 00:21:51,890
<font color="#E5E5E5">I run the list of all the processor of</font>

469
00:21:48,140 --> 00:21:54,380
<font color="#CCCCCC">the processes and here is the jailbreak</font>

470
00:21:51,890 --> 00:21:58,090
<font color="#E5E5E5">of the watch pound in other words</font>

471
00:21:54,380 --> 00:22:02,390
<font color="#CCCCCC">watches it's like super similar than I</font>

472
00:21:58,090 --> 00:22:05,419
guess just<font color="#CCCCCC"> for co-pilots</font><font color="#E5E5E5"> here is a drug</font>

473
00:22:02,390 --> 00:22:09,160
beer<font color="#E5E5E5"> instances running on</font><font color="#CCCCCC"> a watch yes</font>

474
00:22:05,420 --> 00:22:12,950
and as we get<font color="#E5E5E5"> the</font><font color="#CCCCCC"> ssh connection</font><font color="#E5E5E5"> we can</font>

475
00:22:09,160 --> 00:22:15,419
copy or copy files to<font color="#CCCCCC"> watches</font><font color="#E5E5E5"> copy files</font>

476
00:22:12,950 --> 00:22:19,489
<font color="#E5E5E5">drama</font><font color="#CCCCCC"> i watch is which much easy</font>

477
00:22:15,419 --> 00:22:25,739
so I recognize the<font color="#CCCCCC"> NVRAM a binary and</font>

478
00:22:19,489 --> 00:22:36,479
use<font color="#CCCCCC"> STP to copy it to</font><font color="#E5E5E5"> watch</font><font color="#CCCCCC"> copy into</font>

479
00:22:25,739 --> 00:22:40,739
user<font color="#CCCCCC"> beam ok password</font><font color="#E5E5E5"> prompt done now</font>

480
00:22:36,479 --> 00:22:44,249
switch back<font color="#CCCCCC"> to my</font><font color="#E5E5E5"> station</font><font color="#CCCCCC"> run the nvram</font>

481
00:22:40,739 --> 00:22:48,440
-<font color="#CCCCCC"> peep</font><font color="#E5E5E5"> which lists all the like user</font>

482
00:22:44,249 --> 00:22:48,440
motor testable<font color="#E5E5E5"> and</font><font color="#CCCCCC"> there are variables</font>

483
00:22:49,909 --> 00:22:57,690
similar sync<font color="#E5E5E5"> - if you want to copy files</font>

484
00:22:52,619 --> 00:23:00,149
from from a watch we can use SSH with a

485
00:22:57,690 --> 00:23:03,149
pipe and like redirected directly

486
00:23:00,149 --> 00:23:05,728
<font color="#CCCCCC">somewhere on your Mac so in this example</font>

487
00:23:03,149 --> 00:23:08,879
<font color="#E5E5E5">I archiving all the private frameworks</font>

488
00:23:05,729 --> 00:23:15,779
into<font color="#CCCCCC"> a file called the frameworks</font><font color="#E5E5E5"> tar</font>

489
00:23:08,879 --> 00:23:17,849
and it will be save it on my<font color="#CCCCCC"> micro</font><font color="#E5E5E5"> you</font>

490
00:23:15,779 --> 00:23:20,399
<font color="#E5E5E5">had to prove the</font><font color="#CCCCCC"> twig copied something</font>

491
00:23:17,849 --> 00:23:24,269
<font color="#E5E5E5">yeah literally we just</font><font color="#CCCCCC"> dumped</font><font color="#E5E5E5"> it one</font>

492
00:23:20,399 --> 00:23:27,978
<font color="#E5E5E5">half megabytes yeah so it was</font><font color="#CCCCCC"> like a</font>

493
00:23:24,269 --> 00:23:30,809
quick overview<font color="#E5E5E5"> of SSH over the Bluetooth</font>

494
00:23:27,979 --> 00:23:34,349
but there is more<font color="#E5E5E5"> so we can SSH over the</font>

495
00:23:30,809 --> 00:23:38,158
Wi-Fi<font color="#CCCCCC"> it's the watch</font><font color="#E5E5E5"> case support the</font>

496
00:23:34,349 --> 00:23:39,869
2.4<font color="#E5E5E5"> gigahertz Wi-Fi spots it's a little</font>

497
00:23:38,159 --> 00:23:43,979
bit tricky to<font color="#E5E5E5"> force watch to connect to</font>

498
00:23:39,869 --> 00:23:45,478
it but it works<font color="#E5E5E5"> so the interesting thing</font>

499
00:23:43,979 --> 00:23:49,499
that I found<font color="#CCCCCC"> is not involved at all</font>

500
00:23:45,479 --> 00:23:52,529
<font color="#CCCCCC">which</font><font color="#E5E5E5"> means we don't need to connect any</font>

501
00:23:49,499 --> 00:23:55,139
like proxies the<font color="#E5E5E5"> phone we just need to</font>

502
00:23:52,529 --> 00:24:01,409
lick the address of Apple watch and

503
00:23:55,139 --> 00:24:03,809
connect it directly over<font color="#CCCCCC"> to</font><font color="#E5E5E5"> Wi-Fi yeah</font>

504
00:24:01,409 --> 00:24:05,849
so in this example I already<font color="#E5E5E5"> live the</font>

505
00:24:03,809 --> 00:24:08,999
address of Apple watch and I just

506
00:24:05,849 --> 00:24:12,389
directly connect from<font color="#E5E5E5"> a Mac get</font><font color="#CCCCCC"> the she</font>

507
00:24:08,999 --> 00:24:15,959
responded and in this<font color="#E5E5E5"> case I'm running</font>

508
00:24:12,389 --> 00:24:19,589
the<font color="#E5E5E5"> Watchers 3.1 again on the very first</font>

509
00:24:15,959 --> 00:24:25,889
generation<font color="#CCCCCC"> of Apple watch the same list</font>

510
00:24:19,589 --> 00:24:28,229
of<font color="#E5E5E5"> the processes the same STP in this</font>

511
00:24:25,889 --> 00:24:29,360
case<font color="#E5E5E5"> I</font><font color="#CCCCCC"> recombine the kickstart is a</font>

512
00:24:28,229 --> 00:24:32,869
special tool

513
00:24:29,360 --> 00:24:36,949
and it's least all the kernel extensions

514
00:24:32,869 --> 00:24:41,299
just<font color="#CCCCCC"> in a render copied to my Apple</font>

515
00:24:36,950 --> 00:24:43,429
<font color="#CCCCCC">watch run the kickstart yeah</font>

516
00:24:41,299 --> 00:24:45,529
so we see the address which<font color="#CCCCCC"> we decide</font>

517
00:24:43,429 --> 00:24:52,100
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is the name of</font><font color="#CCCCCC"> all the kernel</font>

518
00:24:45,529 --> 00:24:53,950
extensions in<font color="#CCCCCC"> errata yeah so it's one of</font>

519
00:24:52,100 --> 00:24:56,899
<font color="#CCCCCC">the final thing I recommend</font><font color="#E5E5E5"> the pink</font>

520
00:24:53,950 --> 00:24:58,789
tool to prove that it works

521
00:24:56,899 --> 00:25:01,309
if<font color="#E5E5E5"> we</font><font color="#CCCCCC"> knew out all the sandbox</font>

522
00:24:58,789 --> 00:25:03,259
restrictions<font color="#E5E5E5"> we can even force watch to</font>

523
00:25:01,309 --> 00:25:14,559
talk with outer world<font color="#CCCCCC"> for example let's</font>

524
00:25:03,259 --> 00:25:22,999
try<font color="#E5E5E5"> to ping Google</font><font color="#CCCCCC"> yes we see</font><font color="#E5E5E5"> it works</font>

525
00:25:14,559 --> 00:25:26,749
so that's<font color="#E5E5E5"> Apple watch okay</font>

526
00:25:22,999 --> 00:25:29,570
so Apple watch<font color="#E5E5E5"> it has a test to SMS</font>

527
00:25:26,749 --> 00:25:31,700
calls<font color="#CCCCCC"> health information even some</font>

528
00:25:29,570 --> 00:25:34,908
photos and<font color="#CCCCCC"> other private data can be</font>

529
00:25:31,700 --> 00:25:37,970
<font color="#E5E5E5">synced to watch some of the models get</font>

530
00:25:34,909 --> 00:25:41,629
<font color="#CCCCCC">access to</font><font color="#E5E5E5"> GPS location directly or fetch</font>

531
00:25:37,970 --> 00:25:44,840
it<font color="#E5E5E5"> from a phone in these to answer our</font>

532
00:25:41,629 --> 00:25:46,609
<font color="#E5E5E5">calls and</font><font color="#CCCCCC"> involve it even Apple pay of</font>

533
00:25:44,840 --> 00:25:49,158
<font color="#E5E5E5">course after you made a jailbreak you</font>

534
00:25:46,609 --> 00:25:50,899
get<font color="#CCCCCC"> access to hold the user</font><font color="#E5E5E5"> sensitive</font>

535
00:25:49,159 --> 00:25:56,330
data like messages<font color="#CCCCCC"> called histories</font>

536
00:25:50,899 --> 00:25:58,609
contacts and so on so I go deeper I've

537
00:25:56,330 --> 00:26:00,259
<font color="#E5E5E5">rode the framework that allow me to</font>

538
00:25:58,609 --> 00:26:03,279
interpose and<font color="#CCCCCC"> trample in the system</font>

539
00:26:00,259 --> 00:26:05,539
<font color="#CCCCCC">functions which mean when the data got</font>

540
00:26:03,279 --> 00:26:10,730
synchronizes from a phone I can<font color="#E5E5E5"> catch</font><font color="#CCCCCC"> it</font>

541
00:26:05,539 --> 00:26:12,649
on<font color="#CCCCCC"> my Apple watch which mean some stuff</font>

542
00:26:10,730 --> 00:26:16,519
like<font color="#CCCCCC"> call</font><font color="#E5E5E5"> recordings is possible as well</font>

543
00:26:12,649 --> 00:26:18,139
<font color="#CCCCCC">so if you use</font><font color="#E5E5E5"> Apple watch on to answer a</font>

544
00:26:16,519 --> 00:26:21,619
call on<font color="#E5E5E5"> jailbroken watch it's possible</font>

545
00:26:18,139 --> 00:26:23,389
to record this call<font color="#E5E5E5"> it's even possible</font>

546
00:26:21,619 --> 00:26:27,408
to<font color="#E5E5E5"> create weeks for a watch as we see</font>

547
00:26:23,389 --> 00:26:29,899
two weeks in<font color="#E5E5E5"> Cydia now change the layout</font>

548
00:26:27,409 --> 00:26:32,570
of<font color="#E5E5E5"> some of the UI elements</font><font color="#CCCCCC"> and so on or</font>

549
00:26:29,899 --> 00:26:34,739
run tools like<font color="#E5E5E5"> Frida</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> radar on on a</font>

550
00:26:32,570 --> 00:26:39,178
watch

551
00:26:34,740 --> 00:26:42,480
<font color="#CCCCCC">I would say</font><font color="#E5E5E5"> it what race security is</font>

552
00:26:39,179 --> 00:26:45,059
mostly equal to is<font color="#E5E5E5"> I will do a really</font>

553
00:26:42,480 --> 00:26:48,510
<font color="#E5E5E5">great job to secure the both system and</font>

554
00:26:45,059 --> 00:26:53,149
it's pretty<font color="#E5E5E5"> hard to jailbreak the modern</font>

555
00:26:48,510 --> 00:26:55,590
Apple operating systems<font color="#E5E5E5"> but still data</font>

556
00:26:53,150 --> 00:26:58,230
forensics<font color="#CCCCCC"> maybe a little</font><font color="#E5E5E5"> bit easier on a</font>

557
00:26:55,590 --> 00:27:01,620
watch because<font color="#E5E5E5"> there is no</font><font color="#CCCCCC"> hardware</font>

558
00:26:58,230 --> 00:27:03,780
<font color="#E5E5E5">protections like MCC like</font><font color="#CCCCCC"> kpp on a soul</font>

559
00:27:01,620 --> 00:27:06,149
<font color="#CCCCCC">its</font><font color="#E5E5E5"> I'm pretty sure Apple</font><font color="#CCCCCC"> will edit in</font>

560
00:27:03,780 --> 00:27:09,090
any future models<font color="#E5E5E5"> but data forensics</font><font color="#CCCCCC"> a</font>

561
00:27:06,150 --> 00:27:12,090
little bit easier now and as both

562
00:27:09,090 --> 00:27:15,209
systems are secure<font color="#E5E5E5"> the exploits for</font>

563
00:27:12,090 --> 00:27:17,309
Apple<font color="#CCCCCC"> watch for watch</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> iOS became</font>

564
00:27:15,210 --> 00:27:19,530
even more available<font color="#E5E5E5"> as it's harder</font><font color="#CCCCCC"> and</font>

565
00:27:17,309 --> 00:27:26,010
<font color="#CCCCCC">harder to exploit it with each new</font>

566
00:27:19,530 --> 00:27:42,660
versions this<font color="#E5E5E5"> is it you guys have any</font>

567
00:27:26,010 --> 00:27:50,730
<font color="#E5E5E5">questions</font><font color="#CCCCCC"> no questions</font>

568
00:27:42,660 --> 00:27:55,620
<font color="#CCCCCC">oh there is one great</font><font color="#E5E5E5"> presentation</font><font color="#CCCCCC"> you</font>

569
00:27:50,730 --> 00:27:57,600
<font color="#CCCCCC">foresee</font><font color="#E5E5E5"> Apple enabling kernel text</font>

570
00:27:55,620 --> 00:28:00,389
protections so<font color="#CCCCCC"> that it's not read right</font>

571
00:27:57,600 --> 00:28:03,059
I mean yeah rewritable in the future so

572
00:28:00,390 --> 00:28:06,809
<font color="#CCCCCC">you can't patch it could you please</font>

573
00:28:03,059 --> 00:28:08,490
because it's like oh yeah<font color="#E5E5E5"> so earlier you</font>

574
00:28:06,809 --> 00:28:12,149
<font color="#E5E5E5">had mentioned that you're able to just</font>

575
00:28:08,490 --> 00:28:15,240
simply patch kernel text do you see

576
00:28:12,150 --> 00:28:17,250
Apple enabling<font color="#E5E5E5"> readwrite protections or</font>

577
00:28:15,240 --> 00:28:22,500
<font color="#E5E5E5">write protections on kernel text</font><font color="#CCCCCC"> in</font>

578
00:28:17,250 --> 00:28:26,460
future well as soon as soon<font color="#E5E5E5"> a poll will</font>

579
00:28:22,500 --> 00:28:28,230
move to 64-bit<font color="#E5E5E5"> protesters for Apple</font>

580
00:28:26,460 --> 00:28:29,130
watch<font color="#CCCCCC"> they will add</font><font color="#E5E5E5"> to cannot</font><font color="#CCCCCC"> batch</font>

581
00:28:28,230 --> 00:28:31,559
protects for<font color="#E5E5E5"> sure</font>

582
00:28:29,130 --> 00:28:34,230
I think<font color="#CCCCCC"> there's only reason why the lack</font>

583
00:28:31,559 --> 00:28:38,760
<font color="#E5E5E5">of</font><font color="#CCCCCC"> kpp on Apple world because it's still</font>

584
00:28:34,230 --> 00:28:41,040
such<font color="#E5E5E5"> a to be processor and it's may</font>

585
00:28:38,760 --> 00:28:43,290
cause additional like performances as

586
00:28:41,040 --> 00:28:47,389
the very<font color="#E5E5E5"> first implementation of</font><font color="#CCCCCC"> kpp was</font>

587
00:28:43,290 --> 00:28:49,129
like a special<font color="#CCCCCC"> message service</font><font color="#E5E5E5"> that</font>

588
00:28:47,389 --> 00:28:51,439
<font color="#E5E5E5">running hypervisor and continuously</font>

589
00:28:49,129 --> 00:28:53,299
check the<font color="#CCCCCC"> kernel</font><font color="#E5E5E5"> page tables</font><font color="#CCCCCC"> I think it</font>

590
00:28:51,440 --> 00:29:04,489
may<font color="#E5E5E5"> be a performance reasons or is it</font>

591
00:28:53,299 --> 00:29:08,179
did<font color="#E5E5E5"> not edit</font><font color="#CCCCCC"> it yet if you understand</font><font color="#E5E5E5"> it</font>

592
00:29:04,489 --> 00:29:11,209
like in like more detail it<font color="#E5E5E5"> exploitation</font>

593
00:29:08,179 --> 00:29:13,190
please refer to<font color="#CCCCCC"> a white paper</font><font color="#E5E5E5"> how to</font>

594
00:29:11,209 --> 00:29:16,579
exploit all<font color="#CCCCCC"> the vernal abilities that I</font>

595
00:29:13,190 --> 00:29:18,049
<font color="#E5E5E5">just</font><font color="#CCCCCC"> mentioned and like there is a one</font>

596
00:29:16,579 --> 00:29:20,928
<font color="#E5E5E5">of the first version of this talk which</font>

597
00:29:18,049 --> 00:29:23,899
<font color="#E5E5E5">was more detail it in a way how I</font><font color="#CCCCCC"> dumped</font>

598
00:29:20,929 --> 00:29:27,889
the table by<font color="#E5E5E5"> 4 bytes</font><font color="#CCCCCC"> so yeah you</font><font color="#E5E5E5"> can</font>

599
00:29:23,899 --> 00:29:30,129
reference<font color="#E5E5E5"> it</font><font color="#CCCCCC"> to if not other questions I</font>

600
00:29:27,889 --> 00:29:33,198
<font color="#CCCCCC">think</font><font color="#E5E5E5"> I think we're done thank you</font>

601
00:29:30,130 --> 00:29:33,199
[Music]

