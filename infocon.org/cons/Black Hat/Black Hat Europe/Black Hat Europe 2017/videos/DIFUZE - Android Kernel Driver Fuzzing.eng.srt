1
00:00:00,030 --> 00:00:04,470
so yeah so this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the fuse Android</font>

2
00:00:02,399 --> 00:00:07,230
kernel driver fuzzing<font color="#E5E5E5"> my name is</font><font color="#CCCCCC"> jake</font>

3
00:00:04,470 --> 00:00:08,670
<font color="#CCCCCC">karena i am a recent</font><font color="#E5E5E5"> graduate of the</font>

4
00:00:07,230 --> 00:00:10,980
master's program<font color="#CCCCCC"> at University of</font>

5
00:00:08,670 --> 00:00:14,670
<font color="#CCCCCC">California at Santa Barbara and I'm on</font>

6
00:00:10,980 --> 00:00:17,130
<font color="#CCCCCC">the team shellfish</font><font color="#E5E5E5"> and I'm Chris and</font><font color="#CCCCCC"> I'm</font>

7
00:00:14,670 --> 00:00:19,410
Chris<font color="#CCCCCC"> soules</font><font color="#E5E5E5"> I'm also I'm currently a</font>

8
00:00:17,130 --> 00:00:23,430
<font color="#CCCCCC">PhD sterday at UC Santa Barbara and also</font>

9
00:00:19,410 --> 00:00:25,289
on the team shellfish<font color="#CCCCCC"> all</font><font color="#E5E5E5"> right so this</font>

10
00:00:23,430 --> 00:00:26,430
<font color="#E5E5E5">is the first talk</font><font color="#CCCCCC"> of ever</font><font color="#E5E5E5"> given so if I</font>

11
00:00:25,289 --> 00:00:31,019
seem like<font color="#E5E5E5"> incredibly nervous or</font><font color="#CCCCCC"> anything</font>

12
00:00:26,430 --> 00:00:32,430
it's<font color="#CCCCCC"> just because I am so before I</font>

13
00:00:31,019 --> 00:00:34,410
actually talked about<font color="#E5E5E5"> the fuse our</font>

14
00:00:32,430 --> 00:00:35,430
system<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> gonna go through actually a</font>

15
00:00:34,410 --> 00:00:37,260
decent<font color="#CCCCCC"> amount of</font><font color="#E5E5E5"> background information</font>

16
00:00:35,430 --> 00:00:39,360
<font color="#E5E5E5">because I want everybody to understand</font>

17
00:00:37,260 --> 00:00:41,760
<font color="#E5E5E5">that the problem the fee</font><font color="#CCCCCC"> were</font><font color="#E5E5E5"> just</font>

18
00:00:39,360 --> 00:00:44,430
trying<font color="#E5E5E5"> to it solve for some of you and</font>

19
00:00:41,760 --> 00:00:46,110
this may<font color="#E5E5E5"> be already known</font><font color="#CCCCCC"> if so I</font>

20
00:00:44,430 --> 00:00:50,190
apologize just bear with<font color="#E5E5E5"> me a bit in the</font>

21
00:00:46,110 --> 00:00:51,750
<font color="#CCCCCC">beginning here</font><font color="#E5E5E5"> okay so hopefully you</font>

22
00:00:50,190 --> 00:00:53,879
<font color="#CCCCCC">have at least some familiarity</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> the</font>

23
00:00:51,750 --> 00:00:55,260
Linux kernel<font color="#CCCCCC"> but the general point</font><font color="#E5E5E5"> here</font>

24
00:00:53,879 --> 00:00:57,780
is<font color="#CCCCCC"> that we have the separation</font><font color="#E5E5E5"> between</font>

25
00:00:55,260 --> 00:01:00,269
user space and<font color="#E5E5E5"> kernel space</font><font color="#CCCCCC"> kernel space</font>

26
00:00:57,780 --> 00:01:03,090
<font color="#E5E5E5">being more privileged and the interface</font>

27
00:01:00,270 --> 00:01:04,710
between the<font color="#CCCCCC"> two</font><font color="#E5E5E5"> is system calls</font><font color="#CCCCCC"> the</font>

28
00:01:03,090 --> 00:01:05,549
kernel<font color="#E5E5E5"> takes care of a lot</font><font color="#CCCCCC"> of different</font>

29
00:01:04,709 --> 00:01:07,439
stuff for us

30
00:01:05,549 --> 00:01:10,260
things like<font color="#CCCCCC"> Process Management</font><font color="#E5E5E5"> memory</font>

31
00:01:07,439 --> 00:01:13,259
management<font color="#CCCCCC"> file systems</font><font color="#E5E5E5"> device control</font>

32
00:01:10,260 --> 00:01:15,119
etc<font color="#E5E5E5"> so for</font><font color="#CCCCCC"> the purposes of</font><font color="#E5E5E5"> this talk</font>

33
00:01:13,260 --> 00:01:17,850
we're<font color="#E5E5E5"> going to be focusing on device</font>

34
00:01:15,119 --> 00:01:20,009
control<font color="#CCCCCC"> another thing to note is that</font>

35
00:01:17,850 --> 00:01:22,500
the Linux<font color="#E5E5E5"> kernel is a monolithic</font>

36
00:01:20,009 --> 00:01:24,810
<font color="#E5E5E5">architecture which for our purposes</font><font color="#CCCCCC"> just</font>

37
00:01:22,500 --> 00:01:26,670
means things like<font color="#E5E5E5"> device control</font><font color="#CCCCCC"> it has</font>

38
00:01:24,810 --> 00:01:27,750
the same privilege level as like

39
00:01:26,670 --> 00:01:29,880
anything else running in the kernel

40
00:01:27,750 --> 00:01:32,520
which obviously has<font color="#E5E5E5"> security</font>

41
00:01:29,880 --> 00:01:34,140
implications as<font color="#CCCCCC"> well see and so yeah</font><font color="#E5E5E5"> so</font>

42
00:01:32,520 --> 00:01:35,820
device handling is done in the kernel

43
00:01:34,140 --> 00:01:39,150
and how does<font color="#E5E5E5"> that happen</font>

44
00:01:35,820 --> 00:01:41,039
so it's controlled by things<font color="#E5E5E5"> called</font>

45
00:01:39,150 --> 00:01:44,549
device drivers which are generally

46
00:01:41,040 --> 00:01:45,750
implemented<font color="#E5E5E5"> as Linux kernel modules</font><font color="#CCCCCC"> and</font>

47
00:01:44,549 --> 00:01:47,220
they have to have<font color="#CCCCCC"> some interface that</font>

48
00:01:45,750 --> 00:01:50,009
they export<font color="#E5E5E5"> the usual Android so if you</font>

49
00:01:47,220 --> 00:01:51,210
have some usual<font color="#CCCCCC"> and program</font><font color="#E5E5E5"> that wants</font>

50
00:01:50,009 --> 00:01:53,399
<font color="#CCCCCC">to</font><font color="#E5E5E5"> use like the microphone to record</font>

51
00:01:51,210 --> 00:01:55,229
<font color="#E5E5E5">audio</font><font color="#CCCCCC"> it has to have some way to ask the</font>

52
00:01:53,399 --> 00:01:57,659
<font color="#E5E5E5">driver like cake and</font><font color="#CCCCCC"> you can you help</font><font color="#E5E5E5"> me</font>

53
00:01:55,229 --> 00:01:59,219
talk to the<font color="#CCCCCC"> microphone and as you might</font>

54
00:01:57,659 --> 00:02:01,469
expect this is the same as the standard

55
00:01:59,219 --> 00:02:05,100
<font color="#E5E5E5">interface which we just said with system</font>

56
00:02:01,469 --> 00:02:06,630
calls and so how do you do that so<font color="#CCCCCC"> in</font>

57
00:02:05,100 --> 00:02:07,469
UNIX we have this notion that<font color="#E5E5E5"> like</font>

58
00:02:06,630 --> 00:02:10,049
<font color="#E5E5E5">everything is a file</font>

59
00:02:07,469 --> 00:02:12,239
and the same holds<font color="#CCCCCC"> true for</font>

60
00:02:10,050 --> 00:02:14,490
devices<font color="#E5E5E5"> so it's kind of weird</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> think</font>

61
00:02:12,240 --> 00:02:18,150
about<font color="#E5E5E5"> but</font><font color="#CCCCCC"> to some degree like the</font>

62
00:02:14,490 --> 00:02:20,520
<font color="#E5E5E5">microphone is going to be modeled as a</font>

63
00:02:18,150 --> 00:02:23,820
file on<font color="#CCCCCC"> our system</font><font color="#E5E5E5"> it's a special device</font>

64
00:02:20,520 --> 00:02:24,870
<font color="#E5E5E5">file on disk so that's still kind of</font>

65
00:02:23,820 --> 00:02:26,670
<font color="#CCCCCC">weird to think</font><font color="#E5E5E5"> about because it's like</font>

66
00:02:24,870 --> 00:02:27,900
<font color="#E5E5E5">okay now I have this special file on</font>

67
00:02:26,670 --> 00:02:30,059
disk and<font color="#E5E5E5"> that's supposed to be like</font>

68
00:02:27,900 --> 00:02:32,670
<font color="#E5E5E5">representing my microphone how do I eat</font>

69
00:02:30,060 --> 00:02:34,950
talk to it so before<font color="#CCCCCC"> we get into that</font>

70
00:02:32,670 --> 00:02:38,190
let's look<font color="#CCCCCC"> just like generally at</font>

71
00:02:34,950 --> 00:02:39,359
operations on files<font color="#E5E5E5"> already done</font><font color="#CCCCCC"> if you</font>

72
00:02:38,190 --> 00:02:40,980
consider the case for like a<font color="#E5E5E5"> quote</font>

73
00:02:39,360 --> 00:02:42,900
<font color="#E5E5E5">unquote</font><font color="#CCCCCC"> normal</font><font color="#E5E5E5"> file so if you do like</font>

74
00:02:40,980 --> 00:02:45,090
<font color="#E5E5E5">touch foo on your command</font><font color="#CCCCCC"> line right and</font>

75
00:02:42,900 --> 00:02:46,320
it creates<font color="#E5E5E5"> like some empty file</font><font color="#CCCCCC"> today</font>

76
00:02:45,090 --> 00:02:49,440
we're talking about Linux it's probably

77
00:02:46,320 --> 00:02:51,690
an<font color="#E5E5E5"> ext4 file</font><font color="#CCCCCC"> right now if you think</font>

78
00:02:49,440 --> 00:02:53,070
<font color="#E5E5E5">about</font><font color="#CCCCCC"> some common sis calls that you can</font>

79
00:02:51,690 --> 00:02:54,930
use to then<font color="#E5E5E5"> communicate with this file</font>

80
00:02:53,070 --> 00:02:56,070
and<font color="#E5E5E5"> operate on it things like open read</font>

81
00:02:54,930 --> 00:02:58,470
and write

82
00:02:56,070 --> 00:03:01,140
how do those know that this file that

83
00:02:58,470 --> 00:03:02,970
you're dealing<font color="#E5E5E5"> with is in ext4 file in</font>

84
00:03:01,140 --> 00:03:05,429
particular<font color="#CCCCCC"> right how</font><font color="#E5E5E5"> does it handle that</font>

85
00:03:02,970 --> 00:03:08,280
so to handle<font color="#E5E5E5"> that we have a thing called</font>

86
00:03:05,430 --> 00:03:11,280
this<font color="#E5E5E5"> file operation structure or flops</font>

87
00:03:08,280 --> 00:03:13,980
or<font color="#CCCCCC"> fo</font><font color="#E5E5E5"> hops for short and it has a name</font>

88
00:03:11,280 --> 00:03:15,300
<font color="#CCCCCC">its name kind of implies</font><font color="#E5E5E5"> it's there to</font>

89
00:03:13,980 --> 00:03:17,670
define like<font color="#CCCCCC"> okay give it a particular</font>

90
00:03:15,300 --> 00:03:21,450
<font color="#E5E5E5">type of file how do I handle</font><font color="#CCCCCC"> the</font>

91
00:03:17,670 --> 00:03:24,329
<font color="#CCCCCC">operations for that file</font><font color="#E5E5E5"> so keeping with</font>

92
00:03:21,450 --> 00:03:27,060
<font color="#CCCCCC">our</font><font color="#E5E5E5"> example I</font><font color="#CCCCCC"> just said in xt4</font><font color="#E5E5E5"> file so</font>

93
00:03:24,330 --> 00:03:30,239
here<font color="#CCCCCC"> is the code in the Linux kernel</font><font color="#E5E5E5"> for</font>

94
00:03:27,060 --> 00:03:31,590
the ext4 file operation struct so

95
00:03:30,239 --> 00:03:33,480
<font color="#E5E5E5">anytime you interact with this file like</font>

96
00:03:31,590 --> 00:03:35,459
if we go and call open on this<font color="#E5E5E5"> foo file</font>

97
00:03:33,480 --> 00:03:37,170
we've just created<font color="#CCCCCC"> it's actually gonna</font>

98
00:03:35,459 --> 00:03:39,209
go<font color="#E5E5E5"> down</font><font color="#CCCCCC"> here like down to the second</font>

99
00:03:37,170 --> 00:03:41,250
from the<font color="#CCCCCC"> bottom it's gonna say</font><font color="#E5E5E5"> okay I'm</font>

100
00:03:39,209 --> 00:03:43,980
calling<font color="#CCCCCC"> that open on this ext4 file and</font>

101
00:03:41,250 --> 00:03:47,100
it's gonna route execution to ext4 file

102
00:03:43,980 --> 00:03:49,140
open<font color="#E5E5E5"> so that's a specific function to</font>

103
00:03:47,100 --> 00:03:52,290
open<font color="#CCCCCC"> ext</font><font color="#E5E5E5"> for files and so that's how</font>

104
00:03:49,140 --> 00:03:54,480
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is done we'll see this</font><font color="#E5E5E5"> is kind of</font>

105
00:03:52,290 --> 00:03:57,870
similar<font color="#E5E5E5"> or exactly similar to how it's</font>

106
00:03:54,480 --> 00:03:59,549
done<font color="#CCCCCC"> for device files so now that we</font>

107
00:03:57,870 --> 00:04:00,950
understand like you know a normal<font color="#CCCCCC"> file</font>

108
00:03:59,550 --> 00:04:05,280
<font color="#E5E5E5">let's let's go back</font><font color="#CCCCCC"> and talk about</font>

109
00:04:00,950 --> 00:04:06,839
device files so as we said device

110
00:04:05,280 --> 00:04:09,330
drivers<font color="#CCCCCC"> are generally gonna</font><font color="#E5E5E5"> create some</font>

111
00:04:06,840 --> 00:04:11,880
special<font color="#E5E5E5"> file on disk to represent the</font>

112
00:04:09,330 --> 00:04:14,280
<font color="#E5E5E5">physical device that they're driving</font><font color="#CCCCCC"> and</font>

113
00:04:11,880 --> 00:04:16,620
how is this done<font color="#E5E5E5"> so I want to give you</font>

114
00:04:14,280 --> 00:04:18,930
some intuition<font color="#E5E5E5"> for like</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> given like</font>

115
00:04:16,620 --> 00:04:20,250
a registration<font color="#CCCCCC"> function for a driver you</font>

116
00:04:18,930 --> 00:04:21,720
know how is<font color="#CCCCCC"> it creating the file and</font>

117
00:04:20,250 --> 00:04:22,630
<font color="#E5E5E5">where is this file operation structure</font>

118
00:04:21,720 --> 00:04:24,100
coming<font color="#E5E5E5"> into play</font>

119
00:04:22,630 --> 00:04:28,450
right so I'm going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> briefly kind of</font>

120
00:04:24,100 --> 00:04:30,400
walk you through some code here<font color="#CCCCCC"> this is</font>

121
00:04:28,450 --> 00:04:31,920
the registration function<font color="#E5E5E5"> for an isp</font>

122
00:04:30,400 --> 00:04:34,179
device that's image signal processor

123
00:04:31,920 --> 00:04:37,270
<font color="#CCCCCC">this is it's like a camera this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> a</font>

124
00:04:34,180 --> 00:04:38,620
camera a device on<font color="#E5E5E5"> a</font><font color="#CCCCCC"> mediatek phone I'm</font>

125
00:04:37,270 --> 00:04:40,719
just<font color="#CCCCCC"> going to point</font><font color="#E5E5E5"> out and walk you</font>

126
00:04:38,620 --> 00:04:41,800
<font color="#CCCCCC">through some of some of the relevant</font>

127
00:04:40,720 --> 00:04:44,890
<font color="#E5E5E5">functions here</font>

128
00:04:41,800 --> 00:04:46,000
the first being<font color="#CCCCCC"> alec char dev region so</font>

129
00:04:44,890 --> 00:04:47,590
what this function is doing is it's

130
00:04:46,000 --> 00:04:50,590
saying<font color="#E5E5E5"> like hey I am creating a</font><font color="#CCCCCC"> new</font>

131
00:04:47,590 --> 00:04:52,690
character device<font color="#CCCCCC"> I need you to allocate</font>

132
00:04:50,590 --> 00:04:54,520
me like a range of device numbers for my

133
00:04:52,690 --> 00:04:56,469
device<font color="#CCCCCC"> and it's</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to place them in</font>

134
00:04:54,520 --> 00:04:59,620
<font color="#CCCCCC">ISP def</font><font color="#E5E5E5"> know that variable I have box</font>

135
00:04:56,470 --> 00:05:01,300
there<font color="#E5E5E5"> and furthermore this range that</font>

136
00:04:59,620 --> 00:05:03,310
<font color="#CCCCCC">you allocate</font><font color="#E5E5E5"> to me I want you to</font>

137
00:05:01,300 --> 00:05:06,010
associate<font color="#E5E5E5"> it with this is P dev</font><font color="#CCCCCC"> named</font>

138
00:05:03,310 --> 00:05:08,170
<font color="#E5E5E5">variable which happens to be pound to</font>

139
00:05:06,010 --> 00:05:12,010
find it's<font color="#CCCCCC"> just a string it's camera -</font>

140
00:05:08,170 --> 00:05:14,710
<font color="#CCCCCC">ISP okay</font><font color="#E5E5E5"> so next now now we've allocated</font>

141
00:05:12,010 --> 00:05:16,780
our device region for a device<font color="#E5E5E5"> now we're</font>

142
00:05:14,710 --> 00:05:18,760
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> call C dev in it so it's</font>

143
00:05:16,780 --> 00:05:21,549
initializing<font color="#CCCCCC"> our device and what's it</font>

144
00:05:18,760 --> 00:05:24,099
initializing it with<font color="#E5E5E5"> an isp file</font><font color="#CCCCCC"> opera</font>

145
00:05:21,550 --> 00:05:25,870
<font color="#E5E5E5">that's the variable</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> is of type file</font>

146
00:05:24,100 --> 00:05:27,550
<font color="#CCCCCC">operations</font><font color="#E5E5E5"> so good so now we have some</font>

147
00:05:25,870 --> 00:05:29,470
familiarity there<font color="#E5E5E5"> we just talked about</font>

148
00:05:27,550 --> 00:05:31,260
<font color="#CCCCCC">those and I'll actually come</font><font color="#E5E5E5"> back</font><font color="#CCCCCC"> to</font>

149
00:05:29,470 --> 00:05:34,090
<font color="#CCCCCC">this</font><font color="#E5E5E5"> particular variable and show you</font>

150
00:05:31,260 --> 00:05:36,969
what it looks like<font color="#CCCCCC"> but</font><font color="#E5E5E5"> for now let's</font>

151
00:05:34,090 --> 00:05:40,630
finish our device registration<font color="#E5E5E5"> with C</font>

152
00:05:36,970 --> 00:05:42,820
device<font color="#CCCCCC"> ad so we've allocated</font><font color="#E5E5E5"> the range</font>

153
00:05:40,630 --> 00:05:45,730
for a device we've initialized it with

154
00:05:42,820 --> 00:05:47,530
file<font color="#E5E5E5"> operation structure</font><font color="#CCCCCC"> and now we want</font>

155
00:05:45,730 --> 00:05:50,140
to<font color="#E5E5E5"> add it to the system and so after</font>

156
00:05:47,530 --> 00:05:52,059
this point<font color="#CCCCCC"> the</font><font color="#E5E5E5"> device is like live you</font>

157
00:05:50,140 --> 00:05:54,219
could<font color="#E5E5E5"> say</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> so if you go and you look</font>

158
00:05:52,060 --> 00:05:57,310
in dev slash dev hopefully you can see

159
00:05:54,220 --> 00:05:59,350
<font color="#E5E5E5">that</font><font color="#CCCCCC"> and we grep for that name</font><font color="#E5E5E5"> that was</font>

160
00:05:57,310 --> 00:06:01,690
associated<font color="#E5E5E5"> with our device range we see</font>

161
00:05:59,350 --> 00:06:03,220
a file there now camera<font color="#CCCCCC"> ISP so great</font>

162
00:06:01,690 --> 00:06:04,930
<font color="#E5E5E5">excellent</font><font color="#CCCCCC"> and you can also notice</font>

163
00:06:03,220 --> 00:06:07,000
<font color="#CCCCCC">actually on the far left</font><font color="#E5E5E5"> in the file</font>

164
00:06:04,930 --> 00:06:08,380
attributes<font color="#E5E5E5"> that little lowercase C is</font>

165
00:06:07,000 --> 00:06:10,180
telling you hey<font color="#CCCCCC"> this isn't</font><font color="#E5E5E5"> a normal file</font>

166
00:06:08,380 --> 00:06:12,640
<font color="#E5E5E5">this is like this is a character advice</font>

167
00:06:10,180 --> 00:06:14,380
<font color="#E5E5E5">all right so that's how you know now if</font>

168
00:06:12,640 --> 00:06:16,270
we go and<font color="#E5E5E5"> call open on this where is</font>

169
00:06:14,380 --> 00:06:17,650
this call gonna get routed<font color="#E5E5E5"> well we saw</font>

170
00:06:16,270 --> 00:06:19,900
<font color="#E5E5E5">it was initialized with this file</font>

171
00:06:17,650 --> 00:06:23,320
operation struct so let's take a look<font color="#E5E5E5"> at</font>

172
00:06:19,900 --> 00:06:25,179
that and here it is<font color="#E5E5E5"> so what</font><font color="#CCCCCC"> were the</font>

173
00:06:23,320 --> 00:06:26,800
<font color="#E5E5E5">first things you may notice is it's a</font>

174
00:06:25,180 --> 00:06:29,770
lot smaller<font color="#CCCCCC"> than</font><font color="#E5E5E5"> the ext4 file</font>

175
00:06:26,800 --> 00:06:31,270
operations<font color="#CCCCCC"> that's fine you don't have to</font>

176
00:06:29,770 --> 00:06:33,849
<font color="#E5E5E5">define every single operation for your</font>

177
00:06:31,270 --> 00:06:35,260
file<font color="#CCCCCC"> in fact it may not make sense right</font>

178
00:06:33,850 --> 00:06:36,000
<font color="#CCCCCC">so we said this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> like a camera device</font>

179
00:06:35,260 --> 00:06:37,500
<font color="#E5E5E5">what</font>

180
00:06:36,000 --> 00:06:40,470
mean if<font color="#E5E5E5"> you're like writing to a camera</font>

181
00:06:37,500 --> 00:06:43,050
<font color="#E5E5E5">that it may not make sense</font><font color="#CCCCCC"> however open</font>

182
00:06:40,470 --> 00:06:44,850
we see routes<font color="#E5E5E5"> to</font><font color="#CCCCCC"> ISP open and another</font>

183
00:06:43,050 --> 00:06:47,340
<font color="#E5E5E5">one here</font><font color="#CCCCCC"> that maybe not everybody</font><font color="#E5E5E5"> is</font>

184
00:06:44,850 --> 00:06:50,130
familiar with<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a octal or the field is</font>

185
00:06:47,340 --> 00:06:52,560
called<font color="#CCCCCC"> unlocked</font><font color="#E5E5E5"> by octal so I will</font>

186
00:06:50,130 --> 00:06:55,140
briefly<font color="#CCCCCC"> introduce what that is i'ope</font>

187
00:06:52,560 --> 00:06:57,000
<font color="#CCCCCC">toll</font><font color="#E5E5E5"> or iOS ETL some people graham so</font>

188
00:06:55,140 --> 00:07:00,030
that way<font color="#CCCCCC"> it stands for input/output</font>

189
00:06:57,000 --> 00:07:01,950
<font color="#E5E5E5">control and it's basically just a system</font>

190
00:07:00,030 --> 00:07:03,690
call<font color="#E5E5E5"> to allow device operations that</font>

191
00:07:01,950 --> 00:07:06,060
aren't well<font color="#E5E5E5"> modeled as like a normal</font>

192
00:07:03,690 --> 00:07:07,920
<font color="#CCCCCC">Cisco so what do</font><font color="#E5E5E5"> I mean</font><font color="#CCCCCC"> by that so</font>

193
00:07:06,060 --> 00:07:10,050
imagine you<font color="#CCCCCC"> have some audio device</font><font color="#E5E5E5"> right</font>

194
00:07:07,920 --> 00:07:11,700
and maybe<font color="#E5E5E5"> it makes sense</font><font color="#CCCCCC"> that if you're</font>

195
00:07:10,050 --> 00:07:13,710
<font color="#CCCCCC">reading from that</font><font color="#E5E5E5"> device is special file</font>

196
00:07:11,700 --> 00:07:15,270
<font color="#E5E5E5">maybe you're reading in like data from</font>

197
00:07:13,710 --> 00:07:16,349
the microphone and maybe if<font color="#E5E5E5"> you're</font>

198
00:07:15,270 --> 00:07:18,000
writing<font color="#E5E5E5"> to that file</font>

199
00:07:16,350 --> 00:07:20,160
<font color="#E5E5E5">maybe it's writing data out to the</font>

200
00:07:18,000 --> 00:07:21,810
<font color="#E5E5E5">speakers but</font><font color="#CCCCCC"> you know what happens when</font>

201
00:07:20,160 --> 00:07:22,020
<font color="#E5E5E5">you want to like</font><font color="#CCCCCC"> change the</font><font color="#E5E5E5"> sampling</font>

202
00:07:21,810 --> 00:07:23,700
rate

203
00:07:22,020 --> 00:07:25,169
<font color="#E5E5E5">there's not really a Cisco law for that</font>

204
00:07:23,700 --> 00:07:26,849
right and<font color="#E5E5E5"> this is where I octo comes in</font>

205
00:07:25,169 --> 00:07:28,349
it's just<font color="#CCCCCC"> kind of a catch-all</font><font color="#E5E5E5"> for like</font>

206
00:07:26,850 --> 00:07:30,630
any kind<font color="#E5E5E5"> of feature or functionality</font>

207
00:07:28,350 --> 00:07:35,400
<font color="#E5E5E5">that doesn't fit well for normal</font><font color="#CCCCCC"> sis</font>

208
00:07:30,630 --> 00:07:36,480
<font color="#CCCCCC">calls</font><font color="#E5E5E5"> so from what I've just said</font><font color="#CCCCCC"> one</font>

209
00:07:35,400 --> 00:07:38,099
<font color="#E5E5E5">really important thing I want everybody</font>

210
00:07:36,480 --> 00:07:40,410
to note is that we said these device

211
00:07:38,100 --> 00:07:41,940
drivers are modular<font color="#E5E5E5"> by definition right</font>

212
00:07:40,410 --> 00:07:43,800
they're<font color="#CCCCCC"> linux kernel modules more often</font>

213
00:07:41,940 --> 00:07:45,530
than not<font color="#E5E5E5"> and this is very nice</font><font color="#CCCCCC"> for</font>

214
00:07:43,800 --> 00:07:47,760
<font color="#E5E5E5">vendors because you have these vendors</font>

215
00:07:45,530 --> 00:07:49,950
that<font color="#E5E5E5"> are adding all this hardware</font><font color="#CCCCCC"> and</font>

216
00:07:47,760 --> 00:07:53,010
<font color="#CCCCCC">now they can they can add support for</font>

217
00:07:49,950 --> 00:07:54,960
<font color="#E5E5E5">themselves</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> software on the other hand</font>

218
00:07:53,010 --> 00:07:57,000
we said due to the<font color="#E5E5E5"> monolithic</font>

219
00:07:54,960 --> 00:07:59,010
architecture<font color="#E5E5E5"> but the code that these</font>

220
00:07:57,000 --> 00:08:00,330
vendors are adding is essentially

221
00:07:59,010 --> 00:08:02,849
running at the same privilege level as

222
00:08:00,330 --> 00:08:05,280
like mainline kernel code<font color="#E5E5E5"> which is kind</font>

223
00:08:02,850 --> 00:08:07,800
of<font color="#E5E5E5"> very scary</font><font color="#CCCCCC"> there's a lot of security</font>

224
00:08:05,280 --> 00:08:09,750
implications there right<font color="#CCCCCC"> and this issue</font>

225
00:08:07,800 --> 00:08:11,729
<font color="#E5E5E5">or what I'm you know telling you is an</font>

226
00:08:09,750 --> 00:08:16,320
issue where is it especially<font color="#E5E5E5"> prevalent</font>

227
00:08:11,729 --> 00:08:18,150
<font color="#E5E5E5">in</font><font color="#CCCCCC"> Android as it turns</font><font color="#E5E5E5"> out so</font><font color="#CCCCCC"> Android is</font>

228
00:08:16,320 --> 00:08:20,669
based on Linux it's<font color="#E5E5E5"> currently dominating</font>

229
00:08:18,150 --> 00:08:23,130
the smartphone OS<font color="#E5E5E5"> market</font><font color="#CCCCCC"> and why is it</font>

230
00:08:20,669 --> 00:08:24,479
<font color="#E5E5E5">especially prevalent here</font><font color="#CCCCCC"> if you</font><font color="#E5E5E5"> think</font>

231
00:08:23,130 --> 00:08:26,669
about like your average modern

232
00:08:24,479 --> 00:08:29,789
smartphone it probably has like a back

233
00:08:26,669 --> 00:08:31,919
camera a front camera<font color="#E5E5E5"> NFC chip Bluetooth</font>

234
00:08:29,790 --> 00:08:33,770
chip Wi-Fi chip you know gyro sensors

235
00:08:31,919 --> 00:08:36,299
<font color="#CCCCCC">touchscreen</font><font color="#E5E5E5"> tons and tons of hardware</font>

236
00:08:33,770 --> 00:08:37,679
<font color="#CCCCCC">and</font><font color="#E5E5E5"> whatever you need to</font><font color="#CCCCCC"> drive all that</font>

237
00:08:36,299 --> 00:08:39,900
<font color="#CCCCCC">hardware you need</font><font color="#E5E5E5"> you need device</font>

238
00:08:37,679 --> 00:08:41,459
drivers so it's a big<font color="#CCCCCC"> problem on like</font>

239
00:08:39,900 --> 00:08:43,799
<font color="#CCCCCC">smartphones and we're looking at Android</font>

240
00:08:41,460 --> 00:08:45,660
in particular and<font color="#E5E5E5"> so maybe at this point</font>

241
00:08:43,799 --> 00:08:47,880
<font color="#CCCCCC">you're saying</font><font color="#E5E5E5"> are you know fine whatever</font>

242
00:08:45,660 --> 00:08:49,500
<font color="#CCCCCC">our drivers are</font><font color="#E5E5E5"> they really an issue so</font>

243
00:08:47,880 --> 00:08:49,860
I say I say yes they are but<font color="#CCCCCC"> you don't</font>

244
00:08:49,500 --> 00:08:51,779
<font color="#CCCCCC">have to</font>

245
00:08:49,860 --> 00:08:53,160
<font color="#CCCCCC">believe me this is a slide taken from</font>

246
00:08:51,779 --> 00:08:55,439
<font color="#CCCCCC">jeffrey van der</font><font color="#E5E5E5"> scope of android</font>

247
00:08:53,160 --> 00:08:57,029
<font color="#CCCCCC">security and what he has here is he has</font>

248
00:08:55,440 --> 00:08:59,510
all these bugs<font color="#E5E5E5"> all these Android kernel</font>

249
00:08:57,029 --> 00:09:03,000
bugs collected from January 2014<font color="#CCCCCC"> to</font>

250
00:08:59,510 --> 00:09:05,220
<font color="#CCCCCC">April 2016 and</font><font color="#E5E5E5"> already show is is that</font>

251
00:09:03,000 --> 00:09:07,860
<font color="#E5E5E5">85% of them are coming from vendor</font>

252
00:09:05,220 --> 00:09:11,490
drivers so yes so<font color="#CCCCCC"> so</font><font color="#E5E5E5"> drivers</font><font color="#CCCCCC"> are very</font>

253
00:09:07,860 --> 00:09:12,720
much a problem<font color="#CCCCCC"> diner drivers maybe are</font>

254
00:09:11,490 --> 00:09:13,890
wondering like what you know why what's

255
00:09:12,720 --> 00:09:16,410
the big<font color="#E5E5E5"> deal why are these vendor</font>

256
00:09:13,890 --> 00:09:18,959
drivers<font color="#E5E5E5"> why are they so pad like what's</font>

257
00:09:16,410 --> 00:09:20,310
going on here<font color="#CCCCCC"> we saw that</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> know I</font>

258
00:09:18,959 --> 00:09:21,839
showed<font color="#E5E5E5"> you the file</font><font color="#CCCCCC"> operation structure</font>

259
00:09:20,310 --> 00:09:24,060
it seems to be a fairly like

260
00:09:21,839 --> 00:09:25,769
<font color="#E5E5E5">well-defined clear interface you know</font>

261
00:09:24,060 --> 00:09:27,959
like open<font color="#E5E5E5"> read and write</font><font color="#CCCCCC"> seem like they</font>

262
00:09:25,769 --> 00:09:29,370
<font color="#CCCCCC">should be</font><font color="#E5E5E5"> fairly straightforward</font><font color="#CCCCCC"> you</font>

263
00:09:27,959 --> 00:09:32,219
know is anyone syscall in particular

264
00:09:29,370 --> 00:09:34,140
causing all these problems<font color="#CCCCCC"> and as it</font>

265
00:09:32,220 --> 00:09:36,690
turns out as again a slide from<font color="#E5E5E5"> Jeffrey</font>

266
00:09:34,140 --> 00:09:39,959
<font color="#CCCCCC">Bandar soap yes</font><font color="#E5E5E5"> so with the same data</font>

267
00:09:36,690 --> 00:09:42,990
<font color="#CCCCCC">set he shows that 63% of</font><font color="#E5E5E5"> these kernel</font>

268
00:09:39,959 --> 00:09:46,050
bugs are being reached via<font color="#CCCCCC"> a octal so</font><font color="#E5E5E5"> I</font>

269
00:09:42,990 --> 00:09:48,029
octal is<font color="#CCCCCC"> a huge problem</font><font color="#E5E5E5"> here so you know</font>

270
00:09:46,050 --> 00:09:49,979
<font color="#E5E5E5">with this said it's probably prudent</font>

271
00:09:48,029 --> 00:09:52,170
<font color="#CCCCCC">let's go back and</font><font color="#E5E5E5"> take a more in-depth</font>

272
00:09:49,980 --> 00:09:54,440
<font color="#CCCCCC">look at</font><font color="#E5E5E5"> i/o</font><font color="#CCCCCC"> dolls and</font><font color="#E5E5E5"> let's get a sense</font>

273
00:09:52,170 --> 00:09:57,599
<font color="#E5E5E5">of why they're causing so many problems</font>

274
00:09:54,440 --> 00:09:59,850
<font color="#E5E5E5">so this is the prototype</font><font color="#CCCCCC"> for a octal has</font>

275
00:09:57,600 --> 00:10:01,260
three arguments first ones in<font color="#CCCCCC"> MFD so</font>

276
00:09:59,850 --> 00:10:02,990
this would be a file descriptor to the

277
00:10:01,260 --> 00:10:07,350
special device that you're talking<font color="#E5E5E5"> to</font>

278
00:10:02,990 --> 00:10:09,180
<font color="#CCCCCC">next one</font><font color="#E5E5E5"> is command so</font><font color="#CCCCCC"> we said I</font><font color="#E5E5E5"> opted</font>

279
00:10:07,350 --> 00:10:10,680
<font color="#E5E5E5">was like a catch-all right that's</font>

280
00:10:09,180 --> 00:10:12,689
probably<font color="#E5E5E5"> encompassing more</font><font color="#CCCCCC"> than one</font>

281
00:10:10,680 --> 00:10:14,819
functionality the one I gave was like

282
00:10:12,690 --> 00:10:17,490
<font color="#E5E5E5">changing</font><font color="#CCCCCC"> the sampling</font><font color="#E5E5E5"> rate</font><font color="#CCCCCC"> maybe another</font>

283
00:10:14,820 --> 00:10:19,470
is like changing<font color="#CCCCCC"> the speaker volume</font><font color="#E5E5E5"> for</font>

284
00:10:17,490 --> 00:10:20,880
<font color="#CCCCCC">your audio device and so that's where</font>

285
00:10:19,470 --> 00:10:22,470
that's<font color="#E5E5E5"> where command comes into play</font><font color="#CCCCCC"> as</font>

286
00:10:20,880 --> 00:10:23,579
you say like<font color="#CCCCCC"> okay I want</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> change the</font>

287
00:10:22,470 --> 00:10:25,589
sampling<font color="#E5E5E5"> rate</font><font color="#CCCCCC"> err I</font><font color="#E5E5E5"> want to change the</font>

288
00:10:23,579 --> 00:10:28,680
speaker volume<font color="#CCCCCC"> and then the third and</font>

289
00:10:25,589 --> 00:10:30,750
<font color="#CCCCCC">final program there is</font><font color="#E5E5E5"> per am and that</font>

290
00:10:28,680 --> 00:10:32,310
then<font color="#CCCCCC"> is the data relating to</font><font color="#E5E5E5"> your</font>

291
00:10:30,750 --> 00:10:33,660
command<font color="#CCCCCC"> so for</font><font color="#E5E5E5"> example maybe your</font>

292
00:10:32,310 --> 00:10:35,040
command<font color="#E5E5E5"> would be like hey change speaker</font>

293
00:10:33,660 --> 00:10:36,689
volume<font color="#E5E5E5"> and your frame would be like</font>

294
00:10:35,040 --> 00:10:39,480
<font color="#E5E5E5">seven like I want the speaker volume to</font>

295
00:10:36,690 --> 00:10:41,610
<font color="#E5E5E5">be set to seven and actually more often</font>

296
00:10:39,480 --> 00:10:45,120
<font color="#E5E5E5">than not</font><font color="#CCCCCC"> I'll also say is that this per</font>

297
00:10:41,610 --> 00:10:49,199
am arguing<font color="#E5E5E5"> is generally a pointer to</font>

298
00:10:45,120 --> 00:10:51,480
data not<font color="#E5E5E5"> just</font><font color="#CCCCCC"> like an integer value</font><font color="#E5E5E5"> so</font>

299
00:10:49,199 --> 00:10:52,740
I'm also<font color="#E5E5E5"> going to show you an</font><font color="#CCCCCC"> example of</font>

300
00:10:51,480 --> 00:10:54,630
what an<font color="#CCCCCC"> IEEE</font><font color="#E5E5E5"> octal handler looks like</font>

301
00:10:52,740 --> 00:10:56,940
<font color="#E5E5E5">because they all follow roughly the same</font>

302
00:10:54,630 --> 00:10:59,310
kind of format so we're gonna look again

303
00:10:56,940 --> 00:11:01,860
at our same device<font color="#E5E5E5"> our</font><font color="#CCCCCC"> isp file</font>

304
00:10:59,310 --> 00:11:02,790
operations<font color="#CCCCCC"> and we can see here that isp</font>

305
00:11:01,860 --> 00:11:05,010
<font color="#CCCCCC">i octal is</font>

306
00:11:02,790 --> 00:11:07,140
the function for handling<font color="#E5E5E5"> cocktails and</font>

307
00:11:05,010 --> 00:11:09,000
that looks like<font color="#CCCCCC"> this</font><font color="#E5E5E5"> and again this is a</font>

308
00:11:07,140 --> 00:11:11,160
very very common<font color="#CCCCCC"> format that</font><font color="#E5E5E5"> you see for</font>

309
00:11:09,000 --> 00:11:13,560
<font color="#CCCCCC">I octal handlers you have some big</font>

310
00:11:11,160 --> 00:11:14,579
switch statement on the command and in

311
00:11:13,560 --> 00:11:16,920
<font color="#E5E5E5">different cases for different</font>

312
00:11:14,580 --> 00:11:19,410
functionality<font color="#CCCCCC"> you're offering so here we</font>

313
00:11:16,920 --> 00:11:23,430
see like<font color="#CCCCCC"> ISP read register ISP write</font>

314
00:11:19,410 --> 00:11:26,160
register<font color="#E5E5E5"> and ISP wait irq and also I've</font>

315
00:11:23,430 --> 00:11:28,140
pointed out with arrows<font color="#CCCCCC"> what's happening</font>

316
00:11:26,160 --> 00:11:30,150
in each of<font color="#CCCCCC"> these cases</font><font color="#E5E5E5"> it's calling copy</font>

317
00:11:28,140 --> 00:11:31,620
from user so very very briefly if you're

318
00:11:30,150 --> 00:11:33,510
not familiar copy from user<font color="#CCCCCC"> looks like</font>

319
00:11:31,620 --> 00:11:36,060
this<font color="#E5E5E5"> it's just a function to copy user</font>

320
00:11:33,510 --> 00:11:37,439
<font color="#E5E5E5">from user land into kernel and so that</font>

321
00:11:36,060 --> 00:11:39,630
the kernel<font color="#E5E5E5"> can like operate on it right</font>

322
00:11:37,440 --> 00:11:41,670
and what<font color="#E5E5E5"> this tell</font><font color="#CCCCCC"> me what</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font>

323
00:11:39,630 --> 00:11:43,439
telling us is that<font color="#E5E5E5"> yapper am is indeed</font>

324
00:11:41,670 --> 00:11:45,660
it's expecting it to be<font color="#E5E5E5"> a pointer</font><font color="#CCCCCC"> to</font>

325
00:11:43,440 --> 00:11:48,030
some<font color="#CCCCCC"> datatype right some struct type</font>

326
00:11:45,660 --> 00:11:51,000
actually<font color="#E5E5E5"> if you if</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> see and</font>

327
00:11:48,030 --> 00:11:52,470
another thing to note is that depending

328
00:11:51,000 --> 00:11:54,720
on<font color="#E5E5E5"> the case it's dealing with whatever</font>

329
00:11:52,470 --> 00:11:56,880
command you're giving it it changes<font color="#CCCCCC"> so</font>

330
00:11:54,720 --> 00:11:59,220
for the first<font color="#E5E5E5"> two</font><font color="#CCCCCC"> ISP read register and</font>

331
00:11:56,880 --> 00:12:02,580
<font color="#CCCCCC">ISP</font><font color="#E5E5E5"> write register it's expecting a</font>

332
00:11:59,220 --> 00:12:04,200
struct<font color="#CCCCCC"> of type ISP</font><font color="#E5E5E5"> reg</font><font color="#CCCCCC"> IO struct</font><font color="#E5E5E5"> well</font>

333
00:12:02,580 --> 00:12:06,180
then for<font color="#E5E5E5"> the third one down here is</font><font color="#CCCCCC"> P</font>

334
00:12:04,200 --> 00:12:07,770
<font color="#CCCCCC">weight</font><font color="#E5E5E5"> irq well now it's expecting that</font>

335
00:12:06,180 --> 00:12:10,680
you should have<font color="#E5E5E5"> given it a pointer</font><font color="#CCCCCC"> to an</font>

336
00:12:07,770 --> 00:12:12,449
<font color="#CCCCCC">isp weight</font><font color="#E5E5E5"> irq struct okay and so</font>

337
00:12:10,680 --> 00:12:15,630
hopefully<font color="#E5E5E5"> you can kind of see where the</font>

338
00:12:12,450 --> 00:12:17,610
problems<font color="#E5E5E5"> are now the first being</font><font color="#CCCCCC"> a octal</font>

339
00:12:15,630 --> 00:12:18,930
is a lot more functionality<font color="#CCCCCC"> than just</font>

340
00:12:17,610 --> 00:12:20,670
read it<font color="#CCCCCC"> right it has</font><font color="#E5E5E5"> to encompass like</font>

341
00:12:18,930 --> 00:12:23,310
anything that<font color="#CCCCCC"> doesn't fit anywhere else</font>

342
00:12:20,670 --> 00:12:25,290
<font color="#CCCCCC">so it's generally</font><font color="#E5E5E5"> a lot the other issue</font>

343
00:12:23,310 --> 00:12:28,109
is you're dealing<font color="#CCCCCC"> with user land data</font>

344
00:12:25,290 --> 00:12:29,760
which is always risky<font color="#E5E5E5"> and it's it's in</font>

345
00:12:28,110 --> 00:12:32,370
the form of<font color="#E5E5E5"> like some complex struct</font>

346
00:12:29,760 --> 00:12:34,140
<font color="#E5E5E5">okay so these two things combined it's</font>

347
00:12:32,370 --> 00:12:37,470
like a recipe for<font color="#CCCCCC"> disaster</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> this is</font>

348
00:12:34,140 --> 00:12:39,090
why<font color="#CCCCCC"> I octal is present such an issue and</font>

349
00:12:37,470 --> 00:12:41,130
so now element I've hopefully convinced

350
00:12:39,090 --> 00:12:44,370
you that<font color="#E5E5E5"> I octaves are an issue</font><font color="#CCCCCC"> what</font>

351
00:12:41,130 --> 00:12:45,570
what<font color="#E5E5E5"> are some solutions</font><font color="#CCCCCC"> so I've kind of</font>

352
00:12:44,370 --> 00:12:47,370
split<font color="#E5E5E5"> it up into two here the first</font>

353
00:12:45,570 --> 00:12:49,620
would be<font color="#CCCCCC"> the static</font><font color="#E5E5E5"> analysis</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> would</font>

354
00:12:47,370 --> 00:12:51,060
be like<font color="#E5E5E5"> a code checker</font><font color="#CCCCCC"> the problem with</font>

355
00:12:49,620 --> 00:12:53,040
this is well first<font color="#CCCCCC"> of all there's not</font><font color="#E5E5E5"> a</font>

356
00:12:51,060 --> 00:12:54,270
lot<font color="#CCCCCC"> of good ones</font><font color="#E5E5E5"> out there but</font><font color="#CCCCCC"> even the</font>

357
00:12:53,040 --> 00:12:56,790
good<font color="#E5E5E5"> ones they</font><font color="#CCCCCC"> tend to give you like a</font>

358
00:12:54,270 --> 00:12:57,810
ton of false positives<font color="#E5E5E5"> all right and you</font>

359
00:12:56,790 --> 00:12:59,430
<font color="#E5E5E5">don't know you have</font><font color="#CCCCCC"> to go through</font><font color="#E5E5E5"> every</font>

360
00:12:57,810 --> 00:13:01,829
<font color="#E5E5E5">single warning and be like is this real</font>

361
00:12:59,430 --> 00:13:03,750
is<font color="#E5E5E5"> this reachable</font><font color="#CCCCCC"> oh yeah I don't</font><font color="#E5E5E5"> know</font>

362
00:13:01,830 --> 00:13:05,070
and we don't<font color="#E5E5E5"> want to do that we're</font><font color="#CCCCCC"> very</font>

363
00:13:03,750 --> 00:13:06,450
lazy<font color="#E5E5E5"> that's a huge amount</font><font color="#CCCCCC"> of work</font><font color="#E5E5E5"> I</font>

364
00:13:05,070 --> 00:13:08,970
don't want anything to do with it

365
00:13:06,450 --> 00:13:11,970
<font color="#E5E5E5">so the other the other alternative</font><font color="#CCCCCC"> event</font>

366
00:13:08,970 --> 00:13:14,370
is dynamic analysis an<font color="#E5E5E5"> example of which</font>

367
00:13:11,970 --> 00:13:15,690
would<font color="#E5E5E5"> be fuzzing and if you can't guess</font>

368
00:13:14,370 --> 00:13:16,710
from the title of our talk that's what

369
00:13:15,690 --> 00:13:19,680
we went<font color="#E5E5E5"> with</font>

370
00:13:16,710 --> 00:13:21,660
plussing<font color="#CCCCCC"> so okay</font><font color="#E5E5E5"> fuzzing very briefly</font>

371
00:13:19,680 --> 00:13:23,819
<font color="#E5E5E5">the general idea is you send like random</font>

372
00:13:21,660 --> 00:13:26,370
data<font color="#CCCCCC"> at random input into a program</font><font color="#E5E5E5"> and</font>

373
00:13:23,820 --> 00:13:27,690
<font color="#CCCCCC">you hope you trigger</font><font color="#E5E5E5"> a bug and the</font>

374
00:13:26,370 --> 00:13:29,100
really nice thing<font color="#CCCCCC"> about fuzzing</font><font color="#E5E5E5"> is</font>

375
00:13:27,690 --> 00:13:30,660
you're guaranteed<font color="#CCCCCC"> to</font><font color="#E5E5E5"> find real bugs</font>

376
00:13:29,100 --> 00:13:32,310
<font color="#E5E5E5">because if you're fuzzing a program</font>

377
00:13:30,660 --> 00:13:34,829
<font color="#E5E5E5">right it crashes okay</font><font color="#CCCCCC"> obviously there's</font>

378
00:13:32,310 --> 00:13:37,109
a bug there somewhere<font color="#E5E5E5"> and what's more is</font>

379
00:13:34,830 --> 00:13:38,880
<font color="#CCCCCC">that depending</font><font color="#E5E5E5"> on what your fuzzing and</font>

380
00:13:37,110 --> 00:13:41,520
like what program<font color="#E5E5E5"> you're using to fuzz</font>

381
00:13:38,880 --> 00:13:43,470
it<font color="#CCCCCC"> more</font><font color="#E5E5E5"> often than not you're also going</font>

382
00:13:41,520 --> 00:13:44,400
to have like<font color="#CCCCCC"> a</font><font color="#E5E5E5"> POC to go with it or</font>

383
00:13:43,470 --> 00:13:45,720
you're<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> have like steps to</font>

384
00:13:44,400 --> 00:13:47,459
reproduce<font color="#E5E5E5"> the problem</font><font color="#CCCCCC"> that you just</font><font color="#E5E5E5"> saw</font>

385
00:13:45,720 --> 00:13:51,330
or just triggered<font color="#E5E5E5"> which is very very</font>

386
00:13:47,460 --> 00:13:53,550
nice<font color="#CCCCCC"> okay so how is fuzzing then</font>

387
00:13:51,330 --> 00:13:56,220
generally applied to<font color="#E5E5E5"> the kernel so in</font>

388
00:13:53,550 --> 00:13:58,170
general what<font color="#E5E5E5"> you do is you can make a</font>

389
00:13:56,220 --> 00:13:59,730
model<font color="#CCCCCC"> of each syscall</font><font color="#E5E5E5"> so you say like</font>

390
00:13:58,170 --> 00:14:02,130
okay the read<font color="#CCCCCC"> says call it takes three</font>

391
00:13:59,730 --> 00:14:03,570
arguments<font color="#E5E5E5"> the first is an integer the</font>

392
00:14:02,130 --> 00:14:05,220
second is like<font color="#E5E5E5"> a pointer</font><font color="#CCCCCC"> to some buffer</font>

393
00:14:03,570 --> 00:14:07,080
and the third is another integer<font color="#E5E5E5"> and</font>

394
00:14:05,220 --> 00:14:08,970
then you go and<font color="#E5E5E5"> then you fuzz it right</font>

395
00:14:07,080 --> 00:14:11,250
and hopefully<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> see that</font><font color="#CCCCCC"> this is</font>

396
00:14:08,970 --> 00:14:13,110
very<font color="#CCCCCC"> very hard for iocked O's</font><font color="#E5E5E5"> because</font>

397
00:14:11,250 --> 00:14:15,000
first of all you know you don't<font color="#E5E5E5"> even</font>

398
00:14:13,110 --> 00:14:16,260
<font color="#E5E5E5">know like what's what's the device name</font>

399
00:14:15,000 --> 00:14:17,460
like you have to go and<font color="#E5E5E5"> hunt</font><font color="#CCCCCC"> down like</font>

400
00:14:16,260 --> 00:14:19,680
what<font color="#CCCCCC"> where's it where are</font><font color="#E5E5E5"> these special</font>

401
00:14:17,460 --> 00:14:20,850
<font color="#E5E5E5">files what do they</font><font color="#CCCCCC"> called with the path</font>

402
00:14:19,680 --> 00:14:23,579
to them

403
00:14:20,850 --> 00:14:24,810
furthermore<font color="#E5E5E5"> the command values for one</font>

404
00:14:23,580 --> 00:14:26,790
<font color="#CCCCCC">device are certainly</font><font color="#E5E5E5"> not going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be the</font>

405
00:14:24,810 --> 00:14:29,069
command values for another device<font color="#CCCCCC"> you</font>

406
00:14:26,790 --> 00:14:32,819
<font color="#CCCCCC">know</font><font color="#E5E5E5"> they're</font><font color="#CCCCCC"> gonna be totally different</font>

407
00:14:29,070 --> 00:14:35,130
<font color="#CCCCCC">and third of all even if you're focusing</font>

408
00:14:32,820 --> 00:14:36,930
on just<font color="#CCCCCC"> one specific device</font><font color="#E5E5E5"> as we saw</font>

409
00:14:35,130 --> 00:14:39,600
depending on which command you<font color="#E5E5E5"> give in</font>

410
00:14:36,930 --> 00:14:40,890
the last argument<font color="#CCCCCC"> per</font><font color="#E5E5E5"> am that's going to</font>

411
00:14:39,600 --> 00:14:42,360
change<font color="#E5E5E5"> it's gonna be expecting</font><font color="#CCCCCC"> different</font>

412
00:14:40,890 --> 00:14:44,340
types of data<font color="#E5E5E5"> depending on the command</font>

413
00:14:42,360 --> 00:14:46,530
so all this together it makes<font color="#E5E5E5"> it super</font>

414
00:14:44,340 --> 00:14:50,280
<font color="#E5E5E5">super hard to to make a model for</font><font color="#CCCCCC"> a</font>

415
00:14:46,530 --> 00:14:52,650
octal<font color="#CCCCCC"> and then as</font><font color="#E5E5E5"> a result</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> this when</font>

416
00:14:50,280 --> 00:14:54,300
kernel fuzzing iocked often get

417
00:14:52,650 --> 00:14:57,000
neglected<font color="#CCCCCC"> because there is this</font><font color="#E5E5E5"> huge</font>

418
00:14:54,300 --> 00:14:58,530
<font color="#E5E5E5">amount of manual effort and another</font>

419
00:14:57,000 --> 00:14:59,700
thing to note is even with the<font color="#E5E5E5"> recovered</font>

420
00:14:58,530 --> 00:15:01,829
interface even<font color="#E5E5E5"> if you have all this</font>

421
00:14:59,700 --> 00:15:03,360
information<font color="#CCCCCC"> some of these input</font>

422
00:15:01,830 --> 00:15:05,130
parameters<font color="#E5E5E5"> that it's expecting</font><font color="#CCCCCC"> are like</font>

423
00:15:03,360 --> 00:15:06,750
pointers to hugely complex structures

424
00:15:05,130 --> 00:15:08,280
<font color="#CCCCCC">right</font><font color="#E5E5E5"> they may have</font><font color="#CCCCCC"> substructure</font>

425
00:15:06,750 --> 00:15:10,080
pointers to other strokes<font color="#E5E5E5"> and to it to</font>

426
00:15:08,280 --> 00:15:12,180
instantiate something like this<font color="#E5E5E5"> it's not</font>

427
00:15:10,080 --> 00:15:15,480
exactly trivial<font color="#E5E5E5"> so even at that point</font>

428
00:15:12,180 --> 00:15:17,400
it's still truck I still challenging so

429
00:15:15,480 --> 00:15:19,620
with that said<font color="#CCCCCC"> now I'll</font><font color="#E5E5E5"> introduce our</font>

430
00:15:17,400 --> 00:15:21,240
tool<font color="#E5E5E5"> the fuse that attempts to solve</font>

431
00:15:19,620 --> 00:15:23,850
<font color="#E5E5E5">this</font><font color="#CCCCCC"> problem</font><font color="#E5E5E5"> automatically so we don't</font>

432
00:15:21,240 --> 00:15:25,470
have<font color="#E5E5E5"> to do</font><font color="#CCCCCC"> all this manual analysis the</font>

433
00:15:23,850 --> 00:15:28,530
fuse kind of<font color="#CCCCCC"> what nominally stands for</font>

434
00:15:25,470 --> 00:15:29,280
it's like<font color="#E5E5E5"> driver interface fuzzing but</font>

435
00:15:28,530 --> 00:15:30,750
then the floods

436
00:15:29,280 --> 00:15:33,990
kind of stupid<font color="#CCCCCC"> so we put an e on</font><font color="#E5E5E5"> the end</font>

437
00:15:30,750 --> 00:15:37,470
and it's<font color="#E5E5E5"> the fuse so so this is the</font>

438
00:15:33,990 --> 00:15:40,410
general pipeline of our system

439
00:15:37,470 --> 00:15:42,180
you give it<font color="#E5E5E5"> kernel source code it does</font>

440
00:15:40,410 --> 00:15:43,560
some<font color="#E5E5E5"> interface recovery step so it</font>

441
00:15:42,180 --> 00:15:45,689
<font color="#E5E5E5">retrieves all the information we</font><font color="#CCCCCC"> just</font>

442
00:15:43,560 --> 00:15:49,020
talked about<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> going to output</font><font color="#CCCCCC"> that</font>

443
00:15:45,690 --> 00:15:50,460
<font color="#E5E5E5">in some XML specification</font><font color="#CCCCCC"> and then from</font>

444
00:15:49,020 --> 00:15:51,420
that structure generation takes it it

445
00:15:50,460 --> 00:15:53,490
says<font color="#CCCCCC"> ok I have all this information</font>

446
00:15:51,420 --> 00:15:55,020
<font color="#CCCCCC">about you</font><font color="#E5E5E5"> know the parameters and the</font>

447
00:15:53,490 --> 00:15:57,990
command value is I'm<font color="#E5E5E5"> gonna like make</font>

448
00:15:55,020 --> 00:16:00,329
instances of these arguments<font color="#CCCCCC"> that is</font>

449
00:15:57,990 --> 00:16:03,330
output<font color="#E5E5E5"> as like a fuzz unit</font><font color="#CCCCCC"> and then that</font>

450
00:16:00,330 --> 00:16:05,340
is sent to the on device execution where

451
00:16:03,330 --> 00:16:08,250
it is executed<font color="#E5E5E5"> and hopefully at the end</font>

452
00:16:05,340 --> 00:16:10,050
<font color="#E5E5E5">you get out crashes</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> what we like</font>

453
00:16:08,250 --> 00:16:12,710
<font color="#CCCCCC">to see</font><font color="#E5E5E5"> so I'm gonna walk you</font><font color="#CCCCCC"> through</font>

454
00:16:10,050 --> 00:16:15,420
<font color="#CCCCCC">where every</font><font color="#E5E5E5"> step of this right now</font><font color="#CCCCCC"> so</font>

455
00:16:12,710 --> 00:16:16,980
<font color="#E5E5E5">starting with</font><font color="#CCCCCC"> interface recovery the</font>

456
00:16:15,420 --> 00:16:20,910
first part<font color="#E5E5E5"> of interface recovery is</font>

457
00:16:16,980 --> 00:16:24,780
build system instrumentation so the

458
00:16:20,910 --> 00:16:26,370
<font color="#E5E5E5">majority of our analyses use</font><font color="#CCCCCC"> LLVM</font><font color="#E5E5E5"> what</font>

459
00:16:24,780 --> 00:16:28,709
<font color="#E5E5E5">this means for us is that we want</font><font color="#CCCCCC"> LVM</font>

460
00:16:26,370 --> 00:16:31,230
bit code<font color="#CCCCCC"> ok this</font><font color="#E5E5E5"> is a slight problem</font>

461
00:16:28,710 --> 00:16:33,390
<font color="#E5E5E5">because the</font><font color="#CCCCCC"> linux kernel uses GCC</font><font color="#E5E5E5"> to</font>

462
00:16:31,230 --> 00:16:35,850
compile and there's actually an ongoing

463
00:16:33,390 --> 00:16:38,569
project<font color="#CCCCCC"> to</font><font color="#E5E5E5"> just be able to compile the</font>

464
00:16:35,850 --> 00:16:41,760
<font color="#CCCCCC">Linux</font><font color="#E5E5E5"> kernel with clang luckily for us</font>

465
00:16:38,570 --> 00:16:43,260
<font color="#CCCCCC">the issues that</font><font color="#E5E5E5"> they're having</font><font color="#CCCCCC"> they come</font>

466
00:16:41,760 --> 00:16:45,270
into play like very late in the

467
00:16:43,260 --> 00:16:46,860
compilation<font color="#E5E5E5"> process</font><font color="#CCCCCC"> and it's actually</font>

468
00:16:45,270 --> 00:16:48,500
<font color="#E5E5E5">flying so</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> can get</font><font color="#CCCCCC"> to the stage</font><font color="#E5E5E5"> where</font>

469
00:16:46,860 --> 00:16:51,420
we<font color="#E5E5E5"> can emit</font><font color="#CCCCCC"> LLVM bit code that's fine</font>

470
00:16:48,500 --> 00:16:53,220
<font color="#CCCCCC">which is very nice for us so how we do</font>

471
00:16:51,420 --> 00:16:55,260
this is we build the kernel with the

472
00:16:53,220 --> 00:16:56,700
provided make file<font color="#E5E5E5"> and we just like give</font>

473
00:16:55,260 --> 00:16:59,069
<font color="#E5E5E5">it the verbose option</font><font color="#CCCCCC"> feel like a tell</font>

474
00:16:56,700 --> 00:17:01,470
us everything<font color="#CCCCCC"> that you're doing</font><font color="#E5E5E5"> and from</font>

475
00:16:59,070 --> 00:17:03,120
here it's<font color="#E5E5E5"> gonna output like every GCC</font>

476
00:17:01,470 --> 00:17:06,810
command it's using to<font color="#E5E5E5"> build the kernel</font>

477
00:17:03,120 --> 00:17:09,000
<font color="#E5E5E5">and we save this to a file so after this</font>

478
00:17:06,810 --> 00:17:10,139
we just<font color="#E5E5E5"> have a script that runs through</font>

479
00:17:09,000 --> 00:17:12,240
all<font color="#E5E5E5"> these commands and it just</font>

480
00:17:10,140 --> 00:17:14,370
transforms like the valid GCC commands

481
00:17:12,240 --> 00:17:16,260
in decline commands<font color="#E5E5E5"> to emit bit code</font>

482
00:17:14,369 --> 00:17:18,208
<font color="#CCCCCC">alright and so now we have all this bit</font>

483
00:17:16,260 --> 00:17:20,280
code and then finally we try and<font color="#E5E5E5"> link</font>

484
00:17:18,209 --> 00:17:21,360
bit<font color="#E5E5E5"> folk bit code files together such</font>

485
00:17:20,280 --> 00:17:23,010
<font color="#CCCCCC">that we don't have</font><font color="#E5E5E5"> like a million bit</font>

486
00:17:21,359 --> 00:17:25,020
code files<font color="#CCCCCC"> we</font><font color="#E5E5E5"> have like some semblance</font>

487
00:17:23,010 --> 00:17:28,850
of like like a<font color="#CCCCCC"> suitable object file for</font>

488
00:17:25,020 --> 00:17:31,830
each device<font color="#E5E5E5"> just</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> make analysis easier</font>

489
00:17:28,850 --> 00:17:33,540
so now we have our<font color="#E5E5E5"> bit code next we want</font>

490
00:17:31,830 --> 00:17:34,710
to<font color="#CCCCCC"> find all</font><font color="#E5E5E5"> these I octal handlers</font>

491
00:17:33,540 --> 00:17:38,190
because those are the<font color="#CCCCCC"> functions we're</font>

492
00:17:34,710 --> 00:17:40,550
interested in so before we can<font color="#CCCCCC"> actually</font>

493
00:17:38,190 --> 00:17:42,140
<font color="#E5E5E5">find the handlers themselves we</font>

494
00:17:40,550 --> 00:17:45,110
have to find the definitions<font color="#E5E5E5"> of all</font>

495
00:17:42,140 --> 00:17:46,490
<font color="#E5E5E5">these operations structures so the</font><font color="#CCCCCC"> one I</font>

496
00:17:45,110 --> 00:17:48,320
talked about earlier<font color="#E5E5E5"> was a file</font>

497
00:17:46,490 --> 00:17:49,640
operation structure<font color="#E5E5E5"> turns</font><font color="#CCCCCC"> out there's</font>

498
00:17:48,320 --> 00:17:51,710
<font color="#CCCCCC">more than that there's like watchdog</font>

499
00:17:49,640 --> 00:17:53,750
operations alarm operations etc<font color="#CCCCCC"> this</font>

500
00:17:51,710 --> 00:17:55,970
whole bunch of them<font color="#CCCCCC"> we have a list of</font>

501
00:17:53,750 --> 00:17:57,620
these and this is<font color="#CCCCCC"> farts</font><font color="#E5E5E5"> kind of ghetto</font>

502
00:17:55,970 --> 00:17:59,030
but<font color="#E5E5E5"> we just grep for definitions the</font>

503
00:17:57,620 --> 00:18:01,459
definitions of<font color="#E5E5E5"> these structures in the</font>

504
00:17:59,030 --> 00:18:03,080
<font color="#E5E5E5">includes</font><font color="#CCCCCC"> and then we're gonna</font><font color="#E5E5E5"> do is</font>

505
00:18:01,460 --> 00:18:04,400
where we find where it's defined<font color="#E5E5E5"> and</font>

506
00:18:03,080 --> 00:18:07,879
like the relevant header file<font color="#E5E5E5"> we're</font>

507
00:18:04,400 --> 00:18:09,140
gonna use<font color="#E5E5E5"> c2</font><font color="#CCCCCC"> XML c2 XML is a tool that's</font>

508
00:18:07,880 --> 00:18:10,460
<font color="#E5E5E5">part of sparse it was actually written</font>

509
00:18:09,140 --> 00:18:13,280
<font color="#E5E5E5">by Linus Torvalds</font>

510
00:18:10,460 --> 00:18:16,190
<font color="#E5E5E5">and as the name suggests it converts C</font>

511
00:18:13,280 --> 00:18:18,280
code into XML<font color="#CCCCCC"> and</font><font color="#E5E5E5"> the reason we're doing</font>

512
00:18:16,190 --> 00:18:21,200
this is<font color="#CCCCCC"> because</font><font color="#E5E5E5"> we want to recover the</font>

513
00:18:18,280 --> 00:18:22,460
<font color="#CCCCCC">unlock dioctyl field for the structure</font>

514
00:18:21,200 --> 00:18:24,740
so we want to be able to say like<font color="#E5E5E5"> okay</font>

515
00:18:22,460 --> 00:18:27,380
<font color="#CCCCCC">for this particular kernel the file</font>

516
00:18:24,740 --> 00:18:31,100
<font color="#E5E5E5">operation structure at offset 8 is where</font>

517
00:18:27,380 --> 00:18:32,600
the unlock dioctyl field is<font color="#E5E5E5"> okay so once</font>

518
00:18:31,100 --> 00:18:35,889
we find<font color="#CCCCCC"> all these</font><font color="#E5E5E5"> offsets we store them</font>

519
00:18:32,600 --> 00:18:38,899
<font color="#CCCCCC">away</font><font color="#E5E5E5"> and we can start some real analysis</font>

520
00:18:35,890 --> 00:18:40,730
right<font color="#CCCCCC"> okay so I</font><font color="#E5E5E5"> octo handler recovery so</font>

521
00:18:38,900 --> 00:18:41,810
so now we can run<font color="#E5E5E5"> the analysis we start</font>

522
00:18:40,730 --> 00:18:44,150
<font color="#E5E5E5">writing some analysis on the actual</font>

523
00:18:41,810 --> 00:18:46,190
<font color="#E5E5E5">driver bit code files</font><font color="#CCCCCC"> and we're gonna</font>

524
00:18:44,150 --> 00:18:48,040
search for<font color="#E5E5E5"> all uses</font><font color="#CCCCCC"> of our</font><font color="#E5E5E5"> operation</font>

525
00:18:46,190 --> 00:18:49,910
structures that<font color="#CCCCCC"> we've</font><font color="#E5E5E5"> just talked about</font>

526
00:18:48,040 --> 00:18:52,310
<font color="#CCCCCC">and specifically what we're going to</font>

527
00:18:49,910 --> 00:18:54,230
<font color="#E5E5E5">look for is assignments at those offsets</font>

528
00:18:52,310 --> 00:18:55,669
we've just recovered so if we said like

529
00:18:54,230 --> 00:18:57,860
oh the unlock dioctyl field is that

530
00:18:55,670 --> 00:18:59,870
offset<font color="#E5E5E5"> 8 and then we see in the code and</font>

531
00:18:57,860 --> 00:19:01,310
assignment at that offset<font color="#CCCCCC"> okay well</font>

532
00:18:59,870 --> 00:19:05,899
whatever is<font color="#E5E5E5"> being assigned there is the</font>

533
00:19:01,310 --> 00:19:07,970
handler the<font color="#CCCCCC"> eye octal Handler and</font><font color="#E5E5E5"> so an</font>

534
00:19:05,900 --> 00:19:09,890
example<font color="#CCCCCC"> event</font><font color="#E5E5E5"> would be like this</font><font color="#CCCCCC"> so</font>

535
00:19:07,970 --> 00:19:12,290
<font color="#E5E5E5">again</font><font color="#CCCCCC"> this is our</font><font color="#E5E5E5"> isp file operation</font>

536
00:19:09,890 --> 00:19:14,150
structure<font color="#E5E5E5"> so here you see the unlocked</font><font color="#CCCCCC"> I</font>

537
00:19:12,290 --> 00:19:16,100
octal field<font color="#E5E5E5"> and look at that</font><font color="#CCCCCC"> ok it's</font>

538
00:19:14,150 --> 00:19:17,330
being assigned a as P I optical so we

539
00:19:16,100 --> 00:19:18,980
see this in<font color="#CCCCCC"> the bit code and we say</font>

540
00:19:17,330 --> 00:19:19,520
<font color="#E5E5E5">great okay so for</font><font color="#CCCCCC"> this device for this</font>

541
00:19:18,980 --> 00:19:21,980
<font color="#CCCCCC">driver</font>

542
00:19:19,520 --> 00:19:27,260
that's our i/o handler<font color="#E5E5E5"> so we can even</font>

543
00:19:21,980 --> 00:19:28,910
grab all of<font color="#E5E5E5"> them this way</font><font color="#CCCCCC"> okay the</font>

544
00:19:27,260 --> 00:19:31,129
flight<font color="#E5E5E5"> this is finding the device name</font>

545
00:19:28,910 --> 00:19:32,690
<font color="#E5E5E5">this step so you know none of</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> does</font>

546
00:19:31,130 --> 00:19:36,440
this any<font color="#CCCCCC"> good if we don't</font><font color="#E5E5E5"> know what the</font>

547
00:19:32,690 --> 00:19:39,350
special device file is called so for you

548
00:19:36,440 --> 00:19:41,360
<font color="#E5E5E5">know our example was camera</font><font color="#CCCCCC"> ASB so to be</font>

549
00:19:39,350 --> 00:19:43,040
totally honest<font color="#E5E5E5"> the analysis we do for</font>

550
00:19:41,360 --> 00:19:44,689
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> pretty</font><font color="#E5E5E5"> boring and I'm gonna skip</font>

551
00:19:43,040 --> 00:19:46,670
it<font color="#CCCCCC"> I'm more than</font><font color="#E5E5E5"> happy to talk</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> it</font>

552
00:19:44,690 --> 00:19:49,190
at the<font color="#CCCCCC"> end</font><font color="#E5E5E5"> if somebody's interested but</font>

553
00:19:46,670 --> 00:19:50,840
<font color="#E5E5E5">what it boils</font><font color="#CCCCCC"> down to is if the name if</font>

554
00:19:49,190 --> 00:19:51,690
it's registered<font color="#CCCCCC"> with a static name</font><font color="#E5E5E5"> like</font>

555
00:19:50,840 --> 00:19:53,580
in the example we

556
00:19:51,690 --> 00:19:54,990
we can recover that<font color="#CCCCCC"> so we would be able</font>

557
00:19:53,580 --> 00:19:58,199
<font color="#E5E5E5">to find my camera eyes PE great</font><font color="#CCCCCC"> it's</font>

558
00:19:54,990 --> 00:20:00,060
<font color="#E5E5E5">static excellent</font><font color="#CCCCCC"> unfortunately you're</font>

559
00:19:58,200 --> 00:20:02,370
gonna<font color="#E5E5E5"> have stuff like this where it's a</font>

560
00:20:00,060 --> 00:20:04,649
dynamic<font color="#E5E5E5"> name</font><font color="#CCCCCC"> so hear the name it's like</font>

561
00:20:02,370 --> 00:20:06,419
<font color="#E5E5E5">s print effing into the name and it's</font>

562
00:20:04,650 --> 00:20:08,130
like<font color="#E5E5E5"> getting the name it's like indexing</font>

563
00:20:06,420 --> 00:20:08,940
<font color="#E5E5E5">into some global table we don't know</font>

564
00:20:08,130 --> 00:20:10,170
what this<font color="#E5E5E5"> is</font>

565
00:20:08,940 --> 00:20:12,450
and unfortunately gonna have to fall

566
00:20:10,170 --> 00:20:13,980
back<font color="#CCCCCC"> to manual</font><font color="#E5E5E5"> analysis or you can just</font>

567
00:20:12,450 --> 00:20:17,240
set an option to be like<font color="#CCCCCC"> okay skip</font>

568
00:20:13,980 --> 00:20:17,240
<font color="#E5E5E5">anything that we can't find a name</font><font color="#CCCCCC"> for</font>

569
00:20:17,390 --> 00:20:21,060
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> so the next big thing is now we</font>

570
00:20:19,650 --> 00:20:23,160
<font color="#E5E5E5">have all these</font><font color="#CCCCCC"> iocked I'll handler</font>

571
00:20:21,060 --> 00:20:24,389
functions<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> we want to know what what</font>

572
00:20:23,160 --> 00:20:27,000
do we send them right<font color="#E5E5E5"> we need to know</font>

573
00:20:24,390 --> 00:20:30,210
the command values and the types<font color="#E5E5E5"> that go</font>

574
00:20:27,000 --> 00:20:32,250
with those command values so this

575
00:20:30,210 --> 00:20:34,800
analysis is done<font color="#E5E5E5"> in tandem we find both</font>

576
00:20:32,250 --> 00:20:35,850
<font color="#CCCCCC">of these</font><font color="#E5E5E5"> things together</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> we're</font>

577
00:20:34,800 --> 00:20:38,639
gonna do is because we've recovered

578
00:20:35,850 --> 00:20:40,649
these<font color="#E5E5E5"> handlers we run our</font><font color="#CCCCCC"> LLVM analysis</font>

579
00:20:38,640 --> 00:20:42,930
on the<font color="#CCCCCC"> handler function the bit code for</font>

580
00:20:40,650 --> 00:20:44,460
it<font color="#CCCCCC"> and we know our arguments of interest</font>

581
00:20:42,930 --> 00:20:46,230
right so we know<font color="#CCCCCC"> that our second</font>

582
00:20:44,460 --> 00:20:49,110
argument is<font color="#E5E5E5"> the command value and the</font>

583
00:20:46,230 --> 00:20:50,460
third argument<font color="#CCCCCC"> is</font><font color="#E5E5E5"> per am so</font><font color="#CCCCCC"> there's very</font>

584
00:20:49,110 --> 00:20:51,870
nice because<font color="#CCCCCC"> all we get all we have to</font>

585
00:20:50,460 --> 00:20:54,450
do is search for<font color="#E5E5E5"> any kind of</font><font color="#CCCCCC"> equality</font>

586
00:20:51,870 --> 00:20:55,800
<font color="#CCCCCC">comparison</font><font color="#E5E5E5"> on our command value and if</font>

587
00:20:54,450 --> 00:20:57,600
we see it we<font color="#E5E5E5"> keep track</font><font color="#CCCCCC"> of that</font>

588
00:20:55,800 --> 00:20:59,159
constraint for the Givens<font color="#CCCCCC"> half</font><font color="#E5E5E5"> like</font>

589
00:20:57,600 --> 00:21:01,679
where<font color="#E5E5E5"> that equality comparison applies</font>

590
00:20:59,160 --> 00:21:03,570
and while we're<font color="#CCCCCC"> on that path we're then</font>

591
00:21:01,680 --> 00:21:05,340
gonna look for any uses of copy from

592
00:21:03,570 --> 00:21:08,220
user that's using<font color="#E5E5E5"> our third argument</font>

593
00:21:05,340 --> 00:21:09,990
<font color="#E5E5E5">that's using</font><font color="#CCCCCC"> / am</font><font color="#E5E5E5"> and if we see this</font>

594
00:21:08,220 --> 00:21:11,760
<font color="#E5E5E5">we're</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> look at the first argument</font>

595
00:21:09,990 --> 00:21:14,550
<font color="#E5E5E5">to copy from user that's where it's</font>

596
00:21:11,760 --> 00:21:16,440
copying data<font color="#E5E5E5"> into and we say okay well</font>

597
00:21:14,550 --> 00:21:18,270
if<font color="#CCCCCC"> we know the type of</font><font color="#E5E5E5"> the of what it's</font>

598
00:21:16,440 --> 00:21:19,770
copying<font color="#E5E5E5"> it into that's obviously what</font>

599
00:21:18,270 --> 00:21:23,040
it's expecting<font color="#E5E5E5"> parameter point to like a</font>

600
00:21:19,770 --> 00:21:24,629
type of<font color="#E5E5E5"> that data and additionally this</font>

601
00:21:23,040 --> 00:21:27,300
doesn't<font color="#CCCCCC"> necessarily happen</font><font color="#E5E5E5"> at the top</font>

602
00:21:24,630 --> 00:21:28,620
level of<font color="#E5E5E5"> an i octal handler function and</font>

603
00:21:27,300 --> 00:21:31,320
so we're gonna<font color="#E5E5E5"> follow any function that</font>

604
00:21:28,620 --> 00:21:32,820
<font color="#CCCCCC">gets</font><font color="#E5E5E5"> passed per am and or command and so</font>

605
00:21:31,320 --> 00:21:35,639
<font color="#E5E5E5">I know that</font><font color="#CCCCCC"> was a decent amount of text</font>

606
00:21:32,820 --> 00:21:38,550
<font color="#CCCCCC">so I have an</font><font color="#E5E5E5"> example here for you here's</font>

607
00:21:35,640 --> 00:21:40,230
a good friend the<font color="#CCCCCC"> ISPI octal</font><font color="#E5E5E5"> handler and</font>

608
00:21:38,550 --> 00:21:42,750
what we're<font color="#E5E5E5"> gonna do is okay here's our</font>

609
00:21:40,230 --> 00:21:45,840
switch like we're used to and here's a

610
00:21:42,750 --> 00:21:47,700
case<font color="#CCCCCC"> all right</font><font color="#E5E5E5"> cases they boil down to</font>

611
00:21:45,840 --> 00:21:49,379
equality comparisons<font color="#E5E5E5"> right this is gonna</font>

612
00:21:47,700 --> 00:21:51,030
be<font color="#CCCCCC"> lies in the assemble a to know like</font>

613
00:21:49,380 --> 00:21:54,570
oh<font color="#E5E5E5"> I like you know is you know whatever</font>

614
00:21:51,030 --> 00:21:55,950
this register<font color="#CCCCCC"> is at</font><font color="#E5E5E5"> this value so we</font>

615
00:21:54,570 --> 00:21:58,860
keep<font color="#CCCCCC"> track of that we make note of</font><font color="#E5E5E5"> it</font>

616
00:21:55,950 --> 00:22:00,720
<font color="#CCCCCC">and we</font><font color="#E5E5E5"> continue on this path okay here</font>

617
00:21:58,860 --> 00:22:03,090
<font color="#E5E5E5">we see a function call and what's going</font>

618
00:22:00,720 --> 00:22:04,200
into<font color="#E5E5E5"> this function call per annum okay</font>

619
00:22:03,090 --> 00:22:05,449
well we said that's<font color="#E5E5E5"> one of our</font><font color="#CCCCCC"> arguments</font>

620
00:22:04,200 --> 00:22:08,430
of interest so we're gonna<font color="#E5E5E5"> follow the</font>

621
00:22:05,450 --> 00:22:11,280
so we come down<font color="#CCCCCC"> here to ISP buff control</font>

622
00:22:08,430 --> 00:22:13,740
<font color="#E5E5E5">funk and what are we seeing</font><font color="#CCCCCC"> that we see</font>

623
00:22:11,280 --> 00:22:17,430
a copy from user and what's it using a

624
00:22:13,740 --> 00:22:19,230
copy from user for a minimum<font color="#E5E5E5"> interest so</font>

625
00:22:17,430 --> 00:22:20,670
<font color="#E5E5E5">we say great</font><font color="#CCCCCC"> ok let's look at</font><font color="#E5E5E5"> the first</font>

626
00:22:19,230 --> 00:22:23,550
argument<font color="#E5E5E5"> to this where is it copying it</font>

627
00:22:20,670 --> 00:22:24,600
into<font color="#CCCCCC"> RT buff control what is the type of</font>

628
00:22:23,550 --> 00:22:27,840
that<font color="#E5E5E5"> variable</font>

629
00:22:24,600 --> 00:22:29,340
it's an<font color="#CCCCCC"> ISP buffer control struct</font><font color="#E5E5E5"> so now</font>

630
00:22:27,840 --> 00:22:32,280
we have this<font color="#E5E5E5"> pairing we have</font><font color="#CCCCCC"> this match</font>

631
00:22:29,340 --> 00:22:35,399
we say<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> if we give this handler</font><font color="#CCCCCC"> a</font>

632
00:22:32,280 --> 00:22:37,170
command value of<font color="#CCCCCC"> ISP buffer control</font><font color="#E5E5E5"> we</font>

633
00:22:35,400 --> 00:22:39,930
should also expect<font color="#E5E5E5"> to give it per am</font>

634
00:22:37,170 --> 00:22:41,760
pointing<font color="#CCCCCC"> to a type of</font><font color="#E5E5E5"> ISP buffer control</font>

635
00:22:39,930 --> 00:22:47,400
struct<font color="#E5E5E5"> and now we have these matches is</font>

636
00:22:41,760 --> 00:22:49,260
very nice so we're almost<font color="#E5E5E5"> done</font><font color="#CCCCCC"> the last</font>

637
00:22:47,400 --> 00:22:50,670
<font color="#E5E5E5">step is that ok just because we know the</font>

638
00:22:49,260 --> 00:22:51,900
type that we have to give it doesn't

639
00:22:50,670 --> 00:22:54,420
necessarily mean<font color="#E5E5E5"> we know</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> that type</font>

640
00:22:51,900 --> 00:22:55,410
looks like right because we need to if

641
00:22:54,420 --> 00:22:56,490
we're<font color="#E5E5E5"> going to stand straight these we</font>

642
00:22:55,410 --> 00:23:00,210
have<font color="#E5E5E5"> to know what the type actually</font>

643
00:22:56,490 --> 00:23:02,190
<font color="#E5E5E5">looks like</font><font color="#CCCCCC"> so the nice thing is we have</font>

644
00:23:00,210 --> 00:23:03,720
all<font color="#E5E5E5"> these GCC build commands from our</font>

645
00:23:02,190 --> 00:23:06,030
<font color="#E5E5E5">first step where we used to make file</font>

646
00:23:03,720 --> 00:23:07,590
and we just said hey<font color="#E5E5E5"> be verbose</font><font color="#CCCCCC"> and we</font>

647
00:23:06,030 --> 00:23:09,149
know what file we're looking<font color="#CCCCCC"> at we know</font>

648
00:23:07,590 --> 00:23:10,320
that you know for<font color="#E5E5E5"> this given bit code</font>

649
00:23:09,150 --> 00:23:13,020
<font color="#E5E5E5">file we're looking</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> it's like it has</font>

650
00:23:10,320 --> 00:23:15,000
this<font color="#E5E5E5"> other relevant</font><font color="#CCCCCC"> T file and so all we</font>

651
00:23:13,020 --> 00:23:17,100
have<font color="#CCCCCC"> to do is go and find the GCC</font>

652
00:23:15,000 --> 00:23:19,230
command that<font color="#E5E5E5"> was used to</font><font color="#CCCCCC"> build</font><font color="#E5E5E5"> the C</font>

653
00:23:17,100 --> 00:23:21,840
file originally and then<font color="#E5E5E5"> from there we</font>

654
00:23:19,230 --> 00:23:23,100
throw on the<font color="#E5E5E5"> - capital e option</font><font color="#CCCCCC"> -</font><font color="#E5E5E5"> the</font>

655
00:23:21,840 --> 00:23:25,409
original<font color="#CCCCCC"> bill command</font><font color="#E5E5E5"> that's going to</font>

656
00:23:23,100 --> 00:23:28,560
invoke the C preprocessor<font color="#E5E5E5"> which</font><font color="#CCCCCC"> means</font>

657
00:23:25,410 --> 00:23:30,840
for us<font color="#CCCCCC"> if somewhere in that</font><font color="#E5E5E5"> C file it</font>

658
00:23:28,560 --> 00:23:32,340
used this struct<font color="#E5E5E5"> it has</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> like after</font>

659
00:23:30,840 --> 00:23:33,990
the preprocessor after it resolves all

660
00:23:32,340 --> 00:23:35,550
the dependencies<font color="#E5E5E5"> and stuff the</font>

661
00:23:33,990 --> 00:23:37,020
<font color="#E5E5E5">definition of that structure should be</font>

662
00:23:35,550 --> 00:23:40,740
<font color="#E5E5E5">in the pre process file somewhere and</font>

663
00:23:37,020 --> 00:23:42,270
anything that it relies on so from there

664
00:23:40,740 --> 00:23:43,680
we're gonna<font color="#E5E5E5"> run our good friend C</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> XML</font>

665
00:23:42,270 --> 00:23:46,020
<font color="#E5E5E5">on the file</font><font color="#CCCCCC"> we're gonna get some equally</font>

666
00:23:43,680 --> 00:23:48,960
massive<font color="#E5E5E5"> XML file</font><font color="#CCCCCC"> and then we're</font><font color="#E5E5E5"> gonna</font>

667
00:23:46,020 --> 00:23:50,730
run a series<font color="#CCCCCC"> of Python passes</font><font color="#E5E5E5"> to extract</font>

668
00:23:48,960 --> 00:23:53,160
the struct<font color="#E5E5E5"> and any struct dependencies</font>

669
00:23:50,730 --> 00:23:54,210
<font color="#CCCCCC">like I said maybe the struct has you</font>

670
00:23:53,160 --> 00:23:55,950
know pointers to<font color="#CCCCCC"> other types of</font>

671
00:23:54,210 --> 00:23:58,130
structure inside of<font color="#E5E5E5"> it</font><font color="#CCCCCC"> if so we</font><font color="#E5E5E5"> need to</font>

672
00:23:55,950 --> 00:23:59,940
know the definitions of<font color="#E5E5E5"> those as well</font>

673
00:23:58,130 --> 00:24:02,100
and<font color="#CCCCCC"> it's also gonna</font><font color="#E5E5E5"> do things</font><font color="#CCCCCC"> like</font>

674
00:23:59,940 --> 00:24:04,050
account for padding<font color="#CCCCCC"> recovery enum values</font>

675
00:24:02,100 --> 00:24:05,820
etc<font color="#CCCCCC"> so just to give</font><font color="#E5E5E5"> you a bit of</font><font color="#CCCCCC"> a like</font>

676
00:24:04,050 --> 00:24:08,100
a visualization for what this looks like

677
00:24:05,820 --> 00:24:10,290
<font color="#E5E5E5">I'm sure this is unreadable this is what</font>

678
00:24:08,100 --> 00:24:12,570
C<font color="#CCCCCC"> 2x and</font><font color="#E5E5E5"> they'll</font><font color="#CCCCCC"> give you</font><font color="#E5E5E5"> so it's really</font>

679
00:24:10,290 --> 00:24:13,620
<font color="#E5E5E5">it's not very useful like for human</font>

680
00:24:12,570 --> 00:24:15,330
analysis like if you<font color="#CCCCCC"> just looking at</font>

681
00:24:13,620 --> 00:24:17,909
<font color="#E5E5E5">it's not helpful</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> it does have a ton</font>

682
00:24:15,330 --> 00:24:18,300
of information in<font color="#E5E5E5"> it after</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> run our</font>

683
00:24:17,910 --> 00:24:19,830
pipe

684
00:24:18,300 --> 00:24:21,810
passes on this we distill it into

685
00:24:19,830 --> 00:24:24,000
<font color="#CCCCCC">something that</font><font color="#E5E5E5"> looks</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> this so much</font>

686
00:24:21,810 --> 00:24:25,440
<font color="#E5E5E5">more digestible much more readable</font><font color="#CCCCCC"> this</font>

687
00:24:24,000 --> 00:24:27,450
is a data model<font color="#CCCCCC"> for particular</font><font color="#E5E5E5"> type of</font>

688
00:24:25,440 --> 00:24:31,350
struct<font color="#E5E5E5"> it looks</font><font color="#CCCCCC"> very similar to</font><font color="#E5E5E5"> the</font>

689
00:24:27,450 --> 00:24:33,000
<font color="#E5E5E5">peach if some of you are familiar okay</font>

690
00:24:31,350 --> 00:24:34,889
so that was a whole<font color="#CCCCCC"> lot so a quick</font>

691
00:24:33,000 --> 00:24:37,440
summary of<font color="#CCCCCC"> what I've just discussed we</font>

692
00:24:34,890 --> 00:24:41,160
started with the kernel source code<font color="#CCCCCC"> from</font>

693
00:24:37,440 --> 00:24:42,690
<font color="#E5E5E5">there we compiled</font><font color="#CCCCCC"> two LLVM bit code from</font>

694
00:24:41,160 --> 00:24:45,300
the bit code we recovered the<font color="#CCCCCC"> vise names</font>

695
00:24:42,690 --> 00:24:47,610
and the<font color="#E5E5E5"> I elect</font><font color="#CCCCCC"> all handlers from</font><font color="#E5E5E5"> the</font>

696
00:24:45,300 --> 00:24:49,710
handlers we got the command values<font color="#E5E5E5"> and</font>

697
00:24:47,610 --> 00:24:51,090
the argument types and then from the

698
00:24:49,710 --> 00:24:52,350
<font color="#CCCCCC">pipes were when we found</font><font color="#E5E5E5"> okay what are</font>

699
00:24:51,090 --> 00:24:54,270
<font color="#CCCCCC">those types</font><font color="#E5E5E5"> actually look</font><font color="#CCCCCC"> like we know</font>

700
00:24:52,350 --> 00:24:55,709
<font color="#CCCCCC">what are their</font><font color="#E5E5E5"> definitions and so those</font>

701
00:24:54,270 --> 00:24:57,629
last<font color="#E5E5E5"> three things the device names</font>

702
00:24:55,710 --> 00:24:58,890
commands and type definitions are going

703
00:24:57,630 --> 00:25:00,690
to be pushed<font color="#CCCCCC"> in to some XML</font>

704
00:24:58,890 --> 00:25:08,880
specification<font color="#E5E5E5"> describing it as the</font>

705
00:25:00,690 --> 00:25:11,220
<font color="#E5E5E5">interface awesome so after all those</font>

706
00:25:08,880 --> 00:25:13,980
state<font color="#E5E5E5"> steps which Jake has described we</font>

707
00:25:11,220 --> 00:25:16,500
are now fully<font color="#CCCCCC"> interface</font><font color="#E5E5E5"> aware we know</font>

708
00:25:13,980 --> 00:25:19,410
what the device file name is so we know

709
00:25:16,500 --> 00:25:22,170
<font color="#E5E5E5">we're in /dev what</font><font color="#CCCCCC"> /dev file we need to</font>

710
00:25:19,410 --> 00:25:24,330
<font color="#E5E5E5">open we know what command</font><font color="#CCCCCC"> ids dioctyl</font>

711
00:25:22,170 --> 00:25:26,730
accepts so what numbers to pass it and

712
00:25:24,330 --> 00:25:29,939
we even<font color="#CCCCCC"> know for each of those command</font>

713
00:25:26,730 --> 00:25:33,900
<font color="#E5E5E5">IDs what the argument type is what</font>

714
00:25:29,940 --> 00:25:36,390
structure it's expecting is and so the

715
00:25:33,900 --> 00:25:38,160
next<font color="#E5E5E5"> part of this fuzzing process is we</font>

716
00:25:36,390 --> 00:25:40,200
have to generate<font color="#E5E5E5"> actual instances of</font>

717
00:25:38,160 --> 00:25:42,030
these structures so<font color="#CCCCCC"> that we can be</font><font color="#E5E5E5"> n to</font>

718
00:25:40,200 --> 00:25:45,450
fuzz the<font color="#E5E5E5"> device and exercise its</font>

719
00:25:42,030 --> 00:25:47,180
behavior<font color="#CCCCCC"> and this all resides in the</font>

720
00:25:45,450 --> 00:25:51,060
structure generation component<font color="#E5E5E5"> of</font>

721
00:25:47,180 --> 00:25:52,980
diffuse<font color="#CCCCCC"> and so the structure</font><font color="#E5E5E5"> generation</font>

722
00:25:51,060 --> 00:25:55,230
component<font color="#CCCCCC"> actually still happens on the</font>

723
00:25:52,980 --> 00:25:58,230
computer on<font color="#E5E5E5"> the analysis host as we call</font>

724
00:25:55,230 --> 00:25:59,460
it not on the<font color="#CCCCCC"> Android phone</font><font color="#E5E5E5"> itself the</font>

725
00:25:58,230 --> 00:26:01,410
structure generation<font color="#CCCCCC"> component will</font>

726
00:25:59,460 --> 00:26:03,000
output<font color="#E5E5E5"> fuzz units as we call them which</font>

727
00:26:01,410 --> 00:26:05,940
<font color="#E5E5E5">will be a single invocation of an</font><font color="#CCCCCC"> i</font>

728
00:26:03,000 --> 00:26:08,100
octal<font color="#E5E5E5"> all right so let's think about</font>

729
00:26:05,940 --> 00:26:10,950
structure generation if we have a struct

730
00:26:08,100 --> 00:26:13,949
<font color="#E5E5E5">type one of those buffer control</font><font color="#CCCCCC"> stocks</font>

731
00:26:10,950 --> 00:26:16,830
<font color="#E5E5E5">that's or whatever how are we going to</font>

732
00:26:13,950 --> 00:26:19,080
<font color="#E5E5E5">generate an actual instance of it so at</font>

733
00:26:16,830 --> 00:26:20,310
<font color="#E5E5E5">first it seems pretty and simple</font><font color="#CCCCCC"> each of</font>

734
00:26:19,080 --> 00:26:23,220
these this<font color="#E5E5E5"> truck will have</font><font color="#CCCCCC"> a bunch</font><font color="#E5E5E5"> of</font>

735
00:26:20,310 --> 00:26:25,530
<font color="#E5E5E5">fields integers Long's characters etc</font>

736
00:26:23,220 --> 00:26:28,140
<font color="#E5E5E5">and we should just generate each of</font>

737
00:26:25,530 --> 00:26:29,940
those as we go of<font color="#E5E5E5"> course it's not quite</font>

738
00:26:28,140 --> 00:26:32,260
<font color="#CCCCCC">so</font><font color="#E5E5E5"> simple there are some more complex</font>

739
00:26:29,940 --> 00:26:34,090
cases<font color="#CCCCCC"> if we consider</font><font color="#E5E5E5"> what</font>

740
00:26:32,260 --> 00:26:37,810
there's a pointer to<font color="#CCCCCC"> another</font><font color="#E5E5E5"> structure</font>

741
00:26:34,090 --> 00:26:41,230
what if there's a union<font color="#CCCCCC"> or enums</font><font color="#E5E5E5"> we need</font>

742
00:26:37,810 --> 00:26:43,480
to handle<font color="#CCCCCC"> these as well so let's</font><font color="#E5E5E5"> walk</font>

743
00:26:41,230 --> 00:26:46,210
through a simple<font color="#CCCCCC"> example of</font><font color="#E5E5E5"> how</font><font color="#CCCCCC"> this</font>

744
00:26:43,480 --> 00:26:47,830
works<font color="#E5E5E5"> we have</font><font color="#CCCCCC"> this structure SP buffer</font>

745
00:26:46,210 --> 00:26:50,070
control struct<font color="#CCCCCC"> and</font><font color="#E5E5E5"> we're going</font><font color="#CCCCCC"> to go</font>

746
00:26:47,830 --> 00:26:53,830
through each<font color="#E5E5E5"> field</font><font color="#CCCCCC"> one at a</font><font color="#E5E5E5"> time and</font>

747
00:26:50,070 --> 00:26:55,960
generate the elements if needed<font color="#E5E5E5"> so we're</font>

748
00:26:53,830 --> 00:26:58,240
first<font color="#CCCCCC"> going to handle this field called</font>

749
00:26:55,960 --> 00:27:00,070
control<font color="#E5E5E5"> it's just just an enum so that</font>

750
00:26:58,240 --> 00:27:02,020
means when<font color="#CCCCCC"> we generate</font><font color="#E5E5E5"> the structure we</font>

751
00:27:00,070 --> 00:27:03,850
should pick maybe one of these enum

752
00:27:02,020 --> 00:27:05,170
values or maybe something that's<font color="#CCCCCC"> not</font>

753
00:27:03,850 --> 00:27:07,990
needing them to try<font color="#E5E5E5"> to trigger an out of</font>

754
00:27:05,170 --> 00:27:11,620
bounds and<font color="#E5E5E5"> we're going to go on the next</font>

755
00:27:07,990 --> 00:27:15,520
<font color="#CCCCCC">one</font><font color="#E5E5E5"> is also</font><font color="#CCCCCC"> an enum so we're gonna</font><font color="#E5E5E5"> grab</font>

756
00:27:11,620 --> 00:27:17,110
<font color="#E5E5E5">its definition as well and we go on this</font>

757
00:27:15,520 --> 00:27:19,150
one now<font color="#CCCCCC"> is a pointer to</font><font color="#E5E5E5"> another</font>

758
00:27:17,110 --> 00:27:20,530
<font color="#E5E5E5">structure so we have to be a little</font><font color="#CCCCCC"> bit</font>

759
00:27:19,150 --> 00:27:23,140
more careful here<font color="#E5E5E5"> so we have to actually</font>

760
00:27:20,530 --> 00:27:24,700
generate this structure as well<font color="#E5E5E5"> so we're</font>

761
00:27:23,140 --> 00:27:26,500
<font color="#E5E5E5">going to recursively handle each</font>

762
00:27:24,700 --> 00:27:28,240
<font color="#E5E5E5">structure we see</font><font color="#CCCCCC"> so we'll see this</font>

763
00:27:26,500 --> 00:27:30,790
structure<font color="#CCCCCC"> and then we'll go through</font><font color="#E5E5E5"> its</font>

764
00:27:28,240 --> 00:27:32,860
fields one at a time<font color="#E5E5E5"> handling</font><font color="#CCCCCC"> them</font>

765
00:27:30,790 --> 00:27:34,360
creating them and of<font color="#CCCCCC"> course these</font>

766
00:27:32,860 --> 00:27:36,129
structures<font color="#E5E5E5"> can be complex and have</font>

767
00:27:34,360 --> 00:27:39,969
structures within<font color="#E5E5E5"> them or pointers to</font>

768
00:27:36,130 --> 00:27:41,650
other<font color="#E5E5E5"> structures as well and after we've</font>

769
00:27:39,970 --> 00:27:44,680
generated the second structure<font color="#E5E5E5"> we</font><font color="#CCCCCC"> need</font>

770
00:27:41,650 --> 00:27:46,870
to point this pointer we've in the first

771
00:27:44,680 --> 00:27:49,360
one<font color="#E5E5E5"> to it just to have the mappings</font>

772
00:27:46,870 --> 00:27:50,530
correct<font color="#E5E5E5"> and we'll go</font><font color="#CCCCCC"> through</font><font color="#E5E5E5"> and keep</font>

773
00:27:49,360 --> 00:27:54,219
doing<font color="#E5E5E5"> this for every element our</font>

774
00:27:50,530 --> 00:27:55,750
structure until<font color="#E5E5E5"> it's generated now the</font>

775
00:27:54,220 --> 00:27:57,490
other<font color="#E5E5E5"> component of this is of course</font>

776
00:27:55,750 --> 00:28:01,240
<font color="#E5E5E5">what values do</font><font color="#CCCCCC"> we pick</font><font color="#E5E5E5"> for these</font>

777
00:27:57,490 --> 00:28:03,690
<font color="#E5E5E5">elements in the structures and we can be</font>

778
00:28:01,240 --> 00:28:06,460
pretty small<font color="#E5E5E5"> smart here so we know that</font>

779
00:28:03,690 --> 00:28:07,930
the type of every<font color="#E5E5E5"> single one of these</font>

780
00:28:06,460 --> 00:28:10,450
<font color="#CCCCCC">elements we know something's an integer</font>

781
00:28:07,930 --> 00:28:12,760
<font color="#E5E5E5">along we know if it's</font><font color="#CCCCCC"> Edina</font>

782
00:28:10,450 --> 00:28:15,190
so for<font color="#CCCCCC"> iNOS we can try</font><font color="#E5E5E5"> to pick values</font>

783
00:28:12,760 --> 00:28:17,740
<font color="#E5E5E5">that are correct or incorrect</font><font color="#CCCCCC"> we can</font>

784
00:28:15,190 --> 00:28:22,030
<font color="#E5E5E5">intelligently pick integers that might</font>

785
00:28:17,740 --> 00:28:24,250
trigger<font color="#E5E5E5"> say buffer overflow boundary or</font>

786
00:28:22,030 --> 00:28:27,370
an off by one<font color="#CCCCCC"> so maybe closer</font><font color="#E5E5E5"> to a power</font>

787
00:28:24,250 --> 00:28:29,920
of<font color="#E5E5E5"> two for character</font><font color="#CCCCCC"> race or whatever we</font>

788
00:28:27,370 --> 00:28:31,989
can try<font color="#E5E5E5"> to create both long and short</font>

789
00:28:29,920 --> 00:28:35,290
arrays<font color="#CCCCCC"> - maybe trigger both buffer</font>

790
00:28:31,990 --> 00:28:36,790
overflows<font color="#E5E5E5"> and valid functionality and so</font>

791
00:28:35,290 --> 00:28:38,710
for<font color="#E5E5E5"> each data type we have a</font><font color="#CCCCCC"> few</font>

792
00:28:36,790 --> 00:28:42,520
strategies<font color="#E5E5E5"> of how we randomly pick</font>

793
00:28:38,710 --> 00:28:44,640
values<font color="#CCCCCC"> for it and this</font><font color="#E5E5E5"> could all makes</font>

794
00:28:42,520 --> 00:28:46,710
up the structure generation component<font color="#CCCCCC"> of</font>

795
00:28:44,640 --> 00:28:48,360
<font color="#CCCCCC">views in the</font><font color="#E5E5E5"> structure generation</font><font color="#CCCCCC"> Cunha</font>

796
00:28:46,710 --> 00:28:50,610
<font color="#CCCCCC">as I said earlier</font><font color="#E5E5E5"> is going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> output</font>

797
00:28:48,360 --> 00:28:54,199
these<font color="#CCCCCC"> fuzz units which</font><font color="#E5E5E5"> will go to the on</font>

798
00:28:50,610 --> 00:28:57,750
device execution step to be executed

799
00:28:54,200 --> 00:29:00,750
<font color="#CCCCCC">alright</font><font color="#E5E5E5"> so the name of</font><font color="#CCCCCC"> the fuzzer</font><font color="#E5E5E5"> itself</font>

800
00:28:57,750 --> 00:29:03,300
is mango fuzz it's based off peach which

801
00:29:00,750 --> 00:29:04,170
is where it gets<font color="#E5E5E5"> its name</font><font color="#CCCCCC"> it's a fairly</font>

802
00:29:03,300 --> 00:29:07,500
simple fuzzer

803
00:29:04,170 --> 00:29:12,180
and kind of<font color="#E5E5E5"> dumb it's written</font><font color="#CCCCCC"> python can</font>

804
00:29:07,500 --> 00:29:14,490
only handle<font color="#E5E5E5"> iocked dolls and it consumes</font>

805
00:29:12,180 --> 00:29:16,470
these XML spec files which we will

806
00:29:14,490 --> 00:29:18,690
create<font color="#E5E5E5"> we create during the interface</font>

807
00:29:16,470 --> 00:29:20,760
extraction<font color="#CCCCCC"> step</font><font color="#E5E5E5"> the XML spec files</font>

808
00:29:18,690 --> 00:29:23,580
contain all the information<font color="#E5E5E5"> interface</font>

809
00:29:20,760 --> 00:29:27,480
information which we need<font color="#CCCCCC"> to do a single</font>

810
00:29:23,580 --> 00:29:29,610
fuzzing iteration<font color="#E5E5E5"> these XML spec files</font>

811
00:29:27,480 --> 00:29:32,460
contain the device path all of the

812
00:29:29,610 --> 00:29:34,229
command<font color="#E5E5E5"> IDs</font><font color="#CCCCCC"> that and for each</font><font color="#E5E5E5"> of the</font>

813
00:29:32,460 --> 00:29:37,050
command ID is what the argument types

814
00:29:34,230 --> 00:29:38,670
are and<font color="#E5E5E5"> for each of those argument types</font>

815
00:29:37,050 --> 00:29:42,090
their definitions<font color="#E5E5E5"> so we can actually</font>

816
00:29:38,670 --> 00:29:44,550
generate<font color="#E5E5E5"> those structures and mango fuzz</font>

817
00:29:42,090 --> 00:29:47,010
<font color="#CCCCCC">the on the</font><font color="#E5E5E5"> compute the on device during</font>

818
00:29:44,550 --> 00:29:49,980
the the analysis host component will

819
00:29:47,010 --> 00:29:51,870
generate binary blobs<font color="#E5E5E5"> and some mappings</font>

820
00:29:49,980 --> 00:29:53,910
between the binary blobs so if there's a

821
00:29:51,870 --> 00:29:55,530
pointer from one binary<font color="#E5E5E5"> blob to the next</font>

822
00:29:53,910 --> 00:29:57,540
and all of a mapping<font color="#E5E5E5"> tell you which</font>

823
00:29:55,530 --> 00:30:02,100
pointer it needs to<font color="#E5E5E5"> fix up on the device</font>

824
00:29:57,540 --> 00:30:04,200
<font color="#CCCCCC">itself</font><font color="#E5E5E5"> and an example of this XML spec</font>

825
00:30:02,100 --> 00:30:06,810
which I mentioned is shown here as you

826
00:30:04,200 --> 00:30:10,170
can<font color="#CCCCCC"> see it shows the device name</font><font color="#E5E5E5"> the</font>

827
00:30:06,810 --> 00:30:12,450
octal ID or the command number<font color="#E5E5E5"> as well</font>

828
00:30:10,170 --> 00:30:15,930
<font color="#E5E5E5">as the target struct expected by that</font><font color="#CCCCCC"> I</font>

829
00:30:12,450 --> 00:30:17,880
octal<font color="#E5E5E5"> and the for each of the for that</font>

830
00:30:15,930 --> 00:30:20,790
structure<font color="#E5E5E5"> it will have the structure</font>

831
00:30:17,880 --> 00:30:22,860
elements the fields needed<font color="#E5E5E5"> down below in</font>

832
00:30:20,790 --> 00:30:24,450
the<font color="#E5E5E5"> data model and if that structure</font>

833
00:30:22,860 --> 00:30:26,280
references<font color="#CCCCCC"> and</font><font color="#E5E5E5"> the other structures will</font>

834
00:30:24,450 --> 00:30:32,700
include those as other data models as

835
00:30:26,280 --> 00:30:34,980
well and then so mango fuzz the<font color="#E5E5E5"> on the</font>

836
00:30:32,700 --> 00:30:37,770
computer<font color="#E5E5E5"> part the analysis part host</font>

837
00:30:34,980 --> 00:30:39,300
part will generate the fuzz units<font color="#E5E5E5"> to be</font>

838
00:30:37,770 --> 00:30:43,139
sensitive<font color="#CCCCCC"> eyes for the on device</font>

839
00:30:39,300 --> 00:30:44,550
execution<font color="#E5E5E5"> and that happens on the device</font>

840
00:30:43,140 --> 00:30:46,680
we<font color="#CCCCCC"> need to that's where we need to</font>

841
00:30:44,550 --> 00:30:49,409
actually<font color="#E5E5E5"> call</font><font color="#CCCCCC"> i octal</font><font color="#E5E5E5"> to trigger the</font>

842
00:30:46,680 --> 00:30:52,020
functionality<font color="#CCCCCC"> and</font><font color="#E5E5E5"> so we simply connect</font>

843
00:30:49,410 --> 00:30:54,900
the<font color="#E5E5E5"> computer to device through</font><font color="#CCCCCC"> ADB the</font>

844
00:30:52,020 --> 00:30:57,779
Android debug bridge<font color="#E5E5E5"> where it will run a</font>

845
00:30:54,900 --> 00:31:00,179
program called<font color="#CCCCCC"> the executor</font>

846
00:30:57,779 --> 00:31:02,429
and<font color="#E5E5E5"> the executor</font><font color="#CCCCCC"> will open a port and</font>

847
00:31:00,179 --> 00:31:04,830
listen for data as it<font color="#E5E5E5"> receives data</font>

848
00:31:02,429 --> 00:31:07,019
<font color="#E5E5E5">it'll map it into memory</font><font color="#CCCCCC"> just call</font>

849
00:31:04,830 --> 00:31:09,749
malloc for the right size<font color="#E5E5E5"> copy the</font>

850
00:31:07,019 --> 00:31:13,379
<font color="#E5E5E5">binary data</font><font color="#CCCCCC"> in there</font><font color="#E5E5E5"> and then as needed</font>

851
00:31:09,749 --> 00:31:15,989
<font color="#CCCCCC">it will fix up the pointers so that if a</font>

852
00:31:13,379 --> 00:31:19,349
one binary<font color="#E5E5E5"> blob reference another struct</font>

853
00:31:15,989 --> 00:31:21,179
<font color="#E5E5E5">those happen</font><font color="#CCCCCC"> correctly and then it just</font>

854
00:31:19,349 --> 00:31:23,939
<font color="#E5E5E5">simply opens the device file calls</font><font color="#CCCCCC"> I</font>

855
00:31:21,179 --> 00:31:25,619
octal and hopefully<font color="#E5E5E5"> triggers some good</font>

856
00:31:23,940 --> 00:31:28,409
<font color="#E5E5E5">functionality and maybe II trigger some</font>

857
00:31:25,619 --> 00:31:31,678
<font color="#CCCCCC">bug's</font><font color="#E5E5E5"> all right so when we get to actual</font>

858
00:31:28,409 --> 00:31:34,289
fuzzing it's pretty simple<font color="#CCCCCC"> to look for</font>

859
00:31:31,679 --> 00:31:37,499
bugs<font color="#E5E5E5"> so on Android if you crash the</font>

860
00:31:34,289 --> 00:31:39,299
kernel device will reboot<font color="#E5E5E5"> and you'll</font>

861
00:31:37,499 --> 00:31:40,440
hear a nice beep or something as<font color="#CCCCCC"> it's</font>

862
00:31:39,299 --> 00:31:42,809
rebooting letting you know<font color="#E5E5E5"> that you</font>

863
00:31:40,440 --> 00:31:44,879
<font color="#E5E5E5">might have found something good then the</font>

864
00:31:42,809 --> 00:31:48,299
kernel back trace or oops is saved in

865
00:31:44,879 --> 00:31:50,820
<font color="#E5E5E5">this</font><font color="#CCCCCC"> FS peace door console Ram oops</font><font color="#E5E5E5"> and</font>

866
00:31:48,299 --> 00:31:52,979
<font color="#E5E5E5">you can look there to use that for</font>

867
00:31:50,820 --> 00:31:54,960
triaging you can also we also save the

868
00:31:52,979 --> 00:31:58,289
whole sequence of<font color="#E5E5E5"> I</font><font color="#CCCCCC"> octal x'</font><font color="#E5E5E5"> and that</font>

869
00:31:54,960 --> 00:31:59,879
can be trimmed down<font color="#E5E5E5"> to try to triage the</font>

870
00:31:58,289 --> 00:32:02,158
crashes a little bit better<font color="#E5E5E5"> because</font><font color="#CCCCCC"> if</font>

871
00:31:59,879 --> 00:32:03,629
you've done a triaging it can be pretty

872
00:32:02,159 --> 00:32:06,239
<font color="#E5E5E5">annoying just to look at the actual</font>

873
00:32:03,629 --> 00:32:09,059
inputs<font color="#CCCCCC"> so the</font><font color="#E5E5E5"> combination of the</font><font color="#CCCCCC"> RAM</font>

874
00:32:06,239 --> 00:32:10,979
<font color="#E5E5E5">oops and the back trace of</font><font color="#CCCCCC"> I octaves</font>

875
00:32:09,059 --> 00:32:15,349
<font color="#E5E5E5">which we can filter</font><font color="#CCCCCC"> down helped a lot</font>

876
00:32:10,979 --> 00:32:17,639
<font color="#E5E5E5">and to test our system we ran it on</font>

877
00:32:15,349 --> 00:32:20,279
<font color="#E5E5E5">seven phones from five major</font>

878
00:32:17,639 --> 00:32:25,199
manufacturers including Google HTC

879
00:32:20,279 --> 00:32:27,059
<font color="#E5E5E5">Huawei Samsung and Sony and across these</font>

880
00:32:25,200 --> 00:32:30,089
we think we covered four different

881
00:32:27,059 --> 00:32:32,908
chipsets<font color="#E5E5E5"> and this includes a wide range</font>

882
00:32:30,089 --> 00:32:34,619
of devices and drivers and should give

883
00:32:32,909 --> 00:32:41,519
us a large<font color="#E5E5E5"> number of</font><font color="#CCCCCC"> I optical handlers</font>

884
00:32:34,619 --> 00:32:44,039
to test in total we ended up finding 789

885
00:32:41,519 --> 00:32:47,219
<font color="#E5E5E5">octal handlers across these</font><font color="#CCCCCC"> seven</font>

886
00:32:44,039 --> 00:32:49,499
<font color="#E5E5E5">devices and this resulted and for these</font>

887
00:32:47,219 --> 00:32:51,559
seven<font color="#CCCCCC"> hyundai t9 handlers we were able</font>

888
00:32:49,499 --> 00:32:55,289
<font color="#E5E5E5">to</font><font color="#CCCCCC"> identify</font><font color="#E5E5E5"> the device names for only</font>

889
00:32:51,559 --> 00:32:57,119
<font color="#E5E5E5">469 which is like 60% of them</font><font color="#CCCCCC"> I think</font>

890
00:32:55,289 --> 00:33:00,779
this<font color="#CCCCCC"> is the</font><font color="#E5E5E5"> worst performing part of our</font>

891
00:32:57,119 --> 00:33:02,968
system<font color="#CCCCCC"> the part that maybe needs the</font>

892
00:33:00,779 --> 00:33:06,029
most manual analysis or future work to

893
00:33:02,969 --> 00:33:08,369
make good but still<font color="#CCCCCC"> 60% of</font><font color="#E5E5E5"> these is a</font>

894
00:33:06,029 --> 00:33:11,020
lot of the handlers<font color="#E5E5E5"> and most of the</font>

895
00:33:08,369 --> 00:33:13,510
misses comes from mainline kernel driver

896
00:33:11,020 --> 00:33:17,950
not from<font color="#E5E5E5"> the vendor specific ones for</font>

897
00:33:13,510 --> 00:33:21,190
<font color="#CCCCCC">example</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> MediaTek that we</font><font color="#E5E5E5"> specifically</font>

898
00:33:17,950 --> 00:33:22,990
found<font color="#E5E5E5"> around</font><font color="#CCCCCC"> 90 percent of the device</font>

899
00:33:21,190 --> 00:33:26,140
<font color="#E5E5E5">name is for the vendor specific drivers</font>

900
00:33:22,990 --> 00:33:27,640
there so and those ones are<font color="#CCCCCC"> often the</font>

901
00:33:26,140 --> 00:33:29,740
ones<font color="#E5E5E5"> on Android that you're looking for</font>

902
00:33:27,640 --> 00:33:32,860
for bugs<font color="#E5E5E5"> or the ones may be more likely</font>

903
00:33:29,740 --> 00:33:36,909
<font color="#E5E5E5">to be buggy and so we're getting very</font>

904
00:33:32,860 --> 00:33:40,719
<font color="#CCCCCC">good</font><font color="#E5E5E5"> coverage there for type and command</font>

905
00:33:36,909 --> 00:33:44,590
ID recovery we do better<font color="#CCCCCC"> so we found</font>

906
00:33:40,720 --> 00:33:46,510
<font color="#E5E5E5">across those 780 command or or octal</font>

907
00:33:44,590 --> 00:33:47,980
handlers<font color="#E5E5E5"> we found a total</font><font color="#CCCCCC"> of three</font>

908
00:33:46,510 --> 00:33:51,908
thousand<font color="#E5E5E5"> five hundred sixty five command</font>

909
00:33:47,980 --> 00:33:53,830
<font color="#CCCCCC">ids and for slightly</font><font color="#E5E5E5"> under</font><font color="#CCCCCC"> fifty percent</font>

910
00:33:51,909 --> 00:33:56,140
<font color="#E5E5E5">of them we found</font><font color="#CCCCCC"> that the user argument</font>

911
00:33:53,830 --> 00:33:59,408
is not an input<font color="#E5E5E5"> pointer meaning it's</font>

912
00:33:56,140 --> 00:34:02,200
just<font color="#CCCCCC"> used as a c type integer or long</font>

913
00:33:59,409 --> 00:34:04,390
and not as an input pointer or it might

914
00:34:02,200 --> 00:34:07,779
be<font color="#CCCCCC"> used as an output pointer copying the</font>

915
00:34:04,390 --> 00:34:10,330
result to you<font color="#E5E5E5"> and but for the rest the</font>

916
00:34:07,779 --> 00:34:13,359
remaining<font color="#E5E5E5"> 53 percent we found these were</font>

917
00:34:10,330 --> 00:34:15,969
using an input pointer so it was copying

918
00:34:13,359 --> 00:34:20,190
data from a structure<font color="#E5E5E5"> or from a user</font>

919
00:34:15,969 --> 00:34:23,379
data type to the<font color="#E5E5E5"> kernel and using it and</font>

920
00:34:20,190 --> 00:34:26,770
we did a<font color="#E5E5E5"> small random sample to check</font>

921
00:34:23,379 --> 00:34:29,259
the accuracy<font color="#E5E5E5"> of our tool we've picked</font><font color="#CCCCCC"> 5i</font>

922
00:34:26,770 --> 00:34:32,800
<font color="#CCCCCC">octal</font><font color="#E5E5E5"> for each phones which is a total</font>

923
00:34:29,260 --> 00:34:35,200
of 35 handlers<font color="#E5E5E5"> and we found that we were</font>

924
00:34:32,800 --> 00:34:41,349
accurate for both the<font color="#E5E5E5"> fan ID and the</font>

925
00:34:35,199 --> 00:34:44,080
type on<font color="#E5E5E5"> 90%</font><font color="#CCCCCC"> of those</font><font color="#E5E5E5"> okay to do the</font>

926
00:34:41,349 --> 00:34:45,399
actual fuzzing evaluation we picked four

927
00:34:44,080 --> 00:34:49,239
different variants which included

928
00:34:45,399 --> 00:34:50,949
various levels of device information<font color="#CCCCCC"> or</font>

929
00:34:49,239 --> 00:34:54,520
the interface information which we've

930
00:34:50,949 --> 00:34:55,210
extracted and we ran this first we<font color="#E5E5E5"> used</font>

931
00:34:54,520 --> 00:34:58,480
test caller

932
00:34:55,210 --> 00:35:01,210
<font color="#CCCCCC">sis caller is a state-of-the-art</font><font color="#E5E5E5"> Linux</font>

933
00:34:58,480 --> 00:35:04,030
kernel fuzzer built by a very good<font color="#CCCCCC"> team</font>

934
00:35:01,210 --> 00:35:09,010
at Google<font color="#CCCCCC"> and if you give sis card the</font>

935
00:35:04,030 --> 00:35:11,980
definition for a<font color="#E5E5E5"> sis call or set of sis</font>

936
00:35:09,010 --> 00:35:15,220
calls and how they<font color="#CCCCCC"> how to</font><font color="#E5E5E5"> call them</font>

937
00:35:11,980 --> 00:35:17,170
correctly<font color="#E5E5E5"> it can interface it can fuzz</font>

938
00:35:15,220 --> 00:35:19,990
them very well<font color="#E5E5E5"> and so we were</font><font color="#CCCCCC"> able to</font>

939
00:35:17,170 --> 00:35:22,210
interface with<font color="#CCCCCC"> it and so we gave sis</font>

940
00:35:19,990 --> 00:35:24,700
color<font color="#E5E5E5"> just</font><font color="#CCCCCC"> the device path which would</font>

941
00:35:22,210 --> 00:35:26,980
just be<font color="#E5E5E5"> the device name device name and</font>

942
00:35:24,700 --> 00:35:29,140
<font color="#E5E5E5">actual numbers and then the full device</font>

943
00:35:26,980 --> 00:35:30,940
info which would be the device a<font color="#CCCCCC"> my</font>

944
00:35:29,140 --> 00:35:32,020
<font color="#CCCCCC">octal numbers and the structures</font>

945
00:35:30,940 --> 00:35:34,329
associated<font color="#CCCCCC"> with it</font>

946
00:35:32,020 --> 00:35:36,310
and we also ran our<font color="#E5E5E5"> fuzzer mango fuzz</font>

947
00:35:34,329 --> 00:35:40,810
with the full device<font color="#E5E5E5"> in the full</font>

948
00:35:36,310 --> 00:35:42,940
<font color="#E5E5E5">interface info and when we were fuzzing</font>

949
00:35:40,810 --> 00:35:45,820
we found quite a few bugs actually<font color="#E5E5E5"> we</font>

950
00:35:42,940 --> 00:35:49,480
hit 36 total<font color="#E5E5E5"> unique crashes across these</font>

951
00:35:45,820 --> 00:35:51,310
<font color="#E5E5E5">seven devices you can see here which for</font>

952
00:35:49,480 --> 00:35:54,460
each<font color="#E5E5E5"> of the different tests and each of</font>

953
00:35:51,310 --> 00:35:57,460
the seven phones what we<font color="#E5E5E5"> found the best</font>

954
00:35:54,460 --> 00:35:59,619
performing one was<font color="#E5E5E5"> SIDS car with the</font>

955
00:35:57,460 --> 00:36:02,700
full information<font color="#E5E5E5"> extracted by</font><font color="#CCCCCC"> defuse</font>

956
00:35:59,619 --> 00:36:05,800
kind of as<font color="#E5E5E5"> expected which got 34 crashes</font>

957
00:36:02,700 --> 00:36:06,848
however<font color="#CCCCCC"> defuse</font><font color="#E5E5E5"> with mango fuzz are much</font>

958
00:36:05,800 --> 00:36:09,220
simpler<font color="#E5E5E5"> fuzzer</font>

959
00:36:06,849 --> 00:36:11,740
of course<font color="#E5E5E5"> only handles iocked dolls and</font>

960
00:36:09,220 --> 00:36:13,990
is<font color="#E5E5E5"> significantly slower still was able</font>

961
00:36:11,740 --> 00:36:17,049
<font color="#CCCCCC">to find 30 crashes then this to us</font>

962
00:36:13,990 --> 00:36:20,439
really<font color="#E5E5E5"> shows how important</font><font color="#CCCCCC"> the interface</font>

963
00:36:17,050 --> 00:36:23,950
information was because just using<font color="#E5E5E5"> this</font>

964
00:36:20,440 --> 00:36:25,839
in a kind of hacky and dumb way our<font color="#E5E5E5"> fuzz</font>

965
00:36:23,950 --> 00:36:27,578
was able<font color="#E5E5E5"> still get 30 crashes and not</font>

966
00:36:25,839 --> 00:36:31,960
that many less than a<font color="#CCCCCC"> state of the art</font>

967
00:36:27,579 --> 00:36:33,490
tool using<font color="#CCCCCC"> the same info with just the</font>

968
00:36:31,960 --> 00:36:36,160
path you weren't able to<font color="#E5E5E5"> get many</font>

969
00:36:33,490 --> 00:36:39,009
crashes<font color="#E5E5E5"> just three but when we gave it</font>

970
00:36:36,160 --> 00:36:40,990
<font color="#E5E5E5">the path plus the</font><font color="#CCCCCC"> IEEE octal</font><font color="#E5E5E5"> command</font>

971
00:36:39,010 --> 00:36:44,109
numbers we were<font color="#CCCCCC"> able to get 22 crashes</font>

972
00:36:40,990 --> 00:36:45,790
which is a bit<font color="#E5E5E5"> more but still you need</font>

973
00:36:44,109 --> 00:36:48,279
the full structure<font color="#CCCCCC"> information to get</font>

974
00:36:45,790 --> 00:36:49,990
<font color="#E5E5E5">the remaining 50% increase the 34</font>

975
00:36:48,280 --> 00:36:51,550
crashes<font color="#E5E5E5"> and those ones with the</font>

976
00:36:49,990 --> 00:36:55,029
<font color="#E5E5E5">structure info those will probably</font><font color="#CCCCCC"> be</font>

977
00:36:51,550 --> 00:36:56,980
the deeper and more useful bugs than the

978
00:36:55,030 --> 00:37:01,390
ones where<font color="#E5E5E5"> you</font><font color="#CCCCCC"> just give it the</font><font color="#E5E5E5"> device</font>

979
00:36:56,980 --> 00:37:03,220
and the command numbers oh and one more

980
00:37:01,390 --> 00:37:04,868
thing<font color="#CCCCCC"> although of course some of</font><font color="#E5E5E5"> these</font>

981
00:37:03,220 --> 00:37:07,509
were like<font color="#E5E5E5"> moldy references and not all</font>

982
00:37:04,869 --> 00:37:10,480
exploitable for example on the pixel we

983
00:37:07,510 --> 00:37:12,430
have five crashes<font color="#E5E5E5"> here two of these were</font>

984
00:37:10,480 --> 00:37:14,650
exploitable<font color="#E5E5E5"> one of them we wrote an</font>

985
00:37:12,430 --> 00:37:17,049
exploit<font color="#E5E5E5"> from which could escalate from</font>

986
00:37:14,650 --> 00:37:18,310
audio permissions<font color="#E5E5E5"> to kernel and we've</font>

987
00:37:17,050 --> 00:37:20,319
smooth both these<font color="#CCCCCC"> to Google</font>

988
00:37:18,310 --> 00:37:21,549
unfortunately they're<font color="#CCCCCC"> not public yet</font><font color="#E5E5E5"> so</font>

989
00:37:20,319 --> 00:37:23,650
I can't talk<font color="#E5E5E5"> about those ones</font>

990
00:37:21,550 --> 00:37:25,119
specifically<font color="#E5E5E5"> but I have some other</font><font color="#CCCCCC"> fun</font>

991
00:37:23,650 --> 00:37:29,079
bugs so I'm<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> in these</font>

992
00:37:25,119 --> 00:37:31,660
next<font color="#E5E5E5"> few</font><font color="#CCCCCC"> slides alright</font><font color="#E5E5E5"> so this first</font>

993
00:37:29,079 --> 00:37:34,660
<font color="#E5E5E5">one on</font><font color="#CCCCCC"> media tech we found it</font>

994
00:37:31,660 --> 00:37:36,399
<font color="#E5E5E5">out-of-bounds</font><font color="#CCCCCC"> right and</font><font color="#E5E5E5"> this one's kind</font>

995
00:37:34,660 --> 00:37:37,899
<font color="#CCCCCC">of fun to me because it ends up being</font>

996
00:37:36,400 --> 00:37:40,570
the developers put a

997
00:37:37,900 --> 00:37:42,790
and kind of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> wrong location so let's</font>

998
00:37:40,570 --> 00:37:44,650
look<font color="#E5E5E5"> at what happened in</font><font color="#CCCCCC"> the beginning</font>

999
00:37:42,790 --> 00:37:45,880
they initialize this free ID to negative

1000
00:37:44,650 --> 00:37:49,390
<font color="#CCCCCC">one now they're</font><font color="#E5E5E5"> going to loop through</font>

1001
00:37:45,880 --> 00:37:51,430
<font color="#CCCCCC">this</font><font color="#E5E5E5"> for loop just following this this</font>

1002
00:37:49,390 --> 00:37:53,650
segment<font color="#E5E5E5"> and try to find a new free ID</font>

1003
00:37:51,430 --> 00:37:55,960
and if they can't free ID will still be

1004
00:37:53,650 --> 00:37:57,490
<font color="#E5E5E5">negative one and so down here there's</font>

1005
00:37:55,960 --> 00:38:01,930
<font color="#E5E5E5">this if statement the handles free ID</font>

1006
00:37:57,490 --> 00:38:03,819
negative<font color="#CCCCCC"> one but this alt statement</font><font color="#E5E5E5"> this</font>

1007
00:38:01,930 --> 00:38:05,859
else same is where they<font color="#E5E5E5"> wanted to fix up</font>

1008
00:38:03,820 --> 00:38:08,200
the free ID if it was still<font color="#CCCCCC"> negative</font><font color="#E5E5E5"> one</font>

1009
00:38:05,860 --> 00:38:09,400
<font color="#E5E5E5">and somehow they mess this up and of</font>

1010
00:38:08,200 --> 00:38:11,200
course this will<font color="#E5E5E5"> never happen because</font>

1011
00:38:09,400 --> 00:38:13,960
free ID was<font color="#CCCCCC"> Dave one they'll go in the</font>

1012
00:38:11,200 --> 00:38:15,490
<font color="#E5E5E5">if statement not the else statement so</font>

1013
00:38:13,960 --> 00:38:17,320
you'll get down here free ID is still

1014
00:38:15,490 --> 00:38:19,209
negative one<font color="#E5E5E5"> and you end up with an out</font>

1015
00:38:17,320 --> 00:38:21,910
of<font color="#CCCCCC"> bounds right index negative one and</font>

1016
00:38:19,210 --> 00:38:23,710
this<font color="#E5E5E5"> is actually a pretty</font><font color="#CCCCCC"> useful right</font>

1017
00:38:21,910 --> 00:38:26,379
<font color="#E5E5E5">it'll write something some very useful</font>

1018
00:38:23,710 --> 00:38:28,270
<font color="#CCCCCC">pointer so we were able to make an</font>

1019
00:38:26,380 --> 00:38:32,290
exploit to escalate from any app on this

1020
00:38:28,270 --> 00:38:34,210
phone<font color="#CCCCCC"> to curl permissions all right and</font>

1021
00:38:32,290 --> 00:38:36,130
then this next bug<font color="#CCCCCC"> I really like this</font>

1022
00:38:34,210 --> 00:38:39,550
one because<font color="#E5E5E5"> it's actually a bug in the</font>

1023
00:38:36,130 --> 00:38:41,830
bug function itself<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we'll</font><font color="#E5E5E5"> we were</font>

1024
00:38:39,550 --> 00:38:43,960
fuzzing we saw this in<font color="#E5E5E5"> the last</font><font color="#CCCCCC"> K</font>

1025
00:38:41,830 --> 00:38:46,180
message<font color="#E5E5E5"> unable to handle kernel paging</font>

1026
00:38:43,960 --> 00:38:47,380
<font color="#CCCCCC">request</font><font color="#E5E5E5"> at virtual address zero zero</font>

1027
00:38:46,180 --> 00:38:51,580
<font color="#E5E5E5">zero zero dead</font>

1028
00:38:47,380 --> 00:38:53,290
<font color="#CCCCCC">DEA D now that looks like a</font><font color="#E5E5E5"> surf failure</font>

1029
00:38:51,580 --> 00:38:55,900
or something<font color="#CCCCCC"> and of course it was in the</font>

1030
00:38:53,290 --> 00:38:57,640
bug<font color="#E5E5E5"> handler they wrote their own bug</font>

1031
00:38:55,900 --> 00:39:01,330
<font color="#CCCCCC">Handler that just tried</font><font color="#E5E5E5"> writing to</font>

1032
00:38:57,640 --> 00:39:03,580
extend to kill the kernel and of course

1033
00:39:01,330 --> 00:39:06,610
this is a mistake<font color="#CCCCCC"> because you can</font><font color="#E5E5E5"> just</font>

1034
00:39:03,580 --> 00:39:08,740
end<font color="#CCCCCC"> map at oh XD 0 0 0 and then</font><font color="#E5E5E5"> the</font>

1035
00:39:06,610 --> 00:39:11,560
kernel will try<font color="#CCCCCC"> writing there and it'll</font>

1036
00:39:08,740 --> 00:39:13,000
<font color="#E5E5E5">just work because there's no or on most</font>

1037
00:39:11,560 --> 00:39:15,070
<font color="#E5E5E5">Android phones there's no permission</font>

1038
00:39:13,000 --> 00:39:17,560
control preventing the kernel<font color="#E5E5E5"> from</font>

1039
00:39:15,070 --> 00:39:19,750
writing to<font color="#E5E5E5"> user land and so if you add</font>

1040
00:39:17,560 --> 00:39:22,600
<font color="#CCCCCC">map there ahead</font><font color="#E5E5E5"> of time you</font><font color="#CCCCCC"> can just</font>

1041
00:39:19,750 --> 00:39:24,250
<font color="#E5E5E5">bypass these bug or</font><font color="#CCCCCC"> cert macros</font><font color="#E5E5E5"> it's</font>

1042
00:39:22,600 --> 00:39:27,430
used for<font color="#CCCCCC"> all the cert macros in the</font>

1043
00:39:24,250 --> 00:39:29,170
kernel<font color="#CCCCCC"> and</font><font color="#E5E5E5"> so all asserts that became</font>

1044
00:39:27,430 --> 00:39:32,830
worthless<font color="#E5E5E5"> and you could skip them and</font>

1045
00:39:29,170 --> 00:39:35,380
trigger some memory corruption<font color="#E5E5E5"> and then</font>

1046
00:39:32,830 --> 00:39:37,779
a last bug we found one time while we're

1047
00:39:35,380 --> 00:39:40,270
fuzzing one device suddenly the fuzz

1048
00:39:37,780 --> 00:39:42,250
reporter can find it we plugged the

1049
00:39:40,270 --> 00:39:44,290
<font color="#E5E5E5">unplugged device plug it back in as</font>

1050
00:39:42,250 --> 00:39:46,990
<font color="#E5E5E5">usual to try to reset it still doesn't</font>

1051
00:39:44,290 --> 00:39:49,270
<font color="#E5E5E5">work unplug turn the device off turn</font>

1052
00:39:46,990 --> 00:39:50,799
back on<font color="#CCCCCC"> plug</font><font color="#E5E5E5"> in still can't find it we</font>

1053
00:39:49,270 --> 00:39:53,288
look<font color="#E5E5E5"> more closely in the serial</font>

1054
00:39:50,799 --> 00:39:56,259
verse changed<font color="#E5E5E5"> to that random string</font>

1055
00:39:53,289 --> 00:39:59,499
there so the device we were<font color="#CCCCCC"> fuzzing</font>

1056
00:39:56,259 --> 00:40:01,929
apparently let you write<font color="#E5E5E5"> to</font><font color="#CCCCCC"> an vram</font>

1057
00:39:59,499 --> 00:40:03,160
which is non-volatile memory and you

1058
00:40:01,929 --> 00:40:07,239
should never be<font color="#E5E5E5"> able to write</font><font color="#CCCCCC"> to</font>

1059
00:40:03,160 --> 00:40:10,598
<font color="#CCCCCC">nvram as any normal or user or even root</font>

1060
00:40:07,239 --> 00:40:13,569
on the<font color="#E5E5E5"> phone and so I think that also</font>

1061
00:40:10,599 --> 00:40:15,999
was due to an<font color="#E5E5E5"> out of bounds</font><font color="#CCCCCC"> index as</font>

1062
00:40:13,569 --> 00:40:17,619
<font color="#CCCCCC">well that well you there was some spot</font>

1063
00:40:15,999 --> 00:40:20,379
they actually intended you<font color="#CCCCCC"> to write in</font>

1064
00:40:17,619 --> 00:40:21,880
there<font color="#E5E5E5"> but either way we ended up</font>

1065
00:40:20,380 --> 00:40:23,769
<font color="#CCCCCC">overwriting</font><font color="#E5E5E5"> the serial number you could</font>

1066
00:40:21,880 --> 00:40:25,449
change all sorts<font color="#CCCCCC"> of stuff including like</font>

1067
00:40:23,769 --> 00:40:27,819
the eye<font color="#E5E5E5"> and the eye and other important</font>

1068
00:40:25,449 --> 00:40:32,469
<font color="#E5E5E5">information and permanently damage the</font>

1069
00:40:27,819 --> 00:40:35,319
<font color="#E5E5E5">device alright some of the future</font><font color="#CCCCCC"> work</font>

1070
00:40:32,469 --> 00:40:38,549
<font color="#CCCCCC">that still needs</font><font color="#E5E5E5"> happen to make this to</font>

1071
00:40:35,319 --> 00:40:41,079
continue<font color="#E5E5E5"> find big bugs with this project</font>

1072
00:40:38,549 --> 00:40:44,229
<font color="#CCCCCC">on most</font><font color="#E5E5E5"> these phones it's very hard to</font>

1073
00:40:41,079 --> 00:40:46,539
compile with<font color="#E5E5E5"> case an and</font><font color="#CCCCCC"> K coverage case</font>

1074
00:40:44,229 --> 00:40:49,989
<font color="#E5E5E5">an is very user useful</font><font color="#CCCCCC"> because it will</font>

1075
00:40:46,539 --> 00:40:51,759
report crashes<font color="#E5E5E5"> much</font><font color="#CCCCCC"> so that</font><font color="#E5E5E5"> sometimes</font>

1076
00:40:49,989 --> 00:40:53,799
you won't<font color="#E5E5E5"> score will report bugs so that</font>

1077
00:40:51,759 --> 00:40:56,229
<font color="#E5E5E5">sometimes might not result in crashes</font>

1078
00:40:53,799 --> 00:40:58,239
immediately so like if there's a use

1079
00:40:56,229 --> 00:40:59,828
after<font color="#CCCCCC"> three at all it'll</font><font color="#E5E5E5"> detect it and</font>

1080
00:40:58,239 --> 00:41:02,319
report<font color="#E5E5E5"> it to you and you don't have to</font>

1081
00:40:59,829 --> 00:41:04,089
wait<font color="#CCCCCC"> for that user</font><font color="#E5E5E5"> after</font><font color="#CCCCCC"> for you to be</font>

1082
00:41:02,319 --> 00:41:07,779
<font color="#E5E5E5">using a pointer or something</font><font color="#CCCCCC"> else to do</font>

1083
00:41:04,089 --> 00:41:10,390
<font color="#E5E5E5">control K coverage</font><font color="#CCCCCC"> sis car can use the</font>

1084
00:41:07,779 --> 00:41:12,130
coverage info to try to perform better

1085
00:41:10,390 --> 00:41:13,449
fuzzing and<font color="#CCCCCC"> I guess that's one of those</font>

1086
00:41:12,130 --> 00:41:15,839
<font color="#E5E5E5">really strong points to perform</font>

1087
00:41:13,449 --> 00:41:18,670
mutational fuzzing by knowing what

1088
00:41:15,839 --> 00:41:20,558
functionality is triggered and again

1089
00:41:18,670 --> 00:41:21,939
it's<font color="#CCCCCC"> hard to compile this into</font><font color="#E5E5E5"> most</font>

1090
00:41:20,559 --> 00:41:24,249
phones I think the only<font color="#E5E5E5"> one we've been</font>

1091
00:41:21,939 --> 00:41:27,538
<font color="#E5E5E5">able to do with case an and K curve as a</font>

1092
00:41:24,249 --> 00:41:29,859
pixel<font color="#CCCCCC"> and of course you can run this</font>

1093
00:41:27,539 --> 00:41:32,019
fuzzing on more phones you<font color="#E5E5E5"> can res</font>

1094
00:41:29,859 --> 00:41:36,640
<font color="#CCCCCC">intent on standard Linux drivers and</font>

1095
00:41:32,019 --> 00:41:38,678
other devices and<font color="#CCCCCC"> in conclusion</font><font color="#E5E5E5"> driver</font>

1096
00:41:36,640 --> 00:41:41,799
fuzzing can yield a lot<font color="#E5E5E5"> of bugs as we've</font>

1097
00:41:38,679 --> 00:41:43,929
shown but one important aspect<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that</font>

1098
00:41:41,799 --> 00:41:45,759
you need<font color="#CCCCCC"> to model</font><font color="#E5E5E5"> the interface</font>

1099
00:41:43,929 --> 00:41:47,589
correctly<font color="#E5E5E5"> if you don't model the</font>

1100
00:41:45,759 --> 00:41:50,170
interface correctly you're<font color="#CCCCCC"> gonna miss</font>

1101
00:41:47,589 --> 00:41:52,140
out<font color="#CCCCCC"> on</font><font color="#E5E5E5"> most of functionality and you</font>

1102
00:41:50,170 --> 00:41:55,410
won't be<font color="#E5E5E5"> able to hit lots of these bugs</font>

1103
00:41:52,140 --> 00:41:57,819
but fortunately<font color="#CCCCCC"> defuse our tool</font>

1104
00:41:55,410 --> 00:42:01,118
automatically extracts<font color="#E5E5E5"> this info for you</font>

1105
00:41:57,819 --> 00:42:03,880
<font color="#E5E5E5">and can be used for to make this</font><font color="#CCCCCC"> fuzzing</font>

1106
00:42:01,119 --> 00:42:07,990
easy<font color="#E5E5E5"> it's available online on</font>

1107
00:42:03,880 --> 00:42:10,269
<font color="#CCCCCC">Hubb</font><font color="#E5E5E5"> github.com</font><font color="#CCCCCC"> / UCSB SEC</font><font color="#E5E5E5"> lab /</font><font color="#CCCCCC"> defuse</font>

1108
00:42:07,990 --> 00:42:13,689
you can go try<font color="#CCCCCC"> it out and fuzz</font><font color="#E5E5E5"> things</font>

1109
00:42:10,269 --> 00:42:15,459
yourself<font color="#E5E5E5"> awesome</font><font color="#CCCCCC"> thanks for coming to</font>

1110
00:42:13,690 --> 00:42:22,930
talk and<font color="#CCCCCC"> we'll now take</font><font color="#E5E5E5"> questions from</font>

1111
00:42:15,460 --> 00:42:25,079
the<font color="#E5E5E5"> audience yeah they're bringing him</font>

1112
00:42:22,930 --> 00:42:25,078
<font color="#E5E5E5">up</font>

1113
00:42:35,769 --> 00:42:40,788
hello Stefan<font color="#E5E5E5"> from Seoul from Austria</font>

1114
00:42:38,539 --> 00:42:42,559
<font color="#E5E5E5">quick question on the pixel you were</font>

1115
00:42:40,789 --> 00:42:44,809
able<font color="#CCCCCC"> to compile it with coverage</font>

1116
00:42:42,559 --> 00:42:46,700
information<font color="#CCCCCC"> I'd be very interested on</font>

1117
00:42:44,809 --> 00:42:49,220
<font color="#CCCCCC">what</font><font color="#E5E5E5"> kind of code coverage level you</font>

1118
00:42:46,700 --> 00:42:52,640
were<font color="#E5E5E5"> able to reach because - I was</font><font color="#CCCCCC"> in my</font>

1119
00:42:49,220 --> 00:42:55,669
my experience<font color="#CCCCCC"> our stateful</font><font color="#E5E5E5"> rather than</font>

1120
00:42:52,640 --> 00:42:57,470
stateless so some code paths<font color="#CCCCCC"> only</font>

1121
00:42:55,670 --> 00:42:59,750
<font color="#E5E5E5">trigger if you have some triggered some</font>

1122
00:42:57,470 --> 00:43:01,399
some<font color="#E5E5E5"> other code</font><font color="#CCCCCC"> path before</font><font color="#E5E5E5"> so I would</font>

1123
00:42:59,750 --> 00:43:03,980
be<font color="#CCCCCC"> interested in your results</font><font color="#E5E5E5"> in that</font>

1124
00:43:01,400 --> 00:43:06,980
area<font color="#E5E5E5"> do we have I don't think we have</font>

1125
00:43:03,980 --> 00:43:08,569
any coverage<font color="#CCCCCC"> yeah we actually</font><font color="#E5E5E5"> knew we</font>

1126
00:43:06,980 --> 00:43:10,369
were getting<font color="#E5E5E5"> so many crashes</font><font color="#CCCCCC"> with just</font>

1127
00:43:08,569 --> 00:43:11,930
<font color="#CCCCCC">casein we didn't even attempt with cake</font>

1128
00:43:10,369 --> 00:43:15,980
of it was we had been overwhelming<font color="#CCCCCC"> for</font>

1129
00:43:11,930 --> 00:43:19,009
us<font color="#E5E5E5"> we we still have more crashes to look</font>

1130
00:43:15,980 --> 00:43:21,140
into<font color="#CCCCCC"> there at this point I don't think</font>

1131
00:43:19,009 --> 00:43:23,960
<font color="#CCCCCC">we've yeah ever looked into us</font><font color="#E5E5E5"> for</font>

1132
00:43:21,140 --> 00:43:27,200
coverage<font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> also you've been fine</font>

1133
00:43:23,960 --> 00:43:28,730
crash check it often we<font color="#E5E5E5"> patched some of</font>

1134
00:43:27,200 --> 00:43:30,950
the<font color="#CCCCCC"> nolde references or whatever and</font>

1135
00:43:28,730 --> 00:43:35,740
keeping<font color="#CCCCCC"> anymore crashes of course has</font>

1136
00:43:30,950 --> 00:43:35,740
been lot<font color="#CCCCCC"> of phones</font><font color="#E5E5E5"> yeah sorry</font>

1137
00:43:39,750 --> 00:43:45,400
does any of<font color="#E5E5E5"> your work assume things like</font>

1138
00:43:43,120 --> 00:43:47,740
the<font color="#CCCCCC"> devices</font><font color="#E5E5E5"> being routed</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> you have</font>

1139
00:43:45,400 --> 00:43:50,380
root access<font color="#E5E5E5"> to do some of these hands</font>

1140
00:43:47,740 --> 00:43:52,990
<font color="#E5E5E5">yeah yeah it does</font><font color="#CCCCCC"> so it doesn't have</font><font color="#E5E5E5"> to</font>

1141
00:43:50,380 --> 00:43:54,640
be but it's the most<font color="#E5E5E5"> useful you'll get</font>

1142
00:43:52,990 --> 00:43:56,589
the<font color="#E5E5E5"> most coverage if your</font><font color="#CCCCCC"> root because</font>

1143
00:43:54,640 --> 00:43:58,509
you know even<font color="#CCCCCC"> though</font><font color="#E5E5E5"> from like an</font>

1144
00:43:56,590 --> 00:43:59,680
exploitation perspective<font color="#E5E5E5"> maybe it's not</font>

1145
00:43:58,510 --> 00:44:01,450
it's interesting that you need to have

1146
00:43:59,680 --> 00:44:02,770
like audio permissions<font color="#CCCCCC"> as a starting</font>

1147
00:44:01,450 --> 00:44:05,169
permission<font color="#E5E5E5"> but</font><font color="#CCCCCC"> I mean</font><font color="#E5E5E5"> that's still like</font>

1148
00:44:02,770 --> 00:44:06,820
a valid bug and so yeah we<font color="#E5E5E5"> run</font><font color="#CCCCCC"> his route</font>

1149
00:44:05,170 --> 00:44:09,190
so<font color="#E5E5E5"> that we can touch any</font><font color="#CCCCCC"> drive every one</font>

1150
00:44:06,820 --> 00:44:11,620
then maybe a suggestion<font color="#E5E5E5"> as a follow-up</font>

1151
00:44:09,190 --> 00:44:14,410
suggestion for the part that<font color="#CCCCCC"> you you</font>

1152
00:44:11,620 --> 00:44:16,420
said<font color="#CCCCCC"> that is</font><font color="#E5E5E5"> probably the one that you</font>

1153
00:44:14,410 --> 00:44:19,779
need to work a<font color="#CCCCCC"> bit more</font><font color="#E5E5E5"> maybe you can</font>

1154
00:44:16,420 --> 00:44:22,600
just list the dev files and then try to

1155
00:44:19,780 --> 00:44:26,230
do I<font color="#CCCCCC"> open with a</font><font color="#E5E5E5"> given number on them</font>

1156
00:44:22,600 --> 00:44:28,440
and see what happens<font color="#CCCCCC"> okay yeah yeah</font><font color="#E5E5E5"> make</font>

1157
00:44:26,230 --> 00:44:28,440
sense

1158
00:44:30,780 --> 00:44:39,040
<font color="#E5E5E5">hey did you run any benchmarks about</font>

1159
00:44:34,800 --> 00:44:42,040
<font color="#CCCCCC">time some minutes hours took for both</font>

1160
00:44:39,040 --> 00:44:45,130
<font color="#E5E5E5">the static phase and</font><font color="#CCCCCC"> those</font><font color="#E5E5E5"> of a fuzzy</font>

1161
00:44:42,040 --> 00:44:46,600
face yeah we<font color="#CCCCCC"> definitely did I</font><font color="#E5E5E5"> don't</font>

1162
00:44:45,130 --> 00:44:48,010
<font color="#E5E5E5">remember them off top of my head the</font>

1163
00:44:46,600 --> 00:44:49,930
static<font color="#CCCCCC"> phase doesn't</font><font color="#E5E5E5"> take that long</font>

1164
00:44:48,010 --> 00:44:50,950
right it well I<font color="#E5E5E5"> mean it depends on like</font>

1165
00:44:49,930 --> 00:44:52,450
what kind machine you're running it on

1166
00:44:50,950 --> 00:44:54,040
there<font color="#E5E5E5"> of course right now</font><font color="#CCCCCC"> forty core</font>

1167
00:44:52,450 --> 00:44:55,629
machine takes like blood under an hour

1168
00:44:54,040 --> 00:44:57,580
or two<font color="#CCCCCC"> hours</font>

1169
00:44:55,630 --> 00:44:59,110
<font color="#E5E5E5">yeah it'll vary depending on how many</font>

1170
00:44:57,580 --> 00:45:01,029
<font color="#E5E5E5">like ionic go handle is it finds and</font>

1171
00:44:59,110 --> 00:45:02,620
stuff<font color="#E5E5E5"> if you look so this is actually a</font>

1172
00:45:01,030 --> 00:45:04,300
<font color="#CCCCCC">CCS paper as well so we</font><font color="#E5E5E5"> have all the</font>

1173
00:45:02,620 --> 00:45:05,950
timing information<font color="#CCCCCC"> and the paper</font><font color="#E5E5E5"> itself</font>

1174
00:45:04,300 --> 00:45:13,020
<font color="#CCCCCC">I don't know what off the top my head</font>

1175
00:45:05,950 --> 00:45:13,020
I'm sorry next question in the back

1176
00:45:20,350 --> 00:45:28,279
hi my name<font color="#E5E5E5"> is Bernie good heart so you</font>

1177
00:45:25,180 --> 00:45:31,040
<font color="#CCCCCC">talked about aisles and how you've</font>

1178
00:45:28,280 --> 00:45:34,850
passed them to<font color="#CCCCCC"> get or</font><font color="#E5E5E5"> the parameters and</font>

1179
00:45:31,040 --> 00:45:37,820
so on<font color="#CCCCCC"> and using you use a copy to copy</font>

1180
00:45:34,850 --> 00:45:40,339
in them<font color="#E5E5E5"> but you can't use</font><font color="#CCCCCC"> the I octal</font>

1181
00:45:37,820 --> 00:45:43,040
until<font color="#CCCCCC"> you've opened the devices and</font><font color="#E5E5E5"> in</font>

1182
00:45:40,340 --> 00:45:49,070
order<font color="#E5E5E5"> to open them you need</font><font color="#CCCCCC"> to specify</font>

1183
00:45:43,040 --> 00:45:52,100
the<font color="#E5E5E5"> correct</font><font color="#CCCCCC"> I'll be</font><font color="#E5E5E5"> oxy and so on so</font>

1184
00:45:49,070 --> 00:45:57,200
what<font color="#E5E5E5"> I'm saying is this</font><font color="#CCCCCC"> D</font><font color="#E5E5E5"> pass the open</font>

1185
00:45:52,100 --> 00:45:58,430
as well in<font color="#E5E5E5"> order</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> yeah so some of the</font>

1186
00:45:57,200 --> 00:46:00,859
interface information we have is like

1187
00:45:58,430 --> 00:46:03,529
the<font color="#CCCCCC"> path to the device</font><font color="#E5E5E5"> so yeah we can</font><font color="#CCCCCC"> we</font>

1188
00:46:00,860 --> 00:46:05,690
can<font color="#CCCCCC"> open it hey I know maybe</font><font color="#E5E5E5"> I've</font>

1189
00:46:03,530 --> 00:46:07,430
misunderstood thinking a question<font color="#CCCCCC"> I'm</font>

1190
00:46:05,690 --> 00:46:09,050
just<font color="#CCCCCC"> saying like you know once you've</font>

1191
00:46:07,430 --> 00:46:10,700
opened up<font color="#E5E5E5"> the device and</font><font color="#CCCCCC"> you you can</font>

1192
00:46:09,050 --> 00:46:12,020
<font color="#CCCCCC">then get</font><font color="#E5E5E5"> to the</font><font color="#CCCCCC"> I octal yeah you can't</font>

1193
00:46:10,700 --> 00:46:13,910
get to the alcohol<font color="#E5E5E5"> till you've opened up</font>

1194
00:46:12,020 --> 00:46:18,590
the device<font color="#CCCCCC"> right</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> in order</font><font color="#CCCCCC"> to</font>

1195
00:46:13,910 --> 00:46:21,790
open<font color="#CCCCCC"> the</font><font color="#E5E5E5"> device</font><font color="#CCCCCC"> it's not just as</font><font color="#E5E5E5"> simple</font>

1196
00:46:18,590 --> 00:46:28,400
<font color="#E5E5E5">as saying open</font><font color="#CCCCCC"> / dev whatever whatever</font>

1197
00:46:21,790 --> 00:46:30,140
<font color="#E5E5E5">why because a lot</font><font color="#CCCCCC"> of devices</font><font color="#E5E5E5"> will refuse</font>

1198
00:46:28,400 --> 00:46:34,220
<font color="#CCCCCC">to open</font><font color="#E5E5E5"> unless they've</font><font color="#CCCCCC"> got the full</font>

1199
00:46:30,140 --> 00:46:38,870
<font color="#CCCCCC">argument structure</font><font color="#E5E5E5"> before they're</font>

1200
00:46:34,220 --> 00:46:40,819
<font color="#CCCCCC">already maybe we should talk after it</font>

1201
00:46:38,870 --> 00:46:42,830
cuz<font color="#CCCCCC"> okay as far</font><font color="#E5E5E5"> as I understand this</font>

1202
00:46:40,820 --> 00:46:44,420
should be<font color="#CCCCCC"> Freud and there's the device</font>

1203
00:46:42,830 --> 00:46:46,040
is<font color="#CCCCCC"> already a conditional</font><font color="#E5E5E5"> is everything</font>

1204
00:46:44,420 --> 00:46:48,020
<font color="#E5E5E5">and well yeah I'll talk</font><font color="#CCCCCC"> to you offline</font>

1205
00:46:46,040 --> 00:46:49,940
I'll talk to<font color="#E5E5E5"> you I just</font>

1206
00:46:48,020 --> 00:46:51,710
sorry I've<font color="#CCCCCC"> got one other question</font><font color="#E5E5E5"> it</font>

1207
00:46:49,940 --> 00:46:59,330
<font color="#E5E5E5">seems to me that the magic in this is in</font>

1208
00:46:51,710 --> 00:47:03,800
the the<font color="#E5E5E5"> Python build that ye sorry no in</font>

1209
00:46:59,330 --> 00:47:06,890
the clang build<font color="#E5E5E5"> what engine you used</font>

1210
00:47:03,800 --> 00:47:10,370
there<font color="#CCCCCC"> to decipher all the</font><font color="#E5E5E5"> I octal</font>

1211
00:47:06,890 --> 00:47:12,770
information and so<font color="#E5E5E5"> on but you</font><font color="#CCCCCC"> using the</font>

1212
00:47:10,370 --> 00:47:15,109
source code of<font color="#E5E5E5"> the entire</font><font color="#CCCCCC"> mainline tree</font>

1213
00:47:12,770 --> 00:47:18,050
there are you just a<font color="#E5E5E5"> specific device</font>

1214
00:47:15,110 --> 00:47:18,650
drivers the whole tree the<font color="#CCCCCC"> holy tree</font>

1215
00:47:18,050 --> 00:47:21,350
<font color="#E5E5E5">yeah</font>

1216
00:47:18,650 --> 00:47:22,880
so if you've well I'm getting a bit

1217
00:47:21,350 --> 00:47:24,410
<font color="#CCCCCC">confused on</font><font color="#E5E5E5"> maybe I miss the point and</font>

1218
00:47:22,880 --> 00:47:26,540
we should<font color="#E5E5E5"> probably talk offline I don't</font>

1219
00:47:24,410 --> 00:47:27,660
have anybody<font color="#CCCCCC"> else's interests but if</font>

1220
00:47:26,540 --> 00:47:31,740
you've<font color="#CCCCCC"> got</font><font color="#E5E5E5"> the entire</font><font color="#CCCCCC"> so</font>

1221
00:47:27,660 --> 00:47:34,799
<font color="#CCCCCC">cotry why don't you just</font><font color="#E5E5E5"> pass the actual</font>

1222
00:47:31,740 --> 00:47:37,680
code proper<font color="#CCCCCC"> it's actually a lot harder</font>

1223
00:47:34,799 --> 00:47:39,720
<font color="#E5E5E5">than then you would</font><font color="#CCCCCC"> think parsing the C</font>

1224
00:47:37,680 --> 00:47:43,710
code as opposed<font color="#CCCCCC"> to well you just</font><font color="#E5E5E5"> used in</font>

1225
00:47:39,720 --> 00:47:46,288
the<font color="#CCCCCC"> preprocessors do so we do</font><font color="#E5E5E5"> just use</font>

1226
00:47:43,710 --> 00:47:50,039
the C preprocessor then generate<font color="#E5E5E5"> the bit</font>

1227
00:47:46,289 --> 00:47:53,400
code<font color="#CCCCCC"> we're and then</font><font color="#E5E5E5"> it's pretty easy to</font>

1228
00:47:50,039 --> 00:47:55,710
parse it inside<font color="#E5E5E5"> LLVM and</font><font color="#CCCCCC"> I guess you</font>

1229
00:47:53,400 --> 00:47:58,109
could be the<font color="#CCCCCC"> parse it in source</font><font color="#E5E5E5"> code</font><font color="#CCCCCC"> I</font>

1230
00:47:55,710 --> 00:48:05,339
don't know that gives you much<font color="#CCCCCC"> of</font>

1231
00:47:58,109 --> 00:48:07,650
<font color="#E5E5E5">advantage over doing</font><font color="#CCCCCC"> LLVM yeah yeah</font><font color="#E5E5E5"> I've</font>

1232
00:48:05,339 --> 00:48:11,910
done<font color="#E5E5E5"> this before</font><font color="#CCCCCC"> long time we own UNIX</font>

1233
00:48:07,650 --> 00:48:18,319
<font color="#CCCCCC">system so I'll talk</font><font color="#E5E5E5"> to you</font><font color="#CCCCCC"> anyway</font>

1234
00:48:11,910 --> 00:48:18,319
okay thanks<font color="#E5E5E5"> what's the next question</font>

1235
00:48:32,680 --> 00:48:37,250
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> I think I missed something</font><font color="#E5E5E5"> but</font>

1236
00:48:35,029 --> 00:48:39,829
the in the case of the structures that

1237
00:48:37,250 --> 00:48:43,549
<font color="#E5E5E5">has a pointer</font><font color="#CCCCCC"> to another structure did</font>

1238
00:48:39,829 --> 00:48:46,309
you as the impotent<font color="#E5E5E5"> analysis for I mean</font>

1239
00:48:43,549 --> 00:48:48,799
using<font color="#E5E5E5"> a crime a recursive because lik</font>

1240
00:48:46,309 --> 00:48:53,720
recursively<font color="#E5E5E5"> Turner's is the structure</font>

1241
00:48:48,799 --> 00:49:01,009
<font color="#E5E5E5">right yeah and how that's how deep did</font>

1242
00:48:53,720 --> 00:49:03,470
you go through the structures<font color="#CCCCCC"> recursive</font>

1243
00:49:01,010 --> 00:49:05,569
field<font color="#E5E5E5"> I think</font><font color="#CCCCCC"> we go and then we</font><font color="#E5E5E5"> just</font>

1244
00:49:03,470 --> 00:49:09,500
said the<font color="#E5E5E5"> next the next recursive field</font>

1245
00:49:05,569 --> 00:49:11,960
to be null<font color="#E5E5E5"> Zuri's it's part of the</font>

1246
00:49:09,500 --> 00:49:12,920
pardon<font color="#E5E5E5"> so what if it's a recursive</font>

1247
00:49:11,960 --> 00:49:16,039
structure is that<font color="#CCCCCC"> what you're asking</font>

1248
00:49:12,920 --> 00:49:17,510
<font color="#E5E5E5">about yeah yeah</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right okay</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> what</font>

1249
00:49:16,039 --> 00:49:19,309
the structure has done<font color="#CCCCCC"> under</font><font color="#E5E5E5"> it's a</font>

1250
00:49:17,510 --> 00:49:22,099
pointer to<font color="#CCCCCC"> honor</font><font color="#E5E5E5"> the structure yeah</font>

1251
00:49:19,309 --> 00:49:23,510
<font color="#E5E5E5">sometimes sometimes I'm from my</font>

1252
00:49:22,099 --> 00:49:26,539
<font color="#E5E5E5">experience</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> some structure has a</font>

1253
00:49:23,510 --> 00:49:28,940
<font color="#E5E5E5">menu level so the request was to</font><font color="#CCCCCC"> point</font>

1254
00:49:26,539 --> 00:49:32,569
<font color="#E5E5E5">to</font><font color="#CCCCCC"> another structure yeah so did you or</font>

1255
00:49:28,940 --> 00:49:35,180
did<font color="#CCCCCC"> you go</font><font color="#E5E5E5"> always go straight to the end</font>

1256
00:49:32,569 --> 00:49:37,880
of the<font color="#E5E5E5"> endo with</font><font color="#CCCCCC"> a recursive</font><font color="#E5E5E5"> structure</font>

1257
00:49:35,180 --> 00:49:39,828
over<font color="#CCCCCC"> having</font><font color="#E5E5E5"> some limitation to request</font>

1258
00:49:37,880 --> 00:49:41,750
<font color="#CCCCCC">well</font><font color="#E5E5E5"> that that's we go until it ends</font>

1259
00:49:39,829 --> 00:49:43,760
unless<font color="#E5E5E5"> it loops</font><font color="#CCCCCC"> back around so you get a</font>

1260
00:49:41,750 --> 00:49:44,990
pointer to if you<font color="#E5E5E5"> have like a next</font>

1261
00:49:43,760 --> 00:49:47,119
pointer and it's important to<font color="#E5E5E5"> the same</font>

1262
00:49:44,990 --> 00:49:49,098
structure that could go forever<font color="#CCCCCC"> and so</font>

1263
00:49:47,119 --> 00:49:51,920
in that case in our<font color="#E5E5E5"> fuzzer we limit it</font>

1264
00:49:49,099 --> 00:49:53,930
<font color="#CCCCCC">i'm sure</font><font color="#E5E5E5"> says car might handle a</font><font color="#CCCCCC"> little</font>

1265
00:49:51,920 --> 00:49:56,299
bit differently and<font color="#E5E5E5"> try</font><font color="#CCCCCC"> different levels</font>

1266
00:49:53,930 --> 00:49:58,069
but we just<font color="#CCCCCC"> limit it to if there's a</font>

1267
00:49:56,299 --> 00:50:00,619
recursive one where it's the exact<font color="#E5E5E5"> same</font>

1268
00:49:58,069 --> 00:50:02,839
<font color="#E5E5E5">structures reached again in this loop we</font>

1269
00:50:00,619 --> 00:50:05,799
limited and do<font color="#E5E5E5"> an old structure there</font>

1270
00:50:02,839 --> 00:50:09,190
<font color="#E5E5E5">thank you</font>

1271
00:50:05,799 --> 00:50:09,190
next question

1272
00:50:19,570 --> 00:50:23,280
sure you don't have any more<font color="#E5E5E5"> questions</font>

1273
00:50:26,580 --> 00:50:31,000
<font color="#E5E5E5">so since you're already compiling the</font>

1274
00:50:28,990 --> 00:50:33,399
code<font color="#E5E5E5"> have you thought about using this</font>

1275
00:50:31,000 --> 00:50:37,240
essentially as static code analysis and

1276
00:50:33,400 --> 00:50:39,400
feeding<font color="#E5E5E5"> your your fossil</font><font color="#CCCCCC"> you said you</font>

1277
00:50:37,240 --> 00:50:40,209
have some edge cases for integer off by

1278
00:50:39,400 --> 00:50:42,220
ones<font color="#E5E5E5"> and so on</font>

1279
00:50:40,210 --> 00:50:45,100
feeding it essentially the<font color="#E5E5E5"> code paths</font>

1280
00:50:42,220 --> 00:50:47,410
that are triggered by some<font color="#CCCCCC"> specific app</font>

1281
00:50:45,100 --> 00:50:49,450
<font color="#CCCCCC">is some inputs so if you look into in</font>

1282
00:50:47,410 --> 00:50:52,140
there if this<font color="#E5E5E5"> fight is set to this then</font>

1283
00:50:49,450 --> 00:50:52,140
do this<font color="#CCCCCC"> and that</font>

1284
00:50:52,740 --> 00:50:59,259
we haven't really done anything there<font color="#CCCCCC"> I</font>

1285
00:50:56,410 --> 00:51:02,020
could<font color="#E5E5E5"> definitely see ways you could use</font>

1286
00:50:59,260 --> 00:51:05,320
<font color="#CCCCCC">the actually like instrumented or watch</font>

1287
00:51:02,020 --> 00:51:08,200
which paths are covered here to do

1288
00:51:05,320 --> 00:51:10,180
further to try<font color="#E5E5E5"> to trigger the specific</font>

1289
00:51:08,200 --> 00:51:14,200
ones or maybe edge cases<font color="#CCCCCC"> you're missing</font>

1290
00:51:10,180 --> 00:51:16,180
and giving<font color="#CCCCCC"> sis car</font><font color="#E5E5E5"> cake of information</font>

1291
00:51:14,200 --> 00:51:23,290
can also hit some<font color="#CCCCCC"> of these paths they're</font>

1292
00:51:16,180 --> 00:51:24,609
missing<font color="#E5E5E5"> okay thank you one more I</font><font color="#CCCCCC"> think</font>

1293
00:51:23,290 --> 00:51:26,380
to note there<font color="#E5E5E5"> also there's like a</font>

1294
00:51:24,610 --> 00:51:28,420
brother paper to this called<font color="#CCCCCC"> doctor</font>

1295
00:51:26,380 --> 00:51:29,920
checker which takes all<font color="#E5E5E5"> this</font><font color="#CCCCCC"> LLVM</font><font color="#E5E5E5"> bit</font>

1296
00:51:28,420 --> 00:51:31,540
code<font color="#E5E5E5"> and it does just do like</font><font color="#CCCCCC"> just</font>

1297
00:51:29,920 --> 00:51:37,390
static<font color="#E5E5E5"> analysis on it</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> so that</font>

1298
00:51:31,540 --> 00:51:41,080
<font color="#CCCCCC">yeah have you heard of</font><font color="#E5E5E5"> a button back yet</font>

1299
00:51:37,390 --> 00:51:43,690
called<font color="#CCCCCC"> C times GN</font><font color="#E5E5E5"> that generates</font><font color="#CCCCCC"> Python</font>

1300
00:51:41,080 --> 00:51:45,910
<font color="#CCCCCC">structures from sister truth because it</font>

1301
00:51:43,690 --> 00:51:48,940
seems<font color="#E5E5E5"> that it does what</font><font color="#CCCCCC"> your you're</font>

1302
00:51:45,910 --> 00:51:54,609
<font color="#E5E5E5">doing no I had not heard of that okay</font>

1303
00:51:48,940 --> 00:51:57,000
<font color="#E5E5E5">that sounds can look at it yes next</font>

1304
00:51:54,610 --> 00:51:57,000
<font color="#CCCCCC">question</font>

1305
00:52:00,540 --> 00:52:07,180
so<font color="#E5E5E5"> this is lovely work about</font><font color="#CCCCCC"> ten years</font>

1306
00:52:04,450 --> 00:52:09,700
ago<font color="#CCCCCC"> I worked</font><font color="#E5E5E5"> on a bindings generator</font>

1307
00:52:07,180 --> 00:52:12,520
<font color="#E5E5E5">project</font><font color="#CCCCCC"> or dynamically generating</font>

1308
00:52:09,700 --> 00:52:13,770
interface code<font color="#E5E5E5"> between C</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> C++</font><font color="#CCCCCC"> across</font>

1309
00:52:12,520 --> 00:52:15,940
<font color="#E5E5E5">a</font><font color="#CCCCCC"> number of</font><font color="#E5E5E5"> different runtimes</font>

1310
00:52:13,770 --> 00:52:17,710
<font color="#CCCCCC">it seems like the big problem</font><font color="#E5E5E5"> that you</font>

1311
00:52:15,940 --> 00:52:20,440
have here is the analysis the UNIX

1312
00:52:17,710 --> 00:52:21,760
kernel source and one thing found to

1313
00:52:20,440 --> 00:52:24,570
provide a lot<font color="#CCCCCC"> of mileage was actually</font>

1314
00:52:21,760 --> 00:52:27,369
<font color="#E5E5E5">using the CDT project from eclipse</font>

1315
00:52:24,570 --> 00:52:29,800
it gives you full<font color="#CCCCCC"> abstract syntax trees</font>

1316
00:52:27,369 --> 00:52:31,900
for<font color="#E5E5E5"> every bit of C code that it sees and</font>

1317
00:52:29,800 --> 00:52:34,180
you<font color="#E5E5E5"> can search by structures so those</font>

1318
00:52:31,900 --> 00:52:35,710
are<font color="#CCCCCC"> called calls</font><font color="#E5E5E5"> the structures you'll</font>

1319
00:52:34,180 --> 00:52:37,629
actually<font color="#CCCCCC"> just be able</font><font color="#E5E5E5"> to pull out in</font>

1320
00:52:35,710 --> 00:52:41,200
about<font color="#E5E5E5"> five minutes</font><font color="#CCCCCC"> and I'll give you</font>

1321
00:52:37,630 --> 00:52:43,450
full take a look at it you might make

1322
00:52:41,200 --> 00:52:46,618
<font color="#E5E5E5">your life a lot easier</font><font color="#CCCCCC"> over clang</font><font color="#E5E5E5"> I'll</font>

1323
00:52:43,450 --> 00:52:46,618
take a look<font color="#E5E5E5"> thank</font><font color="#CCCCCC"> you</font>

1324
00:52:55,380 --> 00:53:03,920
no more questions awesome<font color="#E5E5E5"> well thanks</font>

1325
00:53:02,350 --> 00:53:09,089
for<font color="#E5E5E5"> how much our talk</font>

1326
00:53:03,920 --> 00:53:09,090
[Applause]

