1
00:00:00,030 --> 00:00:10,280
so hi everyone today<font color="#E5E5E5"> we're going to talk</font>

2
00:00:03,780 --> 00:00:12,240
about<font color="#E5E5E5"> blue born thank you</font><font color="#CCCCCC"> so blue born</font>

3
00:00:10,280 --> 00:00:15,480
<font color="#E5E5E5">it's a new attack vector we</font><font color="#CCCCCC"> are</font>

4
00:00:12,240 --> 00:00:16,830
<font color="#E5E5E5">discovered in the last</font><font color="#CCCCCC"> era</font><font color="#E5E5E5"> it's an</font>

5
00:00:15,480 --> 00:00:18,000
airborne attack vector because it's

6
00:00:16,830 --> 00:00:21,028
wireless

7
00:00:18,000 --> 00:00:22,619
it uses<font color="#CCCCCC"> bluetooth today</font><font color="#E5E5E5"> our talk</font>

8
00:00:21,029 --> 00:00:26,300
specifically<font color="#E5E5E5"> is</font><font color="#CCCCCC"> going to be focused</font><font color="#E5E5E5"> on</font>

9
00:00:22,619 --> 00:00:28,560
Linux devices and<font color="#E5E5E5"> I RT Linux devices and</font>

10
00:00:26,300 --> 00:00:34,309
availabilities in the Bluetooth<font color="#CCCCCC"> that we</font>

11
00:00:28,560 --> 00:00:36,599
found in the<font color="#CCCCCC"> implementation in Linux</font><font color="#E5E5E5"> so</font>

12
00:00:34,309 --> 00:00:42,899
my name is<font color="#CCCCCC"> Ben Surrey</font><font color="#E5E5E5"> and the head of</font>

13
00:00:36,600 --> 00:00:46,289
research at<font color="#CCCCCC"> Army's</font><font color="#E5E5E5"> today with me is we</font>

14
00:00:42,899 --> 00:00:50,360
<font color="#E5E5E5">both work in Norma's which is a nice</font>

15
00:00:46,289 --> 00:00:53,670
kitty company that is focused on<font color="#E5E5E5"> the</font>

16
00:00:50,360 --> 00:00:56,850
unmanaged devices in each corporate

17
00:00:53,670 --> 00:01:00,030
<font color="#CCCCCC">music organization</font><font color="#E5E5E5"> discovering these</font>

18
00:00:56,850 --> 00:01:03,229
devices profiling them<font color="#E5E5E5"> and sanctioning</font>

19
00:01:00,030 --> 00:01:05,400
<font color="#E5E5E5">them and for that</font><font color="#CCCCCC"> reason we came across</font>

20
00:01:03,229 --> 00:01:07,229
searching<font color="#E5E5E5"> researching</font><font color="#CCCCCC"> bluetooth to</font>

21
00:01:05,400 --> 00:01:10,590
understand how some of<font color="#E5E5E5"> these devices</font>

22
00:01:07,229 --> 00:01:14,030
communicate and through<font color="#E5E5E5"> underselling</font>

23
00:01:10,590 --> 00:01:17,790
<font color="#E5E5E5">bluetooth we found a magnitude</font><font color="#CCCCCC"> of 8</font>

24
00:01:14,030 --> 00:01:22,320
vulnerabilities in different operating

25
00:01:17,790 --> 00:01:25,229
systems<font color="#CCCCCC"> so today I want</font><font color="#E5E5E5"> to talk a bit</font>

26
00:01:22,320 --> 00:01:27,210
<font color="#CCCCCC">about other airborne attacks that have</font>

27
00:01:25,229 --> 00:01:29,789
been<font color="#E5E5E5"> discovered</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> the last</font><font color="#CCCCCC"> ear</font>

28
00:01:27,210 --> 00:01:31,679
wireless attacks<font color="#E5E5E5"> a bit of Buddhist</font>

29
00:01:29,790 --> 00:01:33,810
background<font color="#CCCCCC"> that is</font><font color="#E5E5E5"> necessary to</font>

30
00:01:31,680 --> 00:01:36,720
understand<font color="#CCCCCC"> the vulnerabilities and how</font>

31
00:01:33,810 --> 00:01:38,880
they can be<font color="#E5E5E5"> exploited</font><font color="#CCCCCC"> we're</font><font color="#E5E5E5"> going to</font>

32
00:01:36,720 --> 00:01:41,490
talk<font color="#E5E5E5"> about specifically</font><font color="#CCCCCC"> the Bluetooth</font>

33
00:01:38,880 --> 00:01:45,679
stack in in Linux which is called lose

34
00:01:41,490 --> 00:01:48,060
and then a remote but a<font color="#E5E5E5"> exploitation and</font>

35
00:01:45,680 --> 00:01:51,270
how we<font color="#CCCCCC"> did the remote exploitation of</font>

36
00:01:48,060 --> 00:01:52,619
these world<font color="#E5E5E5"> realities in the RC</font>

37
00:01:51,270 --> 00:01:56,158
vulnerability we found in the Linux

38
00:01:52,619 --> 00:01:57,810
kernel on<font color="#E5E5E5"> two devices we are going to</font>

39
00:01:56,159 --> 00:02:03,990
show this on<font color="#CCCCCC"> the</font><font color="#E5E5E5"> Amazon echo in the</font>

40
00:01:57,810 --> 00:02:06,240
Samsung gear SmartWatch<font color="#CCCCCC"> and</font><font color="#E5E5E5"> hopefully if</font>

41
00:02:03,990 --> 00:02:07,789
all those were the set up<font color="#E5E5E5"> we're going to</font>

42
00:02:06,240 --> 00:02:11,930
<font color="#CCCCCC">do a live demo</font><font color="#E5E5E5"> of this</font>

43
00:02:07,790 --> 00:02:14,360
at the end of our<font color="#E5E5E5"> tapas but so in the</font>

44
00:02:11,930 --> 00:02:17,510
last year<font color="#CCCCCC"> there</font><font color="#E5E5E5"> have been a lot</font><font color="#CCCCCC"> of</font>

45
00:02:14,360 --> 00:02:21,410
research in wireless security really

46
00:02:17,510 --> 00:02:25,149
groundbreaking research and in<font color="#CCCCCC"> Broadcom</font>

47
00:02:21,410 --> 00:02:27,859
chips<font color="#CCCCCC"> two major research was done one by</font>

48
00:02:25,150 --> 00:02:31,160
<font color="#E5E5E5">Exodus it's called broad</font><font color="#CCCCCC"> pond and the</font>

49
00:02:27,860 --> 00:02:34,880
other by project<font color="#CCCCCC"> is</font><font color="#E5E5E5"> eros researcher both</font>

50
00:02:31,160 --> 00:02:37,010
found our<font color="#E5E5E5"> sieve</font><font color="#CCCCCC"> on abilities in Broadcom</font>

51
00:02:34,880 --> 00:02:41,780
Wi-Fi chips which already prevalent in a

52
00:02:37,010 --> 00:02:44,630
lot<font color="#E5E5E5"> of devices which allows you</font><font color="#CCCCCC"> to take</font>

53
00:02:41,780 --> 00:02:46,900
<font color="#CCCCCC">over devices over Wi-Fi</font><font color="#E5E5E5"> which use broad</font>

54
00:02:44,630 --> 00:02:50,329
<font color="#E5E5E5">common devices that use</font><font color="#CCCCCC"> balkan chips</font>

55
00:02:46,900 --> 00:02:52,910
another Wi-Fi research was a crack is

56
00:02:50,330 --> 00:02:54,860
going to be here tomorrow<font color="#E5E5E5"> and the</font>

57
00:02:52,910 --> 00:02:59,150
researcher you've probably heard<font color="#E5E5E5"> of it</font>

58
00:02:54,860 --> 00:03:01,459
it's protocol flaws in Wi-Fi that<font color="#CCCCCC"> enable</font>

59
00:02:59,150 --> 00:03:04,220
attacker to either decrypt<font color="#E5E5E5"> or even</font>

60
00:03:01,459 --> 00:03:06,410
inject<font color="#E5E5E5"> in some cases in Wi-Fi packets in</font>

61
00:03:04,220 --> 00:03:08,120
<font color="#E5E5E5">secure networks and</font><font color="#CCCCCC"> lastly our</font><font color="#E5E5E5"> own</font>

62
00:03:06,410 --> 00:03:11,959
research<font color="#E5E5E5"> group Warren was also found</font>

63
00:03:08,120 --> 00:03:14,209
this ear on Bluetooth vulnerabilities<font color="#E5E5E5"> so</font>

64
00:03:11,959 --> 00:03:18,230
this is a field in<font color="#E5E5E5"> which a lot of</font>

65
00:03:14,209 --> 00:03:21,050
research is<font color="#CCCCCC"> being done and although we</font>

66
00:03:18,230 --> 00:03:23,570
feel they have<font color="#CCCCCC"> there</font><font color="#E5E5E5"> been previous</font>

67
00:03:21,050 --> 00:03:28,120
research it seems<font color="#E5E5E5"> that more</font><font color="#CCCCCC"> working is</font>

68
00:03:23,570 --> 00:03:30,650
<font color="#E5E5E5">needed to secure wireless communications</font>

69
00:03:28,120 --> 00:03:35,570
so bloodborne<font color="#CCCCCC"> is an attack vector</font>

70
00:03:30,650 --> 00:03:39,320
<font color="#E5E5E5">the targets</font><font color="#CCCCCC"> a lot of</font><font color="#E5E5E5"> devices</font><font color="#CCCCCC"> that used</font>

71
00:03:35,570 --> 00:03:41,989
<font color="#E5E5E5">bluetooth in which of one of the five</font>

72
00:03:39,320 --> 00:03:43,640
operating<font color="#E5E5E5"> systems in that we found one</font>

73
00:03:41,989 --> 00:03:49,160
billion so it's Android Windows Linux

74
00:03:43,640 --> 00:03:52,700
<font color="#E5E5E5">and iOS and</font><font color="#CCCCCC"> it's really</font><font color="#E5E5E5"> a very</font><font color="#CCCCCC"> powerful</font>

75
00:03:49,160 --> 00:03:54,859
attack vector since<font color="#E5E5E5"> it may hit some so</font>

76
00:03:52,700 --> 00:03:56,630
<font color="#E5E5E5">many devices</font><font color="#CCCCCC"> 5.3 billion devices were at</font>

77
00:03:54,860 --> 00:03:59,230
risk<font color="#E5E5E5"> from the from these vulnerabilities</font>

78
00:03:56,630 --> 00:04:02,660
<font color="#CCCCCC">it is actually a subset of</font><font color="#E5E5E5"> eight</font>

79
00:03:59,230 --> 00:04:05,359
<font color="#E5E5E5">volatilities which affect each operating</font>

80
00:04:02,660 --> 00:04:07,190
<font color="#CCCCCC">system a bit differently and there are</font>

81
00:04:05,360 --> 00:04:09,500
the<font color="#E5E5E5"> most severe</font><font color="#CCCCCC"> because of all abilities</font>

82
00:04:07,190 --> 00:04:12,290
that we know of<font color="#E5E5E5"> today and this is</font>

83
00:04:09,500 --> 00:04:15,049
<font color="#E5E5E5">because this ball</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> enable an attacker</font>

84
00:04:12,290 --> 00:04:17,389
<font color="#E5E5E5">either to gain remote for execution to</font>

85
00:04:15,049 --> 00:04:19,870
get<font color="#CCCCCC"> coding</font><font color="#E5E5E5"> to the kitchen on devices to</font>

86
00:04:17,389 --> 00:04:24,520
do man-in-the-middle attacks

87
00:04:19,870 --> 00:04:26,830
so<font color="#CCCCCC"> we'll inject</font><font color="#E5E5E5"> or sniff packets</font><font color="#CCCCCC"> Network</font>

88
00:04:24,520 --> 00:04:28,900
packets from the<font color="#E5E5E5"> from without</font>

89
00:04:26,830 --> 00:04:31,270
authentication<font color="#CCCCCC"> and informational equal</font>

90
00:04:28,900 --> 00:04:33,039
abilities that enable attacker<font color="#E5E5E5"> either to</font>

91
00:04:31,270 --> 00:04:35,219
bypass mitigations or just to leak

92
00:04:33,040 --> 00:04:38,470
crucial<font color="#E5E5E5"> data from devices</font>

93
00:04:35,220 --> 00:04:40,150
the reason these<font color="#E5E5E5"> villages are so severe</font>

94
00:04:38,470 --> 00:04:43,990
because<font color="#E5E5E5"> they do not</font><font color="#CCCCCC"> require</font><font color="#E5E5E5"> any user</font>

95
00:04:40,150 --> 00:04:46,179
interaction<font color="#E5E5E5"> or any authentication and an</font>

96
00:04:43,990 --> 00:04:49,330
attacker can just bypass<font color="#E5E5E5"> and attack a</font>

97
00:04:46,180 --> 00:04:51,360
device and remotely<font color="#CCCCCC"> without anyone</font>

98
00:04:49,330 --> 00:04:55,389
knowing<font color="#E5E5E5"> that happened that it happened</font>

99
00:04:51,360 --> 00:04:57,580
in<font color="#CCCCCC"> the</font><font color="#E5E5E5"> diagram here you can just see the</font>

100
00:04:55,389 --> 00:05:00,280
Bluetooth stack or a part of a typical

101
00:04:57,580 --> 00:05:01,810
Bluetooth stack and all the different

102
00:05:00,280 --> 00:05:05,469
age long abilities that we found and

103
00:05:01,810 --> 00:05:09,610
we're out in their<font color="#E5E5E5"> location in the stack</font>

104
00:05:05,470 --> 00:05:11,770
<font color="#E5E5E5">and you can see the values are not in</font>

105
00:05:09,610 --> 00:05:14,650
<font color="#E5E5E5">one specific area in the stack they are</font>

106
00:05:11,770 --> 00:05:16,180
actually<font color="#E5E5E5"> all across the stack each</font>

107
00:05:14,650 --> 00:05:20,620
vulnerability affecting another<font color="#CCCCCC"> a</font>

108
00:05:16,180 --> 00:05:22,510
different<font color="#CCCCCC"> operating system and</font><font color="#E5E5E5"> so either</font>

109
00:05:20,620 --> 00:05:24,400
there are<font color="#E5E5E5"> C vulnerabilities or the</font>

110
00:05:22,510 --> 00:05:26,979
<font color="#CCCCCC">mandrill abilities or the</font><font color="#E5E5E5"> information</font>

111
00:05:24,400 --> 00:05:30,219
<font color="#E5E5E5">they</font><font color="#CCCCCC"> come in because</font><font color="#E5E5E5"> each or across</font><font color="#CCCCCC"> the</font>

112
00:05:26,979 --> 00:05:32,889
<font color="#CCCCCC">stack</font><font color="#E5E5E5"> and this is just a testament to</font>

113
00:05:30,220 --> 00:05:35,349
<font color="#E5E5E5">the fact</font><font color="#CCCCCC"> that no specific</font><font color="#E5E5E5"> part is</font>

114
00:05:32,889 --> 00:05:37,180
vulnerable<font color="#E5E5E5"> but it's a general feeling</font>

115
00:05:35,349 --> 00:05:39,130
that the stack has the<font color="#E5E5E5"> butiful</font>

116
00:05:37,180 --> 00:05:41,380
implementations have<font color="#E5E5E5"> not been audited</font>

117
00:05:39,130 --> 00:05:44,260
enough<font color="#E5E5E5"> and so for that reason we found</font>

118
00:05:41,380 --> 00:05:46,389
<font color="#E5E5E5">so many</font><font color="#CCCCCC"> vulnerabilities</font><font color="#E5E5E5"> and now Greg is</font>

119
00:05:44,260 --> 00:05:48,880
going to talk<font color="#E5E5E5"> about discoverability</font>

120
00:05:46,389 --> 00:05:51,130
<font color="#E5E5E5">which is a main concept in</font><font color="#CCCCCC"> new tooth and</font>

121
00:05:48,880 --> 00:05:54,760
it<font color="#E5E5E5"> is the first step</font><font color="#CCCCCC"> the thing</font><font color="#E5E5E5"> is needed</font>

122
00:05:51,130 --> 00:06:00,430
<font color="#E5E5E5">to for an attacker to bypass in order to</font>

123
00:05:54,760 --> 00:06:03,599
attack<font color="#CCCCCC"> Bluetooth devices</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so there</font>

124
00:06:00,430 --> 00:06:06,849
<font color="#CCCCCC">is a common misconception in Bluetooth</font>

125
00:06:03,599 --> 00:06:09,729
that<font color="#E5E5E5"> two devices</font><font color="#CCCCCC"> in order</font><font color="#E5E5E5"> to communicate</font>

126
00:06:06,849 --> 00:06:13,150
<font color="#E5E5E5">need to pair with</font><font color="#CCCCCC"> each other</font><font color="#E5E5E5"> and in the</font>

127
00:06:09,729 --> 00:06:16,030
<font color="#E5E5E5">case of</font><font color="#CCCCCC"> in the</font><font color="#E5E5E5"> general case</font><font color="#CCCCCC"> of normal</font>

128
00:06:13,150 --> 00:06:18,849
devices that is true and when they don't

129
00:06:16,030 --> 00:06:21,489
know each other yet<font color="#E5E5E5"> during this pairing</font>

130
00:06:18,849 --> 00:06:25,000
<font color="#E5E5E5">they exchange identifiers and the main</font>

131
00:06:21,490 --> 00:06:26,740
of which is their Bluetooth address it's

132
00:06:25,000 --> 00:06:30,700
just a MAC address it's a<font color="#E5E5E5"> six byte</font>

133
00:06:26,740 --> 00:06:31,319
address however once a device or an

134
00:06:30,700 --> 00:06:34,649
attacker

135
00:06:31,319 --> 00:06:36,839
knows these<font color="#E5E5E5"> six</font><font color="#CCCCCC"> by two this</font><font color="#E5E5E5"> address here</font>

136
00:06:34,649 --> 00:06:39,930
<font color="#CCCCCC">she can communicate with the device</font><font color="#E5E5E5"> even</font>

137
00:06:36,839 --> 00:06:42,719
when it's<font color="#E5E5E5"> not discoverable so on most</font>

138
00:06:39,930 --> 00:06:44,430
<font color="#E5E5E5">operating systems</font><font color="#CCCCCC"> a Bluetooth devices</font>

139
00:06:42,719 --> 00:06:45,449
are always<font color="#E5E5E5"> listening</font><font color="#CCCCCC"> to incoming</font>

140
00:06:44,430 --> 00:06:46,860
connections they're not always

141
00:06:45,449 --> 00:06:48,409
discoverable<font color="#E5E5E5"> but they're always</font>

142
00:06:46,860 --> 00:06:50,849
listening<font color="#E5E5E5"> for incoming connections</font>

143
00:06:48,409 --> 00:06:52,919
<font color="#CCCCCC">almost in all cases when bluetooth is</font>

144
00:06:50,849 --> 00:06:55,169
turned on<font color="#E5E5E5"> and it is turned on by default</font>

145
00:06:52,919 --> 00:06:58,529
<font color="#CCCCCC">on most machines that have</font><font color="#E5E5E5"> bluetooth</font>

146
00:06:55,169 --> 00:07:00,240
<font color="#E5E5E5">hardware so again a device does</font><font color="#CCCCCC"> not need</font>

147
00:06:58,529 --> 00:07:04,129
to be discoverable in<font color="#E5E5E5"> order for an</font>

148
00:07:00,240 --> 00:07:07,889
attacker to use<font color="#E5E5E5"> bluetooth as a vector in</font>

149
00:07:04,129 --> 00:07:10,229
<font color="#CCCCCC">addition to</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> mess identifying a</font>

150
00:07:07,889 --> 00:07:11,610
device<font color="#CCCCCC"> it's also part of</font><font color="#E5E5E5"> it a</font>

151
00:07:10,229 --> 00:07:13,889
significant part of<font color="#E5E5E5"> it is also</font>

152
00:07:11,610 --> 00:07:16,259
transmitted<font color="#CCCCCC"> plaintext</font><font color="#E5E5E5"> over-the-air in</font>

153
00:07:13,889 --> 00:07:17,999
every<font color="#E5E5E5"> Bluetooth packet and so that means</font>

154
00:07:16,259 --> 00:07:21,629
if two devices<font color="#E5E5E5"> are</font><font color="#CCCCCC"> communicated via</font>

155
00:07:17,999 --> 00:07:25,379
bluetooth<font color="#CCCCCC"> and attacker</font><font color="#E5E5E5"> that is nearby</font>

156
00:07:21,629 --> 00:07:28,229
and<font color="#E5E5E5"> can sniff the radio can get</font>

157
00:07:25,379 --> 00:07:30,119
basically<font color="#E5E5E5"> 80% of</font><font color="#CCCCCC"> that address out of the</font>

158
00:07:28,229 --> 00:07:32,339
air from a single packet and then brute

159
00:07:30,119 --> 00:07:34,830
force the<font color="#CCCCCC"> rest which is on the 32</font>

160
00:07:32,339 --> 00:07:38,459
options or so and is able to<font color="#CCCCCC"> communicate</font>

161
00:07:34,830 --> 00:07:41,339
with<font color="#CCCCCC"> one of the devices now this</font><font color="#E5E5E5"> isn't</font>

162
00:07:38,459 --> 00:07:43,439
new<font color="#E5E5E5"> open source tools hardware tools</font>

163
00:07:41,339 --> 00:07:45,569
have existed for a long<font color="#E5E5E5"> time</font><font color="#CCCCCC"> doing</font><font color="#E5E5E5"> this</font>

164
00:07:43,439 --> 00:07:48,029
<font color="#E5E5E5">here we're showing the uber tooth tool</font>

165
00:07:45,569 --> 00:07:50,729
it costs<font color="#E5E5E5"> about 100 bucks it's been</font>

166
00:07:48,029 --> 00:07:52,409
available for<font color="#E5E5E5"> some years now</font><font color="#CCCCCC"> and</font>

167
00:07:50,729 --> 00:07:53,818
<font color="#E5E5E5">basically what it</font><font color="#CCCCCC"> does is that</font><font color="#E5E5E5"> an</font>

168
00:07:52,409 --> 00:07:57,149
<font color="#E5E5E5">attacker puts it on some Bluetooth</font>

169
00:07:53,819 --> 00:08:00,029
<font color="#E5E5E5">Channel and it's it's just listening for</font>

170
00:07:57,149 --> 00:08:03,149
packets from any<font color="#E5E5E5"> device to any device</font>

171
00:08:00,029 --> 00:08:05,249
and fix them up<font color="#CCCCCC"> and</font><font color="#E5E5E5"> basically it shows</font>

172
00:08:03,149 --> 00:08:06,300
the addresses of communicating devices

173
00:08:05,249 --> 00:08:07,740
in the air<font color="#E5E5E5"> even</font><font color="#CCCCCC"> when they're not</font>

174
00:08:06,300 --> 00:08:11,339
<font color="#CCCCCC">discoverable</font><font color="#E5E5E5"> the only thing they need to</font>

175
00:08:07,740 --> 00:08:13,319
<font color="#E5E5E5">do is to</font><font color="#CCCCCC"> actually communicate now</font><font color="#E5E5E5"> this</font>

176
00:08:11,339 --> 00:08:16,139
was a<font color="#E5E5E5"> hardware solution that cost 100</font>

177
00:08:13,319 --> 00:08:18,749
bucks<font color="#E5E5E5"> a software purely software</font>

178
00:08:16,139 --> 00:08:21,959
solutions do exist<font color="#CCCCCC"> and for that it's</font>

179
00:08:18,749 --> 00:08:23,699
possible<font color="#CCCCCC"> to modify the firmware of</font>

180
00:08:21,959 --> 00:08:26,339
existing<font color="#CCCCCC"> a Bluetooth adapters or</font>

181
00:08:23,699 --> 00:08:28,830
<font color="#E5E5E5">Bluetooth chips it's pretty difficult</font>

182
00:08:26,339 --> 00:08:30,539
<font color="#CCCCCC">and but work on</font><font color="#E5E5E5"> this has been</font><font color="#CCCCCC"> done</font><font color="#E5E5E5"> in</font>

183
00:08:28,830 --> 00:08:32,909
<font color="#CCCCCC">the past</font><font color="#E5E5E5"> and we've seen</font><font color="#CCCCCC"> examples the do</font>

184
00:08:30,539 --> 00:08:38,098
that and we<font color="#CCCCCC"> actually found something</font>

185
00:08:32,909 --> 00:08:43,069
<font color="#E5E5E5">both cheaper and simple a sub</font><font color="#CCCCCC"> $1</font>

186
00:08:38,099 --> 00:08:46,940
solution if you<font color="#E5E5E5"> will and this is using</font>

187
00:08:43,070 --> 00:08:48,440
this NRF<font color="#CCCCCC"> 24a chipset or</font><font color="#E5E5E5"> module that you</font>

188
00:08:46,940 --> 00:08:51,589
can buy on Alibaba for less than a

189
00:08:48,440 --> 00:08:53,480
dollar it's based on this<font color="#E5E5E5"> NRF 24 chipset</font>

190
00:08:51,589 --> 00:08:56,240
which is used for<font color="#E5E5E5"> wireless keyboards and</font>

191
00:08:53,480 --> 00:08:59,000
mice<font color="#E5E5E5"> which actually the Microsoft and</font>

192
00:08:56,240 --> 00:09:00,470
Logitech<font color="#CCCCCC"> and a few other</font><font color="#E5E5E5"> companies they</font>

193
00:08:59,000 --> 00:09:02,420
don't<font color="#E5E5E5"> use bluetooth further keyboards</font>

194
00:09:00,470 --> 00:09:04,910
and mice<font color="#E5E5E5"> they use something that's</font>

195
00:09:02,420 --> 00:09:07,490
called<font color="#E5E5E5"> a proprietary protocol over 2.4</font>

196
00:09:04,910 --> 00:09:09,500
gigahertz<font color="#E5E5E5"> and</font><font color="#CCCCCC"> which just so happens to</font>

197
00:09:07,490 --> 00:09:11,509
be<font color="#CCCCCC"> on the same</font><font color="#E5E5E5"> channels frequencies and</font>

198
00:09:09,500 --> 00:09:15,440
modulated exactly the same as<font color="#CCCCCC"> Bluetooth</font>

199
00:09:11,509 --> 00:09:17,720
but it's not blue<font color="#CCCCCC"> tube so we found</font><font color="#E5E5E5"> the</font>

200
00:09:15,440 --> 00:09:19,730
trick will trick<font color="#CCCCCC"> simply to configure</font>

201
00:09:17,720 --> 00:09:22,160
this device<font color="#E5E5E5"> in a way that will sniff</font>

202
00:09:19,730 --> 00:09:23,600
<font color="#CCCCCC">glue to</font><font color="#E5E5E5"> and additionally there has been</font>

203
00:09:22,160 --> 00:09:26,779
research done in<font color="#E5E5E5"> the past of how to</font>

204
00:09:23,600 --> 00:09:29,750
<font color="#E5E5E5">promiscuous sniffs max of keyboards and</font>

205
00:09:26,779 --> 00:09:31,670
mice from these adapters by researcher

206
00:09:29,750 --> 00:09:34,610
<font color="#E5E5E5">called the Travis</font><font color="#CCCCCC"> go speed</font><font color="#E5E5E5"> you might</font>

207
00:09:31,670 --> 00:09:36,910
have heard of him and so we<font color="#CCCCCC"> combined</font>

208
00:09:34,610 --> 00:09:40,509
these two<font color="#E5E5E5"> tricks in order to get</font>

209
00:09:36,910 --> 00:09:43,279
basically<font color="#E5E5E5"> the same functionality</font><font color="#CCCCCC"> as the</font>

210
00:09:40,509 --> 00:09:46,279
<font color="#CCCCCC">SD over tools and be able</font><font color="#E5E5E5"> to sniff out</font>

211
00:09:43,279 --> 00:09:49,040
<font color="#CCCCCC">Bluetooth addresses from where have the</font>

212
00:09:46,279 --> 00:09:51,230
code<font color="#CCCCCC"> for this is</font><font color="#E5E5E5"> on our github and it's</font>

213
00:09:49,040 --> 00:09:55,639
a Python<font color="#CCCCCC"> script</font><font color="#E5E5E5"> just after the talk it's</font>

214
00:09:51,230 --> 00:09:59,120
going to play on the<font color="#E5E5E5"> github</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> okay</font>

215
00:09:55,639 --> 00:10:02,779
<font color="#E5E5E5">now in addition to to do the things I've</font>

216
00:09:59,120 --> 00:10:07,010
shown<font color="#CCCCCC"> before it's also pretty</font><font color="#E5E5E5"> common for</font>

217
00:10:02,779 --> 00:10:09,470
equipment manufacturers OEMs to to set

218
00:10:07,010 --> 00:10:11,449
either the same or adjacent<font color="#CCCCCC"> MAC</font>

219
00:10:09,470 --> 00:10:17,449
addresses to<font color="#CCCCCC"> the Wi-Fi</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> Bluetooth</font>

220
00:10:11,449 --> 00:10:19,760
<font color="#CCCCCC">chip sites so basically lots</font><font color="#E5E5E5"> of existing</font>

221
00:10:17,449 --> 00:10:21,829
<font color="#E5E5E5">hardware is on the market that can</font><font color="#CCCCCC"> sniff</font>

222
00:10:19,760 --> 00:10:24,050
Wi-Fi in<font color="#E5E5E5"> one</font><font color="#CCCCCC"> mode</font><font color="#E5E5E5"> so if you just sniff</font>

223
00:10:21,829 --> 00:10:25,969
<font color="#E5E5E5">Wi-Fi packets of a device and it has</font>

224
00:10:24,050 --> 00:10:28,250
<font color="#E5E5E5">Bluetooth enabled and it's one of</font><font color="#CCCCCC"> the</font>

225
00:10:25,970 --> 00:10:30,199
majority<font color="#CCCCCC"> I suppose of devices where the</font>

226
00:10:28,250 --> 00:10:31,370
<font color="#E5E5E5">Bluetooth address is adjacent</font><font color="#CCCCCC"> then you</font>

227
00:10:30,199 --> 00:10:35,029
also know the Bluetooth<font color="#CCCCCC"> address</font>

228
00:10:31,370 --> 00:10:37,339
basically so that's<font color="#E5E5E5"> also a and even a</font>

229
00:10:35,029 --> 00:10:39,860
step<font color="#E5E5E5"> further if the attacker is both in</font>

230
00:10:37,339 --> 00:10:42,110
proximity physically and on the same

231
00:10:39,860 --> 00:10:43,550
<font color="#E5E5E5">network</font><font color="#CCCCCC"> then they can know the MAC</font>

232
00:10:42,110 --> 00:10:46,880
address<font color="#CCCCCC"> the Wi-Fi MAC address and the</font>

233
00:10:43,550 --> 00:10:49,959
Bluetooth<font color="#E5E5E5"> address just from doing</font>

234
00:10:46,880 --> 00:10:52,790
looking<font color="#E5E5E5"> at its ARP cache</font>

235
00:10:49,959 --> 00:10:56,270
<font color="#E5E5E5">okay so now we can communicate with the</font>

236
00:10:52,790 --> 00:11:00,050
Bluetooth<font color="#CCCCCC"> device and how do we attack it</font>

237
00:10:56,270 --> 00:11:03,529
<font color="#E5E5E5">Bluetooth is a has a very large attack</font>

238
00:11:00,050 --> 00:11:06,560
surface<font color="#E5E5E5"> and what you see</font><font color="#CCCCCC"> here yeah the</font>

239
00:11:03,529 --> 00:11:08,330
boxes above<font color="#CCCCCC"> are the</font><font color="#E5E5E5"> profiles and</font>

240
00:11:06,560 --> 00:11:11,920
services of<font color="#E5E5E5"> look these are the higher</font>

241
00:11:08,330 --> 00:11:15,380
level things that you know<font color="#CCCCCC"> afleck</font>

242
00:11:11,920 --> 00:11:19,310
<font color="#E5E5E5">Ethernet tethering or sound or stuff</font>

243
00:11:15,380 --> 00:11:21,770
<font color="#CCCCCC">like that</font><font color="#E5E5E5"> hid and there are lots of</font>

244
00:11:19,310 --> 00:11:23,689
those and one of them is called the<font color="#E5E5E5"> SDP</font>

245
00:11:21,770 --> 00:11:25,610
it's the service discovery protocol<font color="#E5E5E5"> it's</font>

246
00:11:23,690 --> 00:11:27,320
a protocol<font color="#CCCCCC"> that allows</font><font color="#E5E5E5"> you to discover</font>

247
00:11:25,610 --> 00:11:30,920
<font color="#E5E5E5">what other protocols are available on</font>

248
00:11:27,320 --> 00:11:32,630
the device<font color="#E5E5E5"> and below</font><font color="#CCCCCC"> that is the l2 cap</font>

249
00:11:30,920 --> 00:11:35,029
player if the<font color="#E5E5E5"> alto cap layer is</font>

250
00:11:32,630 --> 00:11:36,740
basically<font color="#E5E5E5"> the transport</font><font color="#CCCCCC"> layer and the</font>

251
00:11:35,029 --> 00:11:38,720
reliable transport layer it's like<font color="#CCCCCC"> TCP</font>

252
00:11:36,740 --> 00:11:41,240
for Bluetooth in many ways<font color="#CCCCCC"> and below</font>

253
00:11:38,720 --> 00:11:42,830
that<font color="#CCCCCC"> are the hardware</font><font color="#E5E5E5"> communication with</font>

254
00:11:41,240 --> 00:11:46,130
with the Bluetooth adapter and the

255
00:11:42,830 --> 00:11:47,360
packet layers<font color="#E5E5E5"> HDL and such a lot of</font>

256
00:11:46,130 --> 00:11:49,910
these services<font color="#CCCCCC"> they do not require</font>

257
00:11:47,360 --> 00:11:54,440
syndication to<font color="#E5E5E5"> connect for instance</font><font color="#CCCCCC"> LDP</font>

258
00:11:49,910 --> 00:11:56,930
<font color="#E5E5E5">obviously by design and except for</font><font color="#CCCCCC"> the</font>

259
00:11:54,440 --> 00:12:00,080
<font color="#E5E5E5">huge attack surface it's all extremely</font>

260
00:11:56,930 --> 00:12:03,770
<font color="#E5E5E5">complicated</font><font color="#CCCCCC"> the spec that defines most</font>

261
00:12:00,080 --> 00:12:07,100
of this stuff which is<font color="#E5E5E5"> seen</font><font color="#CCCCCC"> here is very</font>

262
00:12:03,770 --> 00:12:09,079
long some<font color="#CCCCCC"> pages look like</font><font color="#E5E5E5"> this one and</font>

263
00:12:07,100 --> 00:12:12,860
this one's particularly what it shows is

264
00:12:09,080 --> 00:12:15,050
a what's<font color="#E5E5E5"> called a packet fragmentation</font>

265
00:12:12,860 --> 00:12:17,630
and that's implemented<font color="#E5E5E5"> in four different</font>

266
00:12:15,050 --> 00:12:19,550
layers<font color="#E5E5E5"> up to an including l2 cap why</font>

267
00:12:17,630 --> 00:12:21,860
would you need that<font color="#E5E5E5"> I don't know but it</font>

268
00:12:19,550 --> 00:12:23,479
exists now every<font color="#E5E5E5"> time a packet</font>

269
00:12:21,860 --> 00:12:25,730
fragmentation is something that's pretty

270
00:12:23,480 --> 00:12:27,920
bug prone<font color="#CCCCCC"> in implementation so every</font>

271
00:12:25,730 --> 00:12:29,050
implementation has four chances of

272
00:12:27,920 --> 00:12:34,189
getting it wrong

273
00:12:29,050 --> 00:12:35,089
and they do and now in this talk we're

274
00:12:34,190 --> 00:12:36,580
going<font color="#CCCCCC"> to talk about the Blues</font>

275
00:12:35,089 --> 00:12:38,959
implementation which is<font color="#E5E5E5"> the Linux</font>

276
00:12:36,580 --> 00:12:41,029
implementation of<font color="#E5E5E5"> Bluetooth it's been</font>

277
00:12:38,959 --> 00:12:43,910
around since 2001<font color="#E5E5E5"> and you may know that</font>

278
00:12:41,029 --> 00:12:46,520
<font color="#CCCCCC">Bluetooth has been around</font><font color="#E5E5E5"> from 1998 it's</font>

279
00:12:43,910 --> 00:12:49,640
actually the first<font color="#E5E5E5"> native OS Bluetooth</font>

280
00:12:46,520 --> 00:12:51,560
stack that exists inside the<font color="#CCCCCC"> relaxed and</font>

281
00:12:49,640 --> 00:12:54,800
what it does is talk to lots of

282
00:12:51,560 --> 00:12:57,349
controllers to the hardware devices it

283
00:12:54,800 --> 00:12:59,660
<font color="#CCCCCC">has a kernel</font><font color="#E5E5E5"> side implementation of the</font>

284
00:12:57,350 --> 00:13:01,339
lower<font color="#CCCCCC"> quarter calls the HCI is the</font>

285
00:12:59,660 --> 00:13:03,939
communication with<font color="#E5E5E5"> the hardware a sells</font>

286
00:13:01,339 --> 00:13:05,209
the packet protocol and<font color="#CCCCCC"> lt cap is the</font>

287
00:13:03,940 --> 00:13:08,060
<font color="#CCCCCC">tcp</font>

288
00:13:05,209 --> 00:13:09,760
transport<font color="#E5E5E5"> protocol besides that there is</font>

289
00:13:08,060 --> 00:13:13,209
<font color="#E5E5E5">the userland implementation in the</font>

290
00:13:09,760 --> 00:13:14,740
<font color="#E5E5E5">Bluetooth D it does pairing and</font>

291
00:13:13,210 --> 00:13:16,690
<font color="#E5E5E5">authentication the higher level stuff it</font>

292
00:13:14,740 --> 00:13:18,940
provides those services including<font color="#E5E5E5"> SDP</font>

293
00:13:16,690 --> 00:13:21,190
<font color="#E5E5E5">and it runs</font><font color="#CCCCCC"> its route so interestingly</font>

294
00:13:18,940 --> 00:13:23,620
<font color="#E5E5E5">all</font><font color="#CCCCCC"> these huge attack surface</font><font color="#E5E5E5"> all of it</font>

295
00:13:21,190 --> 00:13:26,650
runs at least as<font color="#CCCCCC"> route and some of it in</font>

296
00:13:23,620 --> 00:13:28,690
<font color="#E5E5E5">kernel and</font><font color="#CCCCCC"> now Ben</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> to you</font>

297
00:13:26,650 --> 00:13:31,410
<font color="#E5E5E5">particularly about the vulnerability</font>

298
00:13:28,690 --> 00:13:36,340
that<font color="#E5E5E5"> we found in the</font><font color="#CCCCCC"> l2</font><font color="#E5E5E5"> cap layer inlets</font>

299
00:13:31,410 --> 00:13:38,620
yes so as Greg was saying<font color="#CCCCCC"> L</font><font color="#E5E5E5"> to cap his</font>

300
00:13:36,340 --> 00:13:44,830
<font color="#E5E5E5">debrief equivalent of TCP it is a trial</font>

301
00:13:38,620 --> 00:13:48,490
<font color="#E5E5E5">transport layer</font><font color="#CCCCCC"> so it is like TCP it</font>

302
00:13:44,830 --> 00:13:51,940
does<font color="#E5E5E5"> connection it</font><font color="#CCCCCC"> does the</font><font color="#E5E5E5"> connection</font>

303
00:13:48,490 --> 00:13:54,250
to the<font color="#E5E5E5"> servers</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the services and</font><font color="#CCCCCC"> it</font>

304
00:13:51,940 --> 00:13:56,310
offers some quality of service features

305
00:13:54,250 --> 00:13:58,630
so if it can have you can have a

306
00:13:56,310 --> 00:14:03,430
<font color="#E5E5E5">reliable connection over the non</font>

307
00:13:58,630 --> 00:14:05,920
reliable<font color="#CCCCCC"> ACL packets</font><font color="#E5E5E5"> so basically like</font>

308
00:14:03,430 --> 00:14:08,140
TCP<font color="#E5E5E5"> you can have your service listening</font>

309
00:14:05,920 --> 00:14:11,589
<font color="#E5E5E5">for incoming connections and you have a</font>

310
00:14:08,140 --> 00:14:12,880
bit<font color="#E5E5E5"> of line connecting to it</font><font color="#CCCCCC"> and l2 cap</font>

311
00:14:11,590 --> 00:14:14,260
will<font color="#CCCCCC"> be that transfer would Clara that</font>

312
00:14:12,880 --> 00:14:17,770
<font color="#CCCCCC">would allow that connection</font><font color="#E5E5E5"> to take</font>

313
00:14:14,260 --> 00:14:19,450
place<font color="#E5E5E5"> since it offers a lot</font><font color="#CCCCCC"> of quality</font>

314
00:14:17,770 --> 00:14:23,380
of<font color="#E5E5E5"> surface features there</font><font color="#CCCCCC"> is a lot of</font>

315
00:14:19,450 --> 00:14:26,230
code<font color="#E5E5E5"> and to implement</font><font color="#CCCCCC"> those features so</font>

316
00:14:23,380 --> 00:14:28,570
<font color="#CCCCCC">there was an wide attack surface in</font><font color="#E5E5E5"> l2</font>

317
00:14:26,230 --> 00:14:30,370
cap and as Greg mentioned before<font color="#CCCCCC"> LT</font>

318
00:14:28,570 --> 00:14:32,980
capping<font color="#E5E5E5"> Blues specifically is</font>

319
00:14:30,370 --> 00:14:34,690
<font color="#CCCCCC">implemented inside</font><font color="#E5E5E5"> the kernel</font><font color="#CCCCCC"> so an</font>

320
00:14:32,980 --> 00:14:40,630
ability<font color="#E5E5E5"> there might be very vulnerable</font>

321
00:14:34,690 --> 00:14:42,970
<font color="#E5E5E5">very good to an attacker so there is a</font>

322
00:14:40,630 --> 00:14:44,850
concept in the<font color="#CCCCCC"> cab that's called mutual</font>

323
00:14:42,970 --> 00:14:51,240
configuration

324
00:14:44,850 --> 00:14:53,530
it helps do the quality of service

325
00:14:51,240 --> 00:14:56,680
negotiation<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the start of the</font>

326
00:14:53,530 --> 00:15:00,699
connection the connection<font color="#E5E5E5"> parameters are</font>

327
00:14:56,680 --> 00:15:03,849
negotiated in this process<font color="#E5E5E5"> and the way</font>

328
00:15:00,700 --> 00:15:05,380
it works is<font color="#CCCCCC"> that device a in this</font>

329
00:15:03,850 --> 00:15:07,510
diagram<font color="#E5E5E5"> will send a configuration</font>

330
00:15:05,380 --> 00:15:09,580
request message which<font color="#E5E5E5"> will basically</font>

331
00:15:07,510 --> 00:15:11,620
have plenty<font color="#E5E5E5"> of options</font>

332
00:15:09,580 --> 00:15:15,070
<font color="#E5E5E5">plenty of configuration elements in it</font>

333
00:15:11,620 --> 00:15:16,450
like the MTU of<font color="#E5E5E5"> the connection like what</font>

334
00:15:15,070 --> 00:15:18,610
quality<font color="#E5E5E5"> of service features you want to</font>

335
00:15:16,450 --> 00:15:21,139
implement in that connection<font color="#CCCCCC"> and so on</font>

336
00:15:18,610 --> 00:15:22,730
<font color="#E5E5E5">and if you will send that message</font>

337
00:15:21,139 --> 00:15:25,129
<font color="#E5E5E5">device B device we will then either</font>

338
00:15:22,730 --> 00:15:27,529
accept that<font color="#E5E5E5"> configuration or we reject</font>

339
00:15:25,129 --> 00:15:30,109
it with a configuration response message

340
00:15:27,529 --> 00:15:31,850
and if you chooses to reject it<font color="#CCCCCC"> you can</font>

341
00:15:30,109 --> 00:15:35,389
offer an alternative configuration

342
00:15:31,850 --> 00:15:38,839
parameters so it can<font color="#E5E5E5"> change the MTU or</font>

343
00:15:35,389 --> 00:15:40,910
other connection parameters<font color="#E5E5E5"> and send and</font>

344
00:15:38,839 --> 00:15:43,489
send them in that configuration<font color="#E5E5E5"> response</font>

345
00:15:40,910 --> 00:15:45,738
message if<font color="#CCCCCC"> it rejects them device</font><font color="#E5E5E5"> a you</font>

346
00:15:43,489 --> 00:15:47,869
will then offer another configuration

347
00:15:45,739 --> 00:15:49,160
<font color="#E5E5E5">with another configuration request and</font>

348
00:15:47,869 --> 00:15:51,139
so on and they wouldn't<font color="#E5E5E5"> go negotiate</font>

349
00:15:49,160 --> 00:15:54,079
<font color="#E5E5E5">until they reach an agreement on the</font>

350
00:15:51,139 --> 00:15:56,179
parameters this process<font color="#E5E5E5"> it's called</font><font color="#CCCCCC"> new</font>

351
00:15:54,079 --> 00:16:00,189
<font color="#CCCCCC">chip configuration</font><font color="#E5E5E5"> because it happens in</font>

352
00:15:56,179 --> 00:16:02,889
<font color="#E5E5E5">both ways so each device will negotiate</font>

353
00:16:00,189 --> 00:16:04,339
<font color="#E5E5E5">its sides of the connection</font><font color="#CCCCCC"> parameters</font>

354
00:16:02,889 --> 00:16:07,309
<font color="#E5E5E5">sending the correct</font><font color="#CCCCCC"> configuration</font>

355
00:16:04,339 --> 00:16:10,309
<font color="#CCCCCC">request</font><font color="#E5E5E5"> and the same will happen twice</font>

356
00:16:07,309 --> 00:16:13,009
person on the other end<font color="#E5E5E5"> so here we can</font>

357
00:16:10,309 --> 00:16:14,480
see an<font color="#CCCCCC"> example of this process</font><font color="#E5E5E5"> device a</font>

358
00:16:13,009 --> 00:16:18,470
on the Left we send the configuration

359
00:16:14,480 --> 00:16:20,660
request<font color="#E5E5E5"> with an out number of options</font><font color="#CCCCCC"> in</font>

360
00:16:18,470 --> 00:16:23,239
<font color="#E5E5E5">the message of the correct equation</font>

361
00:16:20,660 --> 00:16:24,980
parameters and device<font color="#E5E5E5"> being on the right</font>

362
00:16:23,239 --> 00:16:28,429
<font color="#CCCCCC">will</font><font color="#E5E5E5"> send a configuration response in</font>

363
00:16:24,980 --> 00:16:31,459
this instance the result is failure<font color="#E5E5E5"> so</font>

364
00:16:28,429 --> 00:16:33,589
he unaccepted the parameters and he

365
00:16:31,459 --> 00:16:36,799
offered to change some parameter in some

366
00:16:33,589 --> 00:16:38,329
way<font color="#E5E5E5"> the like I said</font><font color="#CCCCCC"> before and device a</font>

367
00:16:36,799 --> 00:16:40,429
when<font color="#E5E5E5"> he</font><font color="#CCCCCC"> receives this configuration</font>

368
00:16:38,329 --> 00:16:41,929
response message<font color="#CCCCCC"> will then need to build</font>

369
00:16:40,429 --> 00:16:44,860
<font color="#E5E5E5">another configuration request message</font>

370
00:16:41,929 --> 00:16:47,869
and continue<font color="#CCCCCC"> the negotiation process and</font>

371
00:16:44,860 --> 00:16:50,720
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> exactly</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> mechanism the</font>

372
00:16:47,869 --> 00:16:53,929
negotiation process here in which<font color="#CCCCCC"> we</font>

373
00:16:50,720 --> 00:16:56,209
found<font color="#E5E5E5"> our</font><font color="#CCCCCC"> Sivan ability in the kernel so</font>

374
00:16:53,929 --> 00:16:57,889
this function parses<font color="#CCCCCC"> the configuration</font>

375
00:16:56,209 --> 00:17:00,679
response so the<font color="#E5E5E5"> messages that are</font><font color="#CCCCCC"> being</font>

376
00:16:57,889 --> 00:17:03,799
returned to<font color="#E5E5E5"> the country configuration</font><font color="#CCCCCC"> we</font>

377
00:17:00,679 --> 00:17:05,740
request<font color="#CCCCCC"> and then it needs</font><font color="#E5E5E5"> to build an</font>

378
00:17:03,799 --> 00:17:07,629
output configuration request message

379
00:17:05,740 --> 00:17:09,649
that we<font color="#E5E5E5"> returned</font>

380
00:17:07,630 --> 00:17:12,380
so the<font color="#CCCCCC"> congressional process</font><font color="#E5E5E5"> will</font>

381
00:17:09,648 --> 00:17:14,148
continue<font color="#E5E5E5"> and looking at the prototype of</font>

382
00:17:12,380 --> 00:17:17,059
<font color="#CCCCCC">the function we</font><font color="#E5E5E5"> noticed</font><font color="#CCCCCC"> that something</font>

383
00:17:14,148 --> 00:17:19,819
is missing<font color="#E5E5E5"> the highlighted the arguments</font>

384
00:17:17,059 --> 00:17:22,099
there or the RSP variable is the input

385
00:17:19,819 --> 00:17:24,379
<font color="#E5E5E5">configuration response message pointer</font>

386
00:17:22,099 --> 00:17:26,898
<font color="#E5E5E5">the</font><font color="#CCCCCC"> LAN is that length of</font><font color="#E5E5E5"> that message</font>

387
00:17:24,380 --> 00:17:29,480
and then data pointer is the out

388
00:17:26,898 --> 00:17:30,918
parameter<font color="#CCCCCC"> it's the configuration request</font>

389
00:17:29,480 --> 00:17:32,410
message that will<font color="#E5E5E5"> be built in the</font>

390
00:17:30,919 --> 00:17:35,410
<font color="#E5E5E5">process of parsing this in</font>

391
00:17:32,410 --> 00:17:37,840
<font color="#CCCCCC">put message and</font><font color="#E5E5E5"> returned</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the to the</font>

392
00:17:35,410 --> 00:17:40,330
other<font color="#CCCCCC"> pier and the data argument</font><font color="#E5E5E5"> doesn't</font>

393
00:17:37,840 --> 00:17:41,620
have a length attached<font color="#E5E5E5"> to it</font><font color="#CCCCCC"> so this</font>

394
00:17:40,330 --> 00:17:43,540
function<font color="#E5E5E5"> doesn't know what all the</font>

395
00:17:41,620 --> 00:17:46,179
bounds what is the size<font color="#E5E5E5"> of this data</font>

396
00:17:43,540 --> 00:17:48,550
pointer and it's just copies and the

397
00:17:46,180 --> 00:17:50,680
input configuration<font color="#E5E5E5"> elements from one</font>

398
00:17:48,550 --> 00:17:52,330
<font color="#CCCCCC">and from from the response message to</font>

399
00:17:50,680 --> 00:17:54,550
the new request<font color="#E5E5E5"> message that is</font><font color="#CCCCCC"> being</font>

400
00:17:52,330 --> 00:17:57,639
<font color="#E5E5E5">built</font><font color="#CCCCCC"> and there is no</font><font color="#E5E5E5"> validation of the</font>

401
00:17:54,550 --> 00:18:00,340
bounds of<font color="#E5E5E5"> the same memory pointer of the</font>

402
00:17:57,640 --> 00:18:05,200
<font color="#E5E5E5">data pointer here</font><font color="#CCCCCC"> in the while loop</font>

403
00:18:00,340 --> 00:18:06,730
<font color="#E5E5E5">there just goes and gets all the</font>

404
00:18:05,200 --> 00:18:08,980
configuration elements forms a message

405
00:18:06,730 --> 00:18:11,170
from the input message<font color="#E5E5E5"> and copies them</font>

406
00:18:08,980 --> 00:18:14,560
or<font color="#E5E5E5"> change them changes them depending on</font>

407
00:18:11,170 --> 00:18:20,620
the data into<font color="#E5E5E5"> the out into the data</font>

408
00:18:14,560 --> 00:18:23,050
pointer that<font color="#CCCCCC"> is pointed with PTR them so</font>

409
00:18:20,620 --> 00:18:25,179
this function this<font color="#CCCCCC"> advocate</font><font color="#E5E5E5"> parts are</font>

410
00:18:23,050 --> 00:18:27,760
<font color="#E5E5E5">still function is vulnerable it can</font>

411
00:18:25,180 --> 00:18:29,380
<font color="#E5E5E5">write out of bounds to</font><font color="#CCCCCC"> the data</font>

412
00:18:27,760 --> 00:18:33,340
<font color="#CCCCCC">particularly to receive what is</font><font color="#E5E5E5"> that</font>

413
00:18:29,380 --> 00:18:34,690
pointer so in<font color="#E5E5E5"> this context it is the</font>

414
00:18:33,340 --> 00:18:37,689
<font color="#CCCCCC">Buffs pointer</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> is being passed</font>

415
00:18:34,690 --> 00:18:39,820
<font color="#CCCCCC">attached to it</font><font color="#E5E5E5"> this is this function</font><font color="#CCCCCC"> is</font>

416
00:18:37,690 --> 00:18:42,400
<font color="#E5E5E5">the function</font><font color="#CCCCCC"> that receives the</font>

417
00:18:39,820 --> 00:18:45,310
configuration response<font color="#E5E5E5"> messages so buff</font>

418
00:18:42,400 --> 00:18:47,740
here is just a 64 byte buffer on<font color="#E5E5E5"> the</font>

419
00:18:45,310 --> 00:18:50,530
stack<font color="#E5E5E5"> so obviously a stack overflow can</font>

420
00:18:47,740 --> 00:18:53,650
be abused in<font color="#E5E5E5"> this flow the only caveat</font>

421
00:18:50,530 --> 00:18:55,960
here is<font color="#E5E5E5"> that the device needs</font><font color="#CCCCCC"> to be in</font>

422
00:18:53,650 --> 00:18:58,330
the pending state which actually is a

423
00:18:55,960 --> 00:19:01,120
stage that<font color="#CCCCCC"> the attacker has a lot</font><font color="#E5E5E5"> of</font>

424
00:18:58,330 --> 00:19:02,949
<font color="#E5E5E5">control over so prior to sending this</font>

425
00:19:01,120 --> 00:19:05,649
overflow message he can send another

426
00:19:02,950 --> 00:19:07,600
<font color="#E5E5E5">message that will put the device in the</font>

427
00:19:05,650 --> 00:19:11,230
pending state<font color="#E5E5E5"> and then the overflow can</font>

428
00:19:07,600 --> 00:19:13,389
be triggered so what what<font color="#CCCCCC"> is the</font>

429
00:19:11,230 --> 00:19:15,430
strategy<font color="#CCCCCC"> for this exploit it is a</font>

430
00:19:13,390 --> 00:19:17,560
classic stack overflow like the<font color="#E5E5E5"> 90s</font><font color="#CCCCCC"> like</font>

431
00:19:15,430 --> 00:19:20,680
the good old days so it shouldn't<font color="#E5E5E5"> be too</font>

432
00:19:17,560 --> 00:19:22,240
hard<font color="#E5E5E5"> but there are some</font><font color="#CCCCCC"> limitations</font><font color="#E5E5E5"> we</font>

433
00:19:20,680 --> 00:19:24,100
need the ability<font color="#E5E5E5"> to send whatever</font>

434
00:19:22,240 --> 00:19:29,110
configuration response messages we'd

435
00:19:24,100 --> 00:19:31,060
like because it<font color="#E5E5E5"> is not usually</font><font color="#CCCCCC"> that the</font>

436
00:19:29,110 --> 00:19:33,010
way it works<font color="#CCCCCC"> usually</font><font color="#E5E5E5"> you have your stack</font>

437
00:19:31,060 --> 00:19:34,720
and it will do the<font color="#E5E5E5"> negotiation it will</font>

438
00:19:33,010 --> 00:19:37,180
send<font color="#E5E5E5"> whatever configuration response</font>

439
00:19:34,720 --> 00:19:39,850
<font color="#E5E5E5">messages it like so so we developed a</font>

440
00:19:37,180 --> 00:19:42,420
small testing framework for us to send

441
00:19:39,850 --> 00:19:44,560
<font color="#CCCCCC">our configuration response messages</font>

442
00:19:42,420 --> 00:19:45,970
<font color="#CCCCCC">we're going to do a stack overflow but</font>

443
00:19:44,560 --> 00:19:47,909
want to<font color="#E5E5E5"> know what what</font>

444
00:19:45,970 --> 00:19:50,020
going to overflow we want to choose<font color="#CCCCCC"> our</font>

445
00:19:47,910 --> 00:19:52,900
<font color="#E5E5E5">very specifically so</font><font color="#CCCCCC"> we need to</font><font color="#E5E5E5"> find</font>

446
00:19:50,020 --> 00:19:55,230
either pointers or the return<font color="#E5E5E5"> address of</font>

447
00:19:52,900 --> 00:19:57,250
the function<font color="#CCCCCC"> to overflow</font><font color="#E5E5E5"> and</font>

448
00:19:55,230 --> 00:19:58,720
simultaneously the buffer<font color="#CCCCCC"> that we are</font>

449
00:19:57,250 --> 00:20:00,310
going<font color="#E5E5E5"> to use to</font><font color="#CCCCCC"> overflow also needs to</font>

450
00:19:58,720 --> 00:20:04,720
<font color="#E5E5E5">be</font><font color="#CCCCCC"> a valid configuration response</font>

451
00:20:00,310 --> 00:20:06,310
message because in the loop here in the

452
00:20:04,720 --> 00:20:07,330
while loop here if we send an invalid

453
00:20:06,310 --> 00:20:09,370
configuration response<font color="#E5E5E5"> miss</font>

454
00:20:07,330 --> 00:20:11,260
configuration element the while loop

455
00:20:09,370 --> 00:20:13,479
would break and our overflow would stop

456
00:20:11,260 --> 00:20:16,450
so it also<font color="#E5E5E5"> has to</font><font color="#CCCCCC"> be a valid</font><font color="#E5E5E5"> response</font>

457
00:20:13,480 --> 00:20:18,700
message<font color="#CCCCCC"> if there</font><font color="#E5E5E5"> are any mitigations in</font>

458
00:20:16,450 --> 00:20:21,100
the device that<font color="#E5E5E5"> we are</font><font color="#CCCCCC"> attacking we need</font>

459
00:20:18,700 --> 00:20:24,040
to bypass them before we trigger<font color="#E5E5E5"> the</font>

460
00:20:21,100 --> 00:20:27,669
overflow either creates a lower or stack

461
00:20:24,040 --> 00:20:29,530
<font color="#E5E5E5">enemies and once we do over for what we</font>

462
00:20:27,670 --> 00:20:31,930
want is<font color="#CCCCCC"> to develop develop</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> rightward</font>

463
00:20:29,530 --> 00:20:35,260
<font color="#CCCCCC">primitive</font><font color="#E5E5E5"> so we have the control to</font>

464
00:20:31,930 --> 00:20:38,470
<font color="#CCCCCC">write some</font><font color="#E5E5E5"> data in some address in the</font>

465
00:20:35,260 --> 00:20:42,850
memory<font color="#E5E5E5"> and that would</font><font color="#CCCCCC"> allow us either to</font>

466
00:20:38,470 --> 00:20:45,160
to insert a web chain or do a simple

467
00:20:42,850 --> 00:20:48,820
shell code that<font color="#E5E5E5"> would be one inside the</font>

468
00:20:45,160 --> 00:20:51,010
<font color="#CCCCCC">camera once we have definitive</font><font color="#E5E5E5"> we want a</font>

469
00:20:48,820 --> 00:20:55,210
<font color="#E5E5E5">way to get out of the car</font><font color="#CCCCCC"> no to user</font>

470
00:20:51,010 --> 00:20:57,670
space that would<font color="#E5E5E5"> be</font><font color="#CCCCCC"> simpler to do</font><font color="#E5E5E5"> post</font>

471
00:20:55,210 --> 00:21:00,490
exploitation<font color="#CCCCCC"> so we're going to</font><font color="#E5E5E5"> use user</font>

472
00:20:57,670 --> 00:21:03,160
mode helpers which will not later to do

473
00:21:00,490 --> 00:21:05,560
this<font color="#CCCCCC"> process and</font><font color="#E5E5E5"> lastly if there are any</font>

474
00:21:03,160 --> 00:21:06,430
<font color="#E5E5E5">at the same module Linux security models</font>

475
00:21:05,560 --> 00:21:08,710
like<font color="#CCCCCC"> SELinux</font>

476
00:21:06,430 --> 00:21:10,690
or others<font color="#E5E5E5"> we want to</font><font color="#CCCCCC"> disable them before</font>

477
00:21:08,710 --> 00:21:12,160
going at user space because we are in

478
00:21:10,690 --> 00:21:16,120
<font color="#CCCCCC">kernel we have that ability</font><font color="#E5E5E5"> so it'd be</font>

479
00:21:12,160 --> 00:21:19,830
nice to do that<font color="#E5E5E5"> so what are the expected</font>

480
00:21:16,120 --> 00:21:23,020
mitigations<font color="#E5E5E5"> in 2017 in any</font><font color="#CCCCCC"> linux device</font>

481
00:21:19,830 --> 00:21:26,139
<font color="#E5E5E5">what we expect to</font><font color="#CCCCCC"> find</font><font color="#E5E5E5"> in devices</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> SLR</font>

482
00:21:23,020 --> 00:21:28,420
<font color="#CCCCCC">is address outer</font><font color="#E5E5E5"> space randomization it</font>

483
00:21:26,140 --> 00:21:31,990
would be hard<font color="#CCCCCC"> for</font><font color="#E5E5E5"> an attacker to know</font>

484
00:21:28,420 --> 00:21:33,940
the addresses<font color="#CCCCCC"> we</font><font color="#E5E5E5"> need to do the stack</font>

485
00:21:31,990 --> 00:21:39,010
overflow<font color="#CCCCCC"> so that is to be expected stack</font>

486
00:21:33,940 --> 00:21:43,690
<font color="#CCCCCC">calories are</font><font color="#E5E5E5"> very</font><font color="#CCCCCC"> basic</font><font color="#E5E5E5"> very good</font>

487
00:21:39,010 --> 00:21:46,320
<font color="#CCCCCC">mitigation to prevent stack overflows 45</font>

488
00:21:43,690 --> 00:21:48,490
source is a feature<font color="#E5E5E5"> of reduce</font><font color="#CCCCCC"> before</font>

489
00:21:46,320 --> 00:21:50,800
even hardening stack our<font color="#E5E5E5"> enemies</font>

490
00:21:48,490 --> 00:21:53,170
calories even<font color="#E5E5E5"> more so to put the stack</font>

491
00:21:50,800 --> 00:21:55,030
buffer is adjacent to<font color="#E5E5E5"> the calories so</font><font color="#CCCCCC"> if</font>

492
00:21:53,170 --> 00:21:57,670
an attacker<font color="#CCCCCC"> could overflow</font><font color="#E5E5E5"> that buffer</font>

493
00:21:55,030 --> 00:21:58,690
<font color="#E5E5E5">it would go into the</font><font color="#CCCCCC"> cannery and he has</font>

494
00:21:57,670 --> 00:22:02,380
to know<font color="#E5E5E5"> which</font><font color="#CCCCCC"> cannery</font>

495
00:21:58,690 --> 00:22:06,130
to exploit this<font color="#E5E5E5"> and</font><font color="#CCCCCC"> AMEX beat is a very</font>

496
00:22:02,380 --> 00:22:07,900
basic feature in a lot<font color="#E5E5E5"> of devices</font><font color="#CCCCCC"> that</font>

497
00:22:06,130 --> 00:22:11,410
is used<font color="#E5E5E5"> to prevent data from being</font>

498
00:22:07,900 --> 00:22:13,150
executed and code from being writable so

499
00:22:11,410 --> 00:22:15,610
the attacker cannot simply jump to its

500
00:22:13,150 --> 00:22:18,250
shellcode and<font color="#E5E5E5"> either on the stack or in</font>

501
00:22:15,610 --> 00:22:20,110
<font color="#CCCCCC">a</font><font color="#E5E5E5"> different</font><font color="#CCCCCC"> form in</font><font color="#E5E5E5"> the memory what are</font>

502
00:22:18,250 --> 00:22:23,020
the real world cannot configuration<font color="#E5E5E5"> that</font>

503
00:22:20,110 --> 00:22:25,240
we actually<font color="#E5E5E5"> find</font><font color="#CCCCCC"> K cell are the</font><font color="#E5E5E5"> a seller</font>

504
00:22:23,020 --> 00:22:27,730
of the kernel is not really enabled in

505
00:22:25,240 --> 00:22:29,140
any<font color="#E5E5E5"> devices</font><font color="#CCCCCC"> it was only</font><font color="#E5E5E5"> added</font><font color="#CCCCCC"> to the</font>

506
00:22:27,730 --> 00:22:32,290
current to<font color="#E5E5E5"> the default</font><font color="#CCCCCC"> configuration of</font>

507
00:22:29,140 --> 00:22:35,230
the kernel in very recent versions<font color="#E5E5E5"> and</font>

508
00:22:32,290 --> 00:22:38,080
it is a hassle<font color="#E5E5E5"> for a lot of devices to</font>

509
00:22:35,230 --> 00:22:42,130
<font color="#E5E5E5">use it so it's actually not being</font>

510
00:22:38,080 --> 00:22:46,270
<font color="#CCCCCC">enabled at all at least in devices that</font>

511
00:22:42,130 --> 00:22:47,980
have<font color="#CCCCCC"> blue topaz like</font><font color="#E5E5E5"> the case stack</font>

512
00:22:46,270 --> 00:22:50,110
Canaries<font color="#E5E5E5"> are</font><font color="#CCCCCC"> only enabled in the major</font>

513
00:22:47,980 --> 00:22:51,580
Linux distributions<font color="#E5E5E5"> they are not in the</font>

514
00:22:50,110 --> 00:22:54,969
default configuration<font color="#CCCCCC"> of the kernel for</font>

515
00:22:51,580 --> 00:22:56,980
some reason so any device device that

516
00:22:54,970 --> 00:22:59,050
uses mainline kernel just with a

517
00:22:56,980 --> 00:23:01,090
<font color="#E5E5E5">different configuration we're not</font>

518
00:22:59,050 --> 00:23:02,889
necessarily<font color="#E5E5E5"> enable them we actually</font>

519
00:23:01,090 --> 00:23:04,780
<font color="#CCCCCC">haven't been able to find any IOT</font>

520
00:23:02,890 --> 00:23:07,960
devices that<font color="#CCCCCC"> use that</font><font color="#E5E5E5"> Canaries although</font>

521
00:23:04,780 --> 00:23:10,180
they are very<font color="#CCCCCC"> basic litigation there is</font>

522
00:23:07,960 --> 00:23:13,030
a funny case<font color="#E5E5E5"> of</font><font color="#CCCCCC"> fortify source being</font>

523
00:23:10,180 --> 00:23:14,260
enabled<font color="#CCCCCC"> but stack Canaries</font><font color="#E5E5E5"> disabled this</font>

524
00:23:13,030 --> 00:23:17,649
is not a good<font color="#E5E5E5"> combination</font>

525
00:23:14,260 --> 00:23:20,050
<font color="#E5E5E5">because if you have enabled 45 source</font>

526
00:23:17,650 --> 00:23:22,240
the stack buffer will be placed<font color="#E5E5E5"> on the</font>

527
00:23:20,050 --> 00:23:24,700
bottom<font color="#E5E5E5"> of the stack</font><font color="#CCCCCC"> and then</font><font color="#E5E5E5"> the first</font>

528
00:23:22,240 --> 00:23:26,800
of<font color="#E5E5E5"> a three will be of a frame pointer or</font>

529
00:23:24,700 --> 00:23:28,240
the return address<font color="#E5E5E5"> so you instantly have</font>

530
00:23:26,800 --> 00:23:30,129
control over<font color="#E5E5E5"> something that's very</font>

531
00:23:28,240 --> 00:23:31,870
significant<font color="#E5E5E5"> and this is actually the</font>

532
00:23:30,130 --> 00:23:35,260
case<font color="#E5E5E5"> of the samsung smart virtual that</font>

533
00:23:31,870 --> 00:23:36,699
we have exploited<font color="#CCCCCC"> noetic sweet we were</font>

534
00:23:35,260 --> 00:23:38,320
really surprised to find out<font color="#CCCCCC"> that the</font>

535
00:23:36,700 --> 00:23:40,960
<font color="#E5E5E5">Amazon echo doesn't know does</font><font color="#CCCCCC"> not use</font>

536
00:23:38,320 --> 00:23:43,840
the NX bit<font color="#E5E5E5"> or</font><font color="#CCCCCC"> visited</font><font color="#E5E5E5"> poorly we are not</font>

537
00:23:40,960 --> 00:23:45,760
really sure<font color="#CCCCCC"> so we can do</font><font color="#E5E5E5"> it like the 90s</font>

538
00:23:43,840 --> 00:23:50,530
we can just dump jump to our<font color="#CCCCCC"> shell code</font>

539
00:23:45,760 --> 00:23:55,000
in the stack<font color="#CCCCCC"> so we</font><font color="#E5E5E5"> have tested two</font>

540
00:23:50,530 --> 00:23:56,260
devices for this RC<font color="#E5E5E5"> phone ability one is</font>

541
00:23:55,000 --> 00:23:59,560
the Samsung Smart Watch

542
00:23:56,260 --> 00:24:03,490
it<font color="#CCCCCC"> was a pretty new kernel</font><font color="#E5E5E5"> not that all</font>

543
00:23:59,560 --> 00:24:06,010
the<font color="#E5E5E5"> Canada 3.18 each one's an ARM</font>

544
00:24:03,490 --> 00:24:08,080
processor 64 beat<font color="#E5E5E5"> it has very few</font>

545
00:24:06,010 --> 00:24:09,720
integrations no case<font color="#CCCCCC"> a la nostra</font><font color="#E5E5E5"> can</font>

546
00:24:08,080 --> 00:24:11,909
erase<font color="#E5E5E5"> it has the funny coming</font>

547
00:24:09,720 --> 00:24:15,090
or<font color="#CCCCCC"> fortify</font><font color="#E5E5E5"> source enabled sixth a</font>

548
00:24:11,910 --> 00:24:18,500
<font color="#E5E5E5">Canary's disabled</font><font color="#CCCCCC"> it also has smack</font>

549
00:24:15,090 --> 00:24:21,990
which<font color="#CCCCCC"> isn't</font><font color="#E5E5E5"> some alternative to</font><font color="#CCCCCC"> sa</font><font color="#E5E5E5"> linux</font>

550
00:24:18,500 --> 00:24:23,700
but we can mitigate<font color="#E5E5E5"> we can bypass that</font>

551
00:24:21,990 --> 00:24:25,830
once we have a code execution in<font color="#E5E5E5"> the</font>

552
00:24:23,700 --> 00:24:29,010
camera<font color="#CCCCCC"> and the second case study</font><font color="#E5E5E5"> is</font>

553
00:24:25,830 --> 00:24:31,649
<font color="#E5E5E5">damos an echo which is based on a very</font>

554
00:24:29,010 --> 00:24:33,200
old camera for some reason it's 2.6

555
00:24:31,650 --> 00:24:36,210
kernel

556
00:24:33,200 --> 00:24:39,570
it runs on our<font color="#CCCCCC"> 32-bit and it has</font>

557
00:24:36,210 --> 00:24:41,400
virtually no<font color="#E5E5E5"> mitigation at all</font><font color="#CCCCCC"> no case</font>

558
00:24:39,570 --> 00:24:44,669
alone<font color="#E5E5E5"> or stack Canaries no fortify</font>

559
00:24:41,400 --> 00:24:47,670
source nor<font color="#E5E5E5"> an XP no access</font><font color="#CCCCCC"> controls</font><font color="#E5E5E5"> in</font>

560
00:24:44,670 --> 00:24:49,080
<font color="#E5E5E5">that case there is no 45 source but it</font>

561
00:24:47,670 --> 00:24:52,470
<font color="#E5E5E5">actually works in our benefit we're</font>

562
00:24:49,080 --> 00:24:53,909
going to show that<font color="#E5E5E5"> because we can</font>

563
00:24:52,470 --> 00:24:56,550
overflow something that is not the stack

564
00:24:53,910 --> 00:24:58,440
pointer<font color="#E5E5E5"> or the frame pointer and we that</font>

565
00:24:56,550 --> 00:25:00,870
point the<font color="#CCCCCC"> the fact is that there's a</font>

566
00:24:58,440 --> 00:25:02,820
very<font color="#CCCCCC"> very nice and valuable pointer for</font>

567
00:25:00,870 --> 00:25:06,030
<font color="#E5E5E5">that a current</font><font color="#CCCCCC"> that you</font><font color="#E5E5E5"> pretty adjacent</font>

568
00:25:02,820 --> 00:25:08,189
to the overflowing buffer<font color="#CCCCCC"> alison has</font>

569
00:25:06,030 --> 00:25:12,000
provided a<font color="#CCCCCC"> patch for</font><font color="#E5E5E5"> this just two</font><font color="#CCCCCC"> weeks</font>

570
00:25:08,190 --> 00:25:14,400
<font color="#CCCCCC">ago so now Greg is going</font><font color="#E5E5E5"> to talk</font><font color="#CCCCCC"> about</font>

571
00:25:12,000 --> 00:25:17,970
the<font color="#E5E5E5"> delimited</font><font color="#CCCCCC"> RC so we</font><font color="#E5E5E5"> have in the old</font>

572
00:25:14,400 --> 00:25:20,220
colonel<font color="#CCCCCC"> that's one of on</font><font color="#E5E5E5"> the echo</font><font color="#CCCCCC"> okay</font>

573
00:25:17,970 --> 00:25:22,050
so initially when we<font color="#E5E5E5"> looked at the echo</font>

574
00:25:20,220 --> 00:25:24,330
<font color="#CCCCCC">and the</font><font color="#E5E5E5"> synthesis has such an old kernel</font>

575
00:25:22,050 --> 00:25:25,770
and actually didn't find<font color="#CCCCCC"> that</font>

576
00:25:24,330 --> 00:25:27,960
vulnerability<font color="#E5E5E5"> that Ben has shown</font>

577
00:25:25,770 --> 00:25:31,020
previously in this version because<font color="#E5E5E5"> it's</font>

578
00:25:27,960 --> 00:25:34,140
existed<font color="#CCCCCC"> in its form from</font><font color="#E5E5E5"> Linux 3.3 and</font>

579
00:25:31,020 --> 00:25:37,830
<font color="#E5E5E5">up however</font><font color="#CCCCCC"> what we did find is</font><font color="#E5E5E5"> that it</font>

580
00:25:34,140 --> 00:25:41,310
does<font color="#E5E5E5"> exist a from kernel to</font><font color="#CCCCCC"> 632 enough</font>

581
00:25:37,830 --> 00:25:44,100
in a more limited<font color="#E5E5E5"> scenario as you can</font>

582
00:25:41,310 --> 00:25:45,659
see the state that that<font color="#E5E5E5"> case needs to</font><font color="#CCCCCC"> be</font>

583
00:25:44,100 --> 00:25:47,040
<font color="#CCCCCC">in</font><font color="#E5E5E5"> there is</font><font color="#CCCCCC"> an exception</font><font color="#E5E5E5"> this case</font>

584
00:25:45,660 --> 00:25:48,900
previously<font color="#E5E5E5"> it was in the pending state</font>

585
00:25:47,040 --> 00:25:50,520
again doesn't really matter this is

586
00:25:48,900 --> 00:25:52,350
<font color="#E5E5E5">attacker control more or less</font>

587
00:25:50,520 --> 00:25:55,410
however the limitation here is this if

588
00:25:52,350 --> 00:25:57,990
above there and what it does is it

589
00:25:55,410 --> 00:26:01,890
checks that<font color="#E5E5E5"> the size of the input</font><font color="#CCCCCC"> a</font>

590
00:25:57,990 --> 00:26:03,900
configuration<font color="#E5E5E5"> response message is 60</font>

591
00:26:01,890 --> 00:26:06,300
bytes<font color="#CCCCCC"> and if you</font><font color="#E5E5E5"> remember the buffer</font>

592
00:26:03,900 --> 00:26:08,100
we're overflowing is 64 bytes so that

593
00:26:06,300 --> 00:26:12,629
should be<font color="#CCCCCC"> a problem</font><font color="#E5E5E5"> right well it turns</font>

594
00:26:08,100 --> 00:26:16,980
out<font color="#E5E5E5"> that</font><font color="#CCCCCC"> it it really isn't</font><font color="#E5E5E5"> what happens</font>

595
00:26:12,630 --> 00:26:18,620
is<font color="#E5E5E5"> that the</font><font color="#CCCCCC"> configuration parameters</font>

596
00:26:16,980 --> 00:26:22,070
coming elements and

597
00:26:18,620 --> 00:26:25,879
these elements<font color="#CCCCCC"> are built like TLC's</font>

598
00:26:22,070 --> 00:26:29,330
<font color="#E5E5E5">third length value structures and so</font>

599
00:26:25,880 --> 00:26:32,390
basically there<font color="#CCCCCC"> is</font><font color="#E5E5E5"> one by four type in</font>

600
00:26:29,330 --> 00:26:35,780
this<font color="#E5E5E5"> case type number four is that case</font>

601
00:26:32,390 --> 00:26:38,270
down<font color="#E5E5E5"> there called</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> conf RFC</font><font color="#CCCCCC"> and the</font>

602
00:26:35,780 --> 00:26:39,980
length can be<font color="#E5E5E5"> zero for</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> so the</font>

603
00:26:38,270 --> 00:26:42,080
only<font color="#E5E5E5"> two bytes are required to define a</font>

604
00:26:39,980 --> 00:26:43,700
<font color="#E5E5E5">single element but what this function</font>

605
00:26:42,080 --> 00:26:45,620
does this code is<font color="#E5E5E5"> out of the same</font>

606
00:26:43,700 --> 00:26:47,870
function<font color="#CCCCCC"> that has the vulnerabilities</font>

607
00:26:45,620 --> 00:26:50,570
original vulnerability in it<font color="#E5E5E5"> and what it</font>

608
00:26:47,870 --> 00:26:53,899
<font color="#E5E5E5">does is that the loop goes over all the</font>

609
00:26:50,570 --> 00:26:55,340
<font color="#E5E5E5">input elements and then it does</font>

610
00:26:53,900 --> 00:26:57,260
something<font color="#E5E5E5"> with them and it writes out</font>

611
00:26:55,340 --> 00:26:59,240
elements into the<font color="#E5E5E5"> output however in this</font>

612
00:26:57,260 --> 00:27:02,390
case<font color="#E5E5E5"> as you</font><font color="#CCCCCC"> can see the element</font><font color="#E5E5E5"> is</font>

613
00:26:59,240 --> 00:27:04,190
written out there is not of the of the

614
00:27:02,390 --> 00:27:06,110
zero size that we've set but of the

615
00:27:04,190 --> 00:27:07,970
actual real size for that<font color="#E5E5E5"> element which</font>

616
00:27:06,110 --> 00:27:10,729
is that size of down there which happens

617
00:27:07,970 --> 00:27:13,070
to<font color="#CCCCCC"> be more than just</font><font color="#E5E5E5"> these two bytes so</font>

618
00:27:10,730 --> 00:27:15,700
this means we<font color="#CCCCCC"> can amplify</font><font color="#E5E5E5"> the size of</font>

619
00:27:13,070 --> 00:27:18,409
our elements inside the output<font color="#CCCCCC"> buffer</font>

620
00:27:15,700 --> 00:27:20,960
and what we<font color="#E5E5E5"> are showing</font><font color="#CCCCCC"> here this is</font>

621
00:27:18,410 --> 00:27:23,179
actually<font color="#CCCCCC"> the actual stack frame from the</font>

622
00:27:20,960 --> 00:27:28,190
<font color="#E5E5E5">echo on</font><font color="#CCCCCC"> the previous version before it's</font>

623
00:27:23,179 --> 00:27:31,059
patched<font color="#E5E5E5"> and on the left there is a</font><font color="#CCCCCC"> r2 by</font>

624
00:27:28,190 --> 00:27:33,710
what we<font color="#E5E5E5"> call the zero land RFC element</font>

625
00:27:31,059 --> 00:27:35,480
and on the right what's written<font color="#E5E5E5"> to this</font>

626
00:27:33,710 --> 00:27:37,850
to<font color="#E5E5E5"> the stack frame was written to the</font>

627
00:27:35,480 --> 00:27:40,910
output buffer<font color="#E5E5E5"> is an 11 by 2</font><font color="#CCCCCC"> element</font>

628
00:27:37,850 --> 00:27:42,830
because it has<font color="#E5E5E5"> it's supposed to be 11 by</font>

629
00:27:40,910 --> 00:27:45,230
its<font color="#CCCCCC"> low so for every</font><font color="#E5E5E5"> 2 bytes we can</font>

630
00:27:42,830 --> 00:27:47,360
write 11 bytes and if we do the<font color="#CCCCCC"> message</font>

631
00:27:45,230 --> 00:27:50,690
in the message<font color="#E5E5E5"> shows that for the 60</font>

632
00:27:47,360 --> 00:27:52,760
bytes that<font color="#E5E5E5"> we can input we get 330 bytes</font>

633
00:27:50,690 --> 00:27:55,100
<font color="#E5E5E5">of output which is a lot more than 64</font>

634
00:27:52,760 --> 00:27:57,350
bytes that<font color="#E5E5E5"> we should have an and one</font>

635
00:27:55,100 --> 00:28:00,050
thing that is<font color="#CCCCCC"> uncomfortable here is that</font>

636
00:27:57,350 --> 00:28:02,030
the data<font color="#CCCCCC"> is uncontrolled this is</font>

637
00:28:00,050 --> 00:28:07,520
uninitialized what<font color="#CCCCCC"> is right in there in</font>

638
00:28:02,030 --> 00:28:09,410
that<font color="#E5E5E5"> element okay so we looked</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> the</font>

639
00:28:07,520 --> 00:28:14,200
<font color="#E5E5E5">stack of the stack frame itself on the</font>

640
00:28:09,410 --> 00:28:17,240
echo<font color="#E5E5E5"> and</font><font color="#CCCCCC"> as Ben said it has no</font><font color="#E5E5E5"> 45 source</font>

641
00:28:14,200 --> 00:28:19,880
and<font color="#E5E5E5"> therefore it is</font><font color="#CCCCCC"> not adjacent to the</font>

642
00:28:17,240 --> 00:28:21,260
return address or the<font color="#E5E5E5"> save registers</font>

643
00:28:19,880 --> 00:28:23,179
however<font color="#CCCCCC"> there's</font><font color="#E5E5E5"> something more</font>

644
00:28:21,260 --> 00:28:25,910
<font color="#CCCCCC">interesting there</font><font color="#E5E5E5"> the buffer is slightly</font>

645
00:28:23,179 --> 00:28:28,100
above on<font color="#E5E5E5"> the stack from a pointer</font><font color="#CCCCCC"> called</font>

646
00:28:25,910 --> 00:28:29,970
PTR which you can see here<font color="#E5E5E5"> this is</font>

647
00:28:28,100 --> 00:28:32,159
<font color="#E5E5E5">actually the pointer of</font>

648
00:28:29,970 --> 00:28:34,320
<font color="#CCCCCC">where the next element is written to so</font>

649
00:28:32,160 --> 00:28:35,880
an element<font color="#CCCCCC"> is sparse or</font><font color="#E5E5E5"> Canaries updated</font>

650
00:28:34,320 --> 00:28:38,399
<font color="#E5E5E5">to the next element in the output</font><font color="#CCCCCC"> button</font>

651
00:28:35,880 --> 00:28:41,790
<font color="#E5E5E5">so if we</font><font color="#CCCCCC"> overflow that</font><font color="#E5E5E5"> with an element</font>

652
00:28:38,400 --> 00:28:43,770
and we<font color="#E5E5E5"> control what was written then we</font>

653
00:28:41,790 --> 00:28:46,950
control where the next<font color="#E5E5E5"> element will be</font>

654
00:28:43,770 --> 00:28:49,320
written and this gives us our<font color="#E5E5E5"> right what</font>

655
00:28:46,950 --> 00:28:54,150
<font color="#CCCCCC">we're</font><font color="#E5E5E5"> primitive it's a sort of what</font>

656
00:28:49,320 --> 00:28:57,480
we're going<font color="#CCCCCC"> to do and however there's an</font>

657
00:28:54,150 --> 00:29:00,060
annoying limitation simply writing<font color="#E5E5E5"> those</font>

658
00:28:57,480 --> 00:29:01,680
24<font color="#CCCCCC"> zero and four</font><font color="#E5E5E5"> C's</font><font color="#CCCCCC"> it will not allow</font>

659
00:29:00,060 --> 00:29:03,360
<font color="#CCCCCC">us</font><font color="#E5E5E5"> to control the pointer it will</font>

660
00:29:01,680 --> 00:29:07,950
overflow it but the data will<font color="#E5E5E5"> be</font>

661
00:29:03,360 --> 00:29:09,689
uncontrolled so we need to<font color="#E5E5E5"> to massage it</font>

662
00:29:07,950 --> 00:29:11,130
in some way to find<font color="#E5E5E5"> a solution</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> that's</font>

663
00:29:09,690 --> 00:29:13,080
so basically there<font color="#E5E5E5"> are other</font><font color="#CCCCCC"> elements</font>

664
00:29:11,130 --> 00:29:15,690
except for RFC they have different sizes

665
00:29:13,080 --> 00:29:19,199
<font color="#E5E5E5">in this case it's the flush and MTU</font>

666
00:29:15,690 --> 00:29:22,650
elements so<font color="#E5E5E5"> we build our input buffer in</font>

667
00:29:19,200 --> 00:29:25,220
such a way that what what happens is

668
00:29:22,650 --> 00:29:27,930
<font color="#E5E5E5">that there are 22 empty RFC's that will</font>

669
00:29:25,220 --> 00:29:30,090
bring us further away<font color="#E5E5E5"> in on the stack</font>

670
00:29:27,930 --> 00:29:31,740
frame<font color="#E5E5E5"> then we use other elements in this</font>

671
00:29:30,090 --> 00:29:35,490
case flush elements to align ourselves

672
00:29:31,740 --> 00:29:40,110
to<font color="#CCCCCC"> all right and lastly we can write two</font>

673
00:29:35,490 --> 00:29:43,440
controlled<font color="#E5E5E5"> bytes anywhere we want there</font>

674
00:29:40,110 --> 00:29:45,300
well basically<font color="#E5E5E5"> where we are lying to the</font>

675
00:29:43,440 --> 00:29:47,970
place where line<font color="#CCCCCC"> con is on to</font><font color="#E5E5E5"> this</font>

676
00:29:45,300 --> 00:29:49,620
pointer this pointer again controls

677
00:29:47,970 --> 00:29:52,470
where the<font color="#E5E5E5"> next element will be</font><font color="#CCCCCC"> written</font>

678
00:29:49,620 --> 00:29:54,449
<font color="#E5E5E5">and particularly here we overflow the</font>

679
00:29:52,470 --> 00:29:56,730
first two bytes of that pointer and this

680
00:29:54,450 --> 00:29:58,590
is a little endian<font color="#E5E5E5"> our machine the</font><font color="#CCCCCC"> first</font>

681
00:29:56,730 --> 00:30:01,050
two<font color="#E5E5E5"> bytes are the two least significant</font>

682
00:29:58,590 --> 00:30:04,740
<font color="#E5E5E5">bits of the address and this pointer is</font>

683
00:30:01,050 --> 00:30:08,340
an address to the stack so overflowing

684
00:30:04,740 --> 00:30:09,390
the two least significant byte of an

685
00:30:08,340 --> 00:30:12,030
<font color="#E5E5E5">address on the stack</font>

686
00:30:09,390 --> 00:30:16,200
<font color="#CCCCCC">lets us</font><font color="#E5E5E5"> then write anywhere basically</font><font color="#CCCCCC"> on</font>

687
00:30:12,030 --> 00:30:18,540
the stack<font color="#CCCCCC"> and this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> what we do what</font>

688
00:30:16,200 --> 00:30:20,700
you<font color="#E5E5E5"> can see</font><font color="#CCCCCC"> here is that</font><font color="#E5E5E5"> at</font><font color="#CCCCCC"> first we</font>

689
00:30:18,540 --> 00:30:24,690
send all<font color="#CCCCCC"> our elements that overflow PTR</font>

690
00:30:20,700 --> 00:30:26,670
<font color="#CCCCCC">and we write the two least significant</font>

691
00:30:24,690 --> 00:30:28,620
<font color="#CCCCCC">bikes of where the</font><font color="#E5E5E5"> next element will be</font>

692
00:30:26,670 --> 00:30:30,420
written<font color="#E5E5E5"> and on the right to see where we</font>

693
00:30:28,620 --> 00:30:32,429
write those bytes<font color="#CCCCCC"> and</font><font color="#E5E5E5"> we overflow the</font>

694
00:30:30,420 --> 00:30:34,470
<font color="#E5E5E5">ELA register on the same register which</font>

695
00:30:32,430 --> 00:30:36,240
<font color="#CCCCCC">is the return address of the</font><font color="#E5E5E5"> function we</font>

696
00:30:34,470 --> 00:30:38,970
overflow<font color="#E5E5E5"> two bytes here because that's</font>

697
00:30:36,240 --> 00:30:41,900
<font color="#E5E5E5">kind of our limitation and we can do</font>

698
00:30:38,970 --> 00:30:47,450
that with a single<font color="#CCCCCC"> alt okay</font>

699
00:30:41,900 --> 00:30:49,640
conf<font color="#E5E5E5"> response a command so it's kind of</font>

700
00:30:47,450 --> 00:30:51,560
a problem<font color="#E5E5E5"> writing</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> to buy it but it</font>

701
00:30:49,640 --> 00:30:55,090
<font color="#E5E5E5">turns out</font><font color="#CCCCCC"> that Bluetooth being so</font>

702
00:30:51,560 --> 00:30:58,550
complicated is good for us again

703
00:30:55,090 --> 00:31:01,490
basically it's possible in<font color="#CCCCCC"> l2</font><font color="#E5E5E5"> cap to put</font>

704
00:30:58,550 --> 00:31:02,750
multiple commands into one packet<font color="#CCCCCC"> and in</font>

705
00:31:01,490 --> 00:31:05,990
<font color="#E5E5E5">addition</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> that there is</font><font color="#CCCCCC"> a</font>

706
00:31:02,750 --> 00:31:07,730
fragmentation<font color="#E5E5E5"> layer below</font><font color="#CCCCCC"> LT up</font><font color="#E5E5E5"> at</font><font color="#CCCCCC"> NaCl</font>

707
00:31:05,990 --> 00:31:09,830
which<font color="#E5E5E5"> allows us to now build really</font>

708
00:31:07,730 --> 00:31:12,020
large<font color="#E5E5E5"> l2 cache packets so basically we</font>

709
00:31:09,830 --> 00:31:15,290
<font color="#CCCCCC">can pack together lots</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> lots of these</font>

710
00:31:12,020 --> 00:31:18,710
commands and and then in a single packet

711
00:31:15,290 --> 00:31:21,620
right<font color="#E5E5E5"> however many bytes</font><font color="#CCCCCC"> we want on the</font>

712
00:31:18,710 --> 00:31:23,930
<font color="#E5E5E5">step so what we'll do with that is at</font>

713
00:31:21,620 --> 00:31:25,550
first<font color="#E5E5E5"> write a shellcode somewhere on the</font>

714
00:31:23,930 --> 00:31:27,110
stack<font color="#CCCCCC"> again there is no NX bit on</font><font color="#E5E5E5"> this</font>

715
00:31:25,550 --> 00:31:32,629
device<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we can just write</font><font color="#E5E5E5"> a shellcode</font>

716
00:31:27,110 --> 00:31:35,840
<font color="#CCCCCC">and then</font><font color="#E5E5E5"> overflow the overflow with two</font>

717
00:31:32,630 --> 00:31:37,640
times<font color="#E5E5E5"> two bytes</font><font color="#CCCCCC"> the return</font><font color="#E5E5E5"> address there</font>

718
00:31:35,840 --> 00:31:40,370
is<font color="#CCCCCC"> a small caveat here you may see that</font>

719
00:31:37,640 --> 00:31:41,930
there are uncontrolled<font color="#CCCCCC"> two bytes written</font>

720
00:31:40,370 --> 00:31:44,629
in addition to our control two bytes so

721
00:31:41,930 --> 00:31:47,510
we need to write them<font color="#E5E5E5"> in</font><font color="#CCCCCC"> reverse a lot</font>

722
00:31:44,630 --> 00:31:50,510
<font color="#CCCCCC">of problem and then our shell code will</font>

723
00:31:47,510 --> 00:31:53,540
be<font color="#E5E5E5"> executed</font><font color="#CCCCCC"> as you can see here if you</font>

724
00:31:50,510 --> 00:31:58,040
can see<font color="#CCCCCC"> on the left there</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> huge</font>

725
00:31:53,540 --> 00:31:59,840
packet it contains many<font color="#E5E5E5"> it's over a CL</font>

726
00:31:58,040 --> 00:32:02,180
fragmentation is pretty large<font color="#E5E5E5"> and it</font>

727
00:31:59,840 --> 00:32:04,459
contains<font color="#E5E5E5"> many LT</font><font color="#CCCCCC"> cap commands which are</font>

728
00:32:02,180 --> 00:32:05,810
<font color="#E5E5E5">the</font><font color="#CCCCCC"> configured</font><font color="#E5E5E5"> sponsors and on the right</font>

729
00:32:04,460 --> 00:32:08,360
is a particular<font color="#E5E5E5"> single configuration</font>

730
00:32:05,810 --> 00:32:10,220
response that has many<font color="#E5E5E5"> of these empty</font>

731
00:32:08,360 --> 00:32:12,050
RFC elements these<font color="#E5E5E5"> are</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> empty options</font>

732
00:32:10,220 --> 00:32:14,990
that you see there<font color="#CCCCCC"> Wireshark and</font><font color="#E5E5E5"> parsing</font>

733
00:32:12,050 --> 00:32:16,520
and lastly<font color="#E5E5E5"> there are</font><font color="#CCCCCC"> the two</font><font color="#E5E5E5"> flash</font>

734
00:32:14,990 --> 00:32:19,550
elements that are<font color="#E5E5E5"> used to</font><font color="#CCCCCC"> actually write</font>

735
00:32:16,520 --> 00:32:21,650
data<font color="#E5E5E5"> okay so now Ben is</font><font color="#CCCCCC"> gonna explain</font>

736
00:32:19,550 --> 00:32:25,460
what you actually do with<font color="#E5E5E5"> this oh it's</font>

737
00:32:21,650 --> 00:32:28,460
post exploitation<font color="#E5E5E5"> yes so I</font><font color="#CCCCCC"> have as</font><font color="#E5E5E5"> we</font>

738
00:32:25,460 --> 00:32:30,890
said we now have a kind of<font color="#E5E5E5"> remote code</font>

739
00:32:28,460 --> 00:32:32,480
execution but<font color="#E5E5E5"> we want something</font><font color="#CCCCCC"> more</font>

740
00:32:30,890 --> 00:32:35,270
convenient<font color="#E5E5E5"> for</font><font color="#CCCCCC"> us we want to have a word</font>

741
00:32:32,480 --> 00:32:37,550
shell and for that<font color="#E5E5E5"> we use</font><font color="#CCCCCC"> a very nice</font>

742
00:32:35,270 --> 00:32:39,350
concept<font color="#E5E5E5"> that exists inside the Linux</font>

743
00:32:37,550 --> 00:32:42,139
kernel which is<font color="#E5E5E5"> called user mode helpers</font>

744
00:32:39,350 --> 00:32:46,389
<font color="#CCCCCC">it</font><font color="#E5E5E5"> actually exists inside</font><font color="#CCCCCC"> the kernel to</font>

745
00:32:42,140 --> 00:32:46,390
allow it<font color="#E5E5E5"> to run some commands</font><font color="#CCCCCC"> user space</font>

746
00:32:46,840 --> 00:32:52,159
in different<font color="#CCCCCC"> scenarios for example if a</font>

747
00:32:49,520 --> 00:32:54,230
device wants to power off he wants to do

748
00:32:52,160 --> 00:32:57,020
that gracefully so he wants to run<font color="#E5E5E5"> some</font>

749
00:32:54,230 --> 00:32:59,540
of commands in userspace<font color="#E5E5E5"> to shut down</font>

750
00:32:57,020 --> 00:33:01,220
the services nicely<font color="#E5E5E5"> before actually</font>

751
00:32:59,540 --> 00:33:03,770
<font color="#CCCCCC">firing</font><font color="#E5E5E5"> off the machine</font>

752
00:33:01,220 --> 00:33:06,110
so the orderly power function does exact

753
00:33:03,770 --> 00:33:07,820
exactly that and it<font color="#E5E5E5"> takes the power of</font>

754
00:33:06,110 --> 00:33:09,409
<font color="#E5E5E5">command which</font><font color="#CCCCCC"> is a global which is a</font>

755
00:33:07,820 --> 00:33:12,770
writable<font color="#E5E5E5"> spring inside the kernel and</font>

756
00:33:09,410 --> 00:33:15,230
once that command uses<font color="#CCCCCC"> a</font><font color="#E5E5E5"> space it also</font>

757
00:33:12,770 --> 00:33:17,900
eventually<font color="#E5E5E5"> power of the machine but it</font>

758
00:33:15,230 --> 00:33:18,890
has a factor that<font color="#CCCCCC"> allows you to</font><font color="#E5E5E5"> prevent</font>

759
00:33:17,900 --> 00:33:21,680
it<font color="#E5E5E5"> from doing that</font>

760
00:33:18,890 --> 00:33:23,330
so<font color="#CCCCCC"> our circle will basically</font><font color="#E5E5E5"> right over</font>

761
00:33:21,680 --> 00:33:24,830
that<font color="#E5E5E5"> power of command whatever commands</font>

762
00:33:23,330 --> 00:33:27,500
<font color="#CCCCCC">we're going to run in user space and</font>

763
00:33:24,830 --> 00:33:30,020
call the orderly power function so it's

764
00:33:27,500 --> 00:33:32,420
very simple<font color="#E5E5E5"> so just to recap on the</font>

765
00:33:30,020 --> 00:33:33,770
exploit process what we do is we<font color="#E5E5E5"> begin</font>

766
00:33:32,420 --> 00:33:36,680
<font color="#CCCCCC">in early cap connection with a high</font><font color="#E5E5E5"> end</font>

767
00:33:33,770 --> 00:33:38,960
<font color="#CCCCCC">for</font><font color="#E5E5E5"> you that will</font><font color="#CCCCCC"> allow us to send the</font>

768
00:33:36,680 --> 00:33:41,510
large packet<font color="#CCCCCC"> but take it</font><font color="#E5E5E5"> Greg showed you</font>

769
00:33:38,960 --> 00:33:43,970
before containing all of<font color="#E5E5E5"> these multiple</font>

770
00:33:41,510 --> 00:33:46,070
configuration response commands they

771
00:33:43,970 --> 00:33:48,860
will write our<font color="#E5E5E5"> shell code to the stack</font>

772
00:33:46,070 --> 00:33:52,189
in an unused everyone on the stack and

773
00:33:48,860 --> 00:33:54,709
<font color="#CCCCCC">then also</font><font color="#E5E5E5"> overwrite the return address</font>

774
00:33:52,190 --> 00:33:57,380
of the<font color="#CCCCCC"> function so</font><font color="#E5E5E5"> we're all caught with</font>

775
00:33:54,710 --> 00:33:58,850
one the pair will simply arrive whatever

776
00:33:57,380 --> 00:34:02,120
commands we want to run in<font color="#CCCCCC"> userspace</font>

777
00:33:58,850 --> 00:34:04,189
on the power of command and execute the

778
00:34:02,120 --> 00:34:06,080
<font color="#E5E5E5">order</font><font color="#CCCCCC"> the power function</font><font color="#E5E5E5"> and finally</font><font color="#CCCCCC"> it</font>

779
00:34:04,190 --> 00:34:07,960
<font color="#CCCCCC">will restore execution and the device</font>

780
00:34:06,080 --> 00:34:12,980
device will be<font color="#E5E5E5"> unharmed</font>

781
00:34:07,960 --> 00:34:16,300
<font color="#E5E5E5">so it will continue to run</font><font color="#CCCCCC"> in the</font>

782
00:34:12,980 --> 00:34:19,370
<font color="#E5E5E5">SmartWatch you had to have a different</font>

783
00:34:16,300 --> 00:34:23,030
exploit a bit difficult guys but it uses

784
00:34:19,370 --> 00:34:24,500
<font color="#CCCCCC">the</font><font color="#E5E5E5"> same principles but it does have to</font>

785
00:34:23,030 --> 00:34:27,140
do something and<font color="#CCCCCC"> be different the expert</font>

786
00:34:24,500 --> 00:34:32,440
was<font color="#E5E5E5"> develop</font><font color="#CCCCCC"> /</font><font color="#E5E5E5"> co-worker force</font><font color="#CCCCCC"> alone</font>

787
00:34:27,139 --> 00:34:36,409
listener and it has to bypass the NX<font color="#E5E5E5"> bit</font>

788
00:34:32,440 --> 00:34:41,090
limitation so they the stack cannot be

789
00:34:36,409 --> 00:34:44,779
executed<font color="#E5E5E5"> in this case</font><font color="#CCCCCC"> but and we can do</font>

790
00:34:41,090 --> 00:34:47,120
a<font color="#E5E5E5"> basic wife chain that gives us the</font>

791
00:34:44,780 --> 00:34:51,340
right<font color="#CCCCCC"> work where Matthias</font><font color="#E5E5E5"> and then we</font>

792
00:34:47,120 --> 00:34:54,290
<font color="#CCCCCC">just do the same</font><font color="#E5E5E5"> thing we write our</font>

793
00:34:51,340 --> 00:34:56,210
power of<font color="#CCCCCC"> command with whatever</font><font color="#E5E5E5"> the</font>

794
00:34:54,290 --> 00:34:59,300
command we want and then we're on<font color="#E5E5E5"> the</font>

795
00:34:56,210 --> 00:35:05,900
<font color="#E5E5E5">orderly power function and that's</font><font color="#CCCCCC"> that's</font>

796
00:34:59,300 --> 00:35:07,920
<font color="#E5E5E5">it</font><font color="#CCCCCC"> okay so we</font><font color="#E5E5E5"> wanted to to take take</font><font color="#CCCCCC"> a</font>

797
00:35:05,900 --> 00:35:09,960
<font color="#E5E5E5">look at devices that do have</font>

798
00:35:07,920 --> 00:35:12,900
<font color="#E5E5E5">like these specific devices that have</font>

799
00:35:09,960 --> 00:35:14,490
<font color="#CCCCCC">stack areas</font><font color="#E5E5E5"> okay Solara</font><font color="#CCCCCC"> and this is like</font>

800
00:35:12,900 --> 00:35:17,250
really really<font color="#E5E5E5"> new we found this a week</font>

801
00:35:14,490 --> 00:35:18,959
ago<font color="#CCCCCC"> and</font><font color="#E5E5E5"> it's actually been it's a new</font>

802
00:35:17,250 --> 00:35:21,450
phone ability that we<font color="#E5E5E5"> found it's a ninth</font>

803
00:35:18,960 --> 00:35:23,160
<font color="#E5E5E5">Bluetooth vulnerability</font><font color="#CCCCCC"> so it's an</font>

804
00:35:21,450 --> 00:35:25,290
information<font color="#E5E5E5"> leak</font><font color="#CCCCCC"> vulnerability from the</font>

805
00:35:23,160 --> 00:35:30,420
<font color="#E5E5E5">Linux kernel in the same beloved</font>

806
00:35:25,290 --> 00:35:31,890
function as we kept our<font color="#CCCCCC"> conf RSP so this</font>

807
00:35:30,420 --> 00:35:34,080
<font color="#E5E5E5">information it can it can allow</font>

808
00:35:31,890 --> 00:35:36,960
attackers to bypass mitigation<font color="#E5E5E5"> such a</font>

809
00:35:34,080 --> 00:35:40,110
case of our stack Canaries<font color="#E5E5E5"> by</font><font color="#CCCCCC"> leaking</font>

810
00:35:36,960 --> 00:35:44,270
<font color="#CCCCCC">the pointers or by linking the stack</font>

811
00:35:40,110 --> 00:35:47,250
Canaries<font color="#E5E5E5"> we have a bit</font><font color="#CCCCCC"> of connection so</font>

812
00:35:44,270 --> 00:35:50,430
what we can<font color="#E5E5E5"> see</font><font color="#CCCCCC"> here is the EFS viable</font>

813
00:35:47,250 --> 00:35:52,350
is uninitialized on the stack<font color="#CCCCCC"> and</font><font color="#E5E5E5"> there</font>

814
00:35:50,430 --> 00:35:54,480
is a flow in<font color="#E5E5E5"> the code</font><font color="#CCCCCC"> that allows us to</font>

815
00:35:52,350 --> 00:35:55,860
send<font color="#E5E5E5"> it back to you this up to the</font>

816
00:35:54,480 --> 00:35:59,520
attacker uninitialized<font color="#CCCCCC"> in</font><font color="#E5E5E5"> its</font>

817
00:35:55,860 --> 00:36:01,530
uninitialized state the<font color="#CCCCCC"> OL and you can</font>

818
00:35:59,520 --> 00:36:05,610
see there is the<font color="#E5E5E5"> input configuration</font>

819
00:36:01,530 --> 00:36:06,930
element that is but he's<font color="#CCCCCC"> been</font><font color="#E5E5E5"> parsed so</font>

820
00:36:05,610 --> 00:36:10,290
the attacker has the control<font color="#CCCCCC"> of this</font>

821
00:36:06,930 --> 00:36:13,680
length so it can avoid the mem copy<font color="#E5E5E5"> call</font>

822
00:36:10,290 --> 00:36:17,370
by sending an EFS element which is<font color="#E5E5E5"> not</font>

823
00:36:13,680 --> 00:36:20,279
the size of EFS<font color="#E5E5E5"> and then the</font><font color="#CCCCCC"> main cannot</font>

824
00:36:17,370 --> 00:36:23,250
occur but still the ESS<font color="#E5E5E5"> level will</font><font color="#CCCCCC"> be</font>

825
00:36:20,280 --> 00:36:26,070
returned<font color="#E5E5E5"> to the attacker in the Alcott's</font>

826
00:36:23,250 --> 00:36:29,040
<font color="#E5E5E5">opt function so these are 16 bytes from</font>

827
00:36:26,070 --> 00:36:31,440
<font color="#E5E5E5">the stack uninitialized and they will</font>

828
00:36:29,040 --> 00:36:33,570
have somewhat of a random value but the

829
00:36:31,440 --> 00:36:36,000
attacker can control what value would be

830
00:36:33,570 --> 00:36:38,250
<font color="#E5E5E5">on</font><font color="#CCCCCC"> that uninitialized stacked by</font><font color="#E5E5E5"> doing</font>

831
00:36:36,000 --> 00:36:41,130
prior calls to<font color="#E5E5E5"> other functions before</font>

832
00:36:38,250 --> 00:36:43,830
<font color="#E5E5E5">calling this function</font><font color="#CCCCCC"> so we can analyze</font>

833
00:36:41,130 --> 00:36:46,200
the stack of this device with targeting

834
00:36:43,830 --> 00:36:47,130
and you can make<font color="#E5E5E5"> sure that in that</font>

835
00:36:46,200 --> 00:36:50,580
<font color="#E5E5E5">uninitialized</font>

836
00:36:47,130 --> 00:36:53,730
<font color="#E5E5E5">space the stack memory or other pointers</font>

837
00:36:50,580 --> 00:36:56,940
will be placed so<font color="#CCCCCC"> that way he</font><font color="#E5E5E5"> can leak</font>

838
00:36:53,730 --> 00:36:58,550
there was less depth data and here<font color="#CCCCCC"> you</font>

839
00:36:56,940 --> 00:37:02,520
can see an<font color="#E5E5E5"> example of this being done</font>

840
00:36:58,550 --> 00:37:04,580
<font color="#E5E5E5">specifically on the SmartWatch</font><font color="#CCCCCC"> when we</font>

841
00:37:02,520 --> 00:37:06,930
send the configuration response messages

842
00:37:04,580 --> 00:37:09,210
that will cause the return of

843
00:37:06,930 --> 00:37:11,640
<font color="#CCCCCC">constriction request with the ESS</font>

844
00:37:09,210 --> 00:37:14,460
variable with its uninitialized<font color="#E5E5E5"> stack</font>

845
00:37:11,640 --> 00:37:16,620
<font color="#E5E5E5">travel in those last</font><font color="#CCCCCC"> eight bytes</font><font color="#E5E5E5"> and in</font>

846
00:37:14,460 --> 00:37:18,390
that hex dump is actually a pointer from

847
00:37:16,620 --> 00:37:19,230
<font color="#CCCCCC">the stack it's</font><font color="#E5E5E5"> the point of the code in</font>

848
00:37:18,390 --> 00:37:23,879
the

849
00:37:19,230 --> 00:37:25,320
watch<font color="#CCCCCC"> okay so we're</font><font color="#E5E5E5"> really close to to</font>

850
00:37:23,880 --> 00:37:27,240
an end here we're going<font color="#E5E5E5"> to do the demo</font>

851
00:37:25,320 --> 00:37:28,800
in a second I wanted<font color="#E5E5E5"> to just recap on</font>

852
00:37:27,240 --> 00:37:33,060
our takeaways from from this

853
00:37:28,800 --> 00:37:35,040
presentation<font color="#CCCCCC"> Bluetooth implementations</font>

854
00:37:33,060 --> 00:37:37,410
are really complex<font color="#CCCCCC"> this is like</font><font color="#E5E5E5"> number</font>

855
00:37:35,040 --> 00:37:39,599
one I think<font color="#E5E5E5"> we said that a bunch of</font>

856
00:37:37,410 --> 00:37:42,660
<font color="#E5E5E5">times and it's true there was a lot of</font>

857
00:37:39,599 --> 00:37:44,490
code<font color="#CCCCCC"> and what we found is that</font><font color="#E5E5E5"> it is not</font>

858
00:37:42,660 --> 00:37:47,040
examined enough there<font color="#E5E5E5"> are a lot of</font>

859
00:37:44,490 --> 00:37:50,240
potential vulnerabilities still there

860
00:37:47,040 --> 00:37:53,579
and<font color="#E5E5E5"> this should be we thought and</font><font color="#CCCCCC"> we</font>

861
00:37:50,240 --> 00:37:56,609
audited mitigations<font color="#CCCCCC"> emitted</font><font color="#E5E5E5"> devices</font><font color="#CCCCCC"> not</font>

862
00:37:53,579 --> 00:37:59,010
or not not actually always<font color="#E5E5E5"> implemented</font>

863
00:37:56,609 --> 00:38:02,220
in<font color="#CCCCCC"> IOT</font><font color="#E5E5E5"> this is very extreme case but</font><font color="#CCCCCC"> I</font>

864
00:37:59,010 --> 00:38:05,760
<font color="#E5E5E5">think that's also to other devices</font><font color="#CCCCCC"> so</font>

865
00:38:02,220 --> 00:38:08,480
unlike<font color="#E5E5E5"> PCs and Linux devices some time</font>

866
00:38:05,760 --> 00:38:10,589
do not use all the mitigations<font color="#CCCCCC"> and this</font>

867
00:38:08,480 --> 00:38:12,240
needs to<font color="#E5E5E5"> be</font><font color="#CCCCCC"> fixed there was no reason</font>

868
00:38:10,589 --> 00:38:15,299
<font color="#CCCCCC">for the</font><font color="#E5E5E5"> differed chemical figuration to</font>

869
00:38:12,240 --> 00:38:20,040
be so light on litigations<font color="#E5E5E5"> and</font><font color="#CCCCCC"> lastly</font>

870
00:38:15,300 --> 00:38:23,369
what<font color="#CCCCCC"> we also think that</font><font color="#E5E5E5"> should</font><font color="#CCCCCC"> be taken</font>

871
00:38:20,040 --> 00:38:26,520
from this is that<font color="#E5E5E5"> no device no security</font>

872
00:38:23,369 --> 00:38:29,520
mechanisms today<font color="#E5E5E5"> actually are</font><font color="#CCCCCC"> looking at</font>

873
00:38:26,520 --> 00:38:33,060
<font color="#E5E5E5">bit of communications or other non why</font>

874
00:38:29,520 --> 00:38:34,440
not Wi-Fi wireless protocols so any

875
00:38:33,060 --> 00:38:36,930
attack that<font color="#CCCCCC"> will check in be taking</font>

876
00:38:34,440 --> 00:38:38,280
place on these protocols<font color="#E5E5E5"> will be</font>

877
00:38:36,930 --> 00:38:41,609
<font color="#E5E5E5">completely</font><font color="#CCCCCC"> under the radar for these</font>

878
00:38:38,280 --> 00:38:43,560
mechanisms some so the new solutions

879
00:38:41,609 --> 00:38:45,569
needs to be put in place<font color="#CCCCCC"> to monitor</font><font color="#E5E5E5"> this</font>

880
00:38:43,560 --> 00:38:50,099
<font color="#E5E5E5">one these potentially vulnerable</font>

881
00:38:45,569 --> 00:38:52,440
protocols as<font color="#CCCCCC"> well okay so we also have</font>

882
00:38:50,099 --> 00:38:54,900
going to upload just<font color="#E5E5E5"> now after</font><font color="#CCCCCC"> the talk</font>

883
00:38:52,440 --> 00:38:57,329
<font color="#E5E5E5">the exploit codes for both the echo and</font>

884
00:38:54,900 --> 00:38:59,940
<font color="#CCCCCC">the gear and the white paper</font><font color="#E5E5E5"> on the</font>

885
00:38:57,329 --> 00:39:02,099
exploits and there was also the<font color="#CCCCCC"> previous</font>

886
00:38:59,940 --> 00:39:04,020
<font color="#CCCCCC">technical parquetry we</font><font color="#E5E5E5"> already published</font>

887
00:39:02,099 --> 00:39:07,470
<font color="#CCCCCC">that covers all the vulnerabilities in</font>

888
00:39:04,020 --> 00:39:09,329
<font color="#E5E5E5">good one okay</font><font color="#CCCCCC"> so we're going</font><font color="#E5E5E5"> to attempt</font>

889
00:39:07,470 --> 00:39:11,220
today<font color="#CCCCCC"> ten were just now I hope that's</font>

890
00:39:09,329 --> 00:39:14,730
that<font color="#E5E5E5"> works</font>

891
00:39:11,220 --> 00:39:16,649
<font color="#CCCCCC">basically we'll want to start with one</font>

892
00:39:14,730 --> 00:39:18,839
of<font color="#E5E5E5"> the echos not sure which</font><font color="#CCCCCC"> what you're</font>

893
00:39:16,650 --> 00:39:20,099
going to see in a<font color="#CCCCCC"> minute so we're going</font>

894
00:39:18,839 --> 00:39:23,910
<font color="#E5E5E5">to</font><font color="#CCCCCC"> establish a</font><font color="#E5E5E5"> Bluetooth connection</font><font color="#CCCCCC"> to</font>

895
00:39:20,099 --> 00:39:26,490
it and then once we want our shellcode

896
00:39:23,910 --> 00:39:29,339
and<font color="#E5E5E5"> we do we do a connect back shell</font>

897
00:39:26,490 --> 00:39:30,540
<font color="#E5E5E5">just over the Wi-Fi here so once the</font>

898
00:39:29,339 --> 00:39:32,509
attack<font color="#E5E5E5"> has is finished</font>

899
00:39:30,540 --> 00:39:34,040
<font color="#CCCCCC">bluetooth</font><font color="#E5E5E5"> is Nolan Nolan</font>

900
00:39:32,510 --> 00:39:39,980
you need and<font color="#CCCCCC"> just over the internet</font><font color="#E5E5E5"> this</font>

901
00:39:34,040 --> 00:39:41,330
device can be controlled<font color="#E5E5E5"> remotely so I</font>

902
00:39:39,980 --> 00:39:44,060
hope you can see there<font color="#E5E5E5"> so on the</font><font color="#CCCCCC"> left</font>

903
00:39:41,330 --> 00:39:45,860
<font color="#E5E5E5">it's going to run the exploit script</font><font color="#CCCCCC"> I'm</font>

904
00:39:44,060 --> 00:39:47,920
holding my fingers<font color="#E5E5E5"> you should do that</font>

905
00:39:45,860 --> 00:39:47,920
<font color="#E5E5E5">too</font>

906
00:39:48,040 --> 00:39:57,170
so it<font color="#E5E5E5"> sends a bunch of these commands</font>

907
00:39:51,830 --> 00:40:00,190
<font color="#CCCCCC">and now we have we have a shell so you</font>

908
00:39:57,170 --> 00:40:02,900
upload some scripts to run on the echo

909
00:40:00,190 --> 00:40:08,900
<font color="#CCCCCC">and we can see</font><font color="#E5E5E5"> that we</font><font color="#CCCCCC"> are running</font><font color="#E5E5E5"> in</font>

910
00:40:02,900 --> 00:40:13,270
which this is<font color="#E5E5E5"> the configuration of the</font>

911
00:40:08,900 --> 00:40:16,450
<font color="#E5E5E5">Bluetooth on the specific with an echo</font>

912
00:40:13,270 --> 00:40:21,220
we can do a bunch<font color="#E5E5E5"> of things with</font><font color="#CCCCCC"> it</font>

913
00:40:16,450 --> 00:40:25,669
of course it's it's a<font color="#E5E5E5"> Linux device and</font>

914
00:40:21,220 --> 00:40:35,990
we can<font color="#E5E5E5"> control its led those now it's</font>

915
00:40:25,670 --> 00:40:37,430
green anyone<font color="#E5E5E5"> can see that yeah</font><font color="#CCCCCC"> it's a</font>

916
00:40:35,990 --> 00:40:39,979
<font color="#CCCCCC">nigga's the assistant</font>

917
00:40:37,430 --> 00:40:51,589
so we can make it say things<font color="#CCCCCC"> also it's</font>

918
00:40:39,980 --> 00:40:54,230
just<font color="#CCCCCC"> for</font><font color="#E5E5E5"> fun so</font><font color="#CCCCCC"> I can say</font><font color="#E5E5E5"> Alexa Alexa my</font>

919
00:40:51,590 --> 00:40:56,320
name is Alexa<font color="#CCCCCC"> I have been</font><font color="#E5E5E5"> own take me to</font>

920
00:40:54,230 --> 00:40:58,610
your leader

921
00:40:56,320 --> 00:41:00,790
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> I will try</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> take you to your</font>

922
00:40:58,610 --> 00:41:00,790
leader

923
00:41:00,980 --> 00:41:06,230
<font color="#E5E5E5">and now we can also take</font><font color="#CCCCCC"> this attack a</font>

924
00:41:03,500 --> 00:41:09,440
step further<font color="#CCCCCC"> so what if we want to</font>

925
00:41:06,230 --> 00:41:12,850
create some<font color="#CCCCCC"> of a</font><font color="#E5E5E5"> botnet of</font><font color="#CCCCCC"> a Bluetooth</font>

926
00:41:09,440 --> 00:41:15,740
<font color="#CCCCCC">controller did or</font><font color="#E5E5E5"> do</font><font color="#CCCCCC"> born and controlled</font>

927
00:41:12,850 --> 00:41:18,589
<font color="#CCCCCC">devices we can take</font><font color="#E5E5E5"> over the Bluetooth</font>

928
00:41:15,740 --> 00:41:21,350
<font color="#CCCCCC">Connect device</font><font color="#E5E5E5"> controller of this Amazon</font>

929
00:41:18,590 --> 00:41:24,260
<font color="#E5E5E5">echo and use it to attack another Amazon</font>

930
00:41:21,350 --> 00:41:26,120
echo<font color="#E5E5E5"> the next one over there</font><font color="#CCCCCC"> and then</font>

931
00:41:24,260 --> 00:41:27,980
connect them<font color="#E5E5E5"> all to our botnet of</font>

932
00:41:26,120 --> 00:41:31,130
control devices<font color="#CCCCCC"> so the first one</font><font color="#E5E5E5"> will</font>

933
00:41:27,980 --> 00:41:32,750
connect back and then the next one<font color="#E5E5E5"> will</font>

934
00:41:31,130 --> 00:41:35,960
connect back if<font color="#CCCCCC"> we are the Internet</font><font color="#E5E5E5"> and</font>

935
00:41:32,750 --> 00:41:38,000
so forth and each advice can then attack

936
00:41:35,960 --> 00:41:40,340
<font color="#E5E5E5">another one so this we just waited this</font>

937
00:41:38,000 --> 00:41:43,070
for our fun<font color="#CCCCCC"> but</font>

938
00:41:40,340 --> 00:41:47,540
the health an area for<font color="#E5E5E5"> this kind of</font>

939
00:41:43,070 --> 00:41:49,070
attack<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is really just something put</font>

940
00:41:47,540 --> 00:41:51,230
<font color="#E5E5E5">in you and I'm not sure it's going to</font>

941
00:41:49,070 --> 00:41:52,700
<font color="#E5E5E5">work but we're going to attempt it so on</font>

942
00:41:51,230 --> 00:41:55,220
the<font color="#CCCCCC"> right we can see they connect back</font>

943
00:41:52,700 --> 00:42:02,480
shell<font color="#E5E5E5"> for the second device if it will</font>

944
00:41:55,220 --> 00:42:04,009
actually<font color="#E5E5E5"> connect okay so it has so now</font>

945
00:42:02,480 --> 00:42:08,590
we have control<font color="#E5E5E5"> of the second echo on</font>

946
00:42:04,010 --> 00:42:11,450
the right on the<font color="#CCCCCC"> left to the</font><font color="#E5E5E5"> first echo</font>

947
00:42:08,590 --> 00:42:13,940
so we have<font color="#E5E5E5"> upload or scripts to it as</font>

948
00:42:11,450 --> 00:42:15,319
well and<font color="#E5E5E5"> we</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> see this is a different</font>

949
00:42:13,940 --> 00:42:21,200
device it has<font color="#E5E5E5"> like the different MAC</font>

950
00:42:15,320 --> 00:42:29,450
address<font color="#E5E5E5"> we can</font><font color="#CCCCCC"> also make</font><font color="#E5E5E5"> it with</font>

951
00:42:21,200 --> 00:42:34,149
Christmas lights<font color="#CCCCCC"> here</font><font color="#E5E5E5"> those and they all</font>

952
00:42:29,450 --> 00:42:34,149
<font color="#E5E5E5">all together sing our Christmas Carol</font>

953
00:42:45,540 --> 00:42:50,610
[Applause]

954
00:42:46,810 --> 00:42:55,240
[Music]

955
00:42:50,610 --> 00:42:57,640
and just to wrap<font color="#E5E5E5"> it up we can also</font>

956
00:42:55,240 --> 00:42:59,080
attack the<font color="#E5E5E5"> gear a</font><font color="#CCCCCC"> samsung</font><font color="#E5E5E5"> gear it's</font>

957
00:42:57,640 --> 00:43:02,950
pretty small<font color="#CCCCCC"> and I don't think we will</font>

958
00:42:59,080 --> 00:43:06,910
actually see<font color="#E5E5E5"> it</font><font color="#CCCCCC"> from the back</font><font color="#E5E5E5"> but it's</font>

959
00:43:02,950 --> 00:43:09,339
<font color="#E5E5E5">already here so the second actually</font><font color="#CCCCCC"> is</font>

960
00:43:06,910 --> 00:43:14,170
<font color="#CCCCCC">supposed to be here because of the</font>

961
00:43:09,340 --> 00:43:17,560
second<font color="#E5E5E5"> echo will then attack the gear as</font>

962
00:43:14,170 --> 00:43:20,050
well and like I said<font color="#E5E5E5"> each one</font><font color="#CCCCCC"> of them</font>

963
00:43:17,560 --> 00:43:24,240
once we<font color="#CCCCCC"> won the exploit connects back</font>

964
00:43:20,050 --> 00:43:27,940
via Wi-Fi<font color="#E5E5E5"> to to ground laptop over here</font>

965
00:43:24,240 --> 00:43:30,700
so they don't<font color="#E5E5E5"> have really to be over</font>

966
00:43:27,940 --> 00:43:33,340
<font color="#E5E5E5">here once they are controlled so anybody</font>

967
00:43:30,700 --> 00:43:35,109
can just attack one device and<font color="#CCCCCC"> that</font>

968
00:43:33,340 --> 00:43:36,820
device<font color="#E5E5E5"> can go around attacking other</font>

969
00:43:35,110 --> 00:43:41,560
device and<font color="#CCCCCC"> all of them connect back to</font>

970
00:43:36,820 --> 00:43:45,970
<font color="#CCCCCC">the to</font><font color="#E5E5E5"> the button so on the right is the</font>

971
00:43:41,560 --> 00:43:50,500
<font color="#E5E5E5">not use another</font><font color="#CCCCCC"> shell</font><font color="#E5E5E5"> okay so okay two</font>

972
00:43:45,970 --> 00:44:03,060
out of three but I can try gonna watch a

973
00:43:50,500 --> 00:44:03,060
tour started actually that's a poly bug

974
00:44:25,480 --> 00:44:30,930
if you can see what<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Gregg is trying</font>

975
00:44:28,060 --> 00:44:35,259
to show is<font color="#E5E5E5"> that this device has the</font>

976
00:44:30,930 --> 00:44:37,779
<font color="#CCCCCC">Wi-Fi the Wi-Fi MAC address that are</font>

977
00:44:35,260 --> 00:44:40,540
<font color="#E5E5E5">adjacent so to find the MAC</font><font color="#CCCCCC"> address is</font>

978
00:44:37,780 --> 00:44:43,030
<font color="#E5E5E5">pretty simple</font><font color="#CCCCCC"> just by</font><font color="#E5E5E5"> pinging the IP</font><font color="#CCCCCC"> of</font>

979
00:44:40,540 --> 00:44:45,700
<font color="#E5E5E5">the device we can have the</font><font color="#CCCCCC"> hour</font><font color="#E5E5E5"> per its</font>

980
00:44:43,030 --> 00:44:46,660
MAC address in the ARP cache so<font color="#CCCCCC"> that to</font>

981
00:44:45,700 --> 00:44:49,419
the 2492

982
00:44:46,660 --> 00:44:51,759
<font color="#CCCCCC">0e</font><font color="#E5E5E5"> not that one</font><font color="#CCCCCC"> that's the MAC address</font>

983
00:44:49,420 --> 00:44:54,579
<font color="#E5E5E5">of the Wi-Fi and the</font><font color="#CCCCCC"> Bluetooth they</font>

984
00:44:51,760 --> 00:44:55,030
actually<font color="#E5E5E5"> just one adjacent to it let's</font>

985
00:44:54,579 --> 00:44:58,380
try again

986
00:44:55,030 --> 00:44:58,380
<font color="#CCCCCC">check</font><font color="#E5E5E5"> it I hope that works</font>

987
00:45:11,010 --> 00:45:14,480
number<font color="#CCCCCC"> course</font>

988
00:45:20,760 --> 00:45:29,340
oh yes<font color="#E5E5E5"> okay so we would not have any</font>

989
00:45:25,470 --> 00:45:30,689
<font color="#E5E5E5">leads here or any audio so you need to</font>

990
00:45:29,340 --> 00:45:33,000
trust<font color="#E5E5E5"> me this is actually</font><font color="#CCCCCC"> being pawned</font>

991
00:45:30,690 --> 00:45:37,460
right now<font color="#E5E5E5"> but we can reboot it just to</font>

992
00:45:33,000 --> 00:45:37,460
show it<font color="#CCCCCC"> controlled without my hands</font>

993
00:45:39,920 --> 00:46:08,930
okay okay I think we<font color="#E5E5E5"> have time for Q&A</font>

994
00:45:51,890 --> 00:46:11,670
<font color="#CCCCCC">if anyone wants to</font><font color="#E5E5E5"> ask</font><font color="#CCCCCC"> anything okay</font>

995
00:46:08,930 --> 00:46:14,129
hello thank<font color="#E5E5E5"> you for a really good talk</font><font color="#CCCCCC"> I</font>

996
00:46:11,670 --> 00:46:16,080
<font color="#E5E5E5">just wanted to ask if there</font><font color="#CCCCCC"> is any CVE</font>

997
00:46:14,130 --> 00:46:19,110
assigned already for those who<font color="#E5E5E5"> Nura</font>

998
00:46:16,080 --> 00:46:21,029
bilities<font color="#CCCCCC"> and if it's being fixed if it's</font>

999
00:46:19,110 --> 00:46:24,210
already<font color="#CCCCCC"> fixed in the most recent kernel</font>

1000
00:46:21,030 --> 00:46:27,990
version<font color="#E5E5E5"> so</font><font color="#CCCCCC"> um the RC vulnerability is</font>

1001
00:46:24,210 --> 00:46:30,060
already fixed<font color="#E5E5E5"> in September this new</font>

1002
00:46:27,990 --> 00:46:33,899
vulnerability of<font color="#E5E5E5"> the information leak is</font>

1003
00:46:30,060 --> 00:46:35,790
actually just being fixed<font color="#CCCCCC"> today like</font><font color="#E5E5E5"> sir</font>

1004
00:46:33,900 --> 00:46:36,930
in the city there<font color="#E5E5E5"> was a CV it's about</font>

1005
00:46:35,790 --> 00:46:38,670
also<font color="#E5E5E5"> going to be published on our</font>

1006
00:46:36,930 --> 00:46:41,450
<font color="#CCCCCC">website so it's really new the</font>

1007
00:46:38,670 --> 00:46:41,450
<font color="#CCCCCC">information like</font><font color="#E5E5E5"> one</font>

1008
00:46:47,089 --> 00:46:55,849
<font color="#E5E5E5">a great presentation</font><font color="#CCCCCC"> I have a question</font>

1009
00:46:51,859 --> 00:46:58,130
about<font color="#E5E5E5"> Android devices where the stack is</font>

1010
00:46:55,849 --> 00:46:59,559
pushed a<font color="#E5E5E5"> lot into user space and what</font>

1011
00:46:58,130 --> 00:47:03,890
your guys's thoughts are on that

1012
00:46:59,559 --> 00:47:05,719
<font color="#E5E5E5">research so we we did of course the</font>

1013
00:47:03,890 --> 00:47:08,960
expectation<font color="#CCCCCC"> in Android as well</font><font color="#E5E5E5"> for the</font>

1014
00:47:05,719 --> 00:47:12,589
blue<font color="#CCCCCC"> born abilities and it does have</font><font color="#E5E5E5"> a</font>

1015
00:47:08,960 --> 00:47:15,079
<font color="#E5E5E5">better it doesn't</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> boot in Android</font>

1016
00:47:12,589 --> 00:47:18,109
devices<font color="#CCCCCC"> but it also has</font><font color="#E5E5E5"> a lot of</font><font color="#CCCCCC"> a lot</font>

1017
00:47:15,079 --> 00:47:19,849
of<font color="#CCCCCC"> privileges able</font><font color="#E5E5E5"> to stack in any</font>

1018
00:47:18,109 --> 00:47:21,950
advice<font color="#E5E5E5"> but on Android as well</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> has a</font>

1019
00:47:19,849 --> 00:47:24,710
lot of features it needs to implement<font color="#E5E5E5"> so</font>

1020
00:47:21,950 --> 00:47:25,910
you have file sharing and you have the

1021
00:47:24,710 --> 00:47:29,450
<font color="#E5E5E5">abilities connected mouse or a keyboard</font>

1022
00:47:25,910 --> 00:47:32,808
via bluetooth<font color="#E5E5E5"> so all of these features</font>

1023
00:47:29,450 --> 00:47:34,968
have privileges inside a<font color="#E5E5E5"> stack</font><font color="#CCCCCC"> so for</font><font color="#E5E5E5"> an</font>

1024
00:47:32,809 --> 00:47:37,039
example<font color="#CCCCCC"> we just</font><font color="#E5E5E5"> showed and</font><font color="#CCCCCC"> Andre</font><font color="#E5E5E5"> the</font>

1025
00:47:34,969 --> 00:47:38,950
ability<font color="#CCCCCC"> to connect</font><font color="#E5E5E5"> a mouse or a keyboard</font>

1026
00:47:37,039 --> 00:47:41,599
and<font color="#E5E5E5"> then you can actually control the UI</font>

1027
00:47:38,950 --> 00:47:43,189
<font color="#CCCCCC">that's one</font><font color="#E5E5E5"> having you to go but there</font>

1028
00:47:41,599 --> 00:47:45,499
are also the file<font color="#E5E5E5"> you have a lot of</font>

1029
00:47:43,190 --> 00:47:49,400
<font color="#E5E5E5">access</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the file system so you do need</font>

1030
00:47:45,499 --> 00:47:52,038
another<font color="#E5E5E5"> step to get huge in Android but</font>

1031
00:47:49,400 --> 00:47:53,930
the attack surface is very very<font color="#CCCCCC"> wide</font>

1032
00:47:52,039 --> 00:47:57,710
since<font color="#E5E5E5"> you have all the privileges</font><font color="#CCCCCC"> there</font>

1033
00:47:53,930 --> 00:47:59,839
as well<font color="#E5E5E5"> so</font><font color="#CCCCCC"> doing basic</font><font color="#E5E5E5"> no no just</font>

1034
00:47:57,710 --> 00:48:01,700
getting<font color="#E5E5E5"> the images of the phone or</font>

1035
00:47:59,839 --> 00:48:04,099
<font color="#E5E5E5">something that's like from the start</font>

1036
00:48:01,700 --> 00:48:06,319
that's<font color="#E5E5E5"> if</font><font color="#CCCCCC"> isn't</font><font color="#E5E5E5"> that you have but to</font>

1037
00:48:04,099 --> 00:48:09,349
<font color="#CCCCCC">reach that</font><font color="#E5E5E5"> actually you need</font><font color="#CCCCCC"> to do not</font>

1038
00:48:06,319 --> 00:48:11,150
<font color="#CCCCCC">have step again</font><font color="#E5E5E5"> and just</font><font color="#CCCCCC"> to clarify</font><font color="#E5E5E5"> it's</font>

1039
00:48:09,349 --> 00:48:14,029
a different roller ability on Android

1040
00:48:11,150 --> 00:48:16,539
it's not in the<font color="#CCCCCC"> Altec a player it's in a</font>

1041
00:48:14,029 --> 00:48:19,940
<font color="#E5E5E5">different point</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> the protocol stack</font>

1042
00:48:16,539 --> 00:48:22,400
however it's still a<font color="#CCCCCC"> privilege</font><font color="#E5E5E5"> process</font>

1043
00:48:19,940 --> 00:48:31,849
not<font color="#E5E5E5"> route but still privileged enough to</font>

1044
00:48:22,400 --> 00:48:34,309
to do lots of damage<font color="#CCCCCC"> yeah anyone else so</font>

1045
00:48:31,849 --> 00:48:36,200
thanks<font color="#E5E5E5"> for</font><font color="#CCCCCC"> a great talk</font><font color="#E5E5E5"> for yourself</font><font color="#CCCCCC"> I'd</font>

1046
00:48:34,309 --> 00:48:37,819
like to talk<font color="#E5E5E5"> some</font><font color="#CCCCCC"> more after the talk</font>

1047
00:48:36,200 --> 00:48:41,089
<font color="#E5E5E5">because I've got a lot of more</font><font color="#CCCCCC"> questions</font>

1048
00:48:37,819 --> 00:48:43,549
that I can answer right<font color="#CCCCCC"> now I do a lot</font>

1049
00:48:41,089 --> 00:48:46,430
of industrial<font color="#E5E5E5"> control systems</font><font color="#CCCCCC"> I'm what</font>

1050
00:48:43,549 --> 00:48:48,589
the author behind<font color="#CCCCCC"> our scenario the</font>

1051
00:48:46,430 --> 00:48:52,549
attack on the<font color="#E5E5E5"> power grid via solar</font>

1052
00:48:48,589 --> 00:48:54,799
panels and those things work<font color="#E5E5E5"> here over</font>

1053
00:48:52,549 --> 00:48:57,469
<font color="#E5E5E5">Ethernet or over Bluetooth do you have</font>

1054
00:48:54,799 --> 00:48:58,900
any idea whether this will<font color="#CCCCCC"> work on those</font>

1055
00:48:57,469 --> 00:49:01,690
devices

1056
00:48:58,900 --> 00:49:04,090
well if if they are based on Linux<font color="#CCCCCC"> if</font>

1057
00:49:01,690 --> 00:49:06,850
they are<font color="#E5E5E5"> running Linux and using the</font>

1058
00:49:04,090 --> 00:49:09,490
native little stack<font color="#E5E5E5"> blues yes this will</font>

1059
00:49:06,850 --> 00:49:11,380
affect them<font color="#E5E5E5"> as I said in that start -</font>

1060
00:49:09,490 --> 00:49:13,990
there are<font color="#E5E5E5"> 8-1 believes that we found in</font>

1061
00:49:11,380 --> 00:49:16,750
the affected Android Windows iOS and had

1062
00:49:13,990 --> 00:49:20,470
annexed<font color="#CCCCCC"> X so but there are other stacks</font>

1063
00:49:16,750 --> 00:49:22,540
<font color="#E5E5E5">other than these not not such a</font>

1064
00:49:20,470 --> 00:49:25,299
widespread but industrial devices<font color="#E5E5E5"> might</font>

1065
00:49:22,540 --> 00:49:27,880
have<font color="#CCCCCC"> four try this text</font><font color="#E5E5E5"> I'm not sure but</font>

1066
00:49:25,300 --> 00:49:31,750
if they are based on one<font color="#CCCCCC"> of</font><font color="#E5E5E5"> these</font>

1067
00:49:27,880 --> 00:49:34,090
systems<font color="#E5E5E5"> they they will be affected</font><font color="#CCCCCC"> other</font>

1068
00:49:31,750 --> 00:49:36,850
<font color="#E5E5E5">than that like I said the overall</font>

1069
00:49:34,090 --> 00:49:39,540
<font color="#CCCCCC">feeling is</font><font color="#E5E5E5"> that all implementations can</font>

1070
00:49:36,850 --> 00:49:41,710
<font color="#E5E5E5">be affected by similar vulnerabilities</font>

1071
00:49:39,540 --> 00:49:46,180
<font color="#CCCCCC">because the stacks</font><font color="#E5E5E5"> has not been audited</font>

1072
00:49:41,710 --> 00:49:48,520
<font color="#CCCCCC">and quite quite a long time and what</font>

1073
00:49:46,180 --> 00:49:49,960
does affect every device that<font color="#CCCCCC"> gives us a</font>

1074
00:49:48,520 --> 00:49:51,910
lot of<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the complexity of the</font>

1075
00:49:49,960 --> 00:49:55,300
<font color="#E5E5E5">Bluetooth</font><font color="#CCCCCC"> Park</font><font color="#E5E5E5"> oh yeah so every stack</font>

1076
00:49:51,910 --> 00:49:58,359
can<font color="#E5E5E5"> be a valuable yeah because it's</font>

1077
00:49:55,300 --> 00:49:59,440
<font color="#E5E5E5">pretty complicated</font><font color="#CCCCCC"> however you should</font>

1078
00:49:58,360 --> 00:50:01,780
also know<font color="#CCCCCC"> that there is a difference</font>

1079
00:49:59,440 --> 00:50:03,940
between a full Bluetooth stack and a

1080
00:50:01,780 --> 00:50:06,070
stack that that only does Bluetooth

1081
00:50:03,940 --> 00:50:07,810
<font color="#CCCCCC">low-energy</font><font color="#E5E5E5"> it's a pretty different</font>

1082
00:50:06,070 --> 00:50:10,750
<font color="#E5E5E5">protocol from the ground up</font>

1083
00:50:07,810 --> 00:50:12,670
<font color="#E5E5E5">and it has less features and thus is</font>

1084
00:50:10,750 --> 00:50:16,980
more secure so if your device has only

1085
00:50:12,670 --> 00:50:16,980
Bluetooth<font color="#E5E5E5"> Low Energy</font><font color="#CCCCCC"> it's probably okay</font>

1086
00:50:22,110 --> 00:50:25,110
anyone

1087
00:50:35,540 --> 00:50:40,370
<font color="#E5E5E5">okay so you guys</font><font color="#CCCCCC"> have got a</font><font color="#E5E5E5"> limited</font>

1088
00:50:37,970 --> 00:50:42,140
window<font color="#E5E5E5"> to explore the undocumented</font>

1089
00:50:40,370 --> 00:50:43,609
communication between the echo and<font color="#CCCCCC"> the</font>

1090
00:50:42,140 --> 00:50:45,830
<font color="#CCCCCC">mothership which a</font><font color="#E5E5E5"> lot of people</font><font color="#CCCCCC"> would</font>

1091
00:50:43,610 --> 00:50:48,950
like<font color="#CCCCCC"> to understand</font><font color="#E5E5E5"> because it's locked</font>

1092
00:50:45,830 --> 00:50:50,840
<font color="#E5E5E5">down to an Amazon certificate</font><font color="#CCCCCC"> people</font>

1093
00:50:48,950 --> 00:50:52,970
can't just kind<font color="#E5E5E5"> of put a wire shark</font>

1094
00:50:50,840 --> 00:50:54,440
<font color="#E5E5E5">intercept or anything in there</font><font color="#CCCCCC"> but with</font>

1095
00:50:52,970 --> 00:50:55,970
your exploit you could actually do that

1096
00:50:54,440 --> 00:50:57,730
<font color="#E5E5E5">have you got any plans to kind of look</font>

1097
00:50:55,970 --> 00:51:00,049
<font color="#E5E5E5">at that area</font>

1098
00:50:57,730 --> 00:51:02,000
can<font color="#E5E5E5"> you come</font><font color="#CCCCCC"> anyone the</font><font color="#E5E5E5"> best part</font><font color="#CCCCCC"> of the</font>

1099
00:51:00,050 --> 00:51:03,350
<font color="#CCCCCC">kristin well because the all the</font>

1100
00:51:02,000 --> 00:51:06,170
communication<font color="#E5E5E5"> that the echo makes back</font>

1101
00:51:03,350 --> 00:51:08,000
to Amazon<font color="#CCCCCC"> is over</font><font color="#E5E5E5"> SSL and it uses a cert</font>

1102
00:51:06,170 --> 00:51:10,490
that's signed by<font color="#E5E5E5"> Amazon so</font><font color="#CCCCCC"> you can't</font>

1103
00:51:08,000 --> 00:51:12,620
just basically<font color="#E5E5E5"> kind of intercept that</font><font color="#CCCCCC"> a</font>

1104
00:51:10,490 --> 00:51:14,120
<font color="#E5E5E5">terrific but you guys could now that</font>

1105
00:51:12,620 --> 00:51:16,580
you've got root on that device you<font color="#CCCCCC"> could</font>

1106
00:51:14,120 --> 00:51:18,920
use that<font color="#E5E5E5"> to figure it out a lot of</font>

1107
00:51:16,580 --> 00:51:23,420
people would like<font color="#CCCCCC"> to know</font><font color="#E5E5E5"> how that how</font>

1108
00:51:18,920 --> 00:51:25,700
<font color="#CCCCCC">that works</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> exploit so you</font><font color="#E5E5E5"> working to</font>

1109
00:51:23,420 --> 00:51:27,950
take it out<font color="#E5E5E5"> and do with it but you</font>

1110
00:51:25,700 --> 00:51:30,319
should know that<font color="#CCCCCC"> Amazon echo it receives</font>

1111
00:51:27,950 --> 00:51:33,500
automatic updates and it's<font color="#CCCCCC"> Albany Rob</font>

1112
00:51:30,320 --> 00:51:36,590
<font color="#CCCCCC">being updated I think that probably you</font>

1113
00:51:33,500 --> 00:51:38,510
can and<font color="#E5E5E5"> just buy a new echo that hasn't</font>

1114
00:51:36,590 --> 00:51:40,250
<font color="#E5E5E5">been updated</font><font color="#CCCCCC"> yet</font><font color="#E5E5E5"> and then you can use</font>

1115
00:51:38,510 --> 00:51:44,690
this to get<font color="#E5E5E5"> route in</font><font color="#CCCCCC"> order</font><font color="#E5E5E5"> to research</font>

1116
00:51:40,250 --> 00:51:47,150
it further yeah well<font color="#CCCCCC"> this vol</font><font color="#E5E5E5"> 4 which</font><font color="#CCCCCC"> I</font>

1117
00:51:44,690 --> 00:51:50,120
<font color="#E5E5E5">work at the expert that is gonna be on</font>

1118
00:51:47,150 --> 00:51:51,440
<font color="#E5E5E5">our github will work on the previous</font>

1119
00:51:50,120 --> 00:51:53,480
version of<font color="#E5E5E5"> the echo</font><font color="#CCCCCC"> the previous</font>

1120
00:51:51,440 --> 00:51:57,170
software<font color="#E5E5E5"> version so if you can somehow</font>

1121
00:51:53,480 --> 00:51:59,380
revert<font color="#CCCCCC"> that or you'll get fruit on</font><font color="#E5E5E5"> the</font>

1122
00:51:57,170 --> 00:51:59,380
<font color="#E5E5E5">Iraq</font>

1123
00:52:03,329 --> 00:52:07,960
so can I ask a your solution<font color="#CCCCCC"> for</font>

1124
00:52:06,099 --> 00:52:10,569
preventing<font color="#CCCCCC"> for the for the problems</font><font color="#E5E5E5"> like</font>

1125
00:52:07,960 --> 00:52:13,180
this from British<font color="#CCCCCC"> imitation I mean for</font>

1126
00:52:10,569 --> 00:52:16,210
example<font color="#CCCCCC"> we can make a better implication</font>

1127
00:52:13,180 --> 00:52:18,669
for British<font color="#CCCCCC"> tax or like on the</font>

1128
00:52:16,210 --> 00:52:21,160
presentation adding a some kind<font color="#E5E5E5"> of a</font>

1129
00:52:18,670 --> 00:52:21,730
special secure<font color="#E5E5E5"> mechanism</font><font color="#CCCCCC"> on Terry Mike</font>

1130
00:52:21,160 --> 00:52:24,310
Rinder

1131
00:52:21,730 --> 00:52:28,480
<font color="#CCCCCC">British tax right on British stack on</font>

1132
00:52:24,310 --> 00:52:31,060
like a<font color="#CCCCCC"> as like a specific SELinux for</font>

1133
00:52:28,480 --> 00:52:33,630
<font color="#CCCCCC">purchase this name but for example so</font>

1134
00:52:31,060 --> 00:52:33,630
what is<font color="#E5E5E5"> your solution</font>

1135
00:52:33,660 --> 00:52:41,799
basically there are two<font color="#E5E5E5"> things first of</font>

1136
00:52:37,300 --> 00:52:46,030
<font color="#E5E5E5">which is</font><font color="#CCCCCC"> um</font><font color="#E5E5E5"> just deals barely unless you</font>

1137
00:52:41,800 --> 00:52:48,400
need<font color="#E5E5E5"> the full second it's the concept of</font>

1138
00:52:46,030 --> 00:52:50,319
<font color="#E5E5E5">lowest privilege</font><font color="#CCCCCC"> okay say</font><font color="#E5E5E5"> it showed</font>

1139
00:52:48,400 --> 00:52:52,569
really<font color="#E5E5E5"> well on Android and here on Linux</font>

1140
00:52:50,319 --> 00:52:54,040
as well<font color="#E5E5E5"> but on Android there is a single</font>

1141
00:52:52,569 --> 00:52:56,500
demon that has all the privileges of

1142
00:52:54,040 --> 00:52:59,319
everything<font color="#CCCCCC"> Lotus death</font><font color="#E5E5E5"> so the same demon</font>

1143
00:52:56,500 --> 00:53:01,869
can be an<font color="#CCCCCC"> HID keyboard it can look at</font>

1144
00:52:59,319 --> 00:53:04,960
your<font color="#E5E5E5"> pictures</font><font color="#CCCCCC"> it can do like attach</font>

1145
00:53:01,869 --> 00:53:06,579
network interfaces<font color="#E5E5E5"> crazy stuff right but</font>

1146
00:53:04,960 --> 00:53:08,500
<font color="#E5E5E5">there is no reason that a vulnerability</font>

1147
00:53:06,579 --> 00:53:11,050
only one of these<font color="#CCCCCC"> things will</font><font color="#E5E5E5"> allow you</font>

1148
00:53:08,500 --> 00:53:12,730
<font color="#E5E5E5">to control all of these privileges so it</font>

1149
00:53:11,050 --> 00:53:14,280
shouldn't<font color="#CCCCCC"> be one demon it shouldn't be</font>

1150
00:53:12,730 --> 00:53:17,680
in the<font color="#E5E5E5"> kernel it should be many</font>

1151
00:53:14,280 --> 00:53:20,650
<font color="#E5E5E5">separated low privileged processes and</font>

1152
00:53:17,680 --> 00:53:24,390
the<font color="#E5E5E5"> only</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> particular thing I would</font>

1153
00:53:20,650 --> 00:53:27,510
add<font color="#CCCCCC"> to that is that we are very</font>

1154
00:53:24,390 --> 00:53:29,710
accustomed to<font color="#CCCCCC"> concept of firewalls in</font>

1155
00:53:27,510 --> 00:53:32,250
TCP connections in the IP connections

1156
00:53:29,710 --> 00:53:34,930
<font color="#E5E5E5">but there are no such firewalls in</font>

1157
00:53:32,250 --> 00:53:36,790
Bluetooth<font color="#E5E5E5"> connections so the services</font>

1158
00:53:34,930 --> 00:53:39,910
are<font color="#E5E5E5"> always listening and there is no way</font>

1159
00:53:36,790 --> 00:53:42,660
<font color="#CCCCCC">to stop</font><font color="#E5E5E5"> them from listening or to limit</font>

1160
00:53:39,910 --> 00:53:44,470
their connections and<font color="#E5E5E5"> also I think</font>

1161
00:53:42,660 --> 00:53:47,589
solutions that are looking<font color="#E5E5E5"> at the</font>

1162
00:53:44,470 --> 00:53:51,430
<font color="#E5E5E5">protocols on the side</font><font color="#CCCCCC"> just analyzing</font><font color="#E5E5E5"> the</font>

1163
00:53:47,589 --> 00:53:54,250
data<font color="#E5E5E5"> can also find very variable and</font><font color="#CCCCCC"> can</font>

1164
00:53:51,430 --> 00:53:56,470
also potentially<font color="#E5E5E5"> block and threats there</font>

1165
00:53:54,250 --> 00:54:02,319
from<font color="#E5E5E5"> from not not inside</font><font color="#CCCCCC"> your device but</font>

1166
00:53:56,470 --> 00:54:05,140
<font color="#CCCCCC">outside of the devices as well questions</font>

1167
00:54:02,319 --> 00:54:07,210
<font color="#CCCCCC">please</font><font color="#E5E5E5"> would you say</font><font color="#CCCCCC"> that your the way</font>

1168
00:54:05,140 --> 00:54:10,859
you build<font color="#E5E5E5"> your exploit with the fact all</font>

1169
00:54:07,210 --> 00:54:10,859
<font color="#CCCCCC">you</font><font color="#E5E5E5"> CPU architectures equally</font>

1170
00:54:12,910 --> 00:54:20,049
<font color="#E5E5E5">I think each</font><font color="#CCCCCC"> exploit usually needs to be</font>

1171
00:54:16,590 --> 00:54:23,110
<font color="#E5E5E5">adjusted adapted a</font><font color="#CCCCCC"> little bit</font><font color="#E5E5E5"> it won't</font>

1172
00:54:20,050 --> 00:54:25,570
be automatically<font color="#E5E5E5"> even the Amazon echo if</font>

1173
00:54:23,110 --> 00:54:28,120
you go to a different<font color="#E5E5E5"> humor version you</font>

1174
00:54:25,570 --> 00:54:30,700
need to adjust some<font color="#CCCCCC"> of the variables but</font>

1175
00:54:28,120 --> 00:54:34,509
<font color="#E5E5E5">our our job was not</font><font color="#CCCCCC"> to make</font><font color="#E5E5E5"> this a</font>

1176
00:54:30,700 --> 00:54:39,460
weaponized nation grades<font color="#CCCCCC"> an exploit</font>

1177
00:54:34,510 --> 00:54:41,590
although sometimes<font color="#E5E5E5"> II love that</font><font color="#CCCCCC"> but more</font>

1178
00:54:39,460 --> 00:54:45,880
<font color="#E5E5E5">like to show the proof concept of that</font>

1179
00:54:41,590 --> 00:54:48,610
so any actor that wishes to<font color="#CCCCCC"> take</font>

1180
00:54:45,880 --> 00:54:52,390
advantage<font color="#CCCCCC"> of the small abilities</font><font color="#E5E5E5"> in the</font>

1181
00:54:48,610 --> 00:54:56,080
in the highest manner<font color="#E5E5E5"> and then you can</font>

1182
00:54:52,390 --> 00:54:59,950
do that<font color="#E5E5E5"> you can mix exploit generic or</font>

1183
00:54:56,080 --> 00:55:03,790
just customize it to a very wide<font color="#CCCCCC"> variety</font>

1184
00:54:59,950 --> 00:55:06,189
of devices it's possible it just<font color="#E5E5E5"> needs</font>

1185
00:55:03,790 --> 00:55:09,580
<font color="#E5E5E5">to be customized yeah and the second</font>

1186
00:55:06,190 --> 00:55:11,590
question<font color="#CCCCCC"> you mentioned monitoring would</font>

1187
00:55:09,580 --> 00:55:17,319
<font color="#E5E5E5">you have any suggestion how you monitor</font>

1188
00:55:11,590 --> 00:55:19,390
<font color="#E5E5E5">mobile devices at all times</font><font color="#CCCCCC"> I'm thinking</font>

1189
00:55:17,320 --> 00:55:21,490
thank<font color="#E5E5E5"> you you know your your phone is</font>

1190
00:55:19,390 --> 00:55:21,970
essentially a mobile device you<font color="#E5E5E5"> carry it</font>

1191
00:55:21,490 --> 00:55:25,540
<font color="#E5E5E5">around</font>

1192
00:55:21,970 --> 00:55:27,629
how would you monitor<font color="#CCCCCC"> that and</font><font color="#E5E5E5"> so</font>

1193
00:55:25,540 --> 00:55:30,820
there's a number<font color="#CCCCCC"> of ways there is the</font>

1194
00:55:27,630 --> 00:55:32,830
the way<font color="#CCCCCC"> that probably</font><font color="#E5E5E5"> think</font><font color="#CCCCCC"> about it</font>

1195
00:55:30,820 --> 00:55:35,440
just<font color="#E5E5E5"> spread hardware around the</font>

1196
00:55:32,830 --> 00:55:37,960
organization that<font color="#E5E5E5"> monitors Wi-Fi and</font>

1197
00:55:35,440 --> 00:55:39,670
<font color="#E5E5E5">Bluetooth such things exist for Wi-Fi</font>

1198
00:55:37,960 --> 00:55:41,980
<font color="#E5E5E5">thing they're called they're</font><font color="#CCCCCC"> wireless</font>

1199
00:55:39,670 --> 00:55:46,780
<font color="#CCCCCC">safe yes right mmm</font><font color="#E5E5E5"> so they do kind of</font>

1200
00:55:41,980 --> 00:55:50,860
this<font color="#E5E5E5"> thing and so if you</font><font color="#CCCCCC"> monitor</font><font color="#E5E5E5"> all</font>

1201
00:55:46,780 --> 00:55:54,550
these protocols<font color="#E5E5E5"> that your</font><font color="#CCCCCC"> devices</font>

1202
00:55:50,860 --> 00:55:56,830
exposed to the air<font color="#E5E5E5"> then you'll have at</font>

1203
00:55:54,550 --> 00:56:00,450
least a window into seeing what's

1204
00:55:56,830 --> 00:56:04,830
actually going on and be able<font color="#CCCCCC"> to control</font>

1205
00:56:00,450 --> 00:56:07,980
but our<font color="#E5E5E5"> company also does specifically</font>

1206
00:56:04,830 --> 00:56:11,350
<font color="#E5E5E5">monitors those communications as well</font>

1207
00:56:07,980 --> 00:56:14,380
<font color="#E5E5E5">either via specific hardware that we</font>

1208
00:56:11,350 --> 00:56:16,060
deploy or with some integration to

1209
00:56:14,380 --> 00:56:18,390
existing infrastructure<font color="#E5E5E5"> in you know</font>

1210
00:56:16,060 --> 00:56:18,390
patronization

1211
00:56:23,999 --> 00:56:28,238
hi<font color="#E5E5E5"> thanks very much absolutely</font>

1212
00:56:26,619 --> 00:56:29,950
fascinating<font color="#CCCCCC"> presentation um</font><font color="#E5E5E5"> I don't</font>

1213
00:56:28,239 --> 00:56:31,239
suppose<font color="#E5E5E5"> I can ask a favor</font><font color="#CCCCCC"> would</font><font color="#E5E5E5"> you be</font>

1214
00:56:29,950 --> 00:56:32,558
able<font color="#E5E5E5"> to</font><font color="#CCCCCC"> put the URLs for your white</font>

1215
00:56:31,239 --> 00:56:44,940
paper<font color="#E5E5E5"> back up because I didn't get them</font>

1216
00:56:32,559 --> 00:56:49,299
down in time<font color="#E5E5E5"> which one I am</font><font color="#CCCCCC"> so not okay</font>

1217
00:56:44,940 --> 00:56:51,999
yeah also<font color="#CCCCCC"> here there was also a white</font>

1218
00:56:49,299 --> 00:56:56,079
paper and a<font color="#E5E5E5"> presentation video in</font>

1219
00:56:51,999 --> 00:56:59,049
another venue<font color="#E5E5E5"> about Android</font><font color="#CCCCCC"> a white</font>

1220
00:56:56,079 --> 00:57:01,109
paper<font color="#E5E5E5"> also</font><font color="#CCCCCC"> exists if you go to our</font>

1221
00:56:59,049 --> 00:57:06,220
github you'll find all of this there

1222
00:57:01,109 --> 00:57:07,089
next tomorrow or so yeah<font color="#CCCCCC"> oh it's</font>

1223
00:57:06,220 --> 00:57:10,979
<font color="#E5E5E5">stupidly</font>

1224
00:57:07,089 --> 00:57:10,979
<font color="#CCCCCC">blackhat back that will come later</font>

1225
00:57:18,519 --> 00:57:27,100
<font color="#E5E5E5">okay well thank you very much</font>

1226
00:57:23,680 --> 00:57:29,169
[Music]

1227
00:57:27,100 --> 00:57:29,170
[Applause]

