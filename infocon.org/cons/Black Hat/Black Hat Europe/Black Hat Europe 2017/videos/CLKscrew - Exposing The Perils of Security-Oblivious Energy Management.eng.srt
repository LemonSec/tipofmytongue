1
00:00:00,030 --> 00:00:04,680
well good morning<font color="#CCCCCC"> everyone</font><font color="#E5E5E5"> I'm agent</font><font color="#CCCCCC"> tag</font>

2
00:00:02,490 --> 00:00:06,210
from Columbia University<font color="#CCCCCC"> it's really</font>

3
00:00:04,680 --> 00:00:08,400
great to<font color="#E5E5E5"> see everybody here today at a</font>

4
00:00:06,210 --> 00:00:11,250
black hat<font color="#CCCCCC"> and thank</font><font color="#E5E5E5"> you black hat for</font>

5
00:00:08,400 --> 00:00:12,929
inviting<font color="#CCCCCC"> me</font><font color="#E5E5E5"> here for for this talk</font><font color="#CCCCCC"> so</font>

6
00:00:11,250 --> 00:00:15,450
<font color="#CCCCCC">this</font><font color="#E5E5E5"> talk that I'm</font><font color="#CCCCCC"> gonna talking about</font>

7
00:00:12,929 --> 00:00:17,910
<font color="#E5E5E5">today is</font><font color="#CCCCCC"> is a joint</font><font color="#E5E5E5"> work</font><font color="#CCCCCC"> with my</font>

8
00:00:15,450 --> 00:00:20,640
<font color="#CCCCCC">advisers back in Columbia South Stoffel</font>

9
00:00:17,910 --> 00:00:22,320
and sim<font color="#E5E5E5"> house at the Mud Run</font><font color="#CCCCCC"> and today</font>

10
00:00:20,640 --> 00:00:25,050
we're really excited to share<font color="#E5E5E5"> with you</font>

11
00:00:22,320 --> 00:00:26,670
how<font color="#E5E5E5"> we broke energy management a very</font>

12
00:00:25,050 --> 00:00:28,890
fundamental component<font color="#E5E5E5"> that we see in a</font>

13
00:00:26,670 --> 00:00:31,669
lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> systems that we have</font><font color="#CCCCCC"> today and we</font>

14
00:00:28,890 --> 00:00:35,460
<font color="#E5E5E5">call this new class of attack vector</font>

15
00:00:31,669 --> 00:00:37,739
<font color="#CCCCCC">clocks crew so first a brief bio of</font>

16
00:00:35,460 --> 00:00:40,110
myself currently doing my<font color="#E5E5E5"> PhD in</font>

17
00:00:37,739 --> 00:00:42,149
Columbia University<font color="#E5E5E5"> I belong to two labs</font>

18
00:00:40,110 --> 00:00:44,820
over<font color="#E5E5E5"> their ideas lab and the computer</font>

19
00:00:42,149 --> 00:00:46,289
architecture lab for<font color="#CCCCCC"> a huge part of my</font>

20
00:00:44,820 --> 00:00:48,239
<font color="#E5E5E5">research I do a lot of reverse</font>

21
00:00:46,289 --> 00:00:51,239
engineering<font color="#E5E5E5"> a lot of</font><font color="#CCCCCC"> buck hunting</font>

22
00:00:48,239 --> 00:00:53,519
<font color="#E5E5E5">created a couple</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> buzzes and and also</font>

23
00:00:51,239 --> 00:00:55,890
<font color="#CCCCCC">do a</font><font color="#E5E5E5"> couple like</font><font color="#CCCCCC"> malwan and analysis</font>

24
00:00:53,520 --> 00:00:57,329
focus a lot of security<font color="#E5E5E5"> issues</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> are</font>

25
00:00:55,890 --> 00:00:59,910
related<font color="#CCCCCC"> to hardware and software</font>

26
00:00:57,329 --> 00:01:01,890
interfaces so now about<font color="#CCCCCC"> energy</font>

27
00:00:59,910 --> 00:01:04,500
<font color="#CCCCCC">management</font><font color="#E5E5E5"> so today as</font><font color="#CCCCCC"> we know we're</font>

28
00:01:01,890 --> 00:01:06,270
energy management is<font color="#E5E5E5"> a indispensable in</font>

29
00:01:04,500 --> 00:01:08,250
fact none of<font color="#E5E5E5"> the systems that we have</font>

30
00:01:06,270 --> 00:01:10,470
<font color="#CCCCCC">today</font><font color="#E5E5E5"> can actually exist without energy</font>

31
00:01:08,250 --> 00:01:12,689
management<font color="#E5E5E5"> and this is because as we</font>

32
00:01:10,470 --> 00:01:14,280
<font color="#E5E5E5">shown</font><font color="#CCCCCC"> it chart over</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> energy</font><font color="#E5E5E5"> density</font>

33
00:01:12,689 --> 00:01:16,979
is getting at<font color="#CCCCCC"> a totally ridiculous point</font>

34
00:01:14,280 --> 00:01:18,689
as far<font color="#CCCCCC"> as we try</font><font color="#E5E5E5"> to cram as much more</font>

35
00:01:16,979 --> 00:01:20,369
and more functionality into like smaller

36
00:01:18,689 --> 00:01:23,279
and smaller chips<font color="#E5E5E5"> we can create hot</font>

37
00:01:20,369 --> 00:01:24,900
spots<font color="#CCCCCC"> in them so much so that if we</font>

38
00:01:23,280 --> 00:01:26,460
don't<font color="#E5E5E5"> manage the</font><font color="#CCCCCC"> energy well it might</font>

39
00:01:24,900 --> 00:01:28,680
<font color="#CCCCCC">clear that the battery</font><font color="#E5E5E5"> might rain really</font>

40
00:01:26,460 --> 00:01:31,679
quickly<font color="#E5E5E5"> or worse we might</font><font color="#CCCCCC"> even burn a</font>

41
00:01:28,680 --> 00:01:34,710
hole<font color="#E5E5E5"> in the trip so because this is so</font>

42
00:01:31,680 --> 00:01:37,020
important practitioner in<font color="#CCCCCC"> the industry</font>

43
00:01:34,710 --> 00:01:38,369
and<font color="#E5E5E5"> our researchers in the academia they</font>

44
00:01:37,020 --> 00:01:40,560
have gone to great<font color="#CCCCCC"> lengths just to</font>

45
00:01:38,369 --> 00:01:42,390
optimize the way we manage energy<font color="#CCCCCC"> or</font>

46
00:01:40,560 --> 00:01:44,220
<font color="#E5E5E5">consumption so this is clearly very</font>

47
00:01:42,390 --> 00:01:46,770
important in the industry<font color="#CCCCCC"> and both in</font>

48
00:01:44,220 --> 00:01:49,158
the in the academia<font color="#CCCCCC"> too so in summary we</font>

49
00:01:46,770 --> 00:01:51,750
<font color="#CCCCCC">have this</font><font color="#E5E5E5"> mechanism energy management</font>

50
00:01:49,159 --> 00:01:53,520
<font color="#CCCCCC">that we cannot live without and it's</font>

51
00:01:51,750 --> 00:01:55,740
<font color="#E5E5E5">found on almost all the systems and is</font>

52
00:01:53,520 --> 00:01:57,780
extremely<font color="#E5E5E5"> complicated</font><font color="#CCCCCC"> so this is a</font>

53
00:01:55,740 --> 00:01:59,490
perfect<font color="#E5E5E5"> storm for security</font><font color="#CCCCCC"> and yet no</font>

54
00:01:57,780 --> 00:02:02,159
studies<font color="#E5E5E5"> have</font><font color="#CCCCCC"> actually looked</font><font color="#E5E5E5"> at this and</font>

55
00:01:59,490 --> 00:02:04,079
so in<font color="#E5E5E5"> this work we study the mechanisms</font>

56
00:02:02,159 --> 00:02:07,920
and show that<font color="#E5E5E5"> this systems can be</font>

57
00:02:04,079 --> 00:02:11,008
<font color="#CCCCCC">fragile in terms of</font><font color="#E5E5E5"> security so our</font>

58
00:02:07,920 --> 00:02:12,780
attack idea is this<font color="#E5E5E5"> through software</font><font color="#CCCCCC"> we</font>

59
00:02:11,008 --> 00:02:15,000
try to manipulate<font color="#E5E5E5"> the energy man</font>

60
00:02:12,780 --> 00:02:17,160
<font color="#E5E5E5">management parameters to stretch the</font>

61
00:02:15,000 --> 00:02:20,520
<font color="#E5E5E5">operational limits of the devices in the</font>

62
00:02:17,160 --> 00:02:23,670
<font color="#E5E5E5">way that it</font><font color="#CCCCCC"> induces false insecurity</font>

63
00:02:20,520 --> 00:02:25,950
critical<font color="#E5E5E5"> software so why is this cool</font>

64
00:02:23,670 --> 00:02:27,869
<font color="#E5E5E5">because</font><font color="#CCCCCC"> this allows us</font><font color="#E5E5E5"> to sidestep</font><font color="#CCCCCC"> all</font>

65
00:02:25,950 --> 00:02:30,119
<font color="#CCCCCC">the</font><font color="#E5E5E5"> requirements of traditional</font><font color="#CCCCCC"> fault</font>

66
00:02:27,870 --> 00:02:32,130
attacks<font color="#E5E5E5"> like needing physical proximity</font>

67
00:02:30,120 --> 00:02:33,900
<font color="#CCCCCC">a separate equipments crocodile</font><font color="#E5E5E5"> clips</font>

68
00:02:32,130 --> 00:02:36,420
and<font color="#E5E5E5"> all the</font><font color="#CCCCCC"> maths and business but more</font>

69
00:02:33,900 --> 00:02:38,640
importantly it opens up a very<font color="#E5E5E5"> new</font>

70
00:02:36,420 --> 00:02:41,220
attack surface<font color="#E5E5E5"> on something very</font>

71
00:02:38,640 --> 00:02:43,500
pervasive<font color="#E5E5E5"> in systems and it</font><font color="#CCCCCC"> has</font><font color="#E5E5E5"> little</font>

72
00:02:41,220 --> 00:02:44,130
raises the possibility<font color="#E5E5E5"> of doing four</font>

73
00:02:43,500 --> 00:02:47,790
attacks

74
00:02:44,130 --> 00:02:49,410
<font color="#E5E5E5">remotely so just to summarize at all in</font>

75
00:02:47,790 --> 00:02:51,540
a nutshell what have we achieved in<font color="#E5E5E5"> this</font>

76
00:02:49,410 --> 00:02:54,390
work we found<font color="#E5E5E5"> a new software based</font>

77
00:02:51,540 --> 00:02:57,329
attack vector that exploits a<font color="#E5E5E5"> mccannon</font>

78
00:02:54,390 --> 00:02:58,920
<font color="#E5E5E5">them found in almost all systems we</font>

79
00:02:57,330 --> 00:03:00,510
<font color="#E5E5E5">showed that this vector can</font><font color="#CCCCCC"> be used to</font>

80
00:02:58,920 --> 00:03:02,220
break<font color="#CCCCCC"> at razón or the security</font>

81
00:03:00,510 --> 00:03:05,579
<font color="#E5E5E5">guarantees of trusted execution</font>

82
00:03:02,220 --> 00:03:06,930
environment<font color="#CCCCCC"> we</font><font color="#E5E5E5"> disclose our findings to</font>

83
00:03:05,580 --> 00:03:08,940
the vendors whose chips are<font color="#E5E5E5"> going to</font>

84
00:03:06,930 --> 00:03:10,650
millions and hundreds of devices<font color="#CCCCCC"> out</font>

85
00:03:08,940 --> 00:03:12,900
<font color="#E5E5E5">there and the vendors have accepted our</font>

86
00:03:10,650 --> 00:03:14,280
disclosure as highly critical<font color="#CCCCCC"> and novel</font>

87
00:03:12,900 --> 00:03:16,890
and are currently working to<font color="#E5E5E5"> its</font>

88
00:03:14,280 --> 00:03:18,959
mitigation that fixes<font color="#E5E5E5"> and finally we</font>

89
00:03:16,890 --> 00:03:20,970
hope that<font color="#CCCCCC"> the</font><font color="#E5E5E5"> security can be duly</font>

90
00:03:18,959 --> 00:03:23,850
considered in future designs of<font color="#E5E5E5"> all the</font>

91
00:03:20,970 --> 00:03:25,049
systems this<font color="#CCCCCC"> is an</font><font color="#E5E5E5"> overview of what we</font>

92
00:03:23,850 --> 00:03:28,109
were<font color="#E5E5E5"> going to be talking</font><font color="#CCCCCC"> about today</font>

93
00:03:25,049 --> 00:03:29,670
<font color="#CCCCCC">first</font><font color="#E5E5E5"> we'll pick apart what</font><font color="#CCCCCC"> we can about</font>

94
00:03:28,110 --> 00:03:32,570
the<font color="#E5E5E5"> hardware and</font><font color="#CCCCCC"> software support for</font>

95
00:03:29,670 --> 00:03:34,798
<font color="#E5E5E5">devfs devfs is a very commonly used</font>

96
00:03:32,570 --> 00:03:37,290
energy<font color="#E5E5E5"> management technique I'm gonna</font>

97
00:03:34,799 --> 00:03:39,480
talk more about that<font color="#E5E5E5"> later</font><font color="#CCCCCC"> and then</font>

98
00:03:37,290 --> 00:03:41,220
based on what<font color="#E5E5E5"> we learn we're gonna be</font>

99
00:03:39,480 --> 00:03:43,470
talking<font color="#E5E5E5"> about the general attack</font>

100
00:03:41,220 --> 00:03:45,450
architecture and finally we describe in

101
00:03:43,470 --> 00:03:49,140
detail how<font color="#CCCCCC"> we pull off</font><font color="#E5E5E5"> to trust</font><font color="#CCCCCC"> zone</font>

102
00:03:45,450 --> 00:03:51,238
<font color="#CCCCCC">attacks on an actual</font><font color="#E5E5E5"> phone so first up</font>

103
00:03:49,140 --> 00:03:55,048
about devfs and deep dive into the

104
00:03:51,239 --> 00:03:57,810
hardware regulators now there are two

105
00:03:55,049 --> 00:04:00,299
main<font color="#CCCCCC"> factors that</font><font color="#E5E5E5"> affect energy</font>

106
00:03:57,810 --> 00:04:03,660
consumption the<font color="#E5E5E5"> operating frequency and</font>

107
00:04:00,299 --> 00:04:06,239
voltage think of frequency<font color="#CCCCCC"> as how much</font>

108
00:04:03,660 --> 00:04:08,190
how<font color="#E5E5E5"> fast a system can process the data</font>

109
00:04:06,239 --> 00:04:11,310
<font color="#CCCCCC">the higher the</font><font color="#E5E5E5"> frequency the</font><font color="#CCCCCC"> more energy</font>

110
00:04:08,190 --> 00:04:13,140
consumed<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> think of voltage as how</font>

111
00:04:11,310 --> 00:04:14,609
much power to<font color="#E5E5E5"> supply to the system</font><font color="#CCCCCC"> and</font>

112
00:04:13,140 --> 00:04:15,179
more voltage<font color="#E5E5E5"> the more energy will be</font>

113
00:04:14,609 --> 00:04:17,789
consumed

114
00:04:15,180 --> 00:04:19,798
now devfs saves the energy by<font color="#CCCCCC"> turning</font>

115
00:04:17,789 --> 00:04:22,140
this two knobs based on runtime

116
00:04:19,798 --> 00:04:24,090
computing demands<font color="#E5E5E5"> it's a little bit like</font>

117
00:04:22,140 --> 00:04:26,280
putting<font color="#E5E5E5"> putting a rubber band over this</font>

118
00:04:24,090 --> 00:04:27,929
<font color="#CCCCCC">to NOx and</font><font color="#E5E5E5"> carefully adjusting both</font>

119
00:04:26,280 --> 00:04:30,239
<font color="#CCCCCC">at the same time</font><font color="#E5E5E5"> so of course it</font>

120
00:04:27,930 --> 00:04:32,580
sketches devfs<font color="#E5E5E5"> a very very high</font><font color="#CCCCCC"> level</font>

121
00:04:30,240 --> 00:04:35,180
<font color="#CCCCCC">but in practice how a frequency and</font>

122
00:04:32,580 --> 00:04:37,469
voltage<font color="#E5E5E5"> actually changed on your phone</font>

123
00:04:35,180 --> 00:04:39,630
so this is<font color="#E5E5E5"> possible</font><font color="#CCCCCC"> due to</font><font color="#E5E5E5"> a combination</font>

124
00:04:37,470 --> 00:04:42,780
<font color="#E5E5E5">of hardware</font><font color="#CCCCCC"> and software</font><font color="#E5E5E5"> support for</font>

125
00:04:39,630 --> 00:04:44,570
<font color="#E5E5E5">devfs at the hardware level we have</font><font color="#CCCCCC"> the</font>

126
00:04:42,780 --> 00:04:46,830
circuit level<font color="#CCCCCC"> hardware regulators and</font>

127
00:04:44,570 --> 00:04:49,349
<font color="#E5E5E5">that they control the frequency</font><font color="#CCCCCC"> and</font>

128
00:04:46,830 --> 00:04:50,849
voltage<font color="#E5E5E5"> at the hardware level now at the</font>

129
00:04:49,350 --> 00:04:52,560
software<font color="#CCCCCC"> level we have the</font><font color="#E5E5E5"> power</font>

130
00:04:50,850 --> 00:04:54,690
<font color="#CCCCCC">governor's that monitor</font><font color="#E5E5E5"> the runtime</font>

131
00:04:52,560 --> 00:04:59,010
usage and initiate frequency and voltage

132
00:04:54,690 --> 00:05:00,390
changes using<font color="#E5E5E5"> the device drivers now by</font>

133
00:04:59,010 --> 00:05:02,130
studying the source code<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the device</font>

134
00:05:00,390 --> 00:05:04,320
driver we know that the software can

135
00:05:02,130 --> 00:05:06,990
<font color="#E5E5E5">control the hardware regulators via</font>

136
00:05:04,320 --> 00:05:08,250
<font color="#E5E5E5">memory map registers and this really</font>

137
00:05:06,990 --> 00:05:09,930
<font color="#E5E5E5">interesting because now we know</font><font color="#CCCCCC"> that</font>

138
00:05:08,250 --> 00:05:11,850
software<font color="#CCCCCC"> can affect some physical</font>

139
00:05:09,930 --> 00:05:14,880
characteristics<font color="#E5E5E5"> of the hardware that</font><font color="#CCCCCC"> is</font>

140
00:05:11,850 --> 00:05:16,380
running<font color="#E5E5E5"> on and so we</font><font color="#CCCCCC"> focus</font><font color="#E5E5E5"> our Tara our</font>

141
00:05:14,880 --> 00:05:20,280
study on<font color="#CCCCCC"> the</font><font color="#E5E5E5"> regulators and</font><font color="#CCCCCC"> your</font>

142
00:05:16,380 --> 00:05:23,909
<font color="#E5E5E5">interfaces for this work will focus on</font>

143
00:05:20,280 --> 00:05:28,169
starting<font color="#CCCCCC"> an actual arm v7 phone so</font>

144
00:05:23,910 --> 00:05:30,270
specifically the<font color="#CCCCCC"> Nexus 6 mv7 form for</font>

145
00:05:28,169 --> 00:05:31,890
illustration<font color="#E5E5E5"> we here we show</font><font color="#CCCCCC"> the</font>

146
00:05:30,270 --> 00:05:33,419
<font color="#E5E5E5">schematics of the frequency in the</font>

147
00:05:31,890 --> 00:05:36,330
<font color="#E5E5E5">voltage regulators that</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> reverse</font>

148
00:05:33,419 --> 00:05:38,549
<font color="#E5E5E5">engineer from the Nexus device now the</font>

149
00:05:36,330 --> 00:05:40,859
important<font color="#E5E5E5"> point to note here</font><font color="#CCCCCC"> is on this</font>

150
00:05:38,550 --> 00:05:43,020
device kinetics<font color="#E5E5E5"> this regulators are all</font>

151
00:05:40,860 --> 00:05:45,060
<font color="#E5E5E5">configurable from the software through</font>

152
00:05:43,020 --> 00:05:46,890
the memory map registers<font color="#CCCCCC"> I want to</font>

153
00:05:45,060 --> 00:05:48,780
elaborate the details for this<font color="#E5E5E5"> so if you</font>

154
00:05:46,890 --> 00:05:50,460
interested<font color="#CCCCCC"> I've made available</font><font color="#E5E5E5"> the</font>

155
00:05:48,780 --> 00:05:52,739
source code<font color="#CCCCCC"> that I use</font><font color="#E5E5E5"> I created the</font>

156
00:05:50,460 --> 00:05:54,599
driver that allows you<font color="#E5E5E5"> to manipulate the</font>

157
00:05:52,740 --> 00:05:58,260
<font color="#E5E5E5">voltage and frequency and I give the</font>

158
00:05:54,600 --> 00:06:01,260
link over<font color="#CCCCCC"> here so</font><font color="#E5E5E5"> after creating the</font>

159
00:05:58,260 --> 00:06:03,870
driver<font color="#E5E5E5"> to programmatically control</font><font color="#CCCCCC"> the</font>

160
00:06:01,260 --> 00:06:05,760
<font color="#CCCCCC">frequency in the voltage at</font><font color="#E5E5E5"> runtime</font><font color="#CCCCCC"> this</font>

161
00:06:03,870 --> 00:06:08,160
is where things<font color="#E5E5E5"> starts to get really</font>

162
00:06:05,760 --> 00:06:10,380
interesting<font color="#E5E5E5"> because for certain values</font>

163
00:06:08,160 --> 00:06:12,300
<font color="#CCCCCC">of frequency and the voltages</font><font color="#E5E5E5"> we begin</font>

164
00:06:10,380 --> 00:06:13,969
to see really<font color="#CCCCCC"> interesting crashes</font><font color="#E5E5E5"> for</font>

165
00:06:12,300 --> 00:06:16,140
example<font color="#CCCCCC"> programs to start to terminate</font>

166
00:06:13,970 --> 00:06:18,000
prematurely or<font color="#E5E5E5"> even like you know you I</font>

167
00:06:16,140 --> 00:06:19,469
will stop working<font color="#E5E5E5"> so this is a</font>

168
00:06:18,000 --> 00:06:21,150
screenshot of<font color="#E5E5E5"> what</font><font color="#CCCCCC"> happened when we</font><font color="#E5E5E5"> try</font>

169
00:06:19,470 --> 00:06:23,190
<font color="#E5E5E5">to</font><font color="#CCCCCC"> like raise the frequency past</font>

170
00:06:21,150 --> 00:06:28,349
specific point<font color="#E5E5E5"> or in</font><font color="#CCCCCC"> combination</font><font color="#E5E5E5"> with</font>

171
00:06:23,190 --> 00:06:30,360
some<font color="#E5E5E5"> other voltages so we</font><font color="#CCCCCC"> play</font><font color="#E5E5E5"> around</font>

172
00:06:28,350 --> 00:06:32,760
with<font color="#E5E5E5"> different settings even we like</font>

173
00:06:30,360 --> 00:06:34,229
<font color="#E5E5E5">different temperatures</font><font color="#CCCCCC"> the picture</font><font color="#E5E5E5"> that</font>

174
00:06:32,760 --> 00:06:36,780
you see<font color="#CCCCCC"> over here</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is a basically</font><font color="#E5E5E5"> a</font>

175
00:06:34,229 --> 00:06:38,580
picture<font color="#CCCCCC"> of my my fridge</font><font color="#E5E5E5"> my laptop and my</font>

176
00:06:36,780 --> 00:06:39,059
<font color="#CCCCCC">phone which is</font><font color="#E5E5E5"> actually in the freezer</font>

177
00:06:38,580 --> 00:06:40,889
which can

178
00:06:39,060 --> 00:06:42,690
<font color="#E5E5E5">seen in the picture here</font><font color="#CCCCCC"> so I gotta say</font>

179
00:06:40,889 --> 00:06:45,270
this<font color="#CCCCCC"> fridge</font><font color="#E5E5E5"> has been really</font><font color="#CCCCCC"> useful</font><font color="#E5E5E5"> in my</font>

180
00:06:42,690 --> 00:06:46,980
research<font color="#E5E5E5"> but clearly my wife is not very</font>

181
00:06:45,270 --> 00:06:49,320
excited<font color="#CCCCCC"> about me putting like random</font>

182
00:06:46,980 --> 00:06:51,180
phones in there<font color="#E5E5E5"> in the fridge but anyway</font>

183
00:06:49,320 --> 00:06:54,300
we<font color="#E5E5E5"> died we decided like</font><font color="#CCCCCC"> dig a little bit</font>

184
00:06:51,180 --> 00:06:56,310
further into this so now yeah<font color="#CCCCCC"> we want to</font>

185
00:06:54,300 --> 00:06:58,110
know that the software can<font color="#E5E5E5"> control the</font>

186
00:06:56,310 --> 00:07:00,450
frequency<font color="#E5E5E5"> and the voltage right a fair</font>

187
00:06:58,110 --> 00:07:03,450
question for us to ask is whether any

188
00:07:00,450 --> 00:07:06,330
limits<font color="#E5E5E5"> actually imposed</font><font color="#CCCCCC"> are on all this</font>

189
00:07:03,450 --> 00:07:07,349
<font color="#CCCCCC">configuration at runtime so it's</font>

190
00:07:06,330 --> 00:07:08,820
<font color="#E5E5E5">actually why we want</font><font color="#CCCCCC"> to do is it</font>

191
00:07:07,350 --> 00:07:11,040
configure different<font color="#E5E5E5"> frequency</font><font color="#CCCCCC"> and</font>

192
00:07:08,820 --> 00:07:12,360
voltage points on an<font color="#CCCCCC"> actual phone</font><font color="#E5E5E5"> and</font>

193
00:07:11,040 --> 00:07:14,639
then we want<font color="#E5E5E5"> to track when bad things</font>

194
00:07:12,360 --> 00:07:16,020
happen<font color="#CCCCCC"> and</font><font color="#E5E5E5"> we need to do this like</font>

195
00:07:14,639 --> 00:07:18,300
<font color="#CCCCCC">systematically there's couple</font><font color="#E5E5E5"> of things</font>

196
00:07:16,020 --> 00:07:20,280
we<font color="#CCCCCC"> need to</font><font color="#E5E5E5"> do so now we know we can</font>

197
00:07:18,300 --> 00:07:22,470
observe and probe like the the phone for

198
00:07:20,280 --> 00:07:24,659
<font color="#E5E5E5">unintended computing behaviors like</font>

199
00:07:22,470 --> 00:07:25,889
crashing and<font color="#E5E5E5"> trigger freezes we know we</font>

200
00:07:24,660 --> 00:07:28,380
can control the<font color="#E5E5E5"> frequency and the</font>

201
00:07:25,889 --> 00:07:30,180
voltage<font color="#E5E5E5"> we need to also be able to</font>

202
00:07:28,380 --> 00:07:32,400
<font color="#CCCCCC">verify that</font><font color="#E5E5E5"> the frequency and the</font>

203
00:07:30,180 --> 00:07:34,590
voltage<font color="#E5E5E5"> actually change according to</font>

204
00:07:32,400 --> 00:07:36,960
<font color="#CCCCCC">what we want so how do</font><font color="#E5E5E5"> we actually do</font>

205
00:07:34,590 --> 00:07:39,419
<font color="#CCCCCC">that so fortunately if we have the debug</font>

206
00:07:36,960 --> 00:07:40,710
<font color="#CCCCCC">FS interface and able</font><font color="#E5E5E5"> they're actually</font>

207
00:07:39,419 --> 00:07:43,109
sensors on the thing which<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can</font>

208
00:07:40,710 --> 00:07:44,760
<font color="#CCCCCC">access and you can probe to see what the</font>

209
00:07:43,110 --> 00:07:47,190
frequency and the<font color="#CCCCCC"> voltage</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> on the</font>

210
00:07:44,760 --> 00:07:48,990
actual phone so short<font color="#E5E5E5"> of using</font><font color="#CCCCCC"> like you</font>

211
00:07:47,190 --> 00:07:51,000
know opening the phone<font color="#E5E5E5"> up and using</font>

212
00:07:48,990 --> 00:07:52,860
physical<font color="#E5E5E5"> instrument to probe for all</font>

213
00:07:51,000 --> 00:07:55,140
this physical<font color="#E5E5E5"> like the frequency in the</font>

214
00:07:52,860 --> 00:07:57,660
voltage<font color="#E5E5E5"> we</font><font color="#CCCCCC"> can use a debug statement</font>

215
00:07:55,140 --> 00:07:58,890
over<font color="#CCCCCC"> here to get information</font><font color="#E5E5E5"> directly so</font>

216
00:07:57,660 --> 00:08:00,919
this commands are<font color="#CCCCCC"> actually more</font>

217
00:07:58,890 --> 00:08:03,330
convenient here<font color="#E5E5E5"> for us</font>

218
00:08:00,919 --> 00:08:05,310
so now let's let's explore this a<font color="#E5E5E5"> little</font>

219
00:08:03,330 --> 00:08:06,659
bit more<font color="#E5E5E5"> you the the various operating</font>

220
00:08:05,310 --> 00:08:08,910
points for the frequency in the voltage

221
00:08:06,660 --> 00:08:11,910
<font color="#CCCCCC">right so what we have</font><font color="#E5E5E5"> here is a nexus 6</font>

222
00:08:08,910 --> 00:08:15,210
device this<font color="#E5E5E5"> is advertised to run</font><font color="#CCCCCC"> our at</font>

223
00:08:11,910 --> 00:08:16,830
2.7<font color="#E5E5E5"> gigahertz</font><font color="#CCCCCC"> and we measure</font><font color="#E5E5E5"> the vendor</font>

224
00:08:15,210 --> 00:08:20,039
recommended frequency<font color="#CCCCCC"> and voltage at</font>

225
00:08:16,830 --> 00:08:21,840
<font color="#E5E5E5">runtime so the</font><font color="#CCCCCC"> frequency</font><font color="#E5E5E5"> is the</font><font color="#CCCCCC"> y-axis</font>

226
00:08:20,039 --> 00:08:24,960
and on the x-axis<font color="#E5E5E5"> you have the</font><font color="#CCCCCC"> voltage</font>

227
00:08:21,840 --> 00:08:26,760
and after measurement we observe<font color="#CCCCCC"> several</font>

228
00:08:24,960 --> 00:08:28,919
discrete frequency and voltage operating

229
00:08:26,760 --> 00:08:30,450
points here<font color="#CCCCCC"> so true enough</font>

230
00:08:28,919 --> 00:08:31,830
well the vendors is definitely not<font color="#CCCCCC"> lying</font>

231
00:08:30,450 --> 00:08:33,330
to us<font color="#CCCCCC"> because if you look</font><font color="#E5E5E5"> at the top</font>

232
00:08:31,830 --> 00:08:36,419
right most corner of that the highest

233
00:08:33,330 --> 00:08:38,039
<font color="#E5E5E5">frequency</font><font color="#CCCCCC"> of 2.7 gigahertz it's really</font>

234
00:08:36,419 --> 00:08:40,708
as advertised there<font color="#E5E5E5"> so they're</font>

235
00:08:38,039 --> 00:08:42,330
definitely not<font color="#E5E5E5"> lying now we use the</font>

236
00:08:40,708 --> 00:08:44,250
software<font color="#E5E5E5"> interfaces that we've uncovered</font>

237
00:08:42,330 --> 00:08:47,400
<font color="#E5E5E5">earlier on</font><font color="#CCCCCC"> our to control the frequency</font>

238
00:08:44,250 --> 00:08:48,930
<font color="#CCCCCC">in voltage</font><font color="#E5E5E5"> and then for every voltage we</font>

239
00:08:47,400 --> 00:08:50,670
try to raise the<font color="#CCCCCC"> frequency all the way</font>

240
00:08:48,930 --> 00:08:52,560
up until<font color="#E5E5E5"> we see some</font><font color="#CCCCCC"> signs of</font>

241
00:08:50,670 --> 00:08:54,449
instability on<font color="#CCCCCC"> the phone</font>

242
00:08:52,560 --> 00:08:56,910
this can range from apps crashing or you

243
00:08:54,449 --> 00:08:57,990
know the device<font color="#E5E5E5"> of rebooting and then we</font>

244
00:08:56,910 --> 00:09:01,040
measure like the<font color="#E5E5E5"> frequency in the</font>

245
00:08:57,990 --> 00:09:03,660
voltage<font color="#E5E5E5"> and plot the points over here</font>

246
00:09:01,040 --> 00:09:05,490
<font color="#E5E5E5">now these are the operating points are</font>

247
00:09:03,660 --> 00:09:08,160
the blue<font color="#E5E5E5"> points that we see over</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> on</font>

248
00:09:05,490 --> 00:09:09,839
the<font color="#E5E5E5"> graph is the points that we try to</font>

249
00:09:08,160 --> 00:09:11,129
<font color="#E5E5E5">push it all</font><font color="#CCCCCC"> the way up so these are the</font>

250
00:09:09,839 --> 00:09:14,160
what we<font color="#E5E5E5"> have actually measured from</font>

251
00:09:11,129 --> 00:09:17,420
<font color="#E5E5E5">there as we can see from this graph</font><font color="#CCCCCC"> two</font>

252
00:09:14,160 --> 00:09:20,279
<font color="#E5E5E5">things are actually appearing here one</font>

253
00:09:17,420 --> 00:09:22,709
there are really no safeguard limits in

254
00:09:20,279 --> 00:09:25,110
the<font color="#E5E5E5"> hardware regulators here despite</font>

255
00:09:22,709 --> 00:09:27,449
what the the vendors<font color="#CCCCCC"> they're</font><font color="#E5E5E5"> advertised</font>

256
00:09:25,110 --> 00:09:30,120
here<font color="#CCCCCC"> and two when we</font><font color="#E5E5E5"> reduce the</font><font color="#CCCCCC"> voltage</font>

257
00:09:27,449 --> 00:09:32,699
this<font color="#E5E5E5"> also</font><font color="#CCCCCC"> reduces the minimum frequency</font>

258
00:09:30,120 --> 00:09:35,160
<font color="#E5E5E5">we need to get some kind of instability</font>

259
00:09:32,699 --> 00:09:36,628
on<font color="#CCCCCC"> the phone</font><font color="#E5E5E5"> so all these things starts</font>

260
00:09:35,160 --> 00:09:38,219
to get really<font color="#CCCCCC"> interesting and more</font>

261
00:09:36,629 --> 00:09:39,899
<font color="#E5E5E5">interesting we</font><font color="#CCCCCC"> tried on different</font><font color="#E5E5E5"> kind</font>

262
00:09:38,220 --> 00:09:41,339
<font color="#E5E5E5">of phones and besides the Nexus 6 we</font>

263
00:09:39,899 --> 00:09:44,519
also found<font color="#CCCCCC"> similar behaviors in the</font>

264
00:09:41,339 --> 00:09:45,720
other devices now that<font color="#CCCCCC"> we know</font><font color="#E5E5E5"> that we</font>

265
00:09:44,519 --> 00:09:47,579
can<font color="#CCCCCC"> change the frequency</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> voltage</font>

266
00:09:45,720 --> 00:09:49,589
with no limits the next thing we<font color="#E5E5E5"> want to</font>

267
00:09:47,579 --> 00:09:52,290
access<font color="#E5E5E5"> here is how dangerous</font><font color="#CCCCCC"> is it</font><font color="#E5E5E5"> is on</font>

268
00:09:49,589 --> 00:09:53,879
the commodity devices as we all know

269
00:09:52,290 --> 00:09:55,740
like arm devices comes with the

270
00:09:53,879 --> 00:09:58,500
<font color="#CCCCCC">transient technology that isolate</font>

271
00:09:55,740 --> 00:10:00,420
<font color="#CCCCCC">trusting execution environment we can</font>

272
00:09:58,500 --> 00:10:02,759
perhaps<font color="#E5E5E5"> affect the</font><font color="#CCCCCC"> frequency and voltage</font>

273
00:10:00,420 --> 00:10:03,719
<font color="#CCCCCC">wow the transient code is</font><font color="#E5E5E5"> running and</font>

274
00:10:02,759 --> 00:10:07,379
maybe<font color="#E5E5E5"> you can do something interesting</font>

275
00:10:03,720 --> 00:10:11,040
<font color="#E5E5E5">over there so this is a simplified view</font>

276
00:10:07,379 --> 00:10:12,269
of<font color="#CCCCCC"> at razón and enable</font><font color="#E5E5E5"> our arm core so</font>

277
00:10:11,040 --> 00:10:15,180
basically what<font color="#E5E5E5"> trustzone</font>

278
00:10:12,269 --> 00:10:17,790
does is that it isolates the trusted

279
00:10:15,180 --> 00:10:21,719
code<font color="#E5E5E5"> on</font><font color="#CCCCCC"> on the left from the untrusted</font>

280
00:10:17,790 --> 00:10:24,029
<font color="#CCCCCC">code on the right</font><font color="#E5E5E5"> and in our research we</font>

281
00:10:21,720 --> 00:10:26,100
<font color="#CCCCCC">found</font><font color="#E5E5E5"> that the underlying regulators the</font>

282
00:10:24,029 --> 00:10:29,339
operator crosses the security boundaries

283
00:10:26,100 --> 00:10:31,110
<font color="#E5E5E5">both the trust own code and the normal</font>

284
00:10:29,339 --> 00:10:32,610
untrusted code they share the<font color="#CCCCCC"> same</font>

285
00:10:31,110 --> 00:10:34,500
frequency<font color="#E5E5E5"> and the voltage regulators</font>

286
00:10:32,610 --> 00:10:37,139
that<font color="#CCCCCC"> you have in the core</font><font color="#E5E5E5"> so when the</font>

287
00:10:34,500 --> 00:10:39,300
untrusted<font color="#CCCCCC"> code changes the frequency and</font>

288
00:10:37,139 --> 00:10:41,399
<font color="#E5E5E5">the voltages are of the</font><font color="#CCCCCC"> regulator's it</font>

289
00:10:39,300 --> 00:10:43,979
also<font color="#E5E5E5"> affects the the the execution of</font>

290
00:10:41,399 --> 00:10:45,899
the trusted code within<font color="#E5E5E5"> the</font><font color="#CCCCCC"> terrazzo</font><font color="#E5E5E5"> so</font>

291
00:10:43,980 --> 00:10:48,000
now we know we can affect the execution

292
00:10:45,899 --> 00:10:50,629
of the transient code from outside<font color="#CCCCCC"> Tran</font>

293
00:10:48,000 --> 00:10:53,249
<font color="#CCCCCC">so</font><font color="#E5E5E5"> next about the actual attack</font>

294
00:10:50,629 --> 00:10:54,809
<font color="#E5E5E5">ultimately</font><font color="#CCCCCC"> one we want to</font><font color="#E5E5E5"> ask can</font><font color="#CCCCCC"> we</font>

295
00:10:53,249 --> 00:10:57,120
actually attack<font color="#CCCCCC"> the</font><font color="#E5E5E5"> trans own code</font>

296
00:10:54,809 --> 00:10:59,189
execution<font color="#E5E5E5"> from outside trust zone using</font>

297
00:10:57,120 --> 00:11:01,980
<font color="#E5E5E5">purely software only control the</font>

298
00:10:59,189 --> 00:11:03,629
<font color="#CCCCCC">regulator's the idea is to push the</font>

299
00:11:01,980 --> 00:11:05,459
frequency and the<font color="#CCCCCC"> voltage</font><font color="#E5E5E5"> past the</font>

300
00:11:03,629 --> 00:11:06,990
operating points and<font color="#CCCCCC"> in do</font>

301
00:11:05,459 --> 00:11:09,569
some kind of like timing<font color="#CCCCCC"> faults in there</font>

302
00:11:06,990 --> 00:11:12,629
<font color="#E5E5E5">so ultimately you</font><font color="#CCCCCC"> want</font><font color="#E5E5E5"> to break the</font>

303
00:11:09,569 --> 00:11:14,189
confidentiality<font color="#E5E5E5"> and integrity guarantees</font>

304
00:11:12,629 --> 00:11:15,660
of trans owned note that we<font color="#CCCCCC"> are not</font>

305
00:11:14,189 --> 00:11:17,519
<font color="#E5E5E5">trying to do we're</font><font color="#CCCCCC"> not looking at</font>

306
00:11:15,660 --> 00:11:20,850
availability attacks because<font color="#E5E5E5"> they're</font>

307
00:11:17,519 --> 00:11:22,470
<font color="#E5E5E5">trivial to to break over here but before</font>

308
00:11:20,850 --> 00:11:24,209
we<font color="#E5E5E5"> talk about injecting</font><font color="#CCCCCC"> Falls I want to</font>

309
00:11:22,470 --> 00:11:26,490
just give a quick<font color="#CCCCCC"> overview</font><font color="#E5E5E5"> a quick</font>

310
00:11:24,209 --> 00:11:28,498
sketch on why<font color="#E5E5E5"> faults occur on the</font>

311
00:11:26,490 --> 00:11:31,110
<font color="#E5E5E5">systems yeah what happened and</font>

312
00:11:28,499 --> 00:11:32,639
underlying electrical<font color="#CCCCCC"> circuit</font><font color="#E5E5E5"> so now if</font>

313
00:11:31,110 --> 00:11:35,639
<font color="#E5E5E5">you look</font><font color="#CCCCCC"> at the devices</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> have today</font>

314
00:11:32,639 --> 00:11:38,129
are all the digital circuits are made up

315
00:11:35,639 --> 00:11:41,069
of electronic components<font color="#CCCCCC"> and we call</font><font color="#E5E5E5"> it</font>

316
00:11:38,129 --> 00:11:43,589
<font color="#CCCCCC">flip-flops</font><font color="#E5E5E5"> think of them as elements</font>

317
00:11:41,069 --> 00:11:46,589
that hold some kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> state say</font><font color="#CCCCCC"> or the</font>

318
00:11:43,589 --> 00:11:48,929
bit 1 or 0<font color="#E5E5E5"> and each flip-flop has an</font>

319
00:11:46,589 --> 00:11:50,790
input<font color="#E5E5E5"> and output and because there's so</font>

320
00:11:48,929 --> 00:11:54,689
many flip-flops they need<font color="#E5E5E5"> coordinate the</font>

321
00:11:50,790 --> 00:11:57,379
operation<font color="#E5E5E5"> using a</font><font color="#CCCCCC"> common clock so the</font>

322
00:11:54,689 --> 00:12:00,779
flip-flops can only change<font color="#E5E5E5"> the states</font>

323
00:11:57,379 --> 00:12:02,910
<font color="#E5E5E5">together at each clock pulse and there</font>

324
00:12:00,779 --> 00:12:04,290
needs<font color="#E5E5E5"> to flow from one flip-flop to</font><font color="#CCCCCC"> the</font>

325
00:12:02,910 --> 00:12:06,889
<font color="#E5E5E5">next one</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> usually there's some kind</font>

326
00:12:04,290 --> 00:12:09,540
<font color="#CCCCCC">of intermediate path in between so say</font>

327
00:12:06,889 --> 00:12:11,490
we want<font color="#E5E5E5"> to transfer this bit</font><font color="#CCCCCC"> one from</font>

328
00:12:09,540 --> 00:12:13,920
this end<font color="#E5E5E5"> all the</font><font color="#CCCCCC"> way</font><font color="#E5E5E5"> to the other end</font>

329
00:12:11,490 --> 00:12:16,230
<font color="#CCCCCC">and then it</font><font color="#E5E5E5"> actually it takes some time</font>

330
00:12:13,920 --> 00:12:17,790
<font color="#CCCCCC">to propagate the data bit but more</font>

331
00:12:16,230 --> 00:12:19,529
importantly actually<font color="#E5E5E5"> needs to do it</font>

332
00:12:17,790 --> 00:12:21,990
within the consecutive<font color="#E5E5E5"> pulses of the</font>

333
00:12:19,529 --> 00:12:25,769
clock signal<font color="#CCCCCC"> and so there's actually</font><font color="#E5E5E5"> a</font>

334
00:12:21,990 --> 00:12:27,540
hot timing<font color="#CCCCCC"> dateline some sense so now we</font>

335
00:12:25,769 --> 00:12:29,699
want<font color="#E5E5E5"> to transfer the bit</font><font color="#CCCCCC"> 0</font><font color="#E5E5E5"> instead</font><font color="#CCCCCC"> of 1</font>

336
00:12:27,540 --> 00:12:33,179
<font color="#E5E5E5">to the other end so what happens when we</font>

337
00:12:29,699 --> 00:12:35,790
increase<font color="#CCCCCC"> the frequency too much beyond</font>

338
00:12:33,179 --> 00:12:37,740
<font color="#E5E5E5">what the the vendors have actually</font>

339
00:12:35,790 --> 00:12:39,599
advertised<font color="#E5E5E5"> means that the clock pulses</font>

340
00:12:37,740 --> 00:12:41,910
<font color="#CCCCCC">they have to occur more frequently in</font>

341
00:12:39,600 --> 00:12:43,470
<font color="#E5E5E5">the same amount of time and since the</font>

342
00:12:41,910 --> 00:12:45,629
<font color="#CCCCCC">flow</font><font color="#E5E5E5"> of flip-flop changes</font><font color="#CCCCCC"> the states</font>

343
00:12:43,470 --> 00:12:47,939
only<font color="#E5E5E5"> at the pulses this means that the</font>

344
00:12:45,629 --> 00:12:49,559
data have less time<font color="#CCCCCC"> to propagate through</font>

345
00:12:47,939 --> 00:12:51,959
the<font color="#E5E5E5"> intermediate</font><font color="#CCCCCC"> path that they have in</font>

346
00:12:49,559 --> 00:12:54,179
between so as a result<font color="#CCCCCC"> of</font><font color="#E5E5E5"> that the</font>

347
00:12:51,959 --> 00:12:56,459
output is<font color="#CCCCCC"> supposed</font><font color="#E5E5E5"> to be 0 but it</font>

348
00:12:54,179 --> 00:12:58,199
remains as the old value which is 1 and

349
00:12:56,459 --> 00:13:02,128
at a<font color="#CCCCCC"> high level</font><font color="#E5E5E5"> this basically means</font>

350
00:12:58,199 --> 00:13:04,769
that<font color="#E5E5E5"> it it results in a</font><font color="#CCCCCC"> perceived bit</font>

351
00:13:02,129 --> 00:13:06,660
flip of 0 to 1 so this<font color="#E5E5E5"> is essentially</font>

352
00:13:04,769 --> 00:13:10,439
<font color="#E5E5E5">how</font><font color="#CCCCCC"> the fault</font><font color="#E5E5E5"> actually happens in the</font>

353
00:13:06,660 --> 00:13:12,480
<font color="#E5E5E5">context of flip-flops so what are</font><font color="#CCCCCC"> some</font>

354
00:13:10,439 --> 00:13:14,899
<font color="#E5E5E5">of the possible security implications of</font>

355
00:13:12,480 --> 00:13:17,579
inducing<font color="#CCCCCC"> faults</font><font color="#E5E5E5"> using software base</font>

356
00:13:14,899 --> 00:13:19,260
<font color="#E5E5E5">overclocking for example so to get to</font>

357
00:13:17,579 --> 00:13:21,239
<font color="#CCCCCC">get</font><font color="#E5E5E5"> an initial</font><font color="#CCCCCC"> assessment of</font><font color="#E5E5E5"> this</font>

358
00:13:19,260 --> 00:13:23,460
we created<font color="#CCCCCC"> two</font><font color="#E5E5E5"> simple victim programs</font>

359
00:13:21,240 --> 00:13:24,810
just like acceleration and then we use

360
00:13:23,460 --> 00:13:28,560
the tool that<font color="#CCCCCC"> we discussed earlier to</font>

361
00:13:24,810 --> 00:13:29,939
<font color="#E5E5E5">manipulate the frequency and voltage so</font>

362
00:13:28,560 --> 00:13:32,250
now in the<font color="#E5E5E5"> first example</font><font color="#CCCCCC"> we will show</font>

363
00:13:29,940 --> 00:13:35,220
how the control flow of an<font color="#E5E5E5"> actual</font>

364
00:13:32,250 --> 00:13:37,890
program can be influenced so I'm<font color="#CCCCCC"> gonna</font>

365
00:13:35,220 --> 00:13:39,630
<font color="#E5E5E5">show a quick video over here</font><font color="#CCCCCC"> so on</font><font color="#E5E5E5"> the</font>

366
00:13:37,890 --> 00:13:41,730
<font color="#E5E5E5">left here</font><font color="#CCCCCC"> we run our victim program you</font>

367
00:13:39,630 --> 00:13:43,170
can<font color="#E5E5E5"> see it's pin looks for</font><font color="#CCCCCC"> awhile</font><font color="#E5E5E5"> checks</font>

368
00:13:41,730 --> 00:13:45,330
for some conditions and then it fills

369
00:13:43,170 --> 00:13:47,069
the authentication<font color="#E5E5E5"> the expected thing</font><font color="#CCCCCC"> is</font>

370
00:13:45,330 --> 00:13:50,250
the authentication<font color="#CCCCCC"> would be a whitfill</font>

371
00:13:47,070 --> 00:13:52,230
<font color="#E5E5E5">and then after that while it's running</font>

372
00:13:50,250 --> 00:13:54,420
<font color="#E5E5E5">we're gonna run it again and then</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> are</font>

373
00:13:52,230 --> 00:13:56,850
run a code on<font color="#E5E5E5"> the separate</font><font color="#CCCCCC"> core as an</font>

374
00:13:54,420 --> 00:13:59,969
attacker<font color="#CCCCCC"> we change and increase the</font>

375
00:13:56,850 --> 00:14:01,740
frequency all the way up while the cell

376
00:13:59,970 --> 00:14:04,470
during<font color="#E5E5E5"> the second time we run the victim</font>

377
00:14:01,740 --> 00:14:06,780
program and here we see how the the

378
00:14:04,470 --> 00:14:09,540
<font color="#CCCCCC">victim program actually</font><font color="#E5E5E5"> behaves very</font>

379
00:14:06,780 --> 00:14:11,040
differently across while the the<font color="#CCCCCC"> old</font>

380
00:14:09,540 --> 00:14:12,420
<font color="#CCCCCC">clocking actually happens in</font><font color="#E5E5E5"> the first</font>

381
00:14:11,040 --> 00:14:14,969
one<font color="#CCCCCC"> you failed and the second one</font>

382
00:14:12,420 --> 00:14:16,500
actually<font color="#E5E5E5"> passed so the control for the</font>

383
00:14:14,970 --> 00:14:19,560
<font color="#E5E5E5">program was actually influenced in this</font>

384
00:14:16,500 --> 00:14:20,820
case in the second example<font color="#CCCCCC"> we want</font><font color="#E5E5E5"> to</font>

385
00:14:19,560 --> 00:14:21,949
show how overclocking can cause

386
00:14:20,820 --> 00:14:25,290
<font color="#E5E5E5">arithmatic</font>

387
00:14:21,950 --> 00:14:27,840
<font color="#E5E5E5">computation to create to produce</font><font color="#CCCCCC"> error</font>

388
00:14:25,290 --> 00:14:30,300
<font color="#E5E5E5">errors so on the left here</font><font color="#CCCCCC"> we have our</font>

389
00:14:27,840 --> 00:14:32,100
victim<font color="#E5E5E5"> program</font><font color="#CCCCCC"> we're gonna run</font><font color="#E5E5E5"> it as you</font>

390
00:14:30,300 --> 00:14:33,810
<font color="#E5E5E5">can run a couple of computation</font>

391
00:14:32,100 --> 00:14:37,950
mathematic computation<font color="#CCCCCC"> it should return</font>

392
00:14:33,810 --> 00:14:40,560
the numbers<font color="#E5E5E5"> 0</font><font color="#CCCCCC"> 1 & 2 we're</font><font color="#E5E5E5"> gonna run it</font>

393
00:14:37,950 --> 00:14:44,090
again<font color="#E5E5E5"> do the overclocking which is</font><font color="#CCCCCC"> wait</font>

394
00:14:40,560 --> 00:14:44,089
for<font color="#CCCCCC"> a while</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> see what happens so</font>

395
00:14:46,040 --> 00:14:51,270
<font color="#CCCCCC">we're supposed</font><font color="#E5E5E5"> to be expecting 0 1 & 2</font>

396
00:14:49,410 --> 00:14:53,339
I'm not<font color="#CCCCCC"> sure</font><font color="#E5E5E5"> whether</font><font color="#CCCCCC"> it's a pretty</font>

397
00:14:51,270 --> 00:14:56,160
<font color="#CCCCCC">visible here but we supposed to</font><font color="#E5E5E5"> expect 1</font>

398
00:14:53,340 --> 00:14:58,590
<font color="#E5E5E5">0 1 2 but for when we overclock the</font>

399
00:14:56,160 --> 00:15:01,770
<font color="#E5E5E5">thing the first number</font><font color="#CCCCCC"> that came out for</font>

400
00:14:58,590 --> 00:15:03,450
that would<font color="#CCCCCC"> be an invalid number</font><font color="#E5E5E5"> so by</font>

401
00:15:01,770 --> 00:15:04,980
using overclocking you can<font color="#CCCCCC"> actually</font>

402
00:15:03,450 --> 00:15:06,930
influence<font color="#E5E5E5"> the deal flow as well as the</font>

403
00:15:04,980 --> 00:15:10,740
corruption<font color="#E5E5E5"> of the the data that's been</font>

404
00:15:06,930 --> 00:15:13,140
computed from the unit so what we have

405
00:15:10,740 --> 00:15:14,610
earlier<font color="#CCCCCC"> is a very simple programs</font>

406
00:15:13,140 --> 00:15:15,900
unfortunately program any programs that

407
00:15:14,610 --> 00:15:18,270
you want to attack they're more

408
00:15:15,900 --> 00:15:20,100
complicated<font color="#CCCCCC"> and we were playing around</font>

409
00:15:18,270 --> 00:15:22,140
<font color="#E5E5E5">this and we realize that to pull it off</font>

410
00:15:20,100 --> 00:15:24,770
to<font color="#E5E5E5"> put into</font><font color="#CCCCCC"> a pool of</font><font color="#E5E5E5"> the inducing a</font>

411
00:15:22,140 --> 00:15:26,970
fault<font color="#E5E5E5"> in an actual self-contained device</font>

412
00:15:24,770 --> 00:15:28,740
entirely from software<font color="#E5E5E5"> is actually very</font>

413
00:15:26,970 --> 00:15:30,450
<font color="#CCCCCC">very challenging so</font><font color="#E5E5E5"> these are some of</font>

414
00:15:28,740 --> 00:15:32,220
<font color="#E5E5E5">the</font><font color="#CCCCCC"> challenges we have to we have to</font>

415
00:15:30,450 --> 00:15:33,990
<font color="#E5E5E5">overcome we outlined</font><font color="#CCCCCC"> some</font>

416
00:15:32,220 --> 00:15:37,890
<font color="#CCCCCC">this challenges and briefly sketch how</font>

417
00:15:33,990 --> 00:15:39,300
we<font color="#E5E5E5"> address them so for one over</font><font color="#CCCCCC"> cocky</font>

418
00:15:37,890 --> 00:15:42,240
requires being able to set the frequency

419
00:15:39,300 --> 00:15:43,410
<font color="#E5E5E5">way past</font><font color="#CCCCCC"> this suggested value and we</font>

420
00:15:42,240 --> 00:15:45,840
<font color="#E5E5E5">have seen earlier</font><font color="#CCCCCC"> that the hardware</font>

421
00:15:43,410 --> 00:15:48,150
regulators they have no limits<font color="#E5E5E5"> based on</font>

422
00:15:45,840 --> 00:15:52,200
our earlier exploration in fact<font color="#E5E5E5"> any</font>

423
00:15:48,150 --> 00:15:54,300
operating points are above<font color="#E5E5E5"> the blue dots</font>

424
00:15:52,200 --> 00:15:56,670
over<font color="#E5E5E5"> there in the graph</font><font color="#CCCCCC"> it's a possible</font>

425
00:15:54,300 --> 00:16:01,199
candidate that we can use<font color="#E5E5E5"> for the attack</font>

426
00:15:56,670 --> 00:16:03,150
<font color="#CCCCCC">and the both</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> attack</font><font color="#E5E5E5"> and the victim</font>

427
00:16:01,200 --> 00:16:05,820
courts have to<font color="#E5E5E5"> execute on the same</font>

428
00:16:03,150 --> 00:16:08,340
device<font color="#CCCCCC"> so how do we</font><font color="#E5E5E5"> prevent the attack</font>

429
00:16:05,820 --> 00:16:10,380
<font color="#CCCCCC">code from attacking itself</font><font color="#E5E5E5"> or attacking</font>

430
00:16:08,340 --> 00:16:12,660
something<font color="#E5E5E5"> some other non victim code</font>

431
00:16:10,380 --> 00:16:14,430
that we don't want to attack at all so

432
00:16:12,660 --> 00:16:16,560
for this we exploit the emerging trend

433
00:16:14,430 --> 00:16:18,060
where<font color="#CCCCCC"> energy management</font><font color="#E5E5E5"> techniques are</font>

434
00:16:16,560 --> 00:16:20,699
the mechanisms are getting more<font color="#E5E5E5"> and more</font>

435
00:16:18,060 --> 00:16:22,500
<font color="#E5E5E5">fine-grain so many devices such as the</font>

436
00:16:20,700 --> 00:16:25,530
one that we attack have separate

437
00:16:22,500 --> 00:16:28,410
frequency regulators on on the core<font color="#E5E5E5"> so</font>

438
00:16:25,530 --> 00:16:29,939
with that in<font color="#CCCCCC"> mind we weep in the the</font>

439
00:16:28,410 --> 00:16:32,219
<font color="#CCCCCC">threat execution of the attack and the</font>

440
00:16:29,940 --> 00:16:34,200
victim codes<font color="#CCCCCC"> to separate course</font><font color="#E5E5E5"> and this</font>

441
00:16:32,220 --> 00:16:35,970
helps<font color="#E5E5E5"> to isolate the the effects of the</font>

442
00:16:34,200 --> 00:16:40,170
fault injection<font color="#CCCCCC"> just to the victim</font>

443
00:16:35,970 --> 00:16:42,030
<font color="#E5E5E5">threat that we want and the environment</font>

444
00:16:40,170 --> 00:16:44,969
that<font color="#E5E5E5"> we attacking is in the is a complex</font>

445
00:16:42,030 --> 00:16:48,089
full OS and to deal with<font color="#CCCCCC"> that carefully</font>

446
00:16:44,970 --> 00:16:49,650
<font color="#E5E5E5">design the attack to disable the the</font>

447
00:16:48,090 --> 00:16:51,960
interrupts during the<font color="#E5E5E5"> window of the</font>

448
00:16:49,650 --> 00:16:53,819
attack so a couple<font color="#CCCCCC"> with</font><font color="#E5E5E5"> Corpening this</font>

449
00:16:51,960 --> 00:16:57,360
reduced a lot<font color="#E5E5E5"> of noise during our attack</font>

450
00:16:53,820 --> 00:16:59,400
and finally for many attack scenarios we

451
00:16:57,360 --> 00:17:00,870
need very very<font color="#E5E5E5"> precise timing as to when</font>

452
00:16:59,400 --> 00:17:03,480
the fault

453
00:17:00,870 --> 00:17:05,430
should be in fact injected and for how

454
00:17:03,480 --> 00:17:07,290
long<font color="#CCCCCC"> so we need</font><font color="#E5E5E5"> very fine-grained</font><font color="#CCCCCC"> timing</font>

455
00:17:05,430 --> 00:17:10,740
resolutions<font color="#E5E5E5"> so for example to give a</font>

456
00:17:07,290 --> 00:17:12,899
sense of like the difficulty<font color="#E5E5E5"> in one of</font>

457
00:17:10,740 --> 00:17:16,099
<font color="#E5E5E5">our attack scenarios we have to inject a</font>

458
00:17:12,900 --> 00:17:19,560
fault<font color="#E5E5E5"> within a small window of</font><font color="#CCCCCC"> about</font>

459
00:17:16,099 --> 00:17:21,149
<font color="#E5E5E5">65,000 clock cycles within</font><font color="#CCCCCC"> an entire</font>

460
00:17:19,560 --> 00:17:23,310
victim<font color="#CCCCCC"> threat execution that actually</font>

461
00:17:21,150 --> 00:17:24,540
takes about 1.1 billion clock cycles<font color="#E5E5E5"> so</font>

462
00:17:23,310 --> 00:17:27,240
<font color="#E5E5E5">that is the skill that</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> are actually</font>

463
00:17:24,540 --> 00:17:29,850
<font color="#E5E5E5">looking at so for timing resolution we</font>

464
00:17:27,240 --> 00:17:32,490
rely on assembly level<font color="#CCCCCC"> are</font><font color="#E5E5E5"> no</font><font color="#CCCCCC"> ops loops</font>

465
00:17:29,850 --> 00:17:33,990
for high precision<font color="#E5E5E5"> timing delays and to</font>

466
00:17:32,490 --> 00:17:36,690
guide the timing of the fault delivery

467
00:17:33,990 --> 00:17:38,790
we rely on cache side-channel<font color="#CCCCCC"> base</font>

468
00:17:36,690 --> 00:17:43,470
<font color="#E5E5E5">profiling techniques so more about that</font>

469
00:17:38,790 --> 00:17:46,139
<font color="#CCCCCC">later</font><font color="#E5E5E5"> so now for the attacks we explore</font>

470
00:17:43,470 --> 00:17:48,870
two attacks here<font color="#CCCCCC"> in the first attack</font>

471
00:17:46,140 --> 00:17:51,240
we break<font color="#E5E5E5"> confidentiality by inferring</font>

472
00:17:48,870 --> 00:17:54,330
<font color="#CCCCCC">the secret</font><font color="#E5E5E5"> AES key data stored in trans</font>

473
00:17:51,240 --> 00:17:54,929
oh and in<font color="#E5E5E5"> the second attack</font><font color="#CCCCCC"> we show</font><font color="#E5E5E5"> how</font>

474
00:17:54,330 --> 00:17:57,330
<font color="#CCCCCC">trustzone</font>

475
00:17:54,929 --> 00:18:00,390
how<font color="#CCCCCC"> clocks crew can</font><font color="#E5E5E5"> tricked resume into</font>

476
00:17:57,330 --> 00:18:04,080
loading a<font color="#E5E5E5"> self-signed application so</font>

477
00:18:00,390 --> 00:18:06,900
<font color="#CCCCCC">let's talk about the first</font><font color="#E5E5E5"> attack so the</font>

478
00:18:04,080 --> 00:18:08,370
frame model is this<font color="#E5E5E5"> we have</font><font color="#CCCCCC"> an aes</font>

479
00:18:06,900 --> 00:18:10,830
decryption application that's running

480
00:18:08,370 --> 00:18:12,659
within<font color="#CCCCCC"> truss though</font><font color="#E5E5E5"> it uses</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> secret key</font>

481
00:18:10,830 --> 00:18:14,909
that<font color="#E5E5E5"> cannot be accessed from the non</font>

482
00:18:12,660 --> 00:18:17,400
secure normal world now the attacker

483
00:18:14,910 --> 00:18:19,559
wants to extract this secret key out

484
00:18:17,400 --> 00:18:21,240
from<font color="#CCCCCC"> trussel and we assume that</font><font color="#E5E5E5"> the</font>

485
00:18:19,559 --> 00:18:23,940
attacker<font color="#CCCCCC"> outside razón can repeatedly</font>

486
00:18:21,240 --> 00:18:26,490
<font color="#CCCCCC">invoke this decryption application and</font>

487
00:18:23,940 --> 00:18:28,950
we assume that the attacker has<font color="#E5E5E5"> software</font>

488
00:18:26,490 --> 00:18:31,919
access to the hub regulators so he can

489
00:18:28,950 --> 00:18:35,280
actually inject this fault<font color="#E5E5E5"> during the</font>

490
00:18:31,919 --> 00:18:37,140
decryption operation so what we want<font color="#E5E5E5"> to</font>

491
00:18:35,280 --> 00:18:39,030
do is this in<font color="#E5E5E5"> this attack</font><font color="#CCCCCC"> Isis we want</font>

492
00:18:37,140 --> 00:18:41,010
to induce the fault<font color="#E5E5E5"> while the AES</font>

493
00:18:39,030 --> 00:18:42,990
decryption is happening within<font color="#CCCCCC"> trustzone</font>

494
00:18:41,010 --> 00:18:44,730
and here we show<font color="#CCCCCC"> an expected operation</font>

495
00:18:42,990 --> 00:18:47,970
where we<font color="#E5E5E5"> get the correct plaintext from</font>

496
00:18:44,730 --> 00:18:50,299
the decryption so now we will invoke<font color="#CCCCCC"> the</font>

497
00:18:47,970 --> 00:18:53,429
decryption<font color="#E5E5E5"> operation again but this time</font>

498
00:18:50,299 --> 00:18:56,520
<font color="#E5E5E5">we will induce a timing fault at the</font>

499
00:18:53,429 --> 00:18:59,280
decryption level to result in the faulty

500
00:18:56,520 --> 00:19:01,980
plaintext and then using this pair of

501
00:18:59,280 --> 00:19:04,410
<font color="#E5E5E5">correct and faulty plaintext we can run</font>

502
00:19:01,980 --> 00:19:05,850
a technique which we call<font color="#CCCCCC"> Herbie who is</font>

503
00:19:04,410 --> 00:19:07,890
<font color="#CCCCCC">well known tackier using like a</font>

504
00:19:05,850 --> 00:19:10,530
differential fault analysis that<font color="#E5E5E5"> allows</font>

505
00:19:07,890 --> 00:19:13,880
<font color="#CCCCCC">us</font><font color="#E5E5E5"> to infer the secret key or based on</font>

506
00:19:10,530 --> 00:19:16,168
<font color="#E5E5E5">this pair</font><font color="#CCCCCC"> of correct</font><font color="#E5E5E5"> and faulty print X</font>

507
00:19:13,880 --> 00:19:19,110
so to induce the timing fault to the

508
00:19:16,169 --> 00:19:20,669
<font color="#E5E5E5">decryption execution there are these are</font>

509
00:19:19,110 --> 00:19:22,770
<font color="#E5E5E5">some</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the parameters that</font><font color="#CCCCCC"> we use for</font>

510
00:19:20,669 --> 00:19:24,990
the attacks<font color="#CCCCCC"> the hardest part of the</font>

511
00:19:22,770 --> 00:19:27,660
attack is to figure<font color="#E5E5E5"> out how to inject a</font>

512
00:19:24,990 --> 00:19:30,410
<font color="#CCCCCC">one-bite</font><font color="#E5E5E5"> fault to the seventh eight</font>

513
00:19:27,660 --> 00:19:33,030
years<font color="#CCCCCC"> around</font><font color="#E5E5E5"> during the the decryption</font>

514
00:19:30,410 --> 00:19:35,760
so very<font color="#E5E5E5"> briefly on</font><font color="#CCCCCC"> how the differential</font>

515
00:19:33,030 --> 00:19:38,129
for analysis work<font color="#CCCCCC"> are by corrupting the</font>

516
00:19:35,760 --> 00:19:38,970
first<font color="#CCCCCC"> one one byte in the</font><font color="#E5E5E5"> seventh a year</font>

517
00:19:38,130 --> 00:19:41,160
<font color="#E5E5E5">round</font>

518
00:19:38,970 --> 00:19:43,380
this introduces a fall into the<font color="#CCCCCC"> fás</font>

519
00:19:41,160 --> 00:19:44,940
round key so this<font color="#E5E5E5"> diagram shows</font><font color="#CCCCCC"> how this</font>

520
00:19:43,380 --> 00:19:47,669
fault<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> probably is through like</font>

521
00:19:44,940 --> 00:19:50,309
the remaining<font color="#E5E5E5"> AES rounds ultimately at</font>

522
00:19:47,669 --> 00:19:51,690
the<font color="#E5E5E5"> end</font><font color="#CCCCCC"> of it</font><font color="#E5E5E5"> what we'll get is a system</font>

523
00:19:50,309 --> 00:19:53,370
of equation basically<font color="#CCCCCC"> a set of</font>

524
00:19:51,690 --> 00:19:56,610
<font color="#E5E5E5">constraints that we can use to reduce</font>

525
00:19:53,370 --> 00:19:59,809
the key search space you can check out

526
00:19:56,610 --> 00:20:02,309
the code at the following link over<font color="#CCCCCC"> here</font>

527
00:19:59,809 --> 00:20:04,110
so luckily<font color="#E5E5E5"> we can also profile the</font>

528
00:20:02,309 --> 00:20:06,870
execution timing of the<font color="#E5E5E5"> trans</font><font color="#CCCCCC"> old code</font>

529
00:20:04,110 --> 00:20:08,699
<font color="#E5E5E5">using hardware</font><font color="#CCCCCC"> hardware cycle counters</font>

530
00:20:06,870 --> 00:20:10,949
<font color="#E5E5E5">so</font><font color="#CCCCCC"> even when we are</font><font color="#E5E5E5"> actually outside</font>

531
00:20:08,700 --> 00:20:13,740
<font color="#E5E5E5">resume we can access</font><font color="#CCCCCC"> that this allows us</font>

532
00:20:10,950 --> 00:20:15,779
<font color="#CCCCCC">to</font><font color="#E5E5E5"> perform timing profiles of the</font>

533
00:20:13,740 --> 00:20:18,690
profiling<font color="#E5E5E5"> of the victim applications</font>

534
00:20:15,779 --> 00:20:21,120
from outside trans own so the first

535
00:20:18,690 --> 00:20:23,250
question we<font color="#CCCCCC"> ask</font><font color="#E5E5E5"> is this how long does</font>

536
00:20:21,120 --> 00:20:25,139
the decryption<font color="#E5E5E5"> operation actually takes</font>

537
00:20:23,250 --> 00:20:26,789
does it vary from run to run because if

538
00:20:25,140 --> 00:20:29,370
it changes too much<font color="#CCCCCC"> we're going to have</font>

539
00:20:26,789 --> 00:20:31,408
a tough time<font color="#CCCCCC"> injecting the fault to</font>

540
00:20:29,370 --> 00:20:34,260
wherever we want<font color="#CCCCCC"> so here we plot a</font>

541
00:20:31,409 --> 00:20:37,200
histogram<font color="#CCCCCC"> of the execution time of</font><font color="#E5E5E5"> the</font>

542
00:20:34,260 --> 00:20:38,908
decryption<font color="#E5E5E5"> we see that more than 80% of</font>

543
00:20:37,200 --> 00:20:40,590
<font color="#E5E5E5">the invocation actually takes between</font>

544
00:20:38,909 --> 00:20:42,570
<font color="#E5E5E5">eight hundred nine hundred thousand</font>

545
00:20:40,590 --> 00:20:45,199
<font color="#CCCCCC">score cycle so in terms of</font><font color="#E5E5E5"> execution</font>

546
00:20:42,570 --> 00:20:47,879
<font color="#CCCCCC">time there's not much variability and</font>

547
00:20:45,200 --> 00:20:49,860
that's on the attacker side of things we

548
00:20:47,880 --> 00:20:52,770
call that<font color="#CCCCCC"> we're using</font><font color="#E5E5E5"> the number of no</font>

549
00:20:49,860 --> 00:20:55,080
<font color="#CCCCCC">op loops</font><font color="#E5E5E5"> to time the delivery of the</font>

550
00:20:52,770 --> 00:20:57,210
default so is<font color="#E5E5E5"> this an accurate a proxy</font>

551
00:20:55,080 --> 00:20:58,740
<font color="#E5E5E5">that we use to control the timing</font><font color="#CCCCCC"> so</font>

552
00:20:57,210 --> 00:21:01,340
here we plot the number<font color="#E5E5E5"> of norm loops</font>

553
00:20:58,740 --> 00:21:03,809
that we use before<font color="#E5E5E5"> the fault injection</font>

554
00:21:01,340 --> 00:21:06,330
<font color="#CCCCCC">against the execution duration of the</font>

555
00:21:03,809 --> 00:21:08,428
attack<font color="#CCCCCC"> field threat</font><font color="#E5E5E5"> and we see a clear</font>

556
00:21:06,330 --> 00:21:09,870
predictable linear trend here<font color="#E5E5E5"> so this</font>

557
00:21:08,429 --> 00:21:11,730
parameter<font color="#E5E5E5"> that we use for the fault</font>

558
00:21:09,870 --> 00:21:14,699
injection is actually a<font color="#E5E5E5"> good proxy or</font>

559
00:21:11,730 --> 00:21:17,520
for us<font color="#E5E5E5"> to time when we do the fault</font>

560
00:21:14,700 --> 00:21:20,309
injection<font color="#E5E5E5"> so our differential for</font>

561
00:21:17,520 --> 00:21:22,440
analysis requires our<font color="#CCCCCC"> fault model to</font>

562
00:21:20,309 --> 00:21:25,168
<font color="#E5E5E5">achieve two things we need to exactly</font>

563
00:21:22,440 --> 00:21:27,809
<font color="#E5E5E5">corrupt only one</font><font color="#CCCCCC"> byte in the</font><font color="#E5E5E5"> seventh AES</font>

564
00:21:25,169 --> 00:21:30,990
<font color="#E5E5E5">realm now we value help resolve that is</font>

565
00:21:27,809 --> 00:21:35,250
and how like we can we inject<font color="#CCCCCC"> the</font><font color="#E5E5E5"> for in</font>

566
00:21:30,990 --> 00:21:37,860
exactly one<font color="#CCCCCC"> a year round</font><font color="#E5E5E5"> here we</font><font color="#CCCCCC"> plot a</font>

567
00:21:35,250 --> 00:21:40,169
frequency<font color="#E5E5E5"> histogram of the</font><font color="#CCCCCC"> number</font><font color="#E5E5E5"> of AES</font>

568
00:21:37,860 --> 00:21:42,539
round<font color="#E5E5E5"> where the default actually occurs</font>

569
00:21:40,169 --> 00:21:44,460
and we see that more<font color="#E5E5E5"> than 60% of</font><font color="#CCCCCC"> the</font>

570
00:21:42,539 --> 00:21:46,679
resulting force here are precise<font color="#CCCCCC"> enough</font>

571
00:21:44,460 --> 00:21:50,130
to<font color="#E5E5E5"> affect exactly one</font><font color="#CCCCCC"> round so</font>

572
00:21:46,679 --> 00:21:52,559
<font color="#CCCCCC">essentially we have we have quite a good</font>

573
00:21:50,130 --> 00:21:54,570
success rate to<font color="#E5E5E5"> that</font><font color="#CCCCCC"> on in terms of</font>

574
00:21:52,559 --> 00:21:57,149
transients how<font color="#E5E5E5"> likely can we corrupt as</font>

575
00:21:54,570 --> 00:21:59,158
<font color="#E5E5E5">a</font><font color="#CCCCCC"> tree just one bite</font><font color="#E5E5E5"> here we plot the</font>

576
00:21:57,149 --> 00:22:01,739
frequency frequency histogram of the

577
00:21:59,159 --> 00:22:04,230
number<font color="#CCCCCC"> of corrupted</font><font color="#E5E5E5"> bytes</font><font color="#CCCCCC"> when one AES</font>

578
00:22:01,740 --> 00:22:06,899
<font color="#CCCCCC">row is</font><font color="#E5E5E5"> actually a fault</font><font color="#CCCCCC"> we see that all</font>

579
00:22:04,230 --> 00:22:08,580
<font color="#CCCCCC">of the</font><font color="#E5E5E5"> before that</font><font color="#CCCCCC"> affect one row</font><font color="#E5E5E5"> more</font>

580
00:22:06,899 --> 00:22:11,250
<font color="#E5E5E5">than half actually trans in enough to</font>

581
00:22:08,580 --> 00:22:15,000
<font color="#E5E5E5">corrupt is aptly one byte</font>

582
00:22:11,250 --> 00:22:17,370
yep so we end up<font color="#CCCCCC"> with</font><font color="#E5E5E5"> and this versa</font>

583
00:22:15,000 --> 00:22:19,740
<font color="#E5E5E5">attack with a summary of the results for</font>

584
00:22:17,370 --> 00:22:21,299
<font color="#CCCCCC">this</font><font color="#E5E5E5"> attack this that is evident that we</font>

585
00:22:19,740 --> 00:22:23,309
can actually<font color="#CCCCCC"> control the</font><font color="#E5E5E5"> note in</font><font color="#CCCCCC"> the OP</font>

586
00:22:21,299 --> 00:22:24,690
loops<font color="#E5E5E5"> before</font><font color="#CCCCCC"> the fault delivery yeah</font>

587
00:22:23,309 --> 00:22:26,639
if<font color="#E5E5E5"> this allows</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> to precisely time</font>

588
00:22:24,690 --> 00:22:28,799
<font color="#CCCCCC">Graham you want to do this</font><font color="#E5E5E5"> so it takes</font>

589
00:22:26,640 --> 00:22:31,470
roughly about training attempts<font color="#E5E5E5"> to</font>

590
00:22:28,799 --> 00:22:33,658
induce a<font color="#CCCCCC"> one-bite fault</font><font color="#E5E5E5"> to the desire is</font>

591
00:22:31,470 --> 00:22:36,090
<font color="#E5E5E5">wrong so subsequently then once we have</font>

592
00:22:33,659 --> 00:22:37,500
the faulty and<font color="#E5E5E5"> the correct</font><font color="#CCCCCC"> of Intex</font><font color="#E5E5E5"> we</font>

593
00:22:36,090 --> 00:22:39,240
can conduct<font color="#CCCCCC"> differential foreign</font>

594
00:22:37,500 --> 00:22:43,710
analysis takes roughly about<font color="#CCCCCC"> 12 minutes</font>

595
00:22:39,240 --> 00:22:45,059
<font color="#E5E5E5">to get about</font><font color="#CCCCCC"> 3,600 key hypothesis after</font>

596
00:22:43,710 --> 00:22:47,850
<font color="#CCCCCC">that we can just brute force for the</font>

597
00:22:45,059 --> 00:22:53,668
correct key<font color="#E5E5E5"> and now for the second</font>

598
00:22:47,850 --> 00:22:56,820
attack now in<font color="#E5E5E5"> this a second attack we</font>

599
00:22:53,669 --> 00:22:59,610
want to attack the RSA signature

600
00:22:56,820 --> 00:23:00,090
verification<font color="#E5E5E5"> routine within the trust</font>

601
00:22:59,610 --> 00:23:02,729
zone

602
00:23:00,090 --> 00:23:04,230
from where<font color="#E5E5E5"> so on an actual phone the</font>

603
00:23:02,730 --> 00:23:05,400
apps running<font color="#E5E5E5"> within trust zone are</font>

604
00:23:04,230 --> 00:23:07,799
basically building<font color="#E5E5E5"> blocks for like</font>

605
00:23:05,400 --> 00:23:11,010
security so this apps are loaded<font color="#E5E5E5"> at</font>

606
00:23:07,799 --> 00:23:13,350
runtime from<font color="#E5E5E5"> binary blob files you can</font>

607
00:23:11,010 --> 00:23:15,390
find from the the firmware<font color="#E5E5E5"> and each of</font>

608
00:23:13,350 --> 00:23:17,760
the app binary block files actually

609
00:23:15,390 --> 00:23:20,940
<font color="#E5E5E5">comes with</font><font color="#CCCCCC"> a certificate chain of</font>

610
00:23:17,760 --> 00:23:22,590
digital images that ultimately the<font color="#CCCCCC"> etre</font>

611
00:23:20,940 --> 00:23:25,530
<font color="#CCCCCC">own OS</font><font color="#E5E5E5"> would use to</font><font color="#CCCCCC"> verify the</font>

612
00:23:22,590 --> 00:23:27,389
authenticity of the<font color="#CCCCCC"> app file just before</font>

613
00:23:25,530 --> 00:23:30,570
loading<font color="#E5E5E5"> a thing</font><font color="#CCCCCC"> so if it fails it won't</font>

614
00:23:27,390 --> 00:23:34,409
look<font color="#CCCCCC"> that so here's our threat model for</font>

615
00:23:30,570 --> 00:23:37,230
the attack scenario<font color="#E5E5E5"> it's an attacker we</font>

616
00:23:34,409 --> 00:23:39,780
want to trick the app loading routine<font color="#E5E5E5"> to</font>

617
00:23:37,230 --> 00:23:41,880
accept a self-signed binary that we

618
00:23:39,780 --> 00:23:44,639
<font color="#E5E5E5">created and we</font><font color="#CCCCCC"> assume that the attacker</font>

619
00:23:41,880 --> 00:23:48,299
can repeatedly<font color="#E5E5E5"> invoke the trans own to</font>

620
00:23:44,640 --> 00:23:49,409
load an application file<font color="#CCCCCC"> and clearly we</font>

621
00:23:48,299 --> 00:23:50,970
need<font color="#CCCCCC"> to have software</font><font color="#E5E5E5"> access to the</font>

622
00:23:49,409 --> 00:23:52,860
<font color="#E5E5E5">regulator's and we also need to be</font>

623
00:23:50,970 --> 00:23:54,450
easily<font color="#E5E5E5"> we</font><font color="#CCCCCC"> can easily tell if an app has</font>

624
00:23:52,860 --> 00:23:58,799
been<font color="#E5E5E5"> loaded successfully just based on</font>

625
00:23:54,450 --> 00:24:00,390
<font color="#E5E5E5">the</font><font color="#CCCCCC"> return value of</font><font color="#E5E5E5"> the invocation so</font>

626
00:23:58,799 --> 00:24:03,360
the attack general<font color="#E5E5E5"> attack idea is this</font>

627
00:24:00,390 --> 00:24:05,340
<font color="#E5E5E5">right so we want to self sign this app</font>

628
00:24:03,360 --> 00:24:07,530
binary and<font color="#CCCCCC"> then invoke</font><font color="#E5E5E5"> the app loading</font>

629
00:24:05,340 --> 00:24:10,168
<font color="#E5E5E5">while the</font><font color="#CCCCCC"> trazodone is verifying the</font>

630
00:24:07,530 --> 00:24:12,059
<font color="#CCCCCC">signature</font><font color="#E5E5E5"> that we provide</font><font color="#CCCCCC"> then we want</font>

631
00:24:10,169 --> 00:24:14,700
to<font color="#CCCCCC"> actually inject the default in there</font>

632
00:24:12,059 --> 00:24:17,039
so we<font color="#E5E5E5"> want to do that such that the</font><font color="#CCCCCC"> RSA</font>

633
00:24:14,700 --> 00:24:19,140
modulus that<font color="#CCCCCC"> is actually being used at</font>

634
00:24:17,039 --> 00:24:21,919
one time it gets corrupted to a value

635
00:24:19,140 --> 00:24:24,960
that we can<font color="#E5E5E5"> actually predict and use and</font>

636
00:24:21,919 --> 00:24:26,850
essentially<font color="#E5E5E5"> this if this RSA</font>

637
00:24:24,960 --> 00:24:28,350
modulus can be<font color="#E5E5E5"> factorized we can then</font>

638
00:24:26,850 --> 00:24:30,209
generate our<font color="#E5E5E5"> own private key and</font><font color="#CCCCCC"> then</font>

639
00:24:28,350 --> 00:24:33,360
<font color="#E5E5E5">generate a signature that we can use</font><font color="#CCCCCC"> to</font>

640
00:24:30,210 --> 00:24:36,990
trick the thing so to pull this attack

641
00:24:33,360 --> 00:24:40,559
<font color="#E5E5E5">off we need to export two things number</font>

642
00:24:36,990 --> 00:24:42,179
<font color="#E5E5E5">one how do we craft the self</font><font color="#CCCCCC"> sign binary</font>

643
00:24:40,559 --> 00:24:44,610
applications that we want<font color="#E5E5E5"> to load into</font>

644
00:24:42,179 --> 00:24:47,279
<font color="#E5E5E5">the trans</font><font color="#CCCCCC"> oh</font><font color="#E5E5E5"> and two how does the the</font>

645
00:24:44,610 --> 00:24:49,379
RSA signature verification<font color="#E5E5E5"> actually work</font>

646
00:24:47,279 --> 00:24:52,950
how is they actually implemented in

647
00:24:49,380 --> 00:24:54,690
there how when and where do we inject

648
00:24:52,950 --> 00:24:55,980
the form there so first let's

649
00:24:54,690 --> 00:24:59,820
investigate the format of the

650
00:24:55,980 --> 00:25:01,980
application<font color="#E5E5E5"> our binary files so for the</font>

651
00:24:59,820 --> 00:25:04,260
form phone that we are exploring the

652
00:25:01,980 --> 00:25:06,270
<font color="#CCCCCC">trust zone</font><font color="#E5E5E5"> app files can be found in the</font>

653
00:25:04,260 --> 00:25:07,980
firmware<font color="#E5E5E5"> updates</font><font color="#CCCCCC"> or on the phone device</font>

654
00:25:06,270 --> 00:25:09,960
itself you can just extract them now and

655
00:25:07,980 --> 00:25:13,320
each of the app consists of a collection

656
00:25:09,960 --> 00:25:16,529
<font color="#CCCCCC">of files</font><font color="#E5E5E5"> here are basically</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> dot MDT</font>

657
00:25:13,320 --> 00:25:19,678
file that contains the<font color="#E5E5E5"> certificate chain</font>

658
00:25:16,529 --> 00:25:21,899
<font color="#CCCCCC">a bunch</font><font color="#E5E5E5"> of metadata and the Joseon ages</font>

659
00:25:19,679 --> 00:25:24,450
has been<font color="#E5E5E5"> used and then we have a series</font>

660
00:25:21,899 --> 00:25:27,500
of like the<font color="#CCCCCC"> Program Files here</font><font color="#E5E5E5"> so since</font>

661
00:25:24,450 --> 00:25:29,760
<font color="#E5E5E5">this nature and the hashes</font><font color="#CCCCCC"> and</font>

662
00:25:27,500 --> 00:25:32,940
certificate chain are all in the app

663
00:25:29,760 --> 00:25:34,770
have the adult<font color="#E5E5E5"> MDT file are we big we</font>

664
00:25:32,940 --> 00:25:39,049
<font color="#E5E5E5">just get a focus or the our analysis on</font>

665
00:25:34,770 --> 00:25:41,940
that<font color="#E5E5E5"> one we just</font><font color="#CCCCCC"> be attacking that</font><font color="#E5E5E5"> one</font>

666
00:25:39,049 --> 00:25:45,658
so let's zoom<font color="#CCCCCC"> into the format of the dot</font>

667
00:25:41,940 --> 00:25:48,659
<font color="#E5E5E5">MDT file so</font><font color="#CCCCCC"> here is a</font><font color="#E5E5E5"> pictorial view of</font>

668
00:25:45,659 --> 00:25:51,120
what you can<font color="#E5E5E5"> find in a dot empty fit</font><font color="#CCCCCC"> md</font>

669
00:25:48,659 --> 00:25:52,890
<font color="#CCCCCC">key file that you you can get from the</font>

670
00:25:51,120 --> 00:25:56,639
firmware first<font color="#CCCCCC"> I'd like to acknowledge</font>

671
00:25:52,890 --> 00:25:58,080
<font color="#CCCCCC">talent girl</font><font color="#E5E5E5"> from Google project</font><font color="#CCCCCC"> project</font>

672
00:25:56,640 --> 00:26:00,659
<font color="#E5E5E5">zero for their valuable work on</font>

673
00:25:58,080 --> 00:26:03,120
reversing<font color="#E5E5E5"> the the format of the</font><font color="#CCCCCC"> MDG file</font>

674
00:26:00,659 --> 00:26:05,429
<font color="#E5E5E5">so from</font><font color="#CCCCCC"> their work we know that the</font>

675
00:26:03,120 --> 00:26:08,279
certificate is stored in a in a

676
00:26:05,429 --> 00:26:11,220
proprietary<font color="#E5E5E5"> Motorola</font><font color="#CCCCCC"> hav</font><font color="#E5E5E5"> binary format</font>

677
00:26:08,279 --> 00:26:14,010
so let's<font color="#CCCCCC"> zoom into an actual</font><font color="#E5E5E5"> certificate</font>

678
00:26:11,220 --> 00:26:16,710
that is<font color="#E5E5E5"> found on the white vine</font>

679
00:26:14,010 --> 00:26:18,658
application on that will run we didn't

680
00:26:16,710 --> 00:26:21,240
trust own on the phone so since the

681
00:26:18,659 --> 00:26:23,640
public exponent<font color="#E5E5E5"> is usually fixed is</font>

682
00:26:21,240 --> 00:26:29,190
always<font color="#E5E5E5"> fixed to one</font><font color="#CCCCCC"> zero zero zero one</font>

683
00:26:23,640 --> 00:26:31,200
<font color="#E5E5E5">so in fact only the modulus and and the</font>

684
00:26:29,190 --> 00:26:34,320
signature is<font color="#E5E5E5"> actually of interest</font><font color="#CCCCCC"> during</font>

685
00:26:31,200 --> 00:26:37,799
<font color="#CCCCCC">our analysis and if you're</font><font color="#E5E5E5"> interested I</font>

686
00:26:34,320 --> 00:26:38,580
made a copy of<font color="#CCCCCC"> my my certificate parsing</font>

687
00:26:37,799 --> 00:26:40,080
code<font color="#E5E5E5"> here</font>

688
00:26:38,580 --> 00:26:42,149
at the link here if you want you can<font color="#E5E5E5"> go</font>

689
00:26:40,080 --> 00:26:45,919
play<font color="#E5E5E5"> around that download the the</font>

690
00:26:42,150 --> 00:26:49,230
firmware and<font color="#E5E5E5"> pass the certificate itself</font>

691
00:26:45,920 --> 00:26:51,840
<font color="#E5E5E5">next we want to dive into the trans own</font>

692
00:26:49,230 --> 00:26:54,930
OS code that does the signature

693
00:26:51,840 --> 00:26:56,639
verification<font color="#E5E5E5"> so I know many of</font><font color="#CCCCCC"> you</font>

694
00:26:54,930 --> 00:26:58,650
already<font color="#E5E5E5"> know</font><font color="#CCCCCC"> this but let's quickly</font><font color="#E5E5E5"> just</font>

695
00:26:56,640 --> 00:27:01,230
<font color="#E5E5E5">review</font><font color="#CCCCCC"> how this images are very thight</font>

696
00:26:58,650 --> 00:27:03,090
just so that we are on<font color="#CCCCCC"> the same page say</font>

697
00:27:01,230 --> 00:27:04,560
you have some<font color="#E5E5E5"> blob of binary data that</font>

698
00:27:03,090 --> 00:27:07,500
you<font color="#E5E5E5"> want to you</font><font color="#CCCCCC"> want</font><font color="#E5E5E5"> to protect and</font>

699
00:27:04,560 --> 00:27:10,470
together<font color="#E5E5E5"> with an attached certificate to</font>

700
00:27:07,500 --> 00:27:12,720
<font color="#E5E5E5">prove its authenticity</font><font color="#CCCCCC"> so to verify that</font>

701
00:27:10,470 --> 00:27:14,490
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is what this binary data that you</font>

702
00:27:12,720 --> 00:27:16,380
want<font color="#E5E5E5"> to protect the first thing you have</font>

703
00:27:14,490 --> 00:27:18,870
<font color="#CCCCCC">to do is so special did get the hash of</font>

704
00:27:16,380 --> 00:27:22,020
the data so over here in the<font color="#E5E5E5"> inside on</font>

705
00:27:18,870 --> 00:27:23,280
<font color="#E5E5E5">the phone</font><font color="#CCCCCC"> is avi uses</font><font color="#E5E5E5"> sha-256 and then</font>

706
00:27:22,020 --> 00:27:26,010
now we assume<font color="#E5E5E5"> that there's some</font><font color="#CCCCCC"> kind of</font>

707
00:27:23,280 --> 00:27:29,220
<font color="#E5E5E5">root root trust the key that is embedded</font>

708
00:27:26,010 --> 00:27:32,220
<font color="#E5E5E5">in the in the in the firmware and</font><font color="#CCCCCC"> is</font>

709
00:27:29,220 --> 00:27:35,100
<font color="#E5E5E5">actually trusted and using the modulus</font>

710
00:27:32,220 --> 00:27:36,750
of the root key<font color="#E5E5E5"> we can</font><font color="#CCCCCC"> then decrypt the</font>

711
00:27:35,100 --> 00:27:38,760
signature<font color="#E5E5E5"> that we refined from the</font>

712
00:27:36,750 --> 00:27:40,920
signature certificate and then to

713
00:27:38,760 --> 00:27:43,410
finally<font color="#CCCCCC"> get hash</font><font color="#E5E5E5"> to and then to do the</font>

714
00:27:40,920 --> 00:27:45,390
actual verification<font color="#CCCCCC"> of this issue what</font>

715
00:27:43,410 --> 00:27:47,730
we do at the<font color="#E5E5E5"> end of that is to verify</font>

716
00:27:45,390 --> 00:27:49,410
<font color="#CCCCCC">that the two hashes</font><font color="#E5E5E5"> actually match if</font>

717
00:27:47,730 --> 00:27:53,820
they don't match<font color="#E5E5E5"> the certificate the</font>

718
00:27:49,410 --> 00:27:56,070
<font color="#CCCCCC">signature verification will fail</font><font color="#E5E5E5"> so this</font>

719
00:27:53,820 --> 00:27:59,100
works because<font color="#E5E5E5"> when someone tries</font><font color="#CCCCCC"> to</font>

720
00:27:56,070 --> 00:28:01,740
modify<font color="#E5E5E5"> the binary data the resulting</font>

721
00:27:59,100 --> 00:28:03,510
hash would<font color="#E5E5E5"> not match the hash value that</font>

722
00:28:01,740 --> 00:28:06,960
is finally decrypted from<font color="#E5E5E5"> this is an</font>

723
00:28:03,510 --> 00:28:09,360
issue that we<font color="#E5E5E5"> have over here so well</font>

724
00:28:06,960 --> 00:28:12,210
then that why<font color="#E5E5E5"> do we need to inject a</font>

725
00:28:09,360 --> 00:28:13,679
fault<font color="#E5E5E5"> at</font><font color="#CCCCCC"> run time the biggest</font><font color="#E5E5E5"> reason is</font>

726
00:28:12,210 --> 00:28:16,070
because the<font color="#E5E5E5"> root verifying key is</font>

727
00:28:13,680 --> 00:28:18,780
actually<font color="#E5E5E5"> fixed within the the firmware</font>

728
00:28:16,070 --> 00:28:20,820
<font color="#CCCCCC">so</font><font color="#E5E5E5"> even if we try to change this in</font>

729
00:28:18,780 --> 00:28:22,860
<font color="#CCCCCC">nature in a way that we don't knowing</font>

730
00:28:20,820 --> 00:28:25,020
what the the private<font color="#CCCCCC"> key for the modulus</font>

731
00:28:22,860 --> 00:28:27,000
<font color="#E5E5E5">is going to be the resulting decrypt</font>

732
00:28:25,020 --> 00:28:29,400
<font color="#CCCCCC">decrypted hash is extremely unlikely to</font>

733
00:28:27,000 --> 00:28:31,950
match over here<font color="#E5E5E5"> so the one play that we</font>

734
00:28:29,400 --> 00:28:33,960
have left is to<font color="#E5E5E5"> inject a fault</font>

735
00:28:31,950 --> 00:28:36,180
while the<font color="#E5E5E5"> decryption function here is</font>

736
00:28:33,960 --> 00:28:38,160
running so they become so that the

737
00:28:36,180 --> 00:28:40,200
modulus<font color="#CCCCCC"> that is actually being used</font><font color="#E5E5E5"> at</font>

738
00:28:38,160 --> 00:28:42,780
<font color="#CCCCCC">runtime</font><font color="#E5E5E5"> is one that we can actually</font>

739
00:28:40,200 --> 00:28:44,850
factorize and hold the corresponding

740
00:28:42,780 --> 00:28:47,790
private<font color="#E5E5E5"> key</font><font color="#CCCCCC"> to and then we can actually</font>

741
00:28:44,850 --> 00:28:50,520
<font color="#E5E5E5">generate the desire intended hash</font><font color="#CCCCCC"> over</font>

742
00:28:47,790 --> 00:28:52,200
here so let's figure out how to<font color="#E5E5E5"> inject a</font>

743
00:28:50,520 --> 00:28:57,000
fault<font color="#E5E5E5"> into</font>

744
00:28:52,200 --> 00:28:58,529
the decryption<font color="#E5E5E5"> function here well</font><font color="#CCCCCC"> it's</font>

745
00:28:57,000 --> 00:29:00,240
all design theory so the devil is

746
00:28:58,529 --> 00:29:02,460
<font color="#E5E5E5">usually in all the in the in the details</font>

747
00:29:00,240 --> 00:29:04,350
so we'll need to<font color="#E5E5E5"> analyze</font><font color="#CCCCCC"> the binary of</font>

748
00:29:02,460 --> 00:29:06,330
the<font color="#E5E5E5"> trust own code</font><font color="#CCCCCC"> form</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> where</font><font color="#E5E5E5"> to</font>

749
00:29:04,350 --> 00:29:07,740
formulate the attack properly so we

750
00:29:06,330 --> 00:29:10,439
download the<font color="#CCCCCC"> trust one from where from</font>

751
00:29:07,740 --> 00:29:10,889
<font color="#CCCCCC">the</font><font color="#E5E5E5"> vendor's website is assemble it look</font>

752
00:29:10,440 --> 00:29:13,080
at<font color="#CCCCCC"> that</font>

753
00:29:10,889 --> 00:29:15,149
so in this trust own firmware<font color="#CCCCCC"> here's an</font>

754
00:29:13,080 --> 00:29:17,449
<font color="#E5E5E5">example of the super super root key that</font>

755
00:29:15,149 --> 00:29:21,590
we found<font color="#CCCCCC"> in here and we know the</font><font color="#E5E5E5"> RS a</font>

756
00:29:17,450 --> 00:29:25,710
2048-bit is actually being<font color="#E5E5E5"> used and</font>

757
00:29:21,590 --> 00:29:28,320
digging further we found<font color="#CCCCCC"> a the the</font>

758
00:29:25,710 --> 00:29:31,049
<font color="#E5E5E5">function that</font><font color="#CCCCCC"> decrypt</font><font color="#E5E5E5"> a given signature</font>

759
00:29:28,320 --> 00:29:33,330
<font color="#E5E5E5">using</font><font color="#CCCCCC"> like a public modulus and the</font>

760
00:29:31,049 --> 00:29:37,320
exponent key so this<font color="#E5E5E5"> is a screenshot of</font>

761
00:29:33,330 --> 00:29:40,408
the<font color="#CCCCCC"> disassemble our function so with a</font>

762
00:29:37,320 --> 00:29:42,240
bit of<font color="#E5E5E5"> reversing we figure out the exact</font>

763
00:29:40,409 --> 00:29:44,639
implementation<font color="#CCCCCC"> of the RSA decryption</font>

764
00:29:42,240 --> 00:29:46,590
function from the disassembly<font color="#CCCCCC"> so for</font>

765
00:29:44,639 --> 00:29:48,750
your reference here this is the pseudo

766
00:29:46,590 --> 00:29:50,309
<font color="#CCCCCC">code for the function</font><font color="#E5E5E5"> so this is</font>

767
00:29:48,750 --> 00:29:54,840
<font color="#E5E5E5">extremely crucial for us</font><font color="#CCCCCC"> to figure out</font>

768
00:29:50,309 --> 00:29:56,700
<font color="#E5E5E5">where and</font><font color="#CCCCCC"> how to inject the fall so just</font>

769
00:29:54,840 --> 00:29:57,840
as a side note edge<font color="#E5E5E5"> elastic at that it's</font>

770
00:29:56,700 --> 00:30:00,360
like staring<font color="#E5E5E5"> at the disassembly</font>

771
00:29:57,840 --> 00:30:03,360
<font color="#CCCCCC">aesthetically</font><font color="#E5E5E5"> I found that</font><font color="#CCCCCC"> using code</font>

772
00:30:00,360 --> 00:30:04,889
emulation<font color="#E5E5E5"> using the anger framework</font><font color="#CCCCCC"> it</font>

773
00:30:03,360 --> 00:30:07,039
has been<font color="#E5E5E5"> really helpful</font><font color="#CCCCCC"> in testing out</font>

774
00:30:04,889 --> 00:30:10,408
the hypothesis<font color="#CCCCCC"> of the reverse</font>

775
00:30:07,039 --> 00:30:12,690
functionality so kudos<font color="#CCCCCC"> to the UCSB team</font>

776
00:30:10,409 --> 00:30:14,759
for<font color="#E5E5E5"> this really great tool and in</font>

777
00:30:12,690 --> 00:30:16,169
addition I've also devised a cool

778
00:30:14,759 --> 00:30:18,000
debugging trick that<font color="#E5E5E5"> allows me to</font>

779
00:30:16,169 --> 00:30:20,009
dynamically instrument<font color="#E5E5E5"> the trust own</font>

780
00:30:18,000 --> 00:30:21,600
code running on actual phones itself on

781
00:30:20,009 --> 00:30:23,370
the phone that I'm actually<font color="#CCCCCC"> looking at</font>

782
00:30:21,600 --> 00:30:25,590
so this tricks allows me to set<font color="#CCCCCC"> up</font>

783
00:30:23,370 --> 00:30:27,508
virtual breakpoints and uncover contents

784
00:30:25,590 --> 00:30:29,699
of the data structure<font color="#CCCCCC"> that</font><font color="#E5E5E5"> is only</font>

785
00:30:27,509 --> 00:30:31,080
<font color="#E5E5E5">available at runtime</font><font color="#CCCCCC"> I won't</font><font color="#E5E5E5"> have time</font>

786
00:30:29,700 --> 00:30:32,519
<font color="#E5E5E5">to cover this in this talk</font><font color="#CCCCCC"> so hopefully</font>

787
00:30:31,080 --> 00:30:35,519
I<font color="#CCCCCC"> can cover it</font><font color="#E5E5E5"> next time</font><font color="#CCCCCC"> in a separate</font>

788
00:30:32,519 --> 00:30:37,169
<font color="#E5E5E5">talk in future so anyway let's let's dig</font>

789
00:30:35,519 --> 00:30:41,190
further into<font color="#CCCCCC"> this this function that we</font>

790
00:30:37,169 --> 00:30:42,629
have right now are at a high level<font color="#E5E5E5"> this</font>

791
00:30:41,190 --> 00:30:45,690
function computes the modular

792
00:30:42,629 --> 00:30:48,269
exponentiation<font color="#CCCCCC"> on</font><font color="#E5E5E5"> the signature given to</font>

793
00:30:45,690 --> 00:30:51,269
it so it isn't implemented<font color="#E5E5E5"> with an</font>

794
00:30:48,269 --> 00:30:54,210
efficient form of multiplication routine

795
00:30:51,269 --> 00:30:56,399
called<font color="#E5E5E5"> Montgomery</font>

796
00:30:54,210 --> 00:30:58,559
can have<font color="#E5E5E5"> more information over there</font><font color="#CCCCCC"> and</font>

797
00:30:56,399 --> 00:31:01,408
finally<font color="#CCCCCC"> it uses a memory intensive</font>

798
00:30:58,559 --> 00:31:03,330
function<font color="#E5E5E5"> that reverse the memory buffers</font>

799
00:31:01,409 --> 00:31:05,669
<font color="#E5E5E5">over here use it</font><font color="#CCCCCC"> into three different</font>

800
00:31:03,330 --> 00:31:05,980
<font color="#CCCCCC">spots here</font><font color="#E5E5E5"> and it deals</font><font color="#CCCCCC"> with like the</font>

801
00:31:05,669 --> 00:31:08,140
mod

802
00:31:05,980 --> 00:31:10,780
<font color="#CCCCCC">this and with the signature and finally</font>

803
00:31:08,140 --> 00:31:14,440
with an<font color="#E5E5E5"> intermediate value of the</font>

804
00:31:10,780 --> 00:31:18,580
decrypted signature so now the first

805
00:31:14,440 --> 00:31:22,140
<font color="#CCCCCC">question to ask</font><font color="#E5E5E5"> is where in this</font>

806
00:31:18,580 --> 00:31:24,490
function do we inject this runtime form

807
00:31:22,140 --> 00:31:27,400
ideally we want<font color="#E5E5E5"> to have we want a</font><font color="#CCCCCC"> code</font>

808
00:31:24,490 --> 00:31:29,140
section that<font color="#E5E5E5"> metals with the given</font>

809
00:31:27,400 --> 00:31:31,929
modulus and after some trial and<font color="#E5E5E5"> error</font>

810
00:31:29,140 --> 00:31:34,390
<font color="#CCCCCC">we found that the function flip and in</font>

811
00:31:31,929 --> 00:31:36,580
<font color="#CCCCCC">this is very very</font><font color="#E5E5E5"> susceptible to false</font>

812
00:31:34,390 --> 00:31:38,950
<font color="#E5E5E5">furthermore is invocation and lying for</font>

813
00:31:36,580 --> 00:31:42,340
is used to reverse the the<font color="#E5E5E5"> modulus</font>

814
00:31:38,950 --> 00:31:44,830
supplied as an argument<font color="#E5E5E5"> so for reference</font>

815
00:31:42,340 --> 00:31:46,899
this is<font color="#E5E5E5"> zoom up this disassembly</font><font color="#CCCCCC"> and the</font>

816
00:31:44,830 --> 00:31:49,990
corresponding<font color="#E5E5E5"> pseudo</font><font color="#CCCCCC"> code of the free</font>

817
00:31:46,900 --> 00:31:51,280
end in this function by<font color="#E5E5E5"> exploring</font>

818
00:31:49,990 --> 00:31:53,590
various<font color="#E5E5E5"> values</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the faulting</font>

819
00:31:51,280 --> 00:31:55,570
parameters<font color="#E5E5E5"> yeah here is a set of a</font>

820
00:31:53,590 --> 00:31:57,730
parameters<font color="#E5E5E5"> actually what reliably for us</font>

821
00:31:55,570 --> 00:31:59,460
in comparing<font color="#CCCCCC"> the</font><font color="#E5E5E5"> compute corrupting the</font>

822
00:31:57,730 --> 00:32:02,200
output of with<font color="#E5E5E5"> endedness</font>

823
00:31:59,460 --> 00:32:05,620
so this is an example of the corrupted

824
00:32:02,200 --> 00:32:07,929
modulus<font color="#E5E5E5"> that we see in our experiments</font>

825
00:32:05,620 --> 00:32:10,719
<font color="#CCCCCC">we can</font><font color="#E5E5E5"> see how one particular byte in</font>

826
00:32:07,929 --> 00:32:13,809
this modulus gets corrupted<font color="#CCCCCC"> to a value</font>

827
00:32:10,720 --> 00:32:15,610
of<font color="#CCCCCC"> his a</font><font color="#E5E5E5"> neighboring byte so</font><font color="#CCCCCC"> in to aid</font>

828
00:32:13,809 --> 00:32:17,620
in our exploration<font color="#CCCCCC"> we created a test</font>

829
00:32:15,610 --> 00:32:19,870
bench<font color="#CCCCCC"> which allows</font><font color="#E5E5E5"> us to quickly swap</font>

830
00:32:17,620 --> 00:32:22,570
out like<font color="#CCCCCC"> binaries of functions</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> we</font>

831
00:32:19,870 --> 00:32:25,299
want to test and see where they<font color="#CCCCCC"> are they</font>

832
00:32:22,570 --> 00:32:27,159
actually are susceptible<font color="#E5E5E5"> to false we</font>

833
00:32:25,299 --> 00:32:29,740
provide<font color="#E5E5E5"> a code that we want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> test as a</font>

834
00:32:27,160 --> 00:32:31,299
binary block to this test bench<font color="#E5E5E5"> so for a</font>

835
00:32:29,740 --> 00:32:33,580
demo<font color="#CCCCCC"> in a source code</font><font color="#E5E5E5"> for the test bench</font>

836
00:32:31,299 --> 00:32:36,150
<font color="#CCCCCC">please</font><font color="#E5E5E5"> refer to this link probably won't</font>

837
00:32:33,580 --> 00:32:38,949
have time<font color="#CCCCCC"> to actually show</font><font color="#E5E5E5"> this demo and</font>

838
00:32:36,150 --> 00:32:41,740
then<font color="#E5E5E5"> the next step</font><font color="#CCCCCC"> next issue that we</font>

839
00:32:38,950 --> 00:32:43,870
want<font color="#CCCCCC"> to tackle is this we actually craft</font>

840
00:32:41,740 --> 00:32:46,240
<font color="#E5E5E5">the attacks in nature that we want given</font>

841
00:32:43,870 --> 00:32:50,260
that we really know what<font color="#CCCCCC"> the description</font>

842
00:32:46,240 --> 00:32:53,830
function is gonna be so it turns out<font color="#E5E5E5"> to</font>

843
00:32:50,260 --> 00:32:55,210
be trickier than we<font color="#E5E5E5"> expected before we</font>

844
00:32:53,830 --> 00:32:58,090
started we have this general<font color="#CCCCCC"> idea what</font>

845
00:32:55,210 --> 00:33:00,100
we want to do but again looking<font color="#E5E5E5"> at the</font>

846
00:32:58,090 --> 00:33:01,870
implementation is a little bit more

847
00:33:00,100 --> 00:33:05,469
tricky<font color="#E5E5E5"> so the biggest problem actually</font>

848
00:33:01,870 --> 00:33:07,689
<font color="#E5E5E5">lies in line</font><font color="#CCCCCC"> three</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> four</font><font color="#E5E5E5"> so if you</font>

849
00:33:05,470 --> 00:33:09,669
look at<font color="#E5E5E5"> line three and</font><font color="#CCCCCC"> four we see how</font>

850
00:33:07,690 --> 00:33:11,919
the<font color="#E5E5E5"> original modulus and gets corrupted</font>

851
00:33:09,669 --> 00:33:14,500
to the new end at line four and

852
00:33:11,919 --> 00:33:16,450
<font color="#E5E5E5">previously</font><font color="#CCCCCC"> at line three the original</font>

853
00:33:14,500 --> 00:33:20,200
<font color="#E5E5E5">end is still being used</font><font color="#CCCCCC"> by line three</font>

854
00:33:16,450 --> 00:33:23,500
<font color="#E5E5E5">and strictly</font><font color="#CCCCCC"> because if we</font>

855
00:33:20,200 --> 00:33:26,799
fast forward<font color="#E5E5E5"> to line 15</font><font color="#CCCCCC"> the Montgomery</font>

856
00:33:23,500 --> 00:33:31,929
multiplication function over here<font color="#E5E5E5"> uses</font>

857
00:33:26,799 --> 00:33:35,889
<font color="#E5E5E5">both the original and the</font><font color="#CCCCCC"> original n and</font>

858
00:33:31,929 --> 00:33:37,450
the<font color="#CCCCCC"> corrupted end over here so this</font><font color="#E5E5E5"> gets</font>

859
00:33:35,889 --> 00:33:38,979
really really tricky<font color="#E5E5E5"> over here and we</font>

860
00:33:37,450 --> 00:33:41,950
formulated a technique to<font color="#E5E5E5"> solve this</font>

861
00:33:38,980 --> 00:33:44,529
allowing us to<font color="#E5E5E5"> generate a n attacks in</font>

862
00:33:41,950 --> 00:33:46,330
Asia<font color="#E5E5E5"> given both the moduli</font><font color="#CCCCCC"> so I want to</font>

863
00:33:44,529 --> 00:33:48,460
<font color="#E5E5E5">talk about this here please refer to the</font>

864
00:33:46,330 --> 00:33:52,379
white paper<font color="#CCCCCC"> and the</font><font color="#E5E5E5"> Python</font><font color="#CCCCCC"> script</font><font color="#E5E5E5"> that I</font>

865
00:33:48,460 --> 00:33:52,380
have to<font color="#CCCCCC"> generate this attacks in nature</font>

866
00:33:52,769 --> 00:33:57,970
so now that we<font color="#CCCCCC"> know what to</font><font color="#E5E5E5"> attack and</font>

867
00:33:55,389 --> 00:34:00,939
how to attack<font color="#E5E5E5"> we need to figure out when</font>

868
00:33:57,970 --> 00:34:02,620
<font color="#CCCCCC">to inject the fault</font><font color="#E5E5E5"> so by reversing the</font>

869
00:34:00,940 --> 00:34:05,440
transform from where we know that<font color="#CCCCCC"> the</font>

870
00:34:02,620 --> 00:34:08,078
<font color="#E5E5E5">decrypted decrypt signature function is</font>

871
00:34:05,440 --> 00:34:10,240
<font color="#CCCCCC">actually involved for times</font><font color="#E5E5E5"> when</font>

872
00:34:08,079 --> 00:34:12,339
verifying an application binary<font color="#E5E5E5"> we can</font>

873
00:34:10,239 --> 00:34:14,168
attack any one of those<font color="#CCCCCC"> indications</font><font color="#E5E5E5"> so</font>

874
00:34:12,339 --> 00:34:17,109
we<font color="#E5E5E5"> pick the</font><font color="#CCCCCC"> forth</font><font color="#E5E5E5"> invocation for our</font>

875
00:34:14,168 --> 00:34:18,908
attack<font color="#E5E5E5"> so</font><font color="#CCCCCC"> to profile the the trans own</font>

876
00:34:17,109 --> 00:34:21,460
code from outside resume<font color="#E5E5E5"> we exploit a</font>

877
00:34:18,909 --> 00:34:23,679
design issue in there where the memory

878
00:34:21,460 --> 00:34:27,040
<font color="#E5E5E5">accesses from outside resume can</font>

879
00:34:23,679 --> 00:34:29,530
<font color="#E5E5E5">actually evict or remove the the cache</font>

880
00:34:27,040 --> 00:34:31,750
lines used by trans own so this opens up

881
00:34:29,530 --> 00:34:33,639
a<font color="#E5E5E5"> range of site channel based profiling</font>

882
00:34:31,750 --> 00:34:36,699
attacks<font color="#E5E5E5"> and we rely on the</font><font color="#CCCCCC"> cache based</font>

883
00:34:33,639 --> 00:34:39,760
<font color="#E5E5E5">ones over</font><font color="#CCCCCC"> here we</font><font color="#E5E5E5"> found that by doing a</font>

884
00:34:36,699 --> 00:34:42,239
<font color="#E5E5E5">prime</font><font color="#CCCCCC"> and probe profiling on instruction</font>

885
00:34:39,760 --> 00:34:44,589
caches is more reliable<font color="#CCCCCC"> than data caches</font>

886
00:34:42,239 --> 00:34:46,629
we won't describe the<font color="#CCCCCC"> the side channel</font>

887
00:34:44,589 --> 00:34:48,639
<font color="#E5E5E5">based profiling</font><font color="#CCCCCC"> attacked on the</font><font color="#E5E5E5"> arm here</font>

888
00:34:46,629 --> 00:34:51,219
are<font color="#E5E5E5"> some of the references</font><font color="#CCCCCC"> to them</font><font color="#E5E5E5"> so it</font>

889
00:34:48,639 --> 00:34:53,040
turns out<font color="#E5E5E5"> the</font><font color="#CCCCCC"> eye cache profiling it's</font>

890
00:34:51,219 --> 00:34:55,000
not as convenient as data cache

891
00:34:53,040 --> 00:34:56,918
<font color="#CCCCCC">profiling</font><font color="#E5E5E5"> because instead of using</font>

892
00:34:55,000 --> 00:34:59,560
<font color="#CCCCCC">memory read operations we actually need</font>

893
00:34:56,918 --> 00:35:01,420
<font color="#CCCCCC">to execute execute the instructions and</font>

894
00:34:59,560 --> 00:35:04,509
the memory<font color="#E5E5E5"> addresses</font><font color="#CCCCCC"> that are congruent</font>

895
00:35:01,420 --> 00:35:07,660
to<font color="#E5E5E5"> the the cache set that we are</font>

896
00:35:04,510 --> 00:35:10,420
monitoring<font color="#E5E5E5"> so we created a JIT compiler</font>

897
00:35:07,660 --> 00:35:12,339
<font color="#CCCCCC">a JIT</font><font color="#E5E5E5"> compiler such that given a list of</font>

898
00:35:10,420 --> 00:35:14,380
cache that you<font color="#CCCCCC"> want to monitor you would</font>

899
00:35:12,339 --> 00:35:16,810
allocate<font color="#CCCCCC"> a skew a block of executed</font>

900
00:35:14,380 --> 00:35:18,010
memory and then we put in like the

901
00:35:16,810 --> 00:35:19,299
branch instruction in there and then

902
00:35:18,010 --> 00:35:21,099
<font color="#CCCCCC">change all</font><font color="#E5E5E5"> the relative branch</font>

903
00:35:19,300 --> 00:35:25,170
instructions together<font color="#CCCCCC"> that is congruent</font>

904
00:35:21,099 --> 00:35:27,730
<font color="#CCCCCC">to the monitor set so here's a sketch of</font>

905
00:35:25,170 --> 00:35:32,020
how we do the<font color="#CCCCCC"> the whole eye cache</font>

906
00:35:27,730 --> 00:35:33,850
<font color="#E5E5E5">profiling we have a target victim that</font>

907
00:35:32,020 --> 00:35:36,340
victim code that we<font color="#CCCCCC"> want to try</font>

908
00:35:33,850 --> 00:35:38,589
to monitor for<font color="#E5E5E5"> we try to pick a</font><font color="#CCCCCC"> couple</font>

909
00:35:36,340 --> 00:35:40,570
of core areas just before that<font color="#E5E5E5"> and we</font>

910
00:35:38,590 --> 00:35:43,270
monitor<font color="#E5E5E5"> for the</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> cache eviction for</font>

911
00:35:40,570 --> 00:35:44,650
this cache<font color="#CCCCCC"> set</font><font color="#E5E5E5"> simultaneously we in our</font>

912
00:35:43,270 --> 00:35:46,690
<font color="#CCCCCC">experiment</font><font color="#E5E5E5"> in our</font><font color="#CCCCCC"> text we actually</font>

913
00:35:44,650 --> 00:35:50,200
monitor<font color="#E5E5E5"> for four sets cache sets at the</font>

914
00:35:46,690 --> 00:35:52,120
same time say you have<font color="#CCCCCC"> e</font><font color="#E5E5E5"> which is the</font>

915
00:35:50,200 --> 00:35:54,009
event<font color="#E5E5E5"> when all this cache set is filed</font>

916
00:35:52,120 --> 00:35:55,569
<font color="#E5E5E5">to be evicted</font><font color="#CCCCCC"> and then you want</font><font color="#E5E5E5"> to track</font>

917
00:35:54,010 --> 00:35:58,630
the<font color="#E5E5E5"> next you track the</font><font color="#CCCCCC"> next time that II</font>

918
00:35:55,570 --> 00:36:01,180
actually happens<font color="#E5E5E5"> we do that using like</font>

919
00:35:58,630 --> 00:36:02,980
incremental incrementing counters<font color="#CCCCCC"> as a</font>

920
00:36:01,180 --> 00:36:05,259
high precision<font color="#E5E5E5"> timer</font><font color="#CCCCCC"> you track the</font>

921
00:36:02,980 --> 00:36:06,670
duration between the consecutive<font color="#E5E5E5"> es so</font>

922
00:36:05,260 --> 00:36:10,480
we call this<font color="#E5E5E5"> duration between</font>

923
00:36:06,670 --> 00:36:13,000
<font color="#E5E5E5">consecutive cache eviction events</font><font color="#CCCCCC"> G so</font>

924
00:36:10,480 --> 00:36:14,440
with this<font color="#E5E5E5"> time series G I'm going to</font>

925
00:36:13,000 --> 00:36:17,410
show<font color="#E5E5E5"> over here is this is</font><font color="#CCCCCC"> actually a</font>

926
00:36:14,440 --> 00:36:19,690
very nice fine green<font color="#CCCCCC"> proxy of the trans</font>

927
00:36:17,410 --> 00:36:23,950
own code execution<font color="#E5E5E5"> that we can use to</font>

928
00:36:19,690 --> 00:36:26,290
<font color="#CCCCCC">analyze or profile TransAm code so</font><font color="#E5E5E5"> to</font>

929
00:36:23,950 --> 00:36:27,910
look<font color="#E5E5E5"> for a timing anchor for our fault</font>

930
00:36:26,290 --> 00:36:30,820
injection<font color="#E5E5E5"> let's see how useful this</font>

931
00:36:27,910 --> 00:36:34,299
feature this time<font color="#E5E5E5"> series G is so on the</font>

932
00:36:30,820 --> 00:36:37,690
<font color="#CCCCCC">y axis we plot the G interval</font><font color="#E5E5E5"> while the</font>

933
00:36:34,300 --> 00:36:40,120
<font color="#E5E5E5">x axis is the time the general time</font>

934
00:36:37,690 --> 00:36:41,950
series pattern of G is similar whenever

935
00:36:40,120 --> 00:36:44,920
trustzone is in the process<font color="#CCCCCC"> of</font>

936
00:36:41,950 --> 00:36:46,240
validating the<font color="#CCCCCC"> forth</font><font color="#E5E5E5"> our signature so we</font>

937
00:36:44,920 --> 00:36:48,010
exploit this pattern to<font color="#E5E5E5"> create</font>

938
00:36:46,240 --> 00:36:51,819
additional features that<font color="#E5E5E5"> we can use</font><font color="#CCCCCC"> to</font>

939
00:36:48,010 --> 00:36:54,160
<font color="#CCCCCC">fine tune our timing anchor so these are</font>

940
00:36:51,820 --> 00:36:57,910
the main handcrafted features we use

941
00:36:54,160 --> 00:37:01,000
based<font color="#E5E5E5"> on the time series</font><font color="#CCCCCC"> G now to track</font>

942
00:36:57,910 --> 00:37:04,000
a fault<font color="#E5E5E5"> we track the fault success as</font>

943
00:37:01,000 --> 00:37:06,160
when our<font color="#CCCCCC"> target</font><font color="#E5E5E5"> and modulus buffer is</font>

944
00:37:04,000 --> 00:37:07,980
actually corrupted<font color="#E5E5E5"> here we see both</font>

945
00:37:06,160 --> 00:37:10,569
features are above<font color="#CCCCCC"> features that we have</font>

946
00:37:07,980 --> 00:37:12,640
<font color="#E5E5E5">product as a scatterplot</font><font color="#CCCCCC"> so you have to</font>

947
00:37:10,570 --> 00:37:14,980
cache the first feature or as the<font color="#E5E5E5"> y axis</font>

948
00:37:12,640 --> 00:37:16,870
and then<font color="#CCCCCC"> the second feature</font><font color="#E5E5E5"> as x axis</font>

949
00:37:14,980 --> 00:37:20,470
<font color="#CCCCCC">see therefore both features are</font>

950
00:37:16,870 --> 00:37:22,770
indicated of the<font color="#E5E5E5"> for success rate you</font>

951
00:37:20,470 --> 00:37:26,200
kind of see this like<font color="#E5E5E5"> a downward sloping</font>

952
00:37:22,770 --> 00:37:28,210
<font color="#E5E5E5">relationship over here but this feature</font>

953
00:37:26,200 --> 00:37:30,819
<font color="#E5E5E5">is alone actually not enough so you look</font>

954
00:37:28,210 --> 00:37:33,340
at this<font color="#E5E5E5"> scatter plot over here this</font>

955
00:37:30,820 --> 00:37:35,800
scatter plot actually plots<font color="#E5E5E5"> on the y</font>

956
00:37:33,340 --> 00:37:38,440
axis<font color="#E5E5E5"> it plots the position of where</font>

957
00:37:35,800 --> 00:37:41,170
which part of the buffer is actually

958
00:37:38,440 --> 00:37:42,880
being corrupted<font color="#E5E5E5"> and the x axis</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> how</font>

959
00:37:41,170 --> 00:37:45,250
much time<font color="#E5E5E5"> do we wait before</font><font color="#CCCCCC"> we actually</font>

960
00:37:42,880 --> 00:37:46,570
inject<font color="#E5E5E5"> this thing in there so ideally</font>

961
00:37:45,250 --> 00:37:47,440
you<font color="#E5E5E5"> want to see like a straight line but</font>

962
00:37:46,570 --> 00:37:49,500
<font color="#CCCCCC">is definitely not as</font>

963
00:37:47,440 --> 00:37:52,720
over here there's a lot of variability

964
00:37:49,500 --> 00:37:54,910
<font color="#CCCCCC">it's tough</font><font color="#E5E5E5"> to pinpoint the the fault</font>

965
00:37:52,720 --> 00:37:59,740
injection to a particular thing<font color="#CCCCCC"> so if</font>

966
00:37:54,910 --> 00:38:03,190
you look at that<font color="#CCCCCC"> if we use a fixed value</font>

967
00:37:59,740 --> 00:38:04,359
<font color="#E5E5E5">of the</font><font color="#CCCCCC"> number of delays before we inject</font>

968
00:38:03,190 --> 00:38:07,480
the fault

969
00:38:04,360 --> 00:38:10,000
it actually corrupts a wide range of<font color="#E5E5E5"> a</font>

970
00:38:07,480 --> 00:38:11,770
<font color="#E5E5E5">wide</font><font color="#CCCCCC"> range of the positions within the</font>

971
00:38:10,000 --> 00:38:14,080
actual buffer itself<font color="#E5E5E5"> so it's very tough</font>

972
00:38:11,770 --> 00:38:15,820
<font color="#E5E5E5">for</font><font color="#CCCCCC"> us to actually</font><font color="#E5E5E5"> pinpoint which</font><font color="#CCCCCC"> buffer</font>

973
00:38:14,080 --> 00:38:17,230
which position within<font color="#CCCCCC"> the buffer</font><font color="#E5E5E5"> we want</font>

974
00:38:15,820 --> 00:38:18,910
to corrupt so this is actually

975
00:38:17,230 --> 00:38:20,860
problematic<font color="#E5E5E5"> for all attack because then</font>

976
00:38:18,910 --> 00:38:23,970
we won't be<font color="#E5E5E5"> able</font><font color="#CCCCCC"> to reliably reliably</font>

977
00:38:20,860 --> 00:38:26,380
predict what the values are<font color="#E5E5E5"> going to be</font>

978
00:38:23,970 --> 00:38:29,620
so the idea<font color="#CCCCCC"> that we have is this instead</font>

979
00:38:26,380 --> 00:38:31,330
<font color="#E5E5E5">of using a fixed delay before the the</font>

980
00:38:29,620 --> 00:38:35,040
fault injection<font color="#CCCCCC"> we need to somehow</font>

981
00:38:31,330 --> 00:38:38,500
devise an adaptive delay that we can use

982
00:38:35,040 --> 00:38:40,450
based on<font color="#E5E5E5"> runtime conditions to target</font>

983
00:38:38,500 --> 00:38:44,050
the specific<font color="#E5E5E5"> positions that we want in</font>

984
00:38:40,450 --> 00:38:46,870
in the modulus so this is the<font color="#E5E5E5"> final</font>

985
00:38:44,050 --> 00:38:49,960
piece to<font color="#CCCCCC"> our attack so this is we</font><font color="#E5E5E5"> use</font>

986
00:38:46,870 --> 00:38:52,259
the linear<font color="#CCCCCC"> regression models to based by</font>

987
00:38:49,960 --> 00:38:54,880
collect a<font color="#E5E5E5"> bunch of empirical</font>

988
00:38:52,260 --> 00:38:57,220
<font color="#E5E5E5">observations and we found that including</font>

989
00:38:54,880 --> 00:38:59,740
<font color="#E5E5E5">additional features</font><font color="#CCCCCC"> like temperature are</font>

990
00:38:57,220 --> 00:39:02,230
<font color="#E5E5E5">and they actually help</font><font color="#CCCCCC"> to increase like</font>

991
00:38:59,740 --> 00:39:06,250
the accuracy of<font color="#E5E5E5"> our models so now with</font>

992
00:39:02,230 --> 00:39:09,550
this models<font color="#E5E5E5"> we can then adjust our the</font>

993
00:39:06,250 --> 00:39:11,500
delay<font color="#CCCCCC"> that we need to time the thing and</font>

994
00:39:09,550 --> 00:39:14,020
target a specific positions within the

995
00:39:11,500 --> 00:39:18,310
modulus buffer given several runtime

996
00:39:14,020 --> 00:39:20,259
conditions and how accurate is that<font color="#E5E5E5"> so</font>

997
00:39:18,310 --> 00:39:21,610
we see that this<font color="#E5E5E5"> is a histogram of the</font>

998
00:39:20,260 --> 00:39:24,550
frequency<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the fault</font>

999
00:39:21,610 --> 00:39:27,610
across where in the the buffer is

1000
00:39:24,550 --> 00:39:29,680
actually corrupted<font color="#E5E5E5"> so the</font><font color="#CCCCCC"> x-axis here</font>

1001
00:39:27,610 --> 00:39:34,090
she shows<font color="#E5E5E5"> where in the buffer the buffer</font>

1002
00:39:29,680 --> 00:39:35,560
is about 256 bytes and<font color="#E5E5E5"> where in the</font>

1003
00:39:34,090 --> 00:39:37,180
buffer<font color="#E5E5E5"> he actually gets corrupted more</font>

1004
00:39:35,560 --> 00:39:40,090
so we want to try<font color="#CCCCCC"> to target somewhere</font><font color="#E5E5E5"> in</font>

1005
00:39:37,180 --> 00:39:41,980
between the buffer so now we can see

1006
00:39:40,090 --> 00:39:44,680
it's kind of<font color="#E5E5E5"> like this</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> normal</font>

1007
00:39:41,980 --> 00:39:47,770
distribution of<font color="#E5E5E5"> the thing so some</font>

1008
00:39:44,680 --> 00:39:49,480
statistics<font color="#CCCCCC"> on</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> for 20</font><font color="#E5E5E5"> roughly about</font>

1009
00:39:47,770 --> 00:39:52,210
20 percent of<font color="#E5E5E5"> the faulting attempts that</font>

1010
00:39:49,480 --> 00:39:55,270
we want<font color="#E5E5E5"> results in</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> successful desire</font>

1011
00:39:52,210 --> 00:39:56,920
<font color="#CCCCCC">for in in the buffer that</font><font color="#E5E5E5"> we want so</font>

1012
00:39:55,270 --> 00:40:02,069
this<font color="#CCCCCC"> false actually consists of</font><font color="#E5E5E5"> roughly</font>

1013
00:39:56,920 --> 00:40:04,809
about<font color="#CCCCCC"> 805 unique values of which about 5</font>

1014
00:40:02,069 --> 00:40:07,808
<font color="#E5E5E5">factorizable</font><font color="#CCCCCC"> and one instance of</font><font color="#E5E5E5"> the</font>

1015
00:40:04,809 --> 00:40:10,000
<font color="#E5E5E5">desired form we tried out</font><font color="#CCCCCC"> in roughly</font>

1016
00:40:07,809 --> 00:40:11,589
about<font color="#CCCCCC"> 65 folding attempts</font><font color="#E5E5E5"> one of the</font>

1017
00:40:10,000 --> 00:40:13,300
actually result in<font color="#CCCCCC"> the fault</font><font color="#E5E5E5"> everyone</font>

1018
00:40:11,589 --> 00:40:16,270
<font color="#E5E5E5">and we actually managed to get the app</font>

1019
00:40:13,300 --> 00:40:19,059
to load in there so<font color="#E5E5E5"> I'm going to briefly</font>

1020
00:40:16,270 --> 00:40:21,759
<font color="#E5E5E5">summarize like all the different attack</font>

1021
00:40:19,059 --> 00:40:25,329
and<font color="#CCCCCC"> nibblers</font><font color="#E5E5E5"> that allows</font><font color="#CCCCCC"> us to pull up</font>

1022
00:40:21,760 --> 00:40:28,150
<font color="#E5E5E5">this attack so this is a summary list of</font>

1023
00:40:25,329 --> 00:40:29,829
that<font color="#E5E5E5"> so the main thing is it</font><font color="#CCCCCC"> summarizes</font>

1024
00:40:28,150 --> 00:40:31,599
like most of the<font color="#E5E5E5"> designs issues that we</font>

1025
00:40:29,829 --> 00:40:33,520
find<font color="#E5E5E5"> on the architectural design of</font>

1026
00:40:31,599 --> 00:40:36,309
energy<font color="#E5E5E5"> management mechanisms on the</font>

1027
00:40:33,520 --> 00:40:40,240
<font color="#CCCCCC">systems</font><font color="#E5E5E5"> these</font><font color="#CCCCCC"> days one of the biggest</font>

1028
00:40:36,309 --> 00:40:44,230
issues<font color="#E5E5E5"> is the fact that it's not just</font>

1029
00:40:40,240 --> 00:40:46,118
<font color="#E5E5E5">one specific design issue and the thing</font>

1030
00:40:44,230 --> 00:40:47,380
is<font color="#E5E5E5"> actually a combination of that that</font>

1031
00:40:46,119 --> 00:40:50,589
allows<font color="#CCCCCC"> us to pull off</font><font color="#E5E5E5"> all these</font>

1032
00:40:47,380 --> 00:40:51,880
different attacks here so now<font color="#E5E5E5"> I want to</font>

1033
00:40:50,589 --> 00:40:54,339
<font color="#E5E5E5">try to cut I'll have some completing</font>

1034
00:40:51,880 --> 00:40:55,839
remarks for<font color="#E5E5E5"> this so we know</font><font color="#CCCCCC"> that the the</font>

1035
00:40:54,339 --> 00:40:57,509
industry<font color="#E5E5E5"> is deafening training</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> its</font>

1036
00:40:55,839 --> 00:40:59,950
final<font color="#CCCCCC"> green and increasingly</font>

1037
00:40:57,510 --> 00:41:02,020
heterogeneous design so as a result

1038
00:40:59,950 --> 00:41:04,089
<font color="#CCCCCC">we're gonna</font><font color="#E5E5E5"> see more</font><font color="#CCCCCC"> and more designs</font>

1039
00:41:02,020 --> 00:41:06,069
giving a software<font color="#E5E5E5"> more control</font><font color="#CCCCCC"> over the</font>

1040
00:41:04,089 --> 00:41:08,680
<font color="#E5E5E5">energy management so we probably see</font>

1041
00:41:06,069 --> 00:41:11,650
this on 64 64-bit ARM architecture and

1042
00:41:08,680 --> 00:41:13,058
<font color="#CCCCCC">newer in Intel processes or even on some</font>

1043
00:41:11,650 --> 00:41:15,040
of the cloud<font color="#CCCCCC"> computing providers</font><font color="#E5E5E5"> they</font>

1044
00:41:13,059 --> 00:41:17,859
are giving<font color="#CCCCCC"> VM gets more control over</font>

1045
00:41:15,040 --> 00:41:19,720
power management<font color="#E5E5E5"> so thinking about the</font>

1046
00:41:17,859 --> 00:41:23,470
security<font color="#CCCCCC"> ramification</font><font color="#E5E5E5"> of all these</font>

1047
00:41:19,720 --> 00:41:25,118
different<font color="#CCCCCC"> designs definitely require so</font>

1048
00:41:23,470 --> 00:41:27,129
<font color="#E5E5E5">they're possible defenses both on the</font>

1049
00:41:25,119 --> 00:41:30,010
hardware<font color="#E5E5E5"> and software level</font><font color="#CCCCCC"> but one</font>

1050
00:41:27,130 --> 00:41:31,690
thing is<font color="#CCCCCC"> is is clear is that there is</font>

1051
00:41:30,010 --> 00:41:34,059
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> no clear defense that we can</font>

1052
00:41:31,690 --> 00:41:36,280
use they can<font color="#E5E5E5"> entirely prevent clocks</font>

1053
00:41:34,059 --> 00:41:37,599
<font color="#CCCCCC">proof style of attacks</font><font color="#E5E5E5"> because many of</font>

1054
00:41:36,280 --> 00:41:39,040
the design decisions<font color="#CCCCCC"> like that</font>

1055
00:41:37,599 --> 00:41:42,220
contribute to<font color="#E5E5E5"> the possibility of this</font>

1056
00:41:39,040 --> 00:41:44,890
attack<font color="#CCCCCC"> they're in fact</font><font color="#E5E5E5"> driven by real</font>

1057
00:41:42,220 --> 00:41:46,868
practical<font color="#E5E5E5"> engineering concerns and a lot</font>

1058
00:41:44,890 --> 00:41:48,730
of<font color="#E5E5E5"> food</font><font color="#CCCCCC"> systems most probably like a</font>

1059
00:41:46,869 --> 00:41:51,910
full system response is needed<font color="#CCCCCC"> for an</font>

1060
00:41:48,730 --> 00:41:53,410
effective defense<font color="#E5E5E5"> so the</font><font color="#CCCCCC"> roundup to talk</font>

1061
00:41:51,910 --> 00:41:55,930
I'll briefly highlight some of the<font color="#CCCCCC"> key</font>

1062
00:41:53,410 --> 00:41:58,930
takeaways<font color="#CCCCCC"> from</font><font color="#E5E5E5"> this work we discover new</font>

1063
00:41:55,930 --> 00:42:01,390
<font color="#E5E5E5">class of attack vectors mainly enabled</font>

1064
00:41:58,930 --> 00:42:03,308
by the software interfaces<font color="#E5E5E5"> of energy</font>

1065
00:42:01,390 --> 00:42:04,990
management<font color="#E5E5E5"> mechanisms and we show that</font>

1066
00:42:03,309 --> 00:42:07,690
<font color="#E5E5E5">you can</font><font color="#CCCCCC"> actually be used and exploited</font>

1067
00:42:04,990 --> 00:42:09,819
by<font color="#E5E5E5"> attackers</font><font color="#CCCCCC"> to attack trust execution</font>

1068
00:42:07,690 --> 00:42:11,710
environment and<font color="#E5E5E5"> ultimately</font><font color="#CCCCCC"> this is</font><font color="#E5E5E5"> not a</font>

1069
00:42:09,819 --> 00:42:14,410
<font color="#E5E5E5">hardware software bug it results from</font>

1070
00:42:11,710 --> 00:42:17,589
the fundamental design flaws of the end

1071
00:42:14,410 --> 00:42:19,629
management mechanisms<font color="#CCCCCC"> as such the future</font>

1072
00:42:17,589 --> 00:42:21,220
energy<font color="#E5E5E5"> management designs must take</font>

1073
00:42:19,630 --> 00:42:23,650
security<font color="#E5E5E5"> into consideration</font><font color="#CCCCCC"> especially</font>

1074
00:42:21,220 --> 00:42:28,029
in the context of the use of how enforce

1075
00:42:23,650 --> 00:42:32,020
isolation so<font color="#E5E5E5"> this is some of</font><font color="#CCCCCC"> the links</font>

1076
00:42:28,030 --> 00:42:34,869
that<font color="#E5E5E5"> I have the made available</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font>

1077
00:42:32,020 --> 00:42:38,280
related to<font color="#E5E5E5"> clocks group and with that</font>

1078
00:42:34,869 --> 00:42:38,280
I'm<font color="#CCCCCC"> happy to take questions</font>

1079
00:42:49,450 --> 00:42:55,669
hello thank you<font color="#E5E5E5"> for</font><font color="#CCCCCC"> this talk</font><font color="#E5E5E5"> would it</font>

1080
00:42:53,599 --> 00:42:58,490
be possible<font color="#CCCCCC"> to protect</font><font color="#E5E5E5"> for this kind of</font>

1081
00:42:55,670 --> 00:43:01,040
attacks by protecting on restricting

1082
00:42:58,490 --> 00:43:03,520
access to<font color="#E5E5E5"> the registers that</font><font color="#CCCCCC"> control</font>

1083
00:43:01,040 --> 00:43:07,339
<font color="#CCCCCC">frequency and voltage</font><font color="#E5E5E5"> how that was done</font>

1084
00:43:03,520 --> 00:43:10,040
<font color="#CCCCCC">this</font><font color="#E5E5E5"> are going to develop</font><font color="#CCCCCC"> controls and</font>

1085
00:43:07,339 --> 00:43:13,609
control<font color="#E5E5E5"> mechanism</font><font color="#CCCCCC"> ago</font><font color="#E5E5E5"> requests for</font><font color="#CCCCCC"> but</font>

1086
00:43:10,040 --> 00:43:14,900
<font color="#CCCCCC">it wasn't software this</font><font color="#E5E5E5"> is definitely</font>

1087
00:43:13,609 --> 00:43:16,910
possible this<font color="#E5E5E5"> is actually one of the</font>

1088
00:43:14,900 --> 00:43:18,680
possible approach in trying<font color="#E5E5E5"> to solve</font>

1089
00:43:16,910 --> 00:43:19,759
this thing<font color="#E5E5E5"> that is but the key thing</font><font color="#CCCCCC"> is</font>

1090
00:43:18,680 --> 00:43:21,230
<font color="#CCCCCC">you need to</font><font color="#E5E5E5"> make sure that the</font>

1091
00:43:19,760 --> 00:43:22,700
enforcement<font color="#E5E5E5"> is actually done at the</font>

1092
00:43:21,230 --> 00:43:24,680
<font color="#CCCCCC">transform</font><font color="#E5E5E5"> level and</font><font color="#CCCCCC"> actually not</font><font color="#E5E5E5"> from</font>

1093
00:43:22,700 --> 00:43:26,000
outside<font color="#CCCCCC"> trust so</font><font color="#E5E5E5"> that way the transom</font>

1094
00:43:24,680 --> 00:43:27,919
can actually put better protect yourself

1095
00:43:26,000 --> 00:43:30,079
<font color="#CCCCCC">because you put</font><font color="#E5E5E5"> it outside and that's</font>

1096
00:43:27,920 --> 00:43:31,400
gonna be<font color="#CCCCCC"> a problem but</font><font color="#E5E5E5"> of course there's</font>

1097
00:43:30,079 --> 00:43:33,470
a lot of implication in terms<font color="#E5E5E5"> of like</font>

1098
00:43:31,400 --> 00:43:35,089
the overhead<font color="#E5E5E5"> their model overhead that</font>

1099
00:43:33,470 --> 00:43:36,200
you're gonna be you<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> have to expect</font>

1100
00:43:35,089 --> 00:43:45,880
when could this kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> enforcement</font>

1101
00:43:36,200 --> 00:43:48,680
logic in there<font color="#E5E5E5"> as far</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> I understand</font>

1102
00:43:45,880 --> 00:43:51,140
the<font color="#CCCCCC"> the victim is executing in the tread</font>

1103
00:43:48,680 --> 00:43:52,669
zone and those target is in<font color="#E5E5E5"> the torrid</font>

1104
00:43:51,140 --> 00:43:55,549
zone<font color="#E5E5E5"> and the attacker is in the normal</font>

1105
00:43:52,670 --> 00:43:57,380
<font color="#E5E5E5">world</font><font color="#CCCCCC"> so it</font><font color="#E5E5E5"> means that it's</font><font color="#CCCCCC"> possible to</font>

1106
00:43:55,549 --> 00:43:58,700
<font color="#CCCCCC">have one core</font><font color="#E5E5E5"> working</font><font color="#CCCCCC"> on the</font><font color="#E5E5E5"> treads own</font>

1107
00:43:57,380 --> 00:44:01,579
and the other car walking<font color="#E5E5E5"> in the normal</font>

1108
00:43:58,700 --> 00:44:02,149
world<font color="#E5E5E5"> and working in parallel</font><font color="#CCCCCC"> yes that</font>

1109
00:44:01,579 --> 00:44:05,059
is<font color="#E5E5E5"> possible</font>

1110
00:44:02,150 --> 00:44:07,089
<font color="#CCCCCC">ok that is</font><font color="#E5E5E5"> why the attack works</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> and</font>

1111
00:44:05,059 --> 00:44:10,220
the other<font color="#E5E5E5"> question is you talked about</font>

1112
00:44:07,089 --> 00:44:12,710
<font color="#CCCCCC">Hardware cycle contours accessible</font><font color="#E5E5E5"> from</font>

1113
00:44:10,220 --> 00:44:15,140
number<font color="#E5E5E5"> world that allows to</font><font color="#CCCCCC"> monitor the</font>

1114
00:44:12,710 --> 00:44:17,390
secure world could you elaborate on<font color="#E5E5E5"> that</font>

1115
00:44:15,140 --> 00:44:19,520
<font color="#CCCCCC">how is</font><font color="#E5E5E5"> it accessible well what is it</font>

1116
00:44:17,390 --> 00:44:20,930
sure<font color="#E5E5E5"> so on arm there's actually a</font>

1117
00:44:19,520 --> 00:44:23,540
specific<font color="#E5E5E5"> registers</font><font color="#CCCCCC"> that you can actually</font>

1118
00:44:20,930 --> 00:44:26,990
set<font color="#CCCCCC"> that enable the use of Hardware</font>

1119
00:44:23,540 --> 00:44:29,058
cycle counters even for code that is

1120
00:44:26,990 --> 00:44:31,700
running<font color="#CCCCCC"> within trans own so for</font><font color="#E5E5E5"> example</font>

1121
00:44:29,059 --> 00:44:33,470
from the normal world<font color="#CCCCCC"> what you can do is</font>

1122
00:44:31,700 --> 00:44:35,720
you can go<font color="#E5E5E5"> to this</font><font color="#CCCCCC"> register and you</font><font color="#E5E5E5"> set</font>

1123
00:44:33,470 --> 00:44:39,109
enable then what happens is that you can

1124
00:44:35,720 --> 00:44:40,490
enable<font color="#E5E5E5"> this cycle counter invoked</font><font color="#CCCCCC"> razón</font>

1125
00:44:39,109 --> 00:44:42,859
to do some kind of code that<font color="#E5E5E5"> you want</font>

1126
00:44:40,490 --> 00:44:45,348
<font color="#E5E5E5">and then</font><font color="#CCCCCC"> when it returns to the</font><font color="#E5E5E5"> normal</font>

1127
00:44:42,859 --> 00:44:47,540
<font color="#CCCCCC">rule you track how</font><font color="#E5E5E5"> much the value</font><font color="#CCCCCC"> of</font>

1128
00:44:45,349 --> 00:44:50,420
this cycle<font color="#CCCCCC"> count</font><font color="#E5E5E5"> actually changes then</font>

1129
00:44:47,540 --> 00:44:52,790
<font color="#E5E5E5">this value here would</font><font color="#CCCCCC"> be how long that</font>

1130
00:44:50,420 --> 00:44:54,680
<font color="#CCCCCC">resumed code</font><font color="#E5E5E5"> actually takes to run so</font>

1131
00:44:52,790 --> 00:44:57,200
this is what I meant<font color="#E5E5E5"> by that and arm</font>

1132
00:44:54,680 --> 00:44:59,930
<font color="#E5E5E5">design actually allows you to do this at</font>

1133
00:44:57,200 --> 00:45:02,399
<font color="#E5E5E5">least for the 32-bit size</font>

1134
00:44:59,930 --> 00:45:04,910
it is a documented feature they<font color="#E5E5E5"> call a</font>

1135
00:45:02,400 --> 00:45:07,230
<font color="#CCCCCC">secure debug</font><font color="#E5E5E5"> so but you actually have to</font>

1136
00:45:04,910 --> 00:45:09,660
you actually<font color="#E5E5E5"> have to I can't ever what</font>

1137
00:45:07,230 --> 00:45:19,650
he's enable or disable it but you<font color="#CCCCCC"> look</font>

1138
00:45:09,660 --> 00:45:21,000
at<font color="#E5E5E5"> that one yeah I've just got</font><font color="#CCCCCC"> a quick</font>

1139
00:45:19,650 --> 00:45:23,099
question<font color="#E5E5E5"> how long did it take you to</font>

1140
00:45:21,000 --> 00:45:24,930
<font color="#CCCCCC">assemble these sophisticated attack to</font>

1141
00:45:23,099 --> 00:45:28,980
get it<font color="#E5E5E5"> running and leak data out of</font>

1142
00:45:24,930 --> 00:45:32,669
<font color="#E5E5E5">trustzone well I think the whole I</font>

1143
00:45:28,980 --> 00:45:35,010
started<font color="#E5E5E5"> working on this</font><font color="#CCCCCC"> last year but I</font>

1144
00:45:32,670 --> 00:45:38,220
<font color="#E5E5E5">finished everything roughly around if we</font>

1145
00:45:35,010 --> 00:45:40,260
<font color="#E5E5E5">didn't one year's</font><font color="#CCCCCC"> time the exploration</font>

1146
00:45:38,220 --> 00:45:41,640
<font color="#E5E5E5">of the one part of that is actually</font>

1147
00:45:40,260 --> 00:45:42,960
<font color="#E5E5E5">trying to explore how the actual</font>

1148
00:45:41,640 --> 00:45:44,400
<font color="#CCCCCC">interfaces actually work trying</font><font color="#E5E5E5"> to</font>

1149
00:45:42,960 --> 00:45:46,830
reverse<font color="#CCCCCC"> engineer</font><font color="#E5E5E5"> the memory map thing</font>

1150
00:45:44,400 --> 00:45:48,570
that probably took me<font color="#CCCCCC"> about a</font><font color="#E5E5E5"> month the</font>

1151
00:45:46,830 --> 00:45:50,790
bulk of it<font color="#CCCCCC"> is actually the reverse</font>

1152
00:45:48,570 --> 00:45:52,500
<font color="#CCCCCC">engineering of the actual firmware</font><font color="#E5E5E5"> to</font>

1153
00:45:50,790 --> 00:45:54,720
figure out<font color="#E5E5E5"> exactly where we want to do</font>

1154
00:45:52,500 --> 00:45:56,460
the fault injection<font color="#E5E5E5"> how we want to do</font>

1155
00:45:54,720 --> 00:45:57,839
the fault injection and<font color="#E5E5E5"> then there's a</font>

1156
00:45:56,460 --> 00:46:00,150
bunch<font color="#E5E5E5"> of different</font><font color="#CCCCCC"> ricky stuff that we</font>

1157
00:45:57,840 --> 00:46:02,099
<font color="#CCCCCC">actually have to solve then</font><font color="#E5E5E5"> as you think</font>

1158
00:46:00,150 --> 00:46:04,920
happen in<font color="#E5E5E5"> this specific talk so I would</font>

1159
00:46:02,099 --> 00:46:07,260
say it<font color="#E5E5E5"> takes roughly about what one year</font>

1160
00:46:04,920 --> 00:46:09,390
<font color="#E5E5E5">to pull off</font><font color="#CCCCCC"> two attacks on this</font><font color="#E5E5E5"> trust</font>

1161
00:46:07,260 --> 00:46:11,430
own thing<font color="#CCCCCC"> yep that's why I wanted to</font>

1162
00:46:09,390 --> 00:46:12,990
<font color="#CCCCCC">actually share that</font><font color="#E5E5E5"> well the key thing</font>

1163
00:46:11,430 --> 00:46:14,368
<font color="#E5E5E5">is actually not just not the attack it's</font>

1164
00:46:12,990 --> 00:46:16,470
more like<font color="#E5E5E5"> they're on the architectural</font>

1165
00:46:14,369 --> 00:46:18,060
design issues there whether it's very

1166
00:46:16,470 --> 00:46:19,500
<font color="#CCCCCC">critical</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> the security of the phones</font>

1167
00:46:18,060 --> 00:46:20,400
that<font color="#E5E5E5"> we have these days and it's</font>

1168
00:46:19,500 --> 00:46:21,900
something<font color="#E5E5E5"> that no one has actually</font>

1169
00:46:20,400 --> 00:46:29,070
<font color="#E5E5E5">looked at especially the endangering</font>

1170
00:46:21,900 --> 00:46:32,369
management side<font color="#CCCCCC"> of things Thanks typical</font>

1171
00:46:29,070 --> 00:46:34,380
work<font color="#E5E5E5"> I I actually I really agree</font><font color="#CCCCCC"> with</font>

1172
00:46:32,369 --> 00:46:35,880
something<font color="#E5E5E5"> you just said that</font><font color="#CCCCCC"> for me the</font>

1173
00:46:34,380 --> 00:46:38,640
<font color="#E5E5E5">interesting part is not that</font><font color="#CCCCCC"> you could</font>

1174
00:46:35,880 --> 00:46:41,010
<font color="#E5E5E5">build the really complicated</font><font color="#CCCCCC"> injector</font>

1175
00:46:38,640 --> 00:46:42,960
whatever<font color="#CCCCCC"> it's that the design is set up</font>

1176
00:46:41,010 --> 00:46:44,820
so that<font color="#E5E5E5"> this is possible and the moment</font>

1177
00:46:42,960 --> 00:46:46,589
you realize this like you can see that

1178
00:46:44,820 --> 00:46:49,080
<font color="#CCCCCC">there's six months work to implement</font><font color="#E5E5E5"> it</font>

1179
00:46:46,589 --> 00:46:50,520
<font color="#E5E5E5">but</font><font color="#CCCCCC"> it's gonna work so I'm curious</font><font color="#E5E5E5"> when</font>

1180
00:46:49,080 --> 00:46:51,540
you<font color="#CCCCCC"> were doing</font><font color="#E5E5E5"> your vendor disclosures</font>

1181
00:46:50,520 --> 00:46:53,880
right

1182
00:46:51,540 --> 00:46:56,880
can you just disclose<font color="#E5E5E5"> to them look</font><font color="#CCCCCC"> we</font>

1183
00:46:53,880 --> 00:46:58,470
could do this well did<font color="#E5E5E5"> you have to did</font>

1184
00:46:56,880 --> 00:46:59,700
you have to<font color="#E5E5E5"> spend six months building an</font>

1185
00:46:58,470 --> 00:47:03,720
attack to prove to them that<font color="#CCCCCC"> it</font><font color="#E5E5E5"> would</font>

1186
00:46:59,700 --> 00:47:04,890
work<font color="#CCCCCC"> well you don't have to</font><font color="#E5E5E5"> this varies</font>

1187
00:47:03,720 --> 00:47:06,480
from like<font color="#E5E5E5"> different kind of vendors</font>

1188
00:47:04,890 --> 00:47:07,859
<font color="#E5E5E5">right based on the vendors that</font><font color="#CCCCCC"> we</font>

1189
00:47:06,480 --> 00:47:09,900
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> to they were actually</font><font color="#E5E5E5"> very</font>

1190
00:47:07,859 --> 00:47:12,540
<font color="#E5E5E5">receptive you do have to show some kind</font>

1191
00:47:09,900 --> 00:47:13,019
<font color="#CCCCCC">of proof of concept</font><font color="#E5E5E5"> it doesn't have to</font>

1192
00:47:12,540 --> 00:47:14,729
be an

1193
00:47:13,019 --> 00:47:16,288
<font color="#E5E5E5">to end proof of concept but you have to</font>

1194
00:47:14,729 --> 00:47:19,319
show that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know you can actually pull</font>

1195
00:47:16,289 --> 00:47:20,939
off<font color="#CCCCCC"> corrupting the some kind of</font><font color="#E5E5E5"> data</font>

1196
00:47:19,319 --> 00:47:23,849
computation or some kind of control flow

1197
00:47:20,939 --> 00:47:25,739
influence from outside<font color="#CCCCCC"> resume within</font>

1198
00:47:23,849 --> 00:47:28,229
<font color="#E5E5E5">transition itself so you do actually</font>

1199
00:47:25,739 --> 00:47:30,509
<font color="#CCCCCC">have to show some level of the</font><font color="#E5E5E5"> attack</font>

1200
00:47:28,229 --> 00:47:34,189
ability but<font color="#E5E5E5"> not a full thing like the</font>

1201
00:47:30,509 --> 00:47:37,049
<font color="#CCCCCC">RSA</font><font color="#E5E5E5"> is a sure thing yeah</font>

1202
00:47:34,189 --> 00:47:45,178
<font color="#E5E5E5">yeah I was wondering if you start maybe</font>

1203
00:47:37,049 --> 00:47:47,519
look into Intel SGX<font color="#E5E5E5"> and yeah so</font><font color="#CCCCCC"> oh</font>

1204
00:47:45,179 --> 00:47:49,019
<font color="#E5E5E5">actually I looked into Intel before and</font>

1205
00:47:47,519 --> 00:47:51,149
I felt<font color="#CCCCCC"> like</font><font color="#E5E5E5"> a whole bunch of</font>

1206
00:47:49,019 --> 00:47:52,618
undocumented thing in there where<font color="#E5E5E5"> you</font>

1207
00:47:51,149 --> 00:47:53,909
can actually<font color="#E5E5E5"> model you can do like all</font>

1208
00:47:52,619 --> 00:47:57,089
the other<font color="#E5E5E5"> power management stuff on</font>

1209
00:47:53,909 --> 00:47:59,999
Intel so why<font color="#E5E5E5"> not</font><font color="#CCCCCC"> SPX but on</font><font color="#E5E5E5"> the security</font>

1210
00:47:57,089 --> 00:48:01,979
no more like<font color="#CCCCCC"> the node there's really no</font>

1211
00:47:59,999 --> 00:48:04,319
reason<font color="#E5E5E5"> why that</font><font color="#CCCCCC"> is not possible because</font>

1212
00:48:01,979 --> 00:48:07,379
this<font color="#E5E5E5"> is more like an architectural thing</font>

1213
00:48:04,319 --> 00:48:09,599
rather<font color="#E5E5E5"> than an actual micro</font>

1214
00:48:07,380 --> 00:48:11,130
architectural thing so yeah I have

1215
00:48:09,599 --> 00:48:13,019
<font color="#E5E5E5">actually never really go all the way</font>

1216
00:48:11,130 --> 00:48:14,909
down and<font color="#E5E5E5"> tried to pull all the thing but</font>

1217
00:48:13,019 --> 00:48:17,328
I'm sure someone over<font color="#CCCCCC"> here would be able</font>

1218
00:48:14,909 --> 00:48:17,329
<font color="#CCCCCC">to do that</font>

1219
00:48:22,410 --> 00:48:29,879
yes so<font color="#E5E5E5"> I have</font><font color="#CCCCCC"> a question regarding the</font>

1220
00:48:25,370 --> 00:48:33,810
<font color="#E5E5E5">RSA attack so as I understood it your</font>

1221
00:48:29,880 --> 00:48:40,230
attack<font color="#E5E5E5"> made it possible so that the this</font>

1222
00:48:33,810 --> 00:48:42,450
the signature of<font color="#CCCCCC"> your modified software</font>

1223
00:48:40,230 --> 00:48:47,130
would actually match<font color="#E5E5E5"> the signature of</font>

1224
00:48:42,450 --> 00:48:50,279
the original<font color="#CCCCCC"> software in the</font><font color="#E5E5E5"> signature</font>

1225
00:48:47,130 --> 00:48:52,200
verification<font color="#CCCCCC"> oh it did yes yes</font><font color="#E5E5E5"> the</font>

1226
00:48:50,280 --> 00:48:55,050
output of the signature and signature

1227
00:48:52,200 --> 00:48:58,439
verification<font color="#E5E5E5"> after</font><font color="#CCCCCC"> you glitch it at one</font>

1228
00:48:55,050 --> 00:49:04,110
<font color="#E5E5E5">time yeah</font><font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> so what's the RSA key</font>

1229
00:48:58,440 --> 00:49:09,060
<font color="#CCCCCC">sighs on on</font><font color="#E5E5E5"> Android is it 2048 bits</font><font color="#CCCCCC"> so</font>

1230
00:49:04,110 --> 00:49:14,010
it's a 512 byte result that you need to

1231
00:49:09,060 --> 00:49:18,060
match them so<font color="#E5E5E5"> and your attack makes it</font>

1232
00:49:14,010 --> 00:49:23,820
possible to<font color="#E5E5E5"> get incorrect results so you</font>

1233
00:49:18,060 --> 00:49:26,910
need to<font color="#E5E5E5"> have a 512 byte buffer that that</font>

1234
00:49:23,820 --> 00:49:31,320
you randomly affect to get the expected

1235
00:49:26,910 --> 00:49:33,450
<font color="#E5E5E5">value so how long did it take you what</font>

1236
00:49:31,320 --> 00:49:36,390
when<font color="#CCCCCC"> you run the attack how long would</font>

1237
00:49:33,450 --> 00:49:38,640
it take<font color="#CCCCCC"> before</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> actually find that</font>

1238
00:49:36,390 --> 00:49:41,520
<font color="#E5E5E5">expected value yeah so</font><font color="#CCCCCC"> when we started</font>

1239
00:49:38,640 --> 00:49:43,650
<font color="#CCCCCC">it took a really long time that's why</font>

1240
00:49:41,520 --> 00:49:45,600
most of our efforts is based on<font color="#E5E5E5"> trying</font>

1241
00:49:43,650 --> 00:49:47,160
to<font color="#CCCCCC"> fine tune this thing</font><font color="#E5E5E5"> like using the</font>

1242
00:49:45,600 --> 00:49:51,180
linear<font color="#CCCCCC"> regression model and</font><font color="#E5E5E5"> trying to do</font>

1243
00:49:47,160 --> 00:49:52,529
all of that it took for example<font color="#E5E5E5"> with the</font>

1244
00:49:51,180 --> 00:49:54,089
<font color="#E5E5E5">linear</font><font color="#CCCCCC"> regression model it probably</font>

1245
00:49:52,530 --> 00:49:55,410
<font color="#E5E5E5">gonna take if you have</font><font color="#CCCCCC"> a scoop that</font><font color="#E5E5E5"> is</font>

1246
00:49:54,090 --> 00:49:57,690
actually running<font color="#E5E5E5"> it's probably gonna</font>

1247
00:49:55,410 --> 00:49:59,460
take<font color="#E5E5E5"> maybe</font><font color="#CCCCCC"> one or two</font><font color="#E5E5E5"> days given the</font>

1248
00:49:57,690 --> 00:50:02,250
<font color="#E5E5E5">number of attempts that</font><font color="#CCCCCC"> you have over</font>

1249
00:49:59,460 --> 00:50:04,260
there okay

1250
00:50:02,250 --> 00:50:06,480
so maybe I'm missing something<font color="#E5E5E5"> because</font>

1251
00:50:04,260 --> 00:50:10,560
<font color="#E5E5E5">one or two days</font><font color="#CCCCCC"> you know to generate a</font>

1252
00:50:06,480 --> 00:50:12,750
512 byte buffer that that's<font color="#E5E5E5"> quick yeah</font>

1253
00:50:10,560 --> 00:50:15,390
it's not trying<font color="#CCCCCC"> to generate a B right</font>

1254
00:50:12,750 --> 00:50:17,970
<font color="#CCCCCC">yeah</font><font color="#E5E5E5"> but you're trying to pinpoint the</font>

1255
00:50:15,390 --> 00:50:20,940
corruption of<font color="#E5E5E5"> a specific position within</font>

1256
00:50:17,970 --> 00:50:22,560
the entire buffer<font color="#E5E5E5"> so you're not doing</font>

1257
00:50:20,940 --> 00:50:24,000
like randomly<font color="#E5E5E5"> on all the different</font><font color="#CCCCCC"> kind</font>

1258
00:50:22,560 --> 00:50:26,520
<font color="#CCCCCC">of position you want to try to pinpoint</font>

1259
00:50:24,000 --> 00:50:31,920
that<font color="#E5E5E5"> on a specific part</font><font color="#CCCCCC"> of that and the</font>

1260
00:50:26,520 --> 00:50:33,990
interesting<font color="#CCCCCC"> thing</font><font color="#E5E5E5"> is the the values</font>

1261
00:50:31,920 --> 00:50:35,570
<font color="#E5E5E5">they're actually being corrupted it's</font>

1262
00:50:33,990 --> 00:50:37,709
not exactly random

1263
00:50:35,570 --> 00:50:39,720
because actually<font color="#CCCCCC"> if you look at</font><font color="#E5E5E5"> one of</font>

1264
00:50:37,710 --> 00:50:41,340
<font color="#E5E5E5">the examples</font><font color="#CCCCCC"> that I showed earlier a lot</font>

1265
00:50:39,720 --> 00:50:44,069
<font color="#E5E5E5">of times it takes on the neighboring</font>

1266
00:50:41,340 --> 00:50:47,160
<font color="#E5E5E5">bytes of</font><font color="#CCCCCC"> their the positions that's why</font>

1267
00:50:44,070 --> 00:50:48,930
we can a priority<font color="#E5E5E5"> kind of predict based</font>

1268
00:50:47,160 --> 00:50:50,848
on the<font color="#CCCCCC"> byte</font><font color="#E5E5E5"> position that is</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> be</font>

1269
00:50:48,930 --> 00:50:54,629
corrupted<font color="#E5E5E5"> what the value of the</font>

1270
00:50:50,849 --> 00:50:57,750
corrupted part is gonna<font color="#E5E5E5"> be okay yeah so</font>

1271
00:50:54,630 --> 00:50:59,910
that's why it's<font color="#CCCCCC"> not exactly random is it</font>

1272
00:50:57,750 --> 00:51:01,230
does it<font color="#CCCCCC"> answer</font><font color="#E5E5E5"> your question</font><font color="#CCCCCC"> Hey yeah I</font>

1273
00:50:59,910 --> 00:51:03,089
think so<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so we could</font><font color="#E5E5E5"> take it</font>

1274
00:51:01,230 --> 00:51:05,599
<font color="#CCCCCC">offline</font><font color="#E5E5E5"> anyway discuss more about that</font>

1275
00:51:03,090 --> 00:51:05,599
thank you

1276
00:51:13,040 --> 00:51:17,630
so you<font color="#E5E5E5"> mentioned</font><font color="#CCCCCC"> that in order for these</font>

1277
00:51:15,350 --> 00:51:19,220
types of attacks<font color="#CCCCCC"> to</font><font color="#E5E5E5"> work you the values</font>

1278
00:51:17,630 --> 00:51:21,080
that you<font color="#CCCCCC"> set for</font><font color="#E5E5E5"> frequency and voltage</font>

1279
00:51:19,220 --> 00:51:25,129
need to be significantly<font color="#CCCCCC"> outside of</font>

1280
00:51:21,080 --> 00:51:27,230
<font color="#CCCCCC">vendor specifications what mechanisms</font>

1281
00:51:25,130 --> 00:51:30,730
control the values that you can<font color="#E5E5E5"> actually</font>

1282
00:51:27,230 --> 00:51:35,450
set are they controlled by the driver

1283
00:51:30,730 --> 00:51:38,300
<font color="#CCCCCC">yeah so currently</font><font color="#E5E5E5"> on the the phones that</font>

1284
00:51:35,450 --> 00:51:41,330
<font color="#E5E5E5">we have today</font><font color="#CCCCCC"> they are all being</font>

1285
00:51:38,300 --> 00:51:48,530
controlled<font color="#CCCCCC"> by a device driver</font><font color="#E5E5E5"> that the</font>

1286
00:51:41,330 --> 00:51:49,850
vendor would actually provide so right

1287
00:51:48,530 --> 00:51:52,130
now on the phones<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we have the</font>

1288
00:51:49,850 --> 00:51:53,779
enforcement<font color="#E5E5E5"> logic or rather the</font><font color="#CCCCCC"> the</font>

1289
00:51:52,130 --> 00:51:56,120
protection logic is all implemented

1290
00:51:53,780 --> 00:52:00,140
<font color="#E5E5E5">within the device driver but the device</font>

1291
00:51:56,120 --> 00:52:01,460
driver is running outside<font color="#CCCCCC"> razón so now</font>

1292
00:52:00,140 --> 00:52:03,259
what we're trying<font color="#E5E5E5"> to do is ready it</font>

1293
00:52:01,460 --> 00:52:05,270
<font color="#CCCCCC">attack something that is within</font>

1294
00:52:03,260 --> 00:52:06,890
<font color="#CCCCCC">transition itself and the interesting</font>

1295
00:52:05,270 --> 00:52:08,180
thing<font color="#E5E5E5"> is any</font><font color="#CCCCCC"> kind of stuff any kind</font><font color="#E5E5E5"> of</font>

1296
00:52:06,890 --> 00:52:09,920
frequency<font color="#CCCCCC"> of voltage</font><font color="#E5E5E5"> that you affect</font>

1297
00:52:08,180 --> 00:52:11,629
<font color="#E5E5E5">outside</font><font color="#CCCCCC"> for zone also affects was</font>

1298
00:52:09,920 --> 00:52:13,790
building<font color="#E5E5E5"> trust</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> yourself that's what</font>

1299
00:52:11,630 --> 00:52:18,020
<font color="#E5E5E5">is that</font><font color="#CCCCCC"> tags</font><font color="#E5E5E5"> possible yeah are you</font>

1300
00:52:13,790 --> 00:52:20,259
<font color="#CCCCCC">familiar</font><font color="#E5E5E5"> with any work is it possible to</font>

1301
00:52:18,020 --> 00:52:22,850
implement<font color="#E5E5E5"> some sort</font><font color="#CCCCCC"> of Hardware</font>

1302
00:52:20,260 --> 00:52:26,030
protections that<font color="#E5E5E5"> just the hardware will</font>

1303
00:52:22,850 --> 00:52:28,279
not let you go outside specific

1304
00:52:26,030 --> 00:52:30,200
<font color="#E5E5E5">boundaries for these values oh yeah</font>

1305
00:52:28,280 --> 00:52:32,150
there are I<font color="#CCCCCC"> think they're ongoing was</font>

1306
00:52:30,200 --> 00:52:33,439
they<font color="#E5E5E5"> actually look at trying to put some</font>

1307
00:52:32,150 --> 00:52:35,240
<font color="#E5E5E5">kind of enforcement logic within the</font>

1308
00:52:33,440 --> 00:52:39,110
actual hardware itself<font color="#CCCCCC"> the reason why is</font>

1309
00:52:35,240 --> 00:52:40,459
not<font color="#E5E5E5"> being</font><font color="#CCCCCC"> I would speculate I'm not</font>

1310
00:52:39,110 --> 00:52:42,530
really<font color="#E5E5E5"> that</font><font color="#CCCCCC"> sure like what</font><font color="#E5E5E5"> the what</font><font color="#CCCCCC"> the</font>

1311
00:52:40,460 --> 00:52:45,050
<font color="#CCCCCC">thing would be but</font><font color="#E5E5E5"> I was speculate that</font>

1312
00:52:42,530 --> 00:52:48,440
<font color="#E5E5E5">it's actually extremely hard to put some</font>

1313
00:52:45,050 --> 00:52:50,540
<font color="#E5E5E5">kind of enforcement logic within the</font>

1314
00:52:48,440 --> 00:52:52,010
<font color="#E5E5E5">hardware at this point in time because</font>

1315
00:52:50,540 --> 00:52:53,870
if you look at<font color="#E5E5E5"> the</font><font color="#CCCCCC"> production process</font>

1316
00:52:52,010 --> 00:52:55,460
itself<font color="#E5E5E5"> in order</font><font color="#CCCCCC"> for you to</font><font color="#E5E5E5"> put like the</font>

1317
00:52:53,870 --> 00:52:57,589
front<font color="#E5E5E5"> of the enforcement logic</font><font color="#CCCCCC"> you need</font>

1318
00:52:55,460 --> 00:52:59,660
to know what are<font color="#E5E5E5"> the ranges of the</font>

1319
00:52:57,590 --> 00:53:01,430
frequency in the voltage<font color="#E5E5E5"> and any</font>

1320
00:52:59,660 --> 00:53:02,810
enforcement<font color="#E5E5E5"> actually have to take into</font>

1321
00:53:01,430 --> 00:53:05,270
<font color="#E5E5E5">account both the frequency and voltage</font>

1322
00:53:02,810 --> 00:53:07,490
<font color="#CCCCCC">so if you just look</font><font color="#E5E5E5"> at the if you</font><font color="#CCCCCC"> just</font>

1323
00:53:05,270 --> 00:53:09,470
enforce the limits<font color="#E5E5E5"> of frequency itself</font>

1324
00:53:07,490 --> 00:53:11,240
or voltage<font color="#E5E5E5"> itself is not gonna work</font>

1325
00:53:09,470 --> 00:53:12,500
<font color="#E5E5E5">because if you look at the graph over</font>

1326
00:53:11,240 --> 00:53:14,720
there what you could do is you can pull

1327
00:53:12,500 --> 00:53:16,700
down<font color="#CCCCCC"> the voltage</font><font color="#E5E5E5"> and the amount of the</font>

1328
00:53:14,720 --> 00:53:18,379
the amount of<font color="#E5E5E5"> frequency that</font><font color="#CCCCCC"> you have to</font>

1329
00:53:16,700 --> 00:53:21,230
exceed is actually much lower than right

1330
00:53:18,380 --> 00:53:25,440
<font color="#E5E5E5">so that's one another one is you need to</font>

1331
00:53:21,230 --> 00:53:28,680
<font color="#E5E5E5">run a lot of extensive tests or to get</font>

1332
00:53:25,440 --> 00:53:30,660
limits that<font color="#CCCCCC"> you need to</font><font color="#E5E5E5"> protect this the</font>

1333
00:53:28,680 --> 00:53:34,859
frequency<font color="#CCCCCC"> in</font><font color="#E5E5E5"> voltage but this kind of</font>

1334
00:53:30,660 --> 00:53:37,078
limits are usually<font color="#CCCCCC"> only done when the</font>

1335
00:53:34,859 --> 00:53:38,910
device has finished production<font color="#CCCCCC"> so it's</font>

1336
00:53:37,079 --> 00:53:40,829
like a post manufacturing thing<font color="#E5E5E5"> then you</font>

1337
00:53:38,910 --> 00:53:41,759
test it<font color="#E5E5E5"> and you get the values now if</font>

1338
00:53:40,829 --> 00:53:44,190
you say it's<font color="#CCCCCC"> like a chicken-and-egg</font>

1339
00:53:41,760 --> 00:53:46,950
<font color="#CCCCCC">problem</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> so how do you put this</font>

1340
00:53:44,190 --> 00:53:48,960
values into the hardware<font color="#E5E5E5"> at the design</font>

1341
00:53:46,950 --> 00:53:50,430
<font color="#E5E5E5">phase as well</font><font color="#CCCCCC"> so this are some of the</font>

1342
00:53:48,960 --> 00:53:54,359
issues<font color="#CCCCCC"> that actually</font><font color="#E5E5E5"> has to</font><font color="#CCCCCC"> be mapped</font>

1343
00:53:50,430 --> 00:53:56,549
out or<font color="#CCCCCC"> solved in order</font><font color="#E5E5E5"> to save the solve</font>

1344
00:53:54,359 --> 00:53:58,819
this<font color="#CCCCCC"> button specific problem</font><font color="#E5E5E5"> thank you</font>

1345
00:53:56,550 --> 00:53:58,819
so<font color="#E5E5E5"> much</font>

1346
00:54:11,470 --> 00:54:16,390
well if there are<font color="#CCCCCC"> no further questions</font>

1347
00:54:14,100 --> 00:54:18,759
<font color="#CCCCCC">thank you</font><font color="#E5E5E5"> so much for attending the talk</font>

1348
00:54:16,390 --> 00:54:20,230
<font color="#E5E5E5">today I'll be</font><font color="#CCCCCC"> around</font><font color="#E5E5E5"> if you want to</font><font color="#CCCCCC"> talk</font>

1349
00:54:18,760 --> 00:54:21,610
to me offline<font color="#E5E5E5"> or you think</font><font color="#CCCCCC"> of any</font>

1350
00:54:20,230 --> 00:54:24,040
questions<font color="#CCCCCC"> just</font><font color="#E5E5E5"> shoot me an email</font><font color="#CCCCCC"> all</font>

1351
00:54:21,610 --> 00:54:29,389
right thank you<font color="#E5E5E5"> so much</font>

1352
00:54:24,040 --> 00:54:29,389
[Applause]

