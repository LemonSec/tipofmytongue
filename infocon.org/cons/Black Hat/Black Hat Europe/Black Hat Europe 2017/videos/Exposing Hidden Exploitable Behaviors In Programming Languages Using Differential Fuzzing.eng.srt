1
00:00:00,030 --> 00:00:04,049
thank you<font color="#E5E5E5"> for coming today</font><font color="#CCCCCC"> my name is</font>

2
00:00:01,890 --> 00:00:06,930
<font color="#CCCCCC">Fernanda</font><font color="#E5E5E5"> Baldy I'm a security consultant</font>

3
00:00:04,049 --> 00:00:09,179
for<font color="#CCCCCC"> IR tip and we're here today to talk</font>

4
00:00:06,930 --> 00:00:10,620
<font color="#E5E5E5">about the highly exploitable behaviors</font>

5
00:00:09,179 --> 00:00:14,429
in<font color="#CCCCCC"> programming languages</font><font color="#E5E5E5"> using</font>

6
00:00:10,620 --> 00:00:19,259
differential fussing so the idea<font color="#E5E5E5"> behind</font>

7
00:00:14,429 --> 00:00:23,189
this is<font color="#E5E5E5"> that</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> majority of talks that</font>

8
00:00:19,260 --> 00:00:25,019
we see normally at offensive<font color="#CCCCCC"> security</font>

9
00:00:23,189 --> 00:00:27,689
conferences is about bugs that<font color="#E5E5E5"> have been</font>

10
00:00:25,019 --> 00:00:30,269
fixed have been solved<font color="#E5E5E5"> and they show you</font>

11
00:00:27,689 --> 00:00:32,700
the after come of what happened in the

12
00:00:30,269 --> 00:00:35,760
<font color="#E5E5E5">middle I will try to do</font><font color="#CCCCCC"> something</font>

13
00:00:32,700 --> 00:00:39,239
similar<font color="#E5E5E5"> how I found certain things but I</font>

14
00:00:35,760 --> 00:00:40,890
will show you<font color="#CCCCCC"> things that</font><font color="#E5E5E5"> work so the</font>

15
00:00:39,239 --> 00:00:42,419
thing about box is<font color="#E5E5E5"> that normally they</font>

16
00:00:40,890 --> 00:00:43,829
need to be fixed when you are releasing

17
00:00:42,420 --> 00:00:46,379
them but the thing<font color="#CCCCCC"> about</font><font color="#E5E5E5"> features is</font>

18
00:00:43,829 --> 00:00:48,989
that<font color="#CCCCCC"> you don't</font><font color="#E5E5E5"> need</font><font color="#CCCCCC"> to fix them because</font>

19
00:00:46,379 --> 00:00:51,019
<font color="#CCCCCC">they're</font><font color="#E5E5E5"> features so all I did</font><font color="#CCCCCC"> a number</font>

20
00:00:48,989 --> 00:00:56,879
of<font color="#E5E5E5"> tests in</font><font color="#CCCCCC"> all programming languages</font>

21
00:00:51,020 --> 00:00:58,859
<font color="#E5E5E5">javascript perl PHP Python and Ruby</font><font color="#CCCCCC"> and</font>

22
00:00:56,879 --> 00:01:01,739
<font color="#CCCCCC">it</font><font color="#E5E5E5"> came across a series of things that</font>

23
00:00:58,859 --> 00:01:04,290
were not<font color="#CCCCCC"> documented</font><font color="#E5E5E5"> and they were</font>

24
00:01:01,739 --> 00:01:07,590
<font color="#CCCCCC">unusual and I was share with you what I</font>

25
00:01:04,290 --> 00:01:11,460
saw<font color="#E5E5E5"> to be able</font><font color="#CCCCCC"> to find them</font>

26
00:01:07,590 --> 00:01:15,390
<font color="#CCCCCC">I wrote a type of Foster</font><font color="#E5E5E5"> that helps you</font>

27
00:01:11,460 --> 00:01:16,949
expose these behaviors<font color="#E5E5E5"> it is there was</font>

28
00:01:15,390 --> 00:01:19,500
<font color="#E5E5E5">nothing when I started doing</font><font color="#CCCCCC"> this I</font>

29
00:01:16,950 --> 00:01:21,659
wanted<font color="#E5E5E5"> to find specifically I wanted to</font>

30
00:01:19,500 --> 00:01:24,270
point things in JavaScript<font color="#E5E5E5"> but then I</font>

31
00:01:21,659 --> 00:01:25,890
realized if I can do this for JavaScript

32
00:01:24,270 --> 00:01:27,869
<font color="#E5E5E5">then I get do it for other programming</font>

33
00:01:25,890 --> 00:01:29,729
languages and<font color="#E5E5E5"> if I can do for other</font>

34
00:01:27,869 --> 00:01:32,369
programming languages<font color="#E5E5E5"> I can make it for</font>

35
00:01:29,729 --> 00:01:37,740
everything<font color="#E5E5E5"> so I can make the</font><font color="#CCCCCC"> framework</font>

36
00:01:32,369 --> 00:01:40,408
<font color="#CCCCCC">of</font><font color="#E5E5E5"> this so I made a Python project that</font>

37
00:01:37,740 --> 00:01:42,270
works in multiple<font color="#E5E5E5"> operating systems it</font>

38
00:01:40,409 --> 00:01:44,189
gathers all the<font color="#E5E5E5"> information whenever</font>

39
00:01:42,270 --> 00:01:46,320
<font color="#E5E5E5">you're</font><font color="#CCCCCC"> running a false</font><font color="#E5E5E5"> insight session</font>

40
00:01:44,189 --> 00:01:47,729
you're executing things are you getting

41
00:01:46,320 --> 00:01:49,860
output<font color="#E5E5E5"> from the standard output the</font>

42
00:01:47,729 --> 00:01:51,960
standard error<font color="#E5E5E5"> you're getting crashes</font>

43
00:01:49,860 --> 00:01:54,750
<font color="#E5E5E5">you're getting</font><font color="#CCCCCC"> Hanks</font><font color="#E5E5E5"> you're getting time</font>

44
00:01:51,960 --> 00:01:57,329
<font color="#E5E5E5">the information about time when you're</font>

45
00:01:54,750 --> 00:01:58,710
executing something you're getting

46
00:01:57,329 --> 00:02:00,089
<font color="#E5E5E5">network connection you're getting a lot</font>

47
00:01:58,710 --> 00:02:01,890
of<font color="#E5E5E5"> things are going on whenever you're</font>

48
00:02:00,090 --> 00:02:04,710
executing a piece of software<font color="#CCCCCC"> with its</font>

49
00:02:01,890 --> 00:02:06,930
certain input<font color="#E5E5E5"> and the idea behind this</font>

50
00:02:04,710 --> 00:02:09,149
is<font color="#CCCCCC"> that you can expose the unexpected</font>

51
00:02:06,930 --> 00:02:09,750
<font color="#E5E5E5">behaviors of those executions</font><font color="#CCCCCC"> I'm going</font>

52
00:02:09,149 --> 00:02:12,450
to show you

53
00:02:09,750 --> 00:02:14,400
the final goal of<font color="#E5E5E5"> what I did was to try</font>

54
00:02:12,450 --> 00:02:16,530
<font color="#CCCCCC">to get more vulnerabilities from fussing</font>

55
00:02:14,400 --> 00:02:18,239
sessions<font color="#E5E5E5"> when your fussing something</font>

56
00:02:16,530 --> 00:02:21,569
<font color="#E5E5E5">there are a lot of possibilities that</font>

57
00:02:18,239 --> 00:02:24,689
<font color="#E5E5E5">can come out out</font><font color="#CCCCCC"> of there so this is</font>

58
00:02:21,569 --> 00:02:26,429
<font color="#E5E5E5">what I tested</font><font color="#CCCCCC"> five programming languages</font>

59
00:02:24,689 --> 00:02:28,200
<font color="#CCCCCC">a lot of interpreters from</font><font color="#E5E5E5"> those</font>

60
00:02:26,430 --> 00:02:30,989
programming languages what I did<font color="#CCCCCC"> I</font>

61
00:02:28,200 --> 00:02:34,200
<font color="#E5E5E5">manually check which were the functions</font>

62
00:02:30,989 --> 00:02:36,150
<font color="#CCCCCC">I tried to do</font><font color="#E5E5E5"> my</font><font color="#CCCCCC"> best job out of this</font>

63
00:02:34,200 --> 00:02:39,119
it may not<font color="#E5E5E5"> be</font><font color="#CCCCCC"> completed but</font><font color="#E5E5E5"> it was as</font>

64
00:02:36,150 --> 00:02:41,340
complete as possible<font color="#E5E5E5"> so I got a lot</font><font color="#CCCCCC"> of</font>

65
00:02:39,120 --> 00:02:44,670
functions<font color="#E5E5E5"> and then I put a certain</font>

66
00:02:41,340 --> 00:02:46,709
values between 5<font color="#E5E5E5"> and</font><font color="#CCCCCC"> 30</font><font color="#E5E5E5"> volumes the</font>

67
00:02:44,670 --> 00:02:49,790
<font color="#CCCCCC">bongos being the</font><font color="#E5E5E5"> capital letter</font><font color="#CCCCCC"> eight</font>

68
00:02:46,709 --> 00:02:55,950
the number<font color="#E5E5E5"> one the no value and so on</font>

69
00:02:49,790 --> 00:02:58,260
<font color="#E5E5E5">nothing really crazy so depending what</font>

70
00:02:55,950 --> 00:03:00,659
do you do if you're testing software<font color="#CCCCCC"> you</font>

71
00:02:58,260 --> 00:03:02,720
may care about<font color="#E5E5E5"> this because you may</font><font color="#CCCCCC"> find</font>

72
00:03:00,659 --> 00:03:05,548
all the ways<font color="#CCCCCC"> to test what you're doing</font>

73
00:03:02,720 --> 00:03:09,329
if you're<font color="#CCCCCC"> a</font><font color="#E5E5E5"> developer you</font><font color="#CCCCCC"> may care</font>

74
00:03:05,549 --> 00:03:12,750
because you may affect<font color="#E5E5E5"> well I didn't do</font>

75
00:03:09,329 --> 00:03:14,579
that<font color="#E5E5E5"> if you're a developer the thing is</font>

76
00:03:12,750 --> 00:03:15,840
that you may affect an attacker may

77
00:03:14,579 --> 00:03:18,690
affect the underlying<font color="#E5E5E5"> programming</font>

78
00:03:15,840 --> 00:03:21,299
language instead<font color="#E5E5E5"> of the application so</font>

79
00:03:18,690 --> 00:03:22,799
when someone writes<font color="#E5E5E5"> a piece of code</font><font color="#CCCCCC"> the</font>

80
00:03:21,299 --> 00:03:24,209
attacker normally tries to affect the

81
00:03:22,799 --> 00:03:26,280
<font color="#CCCCCC">application but if you affect the</font>

82
00:03:24,209 --> 00:03:28,349
underlying<font color="#E5E5E5"> programming language is</font><font color="#CCCCCC"> that</font>

83
00:03:26,280 --> 00:03:31,019
is processing the application is broken

84
00:03:28,349 --> 00:03:33,030
nevertheless<font color="#E5E5E5"> and if you're a security</font>

85
00:03:31,019 --> 00:03:35,190
consultant<font color="#E5E5E5"> you may care because you may</font>

86
00:03:33,030 --> 00:03:38,669
try<font color="#CCCCCC"> to</font><font color="#E5E5E5"> exploit this well you may try</font><font color="#CCCCCC"> to</font>

87
00:03:35,190 --> 00:03:41,340
fast things to get<font color="#CCCCCC"> more issues so</font><font color="#E5E5E5"> we'll</font>

88
00:03:38,669 --> 00:03:44,549
briefly show you what came<font color="#E5E5E5"> out from my</font>

89
00:03:41,340 --> 00:03:46,379
<font color="#CCCCCC">passing sessions</font><font color="#E5E5E5"> from the differential</font>

90
00:03:44,549 --> 00:03:49,980
<font color="#CCCCCC">forcing analysis that I did on</font><font color="#E5E5E5"> the</font>

91
00:03:46,379 --> 00:03:51,480
software<font color="#E5E5E5"> and eventually the pains</font>

92
00:03:49,980 --> 00:03:53,730
<font color="#E5E5E5">related</font><font color="#CCCCCC"> to the programming</font><font color="#E5E5E5"> language is</font>

93
00:03:51,480 --> 00:03:58,220
<font color="#E5E5E5">fine is the external differential for</font>

94
00:03:53,730 --> 00:04:01,230
sale<font color="#E5E5E5"> so when it comes to fancy</font>

95
00:03:58,220 --> 00:04:03,650
who has<font color="#CCCCCC"> fuss</font><font color="#E5E5E5"> in the past in here with</font>

96
00:04:01,230 --> 00:04:06,720
any type of faster<font color="#E5E5E5"> cool cool</font>

97
00:04:03,650 --> 00:04:09,150
so who has developing here applications

98
00:04:06,720 --> 00:04:13,590
as well any type of programming

99
00:04:09,150 --> 00:04:15,569
languages<font color="#CCCCCC"> ok cool thank you so when</font>

100
00:04:13,590 --> 00:04:17,820
we're<font color="#E5E5E5"> forcing something there are two</font>

101
00:04:15,569 --> 00:04:20,760
big names<font color="#E5E5E5"> that comes into people's mind</font>

102
00:04:17,820 --> 00:04:22,920
<font color="#E5E5E5">the first one being NFL fantastic piece</font>

103
00:04:20,760 --> 00:04:25,950
<font color="#E5E5E5">of software I'm not getting even</font>

104
00:04:22,920 --> 00:04:28,890
<font color="#E5E5E5">to that and peach</font><font color="#CCCCCC"> great again has a lot</font>

105
00:04:25,950 --> 00:04:32,000
of<font color="#CCCCCC"> features that</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> use</font><font color="#CCCCCC"> to export</font>

106
00:04:28,890 --> 00:04:35,190
<font color="#CCCCCC">one</font><font color="#E5E5E5"> abilities the thing about this</font>

107
00:04:32,000 --> 00:04:36,930
<font color="#CCCCCC">fosters</font><font color="#E5E5E5"> is that</font><font color="#CCCCCC"> merrily they try to</font>

108
00:04:35,190 --> 00:04:39,090
focus<font color="#E5E5E5"> on how you're crushing</font><font color="#CCCCCC"> the</font>

109
00:04:36,930 --> 00:04:41,670
software those are the<font color="#E5E5E5"> things that care</font>

110
00:04:39,090 --> 00:04:43,500
about<font color="#CCCCCC"> the main</font><font color="#E5E5E5"> Fosters nowadays so the</font>

111
00:04:41,670 --> 00:04:45,930
idea is that<font color="#E5E5E5"> you're inputting massive</font>

112
00:04:43,500 --> 00:04:48,180
amounts of unexpected data into the test

113
00:04:45,930 --> 00:04:50,640
target in an attempt to make<font color="#CCCCCC"> it crash or</font>

114
00:04:48,180 --> 00:04:52,350
eventually<font color="#CCCCCC"> hiring so those pieces of</font>

115
00:04:50,640 --> 00:04:54,150
those<font color="#E5E5E5"> crashes</font><font color="#CCCCCC"> and those hearings are</font>

116
00:04:52,350 --> 00:04:55,680
being saved and they're being<font color="#CCCCCC"> later done</font>

117
00:04:54,150 --> 00:04:58,380
<font color="#CCCCCC">aligns to see if you're getting</font><font color="#E5E5E5"> any more</font>

118
00:04:55,680 --> 00:05:01,410
<font color="#E5E5E5">ability again they</font><font color="#CCCCCC"> constantly share</font>

119
00:04:58,380 --> 00:05:02,969
among all clusters you're trying to do

120
00:05:01,410 --> 00:05:06,740
<font color="#E5E5E5">something if you found that particular</font>

121
00:05:02,970 --> 00:05:09,870
condition<font color="#E5E5E5"> you save it for later so</font>

122
00:05:06,740 --> 00:05:12,870
crushing a piece of software is no but

123
00:05:09,870 --> 00:05:15,120
hard<font color="#E5E5E5"> so</font><font color="#CCCCCC"> as I was</font><font color="#E5E5E5"> working with the foster</font>

124
00:05:12,870 --> 00:05:16,680
I came across<font color="#E5E5E5"> the thing that</font><font color="#CCCCCC"> whoa this</font>

125
00:05:15,120 --> 00:05:21,210
<font color="#CCCCCC">is not</font><font color="#E5E5E5"> what I'm</font><font color="#CCCCCC"> looking for but</font><font color="#E5E5E5"> I'm</font>

126
00:05:16,680 --> 00:05:22,770
coming across<font color="#E5E5E5"> all these crashes so only</font>

127
00:05:21,210 --> 00:05:27,799
phone crashes<font color="#E5E5E5"> in all the interpreters</font>

128
00:05:22,770 --> 00:05:30,630
mostly this<font color="#E5E5E5"> is an example for for Ruby</font>

129
00:05:27,800 --> 00:05:33,870
this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> what happens with the Facebook</font>

130
00:05:30,630 --> 00:05:37,200
implementation for<font color="#CCCCCC"> PHP it crashes this</font>

131
00:05:33,870 --> 00:05:39,510
was the only one<font color="#CCCCCC"> that</font><font color="#E5E5E5"> I tried</font><font color="#CCCCCC"> to report</font>

132
00:05:37,200 --> 00:05:41,700
<font color="#E5E5E5">and since they said it wasn't remotely</font>

133
00:05:39,510 --> 00:05:45,360
exploitable because an attacker couldn't

134
00:05:41,700 --> 00:05:47,909
<font color="#CCCCCC">explore</font><font color="#E5E5E5"> that this was not on everything</font>

135
00:05:45,360 --> 00:05:54,240
<font color="#CCCCCC">so I stopped trying</font><font color="#E5E5E5"> to report these</font>

136
00:05:47,910 --> 00:05:55,530
<font color="#E5E5E5">crashes in</font><font color="#CCCCCC"> Popeye and pearl and</font><font color="#E5E5E5"> in</font>

137
00:05:54,240 --> 00:05:58,470
<font color="#E5E5E5">checker called the Microsoft</font>

138
00:05:55,530 --> 00:06:00,390
implementation of JavaScript so you<font color="#E5E5E5"> can</font>

139
00:05:58,470 --> 00:06:02,790
crash<font color="#E5E5E5"> whatever piece of software on of</font>

140
00:06:00,390 --> 00:06:05,310
<font color="#E5E5E5">course you may not get a serious</font>

141
00:06:02,790 --> 00:06:09,030
<font color="#CCCCCC">mobility out of a crash</font><font color="#E5E5E5"> blood is the</font>

142
00:06:05,310 --> 00:06:11,820
starting<font color="#E5E5E5"> point</font><font color="#CCCCCC"> so what's the thing with</font>

143
00:06:09,030 --> 00:06:12,960
differential thought fussing this is

144
00:06:11,820 --> 00:06:14,520
where<font color="#E5E5E5"> things</font><font color="#CCCCCC"> start to get</font><font color="#E5E5E5"> more</font>

145
00:06:12,960 --> 00:06:16,250
interesting<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is where I started this</font>

146
00:06:14,520 --> 00:06:18,719
project because I wanted to<font color="#E5E5E5"> gather</font>

147
00:06:16,250 --> 00:06:21,360
<font color="#E5E5E5">certain pieces of information that I was</font>

148
00:06:18,720 --> 00:06:23,520
not<font color="#CCCCCC"> getting from any type of foster the</font>

149
00:06:21,360 --> 00:06:26,130
idea behind our differential<font color="#CCCCCC"> fostering</font>

150
00:06:23,520 --> 00:06:28,650
<font color="#CCCCCC">process</font><font color="#E5E5E5"> is that you're executing one or</font>

151
00:06:26,130 --> 00:06:30,639
more similar implementations to compare

152
00:06:28,650 --> 00:06:32,349
the standard<font color="#E5E5E5"> output an Easterner error</font>

153
00:06:30,639 --> 00:06:35,319
that's how you're getting<font color="#E5E5E5"> the issues in</font>

154
00:06:32,349 --> 00:06:37,900
here<font color="#E5E5E5"> instead</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> crashing</font><font color="#CCCCCC"> the software</font>

155
00:06:35,319 --> 00:06:39,759
<font color="#E5E5E5">you're having a good execution</font><font color="#CCCCCC"> you don't</font>

156
00:06:37,900 --> 00:06:41,530
want the software to crash and your

157
00:06:39,759 --> 00:06:43,949
chicken<font color="#E5E5E5"> wants the output and if it did</font>

158
00:06:41,530 --> 00:06:48,000
<font color="#CCCCCC">Faris on some way then</font><font color="#E5E5E5"> you're analyzing</font>

159
00:06:43,949 --> 00:06:50,199
<font color="#E5E5E5">you're analyzing different results from</font>

160
00:06:48,000 --> 00:06:54,639
executions that<font color="#E5E5E5"> should have the same</font>

161
00:06:50,199 --> 00:06:57,129
values<font color="#E5E5E5"> ideally so of course there is a</font>

162
00:06:54,639 --> 00:06:58,389
long<font color="#CCCCCC"> history on this topic and not the</font>

163
00:06:57,129 --> 00:07:01,150
<font color="#E5E5E5">first one during this the first one was</font>

164
00:06:58,389 --> 00:07:04,719
in<font color="#CCCCCC"> nineteen</font><font color="#E5E5E5"> years ago when they were</font>

165
00:07:01,150 --> 00:07:09,008
<font color="#E5E5E5">checking for bugs in C compilers then</font>

166
00:07:04,719 --> 00:07:11,319
<font color="#E5E5E5">nine years</font><font color="#CCCCCC"> ago they checked that certain</font>

167
00:07:09,009 --> 00:07:13,479
pieces<font color="#E5E5E5"> of software kill leaked stuff</font>

168
00:07:11,319 --> 00:07:15,340
through network connections<font color="#CCCCCC"> and that was</font>

169
00:07:13,479 --> 00:07:16,810
also because<font color="#E5E5E5"> you</font><font color="#CCCCCC"> wanna</font><font color="#E5E5E5"> know if a piece</font>

170
00:07:15,340 --> 00:07:21,008
<font color="#E5E5E5">of software is leaking something that</font>

171
00:07:16,810 --> 00:07:23,050
was<font color="#E5E5E5"> great the next</font><font color="#CCCCCC"> one was in 2014 when</font>

172
00:07:21,009 --> 00:07:26,229
they were trying to find<font color="#CCCCCC"> bugs in SSL and</font>

173
00:07:23,050 --> 00:07:28,779
TLS implementations<font color="#CCCCCC"> this one was the</font>

174
00:07:26,229 --> 00:07:30,878
<font color="#CCCCCC">most</font><font color="#E5E5E5"> interesting this was to find bugs</font>

175
00:07:28,779 --> 00:07:33,939
in JavaScript made by most<font color="#E5E5E5"> other people</font>

176
00:07:30,879 --> 00:07:36,069
<font color="#CCCCCC">on</font><font color="#E5E5E5"> Mozilla this is the differential</font>

177
00:07:33,939 --> 00:07:39,339
<font color="#CCCCCC">answer</font><font color="#E5E5E5"> that has been most developed so</font>

178
00:07:36,069 --> 00:07:42,729
far to try to find<font color="#CCCCCC"> issues in Firefox and</font>

179
00:07:39,339 --> 00:07:45,310
<font color="#CCCCCC">it works really good and the final was</font>

180
00:07:42,729 --> 00:07:48,690
presented on this year<font color="#CCCCCC"> and</font><font color="#E5E5E5"> black</font><font color="#CCCCCC"> had to</font>

181
00:07:45,310 --> 00:07:53,620
try to find bugs in cryptographic api's

182
00:07:48,690 --> 00:07:55,449
so these implementations were focusing

183
00:07:53,620 --> 00:07:56,860
on<font color="#E5E5E5"> a</font><font color="#CCCCCC"> particular problem</font><font color="#E5E5E5"> that they were</font>

184
00:07:55,449 --> 00:08:00,189
<font color="#E5E5E5">trying to solve they were trying to</font>

185
00:07:56,860 --> 00:08:02,710
compare the<font color="#CCCCCC"> results of</font><font color="#E5E5E5"> the two C</font>

186
00:08:00,189 --> 00:08:04,839
compilers<font color="#CCCCCC"> that were made by different</font>

187
00:08:02,710 --> 00:08:07,688
<font color="#E5E5E5">people for example and they were</font>

188
00:08:04,839 --> 00:08:09,460
generating<font color="#CCCCCC"> different things</font><font color="#E5E5E5"> so the idea</font>

189
00:08:07,689 --> 00:08:14,259
<font color="#E5E5E5">is that you could do all these things</font>

190
00:08:09,460 --> 00:08:15,698
<font color="#E5E5E5">but we want peace and so forth and the</font>

191
00:08:14,259 --> 00:08:19,539
<font color="#E5E5E5">bots that you're going</font><font color="#CCCCCC"> to get from here</font>

192
00:08:15,699 --> 00:08:21,310
this<font color="#CCCCCC"> is where it becomes interesting</font><font color="#E5E5E5"> you</font>

193
00:08:19,539 --> 00:08:23,080
may have different implementations<font color="#E5E5E5"> think</font>

194
00:08:21,310 --> 00:08:25,900
for<font color="#E5E5E5"> example</font><font color="#CCCCCC"> when you have Python and you</font>

195
00:08:23,080 --> 00:08:27,729
have pi<font color="#CCCCCC"> pi the same thing but it is</font>

196
00:08:25,900 --> 00:08:30,549
<font color="#E5E5E5">trying to execute things with different</font>

197
00:08:27,729 --> 00:08:32,948
<font color="#E5E5E5">plantations you may have different</font>

198
00:08:30,550 --> 00:08:35,589
inputs<font color="#CCCCCC"> this happens</font><font color="#E5E5E5"> for any piece of</font>

199
00:08:32,948 --> 00:08:37,390
<font color="#CCCCCC">software so</font><font color="#E5E5E5"> suppose that you're trying</font>

200
00:08:35,589 --> 00:08:39,729
<font color="#E5E5E5">to execute a program and you're reading</font>

201
00:08:37,390 --> 00:08:41,020
a file you're executing<font color="#E5E5E5"> the program and</font>

202
00:08:39,729 --> 00:08:42,110
you're reading<font color="#E5E5E5"> something from</font><font color="#CCCCCC"> the</font>

203
00:08:41,020 --> 00:08:44,810
command line

204
00:08:42,110 --> 00:08:46,700
the same piece<font color="#E5E5E5"> of software may have</font>

205
00:08:44,810 --> 00:08:50,239
different inputs<font color="#E5E5E5"> and it may behave</font>

206
00:08:46,700 --> 00:08:52,250
differently<font color="#CCCCCC"> and</font><font color="#E5E5E5"> it does you may try</font><font color="#CCCCCC"> to</font>

207
00:08:50,240 --> 00:08:55,100
force different versions of the same

208
00:08:52,250 --> 00:08:56,510
product<font color="#E5E5E5"> you</font><font color="#CCCCCC"> may find</font><font color="#E5E5E5"> things</font><font color="#CCCCCC"> that have</font>

209
00:08:55,100 --> 00:08:58,459
been fixed<font color="#E5E5E5"> or things that are being</font>

210
00:08:56,510 --> 00:09:00,589
broken<font color="#E5E5E5"> in different versions when it</font>

211
00:08:58,459 --> 00:09:02,829
should behave<font color="#E5E5E5"> the same perhaps</font><font color="#CCCCCC"> or not</font>

212
00:09:00,589 --> 00:09:06,110
depending<font color="#CCCCCC"> on what was changed</font><font color="#E5E5E5"> and</font>

213
00:09:02,829 --> 00:09:09,920
<font color="#E5E5E5">finally when the behavior changes</font>

214
00:09:06,110 --> 00:09:12,350
because<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> operating system so the</font>

215
00:09:09,920 --> 00:09:14,660
idea is<font color="#CCCCCC"> that you're checking values</font>

216
00:09:12,350 --> 00:09:16,970
<font color="#E5E5E5">you're running the same thing and it</font>

217
00:09:14,660 --> 00:09:17,600
should<font color="#E5E5E5"> give you the same</font><font color="#CCCCCC"> output in</font><font color="#E5E5E5"> the</font>

218
00:09:16,970 --> 00:09:20,149
<font color="#CCCCCC">end right</font>

219
00:09:17,600 --> 00:09:22,070
if it doesn't<font color="#E5E5E5"> then something's weird and</font>

220
00:09:20,149 --> 00:09:24,019
you should analyze what's going<font color="#CCCCCC"> on so</font>

221
00:09:22,070 --> 00:09:25,220
instead<font color="#CCCCCC"> of a crunch in here</font><font color="#E5E5E5"> we're</font><font color="#CCCCCC"> trying</font>

222
00:09:24,019 --> 00:09:28,850
<font color="#E5E5E5">to see what happens when you have a</font>

223
00:09:25,220 --> 00:09:30,200
different output<font color="#E5E5E5"> so the first three</font>

224
00:09:28,850 --> 00:09:32,510
<font color="#CCCCCC">examples are</font><font color="#E5E5E5"> going to be based in</font>

225
00:09:30,200 --> 00:09:34,670
JavaScript<font color="#CCCCCC"> just because it is easier to</font>

226
00:09:32,510 --> 00:09:37,579
follow a<font color="#E5E5E5"> line the last one will be</font>

227
00:09:34,670 --> 00:09:39,769
<font color="#E5E5E5">related to Python so for the first three</font>

228
00:09:37,579 --> 00:09:43,010
<font color="#CCCCCC">examples first we're going</font><font color="#E5E5E5"> to talk</font><font color="#CCCCCC"> about</font>

229
00:09:39,769 --> 00:09:46,839
<font color="#CCCCCC">different implementations Google does v8</font>

230
00:09:43,010 --> 00:09:50,540
<font color="#E5E5E5">to talk about to process JavaScript</font>

231
00:09:46,839 --> 00:09:53,690
<font color="#CCCCCC">SpiderMonkey was made by</font><font color="#E5E5E5"> mozilla and</font>

232
00:09:50,540 --> 00:09:56,930
finally node which is<font color="#E5E5E5"> running</font><font color="#CCCCCC"> over</font><font color="#E5E5E5"> there</font>

233
00:09:53,690 --> 00:09:59,149
if I'm not incorrect<font color="#E5E5E5"> there v8 parser</font><font color="#CCCCCC"> is</font>

234
00:09:56,930 --> 00:10:00,739
trying to execute all of<font color="#CCCCCC"> them not trying</font>

235
00:09:59,149 --> 00:10:04,339
to<font color="#E5E5E5"> execute the same thing they're trying</font>

236
00:10:00,740 --> 00:10:07,970
to<font color="#CCCCCC"> print on the console</font><font color="#E5E5E5"> the value of the</font>

237
00:10:04,339 --> 00:10:10,310
<font color="#CCCCCC">object is so in here we're getting that</font>

238
00:10:07,970 --> 00:10:13,430
the value is the same<font color="#CCCCCC"> for these two</font>

239
00:10:10,310 --> 00:10:15,770
actors in here but you know it is

240
00:10:13,430 --> 00:10:18,979
<font color="#E5E5E5">behaving differently</font><font color="#CCCCCC"> is it bad</font>

241
00:10:15,770 --> 00:10:24,020
I don't know<font color="#E5E5E5"> it is different one of</font><font color="#CCCCCC"> them</font>

242
00:10:18,980 --> 00:10:25,820
is right<font color="#E5E5E5"> I don't know we're talking</font><font color="#CCCCCC"> here</font>

243
00:10:24,020 --> 00:10:29,750
<font color="#E5E5E5">same programming languages different</font>

244
00:10:25,820 --> 00:10:33,170
implementation now let's talk<font color="#CCCCCC"> about one</font>

245
00:10:29,750 --> 00:10:37,329
single implementation<font color="#E5E5E5"> node but using</font>

246
00:10:33,170 --> 00:10:40,819
different<font color="#CCCCCC"> inputs so one implementation</font>

247
00:10:37,329 --> 00:10:44,959
<font color="#E5E5E5">different inputs different results</font><font color="#CCCCCC"> on</font>

248
00:10:40,820 --> 00:10:47,890
the<font color="#E5E5E5"> Left you're trying to print the</font>

249
00:10:44,959 --> 00:10:50,869
object<font color="#CCCCCC"> with and you're</font><font color="#E5E5E5"> processing that</font>

250
00:10:47,890 --> 00:10:53,660
by trying to<font color="#E5E5E5"> call node and the name</font><font color="#CCCCCC"> of</font>

251
00:10:50,870 --> 00:10:54,570
the father you<font color="#CCCCCC"> just written the output</font>

252
00:10:53,660 --> 00:10:57,660
is

253
00:10:54,570 --> 00:10:59,070
that<font color="#CCCCCC"> the empty dictionary on the other</font>

254
00:10:57,660 --> 00:11:01,860
hand if you executed on the<font color="#E5E5E5"> common line</font>

255
00:10:59,070 --> 00:11:05,790
you<font color="#E5E5E5"> get another result so which one has</font>

256
00:11:01,860 --> 00:11:07,950
is is real<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> not so sure</font><font color="#CCCCCC"> I don't</font><font color="#E5E5E5"> care</font>

257
00:11:05,790 --> 00:11:09,990
<font color="#CCCCCC">very much about</font><font color="#E5E5E5"> this but I do know</font><font color="#CCCCCC"> that</font>

258
00:11:07,950 --> 00:11:11,370
this is<font color="#E5E5E5"> not what I</font><font color="#CCCCCC"> would have expected</font>

259
00:11:09,990 --> 00:11:15,170
<font color="#E5E5E5">at a minimum</font>

260
00:11:11,370 --> 00:11:18,270
and finally same software different

261
00:11:15,170 --> 00:11:20,910
versions<font color="#CCCCCC"> with</font><font color="#E5E5E5"> the same input we're</font>

262
00:11:18,270 --> 00:11:24,660
trying to execute<font color="#E5E5E5"> the same thing the</font>

263
00:11:20,910 --> 00:11:27,300
object<font color="#CCCCCC"> base in a really early version of</font>

264
00:11:24,660 --> 00:11:29,910
node<font color="#E5E5E5"> nothing was being printed</font>

265
00:11:27,300 --> 00:11:33,209
somewhere along<font color="#CCCCCC"> the process</font><font color="#E5E5E5"> of the</font>

266
00:11:29,910 --> 00:11:35,880
<font color="#CCCCCC">development of node</font><font color="#E5E5E5"> that changed and it</font>

267
00:11:33,210 --> 00:11:39,230
exposes the power of the current path

268
00:11:35,880 --> 00:11:41,460
<font color="#E5E5E5">the</font><font color="#CCCCCC"> hall the</font><font color="#E5E5E5"> process</font><font color="#CCCCCC"> ID and so on so</font>

269
00:11:39,230 --> 00:11:44,100
same piece<font color="#E5E5E5"> of software different name</font>

270
00:11:41,460 --> 00:11:47,790
<font color="#E5E5E5">plus different implementations different</font>

271
00:11:44,100 --> 00:11:49,890
<font color="#E5E5E5">versions things make change</font><font color="#CCCCCC"> and it gets</font>

272
00:11:47,790 --> 00:11:51,900
a little<font color="#E5E5E5"> more</font><font color="#CCCCCC"> interesting when</font><font color="#E5E5E5"> you're</font>

273
00:11:49,890 --> 00:11:54,600
comparing<font color="#CCCCCC"> different operating systems I</font>

274
00:11:51,900 --> 00:11:56,069
couldn't find this<font color="#E5E5E5"> in specifically with</font>

275
00:11:54,600 --> 00:12:00,690
the JavaScript implementation<font color="#E5E5E5"> but I</font>

276
00:11:56,070 --> 00:12:03,000
found<font color="#E5E5E5"> it with Python so I did for all</font>

277
00:12:00,690 --> 00:12:04,980
these software in all the programming

278
00:12:03,000 --> 00:12:06,720
languages<font color="#CCCCCC"> you</font><font color="#E5E5E5"> know the operating systems</font>

279
00:12:04,980 --> 00:12:09,180
<font color="#E5E5E5">trying to find</font><font color="#CCCCCC"> different things that</font>

280
00:12:06,720 --> 00:12:11,760
were weird<font color="#CCCCCC"> and this</font><font color="#E5E5E5"> is something that it</font>

281
00:12:09,180 --> 00:12:14,459
is<font color="#E5E5E5"> easier to see why it's different so</font>

282
00:12:11,760 --> 00:12:17,280
in Python<font color="#CCCCCC"> you have the CMP function that</font>

283
00:12:14,460 --> 00:12:19,320
compares<font color="#E5E5E5"> two objects it is fairly</font>

284
00:12:17,280 --> 00:12:22,260
straightforward<font color="#CCCCCC"> he put two</font><font color="#E5E5E5"> things and it</font>

285
00:12:19,320 --> 00:12:24,900
<font color="#E5E5E5">tells you they're different alone</font><font color="#CCCCCC"> so the</font>

286
00:12:22,260 --> 00:12:25,890
<font color="#E5E5E5">following one-liner tries to compare two</font>

287
00:12:24,900 --> 00:12:28,949
<font color="#E5E5E5">floating-point</font>

288
00:12:25,890 --> 00:12:31,080
norther number<font color="#CCCCCC"> of values</font><font color="#E5E5E5"> now if you</font>

289
00:12:28,950 --> 00:12:33,990
compare one and one<font color="#E5E5E5"> the results of that</font>

290
00:12:31,080 --> 00:12:37,860
<font color="#E5E5E5">should be 0 because it is a reflexive</font>

291
00:12:33,990 --> 00:12:40,650
<font color="#E5E5E5">value however floating points have a non</font>

292
00:12:37,860 --> 00:12:43,470
reflexive particularities that<font color="#E5E5E5"> they only</font>

293
00:12:40,650 --> 00:12:48,150
know they<font color="#CCCCCC"> should</font><font color="#E5E5E5"> not be 0 so probably</font>

294
00:12:43,470 --> 00:12:50,220
the the<font color="#E5E5E5"> value should be 1 or minus 1 and</font>

295
00:12:48,150 --> 00:12:52,199
when you execute<font color="#E5E5E5"> this with different</font>

296
00:12:50,220 --> 00:12:54,810
interpreters in different operating

297
00:12:52,200 --> 00:12:55,890
systems you may<font color="#E5E5E5"> find a common pattern of</font>

298
00:12:54,810 --> 00:12:58,109
the while you want

299
00:12:55,890 --> 00:13:02,340
being across<font color="#E5E5E5"> on except</font><font color="#CCCCCC"> for line it's</font>

300
00:12:58,110 --> 00:13:03,380
when you're using the main parser<font color="#CCCCCC"> for</font>

301
00:13:02,340 --> 00:13:07,520
<font color="#E5E5E5">Python</font>

302
00:13:03,380 --> 00:13:09,050
why is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> it's it's</font><font color="#CCCCCC"> it's unusual I</font><font color="#E5E5E5"> I</font>

303
00:13:07,520 --> 00:13:10,250
<font color="#E5E5E5">don't know why it's</font><font color="#CCCCCC"> happening and</font><font color="#E5E5E5"> I</font>

304
00:13:09,050 --> 00:13:13,390
<font color="#E5E5E5">don't know how it may affect other</font>

305
00:13:10,250 --> 00:13:15,650
pieces of<font color="#E5E5E5"> software but it's</font><font color="#CCCCCC"> their</font>

306
00:13:13,390 --> 00:13:18,110
<font color="#CCCCCC">polypipe</font><font color="#E5E5E5"> just doesn't care about this</font>

307
00:13:15,650 --> 00:13:22,430
rule<font color="#E5E5E5"> so it does you know for all</font><font color="#CCCCCC"> of them</font>

308
00:13:18,110 --> 00:13:24,500
<font color="#CCCCCC">it shouldn't</font><font color="#E5E5E5"> be so we took about</font><font color="#CCCCCC"> fasting</font>

309
00:13:22,430 --> 00:13:25,969
we<font color="#E5E5E5"> took about differential flossing now</font>

310
00:13:24,500 --> 00:13:27,740
what's the thing<font color="#CCCCCC"> with the extender</font>

311
00:13:25,970 --> 00:13:30,800
differential forcing<font color="#E5E5E5"> what else can we</font>

312
00:13:27,740 --> 00:13:32,810
<font color="#E5E5E5">get out of this so since</font><font color="#CCCCCC"> I was trying to</font>

313
00:13:30,800 --> 00:13:34,099
<font color="#E5E5E5">force programming languages the thing</font>

314
00:13:32,810 --> 00:13:35,900
<font color="#CCCCCC">about programming</font><font color="#E5E5E5"> languages</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> is</font>

315
00:13:34,100 --> 00:13:37,610
really really really really<font color="#CCCCCC"> interesting</font>

316
00:13:35,900 --> 00:13:39,110
is that there are a lot of things<font color="#E5E5E5"> that</font>

317
00:13:37,610 --> 00:13:42,050
may happen<font color="#E5E5E5"> on a programming languages</font>

318
00:13:39,110 --> 00:13:44,510
<font color="#E5E5E5">you can</font><font color="#CCCCCC"> redefine</font><font color="#E5E5E5"> variety opener network</font>

319
00:13:42,050 --> 00:13:46,430
connection all the<font color="#CCCCCC"> things that</font><font color="#E5E5E5"> an</font>

320
00:13:44,510 --> 00:13:48,860
application does are embedded on<font color="#E5E5E5"> a</font>

321
00:13:46,430 --> 00:13:51,290
programming language<font color="#CCCCCC"> so if you're able</font>

322
00:13:48,860 --> 00:13:53,060
to<font color="#E5E5E5"> truly feel</font><font color="#CCCCCC"> our programming languages</font>

323
00:13:51,290 --> 00:13:55,459
<font color="#E5E5E5">you should be able to get all the things</font>

324
00:13:53,060 --> 00:13:58,219
<font color="#E5E5E5">from application when you're trying to</font>

325
00:13:55,460 --> 00:14:00,560
<font color="#E5E5E5">do that so you want to detect more</font>

326
00:13:58,220 --> 00:14:02,000
things<font color="#E5E5E5"> no chance</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> seeming</font><font color="#CCCCCC"> the</font>

327
00:14:00,560 --> 00:14:04,430
different things with the stronger out

328
00:14:02,000 --> 00:14:06,440
but no it<font color="#CCCCCC"> just crashes</font><font color="#E5E5E5"> you want to try</font>

329
00:14:04,430 --> 00:14:08,569
to get<font color="#E5E5E5"> when code is being evaluated for</font>

330
00:14:06,440 --> 00:14:10,570
example for a<font color="#E5E5E5"> programming language</font><font color="#CCCCCC"> when</font>

331
00:14:08,570 --> 00:14:12,830
<font color="#E5E5E5">your something is being executed</font>

332
00:14:10,570 --> 00:14:14,920
<font color="#E5E5E5">moreover you want to know what something</font>

333
00:14:12,830 --> 00:14:17,780
from the operating<font color="#E5E5E5"> system</font><font color="#CCCCCC"> gets executed</font>

334
00:14:14,920 --> 00:14:19,250
<font color="#E5E5E5">how do you know when you're executing a</font>

335
00:14:17,780 --> 00:14:20,720
piece of software is something<font color="#E5E5E5"> else</font>

336
00:14:19,250 --> 00:14:23,510
knows it's<font color="#E5E5E5"> not being executed on the</font>

337
00:14:20,720 --> 00:14:25,100
operating<font color="#E5E5E5"> system level you want to know</font>

338
00:14:23,510 --> 00:14:27,890
when the network connections are<font color="#CCCCCC"> being</font>

339
00:14:25,100 --> 00:14:31,630
open you want<font color="#CCCCCC"> to try to drop that and</font>

340
00:14:27,890 --> 00:14:33,920
take a look to<font color="#CCCCCC"> see</font><font color="#E5E5E5"> if was it expected</font>

341
00:14:31,630 --> 00:14:36,200
you want to see we want<font color="#CCCCCC"> to know when</font>

342
00:14:33,920 --> 00:14:37,610
<font color="#CCCCCC">fonts are being read can i attack her</font>

343
00:14:36,200 --> 00:14:40,250
trying<font color="#E5E5E5"> to read a</font><font color="#CCCCCC"> file that was</font><font color="#E5E5E5"> not</font>

344
00:14:37,610 --> 00:14:43,280
supposed<font color="#E5E5E5"> to is it can the attacker to</font>

345
00:14:40,250 --> 00:14:45,200
<font color="#CCCCCC">that and eventually you can try to get</font>

346
00:14:43,280 --> 00:14:47,390
some meta information for<font color="#CCCCCC"> example</font><font color="#E5E5E5"> the</font>

347
00:14:45,200 --> 00:14:49,250
time required for the execution<font color="#CCCCCC"> I don't</font>

348
00:14:47,390 --> 00:14:50,569
know<font color="#E5E5E5"> lies if perhaps there was not a</font>

349
00:14:49,250 --> 00:14:53,750
hand<font color="#E5E5E5"> but there was something</font><font color="#CCCCCC"> unusual</font>

350
00:14:50,570 --> 00:14:55,070
<font color="#E5E5E5">about</font><font color="#CCCCCC"> that one and on this</font><font color="#E5E5E5"> area you can</font>

351
00:14:53,750 --> 00:14:59,510
<font color="#CCCCCC">find other things that you may care</font>

352
00:14:55,070 --> 00:15:01,730
about<font color="#E5E5E5"> so traditional</font><font color="#CCCCCC"> passing</font><font color="#E5E5E5"> only</font><font color="#CCCCCC"> checks</font>

353
00:14:59,510 --> 00:15:04,400
<font color="#E5E5E5">as I said before the crashes in the</font>

354
00:15:01,730 --> 00:15:05,810
<font color="#CCCCCC">hands differential Fosse</font><font color="#E5E5E5"> will focus on</font>

355
00:15:04,400 --> 00:15:07,310
the difference<font color="#CCCCCC"> between the stronger</font>

356
00:15:05,810 --> 00:15:09,859
<font color="#CCCCCC">output the standard error or eventually</font>

357
00:15:07,310 --> 00:15:13,339
if something is being<font color="#E5E5E5"> leaked the faucet</font>

358
00:15:09,860 --> 00:15:15,440
<font color="#E5E5E5">that I made tries to find all the areas</font>

359
00:15:13,340 --> 00:15:17,120
that were available for application<font color="#E5E5E5"> on</font>

360
00:15:15,440 --> 00:15:19,970
trying to exit

361
00:15:17,120 --> 00:15:22,310
at one<font color="#E5E5E5"> time get as much information as</font>

362
00:15:19,970 --> 00:15:25,970
possible<font color="#CCCCCC"> and then analyze the</font>

363
00:15:22,310 --> 00:15:26,540
<font color="#CCCCCC">information so this is where it gets</font>

364
00:15:25,970 --> 00:15:28,610
funny

365
00:15:26,540 --> 00:15:31,160
I knew this<font color="#CCCCCC"> worked because</font><font color="#E5E5E5"> I tested in</font>

366
00:15:28,610 --> 00:15:32,930
the past manually and I knew the

367
00:15:31,160 --> 00:15:34,939
programming languages were going to show

368
00:15:32,930 --> 00:15:37,790
some<font color="#CCCCCC"> of this</font><font color="#E5E5E5"> I didn't know what it was</font>

369
00:15:34,940 --> 00:15:39,800
going<font color="#E5E5E5"> to get let's start with Python in</font>

370
00:15:37,790 --> 00:15:41,689
<font color="#E5E5E5">Python everything looks really really</font>

371
00:15:39,800 --> 00:15:43,520
good<font color="#CCCCCC"> in fact</font><font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> just showing this to</font>

372
00:15:41,690 --> 00:15:45,350
show<font color="#E5E5E5"> you something about Python</font><font color="#CCCCCC"> these</font>

373
00:15:43,520 --> 00:15:49,670
are only undocumented things that I came

374
00:15:45,350 --> 00:15:52,070
<font color="#E5E5E5">across the first one is mind tools as a</font>

375
00:15:49,670 --> 00:15:54,170
function pipe<font color="#CCCCCC"> 2 that the value ID</font><font color="#E5E5E5"> will</font>

376
00:15:52,070 --> 00:15:54,589
get executed<font color="#E5E5E5"> with whatever you put over</font>

377
00:15:54,170 --> 00:15:58,849
<font color="#E5E5E5">there</font>

378
00:15:54,589 --> 00:16:00,589
so normally when<font color="#CCCCCC"> you look on the Python</font>

379
00:15:58,850 --> 00:16:02,810
library<font color="#CCCCCC"> have which are the functions</font>

380
00:16:00,589 --> 00:16:05,180
that execute code<font color="#E5E5E5"> this is not over there</font>

381
00:16:02,810 --> 00:16:07,369
<font color="#E5E5E5">but this is a possibility if you're able</font>

382
00:16:05,180 --> 00:16:09,859
<font color="#CCCCCC">to</font><font color="#E5E5E5"> affect this function you may be able</font>

383
00:16:07,370 --> 00:16:11,540
<font color="#CCCCCC">to execute</font><font color="#E5E5E5"> operating system comments</font>

384
00:16:09,860 --> 00:16:15,740
<font color="#E5E5E5">without</font><font color="#CCCCCC"> using the operating system</font>

385
00:16:11,540 --> 00:16:19,010
library the same thing goes<font color="#E5E5E5"> to we talked</font>

386
00:16:15,740 --> 00:16:21,200
a<font color="#CCCCCC"> ship where you put for example</font><font color="#E5E5E5"> an</font><font color="#CCCCCC"> ID</font>

387
00:16:19,010 --> 00:16:25,040
<font color="#E5E5E5">over the air will get executed you will</font>

388
00:16:21,200 --> 00:16:26,930
say it<font color="#E5E5E5"> over here not</font><font color="#CCCCCC"> a big deal what I</font>

389
00:16:25,040 --> 00:16:28,670
found<font color="#CCCCCC"> it to be interesting</font><font color="#E5E5E5"> and funny I</font>

390
00:16:26,930 --> 00:16:30,829
think<font color="#E5E5E5"> this is what</font><font color="#CCCCCC"> again</font><font color="#E5E5E5"> a little</font><font color="#CCCCCC"> bit</font>

391
00:16:28,670 --> 00:16:35,360
<font color="#E5E5E5">weird</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> you're talking</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> the same</font>

392
00:16:30,830 --> 00:16:37,880
<font color="#E5E5E5">library I don't know if it was the</font><font color="#CCCCCC"> same</font>

393
00:16:35,360 --> 00:16:41,600
language<font color="#E5E5E5"> when executing the patient file</font>

394
00:16:37,880 --> 00:16:45,080
<font color="#E5E5E5">from PI dog if you set the</font><font color="#CCCCCC"> environment</font>

395
00:16:41,600 --> 00:16:46,880
variable pager<font color="#E5E5E5"> it will try to execute</font>

396
00:16:45,080 --> 00:16:51,500
whatever<font color="#E5E5E5"> it contains over here and</font><font color="#CCCCCC"> we'll</font>

397
00:16:46,880 --> 00:16:53,420
ride it on the<font color="#E5E5E5"> starter output I would</font>

398
00:16:51,500 --> 00:16:55,490
like<font color="#E5E5E5"> to know that if this is going to</font>

399
00:16:53,420 --> 00:16:57,079
<font color="#CCCCCC">happen</font><font color="#E5E5E5"> on an application if you have</font><font color="#CCCCCC"> it</font>

400
00:16:55,490 --> 00:17:02,240
over<font color="#CCCCCC"> there</font><font color="#E5E5E5"> you can take</font><font color="#CCCCCC"> a look</font><font color="#E5E5E5"> and see</font>

401
00:16:57,080 --> 00:17:05,689
if something is vulnerable so let's move

402
00:17:02,240 --> 00:17:09,199
to parallel these was really funny

403
00:17:05,689 --> 00:17:12,559
these<font color="#CCCCCC"> pro hac the only programming</font>

404
00:17:09,199 --> 00:17:14,750
language<font color="#CCCCCC"> that was</font><font color="#E5E5E5"> able</font><font color="#CCCCCC"> to parse a piece</font>

405
00:17:12,559 --> 00:17:17,178
of code where it was not expecting to<font color="#CCCCCC"> be</font>

406
00:17:14,750 --> 00:17:20,150
executed<font color="#E5E5E5"> you can sit in the</font><font color="#CCCCCC"> middle of</font>

407
00:17:17,179 --> 00:17:21,829
the stack<font color="#E5E5E5"> trace of the embeddable time</font>

408
00:17:20,150 --> 00:17:25,160
<font color="#E5E5E5">map that</font><font color="#CCCCCC"> i</font><font color="#E5E5E5"> have no idea why</font><font color="#CCCCCC"> they decided</font>

409
00:17:21,829 --> 00:17:25,760
<font color="#E5E5E5">to execute code but it did and that's</font>

410
00:17:25,160 --> 00:17:27,260
bad

411
00:17:25,760 --> 00:17:27,740
at least you<font color="#E5E5E5"> want to know it</font><font color="#CCCCCC"> it doesn't</font>

412
00:17:27,260 --> 00:17:29,710
<font color="#CCCCCC">say</font>

413
00:17:27,740 --> 00:17:33,920
anything on the documentation<font color="#CCCCCC"> about this</font>

414
00:17:29,710 --> 00:17:35,929
so again<font color="#E5E5E5"> these</font><font color="#CCCCCC"> are all features that are</font>

415
00:17:33,920 --> 00:17:40,100
over there<font color="#CCCCCC"> you can execute this right</font>

416
00:17:35,929 --> 00:17:43,160
<font color="#E5E5E5">away let's talk about JavaScript again</font>

417
00:17:40,100 --> 00:17:45,909
<font color="#CCCCCC">in here</font><font color="#E5E5E5"> you're trying to use the</font>

418
00:17:43,160 --> 00:17:49,010
function required<font color="#E5E5E5"> when what it does it</font>

419
00:17:45,910 --> 00:17:51,760
it tries<font color="#CCCCCC"> to read a JavaScript file on</font>

420
00:17:49,010 --> 00:17:53,929
the left<font color="#E5E5E5"> you have checker core that says</font>

421
00:17:51,760 --> 00:17:55,879
the first<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> that I came across</font><font color="#E5E5E5"> in</font>

422
00:17:53,929 --> 00:17:58,250
<font color="#CCCCCC">about a character I I cannot read this</font>

423
00:17:55,880 --> 00:18:00,770
this is not a JavaScript file which it

424
00:17:58,250 --> 00:18:03,080
makes<font color="#CCCCCC"> a little sense</font><font color="#E5E5E5"> on the right I'll</font>

425
00:18:00,770 --> 00:18:05,900
show you the first<font color="#E5E5E5"> line</font><font color="#CCCCCC"> and say hey this</font>

426
00:18:03,080 --> 00:18:06,580
is<font color="#E5E5E5"> no</font><font color="#CCCCCC"> JavaScript</font><font color="#E5E5E5"> if it is</font><font color="#CCCCCC"> don't show</font><font color="#E5E5E5"> me</font>

427
00:18:05,900 --> 00:18:13,340
this

428
00:18:06,580 --> 00:18:16,550
so JRuby funny<font color="#E5E5E5"> so what I did was compare</font>

429
00:18:13,340 --> 00:18:19,639
<font color="#E5E5E5">Ruby to JRuby and again I put</font><font color="#CCCCCC"> all the</font>

430
00:18:16,550 --> 00:18:21,530
financial support of the values<font color="#CCCCCC"> I've</font>

431
00:18:19,640 --> 00:18:25,130
recently learned<font color="#E5E5E5"> that there are two J</font>

432
00:18:21,530 --> 00:18:26,629
Robbie<font color="#E5E5E5"> different versions</font><font color="#CCCCCC"> Forks</font><font color="#E5E5E5"> one is</font>

433
00:18:25,130 --> 00:18:28,790
the<font color="#E5E5E5"> first one</font><font color="#CCCCCC"> the other one is the</font>

434
00:18:26,630 --> 00:18:32,090
version orientated for<font color="#CCCCCC"> counting two</font>

435
00:18:28,790 --> 00:18:34,639
<font color="#E5E5E5">things both of</font><font color="#CCCCCC"> the latest versions the</font>

436
00:18:32,090 --> 00:18:36,409
line of<font color="#E5E5E5"> v1</font><font color="#CCCCCC"> behaves in one way</font><font color="#E5E5E5"> and the</font>

437
00:18:34,640 --> 00:18:40,460
<font color="#CCCCCC">other one behaves in another way so in</font>

438
00:18:36,410 --> 00:18:44,330
here<font color="#CCCCCC"> break files are something related</font>

439
00:18:40,460 --> 00:18:46,730
to Ruby that<font color="#E5E5E5"> executes Ruby code which is</font>

440
00:18:44,330 --> 00:18:50,030
cool it's okay<font color="#CCCCCC"> you</font><font color="#E5E5E5"> have a lower drag</font>

441
00:18:46,730 --> 00:18:52,850
file method<font color="#E5E5E5"> that it reads in Ruby code</font>

442
00:18:50,030 --> 00:18:54,050
<font color="#E5E5E5">locally then</font><font color="#CCCCCC"> executes</font><font color="#E5E5E5"> things so when</font>

443
00:18:52,850 --> 00:18:56,990
you're<font color="#E5E5E5"> trying to do something on the</font>

444
00:18:54,050 --> 00:18:58,790
<font color="#E5E5E5">Left we prove it says well that file</font>

445
00:18:56,990 --> 00:19:02,360
that remote<font color="#E5E5E5"> farther</font><font color="#CCCCCC"> you trying to</font><font color="#E5E5E5"> load</font>

446
00:18:58,790 --> 00:19:04,220
doesn't<font color="#E5E5E5"> exist there's no local however</font>

447
00:19:02,360 --> 00:19:06,229
JRuby<font color="#E5E5E5"> doesn't care</font>

448
00:19:04,220 --> 00:19:12,140
<font color="#CCCCCC">open scenario connection retrieves the</font>

449
00:19:06,230 --> 00:19:17,090
Ruby<font color="#E5E5E5"> code and gets executed magic now</font>

450
00:19:12,140 --> 00:19:18,350
PHP this is something I'll save it<font color="#E5E5E5"> for</font>

451
00:19:17,090 --> 00:19:21,169
<font color="#CCCCCC">the end because it's a</font><font color="#E5E5E5"> little bit more</font>

452
00:19:18,350 --> 00:19:25,340
complex<font color="#E5E5E5"> and it's a little</font><font color="#CCCCCC"> bit</font><font color="#E5E5E5"> more funny</font>

453
00:19:21,170 --> 00:19:27,530
because<font color="#CCCCCC"> what what happens in here on the</font>

454
00:19:25,340 --> 00:19:30,949
<font color="#E5E5E5">left you have a string</font>

455
00:19:27,530 --> 00:19:33,980
getting executed by shell exit PHP<font color="#CCCCCC"> has</font>

456
00:19:30,950 --> 00:19:35,870
like four different<font color="#E5E5E5"> ways of execute</font>

457
00:19:33,980 --> 00:19:38,600
operating system this is one<font color="#CCCCCC"> of them</font><font color="#E5E5E5"> to</font>

458
00:19:35,870 --> 00:19:39,709
<font color="#E5E5E5">Sheila say the main thing</font><font color="#CCCCCC"> that I'm going</font>

459
00:19:38,600 --> 00:19:42,500
<font color="#E5E5E5">to talk</font><font color="#CCCCCC"> about</font>

460
00:19:39,710 --> 00:19:44,179
works for I think a list with all<font color="#CCCCCC"> the</font>

461
00:19:42,500 --> 00:19:47,330
<font color="#CCCCCC">functions that</font><font color="#E5E5E5"> execute operating system</font>

462
00:19:44,179 --> 00:19:49,940
<font color="#E5E5E5">comments from PHP on the left everything</font>

463
00:19:47,330 --> 00:19:51,678
is clear this is<font color="#CCCCCC"> not a bug this is cool</font>

464
00:19:49,940 --> 00:19:54,260
<font color="#CCCCCC">this is expected you're executing things</font>

465
00:19:51,679 --> 00:19:56,330
things work<font color="#CCCCCC"> arcs expected on the</font>

466
00:19:54,260 --> 00:19:59,230
<font color="#CCCCCC">right-hand whether you're trying to</font>

467
00:19:56,330 --> 00:20:02,389
execute<font color="#E5E5E5"> a constant the constant ID and</font>

468
00:19:59,230 --> 00:20:04,010
PHP<font color="#E5E5E5"> when a choice to execute this one</font>

469
00:20:02,390 --> 00:20:05,570
liner<font color="#E5E5E5"> it only got this</font>

470
00:20:04,010 --> 00:20:08,750
it only has<font color="#E5E5E5"> this</font><font color="#CCCCCC"> information I'm telling</font>

471
00:20:05,570 --> 00:20:11,029
<font color="#E5E5E5">Troy to execute the</font><font color="#CCCCCC"> constant ID</font><font color="#E5E5E5"> PHP says</font>

472
00:20:08,750 --> 00:20:12,860
ID is not here<font color="#CCCCCC"> so what I'm</font><font color="#E5E5E5"> going to do</font>

473
00:20:11,029 --> 00:20:15,710
I'm going to<font color="#E5E5E5"> assume that ID is a string</font>

474
00:20:12,860 --> 00:20:17,500
<font color="#E5E5E5">and I'm going</font><font color="#CCCCCC"> to execute</font><font color="#E5E5E5"> it well</font><font color="#CCCCCC"> I would</font>

475
00:20:15,710 --> 00:20:20,330
prefer<font color="#E5E5E5"> if you didn't do that</font><font color="#CCCCCC"> because</font>

476
00:20:17,500 --> 00:20:21,559
<font color="#E5E5E5">something like this may happen let's</font>

477
00:20:20,330 --> 00:20:24,879
suppose<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you have an application</font>

478
00:20:21,559 --> 00:20:27,470
<font color="#CCCCCC">that has two files the first</font><font color="#E5E5E5"> one defines</font>

479
00:20:24,880 --> 00:20:31,159
the bash constant<font color="#E5E5E5"> this is going to</font>

480
00:20:27,470 --> 00:20:35,270
execute<font color="#E5E5E5"> the common man</font><font color="#CCCCCC"> okay the second</font>

481
00:20:31,159 --> 00:20:39,620
<font color="#CCCCCC">file is going to execute</font><font color="#E5E5E5"> the constant</font>

482
00:20:35,270 --> 00:20:43,490
<font color="#CCCCCC">bash is going to put as a parameter what</font>

483
00:20:39,620 --> 00:20:46,760
<font color="#E5E5E5">we send it on</font><font color="#CCCCCC"> the page parameter</font><font color="#E5E5E5"> it's</font>

484
00:20:43,490 --> 00:20:49,299
going to show it let's see if a live

485
00:20:46,760 --> 00:20:49,299
demo works

486
00:21:01,850 --> 00:21:11,959
first of<font color="#E5E5E5"> all I'm going</font><font color="#CCCCCC"> to clear the</font>

487
00:21:03,680 --> 00:21:15,890
<font color="#E5E5E5">locks</font><font color="#CCCCCC"> so here we have the the index.php</font>

488
00:21:11,960 --> 00:21:18,050
that I was telling<font color="#CCCCCC"> you about at</font><font color="#E5E5E5"> the top</font>

489
00:21:15,890 --> 00:21:20,750
you can<font color="#E5E5E5"> see</font><font color="#CCCCCC"> that I'm using the page</font>

490
00:21:18,050 --> 00:21:23,810
parameter and<font color="#CCCCCC"> pulling LS over there</font><font color="#E5E5E5"> I'm</font>

491
00:21:20,750 --> 00:21:34,240
trying<font color="#CCCCCC"> to see</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> main page for LS so if</font>

492
00:21:23,810 --> 00:21:34,240
we changed the LS to something else<font color="#E5E5E5"> okay</font>

493
00:21:46,720 --> 00:21:52,890
better<font color="#CCCCCC"> know okay</font><font color="#E5E5E5"> you can see them</font><font color="#CCCCCC"> over</font>

494
00:21:51,850 --> 00:21:56,520
<font color="#CCCCCC">there</font>

495
00:21:52,890 --> 00:21:56,520
<font color="#CCCCCC">increase the phone I'm sorry</font>

496
00:22:13,910 --> 00:22:43,590
<font color="#CCCCCC">to be honest</font><font color="#E5E5E5"> well no the contract before</font>

497
00:22:27,630 --> 00:22:46,650
or perhaps okay with<font color="#CCCCCC"> ship better okay</font><font color="#E5E5E5"> so</font>

498
00:22:43,590 --> 00:22:48,060
we have the man patient<font color="#CCCCCC"> top we have the</font>

499
00:22:46,650 --> 00:22:52,430
logs over<font color="#E5E5E5"> here that I clean right now</font>

500
00:22:48,060 --> 00:22:55,679
let's do a refresh<font color="#E5E5E5"> in here</font><font color="#CCCCCC"> we will see</font>

501
00:22:52,430 --> 00:22:59,580
the<font color="#CCCCCC"> Getty</font><font color="#E5E5E5"> here just something normal</font>

502
00:22:55,680 --> 00:23:07,110
as expected<font color="#E5E5E5"> but what happens if we call</font>

503
00:22:59,580 --> 00:23:10,050
<font color="#E5E5E5">directly the functions page so right now</font>

504
00:23:07,110 --> 00:23:12,330
if I do this the constant<font color="#E5E5E5"> Bosch is not</font>

505
00:23:10,050 --> 00:23:16,169
going to be executed<font color="#E5E5E5"> but the three in</font>

506
00:23:12,330 --> 00:23:18,720
Bosch and you can do whatever you want

507
00:23:16,170 --> 00:23:21,600
<font color="#CCCCCC">right because Bash is getting executed</font>

508
00:23:18,720 --> 00:23:22,490
<font color="#E5E5E5">there you have the teacher password and</font>

509
00:23:21,600 --> 00:23:26,969
here

510
00:23:22,490 --> 00:23:29,220
PHP assume<font color="#E5E5E5"> Bosch just because it was not</font>

511
00:23:26,970 --> 00:23:31,650
<font color="#E5E5E5">over there so in the</font><font color="#CCCCCC"> sense that</font><font color="#E5E5E5"> is going</font>

512
00:23:29,220 --> 00:23:35,190
to execute the string<font color="#E5E5E5"> instead of the</font>

513
00:23:31,650 --> 00:23:37,560
<font color="#CCCCCC">constant so if there is any application</font>

514
00:23:35,190 --> 00:23:40,680
<font color="#E5E5E5">with PHP defined in this way right now</font>

515
00:23:37,560 --> 00:23:43,260
you may<font color="#E5E5E5"> get code execution depending on</font>

516
00:23:40,680 --> 00:23:45,630
the name of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> content depending</font><font color="#E5E5E5"> on the</font>

517
00:23:43,260 --> 00:23:51,549
constant has have been<font color="#E5E5E5"> named you may get</font>

518
00:23:45,630 --> 00:23:55,269
<font color="#E5E5E5">something like this so</font>

519
00:23:51,549 --> 00:24:00,190
this is where the this was kind kind of

520
00:23:55,269 --> 00:24:03,039
safe and this<font color="#E5E5E5"> was in case</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> the demo</font>

521
00:24:00,190 --> 00:24:05,470
fail<font color="#E5E5E5"> we have a bigger phony here at a</font>

522
00:24:03,039 --> 00:24:07,360
minimum<font color="#E5E5E5"> and this is how it looks like</font>

523
00:24:05,470 --> 00:24:11,429
<font color="#E5E5E5">when you're executing code when you're</font>

524
00:24:07,360 --> 00:24:14,799
<font color="#E5E5E5">calling the</font><font color="#CCCCCC"> functions.php</font><font color="#E5E5E5"> directly so</font>

525
00:24:11,429 --> 00:24:17,320
this is all due to the<font color="#CCCCCC"> thing</font><font color="#E5E5E5"> that these</font>

526
00:24:14,799 --> 00:24:20,830
<font color="#E5E5E5">consoles will be treated as strangely if</font>

527
00:24:17,320 --> 00:24:24,158
they are not found so the final idea

528
00:24:20,830 --> 00:24:25,629
<font color="#E5E5E5">behind all</font><font color="#CCCCCC"> of this</font><font color="#E5E5E5"> is that hidden</font>

529
00:24:24,159 --> 00:24:27,489
applications in programming<font color="#E5E5E5"> languages</font>

530
00:24:25,629 --> 00:24:28,629
can affect the security<font color="#CCCCCC"> of applications</font>

531
00:24:27,489 --> 00:24:30,100
even<font color="#E5E5E5"> though you're not hacking the</font>

532
00:24:28,629 --> 00:24:32,019
application and<font color="#E5E5E5"> you're hacking the</font>

533
00:24:30,100 --> 00:24:34,029
<font color="#E5E5E5">underlying programming language you may</font>

534
00:24:32,019 --> 00:24:36,759
still be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to attack the application</font>

535
00:24:34,029 --> 00:24:38,710
<font color="#CCCCCC">doesn't matter how</font><font color="#E5E5E5"> secure it is the</font>

536
00:24:36,759 --> 00:24:40,480
external differential<font color="#CCCCCC"> fussing can expose</font>

537
00:24:38,710 --> 00:24:43,480
hiding behaviors in<font color="#CCCCCC"> different types of</font>

538
00:24:40,480 --> 00:24:45,999
<font color="#CCCCCC">software and the thing about this is</font>

539
00:24:43,480 --> 00:24:48,340
that<font color="#E5E5E5"> if you're</font><font color="#CCCCCC"> able to</font><font color="#E5E5E5"> lose a piece of</font>

540
00:24:45,999 --> 00:24:49,480
software<font color="#E5E5E5"> on different operating systems</font>

541
00:24:48,340 --> 00:24:51,399
<font color="#E5E5E5">for example or in different</font>

542
00:24:49,480 --> 00:24:53,139
implementations are you getting

543
00:24:51,399 --> 00:24:54,879
different<font color="#E5E5E5"> crashes all over the place</font>

544
00:24:53,139 --> 00:24:57,070
but you're<font color="#E5E5E5"> getting similar crashes on</font>

545
00:24:54,879 --> 00:24:58,918
different operating systems<font color="#E5E5E5"> perhaps the</font>

546
00:24:57,070 --> 00:25:01,299
new vulnerabilities<font color="#E5E5E5"> will try to attack</font>

547
00:24:58,919 --> 00:25:03,730
<font color="#E5E5E5">multiple attack vectors at the same time</font>

548
00:25:01,299 --> 00:25:05,590
by<font color="#E5E5E5"> focusing on the vulnerabilities that</font>

549
00:25:03,730 --> 00:25:09,159
are shared amongst the majority<font color="#CCCCCC"> of</font>

550
00:25:05,590 --> 00:25:11,709
implementations or operating systems if

551
00:25:09,159 --> 00:25:14,230
<font color="#E5E5E5">you want you can the faster it</font><font color="#CCCCCC"> is</font>

552
00:25:11,710 --> 00:25:16,299
available<font color="#E5E5E5"> right</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> you can download it</font>

553
00:25:14,230 --> 00:25:17,859
from<font color="#CCCCCC"> here</font><font color="#E5E5E5"> if you have any problems</font><font color="#CCCCCC"> that</font>

554
00:25:16,299 --> 00:25:21,519
will continue developing the<font color="#E5E5E5"> faster</font>

555
00:25:17,859 --> 00:25:24,879
fixing<font color="#CCCCCC"> box of stuff like</font><font color="#E5E5E5"> that and if you</font>

556
00:25:21,519 --> 00:25:27,759
have any doubts<font color="#E5E5E5"> we have a few minutes to</font>

557
00:25:24,879 --> 00:25:29,168
answer<font color="#E5E5E5"> a few questions if not you will</font>

558
00:25:27,759 --> 00:25:34,799
find me outside<font color="#E5E5E5"> for</font><font color="#CCCCCC"> the next half an</font>

559
00:25:29,169 --> 00:25:34,799
<font color="#E5E5E5">hour anyone wants to ask something sorry</font>

560
00:25:39,300 --> 00:25:43,570
<font color="#CCCCCC">thank you great presentation by the</font><font color="#E5E5E5"> way</font>

561
00:25:41,440 --> 00:25:45,520
<font color="#CCCCCC">just curious do you</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> a similar</font>

562
00:25:43,570 --> 00:25:48,370
<font color="#CCCCCC">costed where we can actually find</font><font color="#E5E5E5"> all of</font>

563
00:25:45,520 --> 00:25:49,690
these snippets<font color="#CCCCCC"> called examples and where</font>

564
00:25:48,370 --> 00:25:51,370
you document<font color="#E5E5E5"> all</font><font color="#CCCCCC"> of these</font><font color="#E5E5E5"> findings</font>

565
00:25:49,690 --> 00:25:54,070
because<font color="#CCCCCC"> this perhaps</font><font color="#E5E5E5"> a small sample</font>

566
00:25:51,370 --> 00:25:55,750
where is the actual everything along

567
00:25:54,070 --> 00:25:58,240
<font color="#E5E5E5">with the black</font><font color="#CCCCCC"> hat</font><font color="#E5E5E5"> would release the</font>

568
00:25:55,750 --> 00:26:00,160
white paper associated to the white

569
00:25:58,240 --> 00:26:04,120
paper contains all the snippets of code

570
00:26:00,160 --> 00:26:08,620
<font color="#E5E5E5">and contains all the theory behind the</font>

571
00:26:04,120 --> 00:26:12,669
this tool and it<font color="#E5E5E5"> is all disclosed over</font>

572
00:26:08,620 --> 00:26:19,469
there it<font color="#E5E5E5"> would be released thank you any</font>

573
00:26:12,670 --> 00:26:19,470
other question thank you<font color="#CCCCCC"> very</font><font color="#E5E5E5"> much</font>

