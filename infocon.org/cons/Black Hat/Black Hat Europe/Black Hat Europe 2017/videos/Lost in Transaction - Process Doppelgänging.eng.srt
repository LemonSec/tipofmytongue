1
00:00:00,030 --> 00:00:04,890
good morning everyone it's great to be

2
00:00:03,480 --> 00:00:07,770
here

3
00:00:04,890 --> 00:00:11,610
welcome to lost in transaction process

4
00:00:07,770 --> 00:00:13,799
doppelganger my name is<font color="#CCCCCC"> Holly Burman and</font>

5
00:00:11,610 --> 00:00:17,039
the security research team leader at in

6
00:00:13,799 --> 00:00:17,550
silo<font color="#E5E5E5"> with me here is Eugene hello Eugene</font>

7
00:00:17,039 --> 00:00:20,880
<font color="#E5E5E5">:</font>

8
00:00:17,550 --> 00:00:23,630
social developer from Salem<font color="#E5E5E5"> and today</font>

9
00:00:20,880 --> 00:00:26,070
we're gonna<font color="#E5E5E5"> be</font><font color="#CCCCCC"> talking</font><font color="#E5E5E5"> about</font>

10
00:00:23,630 --> 00:00:28,890
<font color="#CCCCCC">doppelganger chizz a new evasion</font>

11
00:00:26,070 --> 00:00:30,179
<font color="#CCCCCC">technique for</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> Windows and we're</font>

12
00:00:28,890 --> 00:00:33,690
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> start off</font><font color="#CCCCCC"> by talking about the</font>

13
00:00:30,179 --> 00:00:35,850
<font color="#CCCCCC">history of evasion techniques we're</font>

14
00:00:33,690 --> 00:00:37,620
gonna move on<font color="#E5E5E5"> to talk about</font><font color="#CCCCCC"> AV scanners</font>

15
00:00:35,850 --> 00:00:39,690
<font color="#E5E5E5">and all the different factors</font><font color="#CCCCCC"> to</font>

16
00:00:37,620 --> 00:00:42,419
consider when implementing one then

17
00:00:39,690 --> 00:00:44,789
we're gonna discuss transacted NTFS or

18
00:00:42,420 --> 00:00:46,860
txf as this is known it's known by

19
00:00:44,789 --> 00:00:48,690
<font color="#E5E5E5">Microsoft and then move on to</font><font color="#CCCCCC"> discuss</font>

20
00:00:46,860 --> 00:00:51,059
<font color="#E5E5E5">the evolution</font><font color="#CCCCCC"> of the Windows process</font>

21
00:00:48,690 --> 00:00:53,160
loader<font color="#E5E5E5"> over the years finally we're</font>

22
00:00:51,059 --> 00:00:56,070
<font color="#E5E5E5">going to get to the</font><font color="#CCCCCC"> doppelganger NEX</font>

23
00:00:53,160 --> 00:00:58,379
accusin<font color="#E5E5E5"> flow followed by a live demo</font><font color="#CCCCCC"> and</font>

24
00:00:56,070 --> 00:01:01,109
then if we have<font color="#CCCCCC"> time we'll discuss a</font>

25
00:00:58,379 --> 00:01:02,940
<font color="#E5E5E5">mitigation</font><font color="#CCCCCC"> in redstone</font><font color="#E5E5E5"> a story of a blue</font>

26
00:01:01,109 --> 00:01:07,500
<font color="#CCCCCC">screen of death</font><font color="#E5E5E5"> that we ran</font><font color="#CCCCCC"> into while</font>

27
00:01:02,940 --> 00:01:09,090
conducting<font color="#E5E5E5"> this research so advanced</font>

28
00:01:07,500 --> 00:01:11,490
code injection<font color="#E5E5E5"> techniques and evasion</font>

29
00:01:09,090 --> 00:01:14,310
<font color="#CCCCCC">techniques evident with a spurt</font><font color="#E5E5E5"> for many</font>

30
00:01:11,490 --> 00:01:16,320
years<font color="#E5E5E5"> now</font><font color="#CCCCCC"> notable methods are</font><font color="#E5E5E5"> ghost</font>

31
00:01:14,310 --> 00:01:18,360
<font color="#E5E5E5">writing atom bombing power loading</font>

32
00:01:16,320 --> 00:01:21,419
propagating which was<font color="#E5E5E5"> only recently</font>

33
00:01:18,360 --> 00:01:24,170
<font color="#E5E5E5">released a few</font><font color="#CCCCCC"> weeks ago we have</font>

34
00:01:21,420 --> 00:01:26,790
reflective loading which is loading of

35
00:01:24,170 --> 00:01:29,310
<font color="#CCCCCC">dll files into</font><font color="#E5E5E5"> memory without ever</font>

36
00:01:26,790 --> 00:01:30,900
placing them on disk<font color="#CCCCCC"> and we have process</font>

37
00:01:29,310 --> 00:01:32,880
<font color="#CCCCCC">hollowing which is</font><font color="#E5E5E5"> basically running a</font>

38
00:01:30,900 --> 00:01:34,890
malicious process inside of a container

39
00:01:32,880 --> 00:01:37,439
process<font color="#E5E5E5"> so let's take a look at a bunch</font>

40
00:01:34,890 --> 00:01:41,070
of<font color="#E5E5E5"> these</font><font color="#CCCCCC"> we'll</font><font color="#E5E5E5"> start off with ghost</font>

41
00:01:37,439 --> 00:01:43,529
<font color="#E5E5E5">writing this as the author describes</font><font color="#CCCCCC"> it</font>

42
00:01:41,070 --> 00:01:45,270
is a paradox<font color="#E5E5E5"> writing to another process</font>

43
00:01:43,530 --> 00:01:47,970
<font color="#E5E5E5">without opening it nor actually writing</font>

44
00:01:45,270 --> 00:01:49,470
<font color="#CCCCCC">to it</font><font color="#E5E5E5"> and it's an injection technique</font>

45
00:01:47,970 --> 00:01:52,020
from actually over a decade ago from

46
00:01:49,470 --> 00:01:53,640
April 2010<font color="#E5E5E5"> and it hasn't really received</font>

47
00:01:52,020 --> 00:01:56,369
much attention<font color="#CCCCCC"> so it's why I decided</font><font color="#E5E5E5"> to</font>

48
00:01:53,640 --> 00:02:00,240
cover it<font color="#CCCCCC"> in this talk the goal here is</font>

49
00:01:56,369 --> 00:02:01,579
to inject arbitrary code into a process

50
00:02:00,240 --> 00:02:05,548
in this<font color="#E5E5E5"> example specifically</font>

51
00:02:01,579 --> 00:02:06,750
explorer.exe<font color="#CCCCCC"> and do that</font><font color="#E5E5E5"> without opening</font>

52
00:02:05,549 --> 00:02:08,399
the process without<font color="#CCCCCC"> writing through the</font>

53
00:02:06,750 --> 00:02:10,500
processes memory<font color="#E5E5E5"> without creating any</font>

54
00:02:08,399 --> 00:02:12,650
threads in the process<font color="#E5E5E5"> or using</font><font color="#CCCCCC"> a PC is</font>

55
00:02:10,500 --> 00:02:16,069
<font color="#CCCCCC">in whatever</font>

56
00:02:12,650 --> 00:02:20,930
now this technique<font color="#E5E5E5"> works by by first</font>

57
00:02:16,069 --> 00:02:22,909
finding<font color="#CCCCCC"> two patterns in</font><font color="#E5E5E5"> ntdll we're</font>

58
00:02:20,930 --> 00:02:25,519
gonna call them the loop<font color="#E5E5E5"> pattern and the</font>

59
00:02:22,909 --> 00:02:28,190
jump pattern now<font color="#E5E5E5"> we're gonna use</font><font color="#CCCCCC"> these</font>

60
00:02:25,519 --> 00:02:31,250
two<font color="#E5E5E5"> patterns to achieve what we call a</font>

61
00:02:28,190 --> 00:02:34,519
right what<font color="#CCCCCC"> we're which</font><font color="#E5E5E5"> is basically the</font>

62
00:02:31,250 --> 00:02:37,239
<font color="#E5E5E5">ability to write whatever</font><font color="#CCCCCC"> we want into</font>

63
00:02:34,519 --> 00:02:40,610
the target processes address space<font color="#E5E5E5"> and</font>

64
00:02:37,239 --> 00:02:41,840
do<font color="#E5E5E5"> that into any address that we want so</font>

65
00:02:40,610 --> 00:02:43,459
let's<font color="#CCCCCC"> start off by</font><font color="#E5E5E5"> talking about the</font>

66
00:02:41,840 --> 00:02:44,720
move pattern<font color="#CCCCCC"> the move pattern is a</font>

67
00:02:43,459 --> 00:02:47,510
simple pattern made up of two

68
00:02:44,720 --> 00:02:50,750
instructions in assembly<font color="#E5E5E5"> code the one</font>

69
00:02:47,510 --> 00:02:52,910
being moved<font color="#CCCCCC"> from a an immediate value of</font>

70
00:02:50,750 --> 00:02:55,760
stored in a register<font color="#CCCCCC"> and then storing</font>

71
00:02:52,910 --> 00:02:57,950
that value in<font color="#E5E5E5"> the memory pointed to by</font>

72
00:02:55,760 --> 00:03:01,129
<font color="#E5E5E5">another register so an example would</font><font color="#CCCCCC"> be</font>

73
00:02:57,950 --> 00:03:04,099
<font color="#E5E5E5">this where we</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> move the contents of</font>

74
00:03:01,129 --> 00:03:06,470
<font color="#CCCCCC">EB X register into the</font><font color="#E5E5E5"> memory where</font><font color="#CCCCCC"> ei X</font>

75
00:03:04,099 --> 00:03:08,980
points to and now what we<font color="#E5E5E5"> want to do is</font>

76
00:03:06,470 --> 00:03:13,090
use set thread context API which

77
00:03:08,980 --> 00:03:16,880
controls the registers of<font color="#CCCCCC"> a</font><font color="#E5E5E5"> thread and</font>

78
00:03:13,090 --> 00:03:18,799
set the<font color="#CCCCCC"> EAX register to point to an</font>

79
00:03:16,880 --> 00:03:21,290
address in memory<font color="#E5E5E5"> where we want to write</font>

80
00:03:18,799 --> 00:03:23,389
the double work and then write<font color="#CCCCCC"> that</font>

81
00:03:21,290 --> 00:03:25,280
double word<font color="#CCCCCC"> into EB X</font><font color="#E5E5E5"> and by that we</font><font color="#CCCCCC"> can</font>

82
00:03:23,389 --> 00:03:27,620
write a double<font color="#CCCCCC"> work</font><font color="#E5E5E5"> wherever we want in</font>

83
00:03:25,280 --> 00:03:29,989
memory the<font color="#CCCCCC"> next thing that will happen</font>

84
00:03:27,620 --> 00:03:32,090
is we're going to<font color="#E5E5E5"> return which is the</font>

85
00:03:29,989 --> 00:03:36,319
<font color="#E5E5E5">next part of this little</font><font color="#CCCCCC"> gadget here</font><font color="#E5E5E5"> we</font>

86
00:03:32,090 --> 00:03:37,489
have and this return<font color="#E5E5E5"> there's a</font><font color="#CCCCCC"> problem</font>

87
00:03:36,319 --> 00:03:39,230
with<font color="#E5E5E5"> it because we don't know where it's</font>

88
00:03:37,489 --> 00:03:40,730
going<font color="#CCCCCC"> to return to and so what we're</font>

89
00:03:39,230 --> 00:03:42,709
<font color="#CCCCCC">gonna utilize here is</font><font color="#E5E5E5"> something called</font>

90
00:03:40,730 --> 00:03:44,000
<font color="#E5E5E5">the jump pattern and basically we're</font>

91
00:03:42,709 --> 00:03:45,530
just<font color="#CCCCCC"> gonna look for an instruction that</font>

92
00:03:44,000 --> 00:03:47,510
is a jump<font color="#CCCCCC"> zero which means it's gonna</font>

93
00:03:45,530 --> 00:03:49,220
keep executing<font color="#E5E5E5"> itself again and</font><font color="#CCCCCC"> again</font>

94
00:03:47,510 --> 00:03:50,268
<font color="#E5E5E5">and an infinite loop it's gonna stick</font>

95
00:03:49,220 --> 00:03:53,720
the program and that way we're<font color="#CCCCCC"> gonna</font>

96
00:03:50,269 --> 00:03:54,919
<font color="#CCCCCC">avoid a crash</font><font color="#E5E5E5"> and so using some tricks</font>

97
00:03:53,720 --> 00:03:57,230
<font color="#CCCCCC">that we're not going to cover</font><font color="#E5E5E5"> right now</font>

98
00:03:54,919 --> 00:03:59,629
<font color="#CCCCCC">we're gonna get</font><font color="#E5E5E5"> the return to jump to</font>

99
00:03:57,230 --> 00:04:00,858
this to this jump<font color="#E5E5E5"> and everything is</font>

100
00:03:59,629 --> 00:04:03,888
covered<font color="#E5E5E5"> in this blog post if you're</font>

101
00:04:00,859 --> 00:04:07,010
interested and then this<font color="#E5E5E5"> ability enables</font>

102
00:04:03,889 --> 00:04:08,959
us to iteratively<font color="#CCCCCC"> one double word at a</font>

103
00:04:07,010 --> 00:04:15,168
time<font color="#E5E5E5"> write whatever we want</font><font color="#CCCCCC"> wherever we</font>

104
00:04:08,959 --> 00:04:17,000
want now once we<font color="#CCCCCC"> have this right</font><font color="#E5E5E5"> what</font>

105
00:04:15,169 --> 00:04:19,639
<font color="#CCCCCC">wearability</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can get creative and</font>

106
00:04:17,000 --> 00:04:21,950
think<font color="#E5E5E5"> how</font><font color="#CCCCCC"> can we use this to execute</font>

107
00:04:19,639 --> 00:04:23,630
code<font color="#CCCCCC"> in</font><font color="#E5E5E5"> this specific example the author</font>

108
00:04:21,950 --> 00:04:25,849
<font color="#E5E5E5">decided to write a shell code onto the</font>

109
00:04:23,630 --> 00:04:28,730
stack<font color="#CCCCCC"> of the of the</font>

110
00:04:25,850 --> 00:04:31,280
<font color="#E5E5E5">target thread and then using separate</font>

111
00:04:28,730 --> 00:04:32,810
context<font color="#CCCCCC"> call virtual protects to change</font>

112
00:04:31,280 --> 00:04:35,349
the protection<font color="#E5E5E5"> of the page make it</font>

113
00:04:32,810 --> 00:04:37,340
executable<font color="#E5E5E5"> and then run</font><font color="#CCCCCC"> shellcode</font>

114
00:04:35,350 --> 00:04:40,280
another<font color="#E5E5E5"> injection technique that</font>

115
00:04:37,340 --> 00:04:42,979
<font color="#CCCCCC">actually we released about</font><font color="#E5E5E5"> a year</font><font color="#CCCCCC"> ago</font>

116
00:04:40,280 --> 00:04:46,070
<font color="#E5E5E5">which was in October</font><font color="#CCCCCC"> of 2016 is called</font>

117
00:04:42,980 --> 00:04:47,510
atom bombing and that<font color="#E5E5E5"> uses the global</font>

118
00:04:46,070 --> 00:04:50,719
atom table and APCs

119
00:04:47,510 --> 00:04:52,460
which are<font color="#CCCCCC"> async procedure calls</font><font color="#E5E5E5"> now we</font>

120
00:04:50,720 --> 00:04:55,280
actually witnessed this being used<font color="#E5E5E5"> in</font>

121
00:04:52,460 --> 00:04:59,539
the<font color="#E5E5E5"> wild by dry decks the notorious</font>

122
00:04:55,280 --> 00:05:02,840
banking Trojan now<font color="#E5E5E5"> atom bombing works by</font>

123
00:04:59,540 --> 00:05:06,950
basically<font color="#E5E5E5"> having</font><font color="#CCCCCC"> a malicious process</font>

124
00:05:02,840 --> 00:05:09,020
store code in the<font color="#E5E5E5"> global atom table now</font>

125
00:05:06,950 --> 00:05:12,289
<font color="#E5E5E5">this is done by using the global add</font>

126
00:05:09,020 --> 00:05:15,349
<font color="#E5E5E5">atom API and then what we do here is</font><font color="#CCCCCC"> we</font>

127
00:05:12,290 --> 00:05:18,700
have<font color="#E5E5E5"> a</font><font color="#CCCCCC"> legitimate process</font><font color="#E5E5E5"> we issue an</font>

128
00:05:15,350 --> 00:05:21,980
APC call or an ASIC procedure call<font color="#E5E5E5"> to</font>

129
00:05:18,700 --> 00:05:23,599
the legitimate<font color="#CCCCCC"> process and thereby</font><font color="#E5E5E5"> sort</font>

130
00:05:21,980 --> 00:05:26,390
of force it to<font color="#E5E5E5"> retrieve the code from</font>

131
00:05:23,600 --> 00:05:28,190
<font color="#CCCCCC">the from the atom table</font><font color="#E5E5E5"> and store it in</font>

132
00:05:26,390 --> 00:05:29,900
its<font color="#E5E5E5"> own memory in the readwrite location</font>

133
00:05:28,190 --> 00:05:33,230
at<font color="#E5E5E5"> which point</font><font color="#CCCCCC"> we go on to do some</font>

134
00:05:29,900 --> 00:05:35,390
<font color="#E5E5E5">return oriented programming to allocate</font>

135
00:05:33,230 --> 00:05:37,790
<font color="#E5E5E5">virtual memory that is executable copy</font>

136
00:05:35,390 --> 00:05:40,490
the memory<font color="#E5E5E5"> from</font><font color="#CCCCCC"> the readwrite section to</font>

137
00:05:37,790 --> 00:05:44,810
the executable<font color="#CCCCCC"> memory and then finally</font>

138
00:05:40,490 --> 00:05:46,150
execute the<font color="#E5E5E5"> shell code now all the</font>

139
00:05:44,810 --> 00:05:48,170
methods that<font color="#E5E5E5"> we've discussed so far</font>

140
00:05:46,150 --> 00:05:50,960
<font color="#CCCCCC">ghostwriting atom bombing and</font><font color="#E5E5E5"> the rest</font>

141
00:05:48,170 --> 00:05:54,230
<font color="#E5E5E5">allow you to execute</font><font color="#CCCCCC"> shellcode and a</font>

142
00:05:50,960 --> 00:05:56,510
target process<font color="#E5E5E5"> so usually an attacker</font>

143
00:05:54,230 --> 00:05:58,400
would want to have their code<font color="#E5E5E5"> running</font>

144
00:05:56,510 --> 00:06:00,409
<font color="#CCCCCC">inside of a legitimate</font><font color="#E5E5E5"> very</font>

145
00:05:58,400 --> 00:06:02,120
<font color="#CCCCCC">innocent-looking</font><font color="#E5E5E5"> process which would be</font>

146
00:06:00,410 --> 00:06:04,490
either a system<font color="#CCCCCC"> critical process or a</font>

147
00:06:02,120 --> 00:06:07,100
<font color="#E5E5E5">process that's used</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> the user and so a</font>

148
00:06:04,490 --> 00:06:09,590
crash<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the code of</font><font color="#CCCCCC"> the malware</font>

149
00:06:07,100 --> 00:06:11,450
could significantly impact the<font color="#CCCCCC"> system if</font>

150
00:06:09,590 --> 00:06:12,830
it's in<font color="#E5E5E5"> critical windows process then a</font>

151
00:06:11,450 --> 00:06:15,469
crash could lead to<font color="#E5E5E5"> an</font><font color="#CCCCCC"> even a blue</font>

152
00:06:12,830 --> 00:06:17,330
screen<font color="#CCCCCC"> and then if it's in a user</font>

153
00:06:15,470 --> 00:06:19,370
application such<font color="#CCCCCC"> as Internet Explorer</font>

154
00:06:17,330 --> 00:06:20,840
then obviously the user is<font color="#CCCCCC"> going to</font>

155
00:06:19,370 --> 00:06:23,540
notice something<font color="#CCCCCC"> so it would</font><font color="#E5E5E5"> be very</font>

156
00:06:20,840 --> 00:06:26,330
nice<font color="#E5E5E5"> if there</font><font color="#CCCCCC"> was an</font><font color="#E5E5E5"> ability</font><font color="#CCCCCC"> to create</font><font color="#E5E5E5"> a</font>

157
00:06:23,540 --> 00:06:28,130
process<font color="#E5E5E5"> that will host our malicious</font>

158
00:06:26,330 --> 00:06:29,599
code and if it<font color="#E5E5E5"> crashes it doesn't affect</font>

159
00:06:28,130 --> 00:06:32,600
<font color="#E5E5E5">anything in the system and that's why</font>

160
00:06:29,600 --> 00:06:34,880
<font color="#E5E5E5">cross</font><font color="#CCCCCC"> hollowing was invented now the way</font>

161
00:06:32,600 --> 00:06:38,120
process<font color="#CCCCCC"> Halloween works is that we first</font>

162
00:06:34,880 --> 00:06:39,600
create a legitimate process<font color="#E5E5E5"> in a</font>

163
00:06:38,120 --> 00:06:43,940
suspended<font color="#E5E5E5"> state</font><font color="#CCCCCC"> from something</font>

164
00:06:39,600 --> 00:06:46,170
just SVC<font color="#E5E5E5"> host and now what we</font><font color="#CCCCCC"> have is a</font>

165
00:06:43,940 --> 00:06:47,760
process<font color="#E5E5E5"> that's running in the system or</font>

166
00:06:46,170 --> 00:06:50,130
it's not<font color="#E5E5E5"> yet running but it exists in</font>

167
00:06:47,760 --> 00:06:51,900
system it will<font color="#E5E5E5"> be seen in</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> and the</font>

168
00:06:50,130 --> 00:06:53,640
task manager for<font color="#E5E5E5"> example and this</font>

169
00:06:51,900 --> 00:06:56,580
process<font color="#E5E5E5"> has a process environment block</font>

170
00:06:53,640 --> 00:07:00,419
<font color="#E5E5E5">which points to the main image that is</font>

171
00:06:56,580 --> 00:07:01,919
loaded<font color="#CCCCCC"> now at this</font><font color="#E5E5E5"> point it's important</font>

172
00:07:00,420 --> 00:07:04,680
to note that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> also have the EAX</font>

173
00:07:01,920 --> 00:07:09,540
register<font color="#E5E5E5"> that points to the entry point</font>

174
00:07:04,680 --> 00:07:11,670
<font color="#E5E5E5">of</font><font color="#CCCCCC"> the executable</font><font color="#E5E5E5"> which means that once</font>

175
00:07:09,540 --> 00:07:12,780
the process starts running this is the

176
00:07:11,670 --> 00:07:16,080
first instruction<font color="#E5E5E5"> that's going to</font>

177
00:07:12,780 --> 00:07:19,619
execute so what we go on to do is we

178
00:07:16,080 --> 00:07:21,510
<font color="#CCCCCC">unwrap</font><font color="#E5E5E5"> the main section the main image</font>

179
00:07:19,620 --> 00:07:23,130
and so we have sort<font color="#E5E5E5"> of a hollowed</font>

180
00:07:21,510 --> 00:07:26,159
process and<font color="#E5E5E5"> this is where the method</font>

181
00:07:23,130 --> 00:07:29,670
gets<font color="#CCCCCC"> its name now at this</font><font color="#E5E5E5"> point we move</font>

182
00:07:26,160 --> 00:07:32,610
on to<font color="#E5E5E5"> reallocate the memory for</font><font color="#CCCCCC"> our evil</font>

183
00:07:29,670 --> 00:07:35,220
<font color="#E5E5E5">exe and then we use this memory that</font>

184
00:07:32,610 --> 00:07:36,900
we've reallocated to the<font color="#E5E5E5"> right for each</font>

185
00:07:35,220 --> 00:07:39,150
<font color="#E5E5E5">section in our malicious code we write</font>

186
00:07:36,900 --> 00:07:41,700
<font color="#E5E5E5">it into the</font><font color="#CCCCCC"> target</font><font color="#E5E5E5"> into</font><font color="#CCCCCC"> the container</font>

187
00:07:39,150 --> 00:07:43,830
process at which<font color="#E5E5E5"> point</font><font color="#CCCCCC"> we can move on</font><font color="#E5E5E5"> to</font>

188
00:07:41,700 --> 00:07:45,030
relocate the image if<font color="#CCCCCC"> we need to</font><font color="#E5E5E5"> and set</font>

189
00:07:43,830 --> 00:07:46,740
the base<font color="#E5E5E5"> address in the process</font>

190
00:07:45,030 --> 00:07:48,650
environment block<font color="#E5E5E5"> if we changed it in</font>

191
00:07:46,740 --> 00:07:52,140
this example it's<font color="#CCCCCC"> not necessary and</font>

192
00:07:48,650 --> 00:07:55,190
finally we have<font color="#E5E5E5"> to change</font><font color="#CCCCCC"> the ax to</font>

193
00:07:52,140 --> 00:07:58,590
point to the to the correct entry point

194
00:07:55,190 --> 00:08:00,180
by using set<font color="#E5E5E5"> thread context and at</font><font color="#CCCCCC"> this</font>

195
00:07:58,590 --> 00:08:02,580
<font color="#E5E5E5">point all we have</font><font color="#CCCCCC"> left</font><font color="#E5E5E5"> to do is to run</font>

196
00:08:00,180 --> 00:08:07,710
the<font color="#CCCCCC"> process and so we resume the thread</font>

197
00:08:02,580 --> 00:08:10,080
and everything works<font color="#E5E5E5"> just fine now this</font>

198
00:08:07,710 --> 00:08:12,030
technique was useful<font color="#E5E5E5"> years ago when</font><font color="#CCCCCC"> it</font>

199
00:08:10,080 --> 00:08:14,400
was<font color="#E5E5E5"> invented it was</font><font color="#CCCCCC"> able to bypass</font><font color="#E5E5E5"> a lot</font>

200
00:08:12,030 --> 00:08:16,979
<font color="#E5E5E5">of security solutions but nowadays</font>

201
00:08:14,400 --> 00:08:20,940
<font color="#E5E5E5">vendors are aware of it and are able</font><font color="#CCCCCC"> to</font>

202
00:08:16,980 --> 00:08:23,460
<font color="#E5E5E5">block it that being said let's talk</font>

203
00:08:20,940 --> 00:08:25,170
about<font color="#E5E5E5"> how so the most trivial</font>

204
00:08:23,460 --> 00:08:27,180
implementations of process hollowing

205
00:08:25,170 --> 00:08:28,170
will<font color="#E5E5E5"> create an image that</font><font color="#CCCCCC"> is entirely</font>

206
00:08:27,180 --> 00:08:29,580
<font color="#E5E5E5">read/write/execute</font>

207
00:08:28,170 --> 00:08:30,780
because<font color="#CCCCCC"> it'll</font><font color="#E5E5E5"> allocate everything in one</font>

208
00:08:29,580 --> 00:08:32,699
chunk<font color="#E5E5E5"> and it won't correct the</font>

209
00:08:30,780 --> 00:08:34,199
protection and this<font color="#E5E5E5"> is easy to detect a</font>

210
00:08:32,700 --> 00:08:37,260
numerous<font color="#CCCCCC"> way</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> we're</font><font color="#E5E5E5"> not going to get</font>

211
00:08:34,200 --> 00:08:39,390
<font color="#E5E5E5">into that but if the malware authors</font><font color="#CCCCCC"> are</font>

212
00:08:37,260 --> 00:08:41,069
a bit more<font color="#E5E5E5"> creative</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> they don't just</font>

213
00:08:39,390 --> 00:08:43,260
copy the<font color="#E5E5E5"> first example off</font><font color="#CCCCCC"> of github</font><font color="#E5E5E5"> but</font>

214
00:08:41,070 --> 00:08:45,780
actually implement<font color="#E5E5E5"> themselves then</font>

215
00:08:43,260 --> 00:08:47,610
they'll unmapped the executable and<font color="#CCCCCC"> then</font>

216
00:08:45,780 --> 00:08:49,620
reallocate with correct protection for

217
00:08:47,610 --> 00:08:51,420
example<font color="#CCCCCC"> in which</font><font color="#E5E5E5"> case first of all the</font>

218
00:08:49,620 --> 00:08:53,050
mapping of<font color="#E5E5E5"> the main execute the unmapped</font>

219
00:08:51,420 --> 00:08:55,959
<font color="#E5E5E5">of the main executable</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> high</font>

220
00:08:53,050 --> 00:08:57,790
suspicious<font color="#E5E5E5"> and also what we need to</font>

221
00:08:55,959 --> 00:08:59,949
understand is there for every address<font color="#E5E5E5"> in</font>

222
00:08:57,790 --> 00:09:01,000
<font color="#CCCCCC">windows</font><font color="#E5E5E5"> in a process in</font><font color="#CCCCCC"> Windows</font><font color="#E5E5E5"> we have</font>

223
00:08:59,950 --> 00:09:02,910
something<font color="#E5E5E5"> called the virtual address</font>

224
00:09:01,000 --> 00:09:05,709
descriptor which is a structure that

225
00:09:02,910 --> 00:09:08,740
<font color="#E5E5E5">describes the properties of that address</font>

226
00:09:05,709 --> 00:09:12,699
and the start<font color="#CCCCCC"> address of</font><font color="#E5E5E5"> the thread is</font>

227
00:09:08,740 --> 00:09:15,940
<font color="#E5E5E5">going to have</font><font color="#CCCCCC"> an image map property or</font>

228
00:09:12,700 --> 00:09:18,880
an image<font color="#CCCCCC"> map</font><font color="#E5E5E5"> type when</font><font color="#CCCCCC"> it's first loaded</font>

229
00:09:15,940 --> 00:09:20,980
legitimately<font color="#E5E5E5"> but once the the threat</font>

230
00:09:18,880 --> 00:09:24,040
actor reallocates the memory by

231
00:09:20,980 --> 00:09:25,510
unwrapping the the main module the<font color="#E5E5E5"> type</font>

232
00:09:24,040 --> 00:09:28,480
is going<font color="#E5E5E5"> to change and so we can detect</font>

233
00:09:25,510 --> 00:09:30,730
<font color="#E5E5E5">that let's say the attackers get even</font>

234
00:09:28,480 --> 00:09:32,740
more creative<font color="#CCCCCC"> and they decide to for</font>

235
00:09:30,730 --> 00:09:34,390
<font color="#CCCCCC">example</font><font color="#E5E5E5"> overwrite the original</font>

236
00:09:32,740 --> 00:09:36,760
executable without<font color="#E5E5E5"> unwrapping it</font>

237
00:09:34,390 --> 00:09:37,930
realizing that this change will not<font color="#E5E5E5"> be</font>

238
00:09:36,760 --> 00:09:41,110
<font color="#E5E5E5">reflected</font><font color="#CCCCCC"> in the virtual address</font>

239
00:09:37,930 --> 00:09:42,579
descriptor<font color="#E5E5E5"> so in this case we need to</font>

240
00:09:41,110 --> 00:09:45,790
understand how<font color="#E5E5E5"> Windows works when</font>

241
00:09:42,579 --> 00:09:48,670
mapping images<font color="#E5E5E5"> when mapping an image</font>

242
00:09:45,790 --> 00:09:50,920
there's an<font color="#E5E5E5"> optimization that makes the</font>

243
00:09:48,670 --> 00:09:53,229
pages<font color="#E5E5E5"> of the image shared so that</font><font color="#CCCCCC"> if we</font>

244
00:09:50,920 --> 00:09:55,660
load it into<font color="#CCCCCC"> multiple processes then the</font>

245
00:09:53,230 --> 00:09:58,410
image is loaded<font color="#E5E5E5"> is shared one time</font>

246
00:09:55,660 --> 00:10:01,540
<font color="#E5E5E5">because we don't want the image to be</font>

247
00:09:58,410 --> 00:10:04,360
loaded into every process independently

248
00:10:01,540 --> 00:10:06,550
and thus<font color="#E5E5E5"> taking more memory so when</font>

249
00:10:04,360 --> 00:10:08,800
<font color="#CCCCCC">Windows does this</font><font color="#E5E5E5"> in the something</font>

250
00:10:06,550 --> 00:10:11,020
<font color="#CCCCCC">called the PFN database which describes</font>

251
00:10:08,800 --> 00:10:13,719
the<font color="#E5E5E5"> physical</font><font color="#CCCCCC"> pages of the opera that the</font>

252
00:10:11,020 --> 00:10:15,490
operating<font color="#E5E5E5"> system</font><font color="#CCCCCC"> is working</font><font color="#E5E5E5"> with the</font>

253
00:10:13,720 --> 00:10:18,250
pages themselves<font color="#E5E5E5"> will</font><font color="#CCCCCC"> be marked as</font>

254
00:10:15,490 --> 00:10:21,850
shared<font color="#E5E5E5"> now once a process tries to write</font>

255
00:10:18,250 --> 00:10:23,980
to<font color="#CCCCCC"> that page</font><font color="#E5E5E5"> the page will be</font><font color="#CCCCCC"> turned</font>

256
00:10:21,850 --> 00:10:25,899
into<font color="#E5E5E5"> a private copy just for</font><font color="#CCCCCC"> that</font>

257
00:10:23,980 --> 00:10:27,730
process<font color="#CCCCCC"> because it's no longer shared</font>

258
00:10:25,899 --> 00:10:29,860
and this change will be<font color="#E5E5E5"> reflected in the</font>

259
00:10:27,730 --> 00:10:32,140
<font color="#CCCCCC">pfn database</font><font color="#E5E5E5"> and so the flag</font><font color="#CCCCCC"> that</font>

260
00:10:29,860 --> 00:10:34,839
specified private specifies private or

261
00:10:32,140 --> 00:10:38,079
shared<font color="#E5E5E5"> will turn from 1 to 0 which</font><font color="#CCCCCC"> means</font>

262
00:10:34,839 --> 00:10:39,310
private<font color="#CCCCCC"> and this again we can detect the</font>

263
00:10:38,079 --> 00:10:42,040
<font color="#E5E5E5">attacker and you can get more creative</font>

264
00:10:39,310 --> 00:10:44,020
<font color="#E5E5E5">and try to unmanned dream ramp remap the</font>

265
00:10:42,040 --> 00:10:45,760
<font color="#E5E5E5">image but again if it's not an</font>

266
00:10:44,020 --> 00:10:47,649
executable<font color="#CCCCCC"> than the virtual</font><font color="#E5E5E5"> address the</font>

267
00:10:45,760 --> 00:10:51,370
script is not<font color="#E5E5E5"> going to match and the</font>

268
00:10:47,649 --> 00:10:53,440
most<font color="#E5E5E5"> the best way to do</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> to make</font><font color="#CCCCCC"> it</font>

269
00:10:51,370 --> 00:10:54,190
<font color="#CCCCCC">look as genuine as possible is by</font>

270
00:10:53,440 --> 00:10:56,350
unmapped

271
00:10:54,190 --> 00:10:58,720
and remapping<font color="#CCCCCC"> in another file as an</font>

272
00:10:56,350 --> 00:11:00,640
actual image<font color="#E5E5E5"> in which case first of all</font>

273
00:10:58,720 --> 00:11:01,500
the start address<font color="#CCCCCC"> of the thread is not</font>

274
00:11:00,640 --> 00:11:03,449
going to match the

275
00:11:01,500 --> 00:11:06,720
address of entry point of the<font color="#CCCCCC"> image</font>

276
00:11:03,450 --> 00:11:09,170
that's<font color="#E5E5E5"> actually loaded and also the file</font>

277
00:11:06,720 --> 00:11:11,520
object<font color="#CCCCCC"> that is associated</font><font color="#E5E5E5"> with the</font>

278
00:11:09,170 --> 00:11:12,959
process is going to<font color="#CCCCCC"> be</font><font color="#E5E5E5"> different from</font>

279
00:11:11,520 --> 00:11:16,620
the<font color="#E5E5E5"> file</font><font color="#CCCCCC"> object that the virtual address</font>

280
00:11:12,960 --> 00:11:19,440
descriptor is pointing to so process

281
00:11:16,620 --> 00:11:21,720
Halloween not<font color="#E5E5E5"> so great anymore given</font>

282
00:11:19,440 --> 00:11:22,950
what we just<font color="#E5E5E5"> saw the rest of the</font>

283
00:11:21,720 --> 00:11:26,640
techniques<font color="#E5E5E5"> we talked about</font><font color="#CCCCCC"> which</font><font color="#E5E5E5"> are</font>

284
00:11:22,950 --> 00:11:29,010
atom bomb<font color="#CCCCCC"> and</font><font color="#E5E5E5"> ghost</font><font color="#CCCCCC"> riding</font><font color="#E5E5E5"> etc they are</font>

285
00:11:26,640 --> 00:11:31,710
missing<font color="#E5E5E5"> this file mapping property right</font>

286
00:11:29,010 --> 00:11:33,750
they<font color="#CCCCCC"> there they create this dynamic code</font>

287
00:11:31,710 --> 00:11:35,370
that's this<font color="#E5E5E5"> it seems like a runtime</font>

288
00:11:33,750 --> 00:11:36,960
generated code and it<font color="#CCCCCC"> that's something</font>

289
00:11:35,370 --> 00:11:38,130
that modern solutions nowadays are able

290
00:11:36,960 --> 00:11:42,090
to detect<font color="#CCCCCC"> because it's</font><font color="#E5E5E5"> highly suspicious</font>

291
00:11:38,130 --> 00:11:43,950
<font color="#E5E5E5">so we need something new wouldn't be</font>

292
00:11:42,090 --> 00:11:48,120
cool if we<font color="#E5E5E5"> could create a sort of a</font>

293
00:11:43,950 --> 00:11:51,000
<font color="#CCCCCC">Silas map file</font><font color="#E5E5E5"> but we know that a</font><font color="#CCCCCC"> v's</font>

294
00:11:48,120 --> 00:11:53,610
<font color="#E5E5E5">scan files so we need to understand how</font>

295
00:11:51,000 --> 00:11:56,130
scanners work very well if we want to

296
00:11:53,610 --> 00:11:58,050
<font color="#E5E5E5">try to slip something past them so for</font>

297
00:11:56,130 --> 00:12:04,939
<font color="#E5E5E5">that I'd like</font><font color="#CCCCCC"> to call</font><font color="#E5E5E5"> Eugene to help me</font>

298
00:11:58,050 --> 00:12:07,920
out<font color="#E5E5E5"> so we'll talk a little bit</font><font color="#CCCCCC"> about how</font>

299
00:12:04,940 --> 00:12:11,339
the scanners scan the files before

300
00:12:07,920 --> 00:12:14,579
<font color="#E5E5E5">they're being executed let's consider</font>

301
00:12:11,339 --> 00:12:17,400
the generic file<font color="#E5E5E5"> execution process at</font>

302
00:12:14,580 --> 00:12:19,140
the beginning file is opened<font color="#E5E5E5"> and then</font>

303
00:12:17,400 --> 00:12:22,920
this<font color="#E5E5E5"> section is created out of file and</font>

304
00:12:19,140 --> 00:12:24,839
<font color="#CCCCCC">the</font><font color="#E5E5E5"> the memory is</font><font color="#CCCCCC"> met</font><font color="#E5E5E5"> into the memory</font>

305
00:12:22,920 --> 00:12:27,390
<font color="#E5E5E5">space</font><font color="#CCCCCC"> of the newly created</font><font color="#E5E5E5"> process and</font>

306
00:12:24,839 --> 00:12:28,890
then the execution<font color="#CCCCCC"> stopped so</font><font color="#E5E5E5"> varied</font>

307
00:12:27,390 --> 00:12:33,660
interception can happen we<font color="#E5E5E5"> will cover</font>

308
00:12:28,890 --> 00:12:35,550
some places<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example a the a file</font>

309
00:12:33,660 --> 00:12:38,130
execution<font color="#E5E5E5"> can</font><font color="#CCCCCC"> be intercepted</font>

310
00:12:35,550 --> 00:12:40,770
during file open process<font color="#E5E5E5"> so usually it's</font>

311
00:12:38,130 --> 00:12:47,100
<font color="#CCCCCC">done in the mini filter on the windows</font>

312
00:12:40,770 --> 00:12:49,189
<font color="#E5E5E5">during the create file called the second</font>

313
00:12:47,100 --> 00:12:52,470
place<font color="#E5E5E5"> that can be intercepted by</font>

314
00:12:49,190 --> 00:12:54,300
<font color="#E5E5E5">antiviruses is a they acquire for a</font>

315
00:12:52,470 --> 00:12:55,890
synchronization<font color="#CCCCCC"> callback which is called</font>

316
00:12:54,300 --> 00:12:59,040
during the section creation because a

317
00:12:55,890 --> 00:13:01,350
section is created<font color="#E5E5E5"> and the third place</font>

318
00:12:59,040 --> 00:13:03,660
<font color="#E5E5E5">that we will cover today is the process</font>

319
00:13:01,350 --> 00:13:07,140
in creation notification routine which

320
00:13:03,660 --> 00:13:10,500
<font color="#CCCCCC">is a called</font><font color="#E5E5E5"> just before the process</font>

321
00:13:07,140 --> 00:13:12,900
starts<font color="#E5E5E5"> execution and it's</font><font color="#CCCCCC"> say in this in</font>

322
00:13:10,500 --> 00:13:14,850
<font color="#E5E5E5">its form that</font><font color="#CCCCCC"> about that allows blocking</font>

323
00:13:12,900 --> 00:13:18,689
<font color="#CCCCCC">of</font><font color="#E5E5E5"> the execution is available only for</font>

324
00:13:14,850 --> 00:13:22,379
I mean is acute<font color="#E5E5E5"> Abel so before we going</font>

325
00:13:18,689 --> 00:13:26,669
further<font color="#E5E5E5"> talk about a a you see some</font>

326
00:13:22,379 --> 00:13:28,769
<font color="#E5E5E5">examples of how antivirus</font><font color="#CCCCCC"> walks I let's</font>

327
00:13:26,669 --> 00:13:31,169
discuss how<font color="#E5E5E5"> a what</font><font color="#CCCCCC"> should be done</font><font color="#E5E5E5"> that</font>

328
00:13:28,769 --> 00:13:33,059
once<font color="#E5E5E5"> the</font><font color="#CCCCCC"> execution is intercepted so</font>

329
00:13:31,169 --> 00:13:34,978
<font color="#E5E5E5">antivirus have to scan the file and</font>

330
00:13:33,059 --> 00:13:36,988
decide if it's<font color="#E5E5E5"> malicious or not the</font>

331
00:13:34,979 --> 00:13:38,669
scanning<font color="#E5E5E5"> can be done either from a user</font>

332
00:13:36,989 --> 00:13:40,410
north or from<font color="#E5E5E5"> Kenya or from any</font>

333
00:13:38,669 --> 00:13:42,228
combination<font color="#E5E5E5"> of the two it's up to a</font>

334
00:13:40,410 --> 00:13:45,149
<font color="#E5E5E5">vendor to decide how to scan the file</font>

335
00:13:42,229 --> 00:13:47,100
and<font color="#E5E5E5"> the target file that is being</font>

336
00:13:45,149 --> 00:13:49,049
executed<font color="#CCCCCC"> there should</font><font color="#E5E5E5"> be somehow access</font>

337
00:13:47,100 --> 00:13:51,119
so it could<font color="#E5E5E5"> be opened by name it will be</font>

338
00:13:49,049 --> 00:13:53,728
<font color="#CCCCCC">opened</font><font color="#E5E5E5"> by file ID on some file system</font>

339
00:13:51,119 --> 00:13:56,729
<font color="#CCCCCC">that supports it and of course they a</font>

340
00:13:53,729 --> 00:13:59,129
file object<font color="#CCCCCC"> if it's already a</font><font color="#E5E5E5"> available</font>

341
00:13:56,729 --> 00:14:00,959
<font color="#E5E5E5">could be used a the simple object</font><font color="#CCCCCC"> will</font>

342
00:13:59,129 --> 00:14:03,359
<font color="#E5E5E5">be used to scan the file so again it's</font>

343
00:14:00,959 --> 00:14:05,988
up to a<font color="#E5E5E5"> event or to decide how to how to</font>

344
00:14:03,359 --> 00:14:08,549
access the content of the file

345
00:14:05,989 --> 00:14:11,189
<font color="#CCCCCC">of course very scanning the file on each</font>

346
00:14:08,549 --> 00:14:14,819
change is not practical if you do it the

347
00:14:11,189 --> 00:14:17,910
operating system will be on just<font color="#CCCCCC"> getting</font>

348
00:14:14,819 --> 00:14:20,608
files if we do anything else<font color="#E5E5E5"> beside so a</font>

349
00:14:17,910 --> 00:14:22,199
the<font color="#CCCCCC"> every vendor</font><font color="#E5E5E5"> had has to decide where</font>

350
00:14:20,609 --> 00:14:23,909
to scan the<font color="#CCCCCC"> file so they</font><font color="#E5E5E5"> have some</font>

351
00:14:22,199 --> 00:14:29,279
distinct points where they scan the

352
00:14:23,909 --> 00:14:31,619
<font color="#E5E5E5">files and</font><font color="#CCCCCC"> they if</font><font color="#E5E5E5"> we scan the file</font>

353
00:14:29,279 --> 00:14:33,600
before<font color="#CCCCCC"> its</font><font color="#E5E5E5"> execute</font><font color="#CCCCCC"> it's completely blind</font>

354
00:14:31,619 --> 00:14:35,039
<font color="#E5E5E5">for</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> rest of the thing techniques</font>

355
00:14:33,600 --> 00:14:37,739
that we<font color="#CCCCCC"> have talked about so if the</font>

356
00:14:35,039 --> 00:14:39,689
content of the<font color="#CCCCCC"> memories change or</font>

357
00:14:37,739 --> 00:14:42,449
<font color="#CCCCCC">somehow</font><font color="#E5E5E5"> files</font><font color="#CCCCCC"> change in brought into the</font>

358
00:14:39,689 --> 00:14:46,079
memory<font color="#E5E5E5"> it's completely invisible for the</font>

359
00:14:42,449 --> 00:14:49,849
a file in secure file skinny so let's

360
00:14:46,079 --> 00:14:53,669
see some examples<font color="#E5E5E5"> of the a real a real</font>

361
00:14:49,850 --> 00:14:56,220
<font color="#CCCCCC">starts</font><font color="#E5E5E5"> taking from a well-known</font><font color="#CCCCCC"> Windows</font>

362
00:14:53,669 --> 00:14:59,220
so in the first example<font color="#E5E5E5"> we can see that</font>

363
00:14:56,220 --> 00:15:01,139
the execution<font color="#E5E5E5"> is blocked a during</font>

364
00:14:59,220 --> 00:15:04,499
<font color="#CCCCCC">integrated process just before the file</font>

365
00:15:01,139 --> 00:15:06,659
is<font color="#E5E5E5"> opened here</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> antivirus in the mini</font>

366
00:15:04,499 --> 00:15:08,039
filter<font color="#CCCCCC"> Kovach</font><font color="#E5E5E5"> blocks the execution in</font>

367
00:15:06,659 --> 00:15:11,429
<font color="#E5E5E5">vowel it's blocked from the other</font>

368
00:15:08,039 --> 00:15:14,009
process a usually it's a<font color="#CCCCCC"> antivirus</font>

369
00:15:11,429 --> 00:15:16,199
process it's a tries to scan the file by

370
00:15:14,009 --> 00:15:19,379
reopening<font color="#CCCCCC"> it we can see from</font><font color="#E5E5E5"> this</font>

371
00:15:16,199 --> 00:15:20,939
example<font color="#CCCCCC"> that the file is</font><font color="#E5E5E5"> opened by file</font>

372
00:15:19,379 --> 00:15:22,889
names<font color="#E5E5E5"> of the file name was taken</font><font color="#CCCCCC"> from</font>

373
00:15:20,939 --> 00:15:26,879
the<font color="#CCCCCC"> original operation and it's used to</font>

374
00:15:22,889 --> 00:15:28,290
reopen the file<font color="#E5E5E5"> and scan</font><font color="#CCCCCC"> it the second</font>

375
00:15:26,879 --> 00:15:30,480
<font color="#E5E5E5">example is the</font><font color="#CCCCCC"> same</font>

376
00:15:28,290 --> 00:15:32,370
<font color="#E5E5E5">in creation so in this specific example</font>

377
00:15:30,480 --> 00:15:35,550
we can see<font color="#E5E5E5"> that the the</font><font color="#CCCCCC"> Windows Defender</font>

378
00:15:32,370 --> 00:15:37,620
<font color="#CCCCCC">in</font><font color="#E5E5E5"> this case tries to create a section</font>

379
00:15:35,550 --> 00:15:40,258
<font color="#E5E5E5">to scan the file by other AV vendor</font>

380
00:15:37,620 --> 00:15:43,259
blocks it and tries to scan the file

381
00:15:40,259 --> 00:15:45,029
before<font color="#E5E5E5"> the others can do it and in this</font>

382
00:15:43,259 --> 00:15:47,100
case<font color="#CCCCCC"> again like in the previous case</font><font color="#E5E5E5"> the</font>

383
00:15:45,029 --> 00:15:49,050
<font color="#E5E5E5">operation will be blocked until the file</font>

384
00:15:47,100 --> 00:15:51,449
is scanned<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then it will be resumed</font>

385
00:15:49,050 --> 00:15:54,569
<font color="#E5E5E5">depending on the a</font><font color="#CCCCCC"> content</font><font color="#E5E5E5"> file</font><font color="#CCCCCC"> it's</font>

386
00:15:51,449 --> 00:15:58,500
fungal issues will<font color="#E5E5E5"> be blocked</font><font color="#CCCCCC"> there's</font>

387
00:15:54,569 --> 00:16:01,099
some issue with<font color="#E5E5E5"> a</font><font color="#CCCCCC"> specific place</font>

388
00:15:58,500 --> 00:16:05,399
it's called<font color="#E5E5E5"> Eclair for synchronization</font><font color="#CCCCCC"> a</font>

389
00:16:01,100 --> 00:16:06,899
because the mini filter<font color="#E5E5E5"> API don't allow</font>

390
00:16:05,399 --> 00:16:09,089
us to see all the parameters<font color="#CCCCCC"> that is</font>

391
00:16:06,899 --> 00:16:12,300
which which<font color="#E5E5E5"> are passed from the user</font>

392
00:16:09,089 --> 00:16:16,350
space so then we<font color="#E5E5E5"> map the section in user</font>

393
00:16:12,300 --> 00:16:19,050
space<font color="#E5E5E5"> we have</font><font color="#CCCCCC"> a parameter that tells</font><font color="#E5E5E5"> the</font>

394
00:16:16,350 --> 00:16:21,360
Windows kernel that<font color="#E5E5E5"> we are</font><font color="#CCCCCC"> mapping an</font>

395
00:16:19,050 --> 00:16:24,689
image and<font color="#E5E5E5"> we have another option which</font>

396
00:16:21,360 --> 00:16:26,850
specifies the<font color="#CCCCCC"> page protection</font><font color="#E5E5E5"> but inside</font>

397
00:16:24,690 --> 00:16:28,139
the AAV callback we have only three page

398
00:16:26,850 --> 00:16:33,089
protection don't have the image type

399
00:16:28,139 --> 00:16:36,120
this they was if in the user space<font color="#E5E5E5"> we</font>

400
00:16:33,089 --> 00:16:39,839
map the image we<font color="#E5E5E5"> specially</font><font color="#CCCCCC"> donnelly for</font>

401
00:16:36,120 --> 00:16:42,329
example they the the windows will still

402
00:16:39,839 --> 00:16:44,310
<font color="#E5E5E5">map the file executable but the</font><font color="#CCCCCC"> anti</font>

403
00:16:42,329 --> 00:16:47,310
<font color="#CCCCCC">viruses</font><font color="#E5E5E5"> you'll see only the patriot only</font>

404
00:16:44,310 --> 00:16:48,719
a page protection and they they might

405
00:16:47,310 --> 00:16:51,630
decide<font color="#CCCCCC"> not to scan the file</font><font color="#E5E5E5"> because they</font>

406
00:16:48,720 --> 00:16:53,880
might<font color="#CCCCCC"> think that it's a it's only a data</font>

407
00:16:51,630 --> 00:16:55,649
file<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> by being map of</font><font color="#E5E5E5"> course the</font>

408
00:16:53,880 --> 00:16:58,439
<font color="#E5E5E5">windows water will never do</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> but if</font>

409
00:16:55,649 --> 00:17:01,199
the file is manually loaded into the

410
00:16:58,440 --> 00:17:03,240
memory<font color="#E5E5E5"> for execution it can happen and</font>

411
00:17:01,199 --> 00:17:08,010
the last<font color="#E5E5E5"> place that</font><font color="#CCCCCC"> we would like to</font>

412
00:17:03,240 --> 00:17:09,900
<font color="#E5E5E5">cover is the execution this is not the</font>

413
00:17:08,010 --> 00:17:13,260
file<font color="#E5E5E5"> scanning it's not file operations</font>

414
00:17:09,900 --> 00:17:16,230
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> an execution operation so here</font>

415
00:17:13,260 --> 00:17:18,689
we can<font color="#E5E5E5"> see that</font><font color="#CCCCCC"> a just after the process</font>

416
00:17:16,230 --> 00:17:21,650
was<font color="#CCCCCC"> created</font><font color="#E5E5E5"> the same</font><font color="#CCCCCC"> Indy create process</font>

417
00:17:18,689 --> 00:17:24,929
routine was blocked<font color="#E5E5E5"> and the antivirus</font><font color="#CCCCCC"> a</font>

418
00:17:21,650 --> 00:17:27,179
would go to scan the file<font color="#CCCCCC"> is exactly</font><font color="#E5E5E5"> as</font>

419
00:17:24,929 --> 00:17:30,830
<font color="#E5E5E5">it does in the first example it's</font>

420
00:17:27,179 --> 00:17:33,150
important<font color="#E5E5E5"> to note that a this specific</font>

421
00:17:30,830 --> 00:17:36,059
<font color="#E5E5E5">operation is performed</font>

422
00:17:33,150 --> 00:17:39,960
<font color="#E5E5E5">it's not not as part of file</font><font color="#CCCCCC"> operation</font>

423
00:17:36,059 --> 00:17:42,480
so<font color="#E5E5E5"> any subsequent</font><font color="#CCCCCC"> a changes total</font>

424
00:17:39,960 --> 00:17:45,160
mappings to using files will<font color="#E5E5E5"> be</font>

425
00:17:42,480 --> 00:17:48,340
invisible<font color="#E5E5E5"> to whisk</font><font color="#CCCCCC"> oh so it's only</font>

426
00:17:45,160 --> 00:17:51,370
useful<font color="#CCCCCC"> for the main executable because</font>

427
00:17:48,340 --> 00:17:52,629
it's in<font color="#CCCCCC"> its blocking a version</font><font color="#E5E5E5"> this</font>

428
00:17:51,370 --> 00:17:54,370
<font color="#E5E5E5">function is available only for main</font>

429
00:17:52,630 --> 00:17:57,250
executable it cannot be used<font color="#E5E5E5"> for dynamic</font>

430
00:17:54,370 --> 00:18:00,250
link libraries<font color="#E5E5E5"> because it's not</font><font color="#CCCCCC"> on the</font>

431
00:17:57,250 --> 00:18:03,670
order<font color="#E5E5E5"> a</font><font color="#CCCCCC"> Windows as</font><font color="#E5E5E5"> well in the Society's</font>

432
00:18:00,250 --> 00:18:09,280
<font color="#E5E5E5">bank to the subsequent changes</font><font color="#CCCCCC"> to the</font>

433
00:18:03,670 --> 00:18:11,020
<font color="#E5E5E5">process using files so it's not an easy</font>

434
00:18:09,280 --> 00:18:12,490
job<font color="#CCCCCC"> to create</font><font color="#E5E5E5"> an anti-virus we have to</font>

435
00:18:11,020 --> 00:18:15,400
decide where to send the files how to

436
00:18:12,490 --> 00:18:20,110
scan them there's always a performance

437
00:18:15,400 --> 00:18:22,000
considerations and the antivirus vendors

438
00:18:20,110 --> 00:18:23,560
have<font color="#E5E5E5"> to support different platforms</font>

439
00:18:22,000 --> 00:18:26,110
different<font color="#CCCCCC"> CPU types different file</font>

440
00:18:23,560 --> 00:18:28,570
systems<font color="#CCCCCC"> and this makes</font><font color="#E5E5E5"> it work very</font><font color="#CCCCCC"> very</font>

441
00:18:26,110 --> 00:18:30,189
complicated<font color="#CCCCCC"> but we would</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> to talk</font>

442
00:18:28,570 --> 00:18:33,550
<font color="#E5E5E5">about one</font><font color="#CCCCCC"> more layer of complication</font>

443
00:18:30,190 --> 00:18:37,210
<font color="#E5E5E5">that the antivirus have to do</font><font color="#CCCCCC"> B's</font><font color="#E5E5E5"> it's a</font>

444
00:18:33,550 --> 00:18:40,300
transaction<font color="#CCCCCC"> on</font><font color="#E5E5E5"> GFS photo reduction which</font>

445
00:18:37,210 --> 00:18:42,130
<font color="#E5E5E5">if s also known as 6f short a was</font>

446
00:18:40,300 --> 00:18:44,139
introduced<font color="#CCCCCC"> on</font><font color="#E5E5E5"> Windows Vista and it's</font>

447
00:18:42,130 --> 00:18:47,530
implementing completely inside<font color="#E5E5E5"> the</font>

448
00:18:44,140 --> 00:18:51,730
windows a kernel it's a works for local

449
00:18:47,530 --> 00:18:53,560
in DFS a discs<font color="#E5E5E5"> originally</font><font color="#CCCCCC"> the Microsoft</font>

450
00:18:51,730 --> 00:18:56,470
<font color="#CCCCCC">repertory</font><font color="#E5E5E5"> solution they are proposed to</font>

451
00:18:53,560 --> 00:18:58,659
<font color="#E5E5E5">use it for a multiple file updates that</font>

452
00:18:56,470 --> 00:19:00,220
has to be<font color="#CCCCCC"> performed as a</font><font color="#E5E5E5"> atomic</font>

453
00:18:58,660 --> 00:19:02,080
operation<font color="#E5E5E5"> is that all the</font><font color="#CCCCCC"> changes would</font>

454
00:19:00,220 --> 00:19:04,630
<font color="#E5E5E5">be committed to the disk or would be</font>

455
00:19:02,080 --> 00:19:07,840
<font color="#E5E5E5">rolled back depends on the result of the</font>

456
00:19:04,630 --> 00:19:09,460
operation<font color="#E5E5E5"> it can be used as part of the</font>

457
00:19:07,840 --> 00:19:11,050
watcher transaction involving other

458
00:19:09,460 --> 00:19:15,580
applications but<font color="#E5E5E5"> it's out of the scope</font>

459
00:19:11,050 --> 00:19:19,510
<font color="#E5E5E5">of this talk</font><font color="#CCCCCC"> and they usually this is</font>

460
00:19:15,580 --> 00:19:21,040
used<font color="#E5E5E5"> for a installation processes you</font>

461
00:19:19,510 --> 00:19:22,900
can<font color="#E5E5E5"> consider you can think of</font>

462
00:19:21,040 --> 00:19:24,550
<font color="#CCCCCC">installation</font><font color="#E5E5E5"> that changes a lot of files</font>

463
00:19:22,900 --> 00:19:26,320
during the installation<font color="#E5E5E5"> process and then</font>

464
00:19:24,550 --> 00:19:28,210
if<font color="#E5E5E5"> something happens files has to be</font>

465
00:19:26,320 --> 00:19:30,159
wrong<font color="#E5E5E5"> but instead of writing</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of</font>

466
00:19:28,210 --> 00:19:31,780
<font color="#CCCCCC">code that</font><font color="#E5E5E5"> role but the file since</font>

467
00:19:30,160 --> 00:19:33,550
<font color="#E5E5E5">installer just can roll back the</font>

468
00:19:31,780 --> 00:19:34,210
transaction and every changes would

469
00:19:33,550 --> 00:19:38,409
disappear

470
00:19:34,210 --> 00:19:42,160
it's very nice feature<font color="#E5E5E5"> but just before</font>

471
00:19:38,410 --> 00:19:43,780
we<font color="#CCCCCC"> continue a you can taking from the</font>

472
00:19:42,160 --> 00:19:46,510
storage developer conference but back

473
00:19:43,780 --> 00:19:49,120
from 2009 you can see that<font color="#E5E5E5"> we said this</font>

474
00:19:46,510 --> 00:19:51,490
was<font color="#CCCCCC"> a</font><font color="#E5E5E5"> very major</font><font color="#CCCCCC"> change to the kernel</font>

475
00:19:49,120 --> 00:19:53,350
code<font color="#CCCCCC"> a watch part of a</font>

476
00:19:51,490 --> 00:19:54,590
ntfs driver was written to support

477
00:19:53,350 --> 00:19:55,939
<font color="#CCCCCC">instruction</font><font color="#E5E5E5"> we have</font>

478
00:19:54,590 --> 00:19:57,709
<font color="#E5E5E5">a lot of new functions we will talk</font>

479
00:19:55,940 --> 00:20:00,110
about them<font color="#E5E5E5"> little bit later and a lot of</font>

480
00:19:57,710 --> 00:20:02,720
a functions<font color="#E5E5E5"> that there exist previously</font>

481
00:20:00,110 --> 00:20:05,270
<font color="#CCCCCC">were changed to support transactions</font><font color="#E5E5E5"> so</font>

482
00:20:02,720 --> 00:20:08,059
we have a really huge change in the

483
00:20:05,270 --> 00:20:12,500
specific<font color="#CCCCCC"> area of kernel</font><font color="#E5E5E5"> and it was</font>

484
00:20:08,059 --> 00:20:15,620
<font color="#E5E5E5">duplicated it was duplicated a very</font>

485
00:20:12,500 --> 00:20:17,720
shortly<font color="#E5E5E5"> after what it was it was</font>

486
00:20:15,620 --> 00:20:18,979
<font color="#E5E5E5">proposed by Microsoft and if you look</font><font color="#CCCCCC"> to</font>

487
00:20:17,720 --> 00:20:22,820
the interview<font color="#E5E5E5"> miss the annual you just</font>

488
00:20:18,980 --> 00:20:24,620
see<font color="#E5E5E5"> notice don't use it anymore</font><font color="#CCCCCC"> and it</font>

489
00:20:22,820 --> 00:20:27,320
<font color="#E5E5E5">usually</font><font color="#CCCCCC"> happens is deprecated features</font>

490
00:20:24,620 --> 00:20:28,850
<font color="#CCCCCC">they're still used not usually used by</font>

491
00:20:27,320 --> 00:20:30,289
Microsoft in<font color="#CCCCCC"> storage after</font><font color="#E5E5E5"> today the</font>

492
00:20:28,850 --> 00:20:34,969
latest<font color="#CCCCCC"> windows update will use</font>

493
00:20:30,289 --> 00:20:37,850
transactions so let's see some<font color="#E5E5E5"> API</font>

494
00:20:34,970 --> 00:20:40,309
<font color="#CCCCCC">before we start we just have to a real</font>

495
00:20:37,850 --> 00:20:41,899
<font color="#E5E5E5">manual transactions have a special</font>

496
00:20:40,309 --> 00:20:44,720
function<font color="#E5E5E5"> so they the application</font><font color="#CCCCCC"> here</font>

497
00:20:41,899 --> 00:20:47,629
<font color="#CCCCCC">has to be</font><font color="#E5E5E5"> designed to use transactions</font>

498
00:20:44,720 --> 00:20:49,220
they they<font color="#CCCCCC"> know don't</font><font color="#E5E5E5"> come out of</font><font color="#CCCCCC"> nothing</font>

499
00:20:47,630 --> 00:20:51,710
they have we have<font color="#CCCCCC"> to create a</font><font color="#E5E5E5"> new action</font>

500
00:20:49,220 --> 00:20:54,020
using transaction function we<font color="#E5E5E5"> usually</font>

501
00:20:51,710 --> 00:20:56,570
end the transaction using transaction a

502
00:20:54,020 --> 00:21:00,710
commit or rollback depends on what we

503
00:20:56,570 --> 00:21:03,439
want to achieve for functions in the<font color="#E5E5E5"> i/o</font>

504
00:21:00,710 --> 00:21:05,840
that<font color="#CCCCCC"> avoids these</font><font color="#E5E5E5"> file names</font><font color="#CCCCCC"> we have a</font>

505
00:21:03,440 --> 00:21:09,980
special function which ends of is

506
00:21:05,840 --> 00:21:12,918
transacted<font color="#CCCCCC"> a board</font><font color="#E5E5E5"> and the this function</font>

507
00:21:09,980 --> 00:21:14,409
in<font color="#E5E5E5"> addition to the regular power options</font>

508
00:21:12,919 --> 00:21:16,549
takes the one more option which is

509
00:21:14,409 --> 00:21:18,350
handle<font color="#E5E5E5"> two transactions of</font><font color="#CCCCCC"> the open</font>

510
00:21:16,549 --> 00:21:21,020
transaction then we can<font color="#E5E5E5"> access the file</font>

511
00:21:18,350 --> 00:21:23,029
by its name<font color="#CCCCCC"> you inside the transaction</font>

512
00:21:21,020 --> 00:21:25,399
and all other functions<font color="#E5E5E5"> which watch</font>

513
00:21:23,029 --> 00:21:28,340
<font color="#CCCCCC">these file handles we'll just walk work</font>

514
00:21:25,399 --> 00:21:30,489
also<font color="#CCCCCC"> with transactions so let's see</font><font color="#E5E5E5"> some</font>

515
00:21:28,340 --> 00:21:33,470
example in this<font color="#E5E5E5"> example</font><font color="#CCCCCC"> we create a</font>

516
00:21:30,490 --> 00:21:36,320
<font color="#E5E5E5">transaction we create a file inside</font><font color="#CCCCCC"> the</font>

517
00:21:33,470 --> 00:21:38,299
transaction let's say it's a new file we

518
00:21:36,320 --> 00:21:38,658
write inside this file and<font color="#CCCCCC"> we</font><font color="#E5E5E5"> close the</font>

519
00:21:38,299 --> 00:21:42,049
file

520
00:21:38,659 --> 00:21:45,409
so if if it would be a regular<font color="#E5E5E5"> file and</font>

521
00:21:42,049 --> 00:21:47,450
if you would<font color="#CCCCCC"> go to</font><font color="#E5E5E5"> the directory with a</font>

522
00:21:45,409 --> 00:21:48,890
Microsoft Explorer<font color="#E5E5E5"> we will see this we</font>

523
00:21:47,450 --> 00:21:50,419
would see this file<font color="#E5E5E5"> but because these</font>

524
00:21:48,890 --> 00:21:52,159
files created it says the transaction<font color="#CCCCCC"> is</font>

525
00:21:50,419 --> 00:21:54,200
completely invisible for the application

526
00:21:52,159 --> 00:21:56,779
<font color="#CCCCCC">outside the transaction until</font><font color="#E5E5E5"> we commit</font>

527
00:21:54,200 --> 00:21:58,549
the transaction<font color="#E5E5E5"> so</font><font color="#CCCCCC"> no only now then we</font>

528
00:21:56,779 --> 00:22:01,700
commit the transaction<font color="#E5E5E5"> the changes can</font>

529
00:21:58,549 --> 00:22:02,720
be observed by other applications<font color="#E5E5E5"> at the</font>

530
00:22:01,700 --> 00:22:05,090
end we have to<font color="#E5E5E5"> close the transaction</font>

531
00:22:02,720 --> 00:22:08,780
handle

532
00:22:05,090 --> 00:22:10,340
you so so what do<font color="#CCCCCC"> we</font><font color="#E5E5E5"> have so</font><font color="#CCCCCC"> far we</font>

533
00:22:08,780 --> 00:22:12,649
<font color="#CCCCCC">talked about history of evasion</font>

534
00:22:10,340 --> 00:22:14,570
<font color="#E5E5E5">techniques we talked about the inner</font>

535
00:22:12,650 --> 00:22:16,310
workings<font color="#CCCCCC"> of Av scanners</font><font color="#E5E5E5"> and all the</font>

536
00:22:14,570 --> 00:22:19,310
different<font color="#CCCCCC"> factors to consider when when</font>

537
00:22:16,310 --> 00:22:21,350
implementing one we talked about<font color="#E5E5E5"> NTFS</font>

538
00:22:19,310 --> 00:22:24,440
transactions and you<font color="#CCCCCC"> must be wondering</font>

539
00:22:21,350 --> 00:22:28,159
<font color="#CCCCCC">what's next well naturally</font><font color="#E5E5E5"> transactions</font>

540
00:22:24,440 --> 00:22:29,390
make life<font color="#CCCCCC"> very hard for AV vendors</font><font color="#E5E5E5"> now</font>

541
00:22:28,160 --> 00:22:31,760
what we want<font color="#E5E5E5"> to do is want to leverage</font>

542
00:22:29,390 --> 00:22:35,420
this and<font color="#E5E5E5"> try to create a process from a</font>

543
00:22:31,760 --> 00:22:37,580
transacted file<font color="#E5E5E5"> that being said the</font>

544
00:22:35,420 --> 00:22:39,500
<font color="#E5E5E5">windows loader as most of us know only</font>

545
00:22:37,580 --> 00:22:41,889
<font color="#E5E5E5">accepts the windows process loader only</font>

546
00:22:39,500 --> 00:22:46,220
accepts a file path<font color="#CCCCCC"> to create a a</font>

547
00:22:41,890 --> 00:22:49,220
process and we don't have<font color="#E5E5E5"> an API</font><font color="#CCCCCC"> create</font>

548
00:22:46,220 --> 00:22:50,540
process transacted so what we're<font color="#E5E5E5"> going</font>

549
00:22:49,220 --> 00:22:53,180
to do is we're going<font color="#CCCCCC"> to try</font><font color="#E5E5E5"> to dive into</font>

550
00:22:50,540 --> 00:22:55,100
the process creation process<font color="#E5E5E5"> on Windows</font>

551
00:22:53,180 --> 00:22:57,500
<font color="#E5E5E5">and try</font><font color="#CCCCCC"> to see if we</font><font color="#E5E5E5"> can find a way</font><font color="#CCCCCC"> to</font>

552
00:22:55,100 --> 00:23:02,540
somehow<font color="#E5E5E5"> create a process out</font><font color="#CCCCCC"> of a</font>

553
00:22:57,500 --> 00:23:06,230
transacted file so comparing the create

554
00:23:02,540 --> 00:23:08,990
process function between<font color="#E5E5E5"> Windows XP and</font>

555
00:23:06,230 --> 00:23:10,940
Windows<font color="#E5E5E5"> 10 superficially we get the</font>

556
00:23:08,990 --> 00:23:13,280
<font color="#CCCCCC">impression that Microsoft changed</font>

557
00:23:10,940 --> 00:23:15,440
<font color="#E5E5E5">completely how</font><font color="#CCCCCC"> processes are created</font><font color="#E5E5E5"> but</font>

558
00:23:13,280 --> 00:23:17,510
<font color="#E5E5E5">if you look deeper into it then then you</font>

559
00:23:15,440 --> 00:23:20,270
see that<font color="#E5E5E5"> Microsoft moved most of the</font>

560
00:23:17,510 --> 00:23:23,360
code from<font color="#CCCCCC"> the user mode library kernel32</font>

561
00:23:20,270 --> 00:23:26,170
to the NT kernel itself<font color="#CCCCCC"> and somehow the</font>

562
00:23:23,360 --> 00:23:28,040
function in<font color="#CCCCCC"> kernel 32 became longer</font>

563
00:23:26,170 --> 00:23:30,320
<font color="#CCCCCC">logically the steps remained mostly the</font>

564
00:23:28,040 --> 00:23:35,030
same<font color="#CCCCCC"> but let's take</font><font color="#E5E5E5"> a look at the</font>

565
00:23:30,320 --> 00:23:36,320
process loader<font color="#E5E5E5"> on Windows</font><font color="#CCCCCC"> XP</font><font color="#E5E5E5"> now we're</font>

566
00:23:35,030 --> 00:23:38,210
gonna take<font color="#E5E5E5"> a look at this in assembly</font>

567
00:23:36,320 --> 00:23:39,980
code<font color="#E5E5E5"> but for those of</font><font color="#CCCCCC"> you who don't know</font>

568
00:23:38,210 --> 00:23:41,720
assembly<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> okay the words are pretty</font>

569
00:23:39,980 --> 00:23:44,360
clear and I'm going to<font color="#E5E5E5"> explain every</font>

570
00:23:41,720 --> 00:23:45,890
step<font color="#CCCCCC"> as we go</font><font color="#E5E5E5"> along so</font><font color="#CCCCCC"> as we can</font><font color="#E5E5E5"> see the</font>

571
00:23:44,360 --> 00:23:49,010
<font color="#CCCCCC">first</font><font color="#E5E5E5"> step is we call an internal</font>

572
00:23:45,890 --> 00:23:52,460
routine which goes on<font color="#E5E5E5"> to open</font><font color="#CCCCCC"> the file</font>

573
00:23:49,010 --> 00:23:53,930
<font color="#E5E5E5">so we open the file here we with a few</font>

574
00:23:52,460 --> 00:23:57,020
permissions that we're<font color="#E5E5E5"> asking for the</font>

575
00:23:53,930 --> 00:23:58,520
file<font color="#E5E5E5"> and if that fails then</font><font color="#CCCCCC"> we try</font><font color="#E5E5E5"> to</font>

576
00:23:57,020 --> 00:24:00,530
<font color="#E5E5E5">open the file</font><font color="#CCCCCC"> again with less</font>

577
00:23:58,520 --> 00:24:02,620
permissions which is I<font color="#E5E5E5"> guess something</font>

578
00:24:00,530 --> 00:24:05,389
that all of<font color="#CCCCCC"> us do in our code sometimes</font>

579
00:24:02,620 --> 00:24:07,280
at this point we create a section

580
00:24:05,390 --> 00:24:09,560
section is an object that<font color="#CCCCCC"> can be later</font>

581
00:24:07,280 --> 00:24:12,620
mapped into<font color="#E5E5E5"> memory now the thing to note</font>

582
00:24:09,560 --> 00:24:15,679
here<font color="#E5E5E5"> is that the type</font><font color="#CCCCCC"> of allocation is</font>

583
00:24:12,620 --> 00:24:18,620
<font color="#E5E5E5">SEC image while the page</font><font color="#CCCCCC"> Protection is</font>

584
00:24:15,680 --> 00:24:20,180
page<font color="#E5E5E5"> execute now as Eugene said before</font>

585
00:24:18,620 --> 00:24:22,520
<font color="#E5E5E5">this is how the windows</font><font color="#CCCCCC"> loader does it</font>

586
00:24:20,180 --> 00:24:24,559
but nothing<font color="#E5E5E5"> prevents an attacker</font><font color="#CCCCCC"> from</font>

587
00:24:22,520 --> 00:24:26,960
<font color="#E5E5E5">passing a parameter of section of</font>

588
00:24:24,559 --> 00:24:29,240
<font color="#E5E5E5">section paid protection</font><font color="#CCCCCC"> of page read</font>

589
00:24:26,960 --> 00:24:33,050
<font color="#CCCCCC">only which could cause</font><font color="#E5E5E5"> the antivirus to</font>

590
00:24:29,240 --> 00:24:35,600
skip the scan altogether at this<font color="#E5E5E5"> point</font>

591
00:24:33,050 --> 00:24:39,350
we call the kernel to create the<font color="#E5E5E5"> process</font>

592
00:24:35,600 --> 00:24:41,480
object<font color="#CCCCCC"> to</font><font color="#E5E5E5"> create the new process now</font><font color="#CCCCCC"> the</font>

593
00:24:39,350 --> 00:24:43,909
thing<font color="#E5E5E5"> to note here is that we use the</font>

594
00:24:41,480 --> 00:24:46,100
section handle that we opened before<font color="#E5E5E5"> so</font>

595
00:24:43,910 --> 00:24:47,809
the steps are we create the file<font color="#CCCCCC"> we</font>

596
00:24:46,100 --> 00:24:50,389
create the section<font color="#E5E5E5"> and then we create</font>

597
00:24:47,809 --> 00:24:54,040
<font color="#CCCCCC">the process from</font><font color="#E5E5E5"> the section so the file</font>

598
00:24:50,390 --> 00:24:54,040
has<font color="#CCCCCC"> already been opened at this point</font>

599
00:24:54,550 --> 00:24:58,820
now the kernel what it does is creates

600
00:24:57,140 --> 00:25:01,820
the process<font color="#CCCCCC"> object using the create</font>

601
00:24:58,820 --> 00:25:03,889
object routine of the object manager<font color="#CCCCCC"> and</font>

602
00:25:01,820 --> 00:25:08,270
then adds the<font color="#E5E5E5"> process to the list of</font>

603
00:25:03,890 --> 00:25:10,250
running processes at this point we move

604
00:25:08,270 --> 00:25:12,800
on to talk about<font color="#E5E5E5"> something</font><font color="#CCCCCC"> called the</font>

605
00:25:10,250 --> 00:25:14,840
<font color="#E5E5E5">process parameters</font><font color="#CCCCCC"> now process</font>

606
00:25:12,800 --> 00:25:17,360
parameters are a structure that<font color="#E5E5E5"> every</font>

607
00:25:14,840 --> 00:25:19,189
<font color="#E5E5E5">process has on Windows and it's crucial</font>

608
00:25:17,360 --> 00:25:21,139
for<font color="#E5E5E5"> the ability of the process to run</font>

609
00:25:19,190 --> 00:25:23,330
without this process<font color="#E5E5E5"> cannot run and it</font>

610
00:25:21,140 --> 00:25:25,010
contains it<font color="#CCCCCC"> contains stuff like the</font>

611
00:25:23,330 --> 00:25:28,580
command line<font color="#CCCCCC"> of the process and that</font>

612
00:25:25,010 --> 00:25:30,320
kind of thing now at this point<font color="#E5E5E5"> on</font>

613
00:25:28,580 --> 00:25:32,809
Windows<font color="#CCCCCC"> XP we can see that we have a</font>

614
00:25:30,320 --> 00:25:34,790
<font color="#E5E5E5">subroutine called base push process</font>

615
00:25:32,809 --> 00:25:39,050
parameters which what it does is it

616
00:25:34,790 --> 00:25:41,030
creates the process<font color="#CCCCCC"> parameters allocates</font>

617
00:25:39,050 --> 00:25:44,450
memory in the new process<font color="#CCCCCC"> for the</font>

618
00:25:41,030 --> 00:25:46,160
parameters<font color="#E5E5E5"> copies the parameters to the</font>

619
00:25:44,450 --> 00:25:48,320
target process<font color="#E5E5E5"> to the newly created</font>

620
00:25:46,160 --> 00:25:50,540
process and then finally sets the

621
00:25:48,320 --> 00:25:54,110
address of the parameters in the process

622
00:25:50,540 --> 00:25:55,850
environment block now the important

623
00:25:54,110 --> 00:25:57,559
<font color="#E5E5E5">thing to note here is this happens</font><font color="#CCCCCC"> after</font>

624
00:25:55,850 --> 00:25:59,300
the process is<font color="#E5E5E5"> created and it's</font>

625
00:25:57,559 --> 00:26:01,190
implemented entirely in user mode<font color="#CCCCCC"> and</font>

626
00:25:59,300 --> 00:26:02,540
we'll see why this is<font color="#CCCCCC"> different in just</font>

627
00:26:01,190 --> 00:26:05,690
<font color="#E5E5E5">a second when</font><font color="#CCCCCC"> we take a look at Windows</font>

628
00:26:02,540 --> 00:26:08,780
10 at this point we create the thread

629
00:26:05,690 --> 00:26:10,400
for the process the<font color="#E5E5E5"> main thread</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> if</font>

630
00:26:08,780 --> 00:26:13,670
the flag specified we resume<font color="#E5E5E5"> the</font>

631
00:26:10,400 --> 00:26:16,130
<font color="#CCCCCC">execution of the thread and that's it</font>

632
00:26:13,670 --> 00:26:17,540
for Windows<font color="#CCCCCC"> XP</font><font color="#E5E5E5"> now if we compare this</font><font color="#CCCCCC"> to</font>

633
00:26:16,130 --> 00:26:20,570
Windows 10<font color="#CCCCCC"> we still have the</font><font color="#E5E5E5"> same</font>

634
00:26:17,540 --> 00:26:21,740
subroutine that's inside and we<font color="#E5E5E5"> can note</font>

635
00:26:20,570 --> 00:26:25,970
that<font color="#CCCCCC"> the</font><font color="#E5E5E5"> first thing</font><font color="#CCCCCC"> that happens here</font>

636
00:26:21,740 --> 00:26:28,550
<font color="#CCCCCC">is that</font><font color="#E5E5E5"> the the first function that's</font>

637
00:26:25,970 --> 00:26:30,350
<font color="#E5E5E5">called is base create process parameters</font>

638
00:26:28,550 --> 00:26:32,149
which creates the parameters we<font color="#CCCCCC"> can see</font>

639
00:26:30,350 --> 00:26:32,449
the<font color="#CCCCCC"> parameters</font><font color="#E5E5E5"> being created and filled</font>

640
00:26:32,150 --> 00:26:35,570
<font color="#E5E5E5">out</font>

641
00:26:32,450 --> 00:26:37,369
some data but<font color="#E5E5E5"> this happens before</font>

642
00:26:35,570 --> 00:26:40,039
opening file before<font color="#E5E5E5"> creating the section</font>

643
00:26:37,369 --> 00:26:42,019
before<font color="#E5E5E5"> a process even exists at this</font>

644
00:26:40,039 --> 00:26:43,158
<font color="#E5E5E5">point we call this new system call it's</font>

645
00:26:42,019 --> 00:26:48,379
<font color="#CCCCCC">not that new it was introduced</font><font color="#E5E5E5"> in</font>

646
00:26:43,159 --> 00:26:50,179
Windows Vista<font color="#CCCCCC"> but it's this this suburb</font>

647
00:26:48,379 --> 00:26:53,330
<font color="#E5E5E5">tested this system called called anti</font>

648
00:26:50,179 --> 00:26:54,799
create user process<font color="#CCCCCC"> is does not accept a</font>

649
00:26:53,330 --> 00:26:57,320
section handle like the one in Windows

650
00:26:54,799 --> 00:27:01,519
XP did it<font color="#E5E5E5"> actually expects a file path</font>

651
00:26:57,320 --> 00:27:03,109
and the kernel opens the path for<font color="#CCCCCC"> us the</font>

652
00:27:01,519 --> 00:27:04,970
other thing<font color="#CCCCCC"> to note here is that the</font>

653
00:27:03,109 --> 00:27:07,100
process<font color="#CCCCCC"> parameters are being passed to</font>

654
00:27:04,970 --> 00:27:10,850
<font color="#E5E5E5">the kernel as opposed to Windows XP</font><font color="#CCCCCC"> when</font>

655
00:27:07,100 --> 00:27:14,149
this was copied<font color="#CCCCCC"> post</font><font color="#E5E5E5"> process creation</font><font color="#CCCCCC"> in</font>

656
00:27:10,850 --> 00:27:16,279
the user space<font color="#E5E5E5"> code so if we take a look</font>

657
00:27:14,149 --> 00:27:18,350
<font color="#E5E5E5">at the kernel routine we can see that</font><font color="#CCCCCC"> we</font>

658
00:27:16,279 --> 00:27:19,940
try<font color="#E5E5E5"> to open the file in kernel as</font>

659
00:27:18,350 --> 00:27:22,820
opposed to Windows<font color="#CCCCCC"> XP when</font><font color="#E5E5E5"> it was a user</font>

660
00:27:19,940 --> 00:27:25,039
mode if it fails<font color="#E5E5E5"> then we try again of</font>

661
00:27:22,820 --> 00:27:26,869
<font color="#E5E5E5">course well then we create</font><font color="#CCCCCC"> the section</font>

662
00:27:25,039 --> 00:27:28,970
<font color="#E5E5E5">just</font><font color="#CCCCCC"> like in</font><font color="#E5E5E5"> Windows XP except now it's</font>

663
00:27:26,869 --> 00:27:31,279
happening in kernel<font color="#CCCCCC"> at this point we</font>

664
00:27:28,970 --> 00:27:33,859
copied the<font color="#E5E5E5"> process</font><font color="#CCCCCC"> parameters from user</font>

665
00:27:31,279 --> 00:27:36,440
<font color="#E5E5E5">mode to kernel mode and then we move on</font>

666
00:27:33,859 --> 00:27:39,470
to call the allocate process routine

667
00:27:36,440 --> 00:27:41,059
which again calls the create object

668
00:27:39,470 --> 00:27:45,499
routine to create the<font color="#E5E5E5"> actual process</font>

669
00:27:41,059 --> 00:27:49,190
object allocates virtual memory for the

670
00:27:45,499 --> 00:27:52,489
process<font color="#CCCCCC"> parameters copies the parameters</font>

671
00:27:49,190 --> 00:27:56,470
to the new process<font color="#E5E5E5"> and then sets</font><font color="#CCCCCC"> the</font>

672
00:27:52,489 --> 00:27:58,850
value in the process environment block

673
00:27:56,470 --> 00:28:02,210
from this<font color="#E5E5E5"> point on there's not much left</font>

674
00:27:58,850 --> 00:28:04,459
we are allocating the main thread<font color="#E5E5E5"> we</font>

675
00:28:02,210 --> 00:28:06,289
insert<font color="#CCCCCC"> the main the process</font><font color="#E5E5E5"> and thread</font>

676
00:28:04,460 --> 00:28:09,320
into<font color="#CCCCCC"> their respective lists at this</font>

677
00:28:06,289 --> 00:28:10,908
point the process create notify routine

678
00:28:09,320 --> 00:28:14,720
that<font color="#E5E5E5"> Eugene mentioned earlier is called</font>

679
00:28:10,909 --> 00:28:16,249
and<font color="#E5E5E5"> we leave the kernel</font><font color="#CCCCCC"> and if we need</font>

680
00:28:14,720 --> 00:28:24,289
to<font color="#E5E5E5"> we resumed the thread according to</font>

681
00:28:16,249 --> 00:28:25,869
the creation<font color="#E5E5E5"> flag specified</font><font color="#CCCCCC"> okay so to</font>

682
00:28:24,289 --> 00:28:29,509
highlight the main differences in

683
00:28:25,869 --> 00:28:31,070
Windows 10 we have<font color="#E5E5E5"> anti create user</font>

684
00:28:29,509 --> 00:28:33,320
process being<font color="#E5E5E5"> used</font><font color="#CCCCCC"> instead</font><font color="#E5E5E5"> of anti</font>

685
00:28:31,070 --> 00:28:35,059
create process the X now NT create

686
00:28:33,320 --> 00:28:37,460
process<font color="#CCCCCC"> CX receives a handle to a</font>

687
00:28:35,059 --> 00:28:41,330
section while NT create user process

688
00:28:37,460 --> 00:28:43,399
receives a file path luckily<font color="#E5E5E5"> for us and</font>

689
00:28:41,330 --> 00:28:45,409
to create processing<font color="#E5E5E5"> X is still</font>

690
00:28:43,399 --> 00:28:47,870
available<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> latest Windows 10</font>

691
00:28:45,410 --> 00:28:50,690
<font color="#CCCCCC">least because it's used in the creation</font>

692
00:28:47,870 --> 00:28:53,060
of minimal processes which is a bit

693
00:28:50,690 --> 00:28:55,190
beyond the<font color="#E5E5E5"> scope</font><font color="#CCCCCC"> of this talk</font><font color="#E5E5E5"> now the</font>

694
00:28:53,060 --> 00:28:56,899
<font color="#E5E5E5">only thing is unfortunately the</font><font color="#CCCCCC"> all the</font>

695
00:28:55,190 --> 00:28:59,240
supporting user mode code that we had an

696
00:28:56,900 --> 00:29:00,530
<font color="#E5E5E5">XP is no longer available for us so what</font>

697
00:28:59,240 --> 00:29:04,100
we need to<font color="#E5E5E5"> do is we need</font><font color="#CCCCCC"> to implement</font>

698
00:29:00,530 --> 00:29:07,550
the the heavy lifting<font color="#E5E5E5"> on our own by</font>

699
00:29:04,100 --> 00:29:10,100
ourselves<font color="#E5E5E5"> by creating it ourselves let's</font>

700
00:29:07,550 --> 00:29:13,430
talk about<font color="#E5E5E5"> doppelganger so our goal here</font>

701
00:29:10,100 --> 00:29:16,040
<font color="#CCCCCC">is to load and execute</font><font color="#E5E5E5"> an arbitrary</font>

702
00:29:13,430 --> 00:29:18,020
executable inside the context of a

703
00:29:16,040 --> 00:29:19,700
<font color="#E5E5E5">legitimate process and we want to use</font>

704
00:29:18,020 --> 00:29:21,830
none<font color="#E5E5E5"> of the suspicious process hollowing</font>

705
00:29:19,700 --> 00:29:24,410
<font color="#E5E5E5">API calls such as</font><font color="#CCCCCC"> an</font><font color="#E5E5E5"> map view of section</font>

706
00:29:21,830 --> 00:29:27,080
virtual protect<font color="#E5E5E5"> set</font><font color="#CCCCCC"> third context APCs</font>

707
00:29:24,410 --> 00:29:29,390
<font color="#E5E5E5">and that kind of thing we want</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> visa to</font>

708
00:29:27,080 --> 00:29:31,610
scan only<font color="#E5E5E5"> clean files or to</font><font color="#CCCCCC"> not even</font>

709
00:29:29,390 --> 00:29:34,810
<font color="#E5E5E5">scan us at all and we don't want to be</font>

710
00:29:31,610 --> 00:29:37,570
<font color="#CCCCCC">discovered by advanced forensics tools</font>

711
00:29:34,810 --> 00:29:40,850
so we break<font color="#CCCCCC"> doppelganger into four steps</font>

712
00:29:37,570 --> 00:29:43,700
step number<font color="#CCCCCC"> one transact</font><font color="#E5E5E5"> step number two</font>

713
00:29:40,850 --> 00:29:45,830
load step number<font color="#E5E5E5"> three</font><font color="#CCCCCC"> rollback</font><font color="#E5E5E5"> and step</font>

714
00:29:43,700 --> 00:29:48,560
number four animate which brings the

715
00:29:45,830 --> 00:29:52,100
doppelganger<font color="#E5E5E5"> to life let's take a look</font>

716
00:29:48,560 --> 00:29:53,750
at step<font color="#E5E5E5"> number one transact first off we</font>

717
00:29:52,100 --> 00:29:55,310
create a transaction<font color="#CCCCCC"> just in the example</font>

718
00:29:53,750 --> 00:29:58,250
<font color="#CCCCCC">that Eugene showed before</font><font color="#E5E5E5"> with a simple</font>

719
00:29:55,310 --> 00:30:01,550
<font color="#E5E5E5">transaction aware application at this</font>

720
00:29:58,250 --> 00:30:04,040
point we open a file that<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a</font>

721
00:30:01,550 --> 00:30:06,530
legitimate<font color="#CCCCCC"> file such as SVC host</font><font color="#E5E5E5"> inside</font>

722
00:30:04,040 --> 00:30:08,420
of a transaction<font color="#E5E5E5"> so we have a nice green</font>

723
00:30:06,530 --> 00:30:10,639
clean looking file object that we just

724
00:30:08,420 --> 00:30:12,140
<font color="#E5E5E5">opened and it's open inside of a</font>

725
00:30:10,640 --> 00:30:14,210
transaction<font color="#CCCCCC"> what we're gonna do now is</font>

726
00:30:12,140 --> 00:30:16,400
<font color="#E5E5E5">we're going to overwrite</font><font color="#CCCCCC"> the file</font><font color="#E5E5E5"> inside</font>

727
00:30:14,210 --> 00:30:18,230
<font color="#CCCCCC">of a transaction and now it's tainted</font>

728
00:30:16,400 --> 00:30:21,530
<font color="#E5E5E5">with malicious code the only thing to</font>

729
00:30:18,230 --> 00:30:23,810
<font color="#CCCCCC">note here is that anyone</font><font color="#E5E5E5"> looking at this</font>

730
00:30:21,530 --> 00:30:25,970
<font color="#CCCCCC">file from the outside doesn't see our</font>

731
00:30:23,810 --> 00:30:28,899
changes<font color="#CCCCCC"> they're reflected only within</font>

732
00:30:25,970 --> 00:30:31,520
the context of the transaction context

733
00:30:28,900 --> 00:30:34,190
step number<font color="#E5E5E5"> two load what we do at this</font>

734
00:30:31,520 --> 00:30:38,330
point<font color="#E5E5E5"> is we create a memory section from</font>

735
00:30:34,190 --> 00:30:40,940
the tainted file and so we have a newly

736
00:30:38,330 --> 00:30:42,500
<font color="#E5E5E5">allocated section object that</font><font color="#CCCCCC"> contains</font>

737
00:30:40,940 --> 00:30:45,620
all the<font color="#E5E5E5"> malicious code</font><font color="#CCCCCC"> that we wrote to</font>

738
00:30:42,500 --> 00:30:46,490
the file at this point we can move on to

739
00:30:45,620 --> 00:30:49,760
rollback

740
00:30:46,490 --> 00:30:51,410
which is as we talked<font color="#E5E5E5"> about before</font><font color="#CCCCCC"> when</font>

741
00:30:49,760 --> 00:30:52,610
you're working with transactions<font color="#E5E5E5"> when</font>

742
00:30:51,410 --> 00:30:54,470
you're done you need<font color="#E5E5E5"> to decide if you</font>

743
00:30:52,610 --> 00:30:56,330
want<font color="#E5E5E5"> to commit the transaction and save</font>

744
00:30:54,470 --> 00:30:57,560
the files to the disk<font color="#CCCCCC"> or if you want to</font>

745
00:30:56,330 --> 00:30:59,480
<font color="#E5E5E5">roll them back because you ran in</font>

746
00:30:57,560 --> 00:31:01,070
some kind of error in our example we

747
00:30:59,480 --> 00:31:02,120
have<font color="#E5E5E5"> no interest in committing the</font>

748
00:31:01,070 --> 00:31:04,370
transaction because<font color="#E5E5E5"> we don't want</font>

749
00:31:02,120 --> 00:31:06,409
<font color="#CCCCCC">anybody</font><font color="#E5E5E5"> to see</font><font color="#CCCCCC"> the changes we made to</font>

750
00:31:04,370 --> 00:31:08,060
<font color="#CCCCCC">the file</font><font color="#E5E5E5"> so what we're going to do here</font>

751
00:31:06,410 --> 00:31:09,980
<font color="#E5E5E5">is we're gonna roll</font><font color="#CCCCCC"> back the transaction</font>

752
00:31:08,060 --> 00:31:12,320
<font color="#E5E5E5">the file becomes green again and clean</font>

753
00:31:09,980 --> 00:31:16,870
and<font color="#E5E5E5"> this really effectively removes all</font>

754
00:31:12,320 --> 00:31:19,610
of<font color="#CCCCCC"> our rights from the</font><font color="#E5E5E5"> file system now</font>

755
00:31:16,870 --> 00:31:22,969
we move on<font color="#E5E5E5"> to step</font><font color="#CCCCCC"> number four animate</font>

756
00:31:19,610 --> 00:31:24,560
using<font color="#E5E5E5"> the details we found out before</font>

757
00:31:22,970 --> 00:31:28,670
from<font color="#E5E5E5"> examining the windows process</font>

758
00:31:24,560 --> 00:31:30,409
loader<font color="#E5E5E5"> we can call the NT create process</font>

759
00:31:28,670 --> 00:31:33,590
the<font color="#E5E5E5"> X routine that was used in Windows</font>

760
00:31:30,410 --> 00:31:35,450
XP<font color="#E5E5E5"> to create a</font><font color="#CCCCCC"> process from</font><font color="#E5E5E5"> the section</font>

761
00:31:33,590 --> 00:31:37,159
<font color="#E5E5E5">that is create that</font><font color="#CCCCCC"> we created</font><font color="#E5E5E5"> and so</font>

762
00:31:35,450 --> 00:31:39,500
once<font color="#E5E5E5"> we do</font><font color="#CCCCCC"> that we now have a green</font>

763
00:31:37,160 --> 00:31:41,930
<font color="#CCCCCC">process a nice clean looking process</font>

764
00:31:39,500 --> 00:31:44,540
that's running our or hosting our

765
00:31:41,930 --> 00:31:47,690
malicious<font color="#CCCCCC"> X section at this point we</font>

766
00:31:44,540 --> 00:31:50,480
create the thread of<font color="#E5E5E5"> the for the main</font>

767
00:31:47,690 --> 00:31:51,710
the main thread and we move on to do all

768
00:31:50,480 --> 00:31:54,320
the<font color="#E5E5E5"> heavy lifting that we need to do</font>

769
00:31:51,710 --> 00:31:56,870
that Windows XP<font color="#CCCCCC"> s</font><font color="#E5E5E5"> user time libraries</font>

770
00:31:54,320 --> 00:31:58,909
libraries used to do<font color="#E5E5E5"> for us which is</font><font color="#CCCCCC"> to</font>

771
00:31:56,870 --> 00:32:00,320
create<font color="#E5E5E5"> the process</font><font color="#CCCCCC"> parameters</font><font color="#E5E5E5"> to fill</font>

772
00:31:58,910 --> 00:32:04,400
them up with<font color="#E5E5E5"> to fill them out with the</font>

773
00:32:00,320 --> 00:32:06,649
correct<font color="#E5E5E5"> correct parameters to allocate</font>

774
00:32:04,400 --> 00:32:09,620
memory<font color="#CCCCCC"> for the parameters to copy it</font>

775
00:32:06,650 --> 00:32:11,480
<font color="#CCCCCC">into the doppelganger process and then</font>

776
00:32:09,620 --> 00:32:14,750
to<font color="#E5E5E5"> set it in the</font><font color="#CCCCCC"> PB of the doppelganger</font>

777
00:32:11,480 --> 00:32:17,660
<font color="#CCCCCC">and then finally all that's left to do</font>

778
00:32:14,750 --> 00:32:21,020
<font color="#E5E5E5">is resume the execution</font><font color="#CCCCCC"> run the process</font>

779
00:32:17,660 --> 00:32:23,540
and now we have a nice green process

780
00:32:21,020 --> 00:32:25,639
<font color="#E5E5E5">that's running and the Avs will not take</font>

781
00:32:23,540 --> 00:32:27,850
a look at it so let's see this live in a

782
00:32:25,640 --> 00:32:27,850
demo

783
00:32:33,910 --> 00:32:38,260
<font color="#CCCCCC">I have here a virtual</font><font color="#E5E5E5"> machine that</font><font color="#CCCCCC"> as</font>

784
00:32:37,120 --> 00:32:43,060
you<font color="#E5E5E5"> can see it's running Windows</font>

785
00:32:38,260 --> 00:32:46,750
Defender<font color="#CCCCCC"> on the very updated</font><font color="#E5E5E5"> definitions</font>

786
00:32:43,060 --> 00:32:48,940
December<font color="#E5E5E5"> 7th that's today</font><font color="#CCCCCC"> and what I'm</font>

787
00:32:46,750 --> 00:32:51,190
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> do here is we have this password</font>

788
00:32:48,940 --> 00:32:53,980
dumping tool that's should<font color="#CCCCCC"> be well known</font>

789
00:32:51,190 --> 00:32:56,470
<font color="#E5E5E5">to everyone</font><font color="#CCCCCC"> and well we</font><font color="#E5E5E5"> don't</font><font color="#CCCCCC"> really</font>

790
00:32:53,980 --> 00:32:59,320
<font color="#E5E5E5">think</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> hacking tool on our own</font>

791
00:32:56,470 --> 00:33:00,820
or on its own<font color="#E5E5E5"> Windows</font><font color="#CCCCCC"> Defender seems to</font>

792
00:32:59,320 --> 00:33:03,240
think so so let's try to<font color="#E5E5E5"> double click it</font>

793
00:33:00,820 --> 00:33:03,240
and<font color="#E5E5E5"> see what happens</font>

794
00:33:04,920 --> 00:33:10,980
virus and<font color="#E5E5E5"> threat protection</font><font color="#CCCCCC"> threats</font>

795
00:33:07,360 --> 00:33:14,080
found so Windows Defender<font color="#CCCCCC"> found threats</font>

796
00:33:10,980 --> 00:33:15,460
obviously the executable did not run<font color="#E5E5E5"> now</font>

797
00:33:14,080 --> 00:33:17,610
what we're<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to try</font><font color="#E5E5E5"> to do is we're</font>

798
00:33:15,460 --> 00:33:21,610
<font color="#E5E5E5">going to create a doppelganger of</font>

799
00:33:17,610 --> 00:33:24,070
<font color="#E5E5E5">mspaint</font><font color="#CCCCCC"> which is the windows utility for</font>

800
00:33:21,610 --> 00:33:27,580
making nice little drawings<font color="#E5E5E5"> and we're</font>

801
00:33:24,070 --> 00:33:30,730
gonna have this actually execute<font color="#E5E5E5"> the</font>

802
00:33:27,580 --> 00:33:33,220
same tool except this time it's going to

803
00:33:30,730 --> 00:33:36,250
<font color="#E5E5E5">read the tool from disk in an encrypted</font>

804
00:33:33,220 --> 00:33:38,200
<font color="#E5E5E5">form so that defender cannot scan it and</font>

805
00:33:36,250 --> 00:33:42,730
let's see<font color="#CCCCCC"> if defender has any problems</font>

806
00:33:38,200 --> 00:33:44,500
with this with this action at<font color="#E5E5E5"> this point</font>

807
00:33:42,730 --> 00:33:47,080
<font color="#CCCCCC">the tool was executed this</font><font color="#E5E5E5"> is a fully</font>

808
00:33:44,500 --> 00:33:49,150
functional tool it can be used<font color="#E5E5E5"> and as</font>

809
00:33:47,080 --> 00:33:53,199
you can<font color="#E5E5E5"> see Windows Defender doesn't</font>

810
00:33:49,150 --> 00:33:54,970
seem to mind process Explorer can help

811
00:33:53,200 --> 00:33:56,920
us take<font color="#CCCCCC"> a look</font><font color="#E5E5E5"> at what's going on here</font>

812
00:33:54,970 --> 00:33:59,740
<font color="#E5E5E5">maybe we can figure out if we take a</font>

813
00:33:56,920 --> 00:34:02,100
look<font color="#CCCCCC"> and take a look at the process</font><font color="#E5E5E5"> we</font>

814
00:33:59,740 --> 00:34:04,660
can see that we have<font color="#CCCCCC"> mspaint running and</font>

815
00:34:02,100 --> 00:34:07,600
there's nothing here showing us<font color="#E5E5E5"> that</font>

816
00:34:04,660 --> 00:34:09,580
<font color="#CCCCCC">it's actually a</font><font color="#E5E5E5"> different tool that's</font>

817
00:34:07,600 --> 00:34:11,259
being<font color="#CCCCCC"> hosted inside this process it</font>

818
00:34:09,580 --> 00:34:13,120
<font color="#E5E5E5">actually even preserved the icon which</font>

819
00:34:11,260 --> 00:34:15,520
is really interesting<font color="#CCCCCC"> if we</font><font color="#E5E5E5"> even try to</font>

820
00:34:13,120 --> 00:34:18,920
verify it'll say that the this<font color="#E5E5E5"> is</font>

821
00:34:15,520 --> 00:34:21,989
verified that's really nice

822
00:34:18,920 --> 00:34:21,989
[Applause]

823
00:34:24,230 --> 00:34:29,819
thank you

824
00:34:26,699 --> 00:34:32,609
so while conducting<font color="#E5E5E5"> this research the</font>

825
00:34:29,819 --> 00:34:36,058
<font color="#E5E5E5">first time this thing we ran this thing</font>

826
00:34:32,609 --> 00:34:37,469
<font color="#CCCCCC">I'm Windows</font><font color="#E5E5E5"> 7 and network just fine and</font>

827
00:34:36,059 --> 00:34:39,569
<font color="#E5E5E5">then we ran it on Windows 10 and the</font>

828
00:34:37,469 --> 00:34:41,158
system crashed<font color="#CCCCCC"> and so it turns out</font><font color="#E5E5E5"> that</font>

829
00:34:39,569 --> 00:34:42,899
there<font color="#CCCCCC"> is a bug that</font><font color="#E5E5E5"> was introduced in</font>

830
00:34:41,159 --> 00:34:45,179
<font color="#CCCCCC">Windows redstone and</font><font color="#E5E5E5"> reported by James</font>

831
00:34:42,899 --> 00:34:47,159
first<font color="#E5E5E5"> raw and</font><font color="#CCCCCC"> its null pointer to</font>

832
00:34:45,179 --> 00:34:49,230
reference so the<font color="#CCCCCC"> empty create process</font>

833
00:34:47,159 --> 00:34:50,609
the<font color="#E5E5E5"> X when it receives a zero is one of</font>

834
00:34:49,230 --> 00:34:53,039
the<font color="#E5E5E5"> parameters it tries to dereference</font>

835
00:34:50,609 --> 00:34:55,168
it<font color="#CCCCCC"> without</font><font color="#E5E5E5"> checking</font><font color="#CCCCCC"> first</font><font color="#E5E5E5"> and so the</font>

836
00:34:53,039 --> 00:34:58,740
system<font color="#E5E5E5"> crashes for for an access</font>

837
00:34:55,168 --> 00:35:00,720
violation<font color="#CCCCCC"> and luckily for us</font><font color="#E5E5E5"> though</font>

838
00:34:58,740 --> 00:35:03,390
<font color="#E5E5E5">Microsoft was nice enough to fix it for</font>

839
00:35:00,720 --> 00:35:06,209
this talk<font color="#E5E5E5"> because if the bug was</font>

840
00:35:03,390 --> 00:35:08,038
<font color="#E5E5E5">introduced in redstone a while back and</font>

841
00:35:06,210 --> 00:35:10,380
fixed in the fall<font color="#CCCCCC"> of craters update</font><font color="#E5E5E5"> two</font>

842
00:35:08,039 --> 00:35:11,730
months ago<font color="#E5E5E5"> so if this lecture was taking</font>

843
00:35:10,380 --> 00:35:13,589
place<font color="#E5E5E5"> two months ago we couldn't do it</font>

844
00:35:11,730 --> 00:35:19,140
<font color="#E5E5E5">on the most recent Windows 10</font><font color="#CCCCCC"> release</font>

845
00:35:13,589 --> 00:35:21,119
<font color="#E5E5E5">but now we can so thanks</font><font color="#CCCCCC"> the affected</font>

846
00:35:19,140 --> 00:35:23,339
products of process doppelganger<font color="#CCCCCC"> are the</font>

847
00:35:21,119 --> 00:35:25,799
following<font color="#E5E5E5"> that we tested we tested all</font>

848
00:35:23,339 --> 00:35:28,109
these they were all<font color="#E5E5E5"> bypassed what we did</font>

849
00:35:25,799 --> 00:35:30,750
is<font color="#CCCCCC"> we took</font><font color="#E5E5E5"> the executable such as the</font>

850
00:35:28,109 --> 00:35:32,880
tool we showed<font color="#CCCCCC"> before</font><font color="#E5E5E5"> we saw that the</font>

851
00:35:30,750 --> 00:35:34,770
antivirus Flags this as an executable

852
00:35:32,880 --> 00:35:36,900
<font color="#E5E5E5">when we</font><font color="#CCCCCC"> double-click it then we loaded</font>

853
00:35:34,770 --> 00:35:40,529
it as a<font color="#E5E5E5"> doppelganger and it was able</font><font color="#CCCCCC"> to</font>

854
00:35:36,900 --> 00:35:43,589
run with no problems if you want to talk

855
00:35:40,529 --> 00:35:46,740
<font color="#E5E5E5">detection and prevention then first of</font>

856
00:35:43,589 --> 00:35:49,700
<font color="#E5E5E5">all it's not so</font><font color="#CCCCCC"> easy but a simple way to</font>

857
00:35:46,740 --> 00:35:51,868
go about this<font color="#E5E5E5"> is to scan the file object</font>

858
00:35:49,700 --> 00:35:53,549
<font color="#E5E5E5">available in the create process</font>

859
00:35:51,869 --> 00:35:55,529
notification routine and to use the

860
00:35:53,549 --> 00:35:57,329
exact object not to<font color="#E5E5E5"> reopen the file and</font>

861
00:35:55,529 --> 00:35:59,010
if you get an error<font color="#E5E5E5"> while trying to do</font>

862
00:35:57,329 --> 00:36:01,160
it then<font color="#E5E5E5"> you know doppelganger is taking</font>

863
00:35:59,010 --> 00:36:05,460
<font color="#E5E5E5">place so you could you should block it</font>

864
00:36:01,160 --> 00:36:06,808
about<font color="#CCCCCC"> DLL files</font><font color="#E5E5E5"> this doesn't help</font><font color="#CCCCCC"> so</font>

865
00:36:05,460 --> 00:36:08,460
what you can do here is<font color="#CCCCCC"> try to scan all</font>

866
00:36:06,809 --> 00:36:10,920
sections even<font color="#E5E5E5"> data sections</font><font color="#CCCCCC"> because as</font>

867
00:36:08,460 --> 00:36:15,480
we saw the flag is<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the mini</font><font color="#E5E5E5"> filter</font>

868
00:36:10,920 --> 00:36:17,670
callback<font color="#CCCCCC"> are are</font><font color="#E5E5E5"> actually misleading as</font>

869
00:36:15,480 --> 00:36:19,710
for forensics if you want to detect<font color="#CCCCCC"> the</font>

870
00:36:17,670 --> 00:36:22,410
process in retrospect<font color="#CCCCCC"> that has been</font>

871
00:36:19,710 --> 00:36:25,200
doppelganger you can take a look<font color="#E5E5E5"> at the</font>

872
00:36:22,410 --> 00:36:27,210
file object<font color="#CCCCCC"> of the associate with the</font>

873
00:36:25,200 --> 00:36:30,089
process<font color="#CCCCCC"> and</font><font color="#E5E5E5"> if it has the right</font><font color="#CCCCCC"> access</font>

874
00:36:27,210 --> 00:36:31,859
enabled<font color="#E5E5E5"> then then you can know that</font>

875
00:36:30,089 --> 00:36:33,450
<font color="#E5E5E5">something fishy is going on here and</font>

876
00:36:31,859 --> 00:36:35,020
there's a good<font color="#E5E5E5"> chance</font><font color="#CCCCCC"> it's process hot</font>

877
00:36:33,450 --> 00:36:37,779
process<font color="#E5E5E5"> doppelganger</font>

878
00:36:35,020 --> 00:36:39,100
and also<font color="#E5E5E5"> specifically on Windows 10 the</font>

879
00:36:37,780 --> 00:36:40,630
<font color="#CCCCCC">II process structure</font><font color="#E5E5E5"> has something</font>

880
00:36:39,100 --> 00:36:42,190
<font color="#CCCCCC">called the image file pointer</font><font color="#E5E5E5"> which is</font>

881
00:36:40,630 --> 00:36:44,170
<font color="#E5E5E5">supposed to point to the file</font><font color="#CCCCCC"> object and</font>

882
00:36:42,190 --> 00:36:51,010
this doesn't<font color="#CCCCCC"> this will be null</font><font color="#E5E5E5"> in a</font>

883
00:36:44,170 --> 00:36:52,570
<font color="#E5E5E5">doppelganger process</font><font color="#CCCCCC"> to sum up process</font>

884
00:36:51,010 --> 00:36:54,970
doppelganger allows us to take a

885
00:36:52,570 --> 00:36:57,490
malicious executable<font color="#E5E5E5"> load it in</font><font color="#CCCCCC"> the</font>

886
00:36:54,970 --> 00:37:01,750
context of a<font color="#E5E5E5"> legitimate looking file and</font>

887
00:36:57,490 --> 00:37:03,669
create<font color="#E5E5E5"> a</font><font color="#CCCCCC"> process out of it we use the</font>

888
00:37:01,750 --> 00:37:05,260
<font color="#CCCCCC">Windows loader</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> so there's no need</font>

889
00:37:03,670 --> 00:37:08,770
<font color="#CCCCCC">for a custom</font><font color="#E5E5E5"> reflective loader of any</font>

890
00:37:05,260 --> 00:37:10,900
sort<font color="#E5E5E5"> the file is mapped to an image file</font>

891
00:37:08,770 --> 00:37:13,090
<font color="#E5E5E5">correctly on disk</font><font color="#CCCCCC"> just like any legit</font>

892
00:37:10,900 --> 00:37:15,760
process and we don't have<font color="#E5E5E5"> any of the</font>

893
00:37:13,090 --> 00:37:17,920
<font color="#CCCCCC">unman</font><font color="#E5E5E5"> unmapped dynamically generated</font>

894
00:37:15,760 --> 00:37:19,570
runtime code<font color="#E5E5E5"> that is the</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> usually</font>

895
00:37:17,920 --> 00:37:22,840
associated<font color="#CCCCCC"> with modern malware and is</font>

896
00:37:19,570 --> 00:37:25,260
detected by modern solutions this can be

897
00:37:22,840 --> 00:37:27,580
used to<font color="#E5E5E5"> can</font><font color="#CCCCCC"> be leveraged</font><font color="#E5E5E5"> to</font>

898
00:37:25,260 --> 00:37:30,820
<font color="#CCCCCC">doppelgänger ll files as well and it's</font>

899
00:37:27,580 --> 00:37:32,319
completely file s and even<font color="#E5E5E5"> advanced</font>

900
00:37:30,820 --> 00:37:36,070
forensics tools such as volatility<font color="#E5E5E5"> won't</font>

901
00:37:32,320 --> 00:37:38,100
<font color="#E5E5E5">detect it at this point</font><font color="#CCCCCC"> this works on</font>

902
00:37:36,070 --> 00:37:40,180
<font color="#CCCCCC">all Windows versions starting Vista and</font>

903
00:37:38,100 --> 00:37:43,210
bypasses all these solutions<font color="#E5E5E5"> that we</font>

904
00:37:40,180 --> 00:37:45,009
tested<font color="#E5E5E5"> the security solutions we'd like</font>

905
00:37:43,210 --> 00:37:47,830
to give a<font color="#E5E5E5"> special thanks</font><font color="#CCCCCC"> to am remiss</font>

906
00:37:45,010 --> 00:37:49,390
<font color="#CCCCCC">give</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> Budhia vote</font><font color="#E5E5E5"> who helped us a lot</font>

907
00:37:47,830 --> 00:37:50,650
<font color="#E5E5E5">with this research and without them it</font>

908
00:37:49,390 --> 00:37:53,859
<font color="#E5E5E5">wouldn't be possible so thank you guys</font>

909
00:37:50,650 --> 00:37:55,960
<font color="#CCCCCC">and thank you all for coming and</font>

910
00:37:53,860 --> 00:37:59,310
listening<font color="#E5E5E5"> and at this point if you have</font>

911
00:37:55,960 --> 00:37:59,310
any questions we'd love<font color="#E5E5E5"> to address them</font>

912
00:38:04,180 --> 00:38:12,098
[Applause]

913
00:38:07,470 --> 00:38:15,058
<font color="#E5E5E5">all right what are</font><font color="#CCCCCC"> the question that you</font>

914
00:38:12,099 --> 00:38:15,059
would<font color="#E5E5E5"> like</font><font color="#CCCCCC"> to ask</font><font color="#E5E5E5"> them</font>

915
00:38:22,730 --> 00:38:27,349
thank you for<font color="#CCCCCC"> the talk I have one</font>

916
00:38:25,190 --> 00:38:29,660
question<font color="#CCCCCC"> just to double-check if I</font>

917
00:38:27,349 --> 00:38:33,560
understand<font color="#CCCCCC"> correctly with this technique</font>

918
00:38:29,660 --> 00:38:36,348
when you execute<font color="#E5E5E5"> the malicious code</font><font color="#CCCCCC"> it</font>

919
00:38:33,560 --> 00:38:38,210
will have all the privileges<font color="#E5E5E5"> the process</font>

920
00:38:36,349 --> 00:38:40,190
you<font color="#CCCCCC"> are using</font><font color="#E5E5E5"> for that will normally</font>

921
00:38:38,210 --> 00:38:42,680
have<font color="#E5E5E5"> right so for example if that was</font>

922
00:38:40,190 --> 00:38:44,990
the MS paint and I'm executing<font color="#E5E5E5"> my</font>

923
00:38:42,680 --> 00:38:47,390
mother's code it will be able to do

924
00:38:44,990 --> 00:38:49,339
<font color="#CCCCCC">anything which the the MS paint</font><font color="#E5E5E5"> process</font>

925
00:38:47,390 --> 00:38:51,470
would be able<font color="#E5E5E5"> to do is that correct</font><font color="#CCCCCC"> yeah</font>

926
00:38:49,339 --> 00:38:53,299
yeah it's<font color="#E5E5E5"> running with like Emma's paint</font>

927
00:38:51,470 --> 00:38:55,669
the process gets the<font color="#CCCCCC"> token just</font><font color="#E5E5E5"> like</font>

928
00:38:53,300 --> 00:38:58,010
<font color="#E5E5E5">Emma's paint but it all depends in</font>

929
00:38:55,670 --> 00:38:59,690
<font color="#E5E5E5">Windows on the context on which the</font>

930
00:38:58,010 --> 00:39:02,270
process was<font color="#CCCCCC"> created so if it was created</font>

931
00:38:59,690 --> 00:39:03,890
by an unprivileged<font color="#E5E5E5"> process then it won't</font>

932
00:39:02,270 --> 00:39:05,960
have privileges<font color="#E5E5E5"> was created by a</font>

933
00:39:03,890 --> 00:39:13,359
<font color="#E5E5E5">privileged process then it could do</font>

934
00:39:05,960 --> 00:39:13,359
anything<font color="#E5E5E5"> thank you next question</font>

935
00:39:21,420 --> 00:39:26,940
<font color="#CCCCCC">cents for presentation I</font><font color="#E5E5E5"> just have an</font>

936
00:39:24,460 --> 00:39:29,680
equation do you guys investigate it like

937
00:39:26,940 --> 00:39:32,370
this transactions API that you used on

938
00:39:29,680 --> 00:39:35,500
<font color="#CCCCCC">Windows I doesn't have any kind of</font>

939
00:39:32,370 --> 00:39:37,180
memory implications so<font color="#CCCCCC"> like we</font><font color="#E5E5E5"> we agreed</font>

940
00:39:35,500 --> 00:39:39,640
while<font color="#CCCCCC"> on transaction should be created</font>

941
00:39:37,180 --> 00:39:43,839
somewhere right so maybe<font color="#CCCCCC"> Z's</font><font color="#E5E5E5"> like</font>

942
00:39:39,640 --> 00:39:46,629
implications are detectable<font color="#E5E5E5"> okay so that</font>

943
00:39:43,840 --> 00:39:50,680
is<font color="#CCCCCC"> they're</font><font color="#E5E5E5"> actually written to choose</font>

944
00:39:46,630 --> 00:39:52,570
the file system in<font color="#E5E5E5"> special files and the</font>

945
00:39:50,680 --> 00:40:04,000
details of<font color="#E5E5E5"> this can be read about online</font>

946
00:39:52,570 --> 00:40:07,330
<font color="#E5E5E5">on</font><font color="#CCCCCC"> MSDN it's documented hello my</font>

947
00:40:04,000 --> 00:40:11,110
<font color="#E5E5E5">question is what about access rights is</font>

948
00:40:07,330 --> 00:40:13,870
<font color="#CCCCCC">are the the rights checked just after</font>

949
00:40:11,110 --> 00:40:15,640
committing or at the beginning<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

950
00:40:13,870 --> 00:40:19,330
create transacted file

951
00:40:15,640 --> 00:40:23,589
can you spoof also a<font color="#E5E5E5"> process that is</font>

952
00:40:19,330 --> 00:40:25,630
<font color="#E5E5E5">unavailable to you yeah I don't follow</font>

953
00:40:23,590 --> 00:40:31,180
all right<font color="#E5E5E5"> the binary there there was an</font>

954
00:40:25,630 --> 00:40:33,250
<font color="#E5E5E5">example about svchost.exe</font><font color="#CCCCCC"> yes what if</font>

955
00:40:31,180 --> 00:40:35,919
it's a protected process that's

956
00:40:33,250 --> 00:40:38,620
unavailable<font color="#E5E5E5"> to for example</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> don't</font>

957
00:40:35,920 --> 00:40:40,540
<font color="#E5E5E5">have rights to read it as you mean on</font>

958
00:40:38,620 --> 00:40:42,190
the file system level<font color="#E5E5E5"> yeah yeah I don't</font>

959
00:40:40,540 --> 00:40:44,140
<font color="#E5E5E5">have access</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> it so no if I can't open</font>

960
00:40:42,190 --> 00:40:46,060
the file then I can't do<font color="#E5E5E5"> anything to it</font>

961
00:40:44,140 --> 00:40:48,040
<font color="#E5E5E5">yeah but in theory I could just copy the</font>

962
00:40:46,060 --> 00:40:51,900
file somewhere and then and then do it

963
00:40:48,040 --> 00:40:51,900
from there<font color="#CCCCCC"> okay thanks</font>

964
00:41:00,930 --> 00:41:04,970
anyone else has a question

965
00:41:14,630 --> 00:41:22,460
<font color="#CCCCCC">thanks for attack what about</font><font color="#E5E5E5"> code</font>

966
00:41:17,970 --> 00:41:25,770
<font color="#CCCCCC">signing and executive signings are</font><font color="#E5E5E5"> like</font>

967
00:41:22,460 --> 00:41:30,360
certificates for<font color="#E5E5E5"> for executive executive</font>

968
00:41:25,770 --> 00:41:33,330
<font color="#CCCCCC">battles sorry</font><font color="#E5E5E5"> so as we saw in the demo</font>

969
00:41:30,360 --> 00:41:35,360
if you took a look in process<font color="#CCCCCC"> Explorer</font>

970
00:41:33,330 --> 00:41:37,799
for example which tries to verify the

971
00:41:35,360 --> 00:41:39,960
digital signature of the process that's

972
00:41:37,800 --> 00:41:41,880
<font color="#E5E5E5">being executed</font><font color="#CCCCCC"> so it looks legitimate</font>

973
00:41:39,960 --> 00:41:43,230
<font color="#E5E5E5">but if you take a look in memory at</font>

974
00:41:41,880 --> 00:41:46,320
what's<font color="#E5E5E5"> running if</font><font color="#CCCCCC"> you investigate</font><font color="#E5E5E5"> this</font>

975
00:41:43,230 --> 00:41:48,060
at<font color="#CCCCCC"> runtime</font><font color="#E5E5E5"> then</font><font color="#CCCCCC"> then obviously</font><font color="#E5E5E5"> you'll be</font>

976
00:41:46,320 --> 00:41:52,580
able<font color="#E5E5E5"> to tell</font><font color="#CCCCCC"> that something happened</font>

977
00:41:48,060 --> 00:41:52,580
so like the signature<font color="#E5E5E5"> will not match</font>

978
00:41:58,860 --> 00:42:11,310
we still have time if you have any<font color="#CCCCCC"> other</font>

979
00:42:01,500 --> 00:42:15,930
questions<font color="#E5E5E5"> then</font><font color="#CCCCCC"> before your lecture</font><font color="#E5E5E5"> one</font>

980
00:42:11,310 --> 00:42:18,870
<font color="#E5E5E5">question about</font><font color="#CCCCCC"> do the up locker prevent</font>

981
00:42:15,930 --> 00:42:21,149
this<font color="#E5E5E5"> those the app Locker</font><font color="#CCCCCC"> check the</font>

982
00:42:18,870 --> 00:42:25,080
memory contents or<font color="#E5E5E5"> those very violent</font>

983
00:42:21,150 --> 00:42:27,180
<font color="#CCCCCC">discs</font><font color="#E5E5E5"> so that's a good question</font><font color="#CCCCCC"> and I</font>

984
00:42:25,080 --> 00:42:28,560
actually not sure about<font color="#E5E5E5"> that because</font><font color="#CCCCCC"> we</font>

985
00:42:27,180 --> 00:42:31,529
didn't take a look at app Locker and

986
00:42:28,560 --> 00:42:35,450
this and this research<font color="#E5E5E5"> we mostly focused</font>

987
00:42:31,530 --> 00:42:37,830
on<font color="#E5E5E5"> on bypassing security solutions by</font>

988
00:42:35,450 --> 00:42:41,460
seeing that<font color="#E5E5E5"> they don't the in</font><font color="#CCCCCC"> correctly</font>

989
00:42:37,830 --> 00:42:47,360
<font color="#E5E5E5">handled transactions so I don't have the</font>

990
00:42:41,460 --> 00:42:47,360
answer for that next<font color="#E5E5E5"> question</font>

991
00:42:54,450 --> 00:42:57,950
we still have the means

992
00:43:05,349 --> 00:43:12,700
<font color="#CCCCCC">I was wondering</font><font color="#E5E5E5"> have you gotten any</font>

993
00:43:08,190 --> 00:43:16,299
response on this from Microsoft<font color="#CCCCCC"> is it</font>

994
00:43:12,700 --> 00:43:18,460
will it be patched<font color="#E5E5E5"> somehow so we've</font>

995
00:43:16,299 --> 00:43:20,979
actually<font color="#E5E5E5"> disclosed this to Microsoft and</font>

996
00:43:18,460 --> 00:43:23,200
<font color="#E5E5E5">they didn't deem it as a vulnerability</font>

997
00:43:20,979 --> 00:43:25,720
<font color="#E5E5E5">which it's not the operating system is</font>

998
00:43:23,200 --> 00:43:27,549
behaving<font color="#E5E5E5"> as it should</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> only thing the</font>

999
00:43:25,720 --> 00:43:30,669
<font color="#E5E5E5">only thing here</font><font color="#CCCCCC"> maybe that</font><font color="#E5E5E5"> they could</font>

1000
00:43:27,549 --> 00:43:32,200
they<font color="#E5E5E5"> could change is to add in the mini</font>

1001
00:43:30,670 --> 00:43:34,660
filter called back you could you could

1002
00:43:32,200 --> 00:43:36,910
tell the antivirus that<font color="#E5E5E5"> a section is</font>

1003
00:43:34,660 --> 00:43:38,950
being<font color="#E5E5E5"> created for execution</font><font color="#CCCCCC"> even when</font>

1004
00:43:36,910 --> 00:43:40,569
you can kind<font color="#CCCCCC"> of fool it into skipping</font>

1005
00:43:38,950 --> 00:43:42,819
that<font color="#E5E5E5"> but other than</font><font color="#CCCCCC"> that there's not</font>

1006
00:43:40,569 --> 00:43:44,979
much<font color="#CCCCCC"> Microsoft could or should be doing</font>

1007
00:43:42,819 --> 00:43:50,160
<font color="#E5E5E5">it's the anti viruses who should handle</font>

1008
00:43:44,979 --> 00:43:50,160
<font color="#E5E5E5">transaction correctly thank you</font>

1009
00:43:56,690 --> 00:44:02,119
so to that point<font color="#E5E5E5"> about Microsoft not</font>

1010
00:43:59,210 --> 00:44:04,069
considering<font color="#E5E5E5"> this vulnerability are there</font>

1011
00:44:02,119 --> 00:44:05,930
legitimate<font color="#E5E5E5"> cases where you would use</font>

1012
00:44:04,069 --> 00:44:10,430
transactions here for creating

1013
00:44:05,930 --> 00:44:12,710
executables<font color="#E5E5E5"> so that that should really</font>

1014
00:44:10,430 --> 00:44:16,640
<font color="#E5E5E5">it shouldn't happen because as we saw</font>

1015
00:44:12,710 --> 00:44:20,569
the<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Windows process loader the</font>

1016
00:44:16,640 --> 00:44:21,109
official exported<font color="#E5E5E5"> API it only accepts</font>

1017
00:44:20,569 --> 00:44:24,109
file paths

1018
00:44:21,109 --> 00:44:26,119
<font color="#E5E5E5">there's no way to run a file</font><font color="#CCCCCC"> out of a</font>

1019
00:44:24,109 --> 00:44:28,788
<font color="#E5E5E5">transaction it's only using the system</font>

1020
00:44:26,119 --> 00:44:30,950
calls directly<font color="#E5E5E5"> that enables us to create</font>

1021
00:44:28,789 --> 00:44:33,109
<font color="#CCCCCC">a process from from a handle if we take</font>

1022
00:44:30,950 --> 00:44:34,490
the handle to a file we create a<font color="#E5E5E5"> section</font>

1023
00:44:33,109 --> 00:44:35,990
then from the section<font color="#E5E5E5"> we create the</font>

1024
00:44:34,490 --> 00:44:37,430
process<font color="#E5E5E5"> but that is something</font><font color="#CCCCCC"> that the</font>

1025
00:44:35,990 --> 00:44:39,799
Windows loader is in charge<font color="#E5E5E5"> of doing and</font>

1026
00:44:37,430 --> 00:44:41,690
as you saw<font color="#E5E5E5"> in Windows 10 is no longer</font>

1027
00:44:39,799 --> 00:44:44,030
even happens and user mode it<font color="#E5E5E5"> happens in</font>

1028
00:44:41,690 --> 00:44:48,079
kernel<font color="#CCCCCC"> mode it's just that the the old</font>

1029
00:44:44,030 --> 00:44:49,640
system call is still available<font color="#CCCCCC"> ok so</font>

1030
00:44:48,079 --> 00:44:52,190
then the real question<font color="#CCCCCC"> is why do they</font>

1031
00:44:49,640 --> 00:44:54,920
persist that old method flat why does it

1032
00:44:52,190 --> 00:44:57,160
still exist<font color="#CCCCCC"> yeah so it's a bit beyond</font>

1033
00:44:54,920 --> 00:44:59,569
this scope<font color="#E5E5E5"> but the general</font><font color="#CCCCCC"> idea is</font><font color="#E5E5E5"> that</font>

1034
00:44:57,160 --> 00:45:02,899
<font color="#E5E5E5">NT create user process creates a proper</font>

1035
00:44:59,569 --> 00:45:05,630
<font color="#E5E5E5">Windows process while NT create process</font>

1036
00:45:02,900 --> 00:45:08,270
is<font color="#E5E5E5"> just a relatively much thinner</font>

1037
00:45:05,630 --> 00:45:11,059
wrapper around<font color="#E5E5E5"> the function that</font><font color="#CCCCCC"> creates</font>

1038
00:45:08,270 --> 00:45:13,069
the object of a process and so it can<font color="#CCCCCC"> be</font>

1039
00:45:11,059 --> 00:45:14,569
used to<font color="#E5E5E5"> create a minimal process which</font>

1040
00:45:13,069 --> 00:45:16,670
<font color="#E5E5E5">doesn't have a lot</font><font color="#CCCCCC"> of things that</font><font color="#E5E5E5"> a</font>

1041
00:45:14,569 --> 00:45:20,420
<font color="#E5E5E5">normal process does and it can be used</font>

1042
00:45:16,670 --> 00:45:24,079
in<font color="#E5E5E5"> running things like other subsystems</font>

1043
00:45:20,420 --> 00:45:26,029
<font color="#CCCCCC">on</font><font color="#E5E5E5"> Windows such as for example the</font><font color="#CCCCCC"> wsl</font>

1044
00:45:24,079 --> 00:45:27,410
the<font color="#E5E5E5"> Windows system over Linux which can</font>

1045
00:45:26,029 --> 00:45:29,089
be used<font color="#E5E5E5"> to create these types</font><font color="#CCCCCC"> of</font>

1046
00:45:27,410 --> 00:45:39,490
processes which are not normal<font color="#E5E5E5"> Windows</font>

1047
00:45:29,089 --> 00:45:39,490
processes thank you next question

1048
00:45:50,469 --> 00:45:57,489
so this is a<font color="#E5E5E5"> follow-up question of a</font>

1049
00:45:52,989 --> 00:45:59,229
question that<font color="#CCCCCC"> was asked before so they</font>

1050
00:45:57,489 --> 00:46:01,930
<font color="#CCCCCC">asked you for a</font><font color="#E5E5E5"> reaction from Microsoft</font>

1051
00:45:59,229 --> 00:46:05,430
<font color="#CCCCCC">but did you get</font><font color="#E5E5E5"> also</font><font color="#CCCCCC"> some reaction from</font>

1052
00:46:01,930 --> 00:46:08,410
<font color="#E5E5E5">the antivirus software companies yeah so</font>

1053
00:46:05,430 --> 00:46:10,269
antivirus software companies have been

1054
00:46:08,410 --> 00:46:12,368
aware<font color="#CCCCCC"> of this issue</font><font color="#E5E5E5"> it's it's online if</font>

1055
00:46:10,269 --> 00:46:14,410
you look up Antivirus Plus transactions

1056
00:46:12,369 --> 00:46:16,539
you'll see that it's a known<font color="#CCCCCC"> fact that</font>

1057
00:46:14,410 --> 00:46:18,399
they don't<font color="#E5E5E5"> handle transactions correctly</font>

1058
00:46:16,539 --> 00:46:22,539
they're aware<font color="#E5E5E5"> of</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> issue they just</font>

1059
00:46:18,400 --> 00:46:24,009
haven't taken care<font color="#CCCCCC"> of it yet and</font><font color="#E5E5E5"> that's</font>

1060
00:46:22,539 --> 00:46:26,890
what we're trying<font color="#E5E5E5"> to show</font><font color="#CCCCCC"> here is that</font>

1061
00:46:24,009 --> 00:46:29,890
<font color="#E5E5E5">even 11 years after this</font><font color="#CCCCCC"> feature was</font>

1062
00:46:26,890 --> 00:46:32,400
<font color="#E5E5E5">introduced fully documented and and and</font>

1063
00:46:29,890 --> 00:46:34,509
people<font color="#E5E5E5"> have discussed online that that</font>

1064
00:46:32,400 --> 00:46:37,450
<font color="#E5E5E5">anti viruses don't handle</font><font color="#CCCCCC"> the</font>

1065
00:46:34,509 --> 00:46:40,719
<font color="#CCCCCC">transaction</font><font color="#E5E5E5"> as well still 11 years</font><font color="#CCCCCC"> later</font>

1066
00:46:37,450 --> 00:46:43,710
and all<font color="#CCCCCC"> the anti viruses can be</font><font color="#E5E5E5"> bypassed</font>

1067
00:46:40,719 --> 00:46:43,710
<font color="#E5E5E5">using this technique</font>

1068
00:46:57,050 --> 00:47:00,790
that anyone<font color="#CCCCCC"> else has a question</font>

1069
00:47:14,450 --> 00:47:18,879
thanks<font color="#CCCCCC"> for your</font><font color="#E5E5E5"> talk um I was</font><font color="#CCCCCC"> wondering</font>

1070
00:47:16,280 --> 00:47:21,740
<font color="#E5E5E5">if this</font><font color="#CCCCCC"> could be</font><font color="#E5E5E5"> used in a way with</font>

1071
00:47:18,880 --> 00:47:23,300
exact rules which elevate automatically

1072
00:47:21,740 --> 00:47:26,600
which<font color="#CCCCCC"> are signed</font><font color="#E5E5E5"> by Microsoft so say</font><font color="#CCCCCC"> you</font>

1073
00:47:23,300 --> 00:47:27,800
<font color="#E5E5E5">pass the parameter of a processbook</font><font color="#CCCCCC"> for</font>

1074
00:47:26,600 --> 00:47:30,170
example in<font color="#E5E5E5"> your example when you pass a</font>

1075
00:47:27,800 --> 00:47:32,510
parameter for acceptable<font color="#E5E5E5"> that you want</font>

1076
00:47:30,170 --> 00:47:34,280
to elevate<font color="#E5E5E5"> and you said inherits this</font>

1077
00:47:32,510 --> 00:47:36,800
visit the security descriptor<font color="#E5E5E5"> fell</font>

1078
00:47:34,280 --> 00:47:39,200
<font color="#E5E5E5">through the process which you the post</font>

1079
00:47:36,800 --> 00:47:41,180
process<font color="#E5E5E5"> so could that be used for like</font>

1080
00:47:39,200 --> 00:47:43,129
process elevation or yeah<font color="#E5E5E5"> so you're</font>

1081
00:47:41,180 --> 00:47:46,250
talking<font color="#E5E5E5"> about Auto elevating processes</font>

1082
00:47:43,130 --> 00:47:49,820
right yeah that's<font color="#CCCCCC"> a very good</font><font color="#E5E5E5"> question</font>

1083
00:47:46,250 --> 00:47:51,650
<font color="#E5E5E5">and</font><font color="#CCCCCC"> it's something that actually we've</font>

1084
00:47:49,820 --> 00:47:53,840
dealt<font color="#CCCCCC"> with in the</font><font color="#E5E5E5"> past you can see on</font>

1085
00:47:51,650 --> 00:47:57,410
<font color="#CCCCCC">breaking malware on her blog we we</font>

1086
00:47:53,840 --> 00:48:00,140
<font color="#CCCCCC">actually did some USU AC bypasses using</font>

1087
00:47:57,410 --> 00:48:03,290
exactly what we did specifically as we

1088
00:48:00,140 --> 00:48:04,730
used<font color="#CCCCCC"> a Auto elevating process and we</font>

1089
00:48:03,290 --> 00:48:08,120
<font color="#CCCCCC">changed the</font><font color="#E5E5E5"> environment for it so it</font>

1090
00:48:04,730 --> 00:48:10,070
loads our<font color="#CCCCCC"> DLL but so this could actually</font>

1091
00:48:08,120 --> 00:48:12,049
be potentially used for this but it's we

1092
00:48:10,070 --> 00:48:14,870
haven't gotten around to to testing that

1093
00:48:12,050 --> 00:48:16,990
yet but<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> on our to-do list our thank</font>

1094
00:48:14,870 --> 00:48:16,990
you

1095
00:48:32,330 --> 00:48:40,069
if you still have a<font color="#E5E5E5"> question</font><font color="#CCCCCC"> we still</font>

1096
00:48:34,640 --> 00:48:42,580
have time yes yeah you still<font color="#E5E5E5"> have time</font>

1097
00:48:40,070 --> 00:48:42,580
<font color="#E5E5E5">guys yet</font>

1098
00:48:48,370 --> 00:48:52,089
[Applause]

