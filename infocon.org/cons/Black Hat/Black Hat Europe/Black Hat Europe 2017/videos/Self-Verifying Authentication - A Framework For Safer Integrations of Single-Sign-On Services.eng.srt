1
00:00:00,030 --> 00:00:06,899
hello everyone my name is<font color="#CCCCCC"> shorten</font><font color="#E5E5E5"> I'm a</font>

2
00:00:03,259 --> 00:00:09,000
researcher of Microsoft Research<font color="#E5E5E5"> this is</font>

3
00:00:06,899 --> 00:00:12,030
a joint work<font color="#CCCCCC"> with</font><font color="#E5E5E5"> my colleague shares</font>

4
00:00:09,000 --> 00:00:16,230
<font color="#CCCCCC">CATIA</font><font color="#E5E5E5"> of Microsoft Matt McCutcheon of</font>

5
00:00:12,030 --> 00:00:18,840
MIT<font color="#CCCCCC"> falcão and Ravi Eyre of University</font>

6
00:00:16,230 --> 00:00:22,470
of<font color="#E5E5E5"> Illinois so today I'm going to</font>

7
00:00:18,840 --> 00:00:25,009
introduce<font color="#CCCCCC"> a framework for safer</font>

8
00:00:22,470 --> 00:00:27,930
integrations of single sign-on services

9
00:00:25,010 --> 00:00:32,099
so<font color="#E5E5E5"> I think most</font><font color="#CCCCCC"> people have</font><font color="#E5E5E5"> the</font>

10
00:00:27,930 --> 00:00:40,680
<font color="#CCCCCC">experience of single</font><font color="#E5E5E5"> sign-on or SSO for</font>

11
00:00:32,098 --> 00:00:45,839
example if you go to<font color="#E5E5E5"> airbnb.com when you</font>

12
00:00:40,680 --> 00:00:49,440
click<font color="#E5E5E5"> sign-in log in it allows you to</font>

13
00:00:45,840 --> 00:00:58,289
<font color="#CCCCCC">use your</font><font color="#E5E5E5"> Facebook or Google identity so</font>

14
00:00:49,440 --> 00:01:02,339
with just<font color="#CCCCCC"> one click now now I'm signed</font>

15
00:00:58,289 --> 00:01:06,090
<font color="#E5E5E5">in to Airbnb right this is very</font>

16
00:01:02,340 --> 00:01:09,570
convenient<font color="#E5E5E5"> for for users it's also very</font>

17
00:01:06,090 --> 00:01:13,400
convenient for website administrators

18
00:01:09,570 --> 00:01:20,539
who do not need to manage user identity

19
00:01:13,400 --> 00:01:20,540
which which<font color="#E5E5E5"> would be a big headache</font><font color="#CCCCCC"> so</font>

20
00:01:23,360 --> 00:01:30,299
so single sign-on SSO is really the

21
00:01:27,930 --> 00:01:42,990
front door lock for tens of<font color="#E5E5E5"> millions of</font>

22
00:01:30,299 --> 00:01:46,439
website<font color="#E5E5E5"> many companies many companies</font>

23
00:01:42,990 --> 00:01:50,429
provide<font color="#E5E5E5"> identity services so here I show</font>

24
00:01:46,439 --> 00:01:54,059
<font color="#CCCCCC">you</font><font color="#E5E5E5"> 30 companies providing such services</font>

25
00:01:50,430 --> 00:01:58,979
but there are more companies<font color="#E5E5E5"> and these</font>

26
00:01:54,060 --> 00:02:03,420
companies<font color="#E5E5E5"> provide SDKs for different web</font>

27
00:01:58,979 --> 00:02:06,320
languages like asp.net PHP node.js<font color="#E5E5E5"> many</font>

28
00:02:03,420 --> 00:02:08,940
other languages<font color="#E5E5E5"> and they also provide</font>

29
00:02:06,320 --> 00:02:11,459
<font color="#E5E5E5">step-by-step instructions to teach</font>

30
00:02:08,940 --> 00:02:13,090
developers how to integrate such

31
00:02:11,459 --> 00:02:16,269
services and SD

32
00:02:13,090 --> 00:02:20,190
<font color="#E5E5E5">to their websites</font><font color="#CCCCCC"> so as a website</font>

33
00:02:16,269 --> 00:02:22,930
<font color="#E5E5E5">developer you are expected</font><font color="#CCCCCC"> to know</font>

34
00:02:20,190 --> 00:02:29,739
something about the<font color="#E5E5E5"> underlying protocol</font>

35
00:02:22,930 --> 00:02:32,890
<font color="#E5E5E5">like like this is the open IT</font><font color="#CCCCCC"> connector</font>

36
00:02:29,739 --> 00:02:37,780
protocol which<font color="#CCCCCC"> is pretty</font><font color="#E5E5E5"> complicated</font><font color="#CCCCCC"> as</font>

37
00:02:32,890 --> 00:02:41,349
you can see here and also you are

38
00:02:37,780 --> 00:02:45,459
expected to<font color="#CCCCCC"> know if you if you use a</font>

39
00:02:41,349 --> 00:02:52,899
specific SDK<font color="#E5E5E5"> you are supposed to know</font>

40
00:02:45,459 --> 00:02:56,019
<font color="#E5E5E5">the how to how to</font><font color="#CCCCCC"> use this specific SDK</font>

41
00:02:52,900 --> 00:03:00,450
for<font color="#E5E5E5"> example right now</font><font color="#CCCCCC"> you are seeing</font>

42
00:02:56,019 --> 00:03:03,940
this Microsoft<font color="#E5E5E5"> Azure Active Directory</font>

43
00:03:00,450 --> 00:03:06,339
<font color="#E5E5E5">SDK for nodejs</font><font color="#CCCCCC"> so you are expected to</font>

44
00:03:03,940 --> 00:03:09,129
follow a step<font color="#E5E5E5"> one two three four or</font><font color="#CCCCCC"> five</font>

45
00:03:06,340 --> 00:03:15,450
you need to understand these<font color="#CCCCCC"> things</font>

46
00:03:09,129 --> 00:03:53,190
and and<font color="#E5E5E5"> then put this into your website</font>

47
00:03:15,450 --> 00:03:56,858
<font color="#E5E5E5">however most website programmers are not</font>

48
00:03:53,190 --> 00:04:03,010
experienced locksmiths<font color="#CCCCCC"> so imagine that</font>

49
00:03:56,859 --> 00:04:05,560
you are you<font color="#E5E5E5"> are asked</font><font color="#CCCCCC"> to put a</font><font color="#E5E5E5"> lock</font><font color="#CCCCCC"> on</font>

50
00:04:03,010 --> 00:04:08,138
your front door<font color="#E5E5E5"> so you buy this product</font>

51
00:04:05,560 --> 00:04:11,470
<font color="#E5E5E5">from a hardware store</font><font color="#CCCCCC"> and then you</font><font color="#E5E5E5"> read</font>

52
00:04:08,139 --> 00:04:14,739
<font color="#CCCCCC">the installation</font><font color="#E5E5E5"> guide</font><font color="#CCCCCC"> then you drill</font>

53
00:04:11,470 --> 00:04:17,829
holes<font color="#E5E5E5"> you</font><font color="#CCCCCC"> put some</font><font color="#E5E5E5"> a lock cylinder</font>

54
00:04:14,739 --> 00:04:21,219
someplace<font color="#E5E5E5"> and not everybody can do this</font>

55
00:04:17,829 --> 00:04:25,510
right<font color="#CCCCCC"> so similarly if you expect</font><font color="#E5E5E5"> an</font>

56
00:04:21,219 --> 00:04:27,110
average<font color="#E5E5E5"> website developer to integrate</font>

57
00:04:25,510 --> 00:04:29,819
single<font color="#E5E5E5"> sign-on so</font>

58
00:04:27,110 --> 00:04:33,590
the question is whether they are<font color="#CCCCCC"> able to</font>

59
00:04:29,819 --> 00:04:37,400
do this security<font color="#E5E5E5"> and it turned out that</font>

60
00:04:33,590 --> 00:04:39,719
there<font color="#CCCCCC"> are many</font><font color="#E5E5E5"> studies showing that</font>

61
00:04:37,400 --> 00:04:44,929
security critical logic bugs<font color="#E5E5E5"> are</font>

62
00:04:39,719 --> 00:04:47,909
pervasive<font color="#E5E5E5"> on websites so these studies</font>

63
00:04:44,930 --> 00:04:51,330
have been published<font color="#E5E5E5"> in leading academic</font>

64
00:04:47,909 --> 00:04:54,479
security conferences as well<font color="#CCCCCC"> as in</font><font color="#E5E5E5"> black</font>

65
00:04:51,330 --> 00:04:58,109
<font color="#E5E5E5">hat conferences so last year</font><font color="#CCCCCC"> in black</font>

66
00:04:54,479 --> 00:05:02,150
hat<font color="#E5E5E5"> USA and black hat Europe there were</font>

67
00:04:58,110 --> 00:05:05,400
talks about SSO integration problems and

68
00:05:02,150 --> 00:05:08,400
because<font color="#CCCCCC"> of these problems an attacker</font>

69
00:05:05,400 --> 00:05:11,878
can sign<font color="#E5E5E5"> into</font><font color="#CCCCCC"> a victim's account</font><font color="#E5E5E5"> or an</font>

70
00:05:08,400 --> 00:05:13,679
attacker can stealthily<font color="#CCCCCC"> cause the the</font>

71
00:05:11,879 --> 00:05:16,199
victims to sign<font color="#CCCCCC"> into the attackers</font>

72
00:05:13,680 --> 00:05:19,650
account<font color="#E5E5E5"> which is commonly known</font><font color="#CCCCCC"> as</font>

73
00:05:16,199 --> 00:05:23,580
<font color="#CCCCCC">locking request a forgery</font><font color="#E5E5E5"> and there was</font>

74
00:05:19,650 --> 00:05:27,568
a report from<font color="#CCCCCC"> the cloud security</font>

75
00:05:23,580 --> 00:05:31,080
<font color="#CCCCCC">alliance which ranked API integration</font>

76
00:05:27,569 --> 00:05:35,250
bugs<font color="#E5E5E5"> as the number</font><font color="#CCCCCC"> for cloud security</font>

77
00:05:31,080 --> 00:05:39,719
<font color="#E5E5E5">top threat and SSO logical bugs are</font><font color="#CCCCCC"> the</font>

78
00:05:35,250 --> 00:05:44,159
primary example<font color="#CCCCCC"> of that bug category so</font>

79
00:05:39,719 --> 00:05:48,199
next I'm going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> show you a few video</font>

80
00:05:44,159 --> 00:05:52,339
<font color="#E5E5E5">demos so the the first demo is about</font>

81
00:05:48,199 --> 00:05:57,810
Microsoft Azure Active Directory<font color="#E5E5E5"> library</font>

82
00:05:52,339 --> 00:06:01,710
that we just saw a<font color="#E5E5E5"> few minutes</font><font color="#CCCCCC"> ago</font><font color="#E5E5E5"> so</font>

83
00:05:57,810 --> 00:06:04,510
this part<font color="#E5E5E5"> allows the attacker to log</font>

84
00:06:01,710 --> 00:06:07,620
<font color="#E5E5E5">into the</font><font color="#CCCCCC"> victims</font><font color="#E5E5E5"> account</font>

85
00:06:04,510 --> 00:06:07,620
[Music]

86
00:06:12,310 --> 00:06:19,669
it's demo<font color="#CCCCCC"> I'm going to show you a fun</font>

87
00:06:16,039 --> 00:06:25,880
ability that we discovered<font color="#CCCCCC"> in the nodejs</font>

88
00:06:19,669 --> 00:06:29,568
package of<font color="#E5E5E5"> Azure Active Directory</font><font color="#CCCCCC"> the</font>

89
00:06:25,880 --> 00:06:35,180
problem has<font color="#CCCCCC"> been fixed</font><font color="#E5E5E5"> what happened was</font>

90
00:06:29,569 --> 00:06:38,680
that<font color="#CCCCCC"> if a developer simply follows an</font>

91
00:06:35,180 --> 00:06:42,979
earlier version of this developer guide

92
00:06:38,680 --> 00:06:47,060
<font color="#CCCCCC">he will end up happy</font><font color="#E5E5E5"> a website like</font><font color="#CCCCCC"> this</font>

93
00:06:42,979 --> 00:06:54,258
and please<font color="#E5E5E5"> ignore the certificate error</font>

94
00:06:47,060 --> 00:06:59,720
which<font color="#CCCCCC"> is unrelated</font><font color="#E5E5E5"> to this problem so</font><font color="#CCCCCC"> in</font>

95
00:06:54,259 --> 00:07:06,380
this simple website you can see a link

96
00:06:59,720 --> 00:07:08,599
if the user clicks on this link then he

97
00:07:06,380 --> 00:07:11,930
can<font color="#CCCCCC"> log in and</font><font color="#E5E5E5"> this is the account</font>

98
00:07:08,599 --> 00:07:16,699
information<font color="#E5E5E5"> and in particular this is</font>

99
00:07:11,930 --> 00:07:20,479
<font color="#E5E5E5">the preferred username so it is my</font>

100
00:07:16,699 --> 00:07:22,270
identity<font color="#CCCCCC"> shortened</font><font color="#E5E5E5"> at microsoft.com so</font>

101
00:07:20,479 --> 00:07:27,169
this looks<font color="#E5E5E5"> good</font>

102
00:07:22,270 --> 00:07:29,979
however the<font color="#E5E5E5"> problem is actually an</font>

103
00:07:27,169 --> 00:07:33,909
attacker can<font color="#E5E5E5"> log into your</font><font color="#CCCCCC"> account</font><font color="#E5E5E5"> and</font>

104
00:07:29,979 --> 00:07:37,060
an attacker actually<font color="#E5E5E5"> can completely fake</font>

105
00:07:33,909 --> 00:07:39,919
<font color="#E5E5E5">the identity</font><font color="#CCCCCC"> information for example</font>

106
00:07:37,060 --> 00:07:46,539
<font color="#CCCCCC">suppose</font><font color="#E5E5E5"> I want to login</font><font color="#CCCCCC"> to the</font><font color="#E5E5E5"> website</font>

107
00:07:39,919 --> 00:07:56,448
<font color="#E5E5E5">as Bill Gates so I can fill in this form</font>

108
00:07:46,539 --> 00:08:01,789
name is Bill Gates<font color="#E5E5E5"> and the email</font><font color="#CCCCCC"> is Bill</font>

109
00:07:56,449 --> 00:08:08,270
G at<font color="#E5E5E5"> soft attack on for example</font><font color="#CCCCCC"> um and I</font>

110
00:08:01,789 --> 00:08:12,020
can also copy whatever I want then I<font color="#CCCCCC"> can</font>

111
00:08:08,270 --> 00:08:15,680
directly post<font color="#E5E5E5"> this set of identity to</font>

112
00:08:12,020 --> 00:08:19,389
the website and<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> see that the</font>

113
00:08:15,680 --> 00:08:24,669
website<font color="#E5E5E5"> consider this is my name and</font>

114
00:08:19,389 --> 00:08:28,090
even even this preferred

115
00:08:24,669 --> 00:08:32,679
user<font color="#E5E5E5"> name can be faked arbitrarily the</font>

116
00:08:28,090 --> 00:08:36,610
problem because of<font color="#CCCCCC"> this spot</font><font color="#E5E5E5"> anybody can</font>

117
00:08:32,679 --> 00:08:39,429
get into<font color="#E5E5E5"> the victims account because</font>

118
00:08:36,610 --> 00:08:42,959
there is an important security check

119
00:08:39,429 --> 00:08:45,819
missing<font color="#E5E5E5"> in the SDKs developer guide and</font>

120
00:08:42,958 --> 00:08:49,029
the second demo I'm going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> show is</font>

121
00:08:45,820 --> 00:08:53,620
locking request a forgery on<font color="#E5E5E5"> skype</font>

122
00:08:49,029 --> 00:08:56,649
online it it<font color="#CCCCCC"> cause</font><font color="#E5E5E5"> a victim</font><font color="#CCCCCC"> to now I'm</font>

123
00:08:53,620 --> 00:09:02,880
going to love you<font color="#CCCCCC"> attack a lot in</font>

124
00:08:56,649 --> 00:09:06,459
forgery problem now suppose this is a

125
00:09:02,880 --> 00:09:10,209
victim<font color="#CCCCCC"> machine and the victim receive an</font>

126
00:09:06,459 --> 00:09:13,689
email now I'm going to show<font color="#E5E5E5"> you that at</font>

127
00:09:10,209 --> 00:09:21,699
this point<font color="#E5E5E5"> the victim</font><font color="#CCCCCC"> has not logged</font>

128
00:09:13,690 --> 00:09:26,160
<font color="#E5E5E5">into the account but if he if the victim</font>

129
00:09:21,699 --> 00:09:26,160
<font color="#CCCCCC">just click on this link</font>

130
00:09:34,880 --> 00:09:42,870
so you can see that the victim has

131
00:09:39,540 --> 00:09:47,959
locked into<font color="#E5E5E5"> this fake account that I</font>

132
00:09:42,870 --> 00:09:55,700
created<font color="#E5E5E5"> a moment ago and in fact this</font>

133
00:09:47,960 --> 00:10:06,600
you can really communicate<font color="#E5E5E5"> from from the</font>

134
00:09:55,700 --> 00:10:13,290
attacker machine<font color="#E5E5E5"> so this is demo</font><font color="#CCCCCC"> okay</font>

135
00:10:06,600 --> 00:10:19,310
then what I'm showing you is<font color="#E5E5E5"> now you you</font>

136
00:10:13,290 --> 00:10:30,569
<font color="#E5E5E5">really get into this</font><font color="#CCCCCC"> fully</font><font color="#E5E5E5"> functional</font>

137
00:10:19,310 --> 00:10:32,849
fake account hello yeah so it's this

138
00:10:30,570 --> 00:10:37,080
<font color="#E5E5E5">kind of</font><font color="#CCCCCC"> request a forgery</font>

139
00:10:32,850 --> 00:10:40,050
problem is<font color="#E5E5E5"> actually pretty</font><font color="#CCCCCC"> common when</font>

140
00:10:37,080 --> 00:10:42,080
website<font color="#CCCCCC"> implement single sign-on</font>

141
00:10:40,050 --> 00:10:45,240
protocol

142
00:10:42,080 --> 00:10:48,330
<font color="#E5E5E5">these are just two problems</font><font color="#CCCCCC"> that we</font>

143
00:10:45,240 --> 00:10:51,870
discovered in<font color="#CCCCCC"> the past</font><font color="#E5E5E5"> a few years we</font>

144
00:10:48,330 --> 00:10:54,960
have reported<font color="#E5E5E5"> many</font><font color="#CCCCCC"> SSO issues to various</font>

145
00:10:51,870 --> 00:10:57,510
<font color="#E5E5E5">companies and relying party websites so</font>

146
00:10:54,960 --> 00:11:02,430
I want to<font color="#CCCCCC"> say that</font><font color="#E5E5E5"> even big companies</font>

147
00:10:57,510 --> 00:11:05,490
make this kind of mistakes<font color="#CCCCCC"> so now let</font>

148
00:11:02,430 --> 00:11:07,829
let's go a little<font color="#E5E5E5"> deeper</font><font color="#CCCCCC"> to understand</font>

149
00:11:05,490 --> 00:11:11,430
what are<font color="#E5E5E5"> the tricky things when you</font>

150
00:11:07,830 --> 00:11:16,650
really adopt a<font color="#E5E5E5"> single sign-on</font><font color="#CCCCCC"> so here I</font>

151
00:11:11,430 --> 00:11:19,920
give you an<font color="#E5E5E5"> example which is a bug</font><font color="#CCCCCC"> due</font>

152
00:11:16,650 --> 00:11:24,530
<font color="#CCCCCC">to insufficient logic checks</font><font color="#E5E5E5"> using</font>

153
00:11:19,920 --> 00:11:28,770
<font color="#E5E5E5">Google ID and this was back in 2012 when</font>

154
00:11:24,530 --> 00:11:32,189
<font color="#CCCCCC">Google</font><font color="#E5E5E5"> ID was based on the open ID 2.0</font>

155
00:11:28,770 --> 00:11:35,579
protocol the protocol is<font color="#E5E5E5"> fairly</font>

156
00:11:32,190 --> 00:11:38,940
complicated<font color="#E5E5E5"> but I'm going to explain a</font>

157
00:11:35,580 --> 00:11:44,060
highly simplified version of the

158
00:11:38,940 --> 00:11:45,780
protocol<font color="#E5E5E5"> so in this simplified</font>

159
00:11:44,060 --> 00:11:48,479
explanation

160
00:11:45,780 --> 00:11:52,010
I have only<font color="#CCCCCC"> two browser redirections</font><font color="#E5E5E5"> so</font>

161
00:11:48,480 --> 00:11:55,950
<font color="#E5E5E5">a browser redirection is essentially a</font>

162
00:11:52,010 --> 00:11:59,310
message sent from<font color="#E5E5E5"> a</font><font color="#CCCCCC"> website</font><font color="#E5E5E5"> to the</font>

163
00:11:55,950 --> 00:12:01,860
client<font color="#CCCCCC"> and if the client is honest a</font>

164
00:11:59,310 --> 00:12:04,050
browser<font color="#CCCCCC"> the client should forward the</font>

165
00:12:01,860 --> 00:12:07,140
message<font color="#E5E5E5"> to the destination website that</font>

166
00:12:04,050 --> 00:12:11,300
is called a browser<font color="#CCCCCC"> we direction</font><font color="#E5E5E5"> so in</font>

167
00:12:07,140 --> 00:12:15,180
me direction one<font color="#E5E5E5"> there is a field realm</font>

168
00:12:11,300 --> 00:12:19,740
<font color="#E5E5E5">equals the relying parties identity and</font>

169
00:12:15,180 --> 00:12:22,620
then required equals email first<font color="#E5E5E5"> name</font>

170
00:12:19,740 --> 00:12:26,460
and last name<font color="#CCCCCC"> so essentially the relying</font>

171
00:12:22,620 --> 00:12:28,590
party is telling<font color="#E5E5E5"> Google ID that please</font>

172
00:12:26,460 --> 00:12:32,490
give me the<font color="#E5E5E5"> email first name and last</font>

173
00:12:28,590 --> 00:12:35,850
name of the user<font color="#E5E5E5"> okay so when when this</font>

174
00:12:32,490 --> 00:12:39,900
redirection<font color="#E5E5E5"> is received then the Google</font>

175
00:12:35,850 --> 00:12:43,050
service generate essentially<font color="#E5E5E5"> a sealed</font>

176
00:12:39,900 --> 00:12:45,630
envelope and<font color="#CCCCCC"> inside the envelope you see</font>

177
00:12:43,050 --> 00:12:49,500
<font color="#CCCCCC">email</font><font color="#E5E5E5"> first name and last name and it</font>

178
00:12:45,630 --> 00:12:52,470
also<font color="#E5E5E5"> indicates</font><font color="#CCCCCC"> that these three fields</font>

179
00:12:49,500 --> 00:12:57,060
<font color="#E5E5E5">are protected by the signature and there</font>

180
00:12:52,470 --> 00:12:59,400
is a signature<font color="#E5E5E5"> as the CEO</font><font color="#CCCCCC"> now whether we</font>

181
00:12:57,060 --> 00:13:01,619
directly<font color="#CCCCCC"> on</font><font color="#E5E5E5"> to comes back to the relying</font>

182
00:12:59,400 --> 00:13:04,319
party<font color="#E5E5E5"> the relying party will validate</font>

183
00:13:01,620 --> 00:13:07,320
the signature and then authenticated the

184
00:13:04,320 --> 00:13:10,710
user has<font color="#E5E5E5"> and is at</font><font color="#CCCCCC"> a dot-com</font><font color="#E5E5E5"> okay so</font>

185
00:13:07,320 --> 00:13:15,270
this<font color="#CCCCCC"> seem to be straightforward</font><font color="#E5E5E5"> however</font>

186
00:13:10,710 --> 00:13:18,720
<font color="#CCCCCC">when we consider in the real</font><font color="#E5E5E5"> scenario it</font>

187
00:13:15,270 --> 00:13:22,650
is<font color="#CCCCCC"> a little bit complicated because now</font>

188
00:13:18,720 --> 00:13:25,740
let's assume pop is an attacker now what

189
00:13:22,650 --> 00:13:30,140
<font color="#CCCCCC">Bob can do is to remove email from</font>

190
00:13:25,740 --> 00:13:33,600
<font color="#E5E5E5">redirection</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> so in this situation</font><font color="#CCCCCC"> our</font>

191
00:13:30,140 --> 00:13:36,900
from Google's standpoint<font color="#E5E5E5"> it looks as</font><font color="#CCCCCC"> if</font>

192
00:13:33,600 --> 00:13:40,880
the relying party was<font color="#E5E5E5"> only interested in</font>

193
00:13:36,900 --> 00:13:45,510
<font color="#E5E5E5">first name and last name okay so so</font>

194
00:13:40,880 --> 00:13:47,640
Google<font color="#E5E5E5"> will respond with this</font><font color="#CCCCCC"> CEO the</font>

195
00:13:45,510 --> 00:13:51,360
envelope<font color="#E5E5E5"> which only contains first name</font>

196
00:13:47,640 --> 00:13:54,420
and last name<font color="#E5E5E5"> but now Bob just attach</font>

197
00:13:51,360 --> 00:13:57,780
<font color="#E5E5E5">another field</font><font color="#CCCCCC"> called email equals Alice</font>

198
00:13:54,420 --> 00:13:59,069
at<font color="#CCCCCC"> a calm so think of this as a sealed</font>

199
00:13:57,780 --> 00:14:01,199
envelope

200
00:13:59,070 --> 00:14:04,470
and on top of that<font color="#E5E5E5"> is a yellow sticker</font>

201
00:14:01,200 --> 00:14:07,560
which says Alice at<font color="#CCCCCC"> accom</font><font color="#E5E5E5"> now the</font>

202
00:14:04,470 --> 00:14:12,270
problem is a lot<font color="#CCCCCC"> of relying party</font>

203
00:14:07,560 --> 00:14:15,089
websites<font color="#E5E5E5"> simply use an SDK certified by</font>

204
00:14:12,270 --> 00:14:17,850
Google and in that<font color="#E5E5E5"> SDK there was a</font>

205
00:14:15,090 --> 00:14:23,280
method literally called validate message

206
00:14:17,850 --> 00:14:25,920
and what the method does is to check<font color="#CCCCCC"> the</font>

207
00:14:23,280 --> 00:14:29,459
signature<font color="#E5E5E5"> but in this case the signature</font>

208
00:14:25,920 --> 00:14:31,439
is<font color="#CCCCCC"> okay because Bob didn't attempt to</font>

209
00:14:29,460 --> 00:14:35,700
<font color="#E5E5E5">temper with the signature right</font>

210
00:14:31,440 --> 00:14:38,370
so once the<font color="#CCCCCC"> SDK returns</font><font color="#E5E5E5"> okay then a lot</font>

211
00:14:35,700 --> 00:14:40,860
<font color="#E5E5E5">of</font><font color="#CCCCCC"> websites are just happy Lee</font>

212
00:14:38,370 --> 00:14:48,330
<font color="#CCCCCC">Authenticator</font><font color="#E5E5E5"> the user has</font><font color="#CCCCCC"> an estate car</font>

213
00:14:40,860 --> 00:14:52,950
<font color="#E5E5E5">which</font><font color="#CCCCCC"> is incorrect</font><font color="#E5E5E5"> now here is a another</font>

214
00:14:48,330 --> 00:14:57,120
example<font color="#CCCCCC"> it is the</font><font color="#E5E5E5"> it is due to an</font>

215
00:14:52,950 --> 00:15:03,440
unintended usage of all<font color="#E5E5E5"> us 2.0 access</font>

216
00:14:57,120 --> 00:15:06,030
token several years<font color="#E5E5E5"> ago the life ID</font>

217
00:15:03,440 --> 00:15:11,610
developer guide showed people how to

218
00:15:06,030 --> 00:15:15,959
integrate how to recognize<font color="#E5E5E5"> a user in a</font>

219
00:15:11,610 --> 00:15:19,470
mobile<font color="#E5E5E5"> app so for example we we develop</font>

220
00:15:15,960 --> 00:15:22,950
a mobile<font color="#CCCCCC"> app</font><font color="#E5E5E5"> called foo app and suppose</font>

221
00:15:19,470 --> 00:15:25,950
Alice<font color="#E5E5E5"> is running through app this is how</font>

222
00:15:22,950 --> 00:15:33,300
foo app can recognize the user Alice

223
00:15:25,950 --> 00:15:37,440
first<font color="#E5E5E5"> the app cause a</font><font color="#CCCCCC"> life</font><font color="#E5E5E5"> ID API login</font>

224
00:15:33,300 --> 00:15:40,500
with the basic scope<font color="#E5E5E5"> essentially this</font><font color="#CCCCCC"> is</font>

225
00:15:37,440 --> 00:15:43,320
to tell the service<font color="#E5E5E5"> that I'm going to</font>

226
00:15:40,500 --> 00:15:46,220
<font color="#E5E5E5">access this</font><font color="#CCCCCC"> users basic information</font>

227
00:15:43,320 --> 00:15:49,710
publicly information then of course the

228
00:15:46,220 --> 00:15:52,830
the life IT<font color="#E5E5E5"> service need to issue an</font>

229
00:15:49,710 --> 00:15:55,500
access token to<font color="#CCCCCC"> the to the application</font>

230
00:15:52,830 --> 00:15:59,280
and then with this token<font color="#E5E5E5"> the application</font>

231
00:15:55,500 --> 00:16:04,410
can call a REST API<font color="#CCCCCC"> me in order to</font><font color="#E5E5E5"> get</font>

232
00:15:59,280 --> 00:16:06,390
the users<font color="#CCCCCC"> information then foo app is</font>

233
00:16:04,410 --> 00:16:08,310
<font color="#E5E5E5">able to recognize</font><font color="#CCCCCC"> in the user a status</font>

234
00:16:06,390 --> 00:16:10,860
<font color="#E5E5E5">right this is also pretty</font>

235
00:16:08,310 --> 00:16:13,250
straightforward<font color="#CCCCCC"> and there is no</font><font color="#E5E5E5"> problem</font>

236
00:16:10,860 --> 00:16:17,660
in this protocol

237
00:16:13,250 --> 00:16:21,079
however many mobile apps have their

238
00:16:17,660 --> 00:16:23,600
<font color="#CCCCCC">back-end services</font><font color="#E5E5E5"> so for example let's</font>

239
00:16:21,079 --> 00:16:28,069
consider<font color="#CCCCCC"> foo app</font><font color="#E5E5E5"> as a back-end service</font>

240
00:16:23,600 --> 00:16:30,889
<font color="#E5E5E5">phu</font><font color="#CCCCCC"> kham now in order to authenticate</font>

241
00:16:28,070 --> 00:16:36,380
<font color="#CCCCCC">the client into the back-end service</font><font color="#E5E5E5"> a</font>

242
00:16:30,889 --> 00:16:38,839
lot<font color="#E5E5E5"> of developers simply pass the token</font>

243
00:16:36,380 --> 00:16:44,269
<font color="#E5E5E5">from the client to the to the backhander</font>

244
00:16:38,839 --> 00:16:46,579
server and and then essentially the

245
00:16:44,269 --> 00:16:49,670
first<font color="#E5E5E5"> two steps happens on the client</font>

246
00:16:46,579 --> 00:16:52,069
<font color="#CCCCCC">side</font><font color="#E5E5E5"> and then pass the token then step</font>

247
00:16:49,670 --> 00:16:55,130
<font color="#CCCCCC">three</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> four happens</font><font color="#E5E5E5"> in the the</font>

248
00:16:52,070 --> 00:16:59,410
backend side<font color="#E5E5E5"> and this turned out to</font><font color="#CCCCCC"> be a</font>

249
00:16:55,130 --> 00:17:03,439
serious<font color="#E5E5E5"> problem</font><font color="#CCCCCC"> it allows any app on</font>

250
00:16:59,410 --> 00:17:08,240
Alice device or any relying party that

251
00:17:03,440 --> 00:17:11,870
<font color="#CCCCCC">Alice has ever visited to sign into food</font>

252
00:17:08,240 --> 00:17:17,270
<font color="#CCCCCC">comm</font><font color="#E5E5E5"> as Alice essentially if if phu kham</font>

253
00:17:11,869 --> 00:17:21,020
is a bank then even some arbitrary apps

254
00:17:17,270 --> 00:17:24,790
like Angry Birds<font color="#E5E5E5"> or Pokemon go is able</font>

255
00:17:21,020 --> 00:17:27,530
to<font color="#E5E5E5"> get into the bank account right so I</font>

256
00:17:24,790 --> 00:17:30,559
this is due<font color="#CCCCCC"> to a confusion about</font>

257
00:17:27,530 --> 00:17:34,280
authentication and authorization<font color="#E5E5E5"> now let</font>

258
00:17:30,559 --> 00:17:37,490
me use<font color="#E5E5E5"> this analogy to explain</font><font color="#CCCCCC"> the root</font>

259
00:17:34,280 --> 00:17:42,379
<font color="#E5E5E5">cause of the confusion so imagine that</font>

260
00:17:37,490 --> 00:17:44,960
we we have an ID office and the<font color="#E5E5E5"> the</font>

261
00:17:42,380 --> 00:17:47,120
president authorizes everybody to see

262
00:17:44,960 --> 00:17:50,450
his public photo which is<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> because</font>

263
00:17:47,120 --> 00:17:53,780
it's just a public photo now there is a

264
00:17:50,450 --> 00:17:56,120
yellow<font color="#E5E5E5"> face here who says I want to see</font>

265
00:17:53,780 --> 00:17:58,940
the photo then of course the ID office

266
00:17:56,120 --> 00:18:03,189
has to issue<font color="#E5E5E5"> the token because everybody</font>

267
00:17:58,940 --> 00:18:06,470
<font color="#E5E5E5">should be able to see the photo once the</font>

268
00:18:03,190 --> 00:18:08,510
access token<font color="#E5E5E5"> is obtained now this yellow</font>

269
00:18:06,470 --> 00:18:11,650
<font color="#E5E5E5">face just</font><font color="#CCCCCC"> passed the</font><font color="#E5E5E5"> token to the</font>

270
00:18:08,510 --> 00:18:14,870
relying party then<font color="#CCCCCC"> the relying party</font>

271
00:18:11,650 --> 00:18:18,169
presented the token<font color="#E5E5E5"> back</font><font color="#CCCCCC"> to the ID</font>

272
00:18:14,870 --> 00:18:21,379
office then of course the relying party

273
00:18:18,169 --> 00:18:23,630
will get to the public<font color="#E5E5E5"> photo so if you</font>

274
00:18:21,380 --> 00:18:26,330
<font color="#E5E5E5">think</font><font color="#CCCCCC"> about this whole</font><font color="#E5E5E5"> scenario as</font>

275
00:18:23,630 --> 00:18:29,299
authorization<font color="#E5E5E5"> there's really no problem</font>

276
00:18:26,330 --> 00:18:32,090
because everybody having the token<font color="#E5E5E5"> to to</font>

277
00:18:29,299 --> 00:18:34,970
see the photo<font color="#E5E5E5"> right now the real</font><font color="#CCCCCC"> problem</font>

278
00:18:32,090 --> 00:18:38,600
is if the relying party concludes that

279
00:18:34,970 --> 00:18:41,740
<font color="#CCCCCC">oh that's</font><font color="#E5E5E5"> why the yellow</font><font color="#CCCCCC"> face was</font><font color="#E5E5E5"> the</font>

280
00:18:38,600 --> 00:18:44,360
<font color="#E5E5E5">president then he is making a</font>

281
00:18:41,740 --> 00:18:48,200
authentication conclusion which does not

282
00:18:44,360 --> 00:18:54,010
have any logical base<font color="#E5E5E5"> so it's pretty</font>

283
00:18:48,200 --> 00:18:56,990
tricky<font color="#E5E5E5"> so so let me show you</font><font color="#CCCCCC"> a</font>

284
00:18:54,010 --> 00:19:00,860
<font color="#E5E5E5">vulnerable application because</font><font color="#CCCCCC"> of this</font>

285
00:18:56,990 --> 00:19:04,580
confusion<font color="#CCCCCC"> so this application</font><font color="#E5E5E5"> is called</font>

286
00:19:00,860 --> 00:19:08,629
<font color="#E5E5E5">saluto it has a mobile app and a</font>

287
00:19:04,580 --> 00:19:13,090
back-end<font color="#E5E5E5"> saluto comm what we are seeing</font>

288
00:19:08,630 --> 00:19:18,110
<font color="#E5E5E5">right now is</font><font color="#CCCCCC"> the victim machine</font><font color="#E5E5E5"> then</font>

289
00:19:13,090 --> 00:19:20,658
this victim<font color="#CCCCCC"> Alice just run any any</font>

290
00:19:18,110 --> 00:19:25,729
application and turn out to be or

291
00:19:20,659 --> 00:19:30,039
malicious<font color="#E5E5E5"> a malicious</font><font color="#CCCCCC"> application oh</font><font color="#E5E5E5"> let</font>

292
00:19:25,730 --> 00:19:33,950
<font color="#E5E5E5">me let</font><font color="#CCCCCC"> me go</font><font color="#E5E5E5"> back</font><font color="#CCCCCC"> a little bit so once</font>

293
00:19:30,039 --> 00:19:36,710
she runs the malicious application the

294
00:19:33,950 --> 00:19:39,380
application is of is able to get<font color="#CCCCCC"> the</font>

295
00:19:36,710 --> 00:19:41,720
<font color="#CCCCCC">access token that</font><font color="#E5E5E5"> there is no problem</font>

296
00:19:39,380 --> 00:19:42,230
<font color="#E5E5E5">because everybody can get the access</font>

297
00:19:41,720 --> 00:19:45,139
<font color="#CCCCCC">token</font>

298
00:19:42,230 --> 00:19:48,649
now this token<font color="#E5E5E5"> is send it to the</font>

299
00:19:45,139 --> 00:19:54,740
attacker machine which is<font color="#E5E5E5"> to this</font>

300
00:19:48,649 --> 00:19:58,039
<font color="#E5E5E5">machine now when when when the attacker</font>

301
00:19:54,740 --> 00:20:00,380
get the access token<font color="#CCCCCC"> it can directly</font>

302
00:19:58,039 --> 00:20:03,049
<font color="#E5E5E5">poster the access token</font><font color="#CCCCCC"> to the</font>

303
00:20:00,380 --> 00:20:08,870
authentication<font color="#E5E5E5"> endpoint of saluto calm</font>

304
00:20:03,049 --> 00:20:14,210
and as a result you see<font color="#CCCCCC"> that this</font>

305
00:20:08,870 --> 00:20:16,699
attacker<font color="#E5E5E5"> can sign in as Alice although</font>

306
00:20:14,210 --> 00:20:20,539
the only<font color="#E5E5E5"> thing the attacker is able to</font>

307
00:20:16,700 --> 00:20:28,730
obtain<font color="#CCCCCC"> is almost public access token</font>

308
00:20:20,539 --> 00:20:32,120
<font color="#CCCCCC">which everybody can get now</font><font color="#E5E5E5"> I just</font>

309
00:20:28,730 --> 00:20:34,580
<font color="#CCCCCC">explain I just show are a few demos and</font>

310
00:20:32,120 --> 00:20:37,879
explain some of<font color="#E5E5E5"> the problems that people</font>

311
00:20:34,580 --> 00:20:40,350
<font color="#E5E5E5">can get wrong and in the rest part of</font>

312
00:20:37,880 --> 00:20:44,950
<font color="#E5E5E5">the</font><font color="#CCCCCC"> talk I'm going</font><font color="#E5E5E5"> to</font>

313
00:20:40,350 --> 00:20:47,919
<font color="#E5E5E5">introduce our solution</font><font color="#CCCCCC"> to the problem</font><font color="#E5E5E5"> it</font>

314
00:20:44,950 --> 00:20:50,410
is based on a technology<font color="#E5E5E5"> a program</font>

315
00:20:47,920 --> 00:20:56,380
<font color="#CCCCCC">verification technology</font><font color="#E5E5E5"> called self</font>

316
00:20:50,410 --> 00:20:59,410
verifying execution or<font color="#CCCCCC"> SVX no I think</font>

317
00:20:56,380 --> 00:21:04,420
<font color="#CCCCCC">perhaps some of you</font><font color="#E5E5E5"> have heard of the</font>

318
00:20:59,410 --> 00:21:06,610
term program<font color="#CCCCCC"> verification but many</font>

319
00:21:04,420 --> 00:21:09,010
people<font color="#CCCCCC"> may think</font><font color="#E5E5E5"> that program</font>

320
00:21:06,610 --> 00:21:12,070
verification is something very automatic

321
00:21:09,010 --> 00:21:13,870
<font color="#E5E5E5">is like a black box if you have the</font>

322
00:21:12,070 --> 00:21:17,409
source code<font color="#CCCCCC"> of the program</font><font color="#E5E5E5"> you want</font><font color="#CCCCCC"> to</font>

323
00:21:13,870 --> 00:21:20,889
check as well as a safety property<font color="#E5E5E5"> and</font>

324
00:21:17,410 --> 00:21:22,870
that you can<font color="#E5E5E5"> just let this robot to find</font>

325
00:21:20,890 --> 00:21:24,880
a box for<font color="#E5E5E5"> you that that would be</font>

326
00:21:22,870 --> 00:21:26,860
wonderful right it's just have the

327
00:21:24,880 --> 00:21:29,460
source code<font color="#E5E5E5"> and all the bugs will</font><font color="#CCCCCC"> be</font>

328
00:21:26,860 --> 00:21:32,290
found<font color="#E5E5E5"> that would be good but in reality</font>

329
00:21:29,460 --> 00:21:35,260
program verification<font color="#E5E5E5"> is a very</font>

330
00:21:32,290 --> 00:21:39,550
challenging<font color="#E5E5E5"> task</font><font color="#CCCCCC"> for a number of reasons</font>

331
00:21:35,260 --> 00:21:43,270
the<font color="#CCCCCC"> first</font><font color="#E5E5E5"> reason is that the source code</font>

332
00:21:39,550 --> 00:21:46,990
<font color="#E5E5E5">alone is not enough</font><font color="#CCCCCC"> you need to model</font>

333
00:21:43,270 --> 00:21:49,860
the runtime platform like the the

334
00:21:46,990 --> 00:21:53,740
<font color="#CCCCCC">webserver behavior the operating system</font>

335
00:21:49,860 --> 00:21:58,570
<font color="#E5E5E5">these kind of details</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> that is very</font>

336
00:21:53,740 --> 00:22:00,700
<font color="#CCCCCC">difficult to be precise and second you</font>

337
00:21:58,570 --> 00:22:05,560
<font color="#CCCCCC">also need to</font><font color="#E5E5E5"> model the hypothetical</font>

338
00:22:00,700 --> 00:22:09,490
attacker which is able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> are do all</font>

339
00:22:05,560 --> 00:22:11,679
kinds of<font color="#E5E5E5"> things</font><font color="#CCCCCC"> then essentially</font><font color="#E5E5E5"> you</font>

340
00:22:09,490 --> 00:22:16,900
need to know everything<font color="#E5E5E5"> that the</font>

341
00:22:11,680 --> 00:22:19,600
attacker is able<font color="#E5E5E5"> to do that it is</font><font color="#CCCCCC"> very</font>

342
00:22:16,900 --> 00:22:23,140
<font color="#CCCCCC">difficult</font><font color="#E5E5E5"> to be exhaustive in the</font>

343
00:22:19,600 --> 00:22:25,139
modeling now even after<font color="#CCCCCC"> the modeling the</font>

344
00:22:23,140 --> 00:22:27,400
theorem is<font color="#E5E5E5"> also very difficult</font>

345
00:22:25,140 --> 00:22:32,740
<font color="#CCCCCC">essentially what you are going</font><font color="#E5E5E5"> to prove</font>

346
00:22:27,400 --> 00:22:36,040
is that<font color="#CCCCCC"> if the attacker is</font><font color="#E5E5E5"> able at</font><font color="#CCCCCC"> Acker</font>

347
00:22:32,740 --> 00:22:39,130
<font color="#CCCCCC">a is able to call program P for</font>

348
00:22:36,040 --> 00:22:43,120
infinitely<font color="#E5E5E5"> many times</font><font color="#CCCCCC"> so there is a</font>

349
00:22:39,130 --> 00:22:47,470
infinite loop<font color="#E5E5E5"> in your theorem and every</font>

350
00:22:43,120 --> 00:22:51,610
time there<font color="#CCCCCC"> are multiple public ap</font><font color="#E5E5E5"> is</font>

351
00:22:47,470 --> 00:22:53,920
<font color="#E5E5E5">then can this safety property fee be</font>

352
00:22:51,610 --> 00:22:57,659
violated so this kind of

353
00:22:53,920 --> 00:23:00,790
<font color="#E5E5E5">proof because of the exponential and and</font>

354
00:22:57,660 --> 00:23:03,580
<font color="#E5E5E5">infinite possibilities of executions you</font>

355
00:23:00,790 --> 00:23:06,940
need<font color="#CCCCCC"> to induct inductive</font><font color="#E5E5E5"> proof which</font>

356
00:23:03,580 --> 00:23:08,889
means you expect that<font color="#E5E5E5"> the developer to</font>

357
00:23:06,940 --> 00:23:12,640
come<font color="#E5E5E5"> up with something called a loop</font>

358
00:23:08,890 --> 00:23:16,230
invariant<font color="#E5E5E5"> and some good lemmas in order</font>

359
00:23:12,640 --> 00:23:22,780
<font color="#E5E5E5">for the proof to go through so this is</font>

360
00:23:16,230 --> 00:23:28,360
very difficult<font color="#CCCCCC"> to automate the the the</font>

361
00:23:22,780 --> 00:23:31,300
purpose of<font color="#CCCCCC"> SVX</font><font color="#E5E5E5"> is to lower these hurdles</font>

362
00:23:28,360 --> 00:23:35,979
<font color="#E5E5E5">so that program verification can be used</font>

363
00:23:31,300 --> 00:23:41,070
to check the<font color="#E5E5E5"> real programs at least in</font>

364
00:23:35,980 --> 00:23:44,020
<font color="#CCCCCC">weber protocol the basic idea is that</font>

365
00:23:41,070 --> 00:23:46,830
<font color="#E5E5E5">every</font><font color="#CCCCCC"> extra execution is responsible for</font>

366
00:23:44,020 --> 00:23:49,150
<font color="#CCCCCC">collecting its own executed code and</font>

367
00:23:46,830 --> 00:23:53,189
proving that<font color="#CCCCCC"> it satisfied</font>

368
00:23:49,150 --> 00:23:55,750
thus the safety property fee so in<font color="#CCCCCC"> svx</font>

369
00:23:53,190 --> 00:23:58,600
there is no need<font color="#E5E5E5"> to model the attacker</font>

370
00:23:55,750 --> 00:24:01,690
because every execution<font color="#E5E5E5"> is driven by a</font>

371
00:23:58,600 --> 00:24:04,629
real user<font color="#E5E5E5"> there is no need to model the</font>

372
00:24:01,690 --> 00:24:08,380
runtime platform because every execution

373
00:24:04,630 --> 00:24:10,570
happens<font color="#E5E5E5"> at the actual runtime and also</font>

374
00:24:08,380 --> 00:24:13,930
very importantly there<font color="#CCCCCC"> is</font><font color="#E5E5E5"> no need for</font>

375
00:24:10,570 --> 00:24:16,810
<font color="#E5E5E5">inductive proof because it only proves</font>

376
00:24:13,930 --> 00:24:20,110
<font color="#CCCCCC">that this execution satisfies the</font>

377
00:24:16,810 --> 00:24:22,570
property as opposed<font color="#CCCCCC"> to a much</font><font color="#E5E5E5"> more</font>

378
00:24:20,110 --> 00:24:24,879
difficult theorem which is<font color="#E5E5E5"> all possible</font>

379
00:24:22,570 --> 00:24:28,060
executions<font color="#CCCCCC"> satisfies the property</font><font color="#E5E5E5"> now I</font>

380
00:24:24,880 --> 00:24:32,560
know<font color="#E5E5E5"> that this sounds very abstracted to</font>

381
00:24:28,060 --> 00:24:35,409
you let me give<font color="#E5E5E5"> you a simple toy example</font>

382
00:24:32,560 --> 00:24:38,679
imagine<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we are building this system</font>

383
00:24:35,410 --> 00:24:43,060
which consists<font color="#E5E5E5"> of</font><font color="#CCCCCC"> Alex calm Barbara calm</font>

384
00:24:38,680 --> 00:24:47,170
and Charlie calm each has<font color="#E5E5E5"> an integer ten</font>

385
00:24:43,060 --> 00:24:51,610
forty and five and each has a public

386
00:24:47,170 --> 00:24:54,760
<font color="#E5E5E5">method method grab is to simply return</font>

387
00:24:51,610 --> 00:24:58,570
at its value method<font color="#E5E5E5"> compare is to</font>

388
00:24:54,760 --> 00:25:00,910
compare Bob's value with the value<font color="#E5E5E5"> in</font>

389
00:24:58,570 --> 00:25:06,100
the incoming message and then<font color="#CCCCCC"> return a</font>

390
00:25:00,910 --> 00:25:08,590
greater one method

391
00:25:06,100 --> 00:25:11,129
<font color="#CCCCCC">is to compare charlie's value with the</font>

392
00:25:08,590 --> 00:25:15,730
value<font color="#CCCCCC"> in the incoming message and then</font>

393
00:25:11,130 --> 00:25:20,169
<font color="#E5E5E5">people pick a greater one in m2 and then</font>

394
00:25:15,730 --> 00:25:24,160
call conclude m2 now as always<font color="#E5E5E5"> we assume</font>

395
00:25:20,169 --> 00:25:26,289
the client to be completely untrusted

396
00:25:24,160 --> 00:25:30,750
which can arbitrarily<font color="#E5E5E5"> invoke this</font>

397
00:25:26,289 --> 00:25:34,809
message<font color="#E5E5E5"> now our safety property</font><font color="#CCCCCC"> is that</font>

398
00:25:30,750 --> 00:25:37,380
whenever conclude m2 is reached m2 must

399
00:25:34,809 --> 00:25:40,809
represent<font color="#E5E5E5"> the website holding the</font>

400
00:25:37,380 --> 00:25:44,080
greatest integer<font color="#E5E5E5"> so essentially what we</font>

401
00:25:40,809 --> 00:25:47,139
are<font color="#E5E5E5"> trying to</font><font color="#CCCCCC"> do here is to choose the</font>

402
00:25:44,080 --> 00:25:49,449
<font color="#E5E5E5">greatest integer constant among the</font>

403
00:25:47,140 --> 00:25:53,350
three website that that's the system<font color="#CCCCCC"> we</font>

404
00:25:49,450 --> 00:25:56,500
are<font color="#E5E5E5"> building now perhaps you expected</font>

405
00:25:53,350 --> 00:25:59,168
this kind of execution<font color="#E5E5E5"> the first the</font>

406
00:25:56,500 --> 00:26:03,960
client will call crap<font color="#E5E5E5"> to get and it's</font>

407
00:25:59,169 --> 00:26:07,210
infamy up to get<font color="#CCCCCC"> Ally's value and then</font>

408
00:26:03,960 --> 00:26:09,520
call compare to compare<font color="#E5E5E5"> at its value is</font>

409
00:26:07,210 --> 00:26:13,450
<font color="#CCCCCC">Bob's value and that eventually</font><font color="#E5E5E5"> call</font>

410
00:26:09,520 --> 00:26:16,750
finish<font color="#E5E5E5"> to get the greatest integer of</font>

411
00:26:13,450 --> 00:26:20,650
the three and in<font color="#E5E5E5"> this case if this is</font>

412
00:26:16,750 --> 00:26:21,580
<font color="#CCCCCC">the execution</font><font color="#E5E5E5"> indeed we get 40 pop which</font>

413
00:26:20,650 --> 00:26:25,179
is<font color="#E5E5E5"> correct</font>

414
00:26:21,580 --> 00:26:28,539
<font color="#E5E5E5">because 40 is the greatest integer here</font>

415
00:26:25,179 --> 00:26:33,280
so this<font color="#E5E5E5"> is correct but the system is</font>

416
00:26:28,539 --> 00:26:39,190
actually<font color="#CCCCCC"> vulnerable because</font><font color="#E5E5E5"> yet the</font>

417
00:26:33,280 --> 00:26:41,799
client in<font color="#CCCCCC"> corporate and</font><font color="#E5E5E5"> directly call</font>

418
00:26:39,190 --> 00:26:44,169
finish in this case the result will be

419
00:26:41,799 --> 00:26:47,320
<font color="#CCCCCC">10 Alice</font><font color="#E5E5E5"> which is incorrect</font>

420
00:26:44,169 --> 00:26:50,559
<font color="#E5E5E5">so traditionally if you</font><font color="#CCCCCC"> do program</font>

421
00:26:47,320 --> 00:26:54,539
verification<font color="#E5E5E5"> you need to model the the</font>

422
00:26:50,559 --> 00:26:58,299
<font color="#CCCCCC">website behavior as well as the</font><font color="#E5E5E5"> all</font>

423
00:26:54,539 --> 00:27:00,879
possible executions<font color="#E5E5E5"> of the client and</font>

424
00:26:58,299 --> 00:27:03,070
then you you need to<font color="#E5E5E5"> do the inductive</font>

425
00:27:00,880 --> 00:27:06,970
proof if you do<font color="#E5E5E5"> everything correctly</font>

426
00:27:03,070 --> 00:27:10,539
then at some point<font color="#E5E5E5"> you will be stuck</font>

427
00:27:06,970 --> 00:27:13,179
because<font color="#E5E5E5"> ah the the theorem is invalid</font>

428
00:27:10,539 --> 00:27:16,120
once<font color="#E5E5E5"> you stuck somewhere</font><font color="#CCCCCC"> you figure</font><font color="#E5E5E5"> out</font>

429
00:27:13,179 --> 00:27:19,960
that<font color="#CCCCCC"> oh there is a</font><font color="#E5E5E5"> possibility of a</font>

430
00:27:16,120 --> 00:27:22,959
violation<font color="#E5E5E5"> and this is the attack and</font>

431
00:27:19,960 --> 00:27:27,190
as I said this in reality<font color="#E5E5E5"> this is very</font>

432
00:27:22,960 --> 00:27:34,330
complicated<font color="#E5E5E5"> and as we</font><font color="#CCCCCC"> acts is quite</font>

433
00:27:27,190 --> 00:27:38,350
different<font color="#CCCCCC"> it is it is simpler or its</font>

434
00:27:34,330 --> 00:27:41,529
need is a message field called<font color="#CCCCCC"> seem T or</font>

435
00:27:38,350 --> 00:27:45,668
symbolic transaction on every message<font color="#CCCCCC"> so</font>

436
00:27:41,529 --> 00:27:50,139
again let's see the<font color="#CCCCCC"> expected execution</font>

437
00:27:45,669 --> 00:27:53,529
<font color="#E5E5E5">this the same execution but notice that</font>

438
00:27:50,139 --> 00:27:56,379
<font color="#E5E5E5">in every message we have this additional</font>

439
00:27:53,529 --> 00:28:00,659
field<font color="#E5E5E5"> initially this additional field is</font>

440
00:27:56,379 --> 00:28:04,740
sinh T is empty<font color="#E5E5E5"> and after grab is called</font>

441
00:28:00,659 --> 00:28:09,720
the<font color="#E5E5E5"> sim T becomes</font><font color="#CCCCCC"> Alice calm</font><font color="#E5E5E5"> Colin Colin</font>

442
00:28:04,740 --> 00:28:14,940
<font color="#CCCCCC">pound</font><font color="#E5E5E5"> grab and this execution continues</font>

443
00:28:09,720 --> 00:28:18,759
<font color="#E5E5E5">until in in the end this is</font><font color="#CCCCCC"> the result</font><font color="#E5E5E5"> a</font>

444
00:28:14,940 --> 00:28:22,690
40 pop and this final<font color="#CCCCCC"> seam team the</font>

445
00:28:18,759 --> 00:28:26,409
<font color="#E5E5E5">final</font><font color="#CCCCCC"> seam t</font><font color="#E5E5E5"> are indicate how we get</font><font color="#CCCCCC"> to</font>

446
00:28:22,690 --> 00:28:31,419
the<font color="#E5E5E5"> the result 40 pop it is through grab</font>

447
00:28:26,409 --> 00:28:33,840
<font color="#E5E5E5">compare and</font><font color="#CCCCCC"> finish now punk</font><font color="#E5E5E5"> rap</font><font color="#CCCCCC"> punk</font>

448
00:28:31,419 --> 00:28:36,789
<font color="#E5E5E5">compare and the</font><font color="#CCCCCC"> punk finish are a</font>

449
00:28:33,840 --> 00:28:39,490
compact representation of the executed

450
00:28:36,789 --> 00:28:41,139
code of this method<font color="#E5E5E5"> so I'm not giving</font>

451
00:28:39,490 --> 00:28:44,230
<font color="#CCCCCC">you</font><font color="#E5E5E5"> the detail of their representation</font>

452
00:28:41,139 --> 00:28:48,850
<font color="#E5E5E5">but let's say let's</font><font color="#CCCCCC"> assume that</font><font color="#E5E5E5"> there is</font>

453
00:28:44,230 --> 00:28:52,779
<font color="#CCCCCC">a way to represent the executed road</font><font color="#E5E5E5"> now</font>

454
00:28:48,850 --> 00:28:57,939
at this point<font color="#E5E5E5"> whether this execution is</font>

455
00:28:52,779 --> 00:29:01,600
secure it's easy to check the<font color="#CCCCCC"> Charlie</font>

456
00:28:57,940 --> 00:29:04,779
<font color="#CCCCCC">Charlie's conclude method simply</font><font color="#E5E5E5"> cause a</font>

457
00:29:01,600 --> 00:29:09,759
program verifier to prove that the final

458
00:29:04,779 --> 00:29:14,769
<font color="#E5E5E5">sim</font><font color="#CCCCCC"> t implies the property that that</font><font color="#E5E5E5"> we</font>

459
00:29:09,759 --> 00:29:17,860
want<font color="#E5E5E5"> to ensure so for example in the</font>

460
00:29:14,769 --> 00:29:21,039
normal execution<font color="#CCCCCC"> if the code goes</font>

461
00:29:17,860 --> 00:29:24,519
through grab compare and finish then

462
00:29:21,039 --> 00:29:27,999
indeed this sequence of logic is

463
00:29:24,519 --> 00:29:30,609
sufficient to imply the<font color="#CCCCCC"> safety property</font>

464
00:29:27,999 --> 00:29:34,000
so the<font color="#CCCCCC"> execution is accepted</font><font color="#E5E5E5"> on the</font>

465
00:29:30,609 --> 00:29:36,790
<font color="#CCCCCC">other hand if the</font><font color="#E5E5E5"> the code sequence</font>

466
00:29:34,000 --> 00:29:40,540
only<font color="#CCCCCC"> consist of grabbed and directly</font>

467
00:29:36,790 --> 00:29:43,930
<font color="#E5E5E5">finish then the corresponding logic is</font>

468
00:29:40,540 --> 00:29:48,460
insufficient to prove this<font color="#CCCCCC"> zero then the</font>

469
00:29:43,930 --> 00:29:51,820
<font color="#CCCCCC">execution is rejected</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> note</font><font color="#E5E5E5"> that in</font>

470
00:29:48,460 --> 00:29:54,370
<font color="#CCCCCC">SVX</font><font color="#E5E5E5"> the program verification is symbolic</font>

471
00:29:51,820 --> 00:30:00,220
<font color="#E5E5E5">which is only a part of the code but no</font>

472
00:29:54,370 --> 00:30:04,389
<font color="#E5E5E5">concrete data so that that means you can</font>

473
00:30:00,220 --> 00:30:08,470
think of as<font color="#CCCCCC"> SV acts as a middle</font><font color="#E5E5E5"> ground</font>

474
00:30:04,390 --> 00:30:11,080
<font color="#E5E5E5">between the traditional offline</font><font color="#CCCCCC"> symbolic</font>

475
00:30:08,470 --> 00:30:13,120
verification<font color="#CCCCCC"> versus the runtime concrete</font>

476
00:30:11,080 --> 00:30:16,899
<font color="#CCCCCC">checking because SVX</font>

477
00:30:13,120 --> 00:30:19,300
is doing symbolic verification<font color="#E5E5E5"> but at</font>

478
00:30:16,900 --> 00:30:24,970
the actual runtime<font color="#E5E5E5"> the concrete at</font>

479
00:30:19,300 --> 00:30:27,930
runtime<font color="#CCCCCC"> and an advantage of svx is that</font>

480
00:30:24,970 --> 00:30:31,540
the performance overhead<font color="#E5E5E5"> is near zero</font>

481
00:30:27,930 --> 00:30:34,090
because all the theorems are symbolic

482
00:30:31,540 --> 00:30:38,139
and that they are<font color="#CCCCCC"> cashable so that means</font>

483
00:30:34,090 --> 00:30:40,209
all normal executions should simply hit

484
00:30:38,140 --> 00:30:42,340
the cache and<font color="#CCCCCC"> return immediately</font>

485
00:30:40,210 --> 00:30:45,460
<font color="#E5E5E5">there is no noticeable performance</font>

486
00:30:42,340 --> 00:30:48,790
<font color="#CCCCCC">overhead so let</font><font color="#E5E5E5"> me give a little</font><font color="#CCCCCC"> bit</font>

487
00:30:45,460 --> 00:30:52,720
detail<font color="#E5E5E5"> about this point so we want</font>

488
00:30:48,790 --> 00:30:57,520
Charlie to prove this theorem<font color="#CCCCCC"> seam T</font>

489
00:30:52,720 --> 00:31:01,900
implies the property now that<font color="#E5E5E5"> Charlie</font>

490
00:30:57,520 --> 00:31:04,600
has a theorem cache<font color="#E5E5E5"> if the theorem has</font>

491
00:31:01,900 --> 00:31:06,820
been proven<font color="#E5E5E5"> before then the result is</font>

492
00:31:04,600 --> 00:31:10,120
<font color="#E5E5E5">litter</font><font color="#CCCCCC"> is returned immediately</font>

493
00:31:06,820 --> 00:31:13,000
there is no performance<font color="#E5E5E5"> overhead however</font>

494
00:31:10,120 --> 00:31:17,229
if the theorem has not been proven<font color="#E5E5E5"> then</font>

495
00:31:13,000 --> 00:31:20,110
it is given<font color="#E5E5E5"> to a verification server on</font>

496
00:31:17,230 --> 00:31:21,970
the cloud which<font color="#CCCCCC"> we refer to recover the</font>

497
00:31:20,110 --> 00:31:24,699
code of the axioms method and

498
00:31:21,970 --> 00:31:27,760
synthesizes a<font color="#CCCCCC"> straight line program</font>

499
00:31:24,700 --> 00:31:30,070
using the<font color="#CCCCCC"> seam T the synthesized program</font>

500
00:31:27,760 --> 00:31:34,510
is given to a program verifier which

501
00:31:30,070 --> 00:31:37,980
will either validate<font color="#E5E5E5"> or find a counter</font>

502
00:31:34,510 --> 00:31:40,990
example of the of the execution<font color="#E5E5E5"> and then</font>

503
00:31:37,980 --> 00:31:44,380
the verification result is written back

504
00:31:40,990 --> 00:31:47,230
to<font color="#E5E5E5"> the theorem cache so if you take this</font>

505
00:31:44,380 --> 00:31:50,490
<font color="#CCCCCC">pass it will</font>

506
00:31:47,230 --> 00:31:53,680
it<font color="#E5E5E5"> would take like 30 to 50 seconds</font>

507
00:31:50,490 --> 00:31:57,220
which<font color="#E5E5E5"> is very expensive but because</font><font color="#CCCCCC"> of</font>

508
00:31:53,680 --> 00:32:00,190
<font color="#CCCCCC">their because of the theorem cache</font><font color="#E5E5E5"> all</font>

509
00:31:57,220 --> 00:32:02,850
normal executions should just hit the

510
00:32:00,190 --> 00:32:06,910
cache and return<font color="#E5E5E5"> immediately</font><font color="#CCCCCC"> unless</font>

511
00:32:02,850 --> 00:32:10,270
<font color="#E5E5E5">there is a collaborative who figures out</font>

512
00:32:06,910 --> 00:32:12,910
an execution sequence<font color="#E5E5E5"> which nobody has</font>

513
00:32:10,270 --> 00:32:19,180
has seen<font color="#CCCCCC"> before then it would trigger</font>

514
00:32:12,910 --> 00:32:21,010
the long pass<font color="#E5E5E5"> now I just explained the</font>

515
00:32:19,180 --> 00:32:24,160
basic idea<font color="#E5E5E5"> of</font><font color="#CCCCCC"> SVX</font>

516
00:32:21,010 --> 00:32:26,500
with toy<font color="#CCCCCC"> example which had</font><font color="#E5E5E5"> nothing to do</font>

517
00:32:24,160 --> 00:32:29,830
<font color="#CCCCCC">with</font><font color="#E5E5E5"> our motivation single sign-on</font>

518
00:32:26,500 --> 00:32:32,650
protocol now<font color="#E5E5E5"> next I'm going to talk</font>

519
00:32:29,830 --> 00:32:37,740
<font color="#CCCCCC">about our</font><font color="#E5E5E5"> open source project as the US</font>

520
00:32:32,650 --> 00:32:45,240
which<font color="#CCCCCC"> is safer SSO integration solutions</font>

521
00:32:37,740 --> 00:32:49,000
based on<font color="#CCCCCC"> SPX asbos</font><font color="#E5E5E5"> is essentially an</font>

522
00:32:45,240 --> 00:32:54,790
<font color="#E5E5E5">object-oriented framework with</font><font color="#CCCCCC"> svx built</font>

523
00:32:49,000 --> 00:32:57,100
<font color="#E5E5E5">in so it has four levels at the top</font>

524
00:32:54,790 --> 00:33:02,290
level which is the<font color="#E5E5E5"> protocol independent</font>

525
00:32:57,100 --> 00:33:06,010
<font color="#E5E5E5">level we defined very basic classes like</font>

526
00:33:02,290 --> 00:33:09,700
identity provider<font color="#E5E5E5"> relying party as well</font>

527
00:33:06,010 --> 00:33:13,720
<font color="#E5E5E5">as the two safety properties</font><font color="#CCCCCC"> logging</font>

528
00:33:09,700 --> 00:33:16,870
safety and<font color="#CCCCCC"> login intent which correspond</font>

529
00:33:13,720 --> 00:33:21,880
which correspond to the<font color="#E5E5E5"> two video demos</font>

530
00:33:16,870 --> 00:33:25,570
that<font color="#E5E5E5"> I showed in</font><font color="#CCCCCC"> the beginning login</font>

531
00:33:21,880 --> 00:33:28,480
safety prevent an attacker to<font color="#CCCCCC"> login to</font>

532
00:33:25,570 --> 00:33:31,750
<font color="#E5E5E5">the</font><font color="#CCCCCC"> victims account and</font><font color="#E5E5E5"> locking intended</font>

533
00:33:28,480 --> 00:33:33,790
prevent the victim to accidentally<font color="#CCCCCC"> login</font>

534
00:33:31,750 --> 00:33:37,990
<font color="#CCCCCC">to the attackers account so we define</font>

535
00:33:33,790 --> 00:33:42,180
the post properties now then based on

536
00:33:37,990 --> 00:33:46,000
the protocol independent<font color="#E5E5E5"> level we derive</font>

537
00:33:42,180 --> 00:33:50,290
classes for the protocol<font color="#CCCCCC"> level we have</font>

538
00:33:46,000 --> 00:33:54,340
<font color="#E5E5E5">OS 2.0 open ID 2.0 and open ID connect</font>

539
00:33:50,290 --> 00:33:58,379
then further we<font color="#E5E5E5"> derive SDK level classes</font>

540
00:33:54,340 --> 00:34:00,070
<font color="#E5E5E5">covering these identity providers and</font>

541
00:33:58,380 --> 00:34:04,150
potentially

542
00:34:00,070 --> 00:34:05,620
website can further derive classes to to

543
00:34:04,150 --> 00:34:10,120
<font color="#E5E5E5">build their specific authentication</font>

544
00:34:05,620 --> 00:34:14,799
logic<font color="#E5E5E5"> so the the advantage of the</font>

545
00:34:10,120 --> 00:34:18,040
framework is that every concrete

546
00:34:14,800 --> 00:34:20,770
implementation at<font color="#CCCCCC"> the at the most</font>

547
00:34:18,040 --> 00:34:23,590
concrete level<font color="#E5E5E5"> is guaranteed to satisfy</font>

548
00:34:20,770 --> 00:34:26,259
the property that<font color="#E5E5E5"> we defined at the top</font>

549
00:34:23,590 --> 00:34:29,440
level so this turned<font color="#E5E5E5"> out</font><font color="#CCCCCC"> to be a</font>

550
00:34:26,260 --> 00:34:32,380
significant capability<font color="#CCCCCC"> because several</font>

551
00:34:29,440 --> 00:34:38,920
<font color="#E5E5E5">decades ago the</font><font color="#CCCCCC"> oil community wanted it</font>

552
00:34:32,380 --> 00:34:42,790
to achieve<font color="#E5E5E5"> a similar goal so perhaps</font>

553
00:34:38,920 --> 00:34:44,409
<font color="#E5E5E5">some</font><font color="#CCCCCC"> of you are</font><font color="#E5E5E5"> know about this notion</font>

554
00:34:42,790 --> 00:34:50,050
called<font color="#E5E5E5"> a list called substitution</font>

555
00:34:44,409 --> 00:34:53,139
<font color="#E5E5E5">principle</font><font color="#CCCCCC"> or SP the the principle tried</font>

556
00:34:50,050 --> 00:34:55,270
to<font color="#E5E5E5"> ensure that if</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> property is true for</font>

557
00:34:53,139 --> 00:34:59,400
the base class then it<font color="#CCCCCC"> hold for or</font>

558
00:34:55,270 --> 00:35:04,300
derived classes so if that was true<font color="#CCCCCC"> ah</font>

559
00:34:59,400 --> 00:35:07,270
<font color="#E5E5E5">it for in reality</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> that would be</font><font color="#CCCCCC"> a</font>

560
00:35:04,300 --> 00:35:09,190
beautiful<font color="#E5E5E5"> thing you just define the</font>

561
00:35:07,270 --> 00:35:11,770
property and then<font color="#CCCCCC"> you derive all the</font>

562
00:35:09,190 --> 00:35:15,330
classes or the classes conform to the

563
00:35:11,770 --> 00:35:22,660
property<font color="#E5E5E5"> that would be</font><font color="#CCCCCC"> beautiful but</font>

564
00:35:15,330 --> 00:35:25,990
people soon realize that<font color="#E5E5E5"> even some very</font>

565
00:35:22,660 --> 00:35:29,140
realistic scenarios<font color="#E5E5E5"> have to violate RSP</font>

566
00:35:25,990 --> 00:35:33,100
<font color="#E5E5E5">so this is the most canonical counter</font>

567
00:35:29,140 --> 00:35:37,029
example of<font color="#E5E5E5"> RSP so suppose there is a a</font>

568
00:35:33,100 --> 00:35:40,600
base class called rectangle<font color="#E5E5E5"> it has width</font>

569
00:35:37,030 --> 00:35:43,990
and<font color="#E5E5E5"> height and also it has getters and</font>

570
00:35:40,600 --> 00:35:48,009
setters for width and<font color="#CCCCCC"> height</font><font color="#E5E5E5"> so for this</font>

571
00:35:43,990 --> 00:35:51,580
base class<font color="#E5E5E5"> you can prove a property</font>

572
00:35:48,010 --> 00:35:54,640
which is essentially<font color="#CCCCCC"> that the width</font><font color="#E5E5E5"> is</font>

573
00:35:51,580 --> 00:35:56,940
independent of the height and this<font color="#E5E5E5"> is</font>

574
00:35:54,640 --> 00:36:02,470
true for<font color="#CCCCCC"> the base class rectangle</font>

575
00:35:56,940 --> 00:36:05,740
<font color="#CCCCCC">however several years later</font><font color="#E5E5E5"> somebody may</font>

576
00:36:02,470 --> 00:36:08,200
derive a class for the<font color="#E5E5E5"> square and for</font>

577
00:36:05,740 --> 00:36:10,390
his purpose<font color="#E5E5E5"> he</font><font color="#CCCCCC"> has to override the</font>

578
00:36:08,200 --> 00:36:13,600
setters<font color="#E5E5E5"> in order to keep the shape a</font>

579
00:36:10,390 --> 00:36:17,440
square<font color="#E5E5E5"> but once he does</font>

580
00:36:13,600 --> 00:36:20,259
that he will this arrived class<font color="#E5E5E5"> will</font>

581
00:36:17,440 --> 00:36:23,110
violate the property of the base class

582
00:36:20,260 --> 00:36:28,240
<font color="#CCCCCC">that people</font><font color="#E5E5E5"> has people have</font><font color="#CCCCCC"> already</font>

583
00:36:23,110 --> 00:36:33,040
proven<font color="#E5E5E5"> before the in</font><font color="#CCCCCC"> SVX we don't have</font>

584
00:36:28,240 --> 00:36:35,410
this dilemma because the verification

585
00:36:33,040 --> 00:36:38,950
happens at the actual<font color="#E5E5E5"> runtime</font><font color="#CCCCCC"> there is</font>

586
00:36:35,410 --> 00:36:44,680
no confusion<font color="#E5E5E5"> due to abstraction so for</font>

587
00:36:38,950 --> 00:36:47,890
<font color="#E5E5E5">example if if rectangle</font><font color="#CCCCCC"> R is constructed</font>

588
00:36:44,680 --> 00:36:51,060
at<font color="#E5E5E5"> runtime</font><font color="#CCCCCC"> as a rectangle then</font><font color="#E5E5E5"> of course</font>

589
00:36:47,890 --> 00:36:55,000
we<font color="#E5E5E5"> are able to prove</font><font color="#CCCCCC"> that the Wis is</font>

590
00:36:51,060 --> 00:36:58,240
independent of the height on the other

591
00:36:55,000 --> 00:37:01,930
hand if the<font color="#E5E5E5"> rectangle R is constructed</font>

592
00:36:58,240 --> 00:37:06,189
at runtime<font color="#CCCCCC"> as a square then we are able</font>

593
00:37:01,930 --> 00:37:09,640
<font color="#E5E5E5">to prove that this property does not</font>

594
00:37:06,190 --> 00:37:14,320
hold<font color="#CCCCCC"> so there is no confusion because</font><font color="#E5E5E5"> we</font>

595
00:37:09,640 --> 00:37:17,049
<font color="#E5E5E5">we define the property at the</font><font color="#CCCCCC"> at base</font>

596
00:37:14,320 --> 00:37:20,250
class but we actually<font color="#E5E5E5"> validate verify</font>

597
00:37:17,050 --> 00:37:22,780
<font color="#CCCCCC">the the property at</font><font color="#E5E5E5"> the actual runtime</font>

598
00:37:20,250 --> 00:37:25,420
<font color="#CCCCCC">okay</font>

599
00:37:22,780 --> 00:37:28,780
so adopting<font color="#CCCCCC"> SBX on your website is</font>

600
00:37:25,420 --> 00:37:32,830
<font color="#E5E5E5">extremely simple</font><font color="#CCCCCC"> as VX consists of an</font>

601
00:37:28,780 --> 00:37:36,310
agent and an adapter the agent can be<font color="#E5E5E5"> a</font>

602
00:37:32,830 --> 00:37:41,049
public organizational or local host the

603
00:37:36,310 --> 00:37:43,900
agent<font color="#E5E5E5"> I skip the detail</font><font color="#CCCCCC"> here but the</font>

604
00:37:41,050 --> 00:37:47,800
information<font color="#E5E5E5"> is in the readme file of our</font>

605
00:37:43,900 --> 00:37:50,350
project now as a<font color="#E5E5E5"> developer</font><font color="#CCCCCC"> you only need</font>

606
00:37:47,800 --> 00:37:53,440
<font color="#E5E5E5">to pick an agent</font><font color="#CCCCCC"> and the set is endpoint</font>

607
00:37:50,350 --> 00:37:56,589
in the<font color="#CCCCCC"> svr configuration file</font><font color="#E5E5E5"> and then</font>

608
00:37:53,440 --> 00:38:01,290
copy the adapter folder to<font color="#CCCCCC"> your website</font>

609
00:37:56,590 --> 00:38:03,760
<font color="#E5E5E5">that is how you adopt</font><font color="#CCCCCC"> SV us then</font>

610
00:38:01,290 --> 00:38:06,700
assuming you are building a website<font color="#CCCCCC"> phu</font>

611
00:38:03,760 --> 00:38:09,760
<font color="#CCCCCC">kham</font><font color="#E5E5E5"> in PHP and you want to do Facebook</font>

612
00:38:06,700 --> 00:38:14,890
single<font color="#E5E5E5"> sign-on the only thing you need</font>

613
00:38:09,760 --> 00:38:17,830
to<font color="#E5E5E5"> do is to redirect the browser to this</font>

614
00:38:14,890 --> 00:38:20,049
<font color="#E5E5E5">URL which contains phu kham</font>

615
00:38:17,830 --> 00:38:21,900
PHP and the provider<font color="#E5E5E5"> equals</font><font color="#CCCCCC"> Facebook</font>

616
00:38:20,050 --> 00:38:24,460
that's all you need to know<font color="#E5E5E5"> just</font>

617
00:38:21,900 --> 00:38:26,980
redirect<font color="#CCCCCC"> them magically</font>

618
00:38:24,460 --> 00:38:27,220
the<font color="#CCCCCC"> users identity</font><font color="#E5E5E5"> information will be</font>

619
00:38:26,980 --> 00:38:29,530
of

620
00:38:27,220 --> 00:38:32,950
<font color="#E5E5E5">available</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the following session</font>

621
00:38:29,530 --> 00:38:35,980
variables so currently we give you the

622
00:38:32,950 --> 00:38:36,910
user ID<font color="#CCCCCC"> phone</font><font color="#E5E5E5"> full</font><font color="#CCCCCC"> name</font><font color="#E5E5E5"> email and</font>

623
00:38:35,980 --> 00:38:38,710
authority

624
00:38:36,910 --> 00:38:40,480
so really you don't<font color="#E5E5E5"> need to know</font>

625
00:38:38,710 --> 00:38:43,420
anything about<font color="#E5E5E5"> the single sign-on just</font>

626
00:38:40,480 --> 00:38:48,460
do the redirection<font color="#E5E5E5"> pick up the session</font>

627
00:38:43,420 --> 00:38:53,320
variables so<font color="#E5E5E5"> we have covered</font><font color="#CCCCCC"> seven</font>

628
00:38:48,460 --> 00:38:56,830
single sign-on providers Facebook and

629
00:38:53,320 --> 00:39:03,040
Microsoft account<font color="#E5E5E5"> Microsoft Azure Google</font>

630
00:38:56,830 --> 00:39:06,819
<font color="#E5E5E5">Yahoo LinkedIn and and Weibo also we</font>

631
00:39:03,040 --> 00:39:11,820
support<font color="#E5E5E5"> currently we support three</font>

632
00:39:06,820 --> 00:39:15,369
languages<font color="#CCCCCC"> but</font><font color="#E5E5E5"> it's pretty easy</font><font color="#CCCCCC"> to</font>

633
00:39:11,820 --> 00:39:18,880
support more services and<font color="#E5E5E5"> and more</font>

634
00:39:15,369 --> 00:39:21,970
languages and we have tried<font color="#CCCCCC"> to integrate</font>

635
00:39:18,880 --> 00:39:25,590
<font color="#E5E5E5">SVRs with real world applications for</font>

636
00:39:21,970 --> 00:39:30,910
<font color="#CCCCCC">example we we did integration with</font>

637
00:39:25,590 --> 00:39:35,349
<font color="#CCCCCC">MediaWiki so this is a</font><font color="#E5E5E5"> media weekly</font>

638
00:39:30,910 --> 00:39:39,040
<font color="#E5E5E5">website and when I click here I'm I'm</font>

639
00:39:35,349 --> 00:39:43,440
<font color="#E5E5E5">using as we are so you can see that the</font>

640
00:39:39,040 --> 00:39:47,830
<font color="#E5E5E5">integration is seamless it took only</font>

641
00:39:43,440 --> 00:39:51,760
eight eight lines of code changes to do

642
00:39:47,830 --> 00:39:54,640
the<font color="#E5E5E5"> integration and this is hot CRP</font>

643
00:39:51,760 --> 00:39:59,200
<font color="#CCCCCC">which is a conference</font><font color="#E5E5E5"> management system</font>

644
00:39:54,640 --> 00:40:03,098
widely<font color="#E5E5E5"> used in the academic community</font><font color="#CCCCCC"> so</font>

645
00:39:59,200 --> 00:40:09,970
we did this integration<font color="#E5E5E5"> so again you</font><font color="#CCCCCC"> see</font>

646
00:40:03,099 --> 00:40:13,150
that<font color="#E5E5E5"> it's in this case we it only took</font>

647
00:40:09,970 --> 00:40:15,549
21 lines of code changes<font color="#E5E5E5"> and also we did</font>

648
00:40:13,150 --> 00:40:18,070
integration with CMT<font color="#E5E5E5"> which is another</font>

649
00:40:15,550 --> 00:40:21,280
<font color="#E5E5E5">conference management system developed</font>

650
00:40:18,070 --> 00:40:23,830
by Microsoft<font color="#CCCCCC"> Research</font><font color="#E5E5E5"> so the project is</font>

651
00:40:21,280 --> 00:40:27,490
<font color="#E5E5E5">open source under</font><font color="#CCCCCC"> the MIT license</font>

652
00:40:23,830 --> 00:40:30,609
available<font color="#CCCCCC"> on github this is the project</font>

653
00:40:27,490 --> 00:40:35,109
<font color="#CCCCCC">repository so ah</font>

654
00:40:30,609 --> 00:40:42,359
<font color="#E5E5E5">now finally</font><font color="#CCCCCC"> I I want</font><font color="#E5E5E5"> to show you a demo</font>

655
00:40:35,109 --> 00:40:42,359
of<font color="#E5E5E5"> SP us so first let's start with</font>

656
00:40:43,530 --> 00:40:54,460
well this is<font color="#E5E5E5"> our Facebook class and for</font>

657
00:40:50,710 --> 00:40:57,700
<font color="#E5E5E5">the demo purpose so this line is</font>

658
00:40:54,460 --> 00:40:58,330
actually<font color="#E5E5E5"> an important important security</font>

659
00:40:57,700 --> 00:41:01,270
<font color="#E5E5E5">check</font>

660
00:40:58,330 --> 00:41:06,940
so for demo purpose I come out to this

661
00:41:01,270 --> 00:41:16,860
line so now the program is buggy<font color="#CCCCCC"> now we</font>

662
00:41:06,940 --> 00:41:19,960
can run this program<font color="#CCCCCC"> so after a while</font>

663
00:41:16,860 --> 00:41:25,600
the server will start<font color="#CCCCCC"> ok ignore this</font>

664
00:41:19,960 --> 00:41:27,760
part<font color="#CCCCCC"> ok so so oh by the way for</font><font color="#E5E5E5"> this</font>

665
00:41:25,600 --> 00:41:31,180
demo purpose I'm running the<font color="#CCCCCC"> localhost</font>

666
00:41:27,760 --> 00:41:35,200
<font color="#E5E5E5">agent so both the browser and the agent</font>

667
00:41:31,180 --> 00:41:41,339
are running on this laptop<font color="#CCCCCC"> so when I</font>

668
00:41:35,200 --> 00:41:41,339
click<font color="#E5E5E5"> Facebook log in you can see that</font>

669
00:41:43,770 --> 00:41:51,070
the verification<font color="#E5E5E5"> starts</font>

670
00:41:46,420 --> 00:41:53,440
so first the the<font color="#E5E5E5"> verification server</font>

671
00:41:51,070 --> 00:41:56,620
will synthesize the the program

672
00:41:53,440 --> 00:42:00,010
corresponding<font color="#E5E5E5"> to the execution the the</font>

673
00:41:56,620 --> 00:42:05,259
final<font color="#E5E5E5"> sim T and then it will compile</font>

674
00:42:00,010 --> 00:42:08,700
this<font color="#E5E5E5"> c-sharp code into</font><font color="#CCCCCC"> da</font><font color="#E5E5E5"> net code then</font>

675
00:42:05,260 --> 00:42:10,900
it<font color="#CCCCCC"> will translate</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> tener code to the</font>

676
00:42:08,700 --> 00:42:13,629
formal language<font color="#E5E5E5"> called</font><font color="#CCCCCC"> the Boogie and</font>

677
00:42:10,900 --> 00:42:15,970
then prove the correctness of the<font color="#CCCCCC"> buggy</font>

678
00:42:13,630 --> 00:42:19,780
code so right now we<font color="#E5E5E5"> are in the stage of</font>

679
00:42:15,970 --> 00:42:28,709
proving the proving the Dukey program

680
00:42:19,780 --> 00:42:28,710
and it will take a few<font color="#CCCCCC"> maybe 30 seconds</font>

681
00:42:35,000 --> 00:42:44,420
<font color="#E5E5E5">okay so this says there is a there's a</font>

682
00:42:41,020 --> 00:42:48,880
<font color="#CCCCCC">counterexample found right by the</font>

683
00:42:44,420 --> 00:42:52,070
theorem prover<font color="#E5E5E5"> so this gives you the</font>

684
00:42:48,880 --> 00:42:56,360
<font color="#E5E5E5">execution trace</font><font color="#CCCCCC"> so you can step through</font>

685
00:42:52,070 --> 00:42:59,660
this counter example and then<font color="#E5E5E5"> you can</font>

686
00:42:56,360 --> 00:43:07,250
figure<font color="#E5E5E5"> out why this proof didn't go</font>

687
00:42:59,660 --> 00:43:12,640
through then so I realized oh it's

688
00:43:07,250 --> 00:43:12,640
<font color="#E5E5E5">because of missing this important check</font>

689
00:43:15,940 --> 00:43:28,790
but then then I fix this bug<font color="#E5E5E5"> we can run</font>

690
00:43:21,980 --> 00:43:33,620
the program<font color="#CCCCCC"> again oh by the way up</font>

691
00:43:28,790 --> 00:43:35,330
because<font color="#E5E5E5"> of the proof failure the</font><font color="#CCCCCC"> the</font>

692
00:43:33,620 --> 00:43:42,200
transaction<font color="#CCCCCC"> that the execution</font><font color="#E5E5E5"> is</font>

693
00:43:35,330 --> 00:43:47,450
rejected<font color="#E5E5E5"> now in the a new x-fusion</font>

694
00:43:42,200 --> 00:43:54,129
so again I click facebook login<font color="#E5E5E5"> so the</font>

695
00:43:47,450 --> 00:44:07,279
the same process<font color="#CCCCCC"> is now compiling the</font>

696
00:43:54,130 --> 00:44:10,930
<font color="#E5E5E5">but the</font><font color="#CCCCCC"> same T into a program now</font><font color="#E5E5E5"> again</font>

697
00:44:07,280 --> 00:44:10,930
<font color="#E5E5E5">we</font><font color="#CCCCCC"> are doing the theorem proving</font>

698
00:44:46,500 --> 00:44:55,530
<font color="#E5E5E5">okay so the proof is done so you can see</font>

699
00:44:49,920 --> 00:45:00,180
that the agent is<font color="#E5E5E5"> now accepting this</font>

700
00:44:55,530 --> 00:45:02,849
execution<font color="#CCCCCC"> and for the</font><font color="#E5E5E5"> client</font><font color="#CCCCCC"> you can see</font>

701
00:45:00,180 --> 00:45:05,040
that you are<font color="#E5E5E5"> locked in but as you</font><font color="#CCCCCC"> can</font>

702
00:45:02,849 --> 00:45:08,430
see that<font color="#CCCCCC"> fear improving is very</font>

703
00:45:05,040 --> 00:45:11,849
<font color="#E5E5E5">expensive right now</font><font color="#CCCCCC"> the cool thing about</font>

704
00:45:08,430 --> 00:45:14,580
<font color="#CCCCCC">the SPX is that once a theorem is proven</font>

705
00:45:11,849 --> 00:45:18,420
<font color="#CCCCCC">it's only about</font><font color="#E5E5E5"> the code once it</font><font color="#CCCCCC"> is</font>

706
00:45:14,580 --> 00:45:22,259
proven it is<font color="#CCCCCC"> cashed</font><font color="#E5E5E5"> so from now on</font><font color="#CCCCCC"> from</font>

707
00:45:18,420 --> 00:45:25,680
any browser<font color="#E5E5E5"> anywhere if you do the same</font>

708
00:45:22,260 --> 00:45:29,880
<font color="#E5E5E5">execution you get it immediately</font><font color="#CCCCCC"> there</font>

709
00:45:25,680 --> 00:45:35,490
<font color="#E5E5E5">is no proof because of the to your own</font>

710
00:45:29,880 --> 00:45:41,400
<font color="#E5E5E5">cash so that's a that's about it let me</font>

711
00:45:35,490 --> 00:45:46,830
<font color="#CCCCCC">go - yeah so here are</font><font color="#E5E5E5"> the takeaway</font>

712
00:45:41,400 --> 00:45:50,609
points first most<font color="#CCCCCC"> website programmers</font>

713
00:45:46,830 --> 00:45:53,580
are not experienced locksmiths<font color="#E5E5E5"> so SSO</font>

714
00:45:50,609 --> 00:45:56,730
security bugs are<font color="#E5E5E5"> pervasive and even big</font>

715
00:45:53,580 --> 00:45:59,910
companies make mistakes<font color="#E5E5E5"> and in fact this</font>

716
00:45:56,730 --> 00:46:03,180
problem<font color="#E5E5E5"> is</font><font color="#CCCCCC"> very well known</font><font color="#E5E5E5"> now in the</font>

717
00:45:59,910 --> 00:46:06,569
security<font color="#E5E5E5"> community then I</font><font color="#CCCCCC"> talk about a</font>

718
00:46:03,180 --> 00:46:09,720
self verifying execution<font color="#CCCCCC"> it is</font>

719
00:46:06,570 --> 00:46:13,800
essentially a locksmiths<font color="#E5E5E5"> built into a</font>

720
00:46:09,720 --> 00:46:17,939
<font color="#CCCCCC">lock product and this locksmith watches</font>

721
00:46:13,800 --> 00:46:20,930
how a lock is is opened every time and

722
00:46:17,940 --> 00:46:24,260
checks whether<font color="#E5E5E5"> it is logically sound</font>

723
00:46:20,930 --> 00:46:27,779
then I also<font color="#CCCCCC"> talk about our open</font><font color="#E5E5E5"> source</font>

724
00:46:24,260 --> 00:46:32,430
project as<font color="#CCCCCC"> be us which is a framework</font>

725
00:46:27,780 --> 00:46:38,520
based on as we<font color="#CCCCCC"> acts</font><font color="#E5E5E5"> for for SSO</font>

726
00:46:32,430 --> 00:46:42,080
integration and so please<font color="#E5E5E5"> help us</font><font color="#CCCCCC"> by</font>

727
00:46:38,520 --> 00:46:45,570
adopting as as we are on your website<font color="#CCCCCC"> or</font>

728
00:46:42,080 --> 00:46:48,630
by<font color="#E5E5E5"> joining the project to improve</font><font color="#CCCCCC"> the</font>

729
00:46:45,570 --> 00:46:51,390
code we do believe<font color="#E5E5E5"> that we</font><font color="#CCCCCC"> are heading</font>

730
00:46:48,630 --> 00:46:54,240
<font color="#CCCCCC">toward a</font><font color="#E5E5E5"> promising direction which will</font>

731
00:46:51,390 --> 00:46:57,839
<font color="#E5E5E5">fundamentally address the SSO security</font>

732
00:46:54,240 --> 00:47:01,879
bugs so that's my<font color="#E5E5E5"> I talk thank you very</font>

733
00:46:57,839 --> 00:47:01,880
much and I'm<font color="#CCCCCC"> happy to take questions</font>

734
00:47:14,170 --> 00:47:19,089
hi it's a question<font color="#E5E5E5"> about the first part</font>

735
00:47:15,760 --> 00:47:24,700
of you talk<font color="#E5E5E5"> if I'm correct in open ID</font>

736
00:47:19,089 --> 00:47:28,930
connect<font color="#E5E5E5"> each application its its client</font>

737
00:47:24,700 --> 00:47:31,328
application<font color="#E5E5E5"> accessing the user data is</font>

738
00:47:28,930 --> 00:47:34,569
issued normally a client ID and a client

739
00:47:31,329 --> 00:47:37,210
secret<font color="#E5E5E5"> it has to be registered on the on</font>

740
00:47:34,569 --> 00:47:41,288
the<font color="#E5E5E5"> authentication</font><font color="#CCCCCC"> server</font><font color="#E5E5E5"> so how could</font>

741
00:47:37,210 --> 00:47:43,480
<font color="#E5E5E5">you like</font><font color="#CCCCCC"> input</font><font color="#E5E5E5"> like access the user data</font>

742
00:47:41,289 --> 00:47:47,230
<font color="#E5E5E5">with</font><font color="#CCCCCC"> another app</font><font color="#E5E5E5"> if this app was not</font>

743
00:47:43,480 --> 00:47:52,299
<font color="#CCCCCC">issued a proper secret and talking to</font><font color="#E5E5E5"> to</font>

744
00:47:47,230 --> 00:47:56,730
access<font color="#CCCCCC"> via the</font><font color="#E5E5E5"> user data</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> which</font>

745
00:47:52,299 --> 00:48:01,660
which one it's a beginning

746
00:47:56,730 --> 00:48:04,779
<font color="#E5E5E5">wait yeah</font><font color="#CCCCCC"> no I think</font><font color="#E5E5E5"> it's the one with</font>

747
00:48:01,660 --> 00:48:07,319
with with the president leaves the

748
00:48:04,779 --> 00:48:12,160
prison picture<font color="#E5E5E5"> like yeah this is what</font>

749
00:48:07,319 --> 00:48:13,420
<font color="#CCCCCC">where baby</font><font color="#E5E5E5"> at one</font><font color="#CCCCCC"> moment you you meant</font>

750
00:48:12,160 --> 00:48:15,700
you mentioned that basically<font color="#E5E5E5"> any</font>

751
00:48:13,420 --> 00:48:21,250
application could<font color="#CCCCCC"> good</font><font color="#E5E5E5"> acts use the user</font>

752
00:48:15,700 --> 00:48:27,339
token<font color="#E5E5E5"> and like Angry Bird or okay so it</font>

753
00:48:21,250 --> 00:48:33,089
<font color="#E5E5E5">is this one yeah right</font><font color="#CCCCCC"> okay ah</font><font color="#E5E5E5"> so so the</font>

754
00:48:27,339 --> 00:48:36,490
<font color="#CCCCCC">the OS protocol has two kinds</font><font color="#E5E5E5"> of tokens</font>

755
00:48:33,089 --> 00:48:38,319
this one is called the access token<font color="#CCCCCC"> the</font>

756
00:48:36,490 --> 00:48:42,359
other one is called authorization code

757
00:48:38,319 --> 00:48:45,910
so I think what you mentioned<font color="#CCCCCC"> is</font>

758
00:48:42,359 --> 00:48:51,279
authorization code which according<font color="#CCCCCC"> to</font>

759
00:48:45,910 --> 00:48:54,549
the protocol is tied to the<font color="#CCCCCC"> app ID the</font>

760
00:48:51,279 --> 00:48:57,910
application ID<font color="#E5E5E5"> so this</font><font color="#CCCCCC"> is actually a</font>

761
00:48:54,549 --> 00:49:01,839
very<font color="#E5E5E5"> good</font><font color="#CCCCCC"> question because the correct</font>

762
00:48:57,910 --> 00:49:06,578
way to<font color="#CCCCCC"> implement this scenario is</font><font color="#E5E5E5"> to use</font>

763
00:49:01,839 --> 00:49:11,410
the authorization code<font color="#E5E5E5"> which which tie</font>

764
00:49:06,579 --> 00:49:14,529
to the application ID but once this<font color="#E5E5E5"> kind</font>

765
00:49:11,410 --> 00:49:16,538
of access token is it's like a a more

766
00:49:14,529 --> 00:49:20,319
powerful thing once you get to the

767
00:49:16,539 --> 00:49:24,690
access token<font color="#CCCCCC"> it is called a bearer token</font>

768
00:49:20,319 --> 00:49:24,690
you can you can<font color="#E5E5E5"> get the information</font>

769
00:49:26,900 --> 00:49:39,740
did I answer<font color="#E5E5E5"> your question</font><font color="#CCCCCC"> or maybe I</font>

770
00:49:29,059 --> 00:49:41,510
<font color="#E5E5E5">can explain a little bit of line because</font>

771
00:49:39,740 --> 00:49:43,189
we've been<font color="#E5E5E5"> using</font><font color="#CCCCCC"> that quite lot with</font>

772
00:49:41,510 --> 00:49:45,200
what we're<font color="#CCCCCC"> working</font><font color="#E5E5E5"> with Keith log server</font>

773
00:49:43,190 --> 00:49:48,799
so it's a<font color="#E5E5E5"> it's an open</font><font color="#CCCCCC"> ID connect server</font>

774
00:49:45,200 --> 00:49:52,609
and and so we<font color="#CCCCCC"> we also</font><font color="#E5E5E5"> face quite a few</font>

775
00:49:48,799 --> 00:50:04,819
<font color="#E5E5E5">issues with the properties okay thank</font>

776
00:49:52,609 --> 00:50:07,609
you hi you didn't talk much<font color="#CCCCCC"> about the</font>

777
00:50:04,819 --> 00:50:10,038
self verification<font color="#E5E5E5"> verifying execution</font>

778
00:50:07,609 --> 00:50:11,770
<font color="#E5E5E5">but</font><font color="#CCCCCC"> I was wondering doesn't the symbolic</font>

779
00:50:10,039 --> 00:50:14,690
<font color="#E5E5E5">transaction suffer from the same</font>

780
00:50:11,770 --> 00:50:18,619
problems with<font color="#E5E5E5"> forgery and stuff I do you</font>

781
00:50:14,690 --> 00:50:25,309
ensure the<font color="#CCCCCC"> integrity of the symbolic</font>

782
00:50:18,619 --> 00:50:30,049
token<font color="#CCCCCC"> oh so if if I answer your</font><font color="#E5E5E5"> question</font>

783
00:50:25,309 --> 00:50:32,809
<font color="#CCCCCC">correctly if I understand Alice could</font>

784
00:50:30,049 --> 00:50:35,270
<font color="#E5E5E5">just correct make a fake symbolic token</font>

785
00:50:32,809 --> 00:50:39,730
right that claims<font color="#E5E5E5"> that she</font><font color="#CCCCCC"> followed the</font>

786
00:50:35,270 --> 00:50:43,160
right<font color="#CCCCCC"> execution path</font><font color="#E5E5E5"> okay so yeah yeah</font>

787
00:50:39,730 --> 00:50:48,589
also this is a very<font color="#E5E5E5"> very good question</font>

788
00:50:43,160 --> 00:50:52,970
so I because<font color="#CCCCCC"> of the the</font><font color="#E5E5E5"> time I didn't</font>

789
00:50:48,589 --> 00:50:59,599
talk<font color="#CCCCCC"> about that</font><font color="#E5E5E5"> part so you what you</font><font color="#CCCCCC"> are</font>

790
00:50:52,970 --> 00:51:03,379
asking is what if these<font color="#CCCCCC"> participants try</font>

791
00:50:59,599 --> 00:51:06,680
<font color="#CCCCCC">to lie about</font><font color="#E5E5E5"> symbolic transaction right</font>

792
00:51:03,380 --> 00:51:10,640
now I I yeah I didn't cover<font color="#CCCCCC"> that part</font>

793
00:51:06,680 --> 00:51:15,589
but I can refer<font color="#CCCCCC"> you</font><font color="#E5E5E5"> to our paper we have</font>

794
00:51:10,640 --> 00:51:16,848
published a series of papers<font color="#E5E5E5"> so that</font><font color="#CCCCCC"> is</font>

795
00:51:15,589 --> 00:51:20,270
<font color="#E5E5E5">taken</font><font color="#CCCCCC"> care of</font>

796
00:51:16,849 --> 00:51:23,240
although I didn't talk<font color="#CCCCCC"> about</font><font color="#E5E5E5"> but I can</font>

797
00:51:20,270 --> 00:51:29,950
show<font color="#E5E5E5"> you a little bit up of this I</font>

798
00:51:23,240 --> 00:51:33,200
<font color="#E5E5E5">talked about this</font><font color="#CCCCCC"> compact representation</font>

799
00:51:29,950 --> 00:51:35,359
actually I told<font color="#E5E5E5"> you that I was</font><font color="#CCCCCC"> not going</font>

800
00:51:33,200 --> 00:51:38,500
<font color="#CCCCCC">to talk about</font><font color="#E5E5E5"> compact compact</font>

801
00:51:35,359 --> 00:51:40,210
representation in this representation<font color="#CCCCCC"> we</font>

802
00:51:38,500 --> 00:51:44,380
<font color="#CCCCCC">have the</font>

803
00:51:40,210 --> 00:51:47,140
<font color="#CCCCCC">to to show whether</font><font color="#E5E5E5"> a message is signed</font>

804
00:51:44,380 --> 00:51:49,030
or<font color="#CCCCCC"> not</font><font color="#E5E5E5"> whether a message is browser</font>

805
00:51:47,140 --> 00:51:53,020
redirection or<font color="#E5E5E5"> directed</font><font color="#CCCCCC"> server-to-server</font>

806
00:51:49,030 --> 00:51:56,109
<font color="#E5E5E5">call so this kind of things is also</font>

807
00:51:53,020 --> 00:52:02,339
baked into the reasoning so the short

808
00:51:56,109 --> 00:52:02,339
answer<font color="#CCCCCC"> is we</font><font color="#E5E5E5"> can prevent that thank you</font>

809
00:52:11,900 --> 00:52:16,280
so in your example<font color="#CCCCCC"> you should the the</font>

810
00:52:14,540 --> 00:52:18,410
code working<font color="#E5E5E5"> in kind</font><font color="#CCCCCC"> of enforcement mode</font>

811
00:52:16,280 --> 00:52:20,630
where you actually<font color="#E5E5E5"> disable the actual</font>

812
00:52:18,410 --> 00:52:22,370
<font color="#E5E5E5">login</font><font color="#CCCCCC"> does the framework give us the</font>

813
00:52:20,630 --> 00:52:24,590
<font color="#E5E5E5">ability to enabled in kind of a logging</font>

814
00:52:22,370 --> 00:52:26,720
mode where the OAuth will actually

815
00:52:24,590 --> 00:52:28,520
complete normally but then it will log

816
00:52:26,720 --> 00:52:31,549
that<font color="#E5E5E5"> this should not have been gone</font>

817
00:52:28,520 --> 00:52:34,220
<font color="#CCCCCC">through</font><font color="#E5E5E5"> normally like kind of to enable</font>

818
00:52:31,550 --> 00:52:35,810
their auth like<font color="#CCCCCC"> to other to use it for</font>

819
00:52:34,220 --> 00:52:40,580
detection more than<font color="#E5E5E5"> kind of enforcement</font>

820
00:52:35,810 --> 00:52:42,890
<font color="#CCCCCC">is</font><font color="#E5E5E5"> that possible oh I'm sorry I missed</font>

821
00:52:40,580 --> 00:52:46,430
<font color="#CCCCCC">the</font><font color="#E5E5E5"> first part of</font><font color="#CCCCCC"> this so the</font><font color="#E5E5E5"> the</font>

822
00:52:42,890 --> 00:52:49,220
<font color="#E5E5E5">framework the</font><font color="#CCCCCC"> SVX</font><font color="#E5E5E5"> of framework</font><font color="#CCCCCC"> in the</font>

823
00:52:46,430 --> 00:52:52,279
demo you you showed us<font color="#E5E5E5"> basically it kind</font>

824
00:52:49,220 --> 00:52:54,560
<font color="#CCCCCC">of stopped the actual oil flow oh okay</font>

825
00:52:52,280 --> 00:52:58,600
is it possible<font color="#E5E5E5"> to</font><font color="#CCCCCC"> enable</font><font color="#E5E5E5"> it can only</font>

826
00:52:54,560 --> 00:53:04,130
logging mode yeah yeah that that<font color="#E5E5E5"> is also</font>

827
00:52:58,600 --> 00:53:07,660
possible<font color="#CCCCCC"> and</font><font color="#E5E5E5"> perhaps yet another way to</font>

828
00:53:04,130 --> 00:53:11,810
do that is we<font color="#E5E5E5"> just</font><font color="#CCCCCC"> prove all</font><font color="#E5E5E5"> the theorem</font>

829
00:53:07,660 --> 00:53:14,299
<font color="#E5E5E5">upfront and then</font><font color="#CCCCCC"> just populate the cash</font>

830
00:53:11,810 --> 00:53:17,779
to<font color="#CCCCCC"> the to deploy that cash</font><font color="#E5E5E5"> only</font>

831
00:53:14,300 --> 00:53:25,270
so<font color="#E5E5E5"> anything missing the cash will be</font>

832
00:53:17,780 --> 00:53:25,270
flagged as a potential attack thank you

833
00:53:39,590 --> 00:53:47,910
hi<font color="#E5E5E5"> so as I understood this framework</font>

834
00:53:43,590 --> 00:53:51,630
will be<font color="#CCCCCC"> for relying parties only and for</font>

835
00:53:47,910 --> 00:53:54,899
the<font color="#E5E5E5"> seven ID providers you mentioned are</font>

836
00:53:51,630 --> 00:53:59,750
you considering extending it for

837
00:53:54,900 --> 00:54:03,900
providers and<font color="#E5E5E5"> relying parties and with</font>

838
00:53:59,750 --> 00:54:07,530
categories of authentication<font color="#E5E5E5"> and</font>

839
00:54:03,900 --> 00:54:10,140
authorization protocols<font color="#E5E5E5"> because</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> am I</font>

840
00:54:07,530 --> 00:54:14,730
was quite busy<font color="#CCCCCC"> with this subject this</font>

841
00:54:10,140 --> 00:54:16,770
year and I found out that many big firms

842
00:54:14,730 --> 00:54:20,400
are starting to build their own ID

843
00:54:16,770 --> 00:54:24,420
providers and I was facing exact exactly

844
00:54:20,400 --> 00:54:29,370
the same problems you<font color="#CCCCCC"> mentioned yes</font><font color="#E5E5E5"> talk</font>

845
00:54:24,420 --> 00:54:33,690
yeah<font color="#CCCCCC"> ok ok I'm happy that you are</font>

846
00:54:29,370 --> 00:54:37,920
<font color="#E5E5E5">bringing up this point so so</font><font color="#CCCCCC"> right now</font>

847
00:54:33,690 --> 00:54:40,710
are as you said<font color="#E5E5E5"> we only do this on the</font>

848
00:54:37,920 --> 00:54:45,900
relying party<font color="#CCCCCC"> so what what we do</font><font color="#E5E5E5"> for the</font>

849
00:54:40,710 --> 00:54:48,510
proof is that<font color="#E5E5E5"> we build those identity</font>

850
00:54:45,900 --> 00:54:53,490
provider classes<font color="#E5E5E5"> to simulate their</font>

851
00:54:48,510 --> 00:54:56,300
behaviors so that<font color="#CCCCCC"> is not ideal so</font>

852
00:54:53,490 --> 00:55:00,620
ideally we should convince other

853
00:54:56,300 --> 00:55:05,340
identity providers to get<font color="#E5E5E5"> on board</font><font color="#CCCCCC"> so</font>

854
00:55:00,620 --> 00:55:10,589
actually I<font color="#E5E5E5"> we really look forward to to</font>

855
00:55:05,340 --> 00:55:14,760
having having the the<font color="#CCCCCC"> SBS adopted by</font>

856
00:55:10,590 --> 00:55:16,650
some<font color="#CCCCCC"> early adopters and then we can kind</font>

857
00:55:14,760 --> 00:55:19,800
<font color="#E5E5E5">of snowboard is this whole thing and</font>

858
00:55:16,650 --> 00:55:21,720
<font color="#E5E5E5">then eventually get big companies on</font>

859
00:55:19,800 --> 00:55:25,710
board<font color="#CCCCCC"> that would be wonderful</font>

860
00:55:21,720 --> 00:55:29,270
<font color="#E5E5E5">ok yeah maybe we can talk oh yeah yeah</font>

861
00:55:25,710 --> 00:55:29,270
<font color="#CCCCCC">ok thank you</font>

862
00:55:42,420 --> 00:55:48,839
could<font color="#CCCCCC"> you explain a bit more</font><font color="#E5E5E5"> about where</font>

863
00:55:45,690 --> 00:55:50,520
<font color="#E5E5E5">the serums come from are they inherent</font>

864
00:55:48,839 --> 00:55:52,558
<font color="#E5E5E5">in the framework always it up to the</font>

865
00:55:50,520 --> 00:55:54,270
developers<font color="#E5E5E5"> to populate how much worked</font>

866
00:55:52,559 --> 00:56:01,500
as a developer had to do to populate the

867
00:55:54,270 --> 00:56:07,859
theorems<font color="#CCCCCC"> oh</font><font color="#E5E5E5"> the theorems is essentially</font>

868
00:56:01,500 --> 00:56:11,609
<font color="#CCCCCC">uh when</font><font color="#E5E5E5"> we when</font><font color="#CCCCCC"> we execute we keep track</font>

869
00:56:07,859 --> 00:56:15,240
<font color="#E5E5E5">of this</font><font color="#CCCCCC"> sim team and eventually when the</font>

870
00:56:11,609 --> 00:56:20,270
when the execution get to the end<font color="#E5E5E5"> the</font>

871
00:56:15,240 --> 00:56:23,729
theorem is<font color="#E5E5E5"> this the final</font><font color="#CCCCCC"> seem T implies</font>

872
00:56:20,270 --> 00:56:26,579
the safety property and currently our

873
00:56:23,730 --> 00:56:30,000
<font color="#E5E5E5">safety property</font><font color="#CCCCCC"> we have</font><font color="#E5E5E5"> two safety</font>

874
00:56:26,579 --> 00:56:32,579
properties one is locking safety which

875
00:56:30,000 --> 00:56:35,910
prevent the attacker to<font color="#E5E5E5"> sign into</font><font color="#CCCCCC"> the</font>

876
00:56:32,579 --> 00:56:38,520
the<font color="#E5E5E5"> victim account and logging intent</font>

877
00:56:35,910 --> 00:56:41,910
which prevented<font color="#E5E5E5"> them the victim to sign</font>

878
00:56:38,520 --> 00:56:45,990
<font color="#CCCCCC">into</font><font color="#E5E5E5"> the attackers account so so I think</font>

879
00:56:41,910 --> 00:56:49,339
my<font color="#E5E5E5"> answer to your question is yes the</font>

880
00:56:45,990 --> 00:56:52,740
<font color="#CCCCCC">the theorem is generated automatically</font>

881
00:56:49,339 --> 00:56:56,400
because because final sim T is automatic

882
00:56:52,740 --> 00:56:59,848
and the property<font color="#E5E5E5"> the properties are</font>

883
00:56:56,400 --> 00:57:01,980
predefined<font color="#E5E5E5"> which party most naturally</font>

884
00:56:59,849 --> 00:57:03,690
owns the<font color="#E5E5E5"> save improving engine or</font>

885
00:57:01,980 --> 00:57:06,170
implementation of<font color="#CCCCCC"> theorem proving the</font>

886
00:57:03,690 --> 00:57:06,170
relying party

887
00:57:17,839 --> 00:57:20,859
yeah thank you<font color="#CCCCCC"> very much</font>

