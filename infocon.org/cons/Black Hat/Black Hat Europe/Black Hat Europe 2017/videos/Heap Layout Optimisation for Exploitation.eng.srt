1
00:00:00,030 --> 00:00:03,360
so my name<font color="#CCCCCC"> is Shawn healin and today I'm</font>

2
00:00:01,860 --> 00:00:06,180
gonna be<font color="#CCCCCC"> talking about</font><font color="#E5E5E5"> heap layout</font>

3
00:00:03,360 --> 00:00:07,949
optimization for<font color="#CCCCCC"> exploitation</font><font color="#E5E5E5"> so I used</font>

4
00:00:06,180 --> 00:00:09,840
to<font color="#E5E5E5"> work as a security</font><font color="#CCCCCC"> researcher at</font>

5
00:00:07,950 --> 00:00:11,190
immunity<font color="#E5E5E5"> doing predominantly exploit</font>

6
00:00:09,840 --> 00:00:13,259
development and that sort of thing and

7
00:00:11,190 --> 00:00:15,599
since<font color="#E5E5E5"> then I've moved more towards</font><font color="#CCCCCC"> into</font>

8
00:00:13,259 --> 00:00:18,020
trying<font color="#E5E5E5"> to automate aspects of reverse</font>

9
00:00:15,599 --> 00:00:22,769
<font color="#E5E5E5">engineering bug finding and exploitation</font>

10
00:00:18,020 --> 00:00:24,390
so the exploit development process<font color="#E5E5E5"> had a</font>

11
00:00:22,769 --> 00:00:27,538
very very<font color="#E5E5E5"> high level</font><font color="#CCCCCC"> I guess you could</font>

12
00:00:24,390 --> 00:00:29,369
view something<font color="#E5E5E5"> like this so we</font><font color="#CCCCCC"> have some</font>

13
00:00:27,539 --> 00:00:31,439
means of discovering vulnerabilities<font color="#CCCCCC"> we</font>

14
00:00:29,369 --> 00:00:34,980
have some means of<font color="#CCCCCC"> figuring out what</font><font color="#E5E5E5"> the</font>

15
00:00:31,439 --> 00:00:36,540
<font color="#E5E5E5">program's API is and then the</font><font color="#CCCCCC"> the</font>

16
00:00:34,980 --> 00:00:38,459
process of producing<font color="#E5E5E5"> an exploit is</font>

17
00:00:36,540 --> 00:00:39,809
actually programming<font color="#E5E5E5"> right so we're</font>

18
00:00:38,460 --> 00:00:41,579
using<font color="#E5E5E5"> available of vulnerability</font>

19
00:00:39,809 --> 00:00:43,230
triggers we're using standard API and

20
00:00:41,579 --> 00:00:45,090
we're programming<font color="#E5E5E5"> the state of the</font>

21
00:00:43,230 --> 00:00:46,468
target application<font color="#CCCCCC"> in order to move</font><font color="#E5E5E5"> it</font>

22
00:00:45,090 --> 00:00:48,719
into a state that's advantageous<font color="#E5E5E5"> to us</font>

23
00:00:46,469 --> 00:00:51,120
as attackers<font color="#CCCCCC"> we're gonna</font><font color="#E5E5E5"> be looking at</font>

24
00:00:48,719 --> 00:00:53,399
<font color="#E5E5E5">today</font><font color="#CCCCCC"> a program prominently focusing on</font>

25
00:00:51,120 --> 00:00:55,050
is this part<font color="#E5E5E5"> here</font><font color="#CCCCCC"> so once we have</font>

26
00:00:53,399 --> 00:00:56,190
vulnerability triggers and we know how

27
00:00:55,050 --> 00:00:59,069
to interact<font color="#E5E5E5"> with the program</font><font color="#CCCCCC"> normally</font>

28
00:00:56,190 --> 00:01:01,680
how do we combine these<font color="#E5E5E5"> two</font><font color="#CCCCCC"> things in</font>

29
00:00:59,070 --> 00:01:06,869
<font color="#CCCCCC">order to achieve whatever</font><font color="#E5E5E5"> ends that we</font>

30
00:01:01,680 --> 00:01:08,580
want so typically when we're doing

31
00:01:06,869 --> 00:01:10,140
exploit development we<font color="#E5E5E5"> want to build our</font>

32
00:01:08,580 --> 00:01:11,600
<font color="#CCCCCC">own API</font><font color="#E5E5E5"> which is separate from the</font>

33
00:01:10,140 --> 00:01:13,860
standard<font color="#E5E5E5"> API provided by the program</font>

34
00:01:11,600 --> 00:01:15,720
<font color="#E5E5E5">around these things we call primitives</font>

35
00:01:13,860 --> 00:01:16,950
<font color="#E5E5E5">most of the time</font><font color="#CCCCCC"> so we have read write</font>

36
00:01:15,720 --> 00:01:18,630
or<font color="#CCCCCC"> execute primitives</font><font color="#E5E5E5"> and what they do</font>

37
00:01:16,950 --> 00:01:21,180
is they<font color="#E5E5E5"> provide the attacker with the</font>

38
00:01:18,630 --> 00:01:23,009
ability to say read<font color="#CCCCCC"> a particular memory</font>

39
00:01:21,180 --> 00:01:24,450
<font color="#CCCCCC">location write a memory location or</font>

40
00:01:23,009 --> 00:01:26,280
execute<font color="#E5E5E5"> code at a particular memory</font>

41
00:01:24,450 --> 00:01:27,840
<font color="#E5E5E5">location and these along</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> the</font>

42
00:01:26,280 --> 00:01:29,159
standard<font color="#E5E5E5"> API are what</font><font color="#CCCCCC"> we'll typically</font>

43
00:01:27,840 --> 00:01:31,229
consider to<font color="#E5E5E5"> be the building blocks of an</font>

44
00:01:29,159 --> 00:01:33,299
exploit<font color="#E5E5E5"> and how we put together</font>

45
00:01:31,229 --> 00:01:35,009
primitives<font color="#CCCCCC"> yeah usually we'll</font><font color="#E5E5E5"> have say</font>

46
00:01:33,299 --> 00:01:37,020
one or more vulnerability triggers and

47
00:01:35,009 --> 00:01:38,939
we have some means of manipulating<font color="#E5E5E5"> the</font>

48
00:01:37,020 --> 00:01:41,039
program<font color="#CCCCCC"> State and we'll wrap</font><font color="#E5E5E5"> these up in</font>

49
00:01:38,939 --> 00:01:43,408
a nice API and then<font color="#E5E5E5"> we can use this</font>

50
00:01:41,040 --> 00:01:46,890
whenever<font color="#E5E5E5"> we want to say write a memory</font>

51
00:01:43,409 --> 00:01:48,180
location or read a memory location<font color="#E5E5E5"> so to</font>

52
00:01:46,890 --> 00:01:49,770
give an<font color="#E5E5E5"> example say</font><font color="#CCCCCC"> we have target</font>

53
00:01:48,180 --> 00:01:51,180
program which has this user data type

54
00:01:49,770 --> 00:01:53,280
which is dynamically allocated on the

55
00:01:51,180 --> 00:01:54,960
heap<font color="#CCCCCC"> we have this rename function</font><font color="#E5E5E5"> which</font>

56
00:01:53,280 --> 00:01:57,960
contains a pretty<font color="#E5E5E5"> obvious buffer</font>

57
00:01:54,960 --> 00:01:59,460
overflow over the name buffer associated

58
00:01:57,960 --> 00:02:02,639
with the user and then we have<font color="#E5E5E5"> this</font>

59
00:01:59,460 --> 00:02:04,770
display function which reads from<font color="#E5E5E5"> the</font>

60
00:02:02,640 --> 00:02:06,299
user object<font color="#CCCCCC"> a pointer and the display</font><font color="#E5E5E5"> is</font>

61
00:02:04,770 --> 00:02:07,520
<font color="#E5E5E5">in some way that we assume</font><font color="#CCCCCC"> that the</font><font color="#E5E5E5"> user</font>

62
00:02:06,299 --> 00:02:09,649
or the attacker

63
00:02:07,520 --> 00:02:10,910
<font color="#CCCCCC">can access</font><font color="#E5E5E5"> that data and we want</font><font color="#CCCCCC"> to do</font>

64
00:02:09,649 --> 00:02:13,910
is we want to<font color="#E5E5E5"> construct a primitive</font>

65
00:02:10,910 --> 00:02:15,739
which is an API that<font color="#CCCCCC"> the attacker can</font>

66
00:02:13,910 --> 00:02:17,030
use such that whenever<font color="#E5E5E5"> they want to read</font>

67
00:02:15,739 --> 00:02:18,200
something<font color="#CCCCCC"> from some location the</font>

68
00:02:17,030 --> 00:02:21,440
<font color="#E5E5E5">program's memory they can</font><font color="#CCCCCC"> call that</font>

69
00:02:18,200 --> 00:02:24,140
function<font color="#E5E5E5"> and have that data echoed back</font>

70
00:02:21,440 --> 00:02:25,220
to them so what<font color="#E5E5E5"> happens we just trigger</font>

71
00:02:24,140 --> 00:02:29,000
the vulnerability<font color="#CCCCCC"> all right so we just</font>

72
00:02:25,220 --> 00:02:30,830
<font color="#CCCCCC">trigger the rename</font><font color="#E5E5E5"> function we overflow</font>

73
00:02:29,000 --> 00:02:32,959
up whatever<font color="#E5E5E5"> is</font><font color="#CCCCCC"> after the name object and</font>

74
00:02:30,830 --> 00:02:34,430
then<font color="#E5E5E5"> we'd call display well it entirely</font>

75
00:02:32,959 --> 00:02:36,319
depends<font color="#CCCCCC"> on</font><font color="#E5E5E5"> the state</font><font color="#CCCCCC"> that the programs</font>

76
00:02:34,430 --> 00:02:38,840
in when we<font color="#CCCCCC"> trigger that vulnerability</font>

77
00:02:36,319 --> 00:02:40,429
<font color="#E5E5E5">right so whatever is directly after the</font>

78
00:02:38,840 --> 00:02:42,230
<font color="#E5E5E5">username object is going to be corrupted</font>

79
00:02:40,430 --> 00:02:44,060
that could be<font color="#CCCCCC"> a non</font><font color="#E5E5E5"> map page it could be</font>

80
00:02:42,230 --> 00:02:46,609
a locator metadata<font color="#CCCCCC"> it could be some</font>

81
00:02:44,060 --> 00:02:48,650
other dynamically allocated application

82
00:02:46,610 --> 00:02:50,269
data and sometimes we could get<font color="#E5E5E5"> lucky</font>

83
00:02:48,650 --> 00:02:51,709
and<font color="#E5E5E5"> we could corrupt the thing we</font>

84
00:02:50,269 --> 00:02:55,040
<font color="#E5E5E5">actually want to</font><font color="#CCCCCC"> corrupt and then other</font>

85
00:02:51,709 --> 00:02:55,970
<font color="#E5E5E5">times we could corrupt say some point or</font>

86
00:02:55,040 --> 00:03:01,280
the twos and<font color="#E5E5E5"> then we get a segmentation</font>

87
00:02:55,970 --> 00:03:02,390
<font color="#CCCCCC">fault or whatever so if we consider like</font>

88
00:03:01,280 --> 00:03:04,940
this thing at<font color="#E5E5E5"> the top here to</font><font color="#CCCCCC"> be a</font>

89
00:03:02,390 --> 00:03:06,470
representation of the<font color="#CCCCCC"> programs heap so</font>

90
00:03:04,940 --> 00:03:08,840
from lower<font color="#CCCCCC"> addresses to the</font><font color="#E5E5E5"> higher</font>

91
00:03:06,470 --> 00:03:10,700
addresses and we have a user object

92
00:03:08,840 --> 00:03:13,370
allocated on the heap<font color="#CCCCCC"> and the name</font>

93
00:03:10,700 --> 00:03:15,319
object is<font color="#E5E5E5"> about to be allocated so we</font>

94
00:03:13,370 --> 00:03:17,090
<font color="#CCCCCC">our goal is we want to position</font><font color="#E5E5E5"> the name</font>

95
00:03:15,319 --> 00:03:18,260
buffer immediately prior to the user

96
00:03:17,090 --> 00:03:19,730
<font color="#CCCCCC">object such that when we trigger the</font>

97
00:03:18,260 --> 00:03:21,798
vulnerability the user object<font color="#E5E5E5"> gets</font>

98
00:03:19,730 --> 00:03:24,018
corrupted<font color="#E5E5E5"> we can control the values of</font>

99
00:03:21,799 --> 00:03:25,190
<font color="#E5E5E5">its internal members so the pointers and</font>

100
00:03:24,019 --> 00:03:28,670
<font color="#E5E5E5">then we can when we call the display</font>

101
00:03:25,190 --> 00:03:30,859
function<font color="#E5E5E5"> we can basically read whatever</font>

102
00:03:28,670 --> 00:03:32,958
location<font color="#E5E5E5"> we</font><font color="#CCCCCC"> want in memory so if we</font>

103
00:03:30,859 --> 00:03:34,430
simply<font color="#E5E5E5"> trigger the one</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> trigger the</font>

104
00:03:32,959 --> 00:03:36,290
allocation of<font color="#E5E5E5"> the user object</font><font color="#CCCCCC"> and let's</font>

105
00:03:34,430 --> 00:03:37,940
<font color="#E5E5E5">say these green</font><font color="#CCCCCC"> things are free chunks</font>

106
00:03:36,290 --> 00:03:39,620
<font color="#E5E5E5">in memory the</font><font color="#CCCCCC"> allocator will use</font>

107
00:03:37,940 --> 00:03:41,660
whatever process it has for deciding

108
00:03:39,620 --> 00:03:44,540
where<font color="#CCCCCC"> to</font><font color="#E5E5E5"> put that name object in a</font>

109
00:03:41,660 --> 00:03:45,889
buffer<font color="#E5E5E5"> that's of the correct size</font><font color="#CCCCCC"> and if</font>

110
00:03:44,540 --> 00:03:47,540
you anywhere<font color="#E5E5E5"> so for example it could be</font>

111
00:03:45,889 --> 00:03:49,639
placed<font color="#E5E5E5"> directly after the user</font><font color="#CCCCCC"> object</font>

112
00:03:47,540 --> 00:03:50,630
and<font color="#E5E5E5"> adjacent to this on map page now</font><font color="#CCCCCC"> if</font>

113
00:03:49,639 --> 00:03:52,120
we trigger the vulnerability what's

114
00:03:50,630 --> 00:03:54,380
going to happen is we're simply going to

115
00:03:52,120 --> 00:03:57,019
end up with the<font color="#E5E5E5"> process being killed</font>

116
00:03:54,380 --> 00:03:58,099
because the page isn't mapped however

117
00:03:57,019 --> 00:04:01,459
let's say<font color="#E5E5E5"> first of all we fill that</font>

118
00:03:58,099 --> 00:04:03,858
<font color="#E5E5E5">buffer somehow now we</font><font color="#CCCCCC"> trigger the</font>

119
00:04:01,459 --> 00:04:05,810
<font color="#E5E5E5">creation of user object again in this</font>

120
00:04:03,859 --> 00:04:07,669
situation<font color="#CCCCCC"> this</font><font color="#E5E5E5"> time the</font><font color="#CCCCCC"> allocator</font><font color="#E5E5E5"> picks</font>

121
00:04:05,810 --> 00:04:09,590
the first<font color="#E5E5E5"> free page or sorry the first</font>

122
00:04:07,669 --> 00:04:10,730
free location<font color="#CCCCCC"> now in this case it's</font>

123
00:04:09,590 --> 00:04:11,870
still<font color="#CCCCCC"> not</font><font color="#E5E5E5"> quite what</font><font color="#CCCCCC"> we want because</font>

124
00:04:10,730 --> 00:04:15,380
<font color="#E5E5E5">we're still going to corrupt some</font>

125
00:04:11,870 --> 00:04:17,959
application data in<font color="#CCCCCC"> this location</font><font color="#E5E5E5"> here</font>

126
00:04:15,380 --> 00:04:20,779
<font color="#E5E5E5">so that's still not</font><font color="#CCCCCC"> what we want</font>

127
00:04:17,959 --> 00:04:23,210
so if we<font color="#CCCCCC"> manage</font><font color="#E5E5E5"> however to fill that now</font>

128
00:04:20,779 --> 00:04:25,609
we're<font color="#E5E5E5"> left with no more free chunks of</font>

129
00:04:23,210 --> 00:04:27,229
the the appropriate<font color="#CCCCCC"> size we allocate</font><font color="#E5E5E5"> the</font>

130
00:04:25,610 --> 00:04:28,580
user object<font color="#CCCCCC"> we allocate</font><font color="#E5E5E5"> the name object</font>

131
00:04:27,229 --> 00:04:29,990
the<font color="#E5E5E5"> name gets placed directly before the</font>

132
00:04:28,580 --> 00:04:32,568
user and now when<font color="#E5E5E5"> we trigger the</font>

133
00:04:29,990 --> 00:04:34,520
vulnerability<font color="#CCCCCC"> what's going to</font><font color="#E5E5E5"> happen is</font>

134
00:04:32,569 --> 00:04:36,139
the<font color="#E5E5E5"> user object</font><font color="#CCCCCC"> is going</font><font color="#E5E5E5"> to get</font>

135
00:04:34,520 --> 00:04:37,940
corrupted<font color="#CCCCCC"> so in this case we're going to</font>

136
00:04:36,139 --> 00:04:40,729
corrupt<font color="#E5E5E5"> the user object</font><font color="#CCCCCC"> with like Oh X</font>

137
00:04:37,940 --> 00:04:43,219
41 41 41<font color="#CCCCCC"> now when we call</font><font color="#E5E5E5"> the display</font>

138
00:04:40,729 --> 00:04:44,270
<font color="#CCCCCC">function</font><font color="#E5E5E5"> instead</font><font color="#CCCCCC"> of reading</font><font color="#E5E5E5"> the contents</font>

139
00:04:43,220 --> 00:04:46,460
of the name it's<font color="#E5E5E5"> going to read the</font>

140
00:04:44,270 --> 00:04:48,560
content to that<font color="#E5E5E5"> address and everything's</font>

141
00:04:46,460 --> 00:04:50,739
fine<font color="#E5E5E5"> and we win so the point here is</font>

142
00:04:48,560 --> 00:04:53,150
<font color="#CCCCCC">that simply triggering a vulnerability</font>

143
00:04:50,740 --> 00:04:54,080
<font color="#E5E5E5">isn't isn't sufficient order to achieve</font>

144
00:04:53,150 --> 00:04:56,120
our<font color="#E5E5E5"> ends we need to perform</font><font color="#CCCCCC"> this</font>

145
00:04:54,080 --> 00:04:58,130
manipulation stage ahead<font color="#E5E5E5"> of time to put</font>

146
00:04:56,120 --> 00:05:01,220
the application<font color="#E5E5E5"> into a</font><font color="#CCCCCC"> stage</font><font color="#E5E5E5"> that</font>

147
00:04:58,130 --> 00:05:03,110
<font color="#E5E5E5">results in and what we want happening so</font>

148
00:05:01,220 --> 00:05:04,430
the final primitive might look<font color="#E5E5E5"> something</font>

149
00:05:03,110 --> 00:05:05,870
like this there's going to be a<font color="#E5E5E5"> function</font>

150
00:05:04,430 --> 00:05:07,789
say on the attacker side within<font color="#E5E5E5"> their</font>

151
00:05:05,870 --> 00:05:10,190
exploit where they have some way of

152
00:05:07,789 --> 00:05:11,000
<font color="#CCCCCC">manipulating the</font><font color="#E5E5E5"> heap then the allocate</font>

153
00:05:10,190 --> 00:05:12,110
the user object trigger the

154
00:05:11,000 --> 00:05:13,550
vulnerability and<font color="#CCCCCC"> call the display</font>

155
00:05:12,110 --> 00:05:14,990
function<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is wrapped up in</font><font color="#E5E5E5"> a nice</font>

156
00:05:13,550 --> 00:05:16,819
<font color="#E5E5E5">function they just pass in the address</font>

157
00:05:14,990 --> 00:05:19,250
<font color="#E5E5E5">and now in future</font><font color="#CCCCCC"> anytime they want</font><font color="#E5E5E5"> to</font>

158
00:05:16,819 --> 00:05:20,389
read some address in the in the target

159
00:05:19,250 --> 00:05:22,880
application<font color="#CCCCCC"> they'll call this function</font>

160
00:05:20,389 --> 00:05:24,770
<font color="#CCCCCC">and a similar</font><font color="#E5E5E5"> idea behind like normal</font>

161
00:05:22,880 --> 00:05:26,300
programming right we want abstractions

162
00:05:24,770 --> 00:05:28,190
we want them to<font color="#E5E5E5"> be self-contained</font><font color="#CCCCCC"> in</font>

163
00:05:26,300 --> 00:05:30,470
this case we wanted<font color="#E5E5E5"> to see say like</font>

164
00:05:28,190 --> 00:05:33,740
reusable<font color="#E5E5E5"> and predictable and obviously</font>

165
00:05:30,470 --> 00:05:35,630
in the real world<font color="#E5E5E5"> especially with remote</font>

166
00:05:33,740 --> 00:05:38,210
targets<font color="#E5E5E5"> and where there's</font><font color="#CCCCCC"> non</font>

167
00:05:35,630 --> 00:05:39,500
<font color="#CCCCCC">determinism and those</font><font color="#E5E5E5"> other actors</font>

168
00:05:38,210 --> 00:05:42,799
interacting with a service we<font color="#E5E5E5"> want to</font>

169
00:05:39,500 --> 00:05:47,780
exploit it's never quite this clean<font color="#CCCCCC"> but</font>

170
00:05:42,800 --> 00:05:49,550
this is the<font color="#E5E5E5"> idea okay so for heap base</font>

171
00:05:47,780 --> 00:05:52,400
buffer overflows this manipulation

172
00:05:49,550 --> 00:05:54,169
process is typically done<font color="#CCCCCC"> obviously on</font>

173
00:05:52,400 --> 00:05:56,150
the heap layout itself<font color="#CCCCCC"> and it's usually</font>

174
00:05:54,169 --> 00:05:58,099
fairly labor-intensive task so the

175
00:05:56,150 --> 00:05:59,780
<font color="#CCCCCC">alamos</font><font color="#E5E5E5"> needs to understand the allocator</font>

176
00:05:58,099 --> 00:06:01,669
<font color="#E5E5E5">at the manner of which the application</font>

177
00:05:59,780 --> 00:06:03,380
uses the allocator<font color="#E5E5E5"> and then you</font><font color="#CCCCCC"> also</font>

178
00:06:01,669 --> 00:06:05,419
given a starting<font color="#E5E5E5"> state you need to</font>

179
00:06:03,380 --> 00:06:06,800
utilize the applications<font color="#CCCCCC"> API</font><font color="#E5E5E5"> in order</font><font color="#CCCCCC"> to</font>

180
00:06:05,419 --> 00:06:07,969
carefully<font color="#CCCCCC"> craft</font><font color="#E5E5E5"> the heap</font><font color="#CCCCCC"> state</font><font color="#E5E5E5"> because</font>

181
00:06:06,800 --> 00:06:09,919
typically you can't interact<font color="#E5E5E5"> directly</font>

182
00:06:07,969 --> 00:06:10,969
with<font color="#E5E5E5"> the allocator itself and this is</font>

183
00:06:09,919 --> 00:06:13,820
we're going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> automating</font>

184
00:06:10,969 --> 00:06:17,000
today so in reality<font color="#CCCCCC"> instead of having</font>

185
00:06:13,820 --> 00:06:19,099
<font color="#E5E5E5">like this kind of nice small heap state</font>

186
00:06:17,000 --> 00:06:20,900
where we have<font color="#E5E5E5"> three or</font><font color="#CCCCCC"> four chunks</font><font color="#E5E5E5"> we</font>

187
00:06:19,099 --> 00:06:23,030
end up having vastly more complicated

188
00:06:20,900 --> 00:06:24,650
<font color="#E5E5E5">things so well this is a</font><font color="#CCCCCC"> visualization</font>

189
00:06:23,030 --> 00:06:27,888
of the evolution of programs heap over

190
00:06:24,650 --> 00:06:29,429
time the<font color="#CCCCCC"> x-axis</font><font color="#E5E5E5"> is time</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> y-axis is</font>

191
00:06:27,889 --> 00:06:30,720
<font color="#E5E5E5">the</font>

192
00:06:29,430 --> 00:06:32,520
programs memory space starting<font color="#E5E5E5"> from</font>

193
00:06:30,720 --> 00:06:35,100
lower<font color="#CCCCCC"> addresses to higher addresses so</font>

194
00:06:32,520 --> 00:06:36,960
we<font color="#CCCCCC"> can see is as if the application</font><font color="#E5E5E5"> is</font>

195
00:06:35,100 --> 00:06:38,460
initialized<font color="#CCCCCC"> we're getting chunks</font>

196
00:06:36,960 --> 00:06:40,169
allocated one after the other<font color="#E5E5E5"> of the</font>

197
00:06:38,460 --> 00:06:42,330
green chunks represent allocated memory

198
00:06:40,170 --> 00:06:44,040
<font color="#E5E5E5">the gray ones represent previously</font>

199
00:06:42,330 --> 00:06:45,599
<font color="#CCCCCC">allocated but now freed memory and the</font>

200
00:06:44,040 --> 00:06:46,890
height<font color="#E5E5E5"> of a rectangle represents the</font>

201
00:06:45,600 --> 00:06:49,530
<font color="#E5E5E5">amount of memory in a particular</font><font color="#CCCCCC"> chunk</font>

202
00:06:46,890 --> 00:06:51,390
<font color="#E5E5E5">so we can see is we</font><font color="#CCCCCC"> have hundreds</font><font color="#E5E5E5"> of</font>

203
00:06:49,530 --> 00:06:52,590
allocated chunks hundreds of free chunks

204
00:06:51,390 --> 00:06:55,289
they're all interspersed<font color="#E5E5E5"> to each other</font>

205
00:06:52,590 --> 00:06:56,520
<font color="#CCCCCC">and it's as if we can't</font><font color="#E5E5E5"> just eyeball the</font>

206
00:06:55,290 --> 00:06:57,840
heap<font color="#E5E5E5"> State and say</font><font color="#CCCCCC"> ah</font>

207
00:06:56,520 --> 00:06:59,280
we<font color="#E5E5E5"> need to make say three allocations</font>

208
00:06:57,840 --> 00:07:02,239
and<font color="#E5E5E5"> like to freeze and then we're</font><font color="#CCCCCC"> gonna</font>

209
00:06:59,280 --> 00:07:04,559
<font color="#CCCCCC">end up in the desired end</font><font color="#E5E5E5"> State so it's</font>

210
00:07:02,240 --> 00:07:07,800
<font color="#E5E5E5">it is more complicated in the previous</font>

211
00:07:04,560 --> 00:07:08,700
example in reality<font color="#CCCCCC"> alright so this</font><font color="#E5E5E5"> is a</font>

212
00:07:07,800 --> 00:07:10,110
formally define what we're going to<font color="#E5E5E5"> be</font>

213
00:07:08,700 --> 00:07:11,400
doing<font color="#E5E5E5"> we're gonna have a source buffer</font>

214
00:07:10,110 --> 00:07:13,830
which is<font color="#E5E5E5"> the buffer from which the</font>

215
00:07:11,400 --> 00:07:15,780
overflow or underflow is going to say

216
00:07:13,830 --> 00:07:18,030
flow out of<font color="#E5E5E5"> a destination buffer which</font>

217
00:07:15,780 --> 00:07:20,280
is<font color="#E5E5E5"> the thing we</font><font color="#CCCCCC"> want to</font><font color="#E5E5E5"> corrupt and the</font>

218
00:07:18,030 --> 00:07:21,119
heap layer optimization problem is we're

219
00:07:20,280 --> 00:07:23,489
trying<font color="#E5E5E5"> to</font><font color="#CCCCCC"> minimize this objective</font>

220
00:07:21,120 --> 00:07:24,560
function<font color="#E5E5E5"> which is the absolute</font><font color="#CCCCCC"> distance</font>

221
00:07:23,490 --> 00:07:25,980
between the source<font color="#CCCCCC"> and the</font><font color="#E5E5E5"> destination</font>

222
00:07:24,560 --> 00:07:27,630
<font color="#CCCCCC">obviously you</font><font color="#E5E5E5"> could have different</font>

223
00:07:25,980 --> 00:07:31,860
<font color="#CCCCCC">objective functions because sometimes</font>

224
00:07:27,630 --> 00:07:33,630
the data you're corrupting is<font color="#E5E5E5"> okay and</font>

225
00:07:31,860 --> 00:07:35,040
<font color="#E5E5E5">sometimes it's not say if you're flowing</font>

226
00:07:33,630 --> 00:07:36,210
into<font color="#CCCCCC"> a non mapper page that's obviously</font>

227
00:07:35,040 --> 00:07:39,180
worse than if<font color="#CCCCCC"> you're flowing</font><font color="#E5E5E5"> to solve</font>

228
00:07:36,210 --> 00:07:40,380
<font color="#E5E5E5">for application data but the search</font><font color="#CCCCCC"> that</font>

229
00:07:39,180 --> 00:07:42,780
we wanna perform<font color="#E5E5E5"> is we're searching for</font>

230
00:07:40,380 --> 00:07:44,190
a sequence<font color="#E5E5E5"> of inputs</font><font color="#CCCCCC"> that minimize this</font>

231
00:07:42,780 --> 00:07:45,900
function<font color="#CCCCCC"> so a sequence of inputs to</font><font color="#E5E5E5"> the</font>

232
00:07:44,190 --> 00:07:48,020
program to put<font color="#E5E5E5"> the overflow source</font>

233
00:07:45,900 --> 00:07:51,390
<font color="#CCCCCC">adjacent to the overflow destination</font>

234
00:07:48,020 --> 00:07:53,849
okay there are a couple of restrictions

235
00:07:51,390 --> 00:07:55,320
for this particular for this<font color="#E5E5E5"> particular</font>

236
00:07:53,850 --> 00:07:57,630
talk and if you want to talk<font color="#CCCCCC"> about</font>

237
00:07:55,320 --> 00:07:58,680
<font color="#CCCCCC">alleviating these come see me after</font><font color="#E5E5E5"> so</font>

238
00:07:57,630 --> 00:08:00,090
we're first<font color="#E5E5E5"> of all we're gonna assume a</font>

239
00:07:58,680 --> 00:08:01,320
deterministic setting to<font color="#CCCCCC"> begin with the</font>

240
00:08:00,090 --> 00:08:02,460
alligators behavior itself must be

241
00:08:01,320 --> 00:08:03,420
<font color="#E5E5E5">deterministic that's not a huge</font>

242
00:08:02,460 --> 00:08:04,950
restriction because<font color="#E5E5E5"> there aren't too</font>

243
00:08:03,420 --> 00:08:07,800
many<font color="#E5E5E5"> alligators that use a non</font>

244
00:08:04,950 --> 00:08:09,270
determinism internally on purpose the

245
00:08:07,800 --> 00:08:11,160
attacker must be<font color="#E5E5E5"> able to set the heap</font>

246
00:08:09,270 --> 00:08:15,150
into<font color="#CCCCCC"> a known starting state or reset it</font>

247
00:08:11,160 --> 00:08:17,310
so<font color="#CCCCCC"> via killing the target or something</font>

248
00:08:15,150 --> 00:08:18,719
like<font color="#CCCCCC"> that and we</font><font color="#E5E5E5"> also assumed in this</font>

249
00:08:17,310 --> 00:08:21,210
particular case there's no<font color="#E5E5E5"> other actors</font>

250
00:08:18,720 --> 00:08:25,050
interacting the heap mmm<font color="#CCCCCC"> so there's no</font>

251
00:08:21,210 --> 00:08:26,520
<font color="#E5E5E5">other entity also triggering allocations</font>

252
00:08:25,050 --> 00:08:28,650
<font color="#E5E5E5">and freeze and we're also talking about</font>

253
00:08:26,520 --> 00:08:30,090
physical layout not logical layout<font color="#E5E5E5"> and</font>

254
00:08:28,650 --> 00:08:31,349
logical layout<font color="#E5E5E5"> would be relevant</font><font color="#CCCCCC"> we're</font>

255
00:08:30,090 --> 00:08:34,260
<font color="#E5E5E5">talking about say used after freeze in</font>

256
00:08:31,350 --> 00:08:35,940
<font color="#E5E5E5">the</font><font color="#CCCCCC"> surgeon okay so we need to solve</font>

257
00:08:34,260 --> 00:08:37,620
three things first of all<font color="#E5E5E5"> we need to</font>

258
00:08:35,940 --> 00:08:39,230
discover how<font color="#CCCCCC"> to interact</font><font color="#E5E5E5"> with the</font>

259
00:08:37,620 --> 00:08:41,179
<font color="#CCCCCC">allocator via the applications</font><font color="#E5E5E5"> API</font>

260
00:08:39,230 --> 00:08:43,370
because as I<font color="#E5E5E5"> said applications typically</font>

261
00:08:41,179 --> 00:08:45,189
don't allow you to<font color="#E5E5E5"> do that</font><font color="#CCCCCC"> on purpose</font><font color="#E5E5E5"> or</font>

262
00:08:43,370 --> 00:08:47,180
<font color="#E5E5E5">directly or an in a convenient fashion</font>

263
00:08:45,190 --> 00:08:50,000
we<font color="#E5E5E5"> want to automatically</font><font color="#CCCCCC"> discover how to</font>

264
00:08:47,180 --> 00:08:53,540
allocate interesting data<font color="#E5E5E5"> on the heap so</font>

265
00:08:50,000 --> 00:08:55,460
a corruption target<font color="#E5E5E5"> ideally and then we</font>

266
00:08:53,540 --> 00:08:57,620
need<font color="#E5E5E5"> to automatically figure out how to</font>

267
00:08:55,460 --> 00:09:00,050
place the<font color="#CCCCCC"> source buffer adjacent to the</font>

268
00:08:57,620 --> 00:09:01,810
thing we want<font color="#E5E5E5"> to corrupt using what we</font>

269
00:09:00,050 --> 00:09:03,949
discovered in<font color="#CCCCCC"> the first</font><font color="#E5E5E5"> two steps</font>

270
00:09:01,810 --> 00:09:05,930
<font color="#E5E5E5">already so there are a</font><font color="#CCCCCC"> few challenges</font>

271
00:09:03,950 --> 00:09:07,610
with<font color="#E5E5E5"> this obviously</font><font color="#CCCCCC"> first of</font><font color="#E5E5E5"> all</font>

272
00:09:05,930 --> 00:09:08,839
<font color="#E5E5E5">alligators don't provide an API which</font>

273
00:09:07,610 --> 00:09:10,610
<font color="#CCCCCC">allows you</font><font color="#E5E5E5"> to specify positioning you</font>

274
00:09:08,840 --> 00:09:11,840
can't say put this thing in Jason<font color="#E5E5E5"> to</font>

275
00:09:10,610 --> 00:09:13,220
that thing because<font color="#E5E5E5"> in the context</font><font color="#CCCCCC"> of the</font>

276
00:09:11,840 --> 00:09:14,080
normal<font color="#CCCCCC"> alligator</font><font color="#E5E5E5"> usage that makes no</font>

277
00:09:13,220 --> 00:09:16,250
sense

278
00:09:14,080 --> 00:09:18,530
alligators assemble<font color="#E5E5E5"> themselves are</font>

279
00:09:16,250 --> 00:09:19,850
<font color="#E5E5E5">designed to optimize different measures</font>

280
00:09:18,530 --> 00:09:22,670
of<font color="#CCCCCC"> success in other</font><font color="#E5E5E5"> words they use</font>

281
00:09:19,850 --> 00:09:24,380
vastly different data structures and

282
00:09:22,670 --> 00:09:26,360
algorithms internally<font color="#E5E5E5"> so if you have the</font>

283
00:09:24,380 --> 00:09:27,410
<font color="#E5E5E5">solution for one alligator</font><font color="#CCCCCC"> it's not</font>

284
00:09:26,360 --> 00:09:29,420
necessarily going to<font color="#E5E5E5"> work for</font><font color="#CCCCCC"> another</font>

285
00:09:27,410 --> 00:09:32,150
alligator applications themselves

286
00:09:29,420 --> 00:09:33,380
<font color="#E5E5E5">typically don't expose the direct API to</font>

287
00:09:32,150 --> 00:09:35,180
<font color="#E5E5E5">the alligator so you need to figure</font><font color="#CCCCCC"> out</font>

288
00:09:33,380 --> 00:09:37,630
how to<font color="#E5E5E5"> go</font><font color="#CCCCCC"> through</font><font color="#E5E5E5"> the applications API</font>

289
00:09:35,180 --> 00:09:40,069
to interact with<font color="#E5E5E5"> the alligator</font>

290
00:09:37,630 --> 00:09:41,660
<font color="#E5E5E5">interaction sequences which you can</font>

291
00:09:40,070 --> 00:09:42,950
discover<font color="#E5E5E5"> from the alligator or sorry</font>

292
00:09:41,660 --> 00:09:45,650
<font color="#E5E5E5">from the application typically have</font>

293
00:09:42,950 --> 00:09:46,970
noise in them so in some<font color="#E5E5E5"> situations you</font>

294
00:09:45,650 --> 00:09:48,860
get lucky<font color="#E5E5E5"> and</font><font color="#CCCCCC"> you can inadvertently</font>

295
00:09:46,970 --> 00:09:51,290
<font color="#CCCCCC">trigger like a single malloc or</font><font color="#E5E5E5"> a single</font>

296
00:09:48,860 --> 00:09:52,790
<font color="#E5E5E5">free via the applications API but</font>

297
00:09:51,290 --> 00:09:54,079
another<font color="#E5E5E5"> time what ends up</font><font color="#CCCCCC"> happening is</font>

298
00:09:52,790 --> 00:09:55,760
you<font color="#E5E5E5"> can trigger the applicate the</font>

299
00:09:54,080 --> 00:09:57,650
allocation you want to trigger and then

300
00:09:55,760 --> 00:10:00,680
<font color="#E5E5E5">you</font><font color="#CCCCCC"> also trigger like say 27 other</font>

301
00:09:57,650 --> 00:10:02,000
allocations<font color="#CCCCCC"> that may or may not mess</font>

302
00:10:00,680 --> 00:10:05,089
with<font color="#E5E5E5"> the heap state that you're working</font>

303
00:10:02,000 --> 00:10:07,190
<font color="#E5E5E5">with</font><font color="#CCCCCC"> and that finally the search space</font>

304
00:10:05,090 --> 00:10:08,750
<font color="#E5E5E5">if</font><font color="#CCCCCC"> you were to exhaustively process all</font>

305
00:10:07,190 --> 00:10:10,040
combinations<font color="#E5E5E5"> of interactions is</font>

306
00:10:08,750 --> 00:10:11,630
obviously astronomically large so we

307
00:10:10,040 --> 00:10:16,430
<font color="#E5E5E5">need to find some way</font><font color="#CCCCCC"> of dealing with</font>

308
00:10:11,630 --> 00:10:20,300
that<font color="#E5E5E5"> okay so as I mentioned</font>

309
00:10:16,430 --> 00:10:21,829
alligators<font color="#E5E5E5"> have vastly different design</font>

310
00:10:20,300 --> 00:10:25,130
strategies and they use vastly different

311
00:10:21,830 --> 00:10:26,390
data structures and algorithms<font color="#E5E5E5"> and there</font>

312
00:10:25,130 --> 00:10:27,650
are a<font color="#CCCCCC"> number of different design</font>

313
00:10:26,390 --> 00:10:29,960
decisions<font color="#CCCCCC"> that an alligator developer</font>

314
00:10:27,650 --> 00:10:31,790
can make which can make the process of

315
00:10:29,960 --> 00:10:35,240
laying<font color="#E5E5E5"> out a heap more or less difficult</font>

316
00:10:31,790 --> 00:10:37,250
<font color="#CCCCCC">so there</font><font color="#E5E5E5"> are a few</font><font color="#CCCCCC"> here which I've</font>

317
00:10:35,240 --> 00:10:38,990
listed<font color="#CCCCCC"> that are significant</font><font color="#E5E5E5"> some that</font>

318
00:10:37,250 --> 00:10:40,940
<font color="#E5E5E5">are less significant</font><font color="#CCCCCC"> I'm not going</font><font color="#E5E5E5"> to go</font>

319
00:10:38,990 --> 00:10:43,220
<font color="#E5E5E5">into any</font><font color="#CCCCCC"> of these except for</font><font color="#E5E5E5"> one because</font>

320
00:10:40,940 --> 00:10:45,530
<font color="#CCCCCC">it</font><font color="#E5E5E5"> is by far</font><font color="#CCCCCC"> the dominant factor in</font>

321
00:10:43,220 --> 00:10:47,720
determining<font color="#E5E5E5"> the difficulty of a problem</font>

322
00:10:45,530 --> 00:10:48,890
<font color="#E5E5E5">of this type</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> problem and that is</font>

323
00:10:47,720 --> 00:10:50,680
whether or<font color="#CCCCCC"> not an alligator</font><font color="#E5E5E5"> uses</font>

324
00:10:48,890 --> 00:10:51,730
segregated storage so

325
00:10:50,680 --> 00:10:54,130
if you're familiar with<font color="#E5E5E5"> allocator</font>

326
00:10:51,730 --> 00:10:55,630
<font color="#CCCCCC">designed then</font><font color="#E5E5E5"> you can switch off for the</font>

327
00:10:54,130 --> 00:10:59,500
<font color="#E5E5E5">next minute or two if you're not</font>

328
00:10:55,630 --> 00:11:02,350
segregated storage is a allocator policy

329
00:10:59,500 --> 00:11:03,940
where you<font color="#CCCCCC"> first of</font><font color="#E5E5E5"> all when you receive</font>

330
00:11:02,350 --> 00:11:06,279
an<font color="#E5E5E5"> allocation request for a particular</font>

331
00:11:03,940 --> 00:11:09,070
<font color="#CCCCCC">size you allocate say multiple pages and</font>

332
00:11:06,279 --> 00:11:11,770
then you subdivide those<font color="#CCCCCC"> pages into</font>

333
00:11:09,070 --> 00:11:13,690
<font color="#CCCCCC">chunks of the exact</font><font color="#E5E5E5"> same size and you</font>

334
00:11:11,770 --> 00:11:15,610
<font color="#E5E5E5">use those chunks to serve as future</font>

335
00:11:13,690 --> 00:11:18,760
requests<font color="#CCCCCC"> for the same size</font><font color="#E5E5E5"> and the key</font>

336
00:11:15,610 --> 00:11:21,580
point is these chunks are<font color="#E5E5E5"> never split</font>

337
00:11:18,760 --> 00:11:23,050
again<font color="#E5E5E5"> they're never internally coalesced</font>

338
00:11:21,580 --> 00:11:25,060
<font color="#E5E5E5">so they're never internally joined</font>

339
00:11:23,050 --> 00:11:26,709
together to<font color="#E5E5E5"> form a bigger chunk and</font>

340
00:11:25,060 --> 00:11:28,390
they're only<font color="#E5E5E5"> externally coalesced as a</font>

341
00:11:26,709 --> 00:11:31,390
whole so you can only ever free<font color="#E5E5E5"> all of</font>

342
00:11:28,390 --> 00:11:33,100
them at once<font color="#E5E5E5"> the key point here</font><font color="#CCCCCC"> for in</font>

343
00:11:31,390 --> 00:11:34,720
<font color="#E5E5E5">terms of</font><font color="#CCCCCC"> manipulating a heap state into</font>

344
00:11:33,100 --> 00:11:36,459
a desired<font color="#CCCCCC"> layout is that except for the</font>

345
00:11:34,720 --> 00:11:38,980
<font color="#E5E5E5">first and</font><font color="#CCCCCC"> the large</font><font color="#E5E5E5"> last chunks all</font>

346
00:11:36,459 --> 00:11:40,479
other chunks<font color="#E5E5E5"> in the in the run of pages</font>

347
00:11:38,980 --> 00:11:42,670
are adjacent to chunks of the same size

348
00:11:40,480 --> 00:11:45,550
so if you see here in<font color="#E5E5E5"> this</font><font color="#CCCCCC"> example we</font>

349
00:11:42,670 --> 00:11:47,260
<font color="#CCCCCC">have a whole bunch of chunks of</font><font color="#E5E5E5"> size 16</font>

350
00:11:45,550 --> 00:11:48,790
in segregated<font color="#E5E5E5"> storage and then a whole</font>

351
00:11:47,260 --> 00:11:50,560
<font color="#CCCCCC">bunch of</font><font color="#E5E5E5"> chunks in size 32</font><font color="#CCCCCC"> and</font>

352
00:11:48,790 --> 00:11:52,660
segregated storage and if we need to<font color="#CCCCCC"> get</font>

353
00:11:50,560 --> 00:11:56,140
<font color="#E5E5E5">a chunk of size 16 adjacent to a chunk</font>

354
00:11:52,660 --> 00:11:57,730
of size 32<font color="#CCCCCC"> it can</font><font color="#E5E5E5"> only be</font><font color="#CCCCCC"> the first and</font>

355
00:11:56,140 --> 00:12:00,490
<font color="#E5E5E5">last chunks here so we need to figure</font>

356
00:11:57,730 --> 00:12:03,279
out<font color="#CCCCCC"> how</font><font color="#E5E5E5"> to do layout manipulation at the</font>

357
00:12:00,490 --> 00:12:08,670
scope of the runs of pages rather than

358
00:12:03,279 --> 00:12:11,260
just the individual chunks themselves so

359
00:12:08,670 --> 00:12:13,750
this<font color="#E5E5E5"> is an example</font><font color="#CCCCCC"> of if we</font><font color="#E5E5E5"> take a</font>

360
00:12:11,260 --> 00:12:15,010
hundred<font color="#E5E5E5"> or so allocations and</font><font color="#CCCCCC"> freez</font><font color="#E5E5E5"> of</font>

361
00:12:13,750 --> 00:12:16,300
different<font color="#E5E5E5"> sizes so there are three</font>

362
00:12:15,010 --> 00:12:19,420
<font color="#CCCCCC">different sizes</font><font color="#E5E5E5"> being allocated and</font>

363
00:12:16,300 --> 00:12:22,870
freed here again<font color="#E5E5E5"> x-axis is time y-axis</font>

364
00:12:19,420 --> 00:12:24,490
is the the<font color="#E5E5E5"> address space</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the target</font>

365
00:12:22,870 --> 00:12:26,589
program and the height<font color="#E5E5E5"> of a rectangle</font>

366
00:12:24,490 --> 00:12:28,029
gives you the size of the chunk so you

367
00:12:26,589 --> 00:12:29,380
can see here is we<font color="#CCCCCC"> have</font><font color="#E5E5E5"> bigger and</font>

368
00:12:28,029 --> 00:12:31,420
smaller chunks interspersed with

369
00:12:29,380 --> 00:12:32,800
adjacent to<font color="#E5E5E5"> each other this is</font>

370
00:12:31,420 --> 00:12:33,969
non-segregated storage<font color="#E5E5E5"> so the</font>

371
00:12:32,800 --> 00:12:35,260
application<font color="#E5E5E5"> is putting chunks of</font>

372
00:12:33,970 --> 00:12:37,150
different sizes next to each<font color="#E5E5E5"> other and</font>

373
00:12:35,260 --> 00:12:38,650
if we need a chunk of the big size next

374
00:12:37,150 --> 00:12:40,810
<font color="#E5E5E5">to the smaller size everything</font><font color="#CCCCCC"> is fine</font>

375
00:12:38,650 --> 00:12:42,730
we can<font color="#CCCCCC"> do that however if we don't</font><font color="#E5E5E5"> take</font>

376
00:12:40,810 --> 00:12:44,290
<font color="#E5E5E5">that exact same sequence of interactions</font>

377
00:12:42,730 --> 00:12:46,300
<font color="#E5E5E5">and we replay it on top of an</font><font color="#CCCCCC"> alligator</font>

378
00:12:44,290 --> 00:12:48,490
<font color="#E5E5E5">with segregated storage what we see is</font>

379
00:12:46,300 --> 00:12:50,920
we<font color="#E5E5E5"> get three distinct three distinct</font>

380
00:12:48,490 --> 00:12:52,630
mapped locations in memory<font color="#E5E5E5"> all of which</font>

381
00:12:50,920 --> 00:12:54,790
only<font color="#E5E5E5"> contain jumps of the same size</font>

382
00:12:52,630 --> 00:12:56,770
adjacent to each<font color="#E5E5E5"> other so now we have a</font>

383
00:12:54,790 --> 00:12:58,779
problem<font color="#E5E5E5"> if we need to get chunks of say</font>

384
00:12:56,770 --> 00:13:00,520
the<font color="#E5E5E5"> bottom size</font><font color="#CCCCCC"> X of chunks of the</font>

385
00:12:58,779 --> 00:13:02,360
bigger size we need<font color="#CCCCCC"> to fill all of that</font>

386
00:13:00,520 --> 00:13:04,129
space between<font color="#E5E5E5"> those two</font>

387
00:13:02,360 --> 00:13:07,100
areas and eventually we'll<font color="#E5E5E5"> get the</font>

388
00:13:04,129 --> 00:13:08,600
<font color="#E5E5E5">topmost chunk of the bottom size</font>

389
00:13:07,100 --> 00:13:10,879
allocated adjacent to the bottom<font color="#E5E5E5"> most</font>

390
00:13:08,600 --> 00:13:12,290
chunk of the the<font color="#E5E5E5"> middle size so</font>

391
00:13:10,879 --> 00:13:14,660
segregated storage is a pretty

392
00:13:12,290 --> 00:13:18,009
significant factor<font color="#CCCCCC"> in determining</font><font color="#E5E5E5"> the</font>

393
00:13:14,660 --> 00:13:22,368
difficulty of of these<font color="#E5E5E5"> types of problems</font>

394
00:13:18,009 --> 00:13:23,989
<font color="#E5E5E5">okay so as mentioned these three things</font>

395
00:13:22,369 --> 00:13:25,639
were usually performed manually so

396
00:13:23,989 --> 00:13:26,660
figuring out<font color="#E5E5E5"> how to allocate something</font>

397
00:13:25,639 --> 00:13:28,389
interesting<font color="#CCCCCC"> on the heap to corrupt</font>

398
00:13:26,660 --> 00:13:32,569
<font color="#E5E5E5">figuring out how to</font><font color="#CCCCCC"> interact with the</font>

399
00:13:28,389 --> 00:13:34,369
<font color="#E5E5E5">heap via the allocators API and then</font>

400
00:13:32,569 --> 00:13:35,868
given a<font color="#E5E5E5"> starting stage figure out how to</font>

401
00:13:34,369 --> 00:13:37,069
use the program's API to put the thing

402
00:13:35,869 --> 00:13:41,209
we want<font color="#E5E5E5"> to corrupt next to the thing</font>

403
00:13:37,069 --> 00:13:43,998
<font color="#CCCCCC">that</font><font color="#E5E5E5"> we can flow</font><font color="#CCCCCC"> out of so let's to</font>

404
00:13:41,209 --> 00:13:45,649
begin with assume that we<font color="#CCCCCC"> have a</font>

405
00:13:43,999 --> 00:13:47,230
solution for<font color="#E5E5E5"> the first two problems</font><font color="#CCCCCC"> and</font>

406
00:13:45,649 --> 00:13:49,730
we know how<font color="#E5E5E5"> to interact</font><font color="#CCCCCC"> with the heap</font>

407
00:13:47,230 --> 00:13:51,619
<font color="#CCCCCC">could we</font><font color="#E5E5E5"> design a search algorithm which</font>

408
00:13:49,730 --> 00:13:52,730
can<font color="#E5E5E5"> minimize the</font><font color="#CCCCCC"> distance between</font><font color="#E5E5E5"> a</font>

409
00:13:51,619 --> 00:13:53,779
source<font color="#E5E5E5"> and destination because if you</font>

410
00:13:52,730 --> 00:13:54,920
can't do<font color="#CCCCCC"> that</font><font color="#E5E5E5"> then there's no</font><font color="#CCCCCC"> point in</font>

411
00:13:53,779 --> 00:13:57,170
solving the first<font color="#E5E5E5"> two problems to begin</font>

412
00:13:54,920 --> 00:13:58,579
with<font color="#E5E5E5"> so ideally we'd like</font><font color="#CCCCCC"> the search</font>

413
00:13:57,170 --> 00:14:00,110
algorithm to black box we don't<font color="#E5E5E5"> have to</font>

414
00:13:58,579 --> 00:14:01,790
customize<font color="#CCCCCC"> it to the internals over a new</font>

415
00:14:00,110 --> 00:14:05,509
allocator we come across<font color="#CCCCCC"> or every new</font>

416
00:14:01,790 --> 00:14:09,799
<font color="#E5E5E5">version of an alligator</font><font color="#CCCCCC"> and we also</font>

417
00:14:05,509 --> 00:14:12,160
<font color="#E5E5E5">don't really want to be adding new</font><font color="#CCCCCC"> API</font>

418
00:14:09,799 --> 00:14:14,600
<font color="#CCCCCC">to the</font><font color="#E5E5E5"> alligator that</font><font color="#CCCCCC"> sort of thing so</font>

419
00:14:12,160 --> 00:14:17,089
<font color="#CCCCCC">ideally</font><font color="#E5E5E5"> what we want is</font><font color="#CCCCCC"> something which</font>

420
00:14:14,600 --> 00:14:18,860
only<font color="#E5E5E5"> observes the alligator and the</font>

421
00:14:17,089 --> 00:14:21,319
sense of return values<font color="#E5E5E5"> that comes from</font>

422
00:14:18,860 --> 00:14:23,179
<font color="#CCCCCC">malloc freak a lock</font><font color="#E5E5E5"> and realloc and then</font>

423
00:14:21,319 --> 00:14:24,889
<font color="#E5E5E5">OS generic things like say what pages</font>

424
00:14:23,179 --> 00:14:26,238
<font color="#E5E5E5">are mapped and that sort of thing</font>

425
00:14:24,889 --> 00:14:28,699
and if we can do<font color="#E5E5E5"> that then we</font><font color="#CCCCCC"> can work</font>

426
00:14:26,239 --> 00:14:30,799
with any alligator effectively the other

427
00:14:28,699 --> 00:14:32,719
design consideration is that's worth

428
00:14:30,799 --> 00:14:34,220
considering<font color="#CCCCCC"> is that random search</font><font color="#E5E5E5"> might</font>

429
00:14:32,720 --> 00:14:35,839
actually be feasible<font color="#E5E5E5"> so random search in</font>

430
00:14:34,220 --> 00:14:37,249
the sense in<font color="#E5E5E5"> the sense is you just have</font>

431
00:14:35,839 --> 00:14:39,049
a random<font color="#E5E5E5"> walk through the</font><font color="#CCCCCC"> solution space</font>

432
00:14:37,249 --> 00:14:40,759
<font color="#CCCCCC">you're not learning anything between</font>

433
00:14:39,049 --> 00:14:42,559
<font color="#E5E5E5">instances it's effectively a</font><font color="#CCCCCC"> brute-force</font>

434
00:14:40,759 --> 00:14:43,429
search and you remember a while<font color="#CCCCCC"> ago I</font>

435
00:14:42,559 --> 00:14:44,868
said that<font color="#CCCCCC"> the search space</font><font color="#E5E5E5"> is</font>

436
00:14:43,429 --> 00:14:46,339
<font color="#E5E5E5">astronomical well it turns out there's</font>

437
00:14:44,869 --> 00:14:48,169
actually<font color="#E5E5E5"> huge amount of symmetry in the</font>

438
00:14:46,339 --> 00:14:49,249
search space because we don't typically

439
00:14:48,169 --> 00:14:50,480
don't<font color="#E5E5E5"> care about the absolute</font>

440
00:14:49,249 --> 00:14:52,639
positioning of things we only care about

441
00:14:50,480 --> 00:14:54,110
the relative positioning of things<font color="#E5E5E5"> so if</font>

442
00:14:52,639 --> 00:14:55,850
we have a source and destination buffer

443
00:14:54,110 --> 00:14:57,169
we don't care where they're absolutely

444
00:14:55,850 --> 00:14:59,360
<font color="#E5E5E5">positioned in memory we just care</font><font color="#CCCCCC"> that</font>

445
00:14:57,169 --> 00:15:01,160
<font color="#E5E5E5">they're</font><font color="#CCCCCC"> adjacent to each other</font><font color="#E5E5E5"> similarly</font>

446
00:14:59,360 --> 00:15:02,749
if<font color="#E5E5E5"> we need</font><font color="#CCCCCC"> to create holes</font><font color="#E5E5E5"> in memory in</font>

447
00:15:01,160 --> 00:15:04,279
order<font color="#E5E5E5"> to capture noisy allocations we</font>

448
00:15:02,749 --> 00:15:06,199
don't care where those holes are

449
00:15:04,279 --> 00:15:07,939
specifically located<font color="#E5E5E5"> in memory we just</font>

450
00:15:06,199 --> 00:15:10,339
care<font color="#CCCCCC"> that they exist or not</font><font color="#E5E5E5"> so there is</font>

451
00:15:07,939 --> 00:15:11,990
a huge<font color="#E5E5E5"> amount of symmetry as I said in</font>

452
00:15:10,339 --> 00:15:14,170
the in in<font color="#E5E5E5"> this</font>

453
00:15:11,990 --> 00:15:17,810
<font color="#E5E5E5">in space for</font><font color="#CCCCCC"> this particular problem</font>

454
00:15:14,170 --> 00:15:20,029
okay so<font color="#CCCCCC"> next</font><font color="#E5E5E5"> few</font><font color="#CCCCCC"> slides I'm gonna</font><font color="#E5E5E5"> go</font>

455
00:15:17,810 --> 00:15:23,420
<font color="#CCCCCC">over what the search algorithm actually</font>

456
00:15:20,029 --> 00:15:25,700
<font color="#E5E5E5">looks like at a high level</font><font color="#CCCCCC"> for some</font>

457
00:15:23,420 --> 00:15:28,399
reason I thought<font color="#E5E5E5"> this would</font><font color="#CCCCCC"> be a great</font>

458
00:15:25,700 --> 00:15:29,320
way to<font color="#E5E5E5"> display the actual algorithm</font>

459
00:15:28,399 --> 00:15:31,550
itself<font color="#CCCCCC"> but I'll walk you through</font><font color="#E5E5E5"> it</font>

460
00:15:29,320 --> 00:15:33,649
effectively<font color="#E5E5E5"> the key point here is all</font>

461
00:15:31,550 --> 00:15:35,209
we're doing is<font color="#E5E5E5"> we</font><font color="#CCCCCC"> are randomly creating</font>

462
00:15:33,649 --> 00:15:37,430
<font color="#CCCCCC">instances and instances this</font><font color="#E5E5E5"> solution</font>

463
00:15:35,209 --> 00:15:39,890
<font color="#E5E5E5">we're then providing that solution to</font>

464
00:15:37,430 --> 00:15:41,180
the to the program and<font color="#E5E5E5"> we're</font><font color="#CCCCCC"> getting</font>

465
00:15:39,890 --> 00:15:43,250
back the distance between the<font color="#E5E5E5"> source and</font>

466
00:15:41,180 --> 00:15:45,140
the<font color="#E5E5E5"> destination if this if the distance</font>

467
00:15:43,250 --> 00:15:46,580
is<font color="#CCCCCC"> less than our previous best result</font><font color="#E5E5E5"> we</font>

468
00:15:45,140 --> 00:15:47,990
say<font color="#E5E5E5"> this is our new best result and we</font>

469
00:15:46,580 --> 00:15:52,670
move on<font color="#E5E5E5"> key point we're not learning</font>

470
00:15:47,990 --> 00:15:55,100
anything between solutions the construct

471
00:15:52,670 --> 00:15:58,120
instance function then is a again it's

472
00:15:55,100 --> 00:16:01,700
another<font color="#E5E5E5"> random function which constructs</font>

473
00:15:58,120 --> 00:16:03,320
<font color="#E5E5E5">solutions via randomly deciding on this</font>

474
00:16:01,700 --> 00:16:05,810
line here<font color="#CCCCCC"> how long the solution is going</font>

475
00:16:03,320 --> 00:16:08,230
<font color="#E5E5E5">to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> and then randomly deciding whether</font>

476
00:16:05,810 --> 00:16:11,029
it<font color="#E5E5E5"> wants to do an allocation or a free</font>

477
00:16:08,230 --> 00:16:13,700
until<font color="#E5E5E5"> it gets to the</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> end</font><font color="#CCCCCC"> of solution</font>

478
00:16:11,029 --> 00:16:15,290
construction then returns it again<font color="#E5E5E5"> key</font>

479
00:16:13,700 --> 00:16:17,290
point here everything in this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> purely</font>

480
00:16:15,290 --> 00:16:23,240
<font color="#E5E5E5">random we're learning nothing between</font>

481
00:16:17,290 --> 00:16:25,610
between solutions<font color="#E5E5E5"> okay so in order to</font>

482
00:16:23,240 --> 00:16:27,550
<font color="#E5E5E5">evaluate this</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> are well we did two</font>

483
00:16:25,610 --> 00:16:29,810
<font color="#CCCCCC">things the first is constructed a</font>

484
00:16:27,550 --> 00:16:31,099
collection of<font color="#E5E5E5"> synthetic benchmarks and</font>

485
00:16:29,810 --> 00:16:33,829
then later we're going<font color="#E5E5E5"> to talk about</font>

486
00:16:31,100 --> 00:16:35,839
doing<font color="#E5E5E5"> this on</font><font color="#CCCCCC"> real programs but just to</font>

487
00:16:33,829 --> 00:16:38,689
see if the<font color="#CCCCCC"> algorithm</font><font color="#E5E5E5"> itself so random</font>

488
00:16:35,839 --> 00:16:40,550
search applied to<font color="#CCCCCC"> mainstream allocators</font>

489
00:16:38,690 --> 00:16:42,529
can actually solve this positioning

490
00:16:40,550 --> 00:16:44,270
<font color="#CCCCCC">problem we generated a bunch</font><font color="#E5E5E5"> of</font>

491
00:16:42,529 --> 00:16:45,589
<font color="#E5E5E5">synthetic examples</font><font color="#CCCCCC"> so the problem we're</font>

492
00:16:44,270 --> 00:16:47,480
<font color="#E5E5E5">trying to solve here</font><font color="#CCCCCC"> is given a sore</font>

493
00:16:45,589 --> 00:16:50,420
<font color="#E5E5E5">spot for a size X and a destination</font>

494
00:16:47,480 --> 00:16:52,130
buffer size<font color="#CCCCCC"> why can we randomly generate</font>

495
00:16:50,420 --> 00:16:53,300
a sequence<font color="#CCCCCC"> of inputs the target program</font>

496
00:16:52,130 --> 00:16:56,689
which place the<font color="#E5E5E5"> source and destination</font>

497
00:16:53,300 --> 00:16:58,310
<font color="#E5E5E5">immediately adjacent to each other for</font>

498
00:16:56,690 --> 00:17:00,020
the source and<font color="#CCCCCC"> destination sizes</font><font color="#E5E5E5"> there</font>

499
00:16:58,310 --> 00:17:02,739
the<font color="#CCCCCC"> cross-product of these sizes here</font>

500
00:17:00,020 --> 00:17:05,569
and in order to<font color="#CCCCCC"> initialize the</font>

501
00:17:02,740 --> 00:17:07,309
<font color="#E5E5E5">application</font><font color="#CCCCCC"> into kind of</font><font color="#E5E5E5"> a realistic</font>

502
00:17:05,569 --> 00:17:11,619
<font color="#E5E5E5">starting stage we captured the starting</font>

503
00:17:07,309 --> 00:17:13,509
<font color="#E5E5E5">states of Ruby PHP and</font>

504
00:17:11,619 --> 00:17:16,779
<font color="#E5E5E5">the Python want two different</font><font color="#CCCCCC"> versions</font>

505
00:17:13,509 --> 00:17:19,120
<font color="#CCCCCC">of PHP so the final experimental I guess</font>

506
00:17:16,779 --> 00:17:21,789
configuration thing worth noting<font color="#E5E5E5"> is this</font>

507
00:17:19,119 --> 00:17:23,168
concept<font color="#E5E5E5"> of noise</font><font color="#CCCCCC"> so we are obviously</font>

508
00:17:21,789 --> 00:17:25,419
because these are synthetic experiments

509
00:17:23,169 --> 00:17:26,829
<font color="#E5E5E5">we're deciding what interactions are</font>

510
00:17:25,419 --> 00:17:29,830
available for<font color="#CCCCCC"> the search algorithm with</font>

511
00:17:26,829 --> 00:17:31,570
<font color="#CCCCCC">the</font><font color="#E5E5E5"> allocator and the easiest case is</font>

512
00:17:29,830 --> 00:17:32,918
<font color="#E5E5E5">obviously the search algorithm can</font>

513
00:17:31,570 --> 00:17:34,658
interact directly<font color="#E5E5E5"> with the allocators</font>

514
00:17:32,919 --> 00:17:36,039
<font color="#E5E5E5">api and it can trigger exactly what it</font>

515
00:17:34,659 --> 00:17:37,720
wants<font color="#CCCCCC"> it can free exactly</font><font color="#E5E5E5"> what at once</font>

516
00:17:36,039 --> 00:17:40,120
<font color="#E5E5E5">as I mentioned a lot of</font><font color="#CCCCCC"> the time in</font>

517
00:17:37,720 --> 00:17:42,429
reality<font color="#CCCCCC"> these</font><font color="#E5E5E5"> interaction sequences are</font>

518
00:17:40,120 --> 00:17:43,809
actually noisy<font color="#E5E5E5"> so what we're going to</font>

519
00:17:42,429 --> 00:17:45,639
see in the results in a<font color="#E5E5E5"> few minutes is</font>

520
00:17:43,809 --> 00:17:46,928
there are experiments<font color="#E5E5E5"> where there's no</font>

521
00:17:45,639 --> 00:17:48,699
noise there's experiment where there's

522
00:17:46,929 --> 00:17:50,499
one<font color="#E5E5E5"> noisy allocation there's experiments</font>

523
00:17:48,700 --> 00:17:52,389
<font color="#CCCCCC">where</font><font color="#E5E5E5"> therefore noisy allocations those</font>

524
00:17:50,499 --> 00:17:54,009
noisy allocations are simply extra

525
00:17:52,389 --> 00:17:55,840
allocations<font color="#CCCCCC"> that are added</font><font color="#E5E5E5"> into the</font>

526
00:17:54,009 --> 00:17:57,970
<font color="#CCCCCC">interaction sequences</font><font color="#E5E5E5"> so if when the</font>

527
00:17:55,840 --> 00:18:00,189
search interacts<font color="#E5E5E5"> that the allocator</font>

528
00:17:57,970 --> 00:18:03,700
can't interact<font color="#E5E5E5"> with</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> just kind of with</font>

529
00:18:00,190 --> 00:18:07,119
a single atomic allocation or<font color="#E5E5E5"> free okay</font>

530
00:18:03,700 --> 00:18:09,490
<font color="#E5E5E5">so we're going to go through here is the</font>

531
00:18:07,119 --> 00:18:11,470
solutions for running the search

532
00:18:09,490 --> 00:18:13,299
algorithm on DL malloc TC malloc and

533
00:18:11,470 --> 00:18:16,149
something called<font color="#CCCCCC"> AVR Lib C which is a</font>

534
00:18:13,299 --> 00:18:17,619
<font color="#E5E5E5">drop-in</font><font color="#CCCCCC"> Lipsy replacement for embedded</font>

535
00:18:16,149 --> 00:18:18,459
systems<font color="#E5E5E5"> there</font><font color="#CCCCCC"> are a couple of</font><font color="#E5E5E5"> things</font>

536
00:18:17,619 --> 00:18:19,959
worth explaining

537
00:18:18,460 --> 00:18:22,149
first of all<font color="#E5E5E5"> namely the headers on this</font>

538
00:18:19,960 --> 00:18:23,619
table<font color="#E5E5E5"> the</font><font color="#CCCCCC"> alligator's obviously the</font>

539
00:18:22,149 --> 00:18:25,090
<font color="#CCCCCC">allocator that the search algorithms</font>

540
00:18:23,619 --> 00:18:30,570
interacting<font color="#CCCCCC"> with the noise is the number</font>

541
00:18:25,090 --> 00:18:33,340
of noisy allocations<font color="#CCCCCC"> the</font><font color="#E5E5E5"> und and</font><font color="#CCCCCC"> OVF our</font>

542
00:18:30,570 --> 00:18:35,110
experiment<font color="#E5E5E5"> are the results for overflow</font>

543
00:18:33,340 --> 00:18:36,730
experiments<font color="#E5E5E5"> and under floor experiments</font>

544
00:18:35,110 --> 00:18:38,110
because<font color="#E5E5E5"> it turns out the one of those</font>

545
00:18:36,730 --> 00:18:40,570
cases tends to be<font color="#E5E5E5"> easier than</font><font color="#CCCCCC"> the other</font>

546
00:18:38,110 --> 00:18:43,209
for reasons<font color="#CCCCCC"> that</font><font color="#E5E5E5"> I'll go into</font><font color="#CCCCCC"> later an</font>

547
00:18:40,570 --> 00:18:44,049
optimal layout<font color="#E5E5E5"> is where the source and</font>

548
00:18:43,210 --> 00:18:46,539
<font color="#E5E5E5">destination replaced immediately</font>

549
00:18:44,049 --> 00:18:49,360
<font color="#CCCCCC">adjacent to each other</font><font color="#E5E5E5"> so that's these</font>

550
00:18:46,539 --> 00:18:50,860
two<font color="#CCCCCC"> columns</font><font color="#E5E5E5"> here these two columns</font><font color="#CCCCCC"> here</font>

551
00:18:49,360 --> 00:18:54,248
represent the<font color="#CCCCCC"> number of or the</font>

552
00:18:50,860 --> 00:18:55,689
percentage<font color="#CCCCCC"> of solutions where</font><font color="#E5E5E5"> the source</font>

553
00:18:54,249 --> 00:18:57,610
and<font color="#E5E5E5"> destination were within a page of</font>

554
00:18:55,690 --> 00:18:59,710
each other<font color="#CCCCCC"> so that's</font><font color="#E5E5E5"> also worth making</font>

555
00:18:57,610 --> 00:19:01,090
<font color="#E5E5E5">note of</font><font color="#CCCCCC"> because even if we can't</font><font color="#E5E5E5"> get the</font>

556
00:18:59,710 --> 00:19:02,259
source and destination immediately

557
00:19:01,090 --> 00:19:03,850
adjacent to<font color="#E5E5E5"> each other if we can get</font>

558
00:19:02,259 --> 00:19:05,139
them<font color="#E5E5E5"> within a page of each other we know</font>

559
00:19:03,850 --> 00:19:06,759
we at<font color="#E5E5E5"> least won't trigger a page fault</font>

560
00:19:05,139 --> 00:19:10,090
if<font color="#E5E5E5"> we trigger</font><font color="#CCCCCC"> the overflow at</font><font color="#E5E5E5"> the</font>

561
00:19:06,759 --> 00:19:12,669
underflow<font color="#CCCCCC"> and then finally the on the</font>

562
00:19:10,090 --> 00:19:14,499
average<font color="#CCCCCC"> underfloor error and average</font>

563
00:19:12,669 --> 00:19:15,759
overflow error<font color="#E5E5E5"> is a representation of</font>

564
00:19:14,499 --> 00:19:16,960
the<font color="#E5E5E5"> amount of</font><font color="#CCCCCC"> actual error for</font>

565
00:19:15,759 --> 00:19:19,990
situations where we didn't actually get

566
00:19:16,960 --> 00:19:22,389
the two things<font color="#CCCCCC"> adjacent</font><font color="#E5E5E5"> to each other so</font>

567
00:19:19,990 --> 00:19:24,669
what we did is for each combination of

568
00:19:22,389 --> 00:19:26,529
allocation<font color="#E5E5E5"> and destination size starting</font>

569
00:19:24,669 --> 00:19:27,999
state for the heap<font color="#E5E5E5"> and</font><font color="#CCCCCC"> no number of</font>

570
00:19:26,529 --> 00:19:30,549
noise we ran<font color="#E5E5E5"> five hundred thousand</font>

571
00:19:27,999 --> 00:19:32,379
instances<font color="#CCCCCC"> those regenerated</font><font color="#E5E5E5"> five hundred</font>

572
00:19:30,549 --> 00:19:34,149
<font color="#E5E5E5">thousand candidate solutions and these</font>

573
00:19:32,379 --> 00:19:37,269
the results<font color="#CCCCCC"> from those so we</font><font color="#E5E5E5"> can see is</font>

574
00:19:34,149 --> 00:19:40,059
<font color="#E5E5E5">for every are live C and D</font><font color="#CCCCCC"> L Malik which</font>

575
00:19:37,269 --> 00:19:42,190
are both which both don't use segregated

576
00:19:40,059 --> 00:19:45,190
storage we could solve<font color="#E5E5E5"> almost</font><font color="#CCCCCC"> all of the</font>

577
00:19:42,190 --> 00:19:49,899
instances<font color="#CCCCCC"> using random search</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> is</font>

578
00:19:45,190 --> 00:19:51,759
worth knowing<font color="#E5E5E5"> we then add TC Malik so TC</font>

579
00:19:49,899 --> 00:19:54,369
Malik is a segregated storage based

580
00:19:51,759 --> 00:19:56,019
<font color="#E5E5E5">allocator and what you can see is even</font>

581
00:19:54,369 --> 00:19:57,549
<font color="#CCCCCC">with no noise we first of all</font><font color="#E5E5E5"> we get a</font>

582
00:19:56,019 --> 00:19:59,220
drop in the<font color="#CCCCCC"> number of optimal solutions</font>

583
00:19:57,549 --> 00:20:02,559
achieved so we can see obviously that

584
00:19:59,220 --> 00:20:06,609
segregated<font color="#E5E5E5"> storage has this impact then</font>

585
00:20:02,559 --> 00:20:08,529
once we add noise<font color="#CCCCCC"> we can see here we get</font>

586
00:20:06,609 --> 00:20:10,330
a drop from<font color="#E5E5E5"> previously say</font><font color="#CCCCCC"> DL</font><font color="#E5E5E5"> Malik we</font>

587
00:20:08,529 --> 00:20:15,220
were<font color="#CCCCCC"> resolved in 97% of the instances</font>

588
00:20:10,330 --> 00:20:17,619
down to 22 in this case<font color="#E5E5E5"> and the others</font>

589
00:20:15,220 --> 00:20:20,080
are hovering<font color="#E5E5E5"> around</font><font color="#CCCCCC"> 50% so what this</font>

590
00:20:17,619 --> 00:20:21,699
<font color="#E5E5E5">means is this in up around 50% of the</font>

591
00:20:20,080 --> 00:20:23,289
solutions we're getting the source and

592
00:20:21,700 --> 00:20:27,220
<font color="#E5E5E5">destination immediately adjacent to each</font>

593
00:20:23,289 --> 00:20:29,529
other<font color="#CCCCCC"> but one thing worth noting is that</font>

594
00:20:27,220 --> 00:20:31,899
<font color="#E5E5E5">the average error is still quite</font><font color="#CCCCCC"> low so</font>

595
00:20:29,529 --> 00:20:35,470
the<font color="#E5E5E5"> average error here means is a</font>

596
00:20:31,899 --> 00:20:37,090
representation of for the thing for the

597
00:20:35,470 --> 00:20:39,249
solutions<font color="#E5E5E5"> that weren't optimal how close</font>

598
00:20:37,090 --> 00:20:41,949
they work together<font color="#E5E5E5"> so again we're still</font>

599
00:20:39,249 --> 00:20:44,169
it's still less<font color="#CCCCCC"> than say</font><font color="#E5E5E5"> one allocation</font>

600
00:20:41,950 --> 00:20:46,629
that we're off by<font color="#E5E5E5"> effectively and then</font>

601
00:20:44,169 --> 00:20:49,149
finally we add four noisy allocations

602
00:20:46,629 --> 00:20:51,759
and<font color="#E5E5E5"> we see that this that the results</font>

603
00:20:49,149 --> 00:20:53,949
drop again<font color="#E5E5E5"> so the takeaway from this</font>

604
00:20:51,759 --> 00:20:55,929
<font color="#E5E5E5">effectively is</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> if we have no noise</font>

605
00:20:53,950 --> 00:20:58,149
<font color="#E5E5E5">and cigarette and non-segregated storage</font>

606
00:20:55,929 --> 00:21:01,809
then random search works pretty<font color="#CCCCCC"> much</font>

607
00:20:58,149 --> 00:21:03,699
fine within less than<font color="#CCCCCC"> fifteen seconds</font>

608
00:21:01,809 --> 00:21:05,559
most<font color="#E5E5E5"> of these instances resolved as we</font>

609
00:21:03,700 --> 00:21:07,179
increase noise and as we add segregated

610
00:21:05,559 --> 00:21:09,158
storage random start starts to<font color="#E5E5E5"> struggle</font>

611
00:21:07,179 --> 00:21:11,070
a<font color="#E5E5E5"> bit but the average error is still</font>

612
00:21:09,159 --> 00:21:13,450
relatively<font color="#CCCCCC"> low so we're still getting</font>

613
00:21:11,070 --> 00:21:18,369
these source and destination<font color="#E5E5E5"> buffers</font>

614
00:21:13,450 --> 00:21:19,690
pretty close to each other<font color="#CCCCCC"> so the kind</font>

615
00:21:18,369 --> 00:21:21,249
of<font color="#E5E5E5"> takeaway from this</font><font color="#CCCCCC"> is that while the</font>

616
00:21:19,690 --> 00:21:22,809
random search approach<font color="#CCCCCC"> isn't perfect as</font>

617
00:21:21,249 --> 00:21:25,049
the problems get harder it<font color="#E5E5E5"> is good</font>

618
00:21:22,809 --> 00:21:26,918
enough<font color="#E5E5E5"> that</font><font color="#CCCCCC"> it was worth our while</font>

619
00:21:25,049 --> 00:21:28,269
<font color="#CCCCCC">implementing a</font><font color="#E5E5E5"> real-world system and</font>

620
00:21:26,919 --> 00:21:30,759
actually<font color="#CCCCCC"> trying</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> apply this to real</font>

621
00:21:28,269 --> 00:21:35,109
bugs<font color="#E5E5E5"> okay</font>

622
00:21:30,759 --> 00:21:36,369
so the random<font color="#CCCCCC"> search</font><font color="#E5E5E5"> like I said looks</font>

623
00:21:35,109 --> 00:21:37,840
promising if we won't actually do this

624
00:21:36,369 --> 00:21:38,399
on<font color="#CCCCCC"> a real target we need a few</font><font color="#E5E5E5"> different</font>

625
00:21:37,840 --> 00:21:41,010
<font color="#CCCCCC">things we need</font><font color="#E5E5E5"> to</font>

626
00:21:38,400 --> 00:21:42,780
figure out<font color="#E5E5E5"> how to trigger different</font>

627
00:21:41,010 --> 00:21:45,240
<font color="#E5E5E5">alligator interaction sequences via the</font>

628
00:21:42,780 --> 00:21:47,670
<font color="#E5E5E5">targets API we need some way</font><font color="#CCCCCC"> to discover</font>

629
00:21:45,240 --> 00:21:48,900
<font color="#E5E5E5">how</font><font color="#CCCCCC"> to allocate</font><font color="#E5E5E5"> interesting target data</font>

630
00:21:47,670 --> 00:21:50,370
on the heap<font color="#E5E5E5"> and we need an</font>

631
00:21:48,900 --> 00:21:54,870
implementation<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the search</font><font color="#E5E5E5"> for that</font>

632
00:21:50,370 --> 00:21:57,689
<font color="#E5E5E5">real program so for this I decided to</font>

633
00:21:54,870 --> 00:21:59,790
use<font color="#E5E5E5"> PHP</font><font color="#CCCCCC"> as the</font><font color="#E5E5E5"> evaluation system so PHP</font>

634
00:21:57,690 --> 00:22:02,190
is pretty large<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> fairly modern</font><font color="#CCCCCC"> as</font>

635
00:21:59,790 --> 00:22:03,690
<font color="#E5E5E5">written in C it is a non-trivial</font>

636
00:22:02,190 --> 00:22:05,040
interface for interacting<font color="#E5E5E5"> with its heap</font>

637
00:22:03,690 --> 00:22:07,410
in other words programs written<font color="#E5E5E5"> in PHP</font>

638
00:22:05,040 --> 00:22:09,810
<font color="#E5E5E5">and what our tool is</font><font color="#CCCCCC"> going to be doing</font>

639
00:22:07,410 --> 00:22:12,720
is effectively writing PHP programs that

640
00:22:09,810 --> 00:22:14,190
manipulate<font color="#E5E5E5"> target</font><font color="#CCCCCC"> State in other words</font>

641
00:22:12,720 --> 00:22:15,510
the PHP<font color="#CCCCCC"> allocator and then trigger some</font>

642
00:22:14,190 --> 00:22:17,370
vulnerability and when the vulnerability

643
00:22:15,510 --> 00:22:19,170
<font color="#E5E5E5">is triggered its goal is going to be to</font>

644
00:22:17,370 --> 00:22:20,520
put the source and destination adjacent

645
00:22:19,170 --> 00:22:23,070
to each<font color="#CCCCCC"> other</font><font color="#E5E5E5"> such</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> the destination</font>

646
00:22:20,520 --> 00:22:24,629
<font color="#CCCCCC">is corrupted so the system</font><font color="#E5E5E5"> itself looks</font>

647
00:22:23,070 --> 00:22:26,159
something like this<font color="#E5E5E5"> so we have three</font>

648
00:22:24,630 --> 00:22:27,360
distinct phases we have interaction

649
00:22:26,160 --> 00:22:28,770
<font color="#E5E5E5">sequence discovery where we try to</font>

650
00:22:27,360 --> 00:22:31,139
<font color="#CCCCCC">figure out how</font><font color="#E5E5E5"> to interact with the</font>

651
00:22:28,770 --> 00:22:32,550
<font color="#E5E5E5">programs heap we have corruption target</font>

652
00:22:31,140 --> 00:22:33,750
discovery where we try<font color="#E5E5E5"> and automatically</font>

653
00:22:32,550 --> 00:22:35,129
figure out something interesting<font color="#E5E5E5"> to</font>

654
00:22:33,750 --> 00:22:36,720
corrupt<font color="#E5E5E5"> and then we have a vulnerability</font>

655
00:22:35,130 --> 00:22:38,580
<font color="#E5E5E5">template which kind of describes</font><font color="#CCCCCC"> how to</font>

656
00:22:36,720 --> 00:22:40,260
<font color="#E5E5E5">put these two things together in the</font>

657
00:22:38,580 --> 00:22:43,669
context of<font color="#E5E5E5"> a random search to produce</font>

658
00:22:40,260 --> 00:22:48,000
what we<font color="#CCCCCC"> are calling a primitive skeleton</font>

659
00:22:43,670 --> 00:22:49,440
<font color="#CCCCCC">good ok so those of</font><font color="#E5E5E5"> you that are</font>

660
00:22:48,000 --> 00:22:52,650
<font color="#CCCCCC">familiar with like</font><font color="#E5E5E5"> s exploitation</font>

661
00:22:49,440 --> 00:22:55,050
terminology<font color="#CCCCCC"> primitives</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> a fairly</font>

662
00:22:52,650 --> 00:22:57,810
<font color="#E5E5E5">well-known thing</font><font color="#CCCCCC"> the skeleton in this</font>

663
00:22:55,050 --> 00:22:59,760
case is worth clarifying though so the

664
00:22:57,810 --> 00:23:01,260
output of the system<font color="#E5E5E5"> is a it's a PHP</font>

665
00:22:59,760 --> 00:23:02,910
program which guarantees<font color="#CCCCCC"> the relative</font>

666
00:23:01,260 --> 00:23:03,900
positioning of the source of<font color="#E5E5E5"> the</font>

667
00:23:02,910 --> 00:23:06,360
<font color="#E5E5E5">overflow of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> underflow and the</font>

668
00:23:03,900 --> 00:23:07,470
destination<font color="#E5E5E5"> it doesn't however guarantee</font>

669
00:23:06,360 --> 00:23:09,780
that<font color="#E5E5E5"> the</font><font color="#CCCCCC"> vulnerability will actually</font>

670
00:23:07,470 --> 00:23:11,100
corrupt the destination<font color="#E5E5E5"> because</font><font color="#CCCCCC"> it</font>

671
00:23:09,780 --> 00:23:12,210
doesn't reason about the vulnerability

672
00:23:11,100 --> 00:23:14,040
itself the<font color="#CCCCCC"> only reasons</font><font color="#E5E5E5"> about</font>

673
00:23:12,210 --> 00:23:16,350
positioning<font color="#E5E5E5"> so it's up</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the user</font><font color="#CCCCCC"> to</font>

674
00:23:14,040 --> 00:23:19,050
ensure that<font color="#CCCCCC"> if we're saying</font><font color="#E5E5E5"> or if the</font>

675
00:23:16,350 --> 00:23:20,399
system says I can get you this source

676
00:23:19,050 --> 00:23:22,470
buffer within<font color="#CCCCCC"> 8 bytes of this</font>

677
00:23:20,400 --> 00:23:23,880
destination buffer<font color="#E5E5E5"> you as the exploit</font>

678
00:23:22,470 --> 00:23:26,400
developer need to make<font color="#CCCCCC"> sure</font><font color="#E5E5E5"> that the</font>

679
00:23:23,880 --> 00:23:28,650
vulnerability<font color="#E5E5E5"> will actually corrupt</font><font color="#CCCCCC"> 8</font>

680
00:23:26,400 --> 00:23:29,790
bytes and then corrupt the target<font color="#E5E5E5"> and</font>

681
00:23:28,650 --> 00:23:31,860
then finally it doesn't discover how to

682
00:23:29,790 --> 00:23:34,020
use the corrupt data<font color="#E5E5E5"> so it will</font>

683
00:23:31,860 --> 00:23:36,270
<font color="#E5E5E5">guarantee positioning and then if you</font>

684
00:23:34,020 --> 00:23:38,370
ensure that<font color="#E5E5E5"> the vulnerability actually</font>

685
00:23:36,270 --> 00:23:40,200
performs a correct corruption it will

686
00:23:38,370 --> 00:23:41,729
guarantee<font color="#CCCCCC"> that you get the destination</font>

687
00:23:40,200 --> 00:23:42,900
corrupted<font color="#CCCCCC"> whether it ends up to you is</font>

688
00:23:41,730 --> 00:23:44,670
the end<font color="#E5E5E5"> user to figure out how to use</font>

689
00:23:42,900 --> 00:23:48,540
<font color="#CCCCCC">that corrupted data</font><font color="#E5E5E5"> so these are kind of</font>

690
00:23:44,670 --> 00:23:49,740
<font color="#E5E5E5">like a future work</font><font color="#CCCCCC"> ok so what we</font><font color="#E5E5E5"> need</font><font color="#CCCCCC"> to</font>

691
00:23:48,540 --> 00:23:51,030
do is we need<font color="#E5E5E5"> to</font><font color="#CCCCCC"> figure out how do we</font>

692
00:23:49,740 --> 00:23:52,740
actually

693
00:23:51,030 --> 00:23:55,800
programmatically interact with the<font color="#E5E5E5"> heap</font>

694
00:23:52,740 --> 00:23:57,900
that's being used<font color="#E5E5E5"> by PHP</font><font color="#CCCCCC"> via the API</font>

695
00:23:55,800 --> 00:23:59,610
presented by PHP<font color="#E5E5E5"> which is you know PHP</font>

696
00:23:57,900 --> 00:24:01,110
programs<font color="#E5E5E5"> so what we want to do is we</font>

697
00:23:59,610 --> 00:24:03,030
want to synthesize fragments of PHP code

698
00:24:01,110 --> 00:24:07,379
<font color="#E5E5E5">the trigger unique interaction sequences</font>

699
00:24:03,030 --> 00:24:09,600
the<font color="#E5E5E5"> allocator</font><font color="#CCCCCC"> this is based on</font><font color="#E5E5E5"> work I</font>

700
00:24:07,380 --> 00:24:10,800
presented<font color="#E5E5E5"> a</font><font color="#CCCCCC"> few years ago</font><font color="#E5E5E5"> as infiltrate</font>

701
00:24:09,600 --> 00:24:12,000
what we're effectively<font color="#E5E5E5"> going to do is</font>

702
00:24:10,800 --> 00:24:13,980
we're<font color="#E5E5E5"> going to take all of PHP</font>

703
00:24:12,000 --> 00:24:15,630
regression tests and we're going to

704
00:24:13,980 --> 00:24:18,330
parse them<font color="#E5E5E5"> down into minimal fragments</font>

705
00:24:15,630 --> 00:24:22,080
and then for each<font color="#CCCCCC"> of</font><font color="#E5E5E5"> those fragments</font>

706
00:24:18,330 --> 00:24:23,760
<font color="#CCCCCC">we're going to record the interactions</font>

707
00:24:22,080 --> 00:24:26,970
that that<font color="#E5E5E5"> fragment triggers with the</font>

708
00:24:23,760 --> 00:24:28,080
with the allocator<font color="#CCCCCC"> and then we're</font><font color="#E5E5E5"> going</font>

709
00:24:26,970 --> 00:24:29,730
to start fuzzing the fragments

710
00:24:28,080 --> 00:24:31,679
recombining them to build bigger<font color="#CCCCCC"> and</font>

711
00:24:29,730 --> 00:24:33,840
more complex chunks of PHP which have

712
00:24:31,680 --> 00:24:36,060
<font color="#E5E5E5">unique interactions with the with the</font>

713
00:24:33,840 --> 00:24:38,939
<font color="#CCCCCC">alligator so effectively what we're</font>

714
00:24:36,060 --> 00:24:40,950
doing is we're closing but with a minor

715
00:24:38,940 --> 00:24:42,810
twist so normally when you're fuzzing

716
00:24:40,950 --> 00:24:45,240
say fragments of PHP or JavaScript or

717
00:24:42,810 --> 00:24:47,909
whatever you're using values that you're

718
00:24:45,240 --> 00:24:50,580
<font color="#E5E5E5">hoping</font><font color="#CCCCCC"> to hit edge cases</font><font color="#E5E5E5"> right so 2</font><font color="#CCCCCC"> -</font><font color="#E5E5E5"> 32</font>

719
00:24:47,910 --> 00:24:51,780
<font color="#CCCCCC">- 1 0 or so on and</font><font color="#E5E5E5"> so forth in this case</font>

720
00:24:50,580 --> 00:24:54,300
what we're going<font color="#CCCCCC"> to do is we're going to</font>

721
00:24:51,780 --> 00:24:56,040
replace<font color="#E5E5E5"> integer values and strings with</font>

722
00:24:54,300 --> 00:24:58,320
lengths<font color="#E5E5E5"> that we haven't seen</font><font color="#CCCCCC"> before in</font>

723
00:24:56,040 --> 00:25:00,090
<font color="#E5E5E5">terms of an allocation size so if we</font>

724
00:24:58,320 --> 00:25:01,500
<font color="#E5E5E5">haven't seen an allocation of size 256</font>

725
00:25:00,090 --> 00:25:04,470
then we're gonna<font color="#E5E5E5"> start spraying the</font>

726
00:25:01,500 --> 00:25:06,270
value 256<font color="#CCCCCC"> in two different chunks of PHP</font>

727
00:25:04,470 --> 00:25:08,910
code and hope that it results in an

728
00:25:06,270 --> 00:25:10,650
allocation<font color="#E5E5E5"> of that size</font><font color="#CCCCCC"> secondly our</font>

729
00:25:08,910 --> 00:25:12,030
<font color="#E5E5E5">measure of fitness isn't based on code</font>

730
00:25:10,650 --> 00:25:13,410
coverage because we don't care about

731
00:25:12,030 --> 00:25:17,250
<font color="#CCCCCC">it's based on</font><font color="#E5E5E5"> whether or not we trigger</font>

732
00:25:13,410 --> 00:25:19,530
a new<font color="#E5E5E5"> alligator interaction</font><font color="#CCCCCC"> if by chance</font>

733
00:25:17,250 --> 00:25:22,170
we find a bug and<font color="#E5E5E5"> we</font><font color="#CCCCCC"> actually cause the</font>

734
00:25:19,530 --> 00:25:24,450
alligator to crash we throw that<font color="#CCCCCC"> away</font>

735
00:25:22,170 --> 00:25:26,490
because<font color="#E5E5E5"> we don't want that to</font><font color="#CCCCCC"> happen we</font>

736
00:25:24,450 --> 00:25:29,190
<font color="#E5E5E5">want to find new alligator interactions</font>

737
00:25:26,490 --> 00:25:32,340
<font color="#CCCCCC">at</font><font color="#E5E5E5"> the sequences and</font><font color="#CCCCCC"> then we favor the</font>

738
00:25:29,190 --> 00:25:35,490
shortest least<font color="#CCCCCC"> complex complex fragments</font>

739
00:25:32,340 --> 00:25:37,679
during this<font color="#E5E5E5"> fuzzing so if we take this</font>

740
00:25:35,490 --> 00:25:40,770
is a test from<font color="#E5E5E5"> PHP we take this to begin</font>

741
00:25:37,680 --> 00:25:43,080
<font color="#E5E5E5">with and we break it</font><font color="#CCCCCC"> down</font><font color="#E5E5E5"> into the</font>

742
00:25:40,770 --> 00:25:44,760
function calls contained within it<font color="#E5E5E5"> so</font>

743
00:25:43,080 --> 00:25:46,980
each of those function calls takes a

744
00:25:44,760 --> 00:25:49,110
number<font color="#CCCCCC"> of</font><font color="#E5E5E5"> arguments</font><font color="#CCCCCC"> and we then abstract</font>

745
00:25:46,980 --> 00:25:50,400
<font color="#E5E5E5">that slightly further up to something</font>

746
00:25:49,110 --> 00:25:51,990
<font color="#CCCCCC">that</font><font color="#E5E5E5"> looks like this so</font><font color="#CCCCCC"> we break</font><font color="#E5E5E5"> it down</font>

747
00:25:50,400 --> 00:25:54,030
<font color="#E5E5E5">into</font><font color="#CCCCCC"> we have the function calls and</font><font color="#E5E5E5"> we</font>

748
00:25:51,990 --> 00:25:55,920
have<font color="#CCCCCC"> the Associated</font><font color="#E5E5E5"> types of the</font>

749
00:25:54,030 --> 00:25:57,360
<font color="#E5E5E5">arguments that it took then we pass this</font>

750
00:25:55,920 --> 00:25:59,760
into our fuzzer and what the fuzzer does

751
00:25:57,360 --> 00:26:01,199
is it randomly select one<font color="#CCCCCC"> of these it</font>

752
00:25:59,760 --> 00:26:02,080
<font color="#CCCCCC">looks at its argument types that are</font>

753
00:26:01,200 --> 00:26:04,059
<font color="#E5E5E5">randomly selects of</font>

754
00:26:02,080 --> 00:26:05,590
you for those argument types so<font color="#E5E5E5"> you end</font>

755
00:26:04,059 --> 00:26:07,539
up<font color="#CCCCCC"> getting something at</font><font color="#E5E5E5"> this so here say</font>

756
00:26:05,590 --> 00:26:08,918
we<font color="#E5E5E5"> pick the image create true color we</font>

757
00:26:07,539 --> 00:26:11,500
know it takes<font color="#E5E5E5"> two integer arguments and</font>

758
00:26:08,919 --> 00:26:13,299
then we start fuzzing<font color="#CCCCCC"> the final argument</font>

759
00:26:11,500 --> 00:26:16,299
<font color="#CCCCCC">to find new interaction sequences or</font>

760
00:26:13,299 --> 00:26:17,830
similarly if we have<font color="#E5E5E5"> this image</font>

761
00:26:16,299 --> 00:26:19,600
convolution function we can<font color="#CCCCCC"> see it can</font>

762
00:26:17,830 --> 00:26:20,769
take<font color="#CCCCCC"> different argument combinations and</font>

763
00:26:19,600 --> 00:26:22,240
effectively all we're doing is<font color="#E5E5E5"> we're</font>

764
00:26:20,769 --> 00:26:24,029
<font color="#CCCCCC">taking little fragments of PHP we're</font>

765
00:26:22,240 --> 00:26:25,690
recombining them and then we're using

766
00:26:24,029 --> 00:26:27,700
instrumentation in order to determine

767
00:26:25,690 --> 00:26:32,289
what<font color="#E5E5E5"> type of allocation sequences they</font>

768
00:26:27,700 --> 00:26:33,580
trigger in<font color="#E5E5E5"> the allocator itself so PHP</font>

769
00:26:32,289 --> 00:26:35,139
comes<font color="#E5E5E5"> with about twelve thousand tests</font>

770
00:26:33,580 --> 00:26:36,549
from<font color="#E5E5E5"> those twelve thousand tests we can</font>

771
00:26:35,139 --> 00:26:38,370
<font color="#E5E5E5">get say</font><font color="#CCCCCC"> three hundred</font><font color="#E5E5E5"> standalone</font>

772
00:26:36,549 --> 00:26:41,500
fragments which are like<font color="#E5E5E5"> these</font>

773
00:26:38,370 --> 00:26:43,870
individual function calls<font color="#E5E5E5"> and then</font>

774
00:26:41,500 --> 00:26:45,190
fuzzing those for like<font color="#CCCCCC"> fifteen</font><font color="#E5E5E5"> twenty</font>

775
00:26:43,870 --> 00:26:46,268
<font color="#CCCCCC">minutes you</font><font color="#E5E5E5"> end up with tens of</font>

776
00:26:45,190 --> 00:26:48,220
<font color="#E5E5E5">thousands of different alligator</font>

777
00:26:46,269 --> 00:26:49,600
interactions<font color="#E5E5E5"> that you can trigger so the</font>

778
00:26:48,220 --> 00:26:53,190
output of<font color="#E5E5E5"> this is effectively we now</font>

779
00:26:49,600 --> 00:26:55,959
know how<font color="#E5E5E5"> to interact with PHP s</font>

780
00:26:53,190 --> 00:27:01,360
<font color="#E5E5E5">alligator using its API</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> what we</font>

781
00:26:55,960 --> 00:27:03,909
wanted<font color="#E5E5E5"> and the the search now instead</font><font color="#CCCCCC"> of</font>

782
00:27:01,360 --> 00:27:05,529
say being act like an a lock free level

783
00:27:03,909 --> 00:27:07,210
what it does when it constructs

784
00:27:05,529 --> 00:27:09,159
instances is<font color="#E5E5E5"> it pieces</font><font color="#CCCCCC"> together these</font>

785
00:27:07,210 --> 00:27:10,899
fragments of PHP<font color="#CCCCCC"> code in order</font><font color="#E5E5E5"> to</font>

786
00:27:09,159 --> 00:27:13,269
generate a<font color="#CCCCCC"> sequence of</font><font color="#E5E5E5"> interactions at</font>

787
00:27:10,899 --> 00:27:15,939
the<font color="#E5E5E5"> alligator and the search is now a</font>

788
00:27:13,269 --> 00:27:19,149
search over<font color="#E5E5E5"> the space of PHP programs</font>

789
00:27:15,940 --> 00:27:20,110
for a program that<font color="#CCCCCC"> minimized</font><font color="#E5E5E5"> the</font>

790
00:27:19,149 --> 00:27:22,959
<font color="#E5E5E5">distance between the source and</font>

791
00:27:20,110 --> 00:27:25,330
destination<font color="#CCCCCC"> okay so that was the</font><font color="#E5E5E5"> first</font>

792
00:27:22,960 --> 00:27:27,570
step the second<font color="#CCCCCC"> step which we could</font>

793
00:27:25,330 --> 00:27:29,678
<font color="#CCCCCC">optionally automate we don't have to is</font>

794
00:27:27,570 --> 00:27:31,990
finding interesting corruption targets

795
00:27:29,679 --> 00:27:33,730
so sometimes the exploit developer

796
00:27:31,990 --> 00:27:34,990
themselves will<font color="#E5E5E5"> already</font><font color="#CCCCCC"> know this</font><font color="#E5E5E5"> is the</font>

797
00:27:33,730 --> 00:27:37,330
thing<font color="#CCCCCC"> I want to corrupt therefore they</font>

798
00:27:34,990 --> 00:27:38,409
know how to<font color="#CCCCCC"> allocate it but that for the</font>

799
00:27:37,330 --> 00:27:40,750
sake<font color="#CCCCCC"> of adding a</font><font color="#E5E5E5"> little more automation</font>

800
00:27:38,409 --> 00:27:42,429
we can also try and<font color="#E5E5E5"> figure out what are</font>

801
00:27:40,750 --> 00:27:45,100
interesting<font color="#E5E5E5"> things to corrupt</font><font color="#CCCCCC"> on the</font>

802
00:27:42,429 --> 00:27:47,080
heap<font color="#E5E5E5"> and how do we allocate them so</font>

803
00:27:45,100 --> 00:27:48,639
there<font color="#CCCCCC"> are programs specific things</font><font color="#E5E5E5"> so</font>

804
00:27:47,080 --> 00:27:49,779
you could like<font color="#E5E5E5"> permission bits and that</font>

805
00:27:48,639 --> 00:27:52,059
sort of thing but in our case we're

806
00:27:49,779 --> 00:27:53,350
going to<font color="#E5E5E5"> focus on our pointers so we</font>

807
00:27:52,059 --> 00:27:57,779
want to do is we want<font color="#E5E5E5"> to have another</font>

808
00:27:53,350 --> 00:28:00,850
search which figures<font color="#E5E5E5"> out how to allocate</font>

809
00:27:57,779 --> 00:28:02,950
<font color="#E5E5E5">pointers on the heap which can then be</font>

810
00:28:00,850 --> 00:28:06,039
<font color="#CCCCCC">used as part</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> our positioning problem</font>

811
00:28:02,950 --> 00:28:09,070
in order<font color="#CCCCCC"> to say build a read or write</font>

812
00:28:06,039 --> 00:28:12,760
primitive<font color="#E5E5E5"> so as</font><font color="#CCCCCC"> before we take the</font>

813
00:28:09,070 --> 00:28:14,389
fragments of PHP as input<font color="#E5E5E5"> and we execute</font>

814
00:28:12,760 --> 00:28:18,140
each of them in<font color="#CCCCCC"> isolation</font>

815
00:28:14,390 --> 00:28:19,910
and after the fragments<font color="#E5E5E5"> are as the</font>

816
00:28:18,140 --> 00:28:22,190
fragment<font color="#E5E5E5"> is executing we record every</font>

817
00:28:19,910 --> 00:28:23,930
dynamically allocated object then when

818
00:28:22,190 --> 00:28:25,700
the fragment terminates we record the

819
00:28:23,930 --> 00:28:29,150
objects that<font color="#E5E5E5"> are still live and we</font>

820
00:28:25,700 --> 00:28:30,470
search or the<font color="#E5E5E5"> actual memory used by that</font>

821
00:28:29,150 --> 00:28:33,110
object looking for things<font color="#E5E5E5"> that look</font><font color="#CCCCCC"> like</font>

822
00:28:30,470 --> 00:28:35,210
pointers which we can do based<font color="#E5E5E5"> on</font>

823
00:28:33,110 --> 00:28:39,770
heuristics so<font color="#CCCCCC"> their alignment the value</font>

824
00:28:35,210 --> 00:28:41,210
they have the mapped address space<font color="#CCCCCC"> to</font>

825
00:28:39,770 --> 00:28:44,060
<font color="#E5E5E5">the target process that</font><font color="#CCCCCC"> sort of</font><font color="#E5E5E5"> thing</font><font color="#CCCCCC"> so</font>

826
00:28:41,210 --> 00:28:45,530
<font color="#CCCCCC">that this is</font><font color="#E5E5E5"> pretty straightforward so</font>

827
00:28:44,060 --> 00:28:47,899
at this point<font color="#E5E5E5"> what</font><font color="#CCCCCC"> we have is we have</font>

828
00:28:45,530 --> 00:28:50,180
<font color="#E5E5E5">something</font><font color="#CCCCCC"> that you can construct</font><font color="#E5E5E5"> PHP</font>

829
00:28:47,900 --> 00:28:52,990
programs which randomly manipulate the

830
00:28:50,180 --> 00:28:56,380
heap<font color="#E5E5E5"> we have something which can tell us</font>

831
00:28:52,990 --> 00:28:59,240
what fragments of PHP code will allocate

832
00:28:56,380 --> 00:29:00,530
interesting targets on the heap<font color="#E5E5E5"> and what</font>

833
00:28:59,240 --> 00:29:01,760
we want to<font color="#E5E5E5"> do now</font><font color="#CCCCCC"> is we want</font><font color="#E5E5E5"> to put</font>

834
00:29:00,530 --> 00:29:02,750
<font color="#E5E5E5">these things together to perform the</font>

835
00:29:01,760 --> 00:29:06,680
<font color="#E5E5E5">actual search itself</font>

836
00:29:02,750 --> 00:29:07,610
so each vulnerability we come across<font color="#E5E5E5"> is</font>

837
00:29:06,680 --> 00:29:08,900
obviously going to have<font color="#E5E5E5"> a different kind</font>

838
00:29:07,610 --> 00:29:11,060
<font color="#E5E5E5">of set up it's going to require a</font>

839
00:29:08,900 --> 00:29:13,370
<font color="#CCCCCC">different API to trigger so rather</font><font color="#E5E5E5"> than</font>

840
00:29:11,060 --> 00:29:15,800
hard coding vulnerability specific

841
00:29:13,370 --> 00:29:16,489
<font color="#CCCCCC">information into the search space</font><font color="#E5E5E5"> itself</font>

842
00:29:15,800 --> 00:29:19,909
what we<font color="#E5E5E5"> do is we have these</font>

843
00:29:16,490 --> 00:29:21,650
vulnerability templates which the search

844
00:29:19,910 --> 00:29:25,700
will fill in<font color="#E5E5E5"> so they look</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> is as</font>

845
00:29:21,650 --> 00:29:27,710
follows so this is from PHP bug report

846
00:29:25,700 --> 00:29:30,260
it triggers some<font color="#E5E5E5"> overflow in the the</font>

847
00:29:27,710 --> 00:29:31,850
second function<font color="#E5E5E5"> here so we will do is we</font>

848
00:29:30,260 --> 00:29:33,470
<font color="#CCCCCC">will take</font><font color="#E5E5E5"> whatever our vulnerability</font>

849
00:29:31,850 --> 00:29:35,570
trigger is and we will control construct

850
00:29:33,470 --> 00:29:37,070
a template that<font color="#E5E5E5"> looks like this so the</font>

851
00:29:35,570 --> 00:29:39,919
template has<font color="#E5E5E5"> a preload</font><font color="#CCCCCC"> which is just</font>

852
00:29:37,070 --> 00:29:41,950
some things<font color="#CCCCCC"> that need to</font><font color="#E5E5E5"> happen</font><font color="#CCCCCC"> it then</font>

853
00:29:39,920 --> 00:29:43,580
<font color="#E5E5E5">has something</font><font color="#CCCCCC"> for creating the</font>

854
00:29:41,950 --> 00:29:44,570
destination which<font color="#CCCCCC"> is the thing we're</font>

855
00:29:43,580 --> 00:29:45,830
<font color="#E5E5E5">going to want</font><font color="#CCCCCC"> to corrupt</font><font color="#E5E5E5"> and then</font>

856
00:29:44,570 --> 00:29:48,200
finally it has a vulnerability trigger

857
00:29:45,830 --> 00:29:51,560
<font color="#E5E5E5">and the system is free to insert</font><font color="#CCCCCC"> heat</font>

858
00:29:48,200 --> 00:29:54,380
manipulation or it's free<font color="#E5E5E5"> to perform its</font>

859
00:29:51,560 --> 00:29:58,040
search at any location outside<font color="#E5E5E5"> these</font>

860
00:29:54,380 --> 00:30:00,590
tags<font color="#E5E5E5"> so it can insert code here to</font><font color="#CCCCCC"> do</font><font color="#E5E5E5"> -</font>

861
00:29:58,040 --> 00:30:02,060
ipil a<font color="#CCCCCC"> tion or here so this</font><font color="#E5E5E5"> is one</font>

862
00:30:00,590 --> 00:30:04,159
<font color="#CCCCCC">durability template</font><font color="#E5E5E5"> looks like it's very</font>

863
00:30:02,060 --> 00:30:09,440
<font color="#E5E5E5">straightforward</font><font color="#CCCCCC"> and the</font><font color="#E5E5E5"> overhead</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> the</font>

864
00:30:04,160 --> 00:30:10,640
user is is pretty<font color="#E5E5E5"> low already so this is</font>

865
00:30:09,440 --> 00:30:12,470
<font color="#E5E5E5">we spoke</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> before we have</font>

866
00:30:10,640 --> 00:30:14,480
interaction sequence discovery which<font color="#E5E5E5"> is</font>

867
00:30:12,470 --> 00:30:16,130
just fuzzing PHP programs for new

868
00:30:14,480 --> 00:30:18,650
alligator interactions corruption target

869
00:30:16,130 --> 00:30:20,420
discovery which we just<font color="#E5E5E5"> spoke about and</font>

870
00:30:18,650 --> 00:30:21,530
then we have a<font color="#CCCCCC"> vulnerability template we</font>

871
00:30:20,420 --> 00:30:23,570
put all these<font color="#E5E5E5"> together and</font><font color="#CCCCCC"> they're in</font>

872
00:30:21,530 --> 00:30:25,010
<font color="#E5E5E5">the search and what we get</font><font color="#CCCCCC"> out are</font>

873
00:30:23,570 --> 00:30:26,639
things<font color="#E5E5E5"> that look like this so they're</font>

874
00:30:25,010 --> 00:30:28,020
valid PHP programs

875
00:30:26,640 --> 00:30:30,600
that they have the pre loot from<font color="#E5E5E5"> the</font>

876
00:30:28,020 --> 00:30:31,650
template<font color="#E5E5E5"> then here we</font><font color="#CCCCCC"> can see a</font><font color="#E5E5E5"> bunch of</font>

877
00:30:30,600 --> 00:30:33,209
functions<font color="#CCCCCC"> that have been randomly</font>

878
00:30:31,650 --> 00:30:36,930
selected<font color="#CCCCCC"> and assembled together</font><font color="#E5E5E5"> because</font>

879
00:30:33,210 --> 00:30:38,490
they have<font color="#E5E5E5"> some useful</font><font color="#CCCCCC"> interaction with</font>

880
00:30:36,930 --> 00:30:40,260
the allocator so here we can see<font color="#E5E5E5"> that</font>

881
00:30:38,490 --> 00:30:41,820
<font color="#E5E5E5">the system is discovered that</font><font color="#CCCCCC"> the image</font>

882
00:30:40,260 --> 00:30:43,470
to<font color="#E5E5E5"> create true color function and the</font>

883
00:30:41,820 --> 00:30:44,639
string repeat function<font color="#E5E5E5"> obviously do</font>

884
00:30:43,470 --> 00:30:46,710
interesting<font color="#E5E5E5"> things in</font><font color="#CCCCCC"> terms of</font>

885
00:30:44,640 --> 00:30:48,330
<font color="#CCCCCC">allocating things</font><font color="#E5E5E5"> on the heap it's also</font>

886
00:30:46,710 --> 00:30:50,730
<font color="#E5E5E5">figured out that it can trigger freeze</font>

887
00:30:48,330 --> 00:30:52,679
via<font color="#E5E5E5"> just destroying objects like this</font>

888
00:30:50,730 --> 00:30:54,510
and then the<font color="#CCCCCC"> rest of</font><font color="#E5E5E5"> it is just</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> the</font>

889
00:30:52,680 --> 00:30:55,800
vulnerability template so these are the

890
00:30:54,510 --> 00:30:57,060
instances that<font color="#CCCCCC"> are</font><font color="#E5E5E5"> going to be created</font>

891
00:30:55,800 --> 00:30:59,580
during the search<font color="#E5E5E5"> and we're going to</font>

892
00:30:57,060 --> 00:31:01,830
<font color="#E5E5E5">randomly create thousands hundreds of</font>

893
00:30:59,580 --> 00:31:05,610
thousands billions<font color="#E5E5E5"> of these until we</font>

894
00:31:01,830 --> 00:31:06,960
find one combination<font color="#E5E5E5"> of these function</font>

895
00:31:05,610 --> 00:31:09,419
calls<font color="#E5E5E5"> which places the thing that we</font>

896
00:31:06,960 --> 00:31:14,340
want<font color="#CCCCCC"> to corrupt</font><font color="#E5E5E5"> next to the thing</font><font color="#CCCCCC"> that</font>

897
00:31:09,420 --> 00:31:15,780
<font color="#CCCCCC">we that</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> are flowing</font><font color="#E5E5E5"> out of okay so</font>

898
00:31:14,340 --> 00:31:16,919
this<font color="#E5E5E5"> is kind of the end to end process</font>

899
00:31:15,780 --> 00:31:18,990
<font color="#E5E5E5">we start off with a vulnerability</font>

900
00:31:16,920 --> 00:31:20,670
trigger<font color="#E5E5E5"> we could create from</font><font color="#CCCCCC"> that a</font>

901
00:31:18,990 --> 00:31:27,600
template and<font color="#CCCCCC"> then the system</font><font color="#E5E5E5"> creates</font>

902
00:31:20,670 --> 00:31:30,240
these these instances<font color="#E5E5E5"> okay so the</font>

903
00:31:27,600 --> 00:31:34,800
<font color="#CCCCCC">evaluation for this</font><font color="#E5E5E5"> was based on three</font>

904
00:31:30,240 --> 00:31:35,670
CVS from the PHP swab tracker<font color="#CCCCCC"> if you're</font>

905
00:31:34,800 --> 00:31:37,800
<font color="#E5E5E5">wondering how I picked these</font><font color="#CCCCCC"> I</font>

906
00:31:35,670 --> 00:31:39,930
effectively went to the bug<font color="#E5E5E5"> tracker and</font>

907
00:31:37,800 --> 00:31:41,129
started looking<font color="#CCCCCC"> for linear overflows and</font>

908
00:31:39,930 --> 00:31:42,780
these were the<font color="#E5E5E5"> first three that I came</font>

909
00:31:41,130 --> 00:31:44,490
across there's no purposely<font color="#CCCCCC"> hard cases</font>

910
00:31:42,780 --> 00:31:45,840
<font color="#E5E5E5">left out it wasn't a case that I found</font>

911
00:31:44,490 --> 00:31:46,890
<font color="#E5E5E5">100 and these were the only</font><font color="#CCCCCC"> three it</font>

912
00:31:45,840 --> 00:31:50,429
worked on these<font color="#E5E5E5"> were the first three</font>

913
00:31:46,890 --> 00:31:52,290
that I came<font color="#E5E5E5"> across so just to explain</font>

914
00:31:50,430 --> 00:31:56,460
<font color="#E5E5E5">some</font><font color="#CCCCCC"> of the headers</font><font color="#E5E5E5"> here the source size</font>

915
00:31:52,290 --> 00:31:58,230
is the size of the<font color="#E5E5E5"> the buffer which is</font>

916
00:31:56,460 --> 00:31:59,610
<font color="#E5E5E5">being overflow out of when these three</font>

917
00:31:58,230 --> 00:32:01,320
vulnerabilities are triggered the

918
00:31:59,610 --> 00:32:04,139
destination size<font color="#CCCCCC"> it sizes the object</font>

919
00:32:01,320 --> 00:32:06,540
<font color="#E5E5E5">that we want</font><font color="#CCCCCC"> to corrupt noise is a count</font>

920
00:32:04,140 --> 00:32:08,160
of<font color="#E5E5E5"> the number of allocations which are</font>

921
00:32:06,540 --> 00:32:10,110
triggered<font color="#CCCCCC"> when we allocate</font><font color="#E5E5E5"> the overflow</font>

922
00:32:08,160 --> 00:32:12,330
source<font color="#E5E5E5"> that are not the source buffer</font>

923
00:32:10,110 --> 00:32:14,639
<font color="#E5E5E5">itself in other words these</font><font color="#CCCCCC"> are other</font>

924
00:32:12,330 --> 00:32:17,010
allocations which can mess<font color="#CCCCCC"> up our heap</font>

925
00:32:14,640 --> 00:32:18,870
<font color="#E5E5E5">States as I mentioned before the initial</font>

926
00:32:17,010 --> 00:32:20,490
<font color="#E5E5E5">distance is the distance</font><font color="#CCCCCC"> between the</font>

927
00:32:18,870 --> 00:32:23,219
source<font color="#E5E5E5"> and the destination if we simply</font>

928
00:32:20,490 --> 00:32:26,070
<font color="#CCCCCC">take the</font><font color="#E5E5E5"> triggers provided in the bug</font>

929
00:32:23,220 --> 00:32:27,930
report and<font color="#CCCCCC"> our</font><font color="#E5E5E5"> code to allocate the</font>

930
00:32:26,070 --> 00:32:29,850
destination and simply run<font color="#CCCCCC"> it so we can</font>

931
00:32:27,930 --> 00:32:31,440
see here by<font color="#CCCCCC"> default there's quite a</font>

932
00:32:29,850 --> 00:32:32,969
large<font color="#E5E5E5"> distance between the source</font><font color="#CCCCCC"> and</font>

933
00:32:31,440 --> 00:32:34,320
destination<font color="#CCCCCC"> obviously if we had a</font>

934
00:32:32,970 --> 00:32:35,310
trigger which already<font color="#E5E5E5"> put the source and</font>

935
00:32:34,320 --> 00:32:36,570
destination immediately next<font color="#E5E5E5"> to each</font>

936
00:32:35,310 --> 00:32:36,899
<font color="#E5E5E5">other then the search will just be</font>

937
00:32:36,570 --> 00:32:40,158
<font color="#CCCCCC">wasting</font>

938
00:32:36,899 --> 00:32:42,508
time<font color="#CCCCCC"> and</font><font color="#E5E5E5"> the final distance is the</font>

939
00:32:40,159 --> 00:32:45,899
<font color="#E5E5E5">distance that the system was able to get</font>

940
00:32:42,509 --> 00:32:47,219
the source and<font color="#E5E5E5"> destination to be from</font>

941
00:32:45,899 --> 00:32:49,168
each other so<font color="#E5E5E5"> we can see in two of the</font>

942
00:32:47,219 --> 00:32:51,269
<font color="#E5E5E5">cases it achieved a perfect</font><font color="#CCCCCC"> result and</font>

943
00:32:49,169 --> 00:32:52,649
in the<font color="#E5E5E5"> final case it was off by</font><font color="#CCCCCC"> 16 bytes</font>

944
00:32:51,269 --> 00:32:56,369
so there were<font color="#E5E5E5"> 16 bytes between the</font>

945
00:32:52,649 --> 00:32:57,928
source and destination<font color="#E5E5E5"> there are a few</font>

946
00:32:56,369 --> 00:32:59,968
things I guess worth worth noting here

947
00:32:57,929 --> 00:33:01,919
the first is you can<font color="#E5E5E5"> see in the cases</font>

948
00:32:59,969 --> 00:33:03,690
where<font color="#E5E5E5"> we've a lot of noise that</font><font color="#CCCCCC"> the time</font>

949
00:33:01,919 --> 00:33:05,039
to<font color="#CCCCCC"> AB</font><font color="#E5E5E5"> the best instance is obviously far</font>

950
00:33:03,690 --> 00:33:07,739
higher than the<font color="#E5E5E5"> case where we have</font><font color="#CCCCCC"> no</font>

951
00:33:05,039 --> 00:33:09,839
noise again<font color="#E5E5E5"> we saw this in the synthetic</font>

952
00:33:07,739 --> 00:33:11,009
evaluation as well<font color="#CCCCCC"> in</font><font color="#E5E5E5"> cases where we had</font>

953
00:33:09,839 --> 00:33:13,769
no<font color="#CCCCCC"> noise at all we</font><font color="#E5E5E5"> could solve the</font>

954
00:33:11,009 --> 00:33:16,289
problem<font color="#CCCCCC"> almost</font><font color="#E5E5E5"> instantly and we can also</font>

955
00:33:13,769 --> 00:33:20,129
see here in the the final case we didn't

956
00:33:16,289 --> 00:33:22,229
actually get the perfect result<font color="#E5E5E5"> the</font>

957
00:33:20,129 --> 00:33:23,699
<font color="#E5E5E5">reason for for in this particular case</font>

958
00:33:22,229 --> 00:33:25,559
when I looked into it<font color="#E5E5E5"> was actually the</font>

959
00:33:23,700 --> 00:33:27,809
<font color="#E5E5E5">two allocations of size 8 which take</font>

960
00:33:25,559 --> 00:33:29,158
<font color="#E5E5E5">place as part of this noise here and the</font>

961
00:33:27,809 --> 00:33:32,339
system<font color="#E5E5E5"> wasn't able to figure out</font><font color="#CCCCCC"> how</font><font color="#E5E5E5"> to</font>

962
00:33:29,159 --> 00:33:36,239
<font color="#E5E5E5">get them out</font><font color="#CCCCCC"> of the way</font><font color="#E5E5E5"> basically but</font>

963
00:33:32,339 --> 00:33:41,399
overall it works<font color="#CCCCCC"> works pretty well on</font>

964
00:33:36,239 --> 00:33:43,919
<font color="#E5E5E5">these evaluation instances</font><font color="#CCCCCC"> ok so there</font>

965
00:33:41,399 --> 00:33:45,478
<font color="#E5E5E5">are a few takeaways from this that I</font>

966
00:33:43,919 --> 00:33:47,789
think<font color="#E5E5E5"> worth mentioning or reinforcing</font>

967
00:33:45,479 --> 00:33:49,259
first so<font color="#CCCCCC"> blackbox random search does</font>

968
00:33:47,789 --> 00:33:53,249
appear to<font color="#CCCCCC"> be an effective mechanism for</font>

969
00:33:49,259 --> 00:33:55,169
automatic heap<font color="#E5E5E5"> layout manipulation</font><font color="#CCCCCC"> there</font>

970
00:33:53,249 --> 00:33:57,719
are a number<font color="#E5E5E5"> of instances that were</font>

971
00:33:55,169 --> 00:33:59,339
clearly<font color="#CCCCCC"> hired that</font><font color="#E5E5E5"> it couldn't solve and</font>

972
00:33:57,719 --> 00:34:01,799
if you want to talk<font color="#CCCCCC"> about</font><font color="#E5E5E5"> how ways to</font>

973
00:33:59,339 --> 00:34:03,389
solve those find me later<font color="#E5E5E5"> segregated</font>

974
00:34:01,799 --> 00:34:04,739
storage was clearly by far the biggest

975
00:34:03,389 --> 00:34:07,109
differentiator between hard and<font color="#CCCCCC"> easy</font>

976
00:34:04,739 --> 00:34:09,359
instances with<font color="#E5E5E5"> DL malloc with a</font><font color="#CCCCCC"> VR Lipsy</font>

977
00:34:07,109 --> 00:34:10,558
and no noise<font color="#E5E5E5"> black box search or black</font>

978
00:34:09,359 --> 00:34:13,250
box random search can solve these

979
00:34:10,559 --> 00:34:16,379
instances in like<font color="#E5E5E5"> fractions of</font><font color="#CCCCCC"> a second</font>

980
00:34:13,250 --> 00:34:18,329
and as noise increases<font color="#CCCCCC"> obviously the</font>

981
00:34:16,379 --> 00:34:20,578
difficulty<font color="#E5E5E5"> of the problems also</font><font color="#CCCCCC"> appear</font>

982
00:34:18,329 --> 00:34:21,569
<font color="#CCCCCC">to increase so there</font><font color="#E5E5E5"> are a bunch</font><font color="#CCCCCC"> of</font>

983
00:34:20,579 --> 00:34:24,450
things<font color="#E5E5E5"> that we can do to improve this</font>

984
00:34:21,569 --> 00:34:25,859
the search algorithm itself we<font color="#E5E5E5"> can</font>

985
00:34:24,449 --> 00:34:28,799
clearly improve we're<font color="#CCCCCC"> learning nothing</font>

986
00:34:25,859 --> 00:34:31,799
<font color="#CCCCCC">between instances</font><font color="#E5E5E5"> at the moment at the</font>

987
00:34:28,799 --> 00:34:34,020
moment<font color="#CCCCCC"> I'm working on a basically</font><font color="#E5E5E5"> a</font>

988
00:34:31,799 --> 00:34:35,449
<font color="#CCCCCC">buzzing /g</font><font color="#E5E5E5"> a type approach which I can</font>

989
00:34:34,020 --> 00:34:38,190
talk<font color="#CCCCCC"> about if you find me later</font>

990
00:34:35,449 --> 00:34:39,839
the determinism restriction is obviously

991
00:34:38,190 --> 00:34:43,770
quite<font color="#E5E5E5"> a harsh restriction that</font><font color="#CCCCCC"> would</font><font color="#E5E5E5"> be</font>

992
00:34:39,839 --> 00:34:45,418
worth worth alleviating and also be very

993
00:34:43,770 --> 00:34:47,530
<font color="#CCCCCC">good to see this ported to</font><font color="#E5E5E5"> other things</font>

994
00:34:45,418 --> 00:34:49,270
<font color="#E5E5E5">so media players</font>

995
00:34:47,530 --> 00:34:53,830
and<font color="#E5E5E5"> JavaScript engines document viewers</font>

996
00:34:49,270 --> 00:34:56,820
and that sort of thing<font color="#CCCCCC"> RT</font><font color="#E5E5E5"> so the paper</font>

997
00:34:53,830 --> 00:34:59,110
<font color="#CCCCCC">and the code</font><font color="#E5E5E5"> you can find there</font><font color="#CCCCCC"> the</font>

998
00:34:56,820 --> 00:35:00,490
<font color="#CCCCCC">paper that's up there at</font><font color="#E5E5E5"> the moment</font><font color="#CCCCCC"> is</font>

999
00:34:59,110 --> 00:35:02,140
like kind of a<font color="#E5E5E5"> technical report if you</font>

1000
00:35:00,490 --> 00:35:04,560
<font color="#E5E5E5">want the full research paper just send</font>

1001
00:35:02,140 --> 00:35:06,370
<font color="#E5E5E5">me an email and I'll</font><font color="#CCCCCC"> send</font><font color="#E5E5E5"> it on to you</font>

1002
00:35:04,560 --> 00:35:08,710
or you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> send me an email with any</font>

1003
00:35:06,370 --> 00:35:13,230
questions<font color="#CCCCCC"> you might have other than that</font>

1004
00:35:08,710 --> 00:35:13,230
<font color="#E5E5E5">I am finished that's it any questions</font>

1005
00:35:23,250 --> 00:35:28,060
that's<font color="#E5E5E5"> a very interesting</font><font color="#CCCCCC"> presentation</font>

1006
00:35:25,120 --> 00:35:30,569
<font color="#CCCCCC">and so I've</font><font color="#E5E5E5"> worked with a number of the</font>

1007
00:35:28,060 --> 00:35:33,610
allocators that you specified there

1008
00:35:30,570 --> 00:35:35,250
one of the ones<font color="#E5E5E5"> problems I've seen in</font>

1009
00:35:33,610 --> 00:35:39,580
the<font color="#E5E5E5"> past is when you start considering</font>

1010
00:35:35,250 --> 00:35:42,930
threading issues<font color="#E5E5E5"> and the effects of</font>

1011
00:35:39,580 --> 00:35:47,259
effectively<font color="#E5E5E5"> the instrumentation</font>

1012
00:35:42,930 --> 00:35:51,210
what mitigations<font color="#E5E5E5"> do you take to get the</font>

1013
00:35:47,260 --> 00:35:54,300
instrumentation<font color="#CCCCCC"> not to be a</font><font color="#E5E5E5"> problem so</font>

1014
00:35:51,210 --> 00:35:56,230
there is no instrumentation that<font color="#E5E5E5"> was the</font>

1015
00:35:54,300 --> 00:35:57,520
this is something<font color="#CCCCCC"> I wanted to avoid</font>

1016
00:35:56,230 --> 00:35:58,870
<font color="#E5E5E5">basically as soon as you are</font><font color="#CCCCCC"> adding</font>

1017
00:35:57,520 --> 00:36:01,390
instrumentation the<font color="#E5E5E5"> heap layout gets</font>

1018
00:35:58,870 --> 00:36:02,589
messed up and<font color="#E5E5E5"> then the test case</font><font color="#CCCCCC"> that</font>

1019
00:36:01,390 --> 00:36:05,290
you have looks nothing like the<font color="#E5E5E5"> real</font>

1020
00:36:02,590 --> 00:36:07,270
case so<font color="#E5E5E5"> because it's done in a</font>

1021
00:36:05,290 --> 00:36:09,160
completely<font color="#E5E5E5"> blackbox fashion we the only</font>

1022
00:36:07,270 --> 00:36:10,780
observation<font color="#E5E5E5"> I'm doing of the the</font>

1023
00:36:09,160 --> 00:36:13,540
allocator is simply looking at<font color="#CCCCCC"> the</font>

1024
00:36:10,780 --> 00:36:16,630
<font color="#E5E5E5">return values that are given back from</font>

1025
00:36:13,540 --> 00:36:19,600
allocate free<font color="#E5E5E5"> reality lock those sort of</font>

1026
00:36:16,630 --> 00:36:22,390
things<font color="#CCCCCC"> so we're using</font><font color="#E5E5E5"> something</font><font color="#CCCCCC"> like a</font>

1027
00:36:19,600 --> 00:36:24,160
preload approach<font color="#E5E5E5"> to or interposition on</font>

1028
00:36:22,390 --> 00:36:26,379
those<font color="#CCCCCC"> allocators or we</font><font color="#E5E5E5"> replacing the</font>

1029
00:36:24,160 --> 00:36:26,649
<font color="#CCCCCC">allocators themselves well</font><font color="#E5E5E5"> just passing</font>

1030
00:36:26,380 --> 00:36:34,170
through

1031
00:36:26,650 --> 00:36:34,170
just passing through any<font color="#E5E5E5"> other questions</font>

1032
00:36:34,920 --> 00:36:39,589
nope<font color="#CCCCCC"> all right</font><font color="#E5E5E5"> you're free</font>

