1
00:00:00,910 --> 00:00:09,280
[Music]

2
00:00:09,280 --> 00:00:11,599
hi my name is

3
00:00:11,599 --> 00:00:13,759
and today i'll talk about the windows

4
00:00:13,759 --> 00:00:16,400
defender especially demystifying and

5
00:00:16,400 --> 00:00:18,560
bypassing attack surprise addiction by

6
00:00:18,560 --> 00:00:22,720
understanding the av signatures

7
00:00:23,359 --> 00:00:24,400
so why

8
00:00:24,400 --> 00:00:25,359
i'm a

9
00:00:25,359 --> 00:00:27,920
security researcher working at the nc

10
00:00:27,920 --> 00:00:29,679
which is the french national service

11
00:00:29,679 --> 00:00:31,920
security agency and this is why you

12
00:00:31,920 --> 00:00:34,719
heard about my terrible french accent

13
00:00:34,719 --> 00:00:37,200
my day job is the edit pen test and

14
00:00:37,200 --> 00:00:40,320
sometimes what teaming of some entities

15
00:00:40,320 --> 00:00:43,120
and i previously gave some talks about

16
00:00:43,120 --> 00:00:44,879
german officiation

17
00:00:44,879 --> 00:00:48,000
and reverse engineering

18
00:00:48,000 --> 00:00:50,879
such as minimizing

19
00:00:50,879 --> 00:00:53,440
so today the subject is attack surface

20
00:00:53,440 --> 00:00:54,640
edition

21
00:00:54,640 --> 00:00:56,800
this is a microsoft feature

22
00:00:56,800 --> 00:00:59,120
which stands to reduce vulnerabilities

23
00:00:59,120 --> 00:01:00,559
attached prices

24
00:01:00,559 --> 00:01:03,280
in your application is intelligent rules

25
00:01:03,280 --> 00:01:05,519
that help stop marvel

26
00:01:05,519 --> 00:01:06,640
so

27
00:01:06,640 --> 00:01:08,640
there are there in different world that

28
00:01:08,640 --> 00:01:11,439
you can enable

29
00:01:11,520 --> 00:01:13,760
so

30
00:01:13,760 --> 00:01:17,280
they are all uh serious thing to

31
00:01:17,280 --> 00:01:18,640
investigate

32
00:01:18,640 --> 00:01:20,960
the rules such as block office

33
00:01:20,960 --> 00:01:22,799
application from creating executable

34
00:01:22,799 --> 00:01:25,439
content or block other readers from

35
00:01:25,439 --> 00:01:27,520
creating child processes

36
00:01:27,520 --> 00:01:30,159
we can easily understand why

37
00:01:30,159 --> 00:01:33,840
these rules can be a good thing for

38
00:01:33,840 --> 00:01:36,320
any defender

39
00:01:36,320 --> 00:01:38,720
so the question is about attacks of

40
00:01:38,720 --> 00:01:41,439
resolution should we recommend it in our

41
00:01:41,439 --> 00:01:42,640
audit

42
00:01:42,640 --> 00:01:46,399
how does it work actually and

43
00:01:46,399 --> 00:01:49,360
can we bypass it

44
00:01:49,759 --> 00:01:52,320
so the first first thing first

45
00:01:52,320 --> 00:01:55,520
words is implemented and we have a few

46
00:01:55,520 --> 00:01:57,759
hints on the microsoft sites

47
00:01:57,759 --> 00:01:59,920
like requires microsoft and defender

48
00:01:59,920 --> 00:02:01,439
interviewers

49
00:02:01,439 --> 00:02:03,920
or is attacks in the

50
00:02:03,920 --> 00:02:05,759
faq

51
00:02:05,759 --> 00:02:08,318
that rsr was originally increased as a

52
00:02:08,318 --> 00:02:11,038
measure update to defender so it's

53
00:02:11,038 --> 00:02:13,760
likely in the interface in microsoft

54
00:02:13,760 --> 00:02:15,360
interest

55
00:02:15,360 --> 00:02:18,080
in the defender

56
00:02:18,080 --> 00:02:19,599
to be more precise

57
00:02:19,599 --> 00:02:22,800
if you look at brockman on the msnp

58
00:02:22,800 --> 00:02:26,000
engine which is the process running

59
00:02:26,000 --> 00:02:28,319
the defender interviews

60
00:02:28,319 --> 00:02:30,239
we can see some

61
00:02:30,239 --> 00:02:31,360
grab of

62
00:02:31,360 --> 00:02:32,560
pressure

63
00:02:32,560 --> 00:02:35,840
and entry on iso

64
00:02:35,840 --> 00:02:37,760
it's slightly implemented in the

65
00:02:37,760 --> 00:02:41,280
windows defender and the question is how

66
00:02:41,280 --> 00:02:44,000
they are able to block adobe reader from

67
00:02:44,000 --> 00:02:47,360
creating child processes for instance

68
00:02:47,360 --> 00:02:49,920
is it a collaboration between microsoft

69
00:02:49,920 --> 00:02:52,400
and adobe detecting adobe processes

70
00:02:52,400 --> 00:02:55,360
through signatures or tracing packages

71
00:02:55,360 --> 00:02:56,319
no

72
00:02:56,319 --> 00:02:57,120
all

73
00:02:57,120 --> 00:02:58,800
just kind of

74
00:02:58,800 --> 00:03:00,560
regular expressions

75
00:03:00,560 --> 00:03:04,000
so we'll try to find out

76
00:03:04,000 --> 00:03:06,239
so first i'll just

77
00:03:06,239 --> 00:03:08,080
give you a bit of

78
00:03:08,080 --> 00:03:10,159
how to reproduce

79
00:03:10,159 --> 00:03:14,560
this talk and go further so okay

80
00:03:14,560 --> 00:03:15,440
then

81
00:03:15,440 --> 00:03:17,360
we'll look at how

82
00:03:17,360 --> 00:03:19,599
are actually implemented

83
00:03:19,599 --> 00:03:22,560
uh to ensure the integration which is

84
00:03:22,560 --> 00:03:23,440
asked

85
00:03:23,440 --> 00:03:25,920
and finally all the windows defenders

86
00:03:25,920 --> 00:03:28,239
signatures are made

87
00:03:28,239 --> 00:03:30,640
and what else can be found in this

88
00:03:30,640 --> 00:03:33,120
signature databases

89
00:03:33,120 --> 00:03:35,680
so first firstly first

90
00:03:35,680 --> 00:03:38,000
i want to you to be able to reproduce

91
00:03:38,000 --> 00:03:39,200
this work

92
00:03:39,200 --> 00:03:40,400
and

93
00:03:40,400 --> 00:03:41,120
i

94
00:03:41,120 --> 00:03:44,319
myself based my work on some previous

95
00:03:44,319 --> 00:03:45,519
ones

96
00:03:45,519 --> 00:03:48,720
chat says one which has been

97
00:03:48,720 --> 00:03:51,599
already presented at blanket

98
00:03:51,599 --> 00:03:54,239
it was focusing on the emulator inside

99
00:03:54,239 --> 00:03:57,840
the defender interviews

100
00:03:59,280 --> 00:04:01,120
there's a lot of

101
00:04:01,120 --> 00:04:04,080
components in the defender such as

102
00:04:04,080 --> 00:04:05,760
fighter driver

103
00:04:05,760 --> 00:04:06,560
the

104
00:04:06,560 --> 00:04:09,519
early launch antimatter

105
00:04:09,519 --> 00:04:11,360
some interfaces and engine

106
00:04:11,360 --> 00:04:14,080
implementation in pinging

107
00:04:14,080 --> 00:04:15,760
and some vdm

108
00:04:15,760 --> 00:04:17,519
files that you'll see later which are

109
00:04:17,519 --> 00:04:18,798
actually the

110
00:04:18,798 --> 00:04:21,680
signatures base

111
00:04:21,680 --> 00:04:24,800
a lot of pdb are

112
00:04:24,800 --> 00:04:26,000
so

113
00:04:26,000 --> 00:04:28,479
public symbols are available for mp

114
00:04:28,479 --> 00:04:29,680
engine

115
00:04:29,680 --> 00:04:32,800
until the last year

116
00:04:32,800 --> 00:04:36,000
and um if you want to

117
00:04:36,000 --> 00:04:38,800
analyze a recent version you can as many

118
00:04:38,800 --> 00:04:41,520
stand down for a recent cvu

119
00:04:41,520 --> 00:04:45,440
just give the different updates and

120
00:04:45,440 --> 00:04:46,800
understand

121
00:04:46,800 --> 00:04:49,120
what i want to change and just a

122
00:04:49,120 --> 00:04:51,120
determination

123
00:04:51,120 --> 00:04:53,600
to tell you

124
00:04:53,840 --> 00:04:55,280
so

125
00:04:55,280 --> 00:04:57,280
if you want to

126
00:04:57,280 --> 00:05:00,000
focus on mp engine without

127
00:05:00,000 --> 00:05:01,520
the wall

128
00:05:01,520 --> 00:05:03,440
windows system

129
00:05:03,440 --> 00:05:05,280
you can just emulate it

130
00:05:05,280 --> 00:05:07,919
and thanks to the wizard which release

131
00:05:07,919 --> 00:05:09,520
the load library

132
00:05:09,520 --> 00:05:12,560
you can actually run a 32-bit mp engine

133
00:05:12,560 --> 00:05:14,160
on linux

134
00:05:14,160 --> 00:05:16,240
this is really good to instrument or

135
00:05:16,240 --> 00:05:20,000
scrape the use of mp engine and use gdp

136
00:05:20,000 --> 00:05:23,120
debugging and so on

137
00:05:23,120 --> 00:05:26,400
in examples we have the link

138
00:05:26,400 --> 00:05:29,440
um if you want to actually instrument uh

139
00:05:29,440 --> 00:05:32,320
defender uh in running windows

140
00:05:32,320 --> 00:05:34,000
uh you need to

141
00:05:34,000 --> 00:05:36,240
perform a few steps the first one is

142
00:05:36,240 --> 00:05:40,479
that msnp engine is actually bpl so

143
00:05:40,479 --> 00:05:42,560
restricted uh

144
00:05:42,560 --> 00:05:45,280
protected light process

145
00:05:45,280 --> 00:05:47,600
so you can remove these bits for

146
00:05:47,600 --> 00:05:50,000
instance using your mini gats

147
00:05:50,000 --> 00:05:52,400
and then the uh windows defender factor

148
00:05:52,400 --> 00:05:54,720
driver uh actually registers and go back

149
00:05:54,720 --> 00:05:58,560
to deny you to actually make some

150
00:05:58,560 --> 00:06:00,800
changes on the process but you can

151
00:06:00,800 --> 00:06:02,800
easily enable

152
00:06:02,800 --> 00:06:05,840
this behavior using a canon developer

153
00:06:05,840 --> 00:06:09,280
the relative symbol that you need to

154
00:06:09,280 --> 00:06:11,759
to to change um

155
00:06:11,759 --> 00:06:14,080
this is a event that you can

156
00:06:14,080 --> 00:06:16,160
also obtain on some cheating forms for

157
00:06:16,160 --> 00:06:18,560
instance

158
00:06:18,720 --> 00:06:21,120
and this is uh great to

159
00:06:21,120 --> 00:06:24,400
debug or perform some tracing constant

160
00:06:24,400 --> 00:06:27,520
using a dbg uh ttd time problem

161
00:06:27,520 --> 00:06:30,000
developer and then you can

162
00:06:30,000 --> 00:06:33,039
obtain this kind of truss which is a

163
00:06:33,039 --> 00:06:35,039
really nice way to

164
00:06:35,039 --> 00:06:38,800
understand what is actually going on

165
00:06:39,360 --> 00:06:41,039
and

166
00:06:41,039 --> 00:06:43,120
once you

167
00:06:43,120 --> 00:06:45,120
have your setup you can

168
00:06:45,120 --> 00:06:47,600
test your skills uh for instance i

169
00:06:47,600 --> 00:06:49,599
released

170
00:06:49,599 --> 00:06:52,000
a challenge for a recent ctf this year

171
00:06:52,000 --> 00:06:53,919
which is named the offenders which is

172
00:06:53,919 --> 00:06:56,240
actually the police to reverse binary

173
00:06:56,240 --> 00:06:58,080
which has been made to run inside the

174
00:06:58,080 --> 00:07:00,160
windows defender sandbox which is you

175
00:07:00,160 --> 00:07:04,400
chosen the emulator interface

176
00:07:04,400 --> 00:07:07,440
and the emulator environment to run and

177
00:07:07,440 --> 00:07:09,120
you have some write-up on it

178
00:07:09,120 --> 00:07:11,280
you can also perform some vulnerability

179
00:07:11,280 --> 00:07:12,840
research

180
00:07:12,840 --> 00:07:14,720
[Music]

181
00:07:14,720 --> 00:07:16,479
or i i don't know

182
00:07:16,479 --> 00:07:19,039
my old mate sandbox or programming in

183
00:07:19,039 --> 00:07:23,039
etw events or anything like that

184
00:07:23,039 --> 00:07:26,319
so now that you know how to instrument

185
00:07:26,319 --> 00:07:28,400
windows defender you will be able to

186
00:07:28,400 --> 00:07:31,039
reproduce some of my works so i hope you

187
00:07:31,039 --> 00:07:32,880
can

188
00:07:32,880 --> 00:07:34,400
you will learn

189
00:07:34,400 --> 00:07:35,440
things

190
00:07:35,440 --> 00:07:36,800
in that way

191
00:07:36,800 --> 00:07:39,759
so now um back to our subject or are

192
00:07:39,759 --> 00:07:41,280
implemented uh the attack's first

193
00:07:41,280 --> 00:07:43,680
traditional rules

194
00:07:43,680 --> 00:07:45,039
so

195
00:07:45,039 --> 00:07:46,400
we are trying to

196
00:07:46,400 --> 00:07:49,199
find first um where are the rules

197
00:07:49,199 --> 00:07:51,759
implemented actually

198
00:07:51,759 --> 00:07:54,319
the royal

199
00:07:54,560 --> 00:07:58,720
design using a unique uid so i can

200
00:07:58,720 --> 00:08:01,120
search that uid and try to find where

201
00:08:01,120 --> 00:08:03,599
it's defined

202
00:08:03,599 --> 00:08:06,160
first we can try to find it in the mp

203
00:08:06,160 --> 00:08:08,240
engine which is the main

204
00:08:08,240 --> 00:08:09,840
dll of

205
00:08:09,840 --> 00:08:12,160
windows defender and we don't found

206
00:08:12,160 --> 00:08:13,840
anything left

207
00:08:13,840 --> 00:08:16,000
so we can try to research

208
00:08:16,000 --> 00:08:18,319
them in dvdm file that's no more

209
00:08:18,319 --> 00:08:20,080
resource

210
00:08:20,080 --> 00:08:22,319
but if now if you're looking to for the

211
00:08:22,319 --> 00:08:25,039
keyword asr in the code

212
00:08:25,039 --> 00:08:26,479
in the empty engine

213
00:08:26,479 --> 00:08:28,960
we can still find a few

214
00:08:28,960 --> 00:08:31,199
related methods

215
00:08:31,199 --> 00:08:34,958
like https managers

216
00:08:34,958 --> 00:08:36,640
host

217
00:08:36,640 --> 00:08:39,599
intuition prevention manager

218
00:08:39,599 --> 00:08:41,519
regarding asl

219
00:08:41,519 --> 00:08:44,460
so now if you are trying to find where

220
00:08:44,460 --> 00:08:45,680
[Music]

221
00:08:45,680 --> 00:08:48,560
what is the method are called

222
00:08:48,560 --> 00:08:51,600
you can for instance use the previous uh

223
00:08:51,600 --> 00:08:54,880
dress that you already down and

224
00:08:54,880 --> 00:08:56,480
regarding the call stack on the call

225
00:08:56,480 --> 00:08:57,839
side

226
00:08:57,839 --> 00:08:59,120
we here is the

227
00:08:59,120 --> 00:09:01,680
easy understand that is actually um

228
00:09:01,680 --> 00:09:04,880
inside the dugout engine

229
00:09:04,880 --> 00:09:07,839
so it seems that the engine is using

230
00:09:07,839 --> 00:09:11,519
the is calling things regarding the hps

231
00:09:11,519 --> 00:09:12,640
manager

232
00:09:12,640 --> 00:09:15,360
and iron soft things

233
00:09:15,360 --> 00:09:16,880
so if we

234
00:09:16,880 --> 00:09:19,760
um dig in a bit

235
00:09:19,760 --> 00:09:22,000
we will see that the hps manager has a

236
00:09:22,000 --> 00:09:24,160
load rules from database

237
00:09:24,160 --> 00:09:25,200
function

238
00:09:25,200 --> 00:09:27,760
so this seems really interesting which

239
00:09:27,760 --> 00:09:31,519
is then calling indeed scripts

240
00:09:31,519 --> 00:09:33,600
which are

241
00:09:33,600 --> 00:09:36,240
grabbing a github info get monitoring

242
00:09:36,240 --> 00:09:39,600
locations get past extrusion and so on

243
00:09:39,600 --> 00:09:41,839
from the databases

244
00:09:41,839 --> 00:09:44,720
so what you understand from that is that

245
00:09:44,720 --> 00:09:46,880
part of full data must be inside azure

246
00:09:46,880 --> 00:09:49,040
so in dvdm file

247
00:09:49,040 --> 00:09:50,480
in the form of

248
00:09:50,480 --> 00:09:52,080
lua scripts

249
00:09:52,080 --> 00:09:54,160
so this is interesting and i will try to

250
00:09:54,160 --> 00:09:57,120
find them that way

251
00:09:57,120 --> 00:10:00,800
so we'll use the wd extract project

252
00:10:00,800 --> 00:10:03,279
which uh just actually

253
00:10:03,279 --> 00:10:05,600
decompress within files

254
00:10:05,600 --> 00:10:07,920
and now that we have decompressed them

255
00:10:07,920 --> 00:10:10,320
we can research

256
00:10:10,320 --> 00:10:13,360
the gid inside that file and now we

257
00:10:13,360 --> 00:10:14,880
found them

258
00:10:14,880 --> 00:10:17,360
and what we just

259
00:10:17,360 --> 00:10:19,839
see

260
00:10:20,480 --> 00:10:21,360
looking

261
00:10:21,360 --> 00:10:24,560
around if that's uh there is the earlier

262
00:10:24,560 --> 00:10:28,160
5.1 magic so which is the

263
00:10:28,160 --> 00:10:30,640
the header for uh for lua compiled

264
00:10:30,640 --> 00:10:32,720
scripts

265
00:10:32,720 --> 00:10:34,720
and so this is interesting we have the

266
00:10:34,720 --> 00:10:37,839
view id of our rule and then the lua

267
00:10:37,839 --> 00:10:40,720
magic of

268
00:10:41,760 --> 00:10:43,120
lua script

269
00:10:43,120 --> 00:10:45,279
so let's try to extract to the

270
00:10:45,279 --> 00:10:48,399
javascripts and decompile them

271
00:10:48,399 --> 00:10:49,920
so the first so

272
00:10:49,920 --> 00:10:51,920
we extract the compiled script and

273
00:10:51,920 --> 00:10:52,800
sharing

274
00:10:52,800 --> 00:10:55,519
the command projects

275
00:10:55,519 --> 00:10:56,959
to actually

276
00:10:56,959 --> 00:10:58,720
decompile them

277
00:10:58,720 --> 00:11:00,640
but the problem is that uh it's

278
00:11:00,640 --> 00:11:01,920
unfortunate

279
00:11:01,920 --> 00:11:04,160
uh after some reversal and digging uh

280
00:11:04,160 --> 00:11:07,120
this is a good ref you want to reproduce

281
00:11:07,120 --> 00:11:07,920
it

282
00:11:07,920 --> 00:11:10,240
actually the others are not the one uh

283
00:11:10,240 --> 00:11:12,800
expected by erotic that will be changed

284
00:11:12,800 --> 00:11:15,920
in the defender project and the data

285
00:11:15,920 --> 00:11:18,399
structure size are not the same as

286
00:11:18,399 --> 00:11:20,399
expected by the work

287
00:11:20,399 --> 00:11:22,959
i don't know why maybe the compilation

288
00:11:22,959 --> 00:11:25,120
touching is not actually

289
00:11:25,120 --> 00:11:28,320
the same or it has been

290
00:11:29,040 --> 00:11:32,079
customized a bit i don't know

291
00:11:32,079 --> 00:11:33,440
but still

292
00:11:33,440 --> 00:11:34,320
if we

293
00:11:34,320 --> 00:11:37,120
made it to if we perform to change

294
00:11:37,120 --> 00:11:39,040
android

295
00:11:39,040 --> 00:11:40,480
we can

296
00:11:40,480 --> 00:11:43,200
write an iv conversion sheet which is a

297
00:11:43,200 --> 00:11:45,120
open source now

298
00:11:45,120 --> 00:11:46,000
um

299
00:11:46,000 --> 00:11:48,640
and then we can decompile them so here

300
00:11:48,640 --> 00:11:52,079
is an example of what we can find uh

301
00:11:52,079 --> 00:11:55,279
here we found that a rule is actually uh

302
00:11:55,279 --> 00:11:57,360
so the script is first uh checking the

303
00:11:57,360 --> 00:11:58,800
rule is enabled

304
00:11:58,800 --> 00:12:00,160
uh if not

305
00:12:00,160 --> 00:12:01,360
it returns

306
00:12:01,360 --> 00:12:03,040
mp.claim

307
00:12:03,040 --> 00:12:05,839
uh the thing is uh you can think as uh

308
00:12:05,839 --> 00:12:08,839
mp.claim as like a written

309
00:12:08,839 --> 00:12:12,000
zero uh orbiting force um

310
00:12:12,000 --> 00:12:14,959
it's not saying that the

311
00:12:14,959 --> 00:12:17,440
malware under analyze of the candidate

312
00:12:17,440 --> 00:12:20,160
under analyze is actually uh clean it's

313
00:12:20,160 --> 00:12:23,200
just saying uh i i don't have any more

314
00:12:23,200 --> 00:12:26,240
information in this script

315
00:12:26,240 --> 00:12:30,080
uh so from search there is uh trying to

316
00:12:30,080 --> 00:12:32,240
[Music]

317
00:12:32,240 --> 00:12:33,760
test if the

318
00:12:33,760 --> 00:12:35,040
discord is

319
00:12:35,040 --> 00:12:36,959
all black executable content from email

320
00:12:36,959 --> 00:12:39,600
clients onboard mail is enabled and then

321
00:12:39,600 --> 00:12:43,839
why it has been called and then check

322
00:12:44,000 --> 00:12:46,639
the header or to check if it is actually

323
00:12:46,639 --> 00:12:50,000
a zip file okay

324
00:12:50,160 --> 00:12:52,560
so the

325
00:13:01,920 --> 00:13:04,240
well we can try to find our

326
00:13:04,240 --> 00:13:07,279
the answer to our questions so

327
00:13:07,279 --> 00:13:10,320
all the uh block adobe adobe reader from

328
00:13:10,320 --> 00:13:12,399
creatine chat processes is actually

329
00:13:12,399 --> 00:13:15,680
implemented the question is uh how

330
00:13:15,680 --> 00:13:18,320
the recreation behind is

331
00:13:18,320 --> 00:13:21,040
oh defender know that

332
00:13:21,040 --> 00:13:22,320
it is

333
00:13:22,320 --> 00:13:25,040
adobe process

334
00:13:25,040 --> 00:13:27,120
and the answer is

335
00:13:27,120 --> 00:13:29,279
well it's actually

336
00:13:29,279 --> 00:13:31,760
regular expressions

337
00:13:31,760 --> 00:13:35,040
so you can see the get info that you saw

338
00:13:35,040 --> 00:13:37,120
before which gives some basic

339
00:13:37,120 --> 00:13:39,120
information regarding the rule

340
00:13:39,120 --> 00:13:41,519
and you have a get monitoring locations

341
00:13:41,519 --> 00:13:43,680
which just list

342
00:13:43,680 --> 00:13:47,120
some requests about what are the

343
00:13:47,120 --> 00:13:50,480
process to watch the

344
00:13:50,480 --> 00:13:53,120
the file name of the of the process

345
00:13:53,120 --> 00:13:56,079
to watch so you have some

346
00:13:56,079 --> 00:13:58,160
a big list of all

347
00:13:58,160 --> 00:13:59,040
known

348
00:13:59,040 --> 00:14:01,040
adobe reader

349
00:14:01,040 --> 00:14:02,880
executables in their

350
00:14:02,880 --> 00:14:06,000
location on your desk

351
00:14:06,160 --> 00:14:07,680
actually we can

352
00:14:07,680 --> 00:14:10,639
we could have found this information

353
00:14:10,639 --> 00:14:12,959
another way

354
00:14:12,959 --> 00:14:15,519
microsoft is giving a iso test tool you

355
00:14:15,519 --> 00:14:18,240
can download this link

356
00:14:18,240 --> 00:14:21,600
which is made to perform some tests

357
00:14:21,600 --> 00:14:23,279
for

358
00:14:23,279 --> 00:14:26,000
for instance you can say okay i want to

359
00:14:26,000 --> 00:14:28,560
try the whole block injection by office

360
00:14:28,560 --> 00:14:31,680
application then i want to be in the

361
00:14:31,680 --> 00:14:33,920
block mode or audit mode i run the

362
00:14:33,920 --> 00:14:36,399
scenario and i see is

363
00:14:36,399 --> 00:14:38,880
if it is actually detected or not

364
00:14:38,880 --> 00:14:40,720
the question is how

365
00:14:40,720 --> 00:14:43,519
microsoft is implementing

366
00:14:43,519 --> 00:14:47,519
that's test tool in just a few megabytes

367
00:14:47,519 --> 00:14:49,680
without giving you office

368
00:14:49,680 --> 00:14:52,639
application and so on

369
00:14:52,639 --> 00:14:54,000
so if we

370
00:14:54,000 --> 00:14:57,120
have a look at or it's made it's a net

371
00:14:57,120 --> 00:14:59,440
application easy to reverse and what we

372
00:14:59,440 --> 00:15:02,639
can see is that you have some list of a

373
00:15:02,639 --> 00:15:05,279
known office

374
00:15:05,279 --> 00:15:08,079
application name on the install location

375
00:15:08,079 --> 00:15:11,199
and the tool is actually just

376
00:15:11,199 --> 00:15:13,760
picking these names

377
00:15:13,760 --> 00:15:15,600
and creating a

378
00:15:15,600 --> 00:15:16,850
notepad of

379
00:15:16,850 --> 00:15:18,480
[Music]

380
00:15:18,480 --> 00:15:20,480
couple applications in these

381
00:15:20,480 --> 00:15:21,600
paths

382
00:15:21,600 --> 00:15:23,360
and launching it

383
00:15:23,360 --> 00:15:26,639
so you have a notepad running with the

384
00:15:26,639 --> 00:15:29,600
excel.txt name for instance

385
00:15:29,600 --> 00:15:30,959
and

386
00:15:30,959 --> 00:15:32,000
then

387
00:15:32,000 --> 00:15:34,000
it asks this process to create another

388
00:15:34,000 --> 00:15:36,240
one and

389
00:15:36,240 --> 00:15:39,680
it will trigger the rules if

390
00:15:39,680 --> 00:15:42,160
excel.exe is launching another process

391
00:15:42,160 --> 00:15:43,519
for instance

392
00:15:43,519 --> 00:15:45,600
and this is how the test tool is

393
00:15:45,600 --> 00:15:47,120
actually

394
00:15:47,120 --> 00:15:49,600
implemented so it just confirmed that

395
00:15:49,600 --> 00:15:52,320
the rules are only using process names

396
00:15:52,320 --> 00:15:53,350
and not um

397
00:15:53,350 --> 00:15:54,720
[Music]

398
00:15:54,720 --> 00:15:56,720
actual uh

399
00:15:56,720 --> 00:15:58,959
unforgeable uh trusted

400
00:15:58,959 --> 00:16:01,360
packages or anything like that

401
00:16:01,360 --> 00:16:03,920
so microsoft is aware of this issue and

402
00:16:03,920 --> 00:16:07,120
they say that uh they'll try to

403
00:16:07,120 --> 00:16:10,639
end this behavior

404
00:16:12,560 --> 00:16:14,950
another thing is that sometimes

405
00:16:14,950 --> 00:16:16,160
[Music]

406
00:16:16,160 --> 00:16:18,399
office or adobe application actually

407
00:16:18,399 --> 00:16:19,839
needs to launch

408
00:16:19,839 --> 00:16:22,000
to know to launch a few processes

409
00:16:22,000 --> 00:16:24,639
legitimately so how can they do that if

410
00:16:24,639 --> 00:16:27,199
the rules is amorable

411
00:16:27,199 --> 00:16:28,959
the way it is implemented is that they

412
00:16:28,959 --> 00:16:32,399
use an exclusion list

413
00:16:32,399 --> 00:16:35,680
or it can be authorized through your

414
00:16:35,680 --> 00:16:37,600
script logic

415
00:16:37,600 --> 00:16:39,040
so

416
00:16:39,040 --> 00:16:40,480
if you look at

417
00:16:40,480 --> 00:16:43,040
what are actually exclude

418
00:16:43,040 --> 00:16:44,000
in the

419
00:16:44,000 --> 00:16:46,800
world description

420
00:16:46,800 --> 00:16:49,040
or you can understand that if that if

421
00:16:49,040 --> 00:16:50,240
the

422
00:16:50,240 --> 00:16:53,199
executable that is launched is in this

423
00:16:53,199 --> 00:16:54,160
pass

424
00:16:54,160 --> 00:16:56,880
then it is okay you can launch it so

425
00:16:56,880 --> 00:16:59,199
for instance this is saying that office

426
00:16:59,199 --> 00:17:02,160
can launch office application or i think

427
00:17:02,160 --> 00:17:04,480
it's for adobe so adobe reader can

428
00:17:04,480 --> 00:17:06,880
launch office application it can also

429
00:17:06,880 --> 00:17:08,720
launch internet explorer

430
00:17:08,720 --> 00:17:12,559
uh it can launch it software and so on

431
00:17:12,559 --> 00:17:14,880
well it can launch a lot of application

432
00:17:14,880 --> 00:17:16,720
actually if you

433
00:17:16,720 --> 00:17:19,039
look at it you can launch a windham and

434
00:17:19,039 --> 00:17:21,679
zip opera firefox

435
00:17:21,679 --> 00:17:22,108
um

436
00:17:22,108 --> 00:17:23,919
[Music]

437
00:17:23,919 --> 00:17:26,640
a few edge applications live meeting

438
00:17:26,640 --> 00:17:28,559
visio and so on

439
00:17:28,559 --> 00:17:30,799
and you have a lot of them like

440
00:17:30,799 --> 00:17:33,039
a lot of them

441
00:17:33,039 --> 00:17:36,160
not bad and so on

442
00:17:36,320 --> 00:17:38,480
so

443
00:17:39,679 --> 00:17:41,600
in addition to this rule you have a lot

444
00:17:41,600 --> 00:17:44,240
of exclusion lists and then you can also

445
00:17:44,240 --> 00:17:46,240
have exclusion from the from luva

446
00:17:46,240 --> 00:17:47,919
scripts

447
00:17:47,919 --> 00:17:50,480
question is as an attacker can we abuse

448
00:17:50,480 --> 00:17:53,120
this execution list

449
00:17:53,120 --> 00:17:55,200
so let's have a look at block office

450
00:17:55,200 --> 00:17:57,600
application from creating executable

451
00:17:57,600 --> 00:17:59,280
contents

452
00:17:59,280 --> 00:18:02,640
the description related to this rule

453
00:18:02,640 --> 00:18:04,000
and what we can

454
00:18:04,000 --> 00:18:06,480
oh so the first thing that we see in the

455
00:18:06,480 --> 00:18:08,640
script is that uh it's checking the rule

456
00:18:08,640 --> 00:18:10,480
is enabled if not

457
00:18:10,480 --> 00:18:12,559
it's an early return

458
00:18:12,559 --> 00:18:16,720
then it's trying to um check if the

459
00:18:16,720 --> 00:18:18,960
if it is actually a block of

460
00:18:18,960 --> 00:18:21,679
an office application so this is the get

461
00:18:21,679 --> 00:18:24,320
context of this approach

462
00:18:24,320 --> 00:18:25,360
but

463
00:18:25,360 --> 00:18:28,080
there is the implementation so you have

464
00:18:28,080 --> 00:18:29,600
a list of

465
00:18:29,600 --> 00:18:33,360
common office applications and there are

466
00:18:33,360 --> 00:18:35,440
some

467
00:18:35,440 --> 00:18:36,880
made in list

468
00:18:36,880 --> 00:18:38,320
so you can just

469
00:18:38,320 --> 00:18:39,840
just say that they are categorized

470
00:18:39,840 --> 00:18:42,080
actually so just say that excel is in a

471
00:18:42,080 --> 00:18:43,840
productivity

472
00:18:43,840 --> 00:18:47,360
world also and link is the communication

473
00:18:47,360 --> 00:18:50,959
so if the current

474
00:18:51,440 --> 00:18:53,600
process which is launching another

475
00:18:53,600 --> 00:18:55,440
executable isn't

476
00:18:55,440 --> 00:18:58,960
list and in the productivity category

477
00:18:58,960 --> 00:19:00,559
continue

478
00:19:00,559 --> 00:19:03,520
then have a list of the actual extension

479
00:19:03,520 --> 00:19:05,440
that are

480
00:19:05,440 --> 00:19:07,120
checked by the script

481
00:19:07,120 --> 00:19:09,520
so if you're curate creating

482
00:19:09,520 --> 00:19:10,799
a

483
00:19:10,799 --> 00:19:12,960
file which ends with one of these

484
00:19:12,960 --> 00:19:15,520
extensions this is considered as an

485
00:19:15,520 --> 00:19:17,919
executable content creation

486
00:19:17,919 --> 00:19:20,160
so you have the common script languages

487
00:19:20,160 --> 00:19:22,880
you also have a java file but some of

488
00:19:22,880 --> 00:19:26,640
them are missing

489
00:19:29,600 --> 00:19:30,400
so

490
00:19:30,400 --> 00:19:32,480
just to be sure that the

491
00:19:32,480 --> 00:19:34,240
rule is actually working there is the

492
00:19:34,240 --> 00:19:36,400
command line to enable it

493
00:19:36,400 --> 00:19:40,000
then i create some basic macro in excel

494
00:19:40,000 --> 00:19:42,080
just saying okay i want to the download

495
00:19:42,080 --> 00:19:43,200
file

496
00:19:43,200 --> 00:19:45,520
this is a dot exe i'm

497
00:19:45,520 --> 00:19:47,600
dropping in on the disk and then try

498
00:19:47,600 --> 00:19:49,120
them to launch it

499
00:19:49,120 --> 00:19:50,480
and when on

500
00:19:50,480 --> 00:19:54,240
when i try to drop it in on the disk

501
00:19:54,240 --> 00:19:55,840
um

502
00:19:55,840 --> 00:19:58,480
the iso rule is triggered and as you can

503
00:19:58,480 --> 00:20:00,720
as you can see on the bottom right uh

504
00:20:00,720 --> 00:20:02,240
it's just saying okay it has been

505
00:20:02,240 --> 00:20:03,679
brought

506
00:20:03,679 --> 00:20:05,760
to as expected and you have the

507
00:20:05,760 --> 00:20:08,000
corresponding event

508
00:20:08,000 --> 00:20:11,120
so now if we look at uh the exclusion

509
00:20:11,120 --> 00:20:13,280
which is in the script you can see that

510
00:20:13,280 --> 00:20:14,000
uh

511
00:20:14,000 --> 00:20:15,679
in addition to the

512
00:20:15,679 --> 00:20:17,919
exclusion list that we saw before there

513
00:20:17,919 --> 00:20:19,039
are also

514
00:20:19,039 --> 00:20:21,200
a few exclusions that are

515
00:20:21,200 --> 00:20:22,880
in the script

516
00:20:22,880 --> 00:20:24,880
so perform dynamically

517
00:20:24,880 --> 00:20:26,480
and

518
00:20:26,480 --> 00:20:28,080
some of these exclusions

519
00:20:28,080 --> 00:20:30,320
are depends on the

520
00:20:30,320 --> 00:20:31,240
actual

521
00:20:31,240 --> 00:20:33,520
[Music]

522
00:20:33,520 --> 00:20:36,240
extension that you use so if you're

523
00:20:36,240 --> 00:20:39,039
using an uh lng

524
00:20:39,039 --> 00:20:40,799
r is the

525
00:20:40,799 --> 00:20:42,880
logic to authorize some

526
00:20:42,880 --> 00:20:45,360
and if you continue to look at it uh if

527
00:20:45,360 --> 00:20:48,159
you if the extension is dot exit and

528
00:20:48,159 --> 00:20:52,159
anywhere in the path uh you use uh

529
00:20:52,159 --> 00:20:54,960
you have the think cell

530
00:20:54,960 --> 00:20:56,720
string

531
00:20:56,720 --> 00:21:00,080
actually a directory a named think cell

532
00:21:00,080 --> 00:21:01,440
then it's okay

533
00:21:01,440 --> 00:21:02,720
so

534
00:21:02,720 --> 00:21:05,120
i just asked myself what is it actually

535
00:21:05,120 --> 00:21:07,360
i think that it seems to be a company

536
00:21:07,360 --> 00:21:12,559
which is uh actually um making uh

537
00:21:12,960 --> 00:21:15,760
tools for excel which are injecting

538
00:21:15,760 --> 00:21:18,080
index and office application i don't

539
00:21:18,080 --> 00:21:19,919
know they're actually looking for

540
00:21:19,919 --> 00:21:22,400
reverse engineers so it is a good idea

541
00:21:22,400 --> 00:21:23,919
about what uh

542
00:21:23,919 --> 00:21:26,400
the kind of jobs they're actually doing

543
00:21:26,400 --> 00:21:29,360
but okay it's this is

544
00:21:29,360 --> 00:21:30,890
authorized for um

545
00:21:30,890 --> 00:21:32,240
[Music]

546
00:21:32,240 --> 00:21:33,600
in defender

547
00:21:33,600 --> 00:21:37,360
if you are creating a dot exe file in

548
00:21:37,360 --> 00:21:39,919
anywhere in the digital in

549
00:21:39,919 --> 00:21:41,840
anywhere

550
00:21:41,840 --> 00:21:44,080
where you pass contains uh directory

551
00:21:44,080 --> 00:21:46,080
name is a things i'm sorry

552
00:21:46,080 --> 00:21:49,120
then it's it's uh so let's check for it

553
00:21:49,120 --> 00:21:51,679
um here you can see that uh

554
00:21:51,679 --> 00:21:54,799
i'm creating a file in a think cell but

555
00:21:54,799 --> 00:21:56,799
with only one l

556
00:21:56,799 --> 00:21:59,760
in it is blocked but if you change it

557
00:21:59,760 --> 00:22:02,480
and create it in the just uh directory

558
00:22:02,480 --> 00:22:04,960
name think so then

559
00:22:04,960 --> 00:22:07,520
the file is created i can launch it and

560
00:22:07,520 --> 00:22:09,200
there is just a

561
00:22:09,200 --> 00:22:10,559
dummy test

562
00:22:10,559 --> 00:22:13,280
so hey embarrass it

563
00:22:13,280 --> 00:22:15,280
um actually there are some other bypass

564
00:22:15,280 --> 00:22:17,280
that are already documented there are

565
00:22:17,280 --> 00:22:20,240
some links um this bypasses doesn't use

566
00:22:20,240 --> 00:22:23,480
the same id they are more related to

567
00:22:23,480 --> 00:22:24,640
[Music]

568
00:22:24,640 --> 00:22:26,799
the way uh isr

569
00:22:26,799 --> 00:22:28,480
is actually checking things so for

570
00:22:28,480 --> 00:22:31,120
instance uh it's checking that an office

571
00:22:31,120 --> 00:22:34,480
application is um creating a dot exe so

572
00:22:34,480 --> 00:22:37,200
the goal of the bypass is to

573
00:22:37,200 --> 00:22:39,840
create and intermediate processes which

574
00:22:39,840 --> 00:22:43,520
will then create the file for instance

575
00:22:43,520 --> 00:22:45,840
uh this is all the well documented if

576
00:22:45,840 --> 00:22:48,080
you want to have a look at that

577
00:22:48,080 --> 00:22:50,000
but still

578
00:22:50,000 --> 00:22:52,320
my short conclusion here is that even by

579
00:22:52,320 --> 00:22:55,200
buses exits uh i think it's could still

580
00:22:55,200 --> 00:22:58,480
blocks and alerts about attacker atoms

581
00:22:58,480 --> 00:23:00,400
so

582
00:23:00,400 --> 00:23:01,919
story is the same thing if you want to

583
00:23:01,919 --> 00:23:03,760
see high-tech attackers let's start by

584
00:23:03,760 --> 00:23:06,000
just removing the ones that you can

585
00:23:06,000 --> 00:23:06,880
catch

586
00:23:06,880 --> 00:23:09,840
that way

587
00:23:09,919 --> 00:23:13,600
remove the noises actually

588
00:23:14,000 --> 00:23:16,320
if you look if you still look at the

589
00:23:16,320 --> 00:23:17,440
rules there

590
00:23:17,440 --> 00:23:19,120
are just a few additives that i want to

591
00:23:19,120 --> 00:23:21,520
show you so for instance here are the

592
00:23:21,520 --> 00:23:23,919
bus exclusion for control folder

593
00:23:23,919 --> 00:23:25,280
accessible

594
00:23:25,280 --> 00:23:26,799
you have teams

595
00:23:26,799 --> 00:23:28,960
in its microsoft teams

596
00:23:28,960 --> 00:23:31,520
so it is okay for teams to

597
00:23:31,520 --> 00:23:33,840
to make change

598
00:23:33,840 --> 00:23:36,960
the updates the updater of teams is

599
00:23:36,960 --> 00:23:40,640
whitelisted for the table

600
00:23:40,640 --> 00:23:43,600
you have some uh hidden words like the

601
00:23:43,600 --> 00:23:46,080
alplac test for icer

602
00:23:46,080 --> 00:23:48,000
i saw

603
00:23:48,000 --> 00:23:49,120
which is

604
00:23:49,120 --> 00:23:51,279
likely um a test

605
00:23:51,279 --> 00:23:52,799
rule but

606
00:23:52,799 --> 00:23:55,279
it is in production you can enable it

607
00:23:55,279 --> 00:23:58,640
or you have some tests also for a few uh

608
00:23:58,640 --> 00:24:02,720
domain test test domain of microsoft

609
00:24:02,720 --> 00:24:04,880
you also have not yet published tours uh

610
00:24:04,880 --> 00:24:07,120
when i performed this work very early

611
00:24:07,120 --> 00:24:09,760
this year uh the black abuse of in the

612
00:24:09,760 --> 00:24:12,400
wild expected vulnerable signed

613
00:24:12,400 --> 00:24:14,960
drivers was a rule which wasn't probably

614
00:24:14,960 --> 00:24:18,480
yet published but uh already in the in

615
00:24:18,480 --> 00:24:21,760
the defender so we can solve

616
00:24:21,760 --> 00:24:23,840
this word before it was actually

617
00:24:23,840 --> 00:24:24,960
presented

618
00:24:24,960 --> 00:24:28,080
uh now you know it's

619
00:24:30,840 --> 00:24:33,279
published you can also

620
00:24:33,279 --> 00:24:34,559
look at

621
00:24:34,559 --> 00:24:36,400
the block executable content from email

622
00:24:36,400 --> 00:24:39,039
client and webmail and ask yourself

623
00:24:39,039 --> 00:24:41,840
what are what is a webmail for

624
00:24:41,840 --> 00:24:43,120
microsoft

625
00:24:43,120 --> 00:24:44,159
you can do

626
00:24:44,159 --> 00:24:46,799
and if you look at uh oh it's made in

627
00:24:46,799 --> 00:24:48,000
its mail

628
00:24:48,000 --> 00:24:49,679
actually there is a

629
00:24:49,679 --> 00:24:51,360
method which is named easily mail

630
00:24:51,360 --> 00:24:53,039
download url

631
00:24:53,039 --> 00:24:55,279
and if you look at it it's actually

632
00:24:55,279 --> 00:24:57,200
checking if you are coming from

633
00:24:57,200 --> 00:24:58,720
mail.google

634
00:24:58,720 --> 00:25:00,960
or

635
00:25:02,159 --> 00:25:05,039
and if so then your web made and then it

636
00:25:05,039 --> 00:25:09,360
will consider to block the executable

637
00:25:12,159 --> 00:25:13,600
last one

638
00:25:13,600 --> 00:25:15,679
the block executable fries from running

639
00:25:15,679 --> 00:25:17,919
unless they emit a prevalent age

640
00:25:17,919 --> 00:25:20,400
or trusted list criterium

641
00:25:20,400 --> 00:25:23,120
actually there is an exclusion

642
00:25:23,120 --> 00:25:24,880
if you install a

643
00:25:24,880 --> 00:25:28,400
software using your chipotle

644
00:25:28,400 --> 00:25:31,679
which is implemented in this room

645
00:25:31,679 --> 00:25:35,279
okay so now that we have uh just um

646
00:25:35,279 --> 00:25:39,360
early look at how the defender

647
00:25:39,360 --> 00:25:41,919
is rules have been made

648
00:25:41,919 --> 00:25:44,159
it seems to be interesting to

649
00:25:44,159 --> 00:25:45,840
try to understand more

650
00:25:45,840 --> 00:25:48,000
what you can find in this signature

651
00:25:48,000 --> 00:25:50,559
database we just look at the lua scribes

652
00:25:50,559 --> 00:25:52,799
script that we

653
00:25:52,799 --> 00:25:56,240
grab and just decompile but maybe there

654
00:25:56,240 --> 00:25:58,000
are all other things

655
00:25:58,000 --> 00:26:00,720
not especially related to isr but maybe

656
00:26:00,720 --> 00:26:03,679
related to other

657
00:26:03,679 --> 00:26:05,440
malware signatures for instance or

658
00:26:05,440 --> 00:26:08,240
configuration

659
00:26:08,640 --> 00:26:11,039
okay uh so for now we'll need scratch

660
00:26:11,039 --> 00:26:13,200
the surface and we

661
00:26:13,200 --> 00:26:16,720
want to understand uh how the

662
00:26:16,720 --> 00:26:18,640
signature format is made

663
00:26:18,640 --> 00:26:21,520
so the color truss uh when

664
00:26:21,520 --> 00:26:24,559
the signatures are pressed

665
00:26:24,559 --> 00:26:27,520
is this one and the idea is that

666
00:26:27,520 --> 00:26:30,400
it will decompress the vdm file and then

667
00:26:30,400 --> 00:26:32,240
dispatch

668
00:26:32,240 --> 00:26:34,559
for each segmenter

669
00:26:34,559 --> 00:26:35,679
to the

670
00:26:35,679 --> 00:26:39,440
callback which are made to under them so

671
00:26:39,440 --> 00:26:42,159
the basic format is like that you have a

672
00:26:42,159 --> 00:26:44,559
scenario type on one byte and then the

673
00:26:44,559 --> 00:26:47,520
size and then the data of the signature

674
00:26:47,520 --> 00:26:49,840
so basically here we have the

675
00:26:49,840 --> 00:26:53,360
5c uh signature type than its size then

676
00:26:53,360 --> 00:26:55,840
it's related to data

677
00:26:55,840 --> 00:26:57,679
to understand what is

678
00:26:57,679 --> 00:26:58,640
what

679
00:26:58,640 --> 00:27:01,840
the type is corresponding to 5c we have

680
00:27:01,840 --> 00:27:04,080
a get 6type function

681
00:27:04,080 --> 00:27:04,840
in

682
00:27:04,840 --> 00:27:08,240
dpdb which uh detailer what are the

683
00:27:08,240 --> 00:27:10,640
actually named debug name for these

684
00:27:10,640 --> 00:27:13,039
signatures so for instance d5c is

685
00:27:13,039 --> 00:27:15,120
signature type thread begin

686
00:27:15,120 --> 00:27:16,960
and it would be useful

687
00:27:16,960 --> 00:27:18,320
to understand

688
00:27:18,320 --> 00:27:21,440
to understand what this network is about

689
00:27:21,440 --> 00:27:23,600
the signatures are distributed in

690
00:27:23,600 --> 00:27:24,880
modules

691
00:27:24,880 --> 00:27:27,039
which each register some callbacks so

692
00:27:27,039 --> 00:27:28,240
for instance

693
00:27:28,240 --> 00:27:31,520
some of the modules are the ufs

694
00:27:31,520 --> 00:27:34,559
are in the ufs category um which

695
00:27:34,559 --> 00:27:37,039
register is mind function like the pdf

696
00:27:37,039 --> 00:27:38,080
one

697
00:27:38,080 --> 00:27:40,480
this is my function will try to seek for

698
00:27:40,480 --> 00:27:43,440
pdf header and then uh

699
00:27:43,440 --> 00:27:45,200
if you find it both

700
00:27:45,200 --> 00:27:46,159
things

701
00:27:46,159 --> 00:27:47,520
and the one we

702
00:27:47,520 --> 00:27:50,720
are interested by is the reg control

703
00:27:50,720 --> 00:27:51,919
type

704
00:27:51,919 --> 00:27:54,720
which will uh register a signature type

705
00:27:54,720 --> 00:27:57,520
uh the byte we just talked about and

706
00:27:57,520 --> 00:28:00,480
sometimes callbacks

707
00:28:00,480 --> 00:28:03,200
and this callbacks will be

708
00:28:03,200 --> 00:28:05,440
will be called uh when

709
00:28:05,440 --> 00:28:08,960
the vdm files are passed

710
00:28:08,960 --> 00:28:11,600
for instance the signature type and

711
00:28:11,600 --> 00:28:13,279
script

712
00:28:13,279 --> 00:28:17,760
will register a function name push sp to

713
00:28:17,760 --> 00:28:20,880
pass the it's a corresponding entry

714
00:28:20,880 --> 00:28:22,559
so we have to

715
00:28:22,559 --> 00:28:26,240
so here is a list of all the models

716
00:28:26,240 --> 00:28:28,320
that you can find in defender a lot of

717
00:28:28,320 --> 00:28:29,360
rocks

718
00:28:29,360 --> 00:28:31,039
of course i didn't

719
00:28:31,039 --> 00:28:33,279
have a look at all of them

720
00:28:33,279 --> 00:28:35,679
and um

721
00:28:35,679 --> 00:28:38,720
just for some give you some statistics

722
00:28:38,720 --> 00:28:40,559
here is the reportation of type in the

723
00:28:40,559 --> 00:28:43,279
nde spiral database

724
00:28:43,279 --> 00:28:45,840
so the thing is that for each segmental

725
00:28:45,840 --> 00:28:48,399
format we have to reverse the passing

726
00:28:48,399 --> 00:28:51,120
function and to understand what it is

727
00:28:51,120 --> 00:28:54,080
looking for and what are

728
00:28:54,080 --> 00:28:56,399
what are the data in it

729
00:28:56,399 --> 00:28:58,799
this is an ongoing work and only made it

730
00:28:58,799 --> 00:29:00,799
for a few of them

731
00:29:00,799 --> 00:29:01,760
but

732
00:29:01,760 --> 00:29:03,279
they'll talk a

733
00:29:03,279 --> 00:29:04,820
bit about a bit later

734
00:29:04,820 --> 00:29:06,320
[Music]

735
00:29:06,320 --> 00:29:08,880
but it's still an ongoing world so from

736
00:29:08,880 --> 00:29:11,200
what i

737
00:29:11,360 --> 00:29:13,200
in a understand file

738
00:29:13,200 --> 00:29:15,039
you have a lot of

739
00:29:15,039 --> 00:29:16,720
threads

740
00:29:16,720 --> 00:29:18,080
which are designed by incinerate

741
00:29:18,080 --> 00:29:19,840
signature type thread

742
00:29:19,840 --> 00:29:22,240
and inside the thread you have a

743
00:29:22,240 --> 00:29:24,880
different signature type that can be

744
00:29:24,880 --> 00:29:27,279
that can belong to a specific version

745
00:29:27,279 --> 00:29:28,399
uh

746
00:29:28,399 --> 00:29:30,799
which are designed by a senator type

747
00:29:30,799 --> 00:29:33,440
person check this network

748
00:29:33,440 --> 00:29:36,720
the same for all uh different derivation

749
00:29:36,720 --> 00:29:39,200
and um there are actually specific

750
00:29:39,200 --> 00:29:42,320
threats so for instance

751
00:29:42,799 --> 00:29:45,200
you have one friendly files

752
00:29:45,200 --> 00:29:46,559
thread

753
00:29:46,559 --> 00:29:49,120
which is made of a lot of ash

754
00:29:49,120 --> 00:29:51,760
which are used to waitlist files so here

755
00:29:51,760 --> 00:29:54,320
is an example

756
00:29:54,320 --> 00:29:56,640
another sweat which is uh

757
00:29:56,640 --> 00:29:58,240
actually very important is the

758
00:29:58,240 --> 00:30:01,120
infrastructure shared threats because

759
00:30:01,120 --> 00:30:03,679
from what i understand it contains a lot

760
00:30:03,679 --> 00:30:05,039
of commons

761
00:30:05,039 --> 00:30:05,840
like

762
00:30:05,840 --> 00:30:09,600
the lua script we saw before in isr

763
00:30:09,600 --> 00:30:11,039
it also contained

764
00:30:11,039 --> 00:30:13,440
the detection logic in the form of

765
00:30:13,440 --> 00:30:15,520
signature tree it also contains

766
00:30:15,520 --> 00:30:17,440
everything used in the sandbox for

767
00:30:17,440 --> 00:30:18,559
emulation

768
00:30:18,559 --> 00:30:20,559
and the root store which is used for

769
00:30:20,559 --> 00:30:22,880
instance for certificate checking

770
00:30:22,880 --> 00:30:27,520
you also have also a specific sweat like

771
00:30:27,520 --> 00:30:30,799
pdf scanner stream uh like css dot pdb

772
00:30:30,799 --> 00:30:32,799
it must stabilize test and things like

773
00:30:32,799 --> 00:30:34,480
that

774
00:30:34,480 --> 00:30:37,600
so if we get back to what we saw before

775
00:30:37,600 --> 00:30:39,919
the lua scenarios we

776
00:30:39,919 --> 00:30:42,720
which was the one used by isr

777
00:30:42,720 --> 00:30:45,679
if we uh dig in a bit more we think we

778
00:30:45,679 --> 00:30:47,760
saw that actually belonging to

779
00:30:47,760 --> 00:30:49,200
categories

780
00:30:49,200 --> 00:30:51,039
like infrastructure a signature

781
00:30:51,039 --> 00:30:52,720
validator

782
00:30:52,720 --> 00:30:54,880
so here is an example of a signature

783
00:30:54,880 --> 00:30:57,519
validator and this is an example of a

784
00:30:57,519 --> 00:30:59,279
post accommodation

785
00:30:59,279 --> 00:31:01,679
this is checking some some winnie

786
00:31:01,679 --> 00:31:02,960
parameter

787
00:31:02,960 --> 00:31:05,679
and this is another one which is uh

788
00:31:05,679 --> 00:31:07,519
checking things in the emulation and

789
00:31:07,519 --> 00:31:10,000
sandals

790
00:31:10,559 --> 00:31:13,840
another type is the dbvar which

791
00:31:13,840 --> 00:31:16,000
which i understand is it as a

792
00:31:16,000 --> 00:31:18,880
configuration variables um

793
00:31:18,880 --> 00:31:21,120
and which are sometimes mixed with

794
00:31:21,120 --> 00:31:23,360
version checks so this version is using

795
00:31:23,360 --> 00:31:25,600
this configuration and this version is

796
00:31:25,600 --> 00:31:26,880
using

797
00:31:26,880 --> 00:31:29,360
this configuration so r is an example of

798
00:31:29,360 --> 00:31:30,080
the

799
00:31:30,080 --> 00:31:33,120
mc process list or another one is the

800
00:31:33,120 --> 00:31:35,039
competitive security products you can

801
00:31:35,039 --> 00:31:36,880
see that there is a

802
00:31:36,880 --> 00:31:39,600
mcafee life in it

803
00:31:39,600 --> 00:31:42,240
and you also find things like

804
00:31:42,240 --> 00:31:44,320
intellig

805
00:31:44,320 --> 00:31:46,159
configuration which is an intel

806
00:31:46,159 --> 00:31:49,120
configuration file um she's using the

807
00:31:49,120 --> 00:31:50,880
intel tdt

808
00:31:50,880 --> 00:31:53,039
technology i don't have the time to

809
00:31:53,039 --> 00:31:57,440
introduce it here and you can find the

810
00:31:57,440 --> 00:32:00,559
classifier which are using it

811
00:32:00,559 --> 00:32:03,519
which are using a machine learning

812
00:32:03,519 --> 00:32:05,919
classifier you can or you can even

813
00:32:05,919 --> 00:32:07,360
extract

814
00:32:07,360 --> 00:32:10,080
the weights and reproduce some

815
00:32:10,080 --> 00:32:11,039
of the

816
00:32:11,039 --> 00:32:13,360
random forest

817
00:32:13,360 --> 00:32:15,200
three but this is for

818
00:32:15,200 --> 00:32:17,840
uh this is left as an exercise

819
00:32:17,840 --> 00:32:19,519
another thing is the

820
00:32:19,519 --> 00:32:21,200
str um

821
00:32:21,200 --> 00:32:22,399
signatures

822
00:32:22,399 --> 00:32:25,120
which are used to uh just look up for uh

823
00:32:25,120 --> 00:32:27,919
strings in fine so for instance you can

824
00:32:27,919 --> 00:32:30,240
find you can look up for command command

825
00:32:30,240 --> 00:32:32,000
lines you can look up in

826
00:32:32,000 --> 00:32:34,159
office macro it can look up in java

827
00:32:34,159 --> 00:32:35,600
files and so on

828
00:32:35,600 --> 00:32:37,760
and this is interesting because we can

829
00:32:37,760 --> 00:32:39,919
use it for evasion so for instance if

830
00:32:39,919 --> 00:32:42,799
i'm scanning the mascara client

831
00:32:42,799 --> 00:32:44,000
which is a

832
00:32:44,000 --> 00:32:46,799
stateless scanner

833
00:32:47,679 --> 00:32:49,679
the mv defender will say that okay this

834
00:32:49,679 --> 00:32:52,399
is a linux support scanner threads so i

835
00:32:52,399 --> 00:32:54,640
can look to the corresponding thread i

836
00:32:54,640 --> 00:32:56,480
can see that it's actually looking for

837
00:32:56,480 --> 00:32:58,640
some of our strings

838
00:32:58,640 --> 00:33:01,120
and just to be sure i'm making a file

839
00:33:01,120 --> 00:33:03,440
which just contains these things

840
00:33:03,440 --> 00:33:04,320
and

841
00:33:04,320 --> 00:33:06,799
but actually doing nothing

842
00:33:06,799 --> 00:33:09,760
i compile it and if i try to scan it

843
00:33:09,760 --> 00:33:12,799
it'll actually say yes uh i

844
00:33:12,799 --> 00:33:15,600
recognize it as a poor scandal so you

845
00:33:15,600 --> 00:33:17,440
correctly understand

846
00:33:17,440 --> 00:33:19,279
understood what is going on

847
00:33:19,279 --> 00:33:23,519
but okay what i can do now i can easily

848
00:33:23,519 --> 00:33:27,279
remove just these strings

849
00:33:27,919 --> 00:33:31,279
and if i do that and scan again

850
00:33:31,279 --> 00:33:34,080
it is no longer recognized as a thread

851
00:33:34,080 --> 00:33:37,360
and i can use the file i just evade the

852
00:33:37,360 --> 00:33:39,840
signatures

853
00:33:39,840 --> 00:33:41,760
the brute force

854
00:33:41,760 --> 00:33:44,480
techniques also works of course this

855
00:33:44,480 --> 00:33:48,159
method is just a bit more effective

856
00:33:48,880 --> 00:33:50,559
so

857
00:33:50,559 --> 00:33:53,519
another thing uh interesting is our

858
00:33:53,519 --> 00:33:55,440
signature updates

859
00:33:55,440 --> 00:33:58,159
um because the video file is very big

860
00:33:58,159 --> 00:34:00,880
but actually you also have um

861
00:34:00,880 --> 00:34:03,600
near to the base file baseline file you

862
00:34:03,600 --> 00:34:07,360
also have minor updates in a delta form

863
00:34:07,360 --> 00:34:10,079
the delta vdm are just contain delta

864
00:34:10,079 --> 00:34:14,079
blob which are actually merged

865
00:34:14,079 --> 00:34:15,839
during the passing

866
00:34:15,839 --> 00:34:17,040
so the

867
00:34:17,040 --> 00:34:18,719
process is quite simple

868
00:34:18,719 --> 00:34:21,760
the final data to parse is actually made

869
00:34:21,760 --> 00:34:24,159
of parts from the baseline and part for

870
00:34:24,159 --> 00:34:25,918
the delta blob

871
00:34:25,918 --> 00:34:28,000
you merge them and

872
00:34:28,000 --> 00:34:31,119
then you will pass the final data

873
00:34:31,119 --> 00:34:33,040
to under two

874
00:34:33,040 --> 00:34:35,679
to load the databases

875
00:34:35,679 --> 00:34:37,839
to fulfill the databases

876
00:34:37,839 --> 00:34:41,839
um so i during one month i grab all the

877
00:34:41,839 --> 00:34:43,280
updates i can

878
00:34:43,280 --> 00:34:45,440
uh just asking

879
00:34:45,440 --> 00:34:46,839
to a

880
00:34:46,839 --> 00:34:50,399
defender the updates and arrays the

881
00:34:50,399 --> 00:34:53,918
areas what i got the just

882
00:34:53,918 --> 00:34:56,320
some statistics on the version

883
00:34:56,320 --> 00:34:58,960
which is uh

884
00:35:00,000 --> 00:35:03,359
i have one update uh almost

885
00:35:03,359 --> 00:35:06,000
uh every two hours

886
00:35:06,000 --> 00:35:08,480
and like that i got some audits while

887
00:35:08,480 --> 00:35:11,599
updating so sometimes um

888
00:35:11,599 --> 00:35:12,480
the

889
00:35:12,480 --> 00:35:13,280
update

890
00:35:13,280 --> 00:35:16,310
just the update server give me back

891
00:35:16,310 --> 00:35:18,000
[Music]

892
00:35:18,000 --> 00:35:21,920
files that that are already have

893
00:35:21,920 --> 00:35:24,480
two or three hours

894
00:35:24,480 --> 00:35:26,400
before

895
00:35:26,400 --> 00:35:29,280
i got one broken update

896
00:35:29,280 --> 00:35:30,880
but um

897
00:35:30,880 --> 00:35:33,760
but well it is still working so what we

898
00:35:33,760 --> 00:35:36,000
can do with this update we can give them

899
00:35:36,000 --> 00:35:39,359
and for instance if we did what are

900
00:35:39,359 --> 00:35:41,280
what the files are

901
00:35:41,280 --> 00:35:44,079
added or removed in different files so

902
00:35:44,079 --> 00:35:47,200
what files were considered as friendly

903
00:35:47,200 --> 00:35:49,440
but actually now

904
00:35:49,440 --> 00:35:51,520
you have one example here the filezilla

905
00:35:51,520 --> 00:35:53,839
beside our setup

906
00:35:53,839 --> 00:35:56,079
which finally um

907
00:35:56,079 --> 00:35:58,079
include i think a spiral something like

908
00:35:58,079 --> 00:36:00,560
that or another one on a

909
00:36:00,560 --> 00:36:02,000
given circle

910
00:36:02,000 --> 00:36:05,680
we can also look at strategy changes uh

911
00:36:05,680 --> 00:36:08,560
here is an example where it was at first

912
00:36:08,560 --> 00:36:09,760
a static

913
00:36:09,760 --> 00:36:12,560
check then look for strings and then

914
00:36:12,560 --> 00:36:13,520
finally

915
00:36:13,520 --> 00:36:16,640
look for a path

916
00:36:16,720 --> 00:36:19,119
we also can look at what what is

917
00:36:19,119 --> 00:36:19,780
actually

918
00:36:19,780 --> 00:36:21,839
[Music]

919
00:36:21,839 --> 00:36:24,400
what currently interest

920
00:36:24,400 --> 00:36:27,359
microsoft defender team uh just by

921
00:36:27,359 --> 00:36:29,760
looking at what are the sweats being

922
00:36:29,760 --> 00:36:33,119
updated so here is an example uh in the

923
00:36:33,119 --> 00:36:35,599
in a recent update uh there are

924
00:36:35,599 --> 00:36:37,680
additional things for mirai for instance

925
00:36:37,680 --> 00:36:40,880
for instance i'm removing some of them

926
00:36:40,880 --> 00:36:42,000
all the

927
00:36:42,000 --> 00:36:43,280
threats

928
00:36:43,280 --> 00:36:46,640
uh we can also try to find a

929
00:36:46,640 --> 00:36:49,680
cnc so using a recent example in the

930
00:36:49,680 --> 00:36:51,839
recent update of a

931
00:36:51,839 --> 00:36:55,920
url which is checked inside

932
00:36:55,920 --> 00:36:59,200
an office macro but if we

933
00:36:59,200 --> 00:37:00,079
run

934
00:37:00,079 --> 00:37:04,320
the the file actually the actual url is

935
00:37:04,320 --> 00:37:05,839
considered okay

936
00:37:05,839 --> 00:37:07,359
and the

937
00:37:07,359 --> 00:37:10,000
rejection is also considered

938
00:37:10,000 --> 00:37:11,200
fine so

939
00:37:11,200 --> 00:37:13,760
it's checking for the

940
00:37:13,760 --> 00:37:16,240
macro but not checking for

941
00:37:16,240 --> 00:37:19,839
the usual the actual measure of use

942
00:37:19,839 --> 00:37:22,640
you also have an unnecessary changes so

943
00:37:22,640 --> 00:37:24,880
for instance some of the viewer scripts

944
00:37:24,880 --> 00:37:27,599
still have their debug name and

945
00:37:27,599 --> 00:37:30,079
from what i understand this is due to

946
00:37:30,079 --> 00:37:31,760
the

947
00:37:31,760 --> 00:37:33,359
compilation chain

948
00:37:33,359 --> 00:37:34,839
the name is

949
00:37:34,839 --> 00:37:39,839
moving doing checks and you you finally

950
00:37:39,839 --> 00:37:43,200
get changes but uh related to

951
00:37:43,200 --> 00:37:45,920
debug path so delta file are distributed

952
00:37:45,920 --> 00:37:47,440
to the wall planets

953
00:37:47,440 --> 00:37:51,000
just for a

954
00:37:52,800 --> 00:37:54,960
so just to conclude um

955
00:37:54,960 --> 00:37:57,280
we just look at how to look at windows

956
00:37:57,280 --> 00:37:59,920
defender segments how isr rules are

957
00:37:59,920 --> 00:38:01,680
actually implemented or

958
00:38:01,680 --> 00:38:04,960
other oh they are actually checked

959
00:38:04,960 --> 00:38:08,000
uh and a deeper look on the signatures

960
00:38:08,000 --> 00:38:08,880
and

961
00:38:08,880 --> 00:38:10,400
our

962
00:38:10,400 --> 00:38:12,320
anteriors

963
00:38:12,320 --> 00:38:14,640
is actually working i hope you learned

964
00:38:14,640 --> 00:38:17,280
something and i wish you will want to

965
00:38:17,280 --> 00:38:19,359
take a look at it

966
00:38:19,359 --> 00:38:20,560
thank you

967
00:38:20,560 --> 00:38:21,280
and

968
00:38:21,280 --> 00:38:24,480
i think it's time for q a

969
00:38:24,480 --> 00:38:34,059
[Music]

970
00:38:34,560 --> 00:38:36,640
you

