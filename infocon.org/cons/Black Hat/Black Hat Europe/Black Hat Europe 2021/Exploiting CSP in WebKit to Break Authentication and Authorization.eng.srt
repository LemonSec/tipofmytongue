1
00:00:00,910 --> 00:00:09,200
[Music]

2
00:00:09,200 --> 00:00:11,759
hello everyone i would first like to

3
00:00:11,759 --> 00:00:14,320
thank you all for attending our talk

4
00:00:14,320 --> 00:00:17,039
the title of our talk is exploiting csp

5
00:00:17,039 --> 00:00:19,119
in webkit to break authentication and

6
00:00:19,119 --> 00:00:20,720
authorization

7
00:00:20,720 --> 00:00:21,520
now

8
00:00:21,520 --> 00:00:23,600
have you ever had an access to a xero

9
00:00:23,600 --> 00:00:25,599
debug which you could possibly use to

10
00:00:25,599 --> 00:00:27,439
take over accounts on any platform you

11
00:00:27,439 --> 00:00:28,400
want

12
00:00:28,400 --> 00:00:29,279
no

13
00:00:29,279 --> 00:00:31,279
well we kinda did

14
00:00:31,279 --> 00:00:33,200
today in this talk we'll talk about a

15
00:00:33,200 --> 00:00:36,000
bug that enabled us to take over

16
00:00:36,000 --> 00:00:37,920
user accounts and most of the web

17
00:00:37,920 --> 00:00:40,239
applications out there but first a

18
00:00:40,239 --> 00:00:43,040
little bit about us

19
00:00:43,040 --> 00:00:45,360
my name is sachin takuri and i am a

20
00:00:45,360 --> 00:00:47,200
co-founder and security engineer at

21
00:00:47,200 --> 00:00:49,840
threatnix where i do mostly wave and

22
00:00:49,840 --> 00:00:52,160
mobile security staff and i'm also a

23
00:00:52,160 --> 00:00:54,000
co-founder of threatcon a security

24
00:00:54,000 --> 00:00:57,360
conference based in nepal

25
00:00:57,760 --> 00:01:00,399
hi i'm prakas i'm a co-founder and

26
00:01:00,399 --> 00:01:02,960
security engineer at rednecks i spend

27
00:01:02,960 --> 00:01:05,199
most of my time hacking new applications

28
00:01:05,199 --> 00:01:07,200
and sometimes playing with javascript

29
00:01:07,200 --> 00:01:09,200
and new browser apis

30
00:01:09,200 --> 00:01:11,520
in fact this hotel is best chance

31
00:01:11,520 --> 00:01:13,439
planning that we came across while

32
00:01:13,439 --> 00:01:16,479
playing with csb jupiter

33
00:01:16,479 --> 00:01:18,880
now before we move on deep into the

34
00:01:18,880 --> 00:01:21,119
presentation here's a quick pldr version

35
00:01:21,119 --> 00:01:22,640
of the talk

36
00:01:22,640 --> 00:01:25,439
long story short today we will discuss a

37
00:01:25,439 --> 00:01:27,439
vulnerability that was reported to apple

38
00:01:27,439 --> 00:01:29,360
that apple didn't consider severe enough

39
00:01:29,360 --> 00:01:31,040
to fix quickly

40
00:01:31,040 --> 00:01:33,200
which when then after waiting for a

41
00:01:33,200 --> 00:01:35,360
significant amount of time we decided to

42
00:01:35,360 --> 00:01:38,000
exploit and earn some bounties by

43
00:01:38,000 --> 00:01:40,560
reporting them to the pub body programs

44
00:01:40,560 --> 00:01:42,799
the bug was in csp implementation of

45
00:01:42,799 --> 00:01:44,880
webkit a browser engine used by safari

46
00:01:44,880 --> 00:01:47,200
web browser as well as all ios web

47
00:01:47,200 --> 00:01:50,560
browsers including firefox and chrome

48
00:01:50,560 --> 00:01:53,280
the failure of webkit to adhere to w3c

49
00:01:53,280 --> 00:01:55,680
specification when a csv violation event

50
00:01:55,680 --> 00:01:58,320
is triggered leaked cross-site info

51
00:01:58,320 --> 00:02:00,479
cross-site destination url while

52
00:02:00,479 --> 00:02:02,399
redirecting from one origin to a

53
00:02:02,399 --> 00:02:04,960
different one combined this with common

54
00:02:04,960 --> 00:02:06,799
practice of implementing sso's

55
00:02:06,799 --> 00:02:08,878
cross-site redirects to authenticate and

56
00:02:08,878 --> 00:02:12,080
authorize we were able to steal codes

57
00:02:12,080 --> 00:02:14,959
access token or any other secrets that

58
00:02:14,959 --> 00:02:17,360
were part of the leaked url which we

59
00:02:17,360 --> 00:02:20,080
could then further use arbitrarily

60
00:02:20,080 --> 00:02:22,319
this allowed us to carry out attacks

61
00:02:22,319 --> 00:02:24,239
including but not limited to account

62
00:02:24,239 --> 00:02:27,280
takeovers csrf and sensitive information

63
00:02:27,280 --> 00:02:29,280
disclosures

64
00:02:29,280 --> 00:02:30,400
moving on

65
00:02:30,400 --> 00:02:33,200
now we will discuss few technologies and

66
00:02:33,200 --> 00:02:34,800
concepts before

67
00:02:34,800 --> 00:02:36,879
moving on to the vulnerabilities

68
00:02:36,879 --> 00:02:40,319
sso starting with sso have you ever seen

69
00:02:40,319 --> 00:02:42,239
these buttons where you can log in using

70
00:02:42,239 --> 00:02:44,400
facebook or google accounts

71
00:02:44,400 --> 00:02:46,400
on a third-party website and wondered

72
00:02:46,400 --> 00:02:48,080
how this works

73
00:02:48,080 --> 00:02:50,239
these features work through a technology

74
00:02:50,239 --> 00:02:52,080
known as sso

75
00:02:52,080 --> 00:02:54,239
single sign-on also commonly known as

76
00:02:54,239 --> 00:02:56,800
sso is a technology that provides

77
00:02:56,800 --> 00:02:59,280
centralized authentication service

78
00:02:59,280 --> 00:03:01,440
generally users are asked to provide the

79
00:03:01,440 --> 00:03:03,280
single set of credentials and

80
00:03:03,280 --> 00:03:05,280
authentication to all other applications

81
00:03:05,280 --> 00:03:06,720
are verified through a centralized

82
00:03:06,720 --> 00:03:08,560
authentication service

83
00:03:08,560 --> 00:03:10,800
its ease of use and effectiveness has

84
00:03:10,800 --> 00:03:13,040
made sso really popular among modern

85
00:03:13,040 --> 00:03:15,360
applications in addition to being simple

86
00:03:15,360 --> 00:03:16,400
and easy

87
00:03:16,400 --> 00:03:18,879
to use sso is also considered more

88
00:03:18,879 --> 00:03:20,080
secure

89
00:03:20,080 --> 00:03:22,319
sso commonly works by generating an

90
00:03:22,319 --> 00:03:24,319
authentication token which is then

91
00:03:24,319 --> 00:03:25,840
passed to other applications and

92
00:03:25,840 --> 00:03:27,200
services

93
00:03:27,200 --> 00:03:30,080
authentication token enables services to

94
00:03:30,080 --> 00:03:32,879
verify and authorize an identity which

95
00:03:32,879 --> 00:03:35,599
is why securing and making sure that the

96
00:03:35,599 --> 00:03:38,080
authentication tokens are kept safely is

97
00:03:38,080 --> 00:03:41,040
of utmost importance

98
00:03:41,040 --> 00:03:44,159
well i assume we all know what cfp is

99
00:03:44,159 --> 00:03:46,080
and but let's just revisit it very

100
00:03:46,080 --> 00:03:47,440
quickly

101
00:03:47,440 --> 00:03:50,319
currently reports here csp is a set of

102
00:03:50,319 --> 00:03:53,599
policy or rules defining how projects to

103
00:03:53,599 --> 00:03:57,200
load resources like javascript or css or

104
00:03:57,200 --> 00:03:59,519
images and whether to allow or deny

105
00:03:59,519 --> 00:04:01,280
excuse me

106
00:04:01,280 --> 00:04:04,159
it is defined using an sql response area

107
00:04:04,159 --> 00:04:06,000
called connectivity policy and like

108
00:04:06,000 --> 00:04:08,720
shown here and it can also be defined

109
00:04:08,720 --> 00:04:11,200
using meta tag with exclusions like

110
00:04:11,200 --> 00:04:13,120
edible dri

111
00:04:13,120 --> 00:04:14,720
csp has been

112
00:04:14,720 --> 00:04:17,680
around since 2010 and is now supported

113
00:04:17,680 --> 00:04:19,600
by all modern browsers

114
00:04:19,600 --> 00:04:21,120
we can also see it being widely

115
00:04:21,120 --> 00:04:23,840
implemented in uh with juvenile apps and

116
00:04:23,840 --> 00:04:25,360
a lot of improvements happening over the

117
00:04:25,360 --> 00:04:27,040
years

118
00:04:27,040 --> 00:04:29,120
setting the cs behavior still seems to

119
00:04:29,120 --> 00:04:31,520
be a hard task because it depends on our

120
00:04:31,520 --> 00:04:33,840
resources being used on each particular

121
00:04:33,840 --> 00:04:36,320
phase their site that's why there is no

122
00:04:36,320 --> 00:04:39,120
standard recommendation or something

123
00:04:39,120 --> 00:04:42,360
as default

124
00:04:43,600 --> 00:04:45,759
i think it's not that uncommon to make

125
00:04:45,759 --> 00:04:47,919
mistakes while implementing mechanical

126
00:04:47,919 --> 00:04:51,199
policy and for that reason we also have

127
00:04:51,199 --> 00:04:52,639
something called

128
00:04:52,639 --> 00:04:55,199
currency repository for the only carrier

129
00:04:55,199 --> 00:04:58,160
and what it does is instead of actually

130
00:04:58,160 --> 00:05:00,160
hearing the policy in action it only

131
00:05:00,160 --> 00:05:02,880
reports violations which makes it easier

132
00:05:02,880 --> 00:05:05,120
to develop a policy is working as

133
00:05:05,120 --> 00:05:06,639
intended or not

134
00:05:06,639 --> 00:05:09,360
so when it comes to csp we always have

135
00:05:09,360 --> 00:05:11,840
what you call value chipboards because

136
00:05:11,840 --> 00:05:13,280
what if a user tries to load a

137
00:05:13,280 --> 00:05:15,759
restrictor which is right in that case

138
00:05:15,759 --> 00:05:18,000
we browse block requests and splash

139
00:05:18,000 --> 00:05:20,160
about hdfield and there are currently

140
00:05:20,160 --> 00:05:22,320
four ways of cutting dispatch quotes

141
00:05:22,320 --> 00:05:24,160
which is visible directly everybody

142
00:05:24,160 --> 00:05:26,479
already directed report to recording

143
00:05:26,479 --> 00:05:28,800
observer and security policy evaluation

144
00:05:28,800 --> 00:05:30,000
event

145
00:05:30,000 --> 00:05:31,600
throughout the talk we'll be using

146
00:05:31,600 --> 00:05:33,520
severe reports evaluation event for

147
00:05:33,520 --> 00:05:35,280
easier understanding

148
00:05:35,280 --> 00:05:37,039
the report in general contains

149
00:05:37,039 --> 00:05:39,360
information on what caused the value

150
00:05:39,360 --> 00:05:42,320
like validity directive block uri or

151
00:05:42,320 --> 00:05:45,199
your id is requested and so on

152
00:05:45,199 --> 00:05:47,440
i guess we'll almost have scene areas

153
00:05:47,440 --> 00:05:48,639
like this

154
00:05:48,639 --> 00:05:51,199
browse controlled image on the right

155
00:05:51,199 --> 00:05:54,160
and that's basically a csv value code

156
00:05:54,160 --> 00:05:56,960
and if you notice it closes the url the

157
00:05:56,960 --> 00:06:00,000
user tried to load that is evil.com

158
00:06:00,000 --> 00:06:02,560
though it's not that sensitive here but

159
00:06:02,560 --> 00:06:05,520
it could be if it's a result i figured

160
00:06:05,520 --> 00:06:06,560
and

161
00:06:06,560 --> 00:06:08,479
to avoid looking such sensitive

162
00:06:08,479 --> 00:06:11,680
information uh w3s w

163
00:06:11,680 --> 00:06:14,160
recommends detergents only include the

164
00:06:14,160 --> 00:06:15,600
origin of the

165
00:06:15,600 --> 00:06:17,440
original request

166
00:06:17,440 --> 00:06:20,560
the image on the bottom is from csp 1.0

167
00:06:20,560 --> 00:06:22,000
candidate recommendation candidate

168
00:06:22,000 --> 00:06:24,720
recommendation from general and even

169
00:06:24,720 --> 00:06:28,319
then we had such cases uncovered it says

170
00:06:28,319 --> 00:06:30,319
the evaluation of flowing mechanism has

171
00:06:30,319 --> 00:06:32,160
been designed in a way to mitigate the

172
00:06:32,160 --> 00:06:34,319
possibilities of probing the behavior of

173
00:06:34,319 --> 00:06:35,840
another server

174
00:06:35,840 --> 00:06:38,560
and it also explains why that is if a

175
00:06:38,560 --> 00:06:40,400
violation report contain the full block

176
00:06:40,400 --> 00:06:42,400
url the evaluation of building

177
00:06:42,400 --> 00:06:44,240
mechanical might contain sensitive

178
00:06:44,240 --> 00:06:46,080
information containing the redirected

179
00:06:46,080 --> 00:06:48,560
uri

180
00:06:50,960 --> 00:06:52,960
already explained uh it's a typical

181
00:06:52,960 --> 00:06:56,240
space for asos and aurora and so

182
00:06:56,240 --> 00:06:59,120
that's it's a vulnerability and so on

183
00:06:59,120 --> 00:07:01,280
however if you notice it recommends

184
00:07:01,280 --> 00:07:03,520
including people reason at the docuri

185
00:07:03,520 --> 00:07:05,759
which is still an issue and we have a

186
00:07:05,759 --> 00:07:09,440
long history of reports on that

187
00:07:10,560 --> 00:07:13,199
the first launch from 2013 is by igor

188
00:07:13,199 --> 00:07:15,360
hamako when siskiyou are still in its

189
00:07:15,360 --> 00:07:16,560
infancy

190
00:07:16,560 --> 00:07:18,800
he demonstrated what we could achieve by

191
00:07:18,800 --> 00:07:22,319
abusing csp's block uri directory

192
00:07:22,319 --> 00:07:24,319
this hasn't coded directly from his blog

193
00:07:24,319 --> 00:07:27,199
post where he says we can use csp3 to

194
00:07:27,199 --> 00:07:29,360
detect if a user has authorized some

195
00:07:29,360 --> 00:07:32,160
apps or files because all authorized

196
00:07:32,160 --> 00:07:34,160
apps will redirect to their home page

197
00:07:34,160 --> 00:07:36,880
instead of login or authorization page

198
00:07:36,880 --> 00:07:38,720
for example if you have already

199
00:07:38,720 --> 00:07:40,560
authorized instagram on a facebook

200
00:07:40,560 --> 00:07:44,960
account sending a request to facebook or

201
00:07:47,280 --> 00:07:48,240
so

202
00:07:48,240 --> 00:07:50,639
yeah that's the general case now and

203
00:07:50,639 --> 00:07:52,720
we've found several identical quotes on

204
00:07:52,720 --> 00:07:54,879
chromium tissues working for using that

205
00:07:54,879 --> 00:07:57,680
block uri in one way or another uh using

206
00:07:57,680 --> 00:07:58,800
csp

207
00:07:58,800 --> 00:08:01,440
now we also found approach name leaking

208
00:08:01,440 --> 00:08:03,840
full docuri in 2020 which were very

209
00:08:03,840 --> 00:08:05,599
similar to ours and

210
00:08:05,599 --> 00:08:08,080
we'll talk about ours in the english

211
00:08:08,080 --> 00:08:09,759
language

212
00:08:09,759 --> 00:08:10,639
now

213
00:08:10,639 --> 00:08:13,039
after that history let's discuss the

214
00:08:13,039 --> 00:08:15,280
root cause of the vulnerability

215
00:08:15,280 --> 00:08:18,560
we can define a csv policy in such a way

216
00:08:18,560 --> 00:08:21,199
that where whenever a redirect happens

217
00:08:21,199 --> 00:08:23,360
to a domain with different origin

218
00:08:23,360 --> 00:08:25,680
also known as cross origin a csp

219
00:08:25,680 --> 00:08:28,240
violation occurs and a security policy

220
00:08:28,240 --> 00:08:30,479
violation event is fired

221
00:08:30,479 --> 00:08:32,919
as you can see in this figure our domain

222
00:08:32,919 --> 00:08:36,479
cm2.pw with described csp policy makes a

223
00:08:36,479 --> 00:08:39,039
fetch request to domain1.com

224
00:08:39,039 --> 00:08:40,880
the response header from domain one dot

225
00:08:40,880 --> 00:08:43,519
com contains a location header that now

226
00:08:43,519 --> 00:08:45,360
redirects to a domain with different

227
00:08:45,360 --> 00:08:47,680
origin domain two dot com

228
00:08:47,680 --> 00:08:50,880
but due to our csp policy the request to

229
00:08:50,880 --> 00:08:53,839
domain two dot com is blocked and a csp

230
00:08:53,839 --> 00:08:57,040
violation event is filed

231
00:08:57,040 --> 00:08:59,680
now when security policy violation event

232
00:08:59,680 --> 00:09:02,080
is fired it uses security policy

233
00:09:02,080 --> 00:09:04,560
violation event interface at target with

234
00:09:04,560 --> 00:09:06,560
different attributes while setting

235
00:09:06,560 --> 00:09:08,480
values of these attributes a failure by

236
00:09:08,480 --> 00:09:11,600
webkit to adhere to w3c specification

237
00:09:11,600 --> 00:09:13,839
resulted in leaking through your x

238
00:09:13,839 --> 00:09:16,000
redirection location in document url

239
00:09:16,000 --> 00:09:17,200
attribute

240
00:09:17,200 --> 00:09:19,279
as you can see in the example

241
00:09:19,279 --> 00:09:22,399
fb.com slash secret here redirects to

242
00:09:22,399 --> 00:09:25,519
facebook.com secretary then you can see

243
00:09:25,519 --> 00:09:27,360
difference in values per attribute

244
00:09:27,360 --> 00:09:30,480
document uri set by safari and other

245
00:09:30,480 --> 00:09:31,680
browsers

246
00:09:31,680 --> 00:09:34,240
while other browsers who have followed

247
00:09:34,240 --> 00:09:37,200
specification mentioned by w3c seems to

248
00:09:37,200 --> 00:09:40,160
set value of a uri with values from

249
00:09:40,160 --> 00:09:42,240
where original fetch request was made

250
00:09:42,240 --> 00:09:44,720
safari who failed to follow the w3c

251
00:09:44,720 --> 00:09:47,040
specification said those values with

252
00:09:47,040 --> 00:09:50,640
final redirection uri

253
00:09:50,640 --> 00:09:52,800
now you might be wondering how can this

254
00:09:52,800 --> 00:09:56,560
be exploited in sso allow me to explain

255
00:09:56,560 --> 00:09:58,320
as you can see in this figure here when

256
00:09:58,320 --> 00:10:01,760
a user loads example.com it first checks

257
00:10:01,760 --> 00:10:04,640
if the user is authenticated or not and

258
00:10:04,640 --> 00:10:07,120
if the user is not authenticated then as

259
00:10:07,120 --> 00:10:08,800
shown in the figure it will send the

260
00:10:08,800 --> 00:10:11,360
user to auth.example.com

261
00:10:11,360 --> 00:10:13,440
which is a processor domain that

262
00:10:13,440 --> 00:10:16,399
provides centralized authentication now

263
00:10:16,399 --> 00:10:18,399
after verifying the user the user is

264
00:10:18,399 --> 00:10:21,120
then redirected back to example.com with

265
00:10:21,120 --> 00:10:22,959
an authentication token

266
00:10:22,959 --> 00:10:25,360
now the general common practice while

267
00:10:25,360 --> 00:10:27,600
implementing sso is to use different

268
00:10:27,600 --> 00:10:29,440
subdomain or an entirely different

269
00:10:29,440 --> 00:10:31,440
domain which then doesn't meet the

270
00:10:31,440 --> 00:10:34,160
criteria to be defined as same origin so

271
00:10:34,160 --> 00:10:36,320
the final redirection that happens from

272
00:10:36,320 --> 00:10:39,040
assessor domain to the final domain are

273
00:10:39,040 --> 00:10:41,640
in the case as shown in the figure from

274
00:10:41,640 --> 00:10:44,480
auth.example.com to example.com will be

275
00:10:44,480 --> 00:10:46,880
cross our using thus allowing an

276
00:10:46,880 --> 00:10:48,880
attacker to steal the final redirection

277
00:10:48,880 --> 00:10:49,920
url

278
00:10:49,920 --> 00:10:51,920
in today's modern application where

279
00:10:51,920 --> 00:10:53,680
authentication and authorization are

280
00:10:53,680 --> 00:10:56,000
heavily dependent on technology such as

281
00:10:56,000 --> 00:10:59,519
oauth sso and jwt where secrets are

282
00:10:59,519 --> 00:11:01,360
passed through urls the leak of the

283
00:11:01,360 --> 00:11:04,000
final redirection url made applications

284
00:11:04,000 --> 00:11:06,399
using these technologies almost always

285
00:11:06,399 --> 00:11:08,240
plunderable

286
00:11:08,240 --> 00:11:10,560
the responsible disclosure didn't go at

287
00:11:10,560 --> 00:11:12,720
the whole details and if we first

288
00:11:12,720 --> 00:11:14,480
reported the variability

289
00:11:14,480 --> 00:11:17,680
safari into aj and had to wait for a few

290
00:11:17,680 --> 00:11:19,360
weeks before we even received an

291
00:11:19,360 --> 00:11:21,279
automatic technology

292
00:11:21,279 --> 00:11:23,200
after two months of waiting we finally

293
00:11:23,200 --> 00:11:25,920
received a reply on april 20 and george

294
00:11:25,920 --> 00:11:27,440
wright said

295
00:11:27,440 --> 00:11:28,959
this doesn't seem to cause a threat to

296
00:11:28,959 --> 00:11:31,360
webkit users i further went i want to

297
00:11:31,360 --> 00:11:33,920
explain that even after fixing the issue

298
00:11:33,920 --> 00:11:35,519
and attacker could gather the same

299
00:11:35,519 --> 00:11:38,079
information about monitoring webkit logs

300
00:11:38,079 --> 00:11:39,680
while running an attacker can group

301
00:11:39,680 --> 00:11:41,279
builders weapons

302
00:11:41,279 --> 00:11:43,519
to us it seemed as if they failed to

303
00:11:43,519 --> 00:11:45,200
understand the vulnerability and the

304
00:11:45,200 --> 00:11:46,800
risks it posed

305
00:11:46,800 --> 00:11:48,880
trent convinced them the time went by

306
00:11:48,880 --> 00:11:51,440
but we saw no progress at all so in

307
00:11:51,440 --> 00:11:54,000
january of 2021 after waiting for almost

308
00:11:54,000 --> 00:11:55,040
a year

309
00:11:55,040 --> 00:11:56,639
we decided to explore the potential

310
00:11:56,639 --> 00:11:58,880
referrability and divide by targeting

311
00:11:58,880 --> 00:12:01,920
book boundary programs

312
00:12:02,800 --> 00:12:05,360
and the exploit was simple we set up a

313
00:12:05,360 --> 00:12:08,800
page with csp as sum inside here which

314
00:12:08,800 --> 00:12:10,320
what is the domain we're sending

315
00:12:10,320 --> 00:12:12,560
requests to add an event listener for

316
00:12:12,560 --> 00:12:14,720
the reports evaluation and sending

317
00:12:14,720 --> 00:12:16,000
requests

318
00:12:16,000 --> 00:12:17,680
sending a request to an authorization

319
00:12:17,680 --> 00:12:19,680
line form issues a redirect to another

320
00:12:19,680 --> 00:12:21,760
domain with code or token appended to

321
00:12:21,760 --> 00:12:24,079
the url which is typically now which is

322
00:12:24,079 --> 00:12:27,040
cheap udks whereas and this multi only

323
00:12:27,040 --> 00:12:28,800
allows loading of resources from the

324
00:12:28,800 --> 00:12:31,360
face itself and you don't specify it

325
00:12:31,360 --> 00:12:34,160
that is after the example. up here

326
00:12:34,160 --> 00:12:36,399
so as certain said earlier and time to

327
00:12:36,399 --> 00:12:38,480
load we chose it from any of the domains

328
00:12:38,480 --> 00:12:40,720
with valid faults and triggered the

329
00:12:40,720 --> 00:12:42,720
reports evaluation event

330
00:12:42,720 --> 00:12:44,880
and the document uri then would have the

331
00:12:44,880 --> 00:12:47,440
value of the actual docurite containing

332
00:12:47,440 --> 00:12:49,839
code or

333
00:12:50,839 --> 00:12:53,519
click we've also prepared a playground

334
00:12:53,519 --> 00:12:55,680
for everyone to make it easier to

335
00:12:55,680 --> 00:12:58,079
experiment with the vulnerability

336
00:12:58,079 --> 00:12:59,839
the uses it's simple and pretty

337
00:12:59,839 --> 00:13:01,519
straightforward you're passing a number

338
00:13:01,519 --> 00:13:03,360
of parameters that's on and as some of

339
00:13:03,360 --> 00:13:05,120
the users on the left

340
00:13:05,120 --> 00:13:07,200
the pizza to progress is

341
00:13:07,200 --> 00:13:09,920
falsely using the domain attribute

342
00:13:09,920 --> 00:13:11,600
domain attribute from the first string

343
00:13:11,600 --> 00:13:13,440
and displays the

344
00:13:13,440 --> 00:13:16,000
to-do ads on the right uh

345
00:13:16,000 --> 00:13:18,160
there we added an exploit button as a

346
00:13:18,160 --> 00:13:21,600
workaround for igp that is intelligent

347
00:13:21,600 --> 00:13:23,200
prevention which certainly will explain

348
00:13:23,200 --> 00:13:24,800
a little later

349
00:13:24,800 --> 00:13:26,720
after a little bit in the end the

350
00:13:26,720 --> 00:13:29,200
defense issues a fetch question at the

351
00:13:29,200 --> 00:13:31,440
url specified interior spring which

352
00:13:31,440 --> 00:13:34,000
redirects another domain in a csv

353
00:13:34,000 --> 00:13:35,360
validation

354
00:13:35,360 --> 00:13:37,680
the even listener then catches the event

355
00:13:37,680 --> 00:13:41,360
and a printed spread token on the screen

356
00:13:41,360 --> 00:13:43,600
this source code for the playground is

357
00:13:43,600 --> 00:13:46,399
also on gita so feel free to use as you

358
00:13:46,399 --> 00:13:47,279
please

359
00:13:47,279 --> 00:13:49,920
click or contribute however you want

360
00:13:49,920 --> 00:13:52,160
so now it's demo time

361
00:13:52,160 --> 00:13:54,399
we have a sort demo here and this demo

362
00:13:54,399 --> 00:13:56,480
will demonstrate how an attacker can use

363
00:13:56,480 --> 00:13:58,480
this vulnerability to take over

364
00:13:58,480 --> 00:14:02,120
instagram accounts

365
00:16:11,839 --> 00:16:12,800
now

366
00:16:12,800 --> 00:16:17,199
after the demo let's discuss impact

367
00:16:17,839 --> 00:16:20,000
it took us a while to understand the

368
00:16:20,000 --> 00:16:22,320
full impact the vulnerability had the

369
00:16:22,320 --> 00:16:24,639
vulnerability did not just affect safari

370
00:16:24,639 --> 00:16:26,720
browser but because of the apple's app

371
00:16:26,720 --> 00:16:29,759
store policies that states that apps

372
00:16:29,759 --> 00:16:31,759
that browse the web must use the ios

373
00:16:31,759 --> 00:16:33,920
webkit framework and webkit javascript

374
00:16:33,920 --> 00:16:36,240
which means that

375
00:16:36,240 --> 00:16:37,920
web browsers can't implement their own

376
00:16:37,920 --> 00:16:39,839
rendering engines they must embed a

377
00:16:39,839 --> 00:16:41,759
version of safari's rendering engine

378
00:16:41,759 --> 00:16:44,480
which made browsers like firefox chrome

379
00:16:44,480 --> 00:16:47,759
opera in ios devices plugin

380
00:16:47,759 --> 00:16:49,920
due to the nature of design of oauth

381
00:16:49,920 --> 00:16:52,240
almost every implementation of what that

382
00:16:52,240 --> 00:16:55,199
exists were vulnerable using the bug we

383
00:16:55,199 --> 00:16:57,440
could take over facebook instagram and

384
00:16:57,440 --> 00:16:58,800
whatsapp accounts

385
00:16:58,800 --> 00:17:01,199
the blog also affected google's sso

386
00:17:01,199 --> 00:17:03,759
which means google products using google

387
00:17:03,759 --> 00:17:05,599
accounts central authentication were

388
00:17:05,599 --> 00:17:08,480
also vulnerable cryptocurrency platforms

389
00:17:08,480 --> 00:17:10,640
social networking platforms e-commerce

390
00:17:10,640 --> 00:17:13,039
platforms and more in today's modern

391
00:17:13,039 --> 00:17:15,280
application it's very rare to find an

392
00:17:15,280 --> 00:17:17,359
application not using oauth so let's

393
00:17:17,359 --> 00:17:20,240
just say the numbers were very high

394
00:17:20,240 --> 00:17:22,880
since the vulnerability affected sso so

395
00:17:22,880 --> 00:17:24,559
it's obvious that different ssr

396
00:17:24,559 --> 00:17:27,839
providers were also affected by this

397
00:17:27,839 --> 00:17:28,880
and

398
00:17:28,880 --> 00:17:30,559
there are many different applications

399
00:17:30,559 --> 00:17:32,480
that make use of login with third-party

400
00:17:32,480 --> 00:17:34,320
features such as login with facebook or

401
00:17:34,320 --> 00:17:36,480
google to provide the user with easy and

402
00:17:36,480 --> 00:17:38,640
seamless authentication experience

403
00:17:38,640 --> 00:17:41,039
and since most of these features make

404
00:17:41,039 --> 00:17:43,280
use of oauth these applications

405
00:17:43,280 --> 00:17:45,280
implementing login with feature were

406
00:17:45,280 --> 00:17:47,840
also affected thus allowing an attacker

407
00:17:47,840 --> 00:17:49,840
to take over accounts and platforms

408
00:17:49,840 --> 00:17:52,320
implementing these features for example

409
00:17:52,320 --> 00:17:54,799
let's say you have an e-commerce website

410
00:17:54,799 --> 00:17:56,559
where you have a feature that allows

411
00:17:56,559 --> 00:17:58,960
users to log in with facebook account

412
00:17:58,960 --> 00:18:00,960
then an attacker could basically take

413
00:18:00,960 --> 00:18:02,799
over accounts of your users in your

414
00:18:02,799 --> 00:18:04,960
ecommerce website by stealing facebook

415
00:18:04,960 --> 00:18:07,760
or tokens

416
00:18:07,919 --> 00:18:10,240
moving on um let's discuss some

417
00:18:10,240 --> 00:18:12,559
roadblocks and common misunderstandings

418
00:18:12,559 --> 00:18:14,240
that we saw among security teams of

419
00:18:14,240 --> 00:18:16,400
different bug bounty programs that we

420
00:18:16,400 --> 00:18:20,160
reported the box to starting with itp

421
00:18:20,160 --> 00:18:22,480
itp or intelligent tracking prevention

422
00:18:22,480 --> 00:18:24,400
is a privacy feature developed and

423
00:18:24,400 --> 00:18:27,200
implemented by webkit and has been in

424
00:18:27,200 --> 00:18:30,720
use since october 2017.

425
00:18:30,720 --> 00:18:33,120
itp uses machine learning model to

426
00:18:33,120 --> 00:18:35,360
detect cross-site tracking capabilities

427
00:18:35,360 --> 00:18:38,160
and it aims to reduce them by taking

428
00:18:38,160 --> 00:18:40,000
different actions such as full

429
00:18:40,000 --> 00:18:42,160
third-party cookie blocking reducing the

430
00:18:42,160 --> 00:18:44,000
accessibility and longevity of first

431
00:18:44,000 --> 00:18:46,480
party cookies local stores capping and

432
00:18:46,480 --> 00:18:48,640
deletion downgrading third-party

433
00:18:48,640 --> 00:18:50,559
referrers and more

434
00:18:50,559 --> 00:18:52,480
due to the nature of the attack where it

435
00:18:52,480 --> 00:18:54,799
relied on making third party requests

436
00:18:54,799 --> 00:18:57,039
itp rendered the attack on usable on

437
00:18:57,039 --> 00:18:59,200
latest versions of webkit which was

438
00:18:59,200 --> 00:19:01,679
really frustrating and we needed to find

439
00:19:01,679 --> 00:19:02,960
some way to

440
00:19:02,960 --> 00:19:04,640
circumvent that

441
00:19:04,640 --> 00:19:07,039
and according to documentation from work

442
00:19:07,039 --> 00:19:09,120
kid to circumvent it there needs to be a

443
00:19:09,120 --> 00:19:10,799
user interaction

444
00:19:10,799 --> 00:19:13,360
it could either be a tap a click or a

445
00:19:13,360 --> 00:19:15,440
use of the keyword with your website as

446
00:19:15,440 --> 00:19:16,640
first party

447
00:19:16,640 --> 00:19:18,960
so in a real attack scenario we open up

448
00:19:18,960 --> 00:19:21,600
a tab using window.open and then we keep

449
00:19:21,600 --> 00:19:23,440
calling the vulnerable endpoint until

450
00:19:23,440 --> 00:19:25,360
the user interacts with it which

451
00:19:25,360 --> 00:19:27,679
basically allowed us to circumvent the

452
00:19:27,679 --> 00:19:29,600
itp

453
00:19:29,600 --> 00:19:31,679
and when we started submitting this

454
00:19:31,679 --> 00:19:33,440
vulnerability to several bug bounty

455
00:19:33,440 --> 00:19:35,840
programs we noticed that a few of them

456
00:19:35,840 --> 00:19:38,880
had similar misunderstanding around them

457
00:19:38,880 --> 00:19:42,000
and we'll discuss two similar uh common

458
00:19:42,000 --> 00:19:43,840
mis understanding that we found among

459
00:19:43,840 --> 00:19:45,600
those programs

460
00:19:45,600 --> 00:19:47,760
a common misunderstanding among security

461
00:19:47,760 --> 00:19:49,679
teams of several programs was around

462
00:19:49,679 --> 00:19:51,600
authorization code

463
00:19:51,600 --> 00:19:53,919
unaware about its capabilities and how

464
00:19:53,919 --> 00:19:56,400
sensitive it is the misunderstanding was

465
00:19:56,400 --> 00:19:58,400
that without the ability to extend

466
00:19:58,400 --> 00:20:00,559
authorization code for access tokens the

467
00:20:00,559 --> 00:20:03,600
authorization code were useless since

468
00:20:03,600 --> 00:20:05,600
exchanging them required application and

469
00:20:05,600 --> 00:20:07,120
application secret

470
00:20:07,120 --> 00:20:09,600
while the statement above is true

471
00:20:09,600 --> 00:20:11,600
in a case where what was used for

472
00:20:11,600 --> 00:20:13,600
authentication simply having an access

473
00:20:13,600 --> 00:20:15,360
to authorization code was enough to get

474
00:20:15,360 --> 00:20:17,520
access to victims account

475
00:20:17,520 --> 00:20:19,440
making a request to an authorization

476
00:20:19,440 --> 00:20:21,760
endpoint with stolen authorization code

477
00:20:21,760 --> 00:20:23,919
with attacker generated state or nonce

478
00:20:23,919 --> 00:20:25,679
value would allow an attacker to

479
00:20:25,679 --> 00:20:28,640
authenticate into victims account

480
00:20:28,640 --> 00:20:31,360
another common misunderstanding was with

481
00:20:31,360 --> 00:20:34,080
regards to state or nonce value and its

482
00:20:34,080 --> 00:20:37,440
capabilities to prevent attacks in earth

483
00:20:37,440 --> 00:20:39,760
while using state inward is an excellent

484
00:20:39,760 --> 00:20:42,240
way to prevent csrf attacks and to

485
00:20:42,240 --> 00:20:44,480
redirect users to where they were before

486
00:20:44,480 --> 00:20:46,720
the authentication process started apart

487
00:20:46,720 --> 00:20:48,320
from that the state really doesn't

488
00:20:48,320 --> 00:20:51,200
provide any additional security features

489
00:20:51,200 --> 00:20:53,200
even if the state value is bind to a

490
00:20:53,200 --> 00:20:55,440
token an attacker can generate a fresh

491
00:20:55,440 --> 00:20:57,200
state value which then can be attached

492
00:20:57,200 --> 00:21:00,320
to an endpoint url to send to the victim

493
00:21:00,320 --> 00:21:02,559
the resulting token of that request then

494
00:21:02,559 --> 00:21:04,720
can be used by an attacker without any

495
00:21:04,720 --> 00:21:05,679
issue

496
00:21:05,679 --> 00:21:07,600
the same thing was also demonstrated in

497
00:21:07,600 --> 00:21:10,159
our demo video above where we saw that

498
00:21:10,159 --> 00:21:12,559
nonce value or state value did nothing

499
00:21:12,559 --> 00:21:15,440
to prevent the attack

500
00:21:15,440 --> 00:21:16,720
stats

501
00:21:16,720 --> 00:21:18,559
these are some of the stats based on bug

502
00:21:18,559 --> 00:21:20,320
bounty programs and reports we made

503
00:21:20,320 --> 00:21:21,840
today

504
00:21:21,840 --> 00:21:23,520
in total

505
00:21:23,520 --> 00:21:25,840
we were able to harvest more than 100k

506
00:21:25,840 --> 00:21:27,840
dollars in bounties

507
00:21:27,840 --> 00:21:29,360
the response from the bulk bounty

508
00:21:29,360 --> 00:21:31,760
programs were kind of mixed while some

509
00:21:31,760 --> 00:21:33,760
programs took the issue very seriously

510
00:21:33,760 --> 00:21:35,760
and applied a fix in under 21 hours

511
00:21:35,760 --> 00:21:37,520
which was really impressive

512
00:21:37,520 --> 00:21:39,280
some took months to just understand the

513
00:21:39,280 --> 00:21:42,000
vulnerability and some of the programs

514
00:21:42,000 --> 00:21:44,080
also relied on webkit to come up with a

515
00:21:44,080 --> 00:21:45,200
fix

516
00:21:45,200 --> 00:21:47,440
some programs like dropbox and poloniex

517
00:21:47,440 --> 00:21:49,360
took it one step further by using their

518
00:21:49,360 --> 00:21:51,520
contacts at apple and asking them to

519
00:21:51,520 --> 00:21:53,919
come up with

520
00:21:53,919 --> 00:21:55,919
the highest single reward was given by

521
00:21:55,919 --> 00:21:58,559
coinbase which is also the fastest

522
00:21:58,559 --> 00:22:00,640
program to fix this

523
00:22:00,640 --> 00:22:03,280
apple took more than a year to apple

524
00:22:03,280 --> 00:22:06,080
took more than a year a total of 457

525
00:22:06,080 --> 00:22:08,000
days to come up with a fix

526
00:22:08,000 --> 00:22:10,799
and in the end decided that the bug does

527
00:22:10,799 --> 00:22:13,120
not qualify to be awarded a bounty

528
00:22:13,120 --> 00:22:14,880
because it does not meet the published

529
00:22:14,880 --> 00:22:17,760
bounty categories and ironically while

530
00:22:17,760 --> 00:22:19,520
this blog in webkit made so many

531
00:22:19,520 --> 00:22:21,679
applications in the internet vulnerable

532
00:22:21,679 --> 00:22:24,240
the apple's implementation of sso and

533
00:22:24,240 --> 00:22:27,120
oauth were not vulnerable

534
00:22:27,120 --> 00:22:28,960
we saw how we can exploit the

535
00:22:28,960 --> 00:22:31,520
variability and how severe it could be

536
00:22:31,520 --> 00:22:34,880
now let's discuss some fixes as well

537
00:22:34,880 --> 00:22:37,840
as a developer or a site owner we can

538
00:22:37,840 --> 00:22:40,559
use any combination of these methods to

539
00:22:40,559 --> 00:22:43,760
prevent the vulnerabilities altogether

540
00:22:43,760 --> 00:22:45,600
they're all very easy to understand and

541
00:22:45,600 --> 00:22:47,919
implement as well and the first one is

542
00:22:47,919 --> 00:22:50,400
to use both method instead of get which

543
00:22:50,400 --> 00:22:52,240
actually aligns with the practice that's

544
00:22:52,240 --> 00:22:54,480
never sending any sensitive information

545
00:22:54,480 --> 00:22:55,919
over the url

546
00:22:55,919 --> 00:22:58,559
for example samuel only uses post

547
00:22:58,559 --> 00:23:00,559
instead of get for transfer transport

548
00:23:00,559 --> 00:23:02,799
interface and the second one is to use

549
00:23:02,799 --> 00:23:04,159
both methods for questioning

550
00:23:04,159 --> 00:23:05,840
communication

551
00:23:05,840 --> 00:23:08,039
these two fixes are also supported by

552
00:23:08,039 --> 00:23:10,640
ultimate mech as can be seen on image on

553
00:23:10,640 --> 00:23:12,640
the right and they could be specified by

554
00:23:12,640 --> 00:23:14,320
response mode i think as the platform

555
00:23:14,320 --> 00:23:16,240
uses service ports

556
00:23:16,240 --> 00:23:18,559
however it's still necessary to disable

557
00:23:18,559 --> 00:23:20,400
and remove the support for curry and

558
00:23:20,400 --> 00:23:23,360
fragment nodes and the most effective

559
00:23:23,360 --> 00:23:25,840
one in my opinion is the teleconcentric

560
00:23:25,840 --> 00:23:26,720
piece

561
00:23:26,720 --> 00:23:28,720
i don't it not only protects against

562
00:23:28,720 --> 00:23:30,799
this particular vulnerability but makes

563
00:23:30,799 --> 00:23:32,880
almost all kinds of variabilities in

564
00:23:32,880 --> 00:23:34,240
physical

565
00:23:34,240 --> 00:23:36,159
sensitive cookies and protected quite a

566
00:23:36,159 --> 00:23:38,960
few programs in our campaign as well

567
00:23:38,960 --> 00:23:41,679
similarly we have pixie for a lot which

568
00:23:41,679 --> 00:23:43,600
makes the exploitation kind of useless

569
00:23:43,600 --> 00:23:46,320
because we also need code verifier to

570
00:23:46,320 --> 00:23:48,559
make use of electrodes

571
00:23:48,559 --> 00:23:50,720
the other one is to ask for

572
00:23:50,720 --> 00:23:53,039
authorization every single time and

573
00:23:53,039 --> 00:23:56,240
apple did the exact same and many as two

574
00:23:56,240 --> 00:23:59,440
so they were not vulnerable and um

575
00:23:59,440 --> 00:24:01,520
and one can also use cliented redux

576
00:24:01,520 --> 00:24:04,240
instead of 302 or 201 in combination

577
00:24:04,240 --> 00:24:06,880
with extreme options and cs3's trim

578
00:24:06,880 --> 00:24:09,360
ancestors a twitter for example uses

579
00:24:09,360 --> 00:24:10,799
this method a free director

580
00:24:10,799 --> 00:24:12,559
authorization

581
00:24:12,559 --> 00:24:14,960
the last one is to validate the referral

582
00:24:14,960 --> 00:24:17,440
origin against decline though we do not

583
00:24:17,440 --> 00:24:19,600
recommend using this

584
00:24:19,600 --> 00:24:21,360
as it's the first one the same issues

585
00:24:21,360 --> 00:24:24,080
advanced csr prediction with

586
00:24:24,080 --> 00:24:25,600
a referrer or

587
00:24:25,600 --> 00:24:28,080
for reason

588
00:24:28,799 --> 00:24:30,720
browsers also have some mitigation

589
00:24:30,720 --> 00:24:33,120
strategies in place to avoid just leaks

590
00:24:33,120 --> 00:24:35,279
and though these strategies however

591
00:24:35,279 --> 00:24:38,000
respectful to csp

592
00:24:38,000 --> 00:24:39,919
now we have something coming up that

593
00:24:39,919 --> 00:24:42,559
they destroy this is not covered so for

594
00:24:42,559 --> 00:24:44,640
now let's just practically

595
00:24:44,640 --> 00:24:47,120
briefly over there

596
00:24:47,120 --> 00:24:48,880
and the evaluation report now includes

597
00:24:48,880 --> 00:24:51,440
the url as the original request meaning

598
00:24:51,440 --> 00:24:54,240
we only get what we already know

599
00:24:54,240 --> 00:24:56,240
furthermore we browsers know the path

600
00:24:56,240 --> 00:24:59,039
component of a source equation it shows

601
00:24:59,039 --> 00:25:00,559
being loaded is the result of the

602
00:25:00,559 --> 00:25:02,000
utility

603
00:25:02,000 --> 00:25:04,159
this is to prevent unleaking of fast

604
00:25:04,159 --> 00:25:06,240
information which are demonstrated in

605
00:25:06,240 --> 00:25:07,600
microsoft

606
00:25:07,600 --> 00:25:09,440
the spec also gives an example for

607
00:25:09,440 --> 00:25:11,520
easier understanding but we'll leave it

608
00:25:11,520 --> 00:25:14,240
at that

609
00:25:14,240 --> 00:25:17,120
bypass it sign a new order yep you heard

610
00:25:17,120 --> 00:25:19,279
that right how a new day but let's

611
00:25:19,279 --> 00:25:21,279
discuss some bypasses before we drop in

612
00:25:21,279 --> 00:25:22,640
all day

613
00:25:22,640 --> 00:25:24,960
after our thoughts uh many programs

614
00:25:24,960 --> 00:25:27,120
including facebook and coinbase came up

615
00:25:27,120 --> 00:25:29,120
with their own fixes

616
00:25:29,120 --> 00:25:31,440
and their fixes revolve around checking

617
00:25:31,440 --> 00:25:33,840
if the user is in piece of safari and

618
00:25:33,840 --> 00:25:35,279
only if it is

619
00:25:35,279 --> 00:25:37,120
they would use the different approach

620
00:25:37,120 --> 00:25:39,039
like for all other users and stereo

621
00:25:39,039 --> 00:25:41,039
permanent

622
00:25:41,039 --> 00:25:43,679
so it sends a simple change of future

623
00:25:43,679 --> 00:25:46,400
attempted bypass effects and an obvious

624
00:25:46,400 --> 00:25:48,960
pesky product was because text website

625
00:25:48,960 --> 00:25:51,200
and iphone to ipads

626
00:25:51,200 --> 00:25:54,240
since all brothers and ios devices must

627
00:25:54,240 --> 00:25:56,400
use webkit as their engine as something

628
00:25:56,400 --> 00:25:58,480
already said they're all sincerely

629
00:25:58,480 --> 00:26:00,880
descent sending to the desktop site did

630
00:26:00,880 --> 00:26:02,559
20 years ago

631
00:26:02,559 --> 00:26:04,400
however it wasn't inherited in

632
00:26:04,400 --> 00:26:06,400
subscribing requests so we tried all

633
00:26:06,400 --> 00:26:10,400
requests from a project called http

634
00:26:10,400 --> 00:26:13,760
and found that a ping or anchor tag with

635
00:26:13,760 --> 00:26:15,919
ping attribute gdlock

636
00:26:15,919 --> 00:26:18,159
and we had it in all the bypass

637
00:26:18,159 --> 00:26:19,279
so

638
00:26:19,279 --> 00:26:20,000
but

639
00:26:20,000 --> 00:26:21,760
during our haunt survive process we

640
00:26:21,760 --> 00:26:22,840
noticed something

641
00:26:22,840 --> 00:26:23,919
peculiar uh

642
00:26:23,919 --> 00:26:26,720
at some dig absent after somebody we

643
00:26:26,720 --> 00:26:28,400
realized that we have already found

644
00:26:28,400 --> 00:26:29,840
another audi

645
00:26:29,840 --> 00:26:32,400
this time it wasn't csp but across the

646
00:26:32,400 --> 00:26:35,279
original show steering our first reset

647
00:26:35,279 --> 00:26:37,279
this planning was easier so on and slide

648
00:26:37,279 --> 00:26:40,000
here and we just needed to add a class

649
00:26:40,000 --> 00:26:42,159
handler to our fetch request

650
00:26:42,159 --> 00:26:43,919
and unlike the previous one it doesn't

651
00:26:43,919 --> 00:26:45,919
require the user actually across horizon

652
00:26:45,919 --> 00:26:48,080
so yeah even after

653
00:26:48,080 --> 00:26:50,880
our original ratio was passed we found

654
00:26:50,880 --> 00:26:53,440
another way that was identical to the

655
00:26:53,440 --> 00:26:56,720
one we recorded earlier but as always

656
00:26:56,720 --> 00:26:59,760
apple didn't care much so it's still

657
00:26:59,760 --> 00:27:01,600
unfixed i have

658
00:27:01,600 --> 00:27:04,159
unpacked so feel free to play around and

659
00:27:04,159 --> 00:27:06,480
replace programs you may find vulnerable

660
00:27:06,480 --> 00:27:09,520
but don't forget to give us a sound

661
00:27:09,520 --> 00:27:11,360
and with that we're at the end of our

662
00:27:11,360 --> 00:27:13,440
presentation okay any questions

663
00:27:13,440 --> 00:27:16,080
circumstance which ideas by twitter or

664
00:27:16,080 --> 00:27:20,510
send us an email thank you for listening

665
00:27:20,510 --> 00:27:30,119
[Music]

