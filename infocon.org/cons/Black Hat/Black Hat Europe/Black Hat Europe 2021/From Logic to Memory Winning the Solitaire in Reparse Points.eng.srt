1
00:00:00,860 --> 00:00:09,599
[Music]

2
00:00:09,599 --> 00:00:11,840
hi everyone my name is taoi and today

3
00:00:11,840 --> 00:00:13,840
i'm going to introduce our new research

4
00:00:13,840 --> 00:00:15,920
about the windows repairs points our

5
00:00:15,920 --> 00:00:18,000
topic name is from logic to memory

6
00:00:18,000 --> 00:00:20,640
winning a solid tire in replace points

7
00:00:20,640 --> 00:00:22,880
you may not be unfamiliar with logic

8
00:00:22,880 --> 00:00:24,240
issues in our

9
00:00:24,240 --> 00:00:26,480
points actually there are many far

10
00:00:26,480 --> 00:00:29,039
redirection bugs in recent years but

11
00:00:29,039 --> 00:00:31,359
today we are going to talk something new

12
00:00:31,359 --> 00:00:34,079
solid tire here is a perm which has two

13
00:00:34,079 --> 00:00:36,320
minutes the first is the default card

14
00:00:36,320 --> 00:00:38,800
game on windows we will introduce how we

15
00:00:38,800 --> 00:00:41,760
win the card game in pantone 2021 the

16
00:00:41,760 --> 00:00:44,239
second is gemstone memory corruption

17
00:00:44,239 --> 00:00:46,320
issues in replace points are also a

18
00:00:46,320 --> 00:00:48,960
gemstone mine for researchers we'll

19
00:00:48,960 --> 00:00:51,039
introduce all details about this new

20
00:00:51,039 --> 00:00:53,440
attack surface

21
00:00:53,440 --> 00:00:55,760
we are security researchers from pallet

22
00:00:55,760 --> 00:00:58,399
networks we do new attack surface and

23
00:00:58,399 --> 00:01:00,399
system internals research from both

24
00:01:00,399 --> 00:01:03,199
offensive and defensive perspectives

25
00:01:03,199 --> 00:01:06,080
we are msrc top 10 researchers

26
00:01:06,080 --> 00:01:08,400
and we got several hundred cves in

27
00:01:08,400 --> 00:01:10,400
different applications

28
00:01:10,400 --> 00:01:13,280
we are pontoon winners and have spoken

29
00:01:13,280 --> 00:01:15,680
in many top different conferences

30
00:01:15,680 --> 00:01:18,640
besides we are also patent inventors for

31
00:01:18,640 --> 00:01:22,479
new defense and detection techniques

32
00:01:22,479 --> 00:01:24,960
here's our agenda there are two main

33
00:01:24,960 --> 00:01:28,159
parts the logic back in replace point

34
00:01:28,159 --> 00:01:29,119
for

35
00:01:29,119 --> 00:01:30,560
pontoon

36
00:01:30,560 --> 00:01:33,439
and the memory corruption back in parts

37
00:01:33,439 --> 00:01:35,439
points

38
00:01:35,439 --> 00:01:37,040
the first part will show a zero

39
00:01:37,040 --> 00:01:39,280
geological vulnerability which bypass

40
00:01:39,280 --> 00:01:42,000
all current mitigations with undisclosed

41
00:01:42,000 --> 00:01:45,759
exploit techniques techniques and wins

42
00:01:45,759 --> 00:01:49,200
windows eop category in ponton 2021

43
00:01:49,200 --> 00:01:51,680
all details including finding the bug in

44
00:01:51,680 --> 00:01:54,159
one day with a unique vulnerability

45
00:01:54,159 --> 00:01:57,200
discovery strategy root cause analysis

46
00:01:57,200 --> 00:01:59,280
winning a seemingly impossible risk

47
00:01:59,280 --> 00:02:02,000
window stably as well as how to make the

48
00:02:02,000 --> 00:02:03,920
exploit stable enough

49
00:02:03,920 --> 00:02:06,799
for the pantone context will be covered

50
00:02:06,799 --> 00:02:08,959
the second part will introduce our new

51
00:02:08,959 --> 00:02:10,239
discoveries

52
00:02:10,239 --> 00:02:13,360
on this never disclosed attack service

53
00:02:13,360 --> 00:02:15,520
for memory corruption eop backs in

54
00:02:15,520 --> 00:02:17,280
repulse points

55
00:02:17,280 --> 00:02:18,959
including the new attack service

56
00:02:18,959 --> 00:02:20,160
internals

57
00:02:20,160 --> 00:02:22,319
the interesting memory corruption

58
00:02:22,319 --> 00:02:25,680
vulnerability examples as well as future

59
00:02:25,680 --> 00:02:30,000
accounting insights in repulse points

60
00:02:30,000 --> 00:02:33,040
first what is repulse point

61
00:02:33,040 --> 00:02:37,680
it is a collection of user-defined data

62
00:02:37,680 --> 00:02:40,000
which understood by

63
00:02:40,000 --> 00:02:41,599
application which

64
00:02:41,599 --> 00:02:44,959
stated the data and a file system filter

65
00:02:44,959 --> 00:02:47,760
which read and process the data

66
00:02:47,760 --> 00:02:48,879
every

67
00:02:48,879 --> 00:02:52,000
replace point data has a reports tag

68
00:02:52,000 --> 00:02:56,000
which represents a type of repulse point

69
00:02:56,000 --> 00:02:58,800
you can use device io control to get set

70
00:02:58,800 --> 00:03:01,920
and delete replace points

71
00:03:01,920 --> 00:03:03,280
there are two

72
00:03:03,280 --> 00:03:06,400
famous repulse points symbol link and a

73
00:03:06,400 --> 00:03:07,599
mount point

74
00:03:07,599 --> 00:03:11,440
there are many file redirection bugs

75
00:03:11,440 --> 00:03:12,959
by using

76
00:03:12,959 --> 00:03:16,080
those two replace points

77
00:03:16,080 --> 00:03:19,280
it is firstly inspired by a gems for

78
00:03:19,280 --> 00:03:22,319
show and in recent years there are over

79
00:03:22,319 --> 00:03:24,640
hundreds of fire redirection

80
00:03:24,640 --> 00:03:28,159
vulnerabilities and overtaking the wild

81
00:03:28,159 --> 00:03:31,040
vulnerabilities

82
00:03:31,040 --> 00:03:34,400
from from them

83
00:03:36,400 --> 00:03:39,280
here is a classical redirection file

84
00:03:39,280 --> 00:03:42,000
redirection attack you can see low every

85
00:03:42,000 --> 00:03:44,159
low privilege application communicated

86
00:03:44,159 --> 00:03:46,400
with high privilege application

87
00:03:46,400 --> 00:03:49,920
with alpc rpc and com

88
00:03:49,920 --> 00:03:52,480
in high privilege high privilege

89
00:03:52,480 --> 00:03:54,959
application to file

90
00:03:54,959 --> 00:03:58,400
operations with high privilege on low

91
00:03:58,400 --> 00:04:00,720
privileged user controllable files or

92
00:04:00,720 --> 00:04:02,720
directories

93
00:04:02,720 --> 00:04:03,519
if

94
00:04:03,519 --> 00:04:06,400
they are redirected to high privileged

95
00:04:06,400 --> 00:04:08,959
user controllable files or directories

96
00:04:08,959 --> 00:04:11,920
such as into system file then low

97
00:04:11,920 --> 00:04:14,640
privilege privilege application can

98
00:04:14,640 --> 00:04:18,720
operate anti-system file indirectly

99
00:04:18,720 --> 00:04:22,160
this will lead to elevation of privilege

100
00:04:22,160 --> 00:04:26,560
info league and the dos vulnerabilities

101
00:04:26,560 --> 00:04:28,800
since there are too many file

102
00:04:28,800 --> 00:04:31,680
redirection bugs microsoft put huge

103
00:04:31,680 --> 00:04:32,960
efforts to

104
00:04:32,960 --> 00:04:35,520
develop kinds of mitigations to cue

105
00:04:35,520 --> 00:04:37,600
these bad class

106
00:04:37,600 --> 00:04:41,120
first diminish the attack surface

107
00:04:41,120 --> 00:04:42,960
cut off the connection between low

108
00:04:42,960 --> 00:04:45,199
privileged applications and high

109
00:04:45,199 --> 00:04:48,400
privileged applications

110
00:04:48,400 --> 00:04:51,520
second operate the file correctly either

111
00:04:51,520 --> 00:04:55,199
by operating the file handle directly or

112
00:04:55,199 --> 00:04:58,160
with correct correct impersonation or

113
00:04:58,160 --> 00:05:02,160
verify if the file has a symbol link

114
00:05:02,160 --> 00:05:03,199
third

115
00:05:03,199 --> 00:05:05,840
prevent the file redirection techniques

116
00:05:05,840 --> 00:05:08,400
directly you can see there are many

117
00:05:08,400 --> 00:05:11,520
restrictions for soft link command point

118
00:05:11,520 --> 00:05:14,400
and hurling creation

119
00:05:14,400 --> 00:05:17,360
it's very effective

120
00:05:17,360 --> 00:05:19,759
even all mitigations mentioned before

121
00:05:19,759 --> 00:05:21,360
are bypassed

122
00:05:21,360 --> 00:05:24,160
low privileged application can operate

123
00:05:24,160 --> 00:05:27,280
anti-system file

124
00:05:27,520 --> 00:05:30,400
but microsoft also did some mitigations

125
00:05:30,400 --> 00:05:33,759
to queue existing easy ways to execute

126
00:05:33,759 --> 00:05:36,400
the code with system such as

127
00:05:36,400 --> 00:05:39,120
queue the ad agent method in diagnosis

128
00:05:39,120 --> 00:05:41,199
service

129
00:05:41,199 --> 00:05:44,639
i have to say the microsoft strategy of

130
00:05:44,639 --> 00:05:47,039
making exploitation harder is on the

131
00:05:47,039 --> 00:05:48,160
right way

132
00:05:48,160 --> 00:05:51,360
microsoft took actions in each step in

133
00:05:51,360 --> 00:05:54,000
the full exploit chain

134
00:05:54,000 --> 00:05:56,800
after combination of all mitigations

135
00:05:56,800 --> 00:05:59,600
logic backs in repressed points are

136
00:05:59,600 --> 00:06:02,720
decreased a lot and the exploitation of

137
00:06:02,720 --> 00:06:04,720
logic back become more and more

138
00:06:04,720 --> 00:06:06,240
difficult

139
00:06:06,240 --> 00:06:09,199
so is it still possible for

140
00:06:09,199 --> 00:06:12,000
a stable exploitation of the logical

141
00:06:12,000 --> 00:06:14,800
vulnerability in repulse points to win

142
00:06:14,800 --> 00:06:17,039
ponchon

143
00:06:17,039 --> 00:06:19,600
the answer is yes although it's very

144
00:06:19,600 --> 00:06:20,560
hard

145
00:06:20,560 --> 00:06:22,800
let's start the whole journey for

146
00:06:22,800 --> 00:06:26,240
pantone 2021 and see what kinds of magic

147
00:06:26,240 --> 00:06:28,800
over there

148
00:06:29,120 --> 00:06:31,840
unique vulnerability discovery strategy

149
00:06:31,840 --> 00:06:34,560
generates unique vulnerabilities as

150
00:06:34,560 --> 00:06:37,840
early as six or seven years ago we found

151
00:06:37,840 --> 00:06:40,240
an interesting thing that engineers are

152
00:06:40,240 --> 00:06:42,639
not good at with doing things

153
00:06:42,639 --> 00:06:46,400
they make mistakes when they doing

154
00:06:46,400 --> 00:06:49,360
revert repair reinstall redefinition

155
00:06:49,360 --> 00:06:51,840
reset and so on so forth

156
00:06:51,840 --> 00:06:54,319
in the past there are several hundred

157
00:06:54,319 --> 00:06:55,599
critical

158
00:06:55,599 --> 00:06:57,280
vulnerabilities in

159
00:06:57,280 --> 00:07:00,000
different applications in this bad class

160
00:07:00,000 --> 00:07:03,039
for example ie browser renderer engine

161
00:07:03,039 --> 00:07:05,919
under redo rcu vulnerabilities

162
00:07:05,919 --> 00:07:08,880
we found over 100 use of the free

163
00:07:08,880 --> 00:07:10,880
vulnerabilities

164
00:07:10,880 --> 00:07:12,880
from them

165
00:07:12,880 --> 00:07:14,080
besides

166
00:07:14,080 --> 00:07:16,800
the flash action script browser

167
00:07:16,800 --> 00:07:20,000
javascript engine redefinition

168
00:07:20,000 --> 00:07:22,960
rce vulnerabilities also a lot of

169
00:07:22,960 --> 00:07:26,560
vulnerabilities from this

170
00:07:26,560 --> 00:07:30,080
and there are also eop vulnerabilities

171
00:07:30,080 --> 00:07:33,280
in this bad class a classical example is

172
00:07:33,280 --> 00:07:35,680
windows installer revert

173
00:07:35,680 --> 00:07:39,440
eop vulnerability a patched five times

174
00:07:39,440 --> 00:07:42,479
eop vulnerability with five cves

175
00:07:42,479 --> 00:07:45,280
we believe there are still many redo

176
00:07:45,280 --> 00:07:49,280
bugs now and in the future

177
00:07:49,280 --> 00:07:52,080
with this unique bug hunting strategy we

178
00:07:52,080 --> 00:07:55,039
found a reset back in microsoft solid

179
00:07:55,039 --> 00:07:58,319
tire collection in one day

180
00:07:58,319 --> 00:08:00,960
you can see when we open app settings

181
00:08:00,960 --> 00:08:04,879
for solid tire there's a reset button

182
00:08:04,879 --> 00:08:07,840
after we clicking the reset button

183
00:08:07,840 --> 00:08:11,360
ipvx service will do some interesting

184
00:08:11,360 --> 00:08:13,039
file operations

185
00:08:13,039 --> 00:08:18,159
under user directory with the system

186
00:08:19,199 --> 00:08:20,560
the file

187
00:08:20,560 --> 00:08:23,199
operations are from

188
00:08:23,199 --> 00:08:25,199
set name secret info

189
00:08:25,199 --> 00:08:27,039
and

190
00:08:27,039 --> 00:08:29,759
it operates the

191
00:08:29,759 --> 00:08:32,080
user controllable normal user

192
00:08:32,080 --> 00:08:36,880
controllable directory with the system

193
00:08:37,039 --> 00:08:40,640
so we confirm it is a vulnerable for

194
00:08:40,640 --> 00:08:43,919
directory redirection attack

195
00:08:43,919 --> 00:08:45,440
for root cause

196
00:08:45,440 --> 00:08:49,440
abbax service will call add package data

197
00:08:49,440 --> 00:08:52,800
access helper function to deal with

198
00:08:52,800 --> 00:08:53,680
the

199
00:08:53,680 --> 00:08:54,880
reset

200
00:08:54,880 --> 00:08:56,080
operation

201
00:08:56,080 --> 00:08:59,200
it will firstly impersonate itself as

202
00:08:59,200 --> 00:09:00,640
system

203
00:09:00,640 --> 00:09:03,279
and then call this function

204
00:09:03,279 --> 00:09:06,080
finally it will call apply security

205
00:09:06,080 --> 00:09:08,640
descriptor function in this function

206
00:09:08,640 --> 00:09:11,680
genome secret info will be first called

207
00:09:11,680 --> 00:09:14,880
to get the acl

208
00:09:14,880 --> 00:09:18,560
for a normal user controllable directory

209
00:09:18,560 --> 00:09:20,560
and then attach

210
00:09:20,560 --> 00:09:22,399
some

211
00:09:22,399 --> 00:09:23,839
ecls

212
00:09:23,839 --> 00:09:26,560
to the existing

213
00:09:26,560 --> 00:09:28,080
pcls

214
00:09:28,080 --> 00:09:29,440
after that

215
00:09:29,440 --> 00:09:32,160
apply the updated scl

216
00:09:32,160 --> 00:09:34,959
back into the same directory with the

217
00:09:34,959 --> 00:09:36,720
surname secret info

218
00:09:36,720 --> 00:09:40,320
if we redirect this directory to other

219
00:09:40,320 --> 00:09:41,680
places

220
00:09:41,680 --> 00:09:44,959
cnm screeninfo can override

221
00:09:44,959 --> 00:09:49,800
the acl of a b3 directory

222
00:09:51,279 --> 00:09:53,040
let's review

223
00:09:53,040 --> 00:09:53,839
the

224
00:09:53,839 --> 00:09:55,279
vulnerability

225
00:09:55,279 --> 00:09:57,040
from the

226
00:09:57,040 --> 00:10:00,640
exploitation perspective to see if it is

227
00:10:00,640 --> 00:10:03,360
exploitable

228
00:10:03,600 --> 00:10:05,519
you can see in the app

229
00:10:05,519 --> 00:10:08,399
user application if we reset the solid

230
00:10:08,399 --> 00:10:12,079
tire you can and and the fpvx service

231
00:10:12,079 --> 00:10:14,800
will call get name screeninfo and send

232
00:10:14,800 --> 00:10:17,519
sending screen info so the direct

233
00:10:17,519 --> 00:10:20,079
exploitation strategy is due for

234
00:10:20,079 --> 00:10:21,600
redirection

235
00:10:21,600 --> 00:10:24,480
in the right time just between canyon

236
00:10:24,480 --> 00:10:29,200
screen info and the surname secret info

237
00:10:29,200 --> 00:10:31,360
but there and then

238
00:10:31,360 --> 00:10:33,519
cnm screen4 will

239
00:10:33,519 --> 00:10:36,880
override the acl of the redirected

240
00:10:36,880 --> 00:10:40,240
target file into system file

241
00:10:40,240 --> 00:10:41,279
but

242
00:10:41,279 --> 00:10:43,760
there are two challenges

243
00:10:43,760 --> 00:10:45,040
the first

244
00:10:45,040 --> 00:10:49,040
is there a way to redirect the directory

245
00:10:49,040 --> 00:10:51,200
to a file

246
00:10:51,200 --> 00:10:55,200
second is there a way to win the shot

247
00:10:55,200 --> 00:10:57,760
release window stably

248
00:10:57,760 --> 00:11:00,640
upload could be an option but can we

249
00:11:00,640 --> 00:11:03,519
trigger our block just after get name

250
00:11:03,519 --> 00:11:06,399
security info and do file redirection in

251
00:11:06,399 --> 00:11:08,880
the upload callback before sending

252
00:11:08,880 --> 00:11:11,120
security info

253
00:11:11,120 --> 00:11:13,839
after more investigations we found two

254
00:11:13,839 --> 00:11:15,360
challenges

255
00:11:15,360 --> 00:11:18,480
we we found more challenges

256
00:11:18,480 --> 00:11:21,600
for the file reduction we don't know if

257
00:11:21,600 --> 00:11:23,839
currently existing file reduction trick

258
00:11:23,839 --> 00:11:25,519
can be used for

259
00:11:25,519 --> 00:11:28,480
directory to file redirection

260
00:11:28,480 --> 00:11:29,600
besides

261
00:11:29,600 --> 00:11:32,079
we are not sure get name secret info and

262
00:11:32,079 --> 00:11:34,399
a synonym screening for

263
00:11:34,399 --> 00:11:35,600
work for

264
00:11:35,600 --> 00:11:38,160
both file and the directory at the same

265
00:11:38,160 --> 00:11:39,600
time

266
00:11:39,600 --> 00:11:42,000
for risk condition

267
00:11:42,000 --> 00:11:45,760
no upload type can block read attributes

268
00:11:45,760 --> 00:11:48,480
on directory by gangnam secret info

269
00:11:48,480 --> 00:11:51,279
besides we cannot change one point

270
00:11:51,279 --> 00:11:54,480
inside the upload callback when it is in

271
00:11:54,480 --> 00:11:55,440
use

272
00:11:55,440 --> 00:11:58,800
and last we need to run the exploit

273
00:11:58,800 --> 00:12:01,040
automatically not just

274
00:12:01,040 --> 00:12:05,360
manually click the reset button

275
00:12:05,360 --> 00:12:07,600
to overcome all challenges mentioned

276
00:12:07,600 --> 00:12:09,760
above we need to revisit the

277
00:12:09,760 --> 00:12:12,240
vulnerability and check all file

278
00:12:12,240 --> 00:12:13,760
operation

279
00:12:13,760 --> 00:12:17,360
precisely first let's take a look at the

280
00:12:17,360 --> 00:12:21,120
exploitation of the running part

281
00:12:21,519 --> 00:12:25,519
the reset button has a corresponding

282
00:12:25,519 --> 00:12:27,519
powershot command to do the same thing

283
00:12:27,519 --> 00:12:30,639
we said ebbx package

284
00:12:30,639 --> 00:12:33,680
but it is only supported on future

285
00:12:33,680 --> 00:12:35,360
windows versions

286
00:12:35,360 --> 00:12:40,160
the good news is we figure out

287
00:12:40,160 --> 00:12:42,800
the reset

288
00:12:42,800 --> 00:12:45,760
operation is e-code

289
00:12:45,760 --> 00:12:48,480
uninstall and reinstall the better news

290
00:12:48,480 --> 00:12:51,120
is we can split file operations

291
00:12:51,120 --> 00:12:53,760
precisely by splitting

292
00:12:53,760 --> 00:12:58,000
reset into uninstall and reinstall

293
00:12:58,000 --> 00:13:01,920
we extract important file operations in

294
00:13:01,920 --> 00:13:04,480
uninstall and reinstall in uninstall

295
00:13:04,480 --> 00:13:06,480
there are there is only one file

296
00:13:06,480 --> 00:13:09,040
operation deleted directory in reinstall

297
00:13:09,040 --> 00:13:11,360
there are three file operations create

298
00:13:11,360 --> 00:13:13,360
directory canon screen info and the

299
00:13:13,360 --> 00:13:15,519
synonym secret info

300
00:13:15,519 --> 00:13:19,040
to avoid the noisy file operations we

301
00:13:19,040 --> 00:13:22,160
start our thread after uninstall

302
00:13:22,160 --> 00:13:25,519
and try to win the risk when finding

303
00:13:25,519 --> 00:13:28,639
vulnerable directory creation so there

304
00:13:28,639 --> 00:13:29,920
are three

305
00:13:29,920 --> 00:13:33,279
possibilities the risk threat will be in

306
00:13:33,279 --> 00:13:36,480
with windows 0 1 and 2.

307
00:13:36,480 --> 00:13:38,880
you can see the wrist window 0 is

308
00:13:38,880 --> 00:13:41,839
relative long and the wrist window 1 is

309
00:13:41,839 --> 00:13:44,320
very short since there are much more

310
00:13:44,320 --> 00:13:47,040
code between credit directory and

311
00:13:47,040 --> 00:13:49,199
gangnam security info then between

312
00:13:49,199 --> 00:13:51,600
getting secret info and a synonym secret

313
00:13:51,600 --> 00:13:52,399
info

314
00:13:52,399 --> 00:13:54,959
as we just saw there's only one function

315
00:13:54,959 --> 00:13:58,560
calculate scale between get and set

316
00:13:58,560 --> 00:14:01,600
so the possibility that the risk threat

317
00:14:01,600 --> 00:14:04,639
is increased window zero is much higher

318
00:14:04,639 --> 00:14:07,440
than in risk window one besides because

319
00:14:07,440 --> 00:14:08,880
we added

320
00:14:08,880 --> 00:14:11,440
the critical priority for the risk

321
00:14:11,440 --> 00:14:13,120
threat

322
00:14:13,120 --> 00:14:16,399
the prob the probability that the risk

323
00:14:16,399 --> 00:14:19,279
thread is in risk window 2 is very very

324
00:14:19,279 --> 00:14:20,320
low

325
00:14:20,320 --> 00:14:21,760
so

326
00:14:21,760 --> 00:14:24,480
we only need to deal with a risk window

327
00:14:24,480 --> 00:14:27,279
zero and a risk window one

328
00:14:27,279 --> 00:14:29,360
let's firstly focus on the risk window

329
00:14:29,360 --> 00:14:31,920
one when the wrist thread is in wrist

330
00:14:31,920 --> 00:14:34,560
window one it is perfect situation we

331
00:14:34,560 --> 00:14:38,560
expected the only change we challenge we

332
00:14:38,560 --> 00:14:40,959
need to solve is directory to file

333
00:14:40,959 --> 00:14:42,480
reduction

334
00:14:42,480 --> 00:14:44,959
the good news is the existing mount

335
00:14:44,959 --> 00:14:47,760
point and the object symboling trick

336
00:14:47,760 --> 00:14:49,519
works for

337
00:14:49,519 --> 00:14:51,920
directory to file redirection the only

338
00:14:51,920 --> 00:14:53,040
thing

339
00:14:53,040 --> 00:14:56,240
the only change we need to do is

340
00:14:56,240 --> 00:15:00,160
to create point for the parent directory

341
00:15:00,160 --> 00:15:02,959
of the vulnerable directory

342
00:15:02,959 --> 00:15:05,440
besides get name screen 4 and send them

343
00:15:05,440 --> 00:15:08,160
secret info do not

344
00:15:08,160 --> 00:15:10,079
differentiate

345
00:15:10,079 --> 00:15:12,560
object name it means

346
00:15:12,560 --> 00:15:15,760
both file and the directory work for

347
00:15:15,760 --> 00:15:19,360
those two functions at the same time

348
00:15:19,360 --> 00:15:21,600
it is perfect for file redirection

349
00:15:21,600 --> 00:15:24,079
attacks

350
00:15:24,639 --> 00:15:27,199
after solving the risk window 1

351
00:15:27,199 --> 00:15:30,480
let's see how we overcome all challenges

352
00:15:30,480 --> 00:15:32,639
and bypass current mitigations and

353
00:15:32,639 --> 00:15:35,199
finally set the upload successfully and

354
00:15:35,199 --> 00:15:37,920
get a 100 success rate in which window

355
00:15:37,920 --> 00:15:39,360
zero

356
00:15:39,360 --> 00:15:42,240
we need to redirect the same vulnerable

357
00:15:42,240 --> 00:15:44,240
directory to different targets in

358
00:15:44,240 --> 00:15:46,639
different time

359
00:15:46,639 --> 00:15:48,480
we can create a mount point for the

360
00:15:48,480 --> 00:15:51,920
directory if it is not empty or in use

361
00:15:51,920 --> 00:15:54,639
so we use a dangling mount point

362
00:15:54,639 --> 00:15:57,920
technique it's like the dangling file

363
00:15:57,920 --> 00:16:00,240
pointer in use of free

364
00:16:00,240 --> 00:16:03,279
exploitation we can point it to any

365
00:16:03,279 --> 00:16:05,440
different location

366
00:16:05,440 --> 00:16:08,480
in any time we want

367
00:16:08,480 --> 00:16:10,880
the first reduction happens when

368
00:16:10,880 --> 00:16:13,120
creating the vulnerable directory the

369
00:16:13,120 --> 00:16:15,199
vulnerable directory will be created

370
00:16:15,199 --> 00:16:17,680
under a fake publisher

371
00:16:17,680 --> 00:16:20,800
application directory after redirection

372
00:16:20,800 --> 00:16:23,199
we will show other redirections in the

373
00:16:23,199 --> 00:16:24,959
following slides

374
00:16:24,959 --> 00:16:27,519
to succeed to set the upload for the

375
00:16:27,519 --> 00:16:30,079
gangnam screenflow we need to redirect

376
00:16:30,079 --> 00:16:31,759
the directory

377
00:16:31,759 --> 00:16:35,120
to the file otherwise all our block

378
00:16:35,120 --> 00:16:38,480
will not work for gnm secret info

379
00:16:38,480 --> 00:16:40,480
we did the redirection in the wrist

380
00:16:40,480 --> 00:16:41,680
thread

381
00:16:41,680 --> 00:16:44,800
since it is running the release window 0

382
00:16:44,800 --> 00:16:47,920
we can finish the redirection

383
00:16:47,920 --> 00:16:50,480
successfully before

384
00:16:50,480 --> 00:16:53,440
get named screen 4 is called

385
00:16:53,440 --> 00:16:54,959
since

386
00:16:54,959 --> 00:16:57,360
get named screen info use read

387
00:16:57,360 --> 00:17:00,320
attributes to open the file we found two

388
00:17:00,320 --> 00:17:01,759
types of

389
00:17:01,759 --> 00:17:04,480
uploads level one and a batch of block

390
00:17:04,480 --> 00:17:07,599
can block file operation when opening

391
00:17:07,599 --> 00:17:09,359
the file with

392
00:17:09,359 --> 00:17:11,520
read attributes

393
00:17:11,520 --> 00:17:14,640
so we can succeed to set the level one

394
00:17:14,640 --> 00:17:15,679
upload

395
00:17:15,679 --> 00:17:18,240
on the fixed file beforehand and the

396
00:17:18,240 --> 00:17:21,439
wing get m secret info is called the

397
00:17:21,439 --> 00:17:24,720
upload callback will be triggered and do

398
00:17:24,720 --> 00:17:27,679
the third time file redirection to

399
00:17:27,679 --> 00:17:30,559
redirect the vulnerable directory to the

400
00:17:30,559 --> 00:17:32,720
target into system file

401
00:17:32,720 --> 00:17:33,520
then

402
00:17:33,520 --> 00:17:36,320
synonym screen4 will override the acl of

403
00:17:36,320 --> 00:17:39,280
the target file with normal user fully

404
00:17:39,280 --> 00:17:42,000
control privilege

405
00:17:42,000 --> 00:17:44,960
this is the whole view of how to win a

406
00:17:44,960 --> 00:17:47,520
seemingly impossible risk window by

407
00:17:47,520 --> 00:17:50,000
redirecting the vulnerable directory to

408
00:17:50,000 --> 00:17:52,880
different targets for three times

409
00:17:52,880 --> 00:17:56,960
first for create create directory second

410
00:17:56,960 --> 00:17:59,679
for genome screen for in the wrist

411
00:17:59,679 --> 00:18:01,679
thread second

412
00:18:01,679 --> 00:18:03,679
third

413
00:18:03,679 --> 00:18:04,880
for

414
00:18:04,880 --> 00:18:09,360
synonym secret info in upload callback

415
00:18:09,360 --> 00:18:11,760
now we have 100 success rate for the

416
00:18:11,760 --> 00:18:14,799
risk window zero and a one

417
00:18:14,799 --> 00:18:16,880
and the probability of

418
00:18:16,880 --> 00:18:19,440
risk window zero is very high so the

419
00:18:19,440 --> 00:18:22,320
exploit success rate is very high even

420
00:18:22,320 --> 00:18:24,000
for one time running

421
00:18:24,000 --> 00:18:26,799
actually the exploits succeed

422
00:18:26,799 --> 00:18:29,919
in one trial in most of time in a vm

423
00:18:29,919 --> 00:18:33,520
with a two-car cpu

424
00:18:34,080 --> 00:18:36,880
after we succeed to override the ac air

425
00:18:36,880 --> 00:18:39,280
of the nt-system file we need to find a

426
00:18:39,280 --> 00:18:42,000
way to execute the code system

427
00:18:42,000 --> 00:18:44,480
there are two known tricks left after

428
00:18:44,480 --> 00:18:47,600
mitigations print config and the type

429
00:18:47,600 --> 00:18:51,600
lib file sysfx ui since both both of

430
00:18:51,600 --> 00:18:53,840
them are existing

431
00:18:53,840 --> 00:18:54,880
techniques

432
00:18:54,880 --> 00:18:57,280
we are not putting more time under on

433
00:18:57,280 --> 00:18:59,679
them today

434
00:18:59,679 --> 00:19:02,640
now we can elevate the privileged system

435
00:19:02,640 --> 00:19:05,120
but the stability is one of the most

436
00:19:05,120 --> 00:19:07,919
important things in ponton because you

437
00:19:07,919 --> 00:19:10,720
only have three chances to try

438
00:19:10,720 --> 00:19:13,840
we use a rerun until success

439
00:19:13,840 --> 00:19:17,440
strategy in our exploit it continually

440
00:19:17,440 --> 00:19:20,320
uninstall and reinstall the solid tire

441
00:19:20,320 --> 00:19:21,679
application

442
00:19:21,679 --> 00:19:24,080
there are lots of things need to take

443
00:19:24,080 --> 00:19:27,440
care for example we need to put the

444
00:19:27,440 --> 00:19:30,880
initial setup thing information into a

445
00:19:30,880 --> 00:19:34,080
config file otherwise we cannot get them

446
00:19:34,080 --> 00:19:36,080
anymore afterwards

447
00:19:36,080 --> 00:19:38,799
besides we need carefully

448
00:19:38,799 --> 00:19:42,400
deal with each field situation and

449
00:19:42,400 --> 00:19:43,840
do the

450
00:19:43,840 --> 00:19:44,880
uh

451
00:19:44,880 --> 00:19:48,080
correctly uh cleanup

452
00:19:48,080 --> 00:19:49,280
for

453
00:19:49,280 --> 00:19:51,200
all of open things

454
00:19:51,200 --> 00:19:55,200
like handle symbol link mount point

455
00:19:55,200 --> 00:19:58,080
thread directory upload and so on so

456
00:19:58,080 --> 00:20:01,679
forth and last we also need to

457
00:20:01,679 --> 00:20:03,520
deal with

458
00:20:03,520 --> 00:20:06,400
many corner cases to make sure

459
00:20:06,400 --> 00:20:09,840
our exploit can handle everything

460
00:20:09,840 --> 00:20:12,159
under all of current mitigations the

461
00:20:12,159 --> 00:20:14,159
exploitation logic is very very

462
00:20:14,159 --> 00:20:17,280
complicated you can see there are many

463
00:20:17,280 --> 00:20:21,360
modules in our exploitation

464
00:20:21,360 --> 00:20:26,240
but it works elegantly and perfectly

465
00:20:26,400 --> 00:20:29,360
today we are not going to explain all

466
00:20:29,360 --> 00:20:32,720
details in our in each module

467
00:20:32,720 --> 00:20:35,360
only two things want to mention the

468
00:20:35,360 --> 00:20:37,280
first the first

469
00:20:37,280 --> 00:20:40,799
we have a module to verify if the

470
00:20:40,799 --> 00:20:43,600
acl overriding is successful

471
00:20:43,600 --> 00:20:47,120
if not we will wrong we run the whole uh

472
00:20:47,120 --> 00:20:48,640
process

473
00:20:48,640 --> 00:20:51,440
until it's success

474
00:20:51,440 --> 00:20:52,240
the

475
00:20:52,240 --> 00:20:53,440
second thing

476
00:20:53,440 --> 00:20:56,559
is the we have a reason thread it is

477
00:20:56,559 --> 00:21:00,720
very important because the success rate

478
00:21:00,720 --> 00:21:04,000
depends on if the wrist thread enters

479
00:21:04,000 --> 00:21:08,000
into the right release window

480
00:21:08,159 --> 00:21:12,080
talk is cheap show me the demo

481
00:21:12,559 --> 00:21:15,039
you can see

482
00:21:15,120 --> 00:21:17,120
you can see uh

483
00:21:17,120 --> 00:21:20,000
it is a windows version prepare for

484
00:21:20,000 --> 00:21:21,600
pongtong

485
00:21:21,600 --> 00:21:23,200
and we are

486
00:21:23,200 --> 00:21:25,280
running the

487
00:21:25,280 --> 00:21:28,960
xy under normal user and run our

488
00:21:28,960 --> 00:21:30,640
exploitation

489
00:21:30,640 --> 00:21:32,559
on installing

490
00:21:32,559 --> 00:21:34,320
and

491
00:21:34,320 --> 00:21:36,320
read thread is running

492
00:21:36,320 --> 00:21:37,840
reinstall

493
00:21:37,840 --> 00:21:40,480
and success

494
00:21:40,480 --> 00:21:42,159
you can see a

495
00:21:42,159 --> 00:21:45,840
system a cmd pop-up

496
00:21:46,080 --> 00:21:49,360
if we check the pro command

497
00:21:49,360 --> 00:21:53,039
you can see a a system notepad is

498
00:21:53,039 --> 00:21:56,400
running under section zero and this is

499
00:21:56,400 --> 00:21:59,200
the system cmd rounder

500
00:21:59,200 --> 00:22:00,880
running under

501
00:22:00,880 --> 00:22:03,600
session two current session

502
00:22:03,600 --> 00:22:07,039
our exploitation only wrong once and

503
00:22:07,039 --> 00:22:08,320
succeed

504
00:22:08,320 --> 00:22:11,320
perfectly

505
00:22:16,880 --> 00:22:18,960
we have introduced many interesting

506
00:22:18,960 --> 00:22:20,960
interesting things for logic issues in

507
00:22:20,960 --> 00:22:23,600
reports points but the story does not

508
00:22:23,600 --> 00:22:26,960
end here microsoft stopped granting

509
00:22:26,960 --> 00:22:29,600
bhagavantis to the file rejection bug

510
00:22:29,600 --> 00:22:32,480
class and it is releasing more and more

511
00:22:32,480 --> 00:22:35,280
mitigations to kill the backlash fully

512
00:22:35,280 --> 00:22:38,240
it seems to be the end of the repulse

513
00:22:38,240 --> 00:22:41,919
point year but things are not always

514
00:22:41,919 --> 00:22:44,640
that easy we found a new realm which is

515
00:22:44,640 --> 00:22:47,679
never publicly deeply discussed before

516
00:22:47,679 --> 00:22:50,559
the memory corruption plus in replace

517
00:22:50,559 --> 00:22:52,960
points

518
00:22:53,600 --> 00:22:56,400
let's start from the new text surface

519
00:22:56,400 --> 00:22:58,960
internals first

520
00:22:58,960 --> 00:23:01,039
pass point operation

521
00:23:01,039 --> 00:23:03,200
as we mentioned before divisor control

522
00:23:03,200 --> 00:23:06,320
can be used to set get and delete your

523
00:23:06,320 --> 00:23:09,120
press points by

524
00:23:09,120 --> 00:23:11,039
setting the corresponding device out

525
00:23:11,039 --> 00:23:13,120
control code

526
00:23:13,120 --> 00:23:15,760
and there are other arguments in vessel

527
00:23:15,760 --> 00:23:17,039
control function

528
00:23:17,039 --> 00:23:20,320
input buffer output buffer let's see the

529
00:23:20,320 --> 00:23:23,679
repairs data structure first

530
00:23:23,679 --> 00:23:26,480
there is a four bytes replace tag which

531
00:23:26,480 --> 00:23:28,640
represents the type of

532
00:23:28,640 --> 00:23:30,799
replace point data

533
00:23:30,799 --> 00:23:31,760
and then

534
00:23:31,760 --> 00:23:34,640
two bytes of data lens two by three

535
00:23:34,640 --> 00:23:36,880
observed after that

536
00:23:36,880 --> 00:23:38,400
there are

537
00:23:38,400 --> 00:23:40,960
undocumented data buffer

538
00:23:40,960 --> 00:23:44,720
for generic reports buffer

539
00:23:44,720 --> 00:23:49,600
actually there are 54 repulse point tags

540
00:23:49,600 --> 00:23:50,640
totally

541
00:23:50,640 --> 00:23:53,120
one point and the symbol link on only

542
00:23:53,120 --> 00:23:54,320
two of them

543
00:23:54,320 --> 00:23:55,760
there are others

544
00:23:55,760 --> 00:23:58,799
uh other interesting report reverse

545
00:23:58,799 --> 00:24:00,240
point tags

546
00:24:00,240 --> 00:24:02,840
uh such as wci

547
00:24:02,840 --> 00:24:07,360
which are designed for windows container

548
00:24:07,360 --> 00:24:09,679
it is a relatively

549
00:24:09,679 --> 00:24:13,600
new thing on windows for the left 52

550
00:24:13,600 --> 00:24:15,360
price points tags

551
00:24:15,360 --> 00:24:17,840
what are they used for who use them and

552
00:24:17,840 --> 00:24:21,440
where they are used is there any unit

553
00:24:21,440 --> 00:24:23,760
new attack surface among them we will

554
00:24:23,760 --> 00:24:25,840
see in the following slides

555
00:24:25,840 --> 00:24:27,600
before exploring

556
00:24:27,600 --> 00:24:30,320
more details we create a vulnerability

557
00:24:30,320 --> 00:24:32,480
model first

558
00:24:32,480 --> 00:24:33,600
you can see

559
00:24:33,600 --> 00:24:35,360
a low privileged application

560
00:24:35,360 --> 00:24:37,120
communicated with high privileged

561
00:24:37,120 --> 00:24:38,480
application

562
00:24:38,480 --> 00:24:42,960
by alpc rpc com same with before

563
00:24:42,960 --> 00:24:44,840
high privilege

564
00:24:44,840 --> 00:24:49,120
applications has a module to process

565
00:24:49,120 --> 00:24:52,640
uh repulse point data it will firstly

566
00:24:52,640 --> 00:24:54,400
read repulse point

567
00:24:54,400 --> 00:24:55,360
on

568
00:24:55,360 --> 00:24:58,640
low privileged user controllable files

569
00:24:58,640 --> 00:25:00,880
or directories

570
00:25:00,880 --> 00:25:01,919
and then

571
00:25:01,919 --> 00:25:05,039
if low privileged user application

572
00:25:05,039 --> 00:25:08,400
write the repository data

573
00:25:08,400 --> 00:25:11,520
to those files or directories

574
00:25:11,520 --> 00:25:13,120
then

575
00:25:13,120 --> 00:25:15,600
low pre-privileged user controllable

576
00:25:15,600 --> 00:25:18,320
data will be written into high

577
00:25:18,320 --> 00:25:21,440
privileged applications as data input

578
00:25:21,440 --> 00:25:24,559
if high privilege applications do not

579
00:25:24,559 --> 00:25:26,480
process

580
00:25:26,480 --> 00:25:29,279
we passpoint data correctly or carefully

581
00:25:29,279 --> 00:25:30,799
there

582
00:25:30,799 --> 00:25:31,600
are

583
00:25:31,600 --> 00:25:33,279
memory corruption

584
00:25:33,279 --> 00:25:36,000
bugs possibly

585
00:25:36,000 --> 00:25:38,880
and it will crash

586
00:25:38,880 --> 00:25:40,159
high private

587
00:25:40,159 --> 00:25:43,039
privilege applications there is a way to

588
00:25:43,039 --> 00:25:44,960
write data from low privileged

589
00:25:44,960 --> 00:25:46,559
application to high privilege

590
00:25:46,559 --> 00:25:49,360
application it is where the new attack

591
00:25:49,360 --> 00:25:51,520
service is

592
00:25:51,520 --> 00:25:53,600
after creating the

593
00:25:53,600 --> 00:25:56,080
vulnerability model we start to find

594
00:25:56,080 --> 00:25:59,520
some targets to diving

595
00:25:59,760 --> 00:26:02,480
there are two ways to find the targets

596
00:26:02,480 --> 00:26:04,720
dynamic and static

597
00:26:04,720 --> 00:26:06,400
for dynamic

598
00:26:06,400 --> 00:26:07,520
method

599
00:26:07,520 --> 00:26:11,039
we use progmon to monitor

600
00:26:11,039 --> 00:26:14,159
some system events if we find

601
00:26:14,159 --> 00:26:16,240
a process with a

602
00:26:16,240 --> 00:26:17,840
system

603
00:26:17,840 --> 00:26:20,080
a system process

604
00:26:20,080 --> 00:26:23,279
access a normal user controllable

605
00:26:23,279 --> 00:26:25,200
directory of file

606
00:26:25,200 --> 00:26:28,480
with open repose point option

607
00:26:28,480 --> 00:26:30,880
it is suspicious

608
00:26:30,880 --> 00:26:33,840
and worse to take a closer look at to

609
00:26:33,840 --> 00:26:36,960
see if there's a

610
00:26:36,960 --> 00:26:39,440
we pass point data processing module to

611
00:26:39,440 --> 00:26:42,960
process replace point data

612
00:26:42,960 --> 00:26:44,960
for static we

613
00:26:44,960 --> 00:26:48,080
we write a adder python script to find

614
00:26:48,080 --> 00:26:51,360
the following code pattern

615
00:26:51,360 --> 00:26:53,279
in the code it's very simple to

616
00:26:53,279 --> 00:26:56,320
understand create file first and

617
00:26:56,320 --> 00:26:57,279
uh

618
00:26:57,279 --> 00:26:59,360
call director control to

619
00:26:59,360 --> 00:27:01,120
get uh

620
00:27:01,120 --> 00:27:03,520
your passport and data and check the

621
00:27:03,520 --> 00:27:04,880
type

622
00:27:04,880 --> 00:27:06,880
process the

623
00:27:06,880 --> 00:27:09,360
replace point data

624
00:27:09,360 --> 00:27:10,880
sometimes we need

625
00:27:10,880 --> 00:27:13,520
women you combine static method and a

626
00:27:13,520 --> 00:27:16,559
dynamic method to find and confirm the

627
00:27:16,559 --> 00:27:19,679
targets after finding the targets we can

628
00:27:19,679 --> 00:27:22,080
do bug hunting by clear review of

629
00:27:22,080 --> 00:27:23,840
fuzzing

630
00:27:23,840 --> 00:27:26,880
we have some interesting findings with

631
00:27:26,880 --> 00:27:30,080
only some initial investigations it is a

632
00:27:30,080 --> 00:27:33,279
total total new realm the code for

633
00:27:33,279 --> 00:27:35,679
replace points data processing is not

634
00:27:35,679 --> 00:27:38,480
well evaluated and the vulnerability are

635
00:27:38,480 --> 00:27:41,440
very straightforward we pick some

636
00:27:41,440 --> 00:27:44,159
interesting memory corruption but

637
00:27:44,159 --> 00:27:46,399
examples to show today

638
00:27:46,399 --> 00:27:49,039
there's a one function containing three

639
00:27:49,039 --> 00:27:52,240
types of vulnerabilities

640
00:27:52,240 --> 00:27:54,799
integer flow out of bounds rate and a

641
00:27:54,799 --> 00:27:56,080
risk condition

642
00:27:56,080 --> 00:27:58,320
more interestingly the similar code

643
00:27:58,320 --> 00:28:02,799
pattern appear in multiple modules

644
00:28:02,799 --> 00:28:04,880
the vulnerable function can be triggered

645
00:28:04,880 --> 00:28:05,679
by

646
00:28:05,679 --> 00:28:08,240
desktop bridge activation

647
00:28:08,240 --> 00:28:12,159
you can see desktop ad breach activation

648
00:28:12,159 --> 00:28:14,559
app communicated with app info service

649
00:28:14,559 --> 00:28:16,880
infoservicewith.com

650
00:28:16,880 --> 00:28:19,520
and here's a call stack for

651
00:28:19,520 --> 00:28:22,240
a client client com client and a com

652
00:28:22,240 --> 00:28:24,640
server

653
00:28:24,799 --> 00:28:26,960
we use the following code to create

654
00:28:26,960 --> 00:28:28,159
client

655
00:28:28,159 --> 00:28:30,640
create.com client to communicate with

656
00:28:30,640 --> 00:28:31,679
with the

657
00:28:31,679 --> 00:28:33,760
app info service

658
00:28:33,760 --> 00:28:36,159
there's a com class named

659
00:28:36,159 --> 00:28:39,440
desktop ebbx activator and there's an

660
00:28:39,440 --> 00:28:42,559
interesting interface in them in under

661
00:28:42,559 --> 00:28:45,039
that interface there are two

662
00:28:45,039 --> 00:28:48,640
methods we call activate method with

663
00:28:48,640 --> 00:28:52,000
local bridge and microsoft office hub

664
00:28:52,000 --> 00:28:54,159
as parameters

665
00:28:54,159 --> 00:28:57,200
you can see in appian for service

666
00:28:57,200 --> 00:28:59,760
there's a

667
00:28:59,760 --> 00:29:01,679
function named launch

668
00:29:01,679 --> 00:29:05,760
process with identity to

669
00:29:05,760 --> 00:29:09,039
deal with a com request

670
00:29:09,039 --> 00:29:12,080
then it will finally call wcp or

671
00:29:12,080 --> 00:29:14,080
passpoint

672
00:29:14,080 --> 00:29:16,240
this function will

673
00:29:16,240 --> 00:29:18,799
read the replace point data on the

674
00:29:18,799 --> 00:29:21,039
normal user controllable directory local

675
00:29:21,039 --> 00:29:24,320
cache with the system

676
00:29:24,480 --> 00:29:27,679
more details for wcp reader passpoint

677
00:29:27,679 --> 00:29:30,240
function you can see firstly

678
00:29:30,240 --> 00:29:31,600
create file

679
00:29:31,600 --> 00:29:33,360
for local cache

680
00:29:33,360 --> 00:29:34,960
normal user

681
00:29:34,960 --> 00:29:36,399
controllable

682
00:29:36,399 --> 00:29:39,360
and called device or control to get a

683
00:29:39,360 --> 00:29:42,399
replace point data into a fixed

684
00:29:42,399 --> 00:29:44,240
um

685
00:29:44,240 --> 00:29:47,440
output buffer to be mentioned this

686
00:29:47,440 --> 00:29:48,159
the

687
00:29:48,159 --> 00:29:51,360
this output buffer is a fixed sized hip

688
00:29:51,360 --> 00:29:53,039
with a size

689
00:29:53,039 --> 00:29:54,960
zero zero zero zero we will introduce

690
00:29:54,960 --> 00:29:57,679
later how it leads to a lot of bounds

691
00:29:57,679 --> 00:29:59,520
read vulnerability

692
00:29:59,520 --> 00:30:02,480
after that the code will check the type

693
00:30:02,480 --> 00:30:04,399
you can see here

694
00:30:04,399 --> 00:30:06,720
and then process the data

695
00:30:06,720 --> 00:30:09,600
so we can

696
00:30:09,600 --> 00:30:12,159
set the repository data

697
00:30:12,159 --> 00:30:14,880
with a following code

698
00:30:14,880 --> 00:30:17,840
and we set a reposit tag

699
00:30:17,840 --> 00:30:21,440
with the wci link

700
00:30:21,440 --> 00:30:25,840
and then only two bytes of normal value

701
00:30:25,840 --> 00:30:28,640
and we will see how a literal out of

702
00:30:28,640 --> 00:30:32,240
bounds write a vulnerability

703
00:30:32,960 --> 00:30:36,159
wci really requires point data function

704
00:30:36,159 --> 00:30:38,080
is responsible to process through

705
00:30:38,080 --> 00:30:40,960
passport data

706
00:30:40,960 --> 00:30:43,600
here is

707
00:30:43,840 --> 00:30:46,399
the replacement data

708
00:30:46,399 --> 00:30:48,399
read from the

709
00:30:48,399 --> 00:30:51,279
local cache directory

710
00:30:51,279 --> 00:30:53,360
and then

711
00:30:53,360 --> 00:30:54,320
here

712
00:30:54,320 --> 00:30:58,880
is where the integer overflow happens

713
00:30:58,880 --> 00:31:00,159
there's a

714
00:31:00,159 --> 00:31:02,559
plus

715
00:31:02,880 --> 00:31:04,480
operation

716
00:31:04,480 --> 00:31:06,159
and uh

717
00:31:06,159 --> 00:31:09,360
for fff plus one six

718
00:31:09,360 --> 00:31:10,480
but the

719
00:31:10,480 --> 00:31:14,559
the buffer lens variable is two bytes so

720
00:31:14,559 --> 00:31:15,600
it will

721
00:31:15,600 --> 00:31:18,640
generate a very small value 1 5 then the

722
00:31:18,640 --> 00:31:21,360
code will allocate a heap with this size

723
00:31:21,360 --> 00:31:22,880
1 5

724
00:31:22,880 --> 00:31:24,480
and

725
00:31:24,480 --> 00:31:26,880
put that that

726
00:31:26,880 --> 00:31:28,159
heap

727
00:31:28,159 --> 00:31:31,120
as a destination buffer of the memory

728
00:31:31,120 --> 00:31:34,960
copy very small heap

729
00:31:34,960 --> 00:31:37,679
but the memory copies size is

730
00:31:37,679 --> 00:31:40,640
controllable in the

731
00:31:40,640 --> 00:31:43,519
passport and data

732
00:31:43,519 --> 00:31:48,000
it is set to ffffff so obviously this

733
00:31:48,000 --> 00:31:50,399
memory copy operation will

734
00:31:50,399 --> 00:31:52,480
lead to out of bounds right

735
00:31:52,480 --> 00:31:54,159
vulnerability

736
00:31:54,159 --> 00:31:56,559
in the crashing fall we can

737
00:31:56,559 --> 00:31:57,360
see

738
00:31:57,360 --> 00:31:59,120
more clearly

739
00:31:59,120 --> 00:32:01,840
the destination buffer size 1 5

740
00:32:01,840 --> 00:32:04,880
the copy size is fff

741
00:32:04,880 --> 00:32:07,600
obviously

742
00:32:09,600 --> 00:32:13,519
it will crash at a memory copy

743
00:32:13,840 --> 00:32:17,760
if we use a following code

744
00:32:18,559 --> 00:32:22,080
to set a replace point data

745
00:32:23,840 --> 00:32:25,519
we'll see how

746
00:32:25,519 --> 00:32:26,240
it

747
00:32:26,240 --> 00:32:28,559
can lead to a lot of bonds read the

748
00:32:28,559 --> 00:32:31,440
vulnerability nothing special we

749
00:32:31,440 --> 00:32:34,240
previously called only

750
00:32:34,240 --> 00:32:37,760
slightly change the two bytes of normal

751
00:32:37,760 --> 00:32:40,000
value

752
00:32:40,000 --> 00:32:41,679
the same function

753
00:32:41,679 --> 00:32:42,640
same

754
00:32:42,640 --> 00:32:44,159
uh

755
00:32:44,159 --> 00:32:47,120
also wcp read the repository to read the

756
00:32:47,120 --> 00:32:48,799
replacement data

757
00:32:48,799 --> 00:32:52,799
and here is a fix for the integer flow

758
00:32:52,799 --> 00:32:54,000
and

759
00:32:54,000 --> 00:32:57,840
pay attention here the saucer dress soft

760
00:32:57,840 --> 00:33:01,120
buffer is a fixed hey fixed size hip

761
00:33:01,120 --> 00:33:03,840
with a size uh f

762
00:33:03,840 --> 00:33:05,039
of

763
00:33:05,039 --> 00:33:06,799
4 000

764
00:33:06,799 --> 00:33:09,600
as we mentioned before

765
00:33:09,600 --> 00:33:10,880
as a

766
00:33:10,880 --> 00:33:12,799
for the memory copy but

767
00:33:12,799 --> 00:33:15,840
the copy size is also controllable in

768
00:33:15,840 --> 00:33:17,039
the

769
00:33:17,039 --> 00:33:19,039
replacement data

770
00:33:19,039 --> 00:33:22,960
we set it to ff10 so if through the

771
00:33:22,960 --> 00:33:26,000
memory copy it will be

772
00:33:26,000 --> 00:33:28,960
out of bounds read the vulnerability

773
00:33:28,960 --> 00:33:32,320
if we check check the crash info we can

774
00:33:32,320 --> 00:33:35,679
see also see more clear

775
00:33:35,679 --> 00:33:38,559
you can see the

776
00:33:38,559 --> 00:33:42,399
source buffer size of memory copy is

777
00:33:42,399 --> 00:33:45,679
four zero zero zero but the copies size

778
00:33:45,679 --> 00:33:47,840
is ff one zero

779
00:33:47,840 --> 00:33:50,840
will lead to other fonts read

780
00:33:50,840 --> 00:33:52,399
vulnerability

781
00:33:52,399 --> 00:33:53,360
it's a

782
00:33:53,360 --> 00:33:55,600
risk condition it's a payday that we

783
00:33:55,600 --> 00:33:56,880
can't talk

784
00:33:56,880 --> 00:33:58,799
more details about it because it is

785
00:33:58,799 --> 00:34:00,320
still vulnerable

786
00:34:00,320 --> 00:34:02,880
we may feel the slides for this part

787
00:34:02,880 --> 00:34:06,240
when we get the chance in the future we

788
00:34:06,240 --> 00:34:08,399
have seen one function containing three

789
00:34:08,399 --> 00:34:10,480
types of vulnerabilities but more

790
00:34:10,480 --> 00:34:12,800
interestingly the similar code pattern

791
00:34:12,800 --> 00:34:15,520
about the repulse point data processing

792
00:34:15,520 --> 00:34:19,440
appear in multiple different modules

793
00:34:19,440 --> 00:34:22,960
abbx deployment server wci and so on so

794
00:34:22,960 --> 00:34:24,560
forth

795
00:34:24,560 --> 00:34:27,199
we reported our findings to microsoft

796
00:34:27,199 --> 00:34:29,839
some of the cases got a fast response

797
00:34:29,839 --> 00:34:32,320
and highly evaluated with back bounty

798
00:34:32,320 --> 00:34:35,440
since they are totally new and valuable

799
00:34:35,440 --> 00:34:36,960
to microsoft

800
00:34:36,960 --> 00:34:39,679
but in the meantime they also silently

801
00:34:39,679 --> 00:34:42,960
patch some of our cases maybe your

802
00:34:42,960 --> 00:34:45,679
also have similar experiences

803
00:34:45,679 --> 00:34:46,839
from

804
00:34:46,839 --> 00:34:48,399
microsoft

805
00:34:48,399 --> 00:34:51,520
the impact under this new attack surface

806
00:34:51,520 --> 00:34:53,520
almost all current and the future

807
00:34:53,520 --> 00:34:56,079
mitigations for logic bugs in price

808
00:34:56,079 --> 00:34:58,880
points are useless because memory

809
00:34:58,880 --> 00:35:01,839
corruption bugs and logic bugs

810
00:35:01,839 --> 00:35:04,560
are from totally different dimensions in

811
00:35:04,560 --> 00:35:07,119
addition the memory corruption bug has

812
00:35:07,119 --> 00:35:09,760
the native code execution capability no

813
00:35:09,760 --> 00:35:13,119
matter the vulnerable code are executed

814
00:35:13,119 --> 00:35:15,760
with system impersonation or not in the

815
00:35:15,760 --> 00:35:18,079
system services and a successful

816
00:35:18,079 --> 00:35:20,480
exploitation lead to privileged

817
00:35:20,480 --> 00:35:22,560
elevation to system

818
00:35:22,560 --> 00:35:25,119
directly

819
00:35:25,280 --> 00:35:27,520
for future bug hunting

820
00:35:27,520 --> 00:35:30,079
i think we should a good example in our

821
00:35:30,079 --> 00:35:32,720
topic find the target curve view of

822
00:35:32,720 --> 00:35:33,760
fuzzy

823
00:35:33,760 --> 00:35:35,520
create a

824
00:35:35,520 --> 00:35:36,720
once

825
00:35:36,720 --> 00:35:39,680
a new attack surface is open there are

826
00:35:39,680 --> 00:35:42,000
always many low hunting fruits it is

827
00:35:42,000 --> 00:35:45,200
much easier to find easy bugs under a

828
00:35:45,200 --> 00:35:48,079
new attack surface than finding an

829
00:35:48,079 --> 00:35:51,440
interesting new attack service itself

830
00:35:51,440 --> 00:35:54,400
we believe there are still many not well

831
00:35:54,400 --> 00:35:57,680
evaluated code left in this new attack

832
00:35:57,680 --> 00:36:00,000
surface

833
00:36:00,079 --> 00:36:01,839
to summarize

834
00:36:01,839 --> 00:36:06,000
our we intrigue we introduced a story of

835
00:36:06,000 --> 00:36:08,640
two solid tires in our topic in the

836
00:36:08,640 --> 00:36:11,280
pontoon journey we introduced a unique

837
00:36:11,280 --> 00:36:14,240
bank hunting strategy we use it to find

838
00:36:14,240 --> 00:36:16,880
the microsoft solid tire you set back in

839
00:36:16,880 --> 00:36:20,560
one day and it can also be used to find

840
00:36:20,560 --> 00:36:23,280
more redo bugs in different applications

841
00:36:23,280 --> 00:36:25,440
and components

842
00:36:25,440 --> 00:36:28,000
in the in the exploitation part we

843
00:36:28,000 --> 00:36:30,320
introduce some useful and universal

844
00:36:30,320 --> 00:36:32,640
exploit techniques which can be applied

845
00:36:32,640 --> 00:36:35,119
to similar exploits for mitigation

846
00:36:35,119 --> 00:36:37,119
bypass in the future

847
00:36:37,119 --> 00:36:40,400
in the other part we introduce a less

848
00:36:40,400 --> 00:36:42,720
recognized solid tire

849
00:36:42,720 --> 00:36:44,800
the new attack surface for memory

850
00:36:44,800 --> 00:36:47,760
corruption bugs in repulse points

851
00:36:47,760 --> 00:36:50,079
hope you can get some inspirations from

852
00:36:50,079 --> 00:36:54,000
our topic and win your own solitaire in

853
00:36:54,000 --> 00:36:58,079
the reverse points in the future

854
00:36:58,160 --> 00:36:59,040
thanks

855
00:36:59,040 --> 00:37:01,920
for the amazing previous work maybe not

856
00:37:01,920 --> 00:37:04,640
all of them are listed here but thanks

857
00:37:04,640 --> 00:37:06,640
to all

858
00:37:06,640 --> 00:37:08,800
also thank you for listening and

859
00:37:08,800 --> 00:37:09,920
attending

860
00:37:09,920 --> 00:37:12,110
questions

861
00:37:12,110 --> 00:37:21,720
[Music]

