1
00:00:00,910 --> 00:00:07,790
[Music]

2
00:00:08,400 --> 00:00:10,320
hello everyone

3
00:00:10,320 --> 00:00:12,160
my name is encho

4
00:00:12,160 --> 00:00:14,719
so happy to share our research

5
00:00:14,719 --> 00:00:17,440
in blackhat europe 2021

6
00:00:17,440 --> 00:00:20,240
my talk is rewrote your intent for

7
00:00:20,240 --> 00:00:23,199
privileged escalation and universal way

8
00:00:23,199 --> 00:00:26,160
to exploit android pending intents in

9
00:00:26,160 --> 00:00:30,920
high profile and system apps

10
00:00:30,960 --> 00:00:32,640
this is our agenda

11
00:00:32,640 --> 00:00:35,840
and first i'm gonna introduce the basic

12
00:00:35,840 --> 00:00:39,120
concept of intense and pending tense in

13
00:00:39,120 --> 00:00:40,559
android

14
00:00:40,559 --> 00:00:43,680
then give previous research examples

15
00:00:43,680 --> 00:00:46,480
then the key parts of this talk

16
00:00:46,480 --> 00:00:48,719
i'll discuss how to retrieve hand

17
00:00:48,719 --> 00:00:51,600
intents and how to hijack insecure

18
00:00:51,600 --> 00:00:53,039
pending tense

19
00:00:53,039 --> 00:00:55,120
then i'll give typical vulnerability

20
00:00:55,120 --> 00:00:56,079
cases

21
00:00:56,079 --> 00:00:59,600
in real world app most of them are from

22
00:00:59,600 --> 00:01:03,280
android system and last i introduce

23
00:01:03,280 --> 00:01:05,680
our pen intent scanner and create

24
00:01:05,680 --> 00:01:08,240
changes about pen intent introduced in

25
00:01:08,240 --> 00:01:12,199
upcoming android 12.

26
00:01:12,560 --> 00:01:14,080
before we start

27
00:01:14,080 --> 00:01:16,720
let me introduce who we are

28
00:01:16,720 --> 00:01:17,680
and her

29
00:01:17,680 --> 00:01:21,360
in oppo zoo security lab

30
00:01:21,360 --> 00:01:24,000
oppo zoo security lab was funded by oppo

31
00:01:24,000 --> 00:01:25,680
security in march

32
00:01:25,680 --> 00:01:27,280
2019

33
00:01:27,280 --> 00:01:29,920
it focuses on security and privacy

34
00:01:29,920 --> 00:01:33,920
research in the field of android web

35
00:01:33,920 --> 00:01:36,720
browser and iot

36
00:01:36,720 --> 00:01:38,400
one bulletin

37
00:01:38,400 --> 00:01:41,520
is an independent security researcher

38
00:01:41,520 --> 00:01:45,040
taoyang wu he works in vulnerability and

39
00:01:45,040 --> 00:01:46,880
privacy research lab

40
00:01:46,880 --> 00:01:51,119
in the chinese university of hong kong

41
00:01:51,680 --> 00:01:52,479
so

42
00:01:52,479 --> 00:01:54,479
what are intents

43
00:01:54,479 --> 00:01:55,600
intense

44
00:01:55,600 --> 00:01:58,880
a high-level inter-component messages

45
00:01:58,880 --> 00:02:01,759
based on binder sent between apps to

46
00:02:01,759 --> 00:02:03,920
perform actions

47
00:02:03,920 --> 00:02:05,360
for example

48
00:02:05,360 --> 00:02:08,560
app a can use an intent to perform

49
00:02:08,560 --> 00:02:11,200
actions like start activity send

50
00:02:11,200 --> 00:02:14,959
broadcast start service and app b

51
00:02:14,959 --> 00:02:17,440
intent has many fields to describe

52
00:02:17,440 --> 00:02:18,720
itself

53
00:02:18,720 --> 00:02:21,280
including action data component and so

54
00:02:21,280 --> 00:02:25,440
on if it has component or selector it is

55
00:02:25,440 --> 00:02:27,920
an explicit intent

56
00:02:27,920 --> 00:02:30,760
meaning the destination app is being

57
00:02:30,760 --> 00:02:33,200
explicitly set

58
00:02:33,200 --> 00:02:35,040
so it has only

59
00:02:35,040 --> 00:02:38,160
if it has only action it is the implicit

60
00:02:38,160 --> 00:02:39,280
intent

61
00:02:39,280 --> 00:02:41,920
meaning only apps declaring intended

62
00:02:41,920 --> 00:02:45,200
filter when this action can receive the

63
00:02:45,200 --> 00:02:46,400
intent

64
00:02:46,400 --> 00:02:49,840
if it has no field we call it an empty

65
00:02:49,840 --> 00:02:52,239
intent

66
00:02:53,680 --> 00:02:55,840
then pending intents

67
00:02:55,840 --> 00:02:58,400
the advanced version of noble android

68
00:02:58,400 --> 00:02:59,519
intents

69
00:02:59,519 --> 00:03:00,560
provides

70
00:03:00,560 --> 00:03:03,680
powerful inter-components communications

71
00:03:03,680 --> 00:03:04,879
android

72
00:03:04,879 --> 00:03:07,760
a pending intent holds a base intent

73
00:03:07,760 --> 00:03:10,879
that can be executed by another app

74
00:03:10,879 --> 00:03:13,760
under the creator apps identity and

75
00:03:13,760 --> 00:03:16,959
permissions as if the target app was

76
00:03:16,959 --> 00:03:18,400
created

77
00:03:18,400 --> 00:03:19,840
for example

78
00:03:19,840 --> 00:03:21,599
app a can send

79
00:03:21,599 --> 00:03:23,200
its pending intent

80
00:03:23,200 --> 00:03:25,760
with the base intent to app b

81
00:03:25,760 --> 00:03:29,599
then app b invoke 10 intent send

82
00:03:29,599 --> 00:03:33,200
to send the base intent on behalf of app

83
00:03:33,200 --> 00:03:35,360
a

84
00:03:35,360 --> 00:03:37,599
what if some malicious apps

85
00:03:37,599 --> 00:03:40,560
got pen intent sent between

86
00:03:40,560 --> 00:03:42,400
this is a root cause

87
00:03:42,400 --> 00:03:45,200
of pending tender security issue

88
00:03:45,200 --> 00:03:48,319
as creators important identity and

89
00:03:48,319 --> 00:03:49,680
permissions

90
00:03:49,680 --> 00:03:52,000
pending intents could be linked to

91
00:03:52,000 --> 00:03:53,680
third-party apps

92
00:03:53,680 --> 00:03:56,080
resulting privilege escalation

93
00:03:56,080 --> 00:03:59,080
unexpectedly

94
00:04:00,640 --> 00:04:02,959
the pending intent api

95
00:04:02,959 --> 00:04:05,760
include get activity get activities get

96
00:04:05,760 --> 00:04:08,239
broadcast get service get foreground

97
00:04:08,239 --> 00:04:10,640
service

98
00:04:11,120 --> 00:04:15,840
apps using to generate a pending intent

99
00:04:15,840 --> 00:04:18,560
notice the parameter of the apis

100
00:04:18,560 --> 00:04:20,959
the intended parameter is write to the

101
00:04:20,959 --> 00:04:22,639
base intent

102
00:04:22,639 --> 00:04:25,360
if there is no flag immutable

103
00:04:25,360 --> 00:04:27,120
which is by default

104
00:04:27,120 --> 00:04:31,520
the base intent can be modified later

105
00:04:31,520 --> 00:04:32,720
this flag

106
00:04:32,720 --> 00:04:36,000
just began to be widely used to fix the

107
00:04:36,000 --> 00:04:40,080
pending intent back after our research

108
00:04:40,080 --> 00:04:42,960
also note filling flux

109
00:04:42,960 --> 00:04:45,120
which allows the current selector or

110
00:04:45,120 --> 00:04:47,360
component to be overwritten

111
00:04:47,360 --> 00:04:51,520
even if it is already set

112
00:04:52,560 --> 00:04:55,199
previous research just shows the tips of

113
00:04:55,199 --> 00:04:57,680
pending intent security iceberg

114
00:04:57,680 --> 00:05:00,400
there are few cases of hijacking

115
00:05:00,400 --> 00:05:02,560
empty-based intents

116
00:05:02,560 --> 00:05:05,600
one is in aosp settings

117
00:05:05,600 --> 00:05:06,639
it's a

118
00:05:06,639 --> 00:05:09,039
broadcast anywhere back

119
00:05:09,039 --> 00:05:11,120
the bug involves

120
00:05:11,120 --> 00:05:14,560
complicated interaction between settings

121
00:05:14,560 --> 00:05:18,320
system server and an authenticator app

122
00:05:18,320 --> 00:05:20,800
a malicious authenticator

123
00:05:20,800 --> 00:05:23,600
can get mpending intent created by

124
00:05:23,600 --> 00:05:26,800
settings add a dangerous action

125
00:05:26,800 --> 00:05:27,919
such as

126
00:05:27,919 --> 00:05:30,880
action boot completed and send it in the

127
00:05:30,880 --> 00:05:34,400
name of uid 1000 to send the broadcast

128
00:05:34,400 --> 00:05:37,199
to any reservers in the system

129
00:05:37,199 --> 00:05:39,360
this is why the spark is called

130
00:05:39,360 --> 00:05:42,800
broadcast anywhere

131
00:05:43,120 --> 00:05:44,960
the other case

132
00:05:44,960 --> 00:05:48,479
is in popular app line shared in kansas

133
00:05:48,479 --> 00:05:50,880
west 2016.

134
00:05:50,880 --> 00:05:53,840
the line app leaks append intent with

135
00:05:53,840 --> 00:05:54,880
base

136
00:05:54,880 --> 00:05:56,960
empty intents

137
00:05:56,960 --> 00:05:59,360
then malicious app can get the pending

138
00:05:59,360 --> 00:06:01,280
intent created by line

139
00:06:01,280 --> 00:06:04,160
add a dangerous action and extras

140
00:06:04,160 --> 00:06:06,400
and send it in the name online

141
00:06:06,400 --> 00:06:10,799
to create a fake push message

142
00:06:11,680 --> 00:06:12,639
so

143
00:06:12,639 --> 00:06:14,720
in previous research

144
00:06:14,720 --> 00:06:16,800
insecure pending intents

145
00:06:16,800 --> 00:06:19,440
are retrieved from intent based

146
00:06:19,440 --> 00:06:22,000
inter-component communications

147
00:06:22,000 --> 00:06:25,360
which actually are very rare

148
00:06:25,360 --> 00:06:28,960
so far we have the first basic problem

149
00:06:28,960 --> 00:06:32,000
of this research

150
00:06:33,039 --> 00:06:36,240
can we retrieve pending intents

151
00:06:36,240 --> 00:06:39,680
which are widely used in slice providers

152
00:06:39,680 --> 00:06:41,280
notifications

153
00:06:41,280 --> 00:06:46,080
media browser services and app widgets

154
00:06:46,080 --> 00:06:48,880
only after retrieving them can we

155
00:06:48,880 --> 00:06:52,000
explore it further

156
00:06:53,440 --> 00:06:55,520
let's take a look at the slice provider

157
00:06:55,520 --> 00:06:56,880
first

158
00:06:56,880 --> 00:06:59,599
it is a mechanism to share slices

159
00:06:59,599 --> 00:07:00,840
between

160
00:07:00,840 --> 00:07:03,360
applications for example

161
00:07:03,360 --> 00:07:05,919
settings app can share its emphasis

162
00:07:05,919 --> 00:07:07,360
setting slides

163
00:07:07,360 --> 00:07:10,479
via content-based slides ui to slice

164
00:07:10,479 --> 00:07:13,120
viewer app while exporting the settings

165
00:07:13,120 --> 00:07:15,039
size provider

166
00:07:15,039 --> 00:07:17,840
then slice viewer can allow user to set

167
00:07:17,840 --> 00:07:22,638
nfc in its own user interface

168
00:07:24,880 --> 00:07:27,440
so what are slices

169
00:07:27,440 --> 00:07:28,720
slices

170
00:07:28,720 --> 00:07:30,880
are shareable uis

171
00:07:30,880 --> 00:07:33,360
represented by slice uis

172
00:07:33,360 --> 00:07:38,160
and exposed by size provider

173
00:07:41,520 --> 00:07:46,400
it contains icon title and slice action

174
00:07:46,400 --> 00:07:49,520
and the slice action is implement

175
00:07:49,520 --> 00:07:52,479
implemented with pending intent as the

176
00:07:52,479 --> 00:07:55,919
source code snippets shows

177
00:07:57,599 --> 00:08:00,000
developers can use slash wheel manager

178
00:08:00,000 --> 00:08:03,599
band slice api to bind the size provider

179
00:08:03,599 --> 00:08:05,199
to get a size

180
00:08:05,199 --> 00:08:08,000
or use low level content resolver call

181
00:08:08,000 --> 00:08:09,199
api

182
00:08:09,199 --> 00:08:12,479
then get pending intent from slice here

183
00:08:12,479 --> 00:08:16,160
is an example of using content resolver

184
00:08:16,160 --> 00:08:17,520
call method

185
00:08:17,520 --> 00:08:18,720
to bind

186
00:08:18,720 --> 00:08:21,520
a slice provider and get a slice

187
00:08:21,520 --> 00:08:23,440
then get a pending intent

188
00:08:23,440 --> 00:08:26,759
in the slice

189
00:08:27,680 --> 00:08:29,120
then let's take a look at the

190
00:08:29,120 --> 00:08:30,800
notification

191
00:08:30,800 --> 00:08:33,839
notifications are extremely common in

192
00:08:33,839 --> 00:08:35,440
android system

193
00:08:35,440 --> 00:08:37,760
just as a picture shows

194
00:08:37,760 --> 00:08:40,799
a notification contains further actions

195
00:08:40,799 --> 00:08:44,560
after user taps its contents and buttons

196
00:08:44,560 --> 00:08:46,560
these actions are actually pending

197
00:08:46,560 --> 00:08:47,680
intents

198
00:08:47,680 --> 00:08:50,160
such as content intent

199
00:08:50,160 --> 00:08:54,080
and notification action action intents

200
00:08:54,080 --> 00:08:55,519
for example

201
00:08:55,519 --> 00:08:58,080
this source code builds a notification

202
00:08:58,080 --> 00:09:02,160
redirecting users to alert detail

203
00:09:02,160 --> 00:09:06,880
activity once its content being tapped

204
00:09:07,200 --> 00:09:09,279
so how to retrieve pending intent from

205
00:09:09,279 --> 00:09:11,360
notifications

206
00:09:11,360 --> 00:09:13,040
after our research

207
00:09:13,040 --> 00:09:16,480
it turns out apps can implement

208
00:09:16,480 --> 00:09:20,240
notification listener service to monitor

209
00:09:20,240 --> 00:09:22,880
and listen to notifications

210
00:09:22,880 --> 00:09:25,279
then retrieve pending intent in the

211
00:09:25,279 --> 00:09:27,519
callbacks from notifications content

212
00:09:27,519 --> 00:09:31,040
intents on notification actions action

213
00:09:31,040 --> 00:09:35,719
intents if permission granted

214
00:09:36,240 --> 00:09:37,920
browser service

215
00:09:37,920 --> 00:09:41,040
media browser service just deals with

216
00:09:41,040 --> 00:09:42,800
playing music

217
00:09:42,800 --> 00:09:44,959
media browser service enable

218
00:09:44,959 --> 00:09:47,519
applications to browse media content

219
00:09:47,519 --> 00:09:50,480
provided by application and ask the

220
00:09:50,480 --> 00:09:53,200
application to start playing it

221
00:09:53,200 --> 00:09:56,080
a media browser app can connect a media

222
00:09:56,080 --> 00:09:58,080
browser service and get its pending

223
00:09:58,080 --> 00:09:59,440
intent

224
00:09:59,440 --> 00:10:00,560
sometimes

225
00:10:00,560 --> 00:10:03,440
media browse service uses pen intent is

226
00:10:03,440 --> 00:10:06,079
root hands

227
00:10:07,519 --> 00:10:10,959
the last one is app widgets

228
00:10:10,959 --> 00:10:14,399
which are also commonly used

229
00:10:14,399 --> 00:10:17,839
they are miniature applications

230
00:10:17,839 --> 00:10:20,640
views that can be embedded in other

231
00:10:20,640 --> 00:10:21,920
applications

232
00:10:21,920 --> 00:10:24,640
such as the home screen and receive

233
00:10:24,640 --> 00:10:27,279
periodic updates

234
00:10:27,279 --> 00:10:29,519
in short

235
00:10:29,519 --> 00:10:33,440
app widget host combined app widgets in

236
00:10:33,440 --> 00:10:35,200
app widget provider

237
00:10:35,200 --> 00:10:37,839
get its remote views and fetch the

238
00:10:37,839 --> 00:10:40,959
pending intent in remote wheels

239
00:10:40,959 --> 00:10:42,720
it is through the

240
00:10:42,720 --> 00:10:46,160
idle api in app widget service

241
00:10:46,160 --> 00:10:49,040
implementation

242
00:10:52,880 --> 00:10:53,760
note

243
00:10:53,760 --> 00:10:55,440
the remote views

244
00:10:55,440 --> 00:10:58,560
remote views is a real hierarchy that

245
00:10:58,560 --> 00:11:01,760
can be displayed in another process

246
00:11:01,760 --> 00:11:04,240
it has a commonly used api

247
00:11:04,240 --> 00:11:08,000
setup on click pending intent

248
00:11:08,000 --> 00:11:10,399
as the debugging window shows

249
00:11:10,399 --> 00:11:13,760
the pending intent is hidden field

250
00:11:13,760 --> 00:11:17,120
the intent in remote views and actions m

251
00:11:17,120 --> 00:11:18,320
response

252
00:11:18,320 --> 00:11:19,600
if it is

253
00:11:19,600 --> 00:11:21,839
a certain click response

254
00:11:21,839 --> 00:11:24,160
it's possible to retrieve the main

255
00:11:24,160 --> 00:11:28,760
pending intent via reflections

256
00:11:29,600 --> 00:11:30,560
now

257
00:11:30,560 --> 00:11:33,920
we fixed the first problem already

258
00:11:33,920 --> 00:11:34,959
surely

259
00:11:34,959 --> 00:11:37,440
pending intents can be retrieved from

260
00:11:37,440 --> 00:11:39,120
notifications

261
00:11:39,120 --> 00:11:42,640
slice providers and app widgets

262
00:11:42,640 --> 00:11:45,519
let's move to the second key problem

263
00:11:45,519 --> 00:11:47,200
how to hijack

264
00:11:47,200 --> 00:11:49,519
this insecure pending intents

265
00:11:49,519 --> 00:11:52,240
and what do insecure pending intents

266
00:11:52,240 --> 00:11:54,160
look like

267
00:11:54,160 --> 00:11:57,040
in previous research we've known pending

268
00:11:57,040 --> 00:11:59,839
tense with empathy-based intents

269
00:11:59,839 --> 00:12:01,519
are vulnerable

270
00:12:01,519 --> 00:12:04,399
how about this one turn the intent

271
00:12:04,399 --> 00:12:08,480
with implicit based intents

272
00:12:08,480 --> 00:12:11,680
we've come across so many of these in

273
00:12:11,680 --> 00:12:17,760
source code of asp and high profile apps

274
00:12:18,720 --> 00:12:21,600
to answer this question we have to go

275
00:12:21,600 --> 00:12:24,079
deep dive into pending intent filling

276
00:12:24,079 --> 00:12:25,200
methods

277
00:12:25,200 --> 00:12:26,800
it defines

278
00:12:26,800 --> 00:12:29,279
how a base intent

279
00:12:29,279 --> 00:12:33,440
in pen intent can be overwritten

280
00:12:33,440 --> 00:12:36,639
recording the introduction of intent

281
00:12:36,639 --> 00:12:38,480
it has many fields

282
00:12:38,480 --> 00:12:40,480
the filling method just the treats

283
00:12:40,480 --> 00:12:44,240
components and the selector are special

284
00:12:44,240 --> 00:12:45,600
by default

285
00:12:45,600 --> 00:12:49,120
they cannot be overwritten or filled in

286
00:12:49,120 --> 00:12:51,680
other fields except component and

287
00:12:51,680 --> 00:12:56,479
selector can be overwritten if not set

288
00:12:57,600 --> 00:12:59,120
with this in mind

289
00:12:59,120 --> 00:13:02,079
we've come up with a universal way to

290
00:13:02,079 --> 00:13:06,000
hijack pending tense with implicit base

291
00:13:06,000 --> 00:13:08,079
intent

292
00:13:08,079 --> 00:13:09,519
so this is

293
00:13:09,519 --> 00:13:12,160
how it works

294
00:13:12,160 --> 00:13:14,079
in step one two

295
00:13:14,079 --> 00:13:16,880
attacker app needs to retrieve an

296
00:13:16,880 --> 00:13:19,279
insecure or vulnerable pen intent from

297
00:13:19,279 --> 00:13:20,560
vector app

298
00:13:20,560 --> 00:13:23,920
where methods we discussed before

299
00:13:23,920 --> 00:13:27,519
then in step 3 he'll mutate the pending

300
00:13:27,519 --> 00:13:29,279
intent

301
00:13:29,279 --> 00:13:33,200
since it's implicit he cannot modify the

302
00:13:33,200 --> 00:13:34,800
action field

303
00:13:34,800 --> 00:13:37,920
he cannot modify component or selector

304
00:13:37,920 --> 00:13:38,880
either

305
00:13:38,880 --> 00:13:41,279
due to restrictions of pending intended

306
00:13:41,279 --> 00:13:42,560
feeling

307
00:13:42,560 --> 00:13:45,440
but he can register an intent filter

308
00:13:45,440 --> 00:13:46,880
with action

309
00:13:46,880 --> 00:13:50,079
set data or collected as victim apps

310
00:13:50,079 --> 00:13:51,440
providers

311
00:13:51,440 --> 00:13:54,000
set package to his own and add

312
00:13:54,000 --> 00:13:58,160
permission grant related flags

313
00:13:58,160 --> 00:14:00,720
then in step 4 and 5

314
00:14:00,720 --> 00:14:03,279
the attacker app invokes pending intent

315
00:14:03,279 --> 00:14:04,160
send

316
00:14:04,160 --> 00:14:06,800
to start the activity intent on behalf

317
00:14:06,800 --> 00:14:08,639
of victim app

318
00:14:08,639 --> 00:14:10,720
an activity of actor

319
00:14:10,720 --> 00:14:13,279
an activity of attacker app will be

320
00:14:13,279 --> 00:14:14,560
started

321
00:14:14,560 --> 00:14:18,639
since intent has grant related flags and

322
00:14:18,639 --> 00:14:21,600
brings victim apps provider ui

323
00:14:21,600 --> 00:14:24,560
the activity has been granted access to

324
00:14:24,560 --> 00:14:26,079
a provider

325
00:14:26,079 --> 00:14:29,040
of a victor app and the moment of being

326
00:14:29,040 --> 00:14:32,000
started it can read and write any

327
00:14:32,000 --> 00:14:35,199
providers accessible by victor app with

328
00:14:35,199 --> 00:14:38,720
grant ui permission equivalent to true

329
00:14:38,720 --> 00:14:41,279
this is the second main contribution of

330
00:14:41,279 --> 00:14:45,120
our research on pending intent

331
00:14:45,120 --> 00:14:46,320
in short

332
00:14:46,320 --> 00:14:49,120
by hijacking this candle pending tense

333
00:14:49,120 --> 00:14:52,399
with implicit base intent

334
00:14:52,399 --> 00:14:54,000
an attacker app

335
00:14:54,000 --> 00:14:57,680
can force victor app to grant access of

336
00:14:57,680 --> 00:15:02,638
its own protected content providers

337
00:15:04,240 --> 00:15:06,800
so pending tents with the implicit base

338
00:15:06,800 --> 00:15:09,680
intents are vulnerable

339
00:15:09,680 --> 00:15:12,000
we have found many cases on this kind of

340
00:15:12,000 --> 00:15:14,399
vulnerable pending tense with implicit

341
00:15:14,399 --> 00:15:17,760
base intent in aosp and some super

342
00:15:17,760 --> 00:15:19,360
popular apps

343
00:15:19,360 --> 00:15:21,680
i'll introduce some typical cases of

344
00:15:21,680 --> 00:15:23,920
them

345
00:15:25,519 --> 00:15:29,800
this first one is cv20201888

346
00:15:30,639 --> 00:15:32,800
it's from slice provider

347
00:15:32,800 --> 00:15:35,759
a usb settings size provider

348
00:15:35,759 --> 00:15:39,519
it returns a pen intent with an implicit

349
00:15:39,519 --> 00:15:40,800
face intent

350
00:15:40,800 --> 00:15:43,680
once bonded

351
00:15:44,079 --> 00:15:45,360
the park

352
00:15:45,360 --> 00:15:48,560
is very straightforward

353
00:15:48,560 --> 00:15:50,480
step 1

354
00:15:50,480 --> 00:15:53,360
retrieve the insecure pending intent by

355
00:15:53,360 --> 00:15:56,079
binding the slice provider

356
00:15:56,079 --> 00:15:57,360
step 2

357
00:15:57,360 --> 00:15:59,920
modify its base intent

358
00:15:59,920 --> 00:16:03,920
and send it on behalf of settings

359
00:16:03,920 --> 00:16:05,839
step 3

360
00:16:05,839 --> 00:16:09,040
wait to be opened to read settings

361
00:16:09,040 --> 00:16:11,599
provided

362
00:16:13,600 --> 00:16:15,120
the second case

363
00:16:15,120 --> 00:16:18,360
is cv2020389

364
00:16:19,759 --> 00:16:22,480
it is from notification

365
00:16:22,480 --> 00:16:26,240
aosp system ui recording service

366
00:16:26,240 --> 00:16:29,360
it's from a notification reminding of

367
00:16:29,360 --> 00:16:31,839
saving recorded videos

368
00:16:31,839 --> 00:16:35,040
the park acts as a notification listener

369
00:16:35,040 --> 00:16:36,399
service

370
00:16:36,399 --> 00:16:37,759
and first

371
00:16:37,759 --> 00:16:40,160
retrieve the pending intent

372
00:16:40,160 --> 00:16:43,120
via notification internet service

373
00:16:43,120 --> 00:16:45,759
then modify the base intent

374
00:16:45,759 --> 00:16:49,839
and send it on behalf of system ui

375
00:16:49,839 --> 00:16:53,120
note the clip data it has been set

376
00:16:53,120 --> 00:16:58,399
contacts provider content contact phones

377
00:16:58,560 --> 00:17:01,519
then wait to be opened to read contacts

378
00:17:01,519 --> 00:17:04,559
provider since system ui has

379
00:17:04,559 --> 00:17:08,079
read contacts permission

380
00:17:08,480 --> 00:17:11,760
as notification is widely used this

381
00:17:11,760 --> 00:17:14,400
candle vulnerability pattern is very

382
00:17:14,400 --> 00:17:17,679
common in many high profile apps like

383
00:17:17,679 --> 00:17:21,119
paypal airbnb twitter google drive

384
00:17:21,119 --> 00:17:23,039
google play services

385
00:17:23,039 --> 00:17:25,919
we can even get a local arbitrary code

386
00:17:25,919 --> 00:17:28,400
execution by writing

387
00:17:28,400 --> 00:17:30,799
dex jar soul to victim app's own

388
00:17:30,799 --> 00:17:33,799
providers

389
00:17:34,880 --> 00:17:37,840
the third is a duplicate issue

390
00:17:37,840 --> 00:17:41,919
i just gave an android id

391
00:17:41,919 --> 00:17:45,360
it's from media browser service

392
00:17:45,360 --> 00:17:47,840
there is an insecure pen intent

393
00:17:47,840 --> 00:17:49,360
in playback

394
00:17:49,360 --> 00:17:52,400
state in aosp bluetooth media browser

395
00:17:52,400 --> 00:17:53,840
service

396
00:17:53,840 --> 00:17:57,039
the park acts as a media browser

397
00:17:57,039 --> 00:17:58,400
and first

398
00:17:58,400 --> 00:18:01,120
it retrieves the pen intent via media

399
00:18:01,120 --> 00:18:04,799
browser compat connection callback

400
00:18:04,799 --> 00:18:08,640
then modify the base intent and send it

401
00:18:08,640 --> 00:18:11,360
in the name of bluetooth

402
00:18:11,360 --> 00:18:14,559
then wait to be opened to read content

403
00:18:14,559 --> 00:18:19,280
provider accessible by bluetooth

404
00:18:20,080 --> 00:18:21,679
the fourth one

405
00:18:21,679 --> 00:18:25,679
is in a high profile apps app widgets

406
00:18:25,679 --> 00:18:29,679
it is an insecure pending intent set via

407
00:18:29,679 --> 00:18:33,520
set on click plant intent

408
00:18:33,600 --> 00:18:37,120
as we discussed before the park can act

409
00:18:37,120 --> 00:18:39,760
as an app widget host

410
00:18:39,760 --> 00:18:42,799
to retrieve remote views from app

411
00:18:42,799 --> 00:18:43,840
widgets

412
00:18:43,840 --> 00:18:45,440
then retrieve

413
00:18:45,440 --> 00:18:48,240
the insecure pending intent from remote

414
00:18:48,240 --> 00:18:49,440
wheels

415
00:18:49,440 --> 00:18:52,000
where reflections

416
00:18:52,000 --> 00:18:54,480
then modify the base intent

417
00:18:54,480 --> 00:18:57,760
and send it on behalf of its high

418
00:18:57,760 --> 00:19:00,640
profile app

419
00:19:01,039 --> 00:19:03,280
then wait to be opened to read the

420
00:19:03,280 --> 00:19:05,039
contacts provider

421
00:19:05,039 --> 00:19:07,919
since the victor app has read contacts

422
00:19:07,919 --> 00:19:10,919
permission

423
00:19:13,039 --> 00:19:14,559
the last one

424
00:19:14,559 --> 00:19:16,559
is a very special case

425
00:19:16,559 --> 00:19:19,600
it is in android system services

426
00:19:19,600 --> 00:19:22,720
aosp activity manager service

427
00:19:22,720 --> 00:19:25,760
it returns an insecure pending intent

428
00:19:25,760 --> 00:19:29,200
used to control a band service via get

429
00:19:29,200 --> 00:19:33,120
running service control panel api

430
00:19:33,520 --> 00:19:35,440
the source code shows two insecure

431
00:19:35,440 --> 00:19:38,320
pending tens example of running services

432
00:19:38,320 --> 00:19:41,760
like notification manager service

433
00:19:41,760 --> 00:19:45,039
and the wallpaper manager service

434
00:19:45,039 --> 00:19:47,520
any app can retrieve with a pending

435
00:19:47,520 --> 00:19:50,160
intent while get running service control

436
00:19:50,160 --> 00:19:52,880
panel on notification manager service or

437
00:19:52,880 --> 00:19:55,200
wallpaper memory or wallpaper manager

438
00:19:55,200 --> 00:19:56,559
service

439
00:19:56,559 --> 00:19:59,360
then modify the base intent

440
00:19:59,360 --> 00:20:03,039
and send it on behalf of system server

441
00:20:03,039 --> 00:20:05,760
that is uid

442
00:20:05,760 --> 00:20:08,880
and a wait to be opened to read settings

443
00:20:08,880 --> 00:20:11,520
providers

444
00:20:14,480 --> 00:20:17,520
there are some restrictions on ui grants

445
00:20:17,520 --> 00:20:20,799
from uid 1000

446
00:20:20,799 --> 00:20:25,039
uid 1000 can only grant very few

447
00:20:25,039 --> 00:20:26,880
providers

448
00:20:26,880 --> 00:20:30,240
permissions in asp due to mitigations in

449
00:20:30,240 --> 00:20:32,960
ui grants manager service as code

450
00:20:32,960 --> 00:20:35,840
snippets shows

451
00:20:35,919 --> 00:20:37,600
but we found

452
00:20:37,600 --> 00:20:40,640
big phone vendors usually allow more

453
00:20:40,640 --> 00:20:43,600
providers to be granted or set a special

454
00:20:43,600 --> 00:20:44,559
flag

455
00:20:44,559 --> 00:20:48,320
to allow granting from system uid

456
00:20:48,320 --> 00:20:51,360
therefore this case is marked

457
00:20:51,360 --> 00:20:54,559
as moderate in android asp though it

458
00:20:54,559 --> 00:20:58,400
could be dangerous in android oem phones

459
00:20:58,400 --> 00:21:00,559
we've come across

460
00:21:00,559 --> 00:21:04,159
a few of these examples but due to time

461
00:21:04,159 --> 00:21:06,080
we're not gonna

462
00:21:06,080 --> 00:21:09,678
tell about this in detail

463
00:21:10,559 --> 00:21:12,480
now i introduce

464
00:21:12,480 --> 00:21:15,760
how to hand insecure pending intents

465
00:21:15,760 --> 00:21:17,679
automatically

466
00:21:17,679 --> 00:21:20,240
we have designed a suit

467
00:21:20,240 --> 00:21:24,320
based static analysis tool

468
00:21:24,640 --> 00:21:28,320
it will pass apk into jinpo ir

469
00:21:28,320 --> 00:21:31,520
then scan pending intent api with data

470
00:21:31,520 --> 00:21:35,039
flow analysis to get a result of unsafe

471
00:21:35,039 --> 00:21:36,400
code

472
00:21:36,400 --> 00:21:41,440
this picture roughly shows how it works

473
00:21:42,799 --> 00:21:46,320
and first it will search apis

474
00:21:46,320 --> 00:21:49,280
without immutable

475
00:21:49,280 --> 00:21:50,159
it

476
00:21:50,159 --> 00:21:51,440
will another

477
00:21:51,440 --> 00:21:54,640
analyze and transform android code to

478
00:21:54,640 --> 00:21:57,760
general code with suit

479
00:21:57,760 --> 00:21:59,280
then locate

480
00:21:59,280 --> 00:22:01,039
the statements

481
00:22:01,039 --> 00:22:03,120
with the following apis

482
00:22:03,120 --> 00:22:06,320
that create instances of pending intents

483
00:22:06,320 --> 00:22:10,840
which do not contain the black mutable

484
00:22:10,840 --> 00:22:14,080
flag including get service get front

485
00:22:14,080 --> 00:22:16,159
ground get foreground service get

486
00:22:16,159 --> 00:22:19,840
activity and get activities

487
00:22:20,000 --> 00:22:22,720
then search empty or implicit based

488
00:22:22,720 --> 00:22:24,400
intents

489
00:22:24,400 --> 00:22:27,840
it will check whether the intent objects

490
00:22:27,840 --> 00:22:30,640
passed into pen intense apis

491
00:22:30,640 --> 00:22:33,520
has invoked one of the following intent

492
00:22:33,520 --> 00:22:35,840
methods through the

493
00:22:35,840 --> 00:22:40,918
forward flow analysis of a suit

494
00:22:41,280 --> 00:22:43,520
the intent methods

495
00:22:43,520 --> 00:22:44,640
include

496
00:22:44,640 --> 00:22:47,440
set package set class name set component

497
00:22:47,440 --> 00:22:50,400
set class name and set class

498
00:22:50,400 --> 00:22:52,159
this apis

499
00:22:52,159 --> 00:22:53,600
shows

500
00:22:53,600 --> 00:22:55,760
whether the intent

501
00:22:55,760 --> 00:22:56,640
is

502
00:22:56,640 --> 00:22:59,440
explicit

503
00:22:59,679 --> 00:23:02,640
the forward follow analysis is intra

504
00:23:02,640 --> 00:23:05,280
procedural data flow analysis provided

505
00:23:05,280 --> 00:23:08,520
by suit

506
00:23:10,240 --> 00:23:14,080
we have open sources tool in github

507
00:23:14,080 --> 00:23:18,159
you can download and try it

508
00:23:18,159 --> 00:23:21,120
by using the tool we will find many

509
00:23:21,120 --> 00:23:23,679
pending intent issues in high profile

510
00:23:23,679 --> 00:23:26,640
apps in google play

511
00:23:26,640 --> 00:23:30,799
gps rp even said pending intent back as

512
00:23:30,799 --> 00:23:32,159
no issues

513
00:23:32,159 --> 00:23:34,400
meaning it almost affects every

514
00:23:34,400 --> 00:23:37,400
applications

515
00:23:40,480 --> 00:23:41,440
now

516
00:23:41,440 --> 00:23:44,400
the last section of our talk

517
00:23:44,400 --> 00:23:46,159
what has google done

518
00:23:46,159 --> 00:23:50,360
for this pending intent issues

519
00:23:51,039 --> 00:23:53,600
google has almost fixed all pending

520
00:23:53,600 --> 00:23:56,559
intent issues in asp

521
00:23:56,559 --> 00:23:59,360
also it has introduced

522
00:23:59,360 --> 00:24:01,679
significant security changes in the

523
00:24:01,679 --> 00:24:04,559
upcoming android 12.

524
00:24:04,559 --> 00:24:07,039
most of these parts are fixed by adding

525
00:24:07,039 --> 00:24:10,320
pending intent flag immutable

526
00:24:10,320 --> 00:24:13,679
some are fixed by using an explicit base

527
00:24:13,679 --> 00:24:15,600
intent

528
00:24:15,600 --> 00:24:17,120
in android 12

529
00:24:17,120 --> 00:24:20,799
developers must specify the mutability

530
00:24:20,799 --> 00:24:24,640
of each pending tent for apps targeting

531
00:24:24,640 --> 00:24:27,440
above 12.

532
00:24:27,440 --> 00:24:29,679
developers must use either flag

533
00:24:29,679 --> 00:24:32,720
immutable or flag mutable

534
00:24:32,720 --> 00:24:35,120
but this kind of vulnerability are still

535
00:24:35,120 --> 00:24:38,400
lesser known by android developers

536
00:24:38,400 --> 00:24:42,240
that's why we decide to disclose this

537
00:24:42,240 --> 00:24:46,039
in black hat europe

538
00:24:46,320 --> 00:24:50,320
also google also added a mint rule to

539
00:24:50,320 --> 00:24:53,600
detect flag immutable its official

540
00:24:53,600 --> 00:24:57,360
android studio ide

541
00:24:57,440 --> 00:24:59,279
it adds a

542
00:24:59,279 --> 00:25:03,120
pending intent mutable flag detector

543
00:25:03,120 --> 00:25:06,080
so developers can

544
00:25:06,080 --> 00:25:07,520
check

545
00:25:07,520 --> 00:25:11,840
if a pending intent is insecure

546
00:25:11,840 --> 00:25:15,440
in its official ide very convenient

547
00:25:15,440 --> 00:25:18,159
conveniently

548
00:25:18,480 --> 00:25:20,400
there are also some guidelines for

549
00:25:20,400 --> 00:25:24,559
developers to use printing intent safely

550
00:25:24,559 --> 00:25:26,720
developers must create a multiple

551
00:25:26,720 --> 00:25:29,760
pending tense whenever possible

552
00:25:29,760 --> 00:25:31,039
however

553
00:25:31,039 --> 00:25:34,080
certain use cases require mutable pen

554
00:25:34,080 --> 00:25:37,200
intent objects instead

555
00:25:37,200 --> 00:25:38,400
such as

556
00:25:38,400 --> 00:25:42,400
direct reply actions in notifications

557
00:25:42,400 --> 00:25:46,240
using instances of car app extender

558
00:25:46,240 --> 00:25:49,279
calling request location updates or

559
00:25:49,279 --> 00:25:51,279
similar apis

560
00:25:51,279 --> 00:25:54,720
scheduling alarms using alarm manager

561
00:25:54,720 --> 00:25:57,279
this pending intents require

562
00:25:57,279 --> 00:25:59,520
flag mutable

563
00:25:59,520 --> 00:26:00,320
so

564
00:26:00,320 --> 00:26:03,520
in these cases it's strongly recommended

565
00:26:03,520 --> 00:26:07,039
to use an explicit intent and fill in

566
00:26:07,039 --> 00:26:10,919
the component name

567
00:26:11,520 --> 00:26:13,520
but

568
00:26:13,520 --> 00:26:15,120
it is still

569
00:26:15,120 --> 00:26:17,360
vulnerable in some cases

570
00:26:17,360 --> 00:26:20,640
sometimes to use a mutable pen intent

571
00:26:20,640 --> 00:26:25,840
with explicit intent is still vulnerable

572
00:26:26,000 --> 00:26:29,600
this is a real world example

573
00:26:29,600 --> 00:26:32,159
a pending intent in notification aiming

574
00:26:32,159 --> 00:26:34,080
to be start hidden

575
00:26:34,080 --> 00:26:35,440
when active

576
00:26:35,440 --> 00:26:39,200
which can process i intend extra

577
00:26:39,200 --> 00:26:40,159
since

578
00:26:40,159 --> 00:26:43,279
the pending intent has no flag immutable

579
00:26:43,279 --> 00:26:44,799
and

580
00:26:44,799 --> 00:26:47,279
it's explicit basic

581
00:26:47,279 --> 00:26:50,559
base intent doesn't set the extra

582
00:26:50,559 --> 00:26:54,240
a notification listener app can still

583
00:26:54,240 --> 00:26:57,360
hijack the pending intent and feed in

584
00:26:57,360 --> 00:26:58,720
the extra

585
00:26:58,720 --> 00:27:02,159
resulting in another classic intense

586
00:27:02,159 --> 00:27:05,440
redirection vulnerability

587
00:27:05,440 --> 00:27:08,000
so i have a final device

588
00:27:08,000 --> 00:27:10,159
for both developers and security

589
00:27:10,159 --> 00:27:12,080
researchers

590
00:27:12,080 --> 00:27:15,039
every pending intent without flag

591
00:27:15,039 --> 00:27:18,799
immutable needs to be carefully rebuilt

592
00:27:18,799 --> 00:27:22,080
this is a final advice

593
00:27:24,000 --> 00:27:26,240
this is my talk about

594
00:27:26,240 --> 00:27:28,799
pending intended security

595
00:27:28,799 --> 00:27:31,050
thank you for attending

596
00:27:31,050 --> 00:27:40,659
[Music]

597
00:27:41,200 --> 00:27:43,279
you

