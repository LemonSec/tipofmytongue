1
00:00:00,860 --> 00:00:09,200
[Music]

2
00:00:09,200 --> 00:00:11,160
hello everybody welcome to the ven

3
00:00:11,160 --> 00:00:14,559
innovidinovici attacks on etw blind ddrs

4
00:00:14,559 --> 00:00:17,039
presentation by the binary team

5
00:00:17,039 --> 00:00:19,680
event tracing for windows or etw

6
00:00:19,680 --> 00:00:21,680
is one of the windows technologies that

7
00:00:21,680 --> 00:00:23,359
provide support for various security

8
00:00:23,359 --> 00:00:25,439
tools and edr solutions

9
00:00:25,439 --> 00:00:27,599
however attacks on this technology can

10
00:00:27,599 --> 00:00:29,599
blind the whole class of security

11
00:00:29,599 --> 00:00:31,439
solutions that rely on telemetry from

12
00:00:31,439 --> 00:00:32,880
etw

13
00:00:32,880 --> 00:00:34,800
this topic is very important for all the

14
00:00:34,800 --> 00:00:37,120
experts dealing with windows security

15
00:00:37,120 --> 00:00:42,120
malware detection and incident response

16
00:00:46,719 --> 00:00:48,800
binary is a former security startup

17
00:00:48,800 --> 00:00:50,640
focus on detecting threat originating

18
00:00:50,640 --> 00:00:52,399
below the operating system in the

19
00:00:52,399 --> 00:00:54,399
firmware and understand how they moved

20
00:00:54,399 --> 00:00:56,480
up the stack into the os kernel and user

21
00:00:56,480 --> 00:01:00,000
land to deploy the next stage components

22
00:01:00,000 --> 00:01:01,600
one such component can implement an

23
00:01:01,600 --> 00:01:04,720
attack on etw to disable or send bogus

24
00:01:04,720 --> 00:01:07,119
events to the os level sensors

25
00:01:07,119 --> 00:01:09,040
as you'll see through this presentation

26
00:01:09,040 --> 00:01:12,000
there are plenty of attacks to pick from

27
00:01:12,000 --> 00:01:14,400
i'm claudia tortoresco cto and

28
00:01:14,400 --> 00:01:16,720
co-founder of binary thanks to matt

29
00:01:16,720 --> 00:01:18,880
driver i have a nickname and as you can

30
00:01:18,880 --> 00:01:21,280
see you can use it to call me by my last

31
00:01:21,280 --> 00:01:22,320
name

32
00:01:22,320 --> 00:01:23,840
i have great expertise in digital

33
00:01:23,840 --> 00:01:26,479
forensic reverse engineering malware and

34
00:01:26,479 --> 00:01:28,880
program analysis to name a few i've been

35
00:01:28,880 --> 00:01:30,640
instructor for special topics of

36
00:01:30,640 --> 00:01:32,720
moderate analysis at black hat

37
00:01:32,720 --> 00:01:35,520
speaker at multiple security conferences

38
00:01:35,520 --> 00:01:38,479
first time speaking at black

39
00:01:38,479 --> 00:01:41,119
i am igor corking i'm just a window

40
00:01:41,119 --> 00:01:44,560
security guy who is always looking for

41
00:01:44,560 --> 00:01:47,360
new challenges and discovering new

42
00:01:47,360 --> 00:01:49,680
attacks on windows kernel and find the

43
00:01:49,680 --> 00:01:51,759
ways to present them

44
00:01:51,759 --> 00:01:54,560
my blog is here

45
00:01:54,560 --> 00:01:56,640
please continue

46
00:01:56,640 --> 00:01:57,600
also

47
00:01:57,600 --> 00:02:00,079
meet andrei red plate golchikov an

48
00:02:00,079 --> 00:02:02,000
expert in windows internals and windows

49
00:02:02,000 --> 00:02:04,079
security has more than 20 years

50
00:02:04,079 --> 00:02:05,600
experience

51
00:02:05,600 --> 00:02:08,239
researching low level operating system

52
00:02:08,239 --> 00:02:11,120
internals unfortunately andrei lost the

53
00:02:11,120 --> 00:02:12,959
coin toss and he will sit out this

54
00:02:12,959 --> 00:02:14,560
presentation

55
00:02:14,560 --> 00:02:16,000
agenda

56
00:02:16,000 --> 00:02:18,560
modern windows based endpoint detection

57
00:02:18,560 --> 00:02:20,800
and response solutions cdrs

58
00:02:20,800 --> 00:02:22,959
leverage etw to detect and mitigate

59
00:02:22,959 --> 00:02:25,520
cyber threats and computer issues

60
00:02:25,520 --> 00:02:27,760
researchers

61
00:02:27,760 --> 00:02:30,560
are finding ways to disable etw

62
00:02:30,560 --> 00:02:32,480
and is of critical importance given that

63
00:02:32,480 --> 00:02:34,800
these attacks can blind a whole set of

64
00:02:34,800 --> 00:02:36,879
edr solutions that focus

65
00:02:36,879 --> 00:02:39,519
uh and rely on etw for visit

66
00:02:39,519 --> 00:02:41,680
visibility into host events

67
00:02:41,680 --> 00:02:44,000
even more important is researching

68
00:02:44,000 --> 00:02:46,480
and developing ways to detect if etw has

69
00:02:46,480 --> 00:02:48,239
been tampered with and notified the

70
00:02:48,239 --> 00:02:51,040
security solutions in place

71
00:02:51,040 --> 00:02:52,720
we'll start our presentation by going

72
00:02:52,720 --> 00:02:54,319
over the architecture and features of

73
00:02:54,319 --> 00:02:56,000
ctw

74
00:02:56,000 --> 00:02:57,519
next we'll touch on the current state of

75
00:02:57,519 --> 00:02:59,840
edw research both in cyber security and

76
00:02:59,840 --> 00:03:01,440
academic space

77
00:03:01,440 --> 00:03:02,959
we'll switch our attention to attacks on

78
00:03:02,959 --> 00:03:05,760
etw to blind security solutions

79
00:03:05,760 --> 00:03:07,760
we'll go over the published methods of

80
00:03:07,760 --> 00:03:10,800
disabling etw and introduce two new

81
00:03:10,800 --> 00:03:12,879
attacks that blind process monitor and

82
00:03:12,879 --> 00:03:14,480
windows defender

83
00:03:14,480 --> 00:03:16,159
last but not the least we'll introduce

84
00:03:16,159 --> 00:03:18,400
etw check and memory ranger

85
00:03:18,400 --> 00:03:21,360
two solutions that can reveal and

86
00:03:21,360 --> 00:03:22,480
prevent

87
00:03:22,480 --> 00:03:25,440
attacks on etw

88
00:03:27,120 --> 00:03:29,120
now a little bit about event tracing for

89
00:03:29,120 --> 00:03:30,879
windows what it is

90
00:03:30,879 --> 00:03:32,959
and what are his components

91
00:03:32,959 --> 00:03:35,680
event tracing for window or shortly etw

92
00:03:35,680 --> 00:03:37,920
is a built-in windows login mechanism

93
00:03:37,920 --> 00:03:39,519
designed to observe and analyze

94
00:03:39,519 --> 00:03:41,519
application behavior

95
00:03:41,519 --> 00:03:44,080
etw was introduced quite a while ago in

96
00:03:44,080 --> 00:03:46,560
windows xp as a framework implemented in

97
00:03:46,560 --> 00:03:48,000
the kernel

98
00:03:48,000 --> 00:03:50,000
to troubleshoot os components behavior

99
00:03:50,000 --> 00:03:52,319
and performance issues since then it has

100
00:03:52,319 --> 00:03:54,959
been expanded and improved significantly

101
00:03:54,959 --> 00:03:57,280
for example in windows 11 etw can

102
00:03:57,280 --> 00:03:59,680
produce more than 50 000

103
00:03:59,680 --> 00:04:02,480
different event types coming from

104
00:04:02,480 --> 00:04:04,000
around the thousand

105
00:04:04,000 --> 00:04:06,400
ftp providers

106
00:04:06,400 --> 00:04:07,840
etw has

107
00:04:07,840 --> 00:04:10,080
the following advantages it's available

108
00:04:10,080 --> 00:04:12,319
system-wide in all recent windows

109
00:04:12,319 --> 00:04:14,239
operating systems without having to be

110
00:04:14,239 --> 00:04:17,199
installed loading a kernel driver or os

111
00:04:17,199 --> 00:04:18,560
rebooting

112
00:04:18,560 --> 00:04:20,079
supports a standardized framework to

113
00:04:20,079 --> 00:04:22,639
produce and consume logging events

114
00:04:22,639 --> 00:04:25,360
and also supports high speed logging and

115
00:04:25,360 --> 00:04:27,520
lets application consume

116
00:04:27,520 --> 00:04:30,320
events in real time or coming from this

117
00:04:30,320 --> 00:04:31,680
file

118
00:04:31,680 --> 00:04:33,520
let's focus a little bit on the etw

119
00:04:33,520 --> 00:04:34,880
framework and it's

120
00:04:34,880 --> 00:04:37,199
three distinct components first the

121
00:04:37,199 --> 00:04:38,800
controllers which are application that

122
00:04:38,800 --> 00:04:40,960
can enable providers and control the

123
00:04:40,960 --> 00:04:43,360
lifespan of a session

124
00:04:43,360 --> 00:04:45,120
then providers which are applications

125
00:04:45,120 --> 00:04:46,960
that contain event tracing

126
00:04:46,960 --> 00:04:49,360
instrumentation and produce events if

127
00:04:49,360 --> 00:04:51,360
enabled by a controller

128
00:04:51,360 --> 00:04:52,960
and consumers which are applications

129
00:04:52,960 --> 00:04:54,800
that select one or more

130
00:04:54,800 --> 00:04:56,880
event tracing sessions as a source for

131
00:04:56,880 --> 00:04:59,280
events they can receive events stored in

132
00:04:59,280 --> 00:05:02,000
the log files or from sessions that

133
00:05:02,000 --> 00:05:05,120
send events in real time

134
00:05:05,120 --> 00:05:06,960
etw is used to collect events in

135
00:05:06,960 --> 00:05:09,520
large-scale business solutions such as

136
00:05:09,520 --> 00:05:10,639
docker

137
00:05:10,639 --> 00:05:13,120
or amazon cloudwatch

138
00:05:13,120 --> 00:05:15,600
microsoft sql server has been using etw

139
00:05:15,600 --> 00:05:18,639
for more than 10 years

140
00:05:22,080 --> 00:05:24,880
etw providers as you can see in the

141
00:05:24,880 --> 00:05:25,919
picture

142
00:05:25,919 --> 00:05:27,600
there are myriad of os components that

143
00:05:27,600 --> 00:05:29,680
are supplying atow events from

144
00:05:29,680 --> 00:05:33,919
applications services dlls to os kernel

145
00:05:33,919 --> 00:05:36,639
components and drivers i'll now go i'll

146
00:05:36,639 --> 00:05:38,400
not go into details everybody can

147
00:05:38,400 --> 00:05:40,240
recognize in this table

148
00:05:40,240 --> 00:05:42,720
multiple core components of the windows

149
00:05:42,720 --> 00:05:45,600
operating system

150
00:05:50,400 --> 00:05:53,520
using etw for moderate hunting

151
00:05:53,520 --> 00:05:55,759
one of the first examples of using atw

152
00:05:55,759 --> 00:05:57,919
tools to reveal and

153
00:05:57,919 --> 00:06:00,240
analyze malicious behavior

154
00:06:00,240 --> 00:06:02,319
was presented by mark kucinovich in his

155
00:06:02,319 --> 00:06:03,680
top malware

156
00:06:03,680 --> 00:06:06,639
hunting with sis internal tools about 10

157
00:06:06,639 --> 00:06:08,319
years ago

158
00:06:08,319 --> 00:06:10,639
since then developers of other ers have

159
00:06:10,639 --> 00:06:13,120
leveraged ew to monitor security related

160
00:06:13,120 --> 00:06:14,000
events

161
00:06:14,000 --> 00:06:16,319
and to successfully detect and respond

162
00:06:16,319 --> 00:06:18,479
to cutting edge malware

163
00:06:18,479 --> 00:06:21,039
this internal tool uh process monitor is

164
00:06:21,039 --> 00:06:24,800
leveraging etw for network tracing

165
00:06:24,800 --> 00:06:27,120
this late its latest version still

166
00:06:27,120 --> 00:06:28,800
relies on etw

167
00:06:28,800 --> 00:06:31,199
for such visibility will demonstrate

168
00:06:31,199 --> 00:06:32,840
attack on

169
00:06:32,840 --> 00:06:34,560
etw

170
00:06:34,560 --> 00:06:36,400
on process monitor

171
00:06:36,400 --> 00:06:37,360
in the

172
00:06:37,360 --> 00:06:40,000
in a demo and and technical details will

173
00:06:40,000 --> 00:06:41,919
be provided as well as well a little bit

174
00:06:41,919 --> 00:06:43,199
later

175
00:06:43,199 --> 00:06:44,080
uh

176
00:06:44,080 --> 00:06:46,639
also network shell and packet monitor

177
00:06:46,639 --> 00:06:48,319
windows

178
00:06:48,319 --> 00:06:49,680
windows tools provides network

179
00:06:49,680 --> 00:06:52,000
troubleshooting diagnostic and the

180
00:06:52,000 --> 00:06:54,160
packets need for functionalities using

181
00:06:54,160 --> 00:06:56,960
etw providers such as microsoft windows

182
00:06:56,960 --> 00:06:59,039
and this packet capture and microsoft

183
00:06:59,039 --> 00:07:02,720
windows pk team on

184
00:07:02,720 --> 00:07:06,080
ew has become a common signal provider

185
00:07:06,080 --> 00:07:08,319
for edr and antivirus solutions to

186
00:07:08,319 --> 00:07:11,360
reveal malicious activity and in 2021

187
00:07:11,360 --> 00:07:14,000
there are more than 10 leading market

188
00:07:14,000 --> 00:07:17,360
edr solutions that use etw for

189
00:07:17,360 --> 00:07:20,080
threat hunting

190
00:07:27,520 --> 00:07:28,960
etw is on

191
00:07:28,960 --> 00:07:31,840
twitter from alex linux providing

192
00:07:31,840 --> 00:07:33,680
insight into how to build an edr based

193
00:07:33,680 --> 00:07:34,479
on

194
00:07:34,479 --> 00:07:37,199
microsoft threat intelligence etw

195
00:07:37,199 --> 00:07:38,240
provider

196
00:07:38,240 --> 00:07:40,639
matt graber creating a dynamic analysis

197
00:07:40,639 --> 00:07:43,919
tool based on etw for fun nazaridin

198
00:07:43,919 --> 00:07:45,360
informing us

199
00:07:45,360 --> 00:07:47,919
how symantec uses ctw to detect

200
00:07:47,919 --> 00:07:49,599
malicious activity

201
00:07:49,599 --> 00:07:52,080
or robert demonstrating his edr tools

202
00:07:52,080 --> 00:07:54,560
based on etw at this year's black hat

203
00:07:54,560 --> 00:07:58,039
europe arsenal

204
00:08:02,560 --> 00:08:04,240
there are plenty of practical research

205
00:08:04,240 --> 00:08:06,080
projects demonstrating the ability of

206
00:08:06,080 --> 00:08:08,720
edw to capture malicious activity and

207
00:08:08,720 --> 00:08:10,840
perform threat research and reverse

208
00:08:10,840 --> 00:08:13,120
engineering for example zach brown and

209
00:08:13,120 --> 00:08:15,440
his dad become presentation showcased

210
00:08:15,440 --> 00:08:16,160
how

211
00:08:16,160 --> 00:08:19,039
etw helps office 365

212
00:08:19,039 --> 00:08:21,520
red teams to answer forensic questions

213
00:08:21,520 --> 00:08:22,479
such as

214
00:08:22,479 --> 00:08:24,879
uh who's the user that

215
00:08:24,879 --> 00:08:27,120
launched the evil process and where the

216
00:08:27,120 --> 00:08:29,520
data has been exponentiated to

217
00:08:29,520 --> 00:08:33,120
to monitor dns uh resolutions the author

218
00:08:33,120 --> 00:08:36,559
is leveraging uh microsoft windows dns

219
00:08:36,559 --> 00:08:39,039
client etw provider

220
00:08:39,039 --> 00:08:42,159
also darva has sponsored several etw

221
00:08:42,159 --> 00:08:42,958
based

222
00:08:42,958 --> 00:08:45,760
monitoring systems for malware detection

223
00:08:45,760 --> 00:08:47,680
uh the project windows low-level system

224
00:08:47,680 --> 00:08:49,680
monitoring data collection

225
00:08:49,680 --> 00:08:52,320
obtains data from many etw

226
00:08:52,320 --> 00:08:55,440
providers including andy uh

227
00:08:55,440 --> 00:08:57,600
including from the anti-kerner logger

228
00:08:57,600 --> 00:08:59,839
session to reveal reconstruct various

229
00:08:59,839 --> 00:09:03,440
attacks like uh browse exploits and uh

230
00:09:03,440 --> 00:09:05,760
malicious file downloads

231
00:09:05,760 --> 00:09:08,320
project marple for forces on hardening

232
00:09:08,320 --> 00:09:10,160
enterprise security by automating the

233
00:09:10,160 --> 00:09:13,360
detection of apt uh threats one of its

234
00:09:13,360 --> 00:09:14,399
uh pro

235
00:09:14,399 --> 00:09:16,880
modules homes collects host telemetry

236
00:09:16,880 --> 00:09:19,680
using etw to produce

237
00:09:19,680 --> 00:09:21,440
detection signals

238
00:09:21,440 --> 00:09:24,480
for apt campaigns

239
00:09:24,480 --> 00:09:27,360
also apt shell project uses etw for

240
00:09:27,360 --> 00:09:30,320
logging system called routines this key

241
00:09:30,320 --> 00:09:32,880
scheme helps detecting

242
00:09:32,880 --> 00:09:34,000
remote

243
00:09:34,000 --> 00:09:36,800
access trojans by analyzing malicious

244
00:09:36,800 --> 00:09:39,040
behaviors such as key logging screen

245
00:09:39,040 --> 00:09:42,160
grabbing remote shell audio recording

246
00:09:42,160 --> 00:09:46,560
and registry uh key manipulation

247
00:09:46,800 --> 00:09:48,959
mitral also uh

248
00:09:48,959 --> 00:09:51,680
developed a new etw based security

249
00:09:51,680 --> 00:09:52,800
sensor

250
00:09:52,800 --> 00:09:54,800
security experts from mitre built a

251
00:09:54,800 --> 00:09:57,200
custom etw based sensor to detect

252
00:09:57,200 --> 00:09:58,880
process injection

253
00:09:58,880 --> 00:09:59,600
uh

254
00:09:59,600 --> 00:10:01,200
capture approach process creation and

255
00:10:01,200 --> 00:10:02,480
termination

256
00:10:02,480 --> 00:10:04,640
file creation or deletion with the help

257
00:10:04,640 --> 00:10:07,600
of etw providers

258
00:10:07,600 --> 00:10:10,560
research for rnw contracted by german

259
00:10:10,560 --> 00:10:11,519
federal

260
00:10:11,519 --> 00:10:13,519
office for information security as part

261
00:10:13,519 --> 00:10:15,279
of the ccfos project

262
00:10:15,279 --> 00:10:16,880
perform the technical analysis of

263
00:10:16,880 --> 00:10:19,279
windows 10 logging capabilities

264
00:10:19,279 --> 00:10:23,200
providing insights and on how etw helps

265
00:10:23,200 --> 00:10:26,800
windows telemetry capturing

266
00:10:31,519 --> 00:10:33,839
etw is also

267
00:10:33,839 --> 00:10:36,079
in academic papers

268
00:10:36,079 --> 00:10:39,760
etw is a hot topic in academic media

269
00:10:39,760 --> 00:10:41,680
papers focused

270
00:10:41,680 --> 00:10:44,240
mostly on detecting malicious behavior

271
00:10:44,240 --> 00:10:45,920
some examples include malware

272
00:10:45,920 --> 00:10:47,440
characterization using behavioral

273
00:10:47,440 --> 00:10:50,160
components from george mason university

274
00:10:50,160 --> 00:10:52,720
detecting file as malicious behavior of

275
00:10:52,720 --> 00:10:55,279
dot net c2 agents using etw from

276
00:10:55,279 --> 00:10:57,760
university of amsterdam or tactical

277
00:10:57,760 --> 00:11:00,320
provenance analysis for edrs from

278
00:11:00,320 --> 00:11:04,000
university of illinois

279
00:11:08,160 --> 00:11:11,120
according to miter cv database in 2021

280
00:11:11,120 --> 00:11:12,560
there is an explanation rising the

281
00:11:12,560 --> 00:11:15,200
number of btw related vulnerabilities

282
00:11:15,200 --> 00:11:17,519
that receive the cve number so it is

283
00:11:17,519 --> 00:11:19,600
safe to assume that etw has caught the

284
00:11:19,600 --> 00:11:22,880
attention of bug hunters

285
00:11:26,560 --> 00:11:29,200
etw is helpful for defenses but it has

286
00:11:29,200 --> 00:11:31,360
drawbacks let's look a little bit into

287
00:11:31,360 --> 00:11:33,600
that

288
00:11:37,839 --> 00:11:39,440
one of the most important drawback is

289
00:11:39,440 --> 00:11:42,320
that etw being implemented being

290
00:11:42,320 --> 00:11:44,320
released to be an intern as an internal

291
00:11:44,320 --> 00:11:46,240
tool at the beginning as an opaque

292
00:11:46,240 --> 00:11:47,920
structure including undocumented

293
00:11:47,920 --> 00:11:50,399
providers and providers that issue

294
00:11:50,399 --> 00:11:52,639
undocumented events

295
00:11:52,639 --> 00:11:55,200
etw event templates are stored into the

296
00:11:55,200 --> 00:11:57,839
pe resource section under webt

297
00:11:57,839 --> 00:12:00,560
underscore template resource id

298
00:12:00,560 --> 00:12:03,760
also etw can be used and leveraged by

299
00:12:03,760 --> 00:12:05,760
living of the land malware because it

300
00:12:05,760 --> 00:12:07,519
provides provides a sniffer

301
00:12:07,519 --> 00:12:09,839
functionality for file and registry

302
00:12:09,839 --> 00:12:11,760
operations process thread and network

303
00:12:11,760 --> 00:12:12,880
activity

304
00:12:12,880 --> 00:12:14,959
also you can provide the key logging

305
00:12:14,959 --> 00:12:16,399
functionality

306
00:12:16,399 --> 00:12:19,279
since events can be logged to disk in in

307
00:12:19,279 --> 00:12:21,680
log files etw can float the hard drive

308
00:12:21,680 --> 00:12:23,600
in a ddos attack

309
00:12:23,600 --> 00:12:26,160
also malware can use etw to detect

310
00:12:26,160 --> 00:12:28,320
sandbox detonations

311
00:12:28,320 --> 00:12:30,800
and some etw providers are only

312
00:12:30,800 --> 00:12:32,959
available in ppl

313
00:12:32,959 --> 00:12:34,240
processes

314
00:12:34,240 --> 00:12:37,600
but malware can disable ppl for targeted

315
00:12:37,600 --> 00:12:40,800
processes via kernel mode driver without

316
00:12:40,800 --> 00:12:43,360
causing the sod and next disable the

317
00:12:43,360 --> 00:12:47,639
hidden etw providers

318
00:12:52,240 --> 00:12:55,760
etw can be bypassed

319
00:12:58,639 --> 00:13:00,959
ways to disable etw logging are widely

320
00:13:00,959 --> 00:13:02,800
discussed on twitter

321
00:13:02,800 --> 00:13:05,120
from passing a true boolean parameter

322
00:13:05,120 --> 00:13:09,360
into etwp stop trace kernel function to

323
00:13:09,360 --> 00:13:11,920
finding an etw specific structure and

324
00:13:11,920 --> 00:13:15,040
dynamically modifying it or patching etw

325
00:13:15,040 --> 00:13:16,639
event right

326
00:13:16,639 --> 00:13:19,120
user land api to return immediately thus

327
00:13:19,120 --> 00:13:22,720
stopping the user mode loggers

328
00:13:26,320 --> 00:13:28,639
let's look let's look next at some other

329
00:13:28,639 --> 00:13:32,000
examples that are using etw to evade the

330
00:13:32,000 --> 00:13:33,200
detection

331
00:13:33,200 --> 00:13:36,000
so in march 2018 kaspersky released the

332
00:13:36,000 --> 00:13:37,920
report on slingshot a complex and

333
00:13:37,920 --> 00:13:40,320
unknown cyber is fiona platform

334
00:13:40,320 --> 00:13:42,399
targeting african and middle east

335
00:13:42,399 --> 00:13:43,680
countries

336
00:13:43,680 --> 00:13:47,120
slingshot the first start stage loader

337
00:13:47,120 --> 00:13:50,399
renames the etw logs by appending.tmp

338
00:13:50,399 --> 00:13:52,720
extension to avoid leaving traces of its

339
00:13:52,720 --> 00:13:54,079
activity

340
00:13:54,079 --> 00:13:56,639
mini sling a module in the platform uses

341
00:13:56,639 --> 00:13:58,959
microsoft windows kernel general etw

342
00:13:58,959 --> 00:14:00,160
provider

343
00:14:00,160 --> 00:14:02,240
to obtain the last reboot time and

344
00:14:02,240 --> 00:14:04,639
microsoft windows kernel power etw

345
00:14:04,639 --> 00:14:07,440
provider to obtain the last unsuccessful

346
00:14:07,440 --> 00:14:11,440
attempt attempt to shut down the machine

347
00:14:11,440 --> 00:14:14,160
in 2019 local google ransomware

348
00:14:14,160 --> 00:14:16,880
implemented functionality to disable edw

349
00:14:16,880 --> 00:14:19,519
by turning off the signals from

350
00:14:19,519 --> 00:14:21,440
microsoft windows

351
00:14:21,440 --> 00:14:26,000
wmi activity etw provider via wevt util

352
00:14:26,000 --> 00:14:28,240
tool

353
00:14:28,240 --> 00:14:30,480
in august 2021

354
00:14:30,480 --> 00:14:32,639
trend micro researchers published the

355
00:14:32,639 --> 00:14:35,519
details of a new campaign from apt-41

356
00:14:35,519 --> 00:14:36,720
targeting

357
00:14:36,720 --> 00:14:39,199
south china sea countries

358
00:14:39,199 --> 00:14:41,519
the researchers mentioned the use of two

359
00:14:41,519 --> 00:14:43,440
shellcode launchers that can run

360
00:14:43,440 --> 00:14:45,519
payloads uninstall themselves disable

361
00:14:45,519 --> 00:14:48,480
etw to evade detection and also try out

362
00:14:48,480 --> 00:14:50,240
credentials

363
00:14:50,240 --> 00:14:53,120
in terms of post exploitation

364
00:14:53,120 --> 00:14:55,920
frameworks to disable or bypass

365
00:14:55,920 --> 00:14:57,519
edw

366
00:14:57,519 --> 00:14:59,839
we can mention sharp point

367
00:14:59,839 --> 00:15:02,639
sharps floyd sorry disable etw

368
00:15:02,639 --> 00:15:05,440
monitoring for current process

369
00:15:05,440 --> 00:15:07,839
scrap scarecrow payload creation

370
00:15:07,839 --> 00:15:10,240
framework to bypass vrs

371
00:15:10,240 --> 00:15:13,040
an idia revision which has around 10

372
00:15:13,040 --> 00:15:16,959
examples of blocking etw locking

373
00:15:21,199 --> 00:15:23,760
in 2020 miter attack framework has

374
00:15:23,760 --> 00:15:25,279
introduced the indicator blocking and

375
00:15:25,279 --> 00:15:27,680
disable cloud logs sub techniques to

376
00:15:27,680 --> 00:15:29,920
impair defense's technique to describe

377
00:15:29,920 --> 00:15:32,000
attacks that maliciously redirect or

378
00:15:32,000 --> 00:15:34,079
disable host based sensors

379
00:15:34,079 --> 00:15:37,800
etw included

380
00:15:42,160 --> 00:15:44,320
now let's focus on the big picture of

381
00:15:44,320 --> 00:15:47,360
etw attacks

382
00:15:53,279 --> 00:15:55,519
as can be seen in the diagram there are

383
00:15:55,519 --> 00:15:58,399
five types of attacks each designated by

384
00:15:58,399 --> 00:15:59,680
a different color

385
00:15:59,680 --> 00:16:02,320
targeting each component of the atw

386
00:16:02,320 --> 00:16:04,079
architecture

387
00:16:04,079 --> 00:16:06,480
red shows attacks on etw from inside an

388
00:16:06,480 --> 00:16:09,519
evil process

389
00:16:09,519 --> 00:16:11,360
light blue shows attacks on etw by

390
00:16:11,360 --> 00:16:13,600
modifying the environment variables

391
00:16:13,600 --> 00:16:17,040
registry and log files

392
00:16:17,040 --> 00:16:19,360
orange shows attacks on user mode etw

393
00:16:19,360 --> 00:16:22,000
providers

394
00:16:22,000 --> 00:16:23,839
dark blue shows attacks on kernel mode

395
00:16:23,839 --> 00:16:25,759
edw providers

396
00:16:25,759 --> 00:16:29,600
and purple shows attacks on etw sessions

397
00:16:29,600 --> 00:16:31,759
next igor will go over each type and

398
00:16:31,759 --> 00:16:33,839
later introduce and demo two brand new

399
00:16:33,839 --> 00:16:37,040
attacks on etw

400
00:16:37,040 --> 00:16:38,320
thank you very much

401
00:16:38,320 --> 00:16:40,959
it's my turn

402
00:16:41,199 --> 00:16:44,240
let me briefly describe attacks on etw

403
00:16:44,240 --> 00:16:46,880
inside the aerial process

404
00:16:46,880 --> 00:16:50,000
as we mentioned before etw provides

405
00:16:50,000 --> 00:16:52,320
providers can be loaded in process

406
00:16:52,320 --> 00:16:56,160
memory as dlls which implement logging

407
00:16:56,160 --> 00:16:59,360
events using event write routine

408
00:16:59,360 --> 00:17:02,800
attackers can modify the control flow

409
00:17:02,800 --> 00:17:05,520
so that the events won't be locked

410
00:17:05,520 --> 00:17:08,880
look at the numbers 1 3 and 5.

411
00:17:08,880 --> 00:17:12,319
attackers can directly patch the etw

412
00:17:12,319 --> 00:17:15,439
providers functions with supply events

413
00:17:15,439 --> 00:17:17,039
see number 2.

414
00:17:17,039 --> 00:17:20,079
attackers can send the bogus events by

415
00:17:20,079 --> 00:17:22,559
calling event write function

416
00:17:22,559 --> 00:17:25,199
finally attackers can modify the

417
00:17:25,199 --> 00:17:27,599
internal structure such as process

418
00:17:27,599 --> 00:17:30,480
environment block as a result the fake

419
00:17:30,480 --> 00:17:34,480
process image file will be locked

420
00:17:34,480 --> 00:17:37,200
we can specify one more vector of

421
00:17:37,200 --> 00:17:40,559
attacks which includes modifying it w

422
00:17:40,559 --> 00:17:43,360
environment variables etw registry

423
00:17:43,360 --> 00:17:45,760
settings and log files

424
00:17:45,760 --> 00:17:48,960
attackers can disable etw for dotnet

425
00:17:48,960 --> 00:17:52,400
applications by zeroing etw environment

426
00:17:52,400 --> 00:17:55,520
variables using cmd or registry

427
00:17:55,520 --> 00:17:57,440
see number one

428
00:17:57,440 --> 00:18:00,480
we have revealed that some utw providers

429
00:18:00,480 --> 00:18:03,440
save their settings in registry and

430
00:18:03,440 --> 00:18:06,320
these utility providers can be disabled

431
00:18:06,320 --> 00:18:08,960
by patching the registry keys

432
00:18:08,960 --> 00:18:10,880
see number two

433
00:18:10,880 --> 00:18:13,840
finally attackers can manipulate with

434
00:18:13,840 --> 00:18:17,679
etw log files to hide their footprints

435
00:18:17,679 --> 00:18:20,559
see number three

436
00:18:20,960 --> 00:18:24,640
attackers app can disable etw providers

437
00:18:24,640 --> 00:18:28,320
running in other user remote processes

438
00:18:28,320 --> 00:18:31,280
attackers can disable itw provider

439
00:18:31,280 --> 00:18:34,320
globally by locating the corresponding

440
00:18:34,320 --> 00:18:39,200
etw data structures such as etw handles

441
00:18:39,200 --> 00:18:42,720
trace levels and zeroing their values

442
00:18:42,720 --> 00:18:44,480
see number one

443
00:18:44,480 --> 00:18:47,679
attackers can disable etw providers for

444
00:18:47,679 --> 00:18:50,480
the target processes using three

445
00:18:50,480 --> 00:18:53,840
approaches by patching itself data see

446
00:18:53,840 --> 00:18:56,799
numbers two frame 4 by patching it will

447
00:18:56,799 --> 00:18:59,280
be functions responsible for logging

448
00:18:59,280 --> 00:19:02,799
events c numbers 5 6 and 7

449
00:19:02,799 --> 00:19:05,919
by calling functions to unregister and

450
00:19:05,919 --> 00:19:08,559
disable etw providers as well as

451
00:19:08,559 --> 00:19:13,679
terminate it w3s see numbers 8 9 10 and

452
00:19:13,679 --> 00:19:14,880
11.

453
00:19:14,880 --> 00:19:17,840
finally malware can block logging only

454
00:19:17,840 --> 00:19:20,720
for specific events without stopping

455
00:19:20,720 --> 00:19:22,640
provider completely

456
00:19:22,640 --> 00:19:24,480
see number seven

457
00:19:24,480 --> 00:19:29,039
this helps to hide the attack on etw

458
00:19:29,039 --> 00:19:32,160
another class of attacks bypasses etw

459
00:19:32,160 --> 00:19:35,440
providers using kernel mode driver

460
00:19:35,440 --> 00:19:38,400
attackers can disable it w by locating

461
00:19:38,400 --> 00:19:40,960
kernel handles and modifying the

462
00:19:40,960 --> 00:19:44,240
corresponding data structures c numbers

463
00:19:44,240 --> 00:19:46,640
1 2 3 and 4.

464
00:19:46,640 --> 00:19:48,799
another example of globally disabling

465
00:19:48,799 --> 00:19:53,520
etw is hooking into trace event

466
00:19:53,520 --> 00:19:56,000
see number six

467
00:19:56,000 --> 00:19:59,600
here the offer leverages infinity hook

468
00:19:59,600 --> 00:20:02,080
which works well on all windows versions

469
00:20:02,080 --> 00:20:03,840
from 7 to 10

470
00:20:03,840 --> 00:20:07,760
but due to updates it won't work on used

471
00:20:07,760 --> 00:20:09,760
windows releases

472
00:20:09,760 --> 00:20:12,480
finally attackers can call custom

473
00:20:12,480 --> 00:20:15,679
syscalls which doesn't include etw

474
00:20:15,679 --> 00:20:18,000
instrumentation and information about

475
00:20:18,000 --> 00:20:21,039
this call won't be locked

476
00:20:21,039 --> 00:20:23,520
the final class of attacks is focusing

477
00:20:23,520 --> 00:20:26,000
on etw sessions

478
00:20:26,000 --> 00:20:28,320
attacker can stop and start italian

479
00:20:28,320 --> 00:20:32,400
sessions using etw api as well as

480
00:20:32,400 --> 00:20:36,960
built-in tools c number one and two

481
00:20:36,960 --> 00:20:39,600
attacker can remove or disable providers

482
00:20:39,600 --> 00:20:41,679
from active sessions

483
00:20:41,679 --> 00:20:43,840
see number three

484
00:20:43,840 --> 00:20:46,240
finally attackers can patch the kernel

485
00:20:46,240 --> 00:20:48,960
data structures in order to change the

486
00:20:48,960 --> 00:20:53,760
configurations see numbers 7 8 and 9.

487
00:20:53,760 --> 00:20:55,760
today we will use

488
00:20:55,760 --> 00:20:58,720
these techniques to show you two attacks

489
00:20:58,720 --> 00:21:02,000
on etw

490
00:21:02,000 --> 00:21:05,120
let's summarize attacks on etw

491
00:21:05,120 --> 00:21:06,320
all in all

492
00:21:06,320 --> 00:21:09,360
there are 36 different techniques to

493
00:21:09,360 --> 00:21:12,320
disable and bypass etw

494
00:21:12,320 --> 00:21:16,880
and this number is likely to increase

495
00:21:16,880 --> 00:21:20,400
some more details about itw sessions

496
00:21:20,400 --> 00:21:21,520
the in

497
00:21:21,520 --> 00:21:23,440
the number of running

498
00:21:23,440 --> 00:21:26,159
etvw sessions is limited

499
00:21:26,159 --> 00:21:28,280
the default maximum number of

500
00:21:28,280 --> 00:21:32,240
simultaneously running sessions is 64.

501
00:21:32,240 --> 00:21:35,840
users cannot run more sessions than this

502
00:21:35,840 --> 00:21:36,720
number

503
00:21:36,720 --> 00:21:40,320
the nt kernel supports a maximum of 8

504
00:21:40,320 --> 00:21:42,799
system logging sessions with fixed

505
00:21:42,799 --> 00:21:45,440
session names one of them

506
00:21:45,440 --> 00:21:47,039
is nt

507
00:21:47,039 --> 00:21:48,960
kernel logger session

508
00:21:48,960 --> 00:21:51,520
it collects various internal events and

509
00:21:51,520 --> 00:21:54,960
it is very helpful for edrs

510
00:21:54,960 --> 00:21:56,080
however

511
00:21:56,080 --> 00:21:57,760
users

512
00:21:57,760 --> 00:22:00,480
aren't able to start the nt kernel

513
00:22:00,480 --> 00:22:03,679
logger session twice so they need to

514
00:22:03,679 --> 00:22:06,640
stop the previously session first before

515
00:22:06,640 --> 00:22:09,520
trying another command variation

516
00:22:09,520 --> 00:22:13,600
this is a key point for the attack

517
00:22:13,600 --> 00:22:16,400
as an example we will look at process

518
00:22:16,400 --> 00:22:19,280
monitor which uses absolutely the same

519
00:22:19,280 --> 00:22:22,799
technology as many edrs

520
00:22:22,799 --> 00:22:25,039
process monitor is free

521
00:22:25,039 --> 00:22:28,640
and very popular for malware analysis

522
00:22:28,640 --> 00:22:33,120
we choose process monitor to be neutral

523
00:22:33,120 --> 00:22:36,880
process monitor launches an etw session

524
00:22:36,880 --> 00:22:39,360
to receive network events

525
00:22:39,360 --> 00:22:40,799
we have revealed

526
00:22:40,799 --> 00:22:44,799
that process monitor version up to 3.60

527
00:22:44,799 --> 00:22:47,440
use in t kernel logger

528
00:22:47,440 --> 00:22:50,200
newly issued process monitor version

529
00:22:50,200 --> 00:22:51,760
3.85

530
00:22:51,760 --> 00:22:56,000
uses session called progmontrace

531
00:22:56,000 --> 00:22:58,400
this is the way how process monitor

532
00:22:58,400 --> 00:23:01,760
receives network events

533
00:23:01,760 --> 00:23:04,720
attackers can stop the running session

534
00:23:04,720 --> 00:23:09,360
using session names and start take ones

535
00:23:09,360 --> 00:23:12,240
as a result process monitor stops

536
00:23:12,240 --> 00:23:14,960
receiving network events

537
00:23:14,960 --> 00:23:17,840
even relaunching process monitor doesn't

538
00:23:17,840 --> 00:23:21,600
help to continue collecting events

539
00:23:21,600 --> 00:23:26,199
let me show you how it works

540
00:28:16,640 --> 00:28:18,399
okay

541
00:28:18,399 --> 00:28:21,120
let me briefly explain you how etv

542
00:28:21,120 --> 00:28:23,200
hijacker works

543
00:28:23,200 --> 00:28:26,000
first it stops the target session and

544
00:28:26,000 --> 00:28:28,960
starts it and starts its own with the

545
00:28:28,960 --> 00:28:30,720
same name

546
00:28:30,720 --> 00:28:33,120
then it checks the status of the created

547
00:28:33,120 --> 00:28:35,600
session if the malware session has been

548
00:28:35,600 --> 00:28:39,520
terminated it repeats from the beginning

549
00:28:39,520 --> 00:28:42,159
as long as the malware session is active

550
00:28:42,159 --> 00:28:44,960
malware sleeps for a few seconds and

551
00:28:44,960 --> 00:28:47,600
then checks the malware session

552
00:28:47,600 --> 00:28:50,639
is still active

553
00:28:51,360 --> 00:28:54,960
let me briefly tell you about etw check

554
00:28:54,960 --> 00:28:57,679
it is a powerful tool developed by red

555
00:28:57,679 --> 00:29:01,200
plate to extract various kernel data

556
00:29:01,200 --> 00:29:04,159
here you can see bits of information

557
00:29:04,159 --> 00:29:06,480
that can be gained and an example of

558
00:29:06,480 --> 00:29:08,799
output fragment with

559
00:29:08,799 --> 00:29:10,840
vmi logger

560
00:29:10,840 --> 00:29:12,480
contacts

561
00:29:12,480 --> 00:29:15,200
now let's move on to the secure tv

562
00:29:15,200 --> 00:29:18,100
session running by windows defender

563
00:29:18,100 --> 00:29:20,480
[Music]

564
00:29:20,480 --> 00:29:24,559
windows defender uses two etw sessions

565
00:29:24,559 --> 00:29:27,919
defender api logger and defender audit

566
00:29:27,919 --> 00:29:30,399
logger both of them are running on a

567
00:29:30,399 --> 00:29:33,440
startup as an auto logger so they can be

568
00:29:33,440 --> 00:29:35,520
disabled by modifying the startup

569
00:29:35,520 --> 00:29:38,480
setting located in registry

570
00:29:38,480 --> 00:29:40,720
each etw session has a security

571
00:29:40,720 --> 00:29:43,760
descriptor which is located in registry

572
00:29:43,760 --> 00:29:45,600
here you can see the value of security

573
00:29:45,600 --> 00:29:48,559
descriptor for defender api logger from

574
00:29:48,559 --> 00:29:50,640
registry and dumped from the

575
00:29:50,640 --> 00:29:53,279
corresponding kernel structure

576
00:29:53,279 --> 00:29:56,080
by patching these values you can change

577
00:29:56,080 --> 00:29:59,360
the security descriptor

578
00:29:59,360 --> 00:30:01,679
now let's move on on

579
00:30:01,679 --> 00:30:05,200
querying information about secure etv

580
00:30:05,200 --> 00:30:08,200
sessions

581
00:30:08,960 --> 00:30:10,320
windows

582
00:30:10,320 --> 00:30:14,240
provides a query all trace w api to get

583
00:30:14,240 --> 00:30:16,960
information about etw

584
00:30:16,960 --> 00:30:19,440
after calling this function the control

585
00:30:19,440 --> 00:30:22,320
goes to the kernel and finally to the

586
00:30:22,320 --> 00:30:25,760
each wp query trace

587
00:30:25,760 --> 00:30:28,480
in the right you can see the

588
00:30:28,480 --> 00:30:32,640
cuda code or this function

589
00:30:32,640 --> 00:30:34,960
the function includes several security

590
00:30:34,960 --> 00:30:37,200
checks that prevent returning

591
00:30:37,200 --> 00:30:39,840
information about this session

592
00:30:39,840 --> 00:30:42,080
first it checks access rights by

593
00:30:42,080 --> 00:30:44,640
comparing access security descriptor and

594
00:30:44,640 --> 00:30:46,399
process token

595
00:30:46,399 --> 00:30:48,880
second it checks whether the session is

596
00:30:48,880 --> 00:30:52,159
marked as security and implemented one

597
00:30:52,159 --> 00:30:56,159
more check based on ppl mechanisms

598
00:30:56,159 --> 00:30:59,760
by default users cannot query info about

599
00:30:59,760 --> 00:31:02,320
defender it adobe sessions

600
00:31:02,320 --> 00:31:03,840
because they are running with high

601
00:31:03,840 --> 00:31:07,360
privilege with enable security trays

602
00:31:07,360 --> 00:31:10,000
both these parameters are located in

603
00:31:10,000 --> 00:31:13,039
their my lawyer contact structure

604
00:31:13,039 --> 00:31:16,240
these data values are read for each call

605
00:31:16,240 --> 00:31:18,559
on this function

606
00:31:18,559 --> 00:31:19,519
so

607
00:31:19,519 --> 00:31:22,559
malware can load its driver to patch the

608
00:31:22,559 --> 00:31:26,080
values inside the target dmi logger

609
00:31:26,080 --> 00:31:27,840
contact structure

610
00:31:27,840 --> 00:31:30,799
so that the function will always return

611
00:31:30,799 --> 00:31:35,039
information about this etw session

612
00:31:35,039 --> 00:31:38,000
to query information about security

613
00:31:38,000 --> 00:31:41,120
session malware driver has to patch

614
00:31:41,120 --> 00:31:43,919
security descriptor and clear security

615
00:31:43,919 --> 00:31:47,120
trace flag

616
00:31:47,120 --> 00:31:49,120
now let's move on to

617
00:31:49,120 --> 00:31:52,799
stopping cq etw sessions

618
00:31:52,799 --> 00:31:54,480
windows provides

619
00:31:54,480 --> 00:31:57,919
stop trace api to terminate a running

620
00:31:57,919 --> 00:31:59,200
session

621
00:31:59,200 --> 00:32:01,600
after calling this function the control

622
00:32:01,600 --> 00:32:04,559
goes to the kernel and finally to the

623
00:32:04,559 --> 00:32:07,440
ewp stop trace

624
00:32:07,440 --> 00:32:09,840
in the right you can see

625
00:32:09,840 --> 00:32:14,159
see the code of this function

626
00:32:14,159 --> 00:32:16,720
the function includes several security

627
00:32:16,720 --> 00:32:20,320
checks that prevent stopping the session

628
00:32:20,320 --> 00:32:22,480
first it checks where the session can be

629
00:32:22,480 --> 00:32:25,039
stopped until

630
00:32:25,039 --> 00:32:26,960
stopped using

631
00:32:26,960 --> 00:32:28,640
internal flag

632
00:32:28,640 --> 00:32:30,720
second it checks access rights by

633
00:32:30,720 --> 00:32:33,039
comparing session security descriptor

634
00:32:33,039 --> 00:32:35,440
and process token

635
00:32:35,440 --> 00:32:38,320
by default users cannot stop defender

636
00:32:38,320 --> 00:32:39,919
ety sessions

637
00:32:39,919 --> 00:32:41,440
because they are running with high

638
00:32:41,440 --> 00:32:45,360
privilege and are not stoppable

639
00:32:45,360 --> 00:32:48,559
both these parameters are also located

640
00:32:48,559 --> 00:32:51,840
in the mi logger context structure

641
00:32:51,840 --> 00:32:54,720
these data values are read for each call

642
00:32:54,720 --> 00:32:56,399
of this function

643
00:32:56,399 --> 00:32:59,760
so malware can load its driver to patch

644
00:32:59,760 --> 00:33:02,480
these values inside the target the my

645
00:33:02,480 --> 00:33:04,720
logger cost structure

646
00:33:04,720 --> 00:33:07,600
so that the function will always call

647
00:33:07,600 --> 00:33:11,679
the function hwp stop logger instance

648
00:33:11,679 --> 00:33:14,080
which terminates the session without

649
00:33:14,080 --> 00:33:16,799
additional security checks

650
00:33:16,799 --> 00:33:19,679
to stop secure utw session malware

651
00:33:19,679 --> 00:33:23,679
driver has to patch both security script

652
00:33:23,679 --> 00:33:26,080
and logger mode

653
00:33:26,080 --> 00:33:29,519
here is the summary of both attacks

654
00:33:29,519 --> 00:33:31,679
to query information about the target

655
00:33:31,679 --> 00:33:35,039
secure etw session and stop it

656
00:33:35,039 --> 00:33:38,880
malware driver has to patch three fields

657
00:33:38,880 --> 00:33:40,640
in the corresponding

658
00:33:40,640 --> 00:33:43,440
the mi logger content structure in

659
00:33:43,440 --> 00:33:45,600
memory

660
00:33:45,600 --> 00:33:49,959
let me show you how it works

661
00:36:38,160 --> 00:36:41,160
so

662
00:36:41,599 --> 00:36:43,520
windows patch guard is a software

663
00:36:43,520 --> 00:36:46,000
protection utility designed to forbid

664
00:36:46,000 --> 00:36:48,240
the kernel from being patched in order

665
00:36:48,240 --> 00:36:50,960
to prevent root kit infections

666
00:36:50,960 --> 00:36:53,760
however we can see that patch guard

667
00:36:53,760 --> 00:36:56,320
doesn't protect kernel itw structures

668
00:36:56,320 --> 00:36:59,359
from illegal right access this is

669
00:36:59,359 --> 00:37:00,560
crucial

670
00:37:00,560 --> 00:37:02,880
to deal with this issue we can use

671
00:37:02,880 --> 00:37:04,320
memory ranger

672
00:37:04,320 --> 00:37:07,040
which is a hypervisor based utility that

673
00:37:07,040 --> 00:37:08,960
are designed to prevent attacks on

674
00:37:08,960 --> 00:37:10,400
kernel memory

675
00:37:10,400 --> 00:37:12,880
after loading memorandum allocates a

676
00:37:12,880 --> 00:37:15,040
default enclave for the waste and

677
00:37:15,040 --> 00:37:17,280
previously loaded drivers

678
00:37:17,280 --> 00:37:20,560
memorangic traps loading etw blender

679
00:37:20,560 --> 00:37:23,599
driver and moves it to the isolated

680
00:37:23,599 --> 00:37:26,880
kernel enclave in runtime with different

681
00:37:26,880 --> 00:37:29,359
memory access restrictions

682
00:37:29,359 --> 00:37:32,800
using ept memoranger can trap access to

683
00:37:32,800 --> 00:37:35,680
the sensitive data and foist the fake

684
00:37:35,680 --> 00:37:38,160
null data to the attacker instead of the

685
00:37:38,160 --> 00:37:39,520
real one

686
00:37:39,520 --> 00:37:41,760
memorandum is a proof of concept that

687
00:37:41,760 --> 00:37:44,400
can be customized for solving various

688
00:37:44,400 --> 00:37:46,720
security tasks

689
00:37:46,720 --> 00:37:51,160
let me show you how it works

690
00:40:11,560 --> 00:40:14,750
[Music]

691
00:40:26,400 --> 00:40:30,160
so operating system is protected

692
00:40:30,160 --> 00:40:33,119
etw was originally designed to perform

693
00:40:33,119 --> 00:40:36,160
software diagnostics and nowadays it is

694
00:40:36,160 --> 00:40:39,200
widely used by various edrs and cyber

695
00:40:39,200 --> 00:40:41,760
security solutions it is crucial to

696
00:40:41,760 --> 00:40:44,640
understand the attacks on etw because

697
00:40:44,640 --> 00:40:47,359
these attacks can disable the whole

698
00:40:47,359 --> 00:40:49,920
class of security solutions

699
00:40:49,920 --> 00:40:53,599
etw includes some design issues which

700
00:40:53,599 --> 00:40:56,640
makes it possible to bypass it

701
00:40:56,640 --> 00:40:59,520
we've presented a new tool called etv

702
00:40:59,520 --> 00:41:03,280
check that can detect etw attacks

703
00:41:03,280 --> 00:41:06,079
memorandum can be customized to prevent

704
00:41:06,079 --> 00:41:10,720
patching sensitive kernel etw data

705
00:41:10,720 --> 00:41:13,839
claudio can i ask you to go on please

706
00:41:13,839 --> 00:41:16,079
as a conclusion to conclusion i want to

707
00:41:16,079 --> 00:41:17,440
leave the audience with a possible

708
00:41:17,440 --> 00:41:18,640
scenario

709
00:41:18,640 --> 00:41:20,480
let's assume that an attacks originating

710
00:41:20,480 --> 00:41:21,599
the former

711
00:41:21,599 --> 00:41:23,839
says persistence executes the next stage

712
00:41:23,839 --> 00:41:25,680
payload to move up in the kernel where

713
00:41:25,680 --> 00:41:27,920
it can implement one of the attacks

714
00:41:27,920 --> 00:41:30,079
showcased in this presentation

715
00:41:30,079 --> 00:41:31,680
this will be devastating due to its

716
00:41:31,680 --> 00:41:33,760
stealth net and resilience to os

717
00:41:33,760 --> 00:41:36,880
reinstallation and hard drive replacing

718
00:41:36,880 --> 00:41:38,800
that's why today security solutions

719
00:41:38,800 --> 00:41:42,079
might resist must receive signals from

720
00:41:42,079 --> 00:41:44,640
below and above the operating system to

721
00:41:44,640 --> 00:41:46,880
be able to respond effectively to such

722
00:41:46,880 --> 00:41:52,280
threats thank you and see you next time

