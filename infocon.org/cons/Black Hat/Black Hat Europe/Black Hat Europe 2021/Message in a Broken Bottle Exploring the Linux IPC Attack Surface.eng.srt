1
00:00:00,860 --> 00:00:09,120
[Music]

2
00:00:09,120 --> 00:00:11,040
hi my name is kevin backhouse and i'm a

3
00:00:11,040 --> 00:00:14,240
member of github security lab

4
00:00:14,240 --> 00:00:16,800
this presentation is about dbos dbos is

5
00:00:16,800 --> 00:00:18,640
a messaging system that's widely used on

6
00:00:18,640 --> 00:00:20,640
linux for into process communication or

7
00:00:20,640 --> 00:00:23,119
ipc and in this presentation i'm going

8
00:00:23,119 --> 00:00:24,960
to focus on how it's used by many of the

9
00:00:24,960 --> 00:00:26,640
system services that are running in the

10
00:00:26,640 --> 00:00:28,560
background

11
00:00:28,560 --> 00:00:29,920
i'm going to try to give you an overview

12
00:00:29,920 --> 00:00:31,840
of dbos's architecture with a particular

13
00:00:31,840 --> 00:00:34,000
focus on its security features and i'll

14
00:00:34,000 --> 00:00:35,920
also go into a bit more detail on polkit

15
00:00:35,920 --> 00:00:37,520
which is the service that's responsible

16
00:00:37,520 --> 00:00:38,800
for checking whether a user is

17
00:00:38,800 --> 00:00:41,680
authorized to do something

18
00:00:41,680 --> 00:00:43,520
i'm going to show you a few

19
00:00:43,520 --> 00:00:45,760
source code examples of what it looks

20
00:00:45,760 --> 00:00:47,360
like to program a debuff service and

21
00:00:47,360 --> 00:00:48,960
i'll talk about some of the most common

22
00:00:48,960 --> 00:00:52,000
bug classes that i've seen

23
00:00:52,000 --> 00:00:53,920
finally i'll show you a couple of demos

24
00:00:53,920 --> 00:00:55,199
of local privilege escalation

25
00:00:55,199 --> 00:00:56,559
vulnerabilities that i've found in the

26
00:00:56,559 --> 00:00:57,760
past year

27
00:00:57,760 --> 00:00:59,199
usually privilege escalation

28
00:00:59,199 --> 00:01:00,879
vulnerabilities on linux are caused by

29
00:01:00,879 --> 00:01:03,440
bugs in either the kernel or a set uid

30
00:01:03,440 --> 00:01:04,959
binary like sudo but these

31
00:01:04,959 --> 00:01:06,640
vulnerabilities were caused by bugs and

32
00:01:06,640 --> 00:01:08,550
debuff services

33
00:01:08,550 --> 00:01:10,720
[Music]

34
00:01:10,720 --> 00:01:14,400
so let's do a quick demo of dbos

35
00:01:14,400 --> 00:01:16,320
uh now just to be clear this first demo

36
00:01:16,320 --> 00:01:18,080
is not a demo for vulnerability i just

37
00:01:18,080 --> 00:01:19,360
want to show you what it looks like when

38
00:01:19,360 --> 00:01:21,439
things are working normally

39
00:01:21,439 --> 00:01:24,640
so i've got a vm running here um running

40
00:01:24,640 --> 00:01:28,000
ubuntu 2004

41
00:01:29,360 --> 00:01:31,360
and this is the system settings dialog

42
00:01:31,360 --> 00:01:33,600
box and many of the things you do in

43
00:01:33,600 --> 00:01:36,240
this system settings dialog box are

44
00:01:36,240 --> 00:01:37,920
going to trigger dbos events so for

45
00:01:37,920 --> 00:01:39,360
example if i

46
00:01:39,360 --> 00:01:41,200
change the icon here

47
00:01:41,200 --> 00:01:43,280
that was a d bus message that got sent

48
00:01:43,280 --> 00:01:45,680
in the background um but dbos is not

49
00:01:45,680 --> 00:01:47,759
just a graphical thing uh

50
00:01:47,759 --> 00:01:49,840
it's mostly happening in the background

51
00:01:49,840 --> 00:01:51,920
and so you can also send d bus messages

52
00:01:51,920 --> 00:01:55,520
from the command line so i've got a

53
00:01:55,520 --> 00:01:56,719
little cheat sheet here that i'm going

54
00:01:56,719 --> 00:02:00,640
to use and i'm just going to use

55
00:02:00,960 --> 00:02:03,360
the command line now to change the icon

56
00:02:03,360 --> 00:02:04,960
again

57
00:02:04,960 --> 00:02:07,040
so if i go back to the system settings

58
00:02:07,040 --> 00:02:09,758
you can see that the uh the icon has

59
00:02:09,758 --> 00:02:11,680
changed

60
00:02:11,680 --> 00:02:13,840
now a few things that i just want to

61
00:02:13,840 --> 00:02:16,800
point out in this command here

62
00:02:16,800 --> 00:02:18,640
um

63
00:02:18,640 --> 00:02:21,360
there's always a destination on a dbos

64
00:02:21,360 --> 00:02:23,360
message um

65
00:02:23,360 --> 00:02:26,400
there's often well there's always a path

66
00:02:26,400 --> 00:02:28,560
as well and the path

67
00:02:28,560 --> 00:02:30,160
um so some

68
00:02:30,160 --> 00:02:33,120
debuff services have a whole tree of

69
00:02:33,120 --> 00:02:35,440
different objects and so the path tells

70
00:02:35,440 --> 00:02:36,720
you which of those objects you want to

71
00:02:36,720 --> 00:02:38,800
interact with and here we're interacting

72
00:02:38,800 --> 00:02:42,400
with user 1001 which is

73
00:02:42,400 --> 00:02:45,280
my user id

74
00:02:45,280 --> 00:02:47,680
then there's a method name so set icon

75
00:02:47,680 --> 00:02:49,360
file in this case

76
00:02:49,360 --> 00:02:52,879
and sometimes there will be a message

77
00:02:52,879 --> 00:02:54,800
body in this case the message body is a

78
00:02:54,800 --> 00:02:56,319
string with the

79
00:02:56,319 --> 00:02:59,359
the path of the file

80
00:03:02,879 --> 00:03:04,720
so this is an architecture diagram of

81
00:03:04,720 --> 00:03:07,840
the dbos ecosystem at the center there's

82
00:03:07,840 --> 00:03:10,000
uh this process called debuss daemon

83
00:03:10,000 --> 00:03:11,680
which is responsible for routing dbos

84
00:03:11,680 --> 00:03:14,080
messages to the correct recipient

85
00:03:14,080 --> 00:03:16,080
dbos demon also has an important role in

86
00:03:16,080 --> 00:03:17,519
the security of the whole system which

87
00:03:17,519 --> 00:03:20,480
i'll talk about in more detail later

88
00:03:20,480 --> 00:03:23,040
in this diagram i've also included

89
00:03:23,040 --> 00:03:24,400
examples of

90
00:03:24,400 --> 00:03:26,560
some important system services that

91
00:03:26,560 --> 00:03:29,440
participate in this ecosystem so for

92
00:03:29,440 --> 00:03:32,080
example you've got systemd there the

93
00:03:32,080 --> 00:03:36,400
account service daemon poll kit etc

94
00:03:36,400 --> 00:03:38,640
and linux itself forms the base layer of

95
00:03:38,640 --> 00:03:39,519
it all

96
00:03:39,519 --> 00:03:42,239
the two most important things that linux

97
00:03:42,239 --> 00:03:44,080
brings to this party are firstly of

98
00:03:44,080 --> 00:03:46,239
course the usual process and user

99
00:03:46,239 --> 00:03:48,000
account separation stuff

100
00:03:48,000 --> 00:03:50,159
so that these system services are all

101
00:03:50,159 --> 00:03:52,400
properly isolated from each other and

102
00:03:52,400 --> 00:03:54,560
secondly unix domain sockets which are

103
00:03:54,560 --> 00:03:57,040
used for secure communication

104
00:03:57,040 --> 00:03:58,159
a

105
00:03:58,159 --> 00:04:00,879
unix domain socket is similar to a tcp

106
00:04:00,879 --> 00:04:04,239
socket um but because it's handled by

107
00:04:04,239 --> 00:04:06,159
the kernel you don't need to worry about

108
00:04:06,159 --> 00:04:08,400
encrypting the messages for example um

109
00:04:08,400 --> 00:04:10,000
and it can do some things that tcp

110
00:04:10,000 --> 00:04:12,239
sockets can't do like for example you

111
00:04:12,239 --> 00:04:15,360
can send a file descriptor over unix

112
00:04:15,360 --> 00:04:17,358
unix domain socket

113
00:04:17,358 --> 00:04:18,798
and you can also use it to check the

114
00:04:18,798 --> 00:04:20,959
credentials of the process on the other

115
00:04:20,959 --> 00:04:23,199
end

116
00:04:24,240 --> 00:04:27,680
so i think this architecture is one of

117
00:04:27,680 --> 00:04:29,199
the

118
00:04:29,199 --> 00:04:31,759
things that has led to this joke that

119
00:04:31,759 --> 00:04:33,759
linux is what the systemd operating

120
00:04:33,759 --> 00:04:36,080
system used to be called

121
00:04:36,080 --> 00:04:38,000
this is one version of that joke that i

122
00:04:38,000 --> 00:04:40,479
saw on twitter recently this particular

123
00:04:40,479 --> 00:04:41,680
version of the joke is quite good

124
00:04:41,680 --> 00:04:43,280
because it's riffing on the old gnu

125
00:04:43,280 --> 00:04:44,880
linux thing

126
00:04:44,880 --> 00:04:47,280
um just as an aside i don't personally

127
00:04:47,280 --> 00:04:48,880
quite understand why some people are so

128
00:04:48,880 --> 00:04:51,120
upset about system d

129
00:04:51,120 --> 00:04:53,520
it seems fine to me and from what i've

130
00:04:53,520 --> 00:04:54,880
seen of the source code it looks quite

131
00:04:54,880 --> 00:04:56,479
well written

132
00:04:56,479 --> 00:04:58,080
but i do think that there might be some

133
00:04:58,080 --> 00:04:59,680
truth to this joke

134
00:04:59,680 --> 00:05:01,759
so earlier this year

135
00:05:01,759 --> 00:05:04,720
i started reading this book

136
00:05:04,720 --> 00:05:06,960
i skipped the operating systems class

137
00:05:06,960 --> 00:05:08,560
when i was in college so i decided it

138
00:05:08,560 --> 00:05:10,800
was time to catch up

139
00:05:10,800 --> 00:05:12,800
i have to admit i've

140
00:05:12,800 --> 00:05:15,360
not made much progress yet

141
00:05:15,360 --> 00:05:17,039
but this was around the same time that i

142
00:05:17,039 --> 00:05:19,199
was learning about dbos

143
00:05:19,199 --> 00:05:20,320
and i was really struck by the

144
00:05:20,320 --> 00:05:22,560
similarity between the dbos ecosystem

145
00:05:22,560 --> 00:05:25,120
and this description of the minix minix

146
00:05:25,120 --> 00:05:28,000
microkernel operating system

147
00:05:28,000 --> 00:05:29,520
as it says here

148
00:05:29,520 --> 00:05:31,919
unlike unix whose kernel is a monolithic

149
00:05:31,919 --> 00:05:34,639
program not split up into modules minix

150
00:05:34,639 --> 00:05:36,720
3 itself is a collection of processes

151
00:05:36,720 --> 00:05:38,160
that communicate with each other and

152
00:05:38,160 --> 00:05:40,800
also with user processes using a single

153
00:05:40,800 --> 00:05:42,639
inter-process communication primitive

154
00:05:42,639 --> 00:05:45,520
message passing

155
00:05:45,919 --> 00:05:46,880
now

156
00:05:46,880 --> 00:05:48,639
i don't think anyone's going to accuse

157
00:05:48,639 --> 00:05:50,560
linux of being a microkernel operating

158
00:05:50,560 --> 00:05:52,560
system but maybe parts of the design are

159
00:05:52,560 --> 00:05:55,680
moving in that direction

160
00:05:56,560 --> 00:05:59,759
okay let's have a look at a few examples

161
00:05:59,759 --> 00:06:01,520
of dbos messages so that you understand

162
00:06:01,520 --> 00:06:03,919
the basic format now bear in mind that

163
00:06:03,919 --> 00:06:06,240
dbos messages are a binary format so

164
00:06:06,240 --> 00:06:08,400
what you're looking at here is a pretty

165
00:06:08,400 --> 00:06:10,319
printed rendering of it

166
00:06:10,319 --> 00:06:12,880
so these two messages are quite similar

167
00:06:12,880 --> 00:06:14,479
but the one on the left keeps repeating

168
00:06:14,479 --> 00:06:16,880
org.freedesktop.account

169
00:06:16,880 --> 00:06:18,639
so i included the one on the right to

170
00:06:18,639 --> 00:06:20,479
show you that isn't that it isn't always

171
00:06:20,479 --> 00:06:22,960
like that

172
00:06:23,120 --> 00:06:25,919
now these messages are both method calls

173
00:06:25,919 --> 00:06:28,240
um the other message types are replies

174
00:06:28,240 --> 00:06:30,319
errors and signals

175
00:06:30,319 --> 00:06:32,800
signals are kind of like broadcast

176
00:06:32,800 --> 00:06:36,319
messages that you can subscribe to

177
00:06:36,319 --> 00:06:39,440
um the message serial number is

178
00:06:39,440 --> 00:06:41,840
important for reply so sometimes you

179
00:06:41,840 --> 00:06:43,199
might have to wait a while before you

180
00:06:43,199 --> 00:06:44,800
get a reply to a method call that you

181
00:06:44,800 --> 00:06:47,759
sent so the serial number is is useful

182
00:06:47,759 --> 00:06:50,479
for tracking

183
00:06:52,479 --> 00:06:54,160
now there's

184
00:06:54,160 --> 00:06:56,479
a few different header fields some of

185
00:06:56,479 --> 00:06:57,919
which are optional depending on what

186
00:06:57,919 --> 00:07:00,080
kind of message you're sending

187
00:07:00,080 --> 00:07:01,199
and we saw

188
00:07:01,199 --> 00:07:03,039
examples of several of these fields when

189
00:07:03,039 --> 00:07:05,120
i used dbos send to send that message on

190
00:07:05,120 --> 00:07:07,759
the command line earlier

191
00:07:07,759 --> 00:07:10,560
now there's two fields that are kind of

192
00:07:10,560 --> 00:07:13,919
special the first is unix fds which

193
00:07:13,919 --> 00:07:15,919
allows you to attach file descriptors to

194
00:07:15,919 --> 00:07:17,759
the message so that can be used for

195
00:07:17,759 --> 00:07:19,520
example to share a file with a system

196
00:07:19,520 --> 00:07:21,280
service in a reliable way that isn't

197
00:07:21,280 --> 00:07:22,960
vulnerable to something like a talk to

198
00:07:22,960 --> 00:07:24,880
attack

199
00:07:24,880 --> 00:07:27,520
the second is the sender field

200
00:07:27,520 --> 00:07:29,919
which is added by the dbos daemon so

201
00:07:29,919 --> 00:07:31,520
that's really valuable for security

202
00:07:31,520 --> 00:07:32,960
because the sender field can't be

203
00:07:32,960 --> 00:07:35,440
spoofed it allows system services to

204
00:07:35,440 --> 00:07:37,599
reliably check things like what the user

205
00:07:37,599 --> 00:07:39,360
id is of the sender that they just

206
00:07:39,360 --> 00:07:42,319
received a message from

207
00:07:43,360 --> 00:07:45,680
and finally messages can optionally

208
00:07:45,680 --> 00:07:47,840
include a body with a list of extra

209
00:07:47,840 --> 00:07:48,879
arguments

210
00:07:48,879 --> 00:07:50,720
and the type of the data in the body is

211
00:07:50,720 --> 00:07:55,039
determined by the signature header field

212
00:07:55,919 --> 00:07:58,319
now in this slide i'm showing you

213
00:07:58,319 --> 00:08:00,080
showing you an example of a method call

214
00:08:00,080 --> 00:08:03,360
on left and it's reply on the right

215
00:08:03,360 --> 00:08:05,440
this particular message is actually

216
00:08:05,440 --> 00:08:07,280
quite an important one it's the hello

217
00:08:07,280 --> 00:08:09,199
message which is always the first

218
00:08:09,199 --> 00:08:10,879
message that you have to send when you

219
00:08:10,879 --> 00:08:14,639
when you first connect to the dbos demon

220
00:08:14,639 --> 00:08:16,479
um and the reply that you get back from

221
00:08:16,479 --> 00:08:18,160
the d bus demon tells you what your

222
00:08:18,160 --> 00:08:20,479
unique bus name is so in this example

223
00:08:20,479 --> 00:08:23,719
it's 1.3591

224
00:08:25,440 --> 00:08:27,039
one of the things i want to emphasize

225
00:08:27,039 --> 00:08:29,199
here is the distinction between unique

226
00:08:29,199 --> 00:08:32,320
boss names and well-known names so a

227
00:08:32,320 --> 00:08:33,679
well-known name is something like

228
00:08:33,679 --> 00:08:35,679
org.freedesktop.accounts

229
00:08:35,679 --> 00:08:37,360
and typically

230
00:08:37,360 --> 00:08:39,200
only root processors are allowed to

231
00:08:39,200 --> 00:08:42,080
claim those well-known names that's a

232
00:08:42,080 --> 00:08:43,839
security feature

233
00:08:43,839 --> 00:08:46,000
to prevent an unprivileged process from

234
00:08:46,000 --> 00:08:48,399
impersonating a system service and

235
00:08:48,399 --> 00:08:49,920
using that to intercept important

236
00:08:49,920 --> 00:08:52,399
messages

237
00:08:53,680 --> 00:08:56,160
so just to summarize what are the main

238
00:08:56,160 --> 00:08:58,880
security features of dbus um

239
00:08:58,880 --> 00:09:00,880
it gives you secure into process

240
00:09:00,880 --> 00:09:02,640
communication

241
00:09:02,640 --> 00:09:05,680
the ownership rules on well-known names

242
00:09:05,680 --> 00:09:07,360
ensure that system services can't be

243
00:09:07,360 --> 00:09:09,200
impersonated

244
00:09:09,200 --> 00:09:10,160
and

245
00:09:10,160 --> 00:09:12,240
unique bus names allow you to reliably

246
00:09:12,240 --> 00:09:13,360
check the credentials of your

247
00:09:13,360 --> 00:09:15,200
counterparty

248
00:09:15,200 --> 00:09:17,120
so sometimes you see code where they've

249
00:09:17,120 --> 00:09:18,800
used the pid for that instead and that's

250
00:09:18,800 --> 00:09:21,440
a bug because pids get recycled

251
00:09:21,440 --> 00:09:22,399
frequently

252
00:09:22,399 --> 00:09:24,480
so unique bus names are a much better

253
00:09:24,480 --> 00:09:28,240
solution because they never get recycled

254
00:09:28,240 --> 00:09:29,839
the final one is a feature that i didn't

255
00:09:29,839 --> 00:09:32,320
mention yet you can also set

256
00:09:32,320 --> 00:09:33,760
restrictions on which methods are

257
00:09:33,760 --> 00:09:35,360
allowed to be called for example you

258
00:09:35,360 --> 00:09:36,800
might have some methods that are only

259
00:09:36,800 --> 00:09:40,560
allowed to be called by a root process

260
00:09:41,920 --> 00:09:44,480
i think the thing that i like the least

261
00:09:44,480 --> 00:09:45,360
about

262
00:09:45,360 --> 00:09:48,000
or that i dislike about dbus is the

263
00:09:48,000 --> 00:09:50,560
proliferation of config files

264
00:09:50,560 --> 00:09:52,240
i can never remember where they all are

265
00:09:52,240 --> 00:09:54,160
and i have no doubt that i'm going to

266
00:09:54,160 --> 00:09:56,160
end up using these slides as a reference

267
00:09:56,160 --> 00:09:59,680
next time i'm trying to find one of them

268
00:10:00,320 --> 00:10:01,200
so

269
00:10:01,200 --> 00:10:03,120
these files that i've listed here the

270
00:10:03,120 --> 00:10:06,160
config files for the account service and

271
00:10:06,160 --> 00:10:08,160
the directories that these files are in

272
00:10:08,160 --> 00:10:10,160
contain many other config files for all

273
00:10:10,160 --> 00:10:11,120
the other

274
00:10:11,120 --> 00:10:12,959
system services

275
00:10:12,959 --> 00:10:14,720
and in fact this isn't even the full

276
00:10:14,720 --> 00:10:17,040
list because there are also other config

277
00:10:17,040 --> 00:10:20,399
files relating to polkit

278
00:10:23,200 --> 00:10:25,519
okay so i just want to quickly show you

279
00:10:25,519 --> 00:10:27,440
what's in two of these config files the

280
00:10:27,440 --> 00:10:29,760
first one is the systemd service file

281
00:10:29,760 --> 00:10:33,200
for the account service

282
00:10:33,200 --> 00:10:35,360
the important thing here is that many of

283
00:10:35,360 --> 00:10:37,200
these services can be started on demand

284
00:10:37,200 --> 00:10:38,800
so they don't need to be running all the

285
00:10:38,800 --> 00:10:39,920
time

286
00:10:39,920 --> 00:10:40,640
so

287
00:10:40,640 --> 00:10:42,720
if for example you send a message to the

288
00:10:42,720 --> 00:10:45,720
org.free.freedesktop.accounts

289
00:10:46,480 --> 00:10:49,040
and the account service daemon isn't

290
00:10:49,040 --> 00:10:51,120
running yet then it gets started up

291
00:10:51,120 --> 00:10:53,040
automatically and then it replies to

292
00:10:53,040 --> 00:10:54,560
your message and so you never needed to

293
00:10:54,560 --> 00:10:56,320
know that it actually needed to be

294
00:10:56,320 --> 00:11:00,120
started up for your benefit

295
00:11:00,160 --> 00:11:01,120
um

296
00:11:01,120 --> 00:11:03,680
this second config file defines the

297
00:11:03,680 --> 00:11:06,640
security policy

298
00:11:06,640 --> 00:11:08,399
uh so first of all the top here is where

299
00:11:08,399 --> 00:11:10,079
it says that only a root process is

300
00:11:10,079 --> 00:11:12,000
allowed to claim this well-known name

301
00:11:12,000 --> 00:11:13,600
which is what prevents an unprivileged

302
00:11:13,600 --> 00:11:15,519
process from impersonating the account

303
00:11:15,519 --> 00:11:17,920
service

304
00:11:19,120 --> 00:11:21,440
and down here is where it defines the

305
00:11:21,440 --> 00:11:22,959
rules for sending messages to the

306
00:11:22,959 --> 00:11:26,320
account service now these

307
00:11:26,320 --> 00:11:27,680
aren't quite so interesting so i was

308
00:11:27,680 --> 00:11:28,720
going to send you

309
00:11:28,720 --> 00:11:30,399
show you a second one here so this is

310
00:11:30,399 --> 00:11:32,320
the um

311
00:11:32,320 --> 00:11:36,000
config file for systemd logind

312
00:11:36,000 --> 00:11:37,760
um

313
00:11:37,760 --> 00:11:41,200
and what you see here is that

314
00:11:41,200 --> 00:11:43,279
d has this rule which says deny by

315
00:11:43,279 --> 00:11:45,200
default so that's something that you can

316
00:11:45,200 --> 00:11:46,880
do if your service is highly security

317
00:11:46,880 --> 00:11:50,560
critical like login d is

318
00:11:51,680 --> 00:11:53,839
okay it's time for another demo

319
00:11:53,839 --> 00:11:56,320
um

320
00:11:56,320 --> 00:11:57,120
so

321
00:11:57,120 --> 00:11:58,480
like last time this is not a

322
00:11:58,480 --> 00:11:59,680
vulnerability

323
00:11:59,680 --> 00:12:01,760
vulnerability demo yet uh i just want to

324
00:12:01,760 --> 00:12:04,639
show you how poll kit works

325
00:12:04,639 --> 00:12:07,920
so um if i go to the sys the settings

326
00:12:07,920 --> 00:12:09,360
dialog box here

327
00:12:09,360 --> 00:12:11,040
if i do something like clicking this

328
00:12:11,040 --> 00:12:12,560
unlock button

329
00:12:12,560 --> 00:12:14,959
then you see this dialog box popping up

330
00:12:14,959 --> 00:12:16,959
this dialog box is known as an

331
00:12:16,959 --> 00:12:19,839
authentication agent and so

332
00:12:19,839 --> 00:12:22,480
a root user or an admin user like the

333
00:12:22,480 --> 00:12:25,200
other accounts on this machine kevin um

334
00:12:25,200 --> 00:12:26,560
needs to enter their password here in

335
00:12:26,560 --> 00:12:28,639
order to authorize that

336
00:12:28,639 --> 00:12:31,360
again it is not just a graphical thing

337
00:12:31,360 --> 00:12:35,279
though so if for example i were to

338
00:12:35,279 --> 00:12:38,800
try to create a user account

339
00:12:38,800 --> 00:12:42,079
with this dbos message

340
00:12:42,320 --> 00:12:43,920
on the command line

341
00:12:43,920 --> 00:12:48,160
then you get that same dialog box again

342
00:12:48,959 --> 00:12:50,720
now

343
00:12:50,720 --> 00:12:52,639
it doesn't even need to be a graphical

344
00:12:52,639 --> 00:12:54,720
dialogue box an authentication uh yeah

345
00:12:54,720 --> 00:12:56,399
an authentication agent could even be

346
00:12:56,399 --> 00:12:59,040
text based so if for example i

347
00:12:59,040 --> 00:13:00,880
um

348
00:13:00,880 --> 00:13:04,000
ssh in so that i'm on a text mode

349
00:13:04,000 --> 00:13:05,040
session

350
00:13:05,040 --> 00:13:07,120
and then there's another command which

351
00:13:07,120 --> 00:13:09,519
also requires poll kit authorization

352
00:13:09,519 --> 00:13:11,360
called pk exec

353
00:13:11,360 --> 00:13:14,000
and that program actually starts its own

354
00:13:14,000 --> 00:13:16,160
text mode authentication agent when it's

355
00:13:16,160 --> 00:13:17,760
in a text-based session and so you can

356
00:13:17,760 --> 00:13:18,959
see here that it's asking for the

357
00:13:18,959 --> 00:13:22,399
password on the command line

358
00:13:27,600 --> 00:13:29,680
okay so in this diagram i'm going to try

359
00:13:29,680 --> 00:13:32,160
to explain the architecture of pull kit

360
00:13:32,160 --> 00:13:33,680
now

361
00:13:33,680 --> 00:13:35,120
the first thing to note is that

362
00:13:35,120 --> 00:13:36,720
everything above the dotted line is an

363
00:13:36,720 --> 00:13:38,959
unprivileged process so the thing that's

364
00:13:38,959 --> 00:13:40,320
quite interesting there is that the

365
00:13:40,320 --> 00:13:42,880
authentication agent is not a privileged

366
00:13:42,880 --> 00:13:44,560
process

367
00:13:44,560 --> 00:13:46,959
um that dialog box

368
00:13:46,959 --> 00:13:48,639
is basically just a way of getting your

369
00:13:48,639 --> 00:13:50,800
password to pull kit

370
00:13:50,800 --> 00:13:51,600
so

371
00:13:51,600 --> 00:13:53,920
the first thing that happens is that the

372
00:13:53,920 --> 00:13:56,079
authentication agent registers with

373
00:13:56,079 --> 00:13:57,440
polkit and that's something that can

374
00:13:57,440 --> 00:13:59,040
happen as soon as you log in so that

375
00:13:59,040 --> 00:14:00,959
that authentication agent is already

376
00:14:00,959 --> 00:14:04,319
there ready to go when you need it

377
00:14:06,000 --> 00:14:08,320
now suppose you do something like

378
00:14:08,320 --> 00:14:10,720
clicking that unlock button or trying to

379
00:14:10,720 --> 00:14:12,399
create a new

380
00:14:12,399 --> 00:14:15,199
user account

381
00:14:15,519 --> 00:14:17,760
then what happens there is that a dbos

382
00:14:17,760 --> 00:14:19,680
message gets sent to one of the system

383
00:14:19,680 --> 00:14:21,519
services and in this case that's the

384
00:14:21,519 --> 00:14:23,040
account service

385
00:14:23,040 --> 00:14:24,000
um

386
00:14:24,000 --> 00:14:25,839
and an important thing to notice there

387
00:14:25,839 --> 00:14:27,920
is that the dbos

388
00:14:27,920 --> 00:14:28,959
daemon

389
00:14:28,959 --> 00:14:31,040
has added the unique bus name for the

390
00:14:31,040 --> 00:14:32,480
message

391
00:14:32,480 --> 00:14:36,000
sorry for the sender of the message

392
00:14:37,279 --> 00:14:39,440
so now the account service needs to

393
00:14:39,440 --> 00:14:41,120
check whether the sender is allowed to

394
00:14:41,120 --> 00:14:44,079
create a new user so it sends a check

395
00:14:44,079 --> 00:14:46,079
authorization message to pulkit and

396
00:14:46,079 --> 00:14:48,000
includes the unique bus name in the

397
00:14:48,000 --> 00:14:49,519
message so that there can't be any

398
00:14:49,519 --> 00:14:51,360
ambiguity about where this request came

399
00:14:51,360 --> 00:14:53,040
from

400
00:14:53,040 --> 00:14:56,639
now sometimes uh poll kit is able to

401
00:14:56,639 --> 00:14:58,959
approve or deny the request instantly

402
00:14:58,959 --> 00:15:01,199
for example if the request came from a

403
00:15:01,199 --> 00:15:02,800
process that's running as root then it

404
00:15:02,800 --> 00:15:04,639
will immediately send back an access

405
00:15:04,639 --> 00:15:07,360
granted message

406
00:15:07,360 --> 00:15:08,800
but most of the time it's going to need

407
00:15:08,800 --> 00:15:10,560
to pop that dialog box and it does that

408
00:15:10,560 --> 00:15:11,760
by sending a message to the

409
00:15:11,760 --> 00:15:14,160
authentication agent and it attaches a

410
00:15:14,160 --> 00:15:16,240
cookie to that message which the

411
00:15:16,240 --> 00:15:17,839
authentication agent is going to send

412
00:15:17,839 --> 00:15:20,160
back later

413
00:15:20,160 --> 00:15:22,560
now remember that the authentication

414
00:15:22,560 --> 00:15:24,880
agent is not running as a privileged

415
00:15:24,880 --> 00:15:28,480
process so how is pulkit going to trust

416
00:15:28,480 --> 00:15:30,320
that the password was checked properly

417
00:15:30,320 --> 00:15:32,399
when it gets that cookie back from the

418
00:15:32,399 --> 00:15:34,160
from the agent

419
00:15:34,160 --> 00:15:36,320
um the way that that's done is that

420
00:15:36,320 --> 00:15:39,519
there's this set uid program called pull

421
00:15:39,519 --> 00:15:41,360
agent helper1

422
00:15:41,360 --> 00:15:42,639
that does the actual checking of the

423
00:15:42,639 --> 00:15:45,839
password so that thing runs as root and

424
00:15:45,839 --> 00:15:47,279
polkit is only going to trust the

425
00:15:47,279 --> 00:15:49,279
response if it receives it from a

426
00:15:49,279 --> 00:15:51,920
route-owned

427
00:15:52,839 --> 00:15:57,199
process so the final step is that now

428
00:15:57,199 --> 00:15:58,800
that the password has been checked

429
00:15:58,800 --> 00:16:01,759
polkit sends back an ok reply and

430
00:16:01,759 --> 00:16:03,600
account service will now go ahead and

431
00:16:03,600 --> 00:16:06,959
create that new user account

432
00:16:07,199 --> 00:16:09,519
now one final thing that i want to point

433
00:16:09,519 --> 00:16:11,199
out here is that it can take quite a

434
00:16:11,199 --> 00:16:13,360
long time for account service to get

435
00:16:13,360 --> 00:16:15,440
that reply back from poll kit because

436
00:16:15,440 --> 00:16:17,199
you have to wait for the the user to

437
00:16:17,199 --> 00:16:19,759
type their password into that dialog box

438
00:16:19,759 --> 00:16:21,040
um

439
00:16:21,040 --> 00:16:23,040
and meanwhile the account service might

440
00:16:23,040 --> 00:16:24,720
have to deal with other requests that

441
00:16:24,720 --> 00:16:27,519
have come from other processes so one of

442
00:16:27,519 --> 00:16:30,880
the things that all dbus services and

443
00:16:30,880 --> 00:16:32,399
the libraries that they use have to be

444
00:16:32,399 --> 00:16:34,240
able to deal with is asynchronous

445
00:16:34,240 --> 00:16:35,440
communication

446
00:16:35,440 --> 00:16:39,199
and we'll see some of that later

447
00:16:41,040 --> 00:16:42,240
okay so

448
00:16:42,240 --> 00:16:43,920
let's have a look at

449
00:16:43,920 --> 00:16:46,320
polkit's config files

450
00:16:46,320 --> 00:16:48,560
these are again very important because a

451
00:16:48,560 --> 00:16:50,000
mistake in one of these files could

452
00:16:50,000 --> 00:16:51,519
completely undermine the security of the

453
00:16:51,519 --> 00:16:53,040
whole system

454
00:16:53,040 --> 00:16:56,000
now the um first of these directories is

455
00:16:56,000 --> 00:16:58,320
the standard location but the second is

456
00:16:58,320 --> 00:17:00,639
a little bit obscure

457
00:17:00,639 --> 00:17:02,880
in fact it took me quite a while to

458
00:17:02,880 --> 00:17:05,359
discover this second location and it's

459
00:17:05,359 --> 00:17:06,880
relevant to one of the vulnerabilities

460
00:17:06,880 --> 00:17:10,079
that i'm going to show you later

461
00:17:12,079 --> 00:17:14,640
okay this is an excerpt of the config

462
00:17:14,640 --> 00:17:18,319
file for the account service

463
00:17:18,319 --> 00:17:19,359
um

464
00:17:19,359 --> 00:17:21,520
and you can see that it defines these

465
00:17:21,520 --> 00:17:23,359
action ids

466
00:17:23,359 --> 00:17:26,559
um and then it defines who is permitted

467
00:17:26,559 --> 00:17:30,320
to do those actions um so changing your

468
00:17:30,320 --> 00:17:32,480
own user data that's just allowed with

469
00:17:32,480 --> 00:17:34,640
no further questions asked it says yes

470
00:17:34,640 --> 00:17:37,440
yes yes there for the permissions

471
00:17:37,440 --> 00:17:38,480
but

472
00:17:38,480 --> 00:17:40,720
user administration so that's things

473
00:17:40,720 --> 00:17:42,880
like creating or deleting accounts for

474
00:17:42,880 --> 00:17:44,960
that you need to have admin privileges

475
00:17:44,960 --> 00:17:48,640
so down there it says admin

476
00:17:50,559 --> 00:17:52,720
now this is one of those config files

477
00:17:52,720 --> 00:17:56,559
from that obscure second directory

478
00:17:57,760 --> 00:17:58,799
and

479
00:17:58,799 --> 00:18:01,360
this config file is granting special

480
00:18:01,360 --> 00:18:03,760
privileges to a user named gnome initial

481
00:18:03,760 --> 00:18:05,600
setup

482
00:18:05,600 --> 00:18:07,200
um and so you can see here that it that

483
00:18:07,200 --> 00:18:09,280
one of the things that is it's giving

484
00:18:09,280 --> 00:18:11,440
genome initial setup permission to do is

485
00:18:11,440 --> 00:18:13,679
anything relating to the account service

486
00:18:13,679 --> 00:18:16,480
so gnome initial setup is effectively

487
00:18:16,480 --> 00:18:17,919
root

488
00:18:17,919 --> 00:18:20,240
um so it turns out the reason why this

489
00:18:20,240 --> 00:18:22,320
exists is that when you first install

490
00:18:22,320 --> 00:18:24,080
gnome on a new computer you're presented

491
00:18:24,080 --> 00:18:25,840
with a series of dialog boxes that help

492
00:18:25,840 --> 00:18:27,039
you to create an account on that

493
00:18:27,039 --> 00:18:29,840
computer and those dialog boxes are

494
00:18:29,840 --> 00:18:33,200
running as the gnome initial setup user

495
00:18:33,200 --> 00:18:34,799
and you're going to see those dialog

496
00:18:34,799 --> 00:18:36,640
boxes in one of my vulnerability demos

497
00:18:36,640 --> 00:18:39,039
later

498
00:18:41,679 --> 00:18:43,600
now i want to show you some examples of

499
00:18:43,600 --> 00:18:45,280
what it looks like to program a debuff

500
00:18:45,280 --> 00:18:46,320
service

501
00:18:46,320 --> 00:18:48,240
typically if you're implementing a

502
00:18:48,240 --> 00:18:49,679
debuff service then you're going to use

503
00:18:49,679 --> 00:18:51,840
dbos library to do that and there are

504
00:18:51,840 --> 00:18:54,000
four main ones that i'm aware of

505
00:18:54,000 --> 00:18:55,440
i'm only going to show you examples from

506
00:18:55,440 --> 00:18:57,760
two of them though uh the python one and

507
00:18:57,760 --> 00:18:59,360
the systemd1

508
00:18:59,360 --> 00:19:01,600
so what do these libraries do well

509
00:19:01,600 --> 00:19:03,919
obviously they need to be able to parse

510
00:19:03,919 --> 00:19:06,480
and serialize dbos messages

511
00:19:06,480 --> 00:19:08,000
but they also take care of listening on

512
00:19:08,000 --> 00:19:10,559
that unix domain socket

513
00:19:10,559 --> 00:19:12,799
and dispatching the incoming message to

514
00:19:12,799 --> 00:19:15,200
the correct place

515
00:19:15,200 --> 00:19:16,559
and they usually have some way of

516
00:19:16,559 --> 00:19:18,480
helping you with the asynchronous

517
00:19:18,480 --> 00:19:20,000
communication problem that i mentioned a

518
00:19:20,000 --> 00:19:23,559
few slides back

519
00:19:29,600 --> 00:19:33,039
okay so this example is from the python3

520
00:19:33,039 --> 00:19:34,799
app daemon application which is a

521
00:19:34,799 --> 00:19:36,320
service that you can use to install

522
00:19:36,320 --> 00:19:37,440
software

523
00:19:37,440 --> 00:19:38,720
let me just make that a little bit

524
00:19:38,720 --> 00:19:41,039
bigger

525
00:19:41,200 --> 00:19:44,960
so this is the install packages method

526
00:19:44,960 --> 00:19:46,400
and you can see here that it's got this

527
00:19:46,400 --> 00:19:48,320
decorator on it which declares the dbos

528
00:19:48,320 --> 00:19:50,640
interface to this method

529
00:19:50,640 --> 00:19:53,120
now i'm not an expert python programmer

530
00:19:53,120 --> 00:19:55,200
so i've got to admit that i don't fully

531
00:19:55,200 --> 00:19:56,720
understand all of the magic that's

532
00:19:56,720 --> 00:20:00,080
happening here with this uh decorator

533
00:20:00,080 --> 00:20:02,640
but you notice that it has deferred in

534
00:20:02,640 --> 00:20:05,600
its name so this allows you to pause the

535
00:20:05,600 --> 00:20:07,039
code while you're waiting for one of

536
00:20:07,039 --> 00:20:10,720
those asynchronous calls to finish

537
00:20:13,039 --> 00:20:15,919
and you see that here this is the

538
00:20:15,919 --> 00:20:19,039
the code that app demon uses to call out

539
00:20:19,039 --> 00:20:20,480
to pulkit

540
00:20:20,480 --> 00:20:22,320
um

541
00:20:22,320 --> 00:20:24,720
i just made that bigger there

542
00:20:24,720 --> 00:20:27,600
so this is where it's calling polkit

543
00:20:27,600 --> 00:20:29,520
um and

544
00:20:29,520 --> 00:20:31,679
you can see that it's registering this

545
00:20:31,679 --> 00:20:34,559
callback function here

546
00:20:34,559 --> 00:20:35,440
and

547
00:20:35,440 --> 00:20:37,840
what happens there is that the this code

548
00:20:37,840 --> 00:20:40,159
will get paused until the reply comes in

549
00:20:40,159 --> 00:20:42,159
and then that callback will get will get

550
00:20:42,159 --> 00:20:43,919
called once the reply has arrived and

551
00:20:43,919 --> 00:20:46,000
that's when the deferred code

552
00:20:46,000 --> 00:20:49,640
starts running again

553
00:20:53,840 --> 00:20:55,840
okay so the second example is from

554
00:20:55,840 --> 00:20:57,679
system d login d and i'm just going to

555
00:20:57,679 --> 00:21:00,880
make that a little bit bigger again

556
00:21:01,280 --> 00:21:04,159
so this is uh c codes it's a bit lower

557
00:21:04,159 --> 00:21:06,159
level

558
00:21:06,159 --> 00:21:08,480
um and so for example you can see here

559
00:21:08,480 --> 00:21:09,919
that they're having to use this library

560
00:21:09,919 --> 00:21:11,440
function to read the contents of the

561
00:21:11,440 --> 00:21:13,440
message whereas in the python case that

562
00:21:13,440 --> 00:21:18,640
was handled by that that magic decorator

563
00:21:20,640 --> 00:21:22,960
now the way that systemd handles the

564
00:21:22,960 --> 00:21:24,880
asynchronous communication with pulkit

565
00:21:24,880 --> 00:21:27,120
is i think quite clever

566
00:21:27,120 --> 00:21:29,679
c doesn't have any built-in support for

567
00:21:29,679 --> 00:21:31,360
closures so doing something like that

568
00:21:31,360 --> 00:21:32,720
deferred stuff that we just saw in

569
00:21:32,720 --> 00:21:35,840
python would be really quite awkward so

570
00:21:35,840 --> 00:21:38,159
what system d does instead is basically

571
00:21:38,159 --> 00:21:41,919
just replay the whole message again

572
00:21:42,880 --> 00:21:44,480
so the first time that you call this

573
00:21:44,480 --> 00:21:46,880
verify async function it returns zero

574
00:21:46,880 --> 00:21:48,480
which means i'll call you again when i

575
00:21:48,480 --> 00:21:51,039
receive the reply and on the second run

576
00:21:51,039 --> 00:21:53,039
through

577
00:21:53,039 --> 00:21:55,200
um it will return either a positive

578
00:21:55,200 --> 00:21:56,799
number or a negative number depending on

579
00:21:56,799 --> 00:22:00,320
whether the request was authorized

580
00:22:02,640 --> 00:22:04,559
okay so let's talk about common bug

581
00:22:04,559 --> 00:22:06,000
categories that can happen in these

582
00:22:06,000 --> 00:22:07,840
debuff services

583
00:22:07,840 --> 00:22:09,120
now

584
00:22:09,120 --> 00:22:10,799
many of these services are written in c

585
00:22:10,799 --> 00:22:12,320
so you'd think that many of them would

586
00:22:12,320 --> 00:22:14,720
have memory corruption vulnerabilities

587
00:22:14,720 --> 00:22:17,520
but actually i've had zero success in

588
00:22:17,520 --> 00:22:18,880
finding any of those kinds of

589
00:22:18,880 --> 00:22:20,720
vulnerabilities

590
00:22:20,720 --> 00:22:22,880
obviously doesn't mean that they're not

591
00:22:22,880 --> 00:22:24,320
there it's just that i haven't been able

592
00:22:24,320 --> 00:22:26,880
to find them myself but i do think that

593
00:22:26,880 --> 00:22:28,080
maybe

594
00:22:28,080 --> 00:22:31,200
because most of these applications are

595
00:22:31,200 --> 00:22:32,400
using

596
00:22:32,400 --> 00:22:34,240
these dbos libraries to do the lower

597
00:22:34,240 --> 00:22:35,120
level

598
00:22:35,120 --> 00:22:37,520
message parsing stuff but maybe that's

599
00:22:37,520 --> 00:22:39,039
why

600
00:22:39,039 --> 00:22:40,799
i've not found many vulnerabilities

601
00:22:40,799 --> 00:22:42,080
because those libraries have been quite

602
00:22:42,080 --> 00:22:44,400
well tested

603
00:22:44,400 --> 00:22:46,799
what i have seen a lot of is privilege

604
00:22:46,799 --> 00:22:48,720
dropping mistakes

605
00:22:48,720 --> 00:22:50,960
so quite often a user will send one of

606
00:22:50,960 --> 00:22:53,120
these services a path to a file like for

607
00:22:53,120 --> 00:22:55,280
example when we changed the user's icon

608
00:22:55,280 --> 00:22:57,600
in that demo earlier so if the service

609
00:22:57,600 --> 00:22:59,039
is running as root then it needs to be

610
00:22:59,039 --> 00:23:00,799
careful not to use its root privileges

611
00:23:00,799 --> 00:23:02,880
to read that file otherwise that could

612
00:23:02,880 --> 00:23:04,240
potentially lead to an information

613
00:23:04,240 --> 00:23:06,080
disclosure vulnerability

614
00:23:06,080 --> 00:23:08,000
so instead the service will often change

615
00:23:08,000 --> 00:23:09,760
its uid so that it can only read the

616
00:23:09,760 --> 00:23:11,440
files that you can read

617
00:23:11,440 --> 00:23:12,960
but if it does that incorrectly then

618
00:23:12,960 --> 00:23:14,880
that can lead to a denial of service

619
00:23:14,880 --> 00:23:16,640
vulnerability

620
00:23:16,640 --> 00:23:18,400
and so i'm going to show you

621
00:23:18,400 --> 00:23:20,640
examples of examples of both of those

622
00:23:20,640 --> 00:23:23,440
problems in a second

623
00:23:23,440 --> 00:23:25,679
file system time of check time of use

624
00:23:25,679 --> 00:23:27,440
vulnerabilities or another similar kind

625
00:23:27,440 --> 00:23:29,200
of bug

626
00:23:29,200 --> 00:23:31,760
but the two most serious bugs that i've

627
00:23:31,760 --> 00:23:34,240
found have both been caused by bad error

628
00:23:34,240 --> 00:23:35,760
handling

629
00:23:35,760 --> 00:23:37,760
in both cases that led to local

630
00:23:37,760 --> 00:23:39,679
privilege escalation and those are the

631
00:23:39,679 --> 00:23:41,039
demos that i'm going to show you in a

632
00:23:41,039 --> 00:23:43,360
minute

633
00:23:43,440 --> 00:23:45,919
okay so this is an example of a file

634
00:23:45,919 --> 00:23:48,159
existence disclosure bug

635
00:23:48,159 --> 00:23:51,840
let me just make that a bit bigger

636
00:23:54,159 --> 00:23:57,600
so the bug here is that deb conf socket

637
00:23:57,600 --> 00:24:00,080
is a path that was sent by the user and

638
00:24:00,080 --> 00:24:02,320
apps daemon is using root privileges to

639
00:24:02,320 --> 00:24:05,760
check whether that file exists

640
00:24:05,760 --> 00:24:07,279
and the problem is that you can tell

641
00:24:07,279 --> 00:24:10,159
from the error message

642
00:24:10,159 --> 00:24:12,799
whether or not that file exists or not

643
00:24:12,799 --> 00:24:15,200
um now that's not a very serious

644
00:24:15,200 --> 00:24:16,960
vulnerability but sometimes bugs like

645
00:24:16,960 --> 00:24:18,480
this can be quite useful as part of an

646
00:24:18,480 --> 00:24:21,120
exploit chain

647
00:24:25,200 --> 00:24:27,679
now this is an example of a denial

648
00:24:27,679 --> 00:24:29,200
service vulnerability in the account

649
00:24:29,200 --> 00:24:32,159
service caused by bad privilege dropping

650
00:24:32,159 --> 00:24:35,279
i'll make that bigger again

651
00:24:39,039 --> 00:24:40,400
so you can see here that it's

652
00:24:40,400 --> 00:24:42,640
temporarily dropping privileges to read

653
00:24:42,640 --> 00:24:44,799
a file and then it regains them again

654
00:24:44,799 --> 00:24:47,600
afterwards

655
00:24:47,600 --> 00:24:49,840
but there's two problems here the first

656
00:24:49,840 --> 00:24:51,919
is that you could supply a malicious

657
00:24:51,919 --> 00:24:53,440
file that makes this loop run for a

658
00:24:53,440 --> 00:24:55,120
really long time

659
00:24:55,120 --> 00:24:57,200
and the second bug which you can't see

660
00:24:57,200 --> 00:24:59,360
in this code snippet is that they

661
00:24:59,360 --> 00:25:01,600
dropped the real user id as well as the

662
00:25:01,600 --> 00:25:03,919
effective user id which meant that the

663
00:25:03,919 --> 00:25:06,000
user could send signals to the surface

664
00:25:06,000 --> 00:25:08,960
to the service and so in the demo later

665
00:25:08,960 --> 00:25:11,279
i'm going to use that to send the kill

666
00:25:11,279 --> 00:25:13,679
signal to the account service and make

667
00:25:13,679 --> 00:25:16,159
it crash

668
00:25:20,880 --> 00:25:22,880
now this is the first of one of those

669
00:25:22,880 --> 00:25:25,679
more serious error handling bugs

670
00:25:25,679 --> 00:25:30,320
it's in gdm3 which is part of the gnome

671
00:25:30,320 --> 00:25:32,080
graphical environment

672
00:25:32,080 --> 00:25:35,439
let me make that bit bigger

673
00:25:39,440 --> 00:25:41,600
so

674
00:25:41,679 --> 00:25:46,159
what's happening here is that gdm3 is

675
00:25:46,159 --> 00:25:48,159
asking the account service how many user

676
00:25:48,159 --> 00:25:50,000
accounts there are on the system

677
00:25:50,000 --> 00:25:51,760
um and the reason it's doing that is

678
00:25:51,760 --> 00:25:53,840
because if there's zero user accounts

679
00:25:53,840 --> 00:25:55,120
and that means that this is the first

680
00:25:55,120 --> 00:25:56,640
time installation

681
00:25:56,640 --> 00:25:59,120
and it's going to trigger gnome initial

682
00:25:59,120 --> 00:26:00,159
setup

683
00:26:00,159 --> 00:26:01,760
which is going to allow you to create a

684
00:26:01,760 --> 00:26:05,760
new account with admin privileges

685
00:26:07,919 --> 00:26:10,080
so the bug here is that if the dbos

686
00:26:10,080 --> 00:26:12,480
debuss call fails

687
00:26:12,480 --> 00:26:14,720
um

688
00:26:16,400 --> 00:26:17,840
then it doesn't

689
00:26:17,840 --> 00:26:20,559
set the value of have existing user

690
00:26:20,559 --> 00:26:21,840
accounts

691
00:26:21,840 --> 00:26:24,000
and unfortunately unfortunately the

692
00:26:24,000 --> 00:26:26,880
default value of that field was false

693
00:26:26,880 --> 00:26:28,720
so in the demo i'm going to make that

694
00:26:28,720 --> 00:26:30,400
call fail by crashing the account

695
00:26:30,400 --> 00:26:31,840
service and that's going to lead to a

696
00:26:31,840 --> 00:26:34,720
bypass here

697
00:26:35,840 --> 00:26:37,279
okay it's

698
00:26:37,279 --> 00:26:41,120
time for the first vulnerability demo

699
00:26:41,600 --> 00:26:42,640
um

700
00:26:42,640 --> 00:26:43,520
now

701
00:26:43,520 --> 00:26:45,520
just to be clear these vulnerabilities

702
00:26:45,520 --> 00:26:48,559
are already fixed but in this vm i've

703
00:26:48,559 --> 00:26:50,559
installed the older versions of the

704
00:26:50,559 --> 00:26:52,559
software that had the vulnerabilities

705
00:26:52,559 --> 00:26:55,520
for the purposes of this demo

706
00:26:55,520 --> 00:26:56,720
now

707
00:26:56,720 --> 00:26:58,720
in this demo there's going to be a delay

708
00:26:58,720 --> 00:27:01,760
in a minute while it um

709
00:27:01,760 --> 00:27:04,159
does some stuff and so i'll what i'm

710
00:27:04,159 --> 00:27:05,200
going to do is i'm just going to type a

711
00:27:05,200 --> 00:27:07,039
bunch of commands quickly and then i'll

712
00:27:07,039 --> 00:27:11,120
explain what happened during that pause

713
00:27:11,360 --> 00:27:14,640
so i am going to create a sim link

714
00:27:14,640 --> 00:27:18,000
in my home directory

715
00:27:18,000 --> 00:27:20,480
and then i'm going to go to the system

716
00:27:20,480 --> 00:27:22,080
services

717
00:27:22,080 --> 00:27:24,000
settings dialog box and i'm going to

718
00:27:24,000 --> 00:27:26,799
change my

719
00:27:27,120 --> 00:27:28,480
language and that's going to trigger

720
00:27:28,480 --> 00:27:30,480
that loop that we saw

721
00:27:30,480 --> 00:27:32,320
earlier on

722
00:27:32,320 --> 00:27:34,320
and then i'm going to remove that file

723
00:27:34,320 --> 00:27:35,279
again

724
00:27:35,279 --> 00:27:38,559
and i'm going to cause the

725
00:27:38,559 --> 00:27:40,320
account service to crash and i need to

726
00:27:40,320 --> 00:27:41,840
quickly log out after issuing this

727
00:27:41,840 --> 00:27:44,320
command

728
00:27:47,600 --> 00:27:49,039
okay so hopefully that should trigger

729
00:27:49,039 --> 00:27:50,159
the bug

730
00:27:50,159 --> 00:27:52,320
um so let me just explain what was going

731
00:27:52,320 --> 00:27:54,320
on there so i created a sim link from a

732
00:27:54,320 --> 00:27:57,279
file called dot pam environment in my

733
00:27:57,279 --> 00:27:59,679
home directory to dev0 and that

734
00:27:59,679 --> 00:28:04,159
triggered that loop that we saw earlier

735
00:28:04,159 --> 00:28:05,760
then i

736
00:28:05,760 --> 00:28:07,760
changed language in the system settings

737
00:28:07,760 --> 00:28:10,080
and that actually was the debuff message

738
00:28:10,080 --> 00:28:10,880
that

739
00:28:10,880 --> 00:28:12,480
that triggered the account service run

740
00:28:12,480 --> 00:28:14,080
that loop

741
00:28:14,080 --> 00:28:15,520
um

742
00:28:15,520 --> 00:28:18,320
and then i removed the file so that i

743
00:28:18,320 --> 00:28:20,399
can log in again afterwards

744
00:28:20,399 --> 00:28:22,159
um

745
00:28:22,159 --> 00:28:23,600
and so then the next thing was that i

746
00:28:23,600 --> 00:28:25,520
needed to trigger the error handling

747
00:28:25,520 --> 00:28:29,120
code in gdm3 and that was uh

748
00:28:29,120 --> 00:28:31,360
triggered by logging out

749
00:28:31,360 --> 00:28:33,679
and just before i did that

750
00:28:33,679 --> 00:28:36,080
i used that no hop command to set a

751
00:28:36,080 --> 00:28:38,080
little timer so that the kill signal

752
00:28:38,080 --> 00:28:40,640
would be sent to account service shortly

753
00:28:40,640 --> 00:28:42,960
after i'd logged out so that

754
00:28:42,960 --> 00:28:45,039
created the timing so that

755
00:28:45,039 --> 00:28:48,000
when gdm3 sends its message

756
00:28:48,000 --> 00:28:49,919
the account service is still alive but

757
00:28:49,919 --> 00:28:52,399
then it um then it dies shortly after

758
00:28:52,399 --> 00:28:54,080
that

759
00:28:54,080 --> 00:28:55,039
um

760
00:28:55,039 --> 00:28:56,080
and so

761
00:28:56,080 --> 00:28:58,880
that then triggered the bug it thinks

762
00:28:58,880 --> 00:29:00,960
that we're in an initial setup now and

763
00:29:00,960 --> 00:29:02,559
so now it's running that gnome initial

764
00:29:02,559 --> 00:29:03,600
setup

765
00:29:03,600 --> 00:29:04,799
code which is going to allow me to

766
00:29:04,799 --> 00:29:06,960
create a new user account so just

767
00:29:06,960 --> 00:29:10,480
quickly click through these dialog boxes

768
00:29:10,480 --> 00:29:14,760
and enter a new username

769
00:29:26,159 --> 00:29:28,799
and so uh that has now created a new

770
00:29:28,799 --> 00:29:31,279
user account called indiana

771
00:29:31,279 --> 00:29:33,200
and we'll see in just a second that

772
00:29:33,200 --> 00:29:36,240
indiana is an admin user so if i do id

773
00:29:36,240 --> 00:29:37,760
here you can see that indiana is a

774
00:29:37,760 --> 00:29:41,120
member of the sudo group

775
00:29:41,120 --> 00:29:44,240
okay i'm going to just log back out and

776
00:29:44,240 --> 00:29:46,000
log back in as

777
00:29:46,000 --> 00:29:48,240
junior for the next demo

778
00:29:48,240 --> 00:29:51,600
okay so the second vulnerability was

779
00:29:51,600 --> 00:29:54,000
also caused by bad error handling but

780
00:29:54,000 --> 00:29:57,360
this vulnerability is in pole kit itself

781
00:29:57,360 --> 00:30:00,399
so this code that you see here

782
00:30:00,399 --> 00:30:02,880
is used when pull kit is checking

783
00:30:02,880 --> 00:30:04,480
whether or not you're already authorized

784
00:30:04,480 --> 00:30:06,399
to perform an action

785
00:30:06,399 --> 00:30:08,080
so what it does is it asks the dbos

786
00:30:08,080 --> 00:30:10,080
daemon for your credentials and if for

787
00:30:10,080 --> 00:30:12,080
example the dbos daemon says this user

788
00:30:12,080 --> 00:30:14,640
is root then it's going to immediately

789
00:30:14,640 --> 00:30:16,880
approve the the request

790
00:30:16,880 --> 00:30:20,320
okay so let's zoom in here

791
00:30:20,799 --> 00:30:23,919
um so this bug is very similar to the

792
00:30:23,919 --> 00:30:25,200
last one

793
00:30:25,200 --> 00:30:28,000
um so

794
00:30:29,279 --> 00:30:30,880
it uh

795
00:30:30,880 --> 00:30:34,000
it sends a message to the dbos demon and

796
00:30:34,000 --> 00:30:36,159
when it gets reply this callback

797
00:30:36,159 --> 00:30:38,559
function is called

798
00:30:38,559 --> 00:30:41,039
and what that callback function does is

799
00:30:41,039 --> 00:30:43,360
it sets the fields of the struct called

800
00:30:43,360 --> 00:30:45,760
data

801
00:30:47,360 --> 00:30:50,399
now normally it would set the

802
00:30:50,399 --> 00:30:53,120
retrieved uid and retrieved pid fields

803
00:30:53,120 --> 00:30:55,279
but when an error occurs it sets the

804
00:30:55,279 --> 00:30:58,720
court error field instead

805
00:31:00,080 --> 00:31:01,120
um

806
00:31:01,120 --> 00:31:02,720
but when that happens it still ends up

807
00:31:02,720 --> 00:31:06,799
returning true and because the uid and

808
00:31:06,799 --> 00:31:08,640
pit fields were never set they end up

809
00:31:08,640 --> 00:31:11,360
remaining zero and so it actually then

810
00:31:11,360 --> 00:31:15,600
looks like the caller was a root process

811
00:31:15,600 --> 00:31:17,279
so really the only question is how do we

812
00:31:17,279 --> 00:31:19,519
trigger an error here so that that code

813
00:31:19,519 --> 00:31:21,360
path will get taken

814
00:31:21,360 --> 00:31:22,880
and the answer is that you can do that

815
00:31:22,880 --> 00:31:25,200
by disconnecting from the dbos daemon

816
00:31:25,200 --> 00:31:27,120
while pulkit is halfway through

817
00:31:27,120 --> 00:31:29,039
processing this code

818
00:31:29,039 --> 00:31:33,399
so let's demo that now

819
00:31:34,960 --> 00:31:36,799
so

820
00:31:36,799 --> 00:31:38,480
i'm going to run the same command that i

821
00:31:38,480 --> 00:31:41,360
did before which is

822
00:31:41,360 --> 00:31:43,440
trying to create a user account called

823
00:31:43,440 --> 00:31:44,960
boris

824
00:31:44,960 --> 00:31:46,480
now that dialog box is going to be kind

825
00:31:46,480 --> 00:31:48,159
of annoying so it's going to be better

826
00:31:48,159 --> 00:31:50,159
if i run it from a text mode session so

827
00:31:50,159 --> 00:31:52,480
that we don't get the dialog box

828
00:31:52,480 --> 00:31:54,559
so if i run that there then it gets

829
00:31:54,559 --> 00:31:56,240
instantly denied

830
00:31:56,240 --> 00:31:57,840
and so what we're going to do now is

831
00:31:57,840 --> 00:31:59,200
we're just going to add this little bit

832
00:31:59,200 --> 00:32:02,799
on the end which uh kills it after it's

833
00:32:02,799 --> 00:32:03,679
um

834
00:32:03,679 --> 00:32:05,360
hopefully approximately halfway it's a

835
00:32:05,360 --> 00:32:07,919
little bit non-deterministic because

836
00:32:07,919 --> 00:32:10,320
um getting the timing right isn't um

837
00:32:10,320 --> 00:32:12,480
always

838
00:32:12,480 --> 00:32:15,360
timing isn't always the same and so

839
00:32:15,360 --> 00:32:17,678
um

840
00:32:18,080 --> 00:32:19,679
let's see yeah that didn't work the

841
00:32:19,679 --> 00:32:21,440
first time so usually we have to run it

842
00:32:21,440 --> 00:32:22,880
a few times to get it to work so i'm

843
00:32:22,880 --> 00:32:24,880
just going to

844
00:32:24,880 --> 00:32:27,200
do that and then see if

845
00:32:27,200 --> 00:32:29,200
yep boris has been created now and you

846
00:32:29,200 --> 00:32:31,760
can see that boris is a pseudo user but

847
00:32:31,760 --> 00:32:34,080
boris doesn't have a password yet so i'm

848
00:32:34,080 --> 00:32:35,440
gonna have to

849
00:32:35,440 --> 00:32:36,480
uh

850
00:32:36,480 --> 00:32:38,480
run this exploit a second time with a

851
00:32:38,480 --> 00:32:40,320
different dbos

852
00:32:40,320 --> 00:32:42,480
message in order to give boris a

853
00:32:42,480 --> 00:32:43,519
password

854
00:32:43,519 --> 00:32:45,519
so i'm going to use

855
00:32:45,519 --> 00:32:47,519
this open ssl

856
00:32:47,519 --> 00:32:49,840
command to convert the password into a

857
00:32:49,840 --> 00:32:51,600
hash

858
00:32:51,600 --> 00:32:53,440
and then i'm going to paste that hash

859
00:32:53,440 --> 00:32:54,840
into

860
00:32:54,840 --> 00:32:58,879
this command here

861
00:33:04,080 --> 00:33:05,679
and there

862
00:33:05,679 --> 00:33:08,320
and then i'm just going to run that

863
00:33:08,320 --> 00:33:10,640
a few times again hopefully that will

864
00:33:10,640 --> 00:33:12,159
have worked

865
00:33:12,159 --> 00:33:13,919
a few more for luck

866
00:33:13,919 --> 00:33:16,159
uh and let's see if we can log into the

867
00:33:16,159 --> 00:33:18,080
boris

868
00:33:18,080 --> 00:33:22,480
account and the password is i am

869
00:33:22,840 --> 00:33:25,200
invincible that worked and so you can

870
00:33:25,200 --> 00:33:26,240
see

871
00:33:26,240 --> 00:33:29,919
boris is a pseudo-user and

872
00:33:29,919 --> 00:33:32,159
that means that you can become root like

873
00:33:32,159 --> 00:33:34,399
this

874
00:33:34,880 --> 00:33:38,840
okay that was the demo

875
00:33:40,720 --> 00:33:44,240
so um that's about it uh in

876
00:33:44,240 --> 00:33:47,279
to conclude um

877
00:33:47,279 --> 00:33:49,279
i think that dbos is quite a

878
00:33:49,279 --> 00:33:51,600
well-designed ipc system

879
00:33:51,600 --> 00:33:54,080
but some parts of it are a bit complex

880
00:33:54,080 --> 00:33:58,000
and complexity can cause accidents

881
00:33:58,000 --> 00:34:00,240
the most common types of bugs that i've

882
00:34:00,240 --> 00:34:01,519
encountered have been privileged

883
00:34:01,519 --> 00:34:05,360
dropping mistakes and bad error handling

884
00:34:05,360 --> 00:34:06,720
privilege dropping mistakes have

885
00:34:06,720 --> 00:34:09,199
generally been relatively minor problems

886
00:34:09,199 --> 00:34:11,280
but the two error handling bugs that

887
00:34:11,280 --> 00:34:13,440
i've found have led to quite serious

888
00:34:13,440 --> 00:34:16,960
privilege escalation vulnerabilities

889
00:34:16,960 --> 00:34:19,210
thanks for watching

890
00:34:19,210 --> 00:34:28,820
[Music]

891
00:34:29,359 --> 00:34:31,440
you

