1
00:00:00,860 --> 00:00:08,559
[Music]

2
00:00:08,559 --> 00:00:11,360
hi everyone it is an honor for us to

3
00:00:11,360 --> 00:00:14,000
have the opportunity to speak here our

4
00:00:14,000 --> 00:00:16,400
topic is a deep dive into privacy

5
00:00:16,400 --> 00:00:20,320
dashboard of top android vendors

6
00:00:20,320 --> 00:00:22,480
first i want to introduce our team

7
00:00:22,480 --> 00:00:25,279
briefly we are security researcher at

8
00:00:25,279 --> 00:00:28,080
ies red team of bad dance

9
00:00:28,080 --> 00:00:30,560
and our research focused on privacy

10
00:00:30,560 --> 00:00:33,360
protection of apps and vendors

11
00:00:33,360 --> 00:00:36,000
we are also interested on application

12
00:00:36,000 --> 00:00:39,120
security including mobile security web

13
00:00:39,120 --> 00:00:43,959
security and cloud security

14
00:00:44,399 --> 00:00:46,960
this is our presidential outline

15
00:00:46,960 --> 00:00:49,440
first i will introduce how privacy

16
00:00:49,440 --> 00:00:50,800
dashboard works

17
00:00:50,800 --> 00:00:53,280
then i will introduce what is android

18
00:00:53,280 --> 00:00:54,719
app alls

19
00:00:54,719 --> 00:00:57,199
next my colleague will show the detail

20
00:00:57,199 --> 00:00:59,600
and some flaws of vendors privacy

21
00:00:59,600 --> 00:01:00,960
dashboards

22
00:01:00,960 --> 00:01:01,920
and

23
00:01:01,920 --> 00:01:05,438
expand our measurement and test method

24
00:01:05,438 --> 00:01:08,080
finally we will summarize our research

25
00:01:08,080 --> 00:01:12,200
as the conclusion part

26
00:01:12,479 --> 00:01:15,600
now let's begin from a privacy dashboard

27
00:01:15,600 --> 00:01:18,159
we will talk about these topics in these

28
00:01:18,159 --> 00:01:19,520
sections

29
00:01:19,520 --> 00:01:22,799
why do we need a privacy dashboard what

30
00:01:22,799 --> 00:01:25,600
capabilities does the privacy dashboard

31
00:01:25,600 --> 00:01:26,640
have

32
00:01:26,640 --> 00:01:29,119
what is the basic working mechanism of a

33
00:01:29,119 --> 00:01:32,240
privacy dashboard

34
00:01:32,479 --> 00:01:34,400
although android introduced runtime

35
00:01:34,400 --> 00:01:37,040
permission in api 23

36
00:01:37,040 --> 00:01:38,799
there are still some defects in the

37
00:01:38,799 --> 00:01:41,200
permissions management

38
00:01:41,200 --> 00:01:43,680
once the permissions are guaranteed

39
00:01:43,680 --> 00:01:46,640
they cannot be controlled

40
00:01:46,640 --> 00:01:49,280
now we come to these questions after

41
00:01:49,280 --> 00:01:51,680
users guarantee those permissions

42
00:01:51,680 --> 00:01:54,479
what can apps do to invade user's

43
00:01:54,479 --> 00:01:55,680
privacy

44
00:01:55,680 --> 00:01:58,000
what can operating system do

45
00:01:58,000 --> 00:02:00,479
to protect users privacy

46
00:02:00,479 --> 00:02:03,200
we have listed four categories of

47
00:02:03,200 --> 00:02:05,600
applications behaviors

48
00:02:05,600 --> 00:02:09,440
the first one is about datasets

49
00:02:09,440 --> 00:02:10,720
for instance

50
00:02:10,720 --> 00:02:12,959
an app can steer the contacts of the

51
00:02:12,959 --> 00:02:14,000
device

52
00:02:14,000 --> 00:02:14,800
or

53
00:02:14,800 --> 00:02:17,520
read and upload all of the users photos

54
00:02:17,520 --> 00:02:20,319
and videos in the background

55
00:02:20,319 --> 00:02:23,760
or they can read exact date without

56
00:02:23,760 --> 00:02:27,040
applying for additional permissions

57
00:02:27,040 --> 00:02:30,080
secondly an app may modify the user

58
00:02:30,080 --> 00:02:31,040
state

59
00:02:31,040 --> 00:02:33,519
for example you can write date into a

60
00:02:33,519 --> 00:02:36,560
calendar or clipboard for advertisement

61
00:02:36,560 --> 00:02:38,000
purpose

62
00:02:38,000 --> 00:02:40,640
what's more it can delete the target

63
00:02:40,640 --> 00:02:44,080
media files in users devices

64
00:02:44,080 --> 00:02:47,040
the third one is easy to understand

65
00:02:47,040 --> 00:02:50,640
some apps can secretly use a camera or

66
00:02:50,640 --> 00:02:53,599
microphone to monitor users

67
00:02:53,599 --> 00:02:56,080
many users have questioned this point in

68
00:02:56,080 --> 00:02:58,480
the past time

69
00:02:58,480 --> 00:03:01,280
and the last one an app can launch

70
00:03:01,280 --> 00:03:04,480
itself without user's intention

71
00:03:04,480 --> 00:03:07,840
or start the other apps as an alias

72
00:03:07,840 --> 00:03:10,400
usually we call them auto start and

73
00:03:10,400 --> 00:03:11,760
change start

74
00:03:11,760 --> 00:03:14,480
it may con consume the performance of

75
00:03:14,480 --> 00:03:16,400
the user's mobile phone in the

76
00:03:16,400 --> 00:03:18,959
background

77
00:03:18,959 --> 00:03:21,200
let's turn to operating systems

78
00:03:21,200 --> 00:03:23,920
what can operating systems do to protect

79
00:03:23,920 --> 00:03:25,599
users

80
00:03:25,599 --> 00:03:28,640
the basic way is to restrict the system

81
00:03:28,640 --> 00:03:30,799
functions or apis

82
00:03:30,799 --> 00:03:33,840
as we know android is constantly working

83
00:03:33,840 --> 00:03:36,000
hard on this path

84
00:03:36,000 --> 00:03:38,319
but it's not enough

85
00:03:38,319 --> 00:03:41,280
we need some microscope to let users

86
00:03:41,280 --> 00:03:43,760
know what apps do

87
00:03:43,760 --> 00:03:46,400
so we need a privacy dashboard

88
00:03:46,400 --> 00:03:49,360
by using a privacy dashboard it can let

89
00:03:49,360 --> 00:03:52,000
users know what apps do

90
00:03:52,000 --> 00:03:54,720
then they can identify the malicious

91
00:03:54,720 --> 00:03:58,080
apps by themselves

92
00:03:58,959 --> 00:04:01,519
privacy dashboard is a permission record

93
00:04:01,519 --> 00:04:04,640
center that allows users to see how apps

94
00:04:04,640 --> 00:04:06,159
are setting date

95
00:04:06,159 --> 00:04:09,120
they can have these features

96
00:04:09,120 --> 00:04:12,319
first a private stage ball can show the

97
00:04:12,319 --> 00:04:15,280
timeline of certain permissions used by

98
00:04:15,280 --> 00:04:16,798
different apps

99
00:04:16,798 --> 00:04:18,079
for example

100
00:04:18,079 --> 00:04:20,880
all of the apps that use camera will be

101
00:04:20,880 --> 00:04:23,120
recorded in the dashboard

102
00:04:23,120 --> 00:04:25,280
android 12 implements a private

103
00:04:25,280 --> 00:04:28,479
dashboard like this we will introduce it

104
00:04:28,479 --> 00:04:29,919
later

105
00:04:29,919 --> 00:04:32,639
second it can monitor sensitive behavior

106
00:04:32,639 --> 00:04:34,000
of an app

107
00:04:34,000 --> 00:04:36,400
since users can fully understand what

108
00:04:36,400 --> 00:04:38,639
data this app has accessed during the

109
00:04:38,639 --> 00:04:40,800
past time

110
00:04:40,800 --> 00:04:44,000
in this picture we can see that within

111
00:04:44,000 --> 00:04:46,080
one minute of launching

112
00:04:46,080 --> 00:04:47,759
the application has

113
00:04:47,759 --> 00:04:49,840
has taken photos

114
00:04:49,840 --> 00:04:52,960
read it read the clipboard and then

115
00:04:52,960 --> 00:04:54,960
locate the user

116
00:04:54,960 --> 00:04:57,199
there are many private dashboards can

117
00:04:57,199 --> 00:05:00,720
promote sensitive access in real time

118
00:05:00,720 --> 00:05:02,240
as we can see

119
00:05:02,240 --> 00:05:04,720
if the app reads the contacts

120
00:05:04,720 --> 00:05:07,280
our system can capture it and promote it

121
00:05:07,280 --> 00:05:11,159
on the top of the screen

122
00:05:12,960 --> 00:05:15,680
the latest android 12 also implements a

123
00:05:15,680 --> 00:05:18,720
basic privacy dashboard it monitors

124
00:05:18,720 --> 00:05:21,840
three sensitive permissions location

125
00:05:21,840 --> 00:05:22,960
microphone

126
00:05:22,960 --> 00:05:24,960
and camera

127
00:05:24,960 --> 00:05:27,120
this dashboard can show

128
00:05:27,120 --> 00:05:29,680
all of the apps as we assess these

129
00:05:29,680 --> 00:05:31,360
permissions

130
00:05:31,360 --> 00:05:33,840
by using the privacy dashboard

131
00:05:33,840 --> 00:05:35,680
of android 12

132
00:05:35,680 --> 00:05:38,320
we can see the timeline and frequency of

133
00:05:38,320 --> 00:05:40,160
these assesses

134
00:05:40,160 --> 00:05:44,960
and manage the related permission easily

135
00:05:46,720 --> 00:05:49,360
here is a diagram that shows how the

136
00:05:49,360 --> 00:05:52,080
privacy dashboard works

137
00:05:52,080 --> 00:05:53,520
in a word

138
00:05:53,520 --> 00:05:56,000
the app's action will trigger operation

139
00:05:56,000 --> 00:05:58,080
to note in add-ons

140
00:05:58,080 --> 00:05:58,960
then

141
00:05:58,960 --> 00:06:02,000
the dashboard reads data from the app of

142
00:06:02,000 --> 00:06:04,319
server

143
00:06:04,319 --> 00:06:05,680
for example

144
00:06:05,680 --> 00:06:08,880
fa wants to locate this device

145
00:06:08,880 --> 00:06:09,919
when it

146
00:06:09,919 --> 00:06:12,880
tries to get latitude and longitude it

147
00:06:12,880 --> 00:06:15,600
will trigger the op permission android

148
00:06:15,600 --> 00:06:17,120
phone location

149
00:06:17,120 --> 00:06:19,759
for fbos manager

150
00:06:19,759 --> 00:06:22,720
when users open the privacy dashboard it

151
00:06:22,720 --> 00:06:24,880
will request date from the app ops

152
00:06:24,880 --> 00:06:26,319
manager

153
00:06:26,319 --> 00:06:27,680
in this case

154
00:06:27,680 --> 00:06:30,479
it will request permission group of

155
00:06:30,479 --> 00:06:32,639
android location

156
00:06:32,639 --> 00:06:36,319
then it gets the usage date of all offs

157
00:06:36,319 --> 00:06:37,759
from this group

158
00:06:37,759 --> 00:06:41,840
including android phone locations

159
00:06:41,840 --> 00:06:44,479
by viewing f of state on a private

160
00:06:44,479 --> 00:06:45,680
dashboard

161
00:06:45,680 --> 00:06:48,880
users can learn what time does fa get

162
00:06:48,880 --> 00:06:50,319
location info

163
00:06:50,319 --> 00:06:52,639
how many times and how long does this

164
00:06:52,639 --> 00:06:56,680
app locate the users

165
00:07:04,639 --> 00:07:07,919
as we mentioned above adopts is used in

166
00:07:07,919 --> 00:07:10,880
privacy dashboard and it is the most

167
00:07:10,880 --> 00:07:12,880
important part in app operation

168
00:07:12,880 --> 00:07:14,400
management

169
00:07:14,400 --> 00:07:17,199
in this section we want to introduce and

170
00:07:17,199 --> 00:07:19,599
discuss it under android open source

171
00:07:19,599 --> 00:07:21,120
project

172
00:07:21,120 --> 00:07:24,240
the latest bridge of android 11

173
00:07:24,240 --> 00:07:27,280
because android is developing there may

174
00:07:27,280 --> 00:07:30,720
be some variation in detail

175
00:07:30,720 --> 00:07:32,800
let's come to this topic

176
00:07:32,800 --> 00:07:35,120
what is app orgs

177
00:07:35,120 --> 00:07:37,520
why do we spend a lot of time analyzing

178
00:07:37,520 --> 00:07:39,039
it

179
00:07:39,039 --> 00:07:41,120
through the research for the privacy

180
00:07:41,120 --> 00:07:43,440
protection mechanism from different

181
00:07:43,440 --> 00:07:44,800
rooms

182
00:07:44,800 --> 00:07:47,520
we found that app ops manager is the

183
00:07:47,520 --> 00:07:49,840
most important part

184
00:07:49,840 --> 00:07:52,720
thanks to the openness of android we can

185
00:07:52,720 --> 00:07:58,000
go deep into it with the help of lsp

186
00:07:58,000 --> 00:08:01,840
as you can see the image on your left

187
00:08:01,840 --> 00:08:05,759
app ops was added in android 4.3 api

188
00:08:05,759 --> 00:08:07,440
level 18

189
00:08:07,440 --> 00:08:09,759
which is which is designed for assess

190
00:08:09,759 --> 00:08:11,680
control and tracking

191
00:08:11,680 --> 00:08:14,800
it identify an app by uid and package

192
00:08:14,800 --> 00:08:15,840
name

193
00:08:15,840 --> 00:08:20,720
then check and record an app's operation

194
00:08:20,720 --> 00:08:23,599
many people may want to ask

195
00:08:23,599 --> 00:08:26,720
android already has permission control

196
00:08:26,720 --> 00:08:29,199
such as runtime permissions

197
00:08:29,199 --> 00:08:31,120
we can view it every day

198
00:08:31,120 --> 00:08:33,279
why do we need applause

199
00:08:33,279 --> 00:08:35,599
in my opinion first

200
00:08:35,599 --> 00:08:38,880
app ops added in android before runtime

201
00:08:38,880 --> 00:08:42,000
permissions i guess maybe google once

202
00:08:42,000 --> 00:08:43,200
thought about

203
00:08:43,200 --> 00:08:46,560
replacing permission with it gradually

204
00:08:46,560 --> 00:08:49,120
second there may there are many

205
00:08:49,120 --> 00:08:51,760
different difference between operations

206
00:08:51,760 --> 00:08:53,440
and permissions

207
00:08:53,440 --> 00:08:55,920
while operations can be interpreted as a

208
00:08:55,920 --> 00:08:57,200
behavior

209
00:08:57,200 --> 00:09:00,080
for practical reasons operations and

210
00:09:00,080 --> 00:09:01,839
permissions are not one-to-one

211
00:09:01,839 --> 00:09:04,000
correspondence

212
00:09:04,000 --> 00:09:06,640
there are 53 permissions in android

213
00:09:06,640 --> 00:09:09,160
systems but

214
00:09:09,160 --> 00:09:13,279
105 operations in apples

215
00:09:13,279 --> 00:09:15,760
there are 52 operations

216
00:09:15,760 --> 00:09:17,920
that do not have corresponding

217
00:09:17,920 --> 00:09:19,360
permissions

218
00:09:19,360 --> 00:09:22,320
such as write or read to clipboard and

219
00:09:22,320 --> 00:09:23,680
so on

220
00:09:23,680 --> 00:09:24,720
but

221
00:09:24,720 --> 00:09:28,080
is above completely independent from

222
00:09:28,080 --> 00:09:32,080
permissions in android behavior control

223
00:09:32,080 --> 00:09:35,880
the answer is no

224
00:09:36,240 --> 00:09:38,959
let's take a look at the workflow behind

225
00:09:38,959 --> 00:09:40,720
android systems

226
00:09:40,720 --> 00:09:43,680
when a system action is triggered

227
00:09:43,680 --> 00:09:46,720
android use bender as the main ipc

228
00:09:46,720 --> 00:09:48,320
method

229
00:09:48,320 --> 00:09:50,640
when the system service is invoked by

230
00:09:50,640 --> 00:09:52,240
the app

231
00:09:52,240 --> 00:09:54,640
the proxy of the servers is usually

232
00:09:54,640 --> 00:09:56,959
invoking state

233
00:09:56,959 --> 00:09:58,480
for example

234
00:09:58,480 --> 00:10:01,040
clipboard manager correspondence to

235
00:10:01,040 --> 00:10:03,040
clipboard servers

236
00:10:03,040 --> 00:10:05,760
wi-fi manager correspondence to wi-fi

237
00:10:05,760 --> 00:10:07,519
service implement

238
00:10:07,519 --> 00:10:11,040
apps ops manager correspondence to apos

239
00:10:11,040 --> 00:10:12,560
servers

240
00:10:12,560 --> 00:10:14,560
during development

241
00:10:14,560 --> 00:10:16,480
an app uses

242
00:10:16,480 --> 00:10:18,480
guest system servers to get the

243
00:10:18,480 --> 00:10:20,720
corresponding manager

244
00:10:20,720 --> 00:10:23,760
and indirectly call the api of the

245
00:10:23,760 --> 00:10:26,560
crypto correspondence servers

246
00:10:26,560 --> 00:10:29,680
app or will be called by service api in

247
00:10:29,680 --> 00:10:32,480
the most cases

248
00:10:32,480 --> 00:10:36,160
according to the dimension of usage time

249
00:10:36,160 --> 00:10:39,519
f ops operation can be divided into two

250
00:10:39,519 --> 00:10:40,800
categories

251
00:10:40,800 --> 00:10:42,880
single time behavior and continuous

252
00:10:42,880 --> 00:10:44,560
behavior

253
00:10:44,560 --> 00:10:47,760
for example reading contact info is a

254
00:10:47,760 --> 00:10:49,920
single time behavior

255
00:10:49,920 --> 00:10:52,560
well using a camera or audio is a

256
00:10:52,560 --> 00:10:55,120
continuous behavior

257
00:10:55,120 --> 00:10:59,279
therefore for the two types of behaviors

258
00:10:59,279 --> 00:11:03,360
f f-ops manager has note op series apis

259
00:11:03,360 --> 00:11:07,040
and start-op series apis

260
00:11:07,040 --> 00:11:10,079
which correspondence to node operations

261
00:11:10,079 --> 00:11:13,920
and start operation series apis of f of

262
00:11:13,920 --> 00:11:14,680
servers

263
00:11:14,680 --> 00:11:16,160
[Music]

264
00:11:16,160 --> 00:11:17,839
in the most cases

265
00:11:17,839 --> 00:11:20,480
system servers will call the former to

266
00:11:20,480 --> 00:11:23,040
check and record permissions

267
00:11:23,040 --> 00:11:25,760
but there are exceptions

268
00:11:25,760 --> 00:11:29,040
for example activity manager servers may

269
00:11:29,040 --> 00:11:30,880
directly call

270
00:11:30,880 --> 00:11:35,120
app of servers node operations

271
00:11:38,320 --> 00:11:39,519
so

272
00:11:39,519 --> 00:11:41,600
how can we get the data recorded by

273
00:11:41,600 --> 00:11:43,120
app.orgs

274
00:11:43,120 --> 00:11:46,720
as the server starts with the systems

275
00:11:46,720 --> 00:11:50,160
app-ops implements its own dump method

276
00:11:50,160 --> 00:11:52,880
therefore we can use downsides

277
00:11:52,880 --> 00:11:56,800
above or apple stamp commands to get

278
00:11:56,800 --> 00:11:59,360
f-ops record date

279
00:11:59,360 --> 00:12:02,079
as you can see the image on the right we

280
00:12:02,079 --> 00:12:04,639
can get detailed update of the target

281
00:12:04,639 --> 00:12:07,279
api of the target app

282
00:12:07,279 --> 00:12:08,560
as we can see

283
00:12:08,560 --> 00:12:09,279
the

284
00:12:09,279 --> 00:12:12,480
date identifies a certain app by package

285
00:12:12,480 --> 00:12:13,440
name

286
00:12:13,440 --> 00:12:16,000
in the record of the target app

287
00:12:16,000 --> 00:12:18,800
detail is displayed with ob stream as

288
00:12:18,800 --> 00:12:22,079
the basic item such as camera

289
00:12:22,079 --> 00:12:24,240
with clipboard

290
00:12:24,240 --> 00:12:27,200
the in the op entry we can see the

291
00:12:27,200 --> 00:12:31,200
current setting sets this statistics

292
00:12:31,200 --> 00:12:35,200
for this op like allow default and

293
00:12:35,200 --> 00:12:37,360
ignore

294
00:12:37,360 --> 00:12:40,079
next is the date we are most concerned

295
00:12:40,079 --> 00:12:41,040
about

296
00:12:41,040 --> 00:12:43,040
assess and reject time

297
00:12:43,040 --> 00:12:45,760
which represents the last time the app

298
00:12:45,760 --> 00:12:49,120
tried to assess this list permission

299
00:12:49,120 --> 00:12:52,079
the following is the other information

300
00:12:52,079 --> 00:12:55,600
including background or foreground and

301
00:12:55,600 --> 00:12:58,160
whether it is an operation performed by

302
00:12:58,160 --> 00:13:00,720
a proxy application

303
00:13:00,720 --> 00:13:03,440
for long-term permission operations such

304
00:13:03,440 --> 00:13:06,399
as camera it will compare a

305
00:13:06,399 --> 00:13:08,560
duration time

306
00:13:08,560 --> 00:13:10,720
through this information

307
00:13:10,720 --> 00:13:13,120
the sensitive behavior of an app is

308
00:13:13,120 --> 00:13:16,480
fully visible to us

309
00:13:18,959 --> 00:13:21,760
but the date from f of stamp is still

310
00:13:21,760 --> 00:13:23,200
not enough

311
00:13:23,200 --> 00:13:25,839
as a security tech researcher

312
00:13:25,839 --> 00:13:28,639
we are more interested in the reason why

313
00:13:28,639 --> 00:13:32,480
the app generates a certain operations

314
00:13:32,480 --> 00:13:36,639
we need to locate the stem code

315
00:13:37,839 --> 00:13:40,160
android 11 introduced state assess

316
00:13:40,160 --> 00:13:41,279
auditing

317
00:13:41,279 --> 00:13:44,079
which provides functions to solve these

318
00:13:44,079 --> 00:13:45,440
problems

319
00:13:45,440 --> 00:13:47,279
by tracking the call stack in the

320
00:13:47,279 --> 00:13:50,480
runtime it can help developers to locate

321
00:13:50,480 --> 00:13:51,600
the code

322
00:13:51,600 --> 00:13:55,839
that is excuse these operations

323
00:13:55,839 --> 00:13:59,279
the official method is to set the own op

324
00:13:59,279 --> 00:14:02,880
node callback of f-offs manager

325
00:14:02,880 --> 00:14:05,760
override the target method such as on

326
00:14:05,760 --> 00:14:07,120
node

327
00:14:07,120 --> 00:14:10,399
and i and define a method to print core

328
00:14:10,399 --> 00:14:11,519
stock

329
00:14:11,519 --> 00:14:12,720
such as

330
00:14:12,720 --> 00:14:15,680
log private data statuses

331
00:14:15,680 --> 00:14:18,320
the official recommendation is to set

332
00:14:18,320 --> 00:14:20,639
this at least at the beginning of each

333
00:14:20,639 --> 00:14:21,839
activity

334
00:14:21,839 --> 00:14:24,320
but through the understanding of the

335
00:14:24,320 --> 00:14:27,839
start startup process of the android app

336
00:14:27,839 --> 00:14:30,399
there is an earlier position

337
00:14:30,399 --> 00:14:35,040
attach base contacts of the applications

338
00:14:35,040 --> 00:14:38,240
if you are an app developer you can use

339
00:14:38,240 --> 00:14:42,320
above method but as a security tester

340
00:14:42,320 --> 00:14:44,800
we also encounter apps that have been

341
00:14:44,800 --> 00:14:47,279
complied and packaged

342
00:14:47,279 --> 00:14:49,920
the app release version usually do not

343
00:14:49,920 --> 00:14:51,839
use this state asset

344
00:14:51,839 --> 00:14:54,959
auditing apis

345
00:14:54,959 --> 00:14:57,839
we provide the following ways to assist

346
00:14:57,839 --> 00:15:01,920
security tester to analyze an app

347
00:15:01,920 --> 00:15:06,800
the first method is static injection

348
00:15:06,800 --> 00:15:08,240
for example

349
00:15:08,240 --> 00:15:12,000
we can decomply a target apk to modify

350
00:15:12,000 --> 00:15:13,279
the code

351
00:15:13,279 --> 00:15:14,320
inject

352
00:15:14,320 --> 00:15:17,120
op node callback related classes and

353
00:15:17,120 --> 00:15:18,399
method

354
00:15:18,399 --> 00:15:21,600
then repackage and sign it

355
00:15:21,600 --> 00:15:25,199
the second method is dynamic injection

356
00:15:25,199 --> 00:15:28,240
we can dynamically inject own op node

357
00:15:28,240 --> 00:15:30,480
callback related objects

358
00:15:30,480 --> 00:15:32,160
into the apps of

359
00:15:32,160 --> 00:15:34,959
into the apps process

360
00:15:34,959 --> 00:15:37,120
in this way the sensitive trace

361
00:15:37,120 --> 00:15:39,440
information can be obtained from the

362
00:15:39,440 --> 00:15:41,519
client side

363
00:15:41,519 --> 00:15:43,920
of course we can also do the injection

364
00:15:43,920 --> 00:15:46,959
on the server side we can inject code

365
00:15:46,959 --> 00:15:50,079
into server into system server

366
00:15:50,079 --> 00:15:52,079
and hook apps up

367
00:15:52,079 --> 00:15:55,600
system server operation node operation

368
00:15:55,600 --> 00:15:58,320
apis to monitor apps

369
00:15:58,320 --> 00:16:01,440
op asset assess operation

370
00:16:01,440 --> 00:16:05,920
since system server is a system process

371
00:16:05,920 --> 00:16:07,920
this is actually equivalent to

372
00:16:07,920 --> 00:16:11,920
indirectly modifying the room

373
00:16:11,920 --> 00:16:13,120
think about

374
00:16:13,120 --> 00:16:16,079
the vendors that can customize

375
00:16:16,079 --> 00:16:18,560
rooms based on android

376
00:16:18,560 --> 00:16:21,519
do they use app ups to monitor privacy

377
00:16:21,519 --> 00:16:23,199
behavior

378
00:16:23,199 --> 00:16:25,360
the answer is yes

379
00:16:25,360 --> 00:16:27,519
next we will introduce some private

380
00:16:27,519 --> 00:16:29,920
dashboards which are implemented by

381
00:16:29,920 --> 00:16:32,079
different vendors

382
00:16:32,079 --> 00:16:33,600
using those

383
00:16:33,600 --> 00:16:36,079
dashboard is not only suitable for

384
00:16:36,079 --> 00:16:39,279
security tester but also allows normal

385
00:16:39,279 --> 00:16:41,759
users to better understand the sensitive

386
00:16:41,759 --> 00:16:43,440
behavior of the

387
00:16:43,440 --> 00:16:46,480
of the applications

388
00:16:46,480 --> 00:16:51,120
i will now hand it off to my partner

389
00:16:51,120 --> 00:16:53,759
next i will introduce

390
00:16:53,759 --> 00:16:57,040
our vendor part

391
00:17:02,160 --> 00:17:04,880
we take a deep research on file vendors

392
00:17:04,880 --> 00:17:08,160
privacy dashboards and found they are

393
00:17:08,160 --> 00:17:09,359
different

394
00:17:09,359 --> 00:17:12,958
they use different technique

395
00:17:13,359 --> 00:17:14,799
first wonder

396
00:17:14,799 --> 00:17:18,640
some vendors extract frost record and

397
00:17:18,640 --> 00:17:20,640
show them directly

398
00:17:20,640 --> 00:17:23,760
include the permission state like accept

399
00:17:23,760 --> 00:17:24,559
or

400
00:17:24,559 --> 00:17:27,199
reject also access time

401
00:17:27,199 --> 00:17:29,440
background or foreground

402
00:17:29,440 --> 00:17:33,360
and the duration time of

403
00:17:33,360 --> 00:17:36,799
obtain sensitive data

404
00:17:37,280 --> 00:17:40,400
some vendor modified f of source code

405
00:17:40,400 --> 00:17:41,760
for example

406
00:17:41,760 --> 00:17:44,960
add some self-design of code to monitor

407
00:17:44,960 --> 00:17:47,679
dangerous behavior

408
00:17:47,679 --> 00:17:49,280
and

409
00:17:49,280 --> 00:17:51,520
some extra code in

410
00:17:51,520 --> 00:17:56,400
node option or node proxy option

411
00:17:59,520 --> 00:18:01,919
little vendors choose to implement

412
00:18:01,919 --> 00:18:05,200
custom dashboard fully

413
00:18:05,200 --> 00:18:11,280
such as empty or temporary privacy data

414
00:18:12,080 --> 00:18:15,039
besides the some

415
00:18:15,039 --> 00:18:16,480
vendors

416
00:18:16,480 --> 00:18:18,720
protect airworms to

417
00:18:18,720 --> 00:18:22,400
avoid the malicious delete

418
00:18:27,280 --> 00:18:30,000
this is an overview of this windows

419
00:18:30,000 --> 00:18:31,360
dashboard

420
00:18:31,360 --> 00:18:34,720
we classify four dimensions

421
00:18:34,720 --> 00:18:37,919
from data creation background behavior

422
00:18:37,919 --> 00:18:39,840
frequency and

423
00:18:39,840 --> 00:18:42,320
other custom protections

424
00:18:42,320 --> 00:18:45,679
include 5 vendors

425
00:18:45,679 --> 00:18:48,160
from table we can see that

426
00:18:48,160 --> 00:18:51,200
most of vendors support basic data

427
00:18:51,200 --> 00:18:52,799
monitor like

428
00:18:52,799 --> 00:18:53,840
camera

429
00:18:53,840 --> 00:18:56,720
microphone contacts

430
00:18:56,720 --> 00:19:00,480
but none of them support the fully

431
00:19:00,480 --> 00:19:03,360
for example partially support or

432
00:19:03,360 --> 00:19:06,320
inactive inaccurate

433
00:19:06,320 --> 00:19:11,039
so we marked it as tbi

434
00:19:11,039 --> 00:19:14,400
for background behavior and frequency

435
00:19:14,400 --> 00:19:17,840
only later vendor can support well

436
00:19:17,840 --> 00:19:21,039
for some custom functions like

437
00:19:21,039 --> 00:19:23,840
abram protection

438
00:19:23,840 --> 00:19:27,200
most of them are inaccurate

439
00:19:27,200 --> 00:19:31,120
we will discuss this later

440
00:19:33,520 --> 00:19:35,760
the first case is

441
00:19:35,760 --> 00:19:39,520
an app get network signal by call get

442
00:19:39,520 --> 00:19:41,200
connection info

443
00:19:41,200 --> 00:19:44,880
you can see that the left picture

444
00:19:44,880 --> 00:19:47,520
but when there's this dashboard will

445
00:19:47,520 --> 00:19:49,280
report

446
00:19:49,280 --> 00:19:51,679
get location

447
00:19:51,679 --> 00:19:55,200
we can see the picture on the right

448
00:19:55,200 --> 00:19:58,080
so that's very ridiculous

449
00:19:58,080 --> 00:20:00,640
network signal has nothing to do with

450
00:20:00,640 --> 00:20:02,080
the location

451
00:20:02,080 --> 00:20:07,840
so this is absolutely a force alarm

452
00:20:11,360 --> 00:20:14,480
we take a further analyze on this case

453
00:20:14,480 --> 00:20:15,840
and

454
00:20:15,840 --> 00:20:18,400
we extract all the cost deck of get

455
00:20:18,400 --> 00:20:22,080
connection info so we found that f offs

456
00:20:22,080 --> 00:20:24,880
will take category info

457
00:20:24,880 --> 00:20:28,960
as a file location option

458
00:20:29,840 --> 00:20:32,240
so it is the same

459
00:20:32,240 --> 00:20:36,320
implementation in aosp

460
00:20:36,799 --> 00:20:40,080
this monitor strategy is over denied we

461
00:20:40,080 --> 00:20:42,320
think

462
00:20:42,320 --> 00:20:46,880
because get ssid or get bssd should be

463
00:20:46,880 --> 00:20:48,640
considered as

464
00:20:48,640 --> 00:20:54,480
location related api but not get ss rssi

465
00:20:54,480 --> 00:20:57,520
so we think that vendors should

466
00:20:57,520 --> 00:20:58,400
watch

467
00:20:58,400 --> 00:21:01,520
the get ssid api

468
00:21:01,520 --> 00:21:03,840
not their father mode

469
00:21:03,840 --> 00:21:07,039
get connection info

470
00:21:09,200 --> 00:21:12,480
this is the first case

471
00:21:14,159 --> 00:21:16,960
the second case is that app release

472
00:21:16,960 --> 00:21:19,039
camera normally

473
00:21:19,039 --> 00:21:23,280
before they switch into background

474
00:21:23,679 --> 00:21:26,880
we can see the left picture

475
00:21:26,880 --> 00:21:31,840
the app just called camera release

476
00:21:35,760 --> 00:21:37,280
but when there is

477
00:21:37,280 --> 00:21:38,720
when there a

478
00:21:38,720 --> 00:21:41,919
dashboard will report in the background

479
00:21:41,919 --> 00:21:44,720
take photos or videos

480
00:21:44,720 --> 00:21:48,559
we can see the right pictures

481
00:21:49,440 --> 00:21:51,919
the only reason is that

482
00:21:51,919 --> 00:21:56,080
user set navigation method as gesture

483
00:21:56,080 --> 00:21:59,840
we can see the picture in the middle

484
00:22:00,159 --> 00:22:02,960
so when you figure slide from bottle

485
00:22:02,960 --> 00:22:04,640
bottom to top

486
00:22:04,640 --> 00:22:07,919
and to push your app into background

487
00:22:07,919 --> 00:22:10,640
your app will be reported as

488
00:22:10,640 --> 00:22:12,180
background camera obtained

489
00:22:12,180 --> 00:22:15,219
[Music]

490
00:22:19,280 --> 00:22:24,240
we also use dumpsys to extract f4 slots

491
00:22:24,240 --> 00:22:27,440
and found that there is actually a

492
00:22:27,440 --> 00:22:29,039
record shows

493
00:22:29,039 --> 00:22:32,320
background camera usage

494
00:22:32,320 --> 00:22:34,400
we can see from the picture

495
00:22:34,400 --> 00:22:38,720
the bgs is short for background shelf

496
00:22:38,720 --> 00:22:44,080
and the duration time is 60 milliseconds

497
00:22:44,080 --> 00:22:47,919
so this time is a general gap even can't

498
00:22:47,919 --> 00:22:51,520
be used to take a photo

499
00:22:51,520 --> 00:22:55,480
so it's very ridiculous

500
00:22:57,520 --> 00:23:01,120
however under a extract above records

501
00:23:01,120 --> 00:23:02,880
and show them

502
00:23:02,880 --> 00:23:05,039
all the results in

503
00:23:05,039 --> 00:23:08,080
dashboard purely

504
00:23:08,080 --> 00:23:12,000
which give a false report

505
00:23:15,520 --> 00:23:18,559
so why just generation led to background

506
00:23:18,559 --> 00:23:20,159
camera

507
00:23:20,159 --> 00:23:24,240
we also take a deep analyze

508
00:23:26,000 --> 00:23:28,080
first we found that

509
00:23:28,080 --> 00:23:31,039
android defined uid state

510
00:23:31,039 --> 00:23:36,159
to identify foreground and background

511
00:23:36,159 --> 00:23:39,520
if app didn't release camera before uid

512
00:23:39,520 --> 00:23:42,000
state change time

513
00:23:42,000 --> 00:23:46,799
it will be regarded as background obtain

514
00:23:48,240 --> 00:23:51,120
we conducted some tests to calculate the

515
00:23:51,120 --> 00:23:52,240
time gap

516
00:23:52,240 --> 00:23:55,120
between onpost and

517
00:23:55,120 --> 00:23:58,400
on uid state change

518
00:23:58,400 --> 00:24:01,200
from table we can see that

519
00:24:01,200 --> 00:24:05,440
gesture navigation is around 300

520
00:24:05,440 --> 00:24:08,400
million seconds

521
00:24:08,400 --> 00:24:10,279
but three button is

522
00:24:10,279 --> 00:24:14,159
500 milliseconds

523
00:24:15,120 --> 00:24:16,720
so

524
00:24:16,720 --> 00:24:19,360
for example

525
00:24:19,360 --> 00:24:21,279
if camera release

526
00:24:21,279 --> 00:24:24,799
cost 400 milliseconds in the condition

527
00:24:24,799 --> 00:24:27,039
of gesture navigation

528
00:24:27,039 --> 00:24:29,679
at that time uid states become

529
00:24:29,679 --> 00:24:30,799
background

530
00:24:30,799 --> 00:24:33,919
in 300 milliseconds

531
00:24:33,919 --> 00:24:38,559
so it caused to a background obtain

532
00:24:39,120 --> 00:24:42,640
we think because there is more ui factor

533
00:24:42,640 --> 00:24:43,440
in

534
00:24:43,440 --> 00:24:44,640
gesture

535
00:24:44,640 --> 00:24:46,640
navigation

536
00:24:46,640 --> 00:24:49,279
compared with three buttons

537
00:24:49,279 --> 00:24:50,640
so

538
00:24:50,640 --> 00:24:53,600
it may cause false alarms about

539
00:24:53,600 --> 00:24:56,719
background behaviors

540
00:24:57,200 --> 00:25:01,799
this is the second case

541
00:25:09,200 --> 00:25:11,200
the third case is that

542
00:25:11,200 --> 00:25:12,000
app

543
00:25:12,000 --> 00:25:15,039
may bypass album protection to delete

544
00:25:15,039 --> 00:25:17,120
pictures

545
00:25:17,120 --> 00:25:20,240
when app try to delete a photo

546
00:25:20,240 --> 00:25:22,799
many vendors will prevent the delete

547
00:25:22,799 --> 00:25:26,880
option to protect users album

548
00:25:26,880 --> 00:25:29,760
you can see that the system will pop up

549
00:25:29,760 --> 00:25:31,039
and learn

550
00:25:31,039 --> 00:25:31,919
to

551
00:25:31,919 --> 00:25:35,200
notify users app behavior and

552
00:25:35,200 --> 00:25:37,440
intercept files

553
00:25:37,440 --> 00:25:41,640
move to a backup folders

554
00:25:42,000 --> 00:25:42,880
so

555
00:25:42,880 --> 00:25:45,200
we can see there are four vendors

556
00:25:45,200 --> 00:25:47,440
picture and

557
00:25:47,440 --> 00:25:49,360
if the malicious app

558
00:25:49,360 --> 00:25:51,279
try to delete photos

559
00:25:51,279 --> 00:25:52,720
so

560
00:25:52,720 --> 00:25:55,200
the user will receive a

561
00:25:55,200 --> 00:25:58,080
notification about

562
00:25:58,080 --> 00:26:01,679
to prevent the delete and move them to

563
00:26:01,679 --> 00:26:05,559
recycle folders

564
00:26:18,960 --> 00:26:20,640
however vendors

565
00:26:20,640 --> 00:26:24,240
take different ways to protect albums

566
00:26:24,240 --> 00:26:25,600
for example

567
00:26:25,600 --> 00:26:28,640
wunderb rewrites the delete function of

568
00:26:28,640 --> 00:26:31,360
media provider

569
00:26:31,360 --> 00:26:34,799
but malicious app can delete files

570
00:26:34,799 --> 00:26:38,360
with other apis

571
00:26:38,559 --> 00:26:42,440
for example java.io.5.delete

572
00:26:45,919 --> 00:26:50,159
vendor e check dcim path and hook the

573
00:26:50,159 --> 00:26:51,760
delete

574
00:26:51,760 --> 00:26:55,279
to identify to identity

575
00:26:55,279 --> 00:26:58,240
malicious behavior

576
00:26:58,240 --> 00:27:01,679
but ignore the native delays api

577
00:27:01,679 --> 00:27:03,600
such as

578
00:27:03,600 --> 00:27:07,320
libsy remove

579
00:27:07,440 --> 00:27:10,240
winter e and winter c monitor kernel

580
00:27:10,240 --> 00:27:11,679
unlink

581
00:27:11,679 --> 00:27:15,600
it seems complete for a delete option

582
00:27:15,600 --> 00:27:18,840
but x ignore the rename

583
00:27:18,840 --> 00:27:22,320
function so a malicious app can move

584
00:27:22,320 --> 00:27:23,679
photo files

585
00:27:23,679 --> 00:27:25,600
into other paths

586
00:27:25,600 --> 00:27:27,600
then delete it

587
00:27:27,600 --> 00:27:28,960
so that

588
00:27:28,960 --> 00:27:33,080
bypass renders protection

589
00:27:42,159 --> 00:27:46,000
so next we will describe how to extract

590
00:27:46,000 --> 00:27:49,520
applause api from android source code

591
00:27:49,520 --> 00:27:52,640
and we also introduced a solution to

592
00:27:52,640 --> 00:27:57,120
extract sensitive api from windows room

593
00:27:57,120 --> 00:28:00,159
finally we will show our tools to test

594
00:28:00,159 --> 00:28:01,279
and

595
00:28:01,279 --> 00:28:05,520
verify vendor's province dashboard

596
00:28:09,120 --> 00:28:10,159
first

597
00:28:10,159 --> 00:28:13,120
we extract f-offs api from android

598
00:28:13,120 --> 00:28:15,440
source code

599
00:28:15,440 --> 00:28:18,880
we found that most measured methods use

600
00:28:18,880 --> 00:28:20,480
animations

601
00:28:20,480 --> 00:28:24,000
to mark the recurrent permission

602
00:28:24,000 --> 00:28:26,960
well some others are declared in code

603
00:28:26,960 --> 00:28:29,200
comments

604
00:28:29,200 --> 00:28:33,840
and our methods work as follows

605
00:28:34,159 --> 00:28:35,039
first

606
00:28:35,039 --> 00:28:37,840
we extract all the class from android

607
00:28:37,840 --> 00:28:39,600
source code and

608
00:28:39,600 --> 00:28:42,080
extract all the methods and then

609
00:28:42,080 --> 00:28:44,640
construct the triple as

610
00:28:44,640 --> 00:28:47,600
signature comment and motion

611
00:28:47,600 --> 00:28:50,320
for the method

612
00:28:53,600 --> 00:28:54,960
we found

613
00:28:54,960 --> 00:28:57,520
we find that all the methods marked with

614
00:28:57,520 --> 00:29:00,080
permissions

615
00:29:02,159 --> 00:29:04,960
finally we classified the permission as

616
00:29:04,960 --> 00:29:06,399
a key and

617
00:29:06,399 --> 00:29:07,679
other methods

618
00:29:07,679 --> 00:29:11,480
info as value

619
00:29:14,880 --> 00:29:17,679
the android not all sensitive behavior

620
00:29:17,679 --> 00:29:19,520
have permissions

621
00:29:19,520 --> 00:29:20,720
for example

622
00:29:20,720 --> 00:29:22,799
the clipboard and

623
00:29:22,799 --> 00:29:26,799
the apple list have no cost

624
00:29:26,799 --> 00:29:30,000
corresponding permissions

625
00:29:30,000 --> 00:29:32,720
but may be marked as sensitive behaviors

626
00:29:32,720 --> 00:29:34,880
by vendors

627
00:29:34,880 --> 00:29:38,399
so we proposed another solution

628
00:29:38,399 --> 00:29:42,080
based on the reachability and

629
00:29:42,080 --> 00:29:45,678
reachability analysis

630
00:29:46,080 --> 00:29:50,000
our methods work as follows

631
00:29:50,320 --> 00:29:53,840
first we stress necessary binaries files

632
00:29:53,840 --> 00:29:55,600
from vendors room

633
00:29:55,600 --> 00:29:57,440
such as framework

634
00:29:57,440 --> 00:30:01,200
service and some custom models

635
00:30:01,200 --> 00:30:02,000
then

636
00:30:02,000 --> 00:30:05,120
we construct the method called graph

637
00:30:05,120 --> 00:30:07,120
among them

638
00:30:07,120 --> 00:30:10,559
you can see the left side is the

639
00:30:10,559 --> 00:30:14,159
system core of wi-fi metal model and

640
00:30:14,159 --> 00:30:17,919
the right side is the system called clip

641
00:30:17,919 --> 00:30:21,880
clipboard model

642
00:30:22,480 --> 00:30:25,600
they both finally cause a note option in

643
00:30:25,600 --> 00:30:26,559
f

644
00:30:26,559 --> 00:30:29,918
app of service

645
00:30:30,399 --> 00:30:34,000
finally we merge the apis collected by

646
00:30:34,000 --> 00:30:37,679
source code and reachability analyze

647
00:30:37,679 --> 00:30:38,799
together

648
00:30:38,799 --> 00:30:43,679
as our four sets of app-ops api

649
00:30:48,399 --> 00:30:52,080
build code for one model is easy but

650
00:30:52,080 --> 00:30:56,000
cross model is very difficult

651
00:30:56,000 --> 00:30:58,960
from the code example we can see that

652
00:30:58,960 --> 00:31:01,600
get connection info is involved

653
00:31:01,600 --> 00:31:07,679
involved in invoked by from m service

654
00:31:07,679 --> 00:31:11,039
which is actually the binder of iofa

655
00:31:11,039 --> 00:31:12,399
manager

656
00:31:12,399 --> 00:31:14,320
and

657
00:31:14,320 --> 00:31:17,519
i buy their implementation classes is i

658
00:31:17,519 --> 00:31:20,960
better dos stamp

659
00:31:21,120 --> 00:31:23,519
from the better mechanism it is clear

660
00:31:23,519 --> 00:31:24,480
that

661
00:31:24,480 --> 00:31:26,559
there is a connection between wifi

662
00:31:26,559 --> 00:31:28,080
manager and

663
00:31:28,080 --> 00:31:32,080
wi-fi service in politician

664
00:31:32,080 --> 00:31:34,559
so we construct a bridge

665
00:31:34,559 --> 00:31:38,480
to connect these two objects

666
00:31:38,720 --> 00:31:41,600
in this way we build a connect chord

667
00:31:41,600 --> 00:31:46,320
graph across different system models

668
00:31:46,320 --> 00:31:50,000
that's all for sensitive api

669
00:31:50,000 --> 00:31:53,600
next we will verify whether this api

670
00:31:53,600 --> 00:31:56,240
indeed triggers the vendor's privacy

671
00:31:56,240 --> 00:31:59,240
detection

672
00:32:08,880 --> 00:32:11,840
we built a term called the blue sandbox

673
00:32:11,840 --> 00:32:14,720
to verify our findings

674
00:32:14,720 --> 00:32:18,799
the last image is a preview of this tool

675
00:32:18,799 --> 00:32:22,559
which covers most of sensitive behaviors

676
00:32:22,559 --> 00:32:24,480
including location

677
00:32:24,480 --> 00:32:26,159
device states

678
00:32:26,159 --> 00:32:26,840
and

679
00:32:26,840 --> 00:32:28,720
camera

680
00:32:28,720 --> 00:32:31,519
the second two image has a location

681
00:32:31,519 --> 00:32:32,799
model and

682
00:32:32,799 --> 00:32:36,000
the device status model

683
00:32:36,000 --> 00:32:38,799
from picture you can see many related

684
00:32:38,799 --> 00:32:41,440
apis are flagged

685
00:32:41,440 --> 00:32:44,559
and we also mark the sensitive level

686
00:32:44,559 --> 00:32:47,678
with different color

687
00:32:48,640 --> 00:32:52,080
with the help of blue sandbox we succeed

688
00:32:52,080 --> 00:32:57,559
to verify 5 vendors previous dashboard

689
00:33:14,960 --> 00:33:17,760
finally we summarize three key points

690
00:33:17,760 --> 00:33:20,960
from our research

691
00:33:22,559 --> 00:33:25,279
privacy dashboard is the new feature on

692
00:33:25,279 --> 00:33:26,960
android 12

693
00:33:26,960 --> 00:33:29,840
aimed to keep track of apps sensitive

694
00:33:29,840 --> 00:33:31,679
behaviors

695
00:33:31,679 --> 00:33:34,000
but several android vendors achieved

696
00:33:34,000 --> 00:33:37,559
their own before

697
00:33:38,240 --> 00:33:40,880
app-ops provide interface to check

698
00:33:40,880 --> 00:33:43,200
sensitive permission access but not

699
00:33:43,200 --> 00:33:44,320
accurate

700
00:33:44,320 --> 00:33:47,279
or comprehensive for vendors to

701
00:33:47,279 --> 00:33:53,080
present on privacy dashboard directly

702
00:33:53,919 --> 00:33:56,480
wonders custom privacy

703
00:33:56,480 --> 00:33:59,200
protection mechanism need to be improved

704
00:33:59,200 --> 00:34:00,399
and

705
00:34:00,399 --> 00:34:03,120
need to be verified fully to protect

706
00:34:03,120 --> 00:34:07,200
billions of users privacy

707
00:34:07,200 --> 00:34:08,239
okay

708
00:34:08,239 --> 00:34:10,879
that's all our privatization and

709
00:34:10,879 --> 00:34:13,340
thank you very much

710
00:34:13,340 --> 00:34:22,949
[Music]

711
00:34:23,520 --> 00:34:25,599
you

