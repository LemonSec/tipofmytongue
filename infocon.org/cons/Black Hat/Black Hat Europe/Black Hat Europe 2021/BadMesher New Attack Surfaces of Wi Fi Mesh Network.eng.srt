1
00:00:06,360 --> 00:00:08,639
[Music]

2
00:00:08,639 --> 00:00:11,360
hello everyone we are from baidu

3
00:00:11,360 --> 00:00:14,240
security and have long been committed to

4
00:00:14,240 --> 00:00:16,480
research in ai security

5
00:00:16,480 --> 00:00:18,480
today we're going to share a new

6
00:00:18,480 --> 00:00:21,439
research topic about wi-fi mesh

7
00:00:21,439 --> 00:00:24,400
in this topic you could gather concepts

8
00:00:24,400 --> 00:00:27,519
principles of wi-fi mesh besides you

9
00:00:27,519 --> 00:00:30,000
could learn the attack services of this

10
00:00:30,000 --> 00:00:33,079
scene and get some high risk security

11
00:00:33,079 --> 00:00:36,160
vulnerabilities in the real world

12
00:00:36,160 --> 00:00:39,120
let me introduce our four speakers me

13
00:00:39,120 --> 00:00:42,160
luigi is a security researcher of vital

14
00:00:42,160 --> 00:00:45,280
security he's interested in bug hunting

15
00:00:45,280 --> 00:00:48,640
and fuzzing he recently focuses on lt

16
00:00:48,640 --> 00:00:52,160
mobile security and wireless security he

17
00:00:52,160 --> 00:00:54,800
reported several security issues to

18
00:00:54,800 --> 00:00:57,520
google oracle android vendors such as

19
00:00:57,520 --> 00:01:00,719
mediatek xiaomi oppong

20
00:01:00,719 --> 00:01:03,280
dongshinku is a security researcher of

21
00:01:03,280 --> 00:01:06,479
baidu security recently he focuses on

22
00:01:06,479 --> 00:01:09,840
iot security and awareness security

23
00:01:09,840 --> 00:01:12,400
yeah zhang is a security researcher of

24
00:01:12,400 --> 00:01:15,040
baidu security he's interested in

25
00:01:15,040 --> 00:01:17,840
reverse engineering and bug hunting

26
00:01:17,840 --> 00:01:21,119
recently he focuses on iot security and

27
00:01:21,119 --> 00:01:22,479
fuzzing stuff

28
00:01:22,479 --> 00:01:25,280
he reported several issues to apple

29
00:01:25,280 --> 00:01:27,200
google microsoft

30
00:01:27,200 --> 00:01:30,079
in one is a security researcher of baidu

31
00:01:30,079 --> 00:01:33,200
security he focuses on automated

32
00:01:33,200 --> 00:01:36,240
vulnerability detection technology such

33
00:01:36,240 --> 00:01:39,040
as dynamic symbolic execution and

34
00:01:39,040 --> 00:01:43,360
fuzzing now he engages in fuzzing ai

35
00:01:43,360 --> 00:01:47,439
frameworks and wi-fi protocol

36
00:01:48,240 --> 00:01:50,880
we'll share our research about wi-fi

37
00:01:50,880 --> 00:01:52,880
mesh in five parts

38
00:01:52,880 --> 00:01:55,520
in the first part we'll introduce the

39
00:01:55,520 --> 00:01:58,479
background wifi mesh we'll introduce

40
00:01:58,479 --> 00:02:00,719
also introduce the main role in this

41
00:02:00,719 --> 00:02:03,680
topic easy mesh which is a certification

42
00:02:03,680 --> 00:02:07,119
developed by wi-fi alias we'll introduce

43
00:02:07,119 --> 00:02:09,679
the history of easy mesh

44
00:02:09,679 --> 00:02:12,080
in the second part we'll show the

45
00:02:12,080 --> 00:02:15,120
progress of easy mesh we'll introduce

46
00:02:15,120 --> 00:02:18,160
the architecture of easy mesh also we

47
00:02:18,160 --> 00:02:20,640
showed attack surfaces in the whole

48
00:02:20,640 --> 00:02:23,680
progress in the third part

49
00:02:23,680 --> 00:02:26,560
we will introduce a tool named mesh

50
00:02:26,560 --> 00:02:29,840
father and share our design idea and

51
00:02:29,840 --> 00:02:32,480
show how this tool could detect security

52
00:02:32,480 --> 00:02:35,599
issues automatically in western mesh

53
00:02:35,599 --> 00:02:37,519
in the fourth part

54
00:02:37,519 --> 00:02:39,920
we'll introduce the security issues we

55
00:02:39,920 --> 00:02:42,680
found in mediatek

56
00:02:42,680 --> 00:02:45,920
mt7915 chipset with much further

57
00:02:45,920 --> 00:02:49,120
in the last part we'll put forward our

58
00:02:49,120 --> 00:02:51,599
suggestions and direct our future

59
00:02:51,599 --> 00:02:53,040
research

60
00:02:53,040 --> 00:02:56,480
what is wifi mesh first the mesh is a

61
00:02:56,480 --> 00:02:59,360
common technology of network view

62
00:02:59,360 --> 00:03:02,080
by using mesh several access points

63
00:03:02,080 --> 00:03:04,319
could get gathered and serve as the

64
00:03:04,319 --> 00:03:05,920
steam network

65
00:03:05,920 --> 00:03:08,159
compared to the traditional wi-fi

66
00:03:08,159 --> 00:03:11,120
network built technology mesh has the

67
00:03:11,120 --> 00:03:14,959
advantages of being more reflexible more

68
00:03:14,959 --> 00:03:17,120
reliable faster

69
00:03:17,120 --> 00:03:19,760
it also has the great features of

70
00:03:19,760 --> 00:03:22,319
self-organization self-management and

71
00:03:22,319 --> 00:03:23,760
self-helping

72
00:03:23,760 --> 00:03:27,200
so wi-fi mesh plays a significant role

73
00:03:27,200 --> 00:03:30,159
in the future scene of internet of

74
00:03:30,159 --> 00:03:31,599
everything

75
00:03:31,599 --> 00:03:34,640
so what is easy mesh easy mesh is a

76
00:03:34,640 --> 00:03:37,599
standard certification developed by

77
00:03:37,599 --> 00:03:39,280
wi-fi aliens

78
00:03:39,280 --> 00:03:41,360
easy mesh has goes through three

79
00:03:41,360 --> 00:03:45,879
developing stages since 2018

80
00:03:45,879 --> 00:03:49,120
2018 the vendors developed mesh in their

81
00:03:49,120 --> 00:03:51,360
devices themselves

82
00:03:51,360 --> 00:03:53,840
so the devices from different vendors

83
00:03:53,840 --> 00:03:57,439
could not get in charge by wifi mesh

84
00:03:57,439 --> 00:04:00,239
there is an urgent request for standard

85
00:04:00,239 --> 00:04:03,599
protocol to help vendors to get together

86
00:04:03,599 --> 00:04:06,000
so in 2019

87
00:04:06,000 --> 00:04:09,280
wi-fi wi-fi aliens design an

88
00:04:09,280 --> 00:04:11,120
easy mesh r1

89
00:04:11,120 --> 00:04:13,519
which introduces onboarding and auto

90
00:04:13,519 --> 00:04:14,799
config

91
00:04:14,799 --> 00:04:17,880
it also claims to use

92
00:04:17,880 --> 00:04:21,519
1905.18 control protocol to implement

93
00:04:21,519 --> 00:04:24,080
most of the functions of mafia mesh

94
00:04:24,080 --> 00:04:26,639
network control

95
00:04:26,639 --> 00:04:28,800
in 2008

96
00:04:28,800 --> 00:04:31,680
wi-fi alias upgrade the easy mesh from

97
00:04:31,680 --> 00:04:33,520
r1 to r2

98
00:04:33,520 --> 00:04:35,440
in this version

99
00:04:35,440 --> 00:04:38,400
easy mesh gets more features

100
00:04:38,400 --> 00:04:40,400
it is worth mentioning that

101
00:04:40,400 --> 00:04:42,639
the easy mesh introduces several

102
00:04:42,639 --> 00:04:45,440
security features such as the integrity

103
00:04:45,440 --> 00:04:48,240
and authorization no message

104
00:04:48,240 --> 00:04:51,520
up to now dozens of mentors dozens of

105
00:04:51,520 --> 00:04:53,919
vendors have got the certification of

106
00:04:53,919 --> 00:04:57,280
the easy mesh such as media tech huawei

107
00:04:57,280 --> 00:04:59,360
city and so on

108
00:04:59,360 --> 00:05:02,080
so let us introduce the architecture of

109
00:05:02,080 --> 00:05:03,280
easy mesh

110
00:05:03,280 --> 00:05:06,240
here there are two key links and two key

111
00:05:06,240 --> 00:05:07,280
roles

112
00:05:07,280 --> 00:05:10,080
first the two key links the front four

113
00:05:10,080 --> 00:05:12,720
link is the link displayed in our normal

114
00:05:12,720 --> 00:05:15,680
eyes which our smartphone could find it

115
00:05:15,680 --> 00:05:17,840
automatically and get in touch with

116
00:05:17,840 --> 00:05:19,120
internet

117
00:05:19,120 --> 00:05:23,039
second the backhoe link is the link that

118
00:05:23,039 --> 00:05:24,880
could not be searched in the normal

119
00:05:24,880 --> 00:05:28,160
world it is a hide ssid

120
00:05:28,160 --> 00:05:32,639
it is designed for mesh networks only

121
00:05:32,639 --> 00:05:36,240
next let us look at the two key roles in

122
00:05:36,240 --> 00:05:37,600
wifi mesh

123
00:05:37,600 --> 00:05:40,080
the controller is the commander of mesh

124
00:05:40,080 --> 00:05:42,720
network it could send controlling

125
00:05:42,720 --> 00:05:46,479
actions to other devices in mesh network

126
00:05:46,479 --> 00:05:49,680
so by sending some specific commands the

127
00:05:49,680 --> 00:05:52,039
mesh network could reach the goal of

128
00:05:52,039 --> 00:05:54,240
self-organization self-management

129
00:05:54,240 --> 00:05:56,400
self-helping

130
00:05:56,400 --> 00:05:59,919
the agent is the executor of the mesh

131
00:05:59,919 --> 00:06:03,440
network it could pass the command from

132
00:06:03,440 --> 00:06:06,800
controller to finish task of the network

133
00:06:06,800 --> 00:06:09,440
controlling and feedback the results to

134
00:06:09,440 --> 00:06:13,120
the controller accurately

135
00:06:14,880 --> 00:06:17,199
so we will introduce the progress of

136
00:06:17,199 --> 00:06:18,800
network build

137
00:06:18,800 --> 00:06:20,880
the whole progress of network build

138
00:06:20,880 --> 00:06:24,240
could be designable as two parts

139
00:06:24,240 --> 00:06:25,520
onboarding

140
00:06:25,520 --> 00:06:29,198
discovery and configuration

141
00:06:29,280 --> 00:06:32,080
first we'll introduce a morning which

142
00:06:32,080 --> 00:06:34,720
will help a device to join a mesh

143
00:06:34,720 --> 00:06:36,479
network

144
00:06:36,479 --> 00:06:38,880
here we call the device which wanna join

145
00:06:38,880 --> 00:06:42,160
the net network net mesh network and

146
00:06:42,160 --> 00:06:45,120
enrollee device

147
00:06:45,120 --> 00:06:47,600
the onboarding progress is implemented

148
00:06:47,600 --> 00:06:49,199
by protocol

149
00:06:49,199 --> 00:06:50,400
named

150
00:06:50,400 --> 00:06:53,360
1905 push button configuration

151
00:06:53,360 --> 00:06:56,160
the 1.05 push button configuration first

152
00:06:56,160 --> 00:06:58,080
code has three

153
00:06:58,080 --> 00:06:59,120
features

154
00:06:59,120 --> 00:07:01,680
feature one if the device needs a push

155
00:07:01,680 --> 00:07:03,520
button in the real world

156
00:07:03,520 --> 00:07:07,759
feature 2 is the 1905 ppc is based on

157
00:07:07,759 --> 00:07:10,319
wi-fi protect setup

158
00:07:10,319 --> 00:07:14,160
feature 3 is the 1.05 ppc space the type

159
00:07:14,160 --> 00:07:15,680
lens value

160
00:07:15,680 --> 00:07:18,560
so we could see from the picture photos

161
00:07:18,560 --> 00:07:22,560
1905 ppc designs multi-ap

162
00:07:22,560 --> 00:07:25,440
extension in the payload which means the

163
00:07:25,440 --> 00:07:28,000
enrollee device could get back for

164
00:07:28,000 --> 00:07:33,120
access id and password for 1905 pc

165
00:07:33,120 --> 00:07:35,759
the whole progress is shown in the in in

166
00:07:35,759 --> 00:07:37,280
the right picture

167
00:07:37,280 --> 00:07:40,880
first the two devices need a push button

168
00:07:40,880 --> 00:07:42,240
after that

169
00:07:42,240 --> 00:07:44,400
the two devices are in the state of

170
00:07:44,400 --> 00:07:46,400
network field

171
00:07:46,400 --> 00:07:50,000
next the enrollee device follows 1905

172
00:07:50,000 --> 00:07:54,240
ppc and goes through m1 to m8 and gets

173
00:07:54,240 --> 00:07:57,120
the background ssid and password from

174
00:07:57,120 --> 00:07:58,879
existing agent

175
00:07:58,879 --> 00:08:00,879
finally the

176
00:08:00,879 --> 00:08:03,520
error device could get in touch back for

177
00:08:03,520 --> 00:08:06,319
ssid and join the mesh network

178
00:08:06,319 --> 00:08:07,759
successfully

179
00:08:07,759 --> 00:08:09,919
here the progress of onboarding is

180
00:08:09,919 --> 00:08:12,919
finished

181
00:08:13,759 --> 00:08:16,479
next we'll introduce the progress of

182
00:08:16,479 --> 00:08:19,120
discovery and configuration

183
00:08:19,120 --> 00:08:21,919
by finishing onboarding the enrollee

184
00:08:21,919 --> 00:08:24,479
device needs to find a controller to get

185
00:08:24,479 --> 00:08:27,199
configured with the mass network

186
00:08:27,199 --> 00:08:31,520
by using the 1905 controlling protocol

187
00:08:31,520 --> 00:08:32,479
first

188
00:08:32,479 --> 00:08:36,080
the enrollee device sends a 1905 package

189
00:08:36,080 --> 00:08:38,880
to figure out if there is a controller

190
00:08:38,880 --> 00:08:41,760
device existing in the mesh network

191
00:08:41,760 --> 00:08:45,120
the type of the 1905 packet is ap auto

192
00:08:45,120 --> 00:08:47,360
configuration search

193
00:08:47,360 --> 00:08:50,160
if there is a controller existing in the

194
00:08:50,160 --> 00:08:53,120
mesh network the controller will respond

195
00:08:53,120 --> 00:08:54,959
and ap auto configuring for

196
00:08:54,959 --> 00:08:57,279
configuration response to the every

197
00:08:57,279 --> 00:08:58,560
device

198
00:08:58,560 --> 00:09:01,040
so the enrollee device finds the

199
00:09:01,040 --> 00:09:03,680
controller successfully and the progress

200
00:09:03,680 --> 00:09:06,959
of discovery finish

201
00:09:07,200 --> 00:09:09,680
next the controller gonna configure the

202
00:09:09,680 --> 00:09:12,480
enrollee device it will pass some

203
00:09:12,480 --> 00:09:15,440
significant configuration patterns to

204
00:09:15,440 --> 00:09:17,360
enrollee device

205
00:09:17,360 --> 00:09:20,640
such as password access control list

206
00:09:20,640 --> 00:09:23,120
channel of communication

207
00:09:23,120 --> 00:09:26,560
this is implemented by the type of ap

208
00:09:26,560 --> 00:09:29,440
auto configuration wi-fi sample

209
00:09:29,440 --> 00:09:32,480
configuration as shown in the picture

210
00:09:32,480 --> 00:09:33,920
right hand

211
00:09:33,920 --> 00:09:37,120
just the two progress m1 and m2 and the

212
00:09:37,120 --> 00:09:39,680
last the enrollee device go gets

213
00:09:39,680 --> 00:09:41,920
configured and transferred to the new

214
00:09:41,920 --> 00:09:45,440
roar agent and will act as a member of

215
00:09:45,440 --> 00:09:47,839
the national mesh network

216
00:09:47,839 --> 00:09:50,240
here the whole progress of network build

217
00:09:50,240 --> 00:09:52,000
complete

218
00:09:52,000 --> 00:09:54,240
we have shared the core progress of the

219
00:09:54,240 --> 00:09:57,360
network build next let us look at the

220
00:09:57,360 --> 00:09:59,839
network control the management and

221
00:09:59,839 --> 00:10:02,480
maintenance action are really important

222
00:10:02,480 --> 00:10:04,880
parts of mesh network

223
00:10:04,880 --> 00:10:07,760
it is implemented by the protocol of

224
00:10:07,760 --> 00:10:10,240
hbo1905.18

225
00:10:10,240 --> 00:10:11,399
the actual

226
00:10:11,399 --> 00:10:13,760
e1905.1a is a protocol between the

227
00:10:13,760 --> 00:10:16,880
physical layer and the network layer it

228
00:10:16,880 --> 00:10:19,360
defines the controlling technology in

229
00:10:19,360 --> 00:10:22,640
home network whether where is or where

230
00:10:22,640 --> 00:10:25,320
in the mesh scene is

231
00:10:25,320 --> 00:10:28,880
1905.18 in the payload and easy mesh

232
00:10:28,880 --> 00:10:31,519
describes several controlling protocols

233
00:10:31,519 --> 00:10:33,600
such as device binding device

234
00:10:33,600 --> 00:10:36,320
configuration and device management

235
00:10:36,320 --> 00:10:38,959
the whole protocol is based test lens

236
00:10:38,959 --> 00:10:40,320
value

237
00:10:40,320 --> 00:10:42,720
here we list some of the protocols in

238
00:10:42,720 --> 00:10:45,680
easy mesh and through the type multi-ap

239
00:10:45,680 --> 00:10:48,880
positive config request as an example

240
00:10:48,880 --> 00:10:51,519
the multi-ap policy config means some

241
00:10:51,519 --> 00:10:53,920
strategies in steering policy on mesh

242
00:10:53,920 --> 00:10:57,920
network the command is 8003

243
00:10:57,920 --> 00:11:02,160
we can know the type is 0x89

244
00:11:02,160 --> 00:11:05,360
and the length is 21. the pillows are

245
00:11:05,360 --> 00:11:08,079
shown in the picture left hand so each

246
00:11:08,079 --> 00:11:10,959
so each pic each package image network

247
00:11:10,959 --> 00:11:13,600
control is just like this

248
00:11:13,600 --> 00:11:16,000
so we have shown the principles of mesh

249
00:11:16,000 --> 00:11:18,959
network field and control so what other

250
00:11:18,959 --> 00:11:21,600
attack surfaces the two basic attack

251
00:11:21,600 --> 00:11:23,760
surfaces are network build and network

252
00:11:23,760 --> 00:11:27,120
control the two key protocols are 1905

253
00:11:27,120 --> 00:11:29,600
push button configuration and entropy 1

254
00:11:29,600 --> 00:11:32,480
and 0 5.18 control protocol and the

255
00:11:32,480 --> 00:11:34,959
protocols are based the type lens value

256
00:11:34,959 --> 00:11:35,760
so

257
00:11:35,760 --> 00:11:37,680
uh they may have

258
00:11:37,680 --> 00:11:39,680
maybe have memory correction and the

259
00:11:39,680 --> 00:11:43,120
person trv block and very suitable for

260
00:11:43,120 --> 00:11:45,920
fuzzing tests

261
00:11:46,480 --> 00:11:49,200
here look at the attack surface of mesh

262
00:11:49,200 --> 00:11:50,560
network build

263
00:11:50,560 --> 00:11:51,360
first

264
00:11:51,360 --> 00:11:54,399
attacker disguised a monitor's enrollee

265
00:11:54,399 --> 00:11:57,920
device to attack the existing agent

266
00:11:57,920 --> 00:12:00,240
it could send the more form package in

267
00:12:00,240 --> 00:12:05,120
the progress m1 m3 and 5 m7 of 1905 ppc

268
00:12:05,120 --> 00:12:07,360
could trigger the security issues in the

269
00:12:07,360 --> 00:12:12,079
tre process in existing agent

270
00:12:12,560 --> 00:12:15,440
next an attacker could disguise a

271
00:12:15,440 --> 00:12:18,480
molecular existing agent to attack the

272
00:12:18,480 --> 00:12:20,399
enrollee device

273
00:12:20,399 --> 00:12:24,040
it could respond to more formed package

274
00:12:24,040 --> 00:12:26,920
m2m4

275
00:12:26,920 --> 00:12:29,040
m6m801905 ppc

276
00:12:29,040 --> 00:12:31,600
could trigger the security issues in the

277
00:12:31,600 --> 00:12:34,639
tlv person in enrollee device

278
00:12:34,639 --> 00:12:36,639
here let us move check the attack

279
00:12:36,639 --> 00:12:38,880
surface of network control

280
00:12:38,880 --> 00:12:41,600
an attacker should join mesh network

281
00:12:41,600 --> 00:12:44,720
first and disguise monitors controller

282
00:12:44,720 --> 00:12:47,760
and existing agents to send a malformed

283
00:12:47,760 --> 00:12:49,839
package and this may trigger the

284
00:12:49,839 --> 00:12:52,560
security issues of the controller and

285
00:12:52,560 --> 00:12:56,160
existing agent in tr repair person

286
00:12:56,160 --> 00:12:59,040
the picture right hand shows we use the

287
00:12:59,040 --> 00:13:02,079
command ap auto configuration wsc

288
00:13:02,079 --> 00:13:06,279
message we fill the length of ssid to

289
00:13:06,279 --> 00:13:11,440
0xff which is 64 bytes longest in normal

290
00:13:11,440 --> 00:13:15,440
also we fulfill 0xff to the payload of

291
00:13:15,440 --> 00:13:16,959
ssid

292
00:13:16,959 --> 00:13:19,360
from the packet we capture you could say

293
00:13:19,360 --> 00:13:22,200
our payload

294
00:13:22,200 --> 00:13:25,200
x0xf fulfills the package

295
00:13:25,200 --> 00:13:29,440
this is our euro to a normal device

296
00:13:30,720 --> 00:13:33,440
so let us introduce our automatic bug

297
00:13:33,440 --> 00:13:36,959
hunting tools we name it much father

298
00:13:36,959 --> 00:13:40,079
we will introduce it as four parts

299
00:13:40,079 --> 00:13:43,360
first the architecture of much father

300
00:13:43,360 --> 00:13:46,320
second the strategies of mutation of

301
00:13:46,320 --> 00:13:50,240
tappan's value third how we fast

302
00:13:50,240 --> 00:13:53,519
network built last how we first network

303
00:13:53,519 --> 00:13:56,079
control

304
00:13:57,440 --> 00:14:00,079
and there are two subsystems in our mesh

305
00:14:00,079 --> 00:14:05,079
further 1905 pvc fuzzing and

306
00:14:05,079 --> 00:14:07,199
ih4e1905.18 fuzzing

307
00:14:07,199 --> 00:14:11,199
the top half part is our design of 1.05

308
00:14:11,199 --> 00:14:13,440
ppc fuzzing subsystem

309
00:14:13,440 --> 00:14:15,760
we choose the wps

310
00:14:15,760 --> 00:14:18,560
data between devices in the real world

311
00:14:18,560 --> 00:14:21,760
as our original data the original data

312
00:14:21,760 --> 00:14:24,480
will pass through our tlv mutation

313
00:14:24,480 --> 00:14:29,040
subsystem and use the h0 2.1 packet

314
00:14:29,040 --> 00:14:32,160
publisher to send packets

315
00:14:32,160 --> 00:14:35,360
by the way our monitoring model will get

316
00:14:35,360 --> 00:14:38,800
in touch with the uit port of the device

317
00:14:38,800 --> 00:14:42,079
to capture the crash loads

318
00:14:42,079 --> 00:14:46,920
the second half part of is our design of

319
00:14:46,920 --> 00:14:50,560
1905.1840 subsystem we implement most of

320
00:14:50,560 --> 00:14:53,199
the control protocol described in easy

321
00:14:53,199 --> 00:14:54,160
mesh

322
00:14:54,160 --> 00:14:57,120
also the original data will pass through

323
00:14:57,120 --> 00:15:00,160
the tre mutation subsystem and use the

324
00:15:00,160 --> 00:15:03,839
1905 packet publisher to send packets

325
00:15:03,839 --> 00:15:06,399
and we design a special mechanism to

326
00:15:06,399 --> 00:15:09,279
monitor whether the 1905 diamond is

327
00:15:09,279 --> 00:15:12,639
crushed or not

328
00:15:12,639 --> 00:15:15,120
due to the implementation of the target

329
00:15:15,120 --> 00:15:18,079
protocol is based on hybrid value we

330
00:15:18,079 --> 00:15:19,760
could design a growth

331
00:15:19,760 --> 00:15:22,560
group of strategies to help funding

332
00:15:22,560 --> 00:15:25,360
first we mutate the lens field by

333
00:15:25,360 --> 00:15:28,399
changing the lens to a two-shot value or

334
00:15:28,399 --> 00:15:30,480
two long value

335
00:15:30,480 --> 00:15:32,800
we may trigger some memory correction

336
00:15:32,800 --> 00:15:35,759
such as a two-shot value could cause

337
00:15:35,759 --> 00:15:39,120
out-of-bound read or integral overflow

338
00:15:39,120 --> 00:15:41,120
too long value could cause auto

339
00:15:41,120 --> 00:15:44,000
boundaries security issues

340
00:15:44,000 --> 00:15:47,600
second we could change the block of tlv

341
00:15:47,600 --> 00:15:50,880
randomly such as randomly add randomly

342
00:15:50,880 --> 00:15:53,040
delayed and this may trigger some

343
00:15:53,040 --> 00:15:56,000
logical security issues such as bubble

344
00:15:56,000 --> 00:15:58,560
free and use after free

345
00:15:58,560 --> 00:16:01,680
the picture in the left hand shows the

346
00:16:01,680 --> 00:16:04,000
two shortcuts in the real world the

347
00:16:04,000 --> 00:16:06,560
picture in the right hand shows we add a

348
00:16:06,560 --> 00:16:09,519
tre block randomly

349
00:16:09,519 --> 00:16:12,079
we could cover most of the issues in

350
00:16:12,079 --> 00:16:16,000
persian tra in the strategies upper

351
00:16:16,000 --> 00:16:17,759
now let us

352
00:16:17,759 --> 00:16:21,600
let us see how we foster network build

353
00:16:21,600 --> 00:16:24,800
about the following hardware we choose a

354
00:16:24,800 --> 00:16:27,440
ubuntu pc or

355
00:16:27,440 --> 00:16:31,759
raspberry pi 4 we also buy a usb wi-fi

356
00:16:31,759 --> 00:16:34,240
adapter to help sending

357
00:16:34,240 --> 00:16:36,720
their 8-0

358
00:16:36,720 --> 00:16:37,839
package

359
00:16:37,839 --> 00:16:40,639
about the fuzzing software we choose an

360
00:16:40,639 --> 00:16:43,519
open source tool or wp supplicants to

361
00:16:43,519 --> 00:16:46,399
modify to build our further

362
00:16:46,399 --> 00:16:49,360
the reason is that the wp supplicant

363
00:16:49,360 --> 00:16:52,399
supports the 1905 ppc protocol

364
00:16:52,399 --> 00:16:53,600
originally

365
00:16:53,600 --> 00:16:56,240
so we could put our fuzzing strategies

366
00:16:56,240 --> 00:17:00,720
in several stages of 1905 ppc and

367
00:17:00,720 --> 00:17:04,000
this could help us to fast network build

368
00:17:04,000 --> 00:17:06,559
stably and efficiently

369
00:17:06,559 --> 00:17:08,480
as we mentioned before

370
00:17:08,480 --> 00:17:10,240
there are two

371
00:17:10,240 --> 00:17:13,520
potential victims in network build one

372
00:17:13,520 --> 00:17:16,400
of them is an existing agent we could

373
00:17:16,400 --> 00:17:18,799
build the following pillows with our

374
00:17:18,799 --> 00:17:23,280
specific tools and could cover m1 m3 m5

375
00:17:23,280 --> 00:17:25,039
and 7 progress

376
00:17:25,039 --> 00:17:27,919
this picture right hand is the captured

377
00:17:27,919 --> 00:17:31,200
crash world that we triggered in m7

378
00:17:31,200 --> 00:17:34,000
this is an auto boundary issue in which

379
00:17:34,000 --> 00:17:36,559
the existing agent handles the mod forms

380
00:17:36,559 --> 00:17:38,720
package incorrectly

381
00:17:38,720 --> 00:17:41,760
our method of the monitoring is just to

382
00:17:41,760 --> 00:17:44,480
pin the target existing agent and

383
00:17:44,480 --> 00:17:49,760
connect to uart to capture crash loads

384
00:17:50,559 --> 00:17:53,360
so another weak team in the network

385
00:17:53,360 --> 00:17:56,080
build is the error device

386
00:17:56,080 --> 00:17:59,039
that has not joined the mesh network

387
00:17:59,039 --> 00:18:02,000
we disguise a ridiculous existing agent

388
00:18:02,000 --> 00:18:04,480
to foster every device

389
00:18:04,480 --> 00:18:06,880
to keep the inverted device being in the

390
00:18:06,880 --> 00:18:08,559
state of joining

391
00:18:08,559 --> 00:18:11,760
mesh network we add a scratch in the

392
00:18:11,760 --> 00:18:15,120
every device just as we shown in the

393
00:18:15,120 --> 00:18:16,960
picture left hand

394
00:18:16,960 --> 00:18:19,440
we need to inject our

395
00:18:19,440 --> 00:18:23,360
fuzzing pillow in the progress m4 m2 m4

396
00:18:23,360 --> 00:18:26,400
m6 m8 successfully

397
00:18:26,400 --> 00:18:28,880
the right hand picture is the captured

398
00:18:28,880 --> 00:18:31,840
crash log we triggered an out-of-bound

399
00:18:31,840 --> 00:18:35,039
right security issues in the

400
00:18:35,039 --> 00:18:37,760
progress m6

401
00:18:37,760 --> 00:18:41,440
here we also use the method of the pin

402
00:18:41,440 --> 00:18:46,320
target device and get uart crash lock

403
00:18:47,200 --> 00:18:49,840
in this part let us introduce folding

404
00:18:49,840 --> 00:18:52,960
network control we chose macbook pro as

405
00:18:52,960 --> 00:18:54,960
our hardware

406
00:18:54,960 --> 00:18:57,600
hardware because it could support the

407
00:18:57,600 --> 00:19:02,360
package sending in h4e1905.18

408
00:19:02,480 --> 00:19:05,200
about the software we choose an open

409
00:19:05,200 --> 00:19:08,080
source pyl1905

410
00:19:08,080 --> 00:19:10,640
which has implemented some of the

411
00:19:10,640 --> 00:19:12,960
protocols of control

412
00:19:12,960 --> 00:19:17,360
this is a great piece of news for us it

413
00:19:17,360 --> 00:19:19,760
means we just developed some of the

414
00:19:19,760 --> 00:19:22,960
protocols of easy mesh and add our

415
00:19:22,960 --> 00:19:25,679
mutation strategies we

416
00:19:25,679 --> 00:19:29,600
so we could first network control easily

417
00:19:29,600 --> 00:19:31,840
in the monitoring part

418
00:19:31,840 --> 00:19:34,480
a special mission we need to configure

419
00:19:34,480 --> 00:19:37,120
out we need to figure out if the module

420
00:19:37,120 --> 00:19:40,919
handling in the handling the

421
00:19:40,919 --> 00:19:43,919
h4e1905.8.1a package is a diamond

422
00:19:43,919 --> 00:19:46,640
so we could not capture the crash in the

423
00:19:46,640 --> 00:19:49,840
uart port and also we could not send a

424
00:19:49,840 --> 00:19:52,400
pin message to check the diamond is

425
00:19:52,400 --> 00:19:54,160
alive or not

426
00:19:54,160 --> 00:19:58,000
so we use a 1905 topology curry message

427
00:19:58,000 --> 00:20:01,200
in the easy mesh which is described as a

428
00:20:01,200 --> 00:20:04,840
message to detect each other in 105

429
00:20:04,840 --> 00:20:07,919
diamonds we could easily know the state

430
00:20:07,919 --> 00:20:12,480
of one and zero diamond is alive or not

431
00:20:12,559 --> 00:20:15,600
so when we post a fuzzing pillow

432
00:20:15,600 --> 00:20:17,679
our father

433
00:20:17,679 --> 00:20:21,520
will post a package of 1905 topology

434
00:20:21,520 --> 00:20:22,720
queries

435
00:20:22,720 --> 00:20:25,840
it got feedback it means the 1.05

436
00:20:25,840 --> 00:20:26,960
diamond

437
00:20:26,960 --> 00:20:29,600
works normally if not

438
00:20:29,600 --> 00:20:32,320
there may have some been some problems

439
00:20:32,320 --> 00:20:34,960
in the 1905 diamond

440
00:20:34,960 --> 00:20:37,760
we will save the fighting pillow and

441
00:20:37,760 --> 00:20:40,559
wait for the diamond to restart

442
00:20:40,559 --> 00:20:43,840
next my partner don shanku will show you

443
00:20:43,840 --> 00:20:47,039
the security issues found by meshfather

444
00:20:47,039 --> 00:20:49,200
in the real world

445
00:20:49,200 --> 00:20:52,240
hello everyone next i will introduce

446
00:20:52,240 --> 00:20:54,559
some security vulnerabilities we

447
00:20:54,559 --> 00:20:57,200
discovered during the security audit of

448
00:20:57,200 --> 00:20:59,760
the mt-791 fellowship

449
00:20:59,760 --> 00:21:01,919
those vulnerabilities can be roughly

450
00:21:01,919 --> 00:21:04,720
divided in two categories in terms of

451
00:21:04,720 --> 00:21:05,919
causes

452
00:21:05,919 --> 00:21:08,240
firstly memory corruption one

453
00:21:08,240 --> 00:21:10,960
abnormalities mainly due to the lack of

454
00:21:10,960 --> 00:21:14,480
validation when processing carry packets

455
00:21:14,480 --> 00:21:16,320
windows often introduce such

456
00:21:16,320 --> 00:21:18,080
vulnerabilities

457
00:21:18,080 --> 00:21:20,240
when implementing wifi mesh protocol

458
00:21:20,240 --> 00:21:21,280
stacks

459
00:21:21,280 --> 00:21:24,559
such as stack overflow and hip overflow

460
00:21:24,559 --> 00:21:27,679
secondly vulnerabilities that varied

461
00:21:27,679 --> 00:21:30,559
security principles mainly due to the

462
00:21:30,559 --> 00:21:33,280
validation of safety principles defined

463
00:21:33,280 --> 00:21:36,159
in the using mesh standard for example

464
00:21:36,159 --> 00:21:38,880
the backhoe link and the frontal link it

465
00:21:38,880 --> 00:21:42,159
will be accurate in a wfm mesh network

466
00:21:42,159 --> 00:21:44,720
we chose the middle attack mt7 number

467
00:21:44,720 --> 00:21:46,159
failed chip

468
00:21:46,159 --> 00:21:49,360
was our research target for weapon mesh

469
00:21:49,360 --> 00:21:51,120
mainly based on the following three

470
00:21:51,120 --> 00:21:52,159
reasons

471
00:21:52,159 --> 00:21:54,440
firstly the

472
00:21:54,440 --> 00:21:57,600
mt-7195 is world's first single chip

473
00:21:57,600 --> 00:22:00,640
weather 6v1 plus and the bluetooth file

474
00:22:00,640 --> 00:22:02,400
combo solution

475
00:22:02,400 --> 00:22:04,720
the chip integrates a dedicated rf

476
00:22:04,720 --> 00:22:07,440
receiver with zero-width dfs channel

477
00:22:07,440 --> 00:22:08,720
monitoring

478
00:22:08,720 --> 00:22:10,480
industry first

479
00:22:10,480 --> 00:22:13,039
that brings faster highly reliable and

480
00:22:13,039 --> 00:22:16,080
easier to use connectivity

481
00:22:16,080 --> 00:22:18,799
secondly the weapon mesh solution of

482
00:22:18,799 --> 00:22:21,919
mt79 fell chip has obtained the easy

483
00:22:21,919 --> 00:22:22,799
mesh

484
00:22:22,799 --> 00:22:26,960
certification of the wifi

485
00:22:26,960 --> 00:22:28,280
thirdly

486
00:22:28,280 --> 00:22:32,320
mt-795 was a cost-effective wi-fi chief

487
00:22:32,320 --> 00:22:34,799
is adopted by many wifi6 wireless

488
00:22:34,799 --> 00:22:36,320
routers

489
00:22:36,320 --> 00:22:38,880
those advantages are very beneficial to

490
00:22:38,880 --> 00:22:40,720
our security research

491
00:22:40,720 --> 00:22:43,120
in our security audit of the weapon

492
00:22:43,120 --> 00:22:46,559
match solution of the mt-79 fellow chief

493
00:22:46,559 --> 00:22:49,120
we found some security issues which

494
00:22:49,120 --> 00:22:51,360
cover the network build stage and

495
00:22:51,360 --> 00:22:53,760
network control stage of the wifi match

496
00:22:53,760 --> 00:22:54,960
process

497
00:22:54,960 --> 00:22:58,480
a total of 19 cvs was obtained

498
00:22:58,480 --> 00:23:00,880
mediatek had fixed all the security

499
00:23:00,880 --> 00:23:03,039
issues and released the corresponding

500
00:23:03,039 --> 00:23:04,159
packages

501
00:23:04,159 --> 00:23:05,520
first of all

502
00:23:05,520 --> 00:23:07,840
i will introduce two memory corruption

503
00:23:07,840 --> 00:23:09,840
vulnerabilities

504
00:23:09,840 --> 00:23:12,840
cv3500

505
00:23:13,600 --> 00:23:15,679
we discovered in the mesh network

506
00:23:15,679 --> 00:23:18,320
builder stage attackers can use these

507
00:23:18,320 --> 00:23:20,960
vulnerabilities to remotely trigger auto

508
00:23:20,960 --> 00:23:23,760
boundaries in the adjacent network

509
00:23:23,760 --> 00:23:26,559
result knowing the wifi password

510
00:23:26,559 --> 00:23:28,880
the device will join the mesh network

511
00:23:28,880 --> 00:23:32,000
through the 1905 push button protocol

512
00:23:32,000 --> 00:23:34,159
as can be seen from the code in the

513
00:23:34,159 --> 00:23:36,559
figure

514
00:23:36,559 --> 00:23:38,960
after the piece ap received the wc

515
00:23:38,960 --> 00:23:41,600
packet it directly passed the process it

516
00:23:41,600 --> 00:23:44,240
resulted validating the data packet

517
00:23:44,240 --> 00:23:46,480
the trigger point of the vulnerabilities

518
00:23:46,480 --> 00:23:48,799
is a memory crop operation here

519
00:23:48,799 --> 00:23:53,120
the target address is a 16 back area and

520
00:23:53,120 --> 00:23:55,200
the corporate data and the list are all

521
00:23:55,200 --> 00:23:58,000
passed from the wsc packet

522
00:23:58,000 --> 00:23:59,919
when attackers send a careful

523
00:23:59,919 --> 00:24:02,480
constructed wc package with an error

524
00:24:02,480 --> 00:24:06,240
industries greater than 16 bets the out

525
00:24:06,240 --> 00:24:08,640
of bounds red can be achieved

526
00:24:08,640 --> 00:24:11,360
the picture on the left is a crash log

527
00:24:11,360 --> 00:24:14,360
triggered by this vulnerability

528
00:24:14,360 --> 00:24:17,840
cv37566 we discovered in mesh network

529
00:24:17,840 --> 00:24:20,720
control stage an attacker can use this

530
00:24:20,720 --> 00:24:23,039
vulnerability to remotely trigger an

531
00:24:23,039 --> 00:24:26,720
auto bounce back in a recent network

532
00:24:26,720 --> 00:24:28,640
when the wifi mesh network is

533
00:24:28,640 --> 00:24:30,080
established

534
00:24:30,080 --> 00:24:33,120
the ipc manage the mesh network through

535
00:24:33,120 --> 00:24:36,559
the 1900 file protocol earth can be seen

536
00:24:36,559 --> 00:24:38,640
from the code in the figure

537
00:24:38,640 --> 00:24:41,360
after if she received the 1905 data

538
00:24:41,360 --> 00:24:44,240
package it directly passed and processed

539
00:24:44,240 --> 00:24:48,400
its result while dating the data package

540
00:24:48,400 --> 00:24:50,640
the trigger point of the vulnerability

541
00:24:50,640 --> 00:24:53,360
is the memory cops evaluation here

542
00:24:53,360 --> 00:24:57,120
the destination address is a 33 bed area

543
00:24:57,120 --> 00:24:59,760
the copper data and lens are all passed

544
00:24:59,760 --> 00:25:03,279
from the 1905 data packet it has not

545
00:25:03,279 --> 00:25:06,640
undergone any verification

546
00:25:06,640 --> 00:25:08,640
when an attacker sent a carefully

547
00:25:08,640 --> 00:25:12,320
construct 1905 data packet with a ssd

548
00:25:12,320 --> 00:25:15,600
lens greater than 33 bets and out of

549
00:25:15,600 --> 00:25:17,760
bounds wealth can be triggered

550
00:25:17,760 --> 00:25:20,080
the picture on the left is the crazed

551
00:25:20,080 --> 00:25:22,880
logo by this vulnerability

552
00:25:22,880 --> 00:25:25,520
next i will introduce a vulnerability

553
00:25:25,520 --> 00:25:27,600
caused by a violation of security

554
00:25:27,600 --> 00:25:29,360
principles

555
00:25:29,360 --> 00:25:31,440
in the using mesh standard

556
00:25:31,440 --> 00:25:34,159
the wifi mesh network is directed in two

557
00:25:34,159 --> 00:25:36,960
links front hall and backhaul the

558
00:25:36,960 --> 00:25:39,600
frontal link is used for normal network

559
00:25:39,600 --> 00:25:41,840
communication between the device and the

560
00:25:41,840 --> 00:25:42,960
ap

561
00:25:42,960 --> 00:25:45,200
and the background link is used for

562
00:25:45,200 --> 00:25:47,679
transmission of mesh network management

563
00:25:47,679 --> 00:25:51,039
data between the aps however in this

564
00:25:51,039 --> 00:25:54,559
mesh implementation front and back links

565
00:25:54,559 --> 00:25:56,880
are not strictly isolated

566
00:25:56,880 --> 00:25:59,600
common devices that send a false mesh

567
00:25:59,600 --> 00:26:02,080
network management messages in the

568
00:26:02,080 --> 00:26:04,960
frontal link will also be received and

569
00:26:04,960 --> 00:26:08,080
processed by the hp nominee

570
00:26:08,080 --> 00:26:11,200
therefore the attacker can pretend to be

571
00:26:11,200 --> 00:26:13,679
the mesh network manager as shown in the

572
00:26:13,679 --> 00:26:17,440
park and send the 1905 data packets from

573
00:26:17,440 --> 00:26:20,080
the frontal link to block the specified

574
00:26:20,080 --> 00:26:23,039
device from accessing the net the mesh

575
00:26:23,039 --> 00:26:24,799
network

576
00:26:24,799 --> 00:26:27,600
from the hd serial port logo it can be

577
00:26:27,600 --> 00:26:30,480
seen that after running the park when

578
00:26:30,480 --> 00:26:33,120
the specified device is connected to the

579
00:26:33,120 --> 00:26:34,159
network

580
00:26:34,159 --> 00:26:36,640
the request to join the network will be

581
00:26:36,640 --> 00:26:38,480
ignored by the apg

582
00:26:38,480 --> 00:26:41,039
causing the device to be unable to join

583
00:26:41,039 --> 00:26:42,720
the mesh network

584
00:26:42,720 --> 00:26:44,799
for the repair of the above mentioned

585
00:26:44,799 --> 00:26:47,039
vulnerabilities we have the following

586
00:26:47,039 --> 00:26:48,559
suggestions

587
00:26:48,559 --> 00:26:50,720
for memory corruption vulnerabilities

588
00:26:50,720 --> 00:26:53,520
caused by processing theory packets we

589
00:26:53,520 --> 00:26:56,400
recommend to pass the data packaged

590
00:26:56,400 --> 00:26:57,760
completely

591
00:26:57,760 --> 00:27:00,400
then check the tab and links one by one

592
00:27:00,400 --> 00:27:02,880
and finally process the return and

593
00:27:02,880 --> 00:27:05,440
discuss it when the list and tab check

594
00:27:05,440 --> 00:27:06,799
fails

595
00:27:06,799 --> 00:27:10,000
a good example is wpa supply control the

596
00:27:10,000 --> 00:27:12,880
figure shows the process of wsa

597
00:27:12,880 --> 00:27:16,240
wpa supplicant processing tre package

598
00:27:16,240 --> 00:27:19,520
which follows the process of passing and

599
00:27:19,520 --> 00:27:21,760
the dispatch and the relation and

600
00:27:21,760 --> 00:27:22,960
processing

601
00:27:22,960 --> 00:27:25,440
for vulnerabilities caused by violation

602
00:27:25,440 --> 00:27:27,840
of security principles

603
00:27:27,840 --> 00:27:30,000
there is a section in the easy match

604
00:27:30,000 --> 00:27:32,880
version 3 standard that specifically

605
00:27:32,880 --> 00:27:35,279
described the security capabilities of

606
00:27:35,279 --> 00:27:39,120
1905 protocol for example to accelerate

607
00:27:39,120 --> 00:27:41,360
backhoe and frontal link

608
00:27:41,360 --> 00:27:43,440
and the integrated code which is an

609
00:27:43,440 --> 00:27:46,320
integrity transmission counter used by

610
00:27:46,320 --> 00:27:49,200
sender to prevent reply attacks

611
00:27:49,200 --> 00:27:51,840
and also encrypt a 19-0 fail particular

612
00:27:51,840 --> 00:27:53,679
layer

613
00:27:53,679 --> 00:27:56,640
we suggest that when implementing easy

614
00:27:56,640 --> 00:27:59,840
mesh vendors showed a bad better easy

615
00:27:59,840 --> 00:28:02,320
match standard and implement the

616
00:28:02,320 --> 00:28:05,600
security capabilities of the 1905 boot

617
00:28:05,600 --> 00:28:06,559
code

618
00:28:06,559 --> 00:28:10,159
next is a summary of the whole topic

619
00:28:10,159 --> 00:28:13,520
in our research on fms we discovered a

620
00:28:13,520 --> 00:28:15,279
new attack service

621
00:28:15,279 --> 00:28:17,760
attackers can launch attacks on the

622
00:28:17,760 --> 00:28:20,799
devices in the mesh network during the

623
00:28:20,799 --> 00:28:23,039
mesh network build stage and network

624
00:28:23,039 --> 00:28:24,559
control stage

625
00:28:24,559 --> 00:28:26,799
in this regard we develop the mesh

626
00:28:26,799 --> 00:28:29,520
further which can automatically mine the

627
00:28:29,520 --> 00:28:32,320
security vulnerabilities introduced by

628
00:28:32,320 --> 00:28:35,360
windows when implementing easy mesh

629
00:28:35,360 --> 00:28:37,919
in practice we found some security

630
00:28:37,919 --> 00:28:40,799
issues and option 19 series

631
00:28:40,799 --> 00:28:44,159
is a welfare mesh solution of mt-795

632
00:28:44,159 --> 00:28:45,440
chip

633
00:28:45,440 --> 00:28:47,679
and we classified the vulnerabilities

634
00:28:47,679 --> 00:28:50,080
found and gave the corresponding repair

635
00:28:50,080 --> 00:28:53,039
suggestions for future research work you

636
00:28:53,039 --> 00:28:54,960
have the following plans

637
00:28:54,960 --> 00:28:57,600
firstly use much further to mine the

638
00:28:57,600 --> 00:28:59,679
vulnerabilities of other user mesh

639
00:28:59,679 --> 00:29:00,799
vendors

640
00:29:00,799 --> 00:29:03,520
many other windows wifi chips have also

641
00:29:03,520 --> 00:29:06,159
obtained easy math certification in the

642
00:29:06,159 --> 00:29:08,880
next research we will verify whether

643
00:29:08,880 --> 00:29:11,279
there is a mesh implementations of those

644
00:29:11,279 --> 00:29:14,320
winners have similar problems

645
00:29:14,320 --> 00:29:17,200
secondly eastern much farther to adapt

646
00:29:17,200 --> 00:29:19,360
to some windows unique smartphone mesh

647
00:29:19,360 --> 00:29:20,799
solutions

648
00:29:20,799 --> 00:29:22,559
many winners will

649
00:29:22,559 --> 00:29:25,679
have developed their own wifi solutions

650
00:29:25,679 --> 00:29:28,559
such as qualcomm's qsdk

651
00:29:28,559 --> 00:29:30,960
in the next research we will also

652
00:29:30,960 --> 00:29:33,600
conduct security audits on this type of

653
00:29:33,600 --> 00:29:36,799
fms solution

654
00:29:38,640 --> 00:29:40,559
thank you everyone they're both with all

655
00:29:40,559 --> 00:29:44,600
the content that we share today

656
00:29:49,090 --> 00:29:52,220
[Music]

