1
00:00:00,860 --> 00:00:09,599
[Music]

2
00:00:09,599 --> 00:00:11,759
hi everyone welcome to picking lock

3
00:00:11,759 --> 00:00:13,440
files attacking and defending your

4
00:00:13,440 --> 00:00:14,799
supply chain

5
00:00:14,799 --> 00:00:16,239
we'll be talking some about supply

6
00:00:16,239 --> 00:00:17,199
chains

7
00:00:17,199 --> 00:00:19,439
how software's built and deployed and

8
00:00:19,439 --> 00:00:21,840
how lock file tampering in particular

9
00:00:21,840 --> 00:00:25,119
can play a role in an attack chain

10
00:00:25,119 --> 00:00:26,880
there are many forms of supply chain

11
00:00:26,880 --> 00:00:29,039
attacks lock file tampering being just

12
00:00:29,039 --> 00:00:31,599
one our goal is to help you understand

13
00:00:31,599 --> 00:00:33,920
lock file tampering in depth

14
00:00:33,920 --> 00:00:35,920
as well as how to better defend it or

15
00:00:35,920 --> 00:00:38,079
add it to your red team tool belt

16
00:00:38,079 --> 00:00:39,760
supply chain attacks are really nothing

17
00:00:39,760 --> 00:00:40,800
new

18
00:00:40,800 --> 00:00:43,360
a military history provides some great

19
00:00:43,360 --> 00:00:45,680
examples of what supply chains look like

20
00:00:45,680 --> 00:00:46,960
what they're for

21
00:00:46,960 --> 00:00:48,480
as well as how they can be attacked and

22
00:00:48,480 --> 00:00:49,760
defended

23
00:00:49,760 --> 00:00:51,360
supply chains are in place to move

24
00:00:51,360 --> 00:00:53,440
critical assets to the right place at

25
00:00:53,440 --> 00:00:55,039
the right time

26
00:00:55,039 --> 00:00:56,640
during world war ii

27
00:00:56,640 --> 00:00:58,480
opposing forces would sometimes use

28
00:00:58,480 --> 00:01:00,559
inflatable tanks wooden airplanes and

29
00:01:00,559 --> 00:01:02,960
fake buildings to confuse the enemy

30
00:01:02,960 --> 00:01:05,280
and divert direct attacks on the chain

31
00:01:05,280 --> 00:01:07,360
of supplies flowing from one place to

32
00:01:07,360 --> 00:01:08,799
another

33
00:01:08,799 --> 00:01:10,320
sometimes these plots were discovered

34
00:01:10,320 --> 00:01:12,159
and opposing forces would drop wooden

35
00:01:12,159 --> 00:01:14,159
bombs on wooden airfields subjectively

36
00:01:14,159 --> 00:01:16,720
say hey we we see what you're up to

37
00:01:16,720 --> 00:01:17,759
um

38
00:01:17,759 --> 00:01:20,240
and in a way this is similar in a sense

39
00:01:20,240 --> 00:01:22,400
to lock file tampering where fake

40
00:01:22,400 --> 00:01:24,080
dependencies can be injected in the

41
00:01:24,080 --> 00:01:26,400
software supply chain

42
00:01:26,400 --> 00:01:28,479
why are we talking about supply chains

43
00:01:28,479 --> 00:01:30,400
at all uh

44
00:01:30,400 --> 00:01:34,240
a software supply chain is in essence a

45
00:01:34,240 --> 00:01:36,400
sequence of processes in place to

46
00:01:36,400 --> 00:01:38,400
promote promote the production of and

47
00:01:38,400 --> 00:01:40,960
distribution of an application

48
00:01:40,960 --> 00:01:42,880
there have been a number of newborn

49
00:01:42,880 --> 00:01:44,159
newsworthy

50
00:01:44,159 --> 00:01:46,000
breaches manifested through supply

51
00:01:46,000 --> 00:01:48,159
chains in recent months and years

52
00:01:48,159 --> 00:01:49,600
and you really can't mention supply

53
00:01:49,600 --> 00:01:50,960
chain attacks without mentioning the

54
00:01:50,960 --> 00:01:53,360
news stories surrounding them

55
00:01:53,360 --> 00:01:54,960
in new stories like these they tend to

56
00:01:54,960 --> 00:01:57,040
attract the attention of organizations

57
00:01:57,040 --> 00:01:59,200
and make them ask the question

58
00:01:59,200 --> 00:02:01,680
hey what if this happened to us and and

59
00:02:01,680 --> 00:02:04,880
what would be our response

60
00:02:05,040 --> 00:02:06,880
packages or dependencies serve as a way

61
00:02:06,880 --> 00:02:08,878
for developers to add code to an

62
00:02:08,878 --> 00:02:11,200
application for typically a specific

63
00:02:11,200 --> 00:02:12,480
purpose

64
00:02:12,480 --> 00:02:13,680
without them having to write every

65
00:02:13,680 --> 00:02:15,599
single line of code themselves for

66
00:02:15,599 --> 00:02:16,800
example

67
00:02:16,800 --> 00:02:19,360
performing web requests and software is

68
00:02:19,360 --> 00:02:21,840
arguably a solved problem few developers

69
00:02:21,840 --> 00:02:24,640
want to rewrite a web request module

70
00:02:24,640 --> 00:02:25,920
nor should they

71
00:02:25,920 --> 00:02:27,920
so developers would typically typically

72
00:02:27,920 --> 00:02:29,760
pull in a package or a dependency that

73
00:02:29,760 --> 00:02:31,680
meets their requirements and install it

74
00:02:31,680 --> 00:02:33,280
with a package management tool so that

75
00:02:33,280 --> 00:02:35,200
it can easily be leveraged

76
00:02:35,200 --> 00:02:36,800
by a team of developers during the

77
00:02:36,800 --> 00:02:40,160
software development life cycle

78
00:02:40,160 --> 00:02:42,800
it's become really easy to pull in code

79
00:02:42,800 --> 00:02:44,400
pull in third-party dependencies and

80
00:02:44,400 --> 00:02:47,920
such but hard to verify the integrity

81
00:02:47,920 --> 00:02:49,599
our ability to pull in software

82
00:02:49,599 --> 00:02:51,599
components has outgrown our ability to

83
00:02:51,599 --> 00:02:55,200
verify the changes over time

84
00:02:55,200 --> 00:02:57,120
supply chains for for software can be

85
00:02:57,120 --> 00:02:59,120
extremely complex you have things like

86
00:02:59,120 --> 00:03:01,360
ci cd pipelines containers package

87
00:03:01,360 --> 00:03:03,599
registries and the like

88
00:03:03,599 --> 00:03:06,080
with the rise of devops and devsecops

89
00:03:06,080 --> 00:03:08,319
and the like the tool chains to get

90
00:03:08,319 --> 00:03:10,480
software from devs to users can get long

91
00:03:10,480 --> 00:03:12,159
and complicated

92
00:03:12,159 --> 00:03:14,640
we won't go into a lot of detail about

93
00:03:14,640 --> 00:03:16,480
why supply chains are vulnerable in

94
00:03:16,480 --> 00:03:17,599
general

95
00:03:17,599 --> 00:03:19,760
there's a talk by adam shaw where he

96
00:03:19,760 --> 00:03:21,680
does a deep dive into that specific

97
00:03:21,680 --> 00:03:22,800
topic

98
00:03:22,800 --> 00:03:25,440
and it's probably worth your time

99
00:03:25,440 --> 00:03:27,200
but for now let's focus on one attack

100
00:03:27,200 --> 00:03:29,440
involving lock files and understand

101
00:03:29,440 --> 00:03:32,480
better what lock files are

102
00:03:32,480 --> 00:03:34,640
it's important to point out that any of

103
00:03:34,640 --> 00:03:36,400
the components that we've pointed out

104
00:03:36,400 --> 00:03:38,239
here in the slide

105
00:03:38,239 --> 00:03:40,000
can contain a lock file and therefore

106
00:03:40,000 --> 00:03:41,599
they can be

107
00:03:41,599 --> 00:03:44,560
subject to a supply chain attack

108
00:03:44,560 --> 00:03:45,760
most programming languages and

109
00:03:45,760 --> 00:03:47,200
frameworks have a package management

110
00:03:47,200 --> 00:03:48,959
system incorporated into their accepted

111
00:03:48,959 --> 00:03:50,879
architecture

112
00:03:50,879 --> 00:03:52,480
each works slightly differently but the

113
00:03:52,480 --> 00:03:54,480
general concept as to why they exist in

114
00:03:54,480 --> 00:03:56,640
the first place is the same to download

115
00:03:56,640 --> 00:03:59,360
third-party apps into your application

116
00:03:59,360 --> 00:04:01,360
uh they each have a com in common a lock

117
00:04:01,360 --> 00:04:03,200
file to allow for some level of

118
00:04:03,200 --> 00:04:06,879
consistency uh during the overall sdlc

119
00:04:06,879 --> 00:04:08,519
our premise is that there are

120
00:04:08,519 --> 00:04:11,040
insufficiencies in how package managers

121
00:04:11,040 --> 00:04:13,040
verify these dependencies

122
00:04:13,040 --> 00:04:14,720
and we'll go over the elements of a lock

123
00:04:14,720 --> 00:04:16,880
file tampering attack we'll cover some

124
00:04:16,880 --> 00:04:18,478
red team approaches you can use if you

125
00:04:18,478 --> 00:04:19,680
want to test your organizational

126
00:04:19,680 --> 00:04:21,759
controls around this type of attack

127
00:04:21,759 --> 00:04:23,280
and we'll look at some custom offensive

128
00:04:23,280 --> 00:04:25,199
tooling to help help you find the right

129
00:04:25,199 --> 00:04:27,600
dependencies to target

130
00:04:27,600 --> 00:04:29,759
from the attacker side and also tamper a

131
00:04:29,759 --> 00:04:31,759
lock file automatically if you want to

132
00:04:31,759 --> 00:04:33,199
do so

133
00:04:33,199 --> 00:04:34,560
we're also going to look at some custom

134
00:04:34,560 --> 00:04:36,479
defensive tooling that'll help you

135
00:04:36,479 --> 00:04:39,280
defend a lock file tampering attack and

136
00:04:39,280 --> 00:04:40,720
i'll turn over to dennis for a few

137
00:04:40,720 --> 00:04:42,960
examples of what lock files are

138
00:04:42,960 --> 00:04:45,680
and how they can be manipulated

139
00:04:45,680 --> 00:04:48,240
thanks craig i will walk you through the

140
00:04:48,240 --> 00:04:50,960
defender side of log file template today

141
00:04:50,960 --> 00:04:53,199
and the key message that i want to cross

142
00:04:53,199 --> 00:04:54,800
get across is that log files are

143
00:04:54,800 --> 00:04:58,000
sensitive any changes to log files need

144
00:04:58,000 --> 00:05:00,639
to be carefully reviewed

145
00:05:00,639 --> 00:05:02,639
and we will also talk about some good

146
00:05:02,639 --> 00:05:04,960
practices for protecting lock for

147
00:05:04,960 --> 00:05:07,280
integrity in your projects

148
00:05:07,280 --> 00:05:10,080
and also how we can raise the bar for

149
00:05:10,080 --> 00:05:12,160
what a successful log-fire tempering

150
00:05:12,160 --> 00:05:13,759
attack could look like

151
00:05:13,759 --> 00:05:16,080
and as craig already mentioned i will

152
00:05:16,080 --> 00:05:18,000
also have some defensive tooling that

153
00:05:18,000 --> 00:05:20,240
can automatically detect block fire

154
00:05:20,240 --> 00:05:23,639
tampering attempts

155
00:05:24,000 --> 00:05:26,320
um but before we go into the details of

156
00:05:26,320 --> 00:05:28,560
what log files are we quickly introduce

157
00:05:28,560 --> 00:05:30,960
ourselves uh i'm dennis atwood i'm a

158
00:05:30,960 --> 00:05:33,120
staff security engineer at

159
00:05:33,120 --> 00:05:35,680
gitlab working in security research and

160
00:05:35,680 --> 00:05:38,000
what i do is i help engineers write

161
00:05:38,000 --> 00:05:39,759
secure software

162
00:05:39,759 --> 00:05:41,360
craig and i have worked with with

163
00:05:41,360 --> 00:05:43,039
several development teams

164
00:05:43,039 --> 00:05:46,800
um and we want to share with you our our

165
00:05:46,800 --> 00:05:48,560
experience that we that we had creating

166
00:05:48,560 --> 00:05:51,680
awareness for local temporary attacks

167
00:05:51,680 --> 00:05:54,320
and my name is greg johnson and i'm on

168
00:05:54,320 --> 00:05:55,919
the red team at gitlab

169
00:05:55,919 --> 00:05:58,400
and so my job is to to break software

170
00:05:58,400 --> 00:06:01,520
systems and and help make them better

171
00:06:01,520 --> 00:06:04,400
okay let's jump into explanation what

172
00:06:04,400 --> 00:06:08,000
log files are so when your package

173
00:06:08,000 --> 00:06:10,319
manager is installing your application

174
00:06:10,319 --> 00:06:12,240
dependencies there is a certain

175
00:06:12,240 --> 00:06:15,120
ambiguity which version of a dependency

176
00:06:15,120 --> 00:06:16,720
should be installed

177
00:06:16,720 --> 00:06:18,000
for example your application might

178
00:06:18,000 --> 00:06:19,759
depend on the latest version of a

179
00:06:19,759 --> 00:06:21,919
dependency

180
00:06:21,919 --> 00:06:22,720
and

181
00:06:22,720 --> 00:06:23,840
what

182
00:06:23,840 --> 00:06:26,639
latest is resolving to really changes at

183
00:06:26,639 --> 00:06:28,080
different points

184
00:06:28,080 --> 00:06:29,360
in time

185
00:06:29,360 --> 00:06:31,919
so latest is a moving target in other

186
00:06:31,919 --> 00:06:33,039
words

187
00:06:33,039 --> 00:06:36,000
and what this results in if you run your

188
00:06:36,000 --> 00:06:38,160
package manager to install dependencies

189
00:06:38,160 --> 00:06:39,840
multiple times at different points in

190
00:06:39,840 --> 00:06:41,120
time you will have different

191
00:06:41,120 --> 00:06:43,280
dependencies installed on your

192
00:06:43,280 --> 00:06:46,080
system and this leads to inconsistent

193
00:06:46,080 --> 00:06:48,319
application behavior

194
00:06:48,319 --> 00:06:50,080
and what log files

195
00:06:50,080 --> 00:06:52,800
get you is consistency here

196
00:06:52,800 --> 00:06:54,560
so let's have a look at

197
00:06:54,560 --> 00:06:59,080
how log files get you consistency

198
00:07:02,720 --> 00:07:05,440
um so every time the package manager

199
00:07:05,440 --> 00:07:09,120
adds or updates a dependency uh it's

200
00:07:09,120 --> 00:07:11,919
it's writing to the log file the exact

201
00:07:11,919 --> 00:07:14,000
url from where it pulled down the source

202
00:07:14,000 --> 00:07:17,039
code and the exact version that was

203
00:07:17,039 --> 00:07:18,560
installed

204
00:07:18,560 --> 00:07:19,680
so that

205
00:07:19,680 --> 00:07:22,240
future installation runs can go back to

206
00:07:22,240 --> 00:07:24,080
this information and download again the

207
00:07:24,080 --> 00:07:25,599
exact same

208
00:07:25,599 --> 00:07:28,319
version of the dependency

209
00:07:28,319 --> 00:07:29,520
log files are checked into source

210
00:07:29,520 --> 00:07:31,120
control

211
00:07:31,120 --> 00:07:33,360
so that the future installation runs can

212
00:07:33,360 --> 00:07:35,120
pull them down from source control and

213
00:07:35,120 --> 00:07:37,919
then work based off the log file

214
00:07:37,919 --> 00:07:39,599
and i really want to stress this point

215
00:07:39,599 --> 00:07:41,280
that log files are

216
00:07:41,280 --> 00:07:42,800
version controlled

217
00:07:42,800 --> 00:07:43,919
because this is where lock file

218
00:07:43,919 --> 00:07:45,680
tampering comes in if an attacker

219
00:07:45,680 --> 00:07:47,199
manages to to get a malicious

220
00:07:47,199 --> 00:07:49,919
modification to log files merged um then

221
00:07:49,919 --> 00:07:51,280
potentially attacker control

222
00:07:51,280 --> 00:07:53,680
dependencies will be installed on future

223
00:07:53,680 --> 00:07:57,160
installation runs

224
00:07:58,160 --> 00:08:01,440
so let's have a look um how

225
00:08:01,440 --> 00:08:03,280
a log file entry looks like before we

226
00:08:03,280 --> 00:08:04,800
talk about how you can tamper these

227
00:08:04,800 --> 00:08:06,000
entries

228
00:08:06,000 --> 00:08:08,000
so let's assume you use the package

229
00:08:08,000 --> 00:08:10,319
manager yarn and you add a dependency

230
00:08:10,319 --> 00:08:13,120
called calce to my app

231
00:08:13,120 --> 00:08:16,479
if you do that command then jan will

232
00:08:16,479 --> 00:08:18,240
write the following entry to the log

233
00:08:18,240 --> 00:08:20,879
file let's go over the the single lines

234
00:08:20,879 --> 00:08:23,280
in this entry

235
00:08:23,280 --> 00:08:24,800
the first line

236
00:08:24,800 --> 00:08:27,280
says for which dependency this entry is

237
00:08:27,280 --> 00:08:29,599
for so this is for cause a and then it

238
00:08:29,599 --> 00:08:32,399
gives a semantic version range um that

239
00:08:32,399 --> 00:08:34,159
uh that the log file manager has to

240
00:08:34,159 --> 00:08:36,320
resolve that installation time

241
00:08:36,320 --> 00:08:37,760
so not look for a manager to package

242
00:08:37,760 --> 00:08:41,519
manager as a result at installation time

243
00:08:41,519 --> 00:08:44,080
in the next line

244
00:08:44,080 --> 00:08:46,399
the the package manager

245
00:08:46,399 --> 00:08:49,120
notes down which exact version the

246
00:08:49,120 --> 00:08:51,200
previous semantic version was resolved

247
00:08:51,200 --> 00:08:55,399
to so in this case 1.5

248
00:08:55,839 --> 00:08:58,560
the next line is the exact url

249
00:08:58,560 --> 00:09:00,000
that

250
00:09:00,000 --> 00:09:01,440
from which the source files of the

251
00:09:01,440 --> 00:09:03,600
dependencies were downloaded

252
00:09:03,600 --> 00:09:06,480
and the next line is a checksum of the

253
00:09:06,480 --> 00:09:07,839
files that have been downloaded from the

254
00:09:07,839 --> 00:09:10,000
previous ul for the purpose of

255
00:09:10,000 --> 00:09:12,880
integrity checks

256
00:09:12,880 --> 00:09:15,120
and then the the next attribute here is

257
00:09:15,120 --> 00:09:17,120
about all the child dependencies of cal

258
00:09:17,120 --> 00:09:18,959
state but we don't need to go through

259
00:09:18,959 --> 00:09:20,959
all these entries because they follow

260
00:09:20,959 --> 00:09:23,839
the same pattern

261
00:09:24,320 --> 00:09:25,839
so now let's talk about log file

262
00:09:25,839 --> 00:09:27,360
tempering

263
00:09:27,360 --> 00:09:29,620
when you look at the the log file um

264
00:09:29,620 --> 00:09:30,720
[Music]

265
00:09:30,720 --> 00:09:33,120
there's a message that that says

266
00:09:33,120 --> 00:09:34,880
something like this is an auto generated

267
00:09:34,880 --> 00:09:38,480
file do not edit this file directly

268
00:09:38,480 --> 00:09:40,000
and

269
00:09:40,000 --> 00:09:42,399
this creates the the impression

270
00:09:42,399 --> 00:09:45,760
amongst developers in my experience that

271
00:09:45,760 --> 00:09:47,519
it's not possible to manually edit this

272
00:09:47,519 --> 00:09:50,480
file or young young would consider any

273
00:09:50,480 --> 00:09:52,560
manual edits to be invalid and would

274
00:09:52,560 --> 00:09:54,959
reject them and not install from from

275
00:09:54,959 --> 00:09:57,760
such log file but as it turns out that's

276
00:09:57,760 --> 00:09:59,519
not the case it's possible to manually

277
00:09:59,519 --> 00:10:01,600
edit the log file and yarn will still

278
00:10:01,600 --> 00:10:03,519
accept it as a log file as a valid log

279
00:10:03,519 --> 00:10:05,839
file and install dependencies from it

280
00:10:05,839 --> 00:10:07,440
and this can be

281
00:10:07,440 --> 00:10:10,240
used for log file temporary

282
00:10:10,240 --> 00:10:12,880
let's look at a introductory example of

283
00:10:12,880 --> 00:10:15,360
how log file tampering

284
00:10:15,360 --> 00:10:16,959
can happen

285
00:10:16,959 --> 00:10:19,040
so here we have a um

286
00:10:19,040 --> 00:10:21,120
another log file entry uh it's for the

287
00:10:21,120 --> 00:10:22,480
dependency

288
00:10:22,480 --> 00:10:24,160
dom purify

289
00:10:24,160 --> 00:10:26,640
um but if you pay close attention to the

290
00:10:26,640 --> 00:10:28,720
resolved url from from where the source

291
00:10:28,720 --> 00:10:30,560
code for this dependency was downloaded

292
00:10:30,560 --> 00:10:31,519
from

293
00:10:31,519 --> 00:10:34,480
it says don't purify so

294
00:10:34,480 --> 00:10:36,720
these two two letters here u and o have

295
00:10:36,720 --> 00:10:38,399
been twisted

296
00:10:38,399 --> 00:10:40,720
um and

297
00:10:40,720 --> 00:10:42,880
so what this means that the sources of

298
00:10:42,880 --> 00:10:44,959
this other dependency here don't really

299
00:10:44,959 --> 00:10:47,360
need to to match with what is expected

300
00:10:47,360 --> 00:10:51,200
when you would download uh dom purify

301
00:10:51,200 --> 00:10:53,680
um so an attacker could change the ul

302
00:10:53,680 --> 00:10:55,839
like this and then he also would need to

303
00:10:55,839 --> 00:10:58,240
of course to upgrade the integrity hash

304
00:10:58,240 --> 00:11:00,000
to match the sources that i downloaded

305
00:11:00,000 --> 00:11:01,279
from here

306
00:11:01,279 --> 00:11:03,920
um but if he if he does that and if his

307
00:11:03,920 --> 00:11:05,920
change would be accepted into the

308
00:11:05,920 --> 00:11:08,000
version control system then um the

309
00:11:08,000 --> 00:11:11,200
future installations would um install

310
00:11:11,200 --> 00:11:13,279
the attacker control dependency don't

311
00:11:13,279 --> 00:11:15,519
don't verify which might lead to

312
00:11:15,519 --> 00:11:18,880
arbitrary code execution

313
00:11:19,920 --> 00:11:21,600
let's have a look at another example

314
00:11:21,600 --> 00:11:23,760
there are many many ways how log files

315
00:11:23,760 --> 00:11:25,839
can be tampered and i just want to give

316
00:11:25,839 --> 00:11:26,959
you a

317
00:11:26,959 --> 00:11:29,600
brief idea of what's possible

318
00:11:29,600 --> 00:11:31,519
so here in this example

319
00:11:31,519 --> 00:11:33,680
certain attributes in the log file entry

320
00:11:33,680 --> 00:11:36,640
are repeated here resolved and integrity

321
00:11:36,640 --> 00:11:38,000
appears twice

322
00:11:38,000 --> 00:11:40,399
and just by looking at that log file

323
00:11:40,399 --> 00:11:42,959
entry it's difficult to tell what what

324
00:11:42,959 --> 00:11:45,760
yarn would do when

325
00:11:45,760 --> 00:11:47,760
when is processing this entry

326
00:11:47,760 --> 00:11:49,279
as it turns out

327
00:11:49,279 --> 00:11:50,959
if there are multiple entries yarn is

328
00:11:50,959 --> 00:11:52,959
using the latest

329
00:11:52,959 --> 00:11:55,920
the last occurrence of an entry

330
00:11:55,920 --> 00:11:58,160
and here again it would resolve the

331
00:11:58,160 --> 00:12:02,160
dependency don't purify to to purify as

332
00:12:02,160 --> 00:12:05,279
and not the intended dom purifying

333
00:12:05,279 --> 00:12:07,760
so here's another example of how

334
00:12:07,760 --> 00:12:10,320
log fire tampering could happen in this

335
00:12:10,320 --> 00:12:11,519
example

336
00:12:11,519 --> 00:12:14,000
the integrity attribute is removed

337
00:12:14,000 --> 00:12:15,279
altogether

338
00:12:15,279 --> 00:12:16,720
and

339
00:12:16,720 --> 00:12:19,279
interestingly jan is not rejecting this

340
00:12:19,279 --> 00:12:20,240
entry

341
00:12:20,240 --> 00:12:22,000
it's still downloading the sources and

342
00:12:22,000 --> 00:12:25,120
it will simply skip the integrity check

343
00:12:25,120 --> 00:12:28,000
so even if a malicious

344
00:12:28,000 --> 00:12:30,959
log file gets introduced that is uh not

345
00:12:30,959 --> 00:12:33,279
having an integrity hash that is opening

346
00:12:33,279 --> 00:12:35,839
up other interesting attack vectors

347
00:12:35,839 --> 00:12:38,399
where instead of tampering the the path

348
00:12:38,399 --> 00:12:41,519
of the resolved url we could tamper the

349
00:12:41,519 --> 00:12:44,160
the host of the resolved ul and

350
00:12:44,160 --> 00:12:46,160
essentially

351
00:12:46,160 --> 00:12:49,519
proxy the uh the request to download the

352
00:12:49,519 --> 00:12:51,519
dependency and since the integrity hash

353
00:12:51,519 --> 00:12:52,639
is missing

354
00:12:52,639 --> 00:12:55,120
jan would not realize that

355
00:12:55,120 --> 00:12:55,920
the

356
00:12:55,920 --> 00:12:59,199
the files have been changed

357
00:13:01,920 --> 00:13:03,600
and this is also not

358
00:13:03,600 --> 00:13:05,519
only specific to yarn version one so all

359
00:13:05,519 --> 00:13:07,120
the examples that i showed you so far

360
00:13:07,120 --> 00:13:09,040
was for yarn version one in the latest

361
00:13:09,040 --> 00:13:10,399
version of yarn

362
00:13:10,399 --> 00:13:12,560
the same basic uh

363
00:13:12,560 --> 00:13:15,120
problem still exists there are a couple

364
00:13:15,120 --> 00:13:16,720
of improvements how log faults are

365
00:13:16,720 --> 00:13:18,480
handled but essentially it's still

366
00:13:18,480 --> 00:13:22,480
possible to to to change the resolution

367
00:13:22,480 --> 00:13:25,279
to a different dependency

368
00:13:25,279 --> 00:13:27,279
same for

369
00:13:27,279 --> 00:13:31,519
npm v7 and the log file entry here looks

370
00:13:31,519 --> 00:13:32,800
a little bit different than what we have

371
00:13:32,800 --> 00:13:35,440
seen before but it's all very similar

372
00:13:35,440 --> 00:13:37,519
and here again you you can see that the

373
00:13:37,519 --> 00:13:40,000
dependency dom purify is resolved to do

374
00:13:40,000 --> 00:13:41,519
parify

375
00:13:41,519 --> 00:13:42,320
and

376
00:13:42,320 --> 00:13:44,480
npm will also install that without

377
00:13:44,480 --> 00:13:46,639
complaint

378
00:13:46,639 --> 00:13:49,760
and completely different ecosystem

379
00:13:49,760 --> 00:13:51,600
ruby bundler

380
00:13:51,600 --> 00:13:53,600
um so this is for installing

381
00:13:53,600 --> 00:13:56,160
gems here is an example of installing

382
00:13:56,160 --> 00:13:57,360
rails

383
00:13:57,360 --> 00:13:58,240
and

384
00:13:58,240 --> 00:13:59,760
with bundler

385
00:13:59,760 --> 00:14:00,720
it

386
00:14:00,720 --> 00:14:03,680
it doesn't store the ul exactly where

387
00:14:03,680 --> 00:14:04,399
the

388
00:14:04,399 --> 00:14:05,920
the source files have been downloaded

389
00:14:05,920 --> 00:14:09,040
for from for dependency um

390
00:14:09,040 --> 00:14:12,560
but what you can do is you can add

391
00:14:12,560 --> 00:14:15,839
additional dependencies that actually do

392
00:14:15,839 --> 00:14:17,360
not belong

393
00:14:17,360 --> 00:14:19,279
belong in there and banta will still

394
00:14:19,279 --> 00:14:21,519
install them like here in this example

395
00:14:21,519 --> 00:14:22,399
um

396
00:14:22,399 --> 00:14:24,560
all the usual dependencies that belong

397
00:14:24,560 --> 00:14:26,399
in here for rails are here

398
00:14:26,399 --> 00:14:29,839
and in addition also cause here because

399
00:14:29,839 --> 00:14:31,519
it doesn't belong there but bundler

400
00:14:31,519 --> 00:14:33,360
would still install it if he would

401
00:14:33,360 --> 00:14:35,199
install from this

402
00:14:35,199 --> 00:14:37,839
block file

403
00:14:39,360 --> 00:14:41,199
so now that we've talked a little bit

404
00:14:41,199 --> 00:14:42,399
about how

405
00:14:42,399 --> 00:14:44,560
log file jumping is happening i hand it

406
00:14:44,560 --> 00:14:47,279
back over to craig who will talk a bit

407
00:14:47,279 --> 00:14:50,240
more about the attacker perspective

408
00:14:50,240 --> 00:14:52,560
yes so the attacker's perspective of a

409
00:14:52,560 --> 00:14:54,320
lock file tampering attack is fairly

410
00:14:54,320 --> 00:14:55,519
straightforward

411
00:14:55,519 --> 00:14:59,040
the goal is to is as quietly as possible

412
00:14:59,040 --> 00:15:01,199
inject an attacker control dependency in

413
00:15:01,199 --> 00:15:02,959
this supply chain without breaking the

414
00:15:02,959 --> 00:15:05,120
functionality if possible

415
00:15:05,120 --> 00:15:06,399
meaning there's a need to fully

416
00:15:06,399 --> 00:15:08,079
understand the software stack the

417
00:15:08,079 --> 00:15:09,760
architecture and build systems that make

418
00:15:09,760 --> 00:15:12,639
a target application work some package

419
00:15:12,639 --> 00:15:14,320
managers have the concept of developer

420
00:15:14,320 --> 00:15:16,880
dependencies and production dependencies

421
00:15:16,880 --> 00:15:17,839
and

422
00:15:17,839 --> 00:15:19,600
this is important depending on what your

423
00:15:19,600 --> 00:15:20,959
target is so

424
00:15:20,959 --> 00:15:22,560
developer dependencies support the

425
00:15:22,560 --> 00:15:24,000
development of the application as you

426
00:15:24,000 --> 00:15:25,279
would expect

427
00:15:25,279 --> 00:15:26,800
from the name

428
00:15:26,800 --> 00:15:27,920
they're typically

429
00:15:27,920 --> 00:15:30,320
they typically sit on ci servers and

430
00:15:30,320 --> 00:15:32,639
developer machines

431
00:15:32,639 --> 00:15:34,160
but don't get deployed to the final

432
00:15:34,160 --> 00:15:37,120
production server

433
00:15:37,920 --> 00:15:40,399
developer machines typically have some

434
00:15:40,399 --> 00:15:42,320
sensitive key material passwords or

435
00:15:42,320 --> 00:15:43,440
information

436
00:15:43,440 --> 00:15:45,440
we as an attacker might be interested

437
00:15:45,440 --> 00:15:47,199
interested in

438
00:15:47,199 --> 00:15:49,199
look at how an application is configured

439
00:15:49,199 --> 00:15:50,880
to download its dependencies to better

440
00:15:50,880 --> 00:15:53,120
understand which type of dependencies

441
00:15:53,120 --> 00:15:55,680
you may want to tamper

442
00:15:55,680 --> 00:15:57,440
regardless of the target you're after

443
00:15:57,440 --> 00:15:59,199
the goal is typically to gain access to

444
00:15:59,199 --> 00:16:00,720
information in order to pivot or

445
00:16:00,720 --> 00:16:02,480
escalate privileges

446
00:16:02,480 --> 00:16:04,480
in other words tampering the lock file

447
00:16:04,480 --> 00:16:06,240
is probably not going to be the final

448
00:16:06,240 --> 00:16:08,880
stop for a live attack

449
00:16:08,880 --> 00:16:10,639
best practices and saw in the software

450
00:16:10,639 --> 00:16:12,320
industry as dennis

451
00:16:12,320 --> 00:16:13,920
has already mentioned

452
00:16:13,920 --> 00:16:15,440
suggest that lock files should be

453
00:16:15,440 --> 00:16:18,240
committed to an scm repository

454
00:16:18,240 --> 00:16:20,240
so in essence your attack is going to be

455
00:16:20,240 --> 00:16:22,320
somewhat visible that is if someone

456
00:16:22,320 --> 00:16:24,639
looks at it which isn't very common for

457
00:16:24,639 --> 00:16:25,920
lock files

458
00:16:25,920 --> 00:16:27,519
as we'll see in a minute lock files

459
00:16:27,519 --> 00:16:30,079
aren't very readable and developers tend

460
00:16:30,079 --> 00:16:32,959
to trust a machine generated file which

461
00:16:32,959 --> 00:16:34,880
isn't unreasonable

462
00:16:34,880 --> 00:16:37,120
but your job as an attacker is to make

463
00:16:37,120 --> 00:16:39,440
the lock file change look legitimate and

464
00:16:39,440 --> 00:16:42,399
incorporate it into a beneficial change

465
00:16:42,399 --> 00:16:44,480
both gitlab and github hide the lock

466
00:16:44,480 --> 00:16:46,399
file changes on their diff tab in some

467
00:16:46,399 --> 00:16:47,360
way

468
00:16:47,360 --> 00:16:49,199
the change set for even a minor version

469
00:16:49,199 --> 00:16:51,279
bump on a single dependency can be quite

470
00:16:51,279 --> 00:16:53,120
large

471
00:16:53,120 --> 00:16:54,800
and payloads for this type of attack can

472
00:16:54,800 --> 00:16:57,120
vary based on the goal of the attacker

473
00:16:57,120 --> 00:16:59,360
typically you'll see some code added to

474
00:16:59,360 --> 00:17:01,360
a hooked event that gets raised during

475
00:17:01,360 --> 00:17:03,600
the installation process

476
00:17:03,600 --> 00:17:05,599
but that's by no means the limit with

477
00:17:05,599 --> 00:17:08,079
regard to node specifically the event

478
00:17:08,079 --> 00:17:10,240
hooks available have changed a bit over

479
00:17:10,240 --> 00:17:11,599
time

480
00:17:11,599 --> 00:17:13,280
but these changes really have little

481
00:17:13,280 --> 00:17:15,439
impact on an attacker's ability to

482
00:17:15,439 --> 00:17:17,119
compromise a system with a lock file

483
00:17:17,119 --> 00:17:19,839
tampering attack

484
00:17:21,439 --> 00:17:22,959
we'll cover some red teaming aspects of

485
00:17:22,959 --> 00:17:25,039
this type of attack specifically as lock

486
00:17:25,039 --> 00:17:26,959
files are components and software

487
00:17:26,959 --> 00:17:28,640
architectures

488
00:17:28,640 --> 00:17:30,400
many software systems these days are

489
00:17:30,400 --> 00:17:32,240
polymorphic and then though the main

490
00:17:32,240 --> 00:17:34,480
application may be in golang or c sharp

491
00:17:34,480 --> 00:17:36,799
lock files may exist and

492
00:17:36,799 --> 00:17:40,320
for node.js in the same ecosystem

493
00:17:40,320 --> 00:17:41,520
to enable

494
00:17:41,520 --> 00:17:43,840
build and deployment features

495
00:17:43,840 --> 00:17:46,080
red teaming you'll obviously have some

496
00:17:46,080 --> 00:17:48,160
limitations around the sort of payloads

497
00:17:48,160 --> 00:17:49,679
you can logically deploy during the

498
00:17:49,679 --> 00:17:51,200
exercise

499
00:17:51,200 --> 00:17:52,799
know your audience and understand what

500
00:17:52,799 --> 00:17:55,840
you will need to need to show impact

501
00:17:55,840 --> 00:17:57,440
for most reaching out to an external

502
00:17:57,440 --> 00:17:59,120
server with with something like a random

503
00:17:59,120 --> 00:18:01,039
hash value for example

504
00:18:01,039 --> 00:18:03,440
will be enough to demonstrate impact

505
00:18:03,440 --> 00:18:05,520
maybe writing a text file to a specific

506
00:18:05,520 --> 00:18:07,440
place on your target system

507
00:18:07,440 --> 00:18:10,080
to show potential for arbitrary code

508
00:18:10,080 --> 00:18:11,360
execution

509
00:18:11,360 --> 00:18:12,799
is also good

510
00:18:12,799 --> 00:18:14,400
we'll show an example of that in just a

511
00:18:14,400 --> 00:18:17,200
minute your mileage may vary though so

512
00:18:17,200 --> 00:18:18,720
this is probably one of the more

513
00:18:18,720 --> 00:18:20,640
critical aspects to consider if you're

514
00:18:20,640 --> 00:18:21,919
going to red team with this type of

515
00:18:21,919 --> 00:18:24,240
attack

516
00:18:24,320 --> 00:18:26,000
i've included in this slide some

517
00:18:26,000 --> 00:18:28,480
information on relative relevant

518
00:18:28,480 --> 00:18:32,799
ttps in the mitre attack framework

519
00:18:34,000 --> 00:18:35,679
there are a lot of ways for a lock file

520
00:18:35,679 --> 00:18:37,600
tampering attack to happen it all

521
00:18:37,600 --> 00:18:39,600
depends on your target and if red

522
00:18:39,600 --> 00:18:41,520
teaming your organization's tolerance

523
00:18:41,520 --> 00:18:42,480
for

524
00:18:42,480 --> 00:18:44,559
more ambitious attacks exampled in the

525
00:18:44,559 --> 00:18:46,400
miter attack framework ttps from the

526
00:18:46,400 --> 00:18:48,160
previous slide

527
00:18:48,160 --> 00:18:49,919
something more real world

528
00:18:49,919 --> 00:18:53,039
where lock file tampering um isn't uh

529
00:18:53,039 --> 00:18:56,400
the final stop in the attack chain

530
00:18:56,400 --> 00:18:57,760
attackers are also looking for

531
00:18:57,760 --> 00:18:59,440
opportunities to reduce the footprint

532
00:18:59,440 --> 00:19:01,440
during injection the most subtle

533
00:19:01,440 --> 00:19:03,600
footprint of all regardless of lock

534
00:19:03,600 --> 00:19:04,640
files

535
00:19:04,640 --> 00:19:07,600
is an upstream dependency tamper

536
00:19:07,600 --> 00:19:09,840
it simply takes a downstream upgrade to

537
00:19:09,840 --> 00:19:12,080
compromise the systems

538
00:19:12,080 --> 00:19:14,080
if during the review process or viewer

539
00:19:14,080 --> 00:19:16,400
discs or changes the attacker will be

540
00:19:16,400 --> 00:19:19,120
the attack will be in plain sight but

541
00:19:19,120 --> 00:19:22,080
hopefully very difficult to detect

542
00:19:22,080 --> 00:19:24,640
the first step in general is to publish

543
00:19:24,640 --> 00:19:25,679
a convent

544
00:19:25,679 --> 00:19:27,280
a convincing package

545
00:19:27,280 --> 00:19:30,160
on a package management system

546
00:19:30,160 --> 00:19:32,160
um there are a lot of details to look

547
00:19:32,160 --> 00:19:33,360
for

548
00:19:33,360 --> 00:19:35,919
author the number of versions released

549
00:19:35,919 --> 00:19:38,960
download count naming publish dates all

550
00:19:38,960 --> 00:19:40,799
of which are typically displayed on a

551
00:19:40,799 --> 00:19:42,000
web page

552
00:19:42,000 --> 00:19:44,480
related to your dependency

553
00:19:44,480 --> 00:19:47,039
your malicious dependency

554
00:19:47,039 --> 00:19:48,799
download counts are simply a function of

555
00:19:48,799 --> 00:19:51,360
guitar file download or package manager

556
00:19:51,360 --> 00:19:54,000
installs they can be bash corrupted to

557
00:19:54,000 --> 00:19:55,520
get a closer account

558
00:19:55,520 --> 00:19:57,039
and most the critical data fields can be

559
00:19:57,039 --> 00:19:59,120
manipulated in some way so keep that in

560
00:19:59,120 --> 00:20:01,360
mind

561
00:20:01,919 --> 00:20:03,840
so i want to demo for you a tool called

562
00:20:03,840 --> 00:20:04,960
bump key

563
00:20:04,960 --> 00:20:06,640
it's an offensive tool to speed up the

564
00:20:06,640 --> 00:20:08,400
research process while looking for lock

565
00:20:08,400 --> 00:20:10,159
file attack vectors

566
00:20:10,159 --> 00:20:12,880
and to automate the process of tampering

567
00:20:12,880 --> 00:20:14,559
the lock file directly to make it more

568
00:20:14,559 --> 00:20:16,159
approachable and less prone to human

569
00:20:16,159 --> 00:20:18,400
error

570
00:20:18,480 --> 00:20:21,760
so now we'll jump into uh

571
00:20:21,760 --> 00:20:22,960
bum key and take a look at its

572
00:20:22,960 --> 00:20:25,600
functionality

573
00:20:25,600 --> 00:20:27,760
okay so before we dive directly into

574
00:20:27,760 --> 00:20:30,400
bumpkey i want to show you an example of

575
00:20:30,400 --> 00:20:34,559
a typical open source application

576
00:20:34,559 --> 00:20:36,640
in this case facebook's react and we'll

577
00:20:36,640 --> 00:20:38,960
take a quick look at the package json

578
00:20:38,960 --> 00:20:41,120
just to see what that looks like

579
00:20:41,120 --> 00:20:43,440
and here we see we have lots of

580
00:20:43,440 --> 00:20:45,280
scripts involved

581
00:20:45,280 --> 00:20:47,520
and lots of developer dependencies

582
00:20:47,520 --> 00:20:49,840
involved

583
00:20:50,000 --> 00:20:52,159
if we just take a quick look at the the

584
00:20:52,159 --> 00:20:54,799
length of the lock file itself

585
00:20:54,799 --> 00:20:59,200
we can see it's 16 000 lines long

586
00:20:59,360 --> 00:21:01,120
which is going to be pretty hard to

587
00:21:01,120 --> 00:21:04,400
review end-to-end for any developer

588
00:21:04,400 --> 00:21:06,880
so what i'll do now is take bumpkey and

589
00:21:06,880 --> 00:21:09,120
do a little recon on the react project

590
00:21:09,120 --> 00:21:10,559
to figure out

591
00:21:10,559 --> 00:21:11,440
what

592
00:21:11,440 --> 00:21:13,840
what specific dependencies are out of

593
00:21:13,840 --> 00:21:16,960
date within that project and

594
00:21:16,960 --> 00:21:18,799
some specific details that will help us

595
00:21:18,799 --> 00:21:20,880
as an attacker make a decision on which

596
00:21:20,880 --> 00:21:22,000
uh

597
00:21:22,000 --> 00:21:24,400
on which dependency to tamper

598
00:21:24,400 --> 00:21:26,799
so let's take a look at eslant

599
00:21:26,799 --> 00:21:28,799
what's specified in the package.json is

600
00:21:28,799 --> 00:21:30,799
770.

601
00:21:30,799 --> 00:21:32,320
what's wanted

602
00:21:32,320 --> 00:21:33,600
what's actually downloaded by the

603
00:21:33,600 --> 00:21:37,280
package lock file is 732

604
00:21:37,280 --> 00:21:39,840
and the latest version is 8.0 so they're

605
00:21:39,840 --> 00:21:42,400
full major version behind

606
00:21:42,400 --> 00:21:43,840
and we get some other helpful details

607
00:21:43,840 --> 00:21:46,159
like the url where the project's located

608
00:21:46,159 --> 00:21:48,240
where you can find bugs and dependency

609
00:21:48,240 --> 00:21:50,960
counts so this one has uh quite a bit of

610
00:21:50,960 --> 00:21:52,480
both dev and

611
00:21:52,480 --> 00:21:54,799
uh production dependencies

612
00:21:54,799 --> 00:21:56,960
so the idea there is

613
00:21:56,960 --> 00:22:00,640
um the more dependencies that a

614
00:22:00,640 --> 00:22:03,039
package has the more surface area there

615
00:22:03,039 --> 00:22:04,799
might be for an attack you don't

616
00:22:04,799 --> 00:22:06,880
necessarily have to tamper a top-level

617
00:22:06,880 --> 00:22:08,559
dependency

618
00:22:08,559 --> 00:22:10,480
you can tamper a dependency of a

619
00:22:10,480 --> 00:22:13,840
dependency for example

620
00:22:14,559 --> 00:22:16,400
and here we see we've got we've ignored

621
00:22:16,400 --> 00:22:20,240
68 up to date dependencies

622
00:22:20,240 --> 00:22:22,000
so for this

623
00:22:22,000 --> 00:22:24,080
next example i'm using

624
00:22:24,080 --> 00:22:27,679
the latest lts version of node um

625
00:22:27,679 --> 00:22:29,919
as i mentioned earlier some of the

626
00:22:29,919 --> 00:22:32,080
hook scripts that are available in node

627
00:22:32,080 --> 00:22:33,840
have changed over time

628
00:22:33,840 --> 00:22:35,600
it doesn't really impact the ability to

629
00:22:35,600 --> 00:22:37,280
do a deluxe field block file tampering

630
00:22:37,280 --> 00:22:39,120
attack but i just wanted to show what

631
00:22:39,120 --> 00:22:41,760
version i'm using here

632
00:22:41,760 --> 00:22:43,679
and next we're just going to take a look

633
00:22:43,679 --> 00:22:45,679
at a fake application

634
00:22:45,679 --> 00:22:48,400
to demo what a lock file tampering

635
00:22:48,400 --> 00:22:50,240
attack might look like

636
00:22:50,240 --> 00:22:52,159
and this one's pretty simple it pulls in

637
00:22:52,159 --> 00:22:54,559
a single dependency

638
00:22:54,559 --> 00:22:57,440
dom purify

639
00:22:58,240 --> 00:22:59,679
and it's simple enough where we can take

640
00:22:59,679 --> 00:23:02,080
a look at the package like json in full

641
00:23:02,080 --> 00:23:04,400
and and grok what's going on

642
00:23:04,400 --> 00:23:06,000
so here we see our dom purified

643
00:23:06,000 --> 00:23:08,799
dependency it's requesting 233 and we

644
00:23:08,799 --> 00:23:11,440
have defined our resolved

645
00:23:11,440 --> 00:23:14,960
uh url and and integrity hash both of

646
00:23:14,960 --> 00:23:17,679
which are valid

647
00:23:18,559 --> 00:23:20,480
so right now we have a clean git status

648
00:23:20,480 --> 00:23:23,280
history

649
00:23:24,480 --> 00:23:28,640
we have no dependencies installed

650
00:23:29,120 --> 00:23:31,679
and what our malicious dependency will

651
00:23:31,679 --> 00:23:32,480
do

652
00:23:32,480 --> 00:23:35,200
in just a moment is write a

653
00:23:35,200 --> 00:23:37,600
file to temp lol

654
00:23:37,600 --> 00:23:39,760
just to show the propensity for

655
00:23:39,760 --> 00:23:43,039
arbitrary code execution

656
00:23:48,880 --> 00:23:50,799
so now what i'm going to do with bumpkey

657
00:23:50,799 --> 00:23:53,679
is actually tamper the lock file

658
00:23:53,679 --> 00:23:57,200
in our fake application and re replace

659
00:23:57,200 --> 00:23:59,360
the dom purify

660
00:23:59,360 --> 00:24:01,919
package name

661
00:24:01,919 --> 00:24:03,360
by package name

662
00:24:03,360 --> 00:24:06,640
and replace that with our quote-unquote

663
00:24:06,640 --> 00:24:08,559
malicious dependency

664
00:24:08,559 --> 00:24:10,159
in this case

665
00:24:10,159 --> 00:24:13,120
uh doneporify notice the spelling

666
00:24:13,120 --> 00:24:14,720
difference

667
00:24:14,720 --> 00:24:16,799
and if we let that run

668
00:24:16,799 --> 00:24:18,559
we'll notice that we've got

669
00:24:18,559 --> 00:24:20,400
some diff changes introduced to the

670
00:24:20,400 --> 00:24:22,480
package lock file and if we diff those

671
00:24:22,480 --> 00:24:23,919
changes

672
00:24:23,919 --> 00:24:26,799
we can quickly see that the resolved url

673
00:24:26,799 --> 00:24:31,000
and the integrity hash have changed

674
00:24:32,960 --> 00:24:35,760
and if i install the dependencies

675
00:24:35,760 --> 00:24:37,840
and cut out that file that we expect to

676
00:24:37,840 --> 00:24:38,799
see

677
00:24:38,799 --> 00:24:41,840
we can see that it's been written to

678
00:24:41,840 --> 00:24:43,360
exemplify some

679
00:24:43,360 --> 00:24:47,279
arbitrary code execution as an example

680
00:24:47,279 --> 00:24:49,679
so now that that greg walked us through

681
00:24:49,679 --> 00:24:52,080
the bunkie tooling um

682
00:24:52,080 --> 00:24:54,159
we'll have a closer look at the defender

683
00:24:54,159 --> 00:24:55,440
side of

684
00:24:55,440 --> 00:24:57,279
log file tampering so how can you defend

685
00:24:57,279 --> 00:25:00,799
your projects from log file tampering

686
00:25:00,799 --> 00:25:02,240
and the key message

687
00:25:02,240 --> 00:25:03,760
that i want to get across is that log

688
00:25:03,760 --> 00:25:05,760
files are sensitive and all changes to

689
00:25:05,760 --> 00:25:09,679
them need to be reviewed carefully

690
00:25:10,080 --> 00:25:11,600
now that we have talked about log file

691
00:25:11,600 --> 00:25:13,760
jump ring and introduce how it works it

692
00:25:13,760 --> 00:25:15,679
might be obvious that this is the case

693
00:25:15,679 --> 00:25:17,600
but in our experience when we talk to

694
00:25:17,600 --> 00:25:19,600
developers they were really surprised to

695
00:25:19,600 --> 00:25:21,679
to see that a lot of tempering is

696
00:25:21,679 --> 00:25:23,679
possible at all they thought

697
00:25:23,679 --> 00:25:25,760
somehow package managers would verify

698
00:25:25,760 --> 00:25:28,880
the integrity of the log file

699
00:25:28,880 --> 00:25:31,840
but that's not the case

700
00:25:33,360 --> 00:25:34,799
so how can you protect log file

701
00:25:34,799 --> 00:25:37,840
integrity in your

702
00:25:37,840 --> 00:25:39,679
projects first

703
00:25:39,679 --> 00:25:42,000
you should familiarize yourself how your

704
00:25:42,000 --> 00:25:44,720
sem solution display log file divs

705
00:25:44,720 --> 00:25:47,279
sometimes it's necessary to take manual

706
00:25:47,279 --> 00:25:49,679
action to see actually the div

707
00:25:49,679 --> 00:25:51,919
here is an example of how it looks in

708
00:25:51,919 --> 00:25:53,120
gitlab

709
00:25:53,120 --> 00:25:55,520
this is a

710
00:25:55,520 --> 00:25:58,400
merge request that is changing the yarn

711
00:25:58,400 --> 00:26:00,960
lock file and uh because there are too

712
00:26:00,960 --> 00:26:03,760
many uh lines that that have been

713
00:26:03,760 --> 00:26:06,480
updated in this merge request the file

714
00:26:06,480 --> 00:26:08,240
is not shown

715
00:26:08,240 --> 00:26:11,360
um so you need to click on view file to

716
00:26:11,360 --> 00:26:14,000
actually see the changes before you

717
00:26:14,000 --> 00:26:16,080
inspect log files on your

718
00:26:16,080 --> 00:26:18,400
local computer you should make sure that

719
00:26:18,400 --> 00:26:20,720
the content of the log file is okay

720
00:26:20,720 --> 00:26:22,400
especially you should not

721
00:26:22,400 --> 00:26:24,640
install from the log file on your

722
00:26:24,640 --> 00:26:26,880
computer without having

723
00:26:26,880 --> 00:26:28,720
inspected the file because if it's

724
00:26:28,720 --> 00:26:30,480
actually tempered at the time of

725
00:26:30,480 --> 00:26:32,559
installation it's already might be too

726
00:26:32,559 --> 00:26:34,799
late

727
00:26:36,000 --> 00:26:37,279
another

728
00:26:37,279 --> 00:26:39,520
way to raise the bar of

729
00:26:39,520 --> 00:26:41,600
what the successful log file tempering

730
00:26:41,600 --> 00:26:43,520
attack could look like is to use

731
00:26:43,520 --> 00:26:45,440
automated dependency updates

732
00:26:45,440 --> 00:26:46,640
um

733
00:26:46,640 --> 00:26:48,400
if you if you

734
00:26:48,400 --> 00:26:50,720
stop accepting trivial contributions

735
00:26:50,720 --> 00:26:52,400
that just for example bump the

736
00:26:52,400 --> 00:26:55,679
dependency version um you make it more

737
00:26:55,679 --> 00:26:57,520
harder for an attacker to put together a

738
00:26:57,520 --> 00:26:59,279
convincing contribution that is

739
00:26:59,279 --> 00:27:02,480
containing workflow tampering and

740
00:27:02,480 --> 00:27:04,159
there are very various bots that can

741
00:27:04,159 --> 00:27:05,919
help you with automating log file

742
00:27:05,919 --> 00:27:07,200
updates so

743
00:27:07,200 --> 00:27:09,520
this just

744
00:27:09,520 --> 00:27:11,760
reduces a very low effort attack vector

745
00:27:11,760 --> 00:27:14,559
for the attacker

746
00:27:14,880 --> 00:27:17,200
and here's an example how an automated

747
00:27:17,200 --> 00:27:19,120
dependency merge requests might look

748
00:27:19,120 --> 00:27:21,360
like this has been created by a renovate

749
00:27:21,360 --> 00:27:22,799
bot

750
00:27:22,799 --> 00:27:25,679
just make sure that if you use this that

751
00:27:25,679 --> 00:27:27,840
it cannot easily be

752
00:27:27,840 --> 00:27:29,520
impersonated by an attacker by just

753
00:27:29,520 --> 00:27:30,960
copying

754
00:27:30,960 --> 00:27:31,679
the

755
00:27:31,679 --> 00:27:35,480
layout of the merge request

756
00:27:38,640 --> 00:27:40,080
and also when you

757
00:27:40,080 --> 00:27:43,200
evaluate which dependencies to use you

758
00:27:43,200 --> 00:27:46,159
might want to pay attention to how

759
00:27:46,159 --> 00:27:48,320
dependencies are reviewing log file

760
00:27:48,320 --> 00:27:50,720
changes because as craig mentioned um

761
00:27:50,720 --> 00:27:52,720
the dependencies that in the supply

762
00:27:52,720 --> 00:27:54,720
chain could also fall victim to log file

763
00:27:54,720 --> 00:27:57,200
tempering

764
00:27:58,159 --> 00:27:59,840
um now let's have a quick look at the

765
00:27:59,840 --> 00:28:02,880
demo for how to

766
00:28:02,880 --> 00:28:05,360
for how to automatically check

767
00:28:05,360 --> 00:28:08,799
the integrity of log files

768
00:28:09,039 --> 00:28:11,279
so this is the demo of antenna by my

769
00:28:11,279 --> 00:28:11,690
logo file

770
00:28:11,690 --> 00:28:12,880
[Music]

771
00:28:12,880 --> 00:28:14,960
and as i mentioned it's here the

772
00:28:14,960 --> 00:28:17,200
counterpart to bump key

773
00:28:17,200 --> 00:28:19,279
the demo picks up essentially where

774
00:28:19,279 --> 00:28:20,640
correct demo

775
00:28:20,640 --> 00:28:22,799
craigs demo ended we have a template log

776
00:28:22,799 --> 00:28:25,039
file and

777
00:28:25,039 --> 00:28:27,279
i already installed the dependencies

778
00:28:27,279 --> 00:28:29,200
from that log file and just to to show

779
00:28:29,200 --> 00:28:31,200
you that um

780
00:28:31,200 --> 00:28:33,039
it actually worked so here you can see

781
00:28:33,039 --> 00:28:33,840
uh

782
00:28:33,840 --> 00:28:34,960
the the

783
00:28:34,960 --> 00:28:36,640
file was written to temp

784
00:28:36,640 --> 00:28:39,679
um now let's see if we uh instead use

785
00:28:39,679 --> 00:28:40,559
our

786
00:28:40,559 --> 00:28:42,799
defensive tooling on that log file to

787
00:28:42,799 --> 00:28:45,039
check the integrity so how that works is

788
00:28:45,039 --> 00:28:47,360
you you call the

789
00:28:47,360 --> 00:28:50,480
tool like this you pass in the log file

790
00:28:50,480 --> 00:28:52,320
that you want to check and then the tool

791
00:28:52,320 --> 00:28:54,080
goes through each dependency in your log

792
00:28:54,080 --> 00:28:56,320
file and it checks that the metadata

793
00:28:56,320 --> 00:28:58,640
that is recorded in the log file matches

794
00:28:58,640 --> 00:29:01,919
with what is stored in the registry

795
00:29:01,919 --> 00:29:04,799
and if there is any mismatch

796
00:29:04,799 --> 00:29:07,039
between the data in the log file in the

797
00:29:07,039 --> 00:29:09,440
registry it will report an error and

798
00:29:09,440 --> 00:29:11,679
here as we would expect it reports an

799
00:29:11,679 --> 00:29:13,279
error for dom purify because the

800
00:29:13,279 --> 00:29:15,679
integrity hash and the resolved url

801
00:29:15,679 --> 00:29:18,240
don't match

802
00:29:19,039 --> 00:29:21,760
i'd recommend to to run the tool in a ci

803
00:29:21,760 --> 00:29:22,640
job

804
00:29:22,640 --> 00:29:25,120
and let it run every time

805
00:29:25,120 --> 00:29:28,000
there are changes checked or

806
00:29:28,000 --> 00:29:30,320
submitted to to your project

807
00:29:30,320 --> 00:29:32,480
um so it will automatically fail

808
00:29:32,480 --> 00:29:34,399
pipelines if log file tampering is

809
00:29:34,399 --> 00:29:36,960
detected here's an example for gitlab ci

810
00:29:36,960 --> 00:29:38,559
you can just copy and paste that into

811
00:29:38,559 --> 00:29:41,440
your ci config and then

812
00:29:41,440 --> 00:29:44,399
if actually the the tool uh that puts an

813
00:29:44,399 --> 00:29:45,360
error

814
00:29:45,360 --> 00:29:48,159
you see the pipeline is failing and this

815
00:29:48,159 --> 00:29:50,559
should create enough noise for you to

816
00:29:50,559 --> 00:29:52,240
figure out that there's a lot for a

817
00:29:52,240 --> 00:29:54,559
temporary attack going on

818
00:29:54,559 --> 00:29:57,360
yes and uh for closing words uh just a

819
00:29:57,360 --> 00:29:59,120
couple of things that i want to mention

820
00:29:59,120 --> 00:30:01,760
um both dennis's tool untampering my

821
00:30:01,760 --> 00:30:04,399
lock file and uh bumpkey

822
00:30:04,399 --> 00:30:06,840
are open source and we welcome

823
00:30:06,840 --> 00:30:08,960
contributions from a red teaming

824
00:30:08,960 --> 00:30:10,320
perspective there's just a couple of

825
00:30:10,320 --> 00:30:12,240
closing points that i want to mention

826
00:30:12,240 --> 00:30:13,279
um

827
00:30:13,279 --> 00:30:15,520
leadership communication and

828
00:30:15,520 --> 00:30:17,760
careful control thereof is is probably

829
00:30:17,760 --> 00:30:19,520
one of the more important aspects if you

830
00:30:19,520 --> 00:30:21,200
plan to red team this time type of

831
00:30:21,200 --> 00:30:22,799
attack

832
00:30:22,799 --> 00:30:24,720
keep the goal in mind which is to to

833
00:30:24,720 --> 00:30:27,520
test the controls and make them better

834
00:30:27,520 --> 00:30:29,360
whether you're

835
00:30:29,360 --> 00:30:31,840
you're focused on the defensive side or

836
00:30:31,840 --> 00:30:34,799
the offensive side

837
00:30:35,120 --> 00:30:36,799
be aware that there can be some social

838
00:30:36,799 --> 00:30:39,520
aspects um in relation to this type of

839
00:30:39,520 --> 00:30:40,480
attack

840
00:30:40,480 --> 00:30:42,880
uh reviewers will likely want to talk to

841
00:30:42,880 --> 00:30:44,399
you about your changes

842
00:30:44,399 --> 00:30:46,559
be able to speak to them and and justify

843
00:30:46,559 --> 00:30:47,600
them

844
00:30:47,600 --> 00:30:50,480
uh and there can be an element of

845
00:30:50,480 --> 00:30:52,480
uh social engineering in tandem with

846
00:30:52,480 --> 00:30:54,000
this type of attack so that's something

847
00:30:54,000 --> 00:30:56,640
to be aware of as well

848
00:30:56,640 --> 00:30:58,399
um in closing thank you for listening

849
00:30:58,399 --> 00:31:01,020
and uh we we welcome your contributions

850
00:31:01,020 --> 00:31:11,420
[Music]

851
00:31:13,440 --> 00:31:15,519
you

