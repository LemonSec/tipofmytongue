1
00:00:00,860 --> 00:00:09,280
[Music]

2
00:00:09,280 --> 00:00:10,559
hi everyone

3
00:00:10,559 --> 00:00:12,480
thank you for attending our talk today

4
00:00:12,480 --> 00:00:15,360
tom and i i'm john will be talking about

5
00:00:15,360 --> 00:00:16,720
exploiting uh

6
00:00:16,720 --> 00:00:19,199
reading systems or how your ebook might

7
00:00:19,199 --> 00:00:21,520
be reading you

8
00:00:21,520 --> 00:00:23,840
first a little bit of context so

9
00:00:23,840 --> 00:00:26,640
nowadays when a book is published it's

10
00:00:26,640 --> 00:00:28,960
not only published in a physical format

11
00:00:28,960 --> 00:00:31,679
but also in a digital format so called

12
00:00:31,679 --> 00:00:32,800
ebooks

13
00:00:32,800 --> 00:00:35,600
and throughout the years a lot of ebook

14
00:00:35,600 --> 00:00:37,840
formats have risen

15
00:00:37,840 --> 00:00:40,160
most of them proprietary

16
00:00:40,160 --> 00:00:42,960
now in this project we focused on one

17
00:00:42,960 --> 00:00:46,320
ebook format being the e-performance

18
00:00:46,320 --> 00:00:48,719
based on the epa technical standards why

19
00:00:48,719 --> 00:00:50,719
this one because it's an open technical

20
00:00:50,719 --> 00:00:52,559
standard which means that essentially

21
00:00:52,559 --> 00:00:55,680
anyone can create an epub or an ebook

22
00:00:55,680 --> 00:00:57,280
reading system

23
00:00:57,280 --> 00:00:58,800
also because it's one of the most

24
00:00:58,800 --> 00:01:02,079
popular formats nowadays on virtually

25
00:01:02,079 --> 00:01:04,159
any device you can find an application

26
00:01:04,159 --> 00:01:06,240
that renders e-books i'm talking about

27
00:01:06,240 --> 00:01:09,040
smartphones tablets laptops and even

28
00:01:09,040 --> 00:01:13,040
those e-ink reading devices

29
00:01:13,040 --> 00:01:15,119
so what is discussed in the epub

30
00:01:15,119 --> 00:01:17,360
technical standard well in its latest

31
00:01:17,360 --> 00:01:19,920
installment there's actually two main

32
00:01:19,920 --> 00:01:22,960
parts in content context of this project

33
00:01:22,960 --> 00:01:24,000
first

34
00:01:24,000 --> 00:01:25,840
we have

35
00:01:25,840 --> 00:01:27,920
discussion on how an ebook file should

36
00:01:27,920 --> 00:01:29,600
be formatted

37
00:01:29,600 --> 00:01:32,000
and how epub reading systems should

38
00:01:32,000 --> 00:01:33,680
render ebook files and which

39
00:01:33,680 --> 00:01:35,759
capabilities should be granted to those

40
00:01:35,759 --> 00:01:38,320
loaded epubs

41
00:01:38,320 --> 00:01:40,320
an epic file is essentially a zip

42
00:01:40,320 --> 00:01:42,560
archive with an internal predefined

43
00:01:42,560 --> 00:01:43,680
structure

44
00:01:43,680 --> 00:01:45,600
and here we also find the publication

45
00:01:45,600 --> 00:01:48,399
resources like the text and imagery that

46
00:01:48,399 --> 00:01:50,560
make up the book that is represented by

47
00:01:50,560 --> 00:01:52,399
the ebit file

48
00:01:52,399 --> 00:01:54,240
and this actually relies on web

49
00:01:54,240 --> 00:01:57,520
technology it's defined by xhtml css

50
00:01:57,520 --> 00:02:00,960
style sheets and even javascript code

51
00:02:00,960 --> 00:02:02,960
so say you're a developer and you want

52
00:02:02,960 --> 00:02:06,079
to develop an ebook reading system

53
00:02:06,079 --> 00:02:07,600
you aren't going to reinvent the wheel

54
00:02:07,600 --> 00:02:10,800
right so you're gonna use a web engine

55
00:02:10,800 --> 00:02:12,959
that has been around for decades that's

56
00:02:12,959 --> 00:02:15,680
uh regularly updated

57
00:02:15,680 --> 00:02:17,920
um and you're gonna embed it in your

58
00:02:17,920 --> 00:02:20,080
reading system that's what most uh

59
00:02:20,080 --> 00:02:23,120
applications actually do um of course

60
00:02:23,120 --> 00:02:24,640
it's not that simple because there's

61
00:02:24,640 --> 00:02:26,879
also some considerations mentioned in

62
00:02:26,879 --> 00:02:28,640
the technical standards

63
00:02:28,640 --> 00:02:32,080
like for example remote resources

64
00:02:32,080 --> 00:02:34,319
in the specification a remote mode

65
00:02:34,319 --> 00:02:37,920
resource is a resource that is located

66
00:02:37,920 --> 00:02:40,239
outside of the epic container so outside

67
00:02:40,239 --> 00:02:42,319
of the of the zip archive

68
00:02:42,319 --> 00:02:44,959
typically but not necessarily online

69
00:02:44,959 --> 00:02:47,519
so in essence this means that the epub

70
00:02:47,519 --> 00:02:50,400
will be able to refer to a local file on

71
00:02:50,400 --> 00:02:53,120
the user's file system or to a resource

72
00:02:53,120 --> 00:02:54,800
on the internet

73
00:02:54,800 --> 00:02:57,280
now of course there are some important

74
00:02:57,280 --> 00:02:59,360
security considerations that are also

75
00:02:59,360 --> 00:03:01,920
discussed in the technical standard for

76
00:03:01,920 --> 00:03:03,120
example

77
00:03:03,120 --> 00:03:06,080
when a network activity occurs of or

78
00:03:06,080 --> 00:03:08,480
will be occurring to fetch a remote

79
00:03:08,480 --> 00:03:09,599
resource

80
00:03:09,599 --> 00:03:12,640
the user should first give consent of at

81
00:03:12,640 --> 00:03:15,680
least be notified of this activity

82
00:03:15,680 --> 00:03:18,720
and then even more important

83
00:03:18,720 --> 00:03:22,720
only the rendering of such a resource is

84
00:03:22,720 --> 00:03:23,760
allowed

85
00:03:23,760 --> 00:03:26,159
scripts in the ebook file

86
00:03:26,159 --> 00:03:27,840
are not allowed to actually inspect the

87
00:03:27,840 --> 00:03:30,080
content this is very similar to the same

88
00:03:30,080 --> 00:03:32,480
origin policy on the web so when one

89
00:03:32,480 --> 00:03:34,560
website embeds content from another

90
00:03:34,560 --> 00:03:35,760
website

91
00:03:35,760 --> 00:03:38,080
its scripts are not allowed to actually

92
00:03:38,080 --> 00:03:41,360
inspect the content

93
00:03:41,599 --> 00:03:42,480
um

94
00:03:42,480 --> 00:03:43,680
okay so

95
00:03:43,680 --> 00:03:46,560
what did we actually investigate in the

96
00:03:46,560 --> 00:03:48,720
first part of the presentation

97
00:03:48,720 --> 00:03:50,480
will answer the question

98
00:03:50,480 --> 00:03:52,560
what is the state of these freely

99
00:03:52,560 --> 00:03:55,280
available ebook reading systems

100
00:03:55,280 --> 00:03:56,959
first in the context of granted

101
00:03:56,959 --> 00:03:59,360
capabilities so what are ebibs allowed

102
00:03:59,360 --> 00:04:01,519
to do when loaded in an epub reading

103
00:04:01,519 --> 00:04:04,159
system but also in terms of the security

104
00:04:04,159 --> 00:04:06,159
considerations are these security

105
00:04:06,159 --> 00:04:07,760
considerations discussed in the

106
00:04:07,760 --> 00:04:12,000
specification upheld by the developers

107
00:04:12,000 --> 00:04:14,959
in the second part um we will look at

108
00:04:14,959 --> 00:04:16,798
the capabilities

109
00:04:16,798 --> 00:04:19,918
uh are they being abused in the wild

110
00:04:19,918 --> 00:04:22,320
first in the context of a malicious epub

111
00:04:22,320 --> 00:04:25,040
so for example an attacker might abuse

112
00:04:25,040 --> 00:04:27,120
an epub to actually steal information

113
00:04:27,120 --> 00:04:29,680
from your your system or to actually

114
00:04:29,680 --> 00:04:31,440
hack your system

115
00:04:31,440 --> 00:04:33,199
but this can also be looked at in the

116
00:04:33,199 --> 00:04:35,840
context of a publisher for example if

117
00:04:35,840 --> 00:04:37,919
you buy an ebook

118
00:04:37,919 --> 00:04:39,919
book from a vendor

119
00:04:39,919 --> 00:04:42,560
it might include tracking

120
00:04:42,560 --> 00:04:44,960
codes to actually for example

121
00:04:44,960 --> 00:04:47,520
have a look at what other books make up

122
00:04:47,520 --> 00:04:50,560
your personal library

123
00:04:50,560 --> 00:04:52,240
so let's have a look at the first

124
00:04:52,240 --> 00:04:53,440
question

125
00:04:53,440 --> 00:04:56,800
for this we evaluated a total of 97

126
00:04:56,800 --> 00:04:59,360
reading systems

127
00:04:59,360 --> 00:05:00,800
like shown here

128
00:05:00,800 --> 00:05:04,639
27 desktop applications 55 mobile apps

129
00:05:04,639 --> 00:05:07,120
then browser extensions and 5 physical

130
00:05:07,120 --> 00:05:10,000
e-readers

131
00:05:10,000 --> 00:05:12,400
did this using or developing a

132
00:05:12,400 --> 00:05:14,479
semi-automated black box evaluation

133
00:05:14,479 --> 00:05:18,160
framework which is essentially a testbed

134
00:05:18,160 --> 00:05:21,440
of multiple ebooks and when such an epub

135
00:05:21,440 --> 00:05:23,360
is loaded in an

136
00:05:23,360 --> 00:05:25,600
reading system it would automatically

137
00:05:25,600 --> 00:05:27,919
execute our

138
00:05:27,919 --> 00:05:30,400
experiments

139
00:05:30,400 --> 00:05:32,479
after the experiments the results will

140
00:05:32,479 --> 00:05:35,199
be shown on the e-reader screen

141
00:05:35,199 --> 00:05:37,440
or will be sent to our local web server

142
00:05:37,440 --> 00:05:39,280
if allowed by the e-book reading system

143
00:05:39,280 --> 00:05:40,400
of course

144
00:05:40,400 --> 00:05:42,400
on the right you can see the experiments

145
00:05:42,400 --> 00:05:43,520
that we

146
00:05:43,520 --> 00:05:45,680
executed

147
00:05:45,680 --> 00:05:48,400
due to timing constraints i won't

148
00:05:48,400 --> 00:05:50,639
be able to explain them all in detail

149
00:05:50,639 --> 00:05:52,320
but in the next few slides i will

150
00:05:52,320 --> 00:05:55,360
discuss the most interesting ones

151
00:05:55,360 --> 00:05:58,160
also we open sourced this testbed of

152
00:05:58,160 --> 00:05:59,199
epubs

153
00:05:59,199 --> 00:06:01,360
so if you're interested have a look at

154
00:06:01,360 --> 00:06:04,479
our github repo

155
00:06:05,199 --> 00:06:07,919
in the first experiment we check whether

156
00:06:07,919 --> 00:06:11,039
javascript is executed

157
00:06:11,039 --> 00:06:12,720
so this is quite simple we include

158
00:06:12,720 --> 00:06:14,319
javascript

159
00:06:14,319 --> 00:06:16,400
to be comprehensive we included it in

160
00:06:16,400 --> 00:06:18,880
different ways so for example inline or

161
00:06:18,880 --> 00:06:20,880
external

162
00:06:20,880 --> 00:06:23,280
also to

163
00:06:23,280 --> 00:06:25,039
account for the

164
00:06:25,039 --> 00:06:27,840
eva reading systems that might embed a

165
00:06:27,840 --> 00:06:30,800
very outdated web engine we try to be as

166
00:06:30,800 --> 00:06:32,880
backwards compatible as possible for

167
00:06:32,880 --> 00:06:35,280
example we used ecmascript 5 instead of

168
00:06:35,280 --> 00:06:38,400
6 and we also avoided using

169
00:06:38,400 --> 00:06:41,280
the more recent java script function

170
00:06:41,280 --> 00:06:43,679
goals

171
00:06:43,919 --> 00:06:46,479
as for remote communication we leveraged

172
00:06:46,479 --> 00:06:48,160
a get ghetto prepo

173
00:06:48,160 --> 00:06:50,319
named http leaks which is a

174
00:06:50,319 --> 00:06:53,120
comprehensive set of html tags that

175
00:06:53,120 --> 00:06:55,039
initiate requests

176
00:06:55,039 --> 00:06:56,720
so using these

177
00:06:56,720 --> 00:06:58,720
tags and also some other javascript

178
00:06:58,720 --> 00:07:01,520
function calls we tried to initiate

179
00:07:01,520 --> 00:07:03,919
requests to our own server and server

180
00:07:03,919 --> 00:07:06,240
side we checked whether the request was

181
00:07:06,240 --> 00:07:08,880
received such that we could safely say

182
00:07:08,880 --> 00:07:10,319
whether remote communication was

183
00:07:10,319 --> 00:07:11,599
supported

184
00:07:11,599 --> 00:07:13,840
also client side we checked the consent

185
00:07:13,840 --> 00:07:14,720
flow

186
00:07:14,720 --> 00:07:16,880
and checked whether any notification was

187
00:07:16,880 --> 00:07:19,520
given to the user

188
00:07:19,520 --> 00:07:23,280
about this network activity

189
00:07:24,000 --> 00:07:25,599
and we also checked

190
00:07:25,599 --> 00:07:28,800
if the epub was allowed to

191
00:07:28,800 --> 00:07:30,720
access the local file system

192
00:07:30,720 --> 00:07:32,720
for example using the file protocol

193
00:07:32,720 --> 00:07:35,759
using a direct link at the resource

194
00:07:35,759 --> 00:07:39,840
that might be interesting to an attacker

195
00:07:39,919 --> 00:07:43,680
to bypass the potential enforcement of

196
00:07:43,680 --> 00:07:46,800
the same origin policy we also leveraged

197
00:07:46,800 --> 00:07:49,280
symbolic links

198
00:07:49,280 --> 00:07:50,639
so first

199
00:07:50,639 --> 00:07:53,919
we try to infer whether a file existed

200
00:07:53,919 --> 00:07:55,440
on the file system

201
00:07:55,440 --> 00:07:58,000
the easiest way to do this is by trying

202
00:07:58,000 --> 00:08:00,240
to render the file for example in an

203
00:08:00,240 --> 00:08:03,199
iframe and then check whether the unload

204
00:08:03,199 --> 00:08:04,800
event is fired

205
00:08:04,800 --> 00:08:06,720
if that didn't work we tried timing

206
00:08:06,720 --> 00:08:10,479
attacks so we compared the timings

207
00:08:10,479 --> 00:08:13,840
needed to fetch a non-existing file with

208
00:08:13,840 --> 00:08:17,840
the timings needed to uh check um the

209
00:08:17,840 --> 00:08:19,680
existence of or

210
00:08:19,680 --> 00:08:22,319
the time needed to fetch um an existing

211
00:08:22,319 --> 00:08:27,039
file and if there if the difference was

212
00:08:28,000 --> 00:08:30,560
if the difference was consistent we

213
00:08:30,560 --> 00:08:32,320
could

214
00:08:32,320 --> 00:08:34,640
conclude that the attacker

215
00:08:34,640 --> 00:08:36,719
might be able to infer the existence

216
00:08:36,719 --> 00:08:38,640
through a timing attack

217
00:08:38,640 --> 00:08:41,120
and here we also looked at the on error

218
00:08:41,120 --> 00:08:42,000
event

219
00:08:42,000 --> 00:08:43,039
of

220
00:08:43,039 --> 00:08:45,360
the fetch for example

221
00:08:45,360 --> 00:08:48,000
also we used a file system in user space

222
00:08:48,000 --> 00:08:50,240
this is a file system on top of the

223
00:08:50,240 --> 00:08:53,279
native file system with can which can be

224
00:08:53,279 --> 00:08:54,720
altered to lock

225
00:08:54,720 --> 00:08:58,000
access to certain files

226
00:08:58,959 --> 00:09:01,680
we also try to leak file contents using

227
00:09:01,680 --> 00:09:04,800
various javascript apis and also

228
00:09:04,800 --> 00:09:06,480
some html

229
00:09:06,480 --> 00:09:09,480
tags

230
00:09:09,920 --> 00:09:12,880
so uri schemes can be used to give a

231
00:09:12,880 --> 00:09:16,720
hint uh at the operating system

232
00:09:16,720 --> 00:09:19,279
as to which application to use

233
00:09:19,279 --> 00:09:21,120
to open the link for example in this

234
00:09:21,120 --> 00:09:22,399
first links

235
00:09:22,399 --> 00:09:25,040
if you click it on on the link with the

236
00:09:25,040 --> 00:09:26,720
mail to scheme

237
00:09:26,720 --> 00:09:29,200
your operating system will open your

238
00:09:29,200 --> 00:09:31,360
default mailing application

239
00:09:31,360 --> 00:09:33,680
which will start a draft directed at my

240
00:09:33,680 --> 00:09:35,279
email address

241
00:09:35,279 --> 00:09:37,680
but this could be abused by an attacker

242
00:09:37,680 --> 00:09:41,279
um how did we test it this we put a url

243
00:09:41,279 --> 00:09:44,320
in an html document inside the ebook and

244
00:09:44,320 --> 00:09:46,399
then using javascript you we use the

245
00:09:46,399 --> 00:09:49,600
click function to actually emulate a

246
00:09:49,600 --> 00:09:52,320
user click and then we check the consent

247
00:09:52,320 --> 00:09:54,160
flow first at the level of the reading

248
00:09:54,160 --> 00:09:55,680
system

249
00:09:55,680 --> 00:09:57,920
and also at the level of the target

250
00:09:57,920 --> 00:09:59,279
application

251
00:09:59,279 --> 00:10:02,720
there's also some custom uri schemes

252
00:10:02,720 --> 00:10:05,839
like twitter if you click this link

253
00:10:05,839 --> 00:10:07,680
on your mobile device and twitter is

254
00:10:07,680 --> 00:10:10,079
installed then this application will

255
00:10:10,079 --> 00:10:11,120
open

256
00:10:11,120 --> 00:10:13,920
so how could this be abused for example

257
00:10:13,920 --> 00:10:16,079
uh the attacker might try to steal your

258
00:10:16,079 --> 00:10:18,800
telephone number for example by tracking

259
00:10:18,800 --> 00:10:22,079
clicking the telephone scheme link

260
00:10:22,079 --> 00:10:25,200
if no consent is asked by either the

261
00:10:25,200 --> 00:10:26,800
reading system and the target

262
00:10:26,800 --> 00:10:30,720
application a call would be initiated

263
00:10:30,720 --> 00:10:33,519
if this call is directed at a telephone

264
00:10:33,519 --> 00:10:36,079
number under the attacker's control

265
00:10:36,079 --> 00:10:38,160
he gets your telephone number or he

266
00:10:38,160 --> 00:10:40,240
could even direct it to a paying

267
00:10:40,240 --> 00:10:41,600
telephone

268
00:10:41,600 --> 00:10:44,000
service

269
00:10:44,240 --> 00:10:46,480
and then lastly we were very interested

270
00:10:46,480 --> 00:10:49,279
in the web engines that were included in

271
00:10:49,279 --> 00:10:51,279
these reading systems

272
00:10:51,279 --> 00:10:52,399
um

273
00:10:52,399 --> 00:10:54,640
we tried to infer this using a

274
00:10:54,640 --> 00:10:56,640
fingerprinting script because the user

275
00:10:56,640 --> 00:10:59,200
agent string might be spoofed or might

276
00:10:59,200 --> 00:11:01,279
be suppressed

277
00:11:01,279 --> 00:11:04,480
so we developed this script based on the

278
00:11:04,480 --> 00:11:07,519
mozilla developer network data set which

279
00:11:07,519 --> 00:11:11,040
comprises of all super supported html

280
00:11:11,040 --> 00:11:13,519
tags and attributes as well as

281
00:11:13,519 --> 00:11:15,680
javascript apis

282
00:11:15,680 --> 00:11:17,920
so each one we checked whether it was

283
00:11:17,920 --> 00:11:20,399
supported or not and based on this we

284
00:11:20,399 --> 00:11:24,480
built a string of about 3 000

285
00:11:24,480 --> 00:11:27,040
characters

286
00:11:27,120 --> 00:11:30,160
based on the hamming distance between

287
00:11:30,160 --> 00:11:31,279
known

288
00:11:31,279 --> 00:11:33,120
web engines

289
00:11:33,120 --> 00:11:36,640
and um the web engines that we wanted

290
00:11:36,640 --> 00:11:39,360
to detect so in the reading systems

291
00:11:39,360 --> 00:11:42,160
we could infer which one was actually

292
00:11:42,160 --> 00:11:44,560
embedded in the application

293
00:11:44,560 --> 00:11:46,800
and this is very interesting because

294
00:11:46,800 --> 00:11:48,640
some of these web engines might be

295
00:11:48,640 --> 00:11:51,519
outdated some even might have publicly

296
00:11:51,519 --> 00:11:56,120
disclosed vulnerabilities online

297
00:11:56,399 --> 00:11:59,200
okay so um let's have a look at the

298
00:11:59,200 --> 00:12:00,399
results

299
00:12:00,399 --> 00:12:01,920
so about 40

300
00:12:01,920 --> 00:12:03,519
of the uh

301
00:12:03,519 --> 00:12:06,480
evaluated reading systems

302
00:12:06,480 --> 00:12:08,959
support javascript which is not bad in

303
00:12:08,959 --> 00:12:11,519
itself but it's widens the attack

304
00:12:11,519 --> 00:12:13,040
surface

305
00:12:13,040 --> 00:12:14,800
and about half

306
00:12:14,800 --> 00:12:17,120
supports remote communication

307
00:12:17,120 --> 00:12:19,519
unfortunately only one application

308
00:12:19,519 --> 00:12:21,760
requires user consent which is apple

309
00:12:21,760 --> 00:12:25,720
blocks on ios

310
00:12:25,920 --> 00:12:29,760
16 of the evaluated applications allows

311
00:12:29,760 --> 00:12:32,000
an ebook to infer the existence of local

312
00:12:32,000 --> 00:12:34,480
files on the local file system and half

313
00:12:34,480 --> 00:12:36,000
of doi so 8

314
00:12:36,000 --> 00:12:38,079
also allow the ebook to read the file

315
00:12:38,079 --> 00:12:40,959
contents of these files

316
00:12:40,959 --> 00:12:43,120
very interesting side note is that none

317
00:12:43,120 --> 00:12:45,600
of the ios applications were vulnerable

318
00:12:45,600 --> 00:12:48,399
because of the design

319
00:12:48,399 --> 00:12:50,639
in the application framework

320
00:12:50,639 --> 00:12:53,519
and also as for the browser extensions

321
00:12:53,519 --> 00:12:56,320
same origin policy prevented access to

322
00:12:56,320 --> 00:12:59,440
the local file system

323
00:13:00,480 --> 00:13:03,600
okay so 25 of the applications that we

324
00:13:03,600 --> 00:13:04,800
evaluated

325
00:13:04,800 --> 00:13:08,079
supported uri handles and less than half

326
00:13:08,079 --> 00:13:10,959
actually required consent to open an

327
00:13:10,959 --> 00:13:12,720
application

328
00:13:12,720 --> 00:13:15,120
and lastly fortunately only three web

329
00:13:15,120 --> 00:13:19,360
engines were deemed insecure when we

330
00:13:19,360 --> 00:13:20,560
did the

331
00:13:20,560 --> 00:13:22,720
web engine experiments

332
00:13:22,720 --> 00:13:25,040
also interesting so applications on

333
00:13:25,040 --> 00:13:28,399
smartphones can only use the web engine

334
00:13:28,399 --> 00:13:31,279
framework that is embedded in the

335
00:13:31,279 --> 00:13:33,760
operating system so this is updated

336
00:13:33,760 --> 00:13:36,880
with every system update so here none of

337
00:13:36,880 --> 00:13:39,120
them could be insecure

338
00:13:39,120 --> 00:13:41,040
same with the browser extensions the

339
00:13:41,040 --> 00:13:43,440
browser is automatically automatically

340
00:13:43,440 --> 00:13:45,199
updated

341
00:13:45,199 --> 00:13:47,920
and now tom will explain why we actually

342
00:13:47,920 --> 00:13:50,399
consider these results or these

343
00:13:50,399 --> 00:13:54,639
vulnerabilities as a lower bound

344
00:13:54,639 --> 00:13:57,519
thank you for that

345
00:13:57,519 --> 00:13:59,519
so the reason why

346
00:13:59,519 --> 00:14:01,519
these results are lower bound it's

347
00:14:01,519 --> 00:14:03,760
actually because the tests that we did

348
00:14:03,760 --> 00:14:06,399
they were predefined so we could only

349
00:14:06,399 --> 00:14:08,959
discover what we were looking for

350
00:14:08,959 --> 00:14:11,760
whereas if we were a real attacker

351
00:14:11,760 --> 00:14:12,880
we would be

352
00:14:12,880 --> 00:14:15,199
uh analyzing the application that we're

353
00:14:15,199 --> 00:14:17,680
taking more closely and then try to

354
00:14:17,680 --> 00:14:20,160
device an attack that is more specific

355
00:14:20,160 --> 00:14:21,680
towards

356
00:14:21,680 --> 00:14:24,720
the way that the application is built

357
00:14:24,720 --> 00:14:26,880
unfortunately it was not possible to do

358
00:14:26,880 --> 00:14:27,680
this

359
00:14:27,680 --> 00:14:28,839
for all the

360
00:14:28,839 --> 00:14:31,920
97 different applications that we tested

361
00:14:31,920 --> 00:14:34,320
so that's why we

362
00:14:34,320 --> 00:14:36,880
mainly focused on three of them

363
00:14:36,880 --> 00:14:39,279
so we looked at apple books which comes

364
00:14:39,279 --> 00:14:41,360
pre-installed on mac os

365
00:14:41,360 --> 00:14:43,760
then the most popular

366
00:14:43,760 --> 00:14:46,000
reading system that comes as a browser

367
00:14:46,000 --> 00:14:47,040
extension

368
00:14:47,040 --> 00:14:48,880
namely epub reader

369
00:14:48,880 --> 00:14:53,120
which has between 600 and 700 000 users

370
00:14:53,120 --> 00:14:56,160
and then lastly the amazon kindle which

371
00:14:56,160 --> 00:14:58,959
is the most popular physical eating

372
00:14:58,959 --> 00:15:01,359
device

373
00:15:01,519 --> 00:15:05,199
so to start off with the apple books um

374
00:15:05,199 --> 00:15:06,639
so this

375
00:15:06,639 --> 00:15:09,519
well this application allows rendering

376
00:15:09,519 --> 00:15:11,279
epubs

377
00:15:11,279 --> 00:15:12,880
and um

378
00:15:12,880 --> 00:15:14,959
while we were testing whether we could

379
00:15:14,959 --> 00:15:17,040
access local files

380
00:15:17,040 --> 00:15:20,160
but when we tried to access them via

381
00:15:20,160 --> 00:15:22,720
like the file

382
00:15:22,720 --> 00:15:24,079
handle

383
00:15:24,079 --> 00:15:26,000
like the file scheme uh it was not

384
00:15:26,000 --> 00:15:28,639
possible because uh the same origin

385
00:15:28,639 --> 00:15:30,639
policy was enforced

386
00:15:30,639 --> 00:15:32,320
however um

387
00:15:32,320 --> 00:15:34,880
when we try to um

388
00:15:34,880 --> 00:15:35,600
like

389
00:15:35,600 --> 00:15:36,720
link

390
00:15:36,720 --> 00:15:41,279
or include a sim link to another book

391
00:15:41,279 --> 00:15:43,360
like an image in another book

392
00:15:43,360 --> 00:15:45,680
we managed to actually bypass this same

393
00:15:45,680 --> 00:15:47,519
origin policy

394
00:15:47,519 --> 00:15:48,800
so this

395
00:15:48,800 --> 00:15:51,519
means that we were able to

396
00:15:51,519 --> 00:15:53,600
detect all the different books that were

397
00:15:53,600 --> 00:15:56,480
available on a user system or in the

398
00:15:56,480 --> 00:15:59,279
library of the user

399
00:15:59,279 --> 00:16:00,079
and

400
00:16:00,079 --> 00:16:01,920
well another thing that happened while

401
00:16:01,920 --> 00:16:03,920
we were testing this is

402
00:16:03,920 --> 00:16:05,920
when we created

403
00:16:05,920 --> 00:16:09,759
a sim link to the upper folder books

404
00:16:09,759 --> 00:16:11,040
um

405
00:16:11,040 --> 00:16:13,199
then well all of a sudden

406
00:16:13,199 --> 00:16:15,040
we got this error

407
00:16:15,040 --> 00:16:16,639
so

408
00:16:16,639 --> 00:16:18,800
something went wrong with the accessing

409
00:16:18,800 --> 00:16:21,279
the library and actually this error

410
00:16:21,279 --> 00:16:24,720
became quite persistent so

411
00:16:24,720 --> 00:16:27,199
because of our testing

412
00:16:27,199 --> 00:16:30,320
by simply opening a single epub we

413
00:16:30,320 --> 00:16:34,000
weren't able to open apple books anymore

414
00:16:34,000 --> 00:16:37,440
and this issue persisted uh until apple

415
00:16:37,440 --> 00:16:40,320
uh followed up on our um

416
00:16:40,320 --> 00:16:43,519
on our uh well our uh

417
00:16:43,519 --> 00:16:46,000
report that there was something wrong

418
00:16:46,000 --> 00:16:48,160
that this denial of service

419
00:16:48,160 --> 00:16:51,360
was there um and we couldn't access the

420
00:16:51,360 --> 00:16:54,160
apple books application anymore until

421
00:16:54,160 --> 00:16:57,040
they published and or pushed out some

422
00:16:57,040 --> 00:16:58,399
updates

423
00:16:58,399 --> 00:17:01,920
of the operating system

424
00:17:02,639 --> 00:17:05,439
then um the second application that we

425
00:17:05,439 --> 00:17:07,599
looked more closely at is the epub

426
00:17:07,599 --> 00:17:08,480
reader

427
00:17:08,480 --> 00:17:11,839
which comes as the chrome extension um

428
00:17:11,839 --> 00:17:14,720
which has around 600 000 users

429
00:17:14,720 --> 00:17:17,319
and on firefox it has around

430
00:17:17,319 --> 00:17:20,640
136 000 users

431
00:17:20,640 --> 00:17:21,599
um

432
00:17:21,599 --> 00:17:22,720
so

433
00:17:22,720 --> 00:17:25,359
let's first discuss how this uh

434
00:17:25,359 --> 00:17:29,039
well this extension is implemented so um

435
00:17:29,039 --> 00:17:31,200
one thing that it does is that it will

436
00:17:31,200 --> 00:17:33,520
automatically detect when the user is

437
00:17:33,520 --> 00:17:36,480
trying to open a an epub file so it

438
00:17:36,480 --> 00:17:39,440
looks for when there's a request for the

439
00:17:39,440 --> 00:17:40,960
epub extension

440
00:17:40,960 --> 00:17:44,400
or if the mime type of a request or the

441
00:17:44,400 --> 00:17:46,400
response is set

442
00:17:46,400 --> 00:17:50,080
to the one of uh epubs

443
00:17:50,080 --> 00:17:53,039
then it will like once it detects this

444
00:17:53,039 --> 00:17:54,240
epic file

445
00:17:54,240 --> 00:17:55,360
it will

446
00:17:55,360 --> 00:17:57,840
unzip it and then parse all the html of

447
00:17:57,840 --> 00:18:00,320
the e-books and this html is then

448
00:18:00,320 --> 00:18:01,520
displayed

449
00:18:01,520 --> 00:18:04,080
in the chrome extension or the mos

450
00:18:04,080 --> 00:18:06,000
extension origin

451
00:18:06,000 --> 00:18:07,200
and

452
00:18:07,200 --> 00:18:09,039
because well it's

453
00:18:09,039 --> 00:18:09,880
these

454
00:18:09,880 --> 00:18:12,160
[Music]

455
00:18:12,160 --> 00:18:14,640
this html is still um in a different

456
00:18:14,640 --> 00:18:17,679
origin than where the resources are uh

457
00:18:17,679 --> 00:18:19,919
it still needs to be able to show these

458
00:18:19,919 --> 00:18:22,799
resources so all the images audio and

459
00:18:22,799 --> 00:18:25,360
video content um

460
00:18:25,360 --> 00:18:28,080
within the epub so within this

461
00:18:28,080 --> 00:18:29,280
zip file

462
00:18:29,280 --> 00:18:32,799
they are made available via blobs

463
00:18:32,799 --> 00:18:36,480
like with the function create object url

464
00:18:36,480 --> 00:18:37,760
this

465
00:18:37,760 --> 00:18:40,240
makes them available

466
00:18:40,240 --> 00:18:42,960
within the chrome extension

467
00:18:42,960 --> 00:18:45,280
origin

468
00:18:45,280 --> 00:18:47,120
and then unfortunately there's also a

469
00:18:47,120 --> 00:18:49,120
bit of security

470
00:18:49,120 --> 00:18:51,760
so there's actually a

471
00:18:51,760 --> 00:18:53,360
relatively strict

472
00:18:53,360 --> 00:18:55,280
csb header

473
00:18:55,280 --> 00:18:57,280
as you can see here

474
00:18:57,280 --> 00:19:00,480
and this csb header actually prevents us

475
00:19:00,480 --> 00:19:01,600
from running

476
00:19:01,600 --> 00:19:03,280
remote scripts

477
00:19:03,280 --> 00:19:05,440
or

478
00:19:05,919 --> 00:19:07,440
including them

479
00:19:07,440 --> 00:19:09,679
in the epub

480
00:19:09,679 --> 00:19:10,480
so

481
00:19:10,480 --> 00:19:13,360
one might think that exploitation is not

482
00:19:13,360 --> 00:19:14,960
possible

483
00:19:14,960 --> 00:19:16,559
but fortunately

484
00:19:16,559 --> 00:19:18,880
we managed to find a way around it

485
00:19:18,880 --> 00:19:22,080
so because of this script source

486
00:19:22,080 --> 00:19:24,880
directive of the csp

487
00:19:24,880 --> 00:19:27,440
the only way that we found to execute

488
00:19:27,440 --> 00:19:30,000
our own javascript is by using

489
00:19:30,000 --> 00:19:31,840
the blob

490
00:19:31,840 --> 00:19:33,760
scheme

491
00:19:33,760 --> 00:19:34,799
so

492
00:19:34,799 --> 00:19:37,120
if you remember from the previous slide

493
00:19:37,120 --> 00:19:39,840
so the images and audio and video they

494
00:19:39,840 --> 00:19:42,080
are are served so they're

495
00:19:42,080 --> 00:19:44,240
made into blobs

496
00:19:44,240 --> 00:19:46,720
so then what we can do

497
00:19:46,720 --> 00:19:49,600
to get our malicious javascripts

498
00:19:49,600 --> 00:19:52,960
to be uh well included

499
00:19:52,960 --> 00:19:55,520
we can first include try to include it

500
00:19:55,520 --> 00:19:58,640
as an image and then the epub reader

501
00:19:58,640 --> 00:19:59,600
will

502
00:19:59,600 --> 00:20:01,760
or the extension will convert it to a

503
00:20:01,760 --> 00:20:03,760
blob

504
00:20:03,760 --> 00:20:06,720
but however that's still doesn't solve

505
00:20:06,720 --> 00:20:08,880
everything because these blobs have a

506
00:20:08,880 --> 00:20:11,440
randomized url uh which cannot be

507
00:20:11,440 --> 00:20:13,679
guessed um

508
00:20:13,679 --> 00:20:16,000
and yeah so

509
00:20:16,000 --> 00:20:18,400
we still need something extra and

510
00:20:18,400 --> 00:20:20,480
fortunately there was uh

511
00:20:20,480 --> 00:20:24,000
a nice post um

512
00:20:24,240 --> 00:20:26,000
that showed that uh it's actually

513
00:20:26,000 --> 00:20:27,919
possible to uh

514
00:20:27,919 --> 00:20:32,159
leak certain attributes um from uh

515
00:20:32,159 --> 00:20:37,120
from html elements by using css only

516
00:20:37,120 --> 00:20:40,720
and actually we managed to like

517
00:20:40,720 --> 00:20:44,240
implement an attack based on that

518
00:20:44,240 --> 00:20:45,200
so

519
00:20:45,200 --> 00:20:46,840
putting it all together

520
00:20:46,840 --> 00:20:50,720
and exploit looks a bit like this

521
00:20:50,720 --> 00:20:52,799
so first we create a malicious

522
00:20:52,799 --> 00:20:55,280
epub or an epub with a malicious

523
00:20:55,280 --> 00:20:57,760
javascript file that is included as an

524
00:20:57,760 --> 00:20:58,640
image

525
00:20:58,640 --> 00:21:00,559
and then we use

526
00:21:00,559 --> 00:21:03,600
well we also embed some css in order to

527
00:21:03,600 --> 00:21:04,880
steal the

528
00:21:04,880 --> 00:21:06,240
blob url

529
00:21:06,240 --> 00:21:08,880
um and that looks a bit like the full

530
00:21:08,880 --> 00:21:11,360
ring so we use the

531
00:21:11,360 --> 00:21:13,600
like the source

532
00:21:13,600 --> 00:21:15,200
source

533
00:21:15,200 --> 00:21:16,960
well star equals

534
00:21:16,960 --> 00:21:18,720
to look for

535
00:21:18,720 --> 00:21:19,919
content that

536
00:21:19,919 --> 00:21:22,640
matches the

537
00:21:22,640 --> 00:21:26,559
actual malicious javascript blob url

538
00:21:26,559 --> 00:21:29,679
um and well if you leak enough of this

539
00:21:29,679 --> 00:21:31,070
or all of this

540
00:21:31,070 --> 00:21:32,480
[Music]

541
00:21:32,480 --> 00:21:34,640
data we can

542
00:21:34,640 --> 00:21:37,280
figure out what the actual

543
00:21:37,280 --> 00:21:39,440
url or blob url is

544
00:21:39,440 --> 00:21:41,760
and then we can use that to dynamically

545
00:21:41,760 --> 00:21:45,600
generate an epub where the script is set

546
00:21:45,600 --> 00:21:48,240
or the the source of the script is set

547
00:21:48,240 --> 00:21:49,919
to this leaked blob

548
00:21:49,919 --> 00:21:52,159
and that means that

549
00:21:52,159 --> 00:21:54,000
if you keep the first step open with the

550
00:21:54,000 --> 00:21:57,520
original malicious epub

551
00:21:57,520 --> 00:22:01,120
we can well we can access this blob in

552
00:22:01,120 --> 00:22:03,520
the second window as well

553
00:22:03,520 --> 00:22:04,559
and

554
00:22:04,559 --> 00:22:06,159
that means that

555
00:22:06,159 --> 00:22:08,720
we managed to get the universal xss

556
00:22:08,720 --> 00:22:10,320
because extension

557
00:22:10,320 --> 00:22:12,880
requested all url's permission

558
00:22:12,880 --> 00:22:14,559
um

559
00:22:14,559 --> 00:22:17,520
as you can see here

560
00:22:19,760 --> 00:22:22,240
and then the last one that we took a

561
00:22:22,240 --> 00:22:24,080
closer look at was

562
00:22:24,080 --> 00:22:29,760
amazon kindle um this kindle

563
00:22:30,000 --> 00:22:31,039
also

564
00:22:31,039 --> 00:22:33,919
can be used to render epubs and in order

565
00:22:33,919 --> 00:22:36,640
to do that it will use a process called

566
00:22:36,640 --> 00:22:40,240
web reader 2 to render the epub and esa

567
00:22:40,240 --> 00:22:43,039
w3 files

568
00:22:43,039 --> 00:22:45,520
in order to render the actual content it

569
00:22:45,520 --> 00:22:46,960
uses

570
00:22:46,960 --> 00:22:50,480
webkits as its rendering engine

571
00:22:50,480 --> 00:22:52,000
however as

572
00:22:52,000 --> 00:22:54,880
it's also stated in the documentation of

573
00:22:54,880 --> 00:22:55,840
the

574
00:22:55,840 --> 00:22:58,480
amazon kindle uh the javascript is

575
00:22:58,480 --> 00:23:00,640
disabled and we

576
00:23:00,640 --> 00:23:02,480
looked at it and we saw that

577
00:23:02,480 --> 00:23:04,640
the enable scripts

578
00:23:04,640 --> 00:23:06,320
property

579
00:23:06,320 --> 00:23:08,480
is set to false

580
00:23:08,480 --> 00:23:10,000
and also

581
00:23:10,000 --> 00:23:12,080
it's not possible to do any sort of

582
00:23:12,080 --> 00:23:14,159
remote communication

583
00:23:14,159 --> 00:23:16,080
because they um

584
00:23:16,080 --> 00:23:18,400
on the kindle implements some kind of

585
00:23:18,400 --> 00:23:20,720
hooks into our webcam function to make

586
00:23:20,720 --> 00:23:22,960
sure that no roommate communication is

587
00:23:22,960 --> 00:23:26,159
possible from within the ebook

588
00:23:26,159 --> 00:23:29,919
um another thing uh well that might not

589
00:23:29,919 --> 00:23:32,320
really seem relevant at the moment but

590
00:23:32,320 --> 00:23:34,960
uh it's possible for the user to choose

591
00:23:34,960 --> 00:23:37,520
which font to use

592
00:23:37,520 --> 00:23:39,360
and

593
00:23:39,360 --> 00:23:40,880
the last thing is that

594
00:23:40,880 --> 00:23:42,720
in order to communicate with other

595
00:23:42,720 --> 00:23:45,679
processes that are running on the kindle

596
00:23:45,679 --> 00:23:49,200
this is typically done via the http api

597
00:23:49,200 --> 00:23:51,760
so for instance to change the font it's

598
00:23:51,760 --> 00:23:54,480
possible to send a get request to the

599
00:23:54,480 --> 00:23:56,000
following

600
00:23:56,000 --> 00:23:57,120
url

601
00:23:57,120 --> 00:23:59,679
with the fonts defined in the font

602
00:23:59,679 --> 00:24:03,120
family parameter

603
00:24:03,760 --> 00:24:04,400
so

604
00:24:04,400 --> 00:24:07,840
in order to exploit the amazon kindle we

605
00:24:07,840 --> 00:24:10,000
first had to

606
00:24:10,000 --> 00:24:12,880
well we wanted to first reverse engineer

607
00:24:12,880 --> 00:24:16,880
the web reader 2 application

608
00:24:16,880 --> 00:24:20,240
so there we saw that well we found some

609
00:24:20,240 --> 00:24:22,159
kind of javascript so we found that

610
00:24:22,159 --> 00:24:24,400
there's actually some javascript being

611
00:24:24,400 --> 00:24:25,760
executed

612
00:24:25,760 --> 00:24:27,010
and um

613
00:24:27,010 --> 00:24:28,400
[Music]

614
00:24:28,400 --> 00:24:29,360
well

615
00:24:29,360 --> 00:24:31,440
it's

616
00:24:31,440 --> 00:24:33,279
shown as this so

617
00:24:33,279 --> 00:24:36,080
uh part of the the thing is so known as

618
00:24:36,080 --> 00:24:39,600
this where uh the proscent s is um

619
00:24:39,600 --> 00:24:42,000
replaced with the actual font that's uh

620
00:24:42,000 --> 00:24:45,240
being selected

621
00:24:46,240 --> 00:24:49,120
and well in order for the javascript

622
00:24:49,120 --> 00:24:51,360
execution to be uh

623
00:24:51,360 --> 00:24:54,400
done uh the enable scripts uh pros

624
00:24:54,400 --> 00:24:55,200
uh

625
00:24:55,200 --> 00:24:57,600
property is first set to true just

626
00:24:57,600 --> 00:25:00,559
before the javascript execution and then

627
00:25:00,559 --> 00:25:03,120
after the scripts

628
00:25:03,120 --> 00:25:05,679
finished execution

629
00:25:05,679 --> 00:25:09,520
it's set back to false

630
00:25:09,520 --> 00:25:11,919
so as you can see

631
00:25:11,919 --> 00:25:12,799
well

632
00:25:12,799 --> 00:25:14,559
having a

633
00:25:14,559 --> 00:25:17,279
or injecting a string there is a very

634
00:25:17,279 --> 00:25:18,400
trivial

635
00:25:18,400 --> 00:25:20,240
especially knowing that we can set

636
00:25:20,240 --> 00:25:23,760
arbitrary fonts via single sp requests

637
00:25:23,760 --> 00:25:25,679
however

638
00:25:25,679 --> 00:25:27,440
yeah these hp requests are still

639
00:25:27,440 --> 00:25:28,559
disabled

640
00:25:28,559 --> 00:25:31,120
so it was not possible to like just send

641
00:25:31,120 --> 00:25:31,919
a

642
00:25:31,919 --> 00:25:32,960
an

643
00:25:32,960 --> 00:25:36,080
arbitrary hp request so we still needed

644
00:25:36,080 --> 00:25:40,320
another an additional trick for that

645
00:25:41,360 --> 00:25:45,039
so what we found also based on our uh

646
00:25:45,039 --> 00:25:48,400
automated tests was that uh when

647
00:25:48,400 --> 00:25:51,120
we loaded an image as an svg

648
00:25:51,120 --> 00:25:53,440
uh this actually bypasses

649
00:25:53,440 --> 00:25:56,400
the hooked function

650
00:25:56,400 --> 00:25:58,480
so this allowed us to actually send

651
00:25:58,480 --> 00:26:00,000
requests

652
00:26:00,000 --> 00:26:02,480
but we found that when we tried to use

653
00:26:02,480 --> 00:26:03,919
the local hosts

654
00:26:03,919 --> 00:26:07,039
it wasn't possible to do this

655
00:26:07,039 --> 00:26:07,760
but

656
00:26:07,760 --> 00:26:10,799
when we like first uh send the request

657
00:26:10,799 --> 00:26:13,200
to our own server and from there we re

658
00:26:13,200 --> 00:26:15,600
redirected to localhost that seemed to

659
00:26:15,600 --> 00:26:18,480
work out quite well

660
00:26:18,480 --> 00:26:19,360
so

661
00:26:19,360 --> 00:26:22,240
when we put all of this together uh

662
00:26:22,240 --> 00:26:24,320
like um

663
00:26:24,320 --> 00:26:27,600
we actually did the script injection and

664
00:26:27,600 --> 00:26:30,240
then we um

665
00:26:30,240 --> 00:26:34,480
bypassed the uh the filter bypass

666
00:26:34,480 --> 00:26:36,880
uh we actually then still needed

667
00:26:36,880 --> 00:26:39,600
something else to in order to read out

668
00:26:39,600 --> 00:26:42,880
content from the other servers that are

669
00:26:42,880 --> 00:26:44,720
running on the kindle

670
00:26:44,720 --> 00:26:47,120
um so

671
00:26:47,120 --> 00:26:48,640
these well

672
00:26:48,640 --> 00:26:50,559
there's still the same origin policy

673
00:26:50,559 --> 00:26:53,520
that we had to circumvent

674
00:26:53,520 --> 00:26:55,039
and for that

675
00:26:55,039 --> 00:26:57,279
we took a look at the rendering engine

676
00:26:57,279 --> 00:27:00,320
that's running on the kindle which is

677
00:27:00,320 --> 00:27:03,679
webkit version 1.4.2

678
00:27:03,679 --> 00:27:04,480
which

679
00:27:04,480 --> 00:27:07,080
we found was released in july

680
00:27:07,080 --> 00:27:10,799
2011 so that's over 10 years ago

681
00:27:10,799 --> 00:27:14,080
and of course at that time browsers were

682
00:27:14,080 --> 00:27:17,679
a lot more vulnerable than these days

683
00:27:17,679 --> 00:27:19,679
so that means that there were

684
00:27:19,679 --> 00:27:20,799
numerous

685
00:27:20,799 --> 00:27:22,399
vulnerabilities or well-known

686
00:27:22,399 --> 00:27:24,799
vulnerabilities including

687
00:27:24,799 --> 00:27:26,320
this particular

688
00:27:26,320 --> 00:27:27,679
cve

689
00:27:27,679 --> 00:27:30,159
and well

690
00:27:30,159 --> 00:27:32,840
fortunately for us there was even

691
00:27:32,840 --> 00:27:35,760
a like a proof of concept available with

692
00:27:35,760 --> 00:27:38,320
an implementation uh so we just had to

693
00:27:38,320 --> 00:27:39,919
copy paste the code and make some

694
00:27:39,919 --> 00:27:42,399
adjustments and that

695
00:27:42,399 --> 00:27:44,880
after that we managed to bypass the same

696
00:27:44,880 --> 00:27:47,120
origin policy using this universal

697
00:27:47,120 --> 00:27:49,520
cross-site scripting vulnerability

698
00:27:49,520 --> 00:27:52,000
and yeah then finally

699
00:27:52,000 --> 00:27:54,720
we managed to combine all of this and

700
00:27:54,720 --> 00:27:56,320
read out

701
00:27:56,320 --> 00:27:58,960
everything that's in the victims library

702
00:27:58,960 --> 00:27:59,840
and

703
00:27:59,840 --> 00:28:02,240
also extract actual content from the

704
00:28:02,240 --> 00:28:04,000
kindle because there's another

705
00:28:04,000 --> 00:28:06,640
application called kfx viewer

706
00:28:06,640 --> 00:28:07,520
which

707
00:28:07,520 --> 00:28:10,158
can render

708
00:28:10,880 --> 00:28:13,039
these documents as well and then the

709
00:28:13,039 --> 00:28:15,039
render documents can be returned as an

710
00:28:15,039 --> 00:28:17,840
image

711
00:28:18,240 --> 00:28:19,840
firstly

712
00:28:19,840 --> 00:28:22,080
amazon

713
00:28:22,080 --> 00:28:24,320
looked at our report and they actually

714
00:28:24,320 --> 00:28:25,440
mitigates

715
00:28:25,440 --> 00:28:28,240
these well some of the vulnerabilities

716
00:28:28,240 --> 00:28:29,679
and so they

717
00:28:29,679 --> 00:28:30,960
fixed the

718
00:28:30,960 --> 00:28:32,080
cve

719
00:28:32,080 --> 00:28:34,240
where well it was quite

720
00:28:34,240 --> 00:28:37,120
straightforward uh to do because there

721
00:28:37,120 --> 00:28:40,159
was only two lines to be changed

722
00:28:40,159 --> 00:28:42,480
and they also added

723
00:28:42,480 --> 00:28:44,480
some additional validation

724
00:28:44,480 --> 00:28:46,799
so they require now the verification

725
00:28:46,799 --> 00:28:49,520
token which is a specific uh

726
00:28:49,520 --> 00:28:51,279
non-guessable header

727
00:28:51,279 --> 00:28:53,840
which is sort of a chrocite requestory

728
00:28:53,840 --> 00:28:55,760
defense

729
00:28:55,760 --> 00:28:57,039
but still

730
00:28:57,039 --> 00:29:01,039
it's using webkit version 1.4.2

731
00:29:01,039 --> 00:29:02,960
which as i said is

732
00:29:02,960 --> 00:29:04,880
10 years old and

733
00:29:04,880 --> 00:29:09,039
riddled with known vulnerabilities

734
00:29:09,039 --> 00:29:11,039
so yeah i'll

735
00:29:11,039 --> 00:29:13,440
leave this self-explanatory image just

736
00:29:13,440 --> 00:29:15,120
here

737
00:29:15,120 --> 00:29:16,640
um

738
00:29:16,640 --> 00:29:20,080
and then moving on um

739
00:29:20,080 --> 00:29:23,679
now i believe john will be talking about

740
00:29:23,679 --> 00:29:26,720
how these capabilities might be being

741
00:29:26,720 --> 00:29:29,360
abused in the world

742
00:29:29,360 --> 00:29:31,679
okay thank you tom up to

743
00:29:31,679 --> 00:29:32,640
the

744
00:29:32,640 --> 00:29:34,480
second part of the presentation so

745
00:29:34,480 --> 00:29:36,399
indeed

746
00:29:36,399 --> 00:29:38,559
let's have a look at which capabilities

747
00:29:38,559 --> 00:29:41,039
are being abused in the wilds

748
00:29:41,039 --> 00:29:44,080
so for this um yeah actually users can

749
00:29:44,080 --> 00:29:47,520
obtain ebooks in two main ways so either

750
00:29:47,520 --> 00:29:50,240
to these official ebook vendors

751
00:29:50,240 --> 00:29:51,919
like if you are

752
00:29:51,919 --> 00:29:53,279
shown here

753
00:29:53,279 --> 00:29:56,159
or through less less legal channels like

754
00:29:56,159 --> 00:29:58,000
file sharing platforms

755
00:29:58,000 --> 00:30:02,080
uh so we took a look at both of them

756
00:30:02,080 --> 00:30:05,200
as for the file sharing platforms

757
00:30:05,200 --> 00:30:08,240
we downloaded about 9000 epubs from the

758
00:30:08,240 --> 00:30:11,279
buyer bay and for shared

759
00:30:11,279 --> 00:30:13,200
and then we checked the internals of

760
00:30:13,200 --> 00:30:14,640
these epip files

761
00:30:14,640 --> 00:30:17,120
whether uh scripts did any funny things

762
00:30:17,120 --> 00:30:18,559
or whether

763
00:30:18,559 --> 00:30:22,080
there was were references to local files

764
00:30:22,080 --> 00:30:24,640
but we did not find anything

765
00:30:24,640 --> 00:30:25,760
malicious

766
00:30:25,760 --> 00:30:27,760
even less than one percent actually

767
00:30:27,760 --> 00:30:30,159
contain javascript which was all benign

768
00:30:30,159 --> 00:30:33,200
so here no indication of any malicious

769
00:30:33,200 --> 00:30:35,039
intent

770
00:30:35,039 --> 00:30:37,840
as for the official ebook vendors

771
00:30:37,840 --> 00:30:41,039
um we obtained some free ebooks from the

772
00:30:41,039 --> 00:30:44,159
most popular ebook epub vendors

773
00:30:44,159 --> 00:30:46,080
and also here we checked the internals

774
00:30:46,080 --> 00:30:49,360
but again we did not find any intent for

775
00:30:49,360 --> 00:30:50,880
tracking

776
00:30:50,880 --> 00:30:53,279
but still we weren't satisfied with this

777
00:30:53,279 --> 00:30:55,760
answer we actually wanted to know how

778
00:30:55,760 --> 00:30:57,519
feasible would it be to actually

779
00:30:57,519 --> 00:31:00,559
distribute a malicious ebook

780
00:31:00,559 --> 00:31:02,480
through these channels well the most

781
00:31:02,480 --> 00:31:04,640
simple way is to actually distribute it

782
00:31:04,640 --> 00:31:07,360
through these file sharing platforms um

783
00:31:07,360 --> 00:31:09,919
anyone can do that it's just a matter of

784
00:31:09,919 --> 00:31:12,720
uploading your uh file

785
00:31:12,720 --> 00:31:14,559
but then we wondered would it be also

786
00:31:14,559 --> 00:31:16,320
possible to actually publish this

787
00:31:16,320 --> 00:31:18,880
malicious ebook through these

788
00:31:18,880 --> 00:31:21,360
official vendors of course we're not a

789
00:31:21,360 --> 00:31:23,919
publishing company but nowadays there's

790
00:31:23,919 --> 00:31:24,799
this

791
00:31:24,799 --> 00:31:26,559
service the self-publishing service

792
00:31:26,559 --> 00:31:29,600
where virtually anyone can write a book

793
00:31:29,600 --> 00:31:31,360
and then publish it

794
00:31:31,360 --> 00:31:33,600
through one of these vendors

795
00:31:33,600 --> 00:31:36,320
so then the question essentially becomes

796
00:31:36,320 --> 00:31:38,559
are self-published ebooks

797
00:31:38,559 --> 00:31:41,120
sufficiently sanitized

798
00:31:41,120 --> 00:31:43,519
because when somebody submits such a

799
00:31:43,519 --> 00:31:46,880
manuscript to be published we hope that

800
00:31:46,880 --> 00:31:49,600
it is sanitized before it is

801
00:31:49,600 --> 00:31:52,559
published um to be bought and downloaded

802
00:31:52,559 --> 00:31:54,240
by actual users

803
00:31:54,240 --> 00:31:56,720
so we test this by writing our own book

804
00:31:56,720 --> 00:31:59,039
and including some scripts

805
00:31:59,039 --> 00:32:01,679
of course these scripts weren't weren't

806
00:32:01,679 --> 00:32:03,840
actually malicious they

807
00:32:03,840 --> 00:32:06,799
weren't trying to um seal information

808
00:32:06,799 --> 00:32:08,640
but they should be sanitized out of the

809
00:32:08,640 --> 00:32:10,080
book

810
00:32:10,080 --> 00:32:12,240
afterwards when our book was published

811
00:32:12,240 --> 00:32:13,840
we bought it back and we compared the

812
00:32:13,840 --> 00:32:16,000
internals with the submitted

813
00:32:16,000 --> 00:32:19,279
internals of the manuscript

814
00:32:19,279 --> 00:32:22,799
so we did this for the six

815
00:32:22,799 --> 00:32:26,080
for these six official ebook vendors

816
00:32:26,080 --> 00:32:27,360
and

817
00:32:27,360 --> 00:32:28,480
four of those

818
00:32:28,480 --> 00:32:31,519
uh did not sanitize the e-book

819
00:32:31,519 --> 00:32:33,760
sufficiently or some even did not

820
00:32:33,760 --> 00:32:35,519
sanitize at all

821
00:32:35,519 --> 00:32:37,919
and this accounts for 94

822
00:32:37,919 --> 00:32:40,720
of the self-publishing ebook market

823
00:32:40,720 --> 00:32:44,080
which is quite a lot of course we

824
00:32:44,080 --> 00:32:48,399
reported this to all vendors

825
00:32:48,480 --> 00:32:50,000
okay we've come to the end of our

826
00:32:50,000 --> 00:32:52,480
presentations i just want to give a few

827
00:32:52,480 --> 00:32:54,000
key takeaways

828
00:32:54,000 --> 00:32:56,320
so first uh almost none of the

829
00:32:56,320 --> 00:32:58,240
javascript supporting reading systems

830
00:32:58,240 --> 00:33:01,279
adhere to the security recommendations

831
00:33:01,279 --> 00:33:03,840
uh for example a significant part does

832
00:33:03,840 --> 00:33:06,480
not sufficiently isolate the local file

833
00:33:06,480 --> 00:33:08,080
system which leads

834
00:33:08,080 --> 00:33:10,880
might leak to file content leaking of

835
00:33:10,880 --> 00:33:14,720
files residing on the local file system

836
00:33:14,720 --> 00:33:17,600
we contacted in total 37 reading system

837
00:33:17,600 --> 00:33:20,480
developers as part of our responsible

838
00:33:20,480 --> 00:33:22,240
disclosure

839
00:33:22,240 --> 00:33:24,480
we also have some concerns about the

840
00:33:24,480 --> 00:33:28,240
epub 3.2 specification we think that the

841
00:33:28,240 --> 00:33:30,799
recommendations should be more strict

842
00:33:30,799 --> 00:33:32,799
these recommendations in context of

843
00:33:32,799 --> 00:33:34,559
security and privacy

844
00:33:34,559 --> 00:33:37,039
and also practical guidelines for

845
00:33:37,039 --> 00:33:39,679
developers for example on how to

846
00:33:39,679 --> 00:33:42,000
correctly configure an embedded web

847
00:33:42,000 --> 00:33:42,799
engine

848
00:33:42,799 --> 00:33:46,480
would would help immensely to

849
00:33:46,480 --> 00:33:49,440
have more secure epa breeding systems

850
00:33:49,440 --> 00:33:51,519
and then lastly

851
00:33:51,519 --> 00:33:52,640
we also

852
00:33:52,640 --> 00:33:54,000
think that

853
00:33:54,000 --> 00:33:57,679
javascript should not be executable in

854
00:33:57,679 --> 00:33:59,120
reading systems

855
00:33:59,120 --> 00:34:01,360
because also in our

856
00:34:01,360 --> 00:34:04,480
real world study we did not encounter a

857
00:34:04,480 --> 00:34:06,399
lot of epubs that actually use

858
00:34:06,399 --> 00:34:08,079
javascript

859
00:34:08,079 --> 00:34:11,918
and also loca local and remote resources

860
00:34:11,918 --> 00:34:14,638
were not that

861
00:34:15,280 --> 00:34:17,040
apparent

862
00:34:17,040 --> 00:34:19,760
we also did not detect any abuse in the

863
00:34:19,760 --> 00:34:21,359
wild as of yet

864
00:34:21,359 --> 00:34:23,280
although we have shown that is it is

865
00:34:23,280 --> 00:34:25,199
very much possible even through these

866
00:34:25,199 --> 00:34:26,719
legal channels

867
00:34:26,719 --> 00:34:28,480
and lastly again

868
00:34:28,480 --> 00:34:31,839
um our evaluation testbed is open source

869
00:34:31,839 --> 00:34:34,879
and we hope that it's uh can assist even

870
00:34:34,879 --> 00:34:36,800
breeding system developers

871
00:34:36,800 --> 00:34:39,839
and to develop them more secure and

872
00:34:39,839 --> 00:34:42,079
privacy oriented

873
00:34:42,079 --> 00:34:43,839
e-book reading systems and we also hope

874
00:34:43,839 --> 00:34:46,839
that users can use it to have more

875
00:34:46,839 --> 00:34:49,040
transparency in the context of the

876
00:34:49,040 --> 00:34:51,119
security of their own application that

877
00:34:51,119 --> 00:34:53,599
they use

878
00:34:53,918 --> 00:34:56,239
thanks again for attending and

879
00:34:56,239 --> 00:34:58,079
we are happy to answer any questions

880
00:34:58,079 --> 00:35:00,900
that you might have

881
00:35:00,900 --> 00:35:10,500
[Music]

882
00:35:11,040 --> 00:35:13,119
you

