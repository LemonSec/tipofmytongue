1
00:00:00,910 --> 00:00:10,490
[Music]

2
00:00:10,960 --> 00:00:11,679
hi

3
00:00:11,679 --> 00:00:14,080
my name is

4
00:00:14,080 --> 00:00:17,039
together with me is sagi

5
00:00:17,039 --> 00:00:20,080
we are both doing uh security research

6
00:00:20,080 --> 00:00:22,400
in uh strike

7
00:00:22,400 --> 00:00:25,920
and jarvan contributed to the research

8
00:00:25,920 --> 00:00:29,199
significantly but it is not here right

9
00:00:29,199 --> 00:00:31,039
now

10
00:00:31,039 --> 00:00:31,840
so

11
00:00:31,840 --> 00:00:34,079
uh let's see

12
00:00:34,079 --> 00:00:38,239
so the talk today is about a

13
00:00:38,239 --> 00:00:40,399
a technique that is

14
00:00:40,399 --> 00:00:41,840
quite

15
00:00:41,840 --> 00:00:45,440
overlooked it is called this injection

16
00:00:45,440 --> 00:00:48,160
in the context of this technique we

17
00:00:48,160 --> 00:00:50,480
establish meet them

18
00:00:50,480 --> 00:00:53,760
and we convince the machine that we are

19
00:00:53,760 --> 00:00:55,920
the domain controller

20
00:00:55,920 --> 00:00:57,840
we will see that this technique is

21
00:00:57,840 --> 00:01:00,879
useful both in the context of kerberos

22
00:01:00,879 --> 00:01:02,399
or cement element

23
00:01:02,399 --> 00:01:05,199
without the main authentication protocol

24
00:01:05,199 --> 00:01:09,439
in active directory environment

25
00:01:11,439 --> 00:01:16,000
okay so the plan for today talks and

26
00:01:16,000 --> 00:01:17,040
first

27
00:01:17,040 --> 00:01:19,360
we present mtln

28
00:01:19,360 --> 00:01:22,080
we'll introduce the protocol we'll then

29
00:01:22,080 --> 00:01:24,960
see relate to the known vulnerabilities

30
00:01:24,960 --> 00:01:27,280
and mitigations

31
00:01:27,280 --> 00:01:30,159
and then we'll see a

32
00:01:30,159 --> 00:01:31,920
new attack

33
00:01:31,920 --> 00:01:32,960
in a

34
00:01:32,960 --> 00:01:36,720
that is mtlan injection and afterwards

35
00:01:36,720 --> 00:01:39,360
we'll switch over to kerberos we'll

36
00:01:39,360 --> 00:01:42,320
introduce the protocol we'll see related

37
00:01:42,320 --> 00:01:44,320
vulnerabilities and integrations and

38
00:01:44,320 --> 00:01:45,360
we'll see

39
00:01:45,360 --> 00:01:48,720
uh three cases training cases

40
00:01:48,720 --> 00:01:51,520
now i just like to mention that the

41
00:01:51,520 --> 00:01:53,680
impact of

42
00:01:53,680 --> 00:01:56,159
vulnerability of technique is a really

43
00:01:56,159 --> 00:01:58,079
costly mode

44
00:01:58,079 --> 00:02:01,119
involving different vendors and products

45
00:02:01,119 --> 00:02:01,840
and

46
00:02:01,840 --> 00:02:03,600
i'm sure that

47
00:02:03,600 --> 00:02:06,960
you could find more

48
00:02:07,040 --> 00:02:11,038
so what is the ntlm ntln is a legacy

49
00:02:11,038 --> 00:02:14,560
authentication protocol in epidiolectomy

50
00:02:14,560 --> 00:02:18,080
it was largely superseded by kerberos

51
00:02:18,080 --> 00:02:18,879
it's

52
00:02:18,879 --> 00:02:22,480
in the style of challenge response now

53
00:02:22,480 --> 00:02:24,959
when a user wants to authenticate to a

54
00:02:24,959 --> 00:02:28,160
server files he sent a message about its

55
00:02:28,160 --> 00:02:30,080
capabilities

56
00:02:30,080 --> 00:02:32,480
and then there's a random challenge from

57
00:02:32,480 --> 00:02:33,840
the server

58
00:02:33,840 --> 00:02:36,560
and the client responds with the

59
00:02:36,560 --> 00:02:38,879
response to the challenge based on the

60
00:02:38,879 --> 00:02:41,440
users

61
00:02:41,440 --> 00:02:43,920
now the server

62
00:02:43,920 --> 00:02:47,120
relays this authentication to the main

63
00:02:47,120 --> 00:02:48,400
controller

64
00:02:48,400 --> 00:02:51,519
since the server doesn't avail of the

65
00:02:51,519 --> 00:02:53,280
using password

66
00:02:53,280 --> 00:02:55,760
now the domain controller approves or

67
00:02:55,760 --> 00:02:59,200
rejects the session and

68
00:02:59,200 --> 00:03:00,000
and

69
00:03:00,000 --> 00:03:02,879
provides the

70
00:03:02,879 --> 00:03:05,200
session

71
00:03:05,200 --> 00:03:07,518
so

72
00:03:08,000 --> 00:03:11,280
okay there is a one thing to note here

73
00:03:11,280 --> 00:03:14,319
and you can allow a server signing

74
00:03:14,319 --> 00:03:16,080
client signing

75
00:03:16,080 --> 00:03:19,280
use the most secure settings in gpu

76
00:03:19,280 --> 00:03:20,400
still

77
00:03:20,400 --> 00:03:24,159
nothing in ltln or dss api the

78
00:03:24,159 --> 00:03:26,400
encapsulating protocols

79
00:03:26,400 --> 00:03:29,920
will prevent the option of impersonating

80
00:03:29,920 --> 00:03:33,680
the destination server actually

81
00:03:33,680 --> 00:03:36,239
the identity of the server does return

82
00:03:36,239 --> 00:03:38,000
in the challenge message

83
00:03:38,000 --> 00:03:41,360
but due to i guess some canonization

84
00:03:41,360 --> 00:03:42,959
difficulty

85
00:03:42,959 --> 00:03:44,560
clients

86
00:03:44,560 --> 00:03:47,200
don't compare it with

87
00:03:47,200 --> 00:03:49,440
what they expect

88
00:03:49,440 --> 00:03:50,400
and

89
00:03:50,400 --> 00:03:53,760
and that means that

90
00:03:54,159 --> 00:03:57,760
a malicious entity can send a set up a

91
00:03:57,760 --> 00:04:00,480
server and provide the

92
00:04:00,480 --> 00:04:03,519
award responses to the

93
00:04:03,519 --> 00:04:06,239
requests

94
00:04:06,640 --> 00:04:10,239
so let's see how it looks and now if a

95
00:04:10,239 --> 00:04:12,319
client wants to

96
00:04:12,319 --> 00:04:14,879
connect to a server it first send and

97
00:04:14,879 --> 00:04:16,959
the negotiate message edition

98
00:04:16,959 --> 00:04:19,918
intercepted by an attacker

99
00:04:19,918 --> 00:04:22,240
that sends a challenge

100
00:04:22,240 --> 00:04:25,520
uh now as mentioned the client machine

101
00:04:25,520 --> 00:04:30,560
does not verify the target name

102
00:04:30,560 --> 00:04:33,840
and sends back a response now the world

103
00:04:33,840 --> 00:04:35,840
server and

104
00:04:35,840 --> 00:04:38,960
should have a valid identity in the

105
00:04:38,960 --> 00:04:40,800
active directory

106
00:04:40,800 --> 00:04:43,440
username

107
00:04:50,720 --> 00:04:52,800
it must be a machine but

108
00:04:52,800 --> 00:04:54,160
it could

109
00:04:54,160 --> 00:04:55,600
then

110
00:04:55,600 --> 00:04:59,199
relay the session to not really

111
00:04:59,199 --> 00:05:01,759
delay the session to a dc and

112
00:05:01,759 --> 00:05:02,639
get

113
00:05:02,639 --> 00:05:03,520
get

114
00:05:03,520 --> 00:05:05,280
the session key

115
00:05:05,280 --> 00:05:09,360
and so and then it is able to

116
00:05:09,360 --> 00:05:10,080
a

117
00:05:10,080 --> 00:05:12,800
further request from the client and to

118
00:05:12,800 --> 00:05:16,639
inject malicious data potentially

119
00:05:16,639 --> 00:05:18,720
now

120
00:05:18,720 --> 00:05:22,479
this technique kind of resembles a ntlm

121
00:05:22,479 --> 00:05:24,000
delay but

122
00:05:24,000 --> 00:05:27,120
there's a quite a difference and in mtl

123
00:05:27,120 --> 00:05:29,600
and relay the

124
00:05:29,600 --> 00:05:32,560
authentication is relayed to another

125
00:05:32,560 --> 00:05:36,960
server that is attacked actually

126
00:05:36,960 --> 00:05:39,120
but in our case

127
00:05:39,120 --> 00:05:42,560
we attack the client we inject data

128
00:05:42,560 --> 00:05:44,240
notice that

129
00:05:44,240 --> 00:05:45,840
there is uh

130
00:05:45,840 --> 00:05:49,039
nowadays a protection mechanism against

131
00:05:49,039 --> 00:05:50,880
ntl and relay

132
00:05:50,880 --> 00:05:54,240
which is the server signing in plans and

133
00:05:54,240 --> 00:05:55,520
and only

134
00:05:55,520 --> 00:05:58,800
and it's only possible in

135
00:05:58,800 --> 00:06:01,360
unsecured settings or

136
00:06:01,360 --> 00:06:04,880
quite well cases

137
00:06:04,880 --> 00:06:06,479
so um

138
00:06:06,479 --> 00:06:09,039
actually the classical case of this

139
00:06:09,039 --> 00:06:12,880
attack was discovered by luke jennings

140
00:06:12,880 --> 00:06:14,160
and

141
00:06:14,160 --> 00:06:18,960
it involves a group policy update where

142
00:06:18,960 --> 00:06:22,000
an attacker can intervene in this

143
00:06:22,000 --> 00:06:24,240
process and

144
00:06:24,240 --> 00:06:26,479
for example

145
00:06:26,479 --> 00:06:28,240
update the

146
00:06:28,240 --> 00:06:31,759
logons to it or something similar

147
00:06:31,759 --> 00:06:36,560
to achieve a remote code execution

148
00:06:36,880 --> 00:06:38,400
and

149
00:06:38,400 --> 00:06:39,840
the fixes

150
00:06:39,840 --> 00:06:42,720
by microsoft follow this attack are

151
00:06:42,720 --> 00:06:45,759
really specific to policy

152
00:06:45,759 --> 00:06:46,800
and

153
00:06:46,800 --> 00:06:49,840
first group policy retrieval can no

154
00:06:49,840 --> 00:06:53,520
longer be done with ntlm that is

155
00:06:53,520 --> 00:06:55,039
held up in

156
00:06:55,039 --> 00:06:58,160
and and south sea and then

157
00:06:58,160 --> 00:07:02,400
and then secondly and smb and that is

158
00:07:02,400 --> 00:07:05,599
the protocol that is responsible for

159
00:07:05,599 --> 00:07:09,120
obtaining the group policy files

160
00:07:09,120 --> 00:07:10,960
uh is

161
00:07:10,960 --> 00:07:14,840
blocked from a usage on certain

162
00:07:14,840 --> 00:07:16,720
paths

163
00:07:16,720 --> 00:07:19,120
and okay so

164
00:07:19,120 --> 00:07:21,520
let's now see and

165
00:07:21,520 --> 00:07:23,759
a new contribution

166
00:07:23,759 --> 00:07:24,560
so

167
00:07:24,560 --> 00:07:28,080
it's about the azure vedic connect and

168
00:07:28,080 --> 00:07:31,280
just generally and as you will be

169
00:07:31,280 --> 00:07:32,479
connected

170
00:07:32,479 --> 00:07:35,599
as well it's part of the vision of

171
00:07:35,599 --> 00:07:38,160
seamless sign on where the

172
00:07:38,160 --> 00:07:41,280
a user can use its internal active

173
00:07:41,280 --> 00:07:44,319
directory credential while surfing on

174
00:07:44,319 --> 00:07:46,960
the web to access

175
00:07:46,960 --> 00:07:50,960
external resources such as office 365 or

176
00:07:50,960 --> 00:07:51,840
some

177
00:07:51,840 --> 00:07:53,919
internal applications

178
00:07:53,919 --> 00:07:55,759
without the need

179
00:07:55,759 --> 00:08:00,319
of a vpn or something similar

180
00:08:00,319 --> 00:08:04,800
and the way it works is the following

181
00:08:04,800 --> 00:08:06,000
we have

182
00:08:06,000 --> 00:08:09,840
as your ad connect server on plan

183
00:08:09,840 --> 00:08:12,639
that

184
00:08:12,639 --> 00:08:15,680
on the one hand

185
00:08:15,680 --> 00:08:19,039
that leaves the password information and

186
00:08:19,039 --> 00:08:20,400
other data

187
00:08:20,400 --> 00:08:23,680
from domain controllers on the network

188
00:08:23,680 --> 00:08:25,520
and on the other end

189
00:08:25,520 --> 00:08:26,479
upload

190
00:08:26,479 --> 00:08:29,599
this information hash to the

191
00:08:29,599 --> 00:08:33,679
azure active directory uh this way you

192
00:08:33,679 --> 00:08:36,479
actually directly is able

193
00:08:36,479 --> 00:08:37,919
to verify

194
00:08:37,919 --> 00:08:42,159
authentication requests by users

195
00:08:42,159 --> 00:08:45,040
and the thing is that

196
00:08:45,040 --> 00:08:48,000
there is no verification that the domain

197
00:08:48,000 --> 00:08:50,959
controller is a real going controller

198
00:08:50,959 --> 00:08:52,959
which means that

199
00:08:52,959 --> 00:08:55,839
an attacker could intervene in this

200
00:08:55,839 --> 00:08:57,839
courses and send

201
00:08:57,839 --> 00:09:02,080
a fake password updates

202
00:09:02,320 --> 00:09:05,839
so how it works and

203
00:09:05,839 --> 00:09:08,640
we should have a full meeting between

204
00:09:08,640 --> 00:09:12,640
the ad connect server and the dc

205
00:09:12,640 --> 00:09:15,839
now the ad connect server tries to

206
00:09:15,839 --> 00:09:18,399
communicate by kilograms

207
00:09:18,399 --> 00:09:21,839
but since scalables failed we make it

208
00:09:21,839 --> 00:09:22,720
fair

209
00:09:22,720 --> 00:09:27,519
it reverts to a ntlm and

210
00:09:27,519 --> 00:09:30,080
at this point and

211
00:09:30,080 --> 00:09:32,399
the attacking relays

212
00:09:32,399 --> 00:09:36,640
ldap packets to the original server and

213
00:09:36,640 --> 00:09:38,440
only and else

214
00:09:38,440 --> 00:09:41,279
msrpc packets that are

215
00:09:41,279 --> 00:09:42,000
a

216
00:09:42,000 --> 00:09:44,800
domain application now the way to

217
00:09:44,800 --> 00:09:47,519
retrieve the passwords is

218
00:09:47,519 --> 00:09:50,640
by using the domain application

219
00:09:50,640 --> 00:09:53,440
waterproof dlsu api

220
00:09:53,440 --> 00:09:54,480
and

221
00:09:54,480 --> 00:09:59,360
by answering with a new malicious change

222
00:09:59,360 --> 00:10:00,320
to the

223
00:10:00,320 --> 00:10:04,000
directory we can introduce effect

224
00:10:04,000 --> 00:10:07,920
password into the database

225
00:10:07,920 --> 00:10:09,120
so

226
00:10:09,120 --> 00:10:10,880
let's just now

227
00:10:10,880 --> 00:10:14,079
see the demo

228
00:10:16,800 --> 00:10:20,160
so here we see the titles view

229
00:10:20,160 --> 00:10:21,120
and

230
00:10:21,120 --> 00:10:25,920
we want to inject password ntl injection

231
00:10:25,920 --> 00:10:27,839
into

232
00:10:27,839 --> 00:10:28,720
this

233
00:10:28,720 --> 00:10:30,959
account ek test

234
00:10:30,959 --> 00:10:34,800
and clearly it says the puzzle is not

235
00:10:34,800 --> 00:10:38,720
mtlm injection but another puzzle

236
00:10:38,720 --> 00:10:41,040
so now we have the

237
00:10:41,040 --> 00:10:43,120
two things that we do

238
00:10:43,120 --> 00:10:46,480
we first have a modified version on mini

239
00:10:46,480 --> 00:10:48,640
caps

240
00:10:48,640 --> 00:10:51,600
of new caps in the window above and

241
00:10:51,600 --> 00:10:53,440
secondly we have

242
00:10:53,440 --> 00:10:57,279
ldap relay server on the window below

243
00:10:57,279 --> 00:10:58,560
and

244
00:10:58,560 --> 00:10:59,680
now

245
00:10:59,680 --> 00:11:04,160
we wait for the symphonization to occur

246
00:11:04,160 --> 00:11:06,399
and

247
00:11:06,720 --> 00:11:10,320
it usually takes minutes or two but i

248
00:11:10,320 --> 00:11:13,360
sped it up and

249
00:11:13,360 --> 00:11:16,160
now and

250
00:11:16,160 --> 00:11:18,640
okay we can see that

251
00:11:18,640 --> 00:11:21,920
a new change was pulled

252
00:11:21,920 --> 00:11:23,200
and so

253
00:11:23,200 --> 00:11:25,920
we can try to

254
00:11:25,920 --> 00:11:29,200
connect with the new password

255
00:11:29,200 --> 00:11:31,600
and

256
00:11:32,000 --> 00:11:34,240
now

257
00:11:39,120 --> 00:11:42,880
we try several times as it takes time

258
00:11:42,880 --> 00:11:46,320
for the password to be uploaded to

259
00:11:46,320 --> 00:11:51,760
a azure 80 times so let's try

260
00:11:53,440 --> 00:11:57,240
okay not yet

261
00:12:05,120 --> 00:12:06,079
okay

262
00:12:06,079 --> 00:12:11,040
so we have a lot in the third time and

263
00:12:11,040 --> 00:12:16,560
now we can look at the network packets

264
00:12:19,200 --> 00:12:21,360
so

265
00:12:21,600 --> 00:12:25,240
we can see

266
00:12:27,120 --> 00:12:31,680
that the packets that return from the

267
00:12:31,680 --> 00:12:34,880
attacking machines

268
00:12:34,880 --> 00:12:36,560
are the

269
00:12:36,560 --> 00:12:39,680
domain application packets and we'll see

270
00:12:39,680 --> 00:12:42,560
this this is that forward station zero

271
00:12:42,560 --> 00:12:44,240
one is the

272
00:12:44,240 --> 00:12:47,360
attacking machine and and the

273
00:12:47,360 --> 00:12:50,720
ldap is returned from the original

274
00:12:50,720 --> 00:12:53,040
domain controller that is

275
00:12:53,040 --> 00:12:54,639
that so

276
00:12:54,639 --> 00:12:57,360
this is zero one

277
00:12:57,360 --> 00:12:58,240
so

278
00:12:58,240 --> 00:13:01,600
now we've achieved the account takeover

279
00:13:01,600 --> 00:13:03,279
essentially and

280
00:13:03,279 --> 00:13:05,519
we can do what we want

281
00:13:05,519 --> 00:13:06,560
with

282
00:13:06,560 --> 00:13:10,800
that user in azure

283
00:13:12,560 --> 00:13:14,480
so uh

284
00:13:14,480 --> 00:13:15,519
the

285
00:13:15,519 --> 00:13:18,480
response of microsoft is the following

286
00:13:18,480 --> 00:13:22,560
they did not consider the vulnerability

287
00:13:22,560 --> 00:13:26,480
and mostly because it is ntlm and they

288
00:13:26,480 --> 00:13:29,839
considered it rather a configuration

289
00:13:29,839 --> 00:13:33,600
issue and partly because it requires

290
00:13:33,600 --> 00:13:36,800
meet them and meet them is considered

291
00:13:36,800 --> 00:13:39,360
an elevated position

292
00:13:39,360 --> 00:13:42,399
and okay while we strongly agree with

293
00:13:42,399 --> 00:13:45,360
the microsoft recommendations here with

294
00:13:45,360 --> 00:13:46,160
the

295
00:13:46,160 --> 00:13:50,160
tool for any situation on us and we do

296
00:13:50,160 --> 00:13:51,360
think

297
00:13:51,360 --> 00:13:53,040
it should be considered the

298
00:13:53,040 --> 00:13:55,680
vulnerability and sex accordingly

299
00:13:55,680 --> 00:13:59,600
uh it was to mention that there is also

300
00:13:59,600 --> 00:14:01,519
plenty of research

301
00:14:01,519 --> 00:14:03,199
we meet them

302
00:14:03,199 --> 00:14:05,920
and and plenty of ways to achievement

303
00:14:05,920 --> 00:14:09,199
and like a slack attack outsourcing and

304
00:14:09,199 --> 00:14:10,880
so on

305
00:14:10,880 --> 00:14:11,760
so

306
00:14:11,760 --> 00:14:13,760
it's really practical

307
00:14:13,760 --> 00:14:17,040
and i'll stress again the main point

308
00:14:17,040 --> 00:14:17,920
that

309
00:14:17,920 --> 00:14:19,199
there is

310
00:14:19,199 --> 00:14:22,240
really no protection mechanism against

311
00:14:22,240 --> 00:14:24,560
this attack that is built in and by

312
00:14:24,560 --> 00:14:25,760
default

313
00:14:25,760 --> 00:14:26,560
and

314
00:14:26,560 --> 00:14:30,959
there might be specific solutions

315
00:14:30,959 --> 00:14:32,320
so

316
00:14:32,320 --> 00:14:33,120
and

317
00:14:33,120 --> 00:14:34,160
let's

318
00:14:34,160 --> 00:14:38,079
now switch over them to sagi you will

319
00:14:38,079 --> 00:14:42,240
explain about the killers

320
00:14:42,240 --> 00:14:45,040
thanks a lot and now let's see how we

321
00:14:45,040 --> 00:14:47,360
can use the dc injection technique with

322
00:14:47,360 --> 00:14:48,480
canvas

323
00:14:48,480 --> 00:14:51,519
first let's go over some basics

324
00:14:51,519 --> 00:14:53,600
kerberos is an active directory

325
00:14:53,600 --> 00:14:56,639
authentication protocol it was added

326
00:14:56,639 --> 00:14:58,800
some time after until then

327
00:14:58,800 --> 00:15:01,120
and its main goal was to make the

328
00:15:01,120 --> 00:15:04,639
authentication process more secure

329
00:15:04,639 --> 00:15:06,880
the capitalist authentication process is

330
00:15:06,880 --> 00:15:09,680
divided into three parts

331
00:15:09,680 --> 00:15:12,079
in the first part the user will pull his

332
00:15:12,079 --> 00:15:14,639
identity to the domain controller

333
00:15:14,639 --> 00:15:17,839
and in return the domain controller will

334
00:15:17,839 --> 00:15:21,199
return a ticket value ticket or digital

335
00:15:21,199 --> 00:15:23,120
insurance

336
00:15:23,120 --> 00:15:26,079
next when the user wants to access a

337
00:15:26,079 --> 00:15:27,279
server

338
00:15:27,279 --> 00:15:29,680
it will go back to the domain controller

339
00:15:29,680 --> 00:15:31,279
with the digital

340
00:15:31,279 --> 00:15:34,399
and ask for a service template

341
00:15:34,399 --> 00:15:36,320
in the service ticket request the user

342
00:15:36,320 --> 00:15:38,000
will include

343
00:15:38,000 --> 00:15:39,839
service principle name which is

344
00:15:39,839 --> 00:15:41,279
basically the

345
00:15:41,279 --> 00:15:43,040
server name

346
00:15:43,040 --> 00:15:45,040
and the name of the service it's what it

347
00:15:45,040 --> 00:15:49,519
wants to use something like l.o.6

348
00:15:49,519 --> 00:15:52,959
after they assign the tgt the controller

349
00:15:52,959 --> 00:15:57,680
with return input in servers service

350
00:15:57,680 --> 00:16:00,160
which the user will then use

351
00:16:00,160 --> 00:16:02,320
when contacting the server

352
00:16:02,320 --> 00:16:05,120
the tdt is encrypted with the server key

353
00:16:05,120 --> 00:16:08,160
since it's intended to be verified by

354
00:16:08,160 --> 00:16:10,639
the server

355
00:16:10,639 --> 00:16:13,360
when the user establishes a channel

356
00:16:13,360 --> 00:16:17,199
against the server it will send the tgs

357
00:16:17,199 --> 00:16:19,759
the server will then be able to verify

358
00:16:19,759 --> 00:16:23,920
it since it's included with its secret

359
00:16:23,920 --> 00:16:25,920
and also

360
00:16:25,920 --> 00:16:28,720
it can take from it a session key it was

361
00:16:28,720 --> 00:16:31,360
also shared with the user and they can

362
00:16:31,360 --> 00:16:34,560
both use that session key to establish

363
00:16:34,560 --> 00:16:35,600
a

364
00:16:35,600 --> 00:16:40,160
encrypted channel in other particles

365
00:16:40,800 --> 00:16:43,440
and to have some more background on our

366
00:16:43,440 --> 00:16:46,320
attack let's first talk about cadence's

367
00:16:46,320 --> 00:16:47,440
protein

368
00:16:47,440 --> 00:16:49,839
and case is putting within an old attack

369
00:16:49,839 --> 00:16:52,480
technique that was used in bypass

370
00:16:52,480 --> 00:16:53,839
authentication

371
00:16:53,839 --> 00:16:56,720
on network equipment like vpns and

372
00:16:56,720 --> 00:16:59,040
followers

373
00:16:59,040 --> 00:17:02,079
a user logs onto server using plaintext

374
00:17:02,079 --> 00:17:03,680
credentials

375
00:17:03,680 --> 00:17:06,079
and the server uses those credentials to

376
00:17:06,079 --> 00:17:08,799
generate an earth request

377
00:17:08,799 --> 00:17:12,319
an attacker using newton intercepts

378
00:17:12,319 --> 00:17:14,079
that request

379
00:17:14,079 --> 00:17:16,959
and returns effect with life

380
00:17:16,959 --> 00:17:18,720
basically the reply is fake since the

381
00:17:18,720 --> 00:17:20,799
attacker doesn't have the necessary

382
00:17:20,799 --> 00:17:23,199
secret to create everyone

383
00:17:23,199 --> 00:17:25,599
and also the server doesn't have the

384
00:17:25,599 --> 00:17:29,039
necessary secret to validate the reply

385
00:17:29,039 --> 00:17:33,679
so it just removes the users of them

386
00:17:33,679 --> 00:17:36,400
to mitigate this attack another step to

387
00:17:36,400 --> 00:17:39,280
the authentication process was added

388
00:17:39,280 --> 00:17:42,480
now after receiving the air supply

389
00:17:42,480 --> 00:17:45,360
the server uses the included tgt

390
00:17:45,360 --> 00:17:47,760
and ask the demand tutorial for a

391
00:17:47,760 --> 00:17:49,600
service sticker

392
00:17:49,600 --> 00:17:52,799
with which itself is the target

393
00:17:52,799 --> 00:17:55,120
but the domain controller returns a

394
00:17:55,120 --> 00:17:57,600
valid service ticket and since the

395
00:17:57,600 --> 00:17:59,760
target is the server itself it can

396
00:17:59,760 --> 00:18:02,000
validate the ticket and know that the

397
00:18:02,000 --> 00:18:04,880
user ended the one controller on january

398
00:18:04,880 --> 00:18:08,640
and only then it can improve their users

399
00:18:08,640 --> 00:18:10,720
this process of asking the service

400
00:18:10,720 --> 00:18:11,679
ticket

401
00:18:11,679 --> 00:18:12,799
to serve

402
00:18:12,799 --> 00:18:17,200
is usually done with the spm as folks

403
00:18:18,400 --> 00:18:20,960
so as we are saying we cannot manipulate

404
00:18:20,960 --> 00:18:23,760
the authentication process itself and

405
00:18:23,760 --> 00:18:25,039
the tickets

406
00:18:25,039 --> 00:18:26,840
so what can we

407
00:18:26,840 --> 00:18:30,400
do let's take a look at how a typical

408
00:18:30,400 --> 00:18:31,840
workstation

409
00:18:31,840 --> 00:18:34,559
enumerates the domain and selects the

410
00:18:34,559 --> 00:18:37,280
the desktop organs

411
00:18:37,280 --> 00:18:38,960
so the process itself of the

412
00:18:38,960 --> 00:18:41,600
immunization and the disease selection

413
00:18:41,600 --> 00:18:43,600
is done using the

414
00:18:43,600 --> 00:18:46,240
combination of dns queries and other

415
00:18:46,240 --> 00:18:47,320
searches

416
00:18:47,320 --> 00:18:51,200
unauthenticated searches and regard

417
00:18:51,200 --> 00:18:53,919
until the dress this is chosen

418
00:18:53,919 --> 00:18:54,840
only

419
00:18:54,840 --> 00:18:57,200
then a network demonstration will be

420
00:18:57,200 --> 00:18:59,360
established against the chosen dc and

421
00:18:59,360 --> 00:19:01,679
some messages will pass over it

422
00:19:01,679 --> 00:19:04,400
this is the most crucial part since to

423
00:19:04,400 --> 00:19:06,960
the order to establish a network session

424
00:19:06,960 --> 00:19:10,320
and reply to messages the target server

425
00:19:10,320 --> 00:19:12,720
must have the client machine circuit

426
00:19:12,720 --> 00:19:13,840
that means

427
00:19:13,840 --> 00:19:17,360
it's a general and decent

428
00:19:17,360 --> 00:19:18,080
so

429
00:19:18,080 --> 00:19:20,720
as we have seen the process of selecting

430
00:19:20,720 --> 00:19:23,360
the disk itself is not secure unless

431
00:19:23,360 --> 00:19:25,440
some form of validation is done

432
00:19:25,440 --> 00:19:26,720
afterwards

433
00:19:26,720 --> 00:19:29,520
so what can we do with this

434
00:19:29,520 --> 00:19:31,360
we can convince the client machine that

435
00:19:31,360 --> 00:19:34,080
we are the dc

436
00:19:34,080 --> 00:19:36,960
and we can afterwards we can just delay

437
00:19:36,960 --> 00:19:41,120
all kinds of requests so to release this

438
00:19:41,120 --> 00:19:43,520
then when the client wants to ingest

439
00:19:43,520 --> 00:19:47,280
data from the dc our safe disney we can

440
00:19:47,280 --> 00:19:49,600
sell anyone this is data once back to

441
00:19:49,600 --> 00:19:52,760
the machine

442
00:19:52,799 --> 00:19:56,240
let's take a look at the attack here

443
00:19:56,240 --> 00:19:58,160
the current machine starts the this is

444
00:19:58,160 --> 00:20:01,360
selection process and we inject our

445
00:20:01,360 --> 00:20:03,280
circuit dc

446
00:20:03,280 --> 00:20:05,200
then when the autocad authentication

447
00:20:05,200 --> 00:20:06,480
process starts

448
00:20:06,480 --> 00:20:09,600
you just relay all the messages to this

449
00:20:09,600 --> 00:20:12,559
day and then back to the client

450
00:20:12,559 --> 00:20:15,200
until the authentication finishes

451
00:20:15,200 --> 00:20:17,840
and again the process of asking the

452
00:20:17,840 --> 00:20:21,760
teachers for hosts will work since uh

453
00:20:21,760 --> 00:20:24,960
the this is genuine and we return a

454
00:20:24,960 --> 00:20:27,760
visit tjs

455
00:20:28,159 --> 00:20:30,720
then when a client wants to

456
00:20:30,720 --> 00:20:32,880
ingest data from the dc

457
00:20:32,880 --> 00:20:33,760
uh

458
00:20:33,760 --> 00:20:36,159
weird this is so we have the target

459
00:20:36,159 --> 00:20:39,280
service it needs so it's us it asks for

460
00:20:39,280 --> 00:20:40,960
a service ticket

461
00:20:40,960 --> 00:20:43,200
and since our machine is a valid machine

462
00:20:43,200 --> 00:20:46,080
in the domain and we have re-registered

463
00:20:46,080 --> 00:20:48,880
all the students who need

464
00:20:48,880 --> 00:20:51,760
this in resells the ticket

465
00:20:51,760 --> 00:20:53,600
and the channel will be established

466
00:20:53,600 --> 00:20:57,520
against our dc with the chosen protocol

467
00:20:57,520 --> 00:21:00,320
note that the channel can even decide or

468
00:21:00,320 --> 00:21:03,039
encrypted

469
00:21:14,320 --> 00:21:16,960
so what we need for the attack to work

470
00:21:16,960 --> 00:21:20,320
we need an application that uses canvas

471
00:21:20,320 --> 00:21:23,039
that ingests data from the dc without

472
00:21:23,039 --> 00:21:25,280
validating it

473
00:21:25,280 --> 00:21:26,720
and of course those

474
00:21:26,720 --> 00:21:29,520
does dynamically sense for disease and

475
00:21:29,520 --> 00:21:32,400
does not use a fixed list

476
00:21:32,400 --> 00:21:34,799
we will also need a man in the middle

477
00:21:34,799 --> 00:21:36,240
between the dc

478
00:21:36,240 --> 00:21:39,120
between the client application

479
00:21:39,120 --> 00:21:42,080
and at least the dns server

480
00:21:42,080 --> 00:21:44,559
and lastly we will need a

481
00:21:44,559 --> 00:21:46,960
valid machine account in the domain with

482
00:21:46,960 --> 00:21:49,200
the ability to register

483
00:21:49,200 --> 00:21:51,360
the experience we need on it

484
00:21:51,360 --> 00:21:54,400
and this can be achieved by using the

485
00:21:54,400 --> 00:21:57,039
machine account for auto policy which is

486
00:21:57,039 --> 00:21:59,360
turned on by default and

487
00:21:59,360 --> 00:22:01,760
allows any user in the domain to create

488
00:22:01,760 --> 00:22:03,120
up to 10

489
00:22:03,120 --> 00:22:04,960
machine accounts

490
00:22:04,960 --> 00:22:06,960
after creating the machine account a

491
00:22:06,960 --> 00:22:09,120
user has asked the permissions to

492
00:22:09,120 --> 00:22:10,320
register

493
00:22:10,320 --> 00:22:14,320
almost any type of spns on that machine

494
00:22:14,320 --> 00:22:18,480
except a few that we will mention later

495
00:22:19,679 --> 00:22:21,600
let's see some real-world example of

496
00:22:21,600 --> 00:22:23,600
this attack

497
00:22:23,600 --> 00:22:27,039
the first one is azure ready connect

498
00:22:27,039 --> 00:22:29,760
yes it has already connected again

499
00:22:29,760 --> 00:22:31,919
it's basically the same scenario as the

500
00:22:31,919 --> 00:22:34,240
others already described

501
00:22:34,240 --> 00:22:36,640
but this time we will inject this using

502
00:22:36,640 --> 00:22:39,120
kernels instead of antenna

503
00:22:39,120 --> 00:22:40,960
and we won't show a demo for this

504
00:22:40,960 --> 00:22:43,919
because it's identical to the domain is

505
00:22:43,919 --> 00:22:45,360
already shown

506
00:22:45,360 --> 00:22:48,720
but it's worth noting that when

507
00:22:48,720 --> 00:22:51,919
requesting the one replication

508
00:22:51,919 --> 00:22:53,840
has already connected is these two

509
00:22:53,840 --> 00:22:56,240
special streams

510
00:22:56,240 --> 00:22:58,720
these sdns are protected directly

511
00:22:58,720 --> 00:23:00,159
directly

512
00:23:00,159 --> 00:23:02,960
and to be able to register them you must

513
00:23:02,960 --> 00:23:04,799
have full control over the machine

514
00:23:04,799 --> 00:23:06,000
account

515
00:23:06,000 --> 00:23:08,080
that's why we can't use the machine

516
00:23:08,080 --> 00:23:10,080
account quota tweak

517
00:23:10,080 --> 00:23:12,080
for this attack and this makes the

518
00:23:12,080 --> 00:23:16,720
scenario more difficult to achieve

519
00:23:17,280 --> 00:23:19,919
our second example is there will be

520
00:23:19,919 --> 00:23:21,039
center

521
00:23:21,039 --> 00:23:23,200
administrators use the center to

522
00:23:23,200 --> 00:23:25,679
centralize the management of the

523
00:23:25,679 --> 00:23:28,080
e6 servers and the underlying virtual

524
00:23:28,080 --> 00:23:30,000
machine

525
00:23:30,000 --> 00:23:31,520
this center supports windows

526
00:23:31,520 --> 00:23:32,880
authentication

527
00:23:32,880 --> 00:23:35,840
and it it allows the digital snappings

528
00:23:35,840 --> 00:23:36,880
to

529
00:23:36,880 --> 00:23:40,159
add security works

530
00:23:41,039 --> 00:23:43,600
this that makes him vulnerable it's

531
00:23:43,600 --> 00:23:45,039
vulnerable to

532
00:23:45,039 --> 00:23:46,640
this injection

533
00:23:46,640 --> 00:23:50,000
which results in physicist connection

534
00:23:50,000 --> 00:23:52,000
and let's see the attack flow

535
00:23:52,000 --> 00:23:54,159
we depart our little machine and

536
00:23:54,159 --> 00:23:58,559
register the needed sdns in this case

537
00:23:58,559 --> 00:24:01,600
we log on with the rpg and village

538
00:24:01,600 --> 00:24:03,440
account to the recent

539
00:24:03,440 --> 00:24:05,120
worldwide

540
00:24:05,120 --> 00:24:06,960
recently we started the authentication

541
00:24:06,960 --> 00:24:08,320
process

542
00:24:08,320 --> 00:24:09,279
which is

543
00:24:09,279 --> 00:24:12,320
we have already discussed we relate to

544
00:24:12,320 --> 00:24:13,760
dc

545
00:24:13,760 --> 00:24:16,960
then when assessing the user privileges

546
00:24:16,960 --> 00:24:19,600
this center needs to translate the id

547
00:24:19,600 --> 00:24:21,520
group names to their respective

548
00:24:21,520 --> 00:24:25,039
securities and security ideas

549
00:24:25,039 --> 00:24:27,440
in this case we can intervene in those

550
00:24:27,440 --> 00:24:31,279
adult centers and return a fake security

551
00:24:31,279 --> 00:24:34,159
system for instance when

552
00:24:34,159 --> 00:24:36,640
this center wants to translate domain

553
00:24:36,640 --> 00:24:40,000
admins to security we can return the

554
00:24:40,000 --> 00:24:43,600
security for domain users which results

555
00:24:43,600 --> 00:24:46,559
in every domain using

556
00:24:46,559 --> 00:24:49,840
images in this center

557
00:24:49,919 --> 00:24:51,760
and let's see a demo

558
00:24:51,760 --> 00:24:54,320
and socially so this demo we don't we

559
00:24:54,320 --> 00:24:57,039
don't have the attacker's view so i will

560
00:24:57,039 --> 00:24:59,360
try to describe what happens behind the

561
00:24:59,360 --> 00:25:02,159
scenes here we have a

562
00:25:02,159 --> 00:25:04,880
recent machine which we have already

563
00:25:04,880 --> 00:25:06,320
written

564
00:25:06,320 --> 00:25:08,639
and

565
00:25:08,799 --> 00:25:11,600
now we see the configured walls was on

566
00:25:11,600 --> 00:25:13,039
that machine

567
00:25:13,039 --> 00:25:15,600
we see that we have configured an

568
00:25:15,600 --> 00:25:18,159
administrative world that is marked

569
00:25:18,159 --> 00:25:21,039
through the ideal zero means

570
00:25:21,039 --> 00:25:23,360
and besides besides that there is no

571
00:25:23,360 --> 00:25:24,880
other world map

572
00:25:24,880 --> 00:25:27,440
meaning that so the main user to be able

573
00:25:27,440 --> 00:25:30,240
to log on to this server it must be a

574
00:25:30,240 --> 00:25:33,919
member either directly or indirectly or

575
00:25:33,919 --> 00:25:36,640
not next

576
00:25:36,960 --> 00:25:38,720
now

577
00:25:38,720 --> 00:25:39,600
let's

578
00:25:39,600 --> 00:25:41,200
select an add

579
00:25:41,200 --> 00:25:42,880
without privileges

580
00:25:42,880 --> 00:25:45,120
here we have a regular user

581
00:25:45,120 --> 00:25:49,600
that is only a member of domain wizards

582
00:25:50,640 --> 00:25:52,400
okay

583
00:25:52,400 --> 00:25:53,440
so

584
00:25:53,440 --> 00:25:57,840
let's log off from this center

585
00:26:02,640 --> 00:26:03,360
so

586
00:26:03,360 --> 00:26:05,760
the solver we know i will mention that

587
00:26:05,760 --> 00:26:09,600
in the background we have two boxes one

588
00:26:09,600 --> 00:26:13,120
for ldap and one for smd to send all the

589
00:26:13,120 --> 00:26:14,880
all the requests that are done by

590
00:26:14,880 --> 00:26:16,000
receptor

591
00:26:16,000 --> 00:26:19,120
we use that add-on proxy to answer adobe

592
00:26:19,120 --> 00:26:22,240
searches that are uh right now and

593
00:26:22,240 --> 00:26:24,400
instead of returning the allergies for

594
00:26:24,400 --> 00:26:26,559
the nervous so we have abilities we

595
00:26:26,559 --> 00:26:29,120
return the idea of the main users which

596
00:26:29,120 --> 00:26:30,320
as you can see

597
00:26:30,320 --> 00:26:32,799
allows regular user to log onto the

598
00:26:32,799 --> 00:26:34,799
machine and is now a school

599
00:26:34,799 --> 00:26:39,080
administrator in this center

600
00:26:41,360 --> 00:26:44,480
our third example is the untrust aid in

601
00:26:44,480 --> 00:26:46,080
which

602
00:26:46,080 --> 00:26:48,640
added region it is a mac and linux

603
00:26:48,640 --> 00:26:51,520
machine to join

604
00:26:51,520 --> 00:26:53,919
this allows us to consider

605
00:26:53,919 --> 00:26:57,039
privileges for instance civic villages

606
00:26:57,039 --> 00:27:00,559
using id security works

607
00:27:00,559 --> 00:27:03,120
and this application also is honorable

608
00:27:03,120 --> 00:27:05,440
to this injection which results in

609
00:27:05,440 --> 00:27:08,000
previous escalation

610
00:27:08,000 --> 00:27:10,880
the tax law is basically identical to

611
00:27:10,880 --> 00:27:12,559
what we have already shown in this

612
00:27:12,559 --> 00:27:13,919
center

613
00:27:13,919 --> 00:27:15,919
except in this case

614
00:27:15,919 --> 00:27:18,320
uh by default

615
00:27:18,320 --> 00:27:20,559
after joining the domain

616
00:27:20,559 --> 00:27:24,399
linux allows any domain user to do ssh

617
00:27:24,399 --> 00:27:25,679
machine

618
00:27:25,679 --> 00:27:28,159
but of course that user doesn't have cd

619
00:27:28,159 --> 00:27:29,600
privileges

620
00:27:29,600 --> 00:27:30,480
then

621
00:27:30,480 --> 00:27:32,799
when we try to do sudo

622
00:27:32,799 --> 00:27:34,960
we

623
00:27:46,240 --> 00:27:48,320
but this scenario is pretty much the

624
00:27:48,320 --> 00:27:50,000
same

625
00:27:50,000 --> 00:27:52,159
let's see who has sudo which who has

626
00:27:52,159 --> 00:27:55,039
shooting machines on that villagers on

627
00:27:55,039 --> 00:27:57,279
this machine you can see that the third

628
00:27:57,279 --> 00:27:59,360
images are knocked to two groups the

629
00:27:59,360 --> 00:28:01,679
mirror means

630
00:28:01,679 --> 00:28:04,640
and nothing else

631
00:28:04,640 --> 00:28:05,440
so

632
00:28:05,440 --> 00:28:07,120
let's log off

633
00:28:07,120 --> 00:28:09,919
and you see we are using the regular

634
00:28:09,919 --> 00:28:11,440
visual again

635
00:28:11,440 --> 00:28:14,399
and it doesn't have any privileges

636
00:28:14,399 --> 00:28:17,840
except for the known reasons

637
00:28:20,399 --> 00:28:22,080
and now we will

638
00:28:22,080 --> 00:28:26,240
do ssh using the user

639
00:28:28,320 --> 00:28:32,320
which as i said is what works by default

640
00:28:32,320 --> 00:28:35,039
which is no surprise but now we are

641
00:28:35,039 --> 00:28:37,600
trying to do sudo and

642
00:28:37,600 --> 00:28:40,240
let's see if you

643
00:28:42,840 --> 00:28:46,240
succeed yeah and regular user which is

644
00:28:46,240 --> 00:28:48,559
just a member of the learning of limits

645
00:28:48,559 --> 00:28:50,880
now has two different images on this

646
00:28:50,880 --> 00:28:53,279
section

647
00:28:55,120 --> 00:28:56,320
okay

648
00:28:56,320 --> 00:29:00,000
so how can this attack the initiator

649
00:29:00,000 --> 00:29:01,600
when our application

650
00:29:01,600 --> 00:29:05,679
is just data from the dc we must verify

651
00:29:05,679 --> 00:29:07,679
that this identity first the

652
00:29:07,679 --> 00:29:10,399
verification can be done either by

653
00:29:10,399 --> 00:29:12,960
establishing a networking session

654
00:29:12,960 --> 00:29:16,000
and sending at least one message over it

655
00:29:16,000 --> 00:29:18,480
or by using lds with certificate

656
00:29:18,480 --> 00:29:19,840
validation

657
00:29:19,840 --> 00:29:22,559
another option is to use canvas online

658
00:29:22,559 --> 00:29:25,840
but we haven't tested it

659
00:29:25,840 --> 00:29:28,960
as a side world windows gpo is still

660
00:29:28,960 --> 00:29:32,240
safe since the gpo client does not pull

661
00:29:32,240 --> 00:29:36,720
any gpo unless there is an active

662
00:29:36,720 --> 00:29:41,720
network on session against the chosen dc

663
00:29:43,200 --> 00:29:45,840
let's talk about the vulnerabilities

664
00:29:45,840 --> 00:29:47,840
so microsoft

665
00:29:47,840 --> 00:29:50,559
on the ntln injection as ryan has

666
00:29:50,559 --> 00:29:53,200
already said it doesn't consider it is a

667
00:29:53,200 --> 00:29:54,640
vulnerability

668
00:29:54,640 --> 00:29:55,840
but

669
00:29:55,840 --> 00:29:58,480
it did issue a guidance

670
00:29:58,480 --> 00:30:00,799
on how to disable the ntlm for the

671
00:30:00,799 --> 00:30:02,320
service account

672
00:30:02,320 --> 00:30:05,360
from the kernel's injection microsoft

673
00:30:05,360 --> 00:30:08,000
actually issued the cd and already since

674
00:30:08,000 --> 00:30:10,080
the issue

675
00:30:10,080 --> 00:30:12,559
beyond trust for elder dwight

676
00:30:12,559 --> 00:30:14,480
has acknowledged the issue and are

677
00:30:14,480 --> 00:30:16,960
working on six and the same with the

678
00:30:16,960 --> 00:30:20,000
real world the knowledge the issue

679
00:30:20,000 --> 00:30:22,480
working on six and has

680
00:30:22,480 --> 00:30:24,720
issued the security advisory with the

681
00:30:24,720 --> 00:30:27,919
temporary work right

682
00:30:28,559 --> 00:30:30,720
somewhere closing remarks

683
00:30:30,720 --> 00:30:33,039
uh securing protocols from vietnam is

684
00:30:33,039 --> 00:30:35,200
very hard as you've seen

685
00:30:35,200 --> 00:30:37,760
and because of this

686
00:30:37,760 --> 00:30:40,880
we believe this specific issue is very

687
00:30:40,880 --> 00:30:42,080
widespread

688
00:30:42,080 --> 00:30:44,720
and we believe that lower a lot more

689
00:30:44,720 --> 00:30:46,480
applications will be found that are

690
00:30:46,480 --> 00:30:50,320
vulnerable to this type of attacks and

691
00:30:50,320 --> 00:30:53,360
cameras is not validating this identity

692
00:30:53,360 --> 00:30:56,240
properly so it's up it's up to the

693
00:30:56,240 --> 00:30:58,159
client to do so

694
00:30:58,159 --> 00:31:01,840
and as we are seeing gss api either

695
00:31:01,840 --> 00:31:04,720
encryption or signing does not guarantee

696
00:31:04,720 --> 00:31:08,880
protection from non-individual attacks

697
00:31:09,279 --> 00:31:12,480
some tips from different for defenders

698
00:31:12,480 --> 00:31:15,360
always enable the server can sign in if

699
00:31:15,360 --> 00:31:18,080
you don't do so you only expose yourself

700
00:31:18,080 --> 00:31:21,440
to lots of more simple attacks in what

701
00:31:21,440 --> 00:31:23,760
we have already shown

702
00:31:23,760 --> 00:31:26,880
uh as we all always say monitor when we

703
00:31:26,880 --> 00:31:28,799
do something in traffic

704
00:31:28,799 --> 00:31:31,840
and plenty of critical servers like

705
00:31:31,840 --> 00:31:35,200
azure radio connect like vmware

706
00:31:35,200 --> 00:31:36,880
the same is rewarded in the wrong

707
00:31:36,880 --> 00:31:38,320
controller

708
00:31:38,320 --> 00:31:41,120
regarding curves injection

709
00:31:41,120 --> 00:31:43,919
monitor for suspicious experience for

710
00:31:43,919 --> 00:31:46,799
instance a regular machine that has an

711
00:31:46,799 --> 00:31:50,720
elder stm is suspicious

712
00:31:50,720 --> 00:31:53,120
and in general just

713
00:31:53,120 --> 00:31:55,919
try to avoid doing with them

714
00:31:55,919 --> 00:31:57,810
thank you

715
00:31:57,810 --> 00:32:07,389
[Music]

716
00:32:07,919 --> 00:32:10,000
you

