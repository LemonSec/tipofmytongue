1
00:00:00,910 --> 00:00:08,720
[Music]

2
00:00:08,720 --> 00:00:10,240
hello everyone

3
00:00:10,240 --> 00:00:13,360
today i will introduce our work named

4
00:00:13,360 --> 00:00:16,880
ecomo we host embedded newness kernels

5
00:00:16,880 --> 00:00:19,760
via peripheral transplantation

6
00:00:19,760 --> 00:00:21,600
my name is

7
00:00:21,600 --> 00:00:23,439
from the hong kong polytechnic

8
00:00:23,439 --> 00:00:24,880
university

9
00:00:24,880 --> 00:00:27,439
part of this work is completed when i

10
00:00:27,439 --> 00:00:31,599
was visiting georgian university

11
00:00:31,599 --> 00:00:34,160
before i move forward let me introduce

12
00:00:34,160 --> 00:00:36,079
myself briefly

13
00:00:36,079 --> 00:00:38,800
i am a phd student in the hong kong

14
00:00:38,800 --> 00:00:41,200
polytechnic university and i will

15
00:00:41,200 --> 00:00:42,719
graduate soon

16
00:00:42,719 --> 00:00:45,680
i have broad interest in the area of

17
00:00:45,680 --> 00:00:49,039
network security system security iot

18
00:00:49,039 --> 00:00:51,680
security and blockchain security

19
00:00:51,680 --> 00:00:55,719
you can reach me via the email j-i-a-n-g

20
00:00:55,719 --> 00:00:59,039
m-u-s-u-i at gmail.com

21
00:00:59,039 --> 00:01:01,840
and if you want to know more about me

22
00:01:01,840 --> 00:01:04,640
please visit my personal site

23
00:01:04,640 --> 00:01:06,360
3wd

24
00:01:06,360 --> 00:01:10,080
muhui dot site

25
00:01:10,080 --> 00:01:14,000
ok so now let me talk about the

26
00:01:14,000 --> 00:01:16,159
motivation of this work

27
00:01:16,159 --> 00:01:18,960
iot devices are becoming more and more

28
00:01:18,960 --> 00:01:20,159
popular

29
00:01:20,159 --> 00:01:24,000
many of these devices including printers

30
00:01:24,000 --> 00:01:25,280
cameras

31
00:01:25,280 --> 00:01:28,720
uterus and mobiles we are all running on

32
00:01:28,720 --> 00:01:33,200
the unix-based operating systems

33
00:01:34,479 --> 00:01:37,520
meanwhile hundreds of vulnerabilities

34
00:01:37,520 --> 00:01:41,040
are explored every year for unix kernel

35
00:01:41,040 --> 00:01:44,560
which are shown in the figure

36
00:01:45,840 --> 00:01:49,200
with these vulnerabilities attackers can

37
00:01:49,200 --> 00:01:51,600
compromise the devices

38
00:01:51,600 --> 00:01:54,159
control them and launch different kinds

39
00:01:54,159 --> 00:01:55,520
of attacks

40
00:01:55,520 --> 00:01:58,320
resulting in a huge noise

41
00:01:58,320 --> 00:01:59,280
thus

42
00:01:59,280 --> 00:02:02,560
the security of embedded devices

43
00:02:02,560 --> 00:02:06,960
especially the kernel deserves our study

44
00:02:06,960 --> 00:02:08,878
you need there are two different

45
00:02:08,878 --> 00:02:11,038
analysis mechanisms

46
00:02:11,038 --> 00:02:14,080
one is static analysis

47
00:02:14,080 --> 00:02:17,120
however static analysis may introduce

48
00:02:17,120 --> 00:02:20,160
many false positives

49
00:02:20,160 --> 00:02:23,360
the other one is dynamic analysis

50
00:02:23,360 --> 00:02:26,480
dynamic analysis is dependent on the

51
00:02:26,480 --> 00:02:29,200
capability of rehosting

52
00:02:29,200 --> 00:02:33,040
especially for analyzing the embedded

53
00:02:33,040 --> 00:02:36,040
devices

54
00:02:36,319 --> 00:02:40,239
thus we hosting is very important

55
00:02:40,239 --> 00:02:43,120
you may ask what rehosting is

56
00:02:43,120 --> 00:02:46,720
rehosting is also known as emulation

57
00:02:46,720 --> 00:02:50,160
it is used to run a target system inside

58
00:02:50,160 --> 00:02:53,519
an eliminated environment

59
00:02:53,519 --> 00:02:56,480
for example the state-of-the-art eminent

60
00:02:56,480 --> 00:02:57,680
cameo

61
00:02:57,680 --> 00:03:00,560
in this work we define rehosting the

62
00:03:00,560 --> 00:03:03,760
ninjas kernel successfully as it can

63
00:03:03,760 --> 00:03:05,760
launch the shell

64
00:03:05,760 --> 00:03:08,640
with the rehosting capability

65
00:03:08,640 --> 00:03:12,159
we can introspect the runtime state

66
00:03:12,159 --> 00:03:15,599
and it can support the dynamic analysis

67
00:03:15,599 --> 00:03:20,159
which complements the static analysis

68
00:03:20,159 --> 00:03:22,800
furthermore different applications like

69
00:03:22,800 --> 00:03:24,480
crash analysis

70
00:03:24,480 --> 00:03:27,840
used kit analysis and kernel fuzzing can

71
00:03:27,840 --> 00:03:30,239
be built based on the capability of

72
00:03:30,239 --> 00:03:33,239
re-hosting

73
00:03:33,599 --> 00:03:37,440
now let's introduce the the background

74
00:03:37,440 --> 00:03:38,560
knowledge

75
00:03:38,560 --> 00:03:41,599
units kernel consists of three different

76
00:03:41,599 --> 00:03:43,280
kinds of code

77
00:03:43,280 --> 00:03:45,840
the first is architecture independent

78
00:03:45,840 --> 00:03:46,720
code

79
00:03:46,720 --> 00:03:49,280
which contains the core functionality

80
00:03:49,280 --> 00:03:53,519
used by all cpu architectures

81
00:03:53,519 --> 00:03:55,920
the second is architecture dependent

82
00:03:55,920 --> 00:03:58,560
code which serves for a specific

83
00:03:58,560 --> 00:04:00,239
architecture

84
00:04:00,239 --> 00:04:03,360
the third is board specific code which

85
00:04:03,360 --> 00:04:05,840
is used by specific board

86
00:04:05,840 --> 00:04:07,360
or machine

87
00:04:07,360 --> 00:04:09,920
as there are many different kinds of

88
00:04:09,920 --> 00:04:12,959
machines nunes kernel introduced the

89
00:04:12,959 --> 00:04:15,280
structural machine description

90
00:04:15,280 --> 00:04:17,519
for the arm architecture

91
00:04:17,519 --> 00:04:20,880
to describe different machines

92
00:04:20,880 --> 00:04:23,919
the figure shows an example

93
00:04:23,919 --> 00:04:27,120
of one machine named arm versatile ap in

94
00:04:27,120 --> 00:04:29,040
the unix kernel

95
00:04:29,040 --> 00:04:31,440
during the booting process the ninja's

96
00:04:31,440 --> 00:04:33,919
kernel will invoke the function

97
00:04:33,919 --> 00:04:37,759
in its iq to initialize the ic

98
00:04:37,759 --> 00:04:40,720
to emulate different kinds of machines

99
00:04:40,720 --> 00:04:43,520
cameo also provides the different

100
00:04:43,520 --> 00:04:44,960
machine models

101
00:04:44,960 --> 00:04:47,600
which consists of different peripheral

102
00:04:47,600 --> 00:04:49,440
models

103
00:04:49,440 --> 00:04:52,160
cameo registers the read and write

104
00:04:52,160 --> 00:04:55,280
callback functions for the mm-io address

105
00:04:55,280 --> 00:04:58,560
space of the peripheral and maintains an

106
00:04:58,560 --> 00:05:00,479
internal state machine

107
00:05:00,479 --> 00:05:03,120
to implement the peripheral

108
00:05:03,120 --> 00:05:06,000
functionality

109
00:05:08,000 --> 00:05:10,560
we're hosting the embedded newness

110
00:05:10,560 --> 00:05:12,639
corners is not easy

111
00:05:12,639 --> 00:05:15,680
and we have three main challenges

112
00:05:15,680 --> 00:05:18,960
the first is peripheral dependency

113
00:05:18,960 --> 00:05:21,680
if we can not emulate the peripherals

114
00:05:21,680 --> 00:05:22,960
accurately

115
00:05:22,960 --> 00:05:24,960
the nunes kernel may help

116
00:05:24,960 --> 00:05:26,160
a crash

117
00:05:26,160 --> 00:05:27,600
during the

118
00:05:27,600 --> 00:05:29,680
rehosting process

119
00:05:29,680 --> 00:05:33,759
second is the peripheral diversity

120
00:05:33,759 --> 00:05:36,560
peripherals very widely it is not

121
00:05:36,560 --> 00:05:39,840
practical for cameo to support all kinds

122
00:05:39,840 --> 00:05:41,759
of peripherals

123
00:05:41,759 --> 00:05:42,960
meanwhile

124
00:05:42,960 --> 00:05:45,039
manually developing peripheral

125
00:05:45,039 --> 00:05:47,360
elimination routine is tedious and

126
00:05:47,360 --> 00:05:49,120
error-proof

127
00:05:49,120 --> 00:05:50,160
third

128
00:05:50,160 --> 00:05:53,360
vendors may not strictly follow the gpr

129
00:05:53,360 --> 00:05:54,400
license

130
00:05:54,400 --> 00:05:56,960
which results in the lack of public

131
00:05:56,960 --> 00:05:59,680
information like the specification the

132
00:05:59,680 --> 00:06:02,080
data sheet the source code

133
00:06:02,080 --> 00:06:04,639
which obstructs the diagnosis of

134
00:06:04,639 --> 00:06:09,199
failures on adding ammunition support

135
00:06:09,840 --> 00:06:11,600
to address

136
00:06:11,600 --> 00:06:14,000
to to address the above-mentioned

137
00:06:14,000 --> 00:06:16,800
industry challenges we have three key

138
00:06:16,800 --> 00:06:18,960
insights

139
00:06:18,960 --> 00:06:23,120
first we only need to emulate the early

140
00:06:23,120 --> 00:06:24,880
boot peripherals

141
00:06:24,880 --> 00:06:28,000
and they are the interrupt controller

142
00:06:28,000 --> 00:06:30,240
timer and uat

143
00:06:30,240 --> 00:06:32,560
for the other peripherals

144
00:06:32,560 --> 00:06:35,120
we can support them by installing the

145
00:06:35,120 --> 00:06:37,759
driver with kernel modules

146
00:06:37,759 --> 00:06:40,800
and integrated kernel modules into the

147
00:06:40,800 --> 00:06:43,840
ram file system

148
00:06:43,840 --> 00:06:45,440
after booting up

149
00:06:45,440 --> 00:06:47,120
second

150
00:06:47,120 --> 00:06:49,840
nunes kernel provides interfaces to

151
00:06:49,840 --> 00:06:51,599
implement the drivers of these

152
00:06:51,599 --> 00:06:53,039
peripherals

153
00:06:53,039 --> 00:06:55,520
which brings the chance for us to

154
00:06:55,520 --> 00:06:58,960
replace these diverse peripherals with

155
00:06:58,960 --> 00:07:01,680
designated ones

156
00:07:01,680 --> 00:07:04,880
third embedded newness kernel are

157
00:07:04,880 --> 00:07:08,160
usually modified based on the mainstream

158
00:07:08,160 --> 00:07:11,280
which is open source

159
00:07:13,120 --> 00:07:16,720
with the insights we propose peripheral

160
00:07:16,720 --> 00:07:19,120
transplantation technique

161
00:07:19,120 --> 00:07:21,919
which is device independent and works

162
00:07:21,919 --> 00:07:24,960
towards the newness kernel without the

163
00:07:24,960 --> 00:07:28,000
need of source code

164
00:07:28,000 --> 00:07:31,440
the main idea here is instead of

165
00:07:31,440 --> 00:07:34,560
manually adding ammunition support

166
00:07:34,560 --> 00:07:37,599
we can replace the peripherals that are

167
00:07:37,599 --> 00:07:40,720
used in targeted unis kernels with

168
00:07:40,720 --> 00:07:45,720
existing peripherals in cameo

169
00:07:47,039 --> 00:07:50,319
peripheral transplantation consists of

170
00:07:50,319 --> 00:07:52,960
transplanting two components

171
00:07:52,960 --> 00:07:56,240
one is to transplant emulated models of

172
00:07:56,240 --> 00:07:58,960
peripheral into cameo

173
00:07:58,960 --> 00:08:02,000
this is straight forward as we can

174
00:08:02,000 --> 00:08:05,440
implement it with the provided apis by

175
00:08:05,440 --> 00:08:07,199
cameo

176
00:08:07,199 --> 00:08:10,000
the other one is to transplant the

177
00:08:10,000 --> 00:08:14,000
device drivers into the unix kernel

178
00:08:14,000 --> 00:08:15,919
this is not trivial

179
00:08:15,919 --> 00:08:19,360
as we need to convey the three goals

180
00:08:19,360 --> 00:08:20,479
first

181
00:08:20,479 --> 00:08:22,879
we need to substitute the original

182
00:08:22,879 --> 00:08:24,319
device driver

183
00:08:24,319 --> 00:08:27,039
with the transplanted wax

184
00:08:27,039 --> 00:08:29,199
which requires ecommerce for the

185
00:08:29,199 --> 00:08:31,360
pointers

186
00:08:31,360 --> 00:08:32,320
second

187
00:08:32,320 --> 00:08:34,640
the transplanted driver should not

188
00:08:34,640 --> 00:08:37,519
affect the memory view of the original

189
00:08:37,519 --> 00:08:38,799
kernel

190
00:08:38,799 --> 00:08:42,159
in this case we proposed the concept of

191
00:08:42,159 --> 00:08:43,679
opec memory

192
00:08:43,679 --> 00:08:45,920
which will be discussed in digital

193
00:08:45,920 --> 00:08:47,279
network

194
00:08:47,279 --> 00:08:50,000
third the transplanted driver needs to

195
00:08:50,000 --> 00:08:53,200
invoke apis in the newness kernel to

196
00:08:53,200 --> 00:08:56,160
configure different peripherals which

197
00:08:56,160 --> 00:09:00,719
requires the xml backward pointers

198
00:09:02,880 --> 00:09:06,240
let's look at a concrete example

199
00:09:06,240 --> 00:09:09,399
the function setup arc will set up

200
00:09:09,399 --> 00:09:12,000
architecture-related configurations

201
00:09:12,000 --> 00:09:15,360
and initialize the machine description

202
00:09:15,360 --> 00:09:18,080
structure with step one

203
00:09:18,080 --> 00:09:21,360
our system locates the function setup

204
00:09:21,360 --> 00:09:25,360
arc and injects the install xml for the

205
00:09:25,360 --> 00:09:26,560
pointers

206
00:09:26,560 --> 00:09:30,560
to change the pointers to our own ones

207
00:09:30,560 --> 00:09:32,640
when the function time we need is

208
00:09:32,640 --> 00:09:34,959
invoked in step two

209
00:09:34,959 --> 00:09:38,800
it will initialize the injector timer

210
00:09:38,800 --> 00:09:42,640
injected timer driver via step 4.

211
00:09:42,640 --> 00:09:45,120
accordingly the driver

212
00:09:45,120 --> 00:09:48,399
will invoke apis with ecmo backward

213
00:09:48,399 --> 00:09:50,240
pointers to interact with the

214
00:09:50,240 --> 00:09:54,160
peripherals via step 5.

215
00:09:55,680 --> 00:09:59,600
now let me introduce the workflow of our

216
00:09:59,600 --> 00:10:00,640
system

217
00:10:00,640 --> 00:10:02,959
given one firmware image

218
00:10:02,959 --> 00:10:05,680
first we need to think decompressing the

219
00:10:05,680 --> 00:10:07,200
newness kernel

220
00:10:07,200 --> 00:10:09,760
then we need to identify the xml

221
00:10:09,760 --> 00:10:11,680
pointers

222
00:10:11,680 --> 00:10:14,240
after that we need to generate xml

223
00:10:14,240 --> 00:10:16,480
pointer ecmo drivers

224
00:10:16,480 --> 00:10:17,519
finally

225
00:10:17,519 --> 00:10:21,920
the newness kernel can be rehosted

226
00:10:23,120 --> 00:10:25,760
decompress newness kernel

227
00:10:25,760 --> 00:10:28,959
so to decompress the newness kernel we

228
00:10:28,959 --> 00:10:32,560
feed the firmware image to bing walk to

229
00:10:32,560 --> 00:10:35,440
extract the kernel image first

230
00:10:35,440 --> 00:10:38,720
after that we feed the extracted kernel

231
00:10:38,720 --> 00:10:40,959
image to vanina caming

232
00:10:40,959 --> 00:10:44,480
note that the kernel can not be rehosted

233
00:10:44,480 --> 00:10:45,279
now

234
00:10:45,279 --> 00:10:48,079
however it can be decompressed

235
00:10:48,079 --> 00:10:49,760
successfully

236
00:10:49,760 --> 00:10:52,240
by comparing the exclusion trace of

237
00:10:52,240 --> 00:10:55,200
cameo and the assembly code shown in the

238
00:10:55,200 --> 00:10:57,920
figure we can identify the function

239
00:10:57,920 --> 00:11:00,959
decompress kernel after the function

240
00:11:00,959 --> 00:11:03,600
returns we can dump the decompress the

241
00:11:03,600 --> 00:11:06,480
newness kernel

242
00:11:07,920 --> 00:11:11,360
to identify the echo pointers we first

243
00:11:11,360 --> 00:11:14,480
needed to disassemble the decompress the

244
00:11:14,480 --> 00:11:16,000
english kernel

245
00:11:16,000 --> 00:11:18,880
that is the dissembling process will

246
00:11:18,880 --> 00:11:21,440
generate instructions the control flow

247
00:11:21,440 --> 00:11:22,399
graph

248
00:11:22,399 --> 00:11:25,200
the call graph and build the mapping

249
00:11:25,200 --> 00:11:28,160
relationship between each function under

250
00:11:28,160 --> 00:11:30,800
advanced information like a number of

251
00:11:30,800 --> 00:11:33,920
basic blocks the string references

252
00:11:33,920 --> 00:11:35,200
the

253
00:11:35,200 --> 00:11:38,880
the number of colonies and so on

254
00:11:38,880 --> 00:11:41,360
as the ecmo pointers are unique

255
00:11:41,360 --> 00:11:43,440
architecture independent code and

256
00:11:43,440 --> 00:11:45,040
architecture depend

257
00:11:45,040 --> 00:11:48,079
than the code which is open source

258
00:11:48,079 --> 00:11:50,800
in this case we will propose

259
00:11:50,800 --> 00:11:52,800
three strategies

260
00:11:52,800 --> 00:11:55,600
to filter out the ecmo pointers with the

261
00:11:55,600 --> 00:11:56,959
help of

262
00:11:56,959 --> 00:12:00,959
the open sourced munis kernel

263
00:12:01,519 --> 00:12:04,399
first we utilize the

264
00:12:04,399 --> 00:12:06,399
lexical information

265
00:12:06,399 --> 00:12:07,680
for example

266
00:12:07,680 --> 00:12:10,399
the specific constant stream can be

267
00:12:10,399 --> 00:12:15,760
utilized to filter out the echo pointers

268
00:12:15,760 --> 00:12:18,639
as shown in the in the figure the

269
00:12:18,639 --> 00:12:21,440
consonant string is referenced by a data

270
00:12:21,440 --> 00:12:22,480
pointer

271
00:12:22,480 --> 00:12:26,240
and can be easily indicated

272
00:12:27,920 --> 00:12:28,959
meanwhile

273
00:12:28,959 --> 00:12:31,839
there are many other warning information

274
00:12:31,839 --> 00:12:34,240
in the nunes kernel

275
00:12:34,240 --> 00:12:37,600
the nine number and the file name

276
00:12:37,600 --> 00:12:39,760
are the parameters of the warning

277
00:12:39,760 --> 00:12:41,519
information

278
00:12:41,519 --> 00:12:43,200
with these two

279
00:12:43,200 --> 00:12:46,480
with these two attributes we can figure

280
00:12:46,480 --> 00:12:49,120
out the we can fit out more economic

281
00:12:49,120 --> 00:12:50,720
pointers

282
00:12:50,720 --> 00:12:54,399
as the nine number is the operand of

283
00:12:54,399 --> 00:12:57,200
assembly code and the file name is a

284
00:12:57,200 --> 00:13:00,240
constant string

285
00:13:00,720 --> 00:13:01,920
however

286
00:13:01,920 --> 00:13:05,120
not all the ecmo pointers can be located

287
00:13:05,120 --> 00:13:07,360
with lexical information

288
00:13:07,360 --> 00:13:10,399
for those who cannot be identified we

289
00:13:10,399 --> 00:13:13,200
can use the function relationship to

290
00:13:13,200 --> 00:13:16,160
identify them indirectly

291
00:13:16,160 --> 00:13:17,519
for example

292
00:13:17,519 --> 00:13:20,720
if we identify the function identified

293
00:13:20,720 --> 00:13:21,600
full

294
00:13:21,600 --> 00:13:24,160
we can identify the function required

295
00:13:24,160 --> 00:13:26,160
for indirectly

296
00:13:26,160 --> 00:13:29,760
as the identified fool is the corner as

297
00:13:29,760 --> 00:13:31,920
the required food is the corner of

298
00:13:31,920 --> 00:13:35,639
identified food

299
00:13:36,399 --> 00:13:39,199
similarly required food can be the

300
00:13:39,199 --> 00:13:42,000
colony of identified food

301
00:13:42,000 --> 00:13:44,800
and we can identify the required food

302
00:13:44,800 --> 00:13:47,800
indirectly

303
00:13:50,480 --> 00:13:52,800
apart from the colony and corner

304
00:13:52,800 --> 00:13:55,440
relationship

305
00:13:55,440 --> 00:13:58,399
both required full and the identified

306
00:13:58,399 --> 00:14:01,199
food can be called by the same function

307
00:14:01,199 --> 00:14:04,959
named full and these two functions are

308
00:14:04,959 --> 00:14:08,800
have the sibling relationship

309
00:14:11,360 --> 00:14:12,880
however

310
00:14:12,880 --> 00:14:15,040
one function may have more than one

311
00:14:15,040 --> 00:14:18,880
corner one corner or sibling

312
00:14:18,880 --> 00:14:21,440
in this case we need to further consider

313
00:14:21,440 --> 00:14:24,560
the function structure itself

314
00:14:24,560 --> 00:14:25,839
for example

315
00:14:25,839 --> 00:14:28,320
different functions contain different

316
00:14:28,320 --> 00:14:31,040
logic operation and return value

317
00:14:31,040 --> 00:14:33,519
the constants of logic operation or

318
00:14:33,519 --> 00:14:36,079
return value in source code

319
00:14:36,079 --> 00:14:40,719
map to the operands in the assembly code

320
00:14:42,639 --> 00:14:45,199
meanwhile we can also consider the

321
00:14:45,199 --> 00:14:47,440
calling number and the basic block

322
00:14:47,440 --> 00:14:48,560
number

323
00:14:48,560 --> 00:14:50,880
these attributes can help filter out the

324
00:14:50,880 --> 00:14:52,800
xml pointers

325
00:14:52,800 --> 00:14:55,120
for example the two colony functions

326
00:14:55,120 --> 00:14:58,639
conifer1 and conifer 2 mapped to the two

327
00:14:58,639 --> 00:15:01,360
pl instructions that is the object of

328
00:15:01,360 --> 00:15:05,600
full offset full offset plus zero x

329
00:15:05,600 --> 00:15:08,079
one eight and the full offset plus zero

330
00:15:08,079 --> 00:15:09,839
x one thing

331
00:15:09,839 --> 00:15:12,560
also there goes the three basic blocks

332
00:15:12,560 --> 00:15:13,920
in source code

333
00:15:13,920 --> 00:15:16,320
mapped to three basic blocks in assembly

334
00:15:16,320 --> 00:15:18,639
code

335
00:15:20,720 --> 00:15:23,760
after identifying the xml pointers we

336
00:15:23,760 --> 00:15:27,360
need to generate the ecmo drivers

337
00:15:27,360 --> 00:15:30,560
we can we compile the we compile the

338
00:15:30,560 --> 00:15:33,759
source code into binary object to get

339
00:15:33,759 --> 00:15:35,920
the ecmo driver

340
00:15:35,920 --> 00:15:39,120
note the source code is manually

341
00:15:39,120 --> 00:15:42,720
written and we just need to merge the

342
00:15:42,720 --> 00:15:45,120
the different kinds of

343
00:15:45,120 --> 00:15:48,480
trans driver transparent drivers code of

344
00:15:48,480 --> 00:15:51,759
the existing peripherals and this is one

345
00:15:51,759 --> 00:15:53,279
time efforts

346
00:15:53,279 --> 00:15:56,480
then we need to fix up the driver

347
00:15:56,480 --> 00:15:59,040
it requires us to set up the base

348
00:15:59,040 --> 00:16:02,880
address because the ecmo driver will be

349
00:16:02,880 --> 00:16:05,920
will be loaded into

350
00:16:05,920 --> 00:16:09,800
different offset

351
00:16:10,959 --> 00:16:13,839
also we need to change the direct calls

352
00:16:13,839 --> 00:16:16,720
to indirect cost in this case we can

353
00:16:16,720 --> 00:16:19,279
invoke the arbitrary functions in linux

354
00:16:19,279 --> 00:16:21,199
kernel

355
00:16:21,199 --> 00:16:23,040
and you can you can see the detail

356
00:16:23,040 --> 00:16:24,880
process

357
00:16:24,880 --> 00:16:29,040
from the assembly code in this nice

358
00:16:32,000 --> 00:16:35,279
finally we need to load the xml driver

359
00:16:35,279 --> 00:16:38,399
into generated ecmo driver into the

360
00:16:38,399 --> 00:16:42,000
opec memory kernel does not explicitly

361
00:16:42,000 --> 00:16:45,199
know the existence of ecmo driver

362
00:16:45,199 --> 00:16:48,000
and it is also very hard to change the

363
00:16:48,000 --> 00:16:50,959
annotated physical memory pages due to

364
00:16:50,959 --> 00:16:54,000
the very complex memory management

365
00:16:54,000 --> 00:16:55,759
strategy

366
00:16:55,759 --> 00:16:57,120
in this case

367
00:16:57,120 --> 00:16:59,759
the ecmo driver can be overwritten

368
00:16:59,759 --> 00:17:02,240
and the functionality cannot be

369
00:17:02,240 --> 00:17:04,799
guaranteed

370
00:17:04,799 --> 00:17:07,760
to implement the opaque memory we hijack

371
00:17:07,760 --> 00:17:10,240
the page table work modules

372
00:17:10,240 --> 00:17:12,720
we check on whether the virtual address

373
00:17:12,720 --> 00:17:14,880
is in the open memory

374
00:17:14,880 --> 00:17:17,839
if so we will use the hijacked page

375
00:17:17,839 --> 00:17:20,959
tables to translate the virtual address

376
00:17:20,959 --> 00:17:22,959
into physical address

377
00:17:22,959 --> 00:17:24,079
if not

378
00:17:24,079 --> 00:17:26,959
we will use original we will use the

379
00:17:26,959 --> 00:17:28,559
default

380
00:17:28,559 --> 00:17:31,879
page tables

381
00:17:32,480 --> 00:17:35,600
to evaluate the effectiveness of ecomo

382
00:17:35,600 --> 00:17:38,320
we aim to answer four different research

383
00:17:38,320 --> 00:17:39,919
questions

384
00:17:39,919 --> 00:17:40,880
first

385
00:17:40,880 --> 00:17:43,039
we want to know whether ecmo can

386
00:17:43,039 --> 00:17:46,160
identify the echo pointers as ecommerce

387
00:17:46,160 --> 00:17:48,799
pointers are rather important

388
00:17:48,799 --> 00:17:52,320
second we want to know whether ecmo is

389
00:17:52,320 --> 00:17:56,000
able to re-host a new the newness kernel

390
00:17:56,000 --> 00:17:58,240
in different versions and different

391
00:17:58,240 --> 00:18:01,039
device models

392
00:18:01,039 --> 00:18:04,000
this can show the scannability of

393
00:18:04,000 --> 00:18:05,440
ecommerce

394
00:18:05,440 --> 00:18:06,880
third

395
00:18:06,880 --> 00:18:09,440
we want to know whether the rehosted

396
00:18:09,440 --> 00:18:11,280
newness kernel

397
00:18:11,280 --> 00:18:14,880
is stable and reliable

398
00:18:14,880 --> 00:18:18,400
finally we want to know whether ecmo can

399
00:18:18,400 --> 00:18:20,559
support more peripherals

400
00:18:20,559 --> 00:18:23,760
and whether we can build different

401
00:18:23,760 --> 00:18:26,320
applications based on that we hosted the

402
00:18:26,320 --> 00:18:29,720
unix kernel

403
00:18:30,799 --> 00:18:33,919
our evaluation focuses on two groups of

404
00:18:33,919 --> 00:18:37,039
firmware images one is the third third

405
00:18:37,039 --> 00:18:38,640
party projects

406
00:18:38,640 --> 00:18:40,840
it consists of

407
00:18:40,840 --> 00:18:43,520
720 unix kernels

408
00:18:43,520 --> 00:18:46,880
in open wrt formula images

409
00:18:46,880 --> 00:18:49,360
the other is for the vendors

410
00:18:49,360 --> 00:18:53,200
which consists of 95 device

411
00:18:53,200 --> 00:18:55,360
95 unix kernels

412
00:18:55,360 --> 00:18:58,000
in that scale from your images and

413
00:18:58,000 --> 00:19:01,520
netgear is one of the very popular

414
00:19:01,520 --> 00:19:03,039
vendor

415
00:19:03,039 --> 00:19:05,039
vendors

416
00:19:05,039 --> 00:19:07,360
we aim to transplant three different

417
00:19:07,360 --> 00:19:09,440
early boot peripherals

418
00:19:09,440 --> 00:19:11,679
under the ic

419
00:19:11,679 --> 00:19:14,799
timer and uat you can also see the

420
00:19:14,799 --> 00:19:17,440
detailed series with detailed types of

421
00:19:17,440 --> 00:19:20,080
this pair of the transplanted

422
00:19:20,080 --> 00:19:23,080
peripherals

423
00:19:24,160 --> 00:19:27,200
in total we need to identify 24

424
00:19:27,200 --> 00:19:29,280
different ecommerce pointers

425
00:19:29,280 --> 00:19:33,120
for all the 20 unix kernel versions

426
00:19:33,120 --> 00:19:35,360
the decompress the newness kernel

427
00:19:35,360 --> 00:19:38,640
contains about 30 000

428
00:19:38,640 --> 00:19:40,480
functions in average

429
00:19:40,480 --> 00:19:43,520
and we can identify all of the ecmo

430
00:19:43,520 --> 00:19:45,520
pointers accurately

431
00:19:45,520 --> 00:19:47,600
in the table

432
00:19:47,600 --> 00:19:49,840
in the table shown in the slides

433
00:19:49,840 --> 00:19:53,840
you can see the specific strategy we use

434
00:19:53,840 --> 00:19:56,720
to locate these to look at these ecmo

435
00:19:56,720 --> 00:19:57,840
pointers

436
00:19:57,840 --> 00:19:58,960
and

437
00:19:58,960 --> 00:20:03,320
the different kernel versions

438
00:20:06,880 --> 00:20:09,400
with ecomo weekend we host

439
00:20:09,400 --> 00:20:12,559
710 news corners in total

440
00:20:12,559 --> 00:20:14,440
while still while

441
00:20:14,440 --> 00:20:17,840
624 of them are for open wrt

442
00:20:17,840 --> 00:20:21,919
and the nail the 86 are from that skill

443
00:20:21,919 --> 00:20:25,120
the open wrtn units kernels consist of

444
00:20:25,120 --> 00:20:28,480
19 units kernel versions and 32 device

445
00:20:28,480 --> 00:20:31,280
models while all the depth gear news

446
00:20:31,280 --> 00:20:33,440
kernels is in

447
00:20:33,440 --> 00:20:36,400
initial kernel version

448
00:20:36,400 --> 00:20:38,960
is in the same music control version and

449
00:20:38,960 --> 00:20:42,960
it consists of five device models

450
00:20:42,960 --> 00:20:44,880
according to the figure shown in the

451
00:20:44,880 --> 00:20:46,000
slide

452
00:20:46,000 --> 00:20:48,320
you can see the top five supported

453
00:20:48,320 --> 00:20:52,080
vendors of the open of the open wr team

454
00:20:52,080 --> 00:20:54,720
units kernels and the table shows the

455
00:20:54,720 --> 00:20:58,159
detailed statistics for the netgail unit

456
00:20:58,159 --> 00:21:00,559
scanners

457
00:21:00,559 --> 00:21:03,520
for the for the failed ones

458
00:21:03,520 --> 00:21:06,320
the the first the the main reason that

459
00:21:06,320 --> 00:21:08,480
the glutathione system the democrat

460
00:21:08,480 --> 00:21:12,240
system cannot be recognized

461
00:21:12,240 --> 00:21:15,280
we also use the cisco tester suit in the

462
00:21:15,280 --> 00:21:17,840
news test project to test the

463
00:21:17,840 --> 00:21:20,799
reliability and the stability of the

464
00:21:20,799 --> 00:21:23,200
rehosted news kernel

465
00:21:23,200 --> 00:21:27,840
we noticed that only 66 banks are filled

466
00:21:27,840 --> 00:21:32,480
for more than thousand the test cases

467
00:21:32,480 --> 00:21:35,039
the failed ones mainly because of the

468
00:21:35,039 --> 00:21:37,919
bug testing or the non-implemented

469
00:21:37,919 --> 00:21:40,720
functions according to our

470
00:21:40,720 --> 00:21:42,159
observations

471
00:21:42,159 --> 00:21:45,520
and the 15 and 15 testicles is filled

472
00:21:45,520 --> 00:21:47,840
due to the neck of support for network

473
00:21:47,840 --> 00:21:48,880
driver

474
00:21:48,880 --> 00:21:50,159
for network

475
00:21:50,159 --> 00:21:53,520
and after we installing the nik driver

476
00:21:53,520 --> 00:21:56,080
we are with the kernel modules on the

477
00:21:56,080 --> 00:21:58,159
rehosted units this corner

478
00:21:58,159 --> 00:22:01,679
the 15 ones can pass

479
00:22:04,000 --> 00:22:07,280
to support the other peripherals it is

480
00:22:07,280 --> 00:22:08,880
rather easy

481
00:22:08,880 --> 00:22:11,520
we can install the drivers with kernel

482
00:22:11,520 --> 00:22:15,360
modules after the kernel is re-hosted

483
00:22:15,360 --> 00:22:16,559
for example

484
00:22:16,559 --> 00:22:19,760
we we will demonstrate the capability of

485
00:22:19,760 --> 00:22:22,320
supporting the other peripherals by

486
00:22:22,320 --> 00:22:26,640
installing the leak driver smg 916

487
00:22:26,640 --> 00:22:30,799
we compile the naval smc 9116 in

488
00:22:30,799 --> 00:22:34,320
narwhal x into a kernel module and pack

489
00:22:34,320 --> 00:22:37,440
it into a ram file system then we feed

490
00:22:37,440 --> 00:22:40,080
the ram file system to the then we see

491
00:22:40,080 --> 00:22:42,400
the ram file system to the

492
00:22:42,400 --> 00:22:43,280
uh

493
00:22:43,280 --> 00:22:47,200
today we hosted the newness kernel

494
00:22:47,440 --> 00:22:49,679
and we successfully

495
00:22:49,679 --> 00:22:51,120
and and

496
00:22:51,120 --> 00:22:52,559
under the

497
00:22:52,559 --> 00:22:54,640
network functionality

498
00:22:54,640 --> 00:22:57,280
can be guaranteed after installing the

499
00:22:57,280 --> 00:22:59,918
next driver

500
00:23:02,240 --> 00:23:04,640
also we also we also demonstrated the

501
00:23:04,640 --> 00:23:07,200
capability of ecomo on analyzing the

502
00:23:07,200 --> 00:23:10,559
crashes six cbes can be triggered and

503
00:23:10,559 --> 00:23:12,559
anonymized and we hosted the newness

504
00:23:12,559 --> 00:23:14,159
kernel

505
00:23:14,159 --> 00:23:17,200
meanwhile we can monitor how the rootkit

506
00:23:17,200 --> 00:23:20,320
hides specific process by hijacking the

507
00:23:20,320 --> 00:23:23,840
kernel function work with drr

508
00:23:23,840 --> 00:23:26,720
finally we also put one of the kernel

509
00:23:26,720 --> 00:23:27,600
five

510
00:23:27,600 --> 00:23:31,280
father named unicorn fast into ecomo to

511
00:23:31,280 --> 00:23:33,919
demonstrate that we hosted the newness

512
00:23:33,919 --> 00:23:35,679
kernel can be fast

513
00:23:35,679 --> 00:23:38,400
as you can see the filing speed can

514
00:23:38,400 --> 00:23:39,520
reach to

515
00:23:39,520 --> 00:23:43,200
about 400 per second

516
00:23:43,600 --> 00:23:45,760
to conclude our work

517
00:23:45,760 --> 00:23:48,480
we proposed a novel technique named

518
00:23:48,480 --> 00:23:50,960
peripheral transplantation

519
00:23:50,960 --> 00:23:53,760
we implemented this technique and build

520
00:23:53,760 --> 00:23:57,039
a new system named ecmo

521
00:23:57,039 --> 00:24:00,760
and we also evaluated ecomo on

522
00:24:00,760 --> 00:24:03,679
815 newness canals

523
00:24:03,679 --> 00:24:05,520
87

524
00:24:05,520 --> 00:24:07,760
percent of them can be rehosted

525
00:24:07,760 --> 00:24:09,520
successfully

526
00:24:09,520 --> 00:24:12,720
meanwhile we will also open source ecmo

527
00:24:12,720 --> 00:24:15,440
and provide an online service service

528
00:24:15,440 --> 00:24:18,640
for their community

529
00:24:18,640 --> 00:24:21,520
okay that's all for my presentation

530
00:24:21,520 --> 00:24:23,279
thank you for listening

531
00:24:23,279 --> 00:24:27,920
now i'd be glad to answer your questions

532
00:24:27,920 --> 00:24:37,529
[Music]

533
00:24:38,080 --> 00:24:40,158
you

