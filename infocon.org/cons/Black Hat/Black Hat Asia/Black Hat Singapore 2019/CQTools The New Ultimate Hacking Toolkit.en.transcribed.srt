1
00:00:00,060 --> 00:00:07,290
good afternoon everyone hi hi how's

2
00:00:03,060 --> 00:00:09,500
everybody doing good that's perfect

3
00:00:07,290 --> 00:00:13,259
I like this kind of responses very good

4
00:00:09,500 --> 00:00:15,260
okay good so no time to loose let's get

5
00:00:13,259 --> 00:00:18,480
started welcome with my presentation

6
00:00:15,260 --> 00:00:20,600
this is C key tools that new ultimate

7
00:00:18,480 --> 00:00:24,210
hacking toolkit just a few words about

8
00:00:20,600 --> 00:00:25,439
the team myself and the presentation so

9
00:00:24,210 --> 00:00:27,960
that we got it all clear

10
00:00:25,439 --> 00:00:30,300
and the timing because we've got a

11
00:00:27,960 --> 00:00:33,270
one-hour slot but it's a 25 minute

12
00:00:30,300 --> 00:00:35,940
presentation so I'm gonna do it us in

13
00:00:33,270 --> 00:00:38,760
the schedule but we're gonna make it

14
00:00:35,940 --> 00:00:41,579
actually additionally for the next 35

15
00:00:38,760 --> 00:00:43,579
minutes if you want to stay you're most

16
00:00:41,579 --> 00:00:46,500
welcome because we've got over 200 tools

17
00:00:43,579 --> 00:00:48,989
so we've been in 25 minutes it's kind of

18
00:00:46,500 --> 00:00:51,390
hard even though I'll do my best but

19
00:00:48,989 --> 00:00:53,849
eventually for the first part we're

20
00:00:51,390 --> 00:00:58,079
gonna do some interesting ones

21
00:00:53,850 --> 00:01:00,390
so a few words as you see Paulo Jay I am

22
00:00:58,079 --> 00:01:03,090
the CEO of secure company that is right

23
00:01:00,390 --> 00:01:05,369
now a little bit over 10 years old we

24
00:01:03,090 --> 00:01:07,439
are doing different types of custom

25
00:01:05,369 --> 00:01:10,619
penetration tests for our customer cyber

26
00:01:07,439 --> 00:01:14,820
security strategies and also educational

27
00:01:10,619 --> 00:01:16,619
services and eventually my team has

28
00:01:14,820 --> 00:01:19,320
grown a little bit right now it's 40

29
00:01:16,619 --> 00:01:22,200
people we do have our R&D department and

30
00:01:19,320 --> 00:01:23,939
we are spreaded across four locations in

31
00:01:22,200 --> 00:01:28,200
the world which is New York device

32
00:01:23,939 --> 00:01:31,048
Switzerland and Poland so this is us and

33
00:01:28,200 --> 00:01:34,070
eventually our toolkit it's something

34
00:01:31,049 --> 00:01:36,810
that I'm super happy to present because

35
00:01:34,070 --> 00:01:39,240
eventually this is a toolkit that we

36
00:01:36,810 --> 00:01:41,220
just use in practice so every single

37
00:01:39,240 --> 00:01:42,899
time we've got a project and we need

38
00:01:41,220 --> 00:01:44,939
something and there's no tool for that

39
00:01:42,899 --> 00:01:47,909
and it's for example a forensics project

40
00:01:44,939 --> 00:01:50,970
or something to be researched about then

41
00:01:47,909 --> 00:01:53,579
we simply speaking start writing our

42
00:01:50,970 --> 00:01:56,280
tools and that is pretty much the whole

43
00:01:53,579 --> 00:01:57,869
the whole background out there so this

44
00:01:56,280 --> 00:01:59,899
is this is the whole concept now

45
00:01:57,869 --> 00:02:03,750
whenever we are thinking of course about

46
00:01:59,899 --> 00:02:06,149
the tools and everything sharing and

47
00:02:03,750 --> 00:02:08,160
blog posts and the white papers about it

48
00:02:06,149 --> 00:02:11,009
you're gonna find that on our secure

49
00:02:08,160 --> 00:02:12,890
academy.com slash blog just five minutes

50
00:02:11,008 --> 00:02:15,079
before my presentation is

51
00:02:12,890 --> 00:02:17,510
/ this is kind of how we always do it

52
00:02:15,080 --> 00:02:18,830
with my team so right now even if you

53
00:02:17,510 --> 00:02:20,810
enter the block you will not find the

54
00:02:18,830 --> 00:02:23,420
tools but just five minutes before you

55
00:02:20,810 --> 00:02:25,040
will be able to find us so technically I

56
00:02:23,420 --> 00:02:27,230
also tend to speak at the various

57
00:02:25,040 --> 00:02:30,590
conferences black hat is definitely one

58
00:02:27,230 --> 00:02:33,140
of those I also do you are pretty much

59
00:02:30,590 --> 00:02:35,300
the presentation about the era say

60
00:02:33,140 --> 00:02:37,429
Microsoft ignite and there is only one

61
00:02:35,300 --> 00:02:40,940
reason for that because our team loves

62
00:02:37,430 --> 00:02:42,440
to share so whatever we do we share and

63
00:02:40,940 --> 00:02:44,200
this is technically one of the

64
00:02:42,440 --> 00:02:48,200
opportunities so hopefully you guys

65
00:02:44,200 --> 00:02:50,000
going to like it so more information of

66
00:02:48,200 --> 00:02:54,230
course about us you'll be able to find

67
00:02:50,000 --> 00:02:56,390
in any other information about the blog

68
00:02:54,230 --> 00:02:59,840
but let's get into the content this is

69
00:02:56,390 --> 00:03:02,089
the presentation about the toolkit so no

70
00:02:59,840 --> 00:03:02,420
time to lose as we mentioned so let's do

71
00:03:02,090 --> 00:03:05,510
it

72
00:03:02,420 --> 00:03:06,768
so for at the very beginning it's gonna

73
00:03:05,510 --> 00:03:08,480
be in general the flow that we're gonna

74
00:03:06,769 --> 00:03:09,860
did like one by one of course I will

75
00:03:08,480 --> 00:03:12,410
give you explanation or what this tool

76
00:03:09,860 --> 00:03:14,870
does we're gonna start with like small

77
00:03:12,410 --> 00:03:16,700
chunks of tools so this tool allows you

78
00:03:14,870 --> 00:03:18,320
to extract this this one allows you to

79
00:03:16,700 --> 00:03:21,980
extract that and then we're gonna get

80
00:03:18,320 --> 00:03:24,590
into the scenario of the data decryption

81
00:03:21,980 --> 00:03:27,290
by leveraging data protection API this

82
00:03:24,590 --> 00:03:29,570
is kind of our a two years research so

83
00:03:27,290 --> 00:03:32,000
eventually you will see how it is

84
00:03:29,570 --> 00:03:36,230
possible to violate completely a privacy

85
00:03:32,000 --> 00:03:38,420
on the whole domain level and our team

86
00:03:36,230 --> 00:03:41,179
reverse engineers data protection API to

87
00:03:38,420 --> 00:03:43,640
the bone so anything that moves and it's

88
00:03:41,180 --> 00:03:46,519
encrypted will be able to decrypt so

89
00:03:43,640 --> 00:03:48,440
this is pretty much the flavor here okay

90
00:03:46,519 --> 00:03:50,570
guys so let me just switch it off and

91
00:03:48,440 --> 00:03:52,790
let's start with that first type of tool

92
00:03:50,570 --> 00:03:54,980
which is technically a very

93
00:03:52,790 --> 00:03:57,380
straightforward tool which is related

94
00:03:54,980 --> 00:03:59,390
with extracting hashes from the

95
00:03:57,380 --> 00:04:01,340
operating system and that's this one

96
00:03:59,390 --> 00:04:04,279
over here this is a CQ hashed on version

97
00:04:01,340 --> 00:04:06,980
- and on the live system the only way

98
00:04:04,280 --> 00:04:08,480
how you need to run it is just some dump

99
00:04:06,980 --> 00:04:11,450
and that's it

100
00:04:08,480 --> 00:04:13,190
so very simple nothing's nothing

101
00:04:11,450 --> 00:04:15,410
property in particular over here of

102
00:04:13,190 --> 00:04:18,850
course we are getting access to the some

103
00:04:15,410 --> 00:04:20,988
database by leveraging all this

104
00:04:18,850 --> 00:04:23,700
decryption mechanisms that are on the

105
00:04:20,988 --> 00:04:26,159
phone in the operating system but

106
00:04:23,700 --> 00:04:28,560
ending up with the harshest to be to be

107
00:04:26,160 --> 00:04:30,360
extracted this particular tool works

108
00:04:28,560 --> 00:04:32,820
very nicely because not everybody wants

109
00:04:30,360 --> 00:04:35,340
to run it on the server in life so

110
00:04:32,820 --> 00:04:38,700
eventually you can run it by leveraging

111
00:04:35,340 --> 00:04:41,250
its offline switches so we run it in the

112
00:04:38,700 --> 00:04:44,070
same way but just to show you in general

113
00:04:41,250 --> 00:04:47,520
we need to specify here some and some

114
00:04:44,070 --> 00:04:49,349
database sis and system hive if you got

115
00:04:47,520 --> 00:04:51,330
a copy of the registry and this is

116
00:04:49,350 --> 00:04:53,460
something that also allows you let me

117
00:04:51,330 --> 00:04:57,050
just do it for the moment

118
00:04:53,460 --> 00:04:59,640
some I'm just gonna use that in this way

119
00:04:57,050 --> 00:05:02,010
here we go and then we've got some and

120
00:04:59,640 --> 00:05:03,810
are we gonna do are some dump let me

121
00:05:02,010 --> 00:05:05,640
just verify if God is yeah we got it

122
00:05:03,810 --> 00:05:07,920
correctly now as you see it's case

123
00:05:05,640 --> 00:05:09,690
sensitive yes so we've got a different

124
00:05:07,920 --> 00:05:11,250
output so we've got administrator and

125
00:05:09,690 --> 00:05:13,800
guess just to show you basically that

126
00:05:11,250 --> 00:05:16,740
this is working on the offline data so

127
00:05:13,800 --> 00:05:19,170
just a quick quick intro now of course

128
00:05:16,740 --> 00:05:21,750
in order to be able to extract hashes

129
00:05:19,170 --> 00:05:25,560
from the live operating system you have

130
00:05:21,750 --> 00:05:27,780
to be a privileged to do that and for

131
00:05:25,560 --> 00:05:30,450
that particular purpose you need to be a

132
00:05:27,780 --> 00:05:32,400
local system because some database has

133
00:05:30,450 --> 00:05:34,200
by default permissions set up to be

134
00:05:32,400 --> 00:05:36,330
accessed by the local system so the

135
00:05:34,200 --> 00:05:39,000
question of the universe would be okay

136
00:05:36,330 --> 00:05:43,250
that's fine but how eventually we are

137
00:05:39,000 --> 00:05:46,640
able to get access to this particular

138
00:05:43,250 --> 00:05:49,980
local system privileges if of course

139
00:05:46,640 --> 00:05:52,050
well I'm in a position of the

140
00:05:49,980 --> 00:05:55,080
administrator in such case you could use

141
00:05:52,050 --> 00:05:56,490
PS exact for that and this privilege

142
00:05:55,080 --> 00:05:59,099
that you are actually leveraging over

143
00:05:56,490 --> 00:06:00,660
here this is an impersonal client after

144
00:05:59,100 --> 00:06:03,210
authentication provident

145
00:06:00,660 --> 00:06:06,090
or you can use our tool which is pretty

146
00:06:03,210 --> 00:06:07,830
nice and if you want to impersonate into

147
00:06:06,090 --> 00:06:10,590
the privilege account we've got over

148
00:06:07,830 --> 00:06:12,780
here CQ impersonate secure administrator

149
00:06:10,590 --> 00:06:15,179
CMD dot exe and if you're going around

150
00:06:12,780 --> 00:06:17,549
that particular command what it does it

151
00:06:15,180 --> 00:06:19,620
opens a command where you are actually a

152
00:06:17,550 --> 00:06:22,470
particular user we're leveraging over

153
00:06:19,620 --> 00:06:24,840
here the impersonate a client after

154
00:06:22,470 --> 00:06:26,940
indication case so technically speaking

155
00:06:24,840 --> 00:06:29,280
if you've got already a user that

156
00:06:26,940 --> 00:06:31,620
established a session in the particular

157
00:06:29,280 --> 00:06:33,750
operating system without knowing that

158
00:06:31,620 --> 00:06:35,900
user's password you are able to take

159
00:06:33,750 --> 00:06:37,790
over that user's session we

160
00:06:35,900 --> 00:06:40,549
another tool that is allowing you to

161
00:06:37,790 --> 00:06:42,230
create a token of the user that never

162
00:06:40,550 --> 00:06:45,140
logged on to that system though

163
00:06:42,230 --> 00:06:47,120
eventually this token is good more from

164
00:06:45,140 --> 00:06:51,590
the forensics perspective versus of

165
00:06:47,120 --> 00:06:54,140
doing actual hacking activity so a bit

166
00:06:51,590 --> 00:06:56,750
of an introduction so whenever we are

167
00:06:54,140 --> 00:06:59,510
thinking of course about making a little

168
00:06:56,750 --> 00:07:01,790
bit further step over here question

169
00:06:59,510 --> 00:07:05,000
would be are we able to extract for

170
00:07:01,790 --> 00:07:07,820
example within the operating system some

171
00:07:05,000 --> 00:07:09,500
data from the entities that did entities

172
00:07:07,820 --> 00:07:12,590
that it of course is a file that

173
00:07:09,500 --> 00:07:14,990
contains hashes of the users on the

174
00:07:12,590 --> 00:07:16,520
domain controller so the structure of

175
00:07:14,990 --> 00:07:18,320
the database is a little bit different

176
00:07:16,520 --> 00:07:20,780
and we also do Active Directory

177
00:07:18,320 --> 00:07:22,730
forensics and eventually for that

178
00:07:20,780 --> 00:07:24,919
purpose we wrote a bunch of tools for

179
00:07:22,730 --> 00:07:28,340
that by one of our most popular tools

180
00:07:24,920 --> 00:07:30,680
it's called CQ NT dsdt Decrypter and

181
00:07:28,340 --> 00:07:33,500
this is a tool that allows you on the

182
00:07:30,680 --> 00:07:36,080
fly this is this is just an offline

183
00:07:33,500 --> 00:07:38,450
extraction extract hashes of course from

184
00:07:36,080 --> 00:07:40,700
ant ideas or did so let's have a look

185
00:07:38,450 --> 00:07:42,710
what we can do so if we do have a look

186
00:07:40,700 --> 00:07:45,469
at the option that particular key

187
00:07:42,710 --> 00:07:47,560
actually the particular tool leverage is

188
00:07:45,470 --> 00:07:49,880
something that is called a boot key and

189
00:07:47,560 --> 00:07:51,980
here I think we need to stop a little

190
00:07:49,880 --> 00:07:54,230
bit because we need to pass a little bit

191
00:07:51,980 --> 00:07:56,630
of a theory here what's the boot key and

192
00:07:54,230 --> 00:07:59,540
boot key it's a key that you're going to

193
00:07:56,630 --> 00:08:01,550
find in the system registry hive that is

194
00:07:59,540 --> 00:08:04,460
in a days of protection API field

195
00:08:01,550 --> 00:08:06,980
decrypting system secret so if you want

196
00:08:04,460 --> 00:08:09,830
to steal someone's hashes either it's a

197
00:08:06,980 --> 00:08:12,380
some database or NTDs or did you have to

198
00:08:09,830 --> 00:08:14,659
have a boot key available that's why in

199
00:08:12,380 --> 00:08:17,120
a previous tool I was using - says

200
00:08:14,660 --> 00:08:19,700
system so that you were able to see that

201
00:08:17,120 --> 00:08:21,710
we are actually reading the boot key

202
00:08:19,700 --> 00:08:23,469
from there so we're gonna do it here as

203
00:08:21,710 --> 00:08:27,099
well but from a little bit different

204
00:08:23,470 --> 00:08:29,660
perspective so I do have a live system

205
00:08:27,100 --> 00:08:31,310
where I'm gonna be technically this is a

206
00:08:29,660 --> 00:08:34,430
domain controller when I'm gonna be

207
00:08:31,310 --> 00:08:36,799
extracting the hashes from so a question

208
00:08:34,429 --> 00:08:39,469
would be at that certain point how are

209
00:08:36,799 --> 00:08:42,319
we able to get that particular boot key

210
00:08:39,470 --> 00:08:44,570
and answer to that is very simple this

211
00:08:42,320 --> 00:08:46,760
is the live domain controller eventually

212
00:08:44,570 --> 00:08:48,900
I'm gonna be using another tool which is

213
00:08:46,760 --> 00:08:50,160
called CQ secrets dumper

214
00:08:48,900 --> 00:08:51,900
we're going to be coming back to the

215
00:08:50,160 --> 00:08:54,060
stool because it's a very nice tool it

216
00:08:51,900 --> 00:08:56,550
has a lot of functionalities including

217
00:08:54,060 --> 00:08:58,410
extracting passwords in a clear text

218
00:08:56,550 --> 00:09:02,189
from the service accounts so we're going

219
00:08:58,410 --> 00:09:05,069
to just specify over here boot key like

220
00:09:02,190 --> 00:09:06,780
this boot key here we go and then we've

221
00:09:05,070 --> 00:09:09,030
got a value yeah so this is this

222
00:09:06,780 --> 00:09:12,180
particular thing that I will need to

223
00:09:09,030 --> 00:09:14,730
copy in order to move forward with the

224
00:09:12,180 --> 00:09:17,219
further steps of a hashes extraction

225
00:09:14,730 --> 00:09:19,320
from NTDs don't it of course you need to

226
00:09:17,220 --> 00:09:21,270
make a copy of entities that did the

227
00:09:19,320 --> 00:09:23,280
easiest way most probably to do it is by

228
00:09:21,270 --> 00:09:26,400
using the building windows tool which is

229
00:09:23,280 --> 00:09:28,350
called VSS admin create shadow for C

230
00:09:26,400 --> 00:09:32,010
Drive Bank and you've got a copy of that

231
00:09:28,350 --> 00:09:34,410
ant IDs don't it okay guys let's keep it

232
00:09:32,010 --> 00:09:39,060
rolling so we're gonna do it like this

233
00:09:34,410 --> 00:09:41,400
CQ anti-dsdna krypter and over here

234
00:09:39,060 --> 00:09:43,619
we're gonna specify our boot key so

235
00:09:41,400 --> 00:09:46,260
let's just paste it here we go and then

236
00:09:43,620 --> 00:09:47,790
we're gonna specify the file and that's

237
00:09:46,260 --> 00:09:52,439
gonna be nice because here we're gonna

238
00:09:47,790 --> 00:09:55,589
move forward into D Drive tools NTDs and

239
00:09:52,440 --> 00:09:57,870
NTDs dodged it and one of the parameters

240
00:09:55,590 --> 00:10:01,500
that we will need to use as well it's

241
00:09:57,870 --> 00:10:05,640
out file and within the out file we will

242
00:10:01,500 --> 00:10:07,080
specify hashes dot txt for example and a

243
00:10:05,640 --> 00:10:10,290
couple of other things we could specify

244
00:10:07,080 --> 00:10:11,790
over here like the pfx KD s root key and

245
00:10:10,290 --> 00:10:13,589
so on but this is something again that

246
00:10:11,790 --> 00:10:14,760
I'm gonna be explaining later because

247
00:10:13,590 --> 00:10:16,620
right now it's gonna be a little bit too

248
00:10:14,760 --> 00:10:19,430
much about one thing this is also a

249
00:10:16,620 --> 00:10:22,200
multifunctional tool about security and

250
00:10:19,430 --> 00:10:24,750
identity in general protection in Active

251
00:10:22,200 --> 00:10:28,080
Directory so let's do that so right now

252
00:10:24,750 --> 00:10:32,370
we are extracting our hashes let's have

253
00:10:28,080 --> 00:10:34,770
a look Asha's dot txt and let's see what

254
00:10:32,370 --> 00:10:38,010
we cut a half over here and this is the

255
00:10:34,770 --> 00:10:40,170
file it is fully importable in any type

256
00:10:38,010 --> 00:10:42,420
of a cracking tools that you're gonna

257
00:10:40,170 --> 00:10:44,790
guys find even for free not for free or

258
00:10:42,420 --> 00:10:47,310
whatever it's a very very nice format

259
00:10:44,790 --> 00:10:49,199
here you can even import it in Excel and

260
00:10:47,310 --> 00:10:51,390
find in your domain different types of

261
00:10:49,200 --> 00:10:53,610
hashes duplicates to see if there is

262
00:10:51,390 --> 00:10:55,680
someone actually reusing the password so

263
00:10:53,610 --> 00:10:58,770
what we got over here let's find

264
00:10:55,680 --> 00:11:00,899
something nice over here so just kind of

265
00:10:58,770 --> 00:11:04,709
like learnt knowing this by heart but

266
00:11:00,899 --> 00:11:08,069
nineteen it's a hush or MD for hush as

267
00:11:04,709 --> 00:11:11,489
we should say all very popular password

268
00:11:08,069 --> 00:11:13,349
which is a peek at ESS w0 early and we

269
00:11:11,490 --> 00:11:15,449
are able to see that Freddy

270
00:11:13,350 --> 00:11:18,480
in this particular case user has this

271
00:11:15,449 --> 00:11:21,029
particular MD for of a password which we

272
00:11:18,480 --> 00:11:23,850
could technically either crack or guess

273
00:11:21,029 --> 00:11:25,529
maybe not that will be quite hard but if

274
00:11:23,850 --> 00:11:28,170
you're familiar with this popular

275
00:11:25,529 --> 00:11:30,509
password hashes then maybe guess - so

276
00:11:28,170 --> 00:11:32,670
this is a little bit of an intro for

277
00:11:30,509 --> 00:11:35,399
what we can do with our tools and so you

278
00:11:32,670 --> 00:11:38,339
can see that we are able to extract some

279
00:11:35,399 --> 00:11:40,619
type of information that we've got in

280
00:11:38,339 --> 00:11:43,139
the either hashes or some database or

281
00:11:40,619 --> 00:11:45,269
entities so did now question is what

282
00:11:43,139 --> 00:11:47,399
else so I was mentioning that we cannot

283
00:11:45,269 --> 00:11:49,019
be back to the CQ secrets dumper

284
00:11:47,399 --> 00:11:51,809
this is by the way historically our

285
00:11:49,019 --> 00:11:54,839
first tool that was written by our team

286
00:11:51,809 --> 00:11:56,519
in 2008 and we totally loved it

287
00:11:54,839 --> 00:11:58,679
this tool has been going through

288
00:11:56,519 --> 00:12:01,230
different types of transformations but

289
00:11:58,679 --> 00:12:03,990
eventually the major functionality of

290
00:12:01,230 --> 00:12:07,410
this tool it's related with decrypting

291
00:12:03,990 --> 00:12:09,839
local system secrets and by local system

292
00:12:07,410 --> 00:12:12,529
secrets we mean for example our service

293
00:12:09,839 --> 00:12:14,339
accounts so let's have a look at this

294
00:12:12,529 --> 00:12:17,550
demonstration where we're gonna be

295
00:12:14,339 --> 00:12:20,639
technically the crib think the service

296
00:12:17,550 --> 00:12:24,300
accounts passwords and you will see how

297
00:12:20,639 --> 00:12:26,129
totally simple that that operation is so

298
00:12:24,300 --> 00:12:29,490
in general when we are thinking of

299
00:12:26,129 --> 00:12:32,699
course about the the case where we've

300
00:12:29,490 --> 00:12:34,800
got services and particular password

301
00:12:32,699 --> 00:12:36,628
what we are referring to is the

302
00:12:34,800 --> 00:12:40,160
following situation so let me of course

303
00:12:36,629 --> 00:12:43,620
show you the concept over here yeah so

304
00:12:40,160 --> 00:12:46,410
let me bring this machine we got it so

305
00:12:43,620 --> 00:12:49,470
we've got technically here services and

306
00:12:46,410 --> 00:12:51,449
I got a pool of service pull a service

307
00:12:49,470 --> 00:12:53,579
that could be the one that we could work

308
00:12:51,449 --> 00:12:56,339
on and we could specify that we should

309
00:12:53,579 --> 00:12:58,049
run it on the specific account now what

310
00:12:56,339 --> 00:13:00,119
I will type right now it doesn't really

311
00:12:58,049 --> 00:13:03,029
matter what matters is where that data

312
00:13:00,119 --> 00:13:05,549
is stored and the rule is always the

313
00:13:03,029 --> 00:13:07,170
same first is whatever you put in over

314
00:13:05,549 --> 00:13:10,679
here it must be stored somewhere and

315
00:13:07,170 --> 00:13:12,660
there's only one case where password is

316
00:13:10,679 --> 00:13:13,600
stored in a non-reversible form in the

317
00:13:12,660 --> 00:13:15,640
Opera

318
00:13:13,600 --> 00:13:18,520
and that's obviously a harsh and the

319
00:13:15,640 --> 00:13:20,319
other way of doing it is reversible any

320
00:13:18,520 --> 00:13:22,960
operating system we've got over 20

321
00:13:20,320 --> 00:13:24,790
places where you can revert the password

322
00:13:22,960 --> 00:13:27,010
that was stored in some kind of a way

323
00:13:24,790 --> 00:13:29,140
yeah sometimes we don't even need a tool

324
00:13:27,010 --> 00:13:31,210
for that you can use for example app CMD

325
00:13:29,140 --> 00:13:33,339
to extract the clear text password of

326
00:13:31,210 --> 00:13:34,800
the application PO identity because this

327
00:13:33,339 --> 00:13:36,970
is actually something that is told

328
00:13:34,800 --> 00:13:39,010
symmetrically encrypted in the

329
00:13:36,970 --> 00:13:40,650
application host config file so we've

330
00:13:39,010 --> 00:13:43,450
got a secure let's just do

331
00:13:40,650 --> 00:13:44,860
administrator's whatever as I said what

332
00:13:43,450 --> 00:13:47,230
doesn't really matter I'm just going to

333
00:13:44,860 --> 00:13:47,440
type something yeah so let's just do

334
00:13:47,230 --> 00:13:50,560
that

335
00:13:47,440 --> 00:13:53,440
enter perfect the new log of name will

336
00:13:50,560 --> 00:13:56,439
take place whatever so our pool of

337
00:13:53,440 --> 00:13:58,029
service is over here running like this

338
00:13:56,440 --> 00:14:01,089
so what we're going to do so we're going

339
00:13:58,029 --> 00:14:02,620
to get into tools right now and then

340
00:14:01,089 --> 00:14:04,390
we're gonna get into seek your secret

341
00:14:02,620 --> 00:14:06,760
Stamper and then we're going to specify

342
00:14:04,390 --> 00:14:09,339
over here a service and the short name

343
00:14:06,760 --> 00:14:11,980
of that service it's a pj service enter

344
00:14:09,339 --> 00:14:13,510
and as you see this is the password that

345
00:14:11,980 --> 00:14:17,320
I've been typing yes so this particular

346
00:14:13,510 --> 00:14:19,120
password is technically extracted in the

347
00:14:17,320 --> 00:14:21,070
clear text because it's actually stored

348
00:14:19,120 --> 00:14:24,220
in the operating system in a reversible

349
00:14:21,070 --> 00:14:26,440
form yes so during the pen test and what

350
00:14:24,220 --> 00:14:27,910
and where do we use this tool for well

351
00:14:26,440 --> 00:14:31,029
when you manage to get access somewhere

352
00:14:27,910 --> 00:14:33,490
this kind of data could allow you for

353
00:14:31,029 --> 00:14:35,920
the lateral movement so eventually this

354
00:14:33,490 --> 00:14:37,930
applies to sequel services SharePoint

355
00:14:35,920 --> 00:14:39,910
services any specific database service

356
00:14:37,930 --> 00:14:41,439
application services and I can tell you

357
00:14:39,910 --> 00:14:42,850
that for the past 14 years when I'm

358
00:14:41,440 --> 00:14:45,070
doing independence I've never seen the

359
00:14:42,850 --> 00:14:47,230
organization that did not have actually

360
00:14:45,070 --> 00:14:49,990
a service with some kind of an account

361
00:14:47,230 --> 00:14:51,100
configured so very useful Bank sometimes

362
00:14:49,990 --> 00:14:52,660
it might be useful because you just

363
00:14:51,100 --> 00:14:57,640
forgotten a password yeah right on

364
00:14:52,660 --> 00:15:00,610
so why not see I'm ok anyway this is one

365
00:14:57,640 --> 00:15:05,230
of the one of the tools cool interesting

366
00:15:00,610 --> 00:15:08,020
so far yeah great so let's do a little

367
00:15:05,230 --> 00:15:11,260
bit of a hardcore stuff if you don't

368
00:15:08,020 --> 00:15:14,920
mind because before we move forward to

369
00:15:11,260 --> 00:15:17,740
the attack situations just one more

370
00:15:14,920 --> 00:15:19,479
little flavor that we've got when you

371
00:15:17,740 --> 00:15:22,420
are performing for example men in the

372
00:15:19,480 --> 00:15:24,010
middle attacks we found out in our team

373
00:15:22,420 --> 00:15:25,779
we're very convenient yes if we don't

374
00:15:24,010 --> 00:15:27,249
see something we just write it yes and

375
00:15:25,779 --> 00:15:28,990
we keep it for ourselves sometimes we

376
00:15:27,249 --> 00:15:31,540
share it because apparently looks like

377
00:15:28,990 --> 00:15:32,920
someone else also likes it so when you

378
00:15:31,540 --> 00:15:34,810
are performing man-in-the-middle attacks

379
00:15:32,920 --> 00:15:36,939
there are different types of techniques

380
00:15:34,810 --> 00:15:38,589
to start it as a first step yes one of

381
00:15:36,939 --> 00:15:41,079
the first techniques it's the easy one

382
00:15:38,589 --> 00:15:42,999
which is in general the RP poisoning

383
00:15:41,079 --> 00:15:44,709
error piece proofing yes so these are

384
00:15:42,999 --> 00:15:46,990
the techniques that that it's nice to

385
00:15:44,709 --> 00:15:49,689
start so the question is do we have a

386
00:15:46,990 --> 00:15:52,629
tool like that for example running in

387
00:15:49,689 --> 00:15:55,240
Windows an answer is yes we do we wrote

388
00:15:52,629 --> 00:15:56,680
it and eventually this is the probably

389
00:15:55,240 --> 00:16:00,040
the easiest tool that you will use for

390
00:15:56,680 --> 00:16:03,519
in general the spoofing or sniffing

391
00:16:00,040 --> 00:16:05,230
activity in the operating system so this

392
00:16:03,519 --> 00:16:08,319
is in general how this tool works

393
00:16:05,230 --> 00:16:10,779
it's called CQ RP spoof it's a spoofer

394
00:16:08,319 --> 00:16:12,759
for Windows works pretty much on every

395
00:16:10,779 --> 00:16:14,139
version of the operating system you

396
00:16:12,759 --> 00:16:16,749
never know when when you're gonna need

397
00:16:14,139 --> 00:16:18,579
it this is straightforward so you are

398
00:16:16,749 --> 00:16:20,970
specifying the communication between the

399
00:16:18,579 --> 00:16:23,649
client and eventually the Gateway and

400
00:16:20,970 --> 00:16:26,529
justice yes and this is the moment where

401
00:16:23,649 --> 00:16:29,829
we are performing the RP poisoning in

402
00:16:26,529 --> 00:16:32,259
the back and if you do run like for

403
00:16:29,829 --> 00:16:35,469
example underneath things like Wireshark

404
00:16:32,259 --> 00:16:36,879
and so on you are pretty much gathering

405
00:16:35,470 --> 00:16:39,279
everything you can move in the same

406
00:16:36,879 --> 00:16:41,139
subnet yes so we know the functionality

407
00:16:39,279 --> 00:16:43,509
but we just needed a tool that you do so

408
00:16:41,139 --> 00:16:46,180
just like this and it works and you can

409
00:16:43,509 --> 00:16:47,889
do pretty much sniffing and anything

410
00:16:46,180 --> 00:16:49,870
that you can sniff anything that is out

411
00:16:47,889 --> 00:16:51,279
there in a move in the subnet just to

412
00:16:49,870 --> 00:16:53,680
prove it to you because it would be

413
00:16:51,279 --> 00:16:56,889
great to see so what I'm gonna do on my

414
00:16:53,680 --> 00:16:59,229
site because this would be this would be

415
00:16:56,889 --> 00:17:01,449
nice also to to follow if this is

416
00:16:59,230 --> 00:17:03,730
actually working I'm just gonna use the

417
00:17:01,449 --> 00:17:05,438
simplest possible thing which is an FTP

418
00:17:03,730 --> 00:17:07,449
I know it's in a clear text but it

419
00:17:05,439 --> 00:17:10,839
doesn't matter what matters is that we

420
00:17:07,449 --> 00:17:13,419
actually our tool is tuned to that kind

421
00:17:10,839 --> 00:17:16,510
of traffic as well so not only it gives

422
00:17:13,419 --> 00:17:19,089
you that tool to perform the poisoning

423
00:17:16,510 --> 00:17:20,709
but it also grabs anything that is out

424
00:17:19,089 --> 00:17:22,750
there in the network so it has two

425
00:17:20,709 --> 00:17:25,569
functionalities at the same time so I'm

426
00:17:22,750 --> 00:17:28,899
just gonna do FTP open on my site and

427
00:17:25,569 --> 00:17:33,010
the only thing that you will see is of

428
00:17:28,899 --> 00:17:34,299
course that we are putting at that

429
00:17:33,010 --> 00:17:36,190
certain mama I'm just going to type in

430
00:17:34,299 --> 00:17:39,370
the password so you can see the concept

431
00:17:36,190 --> 00:17:41,290
yes so we are pretty much grabbing

432
00:17:39,370 --> 00:17:43,449
kind of communication yes so very

433
00:17:41,290 --> 00:17:45,610
straightforward but eventually very very

434
00:17:43,450 --> 00:17:47,260
handy for example for the SMB relay

435
00:17:45,610 --> 00:17:48,550
attacks which are one of the most

436
00:17:47,260 --> 00:17:51,490
popular attacks in the infrastructure

437
00:17:48,550 --> 00:17:53,790
bring it on so what's coming next

438
00:17:51,490 --> 00:17:55,930
next is actually my totally favorite

439
00:17:53,790 --> 00:17:58,330
because we're going to be playing with

440
00:17:55,930 --> 00:18:00,700
the data protection API and this is one

441
00:17:58,330 --> 00:18:03,159
of the most hardcore subjects in in

442
00:18:00,700 --> 00:18:05,410
general in my opinion in IT when it's

443
00:18:03,160 --> 00:18:08,710
about the cryptography because there's

444
00:18:05,410 --> 00:18:11,200
lots of complexity within the whole idea

445
00:18:08,710 --> 00:18:13,690
but let's try to put it in pieces so

446
00:18:11,200 --> 00:18:15,370
that we at the end leave this room of

447
00:18:13,690 --> 00:18:18,040
knowing what not only data protection

448
00:18:15,370 --> 00:18:19,659
API is but how are we able to violate

449
00:18:18,040 --> 00:18:22,090
different things that are related around

450
00:18:19,660 --> 00:18:23,530
it in general it's a good mechanism so

451
00:18:22,090 --> 00:18:25,870
let's have a look of what we can do

452
00:18:23,530 --> 00:18:29,470
first of all what I would like to show

453
00:18:25,870 --> 00:18:31,780
you is first background for the data

454
00:18:29,470 --> 00:18:34,210
protection API when we're going to be

455
00:18:31,780 --> 00:18:37,750
actually logging on as a regular user

456
00:18:34,210 --> 00:18:40,690
and we will leverage this situation

457
00:18:37,750 --> 00:18:43,750
where a user is actually storing data

458
00:18:40,690 --> 00:18:47,110
like credentials for example in the

459
00:18:43,750 --> 00:18:49,510
browser so for that purpose I'm gonna

460
00:18:47,110 --> 00:18:51,129
use the tool that isn't our tool and the

461
00:18:49,510 --> 00:18:52,660
reason why it's not our tool because it

462
00:18:51,130 --> 00:18:55,660
was already there so it makes no point

463
00:18:52,660 --> 00:18:57,040
to write it that is the chrome pass so I

464
00:18:55,660 --> 00:18:59,679
am logged on over here

465
00:18:57,040 --> 00:19:01,450
just have a look as Freddy so just to

466
00:18:59,679 --> 00:19:03,820
look the user because I this is

467
00:19:01,450 --> 00:19:05,950
important what we gonna do right now I'm

468
00:19:03,820 --> 00:19:08,649
gonna log on as this particular user

469
00:19:05,950 --> 00:19:11,860
with the password password yeah so we've

470
00:19:08,650 --> 00:19:14,890
got a P at SS W 0 D we got it right

471
00:19:11,860 --> 00:19:17,080
perfect so just because user has a

472
00:19:14,890 --> 00:19:19,929
password like this we've got over here

473
00:19:17,080 --> 00:19:22,000
Krampus this is from near soft and we've

474
00:19:19,929 --> 00:19:24,670
got over here that credentials that are

475
00:19:22,000 --> 00:19:26,590
stored for LinkedIn in the Chrome

476
00:19:24,670 --> 00:19:28,090
browser yeah so user just save

477
00:19:26,590 --> 00:19:29,830
credentials in a browser okay

478
00:19:28,090 --> 00:19:32,949
now question of the universe is is it

479
00:19:29,830 --> 00:19:34,600
safe or not and I would like to prove to

480
00:19:32,950 --> 00:19:36,700
you two things that under certain

481
00:19:34,600 --> 00:19:38,980
conditions it is and then the other

482
00:19:36,700 --> 00:19:42,010
conditions it's completely not so let's

483
00:19:38,980 --> 00:19:44,350
have a look at the flavor so this

484
00:19:42,010 --> 00:19:46,809
particular theory that is related with

485
00:19:44,350 --> 00:19:48,760
of course the whole concept of the data

486
00:19:46,809 --> 00:19:52,800
protection API the cryptographic

487
00:19:48,760 --> 00:19:55,920
platform in Windows looks like this

488
00:19:52,800 --> 00:19:57,740
gonna get into users profile so I'm

489
00:19:55,920 --> 00:20:00,510
getting into the updated roaming

490
00:19:57,740 --> 00:20:03,630
Microsoft and are we gonna go to protect

491
00:20:00,510 --> 00:20:06,270
and the set of the user and this big

492
00:20:03,630 --> 00:20:09,720
list of things it's nothing but a list

493
00:20:06,270 --> 00:20:11,220
of master key containers and this is

494
00:20:09,720 --> 00:20:14,370
basically what I was mentioning that our

495
00:20:11,220 --> 00:20:15,450
team we are as far as I know the first

496
00:20:14,370 --> 00:20:16,919
team in the world that fully

497
00:20:15,450 --> 00:20:19,890
reverse-engineered a full data

498
00:20:16,920 --> 00:20:21,960
protection API literally like to

499
00:20:19,890 --> 00:20:23,400
everything that moves so anything that

500
00:20:21,960 --> 00:20:24,900
is encrypted in Windows we are

501
00:20:23,400 --> 00:20:27,480
decrypting and we are providing tools

502
00:20:24,900 --> 00:20:30,780
for that so these master key containers

503
00:20:27,480 --> 00:20:33,690
each of these guys contains two master

504
00:20:30,780 --> 00:20:35,760
keys one master and they're the same one

505
00:20:33,690 --> 00:20:38,940
master key is encrypted with their users

506
00:20:35,760 --> 00:20:42,629
passwords hash okay so it depends on my

507
00:20:38,940 --> 00:20:45,150
password simple second a master key is

508
00:20:42,630 --> 00:20:48,930
encrypted with that and that's the best

509
00:20:45,150 --> 00:20:50,670
public key of the domain so public key

510
00:20:48,930 --> 00:20:53,790
of the domain sounds really weird and

511
00:20:50,670 --> 00:20:56,880
this is this guy over here BK domain

512
00:20:53,790 --> 00:20:59,970
name now the set part of that is that

513
00:20:56,880 --> 00:21:02,100
each of you each of you you all have it

514
00:20:59,970 --> 00:21:04,620
so if you are a member of the domain

515
00:21:02,100 --> 00:21:06,149
within your organization you check out

516
00:21:04,620 --> 00:21:08,610
and within your profile you're gonna

517
00:21:06,150 --> 00:21:10,470
have it now what is this key about this

518
00:21:08,610 --> 00:21:12,419
key it's the public key of the domain

519
00:21:10,470 --> 00:21:15,180
that is responsible for encrypting

520
00:21:12,420 --> 00:21:17,640
everybody's secrets and the problem is

521
00:21:15,180 --> 00:21:19,230
that this key is only one so if you're

522
00:21:17,640 --> 00:21:21,420
working in a company that has hundred

523
00:21:19,230 --> 00:21:23,550
thousand people everybody's secrets are

524
00:21:21,420 --> 00:21:27,590
encrypted with the same public key

525
00:21:23,550 --> 00:21:27,590
what's the question that we should ask

526
00:21:27,680 --> 00:21:34,290
where is the private key total yes okay

527
00:21:31,710 --> 00:21:36,780
so what we wrote it's a tool to extract

528
00:21:34,290 --> 00:21:39,090
the private key that whenever you got it

529
00:21:36,780 --> 00:21:40,649
you totally own the domain like totally

530
00:21:39,090 --> 00:21:42,149
on it let me share with you a little bit

531
00:21:40,650 --> 00:21:43,620
of a story in a moment I don't have

532
00:21:42,150 --> 00:21:45,080
access to the Internet in this machine

533
00:21:43,620 --> 00:21:47,550
that's why you're seeing this message

534
00:21:45,080 --> 00:21:49,830
okay good so let's begin

535
00:21:47,550 --> 00:21:52,860
yeah let's do it so we're gonna move

536
00:21:49,830 --> 00:21:56,310
over here so what we're gonna do right

537
00:21:52,860 --> 00:21:57,659
now is we're gonna run over here C Q so

538
00:21:56,310 --> 00:22:00,990
let's just let me just get into the

539
00:21:57,660 --> 00:22:03,750
folder and we're gonna get into the C Q

540
00:22:00,990 --> 00:22:05,490
else's secrets dumper and C Q else's

541
00:22:03,750 --> 00:22:08,160
secret number that's my toe

542
00:22:05,490 --> 00:22:11,460
my favorite tool this guy consists of

543
00:22:08,160 --> 00:22:13,320
the 41 mini tools underneath you kind of

544
00:22:11,460 --> 00:22:16,280
don't see it because the only thing we

545
00:22:13,320 --> 00:22:19,710
just do over here is just file exported

546
00:22:16,280 --> 00:22:21,870
pfx and that's it so we have just

547
00:22:19,710 --> 00:22:24,179
exported the private key from the domain

548
00:22:21,870 --> 00:22:26,100
what are the preconditions for exporting

549
00:22:24,179 --> 00:22:28,350
it just to be absolutely fair there are

550
00:22:26,100 --> 00:22:29,669
four preconditions that are or so you do

551
00:22:28,350 --> 00:22:32,490
this or that or that

552
00:22:29,670 --> 00:22:34,440
so either you are domain admin which is

553
00:22:32,490 --> 00:22:36,690
kind of like man okay well whatever but

554
00:22:34,440 --> 00:22:39,270
yes you've got an access to the domain

555
00:22:36,690 --> 00:22:41,340
controllers backup okay but two

556
00:22:39,270 --> 00:22:43,590
remaining ones are kind of cool you've

557
00:22:41,340 --> 00:22:45,689
got a permission within the domain over

558
00:22:43,590 --> 00:22:48,659
that replicate the directory changes all

559
00:22:45,690 --> 00:22:51,150
you know who has this service accounts

560
00:22:48,660 --> 00:22:53,520
usually for SharePoint for the profile

561
00:22:51,150 --> 00:22:56,070
replication so if we connect the dots

562
00:22:53,520 --> 00:22:58,020
with our toluca you're able to extract a

563
00:22:56,070 --> 00:23:00,149
password for the service account that

564
00:22:58,020 --> 00:23:02,129
runs for example SharePoint service for

565
00:23:00,150 --> 00:23:03,900
the profile application and then you are

566
00:23:02,130 --> 00:23:05,610
fetching that particular key from the

567
00:23:03,900 --> 00:23:10,110
domain remotely we also provide the

568
00:23:05,610 --> 00:23:12,629
remote tools for that and another fourth

569
00:23:10,110 --> 00:23:15,360
one it's a read-only DC if the domain

570
00:23:12,630 --> 00:23:16,800
admin logs on on the Rideau in DC yes so

571
00:23:15,360 --> 00:23:19,169
these are the preconditions for having

572
00:23:16,800 --> 00:23:21,750
it good so how are we able to use this

573
00:23:19,170 --> 00:23:24,450
exported pfx so let's use this within

574
00:23:21,750 --> 00:23:27,059
this scenario so we're right back on the

575
00:23:24,450 --> 00:23:29,010
user's machine and what I would like to

576
00:23:27,059 --> 00:23:31,440
do and we're gonna simplify the whole

577
00:23:29,010 --> 00:23:33,570
operation right now because I would like

578
00:23:31,440 --> 00:23:35,820
to we could do it online but it's a

579
00:23:33,570 --> 00:23:38,309
little bit of a complex person protests

580
00:23:35,820 --> 00:23:39,990
so I'm gonna do it offline and the

581
00:23:38,309 --> 00:23:42,240
reason why I'm gonna do it this way it's

582
00:23:39,990 --> 00:23:44,610
because this demo thinks that approach

583
00:23:42,240 --> 00:23:46,890
will be more linear so hopefully you

584
00:23:44,610 --> 00:23:48,540
guys gonna enjoy that of course we could

585
00:23:46,890 --> 00:23:50,610
be saying well BitLocker could help it

586
00:23:48,540 --> 00:23:53,100
well as we mentioned this can be done

587
00:23:50,610 --> 00:23:56,189
online and offline so there are two ways

588
00:23:53,100 --> 00:23:58,678
of running this particular approach okay

589
00:23:56,190 --> 00:24:00,750
so what we're gonna do right now is and

590
00:23:58,679 --> 00:24:02,520
that's kind of cool we're gonna leverage

591
00:24:00,750 --> 00:24:04,740
a couple of things at the same time so

592
00:24:02,520 --> 00:24:07,429
stay with me because right now we're

593
00:24:04,740 --> 00:24:10,890
gonna do this first of all I'm gonna

594
00:24:07,429 --> 00:24:13,200
overwrite cache logon data sometimes

595
00:24:10,890 --> 00:24:14,669
people call it cash credentials these

596
00:24:13,200 --> 00:24:18,150
credentials have nothing to do with

597
00:24:14,669 --> 00:24:19,000
credentials this is the pbkdf2 functions

598
00:24:18,150 --> 00:24:20,860
so it's not

599
00:24:19,000 --> 00:24:22,660
Cybil plus you cannot log on with a

600
00:24:20,860 --> 00:24:24,850
value of that so we cannot really call

601
00:24:22,660 --> 00:24:26,680
them credentials but I'm just very picky

602
00:24:24,850 --> 00:24:28,870
right now so what we're gonna do we're

603
00:24:26,680 --> 00:24:30,910
gonna override them and the reason why

604
00:24:28,870 --> 00:24:32,379
we're gonna do it is because I would

605
00:24:30,910 --> 00:24:35,140
like to show you that if we log on move

606
00:24:32,380 --> 00:24:37,330
the illegally changed password and our

607
00:24:35,140 --> 00:24:39,250
master key depends on our hash

608
00:24:37,330 --> 00:24:41,740
you're not getting access to someone's

609
00:24:39,250 --> 00:24:43,390
secrets but you wouldn't be here I

610
00:24:41,740 --> 00:24:45,640
wouldn't be here if this was end of this

611
00:24:43,390 --> 00:24:48,040
scenario so eventually we're gonna take

612
00:24:45,640 --> 00:24:49,630
this exported pfx and we're gonna say

613
00:24:48,040 --> 00:24:51,610
okay we are not able to get access to

614
00:24:49,630 --> 00:24:53,170
secrets so bring on the exported P

615
00:24:51,610 --> 00:24:54,939
effects and then we are decrypting all

616
00:24:53,170 --> 00:24:58,030
the secrets of the user this is the

617
00:24:54,940 --> 00:25:00,940
flavor let's do it so we're gonna get

618
00:24:58,030 --> 00:25:03,280
into the D Drive where I've got my tools

619
00:25:00,940 --> 00:25:06,520
over here so let's get into C Q naught C

620
00:25:03,280 --> 00:25:08,350
Q malware it is another one here we go

621
00:25:06,520 --> 00:25:10,960
this is the Malheur for education if you

622
00:25:08,350 --> 00:25:12,340
were ever need this leveraging vast

623
00:25:10,960 --> 00:25:14,080
majority of the nice smaller

624
00:25:12,340 --> 00:25:17,350
functionalities quite an advanced

625
00:25:14,080 --> 00:25:19,929
malware actually anyway let's do it so

626
00:25:17,350 --> 00:25:22,270
probably you know the to me me cuts yeah

627
00:25:19,930 --> 00:25:24,720
it's over extracting credentials this is

628
00:25:22,270 --> 00:25:27,400
our module that we wrote so eventually

629
00:25:24,720 --> 00:25:29,260
we are able to play a little bit of the

630
00:25:27,400 --> 00:25:32,500
cache logon data and we're gonna do a

631
00:25:29,260 --> 00:25:36,520
let's say dump cache and now we're gonna

632
00:25:32,500 --> 00:25:38,470
do D once again windows system32

633
00:25:36,520 --> 00:25:41,080
unfortunately I have to type it yes

634
00:25:38,470 --> 00:25:43,270
config and then we're gonna do system

635
00:25:41,080 --> 00:25:46,960
where the boot key is because boot key

636
00:25:43,270 --> 00:25:49,990
is also decrypting to the value of his

637
00:25:46,960 --> 00:25:51,880
MSD C to cache logon data so it's not

638
00:25:49,990 --> 00:25:53,230
really the decryption because you're

639
00:25:51,880 --> 00:25:56,730
getting into the value that gives you

640
00:25:53,230 --> 00:26:01,210
nothing but still windows system32

641
00:25:56,730 --> 00:26:04,870
config and we're gonna do

642
00:26:01,210 --> 00:26:06,970
sakura-san in this case security yes so

643
00:26:04,870 --> 00:26:10,300
we've got cash logon data save over

644
00:26:06,970 --> 00:26:12,850
there Kiwi to approve the operation and

645
00:26:10,300 --> 00:26:14,260
then we are ready to go that will be the

646
00:26:12,850 --> 00:26:17,080
moment where we are overriding cache

647
00:26:14,260 --> 00:26:19,240
logon data bank so every single user

648
00:26:17,080 --> 00:26:22,240
that logged on in this box has right now

649
00:26:19,240 --> 00:26:23,770
overwritten cache logon data now in

650
00:26:22,240 --> 00:26:26,530
order to be able to log on of the cache

651
00:26:23,770 --> 00:26:30,280
log on data guys I have to make it

652
00:26:26,530 --> 00:26:31,928
disconnected so that we are not actually

653
00:26:30,280 --> 00:26:34,658
fetching that organ

654
00:26:31,929 --> 00:26:38,019
into the domain controller perfect yes

655
00:26:34,659 --> 00:26:41,350
and then we are ready to rock with the

656
00:26:38,019 --> 00:26:42,519
access to our secrets so continue so

657
00:26:41,350 --> 00:26:44,559
what we just did

658
00:26:42,519 --> 00:26:46,389
we have overeaten cache local data

659
00:26:44,559 --> 00:26:48,789
within the registry of the operating

660
00:26:46,389 --> 00:26:50,498
system by also reverse engineering the

661
00:26:48,789 --> 00:26:53,139
algorithm how you are able to do it

662
00:26:50,499 --> 00:26:54,940
that by the way violates accountability

663
00:26:53,139 --> 00:26:56,949
within the operating system because

664
00:26:54,940 --> 00:26:59,769
right now I can log on as every user

665
00:26:56,950 --> 00:27:02,139
that ever logged on in this machine will

666
00:26:59,769 --> 00:27:04,090
its use this guy if you remember the

667
00:27:02,139 --> 00:27:06,639
password of this guy was password

668
00:27:04,090 --> 00:27:08,039
password so P at SS wzid

669
00:27:06,639 --> 00:27:11,080
I'm just showing you this right now

670
00:27:08,039 --> 00:27:13,269
enter that doesn't work because we have

671
00:27:11,080 --> 00:27:15,490
overwritten it right so this is a domain

672
00:27:13,269 --> 00:27:17,470
user I'm gonna log on with the password

673
00:27:15,490 --> 00:27:19,960
in this particular case mimikatz why not

674
00:27:17,470 --> 00:27:22,090
we've used this tool so we could we

675
00:27:19,960 --> 00:27:24,429
could use it over here and I'm logging

676
00:27:22,090 --> 00:27:28,090
on into this box now question would be

677
00:27:24,429 --> 00:27:29,799
am I actually able to get access to

678
00:27:28,090 --> 00:27:32,408
these particular credentials and let's

679
00:27:29,799 --> 00:27:35,139
have a look so for that purpose we're

680
00:27:32,409 --> 00:27:36,759
going to be leveraging a chrome pass the

681
00:27:35,139 --> 00:27:39,158
again I don't have access to the

682
00:27:36,759 --> 00:27:41,049
Internet so yeah we're gonna get one

683
00:27:39,159 --> 00:27:44,559
more message and then we got a chrome

684
00:27:41,049 --> 00:27:47,710
pass so here we are trying to decrypt

685
00:27:44,559 --> 00:27:50,499
master keys one by one with our current

686
00:27:47,710 --> 00:27:52,840
password hash but we can't yes because

687
00:27:50,499 --> 00:27:54,669
we changed it so what what's gonna

688
00:27:52,840 --> 00:27:57,580
happen now so you're gonna in a moment

689
00:27:54,669 --> 00:28:01,749
see the line where we are not actually

690
00:27:57,580 --> 00:28:03,249
able to see the password now the coolest

691
00:28:01,749 --> 00:28:07,480
part comes into place

692
00:28:03,249 --> 00:28:10,779
what what's next so what's next is I'm

693
00:28:07,480 --> 00:28:12,369
gonna open up the console here we go and

694
00:28:10,779 --> 00:28:14,950
we don't need to be any privileged user

695
00:28:12,369 --> 00:28:18,158
for that and we're gonna do the

696
00:28:14,950 --> 00:28:21,240
following thing I'm wondering where in

697
00:28:18,159 --> 00:28:24,700
the users profile we actually store

698
00:28:21,240 --> 00:28:26,440
secrets so it depends who is writing

699
00:28:24,700 --> 00:28:28,600
them it could be chrome could be at

700
00:28:26,440 --> 00:28:31,860
could be Firefox whatever data

701
00:28:28,600 --> 00:28:35,799
protection API blobs it's the in general

702
00:28:31,860 --> 00:28:38,949
the blob that contains encrypted most

703
00:28:35,799 --> 00:28:42,369
probably password of the user that is

704
00:28:38,950 --> 00:28:43,590
encrypted by DP API mechanism it has the

705
00:28:42,369 --> 00:28:45,029
same header

706
00:28:43,590 --> 00:28:47,010
over and over again in the operating

707
00:28:45,029 --> 00:28:49,320
system and I would like to show you this

708
00:28:47,010 --> 00:28:51,600
how to extract secrets of the user and

709
00:28:49,320 --> 00:28:53,460
then the next thing I would like to show

710
00:28:51,600 --> 00:28:56,668
you how to get access to the users keep

711
00:28:53,460 --> 00:28:57,419
us because this is what where the value

712
00:28:56,669 --> 00:29:00,900
is yeah

713
00:28:57,419 --> 00:29:03,539
so let's move forward so let's get into

714
00:29:00,900 --> 00:29:09,360
the first step of our demonstration

715
00:29:03,539 --> 00:29:13,140
which is the PAPR tools first step our

716
00:29:09,360 --> 00:29:15,330
tool simple 1cq harsh calc to generate

717
00:29:13,140 --> 00:29:17,520
hashes why do we need to generate hush

718
00:29:15,330 --> 00:29:19,379
because this operation looks like this I

719
00:29:17,520 --> 00:29:21,658
take the P effects that we have

720
00:29:19,380 --> 00:29:24,179
extracted from the domain I decrypt a

721
00:29:21,659 --> 00:29:26,789
secret and I rien crypt it with the

722
00:29:24,179 --> 00:29:28,590
users current password hash because DP

723
00:29:26,789 --> 00:29:32,429
API works in a way that things always

724
00:29:28,590 --> 00:29:34,020
have to be in this case in the encrypted

725
00:29:32,429 --> 00:29:37,080
state so let's do it

726
00:29:34,020 --> 00:29:39,418
Mimi cuts one here we go this is pretty

727
00:29:37,080 --> 00:29:42,870
much our hash that we can use so this is

728
00:29:39,419 --> 00:29:45,090
MD for of the users password and now the

729
00:29:42,870 --> 00:29:48,209
party starts because we're gonna do CQ

730
00:29:45,090 --> 00:29:51,299
master key ID this is one of our core

731
00:29:48,210 --> 00:29:53,880
tools where you are able to decrypt

732
00:29:51,299 --> 00:29:57,510
every single secret of every single user

733
00:29:53,880 --> 00:30:00,929
within the domain so let's do it

734
00:29:57,510 --> 00:30:03,390
and we specify over here pfx exported

735
00:30:00,929 --> 00:30:05,909
pfx the one that we have from the domain

736
00:30:03,390 --> 00:30:09,809
then we are do specific that then we do

737
00:30:05,909 --> 00:30:12,110
specify new hash and we technically put

738
00:30:09,809 --> 00:30:15,299
the hash of the current users password

739
00:30:12,110 --> 00:30:18,500
so the cryptic of the pfx encrypting

740
00:30:15,299 --> 00:30:21,600
with this one any question is what and

741
00:30:18,500 --> 00:30:24,809
file which which master key container

742
00:30:21,600 --> 00:30:27,418
that will be and have no idea we had so

743
00:30:24,809 --> 00:30:29,870
many right so what do we do next

744
00:30:27,419 --> 00:30:32,960
we have to find it we do it like this

745
00:30:29,870 --> 00:30:36,570
technically we get into this

746
00:30:32,960 --> 00:30:42,270
presentation in the secret tools DP API

747
00:30:36,570 --> 00:30:45,299
once again and we go into CQ dpi API

748
00:30:42,270 --> 00:30:48,240
once again seek UDP API block searcher

749
00:30:45,299 --> 00:30:50,580
and this guy is in general good to run

750
00:30:48,240 --> 00:30:52,799
on the machine that you are wondering if

751
00:30:50,580 --> 00:30:54,178
where are my secrets to how do I have

752
00:30:52,799 --> 00:30:57,060
any secrets in general in this machine

753
00:30:54,179 --> 00:30:59,010
you're trying to clean something up and

754
00:30:57,060 --> 00:31:01,110
did you actually ever store something

755
00:30:59,010 --> 00:31:03,390
out there so if you run it it goes

756
00:31:01,110 --> 00:31:05,280
through every single user profile and it

757
00:31:03,390 --> 00:31:06,870
points you that hey secrets are over

758
00:31:05,280 --> 00:31:10,260
here maybe you want to delete them yeah

759
00:31:06,870 --> 00:31:13,590
so cqd PAPR blob searcher has the

760
00:31:10,260 --> 00:31:15,780
following parameters d for the directory

761
00:31:13,590 --> 00:31:17,909
to be searched then we're gonna do it

762
00:31:15,780 --> 00:31:20,160
also goes to the registry which is nice

763
00:31:17,910 --> 00:31:21,990
we're gonna do this recursively and

764
00:31:20,160 --> 00:31:24,090
we're gonna of course specify the out

765
00:31:21,990 --> 00:31:27,120
dere so have a look we're gonna do it

766
00:31:24,090 --> 00:31:29,010
like this we know it's Freddie so let's

767
00:31:27,120 --> 00:31:32,639
get there Freddie and then we're gonna

768
00:31:29,010 --> 00:31:35,220
do in up data and chrome stores its

769
00:31:32,640 --> 00:31:36,960
information in local so let's keep it

770
00:31:35,220 --> 00:31:39,360
this way we're gonna do it recursively

771
00:31:36,960 --> 00:31:43,380
though and we're gonna do the output

772
00:31:39,360 --> 00:31:48,149
into c CQ tools here we go and the whole

773
00:31:43,380 --> 00:31:50,370
thing gonna go into blob dot txt I would

774
00:31:48,150 --> 00:31:52,890
just need to run it for just a bunch of

775
00:31:50,370 --> 00:31:55,739
seconds because this tool is actually

776
00:31:52,890 --> 00:31:58,530
pretty quick and it searches for the

777
00:31:55,740 --> 00:32:00,420
headers so it gets into every single

778
00:31:58,530 --> 00:32:02,760
file and it searches for the headers

779
00:32:00,420 --> 00:32:06,270
that are characteristic for the DP API

780
00:32:02,760 --> 00:32:08,760
so let's have a look blob dot txt here

781
00:32:06,270 --> 00:32:11,400
we go this is how the output looks like

782
00:32:08,760 --> 00:32:13,350
and if I go page down that's awesome we

783
00:32:11,400 --> 00:32:16,350
already can see it let me just enlarge

784
00:32:13,350 --> 00:32:19,469
it these are the secrets and the secrets

785
00:32:16,350 --> 00:32:21,840
are in chrome user data default cookies

786
00:32:19,470 --> 00:32:24,780
by the way it's using Schwaben and

787
00:32:21,840 --> 00:32:28,409
Triple DES so this is how chrome saves

788
00:32:24,780 --> 00:32:30,360
information secrets of the user to the

789
00:32:28,410 --> 00:32:33,720
disk you like it or not it's your thing

790
00:32:30,360 --> 00:32:35,850
I don't personally but eventually there

791
00:32:33,720 --> 00:32:38,700
is this b55 that we are looking for yeah

792
00:32:35,850 --> 00:32:39,510
so let's have a look this is the master

793
00:32:38,700 --> 00:32:41,580
key guiit

794
00:32:39,510 --> 00:32:44,640
if we do have a master key like this

795
00:32:41,580 --> 00:32:48,990
yeah so we are like almost home percent

796
00:32:44,640 --> 00:32:53,370
up data % here we go and then eventually

797
00:32:48,990 --> 00:32:56,370
we go over here into Microsoft pro tect

798
00:32:53,370 --> 00:33:00,179
and sit of the user and we search for

799
00:32:56,370 --> 00:33:04,860
the b55 and as you see we've got over

800
00:33:00,180 --> 00:33:07,110
here the 55 this is this guy existing I

801
00:33:04,860 --> 00:33:09,300
already have that marked just in case of

802
00:33:07,110 --> 00:33:09,990
course I'm kind of lost so visually I

803
00:33:09,300 --> 00:33:13,080
see it

804
00:33:09,990 --> 00:33:15,870
so right-click shift and then we've got

805
00:33:13,080 --> 00:33:18,990
copious puffs and then we are completing

806
00:33:15,870 --> 00:33:22,590
our command so bring it on we've got pfx

807
00:33:18,990 --> 00:33:26,399
exported new harsh file that's it so we

808
00:33:22,590 --> 00:33:28,529
do enter now guys what happens is we've

809
00:33:26,399 --> 00:33:31,219
got let's get back to the folder this ad

810
00:33:28,529 --> 00:33:34,500
modified created so what I'm gonna do

811
00:33:31,220 --> 00:33:37,320
I'm gonna replace these two guys so

812
00:33:34,500 --> 00:33:40,710
we're gonna name this guy good fine and

813
00:33:37,320 --> 00:33:43,918
this ad modified will be also renamed by

814
00:33:40,710 --> 00:33:46,860
us to the original state so let's just

815
00:33:43,919 --> 00:33:48,690
get there eventually and we got it

816
00:33:46,860 --> 00:33:51,149
one more thing because it has kind of

817
00:33:48,690 --> 00:33:54,149
like a blank icon which means that we

818
00:33:51,149 --> 00:33:57,389
have to give it an attribute of a system

819
00:33:54,149 --> 00:34:00,000
and hidden so by the tool we already

820
00:33:57,390 --> 00:34:03,020
generate a command where you are able to

821
00:34:00,000 --> 00:34:06,360
just simply speaking paste it enter

822
00:34:03,020 --> 00:34:09,629
great now let's have a look if it worked

823
00:34:06,360 --> 00:34:13,830
so password f5 we are getting the

824
00:34:09,629 --> 00:34:16,889
password yeah okay what happened what

825
00:34:13,830 --> 00:34:19,710
happened is and this is kind of bad

826
00:34:16,889 --> 00:34:21,619
because if you got access to these four

827
00:34:19,710 --> 00:34:24,300
methods that I was mentioning for

828
00:34:21,619 --> 00:34:27,119
grabbing the private key from the domain

829
00:34:24,300 --> 00:34:29,730
you totally own it because this

830
00:34:27,119 --> 00:34:32,129
particular private key I will sue to

831
00:34:29,730 --> 00:34:35,280
decrypt data the crypt different types

832
00:34:32,129 --> 00:34:36,839
of secrets of every single user within

833
00:34:35,280 --> 00:34:39,240
the domain that leverages data

834
00:34:36,839 --> 00:34:41,429
protection API restoring data so if you

835
00:34:39,239 --> 00:34:44,009
got as I mentioned a hundred thousand

836
00:34:41,429 --> 00:34:47,129
users and they say for example password

837
00:34:44,010 --> 00:34:49,500
in Firefox you totally got it if you got

838
00:34:47,129 --> 00:34:51,359
that private key so I'm always wondering

839
00:34:49,500 --> 00:34:54,510
bad way and that's gonna be a little

840
00:34:51,359 --> 00:34:57,450
drama story but if for example someone's

841
00:34:54,510 --> 00:34:59,400
domain is getting hacked why that isn't

842
00:34:57,450 --> 00:35:01,470
a next step and I'm not suggesting

843
00:34:59,400 --> 00:35:03,480
anything but think about it if you

844
00:35:01,470 --> 00:35:06,180
extract a particular private key what

845
00:35:03,480 --> 00:35:08,700
you could do even domain admin can do it

846
00:35:06,180 --> 00:35:11,819
you could decrypt the secret of users in

847
00:35:08,700 --> 00:35:14,279
your organization be them on Facebook

848
00:35:11,820 --> 00:35:15,570
LinkedIn Twitter name it because this

849
00:35:14,280 --> 00:35:17,910
car these are the kind of credentials

850
00:35:15,570 --> 00:35:18,859
that are usually storing and then do the

851
00:35:17,910 --> 00:35:20,690
public

852
00:35:18,859 --> 00:35:23,209
and for example in the name of the user

853
00:35:20,690 --> 00:35:27,950
accused some or the company name in

854
00:35:23,209 --> 00:35:29,959
general of harassment as bad yeah so

855
00:35:27,950 --> 00:35:32,390
imagine now 50 of your employees are

856
00:35:29,959 --> 00:35:34,729
doing this so this is in general my

857
00:35:32,390 --> 00:35:36,769
flavor here that that particular key and

858
00:35:34,729 --> 00:35:41,288
in general access to the domain

859
00:35:36,769 --> 00:35:44,419
it's totally massive okay good we got it

860
00:35:41,289 --> 00:35:46,969
perfect so just for the reference

861
00:35:44,420 --> 00:35:48,589
because in the schedule this was like 25

862
00:35:46,969 --> 00:35:50,299
minutes we ran a little bit longer but

863
00:35:48,589 --> 00:35:52,969
that's that's not the end of the

864
00:35:50,299 --> 00:35:54,559
presentation but if you want to stay I'm

865
00:35:52,969 --> 00:35:57,440
super happy to continue because this was

866
00:35:54,559 --> 00:35:59,900
originally the concept so let's are you

867
00:35:57,440 --> 00:36:02,749
ready for the next part awesome okay

868
00:35:59,900 --> 00:36:04,339
let's do it perfect so this is one of

869
00:36:02,749 --> 00:36:07,609
the one of the things so let's move

870
00:36:04,339 --> 00:36:10,130
forward yes

871
00:36:07,609 --> 00:36:13,130
let's move forward to the next part

872
00:36:10,130 --> 00:36:15,650
which is related with the users secrets

873
00:36:13,130 --> 00:36:17,569
that are derived by different types from

874
00:36:15,650 --> 00:36:19,759
different types of applications so

875
00:36:17,569 --> 00:36:21,529
things for example like keep us is keep

876
00:36:19,759 --> 00:36:23,529
us safe that's a question that we are

877
00:36:21,529 --> 00:36:27,160
asking over here and let me answer it

878
00:36:23,529 --> 00:36:30,890
but eventually first we're gonna run

879
00:36:27,160 --> 00:36:32,719
with a little bit of example so what we

880
00:36:30,890 --> 00:36:35,900
got and what's the situation here and

881
00:36:32,719 --> 00:36:38,599
especially for you guys that had a data

882
00:36:35,900 --> 00:36:41,289
protection API introduction already that

883
00:36:38,599 --> 00:36:44,029
will be relatively straightforward to em

884
00:36:41,289 --> 00:36:49,249
so the situation is like this

885
00:36:44,029 --> 00:36:51,289
we've got users keep us we see that this

886
00:36:49,249 --> 00:36:53,509
is somewhere within the users profile if

887
00:36:51,289 --> 00:36:55,849
you try to open it yeah so we can just

888
00:36:53,509 --> 00:36:58,160
double click on it or whatever it just

889
00:36:55,849 --> 00:36:59,420
gets in to keep us yeah and what I'm

890
00:36:58,160 --> 00:37:01,519
gonna do I'm gonna type the password

891
00:36:59,420 --> 00:37:03,709
then I'm gonna use later so that you can

892
00:37:01,519 --> 00:37:06,198
see that right now it doesn't work so

893
00:37:03,709 --> 00:37:09,169
have a look I'm just typing secure over

894
00:37:06,199 --> 00:37:10,880
here okay and then it says the password

895
00:37:09,170 --> 00:37:13,789
is incorrect yeah so just to be

896
00:37:10,880 --> 00:37:15,349
completely fair now we can just cancel

897
00:37:13,789 --> 00:37:17,539
it okay we're like okay we're not

898
00:37:15,349 --> 00:37:22,609
getting access to users keep us but if

899
00:37:17,539 --> 00:37:25,609
user realize it's keep us access on the

900
00:37:22,609 --> 00:37:27,440
windows logon which is our biology you

901
00:37:25,609 --> 00:37:30,170
would do something else but users might

902
00:37:27,440 --> 00:37:32,059
do something else then you totally get

903
00:37:30,170 --> 00:37:34,279
it because if you do have

904
00:37:32,059 --> 00:37:37,759
private key from the domain that we were

905
00:37:34,279 --> 00:37:40,489
mentioning then you are able to decrypt

906
00:37:37,759 --> 00:37:43,249
the master key of the user we already

907
00:37:40,489 --> 00:37:46,880
presented that and use that master key

908
00:37:43,249 --> 00:37:49,189
to decrypt the secret like kiba's now

909
00:37:46,880 --> 00:37:52,369
keep us in a structure is actually

910
00:37:49,189 --> 00:37:55,339
looking like this kiba's has protected a

911
00:37:52,369 --> 00:37:57,890
user key and this particular protected

912
00:37:55,339 --> 00:38:00,439
user key is actually the key that is

913
00:37:57,890 --> 00:38:03,199
encrypting keep us and that key is right

914
00:38:00,439 --> 00:38:05,420
now encrypted how do I know because of

915
00:38:03,199 --> 00:38:07,579
this I said that we going to be looking

916
00:38:05,420 --> 00:38:11,839
as well at the different different data

917
00:38:07,579 --> 00:38:14,059
here this is the DP API header so any

918
00:38:11,839 --> 00:38:17,808
blue book in operating system that is

919
00:38:14,059 --> 00:38:19,609
encrypted with the DP API no yeah then

920
00:38:17,809 --> 00:38:22,849
it has this kind of a beginning looking

921
00:38:19,609 --> 00:38:24,769
like kind of a eggsy thing yeah so this

922
00:38:22,849 --> 00:38:26,539
is a characteristic thing for the DPA

923
00:38:24,769 --> 00:38:29,538
API so once you're gonna see it you're

924
00:38:26,539 --> 00:38:32,239
like okay DP API want why don't we just

925
00:38:29,539 --> 00:38:35,150
use some toolkit here so we are it

926
00:38:32,239 --> 00:38:37,670
question is how do we decrypt this and

927
00:38:35,150 --> 00:38:39,949
of course with the master key so what I

928
00:38:37,670 --> 00:38:42,079
do have over here it's already decrypted

929
00:38:39,949 --> 00:38:45,469
master key by leveraging one of our

930
00:38:42,079 --> 00:38:47,689
tools CQ master key decrypt and this is

931
00:38:45,469 --> 00:38:48,979
how master key of the user looks like so

932
00:38:47,689 --> 00:38:51,558
you can see that this is just like a

933
00:38:48,979 --> 00:38:54,709
string so what I'm gonna do over here

934
00:38:51,559 --> 00:38:58,189
I'm gonna copy this guy so let's do that

935
00:38:54,709 --> 00:39:00,049
ctrl a ctrl C and we could be here just

936
00:38:58,189 --> 00:39:01,399
a regular user or whatever really

937
00:39:00,049 --> 00:39:04,369
doesn't matter matter because it could

938
00:39:01,400 --> 00:39:06,829
be technically this is just an offline

939
00:39:04,369 --> 00:39:09,380
operation and we're gonna get into our

940
00:39:06,829 --> 00:39:12,829
tools over here where we're gonna be

941
00:39:09,380 --> 00:39:15,829
leveraging of course DP API so how do we

942
00:39:12,829 --> 00:39:18,709
do that first of all we will need to and

943
00:39:15,829 --> 00:39:22,009
this is kind of logical to decrypt this

944
00:39:18,709 --> 00:39:24,169
blob this protected user kibun how do we

945
00:39:22,009 --> 00:39:26,869
do that well we have to do it by

946
00:39:24,170 --> 00:39:29,420
leveraging the PAPR mechanisms so that

947
00:39:26,869 --> 00:39:31,759
unfortunately with KeePass we are using

948
00:39:29,420 --> 00:39:33,559
something that is called entropy so just

949
00:39:31,759 --> 00:39:37,400
additional data that is characteristic

950
00:39:33,559 --> 00:39:39,619
per every single system to be leveraged

951
00:39:37,400 --> 00:39:41,630
within the whole protists the simplicity

952
00:39:39,619 --> 00:39:44,420
about that is that that particular

953
00:39:41,630 --> 00:39:46,700
entropy you will find

954
00:39:44,420 --> 00:39:47,539
technically in a registry so you can

955
00:39:46,700 --> 00:39:49,279
just extract it

956
00:39:47,539 --> 00:39:50,569
so let's extract the entropy first

957
00:39:49,279 --> 00:39:52,279
because we know we're gonna need it for

958
00:39:50,569 --> 00:39:56,000
keep us and then we're gonna of course

959
00:39:52,279 --> 00:39:59,180
get into encryption or decryption so

960
00:39:56,000 --> 00:40:02,180
we've got a c q DP api key pass DB

961
00:39:59,180 --> 00:40:03,109
descriptor enter and this is the entropy

962
00:40:02,180 --> 00:40:07,190
that we have over here

963
00:40:03,109 --> 00:40:09,049
yeah so this particular entropy let me

964
00:40:07,190 --> 00:40:10,549
maybe just copy it even right now so

965
00:40:09,049 --> 00:40:12,589
we're gonna get back to the previous

966
00:40:10,549 --> 00:40:15,829
value is something that we're gonna need

967
00:40:12,589 --> 00:40:19,640
and then we move forward and we do seek

968
00:40:15,829 --> 00:40:21,920
UDP API blob the krypter and that

969
00:40:19,640 --> 00:40:24,819
particular tool takes a couple of

970
00:40:21,920 --> 00:40:28,220
parameters master key we cut this

971
00:40:24,819 --> 00:40:31,250
entropy we just copy that blob this is

972
00:40:28,220 --> 00:40:33,980
our protected user kibun so let's let's

973
00:40:31,250 --> 00:40:37,069
do it so that whole thing is gonna look

974
00:40:33,980 --> 00:40:40,849
like this let me just make it a full

975
00:40:37,069 --> 00:40:43,369
screen perfect and we've got the tool so

976
00:40:40,849 --> 00:40:47,990
we could do CQG PAPR blob Decrypter and

977
00:40:43,369 --> 00:40:49,970
then we do entropy here we go and then

978
00:40:47,990 --> 00:40:51,950
we specify our entropy over here

979
00:40:49,970 --> 00:40:54,078
something you did not copied so let's

980
00:40:51,950 --> 00:40:57,140
just do it again luckily we can still

981
00:40:54,079 --> 00:41:00,349
see it on the screen and that particular

982
00:40:57,140 --> 00:41:02,000
entropy is of course participating it

983
00:41:00,349 --> 00:41:04,039
doesn't have to be always like that but

984
00:41:02,000 --> 00:41:05,779
in a case of a key pass it is it's

985
00:41:04,039 --> 00:41:09,559
participating in a whole decryption

986
00:41:05,779 --> 00:41:12,349
process perfect we do master and our

987
00:41:09,559 --> 00:41:14,930
master is this particular value that we

988
00:41:12,349 --> 00:41:17,509
got over here so once again we're gonna

989
00:41:14,930 --> 00:41:20,299
just paste it over here okay and then

990
00:41:17,509 --> 00:41:23,420
we've got blob and blob is our C

991
00:41:20,299 --> 00:41:27,680
analysis in this case protected user

992
00:41:23,420 --> 00:41:31,670
Cuban enter and right now what this is

993
00:41:27,680 --> 00:41:34,730
this is actually a key that is directly

994
00:41:31,670 --> 00:41:37,759
decrypting the key past database this is

995
00:41:34,730 --> 00:41:40,970
how keep us works so eventually we do

996
00:41:37,759 --> 00:41:43,039
use another tool which is CQ keep us

997
00:41:40,970 --> 00:41:44,808
levy Decrypter the PAPR key possibly

998
00:41:43,039 --> 00:41:46,640
Decrypter you must admit by the way that

999
00:41:44,809 --> 00:41:48,890
our names of the tools are awful yeah

1000
00:41:46,640 --> 00:41:50,750
it's hard it's hard to start to say it

1001
00:41:48,890 --> 00:41:52,129
in from there but there isn't like why

1002
00:41:50,750 --> 00:41:54,859
we do it this way is because we've got

1003
00:41:52,130 --> 00:41:55,820
so many and is it you're just impossible

1004
00:41:54,859 --> 00:41:57,049
to remember

1005
00:41:55,820 --> 00:41:58,970
so you just need you look at the tool

1006
00:41:57,050 --> 00:42:02,060
you're like ah that's what it does yeah

1007
00:41:58,970 --> 00:42:03,830
so this is the story and within this

1008
00:42:02,060 --> 00:42:07,610
particular tool we are using two

1009
00:42:03,830 --> 00:42:09,710
parameters K and F so K is that

1010
00:42:07,610 --> 00:42:13,250
particular decrypted key from the blob

1011
00:42:09,710 --> 00:42:16,100
running on we got this and in this case

1012
00:42:13,250 --> 00:42:19,310
file so what is the file nothing about

1013
00:42:16,100 --> 00:42:21,950
directly CQ base that we were trying to

1014
00:42:19,310 --> 00:42:23,600
get access to but we couldn't so let's

1015
00:42:21,950 --> 00:42:24,109
find out if we will be able to do it

1016
00:42:23,600 --> 00:42:28,040
right now

1017
00:42:24,110 --> 00:42:30,470
and the CQ base let's just get open it

1018
00:42:28,040 --> 00:42:32,330
like this maybe CQ base once we are in a

1019
00:42:30,470 --> 00:42:35,540
comment line and that's this new file

1020
00:42:32,330 --> 00:42:38,210
that is being created here enter awesome

1021
00:42:35,540 --> 00:42:40,340
now remember that password secure didn't

1022
00:42:38,210 --> 00:42:43,210
work so let's just have a look at this

1023
00:42:40,340 --> 00:42:45,440
one and we've got secure

1024
00:42:43,210 --> 00:42:46,930
okay.thank and this is how we are

1025
00:42:45,440 --> 00:42:50,000
getting into the keepers of the user

1026
00:42:46,930 --> 00:42:52,370
yeah so if you ever were going to be in

1027
00:42:50,000 --> 00:42:54,800
that kind of situation that could be one

1028
00:42:52,370 --> 00:42:57,080
of the methods where you can try to get

1029
00:42:54,800 --> 00:42:59,480
access of course to keep us now how

1030
00:42:57,080 --> 00:43:01,400
could we remain safe well of course

1031
00:42:59,480 --> 00:43:04,040
don't rely keepers on the windows logon

1032
00:43:01,400 --> 00:43:05,810
that's that's a simple case we are in

1033
00:43:04,040 --> 00:43:08,210
the industry so we might even know that

1034
00:43:05,810 --> 00:43:10,340
yes but eventually users for them it's

1035
00:43:08,210 --> 00:43:12,860
more convenient and they've got

1036
00:43:10,340 --> 00:43:15,710
passwords in one place but for you as a

1037
00:43:12,860 --> 00:43:17,420
security person over here that might be

1038
00:43:15,710 --> 00:43:20,720
also very convenient in order to get it

1039
00:43:17,420 --> 00:43:23,660
get access to the users data now could

1040
00:43:20,720 --> 00:43:25,370
we follow on that oh yeah so let's have

1041
00:43:23,660 --> 00:43:29,240
a look there is another tool that we've

1042
00:43:25,370 --> 00:43:32,000
got so this one basically it's the CQ

1043
00:43:29,240 --> 00:43:34,279
early seamen decrypter and this is for

1044
00:43:32,000 --> 00:43:37,160
the Remote Desktop connections manager

1045
00:43:34,280 --> 00:43:39,380
so any type of admins that are storing

1046
00:43:37,160 --> 00:43:41,779
passwords credentials whatever sessions

1047
00:43:39,380 --> 00:43:43,640
within the early seamen this is pretty

1048
00:43:41,780 --> 00:43:45,950
much one of the ways to decrypt it and

1049
00:43:43,640 --> 00:43:47,420
this tool takes two parameters it's

1050
00:43:45,950 --> 00:43:50,870
probably the easiest tool that we got

1051
00:43:47,420 --> 00:43:53,960
file and master key on the DP API so

1052
00:43:50,870 --> 00:43:55,910
file is going to be the C analysis and

1053
00:43:53,960 --> 00:43:57,830
then we're going to just do the

1054
00:43:55,910 --> 00:43:59,870
connections over here so we've got to

1055
00:43:57,830 --> 00:44:02,210
seek your connections whatever and then

1056
00:43:59,870 --> 00:44:04,490
we're gonna do here master bring it on

1057
00:44:02,210 --> 00:44:06,770
and that's gonna be the same master key

1058
00:44:04,490 --> 00:44:09,140
that we've been using over here that

1059
00:44:06,770 --> 00:44:11,810
be decrypted by for example the VFX from

1060
00:44:09,140 --> 00:44:14,470
the domain and we got it perfect and

1061
00:44:11,810 --> 00:44:17,060
this is pretty much giving you the

1062
00:44:14,470 --> 00:44:19,220
credentials of any type of a session

1063
00:44:17,060 --> 00:44:20,540
that has been stored within the remote

1064
00:44:19,220 --> 00:44:22,609
desktop okay

1065
00:44:20,540 --> 00:44:25,340
so anything that moves in general can be

1066
00:44:22,610 --> 00:44:28,040
decrypted in Windows with the toolkit

1067
00:44:25,340 --> 00:44:32,570
that we got totally addressing the DP

1068
00:44:28,040 --> 00:44:34,369
API now that's not over because there is

1069
00:44:32,570 --> 00:44:37,580
another type of a DPI in operating

1070
00:44:34,369 --> 00:44:39,830
system and this one is called DP api mg

1071
00:44:37,580 --> 00:44:42,710
and this is a completely different thing

1072
00:44:39,830 --> 00:44:45,319
new generation as we call it and that's

1073
00:44:42,710 --> 00:44:47,750
kind of funky because this has been

1074
00:44:45,320 --> 00:44:52,220
introduced in practice in Windows Server

1075
00:44:47,750 --> 00:44:55,820
2012 r2 with the functionality of having

1076
00:44:52,220 --> 00:44:58,368
pfx files to be seat protected so

1077
00:44:55,820 --> 00:45:00,590
normally if you have pfx files it's such

1078
00:44:58,369 --> 00:45:03,530
an old-school format I just cannot live

1079
00:45:00,590 --> 00:45:05,020
with this so it's just password and how

1080
00:45:03,530 --> 00:45:08,000
can you manage these passwords well

1081
00:45:05,020 --> 00:45:10,100
maybe in keep us yeah so you have to do

1082
00:45:08,000 --> 00:45:12,130
something about it so these PF X's they

1083
00:45:10,100 --> 00:45:16,009
have been redesigned a little bit by

1084
00:45:12,130 --> 00:45:18,650
allowing user to export a certificate

1085
00:45:16,010 --> 00:45:20,480
and say who do you want to make it

1086
00:45:18,650 --> 00:45:22,100
available to so let me show you

1087
00:45:20,480 --> 00:45:24,170
basically how it works so that we get a

1088
00:45:22,100 --> 00:45:26,240
clear idea what to do with that and

1089
00:45:24,170 --> 00:45:27,619
obviously because it's blackhat I will

1090
00:45:26,240 --> 00:45:30,859
show you how to violate that mechanism

1091
00:45:27,619 --> 00:45:34,400
um sorry about this I'm just bringing

1092
00:45:30,859 --> 00:45:38,810
bad news all the time okay let's have a

1093
00:45:34,400 --> 00:45:40,369
look so we're gonna do this on pretty

1094
00:45:38,810 --> 00:45:41,990
much we've got a choice of a different

1095
00:45:40,369 --> 00:45:43,820
operating systems out there but we could

1096
00:45:41,990 --> 00:45:46,729
do it maybe on a Windows 8.1 or Windows

1097
00:45:43,820 --> 00:45:49,280
10 doesn't matter really because because

1098
00:45:46,730 --> 00:45:51,080
yeah any type of operating system here

1099
00:45:49,280 --> 00:45:54,950
would would definitely would definitely

1100
00:45:51,080 --> 00:45:57,799
do it and eventually what's the flavor

1101
00:45:54,950 --> 00:46:01,250
the flavor is that I'm gonna be logged

1102
00:45:57,800 --> 00:46:02,840
on us the regular user and one of the

1103
00:46:01,250 --> 00:46:05,000
things that we're gonna do over here so

1104
00:46:02,840 --> 00:46:08,090
that's that that's the case is that

1105
00:46:05,000 --> 00:46:10,720
we're gonna get into cert MGR

1106
00:46:08,090 --> 00:46:12,800
so this is Freddy again logging on and

1107
00:46:10,720 --> 00:46:14,930
whatever there is some kind of a

1108
00:46:12,800 --> 00:46:17,510
certificate out there yes so we could do

1109
00:46:14,930 --> 00:46:18,990
all tasks and eventually we could do

1110
00:46:17,510 --> 00:46:22,140
export

1111
00:46:18,990 --> 00:46:23,609
and next and this by the way this is a

1112
00:46:22,140 --> 00:46:25,379
little bit of a cheating we also have a

1113
00:46:23,610 --> 00:46:28,980
tool because right now you can see that

1114
00:46:25,380 --> 00:46:30,810
we do we can export the private key yet

1115
00:46:28,980 --> 00:46:32,940
why private key is not exportable

1116
00:46:30,810 --> 00:46:35,190
because if the certificate is generated

1117
00:46:32,940 --> 00:46:38,100
from the template there is a checkbox in

1118
00:46:35,190 --> 00:46:40,260
a template to allow or disallow two key

1119
00:46:38,100 --> 00:46:42,240
to be exportable but that's not true

1120
00:46:40,260 --> 00:46:44,910
because every single time you get the

1121
00:46:42,240 --> 00:46:46,950
private key and you log on everything is

1122
00:46:44,910 --> 00:46:48,810
that it's in a personal container it's

1123
00:46:46,950 --> 00:46:50,430
actually loaded to the memory so if you

1124
00:46:48,810 --> 00:46:52,140
do the memory dump we've got a two as

1125
00:46:50,430 --> 00:46:54,240
well to extract that private key from

1126
00:46:52,140 --> 00:46:56,040
the memory dam so if you ever have a PF

1127
00:46:54,240 --> 00:46:58,500
X and the private key and that's your

1128
00:46:56,040 --> 00:47:00,540
only one P effects out there and you

1129
00:46:58,500 --> 00:47:02,100
cannot export it because the private key

1130
00:47:00,540 --> 00:47:03,920
is not exportable just check out our

1131
00:47:02,100 --> 00:47:07,220
block and we've got a video how to

1132
00:47:03,920 --> 00:47:11,190
actually recover your private key yeah

1133
00:47:07,220 --> 00:47:12,839
yeah okay bring it on is export the

1134
00:47:11,190 --> 00:47:16,140
private key yes

1135
00:47:12,840 --> 00:47:17,640
next we can know this is what I'm

1136
00:47:16,140 --> 00:47:20,009
talking about yeah so you can specify

1137
00:47:17,640 --> 00:47:21,750
what would you like to who's supposed to

1138
00:47:20,010 --> 00:47:23,970
get access to this particular private

1139
00:47:21,750 --> 00:47:26,670
key see I'm not specifying the password

1140
00:47:23,970 --> 00:47:28,618
for the pfx I'm not so I can technically

1141
00:47:26,670 --> 00:47:31,050
specify here some user

1142
00:47:28,619 --> 00:47:31,650
I've got like Glee and then I can just

1143
00:47:31,050 --> 00:47:35,250
do next

1144
00:47:31,650 --> 00:47:38,060
and basically I can specify some some

1145
00:47:35,250 --> 00:47:40,200
name over here so we could just to see

1146
00:47:38,060 --> 00:47:43,650
let's just get into some kind of a

1147
00:47:40,200 --> 00:47:46,049
folder and we could just do it into

1148
00:47:43,650 --> 00:47:48,690
analysis folder why not and we could put

1149
00:47:46,050 --> 00:47:51,240
our certificate over here for ibly or

1150
00:47:48,690 --> 00:47:53,850
something yes so this is this is the

1151
00:47:51,240 --> 00:47:56,819
whole concept next next finish and yes

1152
00:47:53,850 --> 00:47:58,770
okay great so what I did before the

1153
00:47:56,820 --> 00:48:00,930
presentation I took that kind of a

1154
00:47:58,770 --> 00:48:03,090
certificate and I copied it to my box

1155
00:48:00,930 --> 00:48:05,279
because on my laptop I got the old

1156
00:48:03,090 --> 00:48:07,800
analysis tools and I would like to show

1157
00:48:05,280 --> 00:48:11,280
you what to do next so now we are kind

1158
00:48:07,800 --> 00:48:14,070
of closing the circle because here in

1159
00:48:11,280 --> 00:48:19,320
general what's going to happen so we've

1160
00:48:14,070 --> 00:48:21,030
got our entity stdt decrypter now one of

1161
00:48:19,320 --> 00:48:23,130
the other things that we can export

1162
00:48:21,030 --> 00:48:25,410
within that particular tool

1163
00:48:23,130 --> 00:48:28,619
it's the pfx that we were talking about

1164
00:48:25,410 --> 00:48:30,569
so we can just export it even offline so

1165
00:48:28,619 --> 00:48:31,830
you can even do it like this and another

1166
00:48:30,570 --> 00:48:35,040
part that you can do

1167
00:48:31,830 --> 00:48:37,950
it's the KD s root key and you can

1168
00:48:35,040 --> 00:48:40,830
specify the KD s dot bin and what's the

1169
00:48:37,950 --> 00:48:43,470
KD s root key in Korean in general in

1170
00:48:40,830 --> 00:48:47,580
Active Directory obviously we've got a

1171
00:48:43,470 --> 00:48:49,890
Kerberos that has its own root keys what

1172
00:48:47,580 --> 00:48:53,250
are the risk is used for well first of

1173
00:48:49,890 --> 00:48:55,920
all this is the value from which if you

1174
00:48:53,250 --> 00:48:58,590
are using the PAP ing you are pre

1175
00:48:55,920 --> 00:49:00,150
calculating someone's secret and here

1176
00:48:58,590 --> 00:49:01,850
here we are not talking about the Kerby

1177
00:49:00,150 --> 00:49:04,440
TGT password hash it's a different thing

1178
00:49:01,850 --> 00:49:06,330
for the golden ticket for example here

1179
00:49:04,440 --> 00:49:08,130
we are talking more about the DP API

1180
00:49:06,330 --> 00:49:11,130
part yes so this is that this is the

1181
00:49:08,130 --> 00:49:13,220
story so let's just do it and that's

1182
00:49:11,130 --> 00:49:16,410
gonna be that's gonna be quite nice so

1183
00:49:13,220 --> 00:49:20,459
we got it and the question is of course

1184
00:49:16,410 --> 00:49:23,399
a quote can we do in order to get access

1185
00:49:20,460 --> 00:49:26,030
to this particular certificate yeah so

1186
00:49:23,400 --> 00:49:28,590
what we're gonna do right now is and

1187
00:49:26,030 --> 00:49:31,050
this is kind of kind of nice too we're

1188
00:49:28,590 --> 00:49:35,490
gonna use another tool that is

1189
00:49:31,050 --> 00:49:38,250
leveraging ICQ CQ tools for the DP api

1190
00:49:35,490 --> 00:49:41,609
so let me just type that in a moment

1191
00:49:38,250 --> 00:49:44,010
here we go this is this one c q DP api p

1192
00:49:41,610 --> 00:49:45,720
FX Decrypter and if you've got a p

1193
00:49:44,010 --> 00:49:49,860
effects like this you could always

1194
00:49:45,720 --> 00:49:50,490
leverage our house our tools so how does

1195
00:49:49,860 --> 00:49:53,070
it work

1196
00:49:50,490 --> 00:49:57,330
so we've got our p FX Decrypter and this

1197
00:49:53,070 --> 00:49:59,100
takes two values p FX and master key now

1198
00:49:57,330 --> 00:50:01,890
what kind of master key this time

1199
00:49:59,100 --> 00:50:04,640
Kerberos master key and this Kerberos

1200
00:50:01,890 --> 00:50:07,080
master key has been decrypted and

1201
00:50:04,640 --> 00:50:10,049
extracted in the previous tool over here

1202
00:50:07,080 --> 00:50:12,480
so this is just like we've got kts root

1203
00:50:10,050 --> 00:50:14,460
master root key and then we've got this

1204
00:50:12,480 --> 00:50:18,090
bunch of values have a look how many

1205
00:50:14,460 --> 00:50:20,160
we've got 1 2 3 of them is this typical

1206
00:50:18,090 --> 00:50:22,200
for the normal production environment

1207
00:50:20,160 --> 00:50:24,720
actually very much yes you were

1208
00:50:22,200 --> 00:50:27,960
approximately two three four master keys

1209
00:50:24,720 --> 00:50:30,270
like this so this is a very cool file or

1210
00:50:27,960 --> 00:50:32,400
very cool data to have because it allows

1211
00:50:30,270 --> 00:50:35,850
you to decrypt everything that has been

1212
00:50:32,400 --> 00:50:36,420
ever protected with the DP API ng so

1213
00:50:35,850 --> 00:50:38,250
let's do it

1214
00:50:36,420 --> 00:50:40,890
we've got this guy we're going to

1215
00:50:38,250 --> 00:50:41,820
specify the P FX and in this case we're

1216
00:50:40,890 --> 00:50:45,629
going to do

1217
00:50:41,820 --> 00:50:48,210
I've got it in the backup backup folder

1218
00:50:45,630 --> 00:50:51,360
so here we go and then we've got four

1219
00:50:48,210 --> 00:50:53,700
bleep EFX and that particular master key

1220
00:50:51,360 --> 00:50:55,770
let's try because essentially right now

1221
00:50:53,700 --> 00:50:57,480
I have no idea which ones that's gonna

1222
00:50:55,770 --> 00:51:00,090
work over here so we could try this one

1223
00:50:57,480 --> 00:51:02,820
and I think it might be this one

1224
00:51:00,090 --> 00:51:05,640
actually but let's see master and then

1225
00:51:02,820 --> 00:51:08,760
we are pasting it and then we are trying

1226
00:51:05,640 --> 00:51:11,730
let me just try to work on it a little

1227
00:51:08,760 --> 00:51:15,150
bit we are trying to get that particular

1228
00:51:11,730 --> 00:51:16,470
certificate so let's just see another

1229
00:51:15,150 --> 00:51:17,970
one

1230
00:51:16,470 --> 00:51:21,419
something is wrong off the certificate

1231
00:51:17,970 --> 00:51:24,870
or yeah let's see pfx back up and then

1232
00:51:21,420 --> 00:51:29,520
let's try that for maybe Bruce in this

1233
00:51:24,870 --> 00:51:32,609
case master here we go okay that's

1234
00:51:29,520 --> 00:51:34,980
better so basically we've got over here

1235
00:51:32,610 --> 00:51:38,520
that particular value that's particular

1236
00:51:34,980 --> 00:51:40,590
certificate out there and eventually

1237
00:51:38,520 --> 00:51:42,060
we'll get a password yeah now let me

1238
00:51:40,590 --> 00:51:43,260
show you something because just to

1239
00:51:42,060 --> 00:51:46,860
connect the dots of the whole

1240
00:51:43,260 --> 00:51:51,180
demonstration yeah so basically whenever

1241
00:51:46,860 --> 00:51:53,220
we are in this client box yeah so I

1242
00:51:51,180 --> 00:51:56,430
should have this this certificate over

1243
00:51:53,220 --> 00:51:58,830
here so we've got we've got different

1244
00:51:56,430 --> 00:52:00,870
different certificates we've got the

1245
00:51:58,830 --> 00:52:03,630
blue search for example so we could try

1246
00:52:00,870 --> 00:52:08,359
to run it on the blizzard once again so

1247
00:52:03,630 --> 00:52:12,630
once you open it and you go next next

1248
00:52:08,360 --> 00:52:14,970
this is the DP API ng you we've never

1249
00:52:12,630 --> 00:52:17,430
over here specified the password and

1250
00:52:14,970 --> 00:52:19,740
that's the case but eventually we could

1251
00:52:17,430 --> 00:52:23,180
just try to do this let me just do the

1252
00:52:19,740 --> 00:52:28,459
live live case we're gonna just try if

1253
00:52:23,180 --> 00:52:32,220
for the blizzard it works but it should

1254
00:52:28,460 --> 00:52:34,770
okay good so we've got AI X F something

1255
00:52:32,220 --> 00:52:37,500
something so this is the password and

1256
00:52:34,770 --> 00:52:39,840
the question is of course will we be

1257
00:52:37,500 --> 00:52:42,600
able to see it over here yes so this is

1258
00:52:39,840 --> 00:52:45,360
in general one of them one of the

1259
00:52:42,600 --> 00:52:47,850
approaches that we've got to the DP API

1260
00:52:45,360 --> 00:52:50,520
on G and there is this cursor right

1261
00:52:47,850 --> 00:52:53,720
we've got a X something F G so this is

1262
00:52:50,520 --> 00:52:57,650
exactly that password so PC to protect

1263
00:52:53,720 --> 00:53:01,430
pfx files it's a great mechanism but it

1264
00:52:57,650 --> 00:53:04,970
is as safe as two things your user is

1265
00:53:01,430 --> 00:53:08,509
which is kind of obvious but the second

1266
00:53:04,970 --> 00:53:10,629
is as safe as this four aspect of the

1267
00:53:08,510 --> 00:53:12,410
domain are so as your domain

1268
00:53:10,630 --> 00:53:14,780
administered by couple free domain

1269
00:53:12,410 --> 00:53:18,290
controllers is as your permission of

1270
00:53:14,780 --> 00:53:20,060
replica directory changes all is and as

1271
00:53:18,290 --> 00:53:22,460
you read only con domain controller is

1272
00:53:20,060 --> 00:53:25,640
so this is basically what affects

1273
00:53:22,460 --> 00:53:28,760
directly security of that kind of that

1274
00:53:25,640 --> 00:53:30,350
kind of mechanism so hopefully of course

1275
00:53:28,760 --> 00:53:34,820
we've got we've got the point over here

1276
00:53:30,350 --> 00:53:37,580
okay guys two more tools to go yeah well

1277
00:53:34,820 --> 00:53:40,600
we're all right so let's move forward in

1278
00:53:37,580 --> 00:53:43,970
our team we also derived forensics tools

1279
00:53:40,600 --> 00:53:47,060
we do that projects very often of in

1280
00:53:43,970 --> 00:53:49,040
forensic world we find out that you want

1281
00:53:47,060 --> 00:53:51,350
to do something and then there's no tool

1282
00:53:49,040 --> 00:53:54,470
like this in community so we're like oh

1283
00:53:51,350 --> 00:53:56,509
no okay again we're gonna write it so we

1284
00:53:54,470 --> 00:53:58,669
produce different types of tools for

1285
00:53:56,510 --> 00:54:01,070
memory analysis extracting information

1286
00:53:58,670 --> 00:54:02,720
from memory dumps you just like run it

1287
00:54:01,070 --> 00:54:04,280
over memory dumps Bank you've got an

1288
00:54:02,720 --> 00:54:07,819
information out like for example

1289
00:54:04,280 --> 00:54:09,800
extracting EVT X logs which was held if

1290
00:54:07,820 --> 00:54:11,930
ax 'cold we took us actually over six

1291
00:54:09,800 --> 00:54:14,660
months to write it but eventually you

1292
00:54:11,930 --> 00:54:16,370
are able to extract a VTX files from the

1293
00:54:14,660 --> 00:54:18,350
memory dumps EVT x files are quite

1294
00:54:16,370 --> 00:54:20,870
complex because there's lots of

1295
00:54:18,350 --> 00:54:23,089
different types of checksums inside so

1296
00:54:20,870 --> 00:54:25,279
you just edit little piece of this and

1297
00:54:23,090 --> 00:54:26,780
then the whole lock is totally corrupted

1298
00:54:25,280 --> 00:54:29,600
and I'm sure you might have seen it

1299
00:54:26,780 --> 00:54:32,150
before but eventually one of the things

1300
00:54:29,600 --> 00:54:34,250
that we we run as well are the different

1301
00:54:32,150 --> 00:54:36,230
data analyzer so if you in this your

1302
00:54:34,250 --> 00:54:38,060
first step to forensics we've got a

1303
00:54:36,230 --> 00:54:39,830
bunch of tools to help you out of this

1304
00:54:38,060 --> 00:54:42,170
let me show you not everything is

1305
00:54:39,830 --> 00:54:44,210
actually that obvious so what we're

1306
00:54:42,170 --> 00:54:47,420
gonna do I'm gonna use this machine

1307
00:54:44,210 --> 00:54:50,330
maybe for that for one analysis and I'm

1308
00:54:47,420 --> 00:54:52,670
gonna sign out this guy and let me log

1309
00:54:50,330 --> 00:54:55,460
on as this guy because it would be

1310
00:54:52,670 --> 00:54:57,560
easier for me to access the tools from

1311
00:54:55,460 --> 00:55:01,160
this particular account let's do it this

1312
00:54:57,560 --> 00:55:05,400
way very good and what we're going to do

1313
00:55:01,160 --> 00:55:08,279
with in particularly this this

1314
00:55:05,400 --> 00:55:11,849
or a certain user session and let's get

1315
00:55:08,280 --> 00:55:16,650
into the the tools that we got we've got

1316
00:55:11,849 --> 00:55:20,130
a tool that is actually allowing you to

1317
00:55:16,650 --> 00:55:23,460
get the cache of the remote desktop

1318
00:55:20,130 --> 00:55:26,730
connections and this is a pretty nice

1319
00:55:23,460 --> 00:55:28,230
tool it is actually having a couple of

1320
00:55:26,730 --> 00:55:30,089
years right now but we were

1321
00:55:28,230 --> 00:55:32,010
participating in a forensics project

1322
00:55:30,089 --> 00:55:34,440
where every single bit as always in a

1323
00:55:32,010 --> 00:55:36,619
forensics project was important and we

1324
00:55:34,440 --> 00:55:39,359
found out that someone was actually

1325
00:55:36,619 --> 00:55:40,740
connecting remotely from this machine so

1326
00:55:39,359 --> 00:55:42,750
we were wondering is there any like

1327
00:55:40,740 --> 00:55:45,299
cache like pictures or something and

1328
00:55:42,750 --> 00:55:47,819
early P protocol it's a protocol that is

1329
00:55:45,300 --> 00:55:50,579
relying on a grid and every single time

1330
00:55:47,819 --> 00:55:52,950
you connect somewhere then you download

1331
00:55:50,579 --> 00:55:55,290
these pieces you download that that

1332
00:55:52,950 --> 00:55:57,899
blocks of the grid and this is just

1333
00:55:55,290 --> 00:56:00,509
added to the file so it's a little messy

1334
00:55:57,900 --> 00:56:02,760
but not that messy so more you move

1335
00:56:00,510 --> 00:56:04,650
around within the RDP session the more

1336
00:56:02,760 --> 00:56:06,210
messy this file will become because then

1337
00:56:04,650 --> 00:56:08,339
you will be downloading me only the new

1338
00:56:06,210 --> 00:56:11,220
grids but in general the quality of that

1339
00:56:08,339 --> 00:56:13,200
grid depends on your network connection

1340
00:56:11,220 --> 00:56:15,419
speed that's why you can adjust within

1341
00:56:13,200 --> 00:56:17,520
the EDP how fast is your network which

1342
00:56:15,420 --> 00:56:19,859
is really weird but that affects the

1343
00:56:17,520 --> 00:56:21,329
quality of the bitmap that's it so what

1344
00:56:19,859 --> 00:56:24,029
we're gonna do over here we're gonna

1345
00:56:21,329 --> 00:56:27,440
load cache this is the remote desktop

1346
00:56:24,030 --> 00:56:30,930
cache and eventually if we do open it up

1347
00:56:27,440 --> 00:56:34,020
then what you can do is to decode it now

1348
00:56:30,930 --> 00:56:37,049
that looks awful but every single every

1349
00:56:34,020 --> 00:56:39,990
DP client has its own unique way of

1350
00:56:37,050 --> 00:56:41,970
caching so in our tip in our tool we

1351
00:56:39,990 --> 00:56:44,578
have adjusted to that and you can

1352
00:56:41,970 --> 00:56:49,230
specify how big it should be the grid

1353
00:56:44,579 --> 00:56:52,650
and whether it's 32 pixels or 64 yeah

1354
00:56:49,230 --> 00:56:55,260
and if we do change it to 64 that is

1355
00:56:52,650 --> 00:56:57,890
basically a little better so you can see

1356
00:56:55,260 --> 00:57:00,690
things that someone else has seen and

1357
00:56:57,890 --> 00:57:08,940
eventually a here question to you guys

1358
00:57:00,690 --> 00:57:11,130
what's this what did someone see web

1359
00:57:08,940 --> 00:57:13,050
server thank you yeah totally this is

1360
00:57:11,130 --> 00:57:15,030
the web server so this is the is yeah so

1361
00:57:13,050 --> 00:57:17,579
this is console and you can move forward

1362
00:57:15,030 --> 00:57:18,359
in the file because our tool is like

1363
00:57:17,579 --> 00:57:20,369
reading

1364
00:57:18,359 --> 00:57:21,989
portions of the file so you can just

1365
00:57:20,369 --> 00:57:23,549
specify agents you want to have a next

1366
00:57:21,989 --> 00:57:24,989
chunk and the next chunk and the next

1367
00:57:23,549 --> 00:57:28,170
chunk yeah so this is one of the

1368
00:57:24,989 --> 00:57:30,269
forensic tools now another part that is

1369
00:57:28,170 --> 00:57:33,660
quite interesting over here and this is

1370
00:57:30,269 --> 00:57:36,448
for today the last tool that I have to

1371
00:57:33,660 --> 00:57:39,420
show you it's actually related with

1372
00:57:36,449 --> 00:57:41,579
extracting prefetch from the operating

1373
00:57:39,420 --> 00:57:44,189
system now if you do have of course

1374
00:57:41,579 --> 00:57:46,439
prefetch most of us do but just for the

1375
00:57:44,189 --> 00:57:48,089
reference prefetch is something that was

1376
00:57:46,439 --> 00:57:51,509
originally introduced in Windows in

1377
00:57:48,089 --> 00:57:54,689
order to monitor the history of

1378
00:57:51,509 --> 00:57:57,390
everything you open just for example if

1379
00:57:54,689 --> 00:57:59,609
you've got a gramophone Drive so not the

1380
00:57:57,390 --> 00:58:01,679
SSD drive so this is a regular drive

1381
00:57:59,609 --> 00:58:02,999
which is like slow so you are in the

1382
00:58:01,679 --> 00:58:05,279
morning you want to whatever open your

1383
00:58:02,999 --> 00:58:08,640
photoshop that just takes time so

1384
00:58:05,279 --> 00:58:10,559
eventually what is happening is because

1385
00:58:08,640 --> 00:58:12,689
of your history that she always run into

1386
00:58:10,559 --> 00:58:15,089
8:00 a.m. what Windows does on the

1387
00:58:12,689 --> 00:58:16,949
prefetcher service or the super fetch it

1388
00:58:15,089 --> 00:58:18,749
takes that software and it loads it to

1389
00:58:16,949 --> 00:58:20,279
the memory before you think about it so

1390
00:58:18,749 --> 00:58:23,189
that when you click on the shortcut it's

1391
00:58:20,279 --> 00:58:25,709
there but that is also amazing feature

1392
00:58:23,189 --> 00:58:28,288
for forensics so eventually what we're

1393
00:58:25,709 --> 00:58:29,999
gonna do have a look prefetch is in a C

1394
00:58:28,289 --> 00:58:32,219
Windows prefetch and eventually you've

1395
00:58:29,999 --> 00:58:34,618
got of course these files over here so

1396
00:58:32,219 --> 00:58:36,660
if you are interested like what was this

1397
00:58:34,619 --> 00:58:40,769
file about yeah so I got here an example

1398
00:58:36,660 --> 00:58:43,469
of the CMD for example then you run it

1399
00:58:40,769 --> 00:58:46,140
with that CQ prefetch parser and our

1400
00:58:43,469 --> 00:58:47,910
tool it's compatible both with Windows

1401
00:58:46,140 --> 00:58:50,038
10 where Microsoft implemented

1402
00:58:47,910 --> 00:58:51,479
compression on prefetch and also

1403
00:58:50,039 --> 00:58:54,989
backward compatibility with other

1404
00:58:51,479 --> 00:58:56,788
prevent - a stands for analysis yeah so

1405
00:58:54,989 --> 00:58:58,949
we can technically run it and what we

1406
00:58:56,789 --> 00:59:02,099
can learn from that particular tool is

1407
00:58:58,949 --> 00:59:05,459
how many times this software has ever

1408
00:59:02,099 --> 00:59:07,289
been running in Windows ever and what

1409
00:59:05,459 --> 00:59:11,009
was the last time you were running it

1410
00:59:07,289 --> 00:59:14,130
yeah and also what kind of utter DLL

1411
00:59:11,009 --> 00:59:16,559
files etc were opened within that file

1412
00:59:14,130 --> 00:59:20,039
why would this is referring to let me

1413
00:59:16,559 --> 00:59:23,400
tell you if you've got malware that is

1414
00:59:20,039 --> 00:59:26,880
for example named notepad how many times

1415
00:59:23,400 --> 00:59:29,039
user open notepad in that OS possibly a

1416
00:59:26,880 --> 00:59:31,109
couple of times so if you got one

1417
00:59:29,039 --> 00:59:31,650
notepad prefetch history and another

1418
00:59:31,109 --> 00:59:34,200
note

1419
00:59:31,650 --> 00:59:36,660
file which note but is real so you

1420
00:59:34,200 --> 00:59:38,069
compare and then you see that dead nova

1421
00:59:36,660 --> 00:59:39,600
has been running for the ten times and

1422
00:59:38,070 --> 00:59:42,030
this one has been only running once

1423
00:59:39,600 --> 00:59:42,720
quite recently let's have fun and let's

1424
00:59:42,030 --> 00:59:46,080
have a look

1425
00:59:42,720 --> 00:59:48,839
so prefetch actually in practice helped

1426
00:59:46,080 --> 00:59:51,810
us in a forensics project to mitigate

1427
00:59:48,840 --> 00:59:54,390
and also to find out where eventually

1428
00:59:51,810 --> 00:59:57,090
run somewhere was coming from within the

1429
00:59:54,390 --> 00:59:59,490
whole enterprise because this allows you

1430
00:59:57,090 --> 01:00:01,500
to historically monitor the execution of

1431
00:59:59,490 --> 01:00:03,180
the files even though we don't have for

1432
01:00:01,500 --> 01:00:06,480
example process tracking turn on by

1433
01:00:03,180 --> 01:00:09,629
default so this is technically one of

1434
01:00:06,480 --> 01:00:11,880
that one of the concepts okay guys so we

1435
01:00:09,630 --> 01:00:15,140
got it yeah we can be talking about it

1436
01:00:11,880 --> 01:00:20,700
for hours literally but let's get into

1437
01:00:15,140 --> 01:00:22,049
the summary at the end yeah so we've

1438
01:00:20,700 --> 01:00:24,240
been talking about of course about

1439
01:00:22,050 --> 01:00:26,700
different types of tools yeah we've got

1440
01:00:24,240 --> 01:00:29,189
as I mentioned over 200 of those our

1441
01:00:26,700 --> 01:00:31,529
team is crazy about those today we have

1442
01:00:29,190 --> 01:00:33,840
covered this is like the major part of

1443
01:00:31,530 --> 01:00:36,420
our tool kit we've got also minor tools

1444
01:00:33,840 --> 01:00:38,430
so you're able to find these guys and

1445
01:00:36,420 --> 01:00:40,350
we've got also the tools that are

1446
01:00:38,430 --> 01:00:43,080
directly related with the data

1447
01:00:40,350 --> 01:00:45,480
protection API today you've seen couple

1448
01:00:43,080 --> 01:00:47,640
of those there's much much more and you

1449
01:00:45,480 --> 01:00:50,580
are able to download pretty much all of

1450
01:00:47,640 --> 01:00:53,069
them from our blog and just for the

1451
01:00:50,580 --> 01:00:56,580
reference we have prepared for you a

1452
01:00:53,070 --> 01:00:59,010
special link which you can use in order

1453
01:00:56,580 --> 01:01:01,410
to get more information about our tool

1454
01:00:59,010 --> 01:01:04,050
kit about this presentation and of

1455
01:01:01,410 --> 01:01:07,049
course about white paper that we

1456
01:01:04,050 --> 01:01:09,350
together with with my team with the

1457
01:01:07,050 --> 01:01:12,330
seeker team wrote in order for you to

1458
01:01:09,350 --> 01:01:15,150
not only become familiar of the tools if

1459
01:01:12,330 --> 01:01:17,220
you wish but also know a little bit by

1460
01:01:15,150 --> 01:01:20,400
the example how you were able to use

1461
01:01:17,220 --> 01:01:23,819
them in your practical life

1462
01:01:20,400 --> 01:01:25,740
I hope yeah so this is the concept what

1463
01:01:23,820 --> 01:01:28,350
can I say thank you so much for

1464
01:01:25,740 --> 01:01:30,540
attending yeah hopefully you enjoyed the

1465
01:01:28,350 --> 01:01:33,509
presentation let us know what you think

1466
01:01:30,540 --> 01:01:35,550
about it on Twitter or either by email

1467
01:01:33,510 --> 01:01:37,590
the shorter email for me it's Paula at

1468
01:01:35,550 --> 01:01:39,930
secure us or Paul at secure academy.com

1469
01:01:37,590 --> 01:01:42,300
I'm available under both of those and

1470
01:01:39,930 --> 01:01:44,879
I'm going to be also today at

1471
01:01:42,300 --> 01:01:48,090
Arsenal booth presenting different types

1472
01:01:44,880 --> 01:01:50,100
of tools as well after 3 p.m. thank you

1473
01:01:48,090 --> 01:01:53,120
so much for attending have a great rest

1474
01:01:50,100 --> 01:01:53,120
of the conference thank you

