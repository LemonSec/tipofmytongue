1
00:00:00,060 --> 00:00:05,159
thanks for being here after lunch this

2
00:00:02,909 --> 00:00:07,200
is a preload insecurity in your doctrine

3
00:00:05,160 --> 00:00:10,309
my name is Luca so today we're gonna

4
00:00:07,200 --> 00:00:12,540
cover just a bit of electron overview

5
00:00:10,309 --> 00:00:15,030
particularly we'll be spending a few

6
00:00:12,540 --> 00:00:16,439
minutes on the security model which is

7
00:00:15,030 --> 00:00:18,538
particularly important in order to

8
00:00:16,440 --> 00:00:21,750
understand you know the new techniques

9
00:00:18,539 --> 00:00:25,199
that I'm I'm going to introduce we'll

10
00:00:21,750 --> 00:00:26,670
dive then deeper into the core topic

11
00:00:25,199 --> 00:00:29,160
which is subverting application being

12
00:00:26,670 --> 00:00:32,460
secure preload after today's

13
00:00:29,160 --> 00:00:34,260
presentation if you find an XSS across

14
00:00:32,460 --> 00:00:38,760
the scripting on an electron application

15
00:00:34,260 --> 00:00:40,260
you should be able to turn it to RC even

16
00:00:38,760 --> 00:00:42,089
though the application is using the

17
00:00:40,260 --> 00:00:44,309
latest version of the framework and all

18
00:00:42,090 --> 00:00:46,260
they recommended security settings so

19
00:00:44,309 --> 00:00:48,690
what I will be introducing today are a

20
00:00:46,260 --> 00:00:50,820
set of techniques that can be leveraged

21
00:00:48,690 --> 00:00:54,180
even in you know what will you consider

22
00:00:50,820 --> 00:00:58,230
a securely configured electron

23
00:00:54,180 --> 00:01:02,190
application so let's just you know jump

24
00:00:58,230 --> 00:01:05,309
into the topics before that this is the

25
00:01:02,190 --> 00:01:07,649
experience that was born as bit of as

26
00:01:05,309 --> 00:01:10,380
part of the research time that I spent

27
00:01:07,650 --> 00:01:13,830
at my company down in sec as well as

28
00:01:10,380 --> 00:01:16,080
customer engagement so you will see a

29
00:01:13,830 --> 00:01:23,280
lot of vulnerability here on common

30
00:01:16,080 --> 00:01:24,780
applications but before as I said I just

31
00:01:23,280 --> 00:01:26,430
need to do an introduction about

32
00:01:24,780 --> 00:01:28,710
electron I assume you know what is

33
00:01:26,430 --> 00:01:32,460
electron since you are here if you don't

34
00:01:28,710 --> 00:01:34,908
it's a popular framework that allows to

35
00:01:32,460 --> 00:01:38,369
build text up up with web technologies

36
00:01:34,909 --> 00:01:40,680
it is really the combination of using

37
00:01:38,369 --> 00:01:43,229
chromium it used to be like Roman

38
00:01:40,680 --> 00:01:45,780
content so I share the library today is

39
00:01:43,229 --> 00:01:49,110
a chromium binary with node and both

40
00:01:45,780 --> 00:01:53,970
those components share v8 which is a

41
00:01:49,110 --> 00:01:56,670
JavaScript engine and even if you don't

42
00:01:53,970 --> 00:01:58,469
know the framework you are you know I

43
00:01:56,670 --> 00:02:00,990
probably have at least one application

44
00:01:58,469 --> 00:02:03,658
that is running on top of electron on

45
00:02:00,990 --> 00:02:05,600
your computer today whether you're

46
00:02:03,659 --> 00:02:09,090
chatting through Skype discord or

47
00:02:05,600 --> 00:02:11,480
writing code or text on business in your

48
00:02:09,090 --> 00:02:13,990
code or atom and many other application

49
00:02:11,480 --> 00:02:16,329
it's becoming very popular

50
00:02:13,990 --> 00:02:17,770
and you know a lot of the application

51
00:02:16,330 --> 00:02:21,310
that don't seem to be electron based

52
00:02:17,770 --> 00:02:24,970
application they are actually you know

53
00:02:21,310 --> 00:02:26,500
on top of this framework so it makes

54
00:02:24,970 --> 00:02:28,390
sense from a security standpoint looking

55
00:02:26,500 --> 00:02:29,940
at you know look at the security of this

56
00:02:28,390 --> 00:02:32,500
application because they're becoming

57
00:02:29,940 --> 00:02:38,980
predominant in in the text of the

58
00:02:32,500 --> 00:02:41,080
environment and of course it basically

59
00:02:38,980 --> 00:02:43,239
tried to cover the mantra that we've

60
00:02:41,080 --> 00:02:45,190
been trying to have for the past you

61
00:02:43,240 --> 00:02:48,370
know decades around you know with Java

62
00:02:45,190 --> 00:02:52,180
of bright ones you know run everywhere

63
00:02:48,370 --> 00:02:53,860
or run anywhere you know we would really

64
00:02:52,180 --> 00:02:56,740
like to have something that we can use

65
00:02:53,860 --> 00:02:59,230
to have application that can be ported

66
00:02:56,740 --> 00:03:00,940
between operating system and you know

67
00:02:59,230 --> 00:03:03,700
they just don't require anything else

68
00:03:00,940 --> 00:03:05,950
than then compiling and bundling for

69
00:03:03,700 --> 00:03:08,440
specific operating system and with

70
00:03:05,950 --> 00:03:10,239
electron you know it is possible and

71
00:03:08,440 --> 00:03:13,120
moreover it is possible to do web

72
00:03:10,240 --> 00:03:15,160
technology there of course are very

73
00:03:13,120 --> 00:03:19,330
popular today and and a lot of people

74
00:03:15,160 --> 00:03:21,700
you know know how to code with those so

75
00:03:19,330 --> 00:03:22,420
here you have an example of why people

76
00:03:21,700 --> 00:03:25,089
love it

77
00:03:22,420 --> 00:03:26,649
Felix is one of the core maintainer he

78
00:03:25,090 --> 00:03:29,800
even made an electron app that is

79
00:03:26,650 --> 00:03:31,390
actually running Windows 95 and being an

80
00:03:29,800 --> 00:03:34,870
electron app can be ported on all

81
00:03:31,390 --> 00:03:39,429
operating system on the other side you

82
00:03:34,870 --> 00:03:41,470
have security people where you know

83
00:03:39,430 --> 00:03:48,700
they're comparing for example electron

84
00:03:41,470 --> 00:03:50,650
with the new flash and and so you know

85
00:03:48,700 --> 00:03:53,019
it's it's it's very difficult to taking

86
00:03:50,650 --> 00:03:54,940
a stand but I I would start saying it's

87
00:03:53,020 --> 00:03:59,430
difficult to fill the gap between you

88
00:03:54,940 --> 00:04:02,320
know web and next up and we'll see why

89
00:03:59,430 --> 00:04:05,050
so if you take an electron application

90
00:04:02,320 --> 00:04:08,739
where you're actually looking at it's a

91
00:04:05,050 --> 00:04:12,460
bundle of a lot of things it start from

92
00:04:08,740 --> 00:04:15,280
the foundation chromium and no Jess the

93
00:04:12,460 --> 00:04:17,590
framework itself obviously your code and

94
00:04:15,280 --> 00:04:20,529
all the MPM so all the dependency you're

95
00:04:17,589 --> 00:04:22,000
bringing in and every time you move an

96
00:04:20,529 --> 00:04:24,640
application you are moving all these

97
00:04:22,000 --> 00:04:27,350
components so this is an important

98
00:04:24,640 --> 00:04:31,270
things to remember

99
00:04:27,350 --> 00:04:35,410
application are bundled through files

100
00:04:31,270 --> 00:04:38,299
called Dada's are there are basically

101
00:04:35,410 --> 00:04:40,130
archives non-compressed it's a

102
00:04:38,300 --> 00:04:41,720
concatenation of file to basically have

103
00:04:40,130 --> 00:04:45,080
a single file that would contain the

104
00:04:41,720 --> 00:04:47,660
entire application and the way electric

105
00:04:45,080 --> 00:04:50,539
works is by inspecting those package

106
00:04:47,660 --> 00:04:52,940
looking for a package of JSON manifest

107
00:04:50,540 --> 00:04:55,610
file which will determine the main

108
00:04:52,940 --> 00:04:59,660
process so the first process is executed

109
00:04:55,610 --> 00:05:02,120
by the framework and when you build the

110
00:04:59,660 --> 00:05:05,620
main process as a developer you're

111
00:05:02,120 --> 00:05:07,850
supposed to create render process so

112
00:05:05,620 --> 00:05:11,990
processes that will actually contain the

113
00:05:07,850 --> 00:05:14,540
actual web content and as of today's you

114
00:05:11,990 --> 00:05:16,670
know today's releases of electron you

115
00:05:14,540 --> 00:05:19,790
there are three ways of creating render

116
00:05:16,670 --> 00:05:22,760
process the most common one being the

117
00:05:19,790 --> 00:05:26,420
browser window browser view it's a

118
00:05:22,760 --> 00:05:28,690
recently introduced object that is

119
00:05:26,420 --> 00:05:32,360
equivalent to what it was webview tag

120
00:05:28,690 --> 00:05:35,900
webview tags a custom HTML tag that is

121
00:05:32,360 --> 00:05:38,720
understood when when you run some

122
00:05:35,900 --> 00:05:41,150
content inside an electronic context and

123
00:05:38,720 --> 00:05:43,670
what is it important is that inside the

124
00:05:41,150 --> 00:05:45,679
render process the application will load

125
00:05:43,670 --> 00:05:49,160
the resources right so we'll load HTML

126
00:05:45,680 --> 00:05:51,290
Javascript and CSS and before loading

127
00:05:49,160 --> 00:05:52,880
that content it can invoke what it's

128
00:05:51,290 --> 00:05:56,180
called the preload and this is the

129
00:05:52,880 --> 00:05:58,100
central topic of today's so let's let's

130
00:05:56,180 --> 00:06:02,930
dive a bit deeper into what it's the

131
00:05:58,100 --> 00:06:07,430
preload so preload is basically a way to

132
00:06:02,930 --> 00:06:08,900
execute code just before the render you

133
00:06:07,430 --> 00:06:11,990
know finish the bootstrap and start

134
00:06:08,900 --> 00:06:14,390
rendering the content so you know you

135
00:06:11,990 --> 00:06:15,970
have the main process run running will

136
00:06:14,390 --> 00:06:18,710
Eastern she ate it for example a browser

137
00:06:15,970 --> 00:06:21,560
window as you can see on the code

138
00:06:18,710 --> 00:06:25,400
example here which is body weight taken

139
00:06:21,560 --> 00:06:27,110
from the official documentation and the

140
00:06:25,400 --> 00:06:30,169
browser window will be stan shaded with

141
00:06:27,110 --> 00:06:32,300
some preferences and one of them one of

142
00:06:30,170 --> 00:06:34,760
those process is the preload where we

143
00:06:32,300 --> 00:06:38,180
define a file that is executed just

144
00:06:34,760 --> 00:06:38,950
before loading resources and then this

145
00:06:38,180 --> 00:06:42,520
is a pretty

146
00:06:38,950 --> 00:06:45,139
particularly around augmenting the dawn

147
00:06:42,520 --> 00:06:47,450
and particularly the wind of object with

148
00:06:45,139 --> 00:06:51,350
custom function there are normally not

149
00:06:47,450 --> 00:06:53,659
available on the browser window so in

150
00:06:51,350 --> 00:06:56,410
this case for example you see how you

151
00:06:53,660 --> 00:06:59,510
could create a customized window open so

152
00:06:56,410 --> 00:07:04,940
you basically override the functionality

153
00:06:59,510 --> 00:07:07,219
of windows that open and an important

154
00:07:04,940 --> 00:07:14,060
aspect here is that the pillars creep

155
00:07:07,220 --> 00:07:15,770
bytes nature has access to no jsapi let

156
00:07:14,060 --> 00:07:18,590
me now introduce another flag which is

157
00:07:15,770 --> 00:07:21,099
important for you no other discussion

158
00:07:18,590 --> 00:07:25,340
later on and that's context isolation

159
00:07:21,100 --> 00:07:27,860
context isolation is a feature that is

160
00:07:25,340 --> 00:07:29,659
considered experimental but it's it's

161
00:07:27,860 --> 00:07:31,460
there and will be there

162
00:07:29,660 --> 00:07:35,180
they basically introduced context

163
00:07:31,460 --> 00:07:38,840
isolation between the preload script and

164
00:07:35,180 --> 00:07:40,760
the render what that means is that pre

165
00:07:38,840 --> 00:07:42,950
low script can still access the entire

166
00:07:40,760 --> 00:07:46,070
with the Wobs but cannot make changes so

167
00:07:42,950 --> 00:07:48,860
if you try to append like in a previous

168
00:07:46,070 --> 00:07:52,330
example a new version of the window open

169
00:07:48,860 --> 00:07:55,700
function that won't simply work a

170
00:07:52,330 --> 00:07:58,430
moreover context isolation works on both

171
00:07:55,700 --> 00:08:00,289
renders and preload but also on renders

172
00:07:58,430 --> 00:08:01,880
and the lakefront framework code and

173
00:08:00,289 --> 00:08:06,620
this is again an important aspect and

174
00:08:01,880 --> 00:08:13,340
we'll see why so let's let's look at an

175
00:08:06,620 --> 00:08:18,590
example of how this work so you probably

176
00:08:13,340 --> 00:08:21,289
see here so this is a some demo code

177
00:08:18,590 --> 00:08:23,239
this is a very useful tool electron

178
00:08:21,289 --> 00:08:24,830
field that allow you to basically run

179
00:08:23,240 --> 00:08:28,370
the same code on different electron

180
00:08:24,830 --> 00:08:30,650
versions so on the on this side here you

181
00:08:28,370 --> 00:08:32,770
see the main process this is what will

182
00:08:30,650 --> 00:08:36,228
be normally sent shaded as the first

183
00:08:32,770 --> 00:08:38,569
process and we are essentially a browser

184
00:08:36,229 --> 00:08:40,570
window with certain preferences so in

185
00:08:38,570 --> 00:08:42,890
this case we have note integration false

186
00:08:40,570 --> 00:08:44,630
context isolation false is already the

187
00:08:42,890 --> 00:08:46,939
default behavior so that doesn't affect

188
00:08:44,630 --> 00:08:49,100
you know the overall behavior of the

189
00:08:46,940 --> 00:08:52,459
application and what we're doing here we

190
00:08:49,100 --> 00:08:54,709
are calling pillows clip called rendered

191
00:08:52,459 --> 00:08:56,839
I apologize for the confusion of the

192
00:08:54,709 --> 00:08:59,750
filename but that's how these Tool Works

193
00:08:56,839 --> 00:09:02,120
and the content of render GS is these

194
00:08:59,750 --> 00:09:06,019
parts so we're appending a static string

195
00:09:02,120 --> 00:09:09,259
to wind up dot ABC and then we are

196
00:09:06,019 --> 00:09:12,319
simply prompting right that the value so

197
00:09:09,259 --> 00:09:15,920
if I ran exiling this way you know we

198
00:09:12,319 --> 00:09:18,380
expect to see the value of the string if

199
00:09:15,920 --> 00:09:22,009
we now redo by making contact isolation

200
00:09:18,380 --> 00:09:24,829
through the script the preload script so

201
00:09:22,009 --> 00:09:27,139
this this object is the window and the

202
00:09:24,829 --> 00:09:30,380
render are in two completely isolated

203
00:09:27,139 --> 00:09:40,459
words so that does not work and we get

204
00:09:30,380 --> 00:09:44,529
an undefined let's now talk about

205
00:09:40,459 --> 00:09:47,750
security model you would expect from

206
00:09:44,529 --> 00:09:50,810
electron being based on chromium to be

207
00:09:47,750 --> 00:09:54,110
you know comparable to you know browser

208
00:09:50,810 --> 00:09:56,029
and in regards to security model to also

209
00:09:54,110 --> 00:09:57,649
have the same security model but that's

210
00:09:56,029 --> 00:09:59,180
actually not accurate because the

211
00:09:57,649 --> 00:10:04,160
election is important to remember it's

212
00:09:59,180 --> 00:10:06,949
not a browser and even from you know

213
00:10:04,160 --> 00:10:09,110
design perspective what electron is

214
00:10:06,949 --> 00:10:10,790
trying to achieve is giving flexibility

215
00:10:09,110 --> 00:10:13,730
to software engineers and developers to

216
00:10:10,790 --> 00:10:15,019
build something that can use native you

217
00:10:13,730 --> 00:10:17,170
know system in you know system

218
00:10:15,019 --> 00:10:19,790
notification and native capabilities

219
00:10:17,170 --> 00:10:22,910
which are obviously not possible in a

220
00:10:19,790 --> 00:10:24,560
full browser and so electron maintainer

221
00:10:22,910 --> 00:10:27,769
has had to balance and I'd still have to

222
00:10:24,560 --> 00:10:31,508
balance the usability for developers and

223
00:10:27,769 --> 00:10:34,009
the security and so certain you know

224
00:10:31,509 --> 00:10:38,689
mechanisms that are available and on the

225
00:10:34,009 --> 00:10:40,519
browser today by choice or or you know

226
00:10:38,689 --> 00:10:46,130
buddy by the current design they're just

227
00:10:40,519 --> 00:10:49,220
not there in electron and particularly

228
00:10:46,130 --> 00:10:52,250
let's talk about two orthogonal aspects

229
00:10:49,220 --> 00:10:55,459
one being our surface so how do we

230
00:10:52,250 --> 00:10:58,339
compare browser to electron in that

231
00:10:55,459 --> 00:11:01,250
matter so if we think about untrusted

232
00:10:58,339 --> 00:11:04,279
content from the web well that's why we

233
00:11:01,250 --> 00:11:05,480
have browser browser give you gives the

234
00:11:04,279 --> 00:11:08,589
ability to to

235
00:11:05,480 --> 00:11:10,880
- random website which is usually not

236
00:11:08,589 --> 00:11:12,500
you know not possible in an electron

237
00:11:10,880 --> 00:11:14,149
application unless you're building a

238
00:11:12,500 --> 00:11:16,130
browser now electron which is highly

239
00:11:14,149 --> 00:11:19,430
discouraged and the brave browser

240
00:11:16,130 --> 00:11:21,589
experiment was was an experiment of you

241
00:11:19,430 --> 00:11:23,420
know kind of a failure of not building a

242
00:11:21,589 --> 00:11:27,250
browser based on electron and in fact

243
00:11:23,420 --> 00:11:31,969
they recently migrated back to a native

244
00:11:27,250 --> 00:11:33,500
chromium based browser there is usually

245
00:11:31,970 --> 00:11:35,810
very limited interaction you are

246
00:11:33,500 --> 00:11:38,240
allowing people to you know type input

247
00:11:35,810 --> 00:11:40,518
fields maybe are images but you never

248
00:11:38,240 --> 00:11:44,570
allow user to go on you know on on

249
00:11:40,519 --> 00:11:46,490
random URLs so in that regards there is

250
00:11:44,570 --> 00:11:50,480
definitely limited interaction on

251
00:11:46,490 --> 00:11:52,459
electron up its for example discouraged

252
00:11:50,480 --> 00:11:54,829
to open a browser window with a remote

253
00:11:52,459 --> 00:11:59,689
origin all the guidelines will recommend

254
00:11:54,829 --> 00:12:02,239
you to load Rock local resources on the

255
00:11:59,690 --> 00:12:04,850
other side there are new things that

256
00:12:02,240 --> 00:12:06,860
become part of those you know a possible

257
00:12:04,850 --> 00:12:10,550
attack surface and this is for example

258
00:12:06,860 --> 00:12:13,399
local resources so you can you know load

259
00:12:10,550 --> 00:12:15,199
resources of any kind from the from the

260
00:12:13,399 --> 00:12:18,920
system and that would be part of the

261
00:12:15,199 --> 00:12:21,469
trade model so in streaming application

262
00:12:18,920 --> 00:12:24,410
it is not unlikely for user to download

263
00:12:21,470 --> 00:12:26,620
let's say subtitles file you know may be

264
00:12:24,410 --> 00:12:29,449
downloaded from torrent or or the web

265
00:12:26,620 --> 00:12:31,430
within the application so those are

266
00:12:29,449 --> 00:12:33,229
obviously things that should be

267
00:12:31,430 --> 00:12:38,388
considered as you know untrusted

268
00:12:33,230 --> 00:12:42,949
untrusted input on the other side we

269
00:12:38,389 --> 00:12:44,720
have isolation so how isolation diff you

270
00:12:42,949 --> 00:12:47,779
know differs from browser to electron

271
00:12:44,720 --> 00:12:49,970
well in the browser especially with you

272
00:12:47,779 --> 00:12:52,339
know recent version of browsers

273
00:12:49,970 --> 00:12:56,630
you know sandboxing is becoming a very

274
00:12:52,339 --> 00:12:59,779
important part and while there is a

275
00:12:56,630 --> 00:13:02,360
chrome-like sandbox in electron because

276
00:12:59,779 --> 00:13:05,420
of the flexibility we we just talk it's

277
00:13:02,360 --> 00:13:07,880
very difficult to be to enforce that by

278
00:13:05,420 --> 00:13:11,599
default and and if you need if you do

279
00:13:07,880 --> 00:13:13,160
need to render a content you know you

280
00:13:11,600 --> 00:13:18,560
may or may not be able to use this

281
00:13:13,160 --> 00:13:20,880
property so generally speaking you know

282
00:13:18,560 --> 00:13:24,489
enterprise

283
00:13:20,880 --> 00:13:26,770
unless you use the proper settings you

284
00:13:24,490 --> 00:13:29,260
know the latest version of the framework

285
00:13:26,770 --> 00:13:30,490
and and all the mitigation that I will

286
00:13:29,260 --> 00:13:32,770
probably providing at the end of the

287
00:13:30,490 --> 00:13:36,310
talk you should consider the cross the

288
00:13:32,770 --> 00:13:37,900
scripting will lead to RC and moreover

289
00:13:36,310 --> 00:13:40,390
the explore reliability is you know

290
00:13:37,900 --> 00:13:42,370
obviously much much greater than it

291
00:13:40,390 --> 00:13:44,830
would be for a typical memory correction

292
00:13:42,370 --> 00:13:46,330
box it's not integration bypasses which

293
00:13:44,830 --> 00:13:48,760
are the mechanisms to break the

294
00:13:46,330 --> 00:13:53,230
isolation are usually business logic

295
00:13:48,760 --> 00:13:56,860
bugs and if we look at the full chain of

296
00:13:53,230 --> 00:13:58,750
an exploit on any electron up you can

297
00:13:56,860 --> 00:14:00,550
distill these in basically three

298
00:13:58,750 --> 00:14:04,000
components so let's start looking at

299
00:14:00,550 --> 00:14:06,250
each of them on the first step you need

300
00:14:04,000 --> 00:14:10,390
some how to control the Dom so you need

301
00:14:06,250 --> 00:14:11,740
to be able to inject JavaScript this is

302
00:14:10,390 --> 00:14:14,410
typically done through cross the

303
00:14:11,740 --> 00:14:17,770
scripting but are actually a lot of

304
00:14:14,410 --> 00:14:20,199
other ways including for example middle

305
00:14:17,770 --> 00:14:21,760
click and middle click is they also a

306
00:14:20,200 --> 00:14:24,160
good example of something that is being

307
00:14:21,760 --> 00:14:27,310
mitigated by the framework itself in the

308
00:14:24,160 --> 00:14:30,130
recent versions the primeira middle

309
00:14:27,310 --> 00:14:32,469
click was that the middle click would

310
00:14:30,130 --> 00:14:35,290
generate an event that is not a

311
00:14:32,470 --> 00:14:37,120
traditional click event but rather a aux

312
00:14:35,290 --> 00:14:39,219
click event and so if you would build

313
00:14:37,120 --> 00:14:42,490
your application trying to intercept

314
00:14:39,220 --> 00:14:44,710
events and blocking the execution it

315
00:14:42,490 --> 00:14:47,320
just wouldn't work because the actual

316
00:14:44,710 --> 00:14:51,550
event handler would get a different

317
00:14:47,320 --> 00:14:53,710
event another good example is drag and

318
00:14:51,550 --> 00:14:57,099
drop being able you know based on

319
00:14:53,710 --> 00:15:00,790
chromium you can actually drag and drop

320
00:14:57,100 --> 00:15:05,170
URL and that would force navigation to

321
00:15:00,790 --> 00:15:07,000
that URL so that's been used for kind of

322
00:15:05,170 --> 00:15:09,790
dragging door privilege escalation where

323
00:15:07,000 --> 00:15:12,160
you drag and drop a content to from a

324
00:15:09,790 --> 00:15:15,130
render that is not privileged to a

325
00:15:12,160 --> 00:15:18,010
privileged render but this is also fixed

326
00:15:15,130 --> 00:15:20,380
by the framework so since version 3 drag

327
00:15:18,010 --> 00:15:25,210
and drop is not a you know enabled by

328
00:15:20,380 --> 00:15:28,600
default anymore so the most common way

329
00:15:25,210 --> 00:15:32,579
to days of subverting the flow is

330
00:15:28,600 --> 00:15:34,019
through cross scripting which is

331
00:15:32,579 --> 00:15:35,549
still very relevant but not a very

332
00:15:34,019 --> 00:15:37,949
interesting from the pure strength

333
00:15:35,549 --> 00:15:40,019
technical standpoint I mean after so

334
00:15:37,949 --> 00:15:42,439
many years I guess we know what what is

335
00:15:40,019 --> 00:15:45,269
the problem run across our scripting

336
00:15:42,439 --> 00:15:48,329
most of the top popular apps are based

337
00:15:45,269 --> 00:15:52,170
on reactor or angular's context well

338
00:15:48,329 --> 00:15:54,709
output encoding is making having crosses

339
00:15:52,170 --> 00:15:59,429
scripting more and more difficult

340
00:15:54,709 --> 00:16:01,498
several apps use CSP as well so it's

341
00:15:59,429 --> 00:16:05,699
it's becoming more complicated and then

342
00:16:01,499 --> 00:16:09,209
it seems to actually obtain you know

343
00:16:05,699 --> 00:16:11,248
JavaScript execution we talked about

344
00:16:09,209 --> 00:16:12,979
limiting interaction also the contents

345
00:16:11,249 --> 00:16:16,980
of cross scripting if you think about

346
00:16:12,980 --> 00:16:19,199
it's often you know something that can

347
00:16:16,980 --> 00:16:23,129
be triggered by the user itself which

348
00:16:19,199 --> 00:16:30,118
make it not very useful for exploitation

349
00:16:23,129 --> 00:16:33,839
as an exploitation vector I'm gonna jump

350
00:16:30,119 --> 00:16:35,459
for a second step two and instead spend

351
00:16:33,839 --> 00:16:39,419
a few seconds on step three which is

352
00:16:35,459 --> 00:16:41,969
basically granted like if you are on a

353
00:16:39,419 --> 00:16:44,009
vendor that has and you have full

354
00:16:41,970 --> 00:16:46,019
control of JavaScript and there is no

355
00:16:44,009 --> 00:16:48,569
isolation or you bypassed the isolation

356
00:16:46,019 --> 00:16:52,639
then obtaining reliable remote code

357
00:16:48,569 --> 00:16:55,349
execution is as easy as using no J's API

358
00:16:52,639 --> 00:16:58,529
so from the pure technical standpoint

359
00:16:55,350 --> 00:17:02,910
the interesting part at least my opinion

360
00:16:58,529 --> 00:17:06,898
is step two is how do I go from there is

361
00:17:02,910 --> 00:17:11,730
an XSS to bypass the isolation in order

362
00:17:06,898 --> 00:17:14,879
to execute commands and there are a few

363
00:17:11,730 --> 00:17:16,380
ask but on why this is interesting the

364
00:17:14,880 --> 00:17:18,179
framework is getting better at least

365
00:17:16,380 --> 00:17:20,100
better than it was you know two years

366
00:17:18,179 --> 00:17:22,230
ago when when we presented the first

367
00:17:20,099 --> 00:17:25,230
research and electron there are better

368
00:17:22,230 --> 00:17:26,939
the four settings and also people are

369
00:17:25,230 --> 00:17:30,049
just learning what are the common

370
00:17:26,939 --> 00:17:34,080
mistakes and and how to prevent them so

371
00:17:30,049 --> 00:17:36,929
it's less likely if you take a top app

372
00:17:34,080 --> 00:17:42,689
that will have the basic mistake of for

373
00:17:36,929 --> 00:17:44,730
example not enabling not integration and

374
00:17:42,690 --> 00:17:46,050
let's look at not integration as an

375
00:17:44,730 --> 00:17:47,700
example

376
00:17:46,050 --> 00:17:50,190
we are tracking vulnerabilities on

377
00:17:47,700 --> 00:17:53,460
electron since the beginning there are

378
00:17:50,190 --> 00:17:56,370
12 note integration of our ability from

379
00:17:53,460 --> 00:18:01,920
the inception until February that's when

380
00:17:56,370 --> 00:18:03,540
we made the count and so the question is

381
00:18:01,920 --> 00:18:04,980
and those are question obviously we

382
00:18:03,540 --> 00:18:07,320
cannot really answer are those

383
00:18:04,980 --> 00:18:10,770
vulnerabilities partial dance how many

384
00:18:07,320 --> 00:18:12,750
more are out there there are probably

385
00:18:10,770 --> 00:18:15,389
more out there like I mean I do expect

386
00:18:12,750 --> 00:18:18,059
to see more not integration bypasses but

387
00:18:15,390 --> 00:18:21,600
if you look for example at something

388
00:18:18,059 --> 00:18:23,790
that was in 2015 or 2019 you clearly see

389
00:18:21,600 --> 00:18:27,899
a difference which is what is the

390
00:18:23,790 --> 00:18:31,800
configuration that that was affected by

391
00:18:27,900 --> 00:18:34,890
the vulnerability so in 2015 the one you

392
00:18:31,800 --> 00:18:36,540
see on the left it was basically the

393
00:18:34,890 --> 00:18:38,370
full browser window that's that's

394
00:18:36,540 --> 00:18:42,928
something that every single app has to

395
00:18:38,370 --> 00:18:45,570
use on the other hand in 2019 which was

396
00:18:42,929 --> 00:18:48,600
the most recent iteration vulnerability

397
00:18:45,570 --> 00:18:52,309
it only affected a new feature which is

398
00:18:48,600 --> 00:18:56,250
browser view with two particular

399
00:18:52,309 --> 00:18:57,990
attributes and all both the the object

400
00:18:56,250 --> 00:19:01,710
and the attributes are experimental at

401
00:18:57,990 --> 00:19:03,840
this point right so it's clearly setting

402
00:19:01,710 --> 00:19:06,390
a difference as for the applicability of

403
00:19:03,840 --> 00:19:09,330
certain node integration bypass if you

404
00:19:06,390 --> 00:19:11,010
take a random application you know you

405
00:19:09,330 --> 00:19:12,780
need to really have this specific

406
00:19:11,010 --> 00:19:18,350
configuration in order to bypass the

407
00:19:12,780 --> 00:19:20,250
integration how you exploit those it

408
00:19:18,350 --> 00:19:22,709
didn't really change much

409
00:19:20,250 --> 00:19:24,809
it's basically always three getting the

410
00:19:22,710 --> 00:19:29,929
opening of another browser window

411
00:19:24,809 --> 00:19:29,928
somehow piggybacking some some details

412
00:19:32,420 --> 00:19:37,620
so I mentioned that secure settings are

413
00:19:35,040 --> 00:19:41,010
you know getting by default

414
00:19:37,620 --> 00:19:44,100
I do remember two years ago a black at

415
00:19:41,010 --> 00:19:45,540
Vegas mentioning that v2 election will

416
00:19:44,100 --> 00:19:48,689
be two would be the game changer for

417
00:19:45,540 --> 00:19:50,990
security it didn't happen but it's now

418
00:19:48,690 --> 00:19:54,030
confirmed it will happen in version five

419
00:19:50,990 --> 00:19:57,059
where browser window will have important

420
00:19:54,030 --> 00:19:59,200
security by default so all well you know

421
00:19:57,059 --> 00:20:01,178
all what we discussed so far will be

422
00:19:59,200 --> 00:20:06,820
they're forced by the framework by

423
00:20:01,179 --> 00:20:09,340
default after April release if you look

424
00:20:06,820 --> 00:20:12,010
at chromium our grade so how electron

425
00:20:09,340 --> 00:20:15,100
keeps chromium updated it's also getting

426
00:20:12,010 --> 00:20:17,260
better right they are catching up much

427
00:20:15,100 --> 00:20:19,510
faster there are motor source located

428
00:20:17,260 --> 00:20:24,158
for for the project more company they

429
00:20:19,510 --> 00:20:26,289
are investing and so this is all

430
00:20:24,159 --> 00:20:28,539
bringing to a kind of a point which is

431
00:20:26,289 --> 00:20:33,970
you know security-wise different work is

432
00:20:28,539 --> 00:20:35,830
getting better we ran our tools so we

433
00:20:33,970 --> 00:20:39,279
have an open source tool that has

434
00:20:35,830 --> 00:20:41,350
security checks that can be you know can

435
00:20:39,279 --> 00:20:46,059
be automated and we automated to run on

436
00:20:41,350 --> 00:20:47,500
on all open source electronification and

437
00:20:46,059 --> 00:20:49,539
just to give you some number like what

438
00:20:47,500 --> 00:20:51,340
we found for example that you know over

439
00:20:49,539 --> 00:20:54,039
eighty percent we're using node

440
00:20:51,340 --> 00:20:57,490
integration so this again brings back at

441
00:20:54,039 --> 00:21:02,289
the point of people are aware of this

442
00:20:57,490 --> 00:21:04,059
problem of those though only a small

443
00:21:02,289 --> 00:21:06,490
percentage twenty five percent is using

444
00:21:04,059 --> 00:21:11,350
context isolation and we'll see why that

445
00:21:06,490 --> 00:21:13,960
matters sandbox while still experimental

446
00:21:11,350 --> 00:21:16,209
there are people out there today trying

447
00:21:13,960 --> 00:21:19,240
in production so that's also good news

448
00:21:16,210 --> 00:21:26,679
and then yes a lot of people still don't

449
00:21:19,240 --> 00:21:29,049
update election to the latest release so

450
00:21:26,679 --> 00:21:31,720
if you want to kind of summarize what is

451
00:21:29,049 --> 00:21:33,760
this state of security for election and

452
00:21:31,720 --> 00:21:35,919
i see a lot of discussion on twitter

453
00:21:33,760 --> 00:21:38,080
around that so that's my personal

454
00:21:35,919 --> 00:21:40,350
opinion which is it is true that

455
00:21:38,080 --> 00:21:44,379
electron vulnerability has higher impact

456
00:21:40,350 --> 00:21:47,799
and if not probably configured XSS means

457
00:21:44,380 --> 00:21:51,279
r c-- but they are more difficult to

458
00:21:47,799 --> 00:21:55,240
trigger it is not just like browsing a

459
00:21:51,279 --> 00:21:56,620
page on on a browser and if you look at

460
00:21:55,240 --> 00:21:59,950
an important application the application

461
00:21:56,620 --> 00:22:01,479
that we rely on every single day all a

462
00:21:59,950 --> 00:22:04,179
pick you know all application this

463
00:22:01,480 --> 00:22:07,360
category have isolation in place in some

464
00:22:04,179 --> 00:22:09,850
way or another and from an attacker

465
00:22:07,360 --> 00:22:12,010
perspective what is important is okay if

466
00:22:09,850 --> 00:22:12,998
I have an application that is using the

467
00:22:12,010 --> 00:22:14,949
latest version of the

468
00:22:12,999 --> 00:22:16,859
work and has all the secure settings

469
00:22:14,949 --> 00:22:20,559
what else can I do

470
00:22:16,859 --> 00:22:23,349
and here is you know I would like to

471
00:22:20,559 --> 00:22:26,739
introduce you this new class of

472
00:22:23,349 --> 00:22:31,239
vulnerability called you know insecure

473
00:22:26,739 --> 00:22:32,799
preload so insecure preload in

474
00:22:31,239 --> 00:22:35,949
particularly preload it's something that

475
00:22:32,799 --> 00:22:37,929
I think it's been neglected by a lot of

476
00:22:35,949 --> 00:22:40,869
people and the vulnerability we found on

477
00:22:37,929 --> 00:22:43,119
very popular apps you know demonstrates

478
00:22:40,869 --> 00:22:46,198
that it is a prominent it's been known

479
00:22:43,119 --> 00:22:49,329
in the electron maintainer community

480
00:22:46,199 --> 00:22:51,429
it's somehow being you know advertised

481
00:22:49,329 --> 00:22:53,948
on the security page but you know as a

482
00:22:51,429 --> 00:22:57,099
minor issue and I don't think it

483
00:22:53,949 --> 00:23:00,849
received the level of attention that

484
00:22:57,099 --> 00:23:05,289
actually requires and so there are four

485
00:23:00,849 --> 00:23:07,948
main categories or topics around how how

486
00:23:05,289 --> 00:23:11,049
you can make your application insecure

487
00:23:07,949 --> 00:23:14,289
by mistake lean doing something in a

488
00:23:11,049 --> 00:23:20,469
preload and so will Co now cover each of

489
00:23:14,289 --> 00:23:21,908
them in greater detail let's start with

490
00:23:20,469 --> 00:23:27,339
the first one which is probably the most

491
00:23:21,909 --> 00:23:30,189
easy to understand which is the preload

492
00:23:27,339 --> 00:23:35,829
is has access to node node primitives

493
00:23:30,189 --> 00:23:39,009
and as such if you miss sickling brings

494
00:23:35,829 --> 00:23:41,469
object from the preload back to the

495
00:23:39,009 --> 00:23:43,899
render it you know basically you're

496
00:23:41,469 --> 00:23:45,489
defeating the purpose of the isolation

497
00:23:43,899 --> 00:23:47,678
and the preload which is you know

498
00:23:45,489 --> 00:23:51,009
obvious for certain modules like for

499
00:23:47,679 --> 00:23:53,199
example process or or file system FS but

500
00:23:51,009 --> 00:23:55,689
is probably not that clear for things

501
00:23:53,199 --> 00:23:58,869
like buffer right and even the electron

502
00:23:55,689 --> 00:24:01,059
maintainer x' were exposing by default

503
00:23:58,869 --> 00:24:03,938
buffer and I'm talking about node node

504
00:24:01,059 --> 00:24:05,829
buffer to the window object even when

505
00:24:03,939 --> 00:24:07,959
not integration will disable and this

506
00:24:05,829 --> 00:24:11,079
was used for as an own integration

507
00:24:07,959 --> 00:24:13,119
bypass so the thing the first thing that

508
00:24:11,079 --> 00:24:15,849
you know can go wrong on preload is

509
00:24:13,119 --> 00:24:19,359
obviously you should not reintroduce no

510
00:24:15,849 --> 00:24:22,269
J's primitive again obvious for certain

511
00:24:19,359 --> 00:24:24,279
modules less obvious for others so every

512
00:24:22,269 --> 00:24:26,469
time you introduce something it really

513
00:24:24,279 --> 00:24:27,040
takes the time to figure out the

514
00:24:26,469 --> 00:24:31,600
implication

515
00:24:27,040 --> 00:24:33,070
that but let's go into the second

516
00:24:31,600 --> 00:24:35,500
category which I think it's the most

517
00:24:33,070 --> 00:24:38,110
interesting one and it's about exposing

518
00:24:35,500 --> 00:24:40,600
dangerous primitives and we'll see this

519
00:24:38,110 --> 00:24:43,090
example with a very popular app wire

520
00:24:40,600 --> 00:24:47,830
which is an end-to-end encryption

521
00:24:43,090 --> 00:24:49,179
messaging app you know they market

522
00:24:47,830 --> 00:24:53,080
themselves as most secure collaboration

523
00:24:49,180 --> 00:24:54,490
platform and the way they desktop up so

524
00:24:53,080 --> 00:24:57,760
we will be talking here obviously about

525
00:24:54,490 --> 00:25:01,660
the desktop app is built is by having a

526
00:24:57,760 --> 00:25:04,150
browser window there has not integration

527
00:25:01,660 --> 00:25:06,190
Falls but allow webview and then the

528
00:25:04,150 --> 00:25:11,830
actual content of where you render the

529
00:25:06,190 --> 00:25:17,050
messages it's inside a webview so if you

530
00:25:11,830 --> 00:25:20,199
are you know any XSS on wire

531
00:25:17,050 --> 00:25:25,899
you know beside of potential XSS in the

532
00:25:20,200 --> 00:25:29,920
settings or like very minor windows will

533
00:25:25,900 --> 00:25:33,490
be inside that webview and they do

534
00:25:29,920 --> 00:25:36,090
enforce isolation but they also load a

535
00:25:33,490 --> 00:25:38,200
preload which is the one you see on

536
00:25:36,090 --> 00:25:42,240
which you see in you're a part of that

537
00:25:38,200 --> 00:25:45,670
and what this preload is doing is

538
00:25:42,240 --> 00:25:50,310
appending a logger which is used to as

539
00:25:45,670 --> 00:25:52,570
the name suggests to to log information

540
00:25:50,310 --> 00:25:55,300
this is obviously something that it is

541
00:25:52,570 --> 00:25:57,220
required in the render because the the

542
00:25:55,300 --> 00:25:59,020
overall purpose is to actually log

543
00:25:57,220 --> 00:26:01,150
something inside the render so inside

544
00:25:59,020 --> 00:26:06,100
the page that display messages and an

545
00:26:01,150 --> 00:26:07,750
attachment and such but unfortunately if

546
00:26:06,100 --> 00:26:09,939
you have JavaScript the cushion there

547
00:26:07,750 --> 00:26:14,230
then you can repurpose that function so

548
00:26:09,940 --> 00:26:16,300
you see here how this can be abused you

549
00:26:14,230 --> 00:26:18,010
know we have to jump you know for

550
00:26:16,300 --> 00:26:20,740
demonstration purposes we have to jump

551
00:26:18,010 --> 00:26:24,450
from the initial browser window to the

552
00:26:20,740 --> 00:26:27,580
render and then inside the render we can

553
00:26:24,450 --> 00:26:30,250
reconfigure the the formatter and the

554
00:26:27,580 --> 00:26:32,310
transport of the logger to for example

555
00:26:30,250 --> 00:26:35,560
write to a file instead of to console

556
00:26:32,310 --> 00:26:40,030
and at that point you know exploitation

557
00:26:35,560 --> 00:26:44,040
is as easy as revoking the same function

558
00:26:40,030 --> 00:26:44,040
so let's let's look at the demo

559
00:27:05,370 --> 00:27:14,520
all right so this is the app will be

560
00:27:08,160 --> 00:27:19,310
slowly loading I guess yeah and here you

561
00:27:14,520 --> 00:27:23,040
have the developer console of the

562
00:27:19,310 --> 00:27:29,850
primary window so as I said we need to

563
00:27:23,040 --> 00:27:34,080
switch first of all to the webview we

564
00:27:29,850 --> 00:27:35,399
now have the developer tools of the of

565
00:27:34,080 --> 00:27:38,070
the rent that there is actually

566
00:27:35,400 --> 00:27:40,290
containing the messages and so what we

567
00:27:38,070 --> 00:27:43,770
do here it's a kind of three steps so

568
00:27:40,290 --> 00:27:48,840
the first step we just changed the

569
00:27:43,770 --> 00:27:51,360
formatter the second step we set the

570
00:27:48,840 --> 00:27:53,970
transport you can see here too in this

571
00:27:51,360 --> 00:27:57,060
case just to write a file on you know

572
00:27:53,970 --> 00:28:00,330
just write in bash RC and I'm not

573
00:27:57,060 --> 00:28:04,110
overriding and then with this simple

574
00:28:00,330 --> 00:28:07,679
commands we can just trigger a logging

575
00:28:04,110 --> 00:28:10,110
error and so at this point when for

576
00:28:07,680 --> 00:28:12,180
example I open a new terminal you will

577
00:28:10,110 --> 00:28:16,139
actually get a calculator because we

578
00:28:12,180 --> 00:28:18,810
override the file so this is a you know

579
00:28:16,140 --> 00:28:23,460
a first example of a functionality that

580
00:28:18,810 --> 00:28:25,169
you know can be abused even though you

581
00:28:23,460 --> 00:28:32,310
know it is expected to be used within

582
00:28:25,170 --> 00:28:34,800
the render let's now talk about a

583
00:28:32,310 --> 00:28:39,330
different software this code a very

584
00:28:34,800 --> 00:28:43,290
popular messaging app especially for

585
00:28:39,330 --> 00:28:46,310
gamers the isolation in this case is

586
00:28:43,290 --> 00:28:48,600
done directly through a browser window

587
00:28:46,310 --> 00:28:53,010
so the browser window itself doesn't

588
00:28:48,600 --> 00:28:55,949
have primitives enabled but it has you

589
00:28:53,010 --> 00:28:58,680
know a preload and so let's look at the

590
00:28:55,950 --> 00:29:03,360
part of the preload where it's loading

591
00:28:58,680 --> 00:29:06,090
native modules and what this native mojo

592
00:29:03,360 --> 00:29:08,850
is doing it can be used to require local

593
00:29:06,090 --> 00:29:10,379
modules and so by reviewing all the

594
00:29:08,850 --> 00:29:12,090
modules that were present in the

595
00:29:10,380 --> 00:29:14,280
application we found one that was called

596
00:29:12,090 --> 00:29:16,439
xx e8 if you google for that it's a

597
00:29:14,280 --> 00:29:17,389
better child process which is always

598
00:29:16,440 --> 00:29:18,799
promising when

599
00:29:17,389 --> 00:29:22,129
you google and you get these type of

600
00:29:18,799 --> 00:29:24,940
results so in this case is much easier

601
00:29:22,129 --> 00:29:27,498
than the wire examples because you

602
00:29:24,940 --> 00:29:31,479
barely just need to use the

603
00:29:27,499 --> 00:29:31,479
functionality this is kind of exported

604
00:29:32,950 --> 00:29:39,200
so if you think that you know too easy

605
00:29:36,409 --> 00:29:41,269
well let's let's analyze another example

606
00:29:39,200 --> 00:29:43,159
on the same application just the

607
00:29:41,269 --> 00:29:49,039
different version the same preload

608
00:29:43,159 --> 00:29:56,359
script also was importing this module

609
00:29:49,039 --> 00:29:59,059
called IPC what is IPC it's you know if

610
00:29:56,359 --> 00:30:00,499
you look at the code you know right in

611
00:29:59,059 --> 00:30:04,639
the middle you see a PC in the render

612
00:30:00,499 --> 00:30:06,879
send apply and then just below you see a

613
00:30:04,639 --> 00:30:10,039
b surrendur on its passing in advance

614
00:30:06,879 --> 00:30:13,968
this is basically just a proper to the

615
00:30:10,039 --> 00:30:16,729
native IPC that a electron has and it's

616
00:30:13,969 --> 00:30:22,459
you know it's used internally by

617
00:30:16,729 --> 00:30:24,709
electron itself so to understand what is

618
00:30:22,459 --> 00:30:27,349
the implication of that let's let's do a

619
00:30:24,709 --> 00:30:30,649
quick recap of how IPC works for

620
00:30:27,349 --> 00:30:32,239
electron so in election you know you

621
00:30:30,649 --> 00:30:35,589
need to communicate between main and

622
00:30:32,239 --> 00:30:38,539
renders and the way it's done is through

623
00:30:35,589 --> 00:30:40,609
synchronous or asynchronous messages so

624
00:30:38,539 --> 00:30:43,129
let's start with the synchronous the

625
00:30:40,609 --> 00:30:46,339
easiest one on the main we define a

626
00:30:43,129 --> 00:30:48,349
listener that's the you know synchronous

627
00:30:46,339 --> 00:30:49,729
message IPC on synchronous message and

628
00:30:48,349 --> 00:30:51,649
on the render

629
00:30:49,729 --> 00:30:55,399
we just need we can just send a

630
00:30:51,649 --> 00:30:58,458
synchronous message through a sensing

631
00:30:55,399 --> 00:31:00,978
and the important things here for you to

632
00:30:58,459 --> 00:31:03,469
remember is that the only thing that

633
00:31:00,979 --> 00:31:07,629
really matters is the channel name which

634
00:31:03,469 --> 00:31:10,429
is the first argument of those functions

635
00:31:07,629 --> 00:31:12,408
you know in a similar way a synchronous

636
00:31:10,429 --> 00:31:13,399
messages works but of course it's a

637
00:31:12,409 --> 00:31:19,209
synchronous so you need to have

638
00:31:13,399 --> 00:31:21,829
listeners on both render and main and

639
00:31:19,209 --> 00:31:24,739
there is actually no separation of

640
00:31:21,829 --> 00:31:27,379
channels even in the internal electronic

641
00:31:24,739 --> 00:31:29,509
code so the one at the bottom is

642
00:31:27,379 --> 00:31:30,449
actually the example of how election

643
00:31:29,509 --> 00:31:33,060
implemented

644
00:31:30,450 --> 00:31:36,000
the alert box so when you have what you

645
00:31:33,060 --> 00:31:39,450
do window alert on a render what the

646
00:31:36,000 --> 00:31:41,520
render does it sends a message of type

647
00:31:39,450 --> 00:31:43,050
you know of channel election underscore

648
00:31:41,520 --> 00:31:45,180
browser will underscore window

649
00:31:43,050 --> 00:31:49,680
underscore alert and that's the code

650
00:31:45,180 --> 00:31:52,290
executed on the main what that means is

651
00:31:49,680 --> 00:31:54,420
that we can actually leverage you know

652
00:31:52,290 --> 00:31:56,970
the internal electron I P C and so here

653
00:31:54,420 --> 00:32:00,150
is an example of how you would basically

654
00:31:56,970 --> 00:32:02,400
craft some JavaScript to send IPC

655
00:32:00,150 --> 00:32:05,910
messages they would trigger the

656
00:32:02,400 --> 00:32:09,960
secretion of of in this case of a

657
00:32:05,910 --> 00:32:12,000
calculator you know we basically used in

658
00:32:09,960 --> 00:32:15,030
the native electron functionality so we

659
00:32:12,000 --> 00:32:16,890
do a require by signing a channel like

660
00:32:15,030 --> 00:32:22,440
message to the channel electron browser

661
00:32:16,890 --> 00:32:26,580
require and and and so on right so so

662
00:32:22,440 --> 00:32:29,820
far so good but this is obviously it has

663
00:32:26,580 --> 00:32:32,070
one one point which is you need to be

664
00:32:29,820 --> 00:32:34,050
able to send IPC messages which normally

665
00:32:32,070 --> 00:32:36,750
it's not available on the render because

666
00:32:34,050 --> 00:32:38,970
you don't have access to the first you

667
00:32:36,750 --> 00:32:43,010
know line so they require electron I be

668
00:32:38,970 --> 00:32:46,620
surrender but back to the disk or bark

669
00:32:43,010 --> 00:32:51,390
you know if you remember we actually had

670
00:32:46,620 --> 00:32:53,850
an end layer of that IPC this bad if I

671
00:32:51,390 --> 00:32:58,200
we didn't have you know a way to obtain

672
00:32:53,850 --> 00:32:59,550
actually a references and so you know

673
00:32:58,200 --> 00:33:01,590
we've been thinking okay how can we can

674
00:32:59,550 --> 00:33:03,030
abuse that and then you know pretty

675
00:33:01,590 --> 00:33:07,620
quickly realize that we actually don't

676
00:33:03,030 --> 00:33:09,180
need to ten references so an exploit for

677
00:33:07,620 --> 00:33:12,120
this vulnerability it actually just

678
00:33:09,180 --> 00:33:14,700
involves using in this case was a

679
00:33:12,120 --> 00:33:18,570
synchronous messages where we first send

680
00:33:14,700 --> 00:33:20,220
a message to the browser require child

681
00:33:18,570 --> 00:33:22,350
process will be in the stack of the

682
00:33:20,220 --> 00:33:24,710
object and then we just simply try to

683
00:33:22,350 --> 00:33:27,240
send another message to call and

684
00:33:24,710 --> 00:33:29,280
obviously this call will be executed on

685
00:33:27,240 --> 00:33:32,310
object there's nothing to do with child

686
00:33:29,280 --> 00:33:35,220
process but we don't care as long as

687
00:33:32,310 --> 00:33:38,730
eventually will actually be invoked on a

688
00:33:35,220 --> 00:33:41,300
child process all right so let's look at

689
00:33:38,730 --> 00:33:41,300
the two demos

690
00:33:48,100 --> 00:33:53,209
hopefully so this core the patching and

691
00:33:51,409 --> 00:33:55,730
upgrading is pretty aggressive so

692
00:33:53,210 --> 00:34:00,019
hopefully they haven't patch the up that

693
00:33:55,730 --> 00:34:04,659
I have locally installed here so the

694
00:34:00,019 --> 00:34:07,100
first one is you know the native modules

695
00:34:04,659 --> 00:34:09,589
you know we're doing nothing else than

696
00:34:07,100 --> 00:34:12,109
just native modules required the modules

697
00:34:09,589 --> 00:34:15,049
and this is the modules that is bundled

698
00:34:12,109 --> 00:34:16,369
with the app and so you know obviously

699
00:34:15,050 --> 00:34:20,000
we execute this one and we get a

700
00:34:16,369 --> 00:34:23,270
calculator it is in a different version

701
00:34:20,000 --> 00:34:25,219
so for the other one I'm gonna show you

702
00:34:23,270 --> 00:34:33,969
a quick video not to have too many

703
00:34:25,219 --> 00:34:47,750
virtual machines so this is again scored

704
00:34:33,969 --> 00:34:49,668
you can we can go through the so this is

705
00:34:47,750 --> 00:34:55,460
a pretty much the one I was on the

706
00:34:49,668 --> 00:34:58,160
slides we are using the require and and

707
00:34:55,460 --> 00:35:00,650
then that object will be allocated and

708
00:34:58,160 --> 00:35:02,450
just waiting for us to be executed and

709
00:35:00,650 --> 00:35:04,640
of course it's all client-side and it's

710
00:35:02,450 --> 00:35:08,000
all triggered for JavaScript so it's

711
00:35:04,640 --> 00:35:10,299
it's pretty fast and even too fast in my

712
00:35:08,000 --> 00:35:10,300
videos

713
00:35:17,400 --> 00:35:22,620
and I another aspect and so here we go

714
00:35:20,430 --> 00:35:23,520
into the third categories of why preload

715
00:35:22,620 --> 00:35:26,850
can be bad

716
00:35:23,520 --> 00:35:28,650
it's around sandbox bypasses so not

717
00:35:26,850 --> 00:35:30,569
integration is usually not enough like

718
00:35:28,650 --> 00:35:33,810
if you have something that comes from

719
00:35:30,570 --> 00:35:36,210
untrusted resources like you load the

720
00:35:33,810 --> 00:35:38,910
remote page you do really need to use

721
00:35:36,210 --> 00:35:43,040
sandbox and sandbox makes possible to

722
00:35:38,910 --> 00:35:43,040
have a chromium OS sandbox

723
00:35:43,760 --> 00:35:49,050
it used to be necessary to specify

724
00:35:47,010 --> 00:35:52,080
command line argument it's not true

725
00:35:49,050 --> 00:35:54,390
anymore so with you know a recent

726
00:35:52,080 --> 00:35:57,210
version of electron you can have up

727
00:35:54,390 --> 00:35:59,400
enable sandbox and this will be the same

728
00:35:57,210 --> 00:36:02,460
code that chromium is using for sandbox

729
00:35:59,400 --> 00:36:04,200
things with one caveat which is there

730
00:36:02,460 --> 00:36:08,160
are obviously all the additional IPC

731
00:36:04,200 --> 00:36:09,930
messages that electron uses so if you

732
00:36:08,160 --> 00:36:15,649
have a browser vulnerability and you

733
00:36:09,930 --> 00:36:18,930
compromise a render it is most likely

734
00:36:15,650 --> 00:36:21,390
you know much easier to actually do a

735
00:36:18,930 --> 00:36:26,700
sandwich escape as it is on a native

736
00:36:21,390 --> 00:36:29,670
chromium but nevertheless this is you

737
00:36:26,700 --> 00:36:31,980
know the best it gets as to getting a

738
00:36:29,670 --> 00:36:36,180
render that is you know equivalent to a

739
00:36:31,980 --> 00:36:38,070
browser however if you have a preload

740
00:36:36,180 --> 00:36:41,160
again that it's exposing some of those

741
00:36:38,070 --> 00:36:44,220
primitives we go back to the the problem

742
00:36:41,160 --> 00:36:46,379
is around introducing objects so at the

743
00:36:44,220 --> 00:36:50,160
bottom for example we see cases where if

744
00:36:46,380 --> 00:36:54,540
you expose again the app object or if

745
00:36:50,160 --> 00:36:56,370
you expose the IPC render and it is

746
00:36:54,540 --> 00:36:58,620
possible even if you have sandbox if you

747
00:36:56,370 --> 00:37:01,080
explicitly do it in the preload then we

748
00:36:58,620 --> 00:37:05,339
turn back to the ability to send

749
00:37:01,080 --> 00:37:07,620
arbitrary IPC which again it can be

750
00:37:05,340 --> 00:37:11,660
trigger for you know can be used to

751
00:37:07,620 --> 00:37:15,089
trigger native electron functions and

752
00:37:11,660 --> 00:37:20,279
finally let's cover missing context

753
00:37:15,090 --> 00:37:22,260
isolation if there is something you know

754
00:37:20,280 --> 00:37:24,720
you need to be in back home today is if

755
00:37:22,260 --> 00:37:27,600
you have an electron app and you don't

756
00:37:24,720 --> 00:37:28,980
have context isolation enable it's

757
00:37:27,600 --> 00:37:30,210
basically like not having node

758
00:37:28,980 --> 00:37:34,080
integration

759
00:37:30,210 --> 00:37:36,840
disable after you know some time I was

760
00:37:34,080 --> 00:37:39,029
able to modify the security page of

761
00:37:36,840 --> 00:37:40,680
electron and it's called native

762
00:37:39,030 --> 00:37:42,690
capability in your responsibility to

763
00:37:40,680 --> 00:37:44,640
actually explicitly mention that you

764
00:37:42,690 --> 00:37:47,850
need to enable context isolation

765
00:37:44,640 --> 00:37:50,220
so to recap if you don't have context

766
00:37:47,850 --> 00:37:56,580
isolation it's like you have a permanent

767
00:37:50,220 --> 00:37:58,379
node integration bypass and this is a by

768
00:37:56,580 --> 00:38:02,880
itself I would say a completely new

769
00:37:58,380 --> 00:38:08,790
class of vulnerabilities Masato is you

770
00:38:02,880 --> 00:38:10,710
know all credit goes to him and thanks

771
00:38:08,790 --> 00:38:15,810
to his work election Lee introduced this

772
00:38:10,710 --> 00:38:17,160
this new setting for the context of

773
00:38:15,810 --> 00:38:19,620
preload this is also very interesting

774
00:38:17,160 --> 00:38:22,290
and so that's what we'll be covering

775
00:38:19,620 --> 00:38:24,359
today it's how can you use the missing

776
00:38:22,290 --> 00:38:31,200
context isolation in the context of

777
00:38:24,360 --> 00:38:33,720
preload and so the idea is that if you

778
00:38:31,200 --> 00:38:35,910
don't know if context isolation render

779
00:38:33,720 --> 00:38:38,459
and preload share the same context so

780
00:38:35,910 --> 00:38:41,670
changes in the render affects the code

781
00:38:38,460 --> 00:38:44,250
that it's been you know defining

782
00:38:41,670 --> 00:38:45,990
preloads what that means is that we

783
00:38:44,250 --> 00:38:51,300
cannot guarantee the integrity of that

784
00:38:45,990 --> 00:38:54,680
code and again I will show you with like

785
00:38:51,300 --> 00:38:57,990
a real live app that has been redacted

786
00:38:54,680 --> 00:39:00,089
trading app where it would have a single

787
00:38:57,990 --> 00:39:02,250
browser window with both not integration

788
00:39:00,090 --> 00:39:04,530
disabled and sandbox which again you

789
00:39:02,250 --> 00:39:08,300
would expect to be the best security

790
00:39:04,530 --> 00:39:11,280
configuration out there and it was using

791
00:39:08,300 --> 00:39:16,310
the most recent electron frame or at

792
00:39:11,280 --> 00:39:19,260
that time and if you look at the preload

793
00:39:16,310 --> 00:39:21,270
you know we had a code similar to this

794
00:39:19,260 --> 00:39:23,550
one I was a bit you know it was a bit a

795
00:39:21,270 --> 00:39:25,290
little bit refactor with changing a

796
00:39:23,550 --> 00:39:28,080
variable name and such but it was

797
00:39:25,290 --> 00:39:30,570
basically the same code I was there and

798
00:39:28,080 --> 00:39:32,880
this is actually trying to prevent the

799
00:39:30,570 --> 00:39:34,320
common channels right this is exactly

800
00:39:32,880 --> 00:39:36,870
trying to prevent a vulnerability that

801
00:39:34,320 --> 00:39:37,710
we found on this card where you're

802
00:39:36,870 --> 00:39:40,920
valuating

803
00:39:37,710 --> 00:39:42,040
what is the channel that the render is

804
00:39:40,920 --> 00:39:45,490
sending messages to

805
00:39:42,040 --> 00:39:48,310
and it looks good unless you realize

806
00:39:45,490 --> 00:39:50,049
that you don't have context isolation so

807
00:39:48,310 --> 00:39:54,070
if you don't have a context isolation

808
00:39:50,050 --> 00:39:56,680
you can use prototype pollution to

809
00:39:54,070 --> 00:39:59,500
override in this case they include

810
00:39:56,680 --> 00:40:01,720
function so if you look back you see

811
00:39:59,500 --> 00:40:04,690
here there is an if statement where we

812
00:40:01,720 --> 00:40:07,359
are checking if the specific channel

813
00:40:04,690 --> 00:40:10,540
it's part of the IPC whitelist and it's

814
00:40:07,360 --> 00:40:14,470
done with the native includes you know

815
00:40:10,540 --> 00:40:16,660
array includes function but this can be

816
00:40:14,470 --> 00:40:18,790
bypassed we by simply doing a try

817
00:40:16,660 --> 00:40:23,529
prototype includes they always return

818
00:40:18,790 --> 00:40:25,600
true and after that just invoke your

819
00:40:23,530 --> 00:40:27,580
code and in this case is again

820
00:40:25,600 --> 00:40:29,860
leveraging the same technique and

821
00:40:27,580 --> 00:40:36,310
basically the same code that we prepared

822
00:40:29,860 --> 00:40:38,380
for the other IPC abuse just as a matter

823
00:40:36,310 --> 00:40:40,779
of reference you also need to know that

824
00:40:38,380 --> 00:40:44,230
prototype pollution and the probe around

825
00:40:40,780 --> 00:40:50,230
context isolation effects things outside

826
00:40:44,230 --> 00:40:52,900
of preload as well so masado has done

827
00:40:50,230 --> 00:40:55,510
you know an amazing research you will

828
00:40:52,900 --> 00:40:57,730
you have the slides here the bottom line

829
00:40:55,510 --> 00:41:01,180
is that you can overwrite the Col

830
00:40:57,730 --> 00:41:04,210
function and basically one of those

831
00:41:01,180 --> 00:41:06,100
argument of the cool function at some

832
00:41:04,210 --> 00:41:08,620
point of the application execution is

833
00:41:06,100 --> 00:41:10,810
actually a process object and so you can

834
00:41:08,620 --> 00:41:17,259
leverage the process object to get back

835
00:41:10,810 --> 00:41:19,990
access to node is an example of you know

836
00:41:17,260 --> 00:41:21,790
an application is vulnerable to that and

837
00:41:19,990 --> 00:41:23,410
again this is apply to basically all

838
00:41:21,790 --> 00:41:28,210
application that don't use context

839
00:41:23,410 --> 00:41:32,859
isolation with some caveats but most of

840
00:41:28,210 --> 00:41:36,130
them is matter most which is slack clone

841
00:41:32,860 --> 00:41:40,810
type of application use a webview inside

842
00:41:36,130 --> 00:41:45,090
a browser window and so I will be

843
00:41:40,810 --> 00:41:45,090
showing here briefly the demo

844
00:41:56,340 --> 00:42:03,120
so here we have matter most this bag is

845
00:42:00,660 --> 00:42:06,750
not patched yet they are aware of the

846
00:42:03,120 --> 00:42:09,150
issue in enabling context as relations

847
00:42:06,750 --> 00:42:11,570
not trivial

848
00:42:09,150 --> 00:42:20,240
so what we're doing here we are doing

849
00:42:11,570 --> 00:42:24,270
prototype call where we are overriding

850
00:42:20,240 --> 00:42:26,399
the basically we are piggybacking on the

851
00:42:24,270 --> 00:42:27,750
arguments and at some point is the

852
00:42:26,400 --> 00:42:30,060
cushion will actually bring as the

853
00:42:27,750 --> 00:42:33,000
argument a process and once we have a

854
00:42:30,060 --> 00:42:38,029
process we can use main module require

855
00:42:33,000 --> 00:42:41,460
to get access to other modules and so

856
00:42:38,030 --> 00:42:46,080
the first part is actually giving access

857
00:42:41,460 --> 00:42:47,670
to to do is basically over run in to

858
00:42:46,080 --> 00:42:50,040
improve that pollution and then the last

859
00:42:47,670 --> 00:42:53,010
part is triggering in advance in this

860
00:42:50,040 --> 00:42:55,080
case they reload which trigger the

861
00:42:53,010 --> 00:43:06,660
execution of the call with one or the

862
00:42:55,080 --> 00:43:09,660
argument being a process so what are the

863
00:43:06,660 --> 00:43:11,970
solution around context isolation or

864
00:43:09,660 --> 00:43:13,230
rather if you enable context isolation

865
00:43:11,970 --> 00:43:16,080
as they demonstrate at the very very

866
00:43:13,230 --> 00:43:19,740
beginning you can't export things to the

867
00:43:16,080 --> 00:43:22,350
window so how do you do well for the

868
00:43:19,740 --> 00:43:26,370
preload problem specifically you can use

869
00:43:22,350 --> 00:43:28,350
VM context which basically create you

870
00:43:26,370 --> 00:43:31,049
can programmatically create a new

871
00:43:28,350 --> 00:43:32,700
context this will solve the problem of

872
00:43:31,050 --> 00:43:36,360
preload it will not solve the problem

873
00:43:32,700 --> 00:43:38,009
around context isolation affecting the

874
00:43:36,360 --> 00:43:39,870
electron code but it's better than

875
00:43:38,010 --> 00:43:42,390
nothing and it's easy to implement

876
00:43:39,870 --> 00:43:45,240
because it's it's just about adding code

877
00:43:42,390 --> 00:43:47,190
to the preload the real solution to this

878
00:43:45,240 --> 00:43:52,259
problem is having context isolation on

879
00:43:47,190 --> 00:43:55,410
and using post messages instead of just

880
00:43:52,260 --> 00:43:57,990
appending object to the window object if

881
00:43:55,410 --> 00:43:59,399
you have very complex messages that you

882
00:43:57,990 --> 00:44:02,100
need to pass around or very complex

883
00:43:59,400 --> 00:44:04,380
object there is electron balance which

884
00:44:02,100 --> 00:44:09,750
is a module that allow you to serialize

885
00:44:04,380 --> 00:44:11,840
and deserialize objects so to go through

886
00:44:09,750 --> 00:44:14,190
the conclusion

887
00:44:11,840 --> 00:44:16,080
it is possible to build electron a

888
00:44:14,190 --> 00:44:17,790
platoon that are secure you really need

889
00:44:16,080 --> 00:44:19,830
to know the framework it's evolving very

890
00:44:17,790 --> 00:44:22,640
fast so you do need to spend time

891
00:44:19,830 --> 00:44:25,080
figuring out how things are changing and

892
00:44:22,640 --> 00:44:27,180
what are the new settings that may be

893
00:44:25,080 --> 00:44:33,630
relevant for security for example like

894
00:44:27,180 --> 00:44:35,250
context isolation you know the first you

895
00:44:33,630 --> 00:44:38,910
know best advice I can give you is do

896
00:44:35,250 --> 00:44:42,410
not load do not load remote content the

897
00:44:38,910 --> 00:44:46,410
entry point is always navigating to some

898
00:44:42,410 --> 00:44:48,870
attacker provided page in order to

899
00:44:46,410 --> 00:44:50,940
execute JavaScript so XSS and and all

900
00:44:48,870 --> 00:44:55,140
you know the old-school vulnerability

901
00:44:50,940 --> 00:44:57,150
still apply so use modern jazz framework

902
00:44:55,140 --> 00:44:58,650
that already protect against that and

903
00:44:57,150 --> 00:45:01,320
then on top of that you need to have

904
00:44:58,650 --> 00:45:03,300
secure configuration but after this

905
00:45:01,320 --> 00:45:05,700
presentation you awfully understand you

906
00:45:03,300 --> 00:45:07,560
also need to pay attention of what you

907
00:45:05,700 --> 00:45:12,210
are exposing in preload particular

908
00:45:07,560 --> 00:45:14,580
around dangerous primitives and IPC we

909
00:45:12,210 --> 00:45:18,420
released a tool we just released a new

910
00:45:14,580 --> 00:45:20,910
version that has a bit more checks on

911
00:45:18,420 --> 00:45:23,250
onager on our github page so you can use

912
00:45:20,910 --> 00:45:27,839
this tool to scan for basically those

913
00:45:23,250 --> 00:45:32,340
common vulnerabilities and with that my

914
00:45:27,840 --> 00:45:34,110
you know we just 45 minutes we have five

915
00:45:32,340 --> 00:45:37,190
more minutes so we can I can take one

916
00:45:34,110 --> 00:45:37,190
more question if there is

917
00:45:46,070 --> 00:45:59,800
no questions let's see if we can get at

918
00:45:52,220 --> 00:46:02,330
least one cos no it's it's not like it's

919
00:45:59,800 --> 00:46:04,640
it there's no there is no solution

920
00:46:02,330 --> 00:46:07,310
meaning it's the latest version is still

921
00:46:04,640 --> 00:46:10,609
vulnerable the reason it's in my

922
00:46:07,310 --> 00:46:12,890
presentation it's a public bug so I

923
00:46:10,610 --> 00:46:14,410
didn't see the need of of who's getting

924
00:46:12,890 --> 00:46:17,359
something it's on the internet already

925
00:46:14,410 --> 00:46:19,759
but the problematics around the context

926
00:46:17,360 --> 00:46:21,410
isolation is that people have been

927
00:46:19,760 --> 00:46:24,650
traditionally appending stuff to the

928
00:46:21,410 --> 00:46:26,509
window object and so migrating from this

929
00:46:24,650 --> 00:46:29,420
design this type of designing

930
00:46:26,510 --> 00:46:34,210
application it's not a one line code

931
00:46:29,420 --> 00:46:38,540
change so it does require some time and

932
00:46:34,210 --> 00:46:42,440
you know you no matter most approach is

933
00:46:38,540 --> 00:46:44,600
because it does rely on having an XSS or

934
00:46:42,440 --> 00:46:46,880
having a way to redirect the user

935
00:46:44,600 --> 00:46:50,330
execution to an arbitrary JavaScript it

936
00:46:46,880 --> 00:46:54,380
it is not an exploit a vulnerability by

937
00:46:50,330 --> 00:46:57,110
itself there will be you know - thing is

938
00:46:54,380 --> 00:46:58,670
that they will be fixing this bug again

939
00:46:57,110 --> 00:47:02,690
there's an open ticket and I see some

940
00:46:58,670 --> 00:47:11,990
traction I think it just it does involve

941
00:47:02,690 --> 00:47:15,130
redesigning a bit of the preload not

942
00:47:11,990 --> 00:47:15,129
really no it's

943
00:47:17,900 --> 00:47:27,479
any workaround would rely on modifying

944
00:47:21,299 --> 00:47:31,319
the application so if you enable context

945
00:47:27,479 --> 00:47:32,848
isolation the app will break so it's not

946
00:47:31,319 --> 00:47:34,890
even possible to say okay I want to just

947
00:47:32,849 --> 00:47:37,069
lose some features that just not

948
00:47:34,890 --> 00:47:37,069
possible

949
00:47:40,339 --> 00:47:47,400
thanks for asking

950
00:47:41,849 --> 00:47:50,020
at least the question oh and thanks a

951
00:47:47,400 --> 00:47:57,069
lot for for listening

952
00:47:50,020 --> 00:47:57,069
[Applause]

