1
00:00:00,030 --> 00:00:03,418
all right good morning<font color="#CCCCCC"> everybody I'm</font>

2
00:00:01,469 --> 00:00:05,490
Craig<font color="#CCCCCC"> Young and I'm going to talk to you</font>

3
00:00:03,419 --> 00:00:09,559
about<font color="#E5E5E5"> zombie poodle</font><font color="#CCCCCC"> Goldendoodle and</font>

4
00:00:05,490 --> 00:00:12,450
he'll tell us 1.3 can save us<font color="#E5E5E5"> all so a</font>

5
00:00:09,559 --> 00:00:13,829
<font color="#E5E5E5">little bit about me for a second the</font>

6
00:00:12,450 --> 00:00:16,378
<font color="#E5E5E5">principal security researcher with</font>

7
00:00:13,830 --> 00:00:18,750
tripwire hurt and so I developed<font color="#E5E5E5"> content</font>

8
00:00:16,379 --> 00:00:21,090
<font color="#E5E5E5">for the tripwire IP 360 vulnerability</font>

9
00:00:18,750 --> 00:00:21,750
scanner<font color="#E5E5E5"> particularly various remote</font>

10
00:00:21,090 --> 00:00:24,630
checks

11
00:00:21,750 --> 00:00:26,939
I'm also an InfoSec trainer<font color="#CCCCCC"> going to be</font>

12
00:00:24,630 --> 00:00:28,590
training at blackhat USA this year as

13
00:00:26,939 --> 00:00:30,900
well as<font color="#E5E5E5"> the secretary conference in</font>

14
00:00:28,590 --> 00:00:33,090
Toronto<font color="#CCCCCC"> but most importantly I'm a</font>

15
00:00:30,900 --> 00:00:35,280
hacker<font color="#E5E5E5"> and what I'm going to talk to you</font>

16
00:00:33,090 --> 00:00:38,790
about today<font color="#E5E5E5"> is some of the research</font><font color="#CCCCCC"> I've</font>

17
00:00:35,280 --> 00:00:40,530
done<font color="#E5E5E5"> in that capacity</font><font color="#CCCCCC"> so what we'll</font><font color="#E5E5E5"> talk</font>

18
00:00:38,790 --> 00:00:43,640
<font color="#CCCCCC">about here</font><font color="#E5E5E5"> I'm going to go over</font><font color="#CCCCCC"> a little</font>

19
00:00:40,530 --> 00:00:47,190
<font color="#CCCCCC">bit of the</font><font color="#E5E5E5"> basics of how TLS works and</font>

20
00:00:43,640 --> 00:00:48,690
<font color="#E5E5E5">CBC mode encryption specifically we'll</font>

21
00:00:47,190 --> 00:00:50,760
<font color="#E5E5E5">look at how padding</font><font color="#CCCCCC"> Oracle's get</font>

22
00:00:48,690 --> 00:00:52,739
exploited<font color="#CCCCCC"> how to scan</font><font color="#E5E5E5"> for padding</font>

23
00:00:50,760 --> 00:00:54,719
Oracle's and specifically how I was able

24
00:00:52,739 --> 00:00:56,669
<font color="#E5E5E5">to make my own tool for scanning for</font>

25
00:00:54,719 --> 00:01:00,120
padding Oracle's that<font color="#E5E5E5"> were previously</font>

26
00:00:56,670 --> 00:01:01,980
unknown<font color="#CCCCCC"> we'll then go over</font><font color="#E5E5E5"> there some of</font>

27
00:01:00,120 --> 00:01:04,378
the<font color="#E5E5E5"> findings</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> I had including zombie</font>

28
00:01:01,980 --> 00:01:07,020
poodle and<font color="#E5E5E5"> golden doodle and wrap it all</font>

29
00:01:04,379 --> 00:01:10,590
up<font color="#E5E5E5"> by telling you how TLS 1.3 is going</font>

30
00:01:07,020 --> 00:01:12,810
to be your<font color="#CCCCCC"> Savior so at basic level</font>

31
00:01:10,590 --> 00:01:14,750
<font color="#E5E5E5">everybody</font><font color="#CCCCCC"> should know that</font><font color="#E5E5E5"> TLS is a</font>

32
00:01:12,810 --> 00:01:17,159
protocol for<font color="#E5E5E5"> being able to establish</font>

33
00:01:14,750 --> 00:01:21,170
<font color="#CCCCCC">some private communication channel</font>

34
00:01:17,159 --> 00:01:24,299
between<font color="#E5E5E5"> two untrusted peers</font><font color="#CCCCCC"> across an</font>

35
00:01:21,170 --> 00:01:26,460
untrusted link<font color="#E5E5E5"> so the way this starts is</font>

36
00:01:24,299 --> 00:01:29,280
<font color="#CCCCCC">that a client is going to send out</font><font color="#E5E5E5"> a</font>

37
00:01:26,460 --> 00:01:31,020
client<font color="#CCCCCC"> hello message</font><font color="#E5E5E5"> the hello</font><font color="#CCCCCC"> message</font>

38
00:01:29,280 --> 00:01:33,299
is going<font color="#CCCCCC"> to contain a list of cipher</font>

39
00:01:31,020 --> 00:01:35,729
<font color="#E5E5E5">suites that the client says I speak</font>

40
00:01:33,299 --> 00:01:37,950
these ciphers<font color="#CCCCCC"> and I have these protocols</font>

41
00:01:35,729 --> 00:01:40,920
<font color="#E5E5E5">that</font><font color="#CCCCCC"> I support server is going to</font>

42
00:01:37,950 --> 00:01:43,799
respond<font color="#E5E5E5"> by selecting a protocol</font><font color="#CCCCCC"> version</font>

43
00:01:40,920 --> 00:01:47,009
and a cipher suite<font color="#E5E5E5"> but what is</font><font color="#CCCCCC"> the</font>

44
00:01:43,799 --> 00:01:49,009
<font color="#E5E5E5">cipher</font><font color="#CCCCCC"> suite exactly so this</font><font color="#E5E5E5"> is a set of</font>

45
00:01:47,009 --> 00:01:51,329
algorithms that<font color="#CCCCCC"> are</font><font color="#E5E5E5"> going to define the</font>

46
00:01:49,009 --> 00:01:53,790
secure communication for the<font color="#E5E5E5"> TLS</font>

47
00:01:51,329 --> 00:01:55,649
protocol so<font color="#E5E5E5"> namely you're going to have</font>

48
00:01:53,790 --> 00:01:58,049
an algorithm<font color="#CCCCCC"> for key exchange and</font>

49
00:01:55,649 --> 00:02:01,290
authentication<font color="#E5E5E5"> message encryption and</font>

50
00:01:58,049 --> 00:02:03,180
also message authentication<font color="#E5E5E5"> for the</font>

51
00:02:01,290 --> 00:02:05,700
purposes<font color="#CCCCCC"> of this talk though</font><font color="#E5E5E5"> we're going</font>

52
00:02:03,180 --> 00:02:07,320
to be<font color="#E5E5E5"> looking at message encryption</font><font color="#CCCCCC"> this</font>

53
00:02:05,700 --> 00:02:10,440
is because we're<font color="#CCCCCC"> looking at how to</font>

54
00:02:07,320 --> 00:02:11,579
decrypt packets<font color="#E5E5E5"> from HTTP sessions so</font>

55
00:02:10,440 --> 00:02:12,989
obviously the encryption<font color="#E5E5E5"> and the</font>

56
00:02:11,580 --> 00:02:13,890
decryption<font color="#CCCCCC"> are going to be the most</font>

57
00:02:12,989 --> 00:02:15,420
relevant

58
00:02:13,890 --> 00:02:18,480
so to talk about<font color="#E5E5E5"> that</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> need to</font>

59
00:02:15,420 --> 00:02:21,329
understand<font color="#CCCCCC"> cipher types</font><font color="#E5E5E5"> so we've got</font>

60
00:02:18,480 --> 00:02:23,010
block ciphers<font color="#CCCCCC"> and stream ciphers</font><font color="#E5E5E5"> stream</font>

61
00:02:21,330 --> 00:02:26,130
ciphers would be like your RC<font color="#E5E5E5"> for</font>

62
00:02:23,010 --> 00:02:28,410
<font color="#CCCCCC">cha-cha</font><font color="#E5E5E5"> 20 but your block ciphers are</font>

63
00:02:26,130 --> 00:02:29,820
what we're talking<font color="#CCCCCC"> about</font><font color="#E5E5E5"> today and the</font>

64
00:02:28,410 --> 00:02:33,570
ones<font color="#E5E5E5"> that</font><font color="#CCCCCC"> everybody</font><font color="#E5E5E5"> should be familiar</font>

65
00:02:29,820 --> 00:02:36,180
<font color="#CCCCCC">with our AES and des in this regard</font><font color="#E5E5E5"> what</font>

66
00:02:33,570 --> 00:02:38,310
I mean<font color="#E5E5E5"> by a block cipher</font><font color="#CCCCCC"> is that it's</font>

67
00:02:36,180 --> 00:02:41,790
only going<font color="#E5E5E5"> to operate on fixed length</font>

68
00:02:38,310 --> 00:02:44,760
<font color="#E5E5E5">blocks so for DES you've got 64-bit</font>

69
00:02:41,790 --> 00:02:49,980
blocks for AES you've got<font color="#E5E5E5"> 16 byte blocks</font>

70
00:02:44,760 --> 00:02:52,109
<font color="#E5E5E5">128 bits and if you have less than</font><font color="#CCCCCC"> a</font>

71
00:02:49,980 --> 00:02:54,209
<font color="#E5E5E5">block you're going to need to fill it</font>

72
00:02:52,110 --> 00:02:56,910
with<font color="#E5E5E5"> some</font><font color="#CCCCCC"> extra data that</font><font color="#E5E5E5"> data is</font>

73
00:02:54,209 --> 00:02:58,890
referred to as padding when<font color="#E5E5E5"> you have</font>

74
00:02:56,910 --> 00:03:00,989
more<font color="#E5E5E5"> than one block of data however</font>

75
00:02:58,890 --> 00:03:04,890
<font color="#E5E5E5">you're going to need to define a mode of</font>

76
00:03:00,989 --> 00:03:08,730
operation<font color="#E5E5E5"> for the cipher so there are a</font>

77
00:03:04,890 --> 00:03:11,279
<font color="#CCCCCC">few of these existing CBC ECB electronic</font>

78
00:03:08,730 --> 00:03:14,250
codebook counter mode but the one that

79
00:03:11,280 --> 00:03:16,950
we're focusing on today<font color="#E5E5E5"> is CBC or cipher</font>

80
00:03:14,250 --> 00:03:19,230
block chaining<font color="#E5E5E5"> you can see kind</font><font color="#CCCCCC"> of a</font>

81
00:03:16,950 --> 00:03:21,630
<font color="#E5E5E5">diagram of</font><font color="#CCCCCC"> how this works this is</font>

82
00:03:19,230 --> 00:03:23,940
borrowed from Wikipedia<font color="#E5E5E5"> basically though</font>

83
00:03:21,630 --> 00:03:26,220
as you encrypt you're going to be

84
00:03:23,940 --> 00:03:29,430
binding<font color="#E5E5E5"> things back through XOR with the</font>

85
00:03:26,220 --> 00:03:31,440
previous ciphertext<font color="#E5E5E5"> in</font><font color="#CCCCCC"> a chain we'll</font><font color="#E5E5E5"> get</font>

86
00:03:29,430 --> 00:03:34,070
into that<font color="#E5E5E5"> in</font><font color="#CCCCCC"> more detail the block</font>

87
00:03:31,440 --> 00:03:37,260
diagram is<font color="#E5E5E5"> a little confusing so an</font>

88
00:03:34,070 --> 00:03:40,799
<font color="#E5E5E5">example of how this works</font><font color="#CCCCCC"> let's say</font>

89
00:03:37,260 --> 00:03:43,500
we've got<font color="#E5E5E5"> an HTTP request</font><font color="#CCCCCC"> it's this</font>

90
00:03:40,799 --> 00:03:45,540
basic get request<font color="#E5E5E5"> we're going to use AES</font>

91
00:03:43,500 --> 00:03:48,959
encryption for it so it means that<font color="#CCCCCC"> we've</font>

92
00:03:45,540 --> 00:03:51,000
got<font color="#CCCCCC"> 16 byte blocks</font><font color="#E5E5E5"> that we're going to</font>

93
00:03:48,959 --> 00:03:54,299
<font color="#E5E5E5">be dealing</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> and I've set</font><font color="#CCCCCC"> aside a</font>

94
00:03:51,000 --> 00:03:55,860
matrix of<font color="#CCCCCC"> eight of these blocks</font><font color="#E5E5E5"> as a</font>

95
00:03:54,299 --> 00:03:59,400
prediction<font color="#CCCCCC"> of</font><font color="#E5E5E5"> how much data</font><font color="#CCCCCC"> we'll need</font>

96
00:03:55,860 --> 00:04:01,170
so first we'll fill in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> request we</font>

97
00:03:59,400 --> 00:04:02,820
give this color to indicate<font color="#E5E5E5"> these are</font>

98
00:04:01,170 --> 00:04:04,790
the actual plaintext bytes<font color="#E5E5E5"> that</font><font color="#CCCCCC"> are</font>

99
00:04:02,820 --> 00:04:07,739
going<font color="#CCCCCC"> to go up to the</font><font color="#E5E5E5"> application</font><font color="#CCCCCC"> and</font>

100
00:04:04,790 --> 00:04:10,650
now we're going<font color="#CCCCCC"> to need</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> authenticate</font>

101
00:04:07,739 --> 00:04:12,440
this so we calculate a hash the hash is

102
00:04:10,650 --> 00:04:15,299
called a<font color="#E5E5E5"> message authentication code and</font>

103
00:04:12,440 --> 00:04:19,709
in this<font color="#E5E5E5"> case it's 20 bytes because we're</font>

104
00:04:15,299 --> 00:04:22,169
talking<font color="#CCCCCC"> about AES with</font><font color="#E5E5E5"> sha after we've</font>

105
00:04:19,709 --> 00:04:24,300
done<font color="#E5E5E5"> this we now see we've got an even</font>

106
00:04:22,169 --> 00:04:25,919
number of<font color="#E5E5E5"> blocks it's divisible so you</font>

107
00:04:24,300 --> 00:04:27,520
might<font color="#CCCCCC"> think well do we actually</font><font color="#E5E5E5"> need to</font>

108
00:04:25,919 --> 00:04:29,919
pad this message it will work with

109
00:04:27,520 --> 00:04:32,258
<font color="#E5E5E5">our</font><font color="#CCCCCC"> CVC mode encryption the answer is</font>

110
00:04:29,919 --> 00:04:34,150
definitively yes<font color="#CCCCCC"> because if you don't</font>

111
00:04:32,259 --> 00:04:35,889
you're going to have<font color="#E5E5E5"> ambiguity when you</font>

112
00:04:34,150 --> 00:04:38,440
unpack this when you<font color="#E5E5E5"> decrypt this you</font>

113
00:04:35,889 --> 00:04:40,360
<font color="#E5E5E5">won't know where is the Mac or is this</font>

114
00:04:38,440 --> 00:04:43,210
padding at the end and that's because

115
00:04:40,360 --> 00:04:45,099
the<font color="#E5E5E5"> last byte it's the last</font><font color="#CCCCCC"> weight</font><font color="#E5E5E5"> of</font>

116
00:04:43,210 --> 00:04:47,979
the plaintext<font color="#E5E5E5"> is actually a padding</font>

117
00:04:45,099 --> 00:04:50,050
length specifier<font color="#E5E5E5"> now this byte it's not</font>

118
00:04:47,979 --> 00:04:52,990
actually considered padding<font color="#E5E5E5"> it's a</font>

119
00:04:50,050 --> 00:04:56,949
padding length so you<font color="#CCCCCC"> can see that I've</font>

120
00:04:52,990 --> 00:04:59,979
filled<font color="#E5E5E5"> out in</font><font color="#CCCCCC"> that block 0xf or 15 which</font>

121
00:04:56,949 --> 00:05:02,050
is because there are<font color="#CCCCCC"> 16 blocks or 16</font>

122
00:04:59,979 --> 00:05:04,690
bytes rather one of<font color="#CCCCCC"> them is your padding</font>

123
00:05:02,050 --> 00:05:08,229
length and so then we need 15 more bytes

124
00:05:04,690 --> 00:05:11,169
of padding so<font color="#E5E5E5"> what value</font><font color="#CCCCCC"> are we going to</font>

125
00:05:08,229 --> 00:05:13,830
put in for<font color="#CCCCCC"> this paddock well if it's</font>

126
00:05:11,169 --> 00:05:16,750
<font color="#CCCCCC">slv-3</font><font color="#E5E5E5"> it's just going to be random data</font>

127
00:05:13,830 --> 00:05:18,729
<font color="#CCCCCC">it can be any</font><font color="#E5E5E5"> non-deterministic bytes</font>

128
00:05:16,750 --> 00:05:22,630
the standards<font color="#E5E5E5"> just didn't specify that</font>

129
00:05:18,729 --> 00:05:26,080
in TLS however<font color="#E5E5E5"> meaning starting with TLS</font>

130
00:05:22,630 --> 00:05:29,080
<font color="#E5E5E5">1 up till current well you're going</font><font color="#CCCCCC"> to</font>

131
00:05:26,080 --> 00:05:30,669
<font color="#CCCCCC">pad this with a determined value so the</font>

132
00:05:29,080 --> 00:05:32,289
padding length byte is going to be

133
00:05:30,669 --> 00:05:34,870
repeated for<font color="#E5E5E5"> each of the padding bytes</font>

134
00:05:32,289 --> 00:05:37,840
<font color="#E5E5E5">and this is rather important but we'll</font>

135
00:05:34,870 --> 00:05:40,330
see about that<font color="#CCCCCC"> a little bit later</font><font color="#E5E5E5"> so</font>

136
00:05:37,840 --> 00:05:43,000
back to our example<font color="#CCCCCC"> we're now going to</font>

137
00:05:40,330 --> 00:05:48,340
<font color="#E5E5E5">follow the TLS model and</font><font color="#CCCCCC"> I've padded</font><font color="#E5E5E5"> out</font>

138
00:05:43,000 --> 00:05:51,069
15 bytes<font color="#E5E5E5"> of the hex</font><font color="#CCCCCC"> F which gives us</font><font color="#E5E5E5"> our</font>

139
00:05:48,340 --> 00:05:53,500
complete message now we want to send

140
00:05:51,069 --> 00:05:56,169
this<font color="#E5E5E5"> through for CBC mode encryption</font><font color="#CCCCCC"> and</font>

141
00:05:53,500 --> 00:05:57,819
as you can<font color="#CCCCCC"> see what's happening</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> is</font>

142
00:05:56,169 --> 00:05:59,979
we're going to<font color="#E5E5E5"> start with an</font>

143
00:05:57,819 --> 00:06:03,069
initialization vector the<font color="#CCCCCC"> initialization</font>

144
00:05:59,979 --> 00:06:06,490
<font color="#CCCCCC">vector is</font><font color="#E5E5E5"> not actually shown here but it</font>

145
00:06:03,069 --> 00:06:08,469
would either for<font color="#E5E5E5"> SSL v3 be CBC residue</font>

146
00:06:06,490 --> 00:06:10,240
<font color="#E5E5E5">meaning like the</font><font color="#CCCCCC"> last thing that was</font>

147
00:06:08,469 --> 00:06:13,750
being<font color="#CCCCCC"> decrypted the last block is</font><font color="#E5E5E5"> going</font>

148
00:06:10,240 --> 00:06:15,969
<font color="#CCCCCC">to end up being an input</font><font color="#E5E5E5"> here or in</font>

149
00:06:13,750 --> 00:06:18,310
newer<font color="#CCCCCC"> protocols it's going to</font><font color="#E5E5E5"> actually</font>

150
00:06:15,969 --> 00:06:20,349
<font color="#E5E5E5">be explicitly set at the beginning</font><font color="#CCCCCC"> of</font>

151
00:06:18,310 --> 00:06:22,900
<font color="#E5E5E5">your message so you'll have this</font>

152
00:06:20,349 --> 00:06:24,699
initialization<font color="#E5E5E5"> vector that gets XOR it</font>

153
00:06:22,900 --> 00:06:26,560
against the first block of<font color="#E5E5E5"> the plaintext</font>

154
00:06:24,699 --> 00:06:29,409
and then encrypted through the block

155
00:06:26,560 --> 00:06:32,169
<font color="#CCCCCC">cipher</font><font color="#E5E5E5"> the output from that is then</font>

156
00:06:29,409 --> 00:06:34,330
<font color="#E5E5E5">going to be used to XOR with the next</font>

157
00:06:32,169 --> 00:06:36,820
block of the plaintext before going into

158
00:06:34,330 --> 00:06:40,270
<font color="#CCCCCC">the encryption and so on until we've</font>

159
00:06:36,820 --> 00:06:41,319
encrypted the entire message<font color="#E5E5E5"> so if we</font>

160
00:06:40,270 --> 00:06:44,349
want to decrypt

161
00:06:41,319 --> 00:06:46,659
obviously it's a pretty<font color="#E5E5E5"> trivial reversal</font>

162
00:06:44,349 --> 00:06:48,580
so on the encryption side we<font color="#CCCCCC"> wreak</font>

163
00:06:46,659 --> 00:06:50,740
soaring<font color="#E5E5E5"> and that encrypting so to</font>

164
00:06:48,580 --> 00:06:55,080
decrypt<font color="#CCCCCC"> we need to first decrypt and</font>

165
00:06:50,740 --> 00:06:59,469
then<font color="#E5E5E5"> XOR the process here this is called</font>

166
00:06:55,080 --> 00:07:01,149
<font color="#CCCCCC">Mac then pad then encrypt and this is</font>

167
00:06:59,469 --> 00:07:03,430
what cryptographers refer to as

168
00:07:01,149 --> 00:07:06,490
malleable<font color="#E5E5E5"> encryption and the reason for</font>

169
00:07:03,430 --> 00:07:08,740
<font color="#CCCCCC">that is that the use of</font><font color="#E5E5E5"> XOR in this way</font>

170
00:07:06,490 --> 00:07:10,779
<font color="#E5E5E5">allows for targeted plaintext</font>

171
00:07:08,740 --> 00:07:11,949
manipulation and the<font color="#CCCCCC"> fact that the</font>

172
00:07:10,779 --> 00:07:15,490
message isn't necessarily fully

173
00:07:11,949 --> 00:07:18,339
authenticated<font color="#CCCCCC"> so basically what this</font>

174
00:07:15,490 --> 00:07:20,559
<font color="#E5E5E5">means is</font><font color="#CCCCCC"> that if you were to flip a bit</font>

175
00:07:18,339 --> 00:07:23,499
within<font color="#CCCCCC"> a particular ciphertext block</font>

176
00:07:20,559 --> 00:07:27,099
it's going to flip<font color="#E5E5E5"> a corresponding bit</font>

177
00:07:23,499 --> 00:07:28,749
in the next<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> plaintext</font><font color="#E5E5E5"> of the next</font>

178
00:07:27,099 --> 00:07:31,058
ciphertext block if that makes sense

179
00:07:28,749 --> 00:07:33,939
<font color="#E5E5E5">we'll see this</font><font color="#CCCCCC"> Illustrated</font><font color="#E5E5E5"> out in a</font>

180
00:07:31,059 --> 00:07:35,439
minute but what you do have<font color="#CCCCCC"> to</font>

181
00:07:33,939 --> 00:07:38,050
understand here is<font color="#E5E5E5"> you can make this</font>

182
00:07:35,439 --> 00:07:40,089
targeted change but of course you've now

183
00:07:38,050 --> 00:07:43,149
modified a<font color="#CCCCCC"> ciphertext that's</font><font color="#E5E5E5"> going to</font>

184
00:07:40,089 --> 00:07:45,339
have random<font color="#E5E5E5"> results so you</font><font color="#CCCCCC"> will</font><font color="#E5E5E5"> have</font>

185
00:07:43,149 --> 00:07:47,589
data before<font color="#E5E5E5"> your targeted manipulation</font>

186
00:07:45,339 --> 00:07:52,689
getting corrupted<font color="#CCCCCC"> it will be</font>

187
00:07:47,589 --> 00:07:55,599
unpredictable<font color="#E5E5E5"> now back in 2002</font><font color="#CCCCCC"> sir gave</font>

188
00:07:52,689 --> 00:07:58,509
<font color="#CCCCCC">Auden a wrote a paper about</font><font color="#E5E5E5"> padding</font>

189
00:07:55,599 --> 00:08:00,639
Oracle attacks and recognized<font color="#E5E5E5"> that this</font>

190
00:07:58,509 --> 00:08:05,259
<font color="#CCCCCC">was not a good process</font><font color="#E5E5E5"> this Mac</font><font color="#CCCCCC"> than pad</font>

191
00:08:00,639 --> 00:08:06,969
that encrypt<font color="#CCCCCC"> and unfortunately the TLS</font>

192
00:08:05,259 --> 00:08:07,719
designers did not really heed this

193
00:08:06,969 --> 00:08:10,180
warning because

194
00:08:07,719 --> 00:08:13,659
<font color="#CCCCCC">Tilles 1.1 came out a few years</font><font color="#E5E5E5"> later</font>

195
00:08:10,180 --> 00:08:16,930
<font color="#E5E5E5">still doing the same thing</font><font color="#CCCCCC"> TLS 1.2 2008</font>

196
00:08:13,659 --> 00:08:20,529
<font color="#E5E5E5">still has Mac then pad</font><font color="#CCCCCC"> then encrypt CBC</font>

197
00:08:16,930 --> 00:08:23,349
mode encryption<font color="#E5E5E5"> now back to these</font>

198
00:08:20,529 --> 00:08:25,719
padding Oracle's what I mean by a

199
00:08:23,349 --> 00:08:28,688
padding Oracle is that the server<font color="#E5E5E5"> is</font>

200
00:08:25,719 --> 00:08:31,808
going<font color="#E5E5E5"> to reveal something to</font><font color="#CCCCCC"> the Vic to</font>

201
00:08:28,689 --> 00:08:34,329
the attacker<font color="#E5E5E5"> about the plaintext that's</font>

202
00:08:31,809 --> 00:08:36,699
being<font color="#E5E5E5"> processed or something about the</font>

203
00:08:34,328 --> 00:08:38,228
<font color="#E5E5E5">cipher text that's being processed</font><font color="#CCCCCC"> so</font>

204
00:08:36,698 --> 00:08:40,870
some of the things that<font color="#E5E5E5"> an attacker</font>

205
00:08:38,229 --> 00:08:42,639
might<font color="#E5E5E5"> look for would be can you tell if</font>

206
00:08:40,870 --> 00:08:44,800
<font color="#E5E5E5">this message being received</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> the</font>

207
00:08:42,639 --> 00:08:47,560
server<font color="#E5E5E5"> has valid padding does it have a</font>

208
00:08:44,800 --> 00:08:49,060
valid<font color="#E5E5E5"> Mac is it possible that you can</font>

209
00:08:47,560 --> 00:08:50,949
know that<font color="#CCCCCC"> the value is within a certain</font>

210
00:08:49,060 --> 00:08:53,768
range or in other words<font color="#E5E5E5"> that a specific</font>

211
00:08:50,949 --> 00:08:54,729
<font color="#E5E5E5">bit has been set with it and even</font>

212
00:08:53,769 --> 00:08:56,980
<font color="#CCCCCC">sometimes</font>

213
00:08:54,730 --> 00:08:59,560
if it's<font color="#E5E5E5"> just leaking</font><font color="#CCCCCC"> out the amount</font><font color="#E5E5E5"> of</font>

214
00:08:56,980 --> 00:09:01,660
<font color="#CCCCCC">plaintext that's there that can allow an</font>

215
00:08:59,560 --> 00:09:05,260
attacker to work<font color="#E5E5E5"> backwards and develop</font>

216
00:09:01,660 --> 00:09:08,350
some attacks<font color="#E5E5E5"> in general when you've got</font>

217
00:09:05,260 --> 00:09:11,800
a padding Oracle<font color="#CCCCCC"> the risk is an adaptive</font>

218
00:09:08,350 --> 00:09:15,279
chosen<font color="#E5E5E5"> ciphertext attack</font><font color="#CCCCCC"> there is a</font>

219
00:09:11,800 --> 00:09:17,439
caveat<font color="#CCCCCC"> there the attacker has to be able</font>

220
00:09:15,279 --> 00:09:20,199
<font color="#E5E5E5">to actually observe what's going on on</font>

221
00:09:17,440 --> 00:09:22,029
the server<font color="#CCCCCC"> so this means</font><font color="#E5E5E5"> that if the</font>

222
00:09:20,199 --> 00:09:25,510
server is<font color="#CCCCCC"> responding differently</font><font color="#E5E5E5"> to</font>

223
00:09:22,029 --> 00:09:27,880
different<font color="#E5E5E5"> broken messages it's only</font>

224
00:09:25,510 --> 00:09:29,439
going<font color="#E5E5E5"> to matter if those messages or if</font>

225
00:09:27,880 --> 00:09:30,010
those<font color="#E5E5E5"> differences are visible</font><font color="#CCCCCC"> to the</font>

226
00:09:29,440 --> 00:09:32,560
attacker

227
00:09:30,010 --> 00:09:34,089
so encrypted TLS alerts<font color="#CCCCCC"> that's not</font>

228
00:09:32,560 --> 00:09:35,979
necessarily<font color="#CCCCCC"> going to be</font><font color="#E5E5E5"> distinguishable</font>

229
00:09:34,089 --> 00:09:37,300
by the attacker readily<font color="#E5E5E5"> it's possible</font>

230
00:09:35,980 --> 00:09:40,089
<font color="#E5E5E5">that through some browser tricks you</font>

231
00:09:37,300 --> 00:09:42,939
<font color="#CCCCCC">might be able to</font><font color="#E5E5E5"> another thing to</font>

232
00:09:40,089 --> 00:09:46,120
mention is that<font color="#E5E5E5"> timing attacks work like</font>

233
00:09:42,940 --> 00:09:47,829
<font color="#CCCCCC">Lucky thirteen</font><font color="#E5E5E5"> but this is not</font>

234
00:09:46,120 --> 00:09:49,149
necessarily the<font color="#CCCCCC"> most practical when</font>

235
00:09:47,829 --> 00:09:50,620
you're talking about<font color="#E5E5E5"> an</font><font color="#CCCCCC"> attacker over</font>

236
00:09:49,149 --> 00:09:52,449
<font color="#E5E5E5">the internet because there's a lot of</font>

237
00:09:50,620 --> 00:09:54,610
fluctuation of<font color="#CCCCCC"> latency you</font><font color="#E5E5E5"> can't always</font>

238
00:09:52,449 --> 00:09:56,889
know<font color="#E5E5E5"> where it's coming from whether it's</font>

239
00:09:54,610 --> 00:09:59,500
<font color="#E5E5E5">coming from a variation in the server's</font>

240
00:09:56,889 --> 00:10:02,110
algorithm or something<font color="#CCCCCC"> else</font><font color="#E5E5E5"> but</font>

241
00:09:59,500 --> 00:10:04,870
<font color="#E5E5E5">generally speaking if the attacker is</font>

242
00:10:02,110 --> 00:10:08,139
<font color="#E5E5E5">able to either observe this change by</font>

243
00:10:04,870 --> 00:10:10,420
sniffing on the wire or by being within

244
00:10:08,139 --> 00:10:13,420
the<font color="#CCCCCC"> victim's browser then there's the</font>

245
00:10:10,420 --> 00:10:15,399
potential<font color="#CCCCCC"> for this attack</font><font color="#E5E5E5"> so to</font><font color="#CCCCCC"> explain</font>

246
00:10:13,420 --> 00:10:17,229
this to further elaborate<font color="#E5E5E5"> I'm going to</font>

247
00:10:15,399 --> 00:10:20,139
go through the case<font color="#CCCCCC"> study of how</font><font color="#E5E5E5"> pootle</font>

248
00:10:17,230 --> 00:10:22,540
worked so we'll<font color="#E5E5E5"> talk about the</font><font color="#CCCCCC"> original</font>

249
00:10:20,139 --> 00:10:25,600
<font color="#E5E5E5">poodle vulnerability which is affecting</font>

250
00:10:22,540 --> 00:10:27,339
slv-3<font color="#E5E5E5"> the requirements for somebody to</font>

251
00:10:25,600 --> 00:10:29,079
exploit this attack you would<font color="#E5E5E5"> need to be</font>

252
00:10:27,339 --> 00:10:31,149
a<font color="#E5E5E5"> man-in-the-middle attack err you're</font>

253
00:10:29,079 --> 00:10:33,880
going to need to have a server that's

254
00:10:31,149 --> 00:10:36,160
<font color="#E5E5E5">running</font><font color="#CCCCCC"> SSL v3 with</font><font color="#E5E5E5"> CBC mode cipher</font>

255
00:10:33,880 --> 00:10:38,290
support and you<font color="#E5E5E5"> need to find a victim</font>

256
00:10:36,160 --> 00:10:40,510
<font color="#E5E5E5">that's actually logged</font><font color="#CCCCCC"> in to</font><font color="#E5E5E5"> this site</font>

257
00:10:38,290 --> 00:10:42,130
with some<font color="#CCCCCC"> authentication like meaning</font>

258
00:10:40,510 --> 00:10:44,410
<font color="#E5E5E5">it's sending cookies or it's sending a</font>

259
00:10:42,130 --> 00:10:46,540
base64<font color="#CCCCCC"> encoded passphrase or</font><font color="#E5E5E5"> some other</font>

260
00:10:44,410 --> 00:10:49,810
header with a hash in it that's going to

261
00:10:46,540 --> 00:10:53,139
<font color="#E5E5E5">authenticate it the first step</font><font color="#CCCCCC"> in the</font>

262
00:10:49,810 --> 00:10:54,819
attack is<font color="#E5E5E5"> going to be that the</font><font color="#CCCCCC"> man</font><font color="#E5E5E5"> in</font>

263
00:10:53,139 --> 00:10:57,279
the middle<font color="#E5E5E5"> will need to</font><font color="#CCCCCC"> downgrade the</font>

264
00:10:54,819 --> 00:10:58,719
connection to SSL v3<font color="#E5E5E5"> not going to get</font>

265
00:10:57,279 --> 00:11:01,300
<font color="#E5E5E5">into the details on that if you want to</font>

266
00:10:58,720 --> 00:11:02,860
know more about<font color="#CCCCCC"> that Google TLS</font><font color="#E5E5E5"> fallback</font>

267
00:11:01,300 --> 00:11:04,870
<font color="#E5E5E5">dance and you'll get a lot of good</font>

268
00:11:02,860 --> 00:11:07,540
information<font color="#E5E5E5"> but</font><font color="#CCCCCC"> effectively that's a</font>

269
00:11:04,870 --> 00:11:08,879
<font color="#E5E5E5">well-known</font><font color="#CCCCCC"> problem and it is also a well</font>

270
00:11:07,540 --> 00:11:11,589
resolved problem

271
00:11:08,879 --> 00:11:14,350
so the next step in<font color="#E5E5E5"> this attack though</font>

272
00:11:11,589 --> 00:11:16,240
is that the attacker is going<font color="#CCCCCC"> to need</font><font color="#E5E5E5"> to</font>

273
00:11:14,350 --> 00:11:18,370
get some JavaScript running<font color="#E5E5E5"> in the</font>

274
00:11:16,240 --> 00:11:20,350
browser<font color="#E5E5E5"> of their victim doesn't</font><font color="#CCCCCC"> need to</font>

275
00:11:18,370 --> 00:11:22,300
be in the origin of<font color="#E5E5E5"> the website that</font>

276
00:11:20,350 --> 00:11:24,670
they're<font color="#E5E5E5"> trying to attack it can just be</font>

277
00:11:22,300 --> 00:11:26,979
<font color="#CCCCCC">any origin because we just</font><font color="#E5E5E5"> need to be</font>

278
00:11:24,670 --> 00:11:28,599
able to<font color="#E5E5E5"> use</font><font color="#CCCCCC"> JavaScript to</font><font color="#E5E5E5"> generate out</font>

279
00:11:26,980 --> 00:11:31,180
some requests that<font color="#E5E5E5"> are going to include</font>

280
00:11:28,600 --> 00:11:33,009
<font color="#E5E5E5">the credentials and where the attacker</font>

281
00:11:31,180 --> 00:11:36,279
is able<font color="#E5E5E5"> to control some attributes of</font>

282
00:11:33,009 --> 00:11:38,189
the request like either<font color="#E5E5E5"> amounts of data</font>

283
00:11:36,279 --> 00:11:41,350
or types<font color="#E5E5E5"> of data that</font><font color="#CCCCCC"> are in</font><font color="#E5E5E5"> the request</font>

284
00:11:38,189 --> 00:11:43,779
<font color="#E5E5E5">now once these requests are generated</font>

285
00:11:41,350 --> 00:11:46,509
<font color="#CCCCCC">onto the wire</font><font color="#E5E5E5"> the attacker is</font><font color="#CCCCCC"> going to</font>

286
00:11:43,779 --> 00:11:50,230
actually kind<font color="#E5E5E5"> of move them around so</font>

287
00:11:46,509 --> 00:11:51,819
they'll know the offset of some data

288
00:11:50,230 --> 00:11:55,449
<font color="#CCCCCC">that they're looking for in the HTTP</font>

289
00:11:51,819 --> 00:11:58,809
<font color="#CCCCCC">request and they're</font><font color="#E5E5E5"> going to take that</font>

290
00:11:55,449 --> 00:12:01,240
<font color="#E5E5E5">block of ciphertext and copy it</font><font color="#CCCCCC"> over to</font>

291
00:11:58,809 --> 00:12:03,300
be the<font color="#CCCCCC"> last block of ciphertext</font><font color="#E5E5E5"> meaning</font>

292
00:12:01,240 --> 00:12:05,529
it's going<font color="#CCCCCC"> to be replacing the padding</font>

293
00:12:03,300 --> 00:12:07,748
the resulting record<font color="#CCCCCC"> from that is going</font>

294
00:12:05,529 --> 00:12:10,389
<font color="#CCCCCC">to be sent</font><font color="#E5E5E5"> off to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> server looking</font>

295
00:12:07,749 --> 00:12:13,089
something<font color="#CCCCCC"> like this so you</font><font color="#E5E5E5"> can see here</font>

296
00:12:10,389 --> 00:12:15,069
that<font color="#E5E5E5"> ciphertext block 4 is the Wadden</font>

297
00:12:13,089 --> 00:12:17,170
that corresponds with plaintext block 4

298
00:12:15,069 --> 00:12:20,199
and that's<font color="#E5E5E5"> the one that has our cookie</font>

299
00:12:17,170 --> 00:12:24,699
value<font color="#E5E5E5"> in it so the attacker is going to</font>

300
00:12:20,199 --> 00:12:27,099
<font color="#E5E5E5">take that copy that in place of C 7</font>

301
00:12:24,699 --> 00:12:30,120
there and send this along<font color="#E5E5E5"> to the server</font>

302
00:12:27,100 --> 00:12:33,850
now when the server decrypts this

303
00:12:30,120 --> 00:12:35,620
obviously that last block<font color="#CCCCCC"> it's going to</font>

304
00:12:33,850 --> 00:12:38,379
end up<font color="#E5E5E5"> being pseudo-random data because</font>

305
00:12:35,620 --> 00:12:40,509
you're<font color="#E5E5E5"> taking some decryption</font>

306
00:12:38,379 --> 00:12:44,410
intermediate value and exhorting it with

307
00:12:40,509 --> 00:12:46,779
these<font color="#CCCCCC"> Mac bytes you can see the</font><font color="#E5E5E5"> equation</font>

308
00:12:44,410 --> 00:12:49,540
for what those<font color="#CCCCCC"> pseudo random bytes would</font>

309
00:12:46,779 --> 00:12:54,250
be it's<font color="#E5E5E5"> the decryption of</font><font color="#CCCCCC"> c4 with the</font>

310
00:12:49,540 --> 00:12:56,740
<font color="#CCCCCC">XOR against</font><font color="#E5E5E5"> C 6 so the attacker is going</font>

311
00:12:54,250 --> 00:12:59,529
<font color="#E5E5E5">to watch what the server does if the</font>

312
00:12:56,740 --> 00:13:02,610
<font color="#E5E5E5">server sends a TLS alert that means that</font>

313
00:12:59,529 --> 00:13:04,809
the padding was invalid<font color="#E5E5E5"> because the</font>

314
00:13:02,610 --> 00:13:07,029
<font color="#CCCCCC">padding</font><font color="#E5E5E5"> length ended up not being</font>

315
00:13:04,809 --> 00:13:09,939
correct so the Mac was not correct<font color="#CCCCCC"> and</font>

316
00:13:07,029 --> 00:13:13,209
the server rejects<font color="#E5E5E5"> the message if there</font>

317
00:13:09,939 --> 00:13:15,939
is no<font color="#E5E5E5"> TLS Alert however then it's going</font>

318
00:13:13,209 --> 00:13:17,859
<font color="#E5E5E5">to look</font><font color="#CCCCCC"> something like I'm</font><font color="#E5E5E5"> sorry this is</font>

319
00:13:15,939 --> 00:13:21,639
a decryption error<font color="#E5E5E5"> so yeah here you can</font>

320
00:13:17,860 --> 00:13:22,300
see actually<font color="#E5E5E5"> if the decryption in most</font>

321
00:13:21,639 --> 00:13:24,190
cases

322
00:13:22,300 --> 00:13:26,530
<font color="#CCCCCC">is</font><font color="#E5E5E5"> going to end up that that last bite</font>

323
00:13:24,190 --> 00:13:28,150
<font color="#E5E5E5">that padding length is not going to line</font>

324
00:13:26,530 --> 00:13:32,170
up<font color="#CCCCCC"> correctly so you can see here</font><font color="#E5E5E5"> that</font>

325
00:13:28,150 --> 00:13:34,300
we've got padding<font color="#E5E5E5"> length 14 and when we</font>

326
00:13:32,170 --> 00:13:35,920
strip away<font color="#E5E5E5"> some</font><font color="#CCCCCC"> bytes for that</font><font color="#E5E5E5"> it's</font>

327
00:13:34,300 --> 00:13:37,990
<font color="#CCCCCC">ultimately going to</font><font color="#E5E5E5"> affect</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> way that</font>

328
00:13:35,920 --> 00:13:39,430
<font color="#E5E5E5">the server</font><font color="#CCCCCC"> is interpreting what the Mac</font>

329
00:13:37,990 --> 00:13:42,490
bytes were and<font color="#E5E5E5"> that Mac will be</font>

330
00:13:39,430 --> 00:13:46,209
<font color="#E5E5E5">incorrect</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is going to happen</font><font color="#CCCCCC"> about</font>

331
00:13:42,490 --> 00:13:48,610
<font color="#E5E5E5">once out of every 256 times it will not</font>

332
00:13:46,210 --> 00:13:51,010
have an error<font color="#CCCCCC"> so you can kind of</font><font color="#E5E5E5"> think</font>

333
00:13:48,610 --> 00:13:53,020
<font color="#E5E5E5">of the poodle attack as being for each</font>

334
00:13:51,010 --> 00:13:55,689
<font color="#CCCCCC">byte you're trying to decrypt</font><font color="#E5E5E5"> you're</font>

335
00:13:53,020 --> 00:13:57,640
rolling a die with 256 sides and you're

336
00:13:55,690 --> 00:14:02,770
hoping<font color="#CCCCCC"> that</font><font color="#E5E5E5"> it comes up on</font><font color="#CCCCCC"> the number 15</font>

337
00:13:57,640 --> 00:14:05,080
or<font color="#CCCCCC"> 8 if you're working</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> des on the</font>

338
00:14:02,770 --> 00:14:08,860
<font color="#E5E5E5">successful case however we randomly end</font>

339
00:14:05,080 --> 00:14:11,140
up having that hex<font color="#E5E5E5"> f15 is our padding</font>

340
00:14:08,860 --> 00:14:14,110
<font color="#E5E5E5">length so now the</font><font color="#CCCCCC"> packets able to be</font>

341
00:14:11,140 --> 00:14:17,410
properly parsed<font color="#E5E5E5"> out the MAC</font><font color="#CCCCCC"> address make</font>

342
00:14:14,110 --> 00:14:19,540
or the<font color="#CCCCCC"> Mac value make sense and</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> now</font>

343
00:14:17,410 --> 00:14:21,850
the attacker does not get an alert<font color="#E5E5E5"> and</font>

344
00:14:19,540 --> 00:14:24,339
they can make an inference<font color="#E5E5E5"> about the</font>

345
00:14:21,850 --> 00:14:26,620
data<font color="#E5E5E5"> they</font><font color="#CCCCCC"> can actually</font><font color="#E5E5E5"> now decrypt the</font>

346
00:14:24,340 --> 00:14:29,920
<font color="#E5E5E5">byte that</font><font color="#CCCCCC"> was the last byte</font><font color="#E5E5E5"> from that</font>

347
00:14:26,620 --> 00:14:32,220
one ciphertext block so you<font color="#CCCCCC"> can see how</font>

348
00:14:29,920 --> 00:14:35,860
this works here we're going<font color="#E5E5E5"> to take that</font>

349
00:14:32,220 --> 00:14:38,260
15 and XOR with<font color="#E5E5E5"> the previous ciphertext</font>

350
00:14:35,860 --> 00:14:40,840
block in order<font color="#CCCCCC"> to find out what the</font>

351
00:14:38,260 --> 00:14:42,760
intermediary<font color="#E5E5E5"> decryption value was for</font>

352
00:14:40,840 --> 00:14:45,490
that<font color="#E5E5E5"> last byte from the targeted</font>

353
00:14:42,760 --> 00:14:47,770
ciphertext block<font color="#E5E5E5"> from there we can</font><font color="#CCCCCC"> then</font>

354
00:14:45,490 --> 00:14:50,710
<font color="#E5E5E5">know what the plaintext value is by</font>

355
00:14:47,770 --> 00:14:54,180
taking<font color="#CCCCCC"> that intermediary value and X</font>

356
00:14:50,710 --> 00:14:58,780
<font color="#CCCCCC">whoring it again</font><font color="#E5E5E5"> with C 3s last byte</font>

357
00:14:54,180 --> 00:15:00,640
hopefully this is clear<font color="#E5E5E5"> so now from this</font>

358
00:14:58,780 --> 00:15:03,670
point the attacker is decrypted one byte

359
00:15:00,640 --> 00:15:07,180
and they're<font color="#E5E5E5"> going to have to</font><font color="#CCCCCC"> adjust the</font>

360
00:15:03,670 --> 00:15:10,329
<font color="#E5E5E5">request so meaning if they add</font><font color="#CCCCCC"> on some</font>

361
00:15:07,180 --> 00:15:12,370
bytes to the<font color="#CCCCCC"> URL</font><font color="#E5E5E5"> and maybe add or remove</font>

362
00:15:10,330 --> 00:15:14,230
<font color="#CCCCCC">some bytes to an extra header that comes</font>

363
00:15:12,370 --> 00:15:15,940
after the cookie<font color="#E5E5E5"> they can keep it</font>

364
00:15:14,230 --> 00:15:19,320
<font color="#CCCCCC">alliant that the bytes from their cookie</font>

365
00:15:15,940 --> 00:15:21,790
are going to continuously fall into<font color="#E5E5E5"> that</font>

366
00:15:19,320 --> 00:15:25,540
<font color="#E5E5E5">expected location</font><font color="#CCCCCC"> where the attacker can</font>

367
00:15:21,790 --> 00:15:28,270
try and<font color="#E5E5E5"> recover it so again the reason</font>

368
00:15:25,540 --> 00:15:31,270
<font color="#CCCCCC">that this is</font><font color="#E5E5E5"> working is because</font><font color="#CCCCCC"> of the</font>

369
00:15:28,270 --> 00:15:32,860
Mac<font color="#E5E5E5"> then pad then encrypt there is no</font>

370
00:15:31,270 --> 00:15:34,270
authentication over the padding bytes

371
00:15:32,860 --> 00:15:35,680
within<font color="#E5E5E5"> slv-3</font>

372
00:15:34,270 --> 00:15:39,189
<font color="#E5E5E5">this was a flaw</font>

373
00:15:35,680 --> 00:15:43,140
within the protocol design<font color="#E5E5E5"> and it was</font>

374
00:15:39,190 --> 00:15:45,310
corrected<font color="#E5E5E5"> with TLS so now that TLS</font>

375
00:15:43,140 --> 00:15:46,870
specifies padding bytes we really

376
00:15:45,310 --> 00:15:49,630
shouldn't have<font color="#E5E5E5"> any more poodle problems</font>

377
00:15:46,870 --> 00:15:52,180
everything<font color="#E5E5E5"> should</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> good</font><font color="#CCCCCC"> but back at</font>

378
00:15:49,630 --> 00:15:54,910
<font color="#CCCCCC">the time when poodle was disclosed</font><font color="#E5E5E5"> other</font>

379
00:15:52,180 --> 00:15:58,149
people<font color="#E5E5E5"> got the idea</font><font color="#CCCCCC"> you know</font><font color="#E5E5E5"> you could</font>

380
00:15:54,910 --> 00:16:00,579
<font color="#E5E5E5">just use SSL v3 on pad mechanism in a</font>

381
00:15:58,149 --> 00:16:03,190
TLS implementation and that<font color="#CCCCCC"> would have</font>

382
00:16:00,580 --> 00:16:05,080
<font color="#E5E5E5">this problem</font><font color="#CCCCCC"> too so several people made</font>

383
00:16:03,190 --> 00:16:07,480
some<font color="#E5E5E5"> tools and started</font><font color="#CCCCCC"> scanning the</font>

384
00:16:05,080 --> 00:16:09,910
<font color="#CCCCCC">internet and found</font><font color="#E5E5E5"> yeah</font>

385
00:16:07,480 --> 00:16:12,520
there were several<font color="#E5E5E5"> vendors that were for</font>

386
00:16:09,910 --> 00:16:15,850
some reason using<font color="#CCCCCC"> the SSL v3 on padding</font>

387
00:16:12,520 --> 00:16:18,699
functionality within TLS connections<font color="#E5E5E5"> so</font>

388
00:16:15,850 --> 00:16:21,610
the result that<font color="#E5E5E5"> we have here is poodle</font>

389
00:16:18,700 --> 00:16:22,720
is exploitable again<font color="#E5E5E5"> but these are not</font>

390
00:16:21,610 --> 00:16:25,350
protocol flaws

391
00:16:22,720 --> 00:16:27,790
these are implementation flaws<font color="#E5E5E5"> so</font>

392
00:16:25,350 --> 00:16:31,390
patches come out and everybody<font color="#E5E5E5"> should be</font>

393
00:16:27,790 --> 00:16:35,290
good<font color="#CCCCCC"> right well maybe</font><font color="#E5E5E5"> but maybe not</font>

394
00:16:31,390 --> 00:16:38,350
so<font color="#E5E5E5"> poodle TLS is specifically this</font>

395
00:16:35,290 --> 00:16:41,980
problem of the<font color="#CCCCCC"> ssl on pad function</font><font color="#E5E5E5"> being</font>

396
00:16:38,350 --> 00:16:44,800
used in TLS so the way that<font color="#CCCCCC"> people</font><font color="#E5E5E5"> would</font>

397
00:16:41,980 --> 00:16:47,380
test for<font color="#E5E5E5"> this is obviously to</font><font color="#CCCCCC"> just take</font>

398
00:16:44,800 --> 00:16:49,719
a client<font color="#CCCCCC"> make the client</font><font color="#E5E5E5"> use the SSL v3</font>

399
00:16:47,380 --> 00:16:52,029
padding functionality and see if you're

400
00:16:49,720 --> 00:16:53,920
<font color="#CCCCCC">able to connect to</font><font color="#E5E5E5"> the server</font><font color="#CCCCCC"> if you're</font>

401
00:16:52,029 --> 00:16:56,470
able<font color="#CCCCCC"> to connect</font><font color="#E5E5E5"> to the server</font><font color="#CCCCCC"> using that</font>

402
00:16:53,920 --> 00:16:58,660
<font color="#E5E5E5">as Sylvie 3 padding mechanism it means</font>

403
00:16:56,470 --> 00:17:00,339
that the server<font color="#E5E5E5"> has not actually</font>

404
00:16:58,660 --> 00:17:02,620
validated the padding<font color="#E5E5E5"> on your finished</font>

405
00:17:00,339 --> 00:17:04,480
message which probably means<font color="#E5E5E5"> that</font>

406
00:17:02,620 --> 00:17:07,300
<font color="#E5E5E5">they're just using</font><font color="#CCCCCC"> that SSL v3 on</font>

407
00:17:04,480 --> 00:17:10,360
padding function<font color="#E5E5E5"> the problem with this</font>

408
00:17:07,300 --> 00:17:12,459
test I mean so correct this test is good

409
00:17:10,359 --> 00:17:15,069
for<font color="#E5E5E5"> poodle the problem with</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> is that</font>

410
00:17:12,459 --> 00:17:18,150
it doesn't<font color="#E5E5E5"> match the</font><font color="#CCCCCC"> reality of what an</font>

411
00:17:15,069 --> 00:17:20,139
attack looks like as<font color="#E5E5E5"> you saw in the</font>

412
00:17:18,150 --> 00:17:22,449
<font color="#E5E5E5">workflow</font><font color="#CCCCCC"> that we went through</font><font color="#E5E5E5"> there</font>

413
00:17:20,140 --> 00:17:24,550
there was no mention of altering<font color="#CCCCCC"> a</font>

414
00:17:22,449 --> 00:17:26,230
finished message in the real attack the

415
00:17:24,550 --> 00:17:28,480
attacker is going<font color="#CCCCCC"> to allow that</font><font color="#E5E5E5"> finished</font>

416
00:17:26,230 --> 00:17:31,240
message to flow allow the connection<font color="#CCCCCC"> to</font>

417
00:17:28,480 --> 00:17:33,760
<font color="#E5E5E5">be</font><font color="#CCCCCC"> established</font><font color="#E5E5E5"> and then they're going to</font>

418
00:17:31,240 --> 00:17:37,120
<font color="#CCCCCC">start messing with</font><font color="#E5E5E5"> the connection after</font>

419
00:17:33,760 --> 00:17:39,330
<font color="#CCCCCC">its application</font><font color="#E5E5E5"> down on the line so this</font>

420
00:17:37,120 --> 00:17:42,159
brought<font color="#E5E5E5"> a few questions to mind namely</font>

421
00:17:39,330 --> 00:17:44,559
<font color="#E5E5E5">are there actually stacks out there</font>

422
00:17:42,160 --> 00:17:47,559
TLS stacks<font color="#E5E5E5"> that is where they're going</font>

423
00:17:44,559 --> 00:17:49,220
<font color="#E5E5E5">to behave</font><font color="#CCCCCC"> differently</font><font color="#E5E5E5"> if I am messing up</font>

424
00:17:47,559 --> 00:17:51,200
the padding after the

425
00:17:49,220 --> 00:17:53,720
and shake<font color="#CCCCCC"> as opposed to before or during</font>

426
00:17:51,200 --> 00:17:55,100
the handshake and I was<font color="#E5E5E5"> also curious</font>

427
00:17:53,720 --> 00:17:58,299
because I had previously<font color="#E5E5E5"> done this</font>

428
00:17:55,100 --> 00:18:00,500
research<font color="#E5E5E5"> on black</font><font color="#CCCCCC"> campaka Oracle's</font><font color="#E5E5E5"> and</font>

429
00:17:58,299 --> 00:18:02,900
we found<font color="#E5E5E5"> that there were a number of</font>

430
00:18:00,500 --> 00:18:04,070
other side channels that people<font color="#CCCCCC"> hadn't</font>

431
00:18:02,900 --> 00:18:06,260
really<font color="#CCCCCC"> been looking at like connection</font>

432
00:18:04,070 --> 00:18:08,299
<font color="#E5E5E5">signals and whatnot so I was curious</font>

433
00:18:06,260 --> 00:18:11,179
<font color="#CCCCCC">about whether</font><font color="#E5E5E5"> CVC padding articles would</font>

434
00:18:08,299 --> 00:18:14,389
also have ability<font color="#E5E5E5"> to be exploited</font>

435
00:18:11,179 --> 00:18:16,610
<font color="#E5E5E5">through less known side channels and</font>

436
00:18:14,390 --> 00:18:17,900
finally of course<font color="#CCCCCC"> I wanted</font><font color="#E5E5E5"> to know if</font>

437
00:18:16,610 --> 00:18:20,389
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> actually a problem on the</font>

438
00:18:17,900 --> 00:18:22,309
<font color="#CCCCCC">Internet today so this is 2019</font><font color="#E5E5E5"> we've</font>

439
00:18:20,390 --> 00:18:25,789
been talking about<font color="#E5E5E5"> CVC</font><font color="#CCCCCC"> padding Oracle's</font>

440
00:18:22,309 --> 00:18:27,200
<font color="#E5E5E5">for 17 years now so ideally there</font>

441
00:18:25,789 --> 00:18:30,020
shouldn't<font color="#E5E5E5"> really</font><font color="#CCCCCC"> be much of anything on</font>

442
00:18:27,200 --> 00:18:32,179
<font color="#E5E5E5">the internet that still has this but to</font>

443
00:18:30,020 --> 00:18:34,549
find out I needed<font color="#E5E5E5"> to build a new tool</font>

444
00:18:32,179 --> 00:18:37,010
<font color="#E5E5E5">come up with some new test cases and</font>

445
00:18:34,549 --> 00:18:40,549
then do some scanning<font color="#E5E5E5"> of</font><font color="#CCCCCC"> top-ranked</font>

446
00:18:37,010 --> 00:18:42,408
<font color="#E5E5E5">sites so some internet topless in order</font>

447
00:18:40,549 --> 00:18:44,240
to get started<font color="#CCCCCC"> with the tool I had</font>

448
00:18:42,409 --> 00:18:45,980
remembered back to when<font color="#CCCCCC"> poodle would</font>

449
00:18:44,240 --> 00:18:48,919
first come<font color="#E5E5E5"> out and I had found on the</font>

450
00:18:45,980 --> 00:18:51,230
Imperial violet blog<font color="#CCCCCC"> a very cool</font>

451
00:18:48,919 --> 00:18:54,140
<font color="#CCCCCC">proof-of-concept</font><font color="#E5E5E5"> from Adam Langley where</font>

452
00:18:51,230 --> 00:18:57,169
he patched the crypto TLS library with

453
00:18:54,140 --> 00:18:59,780
<font color="#E5E5E5">Ingo and basically just told</font><font color="#CCCCCC"> that to</font>

454
00:18:57,169 --> 00:19:02,299
have a flag to<font color="#E5E5E5"> say all right</font><font color="#CCCCCC"> used broken</font>

455
00:18:59,780 --> 00:19:07,010
padding<font color="#E5E5E5"> and this was pretty effective</font>

456
00:19:02,299 --> 00:19:09,010
for finding<font color="#CCCCCC"> pootle TLS exposures all I</font>

457
00:19:07,010 --> 00:19:11,240
needed<font color="#CCCCCC"> to</font><font color="#E5E5E5"> do from there really was to</font>

458
00:19:09,010 --> 00:19:13,129
make the change a little<font color="#E5E5E5"> bit less</font>

459
00:19:11,240 --> 00:19:15,260
aggressive<font color="#E5E5E5"> so rather than</font><font color="#CCCCCC"> just always</font>

460
00:19:13,130 --> 00:19:18,740
using<font color="#E5E5E5"> this broken padding mode had to</font>

461
00:19:15,260 --> 00:19:21,740
<font color="#CCCCCC">figure out a</font><font color="#E5E5E5"> way to actually recognize</font>

462
00:19:18,740 --> 00:19:23,870
on the connection when there's

463
00:19:21,740 --> 00:19:29,000
<font color="#E5E5E5">application data as opposed to handshake</font>

464
00:19:23,870 --> 00:19:31,969
data the<font color="#E5E5E5"> next thing that I was</font><font color="#CCCCCC"> thinking</font>

465
00:19:29,000 --> 00:19:34,309
about is<font color="#E5E5E5"> how to distinguish the</font>

466
00:19:31,970 --> 00:19:36,200
different<font color="#E5E5E5"> error</font><font color="#CCCCCC"> states so one of the</font>

467
00:19:34,309 --> 00:19:37,820
things we looked at in robot was the

468
00:19:36,200 --> 00:19:40,429
<font color="#E5E5E5">amount of data that was coming back some</font>

469
00:19:37,820 --> 00:19:42,260
servers would send to TLS alerts rather

470
00:19:40,429 --> 00:19:45,289
than one TLS<font color="#CCCCCC"> Alert for certain errors</font>

471
00:19:42,260 --> 00:19:47,690
and also it's possible<font color="#E5E5E5"> like with poodle</font>

472
00:19:45,289 --> 00:19:48,830
that you're going to<font color="#E5E5E5"> get data back even</font>

473
00:19:47,690 --> 00:19:50,500
though there were padding errors and

474
00:19:48,830 --> 00:19:54,740
<font color="#E5E5E5">that's going</font><font color="#CCCCCC"> to tell you something and</font>

475
00:19:50,500 --> 00:19:57,049
another big one<font color="#CCCCCC"> is TCP headers</font><font color="#E5E5E5"> so how is</font>

476
00:19:54,740 --> 00:19:59,450
the connection being<font color="#E5E5E5"> established is it</font>

477
00:19:57,049 --> 00:20:02,270
being torn down with a reset a fin is

478
00:19:59,450 --> 00:20:03,110
the socket<font color="#CCCCCC"> just being left open</font><font color="#E5E5E5"> maybe</font>

479
00:20:02,270 --> 00:20:04,820
<font color="#E5E5E5">you've got something</font>

480
00:20:03,110 --> 00:20:10,399
else like<font color="#CCCCCC"> a push flag that comes up in</font>

481
00:20:04,820 --> 00:20:12,230
random<font color="#CCCCCC"> places</font><font color="#E5E5E5"> but again whatever errors</font>

482
00:20:10,400 --> 00:20:13,940
that we find<font color="#E5E5E5"> they do need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font>

483
00:20:12,230 --> 00:20:18,799
<font color="#E5E5E5">observable at some point for this to</font>

484
00:20:13,940 --> 00:20:20,120
<font color="#CCCCCC">actually be exploitable so I'm going</font><font color="#E5E5E5"> to</font>

485
00:20:18,799 --> 00:20:22,160
tell you about the test cases<font color="#E5E5E5"> that I</font>

486
00:20:20,120 --> 00:20:25,040
chose in a minute but first to

487
00:20:22,160 --> 00:20:26,570
understand what the test cases are this

488
00:20:25,040 --> 00:20:28,428
means that we're going<font color="#E5E5E5"> to complete a</font>

489
00:20:26,570 --> 00:20:31,159
handshake<font color="#E5E5E5"> and then we're going to send</font>

490
00:20:28,429 --> 00:20:33,080
an HTTP request<font color="#CCCCCC"> where the padding</font><font color="#E5E5E5"> has</font>

491
00:20:31,160 --> 00:20:35,840
been broken<font color="#E5E5E5"> in specific</font><font color="#CCCCCC"> ways based on</font>

492
00:20:33,080 --> 00:20:38,299
<font color="#E5E5E5">these test cases we're then going</font><font color="#CCCCCC"> to</font>

493
00:20:35,840 --> 00:20:41,149
observe and record<font color="#E5E5E5"> how the system</font>

494
00:20:38,299 --> 00:20:45,190
responded<font color="#E5E5E5"> and you know did the socket</font>

495
00:20:41,150 --> 00:20:48,799
abort did it allow me<font color="#CCCCCC"> to just time out</font>

496
00:20:45,190 --> 00:20:51,470
<font color="#E5E5E5">the from each test case the results are</font>

497
00:20:48,799 --> 00:20:54,168
going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be compared</font><font color="#E5E5E5"> and it should be</font>

498
00:20:51,470 --> 00:20:54,919
that<font color="#CCCCCC"> for a secure server any error</font><font color="#E5E5E5"> that</font>

499
00:20:54,169 --> 00:20:56,299
I throw at it

500
00:20:54,919 --> 00:20:58,010
I'm not going to<font color="#E5E5E5"> be able to tell the</font>

501
00:20:56,299 --> 00:21:01,190
difference of why it triggered that

502
00:20:58,010 --> 00:21:03,590
error<font color="#E5E5E5"> so if I do see</font><font color="#CCCCCC"> something that can</font>

503
00:21:01,190 --> 00:21:07,370
be distinguished<font color="#E5E5E5"> I'm going to assume</font>

504
00:21:03,590 --> 00:21:11,149
that<font color="#E5E5E5"> that is</font><font color="#CCCCCC"> a vulnerability</font><font color="#E5E5E5"> like I said</font>

505
00:21:07,370 --> 00:21:13,729
though<font color="#E5E5E5"> inconsistent responses they might</font>

506
00:21:11,150 --> 00:21:16,640
not be exploitable<font color="#E5E5E5"> so something that</font><font color="#CCCCCC"> I</font>

507
00:21:13,730 --> 00:21:18,679
do to help<font color="#CCCCCC"> improve the accuracy of the</font>

508
00:21:16,640 --> 00:21:21,080
scans is they assume<font color="#CCCCCC"> that all hosts need</font>

509
00:21:18,679 --> 00:21:23,150
to be triple<font color="#E5E5E5"> checked that if you don't</font>

510
00:21:21,080 --> 00:21:25,939
<font color="#CCCCCC">get the same exact responses from</font><font color="#E5E5E5"> a host</font>

511
00:21:23,150 --> 00:21:28,100
after<font color="#E5E5E5"> three rounds</font><font color="#CCCCCC"> of sending each test</font>

512
00:21:25,940 --> 00:21:29,809
<font color="#CCCCCC">case that you should</font><font color="#E5E5E5"> consider this</font>

513
00:21:28,100 --> 00:21:32,330
interesting<font color="#E5E5E5"> but not</font><font color="#CCCCCC"> necessarily</font>

514
00:21:29,809 --> 00:21:33,530
vulnerable because<font color="#E5E5E5"> in reality and</font>

515
00:21:32,330 --> 00:21:37,490
<font color="#CCCCCC">attackers probably</font><font color="#E5E5E5"> not gonna be able to</font>

516
00:21:33,530 --> 00:21:39,710
<font color="#E5E5E5">do much with that so the test cases that</font>

517
00:21:37,490 --> 00:21:44,090
<font color="#CCCCCC">I started</font><font color="#E5E5E5"> out</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> when I started</font><font color="#CCCCCC"> this</font>

518
00:21:39,710 --> 00:21:48,380
project in August 2018 we've got four

519
00:21:44,090 --> 00:21:50,600
test cases to cover basic scenarios that

520
00:21:48,380 --> 00:21:53,530
<font color="#E5E5E5">I thought about that could affect these</font>

521
00:21:50,600 --> 00:21:56,780
so we'll<font color="#E5E5E5"> go through these one by</font><font color="#CCCCCC"> one</font>

522
00:21:53,530 --> 00:22:00,710
well<font color="#E5E5E5"> actually in a second rule so after</font>

523
00:21:56,780 --> 00:22:03,020
<font color="#E5E5E5">August</font><font color="#CCCCCC"> I spent some time</font><font color="#E5E5E5"> working on this</font>

524
00:22:00,710 --> 00:22:04,730
I found<font color="#E5E5E5"> some bugs in</font><font color="#CCCCCC"> my code</font><font color="#E5E5E5"> fix some</font>

525
00:22:03,020 --> 00:22:07,160
problems<font color="#CCCCCC"> with edge cases</font><font color="#E5E5E5"> related to</font>

526
00:22:04,730 --> 00:22:09,260
certain ciphers being selected<font color="#E5E5E5"> and I</font>

527
00:22:07,160 --> 00:22:10,669
also expanded my knowledge about<font color="#E5E5E5"> padding</font>

528
00:22:09,260 --> 00:22:13,879
Oracle's I learned more about the<font color="#CCCCCC"> beast</font>

529
00:22:10,669 --> 00:22:16,280
attack and I learned from<font color="#E5E5E5"> colleagues at</font>

530
00:22:13,880 --> 00:22:16,730
Roy<font color="#E5E5E5"> University book home about an</font>

531
00:22:16,280 --> 00:22:19,129
openness

532
00:22:16,730 --> 00:22:21,140
self law involving zero<font color="#CCCCCC"> byte record</font><font color="#E5E5E5"> and</font>

533
00:22:19,130 --> 00:22:22,970
finally<font color="#CCCCCC"> I</font><font color="#E5E5E5"> challenged some of the</font>

534
00:22:21,140 --> 00:22:26,080
assumptions<font color="#E5E5E5"> that I made about how these</font>

535
00:22:22,970 --> 00:22:28,970
things<font color="#CCCCCC"> work</font><font color="#E5E5E5"> and I came</font><font color="#CCCCCC"> up with</font><font color="#E5E5E5"> an</font>

536
00:22:26,080 --> 00:22:30,918
<font color="#E5E5E5">additional test case and</font><font color="#CCCCCC"> also expanded</font>

537
00:22:28,970 --> 00:22:32,840
some of<font color="#CCCCCC"> my other test cases so in the</font>

538
00:22:30,919 --> 00:22:37,130
<font color="#E5E5E5">end we'll</font><font color="#CCCCCC"> talk about datasets</font><font color="#E5E5E5"> of my</font>

539
00:22:32,840 --> 00:22:39,620
scans<font color="#E5E5E5"> this is the March scan set those</font>

540
00:22:37,130 --> 00:22:43,010
first<font color="#CCCCCC"> four test cases</font><font color="#E5E5E5"> is what will be</font>

541
00:22:39,620 --> 00:22:45,379
described as the<font color="#E5E5E5"> initial scans so for</font>

542
00:22:43,010 --> 00:22:47,330
the<font color="#E5E5E5"> test cases</font><font color="#CCCCCC"> this first one is</font><font color="#E5E5E5"> going</font>

543
00:22:45,380 --> 00:22:49,730
to<font color="#E5E5E5"> be having valid padding but an</font>

544
00:22:47,330 --> 00:22:52,309
invalid Mac<font color="#E5E5E5"> now the reason this is valid</font>

545
00:22:49,730 --> 00:22:54,260
padding is because it ends with a<font color="#CCCCCC"> 0</font><font color="#E5E5E5"> what</font>

546
00:22:52,309 --> 00:22:57,168
that means is that<font color="#E5E5E5"> there's zero length</font>

547
00:22:54,260 --> 00:22:58,910
or<font color="#CCCCCC"> zero bytes needed for padding and the</font>

548
00:22:57,169 --> 00:23:01,790
<font color="#CCCCCC">server</font><font color="#E5E5E5"> is just going to</font><font color="#CCCCCC"> interpret the</font>

549
00:22:58,910 --> 00:23:03,559
rest<font color="#E5E5E5"> of the bytes or the</font><font color="#CCCCCC"> twenty or</font>

550
00:23:01,790 --> 00:23:06,770
<font color="#E5E5E5">however many is appropriate for</font><font color="#CCCCCC"> this</font>

551
00:23:03,559 --> 00:23:10,129
particular cipher<font color="#CCCCCC"> number</font><font color="#E5E5E5"> of bytes as Mac</font>

552
00:23:06,770 --> 00:23:13,520
values<font color="#E5E5E5"> so that's not going to be right</font>

553
00:23:10,130 --> 00:23:15,380
<font color="#CCCCCC">obviously</font><font color="#E5E5E5"> the chances of that ending up</font>

554
00:23:13,520 --> 00:23:17,510
being<font color="#E5E5E5"> a valid Macker infinitesimally</font>

555
00:23:15,380 --> 00:23:20,600
small<font color="#E5E5E5"> so we can assume that this is</font>

556
00:23:17,510 --> 00:23:22,070
<font color="#E5E5E5">invalid Mac with valid padding the</font>

557
00:23:20,600 --> 00:23:24,770
second test case that<font color="#CCCCCC"> I thought about</font>

558
00:23:22,070 --> 00:23:26,870
was<font color="#CCCCCC"> what happens if the server receives</font>

559
00:23:24,770 --> 00:23:29,720
a<font color="#CCCCCC"> message but</font><font color="#E5E5E5"> it doesn't actually have</font>

560
00:23:26,870 --> 00:23:31,639
enough bytes to unpack<font color="#CCCCCC"> it so we send say</font>

561
00:23:29,720 --> 00:23:34,490
an 80 byte message but we say there's

562
00:23:31,640 --> 00:23:37,940
255 bytes of padding<font color="#E5E5E5"> how is it going to</font>

563
00:23:34,490 --> 00:23:40,910
respond and also<font color="#CCCCCC"> just</font><font color="#E5E5E5"> as a note</font>

564
00:23:37,940 --> 00:23:45,320
initially I did implement<font color="#E5E5E5"> this as just</font>

565
00:23:40,910 --> 00:23:47,690
having<font color="#E5E5E5"> the last block as all FS but when</font>

566
00:23:45,320 --> 00:23:50,059
I came<font color="#E5E5E5"> back to this in</font><font color="#CCCCCC"> March and</font>

567
00:23:47,690 --> 00:23:52,220
expanded on my work a little<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> I ended</font>

568
00:23:50,059 --> 00:23:53,990
up<font color="#E5E5E5"> realizing that you really could as an</font>

569
00:23:52,220 --> 00:23:56,419
attacker create multiple<font color="#E5E5E5"> blocks of</font>

570
00:23:53,990 --> 00:23:58,340
crafted text and so I extended<font color="#CCCCCC"> out this</font>

571
00:23:56,419 --> 00:24:02,080
<font color="#E5E5E5">test case to be filling up the entire</font>

572
00:23:58,340 --> 00:24:04,939
<font color="#CCCCCC">record with all</font><font color="#E5E5E5"> FS so it is true</font>

573
00:24:02,080 --> 00:24:07,820
<font color="#CCCCCC">incomplete</font><font color="#E5E5E5"> invalid padding without any</font>

574
00:24:04,940 --> 00:24:10,520
<font color="#E5E5E5">record and without any Mac the third</font>

575
00:24:07,820 --> 00:24:13,270
test case is just basically<font color="#E5E5E5"> your poodle</font>

576
00:24:10,520 --> 00:24:15,410
test case we've got<font color="#CCCCCC"> SSL v3 style padding</font>

577
00:24:13,270 --> 00:24:19,040
where the server will<font color="#CCCCCC"> not be able</font><font color="#E5E5E5"> to</font>

578
00:24:15,410 --> 00:24:21,950
<font color="#E5E5E5">validate the</font><font color="#CCCCCC"> bites and test case number</font>

579
00:24:19,040 --> 00:24:24,049
<font color="#E5E5E5">four is going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be having a missing Mac</font>

580
00:24:21,950 --> 00:24:26,870
so<font color="#E5E5E5"> that means the padding length is</font>

581
00:24:24,049 --> 00:24:29,600
going<font color="#CCCCCC"> to be exactly</font><font color="#E5E5E5"> the length of the</font>

582
00:24:26,870 --> 00:24:30,268
record<font color="#E5E5E5"> and once again initially in March</font>

583
00:24:29,600 --> 00:24:32,070
I<font color="#CCCCCC"> started</font>

584
00:24:30,269 --> 00:24:33,690
just by doing<font color="#E5E5E5"> the last block because</font>

585
00:24:32,070 --> 00:24:37,039
that's what a poodle attacker would do

586
00:24:33,690 --> 00:24:39,959
with the increased knowledge<font color="#E5E5E5"> of</font><font color="#CCCCCC"> beasts I</font>

587
00:24:37,039 --> 00:24:42,119
ended up expanding<font color="#CCCCCC"> this so that</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> of</font>

588
00:24:39,959 --> 00:24:45,169
<font color="#E5E5E5">the blocks would have this</font><font color="#CCCCCC"> value so that</font>

589
00:24:42,119 --> 00:24:49,619
<font color="#E5E5E5">it would actually be valid padding</font>

590
00:24:45,169 --> 00:24:51,989
rather than incomplete padding and then

591
00:24:49,619 --> 00:24:53,580
finally the<font color="#CCCCCC"> last test case that's in</font>

592
00:24:51,989 --> 00:24:56,759
here I can't<font color="#E5E5E5"> really take</font><font color="#CCCCCC"> credit for this</font>

593
00:24:53,580 --> 00:24:59,908
<font color="#CCCCCC">one</font><font color="#E5E5E5"> because this came from</font><font color="#CCCCCC"> your ax</font><font color="#E5E5E5"> Sam</font>

594
00:24:56,759 --> 00:25:02,339
Roffe<font color="#E5E5E5"> ski Robert Margot and Nimrod</font><font color="#CCCCCC"> Avram</font>

595
00:24:59,909 --> 00:25:04,289
who I collaborated<font color="#E5E5E5"> with on some research</font>

596
00:25:02,339 --> 00:25:06,989
<font color="#E5E5E5">but basically the</font><font color="#CCCCCC"> idea here is that</font>

597
00:25:04,289 --> 00:25:09,419
<font color="#E5E5E5">we've got a zero length record so we're</font>

598
00:25:06,989 --> 00:25:12,599
leaving<font color="#E5E5E5"> enough data that there is a Mac</font>

599
00:25:09,419 --> 00:25:14,279
<font color="#E5E5E5">and padding but nothing else and this</font>

600
00:25:12,599 --> 00:25:18,869
can trigger some problems with certain

601
00:25:14,279 --> 00:25:21,269
<font color="#CCCCCC">OpenSSL builds so I put</font><font color="#E5E5E5"> all these test</font>

602
00:25:18,869 --> 00:25:24,359
cases<font color="#E5E5E5"> into my tool and I started</font>

603
00:25:21,269 --> 00:25:26,909
<font color="#CCCCCC">scanning the lab at tripwire to see what</font>

604
00:25:24,359 --> 00:25:29,339
would come<font color="#E5E5E5"> up I found a lot</font><font color="#CCCCCC"> of targets I</font>

605
00:25:26,909 --> 00:25:32,700
validate<font color="#CCCCCC"> admira Zulte sagessa tripwire</font>

606
00:25:29,339 --> 00:25:35,458
IP 360 tool and found that<font color="#E5E5E5"> things were</font>

607
00:25:32,700 --> 00:25:39,169
as expected<font color="#E5E5E5"> except one one thing stood</font>

608
00:25:35,459 --> 00:25:43,169
out the<font color="#E5E5E5"> Cisco is a that had CV 2015</font>

609
00:25:39,169 --> 00:25:45,989
44:58 this should not have had poodle

610
00:25:43,169 --> 00:25:48,779
<font color="#E5E5E5">but it was matching my thing so I looked</font>

611
00:25:45,989 --> 00:25:52,549
into<font color="#E5E5E5"> this bug and found that it had been</font>

612
00:25:48,779 --> 00:25:55,049
<font color="#E5E5E5">previously found and called</font><font color="#CCCCCC"> Mase</font>

613
00:25:52,549 --> 00:25:57,179
<font color="#E5E5E5">basically it's the problem was that the</font>

614
00:25:55,049 --> 00:25:59,519
<font color="#CCCCCC">caveum network accelerator in this</font>

615
00:25:57,179 --> 00:26:03,839
device was having<font color="#CCCCCC"> Mac validation</font>

616
00:25:59,519 --> 00:26:07,169
disabled now I look at<font color="#E5E5E5"> this bug and I</font>

617
00:26:03,839 --> 00:26:09,749
see a classic padding Oracle but<font color="#CCCCCC"> miter</font>

618
00:26:07,169 --> 00:26:11,219
looked at this bug and they said could

619
00:26:09,749 --> 00:26:15,179
allow a<font color="#E5E5E5"> man-in-the-middle attack errs to</font>

620
00:26:11,219 --> 00:26:17,129
spoof TLS content<font color="#E5E5E5"> Cisco they were more</font>

621
00:26:15,179 --> 00:26:19,259
direct<font color="#E5E5E5"> in saying a successful exploit of</font>

622
00:26:17,129 --> 00:26:22,259
this<font color="#E5E5E5"> vulnerability</font><font color="#CCCCCC"> does not allow an</font>

623
00:26:19,259 --> 00:26:25,139
attacker to decrypt<font color="#E5E5E5"> the packets and I</font>

624
00:26:22,259 --> 00:26:29,759
<font color="#E5E5E5">saw this as a challenge</font><font color="#CCCCCC"> and I took</font><font color="#E5E5E5"> that</font>

625
00:26:25,139 --> 00:26:33,559
<font color="#E5E5E5">challenge</font><font color="#CCCCCC"> so to me you should</font><font color="#E5E5E5"> be able to</font>

626
00:26:29,759 --> 00:26:36,269
<font color="#E5E5E5">exploit this pretty similar to poodle</font><font color="#CCCCCC"> so</font>

627
00:26:33,559 --> 00:26:38,729
you've got a man in the<font color="#E5E5E5"> middle you've</font>

628
00:26:36,269 --> 00:26:40,679
got a victim<font color="#E5E5E5"> that's using CBC ciphers</font>

629
00:26:38,729 --> 00:26:42,340
and<font color="#E5E5E5"> ultimately you're</font><font color="#CCCCCC"> going to be able</font>

630
00:26:40,679 --> 00:26:44,470
<font color="#CCCCCC">to steal some</font>

631
00:26:42,340 --> 00:26:46,570
secret information<font color="#E5E5E5"> like a session</font><font color="#CCCCCC"> cookie</font>

632
00:26:44,470 --> 00:26:49,289
<font color="#CCCCCC">or an authentication</font><font color="#E5E5E5"> header of some</font>

633
00:26:46,570 --> 00:26:52,330
other sort the difference is that

634
00:26:49,289 --> 00:26:55,419
<font color="#CCCCCC">Goldendoodle</font><font color="#E5E5E5"> as I'm going</font><font color="#CCCCCC"> to name</font><font color="#E5E5E5"> this</font>

635
00:26:52,330 --> 00:26:57,370
is much faster<font color="#CCCCCC"> than poodle because the</font>

636
00:26:55,419 --> 00:27:00,309
<font color="#CCCCCC">decryption is</font><font color="#E5E5E5"> deterministic as we'll see</font>

637
00:26:57,370 --> 00:27:02,770
<font color="#E5E5E5">in a moment so the trick here</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> that</font>

638
00:27:00,309 --> 00:27:05,770
<font color="#E5E5E5">because the Mac bytes are not being</font>

639
00:27:02,770 --> 00:27:08,590
validated<font color="#CCCCCC"> we're actually able to set a</font>

640
00:27:05,770 --> 00:27:11,289
guess<font color="#E5E5E5"> in that block that</font><font color="#CCCCCC"> I've labeled G</font>

641
00:27:08,590 --> 00:27:12,928
there and use that<font color="#CCCCCC"> to</font><font color="#E5E5E5"> influence the</font>

642
00:27:11,289 --> 00:27:15,669
decryption<font color="#E5E5E5"> so that we can actually</font>

643
00:27:12,929 --> 00:27:17,559
<font color="#E5E5E5">validate whether or not a guess that we</font>

644
00:27:15,669 --> 00:27:19,690
have for a particular plaintext<font color="#E5E5E5"> byte is</font>

645
00:27:17,559 --> 00:27:21,250
correct<font color="#E5E5E5"> so in that way we can</font>

646
00:27:19,690 --> 00:27:24,150
iteratively go through all possible

647
00:27:21,250 --> 00:27:27,520
<font color="#E5E5E5">characters and brute force decrypt this</font>

648
00:27:24,150 --> 00:27:30,990
so you can see<font color="#CCCCCC"> there the equation for</font>

649
00:27:27,520 --> 00:27:35,049
how we're calculating<font color="#E5E5E5"> this but basically</font>

650
00:27:30,990 --> 00:27:37,360
we're<font color="#E5E5E5"> going to guess the plaintext value</font>

651
00:27:35,049 --> 00:27:39,610
and use that by<font color="#E5E5E5"> exhorting with the</font>

652
00:27:37,360 --> 00:27:41,379
previous ciphertext<font color="#CCCCCC"> to come</font><font color="#E5E5E5"> up with what</font>

653
00:27:39,610 --> 00:27:44,678
<font color="#E5E5E5">would have been the block cipher</font>

654
00:27:41,380 --> 00:27:46,750
<font color="#E5E5E5">decryption output from this targeted</font>

655
00:27:44,679 --> 00:27:49,960
ciphertext block<font color="#E5E5E5"> if our guess was</font>

656
00:27:46,750 --> 00:27:53,340
correct<font color="#CCCCCC"> now</font><font color="#E5E5E5"> using that we basically just</font>

657
00:27:49,960 --> 00:27:55,919
fix<font color="#CCCCCC"> that value</font><font color="#E5E5E5"> into</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> guest spot and</font>

658
00:27:53,340 --> 00:27:58,570
if it<font color="#E5E5E5"> ends up</font><font color="#CCCCCC"> that our guess was correct</font>

659
00:27:55,919 --> 00:28:00,070
<font color="#E5E5E5">then these numbers are going</font><font color="#CCCCCC"> to cancel</font>

660
00:27:58,570 --> 00:28:02,200
out<font color="#E5E5E5"> because you're going to be</font><font color="#CCCCCC"> x soaring</font>

661
00:28:00,070 --> 00:28:03,850
something against itself that<font color="#CCCCCC"> gives you</font>

662
00:28:02,200 --> 00:28:08,770
<font color="#E5E5E5">0 which is going to be your valid</font>

663
00:28:03,850 --> 00:28:10,299
padding so you can see here this<font color="#CCCCCC"> is what</font>

664
00:28:08,770 --> 00:28:13,120
it would look<font color="#CCCCCC"> like if our guess is</font>

665
00:28:10,299 --> 00:28:15,940
correct<font color="#E5E5E5"> you've got the padding length</font>

666
00:28:13,120 --> 00:28:19,600
being<font color="#CCCCCC"> 0</font><font color="#E5E5E5"> the Mac is wrong but the server</font>

667
00:28:15,940 --> 00:28:21,940
doesn't<font color="#E5E5E5"> care</font><font color="#CCCCCC"> so as I was</font><font color="#E5E5E5"> saying</font><font color="#CCCCCC"> the</font>

668
00:28:19,600 --> 00:28:24,730
attacker is going<font color="#E5E5E5"> to now be able</font><font color="#CCCCCC"> to for</font>

669
00:28:21,940 --> 00:28:28,059
<font color="#E5E5E5">each intercepted request make a guess or</font>

670
00:28:24,730 --> 00:28:32,020
<font color="#E5E5E5">validate a guess for what one targeted</font>

671
00:28:28,059 --> 00:28:33,850
byte is this means that as opposed to

672
00:28:32,020 --> 00:28:36,970
<font color="#CCCCCC">poodle where you've got an average of</font>

673
00:28:33,850 --> 00:28:39,280
256 requests for every byte with golden

674
00:28:36,970 --> 00:28:43,299
doodle<font color="#E5E5E5"> any byte could be decrypted</font><font color="#CCCCCC"> in at</font>

675
00:28:39,280 --> 00:28:45,700
most 255 requests and<font color="#E5E5E5"> frankly though</font>

676
00:28:43,299 --> 00:28:48,010
because<font color="#E5E5E5"> HTTP is a plain text protocol</font>

677
00:28:45,700 --> 00:28:51,010
<font color="#E5E5E5">you're limited</font><font color="#CCCCCC"> to these printable ASCII</font>

678
00:28:48,010 --> 00:28:53,379
characters<font color="#E5E5E5"> 95 of them which means that</font>

679
00:28:51,010 --> 00:28:54,820
you've really<font color="#E5E5E5"> only got 90 for maximum</font>

680
00:28:53,380 --> 00:28:55,389
requests that<font color="#E5E5E5"> you're going to need to do</font>

681
00:28:54,820 --> 00:28:57,908
<font color="#E5E5E5">before</font>

682
00:28:55,389 --> 00:29:01,718
<font color="#CCCCCC">no any bite that</font><font color="#E5E5E5"> might be realistically</font>

683
00:28:57,909 --> 00:29:04,209
found within<font color="#E5E5E5"> an HTTP packet</font><font color="#CCCCCC"> and there's</font>

684
00:29:01,719 --> 00:29:07,209
also<font color="#E5E5E5"> other interesting</font><font color="#CCCCCC"> cases like</font><font color="#E5E5E5"> this</font>

685
00:29:04,209 --> 00:29:10,859
<font color="#CCCCCC">Cisco</font><font color="#E5E5E5"> is a for example</font><font color="#CCCCCC"> the web VPN mode</font>

686
00:29:07,209 --> 00:29:13,869
on<font color="#E5E5E5"> it it uses</font><font color="#CCCCCC"> a hexadecimal</font><font color="#E5E5E5"> session ID</font>

687
00:29:10,859 --> 00:29:17,079
all with<font color="#E5E5E5"> lowercase I think it is letters</font>

688
00:29:13,869 --> 00:29:18,820
<font color="#E5E5E5">so in that case you're talking</font><font color="#CCCCCC"> about 15</font>

689
00:29:17,079 --> 00:29:21,999
requests for<font color="#CCCCCC"> each</font><font color="#E5E5E5"> byte</font><font color="#CCCCCC"> that you're</font>

690
00:29:18,820 --> 00:29:24,939
trying<font color="#E5E5E5"> to decrypt so I made a perfect</font>

691
00:29:21,999 --> 00:29:27,249
<font color="#E5E5E5">concept of this it went very easily I</font>

692
00:29:24,940 --> 00:29:29,109
did it in Python using<font color="#E5E5E5"> IP tables it</font>

693
00:29:27,249 --> 00:29:31,839
wasn't like a full realistic exploit

694
00:29:29,109 --> 00:29:34,109
scenario but rather just having curl

695
00:29:31,839 --> 00:29:36,458
being the victim running<font color="#CCCCCC"> in a loop and</font>

696
00:29:34,109 --> 00:29:40,149
redirecting my traffic through IP<font color="#CCCCCC"> tables</font>

697
00:29:36,459 --> 00:29:43,499
to my script<font color="#CCCCCC"> I tested this on the sslvpn</font>

698
00:29:40,149 --> 00:29:48,359
interface from an<font color="#CCCCCC"> SA running 9.1</font>

699
00:29:43,499 --> 00:29:51,459
subversion<font color="#CCCCCC"> 6</font><font color="#E5E5E5"> and it did in</font><font color="#CCCCCC"> fact work so</font>

700
00:29:48,359 --> 00:29:52,839
the next finding that<font color="#E5E5E5"> I had while I was</font>

701
00:29:51,459 --> 00:29:56,079
looking<font color="#CCCCCC"> through this is called zombie</font>

702
00:29:52,839 --> 00:29:57,759
poodle<font color="#E5E5E5"> this is again not poodle but it</font>

703
00:29:56,079 --> 00:30:00,099
is similar<font color="#CCCCCC"> so poodle again is</font>

704
00:29:57,759 --> 00:30:02,589
specifically<font color="#E5E5E5"> when you're talking about</font>

705
00:30:00,099 --> 00:30:05,218
the use of<font color="#CCCCCC"> the SSL v3 padding mechanism</font>

706
00:30:02,589 --> 00:30:09,428
in TLS<font color="#E5E5E5"> this is something different</font>

707
00:30:05,219 --> 00:30:11,950
what's happening here<font color="#E5E5E5"> is you're</font><font color="#CCCCCC"> looking</font>

708
00:30:09,429 --> 00:30:13,450
<font color="#CCCCCC">for any types of signals</font><font color="#E5E5E5"> that are going</font>

709
00:30:11,950 --> 00:30:17,019
<font color="#E5E5E5">to indicate that</font><font color="#CCCCCC"> non-deterministic</font>

710
00:30:13,450 --> 00:30:19,629
padding and use<font color="#E5E5E5"> those with an</font><font color="#CCCCCC"> algorithm</font>

711
00:30:17,019 --> 00:30:23,320
that<font color="#E5E5E5"> is the</font><font color="#CCCCCC"> same as poodle except the</font>

712
00:30:19,629 --> 00:30:25,089
Oracle is going to be different<font color="#CCCCCC"> so</font><font color="#E5E5E5"> the</font>

713
00:30:23,320 --> 00:30:27,189
way that<font color="#CCCCCC"> I look at this</font><font color="#E5E5E5"> for at least the</font>

714
00:30:25,089 --> 00:30:29,769
<font color="#E5E5E5">most common zombie poodle it's almost</font>

715
00:30:27,190 --> 00:30:32,109
like an inversion<font color="#E5E5E5"> of the poodle</font><font color="#CCCCCC"> Oracle</font>

716
00:30:29,769 --> 00:30:34,119
so with poodle you're looking for an

717
00:30:32,109 --> 00:30:36,849
alert<font color="#E5E5E5"> and when that alert happens it</font>

718
00:30:34,119 --> 00:30:38,649
means<font color="#E5E5E5"> that your data was not good when</font>

719
00:30:36,849 --> 00:30:41,049
the alert<font color="#E5E5E5"> is not there your data was</font>

720
00:30:38,649 --> 00:30:42,939
good a positive Oracle response but with

721
00:30:41,049 --> 00:30:45,099
zombie poodle in other words you've got

722
00:30:42,940 --> 00:30:47,440
<font color="#CCCCCC">it that when you get an</font><font color="#E5E5E5"> alert it</font>

723
00:30:45,099 --> 00:30:51,609
<font color="#E5E5E5">actually is oftentimes telling you that</font>

724
00:30:47,440 --> 00:30:53,789
your Oracle was positive<font color="#CCCCCC"> so I turned my</font>

725
00:30:51,609 --> 00:30:57,549
scanner<font color="#CCCCCC"> onto the</font><font color="#E5E5E5"> Alexa top 1 million and</font>

726
00:30:53,789 --> 00:30:59,169
I did this<font color="#E5E5E5"> because most of the popular</font>

727
00:30:57,549 --> 00:31:01,479
stacks<font color="#E5E5E5"> that</font><font color="#CCCCCC"> exist on</font><font color="#E5E5E5"> the Internet are</font>

728
00:30:59,169 --> 00:31:05,079
<font color="#E5E5E5">going to be found within the Alexa top</font>

729
00:31:01,479 --> 00:31:07,809
list here<font color="#E5E5E5"> and there's at this point now</font>

730
00:31:05,079 --> 00:31:09,190
like<font color="#CCCCCC"> 85%</font><font color="#E5E5E5"> of the hosts actually do have</font>

731
00:31:07,809 --> 00:31:11,920
HTTPS running

732
00:31:09,190 --> 00:31:14,740
and as luck would have it I had previous

733
00:31:11,920 --> 00:31:18,280
<font color="#CCCCCC">datasets</font><font color="#E5E5E5"> from doing research into the</font>

734
00:31:14,740 --> 00:31:20,620
<font color="#E5E5E5">blank</font><font color="#CCCCCC"> embark</font><font color="#E5E5E5"> Oracle's</font><font color="#CCCCCC"> last year on robot</font>

735
00:31:18,280 --> 00:31:23,260
research<font color="#E5E5E5"> so I was able</font><font color="#CCCCCC"> to correlate a</font>

736
00:31:20,620 --> 00:31:25,320
lot of this data<font color="#E5E5E5"> and kind of get a</font><font color="#CCCCCC"> sense</font>

737
00:31:23,260 --> 00:31:28,300
for what vendors<font color="#E5E5E5"> might be out there</font>

738
00:31:25,320 --> 00:31:29,800
the first scans that<font color="#E5E5E5"> I did were</font>

739
00:31:28,300 --> 00:31:33,730
conducted between August<font color="#E5E5E5"> and December</font>

740
00:31:29,800 --> 00:31:37,149
2018<font color="#CCCCCC"> and I was able</font><font color="#E5E5E5"> to identify</font><font color="#CCCCCC"> a</font>

741
00:31:33,730 --> 00:31:40,840
hundred<font color="#CCCCCC"> different behaviors among all</font><font color="#E5E5E5"> of</font>

742
00:31:37,150 --> 00:31:43,090
the targets<font color="#CCCCCC"> a lot of these were like one</font>

743
00:31:40,840 --> 00:31:45,970
officer<font color="#E5E5E5"> to office meaning you would have</font>

744
00:31:43,090 --> 00:31:48,340
just this<font color="#E5E5E5"> one server happens to have an</font>

745
00:31:45,970 --> 00:31:51,070
<font color="#CCCCCC">EO</font><font color="#E5E5E5"> F for this one error none</font><font color="#CCCCCC"> of the</font>

746
00:31:48,340 --> 00:31:53,470
others do<font color="#CCCCCC"> but there were actually</font><font color="#E5E5E5"> 46 of</font>

747
00:31:51,070 --> 00:31:57,970
them<font color="#E5E5E5"> that appeared on at least</font><font color="#CCCCCC"> 10</font>

748
00:31:53,470 --> 00:31:59,860
servers<font color="#E5E5E5"> overall there were about</font><font color="#CCCCCC"> 5,800</font>

749
00:31:57,970 --> 00:32:02,800
that I deemed to be readily exploitable

750
00:31:59,860 --> 00:32:06,419
<font color="#CCCCCC">and this is only counting ones that had</font>

751
00:32:02,800 --> 00:32:09,580
consistent observable<font color="#CCCCCC"> X our Oracles of</font>

752
00:32:06,420 --> 00:32:11,830
<font color="#CCCCCC">these there were less than a thousand</font>

753
00:32:09,580 --> 00:32:14,139
that appeared to<font color="#CCCCCC"> me to be</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> known</font>

754
00:32:11,830 --> 00:32:15,730
<font color="#E5E5E5">poodle TLS vulnerability there were</font>

755
00:32:14,140 --> 00:32:18,310
about a thousand<font color="#E5E5E5"> of them that were</font>

756
00:32:15,730 --> 00:32:22,530
<font color="#CCCCCC">Goldendoodle and then the rest of them</font>

757
00:32:18,310 --> 00:32:25,450
seemed to<font color="#E5E5E5"> be zombie poodle</font><font color="#CCCCCC"> when I</font>

758
00:32:22,530 --> 00:32:28,240
extended my test tool and did some<font color="#E5E5E5"> more</font>

759
00:32:25,450 --> 00:32:29,650
scans<font color="#E5E5E5"> and this is meanwhile after</font><font color="#CCCCCC"> three</font>

760
00:32:28,240 --> 00:32:30,070
different public advisories had been

761
00:32:29,650 --> 00:32:35,020
released

762
00:32:30,070 --> 00:32:37,030
Citrix f5 and Oracle I found<font color="#E5E5E5"> 129</font>

763
00:32:35,020 --> 00:32:39,850
<font color="#E5E5E5">discernible behaviors and part of this</font>

764
00:32:37,030 --> 00:32:41,980
<font color="#CCCCCC">is because I extended my validation</font><font color="#E5E5E5"> for</font>

765
00:32:39,850 --> 00:32:45,219
what kind of signals I was looking for

766
00:32:41,980 --> 00:32:47,080
like I added in some<font color="#CCCCCC"> code to say after</font>

767
00:32:45,220 --> 00:32:49,180
we've sent our record<font color="#E5E5E5"> and we've waited a</font>

768
00:32:47,080 --> 00:32:51,129
little<font color="#E5E5E5"> while</font><font color="#CCCCCC"> let's try and</font><font color="#E5E5E5"> close the TLS</font>

769
00:32:49,180 --> 00:32:53,980
session which means writing on to the

770
00:32:51,130 --> 00:32:55,510
socket<font color="#CCCCCC"> which means that we're possibly</font>

771
00:32:53,980 --> 00:32:57,490
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to get another error condition</font>

772
00:32:55,510 --> 00:32:58,960
back that's going<font color="#CCCCCC"> to reveal</font><font color="#E5E5E5"> whether the</font>

773
00:32:57,490 --> 00:33:01,720
session is still open<font color="#E5E5E5"> or whether the</font>

774
00:32:58,960 --> 00:33:04,000
remote<font color="#CCCCCC"> peer has terminated</font><font color="#E5E5E5"> it other</font>

775
00:33:01,720 --> 00:33:06,550
improvements that<font color="#E5E5E5"> I made I had problems</font>

776
00:33:04,000 --> 00:33:08,080
<font color="#CCCCCC">initially</font><font color="#E5E5E5"> that I mentioned</font><font color="#CCCCCC"> where</font><font color="#E5E5E5"> there</font>

777
00:33:06,550 --> 00:33:11,200
were edge cases<font color="#E5E5E5"> around the</font><font color="#CCCCCC"> Mac length</font>

778
00:33:08,080 --> 00:33:14,260
for different<font color="#CCCCCC"> cipher</font><font color="#E5E5E5"> suites which could</font>

779
00:33:11,200 --> 00:33:16,960
have caused me to miss some<font color="#CCCCCC"> host and I</font>

780
00:33:14,260 --> 00:33:18,640
also extended out my test cases<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that</font>

781
00:33:16,960 --> 00:33:21,940
it wasn't just<font color="#E5E5E5"> messing with the last</font>

782
00:33:18,640 --> 00:33:24,100
block but also throughout the packet

783
00:33:21,940 --> 00:33:25,840
in the end with this<font color="#E5E5E5"> data set collected</font>

784
00:33:24,100 --> 00:33:29,320
earlier this month<font color="#CCCCCC"> March 11th to 12th</font>

785
00:33:25,840 --> 00:33:32,500
<font color="#E5E5E5">there were nearly</font><font color="#CCCCCC"> 8,000 domains</font><font color="#E5E5E5"> with</font>

786
00:33:29,320 --> 00:33:33,970
Oracle's<font color="#E5E5E5"> but I actually only classified</font>

787
00:33:32,500 --> 00:33:36,790
about three thousand six<font color="#E5E5E5"> hundred</font><font color="#CCCCCC"> and</font>

788
00:33:33,970 --> 00:33:39,580
eighty nine of them about as observable

789
00:33:36,790 --> 00:33:41,620
and that means the<font color="#E5E5E5"> other ones</font><font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of</font>

790
00:33:39,580 --> 00:33:43,960
them were encrypted TLS alerts which

791
00:33:41,620 --> 00:33:45,929
means somebody might be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to exploit</font>

792
00:33:43,960 --> 00:33:50,190
them but it's going<font color="#E5E5E5"> to take some</font>

793
00:33:45,930 --> 00:33:52,960
JavaScript<font color="#E5E5E5"> kung-fu or something so</font>

794
00:33:50,190 --> 00:33:56,200
overall we're looking at<font color="#E5E5E5"> about one point</font>

795
00:33:52,960 --> 00:33:59,410
six<font color="#E5E5E5"> percent of the TLS enabled Alexa top</font>

796
00:33:56,200 --> 00:34:02,830
<font color="#CCCCCC">100,000</font><font color="#E5E5E5"> sites having exploitable TLS</font>

797
00:33:59,410 --> 00:34:07,150
padding Oracle's<font color="#E5E5E5"> and overall</font><font color="#CCCCCC"> there's</font>

798
00:34:02,830 --> 00:34:09,730
about<font color="#E5E5E5"> 1% this covers a lot of</font><font color="#CCCCCC"> different</font>

799
00:34:07,150 --> 00:34:12,310
<font color="#CCCCCC">important sites like couple u.s.</font><font color="#E5E5E5"> credit</font>

800
00:34:09,730 --> 00:34:13,960
reporting agencies several government

801
00:34:12,310 --> 00:34:14,679
agencies military<font color="#E5E5E5"> organizations from</font>

802
00:34:13,960 --> 00:34:17,949
<font color="#E5E5E5">around the world</font>

803
00:34:14,679 --> 00:34:20,230
lots of<font color="#E5E5E5"> commerce sites and bill paying</font>

804
00:34:17,949 --> 00:34:22,060
systems<font color="#E5E5E5"> all sorts of things</font><font color="#CCCCCC"> that</font>

805
00:34:20,230 --> 00:34:24,760
somebody<font color="#E5E5E5"> might actually want to attack</font>

806
00:34:22,060 --> 00:34:28,270
and another<font color="#E5E5E5"> thing I want to draw your</font>

807
00:34:24,760 --> 00:34:31,780
attention<font color="#CCCCCC"> to here is</font><font color="#E5E5E5"> 1.6%</font><font color="#CCCCCC"> this is for</font>

808
00:34:28,270 --> 00:34:34,420
the top<font color="#CCCCCC"> 100,000 versus 1% for</font><font color="#E5E5E5"> all of</font>

809
00:34:31,780 --> 00:34:36,640
them that tells me that again just<font color="#CCCCCC"> like</font>

810
00:34:34,420 --> 00:34:38,920
with robot<font color="#E5E5E5"> the distribution is</font>

811
00:34:36,639 --> 00:34:40,989
<font color="#E5E5E5">vulnerable systems is heavier on the</font>

812
00:34:38,920 --> 00:34:43,270
sites that are<font color="#CCCCCC"> more popular</font><font color="#E5E5E5"> which is</font>

813
00:34:40,989 --> 00:34:45,389
also probably meaning that these<font color="#E5E5E5"> are the</font>

814
00:34:43,270 --> 00:34:48,009
sites that are<font color="#E5E5E5"> spending more money and</font>

815
00:34:45,389 --> 00:34:50,319
I'll let you make<font color="#CCCCCC"> your own conclusions</font>

816
00:34:48,010 --> 00:34:52,750
about<font color="#E5E5E5"> that but I feel</font><font color="#CCCCCC"> that this says</font>

817
00:34:50,320 --> 00:34:54,550
some<font color="#CCCCCC"> things about the value of some of</font>

818
00:34:52,750 --> 00:34:58,420
<font color="#E5E5E5">these middle boxes and the quality</font><font color="#CCCCCC"> of</font>

819
00:34:54,550 --> 00:35:00,280
<font color="#E5E5E5">their implementations so</font><font color="#CCCCCC"> I'll also note</font>

820
00:34:58,420 --> 00:35:02,200
there are a lot more hosts that<font color="#E5E5E5"> are</font><font color="#CCCCCC"> out</font>

821
00:35:00,280 --> 00:35:03,940
there<font color="#E5E5E5"> that</font><font color="#CCCCCC"> are vulnerable</font><font color="#E5E5E5"> I have direct</font>

822
00:35:02,200 --> 00:35:07,149
knowledge<font color="#E5E5E5"> that another project is going</font>

823
00:35:03,940 --> 00:35:09,160
<font color="#E5E5E5">to</font><font color="#CCCCCC"> be revealing that as well some of the</font>

824
00:35:07,150 --> 00:35:12,340
things that<font color="#E5E5E5"> I missed that I know that I</font>

825
00:35:09,160 --> 00:35:14,500
missed<font color="#E5E5E5"> kind of intentionally</font><font color="#CCCCCC"> there are</font>

826
00:35:12,340 --> 00:35:16,720
cases<font color="#E5E5E5"> where a padding Oracle is only</font>

827
00:35:14,500 --> 00:35:20,560
going<font color="#E5E5E5"> to exhibit</font><font color="#CCCCCC"> if you select a</font><font color="#E5E5E5"> certain</font>

828
00:35:16,720 --> 00:35:22,569
protocol and a certain<font color="#E5E5E5"> cipher my test</font>

829
00:35:20,560 --> 00:35:25,299
was not doing<font color="#E5E5E5"> that my test was just</font>

830
00:35:22,570 --> 00:35:27,700
<font color="#E5E5E5">connecting and using whatever preference</font>

831
00:35:25,300 --> 00:35:30,070
is this<font color="#E5E5E5"> the server had the reason for</font>

832
00:35:27,700 --> 00:35:32,560
this is<font color="#CCCCCC"> that in reality if somebody is</font>

833
00:35:30,070 --> 00:35:33,940
going<font color="#CCCCCC"> to exploit this it's going</font><font color="#E5E5E5"> to be</font>

834
00:35:32,560 --> 00:35:35,290
pretty unlikely<font color="#E5E5E5"> that they're going</font><font color="#CCCCCC"> to be</font>

835
00:35:33,940 --> 00:35:35,650
able<font color="#E5E5E5"> to force the</font><font color="#CCCCCC"> selection</font><font color="#E5E5E5"> of a</font>

836
00:35:35,290 --> 00:35:37,630
particular

837
00:35:35,650 --> 00:35:40,510
<font color="#CCCCCC">ciphering</font><font color="#E5E5E5"> protocol</font><font color="#CCCCCC"> version at this point</font>

838
00:35:37,630 --> 00:35:44,020
<font color="#E5E5E5">so the most interesting cases are what</font>

839
00:35:40,510 --> 00:35:46,440
the<font color="#CCCCCC"> server's defaults are</font><font color="#E5E5E5"> also I want to</font>

840
00:35:44,020 --> 00:35:48,910
note<font color="#CCCCCC"> that I've got</font><font color="#E5E5E5"> five test cases here</font>

841
00:35:46,440 --> 00:35:52,720
<font color="#CCCCCC">there are definitely</font><font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> more things</font>

842
00:35:48,910 --> 00:35:54,460
<font color="#CCCCCC">that you could do so</font><font color="#E5E5E5"> there are</font>

843
00:35:52,720 --> 00:35:57,970
trade-offs with that though I was using

844
00:35:54,460 --> 00:36:00,190
a<font color="#E5E5E5"> five dollar VPS machine to scan the</font>

845
00:35:57,970 --> 00:36:02,140
<font color="#CCCCCC">Internet in three</font><font color="#E5E5E5"> days to three days</font>

846
00:36:00,190 --> 00:36:05,560
<font color="#E5E5E5">wouldn't</font><font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to do that if I was</font>

847
00:36:02,140 --> 00:36:07,509
<font color="#E5E5E5">extending out this test so far</font><font color="#CCCCCC"> I also</font>

848
00:36:05,560 --> 00:36:09,790
want to<font color="#E5E5E5"> note something that I'm casually</font>

849
00:36:07,510 --> 00:36:11,980
calling sleeping poodle<font color="#E5E5E5"> and that's</font>

850
00:36:09,790 --> 00:36:18,250
basically that<font color="#E5E5E5"> there's poodle TLS</font>

851
00:36:11,980 --> 00:36:20,740
problems that they really are<font color="#E5E5E5"> slv-3</font>

852
00:36:18,250 --> 00:36:22,960
padding mode being used within the

853
00:36:20,740 --> 00:36:25,149
application data but not<font color="#E5E5E5"> in the</font>

854
00:36:22,960 --> 00:36:27,430
<font color="#E5E5E5">handshake so to understand this you have</font>

855
00:36:25,150 --> 00:36:29,710
<font color="#E5E5E5">to</font><font color="#CCCCCC"> know that there's</font><font color="#E5E5E5"> multiple protocols</font>

856
00:36:27,430 --> 00:36:31,480
within<font color="#E5E5E5"> the TLS protocol you can check</font>

857
00:36:29,710 --> 00:36:33,040
out my blog<font color="#CCCCCC"> for more details on</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> but</font>

858
00:36:31,480 --> 00:36:34,480
<font color="#CCCCCC">basically you can have a separate</font>

859
00:36:33,040 --> 00:36:36,700
implementation for handshake<font color="#E5E5E5"> and</font>

860
00:36:34,480 --> 00:36:38,800
application data<font color="#CCCCCC"> and there are a number</font>

861
00:36:36,700 --> 00:36:41,230
of hosts out there and they seem to<font color="#E5E5E5"> so</font>

862
00:36:38,800 --> 00:36:42,880
with these hosts<font color="#CCCCCC"> you could</font><font color="#E5E5E5"> scan with my</font>

863
00:36:41,230 --> 00:36:45,550
pad check tool and you'll see that it

864
00:36:42,880 --> 00:36:47,500
says poodle<font color="#E5E5E5"> but if you scanned with</font>

865
00:36:45,550 --> 00:36:51,400
something like as cell labs or some

866
00:36:47,500 --> 00:36:53,080
other proper portal TLS test tool it's

867
00:36:51,400 --> 00:36:56,530
<font color="#E5E5E5">not going to recognize that as</font>

868
00:36:53,080 --> 00:36:59,470
<font color="#CCCCCC">vulnerable so the disclosures that</font><font color="#E5E5E5"> have</font>

869
00:36:56,530 --> 00:37:02,280
been going<font color="#CCCCCC"> on as I mentioned Citrix and</font>

870
00:36:59,470 --> 00:37:05,350
f5<font color="#E5E5E5"> have both released advisories already</font>

871
00:37:02,280 --> 00:37:07,810
each of these<font color="#E5E5E5"> vendors had exposure for</font>

872
00:37:05,350 --> 00:37:10,540
both zombie poodle and<font color="#CCCCCC"> Goldendoodle but</font>

873
00:37:07,810 --> 00:37:12,310
it was predominantly<font color="#E5E5E5"> zombie poodle that</font>

874
00:37:10,540 --> 00:37:14,050
I was seeing<font color="#E5E5E5"> with the Citrix host and</font>

875
00:37:12,310 --> 00:37:17,590
predominantly<font color="#CCCCCC"> goldendoodle that</font><font color="#E5E5E5"> I was</font>

876
00:37:14,050 --> 00:37:20,290
seeing with the<font color="#CCCCCC"> five hosts</font><font color="#E5E5E5"> but it's</font>

877
00:37:17,590 --> 00:37:22,960
important to note f5 was by far not the

878
00:37:20,290 --> 00:37:26,410
<font color="#E5E5E5">biggest offender of</font><font color="#CCCCCC"> goldendoodle hosts</font>

879
00:37:22,960 --> 00:37:28,930
<font color="#E5E5E5">there are several other vendors</font><font color="#CCCCCC"> that I</font>

880
00:37:26,410 --> 00:37:30,520
have ongoing communications with who<font color="#CCCCCC"> are</font>

881
00:37:28,930 --> 00:37:33,370
<font color="#E5E5E5">trying to figure</font><font color="#CCCCCC"> out whether or not it's</font>

882
00:37:30,520 --> 00:37:35,050
their product or an IPS in line so I'm

883
00:37:33,370 --> 00:37:36,339
kind of<font color="#CCCCCC"> hoping that</font><font color="#E5E5E5"> you guys will take</font>

884
00:37:35,050 --> 00:37:38,050
the tool that<font color="#E5E5E5"> I'm going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> share with</font>

885
00:37:36,340 --> 00:37:40,660
you at the<font color="#E5E5E5"> end of today</font><font color="#CCCCCC"> scan your</font>

886
00:37:38,050 --> 00:37:42,820
environments<font color="#E5E5E5"> and maybe open</font><font color="#CCCCCC"> up tickets</font>

887
00:37:40,660 --> 00:37:47,230
with vendors<font color="#CCCCCC"> to help</font><font color="#E5E5E5"> get some</font><font color="#CCCCCC"> more</font>

888
00:37:42,820 --> 00:37:49,039
patches<font color="#E5E5E5"> out so there's also some things</font>

889
00:37:47,230 --> 00:37:51,109
<font color="#E5E5E5">that I missed here because</font>

890
00:37:49,039 --> 00:37:54,859
there are things<font color="#CCCCCC"> that aren't going</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> be</font>

891
00:37:51,109 --> 00:37:57,890
<font color="#CCCCCC">in the</font><font color="#E5E5E5"> Alexa top sites for example if</font>

892
00:37:54,859 --> 00:38:00,499
you're talking<font color="#E5E5E5"> about home</font><font color="#CCCCCC"> devices and</font>

893
00:37:57,890 --> 00:38:03,319
VPN endpoints<font color="#E5E5E5"> these probably aren't</font>

894
00:38:00,499 --> 00:38:06,109
going<font color="#CCCCCC"> to end up on an Internet top site</font>

895
00:38:03,319 --> 00:38:08,749
list<font color="#E5E5E5"> but they could have</font><font color="#CCCCCC"> very important</font>

896
00:38:06,109 --> 00:38:11,150
vulnerabilities especially these SSL VPN

897
00:38:08,749 --> 00:38:13,609
systems so<font color="#E5E5E5"> that's something that</font><font color="#CCCCCC"> I</font>

898
00:38:11,150 --> 00:38:15,680
haven't<font color="#E5E5E5"> really had access to scan a lot</font>

899
00:38:13,609 --> 00:38:18,940
<font color="#E5E5E5">of different</font><font color="#CCCCCC"> vendors</font><font color="#E5E5E5"> and I would</font>

900
00:38:15,680 --> 00:38:18,940
encourage other people to do that

901
00:38:18,970 --> 00:38:25,009
there's also as I<font color="#E5E5E5"> said a lot more subtle</font>

902
00:38:22,819 --> 00:38:26,420
checks that you can do like<font color="#E5E5E5"> there are</font>

903
00:38:25,009 --> 00:38:28,460
problems<font color="#CCCCCC"> that could be exploitable</font>

904
00:38:26,420 --> 00:38:30,980
<font color="#E5E5E5">simply if a server is</font><font color="#CCCCCC"> failing</font><font color="#E5E5E5"> to</font>

905
00:38:28,460 --> 00:38:32,779
validate just one Mac<font color="#CCCCCC"> byte because if</font>

906
00:38:30,980 --> 00:38:35,539
they fail to validate just one Mac<font color="#E5E5E5"> byte</font>

907
00:38:32,779 --> 00:38:39,079
<font color="#CCCCCC">you might be able to use</font><font color="#E5E5E5"> that as part of</font>

908
00:38:35,539 --> 00:38:43,309
an Oracle<font color="#CCCCCC"> I</font><font color="#E5E5E5"> promise that</font>

909
00:38:39,079 --> 00:38:45,710
TLS 1.3 is going to save<font color="#E5E5E5"> us all</font><font color="#CCCCCC"> so the</font>

910
00:38:43,309 --> 00:38:47,660
reason for<font color="#CCCCCC"> this is that there's only</font>

911
00:38:45,710 --> 00:38:52,430
authenticated<font color="#E5E5E5"> ciphers allowed until s</font>

912
00:38:47,660 --> 00:38:55,249
1.3<font color="#E5E5E5"> I'm absolutely encouraging that</font>

913
00:38:52,430 --> 00:38:58,368
anybody in here who manages a site<font color="#E5E5E5"> you</font>

914
00:38:55,249 --> 00:39:01,609
need<font color="#E5E5E5"> to stop using TLS CBC ciphers this</font>

915
00:38:58,369 --> 00:39:06,650
<font color="#E5E5E5">Mac then pad then encrypt it's not a</font>

916
00:39:01,609 --> 00:39:10,730
good<font color="#CCCCCC"> process and really moving to TLS</font>

917
00:39:06,650 --> 00:39:13,009
1.3 is a very good<font color="#CCCCCC"> idea</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> a long time</font>

918
00:39:10,730 --> 00:39:15,549
now<font color="#E5E5E5"> the TLS specifications have</font><font color="#CCCCCC"> been</font>

919
00:39:13,009 --> 00:39:17,569
<font color="#CCCCCC">driven too far by vendors and</font>

920
00:39:15,549 --> 00:39:21,140
practitioners<font color="#E5E5E5"> rather than actual</font>

921
00:39:17,569 --> 00:39:22,788
cryptographers and I feel that<font color="#CCCCCC"> Telus 1.3</font>

922
00:39:21,140 --> 00:39:25,970
is really a sea change at<font color="#CCCCCC"> this point</font>

923
00:39:22,789 --> 00:39:28,190
that it was driven by cryptic

924
00:39:25,970 --> 00:39:31,939
cryptography and security and privacy

925
00:39:28,190 --> 00:39:34,700
<font color="#E5E5E5">rather than business needs and what's</font>

926
00:39:31,940 --> 00:39:36,799
going<font color="#CCCCCC"> to sell I have some</font>

927
00:39:34,700 --> 00:39:39,919
acknowledgments that I want to make so

928
00:39:36,799 --> 00:39:42,859
Hana book had inspired me to do this

929
00:39:39,920 --> 00:39:44,869
kind<font color="#CCCCCC"> of work</font><font color="#E5E5E5"> we had spoken after</font>

930
00:39:42,859 --> 00:39:46,759
blackhat after the robot<font color="#CCCCCC"> research and</font>

931
00:39:44,869 --> 00:39:47,960
talked about the different<font color="#CCCCCC"> things that</font>

932
00:39:46,759 --> 00:39:50,779
<font color="#E5E5E5">might still</font><font color="#CCCCCC"> be out</font><font color="#E5E5E5"> there</font>

933
00:39:47,960 --> 00:39:53,089
<font color="#E5E5E5">basically well-known crypto flaws</font><font color="#CCCCCC"> that</font>

934
00:39:50,779 --> 00:39:55,220
<font color="#CCCCCC">are still making</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> REA on the</font><font color="#E5E5E5"> Internet</font>

935
00:39:53,089 --> 00:39:57,710
I also want to give a special thanks<font color="#E5E5E5"> to</font>

936
00:39:55,220 --> 00:40:00,259
<font color="#E5E5E5">Robert</font><font color="#CCCCCC"> Mayer get your ice or summer off</font>

937
00:39:57,710 --> 00:40:02,990
ski<font color="#E5E5E5"> and Nimrod</font><font color="#CCCCCC"> Avram</font>

938
00:40:00,259 --> 00:40:04,520
these guys did a really<font color="#CCCCCC"> awesome project</font>

939
00:40:02,990 --> 00:40:08,390
which is going<font color="#E5E5E5"> to be in the</font><font color="#CCCCCC"> USENIX</font>

940
00:40:04,520 --> 00:40:10,910
proceedings<font color="#E5E5E5"> this year and you can check</font>

941
00:40:08,390 --> 00:40:13,670
<font color="#E5E5E5">out their repo</font><font color="#CCCCCC"> it's the</font><font color="#E5E5E5"> bottom link</font>

942
00:40:10,910 --> 00:40:17,390
there and this top link is the repo for

943
00:40:13,670 --> 00:40:19,070
getting the pad check tool<font color="#E5E5E5"> and I've been</font>

944
00:40:17,390 --> 00:40:21,109
told that<font color="#E5E5E5"> they will also be releasing</font>

945
00:40:19,070 --> 00:40:24,440
their tool today<font color="#CCCCCC"> I expect that it will</font>

946
00:40:21,110 --> 00:40:26,480
end up<font color="#E5E5E5"> on that bottom repo and if</font>

947
00:40:24,440 --> 00:40:31,150
everybody's<font color="#CCCCCC"> copied down those links</font><font color="#E5E5E5"> I'm</font>

948
00:40:26,480 --> 00:40:31,150
just going to give<font color="#E5E5E5"> him one more second</font>

949
00:40:38,200 --> 00:40:48,600
<font color="#E5E5E5">okay so now I have</font><font color="#CCCCCC"> a few</font><font color="#E5E5E5"> minutes for</font>

950
00:40:40,690 --> 00:40:48,600
<font color="#CCCCCC">questions say anybody</font><font color="#E5E5E5"> have any questions</font>

951
00:40:55,730 --> 00:41:00,319
somebody must have<font color="#E5E5E5"> a question</font><font color="#CCCCCC"> I guess I</font>

952
00:40:59,450 --> 00:41:03,189
did a very<font color="#E5E5E5"> good</font><font color="#CCCCCC"> job explaining</font>

953
00:41:00,319 --> 00:41:03,190
<font color="#E5E5E5">everything then</font>

954
00:41:09,760 --> 00:41:12,780
well<font color="#E5E5E5"> thank you everybody for your time</font>

955
00:41:11,650 --> 00:41:20,019
<font color="#E5E5E5">then</font>

956
00:41:12,780 --> 00:41:20,019
[Applause]

