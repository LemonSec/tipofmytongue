1
00:00:00,030 --> 00:00:05,910
welcome all welcome to the presentation

2
00:00:02,310 --> 00:00:10,950
Microsoft Office in Wonderland's my name

3
00:00:05,910 --> 00:00:13,620
is Peter this is Stan we will taking you

4
00:00:10,950 --> 00:00:16,560
along on a journey into office we are

5
00:00:13,620 --> 00:00:19,350
red teamers or for outflank a small

6
00:00:16,560 --> 00:00:21,419
company in the Meadowlands we perform

7
00:00:19,350 --> 00:00:24,480
adversary simulation at phones pen

8
00:00:21,420 --> 00:00:26,810
testing and in that process we often use

9
00:00:24,480 --> 00:00:29,939
Microsoft Office one to write reports

10
00:00:26,810 --> 00:00:33,030
but also to send malicious documents to

11
00:00:29,939 --> 00:00:35,550
our clients to our targets and in the

12
00:00:33,030 --> 00:00:39,450
process we always rely on standard

13
00:00:35,550 --> 00:00:41,968
tricks like office macros and dde

14
00:00:39,450 --> 00:00:43,920
for code execution but we've

15
00:00:41,969 --> 00:00:45,539
investigated office for in a broader

16
00:00:43,920 --> 00:00:47,280
perspective and flipped into other

17
00:00:45,539 --> 00:00:51,360
features of the office suite we can

18
00:00:47,280 --> 00:00:53,520
abuse and how we can just bring this

19
00:00:51,360 --> 00:00:56,129
further just taking Word and Excel and

20
00:00:53,520 --> 00:01:00,539
see what other malicious uses we can

21
00:00:56,129 --> 00:01:05,539
take from in our in our attacks so the

22
00:01:00,539 --> 00:01:07,560
first question is if we take dde and

23
00:01:05,540 --> 00:01:09,750
macros we always look into code

24
00:01:07,560 --> 00:01:13,770
execution but do we actually need code

25
00:01:09,750 --> 00:01:17,159
execution so what can we do with a

26
00:01:13,770 --> 00:01:19,710
system if we don't do code execution for

27
00:01:17,159 --> 00:01:24,090
that let's let's look into one of them

28
00:01:19,710 --> 00:01:32,280
the demos let's let's try to steal

29
00:01:24,090 --> 00:01:35,280
credentials so this is our web server

30
00:01:32,280 --> 00:01:37,189
running and on the web server it only

31
00:01:35,280 --> 00:01:41,640
gives a basic authentication response

32
00:01:37,189 --> 00:01:43,350
and then so that's my attacker system

33
00:01:41,640 --> 00:01:46,220
and then on the user system I send the

34
00:01:43,350 --> 00:01:51,059
user a specific backdoor document or a

35
00:01:46,220 --> 00:01:57,180
malformed document and then the user

36
00:01:51,060 --> 00:01:59,369
will see we have the following behavior

37
00:01:57,180 --> 00:02:02,579
so he opens his document which was just

38
00:01:59,369 --> 00:02:05,369
sent by email and the user suddenly gets

39
00:02:02,579 --> 00:02:08,788
a prompt our username password prompt

40
00:02:05,369 --> 00:02:10,258
and it says well this server reports

41
00:02:08,788 --> 00:02:12,450
that it needs a password for outflank

42
00:02:10,258 --> 00:02:13,649
and the user just types in his passwords

43
00:02:12,450 --> 00:02:16,470
his username

44
00:02:13,650 --> 00:02:18,140
and in my attacker system I do get the

45
00:02:16,470 --> 00:02:20,730
username in the password being provided

46
00:02:18,140 --> 00:02:22,679
so from a user perspective this looks

47
00:02:20,730 --> 00:02:24,238
just very standard this looks like

48
00:02:22,680 --> 00:02:26,190
SharePoint asking for the youth for the

49
00:02:24,239 --> 00:02:27,720
passwords but something different was

50
00:02:26,190 --> 00:02:31,680
happening here because as an attacker I

51
00:02:27,720 --> 00:02:37,379
just stole the passwords so what

52
00:02:31,680 --> 00:02:39,540
happened here is a trick which relies on

53
00:02:37,379 --> 00:02:41,340
fields and for fields we need to dive

54
00:02:39,540 --> 00:02:46,349
into a deeper a bit deeper into into

55
00:02:41,340 --> 00:02:49,739
office so if we go into words there are

56
00:02:46,349 --> 00:02:52,619
some hidden old-school gems and one of

57
00:02:49,739 --> 00:02:57,810
the old-school gems is if you go to in

58
00:02:52,620 --> 00:02:59,700
the insert mode there's this quick parts

59
00:02:57,810 --> 00:03:01,500
button and if you just start clicking

60
00:02:59,700 --> 00:03:03,450
around a word which is kind of what our

61
00:03:01,500 --> 00:03:05,879
research is we just click around a word

62
00:03:03,450 --> 00:03:09,839
and we try to find nice features you'll

63
00:03:05,879 --> 00:03:13,440
see there is a fields button and this

64
00:03:09,840 --> 00:03:16,079
fields button it has a lot of additional

65
00:03:13,440 --> 00:03:17,549
options and feature here you see you can

66
00:03:16,079 --> 00:03:21,200
have the author of the document as a

67
00:03:17,549 --> 00:03:24,900
field you can have an include picture

68
00:03:21,200 --> 00:03:26,700
you can include all other interesting

69
00:03:24,900 --> 00:03:28,139
things so one of the interesting things

70
00:03:26,700 --> 00:03:29,760
you can include is an include picture

71
00:03:28,139 --> 00:03:34,019
and what you can say is I want to have a

72
00:03:29,760 --> 00:03:36,200
picture of my my malicious host so just

73
00:03:34,019 --> 00:03:40,049
an HTTP URL you can type it in here and

74
00:03:36,200 --> 00:03:41,790
on the HTTP URL you can say well I want

75
00:03:40,049 --> 00:03:44,010
to have this include picture to be

76
00:03:41,790 --> 00:03:45,629
dynamic so I don't want this picture to

77
00:03:44,010 --> 00:03:48,629
be stored within the document I want

78
00:03:45,629 --> 00:03:52,168
this picture to be a dynamic look a

79
00:03:48,629 --> 00:03:54,780
retrieval of this of this URL and with

80
00:03:52,169 --> 00:03:56,549
that in words next time a user opens a

81
00:03:54,780 --> 00:03:58,230
document it will load the picture well

82
00:03:56,549 --> 00:04:01,440
that already is a very simple trick for

83
00:03:58,230 --> 00:04:03,569
us to use as a water watermarking so we

84
00:04:01,440 --> 00:04:05,669
know as a tracking pixel we know when a

85
00:04:03,569 --> 00:04:07,888
user opens a document so that's kind of

86
00:04:05,669 --> 00:04:11,160
also where this research towards we were

87
00:04:07,889 --> 00:04:12,569
just playing with these fields and there

88
00:04:11,160 --> 00:04:15,120
are quite some interesting fields in

89
00:04:12,569 --> 00:04:18,149
this one so we have include picture to

90
00:04:15,120 --> 00:04:20,728
retrieve a remote content or to retrieve

91
00:04:18,149 --> 00:04:24,799
a picture from a remote location we have

92
00:04:20,728 --> 00:04:26,180
a user named user addresses all kind of

93
00:04:24,800 --> 00:04:28,340
attributes

94
00:04:26,180 --> 00:04:30,680
and they are typically used in the

95
00:04:28,340 --> 00:04:33,590
old-school way of how to use templates

96
00:04:30,680 --> 00:04:37,160
invert or in mail merges so if a user

97
00:04:33,590 --> 00:04:46,190
opens a document you will these fields

98
00:04:37,160 --> 00:04:48,350
will get updated so include picture I

99
00:04:46,190 --> 00:04:50,150
just mentioned that's very valuable for

100
00:04:48,350 --> 00:04:52,550
tracking a user whether we open the

101
00:04:50,150 --> 00:04:54,679
document or not but if we do go into the

102
00:04:52,550 --> 00:04:56,150
demo I just I just demonstrated it this

103
00:04:54,680 --> 00:04:58,100
is about credential theft so how does

104
00:04:56,150 --> 00:04:59,840
that work well this is a combination of

105
00:04:58,100 --> 00:05:03,470
multiple layers of fields in within each

106
00:04:59,840 --> 00:05:07,909
other and this is a CVE Microsoft

107
00:05:03,470 --> 00:05:09,500
patched is in January so we reported it

108
00:05:07,910 --> 00:05:14,030
took them a couple of months before they

109
00:05:09,500 --> 00:05:15,889
could patch it so what this this is this

110
00:05:14,030 --> 00:05:18,380
is an include picture just the same as

111
00:05:15,889 --> 00:05:21,410
as this standard picture we often use as

112
00:05:18,380 --> 00:05:23,810
attackers but in this picture we said

113
00:05:21,410 --> 00:05:28,120
this URL contains this username field

114
00:05:23,810 --> 00:05:30,919
and the user name field is dynamic and

115
00:05:28,120 --> 00:05:32,539
we don't store this in a docx file but

116
00:05:30,919 --> 00:05:34,400
we store this in a dot X file or in a

117
00:05:32,539 --> 00:05:36,530
dot file which is a template so when the

118
00:05:34,400 --> 00:05:39,590
user double clicks it the user named

119
00:05:36,530 --> 00:05:42,320
string gets updated by doing that update

120
00:05:39,590 --> 00:05:45,888
the URL gets updated and by doing that

121
00:05:42,320 --> 00:05:47,510
suddenly the request of the web server

122
00:05:45,889 --> 00:05:51,110
does process basic authentication

123
00:05:47,510 --> 00:05:52,219
responses so so where normally if you

124
00:05:51,110 --> 00:05:54,110
would have an include picture with a

125
00:05:52,220 --> 00:05:56,120
basic authentication response it would

126
00:05:54,110 --> 00:05:58,039
just ignore it word was just ignore this

127
00:05:56,120 --> 00:06:01,009
by doing this trick so it should be in

128
00:05:58,039 --> 00:06:02,599
the header it should be a dynamic URL

129
00:06:01,009 --> 00:06:07,070
and we do this by including this

130
00:06:02,599 --> 00:06:10,430
username field and we and we use a dot X

131
00:06:07,070 --> 00:06:13,159
file we suddenly have this nice

132
00:06:10,430 --> 00:06:15,770
credential pop-up and the nice thing is

133
00:06:13,159 --> 00:06:18,020
as long as we as an attacker keep giving

134
00:06:15,770 --> 00:06:19,698
failed authentication responses and ask

135
00:06:18,020 --> 00:06:22,250
for new credentials the user will keep

136
00:06:19,699 --> 00:06:24,409
getting prompts so the user can't open

137
00:06:22,250 --> 00:06:29,300
word until it just gave the last ten

138
00:06:24,409 --> 00:06:33,320
passwords ever used so this is CVE

139
00:06:29,300 --> 00:06:36,969
of a five for zero we have another one

140
00:06:33,320 --> 00:06:39,440
which also relies on fields so

141
00:06:36,969 --> 00:06:39,889
credential stealing without markers and

142
00:06:39,440 --> 00:06:41,389
without

143
00:06:39,889 --> 00:06:44,749
execution is noise but maybe you want to

144
00:06:41,389 --> 00:06:49,719
steal files as well and for that there

145
00:06:44,749 --> 00:06:54,560
was this - mm - there was this this this

146
00:06:49,719 --> 00:06:57,439
CVE in word which used a quote and then

147
00:06:54,560 --> 00:07:00,020
a filename and an includes text and this

148
00:06:57,439 --> 00:07:02,419
include text field you can use it to

149
00:07:00,020 --> 00:07:05,479
include text from a text file on disk so

150
00:07:02,419 --> 00:07:09,289
you can say include text see the semi

151
00:07:05,479 --> 00:07:14,300
colon slash - and a text file the patch

152
00:07:09,289 --> 00:07:17,150
Microsoft made was - well to just not

153
00:07:14,300 --> 00:07:18,979
update this field anymore and our

154
00:07:17,150 --> 00:07:24,948
challenge was how can we get this

155
00:07:18,979 --> 00:07:26,688
include text to update and again by

156
00:07:24,949 --> 00:07:31,729
using these fields which is like real

157
00:07:26,689 --> 00:07:44,599
legacy old-school stuff we managed to do

158
00:07:31,729 --> 00:07:47,919
that so this is again my web server

159
00:07:44,599 --> 00:07:50,210
running on the back end which just has

160
00:07:47,919 --> 00:07:52,089
runs a standard web server in this time

161
00:07:50,210 --> 00:07:54,560
so this guitar it's not running this

162
00:07:52,089 --> 00:07:58,460
basic authentication responses just a

163
00:07:54,560 --> 00:08:00,740
standard simple HTTP server and we said

164
00:07:58,460 --> 00:08:05,680
the user the following double click to

165
00:08:00,740 --> 00:08:10,099
see the monkey dance and if the user

166
00:08:05,680 --> 00:08:12,919
does that it'll click the file well

167
00:08:10,099 --> 00:08:14,569
actually nothing happens but if we now

168
00:08:12,919 --> 00:08:17,060
look into our web server something

169
00:08:14,569 --> 00:08:19,279
interesting has happens we just got this

170
00:08:17,060 --> 00:08:22,180
huge blob back and if we look carefully

171
00:08:19,279 --> 00:08:25,069
this is just the URL encoded version of

172
00:08:22,180 --> 00:08:26,569
the attenti file of that specific system

173
00:08:25,069 --> 00:08:28,219
so in this non this case there were no

174
00:08:26,569 --> 00:08:30,500
clear text passwords in it in a tense

175
00:08:28,219 --> 00:08:32,208
file but we just stole this in a tent

176
00:08:30,500 --> 00:08:37,519
file by just a user double clicking

177
00:08:32,208 --> 00:08:40,130
amount and again this relies on fields

178
00:08:37,519 --> 00:08:42,310
and a combination of fields for multiple

179
00:08:40,130 --> 00:08:42,309
layers

180
00:08:45,900 --> 00:08:51,520
so how this one is built up is is it's

181
00:08:49,690 --> 00:08:54,100
multiple layers so we have an include

182
00:08:51,520 --> 00:08:58,720
picture with a monkey but next to that

183
00:08:54,100 --> 00:09:01,620
we see another include picture which

184
00:08:58,720 --> 00:09:05,590
points to a malicious web server and

185
00:09:01,620 --> 00:09:08,140
then includes text so if this field this

186
00:09:05,590 --> 00:09:11,440
include picture field so this picture

187
00:09:08,140 --> 00:09:14,800
would be updated we would send the text

188
00:09:11,440 --> 00:09:17,260
of the intent file to this malicious web

189
00:09:14,800 --> 00:09:19,300
server but now we just need to force it

190
00:09:17,260 --> 00:09:20,770
to update this Microsoft's patch said

191
00:09:19,300 --> 00:09:23,560
well we want to update this include text

192
00:09:20,770 --> 00:09:25,540
anymore and for that we use yet another

193
00:09:23,560 --> 00:09:28,300
field and that field is named a macro

194
00:09:25,540 --> 00:09:29,920
button a macro buttons have not not

195
00:09:28,300 --> 00:09:31,990
really something to do with macros as we

196
00:09:29,920 --> 00:09:35,800
know it from VBA this is just a field

197
00:09:31,990 --> 00:09:37,660
and it's just a button it doesn't look

198
00:09:35,800 --> 00:09:40,209
like a button but in in the word context

199
00:09:37,660 --> 00:09:42,459
it says is it a button and what that

200
00:09:40,210 --> 00:09:44,410
means is if you select it you select the

201
00:09:42,460 --> 00:09:47,020
full the full macro button so you can't

202
00:09:44,410 --> 00:09:48,390
select something in it so as you see

203
00:09:47,020 --> 00:09:50,340
when we run you're double clicking

204
00:09:48,390 --> 00:09:52,750
you'll see that there's a bigger

205
00:09:50,340 --> 00:09:54,700
building block selected which is the

206
00:09:52,750 --> 00:09:56,020
button kind of the context and we want

207
00:09:54,700 --> 00:09:58,300
you to double click that one all the

208
00:09:56,020 --> 00:10:00,670
contact of this macro button is being

209
00:09:58,300 --> 00:10:02,680
updated which then updates the monkey

210
00:10:00,670 --> 00:10:05,560
picture not that interesting and it

211
00:10:02,680 --> 00:10:07,569
updates this web server and it's an

212
00:10:05,560 --> 00:10:10,359
attempt file a census in a tenth file so

213
00:10:07,570 --> 00:10:12,760
this is again a way how we just by

214
00:10:10,360 --> 00:10:15,370
ingeniously combining this very legacy

215
00:10:12,760 --> 00:10:18,040
fields building them into each other

216
00:10:15,370 --> 00:10:20,170
trying to take different events how we

217
00:10:18,040 --> 00:10:24,000
could steal arbitrary files by just a

218
00:10:20,170 --> 00:10:26,530
user double-clicking something in Word

219
00:10:24,000 --> 00:10:28,480
we've submitted this again to Microsoft

220
00:10:26,530 --> 00:10:30,130
again took them three to four months for

221
00:10:28,480 --> 00:10:33,760
patching because they had to change

222
00:10:30,130 --> 00:10:36,450
something deeper into into words and the

223
00:10:33,760 --> 00:10:39,100
mitigation of Microsoft turned out to be

224
00:10:36,450 --> 00:10:41,860
an additional security warning so

225
00:10:39,100 --> 00:10:44,410
anybody who is now using an up-to-date

226
00:10:41,860 --> 00:10:46,510
version of Office has this new warning

227
00:10:44,410 --> 00:10:48,880
feature introduced that this document

228
00:10:46,510 --> 00:10:51,970
contains fields that can share data with

229
00:10:48,880 --> 00:10:53,560
external parties and it is important

230
00:10:51,970 --> 00:10:56,760
that you only open such a file from a

231
00:10:53,560 --> 00:10:59,729
trusted location so

232
00:10:56,760 --> 00:11:03,360
two things we already did in words which

233
00:10:59,730 --> 00:11:06,030
like legacy features no code execution

234
00:11:03,360 --> 00:11:07,290
and still we can do stuff which we

235
00:11:06,030 --> 00:11:11,870
really don't want to happen to your

236
00:11:07,290 --> 00:11:17,219
users these were the legacy features but

237
00:11:11,870 --> 00:11:20,640
sometimes we just get new features being

238
00:11:17,220 --> 00:11:22,710
added to excel and words and for that we

239
00:11:20,640 --> 00:11:27,060
need to meet em and they get and

240
00:11:22,710 --> 00:11:32,030
transform abuse so one today I was

241
00:11:27,060 --> 00:11:35,160
opening my excel and I saw this pop-up

242
00:11:32,030 --> 00:11:36,780
need to import data we just have this

243
00:11:35,160 --> 00:11:38,579
new feature it's cool to get and

244
00:11:36,780 --> 00:11:41,640
transform wizards or we get them

245
00:11:38,580 --> 00:11:43,830
transform feature turns out to be that

246
00:11:41,640 --> 00:11:48,390
Microsoft has ported various features of

247
00:11:43,830 --> 00:11:51,810
power bi into excel and they named it

248
00:11:48,390 --> 00:11:54,300
getting transform but it's very much

249
00:11:51,810 --> 00:11:55,920
relating to power bi and in power bi you

250
00:11:54,300 --> 00:12:01,800
have the scripting language which called

251
00:11:55,920 --> 00:12:04,349
M so therefore meet M this is like the

252
00:12:01,800 --> 00:12:06,000
newest features of words in Excel so

253
00:12:04,350 --> 00:12:07,800
that's also very interesting from a

254
00:12:06,000 --> 00:12:09,600
research perspective to look into world

255
00:12:07,800 --> 00:12:21,270
how can we make abuse cases out of this

256
00:12:09,600 --> 00:12:27,240
one let me go here so this is again my

257
00:12:21,270 --> 00:12:30,480
simple web server I read and I open just

258
00:12:27,240 --> 00:12:33,300
a standard excel file it will give me a

259
00:12:30,480 --> 00:12:37,020
security warning and if we go into the

260
00:12:33,300 --> 00:12:40,410
Excel menu we can see which warning this

261
00:12:37,020 --> 00:12:42,630
is this is not about macros this is

262
00:12:40,410 --> 00:12:45,060
about a web service and about external

263
00:12:42,630 --> 00:12:47,040
data connections so we think we open an

264
00:12:45,060 --> 00:12:49,439
excel sheet which just opens external

265
00:12:47,040 --> 00:12:50,520
data connections that's hopefully where

266
00:12:49,440 --> 00:12:52,590
we convinced our ever we need to

267
00:12:50,520 --> 00:12:54,210
convince our user to click that or the

268
00:12:52,590 --> 00:12:55,740
victim to click that or do believe that

269
00:12:54,210 --> 00:12:57,840
this needs an external data connection

270
00:12:55,740 --> 00:12:59,940
but it's way less invasive than a macro

271
00:12:57,840 --> 00:13:02,130
warning what now happens is the

272
00:12:59,940 --> 00:13:04,710
following there's a get in transform

273
00:13:02,130 --> 00:13:08,480
feature and a get in transform feature

274
00:13:04,710 --> 00:13:08,480
can import from text files and

275
00:13:08,660 --> 00:13:12,769
well if you can import from a text file

276
00:13:10,670 --> 00:13:15,079
well then I can read from any text file

277
00:13:12,769 --> 00:13:18,379
which includes for example this in a

278
00:13:15,079 --> 00:13:21,079
tense file and then we need to submit it

279
00:13:18,379 --> 00:13:22,730
so on this screen we'll see that all the

280
00:13:21,079 --> 00:13:24,170
data has been submitted this is again

281
00:13:22,730 --> 00:13:27,139
the intent file which has just been

282
00:13:24,170 --> 00:13:37,310
stolen by an attacker by a malicious web

283
00:13:27,139 --> 00:13:39,769
server how this one works so we have a

284
00:13:37,310 --> 00:13:42,469
get in transform this new feature of of

285
00:13:39,769 --> 00:13:46,579
excel and we have this definition in

286
00:13:42,470 --> 00:13:49,759
this M language which as well your excel

287
00:13:46,579 --> 00:13:55,370
can you please read this file C and a

288
00:13:49,759 --> 00:13:56,779
tenth and consider it a CSV file and put

289
00:13:55,370 --> 00:13:59,240
everything in the first column of this

290
00:13:56,779 --> 00:14:01,100
specific excel sheet and that's what

291
00:13:59,240 --> 00:14:03,410
happens the first column is getting

292
00:14:01,100 --> 00:14:05,750
filled with with the data of my own

293
00:14:03,410 --> 00:14:06,980
attend file but then as an attacker I

294
00:14:05,750 --> 00:14:09,680
want to steal that data and I want to

295
00:14:06,980 --> 00:14:12,110
send it away so that brings the second

296
00:14:09,680 --> 00:14:14,569
layer of attack which takes this field

297
00:14:12,110 --> 00:14:15,949
from a1 and just sends it with a web

298
00:14:14,569 --> 00:14:17,810
service request and this web service

299
00:14:15,949 --> 00:14:19,729
request can has a maximum length so we

300
00:14:17,810 --> 00:14:21,949
can't post this one in a 10 file in one

301
00:14:19,730 --> 00:14:26,509
go because it's too big but we just take

302
00:14:21,949 --> 00:14:28,849
line by line we post that data away this

303
00:14:26,509 --> 00:14:31,339
was a very naive example of stealing in

304
00:14:28,850 --> 00:14:32,810
an attempt file there is a so this get

305
00:14:31,339 --> 00:14:35,029
in transform wizard has a lot of

306
00:14:32,810 --> 00:14:38,180
features one of them is it can import

307
00:14:35,029 --> 00:14:40,189
text files just txt and this is what I

308
00:14:38,180 --> 00:14:42,829
use in this in this demo but you can

309
00:14:40,189 --> 00:14:44,870
also use it to parse to retrieve XML and

310
00:14:42,829 --> 00:14:47,029
you can just really define like an XPath

311
00:14:44,870 --> 00:14:49,300
query and only get a very specific value

312
00:14:47,029 --> 00:14:52,220
which makes it much faster and much less

313
00:14:49,300 --> 00:14:54,469
less in-your-face and furthermore there

314
00:14:52,220 --> 00:14:56,480
are so many more features in this in his

315
00:14:54,470 --> 00:14:58,670
new feet in his new wizard in this new

316
00:14:56,480 --> 00:15:00,910
get and transform stuff so you can make

317
00:14:58,670 --> 00:15:04,180
database connections from an excel sheet

318
00:15:00,910 --> 00:15:07,120
you can make connections to Azure

319
00:15:04,180 --> 00:15:09,680
connections into the Active Directory so

320
00:15:07,120 --> 00:15:11,120
it's ongoing research but I really

321
00:15:09,680 --> 00:15:14,420
believe there's a lot of potential here

322
00:15:11,120 --> 00:15:16,339
to not a code execution or maybe use

323
00:15:14,420 --> 00:15:18,709
this feature to get into code execution

324
00:15:16,339 --> 00:15:22,550
but do something besides the dde and

325
00:15:18,709 --> 00:15:26,280
besides the standard VBA tree

326
00:15:22,550 --> 00:15:27,839
so these were three tricks to do so that

327
00:15:26,280 --> 00:15:29,790
that has nothing to do with code

328
00:15:27,840 --> 00:15:32,810
execution systems but already stealing

329
00:15:29,790 --> 00:15:35,310
files getting credentials from users so

330
00:15:32,810 --> 00:15:39,780
that's already quite quite nice

331
00:15:35,310 --> 00:15:42,660
achievements but what the next part is

332
00:15:39,780 --> 00:15:44,160
do we actually need vba for markers do

333
00:15:42,660 --> 00:15:46,199
we need that and that's where Stan comes

334
00:15:44,160 --> 00:15:48,689
in yeah so what we're gonna do is we're

335
00:15:46,200 --> 00:15:50,880
gonna have a look at the go-to technique

336
00:15:48,690 --> 00:15:53,760
for most attackers in abusing MS Office

337
00:15:50,880 --> 00:15:55,710
which is still mattress but we are going

338
00:15:53,760 --> 00:15:57,750
to get it to the next level because

339
00:15:55,710 --> 00:15:59,250
there is so much happening in the hood

340
00:15:57,750 --> 00:16:01,560
of macros and we're gonna have a look at

341
00:15:59,250 --> 00:16:04,110
that so we're going down the rabbit hole

342
00:16:01,560 --> 00:16:06,329
of macros and the first thing that I

343
00:16:04,110 --> 00:16:09,900
have to explain to you is that macros is

344
00:16:06,330 --> 00:16:11,670
not just VBA most people think when they

345
00:16:09,900 --> 00:16:13,560
hear macros in Emma's office at this

346
00:16:11,670 --> 00:16:14,910
Visual Basic for applications but

347
00:16:13,560 --> 00:16:16,920
there's all our languages that are

348
00:16:14,910 --> 00:16:20,250
supported as well and the most important

349
00:16:16,920 --> 00:16:24,120
one there is Excel for macros or Excel

350
00:16:20,250 --> 00:16:27,000
and macros which I will be dealing it in

351
00:16:24,120 --> 00:16:30,780
in a minute and the really interesting

352
00:16:27,000 --> 00:16:32,790
difference between VBA macros and Excel

353
00:16:30,780 --> 00:16:35,250
em across is that VBA is a separate

354
00:16:32,790 --> 00:16:37,949
engine is a separate DLL which can be

355
00:16:35,250 --> 00:16:39,900
blocked by a blocker for example but

356
00:16:37,950 --> 00:16:41,670
Excel and macros are processed within

357
00:16:39,900 --> 00:16:43,709
Excel of the exe itself it's not a

358
00:16:41,670 --> 00:16:46,319
separate engine it's within the exe of

359
00:16:43,710 --> 00:16:50,330
Excel so that will be really hard to to

360
00:16:46,320 --> 00:16:54,090
get rid of in your environment and then

361
00:16:50,330 --> 00:16:56,160
VBA is not VBA there is stuff happening

362
00:16:54,090 --> 00:16:59,280
under the hood there's intermediary

363
00:16:56,160 --> 00:17:01,740
languages under the hood of VBA P code

364
00:16:59,280 --> 00:17:03,870
and execute I will not go into Xcode but

365
00:17:01,740 --> 00:17:05,579
P code we will dive into in a few

366
00:17:03,870 --> 00:17:07,530
minutes which is really interesting as

367
00:17:05,579 --> 00:17:11,250
well so that is what we are going to do

368
00:17:07,530 --> 00:17:14,010
in the next 20 minutes let's start with

369
00:17:11,250 --> 00:17:17,760
excellent macros excellent macros they

370
00:17:14,010 --> 00:17:19,709
exist in Excel since 1992 and if you've

371
00:17:17,760 --> 00:17:25,949
never seen it this is how it works I

372
00:17:19,709 --> 00:17:30,850
just go to Excel right click insert and

373
00:17:25,949 --> 00:17:37,210
I actually choose I'm going to

374
00:17:30,850 --> 00:17:39,129
use this one ms excel 4.0 macro all of a

375
00:17:37,210 --> 00:17:41,679
sudden I get a new sheet and this is a

376
00:17:39,130 --> 00:17:44,020
so-called macro sheet and this language

377
00:17:41,679 --> 00:17:47,799
is completely different from from VBA so

378
00:17:44,020 --> 00:17:52,950
let me write an example exact calculator

379
00:17:47,799 --> 00:17:57,490
and then hold the macro after that and

380
00:17:52,950 --> 00:17:59,440
if we run this then there's my

381
00:17:57,490 --> 00:18:01,870
calculator that's how it works and if I

382
00:17:59,440 --> 00:18:04,600
want to auto open this function upon

383
00:18:01,870 --> 00:18:06,820
opening this file I just have to rename

384
00:18:04,600 --> 00:18:08,500
this cell to out to open and then it

385
00:18:06,820 --> 00:18:10,330
just behaves it's a regular auto open

386
00:18:08,500 --> 00:18:12,520
event in VBA macros but again a

387
00:18:10,330 --> 00:18:14,770
completely different language which is

388
00:18:12,520 --> 00:18:17,889
being ran by a different engine and if

389
00:18:14,770 --> 00:18:21,370
you want to hide your macro right mouse

390
00:18:17,890 --> 00:18:24,280
click hide and it's actually gone from

391
00:18:21,370 --> 00:18:26,559
the GUI so this is some basic stuff

392
00:18:24,280 --> 00:18:28,480
which we already demonstrated at there

393
00:18:26,559 --> 00:18:31,500
become last year but it gets more

394
00:18:28,480 --> 00:18:34,150
interesting if you go deeper into this

395
00:18:31,500 --> 00:18:37,090
so I just started calculator with a

396
00:18:34,150 --> 00:18:40,150
simple exec function but I found out

397
00:18:37,090 --> 00:18:43,389
that you can actually call Windows 32

398
00:18:40,150 --> 00:18:47,559
API methods as well so this is an

399
00:18:43,390 --> 00:18:49,690
example of shell code injection into the

400
00:18:47,559 --> 00:18:52,000
current Excel process by calling Virtual

401
00:18:49,690 --> 00:18:55,750
L log write process memory and create

402
00:18:52,000 --> 00:18:57,700
trap it's a basic proof of concept you

403
00:18:55,750 --> 00:19:00,309
can make it much more advanced but it

404
00:18:57,700 --> 00:19:02,830
does show you the power Excel for PTO

405
00:19:00,309 --> 00:19:07,570
macros are almost as powerful as the

406
00:19:02,830 --> 00:19:10,030
regular VBA macros are and if you want

407
00:19:07,570 --> 00:19:13,510
to hide your markers even better then

408
00:19:10,030 --> 00:19:16,570
let's have a look at the active file

409
00:19:13,510 --> 00:19:17,440
format specifications of Microsoft so if

410
00:19:16,570 --> 00:19:19,570
you look at the file from a

411
00:19:17,440 --> 00:19:21,580
specification of a sheet so you have a

412
00:19:19,570 --> 00:19:23,740
regular sheet but there's also a macro

413
00:19:21,580 --> 00:19:26,470
sheet but each sheet has a few options

414
00:19:23,740 --> 00:19:30,159
and they are being set in this bound

415
00:19:26,470 --> 00:19:32,140
sheet 8 record which is in an excel file

416
00:19:30,159 --> 00:19:33,880
and there's the option which I

417
00:19:32,140 --> 00:19:36,520
highlighted on the bottom so there's a

418
00:19:33,880 --> 00:19:39,280
regular sheet which is visible there is

419
00:19:36,520 --> 00:19:41,860
a hidden sheet which I just made hidden

420
00:19:39,280 --> 00:19:44,700
with a right mouse click but actually if

421
00:19:41,860 --> 00:19:47,219
I want to unhide it then I just go back

422
00:19:44,700 --> 00:19:49,499
and there should be an anti button here

423
00:19:47,220 --> 00:19:52,379
and then all of a sudden my macro is

424
00:19:49,499 --> 00:19:56,119
back but apparently there's also a

425
00:19:52,379 --> 00:19:59,009
specification which says very hidden and

426
00:19:56,119 --> 00:20:00,330
it took a little bit of googling but

427
00:19:59,009 --> 00:20:02,489
actually this can be achieved really

428
00:20:00,330 --> 00:20:05,820
easily so you just first write your

429
00:20:02,489 --> 00:20:08,609
Excel for macro then open the VBA editor

430
00:20:05,820 --> 00:20:10,980
just run a single line of code and set

431
00:20:08,609 --> 00:20:12,570
this sheet to very hidden and then all

432
00:20:10,980 --> 00:20:14,399
of a sudden you cannot unhide it from

433
00:20:12,570 --> 00:20:16,470
the GUI then you remove this VBA code

434
00:20:14,399 --> 00:20:19,939
save the file and now all of a sudden

435
00:20:16,470 --> 00:20:26,070
you have a completely invisible macro

436
00:20:19,940 --> 00:20:27,659
and it didn't take very long after our

437
00:20:26,070 --> 00:20:29,460
derbycon presentation before these

438
00:20:27,659 --> 00:20:32,279
things started popping up in the wild

439
00:20:29,460 --> 00:20:37,200
and actually we had to find out of this

440
00:20:32,279 --> 00:20:39,480
specific setting by abuse of of this

441
00:20:37,200 --> 00:20:42,359
feature in the wild and this is the

442
00:20:39,480 --> 00:20:45,570
actual sample that's that's there if you

443
00:20:42,359 --> 00:20:50,720
look this sample up it does process

444
00:20:45,570 --> 00:20:53,489
injection it has a very hidden sheet and

445
00:20:50,720 --> 00:20:56,460
this was after our disclosure at there

446
00:20:53,489 --> 00:21:00,049
become but still 0 out of 59 detections

447
00:20:56,460 --> 00:21:02,700
at fires total so current visibility of

448
00:21:00,049 --> 00:21:05,460
virtually all virus scanners into this

449
00:21:02,700 --> 00:21:07,859
really old 1992 technology is pretty

450
00:21:05,460 --> 00:21:10,200
pretty poor this sample was pointed out

451
00:21:07,859 --> 00:21:13,918
to the excellent team from from mnemonic

452
00:21:10,200 --> 00:21:15,779
by the way look at the hash it's a

453
00:21:13,919 --> 00:21:17,009
really cool example it's way better than

454
00:21:15,779 --> 00:21:18,480
our proof of concept that we released

455
00:21:17,009 --> 00:21:24,450
this is the stuff that we're seeing in a

456
00:21:18,480 --> 00:21:29,429
wild Excel macros are not just exposed

457
00:21:24,450 --> 00:21:31,980
via Excel files via workbooks and sheets

458
00:21:29,429 --> 00:21:34,470
that they are also exposed via something

459
00:21:31,980 --> 00:21:36,749
called silk and if you're not familiar

460
00:21:34,470 --> 00:21:41,669
with silk silk is a text-based file

461
00:21:36,749 --> 00:21:44,669
format from the 1980s they are still

462
00:21:41,669 --> 00:21:47,070
being used in Excel or day-day they are

463
00:21:44,669 --> 00:21:50,519
still allowed in Excel by default to be

464
00:21:47,070 --> 00:21:54,299
open and even the Sok file extension is

465
00:21:50,519 --> 00:21:56,640
by default connected with Excel it's a

466
00:21:54,299 --> 00:21:59,280
completely text-based file format

467
00:21:56,640 --> 00:22:01,980
and because of that it does not open in

468
00:21:59,280 --> 00:22:03,570
the protected mode sandbox so you might

469
00:22:01,980 --> 00:22:06,780
be familiar that after downloading a

470
00:22:03,570 --> 00:22:08,100
regular excel file in the in the default

471
00:22:06,780 --> 00:22:10,500
setting you have to click enable editing

472
00:22:08,100 --> 00:22:13,350
to get out of this protected few sandbox

473
00:22:10,500 --> 00:22:13,860
because silk files are completely sq

474
00:22:13,350 --> 00:22:15,929
based

475
00:22:13,860 --> 00:22:18,540
Microsoft has decided that they do not

476
00:22:15,930 --> 00:22:20,610
open in the protected view it protected

477
00:22:18,540 --> 00:22:23,760
few sandbox so that's a good thing to

478
00:22:20,610 --> 00:22:25,770
begin with and that actually what you

479
00:22:23,760 --> 00:22:30,900
see there is less than a hundred bytes

480
00:22:25,770 --> 00:22:35,940
it's 99 bytes to to pop calculator via

481
00:22:30,900 --> 00:22:38,990
Excel 4.0 macros within a SLK file then

482
00:22:35,940 --> 00:22:41,850
the team the MD sec team from the UK

483
00:22:38,990 --> 00:22:43,830
they took my sample code and they

484
00:22:41,850 --> 00:22:45,629
actually embedded this into their tools

485
00:22:43,830 --> 00:22:47,639
sharpshooter which I think many of you

486
00:22:45,630 --> 00:22:50,010
are familiar with and they now fully

487
00:22:47,640 --> 00:22:51,900
weaponize this and I've heard from

488
00:22:50,010 --> 00:22:54,690
various teams that this technique is

489
00:22:51,900 --> 00:22:56,610
pretty successful and that current

490
00:22:54,690 --> 00:23:00,660
feasibility of antivirus into this is

491
00:22:56,610 --> 00:23:02,729
pretty poor so we've now seen Excel for

492
00:23:00,660 --> 00:23:05,490
macros in regular Excel we have seen

493
00:23:02,730 --> 00:23:08,610
them being exposed to silk but there's

494
00:23:05,490 --> 00:23:11,370
more places where Excel for macros are

495
00:23:08,610 --> 00:23:15,689
being exposed to one of the interesting

496
00:23:11,370 --> 00:23:18,719
part is come and decom so you have this

497
00:23:15,690 --> 00:23:21,710
method execute Excel for macro which is

498
00:23:18,720 --> 00:23:24,810
exposed fire come and fire decom and

499
00:23:21,710 --> 00:23:28,050
this means that if we open it fire decom

500
00:23:24,810 --> 00:23:30,450
we can actually run Excel for macros

501
00:23:28,050 --> 00:23:32,520
without touching disk on a remote system

502
00:23:30,450 --> 00:23:36,180
that's the whole principle of comm of

503
00:23:32,520 --> 00:23:39,060
decomp so what you see here is a few

504
00:23:36,180 --> 00:23:41,400
lines of code a simple proof of concept

505
00:23:39,060 --> 00:23:46,260
and what we do here in the first line is

506
00:23:41,400 --> 00:23:49,380
we instantiate excel on another system

507
00:23:46,260 --> 00:23:51,540
on server a1 that's just default Deacon

508
00:23:49,380 --> 00:23:53,280
functionality and then we have an

509
00:23:51,540 --> 00:23:54,990
interface with excel on that other

510
00:23:53,280 --> 00:23:56,820
system so we're going to use this for

511
00:23:54,990 --> 00:24:02,750
lateral movement and then by just

512
00:23:56,820 --> 00:24:05,939
executing excel for macro calls that

513
00:24:02,750 --> 00:24:08,910
subsequently call windows api calls we

514
00:24:05,940 --> 00:24:09,929
can now inject shell code on a remote

515
00:24:08,910 --> 00:24:13,169
system with

516
00:24:09,929 --> 00:24:16,049
ever touching discs which is a big place

517
00:24:13,169 --> 00:24:17,460
over many other decom based lateral

518
00:24:16,049 --> 00:24:21,090
movement methods that are currently out

519
00:24:17,460 --> 00:24:23,519
there there is one there's one be calm

520
00:24:21,090 --> 00:24:25,350
it's pretty slow so injecting a

521
00:24:23,519 --> 00:24:26,879
shellcode of a thousand bytes

522
00:24:25,350 --> 00:24:30,149
it's staging shellcode will take you

523
00:24:26,879 --> 00:24:31,980
about one to two minutes but if you have

524
00:24:30,149 --> 00:24:34,320
that time then this is a really great

525
00:24:31,980 --> 00:24:36,990
method to actually inject shell codes do

526
00:24:34,320 --> 00:24:39,269
not rely on any lobe in and inject it

527
00:24:36,990 --> 00:24:42,990
into Excel Big C on a remote system

528
00:24:39,269 --> 00:24:45,240
without touching disk code in PowerShell

529
00:24:42,990 --> 00:24:50,850
and the cobol strike implementation is

530
00:24:45,240 --> 00:24:53,519
that at that github repository so that

531
00:24:50,850 --> 00:24:57,449
was Excel for macros now let's go back

532
00:24:53,519 --> 00:24:59,759
to VBA macros and if you look at the

533
00:24:57,450 --> 00:25:02,220
specification of CBA Marcos you get

534
00:24:59,759 --> 00:25:04,320
stuff like this this is what Microsoft

535
00:25:02,220 --> 00:25:07,110
released and if you have no clue what

536
00:25:04,320 --> 00:25:11,490
this stuff is then let me open up a word

537
00:25:07,110 --> 00:25:14,309
file for you so I have a dot docx file

538
00:25:11,490 --> 00:25:18,509
here and if I open it with a compound

539
00:25:14,309 --> 00:25:21,418
file editor then I see this so what is

540
00:25:18,509 --> 00:25:26,100
this is this is the compound file binary

541
00:25:21,419 --> 00:25:28,649
format CF bf also called compound files

542
00:25:26,100 --> 00:25:32,219
and they are like a file system in a

543
00:25:28,649 --> 00:25:35,580
single file this is the default file

544
00:25:32,220 --> 00:25:38,490
format for word files until 2003 and

545
00:25:35,580 --> 00:25:41,189
after 2003 they switch to a zip and

546
00:25:38,490 --> 00:25:44,190
excellent xml-based format but even if

547
00:25:41,190 --> 00:25:49,350
you open the newer formats like doc m

548
00:25:44,190 --> 00:25:51,179
and xlsm in a zip in a zip archive in

549
00:25:49,350 --> 00:25:53,490
program then you will see a file there

550
00:25:51,179 --> 00:25:55,799
VBA project bin which actually contains

551
00:25:53,490 --> 00:25:57,419
some macros and that in turn is a

552
00:25:55,799 --> 00:25:59,700
compound file like this one and you can

553
00:25:57,419 --> 00:26:02,090
open it for example with flex hex so

554
00:25:59,700 --> 00:26:07,470
what you see here I'll zoom in a bit is

555
00:26:02,090 --> 00:26:09,749
there's a storage called macros another

556
00:26:07,470 --> 00:26:14,460
storage called VBA and within here there

557
00:26:09,749 --> 00:26:17,309
are several streams I'll quickly explain

558
00:26:14,460 --> 00:26:19,379
these streams project basically informs

559
00:26:17,309 --> 00:26:22,658
the GUI on what to display the Phoebe a

560
00:26:19,379 --> 00:26:25,629
GUI editor VPP a project

561
00:26:22,659 --> 00:26:28,210
forms the VBA engine not the GUI but the

562
00:26:25,629 --> 00:26:30,908
actual engine about what kind of Phoebe

563
00:26:28,210 --> 00:26:34,720
project this is then there's a deer

564
00:26:30,909 --> 00:26:37,450
which is a like a like a layout of the

565
00:26:34,720 --> 00:26:39,309
project and there are module streams

566
00:26:37,450 --> 00:26:41,950
like module one and this document in

567
00:26:39,309 --> 00:26:46,809
this case and for example if you look at

568
00:26:41,950 --> 00:26:51,369
module one module one then it's just

569
00:26:46,809 --> 00:26:55,090
hack stuff like this well I'll stop

570
00:26:51,369 --> 00:26:59,949
scrolling and this module stream that is

571
00:26:55,090 --> 00:27:02,109
what is being specified here so this is

572
00:26:59,950 --> 00:27:04,629
the MSO vba specification and this

573
00:27:02,109 --> 00:27:06,970
specifies the module stream and it

574
00:27:04,629 --> 00:27:09,248
basically consists of two parts the last

575
00:27:06,970 --> 00:27:12,909
part is compressed source code which is

576
00:27:09,249 --> 00:27:15,609
a proprietary compression method that

577
00:27:12,909 --> 00:27:17,529
just compresses the vba source code but

578
00:27:15,609 --> 00:27:19,689
there's also the first part performance

579
00:27:17,529 --> 00:27:23,019
cache and performance cache is

580
00:27:19,690 --> 00:27:25,109
completely undocumented and microsoft

581
00:27:23,019 --> 00:27:28,869
actually says it must be ignored on read

582
00:27:25,109 --> 00:27:30,789
well clearly word and excel they don't

583
00:27:28,869 --> 00:27:33,099
ignore this on read they're doing

584
00:27:30,789 --> 00:27:36,220
something different here and that is P

585
00:27:33,099 --> 00:27:39,009
code there is a layer under VBA for the

586
00:27:36,220 --> 00:27:41,499
V V for the VBA engine where there's

587
00:27:39,009 --> 00:27:45,460
some sort of intermediary code and if

588
00:27:41,499 --> 00:27:48,460
the file version of the excel or word

589
00:27:45,460 --> 00:27:51,070
file matches the version of the word or

590
00:27:48,460 --> 00:27:53,349
excel host then the VBA code is

591
00:27:51,070 --> 00:27:57,158
completely ignored and the P code is

592
00:27:53,349 --> 00:27:58,840
being ran instead and order become

593
00:27:57,159 --> 00:28:01,059
presentation we have some details about

594
00:27:58,840 --> 00:28:03,939
this but we have now actually weaponized

595
00:28:01,059 --> 00:28:07,389
this and we're here by introducing evil

596
00:28:03,940 --> 00:28:10,929
clipping so we brought Clippy back it

597
00:28:07,389 --> 00:28:12,488
was time for him to revive and Clippy

598
00:28:10,929 --> 00:28:14,769
will help you with creating malicious

599
00:28:12,489 --> 00:28:17,019
documents especially around abusing p

600
00:28:14,769 --> 00:28:19,359
code so immediately after a presentation

601
00:28:17,019 --> 00:28:21,940
we will upload the code to github and

602
00:28:19,359 --> 00:28:24,460
what evil Clippy does it can hide

603
00:28:21,940 --> 00:28:27,249
markers from the GUI editor it can do P

604
00:28:24,460 --> 00:28:29,889
code abuse etc and I will give you a few

605
00:28:27,249 --> 00:28:34,749
demos to so that this all makes makes

606
00:28:29,889 --> 00:28:36,070
more sense where shall I start yeah I'm

607
00:28:34,749 --> 00:28:38,859
gonna start

608
00:28:36,070 --> 00:28:40,629
right here so this is Kabul strike which

609
00:28:38,859 --> 00:28:43,059
some of you might be familiar with

610
00:28:40,629 --> 00:28:46,779
it's a situ framework and it has a

611
00:28:43,059 --> 00:28:48,759
implant called beacon and it also has

612
00:28:46,779 --> 00:28:51,580
some basic attack techniques for example

613
00:28:48,759 --> 00:28:53,619
if I do packages ms-office macro I can

614
00:28:51,580 --> 00:28:59,590
generate a malicious macro here copy

615
00:28:53,619 --> 00:29:09,359
macro copy macro yep and if I look at

616
00:28:59,590 --> 00:29:13,330
the contents of this macro insert module

617
00:29:09,359 --> 00:29:15,580
this is the actual macro it's really

618
00:29:13,330 --> 00:29:17,769
basic it doesn't do any evasion I would

619
00:29:15,580 --> 00:29:20,559
not recommend you to ever use this on an

620
00:29:17,769 --> 00:29:22,869
engagement and what it does is it kicks

621
00:29:20,559 --> 00:29:25,599
off run DLL 32 and then fight a win API

622
00:29:22,869 --> 00:29:27,668
it injects shell codes into this into

623
00:29:25,599 --> 00:29:30,340
this process really basic techniques

624
00:29:27,669 --> 00:29:34,769
which are clearly malicious so if we

625
00:29:30,340 --> 00:29:37,178
upload this file to virustotal

626
00:29:34,769 --> 00:29:40,479
which i just did before the presentation

627
00:29:37,179 --> 00:29:42,669
then we can see that all major antivirus

628
00:29:40,479 --> 00:29:46,570
engines that they do detect this file as

629
00:29:42,669 --> 00:29:48,419
being malicious obviously so now let's

630
00:29:46,570 --> 00:29:52,689
write what we can achieve which is

631
00:29:48,419 --> 00:29:54,489
obviously malicious macro by abusing

632
00:29:52,690 --> 00:29:57,609
this functionality which is under the

633
00:29:54,489 --> 00:30:00,070
hood of EBA this peacott stuff so we're

634
00:29:57,609 --> 00:30:02,349
going to evil Clippy you see philippi

635
00:30:00,070 --> 00:30:05,799
and the first thing that we are going to

636
00:30:02,349 --> 00:30:08,859
do is we're gonna have I'm going to copy

637
00:30:05,799 --> 00:30:12,999
the original file CS original and we're

638
00:30:08,859 --> 00:30:14,609
going to copy it to CS hidden I'm going

639
00:30:12,999 --> 00:30:18,789
to say evil Clippy

640
00:30:14,609 --> 00:30:23,489
please hide the macro from the GUI

641
00:30:18,789 --> 00:30:27,599
editor yep so we now have a new file and

642
00:30:23,489 --> 00:30:27,599
if I open that file

643
00:30:31,850 --> 00:30:38,030
and I real macros then I should see a

644
00:30:36,350 --> 00:30:41,090
new connection coming in at my cobalt

645
00:30:38,030 --> 00:30:43,190
strike team server or is it yep so I do

646
00:30:41,090 --> 00:30:45,500
have a command control session right now

647
00:30:43,190 --> 00:30:48,080
the macro successfully execute it but if

648
00:30:45,500 --> 00:30:50,480
I go to the macro editor the macro has

649
00:30:48,080 --> 00:30:53,540
completely disappeared it's not there

650
00:30:50,480 --> 00:30:56,390
anymore even clip you achieve this by

651
00:30:53,540 --> 00:30:58,220
editing the project stream in a CF bf

652
00:30:56,390 --> 00:31:01,550
file which instructs the GUI on what to

653
00:30:58,220 --> 00:31:03,980
display so it's hidden from the GUI

654
00:31:01,550 --> 00:31:05,690
editor but the macro is still there and

655
00:31:03,980 --> 00:31:10,430
we can easily see that with a tool

656
00:31:05,690 --> 00:31:12,290
called only Phoebe a for example the

657
00:31:10,430 --> 00:31:14,600
macro is still there it's just not being

658
00:31:12,290 --> 00:31:20,030
displayed in the GUI so let's feature

659
00:31:14,600 --> 00:31:22,120
one now let's try to get rid of the

660
00:31:20,030 --> 00:31:27,290
macro as well so we're going to say

661
00:31:22,120 --> 00:31:29,389
we're gonna have some fake code this is

662
00:31:27,290 --> 00:31:31,879
some fake code just a simple sub fake

663
00:31:29,390 --> 00:31:36,230
with a message box and I'm going to say

664
00:31:31,880 --> 00:31:41,740
evil Clippy first of all I need to copy

665
00:31:36,230 --> 00:31:45,530
the file black head original 2 P code

666
00:31:41,740 --> 00:31:48,470
evil Clippy do not just hide a file but

667
00:31:45,530 --> 00:31:50,330
please also remove the compressed Phoebe

668
00:31:48,470 --> 00:31:56,030
a code while still leaving the P code

669
00:31:50,330 --> 00:32:01,040
intact and do that on this file

670
00:31:56,030 --> 00:32:08,000
CSP code ok so if we now run only VBA on

671
00:32:01,040 --> 00:32:10,040
this file we will see that only VBA

672
00:32:08,000 --> 00:32:13,190
things that the code in this file is hi

673
00:32:10,040 --> 00:32:16,090
this is fake code but if we open the

674
00:32:13,190 --> 00:32:16,090
file on this system

675
00:32:23,520 --> 00:32:27,900
we do enable content we've run the

676
00:32:25,470 --> 00:32:30,660
macros and we go back to our COBOL

677
00:32:27,900 --> 00:32:32,460
strike team server then we see a second

678
00:32:30,660 --> 00:32:34,860
connection coming in so it's not the

679
00:32:32,460 --> 00:32:36,690
code the VBA code is being executed now

680
00:32:34,860 --> 00:32:39,780
it's a peacoat because the version of

681
00:32:36,690 --> 00:32:42,690
this file matches the version of Word

682
00:32:39,780 --> 00:32:44,928
and Excel as well with even clipping you

683
00:32:42,690 --> 00:32:48,660
can actually set the target version of

684
00:32:44,929 --> 00:32:51,720
Office to target like 2016 2030 in 2010

685
00:32:48,660 --> 00:32:55,200
whatever is there but but there's a big

686
00:32:51,720 --> 00:32:57,960
but there are tools that can analyze P

687
00:32:55,200 --> 00:33:01,770
code and the most famous one is Pico

688
00:32:57,960 --> 00:33:05,520
dump from dr. bunch F and if I run P

689
00:33:01,770 --> 00:33:08,970
code dump on this file then peak Odum

690
00:33:05,520 --> 00:33:12,510
still sees that there is a peacoat macro

691
00:33:08,970 --> 00:33:14,700
in here you see the starting run DLL and

692
00:33:12,510 --> 00:33:16,950
doing all the bad stuff so this can

693
00:33:14,700 --> 00:33:21,300
still be detected then how can we get

694
00:33:16,950 --> 00:33:24,090
rid of Pico dump as well for that we we

695
00:33:21,300 --> 00:33:26,580
dived into the specifications of how

696
00:33:24,090 --> 00:33:31,230
markers are stored in a file and it

697
00:33:26,580 --> 00:33:35,040
turns out that Microsoft often has two

698
00:33:31,230 --> 00:33:38,070
names pointing to similar objects and if

699
00:33:35,040 --> 00:33:40,550
an object is a module stream then it

700
00:33:38,070 --> 00:33:43,409
keeps track of the module stream in two

701
00:33:40,550 --> 00:33:46,530
variables one is an esky variable and

702
00:33:43,410 --> 00:33:49,800
another one is a Unicode variable so

703
00:33:46,530 --> 00:33:52,490
there's two different names pointing to

704
00:33:49,800 --> 00:33:55,830
the same object well what could go wrong

705
00:33:52,490 --> 00:33:58,260
thing is that what Microsoft Office uses

706
00:33:55,830 --> 00:34:01,678
is the Unicode name of the module stream

707
00:33:58,260 --> 00:34:05,400
whereas most security analyst tools use

708
00:34:01,679 --> 00:34:08,580
the s key name so what we can do is we

709
00:34:05,400 --> 00:34:11,100
can edit the file with evil Clippy set a

710
00:34:08,580 --> 00:34:12,480
completely random name for the module

711
00:34:11,100 --> 00:34:14,368
stream and s key while still leaving a

712
00:34:12,480 --> 00:34:15,960
Unicode name intact and that's exactly

713
00:34:14,369 --> 00:34:18,419
what I'm going to do now so I'm copy it

714
00:34:15,960 --> 00:34:23,909
again random dot doc

715
00:34:18,418 --> 00:34:27,060
don't say evil Clippy evil Clippy yes

716
00:34:23,909 --> 00:34:33,000
hide it from the GUI set some fake code

717
00:34:27,060 --> 00:34:35,070
in there but now also do random random

718
00:34:33,000 --> 00:34:36,570
module names for the for the S key

719
00:34:35,070 --> 00:34:40,230
specification

720
00:34:36,570 --> 00:34:42,390
see is random okay it did that it said

721
00:34:40,230 --> 00:34:45,870
random sq names are still even unicode

722
00:34:42,389 --> 00:34:49,500
names intact and if I now run C as a

723
00:34:45,870 --> 00:34:53,210
random I'm going to show you that it's

724
00:34:49,500 --> 00:34:53,210
all still working fine in Emma's office

725
00:34:54,110 --> 00:35:00,690
enable content and we should see another

726
00:34:58,710 --> 00:35:02,250
connection popping in there's another

727
00:35:00,690 --> 00:35:03,270
connection popping in so that's working

728
00:35:02,250 --> 00:35:05,910
just fine

729
00:35:03,270 --> 00:35:10,920
but if we now launch Pico dump on this

730
00:35:05,910 --> 00:35:13,109
file picker them all of a sudden says

731
00:35:10,920 --> 00:35:15,990
error file not found because that uses

732
00:35:13,110 --> 00:35:17,430
the s key name there's plenty of more

733
00:35:15,990 --> 00:35:19,770
stuff that you can do here but this was

734
00:35:17,430 --> 00:35:22,560
just a basic demo of what what evil clip

735
00:35:19,770 --> 00:35:27,540
you can do and question is how effective

736
00:35:22,560 --> 00:35:31,529
is this so we started with 34 engines

737
00:35:27,540 --> 00:35:33,360
detecting this obviously bad macro and I

738
00:35:31,530 --> 00:35:36,120
just uploaded the last version to

739
00:35:33,360 --> 00:35:39,630
virustotal as well and then there's we

740
00:35:36,120 --> 00:35:42,359
get rid of all major antivirus engines

741
00:35:39,630 --> 00:35:44,010
there's only one which is siren which

742
00:35:42,360 --> 00:35:45,570
actually triggers on a string which is

743
00:35:44,010 --> 00:35:47,210
still in the peacoats and that wouldn't

744
00:35:45,570 --> 00:35:50,340
be too difficult to get rid of as well

745
00:35:47,210 --> 00:35:53,700
so antivirus is really poor visibility

746
00:35:50,340 --> 00:35:55,520
into P code and I can understand why

747
00:35:53,700 --> 00:35:58,080
because there is no official

748
00:35:55,520 --> 00:36:00,180
specification of P code so that would be

749
00:35:58,080 --> 00:36:03,330
really difficult to get proper optics

750
00:36:00,180 --> 00:36:05,730
into this there's one other thing which

751
00:36:03,330 --> 00:36:07,440
is interesting that's happening if you

752
00:36:05,730 --> 00:36:10,290
look at the details of the original file

753
00:36:07,440 --> 00:36:13,620
then virus total detects that there's

754
00:36:10,290 --> 00:36:16,200
markers in here but virus total also

755
00:36:13,620 --> 00:36:20,069
suffers from this s key versus Unicode

756
00:36:16,200 --> 00:36:21,750
bug because if we go to details here it

757
00:36:20,070 --> 00:36:24,510
doesn't see any markers because this is

758
00:36:21,750 --> 00:36:26,630
processing the S key module stream names

759
00:36:24,510 --> 00:36:30,120
instead of the unicode body street names

760
00:36:26,630 --> 00:36:34,400
cool stuff so this was a journey down

761
00:36:30,120 --> 00:36:37,560
the rabbit hole of macros but on modern

762
00:36:34,400 --> 00:36:39,930
instances of Word and Excel on Windows

763
00:36:37,560 --> 00:36:43,920
10 you might run into modern defenses

764
00:36:39,930 --> 00:36:46,080
like MZ and ASR and we're going to show

765
00:36:43,920 --> 00:36:47,940
you some basics on how to bypass these

766
00:36:46,080 --> 00:36:48,640
as well so Peter we'll start off with MZ

767
00:36:47,940 --> 00:36:53,230
and

768
00:36:48,640 --> 00:36:54,730
take over with a czar so MZ is the

769
00:36:53,230 --> 00:36:56,860
anti-malware scanning interface

770
00:36:54,730 --> 00:36:59,020
introduced in Windows 10 Microsoft

771
00:36:56,860 --> 00:37:01,390
hooked up a lot of script interpreters

772
00:36:59,020 --> 00:37:04,240
like C script PowerShell into this

773
00:37:01,390 --> 00:37:06,359
interface and the script engines sends

774
00:37:04,240 --> 00:37:09,370
all their events that they execute to

775
00:37:06,360 --> 00:37:12,190
this MZ interface an antivirus vendor

776
00:37:09,370 --> 00:37:14,950
can subscribe to that and any PowerShell

777
00:37:12,190 --> 00:37:16,810
commands you execute gets first being

778
00:37:14,950 --> 00:37:18,640
approved by the AV then there or the AV

779
00:37:16,810 --> 00:37:21,100
the AV products can then intercept if

780
00:37:18,640 --> 00:37:22,839
they want in September Microsoft

781
00:37:21,100 --> 00:37:26,890
announced that they were also doing MZ

782
00:37:22,840 --> 00:37:28,630
for VBA and as of January this is part

783
00:37:26,890 --> 00:37:31,080
of this semiannual release so that means

784
00:37:28,630 --> 00:37:35,160
that in most of the office 365

785
00:37:31,080 --> 00:37:41,200
deployments this is now life and working

786
00:37:35,160 --> 00:37:42,940
in the design of the VBA for the VBA mzn

787
00:37:41,200 --> 00:37:45,160
interface they made slightly different

788
00:37:42,940 --> 00:37:49,810
to design them for the powershell and c

789
00:37:45,160 --> 00:37:51,970
script versions so what they do is they

790
00:37:49,810 --> 00:37:54,820
say well we maintain a lock of all

791
00:37:51,970 --> 00:37:56,620
suspicious calls being that the

792
00:37:54,820 --> 00:37:59,470
suspicious calls being being common

793
00:37:56,620 --> 00:38:02,080
methods and win32 api s-- they say well

794
00:37:59,470 --> 00:38:04,450
we will just look all of these requests

795
00:38:02,080 --> 00:38:07,840
being made in runtime so anytime you

796
00:38:04,450 --> 00:38:11,020
create a new word instance in a macro

797
00:38:07,840 --> 00:38:13,120
that is being locked that's just a log

798
00:38:11,020 --> 00:38:16,210
file a behavior log which kind of keep

799
00:38:13,120 --> 00:38:17,770
track in like a stack trace and then

800
00:38:16,210 --> 00:38:21,100
they said well there are a couple of

801
00:38:17,770 --> 00:38:23,920
suspicious events and once we encounter

802
00:38:21,100 --> 00:38:25,900
a suspicious events then we go into a

803
00:38:23,920 --> 00:38:28,240
trigger mode and at that point in time

804
00:38:25,900 --> 00:38:32,800
we will take this stack this this law

805
00:38:28,240 --> 00:38:34,600
from word from the VBA engine and send

806
00:38:32,800 --> 00:38:38,350
it to the MZ provider or to the MZ

807
00:38:34,600 --> 00:38:42,490
engine and then the AV can be saw it on

808
00:38:38,350 --> 00:38:45,850
the design microsoft said this is about

809
00:38:42,490 --> 00:38:48,910
vba when testing it it turns out to be

810
00:38:45,850 --> 00:38:52,089
that p code is also intercepted by MZ so

811
00:38:48,910 --> 00:38:55,270
stands tricks on peak out and removing

812
00:38:52,090 --> 00:38:56,830
the VBA code this MZ engine would being

813
00:38:55,270 --> 00:39:01,390
a runtime engine it takes the peak out

814
00:38:56,830 --> 00:39:02,529
and provides that to MZ one additional

815
00:39:01,390 --> 00:39:04,330
detail they describe

816
00:39:02,530 --> 00:39:06,370
in their September blog about the design

817
00:39:04,330 --> 00:39:08,110
is that there's this micro runtime scope

818
00:39:06,370 --> 00:39:09,960
so Microsoft was worried about

819
00:39:08,110 --> 00:39:12,640
performance and how this would affect

820
00:39:09,960 --> 00:39:14,830
regular markers being executed in

821
00:39:12,640 --> 00:39:17,859
businesses so what they said is well

822
00:39:14,830 --> 00:39:19,569
we'll have three versions of this of

823
00:39:17,860 --> 00:39:23,530
this free mode where this engine can run

824
00:39:19,570 --> 00:39:26,200
one it can be disabled it can be enabled

825
00:39:23,530 --> 00:39:29,530
on low trusted documents and it can be

826
00:39:26,200 --> 00:39:31,390
enabled on all documents and low trusted

827
00:39:29,530 --> 00:39:33,940
documents they said well we will just

828
00:39:31,390 --> 00:39:36,580
exclude documents that are in a trusted

829
00:39:33,940 --> 00:39:38,560
location or that you looked at it before

830
00:39:36,580 --> 00:39:41,319
so trust the document so that document

831
00:39:38,560 --> 00:39:42,460
you open before it was then analyzed and

832
00:39:41,320 --> 00:39:46,060
the next time you open it we won't

833
00:39:42,460 --> 00:39:47,740
analyze it again if you look at me this

834
00:39:46,060 --> 00:39:48,970
signs so these kind of things they say

835
00:39:47,740 --> 00:39:50,919
well if it's that then we'll just

836
00:39:48,970 --> 00:39:52,839
exclude it from MZ so that keeps

837
00:39:50,920 --> 00:39:56,650
performance intact we will only check it

838
00:39:52,840 --> 00:39:58,270
the first time into it it runs and this

839
00:39:56,650 --> 00:40:00,460
low trust document mode is the default

840
00:39:58,270 --> 00:40:02,980
so if you don't configure this setting

841
00:40:00,460 --> 00:40:07,990
by default the first time you open the

842
00:40:02,980 --> 00:40:09,820
document it will be sent to a mess so in

843
00:40:07,990 --> 00:40:12,669
terms of this is how Microsoft designed

844
00:40:09,820 --> 00:40:14,740
it and there are quite some fundamental

845
00:40:12,670 --> 00:40:20,560
bypass approaches in how they set this

846
00:40:14,740 --> 00:40:23,950
up so first of all how to bypass MZ well

847
00:40:20,560 --> 00:40:26,860
let's just don't do don't do VBA so

848
00:40:23,950 --> 00:40:30,609
where we started the presentation fields

849
00:40:26,860 --> 00:40:33,790
abuse power a power query or this get in

850
00:40:30,610 --> 00:40:35,710
transform it's not code execution so it

851
00:40:33,790 --> 00:40:38,170
won't be picked but also the excel for

852
00:40:35,710 --> 00:40:40,000
the log macros ten demonstrates they are

853
00:40:38,170 --> 00:40:41,740
not in the VBA engine this is a separate

854
00:40:40,000 --> 00:40:44,350
engine so that engine is just not hooked

855
00:40:41,740 --> 00:40:49,569
up to mg so doing excel for that Omar

856
00:40:44,350 --> 00:40:51,880
Kraus is fully bypassing MZ then there

857
00:40:49,570 --> 00:40:54,370
was this feature with this macro runtime

858
00:40:51,880 --> 00:40:56,080
scope and trusted documents well if we

859
00:40:54,370 --> 00:40:58,420
can write our document into a trusted

860
00:40:56,080 --> 00:41:01,150
location we can just drop our code there

861
00:40:58,420 --> 00:41:03,310
and then we reopen our own file from the

862
00:41:01,150 --> 00:41:04,570
location where we just saved it and MZ

863
00:41:03,310 --> 00:41:07,029
will say well you're now from a safe

864
00:41:04,570 --> 00:41:09,940
location so no worry to check this one

865
00:41:07,030 --> 00:41:14,520
so again a very simple way to do bypass

866
00:41:09,940 --> 00:41:17,990
and then there's this decision not to

867
00:41:14,520 --> 00:41:20,580
said everything from coal mine 132 to

868
00:41:17,990 --> 00:41:22,350
two days empty engine but only build up

869
00:41:20,580 --> 00:41:24,319
this stack within the vba engine and

870
00:41:22,350 --> 00:41:27,509
send it on specific malicious keywords

871
00:41:24,320 --> 00:41:29,010
well it appears that this list of

872
00:41:27,510 --> 00:41:30,930
malicious keywords is just if it

873
00:41:29,010 --> 00:41:33,390
contains the word shell or execute

874
00:41:30,930 --> 00:41:36,270
execute then it's being sent to MZ and

875
00:41:33,390 --> 00:41:38,670
if so if you have comm methods that

876
00:41:36,270 --> 00:41:42,270
don't contain the words shell or execute

877
00:41:38,670 --> 00:41:43,860
you may be able to you can run them and

878
00:41:42,270 --> 00:41:45,420
it won't be sent to MZ it will still be

879
00:41:43,860 --> 00:41:47,580
in this law but it will just never be

880
00:41:45,420 --> 00:41:50,070
sent to your to the AV product so

881
00:41:47,580 --> 00:41:53,670
examples of that are execute execute

882
00:41:50,070 --> 00:41:56,220
excelled for a tomar el DD e initialize

883
00:41:53,670 --> 00:41:57,870
or W my spawn instance there are all

884
00:41:56,220 --> 00:42:01,950
words which don't contain the word shell

885
00:41:57,870 --> 00:42:05,250
or execute and then a fourth category

886
00:42:01,950 --> 00:42:08,700
exists that is there are features in

887
00:42:05,250 --> 00:42:12,390
Word and Excel that don't that are not

888
00:42:08,700 --> 00:42:15,839
per se calm or not word min 32 so how

889
00:42:12,390 --> 00:42:17,790
about we create a file in words a macro

890
00:42:15,840 --> 00:42:20,010
and the only thing the macro does is

891
00:42:17,790 --> 00:42:23,580
write something in the in in a word file

892
00:42:20,010 --> 00:42:25,950
save it as a text file but in a text

893
00:42:23,580 --> 00:42:28,650
file format but with the extension dobot

894
00:42:25,950 --> 00:42:30,299
and the extension don't react and if we

895
00:42:28,650 --> 00:42:33,240
do that in a small way we dropped it in

896
00:42:30,300 --> 00:42:35,610
the startup directory then suddenly we

897
00:42:33,240 --> 00:42:37,830
have we just drop a bad file which has

898
00:42:35,610 --> 00:42:40,620
imported raffle and then the left file

899
00:42:37,830 --> 00:42:43,529
we say disable the mz9 or set this macro

900
00:42:40,620 --> 00:42:45,660
runtime scope to disabled and the next

901
00:42:43,530 --> 00:42:47,400
and this is all stored in hte current

902
00:42:45,660 --> 00:42:49,500
user so that's that's very nice for us

903
00:42:47,400 --> 00:42:51,540
we can write so the next time the system

904
00:42:49,500 --> 00:42:54,630
reboots we just disabled MZ forwards and

905
00:42:51,540 --> 00:42:57,120
we can go along and have a lot of fun

906
00:42:54,630 --> 00:43:00,090
without MZ intercepting so what we're

907
00:42:57,120 --> 00:43:03,180
seeing is that the MZ implementation for

908
00:43:00,090 --> 00:43:05,160
VBA is weaker than the MZ implementation

909
00:43:03,180 --> 00:43:07,259
for powershell for example and that is

910
00:43:05,160 --> 00:43:09,180
just by design because it works with

911
00:43:07,260 --> 00:43:11,370
logging and triggers whereas the

912
00:43:09,180 --> 00:43:13,620
powershell MZ this catches the whole

913
00:43:11,370 --> 00:43:15,810
script this is completely different and

914
00:43:13,620 --> 00:43:18,230
we already see that there is a few basic

915
00:43:15,810 --> 00:43:21,960
techniques by which we can bypass this

916
00:43:18,230 --> 00:43:24,510
but on a properly hardened system you

917
00:43:21,960 --> 00:43:27,120
might also run into a text surface

918
00:43:24,510 --> 00:43:27,930
reduction and a text surface reduction

919
00:43:27,120 --> 00:43:29,670
our rule

920
00:43:27,930 --> 00:43:32,250
that are enforced by Windows Defender

921
00:43:29,670 --> 00:43:36,680
exploit guard which is the successor to

922
00:43:32,250 --> 00:43:40,950
Amit and there's a few rules which can

923
00:43:36,680 --> 00:43:42,960
harden office in Excel and other MS

924
00:43:40,950 --> 00:43:46,560
Office programs that are running and the

925
00:43:42,960 --> 00:43:50,400
most famous rules are the rules to block

926
00:43:46,560 --> 00:43:52,410
Windows 32 API calls and the rule to

927
00:43:50,400 --> 00:43:54,750
block office applications like Word and

928
00:43:52,410 --> 00:43:56,399
Excel from creating child processes so

929
00:43:54,750 --> 00:44:00,420
block them from create starting other

930
00:43:56,400 --> 00:44:04,530
programs it's not that difficult to get

931
00:44:00,420 --> 00:44:07,170
to bypass these two the first rule block

932
00:44:04,530 --> 00:44:09,990
windows 32 api calls it's a static rule

933
00:44:07,170 --> 00:44:12,810
so Windows Defender export guard just

934
00:44:09,990 --> 00:44:16,109
scans a macro if there are any VBA

935
00:44:12,810 --> 00:44:19,020
signatures for forbidden windows 32 API

936
00:44:16,110 --> 00:44:21,990
calls so how can we bypass this well we

937
00:44:19,020 --> 00:44:26,940
can actually go from VBA to excel for

938
00:44:21,990 --> 00:44:29,279
macros and thereby call the windows 32

939
00:44:26,940 --> 00:44:31,800
API call dynamically without having to

940
00:44:29,280 --> 00:44:34,920
have a VBA signature for the windows 32

941
00:44:31,800 --> 00:44:37,320
API function you see a few lines of code

942
00:44:34,920 --> 00:44:41,550
that that do just that for shell execute

943
00:44:37,320 --> 00:44:43,680
a with calc for the other rule that's

944
00:44:41,550 --> 00:44:44,880
their block application block office

945
00:44:43,680 --> 00:44:46,770
application from creating child

946
00:44:44,880 --> 00:44:49,200
processes that's a dynamic rule so

947
00:44:46,770 --> 00:44:52,710
that's enforced during runtime is not a

948
00:44:49,200 --> 00:44:55,080
scan of the VBA code and the whole trick

949
00:44:52,710 --> 00:44:57,900
there is to let the dirty job of

950
00:44:55,080 --> 00:44:59,700
starting another process to be done by

951
00:44:57,900 --> 00:45:01,590
an order program for example of running

952
00:44:59,700 --> 00:45:03,960
instance of explorative the exe so what

953
00:45:01,590 --> 00:45:06,210
this code example on the bottom does it

954
00:45:03,960 --> 00:45:08,880
just creates a common interface to shell

955
00:45:06,210 --> 00:45:12,000
browser window which happens to be a

956
00:45:08,880 --> 00:45:14,040
part of Explorer dot exe the running

957
00:45:12,000 --> 00:45:17,460
instance of explorer dot exe the actual

958
00:45:14,040 --> 00:45:20,550
shell and then we can abuse the methods

959
00:45:17,460 --> 00:45:23,460
shall execute which explorer offers

960
00:45:20,550 --> 00:45:27,660
viacom to have explorer start Calvert

961
00:45:23,460 --> 00:45:30,900
exe so now Word or Excel interfaced with

962
00:45:27,660 --> 00:45:32,580
Explorer dot exe no process creation

963
00:45:30,900 --> 00:45:34,770
there because explore Dixie was already

964
00:45:32,580 --> 00:45:37,049
running and we have explored at exe

965
00:45:34,770 --> 00:45:38,640
spawn a child process well you can do

966
00:45:37,050 --> 00:45:40,730
this kind of freaks both with calm and

967
00:45:38,640 --> 00:45:45,650
WMI but these are the most

968
00:45:40,730 --> 00:45:48,350
famous ways to to bypass bypass ASR this

969
00:45:45,650 --> 00:45:50,210
concludes our presentation and what we

970
00:45:48,350 --> 00:45:54,259
have shown you is that there's both

971
00:45:50,210 --> 00:45:57,290
archaic features like excel for put o

972
00:45:54,260 --> 00:46:00,800
mark roads and fields that can be abused

973
00:45:57,290 --> 00:46:03,560
but also new features like power query

974
00:46:00,800 --> 00:46:07,280
with the M language which are really

975
00:46:03,560 --> 00:46:10,220
promising for abuse as well and we've

976
00:46:07,280 --> 00:46:12,500
also shown you that these features can

977
00:46:10,220 --> 00:46:16,220
be abused in all stages of an attack

978
00:46:12,500 --> 00:46:17,840
from code execution antivirus back pass

979
00:46:16,220 --> 00:46:20,209
but we've also shown that it can be

980
00:46:17,840 --> 00:46:22,610
really interesting for lateral movement

981
00:46:20,210 --> 00:46:26,180
and bypasses a lot of defenses like mg

982
00:46:22,610 --> 00:46:28,520
and ASR we pretty much love Emma's

983
00:46:26,180 --> 00:46:31,879
office from a offensive perspective

984
00:46:28,520 --> 00:46:33,470
we've only scratched the surface and we

985
00:46:31,880 --> 00:46:35,300
really hope that you we've given you

986
00:46:33,470 --> 00:46:37,970
some insights not only on how to abuse

987
00:46:35,300 --> 00:46:40,340
this kind of stuff but also provides

988
00:46:37,970 --> 00:46:43,580
interesting angles for future research

989
00:46:40,340 --> 00:46:46,490
because really there is so much more

990
00:46:43,580 --> 00:46:50,630
both old features and new features being

991
00:46:46,490 --> 00:46:52,100
added is basically a goldmine so thank

992
00:46:50,630 --> 00:46:54,200
you all for listening if there are any

993
00:46:52,100 --> 00:46:59,779
questions I do think that we have a few

994
00:46:54,200 --> 00:47:00,710
minutes to answer them I see a hand

995
00:46:59,780 --> 00:47:02,390
there I don't know if there's a

996
00:47:00,710 --> 00:47:04,420
microphone if not we'll just repeat the

997
00:47:02,390 --> 00:47:04,420
question

998
00:47:07,630 --> 00:47:17,769
ah would daresay bling markers actually

999
00:47:10,839 --> 00:47:20,019
stop all this yes and no yes as in both

1000
00:47:17,769 --> 00:47:23,258
peacoat and excel for markers they do

1001
00:47:20,019 --> 00:47:24,848
adhere to the 2d settings and you're

1002
00:47:23,259 --> 00:47:30,519
actually talking about the trust

1003
00:47:24,849 --> 00:47:31,559
settings so if you go to file where do

1004
00:47:30,519 --> 00:47:36,249
we have it

1005
00:47:31,559 --> 00:47:39,099
options and then go to the trust Center

1006
00:47:36,249 --> 00:47:42,220
trust Center settings these settings can

1007
00:47:39,099 --> 00:47:44,950
be managed for GPOs if you want to so if

1008
00:47:42,220 --> 00:47:46,959
you set disable all markers without

1009
00:47:44,950 --> 00:47:49,328
notification then yes

1010
00:47:46,960 --> 00:47:51,400
P code and Excel for both all markers do

1011
00:47:49,329 --> 00:47:54,460
adhere to this setting but a common

1012
00:47:51,400 --> 00:47:58,390
misconception is that this setting

1013
00:47:54,460 --> 00:48:01,150
actually blocks all macros which it says

1014
00:47:58,390 --> 00:48:03,700
it doesn't and if you're really

1015
00:48:01,150 --> 00:48:05,499
interested into this stuff I advise you

1016
00:48:03,700 --> 00:48:08,049
to watch our derby comm presentation of

1017
00:48:05,499 --> 00:48:09,939
last year and our troopers presentation

1018
00:48:08,049 --> 00:48:12,219
of last week which are complementary to

1019
00:48:09,940 --> 00:48:15,069
what we told today but the basic summary

1020
00:48:12,219 --> 00:48:17,890
is that trusted documents trusted

1021
00:48:15,069 --> 00:48:22,499
locations and trusted publishers always

1022
00:48:17,890 --> 00:48:25,719
go have priority over this macro setting

1023
00:48:22,499 --> 00:48:28,359
so if you can have a document to be

1024
00:48:25,719 --> 00:48:30,249
either a trusted document which is just

1025
00:48:28,359 --> 00:48:32,200
a registry setting somewhere which you

1026
00:48:30,249 --> 00:48:33,999
can abused or whether it is a only

1027
00:48:32,200 --> 00:48:36,999
trusted location or signed by a trusted

1028
00:48:33,999 --> 00:48:38,519
publisher then it will always run so

1029
00:48:36,999 --> 00:48:41,348
that's why there's my answer yes or no

1030
00:48:38,519 --> 00:48:43,538
there is a big caveat here and in the

1031
00:48:41,349 --> 00:48:45,839
presentations that I mentioned we show

1032
00:48:43,539 --> 00:48:50,910
some angles on how you can abuse that

1033
00:48:45,839 --> 00:48:50,910
does it answer your question cool thanks

1034
00:49:04,869 --> 00:49:09,829
that's a really good one so the question

1035
00:49:07,130 --> 00:49:12,050
is what is our experience with office

1036
00:49:09,829 --> 00:49:14,210
fire processors which are in various

1037
00:49:12,050 --> 00:49:16,849
projects both open source and and closed

1038
00:49:14,210 --> 00:49:18,890
source I don't think we've ever

1039
00:49:16,849 --> 00:49:19,550
seriously looked into that No so

1040
00:49:18,890 --> 00:49:21,799
interestingly

1041
00:49:19,550 --> 00:49:25,280
so I started with these fields and these

1042
00:49:21,800 --> 00:49:27,770
CVS we submitted them forwards the patch

1043
00:49:25,280 --> 00:49:30,079
came out for SharePoint as well so we

1044
00:49:27,770 --> 00:49:31,460
already saw that way we didn't really

1045
00:49:30,079 --> 00:49:32,690
look into that what we saw that

1046
00:49:31,460 --> 00:49:34,910
apparently that was for SharePoint as

1047
00:49:32,690 --> 00:49:37,760
well so processors are in different

1048
00:49:34,910 --> 00:49:39,859
areas as well so it's interesting

1049
00:49:37,760 --> 00:49:41,510
research yeah my good feeling is the

1050
00:49:39,859 --> 00:49:44,029
specifications of the office file

1051
00:49:41,510 --> 00:49:46,130
formats but also of the markers they are

1052
00:49:44,030 --> 00:49:48,770
so difficult that's one

1053
00:49:46,130 --> 00:49:50,960
they are ambiguous like Unicode versus s

1054
00:49:48,770 --> 00:49:53,869
key etc that's two and they are also

1055
00:49:50,960 --> 00:49:55,730
largely undocumented while still those

1056
00:49:53,869 --> 00:49:58,750
undocumented parts are being used by

1057
00:49:55,730 --> 00:50:02,390
word in Excel so from my perspective

1058
00:49:58,750 --> 00:50:04,730
it's it's it's a recipe for a mess form

1059
00:50:02,390 --> 00:50:06,170
a processing perspective although I

1060
00:50:04,730 --> 00:50:07,460
don't know really really interesting

1061
00:50:06,170 --> 00:50:10,040
angle I'm not sure which processors

1062
00:50:07,460 --> 00:50:12,050
support macros but that's thanks for the

1063
00:50:10,040 --> 00:50:17,150
life we have some time work to do take a

1064
00:50:12,050 --> 00:50:18,500
look into that thing all right if

1065
00:50:17,150 --> 00:50:20,270
there's any other questions feel free to

1066
00:50:18,500 --> 00:50:21,740
call me over here or we'll be happy to

1067
00:50:20,270 --> 00:50:23,650
answer them during the rest of the EFT

1068
00:50:21,740 --> 00:50:25,759
conference thank you again for your

1069
00:50:23,650 --> 00:50:26,340
attention and we hope to see you again

1070
00:50:25,760 --> 00:50:31,899
bye

1071
00:50:26,340 --> 00:50:31,899
[Applause]

