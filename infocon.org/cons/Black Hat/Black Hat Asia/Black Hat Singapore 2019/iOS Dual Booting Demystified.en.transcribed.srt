1
00:00:00,179 --> 00:00:07,080
hi everyone welcome to blackhead my name

2
00:00:04,410 --> 00:00:12,059
is Max Buzzelli and today I'm gonna talk

3
00:00:07,080 --> 00:00:14,940
about the iOS dual booting so I'm

4
00:00:12,059 --> 00:00:17,460
bleeding security research at Nvidia at

5
00:00:14,940 --> 00:00:19,350
enormous pickle group and most of my

6
00:00:17,460 --> 00:00:22,050
time are having fun with Nvidia driver s

7
00:00:19,350 --> 00:00:23,939
tech but previously I was working at a

8
00:00:22,050 --> 00:00:27,449
security researcher at lookout in the

9
00:00:23,939 --> 00:00:29,519
blue box focuses on mobile security so I

10
00:00:27,449 --> 00:00:33,450
was made up barreled jailbreak for iOS

11
00:00:29,519 --> 00:00:37,320
which is toas as well as was after off

12
00:00:33,450 --> 00:00:39,870
Pegasus exploit white pepper a quick

13
00:00:37,320 --> 00:00:42,960
disclaimer I don't speak for my employer

14
00:00:39,870 --> 00:00:45,209
so this research is not related to my

15
00:00:42,960 --> 00:00:47,670
work at Nvidia it was just a fun

16
00:00:45,210 --> 00:00:49,770
personal project for me so all the

17
00:00:47,670 --> 00:00:53,940
opinions called snippets and ideas

18
00:00:49,770 --> 00:00:56,760
they're all mine the old boot like what

19
00:00:53,940 --> 00:00:58,980
is a dual boot why do we need it it's

20
00:00:56,760 --> 00:01:02,879
pretty much a process of having multiple

21
00:00:58,980 --> 00:01:04,530
operating systems on one device and both

22
00:01:02,879 --> 00:01:08,460
operating systems they can share the

23
00:01:04,530 --> 00:01:11,900
same hardware resources but we have some

24
00:01:08,460 --> 00:01:14,399
freedom on which iOS version one to boot

25
00:01:11,900 --> 00:01:17,610
unfortunately Apple did not make our

26
00:01:14,400 --> 00:01:19,850
life any easier so there's no low-level

27
00:01:17,610 --> 00:01:22,500
boot manager for is that we can easily

28
00:01:19,850 --> 00:01:24,559
switch between the version so we need to

29
00:01:22,500 --> 00:01:28,049
figure out by ourself

30
00:01:24,560 --> 00:01:30,869
why do we need the old boot first of all

31
00:01:28,049 --> 00:01:32,820
like quick experiments with a different

32
00:01:30,869 --> 00:01:35,790
operating system levels for example

33
00:01:32,820 --> 00:01:37,949
heaven is eleven point four and eleven

34
00:01:35,790 --> 00:01:42,630
point fun on the same device and easily

35
00:01:37,950 --> 00:01:45,180
switch between them or for example for

36
00:01:42,630 --> 00:01:47,369
system recovery if you're working on a

37
00:01:45,180 --> 00:01:49,020
some persistent exploit for is and

38
00:01:47,369 --> 00:01:50,790
you're really scared that you can boot

39
00:01:49,020 --> 00:01:53,759
loop your device you can boot in a

40
00:01:50,790 --> 00:01:57,479
second system and repair the corrupted

41
00:01:53,759 --> 00:02:00,380
file or for example even boot the second

42
00:01:57,479 --> 00:02:02,759
days with in-app red yellow container

43
00:02:00,380 --> 00:02:05,908
with disabled

44
00:02:02,759 --> 00:02:08,038
guys LR with disabled KTR are we

45
00:02:05,909 --> 00:02:10,700
disabled at all the mitigations which

46
00:02:08,038 --> 00:02:14,720
makes it perfect for different POC test

47
00:02:10,699 --> 00:02:14,720
if you want just to focus on

48
00:02:15,230 --> 00:02:20,159
sharpen your exploit and you have

49
00:02:18,120 --> 00:02:22,290
someone on mitigation I can disable just

50
00:02:20,159 --> 00:02:24,810
a few of them so dead build boot really

51
00:02:22,290 --> 00:02:28,469
works for how does it work

52
00:02:24,810 --> 00:02:30,629
so the bad news we need a create a new

53
00:02:28,469 --> 00:02:33,469
set of Bucheon components pretty much

54
00:02:30,629 --> 00:02:37,590
the bootloader the kernel the modified

55
00:02:33,469 --> 00:02:40,439
file system sometimes the device 3 the

56
00:02:37,590 --> 00:02:43,560
good news that we can bootstrap our

57
00:02:40,439 --> 00:02:46,349
second system from a ram itself or from

58
00:02:43,560 --> 00:02:49,680
an end for this purpose kernel or

59
00:02:46,349 --> 00:02:51,560
another bootloader can be used and of

60
00:02:49,680 --> 00:02:59,189
course when it kernel or bootloader

61
00:02:51,560 --> 00:03:01,079
level code execution like a few words

62
00:02:59,189 --> 00:03:04,108
about Apple secure boot so the secure

63
00:03:01,079 --> 00:03:06,599
boot is our arc enemy on a way to draw

64
00:03:04,109 --> 00:03:10,319
boot and there's a lot of papers how

65
00:03:06,599 --> 00:03:13,048
they pose secure boot work I just want

66
00:03:10,319 --> 00:03:15,328
to make a quick overview so every since

67
00:03:13,049 --> 00:03:17,310
start with Apple routes a public key in

68
00:03:15,329 --> 00:03:19,560
a boot ROM and pretty much each

69
00:03:17,310 --> 00:03:21,959
component get verified before the

70
00:03:19,560 --> 00:03:25,109
execution so for example boot ROM

71
00:03:21,959 --> 00:03:27,509
verified and low I boot stage 1 which

72
00:03:25,109 --> 00:03:29,549
verify and Louis I boot stage 2 which we

73
00:03:27,509 --> 00:03:32,809
refine load the rest of the system like

74
00:03:29,549 --> 00:03:35,810
kernel cash and device 3 and root of s

75
00:03:32,810 --> 00:03:38,519
in some of the operation during boot

76
00:03:35,810 --> 00:03:44,159
step get involved it mostly to provide

77
00:03:38,519 --> 00:03:46,379
secure random number generator so here's

78
00:03:44,159 --> 00:03:48,540
how the Apple boot process looks like

79
00:03:46,379 --> 00:03:51,659
for the Apple support local and remote

80
00:03:48,540 --> 00:03:54,060
boot and the main difference are we

81
00:03:51,659 --> 00:03:57,120
booting from NAND or IV booting from DFU

82
00:03:54,060 --> 00:03:59,340
mode so boot ROM checking are we

83
00:03:57,120 --> 00:04:01,859
currently in DFU mode if we are it

84
00:03:59,340 --> 00:04:05,340
expect IBSS image to be uploaded over

85
00:04:01,859 --> 00:04:08,909
the USB verified furniture if ever since

86
00:04:05,340 --> 00:04:10,829
the key IBSS gonna load the I back and I

87
00:04:08,909 --> 00:04:14,899
beg gonna boot the rest of the system in

88
00:04:10,829 --> 00:04:16,889
the remote mode in a case of local boot

89
00:04:14,900 --> 00:04:19,680
boot rom will try to boot

90
00:04:16,889 --> 00:04:22,409
ll be from and if everything is great I

91
00:04:19,680 --> 00:04:25,380
will be will boot I boot and continue to

92
00:04:22,409 --> 00:04:27,930
boot rest of the system there is this

93
00:04:25,380 --> 00:04:33,610
few changes

94
00:04:27,930 --> 00:04:37,539
- seven so on - seven Apple increase

95
00:04:33,610 --> 00:04:40,060
this the amount of static RAM in a boot

96
00:04:37,539 --> 00:04:42,490
ROM so now it can blow it like much

97
00:04:40,060 --> 00:04:45,190
larger boot loaders which means that now

98
00:04:42,490 --> 00:04:46,900
boot ROM can boot the I ll be and I will

99
00:04:45,190 --> 00:04:49,210
be for example can boot the rest of the

100
00:04:46,900 --> 00:04:51,810
system by passing the high boot the same

101
00:04:49,210 --> 00:04:51,810
for DFU mode

102
00:04:52,020 --> 00:04:58,330
alright so boot ROM and boot ROM

103
00:04:55,660 --> 00:05:00,610
implements IMG for image verifications

104
00:04:58,330 --> 00:05:02,400
I'm g4 is pretty much a container it

105
00:05:00,610 --> 00:05:04,449
contain a payload that contain

106
00:05:02,400 --> 00:05:07,388
decryption keys for a payload and

107
00:05:04,449 --> 00:05:08,949
payload manifest the most interesting

108
00:05:07,389 --> 00:05:10,479
parts the manifest the manifest is

109
00:05:08,949 --> 00:05:12,610
pretty much the set of the different

110
00:05:10,479 --> 00:05:14,710
properties that get verified during the

111
00:05:12,610 --> 00:05:16,599
boot so which property from manifests

112
00:05:14,710 --> 00:05:20,560
compare it with a property from a device

113
00:05:16,599 --> 00:05:23,530
and if all of them match then boot ROM

114
00:05:20,560 --> 00:05:26,169
will pass the execution so for example

115
00:05:23,530 --> 00:05:28,570
one of the properties is payload hash to

116
00:05:26,169 --> 00:05:31,840
make sure that payload is not modified

117
00:05:28,570 --> 00:05:33,639
nonce to make sure that we run this

118
00:05:31,840 --> 00:05:36,010
specific iOS version on this specific

119
00:05:33,639 --> 00:05:38,949
device this pretty much the way how

120
00:05:36,010 --> 00:05:41,860
Apple prevents it downgrade is the ad or

121
00:05:38,949 --> 00:05:44,949
like a board ad to make sure that we run

122
00:05:41,860 --> 00:05:47,770
the fiber on the for this device and so

123
00:05:44,949 --> 00:05:49,840
on so if everything is great all the

124
00:05:47,770 --> 00:05:53,409
chicks are pass it boot ROM will decrypt

125
00:05:49,840 --> 00:05:58,090
the payload and execute it a few more

126
00:05:53,409 --> 00:06:01,300
sins may happen first is if the payload

127
00:05:58,090 --> 00:06:04,690
image and payload manifest contains

128
00:06:01,300 --> 00:06:06,250
specific properties the boot ROM can do

129
00:06:04,690 --> 00:06:07,930
the stopped override for refuses for

130
00:06:06,250 --> 00:06:11,070
like production a production security

131
00:06:07,930 --> 00:06:13,509
fuse and pretty much switch device from

132
00:06:11,070 --> 00:06:16,150
release mode to development mode in

133
00:06:13,509 --> 00:06:18,729
other words it can enable the JTAG

134
00:06:16,150 --> 00:06:23,560
of course it's really secured by Apple

135
00:06:18,729 --> 00:06:25,719
by Apple Senator another thing is our

136
00:06:23,560 --> 00:06:28,599
own manifest hash is this thing for

137
00:06:25,720 --> 00:06:32,050
iPhone 7 and later and the basic idea is

138
00:06:28,599 --> 00:06:33,940
its boot ROM calculate hash of the

139
00:06:32,050 --> 00:06:35,620
payload manifest and save it in one of

140
00:06:33,940 --> 00:06:38,320
the harder' register and lock this

141
00:06:35,620 --> 00:06:40,330
hardware register and during the next

142
00:06:38,320 --> 00:06:42,090
component

143
00:06:40,330 --> 00:06:44,650
this hash will be compared it with

144
00:06:42,090 --> 00:06:48,429
payload manifest hash of the next

145
00:06:44,650 --> 00:06:51,489
components it's to prevent the mix and

146
00:06:48,430 --> 00:06:53,830
match so okay

147
00:06:51,490 --> 00:06:57,430
the bootrom brief ID of the pay load it

148
00:06:53,830 --> 00:07:00,340
load load and execute a payload which is

149
00:06:57,430 --> 00:07:02,950
Stage one load well boot loaders IBSS or

150
00:07:00,340 --> 00:07:07,320
I ll be the only difference between them

151
00:07:02,950 --> 00:07:07,320
is it's just for remote and local boot

152
00:07:07,500 --> 00:07:13,720
in a case of IBSS it's just a weight for

153
00:07:11,020 --> 00:07:15,430
I back image to be uploaded over the USB

154
00:07:13,720 --> 00:07:17,740
if everything is great

155
00:07:15,430 --> 00:07:19,510
verifies when booted in a case if I load

156
00:07:17,740 --> 00:07:21,940
B it just boot I boot image from meant

157
00:07:19,510 --> 00:07:26,020
if something is wrong switch back to the

158
00:07:21,940 --> 00:07:28,990
EFI mode both boot loaders they perform

159
00:07:26,020 --> 00:07:31,299
md4 checks the same as boot rom the same

160
00:07:28,990 --> 00:07:33,220
mix and match preventing checks they

161
00:07:31,300 --> 00:07:35,680
store it in encrypted time before

162
00:07:33,220 --> 00:07:38,650
container so Apple still not ship them

163
00:07:35,680 --> 00:07:41,020
decrypt it but luckily there are some

164
00:07:38,650 --> 00:07:44,469
key is available on public it really

165
00:07:41,020 --> 00:07:47,919
helped us to check how how the

166
00:07:44,470 --> 00:07:50,860
patrollers really work and since I found

167
00:07:47,920 --> 00:07:53,380
10 Apple made some refactoring work so

168
00:07:50,860 --> 00:07:56,020
now all the boot loaders pretty much one

169
00:07:53,380 --> 00:07:59,219
binary that can be run in a different

170
00:07:56,020 --> 00:08:00,820
code path like in local or remote boot

171
00:07:59,220 --> 00:08:04,360
so stage 2

172
00:08:00,820 --> 00:08:06,370
i Baker I boot again for local remote

173
00:08:04,360 --> 00:08:09,190
boot both can lower the kernel cache

174
00:08:06,370 --> 00:08:12,070
both can load the device 3 the RAM disks

175
00:08:09,190 --> 00:08:15,130
and since iOS 12 and now they can lower

176
00:08:12,070 --> 00:08:17,349
the trust cache they perform IMD four

177
00:08:15,130 --> 00:08:21,850
checks the same mix-and-match prevention

178
00:08:17,350 --> 00:08:24,460
checks still encrypted and Apple made

179
00:08:21,850 --> 00:08:30,130
some refactoring and by merging into one

180
00:08:24,460 --> 00:08:33,250
big binary device 3 that's an image

181
00:08:30,130 --> 00:08:35,049
which basically represents the hardware

182
00:08:33,250 --> 00:08:37,929
mappings it's a way for a kernel to

183
00:08:35,049 --> 00:08:40,390
communicate with low-level hardware so

184
00:08:37,929 --> 00:08:43,390
doing a boot I boot or I back the set up

185
00:08:40,390 --> 00:08:45,760
various entries of the device tree and

186
00:08:43,390 --> 00:08:48,460
later on kernel will read this entries

187
00:08:45,760 --> 00:08:52,000
map the addresses if if needed set up

188
00:08:48,460 --> 00:08:53,230
the properties since I Stan it's not

189
00:08:52,000 --> 00:08:55,660
encrypted anymore

190
00:08:53,230 --> 00:08:57,820
it's still sign it's it's still rapid in

191
00:08:55,660 --> 00:08:59,500
IMG for container and there are few

192
00:08:57,820 --> 00:09:03,850
container types for remote and local

193
00:08:59,500 --> 00:09:05,800
boot the next component of a boot chain

194
00:09:03,850 --> 00:09:10,750
is a kernel Mukesh so the kernel cache

195
00:09:05,800 --> 00:09:13,569
premised xnu kernel and all the kernel

196
00:09:10,750 --> 00:09:17,560
extensions which are static link it to a

197
00:09:13,570 --> 00:09:19,660
kernel part the device tree Maps

198
00:09:17,560 --> 00:09:26,079
addresses that some of the properties

199
00:09:19,660 --> 00:09:28,000
and in case of is 12 now I boot map the

200
00:09:26,080 --> 00:09:29,920
static trust cash in the memory and the

201
00:09:28,000 --> 00:09:32,740
kernel now and I'll read it from one of

202
00:09:29,920 --> 00:09:38,010
the device three entries next is gonna

203
00:09:32,740 --> 00:09:40,930
load sep 5 or like sap is Wi-Fi baseband

204
00:09:38,010 --> 00:09:44,650
it still sign it in IMG for container

205
00:09:40,930 --> 00:09:47,170
not encrypted since I stand and there

206
00:09:44,650 --> 00:09:51,040
are few container types for remote and

207
00:09:47,170 --> 00:09:54,459
local boot the next one is ram disk so

208
00:09:51,040 --> 00:09:57,219
drum disk is like a set of like minimum

209
00:09:54,460 --> 00:09:59,170
OS image so it's like minimum set of

210
00:09:57,220 --> 00:10:01,780
frameworks and command-line tools that

211
00:09:59,170 --> 00:10:04,599
use it for restore and update purposes

212
00:10:01,780 --> 00:10:07,020
and that's why we have two types of ram

213
00:10:04,600 --> 00:10:09,490
disk the only difference is that

214
00:10:07,020 --> 00:10:12,400
restoring disk it's by a person from an

215
00:10:09,490 --> 00:10:14,350
end and then a flare the fiber and the

216
00:10:12,400 --> 00:10:18,280
update from disk it's not wipe in an end

217
00:10:14,350 --> 00:10:22,900
it just updating the different bail

218
00:10:18,280 --> 00:10:23,800
deltas during the update for this since

219
00:10:22,900 --> 00:10:26,770
I was 12

220
00:10:23,800 --> 00:10:30,250
Apple moved static thrust cache to a

221
00:10:26,770 --> 00:10:32,530
separate file the RAM disk so now each

222
00:10:30,250 --> 00:10:36,070
from this get its own static trust care

223
00:10:32,530 --> 00:10:38,800
that need to be loaded by I boot yeah

224
00:10:36,070 --> 00:10:40,450
it's not encrypted anymore since I stand

225
00:10:38,800 --> 00:10:43,449
but still sign it

226
00:10:40,450 --> 00:10:47,350
and finally the trust cache that then

227
00:10:43,450 --> 00:10:54,100
you think in is 12 so it's it's a file

228
00:10:47,350 --> 00:10:55,900
that contain code directory hashes for

229
00:10:54,100 --> 00:10:58,390
binaries that I store it on the RAM

230
00:10:55,900 --> 00:11:01,240
disks or the root of s so each from disk

231
00:10:58,390 --> 00:11:04,030
when it's get loaded

232
00:11:01,240 --> 00:11:06,100
it requires the trust cache image to be

233
00:11:04,030 --> 00:11:07,120
uploaded first and there are two

234
00:11:06,100 --> 00:11:09,970
container types and

235
00:11:07,120 --> 00:11:13,240
for local and remote boot during the

236
00:11:09,970 --> 00:11:15,910
restore time I guess we'll look for

237
00:11:13,240 --> 00:11:19,300
/boot /i boot offender in a restore

238
00:11:15,910 --> 00:11:22,059
partition to read the trust cache for

239
00:11:19,300 --> 00:11:25,839
root of s in a case of normal boot it

240
00:11:22,059 --> 00:11:30,569
just look for filesystem ephemeral - fu

241
00:11:25,839 --> 00:11:34,720
d static trust cache image so again

242
00:11:30,569 --> 00:11:37,809
instead of like later on it was Colonel

243
00:11:34,720 --> 00:11:42,279
the the part of the kernel was a static

244
00:11:37,809 --> 00:11:45,819
trust cache though the one of the data

245
00:11:42,279 --> 00:11:49,749
in a consignment now I will move it into

246
00:11:45,819 --> 00:11:53,559
separate image for security purposes so

247
00:11:49,749 --> 00:11:57,180
I boot map it annex a new read chose

248
00:11:53,559 --> 00:12:00,459
chosen memory map trust cache entry and

249
00:11:57,180 --> 00:12:03,370
using one of the P map functions

250
00:12:00,459 --> 00:12:06,758
basically to map into memory so it's

251
00:12:03,370 --> 00:12:10,389
just a theory how the modern secure boot

252
00:12:06,759 --> 00:12:12,069
works on modern Apple devices and now I

253
00:12:10,389 --> 00:12:14,829
want to move more to like reverse

254
00:12:12,069 --> 00:12:18,878
engineer in the Apple fiber so it will

255
00:12:14,829 --> 00:12:22,179
be a little bit more fun okay so I put

256
00:12:18,879 --> 00:12:24,670
an eye bag so that's level two lot of

257
00:12:22,179 --> 00:12:27,399
boot loaders they both support the

258
00:12:24,670 --> 00:12:27,910
different set of commands and this

259
00:12:27,399 --> 00:12:30,220
commentar

260
00:12:27,910 --> 00:12:34,389
they viable use it during the restore

261
00:12:30,220 --> 00:12:37,050
and update process and unfortunately on

262
00:12:34,389 --> 00:12:39,819
recent I boots there is no visible menu

263
00:12:37,050 --> 00:12:42,399
but the common handler still exists so

264
00:12:39,819 --> 00:12:45,550
if we know the common name we can send

265
00:12:42,399 --> 00:12:47,800
send the comment over the USB and with

266
00:12:45,550 --> 00:12:49,449
other should react the trick is that

267
00:12:47,800 --> 00:12:52,779
boot older should be in recovery mode

268
00:12:49,449 --> 00:12:56,769
and we need to use our recovery - C to

269
00:12:52,779 --> 00:12:59,920
send the command so what are the

270
00:12:56,769 --> 00:13:03,670
commands basically all we need to do

271
00:12:59,920 --> 00:13:06,579
just to grab a decryption key decrypt

272
00:13:03,670 --> 00:13:09,160
one of the boot loaders and use any

273
00:13:06,579 --> 00:13:12,128
disassembler and look for boutique

274
00:13:09,160 --> 00:13:15,009
string so as you see each command its

275
00:13:12,129 --> 00:13:17,750
rapid into each instruct and distract

276
00:13:15,009 --> 00:13:20,240
this common name pointer to

277
00:13:17,750 --> 00:13:23,510
c'mon handler and some of the common

278
00:13:20,240 --> 00:13:25,430
description Apple usually wipe out the

279
00:13:23,510 --> 00:13:27,200
common description but even this

280
00:13:25,430 --> 00:13:31,040
information still enough so we can map

281
00:13:27,200 --> 00:13:33,670
each common name to each common handler

282
00:13:31,040 --> 00:13:35,810
and here is an incomplete list of

283
00:13:33,670 --> 00:13:38,860
commands they are supported in Teresa

284
00:13:35,810 --> 00:13:41,390
with others for example like RAM disk

285
00:13:38,860 --> 00:13:43,700
rub these key commands it allow us to

286
00:13:41,390 --> 00:13:46,550
create the RAM disk image just from

287
00:13:43,700 --> 00:13:49,520
memory so we can upload ROM discovered

288
00:13:46,550 --> 00:13:53,060
the USB send the RAM disk command to

289
00:13:49,520 --> 00:13:57,290
boot loader and to try to create a ram

290
00:13:53,060 --> 00:13:59,239
disk object the same for device 3 we can

291
00:13:57,290 --> 00:14:02,780
upload device 3 over the USB and create

292
00:13:59,240 --> 00:14:05,840
it just from Ram finder it's basically

293
00:14:02,780 --> 00:14:07,850
the way how Apple upload the trust cache

294
00:14:05,840 --> 00:14:09,920
and verified the trust cache I'm

295
00:14:07,850 --> 00:14:15,710
uploading the image and send the

296
00:14:09,920 --> 00:14:17,000
Feinberg command and I believe they in a

297
00:14:15,710 --> 00:14:19,880
future version they're going to move

298
00:14:17,000 --> 00:14:21,830
more and more finder to be uploaded by I

299
00:14:19,880 --> 00:14:26,089
boot instead of the kernel I think for

300
00:14:21,830 --> 00:14:28,460
security reasons anyway for now fibre

301
00:14:26,089 --> 00:14:29,780
just slowed the trust cache the next is

302
00:14:28,460 --> 00:14:32,330
boutique's the boutique's

303
00:14:29,780 --> 00:14:34,250
it's a nice comment it allow us to boot

304
00:14:32,330 --> 00:14:36,800
the whole kernel cache just from a

305
00:14:34,250 --> 00:14:39,890
memory so we can upload Ram disk device

306
00:14:36,800 --> 00:14:42,770
3 trust cached and boutiques and here we

307
00:14:39,890 --> 00:14:46,400
go the the system of the Lord a first

308
00:14:42,770 --> 00:14:49,040
boot did the opposite of boutiques it's

309
00:14:46,400 --> 00:14:52,100
say hey with louder please boot the

310
00:14:49,040 --> 00:14:54,439
system from file system from NAND the

311
00:14:52,100 --> 00:14:58,970
same kernel cares device 3 and it is

312
00:14:54,440 --> 00:15:01,490
Rajesh and the last one is gold so it's

313
00:14:58,970 --> 00:15:07,750
interesting command basically did say

314
00:15:01,490 --> 00:15:12,140
how Apple that's a way how Apple upload

315
00:15:07,750 --> 00:15:14,510
different diagnostic images to I boot so

316
00:15:12,140 --> 00:15:18,110
we can upload different images or the

317
00:15:14,510 --> 00:15:20,780
USB then send the go command and if the

318
00:15:18,110 --> 00:15:25,520
image tag is correct it will be executed

319
00:15:20,780 --> 00:15:28,810
by a boot loader okay so let's switch

320
00:15:25,520 --> 00:15:31,069
back to drill boot so the plan is we can

321
00:15:28,810 --> 00:15:33,349
bootstrap our like

322
00:15:31,070 --> 00:15:35,810
fix it bootloader from a kernel that the

323
00:15:33,350 --> 00:15:37,580
one way for this purpose kernel code

324
00:15:35,810 --> 00:15:41,630
execution require it as well is still

325
00:15:37,580 --> 00:15:43,670
called the k-loader or we can execute

326
00:15:41,630 --> 00:15:46,430
our fixed bootloader from another

327
00:15:43,670 --> 00:15:48,770
bootloader in this purpose in this case

328
00:15:46,430 --> 00:15:54,199
like bootloader code execution is

329
00:15:48,770 --> 00:15:57,110
required if if we choose the jail boot

330
00:15:54,200 --> 00:16:00,650
from a kernel like most of the dual boot

331
00:15:57,110 --> 00:16:03,020
that use the kernel they all base it on

332
00:16:00,650 --> 00:16:05,300
a tool called a kill order and the main

333
00:16:03,020 --> 00:16:08,750
idea is as soon as we jailbreak our

334
00:16:05,300 --> 00:16:10,819
device we can get Colonel readwrite

335
00:16:08,750 --> 00:16:14,180
exact primitives we can take a boot

336
00:16:10,820 --> 00:16:16,130
loader that we modified we can write it

337
00:16:14,180 --> 00:16:20,209
back the specific address into physical

338
00:16:16,130 --> 00:16:23,450
memory and change a lower set vector in

339
00:16:20,210 --> 00:16:25,790
a kernel to be bootstrap our new

340
00:16:23,450 --> 00:16:29,210
bootloader so again the ideas the

341
00:16:25,790 --> 00:16:31,910
bootloader will load the kernel we write

342
00:16:29,210 --> 00:16:34,550
to kernel memory and the new bootloader

343
00:16:31,910 --> 00:16:38,469
and jump back to bootloader so it's kind

344
00:16:34,550 --> 00:16:41,780
of like big hack but that works and it

345
00:16:38,470 --> 00:16:44,720
the k-loader is in a base of cool booter

346
00:16:41,780 --> 00:16:46,520
tool by jonathan sills and the computer

347
00:16:44,720 --> 00:16:48,200
will do most of the thing for you

348
00:16:46,520 --> 00:16:51,020
automatically it will download the fiber

349
00:16:48,200 --> 00:16:53,300
or it will decrypt it it will set up the

350
00:16:51,020 --> 00:16:56,510
partitions and so on unfortunately it's

351
00:16:53,300 --> 00:16:59,930
only work for 32-bit devices and OS

352
00:16:56,510 --> 00:17:04,250
versions so the latest device we support

353
00:16:59,930 --> 00:17:08,659
is the iPhone 5c there was a few

354
00:17:04,250 --> 00:17:11,810
attempts to port key loader or 64-bit

355
00:17:08,660 --> 00:17:17,180
devices and the most successful one was

356
00:17:11,810 --> 00:17:19,188
kilo door 64 by economics it supports

357
00:17:17,180 --> 00:17:22,760
some of the 64-bit devices but there is

358
00:17:19,189 --> 00:17:25,579
still a problem that it limited up to

359
00:17:22,760 --> 00:17:27,910
highest point eight point four point one

360
00:17:25,579 --> 00:17:31,100
I will show you why

361
00:17:27,910 --> 00:17:33,560
so since iOS 9 Apple introduced

362
00:17:31,100 --> 00:17:36,800
kernel patch protector or the kpp and

363
00:17:33,560 --> 00:17:41,780
more advanced version of it in 810

364
00:17:36,800 --> 00:17:44,730
devices HRR which walk the kernel memory

365
00:17:41,780 --> 00:17:47,010
and prevent any write attempts to

366
00:17:44,730 --> 00:17:49,549
memory which means we cannot really map

367
00:17:47,010 --> 00:17:52,160
our new bootloader to physical memory

368
00:17:49,549 --> 00:17:55,799
it's yeah it's chicken and egg problem

369
00:17:52,160 --> 00:17:57,809
there are few ways to bypass it the last

370
00:17:55,799 --> 00:18:00,960
successful one was by Luca Tedesco in

371
00:17:57,809 --> 00:18:03,899
yellow 10 jailbreak but still even if we

372
00:18:00,960 --> 00:18:06,210
can disable Katie RR there's still some

373
00:18:03,900 --> 00:18:10,890
atras on map issues there is a trans own

374
00:18:06,210 --> 00:18:12,390
memory overlap so in other words the gel

375
00:18:10,890 --> 00:18:16,290
boot from Colonel not really working on

376
00:18:12,390 --> 00:18:19,049
the newer system yeah one more thing

377
00:18:16,290 --> 00:18:22,049
that I didn't mention the GED key the

378
00:18:19,049 --> 00:18:24,929
GED keys the key that used to decrypt

379
00:18:22,049 --> 00:18:26,970
the fiber and in a time when the

380
00:18:24,929 --> 00:18:29,730
Colonel's law that is already locked so

381
00:18:26,970 --> 00:18:31,470
even if you jump back to bootloader the

382
00:18:29,730 --> 00:18:36,120
keys already locket and we cannot

383
00:18:31,470 --> 00:18:39,419
decrypt the new fiber which mean kernel

384
00:18:36,120 --> 00:18:41,549
way of gel booting it's works but it

385
00:18:39,419 --> 00:18:44,030
gets its own limitation so why not try

386
00:18:41,549 --> 00:18:46,799
to draw wood from another bottle itself

387
00:18:44,030 --> 00:18:50,010
so we're gonna bootstrap our fixed

388
00:18:46,799 --> 00:18:51,570
bootloader from another bootloader which

389
00:18:50,010 --> 00:18:56,129
going to load this fixed head kernel

390
00:18:51,570 --> 00:18:58,290
cash 6 device 3 ram these fiber all the

391
00:18:56,130 --> 00:19:00,900
stuff that I mentioned and finally boot

392
00:18:58,290 --> 00:19:04,860
the carbocation so we boot the system

393
00:19:00,900 --> 00:19:08,040
just just from RAM and we get the SSH it

394
00:19:04,860 --> 00:19:10,020
says I will show show you how we can

395
00:19:08,040 --> 00:19:12,659
write the rest of root filesystem

396
00:19:10,020 --> 00:19:18,030
to an end and boot a second systems did

397
00:19:12,660 --> 00:19:19,740
the plan but on a way to draw boot there

398
00:19:18,030 --> 00:19:21,540
a lot I just require as I say we need to

399
00:19:19,740 --> 00:19:26,340
create our own set of bootloader

400
00:19:21,540 --> 00:19:31,470
components and here is a set of patches

401
00:19:26,340 --> 00:19:33,809
that I found useful during my research

402
00:19:31,470 --> 00:19:35,549
of dual boot so for example for I boot

403
00:19:33,809 --> 00:19:38,389
in I back it's really required to

404
00:19:35,549 --> 00:19:41,668
disable code senator check like MD for I

405
00:19:38,390 --> 00:19:43,710
want to show you how it's nice to have

406
00:19:41,669 --> 00:19:45,720
to exist to disable care is alarm if you

407
00:19:43,710 --> 00:19:49,100
want to put the second system with

408
00:19:45,720 --> 00:19:51,750
disabled mitigations or for example to

409
00:19:49,100 --> 00:19:53,780
inject this custom boot argument because

410
00:19:51,750 --> 00:19:59,040
they release a boost the do not support

411
00:19:53,780 --> 00:20:01,570
any boot arguments from nvram

412
00:19:59,040 --> 00:20:03,790
for xnu for a kernel itself it's

413
00:20:01,570 --> 00:20:06,490
required to disable code sign it's nice

414
00:20:03,790 --> 00:20:09,250
to disable KTR are like kernel text read

415
00:20:06,490 --> 00:20:12,910
on the region I will show it a little

416
00:20:09,250 --> 00:20:15,460
bit later it's nice to export tasks for

417
00:20:12,910 --> 00:20:18,670
p0 or even room up the whole kernel is

418
00:20:15,460 --> 00:20:21,610
readable writable executable as far up

419
00:20:18,670 --> 00:20:24,280
disk all we need to do just to add the

420
00:20:21,610 --> 00:20:27,699
SSH client and some minimal set of

421
00:20:24,280 --> 00:20:31,360
common line tools that we need to play

422
00:20:27,700 --> 00:20:33,700
with device 3 again it's not really

423
00:20:31,360 --> 00:20:35,979
required patch but it's nice to have if

424
00:20:33,700 --> 00:20:39,130
we want to boot the second file system

425
00:20:35,980 --> 00:20:41,140
with the second highest system with UI

426
00:20:39,130 --> 00:20:44,730
we need to disable the physical storage

427
00:20:41,140 --> 00:20:47,440
and finally trust cache is one of the

428
00:20:44,730 --> 00:20:49,540
alternative ways of disabling the called

429
00:20:47,440 --> 00:20:52,800
sign we can just add a new interest rate

430
00:20:49,540 --> 00:20:56,159
R as cache so this is how it looks like

431
00:20:52,800 --> 00:20:58,810
for I back and I boot there is a

432
00:20:56,160 --> 00:21:02,620
function image for validate property

433
00:20:58,810 --> 00:21:04,720
callback which compare each of the

434
00:21:02,620 --> 00:21:06,370
properties from a boot manifest and

435
00:21:04,720 --> 00:21:09,190
compare with the same properties on the

436
00:21:06,370 --> 00:21:11,830
device itself and if all the properties

437
00:21:09,190 --> 00:21:13,660
are good it kind of continue a boot and

438
00:21:11,830 --> 00:21:18,460
it gets it get reference to you from

439
00:21:13,660 --> 00:21:20,140
image for load it's like it's easier way

440
00:21:18,460 --> 00:21:22,020
to find it just look for one of the

441
00:21:20,140 --> 00:21:24,640
properties for example B and C N and

442
00:21:22,020 --> 00:21:26,830
there's will be only one reference to

443
00:21:24,640 --> 00:21:30,340
image for image for validated property

444
00:21:26,830 --> 00:21:32,230
callback so what we need to do is just

445
00:21:30,340 --> 00:21:34,600
scroll down to the end of the function

446
00:21:32,230 --> 00:21:37,810
and we will see a reference stack check

447
00:21:34,600 --> 00:21:40,240
fail and before that it will it will

448
00:21:37,810 --> 00:21:43,030
gonna calculate the return value just

449
00:21:40,240 --> 00:21:45,250
make sure that we always return 0 into X

450
00:21:43,030 --> 00:21:50,680
0 which means like all the checks will

451
00:21:45,250 --> 00:21:53,920
be successful boot arguments so the the

452
00:21:50,680 --> 00:21:56,170
problem is it release I boot they do not

453
00:21:53,920 --> 00:21:58,960
support any custom boot arguments to be

454
00:21:56,170 --> 00:22:02,290
pass it to boot loader which means even

455
00:21:58,960 --> 00:22:04,360
if we can somehow right boot argument in

456
00:22:02,290 --> 00:22:06,850
veeram their role is a boot will just

457
00:22:04,360 --> 00:22:09,669
ignore them and continue to use the

458
00:22:06,850 --> 00:22:10,780
hard-coded one so as we see here there

459
00:22:09,670 --> 00:22:13,600
is like

460
00:22:10,780 --> 00:22:15,399
one of the restore boot argument what we

461
00:22:13,600 --> 00:22:17,620
can do we can just change them right if

462
00:22:15,400 --> 00:22:21,910
we can register the bootloader why not

463
00:22:17,620 --> 00:22:24,939
so what I did I just changed the boot

464
00:22:21,910 --> 00:22:28,030
arguments to add debug to set the

465
00:22:24,940 --> 00:22:31,630
debugger capabilities into a system I

466
00:22:28,030 --> 00:22:34,720
set the zero to enable a serial output

467
00:22:31,630 --> 00:22:36,610
for a kernel boot and our D equal md0

468
00:22:34,720 --> 00:22:40,750
which means a system please boot from

469
00:22:36,610 --> 00:22:42,610
the RAM disk itself the next thing is

470
00:22:40,750 --> 00:22:45,640
guys alarm again it's not really

471
00:22:42,610 --> 00:22:48,820
required for dual boot but it's really

472
00:22:45,640 --> 00:22:53,530
nice that we can boot the system with

473
00:22:48,820 --> 00:22:56,139
not relegated kernel it's easy to spot

474
00:22:53,530 --> 00:23:00,060
just look for kernel - % a string

475
00:22:56,140 --> 00:23:04,600
reference and we will find the code that

476
00:23:00,060 --> 00:23:07,110
asked except to provide like eight bytes

477
00:23:04,600 --> 00:23:10,120
it in our case it's a random get bytes

478
00:23:07,110 --> 00:23:11,800
so after random good bytes will see the

479
00:23:10,120 --> 00:23:14,260
calculation of where is a larger

480
00:23:11,800 --> 00:23:19,300
tailslide and physical slide in my case

481
00:23:14,260 --> 00:23:23,290
it's x8 get pivotal slide and X 19 get a

482
00:23:19,300 --> 00:23:26,500
physical slide unfortunately there is

483
00:23:23,290 --> 00:23:28,629
like in a in a release kernel and

484
00:23:26,500 --> 00:23:31,900
release I boot there's no easy way to

485
00:23:28,630 --> 00:23:34,000
disable KLR this Apple just rip out the

486
00:23:31,900 --> 00:23:36,520
code that respect guys a lot of boot

487
00:23:34,000 --> 00:23:39,730
argument but what we can do we can

488
00:23:36,520 --> 00:23:42,240
relocate it with a zero offset so in my

489
00:23:39,730 --> 00:23:45,670
case I just put 0 in X 8 index 18 and

490
00:23:42,240 --> 00:23:47,770
not out the rest which means that kernel

491
00:23:45,670 --> 00:23:52,870
will be relocated with zero offset and

492
00:23:47,770 --> 00:23:55,690
stay in the same address all right

493
00:23:52,870 --> 00:23:59,500
go so the go command as I said that's a

494
00:23:55,690 --> 00:24:04,180
way how I boot can boot different

495
00:23:59,500 --> 00:24:08,170
diagnostic images and there is a check

496
00:24:04,180 --> 00:24:10,930
there is a check for payload type that

497
00:24:08,170 --> 00:24:14,020
get upload over the USB so for example

498
00:24:10,930 --> 00:24:18,240
if you look for se bi string you'll find

499
00:24:14,020 --> 00:24:21,550
a char array with all the supported tags

500
00:24:18,240 --> 00:24:23,040
in a case of iOS 12.1 is like seven

501
00:24:21,550 --> 00:24:26,639
seven tags are supported

502
00:24:23,040 --> 00:24:30,720
and what this function going to do it's

503
00:24:26,640 --> 00:24:33,120
going to like read the payload tag and

504
00:24:30,720 --> 00:24:35,870
compare with one to support it so this

505
00:24:33,120 --> 00:24:38,219
is it to fix just make sure we pass zero

506
00:24:35,870 --> 00:24:42,090
instead of pointer to array and we buy

507
00:24:38,220 --> 00:24:44,250
zero as a count of different support

508
00:24:42,090 --> 00:24:47,120
attacks which means no tag is supported

509
00:24:44,250 --> 00:24:50,430
which mean like every tag is supported

510
00:24:47,120 --> 00:24:53,429
the next thing since the last one for I

511
00:24:50,430 --> 00:24:55,260
boot is KT RR or like Colonel textured

512
00:24:53,430 --> 00:24:56,670
on the region that the specific

513
00:24:55,260 --> 00:25:00,510
mitigation that Apple introduced in

514
00:24:56,670 --> 00:25:04,070
iPhone 7 and the idea is I will get

515
00:25:00,510 --> 00:25:06,810
their own custom memory controller and

516
00:25:04,070 --> 00:25:09,090
Apple set up the region with the kernel

517
00:25:06,810 --> 00:25:10,649
will map it on and run the kernel it map

518
00:25:09,090 --> 00:25:13,050
it and finish all the initialization

519
00:25:10,650 --> 00:25:16,380
process this region will be locked so

520
00:25:13,050 --> 00:25:19,230
which means there is no way to write to

521
00:25:16,380 --> 00:25:23,960
this region as the log made on a harder

522
00:25:19,230 --> 00:25:23,960
level in addition to this the mm you get

523
00:25:24,110 --> 00:25:29,879
configure it that no code can be

524
00:25:27,210 --> 00:25:32,250
executed outside of the region so that's

525
00:25:29,880 --> 00:25:34,500
pretty nice mitigation to prevent the

526
00:25:32,250 --> 00:25:36,510
jail breaks but again if we if we

527
00:25:34,500 --> 00:25:41,370
control the bootloader we can we can

528
00:25:36,510 --> 00:25:43,890
disable it the good thing Apple for some

529
00:25:41,370 --> 00:25:48,120
reason Apple still respect and safe

530
00:25:43,890 --> 00:25:53,850
Colonel text boot argument I don't know

531
00:25:48,120 --> 00:25:55,310
why because like we we can set any new

532
00:25:53,850 --> 00:25:58,709
boot argument as they are hard-coded

533
00:25:55,310 --> 00:26:01,889
anyway just a nice way for us to define

534
00:25:58,710 --> 00:26:05,550
the code as we see if unsafe cannot text

535
00:26:01,890 --> 00:26:07,080
boot argument is set then we skip the

536
00:26:05,550 --> 00:26:11,909
security set coterra region

537
00:26:07,080 --> 00:26:15,060
otherwise the KTR region begin and lands

538
00:26:11,910 --> 00:26:18,930
will be set up so what we can do we can

539
00:26:15,060 --> 00:26:21,540
jump it out knock it out or even inject

540
00:26:18,930 --> 00:26:25,800
unsafe kernel text again I believe that

541
00:26:21,540 --> 00:26:27,480
this code is part of the some debug it

542
00:26:25,800 --> 00:26:30,750
like it's left for some debug purposes

543
00:26:27,480 --> 00:26:34,940
is it stupid out in Aroldis kernels but

544
00:26:30,750 --> 00:26:37,690
for some reason not stupid in the I boot

545
00:26:34,940 --> 00:26:39,560
the same story for kpp it's like

546
00:26:37,690 --> 00:26:42,080
previous version of kernel patch

547
00:26:39,560 --> 00:26:44,360
protector the secure monitor just looked

548
00:26:42,080 --> 00:26:45,949
for monitor to large string and will

549
00:26:44,360 --> 00:26:49,629
find the code that just loaded

550
00:26:45,950 --> 00:26:49,630
not without and we're good to go

551
00:26:50,000 --> 00:26:55,040
as you can see there's maybe a lot of

552
00:26:52,820 --> 00:26:59,679
fun to reverse engineer the Apple

553
00:26:55,040 --> 00:27:03,740
founders especially with their

554
00:26:59,680 --> 00:27:05,090
obfuscated logs and no symbols so what

555
00:27:03,740 --> 00:27:05,840
I'm gonna do next I'm going to switch to

556
00:27:05,090 --> 00:27:08,540
xnu

557
00:27:05,840 --> 00:27:12,139
it will be like less assembly code and

558
00:27:08,540 --> 00:27:18,379
more C code as likely the source code is

559
00:27:12,140 --> 00:27:20,540
available so 4x in new patches the first

560
00:27:18,380 --> 00:27:22,180
thing is tasks for Pete that's the way

561
00:27:20,540 --> 00:27:25,159
how all the jailbreaks

562
00:27:22,180 --> 00:27:27,710
export the kernel task port and the car

563
00:27:25,160 --> 00:27:29,660
not a sports is the rifle easily read

564
00:27:27,710 --> 00:27:33,050
write and even allocate memory in the

565
00:27:29,660 --> 00:27:37,130
kernel of course there is a explicit

566
00:27:33,050 --> 00:27:39,620
check if we trying to like request ask

567
00:27:37,130 --> 00:27:43,010
for the support for kernel if b ID

568
00:27:39,620 --> 00:27:44,090
equals 0 return Colonel Fowler just if

569
00:27:43,010 --> 00:27:47,780
we can patch the kernel just patch it

570
00:27:44,090 --> 00:27:51,260
out there is more additional mitigation

571
00:27:47,780 --> 00:27:54,230
starting from is ten point three so now

572
00:27:51,260 --> 00:27:58,730
Apple edge tasks conversion evaluation

573
00:27:54,230 --> 00:28:04,340
code which mean if abilities code added

574
00:27:58,730 --> 00:28:06,980
to mitigate iron beer exploit chains the

575
00:28:04,340 --> 00:28:09,530
idea is if we trying to achieve the

576
00:28:06,980 --> 00:28:12,680
cannot ask a port it's gonna return now

577
00:28:09,530 --> 00:28:14,930
or if we're trying to get the task port

578
00:28:12,680 --> 00:28:16,580
of any other process and we are not

579
00:28:14,930 --> 00:28:19,100
running as a platform plication and

580
00:28:16,580 --> 00:28:21,260
gonna return can ability security as

581
00:28:19,100 --> 00:28:26,290
well so make sure you patch it out as

582
00:28:21,260 --> 00:28:28,790
well next one the code sign there's a

583
00:28:26,290 --> 00:28:31,040
ton of ways to disable code sign if we

584
00:28:28,790 --> 00:28:33,740
can patch the kernel and one of the ways

585
00:28:31,040 --> 00:28:35,629
is what which I prefer is be a can has

586
00:28:33,740 --> 00:28:40,670
the bugger the DES function that

587
00:28:35,630 --> 00:28:42,920
basically enable globally enable

588
00:28:40,670 --> 00:28:43,730
debugger capabilities for kernel and for

589
00:28:42,920 --> 00:28:47,120
all the

590
00:28:43,730 --> 00:28:52,850
Karen extensions and it just

591
00:28:47,120 --> 00:28:55,040
refer to debug enable it variable so we

592
00:28:52,850 --> 00:28:57,469
can patch it the back in able to one or

593
00:28:55,040 --> 00:28:59,889
always buy HP I can hiss debugger to

594
00:28:57,470 --> 00:29:05,000
always return one

595
00:28:59,890 --> 00:29:08,660
so KTR are even if we disable KTR are in

596
00:29:05,000 --> 00:29:10,550
i boot their release kernels they still

597
00:29:08,660 --> 00:29:13,220
like there's hard-coded code that's

598
00:29:10,550 --> 00:29:17,210
always set up the kernel text read on

599
00:29:13,220 --> 00:29:21,260
the region so there are few things that

600
00:29:17,210 --> 00:29:26,060
we need to patch just look for MCC so

601
00:29:21,260 --> 00:29:28,100
MCC it's one of the name of the Vice

602
00:29:26,060 --> 00:29:31,159
three entries that gets parsed by by a

603
00:29:28,100 --> 00:29:34,310
kernel and this thing is like all this

604
00:29:31,160 --> 00:29:36,530
code is just part of the device through

605
00:29:34,310 --> 00:29:40,490
entry and setup read on the region begin

606
00:29:36,530 --> 00:29:41,750
and read on the region and variables all

607
00:29:40,490 --> 00:29:44,570
we need to do make sure this code is

608
00:29:41,750 --> 00:29:47,570
never get executed in occur off the

609
00:29:44,570 --> 00:29:49,580
second part for Katie RR is read on the

610
00:29:47,570 --> 00:29:52,550
region lockdown so this is where the

611
00:29:49,580 --> 00:29:54,620
kernel already set it up get initialize

612
00:29:52,550 --> 00:29:57,260
it and this is where the region get

613
00:29:54,620 --> 00:30:01,820
locket so in our case it's log MCC and

614
00:29:57,260 --> 00:30:06,890
lock MMO this code is it a spot for

615
00:30:01,820 --> 00:30:09,379
iPhone 7 just look for 0 x 7 ec magic

616
00:30:06,890 --> 00:30:12,560
and you will find a bunch of MS ours

617
00:30:09,380 --> 00:30:14,300
that we need to patch out so in other

618
00:30:12,560 --> 00:30:17,389
words the region will be not never

619
00:30:14,300 --> 00:30:20,629
locked out and in other words it will

620
00:30:17,390 --> 00:30:23,530
not enable one last thing with the KTR

621
00:30:20,630 --> 00:30:26,960
are so there is a lower set vectorbase

622
00:30:23,530 --> 00:30:30,350
get decoded get executed when device

623
00:30:26,960 --> 00:30:32,270
awake from a sleep mode and this code is

624
00:30:30,350 --> 00:30:36,980
chicken if read on the region begin and

625
00:30:32,270 --> 00:30:38,690
end is like more or equal to 0 if it's

626
00:30:36,980 --> 00:30:42,110
equal to 0 just it's keeping the caterer

627
00:30:38,690 --> 00:30:45,830
if it's not it just set up again the HR

628
00:30:42,110 --> 00:30:51,199
our region lower l1 upper l1 and final

629
00:30:45,830 --> 00:30:53,510
look yell one so our need is just to

630
00:30:51,200 --> 00:30:57,460
like knock it out or make sure that read

631
00:30:53,510 --> 00:31:00,440
on the region begin and end are always 0

632
00:30:57,460 --> 00:31:04,730
even if we disable KTR are the respond

633
00:31:00,440 --> 00:31:07,640
saying in 810 devices so Apple called it

634
00:31:04,730 --> 00:31:10,990
static mappings so there is and now that

635
00:31:07,640 --> 00:31:15,050
page tables itself they are allocated in

636
00:31:10,990 --> 00:31:15,560
to read only region so data cons will be

637
00:31:15,050 --> 00:31:17,840
writable

638
00:31:15,560 --> 00:31:20,690
where the page tables will be allocated

639
00:31:17,840 --> 00:31:23,689
to and when it's done this region will

640
00:31:20,690 --> 00:31:26,480
be set up to be read-only and on top of

641
00:31:23,690 --> 00:31:28,400
it the KTR region will be locked as well

642
00:31:26,480 --> 00:31:30,530
so even if you disable key to our region

643
00:31:28,400 --> 00:31:34,280
you still need to deal with the static

644
00:31:30,530 --> 00:31:36,620
mappings but if you can patch a kernel

645
00:31:34,280 --> 00:31:38,750
we can disable it during like our VM

646
00:31:36,620 --> 00:31:43,399
protein it or our vm prot finalized in

647
00:31:38,750 --> 00:31:47,240
my case I just remember the region to be

648
00:31:43,400 --> 00:31:48,740
readable writable and executable a few

649
00:31:47,240 --> 00:31:52,310
more things that we can patch it's not

650
00:31:48,740 --> 00:31:55,220
really required but it's a nice one like

651
00:31:52,310 --> 00:31:57,919
Mac mount the easily remount file system

652
00:31:55,220 --> 00:32:02,060
to be readable writable or unfit code

653
00:31:57,920 --> 00:32:05,480
directory is an entrust cash so that's a

654
00:32:02,060 --> 00:32:08,510
way how one of the kernel extension

655
00:32:05,480 --> 00:32:10,640
check is the binary we are running is it

656
00:32:08,510 --> 00:32:12,740
trust it or not and if it's trusted it

657
00:32:10,640 --> 00:32:14,540
will be automatically get platform

658
00:32:12,740 --> 00:32:16,790
application capabilities so we can patch

659
00:32:14,540 --> 00:32:19,790
it to one that any binary will be a

660
00:32:16,790 --> 00:32:20,320
platform application for example and set

661
00:32:19,790 --> 00:32:22,190
UID

662
00:32:20,320 --> 00:32:24,889
to easily attack escalate privileges

663
00:32:22,190 --> 00:32:29,000
from from user mode but as I say it's

664
00:32:24,890 --> 00:32:31,730
not really required all right we going

665
00:32:29,000 --> 00:32:33,800
back to our boot chain so we already

666
00:32:31,730 --> 00:32:35,990
made a patches for a bootloader we made

667
00:32:33,800 --> 00:32:38,540
a patches for a kernel now it's time for

668
00:32:35,990 --> 00:32:41,780
the RAM disk patches and the idea is we

669
00:32:38,540 --> 00:32:44,240
just take a restore Ram disk unwrap it

670
00:32:41,780 --> 00:32:46,639
grow its size a little and find the

671
00:32:44,240 --> 00:32:48,410
restored external service and there's

672
00:32:46,640 --> 00:32:51,590
the external service that they want if

673
00:32:48,410 --> 00:32:53,780
you'll be executed when the kernel like

674
00:32:51,590 --> 00:32:56,449
general will start execute the binaries

675
00:32:53,780 --> 00:32:58,580
and the language e will agree cute it in

676
00:32:56,450 --> 00:33:00,260
other words that the one that we need to

677
00:32:58,580 --> 00:33:04,100
replace we need to replace with our

678
00:33:00,260 --> 00:33:07,310
service and that will start USB device

679
00:33:04,100 --> 00:33:13,040
MUX and spawn the drug dealer so we can

680
00:33:07,310 --> 00:33:14,389
connect to the device our de SSH and the

681
00:33:13,040 --> 00:33:17,600
tricky one here

682
00:33:14,390 --> 00:33:20,440
is that we need to sign our fake demon

683
00:33:17,600 --> 00:33:23,530
with the same application IDs because

684
00:33:20,440 --> 00:33:27,050
there's one of the mitigation from is 10

685
00:33:23,530 --> 00:33:30,200
the lines D now get hard-coded list of

686
00:33:27,050 --> 00:33:32,210
the IDS that Kanak execute and if our

687
00:33:30,200 --> 00:33:35,270
IDs one not one of them it will be

688
00:33:32,210 --> 00:33:38,150
prevented as well as we need to provide

689
00:33:35,270 --> 00:33:40,930
the entitlements that get access to to

690
00:33:38,150 --> 00:33:45,080
get a test to USB device smoke service

691
00:33:40,930 --> 00:33:49,010
finally wrap everything back and cyanus

692
00:33:45,080 --> 00:33:51,889
ram this container so this is how the

693
00:33:49,010 --> 00:33:54,830
our store at external demon may look

694
00:33:51,890 --> 00:33:57,320
like parts of this code is already open

695
00:33:54,830 --> 00:34:03,260
source it and the basic idea is to the

696
00:33:57,320 --> 00:34:06,679
22 start USB MOOC service migrating USB

697
00:34:03,260 --> 00:34:10,389
device descriptor with the type USB

698
00:34:06,680 --> 00:34:13,340
moocs only and then set USB device

699
00:34:10,389 --> 00:34:16,489
controller USB device description

700
00:34:13,340 --> 00:34:18,530
several the idea is that to calculate it

701
00:34:16,489 --> 00:34:23,439
you the idea of the device and set it as

702
00:34:18,530 --> 00:34:26,570
a serial or USB device description

703
00:34:23,440 --> 00:34:28,880
finally create use be the best

704
00:34:26,570 --> 00:34:30,890
controller and set the debug level in

705
00:34:28,880 --> 00:34:32,929
one of the services at 7:00 I don't want

706
00:34:30,889 --> 00:34:34,790
to focus on it case there is a source

707
00:34:32,929 --> 00:34:36,649
available and there is a link at the end

708
00:34:34,790 --> 00:34:37,668
of the presentation if you want to know

709
00:34:36,649 --> 00:34:39,469
how it works

710
00:34:37,668 --> 00:34:44,960
the idea is to set the USB and this

711
00:34:39,469 --> 00:34:47,750
bound the drug builds SSH station device

712
00:34:44,960 --> 00:34:50,210
3 that's it's optional patch that it's

713
00:34:47,750 --> 00:34:52,909
required so what we need to do is

714
00:34:50,210 --> 00:34:54,740
disable the feasible storage and the

715
00:34:52,909 --> 00:34:56,450
physical storage is a special place

716
00:34:54,739 --> 00:35:00,799
where the data protection keys are

717
00:34:56,449 --> 00:35:02,779
stored and to prevent the collisions

718
00:35:00,800 --> 00:35:05,090
between this two system we need to

719
00:35:02,780 --> 00:35:09,820
disable the feasible storage as you see

720
00:35:05,090 --> 00:35:14,300
here that's part of Apple ipfs text and

721
00:35:09,820 --> 00:35:19,580
we see if the Noah feasible storage

722
00:35:14,300 --> 00:35:21,650
entry exists the Apple key store will

723
00:35:19,580 --> 00:35:23,930
disable the physical storage and switch

724
00:35:21,650 --> 00:35:25,310
back to fake keys that's what we need to

725
00:35:23,930 --> 00:35:28,029
make sure to not gonna overwrite the

726
00:35:25,310 --> 00:35:30,940
original keys yeah

727
00:35:28,030 --> 00:35:33,660
again just add no visible storage entry

728
00:35:30,940 --> 00:35:38,400
to device three and we're good to go

729
00:35:33,660 --> 00:35:42,009
farmer or the trust cash it's optional

730
00:35:38,400 --> 00:35:45,010
just say nice way to disable the code

731
00:35:42,010 --> 00:35:47,380
sign Apple change a little bit the

732
00:35:45,010 --> 00:35:50,650
format of trust cache entries now the

733
00:35:47,380 --> 00:35:56,170
introduced trust cache entry name with

734
00:35:50,650 --> 00:35:58,900
one the only difference it's now get the

735
00:35:56,170 --> 00:36:00,790
hash type and some of the Flex so the

736
00:35:58,900 --> 00:36:03,040
idea is we just need to add the new

737
00:36:00,790 --> 00:36:05,290
cache entry trust cache entry and make

738
00:36:03,040 --> 00:36:09,570
sure we change the number of entries in

739
00:36:05,290 --> 00:36:13,210
a trust cache model and to be good to go

740
00:36:09,570 --> 00:36:15,910
so like if you made all the patches to

741
00:36:13,210 --> 00:36:18,490
boot chain how to combine it all

742
00:36:15,910 --> 00:36:21,490
together so we bootstrap our modified

743
00:36:18,490 --> 00:36:24,250
tile back from I boot for example from

744
00:36:21,490 --> 00:36:26,290
another bootloader we upload each of the

745
00:36:24,250 --> 00:36:29,670
components over the USB device three

746
00:36:26,290 --> 00:36:32,860
kernel trust cache one of the RAM disks

747
00:36:29,670 --> 00:36:36,850
set the commands to bootloader to like

748
00:36:32,860 --> 00:36:38,740
create these corresponding images and

749
00:36:36,850 --> 00:36:43,870
finally boot the whole system with the

750
00:36:38,740 --> 00:36:46,899
boutique's we will get the restore and

751
00:36:43,870 --> 00:36:49,990
is booted with like minimal OS version

752
00:36:46,900 --> 00:36:53,410
and SSH access so we can use for example

753
00:36:49,990 --> 00:36:57,430
disappear oleh to connect to device over

754
00:36:53,410 --> 00:37:00,129
the USB but as I say some of the key

755
00:36:57,430 --> 00:37:04,720
locks dangers are not started yet so we

756
00:37:00,130 --> 00:37:07,060
need like for them to start but that's

757
00:37:04,720 --> 00:37:10,660
enough that's enough that we can take

758
00:37:07,060 --> 00:37:13,480
the current data partition and separated

759
00:37:10,660 --> 00:37:15,640
to into two new partition one for as a

760
00:37:13,480 --> 00:37:18,880
new system partition and another astiz a

761
00:37:15,640 --> 00:37:23,200
new data partition then upload the root

762
00:37:18,880 --> 00:37:23,920
of s over the USB and I like variety to

763
00:37:23,200 --> 00:37:27,009
an end

764
00:37:23,920 --> 00:37:30,610
finally patch that I boot or I back to

765
00:37:27,010 --> 00:37:33,340
boot from the new partition hello it's

766
00:37:30,610 --> 00:37:35,380
sounds a little like complicated there's

767
00:37:33,340 --> 00:37:39,750
too many things so I just wanted to show

768
00:37:35,380 --> 00:37:39,750
like a demo how how this stuff works

769
00:37:43,160 --> 00:37:49,799
so in this case I want to show the is

770
00:37:46,400 --> 00:37:53,820
eleven point four point one I'm gonna

771
00:37:49,800 --> 00:37:56,460
run it from my Mac and device is already

772
00:37:53,820 --> 00:37:57,960
in a parade jailbroken state so one of

773
00:37:56,460 --> 00:38:00,930
the boot loaders its weights and other

774
00:37:57,960 --> 00:38:02,100
battles to be uploaded so what I'm going

775
00:38:00,930 --> 00:38:06,589
to do I'm going to use the mini column

776
00:38:02,100 --> 00:38:11,220
and to connect to a device over G zero

777
00:38:06,590 --> 00:38:14,670
and start uploading one of my modified

778
00:38:11,220 --> 00:38:19,290
with holders in our recovery - dish chef

779
00:38:14,670 --> 00:38:23,820
and if if the boot loaders in recovery

780
00:38:19,290 --> 00:38:26,960
mode we can send our own stuff so in

781
00:38:23,820 --> 00:38:33,420
this case I send I boot with disabled

782
00:38:26,960 --> 00:38:37,620
KLR and with disabled caterer alright

783
00:38:33,420 --> 00:38:40,010
you get booted so here we get is eleven

784
00:38:37,620 --> 00:38:42,690
point four point one release a boot

785
00:38:40,010 --> 00:38:52,020
let's check that we're really running

786
00:38:42,690 --> 00:38:55,380
the recovery mode okay and now we can

787
00:38:52,020 --> 00:38:59,210
set our modified components back to a

788
00:38:55,380 --> 00:39:02,580
bootloader so I upload the RAM disk and

789
00:38:59,210 --> 00:39:05,400
set i recovery there see ram disk to

790
00:39:02,580 --> 00:39:11,819
force a bootloader to like close

791
00:39:05,400 --> 00:39:18,420
modified rom disk and as we see here

792
00:39:11,820 --> 00:39:21,420
it's already uploaded the same now the

793
00:39:18,420 --> 00:39:29,480
same for device tree we send the device

794
00:39:21,420 --> 00:39:34,770
three force boot loader to load it okay

795
00:39:29,480 --> 00:39:37,260
i recovered to see device three and

796
00:39:34,770 --> 00:39:42,300
finally kernel so I send the colonel

797
00:39:37,260 --> 00:39:45,780
with disabled KLR and with disabled KTR

798
00:39:42,300 --> 00:39:50,400
our kernel text read on the region which

799
00:39:45,780 --> 00:39:51,840
is really enough to play with some herbs

800
00:39:50,400 --> 00:39:53,900
exploits and forget about the

801
00:39:51,840 --> 00:39:56,249
mitigations

802
00:39:53,900 --> 00:40:06,390
finally I boot the system using I

803
00:39:56,249 --> 00:40:10,319
recover juicy boutiques the system get

804
00:40:06,390 --> 00:40:12,538
booted and as we see here that's showing

805
00:40:10,319 --> 00:40:15,558
the running server so it's running to

806
00:40:12,539 --> 00:40:18,779
the drug beer server and now we can

807
00:40:15,559 --> 00:40:27,509
connect to device over the AC stage over

808
00:40:18,779 --> 00:40:29,220
the USB in the shell and yep that's is

809
00:40:27,509 --> 00:40:33,029
hello and point four point one on -

810
00:40:29,220 --> 00:40:36,450
seven let's prove that kernel is not

811
00:40:33,029 --> 00:40:37,980
relocated so I use one of the tools and

812
00:40:36,450 --> 00:40:39,989
it's looking for a kernel in the memory

813
00:40:37,980 --> 00:40:42,150
and we see the kernel address is not

814
00:40:39,989 --> 00:40:45,690
relocated which means the Geisel RS

815
00:40:42,150 --> 00:40:48,059
disabled next time when I showed it does

816
00:40:45,690 --> 00:40:50,220
forbid zero it's really working by

817
00:40:48,059 --> 00:40:54,900
reading some part of the kernel memory

818
00:40:50,220 --> 00:40:58,379
for example header and finally try to

819
00:40:54,900 --> 00:41:01,980
write some like for example for bite

820
00:40:58,380 --> 00:41:04,650
into a kernel memory usually if Castle R

821
00:41:01,980 --> 00:41:14,670
is not disabled it's gonna panic a

822
00:41:04,650 --> 00:41:17,339
device so write the four bytes and now

823
00:41:14,670 --> 00:41:19,019
let's try to read them back so yeah as

824
00:41:17,339 --> 00:41:25,859
we see we cannot write the four bytes of

825
00:41:19,019 --> 00:41:26,430
the kernel and there is no panic for is

826
00:41:25,859 --> 00:41:29,420
12

827
00:41:26,430 --> 00:41:32,960
it's a little bit different story I

828
00:41:29,420 --> 00:41:35,999
played add more mitigation and is 12 and

829
00:41:32,960 --> 00:41:37,829
change the boot a little bit but the

830
00:41:35,999 --> 00:41:39,868
idea is exactly the same we upload our

831
00:41:37,829 --> 00:41:42,269
own bootloader which going to bootstrap

832
00:41:39,869 --> 00:41:44,309
our own kernel our own device tree our

833
00:41:42,269 --> 00:41:49,578
own ram disk and the boot the rest of

834
00:41:44,309 --> 00:41:53,509
the system so I connect to a device

835
00:41:49,579 --> 00:41:53,509
using the serial cable

836
00:41:59,240 --> 00:42:14,669
proof is it we really run it in a

837
00:42:04,080 --> 00:42:17,098
recovery mode in this case I just

838
00:42:14,670 --> 00:42:19,920
disabled KTR are but not disabled the

839
00:42:17,099 --> 00:42:21,780
Chi is LR so Canada will be still

840
00:42:19,920 --> 00:42:25,680
relocated because there is some random

841
00:42:21,780 --> 00:42:30,720
panics that I see on is 12.1 so I

842
00:42:25,680 --> 00:42:35,190
decided to leave it as it is so we are

843
00:42:30,720 --> 00:42:44,430
in recovery mode now it's time to send

844
00:42:35,190 --> 00:42:48,119
our modified food chain the first is

845
00:42:44,430 --> 00:42:59,040
device 3 it's pretty much the same as

846
00:42:48,119 --> 00:43:03,390
iOS 11 device true get loaded now we

847
00:42:59,040 --> 00:43:08,720
send ROM disk it may take some time it's

848
00:43:03,390 --> 00:43:08,720
usually like 300 megabytes

849
00:43:13,960 --> 00:43:21,650
and we send I recovered there see

850
00:43:18,290 --> 00:43:30,190
ramdisk to the force with loader to

851
00:43:21,650 --> 00:43:35,330
execute it and now we see a difference

852
00:43:30,190 --> 00:43:38,180
check that you get executed okay Ramdas

853
00:43:35,330 --> 00:43:41,170
get loaded so now we see a difference

854
00:43:38,180 --> 00:43:43,669
between a boots in iOS 11 is 12 so now

855
00:43:41,170 --> 00:43:45,980
the trust care the trust static trust

856
00:43:43,670 --> 00:43:48,440
cache is required to be uploaded by I

857
00:43:45,980 --> 00:43:50,510
boot so we use the same our recovery the

858
00:43:48,440 --> 00:43:54,260
chef to upload the static thrust cache

859
00:43:50,510 --> 00:44:02,960
and to force boot loader to load it in a

860
00:43:54,260 --> 00:44:08,200
memory using I recovered RC fiber ok and

861
00:44:02,960 --> 00:44:08,200
finally let's boot it colonel

862
00:44:16,360 --> 00:44:26,980
I recovered there see boutiques and we

863
00:44:22,750 --> 00:44:30,880
got our system booted so it's all

864
00:44:26,980 --> 00:44:33,610
similar to is 11.4 we got the drug

865
00:44:30,880 --> 00:44:36,910
dealer running now we can SSH to our

866
00:44:33,610 --> 00:44:43,290
device for example accusing disappeared

867
00:44:36,910 --> 00:44:43,290
early to bind local port to remote port

868
00:44:49,860 --> 00:45:05,650
okay okay we'll get a show so it's is

869
00:44:58,630 --> 00:45:07,720
twelve point one seven so in this case I

870
00:45:05,650 --> 00:45:10,200
say I did not disable the Kaiser Lars or

871
00:45:07,720 --> 00:45:12,970
the kernel still relegated in the memory

872
00:45:10,200 --> 00:45:16,540
but kernel text redundant region is

873
00:45:12,970 --> 00:45:18,370
disabled so we can easily modify and the

874
00:45:16,540 --> 00:45:24,040
kernel memory including the kernel text

875
00:45:18,370 --> 00:45:27,960
region so I'll read the kernel header in

876
00:45:24,040 --> 00:45:31,529
the same as in the previous demo and

877
00:45:27,960 --> 00:45:36,130
I'll right try to write the eight bytes

878
00:45:31,530 --> 00:45:49,930
in a kernel header to prove that HRR is

879
00:45:36,130 --> 00:45:52,210
disabled okay okay so yeah as we see no

880
00:45:49,930 --> 00:45:57,129
panic and we can read the same bites

881
00:45:52,210 --> 00:46:04,450
back so Katie RR is disabled on twelve

882
00:45:57,130 --> 00:46:07,120
point one so this was a damn of the like

883
00:46:04,450 --> 00:46:09,069
dual boot of having like two multiple

884
00:46:07,120 --> 00:46:09,790
layers on the same device using the

885
00:46:09,070 --> 00:46:13,150
bootloader

886
00:46:09,790 --> 00:46:14,440
and of course there are some issues the

887
00:46:13,150 --> 00:46:16,330
main issues is there some and

888
00:46:14,440 --> 00:46:19,690
compatibility on sapphire side so

889
00:46:16,330 --> 00:46:24,970
seppius is like operating systems that

890
00:46:19,690 --> 00:46:27,310
run in as separate physical CPU and we

891
00:46:24,970 --> 00:46:28,640
don't really have a control how we can

892
00:46:27,310 --> 00:46:30,950
update the step bias

893
00:46:28,640 --> 00:46:33,828
mean there's some incompatibility for

894
00:46:30,950 --> 00:46:37,279
example is 11 and is 12 they have a

895
00:46:33,829 --> 00:46:40,039
different protocol how the step is

896
00:46:37,279 --> 00:46:42,349
communicate with a kernel which we can't

897
00:46:40,039 --> 00:46:45,740
really dull boot 11 and 12 but we still

898
00:46:42,349 --> 00:46:49,519
can do 11 and 11 and 12 and 12 so like

899
00:46:45,740 --> 00:46:51,439
the major version still work again we

900
00:46:49,519 --> 00:46:54,470
don't really control the step update

901
00:46:51,440 --> 00:46:58,339
process is we need some code execution

902
00:46:54,470 --> 00:47:01,669
on the step aside and even if we do we

903
00:46:58,339 --> 00:47:03,470
need somehow to dump the SAP and replay

904
00:47:01,670 --> 00:47:08,539
document there is some research made on

905
00:47:03,470 --> 00:47:11,058
it but it's still still not complete but

906
00:47:08,539 --> 00:47:14,210
what we can do is to load the custom

907
00:47:11,059 --> 00:47:18,049
drivers for the custom kernel extensions

908
00:47:14,210 --> 00:47:20,059
on a 10 as we see with disabled kernel

909
00:47:18,049 --> 00:47:22,700
textured on the region we can map our

910
00:47:20,059 --> 00:47:27,140
own memory we can write our own drivers

911
00:47:22,700 --> 00:47:29,328
and that's it and one of the plans that

912
00:47:27,140 --> 00:47:31,640
I got to make some low-level boot a

913
00:47:29,329 --> 00:47:33,259
manager for is for example like as a

914
00:47:31,640 --> 00:47:37,578
wrapper for I boot to easily switch

915
00:47:33,259 --> 00:47:41,000
between two operating systems I think we

916
00:47:37,579 --> 00:47:44,569
still have some time I want to get a

917
00:47:41,000 --> 00:47:48,559
quick overview what the is hikin will be

918
00:47:44,569 --> 00:47:51,470
so the last year Apple introduced a 12

919
00:47:48,559 --> 00:47:54,500
SOC and it definitely rise at some bar

920
00:47:51,470 --> 00:47:56,750
on a security and particularly many of

921
00:47:54,500 --> 00:48:00,160
you hear about pointer and if occasion

922
00:47:56,750 --> 00:48:03,650
code that Apple introduced in the newer

923
00:48:00,160 --> 00:48:05,868
iOS and the newer devices and we know

924
00:48:03,650 --> 00:48:09,319
that it exists in the kernel safe itself

925
00:48:05,869 --> 00:48:11,299
and in a user mode but the bad news it's

926
00:48:09,319 --> 00:48:13,339
not just there it now it's an eye boot

927
00:48:11,299 --> 00:48:16,190
it's in a kernel cache it is in user

928
00:48:13,339 --> 00:48:17,900
mode into step is in a man step user

929
00:48:16,190 --> 00:48:21,109
mode level

930
00:48:17,900 --> 00:48:25,609
additionally they add some software CFI

931
00:48:21,109 --> 00:48:29,710
in critical boot component as well as

932
00:48:25,609 --> 00:48:32,990
add the new secure storage where the SAP

933
00:48:29,710 --> 00:48:34,509
interpolate okay now stored so that's

934
00:48:32,990 --> 00:48:38,839
that's interesting

935
00:48:34,509 --> 00:48:40,519
they made some mitigation on like static

936
00:48:38,839 --> 00:48:42,500
trust caches so the now the start across

937
00:48:40,519 --> 00:48:45,379
cache as I said it's get loaded by

938
00:48:42,500 --> 00:48:47,600
I boot itself it's not a part of caramel

939
00:48:45,380 --> 00:48:49,940
anymore the dynamic trust cache now

940
00:48:47,600 --> 00:48:54,319
moved to IMG for container so they drop

941
00:48:49,940 --> 00:48:56,500
completely mg3 container types they made

942
00:48:54,320 --> 00:48:58,880
some refactoring on a way how kernel

943
00:48:56,500 --> 00:49:02,030
perform the code sanity check by

944
00:48:58,880 --> 00:49:05,120
introducing the core trust and finally

945
00:49:02,030 --> 00:49:07,970
even in a WebKit there is some hardening

946
00:49:05,120 --> 00:49:11,720
including usage of pointer notification

947
00:49:07,970 --> 00:49:15,879
codes so we add it's like a 12

948
00:49:11,720 --> 00:49:15,879
jailbreaking may be a tricky one now

949
00:49:16,150 --> 00:49:21,170
here's the list of references that I use

950
00:49:18,830 --> 00:49:24,620
it during my research I really highly

951
00:49:21,170 --> 00:49:29,840
recommend to read the syrup right up

952
00:49:24,620 --> 00:49:32,540
about I boot exploit for 5s for off

953
00:49:29,840 --> 00:49:36,230
sorry for 32-bit devices which can be

954
00:49:32,540 --> 00:49:41,080
ported to 5s and for example using the

955
00:49:36,230 --> 00:49:46,070
same step that I do do the dual boot and

956
00:49:41,080 --> 00:49:49,000
here's a number of folks who help me do

957
00:49:46,070 --> 00:49:52,340
my research I just want to say thanks

958
00:49:49,000 --> 00:49:56,590
yeah I think we still have time for

959
00:49:52,340 --> 00:49:56,590
questions thank you

960
00:50:02,039 --> 00:50:05,430
no questions

961
00:50:17,210 --> 00:50:25,020
okay even I'll be around if you have a

962
00:50:22,290 --> 00:50:27,900
question you can catch me somewhere in a

963
00:50:25,020 --> 00:50:32,810
coffee area or in a hole so I think yeah

964
00:50:27,900 --> 00:50:39,520
we saved ten minutes Adam

965
00:50:32,810 --> 00:50:39,520
[Applause]

