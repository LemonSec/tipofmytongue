1
00:00:01,130 --> 00:00:14,700
[Music]

2
00:00:16,880 --> 00:00:20,240
hello everyone my name is chung dong xie

3
00:00:20,240 --> 00:00:22,800
i'm a senior security engineer from ant

4
00:00:22,800 --> 00:00:24,800
security latvia lab

5
00:00:24,800 --> 00:00:27,760
today i'd like to share my topic called

6
00:00:27,760 --> 00:00:30,640
new attack service in safari using just

7
00:00:30,640 --> 00:00:33,120
one web audio vulnerability to rule the

8
00:00:33,120 --> 00:00:36,879
safari let's begin

9
00:00:38,160 --> 00:00:41,040
let me introduce myself first

10
00:00:41,040 --> 00:00:44,239
i am a senior security engineer from ant

11
00:00:44,239 --> 00:00:46,719
security light year lab

12
00:00:46,719 --> 00:00:49,920
i graduated from zhuajiyang university

13
00:00:49,920 --> 00:00:53,920
and was a member of aaa ctf team

14
00:00:53,920 --> 00:00:57,520
my main research area are binary fuzzing

15
00:00:57,520 --> 00:01:01,520
browser security and mac os security

16
00:01:01,520 --> 00:01:05,199
i have found safari pdf and many mobile

17
00:01:05,199 --> 00:01:10,000
devices in sweden full cup from 2018

18
00:01:10,000 --> 00:01:12,960
to 2020.

19
00:01:12,960 --> 00:01:15,520
like-minded people are very welcome to

20
00:01:15,520 --> 00:01:18,080
join our light air lab

21
00:01:18,080 --> 00:01:20,720
and security researchers are also very

22
00:01:20,720 --> 00:01:23,840
welcome to submit vulnerabilities to an

23
00:01:23,840 --> 00:01:26,840
src

24
00:01:28,159 --> 00:01:30,720
i will divide my speech into following

25
00:01:30,720 --> 00:01:32,000
three parts

26
00:01:32,000 --> 00:01:34,720
the first part introduces the background

27
00:01:34,720 --> 00:01:38,079
of my web audio vulnerability research

28
00:01:38,079 --> 00:01:40,320
the second part introduces how i

29
00:01:40,320 --> 00:01:42,720
discover the vulnerabilities in web

30
00:01:42,720 --> 00:01:43,840
audio

31
00:01:43,840 --> 00:01:46,399
and the third part introduces the whole

32
00:01:46,399 --> 00:01:50,840
process of safari export

33
00:01:56,880 --> 00:01:57,759
first

34
00:01:57,759 --> 00:01:59,920
let me introduce the background of the

35
00:01:59,920 --> 00:02:01,200
research

36
00:02:01,200 --> 00:02:03,600
in the past sapphire vulnerability

37
00:02:03,600 --> 00:02:07,360
researchers often focus on the dom or js

38
00:02:07,360 --> 00:02:10,479
engine but some system libraries used by

39
00:02:10,479 --> 00:02:14,959
safari such as audio video front and

40
00:02:14,959 --> 00:02:18,560
static haven't received enough attention

41
00:02:18,560 --> 00:02:20,879
there are few successful cases using

42
00:02:20,879 --> 00:02:23,440
vulnerabilities found in these modules

43
00:02:23,440 --> 00:02:25,680
to break safari

44
00:02:25,680 --> 00:02:28,080
due to the built-in cube isolation

45
00:02:28,080 --> 00:02:30,319
mechanism of safari

46
00:02:30,319 --> 00:02:33,680
the heap used by this system libraries

47
00:02:33,680 --> 00:02:36,239
is not the same as the heap where the

48
00:02:36,239 --> 00:02:38,800
dom objects and the js objects are

49
00:02:38,800 --> 00:02:40,720
located

50
00:02:40,720 --> 00:02:42,239
as a result

51
00:02:42,239 --> 00:02:45,040
the auto bounce right vulnerabilities in

52
00:02:45,040 --> 00:02:46,800
these modules

53
00:02:46,800 --> 00:02:49,599
make it extremely difficult to override

54
00:02:49,599 --> 00:02:52,640
some keychains objects

55
00:02:52,640 --> 00:02:55,120
these vulnerabilities are difficult to

56
00:02:55,120 --> 00:02:56,640
export along

57
00:02:56,640 --> 00:02:59,680
with the coordination of an info leak

58
00:02:59,680 --> 00:03:01,599
pack

59
00:03:01,599 --> 00:03:04,000
but i found that there is a bug that can

60
00:03:04,000 --> 00:03:06,959
cleverly override js objects

61
00:03:06,959 --> 00:03:09,920
by passing safari's heap isolation

62
00:03:09,920 --> 00:03:13,280
slr and other defense mechanisms

63
00:03:13,280 --> 00:03:15,440
and finally achieve arbitrary code

64
00:03:15,440 --> 00:03:17,040
execution

65
00:03:17,040 --> 00:03:19,599
i demonstrated this attack at the time

66
00:03:19,599 --> 00:03:21,840
cub international cyber security

67
00:03:21,840 --> 00:03:24,799
competition hosted by the chengdu

68
00:03:24,799 --> 00:03:27,360
municipal government of china

69
00:03:27,360 --> 00:03:30,159
and the successful land pawn safari with

70
00:03:30,159 --> 00:03:33,840
only one shot

71
00:03:36,640 --> 00:03:39,360
then we come to second part

72
00:03:39,360 --> 00:03:42,720
web audio back hunting

73
00:03:45,120 --> 00:03:48,319
the web audio module is a library and

74
00:03:48,319 --> 00:03:52,159
provides rich api for playing encoding

75
00:03:52,159 --> 00:03:55,519
decoding and transcoding audio on macos

76
00:03:55,519 --> 00:03:57,120
or ios

77
00:03:57,120 --> 00:03:59,599
we can first take a look at a classic

78
00:03:59,599 --> 00:04:02,080
audio playback process

79
00:04:02,080 --> 00:04:06,400
take mp3 as an example

80
00:04:11,280 --> 00:04:15,200
first we read an mp3 file from desk

81
00:04:15,200 --> 00:04:17,759
second we announced we analyze

82
00:04:17,759 --> 00:04:21,358
information such as simple rate bit rate

83
00:04:21,358 --> 00:04:23,520
duration athletic

84
00:04:23,520 --> 00:04:27,680
and the spread audio frames in mp3

85
00:04:27,680 --> 00:04:31,440
third we decode splitted audio frame to

86
00:04:31,440 --> 00:04:33,919
get pcm data

87
00:04:33,919 --> 00:04:37,120
first we perform sound effect processing

88
00:04:37,120 --> 00:04:40,240
on pcm data

89
00:04:40,240 --> 00:04:44,080
such as equalizer reverberator athletic

90
00:04:44,080 --> 00:04:46,880
this step is optional

91
00:04:46,880 --> 00:04:48,160
fifth

92
00:04:48,160 --> 00:04:53,040
we decode pcm data into the audio signal

93
00:04:53,040 --> 00:04:53,919
six

94
00:04:53,919 --> 00:04:56,400
we give the audio signal to the hardware

95
00:04:56,400 --> 00:04:59,280
for playback

96
00:04:59,600 --> 00:05:01,280
we can see that

97
00:05:01,280 --> 00:05:02,880
the steps 2

98
00:05:02,880 --> 00:05:04,639
3 and 5

99
00:05:04,639 --> 00:05:06,720
are all enhancing a piece of input

100
00:05:06,720 --> 00:05:07,759
buffer

101
00:05:07,759 --> 00:05:11,840
which is very suitable for buzzing

102
00:05:13,919 --> 00:05:16,800
apple provides apis at different levels

103
00:05:16,800 --> 00:05:18,880
for these functions

104
00:05:18,880 --> 00:05:21,440
some frameworks in low-level services

105
00:05:21,440 --> 00:05:24,080
are mostly libraries that deal with

106
00:05:24,080 --> 00:05:25,680
hardware

107
00:05:25,680 --> 00:05:27,840
we don't care about this

108
00:05:27,840 --> 00:05:29,600
we are mainly concerned about the

109
00:05:29,600 --> 00:05:32,080
frameworks in many levels and the

110
00:05:32,080 --> 00:05:34,000
high-level services

111
00:05:34,000 --> 00:05:35,360
to see which

112
00:05:35,360 --> 00:05:37,600
services

113
00:05:37,600 --> 00:05:42,240
is more appropriate to build our harness

114
00:05:42,240 --> 00:05:44,080
the following is a functional

115
00:05:44,080 --> 00:05:46,880
description of the middle level and high

116
00:05:46,880 --> 00:05:49,280
level interfaces

117
00:05:49,280 --> 00:05:52,639
the numbers on the picture

118
00:05:52,639 --> 00:05:54,000
indicates

119
00:05:54,000 --> 00:05:56,720
which items in the flowchart correspond

120
00:05:56,720 --> 00:05:59,759
to each library

121
00:06:01,680 --> 00:06:04,319
first let's take a look at the interface

122
00:06:04,319 --> 00:06:06,880
of the middle layer

123
00:06:06,880 --> 00:06:09,600
this one is audio file services

124
00:06:09,600 --> 00:06:11,840
it can read basically information such

125
00:06:11,840 --> 00:06:14,479
as sampling rate bitrate

126
00:06:14,479 --> 00:06:17,360
duration aesthetic and spread audio

127
00:06:17,360 --> 00:06:18,479
frames

128
00:06:18,479 --> 00:06:20,639
let's call this process as audio

129
00:06:20,639 --> 00:06:22,000
analysis

130
00:06:22,000 --> 00:06:25,120
complete the second step in the playback

131
00:06:25,120 --> 00:06:27,600
process

132
00:06:28,479 --> 00:06:29,840
and this one

133
00:06:29,840 --> 00:06:32,400
is auto file stream services

134
00:06:32,400 --> 00:06:35,360
similar to the audio file services

135
00:06:35,360 --> 00:06:38,400
but mainly for streaming media playback

136
00:06:38,400 --> 00:06:42,479
second step of the playback process

137
00:06:42,720 --> 00:06:45,840
this one is audio converter services

138
00:06:45,840 --> 00:06:48,319
it does audio date conversion

139
00:06:48,319 --> 00:06:50,400
corresponding to the third step in the

140
00:06:50,400 --> 00:06:52,880
flowchart

141
00:06:52,880 --> 00:06:55,440
then let's focus on the high level

142
00:06:55,440 --> 00:06:57,680
interfaces

143
00:06:57,680 --> 00:07:00,479
this lab this one is extended audio file

144
00:07:00,479 --> 00:07:02,080
services

145
00:07:02,080 --> 00:07:05,120
a combination of audio file services and

146
00:07:05,120 --> 00:07:08,479
audio converter services

147
00:07:08,479 --> 00:07:11,759
and this one is av audio player

148
00:07:11,759 --> 00:07:14,560
it is an advanced interface which can

149
00:07:14,560 --> 00:07:16,560
complete the entire audio playback

150
00:07:16,560 --> 00:07:18,400
process

151
00:07:18,400 --> 00:07:20,720
including local file and the network

152
00:07:20,720 --> 00:07:22,479
stream playback

153
00:07:22,479 --> 00:07:24,479
correspond to all the steps in the

154
00:07:24,479 --> 00:07:25,759
flowchart

155
00:07:25,759 --> 00:07:30,039
except for step 4.

156
00:07:30,960 --> 00:07:33,840
if you choose an advanced service such

157
00:07:33,840 --> 00:07:35,680
as av player

158
00:07:35,680 --> 00:07:38,319
we need to use a graphical interface

159
00:07:38,319 --> 00:07:42,160
which is not convenient for fuzzing

160
00:07:42,160 --> 00:07:44,879
audio file services audio file stream

161
00:07:44,879 --> 00:07:46,080
services

162
00:07:46,080 --> 00:07:48,240
audio converter services

163
00:07:48,240 --> 00:07:50,720
extended audio file services are all

164
00:07:50,720 --> 00:07:52,720
good twice

165
00:07:52,720 --> 00:07:54,319
for the second step

166
00:07:54,319 --> 00:07:57,280
compared with audio file services

167
00:07:57,280 --> 00:08:00,000
audio faster stream services makes our

168
00:08:00,000 --> 00:08:02,400
fusing much more efficient

169
00:08:02,400 --> 00:08:05,120
so we finally selected audio file stream

170
00:08:05,120 --> 00:08:06,800
services

171
00:08:06,800 --> 00:08:09,440
for third step the audio decodings

172
00:08:09,440 --> 00:08:10,960
process

173
00:08:10,960 --> 00:08:13,759
i choose extended audio file services

174
00:08:13,759 --> 00:08:15,039
for fuzzing

175
00:08:15,039 --> 00:08:19,360
which is relatively easy to use

176
00:08:24,160 --> 00:08:27,120
audio is not a new attack service as

177
00:08:27,120 --> 00:08:30,319
early as 2017

178
00:08:30,319 --> 00:08:34,120
risks achieved several cvs in audio in

179
00:08:34,120 --> 00:08:38,080
2019 he achieved three more

180
00:08:38,080 --> 00:08:39,679
but other than that

181
00:08:39,679 --> 00:08:41,599
this attention has been paid through

182
00:08:41,599 --> 00:08:43,839
vulnerabilities in audio

183
00:08:43,839 --> 00:08:46,080
before 2019

184
00:08:46,080 --> 00:08:48,240
brother back hunting was focused on

185
00:08:48,240 --> 00:08:53,720
modules such as js and watson

186
00:08:56,480 --> 00:08:59,200
then let me briefly introduce the binary

187
00:08:59,200 --> 00:09:03,200
back hunting technology i used on mac os

188
00:09:03,200 --> 00:09:06,399
this year project zero disclosed how

189
00:09:06,399 --> 00:09:08,880
they exported the vulnerabilities in

190
00:09:08,880 --> 00:09:10,399
mhio

191
00:09:10,399 --> 00:09:12,480
they wrote an instrumentation tool

192
00:09:12,480 --> 00:09:14,640
called track fast for it

193
00:09:14,640 --> 00:09:17,040
this drawer is very suitable for library

194
00:09:17,040 --> 00:09:18,160
fuzzing

195
00:09:18,160 --> 00:09:22,000
and the fast efficiency is pretty high

196
00:09:22,000 --> 00:09:23,839
the hardness needs to be carefully

197
00:09:23,839 --> 00:09:25,519
designed

198
00:09:25,519 --> 00:09:27,760
the audio parting step may be relatively

199
00:09:27,760 --> 00:09:30,320
simple it can be divided into three

200
00:09:30,320 --> 00:09:31,360
steps

201
00:09:31,360 --> 00:09:34,320
open analysis and close

202
00:09:34,320 --> 00:09:36,480
but for audio decoding

203
00:09:36,480 --> 00:09:39,440
various options need to be set for the

204
00:09:39,440 --> 00:09:41,839
output pcm format

205
00:09:41,839 --> 00:09:44,000
such as sampling rate

206
00:09:44,000 --> 00:09:46,320
number of channels per frame

207
00:09:46,320 --> 00:09:49,920
number of frames per packet at that tick

208
00:09:49,920 --> 00:09:51,839
since we want to increase the

209
00:09:51,839 --> 00:09:54,800
probability of reproducing our crashes

210
00:09:54,800 --> 00:09:56,240
in safari

211
00:09:56,240 --> 00:09:58,800
we should refer to parameter settings in

212
00:09:58,800 --> 00:10:00,480
yet

213
00:10:00,480 --> 00:10:03,120
another important step is to collect as

214
00:10:03,120 --> 00:10:05,279
many seeds as possible

215
00:10:05,279 --> 00:10:07,680
i have grown hundreds of thousands of

216
00:10:07,680 --> 00:10:09,680
seeds from the internet

217
00:10:09,680 --> 00:10:12,580
and then we can start enjoyable fuzzing

218
00:10:12,580 --> 00:10:15,659
[Music]

219
00:10:16,959 --> 00:10:18,959
achieve the results

220
00:10:18,959 --> 00:10:20,399
at present

221
00:10:20,399 --> 00:10:24,160
we have obtained 16 cvs in total which

222
00:10:24,160 --> 00:10:26,880
includes nine out of bound suite and

223
00:10:26,880 --> 00:10:28,800
seven out of bounds right

224
00:10:28,800 --> 00:10:30,320
and there are the outcomes of

225
00:10:30,320 --> 00:10:32,720
vulnerabilities in progress

226
00:10:32,720 --> 00:10:35,760
that have been submitted to apple

227
00:10:35,760 --> 00:10:37,000
cve

228
00:10:37,000 --> 00:10:38,720
2021

229
00:10:38,720 --> 00:10:40,480
1747

230
00:10:40,480 --> 00:10:43,279
is the vulnerability i used in this team

231
00:10:43,279 --> 00:10:44,959
for cup

232
00:10:44,959 --> 00:10:47,680
i use this bank to achieve after code

233
00:10:47,680 --> 00:10:51,199
execution in safari

234
00:10:52,160 --> 00:10:54,320
then let me introduce the course of the

235
00:10:54,320 --> 00:10:57,519
vulnerability i used on the tinfoil cup

236
00:10:57,519 --> 00:11:01,839
and the exploitation details

237
00:11:03,760 --> 00:11:06,880
the vulnerability exists in ac opposite

238
00:11:06,880 --> 00:11:11,040
decoder append input date function

239
00:11:11,040 --> 00:11:13,440
of the web module module which will

240
00:11:13,440 --> 00:11:16,399
cross auto bounce right when passing c a

241
00:11:16,399 --> 00:11:17,839
l files

242
00:11:17,839 --> 00:11:20,399
at position one

243
00:11:20,399 --> 00:11:22,560
there is a curve similar to the bounce

244
00:11:22,560 --> 00:11:23,760
checking

245
00:11:23,760 --> 00:11:26,720
but it does not take effect

246
00:11:26,720 --> 00:11:29,680
and at position 2

247
00:11:29,680 --> 00:11:32,480
the memory copy function is called

248
00:11:32,480 --> 00:11:35,920
crossing autobounce right

249
00:11:37,920 --> 00:11:40,720
let me briefly introduce the cl file

250
00:11:40,720 --> 00:11:42,240
format

251
00:11:42,240 --> 00:11:46,079
here i draw a simplified version of yet

252
00:11:46,079 --> 00:11:49,200
the ces file starts with the file header

253
00:11:49,200 --> 00:11:51,760
and then is composed with

254
00:11:51,760 --> 00:11:54,560
various types of trunk each trunk has a

255
00:11:54,560 --> 00:11:57,519
trunk header which across the sides of

256
00:11:57,519 --> 00:11:59,360
the trunk

257
00:11:59,360 --> 00:12:02,079
desk trunk

258
00:12:02,079 --> 00:12:04,720
this trunk mainly stores some metal date

259
00:12:04,720 --> 00:12:06,160
of the file

260
00:12:06,160 --> 00:12:08,720
vivid trunk stores all the packets

261
00:12:08,720 --> 00:12:11,120
and packet table trunk records the size

262
00:12:11,120 --> 00:12:13,200
of each packet

263
00:12:13,200 --> 00:12:15,600
during passing the packet table trunk

264
00:12:15,600 --> 00:12:18,639
will be read first to obtain the size of

265
00:12:18,639 --> 00:12:20,160
each packet

266
00:12:20,160 --> 00:12:22,959
and then go to date trunk to read the

267
00:12:22,959 --> 00:12:26,160
corresponding packet

268
00:12:30,720 --> 00:12:33,760
in order to analyze this vulnerability

269
00:12:33,760 --> 00:12:38,320
i specially used a 010 ether template to

270
00:12:38,320 --> 00:12:40,480
pass the cl file

271
00:12:40,480 --> 00:12:44,000
this is part of the template's code

272
00:12:44,000 --> 00:12:46,639
then we analyze the cfl that caused the

273
00:12:46,639 --> 00:12:50,079
crash and run it with the template file

274
00:12:50,079 --> 00:12:52,560
of the u100 answer

275
00:12:52,560 --> 00:12:56,399
you can see the following output

276
00:12:59,040 --> 00:13:01,440
the first column is the size of the

277
00:13:01,440 --> 00:13:02,399
packet

278
00:13:02,399 --> 00:13:03,680
in both

279
00:13:03,680 --> 00:13:06,079
and the second column is that the first

280
00:13:06,079 --> 00:13:08,000
column is the serial number of the

281
00:13:08,000 --> 00:13:08,959
packet

282
00:13:08,959 --> 00:13:11,279
and the second column is the size of the

283
00:13:11,279 --> 00:13:14,240
packet in both decimal and hexa small

284
00:13:14,240 --> 00:13:15,279
format

285
00:13:15,279 --> 00:13:17,880
it can be seen that the size of the

286
00:13:17,880 --> 00:13:22,639
114th package is a negative number

287
00:13:23,120 --> 00:13:25,519
it can be speculated that

288
00:13:25,519 --> 00:13:28,320
the program runs into a problem when

289
00:13:28,320 --> 00:13:32,079
processing packets with negative sizes

290
00:13:32,079 --> 00:13:34,800
because the code is too complicated

291
00:13:34,800 --> 00:13:37,200
and there was not much time before team

292
00:13:37,200 --> 00:13:39,040
forecast at that time

293
00:13:39,040 --> 00:13:41,920
i did not conduct a detailed analysis of

294
00:13:41,920 --> 00:13:43,440
the root cause

295
00:13:43,440 --> 00:13:45,839
here i mainly share my exploitation

296
00:13:45,839 --> 00:13:48,839
process

297
00:13:53,199 --> 00:13:55,760
i first did a reverse analysis of the

298
00:13:55,760 --> 00:13:57,519
relevant code

299
00:13:57,519 --> 00:14:00,320
the buffer written auto bounds exists in

300
00:14:00,320 --> 00:14:03,839
the structure called ac opus decoder the

301
00:14:03,839 --> 00:14:07,040
fields of this structure are as follows

302
00:14:07,040 --> 00:14:09,760
the battery of this button also bounce

303
00:14:09,760 --> 00:14:12,360
which has a total of

304
00:14:12,360 --> 00:14:14,399
1500 bytes

305
00:14:14,399 --> 00:14:17,199
the following fields such as buff size

306
00:14:17,199 --> 00:14:20,720
control field log object and control are

307
00:14:20,720 --> 00:14:23,519
all controllable

308
00:14:25,839 --> 00:14:28,480
this is a picture taken from source code

309
00:14:28,480 --> 00:14:30,880
of ac oppos decoder

310
00:14:30,880 --> 00:14:33,600
produce output buffer list

311
00:14:33,600 --> 00:14:36,880
function the program course ac

312
00:14:36,880 --> 00:14:39,120
opens packet gets samples full frame

313
00:14:39,120 --> 00:14:40,079
first

314
00:14:40,079 --> 00:14:43,519
and then it cross over second pass input

315
00:14:43,519 --> 00:14:44,639
function

316
00:14:44,639 --> 00:14:47,040
the return value is stream number

317
00:14:47,040 --> 00:14:48,959
if the free number is greater than or

318
00:14:48,959 --> 00:14:50,480
equal to zero

319
00:14:50,480 --> 00:14:52,800
we enter the true branch

320
00:14:52,800 --> 00:14:55,000
then the program compares

321
00:14:55,000 --> 00:14:58,079
v37 and v23

322
00:14:58,079 --> 00:15:02,399
if v37 is less than or equal to v23

323
00:15:02,399 --> 00:15:04,880
we enter the true branch in the troop

324
00:15:04,880 --> 00:15:05,839
branch

325
00:15:05,839 --> 00:15:08,399
program writes some value to addresses

326
00:15:08,399 --> 00:15:10,839
related to the log

327
00:15:10,839 --> 00:15:14,399
object next we have two graphs

328
00:15:14,399 --> 00:15:17,040
one is to go to the location where our

329
00:15:17,040 --> 00:15:20,560
arbitrary address right occurs

330
00:15:20,560 --> 00:15:22,880
and the written value must meet certain

331
00:15:22,880 --> 00:15:24,399
conditions

332
00:15:24,399 --> 00:15:26,560
the other is to make the program not

333
00:15:26,560 --> 00:15:28,800
crash immediately after causing

334
00:15:28,800 --> 00:15:31,199
arbitrary address right

335
00:15:31,199 --> 00:15:32,639
in the first step

336
00:15:32,639 --> 00:15:35,040
we can do it by controlling the value of

337
00:15:35,040 --> 00:15:37,120
some variables

338
00:15:37,120 --> 00:15:39,680
we need to ensure the return value of

339
00:15:39,680 --> 00:15:42,480
all past packets past include is greater

340
00:15:42,480 --> 00:15:44,639
than or equal to zero

341
00:15:44,639 --> 00:15:46,800
to reach the point we are able to

342
00:15:46,800 --> 00:15:48,880
address what happens

343
00:15:48,880 --> 00:15:51,600
this step is relatively simple

344
00:15:51,600 --> 00:15:54,000
we only need to control the value of a

345
00:15:54,000 --> 00:15:56,880
few variables

346
00:15:58,560 --> 00:16:00,880
some twists and turns occurs

347
00:16:00,880 --> 00:16:02,480
in the second step

348
00:16:02,480 --> 00:16:04,800
afterwards after an arbitrary address

349
00:16:04,800 --> 00:16:06,160
writing occurs

350
00:16:06,160 --> 00:16:09,440
we find that the program always crash in

351
00:16:09,440 --> 00:16:11,680
all possible frame function

352
00:16:11,680 --> 00:16:14,480
according to the conventional analysis

353
00:16:14,480 --> 00:16:16,399
if we want to achieve up to address

354
00:16:16,399 --> 00:16:17,279
right

355
00:16:17,279 --> 00:16:20,079
it will crash after right occurs

356
00:16:20,079 --> 00:16:22,399
if we try to avoid the crash

357
00:16:22,399 --> 00:16:24,959
we can't achieve aperture just right

358
00:16:24,959 --> 00:16:26,560
but in the process of reverse

359
00:16:26,560 --> 00:16:29,199
engineering i found a new bug

360
00:16:29,199 --> 00:16:31,839
the function used for passing the packet

361
00:16:31,839 --> 00:16:34,399
does not check the length of the packet

362
00:16:34,399 --> 00:16:37,279
and will cause an auto bounce passing

363
00:16:37,279 --> 00:16:40,240
so i constructed two packets that

364
00:16:40,240 --> 00:16:44,120
overlap each other

365
00:16:46,530 --> 00:16:49,589
[Music]

366
00:16:50,160 --> 00:16:51,680
look at this picture

367
00:16:51,680 --> 00:16:54,160
second one is two bytes

368
00:16:54,160 --> 00:16:56,800
the function used for passing assumes

369
00:16:56,800 --> 00:17:00,480
that each packet is at least four bytes

370
00:17:00,480 --> 00:17:03,120
so it will be passed auto bounce to

371
00:17:03,120 --> 00:17:04,880
packet 2

372
00:17:04,880 --> 00:17:09,919
the link xdlx f8 in packet 2 is regarded

373
00:17:09,919 --> 00:17:13,199
as the one of the fields in packet 1

374
00:17:13,199 --> 00:17:15,439
and finally we avoid the crash and

375
00:17:15,439 --> 00:17:17,119
achieve aperture just right in the

376
00:17:17,119 --> 00:17:19,839
meantime

377
00:17:25,039 --> 00:17:27,439
usually even with the ability to write

378
00:17:27,439 --> 00:17:28,960
arbitrary address

379
00:17:28,960 --> 00:17:32,000
if the program's aslr protection is done

380
00:17:32,000 --> 00:17:32,880
well

381
00:17:32,880 --> 00:17:36,000
you have to find an informatic bug to

382
00:17:36,000 --> 00:17:38,559
explore the vulnerability

383
00:17:38,559 --> 00:17:41,200
however there are some problems in the

384
00:17:41,200 --> 00:17:44,080
implementation of safari's heap

385
00:17:44,080 --> 00:17:46,160
we can spread control values on our

386
00:17:46,160 --> 00:17:49,200
fixed address by hip spray

387
00:17:49,200 --> 00:17:51,520
with arbitrary address right

388
00:17:51,520 --> 00:17:54,320
the first thing that comes to mind is to

389
00:17:54,320 --> 00:17:56,799
override the length of the field in js

390
00:17:56,799 --> 00:17:58,640
array

391
00:17:58,640 --> 00:18:01,360
all the lens field in array buffer

392
00:18:01,360 --> 00:18:04,480
due to safari's gigacatch mechanism even

393
00:18:04,480 --> 00:18:06,640
if the lens field of a rebuffer is

394
00:18:06,640 --> 00:18:07,840
overwritten

395
00:18:07,840 --> 00:18:09,840
we cannot read or write meaningful

396
00:18:09,840 --> 00:18:11,360
content

397
00:18:11,360 --> 00:18:15,840
so i finally selected gsa

398
00:18:21,600 --> 00:18:24,960
gs3 in safari uses firefly to express

399
00:18:24,960 --> 00:18:26,960
its length and content

400
00:18:26,960 --> 00:18:28,880
if the length of the js array is

401
00:18:28,880 --> 00:18:30,160
overwritten

402
00:18:30,160 --> 00:18:32,640
then we can read and write auto bounds

403
00:18:32,640 --> 00:18:35,919
to the content of next js array

404
00:18:35,919 --> 00:18:38,320
then two primitives which called fake

405
00:18:38,320 --> 00:18:42,400
object and address of can be constructed

406
00:18:42,400 --> 00:18:44,320
the following two pictures are two

407
00:18:44,320 --> 00:18:46,080
different memory layouts

408
00:18:46,080 --> 00:18:49,600
that i encountered during the exploit

409
00:18:49,600 --> 00:18:52,240
the left side exact picture

410
00:18:52,240 --> 00:18:56,480
identifies the address of the memory

411
00:18:56,480 --> 00:18:59,039
and the picture uses different colors to

412
00:18:59,039 --> 00:19:00,400
indicate that

413
00:19:00,400 --> 00:19:03,679
different types of objects are stored

414
00:19:03,679 --> 00:19:06,880
in different areas

415
00:19:07,280 --> 00:19:09,840
i first try to spray 2 gigabytes of

416
00:19:09,840 --> 00:19:12,640
memory and from that my butterfly

417
00:19:12,640 --> 00:19:15,080
sometimes free between

418
00:19:15,080 --> 00:19:18,640
0x8 followed by 8 0s

419
00:19:18,640 --> 00:19:22,240
to 0x1 followed by 9 0s

420
00:19:22,240 --> 00:19:24,720
and sometimes we're between

421
00:19:24,720 --> 00:19:27,520
the iox one eight followed by eight

422
00:19:27,520 --> 00:19:28,640
zeros

423
00:19:28,640 --> 00:19:34,400
two xerox one c followed by eight zeros

424
00:19:34,400 --> 00:19:36,840
due to the hip isolation mechanism of

425
00:19:36,840 --> 00:19:39,760
safari different types of objects are in

426
00:19:39,760 --> 00:19:41,600
different heaps

427
00:19:41,600 --> 00:19:44,480
butterfly is in a heap called deer cage

428
00:19:44,480 --> 00:19:45,840
in safari

429
00:19:45,840 --> 00:19:47,919
some research on the giga chip have

430
00:19:47,919 --> 00:19:49,200
found that

431
00:19:49,200 --> 00:19:51,280
the base address of gear cage is

432
00:19:51,280 --> 00:19:52,720
predictable

433
00:19:52,720 --> 00:19:55,600
and there are two types of gear kits

434
00:19:55,600 --> 00:19:58,160
one can store butterfly and the other

435
00:19:58,160 --> 00:20:00,559
can store a rebuffer

436
00:20:00,559 --> 00:20:02,799
for these few types of chips

437
00:20:02,799 --> 00:20:07,120
here critch does small randomization

438
00:20:07,120 --> 00:20:09,679
one situation is that butterfly is on

439
00:20:09,679 --> 00:20:11,679
the upper side

440
00:20:11,679 --> 00:20:14,159
and the other situation is that

441
00:20:14,159 --> 00:20:17,039
the rebuffal is on the other side

442
00:20:17,039 --> 00:20:19,440
let's look at switching one

443
00:20:19,440 --> 00:20:22,640
starting from zero x8 followed by eight

444
00:20:22,640 --> 00:20:23,840
zeros

445
00:20:23,840 --> 00:20:26,559
an unmapped area of zero to four

446
00:20:26,559 --> 00:20:29,280
gigabytes

447
00:20:29,440 --> 00:20:31,919
will be randomly generated

448
00:20:31,919 --> 00:20:33,840
and then the battery tube will be

449
00:20:33,840 --> 00:20:35,520
located below

450
00:20:35,520 --> 00:20:38,080
in the second situation starting from

451
00:20:38,080 --> 00:20:42,400
zero x one eight followed by eight zeros

452
00:20:42,400 --> 00:20:45,840
an armored area will also be generated

453
00:20:45,840 --> 00:20:48,559
followed by the butterfly's heat

454
00:20:48,559 --> 00:20:50,720
in either case the degree of

455
00:20:50,720 --> 00:20:52,960
randomization of the base address is

456
00:20:52,960 --> 00:20:56,280
very small

457
00:21:04,559 --> 00:21:07,679
i first tested it on a machine with 16

458
00:21:07,679 --> 00:21:09,520
gigabytes memory

459
00:21:09,520 --> 00:21:12,400
in order to spread the success rate i

460
00:21:12,400 --> 00:21:14,400
sprayed four gigabytes

461
00:21:14,400 --> 00:21:16,480
but later i found that

462
00:21:16,480 --> 00:21:19,280
safari monitors the memory used by each

463
00:21:19,280 --> 00:21:20,960
renderer process

464
00:21:20,960 --> 00:21:23,919
if the memory used is too large it will

465
00:21:23,919 --> 00:21:25,120
be killed

466
00:21:25,120 --> 00:21:28,400
so i choose to spray 2.5 gigabytes

467
00:21:28,400 --> 00:21:29,440
finally

468
00:21:29,440 --> 00:21:32,320
but this will cause the success rate to

469
00:21:32,320 --> 00:21:33,840
drop a letter

470
00:21:33,840 --> 00:21:36,880
but this is not a big problem

471
00:21:36,880 --> 00:21:39,039
we are lucky to be able to trigger

472
00:21:39,039 --> 00:21:41,679
aperture address writing multiple times

473
00:21:41,679 --> 00:21:44,480
by modifying our caf file

474
00:21:44,480 --> 00:21:48,400
to pull back the success rate

475
00:21:50,400 --> 00:21:52,039
in order to

476
00:21:52,039 --> 00:21:55,520
facility in order to facilitate the

477
00:21:55,520 --> 00:21:57,200
transformation of

478
00:21:57,200 --> 00:21:58,080
files

479
00:21:58,080 --> 00:22:02,400
i use asm syntax to describe cf files

480
00:22:02,400 --> 00:22:05,039
esm syntax supports the definition of

481
00:22:05,039 --> 00:22:07,120
various wise values

482
00:22:07,120 --> 00:22:11,200
such as byte word viewer keyword and

483
00:22:11,200 --> 00:22:14,480
also sports text placeholders and

484
00:22:14,480 --> 00:22:17,360
repeating a value multiple times

485
00:22:17,360 --> 00:22:21,440
this picture is part of my asm file

486
00:22:21,440 --> 00:22:24,960
which defines the c and file header

487
00:22:24,960 --> 00:22:28,000
desk trunk some values used to trigger

488
00:22:28,000 --> 00:22:32,000
the vulnerability and so on

489
00:22:36,320 --> 00:22:38,799
the following sequence diagram expands

490
00:22:38,799 --> 00:22:41,360
the interior explode process

491
00:22:41,360 --> 00:22:44,000
in the beginning there was only one js

492
00:22:44,000 --> 00:22:46,080
thread

493
00:22:46,080 --> 00:22:48,159
we do hip spray first

494
00:22:48,159 --> 00:22:50,640
and constructed the audio file in the

495
00:22:50,640 --> 00:22:51,840
memory

496
00:22:51,840 --> 00:22:54,400
then call the decode audio date function

497
00:22:54,400 --> 00:22:58,400
which performs the audio default process

498
00:22:58,400 --> 00:23:00,559
since i've already closed the audio in a

499
00:23:00,559 --> 00:23:02,000
split thread

500
00:23:02,000 --> 00:23:06,080
the audio a thread will be started here

501
00:23:06,080 --> 00:23:08,080
let's first assume that the memory

502
00:23:08,080 --> 00:23:10,640
layout of the heap spring is the

503
00:23:10,640 --> 00:23:13,520
situation one mentioned above

504
00:23:13,520 --> 00:23:15,919
then the audio x thread will trigger

505
00:23:15,919 --> 00:23:18,640
after just right for three times

506
00:23:18,640 --> 00:23:21,760
in the swiss range

507
00:23:21,760 --> 00:23:25,039
followed by l0s q0x1 followed by

508
00:23:25,039 --> 00:23:26,559
non-zeros

509
00:23:26,559 --> 00:23:28,799
when decoding the audio file

510
00:23:28,799 --> 00:23:32,159
and the json will detect

511
00:23:32,159 --> 00:23:34,240
whether the length of js array is

512
00:23:34,240 --> 00:23:37,520
changed up two seconds

513
00:23:37,520 --> 00:23:40,240
if it has changed it means that we get

514
00:23:40,240 --> 00:23:42,159
the heavily outright

515
00:23:42,159 --> 00:23:44,720
and then the subscribers with the code

516
00:23:44,720 --> 00:23:46,640
can be executed

517
00:23:46,640 --> 00:23:49,360
if it is not changed it means the hip

518
00:23:49,360 --> 00:23:51,679
layout is saturation 2

519
00:23:51,679 --> 00:23:53,440
then we call the code audio date

520
00:23:53,440 --> 00:23:56,320
function for the second time start audio

521
00:23:56,320 --> 00:23:58,640
b thread to the code audio

522
00:23:58,640 --> 00:24:00,799
this time we will sugar up to address

523
00:24:00,799 --> 00:24:04,480
right in address range there yolks one h

524
00:24:04,480 --> 00:24:07,919
followed by eight zeros q zero x one c

525
00:24:07,919 --> 00:24:10,799
followed by l zeros

526
00:24:10,799 --> 00:24:13,520
the j thread loops to check whether the

527
00:24:13,520 --> 00:24:16,159
length of this array is changed

528
00:24:16,159 --> 00:24:18,960
and if it is changed it will execute

529
00:24:18,960 --> 00:24:22,000
subsequent exploits

530
00:24:22,000 --> 00:24:23,600
if it is fails

531
00:24:23,600 --> 00:24:24,960
it means that

532
00:24:24,960 --> 00:24:29,559
the interior explode has failed

533
00:24:34,480 --> 00:24:37,279
besides there is a problem that needs to

534
00:24:37,279 --> 00:24:38,720
be solved

535
00:24:38,720 --> 00:24:41,200
after the audio file is decoded

536
00:24:41,200 --> 00:24:44,000
some cleanup functions will be called

537
00:24:44,000 --> 00:24:46,640
and since we crafted the structure in a

538
00:24:46,640 --> 00:24:49,600
memory a crash will occur

539
00:24:49,600 --> 00:24:51,440
there are several ways to solve this

540
00:24:51,440 --> 00:24:52,559
problem

541
00:24:52,559 --> 00:24:55,360
one is repair the damaged heap

542
00:24:55,360 --> 00:24:57,279
and the other is to make the audio

543
00:24:57,279 --> 00:25:00,960
decoding time very very long

544
00:25:00,960 --> 00:25:03,600
and make our exploitation process ends

545
00:25:03,600 --> 00:25:05,360
before the decoding is over

546
00:25:05,360 --> 00:25:06,960
[Music]

547
00:25:06,960 --> 00:25:09,600
the first approach is too complicated

548
00:25:09,600 --> 00:25:12,000
because we need you search the heap

549
00:25:12,000 --> 00:25:14,400
and it takes a certain amount of time to

550
00:25:14,400 --> 00:25:16,559
appear the keep

551
00:25:16,559 --> 00:25:18,640
the program may crashes when we are

552
00:25:18,640 --> 00:25:21,279
repairing the heap

553
00:25:21,279 --> 00:25:24,880
so we choose the second approach

554
00:25:24,880 --> 00:25:26,960
sorry so we choose a second approach at

555
00:25:26,960 --> 00:25:31,600
last i constructed a 600 megabytes cl

556
00:25:31,600 --> 00:25:35,200
file with more than 17 million packets

557
00:25:35,200 --> 00:25:38,159
it will take about 50 seconds to decode

558
00:25:38,159 --> 00:25:40,000
all these packets

559
00:25:40,000 --> 00:25:43,840
which is enough for my exploit

560
00:25:47,520 --> 00:25:49,919
after overwriting the length field of js

561
00:25:49,919 --> 00:25:50,799
array

562
00:25:50,799 --> 00:25:53,279
we can construct fake object and address

563
00:25:53,279 --> 00:25:54,960
of primitives

564
00:25:54,960 --> 00:25:57,360
and then we can use choose

565
00:25:57,360 --> 00:25:59,760
primitives to construct aperture address

566
00:25:59,760 --> 00:26:01,840
read and write

567
00:26:01,840 --> 00:26:04,320
at last we write you the shell code into

568
00:26:04,320 --> 00:26:08,240
the jet area to execute arbitrary code

569
00:26:08,240 --> 00:26:10,640
these are old-school things

570
00:26:10,640 --> 00:26:14,640
and i won't go into the details here

571
00:26:14,640 --> 00:26:16,960
audiences who are interested in english

572
00:26:16,960 --> 00:26:19,039
can read projects they are all cellulose

573
00:26:19,039 --> 00:26:22,320
articles attacking javascript engines a

574
00:26:22,320 --> 00:26:25,600
case study of javascript core and cve

575
00:26:25,600 --> 00:26:28,600
q0164622

576
00:26:31,919 --> 00:26:35,039
my speech is ending does anyone have any

577
00:26:35,039 --> 00:26:38,039
questions

578
00:26:38,640 --> 00:26:40,720
you

