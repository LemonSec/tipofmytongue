1
00:00:01,130 --> 00:00:14,690
[Music]

2
00:00:16,239 --> 00:00:18,880
hello everyone today it's my pleasure to

3
00:00:18,880 --> 00:00:21,199
be here to present our work

4
00:00:21,199 --> 00:00:22,880
with the title

5
00:00:22,880 --> 00:00:25,119
mining and exploiting mobile payment

6
00:00:25,119 --> 00:00:28,080
credential leaks in the wild

7
00:00:28,080 --> 00:00:30,720
i'm sean chen and we are researchers

8
00:00:30,720 --> 00:00:34,719
from the chinese university of hong kong

9
00:00:34,719 --> 00:00:37,760
my talk will be organized as follows

10
00:00:37,760 --> 00:00:40,480
first i will give a

11
00:00:40,480 --> 00:00:42,879
brief introduction to the third party

12
00:00:42,879 --> 00:00:45,760
payment service for mobile apps

13
00:00:45,760 --> 00:00:48,399
including the involved parties and as

14
00:00:48,399 --> 00:00:50,239
general workflow

15
00:00:50,239 --> 00:00:53,280
next i will talk about the credentials

16
00:00:53,280 --> 00:00:55,600
used in mobile payments

17
00:00:55,600 --> 00:00:58,640
which will help you to better understand

18
00:00:58,640 --> 00:01:01,600
the exploits discussed later

19
00:01:01,600 --> 00:01:04,319
after that i will introduce the possible

20
00:01:04,319 --> 00:01:07,200
leaking sources of payment credentials

21
00:01:07,200 --> 00:01:09,200
as well as the potential

22
00:01:09,200 --> 00:01:11,439
exploits with the leaked payment

23
00:01:11,439 --> 00:01:13,439
credentials

24
00:01:13,439 --> 00:01:16,479
then i will present our automatic tool

25
00:01:16,479 --> 00:01:18,000
to discover

26
00:01:18,000 --> 00:01:20,159
the payment credentials leaked in the

27
00:01:20,159 --> 00:01:21,439
world

28
00:01:21,439 --> 00:01:25,520
also i will discuss how to identify

29
00:01:25,520 --> 00:01:28,400
the leaking merchant apps from their

30
00:01:28,400 --> 00:01:31,360
credentials finally i will give some

31
00:01:31,360 --> 00:01:32,960
suggestions

32
00:01:32,960 --> 00:01:35,439
for fixing the payment credential leak

33
00:01:35,439 --> 00:01:36,479
issue

34
00:01:36,479 --> 00:01:40,000
to conclude this talk

35
00:01:40,000 --> 00:01:41,119
so first

36
00:01:41,119 --> 00:01:44,720
let's talk about what is third party

37
00:01:44,720 --> 00:01:48,079
mobile payment service

38
00:01:48,799 --> 00:01:51,520
in mobile payment there are three

39
00:01:51,520 --> 00:01:54,720
parties involved namely

40
00:01:54,720 --> 00:01:56,960
the cashier the merchant

41
00:01:56,960 --> 00:01:58,560
and the user

42
00:01:58,560 --> 00:02:01,920
notably the cashier and merchant heroes

43
00:02:01,920 --> 00:02:05,280
stand for their backend servers

44
00:02:05,280 --> 00:02:07,680
while the user is represented by the

45
00:02:07,680 --> 00:02:09,360
casual app

46
00:02:09,360 --> 00:02:13,040
and merchant app installed on his

47
00:02:13,040 --> 00:02:14,319
smartphone

48
00:02:14,319 --> 00:02:16,800
the target of the mobile payment

49
00:02:16,800 --> 00:02:19,920
protocol is for the user to pay the

50
00:02:19,920 --> 00:02:23,840
merchant app through the cashier

51
00:02:23,840 --> 00:02:25,120
so first

52
00:02:25,120 --> 00:02:28,239
the user needs to log into the merchant

53
00:02:28,239 --> 00:02:30,400
app in step 1

54
00:02:30,400 --> 00:02:32,560
which can be conducted through the

55
00:02:32,560 --> 00:02:34,319
single sound service

56
00:02:34,319 --> 00:02:37,440
that may be provided by the same service

57
00:02:37,440 --> 00:02:39,200
provider

58
00:02:39,200 --> 00:02:41,760
or cashier

59
00:02:41,760 --> 00:02:45,360
after the user shops and choose to check

60
00:02:45,360 --> 00:02:47,680
out with the

61
00:02:47,680 --> 00:02:50,239
third party cashier

62
00:02:50,239 --> 00:02:52,560
the merchant app generates an order

63
00:02:52,560 --> 00:02:54,560
request to a server

64
00:02:54,560 --> 00:02:56,400
in step 2

65
00:02:56,400 --> 00:02:59,360
then the merchant server will respond

66
00:02:59,360 --> 00:03:02,720
with a payment order in step 3

67
00:03:02,720 --> 00:03:05,599
which contains app information

68
00:03:05,599 --> 00:03:07,840
and other other information

69
00:03:07,840 --> 00:03:10,159
the app information here

70
00:03:10,159 --> 00:03:13,840
includes an important parameter

71
00:03:13,840 --> 00:03:16,159
called notify uil

72
00:03:16,159 --> 00:03:19,040
and we will use it later

73
00:03:19,040 --> 00:03:21,040
then the merchant app

74
00:03:21,040 --> 00:03:22,959
forwards the payment order to the

75
00:03:22,959 --> 00:03:24,640
cashier app

76
00:03:24,640 --> 00:03:26,080
in step 4

77
00:03:26,080 --> 00:03:28,319
while the cashier app will present the

78
00:03:28,319 --> 00:03:29,920
payment details

79
00:03:29,920 --> 00:03:33,280
such as the total amount to the user for

80
00:03:33,280 --> 00:03:35,599
authorization

81
00:03:35,599 --> 00:03:38,879
once the user authorizes the payment

82
00:03:38,879 --> 00:03:41,440
the cashier will generate a payment

83
00:03:41,440 --> 00:03:42,640
request

84
00:03:42,640 --> 00:03:44,840
to a server

85
00:03:44,840 --> 00:03:50,959
or just the cashier server in step five

86
00:03:51,280 --> 00:03:54,159
after processing the payment the cashier

87
00:03:54,159 --> 00:03:55,360
server

88
00:03:55,360 --> 00:03:58,000
will send two types of instant payment

89
00:03:58,000 --> 00:04:01,120
notifications to the merchant namely the

90
00:04:01,120 --> 00:04:04,239
signals notification and a singleness

91
00:04:04,239 --> 00:04:06,000
notification

92
00:04:06,000 --> 00:04:07,120
the single

93
00:04:07,120 --> 00:04:10,879
the synchronous notification or step 6a

94
00:04:10,879 --> 00:04:13,280
as the immediate response

95
00:04:13,280 --> 00:04:15,439
to the payment request

96
00:04:15,439 --> 00:04:18,478
which goes through the user device in

97
00:04:18,478 --> 00:04:20,160
step 7

98
00:04:20,160 --> 00:04:23,199
and arrives at the merchant server in

99
00:04:23,199 --> 00:04:25,040
step 8

100
00:04:25,040 --> 00:04:26,800
in contrast

101
00:04:26,800 --> 00:04:30,800
the synchronous notification of step 6b

102
00:04:30,800 --> 00:04:34,720
is sent to the merchant server

103
00:04:36,080 --> 00:04:38,320
from the cashier server directly

104
00:04:38,320 --> 00:04:40,840
according to the notify url

105
00:04:40,840 --> 00:04:44,080
specified in the payment order in step

106
00:04:44,080 --> 00:04:46,479
three

107
00:04:47,040 --> 00:04:50,160
also the customers usually provide other

108
00:04:50,160 --> 00:04:53,759
management interfaces to their merchants

109
00:04:53,759 --> 00:04:58,080
which can operate on the cash account

110
00:04:58,080 --> 00:05:00,240
of the merchant app

111
00:05:00,240 --> 00:05:01,520
for example

112
00:05:01,520 --> 00:05:04,560
the merchant server may send requests

113
00:05:04,560 --> 00:05:07,919
to the cashier server directly in step 9

114
00:05:07,919 --> 00:05:10,720
to perform some transactions such as

115
00:05:10,720 --> 00:05:14,240
refunding the paid orders

116
00:05:16,240 --> 00:05:18,880
then let's talk about the credentials

117
00:05:18,880 --> 00:05:20,600
used in mobile appointments

118
00:05:20,600 --> 00:05:21,840
[Music]

119
00:05:21,840 --> 00:05:24,479
in the workflow below almost all the

120
00:05:24,479 --> 00:05:26,639
payment related messages

121
00:05:26,639 --> 00:05:29,680
except for step 2 are protected

122
00:05:29,680 --> 00:05:31,600
cryptographically

123
00:05:31,600 --> 00:05:34,560
since there is no unifying standard for

124
00:05:34,560 --> 00:05:37,199
mobile payment

125
00:05:37,199 --> 00:05:38,479
the caches

126
00:05:38,479 --> 00:05:41,199
or define their own credentials

127
00:05:41,199 --> 00:05:42,639
in this work

128
00:05:42,639 --> 00:05:45,840
we studied the credential leak issue for

129
00:05:45,840 --> 00:05:46,720
four

130
00:05:46,720 --> 00:05:49,360
first-year third-party customers

131
00:05:49,360 --> 00:05:51,840
this consists of of one billion end

132
00:05:51,840 --> 00:05:53,520
users globally

133
00:05:53,520 --> 00:05:56,240
however according to the requests

134
00:05:56,240 --> 00:05:58,960
from these caches after our responsible

135
00:05:58,960 --> 00:06:00,800
disclosure

136
00:06:00,800 --> 00:06:03,759
we will not release their names and just

137
00:06:03,759 --> 00:06:07,840
use cash 1 to cashew 4 to donate them in

138
00:06:07,840 --> 00:06:10,638
the following slides

139
00:06:10,880 --> 00:06:13,039
so the payment credentials can be

140
00:06:13,039 --> 00:06:16,720
categorized into two types

141
00:06:16,720 --> 00:06:19,520
and the first type is the payment key

142
00:06:19,520 --> 00:06:21,759
which is used to generate the digital

143
00:06:21,759 --> 00:06:23,039
signature

144
00:06:23,039 --> 00:06:24,960
or hmac

145
00:06:24,960 --> 00:06:28,080
then the merchant can choose item method

146
00:06:28,080 --> 00:06:30,960
to protect the payment messenger

147
00:06:30,960 --> 00:06:34,000
meanwhile none of the study captures

148
00:06:34,000 --> 00:06:36,479
required encryption on the payment

149
00:06:36,479 --> 00:06:37,759
messenger

150
00:06:37,759 --> 00:06:40,720
so that these messages becomes readable

151
00:06:40,720 --> 00:06:45,199
to the normal user or even the attacker

152
00:06:45,199 --> 00:06:47,840
on the other hand the security setting

153
00:06:47,840 --> 00:06:50,639
of payment keys are different

154
00:06:50,639 --> 00:06:52,800
across the questions

155
00:06:52,800 --> 00:06:54,000
for example

156
00:06:54,000 --> 00:06:56,880
some caches were generated key and

157
00:06:56,880 --> 00:06:59,199
assigned to the merchants

158
00:06:59,199 --> 00:07:02,160
which is instead user defined in the

159
00:07:02,160 --> 00:07:03,840
other cases

160
00:07:03,840 --> 00:07:06,720
in the case of digital signatures

161
00:07:06,720 --> 00:07:08,960
both the merchant and the customer need

162
00:07:08,960 --> 00:07:12,479
to maintain a pair of asymmetric key

163
00:07:12,479 --> 00:07:14,880
and share their public keys to validate

164
00:07:14,880 --> 00:07:17,360
the incoming messages

165
00:07:17,360 --> 00:07:20,160
however the publicity of the cashier

166
00:07:20,160 --> 00:07:22,960
tends to be global across the merchant

167
00:07:22,960 --> 00:07:24,240
apps

168
00:07:24,240 --> 00:07:26,880
these security settings can cause some

169
00:07:26,880 --> 00:07:30,479
security issues and i will talk about

170
00:07:30,479 --> 00:07:34,318
the corresponding drawback later

171
00:07:36,160 --> 00:07:38,400
apart from

172
00:07:38,400 --> 00:07:40,240
the payment keys

173
00:07:40,240 --> 00:07:43,120
there are two other credentials defined

174
00:07:43,120 --> 00:07:44,639
by the caches

175
00:07:44,639 --> 00:07:49,360
in order to provide better security

176
00:07:50,560 --> 00:07:53,440
the first one is the android signing key

177
00:07:53,440 --> 00:07:55,440
when the cachers app

178
00:07:55,440 --> 00:07:58,960
received a payment order in step 4

179
00:07:58,960 --> 00:08:02,720
cashier 2 and cash 4 will authorizate

180
00:08:02,720 --> 00:08:04,960
their merchant app by checking as

181
00:08:04,960 --> 00:08:06,720
package signature

182
00:08:06,720 --> 00:08:09,840
against a per registered value

183
00:08:09,840 --> 00:08:12,720
thus the merchants must keep

184
00:08:12,720 --> 00:08:15,280
the associated android signing keys

185
00:08:15,280 --> 00:08:17,758
private

186
00:08:20,240 --> 00:08:21,199
also

187
00:08:21,199 --> 00:08:24,479
cashier to issues client certificates

188
00:08:24,479 --> 00:08:27,280
to their merchants which are used for

189
00:08:27,280 --> 00:08:29,840
separate authentication on the network

190
00:08:29,840 --> 00:08:30,800
layer

191
00:08:30,800 --> 00:08:32,399
in the management

192
00:08:32,399 --> 00:08:35,360
interfaces in step 9

193
00:08:35,360 --> 00:08:38,640
for example refining the paid orders

194
00:08:38,640 --> 00:08:40,479
in such requests

195
00:08:40,479 --> 00:08:43,039
the merchant server needs to present as

196
00:08:43,039 --> 00:08:44,720
client certificate

197
00:08:44,720 --> 00:08:46,880
to the cashier server to authenticate

198
00:08:46,880 --> 00:08:49,120
itself

199
00:08:49,120 --> 00:08:51,440
now let's discuss where the payment

200
00:08:51,440 --> 00:08:55,360
credentials can be leaked in the world

201
00:08:55,360 --> 00:08:57,600
in summary there are three potential

202
00:08:57,600 --> 00:08:59,839
leaking sources and i will go through

203
00:08:59,839 --> 00:09:02,480
them one by one

204
00:09:02,480 --> 00:09:05,360
the first leaking source is the public

205
00:09:05,360 --> 00:09:09,040
get repositories such as github

206
00:09:09,040 --> 00:09:11,200
such leaks in github

207
00:09:11,200 --> 00:09:13,440
has been known before and have been

208
00:09:13,440 --> 00:09:16,080
studied by many previous works

209
00:09:16,080 --> 00:09:18,959
despite this known finding we also find

210
00:09:18,959 --> 00:09:21,440
some websites

211
00:09:21,440 --> 00:09:24,959
which set up their own github service

212
00:09:24,959 --> 00:09:27,120
on public ip addresses

213
00:09:27,120 --> 00:09:30,399
and make their report trades public

214
00:09:30,399 --> 00:09:33,200
which may also contain the active

215
00:09:33,200 --> 00:09:35,600
payment credentials

216
00:09:35,600 --> 00:09:39,279
the second leaking source is mobile apps

217
00:09:39,279 --> 00:09:42,000
because many app developers may deploy

218
00:09:42,000 --> 00:09:44,240
the server side projects

219
00:09:44,240 --> 00:09:46,080
in the front end

220
00:09:46,080 --> 00:09:48,640
in this works we mainly focus on the

221
00:09:48,640 --> 00:09:51,680
android apps because their installation

222
00:09:51,680 --> 00:09:55,600
packages or apks can be easily obtained

223
00:09:55,600 --> 00:09:59,519
from the third party app market

224
00:09:59,519 --> 00:10:02,079
also in our preliminary

225
00:10:02,079 --> 00:10:04,880
study we find some credentials only

226
00:10:04,880 --> 00:10:06,160
accessed

227
00:10:06,160 --> 00:10:07,040
in

228
00:10:07,040 --> 00:10:09,120
old mobile app versions

229
00:10:09,120 --> 00:10:11,440
many of these app developers have tried

230
00:10:11,440 --> 00:10:14,160
to hide a leak issue by pushing new

231
00:10:14,160 --> 00:10:15,600
versions

232
00:10:15,600 --> 00:10:17,200
of mobile apps

233
00:10:17,200 --> 00:10:19,760
however the leaked credentials

234
00:10:19,760 --> 00:10:22,959
are still valid and can be uncovered by

235
00:10:22,959 --> 00:10:25,680
the attacker

236
00:10:26,480 --> 00:10:29,600
out of our expectation we find the

237
00:10:29,600 --> 00:10:32,240
merchant server can be another leaking

238
00:10:32,240 --> 00:10:33,279
source

239
00:10:33,279 --> 00:10:35,839
which has not been studied

240
00:10:35,839 --> 00:10:37,200
before

241
00:10:37,200 --> 00:10:40,079
such leaks are caused by two major

242
00:10:40,079 --> 00:10:41,360
reasons

243
00:10:41,360 --> 00:10:42,480
namely

244
00:10:42,480 --> 00:10:46,000
the flood backhand sdks from the caches

245
00:10:46,000 --> 00:10:48,880
and the insecure access control

246
00:10:48,880 --> 00:10:53,839
setting by the merchant unless server

247
00:10:53,839 --> 00:10:55,680
here we give a

248
00:10:55,680 --> 00:10:58,560
concrete example for better registration

249
00:10:58,560 --> 00:11:01,200
the figure here shows the structure of a

250
00:11:01,200 --> 00:11:03,600
flawed sdk

251
00:11:03,600 --> 00:11:05,440
to be specific

252
00:11:05,440 --> 00:11:09,519
the scrap file notify uil.php

253
00:11:09,519 --> 00:11:12,160
as responsible for processing the single

254
00:11:12,160 --> 00:11:15,279
nodes notification mentioned above

255
00:11:15,279 --> 00:11:16,720
meanwhile the

256
00:11:16,720 --> 00:11:18,560
configuration file

257
00:11:18,560 --> 00:11:19,600
name like

258
00:11:19,600 --> 00:11:21,760
paymentconfig.php

259
00:11:21,760 --> 00:11:25,600
sets the payment key to a static file

260
00:11:25,600 --> 00:11:27,680
in other words

261
00:11:27,680 --> 00:11:29,200
pm

262
00:11:29,200 --> 00:11:30,480
what's due

263
00:11:30,480 --> 00:11:33,839
this sdk does not restrict the access to

264
00:11:33,839 --> 00:11:38,079
this static key file by default

265
00:11:38,079 --> 00:11:39,680
as such

266
00:11:39,680 --> 00:11:42,959
the attacker may guess the url endpoint

267
00:11:42,959 --> 00:11:45,440
of the credential file based on the

268
00:11:45,440 --> 00:11:47,760
value of notify url

269
00:11:47,760 --> 00:11:50,399
as well as the sdk structure

270
00:11:50,399 --> 00:11:52,959
then that then the attacker can student

271
00:11:52,959 --> 00:11:55,600
payment credential file directly

272
00:11:55,600 --> 00:11:58,240
after merchant server does not forbid

273
00:11:58,240 --> 00:12:01,519
the access to it

274
00:12:03,680 --> 00:12:06,079
then i will present four types of

275
00:12:06,079 --> 00:12:08,959
exploits enabled by the leaked payment

276
00:12:08,959 --> 00:12:11,600
credentials as we will see

277
00:12:11,600 --> 00:12:13,920
these leaked payment credentials

278
00:12:13,920 --> 00:12:17,120
can affect other innocent merchant apps

279
00:12:17,120 --> 00:12:18,560
without leaks

280
00:12:18,560 --> 00:12:21,360
or even another third-party

281
00:12:21,360 --> 00:12:25,519
service for mobile apps

282
00:12:25,519 --> 00:12:27,120
so first

283
00:12:27,120 --> 00:12:29,440
with the leaked payment credentials

284
00:12:29,440 --> 00:12:32,160
the attack may impress nate the benign

285
00:12:32,160 --> 00:12:34,800
merchants and virtual requests

286
00:12:34,800 --> 00:12:37,360
to the cashier server for some critical

287
00:12:37,360 --> 00:12:38,480
operations

288
00:12:38,480 --> 00:12:40,880
which include downloading transaction

289
00:12:40,880 --> 00:12:41,920
records

290
00:12:41,920 --> 00:12:44,560
and refining paid orders

291
00:12:44,560 --> 00:12:47,680
in some cases the attacker may even

292
00:12:47,680 --> 00:12:49,040
steal money

293
00:12:49,040 --> 00:12:51,519
from the merchant's cash account

294
00:12:51,519 --> 00:12:55,360
by crafting many transferring requests

295
00:12:55,360 --> 00:12:56,800
even if

296
00:12:56,800 --> 00:12:58,079
remember that

297
00:12:58,079 --> 00:13:01,120
cashier 2 requires the

298
00:13:01,120 --> 00:13:03,680
client certificate in these

299
00:13:03,680 --> 00:13:05,600
management interfaces

300
00:13:05,600 --> 00:13:08,880
we have detected over 3000 leaked client

301
00:13:08,880 --> 00:13:10,240
certificates

302
00:13:10,240 --> 00:13:13,519
which enable the merchant implementation

303
00:13:13,519 --> 00:13:14,639
attack

304
00:13:14,639 --> 00:13:15,680
such a

305
00:13:15,680 --> 00:13:17,920
such an exploit

306
00:13:17,920 --> 00:13:19,600
will cause

307
00:13:19,600 --> 00:13:22,000
both privacy violation and financial

308
00:13:22,000 --> 00:13:23,120
loss

309
00:13:23,120 --> 00:13:26,399
to the merchant apps as well as their

310
00:13:26,399 --> 00:13:28,399
end users

311
00:13:28,399 --> 00:13:29,920
on the other hand

312
00:13:29,920 --> 00:13:31,440
some careless

313
00:13:31,440 --> 00:13:34,399
app developers push their home

314
00:13:34,399 --> 00:13:37,680
front-end code online which includes

315
00:13:37,680 --> 00:13:39,199
their private

316
00:13:39,199 --> 00:13:40,959
android signing keys

317
00:13:40,959 --> 00:13:42,560
as a result

318
00:13:42,560 --> 00:13:44,959
the attacker can change several lines of

319
00:13:44,959 --> 00:13:45,839
code

320
00:13:45,839 --> 00:13:48,399
in the original code base and the

321
00:13:48,399 --> 00:13:51,120
package of malaysia's merchant app

322
00:13:51,120 --> 00:13:54,560
by replacing the payment order in step 4

323
00:13:54,560 --> 00:13:57,279
the vactime user can be checked into

324
00:13:57,279 --> 00:14:00,480
paying for the attacker's order

325
00:14:00,480 --> 00:14:04,480
overall we have detected over 400

326
00:14:04,480 --> 00:14:06,800
weighted android signing keys

327
00:14:06,800 --> 00:14:09,839
and the 10 of the related android apps

328
00:14:09,839 --> 00:14:13,600
have over 1 million downloads

329
00:14:15,600 --> 00:14:17,600
the third type of

330
00:14:17,600 --> 00:14:19,199
type of exploit

331
00:14:19,199 --> 00:14:23,680
is related to the single cell service

332
00:14:24,000 --> 00:14:25,279
actually some

333
00:14:25,279 --> 00:14:27,600
caches also provide third-party

334
00:14:27,600 --> 00:14:29,519
authentication service

335
00:14:29,519 --> 00:14:31,839
through single cell

336
00:14:31,839 --> 00:14:33,279
in other words

337
00:14:33,279 --> 00:14:37,279
some mobile apps can integrate the

338
00:14:37,279 --> 00:14:39,839
single sound and the payments of it

339
00:14:39,839 --> 00:14:41,199
from the same

340
00:14:41,199 --> 00:14:42,880
service provider

341
00:14:42,880 --> 00:14:44,639
however

342
00:14:44,639 --> 00:14:47,839
these caches may not separate payment

343
00:14:47,839 --> 00:14:51,199
and single cell d2 service properly

344
00:14:51,199 --> 00:14:52,399
which

345
00:14:52,399 --> 00:14:55,920
makes sure the same set of user ids

346
00:14:55,920 --> 00:14:59,600
enabling the so-called profile exploit

347
00:14:59,600 --> 00:15:01,680
in single file

348
00:15:01,680 --> 00:15:04,399
in profile exploit the merchant server

349
00:15:04,399 --> 00:15:08,320
trusts the user id from the user device

350
00:15:08,320 --> 00:15:09,839
by wrong

351
00:15:09,839 --> 00:15:10,639
but

352
00:15:10,639 --> 00:15:13,760
miss the token request to the service

353
00:15:13,760 --> 00:15:15,920
provider okay

354
00:15:15,920 --> 00:15:17,360
as a result

355
00:15:17,360 --> 00:15:19,680
the attacker may modify the value of

356
00:15:19,680 --> 00:15:22,560
user id in his device to skew the

357
00:15:22,560 --> 00:15:24,480
victim's account

358
00:15:24,480 --> 00:15:26,959
although the cashiers usually set the

359
00:15:26,959 --> 00:15:29,600
user id to be private

360
00:15:29,600 --> 00:15:32,000
the attacker can use the leaked payment

361
00:15:32,000 --> 00:15:34,000
credential

362
00:15:34,000 --> 00:15:37,120
to launch the implementation attack

363
00:15:37,120 --> 00:15:41,120
and get the user ids of all paying users

364
00:15:41,120 --> 00:15:44,399
from the related transaction records

365
00:15:44,399 --> 00:15:47,519
consequently the attacker can hijack the

366
00:15:47,519 --> 00:15:50,320
original accounts of

367
00:15:50,320 --> 00:15:51,839
victim users

368
00:15:51,839 --> 00:15:55,279
in the merchant apps besides we find

369
00:15:55,279 --> 00:15:58,240
that some developers reduce the values

370
00:15:58,240 --> 00:16:00,320
of their payment keys

371
00:16:00,320 --> 00:16:03,839
to be the single cell secret

372
00:16:03,839 --> 00:16:06,399
which amplifies the

373
00:16:06,399 --> 00:16:09,440
impact of payment credential leaks to

374
00:16:09,440 --> 00:16:10,959
single cell

375
00:16:10,959 --> 00:16:12,880
according to our test

376
00:16:12,880 --> 00:16:15,759
two percent of the payment keys also

377
00:16:15,759 --> 00:16:20,079
work as the single cell secret

378
00:16:21,040 --> 00:16:24,079
the first type of exploit is so-called

379
00:16:24,079 --> 00:16:26,560
cross-app notification forgery

380
00:16:26,560 --> 00:16:29,360
which enables the attacker to cheat

381
00:16:29,360 --> 00:16:32,160
other innocent merchant apps that do not

382
00:16:32,160 --> 00:16:34,480
leak their credentials

383
00:16:34,480 --> 00:16:37,360
as i mentioned above the cushions public

384
00:16:37,360 --> 00:16:40,079
key tends to be shared across

385
00:16:40,079 --> 00:16:43,519
the merchant app in the case

386
00:16:43,519 --> 00:16:46,079
of digital signature

387
00:16:46,079 --> 00:16:48,560
thus the attacker may

388
00:16:48,560 --> 00:16:51,040
treat the casual server as the signing

389
00:16:51,040 --> 00:16:54,800
oracle and pro and control the value of

390
00:16:54,800 --> 00:16:58,399
notify uio in his crafted payment

391
00:16:58,399 --> 00:16:59,759
order

392
00:16:59,759 --> 00:17:02,240
to forge some cryptocurrency

393
00:17:02,240 --> 00:17:05,039
correct payment notifications

394
00:17:05,039 --> 00:17:07,839
then he may send these foreign messages

395
00:17:07,839 --> 00:17:11,198
to the vector merchants

396
00:17:13,199 --> 00:17:14,640
once

397
00:17:14,640 --> 00:17:17,280
the merchant server overlooks the app

398
00:17:17,280 --> 00:17:19,439
identifier inside

399
00:17:19,439 --> 00:17:22,079
such as the parameter merchant in the

400
00:17:22,079 --> 00:17:23,839
given example

401
00:17:23,839 --> 00:17:26,319
it will be cheated and enable the

402
00:17:26,319 --> 00:17:30,319
attacker to shop for free

403
00:17:30,799 --> 00:17:34,080
then i will present our automatic tool

404
00:17:34,080 --> 00:17:36,960
to discover the payment credentials

405
00:17:36,960 --> 00:17:39,600
leaked in the world as well as the

406
00:17:39,600 --> 00:17:42,400
empirical testing results

407
00:17:42,400 --> 00:17:45,679
in short we develop a tool called pk

408
00:17:45,679 --> 00:17:48,799
miner to enable the large-scale mining

409
00:17:48,799 --> 00:17:52,240
for payment credentials leaked in the

410
00:17:52,240 --> 00:17:54,480
public get repositories

411
00:17:54,480 --> 00:17:57,760
android apks and merchant servers

412
00:17:57,760 --> 00:18:00,799
the tool is made up of three modules

413
00:18:00,799 --> 00:18:02,559
namely crawler

414
00:18:02,559 --> 00:18:05,200
scanner and detector and i will go

415
00:18:05,200 --> 00:18:07,200
through them one by one in the following

416
00:18:07,200 --> 00:18:09,360
slides

417
00:18:09,360 --> 00:18:12,000
so the crawler will first identify the

418
00:18:12,000 --> 00:18:14,559
payment rated get repositories

419
00:18:14,559 --> 00:18:16,480
with the help

420
00:18:16,480 --> 00:18:19,600
of get hub search api and four search

421
00:18:19,600 --> 00:18:20,799
engines

422
00:18:20,799 --> 00:18:22,400
including google

423
00:18:22,400 --> 00:18:23,919
towards this end

424
00:18:23,919 --> 00:18:26,880
we summarize three types of environment

425
00:18:26,880 --> 00:18:30,240
in the integration of mobile payment

426
00:18:30,240 --> 00:18:33,280
to construct the customer specific query

427
00:18:33,280 --> 00:18:34,960
strings

428
00:18:34,960 --> 00:18:38,320
search environment can be either data

429
00:18:38,320 --> 00:18:40,400
code or file name

430
00:18:40,400 --> 00:18:43,120
for example the public key of caution 3

431
00:18:43,120 --> 00:18:45,679
is global and assured

432
00:18:45,679 --> 00:18:47,679
among its merchant apps

433
00:18:47,679 --> 00:18:50,240
so we constructed the segment of its

434
00:18:50,240 --> 00:18:51,360
public

435
00:18:51,360 --> 00:18:55,559
as one of our currency

436
00:18:56,400 --> 00:19:00,080
as to the android apps we collect apks

437
00:19:00,080 --> 00:19:02,160
in various versions

438
00:19:02,160 --> 00:19:04,480
from third-party app market

439
00:19:04,480 --> 00:19:07,120
to set up a full single database

440
00:19:07,120 --> 00:19:09,440
because some leaked credentials may only

441
00:19:09,440 --> 00:19:12,160
exist in old versions

442
00:19:12,160 --> 00:19:14,799
the tool will then process these apks to

443
00:19:14,799 --> 00:19:15,840
check

444
00:19:15,840 --> 00:19:18,480
whether they use the third party payment

445
00:19:18,480 --> 00:19:19,600
function

446
00:19:19,600 --> 00:19:23,200
here our tool relies on two heuristics

447
00:19:23,200 --> 00:19:26,160
first the merchant app must use

448
00:19:26,160 --> 00:19:28,080
official

449
00:19:28,080 --> 00:19:32,080
front and sdk to send the payment order

450
00:19:32,080 --> 00:19:33,520
in step four

451
00:19:33,520 --> 00:19:36,160
also the cashier always requires

452
00:19:36,160 --> 00:19:38,640
merchants to register graduates from

453
00:19:38,640 --> 00:19:40,400
certain activities

454
00:19:40,400 --> 00:19:41,640
in

455
00:19:41,640 --> 00:19:43,360
androidmanifest.xml

456
00:19:43,360 --> 00:19:46,559
xml2 received a single synchronous

457
00:19:46,559 --> 00:19:47,919
modification

458
00:19:47,919 --> 00:19:50,799
in step 7.

459
00:19:51,200 --> 00:19:53,200
the table below shows the screening

460
00:19:53,200 --> 00:19:54,240
result

461
00:19:54,240 --> 00:19:55,600
where overall

462
00:19:55,600 --> 00:19:56,960
1 million

463
00:19:56,960 --> 00:20:02,000
apks have been tested by our pk miner

464
00:20:02,000 --> 00:20:04,799
among the four studied cultures pressure

465
00:20:04,799 --> 00:20:08,240
2 as the most popular and used by almost

466
00:20:08,240 --> 00:20:12,320
one fifth of the test app

467
00:20:12,559 --> 00:20:16,799
the second module in pk miner is called

468
00:20:16,799 --> 00:20:19,760
scanner which recognized all potential

469
00:20:19,760 --> 00:20:22,320
payment credentials from the crawler

470
00:20:22,320 --> 00:20:24,159
output

471
00:20:24,159 --> 00:20:27,919
to a given get repository or android apk

472
00:20:27,919 --> 00:20:30,320
the tool will perform whiteboard

473
00:20:30,320 --> 00:20:31,760
scanning

474
00:20:31,760 --> 00:20:33,600
because we can check

475
00:20:33,600 --> 00:20:35,600
their code directly

476
00:20:35,600 --> 00:20:38,880
to be specific the tool will trace back

477
00:20:38,880 --> 00:20:41,520
the history first because some leaks

478
00:20:41,520 --> 00:20:43,039
only occur

479
00:20:43,039 --> 00:20:44,799
in old versions

480
00:20:44,799 --> 00:20:47,520
then our tool can get the potential

481
00:20:47,520 --> 00:20:49,200
payment credentials

482
00:20:49,200 --> 00:20:52,640
use either text-based patentmention

483
00:20:52,640 --> 00:20:55,120
for payment keys or file format

484
00:20:55,120 --> 00:20:59,600
filtering for other credential files

485
00:21:00,960 --> 00:21:03,919
the scanner also performed the black box

486
00:21:03,919 --> 00:21:06,960
scanning on the merchant server here

487
00:21:06,960 --> 00:21:09,440
according to our study

488
00:21:09,440 --> 00:21:12,400
many merchant apps hardcoded the values

489
00:21:12,400 --> 00:21:14,640
of their notify urls

490
00:21:14,640 --> 00:21:17,280
thus our tool can extract

491
00:21:17,280 --> 00:21:20,080
them out from their apks

492
00:21:20,080 --> 00:21:22,159
then our tool

493
00:21:22,159 --> 00:21:24,960
or the scanner can construct and pop the

494
00:21:24,960 --> 00:21:26,559
urls and

495
00:21:26,559 --> 00:21:29,200
points that may point

496
00:21:29,200 --> 00:21:32,640
to the credential files that exposed

497
00:21:32,640 --> 00:21:35,600
in the merchant servers

498
00:21:36,240 --> 00:21:40,080
finally the detector module validates

499
00:21:40,080 --> 00:21:42,720
the potential payment credentials

500
00:21:42,720 --> 00:21:45,039
as the scanner only performs pattern

501
00:21:45,039 --> 00:21:47,520
matching on payment keys

502
00:21:47,520 --> 00:21:50,640
and overlocks other contacts information

503
00:21:50,640 --> 00:21:53,360
some output from the scanner at force

504
00:21:53,360 --> 00:21:55,360
positive or noise

505
00:21:55,360 --> 00:21:58,480
which is caused by some stored data

506
00:21:58,480 --> 00:22:00,640
such as system blocks

507
00:22:00,640 --> 00:22:03,200
because some developers may backup their

508
00:22:03,200 --> 00:22:06,400
home server code on github

509
00:22:06,400 --> 00:22:07,360
source

510
00:22:07,360 --> 00:22:10,840
a machine learning based classifier

511
00:22:10,840 --> 00:22:13,919
to distinguish

512
00:22:13,919 --> 00:22:16,640
configuration files from stored files

513
00:22:16,640 --> 00:22:19,280
to speed up the validation and our test

514
00:22:19,280 --> 00:22:21,440
key

515
00:22:21,600 --> 00:22:24,400
also some payment keys are generated by

516
00:22:24,400 --> 00:22:26,080
the cashier

517
00:22:26,080 --> 00:22:26,570
and

518
00:22:26,570 --> 00:22:27,679
[Music]

519
00:22:27,679 --> 00:22:30,480
this case may have pop similar channel

520
00:22:30,480 --> 00:22:31,520
entropy

521
00:22:31,520 --> 00:22:34,559
so that we use an entropy filter to

522
00:22:34,559 --> 00:22:37,120
remove the false positives

523
00:22:37,120 --> 00:22:40,320
on the other hand the credential files

524
00:22:40,320 --> 00:22:42,640
such as client certificates

525
00:22:42,640 --> 00:22:46,400
king capture 2 and android signing keys

526
00:22:46,400 --> 00:22:48,880
are password protected

527
00:22:48,880 --> 00:22:51,039
and we use different strategies to

528
00:22:51,039 --> 00:22:53,919
correct them locally for example the

529
00:22:53,919 --> 00:22:57,679
suggested password for pfx certificates

530
00:22:57,679 --> 00:23:01,039
in cash 3 is a six digit

531
00:23:01,039 --> 00:23:02,000
so that

532
00:23:02,000 --> 00:23:04,559
we use john refer to brute force them

533
00:23:04,559 --> 00:23:05,919
offline

534
00:23:05,919 --> 00:23:08,370
while the success rate is over 99

535
00:23:08,370 --> 00:23:09,600
[Music]

536
00:23:09,600 --> 00:23:12,559
in contrast the password for the android

537
00:23:12,559 --> 00:23:15,600
signing key is user defined without any

538
00:23:15,600 --> 00:23:17,120
guideline

539
00:23:17,120 --> 00:23:18,880
so that

540
00:23:18,880 --> 00:23:20,720
the detector will go back to the

541
00:23:20,720 --> 00:23:23,760
original get repository and try to

542
00:23:23,760 --> 00:23:26,720
unlock the site android signing key file

543
00:23:26,720 --> 00:23:28,480
with all the strings

544
00:23:28,480 --> 00:23:30,480
string values inside

545
00:23:30,480 --> 00:23:33,280
such an approach gives a success rate of

546
00:23:33,280 --> 00:23:35,440
over 60 percent

547
00:23:35,440 --> 00:23:38,480
meanwhile the activeness of a given and

548
00:23:38,480 --> 00:23:41,360
returning key can be checked by the

549
00:23:41,360 --> 00:23:43,840
detector here

550
00:23:43,840 --> 00:23:45,279
to be specific

551
00:23:45,279 --> 00:23:48,000
the tool will try to find the android

552
00:23:48,000 --> 00:23:49,840
package name from the original get

553
00:23:49,840 --> 00:23:51,279
repository

554
00:23:51,279 --> 00:23:54,480
download the associated apk and compare

555
00:23:54,480 --> 00:23:57,679
the hash values to complete the check

556
00:23:57,679 --> 00:24:01,760
in short we have detected over 400

557
00:24:01,760 --> 00:24:05,840
active android sign keys so far

558
00:24:06,080 --> 00:24:07,440
finally

559
00:24:07,440 --> 00:24:09,200
we use an

560
00:24:09,200 --> 00:24:12,000
online approach to validate the refined

561
00:24:12,000 --> 00:24:13,919
payment credentials

562
00:24:13,919 --> 00:24:16,400
the detector will use the suspected

563
00:24:16,400 --> 00:24:19,039
payment credentials to prepare a male

564
00:24:19,039 --> 00:24:21,600
formed order query request to the

565
00:24:21,600 --> 00:24:22,720
cashier

566
00:24:22,720 --> 00:24:25,279
which will definitely trigger some error

567
00:24:25,279 --> 00:24:26,640
code

568
00:24:26,640 --> 00:24:27,840
for example

569
00:24:27,840 --> 00:24:30,720
illegal site in the example means that

570
00:24:30,720 --> 00:24:33,440
the payment key is not correct

571
00:24:33,440 --> 00:24:36,320
while chart not accessed indicates that

572
00:24:36,320 --> 00:24:38,080
the key is valid

573
00:24:38,080 --> 00:24:40,320
based on the difference in the returned

574
00:24:40,320 --> 00:24:43,279
error code from the cash server

575
00:24:43,279 --> 00:24:45,679
pk miner can then validate the payment

576
00:24:45,679 --> 00:24:46,960
credentials

577
00:24:46,960 --> 00:24:49,360
to avoid affecting the normal protection

578
00:24:49,360 --> 00:24:52,400
of the cashier we can show the interval

579
00:24:52,400 --> 00:24:55,440
between two requests to two seconds

580
00:24:55,440 --> 00:24:58,799
overall it takes pk minor around 300

581
00:24:58,799 --> 00:25:02,879
seconds to test each input

582
00:25:04,080 --> 00:25:07,600
then comes the test results in summary

583
00:25:07,600 --> 00:25:12,000
about 20 000 unique payment credentials

584
00:25:12,000 --> 00:25:13,679
have been detected

585
00:25:13,679 --> 00:25:15,200
from

586
00:25:15,200 --> 00:25:18,080
these three leaking sources including

587
00:25:18,080 --> 00:25:21,600
public get repositories android apk

588
00:25:21,600 --> 00:25:24,000
and merchant servers

589
00:25:24,000 --> 00:25:26,400
in these four studied cultures

590
00:25:26,400 --> 00:25:28,880
in terms of leaking sources

591
00:25:28,880 --> 00:25:31,360
most payment credentials

592
00:25:31,360 --> 00:25:34,240
are detected from public github and

593
00:25:34,240 --> 00:25:35,919
android pk

594
00:25:35,919 --> 00:25:38,240
on the other hand most credential leaks

595
00:25:38,240 --> 00:25:41,440
happen in cashier 2 which is consistent

596
00:25:41,440 --> 00:25:44,400
with its widespread integration

597
00:25:44,400 --> 00:25:47,440
in mobile apps

598
00:25:49,760 --> 00:25:52,799
now let's discuss the results from three

599
00:25:52,799 --> 00:25:56,640
leaking sources one by one here

600
00:25:56,640 --> 00:25:59,760
in terms of the public gate repositories

601
00:25:59,760 --> 00:26:04,640
we have tested around 140 000 input

602
00:26:04,640 --> 00:26:06,480
from various sources

603
00:26:06,480 --> 00:26:09,440
well 10.3 percent of the

604
00:26:09,440 --> 00:26:11,679
leak at least one valid payment

605
00:26:11,679 --> 00:26:12,960
credential

606
00:26:12,960 --> 00:26:16,159
meanwhile seven point eight percent of

607
00:26:16,159 --> 00:26:19,200
the payment credentials only exist in

608
00:26:19,200 --> 00:26:21,039
all the get commits

609
00:26:21,039 --> 00:26:24,159
that indicate that some developers have

610
00:26:24,159 --> 00:26:26,080
noticed a leak issue

611
00:26:26,080 --> 00:26:29,039
but fixed wrongly by pushing new get

612
00:26:29,039 --> 00:26:31,760
commits instead of updating their

613
00:26:31,760 --> 00:26:33,919
payment credentials

614
00:26:33,919 --> 00:26:37,520
on average it takes 51 days for the

615
00:26:37,520 --> 00:26:41,760
developers to take such wrong fixings

616
00:26:41,760 --> 00:26:42,880
besides

617
00:26:42,880 --> 00:26:44,400
among the results

618
00:26:44,400 --> 00:26:45,480
we find

619
00:26:45,480 --> 00:26:49,279
712 payment credentials

620
00:26:49,279 --> 00:26:52,400
data related to ios apps

621
00:26:52,400 --> 00:26:54,880
another interesting finding is that

622
00:26:54,880 --> 00:26:56,000
most

623
00:26:56,000 --> 00:26:58,720
of the public get repositories belong to

624
00:26:58,720 --> 00:27:00,960
some outsourcing companies

625
00:27:00,960 --> 00:27:03,360
these companies are only responsible for

626
00:27:03,360 --> 00:27:06,640
development but not maintenance so that

627
00:27:06,640 --> 00:27:08,640
they may not care much about the

628
00:27:08,640 --> 00:27:11,600
security issue

629
00:27:11,760 --> 00:27:14,799
in the case of android apks

630
00:27:14,799 --> 00:27:17,840
around 5000 payment keys are detected

631
00:27:17,840 --> 00:27:22,559
from over 7000 apks besides three apps

632
00:27:22,559 --> 00:27:25,120
embed the client certificates in cashier

633
00:27:25,120 --> 00:27:25,919
2

634
00:27:25,919 --> 00:27:27,840
where these merchant apps use these

635
00:27:27,840 --> 00:27:30,080
certificates to request

636
00:27:30,080 --> 00:27:32,000
the cashier server

637
00:27:32,000 --> 00:27:34,720
for some management interfaces

638
00:27:34,720 --> 00:27:37,440
such as refunding

639
00:27:37,440 --> 00:27:38,600
also

640
00:27:38,600 --> 00:27:43,919
31.9 percent of the keys only exist

641
00:27:43,919 --> 00:27:45,520
in older versions

642
00:27:45,520 --> 00:27:47,520
there are two other interesting findings

643
00:27:47,520 --> 00:27:49,919
when we studied the result from android

644
00:27:49,919 --> 00:27:51,039
apk

645
00:27:51,039 --> 00:27:53,840
first we studied the leaking locations

646
00:27:53,840 --> 00:27:56,010
of these payment credentials and

647
00:27:56,010 --> 00:27:57,360
[Music]

648
00:27:57,360 --> 00:28:00,880
find that around 2000 keys are from the

649
00:28:00,880 --> 00:28:03,760
same location or android activity

650
00:28:03,760 --> 00:28:05,279
this activity

651
00:28:05,279 --> 00:28:07,760
actually belongs to the official front

652
00:28:07,760 --> 00:28:10,880
and demo project provided by one certain

653
00:28:10,880 --> 00:28:13,039
customer

654
00:28:13,039 --> 00:28:15,279
although these cache claims that the

655
00:28:15,279 --> 00:28:18,240
project is only for demo use and gives a

656
00:28:18,240 --> 00:28:20,960
strong warning about the leak issue in

657
00:28:20,960 --> 00:28:22,080
this level

658
00:28:22,080 --> 00:28:24,559
many merchant apps still reuse that for

659
00:28:24,559 --> 00:28:27,440
their own base payment service

660
00:28:27,440 --> 00:28:29,679
meanwhile we find when certain payments

661
00:28:29,679 --> 00:28:32,159
keep appearing in hundreds of merchant

662
00:28:32,159 --> 00:28:33,200
apps

663
00:28:33,200 --> 00:28:35,919
which actually belongs to a payment

664
00:28:35,919 --> 00:28:37,200
aggregator

665
00:28:37,200 --> 00:28:39,760
the so-called payment aggregator

666
00:28:39,760 --> 00:28:42,320
works as the proxy between the real

667
00:28:42,320 --> 00:28:45,840
merchant server and the cache server

668
00:28:45,840 --> 00:28:46,880
however

669
00:28:46,880 --> 00:28:49,580
this payment aggregator leaks at key

670
00:28:49,580 --> 00:28:51,360
[Music]

671
00:28:51,360 --> 00:28:54,799
in the front end sdk and affects all the

672
00:28:54,799 --> 00:28:57,760
related merchant app

673
00:28:57,760 --> 00:29:00,399
now let's turn to the results from

674
00:29:00,399 --> 00:29:02,320
merchant servers

675
00:29:02,320 --> 00:29:04,000
our tool have

676
00:29:04,000 --> 00:29:05,840
recovered around

677
00:29:05,840 --> 00:29:09,919
885 urls or merchant servers

678
00:29:09,919 --> 00:29:10,799
from

679
00:29:10,799 --> 00:29:13,440
android apks the other

680
00:29:13,440 --> 00:29:16,720
apps do not embed their notified url

681
00:29:16,720 --> 00:29:19,520
while as value is still visible in

682
00:29:19,520 --> 00:29:21,200
runtime

683
00:29:21,200 --> 00:29:24,320
notably seven percent of these tested

684
00:29:24,320 --> 00:29:25,520
servers

685
00:29:25,520 --> 00:29:26,880
are valiable

686
00:29:26,880 --> 00:29:29,440
meaning that they use the flawed

687
00:29:29,440 --> 00:29:33,360
backhand sdk provided by the caches and

688
00:29:33,360 --> 00:29:36,240
do not forbid access to their credential

689
00:29:36,240 --> 00:29:38,080
files

690
00:29:38,080 --> 00:29:41,200
as the backhand sdks are the same for

691
00:29:41,200 --> 00:29:44,159
either android or ios apps

692
00:29:44,159 --> 00:29:47,600
the ios apps can make the same mistake

693
00:29:47,600 --> 00:29:50,880
and we have found such cases manually

694
00:29:50,880 --> 00:29:55,720
in the collected github repositories

695
00:29:56,000 --> 00:29:58,159
we have reported our findings to the

696
00:29:58,159 --> 00:30:00,720
related caches besides

697
00:30:00,720 --> 00:30:03,679
after our initial testing we send two

698
00:30:03,679 --> 00:30:06,880
caches over 3000 leaked keys

699
00:30:06,880 --> 00:30:09,200
according to the cashiers they would

700
00:30:09,200 --> 00:30:12,480
allot and urge the related merchants to

701
00:30:12,480 --> 00:30:14,559
change their payment keys

702
00:30:14,559 --> 00:30:17,760
meanwhile we conduct regular monitoring

703
00:30:17,760 --> 00:30:20,799
on the related github repositories to

704
00:30:20,799 --> 00:30:23,440
study the responses from these leaking

705
00:30:23,440 --> 00:30:24,640
merchants

706
00:30:24,640 --> 00:30:27,600
to sum up there are five types of

707
00:30:27,600 --> 00:30:29,200
responses

708
00:30:29,200 --> 00:30:30,720
by the merchants

709
00:30:30,720 --> 00:30:33,440
first some merchants choose to update

710
00:30:33,440 --> 00:30:35,039
their payment key

711
00:30:35,039 --> 00:30:37,360
which has the correct fixing

712
00:30:37,360 --> 00:30:40,559
however some merchants choose to hide or

713
00:30:40,559 --> 00:30:43,600
remove their github repositories while

714
00:30:43,600 --> 00:30:46,159
the other merchants tend to remove

715
00:30:46,159 --> 00:30:49,760
the related get commits or push nuget

716
00:30:49,760 --> 00:30:51,200
commits instead

717
00:30:51,200 --> 00:30:53,600
on the other hand many leaking merchants

718
00:30:53,600 --> 00:30:56,399
have not made any responses

719
00:30:56,399 --> 00:30:57,600
so far

720
00:30:57,600 --> 00:31:00,399
the table below shows the situation

721
00:31:00,399 --> 00:31:03,919
when we retested this when we retested

722
00:31:03,919 --> 00:31:06,080
these leaking repositories

723
00:31:06,080 --> 00:31:09,600
12 months after our first report

724
00:31:09,600 --> 00:31:12,159
unfortunately as we can see

725
00:31:12,159 --> 00:31:13,919
only 16

726
00:31:13,919 --> 00:31:16,320
of the reported key

727
00:31:16,320 --> 00:31:19,120
had been updated by that time

728
00:31:19,120 --> 00:31:20,799
while the others

729
00:31:20,799 --> 00:31:23,360
were still ready

730
00:31:23,360 --> 00:31:25,840
now i will talk about how to find the

731
00:31:25,840 --> 00:31:28,080
leaking merchant apps that are related

732
00:31:28,080 --> 00:31:32,480
to the detected payment credentials

733
00:31:32,480 --> 00:31:34,640
some credentials are called from the

734
00:31:34,640 --> 00:31:36,720
server code in github

735
00:31:36,720 --> 00:31:39,919
repositories so that we cannot find the

736
00:31:39,919 --> 00:31:42,400
associated merchant apps directly

737
00:31:42,400 --> 00:31:44,000
[Music]

738
00:31:44,000 --> 00:31:45,919
thus we developed a foreign three

739
00:31:45,919 --> 00:31:48,080
approach for this target

740
00:31:48,080 --> 00:31:51,120
first some payment credentials also work

741
00:31:51,120 --> 00:31:54,080
for websites so that we can craft the

742
00:31:54,080 --> 00:31:56,880
corresponding payment request and send

743
00:31:56,880 --> 00:31:58,960
it to the control server

744
00:31:58,960 --> 00:32:01,279
since the site of the app information

745
00:32:01,279 --> 00:32:04,000
will just appear in the response from

746
00:32:04,000 --> 00:32:06,640
the customer server we automate this

747
00:32:06,640 --> 00:32:10,360
approach and have identified around

748
00:32:10,360 --> 00:32:13,039
1500 apps

749
00:32:13,039 --> 00:32:14,799
on the other hand the client

750
00:32:14,799 --> 00:32:17,600
certificates are usually leaked along

751
00:32:17,600 --> 00:32:21,360
with the related payment keys in cash 2.

752
00:32:21,360 --> 00:32:24,000
besides the appeal information is

753
00:32:24,000 --> 00:32:27,519
available after we unlocked the client

754
00:32:27,519 --> 00:32:29,039
certificate

755
00:32:29,039 --> 00:32:31,600
we automate this approach and have

756
00:32:31,600 --> 00:32:34,559
identified around 3000 leaking merchant

757
00:32:34,559 --> 00:32:35,760
apps

758
00:32:35,760 --> 00:32:39,120
the last approach is to hook the casual

759
00:32:39,120 --> 00:32:40,240
app

760
00:32:40,240 --> 00:32:43,039
we find when certain cache app will

761
00:32:43,039 --> 00:32:45,360
extract the information of merchant app

762
00:32:45,360 --> 00:32:48,399
from a server in each payment

763
00:32:48,399 --> 00:32:51,279
as a result we can hook such a function

764
00:32:51,279 --> 00:32:54,240
in the cache app to get the identity of

765
00:32:54,240 --> 00:32:56,640
the leaking matching app

766
00:32:56,640 --> 00:32:59,919
we have completed the proof of concept

767
00:32:59,919 --> 00:33:02,799
for this approach but have not automated

768
00:33:02,799 --> 00:33:05,519
it so far

769
00:33:05,600 --> 00:33:08,000
finally i will give some suggestions in

770
00:33:08,000 --> 00:33:10,799
fixing the payment credential leaks

771
00:33:10,799 --> 00:33:13,279
to conclude this talk

772
00:33:13,279 --> 00:33:15,760
first the cushion should warn their

773
00:33:15,760 --> 00:33:18,399
merchants about the serious consequences

774
00:33:18,399 --> 00:33:20,640
of payment credential leaks

775
00:33:20,640 --> 00:33:23,279
next the cashiers should timely fix

776
00:33:23,279 --> 00:33:26,000
their insecure implementations such as

777
00:33:26,000 --> 00:33:29,279
the flawed backhand sdks and misleading

778
00:33:29,279 --> 00:33:31,519
front-end demo project

779
00:33:31,519 --> 00:33:32,480
also

780
00:33:32,480 --> 00:33:34,559
the caches should

781
00:33:34,559 --> 00:33:37,200
contact proactive scanning on the leaked

782
00:33:37,200 --> 00:33:40,559
credentials and the revoke the meantime

783
00:33:40,559 --> 00:33:42,399
well to the merchants they should

784
00:33:42,399 --> 00:33:46,000
periodically update their credentials

785
00:33:46,000 --> 00:33:49,279
which may be leaked in some unknown but

786
00:33:49,279 --> 00:33:53,159
public places

787
00:33:55,039 --> 00:33:57,760
we have released a white paper where you

788
00:33:57,760 --> 00:33:59,919
may find more details

789
00:33:59,919 --> 00:34:01,120
and that's

790
00:34:01,120 --> 00:34:04,000
that at the end of my presentation thank

791
00:34:04,000 --> 00:34:07,000
you

