1
00:00:01,130 --> 00:00:14,690
[Music]

2
00:00:16,160 --> 00:00:19,680
hello everyone i am vishwa from tinchung

3
00:00:19,680 --> 00:00:22,400
security lab of ant group

4
00:00:22,400 --> 00:00:25,519
what i will share is some of my research

5
00:00:25,519 --> 00:00:29,039
results on apple neural engine as

6
00:00:29,039 --> 00:00:31,279
mentioned in the subtitle

7
00:00:31,279 --> 00:00:34,239
we will look for security issues in the

8
00:00:34,239 --> 00:00:37,360
entire process from machine learning

9
00:00:37,360 --> 00:00:38,800
algorithm

10
00:00:38,800 --> 00:00:42,839
to hardware registers

11
00:00:44,399 --> 00:00:47,760
my share contains four main contents the

12
00:00:47,760 --> 00:00:50,800
first part explains my motivation for

13
00:00:50,800 --> 00:00:53,320
doing this research including the

14
00:00:53,320 --> 00:00:56,879
implementation of face id and the use of

15
00:00:56,879 --> 00:00:59,840
secure neural engine in secure enclave

16
00:00:59,840 --> 00:01:01,920
processor

17
00:01:01,920 --> 00:01:04,080
the second part contains all the

18
00:01:04,080 --> 00:01:06,080
components involved

19
00:01:06,080 --> 00:01:08,400
in the process of converting machine

20
00:01:08,400 --> 00:01:10,400
learning algorithms

21
00:01:10,400 --> 00:01:13,280
into register operations

22
00:01:13,280 --> 00:01:16,640
from the perspective of security i

23
00:01:16,640 --> 00:01:19,119
divided it according to different

24
00:01:19,119 --> 00:01:22,560
privileged spaces

25
00:01:22,560 --> 00:01:25,360
the third part introduces the a amee

26
00:01:25,360 --> 00:01:29,520
compiler and the disassembler i wrote

27
00:01:29,520 --> 00:01:32,560
the disassembler can pass files

28
00:01:32,560 --> 00:01:35,200
loaded by the kernel

29
00:01:35,200 --> 00:01:37,920
the fourth part introduces

30
00:01:37,920 --> 00:01:42,399
the attack surface and the fog methods

31
00:01:42,399 --> 00:01:47,680
some bugs have been recognized by apple

32
00:01:52,560 --> 00:01:55,040
first of all i should introduce the

33
00:01:55,040 --> 00:01:58,640
implementation architecture of face id i

34
00:01:58,640 --> 00:02:01,759
use some frames and arrows to indicate

35
00:02:01,759 --> 00:02:04,640
the different privileged spaces and the

36
00:02:04,640 --> 00:02:06,880
interaction methods

37
00:02:06,880 --> 00:02:10,160
taking phase unlocking as an example

38
00:02:10,160 --> 00:02:12,560
some demons were notified

39
00:02:12,560 --> 00:02:16,879
the process of biometric hd by xpc

40
00:02:16,879 --> 00:02:19,360
biometric entity caused the driver in

41
00:02:19,360 --> 00:02:22,400
the kernel by io kit

42
00:02:22,400 --> 00:02:26,400
the kernel driver calls the co-processor

43
00:02:26,400 --> 00:02:30,280
scp by iop and the scp app

44
00:02:30,280 --> 00:02:34,640
sprl will process some camera cores and

45
00:02:34,640 --> 00:02:37,760
other actions and finally hand it over

46
00:02:37,760 --> 00:02:38,440
to

47
00:02:38,440 --> 00:02:41,280
scp-8 app

48
00:02:41,280 --> 00:02:46,560
sm the esip appl to perform real neural

49
00:02:46,560 --> 00:02:49,040
engine calculations

50
00:02:49,040 --> 00:02:52,160
since scp's firmware and the boot chain

51
00:02:52,160 --> 00:02:55,280
have a strict encryption verification

52
00:02:55,280 --> 00:02:56,879
mechanism

53
00:02:56,879 --> 00:03:00,000
we have not known what happened inside

54
00:03:00,000 --> 00:03:00,959
for a

55
00:03:00,959 --> 00:03:05,080
long time in the past

56
00:03:09,840 --> 00:03:11,920
i should thank some

57
00:03:11,920 --> 00:03:14,640
researchers on the internet

58
00:03:14,640 --> 00:03:17,280
since i don't know the correct

59
00:03:17,280 --> 00:03:18,720
pronunciation

60
00:03:18,720 --> 00:03:20,319
of their names

61
00:03:20,319 --> 00:03:21,519
i want to

62
00:03:21,519 --> 00:03:24,159
pronounce their names here

63
00:03:24,159 --> 00:03:26,400
you can follow their twitter

64
00:03:26,400 --> 00:03:29,360
they will really share a lot of useful

65
00:03:29,360 --> 00:03:31,200
information

66
00:03:31,200 --> 00:03:34,159
i just use the key they shared to

67
00:03:34,159 --> 00:03:37,360
decrypt the scp firmware

68
00:03:37,360 --> 00:03:42,159
and use their scp tool to unpack

69
00:03:42,159 --> 00:03:47,399
this allowed my work to start

70
00:03:50,400 --> 00:03:53,519
after the operating system starts face

71
00:03:53,519 --> 00:03:56,280
id will load a file named dc and

72
00:03:56,280 --> 00:03:59,599
kernel.bin from the file system

73
00:03:59,599 --> 00:04:02,560
this fire may be the trend weight of the

74
00:04:02,560 --> 00:04:03,599
neural

75
00:04:03,599 --> 00:04:04,799
network

76
00:04:04,799 --> 00:04:09,040
but it has been encrypted by aes

77
00:04:09,040 --> 00:04:12,400
and the iv and key used for decryption

78
00:04:12,400 --> 00:04:15,599
are hardcoded in the scp firmware

79
00:04:15,599 --> 00:04:19,040
and the scp will check the sha 384

80
00:04:19,040 --> 00:04:21,120
digester of the file

81
00:04:21,120 --> 00:04:24,400
which is also hard coded in the code

82
00:04:24,400 --> 00:04:25,600
this means

83
00:04:25,600 --> 00:04:28,320
that the sap firmware version and the

84
00:04:28,320 --> 00:04:31,360
system version need to be basically the

85
00:04:31,360 --> 00:04:32,320
same

86
00:04:32,320 --> 00:04:34,160
otherwise

87
00:04:34,160 --> 00:04:37,680
face id may not be available

88
00:04:37,680 --> 00:04:40,800
this also explains the reason why fsids

89
00:04:40,800 --> 00:04:43,440
are unavailable if the system is

90
00:04:43,440 --> 00:04:48,560
downgraded while scp is not

91
00:04:52,639 --> 00:04:56,000
this id directly manipulates the

92
00:04:56,000 --> 00:04:58,880
hardware registers to realize the

93
00:04:58,880 --> 00:05:01,440
calculation process of the neural

94
00:05:01,440 --> 00:05:02,960
network

95
00:05:02,960 --> 00:05:05,919
the core stack in the slide

96
00:05:05,919 --> 00:05:08,880
simply choose the calling relationship

97
00:05:08,880 --> 00:05:12,800
between classes during the calculation

98
00:05:12,800 --> 00:05:15,039
these classes will

99
00:05:15,039 --> 00:05:18,000
extract information from static hard

100
00:05:18,000 --> 00:05:19,600
coded data

101
00:05:19,600 --> 00:05:22,080
calculate the register

102
00:05:22,080 --> 00:05:24,479
address and the value that needs to be

103
00:05:24,479 --> 00:05:27,520
written and then call the function to

104
00:05:27,520 --> 00:05:29,840
write

105
00:05:34,320 --> 00:05:38,080
essentially face id implements an

106
00:05:38,080 --> 00:05:42,000
interpreter like program in sdp

107
00:05:42,000 --> 00:05:43,440
which converts

108
00:05:43,440 --> 00:05:46,400
three different setting information into

109
00:05:46,400 --> 00:05:48,000
latest

110
00:05:48,000 --> 00:05:51,280
addresses and values that need to be

111
00:05:51,280 --> 00:05:54,720
written to these addresses

112
00:05:54,720 --> 00:05:56,560
the problem is

113
00:05:56,560 --> 00:05:57,520
that

114
00:05:57,520 --> 00:06:00,639
we don't know the meaning of these

115
00:06:00,639 --> 00:06:04,080
register addresses and the values

116
00:06:04,080 --> 00:06:07,120
after the register is written

117
00:06:07,120 --> 00:06:10,880
we also don't know what operations have

118
00:06:10,880 --> 00:06:13,840
been performed

119
00:06:17,680 --> 00:06:21,120
in order to clarify the meaning of these

120
00:06:21,120 --> 00:06:24,080
register addresses and values i

121
00:06:24,080 --> 00:06:26,560
simulated the code of passing

122
00:06:26,560 --> 00:06:30,240
configuration on the local computer

123
00:06:30,240 --> 00:06:33,440
but after printing out all the registers

124
00:06:33,440 --> 00:06:36,639
addresses and values i can only

125
00:06:36,639 --> 00:06:39,680
interpret the meaning of some addresses

126
00:06:39,680 --> 00:06:42,560
and values at this level

127
00:06:42,560 --> 00:06:46,160
it is difficult to interpret the neural

128
00:06:46,160 --> 00:06:49,199
network structure of face id and the

129
00:06:49,199 --> 00:06:53,120
location of the weighted parameters

130
00:06:53,120 --> 00:06:56,479
at the present what i think of is to

131
00:06:56,479 --> 00:06:59,919
find the comparison table of

132
00:06:59,919 --> 00:07:05,120
algorithm and the register by other ways

133
00:07:09,199 --> 00:07:12,720
apple has opened the anee 2 app for use

134
00:07:12,720 --> 00:07:14,720
on machines above

135
00:07:14,720 --> 00:07:18,160
a12 although apple's white paper says

136
00:07:18,160 --> 00:07:21,520
that application processor neural engine

137
00:07:21,520 --> 00:07:24,080
and the secure neural engine have a

138
00:07:24,080 --> 00:07:26,720
headwear level isolation

139
00:07:26,720 --> 00:07:29,520
there should be similarities in their

140
00:07:29,520 --> 00:07:31,919
use of registers

141
00:07:31,919 --> 00:07:35,120
similarly i use some frames and arrows

142
00:07:35,120 --> 00:07:38,400
to indicate different privileged spaces

143
00:07:38,400 --> 00:07:41,360
and interaction methods

144
00:07:41,360 --> 00:07:44,800
unlike a secure neural engine app can

145
00:07:44,800 --> 00:07:47,680
directly access several kernel driver

146
00:07:47,680 --> 00:07:49,440
interfaces

147
00:07:49,440 --> 00:07:53,120
the compilation of amee will be a

148
00:07:53,120 --> 00:07:54,400
separate

149
00:07:54,400 --> 00:07:56,840
and isolated

150
00:07:56,840 --> 00:08:00,800
process and the ae firmware is not

151
00:08:00,800 --> 00:08:03,520
encrypted

152
00:08:08,960 --> 00:08:11,680
i use boxes to represent the data and

153
00:08:11,680 --> 00:08:13,919
the circles to represent the processing

154
00:08:13,919 --> 00:08:15,280
to describe

155
00:08:15,280 --> 00:08:17,360
how the algorithms

156
00:08:17,360 --> 00:08:20,960
is the process assessed into register

157
00:08:20,960 --> 00:08:22,160
operations

158
00:08:22,160 --> 00:08:24,639
there are many trend neural networks on

159
00:08:24,639 --> 00:08:27,680
the internet but they rely on different

160
00:08:27,680 --> 00:08:30,160
machine learning frameworks

161
00:08:30,160 --> 00:08:32,080
apple provides

162
00:08:32,080 --> 00:08:35,440
chrome ml tools to convert them into a

163
00:08:35,440 --> 00:08:38,799
unified ml model format

164
00:08:38,799 --> 00:08:43,440
core ml compiler will compile the ml

165
00:08:43,440 --> 00:08:47,040
model files into some files and store

166
00:08:47,040 --> 00:08:50,399
them in a specific folder with a suffix

167
00:08:50,399 --> 00:08:51,440
of

168
00:08:51,440 --> 00:08:52,839
ml model

169
00:08:52,839 --> 00:08:57,760
c some files under the ml model c folder

170
00:08:57,760 --> 00:09:00,640
will be provided to the espresso

171
00:09:00,640 --> 00:09:02,240
pre-compiler

172
00:09:02,240 --> 00:09:03,360
for the

173
00:09:03,360 --> 00:09:06,800
processing to generate another batch of

174
00:09:06,800 --> 00:09:07,839
files

175
00:09:07,839 --> 00:09:10,240
including the net daughter police the

176
00:09:10,240 --> 00:09:11,760
fire

177
00:09:11,760 --> 00:09:15,360
the ae compiler will compile the net dot

178
00:09:15,360 --> 00:09:17,920
plist and other files

179
00:09:17,920 --> 00:09:23,640
to model dot hwx file

180
00:09:24,480 --> 00:09:25,800
the

181
00:09:25,800 --> 00:09:29,040
model.hwx file will be loaded by the

182
00:09:29,040 --> 00:09:32,320
kernel driver the kernel driver will

183
00:09:32,320 --> 00:09:35,519
pass the file to extract the

184
00:09:35,519 --> 00:09:39,040
register operation information and pass

185
00:09:39,040 --> 00:09:42,640
it to the ae code processor

186
00:09:42,640 --> 00:09:46,320
finally the ae core processor operates

187
00:09:46,320 --> 00:09:48,240
the register

188
00:09:48,240 --> 00:09:51,360
to perform the actual neural network

189
00:09:51,360 --> 00:09:53,040
operations

190
00:09:53,040 --> 00:09:56,560
we can feel that this process is long

191
00:09:56,560 --> 00:09:58,800
and complicated

192
00:09:58,800 --> 00:10:03,959
and there may be bugs in it

193
00:10:07,120 --> 00:10:10,240
in order to facilitate the study of

194
00:10:10,240 --> 00:10:12,079
security risks

195
00:10:12,079 --> 00:10:15,360
i divide the different processes into

196
00:10:15,360 --> 00:10:19,200
different privileged spaces because we

197
00:10:19,200 --> 00:10:21,839
are more concerned with the issue of

198
00:10:21,839 --> 00:10:24,320
privileged escalation

199
00:10:24,320 --> 00:10:27,760
in the research of security issues

200
00:10:27,760 --> 00:10:30,240
these processes may

201
00:10:30,240 --> 00:10:33,839
provide such opportunities

202
00:10:33,839 --> 00:10:38,000
chrome ml tools generally runs on in the

203
00:10:38,000 --> 00:10:40,640
developer's host computer

204
00:10:40,640 --> 00:10:43,920
and it converts the pre-trained data of

205
00:10:43,920 --> 00:10:46,800
the of other machine learning

206
00:10:46,800 --> 00:10:51,600
frameworks into unified ml model format

207
00:10:51,600 --> 00:10:54,560
this process requires

208
00:10:54,560 --> 00:10:58,240
core ml tools to pass files in various

209
00:10:58,240 --> 00:11:02,560
formats and these files may be obtained

210
00:11:02,560 --> 00:11:05,519
from untrusted sources

211
00:11:05,519 --> 00:11:08,720
such as public pre-trained model fire in

212
00:11:08,720 --> 00:11:11,519
the internet

213
00:11:11,760 --> 00:11:14,560
the core ml compiler process can be

214
00:11:14,560 --> 00:11:18,320
performed in the developer's computer

215
00:11:18,320 --> 00:11:21,040
or in the app

216
00:11:21,040 --> 00:11:23,839
when running the app the core ml

217
00:11:23,839 --> 00:11:25,680
compiler

218
00:11:25,680 --> 00:11:28,399
has the same process permissions as the

219
00:11:28,399 --> 00:11:29,600
app

220
00:11:29,600 --> 00:11:30,959
and the app

221
00:11:30,959 --> 00:11:34,800
may also load ml bottle files

222
00:11:34,800 --> 00:11:38,560
from untrusted sources

223
00:11:38,560 --> 00:11:39,880
the enee

224
00:11:39,880 --> 00:11:42,160
pre-compilation and the complete

225
00:11:42,160 --> 00:11:44,240
compilation process

226
00:11:44,240 --> 00:11:47,440
takes place in a demon called any

227
00:11:47,440 --> 00:11:49,440
compiler service

228
00:11:49,440 --> 00:11:52,720
and the files to be compiled

229
00:11:52,720 --> 00:11:56,000
come directly from the app

230
00:11:56,000 --> 00:11:59,680
for the aoe compiler service process

231
00:11:59,680 --> 00:12:03,040
the files provided by the app are also

232
00:12:03,040 --> 00:12:04,560
on trust

233
00:12:04,560 --> 00:12:06,720
so apple also

234
00:12:06,720 --> 00:12:10,639
restricts the permissions of the ne

235
00:12:10,639 --> 00:12:14,320
compiler service process

236
00:12:17,360 --> 00:12:20,639
the ene kernel driver runs in the kernel

237
00:12:20,639 --> 00:12:23,279
space the same as the first three

238
00:12:23,279 --> 00:12:24,720
processes

239
00:12:24,720 --> 00:12:27,440
they're all running the application

240
00:12:27,440 --> 00:12:29,040
processor

241
00:12:29,040 --> 00:12:32,399
the enge firmware runs in a

242
00:12:32,399 --> 00:12:33,600
separate

243
00:12:33,600 --> 00:12:37,000
code processor

244
00:12:41,360 --> 00:12:43,760
in order to convert other machine

245
00:12:43,760 --> 00:12:46,959
learning frameworks into unified ml

246
00:12:46,959 --> 00:12:50,720
model file apple has developed a model

247
00:12:50,720 --> 00:12:52,240
intermediate

248
00:12:52,240 --> 00:12:53,519
language

249
00:12:53,519 --> 00:12:57,200
this intermediate language supports 100

250
00:12:57,200 --> 00:13:00,880
and dozens of meta algorithms

251
00:13:00,880 --> 00:13:02,399
and

252
00:13:02,399 --> 00:13:05,120
all algorithms in other machine learning

253
00:13:05,120 --> 00:13:07,279
frameworks must

254
00:13:07,279 --> 00:13:11,120
be composed of meta algorithms

255
00:13:11,120 --> 00:13:14,000
you can directly use these meta

256
00:13:14,000 --> 00:13:17,360
algorithms to construct a custom

257
00:13:17,360 --> 00:13:21,240
machine learning algorithm

258
00:13:24,800 --> 00:13:28,480
the core ml compiler not only exists on

259
00:13:28,480 --> 00:13:32,240
the host but also in apple device

260
00:13:32,240 --> 00:13:34,959
if you include a static

261
00:13:34,959 --> 00:13:38,800
ml model file when developing an app

262
00:13:38,800 --> 00:13:41,839
xcode will use its own

263
00:13:41,839 --> 00:13:45,040
chrome ml compiler to directly include

264
00:13:45,040 --> 00:13:49,760
the compiled folder into the app file

265
00:13:49,760 --> 00:13:53,040
app can also download and compile ml

266
00:13:53,040 --> 00:13:55,920
model files remotely

267
00:13:55,920 --> 00:13:59,600
the slide also shows the files contained

268
00:13:59,600 --> 00:14:01,279
in the general

269
00:14:01,279 --> 00:14:04,320
ml model c folder

270
00:14:04,320 --> 00:14:07,199
the ml modifier can also contain

271
00:14:07,199 --> 00:14:12,040
multiple machine learning models

272
00:14:16,160 --> 00:14:19,920
if this ml model fire needs to be

273
00:14:19,920 --> 00:14:22,399
executed by ne

274
00:14:22,399 --> 00:14:26,000
the app will communicate with the amed

275
00:14:26,000 --> 00:14:26,959
daemon

276
00:14:26,959 --> 00:14:29,519
and provide the file information under

277
00:14:29,519 --> 00:14:32,800
the ml model c folder

278
00:14:32,800 --> 00:14:36,959
if the file has not been compiled by the

279
00:14:36,959 --> 00:14:38,800
nae compiler

280
00:14:38,800 --> 00:14:42,959
led will invoke the ame compiler service

281
00:14:42,959 --> 00:14:46,800
process to start compiling

282
00:14:46,800 --> 00:14:49,760
before the actual compilation of

283
00:14:49,760 --> 00:14:50,880
amee

284
00:14:50,880 --> 00:14:53,680
the neural network description

285
00:14:53,680 --> 00:14:56,880
file in the ml model c folder will be

286
00:14:56,880 --> 00:15:01,199
pre-compiled into the p-list format

287
00:15:01,199 --> 00:15:04,880
a series of pre-compiled files are also

288
00:15:04,880 --> 00:15:06,480
listed

289
00:15:06,480 --> 00:15:09,959
in the slide

290
00:15:13,279 --> 00:15:16,720
after the pre-compilation is completed

291
00:15:16,720 --> 00:15:19,920
the actual compilation will proceed

292
00:15:19,920 --> 00:15:22,720
the actual compilation process is also

293
00:15:22,720 --> 00:15:26,399
in the ale compiler service process

294
00:15:26,399 --> 00:15:30,320
the code exists in the aae compiler

295
00:15:30,320 --> 00:15:31,759
module

296
00:15:31,759 --> 00:15:36,320
and uses a function as the entry point

297
00:15:36,320 --> 00:15:38,800
this function will compile neural

298
00:15:38,800 --> 00:15:41,680
network description files

299
00:15:41,680 --> 00:15:45,759
network weights and other files into

300
00:15:45,759 --> 00:15:47,120
model

301
00:15:47,120 --> 00:15:54,040
dot hwx file containing register writing

302
00:15:57,040 --> 00:16:00,160
the anee compiler has many internal

303
00:16:00,160 --> 00:16:03,839
compilation options i have extracted the

304
00:16:03,839 --> 00:16:06,639
options from the module and put them in

305
00:16:06,639 --> 00:16:09,360
the compilation tool i wrote

306
00:16:09,360 --> 00:16:10,880
and you can

307
00:16:10,880 --> 00:16:14,160
refer to them if necessary

308
00:16:14,160 --> 00:16:17,199
it should be noted that in addition to

309
00:16:17,199 --> 00:16:21,120
the input and output path parameters at

310
00:16:21,120 --> 00:16:24,079
least the target architecture parameters

311
00:16:24,079 --> 00:16:28,560
are required to compile normally

312
00:16:28,639 --> 00:16:32,639
there there is also a flag called debug

313
00:16:32,639 --> 00:16:33,600
mask

314
00:16:33,600 --> 00:16:37,040
that can be set to the maximum

315
00:16:37,040 --> 00:16:39,600
value of integer

316
00:16:39,600 --> 00:16:42,800
and many intermediate files will be

317
00:16:42,800 --> 00:16:47,240
generated after compilation

318
00:16:50,399 --> 00:16:53,120
the enee kernel driver provides

319
00:16:53,120 --> 00:16:56,079
different clients for the app and the

320
00:16:56,079 --> 00:16:57,600
led

321
00:16:57,600 --> 00:17:02,079
the app client has only three interfaces

322
00:17:02,079 --> 00:17:04,480
open close and the program send a

323
00:17:04,480 --> 00:17:05,919
request

324
00:17:05,919 --> 00:17:09,119
the led daemon has permission

325
00:17:09,119 --> 00:17:12,240
to drive all the interfaces

326
00:17:12,240 --> 00:17:16,000
the led process is also responsible for

327
00:17:16,000 --> 00:17:18,679
passing the compiled

328
00:17:18,679 --> 00:17:22,079
model.hwx file to the kernel driver for

329
00:17:22,079 --> 00:17:23,919
passing and the loading

330
00:17:23,919 --> 00:17:28,319
and passing some handlers to the app

331
00:17:28,319 --> 00:17:31,039
the kernel driver will interact

332
00:17:31,039 --> 00:17:35,200
with the aie firmware by the enee

333
00:17:35,200 --> 00:17:38,640
commander send function

334
00:17:43,120 --> 00:17:47,039
the ene firmware runs in an independent

335
00:17:47,039 --> 00:17:50,880
code processor and the binary code can

336
00:17:50,880 --> 00:17:51,679
be

337
00:17:51,679 --> 00:17:54,160
found in the flashing package

338
00:17:54,160 --> 00:17:57,039
and it is not encrypted

339
00:17:57,039 --> 00:18:00,640
two functions are mainly introduced here

340
00:18:00,640 --> 00:18:03,600
one is a function for analyzing the

341
00:18:03,600 --> 00:18:05,840
internal data of the

342
00:18:05,840 --> 00:18:10,280
executable text segment in

343
00:18:10,280 --> 00:18:12,720
model.hwx file

344
00:18:12,720 --> 00:18:15,360
and the other is a function for neural

345
00:18:15,360 --> 00:18:17,520
network operations

346
00:18:17,520 --> 00:18:22,799
involving actual operating registers

347
00:18:23,120 --> 00:18:25,400
i will not analyze all the

348
00:18:25,400 --> 00:18:28,400
implementations of the firmware here

349
00:18:28,400 --> 00:18:33,520
because this is not the main content

350
00:18:38,080 --> 00:18:41,840
to facilitate your research on a

351
00:18:41,840 --> 00:18:45,919
i packaged the code originally executed

352
00:18:45,919 --> 00:18:49,600
in the app or demon into a command line

353
00:18:49,600 --> 00:18:50,480
tool

354
00:18:50,480 --> 00:18:54,240
the source code have all been put in

355
00:18:54,240 --> 00:18:55,600
github

356
00:18:55,600 --> 00:18:59,600
the tool core mlc dot sh is a batch

357
00:18:59,600 --> 00:19:03,039
secret that calls x codes

358
00:19:03,039 --> 00:19:04,640
chrome ml

359
00:19:04,640 --> 00:19:08,240
compiler to compile ml model files

360
00:19:08,240 --> 00:19:12,960
the tool ml model c2 ae compiler program

361
00:19:12,960 --> 00:19:16,559
can convert the files to the ml model c

362
00:19:16,559 --> 00:19:20,320
folder into acceptable files for ae

363
00:19:20,320 --> 00:19:21,919
compiler

364
00:19:21,919 --> 00:19:25,280
the tool aoe compiler caused the

365
00:19:25,280 --> 00:19:29,440
ae compiler module to compile files such

366
00:19:29,440 --> 00:19:30,480
as

367
00:19:30,480 --> 00:19:32,240
net.plist

368
00:19:32,240 --> 00:19:34,720
into

369
00:19:34,919 --> 00:19:37,840
model.hwx files

370
00:19:37,840 --> 00:19:42,400
next i will introduce ae disassembler in

371
00:19:42,400 --> 00:19:44,880
detail

372
00:19:48,960 --> 00:19:52,400
need to thank george hawks for the tiny

373
00:19:52,400 --> 00:19:54,080
grad project

374
00:19:54,080 --> 00:19:57,760
he found a function in the a e compiler

375
00:19:57,760 --> 00:19:58,880
module

376
00:19:58,880 --> 00:20:02,320
that was originally used to debug and

377
00:20:02,320 --> 00:20:06,720
print the compiled register operations

378
00:20:06,720 --> 00:20:08,559
combined with the

379
00:20:08,559 --> 00:20:12,000
analytical functions i found in the ali

380
00:20:12,000 --> 00:20:16,000
firmware i completed the final anee

381
00:20:16,000 --> 00:20:19,000
disassembler

382
00:20:23,280 --> 00:20:26,400
on the left is a part of the source code

383
00:20:26,400 --> 00:20:29,200
of my easy disassemble

384
00:20:29,200 --> 00:20:32,320
and on the right is the output of my

385
00:20:32,320 --> 00:20:35,840
tool i found the meaning of each bit in

386
00:20:35,840 --> 00:20:39,120
the aae compiler module

387
00:20:39,120 --> 00:20:40,640
by

388
00:20:40,640 --> 00:20:44,080
reverse engineering and save the results

389
00:20:44,080 --> 00:20:45,840
to my tool

390
00:20:45,840 --> 00:20:48,559
my disassembler will point out the

391
00:20:48,559 --> 00:20:51,679
register value and the corresponding bit

392
00:20:51,679 --> 00:20:53,280
in detail

393
00:20:53,280 --> 00:20:56,159
which makes it easier to guess the

394
00:20:56,159 --> 00:21:00,159
specific rule of the beat

395
00:21:00,400 --> 00:21:03,840
at the present i only implement the

396
00:21:03,840 --> 00:21:08,240
support for the ea v5 instruction set

397
00:21:08,240 --> 00:21:10,559
and it is not

398
00:21:10,559 --> 00:21:13,760
compatible with the higher version of

399
00:21:13,760 --> 00:21:16,559
any instruction set

400
00:21:16,559 --> 00:21:21,520
i hope my tools are helpful to you

401
00:21:24,559 --> 00:21:28,559
i divide the attack surface of a e into

402
00:21:28,559 --> 00:21:30,400
six types

403
00:21:30,400 --> 00:21:34,000
the attack surface of each attack is an

404
00:21:34,000 --> 00:21:37,840
elevation from one privileged space to

405
00:21:37,840 --> 00:21:40,960
another privileged space

406
00:21:40,960 --> 00:21:44,000
these attack surfaces are based on real

407
00:21:44,000 --> 00:21:44,960
facts

408
00:21:44,960 --> 00:21:48,720
not what i imagined

409
00:21:49,280 --> 00:21:52,400
the first attack surface is from remote

410
00:21:52,400 --> 00:21:57,039
to local computer or remote to app

411
00:21:57,039 --> 00:22:02,080
as i said before the ml model fire

412
00:22:02,080 --> 00:22:04,559
can be proceeded

413
00:22:04,559 --> 00:22:08,159
not only by the core ml compiler of

414
00:22:08,159 --> 00:22:11,679
xcode in developers computer

415
00:22:11,679 --> 00:22:17,200
but also by the app in the ios device

416
00:22:17,440 --> 00:22:20,640
the email model file can come from the

417
00:22:20,640 --> 00:22:23,280
internet or elsewhere

418
00:22:23,280 --> 00:22:26,720
and maybe untrust

419
00:22:26,720 --> 00:22:30,960
later i also confirmed by far that core

420
00:22:30,960 --> 00:22:35,440
ml compiler is not perfect

421
00:22:36,559 --> 00:22:39,360
the second attack surface is from the

422
00:22:39,360 --> 00:22:42,400
app to the aed demon

423
00:22:42,400 --> 00:22:45,840
app will give almost all a

424
00:22:45,840 --> 00:22:49,679
related work to any demon

425
00:22:49,679 --> 00:22:52,559
and there may be some bugs in their

426
00:22:52,559 --> 00:22:54,880
interaction

427
00:22:54,880 --> 00:22:58,240
the third attack surface is the app to

428
00:22:58,240 --> 00:23:00,000
ae compiler

429
00:23:00,000 --> 00:23:03,039
although the app does not directly

430
00:23:03,039 --> 00:23:05,200
interact with the

431
00:23:05,200 --> 00:23:07,039
aoe compiler

432
00:23:07,039 --> 00:23:10,240
the apps files will be directly

433
00:23:10,240 --> 00:23:14,480
transferred by the led daemon to the aoe

434
00:23:14,480 --> 00:23:16,559
compiler

435
00:23:16,559 --> 00:23:19,600
the aie compiler is transparent to the

436
00:23:19,600 --> 00:23:23,840
app to a certain extent

437
00:23:25,600 --> 00:23:29,200
it is very difficult to implement

438
00:23:29,200 --> 00:23:31,679
compiler code security

439
00:23:31,679 --> 00:23:35,360
for example attacks against browser

440
00:23:35,360 --> 00:23:36,480
javascript

441
00:23:36,480 --> 00:23:38,240
compilers

442
00:23:38,240 --> 00:23:41,600
can always be achieved

443
00:23:41,600 --> 00:23:44,720
taking down the permission of the ae

444
00:23:44,720 --> 00:23:47,200
compiler means that

445
00:23:47,200 --> 00:23:52,720
any ale calculation result can be tamped

446
00:23:53,360 --> 00:23:55,760
the fourth attack surface is from the

447
00:23:55,760 --> 00:23:58,880
app to the kernel driver

448
00:23:58,880 --> 00:24:02,400
this attack surface is a bit difficult

449
00:24:02,400 --> 00:24:03,279
now

450
00:24:03,279 --> 00:24:04,880
because

451
00:24:04,880 --> 00:24:06,880
the kernel driver

452
00:24:06,880 --> 00:24:08,799
now only opens

453
00:24:08,799 --> 00:24:12,000
three interfaces to the app

454
00:24:12,000 --> 00:24:16,000
however there is a vulnerability that

455
00:24:16,000 --> 00:24:19,760
edit can access all ae kernel driver

456
00:24:19,760 --> 00:24:24,799
interfaces on lower version systems

457
00:24:24,799 --> 00:24:28,240
the fifth attack surface is from the aed

458
00:24:28,240 --> 00:24:30,400
daemon to the

459
00:24:30,400 --> 00:24:32,559
kernel driver

460
00:24:32,559 --> 00:24:35,840
the attack surface requires that the

461
00:24:35,840 --> 00:24:39,039
attacker has obtained the permission of

462
00:24:39,039 --> 00:24:40,960
the aed

463
00:24:40,960 --> 00:24:42,799
the aid demand

464
00:24:42,799 --> 00:24:46,640
has access to all interfaces of the ee

465
00:24:46,640 --> 00:24:48,159
kernel driver

466
00:24:48,159 --> 00:24:49,279
this

467
00:24:49,279 --> 00:24:52,880
these interfaces are not open to app

468
00:24:52,880 --> 00:24:54,159
so

469
00:24:54,159 --> 00:24:57,520
the checks in driver may be

470
00:24:57,520 --> 00:25:00,640
not strict

471
00:25:00,640 --> 00:25:02,080
the sixth

472
00:25:02,080 --> 00:25:05,600
attack surface is about the ee

473
00:25:05,600 --> 00:25:09,360
kuno driver and the ae firmware

474
00:25:09,360 --> 00:25:12,400
there are also complex interactions

475
00:25:12,400 --> 00:25:14,559
between them

476
00:25:14,559 --> 00:25:17,679
using this attack surface requires

477
00:25:17,679 --> 00:25:20,480
that the attacker has obtained the

478
00:25:20,480 --> 00:25:22,320
kernel permissions

479
00:25:22,320 --> 00:25:26,799
or ae firmware pollutions

480
00:25:26,880 --> 00:25:29,440
i personally think that

481
00:25:29,440 --> 00:25:30,960
it is of

482
00:25:30,960 --> 00:25:35,039
little significance to the attacker

483
00:25:35,039 --> 00:25:39,919
but it is necessary to list it here

484
00:25:40,240 --> 00:25:43,440
below i will introduce a few real fun

485
00:25:43,440 --> 00:25:48,240
examples of these attack services

486
00:25:53,360 --> 00:25:56,720
for example in november last year

487
00:25:56,720 --> 00:26:00,240
brandon has added from google project

488
00:26:00,240 --> 00:26:04,080
zero discovered that an error

489
00:26:04,080 --> 00:26:08,080
in the aoe kernel drivers check of apps

490
00:26:08,080 --> 00:26:10,559
operational interfaces

491
00:26:10,559 --> 00:26:13,039
caused the app to access

492
00:26:13,039 --> 00:26:16,400
all amd driver interfaces

493
00:26:16,400 --> 00:26:19,200
the link is in the slide you can check

494
00:26:19,200 --> 00:26:23,799
the original blog by yourself

495
00:26:26,159 --> 00:26:29,279
the core ml compiler tool that comes

496
00:26:29,279 --> 00:26:33,520
with apple's xcode has a classic input

497
00:26:33,520 --> 00:26:37,360
and output command line parameters

498
00:26:37,360 --> 00:26:39,919
this tool was originally

499
00:26:39,919 --> 00:26:43,520
used to pre-compile static ml model

500
00:26:43,520 --> 00:26:44,799
files

501
00:26:44,799 --> 00:26:48,400
in the developer's computer

502
00:26:48,400 --> 00:26:51,440
the code in the tool is similar to the

503
00:26:51,440 --> 00:26:55,120
code of the core ml class used to

504
00:26:55,120 --> 00:26:58,400
dynamically load and compile ml model

505
00:26:58,400 --> 00:27:02,640
files in apple device

506
00:27:02,640 --> 00:27:05,279
you can test directly on your local

507
00:27:05,279 --> 00:27:08,000
computer instead of

508
00:27:08,000 --> 00:27:11,200
being an airport device

509
00:27:11,200 --> 00:27:14,480
i manually generated a batch of

510
00:27:14,480 --> 00:27:19,120
ml motor files as seed files for fuzzing

511
00:27:19,120 --> 00:27:23,279
and the running files in mac os

512
00:27:23,279 --> 00:27:27,039
there will be a report of crashes soon

513
00:27:27,039 --> 00:27:30,080
i successfully found the three pointer

514
00:27:30,080 --> 00:27:32,840
related classes by following

515
00:27:32,840 --> 00:27:35,679
chromebook compiler

516
00:27:35,679 --> 00:27:38,480
the mail form of the file generated by

517
00:27:38,480 --> 00:27:39,520
fun

518
00:27:39,520 --> 00:27:43,600
can also crash the app in the ios system

519
00:27:43,600 --> 00:27:46,320
in testing

520
00:27:46,640 --> 00:27:50,159
this vulnerabilities have been submitted

521
00:27:50,159 --> 00:27:53,679
to apple and wait for the repair to be

522
00:27:53,679 --> 00:27:56,480
tribulated

523
00:28:00,320 --> 00:28:02,480
when the app requests

524
00:28:02,480 --> 00:28:06,880
the led daemon to load a new model

525
00:28:06,880 --> 00:28:09,919
the led daemon will check whether the

526
00:28:09,919 --> 00:28:14,000
same model fire has been compiled

527
00:28:14,000 --> 00:28:17,120
if it has been compiled

528
00:28:17,120 --> 00:28:22,720
aed will map the compiler model dot hwx

529
00:28:22,720 --> 00:28:28,159
file to the memory by mmap system call

530
00:28:28,159 --> 00:28:32,159
and call the program create interface in

531
00:28:32,159 --> 00:28:35,440
the kernel ane driver for the kernel to

532
00:28:35,440 --> 00:28:38,559
load and pass

533
00:28:38,880 --> 00:28:43,039
i tried to randomly temper a bite of the

534
00:28:43,039 --> 00:28:46,159
file when the led daemon

535
00:28:46,159 --> 00:28:49,440
was loading the model file to check the

536
00:28:49,440 --> 00:28:53,760
kernel's ability to review the

537
00:28:53,880 --> 00:28:58,360
model.hwx file format

538
00:28:58,799 --> 00:29:01,840
this operation also triggers a kernel

539
00:29:01,840 --> 00:29:04,399
memory related crash

540
00:29:04,399 --> 00:29:08,480
the results have also been submitted to

541
00:29:08,480 --> 00:29:11,520
apple and wait for the repair to

542
00:29:11,520 --> 00:29:13,840
complete

543
00:29:20,320 --> 00:29:23,600
i predict that there will be a lot of

544
00:29:23,600 --> 00:29:26,240
bugs in the following three places in

545
00:29:26,240 --> 00:29:27,679
the future

546
00:29:27,679 --> 00:29:30,880
first in the compilation process of core

547
00:29:30,880 --> 00:29:34,960
ml compiler and the aoe compiler

548
00:29:34,960 --> 00:29:38,240
second in the passing of various file

549
00:29:38,240 --> 00:29:40,559
formats

550
00:29:40,559 --> 00:29:44,399
third in various interactions across

551
00:29:44,399 --> 00:29:48,080
privileged spaces

552
00:29:49,600 --> 00:29:52,640
thank you for listening to my sharing

553
00:29:52,640 --> 00:29:57,880
i hope my sharing is helpful to you

