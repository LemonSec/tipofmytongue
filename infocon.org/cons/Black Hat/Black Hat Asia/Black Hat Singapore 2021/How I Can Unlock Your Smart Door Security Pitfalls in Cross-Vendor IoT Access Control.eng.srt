1
00:00:01,130 --> 00:00:14,690
[Music]

2
00:00:16,320 --> 00:00:18,720
hi everyone it's a great pleasure to

3
00:00:18,720 --> 00:00:20,960
have this opportunity to share our work

4
00:00:20,960 --> 00:00:21,920
with you

5
00:00:21,920 --> 00:00:23,760
my name is bing yuan from hua jong

6
00:00:23,760 --> 00:00:26,720
university of sam's and technology today

7
00:00:26,720 --> 00:00:28,800
uh together with yenja who is from

8
00:00:28,800 --> 00:00:31,840
nankai university we will present our

9
00:00:31,840 --> 00:00:34,719
work in the iot security in which we

10
00:00:34,719 --> 00:00:37,360
found attackers can leverage the circ

11
00:00:37,360 --> 00:00:38,800
the security

12
00:00:38,800 --> 00:00:41,440
vulnerabilities in the cross-cloud iot

13
00:00:41,440 --> 00:00:44,640
access control to unlock the victim's

14
00:00:44,640 --> 00:00:47,280
smart door

15
00:00:47,600 --> 00:00:50,320
this presentation is based on our

16
00:00:50,320 --> 00:00:52,719
academic paper published at uc next

17
00:00:52,719 --> 00:00:53,920
security

18
00:00:53,920 --> 00:00:56,399
2020.

19
00:00:56,399 --> 00:00:59,120
so in the past few years smart home is

20
00:00:59,120 --> 00:01:02,320
is emerging so there are so there is a

21
00:01:02,320 --> 00:01:04,640
there are a lot of smart home vendors

22
00:01:04,640 --> 00:01:06,880
first there is the smart home device

23
00:01:06,880 --> 00:01:11,119
with a smart home device vendors that

24
00:01:11,119 --> 00:01:12,560
that manufacture

25
00:01:12,560 --> 00:01:16,720
the iot devices such as mi home tuia

26
00:01:16,720 --> 00:01:20,159
lifx august and phillips also there is

27
00:01:20,159 --> 00:01:23,119
the smart home cloud service providers

28
00:01:23,119 --> 00:01:25,040
that

29
00:01:25,040 --> 00:01:28,080
such a such pro search vendors including

30
00:01:28,080 --> 00:01:31,200
the google home amazon alexa ifttt

31
00:01:31,200 --> 00:01:33,119
smartstems

32
00:01:33,119 --> 00:01:36,240
also note that there is no necessarily a

33
00:01:36,240 --> 00:01:39,040
very strict line between these two

34
00:01:39,040 --> 00:01:40,880
types of windows

35
00:01:40,880 --> 00:01:43,680
because some of them such as tuija both

36
00:01:43,680 --> 00:01:45,200
manufacture

37
00:01:45,200 --> 00:01:48,960
manufacturers devices and also provides

38
00:01:48,960 --> 00:01:51,920
cloud services

39
00:01:51,920 --> 00:01:52,880
and

40
00:01:52,880 --> 00:01:56,000
both of these two kinds of windows what

41
00:01:56,000 --> 00:01:59,920
you uh would usually use um iot cloud to

42
00:01:59,920 --> 00:02:02,799
manage their devices uh typically the

43
00:02:02,799 --> 00:02:06,399
iot cloud would uh connect the users and

44
00:02:06,399 --> 00:02:09,280
the devices thus to uh

45
00:02:09,280 --> 00:02:12,800
to those to inform the users the status

46
00:02:12,800 --> 00:02:16,640
changes of the devices and to us

47
00:02:16,640 --> 00:02:19,760
to uh forward the commands from the

48
00:02:19,760 --> 00:02:22,560
users to the iot devices

49
00:02:22,560 --> 00:02:25,680
also the iot clouds would usually

50
00:02:25,680 --> 00:02:28,800
interact with the external services such

51
00:02:28,800 --> 00:02:30,160
as

52
00:02:30,160 --> 00:02:33,519
a third-party cloud and such

53
00:02:33,519 --> 00:02:36,400
interactions between the iot clouds and

54
00:02:36,400 --> 00:02:38,720
the third-party clouds

55
00:02:38,720 --> 00:02:41,440
is made the uh

56
00:02:41,440 --> 00:02:44,400
it is the way that the iot class to

57
00:02:44,400 --> 00:02:47,840
provide us some advanced functionalities

58
00:02:47,840 --> 00:02:49,920
for example uh

59
00:02:49,920 --> 00:02:52,959
there is the crossringer cross-cloud

60
00:02:52,959 --> 00:02:56,000
device control that is a user can use a

61
00:02:56,000 --> 00:02:58,319
single iot cloud to

62
00:02:58,319 --> 00:03:01,120
control uh devices from different

63
00:03:01,120 --> 00:03:04,640
vendors for example um a google home

64
00:03:04,640 --> 00:03:06,879
user can use google home and google home

65
00:03:06,879 --> 00:03:10,159
alone to control the two-year blog the

66
00:03:10,159 --> 00:03:11,440
leaf expo

67
00:03:11,440 --> 00:03:14,080
and the august log

68
00:03:14,080 --> 00:03:17,519
and also there is the sharing of device

69
00:03:17,519 --> 00:03:19,840
access

70
00:03:19,840 --> 00:03:22,800
this is this functionality is actually

71
00:03:22,800 --> 00:03:24,560
supported

72
00:03:24,560 --> 00:03:25,920
widely by

73
00:03:25,920 --> 00:03:26,720
the

74
00:03:26,720 --> 00:03:28,080
by by the

75
00:03:28,080 --> 00:03:30,640
by the iot vendors such as small themes

76
00:03:30,640 --> 00:03:34,080
uh me home apple home kit and the real

77
00:03:34,080 --> 00:03:36,000
world use case for this

78
00:03:36,000 --> 00:03:38,640
one of the railroad use use cases for

79
00:03:38,640 --> 00:03:40,959
the sharing of device access

80
00:03:40,959 --> 00:03:43,840
could be an airbnb host

81
00:03:43,840 --> 00:03:45,360
to

82
00:03:45,360 --> 00:03:47,680
to share the access

83
00:03:47,680 --> 00:03:50,400
to the to herlock to uh to an airbnb

84
00:03:50,400 --> 00:03:53,599
guest during the guest day and they

85
00:03:53,599 --> 00:03:58,239
revoked such access when the guests left

86
00:03:58,239 --> 00:03:59,120
and

87
00:03:59,120 --> 00:04:02,959
uh i lost there is the uh device control

88
00:04:02,959 --> 00:04:04,879
automation and

89
00:04:04,879 --> 00:04:05,760
uh

90
00:04:05,760 --> 00:04:08,080
these functionalities uh is usually

91
00:04:08,080 --> 00:04:11,360
supported by the trigger action uh

92
00:04:11,360 --> 00:04:15,040
uh iot platform such as ifttt and smart

93
00:04:15,040 --> 00:04:16,000
things

94
00:04:16,000 --> 00:04:19,120
basically the user can see

95
00:04:19,120 --> 00:04:20,720
automation rule

96
00:04:20,720 --> 00:04:22,560
which is the

97
00:04:22,560 --> 00:04:25,680
ifttt uplates or smart things in the

98
00:04:25,680 --> 00:04:26,880
smart themes

99
00:04:26,880 --> 00:04:29,360
a smart type in the smart things

100
00:04:29,360 --> 00:04:30,800
and

101
00:04:30,800 --> 00:04:32,560
one

102
00:04:32,560 --> 00:04:35,440
an example of such work could be

103
00:04:35,440 --> 00:04:38,639
to turn on the front porch light

104
00:04:38,639 --> 00:04:42,560
if the uh doorbell detects the

105
00:04:42,560 --> 00:04:46,320
new detects new motions

106
00:04:47,840 --> 00:04:49,919
behind the search

107
00:04:49,919 --> 00:04:52,320
functionalities is the

108
00:04:52,320 --> 00:04:55,520
device axis delegation mechanisms that

109
00:04:55,520 --> 00:04:59,120
is uh in in this uh supporting these

110
00:04:59,120 --> 00:05:02,240
functionalities uh it's uh it's it's

111
00:05:02,240 --> 00:05:04,320
actually the uh

112
00:05:04,320 --> 00:05:07,280
the access to the device is delegated

113
00:05:07,280 --> 00:05:10,400
from one party to another

114
00:05:10,400 --> 00:05:13,039
i know that throughout our throughout

115
00:05:13,039 --> 00:05:16,800
our this talk uh we call the uh

116
00:05:16,800 --> 00:05:19,919
the party that delegates access right to

117
00:05:19,919 --> 00:05:23,120
others the delegator and the recipient

118
00:05:23,120 --> 00:05:26,400
of the access right the dkt for example

119
00:05:26,400 --> 00:05:30,000
when the imb host dedicates

120
00:05:30,000 --> 00:05:32,000
the access to her

121
00:05:32,000 --> 00:05:33,600
smart lock to

122
00:05:33,600 --> 00:05:36,160
airbnb guest we call the host the

123
00:05:36,160 --> 00:05:38,400
delegator and the ibm big guest as a

124
00:05:38,400 --> 00:05:41,440
dedicated and when google home receives

125
00:05:41,440 --> 00:05:43,120
the uh

126
00:05:43,120 --> 00:05:46,479
the access right to the olympics above

127
00:05:46,479 --> 00:05:47,840
we call the

128
00:05:47,840 --> 00:05:49,919
defects cloud the delegator and the

129
00:05:49,919 --> 00:05:52,400
google home the dedicated

130
00:05:52,400 --> 00:05:53,199
and

131
00:05:53,199 --> 00:05:55,919
there are two uh most

132
00:05:55,919 --> 00:05:58,560
common dedication mechanisms first is

133
00:05:58,560 --> 00:06:01,440
the uh customized or

134
00:06:01,440 --> 00:06:03,280
os protocol

135
00:06:03,280 --> 00:06:06,160
for example a google home provides the

136
00:06:06,160 --> 00:06:09,199
actions on google which is actually a

137
00:06:09,199 --> 00:06:12,720
customized auth protocol um

138
00:06:12,720 --> 00:06:15,280
that is google home also asks for

139
00:06:15,280 --> 00:06:18,080
additional information from its

140
00:06:18,080 --> 00:06:19,919
foreign delegator

141
00:06:19,919 --> 00:06:23,600
during the during the oauth process for

142
00:06:23,600 --> 00:06:26,080
example google home requests small

143
00:06:26,080 --> 00:06:30,240
things to send the device id of the

144
00:06:30,240 --> 00:06:32,720
smart things devices during

145
00:06:32,720 --> 00:06:36,080
during such a delegation and the second

146
00:06:36,080 --> 00:06:38,960
is the home ground authorization for

147
00:06:38,960 --> 00:06:42,400
example the ifttt cloud

148
00:06:42,400 --> 00:06:43,759
would

149
00:06:43,759 --> 00:06:45,360
issue a

150
00:06:45,360 --> 00:06:48,319
trigger url and sync this url to the

151
00:06:48,319 --> 00:06:51,120
smart themes cloud then the smartthings

152
00:06:51,120 --> 00:06:55,919
cloud can sync http request to this url

153
00:06:55,919 --> 00:06:59,360
to trigger the actions in the uh ftd

154
00:06:59,360 --> 00:07:02,800
cloud that is to control the devices

155
00:07:02,800 --> 00:07:06,400
behind the fgtt cloud

156
00:07:06,400 --> 00:07:08,960
and with so many parties and so many

157
00:07:08,960 --> 00:07:11,599
different litigation operations there

158
00:07:11,599 --> 00:07:14,000
could form a very convoluted delegation

159
00:07:14,000 --> 00:07:17,759
chain for example a device would usually

160
00:07:17,759 --> 00:07:21,039
first be registered registered with or

161
00:07:21,039 --> 00:07:24,479
banned with the device window cloud that

162
00:07:24,479 --> 00:07:27,680
that is the device access right is

163
00:07:27,680 --> 00:07:30,720
delegated from the device to the device

164
00:07:30,720 --> 00:07:33,360
vendor cloud then the window cloud could

165
00:07:33,360 --> 00:07:36,319
further delegate the access right to a

166
00:07:36,319 --> 00:07:39,120
third party to third parties which are

167
00:07:39,120 --> 00:07:41,919
the third-party iot clouds or

168
00:07:41,919 --> 00:07:43,440
other users

169
00:07:43,440 --> 00:07:46,639
further the the third-party dedicated

170
00:07:46,639 --> 00:07:49,599
iot class and the users could further

171
00:07:49,599 --> 00:07:52,560
delegate the access right to others so

172
00:07:52,560 --> 00:07:55,199
with this process goes on and on the

173
00:07:55,199 --> 00:07:58,720
delegation chain can be very convoluted

174
00:07:58,720 --> 00:08:01,039
however despite the common and the

175
00:08:01,039 --> 00:08:03,759
convoluted iot delegation the research

176
00:08:03,759 --> 00:08:06,080
and understanding on the security of the

177
00:08:06,080 --> 00:08:08,400
cross-cloud iot delegation is far from

178
00:08:08,400 --> 00:08:09,919
enough

179
00:08:09,919 --> 00:08:13,039
we believe the risks in the cross-cloud

180
00:08:13,039 --> 00:08:17,280
altercation lies between the

181
00:08:17,360 --> 00:08:20,000
arrests because of the there is a gap

182
00:08:20,000 --> 00:08:22,080
between the theoretical models and the

183
00:08:22,080 --> 00:08:25,520
railroad iot cloud systems that is the

184
00:08:25,520 --> 00:08:28,479
the the theoretical models analysis

185
00:08:28,479 --> 00:08:31,680
before or assume that all the parties

186
00:08:31,680 --> 00:08:33,760
run the same delegation protocol and

187
00:08:33,760 --> 00:08:36,159
interact through the uh

188
00:08:36,159 --> 00:08:39,120
unified interfaces where delegation in

189
00:08:39,120 --> 00:08:41,839
today's real-world audit clause they

190
00:08:41,839 --> 00:08:44,000
usually would you use

191
00:08:44,000 --> 00:08:46,480
individual and heterogeneous delegation

192
00:08:46,480 --> 00:08:49,600
protocols and the uh the iot clause may

193
00:08:49,600 --> 00:08:52,640
be incompatible with each other and also

194
00:08:52,640 --> 00:08:54,959
the dedication chain is

195
00:08:54,959 --> 00:08:59,120
has not been properly verified

196
00:08:59,120 --> 00:09:02,880
so uh to investigate to investigate such

197
00:09:02,880 --> 00:09:05,519
such security risks we define the threat

198
00:09:05,519 --> 00:09:08,720
mode as follows as follows first we

199
00:09:08,720 --> 00:09:11,600
assume that the gt user can be malicious

200
00:09:11,600 --> 00:09:14,000
where the administrator the cloud and

201
00:09:14,000 --> 00:09:16,640
the devices are believed and we assume

202
00:09:16,640 --> 00:09:17,519
the

203
00:09:17,519 --> 00:09:21,680
goal of um adversary is to get an um

204
00:09:21,680 --> 00:09:24,080
access to iot devices

205
00:09:24,080 --> 00:09:26,640
at last we suppose the adversary would

206
00:09:26,640 --> 00:09:30,080
make full use of his power to acquire

207
00:09:30,080 --> 00:09:32,880
useful information such as

208
00:09:32,880 --> 00:09:35,440
make making api calls extracting

209
00:09:35,440 --> 00:09:38,240
information from the system knock or to

210
00:09:38,240 --> 00:09:41,040
capturing and analyzing the network

211
00:09:41,040 --> 00:09:45,599
traffic generated by his mobile app

212
00:09:45,680 --> 00:09:47,920
so considering the real-world iot

213
00:09:47,920 --> 00:09:50,160
delegation scenarios and the threat

214
00:09:50,160 --> 00:09:53,279
model we summarized two basic security

215
00:09:53,279 --> 00:09:55,360
requirements for the iot

216
00:09:55,360 --> 00:09:56,720
delegation

217
00:09:56,720 --> 00:09:57,839
first

218
00:09:57,839 --> 00:10:00,160
introduced iot cloud a party on a

219
00:10:00,160 --> 00:10:02,560
delegation chain could get involved in

220
00:10:02,560 --> 00:10:05,040
another party's management of the drugs

221
00:10:05,040 --> 00:10:09,360
therefore one party's policy could bring

222
00:10:09,360 --> 00:10:11,760
could bring a risk that would put

223
00:10:11,760 --> 00:10:14,399
another party's security

224
00:10:14,399 --> 00:10:17,200
in jeopardy so ideally delegation

225
00:10:17,200 --> 00:10:20,320
policies across all actors on uh

226
00:10:20,320 --> 00:10:22,880
our chain shall be consistent with each

227
00:10:22,880 --> 00:10:25,279
with each party's individual circular

228
00:10:25,279 --> 00:10:26,480
policies

229
00:10:26,480 --> 00:10:29,760
thus to ensure that they will not be

230
00:10:29,760 --> 00:10:32,240
exposed to new threads during the whole

231
00:10:32,240 --> 00:10:34,320
process

232
00:10:34,320 --> 00:10:35,519
second

233
00:10:35,519 --> 00:10:37,040
on the

234
00:10:37,040 --> 00:10:39,760
delegation chain access right to an iot

235
00:10:39,760 --> 00:10:40,870
cloud

236
00:10:40,870 --> 00:10:42,000
[Music]

237
00:10:42,000 --> 00:10:44,320
the the access right to an iot device

238
00:10:44,320 --> 00:10:46,959
could be distributed among

239
00:10:46,959 --> 00:10:49,279
among multiple parties therefore

240
00:10:49,279 --> 00:10:51,839
enforcement of a delegated policy should

241
00:10:51,839 --> 00:10:53,600
be comprehensive

242
00:10:53,600 --> 00:10:54,399
to

243
00:10:54,399 --> 00:10:57,120
block to block all the avenues of

244
00:10:57,120 --> 00:10:58,800
authorized access

245
00:10:58,800 --> 00:11:01,760
and also important is the is the

246
00:11:01,760 --> 00:11:04,160
transitivity in the delegation control

247
00:11:04,160 --> 00:11:07,600
that is uh once um upstream actor

248
00:11:07,600 --> 00:11:10,720
enforces a policy all the uh downstream

249
00:11:10,720 --> 00:11:13,360
parties should should follow suit for

250
00:11:13,360 --> 00:11:14,560
example

251
00:11:14,560 --> 00:11:17,360
in the delegation chain from a to b to c

252
00:11:17,360 --> 00:11:20,160
to d if a um

253
00:11:20,160 --> 00:11:23,760
enforce uh enforces a policy that

254
00:11:23,760 --> 00:11:27,519
that a revokes the access right to b

255
00:11:27,519 --> 00:11:30,640
then ideally not only b but

256
00:11:30,640 --> 00:11:33,680
also c and d they should all news access

257
00:11:33,680 --> 00:11:37,120
right to uh to to a

258
00:11:37,120 --> 00:11:39,279
however we found that

259
00:11:39,279 --> 00:11:42,160
such requirements are often violated by

260
00:11:42,160 --> 00:11:45,120
today's real-world iot class for example

261
00:11:45,120 --> 00:11:47,600
let's consider the the following uh

262
00:11:47,600 --> 00:11:49,839
scenario where the

263
00:11:49,839 --> 00:11:53,200
two-year plot owner first defines the

264
00:11:53,200 --> 00:11:55,120
the plot with his

265
00:11:55,120 --> 00:11:56,480
twitter account

266
00:11:56,480 --> 00:11:57,279
and

267
00:11:57,279 --> 00:12:01,040
then uh the the owner shares the

268
00:12:01,040 --> 00:12:04,240
the access to the blog to a a new user

269
00:12:04,240 --> 00:12:08,320
such as an irb guest then the the guest

270
00:12:08,320 --> 00:12:10,560
would uh could uh

271
00:12:10,560 --> 00:12:13,440
delegate the the access right to the

272
00:12:13,440 --> 00:12:16,800
block to his uh to uh the gist google

273
00:12:16,800 --> 00:12:19,680
home account and during which uh the

274
00:12:19,680 --> 00:12:22,560
trial club would issue an auth talk and

275
00:12:22,560 --> 00:12:24,880
sing the token to the google home

276
00:12:24,880 --> 00:12:26,000
and

277
00:12:26,000 --> 00:12:27,839
then the

278
00:12:27,839 --> 00:12:31,839
device owner revokes the guest's

279
00:12:31,839 --> 00:12:34,880
access right at this point the the guest

280
00:12:34,880 --> 00:12:38,480
would lose the access right in the tuia

281
00:12:38,480 --> 00:12:41,519
in a two-yard system however

282
00:12:41,519 --> 00:12:44,399
the we found that the the keys google

283
00:12:44,399 --> 00:12:47,279
home account can still access the can

284
00:12:47,279 --> 00:12:49,760
still access and control the trial block

285
00:12:49,760 --> 00:12:51,680
this is because the google home cloud

286
00:12:51,680 --> 00:12:55,920
still holds um uh univariate os token

287
00:12:55,920 --> 00:12:58,560
this clearly avoids the

288
00:12:58,560 --> 00:13:01,360
transitivity in the delegation control

289
00:13:01,360 --> 00:13:02,720
and

290
00:13:02,720 --> 00:13:04,639
leveraging this

291
00:13:04,639 --> 00:13:08,160
uh vulnerability for attack is really

292
00:13:08,160 --> 00:13:11,360
rather simple the attack just leads to

293
00:13:11,360 --> 00:13:14,480
correct create a google home account and

294
00:13:14,480 --> 00:13:15,839
delegate the

295
00:13:15,839 --> 00:13:18,880
access right to his google home account

296
00:13:18,880 --> 00:13:22,000
during his uh stay at the

297
00:13:22,000 --> 00:13:23,360
host's

298
00:13:23,360 --> 00:13:26,560
house and uh just by doing that the

299
00:13:26,560 --> 00:13:29,760
attacker can make his uh can turn his

300
00:13:29,760 --> 00:13:33,440
temporary access to the plug to uh into

301
00:13:33,440 --> 00:13:34,320
a

302
00:13:34,320 --> 00:13:37,680
permanent access right and uh he can do

303
00:13:37,680 --> 00:13:40,000
that without the

304
00:13:40,000 --> 00:13:42,639
without being notified by the by the

305
00:13:42,639 --> 00:13:46,160
clock by the block owner

306
00:13:46,160 --> 00:13:49,199
so now let's take a closer look at the

307
00:13:49,199 --> 00:13:52,160
uh two year case uh we can see we can

308
00:13:52,160 --> 00:13:54,639
see a a few things first of all there

309
00:13:54,639 --> 00:13:57,199
are there is uh there are multiple

310
00:13:57,199 --> 00:13:59,440
dedicated uh delegation operations

311
00:13:59,440 --> 00:14:02,959
supported in these iot city there is a

312
00:14:02,959 --> 00:14:06,800
bind there is a share and there is oauth

313
00:14:06,800 --> 00:14:07,680
and

314
00:14:07,680 --> 00:14:08,560
uh

315
00:14:08,560 --> 00:14:11,760
the second thing is that there is always

316
00:14:11,760 --> 00:14:14,720
a data flow along with the operat with

317
00:14:14,720 --> 00:14:17,120
the delegation operations for example

318
00:14:17,120 --> 00:14:19,120
when uh when

319
00:14:19,120 --> 00:14:22,800
uh along with the os operation there is

320
00:14:22,800 --> 00:14:25,519
a data flow from two-year cloud to the

321
00:14:25,519 --> 00:14:30,240
google home which is the uh the the the

322
00:14:30,240 --> 00:14:33,120
the sending of the auth token

323
00:14:33,120 --> 00:14:36,800
um also at last uh we note

324
00:14:36,800 --> 00:14:38,800
we noticed that the

325
00:14:38,800 --> 00:14:42,000
access to a device is usually uh of

326
00:14:42,000 --> 00:14:44,560
multiple steps for example google home

327
00:14:44,560 --> 00:14:47,600
what uh accessed the two-year block

328
00:14:47,600 --> 00:14:51,040
through the uh the two-year cloud

329
00:14:51,040 --> 00:14:51,760
and

330
00:14:51,760 --> 00:14:55,279
uh interesting we found the same uh

331
00:14:55,279 --> 00:14:59,680
patterns uh in the in other iot settings

332
00:14:59,680 --> 00:15:02,480
uh for example in the uh in the in the

333
00:15:02,480 --> 00:15:05,199
scenario where the uh refix cloud

334
00:15:05,199 --> 00:15:08,160
interact with the smart themes cloud and

335
00:15:08,160 --> 00:15:10,480
also in the uh

336
00:15:10,480 --> 00:15:12,800
in the use case where the feed

337
00:15:12,800 --> 00:15:15,040
where the philips hue cloud interacts

338
00:15:15,040 --> 00:15:19,120
with uh with users and third-party cloud

339
00:15:19,120 --> 00:15:20,880
clouds

340
00:15:20,880 --> 00:15:24,240
uh so with the uh common delegation part

341
00:15:24,240 --> 00:15:27,199
i d identified in the different rd

342
00:15:27,199 --> 00:15:31,279
settings we start to think uh is it

343
00:15:31,279 --> 00:15:34,880
is it possible or how can we uh to

344
00:15:34,880 --> 00:15:37,199
discover vulnerabilities in the iot

345
00:15:37,199 --> 00:15:41,199
delegation in a more automatic way so

346
00:15:41,199 --> 00:15:43,839
we came up with the formal verification

347
00:15:43,839 --> 00:15:45,600
method and

348
00:15:45,600 --> 00:15:48,399
we have developed a two of these

349
00:15:48,399 --> 00:15:49,920
first let's

350
00:15:49,920 --> 00:15:51,759
let's look at the formal verification

351
00:15:51,759 --> 00:15:53,920
part to use the formal verification

352
00:15:53,920 --> 00:15:56,079
method we first need to define the

353
00:15:56,079 --> 00:16:00,320
circuit the circuit property which is uh

354
00:16:00,320 --> 00:16:02,079
that the uh

355
00:16:02,079 --> 00:16:04,959
um authorized ddkt user should not have

356
00:16:04,959 --> 00:16:07,759
a pass to the iot cloud to to the iot

357
00:16:07,759 --> 00:16:11,279
devices which is not entitled to access

358
00:16:11,279 --> 00:16:14,240
and then we modeled the iot delegation

359
00:16:14,240 --> 00:16:17,680
as a transition system where a is is a

360
00:16:17,680 --> 00:16:20,639
set of actors including the devices the

361
00:16:20,639 --> 00:16:23,920
cloud and the users and o is a set of

362
00:16:23,920 --> 00:16:27,360
operations which describes the operation

363
00:16:27,360 --> 00:16:30,079
type and the the data flow along with

364
00:16:30,079 --> 00:16:33,120
the operation then we define a search of

365
00:16:33,120 --> 00:16:35,680
the states where the initial where the

366
00:16:35,680 --> 00:16:38,000
initial states is the state that there

367
00:16:38,000 --> 00:16:40,959
is no delegation operation uh being

368
00:16:40,959 --> 00:16:43,199
performed and

369
00:16:43,199 --> 00:16:45,759
in each state uh the

370
00:16:45,759 --> 00:16:48,880
uh the operations would

371
00:16:48,880 --> 00:16:51,839
would driven this the system uh tran uh

372
00:16:51,839 --> 00:16:54,720
trans uh transfer from one state to the

373
00:16:54,720 --> 00:16:57,440
next and so we use the

374
00:16:57,440 --> 00:16:59,920
the transition function t to describe

375
00:16:59,920 --> 00:17:01,440
such transitions

376
00:17:01,440 --> 00:17:02,240
and

377
00:17:02,240 --> 00:17:05,280
uh in each stage we use datasets to

378
00:17:05,280 --> 00:17:07,919
record the tokens um

379
00:17:07,919 --> 00:17:11,520
first of all we we uh we use datasets to

380
00:17:11,520 --> 00:17:14,880
record to record the the tokens that

381
00:17:14,880 --> 00:17:16,480
each actor

382
00:17:16,480 --> 00:17:19,359
issues which indicates the actor

383
00:17:19,359 --> 00:17:23,199
delegate access right to others and we

384
00:17:23,199 --> 00:17:25,679
also use the datasets to record the

385
00:17:25,679 --> 00:17:28,640
tokens that each actor receives which

386
00:17:28,640 --> 00:17:31,760
indicates the actor is being delegated

387
00:17:31,760 --> 00:17:32,559
with

388
00:17:32,559 --> 00:17:33,520
the

389
00:17:33,520 --> 00:17:34,240
the

390
00:17:34,240 --> 00:17:36,880
the device access right

391
00:17:36,880 --> 00:17:37,679
so

392
00:17:37,679 --> 00:17:40,480
with the datasets recording these tokens

393
00:17:40,480 --> 00:17:42,960
we could determine whether a specific

394
00:17:42,960 --> 00:17:46,160
actor has access right to the device by

395
00:17:46,160 --> 00:17:48,320
checking whether there is a pulse from

396
00:17:48,320 --> 00:17:50,720
the actor to the device therefore we

397
00:17:50,720 --> 00:17:53,840
could deliver it a a model checker to

398
00:17:53,840 --> 00:17:55,679
verify uh

399
00:17:55,679 --> 00:17:58,480
that uh to verify whether the predefined

400
00:17:58,480 --> 00:18:00,160
security prop

401
00:18:00,160 --> 00:18:03,039
properties hold in the module that is we

402
00:18:03,039 --> 00:18:04,559
just need to

403
00:18:04,559 --> 00:18:08,320
check that there is no pass links um an

404
00:18:08,320 --> 00:18:10,960
authorized

405
00:18:10,960 --> 00:18:14,240
user to the device

406
00:18:14,240 --> 00:18:18,000
so based on this module we developed the

407
00:18:18,000 --> 00:18:20,559
the variety which is as far as we know

408
00:18:20,559 --> 00:18:24,240
the first verification tool uh for iot

409
00:18:24,240 --> 00:18:26,799
for iot uh cross cloud delivery uh

410
00:18:26,799 --> 00:18:29,520
delegation vulnerability discovery uh

411
00:18:29,520 --> 00:18:33,120
basically uh we we defined the operation

412
00:18:33,120 --> 00:18:36,160
template templates we and we

413
00:18:36,160 --> 00:18:39,280
we defined a base model that outlines

414
00:18:39,280 --> 00:18:40,080
the

415
00:18:40,080 --> 00:18:41,679
general uh

416
00:18:41,679 --> 00:18:44,480
operations and the data flows in the iot

417
00:18:44,480 --> 00:18:47,919
delegation then to uh describe a

418
00:18:47,919 --> 00:18:51,840
real-world iot system the one could use

419
00:18:51,840 --> 00:18:53,600
the configuration

420
00:18:53,600 --> 00:18:57,360
file to extend the base model and

421
00:18:57,360 --> 00:18:59,039
[Music]

422
00:18:59,039 --> 00:19:01,440
with the input of the configuration file

423
00:19:01,440 --> 00:19:02,960
our tool would

424
00:19:02,960 --> 00:19:06,320
automatically generate the um

425
00:19:06,320 --> 00:19:09,760
executable model which is then input to

426
00:19:09,760 --> 00:19:13,039
the module checker spin and spin word

427
00:19:13,039 --> 00:19:16,400
output the counter examples uh

428
00:19:16,400 --> 00:19:19,840
each each counter each counter uh each

429
00:19:19,840 --> 00:19:23,120
comma example represents a possible a

430
00:19:23,120 --> 00:19:26,240
weakness in the iot dedication then each

431
00:19:26,240 --> 00:19:27,840
weakness is

432
00:19:27,840 --> 00:19:28,880
checked

433
00:19:28,880 --> 00:19:32,480
manually and thus to confirm the uh

434
00:19:32,480 --> 00:19:35,679
existence of the vulnerabilities and

435
00:19:35,679 --> 00:19:41,039
to uh to to image to investigate how to

436
00:19:41,039 --> 00:19:44,320
exploit such vulnerabilities to uh for

437
00:19:44,320 --> 00:19:45,360
attacks

438
00:19:45,360 --> 00:19:48,799
and we have made variety uh publicly

439
00:19:48,799 --> 00:19:52,400
available and using a variety we have we

440
00:19:52,400 --> 00:19:54,799
have analysis the 10 mainstream iot

441
00:19:54,799 --> 00:19:57,919
class and identified six new delegation

442
00:19:57,919 --> 00:19:59,280
flows

443
00:19:59,280 --> 00:20:02,080
now i will hand it over to yem who will

444
00:20:02,080 --> 00:20:04,400
elaborate on some of the

445
00:20:04,400 --> 00:20:07,520
some of these flaws we i identified and

446
00:20:07,520 --> 00:20:10,240
uh will also summarize our talk

447
00:20:10,240 --> 00:20:12,880
please welcome here thanks

448
00:20:12,880 --> 00:20:14,880
okay uh thanks

449
00:20:14,880 --> 00:20:17,280
i'm going to start by introducing the

450
00:20:17,280 --> 00:20:19,440
two flaws of the first vulnerability

451
00:20:19,440 --> 00:20:20,799
category

452
00:20:20,799 --> 00:20:23,200
in the first category we find the

453
00:20:23,200 --> 00:20:25,760
security policies may be different in

454
00:20:25,760 --> 00:20:28,799
different vendors which causes secret

455
00:20:28,799 --> 00:20:31,360
security risks when they interact with

456
00:20:31,360 --> 00:20:32,880
each other

457
00:20:32,880 --> 00:20:35,360
the first case is about google home and

458
00:20:35,360 --> 00:20:37,039
samsung's machines

459
00:20:37,039 --> 00:20:40,640
in smart things the device id is used as

460
00:20:40,640 --> 00:20:43,039
an authentication token on trigger

461
00:20:43,039 --> 00:20:45,760
action management this means

462
00:20:45,760 --> 00:20:48,240
when a device trigger an event in

463
00:20:48,240 --> 00:20:50,960
smartthings cloud the cloud identifies

464
00:20:50,960 --> 00:20:53,760
this device by the device id

465
00:20:53,760 --> 00:20:55,360
a secret token

466
00:20:55,360 --> 00:20:58,240
however in google home the user shares

467
00:20:58,240 --> 00:21:00,640
the devices managed by google

468
00:21:00,640 --> 00:21:03,200
it shares the device id to the delegate

469
00:21:03,200 --> 00:21:06,799
user because for google home the device

470
00:21:06,799 --> 00:21:10,320
id may be used to identify devices on

471
00:21:10,320 --> 00:21:13,039
the smart things cloud and it is not a

472
00:21:13,039 --> 00:21:15,039
secret so

473
00:21:15,039 --> 00:21:18,640
if a user for example an ibm host shares

474
00:21:18,640 --> 00:21:21,520
a smartthings device to a malicious user

475
00:21:21,520 --> 00:21:24,159
through google home the malicious user

476
00:21:24,159 --> 00:21:26,320
can use the device id

477
00:21:26,320 --> 00:21:29,280
to support events to trigger smart

478
00:21:29,280 --> 00:21:31,600
things to open the lock even after

479
00:21:31,600 --> 00:21:33,120
hitchhike

480
00:21:33,120 --> 00:21:37,399
unless it's a poc demo

481
00:21:44,159 --> 00:21:46,559
in this scenario the user used the

482
00:21:46,559 --> 00:21:50,918
google home to manage his devices

483
00:22:01,440 --> 00:22:04,240
the enemy used google home to operate on

484
00:22:04,240 --> 00:22:08,799
a smart switch to control her smart lock

485
00:22:08,799 --> 00:22:11,760
now he is linking and his samsung

486
00:22:11,760 --> 00:22:13,039
account

487
00:22:13,039 --> 00:22:14,000
to the

488
00:22:14,000 --> 00:22:17,320
google account

489
00:22:26,400 --> 00:22:28,960
okay now he can control the log

490
00:22:28,960 --> 00:22:32,240
through his google home app

491
00:22:33,440 --> 00:22:35,919
then the admin delegate access to her

492
00:22:35,919 --> 00:22:37,039
switch

493
00:22:37,039 --> 00:22:39,440
to a delegate he that is the attacker

494
00:22:39,440 --> 00:22:42,240
through google home

495
00:22:50,000 --> 00:22:54,559
the delegated user gets access

496
00:22:54,559 --> 00:22:56,480
as a attacker he can

497
00:22:56,480 --> 00:22:58,559
use the packed capture to monitor the

498
00:22:58,559 --> 00:23:01,760
traffic of this app

499
00:23:04,240 --> 00:23:06,000
now the delegate

500
00:23:06,000 --> 00:23:09,840
can control this smartlock

501
00:23:15,280 --> 00:23:17,520
through the traffic the attacker can

502
00:23:17,520 --> 00:23:22,520
find the id of this smart switch

503
00:23:31,120 --> 00:23:33,840
since the enemy removes the delegate his

504
00:23:33,840 --> 00:23:37,399
access right

505
00:23:38,159 --> 00:23:39,039
so

506
00:23:39,039 --> 00:23:41,120
the attacker can't

507
00:23:41,120 --> 00:23:43,360
control this lock through his google

508
00:23:43,360 --> 00:23:46,600
home app

509
00:23:50,240 --> 00:23:53,039
okay about the attacker can leverage the

510
00:23:53,039 --> 00:23:54,880
obtained device id

511
00:23:54,880 --> 00:23:56,640
and the developer a simple malicious

512
00:23:56,640 --> 00:23:59,440
script to send a fake event to the smart

513
00:23:59,440 --> 00:24:04,200
things cloud to control this log

514
00:24:11,039 --> 00:24:11,919
okay

515
00:24:11,919 --> 00:24:14,400
as a conflicting security policies

516
00:24:14,400 --> 00:24:17,520
across iot vendors not only happen to

517
00:24:17,520 --> 00:24:19,840
google home and the smart things the

518
00:24:19,840 --> 00:24:22,480
second case is about fdt and smart

519
00:24:22,480 --> 00:24:23,440
things

520
00:24:23,440 --> 00:24:26,640
ftp use a secret url that should be

521
00:24:26,640 --> 00:24:29,200
protected for those devices triggering

522
00:24:29,200 --> 00:24:30,159
events

523
00:24:30,159 --> 00:24:31,279
so

524
00:24:31,279 --> 00:24:33,679
when the url is delegated to smart

525
00:24:33,679 --> 00:24:36,720
things a smart things should keep it as

526
00:24:36,720 --> 00:24:38,320
a secret

527
00:24:38,320 --> 00:24:41,039
meanwhile to work with other vendors

528
00:24:41,039 --> 00:24:43,520
smart things request the other renders

529
00:24:43,520 --> 00:24:44,320
like

530
00:24:44,320 --> 00:24:45,600
rtt

531
00:24:45,600 --> 00:24:48,240
developed a smart app that runs on the

532
00:24:48,240 --> 00:24:50,880
smartthings cloud to deal with the

533
00:24:50,880 --> 00:24:53,600
customized delegation process

534
00:24:53,600 --> 00:24:56,080
interestingly we found that

535
00:24:56,080 --> 00:24:59,919
ftp smart app links is a secret url that

536
00:24:59,919 --> 00:25:03,200
smartthings cloud need to be protected

537
00:25:03,200 --> 00:25:05,600
a malicious delegate user

538
00:25:05,600 --> 00:25:08,080
which is for example a guest on the

539
00:25:08,080 --> 00:25:11,440
smartthings cloud can get the host ftp

540
00:25:11,440 --> 00:25:14,720
secret url by invoking a web api

541
00:25:14,720 --> 00:25:16,880
of the smart app

542
00:25:16,880 --> 00:25:20,080
with this url an attacker can trigger

543
00:25:20,080 --> 00:25:21,200
the

544
00:25:21,200 --> 00:25:24,880
action of the asset in the ftt cloud

545
00:25:24,880 --> 00:25:27,360
after his write is revoked by the

546
00:25:27,360 --> 00:25:29,039
smartthings cloud

547
00:25:29,039 --> 00:25:33,200
unless is a video demo

548
00:25:41,200 --> 00:25:43,760
in this scenario the admin

549
00:25:43,760 --> 00:25:46,640
operates this machine switch to local

550
00:25:46,640 --> 00:25:50,480
smart log behind fdt

551
00:25:55,760 --> 00:26:00,320
this is the admins rtt rule

552
00:26:09,679 --> 00:26:11,679
the admin can show this monologue

553
00:26:11,679 --> 00:26:15,039
through the smartthings app

554
00:26:16,240 --> 00:26:19,039
since admin delegates access to her

555
00:26:19,039 --> 00:26:22,000
machine switch towards led user that is

556
00:26:22,000 --> 00:26:25,080
the attacker

557
00:26:26,880 --> 00:26:31,000
he accepts the meditation

558
00:26:38,080 --> 00:26:41,840
and then he can control the log2

559
00:26:46,880 --> 00:26:48,799
with the right

560
00:26:48,799 --> 00:26:50,840
he can guide

561
00:26:50,840 --> 00:26:54,400
the rtt is a url

562
00:26:54,400 --> 00:26:59,159
from the ftt smartpak

563
00:27:08,720 --> 00:27:11,120
later the enemy removes the delegate his

564
00:27:11,120 --> 00:27:15,840
users access rat on the smart switch

565
00:27:18,399 --> 00:27:22,879
and he lost his access to the switch

566
00:27:28,240 --> 00:27:29,840
wherever the attacker

567
00:27:29,840 --> 00:27:32,559
can use the script to post the atp

568
00:27:32,559 --> 00:27:35,520
request to the obtain the security url

569
00:27:35,520 --> 00:27:38,480
to control the log

570
00:27:47,440 --> 00:27:48,960
this is i

571
00:27:48,960 --> 00:27:52,640
noticed that is a better owner

572
00:28:00,559 --> 00:28:01,440
okay

573
00:28:01,440 --> 00:28:04,000
the second category of vulnerabilities

574
00:28:04,000 --> 00:28:06,640
we find results from the pitfalls in

575
00:28:06,640 --> 00:28:09,760
cross-vendor security policy enforcement

576
00:28:09,760 --> 00:28:11,679
in the first circuit here

577
00:28:11,679 --> 00:28:14,399
we find smart things mistakenly leads

578
00:28:14,399 --> 00:28:17,279
the delegate has token to shared people

579
00:28:17,279 --> 00:28:20,000
the smart app of olympics allows the

580
00:28:20,000 --> 00:28:22,960
owner to only share selected devices to

581
00:28:22,960 --> 00:28:25,120
smart sims location

582
00:28:25,120 --> 00:28:25,919
so

583
00:28:25,919 --> 00:28:29,120
the owner who manages his home by smart

584
00:28:29,120 --> 00:28:32,240
things can only share some

585
00:28:32,240 --> 00:28:35,120
refix bulbs to the guests and not all

586
00:28:35,120 --> 00:28:36,399
bubs

587
00:28:36,399 --> 00:28:39,120
however when the malicious dedications

588
00:28:39,120 --> 00:28:41,279
against the defects are spoken

589
00:28:41,279 --> 00:28:44,799
he can gain the ideas of lifx devices

590
00:28:44,799 --> 00:28:47,760
hidden from him and controls his hidden

591
00:28:47,760 --> 00:28:49,440
devices

592
00:28:49,440 --> 00:28:50,720
let's see

593
00:28:50,720 --> 00:28:54,279
the third video

594
00:29:03,120 --> 00:29:05,679
in this scenario the enemy uses machine

595
00:29:05,679 --> 00:29:10,279
to operate refix bulbs

596
00:29:17,360 --> 00:29:20,240
the admin delegate leave his box

597
00:29:20,240 --> 00:29:22,559
accessory to the to his machine's

598
00:29:22,559 --> 00:29:25,559
account

599
00:29:27,760 --> 00:29:29,760
now he's leaking

600
00:29:29,760 --> 00:29:32,480
the accounts

601
00:29:36,720 --> 00:29:40,159
and the admin configure

602
00:29:40,159 --> 00:29:42,240
the prefix mata app

603
00:29:42,240 --> 00:29:46,320
so as to only expose one bar

604
00:29:48,799 --> 00:29:51,520
it has two bubbles i will show in the

605
00:29:51,520 --> 00:29:53,360
screen

606
00:29:53,360 --> 00:29:57,279
he just delegates the right one

607
00:30:03,039 --> 00:30:04,880
and he shares the

608
00:30:04,880 --> 00:30:05,840
the

609
00:30:05,840 --> 00:30:10,959
bob's accessories to a delegate user

610
00:30:20,799 --> 00:30:23,120
the delegate he also can

611
00:30:23,120 --> 00:30:26,559
control the bow through his

612
00:30:26,559 --> 00:30:29,879
smart synthetic

613
00:30:37,440 --> 00:30:38,480
however

614
00:30:38,480 --> 00:30:41,120
an attacker can obtain the referees or

615
00:30:41,120 --> 00:30:43,600
token

616
00:30:44,880 --> 00:30:46,320
and

617
00:30:46,320 --> 00:30:48,559
using the our token

618
00:30:48,559 --> 00:30:49,679
the

619
00:30:49,679 --> 00:30:53,360
that is the attacker can collect his api

620
00:30:53,360 --> 00:30:55,919
to get all the ids of the

621
00:30:55,919 --> 00:30:58,559
owner's bulbs

622
00:30:58,559 --> 00:31:00,399
and with this token

623
00:31:00,399 --> 00:31:01,519
the id

624
00:31:01,519 --> 00:31:03,919
the attacker can control

625
00:31:03,919 --> 00:31:08,120
other refix buffs

626
00:31:28,720 --> 00:31:31,039
okay

627
00:31:31,519 --> 00:31:34,000
in addition to banks that how to involve

628
00:31:34,000 --> 00:31:35,679
multiple vendors

629
00:31:35,679 --> 00:31:38,799
we also find delegation pitfalls of one

630
00:31:38,799 --> 00:31:41,919
vendor which is brought by its

631
00:31:41,919 --> 00:31:44,880
cross-vendor delegation api

632
00:31:44,880 --> 00:31:48,640
phil few uh devices use a kind of token

633
00:31:48,640 --> 00:31:52,159
called uh wireless id to authenticate

634
00:31:52,159 --> 00:31:53,200
users

635
00:31:53,200 --> 00:31:55,760
when sharing a device to another user

636
00:31:55,760 --> 00:31:58,480
the cloud generates a white list id and

637
00:31:58,480 --> 00:32:00,880
are always talking for the user

638
00:32:00,880 --> 00:32:03,600
if the oauth token is legal the cloud

639
00:32:03,600 --> 00:32:06,240
would forward the user's request to the

640
00:32:06,240 --> 00:32:08,640
device along with the use of that list

641
00:32:08,640 --> 00:32:09,840
id

642
00:32:09,840 --> 00:32:10,880
however

643
00:32:10,880 --> 00:32:13,039
when the enemy follows flip fuels

644
00:32:13,039 --> 00:32:15,200
official guide to cancel against the

645
00:32:15,200 --> 00:32:16,880
access right

646
00:32:16,880 --> 00:32:19,360
a fuel code only

647
00:32:19,360 --> 00:32:21,919
invalidates the right with the id that

648
00:32:21,919 --> 00:32:24,640
is checked by the device

649
00:32:24,640 --> 00:32:26,960
a malicious dedicated user

650
00:32:26,960 --> 00:32:30,080
can abuse the delegation api took in a

651
00:32:30,080 --> 00:32:33,360
new oauth token and the writer's id

652
00:32:33,360 --> 00:32:35,519
allowing him to control the physical

653
00:32:35,519 --> 00:32:38,240
heal devices through the delegate cloud

654
00:32:38,240 --> 00:32:41,039
after the admin revoked his advice

655
00:32:41,039 --> 00:32:44,240
as shown in the future

656
00:32:46,480 --> 00:32:49,760
okay we also measured the prevalence of

657
00:32:49,760 --> 00:32:53,039
the delegation problems we found

658
00:32:53,039 --> 00:32:53,679
and

659
00:32:53,679 --> 00:32:56,880
we found that many class especially

660
00:32:56,880 --> 00:32:59,279
when they interact with each other have

661
00:32:59,279 --> 00:33:01,200
this kind of risk

662
00:33:01,200 --> 00:33:02,799
this does not mean

663
00:33:02,799 --> 00:33:05,519
other security risks can be exploited in

664
00:33:05,519 --> 00:33:07,440
the real world because

665
00:33:07,440 --> 00:33:09,519
not all delegation scenarios would

666
00:33:09,519 --> 00:33:10,720
happen

667
00:33:10,720 --> 00:33:14,000
but ci in potential risk when delegation

668
00:33:14,000 --> 00:33:16,240
happens

669
00:33:16,240 --> 00:33:17,360
meanwhile

670
00:33:17,360 --> 00:33:20,880
the impact of our cases study not only

671
00:33:20,880 --> 00:33:23,360
affects the vendors we listed mentioned

672
00:33:23,360 --> 00:33:24,559
before

673
00:33:24,559 --> 00:33:26,000
for example

674
00:33:26,000 --> 00:33:28,960
all's token disclosure problem exists in

675
00:33:28,960 --> 00:33:34,000
at least 18 smart types in smart things

676
00:33:37,679 --> 00:33:38,880
finally

677
00:33:38,880 --> 00:33:41,120
we want to highlight that

678
00:33:41,120 --> 00:33:44,240
because of the absence of a standardized

679
00:33:44,240 --> 00:33:47,279
cross code delegation protocol agreed by

680
00:33:47,279 --> 00:33:49,200
all lt vendors

681
00:33:49,200 --> 00:33:51,919
the heliogenius and adhoc delegation

682
00:33:51,919 --> 00:33:54,799
process tend to be vulnerable

683
00:33:54,799 --> 00:33:56,480
when applying a

684
00:33:56,480 --> 00:33:58,799
custom cross cloud or authorization

685
00:33:58,799 --> 00:33:59,840
scheme

686
00:33:59,840 --> 00:34:02,080
to today's already complicated iot

687
00:34:02,080 --> 00:34:06,399
delegation a developer should be careful

688
00:34:06,399 --> 00:34:07,760
in the future

689
00:34:07,760 --> 00:34:09,839
we recommend the different vendors

690
00:34:09,839 --> 00:34:12,239
communicate their security assumptions

691
00:34:12,239 --> 00:34:14,719
and verify delegation design wherever

692
00:34:14,719 --> 00:34:16,079
possible

693
00:34:16,079 --> 00:34:18,320
but in the short term

694
00:34:18,320 --> 00:34:21,760
we think uh decoupling the dedicatee and

695
00:34:21,760 --> 00:34:24,399
the dedicator would let vendors have

696
00:34:24,399 --> 00:34:27,918
fully control of the access delegation

697
00:34:27,918 --> 00:34:32,158
and avoid the risks we found

698
00:34:33,679 --> 00:34:34,639
okay

699
00:34:34,639 --> 00:34:38,280
that's all thank you

