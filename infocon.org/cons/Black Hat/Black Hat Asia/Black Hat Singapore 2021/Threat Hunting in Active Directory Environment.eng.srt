1
00:00:01,130 --> 00:00:14,690
[Music]

2
00:00:17,199 --> 00:00:19,039
hello everyone this is threat hunting in

3
00:00:19,039 --> 00:00:21,039
active directory environment thanks for

4
00:00:21,039 --> 00:00:23,119
tuning in to our session my name is

5
00:00:23,119 --> 00:00:25,199
anurag and today with my colleague thiru

6
00:00:25,199 --> 00:00:27,119
i'll be talking about active directory

7
00:00:27,119 --> 00:00:28,320
security

8
00:00:28,320 --> 00:00:30,800
we both work at mandiant and at mandate

9
00:00:30,800 --> 00:00:32,558
we work on a large number of incident

10
00:00:32,558 --> 00:00:34,160
response cases

11
00:00:34,160 --> 00:00:36,399
for both small as well as large

12
00:00:36,399 --> 00:00:38,480
organizations some of these cases

13
00:00:38,480 --> 00:00:41,120
involve financially motivated protectors

14
00:00:41,120 --> 00:00:43,520
and others nation state-backed

15
00:00:43,520 --> 00:00:45,920
in our experience through all these

16
00:00:45,920 --> 00:00:48,399
investigations and attacks one thing

17
00:00:48,399 --> 00:00:50,079
remains consistent

18
00:00:50,079 --> 00:00:52,160
majority of these attacks involve

19
00:00:52,160 --> 00:00:54,640
microsoft active directory in one way or

20
00:00:54,640 --> 00:00:56,160
the other

21
00:00:56,160 --> 00:00:58,000
while working through all these cases we

22
00:00:58,000 --> 00:01:01,280
realized that a lot of defenders do not

23
00:01:01,280 --> 00:01:03,359
understand the intricacies of an active

24
00:01:03,359 --> 00:01:05,040
directory environment

25
00:01:05,040 --> 00:01:08,000
how complex and large the attack surface

26
00:01:08,000 --> 00:01:09,119
is

27
00:01:09,119 --> 00:01:11,040
today we would like to share some of the

28
00:01:11,040 --> 00:01:12,880
attack techniques we have seen threat

29
00:01:12,880 --> 00:01:16,479
actors use to target active directory

30
00:01:16,479 --> 00:01:18,560
we'll put out some hypothesis based on

31
00:01:18,560 --> 00:01:19,920
those techniques

32
00:01:19,920 --> 00:01:22,400
and then we'll talk about how defenders

33
00:01:22,400 --> 00:01:25,360
can detect those and hunt for those ttps

34
00:01:25,360 --> 00:01:26,960
in their environment

35
00:01:26,960 --> 00:01:29,280
the bottom line is that we want

36
00:01:29,280 --> 00:01:31,680
defenders to understand the ad attack

37
00:01:31,680 --> 00:01:34,320
service better and hunt for attacker

38
00:01:34,320 --> 00:01:36,640
techniques in their environment

39
00:01:36,640 --> 00:01:39,439
as i said my name is anurag and i am a

40
00:01:39,439 --> 00:01:41,520
principal consultant with mandate sts

41
00:01:41,520 --> 00:01:43,200
based in singapore

42
00:01:43,200 --> 00:01:43,920
i

43
00:01:43,920 --> 00:01:46,880
in mandate i focus on incident response

44
00:01:46,880 --> 00:01:49,439
incident remediation active directory

45
00:01:49,439 --> 00:01:51,040
and cloud security

46
00:01:51,040 --> 00:01:52,880
i am also a sans community instructor

47
00:01:52,880 --> 00:01:54,640
for the apj region

48
00:01:54,640 --> 00:01:57,920
with me i have my colleague thiru

49
00:01:57,920 --> 00:02:00,240
hi my name is kirimlin adrajan i am a

50
00:02:00,240 --> 00:02:02,320
principal consultant in mandiant

51
00:02:02,320 --> 00:02:04,479
supporting customers to respond to major

52
00:02:04,479 --> 00:02:06,479
security breaches and assessing their

53
00:02:06,479 --> 00:02:08,959
security posture of active directory and

54
00:02:08,959 --> 00:02:10,399
cloud enrollments

55
00:02:10,399 --> 00:02:11,920
along with that i also have experience

56
00:02:11,920 --> 00:02:13,680
in building and managing security

57
00:02:13,680 --> 00:02:15,120
operation centers

58
00:02:15,120 --> 00:02:16,800
apart from that i am a hardcore football

59
00:02:16,800 --> 00:02:18,720
fan i used to play football now kind of

60
00:02:18,720 --> 00:02:20,080
retired and happily watching in

61
00:02:20,080 --> 00:02:21,360
television

62
00:02:21,360 --> 00:02:23,440
in today's talk we have a lot of hunting

63
00:02:23,440 --> 00:02:25,680
context to discuss around techniques and

64
00:02:25,680 --> 00:02:27,680
tactics observed in actual directory

65
00:02:27,680 --> 00:02:28,879
environment

66
00:02:28,879 --> 00:02:30,879
i'm going to take a pass for a while

67
00:02:30,879 --> 00:02:32,239
and i'm going to turn it back to my

68
00:02:32,239 --> 00:02:34,000
colleague anurag and he will continue

69
00:02:34,000 --> 00:02:36,879
the talk

70
00:02:36,879 --> 00:02:39,200
thanks zeru for that

71
00:02:39,200 --> 00:02:41,120
so why talk about active directory

72
00:02:41,120 --> 00:02:43,440
active directory is widely adopted and

73
00:02:43,440 --> 00:02:45,040
is the underlying

74
00:02:45,040 --> 00:02:47,120
iit fabric for a large number of

75
00:02:47,120 --> 00:02:49,040
organizations

76
00:02:49,040 --> 00:02:51,040
this makes active directory a very

77
00:02:51,040 --> 00:02:52,959
attractive lucrative target for the

78
00:02:52,959 --> 00:02:54,800
protectors

79
00:02:54,800 --> 00:02:57,440
moreover active directory is a large

80
00:02:57,440 --> 00:03:00,319
intricate and complex eye attack surface

81
00:03:00,319 --> 00:03:02,000
there are a lot of moving parts in an

82
00:03:02,000 --> 00:03:04,319
active directory environment this

83
00:03:04,319 --> 00:03:06,319
provides several opportunities for

84
00:03:06,319 --> 00:03:08,239
protectors to maintain covert

85
00:03:08,239 --> 00:03:10,720
persistence and exert control over a

86
00:03:10,720 --> 00:03:13,360
large part of the iit environment

87
00:03:13,360 --> 00:03:15,599
the bottom line is that threat actors

88
00:03:15,599 --> 00:03:17,840
are actively abusing

89
00:03:17,840 --> 00:03:19,440
active directory

90
00:03:19,440 --> 00:03:22,159
it's time defenders step up and start

91
00:03:22,159 --> 00:03:24,480
looking for attacker ttps in their ad

92
00:03:24,480 --> 00:03:25,840
environment

93
00:03:25,840 --> 00:03:27,599
the way we have structured this talk is

94
00:03:27,599 --> 00:03:29,599
talk through hypothesis

95
00:03:29,599 --> 00:03:32,159
we want to share attacker techniques

96
00:03:32,159 --> 00:03:34,480
techniques which detectors use to target

97
00:03:34,480 --> 00:03:36,400
active directory

98
00:03:36,400 --> 00:03:39,200
the purpose of doing that is to fold

99
00:03:39,200 --> 00:03:41,280
we would like to provide some sample

100
00:03:41,280 --> 00:03:44,560
hypothesis for defenders to hunt through

101
00:03:44,560 --> 00:03:48,640
their environment looking for those ttps

102
00:03:48,640 --> 00:03:50,640
second we work with a lot of

103
00:03:50,640 --> 00:03:52,879
organizations to execute what we call

104
00:03:52,879 --> 00:03:56,000
eradication or eviction events

105
00:03:56,000 --> 00:03:58,799
these events are designed to evict a

106
00:03:58,799 --> 00:04:00,799
threat actor out of the organization's

107
00:04:00,799 --> 00:04:03,439
i.t environment and regain the control

108
00:04:03,439 --> 00:04:05,519
of the iit environment

109
00:04:05,519 --> 00:04:07,599
these hunts are based on certain aspects

110
00:04:07,599 --> 00:04:09,360
which we see

111
00:04:09,360 --> 00:04:11,840
teams defense teams and eradication

112
00:04:11,840 --> 00:04:15,200
teams often miss before they perform the

113
00:04:15,200 --> 00:04:18,000
eradication events so these can be used

114
00:04:18,000 --> 00:04:20,079
by the eradication teams to review the

115
00:04:20,079 --> 00:04:21,839
environments before

116
00:04:21,839 --> 00:04:24,560
doing the eviction event

117
00:04:24,560 --> 00:04:27,520
we have identified some hypothesis

118
00:04:27,520 --> 00:04:30,560
hypothesis are a hunter's idea of what

119
00:04:30,560 --> 00:04:32,880
threats might exist in their environment

120
00:04:32,880 --> 00:04:34,320
and that decides what they should be

121
00:04:34,320 --> 00:04:36,400
looking for

122
00:04:36,400 --> 00:04:37,840
the hunts

123
00:04:37,840 --> 00:04:39,840
we are talking about today the

124
00:04:39,840 --> 00:04:42,000
techniques we are referring to today are

125
00:04:42,000 --> 00:04:44,800
actual protector tdps

126
00:04:44,800 --> 00:04:46,880
these are techniques that have been used

127
00:04:46,880 --> 00:04:51,600
by adversaries in organizations

128
00:04:51,600 --> 00:04:52,960
i'll talk through the first three

129
00:04:52,960 --> 00:04:54,880
hypotheses i'll start talking through

130
00:04:54,880 --> 00:04:57,280
delegation misuse for persistence then

131
00:04:57,280 --> 00:04:59,199
i'll talk about how attackers can abuse

132
00:04:59,199 --> 00:05:01,360
ds replication permission

133
00:05:01,360 --> 00:05:03,600
and then one of my favorite technique

134
00:05:03,600 --> 00:05:05,440
which is persistence using machine

135
00:05:05,440 --> 00:05:07,520
dollar credentials

136
00:05:07,520 --> 00:05:09,520
then i hand it over to thiru we'll talk

137
00:05:09,520 --> 00:05:12,320
through malicious group policy objects

138
00:05:12,320 --> 00:05:15,440
gpus we have seen financially motivated

139
00:05:15,440 --> 00:05:18,479
threat actors extensively abuse gpos

140
00:05:18,479 --> 00:05:20,800
during the last year

141
00:05:20,800 --> 00:05:23,440
then we'll talk about cross forest trust

142
00:05:23,440 --> 00:05:26,000
abuse using seed history and the last

143
00:05:26,000 --> 00:05:29,039
hypothesis we have is how attackers can

144
00:05:29,039 --> 00:05:31,199
perform credential harvesting by

145
00:05:31,199 --> 00:05:34,639
targeting azure ad connect servers in a

146
00:05:34,639 --> 00:05:37,680
hybrid ad environment

147
00:05:37,680 --> 00:05:39,280
hunt we talk about

148
00:05:39,280 --> 00:05:42,240
is structured in three parts

149
00:05:42,240 --> 00:05:43,840
the first part is where we put out the

150
00:05:43,840 --> 00:05:45,280
hypothesis

151
00:05:45,280 --> 00:05:47,360
the second part is where we talk through

152
00:05:47,360 --> 00:05:50,720
how attacker implements the backdoor or

153
00:05:50,720 --> 00:05:52,479
exploits the system

154
00:05:52,479 --> 00:05:54,400
and the third and the most important

155
00:05:54,400 --> 00:05:56,639
part is where we talk about how

156
00:05:56,639 --> 00:06:00,080
defenders can detect these ttps in their

157
00:06:00,080 --> 00:06:02,319
environment and can hunt for the

158
00:06:02,319 --> 00:06:04,880
attacker techniques in the environment

159
00:06:04,880 --> 00:06:07,199
so the first technique we're going to

160
00:06:07,199 --> 00:06:09,840
talk about is delegation misuse for

161
00:06:09,840 --> 00:06:12,160
persistence

162
00:06:12,160 --> 00:06:14,000
i have two hypotheses for delegation

163
00:06:14,000 --> 00:06:15,039
misuse

164
00:06:15,039 --> 00:06:16,960
but before we start talking through how

165
00:06:16,960 --> 00:06:19,280
attackers misuse delegation let's

166
00:06:19,280 --> 00:06:21,919
understand what delegation is

167
00:06:21,919 --> 00:06:23,840
kerberos delegation is a feature of

168
00:06:23,840 --> 00:06:26,319
active directory and is used extensively

169
00:06:26,319 --> 00:06:28,160
in multi-tier application service

170
00:06:28,160 --> 00:06:29,840
environments

171
00:06:29,840 --> 00:06:32,000
consider a simple environment where we

172
00:06:32,000 --> 00:06:34,319
have a user who accesses a web server

173
00:06:34,319 --> 00:06:36,560
and web server pulls data from a backend

174
00:06:36,560 --> 00:06:38,800
database server

175
00:06:38,800 --> 00:06:39,600
when

176
00:06:39,600 --> 00:06:42,240
delegation is configured a web server

177
00:06:42,240 --> 00:06:45,360
can mimic and impersonate the user the

178
00:06:45,360 --> 00:06:48,080
web server can use the exact permissions

179
00:06:48,080 --> 00:06:50,000
what the user has over the database

180
00:06:50,000 --> 00:06:53,120
server to access the database server on

181
00:06:53,120 --> 00:06:55,280
users behalf

182
00:06:55,280 --> 00:06:57,759
there are three forms of delegation

183
00:06:57,759 --> 00:06:59,680
unconstrained delegation constrained

184
00:06:59,680 --> 00:07:01,599
delegation and resource constraint

185
00:07:01,599 --> 00:07:04,160
delegation or rbcd

186
00:07:04,160 --> 00:07:06,720
in case of unconstrained delegation when

187
00:07:06,720 --> 00:07:09,120
a user connects to the web server the

188
00:07:09,120 --> 00:07:12,000
tgt of the user is placed on the web

189
00:07:12,000 --> 00:07:14,479
server the ticket granting ticket of the

190
00:07:14,479 --> 00:07:17,599
user is placed on the web server

191
00:07:17,599 --> 00:07:19,440
if an attacker can exert control over

192
00:07:19,440 --> 00:07:21,840
the web server or access the web server

193
00:07:21,840 --> 00:07:24,000
with administrative privileges an

194
00:07:24,000 --> 00:07:26,720
attacker can steal the tgt

195
00:07:26,720 --> 00:07:28,639
once the attacker steals the tgt the

196
00:07:28,639 --> 00:07:30,720
attacker can impersonate the user to

197
00:07:30,720 --> 00:07:31,759
access

198
00:07:31,759 --> 00:07:33,360
any resource in active directory

199
00:07:33,360 --> 00:07:35,360
environment

200
00:07:35,360 --> 00:07:38,319
unconstrained delegation is vulnerable

201
00:07:38,319 --> 00:07:40,160
and should not be used

202
00:07:40,160 --> 00:07:42,400
we have seen a lot of organizations move

203
00:07:42,400 --> 00:07:44,720
from unconstrained delegation to

204
00:07:44,720 --> 00:07:46,960
constrained delegation and

205
00:07:46,960 --> 00:07:49,840
resource-based constraint delegation

206
00:07:49,840 --> 00:07:51,520
the hypothesis which we are sharing

207
00:07:51,520 --> 00:07:52,560
today

208
00:07:52,560 --> 00:07:55,919
are based on constrained delegation and

209
00:07:55,919 --> 00:07:57,440
rbcd

210
00:07:57,440 --> 00:08:00,319
the first hypothesis is the threat actor

211
00:08:00,319 --> 00:08:02,479
has configured constrained delegation to

212
00:08:02,479 --> 00:08:04,879
maintain persistent access to the domain

213
00:08:04,879 --> 00:08:06,639
controller

214
00:08:06,639 --> 00:08:08,960
how is constrained delegation different

215
00:08:08,960 --> 00:08:12,000
than unconstrained delegation

216
00:08:12,000 --> 00:08:14,720
the constrained delegation is configured

217
00:08:14,720 --> 00:08:16,479
on the front-end server

218
00:08:16,479 --> 00:08:18,240
in our last example it was the web

219
00:08:18,240 --> 00:08:20,639
server

220
00:08:20,800 --> 00:08:23,680
it is defined on the web server

221
00:08:23,680 --> 00:08:26,639
or in this case service a which services

222
00:08:26,639 --> 00:08:29,039
can service a access as part of

223
00:08:29,039 --> 00:08:31,440
delegation

224
00:08:31,440 --> 00:08:33,839
this is implemented using two features

225
00:08:33,839 --> 00:08:35,839
and i am talking about a specific case

226
00:08:35,839 --> 00:08:38,080
of constrained delegation with protocol

227
00:08:38,080 --> 00:08:40,399
transition enabled

228
00:08:40,399 --> 00:08:42,559
the two features are as for you to self

229
00:08:42,559 --> 00:08:45,120
and as per youtube proxy

230
00:08:45,120 --> 00:08:47,839
s for you to self is used for protocol

231
00:08:47,839 --> 00:08:49,360
transition

232
00:08:49,360 --> 00:08:52,320
s for you to self allows a service to

233
00:08:52,320 --> 00:08:55,440
receive a forwardable tgs for any user

234
00:08:55,440 --> 00:08:56,959
principle

235
00:08:56,959 --> 00:08:59,279
without needing delegated credential

236
00:08:59,279 --> 00:09:01,200
tokens

237
00:09:01,200 --> 00:09:02,000
yes

238
00:09:02,000 --> 00:09:03,440
you heard it right

239
00:09:03,440 --> 00:09:06,160
without having a delegated credential

240
00:09:06,160 --> 00:09:09,360
token service a can use s for you to

241
00:09:09,360 --> 00:09:13,760
self to request for a forwardable tgs

242
00:09:13,760 --> 00:09:17,120
for any user principle

243
00:09:17,120 --> 00:09:19,279
once this has been done s for you to

244
00:09:19,279 --> 00:09:22,720
proxy is used to use that forward tgs

245
00:09:22,720 --> 00:09:25,120
which was received as part of the step

246
00:09:25,120 --> 00:09:26,240
one

247
00:09:26,240 --> 00:09:28,959
to request another tgs to the target

248
00:09:28,959 --> 00:09:30,800
service

249
00:09:30,800 --> 00:09:32,240
that could be the database service in a

250
00:09:32,240 --> 00:09:34,399
last example or it could be a domain

251
00:09:34,399 --> 00:09:36,640
controller if attacker wants to use this

252
00:09:36,640 --> 00:09:40,319
for a covert access

253
00:09:41,279 --> 00:09:43,040
how can an attacker configure this in an

254
00:09:43,040 --> 00:09:44,399
environment

255
00:09:44,399 --> 00:09:46,720
in order to configure this attacker can

256
00:09:46,720 --> 00:09:49,120
use powershell

257
00:09:49,120 --> 00:09:51,120
the idea here is that attacker would

258
00:09:51,120 --> 00:09:53,519
like to maintain a covert persistent

259
00:09:53,519 --> 00:09:57,120
access to a domain controller

260
00:09:57,120 --> 00:09:58,880
what the attacker does is the

261
00:09:58,880 --> 00:10:02,399
configuration on service a object

262
00:10:02,399 --> 00:10:04,560
in the active directory environment

263
00:10:04,560 --> 00:10:06,800
so attacker can use powershell to

264
00:10:06,800 --> 00:10:09,360
configure trusted to auth for delegation

265
00:10:09,360 --> 00:10:10,480
is true

266
00:10:10,480 --> 00:10:12,560
this is where attacker is configuring

267
00:10:12,560 --> 00:10:15,040
enabling s for you to serve

268
00:10:15,040 --> 00:10:16,959
and the next step which is s for you to

269
00:10:16,959 --> 00:10:20,160
proxy can be configured by setting msds

270
00:10:20,160 --> 00:10:22,720
allowed to delegate to property

271
00:10:22,720 --> 00:10:26,160
pointing to service b the target service

272
00:10:26,160 --> 00:10:28,320
which the attacker wants access to and

273
00:10:28,320 --> 00:10:31,200
that would be a domain controller

274
00:10:31,200 --> 00:10:33,600
once this configuration has been done

275
00:10:33,600 --> 00:10:36,640
the back door has been set

276
00:10:36,640 --> 00:10:38,720
after the eradication event an attacker

277
00:10:38,720 --> 00:10:41,040
can come back and if the attacker can

278
00:10:41,040 --> 00:10:43,839
exert control over service a they can

279
00:10:43,839 --> 00:10:45,839
now go through the cycle of s for you to

280
00:10:45,839 --> 00:10:48,640
self as for you to proxy to access

281
00:10:48,640 --> 00:10:49,839
service b

282
00:10:49,839 --> 00:10:52,880
which could be a domain controller

283
00:10:52,880 --> 00:10:54,959
what can defenders do to detect this in

284
00:10:54,959 --> 00:10:57,360
the environment

285
00:10:57,360 --> 00:10:59,839
as a detection mechanism on domain

286
00:10:59,839 --> 00:11:02,160
controllers organizations should enable

287
00:11:02,160 --> 00:11:05,680
computer account management audit events

288
00:11:05,680 --> 00:11:07,519
this policy setting is useful for

289
00:11:07,519 --> 00:11:10,160
tracking account related changes to

290
00:11:10,160 --> 00:11:13,279
computers that are member of the domain

291
00:11:13,279 --> 00:11:16,880
event id 4742 is triggered when changes

292
00:11:16,880 --> 00:11:19,920
to a computer object are made

293
00:11:19,920 --> 00:11:22,560
any change to allow to delegate to

294
00:11:22,560 --> 00:11:23,760
property

295
00:11:23,760 --> 00:11:25,440
with the critical system spn as the

296
00:11:25,440 --> 00:11:27,040
target

297
00:11:27,040 --> 00:11:28,880
should be reviewed

298
00:11:28,880 --> 00:11:31,360
an attacker can set this to the domain

299
00:11:31,360 --> 00:11:32,880
controller to maintain that covert

300
00:11:32,880 --> 00:11:34,959
access

301
00:11:34,959 --> 00:11:37,839
threat hunters can perform hunt by using

302
00:11:37,839 --> 00:11:40,000
powershell to list all the id objects in

303
00:11:40,000 --> 00:11:41,279
the environment

304
00:11:41,279 --> 00:11:43,279
and look for that msds allowed to

305
00:11:43,279 --> 00:11:45,760
delegate to property set

306
00:11:45,760 --> 00:11:47,760
to a domain controller or any other

307
00:11:47,760 --> 00:11:50,320
critical server

308
00:11:50,320 --> 00:11:52,320
so this is how attackers can use

309
00:11:52,320 --> 00:11:55,040
constrained delegation to implement

310
00:11:55,040 --> 00:11:58,560
those and use those at a later stage

311
00:11:58,560 --> 00:12:01,680
not only constrained delegation rbcd

312
00:12:01,680 --> 00:12:03,680
resource based constraint delegation can

313
00:12:03,680 --> 00:12:05,040
also be used

314
00:12:05,040 --> 00:12:07,360
so our next hypothesis is that an

315
00:12:07,360 --> 00:12:10,399
attacker is using the newer rbcd

316
00:12:10,399 --> 00:12:12,959
or resource-based constraint delegation

317
00:12:12,959 --> 00:12:15,440
to maintain covert access in the

318
00:12:15,440 --> 00:12:17,680
environment and access a domain

319
00:12:17,680 --> 00:12:20,000
controller

320
00:12:20,000 --> 00:12:22,560
how is rbcd different than

321
00:12:22,560 --> 00:12:24,480
constrained delegation which we saw in

322
00:12:24,480 --> 00:12:26,880
our last hypothesis

323
00:12:26,880 --> 00:12:29,920
in case of rbcd the resource-based

324
00:12:29,920 --> 00:12:32,240
constrained delegation the configuration

325
00:12:32,240 --> 00:12:35,200
is now done on service b object

326
00:12:35,200 --> 00:12:39,120
service b object decides who can access

327
00:12:39,120 --> 00:12:42,959
it as part of dedication

328
00:12:43,440 --> 00:12:45,600
the configuration is now being made at

329
00:12:45,600 --> 00:12:48,000
service b the rest of the steps remain

330
00:12:48,000 --> 00:12:48,959
the same

331
00:12:48,959 --> 00:12:51,519
so an attacker can come back in

332
00:12:51,519 --> 00:12:53,920
do s for you to self as for you to proxy

333
00:12:53,920 --> 00:12:57,519
and access service b

334
00:12:57,519 --> 00:13:00,160
the dc the domain controller checks for

335
00:13:00,160 --> 00:13:04,079
the requesting server example web server

336
00:13:04,079 --> 00:13:06,880
should be present in the msds allowed to

337
00:13:06,880 --> 00:13:10,079
act on behalf of other identity property

338
00:13:10,079 --> 00:13:12,320
of service b

339
00:13:12,320 --> 00:13:15,360
so how can an attacker use this for

340
00:13:15,360 --> 00:13:17,440
their advantage

341
00:13:17,440 --> 00:13:20,320
so attacker can configure rbcd to

342
00:13:20,320 --> 00:13:23,600
configure rbcd they can use powershell

343
00:13:23,600 --> 00:13:26,639
and set principles allowed to delegate

344
00:13:26,639 --> 00:13:29,120
to account property

345
00:13:29,120 --> 00:13:31,839
this need to be set on service b and

346
00:13:31,839 --> 00:13:35,279
allow service a to access it

347
00:13:35,279 --> 00:13:37,680
and once an attacker comes back they can

348
00:13:37,680 --> 00:13:39,279
go through the cycle of s for you to

349
00:13:39,279 --> 00:13:41,519
self as for you to proxy and then use

350
00:13:41,519 --> 00:13:44,560
that ticket to access the target which

351
00:13:44,560 --> 00:13:46,480
can be a domain controller

352
00:13:46,480 --> 00:13:49,199
providing access a covert way to

353
00:13:49,199 --> 00:13:51,279
escalate privileges at a later stage to

354
00:13:51,279 --> 00:13:54,399
access a domain controller

355
00:13:54,399 --> 00:13:58,000
what can defenders do to detect rbcd

356
00:13:58,000 --> 00:13:59,920
on the domain controller if audit

357
00:13:59,920 --> 00:14:01,839
directory service access policy is

358
00:14:01,839 --> 00:14:04,399
enabled it will provide a low level

359
00:14:04,399 --> 00:14:06,320
audit trail of changes that are being

360
00:14:06,320 --> 00:14:09,360
made to objects in active directory

361
00:14:09,360 --> 00:14:12,160
let me warn you the event volume is high

362
00:14:12,160 --> 00:14:16,880
for this specific group of logs event id

363
00:14:16,880 --> 00:14:19,760
4662 and 5136

364
00:14:19,760 --> 00:14:22,560
will both track and can be set to alert

365
00:14:22,560 --> 00:14:24,639
on changes being made

366
00:14:24,639 --> 00:14:27,680
on the ds object

367
00:14:28,839 --> 00:14:32,560
hunting hunters can use powershell to

368
00:14:32,560 --> 00:14:36,160
list objects which have msds allowed

369
00:14:36,160 --> 00:14:36,880
to

370
00:14:36,880 --> 00:14:38,720
delegate

371
00:14:38,720 --> 00:14:40,720
allowed to act on behalf of other

372
00:14:40,720 --> 00:14:42,959
identity property set

373
00:14:42,959 --> 00:14:45,199
so that's what we hunters can do here

374
00:14:45,199 --> 00:14:46,959
and then they can list the objects to

375
00:14:46,959 --> 00:14:48,480
see what entries have been made and

376
00:14:48,480 --> 00:14:50,560
review those for any malicious activity

377
00:14:50,560 --> 00:14:52,560
or malicious entries

378
00:14:52,560 --> 00:14:55,279
that's how rbcd can be used by attackers

379
00:14:55,279 --> 00:14:57,760
and that's how defenders can detect

380
00:14:57,760 --> 00:14:59,920
those configurations

381
00:14:59,920 --> 00:15:03,040
let me move on to my second hypothesis

382
00:15:03,040 --> 00:15:05,360
this is about attackers using bs

383
00:15:05,360 --> 00:15:08,399
replication permissions

384
00:15:08,399 --> 00:15:10,320
the hypothesis is that the threat actor

385
00:15:10,320 --> 00:15:12,320
is assigned ts replication permission to

386
00:15:12,320 --> 00:15:15,279
a user they control a standard user

387
00:15:15,279 --> 00:15:17,040
and then they are using that to remain

388
00:15:17,040 --> 00:15:19,360
persistent in the environment

389
00:15:19,360 --> 00:15:20,959
this is a technique which we have often

390
00:15:20,959 --> 00:15:22,720
see attackers use

391
00:15:22,720 --> 00:15:25,360
attackers often assign user accounts

392
00:15:25,360 --> 00:15:27,519
they control specific privileged

393
00:15:27,519 --> 00:15:29,040
permissions

394
00:15:29,040 --> 00:15:31,279
these are there are several permissions

395
00:15:31,279 --> 00:15:34,000
in active directory that can be assigned

396
00:15:34,000 --> 00:15:35,759
to a security principle in an ad

397
00:15:35,759 --> 00:15:36,880
environment

398
00:15:36,880 --> 00:15:39,839
and then they can act as covered back

399
00:15:39,839 --> 00:15:42,320
doors and at the same time provide

400
00:15:42,320 --> 00:15:45,120
capabilities for to an attacker to exert

401
00:15:45,120 --> 00:15:47,600
control over the environment

402
00:15:47,600 --> 00:15:50,240
one such permission is ds replication

403
00:15:50,240 --> 00:15:52,480
get changes and get changes on

404
00:15:52,480 --> 00:15:55,759
this have been made infamous by the tc

405
00:15:55,759 --> 00:15:58,160
sync attack

406
00:15:58,160 --> 00:16:00,720
this permission allows the security

407
00:16:00,720 --> 00:16:04,320
principle to remotely retrieve hashes

408
00:16:04,320 --> 00:16:07,279
from the domain controller by using the

409
00:16:07,279 --> 00:16:09,279
directory replication service remote

410
00:16:09,279 --> 00:16:11,199
protocol

411
00:16:11,199 --> 00:16:13,120
so any standard user who has this

412
00:16:13,120 --> 00:16:16,480
permission can retrieve anti-hash of any

413
00:16:16,480 --> 00:16:18,880
account in your environment from the

414
00:16:18,880 --> 00:16:21,839
domain controller by requesting it for

415
00:16:21,839 --> 00:16:24,000
that

416
00:16:24,000 --> 00:16:26,399
so how does an attacker configure this

417
00:16:26,399 --> 00:16:28,880
an attacker can again use powershell so

418
00:16:28,880 --> 00:16:31,199
in this example we are using power view

419
00:16:31,199 --> 00:16:33,040
which has

420
00:16:33,040 --> 00:16:36,480
dc sync command an aptly named dc sync

421
00:16:36,480 --> 00:16:39,199
command to provide these rights to a

422
00:16:39,199 --> 00:16:41,040
standard user

423
00:16:41,040 --> 00:16:43,199
once this has been set at a later stage

424
00:16:43,199 --> 00:16:45,120
when an attacker comes back if they

425
00:16:45,120 --> 00:16:47,839
still have access to that user they can

426
00:16:47,839 --> 00:16:50,320
use a tool like mimikatz to request for

427
00:16:50,320 --> 00:16:52,240
a credential hash from the domain

428
00:16:52,240 --> 00:16:53,440
controller

429
00:16:53,440 --> 00:16:55,839
this hash can be of a domain admin an

430
00:16:55,839 --> 00:16:58,560
enterprise admin or even off the kerb

431
00:16:58,560 --> 00:17:01,199
tgt account the all powerful kerb tgt

432
00:17:01,199 --> 00:17:02,959
account

433
00:17:02,959 --> 00:17:05,520
so this technique is very powerful

434
00:17:05,520 --> 00:17:07,919
what can defenders do to detect it

435
00:17:07,919 --> 00:17:09,760
when ds replication permissions are

436
00:17:09,760 --> 00:17:12,079
added to a user in a domain

437
00:17:12,079 --> 00:17:14,400
if directory service access changes are

438
00:17:14,400 --> 00:17:17,679
enabled a 462 event is generated

439
00:17:17,679 --> 00:17:20,640
the grid that is added here refers to

440
00:17:20,640 --> 00:17:23,439
the ds replication rights

441
00:17:23,439 --> 00:17:25,760
this should be reviewed when set

442
00:17:25,760 --> 00:17:27,039
and

443
00:17:27,039 --> 00:17:29,919
analysis performed

444
00:17:29,919 --> 00:17:31,760
we can also perform a retrospective hunt

445
00:17:31,760 --> 00:17:34,160
by using powershell

446
00:17:34,160 --> 00:17:36,480
a simple powershell command can list all

447
00:17:36,480 --> 00:17:38,960
objects in the environment that have ds

448
00:17:38,960 --> 00:17:40,960
replication permission assigned

449
00:17:40,960 --> 00:17:43,200
and then they can be reviewed to ensure

450
00:17:43,200 --> 00:17:45,919
only accounts that require that right

451
00:17:45,919 --> 00:17:46,720
help

452
00:17:46,720 --> 00:17:48,400
that right

453
00:17:48,400 --> 00:17:51,440
so that's how defenders can hunt for

454
00:17:51,440 --> 00:17:53,360
any ds replication rights that have been

455
00:17:53,360 --> 00:17:55,440
assigned to stranded users and review

456
00:17:55,440 --> 00:17:56,799
those

457
00:17:56,799 --> 00:17:59,200
this takes me to my third hypothesis

458
00:17:59,200 --> 00:18:00,880
which is persistence using machine

459
00:18:00,880 --> 00:18:03,120
dollar hash as i mentioned this is

460
00:18:03,120 --> 00:18:05,200
my favorite technique among the six we

461
00:18:05,200 --> 00:18:08,160
are talking about today

462
00:18:08,640 --> 00:18:10,400
when we work with the organizations to

463
00:18:10,400 --> 00:18:13,440
perform eradication events one key part

464
00:18:13,440 --> 00:18:15,600
of the puzzle is to perform enterprise

465
00:18:15,600 --> 00:18:17,520
wide password reset

466
00:18:17,520 --> 00:18:19,440
and one piece in this puzzle which is

467
00:18:19,440 --> 00:18:22,320
often missed by eradication teams is

468
00:18:22,320 --> 00:18:25,200
computer account passwords

469
00:18:25,200 --> 00:18:29,039
which makes this very attractive and apt

470
00:18:29,039 --> 00:18:31,520
for threat actors to maintain covert

471
00:18:31,520 --> 00:18:33,919
long-term access post remediation

472
00:18:33,919 --> 00:18:35,600
exercises

473
00:18:35,600 --> 00:18:37,440
and this is our next hypothesis for our

474
00:18:37,440 --> 00:18:38,400
hunt

475
00:18:38,400 --> 00:18:40,240
attackers have stolen a machine account

476
00:18:40,240 --> 00:18:42,960
password and is using it to access

477
00:18:42,960 --> 00:18:44,960
critical servers or even exert control

478
00:18:44,960 --> 00:18:48,559
over the domain controller and access it

479
00:18:48,559 --> 00:18:50,559
so what is machine account

480
00:18:50,559 --> 00:18:52,559
machine accounts are a bit of enigma and

481
00:18:52,559 --> 00:18:54,400
are often not completely understood by

482
00:18:54,400 --> 00:18:55,840
defenders

483
00:18:55,840 --> 00:18:57,919
machine account is a security principle

484
00:18:57,919 --> 00:19:01,280
that is tied to a computer object

485
00:19:01,280 --> 00:19:03,440
the password hash associated with this

486
00:19:03,440 --> 00:19:06,240
account can be used to create service

487
00:19:06,240 --> 00:19:08,799
tickets tgs

488
00:19:08,799 --> 00:19:12,160
also silver tickets to access spn's tied

489
00:19:12,160 --> 00:19:14,799
to this machine

490
00:19:14,799 --> 00:19:17,520
so these become very lucrative targets

491
00:19:17,520 --> 00:19:19,440
for trajectories

492
00:19:19,440 --> 00:19:21,520
fortunately for us these passwords are

493
00:19:21,520 --> 00:19:25,200
rotated automatically every 30 days

494
00:19:25,200 --> 00:19:27,360
this password change is requested by the

495
00:19:27,360 --> 00:19:30,400
computer object the machine in question

496
00:19:30,400 --> 00:19:33,039
and is also configured in the registry

497
00:19:33,039 --> 00:19:34,480
of that machine

498
00:19:34,480 --> 00:19:35,919
which actually creates a little bit of

499
00:19:35,919 --> 00:19:38,400
security weakness

500
00:19:38,400 --> 00:19:41,360
by default this value is 30 days

501
00:19:41,360 --> 00:19:42,960
now what a trajectory can do to

502
00:19:42,960 --> 00:19:45,840
implement this covered backdoor is to

503
00:19:45,840 --> 00:19:48,640
change the registry setting to increase

504
00:19:48,640 --> 00:19:50,480
this 30-day setting

505
00:19:50,480 --> 00:19:51,520
to

506
00:19:51,520 --> 00:19:54,160
more than 30 days for in this example we

507
00:19:54,160 --> 00:19:56,880
have taken 365 days so an attacker gains

508
00:19:56,880 --> 00:19:59,440
access to the environment

509
00:19:59,440 --> 00:20:02,159
uses a tool to retrieve the machine

510
00:20:02,159 --> 00:20:03,840
dollar hash

511
00:20:03,840 --> 00:20:06,960
of account of a computer object and then

512
00:20:06,960 --> 00:20:08,320
change the registry setting up that

513
00:20:08,320 --> 00:20:10,159
object so that that password doesn't

514
00:20:10,159 --> 00:20:12,240
change automatically

515
00:20:12,240 --> 00:20:13,919
and when the attacker comes back at a

516
00:20:13,919 --> 00:20:16,320
later stage post remediation exercise

517
00:20:16,320 --> 00:20:18,159
the threat actor the attacker can use

518
00:20:18,159 --> 00:20:20,880
that hash to access

519
00:20:20,880 --> 00:20:22,480
the server in question

520
00:20:22,480 --> 00:20:24,000
now that can be a domain controller if

521
00:20:24,000 --> 00:20:25,520
the attacker has stolen the machine

522
00:20:25,520 --> 00:20:28,720
dollar hash of the domain controller

523
00:20:28,720 --> 00:20:31,200
what can defenders do to detect this for

524
00:20:31,200 --> 00:20:33,200
defenders we recommend monitoring any

525
00:20:33,200 --> 00:20:35,200
changes to the registry which are not

526
00:20:35,200 --> 00:20:36,320
authorized

527
00:20:36,320 --> 00:20:38,559
this can be performed by using a edr or

528
00:20:38,559 --> 00:20:40,799
a logging tool like sysmon

529
00:20:40,799 --> 00:20:42,720
any changes to registry settings should

530
00:20:42,720 --> 00:20:45,039
be reviewed and investigated for

531
00:20:45,039 --> 00:20:47,280
a retrospective sweep of the environment

532
00:20:47,280 --> 00:20:48,880
can be performed

533
00:20:48,880 --> 00:20:51,039
using powershell or any other tool at

534
00:20:51,039 --> 00:20:54,000
your disposable at your disposal to look

535
00:20:54,000 --> 00:20:56,240
for maximum password setting anything

536
00:20:56,240 --> 00:20:58,000
more than 30 which is not default should

537
00:20:58,000 --> 00:20:59,840
be reviewed

538
00:20:59,840 --> 00:21:02,320
so this takes me to the end of the third

539
00:21:02,320 --> 00:21:04,559
hypothesis and i'll hand it over to

540
00:21:04,559 --> 00:21:06,640
thiru to talk through the next three

541
00:21:06,640 --> 00:21:08,799
hypothesis

542
00:21:08,799 --> 00:21:10,320
thanks anurag the next topic that will

543
00:21:10,320 --> 00:21:11,919
discuss is all about group policy

544
00:21:11,919 --> 00:21:13,200
objects

545
00:21:13,200 --> 00:21:15,039
threat actors have compromised domain

546
00:21:15,039 --> 00:21:17,120
controllers and then they have planted

547
00:21:17,120 --> 00:21:18,960
back those using group policy object in

548
00:21:18,960 --> 00:21:20,960
order to maintain a privileged access

549
00:21:20,960 --> 00:21:23,280
over targeted active directory server so

550
00:21:23,280 --> 00:21:25,760
this is the hypothesis

551
00:21:25,760 --> 00:21:27,360
group policy objects are collection of

552
00:21:27,360 --> 00:21:29,840
virtual policy settings that define how

553
00:21:29,840 --> 00:21:31,600
a system should look like and how a

554
00:21:31,600 --> 00:21:34,480
system should behave for certain users

555
00:21:34,480 --> 00:21:37,280
a gps can manage and control users and

556
00:21:37,280 --> 00:21:39,200
computers at large scale

557
00:21:39,200 --> 00:21:41,280
gps are widely used to not execute

558
00:21:41,280 --> 00:21:44,000
scripts assigned rights to user accounts

559
00:21:44,000 --> 00:21:45,760
and in order to harden the security

560
00:21:45,760 --> 00:21:48,720
settings of domain-wide systems

561
00:21:48,720 --> 00:21:51,360
we have observed threat actors misusing

562
00:21:51,360 --> 00:21:55,120
gpus to deploy ransomware binaries

563
00:21:55,120 --> 00:21:56,960
after compromising the domain

564
00:21:56,960 --> 00:21:58,720
controllers threat actors have created

565
00:21:58,720 --> 00:22:00,799
gpus and they have linked to certain ou

566
00:22:00,799 --> 00:22:02,880
users and they have tweaked certain

567
00:22:02,880 --> 00:22:06,240
settings like enabling script execution

568
00:22:06,240 --> 00:22:08,000
to make sure that the binaries they're

569
00:22:08,000 --> 00:22:10,640
going to push will not be blocked by the

570
00:22:10,640 --> 00:22:13,440
execution policies in the system side

571
00:22:13,440 --> 00:22:15,039
and then they will disable the logon

572
00:22:15,039 --> 00:22:17,840
script delays to ensure the scripts will

573
00:22:17,840 --> 00:22:20,080
execute without any delays after user

574
00:22:20,080 --> 00:22:21,919
log on into a system

575
00:22:21,919 --> 00:22:24,080
they'll disable the endpoint security

576
00:22:24,080 --> 00:22:26,240
software solutions like antivirus

577
00:22:26,240 --> 00:22:28,480
engines and then they will

578
00:22:28,480 --> 00:22:30,720
upload the encrypted binaries which is

579
00:22:30,720 --> 00:22:33,360
ransomware binaries as a logon script

580
00:22:33,360 --> 00:22:35,280
after pushing the gpus and once a user

581
00:22:35,280 --> 00:22:37,440
logs into a system the ransomware

582
00:22:37,440 --> 00:22:40,159
binaries execute as a logon script we

583
00:22:40,159 --> 00:22:41,840
observe this technique

584
00:22:41,840 --> 00:22:43,760
when we responded to our io transformer

585
00:22:43,760 --> 00:22:46,559
in certain regions

586
00:22:46,559 --> 00:22:49,440
we can hunt these back doors from gpos

587
00:22:49,440 --> 00:22:52,000
by exporting all gpus using powershell

588
00:22:52,000 --> 00:22:54,799
command or if you have a gui access over

589
00:22:54,799 --> 00:22:57,120
group policy management you can export

590
00:22:57,120 --> 00:22:59,360
all the gpos and then you can use your

591
00:22:59,360 --> 00:23:01,520
own parser codes or publicly available

592
00:23:01,520 --> 00:23:03,300
tools in order to parse the gpus

593
00:23:03,300 --> 00:23:04,480
[Music]

594
00:23:04,480 --> 00:23:06,640
these are some of the vital artifacts

595
00:23:06,640 --> 00:23:08,400
that we always recommend

596
00:23:08,400 --> 00:23:10,480
to hunt and analyze

597
00:23:10,480 --> 00:23:12,240
extract the user rights assignment

598
00:23:12,240 --> 00:23:13,360
settings

599
00:23:13,360 --> 00:23:15,039
and review the privileged access

600
00:23:15,039 --> 00:23:17,919
configured for users in gpo

601
00:23:17,919 --> 00:23:20,080
threat actors can abuse

602
00:23:20,080 --> 00:23:22,400
user rights assignment settings in order

603
00:23:22,400 --> 00:23:26,159
to provide or assign over permissive

604
00:23:26,159 --> 00:23:28,640
rights to the compromised accounts

605
00:23:28,640 --> 00:23:29,600
like

606
00:23:29,600 --> 00:23:32,320
log on local rights or domain controller

607
00:23:32,320 --> 00:23:34,640
or backup rights backup files and

608
00:23:34,640 --> 00:23:37,679
directories from critical servers etc

609
00:23:37,679 --> 00:23:39,039
following that

610
00:23:39,039 --> 00:23:41,120
extract all the script associated with

611
00:23:41,120 --> 00:23:43,200
the system startup shutdown process and

612
00:23:43,200 --> 00:23:45,279
use a logon log of process analyze the

613
00:23:45,279 --> 00:23:47,840
script and if you note on that if any

614
00:23:47,840 --> 00:23:50,320
malicious codes are embedded into it it

615
00:23:50,320 --> 00:23:52,559
can be a good indicator

616
00:23:52,559 --> 00:23:54,640
we have also observed maize ransomware

617
00:23:54,640 --> 00:23:55,679
group

618
00:23:55,679 --> 00:23:57,200
leverage schedule task in order to

619
00:23:57,200 --> 00:23:59,039
execute binaries

620
00:23:59,039 --> 00:24:00,559
review all the scheduled tasks

621
00:24:00,559 --> 00:24:02,159
configured in the gpus and understand

622
00:24:02,159 --> 00:24:04,880
the necessity of it

623
00:24:04,880 --> 00:24:06,480
following that

624
00:24:06,480 --> 00:24:08,240
restricted groups have a special

625
00:24:08,240 --> 00:24:09,840
permission to work with the built-in

626
00:24:09,840 --> 00:24:12,640
local groups if you observe

627
00:24:12,640 --> 00:24:15,039
the creation of a residual group in gpu

628
00:24:15,039 --> 00:24:16,480
and if it is assigned to a built-in

629
00:24:16,480 --> 00:24:18,799
local group we would recommend to work

630
00:24:18,799 --> 00:24:20,080
with internal operation team to

631
00:24:20,080 --> 00:24:22,559
understand the requirement of it because

632
00:24:22,559 --> 00:24:25,120
threat actors can use

633
00:24:25,120 --> 00:24:26,720
specific groups in order to maintain a

634
00:24:26,720 --> 00:24:28,400
persistent membership access over

635
00:24:28,400 --> 00:24:30,960
building open groups

636
00:24:30,960 --> 00:24:33,440
threat actors enable weaker algorithm in

637
00:24:33,440 --> 00:24:34,960
order to read

638
00:24:34,960 --> 00:24:36,960
credentials from memory in a plain text

639
00:24:36,960 --> 00:24:37,919
format

640
00:24:37,919 --> 00:24:39,679
and also in order to extract credential

641
00:24:39,679 --> 00:24:41,679
hash in a weaker hash format these are

642
00:24:41,679 --> 00:24:43,200
some of the registry settings we would

643
00:24:43,200 --> 00:24:44,960
recommend you to collect the

644
00:24:44,960 --> 00:24:47,360
configuration settings of it and analyze

645
00:24:47,360 --> 00:24:49,360
last but not least

646
00:24:49,360 --> 00:24:50,720
review the mission account password

647
00:24:50,720 --> 00:24:52,080
change settings

648
00:24:52,080 --> 00:24:54,480
by default all the machine account

649
00:24:54,480 --> 00:24:56,400
passwords will get reset for every 30

650
00:24:56,400 --> 00:24:57,520
days once

651
00:24:57,520 --> 00:24:59,840
if you observe that someone tampers the

652
00:24:59,840 --> 00:25:01,760
net log on parameters

653
00:25:01,760 --> 00:25:04,080
like disabling the password change or

654
00:25:04,080 --> 00:25:06,159
enhancing the password age limit this

655
00:25:06,159 --> 00:25:08,080
can be a good indicator these are all

656
00:25:08,080 --> 00:25:10,480
some of the vital artifacts we would

657
00:25:10,480 --> 00:25:13,039
recommend you to hunt and detect back to

658
00:25:13,039 --> 00:25:15,360
us from gpus or it may end up with

659
00:25:15,360 --> 00:25:17,760
detecting misconfigurations committed by

660
00:25:17,760 --> 00:25:21,120
your internal operation state

661
00:25:21,679 --> 00:25:24,559
following that let's discuss how threat

662
00:25:24,559 --> 00:25:27,440
actus abuse cross forest stress

663
00:25:27,440 --> 00:25:30,320
the hypothesis here is threat actor have

664
00:25:30,320 --> 00:25:32,000
compromised two for us that has trust

665
00:25:32,000 --> 00:25:34,240
with each other and then they planted

666
00:25:34,240 --> 00:25:36,799
back doors using sid history in order to

667
00:25:36,799 --> 00:25:39,120
maintain a privileged access over

668
00:25:39,120 --> 00:25:41,200
trusting forest

669
00:25:41,200 --> 00:25:42,960
a quick overview about cross forest

670
00:25:42,960 --> 00:25:45,120
waste forest is always considered as a

671
00:25:45,120 --> 00:25:47,120
security boundary for the resources and

672
00:25:47,120 --> 00:25:49,520
domains created within the forest

673
00:25:49,520 --> 00:25:51,600
when a user wants to access a resource

674
00:25:51,600 --> 00:25:53,279
in other forests they need a forest

675
00:25:53,279 --> 00:25:54,159
trust

676
00:25:54,159 --> 00:25:55,840
cross forest stress is established

677
00:25:55,840 --> 00:25:58,480
between the two forest root nodes it can

678
00:25:58,480 --> 00:26:01,120
be one way or a two way transduced if it

679
00:26:01,120 --> 00:26:03,760
is a one way trust it means the user in

680
00:26:03,760 --> 00:26:05,919
trusted forest can access a resource in

681
00:26:05,919 --> 00:26:08,400
a trusting forest the other way around

682
00:26:08,400 --> 00:26:11,600
will not work and very importantly

683
00:26:11,600 --> 00:26:13,840
sid filtering is enabled by default in a

684
00:26:13,840 --> 00:26:15,919
cross forest list when a sit filtering

685
00:26:15,919 --> 00:26:18,159
is enabled it will make the trusting

686
00:26:18,159 --> 00:26:20,640
forest domain controller to filter out

687
00:26:20,640 --> 00:26:23,760
the sids from user access token

688
00:26:23,760 --> 00:26:26,400
that are not member of trusted forest in

689
00:26:26,400 --> 00:26:29,520
other word trusting forest will allow

690
00:26:29,520 --> 00:26:32,400
sids of trusted forest alone

691
00:26:32,400 --> 00:26:34,720
if a user is a member of a group created

692
00:26:34,720 --> 00:26:37,039
in a different forest or a domain those

693
00:26:37,039 --> 00:26:39,200
sids can't be carried over and this will

694
00:26:39,200 --> 00:26:41,679
be filtered in the trusting forest end

695
00:26:41,679 --> 00:26:42,960
there can be scenarios where an

696
00:26:42,960 --> 00:26:45,200
organization wants to move a batch of

697
00:26:45,200 --> 00:26:47,600
uses from one forest to another forest

698
00:26:47,600 --> 00:26:49,679
in those scenarios they will tweak seed

699
00:26:49,679 --> 00:26:52,799
filtering rules by enabling seed history

700
00:26:52,799 --> 00:26:54,720
that's the attribute they will use

701
00:26:54,720 --> 00:26:56,960
when citi history is enabled

702
00:26:56,960 --> 00:26:59,039
the trusting forest domain controller

703
00:26:59,039 --> 00:27:02,799
will allow other domain sids along with

704
00:27:02,799 --> 00:27:06,159
the trusted forest sis

705
00:27:06,159 --> 00:27:09,440
but still certain forest specific rules

706
00:27:09,440 --> 00:27:12,400
will be enabled like sids which is other

707
00:27:12,400 --> 00:27:15,440
domain sids that has rad values between

708
00:27:15,440 --> 00:27:17,840
500 to 1000 will still be filtered in

709
00:27:17,840 --> 00:27:20,000
the trusting forest range when you refer

710
00:27:20,000 --> 00:27:23,600
other domain srds is in any sids other

711
00:27:23,600 --> 00:27:26,720
than the trusted forest side

712
00:27:26,720 --> 00:27:28,880
most of the privileged group

713
00:27:28,880 --> 00:27:30,799
rit values will be between 500 to

714
00:27:30,799 --> 00:27:33,799
thousands

715
00:27:34,320 --> 00:27:37,200
threat actors can use sint history in

716
00:27:37,200 --> 00:27:39,200
order to plant back rows so after

717
00:27:39,200 --> 00:27:41,520
compromising two forest which is forest

718
00:27:41,520 --> 00:27:43,440
and forest be in our case which has

719
00:27:43,440 --> 00:27:45,360
trust with each other we will move on to

720
00:27:45,360 --> 00:27:46,399
forest b

721
00:27:46,399 --> 00:27:48,799
which is considered as a trusting forest

722
00:27:48,799 --> 00:27:50,799
where they will enable the seed history

723
00:27:50,799 --> 00:27:52,880
using net dom utilities and then they

724
00:27:52,880 --> 00:27:55,520
will create a new security group and

725
00:27:55,520 --> 00:27:57,600
they will add it as a member of a

726
00:27:57,600 --> 00:27:59,600
building under status group which is a

727
00:27:59,600 --> 00:28:01,440
privileged group

728
00:28:01,440 --> 00:28:03,600
and then they will not know down the sid

729
00:28:03,600 --> 00:28:05,760
value of the newly created group

730
00:28:05,760 --> 00:28:08,159
they will move on to forest day

731
00:28:08,159 --> 00:28:10,000
and they log into the domain controller

732
00:28:10,000 --> 00:28:11,679
they will choose a user account which is

733
00:28:11,679 --> 00:28:13,760
already compromised and then they will

734
00:28:13,760 --> 00:28:15,039
inject

735
00:28:15,039 --> 00:28:18,080
the sid of newly created group in forest

736
00:28:18,080 --> 00:28:21,039
b into the seed history attribute

737
00:28:21,039 --> 00:28:23,200
of the user account created or

738
00:28:23,200 --> 00:28:25,679
compromised in forestry

739
00:28:25,679 --> 00:28:27,440
so they can leverage tools like mimikats

740
00:28:27,440 --> 00:28:28,840
to achieve this

741
00:28:28,840 --> 00:28:31,760
technique after successful injection now

742
00:28:31,760 --> 00:28:34,080
the user account will have its own sid

743
00:28:34,080 --> 00:28:36,240
as well as an extra srd which is the

744
00:28:36,240 --> 00:28:38,880
newly created group in forest people

745
00:28:38,880 --> 00:28:41,919
now the compromised user

746
00:28:41,919 --> 00:28:44,480
account can request for service ticket

747
00:28:44,480 --> 00:28:45,840
from forest b

748
00:28:45,840 --> 00:28:47,360
in order to manage the domain controller

749
00:28:47,360 --> 00:28:49,520
as an administrator as a first step this

750
00:28:49,520 --> 00:28:51,840
will request and receive inter alum tgt

751
00:28:51,840 --> 00:28:54,720
from forest a domain controller

752
00:28:54,720 --> 00:28:56,080
and then it will forward the interview

753
00:28:56,080 --> 00:28:58,159
into hdd to 4s b domain controller which

754
00:28:58,159 --> 00:29:00,480
will validate the user access token and

755
00:29:00,480 --> 00:29:02,240
it will observe that there is an s id of

756
00:29:02,240 --> 00:29:04,399
a group created in forest b and that is

757
00:29:04,399 --> 00:29:06,960
also a member of a built-in status group

758
00:29:06,960 --> 00:29:08,960
so with this validation the forest b

759
00:29:08,960 --> 00:29:10,240
domain control will issue a service

760
00:29:10,240 --> 00:29:13,200
ticket to the user account in forest a

761
00:29:13,200 --> 00:29:15,840
now the user can access forrest b domain

762
00:29:15,840 --> 00:29:18,000
controller as an administrator

763
00:29:18,000 --> 00:29:20,240
the key observation here is threat actor

764
00:29:20,240 --> 00:29:23,520
have not chosen the privileged group

765
00:29:23,520 --> 00:29:25,919
sid and they have not injected that s id

766
00:29:25,919 --> 00:29:28,480
into the user account just because the

767
00:29:28,480 --> 00:29:30,240
sid filtering rule

768
00:29:30,240 --> 00:29:33,840
will filter out the other domain sids

769
00:29:33,840 --> 00:29:38,639
that has red values between 500 2000

770
00:29:38,720 --> 00:29:40,799
so that's the reason they have created a

771
00:29:40,799 --> 00:29:42,320
new group which will have an rid value

772
00:29:42,320 --> 00:29:43,840
more than thousand and in order to

773
00:29:43,840 --> 00:29:45,520
maintain a privileged access they have

774
00:29:45,520 --> 00:29:47,440
added that group into a built-in status

775
00:29:47,440 --> 00:29:48,559
quo

776
00:29:48,559 --> 00:29:50,640
so this is a technique that attackers

777
00:29:50,640 --> 00:29:52,559
generally use in order to abuse it

778
00:29:52,559 --> 00:29:54,960
history

779
00:29:54,960 --> 00:29:57,200
we can detect this technique

780
00:29:57,200 --> 00:29:59,279
by enabling user account auditing in

781
00:29:59,279 --> 00:30:02,159
domain controller the event id 4738 will

782
00:30:02,159 --> 00:30:04,080
trigger for any changes to a user

783
00:30:04,080 --> 00:30:05,440
account attribute

784
00:30:05,440 --> 00:30:08,799
when a threat actor inject an sid into a

785
00:30:08,799 --> 00:30:10,240
seed history attribute this will also

786
00:30:10,240 --> 00:30:12,559
trigger the same even id4738

787
00:30:12,559 --> 00:30:14,480
and it will also point out the user

788
00:30:14,480 --> 00:30:17,360
account where the injection happened

789
00:30:17,360 --> 00:30:18,960
you can also proactively hunt by

790
00:30:18,960 --> 00:30:20,559
interacting with domain controllers

791
00:30:20,559 --> 00:30:23,440
using powershell by listing out users

792
00:30:23,440 --> 00:30:26,080
carrying extra sids in cds3 attribute

793
00:30:26,080 --> 00:30:28,799
and then you can negate users having

794
00:30:28,799 --> 00:30:31,760
same domain srds in the cds3 attribute

795
00:30:31,760 --> 00:30:33,760
in this way you can list out all the

796
00:30:33,760 --> 00:30:37,200
users carrying other domain sids

797
00:30:37,200 --> 00:30:39,440
in the cd attribute

798
00:30:39,440 --> 00:30:41,760
and then after identifying the users you

799
00:30:41,760 --> 00:30:43,279
can list out all the extra sids and

800
00:30:43,279 --> 00:30:44,960
understand the privileges those srds

801
00:30:44,960 --> 00:30:45,840
carry

802
00:30:45,840 --> 00:30:46,960
you need to work with your internal

803
00:30:46,960 --> 00:30:48,000
operation team to understand the

804
00:30:48,000 --> 00:30:49,760
requirement of it and if they are not

805
00:30:49,760 --> 00:30:51,440
aware of this change then there is a

806
00:30:51,440 --> 00:30:53,200
clear indicator that there are some

807
00:30:53,200 --> 00:30:54,720
suspicious activities going on in your

808
00:30:54,720 --> 00:30:57,200
environment which needs a detailed

809
00:30:57,200 --> 00:31:01,120
investigation in your environment

810
00:31:01,200 --> 00:31:03,120
we have a bonus entire the same

811
00:31:03,120 --> 00:31:04,960
techniques can be leveraged by threat

812
00:31:04,960 --> 00:31:06,399
actors

813
00:31:06,399 --> 00:31:07,679
and they can maintain a privileged

814
00:31:07,679 --> 00:31:09,600
access within the same room you can

815
00:31:09,600 --> 00:31:11,600
proactively hunt using powershell

816
00:31:11,600 --> 00:31:13,919
command by listing out all the users

817
00:31:13,919 --> 00:31:17,120
carrying same domain sids in the cdhd

818
00:31:17,120 --> 00:31:20,960
attribute and if you observe those sids

819
00:31:20,960 --> 00:31:23,600
includes the privileged group r ids like

820
00:31:23,600 --> 00:31:25,519
512 which is a domain admin or a finite

821
00:31:25,519 --> 00:31:26,880
which is the enterprise admin then

822
00:31:26,880 --> 00:31:29,039
that's a clear indicator that someone is

823
00:31:29,039 --> 00:31:31,200
abusing the seed history attribute in

824
00:31:31,200 --> 00:31:33,679
order to maintain a privileged access

825
00:31:33,679 --> 00:31:36,320
within the environment

826
00:31:36,320 --> 00:31:38,720
so sid filtering has no effect within

827
00:31:38,720 --> 00:31:41,200
the domain

828
00:31:42,000 --> 00:31:43,519
let's move on and discuss how threat

829
00:31:43,519 --> 00:31:46,399
actors abuse azerity connect server the

830
00:31:46,399 --> 00:31:48,240
hypothesis here is threat have

831
00:31:48,240 --> 00:31:50,480
compromised azurity connect server and

832
00:31:50,480 --> 00:31:51,840
with the local admin rights they have

833
00:31:51,840 --> 00:31:53,919
planted malwares in order to harvest

834
00:31:53,919 --> 00:31:56,159
credentials of all the users signing in

835
00:31:56,159 --> 00:31:58,320
through azure 80.

836
00:31:58,320 --> 00:32:01,039
azure ad connect is a microsoft tool

837
00:32:01,039 --> 00:32:03,279
that supports hybrid authentication

838
00:32:03,279 --> 00:32:04,720
and this is generally installed in an

839
00:32:04,720 --> 00:32:06,480
on-premise environment and azure id

840
00:32:06,480 --> 00:32:08,000
connect act as a bridge between

841
00:32:08,000 --> 00:32:10,080
on-premise active directory server and

842
00:32:10,080 --> 00:32:12,880
azure ad in order to synchronize the

843
00:32:12,880 --> 00:32:15,360
user attributes or properties

844
00:32:15,360 --> 00:32:18,080
azure ad along with azure ad connect

845
00:32:18,080 --> 00:32:20,000
supports various authentication method

846
00:32:20,000 --> 00:32:21,760
like pass hash synchronization

847
00:32:21,760 --> 00:32:23,760
passthrough authentication and federated

848
00:32:23,760 --> 00:32:26,159
authentication with the help of adf a

849
00:32:26,159 --> 00:32:28,000
server

850
00:32:28,000 --> 00:32:29,440
organizations prefer pass-through

851
00:32:29,440 --> 00:32:32,000
authentication method in scenarios where

852
00:32:32,000 --> 00:32:34,080
they wanted all the cloud users to get

853
00:32:34,080 --> 00:32:36,000
authenticated with on-premise active

854
00:32:36,000 --> 00:32:37,840
directory server and if they don't want

855
00:32:37,840 --> 00:32:40,159
to synchronize the hash of the password

856
00:32:40,159 --> 00:32:42,320
hash with azure id

857
00:32:42,320 --> 00:32:44,320
this diagram represents the

858
00:32:44,320 --> 00:32:45,919
authentication flow of pass-through

859
00:32:45,919 --> 00:32:47,679
authentication method

860
00:32:47,679 --> 00:32:49,200
i'm going to give a quick overview on

861
00:32:49,200 --> 00:32:51,440
the authentication flow

862
00:32:51,440 --> 00:32:52,960
so now user wants to access an

863
00:32:52,960 --> 00:32:54,640
application and if they have not already

864
00:32:54,640 --> 00:32:57,279
signed the application will redirect to

865
00:32:57,279 --> 00:33:00,080
our rcu ad sign-in page

866
00:33:00,080 --> 00:33:01,600
now the user enters the credentials

867
00:33:01,600 --> 00:33:02,960
azure id will collect the credentials

868
00:33:02,960 --> 00:33:05,440
we'll encrypt it with a public key of

869
00:33:05,440 --> 00:33:07,120
azure ad connect which is installed in

870
00:33:07,120 --> 00:33:09,120
on-premise and then the encrypted

871
00:33:09,120 --> 00:33:10,960
credentials will be converted into a

872
00:33:10,960 --> 00:33:13,200
request and the azure id will add the

873
00:33:13,200 --> 00:33:15,519
request into a queue

874
00:33:15,519 --> 00:33:17,440
azure ad connect which is an on-premise

875
00:33:17,440 --> 00:33:18,880
will always have a persistent connection

876
00:33:18,880 --> 00:33:21,120
with azure id so after retrieving the

877
00:33:21,120 --> 00:33:22,880
request from the queue it will decrypt

878
00:33:22,880 --> 00:33:25,120
the credentials using its own private

879
00:33:25,120 --> 00:33:25,840
key

880
00:33:25,840 --> 00:33:28,080
and then validate the credentials with

881
00:33:28,080 --> 00:33:30,240
on-premise active directory server

882
00:33:30,240 --> 00:33:32,159
based on the response it receives it

883
00:33:32,159 --> 00:33:34,799
will forward it to azure id and azure id

884
00:33:34,799 --> 00:33:37,120
will allow the user to access the

885
00:33:37,120 --> 00:33:39,039
application when it receives a

886
00:33:39,039 --> 00:33:41,840
successful authenticated response and if

887
00:33:41,840 --> 00:33:43,440
multi-factor authentication is not

888
00:33:43,440 --> 00:33:45,919
enabled

889
00:33:46,159 --> 00:33:48,320
from a even standpoint

890
00:33:48,320 --> 00:33:51,120
you can observe the successful sign-in

891
00:33:51,120 --> 00:33:53,039
log of a user account in azure id as

892
00:33:53,039 --> 00:33:54,480
well as there will be some related

893
00:33:54,480 --> 00:33:56,320
events recorded in on-premise active

894
00:33:56,320 --> 00:33:57,919
directory server like

895
00:33:57,919 --> 00:33:59,919
service ticket requests for the aed

896
00:33:59,919 --> 00:34:02,000
connect server

897
00:34:02,000 --> 00:34:03,440
threat actors can tamper the

898
00:34:03,440 --> 00:34:04,880
authentication flow

899
00:34:04,880 --> 00:34:07,519
by compromising the on-premise azure ad

900
00:34:07,519 --> 00:34:08,800
connect server

901
00:34:08,800 --> 00:34:10,960
and then with the local admin rights

902
00:34:10,960 --> 00:34:13,440
they will inject a malicious dll into a

903
00:34:13,440 --> 00:34:15,599
process called azure ad connect

904
00:34:15,599 --> 00:34:17,760
authentication agent service

905
00:34:17,760 --> 00:34:19,839
so this process is responsible for

906
00:34:19,839 --> 00:34:21,520
validating the credentials with

907
00:34:21,520 --> 00:34:23,918
on-premise active directory server which

908
00:34:23,918 --> 00:34:26,159
is step seven

909
00:34:26,159 --> 00:34:27,199
in order to achieve this attack

910
00:34:27,199 --> 00:34:29,040
technique threat actors can leverage two

911
00:34:29,040 --> 00:34:31,119
like aad internals and then they will

912
00:34:31,119 --> 00:34:34,399
install ad internal pts pi functions and

913
00:34:34,399 --> 00:34:36,480
which will inject a malicious dll into

914
00:34:36,480 --> 00:34:38,560
this process and then it will start

915
00:34:38,560 --> 00:34:40,320
harvest the credentials

916
00:34:40,320 --> 00:34:42,159
of all the user signing in through azure

917
00:34:42,159 --> 00:34:42,960
id

918
00:34:42,960 --> 00:34:45,040
and then it will record all the

919
00:34:45,040 --> 00:34:48,159
decrypted version of credentials into a

920
00:34:48,159 --> 00:34:50,480
hidden file

921
00:34:50,480 --> 00:34:53,440
along with that this will also bypass

922
00:34:53,440 --> 00:34:55,359
the credential validation process with

923
00:34:55,359 --> 00:34:58,000
on-premise active directory server

924
00:34:58,000 --> 00:35:00,560
and now the on-premise azure id connect

925
00:35:00,560 --> 00:35:02,880
server will send successful

926
00:35:02,880 --> 00:35:05,200
authenticated response for user trying

927
00:35:05,200 --> 00:35:07,200
with any passwords

928
00:35:07,200 --> 00:35:09,599
in other words user can use a valid or

929
00:35:09,599 --> 00:35:12,720
an invalid password but still the azure

930
00:35:12,720 --> 00:35:14,960
ad connect server will always send a

931
00:35:14,960 --> 00:35:17,200
successful authenticated response to

932
00:35:17,200 --> 00:35:20,160
azure ad this is a bit scary right step

933
00:35:20,160 --> 00:35:23,599
7 and step 8 will not happen when a

934
00:35:23,599 --> 00:35:27,920
malicious dll is injected successfully

935
00:35:27,920 --> 00:35:30,240
we can detect this technique using edr

936
00:35:30,240 --> 00:35:33,440
tools or sysmon utilities the sys1 will

937
00:35:33,440 --> 00:35:35,520
trigger event id 7

938
00:35:35,520 --> 00:35:37,680
whenever it observes

939
00:35:37,680 --> 00:35:40,000
new images are loaded into a process or

940
00:35:40,000 --> 00:35:43,280
if a new dll is loaded into any process

941
00:35:43,280 --> 00:35:46,079
we can customize the spawn configuration

942
00:35:46,079 --> 00:35:49,119
by focusing specific to a process called

943
00:35:49,119 --> 00:35:50,800
azure ad connect authentication agent

944
00:35:50,800 --> 00:35:51,760
servers

945
00:35:51,760 --> 00:35:54,800
and then you can flag out if any images

946
00:35:54,800 --> 00:35:56,720
loaded into it or if any dlns are

947
00:35:56,720 --> 00:35:58,640
injected into it

948
00:35:58,640 --> 00:36:00,800
you can also proactively hunt using

949
00:36:00,800 --> 00:36:02,640
powershell commands by listing out all

950
00:36:02,640 --> 00:36:04,720
the modules installed in the specific

951
00:36:04,720 --> 00:36:05,680
process

952
00:36:05,680 --> 00:36:07,839
and then you can analyze and flag out

953
00:36:07,839 --> 00:36:12,400
the odd dlls to do a binary track

954
00:36:12,400 --> 00:36:14,720
key consideration here events for

955
00:36:14,720 --> 00:36:17,440
service ticket request for aadconnect

956
00:36:17,440 --> 00:36:19,440
will not be logged in the active

957
00:36:19,440 --> 00:36:21,839
directory server what it means when a

958
00:36:21,839 --> 00:36:22,960
user

959
00:36:22,960 --> 00:36:25,440
tries to access an application

960
00:36:25,440 --> 00:36:27,520
there will be a successful sign-in log

961
00:36:27,520 --> 00:36:29,920
in azure id whereas there will not be

962
00:36:29,920 --> 00:36:32,640
no related events recorded in active

963
00:36:32,640 --> 00:36:36,240
directory servers like 4768 and 4769

964
00:36:36,240 --> 00:36:38,720
event id will not be recorded because

965
00:36:38,720 --> 00:36:40,720
the malicious dll will bypass the

966
00:36:40,720 --> 00:36:42,480
credential validation process with

967
00:36:42,480 --> 00:36:44,960
on-premise active directory server

968
00:36:44,960 --> 00:36:46,880
this can also be a good indicator to

969
00:36:46,880 --> 00:36:49,839
detect this technique

970
00:36:50,480 --> 00:36:51,920
we are pretty much to the end of the

971
00:36:51,920 --> 00:36:54,480
session we refer to various blocks

972
00:36:54,480 --> 00:36:56,320
created by different researchers we

973
00:36:56,320 --> 00:36:57,920
really want to thank and acknowledge all

974
00:36:57,920 --> 00:37:00,400
their wonderful work

975
00:37:00,400 --> 00:37:03,040
thanks a lot for listening to our talk

976
00:37:03,040 --> 00:37:05,280
i hope this was an informative session

977
00:37:05,280 --> 00:37:07,200
kindly reach us for any questions

978
00:37:07,200 --> 00:37:08,560
related to the talk

979
00:37:08,560 --> 00:37:11,799
thank you

