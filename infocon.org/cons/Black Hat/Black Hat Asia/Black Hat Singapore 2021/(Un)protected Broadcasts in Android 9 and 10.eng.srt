1
00:00:01,180 --> 00:00:14,730
[Music]

2
00:00:16,480 --> 00:00:18,560
hello everyone uh my name is ryan

3
00:00:18,560 --> 00:00:19,760
johnson

4
00:00:19,760 --> 00:00:22,320
and i collaborated with

5
00:00:22,320 --> 00:00:24,000
some colleagues from cryptowire for this

6
00:00:24,000 --> 00:00:27,119
research uh muhammad el sabag and angelo

7
00:00:27,119 --> 00:00:28,240
stavro

8
00:00:28,240 --> 00:00:30,400
and the title of our talk is unprotected

9
00:00:30,400 --> 00:00:34,800
broadcasts and android 9 and 10.

10
00:00:35,280 --> 00:00:37,360
so here's the agenda for the talk i'm

11
00:00:37,360 --> 00:00:39,360
first going to talk about intense and

12
00:00:39,360 --> 00:00:41,760
then protected broadcasts next i'm going

13
00:00:41,760 --> 00:00:44,160
to talk about the unprotected broadcast

14
00:00:44,160 --> 00:00:46,320
vulnerability that's in android open

15
00:00:46,320 --> 00:00:48,000
source project code

16
00:00:48,000 --> 00:00:49,840
then some notable instances of the

17
00:00:49,840 --> 00:00:52,559
vulnerability next i'll move to

18
00:00:52,559 --> 00:00:54,719
the resolution to fix the vulnerability

19
00:00:54,719 --> 00:00:57,600
the disclosure process and finally with

20
00:00:57,600 --> 00:01:00,559
some conclusions

21
00:01:00,559 --> 00:01:03,039
so cryptowire was jump started by a

22
00:01:03,039 --> 00:01:05,040
darpa project in late

23
00:01:05,040 --> 00:01:06,479
2011

24
00:01:06,479 --> 00:01:09,200
and some of our r d has been supported

25
00:01:09,200 --> 00:01:11,600
by dhs s

26
00:01:11,600 --> 00:01:13,280
as well as nist

27
00:01:13,280 --> 00:01:14,640
and

28
00:01:14,640 --> 00:01:17,840
at cryptowire we focus on enterprise

29
00:01:17,840 --> 00:01:19,680
mobile security

30
00:01:19,680 --> 00:01:21,920
providing software assurance developer

31
00:01:21,920 --> 00:01:24,799
integration mobile device management

32
00:01:24,799 --> 00:01:28,880
threat feed and security analytics

33
00:01:28,880 --> 00:01:30,960
so android applications

34
00:01:30,960 --> 00:01:34,400
are built using app components and these

35
00:01:34,400 --> 00:01:37,360
are kind of independent code units

36
00:01:37,360 --> 00:01:38,640
which perform

37
00:01:38,640 --> 00:01:41,439
dedicated tasks and over on the right

38
00:01:41,439 --> 00:01:43,040
are the four types of application

39
00:01:43,040 --> 00:01:45,600
components that android provides

40
00:01:45,600 --> 00:01:47,119
from which

41
00:01:47,119 --> 00:01:48,960
a developer can build an app so an

42
00:01:48,960 --> 00:01:50,000
activity

43
00:01:50,000 --> 00:01:51,280
this

44
00:01:51,280 --> 00:01:53,119
app component is the only one that

45
00:01:53,119 --> 00:01:54,720
actually has a gui

46
00:01:54,720 --> 00:01:57,759
and it's some like a gui component that

47
00:01:57,759 --> 00:01:58,880
in

48
00:01:58,880 --> 00:02:00,719
the end user actually directly interacts

49
00:02:00,719 --> 00:02:02,399
with a service executes in the

50
00:02:02,399 --> 00:02:05,600
background performing long-running tasks

51
00:02:05,600 --> 00:02:07,520
a content provider

52
00:02:07,520 --> 00:02:10,479
provides access to structured data and a

53
00:02:10,479 --> 00:02:12,160
broadcast receiver which we're going to

54
00:02:12,160 --> 00:02:14,879
focus on today can be thought of as an

55
00:02:14,879 --> 00:02:16,160
event listener

56
00:02:16,160 --> 00:02:18,879
and a broadcast receiver will register

57
00:02:18,879 --> 00:02:20,720
for

58
00:02:20,720 --> 00:02:24,480
one or more events and once they occur

59
00:02:24,480 --> 00:02:27,040
the broadcast receiver is alerted

60
00:02:27,040 --> 00:02:29,520
so all valid

61
00:02:29,520 --> 00:02:31,920
applications in android have a manifest

62
00:02:31,920 --> 00:02:33,480
file it's called an

63
00:02:33,480 --> 00:02:35,280
androidmanifest.xml file so this

64
00:02:35,280 --> 00:02:36,879
contains

65
00:02:36,879 --> 00:02:38,879
certain version information such as the

66
00:02:38,879 --> 00:02:40,160
package name

67
00:02:40,160 --> 00:02:43,280
the version code the version

68
00:02:43,280 --> 00:02:46,959
name as well and it also contains

69
00:02:46,959 --> 00:02:49,680
various settings and configuration data

70
00:02:49,680 --> 00:02:51,599
an application will have to declare the

71
00:02:51,599 --> 00:02:53,680
application components it has in the

72
00:02:53,680 --> 00:02:55,840
manifest file so at the bottom

73
00:02:55,840 --> 00:02:58,319
is an example of a broadcast receiver

74
00:02:58,319 --> 00:03:00,959
that's declared in the manifest file

75
00:03:00,959 --> 00:03:02,879
that registers for

76
00:03:02,879 --> 00:03:04,400
an action

77
00:03:04,400 --> 00:03:08,159
that is boot completed

78
00:03:09,200 --> 00:03:10,159
so

79
00:03:10,159 --> 00:03:13,519
an intent is an ipc message so this can

80
00:03:13,519 --> 00:03:16,800
be sent from an app from one application

81
00:03:16,800 --> 00:03:18,640
component to another application

82
00:03:18,640 --> 00:03:21,280
component within the same app or from

83
00:03:21,280 --> 00:03:23,440
one app to another app or from one app

84
00:03:23,440 --> 00:03:26,000
to multiple apps

85
00:03:26,000 --> 00:03:26,959
and

86
00:03:26,959 --> 00:03:29,440
intents can be classified into either

87
00:03:29,440 --> 00:03:32,720
explicit intents or implicit intense and

88
00:03:32,720 --> 00:03:35,360
an explicit intent is one where the

89
00:03:35,360 --> 00:03:37,760
sender

90
00:03:37,760 --> 00:03:39,920
defines the exact

91
00:03:39,920 --> 00:03:42,799
receiver that should receive the intent

92
00:03:42,799 --> 00:03:46,159
so at the bottom is an explicit intent

93
00:03:46,159 --> 00:03:48,000
where the sender says i want to send

94
00:03:48,000 --> 00:03:49,920
this to the nfc application and

95
00:03:49,920 --> 00:03:53,760
specifically the nfc boot completed

96
00:03:53,760 --> 00:03:55,200
receiver

97
00:03:55,200 --> 00:03:57,120
should receive this intent

98
00:03:57,120 --> 00:03:59,360
and there's also implicit intents which

99
00:03:59,360 --> 00:04:00,480
don't define

100
00:04:00,480 --> 00:04:03,040
a concrete receiver but instead rely on

101
00:04:03,040 --> 00:04:04,560
an action string

102
00:04:04,560 --> 00:04:06,799
and this provides loose coupling where

103
00:04:06,799 --> 00:04:08,239
this

104
00:04:08,239 --> 00:04:10,560
intent can be sent

105
00:04:10,560 --> 00:04:12,080
and also

106
00:04:12,080 --> 00:04:14,319
the receivers there can be multiple

107
00:04:14,319 --> 00:04:17,600
receivers that register for this

108
00:04:17,600 --> 00:04:21,120
broadcast intent

109
00:04:22,240 --> 00:04:23,199
so

110
00:04:23,199 --> 00:04:26,240
protected broadcast this is a primitive

111
00:04:26,240 --> 00:04:27,520
in android

112
00:04:27,520 --> 00:04:28,880
which

113
00:04:28,880 --> 00:04:30,080
will

114
00:04:30,080 --> 00:04:31,120
allow

115
00:04:31,120 --> 00:04:32,480
certain system

116
00:04:32,480 --> 00:04:33,759
[Music]

117
00:04:33,759 --> 00:04:36,160
components to prevent third-party

118
00:04:36,160 --> 00:04:38,479
applications from sending broadcast

119
00:04:38,479 --> 00:04:40,800
intents with specific actions

120
00:04:40,800 --> 00:04:42,800
so this is commonly used by the android

121
00:04:42,800 --> 00:04:44,400
framework also

122
00:04:44,400 --> 00:04:46,880
by system applications

123
00:04:46,880 --> 00:04:47,840
and

124
00:04:47,840 --> 00:04:49,440
we can see

125
00:04:49,440 --> 00:04:51,120
three different protected broadcasts

126
00:04:51,120 --> 00:04:53,199
listed there's connectivity change boot

127
00:04:53,199 --> 00:04:56,160
completed and locale changed these are

128
00:04:56,160 --> 00:04:58,320
declared by the android framework as

129
00:04:58,320 --> 00:05:00,160
protected broadcast and this is to

130
00:05:00,160 --> 00:05:02,800
prevent third party applications from

131
00:05:02,800 --> 00:05:04,880
sending them it should be reserved for

132
00:05:04,880 --> 00:05:06,639
the system

133
00:05:06,639 --> 00:05:08,320
so

134
00:05:08,320 --> 00:05:09,680
receiving

135
00:05:09,680 --> 00:05:13,280
a protected broadcast this can generally

136
00:05:13,280 --> 00:05:15,520
be done by any process on the device

137
00:05:15,520 --> 00:05:17,520
although the sender may

138
00:05:17,520 --> 00:05:20,000
also impose that the receiver has a

139
00:05:20,000 --> 00:05:21,840
specific permission

140
00:05:21,840 --> 00:05:23,440
in order to receive it so this is the

141
00:05:23,440 --> 00:05:25,440
case with boot completed you will need

142
00:05:25,440 --> 00:05:26,479
the

143
00:05:26,479 --> 00:05:29,759
boot completed permission to receive

144
00:05:29,759 --> 00:05:33,280
that specific intent

145
00:05:33,280 --> 00:05:35,759
so going into detail on who can actually

146
00:05:35,759 --> 00:05:37,199
send

147
00:05:37,199 --> 00:05:40,560
protected broadcasts over on the left is

148
00:05:40,560 --> 00:05:43,280
a android 9 aosp source code snippet

149
00:05:43,280 --> 00:05:45,919
from activity manager service and this

150
00:05:45,919 --> 00:05:49,520
is this code is invoked when

151
00:05:49,520 --> 00:05:53,280
an application tries to send a broadcast

152
00:05:53,280 --> 00:05:57,280
intent so first it's going to

153
00:05:57,280 --> 00:05:58,160
check

154
00:05:58,160 --> 00:06:00,400
the uid of the sending app to see if

155
00:06:00,400 --> 00:06:02,160
it's any of the known

156
00:06:02,160 --> 00:06:05,360
system uids if it's not

157
00:06:05,360 --> 00:06:08,720
then it's going to check to see if the

158
00:06:08,720 --> 00:06:11,039
the calling app the app that's trying to

159
00:06:11,039 --> 00:06:13,199
send the broadcast is persistent and

160
00:06:13,199 --> 00:06:14,160
this is

161
00:06:14,160 --> 00:06:16,479
um

162
00:06:16,560 --> 00:06:18,479
essentially done by

163
00:06:18,479 --> 00:06:20,240
setting the android persistent attribute

164
00:06:20,240 --> 00:06:23,039
to true in the app's manifest file

165
00:06:23,039 --> 00:06:25,520
although only system apps can actually

166
00:06:25,520 --> 00:06:27,440
be persistent or have that recognized by

167
00:06:27,440 --> 00:06:30,319
the system and if neither of those cases

168
00:06:30,319 --> 00:06:32,800
are true is caller system is going to be

169
00:06:32,800 --> 00:06:33,759
false

170
00:06:33,759 --> 00:06:36,479
so then when sending the broadcast

171
00:06:36,479 --> 00:06:38,319
intent it's going to check to see if the

172
00:06:38,319 --> 00:06:41,039
action is a protected broadcast action

173
00:06:41,039 --> 00:06:42,960
and if so it's going to throw a security

174
00:06:42,960 --> 00:06:44,000
exception

175
00:06:44,000 --> 00:06:46,240
in the context of the caller and this

176
00:06:46,240 --> 00:06:47,759
will occur when a third party

177
00:06:47,759 --> 00:06:50,000
application tries to send a protected

178
00:06:50,000 --> 00:06:52,639
broadcast

179
00:06:53,599 --> 00:06:56,400
so an apk file is essentially just a

180
00:06:56,400 --> 00:06:58,960
standalone android application file this

181
00:06:58,960 --> 00:07:00,840
contains the code and the

182
00:07:00,840 --> 00:07:04,000
resources and here we see

183
00:07:04,000 --> 00:07:07,120
the an adb command which lists the

184
00:07:07,120 --> 00:07:10,080
installed packages or apk files on the

185
00:07:10,080 --> 00:07:12,720
device here it shows the path to the apk

186
00:07:12,720 --> 00:07:14,560
as well as the package name

187
00:07:14,560 --> 00:07:16,800
and you can see that looking at the path

188
00:07:16,800 --> 00:07:18,639
the first

189
00:07:18,639 --> 00:07:21,280
app that's listed is in system priv app

190
00:07:21,280 --> 00:07:24,080
directory and the next is in system app

191
00:07:24,080 --> 00:07:26,240
and after that is vendor

192
00:07:26,240 --> 00:07:28,080
app directory so

193
00:07:28,080 --> 00:07:30,800
the priv app directory is a special

194
00:07:30,800 --> 00:07:32,639
directory where apps contained in it are

195
00:07:32,639 --> 00:07:35,440
considered to be privileged and

196
00:07:35,440 --> 00:07:36,560
one of the

197
00:07:36,560 --> 00:07:38,479
differences are that privileged

198
00:07:38,479 --> 00:07:40,000
applications can be whitelisted

199
00:07:40,000 --> 00:07:41,360
permissions

200
00:07:41,360 --> 00:07:44,560
through xml files on the system to grant

201
00:07:44,560 --> 00:07:46,319
them

202
00:07:46,319 --> 00:07:48,319
permissions which they won't actually

203
00:07:48,319 --> 00:07:50,240
need to ask the user

204
00:07:50,240 --> 00:07:51,759
to grant them

205
00:07:51,759 --> 00:07:53,199
another difference

206
00:07:53,199 --> 00:07:56,160
between app and privap

207
00:07:56,160 --> 00:07:57,039
is

208
00:07:57,039 --> 00:08:01,120
which directories can actually register

209
00:08:01,120 --> 00:08:03,280
um protected broadcasts or have them

210
00:08:03,280 --> 00:08:05,360
declared in their manifest file and have

211
00:08:05,360 --> 00:08:07,759
them be recognized by the system

212
00:08:07,759 --> 00:08:10,560
so here we have a table from android 8

213
00:08:10,560 --> 00:08:11,840
to

214
00:08:11,840 --> 00:08:14,639
and showing the directories that

215
00:08:14,639 --> 00:08:16,400
where the applications contained in

216
00:08:16,400 --> 00:08:17,840
those directories can successfully

217
00:08:17,840 --> 00:08:20,400
register protected broadcasts and those

218
00:08:20,400 --> 00:08:23,840
that cannot so looking at android 8

219
00:08:23,840 --> 00:08:24,639
it's

220
00:08:24,639 --> 00:08:26,479
all the directories i mean including the

221
00:08:26,479 --> 00:08:29,199
system framework and

222
00:08:29,199 --> 00:08:31,759
you know system app privap

223
00:08:31,759 --> 00:08:33,839
can all register protected broadcast the

224
00:08:33,839 --> 00:08:35,760
only one that cannot is data app and

225
00:08:35,760 --> 00:08:37,519
this is for third-party applications and

226
00:08:37,519 --> 00:08:39,599
this is pretty much constant through

227
00:08:39,599 --> 00:08:41,360
all versions of android

228
00:08:41,360 --> 00:08:44,399
and there's a change made from android 8

229
00:08:44,399 --> 00:08:46,880
to android 9.

230
00:08:46,880 --> 00:08:49,839
where the system the framework

231
00:08:49,839 --> 00:08:52,160
the system framework as well as privap

232
00:08:52,160 --> 00:08:53,839
directories can register protected

233
00:08:53,839 --> 00:08:56,160
broadcasts but then

234
00:08:56,160 --> 00:08:58,080
app directories of those same partitions

235
00:08:58,080 --> 00:09:00,160
cannot register protected broadcasts you

236
00:09:00,160 --> 00:09:02,560
know system app vendor app

237
00:09:02,560 --> 00:09:05,600
and the same is true for android 10

238
00:09:05,600 --> 00:09:07,600
although there are more exclusions for

239
00:09:07,600 --> 00:09:10,320
the overlay directories and

240
00:09:10,320 --> 00:09:12,240
some additional partitions

241
00:09:12,240 --> 00:09:15,040
and for android 11 you know after we

242
00:09:15,040 --> 00:09:17,440
reported this vulnerability to google

243
00:09:17,440 --> 00:09:18,399
they

244
00:09:18,399 --> 00:09:20,560
essentially made it so that you know any

245
00:09:20,560 --> 00:09:23,519
system app or pre-installed app can

246
00:09:23,519 --> 00:09:26,320
declare and you know protected broadcast

247
00:09:26,320 --> 00:09:27,839
and have those be registered by the

248
00:09:27,839 --> 00:09:29,440
system and

249
00:09:29,440 --> 00:09:31,040
then you know only third-party

250
00:09:31,040 --> 00:09:34,079
applications cannot

251
00:09:34,160 --> 00:09:35,920
so how does the device know which

252
00:09:35,920 --> 00:09:38,240
applications are pre-installed this is

253
00:09:38,240 --> 00:09:40,240
the responsibility of package manager

254
00:09:40,240 --> 00:09:43,600
service in the android framework so this

255
00:09:43,600 --> 00:09:45,360
is a back-end service that provides

256
00:09:45,360 --> 00:09:48,160
information about installed apps so a

257
00:09:48,160 --> 00:09:50,399
third-party application can access it

258
00:09:50,399 --> 00:09:52,160
you know using the package manager class

259
00:09:52,160 --> 00:09:54,560
which goes through the ipackage manager

260
00:09:54,560 --> 00:09:56,560
interface which will then invoke a

261
00:09:56,560 --> 00:09:58,959
method on package manager service in the

262
00:09:58,959 --> 00:10:00,640
android framework

263
00:10:00,640 --> 00:10:02,959
so package manager service scans

264
00:10:02,959 --> 00:10:06,720
partitions on system startup and and it

265
00:10:06,720 --> 00:10:09,600
looks in directories for applications it

266
00:10:09,600 --> 00:10:11,440
parsed their manifests you know to

267
00:10:11,440 --> 00:10:13,279
determine the insult applications you

268
00:10:13,279 --> 00:10:15,760
know the various configurations as well

269
00:10:15,760 --> 00:10:16,720
as

270
00:10:16,720 --> 00:10:18,959
the

271
00:10:18,959 --> 00:10:21,279
broadcasts that they declare

272
00:10:21,279 --> 00:10:23,120
as protected

273
00:10:23,120 --> 00:10:25,040
so here we're going to look at package

274
00:10:25,040 --> 00:10:27,360
manager service aosp code for android

275
00:10:27,360 --> 00:10:28,880
10.

276
00:10:28,880 --> 00:10:31,040
here is where

277
00:10:31,040 --> 00:10:33,920
the code where it will you know scan the

278
00:10:33,920 --> 00:10:36,640
system priv app directory and these this

279
00:10:36,640 --> 00:10:38,240
directory the apps that in this

280
00:10:38,240 --> 00:10:39,680
directory are going to be scanned with

281
00:10:39,680 --> 00:10:41,680
the scana system flag as well as the

282
00:10:41,680 --> 00:10:44,079
scan is privileged flag

283
00:10:44,079 --> 00:10:47,360
then moving to system app where it will

284
00:10:47,360 --> 00:10:50,079
scan these this directory

285
00:10:50,079 --> 00:10:51,200
um

286
00:10:51,200 --> 00:10:54,399
with the scan as system flag and as you

287
00:10:54,399 --> 00:10:56,240
can see it is missing the scanner's

288
00:10:56,240 --> 00:10:58,839
privilege flag

289
00:10:58,839 --> 00:11:02,399
and any applications that are

290
00:11:02,399 --> 00:11:05,120
scanned and do not have the scanish

291
00:11:05,120 --> 00:11:07,760
privilege flag will have their

292
00:11:07,760 --> 00:11:09,839
protected broadcast drop so you can see

293
00:11:09,839 --> 00:11:11,760
here privap is scanned but their scan is

294
00:11:11,760 --> 00:11:13,120
privileged flag so it's going to

295
00:11:13,120 --> 00:11:15,440
maintain its protected broadcasts but

296
00:11:15,440 --> 00:11:17,680
applications and system app

297
00:11:17,680 --> 00:11:19,440
um are not scanned with the scanis

298
00:11:19,440 --> 00:11:21,519
privilege flag so its you know protected

299
00:11:21,519 --> 00:11:24,079
broadcast will essentially be dropped

300
00:11:24,079 --> 00:11:26,000
and they are offered no protection at

301
00:11:26,000 --> 00:11:28,800
runtime so kind of

302
00:11:28,800 --> 00:11:31,680
to summarize it the system applications

303
00:11:31,680 --> 00:11:33,279
that are not present in a private

304
00:11:33,279 --> 00:11:36,079
directory in android 9 or 10

305
00:11:36,079 --> 00:11:38,000
will have their protect any protected

306
00:11:38,000 --> 00:11:39,519
broadcast that they declare in their

307
00:11:39,519 --> 00:11:42,000
manifest file they will not be

308
00:11:42,000 --> 00:11:44,480
recognized by the system which will then

309
00:11:44,480 --> 00:11:44,960
allow

310
00:11:44,960 --> 00:11:47,040
[Music]

311
00:11:47,040 --> 00:11:48,880
third-party or any applications

312
00:11:48,880 --> 00:11:50,800
including third-party applications to

313
00:11:50,800 --> 00:11:52,160
send them

314
00:11:52,160 --> 00:11:52,900
at runtime

315
00:11:52,900 --> 00:11:54,000
[Music]

316
00:11:54,000 --> 00:11:56,800
so here we have the cve id as well as

317
00:11:56,800 --> 00:11:58,480
the cvss

318
00:11:58,480 --> 00:12:01,839
base score of 7.3 so here's an example

319
00:12:01,839 --> 00:12:02,720
kind of

320
00:12:02,720 --> 00:12:04,560
how the vulnerability

321
00:12:04,560 --> 00:12:07,519
would manifest

322
00:12:07,519 --> 00:12:11,120
so there is uh clutch.apk and it

323
00:12:11,120 --> 00:12:13,600
declares a protected broadcast in its

324
00:12:13,600 --> 00:12:16,639
app manifest system server at startup

325
00:12:16,639 --> 00:12:20,800
will parse the protected broadcasts

326
00:12:20,800 --> 00:12:23,760
in all the applications on the system

327
00:12:23,760 --> 00:12:24,399
but

328
00:12:24,399 --> 00:12:26,399
any application that is not in a private

329
00:12:26,399 --> 00:12:29,040
directory will not have its protected

330
00:12:29,040 --> 00:12:31,680
broadcasts actually recognized by the

331
00:12:31,680 --> 00:12:34,800
system so a third-party application

332
00:12:34,800 --> 00:12:37,839
can send a protected

333
00:12:37,839 --> 00:12:39,040
and

334
00:12:39,040 --> 00:12:41,040
these their protected broadcast won't be

335
00:12:41,040 --> 00:12:43,120
offered any protection at run time so

336
00:12:43,120 --> 00:12:46,320
it's able to send broadcast intents with

337
00:12:46,320 --> 00:12:48,639
these actions that you know apps not in

338
00:12:48,639 --> 00:12:50,399
a private directory declared as

339
00:12:50,399 --> 00:12:52,399
protected but aren't protected at

340
00:12:52,399 --> 00:12:54,160
runtime and this can result in privilege

341
00:12:54,160 --> 00:12:57,279
escalation because it can

342
00:12:57,440 --> 00:12:59,440
result in the third party application

343
00:12:59,440 --> 00:13:00,560
sending

344
00:13:00,560 --> 00:13:01,680
spoofed

345
00:13:01,680 --> 00:13:03,279
messages that appear to be from the

346
00:13:03,279 --> 00:13:05,360
system but are not

347
00:13:05,360 --> 00:13:07,120
so the receiving

348
00:13:07,120 --> 00:13:08,880
system application may you know trust

349
00:13:08,880 --> 00:13:10,320
that you know it's from an authorized

350
00:13:10,320 --> 00:13:12,320
user when it's really from the third

351
00:13:12,320 --> 00:13:15,200
party application

352
00:13:17,120 --> 00:13:19,600
so here is a command for

353
00:13:19,600 --> 00:13:22,720
a third party application to send a

354
00:13:22,720 --> 00:13:25,360
broadcast intent

355
00:13:25,360 --> 00:13:28,240
so here is that same action being

356
00:13:28,240 --> 00:13:31,440
declared as a protected broadcast

357
00:13:31,440 --> 00:13:33,839
and if it's declared in an app that's in

358
00:13:33,839 --> 00:13:35,680
a prim app directory when the

359
00:13:35,680 --> 00:13:37,519
third-party app tries to send it it's

360
00:13:37,519 --> 00:13:39,680
going to be denied

361
00:13:39,680 --> 00:13:41,519
since it is recognized by the system but

362
00:13:41,519 --> 00:13:44,079
if that protected broadcast is

363
00:13:44,079 --> 00:13:46,079
declared in

364
00:13:46,079 --> 00:13:48,000
an app that's in the app directory then

365
00:13:48,000 --> 00:13:49,760
the system is not going to recognize it

366
00:13:49,760 --> 00:13:51,839
if it's android 9 or 10 and the third

367
00:13:51,839 --> 00:13:53,839
party application will be able to send

368
00:13:53,839 --> 00:13:57,680
that broadcast intent successfully

369
00:13:57,680 --> 00:14:00,320
so the attack surface are

370
00:14:00,320 --> 00:14:02,320
app components that are accessible you

371
00:14:02,320 --> 00:14:03,519
know they're exported they're not

372
00:14:03,519 --> 00:14:05,360
permission protected

373
00:14:05,360 --> 00:14:07,519
and they register for

374
00:14:07,519 --> 00:14:09,360
broadcast actions which are not going to

375
00:14:09,360 --> 00:14:11,279
be protected at runtime you know which

376
00:14:11,279 --> 00:14:14,160
is dependent on the declaring app's

377
00:14:14,160 --> 00:14:16,160
file system location so the attack

378
00:14:16,160 --> 00:14:19,040
vector is sending broadcast intents

379
00:14:19,040 --> 00:14:21,440
uh with you know action strings which

380
00:14:21,440 --> 00:14:23,360
you know apps have declared as protected

381
00:14:23,360 --> 00:14:25,680
but actually aren't protected at runtime

382
00:14:25,680 --> 00:14:28,079
so the requirements are a local app on

383
00:14:28,079 --> 00:14:29,680
the device they can actually broadcast

384
00:14:29,680 --> 00:14:32,000
intense and the goal is privilege

385
00:14:32,000 --> 00:14:33,279
escalation

386
00:14:33,279 --> 00:14:35,120
uh douche is sending these uh spoof

387
00:14:35,120 --> 00:14:36,880
broadcast intents you know they appear

388
00:14:36,880 --> 00:14:39,920
to be from the system um since the it is

389
00:14:39,920 --> 00:14:42,399
a protected broadcast but all it's not

390
00:14:42,399 --> 00:14:44,399
being protected at run time but it's

391
00:14:44,399 --> 00:14:46,399
really the source is really from a third

392
00:14:46,399 --> 00:14:49,199
party application

393
00:14:49,199 --> 00:14:51,519
so when we

394
00:14:51,519 --> 00:14:54,639
reported this to google you know in may

395
00:14:54,639 --> 00:14:58,160
2020 the affected major android versions

396
00:14:58,160 --> 00:15:01,519
were android 9 android 10 and there's

397
00:15:01,519 --> 00:15:03,839
also it was in android developer preview

398
00:15:03,839 --> 00:15:05,360
3

399
00:15:05,360 --> 00:15:07,680
but we you know informed them so it

400
00:15:07,680 --> 00:15:09,040
wasn't actually

401
00:15:09,040 --> 00:15:11,279
ever in you know android 11 release and

402
00:15:11,279 --> 00:15:13,839
they also back ported the fix to

403
00:15:13,839 --> 00:15:16,010
android 9 and android 10.

404
00:15:16,010 --> 00:15:17,600
[Music]

405
00:15:17,600 --> 00:15:19,839
so

406
00:15:19,839 --> 00:15:21,519
uh

407
00:15:21,519 --> 00:15:24,000
we wanted to check to see if any

408
00:15:24,000 --> 00:15:26,720
google devices were also affected so we

409
00:15:26,720 --> 00:15:30,000
looked at the google pixel 4 and this

410
00:15:30,000 --> 00:15:32,880
contains three applications that have

411
00:15:32,880 --> 00:15:34,560
unprotected

412
00:15:34,560 --> 00:15:36,720
broadcasts or declare

413
00:15:36,720 --> 00:15:39,199
you know protected broadcasts and based

414
00:15:39,199 --> 00:15:40,959
on the declaring apps file system

415
00:15:40,959 --> 00:15:42,720
location there aren't actually protected

416
00:15:42,720 --> 00:15:46,720
at runtime so we provide the

417
00:15:46,720 --> 00:15:48,560
build fingerprint

418
00:15:48,560 --> 00:15:51,519
and also the package names and their

419
00:15:51,519 --> 00:15:52,839
paths on the

420
00:15:52,839 --> 00:15:54,639
device

421
00:15:54,639 --> 00:15:56,720
so one of the applications is called

422
00:15:56,720 --> 00:15:58,800
presence polling and this application

423
00:15:58,800 --> 00:16:01,279
facilitates rich communication services

424
00:16:01,279 --> 00:16:02,880
or rcs

425
00:16:02,880 --> 00:16:05,040
you can see the path is system app and

426
00:16:05,040 --> 00:16:08,560
this application executes with the

427
00:16:08,560 --> 00:16:10,880
phone shared user id

428
00:16:10,880 --> 00:16:12,480
and this

429
00:16:12,480 --> 00:16:14,240
application

430
00:16:14,240 --> 00:16:18,480
is hosted on googlesource.com as an ims

431
00:16:18,480 --> 00:16:21,279
ip multimedia subsystem external project

432
00:16:21,279 --> 00:16:24,160
and is present on the google pixel 3 and

433
00:16:24,160 --> 00:16:26,399
google pixel 4 devices

434
00:16:26,399 --> 00:16:29,199
so this application declares

435
00:16:29,199 --> 00:16:31,440
some broadcasts

436
00:16:31,440 --> 00:16:33,920
intense or broadcast actions

437
00:16:33,920 --> 00:16:35,680
as protected which are actually are not

438
00:16:35,680 --> 00:16:37,839
protected so a third-party application

439
00:16:37,839 --> 00:16:39,600
can send

440
00:16:39,600 --> 00:16:41,360
these broadcast

441
00:16:41,360 --> 00:16:42,639
intents

442
00:16:42,639 --> 00:16:43,440
and

443
00:16:43,440 --> 00:16:45,680
one of them will cause file corruption

444
00:16:45,680 --> 00:16:47,440
on an internal database because this

445
00:16:47,440 --> 00:16:48,639
database

446
00:16:48,639 --> 00:16:50,639
mirrors you know the the official

447
00:16:50,639 --> 00:16:53,360
contacts provider and when a third-party

448
00:16:53,360 --> 00:16:55,680
application sends a broadcast intent it

449
00:16:55,680 --> 00:16:57,600
will

450
00:16:57,600 --> 00:16:59,440
essentially copy all the users contacts

451
00:16:59,440 --> 00:17:01,440
into the database independent of whether

452
00:17:01,440 --> 00:17:03,680
they're there or not

453
00:17:03,680 --> 00:17:05,199
increasing the size and this can be

454
00:17:05,199 --> 00:17:06,559
repeated

455
00:17:06,559 --> 00:17:08,480
over and over

456
00:17:08,480 --> 00:17:10,720
arbitrarily to increase the size of the

457
00:17:10,720 --> 00:17:12,640
database in an app that's running as the

458
00:17:12,640 --> 00:17:13,599
phone

459
00:17:13,599 --> 00:17:14,880
uid

460
00:17:14,880 --> 00:17:19,760
also there is the perf dump app which

461
00:17:19,760 --> 00:17:22,400
was present on various

462
00:17:22,400 --> 00:17:25,280
vendors and models and this application

463
00:17:25,280 --> 00:17:28,240
will profile processes using

464
00:17:28,240 --> 00:17:30,160
the linux perf tools

465
00:17:30,160 --> 00:17:32,640
that you can see the app path is system

466
00:17:32,640 --> 00:17:34,400
app and this

467
00:17:34,400 --> 00:17:37,600
application executes with the uh system

468
00:17:37,600 --> 00:17:39,440
shared user id which makes it you know

469
00:17:39,440 --> 00:17:42,000
very powerful since it's you know

470
00:17:42,000 --> 00:17:44,160
considered uh you know to be part of the

471
00:17:44,160 --> 00:17:46,960
system and is granted a lot of

472
00:17:46,960 --> 00:17:49,520
permissions by default

473
00:17:49,520 --> 00:17:51,679
so we've listed some of the vulnerable

474
00:17:51,679 --> 00:17:53,840
versions you know which we've

475
00:17:53,840 --> 00:17:56,240
encountered

476
00:17:56,240 --> 00:17:57,520
and

477
00:17:57,520 --> 00:17:59,760
the vulnerability is a command injection

478
00:17:59,760 --> 00:18:03,200
vulnerability due to a

479
00:18:03,200 --> 00:18:04,799
protected broadcast which isn't

480
00:18:04,799 --> 00:18:06,799
protected at runtime which allows a zero

481
00:18:06,799 --> 00:18:09,039
permission third-party application to

482
00:18:09,039 --> 00:18:10,000
you know

483
00:18:10,000 --> 00:18:12,240
execute arbitrary commands you know in

484
00:18:12,240 --> 00:18:13,840
the context of this app which is the

485
00:18:13,840 --> 00:18:16,160
system user which you know you can have

486
00:18:16,160 --> 00:18:20,000
a lot of uh capabilities to you know

487
00:18:20,000 --> 00:18:23,440
surveil the user uh if desired you know

488
00:18:23,440 --> 00:18:25,760
record the screen also change

489
00:18:25,760 --> 00:18:29,200
programmatically change the

490
00:18:29,200 --> 00:18:31,679
keyboard with one that has key logging

491
00:18:31,679 --> 00:18:34,559
functionalities

492
00:18:34,559 --> 00:18:35,840
so here

493
00:18:35,840 --> 00:18:38,559
are some snippets from the apps

494
00:18:38,559 --> 00:18:41,200
manifest file there's mul it declares

495
00:18:41,200 --> 00:18:43,520
multiple protected broadcasts

496
00:18:43,520 --> 00:18:46,320
and there's also a broadcast receiver

497
00:18:46,320 --> 00:18:48,000
which registers for

498
00:18:48,000 --> 00:18:49,280
[Music]

499
00:18:49,280 --> 00:18:50,480
some of these

500
00:18:50,480 --> 00:18:54,039
protected broadcasts

501
00:18:56,799 --> 00:18:59,360
so here we've provided the cve id as

502
00:18:59,360 --> 00:19:01,760
well as uh the cvss

503
00:19:01,760 --> 00:19:05,360
base score of 7.8 and the vulnerability

504
00:19:05,360 --> 00:19:07,039
is you know a third-party application

505
00:19:07,039 --> 00:19:09,520
can you know send a broadcast intent

506
00:19:09,520 --> 00:19:13,039
embed a command to be executed and send

507
00:19:13,039 --> 00:19:15,520
it to this application

508
00:19:15,520 --> 00:19:18,080
using a

509
00:19:18,080 --> 00:19:19,760
broadcast action it declared is

510
00:19:19,760 --> 00:19:21,280
protected but is not protected at

511
00:19:21,280 --> 00:19:23,360
runtime to its file system

512
00:19:23,360 --> 00:19:24,799
location

513
00:19:24,799 --> 00:19:26,640
and

514
00:19:26,640 --> 00:19:28,880
have it execute the

515
00:19:28,880 --> 00:19:31,280
command in a non-interactive shell

516
00:19:31,280 --> 00:19:33,120
so we informed qualcomm of this

517
00:19:33,120 --> 00:19:34,720
vulnerability they ranked it as high

518
00:19:34,720 --> 00:19:37,919
severity and listed the affected chip

519
00:19:37,919 --> 00:19:40,000
sets

520
00:19:40,000 --> 00:19:42,559
so here is a small sample of some of the

521
00:19:42,559 --> 00:19:44,720
devices you know which you know

522
00:19:44,720 --> 00:19:46,480
contained

523
00:19:46,480 --> 00:19:49,200
the perf dump application as well as you

524
00:19:49,200 --> 00:19:50,320
know the

525
00:19:50,320 --> 00:19:54,480
the version code and version name

526
00:19:55,120 --> 00:19:56,720
there's also

527
00:19:56,720 --> 00:19:59,520
the qmmi app and this is

528
00:19:59,520 --> 00:20:01,360
another pre-installed application that

529
00:20:01,360 --> 00:20:03,520
we found in various vendor devices and

530
00:20:03,520 --> 00:20:04,720
models

531
00:20:04,720 --> 00:20:07,679
and the app path is system app

532
00:20:07,679 --> 00:20:11,440
and it also executes with the shared

533
00:20:11,440 --> 00:20:14,720
system uid

534
00:20:14,799 --> 00:20:18,159
so we've provided some version code and

535
00:20:18,159 --> 00:20:20,400
version name of the application

536
00:20:20,400 --> 00:20:22,720
you know which we've encountered

537
00:20:22,720 --> 00:20:24,720
and the vulnerability is it allows a

538
00:20:24,720 --> 00:20:26,000
zero permission

539
00:20:26,000 --> 00:20:28,320
third-party application to

540
00:20:28,320 --> 00:20:31,280
programmatically obtain the device i may

541
00:20:31,280 --> 00:20:33,600
a second ima if the device has one the

542
00:20:33,600 --> 00:20:35,919
wi-fi mac address the bluetooth address

543
00:20:35,919 --> 00:20:38,559
and the device serial number

544
00:20:38,559 --> 00:20:40,480
and

545
00:20:40,480 --> 00:20:42,799
uh this is you know relevant

546
00:20:42,799 --> 00:20:45,679
certainly because in android 10

547
00:20:45,679 --> 00:20:47,919
that google made it so that third-party

548
00:20:47,919 --> 00:20:51,919
applications cannot directly obtain

549
00:20:52,159 --> 00:20:54,960
non-resettable device ids directly

550
00:20:54,960 --> 00:20:55,840
although

551
00:20:55,840 --> 00:20:58,559
here they're being

552
00:20:58,640 --> 00:21:01,840
obtained indirectly through a vulnerable

553
00:21:01,840 --> 00:21:03,280
system app

554
00:21:03,280 --> 00:21:05,039
so here's uh

555
00:21:05,039 --> 00:21:07,360
just a quick

556
00:21:07,360 --> 00:21:08,559
walk through

557
00:21:08,559 --> 00:21:09,440
for

558
00:21:09,440 --> 00:21:11,440
the vulnerability we have the malicious

559
00:21:11,440 --> 00:21:14,159
app on the right and the qmmi app on the

560
00:21:14,159 --> 00:21:15,039
left

561
00:21:15,039 --> 00:21:17,840
the qmmi app is in a an app directory an

562
00:21:17,840 --> 00:21:19,919
android 9 or 10 device it declares a

563
00:21:19,919 --> 00:21:21,679
protected broadcast

564
00:21:21,679 --> 00:21:23,840
the malicious app

565
00:21:23,840 --> 00:21:25,520
registers for

566
00:21:25,520 --> 00:21:27,200
the update message

567
00:21:27,200 --> 00:21:29,600
broadcast intent

568
00:21:29,600 --> 00:21:31,919
it starts the main activity of the qmmi

569
00:21:31,919 --> 00:21:34,320
app the qmmi app according to its logic

570
00:21:34,320 --> 00:21:35,679
registers

571
00:21:35,679 --> 00:21:36,799
for

572
00:21:36,799 --> 00:21:38,080
the

573
00:21:38,080 --> 00:21:39,679
broadcast action it declared is

574
00:21:39,679 --> 00:21:42,240
protected that malicious app can send

575
00:21:42,240 --> 00:21:43,760
this since it's not actually protected

576
00:21:43,760 --> 00:21:45,039
at runtime

577
00:21:45,039 --> 00:21:48,159
and then the qmmi app sends a an

578
00:21:48,159 --> 00:21:50,480
implicit broadcast intent

579
00:21:50,480 --> 00:21:52,320
which can which is received by the

580
00:21:52,320 --> 00:21:54,000
malicious app it also can be received by

581
00:21:54,000 --> 00:21:55,840
any application that registers for it on

582
00:21:55,840 --> 00:21:57,440
the device

583
00:21:57,440 --> 00:21:59,360
and then option which you know that

584
00:21:59,360 --> 00:22:01,679
broadcast intent contains a pii and then

585
00:22:01,679 --> 00:22:03,840
optionally the malicious application can

586
00:22:03,840 --> 00:22:05,360
start the default launcher and push a

587
00:22:05,360 --> 00:22:08,000
qmmi app into the background

588
00:22:08,000 --> 00:22:10,240
so here's the fix here's the actual

589
00:22:10,240 --> 00:22:12,799
commit and this is done to the package

590
00:22:12,799 --> 00:22:15,679
manager service and on the right

591
00:22:15,679 --> 00:22:17,679
as we saw previously if an app was not

592
00:22:17,679 --> 00:22:20,400
scanned as scan as privileged it would

593
00:22:20,400 --> 00:22:21,280
then

594
00:22:21,280 --> 00:22:22,240
drop

595
00:22:22,240 --> 00:22:23,360
the

596
00:22:23,360 --> 00:22:25,440
protected broadcast the app declares so

597
00:22:25,440 --> 00:22:27,840
these you know that code was removed and

598
00:22:27,840 --> 00:22:29,039
on the left

599
00:22:29,039 --> 00:22:31,200
if the application

600
00:22:31,200 --> 00:22:33,440
is not scanned to scan a system then it

601
00:22:33,440 --> 00:22:34,640
will drop

602
00:22:34,640 --> 00:22:36,559
the

603
00:22:36,559 --> 00:22:38,480
device the protected broadcast that the

604
00:22:38,480 --> 00:22:40,240
app declares but you know as we've seen

605
00:22:40,240 --> 00:22:41,520
previously

606
00:22:41,520 --> 00:22:43,840
apps in the priv app are scanned as scan

607
00:22:43,840 --> 00:22:46,400
is privileged and then and scan a system

608
00:22:46,400 --> 00:22:48,000
and apps in

609
00:22:48,000 --> 00:22:50,880
the app an app directory art scan is

610
00:22:50,880 --> 00:22:54,159
scan a system so they will maintain

611
00:22:54,159 --> 00:22:56,799
their protected broadcasts and only

612
00:22:56,799 --> 00:22:58,559
third-party applications will have them

613
00:22:58,559 --> 00:23:01,360
removed and this fix was backported to

614
00:23:01,360 --> 00:23:03,360
uh devices that were

615
00:23:03,360 --> 00:23:05,120
uh vulnerable devices that are you know

616
00:23:05,120 --> 00:23:07,919
still supported for receiving an update

617
00:23:07,919 --> 00:23:12,080
so here is the timeline so back may 8th

618
00:23:12,080 --> 00:23:13,840
was the initial disclosure to the

619
00:23:13,840 --> 00:23:16,080
android security team and affected

620
00:23:16,080 --> 00:23:17,280
vendors

621
00:23:17,280 --> 00:23:18,640
then

622
00:23:18,640 --> 00:23:20,960
on june 8th

623
00:23:20,960 --> 00:23:23,280
registered the vulnerability through

624
00:23:23,280 --> 00:23:25,280
google's issue tracker

625
00:23:25,280 --> 00:23:26,960
the next day they

626
00:23:26,960 --> 00:23:29,280
acknowledged the submission

627
00:23:29,280 --> 00:23:30,880
and then

628
00:23:30,880 --> 00:23:34,159
you know on the 15th of june they you

629
00:23:34,159 --> 00:23:36,159
know committed the fix you can see the

630
00:23:36,159 --> 00:23:37,679
hash there

631
00:23:37,679 --> 00:23:38,720
and

632
00:23:38,720 --> 00:23:40,320
on the 18th of

633
00:23:40,320 --> 00:23:41,360
june

634
00:23:41,360 --> 00:23:43,120
they finished their initial assessment

635
00:23:43,120 --> 00:23:45,440
and ranked the vulnerability severity is

636
00:23:45,440 --> 00:23:47,039
high

637
00:23:47,039 --> 00:23:49,279
and

638
00:23:49,279 --> 00:23:52,400
then in august 21st they assigned the

639
00:23:52,400 --> 00:23:53,600
cve

640
00:23:53,600 --> 00:23:55,520
and in september

641
00:23:55,520 --> 00:23:57,120
[Music]

642
00:23:57,120 --> 00:23:59,440
8th they you know

643
00:23:59,440 --> 00:24:01,039
changed the status of the vulnerability

644
00:24:01,039 --> 00:24:04,799
to fix and provided a bug bounty

645
00:24:04,799 --> 00:24:07,840
and to conclude uh it's you know would

646
00:24:07,840 --> 00:24:10,080
be certainly more secure to use

647
00:24:10,080 --> 00:24:12,799
some defense in-depth design principles

648
00:24:12,799 --> 00:24:15,039
to employ multiple forms of access

649
00:24:15,039 --> 00:24:16,159
control

650
00:24:16,159 --> 00:24:17,919
uh when guarding components that are

651
00:24:17,919 --> 00:24:19,679
solely relying on protected broadcast

652
00:24:19,679 --> 00:24:22,799
maybe you can also

653
00:24:22,799 --> 00:24:25,279
require that the sender have a signature

654
00:24:25,279 --> 00:24:26,640
level permission

655
00:24:26,640 --> 00:24:28,080
and

656
00:24:28,080 --> 00:24:31,200
also providing some runtime feedback to

657
00:24:31,200 --> 00:24:32,480
developers say if they're trying to

658
00:24:32,480 --> 00:24:34,320
register a protected broadcast and

659
00:24:34,320 --> 00:24:35,600
doesn't actually

660
00:24:35,600 --> 00:24:37,679
register to you know help identify these

661
00:24:37,679 --> 00:24:41,039
cases in the future and also when making

662
00:24:41,039 --> 00:24:43,600
significant changes to the system and

663
00:24:43,600 --> 00:24:45,120
ensuring that there is good

664
00:24:45,120 --> 00:24:47,039
communication

665
00:24:47,039 --> 00:24:50,480
and here is our contact info and thank

666
00:24:50,480 --> 00:24:55,480
you very much for attending our talk

