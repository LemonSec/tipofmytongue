1
00:00:01,130 --> 00:00:14,690
[Music]

2
00:00:16,560 --> 00:00:19,439
hello everyone my name is tao yan today

3
00:00:19,439 --> 00:00:21,680
we are going to share our research about

4
00:00:21,680 --> 00:00:24,000
how to pump ios and the sql server with

5
00:00:24,000 --> 00:00:26,640
the vulnerabilities in microsoft jet

6
00:00:26,640 --> 00:00:28,000
database engine

7
00:00:28,000 --> 00:00:30,400
our topic is give me a second injection

8
00:00:30,400 --> 00:00:32,960
i shall upon is in the second server

9
00:00:32,960 --> 00:00:35,120
the name of this topic is from the

10
00:00:35,120 --> 00:00:39,120
famous greek scientist archimedes he has

11
00:00:39,120 --> 00:00:41,360
a famous assertion to demonstrate the

12
00:00:41,360 --> 00:00:44,079
principle of the level give me the pleas

13
00:00:44,079 --> 00:00:46,399
to stand i shall move the earth

14
00:00:46,399 --> 00:00:48,640
i will say pawning is and the second

15
00:00:48,640 --> 00:00:51,280
server is as difficult as moving the

16
00:00:51,280 --> 00:00:55,840
earth we both need a precondition

17
00:00:56,079 --> 00:00:58,879
here's our agenda we'll firstly

18
00:00:58,879 --> 00:01:01,440
introduce why we do this research and

19
00:01:01,440 --> 00:01:03,680
then we will introduce what new

20
00:01:03,680 --> 00:01:05,920
discoveries we found in ios and sequel

21
00:01:05,920 --> 00:01:07,119
server

22
00:01:07,119 --> 00:01:09,840
after that we will show examples to

23
00:01:09,840 --> 00:01:12,640
prove our discoveries at last we will

24
00:01:12,640 --> 00:01:16,080
summarize the whole topic

25
00:01:16,159 --> 00:01:18,640
who are we we are security researchers

26
00:01:18,640 --> 00:01:20,880
from palo alto networks

27
00:01:20,880 --> 00:01:22,799
we have spoken at many different

28
00:01:22,799 --> 00:01:24,720
security conferences

29
00:01:24,720 --> 00:01:28,880
black cancer grass blue head recon etc

30
00:01:28,880 --> 00:01:31,920
we are also regular top vulnerability

31
00:01:31,920 --> 00:01:34,720
contributors for microsoft adobe apple

32
00:01:34,720 --> 00:01:37,679
and so on

33
00:01:38,799 --> 00:01:40,560
let's start from the motivation and

34
00:01:40,560 --> 00:01:43,040
background

35
00:01:43,119 --> 00:01:46,159
our research started from these three

36
00:01:46,159 --> 00:01:48,640
questions new attack surface in ios and

37
00:01:48,640 --> 00:01:49,840
sequel server

38
00:01:49,840 --> 00:01:52,479
can we do more with the second injection

39
00:01:52,479 --> 00:01:54,960
who can use microsoft jet database

40
00:01:54,960 --> 00:01:58,000
engine we will show how we connect

41
00:01:58,000 --> 00:01:59,840
these three

42
00:01:59,840 --> 00:02:04,159
synced unrelated topics together

43
00:02:06,000 --> 00:02:07,520
attack surface

44
00:02:07,520 --> 00:02:09,280
in is and the secret server are very

45
00:02:09,280 --> 00:02:11,760
limited especially for memory corruption

46
00:02:11,760 --> 00:02:14,080
vulnerabilities you can see

47
00:02:14,080 --> 00:02:15,840
in this figure

48
00:02:15,840 --> 00:02:18,400
the last memory corruption vulnerability

49
00:02:18,400 --> 00:02:24,319
is appeared in 2009 over 10 years ago

50
00:02:24,640 --> 00:02:26,959
attacking is and the second server

51
00:02:26,959 --> 00:02:30,480
directly is much too difficult so what

52
00:02:30,480 --> 00:02:32,560
if we have a circuit injection in

53
00:02:32,560 --> 00:02:33,920
advance

54
00:02:33,920 --> 00:02:36,720
circuit injection can be used to

55
00:02:36,720 --> 00:02:38,720
execute any

56
00:02:38,720 --> 00:02:41,599
intended circuit queries

57
00:02:41,599 --> 00:02:44,720
in target database

58
00:02:44,720 --> 00:02:47,440
usually it is used to

59
00:02:47,440 --> 00:02:50,480
view data in the database especially in

60
00:02:50,480 --> 00:02:51,680
access

61
00:02:51,680 --> 00:02:53,840
for more powerful databases like secure

62
00:02:53,840 --> 00:02:55,120
server

63
00:02:55,120 --> 00:02:57,360
only if you have high database

64
00:02:57,360 --> 00:02:59,360
privileges in the second injection

65
00:02:59,360 --> 00:03:02,319
otherwise you cannot execute shell

66
00:03:02,319 --> 00:03:03,760
commands

67
00:03:03,760 --> 00:03:04,959
even more

68
00:03:04,959 --> 00:03:07,519
you cannot execute the native code in

69
00:03:07,519 --> 00:03:08,720
the public

70
00:03:08,720 --> 00:03:12,400
application or database process

71
00:03:12,400 --> 00:03:13,200
but

72
00:03:13,200 --> 00:03:15,599
if there is a vulnerability in database

73
00:03:15,599 --> 00:03:19,839
engine we could get that capability

74
00:03:20,480 --> 00:03:23,599
it's easy to bring the jet database to

75
00:03:23,599 --> 00:03:24,959
the stage

76
00:03:24,959 --> 00:03:27,840
firstly it's very old and not well

77
00:03:27,840 --> 00:03:31,280
maintained but still massively used

78
00:03:31,280 --> 00:03:34,480
secondly it is native supported on all

79
00:03:34,480 --> 00:03:38,879
windows versions ms jet 4.0 is installed

80
00:03:38,879 --> 00:03:42,959
by default on all windows versions

81
00:03:45,599 --> 00:03:47,840
so the next question is

82
00:03:47,840 --> 00:03:50,080
who are using jet

83
00:03:50,080 --> 00:03:52,400
since there's a vulnerability in jet

84
00:03:52,400 --> 00:03:55,280
database engine it will also be affected

85
00:03:55,280 --> 00:03:58,080
the first option is office office supply

86
00:03:58,080 --> 00:04:02,239
and interface to that users to to link

87
00:04:02,239 --> 00:04:05,920
an external data database source

88
00:04:05,920 --> 00:04:09,599
but it is not ideal targeted since

89
00:04:09,599 --> 00:04:12,720
uh firstly it cannot execute second

90
00:04:12,720 --> 00:04:14,319
queries

91
00:04:14,319 --> 00:04:16,000
on the

92
00:04:16,000 --> 00:04:17,358
new linked

93
00:04:17,358 --> 00:04:19,040
database file

94
00:04:19,040 --> 00:04:20,238
second

95
00:04:20,238 --> 00:04:23,199
the protective view mode of office will

96
00:04:23,199 --> 00:04:26,160
mitigate the external

97
00:04:26,160 --> 00:04:28,479
link source

98
00:04:28,479 --> 00:04:31,199
the other option is double script but it

99
00:04:31,199 --> 00:04:32,479
is not

100
00:04:32,479 --> 00:04:34,000
not also

101
00:04:34,000 --> 00:04:35,280
a

102
00:04:35,280 --> 00:04:39,040
ideal target since it can only crash w

103
00:04:39,040 --> 00:04:40,720
script locally

104
00:04:40,720 --> 00:04:42,639
and it did not break the security

105
00:04:42,639 --> 00:04:45,199
boundary

106
00:04:46,960 --> 00:04:49,199
what about access and second server

107
00:04:49,199 --> 00:04:52,320
since we have known jet in the default

108
00:04:52,320 --> 00:04:55,199
database subsystem used by microsoft

109
00:04:55,199 --> 00:04:56,320
access

110
00:04:56,320 --> 00:04:57,040
so

111
00:04:57,040 --> 00:05:00,320
it is possible to use vulnerabilities in

112
00:05:00,320 --> 00:05:03,120
jet database engine to attack ios and

113
00:05:03,120 --> 00:05:06,240
the sql server by executing

114
00:05:06,240 --> 00:05:09,440
any sega queries on remote controllable

115
00:05:09,440 --> 00:05:11,039
database

116
00:05:11,039 --> 00:05:14,159
the answer is yes

117
00:05:14,560 --> 00:05:16,720
now we come to the main dish

118
00:05:16,720 --> 00:05:20,000
we will introduce the new remote remote

119
00:05:20,000 --> 00:05:23,280
attack service on ios and sequel server

120
00:05:23,280 --> 00:05:25,039
and this chapter will

121
00:05:25,039 --> 00:05:28,800
detail what the new discovery

122
00:05:28,800 --> 00:05:30,880
is how secure

123
00:05:30,880 --> 00:05:33,840
how cell injection connect circle uh is

124
00:05:33,840 --> 00:05:36,880
and the second server with jet winner

125
00:05:36,880 --> 00:05:40,080
jet database engine

126
00:05:40,960 --> 00:05:43,600
let's see the cross database second

127
00:05:43,600 --> 00:05:47,280
query in xs and second server first in

128
00:05:47,280 --> 00:05:49,440
access database

129
00:05:49,440 --> 00:05:51,840
it's very straightforward you just need

130
00:05:51,840 --> 00:05:52,720
to

131
00:05:52,720 --> 00:05:55,440
put external database before the table

132
00:05:55,440 --> 00:05:56,800
name

133
00:05:56,800 --> 00:06:01,280
in second server there are three ways

134
00:06:01,440 --> 00:06:04,240
to do that open data source open your

135
00:06:04,240 --> 00:06:05,120
set

136
00:06:05,120 --> 00:06:06,560
at link server

137
00:06:06,560 --> 00:06:08,720
in each way

138
00:06:08,720 --> 00:06:10,880
you can

139
00:06:10,880 --> 00:06:11,759
set

140
00:06:11,759 --> 00:06:14,720
external database to the data source

141
00:06:14,720 --> 00:06:18,000
parameter database parameter date src

142
00:06:18,000 --> 00:06:21,000
parameter

143
00:06:22,560 --> 00:06:23,840
access

144
00:06:23,840 --> 00:06:28,639
use jet provider by default so

145
00:06:28,639 --> 00:06:30,319
it will use

146
00:06:30,319 --> 00:06:34,080
ms yet 4.0 to do the cross database

147
00:06:34,080 --> 00:06:36,880
second query

148
00:06:37,120 --> 00:06:40,240
is it possible to use jet to do cross

149
00:06:40,240 --> 00:06:42,319
database query in second server the

150
00:06:42,319 --> 00:06:44,080
answer is yes

151
00:06:44,080 --> 00:06:46,560
you only need to set the provider with

152
00:06:46,560 --> 00:06:50,080
these strings jet 4.0

153
00:06:50,080 --> 00:06:50,880
or

154
00:06:50,880 --> 00:06:54,479
sae 12.0 or 6.0

155
00:06:54,479 --> 00:06:57,199
to let second server with

156
00:06:57,199 --> 00:06:58,560
related

157
00:06:58,560 --> 00:07:00,080
jet database

158
00:07:00,080 --> 00:07:04,080
engine to do the cross database second

159
00:07:04,080 --> 00:07:05,120
query

160
00:07:05,120 --> 00:07:07,599
it is very interesting right second

161
00:07:07,599 --> 00:07:10,880
server can use jet database engine to do

162
00:07:10,880 --> 00:07:14,560
cross database segger queries

163
00:07:14,560 --> 00:07:17,199
assigning the provider with the

164
00:07:17,199 --> 00:07:19,360
uh and using

165
00:07:19,360 --> 00:07:22,319
msjet to do cross database query in

166
00:07:22,319 --> 00:07:25,360
access and the sega server is not enough

167
00:07:25,360 --> 00:07:27,680
if external database can be on the

168
00:07:27,680 --> 00:07:30,639
remote server that will be a very

169
00:07:30,639 --> 00:07:32,639
powerful capability since

170
00:07:32,639 --> 00:07:34,240
the attackers can

171
00:07:34,240 --> 00:07:37,840
control the database file remotely

172
00:07:37,840 --> 00:07:40,000
in the document

173
00:07:40,000 --> 00:07:41,520
we see

174
00:07:41,520 --> 00:07:45,039
both local file system and shared

175
00:07:45,039 --> 00:07:48,639
network folders are supported

176
00:07:48,639 --> 00:07:53,759
let's check the code in msjet 4.0

177
00:07:53,759 --> 00:07:55,919
there's a function named error try open

178
00:07:55,919 --> 00:08:00,319
database is responsible to parse

179
00:08:00,319 --> 00:08:02,240
external database

180
00:08:02,240 --> 00:08:04,560
if we set a unc path

181
00:08:04,560 --> 00:08:07,280
and it will

182
00:08:07,360 --> 00:08:08,240
check

183
00:08:08,240 --> 00:08:10,560
if it is a foreign database and go to

184
00:08:10,560 --> 00:08:12,960
different branches

185
00:08:12,960 --> 00:08:15,440
and you can see msjet

186
00:08:15,440 --> 00:08:21,360
440 module msrd and ms excel

187
00:08:21,440 --> 00:08:24,240
will be called but finally all different

188
00:08:24,240 --> 00:08:26,400
code branches will call

189
00:08:26,400 --> 00:08:28,240
createfile

190
00:08:28,240 --> 00:08:29,599
to open

191
00:08:29,599 --> 00:08:33,198
the external database file

192
00:08:33,200 --> 00:08:37,360
similarly in msgs 12.0

193
00:08:37,360 --> 00:08:39,839
it will also

194
00:08:39,839 --> 00:08:44,560
creep file to open external database

195
00:08:45,760 --> 00:08:49,200
usually windows use smb to parse unc

196
00:08:49,200 --> 00:08:52,160
path in most applications

197
00:08:52,160 --> 00:08:54,320
but there's a hidden feature for

198
00:08:54,320 --> 00:08:57,519
createfile with unc pass in ios and the

199
00:08:57,519 --> 00:09:01,360
sql server it both use smb

200
00:09:01,360 --> 00:09:03,519
and surprisingly

201
00:09:03,519 --> 00:09:04,880
also use

202
00:09:04,880 --> 00:09:07,440
webdv

203
00:09:07,440 --> 00:09:10,880
you can see it firstly will connect 445

204
00:09:10,880 --> 00:09:15,600
and 139 part with smb protocol and then

205
00:09:15,600 --> 00:09:19,519
if filled and it will

206
00:09:19,519 --> 00:09:24,080
connect h0 part with webdv protocol very

207
00:09:24,080 --> 00:09:26,720
interesting right

208
00:09:26,720 --> 00:09:29,040
if we set up a smb

209
00:09:29,040 --> 00:09:31,760
server it works on windows 7 fields on

210
00:09:31,760 --> 00:09:33,040
windows 10

211
00:09:33,040 --> 00:09:34,160
we guess

212
00:09:34,160 --> 00:09:36,640
there might be some mitigations to

213
00:09:36,640 --> 00:09:39,440
mitigate smb

214
00:09:39,440 --> 00:09:42,240
ntlm harsh leak issues

215
00:09:42,240 --> 00:09:46,720
if we set up a webdv server

216
00:09:46,800 --> 00:09:49,680
is and the secret server successfully

217
00:09:49,680 --> 00:09:50,880
get the

218
00:09:50,880 --> 00:09:53,680
external database file

219
00:09:53,680 --> 00:09:56,880
from the remote web dv server it works

220
00:09:56,880 --> 00:09:58,640
all

221
00:09:58,640 --> 00:10:01,760
on all windows versions

222
00:10:01,760 --> 00:10:05,440
web dv and smb are not our story you can

223
00:10:05,440 --> 00:10:08,560
see there's a more feature in ms excel

224
00:10:08,560 --> 00:10:09,839
for zero

225
00:10:09,839 --> 00:10:13,360
and you can see there's a

226
00:10:13,920 --> 00:10:18,000
net protocol type function it will check

227
00:10:18,000 --> 00:10:22,079
if the input is a ftp protocol if yes it

228
00:10:22,079 --> 00:10:25,040
will call net download to local

229
00:10:25,040 --> 00:10:26,640
function

230
00:10:26,640 --> 00:10:30,079
to download the remote database file

231
00:10:30,079 --> 00:10:33,040
from the ftp server this function

232
00:10:33,040 --> 00:10:34,240
will call

233
00:10:34,240 --> 00:10:36,720
apis in windinet

234
00:10:36,720 --> 00:10:39,040
to communicate with the remote ftp

235
00:10:39,040 --> 00:10:41,360
server you can see

236
00:10:41,360 --> 00:10:43,360
is nsx server

237
00:10:43,360 --> 00:10:48,160
connect 21 part with ftp protocol

238
00:10:49,120 --> 00:10:51,440
after we know access and the sql server

239
00:10:51,440 --> 00:10:53,920
support cross database query and

240
00:10:53,920 --> 00:10:56,160
external database can be on the remote

241
00:10:56,160 --> 00:10:58,800
web dv server let's see what will happen

242
00:10:58,800 --> 00:11:00,959
about cross status query in circuit

243
00:11:00,959 --> 00:11:03,200
injection

244
00:11:03,200 --> 00:11:05,839
this is a typical second injection case

245
00:11:05,839 --> 00:11:07,200
in access

246
00:11:07,200 --> 00:11:08,880
you can see we

247
00:11:08,880 --> 00:11:11,040
in we use id

248
00:11:11,040 --> 00:11:12,079
to

249
00:11:12,079 --> 00:11:16,320
inject or customize secondary

250
00:11:16,320 --> 00:11:18,320
after the injection

251
00:11:18,320 --> 00:11:20,880
both original second query and the

252
00:11:20,880 --> 00:11:23,519
injected circuit query will be executed

253
00:11:23,519 --> 00:11:27,480
by asb code

254
00:11:28,880 --> 00:11:32,240
let's see how is and asp deal with the

255
00:11:32,240 --> 00:11:37,279
injected second query in is process

256
00:11:37,760 --> 00:11:40,640
the functions in sp real core module may

257
00:11:40,640 --> 00:11:44,959
be script msado odbc32 and finally it

258
00:11:44,959 --> 00:11:46,240
will call

259
00:11:46,240 --> 00:11:48,480
try open database

260
00:11:48,480 --> 00:11:50,320
to open external

261
00:11:50,320 --> 00:11:51,519
database

262
00:11:51,519 --> 00:11:54,000
as as we just introduced

263
00:11:54,000 --> 00:11:57,040
this function will call craig file

264
00:11:57,040 --> 00:11:59,519
finally

265
00:12:01,040 --> 00:12:02,959
this is the typical circuit injection

266
00:12:02,959 --> 00:12:05,200
case in circuit server

267
00:12:05,200 --> 00:12:08,399
similarly we also use id to inject

268
00:12:08,399 --> 00:12:10,959
or customize security

269
00:12:10,959 --> 00:12:13,200
and

270
00:12:13,200 --> 00:12:16,240
both original second query and injected

271
00:12:16,240 --> 00:12:17,519
second query

272
00:12:17,519 --> 00:12:19,360
will be

273
00:12:19,360 --> 00:12:21,519
executed by asb code

274
00:12:21,519 --> 00:12:23,680
in this case we

275
00:12:23,680 --> 00:12:24,800
use

276
00:12:24,800 --> 00:12:29,680
open data source as an example and it

277
00:12:29,680 --> 00:12:32,480
said the provider we we the

278
00:12:32,480 --> 00:12:36,720
sae 12.0 to let the secret server use

279
00:12:36,720 --> 00:12:39,040
msg at 12.0

280
00:12:39,040 --> 00:12:40,320
to

281
00:12:40,320 --> 00:12:43,120
do cross database second query on the

282
00:12:43,120 --> 00:12:46,560
uh remote database file on the

283
00:12:46,560 --> 00:12:49,518
webdav server

284
00:12:50,399 --> 00:12:52,959
different with the access case it is a

285
00:12:52,959 --> 00:12:56,320
secure server process that deal with the

286
00:12:56,320 --> 00:12:59,200
injected second query if we

287
00:12:59,200 --> 00:13:03,040
use jet 4.0 and the provider you can see

288
00:13:03,040 --> 00:13:05,279
sega server will use

289
00:13:05,279 --> 00:13:08,680
jet open database function in

290
00:13:08,680 --> 00:13:13,440
msj.40 module to open external database

291
00:13:13,440 --> 00:13:17,279
finally it will calculate file

292
00:13:17,600 --> 00:13:20,560
if we use jet 12.0

293
00:13:20,560 --> 00:13:23,040
and the provider you can see circuit

294
00:13:23,040 --> 00:13:28,399
server will use functions in easy core

295
00:13:28,399 --> 00:13:30,800
to open external database finally it

296
00:13:30,800 --> 00:13:32,800
will also call createfile as we showed

297
00:13:32,800 --> 00:13:35,800
before

298
00:13:36,720 --> 00:13:38,399
let's summarize

299
00:13:38,399 --> 00:13:40,959
this new attack surface

300
00:13:40,959 --> 00:13:44,000
it grant attackers the ability to

301
00:13:44,000 --> 00:13:46,639
execute any second queries

302
00:13:46,639 --> 00:13:49,600
on any attacker controllable database in

303
00:13:49,600 --> 00:13:52,000
ios and the second server based on a

304
00:13:52,000 --> 00:13:53,760
second injection

305
00:13:53,760 --> 00:13:55,120
it means

306
00:13:55,120 --> 00:13:57,120
vulnerabilities in

307
00:13:57,120 --> 00:13:59,199
jet database engine can be used to

308
00:13:59,199 --> 00:14:01,680
attack ios and a second server

309
00:14:01,680 --> 00:14:03,600
so we do fuzzing

310
00:14:03,600 --> 00:14:06,240
based on the mutations on circuit

311
00:14:06,240 --> 00:14:09,440
queries and jet database files

312
00:14:09,440 --> 00:14:12,639
with this strategy we have found

313
00:14:12,639 --> 00:14:16,000
around 100 vulnerabilities

314
00:14:16,000 --> 00:14:18,399
it's a huge goal in mind

315
00:14:18,399 --> 00:14:21,279
hope you can find your own

316
00:14:21,279 --> 00:14:23,279
vulnerabilities to attack ios and the

317
00:14:23,279 --> 00:14:28,360
second server with this method

318
00:14:32,480 --> 00:14:35,680
now we come to introduce three attack

319
00:14:35,680 --> 00:14:38,639
scenarios under this new attack surface

320
00:14:38,639 --> 00:14:40,480
in the real world

321
00:14:40,480 --> 00:14:43,519
in each scenario we will detail the

322
00:14:43,519 --> 00:14:45,519
new attack service impact and the

323
00:14:45,519 --> 00:14:48,160
requirements as well as show the

324
00:14:48,160 --> 00:14:50,720
examples of vulnerability details

325
00:14:50,720 --> 00:14:53,920
including the demos

326
00:14:54,000 --> 00:14:58,880
first scenario is an access

327
00:14:58,880 --> 00:15:00,720
in this scenario

328
00:15:00,720 --> 00:15:04,480
all set up by by default except you have

329
00:15:04,480 --> 00:15:07,440
a second injection

330
00:15:07,600 --> 00:15:09,839
and our

331
00:15:09,839 --> 00:15:13,600
jet 4.0 components are vulnerable and

332
00:15:13,600 --> 00:15:16,560
you only need one single web request to

333
00:15:16,560 --> 00:15:20,079
cause is u.s

334
00:15:20,079 --> 00:15:23,600
inflict or rce with the same privilege

335
00:15:23,600 --> 00:15:27,519
of the is process although you can only

336
00:15:27,519 --> 00:15:29,680
use select query

337
00:15:29,680 --> 00:15:32,320
in this scenario but it is good enough

338
00:15:32,320 --> 00:15:35,360
to find vulnerabilities

339
00:15:35,360 --> 00:15:38,079
let's see an example

340
00:15:38,079 --> 00:15:40,880
you can see only one

341
00:15:40,880 --> 00:15:44,240
select query is injected

342
00:15:44,240 --> 00:15:47,920
uh with the second injection and

343
00:15:47,920 --> 00:15:52,639
it will execute the second query

344
00:15:52,800 --> 00:15:55,920
on the remote uh external

345
00:15:55,920 --> 00:15:58,160
database on the webdv server and it

346
00:15:58,160 --> 00:16:00,079
successfully call

347
00:16:00,079 --> 00:16:01,199
caused

348
00:16:01,199 --> 00:16:05,040
the is crash

349
00:16:05,440 --> 00:16:09,839
let's analyze this vulnerability briefly

350
00:16:12,480 --> 00:16:16,000
you can see ex is from the esi

351
00:16:16,000 --> 00:16:16,880
plus

352
00:16:16,880 --> 00:16:21,199
34 offset esi is a table mobile object

353
00:16:21,199 --> 00:16:23,519
and a record address

354
00:16:23,519 --> 00:16:27,600
set the value at the offset 34 of table

355
00:16:27,600 --> 00:16:30,079
mobile object

356
00:16:30,079 --> 00:16:33,360
and if this function return 1

357
00:16:33,360 --> 00:16:35,600
the code will go to the branch of

358
00:16:35,600 --> 00:16:38,320
accessing the invalid memory and cause

359
00:16:38,320 --> 00:16:40,560
crash

360
00:16:40,560 --> 00:16:42,560
please keep it in mind we will introduce

361
00:16:42,560 --> 00:16:45,120
it later

362
00:16:45,120 --> 00:16:47,360
comparing the

363
00:16:47,360 --> 00:16:50,079
memory dump of table mode object mover

364
00:16:50,079 --> 00:16:53,199
object before and after you can see

365
00:16:53,199 --> 00:16:56,479
record address

366
00:16:57,279 --> 00:16:58,720
function will

367
00:16:58,720 --> 00:17:00,079
set

368
00:17:00,079 --> 00:17:04,959
an invalid value at the offset 3 four

369
00:17:04,959 --> 00:17:06,000
it's

370
00:17:06,000 --> 00:17:07,359
uh

371
00:17:07,359 --> 00:17:09,039
you can see here

372
00:17:09,039 --> 00:17:10,160
it is

373
00:17:10,160 --> 00:17:14,319
an end address of a hip right

374
00:17:17,280 --> 00:17:20,799
so record address is responsible to

375
00:17:20,799 --> 00:17:23,199
parse record information from the

376
00:17:23,199 --> 00:17:25,679
database

377
00:17:27,039 --> 00:17:29,520
you can see

378
00:17:31,600 --> 00:17:33,760
it is the record information from the

379
00:17:33,760 --> 00:17:37,120
database and

380
00:17:37,120 --> 00:17:39,840
this field will be

381
00:17:39,840 --> 00:17:41,360
parsed

382
00:17:41,360 --> 00:17:44,400
to calculate the length

383
00:17:44,400 --> 00:17:45,200
but

384
00:17:45,200 --> 00:17:47,840
it did not check

385
00:17:47,840 --> 00:17:51,200
the equal condition right

386
00:17:51,200 --> 00:17:52,960
since

387
00:17:52,960 --> 00:17:54,480
the lens

388
00:17:54,480 --> 00:17:57,280
is equal a0 after

389
00:17:57,280 --> 00:18:00,000
the calculation it did not check so the

390
00:18:00,000 --> 00:18:03,039
code will go to here to set the invalid

391
00:18:03,039 --> 00:18:04,720
value of the

392
00:18:04,720 --> 00:18:06,960
uh

393
00:18:07,360 --> 00:18:11,280
3 4 offset

394
00:18:11,440 --> 00:18:15,200
this is not the worst case

395
00:18:15,200 --> 00:18:19,760
you can see here 808 4800 will make the

396
00:18:19,760 --> 00:18:22,080
this function return one and

397
00:18:22,080 --> 00:18:26,240
call the code will go to the

398
00:18:26,240 --> 00:18:28,559
invalid memory access

399
00:18:28,559 --> 00:18:30,720
code branch and calls crash

400
00:18:30,720 --> 00:18:32,559
if

401
00:18:32,559 --> 00:18:36,080
the word value is say 0 0 and it will

402
00:18:36,080 --> 00:18:38,799
make the function return 3

403
00:18:38,799 --> 00:18:41,200
and

404
00:18:41,520 --> 00:18:42,559
the

405
00:18:42,559 --> 00:18:45,840
code will cause that herald and then no

406
00:18:45,840 --> 00:18:48,639
crash happens

407
00:18:49,039 --> 00:18:50,720
so you can see

408
00:18:50,720 --> 00:18:53,039
only one byte change

409
00:18:53,039 --> 00:18:56,480
can cause is crash

410
00:18:56,480 --> 00:18:58,080
if c8

411
00:18:58,080 --> 00:19:00,880
in original file

412
00:19:00,880 --> 00:19:02,799
there's no crash

413
00:19:02,799 --> 00:19:06,320
and there's if if it is

414
00:19:06,320 --> 00:19:09,520
a 4 8 byte

415
00:19:09,520 --> 00:19:11,280
it will cause crash

416
00:19:11,280 --> 00:19:14,000
this is the first time you see the power

417
00:19:14,000 --> 00:19:16,799
of the database file mutations regarding

418
00:19:16,799 --> 00:19:21,280
to the select query nothing special

419
00:19:21,280 --> 00:19:22,840
so let's see the

420
00:19:22,840 --> 00:19:27,280
demo firstly it's a web server address

421
00:19:27,280 --> 00:19:30,000
and it's is

422
00:19:30,000 --> 00:19:31,200
process

423
00:19:31,200 --> 00:19:34,160
we use windy back to attach the is

424
00:19:34,160 --> 00:19:36,640
process

425
00:19:37,280 --> 00:19:39,760
and then

426
00:19:39,760 --> 00:19:42,320
execute

427
00:19:42,480 --> 00:19:43,679
this

428
00:19:43,679 --> 00:19:46,559
web request

429
00:19:46,960 --> 00:19:49,840
and then we can see this is a

430
00:19:49,840 --> 00:19:52,320
external database file on the remote web

431
00:19:52,320 --> 00:19:56,320
dv server and we execute

432
00:19:56,320 --> 00:19:58,559
the query

433
00:19:58,559 --> 00:20:00,160
in our browser

434
00:20:00,160 --> 00:20:01,679
and

435
00:20:01,679 --> 00:20:05,720
okay is crashed

436
00:20:08,240 --> 00:20:12,000
scenario 2 is and the second server

437
00:20:12,000 --> 00:20:14,240
in this scenario

438
00:20:14,240 --> 00:20:15,280
there are

439
00:20:15,280 --> 00:20:18,400
two cases 32 bit and

440
00:20:18,400 --> 00:20:22,000
6 4 bit in 32 bit

441
00:20:22,000 --> 00:20:24,240
second server all jet components are

442
00:20:24,240 --> 00:20:25,679
vulnerable

443
00:20:25,679 --> 00:20:30,640
in 6 4 bit second server only ac core

444
00:20:31,039 --> 00:20:32,720
means the

445
00:20:32,720 --> 00:20:34,400
jet 12.0

446
00:20:34,400 --> 00:20:37,919
is a vulnerable

447
00:20:38,080 --> 00:20:40,400
in second server or

448
00:20:40,400 --> 00:20:43,840
secure queries as a party no restriction

449
00:20:43,840 --> 00:20:46,640
about the second query and

450
00:20:46,640 --> 00:20:48,559
if

451
00:20:48,559 --> 00:20:53,280
the ad hoc is turned on by default

452
00:20:53,600 --> 00:20:58,480
if the ad hoc turn on and you don't need

453
00:20:58,480 --> 00:21:01,360
any database privilege in the circuit

454
00:21:01,360 --> 00:21:04,159
injection public is good enough

455
00:21:04,159 --> 00:21:06,960
also you only need one single web

456
00:21:06,960 --> 00:21:10,080
request to cause circuit server

457
00:21:10,080 --> 00:21:12,400
the u.s

458
00:21:12,400 --> 00:21:15,600
infillic or rce with the same privilege

459
00:21:15,600 --> 00:21:17,840
of the

460
00:21:18,799 --> 00:21:21,840
second server process

461
00:21:21,840 --> 00:21:24,720
here is an example you can see we

462
00:21:24,720 --> 00:21:26,799
injected

463
00:21:26,799 --> 00:21:30,320
once query update and we use open data

464
00:21:30,320 --> 00:21:32,240
source to let

465
00:21:32,240 --> 00:21:35,400
sega server use ms jet

466
00:21:35,400 --> 00:21:39,360
12.0 to execute this query

467
00:21:39,360 --> 00:21:40,400
on the

468
00:21:40,400 --> 00:21:41,760
remote

469
00:21:41,760 --> 00:21:43,440
database file

470
00:21:43,440 --> 00:21:46,559
on the webdv server and successfully

471
00:21:46,559 --> 00:21:48,879
cause

472
00:21:49,039 --> 00:21:50,799
the

473
00:21:50,799 --> 00:21:54,320
second server process crash

474
00:21:56,400 --> 00:21:59,360
some information of the

475
00:21:59,360 --> 00:22:03,200
this vulnerability you can see edi is an

476
00:22:03,200 --> 00:22:05,120
invalid value

477
00:22:05,120 --> 00:22:08,320
and it is um

478
00:22:09,840 --> 00:22:13,360
it is from this object comparing before

479
00:22:13,360 --> 00:22:15,200
after we see

480
00:22:15,200 --> 00:22:17,360
the

481
00:22:17,360 --> 00:22:19,760
before something happened

482
00:22:19,760 --> 00:22:20,480
the

483
00:22:20,480 --> 00:22:22,960
this value with the

484
00:22:22,960 --> 00:22:25,679
yellow color is valid

485
00:22:25,679 --> 00:22:26,799
but

486
00:22:26,799 --> 00:22:28,720
something happens

487
00:22:28,720 --> 00:22:32,960
this value is overflowed and we can see

488
00:22:32,960 --> 00:22:39,120
also 0 become 1b 1b there must something

489
00:22:39,120 --> 00:22:41,600
wrong happens let's see

490
00:22:41,600 --> 00:22:43,760
further

491
00:22:43,760 --> 00:22:47,280
this small piece of code is

492
00:22:47,280 --> 00:22:51,360
responsible to update

493
00:22:51,520 --> 00:22:53,600
some values in the memory

494
00:22:53,600 --> 00:22:56,559
in a loop in each loop

495
00:22:56,559 --> 00:23:00,000
it will add the memory value

496
00:23:00,000 --> 00:23:03,919
with a fixed value 1b

497
00:23:03,919 --> 00:23:05,600
in each

498
00:23:05,600 --> 00:23:08,400
the loop count a3e

499
00:23:08,400 --> 00:23:10,000
so let's

500
00:23:10,000 --> 00:23:12,240
investigate

501
00:23:12,240 --> 00:23:14,159
what the correct

502
00:23:14,159 --> 00:23:17,120
loop cut you can see here

503
00:23:17,120 --> 00:23:20,400
the value the values with yellow color

504
00:23:20,400 --> 00:23:23,919
after our investigation it is the column

505
00:23:23,919 --> 00:23:26,240
value from the

506
00:23:26,240 --> 00:23:28,080
database file

507
00:23:28,080 --> 00:23:30,559
and it should be updated

508
00:23:30,559 --> 00:23:32,400
but

509
00:23:32,400 --> 00:23:33,600
the

510
00:23:33,600 --> 00:23:37,679
values with red color there are some

511
00:23:37,679 --> 00:23:40,480
memory pointers over there it should not

512
00:23:40,480 --> 00:23:42,640
be

513
00:23:42,640 --> 00:23:45,679
updated so the cracked

514
00:23:45,679 --> 00:23:49,200
lubecon should be the hex 2 8

515
00:23:49,200 --> 00:23:51,520
but actually

516
00:23:51,520 --> 00:23:54,640
loop count is 3e so

517
00:23:54,640 --> 00:23:57,600
there's auto boundary right happen

518
00:23:57,600 --> 00:23:58,559
where the

519
00:23:58,559 --> 00:24:01,600
loopcon 3e from is it controllable is

520
00:24:01,600 --> 00:24:05,679
there any check let's see

521
00:24:05,679 --> 00:24:08,960
no check at all

522
00:24:09,600 --> 00:24:12,640
you can see the loopcom 3e

523
00:24:12,640 --> 00:24:16,320
is defined in the database file

524
00:24:16,320 --> 00:24:20,640
and it is read directly from to this

525
00:24:20,640 --> 00:24:23,840
memory structure and the code

526
00:24:23,840 --> 00:24:26,880
read the loop country e

527
00:24:26,880 --> 00:24:29,760
directly from this memory structure and

528
00:24:29,760 --> 00:24:30,960
do the

529
00:24:30,960 --> 00:24:33,840
loop

530
00:24:34,640 --> 00:24:38,320
so if we set 3e with a bigger value then

531
00:24:38,320 --> 00:24:40,720
more content in the memory will be out

532
00:24:40,720 --> 00:24:43,919
of boundary overflow

533
00:24:45,279 --> 00:24:47,919
so this is the second time you see the

534
00:24:47,919 --> 00:24:51,200
power of mutations on the database file

535
00:24:51,200 --> 00:24:54,080
this case is more complicated comparing

536
00:24:54,080 --> 00:24:55,360
the first one

537
00:24:55,360 --> 00:24:57,919
you need to do the mutations

538
00:24:57,919 --> 00:24:59,679
in the two positions

539
00:24:59,679 --> 00:25:02,000
in the first position you need to set

540
00:25:02,000 --> 00:25:03,120
the

541
00:25:03,120 --> 00:25:04,640
valid

542
00:25:04,640 --> 00:25:05,760
column

543
00:25:05,760 --> 00:25:07,520
information here

544
00:25:07,520 --> 00:25:09,279
in the second position

545
00:25:09,279 --> 00:25:10,080
you

546
00:25:10,080 --> 00:25:12,559
you need to set up

547
00:25:12,559 --> 00:25:14,799
a value larger than

548
00:25:14,799 --> 00:25:19,120
2 8 to make the overflow

549
00:25:19,200 --> 00:25:21,200
regarding to the update

550
00:25:21,200 --> 00:25:24,240
nothing special about it

551
00:25:24,240 --> 00:25:26,840
just update a second

552
00:25:26,840 --> 00:25:28,559
query

553
00:25:28,559 --> 00:25:31,600
let's see the demo

554
00:25:32,960 --> 00:25:34,720
web server address

555
00:25:34,720 --> 00:25:37,520
uh second server process

556
00:25:37,520 --> 00:25:38,960
and we

557
00:25:38,960 --> 00:25:42,000
use window back to attach the second

558
00:25:42,000 --> 00:25:43,679
server process

559
00:25:43,679 --> 00:25:46,720
and execute

560
00:25:47,600 --> 00:25:49,360
the

561
00:25:49,360 --> 00:25:50,960
circuit queries

562
00:25:50,960 --> 00:25:52,159
with the

563
00:25:52,159 --> 00:25:55,559
circuit injection

564
00:26:06,240 --> 00:26:07,600
okay

565
00:26:07,600 --> 00:26:10,640
we successfully caused the second server

566
00:26:10,640 --> 00:26:13,520
process crash

567
00:26:21,200 --> 00:26:24,799
the scenario 3 is and a web show usually

568
00:26:24,799 --> 00:26:29,200
if you have a web shell you can execute

569
00:26:29,200 --> 00:26:32,159
command with a command module in the web

570
00:26:32,159 --> 00:26:36,159
shell but but sometimes there are

571
00:26:36,159 --> 00:26:38,720
mitigations and

572
00:26:38,720 --> 00:26:40,559
restrictions to

573
00:26:40,559 --> 00:26:43,520
prevent web shell command module

574
00:26:43,520 --> 00:26:47,360
execution in this case

575
00:26:47,360 --> 00:26:48,720
native code

576
00:26:48,720 --> 00:26:51,360
execution capability is important

577
00:26:51,360 --> 00:26:54,480
since it can bypass any

578
00:26:54,480 --> 00:26:58,320
restriction or mitigation

579
00:26:58,320 --> 00:27:00,960
in the memory

580
00:27:01,039 --> 00:27:04,320
so you can use jit vulnerabilities

581
00:27:04,320 --> 00:27:06,799
in the web shell to get the

582
00:27:06,799 --> 00:27:09,600
native code execution capability in the

583
00:27:09,600 --> 00:27:11,600
web shell case

584
00:27:11,600 --> 00:27:12,400
all

585
00:27:12,400 --> 00:27:15,679
uh jet components are

586
00:27:15,679 --> 00:27:18,799
vulnerable and

587
00:27:18,799 --> 00:27:20,640
all second queries

588
00:27:20,640 --> 00:27:23,840
are supported no restriction

589
00:27:23,840 --> 00:27:26,799
for the second query and you can use

590
00:27:26,799 --> 00:27:28,080
a

591
00:27:28,080 --> 00:27:30,080
database module in the

592
00:27:30,080 --> 00:27:32,559
web shell to trigger

593
00:27:32,559 --> 00:27:35,520
here is uh an example you can see we set

594
00:27:35,520 --> 00:27:39,039
provider and we set we set data source

595
00:27:39,039 --> 00:27:43,440
and execute those four segment queries

596
00:27:43,440 --> 00:27:45,440
in the web shell one time

597
00:27:45,440 --> 00:27:46,960
and then

598
00:27:46,960 --> 00:27:50,640
successfully caused the is crash

599
00:27:50,640 --> 00:27:53,279
pay attention the crash point there here

600
00:27:53,279 --> 00:27:55,140
is a core ex

601
00:27:55,140 --> 00:27:56,320
[Music]

602
00:27:56,320 --> 00:27:58,080
very interesting right

603
00:27:58,080 --> 00:28:01,440
it's very close to

604
00:28:01,440 --> 00:28:04,080
exploitation

605
00:28:04,080 --> 00:28:08,480
and we we can control the e x to uh

606
00:28:08,480 --> 00:28:09,360
to

607
00:28:09,360 --> 00:28:10,080
to

608
00:28:10,080 --> 00:28:12,720
four one zero four and zero

609
00:28:12,720 --> 00:28:14,880
and

610
00:28:15,840 --> 00:28:17,039
if we

611
00:28:17,039 --> 00:28:20,480
pull the hips free and and

612
00:28:20,480 --> 00:28:22,399
it will

613
00:28:22,399 --> 00:28:23,840
execute

614
00:28:23,840 --> 00:28:25,279
um

615
00:28:25,279 --> 00:28:28,840
arbitrary code in the is

616
00:28:28,840 --> 00:28:31,520
process some

617
00:28:31,520 --> 00:28:35,039
uh briefly analysis uh for the

618
00:28:35,039 --> 00:28:38,000
vulnerability and you can see ex is from

619
00:28:38,000 --> 00:28:40,240
ecx ecs

620
00:28:40,240 --> 00:28:44,320
ecx is the page description object and

621
00:28:44,320 --> 00:28:45,919
the zero offset

622
00:28:45,919 --> 00:28:46,960
of

623
00:28:46,960 --> 00:28:50,159
this object is the

624
00:28:50,159 --> 00:28:52,159
v table

625
00:28:52,159 --> 00:28:53,039
and

626
00:28:53,039 --> 00:28:55,600
after something happened you can see the

627
00:28:55,600 --> 00:28:59,200
wait table is overflowed by

628
00:28:59,200 --> 00:29:00,880
a string

629
00:29:00,880 --> 00:29:02,159
this string

630
00:29:02,159 --> 00:29:04,640
is exactly same

631
00:29:04,640 --> 00:29:07,279
with the screen in the update second

632
00:29:07,279 --> 00:29:11,279
query very interesting right

633
00:29:11,600 --> 00:29:13,600
let's see

634
00:29:13,600 --> 00:29:15,520
what happened

635
00:29:15,520 --> 00:29:18,799
there's a memory copy over here

636
00:29:18,799 --> 00:29:20,799
and eight

637
00:29:20,799 --> 00:29:26,000
you the size of source buffer

638
00:29:26,000 --> 00:29:28,240
add the copy size

639
00:29:28,240 --> 00:29:30,640
you see

640
00:29:31,679 --> 00:29:32,720
no

641
00:29:32,720 --> 00:29:34,240
check

642
00:29:34,240 --> 00:29:36,799
for this size no validation no

643
00:29:36,799 --> 00:29:38,240
verification

644
00:29:38,240 --> 00:29:41,679
just copy directly it's a very classical

645
00:29:41,679 --> 00:29:45,120
vulnerability pattern

646
00:29:45,600 --> 00:29:48,000
let's see more about the

647
00:29:48,000 --> 00:29:50,640
destination address and buffer

648
00:29:50,640 --> 00:29:53,279
the destination buffer size is the one

649
00:29:53,279 --> 00:29:54,399
zero zero zero

650
00:29:54,399 --> 00:29:57,039
but the destination address is from the

651
00:29:57,039 --> 00:30:01,039
offset bcc so there are only four three

652
00:30:01,039 --> 00:30:03,600
four bytes left but the copy size is

653
00:30:03,600 --> 00:30:05,760
four for e from the

654
00:30:05,760 --> 00:30:06,840
source

655
00:30:06,840 --> 00:30:09,039
buffer so

656
00:30:09,039 --> 00:30:11,919
there is overflow happened

657
00:30:11,919 --> 00:30:14,080
just right after the

658
00:30:14,080 --> 00:30:16,000
destination buffer

659
00:30:16,000 --> 00:30:19,279
this is a page description object and we

660
00:30:19,279 --> 00:30:20,880
can

661
00:30:20,880 --> 00:30:23,200
control any value

662
00:30:23,200 --> 00:30:27,440
and just exactly override

663
00:30:27,440 --> 00:30:31,279
the page description object

664
00:30:32,000 --> 00:30:35,120
so this is the first time you see the

665
00:30:35,120 --> 00:30:38,480
power of mutations on second queries

666
00:30:38,480 --> 00:30:40,559
you can see

667
00:30:40,559 --> 00:30:42,640
only one update can

668
00:30:42,640 --> 00:30:45,600
cause overflow but those three

669
00:30:45,600 --> 00:30:47,600
circuit queries

670
00:30:47,600 --> 00:30:52,080
make a successful hip layout to make the

671
00:30:52,080 --> 00:30:55,120
page description object right just right

672
00:30:55,120 --> 00:30:58,559
after the destination buffer

673
00:30:58,559 --> 00:31:01,120
if you want also do a

674
00:31:01,120 --> 00:31:02,840
successful hip

675
00:31:02,840 --> 00:31:06,720
growing i suggest you

676
00:31:06,720 --> 00:31:09,600
execute multiple server queries in one

677
00:31:09,600 --> 00:31:11,279
database connection

678
00:31:11,279 --> 00:31:12,080
and

679
00:31:12,080 --> 00:31:14,240
also try cache

680
00:31:14,240 --> 00:31:18,840
is necessary in the web show

681
00:31:19,440 --> 00:31:21,760
let's see the demo

682
00:31:21,760 --> 00:31:25,200
also the target address

683
00:31:25,200 --> 00:31:28,240
and the is process

684
00:31:28,240 --> 00:31:29,440
same

685
00:31:29,440 --> 00:31:33,679
use windy back to attach the is process

686
00:31:33,679 --> 00:31:36,000
and execute

687
00:31:36,000 --> 00:31:39,600
those four second queries

688
00:31:45,279 --> 00:31:46,880
yeah the

689
00:31:46,880 --> 00:31:50,320
external database on the web dv server

690
00:31:50,320 --> 00:31:53,439
and execute

691
00:31:57,679 --> 00:31:59,120
okay

692
00:31:59,120 --> 00:32:02,240
is crash at the core

693
00:32:02,240 --> 00:32:05,760
ex very interesting

694
00:32:09,360 --> 00:32:11,919
a short summary for vulnerabilities in

695
00:32:11,919 --> 00:32:14,799
three attack scenarios they are very old

696
00:32:14,799 --> 00:32:17,279
over 20 years old

697
00:32:17,279 --> 00:32:18,640
it worked

698
00:32:18,640 --> 00:32:23,120
it works from windows xp to windows 10

699
00:32:23,200 --> 00:32:26,240
they are not hard to exploit since

700
00:32:26,240 --> 00:32:29,600
there are no or weak mitigations

701
00:32:29,600 --> 00:32:33,679
for example no cfg at all in msg at 4.0

702
00:32:33,679 --> 00:32:35,519
components

703
00:32:35,519 --> 00:32:38,720
the damage is severe since a successful

704
00:32:38,720 --> 00:32:42,799
exploitation can execute any code

705
00:32:42,799 --> 00:32:45,679
in ios and the sql server process

706
00:32:45,679 --> 00:32:48,720
since is and the second server

707
00:32:48,720 --> 00:32:49,519
has

708
00:32:49,519 --> 00:32:53,360
sc impersonate privilege capability

709
00:32:53,360 --> 00:32:56,159
enabled by default so it's easy to use

710
00:32:56,159 --> 00:32:58,960
token kidnapping technique to escalate

711
00:32:58,960 --> 00:33:01,039
the privilege to

712
00:33:01,039 --> 00:33:02,080
system

713
00:33:02,080 --> 00:33:04,880
so it is possible

714
00:33:04,880 --> 00:33:06,000
from

715
00:33:06,000 --> 00:33:11,320
a second injection to remote system

716
00:33:12,480 --> 00:33:15,200
let's summarize the whole topic

717
00:33:15,200 --> 00:33:18,080
webdv is it a feature of vulnerability

718
00:33:18,080 --> 00:33:20,880
it's always controversial

719
00:33:20,880 --> 00:33:23,760
actually web dv opens a new world for

720
00:33:23,760 --> 00:33:26,159
attackers to remotely attack is in the

721
00:33:26,159 --> 00:33:28,799
second server

722
00:33:28,799 --> 00:33:29,760
we

723
00:33:29,760 --> 00:33:32,320
reported a lot of

724
00:33:32,320 --> 00:33:35,919
jet vulnerabilities to attack rs

725
00:33:35,919 --> 00:33:38,320
and the second server to microsoft

726
00:33:38,320 --> 00:33:40,320
microsoft will patch

727
00:33:40,320 --> 00:33:43,039
the vulnerability one by one or patch

728
00:33:43,039 --> 00:33:45,679
this web dv feature vlc

729
00:33:45,679 --> 00:33:47,200
second

730
00:33:47,200 --> 00:33:50,080
backwards compatibility

731
00:33:50,080 --> 00:33:53,039
it is very friendly to users

732
00:33:53,039 --> 00:33:55,440
but it always brings

733
00:33:55,440 --> 00:33:57,679
security issues

734
00:33:57,679 --> 00:33:59,760
together

735
00:33:59,760 --> 00:34:02,559
third defense and mitigation especially

736
00:34:02,559 --> 00:34:04,799
for systems which are no longer

737
00:34:04,799 --> 00:34:07,279
supported by microsoft

738
00:34:07,279 --> 00:34:10,159
i would say pay more attention to web tv

739
00:34:10,159 --> 00:34:13,520
disable outbound web db traffic on your

740
00:34:13,520 --> 00:34:16,320
server if you don't need it

741
00:34:16,320 --> 00:34:18,320
next time when you see a second

742
00:34:18,320 --> 00:34:20,079
injection

743
00:34:20,079 --> 00:34:23,040
think more about it

744
00:34:23,040 --> 00:34:26,399
there's a one more thing

745
00:34:26,639 --> 00:34:28,800
uh we want to discuss the security

746
00:34:28,800 --> 00:34:30,399
boundary

747
00:34:30,399 --> 00:34:31,839
when you report

748
00:34:31,839 --> 00:34:34,079
a vulnerability to microsoft they will

749
00:34:34,079 --> 00:34:35,520
ask you

750
00:34:35,520 --> 00:34:39,599
how and what secret boundary it breaks

751
00:34:39,599 --> 00:34:41,280
we reported

752
00:34:41,280 --> 00:34:44,159
a lot of jet database vulnerabilities to

753
00:34:44,159 --> 00:34:45,839
microsoft

754
00:34:45,839 --> 00:34:49,040
in the past several months sometimes

755
00:34:49,040 --> 00:34:51,040
microsoft reply

756
00:34:51,040 --> 00:34:52,719
not break

757
00:34:52,719 --> 00:34:55,040
the security boundary either close the

758
00:34:55,040 --> 00:34:59,359
case or keep pending the cases

759
00:34:59,359 --> 00:35:01,920
what's the essence of jet vulnerability

760
00:35:01,920 --> 00:35:04,720
think about it from our perspective

761
00:35:04,720 --> 00:35:06,119
it makes

762
00:35:06,119 --> 00:35:09,520
security execution eco

763
00:35:09,520 --> 00:35:12,160
native code execution it is a very

764
00:35:12,160 --> 00:35:14,079
powerful capability since there are a

765
00:35:14,079 --> 00:35:16,480
lot of systems

766
00:35:16,480 --> 00:35:19,280
components using jet and allow circuit

767
00:35:19,280 --> 00:35:20,880
query execution

768
00:35:20,880 --> 00:35:23,119
in today's presentation

769
00:35:23,119 --> 00:35:24,720
we combined

770
00:35:24,720 --> 00:35:27,359
circuit injection with webdv bringing

771
00:35:27,359 --> 00:35:30,240
circuit query execution capability to

772
00:35:30,240 --> 00:35:33,119
ios and the sql server it means we can

773
00:35:33,119 --> 00:35:35,680
get the native code execution capability

774
00:35:35,680 --> 00:35:38,960
in ios and the server server with jet

775
00:35:38,960 --> 00:35:41,280
vulnerabilities

776
00:35:41,280 --> 00:35:44,000
this is a remote attack surface

777
00:35:44,000 --> 00:35:46,320
the security boundary is from second

778
00:35:46,320 --> 00:35:49,920
injection to remote system

779
00:35:49,920 --> 00:35:51,839
how about the local

780
00:35:51,839 --> 00:35:54,079
attack surface

781
00:35:54,079 --> 00:35:55,359
think about it

782
00:35:55,359 --> 00:35:57,200
we leave a hint here

783
00:35:57,200 --> 00:35:59,760
it may become a part of our next

784
00:35:59,760 --> 00:36:02,240
blackhead talk

785
00:36:02,240 --> 00:36:04,880
before the end we want to thank

786
00:36:04,880 --> 00:36:08,240
our colleague jubin

787
00:36:08,560 --> 00:36:10,079
that's

788
00:36:10,079 --> 00:36:13,760
the end of our presentation

789
00:36:13,760 --> 00:36:17,240
thanks for listening

