1
00:00:01,180 --> 00:00:14,719
[Music]

2
00:00:16,480 --> 00:00:19,039
hello everyone welcome to our talk scan

3
00:00:19,039 --> 00:00:21,680
ranger misuse error handling needing to

4
00:00:21,680 --> 00:00:24,800
kill mu kvm escape this is a joint work

5
00:00:24,800 --> 00:00:27,279
with anti-security 19-year lab and

6
00:00:27,279 --> 00:00:30,240
georgian university

7
00:00:30,240 --> 00:00:33,840
first who am i i'm similarly a security

8
00:00:33,840 --> 00:00:36,399
engineer from anti-security last year

9
00:00:36,399 --> 00:00:39,440
lab and my main research interest is

10
00:00:39,440 --> 00:00:42,160
virtualization security fuzzing and the

11
00:00:42,160 --> 00:00:44,719
program analysis technology

12
00:00:44,719 --> 00:00:47,120
and the welcome security researchers

13
00:00:47,120 --> 00:00:50,160
submitted vulnerabilities to enter group

14
00:00:50,160 --> 00:00:52,480
security response center

15
00:00:52,480 --> 00:00:54,559
my partner guardian pound will introduce

16
00:00:54,559 --> 00:00:58,640
himself in his presentation part

17
00:00:58,640 --> 00:01:01,760
this is the agenda of our talk firstly i

18
00:01:01,760 --> 00:01:03,840
will introduce the background of our

19
00:01:03,840 --> 00:01:07,520
talk including qmu nvme virtual device

20
00:01:07,520 --> 00:01:10,880
and an error handling code usage in qmu

21
00:01:10,880 --> 00:01:13,600
second i will introduce net we got

22
00:01:13,600 --> 00:01:18,520
inspired from cye 202025084

23
00:01:18,640 --> 00:01:21,280
which is an use used after free

24
00:01:21,280 --> 00:01:24,320
vulnerability because of the misused

25
00:01:24,320 --> 00:01:26,799
error handling code i will introduce

26
00:01:26,799 --> 00:01:29,520
that we apply the directed grid box

27
00:01:29,520 --> 00:01:31,920
fuzzing to find the vulnerabilities in

28
00:01:31,920 --> 00:01:33,520
error handling code

29
00:01:33,520 --> 00:01:36,079
within the help of the fuzzing we found

30
00:01:36,079 --> 00:01:39,280
an uninitialized free vulnerability we

31
00:01:39,280 --> 00:01:41,360
named it the scan ranger and i will

32
00:01:41,360 --> 00:01:44,079
introduce the vulnerability details

33
00:01:44,079 --> 00:01:46,640
suddenly my co-speaker governing pound

34
00:01:46,640 --> 00:01:49,840
will introduce the exploited development

35
00:01:49,840 --> 00:01:52,479
finally he will do the conclusion and

36
00:01:52,479 --> 00:01:54,720
the discussion of the error handling

37
00:01:54,720 --> 00:01:57,759
code directed rebox fuzzing and an

38
00:01:57,759 --> 00:01:58,880
exploit

39
00:01:58,880 --> 00:02:03,439
primitive we used in this exploit

40
00:02:06,240 --> 00:02:08,639
ok let's begin this part i will

41
00:02:08,639 --> 00:02:10,878
introduce in the background

42
00:02:10,878 --> 00:02:12,640
including cumulative and error handling

43
00:02:12,640 --> 00:02:14,480
code

44
00:02:14,480 --> 00:02:18,480
qmo is a generic and open source machine

45
00:02:18,480 --> 00:02:21,440
emulator and virtualizer it supports

46
00:02:21,440 --> 00:02:26,280
multiple architectures such as ia32

47
00:02:26,280 --> 00:02:31,360
x864 mips spark um risk and so on

48
00:02:31,360 --> 00:02:33,440
furthermore it includes a huge

49
00:02:33,440 --> 00:02:35,599
connection of immunity

50
00:02:35,599 --> 00:02:37,120
devices

51
00:02:37,120 --> 00:02:40,000
including nvme controller cumule is

52
00:02:40,000 --> 00:02:42,640
widely used in security research for

53
00:02:42,640 --> 00:02:46,560
example iot firmware emulation af q mu

54
00:02:46,560 --> 00:02:49,280
for black box fuzzing dynamic

55
00:02:49,280 --> 00:02:52,400
instrumentation platform however kim has

56
00:02:52,400 --> 00:02:55,360
a lot of attack service especially

57
00:02:55,360 --> 00:02:58,560
device emulation net attackers can write

58
00:02:58,560 --> 00:03:01,840
data to host a machine from gas machine

59
00:03:01,840 --> 00:03:04,080
high quality vulnerability allows

60
00:03:04,080 --> 00:03:07,519
attacker to break out from vm to control

61
00:03:07,519 --> 00:03:10,000
the host

62
00:03:10,239 --> 00:03:12,959
our vulnerability locates in unime

63
00:03:12,959 --> 00:03:15,440
virtual device here we briefly

64
00:03:15,440 --> 00:03:18,720
introduced the miami device protocol

65
00:03:18,720 --> 00:03:21,680
mme defines an optimized register

66
00:03:21,680 --> 00:03:24,560
interface command and feature set to

67
00:03:24,560 --> 00:03:27,680
communicate between guests and hosts for

68
00:03:27,680 --> 00:03:29,920
pcie ssds

69
00:03:29,920 --> 00:03:31,360
it minimizes

70
00:03:31,360 --> 00:03:34,159
mmi rise in command submission and the

71
00:03:34,159 --> 00:03:35,599
compilation path

72
00:03:35,599 --> 00:03:38,560
mime has efficient support for io

73
00:03:38,560 --> 00:03:42,640
utilization architectures like sr ioe

74
00:03:42,640 --> 00:03:45,040
which makes it more and more popular in

75
00:03:45,040 --> 00:03:49,359
ssds device emulation

76
00:03:50,000 --> 00:03:53,439
our work is was inspired by coe

77
00:03:53,439 --> 00:03:56,000
202025084

78
00:03:56,000 --> 00:03:59,200
which is used after free vulnerability

79
00:03:59,200 --> 00:04:01,519
because of the misused error handling

80
00:04:01,519 --> 00:04:02,319
code

81
00:04:02,319 --> 00:04:05,200
this flaw occurs while setting up an usb

82
00:04:05,200 --> 00:04:06,239
package

83
00:04:06,239 --> 00:04:08,319
because it doesn't check the return

84
00:04:08,319 --> 00:04:11,519
status of usb package

85
00:04:11,519 --> 00:04:14,080
map function which exists a error

86
00:04:14,080 --> 00:04:17,199
handling code net free runtime memory

87
00:04:17,199 --> 00:04:19,600
then it uses the fluid memory in the

88
00:04:19,600 --> 00:04:21,519
later code which leads

89
00:04:21,519 --> 00:04:24,160
to an uaf vulnerability

90
00:04:24,160 --> 00:04:27,280
this fraud results in a deny of service

91
00:04:27,280 --> 00:04:28,160
and

92
00:04:28,160 --> 00:04:31,919
potentially exploitable so we can see

93
00:04:31,919 --> 00:04:33,280
in this code

94
00:04:33,280 --> 00:04:34,320
if first

95
00:04:34,320 --> 00:04:37,919
in vocal usb packing mapped and

96
00:04:37,919 --> 00:04:40,800
when it fails qmi will fix it by

97
00:04:40,800 --> 00:04:43,040
checking the return status and if it

98
00:04:43,040 --> 00:04:45,680
fails it will destroy the exterior

99
00:04:45,680 --> 00:04:48,479
structures and return the error code and

100
00:04:48,479 --> 00:04:50,080
to stop the

101
00:04:50,080 --> 00:04:53,680
following following process

102
00:04:55,520 --> 00:04:57,280
let's see the detail

103
00:04:57,280 --> 00:05:00,800
when usb package map fails you will free

104
00:05:00,800 --> 00:05:04,320
as glo structure however the ordinary

105
00:05:04,320 --> 00:05:06,960
vulnerable code doesn't check the return

106
00:05:06,960 --> 00:05:08,880
status of usb

107
00:05:08,880 --> 00:05:12,080
packet map then you will call usb handle

108
00:05:12,080 --> 00:05:15,520
package which will use sdl structure

109
00:05:15,520 --> 00:05:18,960
that leads to a uf or liability so from

110
00:05:18,960 --> 00:05:21,280
the code flow we can know that it was

111
00:05:21,280 --> 00:05:24,720
the foreign sdl structure and then use

112
00:05:24,720 --> 00:05:26,080
the xgl

113
00:05:26,080 --> 00:05:28,639
structure so it will cause a uf

114
00:05:28,639 --> 00:05:31,520
vulnerability

115
00:05:32,160 --> 00:05:34,160
and in the usb

116
00:05:34,160 --> 00:05:36,320
map function we can see that

117
00:05:36,320 --> 00:05:39,600
if dma memory map fails you will go to

118
00:05:39,600 --> 00:05:42,800
error label and and in the error label

119
00:05:42,800 --> 00:05:45,600
body you will call usb packet unmapped

120
00:05:45,600 --> 00:05:48,639
function to free sdl structure and the

121
00:05:48,639 --> 00:05:51,199
return negative number of the arrow

122
00:05:51,199 --> 00:05:54,880
status this is a traditional

123
00:05:54,880 --> 00:05:57,360
error handling code pattern in qmu the

124
00:05:57,360 --> 00:05:59,840
caller is responsible for the character

125
00:05:59,840 --> 00:06:02,800
usage of the function net contains error

126
00:06:02,800 --> 00:06:05,520
handling code

127
00:06:05,520 --> 00:06:09,960
inspired by serie 202025084

128
00:06:10,000 --> 00:06:12,880
we observed that the error handling code

129
00:06:12,880 --> 00:06:15,919
uses in the cumula code and we found the

130
00:06:15,919 --> 00:06:18,319
net and the error handling code can be

131
00:06:18,319 --> 00:06:22,400
classified into the following categories

132
00:06:22,400 --> 00:06:23,600
resource

133
00:06:23,600 --> 00:06:26,319
release and the debugger report another

134
00:06:26,319 --> 00:06:28,960
resource release category can be further

135
00:06:28,960 --> 00:06:32,240
classified into a into release memory or

136
00:06:32,240 --> 00:06:37,120
file handler or release the locks

137
00:06:37,520 --> 00:06:39,440
we can see that

138
00:06:39,440 --> 00:06:41,919
the debugging report code just does the

139
00:06:41,919 --> 00:06:43,840
debugging report and it doesn't operate

140
00:06:43,840 --> 00:06:46,479
in the runtime resource so this category

141
00:06:46,479 --> 00:06:48,720
want to cross memory corruption harmful

142
00:06:48,720 --> 00:06:51,120
behavior to qmu

143
00:06:51,120 --> 00:06:52,720
but in the

144
00:06:52,720 --> 00:06:54,960
in release memory of file handling

145
00:06:54,960 --> 00:06:57,199
category the error handling code will

146
00:06:57,199 --> 00:06:59,280
release the runtime memory or the file

147
00:06:59,280 --> 00:07:02,720
handler in this code sample we can see

148
00:07:02,720 --> 00:07:05,080
in this code sample you will call

149
00:07:05,080 --> 00:07:10,000
cumulio3 to for in a buffer origin

150
00:07:10,080 --> 00:07:12,240
memory and then you will have close in

151
00:07:12,240 --> 00:07:14,080
the file handler

152
00:07:14,080 --> 00:07:16,639
so this behavior may lead to a uf

153
00:07:16,639 --> 00:07:19,680
vulnerability if the color code doesn't

154
00:07:19,680 --> 00:07:22,240
check the return value or status and the

155
00:07:22,240 --> 00:07:24,560
misuse in the freedom memory we

156
00:07:24,560 --> 00:07:27,360
introduced the

157
00:07:27,560 --> 00:07:32,000
ce202025084 is in this situation

158
00:07:32,000 --> 00:07:34,880
and in the release rocks the

159
00:07:34,880 --> 00:07:36,960
error handling code will release locks

160
00:07:36,960 --> 00:07:37,919
in the

161
00:07:37,919 --> 00:07:38,880
in the

162
00:07:38,880 --> 00:07:41,599
encoder this behavior may lead to a risk

163
00:07:41,599 --> 00:07:43,840
condition

164
00:07:43,840 --> 00:07:46,720
so from the core samples we can see that

165
00:07:46,720 --> 00:07:49,520
misused error handling code may lead to

166
00:07:49,520 --> 00:07:52,319
multiple memory corruption vulnerability

167
00:07:52,319 --> 00:07:53,440
case

168
00:07:53,440 --> 00:07:56,160
therefore we think we think about how we

169
00:07:56,160 --> 00:08:00,720
can detect this type of vulnerability

170
00:08:00,720 --> 00:08:03,440
so here we use the directed read box

171
00:08:03,440 --> 00:08:06,160
fasting in this fashion situation that

172
00:08:06,160 --> 00:08:07,440
we want to know in the functioning

173
00:08:07,440 --> 00:08:09,280
process we'll go through the error

174
00:08:09,280 --> 00:08:13,680
handling code and all its size

175
00:08:13,680 --> 00:08:18,319
we firstly do the same take analysis

176
00:08:18,319 --> 00:08:20,400
for the code samples in the error handle

177
00:08:20,400 --> 00:08:22,879
encoder we can observe that the error

178
00:08:22,879 --> 00:08:25,520
handling code in queue is always jump

179
00:08:25,520 --> 00:08:28,240
from go to statement therefore we

180
00:08:28,240 --> 00:08:30,639
positively locate and go to statement in

181
00:08:30,639 --> 00:08:32,240
the code of the

182
00:08:32,240 --> 00:08:34,719
virtual device we only fast one virtual

183
00:08:34,719 --> 00:08:37,680
device each time

184
00:08:37,839 --> 00:08:40,719
then we do a backward slicing analysis

185
00:08:40,719 --> 00:08:42,880
to get in the corner side to the go to

186
00:08:42,880 --> 00:08:45,360
statement and then the code body of the

187
00:08:45,360 --> 00:08:48,000
photo statement

188
00:08:48,000 --> 00:08:51,360
we use the af glue as our fasting engine

189
00:08:51,360 --> 00:08:54,080
and then the information created at step

190
00:08:54,080 --> 00:08:56,640
two is used to assign feedback to the

191
00:08:56,640 --> 00:09:00,160
directed fusing engine

192
00:09:00,959 --> 00:09:03,440
this is the whole fasting

193
00:09:03,440 --> 00:09:06,640
flow in a pre-processing step in the

194
00:09:06,640 --> 00:09:09,279
cold body of the gold statement is the

195
00:09:09,279 --> 00:09:13,200
target size of our fasting process

196
00:09:13,200 --> 00:09:15,760
which will be used to calculate the seed

197
00:09:15,760 --> 00:09:16,800
distance

198
00:09:16,800 --> 00:09:19,279
and in the fuzzy loop step we are based

199
00:09:19,279 --> 00:09:21,519
on the distance guided

200
00:09:21,519 --> 00:09:24,560
structure to perform the power schedule

201
00:09:24,560 --> 00:09:27,680
and we take the color side coverage into

202
00:09:27,680 --> 00:09:30,080
account to make the parting process

203
00:09:30,080 --> 00:09:32,000
go through all the error handling code

204
00:09:32,000 --> 00:09:36,160
and its quarter size code

205
00:09:36,160 --> 00:09:38,640
so with the help of a directed blue box

206
00:09:38,640 --> 00:09:42,000
buzzing we found an uninitialized free

207
00:09:42,000 --> 00:09:44,640
vulnerability and we named it scan

208
00:09:44,640 --> 00:09:48,480
ranger it is load it locates in oem eos

209
00:09:48,480 --> 00:09:49,440
device

210
00:09:49,440 --> 00:09:52,080
this is caused because of the misused

211
00:09:52,080 --> 00:09:55,279
error handling and the ume is used to

212
00:09:55,279 --> 00:09:58,320
provide virtual solidus data drives

213
00:09:58,320 --> 00:09:59,440
service

214
00:09:59,440 --> 00:10:02,480
which as we know it it is ssds

215
00:10:02,480 --> 00:10:05,040
and we used this vulnerability to win

216
00:10:05,040 --> 00:10:06,320
kim f cup

217
00:10:06,320 --> 00:10:08,000
2020

218
00:10:08,000 --> 00:10:10,800
ton contest and it was fixed at the

219
00:10:10,800 --> 00:10:12,440
version

220
00:10:12,440 --> 00:10:16,560
5.2.0 of qmil because we submitted the

221
00:10:16,560 --> 00:10:19,360
vulnerability to camp cup official so

222
00:10:19,360 --> 00:10:21,600
there is no sewing assignment

223
00:10:21,600 --> 00:10:25,360
the exploit environment is ubuntu a 20

224
00:10:25,360 --> 00:10:27,920
doctor 04 hoster

225
00:10:27,920 --> 00:10:29,519
and then the guest is in the same

226
00:10:29,519 --> 00:10:32,640
environment and it has full protection

227
00:10:32,640 --> 00:10:37,600
such as the nx aslr and the pie

228
00:10:37,760 --> 00:10:41,120
this vulnerability locates in nvme map

229
00:10:41,120 --> 00:10:44,000
prp function the function has two type

230
00:10:44,000 --> 00:10:44,839
of

231
00:10:44,839 --> 00:10:47,120
initialization everyone you will

232
00:10:47,120 --> 00:10:49,040
initialize the ioc

233
00:10:49,040 --> 00:10:51,120
and the type two you will need a sdg

234
00:10:51,120 --> 00:10:52,959
list

235
00:10:52,959 --> 00:10:56,880
the three uh green box in this is the

236
00:10:56,880 --> 00:11:00,560
expert expected error handling a series

237
00:11:00,560 --> 00:11:03,200
metal free pair so it firstly

238
00:11:03,200 --> 00:11:06,560
initializing the type 2 sdn list

239
00:11:06,560 --> 00:11:09,360
and if it steps into error condition you

240
00:11:09,360 --> 00:11:10,560
will go to

241
00:11:10,560 --> 00:11:13,920
unmap label to foreign qst structure

242
00:11:13,920 --> 00:11:18,320
which is initialized in the buff code

243
00:11:18,320 --> 00:11:19,120
but

244
00:11:19,120 --> 00:11:21,519
what if the code flow doesn't obey the

245
00:11:21,519 --> 00:11:24,480
merit repair actually we can control the

246
00:11:24,480 --> 00:11:28,320
code flow to firstly initialize work

247
00:11:28,320 --> 00:11:31,360
and then we can control it to go to the

248
00:11:31,360 --> 00:11:35,440
error handling code to free usd

249
00:11:35,440 --> 00:11:38,959
structure and in this time the qsc is

250
00:11:38,959 --> 00:11:42,000
in uninitialized status which leads to

251
00:11:42,000 --> 00:11:45,040
an uninitialized free vulnerability

252
00:11:45,040 --> 00:11:47,519
the misused error handling code leads to

253
00:11:47,519 --> 00:11:48,560
an

254
00:11:48,560 --> 00:11:51,680
increase inconsistent metallic free pair

255
00:11:51,680 --> 00:11:54,399
so this is the whole

256
00:11:54,399 --> 00:11:57,839
details of this vulnerability and the my

257
00:11:57,839 --> 00:12:00,240
presentation path is over and my

258
00:12:00,240 --> 00:12:02,320
co-speaker guardian power will continue

259
00:12:02,320 --> 00:12:05,120
this talk he will introduce the exploit

260
00:12:05,120 --> 00:12:07,040
development and

261
00:12:07,040 --> 00:12:09,760
do some conclusion and discussion thank

262
00:12:09,760 --> 00:12:11,839
you

263
00:12:12,000 --> 00:12:14,480
hello everyone my name is gao ningpan

264
00:12:14,480 --> 00:12:16,480
from zhojiang university and and

265
00:12:16,480 --> 00:12:20,000
security lawyer lab i'm also cpr player

266
00:12:20,000 --> 00:12:23,120
at aaa and aoe team my background is

267
00:12:23,120 --> 00:12:25,440
trying to find vulnerabilities in

268
00:12:25,440 --> 00:12:28,000
hypervisors such as cumule and

269
00:12:28,000 --> 00:12:30,560
virtualbox you can contact with me on

270
00:12:30,560 --> 00:12:32,480
twitter there

271
00:12:32,480 --> 00:12:34,480
and in this section i'm going to talk

272
00:12:34,480 --> 00:12:36,880
about how to exploit this kind of

273
00:12:36,880 --> 00:12:39,600
misused error handling bug and then

274
00:12:39,600 --> 00:12:41,600
escape the virtual machine

275
00:12:41,600 --> 00:12:44,160
and we have a quite big challenges here

276
00:12:44,160 --> 00:12:46,800
and we finally make it overcome this

277
00:12:46,800 --> 00:12:50,079
problem and i think it is a interesting

278
00:12:50,079 --> 00:12:53,680
exploit and now i will get stats

279
00:12:53,680 --> 00:12:56,480
first let's see what happens in these

280
00:12:56,480 --> 00:12:58,959
error handling functions cumulative

281
00:12:58,959 --> 00:13:00,079
destroy

282
00:13:00,079 --> 00:13:03,519
as talked before by inconsistent mellow

283
00:13:03,519 --> 00:13:06,959
free peer the arguments qst here

284
00:13:06,959 --> 00:13:10,480
represents a kind of initialized memory

285
00:13:10,480 --> 00:13:12,880
and you can see that in this function

286
00:13:12,880 --> 00:13:16,000
it's just to free something and just

287
00:13:16,000 --> 00:13:19,040
clear the memory it's dangerous you can

288
00:13:19,040 --> 00:13:22,160
see the red box here it's just a free

289
00:13:22,160 --> 00:13:24,720
the first element sg in the

290
00:13:24,720 --> 00:13:27,760
uninitialized variable and you know it's

291
00:13:27,760 --> 00:13:30,320
an initialized value but if you

292
00:13:30,320 --> 00:13:32,720
if you can control execution environment

293
00:13:32,720 --> 00:13:35,360
leading up to that it is initialized

294
00:13:35,360 --> 00:13:37,519
because just to put something there

295
00:13:37,519 --> 00:13:38,959
ahead of time

296
00:13:38,959 --> 00:13:42,160
and that means if the attacker can

297
00:13:42,160 --> 00:13:44,639
control the initialized memory you can

298
00:13:44,639 --> 00:13:47,760
find anything else but though just a

299
00:13:47,760 --> 00:13:50,880
single initialized favorite bit it's

300
00:13:50,880 --> 00:13:53,279
totally enough for the attacker to

301
00:13:53,279 --> 00:13:56,399
launch the guests to host via mesquite

302
00:13:56,399 --> 00:13:58,560
and i'm going to discuss the exploit in

303
00:13:58,560 --> 00:14:00,399
the net

304
00:14:00,399 --> 00:14:02,639
and here i want to show you the port

305
00:14:02,639 --> 00:14:05,440
that how we trigger this path in this

306
00:14:05,440 --> 00:14:08,480
pocket the malicious guest will simply

307
00:14:08,480 --> 00:14:12,079
create a nvme command for the device

308
00:14:12,079 --> 00:14:15,199
and we will set invariants in this

309
00:14:15,199 --> 00:14:18,480
command and we could let the mapping

310
00:14:18,480 --> 00:14:21,920
fail and then turn to the error handling

311
00:14:21,920 --> 00:14:24,160
so we can see that accumula crashed in

312
00:14:24,160 --> 00:14:27,279
this way as a design map of service the

313
00:14:27,279 --> 00:14:29,760
nice bright spot we want to get code

314
00:14:29,760 --> 00:14:32,079
execution on the host

315
00:14:32,079 --> 00:14:34,959
well it turns out that it's not easy

316
00:14:34,959 --> 00:14:36,639
we need to confirm whether this

317
00:14:36,639 --> 00:14:39,199
structure is controllable by the

318
00:14:39,199 --> 00:14:42,000
attacker so we want to know where does

319
00:14:42,000 --> 00:14:45,760
qsc comes from by checking the source

320
00:14:45,760 --> 00:14:49,760
code and found the reference of the nvme

321
00:14:49,760 --> 00:14:51,600
map prp function

322
00:14:51,600 --> 00:14:54,800
we found that there are three places to

323
00:14:54,800 --> 00:14:56,839
trigger this foundation for

324
00:14:56,839 --> 00:14:58,800
reverberability in this variable

325
00:14:58,800 --> 00:15:01,519
function and each of them locates in

326
00:15:01,519 --> 00:15:04,000
different functions as well as different

327
00:15:04,000 --> 00:15:05,360
memory regions

328
00:15:05,360 --> 00:15:08,399
which means there are three options for

329
00:15:08,399 --> 00:15:10,800
us to construct an initialized variable

330
00:15:10,800 --> 00:15:13,519
let's do and let's let's take a

331
00:15:13,519 --> 00:15:15,440
look at each of them

332
00:15:15,440 --> 00:15:17,680
in the first place we can see that the

333
00:15:17,680 --> 00:15:21,279
qst data comes from a local stack area

334
00:15:21,279 --> 00:15:22,560
of memory

335
00:15:22,560 --> 00:15:25,199
and it wasn't building anywhere before

336
00:15:25,199 --> 00:15:28,639
it caused to vulnerable function and vme

337
00:15:28,639 --> 00:15:30,079
map prp

338
00:15:30,079 --> 00:15:33,040
which leaves an initialized variable on

339
00:15:33,040 --> 00:15:34,399
the stack

340
00:15:34,399 --> 00:15:37,279
and given an initialized stack variable

341
00:15:37,279 --> 00:15:40,399
a street force adhere is to see

342
00:15:40,399 --> 00:15:43,360
is there any considerable data at the

343
00:15:43,360 --> 00:15:46,240
same position on stack

344
00:15:46,240 --> 00:15:49,120
however we found that nvme device

345
00:15:49,120 --> 00:15:52,000
functionality is quite simple and the

346
00:15:52,000 --> 00:15:54,560
score stack is too shallow when knight

347
00:15:54,560 --> 00:15:57,440
turns to the base function that contains

348
00:15:57,440 --> 00:15:58,720
guest data

349
00:15:58,720 --> 00:16:01,680
and finds all the core pieces

350
00:16:01,680 --> 00:16:04,240
we didn't find control the data in the

351
00:16:04,240 --> 00:16:05,440
step

352
00:16:05,440 --> 00:16:07,279
that means no

353
00:16:07,279 --> 00:16:10,639
supply data could be right into the qst

354
00:16:10,639 --> 00:16:12,079
this is a bit

355
00:16:12,079 --> 00:16:14,639
frustrating but that's okay

356
00:16:14,639 --> 00:16:17,279
when we look at the stacking case

357
00:16:17,279 --> 00:16:19,600
this is almost the same pattern at the

358
00:16:19,600 --> 00:16:22,320
first test leaves an initialized

359
00:16:22,320 --> 00:16:23,920
variable on the stat

360
00:16:23,920 --> 00:16:26,639
and called the vulnerable function

361
00:16:26,639 --> 00:16:28,880
but it's still difficult to control this

362
00:16:28,880 --> 00:16:31,680
unleashed data for us

363
00:16:31,680 --> 00:16:34,399
so let's take a look at specifics

364
00:16:34,399 --> 00:16:38,000
you can see that security here transform

365
00:16:38,000 --> 00:16:41,279
a global variable locating the heap

366
00:16:41,279 --> 00:16:44,560
and this value is allocated in the nvme

367
00:16:44,560 --> 00:16:46,639
indeed sq function

368
00:16:46,639 --> 00:16:49,120
this function is just a new request

369
00:16:49,120 --> 00:16:52,000
structure and leave the qsc member

370
00:16:52,000 --> 00:16:53,600
initialized

371
00:16:53,600 --> 00:16:56,480
and after many function calls he'll

372
00:16:56,480 --> 00:16:59,759
finally go through the nvme adapter

373
00:16:59,759 --> 00:17:03,199
and here we just plus its member qst as

374
00:17:03,199 --> 00:17:06,559
a parameter to the verbal function

375
00:17:06,559 --> 00:17:09,439
and because this value is on the heat it

376
00:17:09,439 --> 00:17:12,079
seems that we can control it

377
00:17:12,079 --> 00:17:14,319
and because we can use some techniques

378
00:17:14,319 --> 00:17:15,119
that

379
00:17:15,119 --> 00:17:17,359
hip function and that means we can

380
00:17:17,359 --> 00:17:20,079
control what we want to free

381
00:17:20,079 --> 00:17:22,400
and now given the hip initialized

382
00:17:22,400 --> 00:17:24,720
preventability here is a problem

383
00:17:24,720 --> 00:17:27,280
regarding to that can we actually

384
00:17:27,280 --> 00:17:29,919
control what objective free

385
00:17:29,919 --> 00:17:32,400
as i've said like some techniques like

386
00:17:32,400 --> 00:17:33,919
keep feng shui

387
00:17:33,919 --> 00:17:35,760
we couldn't make it to free anything

388
00:17:35,760 --> 00:17:38,240
else and language

389
00:17:38,240 --> 00:17:40,559
we can turn to the initialize through to

390
00:17:40,559 --> 00:17:42,640
the app3

391
00:17:42,640 --> 00:17:44,960
and another problem is that

392
00:17:44,960 --> 00:17:48,080
what object are we going to free

393
00:17:48,080 --> 00:17:50,320
it's pretty stretchy forward to turn on

394
00:17:50,320 --> 00:17:52,960
initialize to free to uef

395
00:17:52,960 --> 00:17:56,160
because we know how to explore uef but

396
00:17:56,160 --> 00:17:57,600
we don't know how to exploit

397
00:17:57,600 --> 00:17:59,039
initialization

398
00:17:59,039 --> 00:18:00,480
so what should we do

399
00:18:00,480 --> 00:18:03,360
we first found a structure

400
00:18:03,360 --> 00:18:06,160
that's under our control filling this

401
00:18:06,160 --> 00:18:07,919
structure before

402
00:18:07,919 --> 00:18:10,720
and filling the edges fields with this

403
00:18:10,720 --> 00:18:14,000
edges pointing to the object that we can

404
00:18:14,000 --> 00:18:15,919
control in the heat

405
00:18:15,919 --> 00:18:16,720
then

406
00:18:16,720 --> 00:18:18,160
we just

407
00:18:18,160 --> 00:18:19,760
melt another

408
00:18:19,760 --> 00:18:22,080
uh request structure

409
00:18:22,080 --> 00:18:24,880
and triggered our nature as free

410
00:18:24,880 --> 00:18:27,520
then we were just a food object that we

411
00:18:27,520 --> 00:18:30,720
can control at this moment if we can

412
00:18:30,720 --> 00:18:33,360
read or write this object

413
00:18:33,360 --> 00:18:35,760
then we get gotten uef

414
00:18:35,760 --> 00:18:38,960
well this plan is great but actually it

415
00:18:38,960 --> 00:18:41,760
turns out that this is not easy

416
00:18:41,760 --> 00:18:44,080
to make these things works we first need

417
00:18:44,080 --> 00:18:47,840
a structure with a specific size and

418
00:18:47,840 --> 00:18:50,880
this structure must have a pointer at

419
00:18:50,880 --> 00:18:53,039
the specific of sets

420
00:18:53,039 --> 00:18:55,919
and most importantly this structure must

421
00:18:55,919 --> 00:18:58,960
be a powerful primitive now the point

422
00:18:58,960 --> 00:19:03,200
here must point to a yes control object

423
00:19:03,200 --> 00:19:05,360
which we can read or write

424
00:19:05,360 --> 00:19:07,840
notice that there must there should be a

425
00:19:07,840 --> 00:19:10,160
time window between the object

426
00:19:10,160 --> 00:19:13,440
allocation and the object usage so that

427
00:19:13,440 --> 00:19:16,880
we can use it after it was free

428
00:19:16,880 --> 00:19:19,360
well after many tries we didn't find

429
00:19:19,360 --> 00:19:20,720
such a structure

430
00:19:20,720 --> 00:19:24,000
because we not only need a structure to

431
00:19:24,000 --> 00:19:27,039
point into an object but also this

432
00:19:27,039 --> 00:19:30,240
object should be completely controllable

433
00:19:30,240 --> 00:19:33,200
that is too limited for example we found

434
00:19:33,200 --> 00:19:36,400
the structure in the nvme and other

435
00:19:36,400 --> 00:19:39,600
traditional devices and some complexity

436
00:19:39,600 --> 00:19:40,880
devices

437
00:19:40,880 --> 00:19:42,960
all of them can not meet these

438
00:19:42,960 --> 00:19:44,320
requirements

439
00:19:44,320 --> 00:19:46,160
most of the structures in the queue are

440
00:19:46,160 --> 00:19:48,080
not yet controllable

441
00:19:48,080 --> 00:19:50,799
it is almost impossible to find this

442
00:19:50,799 --> 00:19:53,200
kind of structure and we can see that

443
00:19:53,200 --> 00:19:56,640
the cumulus primitive is so limited so

444
00:19:56,640 --> 00:19:58,880
it's difficult for us to decide what

445
00:19:58,880 --> 00:20:01,280
object to free

446
00:20:01,280 --> 00:20:04,000
however when i was founding i found that

447
00:20:04,000 --> 00:20:06,080
there is a different structure on birth

448
00:20:06,080 --> 00:20:08,480
apple gpu device

449
00:20:08,480 --> 00:20:10,960
here you can see in this function

450
00:20:10,960 --> 00:20:13,840
the device allocates an edges mapping

451
00:20:13,840 --> 00:20:17,600
table and this table is filled with the

452
00:20:17,600 --> 00:20:20,880
series of pointers and lens

453
00:20:20,880 --> 00:20:23,760
and this looks like a grid structure it

454
00:20:23,760 --> 00:20:26,559
has considerable size it has pointer

455
00:20:26,559 --> 00:20:29,360
numbers but differently this pointer

456
00:20:29,360 --> 00:20:31,840
here goes through the guest space

457
00:20:31,840 --> 00:20:34,559
and this point just comes from a vmwa

458
00:20:34,559 --> 00:20:35,919
memory map

459
00:20:35,919 --> 00:20:38,320
and this is a key function which maps

460
00:20:38,320 --> 00:20:41,039
against the physical memory into the

461
00:20:41,039 --> 00:20:43,280
host virtual edges

462
00:20:43,280 --> 00:20:45,760
and these edges is what we have in this

463
00:20:45,760 --> 00:20:49,679
table this means the cumule can directly

464
00:20:49,679 --> 00:20:53,200
access guest memory in the host process

465
00:20:53,200 --> 00:20:55,679
well can this structure help us to

466
00:20:55,679 --> 00:20:58,960
facilitate the exploitation

467
00:20:58,960 --> 00:21:00,400
maybe it does

468
00:21:00,400 --> 00:21:02,960
inspired by the mapping table on the

469
00:21:02,960 --> 00:21:06,559
word iotq maybe you don't have to find a

470
00:21:06,559 --> 00:21:08,320
reading writer

471
00:21:08,320 --> 00:21:11,120
and primitive in the host process

472
00:21:11,120 --> 00:21:13,200
maybe you can just use the buffer and

473
00:21:13,200 --> 00:21:16,480
the guest directory to help us to craft

474
00:21:16,480 --> 00:21:18,880
and exploit

475
00:21:18,880 --> 00:21:21,360
also let's take a look at cumulus

476
00:21:21,360 --> 00:21:23,440
process memory layout

477
00:21:23,440 --> 00:21:25,919
in this picture we can see there are two

478
00:21:25,919 --> 00:21:27,200
important

479
00:21:27,200 --> 00:21:30,640
memories the first is the hip memory

480
00:21:30,640 --> 00:21:33,760
which starts with 0x55

481
00:21:33,760 --> 00:21:36,400
and the second is the guest memory which

482
00:21:36,400 --> 00:21:40,880
starts with zero x7s and this gas memory

483
00:21:40,880 --> 00:21:43,679
is just backed by a single memory map

484
00:21:43,679 --> 00:21:47,520
regions inside the qmu kvm process

485
00:21:47,520 --> 00:21:50,640
and notice that this gas memory is both

486
00:21:50,640 --> 00:21:54,080
mapped into the cumulus process but also

487
00:21:54,080 --> 00:21:56,400
exposed to the guest vm

488
00:21:56,400 --> 00:21:58,799
we can think it as a shield memory

489
00:21:58,799 --> 00:22:02,000
between the host and the guest

490
00:22:02,000 --> 00:22:04,240
for the perspective the host

491
00:22:04,240 --> 00:22:06,640
the guest memory can also be some kind

492
00:22:06,640 --> 00:22:09,120
of the hip memory because they are both

493
00:22:09,120 --> 00:22:12,480
snap into the cubing process

494
00:22:12,480 --> 00:22:14,799
so here's our idea

495
00:22:14,799 --> 00:22:17,520
this is a whole head level overview

496
00:22:17,520 --> 00:22:20,559
first the guests share the same memory

497
00:22:20,559 --> 00:22:22,159
with the host

498
00:22:22,159 --> 00:22:24,720
in the host any changes that will make

499
00:22:24,720 --> 00:22:27,440
it to the physical mapping release are

500
00:22:27,440 --> 00:22:30,400
propagated to the memory on the guest

501
00:22:30,400 --> 00:22:33,360
so now the guest is aware of the foster

502
00:22:33,360 --> 00:22:36,080
operation or guest memory

503
00:22:36,080 --> 00:22:39,440
and more importantly a guest can read or

504
00:22:39,440 --> 00:22:42,880
write its memory at any time right

505
00:22:42,880 --> 00:22:45,520
so it will naturally provide us a

506
00:22:45,520 --> 00:22:48,799
reading and writing exploit primitive we

507
00:22:48,799 --> 00:22:50,480
don't have to find the reading right

508
00:22:50,480 --> 00:22:52,400
printed in the host

509
00:22:52,400 --> 00:22:55,440
and finally it's quite easy to make a

510
00:22:55,440 --> 00:22:58,159
big chunk in the guess we just need to

511
00:22:58,159 --> 00:23:01,120
fill in the chunk with the trunk header

512
00:23:01,120 --> 00:23:03,520
just like the trunk size and some

513
00:23:03,520 --> 00:23:04,480
friends

514
00:23:04,480 --> 00:23:05,360
so

515
00:23:05,360 --> 00:23:08,559
what do we what we if we directly free a

516
00:23:08,559 --> 00:23:11,520
trade trunk in the gas system

517
00:23:11,520 --> 00:23:14,000
here i'll show you what it will create a

518
00:23:14,000 --> 00:23:16,320
fake trunk in the guest

519
00:23:16,320 --> 00:23:19,520
the left is the debugger it shows tcat

520
00:23:19,520 --> 00:23:22,720
space in the host overview and the right

521
00:23:22,720 --> 00:23:25,360
is what we have done in guess

522
00:23:25,360 --> 00:23:27,760
you can see that we make a

523
00:23:27,760 --> 00:23:30,480
fake trunk and trigger the initializer

524
00:23:30,480 --> 00:23:33,840
free variability and then the fake trunk

525
00:23:33,840 --> 00:23:36,480
is exerted into the horse tea catch

526
00:23:36,480 --> 00:23:37,520
beans

527
00:23:37,520 --> 00:23:39,120
wow that's amazing

528
00:23:39,120 --> 00:23:42,640
because of the kitty melon in minutes

529
00:23:42,640 --> 00:23:45,279
this chunk will point to the first chunk

530
00:23:45,279 --> 00:23:47,440
and the t category list

531
00:23:47,440 --> 00:23:49,679
and this will leave the first chunk

532
00:23:49,679 --> 00:23:52,080
edges in this neutron

533
00:23:52,080 --> 00:23:55,279
and as expected by reading the buffer

534
00:23:55,279 --> 00:23:58,400
after the initializer free we lick the

535
00:23:58,400 --> 00:24:00,480
hip edges of the hose

536
00:24:00,480 --> 00:24:04,000
yeah this means our method truly works

537
00:24:04,000 --> 00:24:06,799
and the guest and the host share the

538
00:24:06,799 --> 00:24:09,600
same memory they can operate on the same

539
00:24:09,600 --> 00:24:12,240
chart we can use this attack to first

540
00:24:12,240 --> 00:24:15,760
elated expectation with the help of the

541
00:24:15,760 --> 00:24:18,000
guest member

542
00:24:18,000 --> 00:24:21,200
so let's examine traditionally when we

543
00:24:21,200 --> 00:24:24,159
craft an exploit to escape the virtual

544
00:24:24,159 --> 00:24:26,480
machine we'd like to find some data

545
00:24:26,480 --> 00:24:29,919
structure in the host process to help us

546
00:24:29,919 --> 00:24:32,559
manipulate the memory layouts renaming

547
00:24:32,559 --> 00:24:34,960
it as first to force attack

548
00:24:34,960 --> 00:24:37,520
and here we are processing a cross

549
00:24:37,520 --> 00:24:38,640
domain

550
00:24:38,640 --> 00:24:41,679
which manipulates the memory across the

551
00:24:41,679 --> 00:24:43,600
hypervisor domain

552
00:24:43,600 --> 00:24:45,279
this is the most interesting part of

553
00:24:45,279 --> 00:24:47,039
this research

554
00:24:47,039 --> 00:24:49,600
and it's basically like this

555
00:24:49,600 --> 00:24:52,480
we first make a fake trunk with a very

556
00:24:52,480 --> 00:24:53,360
trunk

557
00:24:53,360 --> 00:24:55,919
header in the gas system and in the

558
00:24:55,919 --> 00:24:57,840
whole space we're just filling the

559
00:24:57,840 --> 00:25:01,039
memory before with edges pointing to the

560
00:25:01,039 --> 00:25:04,000
guest state charm and then we just may

561
00:25:04,000 --> 00:25:07,039
lock another initialized request

562
00:25:07,039 --> 00:25:08,159
structure

563
00:25:08,159 --> 00:25:10,720
twitter that are neglected free and then

564
00:25:10,720 --> 00:25:14,080
we will get guest trump in the hospital

565
00:25:14,080 --> 00:25:14,880
and

566
00:25:14,880 --> 00:25:18,080
you know because the attacker has a full

567
00:25:18,080 --> 00:25:21,200
privilege in guest system he can read or

568
00:25:21,200 --> 00:25:23,600
write his memory at any time

569
00:25:23,600 --> 00:25:26,240
so now the problem is turn to

570
00:25:26,240 --> 00:25:27,279
uef

571
00:25:27,279 --> 00:25:30,000
with this part for primitive we can make

572
00:25:30,000 --> 00:25:33,360
it export this initialize free just like

573
00:25:33,360 --> 00:25:37,039
to explore uefa a bit

574
00:25:37,039 --> 00:25:40,080
okay now the problem is turn to exploit

575
00:25:40,080 --> 00:25:41,120
and

576
00:25:41,120 --> 00:25:41,840
a uaf

577
00:25:41,840 --> 00:25:44,799
the problems becomes more easy for us

578
00:25:44,799 --> 00:25:47,600
and that our discussion details

579
00:25:47,600 --> 00:25:50,080
step by step first we need to find

580
00:25:50,080 --> 00:25:53,120
information need to bypass the slr

581
00:25:53,120 --> 00:25:55,600
and then we need to manipulate hip

582
00:25:55,600 --> 00:25:58,400
layout should hijack the control flow

583
00:25:58,400 --> 00:26:02,240
and finally we execute f3 command and

584
00:26:02,240 --> 00:26:05,520
gain the code execution on the host

585
00:26:05,520 --> 00:26:07,760
before we start we have to do some

586
00:26:07,760 --> 00:26:09,039
hipstery

587
00:26:09,039 --> 00:26:11,760
in order to get a stable system hip

588
00:26:11,760 --> 00:26:15,679
layout we'll just use the vme init sq

589
00:26:15,679 --> 00:26:18,000
function here on the right side

590
00:26:18,000 --> 00:26:20,080
and this function can be called a lot of

591
00:26:20,080 --> 00:26:23,279
times to spread a lot of chunks

592
00:26:23,279 --> 00:26:25,200
we just call this function a whole bunch

593
00:26:25,200 --> 00:26:28,320
of times to clear the ticket bins

594
00:26:28,320 --> 00:26:31,039
and this way we can prevent the

595
00:26:31,039 --> 00:26:34,080
following ch friction to be consolidated

596
00:26:34,080 --> 00:26:35,760
into a larger

597
00:26:35,760 --> 00:26:37,919
and that's we can get more reliable

598
00:26:37,919 --> 00:26:40,240
exploits

599
00:26:40,240 --> 00:26:42,640
so looking at more graphically

600
00:26:42,640 --> 00:26:45,840
in order to bypass ascr we need to find

601
00:26:45,840 --> 00:26:47,760
the information leak

602
00:26:47,760 --> 00:26:50,720
first we make a fake charm in the guest

603
00:26:50,720 --> 00:26:53,200
and this gap was filled with reading

604
00:26:53,200 --> 00:26:55,919
data we put in and this chunk is with

605
00:26:55,919 --> 00:26:59,600
the size of 0x290

606
00:26:59,600 --> 00:27:03,039
then the guest writes value to the mmao

607
00:27:03,039 --> 00:27:05,919
interface to lead up the device man

608
00:27:05,919 --> 00:27:07,120
execution

609
00:27:07,120 --> 00:27:10,240
and in the hospitals the word iot2

610
00:27:10,240 --> 00:27:13,440
device in the hypervisor will mellow the

611
00:27:13,440 --> 00:27:14,880
mapping table

612
00:27:14,880 --> 00:27:18,000
built with the edges pointing to the gas

613
00:27:18,000 --> 00:27:21,200
big trunk and this chunk is filled with

614
00:27:21,200 --> 00:27:23,279
the size with

615
00:27:23,279 --> 00:27:26,159
their x 150

616
00:27:26,159 --> 00:27:29,039
and then we'll just read this matching

617
00:27:29,039 --> 00:27:31,679
table and this fruit chunk will be

618
00:27:31,679 --> 00:27:33,279
inserted into this

619
00:27:33,279 --> 00:27:34,880
ticket beans

620
00:27:34,880 --> 00:27:36,640
and that would actually leave us with

621
00:27:36,640 --> 00:27:38,960
the chunk in the state that we have left

622
00:27:38,960 --> 00:27:41,360
it before

623
00:27:41,360 --> 00:27:44,480
in the next we'll just mellow an io

624
00:27:44,480 --> 00:27:46,000
request structure

625
00:27:46,000 --> 00:27:48,559
and this structure was just fitting the

626
00:27:48,559 --> 00:27:51,520
position that we had we have initialized

627
00:27:51,520 --> 00:27:52,640
before

628
00:27:52,640 --> 00:27:54,080
with this uh

629
00:27:54,080 --> 00:27:56,320
with the initialized field pointing to

630
00:27:56,320 --> 00:27:57,919
the gastroc

631
00:27:57,919 --> 00:28:00,159
we have to call those two metals in

632
00:28:00,159 --> 00:28:02,480
order because if you do anything else

633
00:28:02,480 --> 00:28:04,720
between these two operations

634
00:28:04,720 --> 00:28:06,799
you've just used the hip for something

635
00:28:06,799 --> 00:28:09,440
else so we have to be relative about

636
00:28:09,440 --> 00:28:10,799
that

637
00:28:10,799 --> 00:28:13,440
then we'll just go out the buggy code

638
00:28:13,440 --> 00:28:16,240
and trigger the flavourability

639
00:28:16,240 --> 00:28:18,559
this will help make a big chunk in the

640
00:28:18,559 --> 00:28:21,840
gas the post were treated as a normal

641
00:28:21,840 --> 00:28:25,200
hip jump and push this through trunk to

642
00:28:25,200 --> 00:28:27,039
its key catch bins

643
00:28:27,039 --> 00:28:29,760
and this would leave a hip edges in the

644
00:28:29,760 --> 00:28:30,640
head

645
00:28:30,640 --> 00:28:33,600
of the of the big charm

646
00:28:33,600 --> 00:28:34,880
then

647
00:28:34,880 --> 00:28:36,799
since we know what's in memory now and

648
00:28:36,799 --> 00:28:39,919
we can actually reliably dig the host

649
00:28:39,919 --> 00:28:43,200
clip edges by just reading the buffer

650
00:28:43,200 --> 00:28:44,960
and the guests

651
00:28:44,960 --> 00:28:47,360
of course only a heat patch is not

652
00:28:47,360 --> 00:28:50,080
enough we have to find some other edges

653
00:28:50,080 --> 00:28:53,440
as well such as physical mapping edges

654
00:28:53,440 --> 00:28:55,200
 banner edges

655
00:28:55,200 --> 00:28:58,559
then we just mount another mapping table

656
00:28:58,559 --> 00:29:01,919
with the size of cerex 219

657
00:29:01,919 --> 00:29:04,159
to fill in the chunk located in the

658
00:29:04,159 --> 00:29:05,440
guest space

659
00:29:05,440 --> 00:29:08,399
and the pointer here in this table just

660
00:29:08,399 --> 00:29:11,279
points to the command chart located in

661
00:29:11,279 --> 00:29:12,399
the guest

662
00:29:12,399 --> 00:29:14,880
we just initialize this combined buffer

663
00:29:14,880 --> 00:29:18,559
for the code execution stage

664
00:29:18,559 --> 00:29:21,679
well besides before we could also leak

665
00:29:21,679 --> 00:29:24,000
the physical mapping edges such as

666
00:29:24,000 --> 00:29:25,760
reading the buffer

667
00:29:25,760 --> 00:29:28,559
these edges represent the host virtual

668
00:29:28,559 --> 00:29:31,360
edges which maps into the guest physical

669
00:29:31,360 --> 00:29:32,480
memory

670
00:29:32,480 --> 00:29:35,039
and with these edges you can just know

671
00:29:35,039 --> 00:29:38,880
where the gas the buffer is to the guest

672
00:29:38,880 --> 00:29:41,679
to the host and in order to hijack

673
00:29:41,679 --> 00:29:43,279
control flow

674
00:29:43,279 --> 00:29:45,679
many previous work just use the term

675
00:29:45,679 --> 00:29:48,720
structure which has a function pointer

676
00:29:48,720 --> 00:29:50,640
and this is a good junction

677
00:29:50,640 --> 00:29:52,799
and if we get such a camera we can

678
00:29:52,799 --> 00:29:56,159
easily leak the human binary edges and

679
00:29:56,159 --> 00:29:58,960
hijack the control flow so let's do it

680
00:29:58,960 --> 00:29:59,840
again

681
00:29:59,840 --> 00:30:02,640
make a fake charm in the guests

682
00:30:02,640 --> 00:30:04,720
with the size of the timer size

683
00:30:04,720 --> 00:30:06,880
construct another uninitialized i o

684
00:30:06,880 --> 00:30:09,919
request structure with a pointer point

685
00:30:09,919 --> 00:30:11,039
into the

686
00:30:11,039 --> 00:30:13,840
big trunk in the gas

687
00:30:13,840 --> 00:30:16,720
then you have to get a metal primitive

688
00:30:16,720 --> 00:30:18,480
to metal tunnel

689
00:30:18,480 --> 00:30:22,320
fortunately in nvme device there's the

690
00:30:22,320 --> 00:30:23,600
there is a

691
00:30:23,600 --> 00:30:26,320
primitive to medical uh new channel we

692
00:30:26,320 --> 00:30:29,200
don't have to find any other places

693
00:30:29,200 --> 00:30:32,240
then the idea is just a thing

694
00:30:32,240 --> 00:30:33,880
and we just triggered our

695
00:30:33,880 --> 00:30:37,039
initializer-free and melody timing timer

696
00:30:37,039 --> 00:30:39,600
is filling the chunk in the gas

697
00:30:39,600 --> 00:30:42,159
finally we will get a timer into the

698
00:30:42,159 --> 00:30:43,360
guest

699
00:30:43,360 --> 00:30:46,080
and now since the camera is located in

700
00:30:46,080 --> 00:30:49,520
the guests we can easily read and write

701
00:30:49,520 --> 00:30:50,880
this structure

702
00:30:50,880 --> 00:30:52,720
in this way we can link the cumulative

703
00:30:52,720 --> 00:30:55,600
binary edges with this edges we can

704
00:30:55,600 --> 00:30:58,480
directly calculate the offset of the

705
00:30:58,480 --> 00:31:01,919
target function in the binary and easily

706
00:31:01,919 --> 00:31:04,640
getting the where is the system function

707
00:31:04,640 --> 00:31:07,039
system function is the key function if

708
00:31:07,039 --> 00:31:11,360
we want to get a code kill execution

709
00:31:11,760 --> 00:31:14,480
and after that we'll overwrite the

710
00:31:14,480 --> 00:31:16,080
system function

711
00:31:16,080 --> 00:31:18,159
the function pointer in this timer to

712
00:31:18,159 --> 00:31:19,760
this address

713
00:31:19,760 --> 00:31:22,640
uh to the system function and overwrite

714
00:31:22,640 --> 00:31:25,360
the first argument in this timer

715
00:31:25,360 --> 00:31:27,840
and to the command button which will

716
00:31:27,840 --> 00:31:29,840
have set up before

717
00:31:29,840 --> 00:31:32,000
and this address is some kind of

718
00:31:32,000 --> 00:31:33,600
physical mapping edges

719
00:31:33,600 --> 00:31:36,720
and in this way we will get the ip

720
00:31:36,720 --> 00:31:37,840
control

721
00:31:37,840 --> 00:31:41,760
and finally by just expired timer to

722
00:31:41,760 --> 00:31:43,919
trigger the timeless callback we

723
00:31:43,919 --> 00:31:46,080
actually execute the system genome

724
00:31:46,080 --> 00:31:48,799
calculation and this way we manage to

725
00:31:48,799 --> 00:31:51,360
hijack control flow and get a code

726
00:31:51,360 --> 00:31:54,000
execution on the host

727
00:31:54,000 --> 00:31:56,159
and this is them of the vm escape by

728
00:31:56,159 --> 00:31:57,919
running our export code in the gas

729
00:31:57,919 --> 00:32:00,240
system we finally make it pop a

730
00:32:00,240 --> 00:32:02,960
calculator in the host in fact you can

731
00:32:02,960 --> 00:32:05,440
run any code that you wanted

732
00:32:05,440 --> 00:32:09,039
so the export is over but here you know

733
00:32:09,039 --> 00:32:15,440
this export is different in several ways

734
00:32:15,440 --> 00:32:17,600
for example

735
00:32:17,600 --> 00:32:20,720
for in the attack surface previous

736
00:32:20,720 --> 00:32:24,000
no vm escape locates in the usb module

737
00:32:24,000 --> 00:32:29,279
sri ptcip ip emulator and amd ati

738
00:32:29,279 --> 00:32:32,559
but we target the nvme storage device

739
00:32:32,559 --> 00:32:34,960
for the benedictine types more for

740
00:32:34,960 --> 00:32:37,279
almost all four snow

741
00:32:37,279 --> 00:32:39,440
durabilities are caused by buffer

742
00:32:39,440 --> 00:32:40,640
overflow

743
00:32:40,640 --> 00:32:43,120
however our case is an initializer

744
00:32:43,120 --> 00:32:46,240
favorability in error handling code

745
00:32:46,240 --> 00:32:48,880
which requires more integrations and

746
00:32:48,880 --> 00:32:50,159
triggers

747
00:32:50,159 --> 00:32:53,919
to in the vulnerability exploitation

748
00:32:53,919 --> 00:32:56,799
and for exploitation technique previous

749
00:32:56,799 --> 00:32:59,279
node benefits are almost the same

750
00:32:59,279 --> 00:33:01,760
funding inconsolable data on the host

751
00:33:01,760 --> 00:33:04,559
process and construct exploits

752
00:33:04,559 --> 00:33:07,120
primitives such as temperature rights

753
00:33:07,120 --> 00:33:10,320
instead we utilize the data present

754
00:33:10,320 --> 00:33:13,039
guest memory which naturally provides us

755
00:33:13,039 --> 00:33:15,360
a reading and writing flow material

756
00:33:15,360 --> 00:33:17,679
which is manipulative memory across the

757
00:33:17,679 --> 00:33:19,679
hypervisor domain

758
00:33:19,679 --> 00:33:21,840
further i want to show the additional

759
00:33:21,840 --> 00:33:24,880
analysis of this attack as long as the

760
00:33:24,880 --> 00:33:27,039
temperature has such availability which

761
00:33:27,039 --> 00:33:30,000
can actually control what objective 3

762
00:33:30,000 --> 00:33:32,399
the cube can be exploited because the

763
00:33:32,399 --> 00:33:34,240
techniques of cross-domain attack is

764
00:33:34,240 --> 00:33:36,799
general we observe that there's no

765
00:33:36,799 --> 00:33:39,399
memory oscillation uh the memory

766
00:33:39,399 --> 00:33:42,240
standardization mechanism in qm such

767
00:33:42,240 --> 00:33:44,399
that we can utilize the user's base

768
00:33:44,399 --> 00:33:47,840
network firstly the exploitation

769
00:33:47,840 --> 00:33:50,399
and we attribute this feature to that

770
00:33:50,399 --> 00:33:52,000
the trunk is not

771
00:33:52,000 --> 00:33:54,320
not encrypted in the linux

772
00:33:54,320 --> 00:33:56,480
so that we can easily make a fake trunk

773
00:33:56,480 --> 00:33:58,320
but it may be difficult to launch the

774
00:33:58,320 --> 00:34:00,799
text if the trunk header is encrypted

775
00:34:00,799 --> 00:34:02,320
back in windows

776
00:34:02,320 --> 00:34:04,240
and finally we believe this kind of

777
00:34:04,240 --> 00:34:07,840
attack may also affect other hypervisors

778
00:34:07,840 --> 00:34:08,800
like

779
00:34:08,800 --> 00:34:12,079
virtualbox vmware and so on

780
00:34:12,079 --> 00:34:14,239
so what can we learn from this research

781
00:34:14,239 --> 00:34:16,239
first of all i hope you now understand

782
00:34:16,239 --> 00:34:19,040
more about misused error handling

783
00:34:19,040 --> 00:34:22,000
error handling code is used extensively

784
00:34:22,000 --> 00:34:23,440
in hypervisor

785
00:34:23,440 --> 00:34:24,960
we choose

786
00:34:24,960 --> 00:34:27,520
this is the area where you want to

787
00:34:27,520 --> 00:34:30,560
account for issues and probabilities and

788
00:34:30,560 --> 00:34:32,800
second i hope you know our error

789
00:34:32,800 --> 00:34:36,239
handling directly buzzing well make you

790
00:34:36,239 --> 00:34:39,918
text the touch phone box existing in

791
00:34:39,918 --> 00:34:42,480
the air handling code effectively and

792
00:34:42,480 --> 00:34:45,520
finally we've shown the guest memory can

793
00:34:45,520 --> 00:34:48,879
also bring us more attack primitives i

794
00:34:48,879 --> 00:34:51,599
hope you now understand how to persuade

795
00:34:51,599 --> 00:34:54,239
exploitation with the help of the guest

796
00:34:54,239 --> 00:34:56,079
space memory

797
00:34:56,079 --> 00:34:59,920
and a public exploit on github okay

798
00:34:59,920 --> 00:35:01,760
that's all i have today i hope you will

799
00:35:01,760 --> 00:35:02,640
enjoy

800
00:35:02,640 --> 00:35:06,200
thanks for your attention

