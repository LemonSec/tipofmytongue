1
00:00:01,130 --> 00:00:14,690
[Music]

2
00:00:16,560 --> 00:00:19,199
hello everyone and thank you for joining

3
00:00:19,199 --> 00:00:21,600
i'm only i'm from microsoft's azure

4
00:00:21,600 --> 00:00:24,080
defender for iot group

5
00:00:24,080 --> 00:00:26,400
today i'll be talking about two remote

6
00:00:26,400 --> 00:00:28,160
code execution vulnerabilities i found

7
00:00:28,160 --> 00:00:30,080
in a popular

8
00:00:30,080 --> 00:00:32,479
physical security system which you

9
00:00:32,479 --> 00:00:35,440
probably also know as an alarm system

10
00:00:35,440 --> 00:00:37,520
i won't only be talking about those two

11
00:00:37,520 --> 00:00:39,920
vulnerabilities but i'll also be showing

12
00:00:39,920 --> 00:00:43,200
you a full exploit chain leading from

13
00:00:43,200 --> 00:00:45,440
the vulnerability itself up until the

14
00:00:45,440 --> 00:00:47,920
point where the alarm is disarmed

15
00:00:47,920 --> 00:00:50,079
so we don't have a lot of time let's

16
00:00:50,079 --> 00:00:52,399
start

17
00:00:52,480 --> 00:00:55,120
some general background information i

18
00:00:55,120 --> 00:00:57,360
wasn't actually working on this specific

19
00:00:57,360 --> 00:00:59,680
project i was working on another project

20
00:00:59,680 --> 00:01:02,239
i was looking for vulnerabilities in a

21
00:01:02,239 --> 00:01:03,840
open source

22
00:01:03,840 --> 00:01:06,799
network stack called lwip it's a pretty

23
00:01:06,799 --> 00:01:09,200
popular one mainly with the low-end

24
00:01:09,200 --> 00:01:11,680
devices

25
00:01:11,680 --> 00:01:13,920
so while looking around at sudan i found

26
00:01:13,920 --> 00:01:16,159
a lot of devices that

27
00:01:16,159 --> 00:01:18,400
i use lwip and are connected to the

28
00:01:18,400 --> 00:01:20,960
internet and i wanted to figure out

29
00:01:20,960 --> 00:01:23,840
what are those devices so surprisingly

30
00:01:23,840 --> 00:01:26,400
the majority of those devices

31
00:01:26,400 --> 00:01:27,759
a

32
00:01:27,759 --> 00:01:28,799
wall

33
00:01:28,799 --> 00:01:32,079
from the same lwip version

34
00:01:32,079 --> 00:01:34,320
which was super interesting to me so i

35
00:01:34,320 --> 00:01:35,920
looked around it and

36
00:01:35,920 --> 00:01:37,600
tried to figure out what are those

37
00:01:37,600 --> 00:01:38,799
devices

38
00:01:38,799 --> 00:01:42,320
so looking at a some device for example

39
00:01:42,320 --> 00:01:44,560
from spain some endpoint you can see

40
00:01:44,560 --> 00:01:47,280
that it has an interesting

41
00:01:47,280 --> 00:01:49,920
panel and it says you must activate your

42
00:01:49,920 --> 00:01:51,439
javascript

43
00:01:51,439 --> 00:01:54,720
and a some login page in here

44
00:01:54,720 --> 00:01:57,360
so and another endpoint for example for

45
00:01:57,360 --> 00:02:00,320
more mania a as is this

46
00:02:00,320 --> 00:02:01,840
a very

47
00:02:01,840 --> 00:02:04,799
a similar banner and a login page that

48
00:02:04,799 --> 00:02:07,840
looks almost the same

49
00:02:07,840 --> 00:02:11,038
after digging for a while with with this

50
00:02:11,038 --> 00:02:14,080
information i finally understood that

51
00:02:14,080 --> 00:02:16,800
uh it was a product from a company named

52
00:02:16,800 --> 00:02:19,360
paradox paradox is a popular canadian

53
00:02:19,360 --> 00:02:20,959
manufacturer of physical security

54
00:02:20,959 --> 00:02:22,560
systems

55
00:02:22,560 --> 00:02:24,720
and and more specifically

56
00:02:24,720 --> 00:02:27,520
what you saw earlier in sudan came from

57
00:02:27,520 --> 00:02:28,480
this

58
00:02:28,480 --> 00:02:32,160
network model ip 150 internet model

59
00:02:32,160 --> 00:02:33,040
which

60
00:02:33,040 --> 00:02:35,599
works with the whole range of alarm

61
00:02:35,599 --> 00:02:38,879
systems that paradox manufacture

62
00:02:38,879 --> 00:02:41,040
so fast forward

63
00:02:41,040 --> 00:02:44,239
we got the equipment and this is it

64
00:02:44,239 --> 00:02:46,480
so what you see in here in this little

65
00:02:46,480 --> 00:02:48,560
metal box is actually

66
00:02:48,560 --> 00:02:50,879
uh first the control panel and the sp

67
00:02:50,879 --> 00:02:53,920
4000 control panel in the alarm system

68
00:02:53,920 --> 00:02:55,040
jargon

69
00:02:55,040 --> 00:02:56,879
is the main board is the motherboard is

70
00:02:56,879 --> 00:02:59,920
where everything connects to

71
00:02:59,920 --> 00:03:02,400
then we have the internet module in here

72
00:03:02,400 --> 00:03:03,519
with some

73
00:03:03,519 --> 00:03:06,000
cheap plastic on it so after peeling the

74
00:03:06,000 --> 00:03:07,599
plastic you can see that

75
00:03:07,599 --> 00:03:09,840
it's quite a simple board

76
00:03:09,840 --> 00:03:10,560
uh

77
00:03:10,560 --> 00:03:13,920
in here we have an arm chip

78
00:03:13,920 --> 00:03:15,599
on it

79
00:03:15,599 --> 00:03:18,800
which came from st electronics it's an

80
00:03:18,800 --> 00:03:19,920
stm

81
00:03:19,920 --> 00:03:21,360
32f

82
00:03:21,360 --> 00:03:22,480
chip

83
00:03:22,480 --> 00:03:26,799
which is an arm compatible a chip

84
00:03:26,799 --> 00:03:28,959
for embedded devices

85
00:03:28,959 --> 00:03:30,400
then we have

86
00:03:30,400 --> 00:03:32,400
this keypad in here

87
00:03:32,400 --> 00:03:35,120
uh which you probably know it can it's

88
00:03:35,120 --> 00:03:37,440
in most places it's installed right next

89
00:03:37,440 --> 00:03:39,840
to the door and you can put the code and

90
00:03:39,840 --> 00:03:40,879
arm

91
00:03:40,879 --> 00:03:42,640
the alarm system before leaving the

92
00:03:42,640 --> 00:03:43,920
building

93
00:03:43,920 --> 00:03:45,760
uh and besides that we have the power

94
00:03:45,760 --> 00:03:47,920
supply here

95
00:03:47,920 --> 00:03:49,920
so i cropped the image a bit so we can

96
00:03:49,920 --> 00:03:51,760
talk about protocols

97
00:03:51,760 --> 00:03:53,920
uh so first we have the internet model

98
00:03:53,920 --> 00:03:56,080
it goes to the public internet via

99
00:03:56,080 --> 00:03:57,840
standard ethernet

100
00:03:57,840 --> 00:03:58,959
connection

101
00:03:58,959 --> 00:04:01,040
and on the other side it connects to the

102
00:04:01,040 --> 00:04:03,040
a control board

103
00:04:03,040 --> 00:04:05,840
with a proprietary serial protocol so

104
00:04:05,840 --> 00:04:08,959
the ip150 is actually a kind of a bridge

105
00:04:08,959 --> 00:04:12,480
between ethernet and serial protocol

106
00:04:12,480 --> 00:04:17,199
a a down a on the down part we have the

107
00:04:17,199 --> 00:04:19,839
keypad which also connects with the same

108
00:04:19,839 --> 00:04:21,358
serial protocol

109
00:04:21,358 --> 00:04:24,080
and we didn't purchase those but

110
00:04:24,080 --> 00:04:26,960
a generally speaking the sensors the

111
00:04:26,960 --> 00:04:28,800
silence would connect also to the

112
00:04:28,800 --> 00:04:31,520
control board

113
00:04:31,680 --> 00:04:33,360
that's how it looks like on my desk

114
00:04:33,360 --> 00:04:34,960
there is the laptop in here it connects

115
00:04:34,960 --> 00:04:36,960
directly

116
00:04:36,960 --> 00:04:40,479
and we'll later see how and why

117
00:04:40,479 --> 00:04:42,800
so let's start with the fun

118
00:04:42,800 --> 00:04:45,040
a in those kind of project the first

119
00:04:45,040 --> 00:04:47,280
thing that you that i want to do

120
00:04:47,280 --> 00:04:49,040
is normally getting female updates

121
00:04:49,040 --> 00:04:50,639
because i want the female itself and

122
00:04:50,639 --> 00:04:52,639
that's the easiest way to go

123
00:04:52,639 --> 00:04:54,960
so i got this device it's called this a

124
00:04:54,960 --> 00:04:57,280
software sorry it's called infield

125
00:04:57,280 --> 00:04:59,759
uh paradox supplies it

126
00:04:59,759 --> 00:05:04,320
to the clients in order to a install

127
00:05:04,320 --> 00:05:06,720
female updates on the whole range of

128
00:05:06,720 --> 00:05:07,919
devices

129
00:05:07,919 --> 00:05:10,639
so this is actually an older version of

130
00:05:10,639 --> 00:05:13,520
infield than the current one it shows

131
00:05:13,520 --> 00:05:15,520
that because it gives me the option to

132
00:05:15,520 --> 00:05:17,600
select what i want to download and

133
00:05:17,600 --> 00:05:20,400
download it locally

134
00:05:20,400 --> 00:05:22,000
so i chose

135
00:05:22,000 --> 00:05:24,800
the internet model and got the file uh

136
00:05:24,800 --> 00:05:27,840
which is named ip150 the version and dot

137
00:05:27,840 --> 00:05:28,720
path

138
00:05:28,720 --> 00:05:31,280
i suspect that the path is a paradox

139
00:05:31,280 --> 00:05:33,840
update file maybe paradox

140
00:05:33,840 --> 00:05:36,840
update format uh anyways

141
00:05:36,840 --> 00:05:40,560
i asked minwork to check it for me and

142
00:05:40,560 --> 00:05:43,919
didn't get any result and looking at the

143
00:05:43,919 --> 00:05:46,560
entropy it's pretty clear why

144
00:05:46,560 --> 00:05:49,680
uh it seemed to be encrypted or might be

145
00:05:49,680 --> 00:05:53,360
compressed but i guess that encrypted

146
00:05:53,360 --> 00:05:55,600
so let's just take a quick look on the

147
00:05:55,600 --> 00:05:57,280
firmware itself

148
00:05:57,280 --> 00:06:00,080
uh it's a comparison between version 4

149
00:06:00,080 --> 00:06:02,560
and version 3 of the female 4 the same

150
00:06:02,560 --> 00:06:04,800
device

151
00:06:04,800 --> 00:06:07,440
we can see that most of the data in here

152
00:06:07,440 --> 00:06:10,000
is a actually the same

153
00:06:10,000 --> 00:06:11,919
between both versions

154
00:06:11,919 --> 00:06:13,919
uh we can see that we have the version

155
00:06:13,919 --> 00:06:15,280
id

156
00:06:15,280 --> 00:06:18,560
probably the version id here and in here

157
00:06:18,560 --> 00:06:21,120
and that we have the data itself that

158
00:06:21,120 --> 00:06:23,600
encrypted all compass data

159
00:06:23,600 --> 00:06:26,040
in here which is a different

160
00:06:26,040 --> 00:06:28,800
[Music]

161
00:06:28,800 --> 00:06:31,520
so at that point i want i wanted to

162
00:06:31,520 --> 00:06:35,120
either decrypt or decompress the data

163
00:06:35,120 --> 00:06:37,840
i assumed it it might be sold or some

164
00:06:37,840 --> 00:06:39,440
simple encryption simple standard

165
00:06:39,440 --> 00:06:42,400
encryption because of this repeated a

166
00:06:42,400 --> 00:06:44,080
pattern

167
00:06:44,080 --> 00:06:46,000
which most of the time indicate it's a

168
00:06:46,000 --> 00:06:49,120
simple so encryption but wasn't very

169
00:06:49,120 --> 00:06:50,960
successful with that i fought with that

170
00:06:50,960 --> 00:06:53,120
for a week

171
00:06:53,120 --> 00:06:56,319
and doing the fast forward thing again

172
00:06:56,319 --> 00:06:59,039
i finally

173
00:06:59,039 --> 00:07:00,639
looked online

174
00:07:00,639 --> 00:07:03,759
and i was able to find in some github

175
00:07:03,759 --> 00:07:06,400
a post for mega form a guy girl which

176
00:07:06,400 --> 00:07:08,880
goes by the name of nes mogos

177
00:07:08,880 --> 00:07:11,520
uh which did excellent work decrypting

178
00:07:11,520 --> 00:07:13,599
uh the firmware

179
00:07:13,599 --> 00:07:17,199
uh and he actually uploaded for everyone

180
00:07:17,199 --> 00:07:18,400
who wants to play with reverse

181
00:07:18,400 --> 00:07:19,599
engineering

182
00:07:19,599 --> 00:07:22,000
uh in 2018

183
00:07:22,000 --> 00:07:24,000
so i actually reached him uh because

184
00:07:24,000 --> 00:07:26,240
it's an old post i reached him and i

185
00:07:26,240 --> 00:07:27,039
asked

186
00:07:27,039 --> 00:07:30,160
and he suggested that he'll decrypt the

187
00:07:30,160 --> 00:07:32,800
newer version for me

188
00:07:32,800 --> 00:07:34,160
and

189
00:07:34,160 --> 00:07:37,360
finally i got the decryption decrypted a

190
00:07:37,360 --> 00:07:39,440
femwell

191
00:07:39,440 --> 00:07:40,720
which

192
00:07:40,720 --> 00:07:43,360
strings looks like that

193
00:07:43,360 --> 00:07:45,759
so we have the ad there we have some

194
00:07:45,759 --> 00:07:49,120
server in here and we have a lot of

195
00:07:49,120 --> 00:07:51,360
some kind of data so what is that that

196
00:07:51,360 --> 00:07:52,240
data

197
00:07:52,240 --> 00:07:55,680
it's actually x intel hex encoded

198
00:07:55,680 --> 00:07:58,560
and intellects works like that so we

199
00:07:58,560 --> 00:08:00,639
have the separator in here

200
00:08:00,639 --> 00:08:03,599
and in each

201
00:08:03,680 --> 00:08:07,919
a part describes a some kind of data and

202
00:08:07,919 --> 00:08:09,360
where it should

203
00:08:09,360 --> 00:08:10,720
it should go

204
00:08:10,720 --> 00:08:13,039
uh a checksum

205
00:08:13,039 --> 00:08:15,680
in the byte count the size

206
00:08:15,680 --> 00:08:16,960
so i just

207
00:08:16,960 --> 00:08:19,759
took a quickly took a a python library

208
00:08:19,759 --> 00:08:22,000
fixed some bugs in there until it worked

209
00:08:22,000 --> 00:08:26,000
and finally i got the decrypted payload

210
00:08:26,000 --> 00:08:27,919
which the firmware actually loads only

211
00:08:27,919 --> 00:08:30,080
in memory

212
00:08:30,080 --> 00:08:31,919
and did some strings on it and we can

213
00:08:31,919 --> 00:08:33,919
see immediately that there is something

214
00:08:33,919 --> 00:08:35,919
interesting in here although it's not

215
00:08:35,919 --> 00:08:38,559
quite the firmware there's no no a lot

216
00:08:38,559 --> 00:08:40,559
of strings in here and the editor seems

217
00:08:40,559 --> 00:08:42,320
to indicate that it might be some kind

218
00:08:42,320 --> 00:08:45,680
of internet bootloader

219
00:08:45,839 --> 00:08:48,160
so now starting with reverse engineering

220
00:08:48,160 --> 00:08:51,440
i loaded everything to a jira and

221
00:08:51,440 --> 00:08:53,279
immediately spotted that there is

222
00:08:53,279 --> 00:08:54,640
something in here

223
00:08:54,640 --> 00:08:57,600
those other cells that seem to make

224
00:08:57,600 --> 00:09:01,760
sense are taking into account that most

225
00:09:01,760 --> 00:09:04,959
um firmwares start with a vector table

226
00:09:04,959 --> 00:09:07,200
which describes the initial stack

227
00:09:07,200 --> 00:09:10,160
pointer the main function which goes by

228
00:09:10,160 --> 00:09:12,000
the name of reset

229
00:09:12,000 --> 00:09:14,640
and and some other interrupt handlers so

230
00:09:14,640 --> 00:09:16,320
that seems pretty good taking into

231
00:09:16,320 --> 00:09:18,080
account that

232
00:09:18,080 --> 00:09:20,959
uh the memory ranges in here that's uh

233
00:09:20,959 --> 00:09:23,200
an image taken from the data sheet of

234
00:09:23,200 --> 00:09:25,120
the stm chip

235
00:09:25,120 --> 00:09:27,680
the memory ranges of the ram

236
00:09:27,680 --> 00:09:30,000
matched the stack pointer address

237
00:09:30,000 --> 00:09:31,920
and the flash the the film itself

238
00:09:31,920 --> 00:09:34,640
matched those addresses so that must be

239
00:09:34,640 --> 00:09:36,959
our main function

240
00:09:36,959 --> 00:09:39,600
which is a really good indication so i

241
00:09:39,600 --> 00:09:42,080
just went over and and reverse

242
00:09:42,080 --> 00:09:44,320
engineered the film well

243
00:09:44,320 --> 00:09:47,120
i needed to guess the base address so

244
00:09:47,120 --> 00:09:48,560
things would

245
00:09:48,560 --> 00:09:51,040
come along like nicely

246
00:09:51,040 --> 00:09:53,440
and it seems like there is no operating

247
00:09:53,440 --> 00:09:56,000
system no real-time operating system

248
00:09:56,000 --> 00:09:59,120
just a plain female

249
00:09:59,360 --> 00:10:03,360
and it it seems that it does all

250
00:10:03,360 --> 00:10:06,480
it does a only a fetching

251
00:10:06,480 --> 00:10:09,040
a female former remote server

252
00:10:09,040 --> 00:10:12,079
using some proprietary protocol and

253
00:10:12,079 --> 00:10:15,200
which is also encrypted

254
00:10:15,200 --> 00:10:17,120
so taking a deep

255
00:10:17,120 --> 00:10:19,360
breath will start

256
00:10:19,360 --> 00:10:22,160
i set it up a man in the middle

257
00:10:22,160 --> 00:10:24,160
where the device the alarm system

258
00:10:24,160 --> 00:10:27,360
connects to my laptop which dumps the

259
00:10:27,360 --> 00:10:30,240
network traffic with wildshark

260
00:10:30,240 --> 00:10:32,959
when it goes to the server

261
00:10:32,959 --> 00:10:35,040
and on the other hand i used infield in

262
00:10:35,040 --> 00:10:37,440
the vm uh to i

263
00:10:37,440 --> 00:10:40,160
tell him to start that's a newer version

264
00:10:40,160 --> 00:10:42,480
and just tell the device going and start

265
00:10:42,480 --> 00:10:44,880
update then i was able to dump the old

266
00:10:44,880 --> 00:10:47,040
communication with wild shock

267
00:10:47,040 --> 00:10:48,560
and i got that

268
00:10:48,560 --> 00:10:50,640
so

269
00:10:50,640 --> 00:10:53,120
on a brief look i was able to spot the

270
00:10:53,120 --> 00:10:55,120
encrypted firmware because it started

271
00:10:55,120 --> 00:10:58,800
with eb 619c

272
00:10:58,800 --> 00:11:00,800
which i knew

273
00:11:00,800 --> 00:11:03,120
from exploring the puff file that is the

274
00:11:03,120 --> 00:11:06,079
beginning of the encrypted data

275
00:11:06,079 --> 00:11:09,920
and for a fairly good reason eb 1699c

276
00:11:09,920 --> 00:11:13,279
is always this header ip150

277
00:11:13,279 --> 00:11:16,640
on the decrypted path

278
00:11:17,279 --> 00:11:19,040
so that's pretty good news it seems to

279
00:11:19,040 --> 00:11:21,440
be decrypted and encrypted so with the

280
00:11:21,440 --> 00:11:23,360
same encryption algorithm using the

281
00:11:23,360 --> 00:11:24,640
pathfile

282
00:11:24,640 --> 00:11:26,160
and there is some

283
00:11:26,160 --> 00:11:29,279
some header in here

284
00:11:29,279 --> 00:11:32,640
so the header itself is is made up of a

285
00:11:32,640 --> 00:11:34,320
magic number

286
00:11:34,320 --> 00:11:35,839
a

287
00:11:35,839 --> 00:11:38,240
that is just compared a packet size

288
00:11:38,240 --> 00:11:40,640
which is little endian encoded

289
00:11:40,640 --> 00:11:43,440
and a checksum which is a really simple

290
00:11:43,440 --> 00:11:44,959
cumulative

291
00:11:44,959 --> 00:11:46,079
checksum

292
00:11:46,079 --> 00:11:47,680
they just count all of the bytes

293
00:11:47,680 --> 00:11:49,839
together and get

294
00:11:49,839 --> 00:11:52,959
two bytes check some

295
00:11:52,959 --> 00:11:56,720
and regarding the encryption um i did a

296
00:11:56,720 --> 00:11:59,279
quick python script

297
00:11:59,279 --> 00:12:01,839
which is just a python version of the

298
00:12:01,839 --> 00:12:03,680
encryption algorithm from the firmware

299
00:12:03,680 --> 00:12:06,560
decryption algorithm

300
00:12:06,560 --> 00:12:08,639
so it looks pretty similar

301
00:12:08,639 --> 00:12:10,399
the encryption itself is not

302
00:12:10,399 --> 00:12:12,480
i think it's a proprietary encryption

303
00:12:12,480 --> 00:12:14,880
it's not very complex

304
00:12:14,880 --> 00:12:16,960
but not very simple either

305
00:12:16,960 --> 00:12:18,160
[Music]

306
00:12:18,160 --> 00:12:20,720
so i just did the script and i tried to

307
00:12:20,720 --> 00:12:22,959
decrypt the data

308
00:12:22,959 --> 00:12:25,120
and those are the strings that i got

309
00:12:25,120 --> 00:12:26,639
so you can see

310
00:12:26,639 --> 00:12:29,040
that we have some kind of an html file

311
00:12:29,040 --> 00:12:30,079
in here

312
00:12:30,079 --> 00:12:32,639
and that we have several other html

313
00:12:32,639 --> 00:12:34,320
files by name

314
00:12:34,320 --> 00:12:36,320
some memory manager exceptions some

315
00:12:36,320 --> 00:12:39,200
registers in here seems pretty good

316
00:12:39,200 --> 00:12:41,839
seems like the the actual a firmware to

317
00:12:41,839 --> 00:12:44,000
me

318
00:12:44,639 --> 00:12:48,000
so just to summarize up in this point we

319
00:12:48,000 --> 00:12:49,680
got the device

320
00:12:49,680 --> 00:12:51,680
we decrypted the path with the help of

321
00:12:51,680 --> 00:12:52,800
our friend

322
00:12:52,800 --> 00:12:55,120
decrypted the x encoded in memory

323
00:12:55,120 --> 00:12:56,160
payload

324
00:12:56,160 --> 00:12:59,120
reversing engineered it and using the

325
00:12:59,120 --> 00:13:01,360
main individual setup dumped

326
00:13:01,360 --> 00:13:05,040
the a female form network and decrypted

327
00:13:05,040 --> 00:13:06,399
it

328
00:13:06,399 --> 00:13:09,360
and now we'll get into this point

329
00:13:09,360 --> 00:13:10,800
to the point where

330
00:13:10,800 --> 00:13:12,639
we can actually

331
00:13:12,639 --> 00:13:14,399
investigate

332
00:13:14,399 --> 00:13:15,360
how

333
00:13:15,360 --> 00:13:20,320
the web interface works this login page

334
00:13:20,320 --> 00:13:22,480
and we know there is some involvement of

335
00:13:22,480 --> 00:13:24,800
lwip in here and there is some web

336
00:13:24,800 --> 00:13:25,839
server

337
00:13:25,839 --> 00:13:28,399
but that now we're in the state in the

338
00:13:28,399 --> 00:13:29,760
state where we

339
00:13:29,760 --> 00:13:31,519
really want to

340
00:13:31,519 --> 00:13:33,519
explore that

341
00:13:33,519 --> 00:13:35,680
part

342
00:13:35,680 --> 00:13:39,279
so lw ip as i said is a pretty popular

343
00:13:39,279 --> 00:13:41,600
open source um

344
00:13:41,600 --> 00:13:43,760
each vendor has to implement

345
00:13:43,760 --> 00:13:45,600
only the network interface and then we

346
00:13:45,600 --> 00:13:47,279
have like the ip

347
00:13:47,279 --> 00:13:48,480
layer

348
00:13:48,480 --> 00:13:50,880
and the tcp and high level protocols

349
00:13:50,880 --> 00:13:53,600
such as dns and applications like web

350
00:13:53,600 --> 00:13:56,000
servers

351
00:13:56,000 --> 00:13:57,760
specifically the web server that comes

352
00:13:57,760 --> 00:14:00,959
along with lwip

353
00:14:01,199 --> 00:14:04,240
is a pretty nice web server and

354
00:14:04,240 --> 00:14:06,160
it's a static one also

355
00:14:06,160 --> 00:14:08,800
so the way that that works is that as a

356
00:14:08,800 --> 00:14:11,000
programmer if i want to use

357
00:14:11,000 --> 00:14:13,360
index.html for example

358
00:14:13,360 --> 00:14:17,040
i'll a go and a use

359
00:14:17,040 --> 00:14:19,760
a make fs data utility that comes along

360
00:14:19,760 --> 00:14:22,639
with lwip and that utility will will

361
00:14:22,639 --> 00:14:24,800
actually take the data from index.html

362
00:14:24,800 --> 00:14:26,720
and encode it as an

363
00:14:26,720 --> 00:14:29,199
as a variable in a

364
00:14:29,199 --> 00:14:30,720
c file

365
00:14:30,720 --> 00:14:33,279
so afterwards on the actual device i

366
00:14:33,279 --> 00:14:35,680
could use fso pen which is an

367
00:14:35,680 --> 00:14:38,399
implementation of a virtual file system

368
00:14:38,399 --> 00:14:40,560
that will go back to that

369
00:14:40,560 --> 00:14:41,920
c file

370
00:14:41,920 --> 00:14:43,680
and fetch the data

371
00:14:43,680 --> 00:14:46,079
and supply it to the application to the

372
00:14:46,079 --> 00:14:48,160
web server so it could send it back as a

373
00:14:48,160 --> 00:14:50,880
get response

374
00:14:51,199 --> 00:14:53,600
and everything is pretty tight it's the

375
00:14:53,600 --> 00:14:56,320
implementation is simple the http dot c

376
00:14:56,320 --> 00:14:59,839
holds all of the web server

377
00:15:00,079 --> 00:15:03,680
itself and then we have the make fs data

378
00:15:03,680 --> 00:15:05,839
utility

379
00:15:05,839 --> 00:15:08,399
uh and that's just an example of files

380
00:15:08,399 --> 00:15:10,000
that you can

381
00:15:10,000 --> 00:15:12,320
use so that's like the fsdata.c that

382
00:15:12,320 --> 00:15:13,839
comes along with the project there is

383
00:15:13,839 --> 00:15:14,880
some

384
00:15:14,880 --> 00:15:17,040
index.html encoded in here and you can

385
00:15:17,040 --> 00:15:17,920
see

386
00:15:17,920 --> 00:15:20,560
that it also includes like the http

387
00:15:20,560 --> 00:15:23,279
address and the a server adder

388
00:15:23,279 --> 00:15:27,800
content length and the data itself

389
00:15:28,320 --> 00:15:29,759
so

390
00:15:29,759 --> 00:15:31,120
let's talk about the vulnerability

391
00:15:31,120 --> 00:15:32,560
itself um

392
00:15:32,560 --> 00:15:36,000
at this point we have like as the user

393
00:15:36,000 --> 00:15:39,199
we have the a connection page which

394
00:15:39,199 --> 00:15:42,399
behind the scenes uses javascript some

395
00:15:42,399 --> 00:15:44,240
legacy function called

396
00:15:44,240 --> 00:15:45,279
login

397
00:15:45,279 --> 00:15:47,199
encrypt

398
00:15:47,199 --> 00:15:48,160
which

399
00:15:48,160 --> 00:15:50,399
actually encrypts the

400
00:15:50,399 --> 00:15:54,480
a user code with lc4 then it hashes it

401
00:15:54,480 --> 00:15:58,000
with md5 and x encoded so it could be

402
00:15:58,000 --> 00:16:00,560
safely passed as a username and password

403
00:16:00,560 --> 00:16:03,360
i think the username and password split

404
00:16:03,360 --> 00:16:06,320
is for legacy purposes

405
00:16:06,320 --> 00:16:09,759
so it just encrypts hashes and xm codes

406
00:16:09,759 --> 00:16:11,680
and everything is passed as a get

407
00:16:11,680 --> 00:16:13,279
parameters

408
00:16:13,279 --> 00:16:15,839
uh to the server

409
00:16:15,839 --> 00:16:17,920
now on the server side what paradox did

410
00:16:17,920 --> 00:16:20,880
they actually took the

411
00:16:20,880 --> 00:16:25,120
stock server from lwip and they added uh

412
00:16:25,120 --> 00:16:27,680
verification functions so the user must

413
00:16:27,680 --> 00:16:29,600
be logged in

414
00:16:29,600 --> 00:16:31,360
so that's just some general function

415
00:16:31,360 --> 00:16:32,360
that uses um

416
00:16:32,360 --> 00:16:33,759
[Music]

417
00:16:33,759 --> 00:16:36,240
that handles the cgi calls and you can

418
00:16:36,240 --> 00:16:37,680
see there is like a loop in here and

419
00:16:37,680 --> 00:16:40,240
there's the extract ui parameters and on

420
00:16:40,240 --> 00:16:43,440
the other end we have um the firmware

421
00:16:43,440 --> 00:16:45,600
so we have the same function here's the

422
00:16:45,600 --> 00:16:47,040
loop and here's the extract ui

423
00:16:47,040 --> 00:16:48,399
parameters

424
00:16:48,399 --> 00:16:50,959
only with a check to see if the user is

425
00:16:50,959 --> 00:16:52,880
connected

426
00:16:52,880 --> 00:16:56,959
uh is so that that's what they did and

427
00:16:56,959 --> 00:17:00,240
and what we care about is the actual

428
00:17:00,240 --> 00:17:02,560
authentication functions on the server

429
00:17:02,560 --> 00:17:04,480
function only

430
00:17:04,480 --> 00:17:05,919
on the server side

431
00:17:05,919 --> 00:17:06,799
so

432
00:17:06,799 --> 00:17:10,240
paradox login as i tagged it

433
00:17:10,240 --> 00:17:12,799
and and now we

434
00:17:12,799 --> 00:17:15,439
reach our first remote code execution

435
00:17:15,439 --> 00:17:16,880
vulnerability

436
00:17:16,880 --> 00:17:20,240
so labeled under a cv 2020

437
00:17:20,240 --> 00:17:23,760
25 189

438
00:17:23,760 --> 00:17:25,520
uh it's actually a bunch of

439
00:17:25,520 --> 00:17:28,000
buffer overflow vulnerabilities in the

440
00:17:28,000 --> 00:17:29,280
same function

441
00:17:29,280 --> 00:17:31,039
the same login function

442
00:17:31,039 --> 00:17:33,520
so a first thing you can see in here the

443
00:17:33,520 --> 00:17:34,799
stl copy

444
00:17:34,799 --> 00:17:37,280
actually what happens is that they get

445
00:17:37,280 --> 00:17:39,760
parameters in here opacity is a list of

446
00:17:39,760 --> 00:17:41,840
strings

447
00:17:41,840 --> 00:17:43,600
and for each one

448
00:17:43,600 --> 00:17:45,679
they take the data in the parameter and

449
00:17:45,679 --> 00:17:49,440
they copy it to a local uh

450
00:17:49,440 --> 00:17:54,559
a buffer with a length of 100 100 bytes

451
00:17:54,559 --> 00:17:55,360
and

452
00:17:55,360 --> 00:17:57,360
that is done obviously in an unsafe

453
00:17:57,360 --> 00:18:00,640
matter which leads to a buffer overflow

454
00:18:00,640 --> 00:18:02,960
now the more interesting part the more

455
00:18:02,960 --> 00:18:04,720
interest in buffer overflow is another

456
00:18:04,720 --> 00:18:06,320
one

457
00:18:06,320 --> 00:18:09,039
which happens on the x decoding

458
00:18:09,039 --> 00:18:10,160
logic

459
00:18:10,160 --> 00:18:12,080
so what they did in here because they

460
00:18:12,080 --> 00:18:15,440
passed everything next xd coding

461
00:18:15,440 --> 00:18:17,760
they actually go two bytes at a time and

462
00:18:17,760 --> 00:18:19,200
use scanf

463
00:18:19,200 --> 00:18:20,240
to

464
00:18:20,240 --> 00:18:22,240
decode the hex

465
00:18:22,240 --> 00:18:24,480
into one byte so

466
00:18:24,480 --> 00:18:26,080
the thing is that

467
00:18:26,080 --> 00:18:28,559
the loop only stops when it's null

468
00:18:28,559 --> 00:18:30,240
so it's essentially the same kind of

469
00:18:30,240 --> 00:18:32,799
buffer overflow we can put as many data

470
00:18:32,799 --> 00:18:35,280
as we want and then decode it

471
00:18:35,280 --> 00:18:39,360
to a limited size buffer local buffer

472
00:18:39,360 --> 00:18:41,280
which leads us to another buffer

473
00:18:41,280 --> 00:18:42,640
overflow

474
00:18:42,640 --> 00:18:44,640
and there's another with the password

475
00:18:44,640 --> 00:18:47,520
also obviously

476
00:18:47,520 --> 00:18:50,400
a and that's our first and major uh

477
00:18:50,400 --> 00:18:53,600
remote code execution vulnerability

478
00:18:53,600 --> 00:18:56,240
the other one

479
00:18:56,240 --> 00:18:58,240
is actually in a pretty similar function

480
00:18:58,240 --> 00:18:59,360
but

481
00:18:59,360 --> 00:19:01,840
it's not the same function it's also an

482
00:19:01,840 --> 00:19:03,919
authentication function but it's used

483
00:19:03,919 --> 00:19:05,200
when you

484
00:19:05,200 --> 00:19:07,919
already authenticated and they want to

485
00:19:07,919 --> 00:19:10,880
kind of re-verify authentication

486
00:19:10,880 --> 00:19:12,480
because it's like a high privilege

487
00:19:12,480 --> 00:19:14,480
function

488
00:19:14,480 --> 00:19:16,559
and in here

489
00:19:16,559 --> 00:19:18,960
you can see those it's pretty similar

490
00:19:18,960 --> 00:19:22,559
but only there is some more buffers

491
00:19:22,559 --> 00:19:24,720
and that's exactly the same like the

492
00:19:24,720 --> 00:19:28,160
username and password uh in the linear

493
00:19:28,160 --> 00:19:29,280
[Music]

494
00:19:29,280 --> 00:19:31,520
but besides the username and password we

495
00:19:31,520 --> 00:19:33,600
also have in this function the pnl and

496
00:19:33,600 --> 00:19:36,240
pnp and some other um

497
00:19:36,240 --> 00:19:38,880
possible get parameter names i think

498
00:19:38,880 --> 00:19:41,840
i suspect it's for um

499
00:19:41,840 --> 00:19:45,200
like an api kind of authentication maybe

500
00:19:45,200 --> 00:19:47,520
or for legacy purposes

501
00:19:47,520 --> 00:19:48,720
so

502
00:19:48,720 --> 00:19:50,640
that's great we got two remote code

503
00:19:50,640 --> 00:19:53,919
execution availabilities on the device

504
00:19:53,919 --> 00:19:54,720
now

505
00:19:54,720 --> 00:19:57,760
it's time to exploit them so

506
00:19:57,760 --> 00:20:00,640
we need to decide what we want to do

507
00:20:00,640 --> 00:20:02,720
the obvious thing in those situations

508
00:20:02,720 --> 00:20:04,960
would be that we want to override the

509
00:20:04,960 --> 00:20:07,280
allow the return pointer so when the

510
00:20:07,280 --> 00:20:10,159
function ends it will pop back the

511
00:20:10,159 --> 00:20:12,400
program counter and then we get

512
00:20:12,400 --> 00:20:15,280
a control over the

513
00:20:15,280 --> 00:20:17,600
next instruction the instruction pointer

514
00:20:17,600 --> 00:20:19,520
essentially

515
00:20:19,520 --> 00:20:22,320
so we could execute our shell code as

516
00:20:22,320 --> 00:20:23,919
strictly

517
00:20:23,919 --> 00:20:26,400
so we could execute the shell code

518
00:20:26,400 --> 00:20:29,280
directly from stack

519
00:20:29,280 --> 00:20:32,720
but the only problem in here is that we

520
00:20:32,720 --> 00:20:35,760
can't do it because in these specific

521
00:20:35,760 --> 00:20:38,240
arm chips from st electronics what

522
00:20:38,240 --> 00:20:40,320
happens is that the memory

523
00:20:40,320 --> 00:20:42,640
lies in an address range

524
00:20:42,640 --> 00:20:46,400
which starts with a hexa 20

525
00:20:46,400 --> 00:20:49,440
which in asca encoding means a white

526
00:20:49,440 --> 00:20:50,960
space

527
00:20:50,960 --> 00:20:51,840
and

528
00:20:51,840 --> 00:20:53,520
because we are working with get

529
00:20:53,520 --> 00:20:55,440
parameters we can't have white space in

530
00:20:55,440 --> 00:20:57,360
there if we'll send white space what

531
00:20:57,360 --> 00:20:59,360
happens is that the server won't the

532
00:20:59,360 --> 00:21:01,360
vulnerability won't be triggered on the

533
00:21:01,360 --> 00:21:03,280
server

534
00:21:03,280 --> 00:21:04,240
so

535
00:21:04,240 --> 00:21:05,520
that's

536
00:21:05,520 --> 00:21:07,919
that's kind of a problem and the way

537
00:21:07,919 --> 00:21:10,720
that i solved it uh overcomed it was

538
00:21:10,720 --> 00:21:12,960
using an opt-chain

539
00:21:12,960 --> 00:21:16,240
the idea with the option is to use um

540
00:21:16,240 --> 00:21:19,039
a existing parts of

541
00:21:19,039 --> 00:21:21,679
the femur the female chord

542
00:21:21,679 --> 00:21:23,520
each part is called a gadget and we

543
00:21:23,520 --> 00:21:26,240
assemble them together we jump from

544
00:21:26,240 --> 00:21:28,720
first gadget to the second gather

545
00:21:28,720 --> 00:21:30,799
and and the nice thing is that the film

546
00:21:30,799 --> 00:21:33,200
relies in the memory area that it starts

547
00:21:33,200 --> 00:21:34,360
with a

548
00:21:34,360 --> 00:21:38,480
xr80 so we don't have a problem to jump

549
00:21:38,480 --> 00:21:40,000
over there

550
00:21:40,000 --> 00:21:42,400
and in here the important stuff is the

551
00:21:42,400 --> 00:21:44,720
loading of the stack pointer address

552
00:21:44,720 --> 00:21:46,400
well shellcode lies

553
00:21:46,400 --> 00:21:49,760
uh into a register

554
00:21:49,760 --> 00:21:52,400
and then eventually into r1 and

555
00:21:52,400 --> 00:21:55,280
eventually we can we jump using blx the

556
00:21:55,280 --> 00:21:57,280
branch instruction the jump instruction

557
00:21:57,280 --> 00:21:59,280
you know we jump to

558
00:21:59,280 --> 00:22:00,960
this address

559
00:22:00,960 --> 00:22:03,360
and after doing some setup in here and

560
00:22:03,360 --> 00:22:04,559
all of that

561
00:22:04,559 --> 00:22:05,360
so

562
00:22:05,360 --> 00:22:06,960
um

563
00:22:06,960 --> 00:22:09,280
we start with the buffer overflow we go

564
00:22:09,280 --> 00:22:10,960
to the firmware and form the firmware we

565
00:22:10,960 --> 00:22:14,880
go back to the shell code

566
00:22:15,039 --> 00:22:17,520
i just wrapped it a bit so it would be

567
00:22:17,520 --> 00:22:18,880
nicer to use

568
00:22:18,880 --> 00:22:21,039
you can see it's a python code that

569
00:22:21,039 --> 00:22:23,520
handles all of the exploitation and

570
00:22:23,520 --> 00:22:25,600
process

571
00:22:25,600 --> 00:22:28,000
so except the program counter we are

572
00:22:28,000 --> 00:22:30,559
also overriding all of these

573
00:22:30,559 --> 00:22:32,799
registers

574
00:22:32,799 --> 00:22:35,679
and the exploit function would create a

575
00:22:35,679 --> 00:22:38,880
get request to the alarm system

576
00:22:38,880 --> 00:22:41,360
which actually puts um

577
00:22:41,360 --> 00:22:43,840
a a all of the

578
00:22:43,840 --> 00:22:46,400
data that we need to override

579
00:22:46,400 --> 00:22:47,520
um

580
00:22:47,520 --> 00:22:49,840
in in the user parameter and the

581
00:22:49,840 --> 00:22:52,799
password parameter is specified in here

582
00:22:52,799 --> 00:22:54,960
uh and i wrapped everything

583
00:22:54,960 --> 00:22:57,440
with a function that i called safe exec

584
00:22:57,440 --> 00:23:00,480
that just takes code binary code and

585
00:23:00,480 --> 00:23:02,320
execute it

586
00:23:02,320 --> 00:23:04,880
in the memory of the device

587
00:23:04,880 --> 00:23:07,360
leveraging the vulnerability

588
00:23:07,360 --> 00:23:09,919
and their rope gadgets

589
00:23:09,919 --> 00:23:12,320
so all of the gadget addresses in the

590
00:23:12,320 --> 00:23:14,960
firmware are encoded

591
00:23:14,960 --> 00:23:18,960
and and also the code is x encoded so it

592
00:23:18,960 --> 00:23:22,159
be would be x decoded afterwards on the

593
00:23:22,159 --> 00:23:23,679
device

594
00:23:23,679 --> 00:23:27,360
and it's best as the a password

595
00:23:27,360 --> 00:23:30,559
a get parameter

596
00:23:30,720 --> 00:23:32,559
so in that point

597
00:23:32,559 --> 00:23:34,320
we have the vulnerability we know how to

598
00:23:34,320 --> 00:23:37,440
exploit it we're using a rock chain uh

599
00:23:37,440 --> 00:23:40,480
to safely jump back to the shell code

600
00:23:40,480 --> 00:23:43,919
and now the only thing left is to a um

601
00:23:43,919 --> 00:23:46,400
decide how we want to exploit it

602
00:23:46,400 --> 00:23:48,799
so we said that the final goal is to

603
00:23:48,799 --> 00:23:50,640
disarm the alarm

604
00:23:50,640 --> 00:23:53,120
uh and the easiest way in my opinion to

605
00:23:53,120 --> 00:23:55,200
do so is using

606
00:23:55,200 --> 00:23:56,400
an api

607
00:23:56,400 --> 00:23:58,880
and for that api we need the password

608
00:23:58,880 --> 00:24:00,559
so the shell code idea is to dump the

609
00:24:00,559 --> 00:24:02,159
password

610
00:24:02,159 --> 00:24:05,120
and send it back to the cnc back to us

611
00:24:05,120 --> 00:24:07,760
as the attacker

612
00:24:07,760 --> 00:24:10,480
and it it could be very very complex

613
00:24:10,480 --> 00:24:11,279
because

614
00:24:11,279 --> 00:24:13,120
think about it the firmware is just it's

615
00:24:13,120 --> 00:24:14,640
a plain firmware

616
00:24:14,640 --> 00:24:16,400
uh there was no operating system there

617
00:24:16,400 --> 00:24:17,279
was no

618
00:24:17,279 --> 00:24:18,400
api

619
00:24:18,400 --> 00:24:20,559
and i really didn't didn't want to mess

620
00:24:20,559 --> 00:24:22,640
with all of those those things so

621
00:24:22,640 --> 00:24:24,320
creating a reverse shell for example

622
00:24:24,320 --> 00:24:26,799
would require a lot of work

623
00:24:26,799 --> 00:24:28,799
so the idea was to leverage what the

624
00:24:28,799 --> 00:24:32,400
code that we already have in the funeral

625
00:24:32,400 --> 00:24:35,760
and and the way that i did it is um by

626
00:24:35,760 --> 00:24:38,880
changing the original code flow so

627
00:24:38,880 --> 00:24:42,240
originally uh the user would request a

628
00:24:42,240 --> 00:24:43,600
to login

629
00:24:43,600 --> 00:24:45,360
uh and then the function would the login

630
00:24:45,360 --> 00:24:47,360
function would check okay the username

631
00:24:47,360 --> 00:24:50,000
and password is valid yes yes okay

632
00:24:50,000 --> 00:24:52,159
now it would open

633
00:24:52,159 --> 00:24:54,400
some a41 page

634
00:24:54,400 --> 00:24:56,000
and it would set it to be the page that

635
00:24:56,000 --> 00:24:58,720
the device should return

636
00:24:58,720 --> 00:25:01,120
so the idea was that we'll change the

637
00:25:01,120 --> 00:25:04,240
flow here we have the exploit and it's

638
00:25:04,240 --> 00:25:05,600
instead

639
00:25:05,600 --> 00:25:09,039
of opening uh and of simply opening and

640
00:25:09,039 --> 00:25:10,400
returning

641
00:25:10,400 --> 00:25:12,480
on that html page

642
00:25:12,480 --> 00:25:15,840
will modify the behavior

643
00:25:15,919 --> 00:25:21,279
so that the html page um actually a a

644
00:25:21,279 --> 00:25:22,640
would point

645
00:25:22,640 --> 00:25:23,679
to some

646
00:25:23,679 --> 00:25:27,520
a address in memory that we know

647
00:25:27,520 --> 00:25:31,600
that the password is is at

648
00:25:31,600 --> 00:25:34,640
so every html page every page that you

649
00:25:34,640 --> 00:25:37,600
open with the fs function open fs open

650
00:25:37,600 --> 00:25:38,640
function

651
00:25:38,640 --> 00:25:40,720
uh actually returns a descriptor which

652
00:25:40,720 --> 00:25:42,799
says okay that's the file that's the

653
00:25:42,799 --> 00:25:44,080
file name

654
00:25:44,080 --> 00:25:46,400
that's where the data is that's the

655
00:25:46,400 --> 00:25:49,279
length of the data

656
00:25:49,360 --> 00:25:52,400
so we'll open some whatever page

657
00:25:52,400 --> 00:25:54,320
and then we'll edit the pointer to the

658
00:25:54,320 --> 00:25:56,880
data and set it to so the device would

659
00:25:56,880 --> 00:26:00,000
return that new modified

660
00:26:00,000 --> 00:26:00,960
page

661
00:26:00,960 --> 00:26:02,480
which is essentially the password for

662
00:26:02,480 --> 00:26:04,159
memory

663
00:26:04,159 --> 00:26:06,240
that's how the fs open function the

664
00:26:06,240 --> 00:26:08,400
original function from lwp

665
00:26:08,400 --> 00:26:10,960
looks like you can see it sets all of

666
00:26:10,960 --> 00:26:13,440
this data in the descriptor right here

667
00:26:13,440 --> 00:26:16,240
and all of what we want to do is modify

668
00:26:16,240 --> 00:26:18,400
this pointer

669
00:26:18,400 --> 00:26:20,240
and that's the shell code uh which

670
00:26:20,240 --> 00:26:22,240
modifies the pointer

671
00:26:22,240 --> 00:26:24,559
that some initialization stuff not

672
00:26:24,559 --> 00:26:27,360
interesting default html password a

673
00:26:27,360 --> 00:26:29,360
password so string

674
00:26:29,360 --> 00:26:30,320
in the

675
00:26:30,320 --> 00:26:32,000
firmware so that's the address in the

676
00:26:32,000 --> 00:26:33,039
firmware

677
00:26:33,039 --> 00:26:35,279
uh fs open the function in the firmware

678
00:26:35,279 --> 00:26:36,320
which

679
00:26:36,320 --> 00:26:38,240
handles the opening of the file from the

680
00:26:38,240 --> 00:26:39,200
vfs

681
00:26:39,200 --> 00:26:42,000
uh which lies in that address um we just

682
00:26:42,000 --> 00:26:42,960
call it

683
00:26:42,960 --> 00:26:45,120
like branch to it

684
00:26:45,120 --> 00:26:47,200
and then changing

685
00:26:47,200 --> 00:26:48,880
a

686
00:26:48,880 --> 00:26:52,640
a the data pointer to our new data

687
00:26:52,640 --> 00:26:53,600
which

688
00:26:53,600 --> 00:26:55,520
is the password

689
00:26:55,520 --> 00:26:57,279
in memory you can see that's a ram

690
00:26:57,279 --> 00:26:59,279
address

691
00:26:59,279 --> 00:27:00,960
and then we'll continue in with the

692
00:27:00,960 --> 00:27:04,159
normal execution which essentially leads

693
00:27:04,159 --> 00:27:05,440
to

694
00:27:05,440 --> 00:27:08,640
the behavior where the device returns

695
00:27:08,640 --> 00:27:11,039
the password it dumps it for memory and

696
00:27:11,039 --> 00:27:14,000
returns it to us on the same

697
00:27:14,000 --> 00:27:15,919
get request that we created to exploit

698
00:27:15,919 --> 00:27:18,480
the device

699
00:27:18,559 --> 00:27:20,480
now we exploited the device we got a

700
00:27:20,480 --> 00:27:23,360
password now the question is how do we

701
00:27:23,360 --> 00:27:26,159
disarm it so for that there is a bunch

702
00:27:26,159 --> 00:27:28,640
of products in github i chose to use pai

703
00:27:28,640 --> 00:27:30,720
paradox alarm interface

704
00:27:30,720 --> 00:27:33,440
which is a really nice project

705
00:27:33,440 --> 00:27:34,480
it's just

706
00:27:34,480 --> 00:27:36,320
like for automation purposes for guys

707
00:27:36,320 --> 00:27:38,080
who want to um

708
00:27:38,080 --> 00:27:39,840
do like home automation stuff with the

709
00:27:39,840 --> 00:27:42,399
alarm system

710
00:27:42,399 --> 00:27:45,200
and the thing with pai is that um is the

711
00:27:45,200 --> 00:27:47,360
way that it works

712
00:27:47,360 --> 00:27:49,760
so we exploited um

713
00:27:49,760 --> 00:27:52,480
a port 80 like the web interface which

714
00:27:52,480 --> 00:27:54,640
should be open uh from the public

715
00:27:54,640 --> 00:27:57,039
internet but pai

716
00:27:57,039 --> 00:27:59,600
works as this management software called

717
00:27:59,600 --> 00:28:00,799
babywell

718
00:28:00,799 --> 00:28:03,039
babywear is paradox management a

719
00:28:03,039 --> 00:28:05,200
software for a

720
00:28:05,200 --> 00:28:06,799
the alarm systems

721
00:28:06,799 --> 00:28:07,679
and

722
00:28:07,679 --> 00:28:09,679
it's used to set up different tools

723
00:28:09,679 --> 00:28:12,159
different areas different sensors all of

724
00:28:12,159 --> 00:28:13,760
these things

725
00:28:13,760 --> 00:28:16,480
but it's used locally so

726
00:28:16,480 --> 00:28:19,600
a port a 10 000 would normally be open

727
00:28:19,600 --> 00:28:22,320
only on their local network and we're on

728
00:28:22,320 --> 00:28:23,440
the

729
00:28:23,440 --> 00:28:24,960
internet

730
00:28:24,960 --> 00:28:26,080
so

731
00:28:26,080 --> 00:28:28,720
what can we do with that um

732
00:28:28,720 --> 00:28:30,799
and my idea was to create another shell

733
00:28:30,799 --> 00:28:32,320
code

734
00:28:32,320 --> 00:28:35,360
which would switch the ports uh so after

735
00:28:35,360 --> 00:28:37,440
the first exploitation

736
00:28:37,440 --> 00:28:39,200
uh and and

737
00:28:39,200 --> 00:28:41,840
after we have the password we'll exploit

738
00:28:41,840 --> 00:28:43,200
it again

739
00:28:43,200 --> 00:28:46,240
and tell it okay a switch between port

740
00:28:46,240 --> 00:28:48,880
10 000 between the service that goes on

741
00:28:48,880 --> 00:28:50,880
paul 10 000 and the service that goes

742
00:28:50,880 --> 00:28:52,159
with

743
00:28:52,159 --> 00:28:53,840
port 80.

744
00:28:53,840 --> 00:28:56,240
so for that i created this shell code

745
00:28:56,240 --> 00:28:58,720
which essentially used an update config

746
00:28:58,720 --> 00:29:00,240
function which is built in in the

747
00:29:00,240 --> 00:29:02,159
firmware

748
00:29:02,159 --> 00:29:05,919
and tells it to switch uh the services

749
00:29:05,919 --> 00:29:08,799
so now um

750
00:29:08,799 --> 00:29:12,399
what we get is that uh port 10 000 like

751
00:29:12,399 --> 00:29:14,960
the management port is actually port 80

752
00:29:14,960 --> 00:29:16,799
and it would be open

753
00:29:16,799 --> 00:29:20,240
to the public internet

754
00:29:21,360 --> 00:29:24,159
and and that's pretty much it so

755
00:29:24,159 --> 00:29:27,760
um we just to summarize what we we did

756
00:29:27,760 --> 00:29:30,000
up until this point uh we decrypted the

757
00:29:30,000 --> 00:29:32,320
path with the help of our friend

758
00:29:32,320 --> 00:29:36,240
nesmogos we decoded the xenx

759
00:29:36,240 --> 00:29:38,720
intellects encoded payload

760
00:29:38,720 --> 00:29:40,720
we did a man in the middle attack uh

761
00:29:40,720 --> 00:29:44,000
grabbed damped the network a traffic

762
00:29:44,000 --> 00:29:46,640
uh reversed engineered the intellect

763
00:29:46,640 --> 00:29:47,840
payload

764
00:29:47,840 --> 00:29:50,000
uh with that knowledge from the reverse

765
00:29:50,000 --> 00:29:52,240
engineering we decrypted we understood

766
00:29:52,240 --> 00:29:54,159
and decrypted the female from the

767
00:29:54,159 --> 00:29:55,919
network

768
00:29:55,919 --> 00:29:57,600
afterwards we

769
00:29:57,600 --> 00:29:59,760
reverse engineered and found the

770
00:29:59,760 --> 00:30:02,559
vulnerability in the login a handling

771
00:30:02,559 --> 00:30:04,399
function

772
00:30:04,399 --> 00:30:06,799
we exploited this vulnerability using an

773
00:30:06,799 --> 00:30:09,600
op chain that led us back to the first

774
00:30:09,600 --> 00:30:10,340
shell code

775
00:30:10,340 --> 00:30:11,600
[Music]

776
00:30:11,600 --> 00:30:13,840
which is a password dumper it just

777
00:30:13,840 --> 00:30:16,240
dumped the password for us for memory

778
00:30:16,240 --> 00:30:19,520
and returned it on the same get request

779
00:30:19,520 --> 00:30:20,559
then

780
00:30:20,559 --> 00:30:21,360
we

781
00:30:21,360 --> 00:30:23,520
exploited the device the vulnerability

782
00:30:23,520 --> 00:30:24,559
again

783
00:30:24,559 --> 00:30:26,240
switched the ports and now we have

784
00:30:26,240 --> 00:30:28,559
bought 10 000 open

785
00:30:28,559 --> 00:30:30,399
uh to the public internet and we have

786
00:30:30,399 --> 00:30:32,720
the device password together with the

787
00:30:32,720 --> 00:30:35,039
python pai library

788
00:30:35,039 --> 00:30:37,520
uh and and

789
00:30:37,520 --> 00:30:40,159
then we disarm the device

790
00:30:40,159 --> 00:30:43,120
uh and that's pretty much it so now it's

791
00:30:43,120 --> 00:30:44,240
demo time

792
00:30:44,240 --> 00:30:47,360
okay guys so it's demo time and i want

793
00:30:47,360 --> 00:30:50,399
to do this demo really quick so we'll

794
00:30:50,399 --> 00:30:52,559
have enough time for the live q and a

795
00:30:52,559 --> 00:30:53,760
session

796
00:30:53,760 --> 00:30:56,399
so let's start first thing you can see

797
00:30:56,399 --> 00:30:59,039
my screen with the jupiter notebook and

798
00:30:59,039 --> 00:31:00,960
all of the exploitation

799
00:31:00,960 --> 00:31:04,000
code in it so we're just gonna go and

800
00:31:04,000 --> 00:31:06,159
execute it step by step

801
00:31:06,159 --> 00:31:08,960
uh so you will get a real clear view of

802
00:31:08,960 --> 00:31:10,640
what's going on

803
00:31:10,640 --> 00:31:12,480
and if you notice you can also see the

804
00:31:12,480 --> 00:31:15,840
camera view with the alarm system itself

805
00:31:15,840 --> 00:31:16,720
so

806
00:31:16,720 --> 00:31:17,519
here

807
00:31:17,519 --> 00:31:20,559
we have the actual control panel

808
00:31:20,559 --> 00:31:22,559
uh which is used

809
00:31:22,559 --> 00:31:24,799
to control the alarm system

810
00:31:24,799 --> 00:31:26,640
uh and you can see we have two rooms one

811
00:31:26,640 --> 00:31:27,840
is the hallway the other one is the

812
00:31:27,840 --> 00:31:29,039
kitchen

813
00:31:29,039 --> 00:31:30,640
both are system off which means the

814
00:31:30,640 --> 00:31:33,440
alarm is off so i just go ahead and arm

815
00:31:33,440 --> 00:31:34,320
it

816
00:31:34,320 --> 00:31:36,559
code

817
00:31:36,559 --> 00:31:38,640
um area number one

818
00:31:38,640 --> 00:31:40,640
um area number two

819
00:31:40,640 --> 00:31:43,519
and we'll give it a second

820
00:31:43,519 --> 00:31:46,399
okay and now it's on

821
00:31:46,399 --> 00:31:49,279
so uh if we'll go back to the jupiter

822
00:31:49,279 --> 00:31:50,960
notebook um

823
00:31:50,960 --> 00:31:53,039
you'll probably notice in here

824
00:31:53,039 --> 00:31:55,600
the exploit function and save exact form

825
00:31:55,600 --> 00:31:57,840
stack which we talked about earlier

826
00:31:57,840 --> 00:32:00,559
both are responsible to execute to

827
00:32:00,559 --> 00:32:02,000
exploit

828
00:32:02,000 --> 00:32:03,679
the actual device

829
00:32:03,679 --> 00:32:05,360
have some utility functions in here

830
00:32:05,360 --> 00:32:08,320
which are not really interesting

831
00:32:08,320 --> 00:32:10,399
and target ip so

832
00:32:10,399 --> 00:32:12,559
in this specific case in this demo i

833
00:32:12,559 --> 00:32:14,640
just connected the alarm directly to my

834
00:32:14,640 --> 00:32:17,679
laptop but obviously in in real life we

835
00:32:17,679 --> 00:32:19,440
want to access it to attack it from the

836
00:32:19,440 --> 00:32:20,960
public internet and there's probably

837
00:32:20,960 --> 00:32:22,080
gonna be

838
00:32:22,080 --> 00:32:24,080
some router with some portfolio

839
00:32:24,080 --> 00:32:25,600
configured on it

840
00:32:25,600 --> 00:32:28,799
so we need to keep that in mind

841
00:32:28,799 --> 00:32:30,159
let's go ahead

842
00:32:30,159 --> 00:32:32,399
shotgun number one is the memory dumper

843
00:32:32,399 --> 00:32:34,080
which we also talked about

844
00:32:34,080 --> 00:32:36,960
so we can see that it was pretty quick

845
00:32:36,960 --> 00:32:39,679
and we got like the http response back

846
00:32:39,679 --> 00:32:41,840
those are the http headers

847
00:32:41,840 --> 00:32:42,880
this

848
00:32:42,880 --> 00:32:45,760
is the actual law memory dump

849
00:32:45,760 --> 00:32:47,279
as you can see it's pretty well there's

850
00:32:47,279 --> 00:32:49,600
like url in here there's some hex values

851
00:32:49,600 --> 00:32:50,640
in here

852
00:32:50,640 --> 00:32:52,559
um pretty nice

853
00:32:52,559 --> 00:32:54,480
and in here if you notice you'll see

854
00:32:54,480 --> 00:32:57,440
paradox which is our password

855
00:32:57,440 --> 00:32:59,760
so we'll go ahead and decode it

856
00:32:59,760 --> 00:33:02,720
paradox this is actually the

857
00:33:02,720 --> 00:33:05,200
the default management password for the

858
00:33:05,200 --> 00:33:07,360
device

859
00:33:07,360 --> 00:33:09,679
so now we got a password the other thing

860
00:33:09,679 --> 00:33:11,360
that we want to achieve is to switch the

861
00:33:11,360 --> 00:33:12,799
ports

862
00:33:12,799 --> 00:33:14,960
so as we said in real life

863
00:33:14,960 --> 00:33:17,200
the ports

864
00:33:17,200 --> 00:33:19,279
the management ports

865
00:33:19,279 --> 00:33:20,799
probably won't be accessible from the

866
00:33:20,799 --> 00:33:23,039
public internet so we need to switch the

867
00:33:23,039 --> 00:33:25,519
management and web interface

868
00:33:25,519 --> 00:33:28,960
uh so now uh it seemed to

869
00:33:28,960 --> 00:33:30,720
be successful

870
00:33:30,720 --> 00:33:31,600
so

871
00:33:31,600 --> 00:33:33,840
um the management port is actually

872
00:33:33,840 --> 00:33:37,360
opened on port 80 instead of 10 000 and

873
00:33:37,360 --> 00:33:40,480
the web port is on a port 10 000 instead

874
00:33:40,480 --> 00:33:42,320
of 80.

875
00:33:42,320 --> 00:33:44,399
so we got pretty much everything that we

876
00:33:44,399 --> 00:33:46,000
wanted um

877
00:33:46,000 --> 00:33:48,640
we have the the management password and

878
00:33:48,640 --> 00:33:51,440
we can access the management port

879
00:33:51,440 --> 00:33:53,919
so we'll go ahead and use

880
00:33:53,919 --> 00:33:55,760
paradox allow interface which is the

881
00:33:55,760 --> 00:33:58,080
library too that we're using to connect

882
00:33:58,080 --> 00:33:59,679
to the device

883
00:33:59,679 --> 00:34:01,039
you can see there's some configuration

884
00:34:01,039 --> 00:34:02,399
that we need to do

885
00:34:02,399 --> 00:34:03,840
so here

886
00:34:03,840 --> 00:34:06,960
is the device ip here is the password

887
00:34:06,960 --> 00:34:08,320
that we dumped

888
00:34:08,320 --> 00:34:10,480
using the shell code from the device

889
00:34:10,480 --> 00:34:11,760
memory

890
00:34:11,760 --> 00:34:13,679
and we'll go ahead and try to connect to

891
00:34:13,679 --> 00:34:15,040
it

892
00:34:15,040 --> 00:34:17,440
you can ignore those errors though

893
00:34:17,440 --> 00:34:19,199
it's just a

894
00:34:19,199 --> 00:34:22,000
kind of an unstable device

895
00:34:22,000 --> 00:34:24,399
and we got two which means that we are

896
00:34:24,399 --> 00:34:26,560
now connected to the device so we'll do

897
00:34:26,560 --> 00:34:28,000
a quick refresh

898
00:34:28,000 --> 00:34:29,918
and get the partitions

899
00:34:29,918 --> 00:34:32,719
so what are those partitions um there

900
00:34:32,719 --> 00:34:35,359
are actually the representation

901
00:34:35,359 --> 00:34:38,399
of the areas um

902
00:34:38,399 --> 00:34:42,159
that uh you saw so hallway and kitchen

903
00:34:42,159 --> 00:34:43,918
you can also see them on the camera view

904
00:34:43,918 --> 00:34:45,520
always kitchen

905
00:34:45,520 --> 00:34:48,079
uh and what we care about is actually

906
00:34:48,079 --> 00:34:50,320
the key which is the internal id for

907
00:34:50,320 --> 00:34:51,760
those areas

908
00:34:51,760 --> 00:34:54,480
and we really need to know it so we can

909
00:34:54,480 --> 00:34:57,440
uh disarm

910
00:34:57,440 --> 00:34:58,880
those partition

911
00:34:58,880 --> 00:35:00,400
those areas

912
00:35:00,400 --> 00:35:02,880
so in here we're just gonna go ahead and

913
00:35:02,880 --> 00:35:05,200
try to disarm the first partition the

914
00:35:05,200 --> 00:35:07,520
first area which is hallway

915
00:35:07,520 --> 00:35:09,440
and you can see

916
00:35:09,440 --> 00:35:12,079
uh that we got hallway and we got system

917
00:35:12,079 --> 00:35:13,839
off which means

918
00:35:13,839 --> 00:35:17,200
that now the alarm in in the hallway

919
00:35:17,200 --> 00:35:19,760
is disabled is disarmed

920
00:35:19,760 --> 00:35:22,720
so we'll just proceed and we'll try to

921
00:35:22,720 --> 00:35:24,240
disarm the other

922
00:35:24,240 --> 00:35:25,359
partition

923
00:35:25,359 --> 00:35:26,480
and

924
00:35:26,480 --> 00:35:28,720
you should look at the camera view and

925
00:35:28,720 --> 00:35:31,839
you'll see that kitchen switch to system

926
00:35:31,839 --> 00:35:32,720
off

927
00:35:32,720 --> 00:35:33,760
so

928
00:35:33,760 --> 00:35:36,240
that's it everything is this sound and

929
00:35:36,240 --> 00:35:39,040
now our guys can go and breach the

930
00:35:39,040 --> 00:35:41,359
actual physical building and they don't

931
00:35:41,359 --> 00:35:43,839
need to worry at all about the alarm

932
00:35:43,839 --> 00:35:45,920
system

933
00:35:45,920 --> 00:35:48,720
and and that's it

934
00:35:48,720 --> 00:35:50,640
so thank you for watching

935
00:35:50,640 --> 00:35:52,960
and i'll see you in a second in the live

936
00:35:52,960 --> 00:35:54,240
q a session

937
00:35:54,240 --> 00:35:57,560
let's see it

