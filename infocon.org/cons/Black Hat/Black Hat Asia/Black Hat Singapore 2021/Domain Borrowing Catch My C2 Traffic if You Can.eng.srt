1
00:00:01,180 --> 00:00:14,730
[Music]

2
00:00:16,640 --> 00:00:17,920
hello everyone

3
00:00:17,920 --> 00:00:20,480
today we will talk about how to hide c2

4
00:00:20,480 --> 00:00:23,039
traffic when fantastic

5
00:00:23,039 --> 00:00:25,279
people may hear about domain fronting

6
00:00:25,279 --> 00:00:27,840
which uses cdn as a redirector and

7
00:00:27,840 --> 00:00:30,480
protector for situ traffic

8
00:00:30,480 --> 00:00:33,120
nowadays the main fronting

9
00:00:33,120 --> 00:00:35,600
is not well support supported by serial

10
00:00:35,600 --> 00:00:39,120
vendors and easy to detect

11
00:00:39,120 --> 00:00:41,200
today we will upgrade the main fronting

12
00:00:41,200 --> 00:00:42,879
to domain boring

13
00:00:42,879 --> 00:00:45,120
we will show some tricks we found in

14
00:00:45,120 --> 00:00:47,600
some syrian meditations and turn them

15
00:00:47,600 --> 00:00:50,480
together to borrow a validated gps

16
00:00:50,480 --> 00:00:55,120
certificate to hide our c2 traffic

17
00:00:56,160 --> 00:00:59,280
i'm joining focus on web security and

18
00:00:59,280 --> 00:01:01,920
contesting i have spoken at multiple

19
00:01:01,920 --> 00:01:03,760
security conferences

20
00:01:03,760 --> 00:01:06,799
and my work meets tinder he does web

21
00:01:06,799 --> 00:01:09,439
security research and threat teaming

22
00:01:09,439 --> 00:01:11,600
he found multiple vulnerabilities in

23
00:01:11,600 --> 00:01:14,080
microsoft and safari

24
00:01:14,080 --> 00:01:16,240
we are all from tencent security xiaomi

25
00:01:16,240 --> 00:01:18,559
lab

26
00:01:20,799 --> 00:01:23,280
we will first see how previous people

27
00:01:23,280 --> 00:01:25,600
hiding the city traffic using domain

28
00:01:25,600 --> 00:01:28,240
fronting and domain hiding

29
00:01:28,240 --> 00:01:31,520
and then we will show how https cdn

30
00:01:31,520 --> 00:01:34,799
works and how we use some features

31
00:01:34,799 --> 00:01:37,200
incident implementation to break the

32
00:01:37,200 --> 00:01:41,840
workflow and hide our c2 traffic

33
00:01:41,840 --> 00:01:44,399
you will know what the month boring is

34
00:01:44,399 --> 00:01:47,439
and how it works

35
00:01:47,439 --> 00:01:50,240
finally we will provide some detection

36
00:01:50,240 --> 00:01:52,880
methods and mitigations

37
00:01:52,880 --> 00:01:54,960
one more thing

38
00:01:54,960 --> 00:01:56,799
there are some rules in palo alto

39
00:01:56,799 --> 00:01:59,840
firewall that can be used to detect and

40
00:01:59,840 --> 00:02:03,680
block the membrane theoretically

41
00:02:03,680 --> 00:02:06,560
we will use a demo to show how we bypass

42
00:02:06,560 --> 00:02:07,280
the

43
00:02:07,280 --> 00:02:10,239
to firewall rules

44
00:02:12,319 --> 00:02:15,680
back to the year of 2015

45
00:02:15,680 --> 00:02:18,160
researchers first proposed human form

46
00:02:18,160 --> 00:02:19,680
domain fronting

47
00:02:19,680 --> 00:02:23,040
the idea is simple cdn acts like a

48
00:02:23,040 --> 00:02:24,959
rewards proxy

49
00:02:24,959 --> 00:02:27,840
cdnvent is resource based on the http

50
00:02:27,840 --> 00:02:30,560
host header from the client's request

51
00:02:30,560 --> 00:02:32,480
and has nothing to do with the tr

52
00:02:32,480 --> 00:02:34,640
connection

53
00:02:34,640 --> 00:02:37,440
so the client first make a tr connection

54
00:02:37,440 --> 00:02:40,319
with the cdn server using a lot.com

55
00:02:40,319 --> 00:02:41,840
certificate

56
00:02:41,840 --> 00:02:42,879
and

57
00:02:42,879 --> 00:02:45,519
the http request inside of the trs

58
00:02:45,519 --> 00:02:49,200
connection use a verbatim.com host

59
00:02:49,200 --> 00:02:51,680
the cdn will route back to the origin

60
00:02:51,680 --> 00:02:53,920
based on the forbidden.com rather than

61
00:02:53,920 --> 00:02:55,680
allow.com

62
00:02:55,680 --> 00:02:59,040
so if there is no https

63
00:02:59,040 --> 00:03:01,680
decryption device hacking like a

64
00:03:01,680 --> 00:03:03,360
firewall

65
00:03:03,360 --> 00:03:05,440
the traffic looks like communicating

66
00:03:05,440 --> 00:03:07,440
with the law.com and the cheese the

67
00:03:07,440 --> 00:03:09,920
firewall

68
00:03:10,879 --> 00:03:12,480
there are some limitations of domain

69
00:03:12,480 --> 00:03:15,440
fronting asymmetric attack shows

70
00:03:15,440 --> 00:03:18,560
the way to detect domain fronting is

71
00:03:18,560 --> 00:03:22,319
decrypting the http as traffic and check

72
00:03:22,319 --> 00:03:26,319
if sni is equal to the host header

73
00:03:26,319 --> 00:03:29,840
some cdm windows such as google amazon

74
00:03:29,840 --> 00:03:32,560
cloudflare have already stopped

75
00:03:32,560 --> 00:03:36,159
supporting the moon fronting

76
00:03:36,959 --> 00:03:38,879
last year at defcon

77
00:03:38,879 --> 00:03:42,159
eric proposed a new concept customer

78
00:03:42,159 --> 00:03:43,519
hiding

79
00:03:43,519 --> 00:03:46,159
the main idea is using a feature of

80
00:03:46,159 --> 00:03:49,280
cloudflare to hide traffic

81
00:03:49,280 --> 00:03:52,640
cloud players post trs 1.3 with yes and

82
00:03:52,640 --> 00:03:53,599
line

83
00:03:53,599 --> 00:03:58,560
which is currently an ieft draft

84
00:03:58,879 --> 00:04:02,400
yes i will encrypt the ethernet so that

85
00:04:02,400 --> 00:04:04,799
the firewall does not know what domain

86
00:04:04,799 --> 00:04:08,000
the client established connection to

87
00:04:08,000 --> 00:04:10,319
as attacker can

88
00:04:10,319 --> 00:04:13,360
also attack account upon a fake ethernet

89
00:04:13,360 --> 00:04:16,079
to for the firewall

90
00:04:16,079 --> 00:04:18,798
this works because most of the firewalls

91
00:04:18,798 --> 00:04:21,358
do not support the ethernet and cloud

92
00:04:21,358 --> 00:04:24,080
flare allows the existence of both ether

93
00:04:24,080 --> 00:04:26,800
and yasen

94
00:04:27,680 --> 00:04:31,440
the hiding has some limitations too

95
00:04:31,440 --> 00:04:35,280
for now color flare will refuse https

96
00:04:35,280 --> 00:04:38,400
connections if the client hello has both

97
00:04:38,400 --> 00:04:40,880
the s9 and s9

98
00:04:40,880 --> 00:04:44,320
and the esi is not well supported as it

99
00:04:44,320 --> 00:04:45,360
is only

100
00:04:45,360 --> 00:04:47,440
only a draft

101
00:04:47,440 --> 00:04:49,759
some enterprise environments

102
00:04:49,759 --> 00:04:50,960
districts

103
00:04:50,960 --> 00:04:53,520
countries have blocked or want to block

104
00:04:53,520 --> 00:04:56,520
either

105
00:04:57,600 --> 00:04:59,840
we can see either domain fronting or

106
00:04:59,840 --> 00:05:01,120
domain hiding

107
00:05:01,120 --> 00:05:03,039
there are some limitations

108
00:05:03,039 --> 00:05:06,800
an ideal c2 must have following features

109
00:05:06,800 --> 00:05:09,360
there are a large number of ip addresses

110
00:05:09,360 --> 00:05:11,120
for c2

111
00:05:11,120 --> 00:05:14,960
c2 traffic is encrypted

112
00:05:15,199 --> 00:05:17,360
establishing connections using high

113
00:05:17,360 --> 00:05:20,560
reputation domains with validate tdpi

114
00:05:20,560 --> 00:05:22,800
certificates

115
00:05:22,800 --> 00:05:24,720
these are already features of domain

116
00:05:24,720 --> 00:05:27,199
fronting or domain hiding but we want

117
00:05:27,199 --> 00:05:29,039
more

118
00:05:29,039 --> 00:05:32,479
the work the network traffic looks like

119
00:05:32,479 --> 00:05:36,000
normal https traffic especially ethanol

120
00:05:36,000 --> 00:05:37,600
is equal to the host

121
00:05:37,600 --> 00:05:39,919
even decrypted

122
00:05:39,919 --> 00:05:42,160
and the traffic should not be blocked in

123
00:05:42,160 --> 00:05:43,840
some districts

124
00:05:43,840 --> 00:05:47,520
so there comes domain borrowing

125
00:05:48,639 --> 00:05:50,800
next we will talk about what domain

126
00:05:50,800 --> 00:05:54,320
borrowing is and how it works

127
00:05:54,320 --> 00:05:58,120
let's begin with how https cdn works

128
00:05:58,120 --> 00:06:01,280
http works like a mac in the middle it

129
00:06:01,280 --> 00:06:04,240
needs a private keys or custom domains

130
00:06:04,240 --> 00:06:06,880
to decrypt https traffic

131
00:06:06,880 --> 00:06:10,400
and then rows to the origin

132
00:06:10,400 --> 00:06:13,120
so first website admin should upload

133
00:06:13,120 --> 00:06:16,720
certificates and private key to cdn and

134
00:06:16,720 --> 00:06:19,120
make the domain cname record

135
00:06:19,120 --> 00:06:22,160
points to cdn

136
00:06:24,000 --> 00:06:26,080
a normal client request

137
00:06:26,080 --> 00:06:28,240
goes like this

138
00:06:28,240 --> 00:06:29,280
first

139
00:06:29,280 --> 00:06:31,520
the client try to resolve the domain

140
00:06:31,520 --> 00:06:34,560
name and get one ipo of the cdn edge

141
00:06:34,560 --> 00:06:36,240
server

142
00:06:36,240 --> 00:06:37,440
then

143
00:06:37,440 --> 00:06:40,639
this the client sends https client hello

144
00:06:40,639 --> 00:06:43,440
with cdn.example.com

145
00:06:43,440 --> 00:06:45,440
to the iep

146
00:06:45,440 --> 00:06:48,199
the cdn finds the certificate of

147
00:06:48,199 --> 00:06:51,520
syrian.example.com and establishes https

148
00:06:51,520 --> 00:06:54,000
connection

149
00:06:54,800 --> 00:06:57,400
after establishing connection with

150
00:06:57,400 --> 00:06:59,520
cn.example.com staffing

151
00:06:59,520 --> 00:07:01,199
certificates

152
00:07:01,199 --> 00:07:04,479
the client sends https encrypted data to

153
00:07:04,479 --> 00:07:06,080
the ceiling server

154
00:07:06,080 --> 00:07:09,280
the cdn server decrypts the data and

155
00:07:09,280 --> 00:07:12,000
routes the request to origin server

156
00:07:12,000 --> 00:07:16,319
based on the http host header in the my

157
00:07:16,319 --> 00:07:19,520
fronting the http headset domain name

158
00:07:19,520 --> 00:07:23,120
differs from the https the http host

159
00:07:23,120 --> 00:07:24,400
header

160
00:07:24,400 --> 00:07:27,360
then it behaves like communicating with

161
00:07:27,360 --> 00:07:31,520
random but actually forward the request

162
00:07:31,520 --> 00:07:34,080
to another

163
00:07:35,520 --> 00:07:38,720
the workflow of cdma be very familiar to

164
00:07:38,720 --> 00:07:42,080
people but i have some questions

165
00:07:42,080 --> 00:07:44,960
does the client really need to do a dns

166
00:07:44,960 --> 00:07:46,639
query

167
00:07:46,639 --> 00:07:49,039
actually if you already have an ipo of

168
00:07:49,039 --> 00:07:52,080
the cdns ad server you can set

169
00:07:52,080 --> 00:07:55,360
sni in cloud hello and directly connect

170
00:07:55,360 --> 00:07:58,520
to it

171
00:07:59,120 --> 00:08:01,759
even the client can use another cdn

172
00:08:01,759 --> 00:08:04,720
domain for dna resolution

173
00:08:04,720 --> 00:08:06,599
if we have

174
00:08:06,599 --> 00:08:10,240
cdn.a.com and syrian.be.com

175
00:08:10,240 --> 00:08:13,199
in the same serial number mostly the two

176
00:08:13,199 --> 00:08:15,120
domains shares

177
00:08:15,120 --> 00:08:18,960
the same cdna servers

178
00:08:18,960 --> 00:08:22,240
so we can use cdn.8.com

179
00:08:22,240 --> 00:08:26,000
resolved ip to establish connection with

180
00:08:26,000 --> 00:08:29,000
syrian.b.com

181
00:08:30,879 --> 00:08:33,760
another question is can we register a

182
00:08:33,760 --> 00:08:36,240
arbitrary domain syrian

183
00:08:36,240 --> 00:08:38,159
first registering

184
00:08:38,159 --> 00:08:40,240
a domain incident does not mean we

185
00:08:40,240 --> 00:08:41,839
control that domain

186
00:08:41,839 --> 00:08:44,399
we can only add an root

187
00:08:44,399 --> 00:08:47,440
rule in the syrian we cannot modify the

188
00:08:47,440 --> 00:08:51,839
domains in domains dns record

189
00:08:51,839 --> 00:08:54,640
for example we can register blah.com

190
00:08:54,640 --> 00:08:57,120
incident

191
00:08:57,120 --> 00:08:59,839
when we skip the dnc resolution and

192
00:08:59,839 --> 00:09:02,560
force to make connections to the cdna

193
00:09:02,560 --> 00:09:05,360
server we can set blackhead.com in the

194
00:09:05,360 --> 00:09:08,880
http request codes header and the cdn

195
00:09:08,880 --> 00:09:10,959
will route back to our uwo already

196
00:09:10,959 --> 00:09:13,359
server

197
00:09:15,120 --> 00:09:17,440
we found the most sending windows that

198
00:09:17,440 --> 00:09:19,839
doesn't have domain validation when

199
00:09:19,839 --> 00:09:20,880
people

200
00:09:20,880 --> 00:09:24,240
register a new domain

201
00:09:24,720 --> 00:09:26,640
some top selling winners will validate

202
00:09:26,640 --> 00:09:28,399
domain ownership

203
00:09:28,399 --> 00:09:32,959
azure and cloudflare use dsc name or ns

204
00:09:32,959 --> 00:09:34,320
to validate the

205
00:09:34,320 --> 00:09:39,040
domain names aws cloudfront use https

206
00:09:39,040 --> 00:09:41,920
certificate to validate users often

207
00:09:41,920 --> 00:09:46,000
or authorization to domain names

208
00:09:46,000 --> 00:09:48,720
other cities such as factory

209
00:09:48,720 --> 00:09:50,640
stackpath

210
00:09:50,640 --> 00:09:55,279
they doesn't have any domain validation

211
00:09:56,480 --> 00:09:58,399
as you can see in the slides

212
00:09:58,399 --> 00:10:00,880
we registered many famous domains faster

213
00:10:00,880 --> 00:10:02,560
than selectpath

214
00:10:02,560 --> 00:10:08,560
like google github twitter and so on

215
00:10:11,600 --> 00:10:15,200
practice domain in cdn seems useless

216
00:10:15,200 --> 00:10:17,760
because we do not have the corresponding

217
00:10:17,760 --> 00:10:19,519
certificate

218
00:10:19,519 --> 00:10:22,160
once cdn can't find the certificate most

219
00:10:22,160 --> 00:10:25,120
cities will send the default search to

220
00:10:25,120 --> 00:10:27,120
the client

221
00:10:27,120 --> 00:10:30,480
some cities will send tcp reset to the

222
00:10:30,480 --> 00:10:32,959
client

223
00:10:32,959 --> 00:10:35,680
we can see firstly returns the default

224
00:10:35,680 --> 00:10:38,399
certificate with common name that

225
00:10:38,399 --> 00:10:41,399
default.fastlay.net

226
00:10:44,560 --> 00:10:46,959
so until now we can borrow our arbitrary

227
00:10:46,959 --> 00:10:48,560
domain syria

228
00:10:48,560 --> 00:10:51,839
we have sni equal to cost which can

229
00:10:51,839 --> 00:10:54,320
bypass domain fronting detection

230
00:10:54,320 --> 00:10:58,839
but we still do not have a cracked hdtv

231
00:10:58,839 --> 00:11:01,600
certificate because the cdn do not have

232
00:11:01,600 --> 00:11:05,200
the search and private keys

233
00:11:05,200 --> 00:11:07,120
we should set to verify either the

234
00:11:07,120 --> 00:11:11,440
outset to force to make a connection

235
00:11:11,440 --> 00:11:13,120
there comes the question

236
00:11:13,120 --> 00:11:17,040
how to obtain a valid http search

237
00:11:17,040 --> 00:11:20,959
hackers can do it by hacking

238
00:11:21,839 --> 00:11:24,160
we can either steal a validated tdpr

239
00:11:24,160 --> 00:11:27,519
certificate or apply for a new one

240
00:11:27,519 --> 00:11:30,000
if we get a web show or we find an

241
00:11:30,000 --> 00:11:32,399
arbitrary file download vulnerability we

242
00:11:32,399 --> 00:11:34,720
can read the certificate and the pro

243
00:11:34,720 --> 00:11:37,839
then the private key directly

244
00:11:37,839 --> 00:11:39,920
if we can write arbitrary file to the

245
00:11:39,920 --> 00:11:43,440
web server or we can take our subdomain

246
00:11:43,440 --> 00:11:46,720
we can apply for a new https certificate

247
00:11:46,720 --> 00:11:49,839
with http based validation

248
00:11:49,839 --> 00:11:52,639
cloud storage is a perfect place to get

249
00:11:52,639 --> 00:11:55,600
a http asset with common name of a cloud

250
00:11:55,600 --> 00:11:57,839
vendor

251
00:12:00,320 --> 00:12:03,440
microsoft do not consider supplementary

252
00:12:03,440 --> 00:12:05,920
takeover is a security issue

253
00:12:05,920 --> 00:12:09,279
so we use it as an example

254
00:12:09,279 --> 00:12:11,360
a friend of mine found

255
00:12:11,360 --> 00:12:14,320
a microsoft supplementary cure and we

256
00:12:14,320 --> 00:12:17,680
applied for a https cert and product key

257
00:12:17,680 --> 00:12:19,360
for that domain

258
00:12:19,360 --> 00:12:21,839
we can see now the subdomain is not

259
00:12:21,839 --> 00:12:24,320
vulnerable at all but the certificate is

260
00:12:24,320 --> 00:12:27,120
still valid

261
00:12:28,800 --> 00:12:32,079
we upload the valid certificate to aws

262
00:12:32,079 --> 00:12:33,680
cloudfront

263
00:12:33,680 --> 00:12:38,680
and pass the cloudfront validation

264
00:12:40,000 --> 00:12:41,519
finally we can register

265
00:12:41,519 --> 00:12:44,519
pbe.verified.microsoft.com

266
00:12:45,120 --> 00:12:50,079
in ews cloudfront and use it for

267
00:12:50,839 --> 00:12:53,279
rc2 here's the demo

268
00:12:53,279 --> 00:12:55,200
we used an open source c to call

269
00:12:55,200 --> 00:12:57,120
carbonate

270
00:12:57,120 --> 00:12:58,639
we wrote a

271
00:12:58,639 --> 00:13:02,000
custom implement implant tablet

272
00:13:02,000 --> 00:13:05,040
we use the domain block

273
00:13:05,040 --> 00:13:07,200
we use the domain that is

274
00:13:07,200 --> 00:13:10,200
blogs.aws.amazon.com

275
00:13:10,399 --> 00:13:13,839
to get the ipo cdns server

276
00:13:13,839 --> 00:13:15,600
in the c2 traffic

277
00:13:15,600 --> 00:13:18,240
sni is equal to the host

278
00:13:18,240 --> 00:13:21,440
and we have a valid certificate let's

279
00:13:21,440 --> 00:13:24,399
see how it works

280
00:13:27,360 --> 00:13:31,120
we can see we have microsoft domain in

281
00:13:31,120 --> 00:13:34,120
cloudfront

282
00:13:41,920 --> 00:13:44,959
and here is our c2

283
00:13:44,959 --> 00:13:47,279
you can see the dragon ethanol is the

284
00:13:47,279 --> 00:13:48,800
same

285
00:13:48,800 --> 00:13:52,560
and there is no online

286
00:13:52,959 --> 00:13:56,160
we generate the binary

287
00:13:57,360 --> 00:13:59,519
and

288
00:13:59,519 --> 00:14:03,560
run it in a windows machine

289
00:14:09,040 --> 00:14:13,680
we can see the at the http host

290
00:14:13,680 --> 00:14:16,399
is microsoft subdomain

291
00:14:16,399 --> 00:14:18,079
and

292
00:14:18,079 --> 00:14:20,399
the ethernet in the clan halo is the

293
00:14:20,399 --> 00:14:23,760
same with the http host

294
00:14:23,760 --> 00:14:27,560
and the third is valid

295
00:14:37,040 --> 00:14:38,720
excuse us

296
00:14:38,720 --> 00:14:41,040
command

297
00:14:41,040 --> 00:14:45,560
and we can see the city works well

298
00:14:48,000 --> 00:14:51,040
okay people may ask how to obtain a

299
00:14:51,040 --> 00:14:53,440
validated tdps certificate without

300
00:14:53,440 --> 00:14:55,519
hacking

301
00:14:55,519 --> 00:14:59,040
let tienda give you the answers

302
00:14:59,040 --> 00:15:01,519
hi i'm chancelling

303
00:15:01,519 --> 00:15:03,600
next i'm going to talk about how to

304
00:15:03,600 --> 00:15:07,360
obtain valid gdpr certificates without

305
00:15:07,360 --> 00:15:09,839
hacking

306
00:15:10,240 --> 00:15:13,040
firstly let's dive into how cdn

307
00:15:13,040 --> 00:15:16,000
distribute https certificates

308
00:15:16,000 --> 00:15:17,519
we found there are two ways to

309
00:15:17,519 --> 00:15:19,600
distribute certificates

310
00:15:19,600 --> 00:15:22,800
the correct way goes like this

311
00:15:22,800 --> 00:15:26,079
the client wants to establish https

312
00:15:26,079 --> 00:15:28,880
connection with the cdn register

313
00:15:28,880 --> 00:15:33,279
so you send screen hello to the cdn and

314
00:15:33,279 --> 00:15:37,360
the sni is set to cn.example.com

315
00:15:37,360 --> 00:15:38,720
then the steering looks out of the

316
00:15:38,720 --> 00:15:42,160
certificate in its database

317
00:15:42,160 --> 00:15:44,639
to the enquiry database select a

318
00:15:44,639 --> 00:15:46,399
certificate from

319
00:15:46,399 --> 00:15:48,560
the database where domain name is equal

320
00:15:48,560 --> 00:15:51,440
to student.example.com

321
00:15:51,440 --> 00:15:53,519
let's know that

322
00:15:53,519 --> 00:15:56,560
the actual cdn database are more complex

323
00:15:56,560 --> 00:15:58,959
we only use this table to demonstrate

324
00:15:58,959 --> 00:16:00,720
the workflow

325
00:16:00,720 --> 00:16:03,680
apparently the first line of database

326
00:16:03,680 --> 00:16:06,000
meets the condition

327
00:16:06,000 --> 00:16:09,560
which shows the certificate of study of

328
00:16:09,560 --> 00:16:12,000
cdn.example.com is start for example the

329
00:16:12,000 --> 00:16:14,720
content search

330
00:16:14,959 --> 00:16:17,920
and then the cdn will send a certificate

331
00:16:17,920 --> 00:16:21,839
back to the class in https server hello

332
00:16:21,839 --> 00:16:23,680
finally the clients can use this

333
00:16:23,680 --> 00:16:26,079
certificate to complete

334
00:16:26,079 --> 00:16:28,959
the https communication

335
00:16:28,959 --> 00:16:31,279
and this is the correct https

336
00:16:31,279 --> 00:16:35,800
certificate distribution process

337
00:16:37,040 --> 00:16:38,160
however

338
00:16:38,160 --> 00:16:41,040
we found that sounds limiters doesn't

339
00:16:41,040 --> 00:16:43,360
correctly implement

340
00:16:43,360 --> 00:16:45,279
worldcat certificate

341
00:16:45,279 --> 00:16:48,320
distribution process

342
00:16:48,399 --> 00:16:50,000
let's talk about the improper

343
00:16:50,000 --> 00:16:51,279
implementation

344
00:16:51,279 --> 00:16:53,040
and what attackers can do with this

345
00:16:53,040 --> 00:16:55,199
feature

346
00:16:55,199 --> 00:16:57,480
an attacker can register

347
00:16:57,480 --> 00:17:01,199
static.example.com on cdn

348
00:17:01,279 --> 00:17:03,440
and that need to upload the certificate

349
00:17:03,440 --> 00:17:06,600
of static.example.com

350
00:17:06,640 --> 00:17:08,400
this then will add a new line in

351
00:17:08,400 --> 00:17:11,439
database like this

352
00:17:14,319 --> 00:17:15,760
when the client

353
00:17:15,760 --> 00:17:18,400
use static.example.com

354
00:17:18,400 --> 00:17:21,039
to communicate with the student

355
00:17:21,039 --> 00:17:23,760
the setting will query the database

356
00:17:23,760 --> 00:17:25,839
we will select the certificate from the

357
00:17:25,839 --> 00:17:28,400
database where certificate matches

358
00:17:28,400 --> 00:17:31,039
static.example.com

359
00:17:31,039 --> 00:17:33,440
please know that

360
00:17:33,440 --> 00:17:35,039
it's not that

361
00:17:35,039 --> 00:17:37,679
the query here is different from the

362
00:17:37,679 --> 00:17:41,919
correct one we discussed earlier

363
00:17:45,280 --> 00:17:48,080
the world card certificate star

364
00:17:48,080 --> 00:17:51,280
for example the complexity in a search

365
00:17:51,280 --> 00:17:53,919
matches the static.example.com in the

366
00:17:53,919 --> 00:17:56,880
first line of the database

367
00:17:56,880 --> 00:17:59,919
but this certificate was uploaded by

368
00:17:59,919 --> 00:18:01,360
alice

369
00:18:01,360 --> 00:18:02,240
yes

370
00:18:02,240 --> 00:18:04,640
this is the point

371
00:18:04,640 --> 00:18:07,360
the certificate owned by alice matches

372
00:18:07,360 --> 00:18:08,559
the domain

373
00:18:08,559 --> 00:18:12,320
registered by the attacker

374
00:18:13,039 --> 00:18:15,360
and then the city will send the

375
00:18:15,360 --> 00:18:17,840
certificate which is on the alice back

376
00:18:17,840 --> 00:18:20,320
to the client

377
00:18:20,320 --> 00:18:23,000
as a result clients can use

378
00:18:23,000 --> 00:18:25,600
static.example.com to establish a valid

379
00:18:25,600 --> 00:18:29,520
https connection with the student

380
00:18:29,520 --> 00:18:30,880
in other words

381
00:18:30,880 --> 00:18:33,120
in other words

382
00:18:33,120 --> 00:18:36,880
attackers attacker the attacker borrows

383
00:18:36,880 --> 00:18:42,280
the world card certificate from alice

384
00:18:42,559 --> 00:18:45,280
so with this feature

385
00:18:45,280 --> 00:18:49,440
attacker attackers can register

386
00:18:49,440 --> 00:18:52,400
subdomains and borrow wildcard https

387
00:18:52,400 --> 00:18:57,240
certificates from other steering users

388
00:18:58,480 --> 00:19:01,600
we found that the stackpass cdn and

389
00:19:01,600 --> 00:19:03,360
cdn77

390
00:19:03,360 --> 00:19:05,679
does help the future

391
00:19:05,679 --> 00:19:08,480
so we can borrow worldcat https

392
00:19:08,480 --> 00:19:11,840
certificates are uploaded by other users

393
00:19:11,840 --> 00:19:16,240
on staffa cd and cdn 77

394
00:19:16,640 --> 00:19:19,039
we found there are some well-known

395
00:19:19,039 --> 00:19:21,440
domains with wild-card https

396
00:19:21,440 --> 00:19:26,520
certificates on star pass and stin77

397
00:19:27,360 --> 00:19:30,160
stack path is the syrian supporter of gs

398
00:19:30,160 --> 00:19:32,080
foundation

399
00:19:32,080 --> 00:19:32,960
so

400
00:19:32,960 --> 00:19:34,960
there are some popular projects of js

401
00:19:34,960 --> 00:19:38,400
foundation like bootstrap and food also

402
00:19:38,400 --> 00:19:40,720
post their static assets

403
00:19:40,720 --> 00:19:43,840
on that stair pasty and

404
00:19:43,840 --> 00:19:46,720
sapa siding

405
00:19:47,760 --> 00:19:50,160
these front-end projects are widely used

406
00:19:50,160 --> 00:19:51,760
in

407
00:19:51,760 --> 00:19:55,120
top person websites

408
00:19:55,919 --> 00:19:58,320
there are also some interesting websites

409
00:19:58,320 --> 00:20:01,360
on this video like x videos

410
00:20:01,360 --> 00:20:03,600
attackers can borrow their subdomains

411
00:20:03,600 --> 00:20:07,200
and valid https certificates to help to

412
00:20:07,200 --> 00:20:10,159
hide city traffic

413
00:20:11,840 --> 00:20:16,400
useful drops in a column as an example

414
00:20:16,400 --> 00:20:18,960
we register

415
00:20:18,960 --> 00:20:22,559
and uh we can register any sub domain so

416
00:20:22,559 --> 00:20:24,400
bootstraps the intercom

417
00:20:24,400 --> 00:20:25,280
even

418
00:20:25,280 --> 00:20:27,840
non-existent domain like study or

419
00:20:27,840 --> 00:20:31,039
bootstrap skin.com

420
00:20:31,120 --> 00:20:33,120
and when clients use static double

421
00:20:33,120 --> 00:20:36,320
straps in.com as the snli in the https

422
00:20:36,320 --> 00:20:37,600
connection

423
00:20:37,600 --> 00:20:39,760
the screen will return the worldcard

424
00:20:39,760 --> 00:20:42,559
certificates

425
00:20:43,640 --> 00:20:47,200
start.star.cdn.com to the cloud

426
00:20:47,200 --> 00:20:50,080
then the clients can get a valid https

427
00:20:50,080 --> 00:20:51,600
connection

428
00:20:51,600 --> 00:20:53,520
which looks like a normal connection

429
00:20:53,520 --> 00:20:56,320
output struct

430
00:20:57,679 --> 00:21:00,159
in this slide you can see we have

431
00:21:00,159 --> 00:21:01,679
successfully

432
00:21:01,679 --> 00:21:03,600
registered

433
00:21:03,600 --> 00:21:07,280
text static double swap cdn.com

434
00:21:07,280 --> 00:21:11,440
on start stackpass division

435
00:21:14,480 --> 00:21:16,720
and

436
00:21:17,880 --> 00:21:20,640
static.draftstudent.com is an is a

437
00:21:20,640 --> 00:21:22,880
non-existent domain

438
00:21:22,880 --> 00:21:25,200
you can see in the left screen

439
00:21:25,200 --> 00:21:28,320
i stick to query the dns records or

440
00:21:28,320 --> 00:21:31,280
static double strategy

441
00:21:28,320 --> 00:21:31,280
static.strategin.com

442
00:21:31,280 --> 00:21:34,240
the result shows that the domain doesn't

443
00:21:34,240 --> 00:21:37,360
have any dns record

444
00:21:37,360 --> 00:21:39,799
the wheels curved for static

445
00:21:39,799 --> 00:21:43,120
bootstrapstion.com to resolve to ifco

446
00:21:43,120 --> 00:21:45,840
pass the image server and send the gtbs

447
00:21:45,840 --> 00:21:48,640
request to the server

448
00:21:48,640 --> 00:21:51,200
it turns out that the staff has dna

449
00:21:51,200 --> 00:21:53,360
server sends their certificates start

450
00:21:53,360 --> 00:21:57,039
double stop scn.com back to us

451
00:21:57,039 --> 00:21:58,640
apparently their

452
00:21:58,640 --> 00:22:01,520
certificate is not uploaded by us

453
00:22:01,520 --> 00:22:04,799
and it doesn't belong to us

454
00:22:04,799 --> 00:22:07,360
but we can borrow the world card

455
00:22:07,360 --> 00:22:09,440
certificate from other users who

456
00:22:09,440 --> 00:22:13,000
uploaded it

457
00:22:13,360 --> 00:22:16,440
here's the demo shows how we use

458
00:22:16,440 --> 00:22:17,840
static.bootstrassdn.com in our

459
00:22:17,840 --> 00:22:21,039
situations here we use colonize ctos

460
00:22:21,039 --> 00:22:23,360
before and write a custom implant

461
00:22:23,360 --> 00:22:25,120
template

462
00:22:25,120 --> 00:22:27,320
this register

463
00:22:27,320 --> 00:22:31,280
started.bootstrasdean.com on starbuston

464
00:22:31,280 --> 00:22:34,200
the stop at the

465
00:22:34,200 --> 00:22:36,480
www.sapa.com is a domain on

466
00:22:36,480 --> 00:22:39,360
staffordshire our situations use this

467
00:22:39,360 --> 00:22:42,400
domain for dslr cup

468
00:22:42,400 --> 00:22:45,440
sni and host in the city traffic are

469
00:22:45,440 --> 00:22:48,159
both static both strategies.com with a

470
00:22:48,159 --> 00:22:52,600
valid certificate start.dn.com

471
00:22:54,080 --> 00:22:56,960
let's see how it works

472
00:22:56,960 --> 00:23:00,159
we have registered

473
00:23:00,400 --> 00:23:03,840
we have registered a static bootstrap

474
00:23:03,840 --> 00:23:07,959
student.com on starbuzz

475
00:23:14,640 --> 00:23:20,080
let's add the origin to our colonizer

476
00:23:21,200 --> 00:23:24,400
lesson i said to static.slashdn.com

477
00:23:24,400 --> 00:23:26,080
in stator code

478
00:23:26,080 --> 00:23:28,960
and then we generate a studio agent

479
00:23:28,960 --> 00:23:31,280
download the battery

480
00:23:31,280 --> 00:23:36,520
copy it to our windows machine

481
00:23:39,039 --> 00:23:42,000
and execute it

482
00:23:45,679 --> 00:23:48,480
you can see the host handler in the gdp

483
00:23:48,480 --> 00:23:52,320
request is steady double slotsdn.com

484
00:23:52,320 --> 00:23:54,400
and then we're shocked lesson i implant

485
00:23:54,400 --> 00:23:59,320
hello is static double strappsdeen.com2

486
00:24:00,559 --> 00:24:03,279
and the certificate is a valid broadcast

487
00:24:03,279 --> 00:24:05,840
certificate

488
00:24:08,640 --> 00:24:10,159
the situation

489
00:24:10,159 --> 00:24:12,799
is online now

490
00:24:12,799 --> 00:24:15,039
the way is killed a shock mount to

491
00:24:15,039 --> 00:24:18,440
public calculator

492
00:24:20,559 --> 00:24:24,639
and it seems the pseudo agent works well

493
00:24:26,559 --> 00:24:27,600
so

494
00:24:27,600 --> 00:24:29,360
what is domain boring

495
00:24:29,360 --> 00:24:32,799
we gave a definition here firstly

496
00:24:32,799 --> 00:24:33,919
attackers

497
00:24:33,919 --> 00:24:37,360
register high reputations of domains on

498
00:24:37,360 --> 00:24:38,880
syria

499
00:24:38,880 --> 00:24:42,799
secondly borrow valid https certificates

500
00:24:42,799 --> 00:24:45,600
attackers can borrow certificates from

501
00:24:45,600 --> 00:24:48,000
vulnerable websites

502
00:24:48,000 --> 00:24:50,400
or wildcard certificates from other

503
00:24:50,400 --> 00:24:52,159
student users

504
00:24:52,159 --> 00:24:54,480
then combine them to hide

505
00:24:54,480 --> 00:24:57,200
civil traffic

506
00:24:57,200 --> 00:24:58,840
and

507
00:24:58,840 --> 00:25:03,760
circumvent sacrament listenership

508
00:25:08,320 --> 00:25:10,240
we did a commemoration between the

509
00:25:10,240 --> 00:25:11,520
membori

510
00:25:11,520 --> 00:25:14,960
the fronting and the hiding

511
00:25:14,960 --> 00:25:16,480
they can also use

512
00:25:16,480 --> 00:25:17,919
they can all use

513
00:25:17,919 --> 00:25:20,240
a higher reputation as a

514
00:25:20,240 --> 00:25:22,880
and valid https certificate

515
00:25:22,880 --> 00:25:25,919
to communicate with

516
00:25:26,840 --> 00:25:30,080
cdn by contrast

517
00:25:30,080 --> 00:25:32,320
the advantage of

518
00:25:32,320 --> 00:25:34,159
the membering is

519
00:25:34,159 --> 00:25:38,320
sni can be same as the host

520
00:25:38,320 --> 00:25:40,080
and the boring

521
00:25:40,080 --> 00:25:41,760
balance rely on

522
00:25:41,760 --> 00:25:45,120
not wildly supported https features

523
00:25:45,120 --> 00:25:47,760
such as esra

524
00:25:47,760 --> 00:25:49,520
and this make

525
00:25:49,520 --> 00:25:52,159
the traffic looks like normal https

526
00:25:52,159 --> 00:25:55,159
traffic

527
00:25:57,039 --> 00:26:00,000
next we will introduce some metals to

528
00:26:00,000 --> 00:26:02,720
detect and mitigate the membrane domain

529
00:26:02,720 --> 00:26:05,200
boring

530
00:26:07,279 --> 00:26:09,279
an important signature of the moon

531
00:26:09,279 --> 00:26:12,080
boring is that the clients abandon the

532
00:26:12,080 --> 00:26:15,120
answers resolution

533
00:26:15,120 --> 00:26:17,360
before connecting to the student age

534
00:26:17,360 --> 00:26:18,559
server

535
00:26:18,559 --> 00:26:21,440
therefore for blue teams you can compare

536
00:26:21,440 --> 00:26:23,520
the destination address

537
00:26:23,520 --> 00:26:26,960
of https connection with the dns local

538
00:26:26,960 --> 00:26:31,440
results of the sni in the fieldwork

539
00:26:31,440 --> 00:26:32,799
for example

540
00:26:32,799 --> 00:26:36,320
the clients use cdn.exemple.com

541
00:26:36,320 --> 00:26:41,960
ni to connect to ipc 1.1.1.1

542
00:26:43,440 --> 00:26:44,960
the file will

543
00:26:44,960 --> 00:26:49,039
raise the s9 from the http client hello

544
00:26:49,039 --> 00:26:51,760
and to dns lookup with it

545
00:26:51,760 --> 00:26:55,279
i guess the iv address of cn is dot

546
00:26:55,279 --> 00:26:59,039
examine.com 2.2.2.2

547
00:26:59,039 --> 00:27:01,679
which is not equal to the target of

548
00:27:01,679 --> 00:27:06,679
address of the https connection 1.1.1.1

549
00:27:06,960 --> 00:27:08,320
therefore

550
00:27:08,320 --> 00:27:10,880
the firewall can treat this https

551
00:27:10,880 --> 00:27:13,840
connection as a domain boring behavior

552
00:27:13,840 --> 00:27:17,279
and close the connection

553
00:27:18,399 --> 00:27:21,919
there are also some suggestions to

554
00:27:21,919 --> 00:27:23,919
mitigate domain boring for student

555
00:27:23,919 --> 00:27:27,600
vendors and website admins

556
00:27:27,600 --> 00:27:32,080
the boring uses many features of cdn so

557
00:27:32,080 --> 00:27:34,640
for student vendors the best way is to

558
00:27:34,640 --> 00:27:37,440
disable its features

559
00:27:37,440 --> 00:27:40,080
cd inventors can validate the custom

560
00:27:40,080 --> 00:27:43,120
domain structurally to avoid attackers

561
00:27:43,120 --> 00:27:46,799
borrowing high reputation domains

562
00:27:47,760 --> 00:27:49,520
distributed well while college

563
00:27:49,520 --> 00:27:51,840
interviews certificates correctly can

564
00:27:51,840 --> 00:27:54,159
also prevent attackers from borrowing

565
00:27:54,159 --> 00:27:56,399
valid certificates from other student

566
00:27:56,399 --> 00:27:58,799
users

567
00:28:00,000 --> 00:28:01,679
oversight means

568
00:28:01,679 --> 00:28:04,720
if your website was hacked

569
00:28:04,720 --> 00:28:07,120
and now you'll not only have to remove

570
00:28:07,120 --> 00:28:09,760
backdoors but also check whether your

571
00:28:09,760 --> 00:28:13,840
https certificates have been abused

572
00:28:13,840 --> 00:28:16,559
you can revoke your certificates

573
00:28:16,559 --> 00:28:18,720
and query whether the attacker applied

574
00:28:18,720 --> 00:28:22,559
for new certificates or your domain

575
00:28:22,559 --> 00:28:24,399
so

576
00:28:24,399 --> 00:28:28,000
certificate transparency

577
00:28:29,679 --> 00:28:30,640
next

578
00:28:30,640 --> 00:28:33,600
we will show demo for bypassing plus

579
00:28:33,600 --> 00:28:37,520
auto firewall with domain boring

580
00:28:37,520 --> 00:28:39,919
we use the latest

581
00:28:39,919 --> 00:28:42,600
plug auto pan vm

582
00:28:42,600 --> 00:28:45,600
10.0.4 as a demo

583
00:28:45,600 --> 00:28:46,919
nvm

584
00:28:46,919 --> 00:28:51,679
10.0.4 is a next generation and https

585
00:28:51,679 --> 00:28:53,840
decryption file

586
00:28:53,840 --> 00:28:57,279
and it supports https decryption from

587
00:28:57,279 --> 00:28:58,679
ssl

588
00:28:58,679 --> 00:29:02,960
3.0 to trs 1.3

589
00:29:02,960 --> 00:29:05,360
we will also enable

590
00:29:05,360 --> 00:29:10,559
the https decryption in our demo

591
00:29:11,600 --> 00:29:15,120
when we tested with plato firewall we

592
00:29:15,120 --> 00:29:16,799
found the plow auto firewall has

593
00:29:16,799 --> 00:29:19,279
signatures called anti-spyware eviction

594
00:29:19,279 --> 00:29:20,960
signatures

595
00:29:20,960 --> 00:29:22,240
which has

596
00:29:22,240 --> 00:29:24,240
two following rules

597
00:29:24,240 --> 00:29:27,679
the the http evasion checks if the

598
00:29:27,679 --> 00:29:31,360
result of dns loophole post is equal to

599
00:29:31,360 --> 00:29:34,000
the destination of the address of https

600
00:29:34,000 --> 00:29:35,600
connection

601
00:29:35,600 --> 00:29:38,799
the trs division checks if the result of

602
00:29:38,799 --> 00:29:41,600
dns lookup s i is

603
00:29:41,600 --> 00:29:43,039
equal to

604
00:29:43,039 --> 00:29:45,279
exponential address of

605
00:29:45,279 --> 00:29:48,799
https connection

606
00:29:48,799 --> 00:29:51,520
and we set the policy of these two rows

607
00:29:51,520 --> 00:29:53,919
to a large power in our demo you see

608
00:29:53,919 --> 00:29:55,360
here

609
00:29:55,360 --> 00:29:59,200
any https connection matches this rules

610
00:29:59,200 --> 00:30:02,960
the allow the firewall will a lot

611
00:30:07,760 --> 00:30:10,240
anti-spyware division signatures can

612
00:30:10,240 --> 00:30:12,720
theoretically detected

613
00:30:12,720 --> 00:30:15,360
detect the membrane but

614
00:30:15,360 --> 00:30:18,159
only theoretically

615
00:30:18,159 --> 00:30:22,600
because of the improper implementation

616
00:30:23,039 --> 00:30:25,200
there is a feature of any spyware

617
00:30:25,200 --> 00:30:27,039
edition signatures

618
00:30:27,039 --> 00:30:30,080
if plot auto firewall cannot resolve the

619
00:30:30,080 --> 00:30:33,520
domain in sni or host

620
00:30:33,520 --> 00:30:35,600
the connection will pass the forward

621
00:30:35,600 --> 00:30:37,840
check

622
00:30:38,640 --> 00:30:41,600
for the memory the sni and host can be

623
00:30:41,600 --> 00:30:45,600
any domain even a non-existent domain

624
00:30:45,600 --> 00:30:48,240
so we can bypass the anti-spyware

625
00:30:48,240 --> 00:30:51,640
evasion signatures

626
00:30:56,880 --> 00:30:59,440
we use the following configuration in

627
00:30:59,440 --> 00:31:02,080
our demo

628
00:31:02,559 --> 00:31:05,200
we use uh community

629
00:31:05,200 --> 00:31:07,760
c2s as before

630
00:31:07,760 --> 00:31:10,159
the staging of

631
00:31:10,159 --> 00:31:13,279
awesome.com is the domain of the phone

632
00:31:13,279 --> 00:31:14,720
awesome project

633
00:31:14,720 --> 00:31:17,519
and it's on start pass cd

634
00:31:17,519 --> 00:31:19,840
city agents use this domain for dns

635
00:31:19,840 --> 00:31:22,320
lookup to find the eyepiece of the

636
00:31:22,320 --> 00:31:24,559
engine servers

637
00:31:24,559 --> 00:31:27,440
and the civil agent is that both sni and

638
00:31:27,440 --> 00:31:31,159
host to image.com

639
00:31:31,360 --> 00:31:32,640
and borrow

640
00:31:32,640 --> 00:31:33,840
the valid

641
00:31:33,840 --> 00:31:37,360
https certificate start the font awesome

642
00:31:37,360 --> 00:31:41,039
dot com from star position

643
00:31:41,840 --> 00:31:43,200
as the picture

644
00:31:43,200 --> 00:31:44,559
shows

645
00:31:44,559 --> 00:31:47,360
the image of awesome.com

646
00:31:47,360 --> 00:31:50,320
is a non-existent domain

647
00:31:50,320 --> 00:31:52,080
which doesn't have

648
00:31:52,080 --> 00:31:58,039
which doesn't has any dna dns recall

649
00:32:01,120 --> 00:32:03,918
here's the demo

650
00:32:04,640 --> 00:32:08,080
on the left screen is the auto firewall

651
00:32:08,080 --> 00:32:10,639
nvm

652
00:32:10,880 --> 00:32:13,279
on the right on the right screen is the

653
00:32:13,279 --> 00:32:15,519
windows machine where we are around our

654
00:32:15,519 --> 00:32:19,039
situations our interlacer

655
00:32:24,000 --> 00:32:26,480
you can see you create a decryption

656
00:32:26,480 --> 00:32:28,559
policy named

657
00:32:28,559 --> 00:32:31,840
equipped r with rtr services versions

658
00:32:31,840 --> 00:32:34,399
enabled

659
00:32:34,799 --> 00:32:36,720
ando creates

660
00:32:36,720 --> 00:32:40,320
anti-survivor policy it has underscore

661
00:32:40,320 --> 00:32:43,840
aviation signatures enabled

662
00:32:56,080 --> 00:33:00,320
this is red page now it's empty

663
00:33:06,559 --> 00:33:08,480
this is the red page now it's

664
00:33:08,480 --> 00:33:10,480
it's is empathy

665
00:33:10,480 --> 00:33:14,159
there is no online store agent

666
00:33:14,559 --> 00:33:16,840
listen i said to

667
00:33:16,840 --> 00:33:19,200
staging.com on the way secured the

668
00:33:19,200 --> 00:33:22,880
situations on the windows machine

669
00:33:22,880 --> 00:33:25,039
you can see the host is

670
00:33:25,039 --> 00:33:28,799
image default awesome.com

671
00:33:31,600 --> 00:33:36,080
we execute a command proper calculator

672
00:33:37,039 --> 00:33:38,399
which shows

673
00:33:38,399 --> 00:33:40,240
the city agent

674
00:33:40,240 --> 00:33:42,880
works well

675
00:33:44,880 --> 00:33:47,440
and we go back to the threat page there

676
00:33:47,440 --> 00:33:50,080
is no alert log this means we

677
00:33:50,080 --> 00:33:52,000
successfully bypass

678
00:33:52,000 --> 00:33:54,080
auto firewall

679
00:33:54,080 --> 00:33:56,080
and in the decryption page we can see

680
00:33:56,080 --> 00:33:59,519
our city traffic the sni is image

681
00:33:59,519 --> 00:34:01,919
the photoawesome.com and the certificate

682
00:34:01,919 --> 00:34:04,080
is a valid certificate

683
00:34:04,080 --> 00:34:06,640
start.followusam.com

684
00:34:06,640 --> 00:34:09,040
and the traffic looks like normal

685
00:34:09,040 --> 00:34:13,000
traffic or awesome

686
00:34:20,719 --> 00:34:22,399
we will release

687
00:34:22,399 --> 00:34:25,359
the carbonite implant template after the

688
00:34:25,359 --> 00:34:27,679
conference

689
00:34:27,679 --> 00:34:28,639
and

690
00:34:28,639 --> 00:34:32,280
thank you for listening

