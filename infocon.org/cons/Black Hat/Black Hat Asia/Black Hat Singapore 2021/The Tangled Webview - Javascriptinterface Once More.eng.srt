1
00:00:01,130 --> 00:00:14,690
[Music]

2
00:00:16,480 --> 00:00:19,920
hello everyone my talk is a tangled web

3
00:00:19,920 --> 00:00:23,199
wheel javascript interface once more

4
00:00:23,199 --> 00:00:25,519
i'm glad here to share with you this new

5
00:00:25,519 --> 00:00:28,320
attack model

6
00:00:28,320 --> 00:00:30,880
i am a security researcher in octopus

7
00:00:30,880 --> 00:00:33,119
team

8
00:00:33,280 --> 00:00:36,320
i am focused on browser and android

9
00:00:36,320 --> 00:00:37,760
application

10
00:00:37,760 --> 00:00:40,320
thanks to my experience on browser i

11
00:00:40,320 --> 00:00:42,160
feel the chromium best application is

12
00:00:42,160 --> 00:00:43,360
very kind

13
00:00:43,360 --> 00:00:46,559
today i will show you a new attack model

14
00:00:46,559 --> 00:00:49,680
in webwheel a firm with javascript

15
00:00:49,680 --> 00:00:52,239
interface

16
00:00:52,879 --> 00:00:54,480
first of all

17
00:00:54,480 --> 00:00:56,239
we need to know the instance of

18
00:00:56,239 --> 00:00:58,399
javascript interface

19
00:00:58,399 --> 00:00:59,680
what it is

20
00:00:59,680 --> 00:01:02,800
and how it works

21
00:01:02,800 --> 00:01:06,080
we know that webwheel is a chromium

22
00:01:06,080 --> 00:01:08,880
implementation on android platform the

23
00:01:08,880 --> 00:01:11,360
simplest chromium architecture looks

24
00:01:11,360 --> 00:01:13,040
like this

25
00:01:13,040 --> 00:01:14,720
a browser model

26
00:01:14,720 --> 00:01:18,240
some random models and other services

27
00:01:18,240 --> 00:01:20,560
it looks different in webview

28
00:01:20,560 --> 00:01:22,880
before android 8

29
00:01:22,880 --> 00:01:24,880
all this model is in

30
00:01:24,880 --> 00:01:27,839
applications process

31
00:01:28,240 --> 00:01:30,159
there are many callbacks in the

32
00:01:30,159 --> 00:01:32,479
framework allow the chromium native code

33
00:01:32,479 --> 00:01:35,520
to interfere with android framework

34
00:01:35,520 --> 00:01:38,240
but it is not enough so we need a more

35
00:01:38,240 --> 00:01:40,560
convenient way to exchange data between

36
00:01:40,560 --> 00:01:42,159
the two components

37
00:01:42,159 --> 00:01:46,720
and it is javascript interface

38
00:01:46,720 --> 00:01:48,320
let's see what it is

39
00:01:48,320 --> 00:01:52,079
android application create a java object

40
00:01:52,079 --> 00:01:53,600
and this object

41
00:01:53,600 --> 00:01:56,560
will be added into pro web wheel

42
00:01:56,560 --> 00:01:59,200
with api and javascript interface

43
00:01:59,200 --> 00:02:03,040
webwheel will create a type of object

44
00:02:03,040 --> 00:02:05,680
named gene java bond object

45
00:02:05,680 --> 00:02:08,160
which is a reflection in the browser

46
00:02:08,160 --> 00:02:11,200
model so the web will interact with the

47
00:02:11,200 --> 00:02:16,319
android code by this object through jni

48
00:02:16,800 --> 00:02:19,599
random model also needs an object to

49
00:02:19,599 --> 00:02:22,000
interfere with v8 engine which called

50
00:02:22,000 --> 00:02:25,040
the jin java bridge object

51
00:02:25,040 --> 00:02:26,879
this kind of object will be bound with

52
00:02:26,879 --> 00:02:29,200
an empty v8 object

53
00:02:29,200 --> 00:02:32,239
this empty v8 object will be injected

54
00:02:32,239 --> 00:02:35,200
into the wav8 global environment

55
00:02:35,200 --> 00:02:40,000
so the javascript code can see it

56
00:02:41,200 --> 00:02:43,200
and the javascript code running around

57
00:02:43,200 --> 00:02:45,920
the street can access this java code

58
00:02:45,920 --> 00:02:49,200
with a supplied name

59
00:02:49,200 --> 00:02:52,080
when this javascript interface is remote

60
00:02:52,080 --> 00:02:54,480
there are at least two op codes in the

61
00:02:54,480 --> 00:02:58,000
javascript engine first one get message

62
00:02:58,000 --> 00:03:01,040
as we said before the object we sing

63
00:03:01,040 --> 00:03:02,720
from javascript

64
00:03:02,720 --> 00:03:05,840
is an empty v8 object

65
00:03:05,840 --> 00:03:09,040
so render will transfer has method to

66
00:03:09,040 --> 00:03:11,360
browser model and then invoke java

67
00:03:11,360 --> 00:03:14,080
built-in function class dot get message

68
00:03:14,080 --> 00:03:16,560
through chain i certainly there will be

69
00:03:16,560 --> 00:03:19,040
a cache in java bound object

70
00:03:19,040 --> 00:03:20,640
like you think

71
00:03:20,640 --> 00:03:23,760
the return value is also a template

72
00:03:23,760 --> 00:03:25,599
just the user to tell the javascript

73
00:03:25,599 --> 00:03:29,760
code yes there is a function

74
00:03:29,760 --> 00:03:30,879
second

75
00:03:30,879 --> 00:03:32,640
invoke max

76
00:03:32,640 --> 00:03:35,280
it works like get message

77
00:03:35,280 --> 00:03:37,360
it use reflection to invoke the target

78
00:03:37,360 --> 00:03:42,000
method and reflect the return value

79
00:03:42,239 --> 00:03:45,120
and this is how cve

80
00:03:45,120 --> 00:03:47,159
2020

81
00:03:47,159 --> 00:03:49,120
6336 works

82
00:03:49,120 --> 00:03:52,400
the ji invoke class dot get methods will

83
00:03:52,400 --> 00:03:56,640
return all methods in the java objects

84
00:03:57,120 --> 00:03:59,680
also the native built-in

85
00:03:59,680 --> 00:04:01,760
like wrong time

86
00:04:01,760 --> 00:04:04,159
so google add anotation javascript

87
00:04:04,159 --> 00:04:06,640
interface to avoid this situation data

88
00:04:06,640 --> 00:04:09,200
method will first validate whether the

89
00:04:09,200 --> 00:04:11,599
return method has annotation javascript

90
00:04:11,599 --> 00:04:13,360
interface or

91
00:04:13,360 --> 00:04:16,560
it will not return

92
00:04:17,358 --> 00:04:20,798
all java object inject by api a

93
00:04:20,798 --> 00:04:22,479
javascript interface will have this

94
00:04:22,479 --> 00:04:27,120
restrict will help this restriction

95
00:04:27,680 --> 00:04:30,560
after we know the essence of javascript

96
00:04:30,560 --> 00:04:33,440
interface next we will display the tango

97
00:04:33,440 --> 00:04:37,840
situation of this powerful feature

98
00:04:38,400 --> 00:04:40,479
inject the supplying the

99
00:04:40,479 --> 00:04:43,520
java object into the web wheel

100
00:04:43,520 --> 00:04:46,000
the object is injected into all frames

101
00:04:46,000 --> 00:04:47,919
of the web page including all the

102
00:04:47,919 --> 00:04:51,199
iframes use a supplied name this allows

103
00:04:51,199 --> 00:04:54,479
the java object's method to access from

104
00:04:54,479 --> 00:04:56,800
java script

105
00:04:56,800 --> 00:04:58,720
the android developer document has

106
00:04:58,720 --> 00:05:00,400
warning that

107
00:05:00,400 --> 00:05:03,039
there is no way to tell the calling

108
00:05:03,039 --> 00:05:05,680
frames orange from the website

109
00:05:05,680 --> 00:05:08,880
so the app must not assume that the

110
00:05:08,880 --> 00:05:11,600
caller is trustworthy unless

111
00:05:11,600 --> 00:05:14,000
the app can guarantee that no third

112
00:05:14,000 --> 00:05:15,280
party content

113
00:05:15,280 --> 00:05:18,400
is ever loaded into the web wheel

114
00:05:18,400 --> 00:05:20,560
but in real world

115
00:05:20,560 --> 00:05:23,759
these important tips is not always

116
00:05:23,759 --> 00:05:25,440
fulfilled

117
00:05:25,440 --> 00:05:28,360
applications generally need to load

118
00:05:28,360 --> 00:05:31,360
unexpected web page for some business

119
00:05:31,360 --> 00:05:33,120
reason

120
00:05:33,120 --> 00:05:35,440
for example recharge

121
00:05:35,440 --> 00:05:37,440
and early pay

122
00:05:37,440 --> 00:05:38,560
after all

123
00:05:38,560 --> 00:05:42,080
they all need to earn money

124
00:05:42,479 --> 00:05:43,680
in this case

125
00:05:43,680 --> 00:05:46,000
to use this javascript interface safely

126
00:05:46,000 --> 00:05:47,919
manufacturer will perform app specific

127
00:05:47,919 --> 00:05:49,759
security check to ensure their server

128
00:05:49,759 --> 00:05:51,120
interface can only be invoked by

129
00:05:51,120 --> 00:05:52,720
specific urls

130
00:05:52,720 --> 00:05:54,880
there are many fantastic designation but

131
00:05:54,880 --> 00:05:57,280
no matter what the sec checks are they

132
00:05:57,280 --> 00:06:00,080
have to rely on the url get from web

133
00:06:00,080 --> 00:06:01,840
wheel

134
00:06:01,840 --> 00:06:04,319
there are two widely used machinism

135
00:06:04,319 --> 00:06:06,319
lifecycle best access control and the

136
00:06:06,319 --> 00:06:08,400
real-time access control

137
00:06:08,400 --> 00:06:10,800
let's see what it is

138
00:06:10,800 --> 00:06:12,240
the first one

139
00:06:12,240 --> 00:06:15,680
lifecycle best access control

140
00:06:16,000 --> 00:06:19,360
lifecycle back success control get url

141
00:06:19,360 --> 00:06:21,440
from the lifecycle callbacks like should

142
00:06:21,440 --> 00:06:24,479
override url loading and onpatch started

143
00:06:24,479 --> 00:06:26,240
this callback will be invoked by

144
00:06:26,240 --> 00:06:28,639
webwheel during the lifecycle of a

145
00:06:28,639 --> 00:06:30,880
navigation from different models and

146
00:06:30,880 --> 00:06:33,280
sends the url of the current navigation

147
00:06:33,280 --> 00:06:36,319
page but this machine is proved to be

148
00:06:36,319 --> 00:06:37,840
insecure

149
00:06:37,840 --> 00:06:40,400
because this callback is not

150
00:06:40,400 --> 00:06:42,080
concurrently

151
00:06:42,080 --> 00:06:44,880
in the diagram you can see where and

152
00:06:44,880 --> 00:06:45,919
when

153
00:06:45,919 --> 00:06:46,840
they are

154
00:06:46,840 --> 00:06:49,680
invoked either should override your

155
00:06:49,680 --> 00:06:52,720
loading or unpack started is invoked

156
00:06:52,720 --> 00:06:56,080
before old render page unloaded

157
00:06:56,080 --> 00:06:58,479
and as long as there is a new navigation

158
00:06:58,479 --> 00:07:00,880
the access control url will be replaced

159
00:07:00,880 --> 00:07:02,800
by the new url

160
00:07:02,800 --> 00:07:04,319
therefore

161
00:07:04,319 --> 00:07:07,360
all the render javascript interface in

162
00:07:07,360 --> 00:07:10,080
working will be treated as from the new

163
00:07:10,080 --> 00:07:12,400
one

164
00:07:13,120 --> 00:07:15,199
attacker can bypass this check easily

165
00:07:15,199 --> 00:07:17,880
with the time delay attack

166
00:07:17,880 --> 00:07:20,319
location.hrief will trigger navigation

167
00:07:20,319 --> 00:07:23,680
and find the lifecycle callback use get

168
00:07:23,680 --> 00:07:26,960
the wrong current url with the help of

169
00:07:26,960 --> 00:07:29,199
the timeout the access control will be

170
00:07:29,199 --> 00:07:31,840
bypassed

171
00:07:33,440 --> 00:07:34,880
so nowadays

172
00:07:34,880 --> 00:07:37,120
more and more applications use real-time

173
00:07:37,120 --> 00:07:39,840
access control

174
00:07:40,240 --> 00:07:43,039
they do not get url from callbacks but

175
00:07:43,039 --> 00:07:43,960
use

176
00:07:43,960 --> 00:07:47,039
webwill.url immensely when javascript

177
00:07:47,039 --> 00:07:48,400
interface is

178
00:07:48,400 --> 00:07:49,759
invoked

179
00:07:49,759 --> 00:07:52,560
this is a real-time function and

180
00:07:52,560 --> 00:07:55,919
may not affect it by javascript code

181
00:07:55,919 --> 00:07:59,799
in most cases

182
00:08:01,520 --> 00:08:02,240
but

183
00:08:02,240 --> 00:08:04,000
when we dig into the function

184
00:08:04,000 --> 00:08:07,000
webwill.geturl

185
00:08:07,039 --> 00:08:10,319
is not that simple as we think before

186
00:08:10,319 --> 00:08:13,280
actually the function can return two

187
00:08:13,280 --> 00:08:14,879
kinds of value

188
00:08:14,879 --> 00:08:17,680
pending tree and the last committed

189
00:08:17,680 --> 00:08:18,879
entry

190
00:08:18,879 --> 00:08:20,800
generally to say

191
00:08:20,800 --> 00:08:22,720
when this function is called after a

192
00:08:22,720 --> 00:08:25,039
browser initiative navigation it will

193
00:08:25,039 --> 00:08:27,039
return pending g

194
00:08:27,039 --> 00:08:28,800
when this function is called after

195
00:08:28,800 --> 00:08:31,759
render initiative entry

196
00:08:31,759 --> 00:08:32,640
sorry

197
00:08:32,640 --> 00:08:34,479
it's called after render initiative

198
00:08:34,479 --> 00:08:35,599
navigation

199
00:08:35,599 --> 00:08:36,958
it will return

200
00:08:36,958 --> 00:08:40,159
last committed entry

201
00:08:40,159 --> 00:08:41,919
pending entry will be set at the

202
00:08:41,919 --> 00:08:43,760
beginning of the navigation

203
00:08:43,760 --> 00:08:45,920
and the last submitted entry is set

204
00:08:45,920 --> 00:08:49,760
after the render page is committed

205
00:08:49,760 --> 00:08:52,000
for browser initiative navigation get

206
00:08:52,000 --> 00:08:55,519
url will return the new url even before

207
00:08:55,519 --> 00:08:58,480
the old random model unloaded

208
00:08:58,480 --> 00:09:01,200
for render initiated navigation it will

209
00:09:01,200 --> 00:09:03,600
return old random model before the new

210
00:09:03,600 --> 00:09:06,800
render model is committed

211
00:09:06,800 --> 00:09:09,200
it seems interesting

212
00:09:09,200 --> 00:09:13,640
during different types of navigation

213
00:09:13,640 --> 00:09:16,800
webwill.geturl will return different

214
00:09:16,800 --> 00:09:19,120
value

215
00:09:19,360 --> 00:09:21,760
and there we are our

216
00:09:21,760 --> 00:09:23,600
occurred

217
00:09:23,600 --> 00:09:26,240
this new attack called navigation

218
00:09:26,240 --> 00:09:30,160
confused the vulnerability

219
00:09:30,399 --> 00:09:32,640
first let's compare the two types of

220
00:09:32,640 --> 00:09:34,080
navigation

221
00:09:34,080 --> 00:09:36,240
browser initiative navigation route from

222
00:09:36,240 --> 00:09:38,480
user interaction like typing address bar

223
00:09:38,480 --> 00:09:41,600
bookmarks context menu while rendering

224
00:09:41,600 --> 00:09:44,320
navigation is root from random model

225
00:09:44,320 --> 00:09:47,519
like javascript links forms

226
00:09:47,519 --> 00:09:49,040
rendering enchanting the navigation can

227
00:09:49,040 --> 00:09:50,959
be tricked by javascript's code so it is

228
00:09:50,959 --> 00:09:52,959
untrusted and need lots of verification

229
00:09:52,959 --> 00:09:55,839
to ensure the context is no timing

230
00:09:55,839 --> 00:09:57,360
browser initiative navigation is

231
00:09:57,360 --> 00:09:58,880
triggered by user

232
00:09:58,880 --> 00:10:02,240
classroom code cannot affect it so it is

233
00:10:02,240 --> 00:10:04,959
trustful browser initiative navigation

234
00:10:04,959 --> 00:10:06,560
will set pen entry at the beginning of

235
00:10:06,560 --> 00:10:08,480
navigation and written needed during

236
00:10:08,480 --> 00:10:11,200
category error

237
00:10:11,839 --> 00:10:14,800
it seems okay for general desktop

238
00:10:14,800 --> 00:10:17,519
chromium best browser

239
00:10:17,519 --> 00:10:19,920
these two types of navigation is

240
00:10:19,920 --> 00:10:21,160
strictly

241
00:10:21,160 --> 00:10:24,079
compartmentalized in general desktop

242
00:10:24,079 --> 00:10:25,519
browser

243
00:10:25,519 --> 00:10:28,480
but in some other cases like webwill in

244
00:10:28,480 --> 00:10:31,600
android since get different

245
00:10:31,600 --> 00:10:34,160
web will have some specific machinism

246
00:10:34,160 --> 00:10:36,079
allow javascript code

247
00:10:36,079 --> 00:10:38,160
interact with native

248
00:10:38,160 --> 00:10:39,040
like

249
00:10:39,040 --> 00:10:41,839
javascript interface

250
00:10:41,839 --> 00:10:44,640
this means that javascript's code in

251
00:10:44,640 --> 00:10:48,399
webview is more powerful than in general

252
00:10:48,399 --> 00:10:49,440
browser

253
00:10:49,440 --> 00:10:52,399
and some assumption for browser is no

254
00:10:52,399 --> 00:10:56,160
longer suitable for webview

255
00:10:56,720 --> 00:10:59,200
let's get back to the gate url

256
00:10:59,200 --> 00:11:01,279
as is the sending command

257
00:11:01,279 --> 00:11:03,920
the panning entry is safe to return for

258
00:11:03,920 --> 00:11:04,880
new

259
00:11:04,880 --> 00:11:07,279
browser initiative navigation

260
00:11:07,279 --> 00:11:09,760
and most random initiative navigation

261
00:11:09,760 --> 00:11:13,439
should not show the package

262
00:11:13,600 --> 00:11:15,920
the root cause for this vulnerability is

263
00:11:15,920 --> 00:11:17,040
that

264
00:11:17,040 --> 00:11:18,920
in web wheel

265
00:11:18,920 --> 00:11:22,000
browser-initiated navigation can also be

266
00:11:22,000 --> 00:11:23,120
invoked

267
00:11:23,120 --> 00:11:25,120
by render mode

268
00:11:25,120 --> 00:11:27,519
in this case

269
00:11:27,519 --> 00:11:28,480
the code

270
00:11:28,480 --> 00:11:29,839
will treat

271
00:11:29,839 --> 00:11:32,399
the javascript code trigger the

272
00:11:32,399 --> 00:11:33,680
navigation

273
00:11:33,680 --> 00:11:37,200
as the pew browser initiative navigation

274
00:11:37,200 --> 00:11:39,600
and the written pattern entry

275
00:11:39,600 --> 00:11:43,839
which may not be the current url

276
00:11:44,079 --> 00:11:45,760
in another word

277
00:11:45,760 --> 00:11:46,640
if

278
00:11:46,640 --> 00:11:48,000
developer

279
00:11:48,000 --> 00:11:50,720
do not know the difference between

280
00:11:50,720 --> 00:11:52,880
browser initiative navigation and the

281
00:11:52,880 --> 00:11:55,519
render initiative navigation there will

282
00:11:55,519 --> 00:11:58,920
be a vulnerability

283
00:11:59,440 --> 00:12:01,680
we have found three vulnerability models

284
00:12:01,680 --> 00:12:03,200
in real world

285
00:12:03,200 --> 00:12:05,040
first one

286
00:12:05,040 --> 00:12:09,279
direct navigation confused attack

287
00:12:09,279 --> 00:12:12,399
if application expose webwill dot load

288
00:12:12,399 --> 00:12:16,399
urls read javascript interface directly

289
00:12:16,399 --> 00:12:18,959
the evo javascript code could use this

290
00:12:18,959 --> 00:12:20,720
javascript interface to invoke and

291
00:12:20,720 --> 00:12:22,839
browse initiate navigation from render

292
00:12:22,839 --> 00:12:26,320
mode therefore the url gets from

293
00:12:26,320 --> 00:12:29,120
webwheel dot get url is not trustful it

294
00:12:29,120 --> 00:12:32,000
will return pending entry and validation

295
00:12:32,000 --> 00:12:33,760
based on it

296
00:12:33,760 --> 00:12:35,680
will be bypassed

297
00:12:35,680 --> 00:12:37,040
in real world

298
00:12:37,040 --> 00:12:39,440
application may not implement logical as

299
00:12:39,440 --> 00:12:40,959
simple

300
00:12:40,959 --> 00:12:43,680
but they prefer to do like this

301
00:12:43,680 --> 00:12:45,360
for security agreement

302
00:12:45,360 --> 00:12:48,079
i could not tell what apps are so

303
00:12:48,079 --> 00:12:51,279
let's just focus on the code

304
00:12:51,279 --> 00:12:52,639
the interface

305
00:12:52,639 --> 00:12:54,320
check login accept a parameter

306
00:12:54,320 --> 00:12:56,079
destination url

307
00:12:56,079 --> 00:12:57,680
and if the current login status is

308
00:12:57,680 --> 00:12:58,880
fulfilled

309
00:12:58,880 --> 00:13:01,279
it will load destination url with

310
00:13:01,279 --> 00:13:02,959
webwill.url

311
00:13:02,959 --> 00:13:05,839
therefore untrusted javascripts can

312
00:13:05,839 --> 00:13:08,320
trigger trustworth browser initiative

313
00:13:08,320 --> 00:13:10,880
navigation

314
00:13:12,720 --> 00:13:15,519
so attacker can deal and exploit with

315
00:13:15,519 --> 00:13:18,000
the time delay attack

316
00:13:18,000 --> 00:13:19,680
this jazz bridge

317
00:13:19,680 --> 00:13:20,399
dot

318
00:13:20,399 --> 00:13:22,639
check login will trigger browser

319
00:13:22,639 --> 00:13:24,880
initiative navigation

320
00:13:24,880 --> 00:13:27,839
and the web will get url just bridge dot

321
00:13:27,839 --> 00:13:29,279
get token

322
00:13:29,279 --> 00:13:32,800
will written pending entry

323
00:13:33,040 --> 00:13:35,040
the wrong url

324
00:13:35,040 --> 00:13:38,040
google.com

325
00:13:39,600 --> 00:13:40,800
second one

326
00:13:40,800 --> 00:13:42,399
redirect navigation confused

327
00:13:42,399 --> 00:13:45,120
vulnerability

328
00:13:45,519 --> 00:13:48,560
if application calls webwheel.url

329
00:13:48,560 --> 00:13:51,839
in lifecycle callbacks

330
00:13:52,399 --> 00:13:54,000
it will convert render initiative

331
00:13:54,000 --> 00:13:55,839
navigation into browser initiative

332
00:13:55,839 --> 00:13:57,120
navigation

333
00:13:57,120 --> 00:13:59,920
and if javascript code could use this

334
00:13:59,920 --> 00:14:02,399
lifecycle callbacks to trigger and

335
00:14:02,399 --> 00:14:05,279
browsing initiate navigation from render

336
00:14:05,279 --> 00:14:06,639
mode

337
00:14:06,639 --> 00:14:10,399
it is a real bad idea apps never ever do

338
00:14:10,399 --> 00:14:11,279
this

339
00:14:11,279 --> 00:14:14,000
but is extremely common

340
00:14:14,000 --> 00:14:17,920
thanks to the really widely copy pasted

341
00:14:17,920 --> 00:14:19,120
online

342
00:14:19,120 --> 00:14:21,360
you can find lots of examples on stack

343
00:14:21,360 --> 00:14:23,920
overflow

344
00:14:24,160 --> 00:14:26,240
in real world we find two typical

345
00:14:26,240 --> 00:14:28,160
misused

346
00:14:28,160 --> 00:14:31,600
the first one if the redirect url

347
00:14:31,600 --> 00:14:33,839
matched a specific partner it will be

348
00:14:33,839 --> 00:14:36,399
treated as a protocoled message

349
00:14:36,399 --> 00:14:39,120
and the application would extract

350
00:14:39,120 --> 00:14:42,079
another url resided and loaded the new

351
00:14:42,079 --> 00:14:44,079
one

352
00:14:44,079 --> 00:14:46,399
another common missed user

353
00:14:46,399 --> 00:14:49,199
lifecycle callback likes this

354
00:14:49,199 --> 00:14:51,680
when the arranger redirect url is not

355
00:14:51,680 --> 00:14:55,040
matched a specific partner web will

356
00:14:55,040 --> 00:14:58,800
wouldn't be redirect to a hard-coded url

357
00:14:58,800 --> 00:15:02,639
which generally in white list

358
00:15:05,120 --> 00:15:08,160
so attacker can deal and exploit like

359
00:15:08,160 --> 00:15:09,279
this

360
00:15:09,279 --> 00:15:10,040
the

361
00:15:10,040 --> 00:15:12,399
location.href is a render initiative

362
00:15:12,399 --> 00:15:13,600
navigation

363
00:15:13,600 --> 00:15:16,560
but thanks to the callback should or

364
00:15:16,560 --> 00:15:19,199
write url loading it will be converted

365
00:15:19,199 --> 00:15:22,639
into browser initiated navigation

366
00:15:22,639 --> 00:15:24,959
as long as

367
00:15:24,959 --> 00:15:28,480
the url is matched or unmatched

368
00:15:28,480 --> 00:15:30,399
some specific

369
00:15:30,399 --> 00:15:32,240
protocol

370
00:15:32,240 --> 00:15:35,759
some specific condition

371
00:15:36,240 --> 00:15:38,880
and the third one

372
00:15:38,880 --> 00:15:40,959
shelled navigation confused the

373
00:15:40,959 --> 00:15:43,680
vulnerability

374
00:15:44,959 --> 00:15:47,199
compared to the last two model this one

375
00:15:47,199 --> 00:15:48,880
is more puzzled

376
00:15:48,880 --> 00:15:50,880
if the launch mode of the activity who

377
00:15:50,880 --> 00:15:53,199
holding web wheel is stepped to be

378
00:15:53,199 --> 00:15:55,920
single task or single instance the web

379
00:15:55,920 --> 00:15:57,199
wheel

380
00:15:57,199 --> 00:15:58,880
could be reused

381
00:15:58,880 --> 00:16:00,800
a specific deep link

382
00:16:00,800 --> 00:16:02,720
could launch this activity

383
00:16:02,720 --> 00:16:04,639
and load page

384
00:16:04,639 --> 00:16:05,920
in webview

385
00:16:05,920 --> 00:16:08,720
if you invoke deep link twice

386
00:16:08,720 --> 00:16:10,560
two wireless pads

387
00:16:10,560 --> 00:16:12,160
could displaying

388
00:16:12,160 --> 00:16:14,480
but there will be only one webview

389
00:16:14,480 --> 00:16:15,519
object

390
00:16:15,519 --> 00:16:16,880
therefore

391
00:16:16,880 --> 00:16:19,279
all dblink could be converted into a

392
00:16:19,279 --> 00:16:21,839
browser initiative navigation on a sam

393
00:16:21,839 --> 00:16:23,440
webview object

394
00:16:23,440 --> 00:16:26,160
it has some effect same effect

395
00:16:26,160 --> 00:16:28,880
as last two models

396
00:16:28,880 --> 00:16:31,519
maybe a diagram will be clearly if a web

397
00:16:31,519 --> 00:16:33,839
will be saved single task

398
00:16:33,839 --> 00:16:36,480
there will be only one web object and

399
00:16:36,480 --> 00:16:38,880
any deep link will be converted to load

400
00:16:38,880 --> 00:16:41,120
url on this object

401
00:16:41,120 --> 00:16:43,199
and deep link can be invoked by

402
00:16:43,199 --> 00:16:44,880
javascript

403
00:16:44,880 --> 00:16:47,519
this will find another way to invoke

404
00:16:47,519 --> 00:16:48,480
browser

405
00:16:48,480 --> 00:16:53,199
initiate navigation from render mode

406
00:16:55,279 --> 00:16:58,399
there are two ways to attack this mode

407
00:16:58,399 --> 00:17:00,480
if web wheel can trigger

408
00:17:00,480 --> 00:17:02,720
deep link itself we can do exploit like

409
00:17:02,720 --> 00:17:04,480
this just like before

410
00:17:04,480 --> 00:17:08,160
location dot href will trigger deep link

411
00:17:08,160 --> 00:17:10,799
and launch web wheel due to the single

412
00:17:10,799 --> 00:17:12,559
task launch mode

413
00:17:12,559 --> 00:17:15,439
webwheel will be reused and it will

414
00:17:15,439 --> 00:17:17,520
launch a browser initiative navigation

415
00:17:17,520 --> 00:17:19,839
in current web will

416
00:17:19,839 --> 00:17:21,839
if target web wheel cannot trigger

417
00:17:21,839 --> 00:17:23,439
dblink

418
00:17:23,439 --> 00:17:27,199
we need a third pass browser help

419
00:17:27,199 --> 00:17:30,160
i use the event visibility change to

420
00:17:30,160 --> 00:17:32,559
trigger the scheme consequently this

421
00:17:32,559 --> 00:17:35,440
event is filed as a document when the

422
00:17:35,440 --> 00:17:37,840
content of this tab have become visible

423
00:17:37,840 --> 00:17:39,679
or have been hidden

424
00:17:39,679 --> 00:17:42,400
the function attack will load

425
00:17:42,400 --> 00:17:43,919
attacker.site

426
00:17:43,919 --> 00:17:47,120
in target web will first and

427
00:17:47,120 --> 00:17:50,720
will fire event visibility change after

428
00:17:50,720 --> 00:17:54,160
short delay the event listener will load

429
00:17:54,160 --> 00:17:58,400
google.com in target webview too

430
00:17:59,280 --> 00:18:02,160
this exploit works in some third part

431
00:18:02,160 --> 00:18:03,440
browser like

432
00:18:03,440 --> 00:18:05,840
quack

433
00:18:06,240 --> 00:18:08,640
to help you find this vulnerabilities we

434
00:18:08,640 --> 00:18:10,160
developed a

435
00:18:10,160 --> 00:18:13,039
novel tool that converts android apps

436
00:18:13,039 --> 00:18:15,600
automatically it is the

437
00:18:15,600 --> 00:18:17,679
past search tier best

438
00:18:17,679 --> 00:18:20,400
on android it has three simple logical

439
00:18:20,400 --> 00:18:21,919
to find this

440
00:18:21,919 --> 00:18:25,200
three vulnerability model

441
00:18:25,200 --> 00:18:28,880
these are vulnerabilities models we find

442
00:18:28,880 --> 00:18:31,440
so far

443
00:18:31,520 --> 00:18:32,480
and

444
00:18:32,480 --> 00:18:35,840
i believe it is just the tip of the

445
00:18:35,840 --> 00:18:38,480
iceberg

446
00:18:39,280 --> 00:18:41,600
next i will show you how to mitigate

447
00:18:41,600 --> 00:18:43,520
this kind of vulnerability

448
00:18:43,520 --> 00:18:45,360
for some business reason

449
00:18:45,360 --> 00:18:47,679
the web page that needs to be loaded in

450
00:18:47,679 --> 00:18:50,880
web will is not easy to be modified so

451
00:18:50,880 --> 00:18:52,720
most of the time we could only enforce

452
00:18:52,720 --> 00:18:55,120
our application

453
00:18:55,120 --> 00:18:57,120
due to the problem

454
00:18:57,120 --> 00:19:00,480
it's root from webview native code

455
00:19:00,480 --> 00:19:02,880
android developer actually has less to

456
00:19:02,880 --> 00:19:03,679
do

457
00:19:03,679 --> 00:19:05,200
they can only try to avoid the

458
00:19:05,200 --> 00:19:07,679
vulnerability models i noticed before

459
00:19:07,679 --> 00:19:09,600
but as i said

460
00:19:09,600 --> 00:19:13,039
these three models is just the tip of

461
00:19:13,039 --> 00:19:15,679
the iceberg

462
00:19:15,679 --> 00:19:18,080
so we come up with rich interface and

463
00:19:18,080 --> 00:19:20,720
enforcement in a deeper side

464
00:19:20,720 --> 00:19:23,039
we change the way we will invoke java

465
00:19:23,039 --> 00:19:26,080
object this diagram shows how rich

466
00:19:26,080 --> 00:19:27,520
interface work

467
00:19:27,520 --> 00:19:29,600
let's remind how javascript interface

468
00:19:29,600 --> 00:19:30,720
work

469
00:19:30,720 --> 00:19:33,520
available objects in js engine

470
00:19:33,520 --> 00:19:35,679
change our bridge object in render

471
00:19:35,679 --> 00:19:38,080
change our bond objects in browser and

472
00:19:38,080 --> 00:19:38,960
final

473
00:19:38,960 --> 00:19:40,240
java object

474
00:19:40,240 --> 00:19:43,039
we notice that in browser model we can

475
00:19:43,039 --> 00:19:46,400
clearly know where this work come from

476
00:19:46,400 --> 00:19:48,720
but this information was banned during

477
00:19:48,720 --> 00:19:50,880
chain icon

478
00:19:50,880 --> 00:19:52,960
so which interface will do another

479
00:19:52,960 --> 00:19:54,880
explicit curve

480
00:19:54,880 --> 00:19:58,000
transfer the url before the real

481
00:19:58,000 --> 00:20:00,640
javascript curve

482
00:20:00,640 --> 00:20:03,840
so the verification can get a correct

483
00:20:03,840 --> 00:20:04,799
data

484
00:20:04,799 --> 00:20:08,000
the only change application needs to add

485
00:20:08,000 --> 00:20:10,799
is a set url javascript interface in the

486
00:20:10,799 --> 00:20:14,480
java object to receive the message

487
00:20:14,480 --> 00:20:16,799
the time window between set url and

488
00:20:16,799 --> 00:20:19,760
actually javascript interface

489
00:20:19,760 --> 00:20:21,039
car is

490
00:20:21,039 --> 00:20:24,320
small enough to be ignored

491
00:20:26,240 --> 00:20:28,720
before which interface application

492
00:20:28,720 --> 00:20:32,000
cannot get the car cracked url from web

493
00:20:32,000 --> 00:20:35,200
wheel attacker can use navigation

494
00:20:35,200 --> 00:20:37,200
confused vulnerability to bypass the

495
00:20:37,200 --> 00:20:38,880
whitelist checker

496
00:20:38,880 --> 00:20:41,039
after which interface application can

497
00:20:41,039 --> 00:20:42,880
get url from the javascript interface

498
00:20:42,880 --> 00:20:45,840
directly any attack try to build the url

499
00:20:45,840 --> 00:20:48,400
would not work

500
00:20:48,400 --> 00:20:49,600
what's more

501
00:20:49,600 --> 00:20:52,400
other mitigations like no frank or draco

502
00:20:52,400 --> 00:20:55,360
is also worked

503
00:20:56,400 --> 00:20:58,960
there are three things we need to think

504
00:20:58,960 --> 00:21:00,840
about

505
00:21:00,840 --> 00:21:04,240
first whether we have read the document

506
00:21:04,240 --> 00:21:07,039
before we use the api

507
00:21:07,039 --> 00:21:10,240
both app clone attack and navigation

508
00:21:10,240 --> 00:21:12,400
confuse the vulnerability

509
00:21:12,400 --> 00:21:14,960
are caused by inaccurate reading of

510
00:21:14,960 --> 00:21:16,960
document and in depth print

511
00:21:16,960 --> 00:21:19,600
understanding

512
00:21:20,799 --> 00:21:22,400
second

513
00:21:22,400 --> 00:21:25,039
for cross platform framework

514
00:21:25,039 --> 00:21:26,880
some preconditions

515
00:21:26,880 --> 00:21:30,880
may not meet in every platform

516
00:21:30,880 --> 00:21:32,799
the last one

517
00:21:32,799 --> 00:21:34,799
navigation confused the vulnerability

518
00:21:34,799 --> 00:21:38,960
can also be extended to other products

519
00:21:39,840 --> 00:21:42,320
that's all my presentation

520
00:21:42,320 --> 00:21:45,559
thank you

