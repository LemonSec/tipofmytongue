1
00:00:01,130 --> 00:00:14,690
[Music]

2
00:00:16,480 --> 00:00:18,880
hello everyone

3
00:00:18,880 --> 00:00:21,520
uh today i'm going to share my late

4
00:00:21,520 --> 00:00:24,640
history search on by the way

5
00:00:24,640 --> 00:00:26,000
my name is

6
00:00:26,000 --> 00:00:28,160
and i'm a security researcher from

7
00:00:28,160 --> 00:00:31,439
series 6 or alpha live and here is a

8
00:00:31,439 --> 00:00:34,399
brief introduction of myself and the

9
00:00:34,399 --> 00:00:36,320
team

10
00:00:36,320 --> 00:00:38,559
and this is the agenda

11
00:00:38,559 --> 00:00:41,440
for today firstly the introduction

12
00:00:41,440 --> 00:00:44,480
backgrounds and basics

13
00:00:44,480 --> 00:00:46,559
and i will

14
00:00:46,559 --> 00:00:48,320
show you how we can find the

15
00:00:48,320 --> 00:00:52,079
probabilities from qualcomm pas

16
00:00:52,079 --> 00:00:54,559
and after that

17
00:00:54,559 --> 00:00:56,480
we will learn

18
00:00:56,480 --> 00:00:59,600
the design of the shared memory model

19
00:00:59,600 --> 00:01:03,520
which will be utilized to do the exploit

20
00:01:03,520 --> 00:01:04,319
and

21
00:01:04,319 --> 00:01:06,080
after that

22
00:01:06,080 --> 00:01:07,119
we will

23
00:01:07,119 --> 00:01:08,320
make an

24
00:01:08,320 --> 00:01:10,640
exploit based on

25
00:01:10,640 --> 00:01:12,479
the knowledge we have learned

26
00:01:12,479 --> 00:01:15,759
and they will each extract the key box

27
00:01:15,759 --> 00:01:17,680
from sfis

28
00:01:17,680 --> 00:01:20,560
and secure the first system

29
00:01:20,560 --> 00:01:21,920
from qualcomm

30
00:01:21,920 --> 00:01:23,280
finally

31
00:01:23,280 --> 00:01:26,439
the closing

32
00:01:26,479 --> 00:01:29,759
so while they are looking into radar on

33
00:01:29,759 --> 00:01:31,920
qte because

34
00:01:31,920 --> 00:01:35,200
both them are high value target

35
00:01:35,200 --> 00:01:40,479
for qte it has many devices running is

36
00:01:40,479 --> 00:01:44,240
chipsets and it's very difficult to

37
00:01:44,240 --> 00:01:46,479
study and exploit

38
00:01:46,479 --> 00:01:48,399
there are many reasons

39
00:01:48,399 --> 00:01:49,920
including this

40
00:01:49,920 --> 00:01:51,439
the internal

41
00:01:51,439 --> 00:01:54,720
researchers from qualcomm have too many

42
00:01:54,720 --> 00:01:57,200
works and the so-called

43
00:01:57,200 --> 00:01:58,960
high-end fruits

44
00:01:58,960 --> 00:01:59,840
are

45
00:01:59,840 --> 00:02:02,799
have been picked up so

46
00:02:02,799 --> 00:02:06,560
make it more difficult to deal with

47
00:02:06,560 --> 00:02:10,160
as for the white wine oh white wine is a

48
00:02:10,160 --> 00:02:12,959
drm solution provided by

49
00:02:12,959 --> 00:02:15,760
a company affiliated to

50
00:02:15,760 --> 00:02:17,680
google and

51
00:02:17,680 --> 00:02:20,720
there are billions of devices running it

52
00:02:20,720 --> 00:02:22,800
and it have

53
00:02:22,800 --> 00:02:26,560
hundreds of partners

54
00:02:26,560 --> 00:02:28,560
it will also of

55
00:02:28,560 --> 00:02:31,519
affect many platforms

56
00:02:31,519 --> 00:02:34,239
not just the qte

57
00:02:34,239 --> 00:02:37,200
and it have become the de facto standard

58
00:02:37,200 --> 00:02:42,879
dm solution for most android devices

59
00:02:44,160 --> 00:02:47,280
here i want to

60
00:02:47,519 --> 00:02:49,920
talk about the basics of traction

61
00:02:49,920 --> 00:02:51,760
advantage

62
00:02:51,760 --> 00:02:54,879
the purpose to implement trust zone is

63
00:02:54,879 --> 00:02:57,340
to do trusted computing in

64
00:02:57,340 --> 00:02:58,959
[Music]

65
00:02:58,959 --> 00:03:01,040
and trusted environment

66
00:03:01,040 --> 00:03:05,840
and then to protect hiv content

67
00:03:06,319 --> 00:03:09,200
and the trust zones features

68
00:03:09,200 --> 00:03:10,400
including

69
00:03:10,400 --> 00:03:13,040
new modifications

70
00:03:13,040 --> 00:03:14,800
and

71
00:03:14,800 --> 00:03:17,120
as well as

72
00:03:17,120 --> 00:03:20,640
the reuse of existing processors

73
00:03:20,640 --> 00:03:22,879
and the possible use of tradition

74
00:03:22,879 --> 00:03:25,680
including drm fingerprints

75
00:03:25,680 --> 00:03:27,680
and keystore

76
00:03:27,680 --> 00:03:30,840
and there are many other

77
00:03:30,840 --> 00:03:34,879
scenarios now here is this picture shows

78
00:03:34,879 --> 00:03:35,760
the

79
00:03:35,760 --> 00:03:38,720
architecture of

80
00:03:38,720 --> 00:03:43,440
the justin implementation on pixel 4 xl

81
00:03:43,440 --> 00:03:47,440
and the life size it is

82
00:03:47,440 --> 00:03:51,040
a bit familiar we have the user space

83
00:03:51,040 --> 00:03:54,159
the kernel and the hypervisor

84
00:03:54,159 --> 00:03:55,680
and when

85
00:03:55,680 --> 00:03:56,400
the

86
00:03:56,400 --> 00:03:59,200
truss run in is

87
00:03:59,200 --> 00:03:59,840
introduce

88
00:03:59,840 --> 00:04:01,439
[Music]

89
00:04:01,439 --> 00:04:03,680
there will be a secure world

90
00:04:03,680 --> 00:04:07,040
which have its own user space kernel and

91
00:04:07,040 --> 00:04:07,840
hypervisor

92
00:04:07,840 --> 00:04:09,439
[Music]

93
00:04:09,439 --> 00:04:12,400
and to interact and speech between the

94
00:04:12,400 --> 00:04:13,680
two world

95
00:04:13,680 --> 00:04:18,478
a secure monitor will be implemented

96
00:04:19,440 --> 00:04:22,639
okay we are going to take a look at

97
00:04:22,639 --> 00:04:25,280
how user command is processed in red

98
00:04:25,280 --> 00:04:29,040
line and here is the entry

99
00:04:29,040 --> 00:04:30,960
and this is the user

100
00:04:30,960 --> 00:04:33,520
command buffer and its lines

101
00:04:33,520 --> 00:04:38,400
and the result from the tan is nice

102
00:04:38,400 --> 00:04:40,080
and we are looking into this function

103
00:04:40,080 --> 00:04:43,199
the dash command handler

104
00:04:43,199 --> 00:04:45,759
in this function

105
00:04:45,759 --> 00:04:46,639
in

106
00:04:46,639 --> 00:04:49,520
this line we find that finally

107
00:04:49,520 --> 00:04:52,000
a function will get called and the

108
00:04:52,000 --> 00:04:56,400
pointer of this function is read from

109
00:04:56,400 --> 00:04:57,360
a

110
00:04:57,360 --> 00:04:58,800
global

111
00:04:58,800 --> 00:05:00,639
global pointer

112
00:05:00,639 --> 00:05:01,600
and

113
00:05:01,600 --> 00:05:02,560
also

114
00:05:02,560 --> 00:05:05,759
the boundary check on input path and

115
00:05:05,759 --> 00:05:08,960
input and up output

116
00:05:08,960 --> 00:05:11,360
the bound video is also

117
00:05:11,360 --> 00:05:12,479
read from

118
00:05:12,479 --> 00:05:14,800
somewhere near this pointer

119
00:05:14,800 --> 00:05:17,600
so we find it and

120
00:05:17,600 --> 00:05:19,280
let's see what it

121
00:05:19,280 --> 00:05:20,639
will do

122
00:05:20,639 --> 00:05:22,320
well in this

123
00:05:22,320 --> 00:05:26,880
it is actually a table and in this table

124
00:05:26,880 --> 00:05:30,720
each entry will contain a command id

125
00:05:30,720 --> 00:05:33,039
the bonds and the

126
00:05:33,039 --> 00:05:35,360
function pointer okay

127
00:05:35,360 --> 00:05:37,280
as well find the

128
00:05:37,280 --> 00:05:40,720
function pointer of each command handler

129
00:05:40,720 --> 00:05:43,280
we can look into each of them and find

130
00:05:43,280 --> 00:05:45,680
if there is any

131
00:05:45,680 --> 00:05:48,240
probabilities

132
00:05:48,240 --> 00:05:49,199
and

133
00:05:49,199 --> 00:05:52,560
then i find my first first variability

134
00:05:52,560 --> 00:05:55,919
and this is the

135
00:05:55,919 --> 00:05:59,680
location graph of it how to trigger the

136
00:05:59,680 --> 00:06:00,590
probability

137
00:06:00,590 --> 00:06:02,960
[Music]

138
00:06:02,960 --> 00:06:05,199
okay

139
00:06:05,199 --> 00:06:07,520
so the user command

140
00:06:07,520 --> 00:06:10,400
at first glance it is a

141
00:06:10,400 --> 00:06:14,160
byte array but of course it will contain

142
00:06:14,160 --> 00:06:17,759
internal structure so i have recovered

143
00:06:17,759 --> 00:06:21,360
some of the structure as this

144
00:06:21,360 --> 00:06:25,280
and the inner structures

145
00:06:25,280 --> 00:06:26,479
okay and

146
00:06:26,479 --> 00:06:28,720
this one

147
00:06:28,720 --> 00:06:31,840
which is very interesting the subsample

148
00:06:31,840 --> 00:06:32,960
methods

149
00:06:32,960 --> 00:06:36,560
this is an array of up to

150
00:06:36,560 --> 00:06:38,319
20

151
00:06:38,319 --> 00:06:41,039
sorry 32

152
00:06:41,039 --> 00:06:44,479
elements and some of its

153
00:06:44,479 --> 00:06:47,600
fields have been recovered

154
00:06:47,600 --> 00:06:50,479
so what are the subsamples and how are

155
00:06:50,479 --> 00:06:53,440
they processed

156
00:06:53,599 --> 00:06:56,240
okay we got this method and

157
00:06:56,240 --> 00:06:58,400
each element of it

158
00:06:58,400 --> 00:06:59,919
contain

159
00:06:59,919 --> 00:07:02,880
oxide and lens information which can

160
00:07:02,880 --> 00:07:05,440
locate them in ink path

161
00:07:05,440 --> 00:07:10,319
and as well as dig bath both of them

162
00:07:10,400 --> 00:07:12,639
will contain many subsamples and the

163
00:07:12,639 --> 00:07:16,479
next one and the next one okay we have

164
00:07:16,479 --> 00:07:18,319
located this

165
00:07:18,319 --> 00:07:21,280
so-called subsample

166
00:07:21,280 --> 00:07:22,400
so

167
00:07:22,400 --> 00:07:24,639
how are they processed

168
00:07:24,639 --> 00:07:28,479
they'll get decrypted by this function

169
00:07:28,479 --> 00:07:31,120
and in this function

170
00:07:31,120 --> 00:07:33,840
if the dual decrypt

171
00:07:33,840 --> 00:07:36,880
is equal to zero

172
00:07:36,880 --> 00:07:39,759
the decryption will be demoted to one

173
00:07:39,759 --> 00:07:41,840
copy

174
00:07:41,840 --> 00:07:43,039
like this

175
00:07:43,039 --> 00:07:44,400
the decoration

176
00:07:44,400 --> 00:07:45,680
process

177
00:07:45,680 --> 00:07:49,120
so a summary of the

178
00:07:49,120 --> 00:07:50,800
subsample

179
00:07:50,800 --> 00:07:54,080
the subsamples are embedded in the ink

180
00:07:54,080 --> 00:07:57,440
buffer and decoration buffer and the

181
00:07:57,440 --> 00:08:01,199
length of and offset of them are

182
00:08:01,199 --> 00:08:03,680
taken from the mid house

183
00:08:03,680 --> 00:08:04,800
array

184
00:08:04,800 --> 00:08:08,160
and when the graph is equal to zero the

185
00:08:08,160 --> 00:08:10,840
decryption will be demoted to

186
00:08:10,840 --> 00:08:13,759
copy so

187
00:08:13,759 --> 00:08:15,199
okay

188
00:08:15,199 --> 00:08:17,759
we have already seen the vulnerability

189
00:08:17,759 --> 00:08:19,280
here it is

190
00:08:19,280 --> 00:08:21,520
the subsample of side there is no bound

191
00:08:21,520 --> 00:08:24,318
check on it

192
00:08:25,120 --> 00:08:27,440
so with no bank check

193
00:08:27,440 --> 00:08:30,240
the offset can be very big and we can

194
00:08:30,240 --> 00:08:33,440
make a num copy from an offsite

195
00:08:33,440 --> 00:08:36,399
and overload place

196
00:08:36,399 --> 00:08:39,519
to another place

197
00:08:39,519 --> 00:08:43,360
so we have got a vulnerability

198
00:08:43,360 --> 00:08:46,480
the good news is it is accurate it's

199
00:08:46,480 --> 00:08:50,160
non-copy rather than memory machine so

200
00:08:50,160 --> 00:08:53,680
so we can do very accurate memory

201
00:08:53,680 --> 00:08:57,839
manipulate manipulation and

202
00:08:57,839 --> 00:09:02,080
if we let the lens equal zero or xo one

203
00:09:02,080 --> 00:09:03,839
we can make

204
00:09:03,839 --> 00:09:05,920
a single byte

205
00:09:05,920 --> 00:09:07,440
modification

206
00:09:07,440 --> 00:09:09,279
the bad news is

207
00:09:09,279 --> 00:09:12,000
the samsung offset is a

208
00:09:12,000 --> 00:09:14,399
32-bit video

209
00:09:14,399 --> 00:09:17,760
that is not big enough to cause integral

210
00:09:17,760 --> 00:09:18,880
flow

211
00:09:18,880 --> 00:09:22,760
so we cannot

212
00:09:23,360 --> 00:09:25,200
copy to

213
00:09:25,200 --> 00:09:29,440
the address lower than the input buffer

214
00:09:29,440 --> 00:09:30,880
and the

215
00:09:30,880 --> 00:09:34,640
think ink buffering decryption buffer so

216
00:09:34,640 --> 00:09:37,200
what's next we need to find more

217
00:09:37,200 --> 00:09:39,600
information so we can turn this

218
00:09:39,600 --> 00:09:42,720
vulnerability to um

219
00:09:42,720 --> 00:09:45,360
exploit

220
00:09:45,519 --> 00:09:48,080
we need address of the ta and we need

221
00:09:48,080 --> 00:09:49,360
the drives

222
00:09:49,360 --> 00:09:52,480
of our buffers our shield buffers and we

223
00:09:52,480 --> 00:09:55,680
need a delicate memory layout that can

224
00:09:55,680 --> 00:09:58,560
let out our memory corruption

225
00:09:58,560 --> 00:10:01,440
reach the ta

226
00:10:01,440 --> 00:10:05,320
so the first question

227
00:10:06,320 --> 00:10:10,000
how is the ta located in memory

228
00:10:10,000 --> 00:10:13,440
actually the memory range pre-allocated

229
00:10:13,440 --> 00:10:14,240
for

230
00:10:14,240 --> 00:10:15,600
pas

231
00:10:15,600 --> 00:10:16,640
is

232
00:10:16,640 --> 00:10:20,399
is defined in dts strict details file

233
00:10:20,399 --> 00:10:24,160
and it's called the ckfpp region

234
00:10:24,160 --> 00:10:26,800
which have a limited

235
00:10:26,800 --> 00:10:29,920
memory uh physical memory and limited

236
00:10:29,920 --> 00:10:31,040
range

237
00:10:31,040 --> 00:10:32,399
so

238
00:10:32,399 --> 00:10:35,279
also the ta will use a

239
00:10:35,279 --> 00:10:36,560
linear

240
00:10:36,560 --> 00:10:38,560
map which means that its physical

241
00:10:38,560 --> 00:10:40,640
address is equal to

242
00:10:40,640 --> 00:10:43,439
virtual drives

243
00:10:44,480 --> 00:10:48,800
well as the region is limited and

244
00:10:48,800 --> 00:10:52,800
it is physical fixed physical drives

245
00:10:52,800 --> 00:10:54,800
we can bypass

246
00:10:54,800 --> 00:10:56,800
the aslr

247
00:10:56,800 --> 00:11:00,560
we can boot with brute force we can keep

248
00:11:00,560 --> 00:11:03,440
trying to read from a page and the page

249
00:11:03,440 --> 00:11:04,800
will

250
00:11:04,800 --> 00:11:05,920
cross

251
00:11:05,920 --> 00:11:08,240
but if it doesn't cross it means that we

252
00:11:08,240 --> 00:11:10,079
have reached

253
00:11:10,079 --> 00:11:13,600
some page belong to the ta

254
00:11:13,600 --> 00:11:15,680
and we can

255
00:11:15,680 --> 00:11:17,920
read we can prepare some secret

256
00:11:17,920 --> 00:11:20,880
signatures of each page and we can

257
00:11:20,880 --> 00:11:22,720
compare it with the

258
00:11:22,720 --> 00:11:25,279
page we can read from and determine

259
00:11:25,279 --> 00:11:27,680
which page we have hate

260
00:11:27,680 --> 00:11:29,120
so we can know

261
00:11:29,120 --> 00:11:33,920
the load base of the ta

262
00:11:35,600 --> 00:11:38,880
after that we will find

263
00:11:38,880 --> 00:11:42,240
how to know the drives of the shared

264
00:11:42,240 --> 00:11:43,680
buffers

265
00:11:43,680 --> 00:11:46,240
we have been training

266
00:11:46,240 --> 00:11:49,360
of course we need the physical address

267
00:11:49,360 --> 00:11:50,240
of

268
00:11:50,240 --> 00:11:52,959
both of them

269
00:11:53,120 --> 00:11:55,200
before that

270
00:11:55,200 --> 00:11:58,560
we'll take a look at how our

271
00:11:58,560 --> 00:12:03,040
commands shift from the user space to ta

272
00:12:03,040 --> 00:12:04,800
there is a very

273
00:12:04,800 --> 00:12:07,519
basic send command

274
00:12:07,519 --> 00:12:09,360
a student command

275
00:12:09,360 --> 00:12:12,000
api that contains no

276
00:12:12,000 --> 00:12:14,079
shared memory

277
00:12:14,079 --> 00:12:15,279
feature

278
00:12:15,279 --> 00:12:17,200
it will have the same buffers and

279
00:12:17,200 --> 00:12:19,680
buffers length and receive buffer and

280
00:12:19,680 --> 00:12:22,800
receive buffer lens

281
00:12:23,519 --> 00:12:24,639
okay

282
00:12:24,639 --> 00:12:25,839
when the

283
00:12:25,839 --> 00:12:27,920
process is

284
00:12:27,920 --> 00:12:29,200
happening

285
00:12:29,200 --> 00:12:31,920
it will call our control to the kernel

286
00:12:31,920 --> 00:12:33,839
driver and the kernel

287
00:12:33,839 --> 00:12:34,959
will

288
00:12:34,959 --> 00:12:37,279
rotate to the ta

289
00:12:37,279 --> 00:12:40,959
after the process ta will write the

290
00:12:40,959 --> 00:12:43,040
result of this

291
00:12:43,040 --> 00:12:44,959
of this invocation

292
00:12:44,959 --> 00:12:46,560
to the

293
00:12:46,560 --> 00:12:48,800
receive buffer

294
00:12:48,800 --> 00:12:51,279
and finally the kernel will return the

295
00:12:51,279 --> 00:12:54,639
result and control to the user space

296
00:12:54,639 --> 00:12:57,680
it's very simple and straightforward but

297
00:12:57,680 --> 00:12:58,880
if

298
00:12:58,880 --> 00:13:02,560
shared memory is implemented

299
00:13:02,560 --> 00:13:05,040
a new field will be introduced

300
00:13:05,040 --> 00:13:08,959
here the 2c chrome ion fd

301
00:13:08,959 --> 00:13:11,120
info it is

302
00:13:11,120 --> 00:13:12,880
actually a

303
00:13:12,880 --> 00:13:15,040
record that contains

304
00:13:15,040 --> 00:13:18,639
up to four ion buffers which will tell

305
00:13:18,639 --> 00:13:22,480
the kernel that which part of the send

306
00:13:22,480 --> 00:13:23,680
buffer

307
00:13:23,680 --> 00:13:26,399
is actually a

308
00:13:26,399 --> 00:13:30,560
virtual drive of shared manner

309
00:13:32,839 --> 00:13:35,360
okay then

310
00:13:35,360 --> 00:13:38,480
in the kernel the user virtual drives of

311
00:13:38,480 --> 00:13:40,000
the shared buffer

312
00:13:40,000 --> 00:13:42,800
in the command buffer will be

313
00:13:42,800 --> 00:13:46,160
translated into physical drives

314
00:13:46,160 --> 00:13:48,160
now this

315
00:13:48,160 --> 00:13:51,680
code this code is a bit confusing

316
00:13:51,680 --> 00:13:54,000
i'll show you in the picture

317
00:13:54,000 --> 00:13:55,199
0

318
00:13:55,199 --> 00:13:57,839
the user space to the kernel

319
00:13:57,839 --> 00:13:59,839
and the kernel

320
00:13:59,839 --> 00:14:01,680
will

321
00:14:01,680 --> 00:14:04,959
make an smc call to the ta but before

322
00:14:04,959 --> 00:14:06,399
that

323
00:14:06,399 --> 00:14:07,120
the

324
00:14:07,120 --> 00:14:09,440
kernel will translate the virtual

325
00:14:09,440 --> 00:14:12,160
address to physical address in the same

326
00:14:12,160 --> 00:14:15,160
file

327
00:14:16,000 --> 00:14:18,240
and after that

328
00:14:18,240 --> 00:14:20,240
the tier will return with the receive

329
00:14:20,240 --> 00:14:23,279
buffer field and finally the kernel will

330
00:14:23,279 --> 00:14:26,880
return the control to the user space but

331
00:14:26,880 --> 00:14:28,560
before that

332
00:14:28,560 --> 00:14:31,040
the physical address

333
00:14:31,040 --> 00:14:33,760
addresses are mapped out

334
00:14:33,760 --> 00:14:36,959
for secure region for security reason of

335
00:14:36,959 --> 00:14:38,959
course

336
00:14:38,959 --> 00:14:40,880
so as the

337
00:14:40,880 --> 00:14:43,519
physical address will not get

338
00:14:43,519 --> 00:14:47,440
linked to the user space we need to find

339
00:14:47,440 --> 00:14:50,079
a variability that can

340
00:14:50,079 --> 00:14:52,560
make the

341
00:14:53,360 --> 00:14:55,600
physical address of the shared memory we

342
00:14:55,600 --> 00:14:58,720
are using

343
00:14:58,720 --> 00:15:00,560
here we'll look at

344
00:15:00,560 --> 00:15:02,720
into this function

345
00:15:02,720 --> 00:15:05,360
the generate signature function it is

346
00:15:05,360 --> 00:15:08,880
also a command handler in

347
00:15:08,880 --> 00:15:11,360
red line

348
00:15:11,360 --> 00:15:13,760
and

349
00:15:13,760 --> 00:15:16,880
it will do this it will copy part of the

350
00:15:16,880 --> 00:15:19,519
command buffer to the

351
00:15:19,519 --> 00:15:22,079
response buffer

352
00:15:22,079 --> 00:15:24,560
and then this part of the response

353
00:15:24,560 --> 00:15:26,720
buffer will be used

354
00:15:26,720 --> 00:15:29,600
as a parameter to this function the

355
00:15:29,600 --> 00:15:32,000
general signature function

356
00:15:32,000 --> 00:15:35,920
and in the generic signature function

357
00:15:35,920 --> 00:15:39,199
the parameter will get updated

358
00:15:39,199 --> 00:15:40,480
but

359
00:15:40,480 --> 00:15:43,519
if there is an error

360
00:15:43,519 --> 00:15:47,279
this function will return earlier and

361
00:15:47,279 --> 00:15:50,240
leave this video unchanged

362
00:15:50,240 --> 00:15:53,279
which means that

363
00:15:53,519 --> 00:15:55,440
there will be

364
00:15:55,440 --> 00:15:57,759
a copy from a command buffer to the

365
00:15:57,759 --> 00:16:00,560
response buffer and there is a chance

366
00:16:00,560 --> 00:16:01,839
that

367
00:16:01,839 --> 00:16:03,680
it will not get

368
00:16:03,680 --> 00:16:05,680
modified and will be returned to the

369
00:16:05,680 --> 00:16:07,199
user

370
00:16:07,199 --> 00:16:09,279
so what if

371
00:16:09,279 --> 00:16:11,440
this part of the command platform

372
00:16:11,440 --> 00:16:14,160
happens to hold

373
00:16:14,160 --> 00:16:15,759
the visual drives

374
00:16:15,759 --> 00:16:18,399
of a shared buffer

375
00:16:18,399 --> 00:16:20,560
let's see what will happen

376
00:16:20,560 --> 00:16:23,600
as you user space to kernel and the

377
00:16:23,600 --> 00:16:25,839
kernel to the ta

378
00:16:25,839 --> 00:16:28,560
it will do the translation and here will

379
00:16:28,560 --> 00:16:29,680
return

380
00:16:29,680 --> 00:16:31,440
where there is a buffer

381
00:16:31,440 --> 00:16:32,480
field

382
00:16:32,480 --> 00:16:33,090
and

383
00:16:33,090 --> 00:16:35,120
[Music]

384
00:16:35,120 --> 00:16:37,120
the video we want is copied to the

385
00:16:37,120 --> 00:16:39,519
received buffer and finally the kernel

386
00:16:39,519 --> 00:16:42,720
will return to the user's base and guide

387
00:16:42,720 --> 00:16:46,480
the physical address mapped out however

388
00:16:46,480 --> 00:16:49,120
a copy of it is left on the receive

389
00:16:49,120 --> 00:16:50,720
buffer

390
00:16:50,720 --> 00:16:52,959
so

391
00:16:53,120 --> 00:16:54,560
this is the second

392
00:16:54,560 --> 00:16:56,800
second vulnerability

393
00:16:56,800 --> 00:16:59,600
it can leave the physical drives of the

394
00:16:59,600 --> 00:17:01,440
shared buffer and

395
00:17:01,440 --> 00:17:03,440
there are other

396
00:17:03,440 --> 00:17:05,119
similar

397
00:17:05,119 --> 00:17:07,679
functions that will have this

398
00:17:07,679 --> 00:17:09,280
similar

399
00:17:09,280 --> 00:17:10,630
similar situation

400
00:17:10,630 --> 00:17:11,919
[Music]

401
00:17:11,919 --> 00:17:13,199
so

402
00:17:13,199 --> 00:17:15,599
we have know the drives of ta and the

403
00:17:15,599 --> 00:17:17,280
shared buffers

404
00:17:17,280 --> 00:17:19,919
so we need to find a memory layout that

405
00:17:19,919 --> 00:17:21,039
can

406
00:17:21,039 --> 00:17:24,079
that has utilized this

407
00:17:24,079 --> 00:17:26,799
probability

408
00:17:27,599 --> 00:17:29,679
well we have tried many

409
00:17:29,679 --> 00:17:30,960
approaches

410
00:17:30,960 --> 00:17:33,919
many models many plants but

411
00:17:33,919 --> 00:17:38,320
they all have their own limitations

412
00:17:38,320 --> 00:17:40,240
here are my

413
00:17:40,240 --> 00:17:43,280
some of my failed

414
00:17:43,360 --> 00:17:45,360
attempts

415
00:17:45,360 --> 00:17:49,520
here we need a very huge buffer range

416
00:17:49,520 --> 00:17:51,600
that

417
00:17:51,600 --> 00:17:55,679
will contain the input buffer and it has

418
00:17:55,679 --> 00:17:56,960
an offset

419
00:17:56,960 --> 00:17:59,600
and a decoration buffer and it plus an

420
00:17:59,600 --> 00:18:03,039
offset will reach the ta and the

421
00:18:03,039 --> 00:18:05,520
memory copy will happen this way

422
00:18:05,520 --> 00:18:07,280
you will need

423
00:18:07,280 --> 00:18:10,559
at least three buffers

424
00:18:12,400 --> 00:18:16,240
then to reduce the usage of huge buffer

425
00:18:16,240 --> 00:18:18,720
we come up with this

426
00:18:18,720 --> 00:18:21,120
we just need a very small range of our

427
00:18:21,120 --> 00:18:22,799
buffer and

428
00:18:22,799 --> 00:18:24,400
realize the

429
00:18:24,400 --> 00:18:26,320
entry background

430
00:18:26,320 --> 00:18:29,039
buffer here and the mmm copy will happen

431
00:18:29,039 --> 00:18:29,390
from

432
00:18:29,390 --> 00:18:31,440
[Music]

433
00:18:31,440 --> 00:18:34,160
the ta to the ta oh

434
00:18:34,160 --> 00:18:36,000
however as we

435
00:18:36,000 --> 00:18:37,919
don't have

436
00:18:37,919 --> 00:18:40,160
the

437
00:18:41,039 --> 00:18:42,480
method to

438
00:18:42,480 --> 00:18:44,320
control the ta

439
00:18:44,320 --> 00:18:46,080
we will

440
00:18:46,080 --> 00:18:49,440
need to find um up to

441
00:18:49,440 --> 00:18:52,000
256

442
00:18:52,000 --> 00:18:54,080
variants

443
00:18:54,080 --> 00:18:57,200
we need this much different

444
00:18:57,200 --> 00:18:58,160
bytes

445
00:18:58,160 --> 00:19:02,240
of different volume so we can do and

446
00:19:02,240 --> 00:19:04,480
have it absolutely bad

447
00:19:04,480 --> 00:19:05,840
right

448
00:19:05,840 --> 00:19:09,600
it's also very difficult

449
00:19:09,600 --> 00:19:12,400
and then the sandwich layout

450
00:19:12,400 --> 00:19:13,360
will

451
00:19:13,360 --> 00:19:14,720
let it hear

452
00:19:14,720 --> 00:19:17,919
between the encryption buffer and the

453
00:19:17,919 --> 00:19:20,320
decryption battery and the main problem

454
00:19:20,320 --> 00:19:22,080
will happen this way

455
00:19:22,080 --> 00:19:24,720
but it may need

456
00:19:24,720 --> 00:19:25,600
about

457
00:19:25,600 --> 00:19:29,120
three or four buffers

458
00:19:29,120 --> 00:19:32,080
of this plant have failed

459
00:19:32,080 --> 00:19:34,240
but why firstly

460
00:19:34,240 --> 00:19:36,840
we use the

461
00:19:36,840 --> 00:19:38,720
cnc command

462
00:19:38,720 --> 00:19:41,200
is have availability

463
00:19:41,200 --> 00:19:42,240
and

464
00:19:42,240 --> 00:19:43,039
the

465
00:19:43,039 --> 00:19:45,600
buffer should get mapped

466
00:19:45,600 --> 00:19:49,679
to the tpt before get used

467
00:19:49,679 --> 00:19:53,360
well the cnc command will only register

468
00:19:53,360 --> 00:19:54,720
up to

469
00:19:54,720 --> 00:19:56,559
two buffers

470
00:19:56,559 --> 00:19:58,640
so

471
00:19:58,640 --> 00:19:59,840
plans

472
00:19:59,840 --> 00:20:02,080
using more than two buffers

473
00:20:02,080 --> 00:20:03,679
are not

474
00:20:03,679 --> 00:20:06,480
not possible so

475
00:20:06,480 --> 00:20:07,760
and

476
00:20:07,760 --> 00:20:09,760
also

477
00:20:09,760 --> 00:20:12,480
even we have a way to

478
00:20:12,480 --> 00:20:15,679
get the physical drives of an ion shared

479
00:20:15,679 --> 00:20:17,360
buffer

480
00:20:17,360 --> 00:20:20,720
it doesn't mean that we can locate

481
00:20:20,720 --> 00:20:23,840
our buffer with any physical drives

482
00:20:23,840 --> 00:20:24,880
actually

483
00:20:24,880 --> 00:20:27,840
the ion buffer have many limitations

484
00:20:27,840 --> 00:20:28,799
and

485
00:20:28,799 --> 00:20:30,880
the buffers are covered out

486
00:20:30,880 --> 00:20:31,679
from

487
00:20:31,679 --> 00:20:32,640
heaps

488
00:20:32,640 --> 00:20:35,360
and here is how the heaps are defined

489
00:20:35,360 --> 00:20:36,799
and

490
00:20:36,799 --> 00:20:40,159
only part of them are accepted by the

491
00:20:40,159 --> 00:20:41,840
qte so

492
00:20:41,840 --> 00:20:44,640
we have many we don't have many

493
00:20:44,640 --> 00:20:46,840
candidates to select

494
00:20:46,840 --> 00:20:51,280
from makes it very difficult to

495
00:20:51,280 --> 00:20:53,360
find a way

496
00:20:53,360 --> 00:20:56,799
and finally we got this one

497
00:20:56,799 --> 00:21:00,240
and called ola overlapping layout

498
00:21:00,240 --> 00:21:02,880
and we will let the integration buffer

499
00:21:02,880 --> 00:21:04,799
plus is offset

500
00:21:04,799 --> 00:21:07,280
equals to the decreased decryption

501
00:21:07,280 --> 00:21:09,679
buffer and the decryption buffer plus

502
00:21:09,679 --> 00:21:12,480
and offset will reach the ta well in

503
00:21:12,480 --> 00:21:14,240
this

504
00:21:14,240 --> 00:21:18,000
in this memory layout

505
00:21:18,000 --> 00:21:21,200
we only need two buffers and this ion

506
00:21:21,200 --> 00:21:24,480
buffering is relatively small enough

507
00:21:24,480 --> 00:21:25,440
that

508
00:21:25,440 --> 00:21:27,760
so that we can

509
00:21:27,760 --> 00:21:28,960
let it

510
00:21:28,960 --> 00:21:31,600
fit in one of the

511
00:21:31,600 --> 00:21:35,679
cigars memories basically we can get

512
00:21:35,679 --> 00:21:39,600
and also with this memory layout

513
00:21:39,600 --> 00:21:42,159
it's very easy to make read and write

514
00:21:42,159 --> 00:21:45,440
primitives we just need to survive the

515
00:21:45,440 --> 00:21:49,760
incredible buffer and decrypt buffer

516
00:21:49,840 --> 00:21:54,639
so we have got everything and we have

517
00:21:54,799 --> 00:21:56,840
read and write

518
00:21:56,840 --> 00:22:00,559
primitive it's time to post shell i

519
00:22:00,559 --> 00:22:04,559
think but however in the tvs there

520
00:22:04,559 --> 00:22:08,720
is no cell nor calculators to pop

521
00:22:08,720 --> 00:22:10,960
so what should we do to show that we

522
00:22:10,960 --> 00:22:14,159
have achieved

523
00:22:14,159 --> 00:22:15,520
exploit

524
00:22:15,520 --> 00:22:18,000
and i find this is themes that the

525
00:22:18,000 --> 00:22:19,440
winners

526
00:22:19,440 --> 00:22:22,799
values high value target heavy load data

527
00:22:22,799 --> 00:22:26,559
is filtration as well as code execution

528
00:22:26,559 --> 00:22:30,159
so i think we can use code execution to

529
00:22:30,159 --> 00:22:32,480
exfiltrate

530
00:22:32,480 --> 00:22:37,039
evolute data from the bottom line

531
00:22:37,039 --> 00:22:40,840
here is the victim

532
00:22:41,360 --> 00:22:42,480
the

533
00:22:42,480 --> 00:22:45,520
device id function which will open and

534
00:22:45,520 --> 00:22:47,039
read content

535
00:22:47,039 --> 00:22:49,280
from

536
00:22:49,440 --> 00:22:51,840
sffs file

537
00:22:51,840 --> 00:22:52,799
and

538
00:22:52,799 --> 00:22:55,840
copy this content to and

539
00:22:55,840 --> 00:22:57,600
my lock the

540
00:22:57,600 --> 00:23:00,080
buffer

541
00:23:00,080 --> 00:23:00,960
also

542
00:23:00,960 --> 00:23:02,960
its

543
00:23:02,960 --> 00:23:06,480
file packs is read from the

544
00:23:06,480 --> 00:23:08,159
global

545
00:23:08,159 --> 00:23:11,760
global offsite which can be controlled

546
00:23:11,760 --> 00:23:14,559
by us so we can use it to read

547
00:23:14,559 --> 00:23:16,960
any

548
00:23:16,960 --> 00:23:18,240
any

549
00:23:18,240 --> 00:23:20,400
secure file system

550
00:23:20,400 --> 00:23:23,600
file available

551
00:23:23,600 --> 00:23:26,480
we need to hijack the qc mail log

552
00:23:26,480 --> 00:23:29,760
function with this get robo needs

553
00:23:29,760 --> 00:23:32,559
version function and this function will

554
00:23:32,559 --> 00:23:35,360
return a value

555
00:23:35,360 --> 00:23:38,640
on the global region

556
00:23:38,640 --> 00:23:40,320
which is also

557
00:23:40,320 --> 00:23:42,240
controllable from

558
00:23:42,240 --> 00:23:44,320
with our

559
00:23:44,320 --> 00:23:47,520
right primitive we can let this function

560
00:23:47,520 --> 00:23:50,960
return a video we want that

561
00:23:50,960 --> 00:23:53,600
maybe a pointer point to

562
00:23:53,600 --> 00:23:56,960
a place that we can recharge

563
00:23:56,960 --> 00:23:58,320
so

564
00:23:58,320 --> 00:24:01,120
when mem mem copy when the melody

565
00:24:01,120 --> 00:24:05,360
happens it will be located

566
00:24:05,360 --> 00:24:08,159
it will return a buffer located in the

567
00:24:08,159 --> 00:24:09,919
global region

568
00:24:09,919 --> 00:24:13,039
that is readable for earth and then the

569
00:24:13,039 --> 00:24:14,880
file content will be copied to that

570
00:24:14,880 --> 00:24:17,880
place

571
00:24:18,000 --> 00:24:20,720
and finally we'll use a red primitive to

572
00:24:20,720 --> 00:24:22,159
retrieve the

573
00:24:22,159 --> 00:24:26,240
file content from that location

574
00:24:26,240 --> 00:24:28,720
and here is a demo

575
00:24:28,720 --> 00:24:32,320
now since the aslr bypass is 10

576
00:24:32,320 --> 00:24:35,440
consuming so i just

577
00:24:35,440 --> 00:24:39,440
paste a screenshot here

578
00:24:39,840 --> 00:24:43,360
and finally the closing source

579
00:24:43,360 --> 00:24:47,840
firstly as in as a developer

580
00:24:48,640 --> 00:24:50,000
i think

581
00:24:50,000 --> 00:24:52,720
metadata and the data

582
00:24:52,720 --> 00:24:55,600
when they are that they got separated it

583
00:24:55,600 --> 00:24:57,600
is very difficult to trace their

584
00:24:57,600 --> 00:24:58,799
relation

585
00:24:58,799 --> 00:25:00,400
and will

586
00:25:00,400 --> 00:25:01,520
cause

587
00:25:01,520 --> 00:25:05,679
some errors custom vulnerabilities

588
00:25:05,679 --> 00:25:06,960
and

589
00:25:06,960 --> 00:25:09,679
also i think

590
00:25:09,679 --> 00:25:12,240
it's not a good habit to

591
00:25:12,240 --> 00:25:15,679
use a buffer that will be returned to

592
00:25:15,679 --> 00:25:19,279
the user as a temporary place to store

593
00:25:19,279 --> 00:25:23,760
its important data or whatever

594
00:25:23,840 --> 00:25:25,840
some transient

595
00:25:25,840 --> 00:25:29,360
data or whatever even you think that you

596
00:25:29,360 --> 00:25:30,960
invest them out

597
00:25:30,960 --> 00:25:33,039
is not a good habit

598
00:25:33,039 --> 00:25:36,080
what if you forget to wrap them up there

599
00:25:36,080 --> 00:25:39,679
will be a information leakage

600
00:25:39,679 --> 00:25:44,400
and as a security researcher i think

601
00:25:44,400 --> 00:25:49,440
to explore and to understand system

602
00:25:49,440 --> 00:25:54,640
so close sourced as the qte

603
00:25:54,640 --> 00:25:57,440
anna it's very difficult so

604
00:25:57,440 --> 00:26:01,120
i use a hypothesis and

605
00:26:01,120 --> 00:26:04,000
verification workflow i make some

606
00:26:04,000 --> 00:26:07,120
assumption and make some guests and i

607
00:26:07,120 --> 00:26:09,679
make a experiment

608
00:26:09,679 --> 00:26:10,640
and

609
00:26:10,640 --> 00:26:13,520
do the experiment and take a look at the

610
00:26:13,520 --> 00:26:15,200
return value

611
00:26:15,200 --> 00:26:19,520
to see if our hypothesis is right

612
00:26:19,520 --> 00:26:21,440
with this function

613
00:26:21,440 --> 00:26:22,159
i

614
00:26:22,159 --> 00:26:24,400
i'll find the internal

615
00:26:24,400 --> 00:26:27,919
logic of the session

616
00:26:28,960 --> 00:26:30,480
and

617
00:26:30,480 --> 00:26:32,640
these are the people i want to say

618
00:26:32,640 --> 00:26:34,080
thanks to

619
00:26:34,080 --> 00:26:35,279
and

620
00:26:35,279 --> 00:26:39,200
i also need to stand to you my audience

621
00:26:39,200 --> 00:26:41,200
thank you for your time

622
00:26:41,200 --> 00:26:42,080
and

623
00:26:42,080 --> 00:26:45,039
that's all of my presentation

624
00:26:45,039 --> 00:26:48,039
thanks

