1
00:00:01,130 --> 00:00:14,690
[Music]

2
00:00:15,920 --> 00:00:19,600
hi everyone my name is sausage

3
00:00:19,600 --> 00:00:22,320
i am security researcher at the tencent

4
00:00:22,320 --> 00:00:24,240
security lab

5
00:00:24,240 --> 00:00:27,119
and our security architecture for the

6
00:00:27,119 --> 00:00:31,840
energy international mobile application

7
00:00:33,760 --> 00:00:37,600
hi i'm johan a security researcher and

8
00:00:37,600 --> 00:00:40,800
the head of attention security life of

9
00:00:40,800 --> 00:00:43,800
anti-growth

10
00:00:48,559 --> 00:00:51,360
the rpc protocol is called remote

11
00:00:51,360 --> 00:00:54,480
produce core and currently such a

12
00:00:54,480 --> 00:00:57,360
protocol has been applied to a large

13
00:00:57,360 --> 00:00:59,760
number of internet mobile applications

14
00:00:59,760 --> 00:01:01,600
and iot device

15
00:01:01,600 --> 00:01:04,400
the advantage of the protocol is that

16
00:01:04,400 --> 00:01:06,240
it's a cs mode

17
00:01:06,240 --> 00:01:08,159
communication process

18
00:01:08,159 --> 00:01:10,720
the application only needs to know the

19
00:01:10,720 --> 00:01:13,439
name of the remote survives and the

20
00:01:13,439 --> 00:01:16,080
input parameter for accessing the remote

21
00:01:16,080 --> 00:01:18,640
service to obtain the resource of the

22
00:01:18,640 --> 00:01:19,759
server

23
00:01:19,759 --> 00:01:21,360
for developer

24
00:01:21,360 --> 00:01:24,240
this calling process doesn't need to pay

25
00:01:24,240 --> 00:01:28,880
attention to issues such as ip port pass

26
00:01:28,880 --> 00:01:31,360
just like accessing a local api

27
00:01:31,360 --> 00:01:33,920
interface

28
00:01:37,360 --> 00:01:40,880
the jrpc feature jpc is a highly

29
00:01:40,880 --> 00:01:44,079
valuable network communication framework

30
00:01:44,079 --> 00:01:46,399
provided by google which allow

31
00:01:46,399 --> 00:01:48,640
application to call service

32
00:01:48,640 --> 00:01:51,119
interface like local interface

33
00:01:51,119 --> 00:01:54,479
in the jrpg protocol that use the http 2

34
00:01:54,479 --> 00:01:57,520
version the network stream is directly

35
00:01:57,520 --> 00:02:00,320
transmitted through the tcp protocol

36
00:02:00,320 --> 00:02:03,520
which reduce the network overhead of the

37
00:02:03,520 --> 00:02:07,280
continuous tcp handshake in http and

38
00:02:07,280 --> 00:02:10,239
make the network transmission faster

39
00:02:10,239 --> 00:02:13,440
in grpc application you already use

40
00:02:13,440 --> 00:02:17,440
protobuf sterilized data format

41
00:02:17,440 --> 00:02:20,640
this has the advantage of being able to

42
00:02:20,640 --> 00:02:22,800
compress network date during

43
00:02:22,800 --> 00:02:25,840
transmission and flexible updated date

44
00:02:25,840 --> 00:02:28,480
format in the network date

45
00:02:28,480 --> 00:02:31,840
because of the attribute this makes the

46
00:02:31,840 --> 00:02:34,480
analyze of security personnel

47
00:02:34,480 --> 00:02:39,280
no longer as simple as in the past

48
00:02:40,160 --> 00:02:43,200
undoubtedly this increased the cost

49
00:02:43,200 --> 00:02:46,400
attack on application network interface

50
00:02:46,400 --> 00:02:50,920
but it is not undistractible

51
00:02:54,400 --> 00:02:57,440
in this briefing we propose a method

52
00:02:57,440 --> 00:03:00,400
that can automatically exploit

53
00:03:00,400 --> 00:03:02,640
the vulnerability in the server

54
00:03:02,640 --> 00:03:05,840
interface for application that use the

55
00:03:05,840 --> 00:03:09,040
grpc protocol

56
00:03:09,200 --> 00:03:11,599
in the past period of time

57
00:03:11,599 --> 00:03:14,000
through reverse analyze we have

58
00:03:14,000 --> 00:03:16,879
developed a set of vulnerability mining

59
00:03:16,879 --> 00:03:21,440
method can be almost for automated for

60
00:03:21,440 --> 00:03:24,480
mobile application and iot device

61
00:03:24,480 --> 00:03:27,480
according to static dozen of security

62
00:03:27,480 --> 00:03:30,080
vulnerabilities can be found almost

63
00:03:30,080 --> 00:03:33,480
every month

64
00:03:34,239 --> 00:03:36,959
from the developer perspective it is

65
00:03:36,959 --> 00:03:39,519
believed that the application itself

66
00:03:39,519 --> 00:03:41,760
will carry out various security

67
00:03:41,760 --> 00:03:43,519
protection measures

68
00:03:43,519 --> 00:03:46,879
so that the network requests in it from

69
00:03:46,879 --> 00:03:48,080
the client

70
00:03:48,080 --> 00:03:49,760
is incredible

71
00:03:49,760 --> 00:03:51,920
however from the

72
00:03:51,920 --> 00:03:54,720
perspective of an attacker various

73
00:03:54,720 --> 00:03:58,000
mechanisms on the client side can bypass

74
00:03:58,000 --> 00:04:01,040
the local security logic through reverse

75
00:04:01,040 --> 00:04:03,920
engineer and the hook method

76
00:04:03,920 --> 00:04:06,720
thereby fake reasonable request to

77
00:04:06,720 --> 00:04:09,360
attack the server side

78
00:04:09,360 --> 00:04:12,879
as decrypted as description in game of

79
00:04:12,879 --> 00:04:14,480
thrones

80
00:04:14,480 --> 00:04:17,040
people think that is a great war can

81
00:04:17,040 --> 00:04:20,079
withstand the ghost but they didn't not

82
00:04:20,079 --> 00:04:24,960
expect to be destroyed by the ice dragon

83
00:04:25,840 --> 00:04:27,840
if you need to

84
00:04:27,840 --> 00:04:30,400
conduct automatic

85
00:04:30,400 --> 00:04:33,040
vulnerability mining and the application

86
00:04:33,040 --> 00:04:36,320
of the grpc protocol on a large scale

87
00:04:36,320 --> 00:04:39,199
on the one hand you need to be able to

88
00:04:39,199 --> 00:04:41,759
bypass the security mechanism on the

89
00:04:41,759 --> 00:04:44,400
mobile application

90
00:04:44,400 --> 00:04:46,960
there is a certain amount of reverse

91
00:04:46,960 --> 00:04:51,040
engineer job and developer inject code

92
00:04:51,040 --> 00:04:54,479
to bypass the application logic

93
00:04:54,479 --> 00:04:57,440
on the other hand we need a large number

94
00:04:57,440 --> 00:05:01,039
of data set to analyze which valid data

95
00:05:01,039 --> 00:05:02,720
is our focus

96
00:05:02,720 --> 00:05:06,320
finally we need to build our own

97
00:05:06,320 --> 00:05:09,360
original four different data feature

98
00:05:09,360 --> 00:05:12,960
implant payload for testing remote grpc

99
00:05:12,960 --> 00:05:15,440
service

100
00:05:17,680 --> 00:05:21,039
we use id python to analyze the core

101
00:05:21,039 --> 00:05:24,479
relationship of jrpc in the binary it

102
00:05:24,479 --> 00:05:27,600
should be note that because we use the

103
00:05:27,600 --> 00:05:28,720
required

104
00:05:28,720 --> 00:05:31,360
recursive method to query through the

105
00:05:31,360 --> 00:05:34,400
relation function of ida python

106
00:05:34,400 --> 00:05:37,280
we need to constantly check whether

107
00:05:37,280 --> 00:05:40,000
there will be arrow such as judging

108
00:05:40,000 --> 00:05:42,880
uncertain whether the method is actually

109
00:05:42,880 --> 00:05:45,440
called by the function corresponding to

110
00:05:45,440 --> 00:05:48,800
a certain class name otherwise there may

111
00:05:48,800 --> 00:05:50,240
be more

112
00:05:50,240 --> 00:05:54,320
force positive therefore we set a state

113
00:05:54,320 --> 00:05:58,080
for each level of core when entering a

114
00:05:58,080 --> 00:06:02,080
level of or relationship a push state

115
00:06:02,080 --> 00:06:05,520
will be record and recording deep when

116
00:06:05,520 --> 00:06:06,560
according

117
00:06:06,560 --> 00:06:07,840
is passed

118
00:06:07,840 --> 00:06:10,880
we will use the pop state to perform a

119
00:06:10,880 --> 00:06:11,840
level

120
00:06:11,840 --> 00:06:15,120
layer back trace until it returns to the

121
00:06:15,120 --> 00:06:18,880
root node and then processed to the next

122
00:06:18,880 --> 00:06:21,360
question analyze

123
00:06:21,360 --> 00:06:23,919
in this way when we look up to the

124
00:06:23,919 --> 00:06:26,880
quotient with several

125
00:06:26,880 --> 00:06:29,440
grpc functions we can find that

126
00:06:29,440 --> 00:06:32,000
different according exist at the leaf

127
00:06:32,000 --> 00:06:35,280
node which may come from the same class

128
00:06:35,280 --> 00:06:38,560
or the same method so as to obtain the

129
00:06:38,560 --> 00:06:43,319
encapture jrpc protocol method

130
00:06:48,000 --> 00:06:49,840
um

131
00:06:49,840 --> 00:06:52,560
we need to recognize grpc logic and

132
00:06:52,560 --> 00:06:56,160
inter uh interception grpc request

133
00:06:56,160 --> 00:06:59,680
the step one is through id python we can

134
00:06:59,680 --> 00:07:02,400
quickly help us to locate the network

135
00:07:02,400 --> 00:07:06,560
the network library that in capturing

136
00:07:06,560 --> 00:07:09,919
grpc other in this time we need to

137
00:07:09,919 --> 00:07:13,039
develop a generate dynamic library model

138
00:07:13,039 --> 00:07:16,400
to intercept string intercept to

139
00:07:16,400 --> 00:07:18,800
execution of grpc

140
00:07:18,800 --> 00:07:22,000
the step 2 is obtain the jrpc method

141
00:07:22,000 --> 00:07:23,199
name

142
00:07:23,199 --> 00:07:25,759
original protobuf date

143
00:07:25,759 --> 00:07:28,639
and held a header field and the

144
00:07:28,639 --> 00:07:32,319
extension field corresponding to jrpc

145
00:07:32,319 --> 00:07:35,520
through the grpc in capture

146
00:07:35,520 --> 00:07:40,080
function of the hook network library

147
00:07:40,560 --> 00:07:43,800
need attention to some of applications

148
00:07:43,800 --> 00:07:47,599
independent security model is added for

149
00:07:47,599 --> 00:07:49,919
some security protection

150
00:07:49,919 --> 00:07:53,039
in order to complete the jrpc date

151
00:07:53,039 --> 00:07:56,560
replay ability we need to build a

152
00:07:56,560 --> 00:07:59,360
reasonable signature and hide the memory

153
00:07:59,360 --> 00:08:00,400
model

154
00:08:00,400 --> 00:08:03,280
for the structure of the signature

155
00:08:03,280 --> 00:08:06,319
we usually call it through reflection

156
00:08:06,319 --> 00:08:08,000
invoke method

157
00:08:08,000 --> 00:08:10,720
the content of the data part is passed

158
00:08:10,720 --> 00:08:13,199
to the api interface of the

159
00:08:13,199 --> 00:08:16,080
corresponding model to obtain a valid

160
00:08:16,080 --> 00:08:17,520
signature

161
00:08:17,520 --> 00:08:19,759
to prevent environment

162
00:08:19,759 --> 00:08:22,479
environment security detection

163
00:08:22,479 --> 00:08:25,759
we usually hook in some memory function

164
00:08:25,759 --> 00:08:28,800
when the name of the e

165
00:08:28,800 --> 00:08:30,639
in emulate

166
00:08:30,639 --> 00:08:34,320
memory model is equal to the name of the

167
00:08:34,320 --> 00:08:37,200
model we injected we will return the

168
00:08:37,200 --> 00:08:39,519
name of our system model

169
00:08:39,519 --> 00:08:40,880
as shown in the

170
00:08:40,880 --> 00:08:42,640
figure we

171
00:08:42,640 --> 00:08:45,920
emulate a model on our side

172
00:08:45,920 --> 00:08:48,560
that filters the self model name through

173
00:08:48,560 --> 00:08:52,000
the method of delt getting magic names

174
00:08:52,000 --> 00:08:55,000
function

175
00:08:56,320 --> 00:08:57,279
the

176
00:08:57,279 --> 00:09:00,560
reply ability construction

177
00:09:00,560 --> 00:09:02,240
in order for us

178
00:09:02,240 --> 00:09:04,240
to schedule different applications to

179
00:09:04,240 --> 00:09:08,080
reply grpc requests more easily in the

180
00:09:08,080 --> 00:09:09,760
last stage

181
00:09:09,760 --> 00:09:12,560
we need to build a getaway on a server

182
00:09:12,560 --> 00:09:15,120
and let different devices register the

183
00:09:15,120 --> 00:09:18,000
getaway on the client

184
00:09:18,000 --> 00:09:20,880
there will be a heartbeat communication

185
00:09:20,880 --> 00:09:24,399
model that tells the getaway its own the

186
00:09:24,399 --> 00:09:27,600
device model device id and some basic

187
00:09:27,600 --> 00:09:30,240
information about the application

188
00:09:30,240 --> 00:09:32,399
another server will store this

189
00:09:32,399 --> 00:09:33,839
information

190
00:09:33,839 --> 00:09:37,120
at the same time we provide a set of

191
00:09:37,120 --> 00:09:40,560
python script for to provide

192
00:09:40,560 --> 00:09:43,440
a fuzzing a program that can schedule

193
00:09:43,440 --> 00:09:46,640
remote machine in real time for grpc

194
00:09:46,640 --> 00:09:48,839
real-time network requests and

195
00:09:48,839 --> 00:09:53,670
communication and i get a response date

196
00:09:53,670 --> 00:09:56,809
[Music]

197
00:09:57,839 --> 00:09:59,120
another

198
00:09:59,120 --> 00:10:02,079
point to note is that the

199
00:10:02,079 --> 00:10:05,279
order to make the reply ability relative

200
00:10:05,279 --> 00:10:08,480
stable we have add a payment process to

201
00:10:08,480 --> 00:10:10,480
protect the mo and monitor the

202
00:10:10,480 --> 00:10:13,279
application of the reply device

203
00:10:13,279 --> 00:10:16,000
on the android side we use the adb

204
00:10:16,000 --> 00:10:18,560
command to monitor whether the process

205
00:10:18,560 --> 00:10:22,240
is terminated and if it is terminated it

206
00:10:22,240 --> 00:10:24,480
will be re-awakened

207
00:10:24,480 --> 00:10:26,800
for ios we will

208
00:10:26,800 --> 00:10:29,440
register a damn process to notify the

209
00:10:29,440 --> 00:10:32,399
process through notification center get

210
00:10:32,399 --> 00:10:34,480
there will notify center

211
00:10:34,480 --> 00:10:35,680
method

212
00:10:35,680 --> 00:10:38,880
when the process is about to die

213
00:10:38,880 --> 00:10:41,360
we will notify the demon through a

214
00:10:41,360 --> 00:10:46,360
message to tell the process to restart

215
00:10:47,040 --> 00:10:48,640
it is

216
00:10:48,640 --> 00:10:51,600
conceivable that different device and

217
00:10:51,600 --> 00:10:54,240
application will have the function of a

218
00:10:54,240 --> 00:10:57,040
mount london if the device is not

219
00:10:57,040 --> 00:11:00,000
linking in there will be access future

220
00:11:00,000 --> 00:11:03,120
during jrpc request replay for

221
00:11:03,120 --> 00:11:04,320
journalities

222
00:11:04,320 --> 00:11:06,880
because the london process is also

223
00:11:06,880 --> 00:11:10,240
implemented with the grpc protocol we

224
00:11:10,240 --> 00:11:13,040
can simulate the jrpc method of the

225
00:11:13,040 --> 00:11:14,399
linking request

226
00:11:14,399 --> 00:11:18,079
with a pre-made test account

227
00:11:18,079 --> 00:11:20,640
another option are temporary lincoln

228
00:11:20,640 --> 00:11:23,640
sessions

229
00:11:30,399 --> 00:11:33,040
okay i will introduce the data

230
00:11:33,040 --> 00:11:36,399
acquisition parts and analysis

231
00:11:36,399 --> 00:11:39,440
first of all we need to get a sufficient

232
00:11:39,440 --> 00:11:42,320
amount of grpc traffic with a large

233
00:11:42,320 --> 00:11:43,920
coverage rate

234
00:11:43,920 --> 00:11:46,079
if you plan to test your over

235
00:11:46,079 --> 00:11:49,360
application you can get desynthesized

236
00:11:49,360 --> 00:11:52,639
the rpc traffic as the traffic hub on

237
00:11:52,639 --> 00:11:54,000
the gateway

238
00:11:54,000 --> 00:11:56,079
if you plan to test third party

239
00:11:56,079 --> 00:11:57,440
applications

240
00:11:57,440 --> 00:12:00,160
you can obtain the

241
00:12:00,160 --> 00:12:03,440
grpc traffic data by hooking the target

242
00:12:03,440 --> 00:12:05,839
client

243
00:12:08,480 --> 00:12:12,000
if the data you got is in protobuf for

244
00:12:12,000 --> 00:12:15,680
for if if the data

245
00:12:15,680 --> 00:12:18,880
if the data you get is improved above

246
00:12:18,880 --> 00:12:20,000
format

247
00:12:20,000 --> 00:12:23,440
the k in the original data k value pair

248
00:12:23,440 --> 00:12:25,440
will be removed

249
00:12:25,440 --> 00:12:28,160
even if we don't have the original pb

250
00:12:28,160 --> 00:12:29,200
class

251
00:12:29,200 --> 00:12:31,760
we can still get the value information

252
00:12:31,760 --> 00:12:35,440
through the reverse analysis method

253
00:12:35,440 --> 00:12:38,720
and mark the value information to form a

254
00:12:38,720 --> 00:12:42,480
new usable product buff format

255
00:12:42,480 --> 00:12:43,920
data

256
00:12:43,920 --> 00:12:46,560
and you can get such tools in the open

257
00:12:46,560 --> 00:12:49,959
source community

258
00:12:53,200 --> 00:12:56,160
for the large amount of grpc traffic

259
00:12:56,160 --> 00:12:58,320
data we have obtained

260
00:12:58,320 --> 00:13:01,600
we have adopted a variety of methods to

261
00:13:01,600 --> 00:13:02,959
conduct

262
00:13:02,959 --> 00:13:06,480
sampling to reduce our test work without

263
00:13:06,480 --> 00:13:09,600
losing the information as possible

264
00:13:09,600 --> 00:13:12,480
some holding methods include random

265
00:13:12,480 --> 00:13:15,680
harsh sampling cluster sampling and so

266
00:13:15,680 --> 00:13:17,920
on

267
00:13:19,360 --> 00:13:22,639
in the cluster summary we sample based

268
00:13:22,639 --> 00:13:28,320
on the interface id of hdrpc assembling

269
00:13:28,320 --> 00:13:32,079
to each id is kept basically the same

270
00:13:32,079 --> 00:13:35,440
thereby reduce the influence of the

271
00:13:35,440 --> 00:13:39,040
frequency of gibbs interface in the test

272
00:13:39,040 --> 00:13:41,519
result

273
00:13:45,040 --> 00:13:47,839
at the same time we filter a large

274
00:13:47,839 --> 00:13:51,440
number of gibbs interface ids that

275
00:13:51,440 --> 00:13:54,240
do not have private attributes based on

276
00:13:54,240 --> 00:13:57,760
the entropy value we believe that such a

277
00:13:57,760 --> 00:14:01,040
grp interface will will not have

278
00:14:01,040 --> 00:14:03,440
authorized vulnerabilities

279
00:14:03,440 --> 00:14:08,040
this saves us a lot of work

280
00:14:16,480 --> 00:14:20,000
my colleagues mentioned about

281
00:14:20,000 --> 00:14:22,240
about the privacy of the grpc

282
00:14:22,240 --> 00:14:24,880
calculation method we will open a

283
00:14:24,880 --> 00:14:26,000
private

284
00:14:26,000 --> 00:14:28,639
jrpc interface through the result of

285
00:14:28,639 --> 00:14:32,399
data analyze it can be found that it is

286
00:14:32,399 --> 00:14:35,839
rate close to one the nearly the private

287
00:14:35,839 --> 00:14:38,160
and easy to content the sensitive

288
00:14:38,160 --> 00:14:39,519
information

289
00:14:39,519 --> 00:14:44,399
and if it's rate code close to zero they

290
00:14:44,399 --> 00:14:48,000
are near the public and the content

291
00:14:48,000 --> 00:14:52,720
content may be some server-side public

292
00:14:56,839 --> 00:15:00,240
configuration sorry

293
00:15:00,800 --> 00:15:03,040
so

294
00:15:03,279 --> 00:15:06,560
uh through the sample of date

295
00:15:06,560 --> 00:15:09,120
of this interface analyze whether

296
00:15:09,120 --> 00:15:12,399
sensitive parameters are in cloud

297
00:15:12,399 --> 00:15:14,959
in the response the ruler can be

298
00:15:14,959 --> 00:15:18,320
analyzed through regular inspect

299
00:15:18,320 --> 00:15:21,600
expression a regular expression if there

300
00:15:21,600 --> 00:15:24,399
is sensitive information it will follow

301
00:15:24,399 --> 00:15:27,120
into the next process

302
00:15:27,120 --> 00:15:29,920
analyze the following of the date for

303
00:15:29,920 --> 00:15:33,519
example if the result of the request is

304
00:15:33,519 --> 00:15:36,880
only some involved content such as the

305
00:15:36,880 --> 00:15:42,399
date and some public id it may not be

306
00:15:42,399 --> 00:15:45,759
of much value of course we

307
00:15:45,759 --> 00:15:49,440
will also maintain a global wait list

308
00:15:49,440 --> 00:15:53,839
for subsequent false positives

309
00:15:53,839 --> 00:15:54,720
are

310
00:15:54,720 --> 00:15:56,639
continuous add to

311
00:15:56,639 --> 00:15:59,839
the white list for filtering to prevent

312
00:15:59,839 --> 00:16:03,120
second false positive

313
00:16:03,120 --> 00:16:06,800
if all of above conditions are met

314
00:16:06,800 --> 00:16:09,759
it's beginning to test current grpc

315
00:16:09,759 --> 00:16:12,800
request first we will use the reply

316
00:16:12,800 --> 00:16:15,360
operating tool overturn our valid

317
00:16:15,360 --> 00:16:18,160
language state for the test account

318
00:16:18,160 --> 00:16:21,440
second we need to replace the london

319
00:16:21,440 --> 00:16:25,360
state in grpc date by all test account

320
00:16:25,360 --> 00:16:28,399
finally send the constructor date

321
00:16:28,399 --> 00:16:32,000
package to or corresponding grpc replay

322
00:16:32,000 --> 00:16:35,920
getaway to obtain the response of the

323
00:16:35,920 --> 00:16:38,079
test grpc package

324
00:16:38,079 --> 00:16:41,120
after obtain the response we will

325
00:16:41,120 --> 00:16:43,680
perform simulator analyze on the

326
00:16:43,680 --> 00:16:46,399
response and filter involve experiment

327
00:16:46,399 --> 00:16:49,600
to determine whether it will eventually

328
00:16:49,600 --> 00:16:51,360
fall into manual

329
00:16:51,360 --> 00:16:52,800
verification

330
00:16:52,800 --> 00:16:55,440
if the overturn result is too different

331
00:16:55,440 --> 00:16:59,040
from the original the current jrpc

332
00:16:59,040 --> 00:17:01,440
method following to the whitelist

333
00:17:01,440 --> 00:17:05,839
dimension above for filtering

334
00:17:09,280 --> 00:17:12,799
we will get a better case for logic

335
00:17:12,799 --> 00:17:15,679
bypass vulnerability

336
00:17:15,679 --> 00:17:19,839
this is a real case as i example below

337
00:17:19,839 --> 00:17:23,119
in this request we can see that grpc

338
00:17:23,119 --> 00:17:26,400
server allowed to accept any license

339
00:17:26,400 --> 00:17:30,160
plan number and the phone number so

340
00:17:30,160 --> 00:17:33,840
that when we view in the correlate date

341
00:17:33,840 --> 00:17:36,799
we can see other people's information

342
00:17:36,799 --> 00:17:39,200
and can be modified

343
00:17:39,200 --> 00:17:42,240
the reasons for this vulnerable is that

344
00:17:42,240 --> 00:17:45,280
the server doesn't verify whether the

345
00:17:45,280 --> 00:17:48,640
current user lincoln state has access to

346
00:17:48,640 --> 00:17:51,440
and modified the corresponding business

347
00:17:51,440 --> 00:17:53,600
date

348
00:17:53,600 --> 00:17:57,440
which leads to the risk of logical

349
00:17:57,440 --> 00:18:01,160
authority bypass

350
00:18:04,720 --> 00:18:09,200
the idea of ssrf vulnerable on the jrpc

351
00:18:09,200 --> 00:18:12,160
server is mainly divided into the

352
00:18:12,160 --> 00:18:14,559
following step the first

353
00:18:14,559 --> 00:18:17,840
we need to build a web server

354
00:18:17,840 --> 00:18:21,280
that can receive notification one attack

355
00:18:21,280 --> 00:18:24,960
success the line server will to request

356
00:18:24,960 --> 00:18:28,640
or target server that we can be notified

357
00:18:28,640 --> 00:18:32,160
the real time next we need to analyze

358
00:18:32,160 --> 00:18:35,520
the value in each grpc request to

359
00:18:35,520 --> 00:18:40,720
determine whether field is like http

360
00:18:40,720 --> 00:18:42,559
if it exists

361
00:18:42,559 --> 00:18:46,120
travels each values contain containing

362
00:18:46,120 --> 00:18:50,400
https string and replace it with the

363
00:18:50,400 --> 00:18:53,280
domain name or ipr corresponding to our

364
00:18:53,280 --> 00:18:55,280
web server

365
00:18:55,280 --> 00:18:56,960
and then

366
00:18:56,960 --> 00:19:00,000
you only need to wait for

367
00:19:00,000 --> 00:19:02,960
the web server to receive notific

368
00:19:02,960 --> 00:19:06,799
notification after replay

369
00:19:08,960 --> 00:19:12,559
let's take a look at this case

370
00:19:12,559 --> 00:19:15,440
the request is often a field name

371
00:19:15,440 --> 00:19:17,120
resource url

372
00:19:17,120 --> 00:19:20,080
the corresponding content is like cdn

373
00:19:20,080 --> 00:19:21,520
resource

374
00:19:21,520 --> 00:19:23,120
and we guess

375
00:19:23,120 --> 00:19:25,679
that this picture is probably obtained

376
00:19:25,679 --> 00:19:28,400
by our servers through our http get

377
00:19:28,400 --> 00:19:30,960
request

378
00:19:31,520 --> 00:19:32,400
so

379
00:19:32,400 --> 00:19:36,799
we replace the the resource url with or

380
00:19:36,799 --> 00:19:40,080
web server and finally our web server

381
00:19:40,080 --> 00:19:43,360
actually received our requests from from

382
00:19:43,360 --> 00:19:47,520
ip and the requested url content that

383
00:19:47,520 --> 00:19:50,000
grpc message will

384
00:19:50,000 --> 00:19:52,240
deliberately added

385
00:19:52,240 --> 00:19:54,160
from the core chain

386
00:19:54,160 --> 00:19:57,360
in the figure we find that from the real

387
00:19:57,360 --> 00:20:00,160
attack chain the resource url is

388
00:20:00,160 --> 00:20:03,919
actually passed through multi servers

389
00:20:03,919 --> 00:20:06,480
so it is also the

390
00:20:06,480 --> 00:20:10,400
difficult faced by the enterprise when

391
00:20:10,400 --> 00:20:13,840
an attack payload requests arrive at the

392
00:20:13,840 --> 00:20:14,880
server

393
00:20:14,880 --> 00:20:17,840
any server node may become

394
00:20:17,840 --> 00:20:21,840
the target of attack

395
00:20:28,159 --> 00:20:31,360
in the following explanation

396
00:20:31,360 --> 00:20:34,799
i want to do some other effective

397
00:20:34,799 --> 00:20:36,480
exploit idea

398
00:20:36,480 --> 00:20:38,960
the first i will

399
00:20:38,960 --> 00:20:42,320
introduce a psychoinjection venerable

400
00:20:42,320 --> 00:20:45,840
discovered in our historical situation

401
00:20:45,840 --> 00:20:48,080
in view of the cycle psychoinjection

402
00:20:48,080 --> 00:20:50,720
vulnerable or thinking is that the signs

403
00:20:50,720 --> 00:20:54,799
of most of the jvc date requests are in

404
00:20:54,799 --> 00:20:56,480
json format

405
00:20:56,480 --> 00:21:00,640
we will analyze which field exists query

406
00:21:00,640 --> 00:21:03,120
or modification type

407
00:21:03,120 --> 00:21:05,679
and whether there are sensitive

408
00:21:05,679 --> 00:21:06,380
information

409
00:21:06,380 --> 00:21:07,679
[Music]

410
00:21:07,679 --> 00:21:10,799
there are two main reasons for this on

411
00:21:10,799 --> 00:21:13,039
the one hand there are certain

412
00:21:13,039 --> 00:21:14,320
parameters

413
00:21:14,320 --> 00:21:16,720
that the server may not query in the

414
00:21:16,720 --> 00:21:18,000
database

415
00:21:18,000 --> 00:21:20,799
such as the time url and other

416
00:21:20,799 --> 00:21:22,240
information

417
00:21:22,240 --> 00:21:23,919
under certainly

418
00:21:23,919 --> 00:21:27,120
like some meaningful field it may enter

419
00:21:27,120 --> 00:21:30,000
the query in the business logic or in

420
00:21:30,000 --> 00:21:32,720
the modify cycle statement

421
00:21:32,720 --> 00:21:35,120
the reason why you need to match

422
00:21:35,120 --> 00:21:38,400
sensitive information is because of some

423
00:21:38,400 --> 00:21:41,440
special parameters such as email phone

424
00:21:41,440 --> 00:21:44,320
number and other information when the

425
00:21:44,320 --> 00:21:47,360
condition for cycle injection are meet

426
00:21:47,360 --> 00:21:50,640
then meaning of the obtained date table

427
00:21:50,640 --> 00:21:53,840
is more valuable

428
00:21:55,360 --> 00:21:59,120
after or actually test we conduct a

429
00:21:59,120 --> 00:22:02,480
small skill test on ten of thousands of

430
00:22:02,480 --> 00:22:05,360
grpc interface and found a cycle

431
00:22:05,360 --> 00:22:08,640
injection venerability in one of the

432
00:22:08,640 --> 00:22:10,640
grpd interface

433
00:22:10,640 --> 00:22:13,360
as you can see from the figure

434
00:22:13,360 --> 00:22:16,080
when they perform the cycle injection

435
00:22:16,080 --> 00:22:19,360
testing on the uid date the server

436
00:22:19,360 --> 00:22:22,240
returned the reason for the arrow which

437
00:22:22,240 --> 00:22:25,440
also proved that this location is the

438
00:22:25,440 --> 00:22:30,600
process of executing the cycle

439
00:22:40,559 --> 00:22:43,440
the next case is an interesting

440
00:22:43,440 --> 00:22:46,880
vulnerable in history the course of is a

441
00:22:46,880 --> 00:22:49,679
zip file that can be downloaded remote

442
00:22:49,679 --> 00:22:51,440
in the url

443
00:22:51,440 --> 00:22:55,120
when from this request try to replace it

444
00:22:55,120 --> 00:22:58,320
and with a zip file with a director are

445
00:22:58,320 --> 00:23:02,880
closing vulnerability on the cdn

446
00:23:02,880 --> 00:23:05,120
under replay

447
00:23:05,120 --> 00:23:08,480
and replace this link into the jrpc

448
00:23:08,480 --> 00:23:09,600
request

449
00:23:09,600 --> 00:23:10,880
finally

450
00:23:10,880 --> 00:23:13,280
the server downloads the file and tried

451
00:23:13,280 --> 00:23:15,440
to decompress it

452
00:23:15,440 --> 00:23:19,120
and the file covered the original

453
00:23:19,120 --> 00:23:21,120
base rc file

454
00:23:21,120 --> 00:23:23,840
which causes an inexistent to execute

455
00:23:23,840 --> 00:23:28,360
the shell commanded in the fire

456
00:23:38,880 --> 00:23:42,120
the last case is is remote

457
00:23:42,120 --> 00:23:46,799
vulnerability caused by the log server

458
00:23:46,960 --> 00:23:50,720
at that time we found a stream with type

459
00:23:50,720 --> 00:23:54,240
stringing in a request

460
00:23:54,240 --> 00:23:57,039
and we guessed that the local date might

461
00:23:57,039 --> 00:23:57,880
be

462
00:23:57,880 --> 00:24:01,520
de-serialized by the server therefore we

463
00:24:01,520 --> 00:24:03,440
implant

464
00:24:03,440 --> 00:24:05,760
fast chasing remote command execution

465
00:24:05,760 --> 00:24:07,840
payload in the request

466
00:24:07,840 --> 00:24:11,840
and we wait from a day to night when we

467
00:24:11,840 --> 00:24:15,760
also route it might not be successful we

468
00:24:15,760 --> 00:24:17,039
received

469
00:24:17,039 --> 00:24:20,720
the corresponding result confirmed the

470
00:24:20,720 --> 00:24:25,039
confirming the success of the executing

471
00:24:25,039 --> 00:24:27,039
and the later we can

472
00:24:27,039 --> 00:24:29,840
contact the manufacturer of

473
00:24:29,840 --> 00:24:33,360
understanding the situation because it

474
00:24:33,360 --> 00:24:37,520
is was not the server we attacked it

475
00:24:37,520 --> 00:24:40,400
that finally triggered the security

476
00:24:40,400 --> 00:24:41,520
venerable

477
00:24:41,520 --> 00:24:44,159
vulnerability but because the server

478
00:24:44,159 --> 00:24:47,200
stores the date to the log server and

479
00:24:47,200 --> 00:24:50,799
this log were passed by another server

480
00:24:50,799 --> 00:24:52,559
during the anonymized process

481
00:24:52,559 --> 00:24:54,000
facilitation

482
00:24:54,000 --> 00:24:57,360
december last is used executions

483
00:24:57,360 --> 00:24:59,919
screening with deserialized vulnerable

484
00:24:59,919 --> 00:25:02,960
in the parliament

485
00:25:13,200 --> 00:25:16,240
okay i believe everyone is already very

486
00:25:16,240 --> 00:25:20,320
interested in the actual demo science or

487
00:25:20,320 --> 00:25:23,520
platform involve different component

488
00:25:23,520 --> 00:25:27,200
i have prepared a real demo to explain

489
00:25:27,200 --> 00:25:30,720
to you how we do jrpc network replay

490
00:25:30,720 --> 00:25:33,840
that and data and analyze and how to

491
00:25:33,840 --> 00:25:35,799
handle the

492
00:25:35,799 --> 00:25:39,600
vulnerability i hope you will understand

493
00:25:39,600 --> 00:25:43,840
more after watching it

494
00:25:55,620 --> 00:26:04,539
[Music]

495
00:26:06,910 --> 00:26:45,319
[Music]

496
00:26:49,140 --> 00:26:57,450
[Music]

497
00:27:03,850 --> 00:27:21,240
[Music]

498
00:27:26,850 --> 00:28:13,270
[Music]

499
00:28:15,590 --> 00:28:20,720
[Music]

500
00:28:26,700 --> 00:28:31,789
[Music]

501
00:28:36,460 --> 00:28:40,440
[Music]

502
00:28:47,160 --> 00:28:52,230
[Music]

503
00:28:56,960 --> 00:29:03,280
[Music]

504
00:29:04,000 --> 00:29:07,000
do

505
00:29:10,260 --> 00:29:24,410
[Music]

506
00:29:29,220 --> 00:30:21,130
[Music]

507
00:30:26,130 --> 00:30:29,219
[Music]

508
00:30:34,060 --> 00:30:42,460
[Music]

509
00:30:45,670 --> 00:30:48,859
[Music]

510
00:30:51,279 --> 00:30:54,159
next i will introduce several security

511
00:30:54,159 --> 00:30:56,880
defense methods for applications based

512
00:30:56,880 --> 00:31:01,039
on the grbc protocol

513
00:31:02,640 --> 00:31:06,519
the first introduction

514
00:31:06,799 --> 00:31:08,559
is a valve system

515
00:31:08,559 --> 00:31:11,600
based on the grpc protocol which can

516
00:31:11,600 --> 00:31:15,039
quickly intercept most of known attack

517
00:31:15,039 --> 00:31:19,840
pilots based on the configuration

518
00:31:22,799 --> 00:31:25,600
then there is a cookie isolation we can

519
00:31:25,600 --> 00:31:28,080
start cooking isolation under different

520
00:31:28,080 --> 00:31:30,960
applications to ensure that a single

521
00:31:30,960 --> 00:31:34,080
point of attack cannot affect all

522
00:31:34,080 --> 00:31:36,879
applications

523
00:31:41,279 --> 00:31:44,880
next is the aos difference system

524
00:31:44,880 --> 00:31:48,880
aos aspect of secret is this is a

525
00:31:48,880 --> 00:31:51,840
security defense system proposed by the

526
00:31:51,840 --> 00:31:53,600
security department

527
00:31:53,600 --> 00:31:55,679
of our ant group

528
00:31:55,679 --> 00:31:58,640
based on the aspect thinking

529
00:31:58,640 --> 00:32:01,919
it achieves the decoupling of security

530
00:32:01,919 --> 00:32:05,519
and business logic and realize the

531
00:32:05,519 --> 00:32:08,159
integration of secured into business

532
00:32:08,159 --> 00:32:09,720
logic for

533
00:32:09,720 --> 00:32:14,519
corresponsive security protection

534
00:32:18,159 --> 00:32:21,440
in addition automated upgrades

535
00:32:21,440 --> 00:32:24,720
to the three third party sdk of the

536
00:32:24,720 --> 00:32:26,159
assembly chain

537
00:32:26,159 --> 00:32:30,320
and the unified security authentication

538
00:32:30,320 --> 00:32:32,960
for different application systems can

539
00:32:32,960 --> 00:32:35,279
also help build a more secure

540
00:32:35,279 --> 00:32:37,120
application system

541
00:32:37,120 --> 00:32:41,559
behind the gic protocol

542
00:32:42,559 --> 00:32:43,519
okay

543
00:32:43,519 --> 00:32:45,760
let's have a summary

544
00:32:45,760 --> 00:32:49,360
first in the year of mobile internet a

545
00:32:49,360 --> 00:32:51,760
large number of services rely on the

546
00:32:51,760 --> 00:32:55,279
grpc protocol for data exchange

547
00:32:55,279 --> 00:32:58,399
there is a huge attack surface in the

548
00:32:58,399 --> 00:33:00,799
middle

549
00:33:00,799 --> 00:33:03,840
secondly with the rapid development of

550
00:33:03,840 --> 00:33:05,919
the internet

551
00:33:05,919 --> 00:33:09,279
the grpc protocol has become the basics

552
00:33:09,279 --> 00:33:12,640
of network protocol facilities need to

553
00:33:12,640 --> 00:33:13,840
support

554
00:33:13,840 --> 00:33:17,120
different facilities to avoid external

555
00:33:17,120 --> 00:33:20,799
network security risks

556
00:33:20,799 --> 00:33:24,519
that's all thank you

557
00:33:26,320 --> 00:33:28,399
you

