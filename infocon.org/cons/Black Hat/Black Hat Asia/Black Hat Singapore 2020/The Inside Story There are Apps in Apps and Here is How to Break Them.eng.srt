1
00:00:03,199 --> 00:00:03,520
hi

2
00:00:03,520 --> 00:00:06,319
everyone thank you for coming to my talk

3
00:00:06,319 --> 00:00:08,400
there are apps in apps and here is how

4
00:00:08,400 --> 00:00:10,559
to break them

5
00:00:10,559 --> 00:00:13,200
i'm learning i was previously a

6
00:00:13,200 --> 00:00:14,400
contestant from

7
00:00:14,400 --> 00:00:17,279
many large internet companies and banks

8
00:00:17,279 --> 00:00:17,600
now

9
00:00:17,600 --> 00:00:19,760
i'm a web and android security

10
00:00:19,760 --> 00:00:21,760
researcher are changing security shingle

11
00:00:21,760 --> 00:00:23,199
live

12
00:00:23,199 --> 00:00:26,240
our research fields include android web

13
00:00:26,240 --> 00:00:29,359
windows iot browser etc

14
00:00:29,359 --> 00:00:31,199
and we output many outstanding

15
00:00:31,199 --> 00:00:34,719
achievements such as batano

16
00:00:34,719 --> 00:00:37,760
here is the outline of my top first i

17
00:00:37,760 --> 00:00:38,480
will

18
00:00:38,480 --> 00:00:40,800
show you what's outside and inside there

19
00:00:40,800 --> 00:00:41,920
is night

20
00:00:41,920 --> 00:00:44,559
next i will detail architecture and some

21
00:00:44,559 --> 00:00:45,920
vulnerabilities of

22
00:00:45,920 --> 00:00:48,160
what will be the instant app and native

23
00:00:48,160 --> 00:00:51,039
android is an app

24
00:00:51,039 --> 00:00:53,600
first of all i should clear based on

25
00:00:53,600 --> 00:00:56,079
keywords in the title

26
00:00:56,079 --> 00:00:59,520
the first app is called instant eyes

27
00:00:59,520 --> 00:01:03,039
and the second one is supervised apps

28
00:01:03,039 --> 00:01:06,400
okay let's get started

29
00:01:06,560 --> 00:01:09,200
maybe you have no idea about the form of

30
00:01:09,200 --> 00:01:10,560
instant apps

31
00:01:10,560 --> 00:01:12,320
it's an emerging new draw and is

32
00:01:12,320 --> 00:01:14,240
developing rapidly

33
00:01:14,240 --> 00:01:18,880
since the rest of mobile application

34
00:01:18,880 --> 00:01:21,119
many internet companies released their

35
00:01:21,119 --> 00:01:22,240
mobile web

36
00:01:22,240 --> 00:01:25,680
adaptation framework such as ancient

37
00:01:25,680 --> 00:01:26,400
articles

38
00:01:26,400 --> 00:01:29,520
of facebook and google emp

39
00:01:29,520 --> 00:01:32,560
and then there are many mobile hybrid

40
00:01:32,560 --> 00:01:34,960
development frameworks bring better

41
00:01:34,960 --> 00:01:38,880
interactivity and finally

42
00:01:38,880 --> 00:01:41,280
google

43
00:01:43,119 --> 00:01:47,360
was released on google i o 2016.

44
00:01:47,360 --> 00:01:49,759
this represents the burst of a new form

45
00:01:49,759 --> 00:01:51,600
of mobile application

46
00:01:51,600 --> 00:01:55,840
and then whereas web will-based instant

47
00:01:55,840 --> 00:01:56,880
apps are released

48
00:01:56,880 --> 00:02:00,240
immediately apple also released their

49
00:02:00,240 --> 00:02:02,079
own instant apps

50
00:02:02,079 --> 00:02:06,840
named ad collabs at wwdc

51
00:02:06,840 --> 00:02:09,520
2020

52
00:02:09,520 --> 00:02:11,840
here are some screenshots shows what

53
00:02:11,840 --> 00:02:14,959
internet apps look like

54
00:02:15,760 --> 00:02:18,400
there are widely used initial in the

55
00:02:18,400 --> 00:02:20,560
first two screenshots

56
00:02:20,560 --> 00:02:22,720
typing one button can start an eastern

57
00:02:22,720 --> 00:02:24,480
app from internet app center or search

58
00:02:24,480 --> 00:02:26,160
box

59
00:02:26,160 --> 00:02:29,280
and in the third one someone share and

60
00:02:29,280 --> 00:02:32,080
share a link in chat window tap on it

61
00:02:32,080 --> 00:02:33,360
will start an instant

62
00:02:33,360 --> 00:02:37,840
game app

63
00:02:38,319 --> 00:02:40,640
the last one is a game with support for

64
00:02:40,640 --> 00:02:42,239
google play instant

65
00:02:42,239 --> 00:02:45,120
tap on train now to create a pathway no

66
00:02:45,120 --> 00:02:51,840
need to install

67
00:02:53,440 --> 00:02:56,000
what's inside you may ask there are two

68
00:02:56,000 --> 00:02:57,519
common architectures

69
00:02:57,519 --> 00:03:00,800
the most popular one is based on webview

70
00:03:00,800 --> 00:03:03,680
from a developer's perspective is a very

71
00:03:03,680 --> 00:03:06,480
flexible way to develop hybrid

72
00:03:06,480 --> 00:03:09,519
mobile apps unlike traditional hybrid

73
00:03:09,519 --> 00:03:10,159
apps

74
00:03:10,159 --> 00:03:12,400
insta apps can load and run remote

75
00:03:12,400 --> 00:03:16,159
modules provided by ac party

76
00:03:16,159 --> 00:03:18,000
let's compare the webview and the

77
00:03:18,000 --> 00:03:20,080
webview based it's not

78
00:03:20,080 --> 00:03:23,120
i will cover will be the xnap at wbaa

79
00:03:23,120 --> 00:03:26,319
for short in the next

80
00:03:26,879 --> 00:03:31,599
the left is a model for the mobile apps

81
00:03:31,599 --> 00:03:33,680
its rendering and logics are all

82
00:03:33,680 --> 00:03:35,920
implemented in webview

83
00:03:35,920 --> 00:03:38,000
and you can directly access external

84
00:03:38,000 --> 00:03:40,879
resources from inside the world wheel

85
00:03:40,879 --> 00:03:45,840
on the right is the w in its knife

86
00:03:45,840 --> 00:03:48,720
it's highly isolated the most different

87
00:03:48,720 --> 00:03:50,000
is that

88
00:03:50,000 --> 00:03:52,080
it can't get any data or remote

89
00:03:52,080 --> 00:03:54,640
resources unless communicated with jazz

90
00:03:54,640 --> 00:03:56,560
bridge

91
00:03:56,560 --> 00:03:59,040
next i will detail the architecture of

92
00:03:59,040 --> 00:04:01,280
wbaa

93
00:04:01,280 --> 00:04:04,799
let's look deep into the webview in wbi

94
00:04:04,799 --> 00:04:06,959
the application is based on the js

95
00:04:06,959 --> 00:04:08,560
bridge framework

96
00:04:08,560 --> 00:04:10,959
the render layer is implemented in dom

97
00:04:10,959 --> 00:04:11,920
windows

98
00:04:11,920 --> 00:04:14,159
compiler and picture will translate the

99
00:04:14,159 --> 00:04:14,959
source code

100
00:04:14,959 --> 00:04:19,600
xml json css etc to a rendering template

101
00:04:19,600 --> 00:04:22,160
the templates need value data from logic

102
00:04:22,160 --> 00:04:22,639
layer

103
00:04:22,639 --> 00:04:25,759
to make itself an available page the

104
00:04:25,759 --> 00:04:28,000
logic layer is implemented in the source

105
00:04:28,000 --> 00:04:28,880
worker

106
00:04:28,880 --> 00:04:31,120
as we know a service worker is a

107
00:04:31,120 --> 00:04:32,639
background pro

108
00:04:32,639 --> 00:04:35,440
process independent of dom windows in

109
00:04:35,440 --> 00:04:36,080
general

110
00:04:36,080 --> 00:04:38,720
there is only resource worker department

111
00:04:38,720 --> 00:04:41,680
and all the pages of the domain share it

112
00:04:41,680 --> 00:04:43,680
so the packager should package all the

113
00:04:43,680 --> 00:04:45,840
source code mini javascript to run in a

114
00:04:45,840 --> 00:04:47,280
service worker

115
00:04:47,280 --> 00:04:49,440
the most common choice of picture is

116
00:04:49,440 --> 00:04:50,479
webpack

117
00:04:50,479 --> 00:04:53,600
the logic of each page is packaged into

118
00:04:53,600 --> 00:04:54,479
its own

119
00:04:54,479 --> 00:04:58,479
webpack module generally there is only

120
00:04:58,479 --> 00:05:00,400
one service worker for domain

121
00:05:00,400 --> 00:05:03,919
so one instant app is one domain

122
00:05:03,919 --> 00:05:05,680
that's the necessary condition for

123
00:05:05,680 --> 00:05:09,039
isolation in the workbook

124
00:05:09,039 --> 00:05:11,840
or all we can abstract the communication

125
00:05:11,840 --> 00:05:13,199
between an instant app

126
00:05:13,199 --> 00:05:15,680
and the jsp range to multiple domains

127
00:05:15,680 --> 00:05:17,199
and js bridge

128
00:05:17,199 --> 00:05:19,840
as you can see the isolation between

129
00:05:19,840 --> 00:05:21,199
domains exported

130
00:05:21,199 --> 00:05:25,120
by web wheel by the same origin

131
00:05:25,120 --> 00:05:28,320
policy directly is very difficult so

132
00:05:28,320 --> 00:05:32,159
our target is just bridge

133
00:05:33,280 --> 00:05:35,520
in this classic mobile there are two

134
00:05:35,520 --> 00:05:38,400
most frequently used methods to do this

135
00:05:38,400 --> 00:05:41,120
and javascript interface and webview

136
00:05:41,120 --> 00:05:43,440
event handler

137
00:05:43,440 --> 00:05:46,800
but there are some features there are

138
00:05:46,800 --> 00:05:47,520
some features

139
00:05:47,520 --> 00:05:50,639
that are hard to implement with classic

140
00:05:50,639 --> 00:05:53,520
mobile in the international environment

141
00:05:53,520 --> 00:05:56,800
such as pro size isolation

142
00:05:56,800 --> 00:06:00,960
as a single communication etc

143
00:06:01,280 --> 00:06:03,680
the common wbia architecture provides

144
00:06:03,680 --> 00:06:06,639
true solutions for them cross-domain

145
00:06:06,639 --> 00:06:08,080
communicating

146
00:06:08,080 --> 00:06:10,160
customer communication with previous

147
00:06:10,160 --> 00:06:14,240
domain and image handling framework

148
00:06:14,319 --> 00:06:17,440
let's look at a graphic about js bridge

149
00:06:17,440 --> 00:06:19,440
in wbia

150
00:06:19,440 --> 00:06:21,759
oily privileged domain can communicate

151
00:06:21,759 --> 00:06:23,039
with js bridge

152
00:06:23,039 --> 00:06:26,639
and the snipe domains should initiate

153
00:06:26,639 --> 00:06:28,880
cross-domain requests for calling js

154
00:06:28,880 --> 00:06:29,840
bridge

155
00:06:29,840 --> 00:06:31,919
and that immense handling framework

156
00:06:31,919 --> 00:06:34,560
deals with concurrency and asynchrony

157
00:06:34,560 --> 00:06:37,600
among three parts

158
00:06:38,319 --> 00:06:41,759
next i will show you some attack service

159
00:06:41,759 --> 00:06:45,840
and the vulnerabilities in wba

160
00:06:46,000 --> 00:06:49,680
firstly our target is lateral movement

161
00:06:49,680 --> 00:06:51,840
compromising isolation between east

162
00:06:51,840 --> 00:06:54,560
knives to steal data from other eastern

163
00:06:54,560 --> 00:06:56,800
eyes

164
00:06:56,960 --> 00:07:01,039
go back to the jazz bridge obviously

165
00:07:01,039 --> 00:07:04,400
there are two potential attack services

166
00:07:04,400 --> 00:07:07,440
where do instant where do requests come

167
00:07:07,440 --> 00:07:08,319
from

168
00:07:08,319 --> 00:07:12,240
and where to send the response

169
00:07:12,720 --> 00:07:16,000
in other words attack services are just

170
00:07:16,000 --> 00:07:18,880
bridge requested identification

171
00:07:18,880 --> 00:07:22,240
and events callback in this talk i will

172
00:07:22,240 --> 00:07:25,599
only detail the first one

173
00:07:26,800 --> 00:07:29,039
there is a key data structure in the

174
00:07:29,039 --> 00:07:30,400
identification

175
00:07:30,400 --> 00:07:33,360
i've added a web view id map the

176
00:07:33,360 --> 00:07:34,400
following graphic

177
00:07:34,400 --> 00:07:36,560
shows the process about handling js

178
00:07:36,560 --> 00:07:39,199
bridge requests from web wheels

179
00:07:39,199 --> 00:07:42,160
at first the supervisor app gets the web

180
00:07:42,160 --> 00:07:44,000
id according to where it comes

181
00:07:44,000 --> 00:07:47,039
from then it searches

182
00:07:47,039 --> 00:07:50,240
the key map for corresponding availing

183
00:07:50,240 --> 00:07:53,759
the hidden app id specifies which

184
00:07:53,759 --> 00:07:57,199
eastern app is calling the js grid but

185
00:07:57,199 --> 00:08:02,080
the above is only an ideal situation

186
00:08:02,240 --> 00:08:05,840
during results during reversing

187
00:08:05,840 --> 00:08:09,039
i found the first bug in an internal

188
00:08:09,039 --> 00:08:10,560
apps platform

189
00:08:10,560 --> 00:08:12,879
i found there are some specific

190
00:08:12,879 --> 00:08:15,599
parameters can lead to lateral movement

191
00:08:15,599 --> 00:08:18,960
for example if you add an fld parameter

192
00:08:18,960 --> 00:08:21,199
in your previous domain request

193
00:08:21,199 --> 00:08:23,360
the supervisor app will last the input

194
00:08:23,360 --> 00:08:24,319
parameter

195
00:08:24,319 --> 00:08:26,560
or write the original app id from the

196
00:08:26,560 --> 00:08:28,960
keymap

197
00:08:29,520 --> 00:08:31,840
the first part is very simple

198
00:08:31,840 --> 00:08:33,440
unfortunately

199
00:08:33,440 --> 00:08:35,839
not all instant apps platforms are so

200
00:08:35,839 --> 00:08:37,760
fragile

201
00:08:37,760 --> 00:08:41,360
in most cases there is no parameter we

202
00:08:41,360 --> 00:08:42,240
can eject

203
00:08:42,240 --> 00:08:45,920
to confuse the supervisor act directly

204
00:08:45,920 --> 00:08:48,399
in the talk about we focus on the

205
00:08:48,399 --> 00:08:49,200
instance of

206
00:08:49,200 --> 00:08:51,760
implementation on the client instant

207
00:08:51,760 --> 00:08:53,600
ielts communicating

208
00:08:53,600 --> 00:08:55,760
with the supervisor app for data

209
00:08:55,760 --> 00:08:57,519
transmission

210
00:08:57,519 --> 00:09:02,000
but that is not the end of the process

211
00:09:02,000 --> 00:09:04,959
now we introduce the third part the

212
00:09:04,959 --> 00:09:05,519
back-end

213
00:09:05,519 --> 00:09:08,880
render server the graphic shows the four

214
00:09:08,880 --> 00:09:10,560
rpc process

215
00:09:10,560 --> 00:09:13,519
supervisor app called restore apis of

216
00:09:13,519 --> 00:09:15,360
the backend server

217
00:09:15,360 --> 00:09:19,120
then the then get response data

218
00:09:19,120 --> 00:09:21,519
finally the code data and trigger is in

219
00:09:21,519 --> 00:09:24,160
the app's callback

220
00:09:24,160 --> 00:09:26,880
during reversing i found an interesting

221
00:09:26,880 --> 00:09:29,120
kind of rpc implementation

222
00:09:29,120 --> 00:09:32,959
i call it xrpc the biggest difference

223
00:09:32,959 --> 00:09:35,600
from ordinary rpc in the internal

224
00:09:35,600 --> 00:09:36,480
process

225
00:09:36,480 --> 00:09:39,519
in the supervisor it receives

226
00:09:39,519 --> 00:09:43,519
a parameter as a rpc interface name

227
00:09:43,519 --> 00:09:47,120
then it is done it

228
00:09:47,120 --> 00:09:50,800
is then it extension is

229
00:09:50,800 --> 00:09:53,519
this interface and pass the controllable

230
00:09:53,519 --> 00:09:54,560
parameters

231
00:09:54,560 --> 00:09:57,200
to the interface function finally the

232
00:09:57,200 --> 00:09:58,640
interface function will

233
00:09:58,640 --> 00:10:01,120
call the rest for api and get data from

234
00:10:01,120 --> 00:10:03,680
the windows server

235
00:10:03,680 --> 00:10:06,320
we can control the supervisor to call

236
00:10:06,320 --> 00:10:08,000
any api with any

237
00:10:08,000 --> 00:10:12,000
identity by xrtc

238
00:10:12,240 --> 00:10:16,000
although we hold that communicating

239
00:10:16,000 --> 00:10:18,399
directly with the pre-release domain may

240
00:10:18,399 --> 00:10:19,040
lead to

241
00:10:19,040 --> 00:10:22,959
compromised isolation it's far from the

242
00:10:22,959 --> 00:10:26,079
actual exploit

243
00:10:26,240 --> 00:10:29,120
this is the lifecycle of an instant app

244
00:10:29,120 --> 00:10:29,839
first

245
00:10:29,839 --> 00:10:32,959
developers and upload soft codes

246
00:10:32,959 --> 00:10:36,079
to the vendor server then the backend

247
00:10:36,079 --> 00:10:37,200
server package and

248
00:10:37,200 --> 00:10:39,600
compile those source codes and release

249
00:10:39,600 --> 00:10:41,519
the package instantly

250
00:10:41,519 --> 00:10:45,360
finally users type a link on the mobile

251
00:10:45,360 --> 00:10:46,000
phone

252
00:10:46,000 --> 00:10:48,160
then the easter app will be downloaded

253
00:10:48,160 --> 00:10:51,279
and started automatically

254
00:10:51,279 --> 00:10:52,880
there are two difficulties in the

255
00:10:52,880 --> 00:10:54,880
uploading

256
00:10:54,880 --> 00:10:58,160
the back-end render server will package

257
00:10:58,160 --> 00:11:01,200
our payload in the remote black box

258
00:11:01,200 --> 00:11:03,600
besides the security check and filter in

259
00:11:03,600 --> 00:11:04,480
the server

260
00:11:04,480 --> 00:11:08,320
the packaging process itself will be

261
00:11:08,320 --> 00:11:11,440
also modifying the payload and in the

262
00:11:11,440 --> 00:11:12,640
client side

263
00:11:12,640 --> 00:11:15,360
our payload will be loaded into a

264
00:11:15,360 --> 00:11:17,839
sandbox based on webpack

265
00:11:17,839 --> 00:11:20,160
there are some limits for initiating

266
00:11:20,160 --> 00:11:21,440
cross-domain

267
00:11:21,440 --> 00:11:26,720
request from our payload module

268
00:11:26,720 --> 00:11:29,680
at first there are two common methods

269
00:11:29,680 --> 00:11:30,000
for

270
00:11:30,000 --> 00:11:33,360
cross-domain requests fetch and import

271
00:11:33,360 --> 00:11:34,800
scripts

272
00:11:34,800 --> 00:11:37,680
first can't defend a fetch can't get

273
00:11:37,680 --> 00:11:38,720
response without

274
00:11:38,720 --> 00:11:41,839
specific http response hiders

275
00:11:41,839 --> 00:11:44,800
and import scripts can be only used in

276
00:11:44,800 --> 00:11:46,320
service worker

277
00:11:46,320 --> 00:11:50,639
our target is to access any one of them

278
00:11:50,639 --> 00:11:53,760
and import scripts is better because our

279
00:11:53,760 --> 00:11:55,920
module will be loaded into source worker

280
00:11:55,920 --> 00:11:57,680
and the import scripts can

281
00:11:57,680 --> 00:12:01,440
get response directly

282
00:12:01,440 --> 00:12:03,600
our payload will be packaged as some

283
00:12:03,600 --> 00:12:05,839
modules in webpack

284
00:12:05,839 --> 00:12:08,480
there are there are two main limits

285
00:12:08,480 --> 00:12:10,079
objects blacklist

286
00:12:10,079 --> 00:12:13,760
and objects localization

287
00:12:14,480 --> 00:12:16,480
blacklist works at the stage of

288
00:12:16,480 --> 00:12:19,040
packaging if you write those section

289
00:12:19,040 --> 00:12:20,880
functions and objects in your source

290
00:12:20,880 --> 00:12:21,680
code

291
00:12:21,680 --> 00:12:24,800
those objects will be released to 0 to

292
00:12:24,800 --> 00:12:25,760
volt0

293
00:12:25,760 --> 00:12:28,800
known or undefined

294
00:12:29,200 --> 00:12:32,240
as adjustable side sandbox is based on

295
00:12:32,240 --> 00:12:33,120
webpack

296
00:12:33,120 --> 00:12:39,839
so how a pack organized his js bundles

297
00:12:40,720 --> 00:12:42,800
that's a demo of a simple webpack

298
00:12:42,800 --> 00:12:44,959
project source code

299
00:12:44,959 --> 00:12:47,440
it has three main source called file

300
00:12:47,440 --> 00:12:48,079
webpack

301
00:12:48,079 --> 00:12:53,839
config js index.js and some js

302
00:12:54,079 --> 00:12:57,519
after packaging the first index.js and

303
00:12:57,519 --> 00:12:58,320
some gs

304
00:12:58,320 --> 00:13:01,120
will be packaged as true modules into

305
00:13:01,120 --> 00:13:03,120
bundle.js

306
00:13:03,120 --> 00:13:06,399
the model 0 is index.js

307
00:13:06,399 --> 00:13:09,760
and the model one is some gs we can see

308
00:13:09,760 --> 00:13:10,480
that

309
00:13:10,480 --> 00:13:13,760
in the index.js module some js will be

310
00:13:13,760 --> 00:13:18,480
loaded by function webpack require one

311
00:13:18,480 --> 00:13:21,680
so we can research all the insta

312
00:13:21,680 --> 00:13:24,959
install the modules for the one export

313
00:13:24,959 --> 00:13:26,000
global

314
00:13:26,000 --> 00:13:30,079
object although our codes are

315
00:13:30,079 --> 00:13:33,680
our first kit after packaging we can use

316
00:13:33,680 --> 00:13:35,680
the third arguments

317
00:13:35,680 --> 00:13:40,079
to call webpack required

318
00:13:41,120 --> 00:13:43,920
another limit is objects localization

319
00:13:43,920 --> 00:13:45,360
some sensitive objects

320
00:13:45,360 --> 00:13:48,480
will move into a private module

321
00:13:48,480 --> 00:13:51,680
become local variable in practice this

322
00:13:51,680 --> 00:13:52,959
limit is usually

323
00:13:52,959 --> 00:13:57,040
implemented but following sudo code

324
00:13:57,839 --> 00:14:00,800
it replaces the function in the proto of

325
00:14:00,800 --> 00:14:01,279
the

326
00:14:01,279 --> 00:14:04,880
global global object

327
00:14:05,199 --> 00:14:07,519
but we can recover it from the

328
00:14:07,519 --> 00:14:09,040
protection

329
00:14:09,040 --> 00:14:12,560
in the service worker the global object

330
00:14:12,560 --> 00:14:15,120
is an instance of the service worker

331
00:14:15,120 --> 00:14:16,240
global scope

332
00:14:16,240 --> 00:14:19,279
and the function in port script is in

333
00:14:19,279 --> 00:14:20,240
highly

334
00:14:20,240 --> 00:14:24,639
is inherited from worker global scope

335
00:14:24,639 --> 00:14:27,279
if that class is not in the black list

336
00:14:27,279 --> 00:14:29,519
we can use the following code to recover

337
00:14:29,519 --> 00:14:31,839
the function

338
00:14:31,839 --> 00:14:35,440
finally combining with the

339
00:14:35,440 --> 00:14:37,279
vulnerabilities we found and the

340
00:14:37,279 --> 00:14:38,720
developed circle

341
00:14:38,720 --> 00:14:45,839
this is our exploit flow

342
00:14:46,560 --> 00:14:50,240
it's about how i detailed architecture

343
00:14:50,240 --> 00:14:51,440
and vulnerabilities

344
00:14:51,440 --> 00:14:53,760
in the worldview-based internet app

345
00:14:53,760 --> 00:14:55,360
there is a totally different

346
00:14:55,360 --> 00:15:00,160
architecture based on native android ltc

347
00:15:00,880 --> 00:15:04,240
the most respect the most

348
00:15:04,240 --> 00:15:06,720
representative implementation is google

349
00:15:06,720 --> 00:15:08,079
play instant

350
00:15:08,079 --> 00:15:10,839
that's the introduction from office

351
00:15:10,839 --> 00:15:13,040
document

352
00:15:13,040 --> 00:15:16,160
native apps without installation and you

353
00:15:16,160 --> 00:15:16,880
can use it

354
00:15:16,880 --> 00:15:20,399
anywhere you share a link

355
00:15:21,680 --> 00:15:24,160
by reading the document i learned that

356
00:15:24,160 --> 00:15:26,399
the instant app

357
00:15:26,399 --> 00:15:29,680
is a real native android app

358
00:15:29,680 --> 00:15:33,360
based on app bundle publishing format

359
00:15:33,360 --> 00:15:36,480
that's very cool after reversing i got

360
00:15:36,480 --> 00:15:38,399
the following concludes

361
00:15:38,399 --> 00:15:41,839
as the api level greater or equal to 26

362
00:15:41,839 --> 00:15:45,440
google play isn't exported by usp

363
00:15:45,440 --> 00:15:48,000
compromising it will be more difficult

364
00:15:48,000 --> 00:15:49,360
than local private

365
00:15:49,360 --> 00:15:52,959
escalation from app users

366
00:15:52,959 --> 00:15:56,160
but to be compatible with versions below

367
00:15:56,160 --> 00:15:59,279
api 26 google play service provides

368
00:15:59,279 --> 00:16:02,160
a package named com google android

369
00:16:02,160 --> 00:16:02,720
instant

370
00:16:02,720 --> 00:16:07,360
apps supervisor that's pretty good

371
00:16:07,680 --> 00:16:10,320
let's go back to our familiar area and

372
00:16:10,320 --> 00:16:14,399
look at the inside of supervisor

373
00:16:14,560 --> 00:16:17,440
this graphic is a little complex there

374
00:16:17,440 --> 00:16:17,839
are

375
00:16:17,839 --> 00:16:21,199
three main parts at the red side

376
00:16:21,199 --> 00:16:24,000
is isolated processes running the logic

377
00:16:24,000 --> 00:16:26,240
code of our east knives

378
00:16:26,240 --> 00:16:29,279
and in the middle it's the supervisor

379
00:16:29,279 --> 00:16:30,320
process

380
00:16:30,320 --> 00:16:34,000
as the left is the system resources

381
00:16:34,000 --> 00:16:37,040
accessed by the supervisor process the

382
00:16:37,040 --> 00:16:39,759
isolated processes of instant apps will

383
00:16:39,759 --> 00:16:40,160
be

384
00:16:40,160 --> 00:16:42,880
initialized as a service and the

385
00:16:42,880 --> 00:16:44,160
supervisor process

386
00:16:44,160 --> 00:16:47,519
will start a shadow activity

387
00:16:47,519 --> 00:16:52,079
filled in with the corresponding s9

388
00:16:52,079 --> 00:16:56,079
there are two important proxy

389
00:16:56,079 --> 00:16:58,880
for the isolated process to access

390
00:16:58,880 --> 00:17:01,440
systems interface

391
00:17:01,440 --> 00:17:04,559
ibc proxy is to transmit the ipc

392
00:17:04,559 --> 00:17:07,439
request from isolated process to android

393
00:17:07,439 --> 00:17:09,119
system service

394
00:17:09,119 --> 00:17:11,679
and the cycle proxy is to transmit the

395
00:17:11,679 --> 00:17:12,640
cisco

396
00:17:12,640 --> 00:17:15,359
from isolated processes to supervisor

397
00:17:15,359 --> 00:17:16,799
precise

398
00:17:16,799 --> 00:17:20,880
generally it means isolated processes

399
00:17:20,880 --> 00:17:23,919
called lipsy method for example

400
00:17:23,919 --> 00:17:26,160
i want to open a file in my data

401
00:17:26,160 --> 00:17:27,359
directory from

402
00:17:27,359 --> 00:17:30,400
an isolated process because of athlete's

403
00:17:30,400 --> 00:17:33,200
user permission it should be forwarded

404
00:17:33,200 --> 00:17:34,080
to

405
00:17:34,080 --> 00:17:36,960
cisco proxy and call open method as

406
00:17:36,960 --> 00:17:39,600
supervisor

407
00:17:41,679 --> 00:17:44,400
next i will detail how those proxies

408
00:17:44,400 --> 00:17:45,039
work

409
00:17:45,039 --> 00:17:48,160
through reverse engineering first

410
00:17:48,160 --> 00:17:51,360
you can find the setup process by

411
00:17:51,360 --> 00:17:54,559
a system sleep named setup

412
00:17:54,559 --> 00:17:59,039
with application info during the setup

413
00:17:59,039 --> 00:18:02,240
a supervisor app registers three vendors

414
00:18:02,240 --> 00:18:02,880
for an

415
00:18:02,880 --> 00:18:06,320
isolated process the first one is named

416
00:18:06,320 --> 00:18:07,039
ipc

417
00:18:07,039 --> 00:18:10,480
dot service manager forward proxy

418
00:18:10,480 --> 00:18:13,600
i call it ipc proxy for short the second

419
00:18:13,600 --> 00:18:15,200
one is named

420
00:18:15,200 --> 00:18:18,640
cisco dot cisco service that's the cisco

421
00:18:18,640 --> 00:18:19,520
proxy we just

422
00:18:19,520 --> 00:18:22,960
decide the third one is named event

423
00:18:22,960 --> 00:18:23,919
receiver

424
00:18:23,919 --> 00:18:27,360
used for event callback

425
00:18:27,360 --> 00:18:31,280
next let's see how ipc proxy works about

426
00:18:31,280 --> 00:18:34,880
access control there is a main

427
00:18:34,880 --> 00:18:36,400
configuration file

428
00:18:36,400 --> 00:18:39,600
named the editor at the app's data cache

429
00:18:39,600 --> 00:18:41,440
directory

430
00:18:41,440 --> 00:18:45,039
it's always loaded from a zip file

431
00:18:45,039 --> 00:18:49,360
with a strange file name like this

432
00:18:51,039 --> 00:18:53,039
the dna data sees the waitlist

433
00:18:53,039 --> 00:18:54,160
configuration about

434
00:18:54,160 --> 00:18:57,760
ipc in profile format because

435
00:18:57,760 --> 00:19:00,400
it removes the symbol information of

436
00:19:00,400 --> 00:19:01,360
reflection

437
00:19:01,360 --> 00:19:03,200
it's very difficult to pass in the

438
00:19:03,200 --> 00:19:06,240
product buff configuration by reversing

439
00:19:06,240 --> 00:19:09,760
so i decoded it directly as

440
00:19:09,760 --> 00:19:12,240
the general protocol data structure then

441
00:19:12,240 --> 00:19:14,880
i found there is a big list of eidr

442
00:19:14,880 --> 00:19:17,919
atoms in the eidr item

443
00:19:17,919 --> 00:19:21,520
the first field is endl clustering

444
00:19:21,520 --> 00:19:24,320
the following field is an earliest name

445
00:19:24,320 --> 00:19:25,679
for it

446
00:19:25,679 --> 00:19:27,919
and the third one is the class name of

447
00:19:27,919 --> 00:19:29,200
the proxy handler

448
00:19:29,200 --> 00:19:32,559
which forwards the ipc request sentence

449
00:19:32,559 --> 00:19:36,320
to this eidl and the test field

450
00:19:36,320 --> 00:19:41,919
is a repeated field of ipc method atom

451
00:19:41,919 --> 00:19:44,720
in the fpc method item the first field

452
00:19:44,720 --> 00:19:45,039
is

453
00:19:45,039 --> 00:19:49,360
a nested data saving the

454
00:19:49,360 --> 00:19:52,080
methods signatures in the method

455
00:19:52,080 --> 00:19:53,440
signature item

456
00:19:53,440 --> 00:19:56,160
the first field is measure name and the

457
00:19:56,160 --> 00:19:57,120
following field

458
00:19:57,120 --> 00:19:59,600
with text three means the method

459
00:19:59,600 --> 00:20:01,919
parameters test

460
00:20:01,919 --> 00:20:07,360
it's an emer is an enumeration types

461
00:20:07,360 --> 00:20:10,640
for example fail means inch none mixed

462
00:20:10,640 --> 00:20:11,520
string

463
00:20:11,520 --> 00:20:14,799
13 means class embedded and

464
00:20:14,799 --> 00:20:17,840
the field with type 4 means the

465
00:20:17,840 --> 00:20:20,480
method written type and there are some

466
00:20:20,480 --> 00:20:21,200
other

467
00:20:21,200 --> 00:20:23,600
fields following maybe they mean some

468
00:20:23,600 --> 00:20:24,320
flags

469
00:20:24,320 --> 00:20:27,360
or password typo we don't care about

470
00:20:27,360 --> 00:20:30,400
the last field of the ibc method item is

471
00:20:30,400 --> 00:20:32,640
very important

472
00:20:32,640 --> 00:20:35,520
it means the permission type of this ipc

473
00:20:35,520 --> 00:20:37,918
method

474
00:20:39,120 --> 00:20:42,159
if the type is greater or equal to 3 and

475
00:20:42,159 --> 00:20:46,000
light or less or equal to 14

476
00:20:46,000 --> 00:20:49,280
supervisor will read a permission check

477
00:20:49,280 --> 00:20:50,480
field exception

478
00:20:50,480 --> 00:20:52,880
when isolated process is calling this

479
00:20:52,880 --> 00:20:55,679
ipc method

480
00:20:56,240 --> 00:20:58,799
besides the permission type check the

481
00:20:58,799 --> 00:21:00,159
following flow chart

482
00:21:00,159 --> 00:21:02,799
shows how ipc proxy checked and ipc

483
00:21:02,799 --> 00:21:03,840
requires

484
00:21:03,840 --> 00:21:07,200
the activities process initiates an ipc

485
00:21:07,200 --> 00:21:09,520
request to a system service

486
00:21:09,520 --> 00:21:11,840
then the supervisor will check if the

487
00:21:11,840 --> 00:21:13,760
corresponding eidl had

488
00:21:13,760 --> 00:21:17,039
a proxy handler if it has

489
00:21:17,039 --> 00:21:19,200
supervisor we'll check the message

490
00:21:19,200 --> 00:21:20,320
permission type

491
00:21:20,320 --> 00:21:23,760
and if the proxy handler has a public

492
00:21:23,760 --> 00:21:24,559
message

493
00:21:24,559 --> 00:21:27,440
with the sim signature the ipc request

494
00:21:27,440 --> 00:21:29,919
will be forwarded to it for security

495
00:21:29,919 --> 00:21:30,799
check

496
00:21:30,799 --> 00:21:33,840
otherwise requests will be sent to

497
00:21:33,840 --> 00:21:38,080
system service directly by supervisor

498
00:21:38,080 --> 00:21:41,600
finally let's look at the cycle

499
00:21:41,600 --> 00:21:45,600
proxy it's implemented in lipsysco

500
00:21:45,600 --> 00:21:48,880
because it's a banner it must have an

501
00:21:48,880 --> 00:21:51,760
untransact method after reversing i

502
00:21:51,760 --> 00:21:52,400
found the

503
00:21:52,400 --> 00:21:55,679
function entry and there are 88 transact

504
00:21:55,679 --> 00:21:56,400
code

505
00:21:56,400 --> 00:21:59,520
for banner call

506
00:21:59,520 --> 00:22:03,280
for example the code 0x38

507
00:22:03,280 --> 00:22:06,320
a lipstick open

508
00:22:06,799 --> 00:22:08,720
next i will show you some

509
00:22:08,720 --> 00:22:13,280
vulnerabilities in google play instant

510
00:22:13,280 --> 00:22:17,039
google play instant app look

511
00:22:17,039 --> 00:22:20,400
looks much like a native android app

512
00:22:20,400 --> 00:22:23,200
and it can run on your phone with a tab

513
00:22:23,200 --> 00:22:25,200
so it's dangerous to light it

514
00:22:25,200 --> 00:22:27,840
directly access any components outside

515
00:22:27,840 --> 00:22:29,520
the supervised eye

516
00:22:29,520 --> 00:22:32,320
obviously the developed team has also

517
00:22:32,320 --> 00:22:33,760
thought about it

518
00:22:33,760 --> 00:22:36,240
there is a sandbox for access external

519
00:22:36,240 --> 00:22:37,840
components from

520
00:22:37,840 --> 00:22:40,559
it's knives an instant app can only

521
00:22:40,559 --> 00:22:41,120
access

522
00:22:41,120 --> 00:22:44,240
its own service broadcaster receiver and

523
00:22:44,240 --> 00:22:46,480
the content provider

524
00:22:46,480 --> 00:22:49,679
as for activity supervisor will forward

525
00:22:49,679 --> 00:22:52,720
starting activity intents from instant

526
00:22:52,720 --> 00:22:53,440
apps

527
00:22:53,440 --> 00:22:55,760
the payload in the instant will be

528
00:22:55,760 --> 00:22:59,440
relocated in a new field

529
00:23:00,000 --> 00:23:02,480
in order to expand the attack service we

530
00:23:02,480 --> 00:23:04,320
how to bypass the sandbox

531
00:23:04,320 --> 00:23:06,840
to access external components without

532
00:23:06,840 --> 00:23:09,280
limits

533
00:23:09,280 --> 00:23:12,559
when i read the check logic in the proxy

534
00:23:12,559 --> 00:23:13,679
handler

535
00:23:13,679 --> 00:23:16,400
i found an interesting class named

536
00:23:16,400 --> 00:23:17,679
internet sender

537
00:23:17,679 --> 00:23:20,559
although the fpc method get incident

538
00:23:20,559 --> 00:23:22,000
sender will be checked and

539
00:23:22,000 --> 00:23:25,200
folded by the activity manager proxy

540
00:23:25,200 --> 00:23:26,480
handler

541
00:23:26,480 --> 00:23:29,679
there is an interesting parameter can

542
00:23:29,679 --> 00:23:33,120
have at the pass or checks

543
00:23:33,520 --> 00:23:36,880
the intent is a public method of class

544
00:23:36,880 --> 00:23:39,280
internet sender to launch excel the

545
00:23:39,280 --> 00:23:40,400
parameter intent

546
00:23:40,400 --> 00:23:44,640
will be passed to the method fill-in

547
00:23:44,640 --> 00:23:47,760
that will make the input intent or write

548
00:23:47,760 --> 00:23:50,159
the original intent saved in the

549
00:23:50,159 --> 00:23:52,320
internet center

550
00:23:52,320 --> 00:23:55,360
so there is an

551
00:23:55,360 --> 00:23:58,480
escape route from the sandbox first

552
00:23:58,480 --> 00:24:01,600
get an efficient center in waitlist by

553
00:24:01,600 --> 00:24:03,360
ipc call

554
00:24:03,360 --> 00:24:06,559
next initialize a new intent with target

555
00:24:06,559 --> 00:24:07,520
component

556
00:24:07,520 --> 00:24:11,039
finally use message send or send intent

557
00:24:11,039 --> 00:24:13,520
to overwrite the intent of the original

558
00:24:13,520 --> 00:24:16,320
infinite sender

559
00:24:16,720 --> 00:24:19,120
besides a bow there are some other

560
00:24:19,120 --> 00:24:21,440
vulnerabilities in google play instant

561
00:24:21,440 --> 00:24:25,120
for example a duplicate provider

562
00:24:25,120 --> 00:24:28,000
provider authority leads to compromising

563
00:24:28,000 --> 00:24:29,279
the access limit of

564
00:24:29,279 --> 00:24:34,720
external content content providers

565
00:24:34,799 --> 00:24:39,440
okay that's all and thanks for your

566
00:24:40,120 --> 00:24:43,120
listening

