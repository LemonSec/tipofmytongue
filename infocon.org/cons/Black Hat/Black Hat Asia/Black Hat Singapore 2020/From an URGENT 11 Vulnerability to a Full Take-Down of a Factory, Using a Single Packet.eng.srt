1
00:00:01,760 --> 00:00:03,600
hi everyone my name is barack had i'm

2
00:00:03,600 --> 00:00:05,680
here with my teammate daw zuzman

3
00:00:05,680 --> 00:00:07,359
and we are about to show you how we use

4
00:00:07,359 --> 00:00:09,440
the urgent 11 vulnerabilities to exploit

5
00:00:09,440 --> 00:00:11,280
rockwell and schneider plc's

6
00:00:11,280 --> 00:00:14,000
another teammate gal kaufman also helped

7
00:00:14,000 --> 00:00:14,719
a lot

8
00:00:14,719 --> 00:00:17,279
with this research he's probably at the

9
00:00:17,279 --> 00:00:18,160
beach right now

10
00:00:18,160 --> 00:00:20,000
thinking about the next thing is going

11
00:00:20,000 --> 00:00:21,520
to exploit we are

12
00:00:21,520 --> 00:00:23,840
the research arm of armies we research

13
00:00:23,840 --> 00:00:25,039
unmanageable devices

14
00:00:25,039 --> 00:00:26,800
generally devices that you can't put an

15
00:00:26,800 --> 00:00:28,640
agent on we look for threats and

16
00:00:28,640 --> 00:00:30,080
anomalies in the wild and look for

17
00:00:30,080 --> 00:00:34,000
vulnerabilities in widely used devices

18
00:00:40,800 --> 00:00:43,440
a quick recap about urgent 11. these are

19
00:00:43,440 --> 00:00:45,280
11 critical vulnerabilities that we

20
00:00:45,280 --> 00:00:48,000
disclose in black at usa 2019

21
00:00:48,000 --> 00:00:49,760
they affect hundreds of millions of

22
00:00:49,760 --> 00:00:51,440
millions of devices

23
00:00:51,440 --> 00:00:53,440
and industrial control systems are also

24
00:00:53,440 --> 00:00:54,480
affected including

25
00:00:54,480 --> 00:00:56,320
rockwell automation schneider electric

26
00:00:56,320 --> 00:00:58,000
and siemens devices

27
00:00:58,000 --> 00:00:59,600
we will start this talk with a quick

28
00:00:59,600 --> 00:01:02,480
overview of the operation technology ot

29
00:01:02,480 --> 00:01:04,559
world and the ot security concerns and

30
00:01:04,559 --> 00:01:05,600
standards

31
00:01:05,600 --> 00:01:08,000
then we will show how we used one of

32
00:01:08,000 --> 00:01:10,000
urgent 11 vulnerabilities to get remote

33
00:01:10,000 --> 00:01:11,680
call execution of a rockwell and

34
00:01:11,680 --> 00:01:14,560
schneider plcs

35
00:01:14,560 --> 00:01:16,640
the main concern in the ot environment

36
00:01:16,640 --> 00:01:18,479
is the physical safety aspect

37
00:01:18,479 --> 00:01:20,400
these devices monitor chemical and

38
00:01:20,400 --> 00:01:21,520
physical operations

39
00:01:21,520 --> 00:01:23,840
so the main concern of the ot operator

40
00:01:23,840 --> 00:01:25,759
is that nothing blows up and everyone

41
00:01:25,759 --> 00:01:26,479
and everything

42
00:01:26,479 --> 00:01:29,520
is safe from that aspect rises

43
00:01:29,520 --> 00:01:30,640
everything else

44
00:01:30,640 --> 00:01:32,479
that's why the network is usually very

45
00:01:32,479 --> 00:01:35,200
reliable with backup topologies in place

46
00:01:35,200 --> 00:01:37,119
it's common to see network rings so that

47
00:01:37,119 --> 00:01:38,799
everything functions properly even if

48
00:01:38,799 --> 00:01:40,079
some part of the network

49
00:01:40,079 --> 00:01:43,680
disconnects plc programmable logic

50
00:01:43,680 --> 00:01:44,880
controller

51
00:01:44,880 --> 00:01:47,200
this is the brain of the factory line

52
00:01:47,200 --> 00:01:49,119
and to keep the safety standards high

53
00:01:49,119 --> 00:01:51,360
these devices are heavily tested and

54
00:01:51,360 --> 00:01:52,799
monitored so that they

55
00:01:52,799 --> 00:01:55,759
almost never crash or reboot it's

56
00:01:55,759 --> 00:01:58,159
enforced from the os level and up

57
00:01:58,159 --> 00:02:00,560
most plcs use some type of real-time

58
00:02:00,560 --> 00:02:02,000
operating system system

59
00:02:02,000 --> 00:02:04,640
as the underlying os one of those is

60
00:02:04,640 --> 00:02:05,600
vxworks

61
00:02:05,600 --> 00:02:08,080
which we will talk about later on

62
00:02:08,080 --> 00:02:09,199
comparing plc

63
00:02:09,199 --> 00:02:11,200
to raspberry pi they have the same

64
00:02:11,200 --> 00:02:13,440
functionality but the plc do so in a

65
00:02:13,440 --> 00:02:15,200
much more reliable way

66
00:02:15,200 --> 00:02:18,080
that's also why plcs cost 100 times more

67
00:02:18,080 --> 00:02:20,879
than a raspberry pi

68
00:02:20,879 --> 00:02:23,120
we can divide the ot network into three

69
00:02:23,120 --> 00:02:24,160
sections

70
00:02:24,160 --> 00:02:26,239
the corporate network that's the normal

71
00:02:26,239 --> 00:02:28,000
it network with databases

72
00:02:28,000 --> 00:02:30,560
pcs printers and things like that then

73
00:02:30,560 --> 00:02:31,840
we have the scada network

74
00:02:31,840 --> 00:02:34,239
supervisory control and data acquisition

75
00:02:34,239 --> 00:02:35,599
these are the devices that should

76
00:02:35,599 --> 00:02:36,000
monitor

77
00:02:36,000 --> 00:02:37,680
the production network including the

78
00:02:37,680 --> 00:02:39,040
engineering workstation

79
00:02:39,040 --> 00:02:40,879
the station from which the plc is being

80
00:02:40,879 --> 00:02:43,040
programmed and the historian server

81
00:02:43,040 --> 00:02:45,040
a server that monitors the plc's for

82
00:02:45,040 --> 00:02:47,519
regular checks and operation reviews

83
00:02:47,519 --> 00:02:49,360
and then last we have the production

84
00:02:49,360 --> 00:02:51,440
network it consists of everything

85
00:02:51,440 --> 00:02:54,319
you can find on the assembly line plc's

86
00:02:54,319 --> 00:02:55,040
sensors

87
00:02:55,040 --> 00:02:58,000
actuators things like heat sensors or dc

88
00:02:58,000 --> 00:03:00,480
motors

89
00:03:01,519 --> 00:03:03,440
the purdue model is used as a concept

90
00:03:03,440 --> 00:03:05,920
model for ics network structure

91
00:03:05,920 --> 00:03:07,760
it is an industry adopted reference

92
00:03:07,760 --> 00:03:09,200
model that shows the

93
00:03:09,200 --> 00:03:11,440
connections and dependencies of all the

94
00:03:11,440 --> 00:03:13,280
main components of a typical industrial

95
00:03:13,280 --> 00:03:14,480
control system

96
00:03:14,480 --> 00:03:16,720
the security standard in the ot world

97
00:03:16,720 --> 00:03:18,239
relies on purdue model

98
00:03:18,239 --> 00:03:20,480
it divides the devices into levels and

99
00:03:20,480 --> 00:03:22,560
states that each level should interact

100
00:03:22,560 --> 00:03:25,040
only with the levels above and below it

101
00:03:25,040 --> 00:03:26,480
the model is just a logical

102
00:03:26,480 --> 00:03:28,560
representation and in reality everything

103
00:03:28,560 --> 00:03:29,680
is usually connected

104
00:03:29,680 --> 00:03:31,280
to the same switches and the same

105
00:03:31,280 --> 00:03:33,760
network sometimes even the same network

106
00:03:33,760 --> 00:03:36,879
as the it network

107
00:03:36,959 --> 00:03:39,519
the all purpose of the ot network is the

108
00:03:39,519 --> 00:03:42,000
control and monitoring of the plc

109
00:03:42,000 --> 00:03:44,000
since the plc is at the bottom of the

110
00:03:44,000 --> 00:03:45,120
information flow

111
00:03:45,120 --> 00:03:48,159
it tends to be the target of ot attacks

112
00:03:48,159 --> 00:03:50,319
two known ot attacks are stuxnet and

113
00:03:50,319 --> 00:03:52,640
dryton

114
00:03:52,640 --> 00:03:54,799
stuxnet is a malicious computer wall

115
00:03:54,799 --> 00:03:56,959
first uncovered in 2010

116
00:03:56,959 --> 00:03:58,640
40 have been in development since at

117
00:03:58,640 --> 00:04:00,319
least 2005.

118
00:04:00,319 --> 00:04:02,080
stuxnet is believed to be responsible

119
00:04:02,080 --> 00:04:04,000
for causing substantial damage to the

120
00:04:04,000 --> 00:04:05,840
nuclear program in iran

121
00:04:05,840 --> 00:04:08,159
triton malware was first discovered at

122
00:04:08,159 --> 00:04:10,080
saudi arabian petrochemical plant

123
00:04:10,080 --> 00:04:13,200
in 2017. both of these attacks began by

124
00:04:13,200 --> 00:04:14,720
taking control over the engineering

125
00:04:14,720 --> 00:04:15,519
workstation

126
00:04:15,519 --> 00:04:17,199
which is a windows machine and from

127
00:04:17,199 --> 00:04:19,440
there injecting code to the plc

128
00:04:19,440 --> 00:04:21,358
so that the attacker can execute

129
00:04:21,358 --> 00:04:22,880
unmonitored commands without the

130
00:04:22,880 --> 00:04:26,400
operator ever knowing about it

131
00:04:26,560 --> 00:04:29,360
okay a bit more about the plc you can

132
00:04:29,360 --> 00:04:30,560
program the plc

133
00:04:30,560 --> 00:04:32,960
but in a safe way not every command is

134
00:04:32,960 --> 00:04:33,600
legal

135
00:04:33,600 --> 00:04:35,840
and there are no interfaces to the

136
00:04:35,840 --> 00:04:37,759
underlying operating system

137
00:04:37,759 --> 00:04:40,560
also every bit of data used by the plc

138
00:04:40,560 --> 00:04:41,040
program

139
00:04:41,040 --> 00:04:42,639
can be monitored from the engineering

140
00:04:42,639 --> 00:04:45,040
workstation using a malware an attacker

141
00:04:45,040 --> 00:04:47,120
can covertly change the plc program

142
00:04:47,120 --> 00:04:49,759
just like stuxnet and triton did then he

143
00:04:49,759 --> 00:04:51,680
needs to hide himself somehow

144
00:04:51,680 --> 00:04:53,440
hiding the malicious operation can be

145
00:04:53,440 --> 00:04:55,759
done at level 2 by injecting

146
00:04:55,759 --> 00:04:57,680
all of the monitoring devices or from

147
00:04:57,680 --> 00:04:59,919
level 1 by injecting the plc

148
00:04:59,919 --> 00:05:01,759
that is controlling the operation and

149
00:05:01,759 --> 00:05:05,680
altering the plc outgoing messages

150
00:05:06,639 --> 00:05:08,960
full control over the plc code even the

151
00:05:08,960 --> 00:05:11,280
non-programmable part is not trivial

152
00:05:11,280 --> 00:05:13,280
schneider plc's will prevent execution

153
00:05:13,280 --> 00:05:14,639
of unsigned programs

154
00:05:14,639 --> 00:05:17,120
and local plcs emulate the code and do

155
00:05:17,120 --> 00:05:20,639
not allow native code execution

156
00:05:21,199 --> 00:05:23,600
okay so that's how plc actually looks

157
00:05:23,600 --> 00:05:25,520
like on the left we have the control

158
00:05:25,520 --> 00:05:27,199
logics plc by rockwell

159
00:05:27,199 --> 00:05:29,120
and on the right we have the modicon plc

160
00:05:29,120 --> 00:05:30,240
by schneider

161
00:05:30,240 --> 00:05:32,800
both of plcs both both of these plcs are

162
00:05:32,800 --> 00:05:34,560
made out of swappable slots

163
00:05:34,560 --> 00:05:37,039
each slot has one specific functionality

164
00:05:37,039 --> 00:05:37,759
like io

165
00:05:37,759 --> 00:05:39,600
networking or the actual computation

166
00:05:39,600 --> 00:05:41,919
unit when we first got the devices we

167
00:05:41,919 --> 00:05:43,600
looked for some debug interface

168
00:05:43,600 --> 00:05:46,160
for easy exploration actually since the

169
00:05:46,160 --> 00:05:47,280
connection to the engineering

170
00:05:47,280 --> 00:05:48,560
workstation is done

171
00:05:48,560 --> 00:05:50,800
via the networking module of these plc's

172
00:05:50,800 --> 00:05:52,080
our research focuses

173
00:05:52,080 --> 00:05:54,160
on getting control only over this

174
00:05:54,160 --> 00:05:55,199
specific model

175
00:05:55,199 --> 00:05:57,280
with full control over this model an

176
00:05:57,280 --> 00:05:59,280
attacker can alter the plc program

177
00:05:59,280 --> 00:06:00,560
while showing the real engineering

178
00:06:00,560 --> 00:06:02,720
workstation a false view of the current

179
00:06:02,720 --> 00:06:06,080
plc state

180
00:06:06,080 --> 00:06:09,280
we opened both of the plc's up both of

181
00:06:09,280 --> 00:06:11,280
the network module networking models

182
00:06:11,280 --> 00:06:13,280
looking for some hidden serial jtag or

183
00:06:13,280 --> 00:06:15,360
some hidden crash dump interface

184
00:06:15,360 --> 00:06:17,280
on the left is the rockwell network

185
00:06:17,280 --> 00:06:18,400
model and on the right

186
00:06:18,400 --> 00:06:21,680
is the schneider network model

187
00:06:21,680 --> 00:06:24,479
we solder in jtag connections and sd

188
00:06:24,479 --> 00:06:25,520
card connections

189
00:06:25,520 --> 00:06:27,680
but it all failed we could actually see

190
00:06:27,680 --> 00:06:29,840
the sd card clock working properly

191
00:06:29,840 --> 00:06:33,919
but nothing was being written into it

192
00:06:33,919 --> 00:06:34,560
next

193
00:06:34,560 --> 00:06:36,720
we look for all tves and found that the

194
00:06:36,720 --> 00:06:38,400
debugger was once open

195
00:06:38,400 --> 00:06:40,880
in the in the rockwell plc's we

196
00:06:40,880 --> 00:06:42,479
downgraded the device but it still

197
00:06:42,479 --> 00:06:43,600
didn't respond

198
00:06:43,600 --> 00:06:46,880
to any debug requests

199
00:06:47,120 --> 00:06:49,520
so we opened the old firmware of the

200
00:06:49,520 --> 00:06:50,800
local plc

201
00:06:50,800 --> 00:06:52,800
and found the debugger easter egg this

202
00:06:52,800 --> 00:06:54,720
function is the initialization function

203
00:06:54,720 --> 00:06:55,680
of the debugger

204
00:06:55,680 --> 00:06:58,560
by setting the plc ip to that secret ip

205
00:06:58,560 --> 00:07:00,560
we could communicate with the debugger

206
00:07:00,560 --> 00:07:02,720
the debugger gave us the ability to read

207
00:07:02,720 --> 00:07:04,880
write and execute arbitrary code

208
00:07:04,880 --> 00:07:06,560
so we now have the proper tools to

209
00:07:06,560 --> 00:07:08,479
develop the lg 11 exploit

210
00:07:08,479 --> 00:07:10,000
i'm going to going to pass the

211
00:07:10,000 --> 00:07:11,599
presentation to do

212
00:07:11,599 --> 00:07:12,960
we'll talk about the urgent level

213
00:07:12,960 --> 00:07:16,160
vulnerability we are about to exploit

214
00:07:16,160 --> 00:07:18,639
okay so to get a debugger we need to

215
00:07:18,639 --> 00:07:20,720
quickly recap a previous publication of

216
00:07:20,720 --> 00:07:21,120
ours

217
00:07:21,120 --> 00:07:23,840
urgent 11. so what is urgent 11. origin

218
00:07:23,840 --> 00:07:26,000
11 are 11 vulnerabilities that affect an

219
00:07:26,000 --> 00:07:28,319
operating system called vxworks

220
00:07:28,319 --> 00:07:30,240
by a company named wind river if you're

221
00:07:30,240 --> 00:07:32,080
interested in more in-depth look on

222
00:07:32,080 --> 00:07:32,639
those

223
00:07:32,639 --> 00:07:35,919
go see our black hat talk at 2019 black

224
00:07:35,919 --> 00:07:37,039
at usa

225
00:07:37,039 --> 00:07:38,639
it's important to say that barack's

226
00:07:38,639 --> 00:07:40,639
hidden debugger is the os default

227
00:07:40,639 --> 00:07:42,319
vxworks default debugger which is

228
00:07:42,319 --> 00:07:43,680
compiled in

229
00:07:43,680 --> 00:07:47,280
to the firmware so first thing first why

230
00:07:47,280 --> 00:07:48,240
did we even do

231
00:07:48,240 --> 00:07:51,039
urgent 11 weird armies believe that

232
00:07:51,039 --> 00:07:52,479
shedding a light on a hidden attack

233
00:07:52,479 --> 00:07:54,479
surface is much better than hardening an

234
00:07:54,479 --> 00:07:55,280
existing one

235
00:07:55,280 --> 00:07:56,879
after all there are many talented

236
00:07:56,879 --> 00:07:58,720
researchers that look at windows or

237
00:07:58,720 --> 00:07:59,520
linux

238
00:07:59,520 --> 00:08:03,039
just as an example windows had 357 cvs

239
00:08:03,039 --> 00:08:06,240
on mitre for 2019 and vix works had

240
00:08:06,240 --> 00:08:09,360
only 13 cvs ever before we added another

241
00:08:09,360 --> 00:08:10,960
11 with our research

242
00:08:10,960 --> 00:08:12,800
so there's a really big research gap

243
00:08:12,800 --> 00:08:14,400
there

244
00:08:14,400 --> 00:08:17,360
so let's go back to what is vxworks i'm

245
00:08:17,360 --> 00:08:18,400
gonna do a really

246
00:08:18,400 --> 00:08:20,160
quick recap of urgent 11 and the

247
00:08:20,160 --> 00:08:21,440
vulnerabilities so

248
00:08:21,440 --> 00:08:24,720
vxworks is the is a real-time operating

249
00:08:24,720 --> 00:08:27,039
system owned by wayne river and used by

250
00:08:27,039 --> 00:08:29,199
more than 2 000 device manufacturers

251
00:08:29,199 --> 00:08:30,879
that need a reliable and compact

252
00:08:30,879 --> 00:08:32,240
operating system

253
00:08:32,240 --> 00:08:34,000
real-time operating system excel is

254
00:08:34,000 --> 00:08:35,440
being compact and reliable

255
00:08:35,440 --> 00:08:37,519
and can deliver deterministic timing for

256
00:08:37,519 --> 00:08:38,958
various tasks

257
00:08:38,958 --> 00:08:40,559
this feature usually fit well with

258
00:08:40,559 --> 00:08:42,559
various embedded devices and as barack

259
00:08:42,559 --> 00:08:43,919
previously mentioned

260
00:08:43,919 --> 00:08:47,360
the ot industry likes it to use exactly

261
00:08:47,360 --> 00:08:48,160
that

262
00:08:48,160 --> 00:08:50,240
vxworks is the most popular real-time

263
00:08:50,240 --> 00:08:52,080
operating system and it runs over 2

264
00:08:52,080 --> 00:08:53,360
billion devices

265
00:08:53,360 --> 00:08:54,959
the same number of devices that are

266
00:08:54,959 --> 00:08:56,880
actually powered by android or windows

267
00:08:56,880 --> 00:08:57,760
so a pretty

268
00:08:57,760 --> 00:09:00,000
large amount of devices but unlike

269
00:09:00,000 --> 00:09:01,920
android or windows this always suffers

270
00:09:01,920 --> 00:09:03,440
from a lack of research

271
00:09:03,440 --> 00:09:06,880
in its 3 32 years of existence only 13

272
00:09:06,880 --> 00:09:08,240
cvs were

273
00:09:08,240 --> 00:09:10,160
listed as i mentioned until we added

274
00:09:10,160 --> 00:09:13,519
another 11 and jumped that number to 24.

275
00:09:13,519 --> 00:09:17,120
in comparison adroid has over than 2 000

276
00:09:17,120 --> 00:09:20,080
cv is in existence and it exists about a

277
00:09:20,080 --> 00:09:22,800
quarter of the time

278
00:09:22,800 --> 00:09:24,880
so now that i have convinced you that vx

279
00:09:24,880 --> 00:09:26,480
works is a pretty big

280
00:09:26,480 --> 00:09:29,440
research gap i can i will now talk about

281
00:09:29,440 --> 00:09:31,519
where is vx works and where is it used

282
00:09:31,519 --> 00:09:33,519
vix works is indeed in almost every

283
00:09:33,519 --> 00:09:34,839
industry in healthcare

284
00:09:34,839 --> 00:09:37,839
aerospace and et cetera and obviously in

285
00:09:37,839 --> 00:09:39,040
manufacturing

286
00:09:39,040 --> 00:09:40,800
basically if your vendor who is in need

287
00:09:40,800 --> 00:09:43,279
of a reliable standardized and embedded

288
00:09:43,279 --> 00:09:46,000
real-time operating system vxworks will

289
00:09:46,000 --> 00:09:48,720
likely be your go-to tool

290
00:09:48,720 --> 00:09:50,720
and in fact you can see that the largest

291
00:09:50,720 --> 00:09:52,880
companies in their field

292
00:09:52,880 --> 00:09:55,760
uses vx works in their in their devices

293
00:09:55,760 --> 00:09:57,519
you can see here a lot of really big

294
00:09:57,519 --> 00:09:58,399
names

295
00:09:58,399 --> 00:10:01,760
such as rockwell automation siemens uh

296
00:10:01,760 --> 00:10:05,040
alcatel and so on and so forth schneider

297
00:10:05,040 --> 00:10:06,000
electric

298
00:10:06,000 --> 00:10:08,399
a lot of really big vendors use vxworks

299
00:10:08,399 --> 00:10:09,440
and even

300
00:10:09,440 --> 00:10:12,320
nasa uses vx works to run to power its

301
00:10:12,320 --> 00:10:13,360
previous

302
00:10:13,360 --> 00:10:16,959
mars rover the curiosity

303
00:10:16,959 --> 00:10:20,000
so what is urgent 11 it's 11

304
00:10:20,000 --> 00:10:22,000
vulnerabilities in the ip stack of

305
00:10:22,000 --> 00:10:24,399
vxworks which is basically a different

306
00:10:24,399 --> 00:10:26,399
component inside of the system that is

307
00:10:26,399 --> 00:10:28,399
responsible for the networking

308
00:10:28,399 --> 00:10:31,120
of the device we have six our remote

309
00:10:31,120 --> 00:10:32,240
code execution

310
00:10:32,240 --> 00:10:34,240
and five information links denial of

311
00:10:34,240 --> 00:10:36,560
services and logical flaws

312
00:10:36,560 --> 00:10:38,959
that in the context of ot and

313
00:10:38,959 --> 00:10:40,800
manufacturing denial of service is

314
00:10:40,800 --> 00:10:43,120
almost as bad as remote code execution

315
00:10:43,120 --> 00:10:43,760
from

316
00:10:43,760 --> 00:10:47,120
for obvious reasons so during

317
00:10:47,120 --> 00:10:50,320
our disclosure process we encountered a

318
00:10:50,320 --> 00:10:50,800
really

319
00:10:50,800 --> 00:10:53,440
big problem because the vulnerabilities

320
00:10:53,440 --> 00:10:54,160
that we found

321
00:10:54,160 --> 00:10:56,880
was inside of the interpic ip stack

322
00:10:56,880 --> 00:10:58,399
inside of vxworks

323
00:10:58,399 --> 00:11:00,399
and actually this ibis tech that was

324
00:11:00,399 --> 00:11:01,920
developed by interpic

325
00:11:01,920 --> 00:11:03,680
was acquired the whole company was

326
00:11:03,680 --> 00:11:05,040
acquired by wind river

327
00:11:05,040 --> 00:11:08,160
in 2007 but unfortunately

328
00:11:08,160 --> 00:11:10,560
interpig had different customers before

329
00:11:10,560 --> 00:11:13,200
it was acquired so it sold its ip stack

330
00:11:13,200 --> 00:11:14,399
to integrity os

331
00:11:14,399 --> 00:11:16,720
nucleus os and the schematic on the

332
00:11:16,720 --> 00:11:18,480
bottom you can see is icron

333
00:11:18,480 --> 00:11:21,440
in now osc all of those operating

334
00:11:21,440 --> 00:11:22,079
systems

335
00:11:22,079 --> 00:11:25,040
have some version of them that has the

336
00:11:25,040 --> 00:11:26,720
vulnerable ip stack and thus

337
00:11:26,720 --> 00:11:28,720
are vulnerable to urgent 11

338
00:11:28,720 --> 00:11:30,000
vulnerabilities

339
00:11:30,000 --> 00:11:32,000
and once we tried to patch and fix all

340
00:11:32,000 --> 00:11:33,680
of this we found that

341
00:11:33,680 --> 00:11:36,800
actually vendors buy an

342
00:11:36,800 --> 00:11:39,200
operating system puts it in a device and

343
00:11:39,200 --> 00:11:40,959
inside this operating system there is

344
00:11:40,959 --> 00:11:42,640
the vulnerable hyperstack so basically

345
00:11:42,640 --> 00:11:43,760
you have a supply chain

346
00:11:43,760 --> 00:11:45,760
inside your supply chain which makes

347
00:11:45,760 --> 00:11:48,320
patches incredibly hard and mitigation

348
00:11:48,320 --> 00:11:49,519
even worse

349
00:11:49,519 --> 00:11:53,360
so now that we talked about all that

350
00:11:53,360 --> 00:11:55,920
let's enough of the high-level stuff

351
00:11:55,920 --> 00:11:57,680
let's go back to the bits

352
00:11:57,680 --> 00:12:00,079
so remember that barack mentions that a

353
00:12:00,079 --> 00:12:02,720
plc has a magic ip that binds

354
00:12:02,720 --> 00:12:04,240
that he binds to and activates the

355
00:12:04,240 --> 00:12:06,000
debugger so let's talk about one of the

356
00:12:06,000 --> 00:12:07,760
logical flaws that we found which is the

357
00:12:07,760 --> 00:12:08,320
reverse

358
00:12:08,320 --> 00:12:11,760
arp one there are so what is reverse arp

359
00:12:11,760 --> 00:12:13,519
basically we all see in this diagram

360
00:12:13,519 --> 00:12:14,800
this network diagram

361
00:12:14,800 --> 00:12:16,880
you see a arp request a client asking

362
00:12:16,880 --> 00:12:18,480
the network who has that

363
00:12:18,480 --> 00:12:20,720
ip i am the type and the device should

364
00:12:20,720 --> 00:12:22,320
answer so reverse up

365
00:12:22,320 --> 00:12:25,519
works like this a device sends

366
00:12:25,519 --> 00:12:27,519
to another device on the network hey

367
00:12:27,519 --> 00:12:30,240
device this is your ip and vx works by

368
00:12:30,240 --> 00:12:32,000
default responds by

369
00:12:32,000 --> 00:12:35,120
okay thanks which is kind of weird

370
00:12:35,120 --> 00:12:37,200
it's actually a state confusion inside

371
00:12:37,200 --> 00:12:38,240
of the

372
00:12:38,240 --> 00:12:41,120
machine that manages the reverse app and

373
00:12:41,120 --> 00:12:43,040
most of the modern devices doesn't even

374
00:12:43,040 --> 00:12:44,959
support this

375
00:12:44,959 --> 00:12:47,839
so on to the next vulnerability you can

376
00:12:47,839 --> 00:12:49,680
imagine we can use that one to activate

377
00:12:49,680 --> 00:12:51,519
all of the hidden debug features and so

378
00:12:51,519 --> 00:12:52,000
on and so

379
00:12:52,000 --> 00:12:54,240
forth and the next one is a bit more

380
00:12:54,240 --> 00:12:57,440
interesting it's the ip options

381
00:12:57,440 --> 00:12:59,760
overflow so to talk about that we're

382
00:12:59,760 --> 00:13:00,880
going to need to talk about

383
00:13:00,880 --> 00:13:03,680
what is ip options ipo options is

384
00:13:03,680 --> 00:13:05,279
basically a way to extend the ib

385
00:13:05,279 --> 00:13:07,200
protocol and it's obviously implemented

386
00:13:07,200 --> 00:13:09,120
inside of the ip header

387
00:13:09,120 --> 00:13:12,240
the ip header has a field of the ip

388
00:13:12,240 --> 00:13:14,079
options and it consists of an array of a

389
00:13:14,079 --> 00:13:15,839
type length value

390
00:13:15,839 --> 00:13:18,320
fills that every option has a unique

391
00:13:18,320 --> 00:13:20,320
type it specifies the length and inside

392
00:13:20,320 --> 00:13:21,680
the value it can specify

393
00:13:21,680 --> 00:13:24,800
its own data structure this one this

394
00:13:24,800 --> 00:13:25,600
time we're gonna

395
00:13:25,600 --> 00:13:28,480
focus on a specific ip option which is

396
00:13:28,480 --> 00:13:30,720
the strict source and record routing

397
00:13:30,720 --> 00:13:33,760
the ssr one this option basically lets

398
00:13:33,760 --> 00:13:35,839
the sender specify the route in which

399
00:13:35,839 --> 00:13:37,440
the packet must go through in order to

400
00:13:37,440 --> 00:13:39,680
reach its destination and router must

401
00:13:39,680 --> 00:13:42,480
accept that just by saying that you can

402
00:13:42,480 --> 00:13:43,760
already imagine the security

403
00:13:43,760 --> 00:13:45,360
implications of it and

404
00:13:45,360 --> 00:13:47,040
that's why it's a common practice to

405
00:13:47,040 --> 00:13:49,199
ignore such an ip options but vxwork

406
00:13:49,199 --> 00:13:51,120
supports this to some degree as

407
00:13:51,120 --> 00:13:54,560
we will see so this is basically

408
00:13:54,560 --> 00:13:56,959
the the route data inside of the ssr

409
00:13:56,959 --> 00:13:58,880
option basically it's an array of

410
00:13:58,880 --> 00:14:01,040
ip addresses that packet must bounce

411
00:14:01,040 --> 00:14:03,120
through and a pointer which points to

412
00:14:03,120 --> 00:14:04,000
the current

413
00:14:04,000 --> 00:14:07,040
ip address the actual usage of it would

414
00:14:07,040 --> 00:14:08,720
look something like that

415
00:14:08,720 --> 00:14:11,600
a client first composes the route data

416
00:14:11,600 --> 00:14:13,360
of all the routers he wants the packet

417
00:14:13,360 --> 00:14:15,199
to go through it sends the packets to

418
00:14:15,199 --> 00:14:15,839
the foot

419
00:14:15,839 --> 00:14:19,120
the first hop and sets the last hop to

420
00:14:19,120 --> 00:14:20,399
be the destination

421
00:14:20,399 --> 00:14:22,000
it sets the pointer to the first of the

422
00:14:22,000 --> 00:14:24,160
route data and then it sends the packet

423
00:14:24,160 --> 00:14:26,079
the first router takes the pointer

424
00:14:26,079 --> 00:14:27,279
advances it

425
00:14:27,279 --> 00:14:29,199
changes the destination puts himself

426
00:14:29,199 --> 00:14:31,440
back in the raw data list

427
00:14:31,440 --> 00:14:34,240
this happens successively until we reach

428
00:14:34,240 --> 00:14:35,839
the final router who advances the

429
00:14:35,839 --> 00:14:37,440
pointer beyond around

430
00:14:37,440 --> 00:14:38,959
the rao data and that way the

431
00:14:38,959 --> 00:14:41,600
destination knows he is the actual

432
00:14:41,600 --> 00:14:43,040
destination of the packet and not just

433
00:14:43,040 --> 00:14:44,880
the router on the way

434
00:14:44,880 --> 00:14:46,560
once he receives the packet and he wants

435
00:14:46,560 --> 00:14:48,800
to reply to it he must respect

436
00:14:48,800 --> 00:14:51,839
the ssl option even in the response

437
00:14:51,839 --> 00:14:53,279
meaning you have to reverse

438
00:14:53,279 --> 00:14:55,120
the route data and send packet in the

439
00:14:55,120 --> 00:14:56,720
reverse order

440
00:14:56,720 --> 00:14:59,760
okay so far so good

441
00:14:59,760 --> 00:15:01,680
but there is another mechanism in play

442
00:15:01,680 --> 00:15:04,079
here which is the icmp arrow one

443
00:15:04,079 --> 00:15:07,279
icmpls are basically uh

444
00:15:07,279 --> 00:15:09,199
are basically errors that can be

445
00:15:09,199 --> 00:15:10,639
triggered through a lot of network

446
00:15:10,639 --> 00:15:12,320
scenarios i'm going to demonstrate

447
00:15:12,320 --> 00:15:14,320
i think one of the most common ones a

448
00:15:14,320 --> 00:15:16,560
client sends data to a server on a port

449
00:15:16,560 --> 00:15:18,240
on which the server does not listen on

450
00:15:18,240 --> 00:15:19,120
and the server

451
00:15:19,120 --> 00:15:21,040
receives the data once to inform the

452
00:15:21,040 --> 00:15:23,040
client that an error has occurred

453
00:15:23,040 --> 00:15:24,959
what the server does is basically wraps

454
00:15:24,959 --> 00:15:27,040
the packet inside of an icmp packet

455
00:15:27,040 --> 00:15:29,600
specified the icmp type to be an smp

456
00:15:29,600 --> 00:15:30,079
error

457
00:15:30,079 --> 00:15:32,079
in this case in this case port

458
00:15:32,079 --> 00:15:33,680
unreachable and then sends the packet

459
00:15:33,680 --> 00:15:36,160
back to the client so he would know

460
00:15:36,160 --> 00:15:39,279
what packet caused the level so far so

461
00:15:39,279 --> 00:15:41,279
good but what if i tell you the illness

462
00:15:41,279 --> 00:15:44,320
packet came with an ssr option within it

463
00:15:44,320 --> 00:15:47,120
should you now copy the route data back

464
00:15:47,120 --> 00:15:48,959
inside the ic imperial

465
00:15:48,959 --> 00:15:52,240
and if so what if the errors happened

466
00:15:52,240 --> 00:15:54,160
during the parsing of an ip option

467
00:15:54,160 --> 00:15:56,320
specifically this ssr one should you

468
00:15:56,320 --> 00:15:57,440
still copy the data

469
00:15:57,440 --> 00:16:00,160
it seems not such a good idea it's kind

470
00:16:00,160 --> 00:16:01,920
of tricky and not well defined

471
00:16:01,920 --> 00:16:06,000
so let's just watch vxworks take on this

472
00:16:06,000 --> 00:16:08,079
this is a simplified overview of the

473
00:16:08,079 --> 00:16:10,399
code flow that ipacket takes inside of

474
00:16:10,399 --> 00:16:12,079
vxworks ip machine

475
00:16:12,079 --> 00:16:14,399
handling system the first two steps

476
00:16:14,399 --> 00:16:15,279
validates

477
00:16:15,279 --> 00:16:18,320
validates and sanitizes the packet and

478
00:16:18,320 --> 00:16:20,959
delivers it to the layer 3 handlers

479
00:16:20,959 --> 00:16:21,920
basically

480
00:16:21,920 --> 00:16:24,720
let's imagine an ip icmp echo request

481
00:16:24,720 --> 00:16:25,680
arrives

482
00:16:25,680 --> 00:16:27,680
then this machine will validate the

483
00:16:27,680 --> 00:16:28,800
packet

484
00:16:28,800 --> 00:16:31,040
do all the route logic and once the

485
00:16:31,040 --> 00:16:33,040
packet is validated and sanitized it

486
00:16:33,040 --> 00:16:33,360
will

487
00:16:33,360 --> 00:16:35,519
deliver it to the icmp handler which in

488
00:16:35,519 --> 00:16:37,120
this case would generate an

489
00:16:37,120 --> 00:16:40,399
icmp response echo response

490
00:16:40,399 --> 00:16:42,880
but this works try to be generic on this

491
00:16:42,880 --> 00:16:45,199
and use only one function to send icmp

492
00:16:45,199 --> 00:16:45,839
packets

493
00:16:45,839 --> 00:16:49,279
so the icmp the ipnet icmp4 send

494
00:16:49,279 --> 00:16:51,279
a function is called from different

495
00:16:51,279 --> 00:16:52,639
branches even

496
00:16:52,639 --> 00:16:55,199
if it's a successful one such as an echo

497
00:16:55,199 --> 00:16:57,680
response or even a failing one such as

498
00:16:57,680 --> 00:17:00,800
a param problem which happens during the

499
00:17:00,800 --> 00:17:01,759
validation

500
00:17:01,759 --> 00:17:04,240
of the ip options and how does this

501
00:17:04,240 --> 00:17:05,839
function handle being called from

502
00:17:05,839 --> 00:17:07,199
different branches

503
00:17:07,199 --> 00:17:09,359
you guessed it it does not it just

504
00:17:09,359 --> 00:17:10,880
blindly tries to copy

505
00:17:10,880 --> 00:17:12,799
all of the ip options into the new

506
00:17:12,799 --> 00:17:14,160
packet

507
00:17:14,160 --> 00:17:16,240
which can obviously cause an error if

508
00:17:16,240 --> 00:17:18,079
the options are malformed

509
00:17:18,079 --> 00:17:19,599
here you can see in the mem copy in the

510
00:17:19,599 --> 00:17:21,679
length field you can specify

511
00:17:21,679 --> 00:17:24,079
an a problematic length feed which will

512
00:17:24,079 --> 00:17:25,199
fail the validation

513
00:17:25,199 --> 00:17:27,359
but still will be called this function

514
00:17:27,359 --> 00:17:29,600
will still be called and try to copy it

515
00:17:29,600 --> 00:17:31,600
and also there's an another flaw here

516
00:17:31,600 --> 00:17:32,799
which you can specify

517
00:17:32,799 --> 00:17:35,520
only one ip option per packet and it

518
00:17:35,520 --> 00:17:37,039
does not validate there is no

519
00:17:37,039 --> 00:17:39,360
duplicate options so basically you can

520
00:17:39,360 --> 00:17:41,760
specify a whole bunch of sslr options

521
00:17:41,760 --> 00:17:42,080
with

522
00:17:42,080 --> 00:17:44,720
invalid length and it will try and run

523
00:17:44,720 --> 00:17:46,320
this mem copy on every single one of

524
00:17:46,320 --> 00:17:47,039
them which

525
00:17:47,039 --> 00:17:49,440
will cause an stack overflow inside of

526
00:17:49,440 --> 00:17:51,919
the ip stack

527
00:17:51,919 --> 00:17:53,600
okay so now i'm going to transfer to

528
00:17:53,600 --> 00:17:55,360
borac thank you

529
00:17:55,360 --> 00:17:56,880
we started out by checking the

530
00:17:56,880 --> 00:17:58,400
development that the vulnerability

531
00:17:58,400 --> 00:17:59,520
actually works

532
00:17:59,520 --> 00:18:01,440
so we turned on the device file up the

533
00:18:01,440 --> 00:18:02,640
malicious packets with

534
00:18:02,640 --> 00:18:06,480
aaa as the payload and watch them crash

535
00:18:06,480 --> 00:18:08,480
here is the result you can see on the

536
00:18:08,480 --> 00:18:10,480
screen that the device crashes on

537
00:18:10,480 --> 00:18:13,360
tns0 task which is the ipinenet task and

538
00:18:13,360 --> 00:18:15,120
the pc the program counter

539
00:18:15,120 --> 00:18:17,520
is four one four one four one four zero

540
00:18:17,520 --> 00:18:19,280
which means it's a tackle control

541
00:18:19,280 --> 00:18:21,039
it ends with four zero because jumping

542
00:18:21,039 --> 00:18:23,520
to an odd address in our architecture

543
00:18:23,520 --> 00:18:25,600
actually jumps to the even address and

544
00:18:25,600 --> 00:18:27,200
sets the mode the thumb

545
00:18:27,200 --> 00:18:29,280
so yeah we have full control over the

546
00:18:29,280 --> 00:18:32,960
program code program counter

547
00:18:32,960 --> 00:18:35,440
next we wanted to find better crash

548
00:18:35,440 --> 00:18:36,640
crash messages

549
00:18:36,640 --> 00:18:38,480
for the local plc we found the web

550
00:18:38,480 --> 00:18:40,720
interface with a lot of useful data

551
00:18:40,720 --> 00:18:42,960
one of those is the assert log which

552
00:18:42,960 --> 00:18:44,880
logs the crash messages including the

553
00:18:44,880 --> 00:18:46,080
program counter and

554
00:18:46,080 --> 00:18:48,880
the error that caused the crash for the

555
00:18:48,880 --> 00:18:50,960
schneider plc we found that there is a

556
00:18:50,960 --> 00:18:51,679
command

557
00:18:51,679 --> 00:18:54,080
that you can send for reading the last

558
00:18:54,080 --> 00:18:56,400
crash message including the registers

559
00:18:56,400 --> 00:18:58,080
so now we have the ability to see what

560
00:18:58,080 --> 00:19:00,160
happens when the device crashes

561
00:19:00,160 --> 00:19:01,919
couple that with the debugger from the

562
00:19:01,919 --> 00:19:03,840
one day we've mentioned before

563
00:19:03,840 --> 00:19:05,440
and the conditions are perfect for

564
00:19:05,440 --> 00:19:08,320
exploit development

565
00:19:08,640 --> 00:19:10,799
after that we looked at the binaries and

566
00:19:10,799 --> 00:19:12,559
found this data structure

567
00:19:12,559 --> 00:19:16,080
every record starts with this 50 000 hex

568
00:19:16,080 --> 00:19:17,840
and then there are two addresses when

569
00:19:17,840 --> 00:19:19,919
telling ida these are offsets

570
00:19:19,919 --> 00:19:23,200
we get this so

571
00:19:23,200 --> 00:19:25,280
this is the symbol table and now we have

572
00:19:25,280 --> 00:19:27,039
the names of most of the functions and

573
00:19:27,039 --> 00:19:29,200
also of many global variables

574
00:19:29,200 --> 00:19:30,720
from the function names we could

575
00:19:30,720 --> 00:19:32,160
conclude that some of the code was

576
00:19:32,160 --> 00:19:33,120
written in c

577
00:19:33,120 --> 00:19:35,120
plus while the operating system was

578
00:19:35,120 --> 00:19:36,480
written in c

579
00:19:36,480 --> 00:19:41,200
and it all made one big happy binary

580
00:19:41,360 --> 00:19:43,120
for the actual exploitation we checked

581
00:19:43,120 --> 00:19:45,200
what mitigations we're up against

582
00:19:45,200 --> 00:19:47,840
we found that there is an xbit the code

583
00:19:47,840 --> 00:19:49,600
is right protected and the stack is not

584
00:19:49,600 --> 00:19:50,480
executable

585
00:19:50,480 --> 00:19:52,960
but that's all there is no slr or any

586
00:19:52,960 --> 00:19:55,360
other type of mitigation

587
00:19:55,360 --> 00:19:57,760
that means that the code and stack

588
00:19:57,760 --> 00:19:59,360
locations are static

589
00:19:59,360 --> 00:20:01,200
it eases the exploitation development a

590
00:20:01,200 --> 00:20:03,200
lot because now we know that the memory

591
00:20:03,200 --> 00:20:04,720
layout is deterministic

592
00:20:04,720 --> 00:20:06,559
there is no need for any type of info

593
00:20:06,559 --> 00:20:08,880
leak for the upcoming exploitation to

594
00:20:08,880 --> 00:20:11,200
work

595
00:20:11,679 --> 00:20:13,760
we explored what primitives we can get

596
00:20:13,760 --> 00:20:15,360
out of the urgent 11 ip options

597
00:20:15,360 --> 00:20:16,400
vulnerability

598
00:20:16,400 --> 00:20:18,400
and we found that after all the bytes

599
00:20:18,400 --> 00:20:20,240
juggling but the function does

600
00:20:20,240 --> 00:20:22,320
with the ip options we have control over

601
00:20:22,320 --> 00:20:23,760
almost seven day words

602
00:20:23,760 --> 00:20:26,240
on the stack and we can control which

603
00:20:26,240 --> 00:20:28,159
divorce these are going to be

604
00:20:28,159 --> 00:20:30,720
since the stack is non-executable we

605
00:20:30,720 --> 00:20:32,320
figured that we will need to make

606
00:20:32,320 --> 00:20:34,480
a right what well out of this stack

607
00:20:34,480 --> 00:20:36,559
overflow and write our shell code in

608
00:20:36,559 --> 00:20:37,039
chunks

609
00:20:37,039 --> 00:20:39,679
somewhere else for that we are going to

610
00:20:39,679 --> 00:20:40,080
use

611
00:20:40,080 --> 00:20:42,960
register 10 and register 11 hopefully

612
00:20:42,960 --> 00:20:45,039
finding a gadget that write the data in

613
00:20:45,039 --> 00:20:45,760
one of them

614
00:20:45,760 --> 00:20:48,320
to the offset in the other one we also

615
00:20:48,320 --> 00:20:49,200
overwrite

616
00:20:49,200 --> 00:20:51,840
a pc and play other keywords so that we

617
00:20:51,840 --> 00:20:52,400
can have

618
00:20:52,400 --> 00:20:55,360
a 4d world rope return oriented

619
00:20:55,360 --> 00:20:57,120
programming chain

620
00:20:57,120 --> 00:20:59,600
in the table on the right you can see

621
00:20:59,600 --> 00:21:01,200
the actual data in the stack

622
00:21:01,200 --> 00:21:03,600
when we send an exploit with the a

623
00:21:03,600 --> 00:21:05,039
letter for one in ascii

624
00:21:05,039 --> 00:21:07,520
all over the buffer as i said we have

625
00:21:07,520 --> 00:21:09,520
full control over register 10

626
00:21:09,520 --> 00:21:12,240
11 the pc and three other debugs while

627
00:21:12,240 --> 00:21:12,960
registers

628
00:21:12,960 --> 00:21:15,280
five to nine are filled with mostly

629
00:21:15,280 --> 00:21:18,158
uncontrolled data

630
00:21:18,480 --> 00:21:20,720
so we found this gadget it takes

631
00:21:20,720 --> 00:21:23,360
register 10 and writes it to register 11

632
00:21:23,360 --> 00:21:24,480
plus one ac

633
00:21:24,480 --> 00:21:26,320
so we just need to take the address we

634
00:21:26,320 --> 00:21:28,799
want to write to subtract one ac

635
00:21:28,799 --> 00:21:31,360
and put the value in register 11. after

636
00:21:31,360 --> 00:21:33,440
that it zeroes out register 1 and

637
00:21:33,440 --> 00:21:36,559
register 0 adds 18x to this to the stack

638
00:21:36,559 --> 00:21:37,280
pointer

639
00:21:37,280 --> 00:21:39,760
pop some registers and returns now we

640
00:21:39,760 --> 00:21:41,919
need to somehow restore the execution

641
00:21:41,919 --> 00:21:44,159
so the device won't crash every time

642
00:21:44,159 --> 00:21:47,600
with trigger the vulnerability

643
00:21:47,679 --> 00:21:49,919
let's look at the epilogue of the upper

644
00:21:49,919 --> 00:21:51,600
function the one that called the

645
00:21:51,600 --> 00:21:52,960
vulnerable ipnet

646
00:21:52,960 --> 00:21:56,080
icmp4 send it ends with a pop of

647
00:21:56,080 --> 00:21:56,960
register 10

648
00:21:56,960 --> 00:22:00,400
11 and pc you can see that in the table

649
00:22:00,400 --> 00:22:02,400
on the right the overflow overwrites the

650
00:22:02,400 --> 00:22:04,000
return address in the current stack

651
00:22:04,000 --> 00:22:04,480
frame

652
00:22:04,480 --> 00:22:06,159
but the upper stack frame remains

653
00:22:06,159 --> 00:22:08,400
untouched by using a gadget that will

654
00:22:08,400 --> 00:22:10,559
pop this untouched value from the upper

655
00:22:10,559 --> 00:22:12,320
frame we can restore the normal flow of

656
00:22:12,320 --> 00:22:12,960
the code

657
00:22:12,960 --> 00:22:16,640
and prevent the device from crashing

658
00:22:16,640 --> 00:22:19,280
we found these gadgets the first one

659
00:22:19,280 --> 00:22:21,120
puts the value of register 11 in

660
00:22:21,120 --> 00:22:22,240
register 12

661
00:22:22,240 --> 00:22:24,320
and the second one adds register 12 to

662
00:22:24,320 --> 00:22:25,280
the stack pointer

663
00:22:25,280 --> 00:22:28,640
and pops registers 6 to 11 and the pc

664
00:22:28,640 --> 00:22:30,320
just like we wanted for execution

665
00:22:30,320 --> 00:22:32,799
restoration restoration

666
00:22:32,799 --> 00:22:35,280
when we set register 11 to 18x the

667
00:22:35,280 --> 00:22:36,640
device doesn't crash

668
00:22:36,640 --> 00:22:38,400
so we just need to take the rightward

669
00:22:38,400 --> 00:22:40,640
where gadget from before and maybe add

670
00:22:40,640 --> 00:22:41,679
another gadget

671
00:22:41,679 --> 00:22:46,000
so that it also restores the upper frame

672
00:22:46,240 --> 00:22:49,120
all we needed to add is just one pop and

673
00:22:49,120 --> 00:22:50,240
return gadget

674
00:22:50,240 --> 00:22:52,320
and now we have a lightweight exploit

675
00:22:52,320 --> 00:22:54,240
that doesn't crash the device and we can

676
00:22:54,240 --> 00:22:56,400
use it to write our shell code in chunks

677
00:22:56,400 --> 00:23:00,240
somewhere else for the local plc we

678
00:23:00,240 --> 00:23:01,280
found a code

679
00:23:01,280 --> 00:23:04,240
a code cave that is writable zeroed out

680
00:23:04,240 --> 00:23:05,360
and executable

681
00:23:05,360 --> 00:23:07,760
that means game over for the local plc

682
00:23:07,760 --> 00:23:09,440
we just write the shell code

683
00:23:09,440 --> 00:23:11,520
and jump to that address for the

684
00:23:11,520 --> 00:23:14,320
schneider plc we needed an extra step

685
00:23:14,320 --> 00:23:16,080
we use the rightware tool functionality

686
00:23:16,080 --> 00:23:18,400
to write an unconstrained drop chain

687
00:23:18,400 --> 00:23:21,039
that adds execute permissions to our

688
00:23:21,039 --> 00:23:22,480
code and from that point

689
00:23:22,480 --> 00:23:25,039
it's the same as if it was as it was

690
00:23:25,039 --> 00:23:27,679
with the local plc

691
00:23:27,679 --> 00:23:29,840
we merged everything together and wanted

692
00:23:29,840 --> 00:23:31,520
to make sure we have full control

693
00:23:31,520 --> 00:23:33,679
over these devices so we decided we will

694
00:23:33,679 --> 00:23:35,840
try writing something to the 4 byte

695
00:23:35,840 --> 00:23:39,039
monitor of the local plc

696
00:23:39,039 --> 00:23:41,520
and yeah after a lot of debugging a lot

697
00:23:41,520 --> 00:23:42,320
of debugging

698
00:23:42,320 --> 00:23:44,240
it worked we were able to write to the

699
00:23:44,240 --> 00:23:45,760
device monitor while it was still

700
00:23:45,760 --> 00:23:47,279
functioning properly

701
00:23:47,279 --> 00:23:49,279
let's do something more complicated or

702
00:23:49,279 --> 00:23:53,200
in other words time for some demos

703
00:23:55,679 --> 00:23:58,640
okay so as you can see and we control

704
00:23:58,640 --> 00:24:00,159
what's written to the device and

705
00:24:00,159 --> 00:24:01,919
everything else is still green so the

706
00:24:01,919 --> 00:24:04,159
plc is still functioning normally

707
00:24:04,159 --> 00:24:06,640
and can continues doing its normal task

708
00:24:06,640 --> 00:24:07,840
while our task

709
00:24:07,840 --> 00:24:11,760
writes to the monitor of the device

710
00:24:12,559 --> 00:24:14,640
for schneider we had a very similar

711
00:24:14,640 --> 00:24:15,840
exploitation

712
00:24:15,840 --> 00:24:19,440
so um there is no display on this plc

713
00:24:19,440 --> 00:24:21,279
so we use the morse code to send a

714
00:24:21,279 --> 00:24:22,480
distress signal

715
00:24:22,480 --> 00:24:26,960
using the plc leds so let's

716
00:24:26,960 --> 00:24:30,080
start the video

717
00:24:30,880 --> 00:24:32,799
okay on the right you see the attacker

718
00:24:32,799 --> 00:24:35,279
terminal

719
00:24:35,760 --> 00:24:38,159
and in a second you'll see on the top

720
00:24:38,159 --> 00:24:39,520
left

721
00:24:39,520 --> 00:24:42,320
the leds of the plc and on the bottom

722
00:24:42,320 --> 00:24:42,799
you see

723
00:24:42,799 --> 00:24:44,480
the packets that are being sent and you

724
00:24:44,480 --> 00:24:46,240
can see that the lead

725
00:24:46,240 --> 00:24:50,000
signals sos so the plc is trying to

726
00:24:50,000 --> 00:24:52,960
signal something out

727
00:24:56,159 --> 00:24:59,200
the next demo is a broadcast attack for

728
00:24:59,200 --> 00:25:00,159
this demo

729
00:25:00,159 --> 00:25:04,080
we used um the rockwell plc

730
00:25:04,080 --> 00:25:07,279
and schneider plc on the top and

731
00:25:07,279 --> 00:25:09,039
the local plc is connected to a

732
00:25:09,039 --> 00:25:10,559
powerflex model control

733
00:25:10,559 --> 00:25:13,520
controller which connects to an actual

734
00:25:13,520 --> 00:25:14,559
motor

735
00:25:14,559 --> 00:25:17,840
and we'll start this

736
00:25:17,840 --> 00:25:20,240
okay so you see the mods are spinning

737
00:25:20,240 --> 00:25:21,600
and you see the screens of both

738
00:25:21,600 --> 00:25:25,439
both of the plcs on the top left

739
00:25:27,360 --> 00:25:30,320
okay now we have a wireshark view and

740
00:25:30,320 --> 00:25:32,000
the attacker view

741
00:25:32,000 --> 00:25:34,720
sending one packet that will crush both

742
00:25:34,720 --> 00:25:43,039
of these devices

743
00:25:43,039 --> 00:25:44,960
okay the packet is sent both of the

744
00:25:44,960 --> 00:25:46,400
devices crash

745
00:25:46,400 --> 00:25:48,000
and as you can see the motor stopped

746
00:25:48,000 --> 00:25:49,919
working now i want to mention

747
00:25:49,919 --> 00:25:52,159
that when this happens the device

748
00:25:52,159 --> 00:25:53,200
doesn't reboot

749
00:25:53,200 --> 00:25:56,799
so it will not work properly until

750
00:25:56,799 --> 00:25:59,840
someone physically comes to this to

751
00:25:59,840 --> 00:26:00,960
these plcs

752
00:26:00,960 --> 00:26:02,960
and reboots them physically you can't do

753
00:26:02,960 --> 00:26:04,880
this from afar

754
00:26:04,880 --> 00:26:07,440
and so this kind of attack can be

755
00:26:07,440 --> 00:26:09,679
devastating for an actual

756
00:26:09,679 --> 00:26:13,120
plant of some some sort

757
00:26:16,880 --> 00:26:20,240
okay so

758
00:26:20,240 --> 00:26:24,159
another demo this is a motor attack

759
00:26:24,159 --> 00:26:27,360
and in this demo there is a local plc

760
00:26:27,360 --> 00:26:28,960
on the bottom right connected to a power

761
00:26:28,960 --> 00:26:30,480
flex motor controller

762
00:26:30,480 --> 00:26:33,360
and which connects to a motor we removed

763
00:26:33,360 --> 00:26:33,840
the

764
00:26:33,840 --> 00:26:37,440
schneider plc this time we'll show how

765
00:26:37,440 --> 00:26:38,640
like stuxnet

766
00:26:38,640 --> 00:26:42,159
we gained control over the um

767
00:26:42,159 --> 00:26:44,080
actual movement of the motor without the

768
00:26:44,080 --> 00:26:46,159
engineer ever knowing anything about it

769
00:26:46,159 --> 00:26:47,600
so in the bottom right you see the

770
00:26:47,600 --> 00:26:49,520
engineering workstation view

771
00:26:49,520 --> 00:26:53,440
with a monitor of the

772
00:26:53,440 --> 00:26:56,640
actual motor and the blinking glads

773
00:26:56,640 --> 00:26:57,279
showed that

774
00:26:57,279 --> 00:27:00,000
the engineering workstation actually

775
00:27:00,000 --> 00:27:01,679
monitors the device

776
00:27:01,679 --> 00:27:04,840
then we have the attacker view on top of

777
00:27:04,840 --> 00:27:07,840
that

778
00:27:08,559 --> 00:27:11,440
and in the top we have the view of the

779
00:27:11,440 --> 00:27:13,200
packet that are being sent

780
00:27:13,200 --> 00:27:15,440
this time we need to upload a big chunks

781
00:27:15,440 --> 00:27:16,799
of code because

782
00:27:16,799 --> 00:27:19,279
this code does a lot of stuff so when it

783
00:27:19,279 --> 00:27:21,039
finishes uploading the code

784
00:27:21,039 --> 00:27:24,720
it will turn the motor in reverse

785
00:27:24,720 --> 00:27:27,520
so instead of spinning to the clockwise

786
00:27:27,520 --> 00:27:31,120
it will spin counterclockwise

787
00:27:33,120 --> 00:27:36,240
after that um the attacker

788
00:27:36,240 --> 00:27:38,480
sets the speed of the motor to the max

789
00:27:38,480 --> 00:27:40,399
speed all of that being done

790
00:27:40,399 --> 00:27:41,919
while the engineering workstation knows

791
00:27:41,919 --> 00:27:43,760
nothing about it it still received

792
00:27:43,760 --> 00:27:45,840
the same message as if everything is

793
00:27:45,840 --> 00:27:47,600
working correct so you can see

794
00:27:47,600 --> 00:27:50,640
the motor spinning not as it

795
00:27:50,640 --> 00:27:54,000
supposed to do and in the end

796
00:27:54,000 --> 00:27:57,440
the attacker sets back the speed

797
00:27:57,440 --> 00:27:59,200
and the direction of the moto to the

798
00:27:59,200 --> 00:28:00,559
original one

799
00:28:00,559 --> 00:28:03,919
and leaves it as it was and so

800
00:28:03,919 --> 00:28:05,360
the engineer working with the

801
00:28:05,360 --> 00:28:07,279
engineering workstation knows nothing

802
00:28:07,279 --> 00:28:08,320
about the attack that

803
00:28:08,320 --> 00:28:11,360
just happened okay so you can see

804
00:28:11,360 --> 00:28:14,640
now it spins back as it was um

805
00:28:14,640 --> 00:28:18,559
and the engineer knows nothing about it

806
00:28:21,679 --> 00:28:24,080
okay

807
00:28:24,960 --> 00:28:28,080
so a few more things to consider even a

808
00:28:28,080 --> 00:28:29,760
denial of service can take down a

809
00:28:29,760 --> 00:28:30,320
factory

810
00:28:30,320 --> 00:28:32,080
these devices don't turn back on

811
00:28:32,080 --> 00:28:33,840
automatically after they reboot

812
00:28:33,840 --> 00:28:36,320
and an operator needs to manually go and

813
00:28:36,320 --> 00:28:38,399
activate the plc's one by one

814
00:28:38,399 --> 00:28:41,200
when they crash also it's hard to patch

815
00:28:41,200 --> 00:28:42,080
these devices

816
00:28:42,080 --> 00:28:44,080
it requires a production shutdown and

817
00:28:44,080 --> 00:28:46,080
that rarely happens

818
00:28:46,080 --> 00:28:48,799
and last seven d words is way too much

819
00:28:48,799 --> 00:28:50,720
when exploiting our 32 bits

820
00:28:50,720 --> 00:28:52,799
we needed just five d words and we urge

821
00:28:52,799 --> 00:28:55,039
the viewers to make an exploit with even

822
00:28:55,039 --> 00:28:57,279
less

823
00:28:57,600 --> 00:29:00,320
thanks a lot releasing a sql a white

824
00:29:00,320 --> 00:29:01,760
paper with the data from this

825
00:29:01,760 --> 00:29:02,640
presentation

826
00:29:02,640 --> 00:29:04,880
on the urgent 11 page and now time for

827
00:29:04,880 --> 00:29:09,360
some questions

