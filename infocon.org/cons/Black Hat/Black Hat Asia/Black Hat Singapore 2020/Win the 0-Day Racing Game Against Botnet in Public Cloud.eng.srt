1
00:00:02,000 --> 00:00:03,199
hello everyone

2
00:00:03,199 --> 00:00:05,200
today we'll be talking about how we

3
00:00:05,200 --> 00:00:09,040
monitor zero day supplied on cloud

4
00:00:09,040 --> 00:00:12,799
first let me introduce our team i am

5
00:00:12,799 --> 00:00:15,120
and here is my colleague juan chocolate

6
00:00:15,120 --> 00:00:16,160
we are the security

7
00:00:16,160 --> 00:00:19,279
engineers from alibaba cloud in the past

8
00:00:19,279 --> 00:00:20,320
few years we

9
00:00:20,320 --> 00:00:22,640
detected and blocked thousands of

10
00:00:22,640 --> 00:00:23,439
bonnets

11
00:00:23,439 --> 00:00:27,039
for our users on cloud

12
00:00:27,199 --> 00:00:30,080
in this talk first we will introduce the

13
00:00:30,080 --> 00:00:32,479
major threat on alibaba cloud

14
00:00:32,479 --> 00:00:34,640
and the zero day racing game between

15
00:00:34,640 --> 00:00:35,600
both knight and

16
00:00:35,600 --> 00:00:38,640
us then we will detail

17
00:00:38,640 --> 00:00:41,200
how to identify zero day pillows from

18
00:00:41,200 --> 00:00:42,879
http logs

19
00:00:42,879 --> 00:00:46,000
we can get this done automatically

20
00:00:46,000 --> 00:00:48,320
and finally we will show you some real

21
00:00:48,320 --> 00:00:49,280
cases

22
00:00:49,280 --> 00:00:52,800
of zero day monitoring

23
00:00:54,800 --> 00:00:58,800
the first question is wipernet matters

24
00:00:58,800 --> 00:01:01,840
you know for now alibaba cloud

25
00:01:01,840 --> 00:01:04,319
is the largest cloud service provider in

26
00:01:04,319 --> 00:01:05,519
china

27
00:01:05,519 --> 00:01:08,560
and has the third largest share

28
00:01:08,560 --> 00:01:12,159
of the global cloud computing market

29
00:01:12,159 --> 00:01:14,320
there are over 40 percent chinese

30
00:01:14,320 --> 00:01:17,520
websites hosted on alibaba cloud

31
00:01:17,520 --> 00:01:20,080
and more than 1 million customers use

32
00:01:20,080 --> 00:01:24,560
our cloud server security services

33
00:01:25,600 --> 00:01:28,720
to protect cloud user security

34
00:01:28,720 --> 00:01:31,439
we block about 6 billion attacks every

35
00:01:31,439 --> 00:01:32,320
day

36
00:01:32,320 --> 00:01:34,799
we see that most of the attacks arrive

37
00:01:34,799 --> 00:01:36,640
application is twice

38
00:01:36,640 --> 00:01:41,600
confirmed online

39
00:01:41,600 --> 00:01:44,079
looking at the diagram on the left it

40
00:01:44,079 --> 00:01:46,880
shows the top 5 reasons of equations

41
00:01:46,880 --> 00:01:50,479
on cloud we can tell that web attacks

42
00:01:50,479 --> 00:01:54,079
is the major threat the diagram on the

43
00:01:54,079 --> 00:01:54,799
right

44
00:01:54,799 --> 00:01:57,600
shows the vulnerability distribution of

45
00:01:57,600 --> 00:02:00,000
server-side web attacks

46
00:02:00,000 --> 00:02:02,880
we can see that most of the attacks use

47
00:02:02,880 --> 00:02:06,399
public cve vulnerability is priced

48
00:02:06,399 --> 00:02:09,280
some attacks are from scanner and there

49
00:02:09,280 --> 00:02:11,599
are still a part of damage

50
00:02:11,599 --> 00:02:14,560
caused by unknown payloads maybe zero

51
00:02:14,560 --> 00:02:16,400
days

52
00:02:16,400 --> 00:02:19,360
from the defender region those stereo

53
00:02:19,360 --> 00:02:19,840
dates

54
00:02:19,840 --> 00:02:23,840
are the most troublesome

55
00:02:24,720 --> 00:02:27,280
every year a large number of web

56
00:02:27,280 --> 00:02:28,480
volumetes

57
00:02:28,480 --> 00:02:31,040
are published including java

58
00:02:31,040 --> 00:02:33,200
decentralization liabilities

59
00:02:33,200 --> 00:02:37,519
and web framework rce for example strats

60
00:02:37,519 --> 00:02:40,959
drupal wordpress these critical

61
00:02:40,959 --> 00:02:41,920
vulnerabilities

62
00:02:41,920 --> 00:02:44,400
starts a zero day racing game between

63
00:02:44,400 --> 00:02:45,120
both knight

64
00:02:45,120 --> 00:02:48,080
and us if we can get the zero day

65
00:02:48,080 --> 00:02:49,440
payload first

66
00:02:49,440 --> 00:02:51,840
then we can block it to keep our

67
00:02:51,840 --> 00:02:53,200
customers safe

68
00:02:53,200 --> 00:02:55,519
otherwise the botnet may take down a

69
00:02:55,519 --> 00:02:59,680
large part of services on cloud

70
00:03:00,480 --> 00:03:03,040
the right diagram shows how bad knight

71
00:03:03,040 --> 00:03:04,000
spread

72
00:03:04,000 --> 00:03:07,920
with zero days at first

73
00:03:07,920 --> 00:03:10,640
the unzero day appears only a small

74
00:03:10,640 --> 00:03:11,840
group of people

75
00:03:11,840 --> 00:03:15,840
knows the detail then days or months

76
00:03:15,840 --> 00:03:20,159
later the proof of concept or exploit

77
00:03:20,159 --> 00:03:23,200
may be released by someone on twitter or

78
00:03:23,200 --> 00:03:27,440
github and it will be quickly

79
00:03:27,440 --> 00:03:30,560
integrated into the bot night to spread

80
00:03:30,560 --> 00:03:34,000
in a few hours so as a

81
00:03:34,000 --> 00:03:36,720
cloud service provider our target is

82
00:03:36,720 --> 00:03:38,159
together is flight

83
00:03:38,159 --> 00:03:41,040
before bonnet does and block the attack

84
00:03:41,040 --> 00:03:46,959
for our user here is our

85
00:03:46,959 --> 00:03:50,319
zero day monitoring pipeline

86
00:03:50,319 --> 00:03:53,280
first we collect both network traffic

87
00:03:53,280 --> 00:03:53,599
and

88
00:03:53,599 --> 00:03:57,760
endpoint logs in real web applications

89
00:03:57,760 --> 00:04:00,720
then we produce a data mining model to

90
00:04:00,720 --> 00:04:03,680
separate the suspicious attack payload

91
00:04:03,680 --> 00:04:07,280
from the massive http flow

92
00:04:07,280 --> 00:04:10,319
next we use another algorithm to filter

93
00:04:10,319 --> 00:04:10,720
out

94
00:04:10,720 --> 00:04:13,920
existing end date payloads in our

95
00:04:13,920 --> 00:04:16,478
displayed database

96
00:04:16,478 --> 00:04:18,959
and the rest will be signed to security

97
00:04:18,959 --> 00:04:19,759
expert

98
00:04:19,759 --> 00:04:22,400
to confirm if it's still a day and

99
00:04:22,400 --> 00:04:26,320
evaluate its damage to the cloud

100
00:04:26,320 --> 00:04:29,360
the most difficult thing is digging zero

101
00:04:29,360 --> 00:04:29,680
day

102
00:04:29,680 --> 00:04:33,520
automatically from massive http logs

103
00:04:33,520 --> 00:04:35,840
like my partner juan is playing how we

104
00:04:35,840 --> 00:04:43,840
get this time

105
00:04:43,919 --> 00:04:47,199
so our first problem is how to capture

106
00:04:47,199 --> 00:04:49,600
the real attack payload from massive

107
00:04:49,600 --> 00:04:51,600
http logs

108
00:04:51,600 --> 00:04:55,120
since our goal is zeroth vulnerabilities

109
00:04:55,120 --> 00:04:58,960
we cannot get any details in advance

110
00:04:58,960 --> 00:05:01,600
so the common rule-based traffic

111
00:05:01,600 --> 00:05:02,880
matching method is

112
00:05:02,880 --> 00:05:07,039
invited besides the pb level traffic on

113
00:05:07,039 --> 00:05:07,759
alibaba

114
00:05:07,759 --> 00:05:10,880
cloud also requires us to establish an

115
00:05:10,880 --> 00:05:14,320
integrated universal automatic

116
00:05:14,320 --> 00:05:16,880
and low force positive detection

117
00:05:16,880 --> 00:05:18,800
mechanism

118
00:05:18,800 --> 00:05:25,199
here we share our thoughts and practices

119
00:05:25,199 --> 00:05:28,160
we rethink what is the services web

120
00:05:28,160 --> 00:05:29,120
attack

121
00:05:29,120 --> 00:05:32,880
and what it can be abstract into

122
00:05:32,880 --> 00:05:36,479
it can be summarized as malicious data

123
00:05:36,479 --> 00:05:39,919
travels through the trusted boundary and

124
00:05:39,919 --> 00:05:43,360
british system service here

125
00:05:43,360 --> 00:05:46,720
the malicious data refers to the http

126
00:05:46,720 --> 00:05:47,440
data

127
00:05:47,440 --> 00:05:50,320
containing the attack payload and the

128
00:05:50,320 --> 00:05:52,160
trusted boundary means

129
00:05:52,160 --> 00:05:55,759
web application finally

130
00:05:55,759 --> 00:05:59,120
system service can refer to any abnormal

131
00:05:59,120 --> 00:05:59,919
behavior

132
00:05:59,919 --> 00:06:02,799
of the system

133
00:06:03,520 --> 00:06:07,120
the whole process is shown in the figure

134
00:06:07,120 --> 00:06:10,080
we use the 10 tracking method to monitor

135
00:06:10,080 --> 00:06:12,319
the data flow

136
00:06:12,319 --> 00:06:15,520
we mark the key data carried in the http

137
00:06:15,520 --> 00:06:18,720
log as 10 then

138
00:06:18,720 --> 00:06:21,759
the turn this tended

139
00:06:21,759 --> 00:06:24,639
data flow in web applications or

140
00:06:24,639 --> 00:06:26,720
middleware

141
00:06:26,720 --> 00:06:29,280
finally it becomes a part of the

142
00:06:29,280 --> 00:06:33,120
abnormal behavioral alarms of the system

143
00:06:33,120 --> 00:06:35,680
and now we have established a

144
00:06:35,680 --> 00:06:36,639
correlation

145
00:06:36,639 --> 00:06:40,240
between traffic data and terminal alarms

146
00:06:40,240 --> 00:06:44,639
so we can infer that this http record

147
00:06:44,639 --> 00:06:49,840
contains a species attack payload

148
00:06:51,360 --> 00:06:55,360
here is an example the rce

149
00:06:55,360 --> 00:06:58,240
vulnerability via velocity in apache

150
00:06:58,240 --> 00:06:58,880
solar

151
00:06:58,880 --> 00:07:02,800
last year we can see in the http log on

152
00:07:02,800 --> 00:07:04,080
the left

153
00:07:04,080 --> 00:07:06,880
that's the attacker execute a malicious

154
00:07:06,880 --> 00:07:07,759
command

155
00:07:07,759 --> 00:07:11,919
and download and execute a password

156
00:07:11,919 --> 00:07:14,720
the http data is processed by the web

157
00:07:14,720 --> 00:07:15,680
service

158
00:07:15,680 --> 00:07:19,840
and finally execute base system

159
00:07:19,840 --> 00:07:22,800
we can see the same part in the http log

160
00:07:22,800 --> 00:07:23,599
and process

161
00:07:23,599 --> 00:07:27,199
startups log in this way

162
00:07:27,199 --> 00:07:30,000
if we can automatically correlate

163
00:07:30,000 --> 00:07:32,560
traffic data with terminal logs

164
00:07:32,560 --> 00:07:36,160
and find similar parts we can identify

165
00:07:36,160 --> 00:07:39,120
attack traffic

166
00:07:40,319 --> 00:07:43,440
here we introduce how to spend similar

167
00:07:43,440 --> 00:07:44,240
parts

168
00:07:44,240 --> 00:07:48,879
and we call it in-gram payload matching

169
00:07:48,879 --> 00:07:52,879
first we iterate each http request

170
00:07:52,879 --> 00:07:56,000
and use rule-based methods to split

171
00:07:56,000 --> 00:08:00,000
words then we use 2gram to generate

172
00:08:00,000 --> 00:08:02,319
feature patterns

173
00:08:02,319 --> 00:08:04,960
we use these generated feature patterns

174
00:08:04,960 --> 00:08:06,240
to represent

175
00:08:06,240 --> 00:08:09,039
the information in the original data

176
00:08:09,039 --> 00:08:10,800
packet

177
00:08:10,800 --> 00:08:13,919
and we call it pattern

178
00:08:13,919 --> 00:08:16,800
then we do the theme to generate feature

179
00:08:16,800 --> 00:08:17,440
patterns

180
00:08:17,440 --> 00:08:20,720
from a system log

181
00:08:20,720 --> 00:08:23,919
finally we compare two patterns if they

182
00:08:23,919 --> 00:08:25,520
are highly similar

183
00:08:25,520 --> 00:08:28,080
we consider this http request to be a

184
00:08:28,080 --> 00:08:31,840
suspicious attack payload

185
00:08:32,559 --> 00:08:35,799
for example there is a command ejection

186
00:08:35,799 --> 00:08:37,200
vulnerability

187
00:08:37,200 --> 00:08:40,000
that exists in the time processing

188
00:08:40,000 --> 00:08:43,039
module of a well-known cmos

189
00:08:43,039 --> 00:08:46,640
the attacker use this vulnerability to

190
00:08:46,640 --> 00:08:48,240
load and execute

191
00:08:48,240 --> 00:08:52,160
a remote field and try it to use a jpeg

192
00:08:52,160 --> 00:08:55,279
extension to bypass the intrusion

193
00:08:55,279 --> 00:08:56,160
detection

194
00:08:56,160 --> 00:08:59,680
system the content on the left

195
00:08:59,680 --> 00:09:03,680
is the original hpp request we captured

196
00:09:03,680 --> 00:09:07,760
and it didn't hinge any rules we know

197
00:09:07,760 --> 00:09:10,640
we actually its core data and generate

198
00:09:10,640 --> 00:09:11,760
feature patterns

199
00:09:11,760 --> 00:09:14,880
through the two gram algorithm and do

200
00:09:14,880 --> 00:09:15,519
the same

201
00:09:15,519 --> 00:09:19,920
for the process log you can see that

202
00:09:19,920 --> 00:09:23,040
the two patterns are highly similar and

203
00:09:23,040 --> 00:09:24,720
the similar parts i

204
00:09:24,720 --> 00:09:28,320
indicated in blue therefore

205
00:09:28,320 --> 00:09:32,000
we have determined that this http

206
00:09:32,000 --> 00:09:32,640
request

207
00:09:32,640 --> 00:09:37,839
is an attack payload

208
00:09:42,000 --> 00:09:45,519
okay the former example shows the data

209
00:09:45,519 --> 00:09:48,560
flow tracking method works fine with rce

210
00:09:48,560 --> 00:09:51,920
attacks and it can also catch other web

211
00:09:51,920 --> 00:09:52,959
exploit

212
00:09:52,959 --> 00:09:56,800
such as secular injection xml

213
00:09:56,800 --> 00:10:00,160
external entity web shell upload and

214
00:10:00,160 --> 00:10:03,519
connect and directory traversal

215
00:10:03,519 --> 00:10:07,200
now let me show you more cases

216
00:10:08,720 --> 00:10:11,279
file upload is another common web

217
00:10:11,279 --> 00:10:12,800
vulnerability

218
00:10:12,800 --> 00:10:16,079
by abusing some web application features

219
00:10:16,079 --> 00:10:19,040
attacker can upload malicious scraps to

220
00:10:19,040 --> 00:10:21,360
take over the web server

221
00:10:21,360 --> 00:10:25,120
for example some web application apis

222
00:10:25,120 --> 00:10:28,480
are designed to upload image but hackers

223
00:10:28,480 --> 00:10:30,320
use it to upload php

224
00:10:30,320 --> 00:10:33,519
files then connect it to execute

225
00:10:33,519 --> 00:10:36,560
malicious command

226
00:10:37,120 --> 00:10:40,320
this example is a file upload there they

227
00:10:40,320 --> 00:10:41,519
vulnerability

228
00:10:41,519 --> 00:10:44,839
of a well-known but we can now tell oe

229
00:10:44,839 --> 00:10:46,560
system

230
00:10:46,560 --> 00:10:49,360
we called it several months ago in these

231
00:10:49,360 --> 00:10:50,000
logs

232
00:10:50,000 --> 00:10:52,800
we can see that the string in red is a

233
00:10:52,800 --> 00:10:54,160
file name

234
00:10:54,160 --> 00:10:57,279
which occurs both in http log and

235
00:10:57,279 --> 00:10:59,600
endpoint file log

236
00:10:59,600 --> 00:11:02,560
it means someone wrote a php file

237
00:11:02,560 --> 00:11:03,760
successfully

238
00:11:03,760 --> 00:11:07,120
into the web server so we can use

239
00:11:07,120 --> 00:11:09,519
data flow tracking method to dig

240
00:11:09,519 --> 00:11:15,839
malaysia's http payload automatically

241
00:11:18,640 --> 00:11:21,760
here is another example about directory

242
00:11:21,760 --> 00:11:23,839
traversal vulnerability

243
00:11:23,839 --> 00:11:26,800
in this case we gathered both http

244
00:11:26,800 --> 00:11:27,519
requests

245
00:11:27,519 --> 00:11:30,880
and response then we match fail parts in

246
00:11:30,880 --> 00:11:31,760
request

247
00:11:31,760 --> 00:11:34,800
and the file body in response we combine

248
00:11:34,800 --> 00:11:37,200
both signatures in data model

249
00:11:37,200 --> 00:11:40,839
and filter out the malicious http

250
00:11:40,839 --> 00:11:42,480
request

251
00:11:42,480 --> 00:11:44,640
with this method we capture several

252
00:11:44,640 --> 00:11:46,399
zero-day supplies

253
00:11:46,399 --> 00:11:50,480
of citrix and f5

254
00:11:52,560 --> 00:11:55,360
now let's go through a real fortnite

255
00:11:55,360 --> 00:11:56,079
defense

256
00:11:56,079 --> 00:12:00,000
story in early 2019

257
00:12:00,000 --> 00:12:03,440
a bot knight called m-poster miner

258
00:12:03,440 --> 00:12:06,880
used jenkins rce zero day to spread

259
00:12:06,880 --> 00:12:09,600
and infected thousands of jenkins web

260
00:12:09,600 --> 00:12:11,360
servers

261
00:12:11,360 --> 00:12:14,079
20 days before that we had captured the

262
00:12:14,079 --> 00:12:15,519
zero-day payload

263
00:12:15,519 --> 00:12:21,040
so our cloud users are well protected

264
00:12:21,120 --> 00:12:24,639
let's dive into the rce attack payload

265
00:12:24,639 --> 00:12:27,519
we can see the strings in red contain

266
00:12:27,519 --> 00:12:27,839
some

267
00:12:27,839 --> 00:12:31,839
information there is an http url

268
00:12:31,839 --> 00:12:35,120
and some special streams like tw

269
00:12:35,120 --> 00:12:38,240
dot orange poc

270
00:12:38,240 --> 00:12:41,279
and a number 8. these

271
00:12:41,279 --> 00:12:43,839
strings can be matched to a remote

272
00:12:43,839 --> 00:12:44,480
download

273
00:12:44,480 --> 00:12:47,440
behavior captured by endpoint agent

274
00:12:47,440 --> 00:12:48,000
inside

275
00:12:48,000 --> 00:12:51,279
server in this case

276
00:12:51,279 --> 00:12:55,040
our england payload matching algorithm

277
00:12:55,040 --> 00:12:58,399
called this jenkins rce automatically

278
00:12:58,399 --> 00:13:01,680
and we analyzed it at first time

279
00:13:01,680 --> 00:13:07,040
then we confirmed that's a zero day

280
00:13:07,040 --> 00:13:09,839
here is the timeline of impulser miner

281
00:13:09,839 --> 00:13:10,720
bonite

282
00:13:10,720 --> 00:13:14,959
with jenkins rce in december

283
00:13:14,959 --> 00:13:18,800
2018 the security researcher orange

284
00:13:18,800 --> 00:13:21,839
posted a short message in twitter said

285
00:13:21,839 --> 00:13:24,320
he had found a jenkins rce

286
00:13:24,320 --> 00:13:26,560
but no vulnerability details were

287
00:13:26,560 --> 00:13:28,720
published

288
00:13:28,720 --> 00:13:32,480
then at january jenkins official claimed

289
00:13:32,480 --> 00:13:35,200
three cve vulnerabilities but the

290
00:13:35,200 --> 00:13:35,839
details

291
00:13:35,839 --> 00:13:38,880
were still unknown

292
00:13:38,880 --> 00:13:41,920
later at the 13th of january

293
00:13:41,920 --> 00:13:45,120
our zone day monitor captured

294
00:13:45,120 --> 00:13:47,839
the first exploitation with complete

295
00:13:47,839 --> 00:13:50,480
attack payload

296
00:13:50,480 --> 00:13:53,199
two weeks later the proof of concept

297
00:13:53,199 --> 00:13:54,800
script was released

298
00:13:54,800 --> 00:13:57,680
then and poster miner bonnet started to

299
00:13:57,680 --> 00:13:58,399
spread

300
00:13:58,399 --> 00:14:03,199
with this vulnerability on february

301
00:14:03,199 --> 00:14:06,160
in this case you can see that we won the

302
00:14:06,160 --> 00:14:09,199
zero day racing game about 20 days

303
00:14:09,199 --> 00:14:12,160
we updated our defense rules before

304
00:14:12,160 --> 00:14:13,760
bonnet spread it

305
00:14:13,760 --> 00:14:16,480
and most of jenkins web servers on

306
00:14:16,480 --> 00:14:17,680
alibaba cloud

307
00:14:17,680 --> 00:14:21,040
were well protected

308
00:14:24,000 --> 00:14:27,440
the former example shows that how

309
00:14:27,440 --> 00:14:30,160
data flow tracking method helps us to

310
00:14:30,160 --> 00:14:33,120
catch a thursday payload

311
00:14:33,120 --> 00:14:35,920
but that's not enough because sometimes

312
00:14:35,920 --> 00:14:38,000
the payload is encoded

313
00:14:38,000 --> 00:14:41,760
or encrypted and there was no stream

314
00:14:41,760 --> 00:14:42,880
pattern available

315
00:14:42,880 --> 00:14:46,240
to match different logs

316
00:14:47,519 --> 00:14:50,639
let me show you an example

317
00:14:50,639 --> 00:14:54,959
this is the exploit of weblogic rce

318
00:14:54,959 --> 00:14:57,680
as you can see in the red picture those

319
00:14:57,680 --> 00:14:59,120
malicious codes

320
00:14:59,120 --> 00:15:02,399
was encoded in battery and

321
00:15:02,399 --> 00:15:07,519
separated by xml tags

322
00:15:07,600 --> 00:15:11,279
by combining those bad and translated

323
00:15:11,279 --> 00:15:13,600
into string format you will get a

324
00:15:13,600 --> 00:15:16,399
malicious command

325
00:15:16,399 --> 00:15:19,519
the question is when the zero day comes

326
00:15:19,519 --> 00:15:22,480
no one knows how it works looking at the

327
00:15:22,480 --> 00:15:24,320
http post data

328
00:15:24,320 --> 00:15:27,120
even experts cannot tell if it's

329
00:15:27,120 --> 00:15:29,279
malicious or not

330
00:15:29,279 --> 00:15:32,160
for this included zero-day supplies we

331
00:15:32,160 --> 00:15:34,800
will use some statistical methods to

332
00:15:34,800 --> 00:15:37,120
help

333
00:15:39,199 --> 00:15:42,480
our assumption is that one night

334
00:15:42,480 --> 00:15:45,199
and normal users act differently on

335
00:15:45,199 --> 00:15:46,560
cloud

336
00:15:46,560 --> 00:15:49,120
the hackers or botnets use zero day to

337
00:15:49,120 --> 00:15:50,240
spread

338
00:15:50,240 --> 00:15:53,360
a group of servers will raise a same

339
00:15:53,360 --> 00:15:54,000
type of

340
00:15:54,000 --> 00:15:58,320
endpoint alert in a short period of time

341
00:15:58,320 --> 00:16:01,360
meanwhile we observed that they were

342
00:16:01,360 --> 00:16:02,800
both connected to an

343
00:16:02,800 --> 00:16:07,839
ip or have similar network requests

344
00:16:07,839 --> 00:16:10,160
both sides we can tell which group of

345
00:16:10,160 --> 00:16:11,120
requests

346
00:16:11,120 --> 00:16:14,959
are likely to be malicious

347
00:16:16,880 --> 00:16:20,079
to achieve this first we gather the http

348
00:16:20,079 --> 00:16:21,360
request log

349
00:16:21,360 --> 00:16:25,199
and endpoint process log then split word

350
00:16:25,199 --> 00:16:26,240
to each logs

351
00:16:26,240 --> 00:16:30,480
and searching the frequency item site

352
00:16:31,279 --> 00:16:34,240
in this case we we can find a group of

353
00:16:34,240 --> 00:16:35,600
servers have three

354
00:16:35,600 --> 00:16:39,360
common strings from http uri

355
00:16:39,360 --> 00:16:42,480
the content lens and a special string

356
00:16:42,480 --> 00:16:46,160
impulse data on the other hand

357
00:16:46,160 --> 00:16:49,279
these servers with powershell alerts

358
00:16:49,279 --> 00:16:52,720
contain the same encoded string that is

359
00:16:52,720 --> 00:16:54,959
a valid frequency item site

360
00:16:54,959 --> 00:16:57,759
we can use it to identify which group of

361
00:16:57,759 --> 00:16:59,440
http requests

362
00:16:59,440 --> 00:17:04,079
are malicious

363
00:17:04,079 --> 00:17:06,959
this method helps us to capture weblogic

364
00:17:06,959 --> 00:17:07,760
rce

365
00:17:07,760 --> 00:17:11,280
before mustache botnet

366
00:17:11,520 --> 00:17:15,199
this rce zero day has come to the eyes

367
00:17:15,199 --> 00:17:16,640
of the public

368
00:17:16,640 --> 00:17:20,799
on the 17th of april 2019

369
00:17:20,799 --> 00:17:23,520
when china national vulnerability

370
00:17:23,520 --> 00:17:24,319
database

371
00:17:24,319 --> 00:17:26,959
published a warning without any

372
00:17:26,959 --> 00:17:30,079
vulnerability detail

373
00:17:30,320 --> 00:17:32,880
two hours before that we already caught

374
00:17:32,880 --> 00:17:35,440
this zero day with the full exploit

375
00:17:35,440 --> 00:17:36,160
payload

376
00:17:36,160 --> 00:17:39,280
which can be replayed

377
00:17:39,760 --> 00:17:43,120
as you can see in the timeline at first

378
00:17:43,120 --> 00:17:45,840
only a few attackers use this zero day

379
00:17:45,840 --> 00:17:46,799
to perform

380
00:17:46,799 --> 00:17:51,840
targeted attacks then on the late april

381
00:17:51,840 --> 00:17:54,640
a group of bonites started to spread

382
00:17:54,640 --> 00:17:55,120
this

383
00:17:55,120 --> 00:18:00,799
point including the famous mosaic online

384
00:18:00,799 --> 00:18:04,080
this time we want a half month's time to

385
00:18:04,080 --> 00:18:04,960
protect our

386
00:18:04,960 --> 00:18:09,440
cloud users against this one melody

387
00:18:12,720 --> 00:18:16,400
due to due to the one-to-many attack

388
00:18:16,400 --> 00:18:19,520
feature of both net attacks our

389
00:18:19,520 --> 00:18:21,840
monitoring method does not depend

390
00:18:21,840 --> 00:18:25,760
on the specific content of the data

391
00:18:25,760 --> 00:18:28,720
so it's also suitable for non-planned

392
00:18:28,720 --> 00:18:29,520
text

393
00:18:29,520 --> 00:18:33,039
attack payload traffic such as

394
00:18:33,039 --> 00:18:35,600
encrypt backdoor connection java

395
00:18:35,600 --> 00:18:37,919
deserialization rce

396
00:18:37,919 --> 00:18:41,840
custom encoding method in http request

397
00:18:41,840 --> 00:18:44,480
and so on

398
00:18:46,080 --> 00:18:49,200
the php study backdoor vulnerability

399
00:18:49,200 --> 00:18:51,520
used by the both knight in september

400
00:18:51,520 --> 00:18:52,400
last year

401
00:18:52,400 --> 00:18:56,240
is a typical example the attackers

402
00:18:56,240 --> 00:18:59,440
send the same attack payload to multiple

403
00:18:59,440 --> 00:19:02,559
alibaba cloud users

404
00:19:02,559 --> 00:19:05,360
as shown on the left the value in the

405
00:19:05,360 --> 00:19:06,000
accept

406
00:19:06,000 --> 00:19:09,120
charges field is the same

407
00:19:09,120 --> 00:19:11,840
at the same time in the terminal

408
00:19:11,840 --> 00:19:13,360
terminal alarms of the

409
00:19:13,360 --> 00:19:16,480
these attacked machines they all have

410
00:19:16,480 --> 00:19:18,799
the same domain exercise

411
00:19:18,799 --> 00:19:22,799
and download malicious x fails

412
00:19:22,799 --> 00:19:26,160
so we can regard these two parts of data

413
00:19:26,160 --> 00:19:26,400
as

414
00:19:26,400 --> 00:19:31,280
a frequency item set within 30 minutes

415
00:19:31,280 --> 00:19:35,520
this frequency item set appears on 160

416
00:19:35,520 --> 00:19:36,960
machines

417
00:19:36,960 --> 00:19:40,640
so we can confirm that it's a real

418
00:19:40,640 --> 00:19:43,600
attack payload

419
00:19:45,120 --> 00:19:48,640
besides this method is also effective

420
00:19:48,640 --> 00:19:49,600
against

421
00:19:49,600 --> 00:19:53,919
common digitalization vulnerabilities

422
00:19:53,919 --> 00:19:56,960
for example there is a decentralization

423
00:19:56,960 --> 00:19:58,080
vulnerability

424
00:19:58,080 --> 00:20:02,240
in apache double attackers use

425
00:20:02,240 --> 00:20:04,880
twice to generate decentralization

426
00:20:04,880 --> 00:20:05,760
payloads

427
00:20:05,760 --> 00:20:09,679
and send them embedded to the same url

428
00:20:09,679 --> 00:20:13,200
of the host on the alibaba cloud

429
00:20:13,200 --> 00:20:16,400
the picture on the left is a data packet

430
00:20:16,400 --> 00:20:18,080
with capture

431
00:20:18,080 --> 00:20:21,039
which contains the same deserialized

432
00:20:21,039 --> 00:20:23,440
data

433
00:20:23,520 --> 00:20:26,960
similarly the endpoint alarm logs of

434
00:20:26,960 --> 00:20:28,320
these machines

435
00:20:28,320 --> 00:20:32,080
all have the same spacious url exercise

436
00:20:32,080 --> 00:20:33,200
behavior

437
00:20:33,200 --> 00:20:37,679
and their parent processes are all java

438
00:20:37,679 --> 00:20:40,559
from this we can construct a new

439
00:20:40,559 --> 00:20:42,559
frequency atom set

440
00:20:42,559 --> 00:20:46,840
to mark suspicious attack payload

441
00:20:46,840 --> 00:20:49,840
request

442
00:20:49,919 --> 00:20:53,360
furthermore some special encoding method

443
00:20:53,360 --> 00:20:54,640
and complementation

444
00:20:54,640 --> 00:20:58,559
of utilization method can also be solved

445
00:20:58,559 --> 00:21:02,159
by this method same as before

446
00:21:02,159 --> 00:21:04,880
we established the connection between

447
00:21:04,880 --> 00:21:05,600
the

448
00:21:05,600 --> 00:21:09,200
referral data and endpoint alarms data

449
00:21:09,200 --> 00:21:13,200
by constructing the frequency item set

450
00:21:13,200 --> 00:21:16,480
when we get these frequencies atom set

451
00:21:16,480 --> 00:21:17,600
data

452
00:21:17,600 --> 00:21:21,919
it seems to be just a circle injection

453
00:21:21,919 --> 00:21:25,120
so we did a manual analysis and found

454
00:21:25,120 --> 00:21:25,919
that

455
00:21:25,919 --> 00:21:28,960
its back end is a easy short framework

456
00:21:28,960 --> 00:21:32,720
a well-known open source more in china

457
00:21:32,720 --> 00:21:35,840
there is a defect in the background

458
00:21:35,840 --> 00:21:36,880
implementation

459
00:21:36,880 --> 00:21:40,720
logic and the purpose of rce can be

460
00:21:40,720 --> 00:21:45,840
achieved by circle injection

461
00:21:46,880 --> 00:21:49,840
in the end let's make a summary of

462
00:21:49,840 --> 00:21:50,559
content

463
00:21:50,559 --> 00:21:53,600
of the whole topic first

464
00:21:53,600 --> 00:21:57,039
we introduce the background the boldness

465
00:21:57,039 --> 00:21:57,440
with

466
00:21:57,440 --> 00:22:01,200
web attacks on cloud the zero-day racing

467
00:22:01,200 --> 00:22:01,840
game

468
00:22:01,840 --> 00:22:05,679
and the solution pavlen the next two

469
00:22:05,679 --> 00:22:06,240
parts

470
00:22:06,240 --> 00:22:08,799
details monitoring methods and

471
00:22:08,799 --> 00:22:09,840
experience

472
00:22:09,840 --> 00:22:12,880
for plain text attack payload and

473
00:22:12,880 --> 00:22:16,080
encoded attack payload

474
00:22:16,080 --> 00:22:19,200
in addition our implementation needs to

475
00:22:19,200 --> 00:22:20,799
be automatic

476
00:22:20,799 --> 00:22:24,840
efficient because both net comes

477
00:22:24,840 --> 00:22:27,840
fast

478
00:22:29,120 --> 00:22:31,840
that's all thanks for watching you can

479
00:22:31,840 --> 00:22:34,480
contact us on email or twitter if you

480
00:22:34,480 --> 00:22:37,840
have any questions

