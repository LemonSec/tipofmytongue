1
00:00:02,960 --> 00:00:03,600
all right

2
00:00:03,600 --> 00:00:06,160
let's start the presentation i am simon

3
00:00:06,160 --> 00:00:06,799
han and

4
00:00:06,799 --> 00:00:08,960
very pleased to share my research thank

5
00:00:08,960 --> 00:00:10,400
you for inviting me

6
00:00:10,400 --> 00:00:12,639
in this presentation i'm going to talk

7
00:00:12,639 --> 00:00:14,719
about the vulnerability of the trusted

8
00:00:14,719 --> 00:00:15,679
flapper module

9
00:00:15,679 --> 00:00:18,560
and the first microsoft bitracker with

10
00:00:18,560 --> 00:00:20,560
it

11
00:00:20,560 --> 00:00:22,480
i am a senior security researcher at the

12
00:00:22,480 --> 00:00:25,439
affiliated institute of etri

13
00:00:25,439 --> 00:00:27,519
and i am a review board member of black

14
00:00:27,519 --> 00:00:29,760
laser and gibson conference

15
00:00:29,760 --> 00:00:31,920
i was a speaker at several conferences

16
00:00:31,920 --> 00:00:33,600
like using security

17
00:00:33,600 --> 00:00:35,840
black asia black and draw hacking the

18
00:00:35,840 --> 00:00:38,320
box skill conference and so on

19
00:00:38,320 --> 00:00:40,320
additionally i'm a deviant linux

20
00:00:40,320 --> 00:00:42,399
maintainer and have been taking care of

21
00:00:42,399 --> 00:00:43,200
packages

22
00:00:43,200 --> 00:00:45,360
related to the cpu and advanced

23
00:00:45,360 --> 00:00:48,079
configuration and power interface

24
00:00:48,079 --> 00:00:50,399
i have contributed several linux corner

25
00:00:50,399 --> 00:00:53,199
patches too

26
00:00:53,440 --> 00:00:56,559
these are my previous works i presented

27
00:00:56,559 --> 00:00:59,520
three vulnerabilities about the tpm

28
00:00:59,520 --> 00:01:02,879
cbe 2017-1637

29
00:01:02,879 --> 00:01:06,080
cbe 2018.602 and

30
00:01:06,080 --> 00:01:09,360
cve 2020 0.526

31
00:01:09,360 --> 00:01:11,439
if you want to know detailed information

32
00:01:11,439 --> 00:01:13,840
about the tpm and the vulnerabilities

33
00:01:13,840 --> 00:01:16,960
please check my previous works the goal

34
00:01:16,960 --> 00:01:18,720
of this presentation

35
00:01:18,720 --> 00:01:22,080
i present an object vector f3 switching

36
00:01:22,080 --> 00:01:22,560
state

37
00:01:22,560 --> 00:01:25,759
to support a trusted black module the

38
00:01:25,759 --> 00:01:28,159
f3 flipping state is because of the

39
00:01:28,159 --> 00:01:31,360
power of cpu and repair devices

40
00:01:31,360 --> 00:01:35,920
i found cve 2018.602 from a discrete dpm

41
00:01:35,920 --> 00:01:39,040
and cve 2020 from

42
00:01:39,040 --> 00:01:42,159
5 to 6 from formula tpn

43
00:01:42,159 --> 00:01:45,200
i also introduced a new tool b trigger

44
00:01:45,200 --> 00:01:47,119
bit record extracts the volume master

45
00:01:47,119 --> 00:01:49,680
key of the tracker from dpms

46
00:01:49,680 --> 00:01:52,159
b trigger can mount a betrayal corrupt

47
00:01:52,159 --> 00:01:52,880
partition

48
00:01:52,880 --> 00:01:56,560
with the pnk disclaimer

49
00:01:56,560 --> 00:02:00,000
firstly i do not explain bitracker's

50
00:02:00,000 --> 00:02:01,680
encryption algorithm

51
00:02:01,680 --> 00:02:04,159
i focus on the protection mechanism for

52
00:02:04,159 --> 00:02:05,600
the volume master key

53
00:02:05,600 --> 00:02:08,800
especially the mechanism only without

54
00:02:08,800 --> 00:02:09,520
tpm

55
00:02:09,520 --> 00:02:13,280
and it's a default option of it rocker

56
00:02:13,280 --> 00:02:15,840
secondly i do not explain

57
00:02:15,840 --> 00:02:16,879
vulnerabilities

58
00:02:16,879 --> 00:02:20,080
in b tracker i introduced the tpm

59
00:02:20,080 --> 00:02:21,200
vulnerabilities

60
00:02:21,200 --> 00:02:23,680
and support the vmk protection of

61
00:02:23,680 --> 00:02:25,360
vitractor with them

62
00:02:25,360 --> 00:02:27,840
the vulnerabilities i found are in the

63
00:02:27,840 --> 00:02:31,599
tpm not the bitracker

64
00:02:32,319 --> 00:02:35,440
all right first of all

65
00:02:35,440 --> 00:02:38,319
i would like to tell you a short story

66
00:02:38,319 --> 00:02:39,519
because

67
00:02:39,519 --> 00:02:43,680
i don't want to make a serious mood

68
00:02:43,680 --> 00:02:47,040
right once upon a time

69
00:02:47,040 --> 00:02:50,080
there was a young boy and his father

70
00:02:50,080 --> 00:02:53,840
made a wise remark to him

71
00:02:54,000 --> 00:02:57,840
like his wife my son

72
00:02:58,480 --> 00:03:01,280
when he listened to it he imagined a

73
00:03:01,280 --> 00:03:02,840
scene and

74
00:03:02,840 --> 00:03:06,000
thought he was a small lion

75
00:03:06,000 --> 00:03:10,560
and would be a king like this

76
00:03:10,560 --> 00:03:14,720
yeah it was a happy dream

77
00:03:14,800 --> 00:03:18,239
however as he grew up he thought he was

78
00:03:18,239 --> 00:03:20,400
not a king like a lion

79
00:03:20,400 --> 00:03:24,720
and would be

80
00:03:24,720 --> 00:03:27,599
will become that guy and could do

81
00:03:27,599 --> 00:03:28,159
something

82
00:03:28,159 --> 00:03:31,680
important with the king but life was

83
00:03:31,680 --> 00:03:33,519
wild like the father's word

84
00:03:33,519 --> 00:03:37,680
and he finally realized that

85
00:03:37,680 --> 00:03:41,680
he was just a small animal over there

86
00:03:41,680 --> 00:03:45,040
and it was almost impossible to become

87
00:03:45,040 --> 00:03:46,480
an important person

88
00:03:46,480 --> 00:03:49,920
like the left side however

89
00:03:49,920 --> 00:03:53,519
he was not disappointed because

90
00:03:53,519 --> 00:03:56,640
he became a street researcher and the

91
00:03:56,640 --> 00:03:57,200
nuts

92
00:03:57,200 --> 00:04:00,319
were enough for him

93
00:04:00,319 --> 00:04:02,400
as you know the happiness doesn't last

94
00:04:02,400 --> 00:04:03,599
forever

95
00:04:03,599 --> 00:04:07,200
and the day had come he met a big

96
00:04:07,200 --> 00:04:10,319
big problem this guy

97
00:04:10,319 --> 00:04:12,959
was his hero and he wanted to be like

98
00:04:12,959 --> 00:04:14,319
the guy

99
00:04:14,319 --> 00:04:16,560
as you know the guy is the father of

100
00:04:16,560 --> 00:04:17,918
leonardo's operating system

101
00:04:17,918 --> 00:04:22,240
and he looked like he loved both

102
00:04:22,240 --> 00:04:25,759
linux and windows so the poor security

103
00:04:25,759 --> 00:04:27,840
researcher tried to make the best

104
00:04:27,840 --> 00:04:29,040
researching machine

105
00:04:29,040 --> 00:04:33,520
with windows 10 plus interactive plus

106
00:04:33,520 --> 00:04:36,639
linux and then

107
00:04:36,639 --> 00:04:40,080
this screen showed as you know

108
00:04:40,080 --> 00:04:42,320
this screen shows that b trucker

109
00:04:42,320 --> 00:04:44,720
kidnapped your day

110
00:04:44,720 --> 00:04:48,560
i'm sorry um i mean bit tracker

111
00:04:48,560 --> 00:04:52,240
protected your data

112
00:04:52,320 --> 00:04:55,759
maybe from you right

113
00:04:55,759 --> 00:04:59,280
anyway it means that if you want to get

114
00:04:59,280 --> 00:05:00,400
your data back

115
00:05:00,400 --> 00:05:03,199
uh you have to type the recovery key

116
00:05:03,199 --> 00:05:04,720
even though the data

117
00:05:04,720 --> 00:05:07,360
are yours

118
00:05:08,000 --> 00:05:10,160
unfortunately the prosecute researcher

119
00:05:10,160 --> 00:05:11,199
forgot the key

120
00:05:11,199 --> 00:05:14,479
and he just screamed

121
00:05:14,479 --> 00:05:17,600
even though he was in adversity he

122
00:05:17,600 --> 00:05:19,600
didn't give up

123
00:05:19,600 --> 00:05:22,479
he made up his mind to get the data back

124
00:05:22,479 --> 00:05:23,440
and

125
00:05:23,440 --> 00:05:27,360
started his long and painful journey

126
00:05:27,360 --> 00:05:30,479
as you guess the poor script researcher

127
00:05:30,479 --> 00:05:33,680
is me and this is my

128
00:05:33,680 --> 00:05:38,400
story this is content

129
00:05:38,400 --> 00:05:42,320
and background this is poor skills

130
00:05:42,320 --> 00:05:43,680
researchers uh

131
00:05:43,680 --> 00:05:47,120
system the system was internal look 8

132
00:05:47,120 --> 00:05:51,039
i7 hvk and had a skill boot and tpm 2.0

133
00:05:51,039 --> 00:05:51,680
feature

134
00:05:51,680 --> 00:05:55,120
and windows 10 and ubuntu 18.4

135
00:05:55,120 --> 00:05:58,800
were installed in each disk from now

136
00:05:58,800 --> 00:06:01,600
i will talk about bitracker according to

137
00:06:01,600 --> 00:06:03,360
the microsoft documents

138
00:06:03,360 --> 00:06:06,639
bitracker is a data protection

139
00:06:06,639 --> 00:06:09,600
feature that integrates with windows

140
00:06:09,600 --> 00:06:11,039
operating system

141
00:06:11,039 --> 00:06:14,720
oh yeah the data protection feature that

142
00:06:14,720 --> 00:06:15,440
protects

143
00:06:15,440 --> 00:06:20,560
data from me maybe anyway

144
00:06:20,560 --> 00:06:23,039
it addresses the threats of data theft

145
00:06:23,039 --> 00:06:24,319
or exposure

146
00:06:24,319 --> 00:06:27,360
from lost stolen or inappropriately

147
00:06:27,360 --> 00:06:31,199
decommissioned computers it provides

148
00:06:31,199 --> 00:06:33,919
the most protection when used with a

149
00:06:33,919 --> 00:06:35,680
transfer platform module

150
00:06:35,680 --> 00:06:38,800
for that the formula must support

151
00:06:38,800 --> 00:06:41,919
tcg specified static rotor transfer

152
00:06:41,919 --> 00:06:43,120
measurement

153
00:06:43,120 --> 00:06:46,840
the important point of the bit rocker

154
00:06:46,840 --> 00:06:48,160
are

155
00:06:48,160 --> 00:06:50,319
thrusted flapper motor and statue

156
00:06:50,319 --> 00:06:52,720
doctors for measurement

157
00:06:52,720 --> 00:06:56,000
tpm is a tamper resistant device and has

158
00:06:56,000 --> 00:06:57,039
two versions

159
00:06:57,039 --> 00:07:00,880
tpm 2.0 and tpin 1.2 tpm is used to

160
00:07:00,880 --> 00:07:03,120
determine the trustworthiness of a

161
00:07:03,120 --> 00:07:04,639
system by

162
00:07:04,639 --> 00:07:06,800
investigating the value stored in the

163
00:07:06,800 --> 00:07:07,840
pcrs

164
00:07:07,840 --> 00:07:10,560
tpm is also used to limit access to

165
00:07:10,560 --> 00:07:13,919
secret data based on specific pcr values

166
00:07:13,919 --> 00:07:17,440
for this has two operations clan and

167
00:07:17,440 --> 00:07:18,400
cell to manage

168
00:07:18,400 --> 00:07:20,960
secret data serial operation includes

169
00:07:20,960 --> 00:07:24,080
the secret data with pcrs of the tpm

170
00:07:24,080 --> 00:07:26,319
unzero operation can decrease the sales

171
00:07:26,319 --> 00:07:28,800
data only if the pcr values

172
00:07:28,800 --> 00:07:32,160
matches the specific values b tracker of

173
00:07:32,160 --> 00:07:34,240
microsoft uses the

174
00:07:34,240 --> 00:07:36,800
serial nonzero functions for vnk

175
00:07:36,800 --> 00:07:38,400
protection

176
00:07:38,400 --> 00:07:40,639
the root of trust for measurement sends

177
00:07:40,639 --> 00:07:42,639
integrity relevant information to the

178
00:07:42,639 --> 00:07:43,759
tpm

179
00:07:43,759 --> 00:07:46,160
tpm specification course this

180
00:07:46,160 --> 00:07:47,680
accumulating operation

181
00:07:47,680 --> 00:07:50,400
extend as you see the extent process on

182
00:07:50,400 --> 00:07:52,160
the middle of the page

183
00:07:52,160 --> 00:07:54,800
the tpm accumulates the measurements to

184
00:07:54,800 --> 00:07:56,400
a pcr with the

185
00:07:56,400 --> 00:07:59,120
previously stored value in the pcr

186
00:07:59,120 --> 00:08:00,560
because of this process

187
00:08:00,560 --> 00:08:03,919
a smart bit chain that changes uh to a

188
00:08:03,919 --> 00:08:06,400
pcr value will affect all the following

189
00:08:06,400 --> 00:08:07,840
extended values

190
00:08:07,840 --> 00:08:11,120
rtm is the cpu control device core

191
00:08:11,120 --> 00:08:13,520
rtm and it is the first set of

192
00:08:13,520 --> 00:08:14,400
instruction

193
00:08:14,400 --> 00:08:17,759
when a new chain of trust is established

194
00:08:17,759 --> 00:08:21,440
static rtm is started by static crtm

195
00:08:21,440 --> 00:08:23,199
when the host of platform

196
00:08:23,199 --> 00:08:26,319
platform starts at power on or restart

197
00:08:26,319 --> 00:08:29,280
the important point of sr team is that

198
00:08:29,280 --> 00:08:30,319
it extends

199
00:08:30,319 --> 00:08:32,958
measurements or hashes or components to

200
00:08:32,958 --> 00:08:34,799
pcrs b4

201
00:08:34,799 --> 00:08:38,240
passing control to them when the host of

202
00:08:38,240 --> 00:08:39,839
level starts set power on

203
00:08:39,839 --> 00:08:42,880
restart scrtm measured itself

204
00:08:42,880 --> 00:08:46,080
and bio super formal code

205
00:08:46,080 --> 00:08:49,440
after that scrtm extends hashes to pcrs

206
00:08:49,440 --> 00:08:50,080
before

207
00:08:50,080 --> 00:08:52,160
transferring the controller to bio super

208
00:08:52,160 --> 00:08:53,839
format

209
00:08:53,839 --> 00:08:58,560
finally scr cam transfers the controller

210
00:08:58,880 --> 00:09:01,440
biosurface formula bootloader and color

211
00:09:01,440 --> 00:09:04,000
also measure and extend the next code

212
00:09:04,000 --> 00:09:06,959
and transfer the contour to them this

213
00:09:06,959 --> 00:09:08,160
process is called

214
00:09:08,160 --> 00:09:11,680
measured boot these are examples of

215
00:09:11,680 --> 00:09:15,760
uh fiscal values static related

216
00:09:15,760 --> 00:09:19,279
static rpm related pcrs are from issue

217
00:09:19,279 --> 00:09:21,519
number 0 to 15.

218
00:09:21,519 --> 00:09:23,760
all right let's summarize the things we

219
00:09:23,760 --> 00:09:24,959
have to do

220
00:09:24,959 --> 00:09:28,880
as i mentioned before the tpm protects a

221
00:09:28,880 --> 00:09:32,640
vmk so firstly we have to

222
00:09:32,640 --> 00:09:36,959
recover pcrs of tpm to unseal the vmk

223
00:09:36,959 --> 00:09:40,720
secondly we have to get encrypted vmk

224
00:09:40,720 --> 00:09:42,399
from bitracker

225
00:09:42,399 --> 00:09:45,600
thirdly we have to decrypt the encrypted

226
00:09:45,600 --> 00:09:46,560
vmk

227
00:09:46,560 --> 00:09:50,000
with the tpm and finally

228
00:09:50,000 --> 00:09:52,320
we have to unlock a betrayal blocked

229
00:09:52,320 --> 00:09:55,519
partition with the vmk

230
00:09:55,519 --> 00:10:00,000
supporting tpms with one vulnerability

231
00:10:00,000 --> 00:10:02,000
many security researchers have tried to

232
00:10:02,000 --> 00:10:04,640
get the vmk

233
00:10:04,640 --> 00:10:08,640
with physical bus attacks like these

234
00:10:08,640 --> 00:10:12,640
wow they are amazing right

235
00:10:12,640 --> 00:10:16,640
but i could not use this way because

236
00:10:16,640 --> 00:10:19,760
firstly my sorting skill is not as good

237
00:10:19,760 --> 00:10:22,640
as these researchers you know

238
00:10:22,640 --> 00:10:26,000
secondly uh the pc was not was my

239
00:10:26,000 --> 00:10:29,040
company's property so it means

240
00:10:29,040 --> 00:10:32,959
the pc was not mine and if i failed

241
00:10:32,959 --> 00:10:36,079
to fix it i would have another

242
00:10:36,079 --> 00:10:39,920
big problem anyway

243
00:10:39,920 --> 00:10:42,399
the physical bus attack was lessener and

244
00:10:42,399 --> 00:10:44,079
replica

245
00:10:44,079 --> 00:10:47,279
tpm is a temporary resistant device so

246
00:10:47,279 --> 00:10:50,160
it is hard to get data from inside of a

247
00:10:50,160 --> 00:10:51,040
tpm

248
00:10:51,040 --> 00:10:54,079
however the voice called low pin count

249
00:10:54,079 --> 00:10:56,959
is not secure and temper resistant

250
00:10:56,959 --> 00:10:58,399
researchers

251
00:10:58,399 --> 00:11:01,440
believe it pcrs over tpm

252
00:11:01,440 --> 00:11:04,880
were well protected according to the

253
00:11:04,880 --> 00:11:08,560
tpm specifications srtmp cells only can

254
00:11:08,560 --> 00:11:09,440
be reset

255
00:11:09,440 --> 00:11:12,839
by host reset that means power on or

256
00:11:12,839 --> 00:11:14,560
restart we

257
00:11:14,560 --> 00:11:17,839
usually trust the specification but

258
00:11:17,839 --> 00:11:21,360
the implementation is

259
00:11:22,560 --> 00:11:25,279
unfortunately software development is

260
00:11:25,279 --> 00:11:25,600
not

261
00:11:25,600 --> 00:11:28,880
easy these days because

262
00:11:28,880 --> 00:11:32,160
there are so many people who support the

263
00:11:32,160 --> 00:11:34,560
developer like this

264
00:11:34,560 --> 00:11:37,680
project manager security manager manager

265
00:11:37,680 --> 00:11:41,120
manager even cto and ceo heartily

266
00:11:41,120 --> 00:11:44,480
support the developer and

267
00:11:44,480 --> 00:11:47,040
due to it the developer has no time to

268
00:11:47,040 --> 00:11:49,260
lead the specification carefully

269
00:11:49,260 --> 00:11:50,880
[Music]

270
00:11:50,880 --> 00:11:54,160
because of this environment i could find

271
00:11:54,160 --> 00:11:59,360
and publish cbe 2018.6.2

272
00:11:59,360 --> 00:12:02,240
it could reset the tpm when the system

273
00:12:02,240 --> 00:12:02,800
entered

274
00:12:02,800 --> 00:12:05,839
the f3 serving state of the advanced

275
00:12:05,839 --> 00:12:07,839
configuration and power interface or

276
00:12:07,839 --> 00:12:09,279
acpi

277
00:12:09,279 --> 00:12:11,920
after exploiting the vulnerability all

278
00:12:11,920 --> 00:12:12,720
pcrs

279
00:12:12,720 --> 00:12:16,000
and states were initialized

280
00:12:16,000 --> 00:12:18,399
due to the vulnerability i could reset

281
00:12:18,399 --> 00:12:19,120
the tpm

282
00:12:19,120 --> 00:12:21,920
without physical access unlike other

283
00:12:21,920 --> 00:12:23,040
researchers

284
00:12:23,040 --> 00:12:25,200
entering a three sleeping state was

285
00:12:25,200 --> 00:12:28,240
enough to exploit the vulnerability

286
00:12:28,240 --> 00:12:31,760
it meant i did not need to worry about

287
00:12:31,760 --> 00:12:34,880
tearing down the pc

288
00:12:35,360 --> 00:12:38,320
a recent system supports the acpi

289
00:12:38,320 --> 00:12:39,519
shipping state

290
00:12:39,519 --> 00:12:42,560
spi is a specification about configuring

291
00:12:42,560 --> 00:12:44,079
hardware components and

292
00:12:44,079 --> 00:12:47,279
performing a power management when the

293
00:12:47,279 --> 00:12:49,360
system enters the sleeping state

294
00:12:49,360 --> 00:12:52,000
the system cuts off the power of our

295
00:12:52,000 --> 00:12:53,360
devices

296
00:12:53,360 --> 00:12:57,200
and the important thing is that

297
00:12:57,200 --> 00:13:00,160
tpm is also powered off in the f3

298
00:13:00,160 --> 00:13:02,560
sleeping state or suspend mode

299
00:13:02,560 --> 00:13:05,680
from this page i just called slim mode

300
00:13:05,680 --> 00:13:09,839
for the f3 serving state

301
00:13:09,839 --> 00:13:13,360
this is the slim mode display process of

302
00:13:13,360 --> 00:13:17,440
the srtm the important point of this

303
00:13:17,440 --> 00:13:18,000
process

304
00:13:18,000 --> 00:13:20,959
is the interaction of the operating

305
00:13:20,959 --> 00:13:23,279
system and the spi module

306
00:13:23,279 --> 00:13:25,760
for the the htc process to work

307
00:13:25,760 --> 00:13:26,720
correctly

308
00:13:26,720 --> 00:13:29,120
the operating system and the hdpi module

309
00:13:29,120 --> 00:13:31,360
have to collaborate with each

310
00:13:31,360 --> 00:13:35,360
other in a predefined order

311
00:13:35,360 --> 00:13:36,880
what if the operating system is

312
00:13:36,880 --> 00:13:39,680
compromised and does not not by the tpm

313
00:13:39,680 --> 00:13:41,519
of slave

314
00:13:41,519 --> 00:13:44,560
this is the srtm vulnerability and i

315
00:13:44,560 --> 00:13:48,360
call it the gray area vulnerability cve

316
00:13:48,360 --> 00:13:52,399
2018.6.2 if you want to know the reason

317
00:13:52,399 --> 00:13:54,959
of the name please check my previous

318
00:13:54,959 --> 00:13:57,040
works

319
00:13:57,040 --> 00:14:01,360
this is the impact of cve 2018-3602

320
00:14:01,360 --> 00:14:04,320
as you see the left one is normal pcrs

321
00:14:04,320 --> 00:14:05,680
of the tpm when

322
00:14:05,680 --> 00:14:09,760
srtm is enabled and the right one is

323
00:14:09,760 --> 00:14:13,279
pcrs after exploiting the vulnerability

324
00:14:13,279 --> 00:14:16,560
or sr10 pcrs are cleared

325
00:14:16,560 --> 00:14:20,000
so i tried to exploit the tpm

326
00:14:20,000 --> 00:14:23,199
with the vulnerability and my

327
00:14:23,199 --> 00:14:26,959
effort would be gone

328
00:14:26,959 --> 00:14:29,920
because this is the tpm information and

329
00:14:29,920 --> 00:14:31,279
it said

330
00:14:31,279 --> 00:14:34,800
intel tpm

331
00:14:36,560 --> 00:14:39,199
as you know intel didn't make the

332
00:14:39,199 --> 00:14:40,720
hardware tpm

333
00:14:40,720 --> 00:14:44,399
so this means that

334
00:14:44,399 --> 00:14:48,160
yeah something wrong

335
00:14:48,480 --> 00:14:51,440
let's go back to the tpm there are two

336
00:14:51,440 --> 00:14:53,279
typical types of tpms

337
00:14:53,279 --> 00:14:56,240
uh one is a discrete dpm and the other

338
00:14:56,240 --> 00:14:57,040
is

339
00:14:57,040 --> 00:15:00,560
your tpm discrete tpm or dtpm is a

340
00:15:00,560 --> 00:15:03,199
hardware hardware based tpm and

341
00:15:03,199 --> 00:15:05,360
connected to nps bus

342
00:15:05,360 --> 00:15:08,399
it is secure expensive and widely

343
00:15:08,399 --> 00:15:09,120
deployed

344
00:15:09,120 --> 00:15:11,440
in high-end products and it also

345
00:15:11,440 --> 00:15:13,120
supports tpm 1.2

346
00:15:13,120 --> 00:15:17,120
and tpm 2.0 specification formula tpm or

347
00:15:17,120 --> 00:15:17,920
ftpm

348
00:15:17,920 --> 00:15:21,519
is a 4ml based tpm and resides in a sql

349
00:15:21,519 --> 00:15:22,639
processor

350
00:15:22,639 --> 00:15:27,360
it is may be secure

351
00:15:27,360 --> 00:15:30,399
cheap and also widely deployed from

352
00:15:30,399 --> 00:15:33,600
entry products to high-end products it

353
00:15:33,600 --> 00:15:36,560
usually supports only tpm 2.0

354
00:15:36,560 --> 00:15:38,639
specification

355
00:15:38,639 --> 00:15:43,240
to get my data back i tested cve

356
00:15:43,240 --> 00:15:46,399
2018.6.2 and unfortunately

357
00:15:46,399 --> 00:15:49,839
intel platform trust technology or ptt

358
00:15:49,839 --> 00:15:53,120
also had the slim mode vulnerability so

359
00:15:53,120 --> 00:15:56,839
i reported it to intel in february

360
00:15:56,839 --> 00:15:59,839
2018 and 19 and

361
00:15:59,839 --> 00:16:02,480
they assigned intel security advisory

362
00:16:02,480 --> 00:16:06,959
and cve 2020.05 to 6.

363
00:16:06,959 --> 00:16:09,199
according to my test result many

364
00:16:09,199 --> 00:16:10,240
manufacturers

365
00:16:10,240 --> 00:16:13,440
such such as intel level gigabyte and

366
00:16:13,440 --> 00:16:14,240
asus

367
00:16:14,240 --> 00:16:17,360
were vulnerable uh at the time

368
00:16:17,360 --> 00:16:20,160
it means tpm related code of biosafety

369
00:16:20,160 --> 00:16:22,399
formula seems to be shared

370
00:16:22,399 --> 00:16:26,720
for the dtpm and ftpm

371
00:16:27,279 --> 00:16:30,800
all right i got the real power

372
00:16:30,800 --> 00:16:34,000
i could reset the ttpmn ftpm

373
00:16:34,000 --> 00:16:36,959
with one's remote vulnerability let's

374
00:16:36,959 --> 00:16:38,240
exploit it

375
00:16:38,240 --> 00:16:40,000
corner motor for exploiting the

376
00:16:40,000 --> 00:16:41,279
vulnerability

377
00:16:41,279 --> 00:16:44,079
purchase the tpmp suspend function and

378
00:16:44,079 --> 00:16:45,519
the tpm driver

379
00:16:45,519 --> 00:16:48,240
the function is invoked by connor during

380
00:16:48,240 --> 00:16:48,800
slave

381
00:16:48,800 --> 00:16:52,240
and sends tpm2 shutdown state to the

382
00:16:52,240 --> 00:16:55,440
tpm for saving current state

383
00:16:55,440 --> 00:16:57,519
the corner module changes the function

384
00:16:57,519 --> 00:16:59,920
to another function like this

385
00:16:59,920 --> 00:17:03,519
yeah it's a very simple quote

386
00:17:03,519 --> 00:17:06,559
support microsoft v drugger

387
00:17:06,559 --> 00:17:11,039
as i mentioned earlier tpmcs the vmk of

388
00:17:11,039 --> 00:17:14,400
bitracker vitrapper uses two pcr

389
00:17:14,400 --> 00:17:18,720
profiles if the uefi security is enabled

390
00:17:18,720 --> 00:17:21,760
it uses pcr number seven and eleven

391
00:17:21,760 --> 00:17:25,679
if uefr squad is uh disabled it uses

392
00:17:25,679 --> 00:17:30,640
pcr number zero two four and eleven

393
00:17:30,640 --> 00:17:34,320
if you want to know the profile um

394
00:17:34,320 --> 00:17:36,720
you can see it with manage bd tool like

395
00:17:36,720 --> 00:17:37,679
low

396
00:17:37,679 --> 00:17:40,880
this machine uses uh pieces number seven

397
00:17:40,880 --> 00:17:44,880
and eleven if then what information

398
00:17:44,880 --> 00:17:47,760
is stored in pcr number seven and eleven

399
00:17:47,760 --> 00:17:48,080
this

400
00:17:48,080 --> 00:17:51,360
is the pcr uses of uefi

401
00:17:51,360 --> 00:17:54,640
the tpm specification said security

402
00:17:54,640 --> 00:17:56,400
policy information like

403
00:17:56,400 --> 00:17:59,760
keys certificates are used by

404
00:17:59,760 --> 00:18:03,679
ufi is stored in pcr number seven

405
00:18:03,679 --> 00:18:06,799
and operating system defined information

406
00:18:06,799 --> 00:18:10,240
is stored efficient number 11. after

407
00:18:10,240 --> 00:18:13,120
analysis of bitracker i could i

408
00:18:13,120 --> 00:18:14,720
concluded that

409
00:18:14,720 --> 00:18:17,840
i needed hashes of norm of the normal

410
00:18:17,840 --> 00:18:20,720
system for pc number seven and eleven

411
00:18:20,720 --> 00:18:21,679
because

412
00:18:21,679 --> 00:18:24,960
as you know i could reset the tpm with

413
00:18:24,960 --> 00:18:28,160
my vulnerabilities and it meant

414
00:18:28,160 --> 00:18:31,760
i could make pcr number 7 and 11 lower

415
00:18:31,760 --> 00:18:35,840
with replaying the lower axis

416
00:18:35,840 --> 00:18:40,080
but how i could get them

417
00:18:40,080 --> 00:18:43,120
from event logs event loads consists of

418
00:18:43,120 --> 00:18:45,600
pcr number seven oh sorry official

419
00:18:45,600 --> 00:18:46,400
numbers

420
00:18:46,400 --> 00:18:49,600
hashes and event types and event data

421
00:18:49,600 --> 00:18:52,799
according to the specification rtm

422
00:18:52,799 --> 00:18:53,520
extends

423
00:18:53,520 --> 00:18:57,520
hashes to a tpm and saves event logs for

424
00:18:57,520 --> 00:19:00,960
each measurement however

425
00:19:00,960 --> 00:19:03,760
event logs were gone when the corner

426
00:19:03,760 --> 00:19:06,320
started

427
00:19:06,640 --> 00:19:10,000
if active services of efi boot service

428
00:19:10,000 --> 00:19:14,240
was called if i put from efi formula

429
00:19:14,240 --> 00:19:15,760
flushed them

430
00:19:15,760 --> 00:19:18,320
in meant

431
00:19:18,799 --> 00:19:22,879
i needed a custom voter order

432
00:19:22,960 --> 00:19:26,640
frankly say i felt something wrong

433
00:19:26,640 --> 00:19:30,559
again at that time and

434
00:19:30,960 --> 00:19:33,120
i should have given up and removed

435
00:19:33,120 --> 00:19:35,600
bennett or linux operating system

436
00:19:35,600 --> 00:19:39,760
i regret that now anyway

437
00:19:39,760 --> 00:19:42,799
i made a custom bootloader version one

438
00:19:42,799 --> 00:19:44,799
custom footroller version one is uh

439
00:19:44,799 --> 00:19:47,440
based on group two of coreboot

440
00:19:47,440 --> 00:19:50,799
because it has a wrapper of efi tc2

441
00:19:50,799 --> 00:19:51,679
protocol

442
00:19:51,679 --> 00:19:53,840
so i didn't need to make the custom boot

443
00:19:53,840 --> 00:19:56,799
router from scratch

444
00:19:56,799 --> 00:20:00,080
for for event logs i

445
00:20:00,080 --> 00:20:03,120
added a new feature that got event logs

446
00:20:03,120 --> 00:20:05,520
and saved them into addresses

447
00:20:05,520 --> 00:20:09,679
18 000 the event logos function

448
00:20:09,679 --> 00:20:12,159
of the get event logs function returned

449
00:20:12,159 --> 00:20:12,880
uh

450
00:20:12,880 --> 00:20:15,520
crypto as i look forward like this and

451
00:20:15,520 --> 00:20:16,480
it consists

452
00:20:16,480 --> 00:20:20,159
of a single header and multiple raw data

453
00:20:20,159 --> 00:20:22,960
so i had to parse each entry from the

454
00:20:22,960 --> 00:20:23,440
start

455
00:20:23,440 --> 00:20:26,720
and to the end and finally

456
00:20:26,720 --> 00:20:29,520
i got the event logs this is the boot

457
00:20:29,520 --> 00:20:32,799
sequence of custom controller encounter

458
00:20:32,799 --> 00:20:36,480
when biased u5 former starts

459
00:20:36,480 --> 00:20:38,960
it loads simple trotter because of skill

460
00:20:38,960 --> 00:20:39,600
boot

461
00:20:39,600 --> 00:20:41,919
and sim boot router is signed by

462
00:20:41,919 --> 00:20:43,120
microsoft and

463
00:20:43,120 --> 00:20:46,640
linux operating system can boot with it

464
00:20:46,640 --> 00:20:48,880
simple throttle loads are my custom

465
00:20:48,880 --> 00:20:50,159
controller version one

466
00:20:50,159 --> 00:20:53,600
and it executes get event locks function

467
00:20:53,600 --> 00:20:57,840
and extracts event logs like this

468
00:20:57,919 --> 00:21:00,159
on the left side key cell numbers are

469
00:21:00,159 --> 00:21:00,960
shown

470
00:21:00,960 --> 00:21:06,320
and on the right side hashes are shown

471
00:21:06,320 --> 00:21:08,640
and then custom boot router executes

472
00:21:08,640 --> 00:21:10,159
ring scanner

473
00:21:10,159 --> 00:21:12,559
and it lost the corner module and user

474
00:21:12,559 --> 00:21:14,960
level applications

475
00:21:14,960 --> 00:21:17,520
the corner modules event logs and dumps

476
00:21:17,520 --> 00:21:20,880
them into a color file

477
00:21:20,880 --> 00:21:24,000
lastly replay tool loads event logs

478
00:21:24,000 --> 00:21:28,840
from a color file and replay them to the

479
00:21:28,840 --> 00:21:31,760
tpm

480
00:21:31,760 --> 00:21:34,880
even though i got the hashes

481
00:21:34,880 --> 00:21:38,080
i couldn't get my data back yet

482
00:21:38,080 --> 00:21:40,159
let's see the boot sequence again for

483
00:21:40,159 --> 00:21:42,240
the reason

484
00:21:42,240 --> 00:21:45,360
in case of normal windows boot

485
00:21:45,360 --> 00:21:48,400
when u5 formula starts it extends key

486
00:21:48,400 --> 00:21:50,559
to certificates and the skill would flag

487
00:21:50,559 --> 00:21:52,080
to the tpm

488
00:21:52,080 --> 00:21:54,240
they are static value and always the

489
00:21:54,240 --> 00:21:56,559
same

490
00:21:56,640 --> 00:22:00,919
it executes window boot manager put mg.f

491
00:22:00,919 --> 00:22:02,640
ngfw.efi

492
00:22:02,640 --> 00:22:05,360
and the formula verifies its signature

493
00:22:05,360 --> 00:22:07,919
with microsoft windows production pca

494
00:22:07,919 --> 00:22:12,240
certificate and extends it to the tpm

495
00:22:12,240 --> 00:22:14,400
this is the final value of pcr number

496
00:22:14,400 --> 00:22:16,720
seven

497
00:22:16,799 --> 00:22:19,120
when the boot manager starts it tries to

498
00:22:19,120 --> 00:22:20,880
unseal the sealed vmk

499
00:22:20,880 --> 00:22:24,000
of bit rocker with the tpm and

500
00:22:24,000 --> 00:22:28,400
guess the vmk from the tpm

501
00:22:28,400 --> 00:22:31,520
finally the boot manager can decrypt a

502
00:22:31,520 --> 00:22:33,520
bit drug like partition and windows

503
00:22:33,520 --> 00:22:36,320
operating system starts successfully

504
00:22:36,320 --> 00:22:41,039
in contrast other footrollers like

505
00:22:41,039 --> 00:22:43,200
linux footroller and malicious

506
00:22:43,200 --> 00:22:44,720
bootloader start

507
00:22:44,720 --> 00:22:47,679
the formula extends microsoft

508
00:22:47,679 --> 00:22:50,880
corporation uefi ca certificate to the

509
00:22:50,880 --> 00:22:54,400
tpm because microsoft signs

510
00:22:54,400 --> 00:22:57,039
other boot routers only with the private

511
00:22:57,039 --> 00:22:57,760
key of

512
00:22:57,760 --> 00:23:01,760
the uefi c8

513
00:23:02,400 --> 00:23:05,280
because of it the final value of pixel

514
00:23:05,280 --> 00:23:07,280
number 7

515
00:23:07,280 --> 00:23:10,400
yes different from the previous case

516
00:23:10,400 --> 00:23:14,159
and so the boot manager start

517
00:23:14,159 --> 00:23:16,000
when the boot manager start i tried to

518
00:23:16,000 --> 00:23:18,080
unzip the csv mk

519
00:23:18,080 --> 00:23:20,559
of the tracker with the tpm and phase

520
00:23:20,559 --> 00:23:23,840
like this

521
00:23:24,159 --> 00:23:27,360
fortunately getting a hash of microsoft

522
00:23:27,360 --> 00:23:28,880
windows production pca

523
00:23:28,880 --> 00:23:32,799
is easy because security is uh

524
00:23:32,799 --> 00:23:35,520
has been widely deployed and i could get

525
00:23:35,520 --> 00:23:36,000
it from

526
00:23:36,000 --> 00:23:39,200
other pcs additionally microsoft windows

527
00:23:39,200 --> 00:23:42,559
also saves our measurement logs so i

528
00:23:42,559 --> 00:23:45,279
could get it from microsoft tpm pcp

529
00:23:45,279 --> 00:23:49,039
toolkit this is the result of the

530
00:23:49,039 --> 00:23:52,240
pcb took it and

531
00:23:52,240 --> 00:23:54,400
this is the hash of windows production

532
00:23:54,400 --> 00:23:57,279
pca certificate

533
00:23:57,279 --> 00:24:00,480
how do i find it because

534
00:24:00,480 --> 00:24:04,960
this is the event log data and

535
00:24:04,960 --> 00:24:08,559
this is the text part you can see

536
00:24:08,559 --> 00:24:13,600
the text microsoft production pca

537
00:24:13,600 --> 00:24:18,159
additionally the expired date is 2026

538
00:24:18,159 --> 00:24:21,520
so i can use this hash for

539
00:24:21,520 --> 00:24:25,840
more than six years however

540
00:24:25,840 --> 00:24:28,720
i'm not sure because the boot or was

541
00:24:28,720 --> 00:24:32,240
found this year

542
00:24:32,240 --> 00:24:34,960
all right the last step is unsealing the

543
00:24:34,960 --> 00:24:36,480
bmk

544
00:24:36,480 --> 00:24:38,640
according to my research unsealing the

545
00:24:38,640 --> 00:24:40,880
vmk is

546
00:24:40,880 --> 00:24:43,919
not performed in a single tpm command

547
00:24:43,919 --> 00:24:46,720
these dpn commands and parameters are

548
00:24:46,720 --> 00:24:48,960
needed

549
00:24:48,960 --> 00:24:52,000
as i analyzed the bitlocker i found out

550
00:24:52,000 --> 00:24:52,400
that

551
00:24:52,400 --> 00:24:55,360
all parameters of tpn commands were

552
00:24:55,360 --> 00:24:56,960
stacked

553
00:24:56,960 --> 00:24:59,919
as you know all parameters start started

554
00:24:59,919 --> 00:25:00,880
from the

555
00:25:00,880 --> 00:25:03,919
base base index and windows boot manager

556
00:25:03,919 --> 00:25:06,559
was the first application after ufi

557
00:25:06,559 --> 00:25:09,600
former so if i got

558
00:25:09,600 --> 00:25:13,039
the parameters i could

559
00:25:13,039 --> 00:25:16,799
use them forever the important thing is

560
00:25:16,799 --> 00:25:17,360
that

561
00:25:17,360 --> 00:25:20,559
how to get the parameters of each

562
00:25:20,559 --> 00:25:23,919
command reverse engineering was good for

563
00:25:23,919 --> 00:25:24,559
that

564
00:25:24,559 --> 00:25:28,880
however i have no time as you know

565
00:25:28,880 --> 00:25:31,600
so i made another custom bootloader

566
00:25:31,600 --> 00:25:32,880
version too

567
00:25:32,880 --> 00:25:36,000
this time i added hooks to the tpm

568
00:25:36,000 --> 00:25:37,200
protocol of

569
00:25:37,200 --> 00:25:40,480
uefi format and the bootloader executes

570
00:25:40,480 --> 00:25:42,080
windows boot manager with

571
00:25:42,080 --> 00:25:45,440
the chain loader feature then the hooks

572
00:25:45,440 --> 00:25:47,919
of the tpm protocol dumps

573
00:25:47,919 --> 00:25:51,679
all commands and parameters

574
00:25:51,679 --> 00:25:56,000
this is the boot and dump sequence

575
00:25:56,000 --> 00:25:59,520
the uefi former starts it makes an

576
00:25:59,520 --> 00:26:02,000
efi tc protocol service structure like

577
00:26:02,000 --> 00:26:03,679
this

578
00:26:03,679 --> 00:26:05,760
the custom boot router makes a hooked

579
00:26:05,760 --> 00:26:09,360
efi tc protocol service structure

580
00:26:09,360 --> 00:26:11,600
and then the custom boot router executes

581
00:26:11,600 --> 00:26:13,600
window boot manager

582
00:26:13,600 --> 00:26:16,880
and the hook downs or data

583
00:26:16,880 --> 00:26:20,480
and parameters like this

584
00:26:21,200 --> 00:26:24,640
this is real dumb data of tpm2 rows

585
00:26:24,640 --> 00:26:26,559
command

586
00:26:26,559 --> 00:26:29,360
this field shows tpm throat command

587
00:26:29,360 --> 00:26:30,000
value

588
00:26:30,000 --> 00:26:32,880
and this field shows a used handle for

589
00:26:32,880 --> 00:26:35,679
ceiling vmk

590
00:26:35,679 --> 00:26:37,919
these two fields are important they are

591
00:26:37,919 --> 00:26:40,400
public and private data of sealed

592
00:26:40,400 --> 00:26:44,400
vmk object the output buffer is below

593
00:26:44,400 --> 00:26:48,720
is the response of the tpm command

594
00:26:48,720 --> 00:26:51,840
this field shows a success

595
00:26:51,840 --> 00:26:54,240
and this field shows the loaded handle

596
00:26:54,240 --> 00:26:56,159
of cldbmk

597
00:26:56,159 --> 00:26:59,279
the handler is important for tpin2 on

598
00:26:59,279 --> 00:27:00,320
sale

599
00:27:00,320 --> 00:27:04,720
command this data shows tpm to start

600
00:27:04,720 --> 00:27:07,760
our session it is very simple to

601
00:27:07,760 --> 00:27:10,880
the previous command this is tpm to

602
00:27:10,880 --> 00:27:13,440
start a session command

603
00:27:13,440 --> 00:27:17,279
and tpm key and bind handlers for

604
00:27:17,279 --> 00:27:19,520
protecting a new session nor handle

605
00:27:19,520 --> 00:27:20,399
means

606
00:27:20,399 --> 00:27:23,200
just creating a new session handler with

607
00:27:23,200 --> 00:27:25,679
unknowns

608
00:27:26,559 --> 00:27:29,760
this is a hash of unknowns

609
00:27:29,760 --> 00:27:32,960
and the response has us a success code

610
00:27:32,960 --> 00:27:33,440
and

611
00:27:33,440 --> 00:27:35,679
a new session handler the session handle

612
00:27:35,679 --> 00:27:37,039
is important and

613
00:27:37,039 --> 00:27:41,120
used for tpm2 on c command

614
00:27:41,120 --> 00:27:44,080
this shows tpm2 policy authorize and the

615
00:27:44,080 --> 00:27:47,360
tpm to pulse pcr command

616
00:27:47,360 --> 00:27:50,320
tpm to policy authorize is very simple

617
00:27:50,320 --> 00:27:53,600
it allows a new policy to the session so

618
00:27:53,600 --> 00:27:57,039
the parameters are a typical command

619
00:27:57,039 --> 00:27:59,679
and the session handle that are created

620
00:27:59,679 --> 00:28:01,440
on the previous page

621
00:28:01,440 --> 00:28:05,120
the result has a success code

622
00:28:05,120 --> 00:28:08,320
tpm2 policy pcr means

623
00:28:08,320 --> 00:28:11,520
creating a policy that includes specific

624
00:28:11,520 --> 00:28:12,720
pcr values

625
00:28:12,720 --> 00:28:16,080
so the parameters are tpm to pilot pcr

626
00:28:16,080 --> 00:28:19,440
and the session handler

627
00:28:19,440 --> 00:28:22,720
and police digest and the map

628
00:28:22,720 --> 00:28:26,880
and the result shows an error code

629
00:28:26,880 --> 00:28:30,559
the code is the tpm return code value

630
00:28:30,559 --> 00:28:33,120
tpm return called value means the value

631
00:28:33,120 --> 00:28:34,159
is not correct

632
00:28:34,159 --> 00:28:37,760
and the reason is that pcr number seven

633
00:28:37,760 --> 00:28:42,080
and 11 are not matched with the pcr

634
00:28:42,080 --> 00:28:46,080
pcr used for sealing the nk for us

635
00:28:46,080 --> 00:28:49,279
this is not a big problem because we

636
00:28:49,279 --> 00:28:52,480
already have the power that resets

637
00:28:52,480 --> 00:28:56,080
and makes the tpm lower so

638
00:28:56,080 --> 00:29:00,960
the final result is looks like this

639
00:29:00,960 --> 00:29:03,600
this shows deep end to unseal command

640
00:29:03,600 --> 00:29:04,399
and these

641
00:29:04,399 --> 00:29:08,480
two are the loaded handle of clvmk and

642
00:29:08,480 --> 00:29:10,159
session handle

643
00:29:10,159 --> 00:29:13,200
and the result is

644
00:29:13,200 --> 00:29:17,200
success and this is the vmk

645
00:29:17,200 --> 00:29:20,240
whew it was a long journey

646
00:29:20,240 --> 00:29:23,440
right yeah

647
00:29:23,440 --> 00:29:26,480
and if this was the last page

648
00:29:26,480 --> 00:29:29,279
of my journey i couldn't be here as a

649
00:29:29,279 --> 00:29:30,320
speaker

650
00:29:30,320 --> 00:29:33,200
i tried to find where the public and

651
00:29:33,200 --> 00:29:35,840
private data of clvmk were

652
00:29:35,840 --> 00:29:38,880
and i also tried to find where

653
00:29:38,880 --> 00:29:42,240
the pcr policy and bitmap were this is

654
00:29:42,240 --> 00:29:42,880
very

655
00:29:42,880 --> 00:29:46,320
very important because if i if i

656
00:29:46,320 --> 00:29:49,520
find this information i can extract the

657
00:29:49,520 --> 00:29:50,320
vmk

658
00:29:50,320 --> 00:29:54,000
from other pcs and the location

659
00:29:54,000 --> 00:29:57,520
is the bitracker

660
00:29:57,520 --> 00:30:00,559
metadata bitracker saved

661
00:30:00,559 --> 00:30:03,679
parameters into the

662
00:30:03,679 --> 00:30:07,039
tpm encoded vmk blob of the metadata

663
00:30:07,039 --> 00:30:08,399
area

664
00:30:08,399 --> 00:30:10,880
and i could get the metadata with the

665
00:30:10,880 --> 00:30:11,760
well-known tool

666
00:30:11,760 --> 00:30:15,360
dislocker and due to it

667
00:30:15,360 --> 00:30:19,360
i could also get the speaker ticket

668
00:30:19,520 --> 00:30:22,720
this is the tpm encoded blob of

669
00:30:22,720 --> 00:30:26,240
bitracker's metadata

670
00:30:26,640 --> 00:30:29,279
this part has public and private data of

671
00:30:29,279 --> 00:30:33,360
clvmk for tpm to load command

672
00:30:33,360 --> 00:30:36,399
and this part has policy digest and

673
00:30:36,399 --> 00:30:40,080
pcrb met for tpm to polish pcr command

674
00:30:40,080 --> 00:30:43,360
except for these

675
00:30:43,360 --> 00:30:47,200
this data other parameters are static

676
00:30:47,200 --> 00:30:50,960
as you know so i can extract the vmk

677
00:30:50,960 --> 00:30:54,240
from other pcs

678
00:30:54,480 --> 00:30:56,480
finally i got the last piece of the

679
00:30:56,480 --> 00:30:57,919
puzzle

680
00:30:57,919 --> 00:31:01,600
i reset dd payment ftpm

681
00:31:01,600 --> 00:31:04,720
and got no more hashes from uefi former

682
00:31:04,720 --> 00:31:08,159
and replayed them to the tpm

683
00:31:08,159 --> 00:31:11,600
i also got a tpm encoded vmk blob

684
00:31:11,600 --> 00:31:16,000
and sent it to the exploit tpm

685
00:31:16,720 --> 00:31:19,760
lastly i extracted the vmk

686
00:31:19,760 --> 00:31:22,880
from the exploited tpm and

687
00:31:22,880 --> 00:31:26,880
got my data back

688
00:31:28,399 --> 00:31:31,600
beatrice design and implementation

689
00:31:31,600 --> 00:31:34,480
bitreeker is a new tool to get your data

690
00:31:34,480 --> 00:31:35,279
back

691
00:31:35,279 --> 00:31:37,200
it can decrypt the betrayal correct

692
00:31:37,200 --> 00:31:39,279
partition with the sliding mode

693
00:31:39,279 --> 00:31:40,480
vulnerability

694
00:31:40,480 --> 00:31:43,760
it consists of several parts i made and

695
00:31:43,760 --> 00:31:47,200
customized such as a bitrate bitrate

696
00:31:47,200 --> 00:31:49,200
bootloader bit regular corner module

697
00:31:49,200 --> 00:31:51,440
between launcher and customized

698
00:31:51,440 --> 00:31:54,640
customized dislocker

699
00:31:54,640 --> 00:31:58,000
this is bit recurs github url

700
00:31:58,000 --> 00:32:02,159
so if you want to get the source code

701
00:32:02,159 --> 00:32:07,039
you can get the source code from here

702
00:32:07,679 --> 00:32:10,799
you can also make bitrate but bootable

703
00:32:10,799 --> 00:32:11,519
usb

704
00:32:11,519 --> 00:32:14,799
like me firstly i

705
00:32:14,799 --> 00:32:19,360
installed ubuntu 18.4 to the usb drive

706
00:32:19,360 --> 00:32:22,480
and then i built and installed my

707
00:32:22,480 --> 00:32:26,159
bitrate router because of customized

708
00:32:26,159 --> 00:32:28,960
corner module and launcher to a usb

709
00:32:28,960 --> 00:32:30,320
drive

710
00:32:30,320 --> 00:32:33,360
finally ibl 10 installed customized tpm

711
00:32:33,360 --> 00:32:34,080
to tool

712
00:32:34,080 --> 00:32:38,240
and customized this locker

713
00:32:38,320 --> 00:32:41,200
this page shows the test results i

714
00:32:41,200 --> 00:32:42,080
reported

715
00:32:42,080 --> 00:32:45,279
ddpm vulnerability in early

716
00:32:45,279 --> 00:32:50,720
2018 and ftpm vulnerability in early

717
00:32:51,880 --> 00:32:54,000
2018.

718
00:32:54,000 --> 00:32:57,760
now many products seem to be past

719
00:32:57,760 --> 00:33:01,840
this vulnerability i really appreciate

720
00:33:01,840 --> 00:33:05,440
global companies responses thank you

721
00:33:05,440 --> 00:33:07,440
however some products are still

722
00:33:07,440 --> 00:33:08,559
vulnerable and

723
00:33:08,559 --> 00:33:11,440
many products that warranty previous has

724
00:33:11,440 --> 00:33:12,480
been expired

725
00:33:12,480 --> 00:33:16,480
are also vulnerable if you use

726
00:33:16,480 --> 00:33:19,519
old products i recommend you

727
00:33:19,519 --> 00:33:22,840
following the countermeasure of my

728
00:33:22,840 --> 00:33:24,320
presentation

729
00:33:24,320 --> 00:33:28,720
all right demo time because of the time

730
00:33:28,720 --> 00:33:33,120
i prepared a short demo with ricker

731
00:33:36,960 --> 00:33:39,600
the system is floating with windows 10.

732
00:33:39,600 --> 00:33:40,799
the target system is

733
00:33:40,799 --> 00:33:45,200
internal look 8 i7 hbk

734
00:33:45,200 --> 00:33:49,279
uefi security is enabled

735
00:33:50,240 --> 00:33:52,799
so malicious with router cannot be

736
00:33:52,799 --> 00:33:53,360
loaded

737
00:33:53,360 --> 00:33:56,080
in this system

738
00:34:00,080 --> 00:34:04,320
bitracker is also enabled

739
00:34:05,039 --> 00:34:07,679
vitro rocker uses pixel number seven and

740
00:34:07,679 --> 00:34:09,199
eleven to protect the

741
00:34:09,199 --> 00:34:11,759
vmk

742
00:34:17,040 --> 00:34:19,440
the secret is in the vitra collect

743
00:34:19,440 --> 00:34:20,560
partition

744
00:34:20,560 --> 00:34:23,679
it cannot be read without subverting

745
00:34:23,679 --> 00:34:27,679
bitracker's protection mechanism as you

746
00:34:32,839 --> 00:34:34,239
know

747
00:34:34,239 --> 00:34:37,440
all right let's extract the secret

748
00:34:37,440 --> 00:34:49,440
with b tweaker plug the big trigger usb

749
00:34:49,440 --> 00:34:50,239
drive

750
00:34:50,239 --> 00:34:54,239
in the machine the shim boot router

751
00:34:54,239 --> 00:34:56,800
and b trigger controller are loaded chin

752
00:34:56,800 --> 00:35:00,000
boot rotor is loaded first to pass the

753
00:35:00,000 --> 00:35:02,720
verification of ua by square boot beat

754
00:35:02,720 --> 00:35:04,000
record

755
00:35:04,000 --> 00:35:07,760
footroller dumps or event logs like this

756
00:35:07,760 --> 00:35:10,160
piston numbers and hashes are are used

757
00:35:10,160 --> 00:35:11,040
to make the

758
00:35:11,040 --> 00:35:17,359
tpm state number

759
00:35:17,359 --> 00:35:19,920
bitricker extracts event logs with the

760
00:35:19,920 --> 00:35:20,480
canola

761
00:35:20,480 --> 00:35:23,280
corner module

762
00:35:23,599 --> 00:35:26,320
the bitricker corner module saves them

763
00:35:26,320 --> 00:35:28,560
to account low file

764
00:35:28,560 --> 00:35:30,720
the bit rigger can detect the bitra

765
00:35:30,720 --> 00:35:34,640
blocked partition automatically

766
00:35:37,680 --> 00:35:39,920
let's make the system slip to exploit

767
00:35:39,920 --> 00:35:43,359
the tpm vulnerability

768
00:35:43,599 --> 00:35:45,839
vitriol module exploits the tpm

769
00:35:45,839 --> 00:35:47,119
vulnerability

770
00:35:47,119 --> 00:35:51,520
after exploiting the dpm is initialized

771
00:35:51,520 --> 00:35:54,000
bitry currently replaces hashes to the

772
00:35:54,000 --> 00:35:54,880
tpm

773
00:35:54,880 --> 00:35:57,760
replaying hashes makes the tpm state

774
00:35:57,760 --> 00:36:00,000
number

775
00:36:00,000 --> 00:36:01,920
bit record sense typing commands to

776
00:36:01,920 --> 00:36:03,520
unseal the vnk

777
00:36:03,520 --> 00:36:05,680
vmk is the key that decrypts the

778
00:36:05,680 --> 00:36:08,160
petroglyph partition

779
00:36:08,160 --> 00:36:11,520
as you see the we got the vmk

780
00:36:11,520 --> 00:36:16,480
and decrypted the partition successfully

781
00:36:16,800 --> 00:36:19,359
the partition is mounted to windows

782
00:36:19,359 --> 00:36:21,920
directory

783
00:36:21,920 --> 00:36:24,320
all right let's explore the windows 10

784
00:36:24,320 --> 00:36:27,839
partition with the file manager

785
00:36:32,160 --> 00:36:35,359
the descriptive partition is

786
00:36:35,359 --> 00:36:37,280
shown in it and finally we got the

787
00:36:37,280 --> 00:36:41,760
secret file

788
00:36:41,760 --> 00:36:45,040
this is conclusion and black sound bite

789
00:36:45,040 --> 00:36:47,280
i found the sleep mode vulnerabilities

790
00:36:47,280 --> 00:36:52,880
cve 2018.602 and cpe2020526

791
00:36:52,880 --> 00:36:55,520
that can suffer the dtpm and fdpm using

792
00:36:55,520 --> 00:36:57,280
the f3 sleeping state

793
00:36:57,280 --> 00:36:59,680
b trigger can decrease a betrayal

794
00:36:59,680 --> 00:37:00,960
correct partition

795
00:37:00,960 --> 00:37:05,040
it extracts the vmk from dpms and mounts

796
00:37:05,040 --> 00:37:05,440
the

797
00:37:05,440 --> 00:37:08,880
encrypted partition lastly please

798
00:37:08,880 --> 00:37:11,520
please update your viruses performance

799
00:37:11,520 --> 00:37:12,160
or

800
00:37:12,160 --> 00:37:15,440
usb 3 bit rocker with the pin

801
00:37:15,440 --> 00:37:17,680
additionally i published tpm

802
00:37:17,680 --> 00:37:19,760
vulnerabilities checking tool network

803
00:37:19,760 --> 00:37:22,000
last year please check your system with

804
00:37:22,000 --> 00:37:23,280
the latest version of

805
00:37:23,280 --> 00:37:28,240
method network is in github

806
00:37:28,480 --> 00:37:32,240
this is the last page as you know

807
00:37:32,240 --> 00:37:34,480
once upon a time there was a secret

808
00:37:34,480 --> 00:37:36,079
researcher over there

809
00:37:36,079 --> 00:37:39,599
and he overcame adversity and went back

810
00:37:39,599 --> 00:37:43,280
to his peaceful life nothing has changed

811
00:37:43,280 --> 00:37:47,520
except it become a speaker and

812
00:37:47,520 --> 00:37:51,920
libya world member of blacklasia

813
00:37:51,920 --> 00:37:55,599
and these are my first link and email

814
00:37:55,599 --> 00:37:56,720
address

815
00:37:56,720 --> 00:37:59,520
i always welcome your contributions so

816
00:37:59,520 --> 00:38:02,560
if you have any idea please let me know

817
00:38:02,560 --> 00:38:04,240
thank you for listening and your

818
00:38:04,240 --> 00:38:08,319
precious time

