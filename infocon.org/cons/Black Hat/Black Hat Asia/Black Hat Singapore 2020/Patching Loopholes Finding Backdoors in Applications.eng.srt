1
00:00:01,839 --> 00:00:03,120
okay hi guys

2
00:00:03,120 --> 00:00:05,200
welcome to our presentation on finding

3
00:00:05,200 --> 00:00:07,759
back doors in applications by max and i

4
00:00:07,759 --> 00:00:10,960
from garth tech singapore

5
00:00:10,960 --> 00:00:12,559
so this is the brief outline of what

6
00:00:12,559 --> 00:00:16,880
we'll be covering today

7
00:00:16,880 --> 00:00:19,680
first a little about us max who will be

8
00:00:19,680 --> 00:00:21,439
covering the ios portion of this

9
00:00:21,439 --> 00:00:22,480
presentation

10
00:00:22,480 --> 00:00:25,599
is our residence ios specialist he likes

11
00:00:25,599 --> 00:00:27,439
digging into mobile applications and

12
00:00:27,439 --> 00:00:30,800
poking into kernel level stuff as for me

13
00:00:30,800 --> 00:00:33,280
i used to be a developer until i found

14
00:00:33,280 --> 00:00:35,280
that breaking programs is more fun than

15
00:00:35,280 --> 00:00:36,399
making them

16
00:00:36,399 --> 00:00:38,559
oh by the way i just published my first

17
00:00:38,559 --> 00:00:42,840
cve so check it out it is 2020

18
00:00:42,840 --> 00:00:45,840
16602

19
00:00:46,079 --> 00:00:47,920
so next i would like to introduce our

20
00:00:47,920 --> 00:00:49,280
organization

21
00:00:49,280 --> 00:00:52,719
we are the cyber security group or csg

22
00:00:52,719 --> 00:00:56,160
of gov tech so gartek is in charge of

23
00:00:56,160 --> 00:00:58,160
driving the singapore government's i.t

24
00:00:58,160 --> 00:01:01,199
systems and technology while csg is in

25
00:01:01,199 --> 00:01:03,440
charge of the cyber security posture for

26
00:01:03,440 --> 00:01:06,239
these systems

27
00:01:07,200 --> 00:01:09,439
so as an organization we believe in

28
00:01:09,439 --> 00:01:11,360
giving back to the community

29
00:01:11,360 --> 00:01:13,439
so we will try to publicly disclose any

30
00:01:13,439 --> 00:01:15,200
vulnerabilities that we find

31
00:01:15,200 --> 00:01:17,840
after working with the developers on it

32
00:01:17,840 --> 00:01:19,680
so we will try to open source any

33
00:01:19,680 --> 00:01:21,759
in-house tools or plug-ins

34
00:01:21,759 --> 00:01:24,799
that we develop so a recent example

35
00:01:24,799 --> 00:01:26,560
is a plugin that we built for google

36
00:01:26,560 --> 00:01:31,520
tsunami that detects the cve 2023-452

37
00:01:31,520 --> 00:01:34,000
so this cve is a directory traversal

38
00:01:34,000 --> 00:01:36,320
attack on web interfaces about cisco

39
00:01:36,320 --> 00:01:37,520
appliances

40
00:01:37,520 --> 00:01:39,759
so this was recently submitted and has

41
00:01:39,759 --> 00:01:43,840
been merged into tsunami's master branch

42
00:01:44,479 --> 00:01:47,600
so our guys also recently presented at

43
00:01:47,600 --> 00:01:49,119
blackhead usa

44
00:01:49,119 --> 00:01:50,960
where they showcased that open source

45
00:01:50,960 --> 00:01:53,439
intelligence honeypots called manuka

46
00:01:53,439 --> 00:01:55,119
that will help bolster the blue team's

47
00:01:55,119 --> 00:01:57,200
arsenal so if you are interested

48
00:01:57,200 --> 00:01:59,119
do check out the qr code on the right of

49
00:01:59,119 --> 00:02:01,600
the slide

50
00:02:03,840 --> 00:02:06,640
so max and i we belong to a division

51
00:02:06,640 --> 00:02:07,119
named

52
00:02:07,119 --> 00:02:10,399
advanced cyber capabilities or acc

53
00:02:10,399 --> 00:02:13,440
within csg this diagram

54
00:02:13,440 --> 00:02:15,520
is a summary of the activities we do on

55
00:02:15,520 --> 00:02:18,000
a day-to-day basis

56
00:02:18,000 --> 00:02:20,319
so our bread and butter is will

57
00:02:20,319 --> 00:02:21,120
generally do

58
00:02:21,120 --> 00:02:23,760
pen testing for mobile applications iot

59
00:02:23,760 --> 00:02:26,239
and web applications

60
00:02:26,239 --> 00:02:28,720
we also do adversary simulations where

61
00:02:28,720 --> 00:02:30,720
we will do phishing operations and we

62
00:02:30,720 --> 00:02:31,680
may deploy

63
00:02:31,680 --> 00:02:34,480
in malicious insiders into organizations

64
00:02:34,480 --> 00:02:36,959
to probe for their weaknesses

65
00:02:36,959 --> 00:02:39,280
so in addition to all of that max and i

66
00:02:39,280 --> 00:02:40,959
also conduct product security

67
00:02:40,959 --> 00:02:42,319
assessments

68
00:02:42,319 --> 00:02:44,400
so product security assessments are when

69
00:02:44,400 --> 00:02:46,160
we test the product for an extended

70
00:02:46,160 --> 00:02:48,160
period of time to make sure that it does

71
00:02:48,160 --> 00:02:49,599
what it says on the tin

72
00:02:49,599 --> 00:02:53,359
and also the probate for any bugs

73
00:02:53,760 --> 00:02:56,160
so as the applications that we test can

74
00:02:56,160 --> 00:02:57,120
vary widely

75
00:02:57,120 --> 00:02:59,599
from thin clients to web applications to

76
00:02:59,599 --> 00:03:00,959
web gateways to

77
00:03:00,959 --> 00:03:03,040
black box appliances we do not have a

78
00:03:03,040 --> 00:03:06,079
fixed methodology

79
00:03:06,560 --> 00:03:08,640
so this is an example from a previous

80
00:03:08,640 --> 00:03:10,080
application that we

81
00:03:10,080 --> 00:03:13,040
tested so we were supposed to test a web

82
00:03:13,040 --> 00:03:13,760
gateway

83
00:03:13,760 --> 00:03:15,840
that promised to cleanse all javascript

84
00:03:15,840 --> 00:03:17,519
from the input source

85
00:03:17,519 --> 00:03:19,599
so we wrote the fuzzer that generated

86
00:03:19,599 --> 00:03:21,920
all permutations of html tags and their

87
00:03:21,920 --> 00:03:22,720
attributes

88
00:03:22,720 --> 00:03:26,000
and we threw it at the gateway so if it

89
00:03:26,000 --> 00:03:27,680
worked the gateway should take out all

90
00:03:27,680 --> 00:03:29,280
the javascript so it would look like the

91
00:03:29,280 --> 00:03:31,040
image on the right

92
00:03:31,040 --> 00:03:33,200
so before you ask yes we did manage to

93
00:03:33,200 --> 00:03:35,360
find a bug where there was a html tag

94
00:03:35,360 --> 00:03:36,239
and a valid

95
00:03:36,239 --> 00:03:37,840
attribute that could result in

96
00:03:37,840 --> 00:03:39,840
executable javascript

97
00:03:39,840 --> 00:03:41,920
so we have since informed the developer

98
00:03:41,920 --> 00:03:45,040
and this has been patched

99
00:03:45,599 --> 00:03:47,519
so now we come to the meat and potatoes

100
00:03:47,519 --> 00:03:48,720
of this presentation

101
00:03:48,720 --> 00:03:50,560
which illustrates an incident when we

102
00:03:50,560 --> 00:03:53,200
found a back door in an application

103
00:03:53,200 --> 00:03:55,280
so we tested this application which was

104
00:03:55,280 --> 00:03:57,280
being used by an agency as part of our

105
00:03:57,280 --> 00:03:59,439
routine technical audit

106
00:03:59,439 --> 00:04:01,519
so this application is a critical part

107
00:04:01,519 --> 00:04:03,439
of the organization's operations

108
00:04:03,439 --> 00:04:05,680
and it is a mix of native and c-sharp

109
00:04:05,680 --> 00:04:07,680
code and it interacted with a back-end

110
00:04:07,680 --> 00:04:09,519
database

111
00:04:09,519 --> 00:04:11,360
so users would log in and they would

112
00:04:11,360 --> 00:04:12,879
adjust the database and manipulate

113
00:04:12,879 --> 00:04:13,920
manipulated

114
00:04:13,920 --> 00:04:17,440
by the program's gui okay

115
00:04:17,440 --> 00:04:20,238
so as we were thrown into this program

116
00:04:20,238 --> 00:04:21,440
without any background

117
00:04:21,440 --> 00:04:23,360
we started with looking for interesting

118
00:04:23,360 --> 00:04:25,360
strings via ida

119
00:04:25,360 --> 00:04:27,360
so we found a string that said answer

120
00:04:27,360 --> 00:04:29,199
password for blank

121
00:04:29,199 --> 00:04:31,600
so this password was not encountered in

122
00:04:31,600 --> 00:04:33,840
normal operations and seemed to suggest

123
00:04:33,840 --> 00:04:35,919
an elevation of permissions

124
00:04:35,919 --> 00:04:37,840
so therefore it's extremely interesting

125
00:04:37,840 --> 00:04:38,960
so we traced

126
00:04:38,960 --> 00:04:40,800
function calls where the string was used

127
00:04:40,800 --> 00:04:42,320
and we found that it was being

128
00:04:42,320 --> 00:04:46,560
called when the program was starting up

129
00:04:47,360 --> 00:04:49,919
so you know as when program starts up

130
00:04:49,919 --> 00:04:51,759
they will generally do things like load

131
00:04:51,759 --> 00:04:52,800
dlls

132
00:04:52,800 --> 00:04:54,800
read and write to registry values

133
00:04:54,800 --> 00:04:56,320
initialize data

134
00:04:56,320 --> 00:04:59,440
so this program did all that but it also

135
00:04:59,440 --> 00:05:00,800
did something extra

136
00:05:00,800 --> 00:05:02,479
it will check the keyboard to see if

137
00:05:02,479 --> 00:05:04,400
certain keys were being pressed

138
00:05:04,400 --> 00:05:06,400
so this was highly unusual as most

139
00:05:06,400 --> 00:05:08,960
programs don't do that

140
00:05:08,960 --> 00:05:10,639
so we propped a bit further and we

141
00:05:10,639 --> 00:05:12,240
figured out what the keys were

142
00:05:12,240 --> 00:05:13,759
and we pressed it when the program was

143
00:05:13,759 --> 00:05:16,320
being started up and viola

144
00:05:16,320 --> 00:05:18,560
the dialog box appeared using the string

145
00:05:18,560 --> 00:05:19,840
that we were looking at

146
00:05:19,840 --> 00:05:23,199
this was awesome so

147
00:05:23,199 --> 00:05:25,520
now we have a next question what is this

148
00:05:25,520 --> 00:05:26,960
password

149
00:05:26,960 --> 00:05:28,880
so for starters we could force the

150
00:05:28,880 --> 00:05:30,800
function to always return true using a

151
00:05:30,800 --> 00:05:31,520
debugger

152
00:05:31,520 --> 00:05:33,919
by passing the password check however

153
00:05:33,919 --> 00:05:35,919
this wouldn't be cool so we decided just

154
00:05:35,919 --> 00:05:39,680
figure out what the password was

155
00:05:39,680 --> 00:05:42,479
so this was what we knew at that point

156
00:05:42,479 --> 00:05:44,320
the password was not hard coded

157
00:05:44,320 --> 00:05:46,400
because we did not see it in either we

158
00:05:46,400 --> 00:05:47,919
did not see it checking any static

159
00:05:47,919 --> 00:05:49,520
strings within either

160
00:05:49,520 --> 00:05:51,680
so we also didn't think it was stored in

161
00:05:51,680 --> 00:05:53,840
the database as this prompt would appear

162
00:05:53,840 --> 00:05:56,000
before the user signs in and this would

163
00:05:56,000 --> 00:05:57,600
be before the application made the

164
00:05:57,600 --> 00:06:00,160
database connection

165
00:06:00,160 --> 00:06:03,039
okay so after more digging we found

166
00:06:03,039 --> 00:06:04,240
these two functions

167
00:06:04,240 --> 00:06:06,639
generate super secret password and call

168
00:06:06,639 --> 00:06:08,080
check password

169
00:06:08,080 --> 00:06:10,000
so generate super secret password will

170
00:06:10,000 --> 00:06:11,600
take in a constant seed

171
00:06:11,600 --> 00:06:14,080
as you can see from the first assembly

172
00:06:14,080 --> 00:06:15,759
line over there

173
00:06:15,759 --> 00:06:17,919
then it will generate this password and

174
00:06:17,919 --> 00:06:19,199
it will pass it to

175
00:06:19,199 --> 00:06:21,440
call check password which will prompt

176
00:06:21,440 --> 00:06:22,720
the user for input

177
00:06:22,720 --> 00:06:24,720
and compare the user's input against the

178
00:06:24,720 --> 00:06:27,840
generated password

179
00:06:28,800 --> 00:06:31,840
so this is the decompile code for

180
00:06:31,840 --> 00:06:34,560
the super secret password function so as

181
00:06:34,560 --> 00:06:36,080
from the previous slide we knew that it

182
00:06:36,080 --> 00:06:37,919
had a constant seed value

183
00:06:37,919 --> 00:06:40,160
then it will take that get to this date

184
00:06:40,160 --> 00:06:40,960
and time

185
00:06:40,960 --> 00:06:42,720
and it will do a bunch of operations

186
00:06:42,720 --> 00:06:44,000
that involve division

187
00:06:44,000 --> 00:06:46,960
modulus by shifting source and ends and

188
00:06:46,960 --> 00:06:48,800
it will return the six character string

189
00:06:48,800 --> 00:06:49,599
that will change

190
00:06:49,599 --> 00:06:53,039
every week so now

191
00:06:53,039 --> 00:06:54,479
since we knew that the password didn't

192
00:06:54,479 --> 00:06:56,960
change that often we decided to just use

193
00:06:56,960 --> 00:06:57,759
the debugger

194
00:06:57,759 --> 00:07:00,400
and break after the function ended so we

195
00:07:00,400 --> 00:07:02,560
could get out the register generated

196
00:07:02,560 --> 00:07:04,240
password from rcx

197
00:07:04,240 --> 00:07:06,160
so this is the password in its full

198
00:07:06,160 --> 00:07:09,120
plain text glory

199
00:07:10,479 --> 00:07:13,680
so after we put the password into the

200
00:07:13,680 --> 00:07:15,840
prompt so we were greeted with a console

201
00:07:15,840 --> 00:07:17,360
when we started the program

202
00:07:17,360 --> 00:07:19,360
so this does not usually happen when the

203
00:07:19,360 --> 00:07:22,880
program starts up so it's like yes

204
00:07:23,440 --> 00:07:25,199
so from the console we discovered that

205
00:07:25,199 --> 00:07:27,599
we could run stored database procedures

206
00:07:27,599 --> 00:07:29,120
that were previously defined by the

207
00:07:29,120 --> 00:07:31,759
developers so these procedures they did

208
00:07:31,759 --> 00:07:34,160
not have any access control so our low

209
00:07:34,160 --> 00:07:35,280
privileged user

210
00:07:35,280 --> 00:07:37,680
could just run any of them so this one

211
00:07:37,680 --> 00:07:39,520
is an example where we could pull up the

212
00:07:39,520 --> 00:07:41,440
user logins with the sensitive

213
00:07:41,440 --> 00:07:43,039
information like login ids

214
00:07:43,039 --> 00:07:44,800
property phone numbers and their login

215
00:07:44,800 --> 00:07:47,199
sessions

216
00:07:47,759 --> 00:07:50,720
so what was the impact of this so a user

217
00:07:50,720 --> 00:07:52,879
by having such a password can run stored

218
00:07:52,879 --> 00:07:53,520
database

219
00:07:53,520 --> 00:07:55,360
procedures like what i mentioned and

220
00:07:55,360 --> 00:07:56,960
also raw sql

221
00:07:56,960 --> 00:07:59,199
so this would let the user run do things

222
00:07:59,199 --> 00:08:00,800
such as changing passwords for other

223
00:08:00,800 --> 00:08:01,520
users

224
00:08:01,520 --> 00:08:04,960
and using raw sql to modify the database

225
00:08:04,960 --> 00:08:07,120
potentially bypassing any application

226
00:08:07,120 --> 00:08:09,440
constraints or logging

227
00:08:09,440 --> 00:08:11,120
so why in the world did the developers

228
00:08:11,120 --> 00:08:12,639
put that in

229
00:08:12,639 --> 00:08:14,800
so they put it in because they wanted to

230
00:08:14,800 --> 00:08:17,120
ease their remote debugging maintenance

231
00:08:17,120 --> 00:08:20,080
and deployment operations however they

232
00:08:20,080 --> 00:08:21,599
did recognize that this could be an

233
00:08:21,599 --> 00:08:22,240
issue

234
00:08:22,240 --> 00:08:24,000
so they generated this function that

235
00:08:24,000 --> 00:08:25,599
will create a password that will change

236
00:08:25,599 --> 00:08:28,800
every week however since the seat was

237
00:08:28,800 --> 00:08:30,080
always the same

238
00:08:30,080 --> 00:08:31,680
somebody with this program could

239
00:08:31,680 --> 00:08:33,360
generate this password which could be

240
00:08:33,360 --> 00:08:34,000
used in

241
00:08:34,000 --> 00:08:36,080
any installation of this program across

242
00:08:36,080 --> 00:08:39,120
any organization

243
00:08:39,599 --> 00:08:42,000
okay so before i enter my session i

244
00:08:42,000 --> 00:08:43,200
would like to touch a bit on the

245
00:08:43,200 --> 00:08:44,880
challenges that we face when auditing

246
00:08:44,880 --> 00:08:46,240
this software

247
00:08:46,240 --> 00:08:48,560
so we were very low privileged users in

248
00:08:48,560 --> 00:08:50,480
a very restrictive environment so we

249
00:08:50,480 --> 00:08:52,399
could not patch the binary nor could we

250
00:08:52,399 --> 00:08:55,120
change the underlying os

251
00:08:55,120 --> 00:08:57,360
so we also had an issue in communicating

252
00:08:57,360 --> 00:08:58,720
with the developers

253
00:08:58,720 --> 00:09:01,519
the developers being developers they

254
00:09:01,519 --> 00:09:02,240
felt that

255
00:09:02,240 --> 00:09:05,519
this wasn't a big of an issue because

256
00:09:05,519 --> 00:09:07,279
they preferred to go with the ease of

257
00:09:07,279 --> 00:09:09,120
development and maintenance so they did

258
00:09:09,120 --> 00:09:11,200
not find having such a backdoor such an

259
00:09:11,200 --> 00:09:12,640
issue

260
00:09:12,640 --> 00:09:14,720
so with that our council were close and

261
00:09:14,720 --> 00:09:16,160
let me hand over to max

262
00:09:16,160 --> 00:09:18,000
who will talk about his presence his

263
00:09:18,000 --> 00:09:20,000
experience in encountering a backdoor in

264
00:09:20,000 --> 00:09:21,519
ios applications

265
00:09:21,519 --> 00:09:24,640
over to you max hi i'm max

266
00:09:24,640 --> 00:09:26,399
so today i'll be talking about some of

267
00:09:26,399 --> 00:09:28,160
the applications that i found on the app

268
00:09:28,160 --> 00:09:28,959
store

269
00:09:28,959 --> 00:09:31,920
so during my free time i like to look at

270
00:09:31,920 --> 00:09:33,360
applications on the app store and

271
00:09:33,360 --> 00:09:35,360
in this instance i'll be talking about

272
00:09:35,360 --> 00:09:36,959
local authentication bypass

273
00:09:36,959 --> 00:09:40,320
which i found on the app store so

274
00:09:40,320 --> 00:09:42,080
we actually look at password managers in

275
00:09:42,080 --> 00:09:44,000
this instance because

276
00:09:44,000 --> 00:09:46,000
password managers hold a lot of safe

277
00:09:46,000 --> 00:09:47,120
passwords

278
00:09:47,120 --> 00:09:49,920
and some of them actually are easy to

279
00:09:49,920 --> 00:09:51,120
bypass

280
00:09:51,120 --> 00:09:52,959
because their verification checks are as

281
00:09:52,959 --> 00:09:54,160
simple as string

282
00:09:54,160 --> 00:09:57,360
check like true false value so let me

283
00:09:57,360 --> 00:09:59,040
give you an example

284
00:09:59,040 --> 00:10:00,640
this is an example of one of the

285
00:10:00,640 --> 00:10:02,320
password manager which i analyzed on the

286
00:10:02,320 --> 00:10:03,440
app store

287
00:10:03,440 --> 00:10:05,040
where the verification of the master

288
00:10:05,040 --> 00:10:07,200
password is just by comparing if the

289
00:10:07,200 --> 00:10:09,600
string is equal with the input password

290
00:10:09,600 --> 00:10:11,440
so whatever you input is not actually

291
00:10:11,440 --> 00:10:13,680
used to decrypt the vol

292
00:10:13,680 --> 00:10:16,480
this allows an attacker to actually use

293
00:10:16,480 --> 00:10:19,839
debugger to easily bypass

294
00:10:19,839 --> 00:10:21,600
the save the master password they have

295
00:10:21,600 --> 00:10:23,440
set and access the same password they

296
00:10:23,440 --> 00:10:25,200
have set

297
00:10:25,200 --> 00:10:27,600
so we are actually here to see if you

298
00:10:27,600 --> 00:10:29,040
can actually entrust

299
00:10:29,040 --> 00:10:30,959
your password to password managers that

300
00:10:30,959 --> 00:10:32,959
you'll find on the app store

301
00:10:32,959 --> 00:10:35,120
so as a learning experience we selected

302
00:10:35,120 --> 00:10:36,480
this password manager called

303
00:10:36,480 --> 00:10:39,360
log password manager to conduct a test

304
00:10:39,360 --> 00:10:41,519
so it can be downloaded from the apple

305
00:10:41,519 --> 00:10:43,760
app store and it's an average of four or

306
00:10:43,760 --> 00:10:44,560
five star with

307
00:10:44,560 --> 00:10:48,480
500 over ratings so when we first

308
00:10:48,480 --> 00:10:50,000
launched this application

309
00:10:50,000 --> 00:10:52,079
it asked us to set the master password

310
00:10:52,079 --> 00:10:53,680
for the password manager

311
00:10:53,680 --> 00:10:55,519
well i set one and then after they asked

312
00:10:55,519 --> 00:10:56,720
me to set a password key

313
00:10:56,720 --> 00:10:58,399
and i didn't set one because i don't

314
00:10:58,399 --> 00:11:00,240
believe in password teens

315
00:11:00,240 --> 00:11:03,120
next the password manager asks you to

316
00:11:03,120 --> 00:11:04,959
back up the master password

317
00:11:04,959 --> 00:11:07,360
and the complaints that if you do not

318
00:11:07,360 --> 00:11:08,959
backup this master password

319
00:11:08,959 --> 00:11:10,560
there will be no way of accessing the

320
00:11:10,560 --> 00:11:12,240
app if you ever forget this master

321
00:11:12,240 --> 00:11:13,279
password

322
00:11:13,279 --> 00:11:15,760
additionally you can see from the screen

323
00:11:15,760 --> 00:11:17,279
they will double confirm and tell you

324
00:11:17,279 --> 00:11:17,600
that

325
00:11:17,600 --> 00:11:20,079
there's no recovery passcode so if you

326
00:11:20,079 --> 00:11:22,160
forget your master password

327
00:11:22,160 --> 00:11:23,600
you should not be able to access this

328
00:11:23,600 --> 00:11:25,760
application anymore

329
00:11:25,760 --> 00:11:28,720
to analyze this application our team

330
00:11:28,720 --> 00:11:29,200
uses

331
00:11:29,200 --> 00:11:31,760
a booking framework tools to observe the

332
00:11:31,760 --> 00:11:33,440
application flow for this password

333
00:11:33,440 --> 00:11:35,200
manager

334
00:11:35,200 --> 00:11:37,760
so i've listed up the syntax over here

335
00:11:37,760 --> 00:11:39,519
so what we want to do is we want to

336
00:11:39,519 --> 00:11:40,640
observe

337
00:11:40,640 --> 00:11:42,640
the application flow when you enter the

338
00:11:42,640 --> 00:11:44,480
right and wrong password

339
00:11:44,480 --> 00:11:46,399
so as you can see here when you enter

340
00:11:46,399 --> 00:11:47,519
the right password

341
00:11:47,519 --> 00:11:49,279
the application will call each success

342
00:11:49,279 --> 00:11:51,600
login passing one as the argument

343
00:11:51,600 --> 00:11:52,880
and then when you enter the wrong

344
00:11:52,880 --> 00:11:55,279
password it cause each success login

345
00:11:55,279 --> 00:11:57,200
passing 0 as the argument

346
00:11:57,200 --> 00:11:59,920
looking closer into this function we see

347
00:11:59,920 --> 00:12:02,160
that it's just doing a simple string

348
00:12:02,160 --> 00:12:03,440
comparison

349
00:12:03,440 --> 00:12:06,639
where it is comparing the input password

350
00:12:06,639 --> 00:12:08,399
versus the master password

351
00:12:08,399 --> 00:12:10,480
if both strings are equal it returns

352
00:12:10,480 --> 00:12:12,240
true if not

353
00:12:12,240 --> 00:12:15,279
it returns false

354
00:12:15,600 --> 00:12:18,079
and then when we look into the assembly

355
00:12:18,079 --> 00:12:19,519
code for this section

356
00:12:19,519 --> 00:12:21,040
we see that when you enter the right

357
00:12:21,040 --> 00:12:23,680
password it calls set date flag

358
00:12:23,680 --> 00:12:26,240
and then cause is success login passing

359
00:12:26,240 --> 00:12:29,200
one as the argument

360
00:12:29,200 --> 00:12:32,560
so we now know that when you keen the

361
00:12:32,560 --> 00:12:34,240
right master password

362
00:12:34,240 --> 00:12:36,399
each success logging will be called with

363
00:12:36,399 --> 00:12:38,800
the parameter true and then you display

364
00:12:38,800 --> 00:12:40,800
all the save passwords

365
00:12:40,800 --> 00:12:42,720
however when you key in the wrong

366
00:12:42,720 --> 00:12:44,720
password the application should just

367
00:12:44,720 --> 00:12:46,399
only prompt an error saying that

368
00:12:46,399 --> 00:12:48,880
you have key in the wrong password but

369
00:12:48,880 --> 00:12:50,720
when we look closer to the code

370
00:12:50,720 --> 00:12:53,360
we realize something strange and that

371
00:12:53,360 --> 00:12:54,240
was

372
00:12:54,240 --> 00:12:56,000
this application was actually checking

373
00:12:56,000 --> 00:12:58,079
for fixed string and this fixed string

374
00:12:58,079 --> 00:12:59,120
was

375
00:12:59,120 --> 00:13:01,600
what you see in the screen star hex u6

376
00:13:01,600 --> 00:13:02,639
hex star

377
00:13:02,639 --> 00:13:05,600
well this was very unusual because if

378
00:13:05,600 --> 00:13:06,800
you are actually keen

379
00:13:06,800 --> 00:13:08,480
in the wrong password why would you

380
00:13:08,480 --> 00:13:09,920
actually need to check for

381
00:13:09,920 --> 00:13:12,639
an additional fixed string so that led

382
00:13:12,639 --> 00:13:12,959
me

383
00:13:12,959 --> 00:13:15,600
to actually try out what is actually

384
00:13:15,600 --> 00:13:16,000
this

385
00:13:16,000 --> 00:13:18,160
fixed string and we actually found out

386
00:13:18,160 --> 00:13:19,360
that

387
00:13:19,360 --> 00:13:20,800
there's a secret back door in this

388
00:13:20,800 --> 00:13:23,600
password manager so just by keeping a

389
00:13:23,600 --> 00:13:26,639
user input of star hex06 hackstar you'll

390
00:13:26,639 --> 00:13:28,399
write false to the key pair

391
00:13:28,399 --> 00:13:30,959
k password on and it totally removes the

392
00:13:30,959 --> 00:13:33,279
need for master password to unlock this

393
00:13:33,279 --> 00:13:35,760
password manager additionally as you can

394
00:13:35,760 --> 00:13:38,000
see in the screenshot in the right

395
00:13:38,000 --> 00:13:40,399
all your saved password entries are

396
00:13:40,399 --> 00:13:41,760
available for the

397
00:13:41,760 --> 00:13:43,279
attacker or anyone who has physical

398
00:13:43,279 --> 00:13:45,040
access to your device

399
00:13:45,040 --> 00:13:47,199
so they can see all the existing entries

400
00:13:47,199 --> 00:13:49,120
that you have on your

401
00:13:49,120 --> 00:13:52,800
password manager set next

402
00:13:52,800 --> 00:13:54,720
we dive in further to look at this

403
00:13:54,720 --> 00:13:56,480
important key value pair

404
00:13:56,480 --> 00:13:59,760
um k password on so we see that this k

405
00:13:59,760 --> 00:14:01,680
password on determines if master

406
00:14:01,680 --> 00:14:03,760
password is needed to access the app

407
00:14:03,760 --> 00:14:05,920
and k login password stores the original

408
00:14:05,920 --> 00:14:07,600
set master password

409
00:14:07,600 --> 00:14:09,360
and both of these are stored in this

410
00:14:09,360 --> 00:14:10,720
group key list file

411
00:14:10,720 --> 00:14:13,519
where we actually tried to extract it

412
00:14:13,519 --> 00:14:14,880
and extracting it

413
00:14:14,880 --> 00:14:17,040
we found another thing from this

414
00:14:17,040 --> 00:14:18,160
application

415
00:14:18,160 --> 00:14:19,839
as you can see in the screenshot in the

416
00:14:19,839 --> 00:14:21,839
bottom left

417
00:14:21,839 --> 00:14:24,399
for the k login password it stores my

418
00:14:24,399 --> 00:14:26,800
orgini set master password

419
00:14:26,800 --> 00:14:29,600
soho this app not only has a door where

420
00:14:29,600 --> 00:14:31,839
you can actually access it through

421
00:14:31,839 --> 00:14:35,279
the the fixturing star hex06 hackstar

422
00:14:35,279 --> 00:14:38,160
if someone actually managed to get hold

423
00:14:38,160 --> 00:14:38,959
of your device

424
00:14:38,959 --> 00:14:40,560
he can also retrieve your master

425
00:14:40,560 --> 00:14:42,399
password to unlock

426
00:14:42,399 --> 00:14:45,839
your your password manager so so much so

427
00:14:45,839 --> 00:14:47,760
for 10 users to backup their master

428
00:14:47,760 --> 00:14:49,519
password and that there's no recovery

429
00:14:49,519 --> 00:14:50,560
password

430
00:14:50,560 --> 00:14:54,320
when you see that's totally not true

431
00:14:54,320 --> 00:14:57,360
looking further ahead we're thinking

432
00:14:57,360 --> 00:15:00,240
well this is only one password manager

433
00:15:00,240 --> 00:15:00,880
there are like

434
00:15:00,880 --> 00:15:02,560
tons and tons of password manager that

435
00:15:02,560 --> 00:15:03,920
you can find in the app store

436
00:15:03,920 --> 00:15:06,480
so we wanted to look specifically at all

437
00:15:06,480 --> 00:15:08,079
the apps that were developed by this

438
00:15:08,079 --> 00:15:09,120
developer

439
00:15:09,120 --> 00:15:11,040
so we search it up and we found four

440
00:15:11,040 --> 00:15:12,240
applications

441
00:15:12,240 --> 00:15:13,760
three of them were actually password

442
00:15:13,760 --> 00:15:15,600
managers so

443
00:15:15,600 --> 00:15:18,160
we tried to look at the free password

444
00:15:18,160 --> 00:15:19,519
managers which were

445
00:15:19,519 --> 00:15:22,639
password manager fingerprint lock and

446
00:15:22,639 --> 00:15:25,680
log password manager

447
00:15:25,680 --> 00:15:28,240
so we tracked the other password manager

448
00:15:28,240 --> 00:15:29,680
which is called password manager

449
00:15:29,680 --> 00:15:30,480
fingerprint

450
00:15:30,480 --> 00:15:32,079
and yet the same interface as the

451
00:15:32,079 --> 00:15:34,079
original application we tested

452
00:15:34,079 --> 00:15:36,079
so immediately i tried the same backdoor

453
00:15:36,079 --> 00:15:37,600
star hex in the six hexta

454
00:15:37,600 --> 00:15:40,320
and it worked so this shows that the

455
00:15:40,320 --> 00:15:41,440
developer actually

456
00:15:41,440 --> 00:15:44,560
sort of reused the code base and without

457
00:15:44,560 --> 00:15:47,040
testing the paid version of

458
00:15:47,040 --> 00:15:49,920
the password manager we highly infer we

459
00:15:49,920 --> 00:15:51,440
infer that there's a high chance that

460
00:15:51,440 --> 00:15:52,959
this password manager

461
00:15:52,959 --> 00:15:56,079
would also have the same backdoor

462
00:15:56,079 --> 00:15:57,920
so what would be the impact of this

463
00:15:57,920 --> 00:15:59,759
finding is that someone with physical

464
00:15:59,759 --> 00:16:01,920
access to your phone could access

465
00:16:01,920 --> 00:16:03,759
all your saved password on this password

466
00:16:03,759 --> 00:16:05,120
manager

467
00:16:05,120 --> 00:16:07,600
assuming and why would the developer

468
00:16:07,600 --> 00:16:08,639
even do this

469
00:16:08,639 --> 00:16:11,199
maybe because he wanted to have a backup

470
00:16:11,199 --> 00:16:12,639
recovery code in case

471
00:16:12,639 --> 00:16:15,199
some of their users forget their past

472
00:16:15,199 --> 00:16:16,639
master password

473
00:16:16,639 --> 00:16:18,800
so as a mitigation we actually reported

474
00:16:18,800 --> 00:16:19,680
to the

475
00:16:19,680 --> 00:16:22,560
developer multiple times since january

476
00:16:22,560 --> 00:16:23,120
and as

477
00:16:23,120 --> 00:16:24,639
of now actually the app is still on the

478
00:16:24,639 --> 00:16:26,720
app store

479
00:16:26,720 --> 00:16:29,920
so other than testing ios applications

480
00:16:29,920 --> 00:16:32,160
our team also looked at a variety of

481
00:16:32,160 --> 00:16:33,120
different

482
00:16:33,120 --> 00:16:36,480
technologies such as smart locks

483
00:16:36,480 --> 00:16:39,680
and iot devices so our team

484
00:16:39,680 --> 00:16:42,399
will actually publish this variety of

485
00:16:42,399 --> 00:16:44,160
security articles on our

486
00:16:44,160 --> 00:16:46,560
medium page as you can see so you can

487
00:16:46,560 --> 00:16:47,759
feel free to scan the

488
00:16:47,759 --> 00:16:51,839
qr code to access a page

489
00:16:52,320 --> 00:16:55,360
okay so this year

490
00:16:55,360 --> 00:16:57,600
gov tech will also be organizing a ctf

491
00:16:57,600 --> 00:16:58,480
event

492
00:16:58,480 --> 00:17:00,720
and we'll be releasing more details on

493
00:17:00,720 --> 00:17:02,160
stack 2020.

494
00:17:02,160 --> 00:17:05,359
so stack 2020 is a developer

495
00:17:05,359 --> 00:17:08,079
concentrate our developer where the

496
00:17:08,079 --> 00:17:09,119
government and the

497
00:17:09,119 --> 00:17:11,119
developers come together where we will

498
00:17:11,119 --> 00:17:13,359
share how we can

499
00:17:13,359 --> 00:17:16,160
better secure our applications as well

500
00:17:16,160 --> 00:17:16,720
as uh

501
00:17:16,720 --> 00:17:18,000
we will share what the government is

502
00:17:18,000 --> 00:17:19,760
doing and

503
00:17:19,760 --> 00:17:22,319
for this ctf there will be a variety of

504
00:17:22,319 --> 00:17:23,599
prizes to be won

505
00:17:23,599 --> 00:17:26,000
including cash prizes so more details

506
00:17:26,000 --> 00:17:26,799
will be released

507
00:17:26,799 --> 00:17:30,480
soon so thank you for your time

508
00:17:30,480 --> 00:17:32,799
you can reach out to us on angelister

509
00:17:32,799 --> 00:17:34,080
and mexican linkin

510
00:17:34,080 --> 00:17:39,760
or anjali said twitter thank you

