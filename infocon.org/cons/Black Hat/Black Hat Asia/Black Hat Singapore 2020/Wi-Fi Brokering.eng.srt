1
00:00:01,839 --> 00:00:03,360
welcome to my

2
00:00:03,360 --> 00:00:06,080
talk wi-fi brokering uh this is a talk

3
00:00:06,080 --> 00:00:07,680
for those who don't want to spend time

4
00:00:07,680 --> 00:00:08,880
cracking hashes and

5
00:00:08,880 --> 00:00:09,840
probably want to connect to some

6
00:00:09,840 --> 00:00:11,920
people's wi-fi uh

7
00:00:11,920 --> 00:00:13,280
or trick people into connecting to you

8
00:00:13,280 --> 00:00:14,880
so you can do horrible things to them or

9
00:00:14,880 --> 00:00:16,880
give them free internet depending

10
00:00:16,880 --> 00:00:18,960
uh who am i i'm michael kruger i'm

11
00:00:18,960 --> 00:00:20,960
underscore cable thief on twitter

12
00:00:20,960 --> 00:00:22,560
i've been four years at sensepost which

13
00:00:22,560 --> 00:00:24,400
is now orange cyberdefence

14
00:00:24,400 --> 00:00:26,400
and i've been dabbling in wi-fi attacks

15
00:00:26,400 --> 00:00:28,960
for about two years of those

16
00:00:28,960 --> 00:00:30,480
so what i'm going to discuss in this

17
00:00:30,480 --> 00:00:32,640
talk uh the current attacks are

18
00:00:32,640 --> 00:00:34,239
available to us

19
00:00:34,239 --> 00:00:35,520
around what we're going to be talking

20
00:00:35,520 --> 00:00:38,320
about so specifically peep

21
00:00:38,320 --> 00:00:40,239
new attacks that i've now created and

22
00:00:40,239 --> 00:00:42,239
presenting to you

23
00:00:42,239 --> 00:00:44,399
building this thing so the problems i

24
00:00:44,399 --> 00:00:45,600
encountered

25
00:00:45,600 --> 00:00:48,640
other things we can relay using this new

26
00:00:48,640 --> 00:00:49,600
capability

27
00:00:49,600 --> 00:00:51,840
that this enables you to do and then

28
00:00:51,840 --> 00:00:53,199
defending against it which might

29
00:00:53,199 --> 00:00:55,520
interest some people

30
00:00:55,520 --> 00:00:57,440
so to start things off i just want to

31
00:00:57,440 --> 00:01:00,480
give uh an overview of what peep is

32
00:01:00,480 --> 00:01:02,719
so peep is protected eep but some sort

33
00:01:02,719 --> 00:01:05,040
of microsoft thing

34
00:01:05,040 --> 00:01:08,479
and what it means is it's essentially

35
00:01:08,479 --> 00:01:10,560
an eep authentication within a tls

36
00:01:10,560 --> 00:01:12,560
tunnel so the first thing that happens

37
00:01:12,560 --> 00:01:14,640
is the client device will set up a tls

38
00:01:14,640 --> 00:01:16,560
tunnel with the access point

39
00:01:16,560 --> 00:01:18,000
and then provided it accepts the

40
00:01:18,000 --> 00:01:19,360
certificate that the access point

41
00:01:19,360 --> 00:01:20,000
presents

42
00:01:20,000 --> 00:01:23,119
so kind of how websites work it will

43
00:01:23,119 --> 00:01:24,640
then within that tunnel do

44
00:01:24,640 --> 00:01:28,240
a ms chap challenge response

45
00:01:28,240 --> 00:01:29,920
ms chap challenge response we'll go into

46
00:01:29,920 --> 00:01:31,439
a bit more detail just now

47
00:01:31,439 --> 00:01:35,360
but basically it can prove both sides

48
00:01:35,360 --> 00:01:38,159
proves to both sides that the server

49
00:01:38,159 --> 00:01:39,680
knows the password and the client knows

50
00:01:39,680 --> 00:01:41,200
the password without actually passing

51
00:01:41,200 --> 00:01:41,520
the

52
00:01:41,520 --> 00:01:45,280
password over and then

53
00:01:45,280 --> 00:01:46,640
the four-way handshake happens the

54
00:01:46,640 --> 00:01:48,399
four-way handshake is then

55
00:01:48,399 --> 00:01:50,560
uses a key created from the previous

56
00:01:50,560 --> 00:01:52,720
steps so that's what finally connects

57
00:01:52,720 --> 00:01:54,479
you to the wi-fi network

58
00:01:54,479 --> 00:01:57,439
cool so challenge response thus now

59
00:01:57,439 --> 00:01:58,799
being the thing that happens inside the

60
00:01:58,799 --> 00:02:00,799
tls tunnel

61
00:02:00,799 --> 00:02:02,560
consists of first you send along your

62
00:02:02,560 --> 00:02:04,320
identity so this is typically sort of

63
00:02:04,320 --> 00:02:05,600
your domain name

64
00:02:05,600 --> 00:02:09,119
so mine would be michael kruger the

65
00:02:09,119 --> 00:02:10,639
access point will then send along a

66
00:02:10,639 --> 00:02:13,040
challenge which is 16 random

67
00:02:13,040 --> 00:02:16,560
bytes you as the client will take that

68
00:02:16,560 --> 00:02:17,120
challenge

69
00:02:17,120 --> 00:02:19,599
you'll generate your own challenge put

70
00:02:19,599 --> 00:02:20,319
them together

71
00:02:20,319 --> 00:02:22,319
and calculate a response using the

72
00:02:22,319 --> 00:02:24,000
password that you know

73
00:02:24,000 --> 00:02:26,080
you then send that response as well as

74
00:02:26,080 --> 00:02:28,000
your challenge over to the access point

75
00:02:28,000 --> 00:02:29,840
access point does the same thing and if

76
00:02:29,840 --> 00:02:31,120
it gets the same

77
00:02:31,120 --> 00:02:34,239
result so it gets your response then it

78
00:02:34,239 --> 00:02:36,879
knows that you know the password

79
00:02:36,879 --> 00:02:38,720
it will then do a similar thing and send

80
00:02:38,720 --> 00:02:40,160
its own response to you

81
00:02:40,160 --> 00:02:42,000
as well as the success saying okay we

82
00:02:42,000 --> 00:02:43,840
validated your password it's correct

83
00:02:43,840 --> 00:02:46,080
you are allowed to connect to us at

84
00:02:46,080 --> 00:02:47,360
which point the client will say okay

85
00:02:47,360 --> 00:02:48,400
cool i can connect

86
00:02:48,400 --> 00:02:50,000
but let's make sure that the server

87
00:02:50,000 --> 00:02:52,400
knows our password correctly first

88
00:02:52,400 --> 00:02:55,040
and it will compare the response and do

89
00:02:55,040 --> 00:02:56,640
the whole

90
00:02:56,640 --> 00:02:58,800
thing again so once again both sides

91
00:02:58,800 --> 00:03:00,319
know whether the password is

92
00:03:00,319 --> 00:03:04,000
correct or not so the current attack

93
00:03:04,000 --> 00:03:06,959
on this involves standing up a rogue

94
00:03:06,959 --> 00:03:08,720
access point

95
00:03:08,720 --> 00:03:11,360
uh the victim typically a rogue access

96
00:03:11,360 --> 00:03:12,560
point with the same name a victim will

97
00:03:12,560 --> 00:03:14,959
come along and connect to it

98
00:03:14,959 --> 00:03:16,159
they will have to accept your

99
00:03:16,159 --> 00:03:17,440
certificate so that you get into the

100
00:03:17,440 --> 00:03:18,319
inner

101
00:03:18,319 --> 00:03:21,519
the inner phase so phase two

102
00:03:21,519 --> 00:03:23,040
uh the challenge response will be

103
00:03:23,040 --> 00:03:24,640
performed in phase two

104
00:03:24,640 --> 00:03:26,319
the result of that challenge response is

105
00:03:26,319 --> 00:03:28,640
a hash which as you saw when you are the

106
00:03:28,640 --> 00:03:30,319
access point

107
00:03:30,319 --> 00:03:34,239
you get a piece of information

108
00:03:34,239 --> 00:03:36,400
uh so you get two challenges you get the

109
00:03:36,400 --> 00:03:37,760
piece of information with all those

110
00:03:37,760 --> 00:03:38,080
things

111
00:03:38,080 --> 00:03:40,720
if you keep pumping uh passwords into it

112
00:03:40,720 --> 00:03:41,760
you can calculate

113
00:03:41,760 --> 00:03:43,120
the thing and you can validate it

114
00:03:43,120 --> 00:03:44,400
against that response that the server

115
00:03:44,400 --> 00:03:45,440
sent over so it

116
00:03:45,440 --> 00:03:48,640
gives you a way to guess passwords

117
00:03:48,640 --> 00:03:49,599
offline

118
00:03:49,599 --> 00:03:51,280
and eventually you can crash the hash

119
00:03:51,280 --> 00:03:53,760
and connect to the network

120
00:03:53,760 --> 00:03:58,000
so this cracking is done with

121
00:03:58,000 --> 00:03:59,680
typically i would do it with hashcat but

122
00:03:59,680 --> 00:04:01,519
there are lots of other tools

123
00:04:01,519 --> 00:04:03,920
in hashcat you use the the hashtype

124
00:04:03,920 --> 00:04:07,040
net10tlm v1 which is 5500.

125
00:04:07,040 --> 00:04:09,040
this is important later when i discussed

126
00:04:09,040 --> 00:04:10,720
some other ideas

127
00:04:10,720 --> 00:04:13,920
that i had but for now cracking ms chap

128
00:04:13,920 --> 00:04:15,599
v2 is the same as cracking

129
00:04:15,599 --> 00:04:18,959
ntlm v1 here we have

130
00:04:18,959 --> 00:04:21,519
just an example of the output so we have

131
00:04:21,519 --> 00:04:22,639
the username

132
00:04:22,639 --> 00:04:24,880
we have the response so this is the bit

133
00:04:24,880 --> 00:04:26,320
that's calculated using the

134
00:04:26,320 --> 00:04:28,400
the two challenges from both sides we

135
00:04:28,400 --> 00:04:30,320
have that eight we have an eight octet

136
00:04:30,320 --> 00:04:31,280
challenge

137
00:04:31,280 --> 00:04:33,680
uh and then we have the cracked password

138
00:04:33,680 --> 00:04:36,080
at the end

139
00:04:36,080 --> 00:04:39,199
so uh this this is

140
00:04:39,199 --> 00:04:42,800
pretty much the state of things now and

141
00:04:42,800 --> 00:04:45,520
that's great so you can get crack hashes

142
00:04:45,520 --> 00:04:46,639
and things for users

143
00:04:46,639 --> 00:04:48,800
you can then go use those hash those

144
00:04:48,800 --> 00:04:50,080
passwords and things on

145
00:04:50,080 --> 00:04:52,720
mail and things like that uh in the

146
00:04:52,720 --> 00:04:54,160
wired world there's a second attack

147
00:04:54,160 --> 00:04:55,919
available that's not available in the

148
00:04:55,919 --> 00:04:57,199
wireless world

149
00:04:57,199 --> 00:05:01,680
so the second attack is a relay attack

150
00:05:01,680 --> 00:05:04,880
so what a relay attack is is you

151
00:05:04,880 --> 00:05:06,639
position yourself between the client and

152
00:05:06,639 --> 00:05:08,000
the server

153
00:05:08,000 --> 00:05:10,080
you trick the client into connecting to

154
00:05:10,080 --> 00:05:12,080
you much like we were doing before

155
00:05:12,080 --> 00:05:13,440
but rather than handling that

156
00:05:13,440 --> 00:05:15,680
authentication yourself so for example

157
00:05:15,680 --> 00:05:17,520
um calculating the response and all

158
00:05:17,520 --> 00:05:18,720
those things

159
00:05:18,720 --> 00:05:20,639
instead of doing that you hand it off to

160
00:05:20,639 --> 00:05:22,560
a server that you know

161
00:05:22,560 --> 00:05:23,759
that you would like to authenticate

162
00:05:23,759 --> 00:05:25,680
against

163
00:05:25,680 --> 00:05:27,840
so you can see in this diagram the

164
00:05:27,840 --> 00:05:29,680
identity comes in

165
00:05:29,680 --> 00:05:31,280
rather than handling the identity we

166
00:05:31,280 --> 00:05:32,880
pass it directly off to a server the

167
00:05:32,880 --> 00:05:34,160
server sends back a challenge rather

168
00:05:34,160 --> 00:05:35,360
than handling that we once again just

169
00:05:35,360 --> 00:05:36,560
send it to the client

170
00:05:36,560 --> 00:05:40,240
so on so forth so this allows us

171
00:05:40,240 --> 00:05:44,320
to connect to the server

172
00:05:44,320 --> 00:05:46,000
while abusing someone else's

173
00:05:46,000 --> 00:05:47,440
authentication attempt

174
00:05:47,440 --> 00:05:49,600
there are two tools that we would use to

175
00:05:49,600 --> 00:05:50,479
do this

176
00:05:50,479 --> 00:05:52,080
well that i personally use to do this

177
00:05:52,080 --> 00:05:54,080
there's probably much more

178
00:05:54,080 --> 00:05:55,680
the one is responder which is a great

179
00:05:55,680 --> 00:05:57,120
tool for tricking people

180
00:05:57,120 --> 00:05:58,479
especially on windows networks

181
00:05:58,479 --> 00:06:00,639
interconnecting to you

182
00:06:00,639 --> 00:06:02,800
and then the other is multi-relay which

183
00:06:02,800 --> 00:06:03,840
comes with responder

184
00:06:03,840 --> 00:06:06,000
or ntlm relay x which comes with the

185
00:06:06,000 --> 00:06:07,120
impact

186
00:06:07,120 --> 00:06:10,800
suite of tools which is is very nice

187
00:06:10,800 --> 00:06:12,720
so the responder bit tricks people into

188
00:06:12,720 --> 00:06:14,800
connecting to you the relay bit the ntlm

189
00:06:14,800 --> 00:06:16,240
relay bit for example

190
00:06:16,240 --> 00:06:18,560
relays to another host so you you trick

191
00:06:18,560 --> 00:06:20,160
the person connecting to the

192
00:06:20,160 --> 00:06:22,560
um the service and then rather than

193
00:06:22,560 --> 00:06:23,600
handling that yourself

194
00:06:23,600 --> 00:06:25,199
possible the other host is the gist of

195
00:06:25,199 --> 00:06:27,600
it so here's just an example of what

196
00:06:27,600 --> 00:06:29,600
that would look like responder

197
00:06:29,600 --> 00:06:31,120
calling out to people tricking them into

198
00:06:31,120 --> 00:06:33,199
connecting to you

199
00:06:33,199 --> 00:06:34,800
the person will then start connecting

200
00:06:34,800 --> 00:06:36,319
you and they're actually talking to now

201
00:06:36,319 --> 00:06:37,840
ntlm relay x

202
00:06:37,840 --> 00:06:39,840
which in essence is them talking to a

203
00:06:39,840 --> 00:06:41,520
server in the back end

204
00:06:41,520 --> 00:06:43,520
uh but at the final stage when the

205
00:06:43,520 --> 00:06:44,960
server says success you're allowed to

206
00:06:44,960 --> 00:06:46,560
authenticate

207
00:06:46,560 --> 00:06:48,560
we tell the client you're not

208
00:06:48,560 --> 00:06:50,560
authenticating you got things wrong try

209
00:06:50,560 --> 00:06:51,840
again later

210
00:06:51,840 --> 00:06:53,360
they go off and hopefully connect to

211
00:06:53,360 --> 00:06:54,720
whatever they wanted to connect to in

212
00:06:54,720 --> 00:06:56,240
the first place without causing too much

213
00:06:56,240 --> 00:06:58,400
disruption to the user but meanwhile

214
00:06:58,400 --> 00:07:00,080
we've piggybacked off their

215
00:07:00,080 --> 00:07:01,680
authentication attempt and are now

216
00:07:01,680 --> 00:07:03,680
authenticated against the server to do

217
00:07:03,680 --> 00:07:05,120
whatever they want to do for example

218
00:07:05,120 --> 00:07:06,319
access file share

219
00:07:06,319 --> 00:07:07,919
or do some administrative action or

220
00:07:07,919 --> 00:07:09,680
something like that

221
00:07:09,680 --> 00:07:12,400
so in the wi-fi world we have that first

222
00:07:12,400 --> 00:07:13,599
portion we can trick people into

223
00:07:13,599 --> 00:07:15,120
connecting to us

224
00:07:15,120 --> 00:07:16,720
this is basically what a rogue access

225
00:07:16,720 --> 00:07:18,639
point is uh just standing something up

226
00:07:18,639 --> 00:07:20,240
with the same name

227
00:07:20,240 --> 00:07:23,039
and but we don't have the ability to

228
00:07:23,039 --> 00:07:25,199
sort of handle that authentication

229
00:07:25,199 --> 00:07:26,479
or at least not handle that

230
00:07:26,479 --> 00:07:27,680
authentication and pass it off to

231
00:07:27,680 --> 00:07:29,280
someone else to handle for us

232
00:07:29,280 --> 00:07:32,800
so that's what i created so what do we

233
00:07:32,800 --> 00:07:34,080
need to do this well

234
00:07:34,080 --> 00:07:35,680
we need to be able to handle this whole

235
00:07:35,680 --> 00:07:37,120
peep

236
00:07:37,120 --> 00:07:40,160
exchange and that means handling not

237
00:07:40,160 --> 00:07:41,120
only that

238
00:07:41,120 --> 00:07:43,360
that relay in the middle but also the

239
00:07:43,360 --> 00:07:44,160
two

240
00:07:44,160 --> 00:07:45,360
other bits which is the four-way

241
00:07:45,360 --> 00:07:47,840
handshake as well as the

242
00:07:47,840 --> 00:07:52,960
the outer tls tunnel so

243
00:07:53,039 --> 00:07:55,039
you can see here i've i've kind of shown

244
00:07:55,039 --> 00:07:56,720
that we've got two

245
00:07:56,720 --> 00:07:58,479
two separate tls tunnels being set up

246
00:07:58,479 --> 00:07:59,840
where as we are

247
00:07:59,840 --> 00:08:02,639
only relaying that inner ms chap thing

248
00:08:02,639 --> 00:08:04,479
and then we are setting up a different

249
00:08:04,479 --> 00:08:07,520
four-way handshake at the end this is

250
00:08:07,520 --> 00:08:09,520
done using two components

251
00:08:09,520 --> 00:08:11,840
so we'll see here that i have an evil

252
00:08:11,840 --> 00:08:12,800
server which

253
00:08:12,800 --> 00:08:14,319
in this instance i chose to use hosts

254
00:08:14,319 --> 00:08:16,000
apd mana which is

255
00:08:16,000 --> 00:08:17,919
got all sorts of other wi-fi attacks

256
00:08:17,919 --> 00:08:19,520
built into it as well

257
00:08:19,520 --> 00:08:21,759
and that makes up this portion which is

258
00:08:21,759 --> 00:08:23,199
the client

259
00:08:23,199 --> 00:08:25,199
being tricked it's connecting to us and

260
00:08:25,199 --> 00:08:26,879
we're handling that tls tunnel and that

261
00:08:26,879 --> 00:08:28,080
four-way handshake

262
00:08:28,080 --> 00:08:30,400
but rather than handling that challenge

263
00:08:30,400 --> 00:08:32,320
response we pass it down to the

264
00:08:32,320 --> 00:08:35,440
second portion which is the sick event

265
00:08:35,440 --> 00:08:37,519
which is a modified version of wpa

266
00:08:37,519 --> 00:08:38,719
supplicant

267
00:08:38,719 --> 00:08:40,799
and that is handling its own separate

268
00:08:40,799 --> 00:08:42,958
tls tunnel and four-way handshake

269
00:08:42,958 --> 00:08:45,120
so these two things work together to

270
00:08:45,120 --> 00:08:46,560
sort of ferry across that challenge

271
00:08:46,560 --> 00:08:47,519
response

272
00:08:47,519 --> 00:08:49,519
and then at the end hopefully we get a

273
00:08:49,519 --> 00:08:50,800
success from the server and we can

274
00:08:50,800 --> 00:08:52,560
connect

275
00:08:52,560 --> 00:08:54,480
so building this thing as you saw i

276
00:08:54,480 --> 00:08:56,000
chose to use host apd

277
00:08:56,000 --> 00:08:57,680
mana which is a modified version of host

278
00:08:57,680 --> 00:09:00,320
apd as well as wpa supplicant

279
00:09:00,320 --> 00:09:03,360
which is also very very popular and it

280
00:09:03,360 --> 00:09:04,080
is the

281
00:09:04,080 --> 00:09:06,480
supplicant that is used or at least a

282
00:09:06,480 --> 00:09:08,000
modified version of it is probably

283
00:09:08,000 --> 00:09:11,680
used in android and

284
00:09:11,680 --> 00:09:13,839
as i say very popular and also makes a

285
00:09:13,839 --> 00:09:16,000
really good thing to edit given how well

286
00:09:16,000 --> 00:09:17,200
supported is across

287
00:09:17,200 --> 00:09:20,720
everything so

288
00:09:20,720 --> 00:09:22,959
we now have the two different separate

289
00:09:22,959 --> 00:09:24,560
programs they need to be able to talk to

290
00:09:24,560 --> 00:09:25,519
each other

291
00:09:25,519 --> 00:09:28,720
i had a very complex system involving a

292
00:09:28,720 --> 00:09:30,000
state file and

293
00:09:30,000 --> 00:09:32,959
files to go back and forth simplifies

294
00:09:32,959 --> 00:09:33,600
that for you

295
00:09:33,600 --> 00:09:37,279
into sycophant writes to file

296
00:09:37,279 --> 00:09:40,320
mana picks up from file there's a state

297
00:09:40,320 --> 00:09:41,680
file which

298
00:09:41,680 --> 00:09:44,720
keeps track of where in the interaction

299
00:09:44,720 --> 00:09:48,080
each of the ones is so if

300
00:09:48,080 --> 00:09:50,880
mana is in the challenge phase it knows

301
00:09:50,880 --> 00:09:51,839
that

302
00:09:51,839 --> 00:09:54,959
it needs to inform a second fan that

303
00:09:54,959 --> 00:09:56,480
needs a challenge once it has that it

304
00:09:56,480 --> 00:09:58,240
can say okay sycophant here's a response

305
00:09:58,240 --> 00:10:00,240
and it just uses files to do that

306
00:10:00,240 --> 00:10:02,959
the primary reason for files was that i

307
00:10:02,959 --> 00:10:04,320
didn't want to learn how to do

308
00:10:04,320 --> 00:10:06,640
c uh inter process communications and

309
00:10:06,640 --> 00:10:07,600
things like that

310
00:10:07,600 --> 00:10:10,880
uh the the excuse i gave as to why

311
00:10:10,880 --> 00:10:12,880
i'm using files is that it would allow

312
00:10:12,880 --> 00:10:16,720
me to easily do it over long distances

313
00:10:16,720 --> 00:10:19,200
so for example you can synchronize a

314
00:10:19,200 --> 00:10:21,519
file using all sorts of different tools

315
00:10:21,519 --> 00:10:24,079
uh one on the server one in the client

316
00:10:24,079 --> 00:10:24,880
and you can

317
00:10:24,880 --> 00:10:28,079
do this you can separate these things

318
00:10:28,079 --> 00:10:29,760
a lot better using the internet for

319
00:10:29,760 --> 00:10:32,079
example however as you'll see later i

320
00:10:32,079 --> 00:10:33,360
found a way to do that that doesn't

321
00:10:33,360 --> 00:10:35,920
involve the files so it kind of

322
00:10:35,920 --> 00:10:39,120
invalidates that point so here we have a

323
00:10:39,120 --> 00:10:39,760
demo

324
00:10:39,760 --> 00:10:42,079
so put all that together and this is

325
00:10:42,079 --> 00:10:44,640
what we get

326
00:10:45,120 --> 00:10:48,399
so you can see here i have an interface

327
00:10:48,399 --> 00:10:50,240
called wlan1 and it doesn't have an ip

328
00:10:50,240 --> 00:10:51,760
address

329
00:10:51,760 --> 00:10:55,600
i then use aerodump to

330
00:10:55,600 --> 00:10:57,440
show what's around us there's an ssid

331
00:10:57,440 --> 00:10:59,040
called black cell and it's of type mash

332
00:10:59,040 --> 00:11:00,720
which means it's an eep server

333
00:11:00,720 --> 00:11:01,680
i'm going to tell you now it's a peep

334
00:11:01,680 --> 00:11:03,839
server because i set it up

335
00:11:03,839 --> 00:11:06,640
there is a client as well so i'm going

336
00:11:06,640 --> 00:11:08,640
to now cut the

337
00:11:08,640 --> 00:11:10,399
supplicant config file that we're going

338
00:11:10,399 --> 00:11:11,839
to be using you'll see there all we

339
00:11:11,839 --> 00:11:13,279
needed to do is put in the ssid and

340
00:11:13,279 --> 00:11:14,399
you'll also note

341
00:11:14,399 --> 00:11:16,160
that the identity and the passwords are

342
00:11:16,160 --> 00:11:18,000
blank

343
00:11:18,000 --> 00:11:22,240
cool on the and then we just run it

344
00:11:22,240 --> 00:11:25,360
so sycophant we give it the interface

345
00:11:25,360 --> 00:11:26,800
this is the same interface

346
00:11:26,800 --> 00:11:28,079
i showed you earlier which doesn't have

347
00:11:28,079 --> 00:11:30,000
an ip address

348
00:11:30,000 --> 00:11:31,360
and then we give it that config file

349
00:11:31,360 --> 00:11:34,640
that i showed as well

350
00:11:38,320 --> 00:11:39,920
cool now it's waiting for mana to give

351
00:11:39,920 --> 00:11:42,399
it the identity of someone so it can

352
00:11:42,399 --> 00:11:43,839
start connecting as well

353
00:11:43,839 --> 00:11:46,399
but on them on the client on the server

354
00:11:46,399 --> 00:11:48,000
side sorry

355
00:11:48,000 --> 00:11:49,360
we have mana we're using it on a

356
00:11:49,360 --> 00:11:51,360
different interface we set the ssid to

357
00:11:51,360 --> 00:11:52,240
black cell

358
00:11:52,240 --> 00:11:53,920
and we tell it that we don't want you to

359
00:11:53,920 --> 00:11:55,120
handle the authentication instead you

360
00:11:55,120 --> 00:11:56,480
want we want you to write it down to

361
00:11:56,480 --> 00:11:57,040
files

362
00:11:57,040 --> 00:12:00,639
and communicate with this other program

363
00:12:00,639 --> 00:12:02,639
and then we just run it using that

364
00:12:02,639 --> 00:12:05,279
config file

365
00:12:06,160 --> 00:12:09,360
so ep enabled right so now we have the

366
00:12:09,360 --> 00:12:10,000
evil client

367
00:12:10,000 --> 00:12:12,160
and the evil server they're both waiting

368
00:12:12,160 --> 00:12:13,600
for someone to connect

369
00:12:13,600 --> 00:12:15,440
i'm just going to force that client to

370
00:12:15,440 --> 00:12:16,959
de-authenticate from the

371
00:12:16,959 --> 00:12:18,399
network it is on using a

372
00:12:18,399 --> 00:12:20,959
de-authenticated frame

373
00:12:20,959 --> 00:12:23,040
and just setting it to black cell so

374
00:12:23,040 --> 00:12:25,360
this sends the authentication

375
00:12:25,360 --> 00:12:28,240
on the same interface we ran uh error

376
00:12:28,240 --> 00:12:29,040
dump

377
00:12:29,040 --> 00:12:30,880
and then you can see that hopefully the

378
00:12:30,880 --> 00:12:32,480
guy disconnects cool

379
00:12:32,480 --> 00:12:35,200
and you can see phase one stanley jobson

380
00:12:35,200 --> 00:12:36,639
phase two

381
00:12:36,639 --> 00:12:38,079
so obviously they've now accepted our

382
00:12:38,079 --> 00:12:40,000
certificate you can see in the middle

383
00:12:40,000 --> 00:12:42,560
there there's a hash that came through

384
00:12:42,560 --> 00:12:44,560
i've highlighted there and then another

385
00:12:44,560 --> 00:12:45,839
thing to note is that the

386
00:12:45,839 --> 00:12:48,639
at the end the client didn't fully like

387
00:12:48,639 --> 00:12:49,839
they didn't finish

388
00:12:49,839 --> 00:12:51,200
connecting to us so they didn't perform

389
00:12:51,200 --> 00:12:53,680
the four-way handshake on the sycophant

390
00:12:53,680 --> 00:12:54,079
side

391
00:12:54,079 --> 00:12:55,680
you can see we got the identity from

392
00:12:55,680 --> 00:12:58,399
mana and we began this whole process

393
00:12:58,399 --> 00:13:00,000
we got a challenge we sent it through

394
00:13:00,000 --> 00:13:01,279
and then we got the response from the

395
00:13:01,279 --> 00:13:02,480
client

396
00:13:02,480 --> 00:13:04,720
finally getting an eep success from the

397
00:13:04,720 --> 00:13:06,399
the server itself and then doing the

398
00:13:06,399 --> 00:13:08,240
four-way handshake so now i'll show you

399
00:13:08,240 --> 00:13:10,720
that we have gotten ourselves a ip

400
00:13:10,720 --> 00:13:14,720
address of 10-0-40-77

401
00:13:14,720 --> 00:13:18,079
and then i have set up an web server on

402
00:13:18,079 --> 00:13:22,079
the gateway uh to just show that we have

403
00:13:22,079 --> 00:13:24,720
internet access well internet internal

404
00:13:24,720 --> 00:13:26,240
network access

405
00:13:26,240 --> 00:13:29,360
cool success we can connect to

406
00:13:29,360 --> 00:13:30,720
arbitrary wi-fi networks and we don't

407
00:13:30,720 --> 00:13:33,200
have to crack the the handshake well

408
00:13:33,200 --> 00:13:35,360
the past the hash which is which is very

409
00:13:35,360 --> 00:13:36,560
nice uh

410
00:13:36,560 --> 00:13:38,560
something worth mentioning that the hash

411
00:13:38,560 --> 00:13:40,320
can be cracked in a reasonable time it's

412
00:13:40,320 --> 00:13:41,199
just a bunch of

413
00:13:41,199 --> 00:13:43,760
it's three dezzes and you can go through

414
00:13:43,760 --> 00:13:45,360
the entire key space but it's still

415
00:13:45,360 --> 00:13:47,760
a lot of processing and a bit of a pain

416
00:13:47,760 --> 00:13:49,199
so you won't be doing it on a pie or

417
00:13:49,199 --> 00:13:51,360
anything like that

418
00:13:51,360 --> 00:13:54,320
so why does this work once again we have

419
00:13:54,320 --> 00:13:56,880
two separate

420
00:13:56,880 --> 00:13:58,480
tls tunnels and we have two separate

421
00:13:58,480 --> 00:14:00,399
four-way handshakes

422
00:14:00,399 --> 00:14:03,519
whereas we have one uh challenge

423
00:14:03,519 --> 00:14:04,480
response

424
00:14:04,480 --> 00:14:07,519
so the reason this works is the four-way

425
00:14:07,519 --> 00:14:08,880
handshake is the bit that actually

426
00:14:08,880 --> 00:14:10,560
connects you to the network in the

427
00:14:10,560 --> 00:14:13,600
at the end of all this right and the

428
00:14:13,600 --> 00:14:15,920
values that go into that four-way

429
00:14:15,920 --> 00:14:17,040
handshake

430
00:14:17,040 --> 00:14:20,240
are calculated beforehand through the

431
00:14:20,240 --> 00:14:23,199
the other interactions we've had now so

432
00:14:23,199 --> 00:14:24,720
unfortunately

433
00:14:24,720 --> 00:14:26,480
the four-way handshake by default is

434
00:14:26,480 --> 00:14:28,560
only relying on the tls portion which we

435
00:14:28,560 --> 00:14:30,800
did ourselves meaning we have

436
00:14:30,800 --> 00:14:32,079
the information to do the four-way

437
00:14:32,079 --> 00:14:34,880
handshake we just need a way to trick

438
00:14:34,880 --> 00:14:35,839
the server into

439
00:14:35,839 --> 00:14:38,240
accepting us using that four-way

440
00:14:38,240 --> 00:14:39,839
handshake

441
00:14:39,839 --> 00:14:42,160
so the way to fix this is to use

442
00:14:42,160 --> 00:14:43,440
something called cryptobinding which

443
00:14:43,440 --> 00:14:44,240
takes that

444
00:14:44,240 --> 00:14:46,720
outer authentication the tls and the

445
00:14:46,720 --> 00:14:48,720
inner authentication which is the ms

446
00:14:48,720 --> 00:14:49,040
chap

447
00:14:49,040 --> 00:14:50,480
combines them together and uses them in

448
00:14:50,480 --> 00:14:53,279
the former handshake making it so that

449
00:14:53,279 --> 00:14:56,480
the same person has to do the both the

450
00:14:56,480 --> 00:14:57,120
tls

451
00:14:57,120 --> 00:14:59,760
and the ms chat but as in that current

452
00:14:59,760 --> 00:15:00,959
situation

453
00:15:00,959 --> 00:15:03,199
uh we only need to perform the tls but

454
00:15:03,199 --> 00:15:04,560
and we can get any other

455
00:15:04,560 --> 00:15:06,800
third party to do the other bit for us

456
00:15:06,800 --> 00:15:07,680
and

457
00:15:07,680 --> 00:15:11,120
we don't need that to finally connect

458
00:15:11,120 --> 00:15:14,000
cool so the problems that i had while

459
00:15:14,000 --> 00:15:14,959
making this thing

460
00:15:14,959 --> 00:15:17,600
so there's a lot of time that i could

461
00:15:17,600 --> 00:15:19,279
have saved by just reading the

462
00:15:19,279 --> 00:15:21,279
the rfc i would recommend that everyone

463
00:15:21,279 --> 00:15:22,800
reads the rfc

464
00:15:22,800 --> 00:15:25,600
um i'll go over some of those just now

465
00:15:25,600 --> 00:15:27,199
and then the other problem was

466
00:15:27,199 --> 00:15:30,000
uh using only one platform so i was

467
00:15:30,000 --> 00:15:31,279
testing against host apd

468
00:15:31,279 --> 00:15:33,120
all the time and then when i finally

469
00:15:33,120 --> 00:15:34,399
tested against a

470
00:15:34,399 --> 00:15:37,920
windows server it kind of

471
00:15:37,920 --> 00:15:40,800
threw a hissy but that was because i was

472
00:15:40,800 --> 00:15:42,639
accidentally overwriting one or two

473
00:15:42,639 --> 00:15:45,839
bytes too many and then

474
00:15:45,839 --> 00:15:47,600
what i've mentioned already is just

475
00:15:47,600 --> 00:15:49,279
doing things in c is always a

476
00:15:49,279 --> 00:15:51,839
it's always a mission and that's the

477
00:15:51,839 --> 00:15:53,199
reason why i did things in the file

478
00:15:53,199 --> 00:15:55,519
system essentially

479
00:15:55,519 --> 00:15:58,720
cool so first problem with the rfc well

480
00:15:58,720 --> 00:16:00,160
the one that i had from not reading the

481
00:16:00,160 --> 00:16:03,440
rfc was the literature review so

482
00:16:03,440 --> 00:16:05,040
when i first had this idea i thought it

483
00:16:05,040 --> 00:16:06,639
was a very obvious idea

484
00:16:06,639 --> 00:16:09,120
and i thought it must be done i asked

485
00:16:09,120 --> 00:16:10,320
some of the people

486
00:16:10,320 --> 00:16:13,519
and no one knew anything about it and so

487
00:16:13,519 --> 00:16:16,240
i went looking i found like some slides

488
00:16:16,240 --> 00:16:17,600
it wasn't very

489
00:16:17,600 --> 00:16:18,880
it was a bit vague it said it was

490
00:16:18,880 --> 00:16:20,560
possible there was definitely no tool to

491
00:16:20,560 --> 00:16:21,930
do it

492
00:16:21,930 --> 00:16:23,600
[Music]

493
00:16:23,600 --> 00:16:26,560
and so searching around didn't find much

494
00:16:26,560 --> 00:16:27,680
essentially

495
00:16:27,680 --> 00:16:30,240
after i'd finished everything made it it

496
00:16:30,240 --> 00:16:31,759
all works perfectly i go look at the

497
00:16:31,759 --> 00:16:33,120
bottom of the rfc

498
00:16:33,120 --> 00:16:35,040
it's pretty much written in plain

499
00:16:35,040 --> 00:16:36,720
english you can see in 7.4

500
00:16:36,720 --> 00:16:38,240
section about man in the middle attacks

501
00:16:38,240 --> 00:16:39,920
explicitly says that where eep is

502
00:16:39,920 --> 00:16:42,000
tunneled with another protocol

503
00:16:42,000 --> 00:16:44,399
uh that emits pure authentication

504
00:16:44,399 --> 00:16:45,759
there's a potential

505
00:16:45,759 --> 00:16:47,519
vulnerability to man in the middle you

506
00:16:47,519 --> 00:16:49,360
can see for details see binding and

507
00:16:49,360 --> 00:16:51,120
mitum

508
00:16:51,120 --> 00:16:52,639
i've already mentioned binding as a

509
00:16:52,639 --> 00:16:54,320
defense against this

510
00:16:54,320 --> 00:16:58,079
and mitum as

511
00:16:58,079 --> 00:17:00,800
you'll see now with attack number two

512
00:17:00,800 --> 00:17:01,440
but yeah

513
00:17:01,440 --> 00:17:04,160
so beforehand before i made everything

514
00:17:04,160 --> 00:17:05,199
put in all sorts of

515
00:17:05,199 --> 00:17:06,400
work things i thought i was

516
00:17:06,400 --> 00:17:08,400
revolutionary afterwards turns out it

517
00:17:08,400 --> 00:17:11,839
was just there in the rfc all along

518
00:17:12,079 --> 00:17:15,439
so the second tack that this enables

519
00:17:15,439 --> 00:17:18,319
is the ability to attack clients so

520
00:17:18,319 --> 00:17:19,280
previously

521
00:17:19,280 --> 00:17:20,480
what we would do is something called

522
00:17:20,480 --> 00:17:22,640
crack and add so essentially what that

523
00:17:22,640 --> 00:17:23,039
is

524
00:17:23,039 --> 00:17:24,319
trick someone is connecting to you you

525
00:17:24,319 --> 00:17:26,480
get their hash you crack them

526
00:17:26,480 --> 00:17:28,400
you crack the hash and then you put that

527
00:17:28,400 --> 00:17:29,520
in your eep file

528
00:17:29,520 --> 00:17:32,080
your ep users found and then when the

529
00:17:32,080 --> 00:17:33,200
client comes around

530
00:17:33,200 --> 00:17:36,000
a second time hopefully you get such an

531
00:17:36,000 --> 00:17:38,640
opportunity

532
00:17:38,799 --> 00:17:42,480
they will connect you will be able to

533
00:17:42,480 --> 00:17:45,679
validate the that final response given

534
00:17:45,679 --> 00:17:47,440
that you now know the password

535
00:17:47,440 --> 00:17:50,960
and they will connect to you with ios

536
00:17:50,960 --> 00:17:53,039
devices which is now fixed by them

537
00:17:53,039 --> 00:17:56,880
um you would you could do the same thing

538
00:17:56,880 --> 00:17:59,919
and ios was not validating that final

539
00:17:59,919 --> 00:18:01,039
part of the

540
00:18:01,039 --> 00:18:03,760
challenge response so ios mac whatever

541
00:18:03,760 --> 00:18:05,120
the

542
00:18:05,120 --> 00:18:10,000
this lets you

543
00:18:10,080 --> 00:18:12,480
return only just an eep success and then

544
00:18:12,480 --> 00:18:13,679
you can send along an

545
00:18:13,679 --> 00:18:15,520
invalid response and the ios device

546
00:18:15,520 --> 00:18:16,960
would not check it and they would just

547
00:18:16,960 --> 00:18:18,720
end up connecting

548
00:18:18,720 --> 00:18:21,280
so that allows you it allows ios to get

549
00:18:21,280 --> 00:18:23,120
more internet but

550
00:18:23,120 --> 00:18:24,160
you don't know where you're getting that

551
00:18:24,160 --> 00:18:26,559
internet from essentially

552
00:18:26,559 --> 00:18:28,240
so just going through the current attack

553
00:18:28,240 --> 00:18:29,679
not against the ios

554
00:18:29,679 --> 00:18:31,600
you would stand up a rogue access point

555
00:18:31,600 --> 00:18:33,360
you trick victims into connecting once

556
00:18:33,360 --> 00:18:34,320
again they'd have to accept your

557
00:18:34,320 --> 00:18:35,520
certificate

558
00:18:35,520 --> 00:18:37,120
uh you would perform the challenge

559
00:18:37,120 --> 00:18:39,200
response

560
00:18:39,200 --> 00:18:42,160
capture that hash you would then go

561
00:18:42,160 --> 00:18:43,760
crack that hash

562
00:18:43,760 --> 00:18:44,880
and then try and get the client to

563
00:18:44,880 --> 00:18:47,200
connect again so it's not very real time

564
00:18:47,200 --> 00:18:48,720
unless they have a really really bad

565
00:18:48,720 --> 00:18:50,880
password

566
00:18:50,880 --> 00:18:53,919
which you can always hope for as well

567
00:18:53,919 --> 00:18:57,039
so here's an example of what that sort

568
00:18:57,039 --> 00:18:58,559
of interaction would look like

569
00:18:58,559 --> 00:19:00,320
the client would send along this

570
00:19:00,320 --> 00:19:02,559
identity server sends a challenge

571
00:19:02,559 --> 00:19:04,559
client calculates own challenge

572
00:19:04,559 --> 00:19:05,760
calculates response

573
00:19:05,760 --> 00:19:08,880
sends it along server sends a bogus

574
00:19:08,880 --> 00:19:10,720
response as well as a success saying yes

575
00:19:10,720 --> 00:19:11,760
you can connect to me you've

576
00:19:11,760 --> 00:19:13,679
authenticated

577
00:19:13,679 --> 00:19:15,440
please trust this response but the

578
00:19:15,440 --> 00:19:17,200
client of course in general won't trust

579
00:19:17,200 --> 00:19:18,480
that response

580
00:19:18,480 --> 00:19:21,280
it would try and verify it it would fail

581
00:19:21,280 --> 00:19:22,840
and then the client wouldn't connect

582
00:19:22,840 --> 00:19:25,919
so you'd kind of be stuck unless you had

583
00:19:25,919 --> 00:19:27,520
the client's password which is where the

584
00:19:27,520 --> 00:19:29,039
kraken ad comes in

585
00:19:29,039 --> 00:19:32,160
so with relaying you can prove that you

586
00:19:32,160 --> 00:19:33,600
know the password or at least you can

587
00:19:33,600 --> 00:19:35,360
prove that somebody knows the password

588
00:19:35,360 --> 00:19:38,080
not necessarily you so once again you

589
00:19:38,080 --> 00:19:39,360
set up your tls tunnel

590
00:19:39,360 --> 00:19:40,799
trick the person into connecting to you

591
00:19:40,799 --> 00:19:42,400
they initiate the tls

592
00:19:42,400 --> 00:19:44,320
you start authenticating to a random

593
00:19:44,320 --> 00:19:45,840
server somewhere that doesn't know the

594
00:19:45,840 --> 00:19:47,760
password

595
00:19:47,760 --> 00:19:50,960
the challenge response ensues the server

596
00:19:50,960 --> 00:19:52,480
will send back a correct

597
00:19:52,480 --> 00:19:54,080
response because it knows the password

598
00:19:54,080 --> 00:19:56,240
you can then pass that to the user

599
00:19:56,240 --> 00:19:59,440
and then once again because the four-way

600
00:19:59,440 --> 00:20:01,280
handshake is calculated using only stuff

601
00:20:01,280 --> 00:20:02,400
from the

602
00:20:02,400 --> 00:20:06,799
tls tunnel you can

603
00:20:06,799 --> 00:20:08,880
then uh both sides have all the

604
00:20:08,880 --> 00:20:10,320
information needed to set up the

605
00:20:10,320 --> 00:20:13,200
the forward handshake and connect

606
00:20:13,200 --> 00:20:14,320
finally

607
00:20:14,320 --> 00:20:17,919
so that means uh the user can connect as

608
00:20:17,919 --> 00:20:18,559
well as

609
00:20:18,559 --> 00:20:20,240
you just connecting to the access point

610
00:20:20,240 --> 00:20:23,200
as previously discussed

611
00:20:23,200 --> 00:20:26,400
so demo time let's go again

612
00:20:26,400 --> 00:20:30,000
okay cool so once again i'm showing you

613
00:20:30,000 --> 00:20:30,400
that

614
00:20:30,400 --> 00:20:33,520
wlan1 doesn't have any ip address

615
00:20:33,520 --> 00:20:35,919
and then i'm going to run aerodump and

616
00:20:35,919 --> 00:20:36,559
see that

617
00:20:36,559 --> 00:20:39,039
black cell is still there type managed

618
00:20:39,039 --> 00:20:40,400
which is eep

619
00:20:40,400 --> 00:20:42,240
and there's a client connected once

620
00:20:42,240 --> 00:20:43,679
again we set up a

621
00:20:43,679 --> 00:20:46,000
sycophant the same way so no password or

622
00:20:46,000 --> 00:20:47,039
anything

623
00:20:47,039 --> 00:20:50,240
setting the ssid typically you'd want to

624
00:20:50,240 --> 00:20:51,200
set the ssid

625
00:20:51,200 --> 00:20:52,960
to something that the client is

626
00:20:52,960 --> 00:20:55,840
connected to already

627
00:20:55,840 --> 00:21:00,000
and then we run mana so now i'm using a

628
00:21:00,000 --> 00:21:02,480
tool called berate app

629
00:21:02,480 --> 00:21:04,640
i've just given it some flags so berate

630
00:21:04,640 --> 00:21:06,080
ap is a tool i wrote to

631
00:21:06,080 --> 00:21:07,919
sort of dynamically generate mana

632
00:21:07,919 --> 00:21:09,280
configs

633
00:21:09,280 --> 00:21:11,760
because i got tired of writing them so

634
00:21:11,760 --> 00:21:13,360
the things to point out here is that

635
00:21:13,360 --> 00:21:13,919
we're

636
00:21:13,919 --> 00:21:15,679
once again passing it the sycophant flag

637
00:21:15,679 --> 00:21:17,200
saying that we want

638
00:21:17,200 --> 00:21:19,360
it to relay the authentication rather

639
00:21:19,360 --> 00:21:21,200
than to calculate things itself

640
00:21:21,200 --> 00:21:23,120
we want it to return an eep success so

641
00:21:23,120 --> 00:21:24,640
it's going to regardless of what it

642
00:21:24,640 --> 00:21:26,000
thinks is going to send it back in each

643
00:21:26,000 --> 00:21:26,960
success

644
00:21:26,960 --> 00:21:28,840
and then in combination with the

645
00:21:28,840 --> 00:21:30,799
supplicant the sticker fan flag it's

646
00:21:30,799 --> 00:21:32,320
going to send a

647
00:21:32,320 --> 00:21:35,039
correct one once again we give it the

648
00:21:35,039 --> 00:21:35,919
search we say

649
00:21:35,919 --> 00:21:38,559
run it on the second interface and run

650
00:21:38,559 --> 00:21:39,840
it on the

651
00:21:39,840 --> 00:21:42,159
first interface and call it black cell

652
00:21:42,159 --> 00:21:43,440
okay once again we're gonna have to send

653
00:21:43,440 --> 00:21:43,679
a

654
00:21:43,679 --> 00:21:46,960
deal authentication frame

655
00:21:47,039 --> 00:21:50,480
to get the the user to disconnect

656
00:21:50,480 --> 00:21:51,840
in this instance the user is a bit

657
00:21:51,840 --> 00:21:58,960
stubborn so it's time for my water break

658
00:21:58,960 --> 00:22:02,320
and then now we wait

659
00:22:02,960 --> 00:22:04,240
once again we're just waiting for the

660
00:22:04,240 --> 00:22:06,960
user to connect to us so that we can

661
00:22:06,960 --> 00:22:08,640
perform the tls they accept our

662
00:22:08,640 --> 00:22:10,000
certificate

663
00:22:10,000 --> 00:22:13,840
send us all the things we need

664
00:22:16,159 --> 00:22:19,120
cool send another the authentication and

665
00:22:19,120 --> 00:22:20,720
now the user comes through

666
00:22:20,720 --> 00:22:22,799
so you can see the identity came through

667
00:22:22,799 --> 00:22:24,880
and then you see the same hash

668
00:22:24,880 --> 00:22:27,039
hashes as you saw before but at the end

669
00:22:27,039 --> 00:22:28,480
is different you'll see that an

670
00:22:28,480 --> 00:22:29,840
accounting session started

671
00:22:29,840 --> 00:22:31,360
and there's a authentication the

672
00:22:31,360 --> 00:22:32,720
four-way handshake was performed and the

673
00:22:32,720 --> 00:22:34,640
user actually connected to us

674
00:22:34,640 --> 00:22:36,640
on the supplicant side the sycophant

675
00:22:36,640 --> 00:22:38,960
side it's the same as before we

676
00:22:38,960 --> 00:22:40,400
also successfully connecting to the

677
00:22:40,400 --> 00:22:42,559
access point

678
00:22:42,559 --> 00:22:45,360
cool so success validation that's the

679
00:22:45,360 --> 00:22:46,640
validation that was sent back to the

680
00:22:46,640 --> 00:22:49,280
correctly computed one

681
00:22:49,280 --> 00:22:51,280
once again i run t-shock just on the the

682
00:22:51,280 --> 00:22:53,440
interface for the access point

683
00:22:53,440 --> 00:22:55,120
and you can see that there's an apple

684
00:22:55,120 --> 00:22:58,000
device sending app requests

685
00:22:58,000 --> 00:23:00,159
so showing that they've properly

686
00:23:00,159 --> 00:23:02,880
connected to us

687
00:23:03,520 --> 00:23:06,640
and yep cool

688
00:23:06,640 --> 00:23:09,840
right so success again we can randomly

689
00:23:09,840 --> 00:23:12,080
trick people into connecting to us

690
00:23:12,080 --> 00:23:13,679
and this allows us to do all sorts of

691
00:23:13,679 --> 00:23:15,520
crazy things so

692
00:23:15,520 --> 00:23:16,880
the nice thing about this is we can

693
00:23:16,880 --> 00:23:18,640
trick them into connecting to us while

694
00:23:18,640 --> 00:23:20,559
using their authentication to connect to

695
00:23:20,559 --> 00:23:22,000
the legitimate server

696
00:23:22,000 --> 00:23:24,480
and that's what berate was providing me

697
00:23:24,480 --> 00:23:26,159
in that instance was it was setting up

698
00:23:26,159 --> 00:23:28,960
all the networking between those two

699
00:23:28,960 --> 00:23:30,559
interfaces for me

700
00:23:30,559 --> 00:23:33,679
so that a user the person that we've now

701
00:23:33,679 --> 00:23:35,200
tricked into connecting to us can still

702
00:23:35,200 --> 00:23:36,480
reach things

703
00:23:36,480 --> 00:23:40,640
on the the legitimate access point

704
00:23:40,640 --> 00:23:43,520
so very nice

705
00:23:43,919 --> 00:23:47,360
so i discussed distances before

706
00:23:47,360 --> 00:23:50,640
the reason i put things on a file system

707
00:23:50,640 --> 00:23:53,760
but turns out uh host apd and by

708
00:23:53,760 --> 00:23:55,520
extension host apd mana

709
00:23:55,520 --> 00:23:57,600
has its own built-in radius server now

710
00:23:57,600 --> 00:24:00,080
radius allows you to eap things over

711
00:24:00,080 --> 00:24:03,039
the network so that the thing that

712
00:24:03,039 --> 00:24:04,000
you're authenticating to

713
00:24:04,000 --> 00:24:06,159
doesn't necessarily have to do all the

714
00:24:06,159 --> 00:24:07,679
authenticating

715
00:24:07,679 --> 00:24:11,039
so it sends along it talks radius to

716
00:24:11,039 --> 00:24:11,840
another server

717
00:24:11,840 --> 00:24:14,400
so to do this over a long distance you

718
00:24:14,400 --> 00:24:15,120
set mana

719
00:24:15,120 --> 00:24:18,000
or host apd mana as a radius server

720
00:24:18,000 --> 00:24:18,720
along with

721
00:24:18,720 --> 00:24:21,919
a sycophant so they need to still talk

722
00:24:21,919 --> 00:24:22,880
together

723
00:24:22,880 --> 00:24:25,520
using the file system but you can set up

724
00:24:25,520 --> 00:24:27,279
an access point to use your radius

725
00:24:27,279 --> 00:24:28,320
server

726
00:24:28,320 --> 00:24:31,120
and point it at the radius server

727
00:24:31,120 --> 00:24:32,799
obviously

728
00:24:32,799 --> 00:24:34,080
so provided these two things have a

729
00:24:34,080 --> 00:24:35,360
network connection between them you will

730
00:24:35,360 --> 00:24:36,080
be able to

731
00:24:36,080 --> 00:24:39,200
to do this attack over a long distance

732
00:24:39,200 --> 00:24:42,080
uh the idea behind this was that you can

733
00:24:42,080 --> 00:24:43,840
while someone's sleeping for example you

734
00:24:43,840 --> 00:24:45,200
can go through a raspberry pi in their

735
00:24:45,200 --> 00:24:46,320
garden

736
00:24:46,320 --> 00:24:49,279
and hopefully if they have a phone or

737
00:24:49,279 --> 00:24:50,159
their laptop

738
00:24:50,159 --> 00:24:51,919
it'll automatically try and connect your

739
00:24:51,919 --> 00:24:54,080
thing your device and

740
00:24:54,080 --> 00:24:56,240
you can relay that while you are on site

741
00:24:56,240 --> 00:24:58,559
at a

742
00:24:58,559 --> 00:25:00,240
near the corporate access point and so

743
00:25:00,240 --> 00:25:01,760
then you can connect to it

744
00:25:01,760 --> 00:25:04,559
the other thing that this lets you do is

745
00:25:04,559 --> 00:25:05,520
you don't

746
00:25:05,520 --> 00:25:06,880
obviously you don't have to be near the

747
00:25:06,880 --> 00:25:09,440
access point so things like um

748
00:25:09,440 --> 00:25:11,760
sort of rogue access point protection

749
00:25:11,760 --> 00:25:13,679
and you're not competing against a

750
00:25:13,679 --> 00:25:14,799
corporate access point which has

751
00:25:14,799 --> 00:25:16,400
probably much better signal

752
00:25:16,400 --> 00:25:19,120
than your little alpha card so you don't

753
00:25:19,120 --> 00:25:20,400
have to go through all that trouble that

754
00:25:20,400 --> 00:25:21,840
was the idea behind that

755
00:25:21,840 --> 00:25:25,600
so it is possible the next idea i had

756
00:25:25,600 --> 00:25:28,640
was given that

757
00:25:28,640 --> 00:25:32,240
netantlem v1 and ms chat v2 crack the

758
00:25:32,240 --> 00:25:34,559
same with hash cut so they both use

759
00:25:34,559 --> 00:25:38,400
hashtag 5500 can't we relay from

760
00:25:38,400 --> 00:25:41,679
the wireless world to the wired world so

761
00:25:41,679 --> 00:25:43,520
once again using the idea of throwing a

762
00:25:43,520 --> 00:25:46,559
raspberry pi and a sysadmins garden

763
00:25:46,559 --> 00:25:47,919
you trick their device into

764
00:25:47,919 --> 00:25:49,600
authenticating to your

765
00:25:49,600 --> 00:25:51,600
access point you relay that

766
00:25:51,600 --> 00:25:52,720
authentication

767
00:25:52,720 --> 00:25:55,520
and you pass it off to an smb server

768
00:25:55,520 --> 00:25:56,720
which

769
00:25:56,720 --> 00:25:58,159
will let you authentic write their

770
00:25:58,159 --> 00:26:00,159
authentication so how we did it on the

771
00:26:00,159 --> 00:26:01,760
wired world but sort of going from

772
00:26:01,760 --> 00:26:02,880
wireless to white so

773
00:26:02,880 --> 00:26:06,640
very cool idea this was actually the

774
00:26:06,640 --> 00:26:09,279
original plan i had when i first thought

775
00:26:09,279 --> 00:26:10,159
of this idea

776
00:26:10,159 --> 00:26:12,880
given that at the time i thought okay i

777
00:26:12,880 --> 00:26:14,080
can relay people

778
00:26:14,080 --> 00:26:15,200
but the client doesn't want to give me

779
00:26:15,200 --> 00:26:17,200
wi-fi so

780
00:26:17,200 --> 00:26:20,799
maybe i can do something with this but

781
00:26:20,799 --> 00:26:24,320
you'll see why i can't so i

782
00:26:24,320 --> 00:26:26,640
compared the hashes they look the same

783
00:26:26,640 --> 00:26:28,159
challenge eight octets

784
00:26:28,159 --> 00:26:30,720
response 24 octets uh you'll see in the

785
00:26:30,720 --> 00:26:31,840
ntl mv11

786
00:26:31,840 --> 00:26:33,279
there's an lm response here you can

787
00:26:33,279 --> 00:26:35,360
safely throw that away but the nt

788
00:26:35,360 --> 00:26:37,200
response 24 octets challenge

789
00:26:37,200 --> 00:26:41,440
8 octets as well so they line up

790
00:26:41,440 --> 00:26:43,440
and so once here we get to the point

791
00:26:43,440 --> 00:26:44,720
where the iris

792
00:26:44,720 --> 00:26:46,960
not reading the rfc bit me again in that

793
00:26:46,960 --> 00:26:48,080
i did not

794
00:26:48,080 --> 00:26:51,440
read through it so

795
00:26:51,440 --> 00:26:53,600
i immediately went into implementation i

796
00:26:53,600 --> 00:26:54,640
grabbed impact

797
00:26:54,640 --> 00:26:56,799
the same people the same project that

798
00:26:56,799 --> 00:26:58,240
gave us that nice

799
00:26:58,240 --> 00:27:00,880
ntlm relay x i mentioned earlier so i

800
00:27:00,880 --> 00:27:03,360
programmed it to use ntlm1 all the time

801
00:27:03,360 --> 00:27:05,679
as well as my whole complicated state

802
00:27:05,679 --> 00:27:06,720
file and

803
00:27:06,720 --> 00:27:09,840
challenge response file structure and

804
00:27:09,840 --> 00:27:10,480
then

805
00:27:10,480 --> 00:27:12,320
it turns out looking through the code

806
00:27:12,320 --> 00:27:14,159
reading from the file

807
00:27:14,159 --> 00:27:16,320
my file for the challenge had 16 bytes

808
00:27:16,320 --> 00:27:17,840
in it whereas

809
00:27:17,840 --> 00:27:20,960
i was only looking for eight bytes

810
00:27:20,960 --> 00:27:22,640
so this was a bit of a problem as i

811
00:27:22,640 --> 00:27:24,799
can't fit 16 bytes into eight bytes

812
00:27:24,799 --> 00:27:28,080
so then i started investigating

813
00:27:28,080 --> 00:27:30,000
and if i had read the rfc i could have

814
00:27:30,000 --> 00:27:31,440
seen at the bottom

815
00:27:31,440 --> 00:27:32,960
there's all sorts of pseudo code

816
00:27:32,960 --> 00:27:34,799
provided and

817
00:27:34,799 --> 00:27:37,440
let me simplify this for you ms chap

818
00:27:37,440 --> 00:27:39,840
takes two 16 octet challenges

819
00:27:39,840 --> 00:27:41,440
combines them together in a sha and

820
00:27:41,440 --> 00:27:43,200
takes eight characters and well eight

821
00:27:43,200 --> 00:27:44,399
bytes from there

822
00:27:44,399 --> 00:27:46,720
and then ntlmv1 kind of just passes over

823
00:27:46,720 --> 00:27:48,240
eight bytes so

824
00:27:48,240 --> 00:27:50,480
given that what they're passing over the

825
00:27:50,480 --> 00:27:51,760
wire is different

826
00:27:51,760 --> 00:27:54,080
you can't relay what they're passing

827
00:27:54,080 --> 00:27:55,440
over the wire from one to the other

828
00:27:55,440 --> 00:27:55,919
because

829
00:27:55,919 --> 00:27:58,480
the one would be expecting eight octets

830
00:27:58,480 --> 00:27:59,440
while the other is only

831
00:27:59,440 --> 00:28:01,279
while the other is providing 16 octanes

832
00:28:01,279 --> 00:28:02,559
so that's sort of ruined my idea

833
00:28:02,559 --> 00:28:04,240
wasted a day doing all that

834
00:28:04,240 --> 00:28:05,679
implementation and things like that

835
00:28:05,679 --> 00:28:08,559
and if you remember my complicated state

836
00:28:08,559 --> 00:28:10,720
file diagram before i simplified it for

837
00:28:10,720 --> 00:28:12,000
you it was a bit of a pain

838
00:28:12,000 --> 00:28:15,279
re-working out how i did all this stuff

839
00:28:15,279 --> 00:28:18,320
so the takeaway read the rfc very

840
00:28:18,320 --> 00:28:19,919
helpful

841
00:28:19,919 --> 00:28:23,360
so now we go into the defense

842
00:28:23,360 --> 00:28:26,480
so the main thing here i think

843
00:28:26,480 --> 00:28:28,159
that you should take away is you should

844
00:28:28,159 --> 00:28:30,720
probably not use peep

845
00:28:30,720 --> 00:28:34,559
so given its very nature

846
00:28:34,559 --> 00:28:36,399
users are able to set it up themselves

847
00:28:36,399 --> 00:28:38,159
given that they know their passwords

848
00:28:38,159 --> 00:28:40,559
so a user has always wanted to going to

849
00:28:40,559 --> 00:28:42,240
want to get internet and get onto the

850
00:28:42,240 --> 00:28:43,840
network

851
00:28:43,840 --> 00:28:46,960
where that might not be ideal

852
00:28:46,960 --> 00:28:49,279
because when they're setting up their

853
00:28:49,279 --> 00:28:50,480
own

854
00:28:50,480 --> 00:28:53,520
wireless devices they're more likely to

855
00:28:53,520 --> 00:28:54,159
click

856
00:28:54,159 --> 00:28:56,559
don't validate the certificate because

857
00:28:56,559 --> 00:28:57,760
it might be that they don't have the

858
00:28:57,760 --> 00:28:59,440
certificate on hand and they just really

859
00:28:59,440 --> 00:29:00,559
want wifi

860
00:29:00,559 --> 00:29:04,559
so that's the first the first failing

861
00:29:04,559 --> 00:29:08,080
second thing is using a single strong

862
00:29:08,080 --> 00:29:08,720
method

863
00:29:08,720 --> 00:29:12,080
is preferable once again talking to

864
00:29:12,080 --> 00:29:15,840
peep if you use purely

865
00:29:15,840 --> 00:29:18,559
certificates so for example eeptls a

866
00:29:18,559 --> 00:29:20,000
user is not going to be getting that

867
00:29:20,000 --> 00:29:20,720
certificate

868
00:29:20,720 --> 00:29:23,279
and setting it up and things like that

869
00:29:23,279 --> 00:29:24,320
they're probably going to have to go to

870
00:29:24,320 --> 00:29:25,679
their it team and

871
00:29:25,679 --> 00:29:28,720
and get that sorted so

872
00:29:28,720 --> 00:29:31,279
if you really really want to use peep

873
00:29:31,279 --> 00:29:32,799
and you don't mind that you'll be giving

874
00:29:32,799 --> 00:29:34,640
away your hash

875
00:29:34,640 --> 00:29:38,080
you can enable cryptographic binding

876
00:29:38,080 --> 00:29:40,640
so this defense steps in when people

877
00:29:40,640 --> 00:29:42,640
aren't validating their certificates

878
00:29:42,640 --> 00:29:44,720
and maybe your users have really strong

879
00:29:44,720 --> 00:29:46,240
passwords that people aren't going to be

880
00:29:46,240 --> 00:29:47,360
able to

881
00:29:47,360 --> 00:29:50,000
crack but once again i said that ms chap

882
00:29:50,000 --> 00:29:51,520
you can go through the

883
00:29:51,520 --> 00:29:54,880
entire key space so still

884
00:29:54,880 --> 00:29:57,760
not really good but if you enable

885
00:29:57,760 --> 00:29:59,760
cryptogram binding at least people can't

886
00:29:59,760 --> 00:30:00,880
relay

887
00:30:00,880 --> 00:30:02,880
uh arbitrarily to your things and they

888
00:30:02,880 --> 00:30:04,880
would then be forced to go through that

889
00:30:04,880 --> 00:30:06,399
sort of that mission of cracking the

890
00:30:06,399 --> 00:30:08,880
hashes cryptographic binding once again

891
00:30:08,880 --> 00:30:09,919
just sort of

892
00:30:09,919 --> 00:30:12,720
binding the tls layer to the ms chat

893
00:30:12,720 --> 00:30:14,000
player and requiring that the same

894
00:30:14,000 --> 00:30:15,200
person did the same

895
00:30:15,200 --> 00:30:18,399
did the authentication here we have an

896
00:30:18,399 --> 00:30:20,840
example of a windows

897
00:30:20,840 --> 00:30:24,159
server uh where you can enable

898
00:30:24,159 --> 00:30:26,320
uh crypto binding so disconnect the

899
00:30:26,320 --> 00:30:27,520
clients if they're not

900
00:30:27,520 --> 00:30:30,880
wanting to do it so that stops uh

901
00:30:30,880 --> 00:30:32,240
stops people authenticating unless

902
00:30:32,240 --> 00:30:34,480
they're crypto bind

903
00:30:34,480 --> 00:30:36,880
and then here we have the client

904
00:30:36,880 --> 00:30:39,200
perspective where

905
00:30:39,200 --> 00:30:40,720
uh disconnect if the server isn't

906
00:30:40,720 --> 00:30:42,480
presenting it's uh tls

907
00:30:42,480 --> 00:30:44,960
is not crypto binding so you have to

908
00:30:44,960 --> 00:30:46,399
enable this on both sides

909
00:30:46,399 --> 00:30:48,159
so the person that's enabling it is the

910
00:30:48,159 --> 00:30:49,919
one that's protecting themselves so bear

911
00:30:49,919 --> 00:30:51,919
this in mind

912
00:30:51,919 --> 00:30:55,279
so if only the server is crypto binding

913
00:30:55,279 --> 00:30:57,519
you can attack the client so the client

914
00:30:57,519 --> 00:30:58,960
will still connect to you

915
00:30:58,960 --> 00:31:01,919
because when they start connecting um

916
00:31:01,919 --> 00:31:05,120
you don't have to present crypto binding

917
00:31:05,120 --> 00:31:07,519
they you but when you connect to the

918
00:31:07,519 --> 00:31:09,360
server you say okay i will crypto bind

919
00:31:09,360 --> 00:31:09,840
but you

920
00:31:09,840 --> 00:31:12,000
just relay the um the inner

921
00:31:12,000 --> 00:31:13,840
authentication as usual

922
00:31:13,840 --> 00:31:16,240
so that gets you the correct responses

923
00:31:16,240 --> 00:31:18,080
you need

924
00:31:18,080 --> 00:31:21,519
on the client side you

925
00:31:21,519 --> 00:31:24,320
uh so the tour of the demand is enabled

926
00:31:24,320 --> 00:31:25,840
on the client you can still attack the

927
00:31:25,840 --> 00:31:26,880
server so you

928
00:31:26,880 --> 00:31:28,960
when you present your rogue access point

929
00:31:28,960 --> 00:31:30,320
to the client you say

930
00:31:30,320 --> 00:31:32,000
uh don't worry we're using crypto

931
00:31:32,000 --> 00:31:34,320
binding while the client won't connect

932
00:31:34,320 --> 00:31:35,760
to you you will still then be able to

933
00:31:35,760 --> 00:31:37,120
relay the authentication and connect to

934
00:31:37,120 --> 00:31:39,600
the server

935
00:31:39,600 --> 00:31:42,799
so future work um given covert i've had

936
00:31:42,799 --> 00:31:44,080
lots of time

937
00:31:44,080 --> 00:31:46,159
to work on sort of these sort of things

938
00:31:46,159 --> 00:31:47,440
and

939
00:31:47,440 --> 00:31:49,200
my idea was looking for more things to

940
00:31:49,200 --> 00:31:51,039
relay so

941
00:31:51,039 --> 00:31:53,760
uh ms chap is actually quite popular

942
00:31:53,760 --> 00:31:56,240
it's used in a lot of things

943
00:31:56,240 --> 00:31:57,919
and the next place i found it most

944
00:31:57,919 --> 00:32:00,159
widely used is in vpns specifically

945
00:32:00,159 --> 00:32:01,600
microsoft's

946
00:32:01,600 --> 00:32:05,519
sstp and pptp and i've already sort of

947
00:32:05,519 --> 00:32:08,720
begun work into relaying from wi-fi

948
00:32:08,720 --> 00:32:11,120
to that so in future you'll be able to

949
00:32:11,120 --> 00:32:12,320
trick people into connecting you and

950
00:32:12,320 --> 00:32:14,000
then you would then be able to connect

951
00:32:14,000 --> 00:32:17,039
to their vpn which gets rid of the sort

952
00:32:17,039 --> 00:32:18,320
of

953
00:32:18,320 --> 00:32:20,080
locality element where you need to be

954
00:32:20,080 --> 00:32:23,679
near the access point to connect to it

955
00:32:23,679 --> 00:32:25,679
here's my one meme which i think

956
00:32:25,679 --> 00:32:27,519
represents a relay attack

957
00:32:27,519 --> 00:32:29,120
as you can see they're redirecting the

958
00:32:29,120 --> 00:32:31,039
water somewhere else

959
00:32:31,039 --> 00:32:34,080
and that is my talk so thank you and any

960
00:32:34,080 --> 00:32:36,960
questions

