1
00:00:02,000 --> 00:00:04,000
hi everyone thank you for joining today

2
00:00:04,000 --> 00:00:06,000
we'll be escaping virtualized containers

3
00:00:06,000 --> 00:00:07,759
hey i'm involved i'm a security

4
00:00:07,759 --> 00:00:10,080
researcher at palo alto networks and

5
00:00:10,080 --> 00:00:12,559
me and my team's main focus is cloud

6
00:00:12,559 --> 00:00:14,240
security and container security

7
00:00:14,240 --> 00:00:15,360
and today i'm going to walk you through

8
00:00:15,360 --> 00:00:17,039
a research i conducted on a cata

9
00:00:17,039 --> 00:00:18,320
containers which is a

10
00:00:18,320 --> 00:00:20,880
sandboxing solution for containers that

11
00:00:20,880 --> 00:00:21,359
runs

12
00:00:21,359 --> 00:00:23,600
virtualized containers it runs each

13
00:00:23,600 --> 00:00:24,400
container

14
00:00:24,400 --> 00:00:26,720
inside the virtual machine and today

15
00:00:26,720 --> 00:00:28,400
we're trying to escape that sandbox and

16
00:00:28,400 --> 00:00:29,519
hopefully

17
00:00:29,519 --> 00:00:31,039
through that learn a bit about the

18
00:00:31,039 --> 00:00:32,640
container security so

19
00:00:32,640 --> 00:00:34,880
a bit about the agenda for today we will

20
00:00:34,880 --> 00:00:36,399
start off by talking about the

21
00:00:36,399 --> 00:00:37,920
container and container security in

22
00:00:37,920 --> 00:00:40,399
general and then we'll talk about cutter

23
00:00:40,399 --> 00:00:42,399
containers a sandboxing solution like

24
00:00:42,399 --> 00:00:42,960
i've said

25
00:00:42,960 --> 00:00:44,879
and why is that needed and how is it

26
00:00:44,879 --> 00:00:47,039
implemented and

27
00:00:47,039 --> 00:00:49,120
then we'll try to escape the sandbox so

28
00:00:49,120 --> 00:00:50,480
we first need to

29
00:00:50,480 --> 00:00:52,320
break out of the container and then

30
00:00:52,320 --> 00:00:53,760
escape the virtual machine

31
00:00:53,760 --> 00:00:55,520
so we have quite a bit of challenges

32
00:00:55,520 --> 00:00:57,280
ahead and then we'll wrap it up with

33
00:00:57,280 --> 00:00:57,600
some

34
00:00:57,600 --> 00:00:59,760
takeaways from the research so let's

35
00:00:59,760 --> 00:01:00,960
start with containers

36
00:01:00,960 --> 00:01:04,000
there's a misconception that containers

37
00:01:04,000 --> 00:01:06,000
are just lightweight vms that's not the

38
00:01:06,000 --> 00:01:06,400
case

39
00:01:06,400 --> 00:01:08,880
truth on steroids is actually a better

40
00:01:08,880 --> 00:01:09,840
description if you're

41
00:01:09,840 --> 00:01:12,960
familiar with linux but when i wanted to

42
00:01:12,960 --> 00:01:14,320
really sum up containers

43
00:01:14,320 --> 00:01:16,560
in one sentence what i came up with is

44
00:01:16,560 --> 00:01:18,080
restricted processes

45
00:01:18,080 --> 00:01:19,920
running in a separate file system and

46
00:01:19,920 --> 00:01:21,200
the keyword here is

47
00:01:21,200 --> 00:01:23,439
processes at the end containers are just

48
00:01:23,439 --> 00:01:25,360
linux processors running with a couple

49
00:01:25,360 --> 00:01:27,280
of isolation primitives

50
00:01:27,280 --> 00:01:29,200
applied to them and you probably heard

51
00:01:29,200 --> 00:01:30,880
about some of those

52
00:01:30,880 --> 00:01:34,079
isolation as isolation primitives

53
00:01:34,079 --> 00:01:36,799
so for example namespaces define what

54
00:01:36,799 --> 00:01:38,400
the process or what the container

55
00:01:38,400 --> 00:01:41,040
can see so the pid namespace will define

56
00:01:41,040 --> 00:01:42,479
what other processes

57
00:01:42,479 --> 00:01:45,119
a make container say and then you have

58
00:01:45,119 --> 00:01:46,479
primitives which are more related to

59
00:01:46,479 --> 00:01:47,840
what a container can do

60
00:01:47,840 --> 00:01:50,240
like capabilities in a second so for

61
00:01:50,240 --> 00:01:51,840
example capabilities

62
00:01:51,840 --> 00:01:53,680
are based are basically privileges in

63
00:01:53,680 --> 00:01:55,920
linux so you wouldn't like the container

64
00:01:55,920 --> 00:01:56,799
to have the

65
00:01:56,799 --> 00:01:59,040
assist reboot capability as that would

66
00:01:59,040 --> 00:02:00,479
allow him to shut down the machine and

67
00:02:00,479 --> 00:02:01,759
of course that's something you don't

68
00:02:01,759 --> 00:02:02,560
want the

69
00:02:02,560 --> 00:02:05,759
container to be able to do finally the

70
00:02:05,759 --> 00:02:07,119
final piece that really ties it all

71
00:02:07,119 --> 00:02:09,840
together are a control group so c groups

72
00:02:09,840 --> 00:02:11,680
which are all about resource isolation

73
00:02:11,680 --> 00:02:13,920
and limiting the containers access to

74
00:02:13,920 --> 00:02:15,360
host resources

75
00:02:15,360 --> 00:02:16,560
for example you wouldn't like the

76
00:02:16,560 --> 00:02:18,400
container to be able to

77
00:02:18,400 --> 00:02:21,599
exhaust the entire host memory

78
00:02:21,599 --> 00:02:23,040
and launch a denial of service attack

79
00:02:23,040 --> 00:02:24,879
against the host right

80
00:02:24,879 --> 00:02:27,599
and all of those together give allow us

81
00:02:27,599 --> 00:02:28,560
to

82
00:02:28,560 --> 00:02:30,720
separate a process enough from the

83
00:02:30,720 --> 00:02:32,640
system for it to be considered

84
00:02:32,640 --> 00:02:34,959
a container but you still can't really

85
00:02:34,959 --> 00:02:37,680
compare the type of isolation

86
00:02:37,680 --> 00:02:39,440
provided by those primitives and the

87
00:02:39,440 --> 00:02:41,040
isolation of containers

88
00:02:41,040 --> 00:02:42,800
to the level of isolation provided by

89
00:02:42,800 --> 00:02:45,120
virtual machines and and the main

90
00:02:45,120 --> 00:02:47,680
difference is is that virtual machines

91
00:02:47,680 --> 00:02:48,640
run with a

92
00:02:48,640 --> 00:02:51,440
on a separate kernel from the from the

93
00:02:51,440 --> 00:02:53,120
host and containers

94
00:02:53,120 --> 00:02:56,239
share the host kernel and that's really

95
00:02:56,239 --> 00:02:58,239
a fancy way of saying that containers

96
00:02:58,239 --> 00:03:00,400
at the end are just processes and like

97
00:03:00,400 --> 00:03:02,640
any process they interact with the

98
00:03:02,640 --> 00:03:05,280
kernel quite frequently frequently

99
00:03:05,280 --> 00:03:06,239
either a

100
00:03:06,239 --> 00:03:08,080
when they invoke system call or if a

101
00:03:08,080 --> 00:03:09,519
page fault happen

102
00:03:09,519 --> 00:03:12,800
it happens in their context

103
00:03:12,800 --> 00:03:15,200
and that means that like other processes

104
00:03:15,200 --> 00:03:15,840
on the

105
00:03:15,840 --> 00:03:18,159
on the machine and the kernel is quite a

106
00:03:18,159 --> 00:03:19,599
large of an attack surface for

107
00:03:19,599 --> 00:03:21,519
containers to try and exploit

108
00:03:21,519 --> 00:03:24,159
to gain a foothold and a control over

109
00:03:24,159 --> 00:03:25,360
the entire host

110
00:03:25,360 --> 00:03:28,799
right and the the issue here is that

111
00:03:28,799 --> 00:03:30,480
those vulnerabilities don't really have

112
00:03:30,480 --> 00:03:31,200
to be

113
00:03:31,200 --> 00:03:34,239
related to namespaces or to c groups or

114
00:03:34,239 --> 00:03:35,760
to any of the primitives

115
00:03:35,760 --> 00:03:38,879
that really make up containers just any

116
00:03:38,879 --> 00:03:40,560
privileges creation vulnerability in the

117
00:03:40,560 --> 00:03:42,640
kernel in the in a code path in the

118
00:03:42,640 --> 00:03:43,519
kernel that

119
00:03:43,519 --> 00:03:46,319
the container can somehow invoke it

120
00:03:46,319 --> 00:03:48,000
could allow a container to

121
00:03:48,000 --> 00:03:50,799
break out and that's quite concerning in

122
00:03:50,799 --> 00:03:52,239
a lot of scenarios

123
00:03:52,239 --> 00:03:55,360
and to tackle that that issue

124
00:03:55,360 --> 00:03:58,840
a few a solution around a few tools

125
00:03:58,840 --> 00:04:01,760
arrives that allow you to sandbox

126
00:04:01,760 --> 00:04:02,640
container

127
00:04:02,640 --> 00:04:04,799
and cutter containers is one of the

128
00:04:04,799 --> 00:04:05,920
first solution

129
00:04:05,920 --> 00:04:08,080
to actually try to do that and it takes

130
00:04:08,080 --> 00:04:10,239
a pretty straightforward approach at the

131
00:04:10,239 --> 00:04:12,000
sandbox in the containers

132
00:04:12,000 --> 00:04:14,959
it just runs each container inside the

133
00:04:14,959 --> 00:04:15,680
dedicated

134
00:04:15,680 --> 00:04:17,759
lightweight virtual machine and by doing

135
00:04:17,759 --> 00:04:19,600
that you get two layers of isolation

136
00:04:19,600 --> 00:04:20,478
right you get

137
00:04:20,478 --> 00:04:22,160
first the container and then the virtual

138
00:04:22,160 --> 00:04:24,720
machine and you also mitigated the

139
00:04:24,720 --> 00:04:26,320
breakouts which are based on kernel

140
00:04:26,320 --> 00:04:28,160
vulnerabilities because even if the

141
00:04:28,160 --> 00:04:29,840
container exploits the vulnerability in

142
00:04:29,840 --> 00:04:30,880
the guest kernel

143
00:04:30,880 --> 00:04:32,720
he's only compromising the guest right

144
00:04:32,720 --> 00:04:34,960
he still doesn't have access to the host

145
00:04:34,960 --> 00:04:36,880
and really the idea of qatar is to

146
00:04:36,880 --> 00:04:38,800
provide a simple way

147
00:04:38,800 --> 00:04:41,040
to sandbox containers where you can just

148
00:04:41,040 --> 00:04:42,240
plug qatar

149
00:04:42,240 --> 00:04:44,479
into existing solutions like docker and

150
00:04:44,479 --> 00:04:45,440
kubernetes

151
00:04:45,440 --> 00:04:47,759
and have a certain containers run with

152
00:04:47,759 --> 00:04:48,880
an additional

153
00:04:48,880 --> 00:04:51,120
layer of isolation so what's what's the

154
00:04:51,120 --> 00:04:52,160
use case

155
00:04:52,160 --> 00:04:54,320
for this type of solution so first as

156
00:04:54,320 --> 00:04:56,240
i've said kata is great for

157
00:04:56,240 --> 00:04:58,320
untrusted or targeted containers where

158
00:04:58,320 --> 00:05:00,240
you you're afraid the container might

159
00:05:00,240 --> 00:05:01,280
want to

160
00:05:01,280 --> 00:05:03,199
break out and affect the host and it's

161
00:05:03,199 --> 00:05:05,120
also really useful in multi-tenant

162
00:05:05,120 --> 00:05:06,800
environments where you want to

163
00:05:06,800 --> 00:05:10,000
segregate a container from a

164
00:05:10,000 --> 00:05:12,080
several tenants and there are a lot of

165
00:05:12,080 --> 00:05:13,039
scenarios where you

166
00:05:13,039 --> 00:05:15,680
those use cases are useful but cloud

167
00:05:15,680 --> 00:05:16,639
service provider is

168
00:05:16,639 --> 00:05:19,600
is one of the prominent ones because

169
00:05:19,600 --> 00:05:20,000
that's

170
00:05:20,000 --> 00:05:21,919
those two use cases are really the

171
00:05:21,919 --> 00:05:23,680
problem that cloud service providers

172
00:05:23,680 --> 00:05:26,400
have right they run a containers from

173
00:05:26,400 --> 00:05:29,039
multiple customers on the same platforms

174
00:05:29,039 --> 00:05:30,720
those containers might be malicious they

175
00:05:30,720 --> 00:05:33,360
they really don't they really don't know

176
00:05:33,360 --> 00:05:35,840
they need a and they need a solution to

177
00:05:35,840 --> 00:05:37,840
create a strong isolation boundary

178
00:05:37,840 --> 00:05:39,280
between containers of different

179
00:05:39,280 --> 00:05:39,919
customers

180
00:05:39,919 --> 00:05:41,840
right and qatar really fits that

181
00:05:41,840 --> 00:05:43,840
scenario

182
00:05:43,840 --> 00:05:45,840
great and several cloud service

183
00:05:45,840 --> 00:05:47,759
providers are already using qatar in

184
00:05:47,759 --> 00:05:48,720
production

185
00:05:48,720 --> 00:05:51,840
to support customer multi-tenancy so how

186
00:05:51,840 --> 00:05:52,720
do you really

187
00:05:52,720 --> 00:05:56,319
use kata and so

188
00:05:56,319 --> 00:05:58,080
in a normal container setup you have the

189
00:05:58,080 --> 00:05:59,440
container engines of something like

190
00:05:59,440 --> 00:06:00,000
docker

191
00:06:00,000 --> 00:06:02,000
and you also have the container runtime

192
00:06:02,000 --> 00:06:03,520
and that's because container engines

193
00:06:03,520 --> 00:06:05,520
don't really know how to run containers

194
00:06:05,520 --> 00:06:07,759
and when they actually need to they

195
00:06:07,759 --> 00:06:09,759
defer to their defined runtime

196
00:06:09,759 --> 00:06:11,759
and that runtime actually knows how to

197
00:06:11,759 --> 00:06:13,039
set up the container

198
00:06:13,039 --> 00:06:14,960
so normally you would use the run c

199
00:06:14,960 --> 00:06:16,160
which is the default

200
00:06:16,160 --> 00:06:18,960
in industry standard runtime but you can

201
00:06:18,960 --> 00:06:21,039
decide that you if you have an untrusted

202
00:06:21,039 --> 00:06:21,680
container

203
00:06:21,680 --> 00:06:23,680
where you want to sandbox that container

204
00:06:23,680 --> 00:06:25,120
you can just define

205
00:06:25,120 --> 00:06:27,120
kata as the underlying runtime of your

206
00:06:27,120 --> 00:06:28,319
container engine

207
00:06:28,319 --> 00:06:31,120
say docker and now when you run that

208
00:06:31,120 --> 00:06:33,199
container with kata it will be

209
00:06:33,199 --> 00:06:34,800
deployed inside the virtual machine with

210
00:06:34,800 --> 00:06:37,360
an additional layer of isolation

211
00:06:37,360 --> 00:06:39,520
so we at the end of the day they want to

212
00:06:39,520 --> 00:06:40,720
break out of this

213
00:06:40,720 --> 00:06:42,880
of this sandbox so let's see a bit more

214
00:06:42,880 --> 00:06:44,720
in depth how does that work so that's

215
00:06:44,720 --> 00:06:45,520
how you

216
00:06:45,520 --> 00:06:48,080
that's the command to start a container

217
00:06:48,080 --> 00:06:49,759
under docker with qatar

218
00:06:49,759 --> 00:06:51,840
and the way this works is docker will

219
00:06:51,840 --> 00:06:54,479
tell the cata runtime on the host

220
00:06:54,479 --> 00:06:56,720
please set up a container for me and the

221
00:06:56,720 --> 00:06:58,479
canter runtime now needs to set up a

222
00:06:58,479 --> 00:06:59,440
virtual machine

223
00:06:59,440 --> 00:07:00,960
so it will defer to one of the

224
00:07:00,960 --> 00:07:02,560
predefined

225
00:07:02,560 --> 00:07:04,720
virtual machine monitors virtual machine

226
00:07:04,720 --> 00:07:06,160
modules are basically software that

227
00:07:06,160 --> 00:07:06,720
knows

228
00:07:06,720 --> 00:07:08,880
how to set up virtual machines and those

229
00:07:08,880 --> 00:07:10,319
are either a qmu

230
00:07:10,319 --> 00:07:12,319
a cloud hypervisor by intel or

231
00:07:12,319 --> 00:07:13,840
filecracker by amazon

232
00:07:13,840 --> 00:07:15,360
and it will use one of those to set up

233
00:07:15,360 --> 00:07:17,599
the virtual machine next it will also

234
00:07:17,599 --> 00:07:19,280
set up a shared directory

235
00:07:19,280 --> 00:07:20,880
between the host and the guest virtual

236
00:07:20,880 --> 00:07:22,960
machine to deliver some files for the

237
00:07:22,960 --> 00:07:25,680
fro to the guest for example in order to

238
00:07:25,680 --> 00:07:26,400
deploy the

239
00:07:26,400 --> 00:07:28,400
container the guest must have the a

240
00:07:28,400 --> 00:07:29,440
container image

241
00:07:29,440 --> 00:07:32,880
right and and now once that done a

242
00:07:32,880 --> 00:07:34,960
process called the cutter agent it will

243
00:07:34,960 --> 00:07:36,080
start running

244
00:07:36,080 --> 00:07:38,080
in the guest and he is responsible for

245
00:07:38,080 --> 00:07:39,919
actually deploying

246
00:07:39,919 --> 00:07:41,840
the container inside the guest so it

247
00:07:41,840 --> 00:07:43,840
will take the container configuration

248
00:07:43,840 --> 00:07:45,919
from the cataran time and also the image

249
00:07:45,919 --> 00:07:47,919
from the shell directory and use those

250
00:07:47,919 --> 00:07:50,479
two to actually deploy the container

251
00:07:50,479 --> 00:07:52,080
and there you have it at the end you

252
00:07:52,080 --> 00:07:54,240
have a container running inside

253
00:07:54,240 --> 00:07:55,919
a lightweight virtual machine what you

254
00:07:55,919 --> 00:07:57,599
expected and you get

255
00:07:57,599 --> 00:07:59,919
two layers of isolation so now that we

256
00:07:59,919 --> 00:08:01,280
know how things work

257
00:08:01,280 --> 00:08:03,520
let's try to escape the sandbox and why

258
00:08:03,520 --> 00:08:04,960
would you like to do that

259
00:08:04,960 --> 00:08:06,720
well first it's fun and it's challenging

260
00:08:06,720 --> 00:08:08,560
right you have two isolation layers

261
00:08:08,560 --> 00:08:10,800
to break out of and second i think it's

262
00:08:10,800 --> 00:08:12,160
a great opportunity

263
00:08:12,160 --> 00:08:14,319
to learn about container security so

264
00:08:14,319 --> 00:08:16,240
what's our attack scenario

265
00:08:16,240 --> 00:08:18,800
so enterprises use qatar to contain

266
00:08:18,800 --> 00:08:21,039
untrusted and targeted containers

267
00:08:21,039 --> 00:08:23,199
we're that untrusted container trying to

268
00:08:23,199 --> 00:08:24,960
break out and affect the host

269
00:08:24,960 --> 00:08:27,520
cloud service providers use qatar to

270
00:08:27,520 --> 00:08:29,360
support customer multi-tenancy

271
00:08:29,360 --> 00:08:31,360
so we're that evil customer uploading

272
00:08:31,360 --> 00:08:32,719
our malicious containers

273
00:08:32,719 --> 00:08:34,240
and trying to break out and affect the

274
00:08:34,240 --> 00:08:35,839
entire platform and affect other

275
00:08:35,839 --> 00:08:36,799
customers

276
00:08:36,799 --> 00:08:39,120
so as that as a malicious container

277
00:08:39,120 --> 00:08:40,240
what's the plan

278
00:08:40,240 --> 00:08:41,679
it's pretty straightforward we first

279
00:08:41,679 --> 00:08:43,440
need to escape the container

280
00:08:43,440 --> 00:08:45,279
and then break out of the virtual

281
00:08:45,279 --> 00:08:47,440
machine so we'll get to that in a second

282
00:08:47,440 --> 00:08:48,720
but i want to

283
00:08:48,720 --> 00:08:51,360
discuss scope for a bit a cutter is very

284
00:08:51,360 --> 00:08:52,320
configurable

285
00:08:52,320 --> 00:08:54,320
the vulnerabilities i'll show here won't

286
00:08:54,320 --> 00:08:56,720
work in every configuration but we'll be

287
00:08:56,720 --> 00:08:58,640
targeting the standard default

288
00:08:58,640 --> 00:09:00,959
configuration that cut our ships with

289
00:09:00,959 --> 00:09:03,519
it also we'll be focusing on a simple

290
00:09:03,519 --> 00:09:04,640
container guest

291
00:09:04,640 --> 00:09:06,720
on a single container guest under docker

292
00:09:06,720 --> 00:09:08,480
and with kubernetes you could have a

293
00:09:08,480 --> 00:09:09,920
multiple containers

294
00:09:09,920 --> 00:09:12,320
in one guest which some exploitation

295
00:09:12,320 --> 00:09:14,320
gets complex because of that and

296
00:09:14,320 --> 00:09:15,760
in one of the attacks i'm going to show

297
00:09:15,760 --> 00:09:17,360
them still i still need to

298
00:09:17,360 --> 00:09:18,959
win a race condition for that to work

299
00:09:18,959 --> 00:09:20,399
under kubernetes so

300
00:09:20,399 --> 00:09:22,720
we'll keep it simple we will focus on a

301
00:09:22,720 --> 00:09:24,720
single container guest under docker

302
00:09:24,720 --> 00:09:26,640
and finally i want to say this is not an

303
00:09:26,640 --> 00:09:29,120
indictment against kata you know every

304
00:09:29,120 --> 00:09:30,320
software will have

305
00:09:30,320 --> 00:09:32,240
its share of vulnerabilities i really

306
00:09:32,240 --> 00:09:34,640
want to show it just to so you could

307
00:09:34,640 --> 00:09:37,279
learn about container security so our

308
00:09:37,279 --> 00:09:38,880
first job of the day as i've said is to

309
00:09:38,880 --> 00:09:40,480
escape the container right

310
00:09:40,480 --> 00:09:42,880
so we could rely on the vulnerability in

311
00:09:42,880 --> 00:09:44,080
the guest kernel

312
00:09:44,080 --> 00:09:46,320
right and in a privileged escalation

313
00:09:46,320 --> 00:09:47,920
vulnerability in the guest cornell

314
00:09:47,920 --> 00:09:49,920
but that really misses the point right

315
00:09:49,920 --> 00:09:51,120
we want to learn about container

316
00:09:51,120 --> 00:09:52,640
security we want to find an issue

317
00:09:52,640 --> 00:09:55,200
that is related to containers so we want

318
00:09:55,200 --> 00:09:55,839
to find

319
00:09:55,839 --> 00:09:58,480
a native issue with how kata sets up the

320
00:09:58,480 --> 00:09:59,839
container inside the guest virtual

321
00:09:59,839 --> 00:10:00,800
machine

322
00:10:00,800 --> 00:10:02,880
so in order to do that we need to talk

323
00:10:02,880 --> 00:10:04,560
about how do those

324
00:10:04,560 --> 00:10:06,560
issues even look like you know how do

325
00:10:06,560 --> 00:10:08,640
you approach the task of

326
00:10:08,640 --> 00:10:10,480
looking at the container runtime and

327
00:10:10,480 --> 00:10:11,680
trying to break it

328
00:10:11,680 --> 00:10:14,079
so let's look again at the setup of a

329
00:10:14,079 --> 00:10:15,600
containerized environment

330
00:10:15,600 --> 00:10:17,600
so you have the engine which as i've

331
00:10:17,600 --> 00:10:19,600
said like docker which as i've said

332
00:10:19,600 --> 00:10:20,959
doesn't really know how to set up

333
00:10:20,959 --> 00:10:22,640
containers and you have the runtime

334
00:10:22,640 --> 00:10:24,160
which really knows how to

335
00:10:24,160 --> 00:10:25,680
take configuration and set up a

336
00:10:25,680 --> 00:10:27,839
container so the engine responsibility

337
00:10:27,839 --> 00:10:29,120
here is to

338
00:10:29,120 --> 00:10:31,600
generate a secure configuration it will

339
00:10:31,600 --> 00:10:33,200
tell the runtime what restrictions to

340
00:10:33,200 --> 00:10:34,240
set up so

341
00:10:34,240 --> 00:10:36,720
which namespaces and which capabilities

342
00:10:36,720 --> 00:10:37,519
and so on

343
00:10:37,519 --> 00:10:38,720
and the runtime will take that

344
00:10:38,720 --> 00:10:42,000
configuration and apply it

345
00:10:42,000 --> 00:10:44,560
to create a container now when you're

346
00:10:44,560 --> 00:10:46,399
talking about how do you

347
00:10:46,399 --> 00:10:48,399
escape containers you're really talking

348
00:10:48,399 --> 00:10:49,920
about what issues

349
00:10:49,920 --> 00:10:52,720
uh could be indeed in this process so

350
00:10:52,720 --> 00:10:54,880
the first type of issue that could uh

351
00:10:54,880 --> 00:10:56,720
that could arise in this process is in

352
00:10:56,720 --> 00:10:58,320
the initialization of a

353
00:10:58,320 --> 00:11:00,399
of the containerized process you have a

354
00:11:00,399 --> 00:11:02,160
host process the runtime

355
00:11:02,160 --> 00:11:04,079
trying to use untrusted variables like

356
00:11:04,079 --> 00:11:06,079
like the container image and the command

357
00:11:06,079 --> 00:11:08,640
and to set up a containerized process

358
00:11:08,640 --> 00:11:10,000
that process is really

359
00:11:10,000 --> 00:11:12,720
uh that a procedure is really a

360
00:11:12,720 --> 00:11:13,680
complicated

361
00:11:13,680 --> 00:11:17,440
and crucial and a lot of the

362
00:11:17,440 --> 00:11:19,600
issues was found in that process for

363
00:11:19,600 --> 00:11:20,640
example

364
00:11:20,640 --> 00:11:22,079
there was an issue with the runtime

365
00:11:22,079 --> 00:11:24,880
exposing a briefly exposing host file

366
00:11:24,880 --> 00:11:25,760
descriptors

367
00:11:25,760 --> 00:11:27,120
to the container which the container

368
00:11:27,120 --> 00:11:29,120
could have used to break out and that

369
00:11:29,120 --> 00:11:31,200
issue really is a runtime issue

370
00:11:31,200 --> 00:11:33,920
because the runtime is the one in charge

371
00:11:33,920 --> 00:11:35,360
of setting up the container

372
00:11:35,360 --> 00:11:38,640
right and the second type of issue

373
00:11:38,640 --> 00:11:41,519
is really an engine issue where you at

374
00:11:41,519 --> 00:11:43,120
the end you you finish the initial

375
00:11:43,120 --> 00:11:44,880
initialization of the container

376
00:11:44,880 --> 00:11:46,320
and now you have a running container

377
00:11:46,320 --> 00:11:48,079
with a couple of restrictions

378
00:11:48,079 --> 00:11:50,240
applied to it but there could be a

379
00:11:50,240 --> 00:11:52,320
scenario where that container is simply

380
00:11:52,320 --> 00:11:53,760
not restricted enough

381
00:11:53,760 --> 00:11:56,880
right and that really points to a

382
00:11:56,880 --> 00:11:58,800
a problem with the container

383
00:11:58,800 --> 00:12:00,000
configuration

384
00:12:00,000 --> 00:12:01,760
and the restrictions supplied by the

385
00:12:01,760 --> 00:12:03,839
engine and because that that's a

386
00:12:03,839 --> 00:12:07,040
issue with the engine and it really it's

387
00:12:07,040 --> 00:12:08,959
it points to permissive engine defaults

388
00:12:08,959 --> 00:12:11,040
or perhaps to a new breakout techniques

389
00:12:11,040 --> 00:12:12,880
that wasn't discovered before

390
00:12:12,880 --> 00:12:14,880
and normally those are the two areas

391
00:12:14,880 --> 00:12:16,079
where you will hunt for

392
00:12:16,079 --> 00:12:19,120
issues and vulnerabilities in but

393
00:12:19,120 --> 00:12:21,360
when i came to look at qatar i noticed

394
00:12:21,360 --> 00:12:23,360
that it's quite a unique case

395
00:12:23,360 --> 00:12:26,079
because kata is a runtime that actually

396
00:12:26,079 --> 00:12:27,680
modifies the configuration

397
00:12:27,680 --> 00:12:29,760
uh received from the engine and the

398
00:12:29,760 --> 00:12:30,880
reason it does it

399
00:12:30,880 --> 00:12:33,040
is because it turns out that a

400
00:12:33,040 --> 00:12:35,360
configuration generated on the host

401
00:12:35,360 --> 00:12:38,160
need to be adjusted in order to be a

402
00:12:38,160 --> 00:12:38,800
valid

403
00:12:38,800 --> 00:12:41,440
a valid for use to deploy a container

404
00:12:41,440 --> 00:12:42,160
inside

405
00:12:42,160 --> 00:12:43,839
a different machine inside the virtual

406
00:12:43,839 --> 00:12:46,000
machine which has a different kernel a

407
00:12:46,000 --> 00:12:46,480
different

408
00:12:46,480 --> 00:12:50,320
set of emulated hardware and so on but

409
00:12:50,320 --> 00:12:52,639
that's really dangerous to do because

410
00:12:52,639 --> 00:12:53,680
container engines

411
00:12:53,680 --> 00:12:56,480
over the years of vulnerabilities have

412
00:12:56,480 --> 00:12:58,639
learned how to create a

413
00:12:58,639 --> 00:13:00,399
restricted enough configuration that

414
00:13:00,399 --> 00:13:02,160
isn't breakable so for us

415
00:13:02,160 --> 00:13:04,000
if we want to escape we can take a look

416
00:13:04,000 --> 00:13:05,760
at what qatar does and perhaps find

417
00:13:05,760 --> 00:13:07,279
issue with how it modifies the

418
00:13:07,279 --> 00:13:08,240
configuration

419
00:13:08,240 --> 00:13:10,399
and kata does a couple of things but the

420
00:13:10,399 --> 00:13:11,839
main things i want to focus

421
00:13:11,839 --> 00:13:14,560
on is that it discards a several c

422
00:13:14,560 --> 00:13:16,160
groups several control groups

423
00:13:16,160 --> 00:13:18,880
c groups and c groups are tied as i've

424
00:13:18,880 --> 00:13:19,519
said

425
00:13:19,519 --> 00:13:22,480
to hardware resources and because the

426
00:13:22,480 --> 00:13:24,240
host and the guest have a different set

427
00:13:24,240 --> 00:13:25,760
of hardware resources right the guests

428
00:13:25,760 --> 00:13:27,040
have an emulated set

429
00:13:27,040 --> 00:13:29,360
a virtualized set of hardware resources

430
00:13:29,360 --> 00:13:31,920
some c groups just don't make sense

431
00:13:31,920 --> 00:13:34,000
in the guest if you generate them on the

432
00:13:34,000 --> 00:13:36,000
host so

433
00:13:36,000 --> 00:13:38,959
for example a device group the host and

434
00:13:38,959 --> 00:13:40,959
the guests have different devices

435
00:13:40,959 --> 00:13:44,079
and you might think it's a bit extreme

436
00:13:44,079 --> 00:13:45,600
to just discard several

437
00:13:45,600 --> 00:13:48,320
several c groups but if you if i wanted

438
00:13:48,320 --> 00:13:50,079
to understand the reasoning behind it i

439
00:13:50,079 --> 00:13:51,680
think i think the reasoning is that

440
00:13:51,680 --> 00:13:54,480
ac groups are known to be mainly about a

441
00:13:54,480 --> 00:13:56,240
denying denial of service attacks

442
00:13:56,240 --> 00:13:57,839
preventing denial of service attack

443
00:13:57,839 --> 00:13:59,279
from the container to the underlying

444
00:13:59,279 --> 00:14:01,279
machine but because here the container

445
00:14:01,279 --> 00:14:03,600
runs inside the guest virtual machine

446
00:14:03,600 --> 00:14:05,279
it's no problem really if the container

447
00:14:05,279 --> 00:14:07,279
launches a denial of service attack

448
00:14:07,279 --> 00:14:10,000
against the guest right is is not it's

449
00:14:10,000 --> 00:14:12,320
only a health in itself only attacking

450
00:14:12,320 --> 00:14:15,519
his own sandbox he's not only closer to

451
00:14:15,519 --> 00:14:18,480
a gaining code execution on the host

452
00:14:18,480 --> 00:14:20,720
but the thing is c groups are mainly

453
00:14:20,720 --> 00:14:22,880
about preventing the knife service

454
00:14:22,880 --> 00:14:25,519
but some people forget that they're not

455
00:14:25,519 --> 00:14:26,639
only about that

456
00:14:26,639 --> 00:14:29,040
and one device one c group that is

457
00:14:29,040 --> 00:14:30,639
actually quite interesting

458
00:14:30,639 --> 00:14:32,399
which kata doesn't enforce is the

459
00:14:32,399 --> 00:14:33,839
devices group

460
00:14:33,839 --> 00:14:36,000
and let's have a look at what the device

461
00:14:36,000 --> 00:14:38,399
group does so the devices group

462
00:14:38,399 --> 00:14:40,959
restricts the container access to system

463
00:14:40,959 --> 00:14:41,680
devices

464
00:14:41,680 --> 00:14:44,320
quite simply and qatar doesn't enforce

465
00:14:44,320 --> 00:14:46,000
that c groups as i've said

466
00:14:46,000 --> 00:14:48,000
meaning that we inside the container

467
00:14:48,000 --> 00:14:50,560
have more access than usual

468
00:14:50,560 --> 00:14:53,519
to the devices of the underlying system

469
00:14:53,519 --> 00:14:54,560
and when you look and

470
00:14:54,560 --> 00:14:56,880
that system is the guest virtual machine

471
00:14:56,880 --> 00:14:58,560
and when you look at those devices and

472
00:14:58,560 --> 00:15:00,320
think what device could be

473
00:15:00,320 --> 00:15:02,240
interesting to us from the container

474
00:15:02,240 --> 00:15:03,760
well the guest how this is quite

475
00:15:03,760 --> 00:15:04,880
interesting right

476
00:15:04,880 --> 00:15:07,519
we in the container have a view of only

477
00:15:07,519 --> 00:15:09,440
a specific file system the container

478
00:15:09,440 --> 00:15:10,399
file system

479
00:15:10,399 --> 00:15:12,320
but if we gain access to the entire

480
00:15:12,320 --> 00:15:15,279
guest health disk we can now

481
00:15:15,279 --> 00:15:17,760
possibly manipulate it in order to gain

482
00:15:17,760 --> 00:15:19,120
code execution on the host

483
00:15:19,120 --> 00:15:22,639
right so how do you even access a hard

484
00:15:22,639 --> 00:15:23,120
disk

485
00:15:23,120 --> 00:15:26,000
in linux what and those type of devices

486
00:15:26,000 --> 00:15:27,680
are called block devices

487
00:15:27,680 --> 00:15:30,720
well you first need a way to refer to

488
00:15:30,720 --> 00:15:31,199
that

489
00:15:31,199 --> 00:15:33,839
a hard disk to the device and in linux

490
00:15:33,839 --> 00:15:35,519
everything is a file so of course

491
00:15:35,519 --> 00:15:38,320
you create a device file that refers to

492
00:15:38,320 --> 00:15:40,480
that block device or to that hard disk

493
00:15:40,480 --> 00:15:42,959
in linux every device is identified by

494
00:15:42,959 --> 00:15:45,120
two numbers you can see in the examples

495
00:15:45,120 --> 00:15:47,279
in the example here those are eight and

496
00:15:47,279 --> 00:15:50,240
one so you first use make node

497
00:15:50,240 --> 00:15:52,720
to create the device file uh referring

498
00:15:52,720 --> 00:15:53,680
to that device

499
00:15:53,680 --> 00:15:55,839
and then you mount the device file over

500
00:15:55,839 --> 00:15:57,279
some directory

501
00:15:57,279 --> 00:15:59,360
in your system and now when you interact

502
00:15:59,360 --> 00:16:00,720
with the files under the

503
00:16:00,720 --> 00:16:02,639
directory you are actually interacting

504
00:16:02,639 --> 00:16:04,079
with the hard disk right everything you

505
00:16:04,079 --> 00:16:05,360
do in the directory

506
00:16:05,360 --> 00:16:07,839
is propagated back to the hard disk and

507
00:16:07,839 --> 00:16:08,800
that's really the

508
00:16:08,800 --> 00:16:10,720
the easy way to interact with the file

509
00:16:10,720 --> 00:16:12,160
system

510
00:16:12,160 --> 00:16:14,639
but we that's actually not very useful

511
00:16:14,639 --> 00:16:16,079
for us in the container

512
00:16:16,079 --> 00:16:19,040
because the container in the container

513
00:16:19,040 --> 00:16:20,720
we have the make node capability which

514
00:16:20,720 --> 00:16:21,680
is required

515
00:16:21,680 --> 00:16:24,639
to to create the device file but we

516
00:16:24,639 --> 00:16:26,959
don't have the sys admin capability

517
00:16:26,959 --> 00:16:29,120
which from the name you you you may

518
00:16:29,120 --> 00:16:30,560
realize that it's good the containers

519
00:16:30,560 --> 00:16:32,399
don't have the sysadmin capability

520
00:16:32,399 --> 00:16:33,680
but because we don't have that

521
00:16:33,680 --> 00:16:35,759
capability we can't mount

522
00:16:35,759 --> 00:16:38,480
and below you can see a a a cutter

523
00:16:38,480 --> 00:16:40,079
container running under docker

524
00:16:40,079 --> 00:16:42,079
which tries to which can create the

525
00:16:42,079 --> 00:16:44,480
device file for the guesthouse but

526
00:16:44,480 --> 00:16:47,040
it can mount it so it seems like we're

527
00:16:47,040 --> 00:16:48,480
in a bit of a problem even though we

528
00:16:48,480 --> 00:16:48,880
should

529
00:16:48,880 --> 00:16:51,680
have more access to the devices other

530
00:16:51,680 --> 00:16:52,800
restrictions are still

531
00:16:52,800 --> 00:16:54,959
stopping us but there is actually

532
00:16:54,959 --> 00:16:56,399
another way

533
00:16:56,399 --> 00:16:59,920
to access devices in linux and that's by

534
00:16:59,920 --> 00:17:02,000
directly reading and writing to the

535
00:17:02,000 --> 00:17:03,759
device file so you don't even need to

536
00:17:03,759 --> 00:17:04,559
mount them

537
00:17:04,559 --> 00:17:07,359
and why why is that useful for example

538
00:17:07,359 --> 00:17:09,039
if the hard disk has a corrupted file

539
00:17:09,039 --> 00:17:10,880
system and you are not able to mount it

540
00:17:10,880 --> 00:17:11,679
correctly

541
00:17:11,679 --> 00:17:13,599
you might need some direct access to the

542
00:17:13,599 --> 00:17:15,520
device to try to fix things

543
00:17:15,520 --> 00:17:18,559
so there are actually a build

544
00:17:18,559 --> 00:17:21,039
tools like debug fs which you we can use

545
00:17:21,039 --> 00:17:22,240
inside the container

546
00:17:22,240 --> 00:17:24,079
to directly interact with the hard disk

547
00:17:24,079 --> 00:17:25,599
without needing to mount it

548
00:17:25,599 --> 00:17:27,359
and you can see in the example there

549
00:17:27,359 --> 00:17:29,200
that we can see the files on the hard

550
00:17:29,200 --> 00:17:31,039
disk and we have a great indication that

551
00:17:31,039 --> 00:17:32,720
that's really the guest style disc

552
00:17:32,720 --> 00:17:34,320
because when when we inspect the

553
00:17:34,320 --> 00:17:36,240
binaries in it we can see the cutter

554
00:17:36,240 --> 00:17:37,200
agent which we

555
00:17:37,200 --> 00:17:40,400
expect to run to be present on the guest

556
00:17:40,400 --> 00:17:42,320
and it's not only reading access to the

557
00:17:42,320 --> 00:17:43,679
how this is only also

558
00:17:43,679 --> 00:17:45,679
writing access so because we don't have

559
00:17:45,679 --> 00:17:46,720
devices group

560
00:17:46,720 --> 00:17:48,400
we can actually modify the guest hard

561
00:17:48,400 --> 00:17:50,400
disk from within the container

562
00:17:50,400 --> 00:17:53,440
so does that mean we broke out can we

563
00:17:53,440 --> 00:17:54,080
now just

564
00:17:54,080 --> 00:17:56,640
easily execute code on the guest well it

565
00:17:56,640 --> 00:17:58,480
turns out that it's not so easy

566
00:17:58,480 --> 00:18:00,799
and there are two mechanisms in a way

567
00:18:00,799 --> 00:18:02,880
the page question that the entry cache

568
00:18:02,880 --> 00:18:05,039
and because of those changes that we

569
00:18:05,039 --> 00:18:06,720
make at the device level

570
00:18:06,720 --> 00:18:08,559
may not really be apparent to a

571
00:18:08,559 --> 00:18:10,720
processor running on the guest

572
00:18:10,720 --> 00:18:14,000
so why is that in linux when you

573
00:18:14,000 --> 00:18:16,559
when a process interacts with a file

574
00:18:16,559 --> 00:18:18,080
linux will read it

575
00:18:18,080 --> 00:18:20,720
by reading it executing it or whatever

576
00:18:20,720 --> 00:18:22,559
linux will read that file from the hard

577
00:18:22,559 --> 00:18:23,280
disk right

578
00:18:23,280 --> 00:18:25,840
but that's an expensive operation so it

579
00:18:25,840 --> 00:18:26,960
will also keep

580
00:18:26,960 --> 00:18:29,919
a cache of that file content in the page

581
00:18:29,919 --> 00:18:30,880
cache

582
00:18:30,880 --> 00:18:32,960
so the next time a process access that

583
00:18:32,960 --> 00:18:34,720
file then linux doesn't have to go all

584
00:18:34,720 --> 00:18:35,840
the way to the hard disk

585
00:18:35,840 --> 00:18:38,160
and can simply access the page cache

586
00:18:38,160 --> 00:18:39,760
that's great for performance but it's

587
00:18:39,760 --> 00:18:40,960
pretty bad for us

588
00:18:40,960 --> 00:18:42,400
because we're in the container and we

589
00:18:42,400 --> 00:18:44,640
are directly writing to the hard disk

590
00:18:44,640 --> 00:18:46,720
so if we're in the container for example

591
00:18:46,720 --> 00:18:48,400
and we modify

592
00:18:48,400 --> 00:18:50,799
a sh on the hard disk and then some

593
00:18:50,799 --> 00:18:52,559
process on the guest tries to

594
00:18:52,559 --> 00:18:55,679
access a sh if a sage is already in the

595
00:18:55,679 --> 00:18:56,000
page

596
00:18:56,000 --> 00:18:57,919
cache and that process will see the

597
00:18:57,919 --> 00:18:59,039
original version

598
00:18:59,039 --> 00:19:01,679
of the sh from the page cache and not

599
00:19:01,679 --> 00:19:03,200
our malicious version

600
00:19:03,200 --> 00:19:05,440
on the hard disk and that's not good for

601
00:19:05,440 --> 00:19:07,039
us if we want to gain code execution on

602
00:19:07,039 --> 00:19:07,919
the guest

603
00:19:07,919 --> 00:19:10,400
to make things work the guest is pretty

604
00:19:10,400 --> 00:19:11,120
static

605
00:19:11,120 --> 00:19:13,919
and besides the cutter agent and systemd

606
00:19:13,919 --> 00:19:15,760
nothing really else really runs on it

607
00:19:15,760 --> 00:19:17,200
and it doesn't really invoke and

608
00:19:17,200 --> 00:19:18,559
interacts with files

609
00:19:18,559 --> 00:19:20,640
so it's even harder for us to gain code

610
00:19:20,640 --> 00:19:21,679
execution

611
00:19:21,679 --> 00:19:24,480
so how do you deal with that problem so

612
00:19:24,480 --> 00:19:26,240
as i've said the guest is static

613
00:19:26,240 --> 00:19:29,039
so and we can't expect it to just run in

614
00:19:29,039 --> 00:19:29,760
a new

615
00:19:29,760 --> 00:19:31,440
executable so we need to replace an

616
00:19:31,440 --> 00:19:32,960
already running executable

617
00:19:32,960 --> 00:19:34,559
so that's either the cutter agent or

618
00:19:34,559 --> 00:19:36,640
systemd but those as i've said are

619
00:19:36,640 --> 00:19:38,080
already loaded to the page

620
00:19:38,080 --> 00:19:41,280
cache so in order for us

621
00:19:41,280 --> 00:19:44,400
to you know in order for the uh

622
00:19:44,400 --> 00:19:46,400
for modification that we make to the

623
00:19:46,400 --> 00:19:48,320
hard disk to actually be apparent

624
00:19:48,320 --> 00:19:50,640
to guest processes we need to some way

625
00:19:50,640 --> 00:19:52,160
to force the guest kernel

626
00:19:52,160 --> 00:19:54,720
to free the page cache and how can we do

627
00:19:54,720 --> 00:19:55,280
it

628
00:19:55,280 --> 00:19:58,400
well the page cache uses memory that is

629
00:19:58,400 --> 00:19:59,600
currently unused

630
00:19:59,600 --> 00:20:02,159
but if a process wants that memory the

631
00:20:02,159 --> 00:20:04,080
kernel will give the process that memory

632
00:20:04,080 --> 00:20:05,520
because it will say okay

633
00:20:05,520 --> 00:20:07,919
later on i can just read it again from

634
00:20:07,919 --> 00:20:09,039
the hard disk

635
00:20:09,039 --> 00:20:12,240
and and right now that that memory is

636
00:20:12,240 --> 00:20:12,640
used

637
00:20:12,640 --> 00:20:15,039
is necessary by process so when the

638
00:20:15,039 --> 00:20:16,240
container can allocate

639
00:20:16,240 --> 00:20:19,280
small chunks of memory to a slowly chip

640
00:20:19,280 --> 00:20:20,400
away at the

641
00:20:20,400 --> 00:20:22,480
the page cache and the files in it until

642
00:20:22,480 --> 00:20:23,600
we can actually

643
00:20:23,600 --> 00:20:26,080
successfully clear cutter agent from the

644
00:20:26,080 --> 00:20:27,360
page page cache

645
00:20:27,360 --> 00:20:29,919
and now when something access the the

646
00:20:29,919 --> 00:20:31,120
cut agent binary

647
00:20:31,120 --> 00:20:33,520
it will must go to the hard disk so if

648
00:20:33,520 --> 00:20:34,159
it's still

649
00:20:34,159 --> 00:20:36,559
and not completely clear i'll try to

650
00:20:36,559 --> 00:20:38,320
explain it by showing the how the attack

651
00:20:38,320 --> 00:20:39,200
will work

652
00:20:39,200 --> 00:20:42,559
so the attack the scenario is that we

653
00:20:42,559 --> 00:20:44,159
are in a malicious container right

654
00:20:44,159 --> 00:20:46,080
and we want to gain code execution on

655
00:20:46,080 --> 00:20:47,200
the guest

656
00:20:47,200 --> 00:20:49,679
so what we do we first override the

657
00:20:49,679 --> 00:20:51,760
cutter agent binary on the hard disk

658
00:20:51,760 --> 00:20:53,679
but nothing really really happens

659
00:20:53,679 --> 00:20:56,159
because the cut agent process the memory

660
00:20:56,159 --> 00:20:57,440
is mapped to the

661
00:20:57,440 --> 00:20:58,880
version in the page cache which isn't

662
00:20:58,880 --> 00:21:01,120
malicious so in order for us

663
00:21:01,120 --> 00:21:03,440
version to be propagated to the guest to

664
00:21:03,440 --> 00:21:04,320
the process

665
00:21:04,320 --> 00:21:06,720
we need we mel we allocate small chunks

666
00:21:06,720 --> 00:21:07,360
of memory

667
00:21:07,360 --> 00:21:09,120
in order to clear the cutter agent from

668
00:21:09,120 --> 00:21:11,120
the page cache and now

669
00:21:11,120 --> 00:21:12,880
when the execution passes back to the

670
00:21:12,880 --> 00:21:15,280
cataloging process the kernel realizes

671
00:21:15,280 --> 00:21:17,919
okay wait i need to get the version i

672
00:21:17,919 --> 00:21:19,440
need to get cutter agent from the hard

673
00:21:19,440 --> 00:21:20,480
disk again

674
00:21:20,480 --> 00:21:22,240
and now when it does it it fetches the

675
00:21:22,240 --> 00:21:24,240
malicious version that we've put in

676
00:21:24,240 --> 00:21:27,600
we've put in the hard disk so and now

677
00:21:27,600 --> 00:21:30,080
the cutter agent process maps to our

678
00:21:30,080 --> 00:21:31,280
malicious version

679
00:21:31,280 --> 00:21:33,520
and it runs the code that we wrote to

680
00:21:33,520 --> 00:21:34,640
the guest hard disk

681
00:21:34,640 --> 00:21:37,120
so it seems like we can get a guest code

682
00:21:37,120 --> 00:21:38,320
execution

683
00:21:38,320 --> 00:21:41,039
but the truth is it's it's not really

684
00:21:41,039 --> 00:21:42,480
that easy

685
00:21:42,480 --> 00:21:44,799
because replacing a process that re

686
00:21:44,799 --> 00:21:46,159
replacing the binary

687
00:21:46,159 --> 00:21:49,440
that the process is running while it is

688
00:21:49,440 --> 00:21:50,080
running

689
00:21:50,080 --> 00:21:51,760
it's quite tricky because you can

690
00:21:51,760 --> 00:21:53,280
imagine that uh the pro

691
00:21:53,280 --> 00:21:55,280
the cutter agent process is now running

692
00:21:55,280 --> 00:21:56,640
a specific op code

693
00:21:56,640 --> 00:21:59,280
in a specific function and now when we

694
00:21:59,280 --> 00:22:00,960
replace the executable that it is

695
00:22:00,960 --> 00:22:02,320
running we don't know

696
00:22:02,320 --> 00:22:04,320
when that switch will happen so we don't

697
00:22:04,320 --> 00:22:06,880
know where in the new binary

698
00:22:06,880 --> 00:22:08,880
where it will end which op code it will

699
00:22:08,880 --> 00:22:10,480
now execute in the new binary

700
00:22:10,480 --> 00:22:12,720
so it's really hard to get the stable

701
00:22:12,720 --> 00:22:14,320
code execution using that

702
00:22:14,320 --> 00:22:16,080
and the most likely thing that will

703
00:22:16,080 --> 00:22:17,840
happen is that the cut agent process

704
00:22:17,840 --> 00:22:19,280
will just crash

705
00:22:19,280 --> 00:22:21,280
so that's not good for us we want stable

706
00:22:21,280 --> 00:22:23,120
code execution

707
00:22:23,120 --> 00:22:25,440
so instead of the of the cat agent

708
00:22:25,440 --> 00:22:27,280
process crushing being a bug over

709
00:22:27,280 --> 00:22:29,039
exploit we actually make it a feature of

710
00:22:29,039 --> 00:22:32,159
over exploit and we intentionally crash

711
00:22:32,159 --> 00:22:34,400
the cart agent binary so how do we do it

712
00:22:34,400 --> 00:22:36,400
we intentionally override the catagen

713
00:22:36,400 --> 00:22:38,720
binary on hardisk with garbage data

714
00:22:38,720 --> 00:22:41,919
but we also override another binary

715
00:22:41,919 --> 00:22:43,600
system the shutdown with the actual

716
00:22:43,600 --> 00:22:45,200
malicious code that we want to run on

717
00:22:45,200 --> 00:22:46,159
the guest

718
00:22:46,159 --> 00:22:47,919
and then we follow the same procedure as

719
00:22:47,919 --> 00:22:49,440
before we allocate small chunks of

720
00:22:49,440 --> 00:22:50,080
memory

721
00:22:50,080 --> 00:22:51,760
to clear the cut agent from the page

722
00:22:51,760 --> 00:22:54,000
cache and now when execution passes

723
00:22:54,000 --> 00:22:55,600
back to the cart asian process on the

724
00:22:55,600 --> 00:22:58,799
guest it the kernel must read

725
00:22:58,799 --> 00:23:01,520
the garbage cut agent version from the

726
00:23:01,520 --> 00:23:02,080
disk

727
00:23:02,080 --> 00:23:04,559
from the hard disk and the cataloging

728
00:23:04,559 --> 00:23:06,480
process now maps to the version its

729
00:23:06,480 --> 00:23:08,240
memory now maps to the version

730
00:23:08,240 --> 00:23:09,919
and it of course crashes right because

731
00:23:09,919 --> 00:23:12,400
it now maps to garbage data

732
00:23:12,400 --> 00:23:14,720
but now once the cutter agent process

733
00:23:14,720 --> 00:23:16,320
crashes a

734
00:23:16,320 --> 00:23:18,640
system this shutdown sequence is in is

735
00:23:18,640 --> 00:23:19,520
started

736
00:23:19,520 --> 00:23:20,880
which eventually as you might have

737
00:23:20,880 --> 00:23:23,280
guessed calls the shutdown binary

738
00:23:23,280 --> 00:23:25,200
now the shadow binary was never executed

739
00:23:25,200 --> 00:23:27,360
before it is only

740
00:23:27,360 --> 00:23:29,360
accessed when you want to shut down the

741
00:23:29,360 --> 00:23:31,280
machine and therefore it is not in the

742
00:23:31,280 --> 00:23:33,200
page cache and will need to be

743
00:23:33,200 --> 00:23:36,320
directly read from the disk so

744
00:23:36,320 --> 00:23:39,120
now the malicious version of the

745
00:23:39,120 --> 00:23:40,559
shutdown binary that we've put in the

746
00:23:40,559 --> 00:23:41,360
hard disk

747
00:23:41,360 --> 00:23:43,919
will start executing on the guest and it

748
00:23:43,919 --> 00:23:45,919
starts executing from the

749
00:23:45,919 --> 00:23:48,640
like a normal process and not a switch

750
00:23:48,640 --> 00:23:50,000
in the middle of execution so

751
00:23:50,000 --> 00:23:52,000
that we can actually get stable code

752
00:23:52,000 --> 00:23:54,080
execution by doing that

753
00:23:54,080 --> 00:23:56,080
so let's see of them of how does that

754
00:23:56,080 --> 00:23:58,640
work in the demo the malicious

755
00:23:58,640 --> 00:24:00,400
the malicious shutdown binary will

756
00:24:00,400 --> 00:24:02,000
simply create a file in the shared

757
00:24:02,000 --> 00:24:02,960
directory

758
00:24:02,960 --> 00:24:04,480
which is supposed to be only accessible

759
00:24:04,480 --> 00:24:06,000
from the guest and not from inside the

760
00:24:06,000 --> 00:24:06,960
container

761
00:24:06,960 --> 00:24:09,279
and just and we it just creates that

762
00:24:09,279 --> 00:24:10,240
file so we can

763
00:24:10,240 --> 00:24:14,080
see that the the exploit works so

764
00:24:14,080 --> 00:24:18,720
let's see the export in action

765
00:24:18,720 --> 00:24:21,039
so i'm going to show you the code of the

766
00:24:21,039 --> 00:24:22,720
shutdown binary that i'm going to write

767
00:24:22,720 --> 00:24:25,520
run on the guest and the code is quite

768
00:24:25,520 --> 00:24:27,440
simple as i said it just creates

769
00:24:27,440 --> 00:24:30,480
a a binary in the shared a file in the

770
00:24:30,480 --> 00:24:32,000
shared directory called guess is now

771
00:24:32,000 --> 00:24:33,440
malicious so it's quite simple

772
00:24:33,440 --> 00:24:35,679
and then it slips so we can see inspect

773
00:24:35,679 --> 00:24:37,520
the shared directory

774
00:24:37,520 --> 00:24:39,520
so we are now running the exploit with

775
00:24:39,520 --> 00:24:41,120
docker under kata and the thing

776
00:24:41,120 --> 00:24:43,279
first thing the exploit does is tell us

777
00:24:43,279 --> 00:24:44,799
this is my container id

778
00:24:44,799 --> 00:24:46,320
so that's where the share directory on

779
00:24:46,320 --> 00:24:47,840
the host side should be

780
00:24:47,840 --> 00:24:49,679
and we can see that the shared directory

781
00:24:49,679 --> 00:24:51,600
has the normal contents everything is

782
00:24:51,600 --> 00:24:52,320
okay

783
00:24:52,320 --> 00:24:55,760
but now when the container continues it

784
00:24:55,760 --> 00:24:57,919
gets create a device file for the guest

785
00:24:57,919 --> 00:24:59,919
hard disk and it replaces the shutdown

786
00:24:59,919 --> 00:25:00,799
binary with the

787
00:25:00,799 --> 00:25:03,200
code that i've showed you and also swaps

788
00:25:03,200 --> 00:25:05,120
the kata agent binary on the guest hard

789
00:25:05,120 --> 00:25:05,600
disk

790
00:25:05,600 --> 00:25:07,600
and with garbage data nothing really

791
00:25:07,600 --> 00:25:08,880
happens now right

792
00:25:08,880 --> 00:25:10,320
because the qatar agent is still in the

793
00:25:10,320 --> 00:25:13,600
page cache but when we allocate

794
00:25:13,600 --> 00:25:15,520
enough memory we will actually crash the

795
00:25:15,520 --> 00:25:18,000
cutter agent causing our shutdown

796
00:25:18,000 --> 00:25:20,000
process to start running and we can now

797
00:25:20,000 --> 00:25:21,120
see that

798
00:25:21,120 --> 00:25:24,000
it indeed it ran on the guest and it

799
00:25:24,000 --> 00:25:25,919
created the file that we expected

800
00:25:25,919 --> 00:25:29,120
so that's great

801
00:25:29,120 --> 00:25:32,240
and we got a way to break out of the

802
00:25:32,240 --> 00:25:34,240
container and execute code on the guest

803
00:25:34,240 --> 00:25:36,559
a breakout technique that exploits a

804
00:25:36,559 --> 00:25:38,559
direct device access that exploits the

805
00:25:38,559 --> 00:25:39,520
lack of c groups

806
00:25:39,520 --> 00:25:41,360
and it really shows you if you mess

807
00:25:41,360 --> 00:25:42,720
around and modify containers

808
00:25:42,720 --> 00:25:44,000
configuration

809
00:25:44,000 --> 00:25:45,840
you better be only adding restrictions

810
00:25:45,840 --> 00:25:47,279
you you you

811
00:25:47,279 --> 00:25:50,240
you don't really know what other effects

812
00:25:50,240 --> 00:25:51,039
removing

813
00:25:51,039 --> 00:25:53,440
that might happen if you remove a

814
00:25:53,440 --> 00:25:54,799
certain restriction

815
00:25:54,799 --> 00:25:56,799
researchers might find a way to exploit

816
00:25:56,799 --> 00:25:58,559
that to break out

817
00:25:58,559 --> 00:26:00,400
now the container does need the make

818
00:26:00,400 --> 00:26:02,720
note capability in order to

819
00:26:02,720 --> 00:26:05,120
exploit this issue but that's default in

820
00:26:05,120 --> 00:26:06,480
most places and of course

821
00:26:06,480 --> 00:26:09,279
this issue received the cv so the next

822
00:26:09,279 --> 00:26:10,720
thing that we want to do is to

823
00:26:10,720 --> 00:26:12,640
escape the virtual machine and that will

824
00:26:12,640 --> 00:26:14,320
actually be a bit easier

825
00:26:14,320 --> 00:26:16,480
so let's talk about the attack surface

826
00:26:16,480 --> 00:26:17,760
of the virtual machine

827
00:26:17,760 --> 00:26:20,480
so first of all the cutter runtime is a

828
00:26:20,480 --> 00:26:22,080
process running on the host

829
00:26:22,080 --> 00:26:24,000
and it passes messages from the qatar

830
00:26:24,000 --> 00:26:25,440
agent so if there's a vulnerability in

831
00:26:25,440 --> 00:26:27,200
the qatar run time

832
00:26:27,200 --> 00:26:28,720
a malicious cutter agent might be able

833
00:26:28,720 --> 00:26:31,039
to exploit that and gain code execution

834
00:26:31,039 --> 00:26:32,880
but qatar runtime is written in golang

835
00:26:32,880 --> 00:26:34,320
which is memory safe and

836
00:26:34,320 --> 00:26:36,080
none of those messages really are that

837
00:26:36,080 --> 00:26:37,679
interesting so

838
00:26:37,679 --> 00:26:40,480
that's really not relevant another thing

839
00:26:40,480 --> 00:26:42,000
that could happen is the issue with the

840
00:26:42,000 --> 00:26:43,279
vulnerability in the virtual machine

841
00:26:43,279 --> 00:26:44,720
monitor right which is actually the

842
00:26:44,720 --> 00:26:46,000
boundary between the

843
00:26:46,000 --> 00:26:48,640
a guest virtual machine and the host but

844
00:26:48,640 --> 00:26:49,679
we'll uh

845
00:26:49,679 --> 00:26:52,880
not talk about that for for for now

846
00:26:52,880 --> 00:26:54,240
what i really want to talk about is the

847
00:26:54,240 --> 00:26:56,159
shared directory between the

848
00:26:56,159 --> 00:26:57,600
host and the guest because it's quite an

849
00:26:57,600 --> 00:26:59,360
interesting of an attack surface

850
00:26:59,360 --> 00:27:02,080
and the cutter runtime on the whole side

851
00:27:02,080 --> 00:27:03,520
operates on the files in the shared

852
00:27:03,520 --> 00:27:04,480
directory

853
00:27:04,480 --> 00:27:06,880
but the guest can control those files

854
00:27:06,880 --> 00:27:08,400
just as much as the host right it's a

855
00:27:08,400 --> 00:27:09,600
shared directory

856
00:27:09,600 --> 00:27:11,919
meaning that we're in the get in the get

857
00:27:11,919 --> 00:27:13,760
in in a malicious guest

858
00:27:13,760 --> 00:27:15,679
we can manipulate the file in the shared

859
00:27:15,679 --> 00:27:16,799
directory in order to

860
00:27:16,799 --> 00:27:19,360
maybe affect the catalog time running on

861
00:27:19,360 --> 00:27:20,559
the hostess loot

862
00:27:20,559 --> 00:27:22,720
to do some things that he doesn't expect

863
00:27:22,720 --> 00:27:24,640
and one of the most interesting things

864
00:27:24,640 --> 00:27:26,320
that's done with the shared directory

865
00:27:26,320 --> 00:27:28,799
is that it is used to deliver the image

866
00:27:28,799 --> 00:27:29,600
to the guest

867
00:27:29,600 --> 00:27:32,960
so let's see how does that work so

868
00:27:32,960 --> 00:27:34,720
when you're when the guest virtual

869
00:27:34,720 --> 00:27:36,880
machine is started cataran time bind

870
00:27:36,880 --> 00:27:37,360
mounts

871
00:27:37,360 --> 00:27:38,640
the container image to the shell

872
00:27:38,640 --> 00:27:40,640
directory then the container starts

873
00:27:40,640 --> 00:27:42,640
running inside the guest at some point

874
00:27:42,640 --> 00:27:44,480
it terminates inside the guest and then

875
00:27:44,480 --> 00:27:45,919
the cutter runtime unmounts the

876
00:27:45,919 --> 00:27:47,039
container image

877
00:27:47,039 --> 00:27:49,279
from the shared directory so that seems

878
00:27:49,279 --> 00:27:50,480
quite reasonable right

879
00:27:50,480 --> 00:27:52,880
but the problem here is that both mount

880
00:27:52,880 --> 00:27:54,480
and unmount operations

881
00:27:54,480 --> 00:27:57,039
follow symlinks so in the guest meaning

882
00:27:57,039 --> 00:27:58,880
that a malicious guest could

883
00:27:58,880 --> 00:28:00,399
place sim links inside the shared

884
00:28:00,399 --> 00:28:02,320
directory and cause the

885
00:28:02,320 --> 00:28:05,279
qatar run time to target other things on

886
00:28:05,279 --> 00:28:06,799
the host

887
00:28:06,799 --> 00:28:09,120
that are not in the show directory so

888
00:28:09,120 --> 00:28:10,799
it's really easier to see it

889
00:28:10,799 --> 00:28:12,720
in action so let's start actually with

890
00:28:12,720 --> 00:28:14,320
the unmount redirection because that's

891
00:28:14,320 --> 00:28:15,760
easier to understand

892
00:28:15,760 --> 00:28:17,919
so that's how the attack looks we are in

893
00:28:17,919 --> 00:28:19,520
the malicious container and we somehow

894
00:28:19,520 --> 00:28:20,720
broken up to the guest

895
00:28:20,720 --> 00:28:22,320
maybe using the technique that i've

896
00:28:22,320 --> 00:28:24,480
showed earlier and now from inside the

897
00:28:24,480 --> 00:28:25,840
guest we can create

898
00:28:25,840 --> 00:28:28,720
a sim link when we where we know in the

899
00:28:28,720 --> 00:28:29,279
shared

900
00:28:29,279 --> 00:28:31,440
way where we know the qatar run time

901
00:28:31,440 --> 00:28:34,559
will unmount we'll try to unmount

902
00:28:34,559 --> 00:28:36,799
and then we we can actually kill the

903
00:28:36,799 --> 00:28:37,760
container

904
00:28:37,760 --> 00:28:40,480
in order to trigger the cataract and to

905
00:28:40,480 --> 00:28:41,919
unmount

906
00:28:41,919 --> 00:28:43,840
that path in the shell directory and now

907
00:28:43,840 --> 00:28:45,440
when it does that operation

908
00:28:45,440 --> 00:28:48,640
it actually is redirected

909
00:28:48,640 --> 00:28:51,760
to a target of the guest choosing and

910
00:28:51,760 --> 00:28:53,440
that's true a really easy way to create

911
00:28:53,440 --> 00:28:55,279
a denial of service on the host because

912
00:28:55,279 --> 00:28:57,200
of the because of the how the qatar run

913
00:28:57,200 --> 00:28:59,440
time does the unmount operations

914
00:28:59,440 --> 00:29:02,000
uh if we tell it if we create a siblings

915
00:29:02,000 --> 00:29:03,520
that points to

916
00:29:03,520 --> 00:29:05,679
the root directory it will actually

917
00:29:05,679 --> 00:29:07,840
unmount all mount points underneath the

918
00:29:07,840 --> 00:29:09,520
directory making the host

919
00:29:09,520 --> 00:29:11,919
very unusable and not able to run any

920
00:29:11,919 --> 00:29:14,399
container

921
00:29:14,720 --> 00:29:18,480
so let's see a demo for this attack

922
00:29:20,720 --> 00:29:23,679
so first we will inspect the mount

923
00:29:23,679 --> 00:29:25,200
points on the hose see that everything

924
00:29:25,200 --> 00:29:27,120
is fine and then we will run a container

925
00:29:27,120 --> 00:29:27,440
that

926
00:29:27,440 --> 00:29:31,120
exploits both the container to gas

927
00:29:31,120 --> 00:29:32,480
breakout and then the unmount

928
00:29:32,480 --> 00:29:33,840
redirection vulnerability

929
00:29:33,840 --> 00:29:36,720
and it will target the root directory in

930
00:29:36,720 --> 00:29:39,039
its attack in its attack

931
00:29:39,039 --> 00:29:41,760
and once the container is taken down we

932
00:29:41,760 --> 00:29:43,200
can see that

933
00:29:43,200 --> 00:29:44,720
those mount points don't contain

934
00:29:44,720 --> 00:29:46,240
anything anymore on the host

935
00:29:46,240 --> 00:29:48,240
and if we try to do other things like

936
00:29:48,240 --> 00:29:49,600
run a container you can see that the

937
00:29:49,600 --> 00:29:51,600
host is really unusable and you can't

938
00:29:51,600 --> 00:29:52,399
really

939
00:29:52,399 --> 00:29:55,520
use it uh to do anything so that's in

940
00:29:55,520 --> 00:29:56,960
host denial of service

941
00:29:56,960 --> 00:29:59,679
and that's actually a a very nice moment

942
00:29:59,679 --> 00:30:00,399
for us

943
00:30:00,399 --> 00:30:02,480
because we got the first effect from the

944
00:30:02,480 --> 00:30:04,960
container all the way up to the host

945
00:30:04,960 --> 00:30:07,919
and the first sort of a sandbox breakout

946
00:30:07,919 --> 00:30:09,760
and a denial of services is nice right

947
00:30:09,760 --> 00:30:11,919
but we want to gain code execution

948
00:30:11,919 --> 00:30:14,399
so let's look at the mount redirection

949
00:30:14,399 --> 00:30:16,320
you can also redirect

950
00:30:16,320 --> 00:30:17,919
not only the unmount operation of the

951
00:30:17,919 --> 00:30:19,600
image but also the mount operation of

952
00:30:19,600 --> 00:30:20,240
the image

953
00:30:20,240 --> 00:30:22,240
and that's more interesting because the

954
00:30:22,240 --> 00:30:24,640
image as we as i've said kata is used to

955
00:30:24,640 --> 00:30:26,880
run untrusted images so the image

956
00:30:26,880 --> 00:30:28,960
possibly is malicious so let's see how

957
00:30:28,960 --> 00:30:30,880
that attack will look like

958
00:30:30,880 --> 00:30:33,279
so we are assuming that the kata agent

959
00:30:33,279 --> 00:30:34,960
now on the gas is malicious

960
00:30:34,960 --> 00:30:36,799
so the catalan time will tell it we're

961
00:30:36,799 --> 00:30:38,640
about to create the sandbox that's the

962
00:30:38,640 --> 00:30:39,600
sandbox id

963
00:30:39,600 --> 00:30:41,520
and now using that message the qatar

964
00:30:41,520 --> 00:30:42,720
engine can know

965
00:30:42,720 --> 00:30:44,880
where in the shell directory the cataran

966
00:30:44,880 --> 00:30:46,480
time is about to bind mount

967
00:30:46,480 --> 00:30:48,799
a the container image and it can create

968
00:30:48,799 --> 00:30:50,480
a sim link at that path

969
00:30:50,480 --> 00:30:52,640
that will actually be followed by the

970
00:30:52,640 --> 00:30:53,679
catalog time

971
00:30:53,679 --> 00:30:55,279
when it tries to bind the container

972
00:30:55,279 --> 00:30:57,200
image and now that untrusted

973
00:30:57,200 --> 00:30:59,440
possibly malicious container image can

974
00:30:59,440 --> 00:31:00,720
be will be mounted

975
00:31:00,720 --> 00:31:03,440
over a path on the host that the k that

976
00:31:03,440 --> 00:31:04,799
the guest decides on

977
00:31:04,799 --> 00:31:07,840
so and there's those are the several

978
00:31:07,840 --> 00:31:10,480
very interesting paths that the guests

979
00:31:10,480 --> 00:31:12,640
could they choose like slash bin or

980
00:31:12,640 --> 00:31:15,200
slash lib which will allow a pretty easy

981
00:31:15,200 --> 00:31:16,320
code execution

982
00:31:16,320 --> 00:31:19,200
on the host but the problem with this

983
00:31:19,200 --> 00:31:19,679
attack

984
00:31:19,679 --> 00:31:22,720
that is that we assumed that the kata

985
00:31:22,720 --> 00:31:24,720
agent is compromising that the guest is

986
00:31:24,720 --> 00:31:25,519
malicious

987
00:31:25,519 --> 00:31:27,279
even before the container starts running

988
00:31:27,279 --> 00:31:29,200
on the guest right because

989
00:31:29,200 --> 00:31:31,679
if if it's before the container image is

990
00:31:31,679 --> 00:31:32,799
bind mounted

991
00:31:32,799 --> 00:31:34,720
to the shell directory then of course

992
00:31:34,720 --> 00:31:36,080
the container isn't

993
00:31:36,080 --> 00:31:39,200
running on the guest so we actually need

994
00:31:39,200 --> 00:31:40,960
we actually need a way to compromise the

995
00:31:40,960 --> 00:31:42,720
guest before the container runs

996
00:31:42,720 --> 00:31:44,240
and we don't have a way to do that right

997
00:31:44,240 --> 00:31:46,080
now right we only have a way to

998
00:31:46,080 --> 00:31:47,840
get gain code execution on the guest

999
00:31:47,840 --> 00:31:49,440
from the container

1000
00:31:49,440 --> 00:31:52,159
and that task so in order to do that we

1001
00:31:52,159 --> 00:31:54,240
look at cloud hypervisor

1002
00:31:54,240 --> 00:31:55,919
and an issue and vulnerability that i

1003
00:31:55,919 --> 00:31:57,840
found in how qatar uses it

1004
00:31:57,840 --> 00:32:00,240
so cloud hypervisor to remind you is one

1005
00:32:00,240 --> 00:32:01,919
of the free virtual machines

1006
00:32:01,919 --> 00:32:03,760
monitor virtual machine monitor options

1007
00:32:03,760 --> 00:32:06,559
of qatar and when i tried the container

1008
00:32:06,559 --> 00:32:07,200
to guest

1009
00:32:07,200 --> 00:32:09,519
a breakout on a cutter with cloud

1010
00:32:09,519 --> 00:32:10,480
hypervisor

1011
00:32:10,480 --> 00:32:12,960
i noticed that kata stopped broken after

1012
00:32:12,960 --> 00:32:14,000
that i couldn't run

1013
00:32:14,000 --> 00:32:16,559
any container and when i inspected the

1014
00:32:16,559 --> 00:32:18,320
virtual machine image i saw that the

1015
00:32:18,320 --> 00:32:19,279
kata agent

1016
00:32:19,279 --> 00:32:22,000
a binary on that on the virtual machine

1017
00:32:22,000 --> 00:32:24,559
image actually contained garbage data

1018
00:32:24,559 --> 00:32:26,080
and that's really concerning because

1019
00:32:26,080 --> 00:32:27,679
that was the garbage data that i wrote

1020
00:32:27,679 --> 00:32:29,200
to hard disk on the

1021
00:32:29,200 --> 00:32:32,880
a from the container meaning that

1022
00:32:32,880 --> 00:32:35,440
from one con from in one guest any

1023
00:32:35,440 --> 00:32:37,200
changes that we make to the guest hard

1024
00:32:37,200 --> 00:32:37,679
disk

1025
00:32:37,679 --> 00:32:40,640
under cloud hypervisor are propagated to

1026
00:32:40,640 --> 00:32:43,279
the virtual machine image on the host

1027
00:32:43,279 --> 00:32:45,519
meaning that one guest can control the

1028
00:32:45,519 --> 00:32:46,799
hard disk of all

1029
00:32:46,799 --> 00:32:49,120
future guests and because all virtual

1030
00:32:49,120 --> 00:32:50,960
machine monitors use the same virtual

1031
00:32:50,960 --> 00:32:52,799
machine image to set up the

1032
00:32:52,799 --> 00:32:55,120
guest this means that one guest can

1033
00:32:55,120 --> 00:32:56,399
control

1034
00:32:56,399 --> 00:32:58,799
every future guest regardless of what

1035
00:32:58,799 --> 00:33:00,159
virtual machine monitor

1036
00:33:00,159 --> 00:33:01,919
it uses and that's really bad for

1037
00:33:01,919 --> 00:33:03,360
multi-tenancy right

1038
00:33:03,360 --> 00:33:05,840
and beside from being a pretty severe

1039
00:33:05,840 --> 00:33:07,600
issue by itself that one guest can

1040
00:33:07,600 --> 00:33:08,320
control

1041
00:33:08,320 --> 00:33:10,880
of all future guests it's also a way for

1042
00:33:10,880 --> 00:33:11,519
us

1043
00:33:11,519 --> 00:33:14,720
uh to gain code execution on the host

1044
00:33:14,720 --> 00:33:16,799
because we now can exploit the monthly

1045
00:33:16,799 --> 00:33:18,240
direction right

1046
00:33:18,240 --> 00:33:20,159
we needed a way to for the guests to be

1047
00:33:20,159 --> 00:33:21,919
compromised even before the container

1048
00:33:21,919 --> 00:33:22,559
runs

1049
00:33:22,559 --> 00:33:26,399
but if we have a way to compromise the a

1050
00:33:26,399 --> 00:33:29,440
the virtual machine image that means

1051
00:33:29,440 --> 00:33:31,039
that the guest can be malicious from the

1052
00:33:31,039 --> 00:33:31,519
moment

1053
00:33:31,519 --> 00:33:34,480
it boots right so we can it can actually

1054
00:33:34,480 --> 00:33:35,519
create the malicious

1055
00:33:35,519 --> 00:33:37,919
symlink before the container is started

1056
00:33:37,919 --> 00:33:38,640
so

1057
00:33:38,640 --> 00:33:41,120
if it's still not that clear let's see

1058
00:33:41,120 --> 00:33:42,960
how that full attack will look like so

1059
00:33:42,960 --> 00:33:44,720
we are now seeing a full container to

1060
00:33:44,720 --> 00:33:45,279
host

1061
00:33:45,279 --> 00:33:47,600
code execution it will require the

1062
00:33:47,600 --> 00:33:49,600
victim to run our container

1063
00:33:49,600 --> 00:33:52,240
twice on their system but that's a

1064
00:33:52,240 --> 00:33:52,880
pretty

1065
00:33:52,880 --> 00:33:56,640
acceptable expect that's pretty uh

1066
00:33:56,640 --> 00:33:59,840
a pretty normal uh requirement because

1067
00:33:59,840 --> 00:34:01,600
most people an automated system if the

1068
00:34:01,600 --> 00:34:03,760
first container crashes it will just try

1069
00:34:03,760 --> 00:34:05,120
to run it again

1070
00:34:05,120 --> 00:34:07,840
so let's see how it works the first the

1071
00:34:07,840 --> 00:34:09,359
first time the malicious container

1072
00:34:09,359 --> 00:34:12,079
is executed is executed under cloud

1073
00:34:12,079 --> 00:34:13,119
hypervisor

1074
00:34:13,119 --> 00:34:16,079
and it uses the direct device access

1075
00:34:16,079 --> 00:34:17,440
vulnerability that we found

1076
00:34:17,440 --> 00:34:19,520
to change override the cart agent binary

1077
00:34:19,520 --> 00:34:20,719
on the hard disk with a malicious

1078
00:34:20,719 --> 00:34:21,599
version

1079
00:34:21,599 --> 00:34:23,040
now because we are running undercloud

1080
00:34:23,040 --> 00:34:25,280
hypervisor that malicious version is

1081
00:34:25,280 --> 00:34:25,839
going to be

1082
00:34:25,839 --> 00:34:27,839
propagated and committed to the virtual

1083
00:34:27,839 --> 00:34:31,918
machine image meaning that the next time

1084
00:34:31,918 --> 00:34:35,359
a guest will be run it will run with our

1085
00:34:35,359 --> 00:34:38,239
malicious qatar agent right from the

1086
00:34:38,239 --> 00:34:39,520
moment it boots

1087
00:34:39,520 --> 00:34:41,199
so now that malicious cutter agent on

1088
00:34:41,199 --> 00:34:42,560
the second container run

1089
00:34:42,560 --> 00:34:45,040
can exploit the mount redirection issue

1090
00:34:45,040 --> 00:34:46,399
create the sim link

1091
00:34:46,399 --> 00:34:49,520
and redirect our malicious image to

1092
00:34:49,520 --> 00:34:51,280
whenever on the host we want

1093
00:34:51,280 --> 00:34:53,520
to gain code execution on the host so

1094
00:34:53,520 --> 00:34:54,480
let's see a

1095
00:34:54,480 --> 00:34:57,839
demo for that attack

1096
00:35:01,200 --> 00:35:04,079
so we will be trying to mount the

1097
00:35:04,079 --> 00:35:06,160
container image over slash bin on the

1098
00:35:06,160 --> 00:35:07,760
host and we can see that slash bin

1099
00:35:07,760 --> 00:35:11,359
is completely normal right now

1100
00:35:14,240 --> 00:35:16,800
so we'll run the container under kata

1101
00:35:16,800 --> 00:35:18,400
with cloud hypervisor and the first

1102
00:35:18,400 --> 00:35:19,440
container

1103
00:35:19,440 --> 00:35:22,400
will replace the qatar agent uh the kite

1104
00:35:22,400 --> 00:35:23,680
agent binary on the

1105
00:35:23,680 --> 00:35:26,640
virtual machine image exploiting a the

1106
00:35:26,640 --> 00:35:29,359
vulnerabilities that we discussed

1107
00:35:29,359 --> 00:35:31,760
and now the next time our malicious a

1108
00:35:31,760 --> 00:35:32,560
container image

1109
00:35:32,560 --> 00:35:35,359
is executed it will be running under a

1110
00:35:35,359 --> 00:35:35,680
with

1111
00:35:35,680 --> 00:35:38,079
under a malicious guest right and that

1112
00:35:38,079 --> 00:35:39,440
malicious guest could

1113
00:35:39,440 --> 00:35:41,040
exploit the redirection vulnerability

1114
00:35:41,040 --> 00:35:43,520
that we found to redirect the image

1115
00:35:43,520 --> 00:35:46,079
over bin and now if we want to if we

1116
00:35:46,079 --> 00:35:48,160
check out what hap what's happening

1117
00:35:48,160 --> 00:35:50,480
on bin in the content in the host we can

1118
00:35:50,480 --> 00:35:51,440
see that it has

1119
00:35:51,440 --> 00:35:53,040
a completely different files and that's

1120
00:35:53,040 --> 00:35:54,560
actually the files of

1121
00:35:54,560 --> 00:35:56,720
our malicious container file system and

1122
00:35:56,720 --> 00:35:59,040
if we now try to execute something

1123
00:35:59,040 --> 00:36:02,640
from a inside the fro a binary that

1124
00:36:02,640 --> 00:36:04,480
is inside min we can now see that the

1125
00:36:04,480 --> 00:36:06,000
malicious version of that binary is

1126
00:36:06,000 --> 00:36:07,040
running on the host

1127
00:36:07,040 --> 00:36:09,040
and we actually got code execution from

1128
00:36:09,040 --> 00:36:10,160
the container

1129
00:36:10,160 --> 00:36:13,520
all the way up to the host so that's

1130
00:36:13,520 --> 00:36:14,079
great

1131
00:36:14,079 --> 00:36:16,160
right we we set up what we wanted to

1132
00:36:16,160 --> 00:36:17,760
accomplish in the start we got code

1133
00:36:17,760 --> 00:36:18,720
execution

1134
00:36:18,720 --> 00:36:21,760
on the host from inside the container

1135
00:36:21,760 --> 00:36:24,640
and really the underlying issues here uh

1136
00:36:24,640 --> 00:36:25,440
show how the

1137
00:36:25,440 --> 00:36:26,960
the share directory is really a big

1138
00:36:26,960 --> 00:36:28,880
attack surface for virtual machines

1139
00:36:28,880 --> 00:36:30,480
right we saw two issues

1140
00:36:30,480 --> 00:36:32,640
with host app with a host applications

1141
00:36:32,640 --> 00:36:33,599
that interact

1142
00:36:33,599 --> 00:36:36,000
with the shared directory right the

1143
00:36:36,000 --> 00:36:38,400
mountain and mount redirection issue

1144
00:36:38,400 --> 00:36:39,920
that we found that we found that could

1145
00:36:39,920 --> 00:36:41,760
be exploited

1146
00:36:41,760 --> 00:36:44,400
and that could be used to trick the

1147
00:36:44,400 --> 00:36:45,520
qatar run time

1148
00:36:45,520 --> 00:36:47,119
so there could be issues with the host

1149
00:36:47,119 --> 00:36:49,280
application accessing their share

1150
00:36:49,280 --> 00:36:50,000
directory

1151
00:36:50,000 --> 00:36:51,599
but there could also be issue with the

1152
00:36:51,599 --> 00:36:53,839
mechanism itself of the shared directory

1153
00:36:53,839 --> 00:36:55,040
normally there is some

1154
00:36:55,040 --> 00:36:56,960
process on the host that manages the

1155
00:36:56,960 --> 00:36:58,640
share directory and you can actually

1156
00:36:58,640 --> 00:36:59,440
find the issues

1157
00:36:59,440 --> 00:37:01,440
with that and i found one of those

1158
00:37:01,440 --> 00:37:03,680
issues that could allow in qatar to

1159
00:37:03,680 --> 00:37:05,760
launch a denial of service attack but we

1160
00:37:05,760 --> 00:37:07,760
won't get into that i just wanted to to

1161
00:37:07,760 --> 00:37:08,640
let you know that

1162
00:37:08,640 --> 00:37:10,240
the mechanism itself could also be

1163
00:37:10,240 --> 00:37:11,760
abused so

1164
00:37:11,760 --> 00:37:13,839
what attacks that we saw today we saw a

1165
00:37:13,839 --> 00:37:15,040
container to guest

1166
00:37:15,040 --> 00:37:17,200
a breakout using direct device access

1167
00:37:17,200 --> 00:37:18,640
and exploiting the lack

1168
00:37:18,640 --> 00:37:21,520
of a device group using a breakout new

1169
00:37:21,520 --> 00:37:22,720
breakout technique

1170
00:37:22,720 --> 00:37:25,920
and we also saw a guest to host unmount

1171
00:37:25,920 --> 00:37:27,920
operation right which we could have used

1172
00:37:27,920 --> 00:37:29,680
to launch a denial of service attack on

1173
00:37:29,680 --> 00:37:30,000
the

1174
00:37:30,000 --> 00:37:32,480
on the host we also saw a way for one

1175
00:37:32,480 --> 00:37:33,040
guest

1176
00:37:33,040 --> 00:37:35,280
to compromise future guests under cloud

1177
00:37:35,280 --> 00:37:36,160
hypervisor

1178
00:37:36,160 --> 00:37:38,000
and we also found a way for one guest to

1179
00:37:38,000 --> 00:37:39,359
gain code execution

1180
00:37:39,359 --> 00:37:41,760
on the host by redirecting the malicious

1181
00:37:41,760 --> 00:37:43,119
image mount

1182
00:37:43,119 --> 00:37:45,920
and i also briefly discussed a a denial

1183
00:37:45,920 --> 00:37:47,599
of service issue that could be found in

1184
00:37:47,599 --> 00:37:49,200
the shared directory mechanism

1185
00:37:49,200 --> 00:37:51,440
itself now all of those attacks could be

1186
00:37:51,440 --> 00:37:52,960
chained together

1187
00:37:52,960 --> 00:37:54,320
all of those vulnerabilities can be

1188
00:37:54,320 --> 00:37:56,320
chained together to perform a number of

1189
00:37:56,320 --> 00:37:57,200
attacks

1190
00:37:57,200 --> 00:38:00,480
on the host and i showed some of them

1191
00:38:00,480 --> 00:38:01,520
today

1192
00:38:01,520 --> 00:38:03,599
all of those issues i've disclosed them

1193
00:38:03,599 --> 00:38:05,200
to cutter containers maintainers they of

1194
00:38:05,200 --> 00:38:06,240
course they

1195
00:38:06,240 --> 00:38:08,640
were fixed and you can read more at this

1196
00:38:08,640 --> 00:38:09,680
directory

1197
00:38:09,680 --> 00:38:13,280
and aside from seeing like a cool

1198
00:38:13,280 --> 00:38:16,800
exploit chain and sandbox sandbox

1199
00:38:16,800 --> 00:38:18,800
breakout what can we really learn from

1200
00:38:18,800 --> 00:38:20,880
this research so first of all i want

1201
00:38:20,880 --> 00:38:23,440
i hope you now understand it uh more

1202
00:38:23,440 --> 00:38:25,280
about container security and understand

1203
00:38:25,280 --> 00:38:27,119
that containers are only as secure

1204
00:38:27,119 --> 00:38:30,320
as their configuration right uh and a

1205
00:38:30,320 --> 00:38:32,240
simple way to improve the their

1206
00:38:32,240 --> 00:38:33,680
configuration and security

1207
00:38:33,680 --> 00:38:37,520
is to drop unused privileges um

1208
00:38:37,520 --> 00:38:40,720
the breakout that we saw today uh uh

1209
00:38:40,720 --> 00:38:44,000
relied on cup make note right and it's a

1210
00:38:44,000 --> 00:38:45,920
great example for that because a

1211
00:38:45,920 --> 00:38:48,000
cup make note most containers have that

1212
00:38:48,000 --> 00:38:49,119
capability

1213
00:38:49,119 --> 00:38:51,040
but almost none of them actually need it

1214
00:38:51,040 --> 00:38:53,119
right an ngx container doesn't need

1215
00:38:53,119 --> 00:38:55,119
to create device files and interact with

1216
00:38:55,119 --> 00:38:56,480
them in any way

1217
00:38:56,480 --> 00:38:58,400
so today we the point is that today we

1218
00:38:58,400 --> 00:39:00,000
saw a breakout in qatar container

1219
00:39:00,000 --> 00:39:02,560
that relies on the magnet capability but

1220
00:39:02,560 --> 00:39:04,560
tomorrow it's another breakout right in

1221
00:39:04,560 --> 00:39:05,920
a different container runtime that

1222
00:39:05,920 --> 00:39:06,640
relies

1223
00:39:06,640 --> 00:39:08,800
on another capability that your

1224
00:39:08,800 --> 00:39:09,760
containers have

1225
00:39:09,760 --> 00:39:12,320
but they don't use so the point is you

1226
00:39:12,320 --> 00:39:14,240
really should

1227
00:39:14,240 --> 00:39:16,240
remove capabilities and privileges from

1228
00:39:16,240 --> 00:39:18,880
the container which it doesn't use

1229
00:39:18,880 --> 00:39:20,720
the second thing you you need to do is

1230
00:39:20,720 --> 00:39:22,000
to

1231
00:39:22,000 --> 00:39:25,119
beside further dropping capabilities is

1232
00:39:25,119 --> 00:39:26,160
to

1233
00:39:26,160 --> 00:39:28,800
further restrict the container using

1234
00:39:28,800 --> 00:39:30,240
some best practices

1235
00:39:30,240 --> 00:39:32,000
and history shows that all of those

1236
00:39:32,000 --> 00:39:33,760
vulnerabilities that i've talked all of

1237
00:39:33,760 --> 00:39:35,040
the types of issues

1238
00:39:35,040 --> 00:39:36,960
that i've talked about in the container

1239
00:39:36,960 --> 00:39:38,480
escopology part

1240
00:39:38,480 --> 00:39:40,320
most of them or a lot of them could have

1241
00:39:40,320 --> 00:39:42,560
been mitigated by simply applying best

1242
00:39:42,560 --> 00:39:44,400
practices like username spaces or

1243
00:39:44,400 --> 00:39:45,599
running the container

1244
00:39:45,599 --> 00:39:48,800
as an as the no not user and that

1245
00:39:48,800 --> 00:39:50,320
those type of things should really be

1246
00:39:50,320 --> 00:39:51,920
the number one thing you do

1247
00:39:51,920 --> 00:39:53,680
if you're trying to improve the security

1248
00:39:53,680 --> 00:39:55,200
of your containers

1249
00:39:55,200 --> 00:39:58,160
but we also saw a we also talked about

1250
00:39:58,160 --> 00:39:59,599
sandboxes today

1251
00:39:59,599 --> 00:40:02,000
and sandboxes do limit the attack

1252
00:40:02,000 --> 00:40:02,880
surface right

1253
00:40:02,880 --> 00:40:04,560
but i want to clarify there aren't

1254
00:40:04,560 --> 00:40:06,160
magical solutions that

1255
00:40:06,160 --> 00:40:08,880
an attackers would find way to break out

1256
00:40:08,880 --> 00:40:10,400
so the point here is

1257
00:40:10,400 --> 00:40:13,040
don't bet all of your chips on a on one

1258
00:40:13,040 --> 00:40:13,839
bag right

1259
00:40:13,839 --> 00:40:17,280
don't only rely on the sandbox

1260
00:40:17,280 --> 00:40:21,280
you should really be prepared for that

1261
00:40:21,280 --> 00:40:23,200
sandbox to be broken up

1262
00:40:23,200 --> 00:40:24,720
broken out of it should be an

1263
00:40:24,720 --> 00:40:26,480
enhancement and not a replacement

1264
00:40:26,480 --> 00:40:29,200
of your coin security features and the

1265
00:40:29,200 --> 00:40:31,040
final thing that if you do decide to use

1266
00:40:31,040 --> 00:40:31,839
a sandbox

1267
00:40:31,839 --> 00:40:34,000
you should get you should really get the

1268
00:40:34,000 --> 00:40:36,000
full potential out of it and enable

1269
00:40:36,000 --> 00:40:38,079
its security features cutter for example

1270
00:40:38,079 --> 00:40:40,079
has some security features that aren't

1271
00:40:40,079 --> 00:40:41,200
enabled by default

1272
00:40:41,200 --> 00:40:43,040
that could have been useful uh to

1273
00:40:43,040 --> 00:40:44,720
mitigate one of the attacks that we saw

1274
00:40:44,720 --> 00:40:45,920
here today

1275
00:40:45,920 --> 00:40:48,800
so that's really uh all i have for you

1276
00:40:48,800 --> 00:40:50,240
today i hope that you enjoyed it that

1277
00:40:50,240 --> 00:40:52,000
you learn about the container security a

1278
00:40:52,000 --> 00:40:54,119
bit and i'll be happy to take any

1279
00:40:54,119 --> 00:40:57,119
questions

