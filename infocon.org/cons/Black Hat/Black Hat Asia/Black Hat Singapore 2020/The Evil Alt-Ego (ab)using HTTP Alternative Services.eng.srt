1
00:00:03,040 --> 00:00:05,359
all right hello everyone so today we're

2
00:00:05,359 --> 00:00:06,960
gonna talk about the live

3
00:00:06,960 --> 00:00:12,000
alt ego using http alternative services

4
00:00:12,000 --> 00:00:14,480
wait a second that doesn't seem right

5
00:00:14,480 --> 00:00:15,599
this is black hat

6
00:00:15,599 --> 00:00:18,560
isn't it don't we just do evil things at

7
00:00:18,560 --> 00:00:20,320
black hat

8
00:00:20,320 --> 00:00:22,960
let me change that and correct this one

9
00:00:22,960 --> 00:00:25,359
second

10
00:00:25,760 --> 00:00:28,640
aha that looks much better so today

11
00:00:28,640 --> 00:00:30,880
we're gonna talk about the evil altico

12
00:00:30,880 --> 00:00:32,960
and we're going to abuse http

13
00:00:32,960 --> 00:00:34,719
alternative services

14
00:00:34,719 --> 00:00:38,640
just like the black cat way so

15
00:00:38,640 --> 00:00:43,040
this is a joint work by me trishita

16
00:00:43,040 --> 00:00:45,600
professor trachtenberg and professor

17
00:00:45,600 --> 00:00:47,280
starbinz

18
00:00:47,280 --> 00:00:48,960
all right so take it away professor

19
00:00:48,960 --> 00:00:51,440
trachtenberg

20
00:00:51,440 --> 00:00:53,920
okay so here's your mission you have

21
00:00:53,920 --> 00:00:55,120
your web server

22
00:00:55,120 --> 00:00:56,719
and your web server gets traffic from

23
00:00:56,719 --> 00:00:58,800
all kinds of different devices

24
00:00:58,800 --> 00:01:00,559
and over various different protocols and

25
00:01:00,559 --> 00:01:02,800
what you'd like to do is

26
00:01:02,800 --> 00:01:06,000
move content from different protocols to

27
00:01:06,000 --> 00:01:07,600
different servers that handle that

28
00:01:07,600 --> 00:01:08,720
specific protocol

29
00:01:08,720 --> 00:01:10,640
so if you have for example http one

30
00:01:10,640 --> 00:01:12,400
traffic you want it to go to one

31
00:01:12,400 --> 00:01:13,920
particular server if you have quick

32
00:01:13,920 --> 00:01:15,119
traffic you'd like it to go to a

33
00:01:15,119 --> 00:01:17,280
different server how do you adapt

34
00:01:17,280 --> 00:01:19,200
your current web server architecture to

35
00:01:19,200 --> 00:01:20,960
deal with this

36
00:01:20,960 --> 00:01:23,119
but wait i'm gonna make things easier

37
00:01:23,119 --> 00:01:24,880
i'm gonna give you

38
00:01:24,880 --> 00:01:28,880
the your choice of anyone in high tech

39
00:01:28,880 --> 00:01:31,119
the the stars of the field you can pick

40
00:01:31,119 --> 00:01:33,040
them for your particular mission

41
00:01:33,040 --> 00:01:34,880
okay you can pick anyone you want from

42
00:01:34,880 --> 00:01:37,040
google microsoft whatever companies

43
00:01:37,040 --> 00:01:40,159
you feel are valuable and by the way

44
00:01:40,159 --> 00:01:42,000
here are four people that we thought of

45
00:01:42,000 --> 00:01:43,920
see if you can name them in the chat for

46
00:01:43,920 --> 00:01:45,360
brownie points that mean absolutely

47
00:01:45,360 --> 00:01:47,759
nothing but uh

48
00:01:47,759 --> 00:01:51,200
might be interesting anyway okay

49
00:01:51,200 --> 00:01:54,560
so can you do it well

50
00:01:54,560 --> 00:01:58,320
luckily http has some ability to handle

51
00:01:58,320 --> 00:02:00,399
some of these issues

52
00:02:00,399 --> 00:02:05,360
okay http started in 1996 with http 1.0

53
00:02:05,360 --> 00:02:08,479
and very simple headers so when you send

54
00:02:08,479 --> 00:02:10,000
a request to web server you could

55
00:02:10,000 --> 00:02:12,080
specify a host name

56
00:02:12,080 --> 00:02:13,920
a referrer which page referred you to

57
00:02:13,920 --> 00:02:15,599
this particular location

58
00:02:15,599 --> 00:02:17,280
your user agent what browser you're

59
00:02:17,280 --> 00:02:19,520
using and as with

60
00:02:19,520 --> 00:02:23,440
all software as people started using

61
00:02:23,440 --> 00:02:24,959
http

62
00:02:24,959 --> 00:02:27,360
http developed additions to handle

63
00:02:27,360 --> 00:02:28,959
things like caching

64
00:02:28,959 --> 00:02:32,800
dynamic content request multiplexing

65
00:02:32,800 --> 00:02:35,440
and what's the result the result is that

66
00:02:35,440 --> 00:02:36,319
we have

67
00:02:36,319 --> 00:02:38,800
lots and lots of work to do lots of

68
00:02:38,800 --> 00:02:39,920
potential

69
00:02:39,920 --> 00:02:43,920
for abuse and security vulnerabilities

70
00:02:43,920 --> 00:02:48,160
okay in fact http is 23 years old

71
00:02:48,160 --> 00:02:51,519
this year it has seen its share of uh

72
00:02:51,519 --> 00:02:53,280
all kinds of vulnerabilities over those

73
00:02:53,280 --> 00:02:55,440
23 years and in fact

74
00:02:55,440 --> 00:02:57,440
what we want to show in this particular

75
00:02:57,440 --> 00:02:58,560
presentation is

76
00:02:58,560 --> 00:03:01,599
that it's still really hard to introduce

77
00:03:01,599 --> 00:03:02,159
secure

78
00:03:02,159 --> 00:03:04,400
protocol updates even for things that

79
00:03:04,400 --> 00:03:05,920
look dead

80
00:03:05,920 --> 00:03:09,440
simple like differentiating

81
00:03:09,440 --> 00:03:11,760
protocols into uh to different server

82
00:03:11,760 --> 00:03:13,200
locations

83
00:03:13,200 --> 00:03:16,959
so speaking of updates in the http land

84
00:03:16,959 --> 00:03:19,200
we have this new update called

85
00:03:19,200 --> 00:03:21,040
alternative services

86
00:03:21,040 --> 00:03:24,720
and this is in described in detail in

87
00:03:24,720 --> 00:03:28,239
rfc 7838 if you want to read it up

88
00:03:28,239 --> 00:03:30,480
okay so in a nutshell what is

89
00:03:30,480 --> 00:03:32,319
alternative services or alt

90
00:03:32,319 --> 00:03:36,400
svc for short um it's yet another http

91
00:03:36,400 --> 00:03:37,920
header yay

92
00:03:37,920 --> 00:03:41,200
okay um what does this header do so

93
00:03:41,200 --> 00:03:44,239
in short it allows a website to specify

94
00:03:44,239 --> 00:03:45,280
an equivalent

95
00:03:45,280 --> 00:03:47,519
alternate endpoint now that was a

96
00:03:47,519 --> 00:03:49,680
mouthful what does this even mean

97
00:03:49,680 --> 00:03:51,120
so let's take a look at what this

98
00:03:51,120 --> 00:03:52,720
actually means so

99
00:03:52,720 --> 00:03:55,040
we have the following setup where we

100
00:03:55,040 --> 00:03:56,480
have a

101
00:03:56,480 --> 00:03:59,280
client browser and we have two entities

102
00:03:59,280 --> 00:04:01,760
um both of them are web servers one is

103
00:04:01,760 --> 00:04:04,080
original.com and one is alt.com

104
00:04:04,080 --> 00:04:05,840
now let's say that the client browser

105
00:04:05,840 --> 00:04:07,519
wants to visit this webpage

106
00:04:07,519 --> 00:04:09,840
original.com said loads https

107
00:04:09,840 --> 00:04:11,120
original.com

108
00:04:11,120 --> 00:04:14,159
in the in this web browser

109
00:04:14,159 --> 00:04:18,320
and um sends a http request

110
00:04:18,320 --> 00:04:22,079
to original.com original.com as soon as

111
00:04:22,079 --> 00:04:23,759
it gets the http

112
00:04:23,759 --> 00:04:26,080
request responds with the html contents

113
00:04:26,080 --> 00:04:27,040
of the webpage

114
00:04:27,040 --> 00:04:29,680
and also responds with some http

115
00:04:29,680 --> 00:04:31,680
response headers as expected

116
00:04:31,680 --> 00:04:33,280
and one of the headers is this

117
00:04:33,280 --> 00:04:35,600
interesting alt svc header

118
00:04:35,600 --> 00:04:38,400
and this whole svc header is pointed to

119
00:04:38,400 --> 00:04:42,560
alt.com at port 443 now what

120
00:04:42,560 --> 00:04:44,800
original.com is essentially trying to

121
00:04:44,800 --> 00:04:46,560
tell the client browser through this

122
00:04:46,560 --> 00:04:49,360
is that alt.com is an equivalent

123
00:04:49,360 --> 00:04:51,360
endpoint for original.com

124
00:04:51,360 --> 00:04:53,280
so what it's saying is that the next

125
00:04:53,280 --> 00:04:55,360
time the client browser wants to load

126
00:04:55,360 --> 00:04:56,639
anything from

127
00:04:56,639 --> 00:04:58,560
original.com it could choose to either

128
00:04:58,560 --> 00:05:00,240
go through original.com

129
00:05:00,240 --> 00:05:03,120
or alt.com depending on its preference

130
00:05:03,120 --> 00:05:04,880
and so as soon as the client browser

131
00:05:04,880 --> 00:05:08,240
gets this alt svc header it immediately

132
00:05:08,240 --> 00:05:09,759
tries to verify

133
00:05:09,759 --> 00:05:12,560
whether alt.com is indeed an equivalent

134
00:05:12,560 --> 00:05:14,639
endpoint for original.com so it tries to

135
00:05:14,639 --> 00:05:15,600
connect

136
00:05:15,600 --> 00:05:19,520
to alt.com over a secure channel

137
00:05:19,520 --> 00:05:21,680
and asks alt.com to present its

138
00:05:21,680 --> 00:05:22,800
certificate

139
00:05:22,800 --> 00:05:25,680
and alt.com presents a certificate in

140
00:05:25,680 --> 00:05:26,400
the name

141
00:05:26,400 --> 00:05:29,680
of original.com now why

142
00:05:29,680 --> 00:05:32,880
on earth would you ask would alt.com

143
00:05:32,880 --> 00:05:34,560
present a certificate in the name of

144
00:05:34,560 --> 00:05:35,919
original.com

145
00:05:35,919 --> 00:05:38,240
well this is kind of important because

146
00:05:38,240 --> 00:05:40,080
um

147
00:05:40,080 --> 00:05:42,400
showing that it has a valid certificate

148
00:05:42,400 --> 00:05:44,320
in the name of original.com

149
00:05:44,320 --> 00:05:46,800
is a proof that alt.com is indeed in

150
00:05:46,800 --> 00:05:48,720
fact an equivalent endpoint for

151
00:05:48,720 --> 00:05:49,840
original.com

152
00:05:49,840 --> 00:05:52,160
it's kind of like a security check and

153
00:05:52,160 --> 00:05:54,240
the client browser needs to see

154
00:05:54,240 --> 00:05:56,880
this certificate in the right domain

155
00:05:56,880 --> 00:05:59,520
name of original.com to be convinced

156
00:05:59,520 --> 00:06:02,479
that all.com is indeed a valid alt scc

157
00:06:02,479 --> 00:06:03,280
endpoint

158
00:06:03,280 --> 00:06:06,000
and once it sees this certificate that's

159
00:06:06,000 --> 00:06:06,639
valid

160
00:06:06,639 --> 00:06:09,039
it'll cache this mapping and by what by

161
00:06:09,039 --> 00:06:10,400
that i mean

162
00:06:10,400 --> 00:06:13,759
the next time uh the client loads

163
00:06:13,759 --> 00:06:16,960
all uh wants to load any content from

164
00:06:16,960 --> 00:06:18,560
original.com

165
00:06:18,560 --> 00:06:21,440
it can choose either website either web

166
00:06:21,440 --> 00:06:23,120
server to go to it could either

167
00:06:23,120 --> 00:06:25,120
load the stuff from original.com or

168
00:06:25,120 --> 00:06:27,360
alt.com and this kind of happens

169
00:06:27,360 --> 00:06:29,840
in the background so even though in the

170
00:06:29,840 --> 00:06:30,800
url bar

171
00:06:30,800 --> 00:06:34,240
you type in https original.com in the

172
00:06:34,240 --> 00:06:35,440
background

173
00:06:35,440 --> 00:06:37,520
your browser can choose to go to either

174
00:06:37,520 --> 00:06:39,039
one of the web servers

175
00:06:39,039 --> 00:06:42,319
original.com and alt.r alt.com and you

176
00:06:42,319 --> 00:06:44,000
wouldn't know the difference

177
00:06:44,000 --> 00:06:46,400
so that's what happened so this mapping

178
00:06:46,400 --> 00:06:48,240
is now cached and

179
00:06:48,240 --> 00:06:51,120
in the future either of the web servers

180
00:06:51,120 --> 00:06:53,120
could be used

181
00:06:53,120 --> 00:06:56,080
okay what happens if alt.com doesn't

182
00:06:56,080 --> 00:06:57,599
present the right certificate

183
00:06:57,599 --> 00:07:00,160
let's say alt.com presents a certificate

184
00:07:00,160 --> 00:07:00,880
not in

185
00:07:00,880 --> 00:07:03,280
the name of original.com but in the name

186
00:07:03,280 --> 00:07:05,199
of alt.com so it presents

187
00:07:05,199 --> 00:07:07,360
a certificate with the domain name of

188
00:07:07,360 --> 00:07:08,560
alt.com

189
00:07:08,560 --> 00:07:10,560
well then the client browser is not

190
00:07:10,560 --> 00:07:11,840
convinced that these are

191
00:07:11,840 --> 00:07:14,160
that these two are in fact equivalent

192
00:07:14,160 --> 00:07:15,120
endpoints

193
00:07:15,120 --> 00:07:17,919
and so it does not cache the mapping and

194
00:07:17,919 --> 00:07:19,199
now what this means

195
00:07:19,199 --> 00:07:22,319
is that in the future when uh

196
00:07:22,319 --> 00:07:24,080
the user wants to load stuff from

197
00:07:24,080 --> 00:07:26,319
original.com it will only use

198
00:07:26,319 --> 00:07:29,199
original.com and not use alt.com because

199
00:07:29,199 --> 00:07:30,319
it doesn't trust that

200
00:07:30,319 --> 00:07:33,840
alt.com is actually a valid

201
00:07:33,840 --> 00:07:36,479
and equivalent endpoint for original.com

202
00:07:36,479 --> 00:07:38,400
since it did not present

203
00:07:38,400 --> 00:07:41,440
the correct certificate so if the

204
00:07:41,440 --> 00:07:42,720
certificate is right

205
00:07:42,720 --> 00:07:45,039
this mapping between original.com and

206
00:07:45,039 --> 00:07:46,080
alt.com is

207
00:07:46,080 --> 00:07:49,199
cached if not then it's not cached

208
00:07:49,199 --> 00:07:51,520
and that is essentially how the alt cc

209
00:07:51,520 --> 00:07:54,160
header works

210
00:07:54,160 --> 00:07:56,879
okay let's take a look a g-rated look at

211
00:07:56,879 --> 00:07:58,000
the anatomy

212
00:07:58,000 --> 00:08:01,440
of an alt services header

213
00:08:01,440 --> 00:08:03,520
you start with the protocol which could

214
00:08:03,520 --> 00:08:05,440
be http 1.1

215
00:08:05,440 --> 00:08:08,560
quick h2c ftp what have you

216
00:08:08,560 --> 00:08:10,240
then the domain to which you would like

217
00:08:10,240 --> 00:08:12,000
to transfer control so

218
00:08:12,000 --> 00:08:14,240
the user types in a particular domain

219
00:08:14,240 --> 00:08:16,240
the alternative services header says if

220
00:08:16,240 --> 00:08:17,919
you're using this protocol go to this

221
00:08:17,919 --> 00:08:21,680
other domain and this port 123 in this

222
00:08:21,680 --> 00:08:22,720
case

223
00:08:22,720 --> 00:08:25,680
and each alternative service header has

224
00:08:25,680 --> 00:08:26,879
a

225
00:08:26,879 --> 00:08:29,520
maximum amount of time maximum age that

226
00:08:29,520 --> 00:08:30,000
this

227
00:08:30,000 --> 00:08:32,159
header should be valid ideally it should

228
00:08:32,159 --> 00:08:33,919
be taken out of the cache

229
00:08:33,919 --> 00:08:37,039
after this number of seconds alternative

230
00:08:37,039 --> 00:08:38,399
services are used

231
00:08:38,399 --> 00:08:40,320
for things like load balancing if you

232
00:08:40,320 --> 00:08:41,599
have a lot of different clients and

233
00:08:41,599 --> 00:08:42,880
you'd want to balance

234
00:08:42,880 --> 00:08:46,959
easily client segmentation segmenting

235
00:08:46,959 --> 00:08:49,279
clients into different classes

236
00:08:49,279 --> 00:08:51,120
and advertising endpoints with new

237
00:08:51,120 --> 00:08:52,959
protocols okay so if you have a

238
00:08:52,959 --> 00:08:54,080
different protocol that

239
00:08:54,080 --> 00:08:55,279
does something different rather than

240
00:08:55,279 --> 00:08:56,640
having one server handle all the

241
00:08:56,640 --> 00:08:57,760
different protocols

242
00:08:57,760 --> 00:08:59,200
you can have different servers and you

243
00:08:59,200 --> 00:09:01,440
can actually use alternative services

244
00:09:01,440 --> 00:09:03,680
to handle it on the client side without

245
00:09:03,680 --> 00:09:04,480
needing to

246
00:09:04,480 --> 00:09:07,200
handle the machinery on the server side

247
00:09:07,200 --> 00:09:07,600
we

248
00:09:07,600 --> 00:09:10,560
identified five vulnerabilities of

249
00:09:10,560 --> 00:09:11,839
alternative services

250
00:09:11,839 --> 00:09:15,760
a number of them currently have cves

251
00:09:15,760 --> 00:09:18,720
so the first one is port scanning you

252
00:09:18,720 --> 00:09:19,200
can use

253
00:09:19,200 --> 00:09:21,760
alternative services to scan ports that

254
00:09:21,760 --> 00:09:24,240
are accessible from the victim machine

255
00:09:24,240 --> 00:09:25,920
so even if the victim is behind a

256
00:09:25,920 --> 00:09:28,399
firewall this allows you to scan

257
00:09:28,399 --> 00:09:30,560
other machines that are accessible only

258
00:09:30,560 --> 00:09:32,000
within the firewall

259
00:09:32,000 --> 00:09:33,360
this also allows you to scan the

260
00:09:33,360 --> 00:09:37,200
victim's machine itself

261
00:09:37,200 --> 00:09:40,480
distributed denial of service by

262
00:09:40,480 --> 00:09:42,320
having alternative service redirect on

263
00:09:42,320 --> 00:09:44,399
your browser on your web page

264
00:09:44,399 --> 00:09:48,160
you can get connecting devices to

265
00:09:48,160 --> 00:09:51,440
transfer access to a particular site

266
00:09:51,440 --> 00:09:53,760
that you're trying to target

267
00:09:53,760 --> 00:09:56,240
history exfiltration trying to identify

268
00:09:56,240 --> 00:09:57,519
uh which sites

269
00:09:57,519 --> 00:10:00,800
a victim has visited tracking

270
00:10:00,800 --> 00:10:03,200
trying to track a victim as they go from

271
00:10:03,200 --> 00:10:04,240
one i

272
00:10:04,240 --> 00:10:08,240
i isp to another so if they're in a cafe

273
00:10:08,240 --> 00:10:09,760
and then they move to another location

274
00:10:09,760 --> 00:10:11,760
you can use alternative services

275
00:10:11,760 --> 00:10:15,680
and what has been cached to identify

276
00:10:15,680 --> 00:10:18,800
and fingerprint the same device

277
00:10:18,800 --> 00:10:21,920
and last but not least malware bypass a

278
00:10:21,920 --> 00:10:23,440
malware protection bypass

279
00:10:23,440 --> 00:10:26,560
where you can bypass some of the simple

280
00:10:26,560 --> 00:10:29,920
malware defenses that are already set up

281
00:10:29,920 --> 00:10:33,120
in current browsers

282
00:10:33,120 --> 00:10:35,360
we have two possible case models that we

283
00:10:35,360 --> 00:10:37,120
consider in our work

284
00:10:37,120 --> 00:10:38,800
the first one is when an attacker

285
00:10:38,800 --> 00:10:40,560
controls only a website

286
00:10:40,560 --> 00:10:41,839
so there's a website the attacker

287
00:10:41,839 --> 00:10:44,000
controls it and victims connect to that

288
00:10:44,000 --> 00:10:45,200
website

289
00:10:45,200 --> 00:10:47,920
a slightly more sophisticated attacker

290
00:10:47,920 --> 00:10:50,000
also gets to monitor victim network

291
00:10:50,000 --> 00:10:50,880
traffic

292
00:10:50,880 --> 00:10:52,800
and this is an attacker that for example

293
00:10:52,800 --> 00:10:56,160
could be someone who owns a router

294
00:10:56,160 --> 00:10:59,760
or a wi-fi spot in a cafe

295
00:10:59,760 --> 00:11:02,480
airport something that provides free

296
00:11:02,480 --> 00:11:03,839
wi-fi

297
00:11:03,839 --> 00:11:05,839
and there the attacker might control the

298
00:11:05,839 --> 00:11:07,760
remote site but also has access to the

299
00:11:07,760 --> 00:11:09,040
victims network

300
00:11:09,040 --> 00:11:11,600
traffic for the purposes of this

301
00:11:11,600 --> 00:11:12,560
presentation we'll

302
00:11:12,560 --> 00:11:15,839
look only at case one just since we have

303
00:11:15,839 --> 00:11:18,880
a limited amount of time

304
00:11:19,040 --> 00:11:21,839
now you might ask why is this so bad so

305
00:11:21,839 --> 00:11:23,519
okay you can cause some damage with

306
00:11:23,519 --> 00:11:24,800
alternative services

307
00:11:24,800 --> 00:11:27,440
what does it matter well one of the key

308
00:11:27,440 --> 00:11:28,640
things is that

309
00:11:28,640 --> 00:11:31,120
the alternative services header gets

310
00:11:31,120 --> 00:11:32,480
managed below the

311
00:11:32,480 --> 00:11:34,399
the user's access to the browser level

312
00:11:34,399 --> 00:11:35,920
what i mean by that is

313
00:11:35,920 --> 00:11:38,240
the victim does not actually see that

314
00:11:38,240 --> 00:11:40,079
they're being transferred to a different

315
00:11:40,079 --> 00:11:42,160
domain

316
00:11:42,160 --> 00:11:44,480
and in fact this different domain

317
00:11:44,480 --> 00:11:45,600
transfer

318
00:11:45,600 --> 00:11:48,079
is not even visible to javascript so it

319
00:11:48,079 --> 00:11:49,839
cannot be detected using javascript

320
00:11:49,839 --> 00:11:50,959
detection

321
00:11:50,959 --> 00:11:53,760
mechanism no user interaction is

322
00:11:53,760 --> 00:11:54,480
required

323
00:11:54,480 --> 00:11:57,680
to affect the alternative service

324
00:11:57,680 --> 00:12:00,800
transition and it's thus also mountable

325
00:12:00,800 --> 00:12:02,639
by a third party website that

326
00:12:02,639 --> 00:12:06,000
might be on an existing site okay

327
00:12:06,000 --> 00:12:08,079
so this is particularly insidious the

328
00:12:08,079 --> 00:12:10,320
victim unless they're going into the

329
00:12:10,320 --> 00:12:11,519
internals on their

330
00:12:11,519 --> 00:12:13,040
operating system if they're just using

331
00:12:13,040 --> 00:12:15,040
their browser like most people do

332
00:12:15,040 --> 00:12:17,040
has no idea that they're actually being

333
00:12:17,040 --> 00:12:20,560
transferred to a different location

334
00:12:21,120 --> 00:12:23,360
all right so now let's go over our first

335
00:12:23,360 --> 00:12:24,480
attack which is

336
00:12:24,480 --> 00:12:29,680
port scanning cve 2019 11728

337
00:12:29,680 --> 00:12:31,760
now what is this attack all about so

338
00:12:31,760 --> 00:12:33,920
this attack is all about distributed

339
00:12:33,920 --> 00:12:36,079
sport scanning from the context of the

340
00:12:36,079 --> 00:12:36,880
browser

341
00:12:36,880 --> 00:12:39,120
now what does that even mean so that

342
00:12:39,120 --> 00:12:40,399
basically means that

343
00:12:40,399 --> 00:12:43,760
as an attacker i can get whatever

344
00:12:43,760 --> 00:12:45,760
victims that i have that visit my

345
00:12:45,760 --> 00:12:47,920
website through their browsers to do the

346
00:12:47,920 --> 00:12:49,279
port scanning

347
00:12:49,279 --> 00:12:52,079
for me now the setup in this attack

348
00:12:52,079 --> 00:12:53,680
looks like the following so there's a

349
00:12:53,680 --> 00:12:55,519
victim on their browser and there's an

350
00:12:55,519 --> 00:12:57,440
attacker who has a web server

351
00:12:57,440 --> 00:13:00,399
for evil.com and then the attacker

352
00:13:00,399 --> 00:13:02,240
somehow gets the victim to visit their

353
00:13:02,240 --> 00:13:04,800
web page

354
00:13:04,839 --> 00:13:07,120
http now as soon as

355
00:13:07,120 --> 00:13:10,240
the um victim visits the webpage the

356
00:13:10,240 --> 00:13:11,040
attacker

357
00:13:11,040 --> 00:13:14,160
then sends that the http response

358
00:13:14,160 --> 00:13:16,079
which contains the contents of the web

359
00:13:16,079 --> 00:13:17,440
page obviously

360
00:13:17,440 --> 00:13:20,560
and also an alt svc header

361
00:13:20,560 --> 00:13:23,680
now the attacker cleverly sets the alt

362
00:13:23,680 --> 00:13:24,880
svc header

363
00:13:24,880 --> 00:13:27,920
to point to whatever ip address

364
00:13:27,920 --> 00:13:30,160
and port that the attacker wants to do

365
00:13:30,160 --> 00:13:32,160
the port scanning off

366
00:13:32,160 --> 00:13:34,000
so in this case the attacker wants to

367
00:13:34,000 --> 00:13:35,760
know if

368
00:13:35,760 --> 00:13:38,800
port 25 on the victim's uh machine is

369
00:13:38,800 --> 00:13:41,680
open or closed so it sets the alt scc

370
00:13:41,680 --> 00:13:44,560
to this interesting value of localhost

371
00:13:44,560 --> 00:13:46,079
port 25.

372
00:13:46,079 --> 00:13:48,560
now what does this even mean this

373
00:13:48,560 --> 00:13:49,360
basically

374
00:13:49,360 --> 00:13:52,720
means that the attacker is telling the

375
00:13:52,720 --> 00:13:53,839
victim

376
00:13:53,839 --> 00:13:58,000
that it has on its own machine

377
00:13:58,000 --> 00:14:00,959
an alternative endpoint for evil.com

378
00:14:00,959 --> 00:14:02,000
that's literally what

379
00:14:02,000 --> 00:14:03,920
it's telling it through the alt svc

380
00:14:03,920 --> 00:14:06,160
header now the victim's browser doesn't

381
00:14:06,160 --> 00:14:08,240
know any better so it'll just go through

382
00:14:08,240 --> 00:14:09,839
the routine checkup

383
00:14:09,839 --> 00:14:12,480
and verify and try to verify this

384
00:14:12,480 --> 00:14:14,720
endpoint and see if it indeed

385
00:14:14,720 --> 00:14:17,680
is an a valid alternative endpoint for

386
00:14:17,680 --> 00:14:18,720
evil.com

387
00:14:18,720 --> 00:14:20,320
so it will then try to connect to

388
00:14:20,320 --> 00:14:22,880
localhost port 25 so it will connect to

389
00:14:22,880 --> 00:14:24,480
port 25 on

390
00:14:24,480 --> 00:14:27,279
the the own the victim's own machine and

391
00:14:27,279 --> 00:14:29,440
in doing so it will then realize whether

392
00:14:29,440 --> 00:14:30,560
the port

393
00:14:30,560 --> 00:14:33,839
25 is closed or open so in this case we

394
00:14:33,839 --> 00:14:35,360
have two scenarios

395
00:14:35,360 --> 00:14:37,760
so scenario number one is when the port

396
00:14:37,760 --> 00:14:38,959
is closed and

397
00:14:38,959 --> 00:14:40,720
the second scenario is when the port is

398
00:14:40,720 --> 00:14:42,639
open and for your reference

399
00:14:42,639 --> 00:14:45,920
the time axis moves downwards as you can

400
00:14:45,920 --> 00:14:46,399
see

401
00:14:46,399 --> 00:14:49,680
on your right all right so

402
00:14:49,680 --> 00:14:52,000
let's go over scenario one so if the

403
00:14:52,000 --> 00:14:53,120
port 25

404
00:14:53,120 --> 00:14:56,880
is closed on the victim's machine

405
00:14:56,880 --> 00:14:58,639
what happens when the victim's browser

406
00:14:58,639 --> 00:15:00,240
tries to connect to this port is that

407
00:15:00,240 --> 00:15:02,079
the port will immediately send a reset

408
00:15:02,079 --> 00:15:03,920
packet and say hey

409
00:15:03,920 --> 00:15:06,320
i don't want to talk to you i'm done and

410
00:15:06,320 --> 00:15:07,279
and i'm closed

411
00:15:07,279 --> 00:15:09,040
so it'll just send a reset packet and

412
00:15:09,040 --> 00:15:11,120
that'll be the end of the communication

413
00:15:11,120 --> 00:15:14,399
however if port 25 was open then there's

414
00:15:14,399 --> 00:15:16,079
going to be a few more packets that are

415
00:15:16,079 --> 00:15:18,079
exchanged so for example the tcp

416
00:15:18,079 --> 00:15:19,600
handshake packet

417
00:15:19,600 --> 00:15:22,160
and other packets may be exchanged

418
00:15:22,160 --> 00:15:23,040
before

419
00:15:23,040 --> 00:15:25,519
for whatever application running on port

420
00:15:25,519 --> 00:15:28,000
25 realizes that this is some sort of

421
00:15:28,000 --> 00:15:29,839
like weird connection that doesn't make

422
00:15:29,839 --> 00:15:30,720
any sense

423
00:15:30,720 --> 00:15:33,600
and so port 25 is then eventually going

424
00:15:33,600 --> 00:15:35,600
to send a reset packet

425
00:15:35,600 --> 00:15:39,279
and uh that terminate that connection

426
00:15:39,279 --> 00:15:44,320
and so in this scenario

427
00:15:44,320 --> 00:15:47,600
the victim browser will clearly know

428
00:15:47,600 --> 00:15:49,839
whether the port is closed or not

429
00:15:49,839 --> 00:15:52,160
because these are two very obviously

430
00:15:52,160 --> 00:15:53,519
distinguishable

431
00:15:53,519 --> 00:15:56,240
scenario so if the victim's browser will

432
00:15:56,240 --> 00:15:58,000
definitely know whether the port is open

433
00:15:58,000 --> 00:15:59,040
or closed

434
00:15:59,040 --> 00:16:02,079
however the question arises here

435
00:16:02,079 --> 00:16:05,360
is that how on earth is evil.com sitting

436
00:16:05,360 --> 00:16:05,839
somewhere

437
00:16:05,839 --> 00:16:09,360
far far away going to exfiltrate this

438
00:16:09,360 --> 00:16:11,279
information from the victim's browser

439
00:16:11,279 --> 00:16:11,759
now

440
00:16:11,759 --> 00:16:13,839
the victim knows but how does this

441
00:16:13,839 --> 00:16:16,000
evil.com get this information

442
00:16:16,000 --> 00:16:18,639
out of the victims browser now for that

443
00:16:18,639 --> 00:16:19,759
we have to use some

444
00:16:19,759 --> 00:16:22,959
clever timing side channel analysis

445
00:16:22,959 --> 00:16:25,440
for this consider the following

446
00:16:25,440 --> 00:16:26,639
threshold in time

447
00:16:26,639 --> 00:16:30,240
so this threshold is marked by green um

448
00:16:30,240 --> 00:16:32,959
by a green line on the slides so up

449
00:16:32,959 --> 00:16:34,000
until this time

450
00:16:34,000 --> 00:16:37,440
in um this process

451
00:16:37,440 --> 00:16:41,040
um the victim's browser if the port is

452
00:16:41,040 --> 00:16:42,720
closed the victim's browser

453
00:16:42,720 --> 00:16:46,079
already knows that localhost port 25

454
00:16:46,079 --> 00:16:49,040
is not a valid alternative services and

455
00:16:49,040 --> 00:16:51,360
point for evil.com because it sent a

456
00:16:51,360 --> 00:16:52,560
reset packet

457
00:16:52,560 --> 00:16:55,360
without presenting a valid certificate

458
00:16:55,360 --> 00:16:57,040
for evil.com so

459
00:16:57,040 --> 00:16:59,199
by now it knows that this is not a valid

460
00:16:59,199 --> 00:17:02,000
endpoint however if the port is open

461
00:17:02,000 --> 00:17:05,520
the victim browser still hasn't received

462
00:17:05,520 --> 00:17:08,559
um a valid certificate for evil.com but

463
00:17:08,559 --> 00:17:10,959
it also hasn't received a reset packet

464
00:17:10,959 --> 00:17:12,000
from evil

465
00:17:12,000 --> 00:17:15,039
from uh 425

466
00:17:15,039 --> 00:17:18,240
so it still doesn't know whether

467
00:17:18,240 --> 00:17:21,679
port 25 is indeed a valid endpoint

468
00:17:21,679 --> 00:17:24,559
for evil.com or is not a valid endpoint

469
00:17:24,559 --> 00:17:26,319
so it doesn't know

470
00:17:26,319 --> 00:17:29,440
at this point now how do we

471
00:17:29,440 --> 00:17:32,320
as the attacker use this information to

472
00:17:32,320 --> 00:17:33,440
exfiltrate

473
00:17:33,440 --> 00:17:35,760
the status of port 25 from the victim's

474
00:17:35,760 --> 00:17:37,520
browser

475
00:17:37,520 --> 00:17:39,919
for that we do something very smart so

476
00:17:39,919 --> 00:17:40,880
what we do

477
00:17:40,880 --> 00:17:44,559
on the attacker as soon as you hit this

478
00:17:44,559 --> 00:17:47,600
green threshold the attacker does an

479
00:17:47,600 --> 00:17:49,760
automatic redirect through javascript so

480
00:17:49,760 --> 00:17:51,360
you just have a small snippet of

481
00:17:51,360 --> 00:17:52,480
javascript

482
00:17:52,480 --> 00:17:55,760
that measures the time and as soon as

483
00:17:55,760 --> 00:17:57,760
you hit this threshold you redirect

484
00:17:57,760 --> 00:18:01,840
to evil dot com slash p2

485
00:18:01,840 --> 00:18:03,600
from the original webpage which is

486
00:18:03,600 --> 00:18:05,840
evil.com p1

487
00:18:05,840 --> 00:18:08,000
and because now the client has loaded

488
00:18:08,000 --> 00:18:09,520
this new web page

489
00:18:09,520 --> 00:18:11,520
the attacker gets the opportunity to

490
00:18:11,520 --> 00:18:12,880
present a new alt

491
00:18:12,880 --> 00:18:16,320
scc header and this time the attacker

492
00:18:16,320 --> 00:18:18,720
points the alt svc header to a domain

493
00:18:18,720 --> 00:18:20,640
that it actually controls so in this

494
00:18:20,640 --> 00:18:21,400
case this is

495
00:18:21,400 --> 00:18:25,280
evil2.com at port 443

496
00:18:25,280 --> 00:18:28,799
now what happens here is that if

497
00:18:28,799 --> 00:18:32,640
uh the old alt svc that was specified to

498
00:18:32,640 --> 00:18:34,720
local host port 25

499
00:18:34,720 --> 00:18:37,679
uh was invalid and the victims browser

500
00:18:37,679 --> 00:18:39,039
already knows that

501
00:18:39,039 --> 00:18:42,160
so that would happen in case the

502
00:18:42,160 --> 00:18:44,799
port was closed um the victim's browser

503
00:18:44,799 --> 00:18:45,520
already

504
00:18:45,520 --> 00:18:48,720
knows that port 25 is an invalid alt scc

505
00:18:48,720 --> 00:18:50,799
endpoint it will try to connect to the

506
00:18:50,799 --> 00:18:52,799
new endpoint and be like okay well the

507
00:18:52,799 --> 00:18:54,000
old one didn't work

508
00:18:54,000 --> 00:18:56,000
i know that so might as well just try my

509
00:18:56,000 --> 00:18:57,679
luck with the new one and

510
00:18:57,679 --> 00:19:01,600
see if the new alt svc endpoint is valid

511
00:19:01,600 --> 00:19:04,240
however if the port was open so if

512
00:19:04,240 --> 00:19:06,480
localhost 25 is open

513
00:19:06,480 --> 00:19:08,320
then the victim's browser still doesn't

514
00:19:08,320 --> 00:19:10,000
know whether localhost 25

515
00:19:10,000 --> 00:19:13,280
is valid or invalid so it will defer any

516
00:19:13,280 --> 00:19:16,000
attempt to verify whether the second alt

517
00:19:16,000 --> 00:19:20,240
scc specified so evil2.com

518
00:19:20,240 --> 00:19:23,520
is valid or invalid until it can figure

519
00:19:23,520 --> 00:19:24,960
out whether

520
00:19:24,960 --> 00:19:27,840
um the original all that species

521
00:19:27,840 --> 00:19:30,720
specified was valid or invalid

522
00:19:30,720 --> 00:19:33,679
so what does this mean for us in a

523
00:19:33,679 --> 00:19:34,559
nutshell

524
00:19:34,559 --> 00:19:36,559
what this means is all the attacker has

525
00:19:36,559 --> 00:19:38,000
to do is the following so

526
00:19:38,000 --> 00:19:40,000
all it has to do is look out for any

527
00:19:40,000 --> 00:19:42,400
connections to evil2.com

528
00:19:42,400 --> 00:19:45,720
so if it gets an immediate connection to

529
00:19:45,720 --> 00:19:49,520
evil2.com then it knows that

530
00:19:49,520 --> 00:19:52,880
port 25 on localhost on the victims

531
00:19:52,880 --> 00:19:55,360
machine must have been closed because

532
00:19:55,360 --> 00:19:57,200
why else would they then try to connect

533
00:19:57,200 --> 00:19:59,280
to the new altars you see

534
00:19:59,280 --> 00:20:01,600
because and it would only do that if it

535
00:20:01,600 --> 00:20:04,159
already knows that the old altar cc was

536
00:20:04,159 --> 00:20:04,799
in fact

537
00:20:04,799 --> 00:20:08,000
not working however if

538
00:20:08,000 --> 00:20:11,200
you don't get a connection to evil2.com

539
00:20:11,200 --> 00:20:12,159
immediately

540
00:20:12,159 --> 00:20:15,919
um on loading the on and presenting this

541
00:20:15,919 --> 00:20:18,000
header to the victim

542
00:20:18,000 --> 00:20:21,360
then you know that local host port 25 is

543
00:20:21,360 --> 00:20:22,159
open because

544
00:20:22,159 --> 00:20:25,039
you know this because the victim is you

545
00:20:25,039 --> 00:20:26,480
know that the victim is still in the

546
00:20:26,480 --> 00:20:28,480
middle of trying to verify

547
00:20:28,480 --> 00:20:31,919
whether that um port was

548
00:20:31,919 --> 00:20:34,960
in fact a valid alternative endpoint for

549
00:20:34,960 --> 00:20:37,679
evil.com or not

550
00:20:37,679 --> 00:20:39,520
so that's all you need to do you just

551
00:20:39,520 --> 00:20:40,960
need to monitor whether you get an

552
00:20:40,960 --> 00:20:43,760
immediate connection to evil2.com

553
00:20:43,760 --> 00:20:46,400
or not and you will know whether port 25

554
00:20:46,400 --> 00:20:48,640
is open or closed

555
00:20:48,640 --> 00:20:50,400
and so what can you do with this so with

556
00:20:50,400 --> 00:20:52,000
this you could do the following things

557
00:20:52,000 --> 00:20:53,760
you could obviously do distributed port

558
00:20:53,760 --> 00:20:55,440
scanning so you could just get a bunch

559
00:20:55,440 --> 00:20:56,720
of clients

560
00:20:56,720 --> 00:20:58,400
on their different browsers to do the

561
00:20:58,400 --> 00:21:00,320
port scanning for you

562
00:21:00,320 --> 00:21:03,120
um you could also scan things that you

563
00:21:03,120 --> 00:21:05,280
probably couldn't access directly so

564
00:21:05,280 --> 00:21:07,360
local host machine so you could

565
00:21:07,360 --> 00:21:10,320
like scan the victim's local host uh the

566
00:21:10,320 --> 00:21:12,320
victim's own machine obviously as we've

567
00:21:12,320 --> 00:21:13,039
seen

568
00:21:13,039 --> 00:21:15,039
you could also scan machines behind a

569
00:21:15,039 --> 00:21:17,120
private network or an app that only the

570
00:21:17,120 --> 00:21:18,799
victim can access but you

571
00:21:18,799 --> 00:21:21,200
as the attacker do not have direct

572
00:21:21,200 --> 00:21:22,720
access to

573
00:21:22,720 --> 00:21:25,600
and you could also do things like scan

574
00:21:25,600 --> 00:21:25,840
all

575
00:21:25,840 --> 00:21:28,400
tcp ports so if the victim's machine is

576
00:21:28,400 --> 00:21:31,520
using the firefox browser web browser

577
00:21:31,520 --> 00:21:34,000
then you can scan tcp ports if the

578
00:21:34,000 --> 00:21:35,919
victim's machine is actually using

579
00:21:35,919 --> 00:21:37,520
chrome and visiting your web page

580
00:21:37,520 --> 00:21:39,679
through chrome you can actually scan udp

581
00:21:39,679 --> 00:21:43,360
ports some udp ports through that

582
00:21:43,360 --> 00:21:46,000
and the best part of all is that the

583
00:21:46,000 --> 00:21:48,640
attacker's identity is not revealed

584
00:21:48,640 --> 00:21:51,520
because this happens because the victim

585
00:21:51,520 --> 00:21:53,280
is doing the scanning on behalf of the

586
00:21:53,280 --> 00:21:54,080
attacker so

587
00:21:54,080 --> 00:21:55,919
why would the attacker's identity be

588
00:21:55,919 --> 00:21:58,000
revealed so that's the best part about

589
00:21:58,000 --> 00:21:59,679
this attack

590
00:21:59,679 --> 00:22:02,080
all right so now it's time for a demo so

591
00:22:02,080 --> 00:22:03,039
in this demo

592
00:22:03,039 --> 00:22:06,400
uh as you'll see we have a we've set up

593
00:22:06,400 --> 00:22:07,280
a website

594
00:22:07,280 --> 00:22:09,120
uh which does exactly the kind of

595
00:22:09,120 --> 00:22:11,039
scanning that we described previously

596
00:22:11,039 --> 00:22:13,039
now this website takes two input

597
00:22:13,039 --> 00:22:14,720
parameters from the user

598
00:22:14,720 --> 00:22:17,039
an ip address and a port and this is the

599
00:22:17,039 --> 00:22:18,159
ip port

600
00:22:18,159 --> 00:22:22,640
pair that the website will scan

601
00:22:22,640 --> 00:22:25,520
through your victim browser and then

602
00:22:25,520 --> 00:22:26,000
report

603
00:22:26,000 --> 00:22:30,000
whether uh it's closed or open and so

604
00:22:30,000 --> 00:22:33,679
we are going to be demoing this tool as

605
00:22:33,679 --> 00:22:36,000
a victim so we'll be visiting this

606
00:22:36,000 --> 00:22:36,720
website

607
00:22:36,720 --> 00:22:39,280
um through the victims browser and we'll

608
00:22:39,280 --> 00:22:41,919
give it our own ip address and port

609
00:22:41,919 --> 00:22:46,080
and basically we will see if the website

610
00:22:46,080 --> 00:22:48,799
is able to get the scanning to work in

611
00:22:48,799 --> 00:22:50,640
the way that we described or not

612
00:22:50,640 --> 00:22:54,720
all right so demo time

613
00:22:54,720 --> 00:22:57,120
okay

614
00:22:57,760 --> 00:23:00,880
so here you see we have the website uh

615
00:23:00,880 --> 00:23:02,720
that we set up for this demo

616
00:23:02,720 --> 00:23:05,440
it takes an ip and a port as http

617
00:23:05,440 --> 00:23:06,559
parameters

618
00:23:06,559 --> 00:23:09,600
so we gave it localhost and port 7000 as

619
00:23:09,600 --> 00:23:10,799
the ipn port

620
00:23:10,799 --> 00:23:14,000
it reports that port 7000 on localhost

621
00:23:14,000 --> 00:23:15,200
is closed

622
00:23:15,200 --> 00:23:18,159
now we're on the victim machine so we

623
00:23:18,159 --> 00:23:20,320
can actually just go and open

624
00:23:20,320 --> 00:23:24,240
um port 7000 on the victim's machine

625
00:23:24,240 --> 00:23:27,840
and then we can reload this web page to

626
00:23:27,840 --> 00:23:28,880
see

627
00:23:28,880 --> 00:23:31,919
if it indeed reports whether this port

628
00:23:31,919 --> 00:23:34,559
is open or close and now if we see that

629
00:23:34,559 --> 00:23:36,799
it reports that the port is open

630
00:23:36,799 --> 00:23:39,600
um because we just opened it and we go

631
00:23:39,600 --> 00:23:40,559
to the

632
00:23:40,559 --> 00:23:42,480
port and we see that there's a bunch of

633
00:23:42,480 --> 00:23:44,320
traffic this is the traffic that the

634
00:23:44,320 --> 00:23:46,320
victims browser sent to this port to try

635
00:23:46,320 --> 00:23:49,360
to verify whether it's a valid alt svc

636
00:23:49,360 --> 00:23:53,600
for the attacker's domain

637
00:23:56,559 --> 00:24:00,320
okay and now for the fifth of our tax

638
00:24:00,320 --> 00:24:03,360
uh abuses malware protection

639
00:24:03,360 --> 00:24:06,799
bypass so let's say you're a victim

640
00:24:06,799 --> 00:24:09,480
browser and you want to go to

641
00:24:09,480 --> 00:24:11,440
www.dangerous.com now

642
00:24:11,440 --> 00:24:12,960
dangerous.com is not actually a

643
00:24:12,960 --> 00:24:14,559
dangerous site

644
00:24:14,559 --> 00:24:16,159
it happens to be it seems like a

645
00:24:16,159 --> 00:24:18,000
perfectly reputable site but let's

646
00:24:18,000 --> 00:24:19,760
assume for the sake of this presentation

647
00:24:19,760 --> 00:24:22,000
that it's a dangerous site

648
00:24:22,000 --> 00:24:24,640
okay so if it has been deemed a

649
00:24:24,640 --> 00:24:25,840
dangerous site

650
00:24:25,840 --> 00:24:28,320
you have something called safe browsing

651
00:24:28,320 --> 00:24:28,880
which

652
00:24:28,880 --> 00:24:33,840
will block dangers.com

653
00:24:33,840 --> 00:24:36,320
when when you've typed it into your url

654
00:24:36,320 --> 00:24:36,880
bar

655
00:24:36,880 --> 00:24:41,360
or in images uh in html code

656
00:24:41,360 --> 00:24:43,919
and will display the following really

657
00:24:43,919 --> 00:24:45,039
sinister

658
00:24:45,039 --> 00:24:48,320
scary alert when you try to access

659
00:24:48,320 --> 00:24:49,520
dangerous.com

660
00:24:49,520 --> 00:24:52,000
deceptive sight ahead attackers may

661
00:24:52,000 --> 00:24:53,840
trick you into doing something dangerous

662
00:24:53,840 --> 00:24:55,279
etc etc etc

663
00:24:55,279 --> 00:24:58,080
which we wouldn't want at blackhead asia

664
00:24:58,080 --> 00:24:58,880
okay

665
00:24:58,880 --> 00:25:03,440
so um consider now using an alternative

666
00:25:03,440 --> 00:25:04,480
services

667
00:25:04,480 --> 00:25:07,679
to do the follows following set up your

668
00:25:07,679 --> 00:25:10,559
own www.example.com

669
00:25:10,559 --> 00:25:13,600
website and include an alternative

670
00:25:13,600 --> 00:25:14,400
service

671
00:25:14,400 --> 00:25:18,320
header that redirects all traffic

672
00:25:18,320 --> 00:25:21,760
to www.dangerous.com

673
00:25:21,760 --> 00:25:24,720
now as i said alternative services

674
00:25:24,720 --> 00:25:26,720
function below the browser

675
00:25:26,720 --> 00:25:28,880
and what happens is it also functions

676
00:25:28,880 --> 00:25:30,080
below what

677
00:25:30,080 --> 00:25:33,440
the safe browsing scanners look for

678
00:25:33,440 --> 00:25:36,000
so they'll look for example.com see that

679
00:25:36,000 --> 00:25:37,840
it is perfectly benign

680
00:25:37,840 --> 00:25:39,760
and not recognize the fact that the

681
00:25:39,760 --> 00:25:41,840
clients will be shunted to dangerous dot

682
00:25:41,840 --> 00:25:42,640
com

683
00:25:42,640 --> 00:25:45,120
okay and

684
00:25:46,720 --> 00:25:49,840
in effect we have set up a turnstile

685
00:25:49,840 --> 00:25:54,240
but we have a wide open hollow path

686
00:25:54,240 --> 00:25:57,520
right next to it and this allows you to

687
00:25:57,520 --> 00:25:59,279
bypass malware protection

688
00:25:59,279 --> 00:26:02,640
on these browsers okay but why is this

689
00:26:02,640 --> 00:26:05,840
actually dangerous now to answer this we

690
00:26:05,840 --> 00:26:07,679
need to examine closely how

691
00:26:07,679 --> 00:26:10,559
most of these website malware scanners

692
00:26:10,559 --> 00:26:12,000
actually work

693
00:26:12,000 --> 00:26:15,000
so let's say we have a website

694
00:26:15,000 --> 00:26:17,039
example.com that has an

695
00:26:17,039 --> 00:26:20,559
alt scc example2.com um

696
00:26:20,559 --> 00:26:23,840
so and we have an automated scanner that

697
00:26:23,840 --> 00:26:26,320
wants to scan example.com for malware

698
00:26:26,320 --> 00:26:28,320
so what the automated scanner does is it

699
00:26:28,320 --> 00:26:29,840
just loads all of the content from

700
00:26:29,840 --> 00:26:31,200
example.com

701
00:26:31,200 --> 00:26:32,799
and it examines the content of

702
00:26:32,799 --> 00:26:34,400
example.com

703
00:26:34,400 --> 00:26:38,159
and does not in fact examine the content

704
00:26:38,159 --> 00:26:41,360
of example2.com so the alt svc

705
00:26:41,360 --> 00:26:45,760
so the alt scc endpoint is actually not

706
00:26:45,760 --> 00:26:48,080
verified and as long as the original

707
00:26:48,080 --> 00:26:48,960
endpoint has

708
00:26:48,960 --> 00:26:52,080
benign content these automated scanners

709
00:26:52,080 --> 00:26:55,120
will not um block

710
00:26:55,120 --> 00:26:59,039
the original endpoint

711
00:26:59,039 --> 00:27:02,640
so this this this actually leads to two

712
00:27:02,640 --> 00:27:04,000
different scenarios so the first

713
00:27:04,000 --> 00:27:04,960
scenario

714
00:27:04,960 --> 00:27:07,200
is kind of like the not useful scenario

715
00:27:07,200 --> 00:27:08,240
where we have

716
00:27:08,240 --> 00:27:11,840
um two websites obviously the original

717
00:27:11,840 --> 00:27:14,559
endpoint and the alternative endpoint

718
00:27:14,559 --> 00:27:16,880
and example so the original endpoint is

719
00:27:16,880 --> 00:27:19,919
example.com alternative is dangerous.com

720
00:27:19,919 --> 00:27:22,159
and both of them host malware so in this

721
00:27:22,159 --> 00:27:24,240
case it's kind of like pointless because

722
00:27:24,240 --> 00:27:25,919
the automated scanner is going to check

723
00:27:25,919 --> 00:27:27,039
the original endpoint

724
00:27:27,039 --> 00:27:29,360
it's going to see the malware and game

725
00:27:29,360 --> 00:27:30,559
over bam

726
00:27:30,559 --> 00:27:33,840
this website is blacklisted however the

727
00:27:33,840 --> 00:27:36,080
more insidious thing to do would be

728
00:27:36,080 --> 00:27:39,760
this so you have the original endpoint

729
00:27:39,760 --> 00:27:42,799
host the benign content so there's only

730
00:27:42,799 --> 00:27:44,799
benign content on the eurozone endpoint

731
00:27:44,799 --> 00:27:46,559
and all of the malware all the dangerous

732
00:27:46,559 --> 00:27:48,640
stuff is on the alt scc endpoint

733
00:27:48,640 --> 00:27:50,080
and this time what happens is the

734
00:27:50,080 --> 00:27:52,559
automated scanners look at the benign

735
00:27:52,559 --> 00:27:56,159
uh original endpoint passes the check

736
00:27:56,159 --> 00:27:59,120
and voila nothing happens and the

737
00:27:59,120 --> 00:28:00,720
original endpoint is

738
00:28:00,720 --> 00:28:02,720
in fact not blacklisted because the

739
00:28:02,720 --> 00:28:04,880
standards never checked the alt-scc

740
00:28:04,880 --> 00:28:07,600
however we know that browsers in fact do

741
00:28:07,600 --> 00:28:09,679
honor the alt-scc and so and they in

742
00:28:09,679 --> 00:28:10,080
fact

743
00:28:10,080 --> 00:28:12,720
will load the content from the alt-scc

744
00:28:12,720 --> 00:28:14,559
and so they'll end up getting like this

745
00:28:14,559 --> 00:28:15,200
home

746
00:28:15,200 --> 00:28:17,279
all of the malicious content that these

747
00:28:17,279 --> 00:28:18,880
scanners were trying to block in the

748
00:28:18,880 --> 00:28:20,480
first place

749
00:28:20,480 --> 00:28:22,559
and so a lot of automated scanners

750
00:28:22,559 --> 00:28:23,840
pretty much every one of them

751
00:28:23,840 --> 00:28:26,080
is vulnerable to them to this attack

752
00:28:26,080 --> 00:28:28,480
because no one checks the alt svc so url

753
00:28:28,480 --> 00:28:31,279
void buyers total security ipvoid

754
00:28:31,279 --> 00:28:33,120
all of these are vulnerable to this type

755
00:28:33,120 --> 00:28:35,679
of two-faced content attack

756
00:28:35,679 --> 00:28:37,919
so to demo this we basically have a

757
00:28:37,919 --> 00:28:39,360
setup where

758
00:28:39,360 --> 00:28:41,039
we have an original endpoint that hosts

759
00:28:41,039 --> 00:28:42,799
benign content and

760
00:28:42,799 --> 00:28:46,240
an auth svc that has malicious content

761
00:28:46,240 --> 00:28:49,520
now let's take a look at the demo

762
00:28:52,640 --> 00:28:56,240
so we have our website

763
00:28:56,240 --> 00:28:59,120
that has benign content so this is a

764
00:28:59,120 --> 00:29:00,159
benign website

765
00:29:00,159 --> 00:29:03,360
original endpoint nothing wrong

766
00:29:03,360 --> 00:29:04,960
wholesome content

767
00:29:04,960 --> 00:29:08,399
everything's hunky-dory

768
00:29:09,679 --> 00:29:12,559
however we see interestingly that this

769
00:29:12,559 --> 00:29:13,279
website

770
00:29:13,279 --> 00:29:15,679
specified an interesting author svc that

771
00:29:15,679 --> 00:29:17,919
in fact is blacklisted for having

772
00:29:17,919 --> 00:29:18,880
malware

773
00:29:18,880 --> 00:29:22,000
um but we will bypass this blacklist as

774
00:29:22,000 --> 00:29:24,159
you'll see

775
00:29:24,159 --> 00:29:25,919
because this is done through the author

776
00:29:25,919 --> 00:29:27,679
cc so you reload it

777
00:29:27,679 --> 00:29:29,440
and the reloaded content actually comes

778
00:29:29,440 --> 00:29:31,840
from the alt svc and it's scam contents

779
00:29:31,840 --> 00:29:33,120
it's malware

780
00:29:33,120 --> 00:29:36,000
and it's still loaded by your browser um

781
00:29:36,000 --> 00:29:37,200
because

782
00:29:37,200 --> 00:29:40,640
uh the safe browsing on firefox does not

783
00:29:40,640 --> 00:29:40,960
check

784
00:29:40,960 --> 00:29:43,600
the alt scc when it's looking for

785
00:29:43,600 --> 00:29:45,039
blacklisted content

786
00:29:45,039 --> 00:29:46,640
so to prove that this is actually a

787
00:29:46,640 --> 00:29:48,799
blacklist website we'll visit

788
00:29:48,799 --> 00:29:52,080
um this website directly so we visit the

789
00:29:52,080 --> 00:29:53,039
alt svc

790
00:29:53,039 --> 00:29:56,000
directly through firefox um and we see

791
00:29:56,000 --> 00:29:58,799
that this time

792
00:29:59,279 --> 00:30:02,880
it is in fact blocked if we visit this

793
00:30:02,880 --> 00:30:04,559
website directly it's marked as a

794
00:30:04,559 --> 00:30:05,279
deceptive

795
00:30:05,279 --> 00:30:07,600
website firefox does not let you visit

796
00:30:07,600 --> 00:30:09,120
it however

797
00:30:09,120 --> 00:30:12,159
if this is used as an alt svc

798
00:30:12,159 --> 00:30:14,880
then firefox allows uh this website to

799
00:30:14,880 --> 00:30:16,320
get through

800
00:30:16,320 --> 00:30:18,559
okay so we've shown these horrible

801
00:30:18,559 --> 00:30:20,320
abuses of alternative services

802
00:30:20,320 --> 00:30:21,520
how can you mitigate them we're

803
00:30:21,520 --> 00:30:24,000
responsible researchers

804
00:30:24,000 --> 00:30:26,240
the poor scan and distributed denial of

805
00:30:26,240 --> 00:30:28,159
service attacks can be mitigated by

806
00:30:28,159 --> 00:30:29,840
blocking sensitive ports just like you

807
00:30:29,840 --> 00:30:31,039
do for javascript

808
00:30:31,039 --> 00:30:32,960
but also at the lower level of

809
00:30:32,960 --> 00:30:35,120
alternative services

810
00:30:35,120 --> 00:30:38,320
safe browsing exploit uh malware

811
00:30:38,320 --> 00:30:39,919
protection bypass

812
00:30:39,919 --> 00:30:42,640
uh can be mitigated by doing domain

813
00:30:42,640 --> 00:30:44,799
checks for alternative services headers

814
00:30:44,799 --> 00:30:46,080
and not just

815
00:30:46,080 --> 00:30:48,720
uh links that are clearly visible in the

816
00:30:48,720 --> 00:30:49,360
website

817
00:30:49,360 --> 00:30:52,240
page uh the tracking and history

818
00:30:52,240 --> 00:30:54,000
exfiltration attacks

819
00:30:54,000 --> 00:30:55,760
can be mitigated by isolating the

820
00:30:55,760 --> 00:30:57,919
alternative services cache

821
00:30:57,919 --> 00:31:01,840
so they cannot be used for tracking

822
00:31:02,159 --> 00:31:04,960
okay as i mentioned we were we are

823
00:31:04,960 --> 00:31:06,240
responsible

824
00:31:06,240 --> 00:31:08,559
uh security researchers so we uh

825
00:31:08,559 --> 00:31:10,320
disclosed all of these attacks

826
00:31:10,320 --> 00:31:13,840
to industry to uh the four browsers that

827
00:31:13,840 --> 00:31:15,600
were affected firefox tore

828
00:31:15,600 --> 00:31:19,600
chrome and brave and this matrix

829
00:31:19,600 --> 00:31:22,480
describes uh the current state so

830
00:31:22,480 --> 00:31:24,480
firefox and tor both patched

831
00:31:24,480 --> 00:31:26,799
the port scan and distributed denial of

832
00:31:26,799 --> 00:31:28,480
service vulnerabilities

833
00:31:28,480 --> 00:31:32,640
uh and we got cves named for them

834
00:31:32,640 --> 00:31:34,799
the malware bypass protection as far as

835
00:31:34,799 --> 00:31:38,320
we know remains unpatched

836
00:31:38,559 --> 00:31:41,279
it's still there tracking and history

837
00:31:41,279 --> 00:31:42,720
exfiltration

838
00:31:42,720 --> 00:31:45,679
is in process but we haven't seen any

839
00:31:45,679 --> 00:31:48,960
concrete results yet

840
00:31:49,679 --> 00:31:53,600
and uh so to conclude you have this

841
00:31:53,600 --> 00:31:56,240
new but widely adopted alternative

842
00:31:56,240 --> 00:31:57,279
services header

843
00:31:57,279 --> 00:32:00,399
it seems like a very simple idea

844
00:32:00,399 --> 00:32:02,720
a simple additional header to a well

845
00:32:02,720 --> 00:32:04,559
understood protocol

846
00:32:04,559 --> 00:32:07,440
and it's vulnerable we found five

847
00:32:07,440 --> 00:32:08,240
attacks

848
00:32:08,240 --> 00:32:10,720
despite the fact that http has been

849
00:32:10,720 --> 00:32:13,120
around for a couple decades

850
00:32:13,120 --> 00:32:15,200
and the fact that the browser developers

851
00:32:15,200 --> 00:32:16,640
are actually very competent

852
00:32:16,640 --> 00:32:18,399
you know they are they have security

853
00:32:18,399 --> 00:32:19,760
professionals they have

854
00:32:19,760 --> 00:32:21,519
a clear understanding of how to build

855
00:32:21,519 --> 00:32:23,360
browsers and yet

856
00:32:23,360 --> 00:32:26,640
it's not easy to secure uh

857
00:32:26,640 --> 00:32:32,159
anything much less simple http header

858
00:32:32,159 --> 00:32:35,840
so our conclusion is don't drink an

859
00:32:35,840 --> 00:32:43,840
alternative service thank you very much

