1
00:00:05,759 --> 00:00:07,680
before we will start our

2
00:00:07,680 --> 00:00:09,599
presentation i would like to first

3
00:00:09,599 --> 00:00:11,679
introduce myself

4
00:00:11,679 --> 00:00:14,400
uh my name is griegos viper i'm living

5
00:00:14,400 --> 00:00:16,400
in poland so i'm currently working

6
00:00:16,400 --> 00:00:19,199
around 15 years in

7
00:00:19,199 --> 00:00:23,519
ide i in the past i had

8
00:00:23,519 --> 00:00:26,320
different positions like network

9
00:00:26,320 --> 00:00:28,000
engineer architect

10
00:00:28,000 --> 00:00:31,039
also developer for both back end and

11
00:00:31,039 --> 00:00:31,679
frontman

12
00:00:31,679 --> 00:00:34,800
and different applications

13
00:00:34,800 --> 00:00:38,160
then i move to the security field

14
00:00:38,160 --> 00:00:40,719
i am one of the author of the raiden

15
00:00:40,719 --> 00:00:43,520
that will be presented

16
00:00:43,520 --> 00:00:47,600
today i also had a pleasure to present

17
00:00:47,600 --> 00:00:49,840
in different conferences

18
00:00:49,840 --> 00:00:53,680
uh usa like hardware io

19
00:00:53,680 --> 00:00:58,239
or in europe and in poland

20
00:00:58,239 --> 00:01:01,840
and now uh i can present on the

21
00:01:01,840 --> 00:01:04,640
blackhead which is

22
00:01:05,438 --> 00:01:09,760
also pleasure and nice nomination

23
00:01:09,760 --> 00:01:12,880
other than that

24
00:01:12,880 --> 00:01:16,560
i mostly focused on the software and

25
00:01:16,560 --> 00:01:21,200
hardware side when doing security tests

26
00:01:21,200 --> 00:01:24,479
i hold master degree and

27
00:01:24,479 --> 00:01:25,680
i don't have currently any

28
00:01:25,680 --> 00:01:27,840
certifications but in the past i had

29
00:01:27,840 --> 00:01:28,240
also

30
00:01:28,240 --> 00:01:32,000
ccie from uh cisco when i was

31
00:01:32,000 --> 00:01:35,040
working worked as a network engineer

32
00:01:35,040 --> 00:01:37,680
for now my current position is senior

33
00:01:37,680 --> 00:01:39,119
security consultant

34
00:01:39,119 --> 00:01:44,320
for ibm exposred

35
00:01:45,200 --> 00:01:47,520
thank you

36
00:01:49,200 --> 00:01:51,520
and i'm adam laurie i also work for ibm

37
00:01:51,520 --> 00:01:52,479
xbox red

38
00:01:52,479 --> 00:01:55,680
as the lead hardware hacker and

39
00:01:55,680 --> 00:01:58,320
i'm an associate partner here i've been

40
00:01:58,320 --> 00:02:00,880
in this industry for over 30 years

41
00:02:00,880 --> 00:02:03,920
and i started in the defensive side of

42
00:02:03,920 --> 00:02:05,920
the house the blue team

43
00:02:05,920 --> 00:02:08,560
and more recently have moved over to the

44
00:02:08,560 --> 00:02:09,520
red team

45
00:02:09,520 --> 00:02:13,040
doing offensive security specializing in

46
00:02:13,040 --> 00:02:13,760
hardware

47
00:02:13,760 --> 00:02:16,959
and embedded systems

48
00:02:19,680 --> 00:02:21,680
so before we begin we should talk a bit

49
00:02:21,680 --> 00:02:23,520
about

50
00:02:23,520 --> 00:02:26,400
what is raiden and actually what is

51
00:02:26,400 --> 00:02:27,840
glitching

52
00:02:27,840 --> 00:02:31,040
so raiden is a glitching tool and

53
00:02:31,040 --> 00:02:31,840
glitching

54
00:02:31,840 --> 00:02:36,879
is the process of introducing a fault

55
00:02:36,879 --> 00:02:40,640
but a very precisely controlled call so

56
00:02:40,640 --> 00:02:43,840
normally it's done to the clock or the

57
00:02:43,840 --> 00:02:45,680
power lines on the check

58
00:02:45,680 --> 00:02:49,280
but it can be induced via emp

59
00:02:49,280 --> 00:02:52,319
or light or heat or anything that

60
00:02:52,319 --> 00:02:57,040
causes the device to malfunction

61
00:02:57,040 --> 00:03:00,560
but power and clock are the most easy to

62
00:03:00,560 --> 00:03:01,120
control

63
00:03:01,120 --> 00:03:02,879
very precisely so that's where you

64
00:03:02,879 --> 00:03:04,879
normally see it

65
00:03:04,879 --> 00:03:06,879
so basically what it's doing as you can

66
00:03:06,879 --> 00:03:08,319
see on this oscilloscope

67
00:03:08,319 --> 00:03:11,760
trace here uh you're introducing very

68
00:03:11,760 --> 00:03:13,120
very

69
00:03:13,120 --> 00:03:16,319
short glitches or

70
00:03:16,319 --> 00:03:19,760
drops in power at a very precisely

71
00:03:19,760 --> 00:03:20,879
controlled moment

72
00:03:20,879 --> 00:03:24,080
so if you do it precisely enough you can

73
00:03:24,080 --> 00:03:27,360
actually corrupt a single instruction

74
00:03:27,360 --> 00:03:31,040
so for example if a value is being

75
00:03:31,040 --> 00:03:32,080
loaded

76
00:03:32,080 --> 00:03:35,920
from memory from say flash ram

77
00:03:35,920 --> 00:03:40,080
into memory on the chip

78
00:03:40,080 --> 00:03:41,840
if you glitch at just the right moment

79
00:03:41,840 --> 00:03:44,640
you potentially can corrupt that value

80
00:03:44,640 --> 00:03:47,440
so if that value is being used to check

81
00:03:47,440 --> 00:03:48,239
um

82
00:03:48,239 --> 00:03:50,799
security decision like a password or a

83
00:03:50,799 --> 00:03:52,239
yes no

84
00:03:52,239 --> 00:03:55,519
um state then if you corrupt it at just

85
00:03:55,519 --> 00:03:56,799
the right moment you can

86
00:03:56,799 --> 00:03:58,879
potentially override that decision and

87
00:03:58,879 --> 00:04:01,360
change the outcome

88
00:04:01,360 --> 00:04:03,280
if you glitch too hard or at the wrong

89
00:04:03,280 --> 00:04:04,879
time

90
00:04:04,879 --> 00:04:06,400
essentially you can just crash the

91
00:04:06,400 --> 00:04:09,439
device altogether

92
00:04:10,080 --> 00:04:12,319
so what we need is a tool that's very

93
00:04:12,319 --> 00:04:15,360
precise and easy to control

94
00:04:15,360 --> 00:04:17,839
so the plan when we started looking at

95
00:04:17,839 --> 00:04:19,199
raiden

96
00:04:19,199 --> 00:04:20,798
we looked at tools that were available

97
00:04:20,798 --> 00:04:22,639
on the market and

98
00:04:22,639 --> 00:04:24,960
some of them were expensive or over

99
00:04:24,960 --> 00:04:26,960
complicated

100
00:04:26,960 --> 00:04:29,280
and so we wanted to just create

101
00:04:29,280 --> 00:04:30,400
something

102
00:04:30,400 --> 00:04:33,520
that did everything we needed to do um

103
00:04:33,520 --> 00:04:36,320
but was very low cost and i'm a great

104
00:04:36,320 --> 00:04:38,400
believer in open source i wanted to open

105
00:04:38,400 --> 00:04:40,080
source it

106
00:04:40,080 --> 00:04:43,280
happily we've been allowed to do that

107
00:04:43,280 --> 00:04:45,919
from our employer so we will be

108
00:04:45,919 --> 00:04:46,960
publishing the code

109
00:04:46,960 --> 00:04:50,720
after this uh so yeah we wanted very low

110
00:04:50,720 --> 00:04:51,120
cost

111
00:04:51,120 --> 00:04:54,160
open source um and so to do that we

112
00:04:54,160 --> 00:04:56,320
settled on a

113
00:04:56,320 --> 00:04:59,840
very simple fpga design but that also

114
00:04:59,840 --> 00:05:01,280
means it's very easy because

115
00:05:01,280 --> 00:05:03,199
we're using standard verilog it's very

116
00:05:03,199 --> 00:05:05,840
easy to port that onto other hardware so

117
00:05:05,840 --> 00:05:07,520
if you need a faster

118
00:05:07,520 --> 00:05:10,800
glitcher or a more powerful

119
00:05:10,800 --> 00:05:13,440
processor or whatever you can just

120
00:05:13,440 --> 00:05:15,120
switch to a different platform and it

121
00:05:15,120 --> 00:05:15,759
should port

122
00:05:15,759 --> 00:05:18,639
pretty easily we also wanted it to be

123
00:05:18,639 --> 00:05:19,520
independent

124
00:05:19,520 --> 00:05:23,680
of the um the final delivery mechanism

125
00:05:23,680 --> 00:05:24,400
so

126
00:05:24,400 --> 00:05:27,520
um that the glitcher is purely for

127
00:05:27,520 --> 00:05:28,240
timing

128
00:05:28,240 --> 00:05:31,919
purposes it's not um delivering the

129
00:05:31,919 --> 00:05:32,720
actual

130
00:05:32,720 --> 00:05:35,360
uh fault into the device so it controls

131
00:05:35,360 --> 00:05:37,039
either a power amp

132
00:05:37,039 --> 00:05:40,240
or a power switch or an emfi uh

133
00:05:40,240 --> 00:05:44,320
injector or whatever um so it's only job

134
00:05:44,320 --> 00:05:45,759
is to do the logic of

135
00:05:45,759 --> 00:05:48,240
when you want to glitch how often you

136
00:05:48,240 --> 00:05:49,600
want to glitch

137
00:05:49,600 --> 00:05:53,520
and the width of the pulse and so on

138
00:05:53,520 --> 00:05:56,560
so for the hardware we settled on this

139
00:05:56,560 --> 00:05:57,520
guy the

140
00:05:57,520 --> 00:06:02,479
xilinx arctic 7 known as the rt

141
00:06:02,560 --> 00:06:07,039
very low cost very powerful board

142
00:06:07,039 --> 00:06:10,160
and um very easy to program

143
00:06:10,160 --> 00:06:13,280
and to hook up you know it's got loads

144
00:06:13,280 --> 00:06:15,199
of as you can see it's got a

145
00:06:15,199 --> 00:06:19,039
whole bunch of gpio ports um so very

146
00:06:19,039 --> 00:06:20,560
easy to connect

147
00:06:20,560 --> 00:06:23,280
and turn greg was just gonna talk more

148
00:06:23,280 --> 00:06:24,960
about the actual detail of

149
00:06:24,960 --> 00:06:35,840
what goes on inside

150
00:06:39,280 --> 00:06:42,479
okay let's look inside raiden so

151
00:06:42,479 --> 00:06:44,400
here on the screen you can see vivado

152
00:06:44,400 --> 00:06:47,759
studio this is kind of the

153
00:06:47,759 --> 00:06:51,120
um that that we used to

154
00:06:51,120 --> 00:06:53,759
create uh raiden and very low code

155
00:06:53,759 --> 00:06:54,560
because the

156
00:06:54,560 --> 00:06:58,880
the very rock is the core of the raiden

157
00:06:58,880 --> 00:07:01,360
um the first file that i would like to

158
00:07:01,360 --> 00:07:02,720
show is

159
00:07:02,720 --> 00:07:06,400
constraints file this file this

160
00:07:06,400 --> 00:07:09,440
defines different signals and that are

161
00:07:09,440 --> 00:07:11,120
used by a verilog

162
00:07:11,120 --> 00:07:14,720
so we can treat it as like a

163
00:07:14,720 --> 00:07:17,599
variable name or something for standard

164
00:07:17,599 --> 00:07:18,319
programming

165
00:07:18,319 --> 00:07:21,199
languages uh but this is just an a

166
00:07:21,199 --> 00:07:22,240
signal name

167
00:07:22,240 --> 00:07:25,680
that we use in uh our uh

168
00:07:25,680 --> 00:07:28,000
code some of the signals as we see have

169
00:07:28,000 --> 00:07:29,039
uh

170
00:07:29,039 --> 00:07:33,280
additional configuration for a pull-up

171
00:07:33,280 --> 00:07:37,360
which is required to handle correctly

172
00:07:37,360 --> 00:07:40,080
the signals

173
00:07:41,360 --> 00:07:44,639
the top module is a module that

174
00:07:44,639 --> 00:07:48,160
has ins that has instances of different

175
00:07:48,160 --> 00:07:52,960
um of different

176
00:07:52,960 --> 00:07:56,000
modules and

177
00:07:56,000 --> 00:07:59,520
here we have definition of our

178
00:07:59,520 --> 00:08:02,080
output and input signals based on the

179
00:08:02,080 --> 00:08:04,960
constraint file

180
00:08:05,360 --> 00:08:08,479
we have some wires that

181
00:08:08,479 --> 00:08:13,280
wire our signals with with the registers

182
00:08:13,280 --> 00:08:16,319
here we have like commands module

183
00:08:16,319 --> 00:08:19,280
which is responsible to to handle all

184
00:08:19,280 --> 00:08:19,680
the

185
00:08:19,680 --> 00:08:24,800
commands and over uart uh to the raiden

186
00:08:24,800 --> 00:08:27,520
and it's getting some inputs and giving

187
00:08:27,520 --> 00:08:29,360
some outputs that are used by different

188
00:08:29,360 --> 00:08:30,319
modules

189
00:08:30,319 --> 00:08:32,958
like the most one imported which is a

190
00:08:32,958 --> 00:08:34,958
glitch module

191
00:08:34,958 --> 00:08:38,080
here so the glitch

192
00:08:38,080 --> 00:08:41,039
glitch is instance of the glitch module

193
00:08:41,039 --> 00:08:41,760
and

194
00:08:41,760 --> 00:08:45,279
it gets like delay with count the gap

195
00:08:45,279 --> 00:08:48,880
restart marks and other

196
00:08:48,880 --> 00:08:53,519
register values that are handled inside

197
00:08:53,519 --> 00:08:56,959
and based on the values that we are

198
00:08:56,959 --> 00:08:59,839
uh want to want to send and use in

199
00:08:59,839 --> 00:09:00,959
radian

200
00:09:00,959 --> 00:09:04,160
uh modulus responsing responding

201
00:09:04,160 --> 00:09:08,160
on that in the inner state machine

202
00:09:08,160 --> 00:09:11,279
uh this is just a pwm

203
00:09:11,279 --> 00:09:14,959
uh instances just for lead indication

204
00:09:14,959 --> 00:09:16,399
and some kind of

205
00:09:16,399 --> 00:09:19,440
uh debugging

206
00:09:19,519 --> 00:09:22,800
what's going on so

207
00:09:22,800 --> 00:09:26,560
top module as i mentioned have

208
00:09:26,560 --> 00:09:29,120
in instances of the modules but if we

209
00:09:29,120 --> 00:09:30,160
look on on

210
00:09:30,160 --> 00:09:33,200
specific modules

211
00:09:33,200 --> 00:09:37,120
like command we can see that it also

212
00:09:37,120 --> 00:09:38,160
have some

213
00:09:38,160 --> 00:09:41,040
other instances from the receive and

214
00:09:41,040 --> 00:09:42,160
transmit

215
00:09:42,160 --> 00:09:45,760
uh modules these these are uh created by

216
00:09:45,760 --> 00:09:47,519
chiptradis

217
00:09:47,519 --> 00:09:50,720
and modified by us uh

218
00:09:50,720 --> 00:09:54,160
for for our uh needs so we didn't like

219
00:09:54,160 --> 00:09:57,279
create a wheel from from

220
00:09:57,279 --> 00:10:00,399
from the beginning again

221
00:10:00,800 --> 00:10:04,880
and invented the wheel of course so

222
00:10:05,600 --> 00:10:10,480
the command module role is to get

223
00:10:10,480 --> 00:10:13,839
python sent commands which are represent

224
00:10:13,839 --> 00:10:18,560
by numbers

225
00:10:18,560 --> 00:10:22,079
and based on the numbers

226
00:10:22,079 --> 00:10:25,279
we are uh starting proper

227
00:10:25,279 --> 00:10:28,320
uh action in the in the state machine

228
00:10:28,320 --> 00:10:32,000
uh some um commands uh

229
00:10:32,000 --> 00:10:36,079
also uh get additional

230
00:10:36,079 --> 00:10:39,360
data uh to be processed like for example

231
00:10:39,360 --> 00:10:41,440
with or delay you need to specify

232
00:10:41,440 --> 00:10:44,240
how how much delay or what should be the

233
00:10:44,240 --> 00:10:45,279
bleach width

234
00:10:45,279 --> 00:10:50,160
or glitch count and so on in order to

235
00:10:50,160 --> 00:10:54,959
to make your glitching attack

236
00:10:54,959 --> 00:10:58,079
and command module has

237
00:10:58,079 --> 00:11:01,360
a big uh state machine that is actually

238
00:11:01,360 --> 00:11:03,040
just handling

239
00:11:03,040 --> 00:11:07,279
or the all the commands

240
00:11:07,279 --> 00:11:10,480
the glitch module itself uh it's more

241
00:11:10,480 --> 00:11:12,000
complicated

242
00:11:12,000 --> 00:11:15,839
uh because it has some

243
00:11:17,120 --> 00:11:20,160
signals that needs to match specific

244
00:11:20,160 --> 00:11:22,320
condition in order to

245
00:11:22,320 --> 00:11:26,240
to be set and

246
00:11:26,240 --> 00:11:28,079
we don't have enough time to discuss

247
00:11:28,079 --> 00:11:30,560
everything what's in the glitch module

248
00:11:30,560 --> 00:11:33,920
but from the top

249
00:11:33,920 --> 00:11:37,279
uh view uh this is how the the raden was

250
00:11:37,279 --> 00:11:38,160
created

251
00:11:38,160 --> 00:11:42,800
we have command module glitch module uh

252
00:11:42,800 --> 00:11:45,760
and actually these are the the most

253
00:11:45,760 --> 00:11:47,760
important ones that

254
00:11:47,760 --> 00:11:53,439
are our core

255
00:11:54,320 --> 00:11:58,079
and that's all about inner side of

256
00:11:58,079 --> 00:12:11,839
the writing thank you

257
00:12:13,120 --> 00:12:16,160
okay so let's look on the front and side

258
00:12:16,160 --> 00:12:17,040
of the raiden

259
00:12:17,040 --> 00:12:20,399
so this is our python api um

260
00:12:20,399 --> 00:12:23,519
this is the core module uh

261
00:12:23,519 --> 00:12:26,800
which is which is not long i mean we

262
00:12:26,800 --> 00:12:30,399
our goal was to create very simple uh

263
00:12:30,399 --> 00:12:33,519
python um code available for for

264
00:12:33,519 --> 00:12:34,639
everyone

265
00:12:34,639 --> 00:12:38,959
uh to easily understand and use raiden

266
00:12:38,959 --> 00:12:42,720
so uh here we have a class raiden

267
00:12:42,720 --> 00:12:44,320
uh with an indeed function which

268
00:12:44,320 --> 00:12:46,560
actually actually just creates an

269
00:12:46,560 --> 00:12:49,040
uart connection the serial connection

270
00:12:49,040 --> 00:12:51,200
here we just specify

271
00:12:51,200 --> 00:12:53,760
when we are creating instance of this

272
00:12:53,760 --> 00:12:56,800
class specify

273
00:12:57,279 --> 00:13:00,959
serial port we want to connect

274
00:13:00,959 --> 00:13:05,040
if you want to have some debug output

275
00:13:05,040 --> 00:13:08,000
to track what's going on and the ticks

276
00:13:08,000 --> 00:13:08,320
uh

277
00:13:08,320 --> 00:13:12,000
define if you want to use um clock ticks

278
00:13:12,000 --> 00:13:15,440
um to set some values

279
00:13:15,440 --> 00:13:20,720
or we want to use that in seconds

280
00:13:20,720 --> 00:13:23,360
here we have a dictionary with all

281
00:13:23,360 --> 00:13:24,000
available

282
00:13:24,000 --> 00:13:28,639
uh commands and earlier i presented

283
00:13:28,639 --> 00:13:30,560
numbers that represent commands and this

284
00:13:30,560 --> 00:13:32,480
is actually a front end that

285
00:13:32,480 --> 00:13:35,600
has exactly the same uh information so

286
00:13:35,600 --> 00:13:37,440
the value is just a number

287
00:13:37,440 --> 00:13:39,680
uh that we are sending and it triggers

288
00:13:39,680 --> 00:13:40,720
the proper

289
00:13:40,720 --> 00:13:44,160
uh command handling on on the back end

290
00:13:44,160 --> 00:13:45,839
of the raiden

291
00:13:45,839 --> 00:13:48,720
uh here we have a function to send

292
00:13:48,720 --> 00:13:49,279
rating

293
00:13:49,279 --> 00:13:53,120
uh commands um

294
00:13:53,120 --> 00:13:55,920
some of the some of the commands are

295
00:13:55,920 --> 00:13:56,639
just an

296
00:13:56,639 --> 00:13:59,600
ascii that that we want to to receive

297
00:13:59,600 --> 00:14:00,800
and

298
00:14:00,800 --> 00:14:03,680
we have one byte command handling and

299
00:14:03,680 --> 00:14:05,519
four byte command handling

300
00:14:05,519 --> 00:14:09,440
um these are um

301
00:14:09,440 --> 00:14:11,920
the key values from from the dictionary

302
00:14:11,920 --> 00:14:12,720
uh

303
00:14:12,720 --> 00:14:15,360
that use a single byte command so we are

304
00:14:15,360 --> 00:14:16,000
just packing

305
00:14:16,000 --> 00:14:18,160
them as a single byte and send them over

306
00:14:18,160 --> 00:14:19,760
the wire

307
00:14:19,760 --> 00:14:23,040
to raiden and here we have four byte

308
00:14:23,040 --> 00:14:26,880
commands uh handling

309
00:14:27,199 --> 00:14:30,560
where we are sending four bytes

310
00:14:30,560 --> 00:14:32,560
over wire and these are specific

311
00:14:32,560 --> 00:14:34,320
commands

312
00:14:34,320 --> 00:14:37,600
um what else uh we have also

313
00:14:37,600 --> 00:14:38,639
possibilities

314
00:14:38,639 --> 00:14:41,519
for some commands to set the value like

315
00:14:41,519 --> 00:14:42,720
glitch delay or

316
00:14:42,720 --> 00:14:47,120
count or restart or max or whatever

317
00:14:47,120 --> 00:14:51,440
if they are actually if they are

318
00:14:52,880 --> 00:14:56,399
yeah and this is the

319
00:14:56,399 --> 00:14:59,440
arm so if you want to actually

320
00:14:59,440 --> 00:15:03,920
arm our radian to be ready to

321
00:15:03,920 --> 00:15:07,519
for glitching

322
00:15:07,600 --> 00:15:10,839
possibility to set target power on off

323
00:15:10,839 --> 00:15:14,399
um this is just kind of the flux that

324
00:15:14,399 --> 00:15:15,519
was spending and

325
00:15:15,519 --> 00:15:18,399
checking the our uh flux and actually

326
00:15:18,399 --> 00:15:18,959
it's

327
00:15:18,959 --> 00:15:21,279
it's all the last one is just a build

328
00:15:21,279 --> 00:15:22,240
time

329
00:15:22,240 --> 00:15:24,000
when we want to receive the latest

330
00:15:24,000 --> 00:15:26,160
information about the code and when it

331
00:15:26,160 --> 00:15:28,800
when it were

332
00:15:28,800 --> 00:15:32,719
compiled okay

333
00:15:33,920 --> 00:15:36,800
if we here we have bunch of examples for

334
00:15:36,800 --> 00:15:38,639
different

335
00:15:38,639 --> 00:15:41,759
applications we use raiding for um

336
00:15:41,759 --> 00:15:44,639
here are interesting one with the usb

337
00:15:44,639 --> 00:15:45,519
and this

338
00:15:45,519 --> 00:15:49,759
actually used the file whisperer

339
00:15:49,759 --> 00:15:52,959
here i have it um

340
00:15:52,959 --> 00:15:57,519
so it's ui uh hardware usb trigger

341
00:15:57,519 --> 00:15:59,839
and it actually works perfectly with

342
00:15:59,839 --> 00:16:01,279
with a raiden

343
00:16:01,279 --> 00:16:04,720
uh and uh enabling the raid itself

344
00:16:04,720 --> 00:16:08,079
very very um

345
00:16:08,079 --> 00:16:11,279
very simple we just set params first we

346
00:16:11,279 --> 00:16:12,320
like

347
00:16:12,320 --> 00:16:15,680
arming to zero which means we don't we

348
00:16:15,680 --> 00:16:17,120
disarm actually

349
00:16:17,120 --> 00:16:20,800
uh raiden reset all the parameter states

350
00:16:20,800 --> 00:16:22,000
and everything from

351
00:16:22,000 --> 00:16:25,120
from uh from fpga then we are sending

352
00:16:25,120 --> 00:16:28,800
whatever commands we want arm it

353
00:16:28,800 --> 00:16:31,120
we can use to use it to power on power

354
00:16:31,120 --> 00:16:32,320
off

355
00:16:32,320 --> 00:16:35,440
and this is just five whisperer called

356
00:16:35,440 --> 00:16:38,480
and we just wait in the loop until we're

357
00:16:38,480 --> 00:16:40,399
right then it's not finished uh his

358
00:16:40,399 --> 00:16:43,120
cycle just passing and when

359
00:16:43,120 --> 00:16:47,199
waiting until the trigger uh triggering

360
00:16:47,199 --> 00:16:50,480
actually trigger right into

361
00:16:50,480 --> 00:16:54,079
to set a glitching based on

362
00:16:54,079 --> 00:16:57,600
this um trigger condition saved by the

363
00:16:57,600 --> 00:16:58,160
f5

364
00:16:58,160 --> 00:17:01,040
uh whisperer we also use it standalone

365
00:17:01,040 --> 00:17:02,000
adam

366
00:17:02,000 --> 00:17:06,160
major will present uh in his demo

367
00:17:06,160 --> 00:17:09,439
and yeah that's that's all about

368
00:17:09,439 --> 00:17:13,919
um raiden

369
00:17:16,839 --> 00:17:18,319
frontend

370
00:17:18,319 --> 00:17:21,839
now let's talk about writing pinout

371
00:17:21,839 --> 00:17:25,520
so if we look on the writing board um

372
00:17:25,520 --> 00:17:29,360
we decide to utilize basically

373
00:17:29,360 --> 00:17:32,880
input and output connections to

374
00:17:32,880 --> 00:17:35,440
external shields like arduino because

375
00:17:35,440 --> 00:17:35,919
they are

376
00:17:35,919 --> 00:17:39,760
easily accessible and they have also

377
00:17:39,760 --> 00:17:44,640
protected resistors so it's

378
00:17:44,799 --> 00:17:49,440
it's better to to utilize this io

379
00:17:49,679 --> 00:17:53,120
first let's talk about external

380
00:17:53,120 --> 00:17:54,559
connections

381
00:17:54,559 --> 00:17:58,960
um this is where we can

382
00:17:59,440 --> 00:18:02,480
get a trigger in to

383
00:18:02,480 --> 00:18:06,400
the raiden and glitch based on the

384
00:18:06,400 --> 00:18:10,000
signal received on io29

385
00:18:10,000 --> 00:18:13,919
um other ios we see that

386
00:18:13,919 --> 00:18:17,200
like reset out or invert glitch

387
00:18:17,200 --> 00:18:21,200
they are used for other applications

388
00:18:21,200 --> 00:18:25,600
that we will also talk about later

389
00:18:26,240 --> 00:18:28,720
but the most important is triggering uh

390
00:18:28,720 --> 00:18:31,039
in this case

391
00:18:31,039 --> 00:18:34,400
uh here we have a connection with

392
00:18:34,400 --> 00:18:36,480
internal trigger we call it integer

393
00:18:36,480 --> 00:18:38,480
trigger but this is actually the reset

394
00:18:38,480 --> 00:18:39,840
out signal

395
00:18:39,840 --> 00:18:43,840
send and generate from the raiden

396
00:18:43,840 --> 00:18:46,880
to the target board

397
00:18:46,880 --> 00:18:50,160
reset signal actually mostly

398
00:18:50,160 --> 00:18:54,000
so in this connection

399
00:18:54,000 --> 00:18:58,559
what is required is to connect 3.3 volt

400
00:18:58,559 --> 00:19:01,440
output pin available on the raden to the

401
00:19:01,440 --> 00:19:02,880
triggering

402
00:19:02,880 --> 00:19:06,480
um directly so we are creating here like

403
00:19:06,480 --> 00:19:07,600
a bridge

404
00:19:07,600 --> 00:19:11,120
um and the reset out

405
00:19:11,120 --> 00:19:13,440
signal needs to be connected to the

406
00:19:13,440 --> 00:19:15,840
reset of the target device

407
00:19:15,840 --> 00:19:19,360
this will allow us to

408
00:19:19,360 --> 00:19:22,640
uh create our own internal reset

409
00:19:22,640 --> 00:19:25,919
out and based on that we can make an

410
00:19:25,919 --> 00:19:26,559
actions

411
00:19:26,559 --> 00:19:31,440
uh to perform glitching

412
00:19:31,440 --> 00:19:36,640
so uh if we look on the raiden

413
00:19:36,840 --> 00:19:38,559
applications

414
00:19:38,559 --> 00:19:42,559
uh the first one is a connection to the

415
00:19:42,559 --> 00:19:45,919
max four six one nine cpe

416
00:19:45,919 --> 00:19:49,280
uh it's very common uh switch uh

417
00:19:49,280 --> 00:19:52,640
used uh in many other solutions

418
00:19:52,640 --> 00:19:57,600
like uh cheap fair guys uh project

419
00:19:57,600 --> 00:20:00,960
this is our glitching front end

420
00:20:00,960 --> 00:20:04,080
and in order for it to work uh what

421
00:20:04,080 --> 00:20:04,480
which

422
00:20:04,480 --> 00:20:07,280
what is required is our proper

423
00:20:07,280 --> 00:20:08,480
connections

424
00:20:08,480 --> 00:20:12,320
so um we need two power supplies

425
00:20:12,320 --> 00:20:16,880
um or one power supply with a lot of

426
00:20:16,880 --> 00:20:20,240
uh available

427
00:20:21,280 --> 00:20:25,120
signals but we utilize

428
00:20:25,120 --> 00:20:29,600
here two power supplies in this setup

429
00:20:29,600 --> 00:20:34,719
and one power supply is providing

430
00:20:35,360 --> 00:20:38,799
target core vdd and the second one is

431
00:20:38,799 --> 00:20:41,440
used for the glitch signal that we can

432
00:20:41,440 --> 00:20:43,600
handle and the amplitude of the signal

433
00:20:43,600 --> 00:20:45,280
so whenever we'll

434
00:20:45,280 --> 00:20:50,159
drop or raise up

435
00:20:50,159 --> 00:20:53,039
voltage on power supply one this is how

436
00:20:53,039 --> 00:20:54,480
it should be affected on the

437
00:20:54,480 --> 00:20:55,840
oscilloscope

438
00:20:55,840 --> 00:20:58,960
and also in the glitch signal uh

439
00:20:58,960 --> 00:21:02,640
finally uh watching which what also

440
00:21:02,640 --> 00:21:06,000
is required here is a

441
00:21:06,000 --> 00:21:09,840
connection of the uh out signal

442
00:21:09,840 --> 00:21:12,320
which is basically our glitch out signal

443
00:21:12,320 --> 00:21:12,880
is on

444
00:21:12,880 --> 00:21:16,000
um io15

445
00:21:16,000 --> 00:21:19,039
on the pin 15 actually on the on the max

446
00:21:19,039 --> 00:21:21,120
and it's when we are connecting it

447
00:21:21,120 --> 00:21:22,400
somewhere to the

448
00:21:22,400 --> 00:21:26,880
uh core voltage of the glitch

449
00:21:26,960 --> 00:21:30,480
device the glitch out signal io 41

450
00:21:30,480 --> 00:21:34,400
is connected to pin 10

451
00:21:34,400 --> 00:21:38,000
and il 29 triggering is connected to the

452
00:21:38,000 --> 00:21:39,520
trigger out signal

453
00:21:39,520 --> 00:21:44,720
of the target board

454
00:21:44,720 --> 00:21:47,440
uh other connections uh that we tested

455
00:21:47,440 --> 00:21:49,600
and support this connection to the emfi

456
00:21:49,600 --> 00:21:50,720
device like ui

457
00:21:50,720 --> 00:21:54,559
chip shelter and in order to utilize it

458
00:21:54,559 --> 00:21:57,760
um we need to use advanced breakout

459
00:21:57,760 --> 00:21:59,919
board and of course have a cheap shower

460
00:21:59,919 --> 00:22:01,039
available

461
00:22:01,039 --> 00:22:04,480
but i tested this signal on one

462
00:22:04,480 --> 00:22:06,720
this setup on the one of the projects

463
00:22:06,720 --> 00:22:07,919
and it worked

464
00:22:07,919 --> 00:22:12,559
perfectly giving a nice results so

465
00:22:12,559 --> 00:22:15,039
uh in this case what is required we

466
00:22:15,039 --> 00:22:16,480
first need to power all

467
00:22:16,480 --> 00:22:19,200
somehow power on the board we can do it

468
00:22:19,200 --> 00:22:19,840
from a right

469
00:22:19,840 --> 00:22:23,840
end from the 3.3 volt outage signal

470
00:22:23,840 --> 00:22:26,960
available or from some other external

471
00:22:26,960 --> 00:22:28,159
power supply

472
00:22:28,159 --> 00:22:31,840
we need to connect io 38

473
00:22:31,840 --> 00:22:34,320
it's important 38 which is inverting our

474
00:22:34,320 --> 00:22:34,880
glitch

475
00:22:34,880 --> 00:22:37,520
which which is required actually for the

476
00:22:37,520 --> 00:22:40,159
chip shelter to handle it correctly

477
00:22:40,159 --> 00:22:42,559
and we are connecting into the hardware

478
00:22:42,559 --> 00:22:45,120
triggering

479
00:22:45,360 --> 00:22:49,280
sorry we are connecting the hs2 in which

480
00:22:49,280 --> 00:22:51,200
is basically a clock in

481
00:22:51,200 --> 00:22:54,640
on the advanced breakup board and

482
00:22:54,640 --> 00:22:58,000
we need to open this pin on the switch

483
00:22:58,000 --> 00:22:59,760
available on the breakout board i will

484
00:22:59,760 --> 00:23:02,320
show that in a minute on the next slide

485
00:23:02,320 --> 00:23:05,120
and from

486
00:23:06,159 --> 00:23:09,440
available out port

487
00:23:09,440 --> 00:23:11,310
which is

488
00:23:11,310 --> 00:23:13,360
[Music]

489
00:23:13,360 --> 00:23:16,000
we we connected to the trigger in

490
00:23:16,000 --> 00:23:17,840
hardware triggering on the new

491
00:23:17,840 --> 00:23:20,400
chip shutter in this setup we are not

492
00:23:20,400 --> 00:23:21,360
utilizing

493
00:23:21,360 --> 00:23:26,080
like a cpu uh possibility of the new eye

494
00:23:26,080 --> 00:23:29,600
instead using the codes um on the on the

495
00:23:29,600 --> 00:23:32,400
cpu we're just using a chip shelter

496
00:23:32,400 --> 00:23:36,400
as pure emfi

497
00:23:36,400 --> 00:23:39,679
uh device right with

498
00:23:39,679 --> 00:23:42,480
emfi pro this is basically actually our

499
00:23:42,480 --> 00:23:43,039
probe

500
00:23:43,039 --> 00:23:45,120
and internally the trigger hardware

501
00:23:45,120 --> 00:23:48,840
triggering is connected directly to the

502
00:23:48,840 --> 00:23:51,360
um to the

503
00:23:51,360 --> 00:23:54,799
out probe of the emfi and this is a

504
00:23:54,799 --> 00:23:56,080
breakout board

505
00:23:56,080 --> 00:23:58,640
here we see the yellow cable uh is

506
00:23:58,640 --> 00:23:59,640
connecting

507
00:23:59,640 --> 00:24:03,360
io38 to hs2 on

508
00:24:03,360 --> 00:24:06,640
cheap chip whisperer

509
00:24:06,640 --> 00:24:10,400
side let's say of the breaker board and

510
00:24:10,400 --> 00:24:15,679
here on the switch we are opening hs2

511
00:24:16,159 --> 00:24:20,240
to provide connection from

512
00:24:20,240 --> 00:24:23,760
here over the switch

513
00:24:23,760 --> 00:24:27,200
to uh this connection out which is

514
00:24:27,200 --> 00:24:29,520
connecting to

515
00:24:29,520 --> 00:24:33,440
uh to the cheap shoulder

516
00:24:33,440 --> 00:24:37,679
and yeah that's all about

517
00:24:44,840 --> 00:24:47,840
connections

518
00:24:51,520 --> 00:24:52,880
one of the things you need to be able to

519
00:24:52,880 --> 00:24:55,120
do is actually

520
00:24:55,120 --> 00:24:58,000
see if your glitch is having an effect

521
00:24:58,000 --> 00:24:58,400
so

522
00:24:58,400 --> 00:25:01,679
one thing you can do is um create

523
00:25:01,679 --> 00:25:05,200
code that runs on a chip and play with

524
00:25:05,200 --> 00:25:07,520
it before you actually attack a target

525
00:25:07,520 --> 00:25:07,840
so

526
00:25:07,840 --> 00:25:11,520
this is um a little

527
00:25:11,520 --> 00:25:13,360
sort of mini application that i wrote

528
00:25:13,360 --> 00:25:17,360
that runs on the lpc11u24

529
00:25:17,360 --> 00:25:19,120
and it gives you a little menu and you

530
00:25:19,120 --> 00:25:20,400
can do stuff like

531
00:25:20,400 --> 00:25:23,679
um set the code protection level and

532
00:25:23,679 --> 00:25:25,679
dump out the boot rom and

533
00:25:25,679 --> 00:25:27,919
stuff like that a few useful little

534
00:25:27,919 --> 00:25:29,120
things

535
00:25:29,120 --> 00:25:33,120
but the main purpose is this glitch test

536
00:25:33,120 --> 00:25:34,880
so basically what the glitch test does

537
00:25:34,880 --> 00:25:36,480
is it gives you

538
00:25:36,480 --> 00:25:38,880
a way of checking if your glitch is

539
00:25:38,880 --> 00:25:41,600
actually having an effect

540
00:25:41,600 --> 00:25:45,200
so if i go into glitch test mode um

541
00:25:45,200 --> 00:25:48,720
what it's doing is it's reading um

542
00:25:48,720 --> 00:25:51,919
the crp value from flash which at the

543
00:25:51,919 --> 00:25:54,240
moment is not set it's all s

544
00:25:54,240 --> 00:25:55,600
but for the purpose of testing you

545
00:25:55,600 --> 00:25:58,000
really don't care what you're changing

546
00:25:58,000 --> 00:25:59,039
it from or to

547
00:25:59,039 --> 00:26:01,200
you're just checking that you can change

548
00:26:01,200 --> 00:26:02,480
it so

549
00:26:02,480 --> 00:26:05,919
um if i if i read anything other than

550
00:26:05,919 --> 00:26:07,360
fff

551
00:26:07,360 --> 00:26:09,679
from the flash then i'd successfully

552
00:26:09,679 --> 00:26:11,200
glitched

553
00:26:11,200 --> 00:26:13,039
so when you're actually running the test

554
00:26:13,039 --> 00:26:15,919
what it does is every time you hit a g

555
00:26:15,919 --> 00:26:18,880
every time you send a g over the serial

556
00:26:18,880 --> 00:26:21,840
it will bring a gpio line high

557
00:26:21,840 --> 00:26:24,799
which you can use um synchronize your

558
00:26:24,799 --> 00:26:25,440
glitcher

559
00:26:25,440 --> 00:26:28,400
to actually trigger your glitcher it'll

560
00:26:28,400 --> 00:26:30,320
then do the comparison and then it will

561
00:26:30,320 --> 00:26:31,840
bring it low again

562
00:26:31,840 --> 00:26:34,080
so you can write a script that basically

563
00:26:34,080 --> 00:26:36,240
does that sends a g

564
00:26:36,240 --> 00:26:38,720
glitches at an offset from when that

565
00:26:38,720 --> 00:26:40,559
line goes high

566
00:26:40,559 --> 00:26:42,799
uh and checks the the response to see if

567
00:26:42,799 --> 00:26:44,720
you get a match or a mismatch so if i

568
00:26:44,720 --> 00:26:45,840
hit g

569
00:26:45,840 --> 00:26:48,880
i'll just get dots because it's always

570
00:26:48,880 --> 00:26:50,840
going to match because i'm not currently

571
00:26:50,840 --> 00:26:52,080
glitching

572
00:26:52,080 --> 00:26:54,799
but if we automate that process and i've

573
00:26:54,799 --> 00:26:57,760
got a script here

574
00:26:58,480 --> 00:27:01,279
which is just going to do that in a loop

575
00:27:01,279 --> 00:27:01,679
so

576
00:27:01,679 --> 00:27:04,799
with a bunch of different settings so

577
00:27:04,799 --> 00:27:07,520
different delays number of ticks from

578
00:27:07,520 --> 00:27:09,360
when the line goes high

579
00:27:09,360 --> 00:27:12,400
different number of um pulses in the

580
00:27:12,400 --> 00:27:13,600
glitch

581
00:27:13,600 --> 00:27:16,799
and different widths of pulse just going

582
00:27:16,799 --> 00:27:18,960
to try a few things until it

583
00:27:18,960 --> 00:27:22,080
gets a positive response from the glitch

584
00:27:22,080 --> 00:27:23,360
test

585
00:27:23,360 --> 00:27:26,000
if i come out of here and actually run

586
00:27:26,000 --> 00:27:28,240
that

587
00:27:28,880 --> 00:27:35,520
what we should see on the scope um

588
00:27:35,520 --> 00:27:38,320
what we should see on the scope is um

589
00:27:38,320 --> 00:27:39,600
you see the pulses

590
00:27:39,600 --> 00:27:41,840
uh changing number of pulses that we're

591
00:27:41,840 --> 00:27:42,880
sending

592
00:27:42,880 --> 00:27:46,080
so as we send each glitch we can see

593
00:27:46,080 --> 00:27:47,760
that we're actually having an effect and

594
00:27:47,760 --> 00:27:49,440
at some point we

595
00:27:49,440 --> 00:27:53,520
we get success so at a delay of 10

596
00:27:53,520 --> 00:27:55,600
with a width of three and a count of six

597
00:27:55,600 --> 00:27:56,640
pulses

598
00:27:56,640 --> 00:28:00,640
we successfully corrupted that memory

599
00:28:00,640 --> 00:28:03,200
and the comparison failed so we

600
00:28:03,200 --> 00:28:04,960
successfully glitched

601
00:28:04,960 --> 00:28:17,840
our check

602
00:28:23,679 --> 00:28:26,480
so right in the battle i would like to

603
00:28:26,480 --> 00:28:27,440
show you

604
00:28:27,440 --> 00:28:30,159
one of the interesting findings this

605
00:28:30,159 --> 00:28:30,880
year

606
00:28:30,880 --> 00:28:32,880
it was part of the research we've done

607
00:28:32,880 --> 00:28:35,440
with major

608
00:28:35,440 --> 00:28:38,720
and it was about usb

609
00:28:38,720 --> 00:28:42,320
stack security last year

610
00:28:42,320 --> 00:28:45,840
ui company released um a great hardwood

611
00:28:45,840 --> 00:28:46,640
trigger

612
00:28:46,640 --> 00:28:50,399
called file whisperer and

613
00:28:50,399 --> 00:28:53,520
it it put our attention on it and

614
00:28:53,520 --> 00:28:56,799
we started figure out how we can use it

615
00:28:56,799 --> 00:29:00,960
and utilize it together with raiden

616
00:29:01,679 --> 00:29:06,080
to get something interesting research

617
00:29:06,080 --> 00:29:10,000
so we started with

618
00:29:10,320 --> 00:29:14,080
selecting a target and

619
00:29:14,080 --> 00:29:17,720
our choice um go for

620
00:29:17,720 --> 00:29:21,679
stm32 the wb 55

621
00:29:21,679 --> 00:29:24,799
it's popular nuclear ostn board

622
00:29:24,799 --> 00:29:27,600
it's the newest one that supports also

623
00:29:27,600 --> 00:29:28,720
bluetooth zb

624
00:29:28,720 --> 00:29:31,760
and stuff like that

625
00:29:32,159 --> 00:29:35,440
and we start in searching uh

626
00:29:35,440 --> 00:29:40,000
information what usb stock it's using

627
00:29:40,000 --> 00:29:45,279
and we found that entire line of stm

628
00:29:45,279 --> 00:29:48,640
32 microcontrollers use the same

629
00:29:48,640 --> 00:29:51,440
usb stack so if there will be any issue

630
00:29:51,440 --> 00:29:52,960
there

631
00:29:52,960 --> 00:29:55,279
this will probably affect more than just

632
00:29:55,279 --> 00:29:56,240
one

633
00:29:56,240 --> 00:29:59,600
micro controller

634
00:30:00,080 --> 00:30:03,200
uh here we of course see um

635
00:30:03,200 --> 00:30:06,960
a screen showing that that we connected

636
00:30:06,960 --> 00:30:10,799
device to pc and

637
00:30:10,799 --> 00:30:14,240
we also uploaded the code

638
00:30:14,240 --> 00:30:18,880
to microcontroller to simulate

639
00:30:18,880 --> 00:30:21,600
for example a joystick or whatever usb

640
00:30:21,600 --> 00:30:22,559
device

641
00:30:22,559 --> 00:30:25,200
we wanted

642
00:30:26,000 --> 00:30:29,279
so before we'll go um to the details of

643
00:30:29,279 --> 00:30:31,600
our finding

644
00:30:31,600 --> 00:30:34,880
we want to first show some information

645
00:30:34,880 --> 00:30:35,440
about

646
00:30:35,440 --> 00:30:38,399
usb descriptors because this is the very

647
00:30:38,399 --> 00:30:39,039
important

648
00:30:39,039 --> 00:30:42,720
point of the research

649
00:30:42,720 --> 00:30:45,919
so usb descriptor descriptors are just

650
00:30:45,919 --> 00:30:47,840
small messages sent of the

651
00:30:47,840 --> 00:30:51,919
over a usb bus and they are

652
00:30:51,919 --> 00:30:55,279
used for different uh things

653
00:30:55,279 --> 00:30:57,200
one of them is just sending control

654
00:30:57,200 --> 00:30:59,519
messages and other also can

655
00:30:59,519 --> 00:31:03,519
be used to to send some data

656
00:31:03,519 --> 00:31:06,799
and the most important field

657
00:31:06,799 --> 00:31:11,600
in the usb descriptor is wland field

658
00:31:11,600 --> 00:31:15,200
it's it has 16 bits

659
00:31:15,200 --> 00:31:19,279
which mean uh potentially we should be

660
00:31:19,279 --> 00:31:23,120
able to send up to six five

661
00:31:23,120 --> 00:31:27,120
sixty five thousand five thirty five uh

662
00:31:27,120 --> 00:31:31,678
bytes but

663
00:31:31,840 --> 00:31:35,039
mostly uh we don't need

664
00:31:35,039 --> 00:31:37,919
this amount of data when we are just

665
00:31:37,919 --> 00:31:38,640
sending

666
00:31:38,640 --> 00:31:42,799
um when the w length field is calculated

667
00:31:42,799 --> 00:31:46,159
of the usb descriptor

668
00:31:46,159 --> 00:31:49,840
message so we started looking

669
00:31:49,840 --> 00:31:53,519
for a code for any queries

670
00:31:53,519 --> 00:31:57,919
or points where

671
00:31:57,919 --> 00:32:00,960
this length is checked or not checked

672
00:32:00,960 --> 00:32:04,080
and how it's used

673
00:32:04,480 --> 00:32:07,440
by a code

674
00:32:07,600 --> 00:32:11,679
and we found

675
00:32:11,679 --> 00:32:14,720
very interesting

676
00:32:15,360 --> 00:32:18,720
point it was under usb

677
00:32:18,720 --> 00:32:22,000
uh heat descriptor class

678
00:32:22,000 --> 00:32:25,440
and also for the the same

679
00:32:25,440 --> 00:32:28,799
actually was for the

680
00:32:28,799 --> 00:32:32,080
other dfu

681
00:32:32,080 --> 00:32:36,000
class and if you look on the line

682
00:32:36,000 --> 00:32:39,440
499 try and

683
00:32:39,440 --> 00:32:43,679
zoom that a little bit uh we can see

684
00:32:43,679 --> 00:32:47,159
a min function and also on the line

685
00:32:47,159 --> 00:32:50,799
500 0 5

686
00:32:50,799 --> 00:32:53,200
which actually it's trying to get the

687
00:32:53,200 --> 00:32:54,480
minimum value

688
00:32:54,480 --> 00:32:57,600
between the volunt that is read from a

689
00:32:57,600 --> 00:32:59,279
packet

690
00:32:59,279 --> 00:33:04,399
and some configured

691
00:33:04,720 --> 00:33:09,279
static variable uh defined in the code

692
00:33:09,279 --> 00:33:14,000
so where is the problem well

693
00:33:14,000 --> 00:33:16,720
if we look on the code itself it doesn't

694
00:33:16,720 --> 00:33:17,360
it doesn't look

695
00:33:17,360 --> 00:33:19,440
bad right because we have some meaning

696
00:33:19,440 --> 00:33:20,480
function that

697
00:33:20,480 --> 00:33:23,840
is doing this this check

698
00:33:23,840 --> 00:33:26,320
what if we'll be able to corrupt this

699
00:33:26,320 --> 00:33:27,760
function

700
00:33:27,760 --> 00:33:31,600
we have a code um so nothing stop us

701
00:33:31,600 --> 00:33:32,559
from

702
00:33:32,559 --> 00:33:35,200
for example selecting one of the io

703
00:33:35,200 --> 00:33:36,840
ports

704
00:33:36,840 --> 00:33:39,679
on the target board

705
00:33:39,679 --> 00:33:42,720
use it to set the trigger

706
00:33:42,720 --> 00:33:45,679
just a little bit after or before the

707
00:33:45,679 --> 00:33:46,399
the

708
00:33:46,399 --> 00:33:49,440
one or the second function

709
00:33:49,440 --> 00:33:52,480
and try to to to send

710
00:33:52,480 --> 00:33:56,000
a glitch that will finally

711
00:33:56,000 --> 00:33:59,600
corrupt this function and maybe

712
00:33:59,600 --> 00:34:02,640
uh the the size we will send and craft

713
00:34:02,640 --> 00:34:04,799
in our usb message

714
00:34:04,799 --> 00:34:08,480
will overwrite whatever

715
00:34:08,639 --> 00:34:12,720
whatever was before so

716
00:34:13,040 --> 00:34:16,639
let's look on the research setup

717
00:34:16,639 --> 00:34:20,560
so here we see bunch of the devices

718
00:34:20,560 --> 00:34:25,520
starting from the left left top corner

719
00:34:25,520 --> 00:34:28,399
we can see raspberry pi it could be also

720
00:34:28,399 --> 00:34:29,359
pc

721
00:34:29,359 --> 00:34:32,320
is just used to connect file whisperer

722
00:34:32,320 --> 00:34:35,119
and other devices like

723
00:34:35,119 --> 00:34:38,239
our raiden

724
00:34:38,239 --> 00:34:42,719
chip shouter to

725
00:34:42,719 --> 00:34:45,440
to together right to give it the power

726
00:34:45,440 --> 00:34:47,679
uart access and so on

727
00:34:47,679 --> 00:34:51,119
so um

728
00:34:51,119 --> 00:34:54,320
in the earlier slides i presented

729
00:34:54,320 --> 00:34:56,639
the option how we can connect emfi

730
00:34:56,639 --> 00:34:58,480
device and this is this is one of the

731
00:34:58,480 --> 00:34:59,520
setup so

732
00:34:59,520 --> 00:35:02,079
we know already how to connect over

733
00:35:02,079 --> 00:35:05,040
breakout board the chip shelter

734
00:35:05,040 --> 00:35:09,520
to the raiden and

735
00:35:09,520 --> 00:35:12,000
this is and additionally we added five

736
00:35:12,000 --> 00:35:12,720
whisperer

737
00:35:12,720 --> 00:35:14,800
for usb triggering because we want to

738
00:35:14,800 --> 00:35:16,560
trigger on

739
00:35:16,560 --> 00:35:21,839
specific usb messages

740
00:35:21,920 --> 00:35:25,359
before we were actually glitch

741
00:35:25,359 --> 00:35:28,480
in the point where we want um

742
00:35:28,480 --> 00:35:32,240
under the mean function so

743
00:35:32,240 --> 00:35:35,520
let's uh let's look

744
00:35:35,520 --> 00:35:38,960
how how it worked i mean

745
00:35:38,960 --> 00:35:41,920
i recorded

746
00:35:42,800 --> 00:35:46,560
a video uh because you know from from

747
00:35:46,560 --> 00:35:48,560
reaching is unpredictable i mean it

748
00:35:48,560 --> 00:35:50,240
could take

749
00:35:50,240 --> 00:35:52,640
10 minutes it could take one hour it

750
00:35:52,640 --> 00:35:54,640
could take days so

751
00:35:54,640 --> 00:35:57,760
um i pre i pre-recorded and

752
00:35:57,760 --> 00:36:01,440
actually just cut out um

753
00:36:01,440 --> 00:36:03,440
the most important part of the of the

754
00:36:03,440 --> 00:36:05,440
glitching process

755
00:36:05,440 --> 00:36:08,640
because um

756
00:36:08,640 --> 00:36:11,680
otherwise the video could be too long

757
00:36:11,680 --> 00:36:17,118
so let's go for it i will now

758
00:36:19,839 --> 00:36:27,839
run it

759
00:36:31,520 --> 00:36:36,320
and here we can see at the beginning

760
00:36:36,320 --> 00:36:39,760
an exception control transfer

761
00:36:39,760 --> 00:36:42,880
error no such device and it was this

762
00:36:42,880 --> 00:36:44,640
disconnected this these are these are

763
00:36:44,640 --> 00:36:46,000
just resets

764
00:36:46,000 --> 00:36:49,520
uh sent from phi uh whisperer

765
00:36:49,520 --> 00:36:52,720
uh to the target board for because each

766
00:36:52,720 --> 00:36:54,560
time the glitch is not success we want

767
00:36:54,560 --> 00:36:57,760
to restart device and start from scratch

768
00:36:57,760 --> 00:37:00,800
so in the

769
00:37:02,000 --> 00:37:06,640
here um on the bottom we can see delay

770
00:37:06,640 --> 00:37:10,000
some delay set with and repeat

771
00:37:10,000 --> 00:37:13,359
and this delay will change

772
00:37:13,359 --> 00:37:16,880
during um

773
00:37:16,880 --> 00:37:20,640
test process now it's like 3402

774
00:37:20,640 --> 00:37:24,320
and we go go go forward

775
00:37:24,320 --> 00:37:28,160
until we finally hit

776
00:37:28,160 --> 00:37:32,079
our um

777
00:37:32,079 --> 00:37:36,480
io under the mean function that that we

778
00:37:36,480 --> 00:37:37,839
configured

779
00:37:37,839 --> 00:37:40,960
and here we get like 6 5

780
00:37:40,960 --> 00:37:44,160
65 000 bytes of the data

781
00:37:44,160 --> 00:37:47,760
so if we will

782
00:37:47,760 --> 00:37:50,800
just do a quick hex dump

783
00:37:50,800 --> 00:37:53,599
on on this of the information we just

784
00:37:53,599 --> 00:37:54,480
received

785
00:37:54,480 --> 00:37:57,599
we can see a bunch of good bytes which

786
00:37:57,599 --> 00:37:58,400
means

787
00:37:58,400 --> 00:38:00,320
we corrupted the mean function and

788
00:38:00,320 --> 00:38:02,160
actually

789
00:38:02,160 --> 00:38:05,200
we received more data than we expected

790
00:38:05,200 --> 00:38:07,200
over usb

791
00:38:07,200 --> 00:38:11,200
and this data could be anything

792
00:38:11,200 --> 00:38:15,520
um it could be some information about

793
00:38:15,520 --> 00:38:19,520
secret secret key stored

794
00:38:20,160 --> 00:38:23,119
the the severity of the problem uh

795
00:38:23,119 --> 00:38:23,920
depends

796
00:38:23,920 --> 00:38:28,720
on what was after the usb descriptors

797
00:38:28,720 --> 00:38:32,160
structures so if there is some memory

798
00:38:32,160 --> 00:38:35,200
chart there and there will be

799
00:38:35,200 --> 00:38:38,320
uh sensitive information it will be

800
00:38:38,320 --> 00:38:39,599
speed out over

801
00:38:39,599 --> 00:38:42,720
uh usb and that's that's definitely

802
00:38:42,720 --> 00:38:47,839
a vulnerability that that we can

803
00:38:48,079 --> 00:38:50,880
that we can use

804
00:38:51,119 --> 00:38:54,400
okay so let's now uh

805
00:38:54,400 --> 00:38:57,440
look on on the code i mean because i

806
00:38:57,440 --> 00:39:00,480
mentioned earlier that

807
00:39:01,200 --> 00:39:03,680
integration between raden and all the

808
00:39:03,680 --> 00:39:05,839
third party devices is easy

809
00:39:05,839 --> 00:39:08,720
and i want to to prove it on on python

810
00:39:08,720 --> 00:39:10,400
on simple python script that

811
00:39:10,400 --> 00:39:14,000
actually executed what we were able to

812
00:39:14,000 --> 00:39:18,800
see on the recorded video

813
00:39:18,960 --> 00:39:24,560
so let me quickly go to the terminal

814
00:39:24,560 --> 00:39:29,119
and let's look on the code

815
00:39:29,119 --> 00:39:32,720
so here we have a function i utilized

816
00:39:32,720 --> 00:39:33,200
here

817
00:39:33,200 --> 00:39:37,760
file whisperer possibility to to make

818
00:39:37,760 --> 00:39:41,520
restarts i mean power on power of device

819
00:39:41,520 --> 00:39:46,000
uh here we have a radian a configuration

820
00:39:46,000 --> 00:39:50,400
for a uart here we have chip shelter

821
00:39:50,400 --> 00:39:53,839
uart connectivity and

822
00:39:53,839 --> 00:39:56,720
um also we have configuration for the

823
00:39:56,720 --> 00:39:57,520
file

824
00:39:57,520 --> 00:40:01,359
whisperer so

825
00:40:01,359 --> 00:40:04,960
what is most important uh in this setup

826
00:40:04,960 --> 00:40:07,119
is that everything needs to be in the

827
00:40:07,119 --> 00:40:09,599
correct order so

828
00:40:09,599 --> 00:40:12,480
we first like reset all the state of the

829
00:40:12,480 --> 00:40:13,280
radam

830
00:40:13,280 --> 00:40:16,000
um put required parameters we want to

831
00:40:16,000 --> 00:40:16,800
use during

832
00:40:16,800 --> 00:40:20,480
um glitching there is some information

833
00:40:20,480 --> 00:40:22,319
that should be

834
00:40:22,319 --> 00:40:25,680
printed as as a debug uh when

835
00:40:25,680 --> 00:40:28,319
when the glitch is is going it was not

836
00:40:28,319 --> 00:40:29,599
on the video because

837
00:40:29,599 --> 00:40:32,160
i mean this this addition to the code

838
00:40:32,160 --> 00:40:32,960
was written

839
00:40:32,960 --> 00:40:36,720
later than the video was recorded

840
00:40:37,040 --> 00:40:39,040
here we have setup for the file

841
00:40:39,040 --> 00:40:40,160
whisperer

842
00:40:40,160 --> 00:40:44,400
and the most important part is a pattern

843
00:40:44,400 --> 00:40:48,319
so these are just divides

844
00:40:48,319 --> 00:40:51,440
on the usb buys if there will be seen it

845
00:40:51,440 --> 00:40:52,000
will

846
00:40:52,000 --> 00:40:54,560
it will be triggered the fireworks will

847
00:40:54,560 --> 00:40:55,760
be triggered

848
00:40:55,760 --> 00:40:58,800
uh i o four high

849
00:40:58,800 --> 00:41:01,920
which will also trigger our raiden

850
00:41:01,920 --> 00:41:05,200
and of course um

851
00:41:05,200 --> 00:41:07,839
it will be for this uh this will be

852
00:41:07,839 --> 00:41:09,280
forwarded to the

853
00:41:09,280 --> 00:41:13,119
emfi which will inject um

854
00:41:13,119 --> 00:41:17,119
electromagnetic field changes so

855
00:41:17,119 --> 00:41:21,599
here we are arming uh file whisperer

856
00:41:21,599 --> 00:41:24,880
and this is the packet we are sending so

857
00:41:24,880 --> 00:41:28,240
uh we are

858
00:41:28,240 --> 00:41:30,880
sending this usb message and we are

859
00:41:30,880 --> 00:41:32,000
requesting this

860
00:41:32,000 --> 00:41:35,440
this length so normally this will not be

861
00:41:35,440 --> 00:41:36,240
accepted

862
00:41:36,240 --> 00:41:39,119
but during the bleaching literal success

863
00:41:39,119 --> 00:41:41,599
we were able to see actually that

864
00:41:41,599 --> 00:41:44,800
we can get this amount of data that we

865
00:41:44,800 --> 00:41:48,160
request we request over

866
00:41:48,160 --> 00:41:52,079
usb back to us

867
00:41:52,079 --> 00:41:54,000
and here we have like infinite loop

868
00:41:54,000 --> 00:41:56,480
waiting until ryden would not finish

869
00:41:56,480 --> 00:41:59,520
its cycle if it's not success then we

870
00:41:59,520 --> 00:42:00,480
pass and start

871
00:42:00,480 --> 00:42:03,920
start over so we can see that

872
00:42:03,920 --> 00:42:06,960
it's very easy to to

873
00:42:06,960 --> 00:42:11,040
to actually use with python

874
00:42:11,040 --> 00:42:12,800
three devices fire whisperer ship

875
00:42:12,800 --> 00:42:14,720
shelter and the raiden

876
00:42:14,720 --> 00:42:18,720
and they perfectly synchronized to to do

877
00:42:18,720 --> 00:42:21,279
their job

878
00:42:21,920 --> 00:42:25,280
okay um so that's that's about this

879
00:42:25,280 --> 00:42:26,560
vulnerability

880
00:42:26,560 --> 00:42:30,000
we of course have cve4 and

881
00:42:30,000 --> 00:42:34,160
after we release after release

882
00:42:34,160 --> 00:42:36,160
rating code we also release these

883
00:42:36,160 --> 00:42:38,160
examples

884
00:42:38,160 --> 00:42:41,680
and they will be publicly available

885
00:42:41,680 --> 00:42:45,839
thank you

