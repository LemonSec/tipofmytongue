1
00:00:00,380 --> 00:00:13,120
[Music]

2
00:00:13,120 --> 00:00:14,160
hello everyone

3
00:00:14,160 --> 00:00:16,560
thank you for view attending our talk

4
00:00:16,560 --> 00:00:17,279
today

5
00:00:17,279 --> 00:00:18,960
neil and i will present the results of

6
00:00:18,960 --> 00:00:20,720
our research on automated firmware

7
00:00:20,720 --> 00:00:21,359
analysis

8
00:00:21,359 --> 00:00:23,279
uh research that we conducted together

9
00:00:23,279 --> 00:00:25,519
with these amazing people that you see

10
00:00:25,519 --> 00:00:28,560
listed in this slide why should we

11
00:00:28,560 --> 00:00:30,160
analyze firmware

12
00:00:30,160 --> 00:00:32,238
well i'm sure that if you attend this

13
00:00:32,238 --> 00:00:34,079
talk i don't need to explain and

14
00:00:34,079 --> 00:00:35,840
convince you that iot devices are

15
00:00:35,840 --> 00:00:37,520
nowadays extremely popular

16
00:00:37,520 --> 00:00:39,360
and there exists a very large amount of

17
00:00:39,360 --> 00:00:40,960
different devices

18
00:00:40,960 --> 00:00:43,600
smart toasters smart lights smart

19
00:00:43,600 --> 00:00:44,719
switches

20
00:00:44,719 --> 00:00:47,840
and now we also have a smart x-ray it's

21
00:00:47,840 --> 00:00:48,239
not

22
00:00:48,239 --> 00:00:50,719
clear to me what this is supposed to do

23
00:00:50,719 --> 00:00:52,800
but anyways the common thing is that

24
00:00:52,800 --> 00:00:54,399
we have seen that the film we're running

25
00:00:54,399 --> 00:00:55,920
on these devices is often

26
00:00:55,920 --> 00:00:58,960
vulnerable and not only these devices

27
00:00:58,960 --> 00:01:00,000
contain

28
00:01:00,000 --> 00:01:01,440
dangerous vulnerabilities but we have

29
00:01:01,440 --> 00:01:03,039
seen these vulnerabilities being

30
00:01:03,039 --> 00:01:04,799
exploited by attackers

31
00:01:04,799 --> 00:01:07,520
in the wild and here the most famous

32
00:01:07,520 --> 00:01:08,799
example is probably

33
00:01:08,799 --> 00:01:12,000
the mirai botnet where thousands of iot

34
00:01:12,000 --> 00:01:15,040
devices were compromised to perform a

35
00:01:15,040 --> 00:01:16,720
large distributed denial of service

36
00:01:16,720 --> 00:01:17,920
attack

37
00:01:17,920 --> 00:01:21,920
now one interesting thing is that

38
00:01:21,920 --> 00:01:23,360
many of these vulnerabilities that we

39
00:01:23,360 --> 00:01:25,119
see in this device are actually

40
00:01:25,119 --> 00:01:26,960
quite all types of vulnerabilities

41
00:01:26,960 --> 00:01:28,960
things that we have known for a long

42
00:01:28,960 --> 00:01:29,680
time

43
00:01:29,680 --> 00:01:31,360
and for which attackers do not really

44
00:01:31,360 --> 00:01:33,280
need any sophisticated

45
00:01:33,280 --> 00:01:36,400
exploitation technique and in fact

46
00:01:36,400 --> 00:01:39,680
firmware often does not present many of

47
00:01:39,680 --> 00:01:41,360
the protection mechanisms that we are

48
00:01:41,360 --> 00:01:42,960
nowadays used to

49
00:01:42,960 --> 00:01:45,040
uh in comparison with modern operating

50
00:01:45,040 --> 00:01:46,560
systems so i'm thinking about

51
00:01:46,560 --> 00:01:49,360
for instance randomization or control

52
00:01:49,360 --> 00:01:50,320
for integrity

53
00:01:50,320 --> 00:01:53,040
but at the same time firmware presents

54
00:01:53,040 --> 00:01:54,079
some significant

55
00:01:54,079 --> 00:01:56,399
differences when compared to uh for its

56
00:01:56,399 --> 00:01:57,920
desktop applications

57
00:01:57,920 --> 00:02:00,560
they make security analysis particularly

58
00:02:00,560 --> 00:02:02,159
difficult to apply

59
00:02:02,159 --> 00:02:05,040
so first firmware is very hard dependent

60
00:02:05,040 --> 00:02:07,840
and it relies on a lot of peripherals

61
00:02:07,840 --> 00:02:08,800
just think about

62
00:02:08,800 --> 00:02:11,440
a smart camera that where the femur is

63
00:02:11,440 --> 00:02:12,879
programmed to directly talk to the

64
00:02:12,879 --> 00:02:14,000
camera sensor

65
00:02:14,000 --> 00:02:16,239
to retrieve images from the outside

66
00:02:16,239 --> 00:02:17,120
world

67
00:02:17,120 --> 00:02:19,920
but also firmware lives in a unique and

68
00:02:19,920 --> 00:02:22,480
minimal environment with no standard

69
00:02:22,480 --> 00:02:24,239
configurations and indeed for

70
00:02:24,239 --> 00:02:25,680
performance reasons

71
00:02:25,680 --> 00:02:28,080
uh firmware does not present many of the

72
00:02:28,080 --> 00:02:29,599
advanced features that we are nowadays

73
00:02:29,599 --> 00:02:30,640
used to

74
00:02:30,640 --> 00:02:34,160
in modern operating system and finally

75
00:02:34,160 --> 00:02:37,360
embedded device relied on different

76
00:02:37,360 --> 00:02:39,519
architectures sometimes profitary

77
00:02:39,519 --> 00:02:41,680
and this makes things a little bit more

78
00:02:41,680 --> 00:02:42,720
tricky

79
00:02:42,720 --> 00:02:45,040
so if you want to analyze a firmware

80
00:02:45,040 --> 00:02:45,760
image

81
00:02:45,760 --> 00:02:47,680
what we can do we can try first with

82
00:02:47,680 --> 00:02:49,440
dynamic analysis right so we

83
00:02:49,440 --> 00:02:52,000
imagine we can emulate a firmware image

84
00:02:52,000 --> 00:02:54,800
and we can run our coverage guided funds

85
00:02:54,800 --> 00:02:57,120
well unfortunately dynamic firmware

86
00:02:57,120 --> 00:02:59,120
analysis is particularly difficult and

87
00:02:59,120 --> 00:03:00,720
currently

88
00:03:00,720 --> 00:03:03,120
not very reliable and there have been

89
00:03:03,120 --> 00:03:04,000
recently some

90
00:03:04,000 --> 00:03:05,920
some uh very promising walls in this

91
00:03:05,920 --> 00:03:08,720
direction but we're not there yet

92
00:03:08,720 --> 00:03:11,040
and the main reasons again is are that

93
00:03:11,040 --> 00:03:12,080
uh femur is

94
00:03:12,080 --> 00:03:14,000
heavily utterly dependent so this means

95
00:03:14,000 --> 00:03:16,239
that a proper dynamic analysis

96
00:03:16,239 --> 00:03:18,959
environment has to model peripherals

97
00:03:18,959 --> 00:03:22,800
as to model interrupts dma but also deal

98
00:03:22,800 --> 00:03:23,840
with

99
00:03:23,840 --> 00:03:25,760
shared memory i've coded addresses and

100
00:03:25,760 --> 00:03:27,040
sometimes

101
00:03:27,040 --> 00:03:29,200
and modern architectures so all these

102
00:03:29,200 --> 00:03:31,680
things are quite complex too

103
00:03:31,680 --> 00:03:34,159
design and implement so as an

104
00:03:34,159 --> 00:03:36,000
alternative we can try static analysis

105
00:03:36,000 --> 00:03:37,920
that instead does not suffer from many

106
00:03:37,920 --> 00:03:39,599
of these limitations

107
00:03:39,599 --> 00:03:41,840
and the problem here is that current

108
00:03:41,840 --> 00:03:43,440
approaches do not scale

109
00:03:43,440 --> 00:03:46,080
and in fact they produce many false

110
00:03:46,080 --> 00:03:47,120
positives

111
00:03:47,120 --> 00:03:49,120
the main reason for this is that

112
00:03:49,120 --> 00:03:51,120
firmware is mostly multibinary

113
00:03:51,120 --> 00:03:53,519
in fact the vast majority of firmware is

114
00:03:53,519 --> 00:03:55,920
linux based and in practice it consists

115
00:03:55,920 --> 00:03:57,519
in a squash file system

116
00:03:57,519 --> 00:04:01,120
that contains hundreds of executable

117
00:04:01,120 --> 00:04:02,959
programs so you can see in this example

118
00:04:02,959 --> 00:04:07,200
a firmware image that contains 240

119
00:04:07,200 --> 00:04:09,599
executable binaries but on a larger

120
00:04:09,599 --> 00:04:11,360
scale we have seen in our data set that

121
00:04:11,360 --> 00:04:11,920
contains

122
00:04:11,920 --> 00:04:14,959
more than 900 samples that affirmative

123
00:04:14,959 --> 00:04:19,358
image on average contains more than 150

124
00:04:19,358 --> 00:04:20,639
binaries

125
00:04:20,639 --> 00:04:23,280
for of course not all of these binaries

126
00:04:23,280 --> 00:04:24,400
are actually

127
00:04:24,400 --> 00:04:26,840
needed and used to implement the famous

128
00:04:26,840 --> 00:04:29,280
functionality but some of them do

129
00:04:29,280 --> 00:04:30,880
and the typical architecture of an

130
00:04:30,880 --> 00:04:32,720
embedded system contains

131
00:04:32,720 --> 00:04:36,639
a binary that we call the border binary

132
00:04:36,639 --> 00:04:38,800
that receives a request from the

133
00:04:38,800 --> 00:04:40,800
external world this is typically

134
00:04:40,800 --> 00:04:43,040
a web server and that this binary

135
00:04:43,040 --> 00:04:45,520
forwards the request to a handle binary

136
00:04:45,520 --> 00:04:47,280
that is that processes the request

137
00:04:47,280 --> 00:04:51,440
and returns a result in practice

138
00:04:51,440 --> 00:04:53,759
this is a little bit more complex

139
00:04:53,759 --> 00:04:54,960
because we

140
00:04:54,960 --> 00:04:57,759
can have many of these and their

141
00:04:57,759 --> 00:04:58,800
binaries

142
00:04:58,800 --> 00:05:02,000
and each of them can further interact

143
00:05:02,000 --> 00:05:04,639
and share data with additional problems

144
00:05:04,639 --> 00:05:07,759
so now the question becomes which binary

145
00:05:07,759 --> 00:05:08,880
should we look at for

146
00:05:08,880 --> 00:05:11,520
for a security analysis because clearly

147
00:05:11,520 --> 00:05:13,520
on the one hand if we only look at a

148
00:05:13,520 --> 00:05:15,280
subject of these binaries or for

149
00:05:15,280 --> 00:05:16,800
instance if we only look at the

150
00:05:16,800 --> 00:05:20,560
web server then we will miss potentially

151
00:05:20,560 --> 00:05:21,199
many

152
00:05:21,199 --> 00:05:22,800
vulnerabilities so we might have

153
00:05:22,800 --> 00:05:25,759
potentially many force negatives

154
00:05:25,759 --> 00:05:28,400
but on the other hand if we apply

155
00:05:28,400 --> 00:05:29,520
current approaches

156
00:05:29,520 --> 00:05:31,440
to analyze each of these binaries

157
00:05:31,440 --> 00:05:33,680
individually then we will have

158
00:05:33,680 --> 00:05:36,240
a large amount of force positives and we

159
00:05:36,240 --> 00:05:38,400
can see an example of this

160
00:05:38,400 --> 00:05:40,240
here in in this example that is a

161
00:05:40,240 --> 00:05:42,000
simplified version of a real-world

162
00:05:42,000 --> 00:05:43,440
firmware image

163
00:05:43,440 --> 00:05:45,440
and you can see here on the right a

164
00:05:45,440 --> 00:05:47,440
program that reads data from two

165
00:05:47,440 --> 00:05:48,880
environment variables

166
00:05:48,880 --> 00:05:50,080
and if we assume that these two

167
00:05:50,080 --> 00:05:52,000
variables represent the input

168
00:05:52,000 --> 00:05:53,680
of this program and this input is

169
00:05:53,680 --> 00:05:55,360
controlled by an attacker

170
00:05:55,360 --> 00:05:57,360
we clearly see that this program

171
00:05:57,360 --> 00:05:58,960
contains two vulnerabilities

172
00:05:58,960 --> 00:06:02,240
so here there are two buffer overflows

173
00:06:02,240 --> 00:06:04,160
where this data read from the

174
00:06:04,160 --> 00:06:06,319
environment variables is used

175
00:06:06,319 --> 00:06:08,720
in unsafe stream copy without checking

176
00:06:08,720 --> 00:06:11,680
the sides of the destination buffer so

177
00:06:11,680 --> 00:06:14,960
easy two buffer overflows but in this

178
00:06:14,960 --> 00:06:16,560
specific example in this specific

179
00:06:16,560 --> 00:06:18,639
firmware image this binary on the right

180
00:06:18,639 --> 00:06:20,000
is only executed

181
00:06:20,000 --> 00:06:21,680
through this binary this program on the

182
00:06:21,680 --> 00:06:23,919
left and we can see here that this

183
00:06:23,919 --> 00:06:24,880
program

184
00:06:24,880 --> 00:06:27,120
indeed sets the value for these two

185
00:06:27,120 --> 00:06:28,560
environment variables

186
00:06:28,560 --> 00:06:30,639
and then executes the by the program on

187
00:06:30,639 --> 00:06:31,759
the right

188
00:06:31,759 --> 00:06:34,960
and now if we actually look

189
00:06:34,960 --> 00:06:36,639
at the at the big picture and we

190
00:06:36,639 --> 00:06:38,080
consider the interaction between these

191
00:06:38,080 --> 00:06:39,039
two binary

192
00:06:39,039 --> 00:06:41,360
we can see that there is actually only

193
00:06:41,360 --> 00:06:42,160
one bug

194
00:06:42,160 --> 00:06:44,960
only one vulnerability and in fact while

195
00:06:44,960 --> 00:06:45,840
the value

196
00:06:45,840 --> 00:06:48,240
of the query string variable is

197
00:06:48,240 --> 00:06:50,800
potentially unconstrained and can be

198
00:06:50,800 --> 00:06:53,680
longer than 128 bytes so producing a

199
00:06:53,680 --> 00:06:55,199
buffer overflow

200
00:06:55,199 --> 00:06:58,400
the value of the log path variable

201
00:06:58,400 --> 00:07:01,199
is accorded and it's constrained to a

202
00:07:01,199 --> 00:07:04,240
string that is shorter than 128 bytes so

203
00:07:04,240 --> 00:07:06,000
shorter than the buffer size

204
00:07:06,000 --> 00:07:09,759
and so not producing any buffer overflow

205
00:07:09,759 --> 00:07:12,400
this is just a quick example that shows

206
00:07:12,400 --> 00:07:14,560
how

207
00:07:14,560 --> 00:07:17,280
false positives may may arise when we

208
00:07:17,280 --> 00:07:19,039
look at binary individually

209
00:07:19,039 --> 00:07:21,199
and of course you can imagine that when

210
00:07:21,199 --> 00:07:22,960
we scale these up to

211
00:07:22,960 --> 00:07:24,800
uh many binaries and many firmware

212
00:07:24,800 --> 00:07:27,520
images the number of false positive will

213
00:07:27,520 --> 00:07:31,039
drastically increase so in our research

214
00:07:31,039 --> 00:07:32,800
we started from the observed version

215
00:07:32,800 --> 00:07:35,520
that firmware is mostly composed by

216
00:07:35,520 --> 00:07:37,520
multiple interacting components multiple

217
00:07:37,520 --> 00:07:39,199
interacting binaries

218
00:07:39,199 --> 00:07:41,680
and we investigated this observation and

219
00:07:41,680 --> 00:07:42,960
found out that

220
00:07:42,960 --> 00:07:44,960
modeling the interactions between these

221
00:07:44,960 --> 00:07:46,479
binaries is essential

222
00:07:46,479 --> 00:07:49,039
for an effective analysis we can do this

223
00:07:49,039 --> 00:07:49,759
because

224
00:07:49,759 --> 00:07:52,240
programs and processes communicate

225
00:07:52,240 --> 00:07:54,560
through a finite set of

226
00:07:54,560 --> 00:07:57,440
methods a finite set of inter-process

227
00:07:57,440 --> 00:07:58,080
communication

228
00:07:58,080 --> 00:08:00,800
channels that we can model to introduce

229
00:08:00,800 --> 00:08:01,360
static

230
00:08:01,360 --> 00:08:03,759
multi-binary tent analysis so

231
00:08:03,759 --> 00:08:04,479
multi-binary

232
00:08:04,479 --> 00:08:06,000
analysis where data flows and

233
00:08:06,000 --> 00:08:08,160
constraints are not only propagated

234
00:08:08,160 --> 00:08:10,319
within one binary but also from one

235
00:08:10,319 --> 00:08:12,560
binary to another

236
00:08:12,560 --> 00:08:14,479
we built a prototype on top of this

237
00:08:14,479 --> 00:08:16,240
approach caronte and we will show in

238
00:08:16,240 --> 00:08:17,840
this presentation that currently is able

239
00:08:17,840 --> 00:08:18,160
to

240
00:08:18,160 --> 00:08:20,639
identify unknown security

241
00:08:20,639 --> 00:08:21,599
vulnerabilities

242
00:08:21,599 --> 00:08:23,440
but at the same time drastically

243
00:08:23,440 --> 00:08:24,639
reducing

244
00:08:24,639 --> 00:08:27,680
the amount of false alerts so

245
00:08:27,680 --> 00:08:30,400
if we want to look at what karante does

246
00:08:30,400 --> 00:08:31,759
in a nutshell

247
00:08:31,759 --> 00:08:34,479
currently takes as input a femur image

248
00:08:34,479 --> 00:08:36,479
it unpacks the image and extracts all

249
00:08:36,479 --> 00:08:38,240
the different binaries contained in the

250
00:08:38,240 --> 00:08:39,279
image

251
00:08:39,279 --> 00:08:42,000
then it identifies what we call the

252
00:08:42,000 --> 00:08:44,000
border binaries so those programs that

253
00:08:44,000 --> 00:08:46,000
receive user input from the external

254
00:08:46,000 --> 00:08:47,279
world

255
00:08:47,279 --> 00:08:49,760
and once we have these border binaries

256
00:08:49,760 --> 00:08:50,320
current

257
00:08:50,320 --> 00:08:53,120
starts identifying and tracking the

258
00:08:53,120 --> 00:08:55,680
interactions with additional binaries

259
00:08:55,680 --> 00:08:57,440
so we can see in this example that these

260
00:08:57,440 --> 00:08:59,440
two binaries intellectual environment

261
00:08:59,440 --> 00:09:00,240
variable

262
00:09:00,240 --> 00:09:02,399
so in practice what happens is that

263
00:09:02,399 --> 00:09:03,839
these two binaries

264
00:09:03,839 --> 00:09:05,839
know the value of the name of this

265
00:09:05,839 --> 00:09:08,000
environment environment variable

266
00:09:08,000 --> 00:09:09,760
and we call this the data key of the

267
00:09:09,760 --> 00:09:11,600
communication and using this data key

268
00:09:11,600 --> 00:09:12,399
they are able to

269
00:09:12,399 --> 00:09:15,120
share data and of course each of this

270
00:09:15,120 --> 00:09:16,000
binary

271
00:09:16,000 --> 00:09:18,959
can then itself further communicate and

272
00:09:18,959 --> 00:09:20,959
interact with additional binaries as

273
00:09:20,959 --> 00:09:22,720
shown in this example

274
00:09:22,720 --> 00:09:25,519
so now we have a model all of these

275
00:09:25,519 --> 00:09:26,720
interactions

276
00:09:26,720 --> 00:09:28,720
this we have this interaction graph that

277
00:09:28,720 --> 00:09:31,040
we call the binary dependency graph

278
00:09:31,040 --> 00:09:33,920
and using this graph we can actually run

279
00:09:33,920 --> 00:09:36,000
our multibinary tenth analysis

280
00:09:36,000 --> 00:09:38,720
so we start from the border binaries and

281
00:09:38,720 --> 00:09:40,320
retain user input

282
00:09:40,320 --> 00:09:42,399
and propagate constraints from one

283
00:09:42,399 --> 00:09:44,560
binary to another

284
00:09:44,560 --> 00:09:46,880
in this example we see that all these

285
00:09:46,880 --> 00:09:47,839
binaries share

286
00:09:47,839 --> 00:09:50,959
data that is up to 512 bytes

287
00:09:50,959 --> 00:09:53,040
but here in the very last binary of of

288
00:09:53,040 --> 00:09:54,800
this this path

289
00:09:54,800 --> 00:09:57,519
this data is used is scoping into a

290
00:09:57,519 --> 00:09:59,040
buffer that is only

291
00:09:59,040 --> 00:10:02,800
500 bytes so in this case leading to

292
00:10:02,800 --> 00:10:05,440
a buffer overflow so i know that given

293
00:10:05,440 --> 00:10:06,720
like this is not probably

294
00:10:06,720 --> 00:10:09,519
super clear uh now it's time to dive

295
00:10:09,519 --> 00:10:10,480
into the details

296
00:10:10,480 --> 00:10:13,120
and i leave this vitro stage to nilo

297
00:10:13,120 --> 00:10:14,399
which is the main author of this

298
00:10:14,399 --> 00:10:16,320
research and we'll tell you more about

299
00:10:16,320 --> 00:10:19,839
each step that current performs

300
00:10:19,839 --> 00:10:22,320
thanks andrea hi i'm nilo and now i'm

301
00:10:22,320 --> 00:10:23,279
going to talk to you about

302
00:10:23,279 --> 00:10:26,480
canon's architecture as you can see in

303
00:10:26,480 --> 00:10:27,120
these slides

304
00:10:27,120 --> 00:10:29,519
these are the steps of our approach that

305
00:10:29,519 --> 00:10:32,079
andrea uh briefly mentioned before and

306
00:10:32,079 --> 00:10:33,440
then now i'm going to explain more in

307
00:10:33,440 --> 00:10:35,600
details in the next slides

308
00:10:35,600 --> 00:10:38,160
as input our system takes a firmware

309
00:10:38,160 --> 00:10:39,120
which

310
00:10:39,120 --> 00:10:41,440
it unpacks it and into multiple

311
00:10:41,440 --> 00:10:42,240
components

312
00:10:42,240 --> 00:10:44,399
using the firmware packing tool called

313
00:10:44,399 --> 00:10:45,680
bin work

314
00:10:45,680 --> 00:10:48,959
once we've extracted all the binaries

315
00:10:48,959 --> 00:10:51,760
we proceed to find those that are called

316
00:10:51,760 --> 00:10:53,600
we call the border binaries

317
00:10:53,600 --> 00:10:56,160
bullet binaries are those binaries that

318
00:10:56,160 --> 00:10:56,959
interface

319
00:10:56,959 --> 00:10:59,279
the functionality of a firmware to the

320
00:10:59,279 --> 00:11:01,360
outside world

321
00:11:01,360 --> 00:11:03,920
our intuition is that these banners must

322
00:11:03,920 --> 00:11:04,640
contain

323
00:11:04,640 --> 00:11:07,360
two type of capabilities they must

324
00:11:07,360 --> 00:11:08,000
receive

325
00:11:08,000 --> 00:11:10,000
data from the network and they must

326
00:11:10,000 --> 00:11:13,680
contain capabilities to parse this data

327
00:11:13,680 --> 00:11:15,600
to find these binaries we look for these

328
00:11:15,600 --> 00:11:17,839
two capabilities and we scan

329
00:11:17,839 --> 00:11:20,160
each function for each binary in the

330
00:11:20,160 --> 00:11:21,040
firmware

331
00:11:21,040 --> 00:11:23,600
and collect five different features the

332
00:11:23,600 --> 00:11:24,959
number of basic blocks

333
00:11:24,959 --> 00:11:27,279
the number of memory comparisons the

334
00:11:27,279 --> 00:11:28,480
number of branches

335
00:11:28,480 --> 00:11:31,440
the number of network related keywords

336
00:11:31,440 --> 00:11:33,600
we look for keywords such as

337
00:11:33,600 --> 00:11:36,800
soap html http and so forth

338
00:11:36,800 --> 00:11:39,279
and then we check if there exists a data

339
00:11:39,279 --> 00:11:40,079
flow between

340
00:11:40,079 --> 00:11:41,680
a read from socket and a memory

341
00:11:41,680 --> 00:11:44,399
comparison

342
00:11:45,120 --> 00:11:47,680
once we collected all these features for

343
00:11:47,680 --> 00:11:48,480
each function

344
00:11:48,480 --> 00:11:50,880
um we we compute what we called the

345
00:11:50,880 --> 00:11:52,000
parsing score

346
00:11:52,000 --> 00:11:54,240
the percy score basically is a weighted

347
00:11:54,240 --> 00:11:56,639
sum of these five features

348
00:11:56,639 --> 00:11:58,639
once we get uh this passive score for

349
00:11:58,639 --> 00:11:59,920
each functions

350
00:11:59,920 --> 00:12:02,240
um we compute the percent score of a

351
00:12:02,240 --> 00:12:04,720
binary as the maximum parsy scores of

352
00:12:04,720 --> 00:12:05,120
these

353
00:12:05,120 --> 00:12:08,240
of its functions then

354
00:12:08,240 --> 00:12:10,399
we cluster these binaries using their

355
00:12:10,399 --> 00:12:11,360
persist scores

356
00:12:11,360 --> 00:12:14,079
using the db scan algorithm and we

357
00:12:14,079 --> 00:12:15,120
consider

358
00:12:15,120 --> 00:12:17,279
as border banners are the cluster of

359
00:12:17,279 --> 00:12:18,959
binaries containing

360
00:12:18,959 --> 00:12:22,240
the highest parsing scores once we get

361
00:12:22,240 --> 00:12:24,240
all these border binaries

362
00:12:24,240 --> 00:12:26,240
we compute the binary dependency graph

363
00:12:26,240 --> 00:12:27,600
or bdg

364
00:12:27,600 --> 00:12:30,800
tbtg basically is a graph that models

365
00:12:30,800 --> 00:12:33,279
the data dependency across the different

366
00:12:33,279 --> 00:12:34,000
binaries

367
00:12:34,000 --> 00:12:36,959
in the firmware to build this graph we

368
00:12:36,959 --> 00:12:37,360
use

369
00:12:37,360 --> 00:12:40,320
our static temp engine to obtain data

370
00:12:40,320 --> 00:12:41,360
that is compared

371
00:12:41,360 --> 00:12:43,920
against network related keywords in the

372
00:12:43,920 --> 00:12:45,279
border binaries

373
00:12:45,279 --> 00:12:48,000
and then we run intent analysis to

374
00:12:48,000 --> 00:12:48,720
detect

375
00:12:48,720 --> 00:12:51,440
if some data has been shared in

376
00:12:51,440 --> 00:12:52,000
particular

377
00:12:52,000 --> 00:12:54,079
for this second step we use a set of

378
00:12:54,079 --> 00:12:56,000
modules that we call the cpfs

379
00:12:56,000 --> 00:13:00,800
or communication paradigm finders

380
00:13:00,800 --> 00:13:03,040
which basically each one of the cpf

381
00:13:03,040 --> 00:13:04,880
analyze each basic block

382
00:13:04,880 --> 00:13:08,399
in detailed analysis and understands if

383
00:13:08,399 --> 00:13:10,639
the logic of the basic block suggests

384
00:13:10,639 --> 00:13:12,240
that some data has been shared with

385
00:13:12,240 --> 00:13:15,040
other binaries

386
00:13:15,440 --> 00:13:18,000
we provide current with a cpf for each

387
00:13:18,000 --> 00:13:20,240
ipc paradigm which means that we have a

388
00:13:20,240 --> 00:13:20,880
cpf

389
00:13:20,880 --> 00:13:24,079
for socket-based communication sapf for

390
00:13:24,079 --> 00:13:25,279
file-based communication

391
00:13:25,279 --> 00:13:28,480
and so forth and if a cpf understand

392
00:13:28,480 --> 00:13:30,959
that some data has been shared

393
00:13:30,959 --> 00:13:33,440
first it retrieves the data key the data

394
00:13:33,440 --> 00:13:34,800
key as andrea

395
00:13:34,800 --> 00:13:37,360
before briefly mentioned is the end

396
00:13:37,360 --> 00:13:39,760
point where the data will be available

397
00:13:39,760 --> 00:13:42,800
example of data keys might be file names

398
00:13:42,800 --> 00:13:45,920
or names of environment variables and so

399
00:13:45,920 --> 00:13:47,199
forth

400
00:13:47,199 --> 00:13:49,680
then spf determines what's the flow

401
00:13:49,680 --> 00:13:51,600
direction of the communication

402
00:13:51,600 --> 00:13:54,079
it he understands whether the binary is

403
00:13:54,079 --> 00:13:55,920
set in data for another binary to be

404
00:13:55,920 --> 00:13:56,639
retrieved

405
00:13:56,639 --> 00:13:58,399
in which case we will call the binary

406
00:13:58,399 --> 00:14:01,120
setter or if the binary is getting some

407
00:14:01,120 --> 00:14:02,560
data from another binary

408
00:14:02,560 --> 00:14:04,160
in which case we will call the binary

409
00:14:04,160 --> 00:14:06,560
together

410
00:14:06,560 --> 00:14:10,320
finally the cpf performs a binary sect

411
00:14:10,320 --> 00:14:13,519
magnification which means that the cpf

412
00:14:13,519 --> 00:14:15,360
will use the data key

413
00:14:15,360 --> 00:14:17,680
to scan the firmware and find other

414
00:14:17,680 --> 00:14:19,600
banners that can possibly rely

415
00:14:19,600 --> 00:14:21,680
on the same data key to use some shared

416
00:14:21,680 --> 00:14:23,120
data

417
00:14:23,120 --> 00:14:26,079
in case of information are not available

418
00:14:26,079 --> 00:14:27,279
such as

419
00:14:27,279 --> 00:14:28,959
symbols are not present we provide

420
00:14:28,959 --> 00:14:31,600
current with a generic cpf

421
00:14:31,600 --> 00:14:34,079
that we call the semantic cpf the

422
00:14:34,079 --> 00:14:34,720
intuition

423
00:14:34,720 --> 00:14:37,920
behind this cpf is that some data keys

424
00:14:37,920 --> 00:14:41,120
must be used as index to set or get some

425
00:14:41,120 --> 00:14:42,000
data

426
00:14:42,000 --> 00:14:43,760
as you can see in this simple example

427
00:14:43,760 --> 00:14:46,399
the data key http request

428
00:14:46,399 --> 00:14:48,880
is used to index some global structure

429
00:14:48,880 --> 00:14:51,760
to set some data

430
00:14:51,760 --> 00:14:53,920
okay let's see an example of how we

431
00:14:53,920 --> 00:14:55,600
build the bdg

432
00:14:55,600 --> 00:14:57,839
as you can see in the function parse

433
00:14:57,839 --> 00:14:59,040
your live

434
00:14:59,040 --> 00:15:01,440
we have a scene comparisons of some data

435
00:15:01,440 --> 00:15:04,240
against some network related keyword

436
00:15:04,240 --> 00:15:07,279
in this case we would think the variable

437
00:15:07,279 --> 00:15:08,079
p

438
00:15:08,079 --> 00:15:10,480
and as you can see regardless of the

439
00:15:10,480 --> 00:15:12,560
path that has been followed tainted data

440
00:15:12,560 --> 00:15:14,399
is returned by function

441
00:15:14,399 --> 00:15:17,760
in this case we we find the color of

442
00:15:17,760 --> 00:15:19,519
this function which is

443
00:15:19,519 --> 00:15:22,079
serve request and we continue our tenth

444
00:15:22,079 --> 00:15:23,360
analysis

445
00:15:23,360 --> 00:15:26,079
as you can see here data the variable

446
00:15:26,079 --> 00:15:27,760
data will contain

447
00:15:27,760 --> 00:15:29,920
tinted data which eventually will be

448
00:15:29,920 --> 00:15:32,959
passed to the functions attempt

449
00:15:32,959 --> 00:15:35,199
in this case the semantic cpf will

450
00:15:35,199 --> 00:15:37,279
trigger and we'll understand that some

451
00:15:37,279 --> 00:15:38,639
data is shared

452
00:15:38,639 --> 00:15:41,040
using the environment we'll understand

453
00:15:41,040 --> 00:15:43,279
that this banner is a sector as it's set

454
00:15:43,279 --> 00:15:44,320
in some data to be

455
00:15:44,320 --> 00:15:46,480
to be consumed and you will understand

456
00:15:46,480 --> 00:15:48,480
that the data key in this case

457
00:15:48,480 --> 00:15:51,440
is the is a string query string

458
00:15:51,440 --> 00:15:52,160
therefore

459
00:15:52,160 --> 00:15:55,440
we'll use the environment cpf

460
00:15:55,440 --> 00:15:57,759
we'll use this data key look into the

461
00:15:57,759 --> 00:15:58,880
firmware and find

462
00:15:58,880 --> 00:16:00,959
other binaries that rely on the same

463
00:16:00,959 --> 00:16:02,160
data key and

464
00:16:02,160 --> 00:16:04,639
we will find that these other binary

465
00:16:04,639 --> 00:16:09,279
indeed use the same data key

466
00:16:09,279 --> 00:16:13,199
once we obtain our bdg we analyze each

467
00:16:13,199 --> 00:16:14,639
binary in the bdg

468
00:16:14,639 --> 00:16:16,880
and we collect all the constraints that

469
00:16:16,880 --> 00:16:20,079
binaries apply on shared data

470
00:16:20,079 --> 00:16:23,440
and we propagate um this constraint

471
00:16:23,440 --> 00:16:26,720
to the successors in the bdg now

472
00:16:26,720 --> 00:16:29,440
a problem in this case is that uh in

473
00:16:29,440 --> 00:16:31,120
theory we should consider

474
00:16:31,120 --> 00:16:33,440
every parts in every binary that apply

475
00:16:33,440 --> 00:16:34,399
constraints

476
00:16:34,399 --> 00:16:37,040
on shared data as this is in the general

477
00:16:37,040 --> 00:16:38,320
case impossible

478
00:16:38,320 --> 00:16:41,440
what we did is that um we get the

479
00:16:41,440 --> 00:16:42,399
program points

480
00:16:42,399 --> 00:16:44,639
where the data has been set and the data

481
00:16:44,639 --> 00:16:46,720
has been shared within the same binary

482
00:16:46,720 --> 00:16:48,720
and we analyze every part between these

483
00:16:48,720 --> 00:16:50,079
two program points

484
00:16:50,079 --> 00:16:52,639
up to a certain time limit and

485
00:16:52,639 --> 00:16:53,759
eventually

486
00:16:53,759 --> 00:16:56,480
we propagate only the least street set

487
00:16:56,480 --> 00:16:58,720
of constraints

488
00:16:58,720 --> 00:17:00,720
one might ask why only the least the

489
00:17:00,720 --> 00:17:02,720
least strict set of constraints

490
00:17:02,720 --> 00:17:04,880
well the reason is that our intuition is

491
00:17:04,880 --> 00:17:07,280
that under constrained data is more

492
00:17:07,280 --> 00:17:08,400
likely to lead

493
00:17:08,400 --> 00:17:11,839
to security vulnerabilities

494
00:17:12,079 --> 00:17:15,199
going back to our to our example we know

495
00:17:15,199 --> 00:17:18,400
that the variable data is tainted and we

496
00:17:18,400 --> 00:17:19,520
know

497
00:17:19,520 --> 00:17:21,119
that it counts from the parts from the

498
00:17:21,119 --> 00:17:22,880
function parts uri

499
00:17:22,880 --> 00:17:24,559
as you can see again in this function

500
00:17:24,559 --> 00:17:26,319
there are two possible parts that lead

501
00:17:26,319 --> 00:17:28,559
to data out of the function but

502
00:17:28,559 --> 00:17:31,440
only one of them

503
00:17:31,679 --> 00:17:34,400
don't does not apply constraints on the

504
00:17:34,400 --> 00:17:35,120
data

505
00:17:35,120 --> 00:17:37,280
as such we consider this part and we

506
00:17:37,280 --> 00:17:39,679
propagate the empty set of constraints

507
00:17:39,679 --> 00:17:42,799
to the getter binary

508
00:17:43,840 --> 00:17:46,320
the last module of our system is the

509
00:17:46,320 --> 00:17:47,280
insecure

510
00:17:47,280 --> 00:17:49,760
interaction detection module where we

511
00:17:49,760 --> 00:17:52,640
use our 10 engine to uncover and secure

512
00:17:52,640 --> 00:17:56,480
attacker control data flows in current

513
00:17:56,480 --> 00:18:00,000
we look for two types of vulnerabilities

514
00:18:00,000 --> 00:18:02,799
we look for memory card options such as

515
00:18:02,799 --> 00:18:04,320
buffer overflows

516
00:18:04,320 --> 00:18:06,400
and we look for denial of service

517
00:18:06,400 --> 00:18:07,600
vulnerabilities

518
00:18:07,600 --> 00:18:10,799
which means that we find loops whose

519
00:18:10,799 --> 00:18:11,360
guards

520
00:18:11,360 --> 00:18:15,840
are totally controlled by attackers

521
00:18:16,160 --> 00:18:18,640
in particular to find vulnerabilities

522
00:18:18,640 --> 00:18:20,320
retain data that is set

523
00:18:20,320 --> 00:18:22,720
or received by another binary we run

524
00:18:22,720 --> 00:18:24,240
18th analysis

525
00:18:24,240 --> 00:18:26,640
and we raise an alert if tainted and

526
00:18:26,640 --> 00:18:29,600
under constrained data reaches the sync

527
00:18:29,600 --> 00:18:32,320
in our work we consider things mem copy

528
00:18:32,320 --> 00:18:33,600
like functions

529
00:18:33,600 --> 00:18:36,320
which means that we consider those

530
00:18:36,320 --> 00:18:37,760
functions that are semantically

531
00:18:37,760 --> 00:18:40,400
equivalent to mem copy functions

532
00:18:40,400 --> 00:18:42,400
we consider sync at the reference of

533
00:18:42,400 --> 00:18:43,760
attended variable

534
00:18:43,760 --> 00:18:45,440
and finally we consider sync a

535
00:18:45,440 --> 00:18:47,520
comparison of the entire variable in

536
00:18:47,520 --> 00:18:50,400
loop conditions

537
00:18:50,799 --> 00:18:53,919
going back to our example we know that

538
00:18:53,919 --> 00:18:55,039
the variable query

539
00:18:55,039 --> 00:18:58,640
is now tainted and unconstrained and

540
00:18:58,640 --> 00:19:00,640
we run our data analysis which

541
00:19:00,640 --> 00:19:03,120
eventually will lead us in the function

542
00:19:03,120 --> 00:19:06,480
process request as you can see here

543
00:19:06,480 --> 00:19:08,400
tinted data the variable query is

544
00:19:08,400 --> 00:19:11,200
compared against some constant string

545
00:19:11,200 --> 00:19:13,360
and the result is set in the variable q

546
00:19:13,360 --> 00:19:15,760
which will be tainted as well

547
00:19:15,760 --> 00:19:18,320
eventually the variable q will be used

548
00:19:18,320 --> 00:19:20,240
in a string of operation

549
00:19:20,240 --> 00:19:22,160
and karante will understand that first

550
00:19:22,160 --> 00:19:24,080
the variable q is tainted and a

551
00:19:24,080 --> 00:19:25,039
constraint

552
00:19:25,039 --> 00:19:27,960
and that the variable arg is as big as

553
00:19:27,960 --> 00:19:30,400
128 bytes

554
00:19:30,400 --> 00:19:32,960
for this reason we raise an alert now

555
00:19:32,960 --> 00:19:35,039
another interesting fact in this example

556
00:19:35,039 --> 00:19:35,840
is that

557
00:19:35,840 --> 00:19:38,000
as you can see the variable lock part is

558
00:19:38,000 --> 00:19:39,360
not tainted

559
00:19:39,360 --> 00:19:41,120
and therefore the second string copy

560
00:19:41,120 --> 00:19:42,720
will not raise

561
00:19:42,720 --> 00:19:45,600
a false alert

562
00:19:47,280 --> 00:19:50,320
okay let's talk about our intention our

563
00:19:50,320 --> 00:19:51,120
intention

564
00:19:51,120 --> 00:19:53,440
is an improved version of angular synth

565
00:19:53,440 --> 00:19:54,240
engine

566
00:19:54,240 --> 00:19:56,960
anger is our uh binary analysis

567
00:19:56,960 --> 00:19:58,320
framework

568
00:19:58,320 --> 00:20:01,520
and we added two features first

569
00:20:01,520 --> 00:20:05,360
we prioritize parts that we we find more

570
00:20:05,360 --> 00:20:06,480
interesting

571
00:20:06,480 --> 00:20:09,120
and second we added what we called 10

572
00:20:09,120 --> 00:20:11,918
dependencies

573
00:20:12,000 --> 00:20:14,400
let's see these two features um we

574
00:20:14,400 --> 00:20:15,120
consider

575
00:20:15,120 --> 00:20:17,200
a path more interesting than another

576
00:20:17,200 --> 00:20:18,720
path if the first one

577
00:20:18,720 --> 00:20:21,360
carries on paint information and the

578
00:20:21,360 --> 00:20:22,640
second doesn't

579
00:20:22,640 --> 00:20:24,880
let's see an example of this let's

580
00:20:24,880 --> 00:20:26,480
assume here that the variable

581
00:20:26,480 --> 00:20:30,640
input contain data from the user

582
00:20:30,640 --> 00:20:32,960
and let's assume that it's tainted as

583
00:20:32,960 --> 00:20:34,720
you can see the variable input is passed

584
00:20:34,720 --> 00:20:36,480
to the function parts

585
00:20:36,480 --> 00:20:39,520
which contains a loop now in this case

586
00:20:39,520 --> 00:20:40,159
this loop

587
00:20:40,159 --> 00:20:43,120
might have uh in theory an infinite

588
00:20:43,120 --> 00:20:44,400
number of parts

589
00:20:44,400 --> 00:20:47,520
but if you see only a subset of them

590
00:20:47,520 --> 00:20:50,799
lead the taint out of the function

591
00:20:50,799 --> 00:20:53,919
in this case we consider these parts

592
00:20:53,919 --> 00:20:55,919
more interesting than the other parts

593
00:20:55,919 --> 00:20:58,799
and we prioritize them

594
00:20:58,799 --> 00:21:01,840
how do we do this for each function

595
00:21:01,840 --> 00:21:04,159
we find the basic blocks that return

596
00:21:04,159 --> 00:21:05,600
non-constant data

597
00:21:05,600 --> 00:21:07,600
and we follow these returns before

598
00:21:07,600 --> 00:21:10,799
considering other parts

599
00:21:11,360 --> 00:21:13,679
our second feature is what we call team

600
00:21:13,679 --> 00:21:15,039
dependencies

601
00:21:15,039 --> 00:21:18,640
ten dependencies aims at

602
00:21:18,640 --> 00:21:21,520
alleviate overthinking issues proceeding

603
00:21:21,520 --> 00:21:23,919
without with our example

604
00:21:23,919 --> 00:21:25,679
we know now that the variable cmd is

605
00:21:25,679 --> 00:21:27,679
tainted and as you can see the variable

606
00:21:27,679 --> 00:21:28,240
cmd

607
00:21:28,240 --> 00:21:30,880
is passed to the function string lan now

608
00:21:30,880 --> 00:21:32,640
let's assume that

609
00:21:32,640 --> 00:21:34,159
the function string length is not

610
00:21:34,159 --> 00:21:37,360
analyzed for instance because either

611
00:21:37,360 --> 00:21:39,280
the body of this function is not present

612
00:21:39,280 --> 00:21:41,760
or because some limitation in the

613
00:21:41,760 --> 00:21:44,480
static analysis such as a limited call

614
00:21:44,480 --> 00:21:45,520
stack

615
00:21:45,520 --> 00:21:47,200
what the tent engine will do is that

616
00:21:47,200 --> 00:21:49,200
we'll create another

617
00:21:49,200 --> 00:21:52,400
uh 10 tag for the variable n so this

618
00:21:52,400 --> 00:21:54,640
means that the variable n and cmd will

619
00:21:54,640 --> 00:21:56,559
both be tainted by which two different

620
00:21:56,559 --> 00:21:57,760
tags

621
00:21:57,760 --> 00:21:59,919
now following the data flow of this

622
00:21:59,919 --> 00:22:01,760
program we see that the variable n

623
00:22:01,760 --> 00:22:04,840
is constrained between the values 0 and

624
00:22:04,840 --> 00:22:06,480
511

625
00:22:06,480 --> 00:22:08,080
in this case the variable n will be

626
00:22:08,080 --> 00:22:10,880
untainted but the variable cmd will not

627
00:22:10,880 --> 00:22:13,600
which in this case might cause the

628
00:22:13,600 --> 00:22:15,039
string copy to raise

629
00:22:15,039 --> 00:22:18,720
a false positive now what we can do is

630
00:22:18,720 --> 00:22:19,360
that

631
00:22:19,360 --> 00:22:22,240
we can create a dependency between the

632
00:22:22,240 --> 00:22:22,559
10

633
00:22:22,559 --> 00:22:25,440
tag of the variable cmd and the 10 tag

634
00:22:25,440 --> 00:22:27,039
of the variable n

635
00:22:27,039 --> 00:22:30,159
and if n gets untainted we cannot

636
00:22:30,159 --> 00:22:33,039
untaint cmd as well in this case the

637
00:22:33,039 --> 00:22:34,880
string copy will not generate a false

638
00:22:34,880 --> 00:22:36,960
positive

639
00:22:36,960 --> 00:22:39,200
we did this encounter and we also

640
00:22:39,200 --> 00:22:41,039
automatically find functions that

641
00:22:41,039 --> 00:22:41,679
implement

642
00:22:41,679 --> 00:22:44,159
stringland semantically equivalent code

643
00:22:44,159 --> 00:22:44,960
and create

644
00:22:44,960 --> 00:22:48,240
10 tag dependencies

645
00:22:48,720 --> 00:22:51,039
okay all of this is very cool but does

646
00:22:51,039 --> 00:22:53,200
it work

647
00:22:53,200 --> 00:22:56,320
we run an in-depth evaluation and um we

648
00:22:56,320 --> 00:22:57,200
analyzed

649
00:22:57,200 --> 00:22:59,760
53 devices from several different

650
00:22:59,760 --> 00:23:00,960
vendors

651
00:23:00,960 --> 00:23:04,240
and we found 46 uh new zero day bugs

652
00:23:04,240 --> 00:23:06,960
and we discovered another five now

653
00:23:06,960 --> 00:23:08,159
nuroli karonte

654
00:23:08,159 --> 00:23:11,440
found a new bugs but

655
00:23:11,440 --> 00:23:13,679
uh it decreased the number of generated

656
00:23:13,679 --> 00:23:14,880
alerts from

657
00:23:14,880 --> 00:23:18,480
more than 100 on average to five per

658
00:23:18,480 --> 00:23:19,520
firmware

659
00:23:19,520 --> 00:23:22,480
which means that it's a two order it's a

660
00:23:22,480 --> 00:23:25,039
reduction of two orders of magnitude

661
00:23:25,039 --> 00:23:28,320
and a low false positive rate

662
00:23:28,320 --> 00:23:31,200
as you can see in our experiments um we

663
00:23:31,200 --> 00:23:32,240
analyzed

664
00:23:32,240 --> 00:23:33,760
each binary in the firmware

665
00:23:33,760 --> 00:23:36,640
independently and this analysis raised

666
00:23:36,640 --> 00:23:39,679
more than 36 000 alerts

667
00:23:39,679 --> 00:23:43,120
and the whole analysis took 18 days

668
00:23:43,120 --> 00:23:45,919
on the other side we're running current

669
00:23:45,919 --> 00:23:47,279
our system generated

670
00:23:47,279 --> 00:23:51,679
only 74 alerts and the overall analysis

671
00:23:51,679 --> 00:23:55,360
completed in 34 hours

672
00:23:55,919 --> 00:23:57,440
we also performed a large scale

673
00:23:57,440 --> 00:24:00,039
evaluation where we consider

674
00:24:00,039 --> 00:24:03,600
899 firmware samples from 21 different

675
00:24:03,600 --> 00:24:05,440
vendors

676
00:24:05,440 --> 00:24:08,720
we found that uh 348

677
00:24:08,720 --> 00:24:10,640
samples firmware samples contain

678
00:24:10,640 --> 00:24:12,960
multibander interactions

679
00:24:12,960 --> 00:24:15,200
and current overall generated a few more

680
00:24:15,200 --> 00:24:16,880
than 1000 alerts

681
00:24:16,880 --> 00:24:19,600
in particular canada generated two

682
00:24:19,600 --> 00:24:20,720
alerts per

683
00:24:20,720 --> 00:24:23,520
female sample on average and of all

684
00:24:23,520 --> 00:24:25,360
these alerts we manually spected

685
00:24:25,360 --> 00:24:29,039
100 of them randomly we found that

686
00:24:29,039 --> 00:24:32,400
44 to be true positive

687
00:24:32,400 --> 00:24:34,559
and then that thirty of them were

688
00:24:34,559 --> 00:24:36,559
actually uh multibanded vulnerabilities

689
00:24:36,559 --> 00:24:37,760
which means that

690
00:24:37,760 --> 00:24:39,440
we found these vulnerabilities by

691
00:24:39,440 --> 00:24:41,279
tracking data flow across different

692
00:24:41,279 --> 00:24:43,600
binaries

693
00:24:43,600 --> 00:24:46,320
this slide shows all the results that we

694
00:24:46,320 --> 00:24:47,440
obtain in

695
00:24:47,440 --> 00:24:50,080
our large scale evaluation i understand

696
00:24:50,080 --> 00:24:51,360
that there's a lot going on on this

697
00:24:51,360 --> 00:24:52,159
slide but

698
00:24:52,159 --> 00:24:54,960
um i'll summarize these results in the

699
00:24:54,960 --> 00:24:57,600
next slides

700
00:24:57,679 --> 00:25:00,080
first off we looked at the size of the

701
00:25:00,080 --> 00:25:01,279
bdg

702
00:25:01,279 --> 00:25:04,640
and we found that most bdgs have

703
00:25:04,640 --> 00:25:07,039
five binaries but we also found that

704
00:25:07,039 --> 00:25:09,600
some bdgs are more complex as as you can

705
00:25:09,600 --> 00:25:10,159
see

706
00:25:10,159 --> 00:25:13,200
in this example we found one one

707
00:25:13,200 --> 00:25:14,000
firmware sample

708
00:25:14,000 --> 00:25:18,880
produce a bdg that contained 16 binaries

709
00:25:19,600 --> 00:25:22,320
finally uh we measure caronte's

710
00:25:22,320 --> 00:25:23,600
performance

711
00:25:23,600 --> 00:25:26,159
and as you can see from the from the

712
00:25:26,159 --> 00:25:27,440
first two graphs

713
00:25:27,440 --> 00:25:30,640
caronte scales well in terms of a number

714
00:25:30,640 --> 00:25:32,240
of analyzed paths

715
00:25:32,240 --> 00:25:34,720
and numbers or a number of analyzed

716
00:25:34,720 --> 00:25:36,000
binaries

717
00:25:36,000 --> 00:25:37,840
as you can see from the telegraph

718
00:25:37,840 --> 00:25:39,919
caronte in some cases

719
00:25:39,919 --> 00:25:42,880
took more than a day to analyze some

720
00:25:42,880 --> 00:25:44,559
some firmware

721
00:25:44,559 --> 00:25:46,880
we investigated and we found that there

722
00:25:46,880 --> 00:25:48,320
were some problems with

723
00:25:48,320 --> 00:25:51,200
with anger this problem got fixed and we

724
00:25:51,200 --> 00:25:53,440
are applying the fix to current

725
00:25:53,440 --> 00:25:56,159
overall we can see the current is scaled

726
00:25:56,159 --> 00:25:56,559
well

727
00:25:56,559 --> 00:25:59,039
and this is because our system only

728
00:25:59,039 --> 00:26:01,520
focuses on what matters only focus of

729
00:26:01,520 --> 00:26:03,760
a very small set of binaries instead of

730
00:26:03,760 --> 00:26:05,440
considering all of the binaries in a

731
00:26:05,440 --> 00:26:07,039
firmware

732
00:26:07,039 --> 00:26:09,520
and with this i will leave the virtual

733
00:26:09,520 --> 00:26:11,200
stage to andrea that

734
00:26:11,200 --> 00:26:15,279
he will show us a demo of our system

735
00:26:16,000 --> 00:26:17,600
thank you nero for the detailed

736
00:26:17,600 --> 00:26:19,120
explanation

737
00:26:19,120 --> 00:26:21,760
now you know how currently works let's

738
00:26:21,760 --> 00:26:23,600
see how to run it

739
00:26:23,600 --> 00:26:25,760
so we released all our code on github

740
00:26:25,760 --> 00:26:27,600
you can find it at this url

741
00:26:27,600 --> 00:26:29,440
and in the readme of this repository

742
00:26:29,440 --> 00:26:32,159
you'll also find instructions on how to

743
00:26:32,159 --> 00:26:34,159
pull a docker image that comes with

744
00:26:34,159 --> 00:26:36,480
karante already installed and ready to

745
00:26:36,480 --> 00:26:36,799
be

746
00:26:36,799 --> 00:26:40,240
fired so let's have a look if i

747
00:26:40,240 --> 00:26:45,440
uh uh run the uh docker container

748
00:26:46,000 --> 00:26:48,799
we can see here we have a folder karante

749
00:26:48,799 --> 00:26:49,440
and

750
00:26:49,440 --> 00:26:53,039
what you have to do to run our tool is

751
00:26:53,039 --> 00:26:54,000
simply

752
00:26:54,000 --> 00:26:57,200
preparing a a configuration file

753
00:26:57,200 --> 00:27:00,720
this is in json and in the config folder

754
00:27:00,720 --> 00:27:03,039
there are some there is both a template

755
00:27:03,039 --> 00:27:04,240
but also some

756
00:27:04,240 --> 00:27:07,600
example from real world

757
00:27:07,600 --> 00:27:10,880
samples we can have a look at one of

758
00:27:10,880 --> 00:27:11,279
them

759
00:27:11,279 --> 00:27:21,200
actually we can make it nicer

760
00:27:21,200 --> 00:27:25,279
okay so here you can see

761
00:27:25,279 --> 00:27:27,200
a list of options that can be set

762
00:27:27,200 --> 00:27:28,880
actually the very important option is

763
00:27:28,880 --> 00:27:30,640
the firmware path

764
00:27:30,640 --> 00:27:32,320
and is the only one that really needs to

765
00:27:32,320 --> 00:27:35,360
be set and in the vast majority of the

766
00:27:35,360 --> 00:27:36,159
cases

767
00:27:36,159 --> 00:27:37,919
all the other options can be left empty

768
00:27:37,919 --> 00:27:39,520
and currently will deal with that

769
00:27:39,520 --> 00:27:42,159
automatically and of course in our gita

770
00:27:42,159 --> 00:27:42,880
page you

771
00:27:42,880 --> 00:27:45,679
you'll find a proper description for

772
00:27:45,679 --> 00:27:47,120
each of these settings

773
00:27:47,120 --> 00:27:50,480
and when they should be used set

774
00:27:50,480 --> 00:27:53,120
tutura to actually run the tool we can

775
00:27:53,120 --> 00:27:54,240
simply

776
00:27:54,240 --> 00:27:58,880
pass the path to the configuration file

777
00:27:58,880 --> 00:28:03,840
let's do this now

778
00:28:04,720 --> 00:28:07,760
okay here it is now current is running

779
00:28:07,760 --> 00:28:08,799
and it's starting

780
00:28:08,799 --> 00:28:12,880
its analysis as nilo mentioned this

781
00:28:12,880 --> 00:28:15,679
can take a couple of hours so we'll not

782
00:28:15,679 --> 00:28:16,240
uh

783
00:28:16,240 --> 00:28:18,480
wait for this to finish but we can see

784
00:28:18,480 --> 00:28:20,320
what happens next

785
00:28:20,320 --> 00:28:21,600
at the end of the analysis currently

786
00:28:21,600 --> 00:28:23,600
produces a log file uh

787
00:28:23,600 --> 00:28:27,120
we we can have a look an example here uh

788
00:28:27,120 --> 00:28:30,320
this deal in json and here you'll find

789
00:28:30,320 --> 00:28:32,640
all the information the details about

790
00:28:32,640 --> 00:28:34,159
the results of the analysis so we can

791
00:28:34,159 --> 00:28:35,520
see information

792
00:28:35,520 --> 00:28:37,600
about the binary dependency graph how

793
00:28:37,600 --> 00:28:38,799
the different binaries

794
00:28:38,799 --> 00:28:42,080
interact with additional programs we can

795
00:28:42,080 --> 00:28:43,200
see

796
00:28:43,200 --> 00:28:46,480
statistics about the

797
00:28:46,480 --> 00:28:48,799
execution time and more importantly we

798
00:28:48,799 --> 00:28:50,240
can also look at the alerts so the

799
00:28:50,240 --> 00:28:52,080
alerted currently produced

800
00:28:52,080 --> 00:28:53,520
this is where potentially

801
00:28:53,520 --> 00:28:55,200
vulnerabilities my

802
00:28:55,200 --> 00:28:58,320
might might lie and

803
00:28:58,320 --> 00:28:59,919
again we can see information about the

804
00:28:59,919 --> 00:29:01,679
data flow and so on but instead of

805
00:29:01,679 --> 00:29:02,880
looking at this

806
00:29:02,880 --> 00:29:07,120
text-based log file we recently wrote a

807
00:29:07,120 --> 00:29:08,880
very simple

808
00:29:08,880 --> 00:29:12,480
user interface nothing extremely fancy

809
00:29:12,480 --> 00:29:15,679
but uh if i now run this uh

810
00:29:15,679 --> 00:29:18,559
and then we can see uh the results of

811
00:29:18,559 --> 00:29:19,360
the analysis

812
00:29:19,360 --> 00:29:22,080
in a browser so we can see here uh that

813
00:29:22,080 --> 00:29:24,240
for this specific firmware image

814
00:29:24,240 --> 00:29:27,440
uh this specific image contains 128

815
00:29:27,440 --> 00:29:28,799
binaries

816
00:29:28,799 --> 00:29:32,480
of course and luckily not all of them

817
00:29:32,480 --> 00:29:34,480
process user input so we can see a

818
00:29:34,480 --> 00:29:35,919
rather simple

819
00:29:35,919 --> 00:29:37,840
binary dependency graph shown in this

820
00:29:37,840 --> 00:29:38,960
picture

821
00:29:38,960 --> 00:29:42,080
the light nodes are the border binaries

822
00:29:42,080 --> 00:29:44,240
and we can see how these programs

823
00:29:44,240 --> 00:29:45,520
communicate

824
00:29:45,520 --> 00:29:48,159
with other binaries so we can see here

825
00:29:48,159 --> 00:29:48,960
that

826
00:29:48,960 --> 00:29:50,640
these two binaries interact using

827
00:29:50,640 --> 00:29:52,320
several data keys

828
00:29:52,320 --> 00:29:54,080
and for each of them we can see what are

829
00:29:54,080 --> 00:29:56,320
the cpf involved

830
00:29:56,320 --> 00:29:58,640
in caronta in the detection of these

831
00:29:58,640 --> 00:30:00,080
communications

832
00:30:00,080 --> 00:30:02,240
now what we also can do is that we can

833
00:30:02,240 --> 00:30:03,600
look at the alerts

834
00:30:03,600 --> 00:30:06,000
in this specific example currently

835
00:30:06,000 --> 00:30:07,600
generated 12 alerts

836
00:30:07,600 --> 00:30:09,760
and if i click on the first one we can

837
00:30:09,760 --> 00:30:11,679
see that the path of the alert gets

838
00:30:11,679 --> 00:30:13,679
highlighted in the graph

839
00:30:13,679 --> 00:30:17,120
and this alert is generated by a data

840
00:30:17,120 --> 00:30:19,200
flow that starts in the httpd

841
00:30:19,200 --> 00:30:22,480
binary which communicates with the file

842
00:30:22,480 --> 00:30:24,559
access.cgi binary

843
00:30:24,559 --> 00:30:26,240
specifically they communicate through

844
00:30:26,240 --> 00:30:29,039
this content type data key

845
00:30:29,039 --> 00:30:31,600
and we can see here the address of the

846
00:30:31,600 --> 00:30:32,640
buffer containing

847
00:30:32,640 --> 00:30:35,520
containing tainted data but also the

848
00:30:35,520 --> 00:30:36,640
address of our c

849
00:30:36,640 --> 00:30:39,520
so this is a the final step of our that

850
00:30:39,520 --> 00:30:40,240
data flow

851
00:30:40,240 --> 00:30:41,760
and this is potentially when the

852
00:30:41,760 --> 00:30:43,840
vulnerability might be

853
00:30:43,840 --> 00:30:47,760
so now if i uh um

854
00:30:47,760 --> 00:30:51,760
click on the very last binary of this

855
00:30:51,760 --> 00:30:54,080
path in this alert we integrate this

856
00:30:54,080 --> 00:30:56,159
with angus the compiler

857
00:30:56,159 --> 00:30:58,000
which will automatically decompile the

858
00:30:58,000 --> 00:31:00,240
potentially vulnerable functions where

859
00:31:00,240 --> 00:31:03,679
our data flow ends up the compiler in

860
00:31:03,679 --> 00:31:04,000
angular

861
00:31:04,000 --> 00:31:06,080
is still a work in progress so you can

862
00:31:06,080 --> 00:31:07,600
see that the quality of the

863
00:31:07,600 --> 00:31:09,519
the compiled code is not excellent but

864
00:31:09,519 --> 00:31:11,360
it's still good enough for us to

865
00:31:11,360 --> 00:31:14,000
spot a real vulnerability and in fact in

866
00:31:14,000 --> 00:31:15,279
this function

867
00:31:15,279 --> 00:31:17,200
this function reads tainted data from an

868
00:31:17,200 --> 00:31:18,559
environment variable

869
00:31:18,559 --> 00:31:22,159
and this data is later on used in an

870
00:31:22,159 --> 00:31:25,360
unsafe thin copy without checking

871
00:31:25,360 --> 00:31:29,120
any sides of the destination buffer

872
00:31:29,120 --> 00:31:32,080
so this was a very simple example of

873
00:31:32,080 --> 00:31:34,240
what of what karante can do

874
00:31:34,240 --> 00:31:37,200
i invited all to check it out on github

875
00:31:37,200 --> 00:31:38,159
and of course

876
00:31:38,159 --> 00:31:40,960
we disclosed this vulnerability and

877
00:31:40,960 --> 00:31:42,720
everything else that we found to the

878
00:31:42,720 --> 00:31:44,240
affected vendors

879
00:31:44,240 --> 00:31:46,559
we received some cves and many of them

880
00:31:46,559 --> 00:31:47,600
already released

881
00:31:47,600 --> 00:31:49,919
uh patches for for their for their

882
00:31:49,919 --> 00:31:50,880
images

883
00:31:50,880 --> 00:31:53,600
so to uh wrap up this presentation what

884
00:31:53,600 --> 00:31:54,960
we achieved so far

885
00:31:54,960 --> 00:31:57,919
uh we uh observed that firmware is

886
00:31:57,919 --> 00:31:59,039
mostly composed by

887
00:31:59,039 --> 00:32:01,360
multiple interacting binaries and we

888
00:32:01,360 --> 00:32:03,519
introduce static analysis techniques to

889
00:32:03,519 --> 00:32:05,120
perform multi-binary

890
00:32:05,120 --> 00:32:08,000
taint analysis on top of this approach

891
00:32:08,000 --> 00:32:10,320
we show that our prototype current

892
00:32:10,320 --> 00:32:12,320
can effectively discover unknown

893
00:32:12,320 --> 00:32:14,159
security vulnerabilities but at the same

894
00:32:14,159 --> 00:32:16,159
time drastically reducing

895
00:32:16,159 --> 00:32:18,480
the number of false alerts and an

896
00:32:18,480 --> 00:32:19,760
interesting point

897
00:32:19,760 --> 00:32:22,240
of our research is that we found out

898
00:32:22,240 --> 00:32:24,240
that despite program analysis a

899
00:32:24,240 --> 00:32:27,039
quite complex task even when applied to

900
00:32:27,039 --> 00:32:28,480
a single binary

901
00:32:28,480 --> 00:32:31,000
scaling program analysis to a

902
00:32:31,000 --> 00:32:32,720
multi-binary environment

903
00:32:32,720 --> 00:32:35,039
is possible because modeling

904
00:32:35,039 --> 00:32:36,799
interactions between these binaries

905
00:32:36,799 --> 00:32:39,840
make things actually quite easier

906
00:32:39,840 --> 00:32:42,640
okay then thank you again for uh

907
00:32:42,640 --> 00:32:43,919
attending our talk

908
00:32:43,919 --> 00:32:45,679
uh just a reminder there is an academic

909
00:32:45,679 --> 00:32:47,600
paper on this so if you want to

910
00:32:47,600 --> 00:32:50,000
read more details check it out and of

911
00:32:50,000 --> 00:32:52,000
course we are

912
00:32:52,000 --> 00:32:53,840
available and happy to take questions on

913
00:32:53,840 --> 00:32:57,360
on the live chat but also feel free to

914
00:32:57,360 --> 00:33:02,000
send us an email thank you very much

