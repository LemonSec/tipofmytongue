1
00:00:02,240 --> 00:00:04,080
good morning good afternoon or good

2
00:00:04,080 --> 00:00:06,000
evening depending on your time zone

3
00:00:06,000 --> 00:00:08,240
welcome to our talk may the trust be

4
00:00:08,240 --> 00:00:10,080
with you empowering trust on

5
00:00:10,080 --> 00:00:12,960
and with multiple trusted environments

6
00:00:12,960 --> 00:00:14,480
just to give you a bit of color

7
00:00:14,480 --> 00:00:16,960
of who we are and what we do my name is

8
00:00:16,960 --> 00:00:18,960
sandra pintu i'm a research scientist

9
00:00:18,960 --> 00:00:20,240
and assistant professor at the

10
00:00:20,240 --> 00:00:21,199
university of

11
00:00:21,199 --> 00:00:22,960
menio where i currently lead the

12
00:00:22,960 --> 00:00:24,560
embedded system research group and the

13
00:00:24,560 --> 00:00:26,400
number of very talented phds and

14
00:00:26,400 --> 00:00:27,599
master's students

15
00:00:27,599 --> 00:00:29,920
i'm also actively involved with security

16
00:00:29,920 --> 00:00:31,679
startups from the bay area that you may

17
00:00:31,679 --> 00:00:32,399
know that is

18
00:00:32,399 --> 00:00:35,440
x5 my co-speaker daniel is currently

19
00:00:35,440 --> 00:00:37,840
pursuing his phd under my supervision

20
00:00:37,840 --> 00:00:39,840
and over the last few years daniel have

21
00:00:39,840 --> 00:00:42,239
worked closely to industry in several r

22
00:00:42,239 --> 00:00:45,039
d projects you can definitely find us on

23
00:00:45,039 --> 00:00:47,280
twitter but also on linkedin guitar

24
00:00:47,280 --> 00:00:49,920
research gate and so on

25
00:00:49,920 --> 00:00:52,399
so this is the agenda for today i will

26
00:00:52,399 --> 00:00:54,399
focus on the first three points and then

27
00:00:54,399 --> 00:00:56,000
then you will go through the design

28
00:00:56,000 --> 00:00:58,000
implementation and evaluation of our

29
00:00:58,000 --> 00:01:02,000
solution let's start the whole story

30
00:01:02,000 --> 00:01:04,080
with one of the most used buzzwords of

31
00:01:04,080 --> 00:01:04,720
the

32
00:01:04,720 --> 00:01:06,560
type world that is the internet of

33
00:01:06,560 --> 00:01:08,400
things or simply the iot

34
00:01:08,400 --> 00:01:10,640
so the iot aims at connecting every

35
00:01:10,640 --> 00:01:12,080
single device to the internet

36
00:01:12,080 --> 00:01:13,520
with the intention of disrupting

37
00:01:13,520 --> 00:01:15,759
societies and creating several social

38
00:01:15,759 --> 00:01:17,520
and economic benefits

39
00:01:17,520 --> 00:01:19,040
the numbers are impressive and the

40
00:01:19,040 --> 00:01:21,280
market opportunity is definitely huge i

41
00:01:21,280 --> 00:01:23,439
do remember when i was in santa clara

42
00:01:23,439 --> 00:01:26,240
back in 2070 attending the armed icon

43
00:01:26,240 --> 00:01:28,240
and when arm disclosed that projects is

44
00:01:28,240 --> 00:01:30,560
on the road to the trillion iot device

45
00:01:30,560 --> 00:01:33,040
by 2035

46
00:01:33,040 --> 00:01:34,640
well one of the biggest challenges in

47
00:01:34,640 --> 00:01:36,400
the iot is security

48
00:01:36,400 --> 00:01:38,240
because by connecting every single

49
00:01:38,240 --> 00:01:40,320
device to the internet we are massively

50
00:01:40,320 --> 00:01:42,079
enlarging the attack surface on those

51
00:01:42,079 --> 00:01:42,880
devices

52
00:01:42,880 --> 00:01:44,880
and the biggest problem is that first

53
00:01:44,880 --> 00:01:46,479
companies have a lack of security

54
00:01:46,479 --> 00:01:47,439
experience

55
00:01:47,439 --> 00:01:49,520
and second devices are built without any

56
00:01:49,520 --> 00:01:51,360
kind of security requirements

57
00:01:51,360 --> 00:01:53,759
and that's why what you have seen so far

58
00:01:53,759 --> 00:01:56,159
is a cat and mouse game of increasing x

59
00:01:56,159 --> 00:01:58,320
and batches

60
00:01:58,320 --> 00:02:01,360
so just to recap iot devices have

61
00:02:01,360 --> 00:02:03,040
specific requirements and these

62
00:02:03,040 --> 00:02:04,320
requirements first

63
00:02:04,320 --> 00:02:07,280
enlarge significantly the attack surface

64
00:02:07,280 --> 00:02:08,959
and second creates an enormous

65
00:02:08,959 --> 00:02:11,200
attraction for actors

66
00:02:11,200 --> 00:02:14,319
then the great majority of iot devices

67
00:02:14,319 --> 00:02:15,840
are still being built around the

68
00:02:15,840 --> 00:02:17,599
traditional computing model

69
00:02:17,599 --> 00:02:20,800
and when all code blocks are combined in

70
00:02:20,800 --> 00:02:22,000
a single memory space

71
00:02:22,000 --> 00:02:25,360
there is no isolation and i knew since

72
00:02:25,360 --> 00:02:27,440
day one there is a problem out there and

73
00:02:27,440 --> 00:02:29,360
they need to do something and basically

74
00:02:29,360 --> 00:02:30,959
they have decides to include armed

75
00:02:30,959 --> 00:02:32,239
trusts on in their

76
00:02:32,239 --> 00:02:35,200
full portfolio so the one million dollar

77
00:02:35,200 --> 00:02:36,239
question is

78
00:02:36,239 --> 00:02:39,280
instazone enough so the three key

79
00:02:39,280 --> 00:02:41,440
motivation points for this work were

80
00:02:41,440 --> 00:02:43,680
first of all we had a strong background

81
00:02:43,680 --> 00:02:45,920
on trustzone so we want to explore this

82
00:02:45,920 --> 00:02:46,879
new variant

83
00:02:46,879 --> 00:02:50,080
specifically built for mcu's second and

84
00:02:50,080 --> 00:02:52,000
in the context of a different work which

85
00:02:52,000 --> 00:02:54,160
i will talk later in this presentation

86
00:02:54,160 --> 00:02:56,239
we have observed that the trust some

87
00:02:56,239 --> 00:02:58,159
classic dual world model is falling

88
00:02:58,159 --> 00:02:58,959
short to address

89
00:02:58,959 --> 00:03:01,599
increasing requirements of modern device

90
00:03:01,599 --> 00:03:02,560
and thirdly

91
00:03:02,560 --> 00:03:04,560
we decided to understand how we could

92
00:03:04,560 --> 00:03:06,400
leverage the existing interests on m

93
00:03:06,400 --> 00:03:08,319
hardware building blocks to implement a

94
00:03:08,319 --> 00:03:10,159
multi-world approach

95
00:03:10,159 --> 00:03:12,000
so let's go now through a quick overview

96
00:03:12,000 --> 00:03:14,239
of armatures on technology

97
00:03:14,239 --> 00:03:17,200
i understand was introduced back in 2004

98
00:03:17,200 --> 00:03:19,360
targeting arm application processors the

99
00:03:19,360 --> 00:03:21,360
cortex airline and the technology has

100
00:03:21,360 --> 00:03:22,959
achieved mainstream adoption in the

101
00:03:22,959 --> 00:03:24,400
mobile industry

102
00:03:24,400 --> 00:03:26,879
in 2018 and basically to address the

103
00:03:26,879 --> 00:03:28,879
problem we have discussed so far

104
00:03:28,879 --> 00:03:30,959
and decided to start introducing trusts

105
00:03:30,959 --> 00:03:32,239
only in the new generation of

106
00:03:32,239 --> 00:03:34,319
microcontrollers the so-called trisome

107
00:03:34,319 --> 00:03:36,799
m from an eye-level perspective both

108
00:03:36,799 --> 00:03:38,720
technologies are similar

109
00:03:38,720 --> 00:03:40,640
i mean the processor can execute either

110
00:03:40,640 --> 00:03:42,720
in the secure and unsecured state

111
00:03:42,720 --> 00:03:44,640
but from a low-level perspective there

112
00:03:44,640 --> 00:03:46,000
are significant difference in the

113
00:03:46,000 --> 00:03:48,159
realization of both technologies mainly

114
00:03:48,159 --> 00:03:49,280
because stress on

115
00:03:49,280 --> 00:03:51,760
m is quietly optimized for deterministic

116
00:03:51,760 --> 00:03:52,480
execution

117
00:03:52,480 --> 00:03:55,760
low overhead and low power well

118
00:03:55,760 --> 00:03:57,760
the first big difference is related to

119
00:03:57,760 --> 00:03:59,120
the execution state

120
00:03:59,120 --> 00:04:00,799
while in the cortex and processors the

121
00:04:00,799 --> 00:04:03,599
security state is dictated by the 33-bit

122
00:04:03,599 --> 00:04:04,640
the nausica be it

123
00:04:04,640 --> 00:04:07,120
interests on mm's use the security state

124
00:04:07,120 --> 00:04:09,360
is dependent from the memory space

125
00:04:09,360 --> 00:04:11,439
and the memory space can be partitioned

126
00:04:11,439 --> 00:04:14,080
not only insecure and unsecured but

127
00:04:14,080 --> 00:04:17,680
also in non-secure color well for those

128
00:04:17,680 --> 00:04:20,320
who know the rmd7 mrt tattoo pql they

129
00:04:20,320 --> 00:04:22,479
know existing processor modes are thread

130
00:04:22,479 --> 00:04:24,800
and handler mode with 10 mode capable of

131
00:04:24,800 --> 00:04:26,400
running privilege and and playlist

132
00:04:26,400 --> 00:04:27,600
software

133
00:04:27,600 --> 00:04:29,680
well in on the item architecture the

134
00:04:29,680 --> 00:04:31,120
security states are completely

135
00:04:31,120 --> 00:04:32,960
orthogonal to the existing processor

136
00:04:32,960 --> 00:04:33,440
modes

137
00:04:33,440 --> 00:04:35,600
this means there is a replica of the

138
00:04:35,600 --> 00:04:37,280
thread and the handler mode for the

139
00:04:37,280 --> 00:04:40,080
secure and unsecured states

140
00:04:40,080 --> 00:04:41,600
and of course there are different

141
00:04:41,600 --> 00:04:43,440
privileges in terms of transitions

142
00:04:43,440 --> 00:04:45,360
between the security states for example

143
00:04:45,360 --> 00:04:47,680
the secure software can explicitly call

144
00:04:47,680 --> 00:04:49,680
an unsecured function

145
00:04:49,680 --> 00:04:52,080
but the opposite is not possible i mean

146
00:04:52,080 --> 00:04:54,560
the non-secure software cannot directly

147
00:04:54,560 --> 00:04:55,840
call a secure function

148
00:04:55,840 --> 00:04:58,400
if that happens a secure fault exception

149
00:04:58,400 --> 00:04:58,880
will be

150
00:04:58,880 --> 00:05:02,479
triggered well to mediate transitions

151
00:05:02,479 --> 00:05:04,080
between the non-secure state and the

152
00:05:04,080 --> 00:05:06,400
secure state which perceives sensitive

153
00:05:06,400 --> 00:05:08,160
arms introduced this concept of

154
00:05:08,160 --> 00:05:09,759
non-secure callable

155
00:05:09,759 --> 00:05:11,919
the non-secure callable area is the most

156
00:05:11,919 --> 00:05:13,520
similar mechanism to the monitor

157
00:05:13,520 --> 00:05:14,240
component

158
00:05:14,240 --> 00:05:16,560
existing cortex and processors and

159
00:05:16,560 --> 00:05:18,320
provides a security entry point for

160
00:05:18,320 --> 00:05:19,759
non-secure software

161
00:05:19,759 --> 00:05:21,520
these entry points need to fulfill

162
00:05:21,520 --> 00:05:22,880
specific requirements

163
00:05:22,880 --> 00:05:25,919
such as the first instruction in the api

164
00:05:25,919 --> 00:05:29,919
must be an sg or a secure gateway

165
00:05:29,919 --> 00:05:32,160
the question now is how memory and

166
00:05:32,160 --> 00:05:34,080
device are partitioned and since there

167
00:05:34,080 --> 00:05:36,080
is no trust on address space controller

168
00:05:36,080 --> 00:05:38,400
neither the trust on protection control

169
00:05:38,400 --> 00:05:41,360
well interesting mms use there are

170
00:05:41,360 --> 00:05:43,680
attribution units there are the there is

171
00:05:43,680 --> 00:05:44,000
the

172
00:05:44,000 --> 00:05:46,400
implementation defined attribution unit

173
00:05:46,400 --> 00:05:47,440
ida you

174
00:05:47,440 --> 00:05:50,400
and the secure attribution unit acu and

175
00:05:50,400 --> 00:05:51,199
basically

176
00:05:51,199 --> 00:05:53,759
the result security state is the logical

177
00:05:53,759 --> 00:05:55,759
order operation between both attribution

178
00:05:55,759 --> 00:05:57,199
units

179
00:05:57,199 --> 00:05:59,759
so the idea you provide static

180
00:05:59,759 --> 00:06:00,720
partitioning

181
00:06:00,720 --> 00:06:02,960
and its known problem model and is

182
00:06:02,960 --> 00:06:04,720
specif specified

183
00:06:04,720 --> 00:06:07,840
and customized by the silicon vendor on

184
00:06:07,840 --> 00:06:08,639
the other end

185
00:06:08,639 --> 00:06:11,520
the sau provides dynamic partitioning it

186
00:06:11,520 --> 00:06:13,759
is totally programmable obviously

187
00:06:13,759 --> 00:06:16,080
in the secure state and is always

188
00:06:16,080 --> 00:06:17,520
available on the ship

189
00:06:17,520 --> 00:06:19,520
the single parameter that is tied to the

190
00:06:19,520 --> 00:06:21,759
vendor is the number of available memory

191
00:06:21,759 --> 00:06:23,520
regions which typically is

192
00:06:23,520 --> 00:06:26,800
eight so just to highlight and to give

193
00:06:26,800 --> 00:06:28,880
an example all the synergy between both

194
00:06:28,880 --> 00:06:30,720
attribution and units work

195
00:06:30,720 --> 00:06:32,639
let's take as an example the address

196
00:06:32,639 --> 00:06:34,240
thousand two thousand

197
00:06:34,240 --> 00:06:37,120
so it is defined as non-secure in the

198
00:06:37,120 --> 00:06:38,240
ida you

199
00:06:38,240 --> 00:06:41,120
and as secure in the sau so the the

200
00:06:41,120 --> 00:06:42,400
final result

201
00:06:42,400 --> 00:06:46,000
is cq so you can see here the full truth

202
00:06:46,000 --> 00:06:46,960
table for this

203
00:06:46,960 --> 00:06:50,880
resulting security configuration

204
00:06:50,880 --> 00:06:54,160
so the sau and ida u are specific

205
00:06:54,160 --> 00:06:54,880
controllers

206
00:06:54,880 --> 00:06:58,000
at the core level but when there is socs

207
00:06:58,000 --> 00:06:59,919
with additional buzz masters such as

208
00:06:59,919 --> 00:07:02,160
dmas there is the need for implementing

209
00:07:02,160 --> 00:07:04,639
additional controllers at the system lab

210
00:07:04,639 --> 00:07:06,639
these boss filters are very specific to

211
00:07:06,639 --> 00:07:08,560
the target platform and to the vendor

212
00:07:08,560 --> 00:07:10,160
and for the target platform

213
00:07:10,160 --> 00:07:14,960
the moscow e1 there is an mpc and a ppc

214
00:07:14,960 --> 00:07:17,120
just conclude this section what we can

215
00:07:17,120 --> 00:07:18,639
learn about interrupt

216
00:07:18,639 --> 00:07:20,880
the handling so for those who know the

217
00:07:20,880 --> 00:07:23,280
rp7m architecture pretty well they know

218
00:07:23,280 --> 00:07:25,199
there is an interrupt controller named

219
00:07:25,199 --> 00:07:28,000
next vector interrupt controller so

220
00:07:28,000 --> 00:07:29,759
there is a vector table tied to

221
00:07:29,759 --> 00:07:32,400
interrupts available on the platform

222
00:07:32,400 --> 00:07:34,639
in the rv8m architecture there is a

223
00:07:34,639 --> 00:07:36,960
vector table per security state

224
00:07:36,960 --> 00:07:39,520
and nvec was extended also to allow

225
00:07:39,520 --> 00:07:40,479
configuration

226
00:07:40,479 --> 00:07:43,120
of interrupts as secured and unsecured

227
00:07:43,120 --> 00:07:45,360
and secure interrupts can have higher

228
00:07:45,360 --> 00:07:47,599
priority than non-secure interest just

229
00:07:47,599 --> 00:07:49,759
to avoid any kind of denial of service

230
00:07:49,759 --> 00:07:51,440
attack

231
00:07:51,440 --> 00:07:53,520
so let's talk a little bit now about the

232
00:07:53,520 --> 00:07:55,759
security state of trust on and what we

233
00:07:55,759 --> 00:07:58,080
have learned so far

234
00:07:58,080 --> 00:08:00,160
well my intention with this slide is not

235
00:08:00,160 --> 00:08:02,080
to diminish the value of the technology

236
00:08:02,080 --> 00:08:03,440
neither developer of the existing

237
00:08:03,440 --> 00:08:05,840
solutions but the sad reality is that

238
00:08:05,840 --> 00:08:07,840
over the past year stress on assisted

239
00:08:07,840 --> 00:08:09,680
tests have been successfully

240
00:08:09,680 --> 00:08:12,879
attacked hundreds of times and to

241
00:08:12,879 --> 00:08:14,639
understand the extent of the problem

242
00:08:14,639 --> 00:08:16,479
and in the context of the phd of another

243
00:08:16,479 --> 00:08:17,919
online student

244
00:08:17,919 --> 00:08:20,080
we have performed the most extensive

245
00:08:20,080 --> 00:08:22,319
study to date of existing secular

246
00:08:22,319 --> 00:08:24,240
vulnerabilities affecting trust on

247
00:08:24,240 --> 00:08:25,759
assisted teens

248
00:08:25,759 --> 00:08:28,080
his work was accepted and presented at

249
00:08:28,080 --> 00:08:29,680
the ies in

250
00:08:29,680 --> 00:08:33,039
snp auckland last may and in this work

251
00:08:33,039 --> 00:08:34,958
we have analyzed more than 200

252
00:08:34,958 --> 00:08:36,719
vulnerabilities spanning across

253
00:08:36,719 --> 00:08:39,360
different source cvs sves paper blog

254
00:08:39,360 --> 00:08:40,559
posts and whatever

255
00:08:40,559 --> 00:08:42,559
and we have reverse engineering five

256
00:08:42,559 --> 00:08:45,040
commercial tvs qualcomm trastonic

257
00:08:45,040 --> 00:08:48,480
opte huawei and nvidia we have also

258
00:08:48,480 --> 00:08:50,640
classified this vulnerability

259
00:08:50,640 --> 00:08:52,480
among three main categories

260
00:08:52,480 --> 00:08:54,240
architectural implementation

261
00:08:54,240 --> 00:08:56,480
and hardware and i would like to

262
00:08:56,480 --> 00:08:58,399
highlight that one of our conclusions

263
00:08:58,399 --> 00:09:00,000
was that more than half of those

264
00:09:00,000 --> 00:09:02,000
vulnerabilities are raped as critical

265
00:09:02,000 --> 00:09:03,120
and cv

266
00:09:03,120 --> 00:09:04,959
for the remaining of this section i will

267
00:09:04,959 --> 00:09:06,839
focus on the architectural

268
00:09:06,839 --> 00:09:09,040
issues specifically on those that

269
00:09:09,040 --> 00:09:11,360
contribute to the attack surface

270
00:09:11,360 --> 00:09:13,600
well the first conclusion is that t

271
00:09:13,600 --> 00:09:16,880
interface have become pretty large

272
00:09:16,880 --> 00:09:19,040
first the number of commands handled by

273
00:09:19,040 --> 00:09:21,200
thruster applications tend to be fairly

274
00:09:21,200 --> 00:09:21,680
large

275
00:09:21,680 --> 00:09:24,000
for example the wi-fi and ta implements

276
00:09:24,000 --> 00:09:27,120
70 different commands

277
00:09:27,120 --> 00:09:30,480
like this one second the t currently

278
00:09:30,480 --> 00:09:32,640
expose a live number of system calls to

279
00:09:32,640 --> 00:09:34,480
tas for example the qualcomm t

280
00:09:34,480 --> 00:09:37,680
kernel provides to ta 69 system calls

281
00:09:37,680 --> 00:09:39,279
and third and last the access

282
00:09:39,279 --> 00:09:41,440
permissions to te system calls are

283
00:09:41,440 --> 00:09:43,040
frequently coarse grain

284
00:09:43,040 --> 00:09:45,279
for example the trust on ete shares a

285
00:09:45,279 --> 00:09:47,360
fingerprint device driver with almost

286
00:09:47,360 --> 00:09:49,600
all tas

287
00:09:49,600 --> 00:09:52,000
we are in a position to say that while

288
00:09:52,000 --> 00:09:52,959
interfacing t

289
00:09:52,959 --> 00:09:54,880
components promote design is more prone

290
00:09:54,880 --> 00:09:56,160
to vulnerabilities

291
00:09:56,160 --> 00:09:58,640
and there is a very interesting work

292
00:09:58,640 --> 00:10:01,120
published by yan von bulk at ccs

293
00:10:01,120 --> 00:10:04,240
named at all of the works worlds which

294
00:10:04,240 --> 00:10:06,640
precisely focus on this problematic but

295
00:10:06,640 --> 00:10:10,640
but for intelligence and risk five

296
00:10:10,640 --> 00:10:13,680
so the second conclusion is that t is a

297
00:10:13,680 --> 00:10:16,079
very large t series part of the design

298
00:10:16,079 --> 00:10:17,360
philosophy of a t

299
00:10:17,360 --> 00:10:19,279
system is that they should rely on a

300
00:10:19,279 --> 00:10:20,640
small tcb

301
00:10:20,640 --> 00:10:23,040
however we have measured binary size and

302
00:10:23,040 --> 00:10:23,760
the number of

303
00:10:23,760 --> 00:10:25,760
lines of codes for the five commercial

304
00:10:25,760 --> 00:10:28,959
tes and what we have concluded is that

305
00:10:28,959 --> 00:10:31,040
tes are friendly bigger than similar

306
00:10:31,040 --> 00:10:32,800
software systems and depending on the

307
00:10:32,800 --> 00:10:34,560
system configuration and the number of

308
00:10:34,560 --> 00:10:39,040
tas they may reach several megabytes

309
00:10:39,040 --> 00:10:41,040
so there is a common belief that is

310
00:10:41,040 --> 00:10:42,640
highly secure because they present a

311
00:10:42,640 --> 00:10:43,920
small tcb

312
00:10:43,920 --> 00:10:45,279
but the numbers and the facts

313
00:10:45,279 --> 00:10:47,519
demonstrate precisely the opposite tees

314
00:10:47,519 --> 00:10:50,560
are too big and too complex to be secure

315
00:10:50,560 --> 00:10:52,720
so just to wrap up this section and put

316
00:10:52,720 --> 00:10:54,320
in perspective what you can find out

317
00:10:54,320 --> 00:10:55,760
there specifically designed for the

318
00:10:55,760 --> 00:10:57,519
trusts on mcu

319
00:10:57,519 --> 00:11:01,120
so first arm truss firmware m or atf

320
00:11:01,120 --> 00:11:03,040
m provides a reference implementation of

321
00:11:03,040 --> 00:11:06,480
the secure rule software for arm v8 mcus

322
00:11:06,480 --> 00:11:08,079
if you take a look at the source code

323
00:11:08,079 --> 00:11:09,839
and if you compile the existing project

324
00:11:09,839 --> 00:11:10,880
you can easily

325
00:11:10,880 --> 00:11:12,959
realize that first the significant

326
00:11:12,959 --> 00:11:14,720
amount of coding tended to be deployed

327
00:11:14,720 --> 00:11:16,079
on secure side

328
00:11:16,079 --> 00:11:18,560
and second that generate binary can

329
00:11:18,560 --> 00:11:20,399
easily push the tcp of your system to

330
00:11:20,399 --> 00:11:22,399
100 kilobytes

331
00:11:22,399 --> 00:11:24,720
second the kinesdm which is the specific

332
00:11:24,720 --> 00:11:26,560
answer from drastone to protect interest

333
00:11:26,560 --> 00:11:28,000
on mmcu's

334
00:11:28,000 --> 00:11:30,000
is being adapted from the existing

335
00:11:30,000 --> 00:11:32,320
kinebte from robots

336
00:11:32,320 --> 00:11:35,200
last but not least i want to stress that

337
00:11:35,200 --> 00:11:37,279
more dangerous than large tcbs and

338
00:11:37,279 --> 00:11:39,519
interface is the confusing message army

339
00:11:39,519 --> 00:11:41,600
is currently spreading in terms of what

340
00:11:41,600 --> 00:11:43,760
should be deployed on secure world

341
00:11:43,760 --> 00:11:45,440
the two images were extract from the

342
00:11:45,440 --> 00:11:47,279
official documentation from ir that you

343
00:11:47,279 --> 00:11:49,279
can find on the official just on m

344
00:11:49,279 --> 00:11:50,480
website

345
00:11:50,480 --> 00:11:52,079
and if you take a look you can easily

346
00:11:52,079 --> 00:11:54,240
state that arm is suggesting people to

347
00:11:54,240 --> 00:11:56,320
encapsulate entire west kernels and

348
00:11:56,320 --> 00:11:58,800
communications tags on the secure side

349
00:11:58,800 --> 00:12:01,200
this is a very confusing message and

350
00:12:01,200 --> 00:12:02,959
just highlights the problems developed

351
00:12:02,959 --> 00:12:03,360
so

352
00:12:03,360 --> 00:12:05,200
developers are currently facing on

353
00:12:05,200 --> 00:12:07,920
deciding what tags shall we put in what

354
00:12:07,920 --> 00:12:08,959
baskets

355
00:12:08,959 --> 00:12:11,200
and especially when there is more and

356
00:12:11,200 --> 00:12:12,959
more features to consolidate in a single

357
00:12:12,959 --> 00:12:14,160
device

358
00:12:14,160 --> 00:12:17,040
so we by no mean intends to diminish the

359
00:12:17,040 --> 00:12:18,720
value of these solutions and i would

360
00:12:18,720 --> 00:12:20,560
like to make very clear that we haven't

361
00:12:20,560 --> 00:12:21,920
performed a deep study on these

362
00:12:21,920 --> 00:12:22,560
solutions

363
00:12:22,560 --> 00:12:26,480
yet but with what we have seen so far

364
00:12:26,480 --> 00:12:28,560
it is very likely that the same problems

365
00:12:28,560 --> 00:12:30,480
will happen again in the future

366
00:12:30,480 --> 00:12:33,040
so we are now in a position to say that

367
00:12:33,040 --> 00:12:35,440
the dual world model provided by trust

368
00:12:35,440 --> 00:12:37,360
zone is falling short to address the

369
00:12:37,360 --> 00:12:39,600
increasing requirements of modern iot

370
00:12:39,600 --> 00:12:40,720
device

371
00:12:40,720 --> 00:12:43,279
so i will end it over now to daniel

372
00:12:43,279 --> 00:12:44,399
which basically we

373
00:12:44,399 --> 00:12:46,639
will explain the design implementation

374
00:12:46,639 --> 00:12:49,200
and evaluation of our solution

375
00:12:49,200 --> 00:12:51,440
hello everyone hope you are enjoying our

376
00:12:51,440 --> 00:12:52,560
talk so far

377
00:12:52,560 --> 00:12:54,000
i will present the micro timer

378
00:12:54,000 --> 00:12:56,160
infrastructure which was born to empower

379
00:12:56,160 --> 00:12:58,240
trusts on basic systems with multiple

380
00:12:58,240 --> 00:13:00,800
trusted environments

381
00:13:00,800 --> 00:13:03,120
as someone has presented to you one of

382
00:13:03,120 --> 00:13:04,079
the root cause of

383
00:13:04,079 --> 00:13:06,160
prevailing vulnerabilities interests on

384
00:13:06,160 --> 00:13:07,120
based systems

385
00:13:07,120 --> 00:13:09,360
is related to the traditional dual world

386
00:13:09,360 --> 00:13:10,399
model

387
00:13:10,399 --> 00:13:12,160
if the new solutions emerging the

388
00:13:12,160 --> 00:13:14,399
threshold m ecosystem are following the

389
00:13:14,399 --> 00:13:15,519
same bumpy path

390
00:13:15,519 --> 00:13:17,279
that the big threshold has already

391
00:13:17,279 --> 00:13:19,360
traveled so one may ask is there a

392
00:13:19,360 --> 00:13:20,560
better solution

393
00:13:20,560 --> 00:13:22,720
yes with mikrotango it is possible to

394
00:13:22,720 --> 00:13:25,519
break down this dual world model barrier

395
00:13:25,519 --> 00:13:27,360
we follow a zero truss approach by

396
00:13:27,360 --> 00:13:29,600
isolating each piece of code on its

397
00:13:29,600 --> 00:13:34,000
own equally secure execution environment

398
00:13:34,000 --> 00:13:36,160
to enable multiple words on tests and

399
00:13:36,160 --> 00:13:38,560
systems micro tango kernel solely relies

400
00:13:38,560 --> 00:13:41,279
on the artwork hooks provided by trussa

401
00:13:41,279 --> 00:13:43,199
these are the top 10 high level details

402
00:13:43,199 --> 00:13:44,639
of improtangle

403
00:13:44,639 --> 00:13:47,199
first the grotegos is on the secure side

404
00:13:47,199 --> 00:13:48,000
and it's the first

405
00:13:48,000 --> 00:13:50,639
software component to run worlds will

406
00:13:50,639 --> 00:13:52,480
run one at a time in a round-robin

407
00:13:52,480 --> 00:13:54,800
fashion in the non-secure state

408
00:13:54,800 --> 00:13:56,720
the worlds waiting for that slot time

409
00:13:56,720 --> 00:13:59,440
are safely preserved on the secure side

410
00:13:59,440 --> 00:14:02,160
to achieve this at each traveling point

411
00:14:02,160 --> 00:14:04,320
the sio is set with memory settings

412
00:14:04,320 --> 00:14:07,279
associated with the world to be resumed

413
00:14:07,279 --> 00:14:09,120
in the same way the security state of

414
00:14:09,120 --> 00:14:12,880
interrupts will also be changed

415
00:14:12,880 --> 00:14:14,800
during this context switching each world

416
00:14:14,800 --> 00:14:17,040
context will be saved into memory

417
00:14:17,040 --> 00:14:18,800
the scheduler component is supported by

418
00:14:18,800 --> 00:14:20,720
the system timer which is banked between

419
00:14:20,720 --> 00:14:22,160
states in rd8m

420
00:14:22,160 --> 00:14:25,519
architectures seven these the base

421
00:14:25,519 --> 00:14:27,600
filters which extend the secure state of

422
00:14:27,600 --> 00:14:29,519
the remaining soc resources are

423
00:14:29,519 --> 00:14:30,079
configured

424
00:14:30,079 --> 00:14:32,240
in boot time to match the world's memory

425
00:14:32,240 --> 00:14:34,639
space

426
00:14:34,639 --> 00:14:35,920
regarding the configuration of the

427
00:14:35,920 --> 00:14:37,760
rectangle it is done steadily through

428
00:14:37,760 --> 00:14:39,920
the simple flat file where we set each

429
00:14:39,920 --> 00:14:40,320
world

430
00:14:40,320 --> 00:14:42,839
memory every interrupt among other

431
00:14:42,839 --> 00:14:44,320
options

432
00:14:44,320 --> 00:14:46,399
mikko tango was deploying the iron musk

433
00:14:46,399 --> 00:14:48,959
v1 platform which was the first rv8m

434
00:14:48,959 --> 00:14:50,079
silicon platform

435
00:14:50,079 --> 00:14:53,120
available in the market

436
00:14:53,839 --> 00:14:55,760
to better understand nicotine design and

437
00:14:55,760 --> 00:14:57,600
implementation let's bear in mind this

438
00:14:57,600 --> 00:14:59,519
use case over the next slides

439
00:14:59,519 --> 00:15:01,519
in this example my contact is configured

440
00:15:01,519 --> 00:15:03,360
with two worlds the first is a bare

441
00:15:03,360 --> 00:15:04,399
metal application

442
00:15:04,399 --> 00:15:07,040
featuring a serial terminal second one

443
00:15:07,040 --> 00:15:08,320
is an application blinking

444
00:15:08,320 --> 00:15:11,839
an led every one millisecond uart device

445
00:15:11,839 --> 00:15:13,440
is assigned to the first world and the

446
00:15:13,440 --> 00:15:15,600
pwm and target device are assigned to

447
00:15:15,600 --> 00:15:18,320
second order

448
00:15:18,399 --> 00:15:20,399
during boot micro tank will start by

449
00:15:20,399 --> 00:15:22,639
configuring some cpu options such as

450
00:15:22,639 --> 00:15:24,800
enabling all fault handlers d7 system

451
00:15:24,800 --> 00:15:26,000
results from the non-secure

452
00:15:26,000 --> 00:15:28,959
state and prioritizing secure accessions

453
00:15:28,959 --> 00:15:31,120
over non-secure ones

454
00:15:31,120 --> 00:15:32,560
then the system timer will be

455
00:15:32,560 --> 00:15:34,560
initialized with the selected tick time

456
00:15:34,560 --> 00:15:36,160
for the system

457
00:15:36,160 --> 00:15:37,759
on the next step in croton will prepare

458
00:15:37,759 --> 00:15:39,279
the world's control block

459
00:15:39,279 --> 00:15:41,680
this is a data structure used to save or

460
00:15:41,680 --> 00:15:43,600
restore the world's context

461
00:15:43,600 --> 00:15:46,000
each words seo memory regions vectors

462
00:15:46,000 --> 00:15:47,680
table initial stack pointer among

463
00:15:47,680 --> 00:15:49,759
others will be initialized to allow fast

464
00:15:49,759 --> 00:15:52,000
context switching between words

465
00:15:52,000 --> 00:15:54,240
before jumping to the non-secure state

466
00:15:54,240 --> 00:15:55,920
the sao will also be set

467
00:15:55,920 --> 00:15:57,519
with the memory regions belonging to the

468
00:15:57,519 --> 00:16:00,399
first world run

469
00:16:01,759 --> 00:16:04,079
and finally mkhotang will kick off by

470
00:16:04,079 --> 00:16:06,000
first enabling system timer and then

471
00:16:06,000 --> 00:16:07,920
forcing a jump to the reset handler of

472
00:16:07,920 --> 00:16:09,600
the first world run

473
00:16:09,600 --> 00:16:11,120
a non-secure function call will be

474
00:16:11,120 --> 00:16:13,360
issued which will result in a transition

475
00:16:13,360 --> 00:16:15,199
between the secure to the now secure

476
00:16:15,199 --> 00:16:16,480
states

477
00:16:16,480 --> 00:16:18,480
in the end of the boot stage this is the

478
00:16:18,480 --> 00:16:19,759
state of our use case

479
00:16:19,759 --> 00:16:21,600
world one is running the non-secure

480
00:16:21,600 --> 00:16:23,279
state and while

481
00:16:23,279 --> 00:16:24,959
world 2 is waiting for the next

482
00:16:24,959 --> 00:16:28,079
scheduling time slot

483
00:16:28,800 --> 00:16:30,639
as shown before the security state is

484
00:16:30,639 --> 00:16:31,920
memory map based

485
00:16:31,920 --> 00:16:34,639
layout of musca b1 idio divides each

486
00:16:34,639 --> 00:16:36,000
memory region in secure

487
00:16:36,000 --> 00:16:38,880
and non-secure areas after the microtime

488
00:16:38,880 --> 00:16:41,199
boot stage the configuration of the i7

489
00:16:41,199 --> 00:16:43,600
will overlap these default settings

490
00:16:43,600 --> 00:16:46,639
with the final minor layout

491
00:16:46,639 --> 00:16:48,240
each world code section is placed on

492
00:16:48,240 --> 00:16:50,399
flash where world one is marked as

493
00:16:50,399 --> 00:16:52,079
non-secure

494
00:16:52,079 --> 00:16:54,000
data section is placed on the sram

495
00:16:54,000 --> 00:16:56,320
memory and one bank which is tightly

496
00:16:56,320 --> 00:16:58,480
coupled to the cpu is reserved for micro

497
00:16:58,480 --> 00:17:00,160
tanker code and data

498
00:17:00,160 --> 00:17:02,240
this ensures that almost all kind of

499
00:17:02,240 --> 00:17:05,039
instructions takes one plug cycle to run

500
00:17:05,039 --> 00:17:07,119
with no additional overhead due to bus

501
00:17:07,119 --> 00:17:08,799
or memory stops

502
00:17:08,799 --> 00:17:10,480
peripherals assigned for each world are

503
00:17:10,480 --> 00:17:12,240
marketed with their respective security

504
00:17:12,240 --> 00:17:14,559
sets

505
00:17:14,640 --> 00:17:16,880
to sum up during boot time micro tank

506
00:17:16,880 --> 00:17:18,559
will set up the memory space through the

507
00:17:18,559 --> 00:17:20,720
configuration of the iciu

508
00:17:20,720 --> 00:17:22,640
the non-secure execution context for the

509
00:17:22,640 --> 00:17:24,480
first world to run is prepared

510
00:17:24,480 --> 00:17:26,640
and the remaining worlds are suspending

511
00:17:26,640 --> 00:17:28,640
the secure side until the next contact

512
00:17:28,640 --> 00:17:29,919
switching

513
00:17:29,919 --> 00:17:32,000
to ensure that insulation boundaries are

514
00:17:32,000 --> 00:17:33,520
expanded to the other

515
00:17:33,520 --> 00:17:36,080
slc resources bus filters are also

516
00:17:36,080 --> 00:17:36,799
configured

517
00:17:36,799 --> 00:17:38,720
to match the world's memory and device

518
00:17:38,720 --> 00:17:40,080
settings

519
00:17:40,080 --> 00:17:41,840
we assume that other boss masters

520
00:17:41,840 --> 00:17:44,320
besides the cpu such as a dma controller

521
00:17:44,320 --> 00:17:46,320
are confined to the secure side

522
00:17:46,320 --> 00:17:48,320
this prevents the configuration of each

523
00:17:48,320 --> 00:17:50,160
bus filter during the contact switch

524
00:17:50,160 --> 00:17:52,080
avoiding additional performance and

525
00:17:52,080 --> 00:17:54,559
pamphlets

526
00:17:54,720 --> 00:17:56,320
at this point you can only imagine that

527
00:17:56,320 --> 00:17:58,480
most of the work performed by micro tank

528
00:17:58,480 --> 00:17:59,039
during

529
00:17:59,039 --> 00:18:02,000
time is the scheduling of works so what

530
00:18:02,000 --> 00:18:03,840
does really happen during a scheduling

531
00:18:03,840 --> 00:18:06,159
point

532
00:18:06,480 --> 00:18:08,400
the schedule algorithm was designed to

533
00:18:08,400 --> 00:18:10,480
be as simple and fast as possible there

534
00:18:10,480 --> 00:18:11,600
are four main steps

535
00:18:11,600 --> 00:18:14,160
before a new world to be scheduled first

536
00:18:14,160 --> 00:18:16,160
the cpu context of the suspended world

537
00:18:16,160 --> 00:18:17,039
must be saved

538
00:18:17,039 --> 00:18:18,880
we do this by setting the state of the

539
00:18:18,880 --> 00:18:21,679
cpu and system registers as well

540
00:18:21,679 --> 00:18:24,080
as interrupts into the world's control

541
00:18:24,080 --> 00:18:26,080
block data structure

542
00:18:26,080 --> 00:18:27,919
next a new world is scheduled in the

543
00:18:27,919 --> 00:18:29,360
round-robin fashion

544
00:18:29,360 --> 00:18:31,760
and before resuming the new world to run

545
00:18:31,760 --> 00:18:33,120
the slo must be

546
00:18:33,120 --> 00:18:36,959
set with the world's memory regions

547
00:18:37,840 --> 00:18:39,679
bringing back our use case after the

548
00:18:39,679 --> 00:18:41,440
scheduler performed its job

549
00:18:41,440 --> 00:18:43,360
the world 2 is will be running the

550
00:18:43,360 --> 00:18:45,039
non-secure state and world one will

551
00:18:45,039 --> 00:18:48,320
suspend and see your site

552
00:18:48,880 --> 00:18:50,640
now that you have a good understanding

553
00:18:50,640 --> 00:18:52,640
about the scheduling algorithm of micro

554
00:18:52,640 --> 00:18:54,880
tango one question can be raised

555
00:18:54,880 --> 00:18:56,480
what happens if an interrupt of a

556
00:18:56,480 --> 00:18:59,760
suspended world takes place

557
00:19:00,559 --> 00:19:02,160
during the contact switch we must

558
00:19:02,160 --> 00:19:03,679
disable and retarget

559
00:19:03,679 --> 00:19:05,520
interrupts from a world that is being

560
00:19:05,520 --> 00:19:06,720
suspended

561
00:19:06,720 --> 00:19:09,039
at least for now when an interrupt of a

562
00:19:09,039 --> 00:19:10,559
suspended world takes place

563
00:19:10,559 --> 00:19:12,640
it will will only be served when the

564
00:19:12,640 --> 00:19:14,640
world is resumed on the next scheduling

565
00:19:14,640 --> 00:19:15,360
point

566
00:19:15,360 --> 00:19:17,760
sure this is not desirable but it was

567
00:19:17,760 --> 00:19:19,600
workable at least for this embryonic

568
00:19:19,600 --> 00:19:21,440
stage of muka tango

569
00:19:21,440 --> 00:19:23,919
to clarify let's see an example imagine

570
00:19:23,919 --> 00:19:25,760
the following situation because is

571
00:19:25,760 --> 00:19:27,360
configured with two worlds

572
00:19:27,360 --> 00:19:29,760
one rtos with a timer interrupt and

573
00:19:29,760 --> 00:19:31,679
another wall with a communication stack

574
00:19:31,679 --> 00:19:34,640
and an ispi interrupt assigned

575
00:19:34,640 --> 00:19:36,880
as you can see in the chart the spin and

576
00:19:36,880 --> 00:19:39,200
timer interrupt were treated while

577
00:19:39,200 --> 00:19:41,280
their respective war was suspended in

578
00:19:41,280 --> 00:19:43,200
that situation the introverts will only

579
00:19:43,200 --> 00:19:44,960
be entering that handle

580
00:19:44,960 --> 00:19:49,039
as soon as their world is put in context

581
00:19:49,039 --> 00:19:50,720
nevertheless we are currently working

582
00:19:50,720 --> 00:19:52,799
the new and improved interrupt angling

583
00:19:52,799 --> 00:19:53,679
mechanism

584
00:19:53,679 --> 00:19:55,600
that enables a preemption behavior on

585
00:19:55,600 --> 00:19:56,720
microtitangle

586
00:19:56,720 --> 00:19:58,320
this preemption behavior will be

587
00:19:58,320 --> 00:20:00,320
priority driven which allows the higher

588
00:20:00,320 --> 00:20:02,400
criticality world to prevent a lower

589
00:20:02,400 --> 00:20:04,159
criticality world

590
00:20:04,159 --> 00:20:06,240
let's recall the same example but now

591
00:20:06,240 --> 00:20:08,400
world one has a higher priority level

592
00:20:08,400 --> 00:20:09,760
than model 2.

593
00:20:09,760 --> 00:20:12,320
in this situation if the if the spi

594
00:20:12,320 --> 00:20:13,600
interrupt is triggered

595
00:20:13,600 --> 00:20:15,679
while vermont is executing the internet

596
00:20:15,679 --> 00:20:16,640
will only serve

597
00:20:16,640 --> 00:20:19,679
when rule 2 is scheduled if the opposite

598
00:20:19,679 --> 00:20:21,039
happens the second word will be

599
00:20:21,039 --> 00:20:22,000
preempted

600
00:20:22,000 --> 00:20:25,039
by the timer interrupt the schedule will

601
00:20:25,039 --> 00:20:26,720
put word one in context

602
00:20:26,720 --> 00:20:29,760
to respond to the interrupt request the

603
00:20:29,760 --> 00:20:31,039
second rule will be resumed

604
00:20:31,039 --> 00:20:35,360
as soon as the timer handle finishes

605
00:20:35,360 --> 00:20:36,640
after diving into micro tank

606
00:20:36,640 --> 00:20:38,320
architecture i will now present the

607
00:20:38,320 --> 00:20:40,320
evaluation results which you consider to

608
00:20:40,320 --> 00:20:42,799
be really optimistic

609
00:20:42,799 --> 00:20:44,720
our experimental setup was the following

610
00:20:44,720 --> 00:20:47,440
we are using an arnold musk v1 platform

611
00:20:47,440 --> 00:20:49,919
which implements the sse 200 subsystem

612
00:20:49,919 --> 00:20:52,159
that feature a multicultural system

613
00:20:52,159 --> 00:20:55,360
with two cortex m33 processors

614
00:20:55,360 --> 00:20:57,520
we use data watchpoint templation from

615
00:20:57,520 --> 00:20:59,039
the debug component

616
00:20:59,039 --> 00:21:00,799
to measure the performance of red on the

617
00:21:00,799 --> 00:21:03,360
go tiger and by using a third-party tool

618
00:21:03,360 --> 00:21:04,640
we assessed the tcp

619
00:21:04,640 --> 00:21:06,960
size

620
00:21:07,679 --> 00:21:09,919
for the performance evaluation tests we

621
00:21:09,919 --> 00:21:11,120
have used three

622
00:21:11,120 --> 00:21:13,280
different configurations for microtaco

623
00:21:13,280 --> 00:21:15,679
one with two worlds a sample with three

624
00:21:15,679 --> 00:21:18,400
and last one with four more sets our

625
00:21:18,400 --> 00:21:20,080
goal was to show that the number of

626
00:21:20,080 --> 00:21:22,320
rules to be scheduled does not impact in

627
00:21:22,320 --> 00:21:23,039
any way

628
00:21:23,039 --> 00:21:24,880
the performance of red of the micro

629
00:21:24,880 --> 00:21:27,600
tango kernel

630
00:21:27,760 --> 00:21:29,919
during the development of micro tango we

631
00:21:29,919 --> 00:21:31,840
tried to keep the tcp as small as

632
00:21:31,840 --> 00:21:34,000
possible as well as the numbers of lines

633
00:21:34,000 --> 00:21:34,640
of code

634
00:21:34,640 --> 00:21:37,039
since code complexity is typically a

635
00:21:37,039 --> 00:21:39,280
normal a natural enemy of security

636
00:21:39,280 --> 00:21:40,880
systems

637
00:21:40,880 --> 00:21:42,559
in that sense nicotine relies on the

638
00:21:42,559 --> 00:21:44,640
principle of minimal implementation

639
00:21:44,640 --> 00:21:46,400
striving to reduce the amount of code

640
00:21:46,400 --> 00:21:48,559
that it executes at the highest previous

641
00:21:48,559 --> 00:21:49,280
level

642
00:21:49,280 --> 00:21:51,440
which is reflected in a tcp size of

643
00:21:51,440 --> 00:21:53,919
around 6 kilobytes with less than 900

644
00:21:53,919 --> 00:21:56,640
blends of code

645
00:21:56,720 --> 00:21:58,480
we also measure the performance of red

646
00:21:58,480 --> 00:22:00,559
associated with the micro tank kernel

647
00:22:00,559 --> 00:22:02,400
we consider the performance of red as

648
00:22:02,400 --> 00:22:04,159
the amount of time that the candle

649
00:22:04,159 --> 00:22:06,799
spends while switching between worlds

650
00:22:06,799 --> 00:22:08,559
these are the valves that we obtain

651
00:22:08,559 --> 00:22:10,320
as you can see the system does not

652
00:22:10,320 --> 00:22:12,640
suffer any performance penalties

653
00:22:12,640 --> 00:22:15,440
for the different system configurations

654
00:22:15,440 --> 00:22:16,240
in fact

655
00:22:16,240 --> 00:22:19,679
the contact switch time is precisely 110

656
00:22:19,679 --> 00:22:22,080
clock cycles for each of the scenarios

657
00:22:22,080 --> 00:22:24,480
to achieve such low overhead the

658
00:22:24,480 --> 00:22:26,240
scheduling algorithm was completely

659
00:22:26,240 --> 00:22:27,520
written in assembly

660
00:22:27,520 --> 00:22:30,000
and the candle is running from a tcm

661
00:22:30,000 --> 00:22:32,480
memory

662
00:22:32,880 --> 00:22:35,520
to sum up with musca v1 platform running

663
00:22:35,520 --> 00:22:36,799
a

664
00:22:36,799 --> 00:22:40,159
cpu frequency of 160 megahertz

665
00:22:40,159 --> 00:22:41,679
the micro tangle is a performance

666
00:22:41,679 --> 00:22:43,440
degradation almost residual

667
00:22:43,440 --> 00:22:45,440
besides these results are completely

668
00:22:45,440 --> 00:22:49,120
independent of the system settings

669
00:22:49,760 --> 00:22:51,840
we'll now present a small video showing

670
00:22:51,840 --> 00:22:55,200
a demo from bigger time

671
00:22:55,200 --> 00:22:57,360
the vehicle that we are about to see

672
00:22:57,360 --> 00:22:58,880
features micro tank with the following

673
00:22:58,880 --> 00:23:00,799
multi-world iot stack

674
00:23:00,799 --> 00:23:02,320
first world features a bare metal

675
00:23:02,320 --> 00:23:04,320
application blinking an led

676
00:23:04,320 --> 00:23:06,960
every one second the second world

677
00:23:06,960 --> 00:23:09,200
encapsulates the zephyr rtos which is

678
00:23:09,200 --> 00:23:10,640
controlling a several motor and

679
00:23:10,640 --> 00:23:12,240
communicating its rotation behavior

680
00:23:12,240 --> 00:23:13,919
through the serial territory

681
00:23:13,919 --> 00:23:16,000
the third world is a simple command line

682
00:23:16,000 --> 00:23:17,360
and finally world 4

683
00:23:17,360 --> 00:23:20,840
provides to the system a tcp ip

684
00:23:20,840 --> 00:23:23,840
connection

685
00:23:24,080 --> 00:23:25,440
this is the mikko tank configuration

686
00:23:25,440 --> 00:23:27,600
file which details each wheel or

687
00:23:27,600 --> 00:23:28,799
settings

688
00:23:28,799 --> 00:23:31,120
memory regions that obtain on device

689
00:23:31,120 --> 00:23:37,840
first we have the worldwide structure

690
00:23:39,120 --> 00:23:42,639
this is world 2 structure

691
00:23:46,880 --> 00:23:50,559
war 3 and finally we'll will have our l4

692
00:23:50,559 --> 00:23:53,120
structure

693
00:23:59,600 --> 00:24:03,360
now we will be building nikkor tumble

694
00:24:03,360 --> 00:24:08,080
and loading into our musk b1 platform

695
00:24:14,480 --> 00:24:16,320
now the full system is working this is

696
00:24:16,320 --> 00:24:20,159
world london led every one second

697
00:24:20,159 --> 00:24:22,960
zephyr controlling the servo motor and

698
00:24:22,960 --> 00:24:23,840
communicating

699
00:24:23,840 --> 00:24:25,840
its rotation behavior through the serial

700
00:24:25,840 --> 00:24:28,399
terminal

701
00:24:31,200 --> 00:24:34,960
worldwide which provides a common line

702
00:24:37,679 --> 00:24:40,000
and workflow that provides a tcpi

703
00:24:40,000 --> 00:24:43,679
connection for to the system

704
00:24:44,559 --> 00:24:47,840
and the full season looks like this

705
00:24:50,240 --> 00:24:52,799
world one

706
00:24:58,840 --> 00:25:00,799
two

707
00:25:00,799 --> 00:25:03,120
three

708
00:25:10,640 --> 00:25:15,840
and finally words four

709
00:25:16,640 --> 00:25:20,320
wrapping up our takeaway points are

710
00:25:20,320 --> 00:25:22,400
we hope that you have been clear on why

711
00:25:22,400 --> 00:25:24,000
we believe that traditional

712
00:25:24,000 --> 00:25:25,919
trust zone dual role model is falling

713
00:25:25,919 --> 00:25:27,279
short to address the increasing

714
00:25:27,279 --> 00:25:28,000
complexity

715
00:25:28,000 --> 00:25:30,799
and requirements of modern device micro

716
00:25:30,799 --> 00:25:31,520
tangle

717
00:25:31,520 --> 00:25:33,440
solely relies on the looks of the

718
00:25:33,440 --> 00:25:35,039
elephant in the room tresson

719
00:25:35,039 --> 00:25:37,279
and we have demonstrated a solution that

720
00:25:37,279 --> 00:25:39,440
is able to extend the dual role model

721
00:25:39,440 --> 00:25:42,799
into a multi-world approach and third

722
00:25:42,799 --> 00:25:44,880
we've always rotated the real world

723
00:25:44,880 --> 00:25:46,320
platform and targeting

724
00:25:46,320 --> 00:25:49,919
a real use case scenario with achieving

725
00:25:49,919 --> 00:25:52,559
real promising results i'm sure that we

726
00:25:52,559 --> 00:25:54,320
are all convinced that secure doesn't

727
00:25:54,320 --> 00:25:56,000
always need to be to come

728
00:25:56,000 --> 00:25:59,679
at a significant cost in his talk we

729
00:25:59,679 --> 00:26:00,000
have

730
00:26:00,000 --> 00:26:02,320
presented the first multi-world te for

731
00:26:02,320 --> 00:26:04,320
more interest on end devices

732
00:26:04,320 --> 00:26:06,720
which are expected to be deployed on

733
00:26:06,720 --> 00:26:08,840
billions of tomorrow's armed

734
00:26:08,840 --> 00:26:11,440
microcontrollers

735
00:26:11,440 --> 00:26:13,679
our ongoing work consists on wrapping up

736
00:26:13,679 --> 00:26:15,520
the first released version of migrate

737
00:26:15,520 --> 00:26:17,360
angle as soon as we finish the new

738
00:26:17,360 --> 00:26:19,440
interrupt angling mechanism

739
00:26:19,440 --> 00:26:21,360
if you are interested follow this github

740
00:26:21,360 --> 00:26:22,480
link

741
00:26:22,480 --> 00:26:25,120
we are also working on parting return to

742
00:26:25,120 --> 00:26:26,799
other commercial platforms

743
00:26:26,799 --> 00:26:28,799
and finally the next major steps will

744
00:26:28,799 --> 00:26:30,400
focus on multi-core support

745
00:26:30,400 --> 00:26:32,080
and a scalability analysis to improve

746
00:26:32,080 --> 00:26:34,159
predictability and extend the target to

747
00:26:34,159 --> 00:26:37,520
mixed criticality systems

748
00:26:37,600 --> 00:26:39,360
thank you all and i hope you enjoyed

749
00:26:39,360 --> 00:26:42,879
this talk

