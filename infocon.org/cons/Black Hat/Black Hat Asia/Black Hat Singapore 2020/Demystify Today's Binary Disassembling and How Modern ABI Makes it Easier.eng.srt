1
00:00:02,399 --> 00:00:03,840
hello everyone

2
00:00:03,840 --> 00:00:06,480
thanks for listening to our talk in this

3
00:00:06,480 --> 00:00:07,120
talk

4
00:00:07,120 --> 00:00:09,360
we're going to talk about our story of

5
00:00:09,360 --> 00:00:11,120
binary disassembly

6
00:00:11,120 --> 00:00:14,000
but before i start our story please

7
00:00:14,000 --> 00:00:14,719
allow me

8
00:00:14,719 --> 00:00:17,840
to introduce our team

9
00:00:17,840 --> 00:00:20,640
we are a team from stevens institute of

10
00:00:20,640 --> 00:00:22,880
technology the department of computer

11
00:00:22,880 --> 00:00:23,840
science

12
00:00:23,840 --> 00:00:27,279
our team includes chen bing eric

13
00:00:27,279 --> 00:00:30,960
and myself chan is a visiting scholar at

14
00:00:30,960 --> 00:00:31,760
stevens

15
00:00:31,760 --> 00:00:34,960
and he's also a phd student at nanjing

16
00:00:34,960 --> 00:00:36,320
university

17
00:00:36,320 --> 00:00:39,600
both eric and i are faculty members

18
00:00:39,600 --> 00:00:42,960
as students now it's the time

19
00:00:42,960 --> 00:00:47,120
for our story our story begins with the

20
00:00:47,120 --> 00:00:48,800
research project

21
00:00:48,800 --> 00:00:52,000
in that project we are expected to run

22
00:00:52,000 --> 00:00:54,480
formal verification over a group of

23
00:00:54,480 --> 00:00:55,840
lexicon

24
00:00:55,840 --> 00:00:58,160
the lag scale mainly follows the formats

25
00:00:58,160 --> 00:00:59,359
of x86

26
00:00:59,359 --> 00:01:03,520
and x64 batteries our ultimate skill is

27
00:01:03,520 --> 00:01:05,119
to formally verify

28
00:01:05,119 --> 00:01:07,760
many temporal properties of the lex code

29
00:01:07,760 --> 00:01:08,960
for instance

30
00:01:08,960 --> 00:01:12,240
whether the code terminates but you know

31
00:01:12,240 --> 00:01:15,040
binary code it's not a good format for

32
00:01:15,040 --> 00:01:15,920
verification

33
00:01:15,920 --> 00:01:17,920
because it involves too many low level

34
00:01:17,920 --> 00:01:18,960
things

35
00:01:18,960 --> 00:01:21,920
so the first thing we need to do is to

36
00:01:21,920 --> 00:01:23,600
produce some higher level

37
00:01:23,600 --> 00:01:24,799
representations

38
00:01:24,799 --> 00:01:27,840
of the binary code

39
00:01:28,000 --> 00:01:31,439
it is not hard to imagine that to get a

40
00:01:31,439 --> 00:01:33,280
higher level representation

41
00:01:33,280 --> 00:01:36,400
for a binary code the first thing we

42
00:01:36,400 --> 00:01:37,520
have to do

43
00:01:37,520 --> 00:01:40,320
is to disassemble the binary code

44
00:01:40,320 --> 00:01:41,680
specifically

45
00:01:41,680 --> 00:01:44,479
our formal verification require us to

46
00:01:44,479 --> 00:01:46,079
get the instructions

47
00:01:46,079 --> 00:01:48,479
the functions the pointers and its

48
00:01:48,479 --> 00:01:50,079
control flows

49
00:01:50,079 --> 00:01:52,880
the good news is we know that binary

50
00:01:52,880 --> 00:01:55,360
disassembly is a popular problem in

51
00:01:55,360 --> 00:01:58,079
community for over 20 years

52
00:01:58,079 --> 00:02:00,479
and on the market there are dozens of

53
00:02:00,479 --> 00:02:01,920
disassembly tools

54
00:02:01,920 --> 00:02:04,960
available to the public so

55
00:02:04,960 --> 00:02:08,160
to move quicker to our research goals

56
00:02:08,160 --> 00:02:10,318
we planned to use the existing

57
00:02:10,318 --> 00:02:12,239
disassembling tool

58
00:02:12,239 --> 00:02:15,760
at that moment the key question

59
00:02:15,760 --> 00:02:20,640
to us is which tool we should use

60
00:02:21,200 --> 00:02:24,160
to answer the question of tool selection

61
00:02:24,160 --> 00:02:26,560
we started looking at the performance

62
00:02:26,560 --> 00:02:29,360
of the tools on the market by referring

63
00:02:29,360 --> 00:02:32,879
to existing evaluation based studies

64
00:02:32,879 --> 00:02:36,560
it turns out that many tools can already

65
00:02:36,560 --> 00:02:37,200
achieve

66
00:02:37,200 --> 00:02:40,959
both high coverage and high accuracy

67
00:02:40,959 --> 00:02:44,080
for instance tools like ida pro and

68
00:02:44,080 --> 00:02:44,959
anger

69
00:02:44,959 --> 00:02:48,400
can correctly recover over 95 percent of

70
00:02:48,400 --> 00:02:50,319
the instructions

71
00:02:50,319 --> 00:02:53,440
we were happy about such findings

72
00:02:53,440 --> 00:02:56,000
and then we started running several

73
00:02:56,000 --> 00:02:57,599
existing disassemblers

74
00:02:57,599 --> 00:03:00,239
to support our back-end verification

75
00:03:00,239 --> 00:03:02,239
tools

76
00:03:02,239 --> 00:03:05,440
however we could not achieve successful

77
00:03:05,440 --> 00:03:06,560
verification

78
00:03:06,560 --> 00:03:09,760
with the help of existing disassemblers

79
00:03:09,760 --> 00:03:12,480
the reason is that although the

80
00:03:12,480 --> 00:03:15,040
disassemblers provide statistically high

81
00:03:15,040 --> 00:03:16,319
accuracy

82
00:03:16,319 --> 00:03:18,720
they still introduce arrows to different

83
00:03:18,720 --> 00:03:20,080
types of results

84
00:03:20,080 --> 00:03:22,800
regardless of the disassemblers we used

85
00:03:22,800 --> 00:03:23,120
and

86
00:03:23,120 --> 00:03:25,760
the programs were tested more

87
00:03:25,760 --> 00:03:26,959
importantly

88
00:03:26,959 --> 00:03:30,000
the arrows frequently get propagated

89
00:03:30,000 --> 00:03:33,040
to the verification phase and hurt the

90
00:03:33,040 --> 00:03:35,679
results

91
00:03:36,239 --> 00:03:38,560
seeing the problems of using existing

92
00:03:38,560 --> 00:03:40,080
disassemblers

93
00:03:40,080 --> 00:03:43,280
our first reaction is to understand why

94
00:03:43,280 --> 00:03:46,480
those disassemblers produce arrows

95
00:03:46,480 --> 00:03:49,040
based on such understanding we may be

96
00:03:49,040 --> 00:03:51,280
able to fix the arrows

97
00:03:51,280 --> 00:03:52,959
but how can we achieve such an

98
00:03:52,959 --> 00:03:54,400
understanding

99
00:03:54,400 --> 00:03:57,439
well our idea is straightforward

100
00:03:57,439 --> 00:03:59,360
let's try to understand the internal

101
00:03:59,360 --> 00:04:01,120
strategies used by those

102
00:04:01,120 --> 00:04:03,680
disassemblers and figure out which

103
00:04:03,680 --> 00:04:04,640
strategies

104
00:04:04,640 --> 00:04:08,080
make which arrows we started looking at

105
00:04:08,080 --> 00:04:09,519
the available sources of

106
00:04:09,519 --> 00:04:11,599
related information such as

107
00:04:11,599 --> 00:04:13,200
documentation

108
00:04:13,200 --> 00:04:16,320
papers blogs and forums

109
00:04:16,320 --> 00:04:18,320
discussing the strategies of the

110
00:04:18,320 --> 00:04:20,639
disassemblers we used

111
00:04:20,639 --> 00:04:23,919
however we quickly found that those

112
00:04:23,919 --> 00:04:25,440
sources of information

113
00:04:25,440 --> 00:04:27,680
cannot reliably help us build the

114
00:04:27,680 --> 00:04:28,800
understanding

115
00:04:28,800 --> 00:04:31,840
because the sources can be missing

116
00:04:31,840 --> 00:04:35,680
incomplete or inaccurate moreover

117
00:04:35,680 --> 00:04:38,560
those sources can be outdated since they

118
00:04:38,560 --> 00:04:40,080
are not updated

119
00:04:40,080 --> 00:04:43,280
with the code is evolved

120
00:04:43,280 --> 00:04:46,160
so in short we need a better way to

121
00:04:46,160 --> 00:04:49,919
understand the existing disassemblers

122
00:04:49,919 --> 00:04:52,560
so what else can we do to avoid the

123
00:04:52,560 --> 00:04:54,560
problems of information sources

124
00:04:54,560 --> 00:04:58,320
like documentations our answer is

125
00:04:58,320 --> 00:05:00,639
let's look at the disassembler's source

126
00:05:00,639 --> 00:05:02,720
code which should represent

127
00:05:02,720 --> 00:05:05,840
the exact up-to-date semantics of the

128
00:05:05,840 --> 00:05:06,720
strategies

129
00:05:06,720 --> 00:05:10,479
being used following this idea we picked

130
00:05:10,479 --> 00:05:11,120
a group of

131
00:05:11,120 --> 00:05:14,639
nine open source popular disassemblers

132
00:05:14,639 --> 00:05:17,520
such as guidera and anger we read

133
00:05:17,520 --> 00:05:18,880
through the soft scale

134
00:05:18,880 --> 00:05:21,120
to summarize the strategies of

135
00:05:21,120 --> 00:05:22,160
recovering

136
00:05:22,160 --> 00:05:25,600
instructions functions pointers

137
00:05:25,600 --> 00:05:28,960
and control flows to avoid arrows

138
00:05:28,960 --> 00:05:31,280
during the understanding we have at

139
00:05:31,280 --> 00:05:32,800
least two people

140
00:05:32,800 --> 00:05:36,720
looking at the same piece of code

141
00:05:36,720 --> 00:05:39,360
after spending months on reading and

142
00:05:39,360 --> 00:05:41,360
understanding the source code

143
00:05:41,360 --> 00:05:44,639
at the end of 2019 we were finally able

144
00:05:44,639 --> 00:05:45,199
to see

145
00:05:45,199 --> 00:05:47,199
all the strategies with first-hand

146
00:05:47,199 --> 00:05:48,560
details

147
00:05:48,560 --> 00:05:52,080
in total we discovered 44 strategies

148
00:05:52,080 --> 00:05:54,479
from the nine disassemblers the

149
00:05:54,479 --> 00:05:56,639
strategies can be roughly classified

150
00:05:56,639 --> 00:05:58,639
into two groups

151
00:05:58,639 --> 00:06:00,880
fifteen of the strategies are principled

152
00:06:00,880 --> 00:06:02,160
algorithms

153
00:06:02,160 --> 00:06:05,199
which ensure the correctness of results

154
00:06:05,199 --> 00:06:07,840
the remaining 29 of strategies are

155
00:06:07,840 --> 00:06:08,960
heuristics

156
00:06:08,960 --> 00:06:11,039
which rely on common pythons or

157
00:06:11,039 --> 00:06:13,919
inferences to do disassembly

158
00:06:13,919 --> 00:06:16,240
we have demystified all the 44

159
00:06:16,240 --> 00:06:17,199
strategies

160
00:06:17,199 --> 00:06:20,160
on an archive paper if you want to see

161
00:06:20,160 --> 00:06:21,199
more details

162
00:06:21,199 --> 00:06:25,120
please refer to our paper as i said

163
00:06:25,120 --> 00:06:28,319
29 of the strategies are heuristics

164
00:06:28,319 --> 00:06:30,880
such heuristics provide no guarantees of

165
00:06:30,880 --> 00:06:32,080
the correctness

166
00:06:32,080 --> 00:06:35,280
and not surprisingly the use of those

167
00:06:35,280 --> 00:06:36,160
strategies

168
00:06:36,160 --> 00:06:40,000
are the root causes of arrows

169
00:06:40,000 --> 00:06:42,800
here we listed several examples of the

170
00:06:42,800 --> 00:06:44,720
error-prone heuristics

171
00:06:44,720 --> 00:06:47,680
for instance tools like anger with

172
00:06:47,680 --> 00:06:48,560
nearness gun

173
00:06:48,560 --> 00:06:50,639
code gaps left over by recursive

174
00:06:50,639 --> 00:06:52,000
disassembly

175
00:06:52,000 --> 00:06:54,319
it can easily introduce errors when

176
00:06:54,319 --> 00:06:56,479
encountering dating code

177
00:06:56,479 --> 00:06:59,520
for another example tools like utero

178
00:06:59,520 --> 00:07:01,840
would consider integers that spawns to

179
00:07:01,840 --> 00:07:03,280
legitimate locations

180
00:07:03,280 --> 00:07:06,319
at pointers which by intuition

181
00:07:06,319 --> 00:07:09,840
can make a lot of mistakes yes

182
00:07:09,840 --> 00:07:12,720
now we know what are the strategies that

183
00:07:12,720 --> 00:07:13,520
will introduce

184
00:07:13,520 --> 00:07:16,319
errors but we still don't know which

185
00:07:16,319 --> 00:07:17,280
strategies

186
00:07:17,280 --> 00:07:21,440
make which arrows to figure out which

187
00:07:21,440 --> 00:07:22,319
strategies

188
00:07:22,319 --> 00:07:25,199
make which arrows we decided to run an

189
00:07:25,199 --> 00:07:26,479
evaluation

190
00:07:26,479 --> 00:07:29,440
we hoped to follow the setup of previous

191
00:07:29,440 --> 00:07:30,000
evaluation

192
00:07:30,000 --> 00:07:32,800
based authorities in particular we

193
00:07:32,800 --> 00:07:34,960
wanted to reuse the benchmark

194
00:07:34,960 --> 00:07:37,360
and their approach of producing ground

195
00:07:37,360 --> 00:07:38,639
shoes

196
00:07:38,639 --> 00:07:41,680
however we eventually decided not to do

197
00:07:41,680 --> 00:07:42,479
so

198
00:07:42,479 --> 00:07:44,879
first the benchmark used by their

199
00:07:44,879 --> 00:07:46,160
previous studies

200
00:07:46,160 --> 00:07:48,560
mostly consists of small sites and

201
00:07:48,560 --> 00:07:50,879
functionally similar binaries

202
00:07:50,879 --> 00:07:53,520
such binaries cannot really represent

203
00:07:53,520 --> 00:07:54,720
the complexities

204
00:07:54,720 --> 00:07:57,520
and diversities of the real world to

205
00:07:57,520 --> 00:07:58,000
deal with

206
00:07:58,000 --> 00:08:00,560
this problem we built a new benchmark

207
00:08:00,560 --> 00:08:01,840
from scratch

208
00:08:01,840 --> 00:08:03,520
we collected a group of different

209
00:08:03,520 --> 00:08:05,919
insights and functionally diversified

210
00:08:05,919 --> 00:08:08,639
real-world programs and we compiled

211
00:08:08,639 --> 00:08:11,120
those programs with different compilers

212
00:08:11,120 --> 00:08:14,240
under different optimization levels at

213
00:08:14,240 --> 00:08:15,199
the end

214
00:08:15,199 --> 00:08:18,479
we produced about 4 000 binaries

215
00:08:18,479 --> 00:08:21,599
to the best of our knowledge until now

216
00:08:21,599 --> 00:08:24,639
our benchmark is the most comprehensive

217
00:08:24,639 --> 00:08:26,000
benchmark for the evaluation

218
00:08:26,000 --> 00:08:29,039
of binary disassembly second

219
00:08:29,039 --> 00:08:31,440
existing approaches of getting run to

220
00:08:31,440 --> 00:08:33,200
use of binary disassembly

221
00:08:33,200 --> 00:08:35,279
most rely on simple information or

222
00:08:35,279 --> 00:08:36,880
debugging information

223
00:08:36,880 --> 00:08:39,679
we found that such approaches can be

224
00:08:39,679 --> 00:08:41,200
easily inaccurate

225
00:08:41,200 --> 00:08:44,560
or incomplete to deal with this problem

226
00:08:44,560 --> 00:08:47,519
we decided to instrument the compilers

227
00:08:47,519 --> 00:08:49,680
by tracing the compiling process

228
00:08:49,680 --> 00:08:52,399
step by step we are able to get the

229
00:08:52,399 --> 00:08:53,120
accurate

230
00:08:53,120 --> 00:08:54,959
and complete information of different

231
00:08:54,959 --> 00:08:57,200
types of gratitude

232
00:08:57,200 --> 00:08:59,920
finally also different from existing

233
00:08:59,920 --> 00:09:00,800
evaluation

234
00:09:00,800 --> 00:09:03,680
that measures a disassembler as a whole

235
00:09:03,680 --> 00:09:06,000
we take a more solar approach

236
00:09:06,000 --> 00:09:08,880
we separately tested each strategy

237
00:09:08,880 --> 00:09:10,160
specifically

238
00:09:10,160 --> 00:09:12,880
for each strategy we wanted to measure

239
00:09:12,880 --> 00:09:15,120
how much contribution it brings

240
00:09:15,120 --> 00:09:18,160
what level of accuracy is can achieve

241
00:09:18,160 --> 00:09:20,560
and most importantly we wanted to

242
00:09:20,560 --> 00:09:21,360
understand

243
00:09:21,360 --> 00:09:26,320
what arrows the strategy will introduce

244
00:09:26,320 --> 00:09:29,680
throughout our evaluation we testified

245
00:09:29,680 --> 00:09:32,080
our understandings of the source code

246
00:09:32,080 --> 00:09:34,399
and obtained answers to our remaining

247
00:09:34,399 --> 00:09:35,600
questions

248
00:09:35,600 --> 00:09:38,320
first we verified that characteristics

249
00:09:38,320 --> 00:09:39,920
are indeed heavily used

250
00:09:39,920 --> 00:09:42,160
when the disassemblers handle real-world

251
00:09:42,160 --> 00:09:43,279
binaries

252
00:09:43,279 --> 00:09:45,600
for instance nearly half of the

253
00:09:45,600 --> 00:09:47,360
instructions are recovered with

254
00:09:47,360 --> 00:09:49,760
heuristics and about 20 percent of the

255
00:09:49,760 --> 00:09:52,560
functions are detected by heuristics

256
00:09:52,560 --> 00:09:55,760
second we empirically proved that

257
00:09:55,760 --> 00:09:58,320
the heuristics are not safe all the

258
00:09:58,320 --> 00:10:00,560
characters make mistakes and introduce

259
00:10:00,560 --> 00:10:01,680
errors

260
00:10:01,680 --> 00:10:04,720
most importantly we figured out which

261
00:10:04,720 --> 00:10:05,519
hair sticks

262
00:10:05,519 --> 00:10:08,640
make what arrows again we have

263
00:10:08,640 --> 00:10:09,600
summarized

264
00:10:09,600 --> 00:10:12,000
the in-depth details in our archive

265
00:10:12,000 --> 00:10:13,200
paper

266
00:10:13,200 --> 00:10:16,480
following our findings we then attempted

267
00:10:16,480 --> 00:10:18,880
to fix the arrows by adjusting the

268
00:10:18,880 --> 00:10:19,760
heuristics

269
00:10:19,760 --> 00:10:22,959
to avoid those errors the results were a

270
00:10:22,959 --> 00:10:24,480
surprise

271
00:10:24,480 --> 00:10:27,120
while the adjustment of the heuristics

272
00:10:27,120 --> 00:10:29,200
awarded those arrows

273
00:10:29,200 --> 00:10:32,640
they tremendously reduced the coverage

274
00:10:32,640 --> 00:10:35,200
for instance when we disable the linear

275
00:10:35,200 --> 00:10:36,560
scanning angle

276
00:10:36,560 --> 00:10:38,640
we can avoid the arrows due to dating

277
00:10:38,640 --> 00:10:40,320
code but we also

278
00:10:40,320 --> 00:10:42,800
eliminated the instructions and code

279
00:10:42,800 --> 00:10:45,360
gaps after recursive disassembly

280
00:10:45,360 --> 00:10:48,560
so to sum up the heuristics are actually

281
00:10:48,560 --> 00:10:50,720
trade-offs between accuracy

282
00:10:50,720 --> 00:10:54,000
and coverage we cannot easily fix them

283
00:10:54,000 --> 00:10:57,600
to avoid arrows without losing coverage

284
00:10:57,600 --> 00:11:00,720
in other words reusing the existing

285
00:11:00,720 --> 00:11:01,920
disassemblers

286
00:11:01,920 --> 00:11:04,640
may not be a good idea to support our

287
00:11:04,640 --> 00:11:06,560
research

288
00:11:06,560 --> 00:11:09,360
okay so far we have presented a

289
00:11:09,360 --> 00:11:10,880
successful and standing

290
00:11:10,880 --> 00:11:13,120
and successful evaluation of existing

291
00:11:13,120 --> 00:11:14,640
disassemblers

292
00:11:14,640 --> 00:11:17,040
but you may have noticed our

293
00:11:17,040 --> 00:11:19,360
understanding and our evaluation

294
00:11:19,360 --> 00:11:22,240
actually rejected our idea of reusing

295
00:11:22,240 --> 00:11:24,399
existing disassemblers to support our

296
00:11:24,399 --> 00:11:25,680
research

297
00:11:25,680 --> 00:11:28,000
because those disassemblers cannot avoid

298
00:11:28,000 --> 00:11:29,920
errors

299
00:11:29,920 --> 00:11:32,240
but does that mean we killed the

300
00:11:32,240 --> 00:11:34,480
possibility of our verification during

301
00:11:34,480 --> 00:11:35,839
research

302
00:11:35,839 --> 00:11:39,519
our quick answer is no from our study of

303
00:11:39,519 --> 00:11:41,440
the existing disassemblers

304
00:11:41,440 --> 00:11:44,800
we gain many insights one of the most

305
00:11:44,800 --> 00:11:48,000
important insights is related to system

306
00:11:48,000 --> 00:11:48,399
v

307
00:11:48,399 --> 00:11:51,920
x64 binaries which are also the major

308
00:11:51,920 --> 00:11:55,200
targeted binaries of our research

309
00:11:55,200 --> 00:11:58,720
specifically we found that the system v

310
00:11:58,720 --> 00:12:01,680
x64 api mind dates call frame

311
00:12:01,680 --> 00:12:02,399
information

312
00:12:02,399 --> 00:12:05,040
for each function such call frame

313
00:12:05,040 --> 00:12:05,920
information

314
00:12:05,920 --> 00:12:08,160
is necessary to support runtime

315
00:12:08,160 --> 00:12:11,279
exception handling due to time limit

316
00:12:11,279 --> 00:12:14,079
i will skip the details but i want to

317
00:12:14,079 --> 00:12:14,560
point

318
00:12:14,560 --> 00:12:18,160
out two key things first the call frame

319
00:12:18,160 --> 00:12:19,040
information

320
00:12:19,040 --> 00:12:21,839
explicitly gives the start address of

321
00:12:21,839 --> 00:12:23,760
the corresponding function

322
00:12:23,760 --> 00:12:26,240
second as i mentioned the core framing

323
00:12:26,240 --> 00:12:28,320
information is needed for exception

324
00:12:28,320 --> 00:12:29,040
handling

325
00:12:29,040 --> 00:12:31,920
as such it cannot be disabled or

326
00:12:31,920 --> 00:12:32,880
stripped

327
00:12:32,880 --> 00:12:35,680
this has been verified by our study of a

328
00:12:35,680 --> 00:12:37,040
group of commercial

329
00:12:37,040 --> 00:12:40,320
binary software and now

330
00:12:40,320 --> 00:12:42,959
we know that the call frames give

331
00:12:42,959 --> 00:12:44,880
information about functions

332
00:12:44,880 --> 00:12:47,680
but how can we use that to achieve

333
00:12:47,680 --> 00:12:48,480
correct

334
00:12:48,480 --> 00:12:52,480
binary disassembly in our work

335
00:12:52,480 --> 00:12:55,360
we developed a new approach to exploit

336
00:12:55,360 --> 00:12:56,320
the core frames

337
00:12:56,320 --> 00:13:00,160
to do binary disassembly to be specific

338
00:13:00,160 --> 00:13:02,800
we first extract all the function starts

339
00:13:02,800 --> 00:13:03,440
from the core

340
00:13:03,440 --> 00:13:05,600
frames then following each function

341
00:13:05,600 --> 00:13:08,320
starts we run recursive disassembly

342
00:13:08,320 --> 00:13:10,639
to detect instructions function

343
00:13:10,639 --> 00:13:11,519
boundaries

344
00:13:11,519 --> 00:13:14,240
and control flows to ensure the

345
00:13:14,240 --> 00:13:15,600
correctness

346
00:13:15,600 --> 00:13:18,480
during the recursive disassembly we

347
00:13:18,480 --> 00:13:21,200
avoid using any heuristics

348
00:13:21,200 --> 00:13:23,680
so based on my description with core

349
00:13:23,680 --> 00:13:24,480
frames

350
00:13:24,480 --> 00:13:27,279
disassembling is fairly stressful pretty

351
00:13:27,279 --> 00:13:29,200
much like drinking a smoothie

352
00:13:29,200 --> 00:13:33,600
but it's that true probably not

353
00:13:33,600 --> 00:13:35,760
i mean the reality is always more

354
00:13:35,760 --> 00:13:37,600
complicated

355
00:13:37,600 --> 00:13:40,720
we found that even with core frames

356
00:13:40,720 --> 00:13:42,720
we will still have to overcome many

357
00:13:42,720 --> 00:13:46,079
challenges for the sake of correctness

358
00:13:46,079 --> 00:13:49,199
here i will explain two of the major

359
00:13:49,199 --> 00:13:52,880
problems and explain how we handle them

360
00:13:52,880 --> 00:13:55,120
the first problem is related to

361
00:13:55,120 --> 00:13:57,360
non-continuous functions

362
00:13:57,360 --> 00:13:59,920
to be specific for the goals of

363
00:13:59,920 --> 00:14:01,120
optimization

364
00:14:01,120 --> 00:14:03,680
compilers can often split their function

365
00:14:03,680 --> 00:14:05,839
to non-continuous parts

366
00:14:05,839 --> 00:14:09,440
in a binary file for each part

367
00:14:09,440 --> 00:14:12,399
the compiler will insert a separate code

368
00:14:12,399 --> 00:14:13,279
frame

369
00:14:13,279 --> 00:14:16,560
as search if we simply trust the core

370
00:14:16,560 --> 00:14:17,279
frames

371
00:14:17,279 --> 00:14:19,680
we'll consider different parts from the

372
00:14:19,680 --> 00:14:21,199
same non-continuous function

373
00:14:21,199 --> 00:14:24,000
as different functions apparently this

374
00:14:24,000 --> 00:14:25,839
is a mistake

375
00:14:25,839 --> 00:14:28,720
our solution to handle this problem is

376
00:14:28,720 --> 00:14:30,079
based on the observation

377
00:14:30,079 --> 00:14:33,040
that different parts of a non-continuous

378
00:14:33,040 --> 00:14:33,600
function

379
00:14:33,600 --> 00:14:36,800
are usually connected while i jump

380
00:14:36,800 --> 00:14:40,639
accordingly we check if the jump

381
00:14:40,639 --> 00:14:42,959
has the same properties of the jobs

382
00:14:42,959 --> 00:14:44,959
between different functions

383
00:14:44,959 --> 00:14:48,320
or more formally we check if the job

384
00:14:48,320 --> 00:14:51,680
has the same properties of tail cores

385
00:14:51,680 --> 00:14:54,880
if the jump is not a technical we can

386
00:14:54,880 --> 00:14:56,079
confirm

387
00:14:56,079 --> 00:14:58,639
that's the destination part of the job

388
00:14:58,639 --> 00:15:00,639
is not a new function

389
00:15:00,639 --> 00:15:03,440
and therefore the source part and the

390
00:15:03,440 --> 00:15:04,639
destination part

391
00:15:04,639 --> 00:15:06,560
of the job should be merged into the

392
00:15:06,560 --> 00:15:08,399
same function

393
00:15:08,399 --> 00:15:10,560
regarding how to determine a job it's

394
00:15:10,560 --> 00:15:14,079
not satire we follow a set of novel

395
00:15:14,079 --> 00:15:17,760
but principled rules for instance

396
00:15:17,760 --> 00:15:21,120
if we see the target of the job does not

397
00:15:21,120 --> 00:15:21,920
satisfy

398
00:15:21,920 --> 00:15:24,800
calling conventions we can be sure that

399
00:15:24,800 --> 00:15:26,079
the target is not

400
00:15:26,079 --> 00:15:29,040
a new function and the jump is nothing

401
00:15:29,040 --> 00:15:30,720
terrible

402
00:15:30,720 --> 00:15:33,360
our second problem is related to jump

403
00:15:33,360 --> 00:15:34,560
tables

404
00:15:34,560 --> 00:15:38,160
again for optimization goals compiler

405
00:15:38,160 --> 00:15:39,279
often compiles

406
00:15:39,279 --> 00:15:43,199
a switch statement into an indirect job

407
00:15:43,199 --> 00:15:45,600
the targets of the indirect job are

408
00:15:45,600 --> 00:15:46,240
stored

409
00:15:46,240 --> 00:15:48,959
in a job table which correspond to the

410
00:15:48,959 --> 00:15:50,320
legitimate cases

411
00:15:50,320 --> 00:15:53,839
of the switch statement resolving jump

412
00:15:53,839 --> 00:15:54,800
tables

413
00:15:54,800 --> 00:15:57,279
to figure out the correct target has

414
00:15:57,279 --> 00:15:58,560
been a major challenge

415
00:15:58,560 --> 00:16:01,519
in binary disassembly to handle jump

416
00:16:01,519 --> 00:16:02,240
tables

417
00:16:02,240 --> 00:16:04,880
in our approach we follow the idea of

418
00:16:04,880 --> 00:16:05,839
anger

419
00:16:05,839 --> 00:16:08,720
we use the technical value set analysis

420
00:16:08,720 --> 00:16:09,519
to resolve

421
00:16:09,519 --> 00:16:12,079
jump tables which gives theoretical

422
00:16:12,079 --> 00:16:14,560
guarantees of the correctness

423
00:16:14,560 --> 00:16:17,839
we want to note that also we follow the

424
00:16:17,839 --> 00:16:18,399
idea

425
00:16:18,399 --> 00:16:21,680
of anger with adopted a implementation

426
00:16:21,680 --> 00:16:24,959
that is customized for jump tables

427
00:16:24,959 --> 00:16:29,518
which gives better results than anger

428
00:16:29,759 --> 00:16:32,320
by combining the reliable information

429
00:16:32,320 --> 00:16:33,519
from core frames

430
00:16:33,519 --> 00:16:35,519
and our solutions to the previously

431
00:16:35,519 --> 00:16:37,360
discussed challenges

432
00:16:37,360 --> 00:16:40,240
in the tasks of recovering instructions

433
00:16:40,240 --> 00:16:41,759
detecting functions

434
00:16:41,759 --> 00:16:44,320
and reconstructing control flows our

435
00:16:44,320 --> 00:16:44,959
approach

436
00:16:44,959 --> 00:16:47,839
produces disassembly results that are

437
00:16:47,839 --> 00:16:50,720
more verification friendly

438
00:16:50,720 --> 00:16:54,079
first our approach achieves not only

439
00:16:54,079 --> 00:16:57,440
nearly full coverage but also extremely

440
00:16:57,440 --> 00:16:59,199
high accuracy

441
00:16:59,199 --> 00:17:01,279
consider the detection of functions as

442
00:17:01,279 --> 00:17:02,639
an example

443
00:17:02,639 --> 00:17:05,439
our approach provides the same level of

444
00:17:05,439 --> 00:17:07,359
coverage as symbols

445
00:17:07,359 --> 00:17:09,839
and provides the same level of accuracy

446
00:17:09,839 --> 00:17:11,520
as the best commercial to

447
00:17:11,520 --> 00:17:16,000
ida pro second and more importantly

448
00:17:16,000 --> 00:17:18,640
most of the missing cases or errors

449
00:17:18,640 --> 00:17:20,559
produced by our approach

450
00:17:20,559 --> 00:17:23,520
are harmless to verification consider

451
00:17:23,520 --> 00:17:26,160
function detection as an example again

452
00:17:26,160 --> 00:17:29,200
the effects of any function we missed is

453
00:17:29,200 --> 00:17:30,559
equivalent to

454
00:17:30,559 --> 00:17:32,960
inline that function to its parents

455
00:17:32,960 --> 00:17:33,760
function

456
00:17:33,760 --> 00:17:36,640
which has zero side effects to formal

457
00:17:36,640 --> 00:17:39,200
verification

458
00:17:39,200 --> 00:17:41,520
although we have some pretty good or i

459
00:17:41,520 --> 00:17:43,760
would say satisfying results

460
00:17:43,760 --> 00:17:47,440
our story is not ended in fact

461
00:17:47,440 --> 00:17:50,000
we are still facing and will be facing

462
00:17:50,000 --> 00:17:51,120
many key challenges

463
00:17:51,120 --> 00:17:54,720
in the face of binary disassembly first

464
00:17:54,720 --> 00:17:56,559
call frames can only give reliable

465
00:17:56,559 --> 00:17:58,640
information to recover

466
00:17:58,640 --> 00:18:02,240
instructions functions and control flows

467
00:18:02,240 --> 00:18:04,960
however they cannot help with the

468
00:18:04,960 --> 00:18:05,919
recovery of

469
00:18:05,919 --> 00:18:08,799
pointers which are also essential for

470
00:18:08,799 --> 00:18:11,679
our goal of formal verification

471
00:18:11,679 --> 00:18:14,960
to this end we will need new approaches

472
00:18:14,960 --> 00:18:18,080
to reliably and correctly find pointers

473
00:18:18,080 --> 00:18:21,679
from binary code second like i mentioned

474
00:18:21,679 --> 00:18:22,559
before

475
00:18:22,559 --> 00:18:26,160
only system v x64 batteries mind dates

476
00:18:26,160 --> 00:18:27,280
the existence

477
00:18:27,280 --> 00:18:30,960
of core frames other types of binaries

478
00:18:30,960 --> 00:18:34,320
like windows x64 binaries have no such

479
00:18:34,320 --> 00:18:35,760
properties

480
00:18:35,760 --> 00:18:38,799
so how to handle those types of binaries

481
00:18:38,799 --> 00:18:42,000
remains a challenge finally

482
00:18:42,000 --> 00:18:44,960
the tools we're running still involves

483
00:18:44,960 --> 00:18:45,520
many

484
00:18:45,520 --> 00:18:48,000
engineering issues we will have to

485
00:18:48,000 --> 00:18:48,880
investigate

486
00:18:48,880 --> 00:18:52,080
and fix those issues

487
00:18:52,080 --> 00:18:55,360
some concluding remarks first in our

488
00:18:55,360 --> 00:18:56,080
work

489
00:18:56,080 --> 00:18:58,640
we fully demystified the strategies used

490
00:18:58,640 --> 00:19:01,039
by existing disassemblers

491
00:19:01,039 --> 00:19:03,600
we believe this is the first work of

492
00:19:03,600 --> 00:19:04,960
this kind

493
00:19:04,960 --> 00:19:07,440
the findings for our work what deepened

494
00:19:07,440 --> 00:19:09,039
the understanding about binary

495
00:19:09,039 --> 00:19:10,080
disassembling

496
00:19:10,080 --> 00:19:12,799
in the community at large the findings

497
00:19:12,799 --> 00:19:14,320
will also help users

498
00:19:14,320 --> 00:19:16,720
gain awareness of the risks of using

499
00:19:16,720 --> 00:19:19,440
existing disassemblers

500
00:19:19,440 --> 00:19:21,679
second we conducted the most

501
00:19:21,679 --> 00:19:24,080
comprehensive evaluation of existing

502
00:19:24,080 --> 00:19:27,600
disassemblers we unveil the performance

503
00:19:27,600 --> 00:19:30,080
and pitfalls of each strategy of each

504
00:19:30,080 --> 00:19:31,280
tool

505
00:19:31,280 --> 00:19:34,240
the results will bring new insights for

506
00:19:34,240 --> 00:19:36,559
the community to further improve binary

507
00:19:36,559 --> 00:19:37,679
disassembly

508
00:19:37,679 --> 00:19:40,960
the results can also help users like us

509
00:19:40,960 --> 00:19:43,360
to select the tools that can best

510
00:19:43,360 --> 00:19:45,840
satisfy their demands

511
00:19:45,840 --> 00:19:48,880
finally we exploit core frames to

512
00:19:48,880 --> 00:19:50,960
achieve verification friendly binary

513
00:19:50,960 --> 00:19:52,400
disassembly

514
00:19:52,400 --> 00:19:55,520
by doing so we provide a new disassembly

515
00:19:55,520 --> 00:19:56,480
approach

516
00:19:56,480 --> 00:19:59,120
for users that have high requirements of

517
00:19:59,120 --> 00:20:00,799
correctness

518
00:20:00,799 --> 00:20:04,000
moreover it brings insight of leveraging

519
00:20:04,000 --> 00:20:06,000
extra sources of information to

520
00:20:06,000 --> 00:20:10,159
facilitate binary disassembly

521
00:20:10,480 --> 00:20:13,440
now we are happy to announce the release

522
00:20:13,440 --> 00:20:16,960
of the code and data from our work

523
00:20:16,960 --> 00:20:19,760
first like i have pointed out the

524
00:20:19,760 --> 00:20:21,520
findings of our soft skilled

525
00:20:21,520 --> 00:20:22,640
understanding

526
00:20:22,640 --> 00:20:24,799
and the results of our empirical

527
00:20:24,799 --> 00:20:25,840
evaluation

528
00:20:25,840 --> 00:20:29,360
are released in archive paper second

529
00:20:29,360 --> 00:20:31,919
we have released the data and code of

530
00:20:31,919 --> 00:20:33,440
our empirical evaluation

531
00:20:33,440 --> 00:20:35,919
and github including the benchmark

532
00:20:35,919 --> 00:20:36,960
binaries

533
00:20:36,960 --> 00:20:39,600
and our compilers to produce the ground

534
00:20:39,600 --> 00:20:40,720
choose

535
00:20:40,720 --> 00:20:43,280
all of them are free to access now

536
00:20:43,280 --> 00:20:44,080
finally

537
00:20:44,080 --> 00:20:46,240
we're preparing to release our call

538
00:20:46,240 --> 00:20:48,400
frame assisted disassembler

539
00:20:48,400 --> 00:20:53,280
currently it is available on request

540
00:20:53,679 --> 00:20:56,240
thanks for listening again and i'm happy

541
00:20:56,240 --> 00:21:00,240
to take some questions now

