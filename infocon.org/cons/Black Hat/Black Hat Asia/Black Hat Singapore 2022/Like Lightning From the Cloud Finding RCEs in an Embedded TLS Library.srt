1
00:00:01,740 --> 00:00:04,810
[Music]

2
00:00:08,559 --> 00:00:10,639
hi everybody my name is euphal and i'm a

3
00:00:10,639 --> 00:00:12,880
research team leader thomas i'm gal and

4
00:00:12,880 --> 00:00:15,200
i'm a researcher at armis also with us

5
00:00:15,200 --> 00:00:16,239
is norm

6
00:00:16,239 --> 00:00:17,279
which we're going to meet during the

7
00:00:17,279 --> 00:00:18,240
demo

8
00:00:18,240 --> 00:00:21,760
okay so first a quick word about armies

9
00:00:21,760 --> 00:00:23,840
amis is a company that does a passive

10
00:00:23,840 --> 00:00:26,080
network monitoring asset inventory and

11
00:00:26,080 --> 00:00:27,920
anomaly detection

12
00:00:27,920 --> 00:00:30,080
we are part of the research team which

13
00:00:30,080 --> 00:00:32,238
focuses on vulnerability research of

14
00:00:32,238 --> 00:00:34,399
embedded devices

15
00:00:34,399 --> 00:00:35,920
we discover critical vulnerabilities

16
00:00:35,920 --> 00:00:37,920
that impact billions of devices and

17
00:00:37,920 --> 00:00:39,760
design and innovate security solutions

18
00:00:39,760 --> 00:00:42,079
to mitigate the risk that stems from iot

19
00:00:42,079 --> 00:00:44,160
devices

20
00:00:44,160 --> 00:00:45,440
and this is what we're going to cover

21
00:00:45,440 --> 00:00:46,480
today

22
00:00:46,480 --> 00:00:48,800
what tielstrom actually is

23
00:00:48,800 --> 00:00:50,719
what is a software supply chain is an

24
00:00:50,719 --> 00:00:52,160
attack vector

25
00:00:52,160 --> 00:00:54,160
and how we found these vulnerabilities

26
00:00:54,160 --> 00:00:56,160
and how they are connected

27
00:00:56,160 --> 00:00:57,840
and some hardware hacking techniques we

28
00:00:57,840 --> 00:01:00,000
needed along the way and of course a

29
00:01:00,000 --> 00:01:03,280
live demo expect some smoke

30
00:01:03,280 --> 00:01:05,519
so teal storm is a set of eight critical

31
00:01:05,519 --> 00:01:07,840
vulnerabilities found across three

32
00:01:07,840 --> 00:01:10,479
popular device lines like

33
00:01:10,479 --> 00:01:12,479
network speeches by aruba network

34
00:01:12,479 --> 00:01:15,119
switches by avaya and smart ups devices

35
00:01:15,119 --> 00:01:17,360
by apc

36
00:01:17,360 --> 00:01:19,119
we successfully exploited some of these

37
00:01:19,119 --> 00:01:22,000
vulnerabilities to remote code execution

38
00:01:22,000 --> 00:01:24,560
and one of these enables the attacker to

39
00:01:24,560 --> 00:01:26,400
bypass the captive portal in the uber

40
00:01:26,400 --> 00:01:29,200
switches while others

41
00:01:29,200 --> 00:01:31,119
allow the attacker to cause physical

42
00:01:31,119 --> 00:01:32,479
damage like you're going to see in the

43
00:01:32,479 --> 00:01:34,479
demo

44
00:01:34,479 --> 00:01:36,960
so what is software supply chain

45
00:01:36,960 --> 00:01:39,920
for our purposes it means that most

46
00:01:39,920 --> 00:01:42,320
services and products built today are

47
00:01:42,320 --> 00:01:44,960
based on third-party code for example

48
00:01:44,960 --> 00:01:46,399
the typical website contains

49
00:01:46,399 --> 00:01:48,000
approximately 70

50
00:01:48,000 --> 00:01:50,159
third party code

51
00:01:50,159 --> 00:01:52,479
and this is true in essence also for

52
00:01:52,479 --> 00:01:54,720
embedded devices where a lot of the code

53
00:01:54,720 --> 00:01:57,680
is shared among many different products

54
00:01:57,680 --> 00:02:00,079
and as you can probably know

55
00:02:00,079 --> 00:02:02,000
this can be a big risk

56
00:02:02,000 --> 00:02:04,000
and these two cases are proof

57
00:02:04,000 --> 00:02:05,840
the first one is the log for shell case

58
00:02:05,840 --> 00:02:07,600
from last december which got the whole

59
00:02:07,600 --> 00:02:09,440
security world on its feet

60
00:02:09,440 --> 00:02:11,920
one simple vulnerability in a logging

61
00:02:11,920 --> 00:02:14,400
package affected tens of thousands of

62
00:02:14,400 --> 00:02:16,080
other packages and dozens of

63
00:02:16,080 --> 00:02:17,920
high-profile

64
00:02:17,920 --> 00:02:20,239
companies and services

65
00:02:20,239 --> 00:02:22,319
and the other is urgent 11 which is a

66
00:02:22,319 --> 00:02:24,640
set of 11 vulnerabilities in the ip net

67
00:02:24,640 --> 00:02:27,120
tcp ip stack

68
00:02:27,120 --> 00:02:30,160
multi multiple um

69
00:02:30,160 --> 00:02:31,920
embedded operating system used this

70
00:02:31,920 --> 00:02:33,920
software component and because billions

71
00:02:33,920 --> 00:02:35,599
of devices

72
00:02:35,599 --> 00:02:38,080
use these operating systems billions

73
00:02:38,080 --> 00:02:40,400
were affected

74
00:02:40,400 --> 00:02:42,319
so let's map this out

75
00:02:42,319 --> 00:02:45,120
shared code means shared risk because

76
00:02:45,120 --> 00:02:47,440
one vulnerability impacts many different

77
00:02:47,440 --> 00:02:48,720
products

78
00:02:48,720 --> 00:02:51,200
and also short code means bigger upside

79
00:02:51,200 --> 00:02:53,599
for hackers because if one vulnerability

80
00:02:53,599 --> 00:02:56,080
impacts many different devices

81
00:02:56,080 --> 00:02:58,560
it is worth more to find but on the

82
00:02:58,560 --> 00:03:00,160
other hand shared code means more

83
00:03:00,160 --> 00:03:03,280
security resources because if the risk

84
00:03:03,280 --> 00:03:05,040
is shared there are many more people

85
00:03:05,040 --> 00:03:08,080
with incentive to help secure the code

86
00:03:08,080 --> 00:03:10,000
and this brings us to the comparison

87
00:03:10,000 --> 00:03:11,440
between open source code and closed

88
00:03:11,440 --> 00:03:13,120
source code

89
00:03:13,120 --> 00:03:14,800
the main security upside for closed

90
00:03:14,800 --> 00:03:16,560
source code is that it makes it harder

91
00:03:16,560 --> 00:03:18,640
for hackers to acquire the code to

92
00:03:18,640 --> 00:03:20,959
search for weaknesses

93
00:03:20,959 --> 00:03:23,360
or in other words security by obscurity

94
00:03:23,360 --> 00:03:26,879
instead of opening the books hiding them

95
00:03:26,879 --> 00:03:28,159
on the other hand the main security

96
00:03:28,159 --> 00:03:30,799
upside for open source code is that you

97
00:03:30,799 --> 00:03:34,000
get a community alongside with the code

98
00:03:34,000 --> 00:03:35,920
it's true that it's easier for hackers

99
00:03:35,920 --> 00:03:37,599
to gain access to the code but also for

100
00:03:37,599 --> 00:03:39,280
the security community which all share

101
00:03:39,280 --> 00:03:40,640
an incentive

102
00:03:40,640 --> 00:03:42,959
to help secure it what you also get is a

103
00:03:42,959 --> 00:03:44,720
community of developers helping with

104
00:03:44,720 --> 00:03:46,640
helping you to figure out

105
00:03:46,640 --> 00:03:48,959
how to use the library and as we'll

106
00:03:48,959 --> 00:03:50,560
shortly see this can be just as

107
00:03:50,560 --> 00:03:52,720
important

108
00:03:52,720 --> 00:03:55,360
so our research today is gonna

109
00:03:55,360 --> 00:03:57,680
focus on a specific closed source

110
00:03:57,680 --> 00:04:00,400
library called nano ssl

111
00:04:00,400 --> 00:04:02,400
this library is developed by mokana

112
00:04:02,400 --> 00:04:06,400
which was recently acquired by digiselt

113
00:04:06,400 --> 00:04:09,040
and as you can see our results trade us

114
00:04:09,040 --> 00:04:11,599
to many different companies that use

115
00:04:11,599 --> 00:04:13,040
this

116
00:04:13,040 --> 00:04:15,760
the code of nano ssl like aruba and

117
00:04:15,760 --> 00:04:19,120
avaya which both

118
00:04:19,120 --> 00:04:22,160
create i.t devices and apc which is a

119
00:04:22,160 --> 00:04:25,440
manufacturer of ups devices

120
00:04:25,440 --> 00:04:27,600
and here you can see that attacks

121
00:04:27,600 --> 00:04:30,080
against these such devices is a real

122
00:04:30,080 --> 00:04:32,240
risk and on the top you can see an

123
00:04:32,240 --> 00:04:34,479
example of a wide scale attack against

124
00:04:34,479 --> 00:04:36,000
network switches

125
00:04:36,000 --> 00:04:36,960
and on the

126
00:04:36,960 --> 00:04:38,720
bottom assist alert

127
00:04:38,720 --> 00:04:40,840
from ups

128
00:04:40,840 --> 00:04:43,120
attacks so let's begin with the first

129
00:04:43,120 --> 00:04:45,600
name on the list aruba

130
00:04:45,600 --> 00:04:48,240
we found many different device series

131
00:04:48,240 --> 00:04:51,680
that use a nano ssl from aruba and we

132
00:04:51,680 --> 00:04:53,520
found many interfaces in these devices

133
00:04:53,520 --> 00:04:55,680
that use it we chose to focus on the

134
00:04:55,680 --> 00:04:56,560
captive

135
00:04:56,560 --> 00:04:58,240
the captive portal interface like you

136
00:04:58,240 --> 00:05:00,400
can see on the bottom right

137
00:05:00,400 --> 00:05:02,240
and which is a bad interface to be

138
00:05:02,240 --> 00:05:03,600
vulnerable because

139
00:05:03,600 --> 00:05:06,080
it is by design aimed at users before

140
00:05:06,080 --> 00:05:10,080
authentication and without authorization

141
00:05:10,080 --> 00:05:12,639
and let's take a closer look

142
00:05:12,639 --> 00:05:14,160
the first thing we need to know is that

143
00:05:14,160 --> 00:05:16,880
nano ssl defines error codes just like

144
00:05:16,880 --> 00:05:19,039
any other library and handling these

145
00:05:19,039 --> 00:05:20,479
level codes is the vendor's

146
00:05:20,479 --> 00:05:23,039
responsibility like closing a session in

147
00:05:23,039 --> 00:05:24,400
case of an error

148
00:05:24,400 --> 00:05:26,720
and as you can probably guess this is

149
00:05:26,720 --> 00:05:30,240
something that is really easy to miss

150
00:05:30,240 --> 00:05:31,120
let's

151
00:05:31,120 --> 00:05:33,280
look take a look at the code so here we

152
00:05:33,280 --> 00:05:36,320
have a call to the receive api which is

153
00:05:36,320 --> 00:05:38,320
properly handled

154
00:05:38,320 --> 00:05:40,639
next there is another call which is not

155
00:05:40,639 --> 00:05:42,960
properly handled the inner loop will

156
00:05:42,960 --> 00:05:45,280
exit but the outer won't and there will

157
00:05:45,280 --> 00:05:47,280
be another call to receive even if the

158
00:05:47,280 --> 00:05:49,440
previous one failed

159
00:05:49,440 --> 00:05:51,199
this leaves the session hanging and

160
00:05:51,199 --> 00:05:53,520
causes state confusion which leads to

161
00:05:53,520 --> 00:05:57,199
remote code execution vulnerability

162
00:05:57,199 --> 00:05:58,960
and this is why

163
00:05:58,960 --> 00:06:01,840
this is internal code by nano ssl this

164
00:06:01,840 --> 00:06:04,160
code is responsible for the tls

165
00:06:04,160 --> 00:06:06,479
reassembly from tcp stream and to

166
00:06:06,479 --> 00:06:07,520
understand

167
00:06:07,520 --> 00:06:09,280
wider this leads to remote code

168
00:06:09,280 --> 00:06:11,199
execution we're going to first follow

169
00:06:11,199 --> 00:06:13,680
the happy flow of reassembling to tcp

170
00:06:13,680 --> 00:06:15,280
packets

171
00:06:15,280 --> 00:06:17,520
this is the initial state please note

172
00:06:17,520 --> 00:06:19,840
that there is a pre-allocated buffer of

173
00:06:19,840 --> 00:06:22,720
1000 hexabytes internally

174
00:06:22,720 --> 00:06:24,639
first the state is checked

175
00:06:24,639 --> 00:06:26,000
and because this is the first packet

176
00:06:26,000 --> 00:06:27,759
reassembly is not needed

177
00:06:27,759 --> 00:06:30,240
next the header is red which changes the

178
00:06:30,240 --> 00:06:31,440
state

179
00:06:31,440 --> 00:06:34,720
which is checked here and it passes

180
00:06:34,720 --> 00:06:36,960
to the extraction of the length from the

181
00:06:36,960 --> 00:06:41,039
header of let's say 3 000 hexa bytes

182
00:06:41,039 --> 00:06:43,199
this is a valid length according to a

183
00:06:43,199 --> 00:06:45,759
nano ssl so the internal buffer is

184
00:06:45,759 --> 00:06:48,240
reallocated to that size and the rest of

185
00:06:48,240 --> 00:06:50,160
the chunk is red

186
00:06:50,160 --> 00:06:52,639
now for the second packet the

187
00:06:52,639 --> 00:06:55,199
state is checked once again

188
00:06:55,199 --> 00:06:57,840
and because this is reassembly state

189
00:06:57,840 --> 00:06:59,520
the rest of the chunk is red and the

190
00:06:59,520 --> 00:07:01,440
process finishes

191
00:07:01,440 --> 00:07:03,599
now for the vulnerable flow

192
00:07:03,599 --> 00:07:05,680
we begin in the same matter

193
00:07:05,680 --> 00:07:08,960
and with the same state check the same

194
00:07:08,960 --> 00:07:11,680
reading of the header and once again the

195
00:07:11,680 --> 00:07:13,759
same state check

196
00:07:13,759 --> 00:07:15,520
now when we extract the length for the

197
00:07:15,520 --> 00:07:18,400
vulnerable flow to take place we give a

198
00:07:18,400 --> 00:07:19,840
bigger size

199
00:07:19,840 --> 00:07:22,240
than is allowed of let's say 5000 hexa

200
00:07:22,240 --> 00:07:24,479
bytes and because this size is too big

201
00:07:24,479 --> 00:07:26,319
this check will fail and the function

202
00:07:26,319 --> 00:07:28,560
will exit but remember

203
00:07:28,560 --> 00:07:31,759
this is before the the relocation took

204
00:07:31,759 --> 00:07:34,639
place so the internal buffer is still

205
00:07:34,639 --> 00:07:35,919
too little

206
00:07:35,919 --> 00:07:39,120
now we send another packet

207
00:07:39,120 --> 00:07:41,199
the state is checked which indicates

208
00:07:41,199 --> 00:07:42,800
reassembly

209
00:07:42,800 --> 00:07:44,880
and the other chunk is red even if it's

210
00:07:44,880 --> 00:07:46,479
smaller even if it's bigger than the

211
00:07:46,479 --> 00:07:48,720
internal buffer this leads to a hip

212
00:07:48,720 --> 00:07:50,080
overflow

213
00:07:50,080 --> 00:07:52,080
which we successfully exploited to

214
00:07:52,080 --> 00:07:54,879
remote core execution

215
00:07:54,879 --> 00:07:56,479
and this remote core execution not only

216
00:07:56,479 --> 00:07:58,720
allows to bypass the captive portal

217
00:07:58,720 --> 00:08:00,000
interface

218
00:08:00,000 --> 00:08:02,720
it allows a full takeover of the device

219
00:08:02,720 --> 00:08:04,639
which can allow an attacker to hop

220
00:08:04,639 --> 00:08:06,879
villains and move laterally within the

221
00:08:06,879 --> 00:08:08,639
networks and access restricted parts of

222
00:08:08,639 --> 00:08:10,960
the network

223
00:08:10,960 --> 00:08:13,039
and while this vulnerability is not

224
00:08:13,039 --> 00:08:16,639
actually within nano ssl it still stems

225
00:08:16,639 --> 00:08:18,800
from it because one improper level check

226
00:08:18,800 --> 00:08:21,759
should not lead to hip overflow

227
00:08:21,759 --> 00:08:24,240
this leads us to the question

228
00:08:24,240 --> 00:08:26,319
all other vendors always close the

229
00:08:26,319 --> 00:08:27,840
session right

230
00:08:27,840 --> 00:08:29,520
i guess you can guess the answer to that

231
00:08:29,520 --> 00:08:31,280
one

232
00:08:31,280 --> 00:08:33,360
so if we look at this list we can

233
00:08:33,360 --> 00:08:36,000
successfully say that we found a misuse

234
00:08:36,000 --> 00:08:38,320
of nano ssl that leads to remote code

235
00:08:38,320 --> 00:08:40,799
execution in the in the uber device

236
00:08:40,799 --> 00:08:44,159
now for the next name avaya

237
00:08:44,159 --> 00:08:46,399
this code is responsible for passing the

238
00:08:46,399 --> 00:08:48,720
http post header in the web portal

239
00:08:48,720 --> 00:08:51,279
interface it is also missing error code

240
00:08:51,279 --> 00:08:53,920
check and it stems from the

241
00:08:53,920 --> 00:08:55,600
assumption of the code that there would

242
00:08:55,600 --> 00:08:58,640
be a backslash n after a backslash r

243
00:08:58,640 --> 00:09:00,959
if we take a look here there is

244
00:09:00,959 --> 00:09:02,959
a call to the receive api which is

245
00:09:02,959 --> 00:09:04,800
properly handled

246
00:09:04,800 --> 00:09:06,959
another call to the receive api which is

247
00:09:06,959 --> 00:09:08,720
not properly handled

248
00:09:08,720 --> 00:09:10,880
the loop would go around and another

249
00:09:10,880 --> 00:09:12,800
call to receive ap to the receive api

250
00:09:12,800 --> 00:09:14,480
even if the previous one failed just

251
00:09:14,480 --> 00:09:16,000
like before and the vulnerability is

252
00:09:16,000 --> 00:09:19,040
triggered just like before

253
00:09:19,040 --> 00:09:22,160
so we can add another name to the list

254
00:09:22,160 --> 00:09:25,120
of devices that misused the nano ssl

255
00:09:25,120 --> 00:09:26,560
library

256
00:09:26,560 --> 00:09:28,000
which led to a remote core execution

257
00:09:28,000 --> 00:09:30,560
vulnerability

258
00:09:30,560 --> 00:09:32,640
and for the next name of the list apc

259
00:09:32,640 --> 00:09:35,200
which is a manufacturer of ups devices

260
00:09:35,200 --> 00:09:38,640
so a quick recap of what is a ups device

261
00:09:38,640 --> 00:09:40,320
in the normal operation the ups device

262
00:09:40,320 --> 00:09:42,880
realized the power from the grid to the

263
00:09:42,880 --> 00:09:45,200
connected devices and in case of an

264
00:09:45,200 --> 00:09:46,160
outage

265
00:09:46,160 --> 00:09:47,920
it automatically switches to the battery

266
00:09:47,920 --> 00:09:49,760
mode not letting the connected devices

267
00:09:49,760 --> 00:09:52,399
suffer any downtime and by design these

268
00:09:52,399 --> 00:09:53,839
should be devices which are mission

269
00:09:53,839 --> 00:09:57,680
critical who cannot suffer any downtime

270
00:09:57,680 --> 00:09:59,040
more specifically we're talking about

271
00:09:59,040 --> 00:10:01,680
smart ups devices by apc

272
00:10:01,680 --> 00:10:04,800
which are probably the most popular ups

273
00:10:04,800 --> 00:10:06,560
devices in the world with over 20

274
00:10:06,560 --> 00:10:08,959
million units sold which can be found in

275
00:10:08,959 --> 00:10:12,560
about 8 out of 10 enterprise networks

276
00:10:12,560 --> 00:10:15,040
these devices are considered smart

277
00:10:15,040 --> 00:10:18,000
in two main aspects the first is that

278
00:10:18,000 --> 00:10:20,640
software has a big part of the

279
00:10:20,640 --> 00:10:22,800
electrical operation of the device

280
00:10:22,800 --> 00:10:24,880
and the second is a feature called smart

281
00:10:24,880 --> 00:10:27,440
connect which is basically a dedicated

282
00:10:27,440 --> 00:10:29,760
ethernet port connecting the ups to the

283
00:10:29,760 --> 00:10:31,440
cloud

284
00:10:31,440 --> 00:10:33,279
this leads us to the question

285
00:10:33,279 --> 00:10:35,920
combining these two smart aspects of the

286
00:10:35,920 --> 00:10:37,040
device

287
00:10:37,040 --> 00:10:39,279
is there a potential risk here

288
00:10:39,279 --> 00:10:41,200
and to answer that we needed to get

289
00:10:41,200 --> 00:10:43,760
ourselves our hands on the code which as

290
00:10:43,760 --> 00:10:46,320
you can see here is mainly encrypted so

291
00:10:46,320 --> 00:10:48,160
we needed a different approach

292
00:10:48,160 --> 00:10:50,240
the board itself

293
00:10:50,240 --> 00:10:53,440
then we found two stocks or cpus

294
00:10:53,440 --> 00:10:55,440
one of them is closer to the phi which

295
00:10:55,440 --> 00:10:57,040
is the chip that is responsible for

296
00:10:57,040 --> 00:10:59,760
passing and sending of ethernet frames

297
00:10:59,760 --> 00:11:01,760
we figured because this stock is closer

298
00:11:01,760 --> 00:11:03,279
to the file it is the one that is

299
00:11:03,279 --> 00:11:05,680
responsible for the network operations

300
00:11:05,680 --> 00:11:07,760
which we which is where we expect to

301
00:11:07,760 --> 00:11:10,399
find the nano ssl code

302
00:11:10,399 --> 00:11:13,839
we also found this interface which is

303
00:11:13,839 --> 00:11:16,320
connected to the debug pins of the sock

304
00:11:16,320 --> 00:11:18,480
which should allow us to debug the sock

305
00:11:18,480 --> 00:11:19,760
directly

306
00:11:19,760 --> 00:11:21,760
so we connected to it and this is what

307
00:11:21,760 --> 00:11:24,160
happened

308
00:11:26,000 --> 00:11:28,560
okay you cannot hear the sound but

309
00:11:28,560 --> 00:11:30,399
there should be a really annoying beep

310
00:11:30,399 --> 00:11:31,760
sound right now

311
00:11:31,760 --> 00:11:34,160
and this sound means that the device is

312
00:11:34,160 --> 00:11:37,279
frozen until unplugged

313
00:11:37,279 --> 00:11:39,440
so after some head scratching we went to

314
00:11:39,440 --> 00:11:41,360
the widest of them all which in this

315
00:11:41,360 --> 00:11:44,000
case is the cpu's data sheet

316
00:11:44,000 --> 00:11:45,519
there we'll learn about a feature called

317
00:11:45,519 --> 00:11:46,720
rdp

318
00:11:46,720 --> 00:11:48,720
what is rdp you ask

319
00:11:48,720 --> 00:11:50,880
this is how it's described but i only

320
00:11:50,880 --> 00:11:52,640
want you to take a look at the important

321
00:11:52,640 --> 00:11:54,880
code and only the important

322
00:11:54,880 --> 00:11:58,000
so what this basically means

323
00:11:58,000 --> 00:12:00,800
is that once the debug interface is

324
00:12:00,800 --> 00:12:02,640
connected

325
00:12:02,640 --> 00:12:05,040
access to the flash is shut out until a

326
00:12:05,040 --> 00:12:06,639
reboot

327
00:12:06,639 --> 00:12:09,360
so to summarize if we connect the jtag

328
00:12:09,360 --> 00:12:10,880
we don't have access to the flash

329
00:12:10,880 --> 00:12:13,519
anymore but we do get a snapshot of the

330
00:12:13,519 --> 00:12:14,800
ram

331
00:12:14,800 --> 00:12:16,880
so we cannot just

332
00:12:16,880 --> 00:12:18,800
dump the firmware

333
00:12:18,800 --> 00:12:20,880
but we didn't give up we just needed a

334
00:12:20,880 --> 00:12:22,160
little help

335
00:12:22,160 --> 00:12:25,200
from a little friend which in this case

336
00:12:25,200 --> 00:12:28,000
is a smaller ups device by apc

337
00:12:28,000 --> 00:12:30,079
we label these two devices with and

338
00:12:30,079 --> 00:12:32,800
without because only one of them has the

339
00:12:32,800 --> 00:12:34,959
smart connect feature but both of them

340
00:12:34,959 --> 00:12:37,040
are considered smart so we figured there

341
00:12:37,040 --> 00:12:38,880
would be some similarities which which

342
00:12:38,880 --> 00:12:40,959
are going to help us

343
00:12:40,959 --> 00:12:44,639
most of the devices uh have rdp support

344
00:12:44,639 --> 00:12:47,519
but as we found out on the small ups it

345
00:12:47,519 --> 00:12:49,760
is turned off

346
00:12:49,760 --> 00:12:51,680
this was surprising because we already

347
00:12:51,680 --> 00:12:53,360
know that apc knows about this feature

348
00:12:53,360 --> 00:12:54,880
and how to use it

349
00:12:54,880 --> 00:12:56,880
but nonetheless it was turned off so we

350
00:12:56,880 --> 00:12:58,880
were able to just dump the firmware

351
00:12:58,880 --> 00:13:00,800
reverse it focusing on the decryption

352
00:13:00,800 --> 00:13:02,000
part

353
00:13:02,000 --> 00:13:04,560
so we can decrypt the original firmware

354
00:13:04,560 --> 00:13:06,320
but as we found out they used a

355
00:13:06,320 --> 00:13:07,920
different encryption so

356
00:13:07,920 --> 00:13:08,800
that

357
00:13:08,800 --> 00:13:10,240
couldn't work

358
00:13:10,240 --> 00:13:12,079
the last clue we found

359
00:13:12,079 --> 00:13:13,519
is that they have a similar firmware

360
00:13:13,519 --> 00:13:14,959
package structure

361
00:13:14,959 --> 00:13:17,360
which was a big hint as you'll shortly

362
00:13:17,360 --> 00:13:19,120
see

363
00:13:19,120 --> 00:13:21,279
we figured a similar film structure

364
00:13:21,279 --> 00:13:24,160
means a similar update process so we

365
00:13:24,160 --> 00:13:26,320
took a look at the update process of the

366
00:13:26,320 --> 00:13:27,920
small ups

367
00:13:27,920 --> 00:13:30,000
it decrypts the femoral chunk by chunk

368
00:13:30,000 --> 00:13:32,839
each time storing the decrypted chunk in

369
00:13:32,839 --> 00:13:36,079
memory so and remember we can take a

370
00:13:36,079 --> 00:13:38,800
peek at the ram of the original film

371
00:13:38,800 --> 00:13:41,040
so we deduced the address of the

372
00:13:41,040 --> 00:13:42,880
decrypted buffer chunk in the original

373
00:13:42,880 --> 00:13:45,440
firmware's ram and found it

374
00:13:45,440 --> 00:13:46,839
so we have now this

375
00:13:46,839 --> 00:13:49,600
approach we initiate a firmware update

376
00:13:49,600 --> 00:13:51,200
we wait for the correct chunk to be

377
00:13:51,200 --> 00:13:52,480
stored in ram

378
00:13:52,480 --> 00:13:55,200
we dump the ram to extract the chunk and

379
00:13:55,200 --> 00:13:58,079
reboot to exit the rdp restricted state

380
00:13:58,079 --> 00:14:01,120
and we can do that time and time again

381
00:14:01,120 --> 00:14:02,079
um

382
00:14:02,079 --> 00:14:04,160
we can do that time and time again uh

383
00:14:04,160 --> 00:14:05,360
each time for a different chunk and

384
00:14:05,360 --> 00:14:08,240
extract the whole film

385
00:14:08,240 --> 00:14:09,760
but to check the viability of this

386
00:14:09,760 --> 00:14:10,959
approach

387
00:14:10,959 --> 00:14:13,120
each iteration requires a lot of human

388
00:14:13,120 --> 00:14:15,360
interaction like timing for the correct

389
00:14:15,360 --> 00:14:18,240
chunk pressing of physical buttons to

390
00:14:18,240 --> 00:14:20,320
initiate the update and pulling out the

391
00:14:20,320 --> 00:14:22,639
battery for the hard reboot

392
00:14:22,639 --> 00:14:24,720
each iteration like that requires about

393
00:14:24,720 --> 00:14:26,240
five minutes

394
00:14:26,240 --> 00:14:28,560
and even if we do get a different chunk

395
00:14:28,560 --> 00:14:30,959
each iteration there are about 1200

396
00:14:30,959 --> 00:14:33,519
chunks in total so to summarize all of

397
00:14:33,519 --> 00:14:35,680
this it's going to take us weeks of

398
00:14:35,680 --> 00:14:39,040
grinding to extract the firmware

399
00:14:39,040 --> 00:14:41,600
so we tried this approach we used a

400
00:14:41,600 --> 00:14:43,279
raspberry pi to control all of the

401
00:14:43,279 --> 00:14:45,519
elements which are

402
00:14:45,519 --> 00:14:47,680
the power pins of the stock instead of

403
00:14:47,680 --> 00:14:49,199
pulling out the battery

404
00:14:49,199 --> 00:14:51,199
the electrical signal of the buttons

405
00:14:51,199 --> 00:14:53,120
instead of pressing them

406
00:14:53,120 --> 00:14:55,680
the debug interface to dump the ram and

407
00:14:55,680 --> 00:14:57,680
timing with better precision that we

408
00:14:57,680 --> 00:14:59,680
could ever get manually

409
00:14:59,680 --> 00:15:01,199
on the right you can take a look at our

410
00:15:01,199 --> 00:15:03,040
frankenstein setup which you can read

411
00:15:03,040 --> 00:15:05,440
more about in the white paper

412
00:15:05,440 --> 00:15:06,399
so

413
00:15:06,399 --> 00:15:09,440
after a night of running this setup

414
00:15:09,440 --> 00:15:11,199
we successfully got the decrypted

415
00:15:11,199 --> 00:15:13,279
firmware and now gal will explain what

416
00:15:13,279 --> 00:15:16,160
we found over there

417
00:15:17,120 --> 00:15:20,000
okay thank you

418
00:15:20,000 --> 00:15:22,240
okay so guess what we found there in the

419
00:15:22,240 --> 00:15:24,160
code we found our beloved nano ssl

420
00:15:24,160 --> 00:15:25,279
package

421
00:15:25,279 --> 00:15:26,800
and

422
00:15:26,800 --> 00:15:28,320
you can see here

423
00:15:28,320 --> 00:15:30,560
a usage of this nano ssl receive

424
00:15:30,560 --> 00:15:32,079
function and actually this is the only

425
00:15:32,079 --> 00:15:35,040
usage in the entire code of the ups and

426
00:15:35,040 --> 00:15:36,720
this is

427
00:15:36,720 --> 00:15:38,320
a good approach to have a concentrated

428
00:15:38,320 --> 00:15:40,240
usage because this way you have to

429
00:15:40,240 --> 00:15:41,519
handle the

430
00:15:41,519 --> 00:15:43,920
return or only once

431
00:15:43,920 --> 00:15:44,800
but

432
00:15:44,800 --> 00:15:47,199
surprisingly enough uh apc forgot to

433
00:15:47,199 --> 00:15:48,240
handle

434
00:15:48,240 --> 00:15:48,959
the

435
00:15:48,959 --> 00:15:50,880
the return error number in their only

436
00:15:50,880 --> 00:15:52,639
usage and we already know the

437
00:15:52,639 --> 00:15:55,680
consequences of that

438
00:15:55,680 --> 00:15:57,920
not handling your errors i mean in this

439
00:15:57,920 --> 00:15:58,720
case

440
00:15:58,720 --> 00:16:01,600
tls state confusion which means

441
00:16:01,600 --> 00:16:03,360
a heap overflow and indeed we were able

442
00:16:03,360 --> 00:16:05,120
to find two

443
00:16:05,120 --> 00:16:06,959
critical pre-authentication

444
00:16:06,959 --> 00:16:09,519
vulnerabilities

445
00:16:09,519 --> 00:16:10,399
and

446
00:16:10,399 --> 00:16:12,639
by that we can safely say that we have a

447
00:16:12,639 --> 00:16:14,399
three out of three success rate of

448
00:16:14,399 --> 00:16:16,399
founding uh

449
00:16:16,399 --> 00:16:20,000
critical vulnerabilities stems from the

450
00:16:20,000 --> 00:16:22,480
basically the same trick of the

451
00:16:22,480 --> 00:16:25,360
missing error check of nano ssl

452
00:16:25,360 --> 00:16:27,600
but as i mentioned we found two

453
00:16:27,600 --> 00:16:28,880
vulnerabilities

454
00:16:28,880 --> 00:16:30,880
and the first is the one that you're

455
00:16:30,880 --> 00:16:32,560
already familiar with the one from the

456
00:16:32,560 --> 00:16:34,320
aruba the hip overflow

457
00:16:34,320 --> 00:16:36,800
but in some cases you want a more

458
00:16:36,800 --> 00:16:39,680
elegant vulnerability a one that

459
00:16:39,680 --> 00:16:41,920
does not corrupt any memory

460
00:16:41,920 --> 00:16:44,880
and we will show you our state confusion

461
00:16:44,880 --> 00:16:47,839
in tls can go even wilder

462
00:16:47,839 --> 00:16:49,839
and in this case we found way uh to

463
00:16:49,839 --> 00:16:51,519
bypass the authentication of the smart

464
00:16:51,519 --> 00:16:53,600
connect feature of the

465
00:16:53,600 --> 00:16:56,399
of the ups that connect it to the uh

466
00:16:56,399 --> 00:16:58,480
to the management cloud and from there

467
00:16:58,480 --> 00:16:59,199
we

468
00:16:59,199 --> 00:17:01,440
could masquerade as a verified cloud and

469
00:17:01,440 --> 00:17:04,559
do whatever the cloud does and to

470
00:17:04,559 --> 00:17:06,959
understand this feature uh you first

471
00:17:06,959 --> 00:17:08,400
have to be familiar with kind of a niche

472
00:17:08,400 --> 00:17:11,439
tls feature called tls resumption

473
00:17:11,439 --> 00:17:15,119
and this feature allows parties to uh

474
00:17:15,119 --> 00:17:17,039
exchange session id in the

475
00:17:17,039 --> 00:17:18,720
authentication phase

476
00:17:18,720 --> 00:17:21,280
and to store it alongside the generated

477
00:17:21,280 --> 00:17:23,760
master secret that it is used for the

478
00:17:23,760 --> 00:17:25,280
encryption and decryption of the

479
00:17:25,280 --> 00:17:26,799
communication phase

480
00:17:26,799 --> 00:17:28,000
and

481
00:17:28,000 --> 00:17:29,600
when the two parties want to

482
00:17:29,600 --> 00:17:31,520
re-establish their connection

483
00:17:31,520 --> 00:17:34,480
all they need to do is to uh to present

484
00:17:34,480 --> 00:17:36,480
the same session id

485
00:17:36,480 --> 00:17:38,799
again and from there they can fetch the

486
00:17:38,799 --> 00:17:40,960
master secret

487
00:17:40,960 --> 00:17:43,360
from their cache and hop straight the

488
00:17:43,360 --> 00:17:45,280
communication phase

489
00:17:45,280 --> 00:17:48,000
but this feature has a hidden risk

490
00:17:48,000 --> 00:17:50,559
within it because if one side somehow

491
00:17:50,559 --> 00:17:53,200
able to uh is able to persuade the other

492
00:17:53,200 --> 00:17:54,000
one

493
00:17:54,000 --> 00:17:57,280
that the resumption flow should be taken

494
00:17:57,280 --> 00:17:59,679
although the first authentication phase

495
00:17:59,679 --> 00:18:01,440
didn't take place before

496
00:18:01,440 --> 00:18:03,679
it means that the master seeker that it

497
00:18:03,679 --> 00:18:06,160
will be used was not generated and in in

498
00:18:06,160 --> 00:18:08,640
times it could be a predictable

499
00:18:08,640 --> 00:18:10,400
not so secret uh

500
00:18:10,400 --> 00:18:12,720
master secret and

501
00:18:12,720 --> 00:18:15,280
this way the malicious side can uh

502
00:18:15,280 --> 00:18:18,240
bypass the authentication phase

503
00:18:18,240 --> 00:18:20,080
and in our case we know that the nano

504
00:18:20,080 --> 00:18:22,240
ssl uh

505
00:18:22,240 --> 00:18:25,520
missing handling bug allows uh uh that

506
00:18:25,520 --> 00:18:28,160
if we store the session id which happens

507
00:18:28,160 --> 00:18:30,480
during the nano ssl landshake

508
00:18:30,480 --> 00:18:32,320
and fails right after

509
00:18:32,320 --> 00:18:34,480
the session keeps hanging and it means

510
00:18:34,480 --> 00:18:36,240
that the master secret that is generated

511
00:18:36,240 --> 00:18:38,080
only after the handshake

512
00:18:38,080 --> 00:18:40,160
will not be generated by that point and

513
00:18:40,160 --> 00:18:41,919
the session id will be waiting in the

514
00:18:41,919 --> 00:18:44,559
ssl object for the next handshake packet

515
00:18:44,559 --> 00:18:47,200
and we can think of a malicious flow

516
00:18:47,200 --> 00:18:48,320
like this one

517
00:18:48,320 --> 00:18:50,240
we send a bad handshake with a session

518
00:18:50,240 --> 00:18:51,840
id of our choice

519
00:18:51,840 --> 00:18:55,120
and it fails and we send a valid

520
00:18:55,120 --> 00:18:56,960
handshake packet for the resumption flow

521
00:18:56,960 --> 00:18:59,039
is the same session id and the client is

522
00:18:59,039 --> 00:19:00,640
fooled to think this is a resumption

523
00:19:00,640 --> 00:19:03,679
flow and it fetches a master secret

524
00:19:03,679 --> 00:19:06,000
which in this case is a

525
00:19:06,000 --> 00:19:08,240
the initialization value of the object

526
00:19:08,240 --> 00:19:09,679
of zeros

527
00:19:09,679 --> 00:19:11,679
which the attacker can predict

528
00:19:11,679 --> 00:19:15,039
and this is how it looks step by step

529
00:19:15,039 --> 00:19:17,440
active portal we can move laterally so

530
00:19:17,440 --> 00:19:18,799
for the next step i'll introduce you

531
00:19:18,799 --> 00:19:20,240
with the new

532
00:19:20,240 --> 00:19:22,840
actor in this demo and this is the ups

533
00:19:22,840 --> 00:19:26,559
that we are gonna make some really bad

534
00:19:26,559 --> 00:19:28,960
things too

535
00:19:28,960 --> 00:19:31,919
and as you can see um it's connected to

536
00:19:31,919 --> 00:19:33,679
a lamp it's a very important lamp it

537
00:19:33,679 --> 00:19:36,559
cannot tolerate any downtime never so

538
00:19:36,559 --> 00:19:38,240
it's connected to a it's connected to a

539
00:19:38,240 --> 00:19:40,880
ups device and it represents the most

540
00:19:40,880 --> 00:19:42,320
important data centers that you can

541
00:19:42,320 --> 00:19:44,160
dream of that they cannot tolerate any

542
00:19:44,160 --> 00:19:46,880
downtime or mri machines or whatever

543
00:19:46,880 --> 00:19:50,000
and now norm will look for it in in with

544
00:19:50,000 --> 00:19:51,919
arp command as a neighbor and he can't

545
00:19:51,919 --> 00:19:53,120
find it

546
00:19:53,120 --> 00:19:54,160
and

547
00:19:54,160 --> 00:19:56,640
why is it possible because

548
00:19:56,640 --> 00:19:58,960
of segmentation probably so let's see

549
00:19:58,960 --> 00:20:02,480
what vlans are configured in this switch

550
00:20:02,480 --> 00:20:04,799
and as you can see we have two

551
00:20:04,799 --> 00:20:06,799
vlans one is the guest villain and one

552
00:20:06,799 --> 00:20:08,240
is a secret corporate villain that

553
00:20:08,240 --> 00:20:10,400
sounds really interesting

554
00:20:10,400 --> 00:20:13,120
our port 15

555
00:20:13,120 --> 00:20:15,200
is connected to the guest vlan as we

556
00:20:15,200 --> 00:20:16,480
could predict

557
00:20:16,480 --> 00:20:18,400
so now we will move laterally we'll

558
00:20:18,400 --> 00:20:20,480
disable the the secret corporate vlan

559
00:20:20,480 --> 00:20:23,360
and we will connect all the ports to uh

560
00:20:23,360 --> 00:20:27,439
the same villain so they can be accessed

561
00:20:27,679 --> 00:20:30,320
from the guest villain from our

562
00:20:30,320 --> 00:20:32,400
attacking computer

563
00:20:32,400 --> 00:20:34,960
and now we will attempt to run the arp

564
00:20:34,960 --> 00:20:37,280
command again and we expect to find the

565
00:20:37,280 --> 00:20:38,559
ups

566
00:20:38,559 --> 00:20:40,799
and this might take up to okay it

567
00:20:40,799 --> 00:20:42,559
happened really quick

568
00:20:42,559 --> 00:20:45,760
and as you can see this new device is

569
00:20:45,760 --> 00:20:47,360
the ups

570
00:20:47,360 --> 00:20:49,679
and this is the ip

571
00:20:49,679 --> 00:20:51,280
in swiss 28

572
00:20:51,280 --> 00:20:52,240
and

573
00:20:52,240 --> 00:20:55,120
we will launch now the ups attack as we

574
00:20:55,120 --> 00:20:56,320
promised

575
00:20:56,320 --> 00:20:57,200
and

576
00:20:57,200 --> 00:20:59,200
by controlling the switch we control the

577
00:20:59,200 --> 00:21:01,280
layer 2 traffic and by that we can

578
00:21:01,280 --> 00:21:04,400
navigate uh all the uh the the traffic

579
00:21:04,400 --> 00:21:07,840
that goes out of the ups directly to our

580
00:21:07,840 --> 00:21:10,400
uh attacker computer to the cnc

581
00:21:10,400 --> 00:21:13,039
and by and by that we can launch our

582
00:21:13,039 --> 00:21:14,960
authentication bypass attack as as i

583
00:21:14,960 --> 00:21:17,280
showed you and install our malicious

584
00:21:17,280 --> 00:21:18,640
firmware but

585
00:21:18,640 --> 00:21:20,400
this may take up to 10 minutes so i

586
00:21:20,400 --> 00:21:23,280
won't do the do this right now um i

587
00:21:23,280 --> 00:21:27,039
already done it uh earlier today and you

588
00:21:27,039 --> 00:21:28,880
can see the demonstration of the full

589
00:21:28,880 --> 00:21:31,280
installation in our website

590
00:21:31,280 --> 00:21:33,840
um what we do now uh what we did now is

591
00:21:33,840 --> 00:21:35,679
waiting for connection of the malicious

592
00:21:35,679 --> 00:21:38,240
trojan that we installed on the ups

593
00:21:38,240 --> 00:21:40,400
and we can launch the physical attack

594
00:21:40,400 --> 00:21:42,799
now so we will start with the most

595
00:21:42,799 --> 00:21:45,520
obvious attack we'll turn the lamp off

596
00:21:45,520 --> 00:21:47,760
we'll turn all the connected power

597
00:21:47,760 --> 00:21:51,600
supplied devices off as you can see and

598
00:21:51,600 --> 00:21:53,280
this is this might not look dramatic

599
00:21:53,280 --> 00:21:55,440
because we just turned off a lamp here

600
00:21:55,440 --> 00:21:58,080
but imagine that this is the most

601
00:21:58,080 --> 00:21:59,679
important

602
00:21:59,679 --> 00:22:01,840
resources of the entire network that we

603
00:22:01,840 --> 00:22:03,600
just shut down

604
00:22:03,600 --> 00:22:05,280
and

605
00:22:05,280 --> 00:22:07,200
to make it even cooler we will now show

606
00:22:07,200 --> 00:22:09,760
you the overvoltage attack with the

607
00:22:09,760 --> 00:22:13,080
square wave

608
00:22:15,440 --> 00:22:16,400
okay

609
00:22:16,400 --> 00:22:19,200
so as you can see it shines much much

610
00:22:19,200 --> 00:22:20,559
more brighter because of the over

611
00:22:20,559 --> 00:22:22,880
voltage and if you hear

612
00:22:22,880 --> 00:22:26,720
there is a quite annoying sound

613
00:22:26,720 --> 00:22:27,760
from the

614
00:22:27,760 --> 00:22:30,640
from the ups and this is because it is

615
00:22:30,640 --> 00:22:32,720
not supposed to supply such a high

616
00:22:32,720 --> 00:22:34,320
voltage and

617
00:22:34,320 --> 00:22:36,400
not mentioning that it is not

618
00:22:36,400 --> 00:22:39,520
it is not designed to supply a square

619
00:22:39,520 --> 00:22:40,799
waveform

620
00:22:40,799 --> 00:22:43,360
which can damage both the ups itself and

621
00:22:43,360 --> 00:22:45,520
the connected devices as i explained

622
00:22:45,520 --> 00:22:47,520
but now for the joule of the crown let's

623
00:22:47,520 --> 00:22:49,679
toast the ups

624
00:22:49,679 --> 00:22:51,039
and

625
00:22:51,039 --> 00:22:53,360
this is the last attack simply because

626
00:22:53,360 --> 00:22:54,720
the ups

627
00:22:54,720 --> 00:22:57,440
is not going to work after this

628
00:22:57,440 --> 00:23:00,240
do you hear this

629
00:23:01,280 --> 00:23:05,039
so this beep means that

630
00:23:05,039 --> 00:23:07,600
the ups is suffering right now so we

631
00:23:07,600 --> 00:23:10,159
will pray for him together

632
00:23:10,159 --> 00:23:12,480
and

633
00:23:13,200 --> 00:23:16,320
in a minute or so

634
00:23:16,559 --> 00:23:19,919
it's supposed to explode and

635
00:23:19,919 --> 00:23:23,720
be covered in smoke

636
00:23:24,159 --> 00:23:26,960
if it will work

637
00:23:31,840 --> 00:23:34,158
okay

638
00:23:34,320 --> 00:23:35,520
it should happen

639
00:23:35,520 --> 00:23:36,960
any any minute

640
00:23:36,960 --> 00:23:39,600
any second

641
00:23:41,440 --> 00:23:44,000
and right right just before it is

642
00:23:44,000 --> 00:23:45,840
covered with smoke you will hear

643
00:23:45,840 --> 00:23:46,799
a

644
00:23:46,799 --> 00:23:48,400
sound of explosion

645
00:23:48,400 --> 00:23:51,840
not a very loud one but

646
00:23:54,559 --> 00:23:56,559
find cover

647
00:23:56,559 --> 00:23:58,559
that's the the last opportunity for you

648
00:23:58,559 --> 00:24:01,960
to find cover

649
00:24:07,200 --> 00:24:09,679
yeah the air conditioning system is uh

650
00:24:09,679 --> 00:24:12,320
so strong here so it takes okay okay i

651
00:24:12,320 --> 00:24:15,720
can hear that

652
00:24:21,160 --> 00:24:27,200
[Applause]

653
00:24:27,200 --> 00:24:29,039
and you can smell this too i think

654
00:24:29,039 --> 00:24:31,279
because it is not just a regular smoke

655
00:24:31,279 --> 00:24:33,840
it's an electrolyte material

656
00:24:33,840 --> 00:24:36,720
it's really healthy

657
00:24:37,360 --> 00:24:39,679
you have masks so if you don't feel

658
00:24:39,679 --> 00:24:43,400
comfortable with it

659
00:24:51,120 --> 00:24:54,799
okay so basically that's it um

660
00:24:54,799 --> 00:24:56,799
there's going to be more smoke until i

661
00:24:56,799 --> 00:24:58,159
don't know what

662
00:24:58,159 --> 00:25:01,039
we can check together i hope the battery

663
00:25:01,039 --> 00:25:04,279
won't explode

664
00:25:06,300 --> 00:25:11,280
[Applause]

665
00:25:17,279 --> 00:25:20,320
okay that's enough smoke

666
00:25:22,480 --> 00:25:25,919
that's all the effects we need

667
00:25:25,919 --> 00:25:29,360
so after this exciting demo uh which

668
00:25:29,360 --> 00:25:31,120
which you just seen

669
00:25:31,120 --> 00:25:33,120
let's recap uh let's look up how it

670
00:25:33,120 --> 00:25:36,240
looks like in the network perspective

671
00:25:36,240 --> 00:25:38,559
first the attacker will try to enter the

672
00:25:38,559 --> 00:25:40,559
network through the switch and will be

673
00:25:40,559 --> 00:25:44,080
prompted with a captive portal interface

674
00:25:44,080 --> 00:25:46,000
from there they can respond with this

675
00:25:46,000 --> 00:25:48,960
beautiful logo and take over the switch

676
00:25:48,960 --> 00:25:50,320
and just

677
00:25:50,320 --> 00:25:52,799
enter the network without any problems

678
00:25:52,799 --> 00:25:56,640
they can also hop into the internal

679
00:25:56,640 --> 00:25:58,480
um very

680
00:25:58,480 --> 00:26:01,919
secret network and access all sorts of

681
00:26:01,919 --> 00:26:03,679
sensitive information and sensitive

682
00:26:03,679 --> 00:26:04,960
devices

683
00:26:04,960 --> 00:26:07,440
they can also use the same logo to take

684
00:26:07,440 --> 00:26:09,840
over the ups and launch attacks against

685
00:26:09,840 --> 00:26:12,799
connected devices or even the ups itself

686
00:26:12,799 --> 00:26:16,799
as we've just seen live on stage

687
00:26:16,799 --> 00:26:18,240
and

688
00:26:18,240 --> 00:26:20,559
if we if we want to summarize after

689
00:26:20,559 --> 00:26:23,760
these three devices which we've seen

690
00:26:23,760 --> 00:26:25,679
all suffer from a remote core execution

691
00:26:25,679 --> 00:26:28,080
vulnerability that stems from

692
00:26:28,080 --> 00:26:30,400
nano ssl

693
00:26:30,400 --> 00:26:32,799
there are many more users from okana

694
00:26:32,799 --> 00:26:35,840
nano ssl and all of them could possibly

695
00:26:35,840 --> 00:26:37,279
have made the same mistake and could

696
00:26:37,279 --> 00:26:40,320
possibly suffer from the same

697
00:26:40,320 --> 00:26:43,200
simple the same vulnerability and as we

698
00:26:43,200 --> 00:26:46,960
said shared code means shared risk

699
00:26:46,960 --> 00:26:49,360
and if you ask yourself how you can be

700
00:26:49,360 --> 00:26:51,600
protected from such attacks there are

701
00:26:51,600 --> 00:26:53,039
three main paths you can take

702
00:26:53,039 --> 00:26:54,480
simultaneously

703
00:26:54,480 --> 00:26:56,559
the first is of course apply patches

704
00:26:56,559 --> 00:26:58,240
where they are applicable

705
00:26:58,240 --> 00:27:00,400
the second is to minimize that attack

706
00:27:00,400 --> 00:27:02,720
surface when when you can

707
00:27:02,720 --> 00:27:04,799
in our case it means that if you don't

708
00:27:04,799 --> 00:27:07,440
use the smart connect feature of the ups

709
00:27:07,440 --> 00:27:09,440
you should disconnect it

710
00:27:09,440 --> 00:27:11,919
and the last uh thing you can do is to

711
00:27:11,919 --> 00:27:14,320
monitor communication so you can know

712
00:27:14,320 --> 00:27:16,000
which devices you have which are

713
00:27:16,000 --> 00:27:17,200
vulnerable

714
00:27:17,200 --> 00:27:18,400
and if

715
00:27:18,400 --> 00:27:20,799
and be alerted if such an attack

716
00:27:20,799 --> 00:27:23,279
comes your way

717
00:27:23,279 --> 00:27:26,080
and to summarize uh these are our three

718
00:27:26,080 --> 00:27:29,360
main takeaways from this talk

719
00:27:29,360 --> 00:27:31,760
external libraries could be a weak spot

720
00:27:31,760 --> 00:27:34,960
as we said shield code means shared risk

721
00:27:34,960 --> 00:27:37,520
and knowing how to use the library is

722
00:27:37,520 --> 00:27:41,120
just as important as choosing one

723
00:27:41,120 --> 00:27:44,159
security by obscurity is obsolete and

724
00:27:44,159 --> 00:27:46,480
because as we've just seen

725
00:27:46,480 --> 00:27:49,520
closed source and encryption

726
00:27:49,520 --> 00:27:51,520
would not stop the determined the

727
00:27:51,520 --> 00:27:53,679
attackers because the terminal attackers

728
00:27:53,679 --> 00:27:56,080
would always find a way

729
00:27:56,080 --> 00:27:57,919
and lastly

730
00:27:57,919 --> 00:27:59,440
when you design a network you should

731
00:27:59,440 --> 00:28:01,840
take the physical aspect of devices into

732
00:28:01,840 --> 00:28:03,679
account when you consider the security

733
00:28:03,679 --> 00:28:04,720
aspects

734
00:28:04,720 --> 00:28:07,279
because um lateral movement and data

735
00:28:07,279 --> 00:28:10,399
exfiltration are very serious issues but

736
00:28:10,399 --> 00:28:12,640
some devices hold the literal power to

737
00:28:12,640 --> 00:28:14,559
cause damage in ways that are all too

738
00:28:14,559 --> 00:28:17,919
easy to disregard or in other words

739
00:28:17,919 --> 00:28:19,600
thank you all for listening

740
00:28:19,600 --> 00:28:21,360
i hope you take these points into

741
00:28:21,360 --> 00:28:22,640
account

742
00:28:22,640 --> 00:28:26,520
and that's it

743
00:28:32,420 --> 00:28:33,520
[Music]

744
00:28:33,520 --> 00:28:35,600
you

