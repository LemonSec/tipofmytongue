1
00:00:01,740 --> 00:00:03,720
[Music]

2
00:00:03,720 --> 00:00:06,720
foreign

3
00:00:12,380 --> 00:00:15,599
chain and we're going to review some

4
00:00:15,599 --> 00:00:17,520
known hamzi bypass techniques and

5
00:00:17,520 --> 00:00:21,359
introduce new one as with

6
00:00:21,359 --> 00:00:23,460
first of all um I want to say it's a

7
00:00:23,460 --> 00:00:25,320
great honor to be here and thank you for

8
00:00:25,320 --> 00:00:28,939
attending my presentation my name is

9
00:00:28,939 --> 00:00:31,619
I'm a security researcher team leader at

10
00:00:31,619 --> 00:00:34,079
Deep Instinct for the last two years I

11
00:00:34,079 --> 00:00:35,460
previously previously was a

12
00:00:35,460 --> 00:00:37,680
vulnerability researcher and fun fact

13
00:00:37,680 --> 00:00:40,200
I'm supposed to get married in 10 days

14
00:00:40,200 --> 00:00:42,360
if my fiance won't kill me for being

15
00:00:42,360 --> 00:00:44,660
here

16
00:00:44,879 --> 00:00:47,520
agenda for today and we're going to

17
00:00:47,520 --> 00:00:50,160
start with an hamsi overview and I'm the

18
00:00:50,160 --> 00:00:52,680
architecture we'll move on to examine

19
00:00:52,680 --> 00:00:54,539
some amzi bypass techniques no numbers

20
00:00:54,539 --> 00:00:56,520
in bypass techniques and see what

21
00:00:56,520 --> 00:00:57,960
security vendors are trying to do in

22
00:00:57,960 --> 00:00:59,640
order to prevent and detect those

23
00:00:59,640 --> 00:01:02,520
techniques then we'll move on to present

24
00:01:02,520 --> 00:01:04,739
new OMSI bypass techniques and in order

25
00:01:04,739 --> 00:01:06,720
to do so we'll have to Deep dive into

26
00:01:06,720 --> 00:01:10,039
the Amazon internals

27
00:01:10,100 --> 00:01:12,720
anti-marvel scan interface or a song

28
00:01:12,720 --> 00:01:15,119
called OMSI or as I sometimes calls

29
00:01:15,119 --> 00:01:17,520
armsy Dumpty is the interface standout

30
00:01:17,520 --> 00:01:19,140
that allows applications to integrate

31
00:01:19,140 --> 00:01:21,780
with anti-malware products in scriptable

32
00:01:21,780 --> 00:01:23,640
applications for example at the point

33
00:01:23,640 --> 00:01:25,259
when Escape is ready to be supplied to

34
00:01:25,259 --> 00:01:27,540
the scripting engine the implication can

35
00:01:27,540 --> 00:01:29,759
call the windows apis to request the

36
00:01:29,759 --> 00:01:31,439
scan of the content period to its

37
00:01:31,439 --> 00:01:33,000
execution

38
00:01:33,000 --> 00:01:35,600
foreign

39
00:01:35,840 --> 00:01:38,700
is designed so any consumer any

40
00:01:38,700 --> 00:01:40,560
application which is a consumer can

41
00:01:40,560 --> 00:01:42,960
request content to be scanned and any

42
00:01:42,960 --> 00:01:44,939
security vendor which is a provider can

43
00:01:44,939 --> 00:01:47,460
register to receive scan requests

44
00:01:47,460 --> 00:01:50,159
the ossd media mediator it is

45
00:01:50,159 --> 00:01:52,860
implemented as a dll named AMC dll that

46
00:01:52,860 --> 00:01:54,960
must be loaded into any ramzi protected

47
00:01:54,960 --> 00:01:57,500
application

48
00:01:58,159 --> 00:02:00,840
increased adoption and reset use as it

49
00:02:00,840 --> 00:02:02,880
was integrated into many applications

50
00:02:02,880 --> 00:02:05,100
and always components and leveraged by

51
00:02:05,100 --> 00:02:07,020
endpoint solutions to get additional

52
00:02:07,020 --> 00:02:08,940
access and visibility to critical and

53
00:02:08,940 --> 00:02:11,700
widely exploited attack surfaces notably

54
00:02:11,700 --> 00:02:14,640
skipped engines office macros wmi.net

55
00:02:14,640 --> 00:02:17,220
nuc we can see on the left side example

56
00:02:17,220 --> 00:02:19,379
for consumers a Powershell from version

57
00:02:19,379 --> 00:02:22,080
three it's inbuilt consumers that

58
00:02:22,080 --> 00:02:24,599
consume some of these services for today

59
00:02:24,599 --> 00:02:29,400
a JavaScript DBA wmi UAC elevations and

60
00:02:29,400 --> 00:02:31,560
the new ones are Excel forward macros

61
00:02:31,560 --> 00:02:34,080
volume Shadow copies operations and Dot

62
00:02:34,080 --> 00:02:36,480
net in memory assembly lows loads all of

63
00:02:36,480 --> 00:02:38,520
these consumers consumed

64
00:02:38,520 --> 00:02:39,720
um these services

65
00:02:39,720 --> 00:02:41,700
on the right side we can see a security

66
00:02:41,700 --> 00:02:44,519
security vendors that implement the

67
00:02:44,519 --> 00:02:46,800
providers such as Microsoft Defender

68
00:02:46,800 --> 00:02:51,060
deep Instinct Sentinel one and so on

69
00:02:51,060 --> 00:02:53,220
beside from the building consumers any

70
00:02:53,220 --> 00:02:56,040
developer can choose to consume the OMSI

71
00:02:56,040 --> 00:02:58,080
Services what he needs to do is

72
00:02:58,080 --> 00:03:01,260
basically to load in the AMC dll into

73
00:03:01,260 --> 00:03:03,420
his memory space and course several

74
00:03:03,420 --> 00:03:06,300
several exports several functions this

75
00:03:06,300 --> 00:03:08,640
dll declares we're going to talk today

76
00:03:08,640 --> 00:03:11,099
about the initialize empty Open Session

77
00:03:11,099 --> 00:03:12,780
I'm just getting buffer and some more

78
00:03:12,780 --> 00:03:15,480
exports and initialize is a function

79
00:03:15,480 --> 00:03:18,120
that initializes for us and the Open

80
00:03:18,120 --> 00:03:21,360
Session opens a new AMD session and scan

81
00:03:21,360 --> 00:03:24,060
buffer scan buffer full of content for

82
00:03:24,060 --> 00:03:26,840
malicious indicators

83
00:03:26,840 --> 00:03:29,400
will return and I'm the result the

84
00:03:29,400 --> 00:03:32,099
values of the arms result can vary but

85
00:03:32,099 --> 00:03:33,840
the most important one of them are the

86
00:03:33,840 --> 00:03:36,060
OMSI result clean and the resultant

87
00:03:36,060 --> 00:03:38,519
detected and arms result detected which

88
00:03:38,519 --> 00:03:40,319
indicates that the malicious malicious

89
00:03:40,319 --> 00:03:43,339
indicator was found

90
00:03:49,379 --> 00:03:51,180
the process memory layout of an empty

91
00:03:51,180 --> 00:03:53,040
protected application will look like

92
00:03:53,040 --> 00:03:55,379
this will always look like this amphi

93
00:03:55,379 --> 00:03:56,879
there is going to be loaded into the

94
00:03:56,879 --> 00:03:59,640
memory space and a stock named Angels

95
00:03:59,640 --> 00:04:02,340
the context need to be initialized

96
00:04:02,340 --> 00:04:05,099
every time we want to initialize the AMD

97
00:04:05,099 --> 00:04:06,540
Services we need to call the Amazon

98
00:04:06,540 --> 00:04:09,299
initialize initialize export it received

99
00:04:09,299 --> 00:04:11,159
two parameters the application name

100
00:04:11,159 --> 00:04:13,319
that's going to consume the OMG services

101
00:04:13,319 --> 00:04:16,019
and the reference to the agency context

102
00:04:16,019 --> 00:04:18,418
structure this structure going to hold

103
00:04:18,418 --> 00:04:20,940
four attributes signature application

104
00:04:20,940 --> 00:04:24,900
name antimatter and session count

105
00:04:24,900 --> 00:04:26,940
after Ramsay initialize was called it's

106
00:04:26,940 --> 00:04:29,160
going to fill these attributes with the

107
00:04:29,160 --> 00:04:31,320
appropriate values the signature will

108
00:04:31,320 --> 00:04:34,680
always be amsi which identifies distract

109
00:04:34,680 --> 00:04:37,139
in memory the application name is going

110
00:04:37,139 --> 00:04:38,460
to be the application name that was

111
00:04:38,460 --> 00:04:41,100
received as a parameter and T-Mobile is

112
00:04:41,100 --> 00:04:42,900
going to be an instance of a class named

113
00:04:42,900 --> 00:04:46,320
CMZ antimatter we're going to see deeper

114
00:04:46,320 --> 00:04:49,259
later lately how it works and the

115
00:04:49,259 --> 00:04:50,759
session count is going to be a random

116
00:04:50,759 --> 00:04:52,940
number

117
00:04:53,100 --> 00:04:55,500
each time we want to make a scan request

118
00:04:55,500 --> 00:04:58,080
when the developer needs to call a

119
00:04:58,080 --> 00:05:00,900
function named OMG buffer it receives

120
00:05:00,900 --> 00:05:03,600
the context the content it's going to

121
00:05:03,600 --> 00:05:05,820
that we want to scan and the reference

122
00:05:05,820 --> 00:05:08,759
to and I'm the result as we already see

123
00:05:08,759 --> 00:05:11,580
at each time we're going to make a scale

124
00:05:11,580 --> 00:05:13,919
request and this can buffer is going to

125
00:05:13,919 --> 00:05:16,560
call a function named scan the declared

126
00:05:16,560 --> 00:05:19,199
by the c um the until malware class and

127
00:05:19,199 --> 00:05:20,759
this function is going to Loop to all

128
00:05:20,759 --> 00:05:22,440
the providers that are installed in the

129
00:05:22,440 --> 00:05:24,479
machine and call another function the

130
00:05:24,479 --> 00:05:27,900
exports which also named scan

131
00:05:27,900 --> 00:05:30,780
again we're going to see how this

132
00:05:30,780 --> 00:05:33,180
process works much deeper lately in the

133
00:05:33,180 --> 00:05:35,539
presentation

134
00:05:35,759 --> 00:05:38,820
so now we cover the alarms architecture

135
00:05:38,820 --> 00:05:41,340
looks like and we'll move on to examine

136
00:05:41,340 --> 00:05:43,320
some harmsy bypass techniques and see

137
00:05:43,320 --> 00:05:44,880
what security vendors are trying to do

138
00:05:44,880 --> 00:05:46,500
to prevent and detect from those

139
00:05:46,500 --> 00:05:49,039
techniques

140
00:05:49,320 --> 00:05:50,759
but first let's talk about the attack

141
00:05:50,759 --> 00:05:53,160
surface let's say we're an attacker that

142
00:05:53,160 --> 00:05:55,620
wants our bed content to be executed

143
00:05:55,620 --> 00:05:58,320
without being blocked in the most basic

144
00:05:58,320 --> 00:06:00,360
form of I'm the provider the anti-marvel

145
00:06:00,360 --> 00:06:02,160
vendor can make a list of any load

146
00:06:02,160 --> 00:06:05,039
strings which are malicious strings and

147
00:06:05,039 --> 00:06:06,539
detective the content that is going to

148
00:06:06,539 --> 00:06:08,759
be scanned contains one of this

149
00:06:08,759 --> 00:06:10,740
substring one of these malicious stuff

150
00:06:10,740 --> 00:06:11,580
things

151
00:06:11,580 --> 00:06:14,400
in this case the attacker can basically

152
00:06:14,400 --> 00:06:16,800
try to manipulate obfuscate or encode

153
00:06:16,800 --> 00:06:18,660
these strings in order to bypass the

154
00:06:18,660 --> 00:06:20,820
provider's checks we can take a look on

155
00:06:20,820 --> 00:06:22,380
the right side this is the provider

156
00:06:22,380 --> 00:06:24,900
implementation of Microsoft Defender and

157
00:06:24,900 --> 00:06:26,819
as we can see when we try to run invoke

158
00:06:26,819 --> 00:06:28,560
mimikats it's going to be blocked

159
00:06:28,560 --> 00:06:30,360
because it contains the mimikat stop

160
00:06:30,360 --> 00:06:33,300
string but if we split the string into

161
00:06:33,300 --> 00:06:35,759
invoke meme cuts the command is going to

162
00:06:35,759 --> 00:06:37,500
be executed but it will pass the

163
00:06:37,500 --> 00:06:39,960
provider's checks this is basically not

164
00:06:39,960 --> 00:06:42,840
an amazing bypass but it providers scan

165
00:06:42,840 --> 00:06:44,880
bypass that won't surely bypass all the

166
00:06:44,880 --> 00:06:47,160
providers in the market

167
00:06:47,160 --> 00:06:49,400
foreign

168
00:06:52,039 --> 00:06:54,660
limitations and is based on scanning

169
00:06:54,660 --> 00:06:56,039
each screen block that is going to be

170
00:06:56,039 --> 00:06:58,380
executed that means that if the script

171
00:06:58,380 --> 00:07:00,360
was generated at runtime and went to

172
00:07:00,360 --> 00:07:02,460
several phases of the obfuscation like

173
00:07:02,460 --> 00:07:04,740
when InFocus caching is being used

174
00:07:04,740 --> 00:07:06,419
and each execution is going to be

175
00:07:06,419 --> 00:07:07,680
scanned

176
00:07:07,680 --> 00:07:09,720
a much more powerful option for an

177
00:07:09,720 --> 00:07:12,060
attacker will be to disable Ramsey and

178
00:07:12,060 --> 00:07:14,100
free himself from the provider's checks

179
00:07:14,100 --> 00:07:17,300
for the rest of the execution

180
00:07:17,940 --> 00:07:19,680
what we need to do in order to disable

181
00:07:19,680 --> 00:07:22,440
OMSI hamsi is built as a chain of three

182
00:07:22,440 --> 00:07:25,139
components the consumer the consumers

183
00:07:25,139 --> 00:07:27,539
they provide the the mediator which is

184
00:07:27,539 --> 00:07:30,360
the mcdll and the providers if you want

185
00:07:30,360 --> 00:07:32,160
to disable Ramsay all we need to do is

186
00:07:32,160 --> 00:07:34,680
to break one of the links in this chain

187
00:07:34,680 --> 00:07:36,240
breaking is possible because the

188
00:07:36,240 --> 00:07:37,860
attacker runs in the same memory space

189
00:07:37,860 --> 00:07:41,660
with all of the AMC components

190
00:07:41,759 --> 00:07:43,259
the first link in the chain is the

191
00:07:43,259 --> 00:07:44,400
consumer

192
00:07:44,400 --> 00:07:46,979
each inch consumer implements code that

193
00:07:46,979 --> 00:07:49,919
consumes the arms DMZ services

194
00:07:49,919 --> 00:07:52,319
if if an attacker can reverse this code

195
00:07:52,319 --> 00:07:54,780
and understand how the consumer works it

196
00:07:54,780 --> 00:07:56,400
might be able to interfere with the scan

197
00:07:56,400 --> 00:07:57,960
requests that are going to be made by

198
00:07:57,960 --> 00:07:59,940
the consumer

199
00:07:59,940 --> 00:08:01,919
the example we are going to talk about

200
00:08:01,919 --> 00:08:03,960
today and that will accompany us for the

201
00:08:03,960 --> 00:08:06,900
rest of the presentation it's Powershell

202
00:08:06,900 --> 00:08:08,819
and it's one of the most obvious

203
00:08:08,819 --> 00:08:11,280
examples a partial implements is

204
00:08:11,280 --> 00:08:13,139
something consuming code components as a

205
00:08:13,139 --> 00:08:15,660
class named amzi utils each time Escape

206
00:08:15,660 --> 00:08:17,460
block is compiled and just before it's

207
00:08:17,460 --> 00:08:19,500
going to be executed Powershell calls

208
00:08:19,500 --> 00:08:20,819
the function name it performs Security

209
00:08:20,819 --> 00:08:24,000
checks we can see it on the right side

210
00:08:24,000 --> 00:08:27,780
this is the used by feature in dnspy

211
00:08:27,780 --> 00:08:29,580
this function passes the skip block

212
00:08:29,580 --> 00:08:31,800
content to another function named scan

213
00:08:31,800 --> 00:08:34,140
content that is responsible for the OMG

214
00:08:34,140 --> 00:08:36,120
checks now we can take a look at the

215
00:08:36,120 --> 00:08:38,279
scan content function we see that in

216
00:08:38,279 --> 00:08:39,599
this in the start of this function is

217
00:08:39,599 --> 00:08:41,880
going to refer a variable name arms init

218
00:08:41,880 --> 00:08:44,219
field if this variable is 2 we're going

219
00:08:44,219 --> 00:08:45,839
to return on the result not detected

220
00:08:45,839 --> 00:08:48,860
without even going to scan the buffer

221
00:08:48,860 --> 00:08:51,839
afterwards we will refer the function is

222
00:08:51,839 --> 00:08:53,519
going to refer another variable name

223
00:08:53,519 --> 00:08:55,560
times the context if it's null it's

224
00:08:55,560 --> 00:08:57,360
going to try to initialize amsi again

225
00:08:57,360 --> 00:09:00,420
and if the initialization process fails

226
00:09:00,420 --> 00:09:02,220
it's going to set something it failed

227
00:09:02,220 --> 00:09:04,440
again to true and return answer is not

228
00:09:04,440 --> 00:09:06,600
detected I'm saying it's fail viable

229
00:09:06,600 --> 00:09:07,920
really means that the arms

230
00:09:07,920 --> 00:09:09,959
initialization process has failed so

231
00:09:09,959 --> 00:09:13,200
this is the purpose of this variable

232
00:09:13,200 --> 00:09:15,480
it does the same for AMD session and the

233
00:09:15,480 --> 00:09:16,860
Open Session and after all this

234
00:09:16,860 --> 00:09:19,260
preparation is going to finally scan the

235
00:09:19,260 --> 00:09:21,660
a buffer by calling on this game buffer

236
00:09:21,660 --> 00:09:23,160
that we've seen earlier

237
00:09:23,160 --> 00:09:25,680
if the process fails it's going to

238
00:09:25,680 --> 00:09:27,660
return Ram the result not detected and

239
00:09:27,660 --> 00:09:31,140
if it if it doesn't fail then it's going

240
00:09:31,140 --> 00:09:34,819
to return the appropriate arms result

241
00:09:35,640 --> 00:09:37,380
one of the first introduced on the

242
00:09:37,380 --> 00:09:39,000
bypass techniques was published by Mike

243
00:09:39,000 --> 00:09:41,760
Graber with the one line MD bypass

244
00:09:41,760 --> 00:09:44,040
script he was able to take advantage of

245
00:09:44,040 --> 00:09:46,019
the powerful of the power of reflection

246
00:09:46,019 --> 00:09:49,800
and perform direct access to Dr initial

247
00:09:49,800 --> 00:09:52,860
viable and basically state it is true if

248
00:09:52,860 --> 00:09:55,140
we take a look two slides before we can

249
00:09:55,140 --> 00:09:57,180
see that when I'm saying it felt is true

250
00:09:57,180 --> 00:09:59,580
then the scan request is not going to be

251
00:09:59,580 --> 00:10:01,380
made and it's just going to return I'm

252
00:10:01,380 --> 00:10:03,420
the result not detected no matter what

253
00:10:03,420 --> 00:10:06,899
content was going to be scanned

254
00:10:06,899 --> 00:10:09,779
another variant of this attack is to set

255
00:10:09,779 --> 00:10:11,940
up the session available to null and

256
00:10:11,940 --> 00:10:14,640
corrupt DMZ context which mean we will

257
00:10:14,640 --> 00:10:17,459
eat the first if statement in the slide

258
00:10:17,459 --> 00:10:19,440
we'll see that on this session is now

259
00:10:19,440 --> 00:10:21,120
and we'll try to call on the Open

260
00:10:21,120 --> 00:10:23,640
Session but it will fail because I'm the

261
00:10:23,640 --> 00:10:25,680
context is going to be corrupted and

262
00:10:25,680 --> 00:10:26,940
again I'm saying it 12 is going to be

263
00:10:26,940 --> 00:10:28,980
set to true and we turn on the result

264
00:10:28,980 --> 00:10:30,959
not detected

265
00:10:30,959 --> 00:10:32,399
which means Escape is going to be

266
00:10:32,399 --> 00:10:35,339
executed no matter what content was in

267
00:10:35,339 --> 00:10:37,260
it

268
00:10:37,260 --> 00:10:39,959
so what can security vendors do the

269
00:10:39,959 --> 00:10:41,880
first option is to.net set value

270
00:10:41,880 --> 00:10:44,700
function and prevent any direct access

271
00:10:44,700 --> 00:10:47,339
to Amazon it failed um the session or um

272
00:10:47,339 --> 00:10:49,680
the context another option is to hook

273
00:10:49,680 --> 00:10:51,839
the pre and post three blocked execution

274
00:10:51,839 --> 00:10:53,940
functions there is a possibility to do

275
00:10:53,940 --> 00:10:56,820
so and detect any change in the arms in

276
00:10:56,820 --> 00:10:59,220
it field viable from false to true that

277
00:10:59,220 --> 00:11:01,380
wasn't caused by a arms in uninitialize

278
00:11:01,380 --> 00:11:03,899
which means that something is something

279
00:11:03,899 --> 00:11:06,980
fishy has happened

280
00:11:07,860 --> 00:11:10,140
now let's move to the next Link in the

281
00:11:10,140 --> 00:11:12,360
chain I'm the dll this is a major

282
00:11:12,360 --> 00:11:14,899
component if I'm seeing it's an OS

283
00:11:14,899 --> 00:11:18,120
implemented dll and its function is the

284
00:11:18,120 --> 00:11:20,100
connector a connector between the manage

285
00:11:20,100 --> 00:11:22,800
the MZ application and the Chrome

286
00:11:22,800 --> 00:11:26,060
anti-malware providers

287
00:11:26,339 --> 00:11:28,560
the first option to break this link in

288
00:11:28,560 --> 00:11:31,320
the chain can be done by code patching

289
00:11:31,320 --> 00:11:33,360
and this can buffer as we've seen is the

290
00:11:33,360 --> 00:11:35,220
function that is implemented by the AMC

291
00:11:35,220 --> 00:11:39,120
dll as an export of mctl and it's and is

292
00:11:39,120 --> 00:11:41,760
responsible for scaling a buffer what we

293
00:11:41,760 --> 00:11:43,680
can do is patch any part of this

294
00:11:43,680 --> 00:11:46,019
function on or any other code components

295
00:11:46,019 --> 00:11:47,519
that are being called by this function

296
00:11:47,519 --> 00:11:50,339
in order to make it fail without filling

297
00:11:50,339 --> 00:11:53,480
the appropriate arm's result

298
00:11:53,579 --> 00:11:55,560
so another Viper script that was

299
00:11:55,560 --> 00:11:57,300
published by rastama Austin is also

300
00:11:57,300 --> 00:11:59,399
implemented in Powershell as we as you

301
00:11:59,399 --> 00:12:01,459
see this is the most popular

302
00:12:01,459 --> 00:12:03,420
implementation of Pharmacy bypass

303
00:12:03,420 --> 00:12:05,459
techniques but it doesn't really have to

304
00:12:05,459 --> 00:12:06,959
be Powershell it can be any other

305
00:12:06,959 --> 00:12:09,000
protected application

306
00:12:09,000 --> 00:12:11,279
is to basically call a type

307
00:12:11,279 --> 00:12:13,019
functionality in order to be able to

308
00:12:13,019 --> 00:12:15,300
call windows apis we don't necessarily

309
00:12:15,300 --> 00:12:17,820
have to call a type but there's other

310
00:12:17,820 --> 00:12:20,160
options to call windows apis but we

311
00:12:20,160 --> 00:12:21,660
won't cover them today

312
00:12:21,660 --> 00:12:24,300
and so in the first line we're going to

313
00:12:24,300 --> 00:12:26,940
get an angle to the mcdll and then find

314
00:12:26,940 --> 00:12:29,640
the Poke address of armscan buffer then

315
00:12:29,640 --> 00:12:31,740
we'll change the protection of the page

316
00:12:31,740 --> 00:12:33,660
where on the screen buffer resides in

317
00:12:33,660 --> 00:12:36,720
and then we'll reach the final stage

318
00:12:36,720 --> 00:12:38,880
when we'll copy the patch and Patch the

319
00:12:38,880 --> 00:12:40,560
product by itself from the skin buffer

320
00:12:40,560 --> 00:12:42,660
so they will return invalid argument

321
00:12:42,660 --> 00:12:45,480
this is basically the op codes that are

322
00:12:45,480 --> 00:12:47,100
written in the slide

323
00:12:47,100 --> 00:12:49,860
in this case a anti-skin buffer is going

324
00:12:49,860 --> 00:12:51,720
to fail and return without filling the

325
00:12:51,720 --> 00:12:55,079
appropriate on the result and as so the

326
00:12:55,079 --> 00:12:59,120
script is going to be allowed to execute

327
00:12:59,160 --> 00:13:01,740
another option to break this link is the

328
00:13:01,740 --> 00:13:04,620
chain is to use the a data patching

329
00:13:04,620 --> 00:13:08,220
option and if we take a look at the scan

330
00:13:08,220 --> 00:13:10,200
buffer we can see that it is start of

331
00:13:10,200 --> 00:13:12,660
the function it validates the content of

332
00:13:12,660 --> 00:13:15,779
the OMSI context amsi context is best is

333
00:13:15,779 --> 00:13:18,060
passed to Um this can buffer as a

334
00:13:18,060 --> 00:13:20,399
parameter and if we will be able to

335
00:13:20,399 --> 00:13:22,740
corrupt them the context we will be able

336
00:13:22,740 --> 00:13:24,600
to interfere with any scale request

337
00:13:24,600 --> 00:13:27,180
because as we see on the right side and

338
00:13:27,180 --> 00:13:28,980
it's not going to perform the scan

339
00:13:28,980 --> 00:13:32,160
request if this Con if this structure is

340
00:13:32,160 --> 00:13:33,480
corrupted

341
00:13:33,480 --> 00:13:36,180
what we can do in order to find this

342
00:13:36,180 --> 00:13:39,060
structure in memory it's not so reliable

343
00:13:39,060 --> 00:13:41,959
but we can try to find the amsi

344
00:13:41,959 --> 00:13:44,940
signature or finding a global pointer

345
00:13:44,940 --> 00:13:46,860
that will point to this signature but

346
00:13:46,860 --> 00:13:49,740
again this is not such an reliable or

347
00:13:49,740 --> 00:13:52,760
easy techniques to do

348
00:13:53,519 --> 00:13:56,519
so what security vendors are currently

349
00:13:56,519 --> 00:13:57,300
doing

350
00:13:57,300 --> 00:14:00,420
a Microsoft Defender OMG provider choose

351
00:14:00,420 --> 00:14:02,880
to handle these zombie bypass techniques

352
00:14:02,880 --> 00:14:05,399
by declaring that each string that are

353
00:14:05,399 --> 00:14:07,380
connected to this bypass techniques is

354
00:14:07,380 --> 00:14:10,019
malicious like um this can buffer as

355
00:14:10,019 --> 00:14:11,579
well as zombies can string out their

356
00:14:11,579 --> 00:14:13,500
movement memory copy memory of the utils

357
00:14:13,500 --> 00:14:16,139
and so on an attacker can bypass these

358
00:14:16,139 --> 00:14:18,120
restrictions by finding a function

359
00:14:18,120 --> 00:14:20,639
addresses of Name by names of neighbor

360
00:14:20,639 --> 00:14:23,339
functions scan memory for code patterns

361
00:14:23,339 --> 00:14:28,040
or even even dynamically passed the ldr

362
00:14:28,440 --> 00:14:30,600
a better approach of security vendors

363
00:14:30,600 --> 00:14:32,940
will be to monitor any permission change

364
00:14:32,940 --> 00:14:35,820
of any page inside the code section of

365
00:14:35,820 --> 00:14:38,820
AMC dll and in order to handle the data

366
00:14:38,820 --> 00:14:41,820
patching we can try to hook on the scan

367
00:14:41,820 --> 00:14:43,980
buffer and basically scan between any

368
00:14:43,980 --> 00:14:46,800
scan request that make sure that Anthony

369
00:14:46,800 --> 00:14:51,060
DMC content context wasn't changed and

370
00:14:51,060 --> 00:14:54,959
besides in the this is equal to the AMC

371
00:14:54,959 --> 00:14:56,459
context that was initialized in arms

372
00:14:56,459 --> 00:14:59,000
initialize

373
00:14:59,820 --> 00:15:02,279
The Last Link in the chain is the um the

374
00:15:02,279 --> 00:15:04,260
providers this is the code that's

375
00:15:04,260 --> 00:15:06,720
responsible to scan the content and that

376
00:15:06,720 --> 00:15:09,180
was supplied to it by the consumer and

377
00:15:09,180 --> 00:15:11,940
decide if it's malicious or not

378
00:15:11,940 --> 00:15:14,220
in order to be able to register a

379
00:15:14,220 --> 00:15:16,339
provider any AMD provider needs to

380
00:15:16,339 --> 00:15:19,680
create a sales ID entry in the hklm

381
00:15:19,680 --> 00:15:23,100
software classes CLS ID registry key and

382
00:15:23,100 --> 00:15:25,860
registering the same sales ID in hqlm

383
00:15:25,860 --> 00:15:28,459
software Microsoft mg providers

384
00:15:28,459 --> 00:15:31,320
is initialized in the OS process it will

385
00:15:31,320 --> 00:15:33,360
enumerate each series id listed in the

386
00:15:33,360 --> 00:15:35,459
provider statistic key and initialize

387
00:15:35,459 --> 00:15:37,860
the com object by importing the dll in

388
00:15:37,860 --> 00:15:39,920
the input server sub key

389
00:15:39,920 --> 00:15:45,240
in the hklm software classes CLS ID if

390
00:15:45,240 --> 00:15:46,680
you want to sum it up you can take a

391
00:15:46,680 --> 00:15:49,380
look at the picture on the bottom you

392
00:15:49,380 --> 00:15:51,420
can see that the inbox server sub key

393
00:15:51,420 --> 00:15:53,579
this is basically the series id of

394
00:15:53,579 --> 00:15:56,940
Microsoft Defender implementation of AMD

395
00:15:56,940 --> 00:15:59,579
provider we can see that it declares a

396
00:15:59,579 --> 00:16:02,940
sub key named inbox server 32 and this

397
00:16:02,940 --> 00:16:06,779
sub key lists the paths of the dll this

398
00:16:06,779 --> 00:16:10,019
is basically the AMD provider itself it

399
00:16:10,019 --> 00:16:12,660
contains all the code and all the things

400
00:16:12,660 --> 00:16:16,939
that that are relevant to this provider

401
00:16:17,660 --> 00:16:20,160
HMC provider that wants to supply

402
00:16:20,160 --> 00:16:22,440
anti-malvel Services needs to implement

403
00:16:22,440 --> 00:16:26,820
an interface named int Marvel provider

404
00:16:26,820 --> 00:16:28,980
this interface declares three functions

405
00:16:28,980 --> 00:16:31,740
scan closed session and display name and

406
00:16:31,740 --> 00:16:33,180
this is basically

407
00:16:33,180 --> 00:16:35,880
um the most the main principle of

408
00:16:35,880 --> 00:16:40,220
Pharmacy the ability to scan content

409
00:16:41,040 --> 00:16:42,899
if you want to break the last link in

410
00:16:42,899 --> 00:16:45,779
the chain and the only note the

411
00:16:45,779 --> 00:16:47,820
techniques that are existing right now

412
00:16:47,820 --> 00:16:50,220
is to use com server hijacking which

413
00:16:50,220 --> 00:16:53,040
means to go to this specific registry

414
00:16:53,040 --> 00:16:55,500
key and modify the path of the dealer so

415
00:16:55,500 --> 00:16:57,480
it will point to a corrupted dll that

416
00:16:57,480 --> 00:17:00,060
won't function as the same amzi provider

417
00:17:00,060 --> 00:17:02,479
dealer

418
00:17:08,119 --> 00:17:10,679
bypass techniques have popped up like

419
00:17:10,679 --> 00:17:12,380
mushrooms after rain

420
00:17:12,380 --> 00:17:15,119
researchers have noticed that Powershell

421
00:17:15,119 --> 00:17:16,980
version 2 is still available to use in

422
00:17:16,980 --> 00:17:18,959
modern Windows machines although it

423
00:17:18,959 --> 00:17:21,359
predates OMSI there is also possibility

424
00:17:21,359 --> 00:17:24,260
to use any other old version of Finance

425
00:17:24,260 --> 00:17:27,000
protected application that doesn't use

426
00:17:27,000 --> 00:17:30,540
OMSI there is also an option to use DLI

427
00:17:30,540 --> 00:17:33,120
Jack of the AMC dealer copy an instance

428
00:17:33,120 --> 00:17:34,919
of the AMC protect application to

429
00:17:34,919 --> 00:17:37,320
another folder which the which contains

430
00:17:37,320 --> 00:17:41,100
the corrupted mcdll and then this this

431
00:17:41,100 --> 00:17:43,740
application is going to load the AMC dll

432
00:17:43,740 --> 00:17:46,080
in this co-opted down the detail instead

433
00:17:46,080 --> 00:17:47,760
of the original one

434
00:17:47,760 --> 00:17:49,980
we can also try to compile our own

435
00:17:49,980 --> 00:17:52,140
version of the DMZ protected application

436
00:17:52,140 --> 00:17:54,900
and without the amsy calls another

437
00:17:54,900 --> 00:17:56,880
option that is not listed here is

438
00:17:56,880 --> 00:17:59,100
implemented by shell block and it is to

439
00:17:59,100 --> 00:18:01,620
put an outboard breakpoint on the OMG

440
00:18:01,620 --> 00:18:03,539
scan buffer function and when the

441
00:18:03,539 --> 00:18:05,520
breakpoint will hit to revoke the code

442
00:18:05,520 --> 00:18:08,820
outside of this can buffer all of these

443
00:18:08,820 --> 00:18:10,740
techniques are known and can be detected

444
00:18:10,740 --> 00:18:14,360
by some security vendors

445
00:18:14,880 --> 00:18:16,200
so

446
00:18:16,200 --> 00:18:18,240
um we've reached the second part of the

447
00:18:18,240 --> 00:18:20,039
presentation when we're going to show

448
00:18:20,039 --> 00:18:22,740
the new bypass techniques in order to

449
00:18:22,740 --> 00:18:24,780
show them we'll have to also Deep dive

450
00:18:24,780 --> 00:18:28,100
into the internals

451
00:18:28,440 --> 00:18:30,960
the new techniques are basically going

452
00:18:30,960 --> 00:18:32,059
to

453
00:18:32,059 --> 00:18:35,400
be touched an unmonitored memory outside

454
00:18:35,400 --> 00:18:37,740
the AMC dll area the providers

455
00:18:37,740 --> 00:18:40,220
themselves

456
00:18:40,740 --> 00:18:42,179
but before we're going to show them

457
00:18:42,179 --> 00:18:44,940
let's go back to Arms initialize

458
00:18:44,940 --> 00:18:47,280
any function that wants to use on these

459
00:18:47,280 --> 00:18:49,980
Services must first columns initialize

460
00:18:49,980 --> 00:18:51,539
before we continue I want to mention the

461
00:18:51,539 --> 00:18:53,580
dams the detail is undocumented so all

462
00:18:53,580 --> 00:18:55,820
the code we are going to see right now

463
00:18:55,820 --> 00:18:58,799
was reverse engineered and are

464
00:18:58,799 --> 00:19:00,660
simplified for reasons of convenience

465
00:19:00,660 --> 00:19:03,660
and understanding and bear with me it's

466
00:19:03,660 --> 00:19:06,960
going to be a little tough

467
00:19:06,960 --> 00:19:09,539
and this is how arms initialized look

468
00:19:09,539 --> 00:19:10,380
like

469
00:19:10,380 --> 00:19:13,020
first of all it's going to refer the

470
00:19:13,020 --> 00:19:15,120
first RTD attribute in the Ramsay

471
00:19:15,120 --> 00:19:18,600
context and set it to amsi string the

472
00:19:18,600 --> 00:19:20,280
signature attribute

473
00:19:20,280 --> 00:19:22,020
then it will refer the app name

474
00:19:22,020 --> 00:19:24,179
attribute and set it to the application

475
00:19:24,179 --> 00:19:27,840
name that is it received as a parameter

476
00:19:27,840 --> 00:19:29,880
it will also say the session count to

477
00:19:29,880 --> 00:19:31,860
random number a random number and in

478
00:19:31,860 --> 00:19:34,020
order to fill the antimatter attribute

479
00:19:34,020 --> 00:19:35,700
it's we're going to create a new

480
00:19:35,700 --> 00:19:38,460
instance of an interface named int

481
00:19:38,460 --> 00:19:40,740
malware

482
00:19:40,740 --> 00:19:41,580
foreign

483
00:19:41,580 --> 00:19:43,140
when we're going to create a new

484
00:19:43,140 --> 00:19:44,400
instance of the internet if this

485
00:19:44,400 --> 00:19:46,140
interface we're going to result in

486
00:19:46,140 --> 00:19:48,299
creating a new instance of a class named

487
00:19:48,299 --> 00:19:50,460
CMZ anti-malware

488
00:19:50,460 --> 00:19:52,980
distance class implements the eye

489
00:19:52,980 --> 00:19:56,039
anti-malware interface and so so on it

490
00:19:56,039 --> 00:19:59,039
so it must also declare two functions

491
00:19:59,039 --> 00:20:02,340
closed session and scan and like we said

492
00:20:02,340 --> 00:20:04,140
the news instance of this class is going

493
00:20:04,140 --> 00:20:06,000
to be assigned to the antimatter

494
00:20:06,000 --> 00:20:09,679
attribute of the Omni context

495
00:20:10,140 --> 00:20:12,600
during the construction of the CMZ

496
00:20:12,600 --> 00:20:15,419
anti-marvel class a function name the

497
00:20:15,419 --> 00:20:17,100
final construct is going to be called

498
00:20:17,100 --> 00:20:19,080
and this function is going to call

499
00:20:19,080 --> 00:20:21,240
another function named omzi com create

500
00:20:21,240 --> 00:20:23,059
providers

501
00:20:23,059 --> 00:20:25,200
providers is going to receive it as a

502
00:20:25,200 --> 00:20:26,640
parameter is going to receive multiple

503
00:20:26,640 --> 00:20:28,919
parameters the first parameter and the

504
00:20:28,919 --> 00:20:31,380
most important one of them is another

505
00:20:31,380 --> 00:20:33,840
attribute of the CMZ antimatter class

506
00:20:33,840 --> 00:20:36,360
and this attribute is going to all the

507
00:20:36,360 --> 00:20:37,860
list of all the providers that are

508
00:20:37,860 --> 00:20:40,820
installed in the machine

509
00:20:41,280 --> 00:20:44,520
create providers looks like this it's

510
00:20:44,520 --> 00:20:46,440
going to it's very intuitive it's going

511
00:20:46,440 --> 00:20:49,980
to enum the all the sub keys under the

512
00:20:49,980 --> 00:20:51,840
software Microsoft company provider

513
00:20:51,840 --> 00:20:54,539
registry key all the sales IDs that are

514
00:20:54,539 --> 00:20:57,000
mentioned in this registry key

515
00:20:57,000 --> 00:21:01,740
and the max number of them are 16. and

516
00:21:01,740 --> 00:21:03,660
for each list ID it's going to call

517
00:21:03,660 --> 00:21:05,820
another function named amsicom secure

518
00:21:05,820 --> 00:21:07,980
loading POG server that received two

519
00:21:07,980 --> 00:21:10,380
parameters the CLS ID that we want to

520
00:21:10,380 --> 00:21:12,960
load and a pointer that would represent

521
00:21:12,960 --> 00:21:14,400
the provider

522
00:21:14,400 --> 00:21:17,220
this pointer that we're going to give as

523
00:21:17,220 --> 00:21:19,320
a parameter is going to be assigned

524
00:21:19,320 --> 00:21:22,080
later later to the the anti-marual

525
00:21:22,080 --> 00:21:24,419
providers list that are being held by

526
00:21:24,419 --> 00:21:28,340
the CMZ anti-marvel class

527
00:21:31,159 --> 00:21:34,200
server looks like this

528
00:21:34,200 --> 00:21:36,900
um it's if we if you listened in the

529
00:21:36,900 --> 00:21:39,600
last slides you can really assume what

530
00:21:39,600 --> 00:21:43,740
it's going to do really guess and it's

531
00:21:43,740 --> 00:21:46,620
going to end on the software classes CLS

532
00:21:46,620 --> 00:21:49,799
ID registry key and find in this

533
00:21:49,799 --> 00:21:52,559
registry key for retail Sid the sub key

534
00:21:52,559 --> 00:21:55,559
named inbox server 3032

535
00:21:55,559 --> 00:21:58,320
we've seen that this sub key holds the

536
00:21:58,320 --> 00:22:01,380
paths of the delay of DMZ provider then

537
00:22:01,380 --> 00:22:03,600
we're going to load this dll and call an

538
00:22:03,600 --> 00:22:06,059
export that it defines the name delay

539
00:22:06,059 --> 00:22:08,840
get class object

540
00:22:08,840 --> 00:22:11,340
class object obtains the pointer to

541
00:22:11,340 --> 00:22:14,340
Providers comma i-class Factory object

542
00:22:14,340 --> 00:22:15,900
then we're going to create a new

543
00:22:15,900 --> 00:22:17,760
instance of an object that implements

544
00:22:17,760 --> 00:22:19,799
the eye anti-malware provider interface

545
00:22:19,799 --> 00:22:23,100
as we've seen this interface is the main

546
00:22:23,100 --> 00:22:25,740
logic and it constitutes the main

547
00:22:25,740 --> 00:22:28,799
principle of amzi and this is what the

548
00:22:28,799 --> 00:22:31,140
provider needs to implement the scan

549
00:22:31,140 --> 00:22:34,020
function display name and the closed

550
00:22:34,020 --> 00:22:35,520
session

551
00:22:35,520 --> 00:22:38,100
so when we create a new instance of this

552
00:22:38,100 --> 00:22:40,020
interface we're going to create a new

553
00:22:40,020 --> 00:22:43,559
object that represents what the provider

554
00:22:43,559 --> 00:22:47,100
provides which are these functions that

555
00:22:47,100 --> 00:22:49,140
must be declared by the int Marvel

556
00:22:49,140 --> 00:22:50,760
provider interface

557
00:22:50,760 --> 00:22:53,100
then the new instance of this object is

558
00:22:53,100 --> 00:22:55,320
going to be returned to the function

559
00:22:55,320 --> 00:22:57,480
that's called this function that's

560
00:22:57,480 --> 00:22:59,940
called the com secure loading POG server

561
00:22:59,940 --> 00:23:03,299
and as we already seen we're going to

562
00:23:03,299 --> 00:23:05,940
assign it to the antimatter provider

563
00:23:05,940 --> 00:23:10,640
list inside the CMZ anti-mama object

564
00:23:12,080 --> 00:23:13,740
so

565
00:23:13,740 --> 00:23:16,860
um the first provider patch like we said

566
00:23:16,860 --> 00:23:20,280
um I'm going to patch not so intuitive a

567
00:23:20,280 --> 00:23:22,500
place to protect the provider itself

568
00:23:22,500 --> 00:23:24,780
we're going to patch the polo bytes of

569
00:23:24,780 --> 00:23:26,820
the dealer get class object function in

570
00:23:26,820 --> 00:23:29,159
the providers dlls and interfere with

571
00:23:29,159 --> 00:23:32,960
the initialization process of amsi

572
00:23:33,240 --> 00:23:35,820
but first we need to

573
00:23:35,820 --> 00:23:39,659
handle a small issue

574
00:23:39,659 --> 00:23:41,659
um

575
00:23:42,720 --> 00:23:45,000
okay I think that there's a slide

576
00:23:45,000 --> 00:23:46,559
missing here

577
00:23:46,559 --> 00:23:49,020
doesn't matter

578
00:23:49,020 --> 00:23:50,700
um

579
00:23:50,700 --> 00:23:53,400
before the latest object is going to be

580
00:23:53,400 --> 00:23:54,500
called

581
00:23:54,500 --> 00:23:58,320
uh when our bypass Cape is going to be

582
00:23:58,320 --> 00:24:02,100
executed uh delegates delegated subject

583
00:24:02,100 --> 00:24:03,960
is not supposed to be called because

584
00:24:03,960 --> 00:24:06,000
this function has been called only

585
00:24:06,000 --> 00:24:08,539
during the Amazon initialization process

586
00:24:08,539 --> 00:24:11,340
so if it will patch this function

587
00:24:11,340 --> 00:24:13,860
without doing anything else then we

588
00:24:13,860 --> 00:24:15,900
won't really eat the patch we already

589
00:24:15,900 --> 00:24:17,100
did

590
00:24:17,100 --> 00:24:19,440
so in order to eat the patch we'll have

591
00:24:19,440 --> 00:24:22,559
to find a way to uninitialize OMSI and

592
00:24:22,559 --> 00:24:25,559
make amzi to try to initialize again

593
00:24:25,559 --> 00:24:29,039
so what we can do is take a better look

594
00:24:29,039 --> 00:24:30,500
at the consumer

595
00:24:30,500 --> 00:24:32,419
first of all

596
00:24:32,419 --> 00:24:35,159
it doesn't matter because the slide is

597
00:24:35,159 --> 00:24:38,179
missing I don't know why but

598
00:24:38,179 --> 00:24:41,340
when we try to if we take a look at the

599
00:24:41,340 --> 00:24:43,799
exports of amzi we can see a function

600
00:24:43,799 --> 00:24:46,440
named omzian initialize that received a

601
00:24:46,440 --> 00:24:48,659
parameter which his name is the amzi

602
00:24:48,659 --> 00:24:51,500
context which is the Ramsay context

603
00:24:51,500 --> 00:24:54,840
it disables it uninitialize only the AMC

604
00:24:54,840 --> 00:24:56,820
context that was initialized first of

605
00:24:56,820 --> 00:24:59,400
all with Amazon initialize so if we want

606
00:24:59,400 --> 00:25:01,799
to call amzi uninitialize we'll have to

607
00:25:01,799 --> 00:25:04,740
supply it the original AMC context but

608
00:25:04,740 --> 00:25:06,720
if the but we in order to do so we need

609
00:25:06,720 --> 00:25:08,520
to fight the amzi context in memory as

610
00:25:08,520 --> 00:25:11,940
and we as and as we've seen it's not an

611
00:25:11,940 --> 00:25:14,000
so intuitive

612
00:25:14,000 --> 00:25:16,740
thing to do because it's not so reliable

613
00:25:16,740 --> 00:25:19,860
another option we can take is to look

614
00:25:19,860 --> 00:25:22,559
better at the consumer each consumer is

615
00:25:22,559 --> 00:25:25,320
the code that uninitialized MZ for us in

616
00:25:25,320 --> 00:25:27,120
Powershell we can use reflection to call

617
00:25:27,120 --> 00:25:29,279
this code so if we take a look at the

618
00:25:29,279 --> 00:25:31,380
hotel class that are implemented by

619
00:25:31,380 --> 00:25:33,179
Powershell we will see function named

620
00:25:33,179 --> 00:25:35,340
uninitialize this function is going to

621
00:25:35,340 --> 00:25:37,500
take down the context context that was

622
00:25:37,500 --> 00:25:39,900
initialized first and call on the

623
00:25:39,900 --> 00:25:41,640
uninitialized with this specific context

624
00:25:41,640 --> 00:25:44,039
so basically it's going to uninitialize

625
00:25:44,039 --> 00:25:46,220
Ramsay for us without us being

626
00:25:46,220 --> 00:25:49,740
needed to provide the OMSI context to

627
00:25:49,740 --> 00:25:52,679
DMZ uninitialize export

628
00:25:52,679 --> 00:25:55,080
after all the preparations after all the

629
00:25:55,080 --> 00:25:58,020
slides we can finally eat the final

630
00:25:58,020 --> 00:25:59,880
bypass script this is the first bypass

631
00:25:59,880 --> 00:26:02,220
script we're going to use a type in

632
00:26:02,220 --> 00:26:04,559
order to call Windows apis basically

633
00:26:04,559 --> 00:26:06,539
very much like the harmsy scan buffer

634
00:26:06,539 --> 00:26:09,480
technique that we've seen and then we

635
00:26:09,480 --> 00:26:12,120
going to load to get an endless to the D

636
00:26:12,120 --> 00:26:14,940
to put the provider dll which is MP oav

637
00:26:14,940 --> 00:26:17,580
in case of Microsoft Defender find the

638
00:26:17,580 --> 00:26:19,580
Polk address of the get plus object

639
00:26:19,580 --> 00:26:22,380
patch it change the protection of the

640
00:26:22,380 --> 00:26:26,880
page the data object resides in and copy

641
00:26:26,880 --> 00:26:28,440
a page that will return in valid

642
00:26:28,440 --> 00:26:30,720
argument very much like the scan buffer

643
00:26:30,720 --> 00:26:32,400
techniques that we already seen but

644
00:26:32,400 --> 00:26:34,919
without touching the mcdl memory space

645
00:26:34,919 --> 00:26:37,200
the should that's supposed to be

646
00:26:37,200 --> 00:26:38,640
protected

647
00:26:38,640 --> 00:26:41,400
then in order to make the direct class

648
00:26:41,400 --> 00:26:44,039
object code to be invoked we're going to

649
00:26:44,039 --> 00:26:47,400
call and to uninitial examsi in order to

650
00:26:47,400 --> 00:26:49,440
do so we're going to use reflection find

651
00:26:49,440 --> 00:26:52,440
the uninitialized function in memory and

652
00:26:52,440 --> 00:26:55,620
invoke it so in the next time that we a

653
00:26:55,620 --> 00:26:57,600
scale request is going to be made

654
00:26:57,600 --> 00:26:59,520
um it's going to the Powershell is going

655
00:26:59,520 --> 00:27:01,980
to try to re-initialize amzi but it's

656
00:27:01,980 --> 00:27:04,260
going to fail because the data get lost

657
00:27:04,260 --> 00:27:06,539
object was patched

658
00:27:06,539 --> 00:27:08,159
this example

659
00:27:08,159 --> 00:27:10,440
um is touching only the provider's dll

660
00:27:10,440 --> 00:27:13,380
of mpoev and more sophisticated one will

661
00:27:13,380 --> 00:27:16,620
be to query all the register keys that

662
00:27:16,620 --> 00:27:18,860
we already see and find the providers

663
00:27:18,860 --> 00:27:22,140
dealer names and patch in each one of

664
00:27:22,140 --> 00:27:24,840
them another option is to know what are

665
00:27:24,840 --> 00:27:26,820
all the possibilities for providers that

666
00:27:26,820 --> 00:27:29,520
are in the market try to load each dll

667
00:27:29,520 --> 00:27:31,140
and if we fail

668
00:27:31,140 --> 00:27:33,600
um we can if we succeed we can assume

669
00:27:33,600 --> 00:27:36,360
that this dll in memory and we can patch

670
00:27:36,360 --> 00:27:38,159
it and we need to patch it in order to

671
00:27:38,159 --> 00:27:40,940
buy basamzi

672
00:27:41,400 --> 00:27:43,799
the second Bible script is going to be

673
00:27:43,799 --> 00:27:45,900
based on scale interception instead of

674
00:27:45,900 --> 00:27:47,940
initialization interception

675
00:27:47,940 --> 00:27:50,880
scale interception is the classic way to

676
00:27:50,880 --> 00:27:53,820
disable amsi and as we've seen we can

677
00:27:53,820 --> 00:27:57,120
implement this by basically patching the

678
00:27:57,120 --> 00:27:59,400
arm this can buffer function

679
00:27:59,400 --> 00:28:02,340
another option we can do um but again

680
00:28:02,340 --> 00:28:04,080
like we've seen on this can buffer

681
00:28:04,080 --> 00:28:07,020
function is really monitored and it's a

682
00:28:07,020 --> 00:28:08,820
memorial area that we don't want to

683
00:28:08,820 --> 00:28:10,500
touch right now

684
00:28:10,500 --> 00:28:12,900
another option we can do is better look

685
00:28:12,900 --> 00:28:14,640
at on the scan buffer and understand how

686
00:28:14,640 --> 00:28:16,919
this process work and when we that will

687
00:28:16,919 --> 00:28:19,380
when will we we will understand how this

688
00:28:19,380 --> 00:28:22,020
process work will be able to interfere

689
00:28:22,020 --> 00:28:24,240
scan requests

690
00:28:24,240 --> 00:28:26,400
as this can buffer looks like this first

691
00:28:26,400 --> 00:28:28,500
it's going to validate the um the

692
00:28:28,500 --> 00:28:30,720
context that was supplied to it to it by

693
00:28:30,720 --> 00:28:32,640
as a parameter

694
00:28:32,640 --> 00:28:34,380
then it's going to create a new instance

695
00:28:34,380 --> 00:28:37,860
of a class named CMZ buffer stream that

696
00:28:37,860 --> 00:28:39,360
will represent the buffer that we're

697
00:28:39,360 --> 00:28:41,279
going to scan

698
00:28:41,279 --> 00:28:44,539
then we're going to refer the antimatter

699
00:28:44,539 --> 00:28:47,940
attribute and inside the MC context and

700
00:28:47,940 --> 00:28:50,520
call a function name scan from this

701
00:28:50,520 --> 00:28:53,340
attribute and provided the buffer stream

702
00:28:53,340 --> 00:28:55,919
and DMZ result

703
00:28:55,919 --> 00:28:58,380
as we've seen antimatter attribute also

704
00:28:58,380 --> 00:29:01,200
the C and the anti-malware all the an

705
00:29:01,200 --> 00:29:04,320
instance of the CMZ antimatter class So

706
00:29:04,320 --> 00:29:06,600
eventually we're going to execute the

707
00:29:06,600 --> 00:29:10,620
CMZ until malware a class with the scan

708
00:29:10,620 --> 00:29:14,159
function of the CMZ anti-malware class

709
00:29:14,159 --> 00:29:16,380
and this function looks like this it's

710
00:29:16,380 --> 00:29:18,840
pretty intuitive we're going to go to

711
00:29:18,840 --> 00:29:20,460
the list of all the providers that are

712
00:29:20,460 --> 00:29:22,919
being held by the CMC anti-malware class

713
00:29:22,919 --> 00:29:24,960
and look through all the providers in

714
00:29:24,960 --> 00:29:25,799
this list

715
00:29:25,799 --> 00:29:27,539
for each provider we're going to call

716
00:29:27,539 --> 00:29:29,340
the scan function that as we've seen

717
00:29:29,340 --> 00:29:31,559
each provider must Implement because it

718
00:29:31,559 --> 00:29:33,899
implements the int malware provider

719
00:29:33,899 --> 00:29:37,260
interface and pass it the buffer stream

720
00:29:37,260 --> 00:29:39,240
that we want to scan and a reference to

721
00:29:39,240 --> 00:29:40,799
and I'm the result

722
00:29:40,799 --> 00:29:43,440
then the flow is going to check the

723
00:29:43,440 --> 00:29:45,299
answer result that was returned by each

724
00:29:45,299 --> 00:29:48,299
provider if it's a bad result which

725
00:29:48,299 --> 00:29:52,080
means that it's greater than 8 000 in X

726
00:29:52,080 --> 00:29:54,419
it's the loop is going to break and

727
00:29:54,419 --> 00:29:55,919
you're going to return without even

728
00:29:55,919 --> 00:29:58,620
continue to scan uh with the other

729
00:29:58,620 --> 00:30:00,240
providers

730
00:30:00,240 --> 00:30:02,640
if all the providers return a good

731
00:30:02,640 --> 00:30:04,740
result which means something result not

732
00:30:04,740 --> 00:30:07,080
detected or runs the result clean

733
00:30:07,080 --> 00:30:08,760
we're going to finally return the

734
00:30:08,760 --> 00:30:11,340
amsyresult clean function

735
00:30:11,340 --> 00:30:13,500
we can also return other options of

736
00:30:13,500 --> 00:30:16,080
Pharmacy result but this function this

737
00:30:16,080 --> 00:30:18,000
code like I said is stripped for

738
00:30:18,000 --> 00:30:20,640
Simplicity we're not going to cover this

739
00:30:20,640 --> 00:30:22,919
today

740
00:30:22,919 --> 00:30:24,659
so

741
00:30:24,659 --> 00:30:28,020
um in the first Bible script and finding

742
00:30:28,020 --> 00:30:30,059
the place in the provider that we wanted

743
00:30:30,059 --> 00:30:32,940
to patch was pretty easy because the

744
00:30:32,940 --> 00:30:35,580
function that it export was the function

745
00:30:35,580 --> 00:30:39,000
delete object was exported so we could

746
00:30:39,000 --> 00:30:42,480
call the get back get Block process API

747
00:30:42,480 --> 00:30:44,840
in order to receive the function address

748
00:30:44,840 --> 00:30:47,520
in this case the scan function of the

749
00:30:47,520 --> 00:30:49,740
provider that I'm going to tell you this

750
00:30:49,740 --> 00:30:53,039
is the function that we want to patch is

751
00:30:53,039 --> 00:30:55,440
not so intuitive to find because it's

752
00:30:55,440 --> 00:30:57,659
not exported by the dll

753
00:30:57,659 --> 00:31:00,120
so we'll have to do a little trick we're

754
00:31:00,120 --> 00:31:02,100
going to call arms initialize and

755
00:31:02,100 --> 00:31:04,140
basically this will allocate a new AMG

756
00:31:04,140 --> 00:31:07,020
count agency context for us this Edge

757
00:31:07,020 --> 00:31:09,419
I'm the context will hold in is third

758
00:31:09,419 --> 00:31:11,880
power third attribute and the new

759
00:31:11,880 --> 00:31:14,640
instance of the scmz anti-malware class

760
00:31:14,640 --> 00:31:17,159
if you corrupt anything inside this

761
00:31:17,159 --> 00:31:19,320
class it will only affect scan requests

762
00:31:19,320 --> 00:31:20,760
that are going to be made by this

763
00:31:20,760 --> 00:31:22,500
specific company context

764
00:31:22,500 --> 00:31:26,159
so it's not so good it's not it won't

765
00:31:26,159 --> 00:31:27,600
disable amzi because all these

766
00:31:27,600 --> 00:31:29,880
candidates will probably be be with

767
00:31:29,880 --> 00:31:32,940
another OMSI context but if we'll take a

768
00:31:32,940 --> 00:31:35,279
better look at the DMC context in memory

769
00:31:35,279 --> 00:31:37,500
we can see that the third attribute is

770
00:31:37,500 --> 00:31:40,559
going to hold the new instance of the

771
00:31:40,559 --> 00:31:43,200
CMZ anti-malware of the antimatter

772
00:31:43,200 --> 00:31:45,840
provider list and each record in this

773
00:31:45,840 --> 00:31:49,140
list is going to be basically a new

774
00:31:49,140 --> 00:31:51,480
object of the eye antimatter provider

775
00:31:51,480 --> 00:31:54,240
interface and this object will finally

776
00:31:54,240 --> 00:31:57,419
always each time we call amzi initialize

777
00:31:57,419 --> 00:32:00,240
we'll always point to the same scan

778
00:32:00,240 --> 00:32:04,200
functions inside the provider dll

779
00:32:04,200 --> 00:32:07,140
so if we'll be able to initialize

780
00:32:07,140 --> 00:32:09,600
something and receive a new context we

781
00:32:09,600 --> 00:32:12,299
can pass the context in memory and be

782
00:32:12,299 --> 00:32:14,640
able to find the scan function of each

783
00:32:14,640 --> 00:32:16,380
provider

784
00:32:16,380 --> 00:32:19,080
um without even without calling any

785
00:32:19,080 --> 00:32:22,520
other windows API

786
00:32:23,220 --> 00:32:25,500
Escape will look like this we can call

787
00:32:25,500 --> 00:32:28,380
on the initialize with Windows API or we

788
00:32:28,380 --> 00:32:31,260
might also be able to columns initialize

789
00:32:31,260 --> 00:32:33,120
um that was implemented by Powershell we

790
00:32:33,120 --> 00:32:35,039
don't really have to do this with

791
00:32:35,039 --> 00:32:37,559
Windows API as we've seen I'm cvt's

792
00:32:37,559 --> 00:32:40,200
class implements also an init function

793
00:32:40,200 --> 00:32:42,299
that initializer and receive the numsy

794
00:32:42,299 --> 00:32:43,200
context

795
00:32:43,200 --> 00:32:45,600
then we look to all the list of the

796
00:32:45,600 --> 00:32:47,880
providers that are being held by the CMZ

797
00:32:47,880 --> 00:32:50,100
anti-malware object

798
00:32:50,100 --> 00:32:53,039
first of all we in order to do so we

799
00:32:53,039 --> 00:32:56,460
going to refer to the third attribute of

800
00:32:56,460 --> 00:32:59,820
the context which is going to be in

801
00:32:59,820 --> 00:33:01,740
um if we're talking about this script is

802
00:33:01,740 --> 00:33:03,539
going is implemented on 32-bit

803
00:33:03,539 --> 00:33:06,539
applications it is relevant to all the

804
00:33:06,539 --> 00:33:08,340
versions of Powershell including the old

805
00:33:08,340 --> 00:33:10,980
ones because the CMZ antimatter class

806
00:33:10,980 --> 00:33:14,460
didn't change between versions and if

807
00:33:14,460 --> 00:33:18,240
you want to do this the same for 64 64

808
00:33:18,240 --> 00:33:20,760
bit applications it is possible all you

809
00:33:20,760 --> 00:33:22,980
need to do is to do a little reverse

810
00:33:22,980 --> 00:33:25,559
engineering process but as we said this

811
00:33:25,559 --> 00:33:30,059
is a false 32-bit applications

812
00:33:30,059 --> 00:33:31,980
so we're going to refer the third

813
00:33:31,980 --> 00:33:34,080
attribute which is the new instance of

814
00:33:34,080 --> 00:33:37,440
the C Amazon anti malware class then

815
00:33:37,440 --> 00:33:40,500
we'll go to a go to offset 36 this is

816
00:33:40,500 --> 00:33:42,659
the list of the providers in 32-bit

817
00:33:42,659 --> 00:33:44,880
application will always be in offset 36

818
00:33:44,880 --> 00:33:47,399
we look to each provider in this list

819
00:33:47,399 --> 00:33:50,279
find its V table the V table is going to

820
00:33:50,279 --> 00:33:54,120
point to all the all the functions that

821
00:33:54,120 --> 00:33:57,360
must be implemented by this class and

822
00:33:57,360 --> 00:33:59,399
the first function will always be the

823
00:33:59,399 --> 00:34:02,700
scan function first function in a 32-bit

824
00:34:02,700 --> 00:34:05,880
applications means in offset 12. then

825
00:34:05,880 --> 00:34:09,179
when we found the the scan function we

826
00:34:09,179 --> 00:34:11,399
we just need to change the protection of

827
00:34:11,399 --> 00:34:13,800
the page where this function resides in

828
00:34:13,800 --> 00:34:17,520
and copy the patch that we want to apply

829
00:34:17,520 --> 00:34:19,800
to this function this is basically going

830
00:34:19,800 --> 00:34:24,119
to touch the Pollock bytes of the scan

831
00:34:24,119 --> 00:34:26,760
function inside the provider and returns

832
00:34:26,760 --> 00:34:28,619
zero so this function is going to fail

833
00:34:28,619 --> 00:34:30,540
without filling the appropriate times

834
00:34:30,540 --> 00:34:32,960
the result

835
00:34:36,480 --> 00:34:40,940
okay let's see a demo

836
00:34:45,119 --> 00:34:48,839
okay okay first step

837
00:34:48,839 --> 00:34:51,119
um at this at the beginning let's start

838
00:34:51,119 --> 00:34:54,418
let's try to call invoke mimikats in

839
00:34:54,418 --> 00:34:56,879
this case we going we suppose that we

840
00:34:56,879 --> 00:35:00,240
going to be fail to be blocked by the MZ

841
00:35:00,240 --> 00:35:03,060
providers scans because it contains the

842
00:35:03,060 --> 00:35:06,380
substring mimikats

843
00:35:07,680 --> 00:35:09,540
now this is

844
00:35:09,540 --> 00:35:11,220
the same instance of function that I

845
00:35:11,220 --> 00:35:12,079
already

846
00:35:12,079 --> 00:35:14,640
ran the pipe Escape so I already

847
00:35:14,640 --> 00:35:18,618
bypassed the script sorry about it

848
00:35:23,700 --> 00:35:27,799
okay let's run by Powershell again

849
00:35:37,560 --> 00:35:40,619
and now we are being blocked by the uh

850
00:35:40,619 --> 00:35:42,900
the providers or the provider of

851
00:35:42,900 --> 00:35:47,359
Defender the AMC provider or Defender

852
00:35:49,099 --> 00:35:51,660
let's run the bypass script this is the

853
00:35:51,660 --> 00:35:56,060
same Bible script in the presentation

854
00:35:56,760 --> 00:35:59,940
and now try to call invoke mimikats and

855
00:35:59,940 --> 00:36:03,079
we are able to do so

856
00:36:04,740 --> 00:36:08,760
from now on as we already seen in the

857
00:36:08,760 --> 00:36:10,980
first instance of Powershell that I

858
00:36:10,980 --> 00:36:14,940
closed and we'll be able to execute any

859
00:36:14,940 --> 00:36:18,119
Escape that we want invoke mimikats I

860
00:36:18,119 --> 00:36:20,700
don't know a power supply whatever you

861
00:36:20,700 --> 00:36:22,640
wish to run without

862
00:36:22,640 --> 00:36:26,220
the scans to intercept US during this

863
00:36:26,220 --> 00:36:28,520
process

864
00:36:33,300 --> 00:36:36,140
foreign

865
00:36:37,560 --> 00:36:40,619
takeaways a destruction operation is

866
00:36:40,619 --> 00:36:42,720
easy because it's easier because the

867
00:36:42,720 --> 00:36:44,940
empty dll and the provider dll are

868
00:36:44,940 --> 00:36:46,680
loaded to the same memory space for

869
00:36:46,680 --> 00:36:49,440
potassium attacker leaves Amazon was not

870
00:36:49,440 --> 00:36:51,660
designed to prevent such attacks and the

871
00:36:51,660 --> 00:36:53,339
current prevention or detection

872
00:36:53,339 --> 00:36:55,260
techniques of onesie bypass doesn't

873
00:36:55,260 --> 00:36:56,760
Reach This Gap

874
00:36:56,760 --> 00:36:58,500
from a security vendor perspective

875
00:36:58,500 --> 00:37:00,359
security handle should consider to

876
00:37:00,359 --> 00:37:03,180
protect the providers memory as well as

877
00:37:03,180 --> 00:37:06,480
the amcd land memory space and form a

878
00:37:06,480 --> 00:37:08,579
research perspective an initialization

879
00:37:08,579 --> 00:37:10,980
of amzi might let us find new methods

880
00:37:10,980 --> 00:37:13,200
for disabling Ramsay by interfering with

881
00:37:13,200 --> 00:37:15,060
the initialization process

882
00:37:15,060 --> 00:37:16,440
this is different from the common

883
00:37:16,440 --> 00:37:18,000
techniques that interfere with the

884
00:37:18,000 --> 00:37:21,000
scanning process

885
00:37:21,000 --> 00:37:23,400
if other if other research can also be

886
00:37:23,400 --> 00:37:25,680
done on the scan interception and I'm

887
00:37:25,680 --> 00:37:27,660
the initialization interception in

888
00:37:27,660 --> 00:37:29,339
skeletal session we can patch other

889
00:37:29,339 --> 00:37:31,859
codes or data as sections inside the

890
00:37:31,859 --> 00:37:34,619
amcdll or the providers dll the

891
00:37:34,619 --> 00:37:36,720
initialization interception we can patch

892
00:37:36,720 --> 00:37:39,660
other involved dealers like combase or

893
00:37:39,660 --> 00:37:42,000
any other dealers that are related to

894
00:37:42,000 --> 00:37:43,680
the scan process to the initialization

895
00:37:43,680 --> 00:37:44,579
process

896
00:37:44,579 --> 00:37:46,680
we can also try to use the ad patching

897
00:37:46,680 --> 00:37:48,300
of pharmaceutical but it's not so

898
00:37:48,300 --> 00:37:51,060
reliable an easy technique to do and a

899
00:37:51,060 --> 00:37:53,040
RPC interception is another option that

900
00:37:53,040 --> 00:37:55,440
is depends on the implementation of the

901
00:37:55,440 --> 00:37:56,880
provider if we're talking about

902
00:37:56,880 --> 00:37:59,579
Microsoft Defender it performs RPC

903
00:37:59,579 --> 00:38:01,859
requests and because we are living in

904
00:38:01,859 --> 00:38:03,960
the same memory space as the provider we

905
00:38:03,960 --> 00:38:06,720
might be able to intercept RPC requests

906
00:38:06,720 --> 00:38:09,240
that are being made by the defender

907
00:38:09,240 --> 00:38:11,899
provider

908
00:38:12,180 --> 00:38:14,760
um I want to add that all the pocs that

909
00:38:14,760 --> 00:38:16,859
I presented today is going to be

910
00:38:16,859 --> 00:38:19,260
uploaded to my Twitter account on the

911
00:38:19,260 --> 00:38:22,740
left side the left corner and thank you

912
00:38:22,740 --> 00:38:25,020
for listening and if you have any

913
00:38:25,020 --> 00:38:25,290
question

914
00:38:25,290 --> 00:38:27,810
[Applause]

915
00:38:27,810 --> 00:38:30,880
[Music]

916
00:38:34,720 --> 00:38:37,810
[Music]

