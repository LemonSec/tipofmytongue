1
00:00:01,740 --> 00:00:04,810
[Music]

2
00:00:08,240 --> 00:00:09,040
hi

3
00:00:09,040 --> 00:00:12,080
everyone welcome to our talk autosphere

4
00:00:12,080 --> 00:00:13,920
i'm delighted to tell you something

5
00:00:13,920 --> 00:00:16,560
interesting about the worst bypassing in

6
00:00:16,560 --> 00:00:19,199
this talk i will show how long draw-offs

7
00:00:19,199 --> 00:00:22,080
are allowing attackers to cause splendid

8
00:00:22,080 --> 00:00:24,160
damage

9
00:00:24,160 --> 00:00:27,680
okay i'm jinxing a graduated student at

10
00:00:27,680 --> 00:00:30,560
georgian university and xiaomi is a

11
00:00:30,560 --> 00:00:33,600
research associated at iscs

12
00:00:33,600 --> 00:00:35,200
and tremen wu

13
00:00:35,200 --> 00:00:38,079
my supervisor is a professor at georgian

14
00:00:38,079 --> 00:00:40,480
university

15
00:00:40,480 --> 00:00:43,280
and this is the agenda of our talk

16
00:00:43,280 --> 00:00:46,000
firstly i will introduce the background

17
00:00:46,000 --> 00:00:48,960
of our talk including web attacks and

18
00:00:48,960 --> 00:00:50,160
raf

19
00:00:50,160 --> 00:00:52,480
and secondly i will introduce the

20
00:00:52,480 --> 00:00:55,520
traditional methods and existing tools

21
00:00:55,520 --> 00:00:57,760
that are commonly employed to bypass

22
00:00:57,760 --> 00:00:58,800
graphs

23
00:00:58,800 --> 00:01:01,359
however i will show the shortcomings of

24
00:01:01,359 --> 00:01:03,039
these tools

25
00:01:03,039 --> 00:01:05,760
and thirdly i will introduce our attack

26
00:01:05,760 --> 00:01:08,880
framework autosphere it can be used to

27
00:01:08,880 --> 00:01:12,159
generate sql injection pairs to bypass

28
00:01:12,159 --> 00:01:14,000
the target off efficiently and

29
00:01:14,000 --> 00:01:15,920
effectively

30
00:01:15,920 --> 00:01:18,159
then i will proven to

31
00:01:18,159 --> 00:01:20,479
present some results of autosphere

32
00:01:20,479 --> 00:01:22,400
against the silent commercial wi-fi

33
00:01:22,400 --> 00:01:26,720
service from mainstream vendors

34
00:01:26,720 --> 00:01:29,280
and as a responsible researcher i will

35
00:01:29,280 --> 00:01:31,840
detail our vulnerability discussion

36
00:01:31,840 --> 00:01:32,799
progress

37
00:01:32,799 --> 00:01:36,960
and finally i will conclude this talk

38
00:01:36,960 --> 00:01:40,000
ok let's begin in this part i will

39
00:01:40,000 --> 00:01:43,360
introduce some background

40
00:01:44,240 --> 00:01:46,560
as we all know web services are being

41
00:01:46,560 --> 00:01:49,759
exposed to worldwide threats with rest

42
00:01:49,759 --> 00:01:52,720
methods here are the top 10 web security

43
00:01:52,720 --> 00:01:56,640
risks amongst them injection is one of

44
00:01:56,640 --> 00:01:59,200
the most dangerous attack measures

45
00:01:59,200 --> 00:02:01,200
with injection attacks

46
00:02:01,200 --> 00:02:03,680
hackers can send untrusted payloads to

47
00:02:03,680 --> 00:02:05,119
the web storage

48
00:02:05,119 --> 00:02:05,920
and

49
00:02:05,920 --> 00:02:08,479
they can steal information or take

50
00:02:08,479 --> 00:02:10,878
control of the underlying system

51
00:02:10,878 --> 00:02:14,400
example for sql injection and cross-site

52
00:02:14,400 --> 00:02:15,680
scripting

53
00:02:15,680 --> 00:02:18,560
the gndi injection is also crucial

54
00:02:18,560 --> 00:02:21,520
attack method which is the

55
00:02:21,520 --> 00:02:24,959
exploit method of log for shell in this

56
00:02:24,959 --> 00:02:27,680
talk i will use injection text to

57
00:02:27,680 --> 00:02:30,800
present this talk

58
00:02:31,440 --> 00:02:34,000
and to mitigate a malicious request like

59
00:02:34,000 --> 00:02:37,120
sql injection the web application fellow

60
00:02:37,120 --> 00:02:40,800
akwaf is one of the most widely used and

61
00:02:40,800 --> 00:02:44,000
effective defensive systems

62
00:02:44,000 --> 00:02:46,800
normally one is default deployed in the

63
00:02:46,800 --> 00:02:49,280
front of the rg server

64
00:02:49,280 --> 00:02:51,360
that any requests

65
00:02:51,360 --> 00:02:54,239
from clients must be detected and

66
00:02:54,239 --> 00:02:56,560
filtered by this graph

67
00:02:56,560 --> 00:02:58,879
already requested that the detect data

68
00:02:58,879 --> 00:03:01,280
as benign will be forwarded to the

69
00:03:01,280 --> 00:03:05,720
oriented server for further processing

70
00:03:06,159 --> 00:03:09,280
and generally buff can be categoried

71
00:03:09,280 --> 00:03:10,400
into

72
00:03:10,400 --> 00:03:13,120
two types that is a signature based off

73
00:03:13,120 --> 00:03:15,280
and the machining results

74
00:03:15,280 --> 00:03:17,840
the formal one is the traditional but

75
00:03:17,840 --> 00:03:21,120
effective it takes advantage of rest

76
00:03:21,120 --> 00:03:24,239
rules predefined by domain experts

77
00:03:24,239 --> 00:03:26,480
to detect and block

78
00:03:26,480 --> 00:03:28,159
emergency requests

79
00:03:28,159 --> 00:03:30,640
recently motivated by the greater

80
00:03:30,640 --> 00:03:32,400
success of machining

81
00:03:32,400 --> 00:03:34,879
a variety of machining baseballs has

82
00:03:34,879 --> 00:03:38,239
been proposed and implemented

83
00:03:38,239 --> 00:03:41,280
moreover with the development of cloud

84
00:03:41,280 --> 00:03:44,400
computing wi-fi the service under one as

85
00:03:44,400 --> 00:03:47,200
one kind of security as a service

86
00:03:47,200 --> 00:03:49,840
has been proposed to

87
00:03:49,840 --> 00:03:52,480
facilitate the deployment configuration

88
00:03:52,480 --> 00:03:55,840
and update of the traditional ones

89
00:03:55,840 --> 00:03:58,239
the administrator who manages who

90
00:03:58,239 --> 00:04:00,480
manages web services only needed to

91
00:04:00,480 --> 00:04:02,319
redirect their

92
00:04:02,319 --> 00:04:04,799
requests from clients to the interface

93
00:04:04,799 --> 00:04:07,280
interfaces or wi-fi the service

94
00:04:07,280 --> 00:04:10,000
provided by windows so that admissions

95
00:04:10,000 --> 00:04:13,120
request can be detected and filtered

96
00:04:13,120 --> 00:04:16,720
before sending to the origin server

97
00:04:16,720 --> 00:04:19,600
and here i will employ a funny example

98
00:04:19,600 --> 00:04:22,800
to illustrate how frequently vaf is used

99
00:04:22,800 --> 00:04:24,080
in the cloud

100
00:04:24,080 --> 00:04:26,400
when i submitted my content my session

101
00:04:26,400 --> 00:04:29,440
content i was blocked by the cloud flyer

102
00:04:29,440 --> 00:04:32,560
used by blackheads.com so i had to

103
00:04:32,560 --> 00:04:35,440
change my content to order being blocked

104
00:04:35,440 --> 00:04:38,639
by this wife

105
00:04:39,120 --> 00:04:40,160
okay

106
00:04:40,160 --> 00:04:41,840
so both are the

107
00:04:41,840 --> 00:04:44,720
here i will introduce some by wifi

108
00:04:44,720 --> 00:04:47,120
passing methods including

109
00:04:47,120 --> 00:04:50,000
manual and automatically ways

110
00:04:50,000 --> 00:04:53,280
and they're shortcomings

111
00:04:54,960 --> 00:04:57,600
as of needed to trade off between the

112
00:04:57,600 --> 00:04:59,759
false positive rate and the false

113
00:04:59,759 --> 00:05:02,479
negative rate buffer cannot rudely

114
00:05:02,479 --> 00:05:04,720
intercept all suspected emissions

115
00:05:04,720 --> 00:05:05,919
requests

116
00:05:05,919 --> 00:05:08,479
this condition give attackers an

117
00:05:08,479 --> 00:05:11,120
opportunity to perform

118
00:05:11,120 --> 00:05:13,600
attacks

119
00:05:14,639 --> 00:05:17,600
and the attackers can bypass a waffle

120
00:05:17,600 --> 00:05:19,759
in many ways such as

121
00:05:19,759 --> 00:05:22,639
his architecture level

122
00:05:22,639 --> 00:05:25,840
he can just access the original server

123
00:05:25,840 --> 00:05:29,120
or he can send his payrolls in chunks

124
00:05:29,120 --> 00:05:31,680
today we focus on the most common and

125
00:05:31,680 --> 00:05:34,479
universal way that is we can mutate the

126
00:05:34,479 --> 00:05:37,960
original payload

127
00:05:40,320 --> 00:05:43,039
as shown in this example we can generate

128
00:05:43,039 --> 00:05:44,800
the original payload

129
00:05:44,800 --> 00:05:48,240
and test the generated periods by

130
00:05:48,240 --> 00:05:50,960
changing the case of letters

131
00:05:50,960 --> 00:05:53,280
or just adding some comments

132
00:05:53,280 --> 00:05:55,520
a neutral question is

133
00:05:55,520 --> 00:05:58,560
how can we automated this progress of

134
00:05:58,560 --> 00:06:00,960
generating and testing

135
00:06:00,960 --> 00:06:04,840
are the existing tools or methods

136
00:06:04,840 --> 00:06:07,759
usable firstly i will introduce some

137
00:06:07,759 --> 00:06:11,280
semi-auto tools of ninja provides a

138
00:06:11,280 --> 00:06:13,919
single point of function test for sql

139
00:06:13,919 --> 00:06:17,360
injection and process scripting

140
00:06:17,360 --> 00:06:19,600
with it we can further test

141
00:06:19,600 --> 00:06:21,199
we can

142
00:06:21,199 --> 00:06:23,199
perform a function test with the sql

143
00:06:23,199 --> 00:06:25,280
induction payload

144
00:06:25,280 --> 00:06:27,440
which continuously replace fast with the

145
00:06:27,440 --> 00:06:29,600
values in the database

146
00:06:29,600 --> 00:06:33,039
however even if we find a valid keyword

147
00:06:33,039 --> 00:06:35,520
what will still block the entire payload

148
00:06:35,520 --> 00:06:37,520
after being inserted to the entire

149
00:06:37,520 --> 00:06:40,000
payload

150
00:06:41,600 --> 00:06:44,160
unless the most suffocated attackers may

151
00:06:44,160 --> 00:06:47,199
consider a modifier multiple defaulting

152
00:06:47,199 --> 00:06:49,680
tests after constructing

153
00:06:49,680 --> 00:06:52,319
its original payload

154
00:06:52,319 --> 00:06:55,039
it may effective sometimes

155
00:06:55,039 --> 00:06:57,120
finder attackers need to manually

156
00:06:57,120 --> 00:06:59,440
specify the keywords and the

157
00:06:59,440 --> 00:07:02,400
replacements before each attack it

158
00:07:02,400 --> 00:07:04,720
requires stomach expertise and is

159
00:07:04,720 --> 00:07:05,759
deliberate

160
00:07:05,759 --> 00:07:09,280
besides this method is similar to brutal

161
00:07:09,280 --> 00:07:13,280
search it is inefficient

162
00:07:14,400 --> 00:07:17,680
and sql sqlmap as an excellent sql

163
00:07:17,680 --> 00:07:20,400
injection testing tool comes with many

164
00:07:20,400 --> 00:07:23,440
of bypassing template scripts when using

165
00:07:23,440 --> 00:07:25,360
sql map

166
00:07:25,360 --> 00:07:28,160
an attacker can specify some scripts

167
00:07:28,160 --> 00:07:31,199
such as equal to like random comments or

168
00:07:31,199 --> 00:07:32,880
upper case

169
00:07:32,880 --> 00:07:34,000
however

170
00:07:34,000 --> 00:07:35,759
attackers need to choose temperature

171
00:07:35,759 --> 00:07:37,919
manually just like i said

172
00:07:37,919 --> 00:07:38,880
and

173
00:07:38,880 --> 00:07:42,000
sqlmap cannot select them intelligently

174
00:07:42,000 --> 00:07:44,720
besides multiple temples can also work

175
00:07:44,720 --> 00:07:47,680
well together the templars can only

176
00:07:47,680 --> 00:07:52,560
mutate all locations within the payload

177
00:07:52,800 --> 00:07:54,960
so above worker present valuable

178
00:07:54,960 --> 00:07:58,160
concepts are semi-auto off bypassing

179
00:07:58,160 --> 00:08:00,319
next i will introduce some latest

180
00:08:00,319 --> 00:08:02,080
research on fully auto developed

181
00:08:02,080 --> 00:08:05,120
bypassing firstly

182
00:08:05,120 --> 00:08:08,400
dimitrov proposed the wi-fi mode it has

183
00:08:08,400 --> 00:08:10,560
a tool that can avoid the machine and

184
00:08:10,560 --> 00:08:12,560
visible valve

185
00:08:12,560 --> 00:08:15,440
the frozen predefined seven stream-based

186
00:08:15,440 --> 00:08:16,960
sql ejection

187
00:08:16,960 --> 00:08:19,759
payload mutation operators like a key

188
00:08:19,759 --> 00:08:22,240
swapping committee injection and

189
00:08:22,240 --> 00:08:24,160
operating swapping

190
00:08:24,160 --> 00:08:26,800
afterwards the employer priority cube is

191
00:08:26,800 --> 00:08:29,360
the opportunity method to gather the

192
00:08:29,360 --> 00:08:30,960
mutation progress

193
00:08:30,960 --> 00:08:33,440
specifically of a mole repeatedly

194
00:08:33,440 --> 00:08:36,320
mutates the initial payload

195
00:08:36,320 --> 00:08:39,360
multiple times to generate several pills

196
00:08:39,360 --> 00:08:41,519
so it selects the payload with the

197
00:08:41,519 --> 00:08:44,399
lowest mercury score as the initial one

198
00:08:44,399 --> 00:08:46,320
for the next round

199
00:08:46,320 --> 00:08:49,279
until it bypasses the target above all

200
00:08:49,279 --> 00:08:53,480
which is the termination condition

201
00:08:54,959 --> 00:08:57,519
and inspire the work of our iridium

202
00:08:57,519 --> 00:09:00,160
mobile detectors with reinforcement

203
00:09:00,160 --> 00:09:01,120
range

204
00:09:01,120 --> 00:09:03,680
while it all proposed the wi-fi vision

205
00:09:03,680 --> 00:09:05,920
framework with the reinforcement ring

206
00:09:05,920 --> 00:09:06,880
approach

207
00:09:06,880 --> 00:09:08,480
after training

208
00:09:08,480 --> 00:09:11,600
the reinforcement the new agent can

209
00:09:11,600 --> 00:09:14,320
select an optimal mutator operator

210
00:09:14,320 --> 00:09:17,680
according to the current data of the sql

211
00:09:17,680 --> 00:09:20,320
injection payload

212
00:09:20,320 --> 00:09:22,800
and the in fact they have followed the

213
00:09:22,800 --> 00:09:25,519
mutant operators in

214
00:09:25,519 --> 00:09:28,320
rafael

215
00:09:28,480 --> 00:09:31,680
besides hematite atop improved the work

216
00:09:31,680 --> 00:09:33,360
from one

217
00:09:33,360 --> 00:09:36,399
in several aspects including expanding

218
00:09:36,399 --> 00:09:37,920
their

219
00:09:37,920 --> 00:09:40,720
the mutation operator space and

220
00:09:40,720 --> 00:09:42,480
they have defined some

221
00:09:42,480 --> 00:09:44,480
some data based on the faster text

222
00:09:44,480 --> 00:09:48,240
embedding model and so on

223
00:09:48,480 --> 00:09:52,720
i was about worker has some shortcomings

224
00:09:52,720 --> 00:09:54,320
uh according to the chrome sig

225
00:09:54,320 --> 00:09:57,279
hierarchical the stream-based mutation

226
00:09:57,279 --> 00:10:00,000
method in your ball works

227
00:10:00,000 --> 00:10:02,480
cannot fully cover the attack pillows

228
00:10:02,480 --> 00:10:06,000
that is it it may make some key parts of

229
00:10:06,000 --> 00:10:08,560
the payload when generating adversary

230
00:10:08,560 --> 00:10:09,600
payrolls

231
00:10:09,600 --> 00:10:12,000
specifically

232
00:10:12,000 --> 00:10:13,279
here is a

233
00:10:13,279 --> 00:10:15,519
code snippet of a mutation operator in

234
00:10:15,519 --> 00:10:16,720
of ammo

235
00:10:16,720 --> 00:10:19,360
it can search for technology in the in

236
00:10:19,360 --> 00:10:22,000
the payload and replace data with other

237
00:10:22,000 --> 00:10:25,040
steps out authority such as mutator one

238
00:10:25,040 --> 00:10:26,880
equals one to

239
00:10:26,880 --> 00:10:29,839
one dash one does not equal two

240
00:10:29,839 --> 00:10:33,360
however if we add a space next to the

241
00:10:33,360 --> 00:10:36,160
next to the equal sign in the payload

242
00:10:36,160 --> 00:10:38,160
offering more wound to not will not

243
00:10:38,160 --> 00:10:39,680
recognize it

244
00:10:39,680 --> 00:10:43,279
besides of emo may then evaluate the

245
00:10:43,279 --> 00:10:46,560
entire payload for example it may mutate

246
00:10:46,560 --> 00:10:50,399
the alex into r equal

247
00:10:52,560 --> 00:10:55,360
and at the same time the priority cube

248
00:10:55,360 --> 00:10:56,720
is the

249
00:10:56,720 --> 00:10:58,399
optimization method and the

250
00:10:58,399 --> 00:11:00,640
reinforcement based methods are not

251
00:11:00,640 --> 00:11:03,680
suitable for attacking real world ones

252
00:11:03,680 --> 00:11:06,480
as their output is binary besides the

253
00:11:06,480 --> 00:11:08,959
gradient based optimization in adversary

254
00:11:08,959 --> 00:11:10,000
machining

255
00:11:10,000 --> 00:11:11,120
is also

256
00:11:11,120 --> 00:11:16,079
not suitable for our problem special tag

257
00:11:16,320 --> 00:11:19,440
to sum up it's imperative to do as a

258
00:11:19,440 --> 00:11:22,079
generously semantic preserving mutation

259
00:11:22,079 --> 00:11:24,880
method we should preserve the original

260
00:11:24,880 --> 00:11:26,880
functionality and the measurements of

261
00:11:26,880 --> 00:11:28,959
the initial one

262
00:11:28,959 --> 00:11:30,880
besides we should

263
00:11:30,880 --> 00:11:33,519
design some auto operation method

264
00:11:33,519 --> 00:11:36,240
suitable for blackbox attack it should

265
00:11:36,240 --> 00:11:38,880
be trimming free and it can generate it

266
00:11:38,880 --> 00:11:42,519
to different walls

267
00:11:42,560 --> 00:11:45,040
okay in this section i will introduce

268
00:11:45,040 --> 00:11:48,160
our proposal framework autosphere it can

269
00:11:48,160 --> 00:11:50,959
automatically bypass and inspecting

270
00:11:50,959 --> 00:11:53,920
the target valve

271
00:11:53,920 --> 00:11:58,399
normally http consists of four elements

272
00:11:58,399 --> 00:12:00,000
that is the

273
00:12:00,000 --> 00:12:03,040
scheme the domain name and the password

274
00:12:03,040 --> 00:12:05,760
file and the parameters with multiple

275
00:12:05,760 --> 00:12:06,720
pairs

276
00:12:06,720 --> 00:12:08,880
of k and value

277
00:12:08,880 --> 00:12:13,279
as the process of sql injection attack

278
00:12:13,279 --> 00:12:15,920
is limited to the parameter values

279
00:12:15,920 --> 00:12:19,040
and keep other parts unchanged

280
00:12:19,040 --> 00:12:21,279
because that we should generate secure

281
00:12:21,279 --> 00:12:23,920
injection pairs based on the original

282
00:12:23,920 --> 00:12:26,720
one that therefore autosphere should are

283
00:12:26,720 --> 00:12:28,160
not only

284
00:12:28,160 --> 00:12:30,240
to be limited to be limited to the

285
00:12:30,240 --> 00:12:33,440
payload of the original sql injection

286
00:12:33,440 --> 00:12:36,800
but it also ensures that the generated

287
00:12:36,800 --> 00:12:38,560
circuit ejection has the same

288
00:12:38,560 --> 00:12:41,200
functionality and maliciousness as the

289
00:12:41,200 --> 00:12:43,440
original one

290
00:12:43,440 --> 00:12:46,160
to handle it according to the different

291
00:12:46,160 --> 00:12:48,720
rows of different parts in the original

292
00:12:48,720 --> 00:12:51,600
sql injection we divided the original

293
00:12:51,600 --> 00:12:54,560
sql injection pillow into three modules

294
00:12:54,560 --> 00:12:57,120
that has the left boundary of the query

295
00:12:57,120 --> 00:12:59,120
as the red boundary

296
00:12:59,120 --> 00:13:01,279
and we thought we further emitted the

297
00:13:01,279 --> 00:13:04,000
attack surface of auto sphere to the

298
00:13:04,000 --> 00:13:05,200
query part

299
00:13:05,200 --> 00:13:07,279
both the boundaries the left boundary

300
00:13:07,279 --> 00:13:09,839
and the right boundary are restricted to

301
00:13:09,839 --> 00:13:12,880
unchanged so that the functionality of

302
00:13:12,880 --> 00:13:15,120
the original and secure injection is

303
00:13:15,120 --> 00:13:16,800
preserved

304
00:13:16,800 --> 00:13:19,519
the query is a call module and it's

305
00:13:19,519 --> 00:13:21,839
needed to be further processed

306
00:13:21,839 --> 00:13:23,760
i'm sorry

307
00:13:23,760 --> 00:13:24,800
small

308
00:13:24,800 --> 00:13:27,279
instead of simply treating the query as

309
00:13:27,279 --> 00:13:30,079
a string as a sequence of strings we

310
00:13:30,079 --> 00:13:33,120
first represented it with a hierarchical

311
00:13:33,120 --> 00:13:34,480
tree

312
00:13:34,480 --> 00:13:36,880
we argue that on the basically of the

313
00:13:36,880 --> 00:13:39,680
heritage representation we can perform

314
00:13:39,680 --> 00:13:42,639
one fundraiser and customer processing

315
00:13:42,639 --> 00:13:44,079
for each node

316
00:13:44,079 --> 00:13:46,360
according to their unique

317
00:13:46,360 --> 00:13:50,320
characteristics and constraints

318
00:13:50,320 --> 00:13:52,079
i think it called fascinated the

319
00:13:52,079 --> 00:13:55,120
generation of adversarial sql ejection

320
00:13:55,120 --> 00:13:57,600
payrolls

321
00:13:57,680 --> 00:13:58,720
besides

322
00:13:58,720 --> 00:14:01,920
we propose a weighted mutation strategy

323
00:14:01,920 --> 00:14:06,000
based on the context of free gram

324
00:14:06,079 --> 00:14:08,320
we can use it to generate a set of

325
00:14:08,320 --> 00:14:10,560
candidates as a result rascal ejection

326
00:14:10,560 --> 00:14:11,839
payroll

327
00:14:11,839 --> 00:14:14,560
and the generated payroll keeps the same

328
00:14:14,560 --> 00:14:17,120
functionality as malicious nurse as our

329
00:14:17,120 --> 00:14:18,639
original one

330
00:14:18,639 --> 00:14:21,440
we formulated the cft grammars for each

331
00:14:21,440 --> 00:14:23,120
semantic type

332
00:14:23,120 --> 00:14:27,279
of the sql ejection hybrid tree

333
00:14:27,279 --> 00:14:30,320
for example as shown in this figure the

334
00:14:30,320 --> 00:14:32,160
tutorial of

335
00:14:32,160 --> 00:14:34,320
y equals y in order to

336
00:14:34,320 --> 00:14:37,360
can be transformed by context of grammar

337
00:14:37,360 --> 00:14:38,399
into

338
00:14:38,399 --> 00:14:41,120
uh into a broad expression that in order

339
00:14:41,120 --> 00:14:42,240
to be true

340
00:14:42,240 --> 00:14:46,240
or to charge in other formats

341
00:14:46,240 --> 00:14:48,639
and we can mutate the escrow injection

342
00:14:48,639 --> 00:14:51,360
payload at the atomic level without

343
00:14:51,360 --> 00:14:54,480
breaking the original semantics that is

344
00:14:54,480 --> 00:14:56,399
we can keep the same functionality and

345
00:14:56,399 --> 00:14:59,480
the merchants

346
00:15:00,000 --> 00:15:02,720
and there was about representation under

347
00:15:02,720 --> 00:15:05,199
the context-free grammar in addition to

348
00:15:05,199 --> 00:15:07,519
carrying the mutation operators in

349
00:15:07,519 --> 00:15:11,120
existing methods and tools we proposed

350
00:15:11,120 --> 00:15:13,279
several novel and practical mutation

351
00:15:13,279 --> 00:15:16,480
operators according to the latest tech

352
00:15:16,480 --> 00:15:18,959
blocks

353
00:15:20,000 --> 00:15:23,360
and we employ some color research

354
00:15:23,360 --> 00:15:26,160
algorithm together our searching process

355
00:15:26,160 --> 00:15:28,720
that is combining the mutation

356
00:15:28,720 --> 00:15:31,680
replacements of each node the monocular

357
00:15:31,680 --> 00:15:34,160
research is to continuously build a sub

358
00:15:34,160 --> 00:15:37,120
tree where each node represents a state

359
00:15:37,120 --> 00:15:39,760
of the ethical reduction hierarchy and

360
00:15:39,760 --> 00:15:44,439
the ages correspond to transformations

361
00:15:44,639 --> 00:15:47,839
okay here is an example

362
00:15:47,839 --> 00:15:50,959
after a few rounds of the game we select

363
00:15:50,959 --> 00:15:54,320
the current best child of level 2 which

364
00:15:54,320 --> 00:15:57,920
passes 3b under 5a specifically

365
00:15:57,920 --> 00:16:00,560
through b is to mutate the white space

366
00:16:00,560 --> 00:16:01,839
in row 3

367
00:16:01,839 --> 00:16:04,079
to command 4.

368
00:16:04,079 --> 00:16:06,720
and the first way is to mutate the equal

369
00:16:06,720 --> 00:16:09,839
in node file to inline comment afterward

370
00:16:09,839 --> 00:16:12,480
we perform an expression progress that

371
00:16:12,480 --> 00:16:14,959
is randomly selecting

372
00:16:14,959 --> 00:16:17,440
4 8 and generating the number three at

373
00:16:17,440 --> 00:16:19,600
the child of number two

374
00:16:19,600 --> 00:16:22,000
so we finished the surrounding of the

375
00:16:22,000 --> 00:16:24,480
mirror again by simulation that is

376
00:16:24,480 --> 00:16:27,120
randomly mutating multiple times by

377
00:16:27,120 --> 00:16:29,360
reaching the limit

378
00:16:29,360 --> 00:16:32,240
at this time we interact with the target

379
00:16:32,240 --> 00:16:34,720
wave to obtain the current

380
00:16:34,720 --> 00:16:37,360
classification result of the malicious

381
00:16:37,360 --> 00:16:39,839
confidence score and the update all

382
00:16:39,839 --> 00:16:41,920
parent nodes based on the number of

383
00:16:41,920 --> 00:16:42,959
visits

384
00:16:42,959 --> 00:16:46,638
as a result from the off

385
00:16:47,279 --> 00:16:50,160
and in the end we output the payload

386
00:16:50,160 --> 00:16:52,560
corresponding to the final state of the

387
00:16:52,560 --> 00:16:55,279
multi-car circuitry here is the final

388
00:16:55,279 --> 00:16:58,399
generated payload

389
00:17:00,079 --> 00:17:02,800
okay now i will present the results our

390
00:17:02,800 --> 00:17:04,400
autosphere against

391
00:17:04,400 --> 00:17:06,240
selling commercial wi-fi the service

392
00:17:06,240 --> 00:17:08,880
from mainstream vendors besides by

393
00:17:08,880 --> 00:17:10,799
performing our

394
00:17:10,799 --> 00:17:13,919
several case studies i will analyze and

395
00:17:13,919 --> 00:17:16,240
inspect some general deficiencies on

396
00:17:16,240 --> 00:17:20,400
wi-fi the service amongst its wonders

397
00:17:20,400 --> 00:17:23,280
we first manually constructed about 100

398
00:17:23,280 --> 00:17:25,919
escrow injection payload

399
00:17:25,919 --> 00:17:28,960
of common methods including universal

400
00:17:28,960 --> 00:17:31,280
injection aerobic injection and blending

401
00:17:31,280 --> 00:17:33,360
injection

402
00:17:33,360 --> 00:17:35,760
and these petals are used to verify the

403
00:17:35,760 --> 00:17:38,240
semantics of the generated appearance

404
00:17:38,240 --> 00:17:40,400
and then we find the two commonly used

405
00:17:40,400 --> 00:17:44,160
datasets from kegel and github

406
00:17:44,160 --> 00:17:46,559
these pills are used to evaluate our

407
00:17:46,559 --> 00:17:50,320
otakus success rate

408
00:17:50,320 --> 00:17:53,600
okay firstly to compare the semantics of

409
00:17:53,600 --> 00:17:56,559
the payload before and after mutating we

410
00:17:56,559 --> 00:17:58,559
first deploy multiple runtime

411
00:17:58,559 --> 00:18:01,679
environments as shown in this page such

412
00:18:01,679 --> 00:18:03,039
as

413
00:18:03,039 --> 00:18:04,960
disk space in multiple versions and

414
00:18:04,960 --> 00:18:09,760
background scripts in person and php

415
00:18:09,760 --> 00:18:12,320
and by observing the execution results

416
00:18:12,320 --> 00:18:15,200
of the payloads we can

417
00:18:15,200 --> 00:18:17,919
prove that our autosphere will not

418
00:18:17,919 --> 00:18:20,720
invade the generated appearance that is

419
00:18:20,720 --> 00:18:23,280
all pairs generated can maintain their

420
00:18:23,280 --> 00:18:26,399
original semantics

421
00:18:26,880 --> 00:18:29,840
okay then we deploy seven months from

422
00:18:29,840 --> 00:18:33,600
these windows that is the nws49 i5

423
00:18:33,600 --> 00:18:36,240
server security cloud volume cloudflare

424
00:18:36,240 --> 00:18:38,640
and motor security and we send our

425
00:18:38,640 --> 00:18:40,960
pillows to them with four commonly user

426
00:18:40,960 --> 00:18:42,320
request method

427
00:18:42,320 --> 00:18:44,559
specifically as our modified backend

428
00:18:44,559 --> 00:18:47,840
available service supporter for commonly

429
00:18:47,840 --> 00:18:50,640
http request method that is a guidepost

430
00:18:50,640 --> 00:18:51,919
under their

431
00:18:51,919 --> 00:18:54,320
json types

432
00:18:54,320 --> 00:18:56,400
we find two and the mutation process in

433
00:18:56,400 --> 00:18:59,360
autosphere to prevent semantics

434
00:18:59,360 --> 00:19:02,080
across different request methods

435
00:19:02,080 --> 00:19:03,280
that is

436
00:19:03,280 --> 00:19:06,400
for example the slash n should be

437
00:19:06,400 --> 00:19:09,679
encoded either percentage0a in for

438
00:19:09,679 --> 00:19:11,440
non-json requests

439
00:19:11,440 --> 00:19:14,720
and the hash sign cannot be presented in

440
00:19:14,720 --> 00:19:15,760
comments

441
00:19:15,760 --> 00:19:18,559
when we're sending the payloading web

442
00:19:18,559 --> 00:19:20,879
get

443
00:19:21,039 --> 00:19:22,559
okay here are the

444
00:19:22,559 --> 00:19:24,640
other results firstly is the force

445
00:19:24,640 --> 00:19:27,600
negative region the fnr

446
00:19:27,600 --> 00:19:30,400
fmr directly reflects the protection

447
00:19:30,400 --> 00:19:32,720
effectiveness of our waves

448
00:19:32,720 --> 00:19:36,559
laminate both its obliqus and call flyer

449
00:19:36,559 --> 00:19:40,400
have fans of over 60 percent

450
00:19:40,400 --> 00:19:42,240
on the calgary design

451
00:19:42,240 --> 00:19:44,480
that is more than 60 percent of

452
00:19:44,480 --> 00:19:46,799
mauritius requests will be directly

453
00:19:46,799 --> 00:19:49,679
forwarded to the backend service

454
00:19:49,679 --> 00:19:52,320
further we can divide the last thing

455
00:19:52,320 --> 00:19:54,960
into four categories based on their

456
00:19:54,960 --> 00:19:58,799
responses to different request methods

457
00:19:58,799 --> 00:20:01,280
for example the cloud flyer replace

458
00:20:01,280 --> 00:20:03,600
repair implies means different

459
00:20:03,600 --> 00:20:04,799
strategies

460
00:20:04,799 --> 00:20:08,160
based on so whether the request is where

461
00:20:08,160 --> 00:20:09,760
get or post

462
00:20:09,760 --> 00:20:12,320
and itambas processes the payloads

463
00:20:12,320 --> 00:20:15,360
separately uh according wisest request

464
00:20:15,360 --> 00:20:17,120
parameter is

465
00:20:17,120 --> 00:20:19,520
in json type it's a motor security

466
00:20:19,520 --> 00:20:22,000
processes requests will get changing

467
00:20:22,000 --> 00:20:24,720
separately

468
00:20:25,600 --> 00:20:28,080
and here are the attackers success rate

469
00:20:28,080 --> 00:20:31,760
the asr the sra l-stress reporting is

470
00:20:31,760 --> 00:20:34,080
our award for organ but the warsaw

471
00:20:34,080 --> 00:20:36,159
attacks our attacks

472
00:20:36,159 --> 00:20:39,360
against wi-fi the service in the car is

473
00:20:39,360 --> 00:20:40,640
successful

474
00:20:40,640 --> 00:20:44,080
the aisles against the aws

475
00:20:44,080 --> 00:20:46,480
on the cargo data side you can reach the

476
00:20:46,480 --> 00:20:48,960
99 percent

477
00:20:48,960 --> 00:20:51,360
besides we can find that when requesting

478
00:20:51,360 --> 00:20:54,080
weber service injection type of

479
00:20:54,080 --> 00:20:56,720
parameters esrs are much higher than

480
00:20:56,720 --> 00:20:59,600
non-json it's a greater security risk

481
00:20:59,600 --> 00:21:01,760
given the current deployment trend of

482
00:21:01,760 --> 00:21:03,360
web services

483
00:21:03,360 --> 00:21:06,000
that has more and more web services are

484
00:21:06,000 --> 00:21:07,760
designed based on the decal powder

485
00:21:07,760 --> 00:21:09,280
architecture

486
00:21:09,280 --> 00:21:11,520
which most always use the json to

487
00:21:11,520 --> 00:21:14,799
transform the data

488
00:21:15,039 --> 00:21:18,600
and if a waffle shows higher

489
00:21:18,600 --> 00:21:21,360
efficiency it always enters that the

490
00:21:21,360 --> 00:21:23,280
protective effect is entered

491
00:21:23,280 --> 00:21:24,880
unsatisfactory

492
00:21:24,880 --> 00:21:28,320
if the fms or water is low but the esrs

493
00:21:28,320 --> 00:21:30,720
are relatively high it means that the

494
00:21:30,720 --> 00:21:33,120
wife cannot defend against the world

495
00:21:33,120 --> 00:21:36,159
structured adversarial tax

496
00:21:36,159 --> 00:21:38,960
the asrsr our e-12 has a similar

497
00:21:38,960 --> 00:21:42,080
distribution to fmrs which led to the

498
00:21:42,080 --> 00:21:45,039
foreign conclusion for example

499
00:21:45,039 --> 00:21:48,480
the forwards hosted on aws are less

500
00:21:48,480 --> 00:21:49,760
capable of

501
00:21:49,760 --> 00:21:53,360
providing sql ejection the volume is

502
00:21:53,360 --> 00:21:56,000
effective because it has low iphone and

503
00:21:56,000 --> 00:21:59,840
asr both and photonics has

504
00:21:59,840 --> 00:22:03,360
as many times higher than ethanol which

505
00:22:03,360 --> 00:22:05,840
means that it cannot defend against

506
00:22:05,840 --> 00:22:08,960
adversarial attacks very well

507
00:22:08,960 --> 00:22:11,440
however we must stress that

508
00:22:11,440 --> 00:22:14,080
so both results and the results and the

509
00:22:14,080 --> 00:22:16,960
rankings are obtained with our limited

510
00:22:16,960 --> 00:22:18,400
settings and

511
00:22:18,400 --> 00:22:19,600
samples

512
00:22:19,600 --> 00:22:22,640
it cannot fully represent the actual

513
00:22:22,640 --> 00:22:25,360
different effects against all samples in

514
00:22:25,360 --> 00:22:28,799
the world all these vendors

515
00:22:29,679 --> 00:22:32,720
and here i will play a short video

516
00:22:32,720 --> 00:22:36,080
to show the autobots attacking effect of

517
00:22:36,080 --> 00:22:38,799
auto spear

518
00:22:38,840 --> 00:22:42,880
okay uh here we first deploy

519
00:22:42,880 --> 00:22:45,919
web source on dvw

520
00:22:45,919 --> 00:22:50,039
on aws ec2

521
00:23:11,120 --> 00:23:13,600
and then we create a load balancer to

522
00:23:13,600 --> 00:23:17,799
access the web service

523
00:23:23,440 --> 00:23:27,440
here we can access the web service

524
00:23:27,760 --> 00:23:31,039
that's a normal request

525
00:23:32,159 --> 00:23:34,480
and now with the texas web service by

526
00:23:34,480 --> 00:23:37,840
sql injection

527
00:23:38,640 --> 00:23:42,159
y equals one it is

528
00:23:45,120 --> 00:23:47,600
as then we can steal some information

529
00:23:47,600 --> 00:23:51,120
from the website such as the

530
00:23:51,120 --> 00:23:53,918
database name

531
00:23:58,640 --> 00:24:02,000
and the column name

532
00:24:02,799 --> 00:24:06,080
sorry it's the table name

533
00:24:14,720 --> 00:24:18,679
here is a column name

534
00:24:23,039 --> 00:24:26,880
and even we can steal the data in the

535
00:24:26,880 --> 00:24:29,039
in the database

536
00:24:29,039 --> 00:24:30,840
the encrypted

537
00:24:30,840 --> 00:24:35,120
password we can decrypt it

538
00:24:45,440 --> 00:24:48,039
and the above attacks are against the

539
00:24:48,039 --> 00:24:51,120
unprotected website

540
00:24:51,120 --> 00:24:54,159
now we enable and configure the

541
00:24:54,159 --> 00:24:57,640
item sr

542
00:25:05,360 --> 00:25:07,840
first i will create a access control

543
00:25:07,840 --> 00:25:10,840
list

544
00:25:14,960 --> 00:25:18,960
and either our load balancer

545
00:25:20,880 --> 00:25:26,360
then we add some rules provided by aws

546
00:25:32,960 --> 00:25:34,720
for example the

547
00:25:34,720 --> 00:25:37,520
call center the knowing body inputs

548
00:25:37,520 --> 00:25:41,559
under the sql database

549
00:25:42,640 --> 00:25:44,960
all of them are used to prevent escrow

550
00:25:44,960 --> 00:25:47,960
injections

551
00:26:04,640 --> 00:26:07,520
okay we have opened and configured the

552
00:26:07,520 --> 00:26:09,520
aws one

553
00:26:09,520 --> 00:26:13,840
now we already attack the pillows

554
00:26:18,640 --> 00:26:22,600
okay the wife is on

555
00:26:27,600 --> 00:26:30,159
here is the original payload it is

556
00:26:30,159 --> 00:26:34,440
blocked by the aws one

557
00:26:41,360 --> 00:26:43,919
all pillows are blocked

558
00:26:43,919 --> 00:26:49,640
and the normal request still works

559
00:26:54,400 --> 00:26:57,760
and now we use autosphere to attack the

560
00:26:57,760 --> 00:27:01,679
hws one with three simple steps

561
00:27:01,679 --> 00:27:07,200
firstly copy the url of the target off

562
00:27:07,200 --> 00:27:09,919
that is the target web service

563
00:27:09,919 --> 00:27:12,880
and secondly writes a

564
00:27:12,880 --> 00:27:16,320
desired pillow to the configuration file

565
00:27:16,320 --> 00:27:21,000
and finally just around the script

566
00:27:30,880 --> 00:27:34,000
we can find that within several seconds

567
00:27:34,000 --> 00:27:36,320
all the pillows are

568
00:27:36,320 --> 00:27:39,918
attackers are successful

569
00:27:41,440 --> 00:27:45,520
okay here are the generated apparels

570
00:27:45,760 --> 00:27:48,880
let's test them one by one

571
00:27:48,880 --> 00:27:51,120
here is the original one it is blocked

572
00:27:51,120 --> 00:27:53,679
by the aws lab

573
00:27:53,679 --> 00:27:57,440
and here is the generated one

574
00:27:59,120 --> 00:28:04,279
okay we can now we can bypass 8.

575
00:28:26,080 --> 00:28:31,080
okay what can be bypassed successfully

576
00:28:31,840 --> 00:28:34,720
and we have found that all the generated

577
00:28:34,720 --> 00:28:38,399
payrolls that kind bypass the awf alpha

578
00:28:38,399 --> 00:28:42,918
are being added to some control symbols

579
00:28:44,960 --> 00:28:46,960
we can manually add some control symbols

580
00:28:46,960 --> 00:28:50,320
to bypass the aws one

581
00:28:50,320 --> 00:28:51,919
there's a

582
00:28:51,919 --> 00:28:53,520
session can

583
00:28:53,520 --> 00:28:54,559
let me

584
00:28:54,559 --> 00:28:57,440
go to the file from the password holder

585
00:28:57,440 --> 00:28:59,840
system

586
00:29:05,279 --> 00:29:08,000
and we can even write a website to the

587
00:29:08,000 --> 00:29:10,960
target web service

588
00:29:10,960 --> 00:29:13,840
okay

589
00:29:17,120 --> 00:29:20,479
here is a php info

590
00:29:20,799 --> 00:29:23,200
and we can execute the system

591
00:29:23,200 --> 00:29:25,919
terminations

592
00:29:33,679 --> 00:29:35,360
and the

593
00:29:35,360 --> 00:29:39,279
directory is double a

594
00:29:39,520 --> 00:29:41,840
okay

595
00:29:42,960 --> 00:29:44,799
let's continue

596
00:29:44,799 --> 00:29:47,679
here are more examples we select three

597
00:29:47,679 --> 00:29:50,240
representative pillars which can

598
00:29:50,240 --> 00:29:52,799
still table name column name and the

599
00:29:52,799 --> 00:29:55,600
sensitive information from the protected

600
00:29:55,600 --> 00:29:57,440
website

601
00:29:57,440 --> 00:30:00,000
just selecting the video we can

602
00:30:00,000 --> 00:30:02,320
replace replace white space with control

603
00:30:02,320 --> 00:30:04,159
symbols like the

604
00:30:04,159 --> 00:30:06,720
slash cheat session we can bypass aw as

605
00:30:06,720 --> 00:30:09,440
well and further first of all just the

606
00:30:09,440 --> 00:30:10,720
idea of

607
00:30:10,720 --> 00:30:12,240
a commenter

608
00:30:12,240 --> 00:30:13,840
or turn

609
00:30:13,840 --> 00:30:16,480
dml into inline comments we can bypass

610
00:30:16,480 --> 00:30:21,240
the i5 on the call flyer

611
00:30:22,960 --> 00:30:26,240
and as a ball commercial off a black box

612
00:30:26,240 --> 00:30:28,960
we further investigate the exact reason

613
00:30:28,960 --> 00:30:31,679
of bypassing by monitoring the audit

614
00:30:31,679 --> 00:30:33,840
drugs or motor security

615
00:30:33,840 --> 00:30:36,559
the multi-security is built and deployed

616
00:30:36,559 --> 00:30:39,120
by us

617
00:30:39,200 --> 00:30:40,080
take a

618
00:30:40,080 --> 00:30:42,159
ticket to the escrow injection panel as

619
00:30:42,159 --> 00:30:43,760
an example

620
00:30:43,760 --> 00:30:46,080
we need to buy the two engines at the

621
00:30:46,080 --> 00:30:47,440
same time

622
00:30:47,440 --> 00:30:49,840
that is a semantic

623
00:30:49,840 --> 00:30:51,840
analyzer engine under the regular

624
00:30:51,840 --> 00:30:54,240
mentioned laser engine you can find that

625
00:30:54,240 --> 00:30:57,279
adjuster id or selector zero or you can

626
00:30:57,279 --> 00:30:59,520
bypass the label injection

627
00:30:59,520 --> 00:31:01,360
under idle comment

628
00:31:01,360 --> 00:31:04,960
we can bypass motor security completely

629
00:31:04,960 --> 00:31:07,679
in summary this case studies froze away

630
00:31:07,679 --> 00:31:09,279
from our conjunction whether the

631
00:31:09,279 --> 00:31:12,799
detection signatures are non-robust

632
00:31:12,799 --> 00:31:16,399
causing thorough vulnerabilities

633
00:31:16,399 --> 00:31:18,640
and based on the hierarchical traits

634
00:31:18,640 --> 00:31:19,760
during

635
00:31:19,760 --> 00:31:22,080
attacking we present the effective

636
00:31:22,080 --> 00:31:24,960
mutation method for wi-fi the source in

637
00:31:24,960 --> 00:31:26,399
the cloud

638
00:31:26,399 --> 00:31:28,960
uh you can see that i mean this table

639
00:31:28,960 --> 00:31:31,520
for example the

640
00:31:31,520 --> 00:31:34,399
uh just adding some comments we can

641
00:31:34,399 --> 00:31:36,159
bypass forwards

642
00:31:36,159 --> 00:31:38,320
under specific pills

643
00:31:38,320 --> 00:31:40,799
and the lucky attackers come manually

644
00:31:40,799 --> 00:31:43,279
using this conclusion to bypass some

645
00:31:43,279 --> 00:31:46,720
wealth however the effective mutations

646
00:31:46,720 --> 00:31:48,799
for specific graphs under different

647
00:31:48,799 --> 00:31:52,320
pairs are unique that is

648
00:31:52,320 --> 00:31:54,880
only a combination of multiple mutations

649
00:31:54,880 --> 00:31:59,039
for specific locations takes efforts

650
00:31:59,120 --> 00:32:01,440
uh that is auto sphere is much more

651
00:32:01,440 --> 00:32:03,440
effective in bypassing the mainstream

652
00:32:03,440 --> 00:32:07,039
offer as a storage solution

653
00:32:07,519 --> 00:32:08,640
because

654
00:32:08,640 --> 00:32:10,799
this wi-fi as a service has a vulnerable

655
00:32:10,799 --> 00:32:13,200
detection signatures for both

656
00:32:13,200 --> 00:32:14,960
symmetrical matching and the regular

657
00:32:14,960 --> 00:32:17,919
expression machine

658
00:32:17,919 --> 00:32:20,399
and then now here are the feedback from

659
00:32:20,399 --> 00:32:22,240
mainstream windows

660
00:32:22,240 --> 00:32:24,399
we reported our findings with the

661
00:32:24,399 --> 00:32:26,960
affected vendors by submitting

662
00:32:26,960 --> 00:32:29,840
vulnerability reports and contacting

663
00:32:29,840 --> 00:32:32,159
their technical support staff and the

664
00:32:32,159 --> 00:32:35,600
security researchers up until now f5

665
00:32:35,600 --> 00:32:37,360
called the flyer and volume have

666
00:32:37,360 --> 00:32:40,320
mitigated the frozen and the other

667
00:32:40,320 --> 00:32:43,200
four a still working with us

668
00:32:43,200 --> 00:32:45,600
as the flow of the way we found cannot

669
00:32:45,600 --> 00:32:48,480
be easily packed

670
00:32:48,880 --> 00:32:51,440
and for example the security incident

671
00:32:51,440 --> 00:32:53,600
response team or i5

672
00:32:53,600 --> 00:32:55,200
have mitigated

673
00:32:55,200 --> 00:32:58,000
to fraud the reported bias within yms

674
00:32:58,000 --> 00:33:00,320
nazi how added our names to their

675
00:33:00,320 --> 00:33:03,279
official website

676
00:33:04,640 --> 00:33:05,760
okay

677
00:33:05,760 --> 00:33:08,240
to sum up we have proved that wifi is

678
00:33:08,240 --> 00:33:10,960
the source from mixed frames

679
00:33:10,960 --> 00:33:13,360
mainstream windows can be bypassed in a

680
00:33:13,360 --> 00:33:16,159
fully automatic and intelligent manner

681
00:33:16,159 --> 00:33:18,960
and specifically we propose autosphere

682
00:33:18,960 --> 00:33:22,159
which utilizes a semantic-based mutation

683
00:33:22,159 --> 00:33:24,640
strategy and a heuristic switching

684
00:33:24,640 --> 00:33:28,159
strategy suitable for black box attacks

685
00:33:28,159 --> 00:33:30,480
and we have to summarize the worst

686
00:33:30,480 --> 00:33:33,120
underlying message of waves in the wider

687
00:33:33,120 --> 00:33:35,440
and there are actual different effects

688
00:33:35,440 --> 00:33:37,360
based on our limited

689
00:33:37,360 --> 00:33:39,120
samples and

690
00:33:39,120 --> 00:33:41,679
settings in addition we disclose some

691
00:33:41,679 --> 00:33:43,679
general bypass patterns

692
00:33:43,679 --> 00:33:44,559
that

693
00:33:44,559 --> 00:33:47,840
defenders can use them to employ you can

694
00:33:47,840 --> 00:33:51,840
use them to improve their products

695
00:33:51,840 --> 00:33:54,080
okay thank you for your attention i will

696
00:33:54,080 --> 00:33:56,240
now take some questions from the

697
00:33:56,240 --> 00:33:59,240
audience

698
00:34:07,679 --> 00:34:09,359
thank you very much

699
00:34:09,359 --> 00:34:11,119
um the first question is from tian

700
00:34:11,119 --> 00:34:12,239
yuitang

701
00:34:12,239 --> 00:34:14,879
he's asking if how do you configure this

702
00:34:14,879 --> 00:34:17,440
waf in your evaluation

703
00:34:17,440 --> 00:34:21,839
and are they all in default settings

704
00:34:22,239 --> 00:34:24,079
okay

705
00:34:24,079 --> 00:34:27,679
thanks for your valuable question

706
00:34:27,679 --> 00:34:30,159
in fact we have

707
00:34:30,159 --> 00:34:33,560
we have deployed

708
00:34:34,000 --> 00:34:35,760
uh sorry uh

709
00:34:35,760 --> 00:34:38,399
we have deployed our own websites and

710
00:34:38,399 --> 00:34:40,800
databases on the google cloud platform

711
00:34:40,800 --> 00:34:43,760
and protecting them utilizing the data

712
00:34:43,760 --> 00:34:45,839
service in turn

713
00:34:45,839 --> 00:34:48,399
the waves are

714
00:34:48,399 --> 00:34:50,480
following their default configuration

715
00:34:50,480 --> 00:34:52,000
specifically

716
00:34:52,000 --> 00:34:55,599
for the aws 49er i500 cyber security

717
00:34:55,599 --> 00:34:58,720
cloud these four they require manual

718
00:34:58,720 --> 00:35:01,440
rules configuration and we have enabled

719
00:35:01,440 --> 00:35:04,000
call reciter that is suitable for

720
00:35:04,000 --> 00:35:08,560
protection against the owasp top 10

721
00:35:08,560 --> 00:35:10,960
attacks and there are advanced rule

722
00:35:10,960 --> 00:35:14,980
setters for sql injection

723
00:35:14,980 --> 00:35:18,039
[Music]

724
00:35:21,900 --> 00:35:23,040
[Music]

725
00:35:23,040 --> 00:35:25,119
you

