1
00:00:08,240 --> 00:00:10,080
thank you for joining our talk on back

2
00:00:10,080 --> 00:00:12,480
building real-time automotive os devices

3
00:00:12,480 --> 00:00:14,160
my name is shakir delavea i'm a security

4
00:00:14,160 --> 00:00:16,160
researcher at algo cyber security and

5
00:00:16,160 --> 00:00:17,920
today with me is ariel

6
00:00:17,920 --> 00:00:19,840
yeah hey guys so my name is ariel

7
00:00:19,840 --> 00:00:22,000
kadishevic and i'm leading our security

8
00:00:22,000 --> 00:00:23,279
research team

9
00:00:23,279 --> 00:00:24,080
so

10
00:00:24,080 --> 00:00:25,680
at argus we're developing various

11
00:00:25,680 --> 00:00:28,800
products for automotive cyber security

12
00:00:28,800 --> 00:00:30,880
and our team is doing security research

13
00:00:30,880 --> 00:00:32,719
and consultancy for different clients in

14
00:00:32,719 --> 00:00:34,480
the automotive industry

15
00:00:34,480 --> 00:00:36,559
so today we're going to tell you guys

16
00:00:36,559 --> 00:00:38,480
about the amusing story of how we got

17
00:00:38,480 --> 00:00:41,040
into compromising a bare metal device

18
00:00:41,040 --> 00:00:42,800
just to prove a point to a client and

19
00:00:42,800 --> 00:00:45,280
what we learned on the way

20
00:00:45,280 --> 00:00:46,399
great so

21
00:00:46,399 --> 00:00:48,399
before we dive in i would like to start

22
00:00:48,399 --> 00:00:50,000
with some automotive background just to

23
00:00:50,000 --> 00:00:52,160
get everyone straight here

24
00:00:52,160 --> 00:00:55,039
so basically a modern car today is

25
00:00:55,039 --> 00:00:57,199
composed of this dozens or even more

26
00:00:57,199 --> 00:01:00,160
than 100 ecu's ecu what you see on the

27
00:01:00,160 --> 00:01:02,800
screen it means electronic compo and

28
00:01:02,800 --> 00:01:05,199
electronic control unit

29
00:01:05,199 --> 00:01:06,240
so

30
00:01:06,240 --> 00:01:07,920
these different tcus they all

31
00:01:07,920 --> 00:01:10,640
communicate through the canvas so this

32
00:01:10,640 --> 00:01:13,040
is um this is the one of the most used

33
00:01:13,040 --> 00:01:15,600
communication lines inside of the car

34
00:01:15,600 --> 00:01:17,920
and something to note just to an example

35
00:01:17,920 --> 00:01:20,000
so an ecu can be for example you know

36
00:01:20,000 --> 00:01:21,520
the nice screen where you connect your

37
00:01:21,520 --> 00:01:22,880
phone through bluetooth to play some

38
00:01:22,880 --> 00:01:25,280
music to the head unit another example

39
00:01:25,280 --> 00:01:27,840
can be for example uh the tcu telematics

40
00:01:27,840 --> 00:01:30,240
control unit the one that has sim card

41
00:01:30,240 --> 00:01:32,159
and has some communication with the back

42
00:01:32,159 --> 00:01:34,960
end of the of the manufacturer

43
00:01:34,960 --> 00:01:37,439
and another example could could be the

44
00:01:37,439 --> 00:01:39,200
instrument cluster which you see on the

45
00:01:39,200 --> 00:01:40,880
left side this is the dashboard where

46
00:01:40,880 --> 00:01:42,880
you see the speed and the oil

47
00:01:42,880 --> 00:01:44,320
temperature

48
00:01:44,320 --> 00:01:46,320
so this is the instrument cluster

49
00:01:46,320 --> 00:01:48,000
and another thing to note before we

50
00:01:48,000 --> 00:01:50,159
start is that some of these devices have

51
00:01:50,159 --> 00:01:52,720
this rich operating system

52
00:01:52,720 --> 00:01:54,720
like the head unit that i told you about

53
00:01:54,720 --> 00:01:56,720
that you connect with your phone or the

54
00:01:56,720 --> 00:01:59,040
one that has the cellular communication

55
00:01:59,040 --> 00:02:00,799
uh rich environment like rich operating

56
00:02:00,799 --> 00:02:03,600
system like linux or qnx but

57
00:02:03,600 --> 00:02:05,600
most of the other ecu's they have this

58
00:02:05,600 --> 00:02:08,239
monolithic firmware so basically one

59
00:02:08,239 --> 00:02:10,399
software compiled all together with the

60
00:02:10,399 --> 00:02:11,920
operating system the application and

61
00:02:11,920 --> 00:02:13,599
it's running on bare metal

62
00:02:13,599 --> 00:02:16,319
to have this real-time

63
00:02:16,319 --> 00:02:17,920
real-time environment

64
00:02:17,920 --> 00:02:19,120
and they all communicate through this

65
00:02:19,120 --> 00:02:20,560
bus

66
00:02:20,560 --> 00:02:23,440
great so our story begins

67
00:02:23,440 --> 00:02:25,280
um our story begins with this instrument

68
00:02:25,280 --> 00:02:27,520
cluster not as old not the old one that

69
00:02:27,520 --> 00:02:29,200
you see on top but something nicer

70
00:02:29,200 --> 00:02:31,360
digital one like you see in the middle

71
00:02:31,360 --> 00:02:32,800
and we found this really powerful

72
00:02:32,800 --> 00:02:34,720
vulnerability on it

73
00:02:34,720 --> 00:02:36,720
so we tell the client about it

74
00:02:36,720 --> 00:02:38,160
uh because we're doing this research you

75
00:02:38,160 --> 00:02:40,000
know uh where we we

76
00:02:40,000 --> 00:02:42,000
try to find the issues in the in the

77
00:02:42,000 --> 00:02:43,760
components and the client was not really

78
00:02:43,760 --> 00:02:44,959
convinced

79
00:02:44,959 --> 00:02:46,319
he tells us

80
00:02:46,319 --> 00:02:48,160
well but what can you really do with

81
00:02:48,160 --> 00:02:50,879
this ecu like you can't really do it's

82
00:02:50,879 --> 00:02:53,840
not linux you can't really run anything

83
00:02:53,840 --> 00:02:54,800
on it

84
00:02:54,800 --> 00:02:56,160
and then we're

85
00:02:56,160 --> 00:02:58,239
yes but this is an instrument cluster

86
00:02:58,239 --> 00:03:00,160
right think about it how many bad things

87
00:03:00,160 --> 00:03:02,319
i can do that i can show you know the

88
00:03:02,319 --> 00:03:04,239
wrong speed like this is a safety

89
00:03:04,239 --> 00:03:06,400
critical ecu this is something pretty

90
00:03:06,400 --> 00:03:07,840
important

91
00:03:07,840 --> 00:03:10,560
and then he says yes but we have secure

92
00:03:10,560 --> 00:03:12,480
boots and then our face was something

93
00:03:12,480 --> 00:03:13,840
like that but

94
00:03:13,840 --> 00:03:17,280
never mind let's keep it for later

95
00:03:17,360 --> 00:03:19,440
something to note before we continue is

96
00:03:19,440 --> 00:03:22,319
that fixing issue and vulnerabilities uh

97
00:03:22,319 --> 00:03:23,840
in the automotive industry it's pretty

98
00:03:23,840 --> 00:03:26,159
hard because the software upgrade is not

99
00:03:26,159 --> 00:03:28,080
always available for all the types of

100
00:03:28,080 --> 00:03:29,680
devices in the car

101
00:03:29,680 --> 00:03:31,599
and think about it it's safety critical

102
00:03:31,599 --> 00:03:33,599
devices so the testing cycles are pretty

103
00:03:33,599 --> 00:03:35,760
long it's not that you can like patch

104
00:03:35,760 --> 00:03:37,120
every week

105
00:03:37,120 --> 00:03:39,760
these devices so it's it's not you do it

106
00:03:39,760 --> 00:03:42,239
only if it's really needed

107
00:03:42,239 --> 00:03:43,760
so it said okay

108
00:03:43,760 --> 00:03:45,599
there's a really serious issue and

109
00:03:45,599 --> 00:03:46,959
they're not convinced when you talk

110
00:03:46,959 --> 00:03:49,040
somehow explain it to them so we thought

111
00:03:49,040 --> 00:03:50,640
to ourself okay maybe we'll show them

112
00:03:50,640 --> 00:03:52,720
like shell access like you do in a linux

113
00:03:52,720 --> 00:03:53,599
system

114
00:03:53,599 --> 00:03:56,959
or maybe we show something more visual

115
00:03:56,959 --> 00:03:59,120
because it's an instrument cluster right

116
00:03:59,120 --> 00:04:01,760
and we thought ourselves in general how

117
00:04:01,760 --> 00:04:03,599
how would look like to compromise such a

118
00:04:03,599 --> 00:04:05,840
device like this

119
00:04:05,840 --> 00:04:08,080
and before we go into it i want to have

120
00:04:08,080 --> 00:04:09,680
something imaginary to do with you

121
00:04:09,680 --> 00:04:11,120
together

122
00:04:11,120 --> 00:04:13,920
so i want to imagine us selling some ctf

123
00:04:13,920 --> 00:04:16,079
on a linux based system and by the way

124
00:04:16,079 --> 00:04:17,358
i'm going to say linux we're going to

125
00:04:17,358 --> 00:04:18,880
say linux in this talk many times but

126
00:04:18,880 --> 00:04:21,199
linux is just a reference for a rich

127
00:04:21,199 --> 00:04:23,040
operating system environment

128
00:04:23,040 --> 00:04:24,639
so it still holds everything on the top

129
00:04:24,639 --> 00:04:26,160
today still holds for other rich

130
00:04:26,160 --> 00:04:27,680
operating systems

131
00:04:27,680 --> 00:04:30,639
like android macos and others so this is

132
00:04:30,639 --> 00:04:31,919
just an example

133
00:04:31,919 --> 00:04:32,800
and

134
00:04:32,800 --> 00:04:34,400
imagine yourself solving the ctf on a

135
00:04:34,400 --> 00:04:36,080
linux okay and you go through the

136
00:04:36,080 --> 00:04:38,639
agonizing process of beating those

137
00:04:38,639 --> 00:04:40,240
different mitigations and you use

138
00:04:40,240 --> 00:04:42,320
different techniques and maybe you find

139
00:04:42,320 --> 00:04:44,160
another vulnerability to have some info

140
00:04:44,160 --> 00:04:46,560
leak because you need to you know solve

141
00:04:46,560 --> 00:04:48,000
a lot of problems

142
00:04:48,000 --> 00:04:50,160
and then finally after all the agonized

143
00:04:50,160 --> 00:04:52,320
process you succeed okay and then you

144
00:04:52,320 --> 00:04:55,440
run probably something like that

145
00:04:55,440 --> 00:04:57,120
this is a nice example this is a command

146
00:04:57,120 --> 00:04:59,040
that gives you basically a reverse shell

147
00:04:59,040 --> 00:05:00,479
tcp server

148
00:05:00,479 --> 00:05:01,919
so this is a nice example because it's a

149
00:05:01,919 --> 00:05:03,680
one-liner that gives you the ability to

150
00:05:03,680 --> 00:05:06,320
now command and control the system

151
00:05:06,320 --> 00:05:07,840
through a socket

152
00:05:07,840 --> 00:05:10,000
and that's great and then we thought to

153
00:05:10,000 --> 00:05:12,160
ourself okay now we're coming to our you

154
00:05:12,160 --> 00:05:14,560
know our case and we thought ourselves

155
00:05:14,560 --> 00:05:16,560
well in bare metal devices

156
00:05:16,560 --> 00:05:18,800
what exactly are the things that we use

157
00:05:18,800 --> 00:05:20,320
you know the one liner that we've seen

158
00:05:20,320 --> 00:05:22,160
before we thought ourselves what exactly

159
00:05:22,160 --> 00:05:24,800
are the sockets on our device or what

160
00:05:24,800 --> 00:05:27,600
exactly is the system that we called and

161
00:05:27,600 --> 00:05:29,600
we don't really have a shell there and

162
00:05:29,600 --> 00:05:31,039
processes is something that we don't

163
00:05:31,039 --> 00:05:33,520
have there and of course pipe and we

164
00:05:33,520 --> 00:05:35,120
asked yourself like where the hell are

165
00:05:35,120 --> 00:05:37,919
demand pages right

166
00:05:37,919 --> 00:05:40,000
so before we dive in i just want to say

167
00:05:40,000 --> 00:05:42,000
that in general and speaking very in

168
00:05:42,000 --> 00:05:44,000
general we took uh you know compromising

169
00:05:44,000 --> 00:05:46,560
of a device through two major steps

170
00:05:46,560 --> 00:05:48,080
uh the first step is achieving this

171
00:05:48,080 --> 00:05:50,240
initial code execution

172
00:05:50,240 --> 00:05:52,320
and the second one is constructing a

173
00:05:52,320 --> 00:05:54,639
backdoor having the stable execution

174
00:05:54,639 --> 00:05:56,080
and while we've seen that in modern

175
00:05:56,080 --> 00:05:58,160
systems the first step is very complex

176
00:05:58,160 --> 00:05:59,600
and very hard because of different

177
00:05:59,600 --> 00:06:01,919
modern mitigations the second step is

178
00:06:01,919 --> 00:06:04,000
still complex but not as complex as the

179
00:06:04,000 --> 00:06:07,120
first one because you have a lot a rich

180
00:06:07,120 --> 00:06:09,360
rich system that you can rely on

181
00:06:09,360 --> 00:06:11,280
and now we want to find how find out how

182
00:06:11,280 --> 00:06:14,638
it looks like on our system

183
00:06:15,840 --> 00:06:17,280
yes so

184
00:06:17,280 --> 00:06:19,360
embeddedly speaking we're talking about

185
00:06:19,360 --> 00:06:22,080
the naga h850 microcontroller it is

186
00:06:22,080 --> 00:06:24,240
these family of microcontrollers are

187
00:06:24,240 --> 00:06:26,560
produced by renaissance and

188
00:06:26,560 --> 00:06:28,400
they are very prominent in ecu's because

189
00:06:28,400 --> 00:06:30,720
of their very good and very powerful

190
00:06:30,720 --> 00:06:32,160
automotive

191
00:06:32,160 --> 00:06:34,240
automotive support directly in hardware

192
00:06:34,240 --> 00:06:36,479
so for example you can find uh support

193
00:06:36,479 --> 00:06:39,120
for uh for the various inter

194
00:06:39,120 --> 00:06:41,360
communication interfaces for con flex

195
00:06:41,360 --> 00:06:44,800
rays on auto automotive ethernet as well

196
00:06:44,800 --> 00:06:46,639
uh the microcontroller this one

197
00:06:46,639 --> 00:06:48,880
specifically has two privilege levels

198
00:06:48,880 --> 00:06:51,199
the supervisor and the user mode which

199
00:06:51,199 --> 00:06:52,880
is kind of like

200
00:06:52,880 --> 00:06:56,240
what we know from x 86 with the ring

201
00:06:56,240 --> 00:06:58,800
and the privilege levels on arm

202
00:06:58,800 --> 00:07:00,000
so

203
00:07:00,000 --> 00:07:02,639
one one last thing is that this

204
00:07:02,639 --> 00:07:05,680
microcontroller eventually runs

205
00:07:05,680 --> 00:07:07,680
a bare metal monolithic firmware which

206
00:07:07,680 --> 00:07:09,919
once it is compiled and flashed it is

207
00:07:09,919 --> 00:07:11,840
running there forever until of course it

208
00:07:11,840 --> 00:07:13,599
is updated which is not that easy as we

209
00:07:13,599 --> 00:07:14,840
know

210
00:07:14,840 --> 00:07:18,080
so this microcontroller is just a part

211
00:07:18,080 --> 00:07:20,800
of this larger ecu the ecu may contain

212
00:07:20,800 --> 00:07:22,960
more than one uh microcontroller that we

213
00:07:22,960 --> 00:07:25,680
work with and this one is actually is

214
00:07:25,680 --> 00:07:28,000
the only one that has access to the can

215
00:07:28,000 --> 00:07:30,560
so our only interface with this with

216
00:07:30,560 --> 00:07:32,880
this microcontroller with this ecu is

217
00:07:32,880 --> 00:07:34,400
through this microcontroller through the

218
00:07:34,400 --> 00:07:36,960
cam and as we mentioned so the can

219
00:07:36,960 --> 00:07:38,960
itself is a broadcast bus all of the

220
00:07:38,960 --> 00:07:40,800
nodes are connected and they are talking

221
00:07:40,800 --> 00:07:43,120
and just sending messages for everyone

222
00:07:43,120 --> 00:07:45,680
to see so uh

223
00:07:45,680 --> 00:07:46,880
in order to do that we're not going to

224
00:07:46,880 --> 00:07:48,960
get into the details of the actual uh

225
00:07:48,960 --> 00:07:51,440
protocol but in order to send data you

226
00:07:51,440 --> 00:07:54,160
have to pack it in this scan frame and

227
00:07:54,160 --> 00:07:56,160
the kind frame is there to decide for

228
00:07:56,160 --> 00:08:00,319
example which which ecu this message is

229
00:08:00,319 --> 00:08:01,520
intended for

230
00:08:01,520 --> 00:08:04,720
and many other stuff but this leaves us

231
00:08:04,720 --> 00:08:06,720
with a fixed amount of data that we're

232
00:08:06,720 --> 00:08:08,639
able to send each and each and each

233
00:08:08,639 --> 00:08:10,800
frame so for example for the classic

234
00:08:10,800 --> 00:08:12,960
version of can you have eight bytes to

235
00:08:12,960 --> 00:08:15,280
work with and for the can fd the

236
00:08:15,280 --> 00:08:18,960
extension of it you have 64 bytes

237
00:08:18,960 --> 00:08:20,560
okay so

238
00:08:20,560 --> 00:08:22,960
we have 64 bytes and this is the this is

239
00:08:22,960 --> 00:08:25,120
the actual context that we're using

240
00:08:25,120 --> 00:08:28,240
with this ecu we have can fd with it

241
00:08:28,240 --> 00:08:30,400
so we do have 64 bytes that we're able

242
00:08:30,400 --> 00:08:32,000
to send to this scu

243
00:08:32,000 --> 00:08:33,200
and let's start talking about the

244
00:08:33,200 --> 00:08:35,120
vulnerability

245
00:08:35,120 --> 00:08:38,000
our vulnerability starts just as others

246
00:08:38,000 --> 00:08:40,399
just as a lot of others start

247
00:08:40,399 --> 00:08:43,679
with with a mem copy and the mem copy is

248
00:08:43,679 --> 00:08:46,560
copying our own 64 bytes of data to

249
00:08:46,560 --> 00:08:48,480
somewhere in memory that's somewhere in

250
00:08:48,480 --> 00:08:52,160
memory is let's call it some ptr

251
00:08:52,160 --> 00:08:54,399
well turns out that

252
00:08:54,399 --> 00:08:56,720
some ptr is actually pointing to a

253
00:08:56,720 --> 00:08:59,200
buffer of size

254
00:08:59,200 --> 00:09:02,320
well less than 64 bytes great so we have

255
00:09:02,320 --> 00:09:03,839
a pretty nice

256
00:09:03,839 --> 00:09:06,240
pretty classic and boring

257
00:09:06,240 --> 00:09:10,160
buffer overflow but it turns out that

258
00:09:10,160 --> 00:09:12,560
we wanted to look out what exactly is

259
00:09:12,560 --> 00:09:15,120
past that buffer and it turns out that

260
00:09:15,120 --> 00:09:17,600
the same sum ptr

261
00:09:17,600 --> 00:09:20,320
is actually located directly after the

262
00:09:20,320 --> 00:09:22,560
over the overridden buffer

263
00:09:22,560 --> 00:09:25,200
so that gives us effectively that gives

264
00:09:25,200 --> 00:09:26,959
us a very powerful primitive because

265
00:09:26,959 --> 00:09:29,279
we're able to override the pointer so

266
00:09:29,279 --> 00:09:30,880
that the next time that the memcob is

267
00:09:30,880 --> 00:09:32,880
taking place we are controlling the

268
00:09:32,880 --> 00:09:34,240
destination of it

269
00:09:34,240 --> 00:09:35,600
so that means that the next frame that

270
00:09:35,600 --> 00:09:37,040
we're going to that we're going to send

271
00:09:37,040 --> 00:09:38,480
is actually going to be copied to

272
00:09:38,480 --> 00:09:40,000
wherever we want

273
00:09:40,000 --> 00:09:41,360
and

274
00:09:41,360 --> 00:09:43,760
so if that was not enough the entire

275
00:09:43,760 --> 00:09:45,839
code the the code the vulnerable code

276
00:09:45,839 --> 00:09:47,519
that is running is actually part of an

277
00:09:47,519 --> 00:09:50,000
interrupt service routine so it's part

278
00:09:50,000 --> 00:09:52,320
of an interrupt and that effectively

279
00:09:52,320 --> 00:09:54,880
means that we are running in supervisor

280
00:09:54,880 --> 00:09:57,519
mode so anything that might

281
00:09:57,519 --> 00:09:59,680
that might could present itself as an

282
00:09:59,680 --> 00:10:01,040
obstacle to us

283
00:10:01,040 --> 00:10:03,600
we might even be able to overcome it

284
00:10:03,600 --> 00:10:06,320
so to summarize quickly we have uh we

285
00:10:06,320 --> 00:10:08,160
can send one frame that is going to

286
00:10:08,160 --> 00:10:10,240
override the pointer with let's say cafe

287
00:10:10,240 --> 00:10:11,200
cafe

288
00:10:11,200 --> 00:10:12,800
the pointer is now overwritten and it's

289
00:10:12,800 --> 00:10:14,640
now pointing to somewhere in memory

290
00:10:14,640 --> 00:10:17,279
which is uh well cafe

291
00:10:17,279 --> 00:10:18,399
the second frame that we're going to

292
00:10:18,399 --> 00:10:20,720
send is dead beef and that dead beef is

293
00:10:20,720 --> 00:10:23,360
going to be copied to a cafe cafe

294
00:10:23,360 --> 00:10:25,760
now the problem with this

295
00:10:25,760 --> 00:10:28,079
particular primitive is that the third

296
00:10:28,079 --> 00:10:29,920
frame that we're going to send

297
00:10:29,920 --> 00:10:32,480
is actually going to be copied again to

298
00:10:32,480 --> 00:10:34,720
the same to the same database sorry to

299
00:10:34,720 --> 00:10:36,320
the same cafe cafe so

300
00:10:36,320 --> 00:10:38,160
really the we're only overriding

301
00:10:38,160 --> 00:10:40,320
ourselves at this point and this is

302
00:10:40,320 --> 00:10:41,440
something that we're going to have to

303
00:10:41,440 --> 00:10:43,440
consider when we uh escalate this

304
00:10:43,440 --> 00:10:44,480
further

305
00:10:44,480 --> 00:10:46,720
so great this is a nice primitive what

306
00:10:46,720 --> 00:10:48,720
can we do with it well

307
00:10:48,720 --> 00:10:51,120
uh since we want to convince our client

308
00:10:51,120 --> 00:10:52,480
that this vulnerability is serious we

309
00:10:52,480 --> 00:10:55,279
have to show him something and this ecu

310
00:10:55,279 --> 00:10:58,000
which is a part of this can network

311
00:10:58,000 --> 00:11:00,959
it is talking to uh to other nodes and

312
00:11:00,959 --> 00:11:02,959
since this is a broadcast bus sometimes

313
00:11:02,959 --> 00:11:04,560
these devices are using encryption to

314
00:11:04,560 --> 00:11:06,720
verify or or well just encrypt some of

315
00:11:06,720 --> 00:11:08,800
the messages so that means it contains

316
00:11:08,800 --> 00:11:11,440
some sort of a secret insight and well

317
00:11:11,440 --> 00:11:13,279
the easiest thing would be to would be

318
00:11:13,279 --> 00:11:15,040
to lick it to leak it

319
00:11:15,040 --> 00:11:16,640
and this is exactly what we set off as a

320
00:11:16,640 --> 00:11:18,720
target so we try to look and

321
00:11:18,720 --> 00:11:20,640
to look at ways in which we can leak for

322
00:11:20,640 --> 00:11:22,000
example a very important secret from

323
00:11:22,000 --> 00:11:23,200
this issue

324
00:11:23,200 --> 00:11:24,560
and for example

325
00:11:24,560 --> 00:11:26,079
an aes key

326
00:11:26,079 --> 00:11:27,200
so

327
00:11:27,200 --> 00:11:29,519
we founded this function called constant

328
00:11:29,519 --> 00:11:31,600
which as you can guess sends data on the

329
00:11:31,600 --> 00:11:34,720
bus on the can bus and we decided that

330
00:11:34,720 --> 00:11:37,279
the easiest way to to call that function

331
00:11:37,279 --> 00:11:39,120
to make the cpu call that function would

332
00:11:39,120 --> 00:11:42,320
be to simply rope our way to it and this

333
00:11:42,320 --> 00:11:43,920
is where we found out that the

334
00:11:43,920 --> 00:11:47,279
monolithic firmware does make a present

335
00:11:47,279 --> 00:11:50,079
some sort of mitigations which is nice

336
00:11:50,079 --> 00:11:52,240
okay so we have a stack finale that is

337
00:11:52,240 --> 00:11:54,399
supposed to protect the stack pointer

338
00:11:54,399 --> 00:11:56,720
from being overwritten but it's not

339
00:11:56,720 --> 00:11:58,160
really effective at this point because

340
00:11:58,160 --> 00:12:00,480
we can just override wherever we want

341
00:12:00,480 --> 00:12:02,320
so this is exactly what we did and we

342
00:12:02,320 --> 00:12:05,680
did some uh a small rope trick to load

343
00:12:05,680 --> 00:12:07,839
the the destination the destination

344
00:12:07,839 --> 00:12:11,279
registers that we want ahead and just

345
00:12:11,279 --> 00:12:13,600
call the function so that a content is

346
00:12:13,600 --> 00:12:16,160
being called with the with the data that

347
00:12:16,160 --> 00:12:17,760
we want to leak

348
00:12:17,760 --> 00:12:19,360
and this is exactly what we did and we

349
00:12:19,360 --> 00:12:21,839
showed it to the client but it was still

350
00:12:21,839 --> 00:12:24,560
somewhat not convinced so he said

351
00:12:24,560 --> 00:12:27,760
something like yeah the the this is this

352
00:12:27,760 --> 00:12:29,680
is really bad but the keys are actually

353
00:12:29,680 --> 00:12:31,680
different across all cars and all across

354
00:12:31,680 --> 00:12:33,279
all ecu's

355
00:12:33,279 --> 00:12:34,959
you're not really leaking a lot of data

356
00:12:34,959 --> 00:12:37,040
this is only 64 bytes and worst of all

357
00:12:37,040 --> 00:12:39,279
after you rope after you're doing this

358
00:12:39,279 --> 00:12:41,440
exploit the cpu crashes and the entire

359
00:12:41,440 --> 00:12:43,680
system crashes and it just reboots again

360
00:12:43,680 --> 00:12:45,120
so that's really not

361
00:12:45,120 --> 00:12:47,360
an issue for him well

362
00:12:47,360 --> 00:12:49,200
okay so that didn't do the trick how

363
00:12:49,200 --> 00:12:50,800
about we escalate this further how about

364
00:12:50,800 --> 00:12:54,079
we try to run arbitrary shell code on

365
00:12:54,079 --> 00:12:55,519
this device and let's see what we can

366
00:12:55,519 --> 00:12:57,120
really do with this

367
00:12:57,120 --> 00:12:59,760
so it turns out that

368
00:12:59,760 --> 00:13:00,560
we

369
00:13:00,560 --> 00:13:02,399
that our buffer is actually being copied

370
00:13:02,399 --> 00:13:04,160
to various other locations before it

371
00:13:04,160 --> 00:13:06,639
actually goes to the vulnerable code and

372
00:13:06,639 --> 00:13:08,160
that means that

373
00:13:08,160 --> 00:13:09,839
and what we found out is that one of

374
00:13:09,839 --> 00:13:11,519
these locations is that was actually

375
00:13:11,519 --> 00:13:14,240
executable so we are able to just have

376
00:13:14,240 --> 00:13:16,639
the second frame contain shell code for

377
00:13:16,639 --> 00:13:21,200
the rh850 and just jump directly to it

378
00:13:21,200 --> 00:13:23,600
but this presents some other challenge

379
00:13:23,600 --> 00:13:25,600
that we have to work with because as you

380
00:13:25,600 --> 00:13:27,839
recall uh we only have 64 bytes of data

381
00:13:27,839 --> 00:13:29,600
to work with and if we want to uh

382
00:13:29,600 --> 00:13:31,120
execute whatever we want on the on the

383
00:13:31,120 --> 00:13:32,320
device

384
00:13:32,320 --> 00:13:34,480
we have to be we have to account for the

385
00:13:34,480 --> 00:13:37,040
amount of data that we that we use so

386
00:13:37,040 --> 00:13:39,760
for example an immediate load would be

387
00:13:39,760 --> 00:13:41,920
something pretty expensive even on disk

388
00:13:41,920 --> 00:13:44,160
risk architecture so for example if you

389
00:13:44,160 --> 00:13:46,800
want to load some arbitrary 32 bytes of

390
00:13:46,800 --> 00:13:47,680
data

391
00:13:47,680 --> 00:13:50,160
it takes up to six bytes in order to in

392
00:13:50,160 --> 00:13:51,920
order to do that is very expensive and

393
00:13:51,920 --> 00:13:53,760
you cannot really afford that

394
00:13:53,760 --> 00:13:56,240
so we did some other trick in order to

395
00:13:56,240 --> 00:13:59,360
solve this and we used this some

396
00:13:59,360 --> 00:14:00,240
other

397
00:14:00,240 --> 00:14:02,959
rob gadget that we decided to use this

398
00:14:02,959 --> 00:14:06,560
leaves us with only 32 bytes of data and

399
00:14:06,560 --> 00:14:08,959
this gives us the ability to load uh

400
00:14:08,959 --> 00:14:11,040
immediate values directly onto the

401
00:14:11,040 --> 00:14:14,639
registers before it is being actually uh

402
00:14:14,639 --> 00:14:16,560
before it's actually being loaded and

403
00:14:16,560 --> 00:14:19,760
then we rope back to our show code and

404
00:14:19,760 --> 00:14:21,279
that leaves us with 32 bytes of

405
00:14:21,279 --> 00:14:23,360
shellcode that we are freely in control

406
00:14:23,360 --> 00:14:25,600
with some pre-loaded immediate values

407
00:14:25,600 --> 00:14:28,639
that we don't have to spend 66 bytes uh

408
00:14:28,639 --> 00:14:30,880
to load each and every time

409
00:14:30,880 --> 00:14:33,040
okay so this is how we write shell code

410
00:14:33,040 --> 00:14:35,519
how what what what would we really do

411
00:14:35,519 --> 00:14:38,320
now well the ecu itself as i mentioned

412
00:14:38,320 --> 00:14:40,000
is composed of many other different

413
00:14:40,000 --> 00:14:42,880
components uh the rh850 is

414
00:14:42,880 --> 00:14:46,240
the rha 50 is one of them but the main

415
00:14:46,240 --> 00:14:49,199
the holy grail would be is the screen so

416
00:14:49,199 --> 00:14:51,519
it turns out that behind the screen the

417
00:14:51,519 --> 00:14:54,320
back light of it was actually this led

418
00:14:54,320 --> 00:14:55,279
strip

419
00:14:55,279 --> 00:14:57,600
that is directly connected directly

420
00:14:57,600 --> 00:15:01,120
shorted using a gpio to the rh850

421
00:15:01,120 --> 00:15:03,680
itself so after some pcb examination and

422
00:15:03,680 --> 00:15:06,320
after looking at the at the datasheet we

423
00:15:06,320 --> 00:15:08,639
found exactly the virtual address this

424
00:15:08,639 --> 00:15:12,160
gpio is mapped to and now we can simply

425
00:15:12,160 --> 00:15:14,720
blink on the lights so we decided this

426
00:15:14,720 --> 00:15:16,000
would be a very good target and this

427
00:15:16,000 --> 00:15:18,480
would be a very good uh demonstration to

428
00:15:18,480 --> 00:15:20,079
show the client

429
00:15:20,079 --> 00:15:22,240
so this is exactly what we set out to do

430
00:15:22,240 --> 00:15:24,240
how about we just turn on the lights we

431
00:15:24,240 --> 00:15:25,839
have some busy loop we turn it off and

432
00:15:25,839 --> 00:15:27,839
then we and then we repeat

433
00:15:27,839 --> 00:15:29,920
we tried that we wrote the code and we

434
00:15:29,920 --> 00:15:32,399
tried to run it but somehow we

435
00:15:32,399 --> 00:15:33,839
well we crashed

436
00:15:33,839 --> 00:15:36,079
why did we crash well it turns out that

437
00:15:36,079 --> 00:15:38,160
when you are running from interrupt it's

438
00:15:38,160 --> 00:15:41,440
very nice and very very appealing but

439
00:15:41,440 --> 00:15:42,880
these these interrupts are intended to

440
00:15:42,880 --> 00:15:45,279
be short they aren't highly prioritized

441
00:15:45,279 --> 00:15:47,040
and they are intended to be short

442
00:15:47,040 --> 00:15:48,880
because you don't want the other

443
00:15:48,880 --> 00:15:50,800
resources in the system to starve you

444
00:15:50,800 --> 00:15:52,720
have other tasks that need to be

445
00:15:52,720 --> 00:15:54,399
scheduled and

446
00:15:54,399 --> 00:15:56,959
that is enforced using a watchdog timer

447
00:15:56,959 --> 00:15:58,480
the watchdog timer is a mechanism

448
00:15:58,480 --> 00:16:00,560
provided by the hardware it is uh

449
00:16:00,560 --> 00:16:01,680
operated by

450
00:16:01,680 --> 00:16:03,680
by a separate oscillator on the chip

451
00:16:03,680 --> 00:16:06,160
itself and when it uh

452
00:16:06,160 --> 00:16:08,560
laps and when it overlaps it triggers

453
00:16:08,560 --> 00:16:10,560
this sort of an exception or a trap or

454
00:16:10,560 --> 00:16:12,800
whatever you want to call it that either

455
00:16:12,800 --> 00:16:15,519
resets the system or just handled in

456
00:16:15,519 --> 00:16:17,519
some other way this is very good for

457
00:16:17,519 --> 00:16:19,199
example for solving

458
00:16:19,199 --> 00:16:22,320
for solving infinite loop bugs or

459
00:16:22,320 --> 00:16:23,920
implementing other scheduling mechanisms

460
00:16:23,920 --> 00:16:25,839
but it's not really good for us because

461
00:16:25,839 --> 00:16:29,040
we want to just do whatever we want so

462
00:16:29,040 --> 00:16:31,199
we try to ask ourselves how would you

463
00:16:31,199 --> 00:16:33,680
how would we disable such a feature and

464
00:16:33,680 --> 00:16:35,839
we set off to what we call what we call

465
00:16:35,839 --> 00:16:38,560
the man pages which as which is the data

466
00:16:38,560 --> 00:16:40,560
data sheet and it turns out that to

467
00:16:40,560 --> 00:16:42,399
disable this feature on these family of

468
00:16:42,399 --> 00:16:44,160
microcontrollers would not be that easy

469
00:16:44,160 --> 00:16:46,000
it has to be pre-configured to a

470
00:16:46,000 --> 00:16:47,440
specific flash

471
00:16:47,440 --> 00:16:48,720
it's not really it's not really

472
00:16:48,720 --> 00:16:50,880
something that we're going to do and the

473
00:16:50,880 --> 00:16:53,279
other alternative would be to actively

474
00:16:53,279 --> 00:16:55,519
reset that oscillator each and every

475
00:16:55,519 --> 00:16:57,040
time but

476
00:16:57,040 --> 00:16:59,600
that again that is uh that takes a very

477
00:16:59,600 --> 00:17:01,440
complicated computation it's not really

478
00:17:01,440 --> 00:17:03,120
complicated it's just a decremental

479
00:17:03,120 --> 00:17:05,039
decrementation but

480
00:17:05,039 --> 00:17:07,039
performing that takes a lot of show code

481
00:17:07,039 --> 00:17:09,439
we cannot really afford that well

482
00:17:09,439 --> 00:17:11,039
luckily

483
00:17:11,039 --> 00:17:13,520
that exact routine is actually

484
00:17:13,520 --> 00:17:15,199
implemented inside of the firmware

485
00:17:15,199 --> 00:17:17,599
itself so we can just freely use it

486
00:17:17,599 --> 00:17:19,359
and

487
00:17:19,359 --> 00:17:21,760
so that really all it takes for us to

488
00:17:21,760 --> 00:17:24,240
change is that we'll just change the the

489
00:17:24,240 --> 00:17:26,000
busy loop to just kick the watch dog

490
00:17:26,000 --> 00:17:27,359
over and over again that way we will

491
00:17:27,359 --> 00:17:30,720
never be uh the device will never die

492
00:17:30,720 --> 00:17:33,840
and thankfully

493
00:17:34,000 --> 00:17:36,640
what you see here is the instrument

494
00:17:36,640 --> 00:17:38,400
cluster itself without the screen only

495
00:17:38,400 --> 00:17:39,600
the lead strip

496
00:17:39,600 --> 00:17:42,959
and after sending in the message

497
00:17:44,240 --> 00:17:45,039
yes

498
00:17:45,039 --> 00:17:47,840
it was supposed to be sound

499
00:17:48,559 --> 00:17:50,559
yes

500
00:17:50,559 --> 00:17:52,960
yeah okay so tell them tell them what

501
00:17:52,960 --> 00:17:54,559
happened when you tried to do that yeah

502
00:17:54,559 --> 00:17:55,840
so

503
00:17:55,840 --> 00:17:57,679
this was we worked on this on one of the

504
00:17:57,679 --> 00:17:58,880
peaks on our

505
00:17:58,880 --> 00:18:01,360
one of the waves of covid and i was

506
00:18:01,360 --> 00:18:02,559
working from home okay i was looking for

507
00:18:02,559 --> 00:18:03,919
office

508
00:18:03,919 --> 00:18:07,360
as you you are not blinded by it just

509
00:18:07,360 --> 00:18:09,760
yet but uh yeah

510
00:18:09,760 --> 00:18:11,440
ariel was sitting right next to me and

511
00:18:11,440 --> 00:18:13,200
right next to the setup and

512
00:18:13,200 --> 00:18:14,720
while you were working on it you

513
00:18:14,720 --> 00:18:16,480
probably gave him epilepsy but i think

514
00:18:16,480 --> 00:18:18,400
he's i think he's okay because he's here

515
00:18:18,400 --> 00:18:21,440
well not right now today so we're good

516
00:18:21,440 --> 00:18:23,520
uh okay so the client is finally was

517
00:18:23,520 --> 00:18:25,840
convinced after this it was definitely

518
00:18:25,840 --> 00:18:27,360
okay this is serious i'm gonna have to

519
00:18:27,360 --> 00:18:29,600
fix it but we were not really satisfied

520
00:18:29,600 --> 00:18:31,280
all the way because we wanted to know

521
00:18:31,280 --> 00:18:33,919
what exactly would something complicated

522
00:18:33,919 --> 00:18:36,400
would look like on this device can we

523
00:18:36,400 --> 00:18:38,799
really install something malicious that

524
00:18:38,799 --> 00:18:40,720
would do something that would stay there

525
00:18:40,720 --> 00:18:43,120
forever and we'll and will be really

526
00:18:43,120 --> 00:18:44,880
malicious so

527
00:18:44,880 --> 00:18:46,640
in order to do that we have some

528
00:18:46,640 --> 00:18:48,240
challenges and the first one would be to

529
00:18:48,240 --> 00:18:50,320
really upload a large chunk of code to

530
00:18:50,320 --> 00:18:52,400
the device and then activate it and then

531
00:18:52,400 --> 00:18:53,840
run it and the first step that we're

532
00:18:53,840 --> 00:18:55,280
going to have to solve is the thing that

533
00:18:55,280 --> 00:18:57,360
we cannot really override ourselves and

534
00:18:57,360 --> 00:18:59,919
we're only limited to 64 bytes of data

535
00:18:59,919 --> 00:19:01,520
in order to do that we're going to what

536
00:19:01,520 --> 00:19:02,720
we're going to do is we're going to

537
00:19:02,720 --> 00:19:05,600
fragment the entire code base and send

538
00:19:05,600 --> 00:19:07,440
it in chunks and just place it in a

539
00:19:07,440 --> 00:19:09,440
location in memory which we're going to

540
00:19:09,440 --> 00:19:11,760
refer to as a code cave

541
00:19:11,760 --> 00:19:13,120
that code cave

542
00:19:13,120 --> 00:19:15,520
will will contain the the malicious code

543
00:19:15,520 --> 00:19:16,799
and

544
00:19:16,799 --> 00:19:18,240
that is where it's going to sit until

545
00:19:18,240 --> 00:19:20,160
it's triggered now

546
00:19:20,160 --> 00:19:21,360
after that we're going to have to worry

547
00:19:21,360 --> 00:19:23,039
about exiting gracefully from that

548
00:19:23,039 --> 00:19:25,440
interrupt because as you remember

549
00:19:25,440 --> 00:19:27,039
this is an interrupt that we are taking

550
00:19:27,039 --> 00:19:27,840
over

551
00:19:27,840 --> 00:19:29,520
and we have to restore the original

552
00:19:29,520 --> 00:19:31,120
pointers that we are able to use the

553
00:19:31,120 --> 00:19:33,120
vulnerability over and over again and

554
00:19:33,120 --> 00:19:34,880
upload the and repeat the process in

555
00:19:34,880 --> 00:19:37,039
order to upload the entire code

556
00:19:37,039 --> 00:19:39,280
so loading the code to the code cave is

557
00:19:39,280 --> 00:19:40,960
not really an issue you just load some

558
00:19:40,960 --> 00:19:43,120
immediate values and just store it in an

559
00:19:43,120 --> 00:19:44,720
address that you pre-configure because

560
00:19:44,720 --> 00:19:47,039
you are writing the shell code

561
00:19:47,039 --> 00:19:49,120
exiting from the interrupt

562
00:19:49,120 --> 00:19:50,720
is just as the same as starting the

563
00:19:50,720 --> 00:19:52,799
interrupts and the interrupt starts with

564
00:19:52,799 --> 00:19:54,880
storing the context in in on the stack

565
00:19:54,880 --> 00:19:58,080
so it just leaves the same way so really

566
00:19:58,080 --> 00:20:00,480
all it takes for for us is to readjust

567
00:20:00,480 --> 00:20:02,799
the stack pointer to the correct address

568
00:20:02,799 --> 00:20:05,280
and that the the interrupt is safely

569
00:20:05,280 --> 00:20:06,640
exited

570
00:20:06,640 --> 00:20:09,200
so really all it takes for us to do in

571
00:20:09,200 --> 00:20:11,039
order to upload a large chunk of code in

572
00:20:11,039 --> 00:20:13,440
chunks would be to

573
00:20:13,440 --> 00:20:15,520
store the bytes restore the vulnerable

574
00:20:15,520 --> 00:20:18,080
pointer change the stack pointer back

575
00:20:18,080 --> 00:20:20,240
again and of course jump to the exit

576
00:20:20,240 --> 00:20:22,240
routine that

577
00:20:22,240 --> 00:20:25,120
that leaves the device

578
00:20:25,120 --> 00:20:27,280
we tried it but somehow we still crashed

579
00:20:27,280 --> 00:20:30,640
and this time we found out that the mpu

580
00:20:30,640 --> 00:20:31,520
which

581
00:20:31,520 --> 00:20:34,960
was actually weirdly configured was

582
00:20:34,960 --> 00:20:37,520
actually somewhat configured so

583
00:20:37,520 --> 00:20:39,360
yeah this was some some sort of a

584
00:20:39,360 --> 00:20:41,360
problem because we wanted we had other

585
00:20:41,360 --> 00:20:43,840
other plans for it but we were reminded

586
00:20:43,840 --> 00:20:45,760
that we are still we we are running from

587
00:20:45,760 --> 00:20:48,000
interrupt we are running in supervisor

588
00:20:48,000 --> 00:20:51,679
mode so luckily the mpu itself

589
00:20:51,679 --> 00:20:53,840
uh the the

590
00:20:53,840 --> 00:20:54,880
the

591
00:20:54,880 --> 00:20:57,520
settings of this of this register is

592
00:20:57,520 --> 00:20:59,360
mapped to a virtual to a virtual

593
00:20:59,360 --> 00:21:02,159
register which is fortunate because we

594
00:21:02,159 --> 00:21:04,320
are able to write to it so

595
00:21:04,320 --> 00:21:06,960
just writing to zero to this beat

596
00:21:06,960 --> 00:21:08,799
completely disables this feature

597
00:21:08,799 --> 00:21:11,200
altogether and we're able to just write

598
00:21:11,200 --> 00:21:13,200
wherever we want which is other tasks

599
00:21:13,200 --> 00:21:14,400
memory

600
00:21:14,400 --> 00:21:16,240
and every other and every other memory

601
00:21:16,240 --> 00:21:18,880
address that we that we wish so now we

602
00:21:18,880 --> 00:21:20,799
have the entire code caves sitting there

603
00:21:20,799 --> 00:21:22,400
waiting for a trigger

604
00:21:22,400 --> 00:21:23,679
and

605
00:21:23,679 --> 00:21:26,000
let us show you how you can trigger it

606
00:21:26,000 --> 00:21:28,559
yeah thank you shaquel

607
00:21:28,559 --> 00:21:31,840
um so as you can mention now we are left

608
00:21:31,840 --> 00:21:33,520
with one of the last tasks that we have

609
00:21:33,520 --> 00:21:35,919
now we want to have this ability to

610
00:21:35,919 --> 00:21:37,840
uh to basically trigger uh having

611
00:21:37,840 --> 00:21:40,400
commands sent to our malicious malicious

612
00:21:40,400 --> 00:21:41,840
malware so

613
00:21:41,840 --> 00:21:44,080
we sort of say okay how do we trigger it

614
00:21:44,080 --> 00:21:45,919
and i'll remind everyone that

615
00:21:45,919 --> 00:21:48,080
in our device the the tasks are

616
00:21:48,080 --> 00:21:49,760
hardwired to the firmware yeah you can't

617
00:21:49,760 --> 00:21:51,600
just spawn a new process you don't have

618
00:21:51,600 --> 00:21:53,200
you know the exact v for example like in

619
00:21:53,200 --> 00:21:54,320
linux and

620
00:21:54,320 --> 00:21:56,080
the tasks are running on the system are

621
00:21:56,080 --> 00:21:58,080
not really equivalent to linux processes

622
00:21:58,080 --> 00:22:00,480
they have shared memory areas

623
00:22:00,480 --> 00:22:02,640
so we try to say okay let's let's take

624
00:22:02,640 --> 00:22:04,159
something periodic let's look for

625
00:22:04,159 --> 00:22:06,000
something periodic that happens on this

626
00:22:06,000 --> 00:22:08,320
ecu and maybe we'll use this periodic

627
00:22:08,320 --> 00:22:10,960
mechanism to work for us

628
00:22:10,960 --> 00:22:13,120
so we went on and we we found something

629
00:22:13,120 --> 00:22:15,520
really a periodic task that happens on

630
00:22:15,520 --> 00:22:18,080
this uh ecu which we know that every x

631
00:22:18,080 --> 00:22:19,520
milliseconds it's going to be run

632
00:22:19,520 --> 00:22:21,440
because this you need something periodic

633
00:22:21,440 --> 00:22:24,480
uh uh to happen on this ccu and we set

634
00:22:24,480 --> 00:22:26,159
ourself okay let's let's build the next

635
00:22:26,159 --> 00:22:28,880
mechanism so we have this periodic task

636
00:22:28,880 --> 00:22:30,640
shaked already mentioned how we do with

637
00:22:30,640 --> 00:22:32,400
every we have this cool mechanism of

638
00:22:32,400 --> 00:22:34,480
write every primitive when we know how

639
00:22:34,480 --> 00:22:36,720
to restore everything so we write with

640
00:22:36,720 --> 00:22:38,880
these primitives uh the next the

641
00:22:38,880 --> 00:22:41,039
following thing in the in the code cave

642
00:22:41,039 --> 00:22:42,559
we write the shell code that we want to

643
00:22:42,559 --> 00:22:44,960
write and in the end of it we run we

644
00:22:44,960 --> 00:22:47,600
write some of the initial code of the of

645
00:22:47,600 --> 00:22:49,280
the of the periodic task and soon you're

646
00:22:49,280 --> 00:22:50,720
going to understand why

647
00:22:50,720 --> 00:22:52,320
so we we

648
00:22:52,320 --> 00:22:54,159
write this and then later we write the

649
00:22:54,159 --> 00:22:56,080
patch on the task itself

650
00:22:56,080 --> 00:22:57,679
and the patch itself

651
00:22:57,679 --> 00:22:59,520
is using a trigger the so we have this

652
00:22:59,520 --> 00:23:01,440
location with the with the magic number

653
00:23:01,440 --> 00:23:03,600
that no one really uses and we can have

654
00:23:03,600 --> 00:23:05,120
this as a trigger mechanism and i'll

655
00:23:05,120 --> 00:23:07,039
explain uh soon why

656
00:23:07,039 --> 00:23:10,159
so let's see how we do regular execution

657
00:23:10,159 --> 00:23:12,240
so if the regular the regular execution

658
00:23:12,240 --> 00:23:14,000
of the task if no one written anything

659
00:23:14,000 --> 00:23:15,280
to the trigger

660
00:23:15,280 --> 00:23:17,520
it checks the trigger if the trigger is

661
00:23:17,520 --> 00:23:20,400
is not zero it basically jumps to the

662
00:23:20,400 --> 00:23:22,400
few first commands of this task you know

663
00:23:22,400 --> 00:23:24,720
the few first op codes then it jumps

664
00:23:24,720 --> 00:23:26,559
back and it's continues and doing the

665
00:23:26,559 --> 00:23:28,320
regular execution of the task what it

666
00:23:28,320 --> 00:23:29,679
meant to do

667
00:23:29,679 --> 00:23:30,640
but

668
00:23:30,640 --> 00:23:32,320
if we do write to the trigger for

669
00:23:32,320 --> 00:23:34,400
example zero after we

670
00:23:34,400 --> 00:23:36,000
rewritten everything we want in the code

671
00:23:36,000 --> 00:23:38,400
cave the patch basically checks the

672
00:23:38,400 --> 00:23:40,000
trigger if the trigger is set it's

673
00:23:40,000 --> 00:23:42,480
branches to the shell code it runs our

674
00:23:42,480 --> 00:23:43,679
shell code

675
00:23:43,679 --> 00:23:46,240
it runs later the the you know the

676
00:23:46,240 --> 00:23:48,240
previous uh the previous op code that

677
00:23:48,240 --> 00:23:51,440
the task needed and its jumps backs jump

678
00:23:51,440 --> 00:23:54,080
back to the end of the task and what is

679
00:23:54,080 --> 00:23:55,600
really nice with this mechanism and by

680
00:23:55,600 --> 00:23:57,600
the way something to know the shell code

681
00:23:57,600 --> 00:23:58,799
some parts of the shell could need to

682
00:23:58,799 --> 00:24:00,720
restore the trigger so this won't happen

683
00:24:00,720 --> 00:24:03,280
every ex milliseconds

684
00:24:03,280 --> 00:24:04,640
and what is really nice here that you've

685
00:24:04,640 --> 00:24:06,880
seen that uh we're not interfering with

686
00:24:06,880 --> 00:24:08,480
the tasks so the task is still running

687
00:24:08,480 --> 00:24:10,320
he's doing what we want to do we

688
00:24:10,320 --> 00:24:12,080
sometimes run something before it if we

689
00:24:12,080 --> 00:24:13,600
want and sometimes we don't run so

690
00:24:13,600 --> 00:24:15,440
everything is great and we don't break

691
00:24:15,440 --> 00:24:16,840
the ecu at

692
00:24:16,840 --> 00:24:19,440
all and before we finish we want to talk

693
00:24:19,440 --> 00:24:20,640
a little bit about the impact on

694
00:24:20,640 --> 00:24:22,640
automotive and not just automotive but

695
00:24:22,640 --> 00:24:25,440
in general real-time devices

696
00:24:25,440 --> 00:24:27,840
so we've seen before many cool research

697
00:24:27,840 --> 00:24:30,400
of cars being hacked we have the chris

698
00:24:30,400 --> 00:24:32,000
and charlie research that was done in

699
00:24:32,000 --> 00:24:35,039
blackett uh in america in the u.s a few

700
00:24:35,039 --> 00:24:37,440
years ago when we had keen lab mercedes

701
00:24:37,440 --> 00:24:40,159
research and kid tesla wi-fi research

702
00:24:40,159 --> 00:24:42,559
and most of this research was um

703
00:24:42,559 --> 00:24:44,080
aimed to break you know the more rich

704
00:24:44,080 --> 00:24:46,400
operating system devices that are are

705
00:24:46,400 --> 00:24:48,480
there before they do anything else

706
00:24:48,480 --> 00:24:50,320
and what we've seen here that

707
00:24:50,320 --> 00:24:51,919
uh we have we talked here about the

708
00:24:51,919 --> 00:24:54,000
potential attack via the can bus and and

709
00:24:54,000 --> 00:24:56,240
usually you won't gonna think the canvas

710
00:24:56,240 --> 00:24:58,159
as something as you know the canvas is

711
00:24:58,159 --> 00:24:59,919
not very complex so the attack surface

712
00:24:59,919 --> 00:25:02,320
doesn't look very rich but you can still

713
00:25:02,320 --> 00:25:04,320
completely compromise only with the

714
00:25:04,320 --> 00:25:05,760
canvas you know with this vulnerability

715
00:25:05,760 --> 00:25:08,080
that we've shown uh using only the can

716
00:25:08,080 --> 00:25:10,320
bus and you should remember that all of

717
00:25:10,320 --> 00:25:11,919
the ecu's in the car you know that we

718
00:25:11,919 --> 00:25:13,520
talked about the car is like a network

719
00:25:13,520 --> 00:25:16,640
of more than 100 ecu's so they can send

720
00:25:16,640 --> 00:25:18,320
each other these scan messages and you

721
00:25:18,320 --> 00:25:21,039
basically can run from one to another

722
00:25:21,039 --> 00:25:23,039
and sometimes people even connect

723
00:25:23,039 --> 00:25:24,880
dongles to this something that called

724
00:25:24,880 --> 00:25:26,960
obd port it's a report that technician

725
00:25:26,960 --> 00:25:28,960
used to uh to

726
00:25:28,960 --> 00:25:31,440
to send some messages to devices or

727
00:25:31,440 --> 00:25:33,279
people put their dongles there and and

728
00:25:33,279 --> 00:25:35,600
stuff like that so and you should keep

729
00:25:35,600 --> 00:25:37,360
in mind that this is our critical ecos

730
00:25:37,360 --> 00:25:40,400
they're safety critical ecu's

731
00:25:40,400 --> 00:25:42,080
and if we come back to what we talked

732
00:25:42,080 --> 00:25:44,240
before we talked that we take in general

733
00:25:44,240 --> 00:25:45,520
you know the two steps you know the

734
00:25:45,520 --> 00:25:47,360
achieving initial execution and then

735
00:25:47,360 --> 00:25:49,679
constructing the bergador so we've seen

736
00:25:49,679 --> 00:25:51,440
that in our opinion in bare metal

737
00:25:51,440 --> 00:25:53,520
systems you quite have the opposite that

738
00:25:53,520 --> 00:25:54,960
in modern systems

739
00:25:54,960 --> 00:25:56,720
the first step is usually not that

740
00:25:56,720 --> 00:25:57,760
complex after you have some

741
00:25:57,760 --> 00:25:59,279
vulnerability because as you've seen the

742
00:25:59,279 --> 00:26:01,120
mitigations are not like the state of

743
00:26:01,120 --> 00:26:03,520
the art not are not all of them are are

744
00:26:03,520 --> 00:26:04,640
implemented

745
00:26:04,640 --> 00:26:06,559
but the second step of

746
00:26:06,559 --> 00:26:08,880
constructing the backdoor and having the

747
00:26:08,880 --> 00:26:11,039
stable execution is harder because you

748
00:26:11,039 --> 00:26:12,799
don't have this rich environment to to

749
00:26:12,799 --> 00:26:14,559
rely on you need to build a lot of

750
00:26:14,559 --> 00:26:16,799
things by yourself and you get to get

751
00:26:16,799 --> 00:26:18,480
very familiar with the microcontroller

752
00:26:18,480 --> 00:26:20,720
you're using and the data sheet of it so

753
00:26:20,720 --> 00:26:22,320
you don't have like standardization like

754
00:26:22,320 --> 00:26:24,640
i don't know post posix for example in

755
00:26:24,640 --> 00:26:27,039
uh in linux based systems

756
00:26:27,039 --> 00:26:28,720
and if we look at the countermeasure

757
00:26:28,720 --> 00:26:31,120
part right so if we look at modern

758
00:26:31,120 --> 00:26:33,279
system usually uh in the first step you

759
00:26:33,279 --> 00:26:35,679
have many mitigations like aslr dev

760
00:26:35,679 --> 00:26:37,120
stack cookies

761
00:26:37,120 --> 00:26:38,799
and in the second step you have some

762
00:26:38,799 --> 00:26:41,360
edrs access control we have a lot of our

763
00:26:41,360 --> 00:26:43,039
the the cyber security industry has a

764
00:26:43,039 --> 00:26:44,960
lot of products in those two in those

765
00:26:44,960 --> 00:26:47,120
two steps to counter measure it in bare

766
00:26:47,120 --> 00:26:49,279
metal system you've seen that actually

767
00:26:49,279 --> 00:26:51,520
we had some mitigation we had some stack

768
00:26:51,520 --> 00:26:53,919
cookies and this memory protection unit

769
00:26:53,919 --> 00:26:56,159
uh on the first part but on the second

770
00:26:56,159 --> 00:26:58,720
part we we did you we did had the secure

771
00:26:58,720 --> 00:27:00,000
boot which the client told us but it

772
00:27:00,000 --> 00:27:01,840
wasn't really relevant here but it's

773
00:27:01,840 --> 00:27:03,679
it's really we had a secure boot on the

774
00:27:03,679 --> 00:27:05,760
second step but it's still partial and i

775
00:27:05,760 --> 00:27:07,279
think it's not that people don't want to

776
00:27:07,279 --> 00:27:09,120
implement it on this real-time devices

777
00:27:09,120 --> 00:27:10,880
it's just that sometimes it's

778
00:27:10,880 --> 00:27:12,799
pretty expensive on uh

779
00:27:12,799 --> 00:27:14,960
from a running time perspective

780
00:27:14,960 --> 00:27:17,200
but that's something to keep in mind

781
00:27:17,200 --> 00:27:19,760
and just to remind us all what we had

782
00:27:19,760 --> 00:27:21,520
here so we started with this critical

783
00:27:21,520 --> 00:27:23,120
safety device

784
00:27:23,120 --> 00:27:24,880
with really limited attack surface right

785
00:27:24,880 --> 00:27:27,200
not such a complex attack surface and

786
00:27:27,200 --> 00:27:28,640
then we had this right everywhere

787
00:27:28,640 --> 00:27:30,960
primitive uh which we escalated to

788
00:27:30,960 --> 00:27:33,520
infoleak later we escalated to the disco

789
00:27:33,520 --> 00:27:35,200
shellcode that jaquette

790
00:27:35,200 --> 00:27:37,200
like for for more than a month blinked

791
00:27:37,200 --> 00:27:39,600
my eyes almost every day trying to

792
00:27:39,600 --> 00:27:41,919
trying to solve the issue and

793
00:27:41,919 --> 00:27:43,600
and later on we constructed this

794
00:27:43,600 --> 00:27:45,520
functional backdoor on this bare metal

795
00:27:45,520 --> 00:27:47,679
device

796
00:27:47,679 --> 00:27:49,840
the thing the thing to note here is that

797
00:27:49,840 --> 00:27:51,440
you need to understand that the same

798
00:27:51,440 --> 00:27:54,080
complex malware can still run on this

799
00:27:54,080 --> 00:27:56,880
stupid but crucial devices uh this is

800
00:27:56,880 --> 00:27:58,640
something that we sometimes don't really

801
00:27:58,640 --> 00:28:01,120
think about uh when we when we build

802
00:28:01,120 --> 00:28:03,039
these devices

803
00:28:03,039 --> 00:28:05,120
and and this is and something to think

804
00:28:05,120 --> 00:28:06,640
about as well is that

805
00:28:06,640 --> 00:28:08,640
think how many real-time devices are

806
00:28:08,640 --> 00:28:10,159
unprotected out there because i show you

807
00:28:10,159 --> 00:28:11,600
the counter measures there are not

808
00:28:11,600 --> 00:28:13,679
really uh there yet

809
00:28:13,679 --> 00:28:14,559
and

810
00:28:14,559 --> 00:28:16,320
i think that we shouldn't underestimate

811
00:28:16,320 --> 00:28:18,000
those devices because those devices

812
00:28:18,000 --> 00:28:20,720
still hold uh secret information and

813
00:28:20,720 --> 00:28:22,640
they're very crucial to our life in many

814
00:28:22,640 --> 00:28:23,840
different industries like in the

815
00:28:23,840 --> 00:28:27,360
healthcare industry or in the or in the

816
00:28:27,360 --> 00:28:29,120
in the banking industry and other

817
00:28:29,120 --> 00:28:30,559
industries that are crucial to our

818
00:28:30,559 --> 00:28:32,799
everyday life and this is something that

819
00:28:32,799 --> 00:28:34,480
i want you to take from here to think of

820
00:28:34,480 --> 00:28:36,720
these other devices that can still have

821
00:28:36,720 --> 00:28:38,720
this complex malware

822
00:28:38,720 --> 00:28:40,960
so thank you very much and we have if

823
00:28:40,960 --> 00:28:42,480
you have some questions we would like to

824
00:28:42,480 --> 00:28:45,840
to hear and answer you guys

825
00:28:47,360 --> 00:28:48,240
okay

826
00:28:48,240 --> 00:28:51,799
great thank you guys

827
00:28:53,170 --> 00:28:56,239
[Music]

828
00:29:00,080 --> 00:29:01,200
[Music]

829
00:29:01,200 --> 00:29:03,279
you

