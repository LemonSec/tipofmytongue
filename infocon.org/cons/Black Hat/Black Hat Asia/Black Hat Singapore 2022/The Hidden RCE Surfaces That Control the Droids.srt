1
00:00:01,740 --> 00:00:03,720
[Music]

2
00:00:03,720 --> 00:00:06,720
foreign

3
00:00:09,080 --> 00:00:11,820
sorry for some techno technical issue

4
00:00:11,820 --> 00:00:15,000
here and we are presenting the hidden RC

5
00:00:15,000 --> 00:00:17,160
services that control the joys

6
00:00:17,160 --> 00:00:19,380
and due to the Quality lockdown

7
00:00:19,380 --> 00:00:22,619
situation in Shanghai we are presenting

8
00:00:22,619 --> 00:00:24,359
this remotely and sorry for

9
00:00:24,359 --> 00:00:25,980
inconvenience cost

10
00:00:25,980 --> 00:00:29,939
and here I will introduce ourselves and

11
00:00:29,939 --> 00:00:33,960
uh I'm China researcher Chief researcher

12
00:00:33,960 --> 00:00:36,120
of Charity security lab I'm the winner

13
00:00:36,120 --> 00:00:38,160
of multiple pontoon championships and

14
00:00:38,160 --> 00:00:41,120
spoken and conferences

15
00:00:41,719 --> 00:00:45,540
Mosaic hrtb power community and so on

16
00:00:45,540 --> 00:00:48,059
uh

17
00:00:48,059 --> 00:00:51,019
hello everyone

18
00:00:51,559 --> 00:00:54,360
most of my time focusing on mobile

19
00:00:54,360 --> 00:00:57,840
security and program analyze finding its

20
00:00:57,840 --> 00:00:59,940
vulnerabilities and keep tracks the

21
00:00:59,940 --> 00:01:04,039
state of art of exploration

22
00:01:04,260 --> 00:01:08,100
okay so now today's agenda is as follows

23
00:01:08,100 --> 00:01:11,040
we will give an overview of the RC

24
00:01:11,040 --> 00:01:14,880
services in Android and a second layer

25
00:01:14,880 --> 00:01:16,920
will introduce a different remote code

26
00:01:16,920 --> 00:01:19,140
activation box in Android ecosystem that

27
00:01:19,140 --> 00:01:21,960
we found including the leap pack bug in

28
00:01:21,960 --> 00:01:25,200
the Android AOSP the image format box in

29
00:01:25,200 --> 00:01:27,659
the Samsung Android Chrome libraries and

30
00:01:27,659 --> 00:01:29,939
the SPI image barge in Samsung Notes

31
00:01:29,939 --> 00:01:32,400
which have like billions of downloads in

32
00:01:32,400 --> 00:01:34,320
the Google Play

33
00:01:34,320 --> 00:01:36,780
uh Sunday we will dive into the dynamic

34
00:01:36,780 --> 00:01:38,100
binary funding

35
00:01:38,100 --> 00:01:41,340
how to find this box uh especially

36
00:01:41,340 --> 00:01:43,320
without source code access

37
00:01:43,320 --> 00:01:47,520
and the final part is a conclusion part

38
00:01:47,520 --> 00:01:49,860
so uh to give a brief overview the

39
00:01:49,860 --> 00:01:52,560
remote connection service Android can be

40
00:01:52,560 --> 00:01:56,460
categorized as five types the Wi-Fi

41
00:01:56,460 --> 00:01:59,399
attack surfaces including bugs in the

42
00:01:59,399 --> 00:02:01,380
Wi-Fi protocol stack the Wi-Fi

43
00:02:01,380 --> 00:02:03,119
implementations and the Wi-Fi chip

44
00:02:03,119 --> 00:02:05,299
drivers and there are some previous

45
00:02:05,299 --> 00:02:07,680
external research on this

46
00:02:07,680 --> 00:02:11,700
like in the broadcom chips the NFC is

47
00:02:11,700 --> 00:02:14,580
also uh called execution surface in

48
00:02:14,580 --> 00:02:17,640
Android including marketing the NFC

49
00:02:17,640 --> 00:02:19,860
photo stock and NFC software handling

50
00:02:19,860 --> 00:02:24,780
and some like intent handling uh in NFC

51
00:02:24,780 --> 00:02:27,480
uh the fire format bugs are somehow

52
00:02:27,480 --> 00:02:29,580
old-fashioned but they but are still

53
00:02:29,580 --> 00:02:33,300
live even after so many years previously

54
00:02:33,300 --> 00:02:36,060
they are very famous fire format bugs in

55
00:02:36,060 --> 00:02:39,540
Android the stage fraud box and I think

56
00:02:39,540 --> 00:02:42,180
most of you have heard about it however

57
00:02:42,180 --> 00:02:46,080
after those years the box in the median

58
00:02:46,080 --> 00:02:49,019
server has like vanished but we are

59
00:02:49,019 --> 00:02:51,900
still seeing other file from my box that

60
00:02:51,900 --> 00:02:53,400
we will introduce later

61
00:02:53,400 --> 00:02:55,800
also there are Bluetooth and baseband

62
00:02:55,800 --> 00:02:58,379
bugs including the protocol

63
00:02:58,379 --> 00:03:01,920
implementation faults and others and we

64
00:03:01,920 --> 00:03:06,559
will not elaborate on it today

65
00:03:07,440 --> 00:03:11,940
so uh as I have mentioned about uh in

66
00:03:11,940 --> 00:03:13,739
this talk we will focus on the fire

67
00:03:13,739 --> 00:03:16,860
format box that we have found

68
00:03:16,860 --> 00:03:20,519
so uh the fire RC Box still exists in

69
00:03:20,519 --> 00:03:23,459
Android since the like the introduction

70
00:03:23,459 --> 00:03:28,140
of 4G and the 5G and the improvements of

71
00:03:28,140 --> 00:03:30,780
cameras like the the phone today's

72
00:03:30,780 --> 00:03:34,920
phones may ship with cameras like which

73
00:03:34,920 --> 00:03:37,260
have the ability to process like

74
00:03:37,260 --> 00:03:40,440
millions or billions of pixels and with

75
00:03:40,440 --> 00:03:44,400
the with the developments of like of a

76
00:03:44,400 --> 00:03:47,099
tick tock uh insert Instagram and people

77
00:03:47,099 --> 00:03:48,840
would like to share high definition

78
00:03:48,840 --> 00:03:52,260
images and videos so the Android and

79
00:03:52,260 --> 00:03:54,599
Windows they develop a high a new high

80
00:03:54,599 --> 00:03:56,819
definition image formats and complex

81
00:03:56,819 --> 00:04:00,480
video and audio and image file formats

82
00:04:00,480 --> 00:04:03,959
and also as the BYOD is very popular

83
00:04:03,959 --> 00:04:07,019
these days the the corporate and

84
00:04:07,019 --> 00:04:10,260
Enterprise networks they also have some

85
00:04:10,260 --> 00:04:12,599
special specific configuration file that

86
00:04:12,599 --> 00:04:15,299
is introduced in Android to support the

87
00:04:15,299 --> 00:04:17,459
company's needs or the ice here that

88
00:04:17,459 --> 00:04:20,100
means knees we will go into the details

89
00:04:20,100 --> 00:04:22,199
later on

90
00:04:22,199 --> 00:04:25,740
so for our first Target is the lead pack

91
00:04:25,740 --> 00:04:30,479
deep pack surface in the USP so what is

92
00:04:30,479 --> 00:04:34,080
what is packed or what is Leap pack the

93
00:04:34,080 --> 00:04:36,300
OS provides a way for users to configure

94
00:04:36,300 --> 00:04:39,240
a process Auto configuration script a

95
00:04:39,240 --> 00:04:40,979
personal configuration script defines

96
00:04:40,979 --> 00:04:43,320
how web browsers and other user agents

97
00:04:43,320 --> 00:04:45,540
can automatically choose the appropriate

98
00:04:45,540 --> 00:04:48,960
process server refreshing a given URL

99
00:04:48,960 --> 00:04:52,020
and you can see that it's defined in

100
00:04:52,020 --> 00:04:54,840
JavaScript the whole process

101
00:04:54,840 --> 00:04:57,300
configuration file is actually an

102
00:04:57,300 --> 00:04:58,919
implementation for the function find

103
00:04:58,919 --> 00:05:02,340
process for URL that are given a URL and

104
00:05:02,340 --> 00:05:05,699
the host the function need to return how

105
00:05:05,699 --> 00:05:08,759
this uh specific URL should be reached

106
00:05:08,759 --> 00:05:11,340
whether it should be accessed directly

107
00:05:11,340 --> 00:05:15,440
or it should go through a process

108
00:05:16,139 --> 00:05:19,139
so a different platforms a different

109
00:05:19,139 --> 00:05:21,479
operating systems support the pack and

110
00:05:21,479 --> 00:05:23,639
they have the different implementations

111
00:05:23,639 --> 00:05:25,979
for handling the pack the windows use

112
00:05:25,979 --> 00:05:28,139
the gscript to pass the pack file and

113
00:05:28,139 --> 00:05:30,900
preface previously a Google project Zero

114
00:05:30,900 --> 00:05:33,720
have an excellent research on the pack

115
00:05:33,720 --> 00:05:35,820
handling that Windows attacker can

116
00:05:35,820 --> 00:05:38,820
obtain remote code accusation by uh

117
00:05:38,820 --> 00:05:41,520
hijacking the dark pack domain to host

118
00:05:41,520 --> 00:05:44,220
the manager's pacifier to exploit the

119
00:05:44,220 --> 00:05:47,479
memory corruption box in the g-script

120
00:05:47,479 --> 00:05:50,220
so our questions arise that what's the

121
00:05:50,220 --> 00:05:53,000
situation for Android

122
00:05:53,100 --> 00:05:56,039
in Android we know the most famous

123
00:05:56,039 --> 00:05:58,320
JavaScript engine or most widely used

124
00:05:58,320 --> 00:06:00,600
JavaScript engine is a V8 engine the

125
00:06:00,600 --> 00:06:02,520
width is a complex and Powerful attack

126
00:06:02,520 --> 00:06:05,039
surface in Android so it's heavily

127
00:06:05,039 --> 00:06:08,520
sandboxed since it has like it's a huge

128
00:06:08,520 --> 00:06:11,280
attack surface the browser weight engine

129
00:06:11,280 --> 00:06:13,919
runs in the isolate application contest

130
00:06:13,919 --> 00:06:17,039
before 2017 we have a good old times

131
00:06:17,039 --> 00:06:19,139
when application web views are not

132
00:06:19,139 --> 00:06:20,039
isolated

133
00:06:20,039 --> 00:06:23,699
we utilize this feature in mobile.1 2017

134
00:06:23,699 --> 00:06:28,380
and quickly excluding Android o that all

135
00:06:28,380 --> 00:06:30,960
application web use is isolated like the

136
00:06:30,960 --> 00:06:33,660
like the Chrome ones

137
00:06:33,660 --> 00:06:36,419
so can you imagine there's still a

138
00:06:36,419 --> 00:06:39,000
remaining un isolated V8 in the platform

139
00:06:39,000 --> 00:06:40,800
application context

140
00:06:40,800 --> 00:06:43,259
uh it's so good to be true but it just

141
00:06:43,259 --> 00:06:44,940
exists

142
00:06:44,940 --> 00:06:47,340
so and now let's see how the pack file

143
00:06:47,340 --> 00:06:49,620
is processed in Android there are

144
00:06:49,620 --> 00:06:51,620
different implementations in Android

145
00:06:51,620 --> 00:06:54,720
including Android 10 Android 11 and

146
00:06:54,720 --> 00:06:59,819
Android 12. and the Box we found here is

147
00:06:59,819 --> 00:07:05,039
is including including cve 2020 zero two

148
00:07:05,039 --> 00:07:07,280
four zero a CV

149
00:07:07,280 --> 00:07:10,039
2020-0224 and CV

150
00:07:10,039 --> 00:07:13,199
2021.0393 and you can see it got like

151
00:07:13,199 --> 00:07:16,139
high or critical ratings from Google

152
00:07:16,139 --> 00:07:18,319
foreign

153
00:07:18,319 --> 00:07:21,900
Service Pack service is exported in the

154
00:07:21,900 --> 00:07:24,780
packages a service pack processor in

155
00:07:24,780 --> 00:07:29,340
AOSP and we can see that for the for the

156
00:07:29,340 --> 00:07:31,919
network request from for the network

157
00:07:31,919 --> 00:07:35,580
request it with the parameters host and

158
00:07:35,580 --> 00:07:37,800
the URL it actually calls into pack

159
00:07:37,800 --> 00:07:40,500
native make process request

160
00:07:40,500 --> 00:07:43,740
and the cognitive Mac proceed request

161
00:07:43,740 --> 00:07:48,120
actually is backed by a pack native and

162
00:07:48,120 --> 00:07:51,240
it will cost to Native implementation

163
00:07:51,240 --> 00:07:54,300
which are in the Deep GI pack processor

164
00:07:54,300 --> 00:07:55,979
dot ISO

165
00:07:55,979 --> 00:07:58,620
and this also implemented in Surplus

166
00:07:58,620 --> 00:08:01,680
Mass actually was various costs to the

167
00:08:01,680 --> 00:08:03,060
V8

168
00:08:03,060 --> 00:08:06,300
so uh where is the proceed resolver V8

169
00:08:06,300 --> 00:08:08,940
handle implemented in the screenshot of

170
00:08:08,940 --> 00:08:13,400
the source of the snippet I posted here

171
00:08:13,860 --> 00:08:16,620
so let's dig deeper here and we can see

172
00:08:16,620 --> 00:08:18,660
the answer is the external chromium Leaf

173
00:08:18,660 --> 00:08:21,080
pack and external V8

174
00:08:21,080 --> 00:08:24,479
the final implementation that is called

175
00:08:24,479 --> 00:08:26,639
by wiper actually creates a weight

176
00:08:26,639 --> 00:08:30,180
contest uh in the process space our pack

177
00:08:30,180 --> 00:08:32,159
processor and evaluates the packet

178
00:08:32,159 --> 00:08:34,860
script file and you can see in the left

179
00:08:34,860 --> 00:08:39,479
side of the uh of the snippet code the

180
00:08:39,479 --> 00:08:42,620
for the incoming UI on the host uh

181
00:08:42,620 --> 00:08:47,720
contest is created and the function the

182
00:08:47,720 --> 00:08:50,399
final process for URL function is

183
00:08:50,399 --> 00:08:53,399
retrieved and evaluated in the innovate

184
00:08:53,399 --> 00:08:55,680
context

185
00:08:55,680 --> 00:08:58,560
and the other problem here that quickly

186
00:08:58,560 --> 00:09:01,440
arises that uh where is the

187
00:09:01,440 --> 00:09:03,959
corresponding weight source code is it

188
00:09:03,959 --> 00:09:07,440
in webview or is it in a separate Branch

189
00:09:07,440 --> 00:09:09,480
or separate Ripple

190
00:09:09,480 --> 00:09:13,019
uh the answer is very uh uh interesting

191
00:09:13,019 --> 00:09:16,800
or very promising to attack her at uh

192
00:09:16,800 --> 00:09:20,279
before the Android 11 a separate branch

193
00:09:20,279 --> 00:09:22,560
of V8 is maintained in the external

194
00:09:22,560 --> 00:09:27,060
weight report in the AOSP and from the

195
00:09:27,060 --> 00:09:30,180
commit log here that we we have several

196
00:09:30,180 --> 00:09:33,300
I think very interesting conclusion

197
00:09:33,300 --> 00:09:35,519
the separate way the Ripple has patch

198
00:09:35,519 --> 00:09:38,820
Gap that which means that end days also

199
00:09:38,820 --> 00:09:41,580
work the resolver itself is a native

200
00:09:41,580 --> 00:09:45,000
code and might contain box uh actually

201
00:09:45,000 --> 00:09:47,640
it is also the case that uh

202
00:09:47,640 --> 00:09:50,160
there is some somebody found some bugs

203
00:09:50,160 --> 00:09:52,740
here in the is over rather than the

204
00:09:52,740 --> 00:09:54,180
weight code

205
00:09:54,180 --> 00:09:56,100
the weight itself does not run the

206
00:09:56,100 --> 00:09:58,080
isolated process

207
00:09:58,080 --> 00:10:01,380
Ary previously uh some people reported

208
00:10:01,380 --> 00:10:04,440
uh some and some end days here and it

209
00:10:04,440 --> 00:10:06,600
lead to a minor change in weight options

210
00:10:06,600 --> 00:10:10,200
and we can see uh no optimized uh option

211
00:10:10,200 --> 00:10:11,760
is introduced

212
00:10:11,760 --> 00:10:14,820
it accused a jetty box which means that

213
00:10:14,820 --> 00:10:17,220
since there's a it is because that if

214
00:10:17,220 --> 00:10:20,160
there is no optimization you can the jit

215
00:10:20,160 --> 00:10:23,700
feature is turned off and you can not uh

216
00:10:23,700 --> 00:10:27,779
export the the git box but only turning

217
00:10:27,779 --> 00:10:30,060
off GRT is far from enough because we

218
00:10:30,060 --> 00:10:33,240
still have other zero days and then days

219
00:10:33,240 --> 00:10:34,800
for example

220
00:10:34,800 --> 00:10:37,580
a CV

221
00:10:37,580 --> 00:10:40,800
2020-0240 is an integer overflow in the

222
00:10:40,800 --> 00:10:43,860
new fixed double array the originally a

223
00:10:43,860 --> 00:10:46,160
chromium issue is

224
00:10:46,160 --> 00:10:50,339
938251 and the root cause of this bar is

225
00:10:50,339 --> 00:10:52,620
that the new fixed double array does not

226
00:10:52,620 --> 00:10:55,140
expand at negative length integer for

227
00:10:55,140 --> 00:10:57,660
the lens and it leads to a natural flow

228
00:10:57,660 --> 00:11:02,519
and it does not require git to exploit

229
00:11:02,519 --> 00:11:04,860
this part and the root cause is also not

230
00:11:04,860 --> 00:11:06,140
in jit

231
00:11:06,140 --> 00:11:08,640
we can see on the right side of the

232
00:11:08,640 --> 00:11:11,700
screen there's a POC called snapping for

233
00:11:11,700 --> 00:11:13,800
this part

234
00:11:13,800 --> 00:11:16,980
that uh so to craft an exploit in the

235
00:11:16,980 --> 00:11:19,680
pack processor we can create an array

236
00:11:19,680 --> 00:11:24,180
with with auto band lens that uh

237
00:11:24,180 --> 00:11:26,160
so that we can use it to get an

238
00:11:26,160 --> 00:11:28,320
arbitrary read write and finally to

239
00:11:28,320 --> 00:11:31,320
overwrite the webassembly code page to

240
00:11:31,320 --> 00:11:33,779
to write our Shell Code in the code page

241
00:11:33,779 --> 00:11:35,640
and finally jump to the Shell code to

242
00:11:35,640 --> 00:11:37,620
get a code execution

243
00:11:37,620 --> 00:11:40,320
the detail of the bug is not going to be

244
00:11:40,320 --> 00:11:42,060
elaborate here and if you are interested

245
00:11:42,060 --> 00:11:45,600
you can consult originally issue

246
00:11:45,600 --> 00:11:49,440
so the consequence of this is exploit is

247
00:11:49,440 --> 00:11:51,600
that we got good accusation in the

248
00:11:51,600 --> 00:11:53,399
platform application contest

249
00:11:53,399 --> 00:11:56,000
which is a

250
00:11:56,000 --> 00:11:58,620
somehow promised in context rather than

251
00:11:58,620 --> 00:12:01,440
the untrusted application contest or

252
00:12:01,440 --> 00:12:03,600
isolate application contest

253
00:12:03,600 --> 00:12:06,779
uh fortunately for the user but

254
00:12:06,779 --> 00:12:08,940
unfortunately for the attacker is that

255
00:12:08,940 --> 00:12:10,620
the permission the application

256
00:12:10,620 --> 00:12:14,060
permission or pack processor is limited

257
00:12:14,060 --> 00:12:17,100
by saying it's limited I mean that it

258
00:12:17,100 --> 00:12:18,839
does not have like a read or write

259
00:12:18,839 --> 00:12:21,720
external storage permission so it cannot

260
00:12:21,720 --> 00:12:24,180
access your photos it does not have SMS

261
00:12:24,180 --> 00:12:25,860
permission they cannot access your

262
00:12:25,860 --> 00:12:28,680
contacts but still it opens the way for

263
00:12:28,680 --> 00:12:31,440
attacker to like exploit a further box

264
00:12:31,440 --> 00:12:36,420
because the platform map contest is good

265
00:12:36,420 --> 00:12:39,480
for the attacker to try to exploit the

266
00:12:39,480 --> 00:12:42,480
drivers or other services box to

267
00:12:42,480 --> 00:12:44,760
actually privilege

268
00:12:44,760 --> 00:12:48,180
so uh here is a quick demo here to show

269
00:12:48,180 --> 00:12:50,540
the bar

270
00:13:22,139 --> 00:13:25,920
so we can see that as soon as the

271
00:13:25,920 --> 00:13:29,040
malicious pack URL is entered

272
00:13:29,040 --> 00:13:32,579
the the shell quickly picks up hooks up

273
00:13:32,579 --> 00:13:34,860
and the attacker gets a reverse shell on

274
00:13:34,860 --> 00:13:38,220
the uh currently and use the word under

275
00:13:38,220 --> 00:13:41,160
on the newest version at that time

276
00:13:41,160 --> 00:13:43,560
and of course the bank has been reported

277
00:13:43,560 --> 00:13:45,959
the patched by Google it's Embark in the

278
00:13:45,959 --> 00:13:48,680
Android 10.

279
00:13:49,380 --> 00:13:51,980
foreign

280
00:14:01,940 --> 00:14:05,040
so we quickly saw some changes in the

281
00:14:05,040 --> 00:14:06,660
Android open source project that were

282
00:14:06,660 --> 00:14:09,180
introduced to medic automatically the

283
00:14:09,180 --> 00:14:11,940
Sparks a new flag has used webview pack

284
00:14:11,940 --> 00:14:14,700
processor is introduced and it switches

285
00:14:14,700 --> 00:14:17,160
it controls the switch between the pack

286
00:14:17,160 --> 00:14:19,019
value and pack native

287
00:14:19,019 --> 00:14:22,980
apartment will now redirect the pack uh

288
00:14:22,980 --> 00:14:25,200
processing to system by wheel which

289
00:14:25,200 --> 00:14:27,360
means that it will directly use the

290
00:14:27,360 --> 00:14:29,579
weight bundle in the system by view

291
00:14:29,579 --> 00:14:32,100
instead of a separate with branch

292
00:14:32,100 --> 00:14:35,220
under the flag is by default true which

293
00:14:35,220 --> 00:14:38,459
means that in Android 11 hacknet

294
00:14:38,459 --> 00:14:41,339
cognitive is never used in the

295
00:14:41,339 --> 00:14:44,040
screenshot here and you can see that now

296
00:14:44,040 --> 00:14:46,920
the pack processors process process Maps

297
00:14:46,920 --> 00:14:50,220
now contains a webview code instead of

298
00:14:50,220 --> 00:14:54,720
the originally with code

299
00:14:54,779 --> 00:14:57,779
so in Android 12 Google goes one step

300
00:14:57,779 --> 00:15:00,120
further and the switch is removed and

301
00:15:00,120 --> 00:15:02,000
only pack by wheel is used

302
00:15:02,000 --> 00:15:04,980
but the question Still Remains that the

303
00:15:04,980 --> 00:15:06,899
passing still runs in the non-isolated

304
00:15:06,899 --> 00:15:09,180
context uh here the screenshot

305
00:15:09,180 --> 00:15:13,380
demonstrates that we use a a zero day or

306
00:15:13,380 --> 00:15:16,440
a newest lead bar to test and we can see

307
00:15:16,440 --> 00:15:18,360
that the crash is still in the pack

308
00:15:18,360 --> 00:15:20,940
processor itself rather than rather than

309
00:15:20,940 --> 00:15:25,740
a isolated application contest

310
00:15:25,740 --> 00:15:28,139
so here's all for the for our first

311
00:15:28,139 --> 00:15:30,839
Target the pack serve service attack

312
00:15:30,839 --> 00:15:34,019
service in a USP now I will go to the

313
00:15:34,019 --> 00:15:36,420
second text service the dng and other

314
00:15:36,420 --> 00:15:37,860
image formats in the Samsung Chrome

315
00:15:37,860 --> 00:15:39,000
Library

316
00:15:39,000 --> 00:15:41,399
and the first bug of the current library

317
00:15:41,399 --> 00:15:44,339
is found by Natalia project zero in 2015

318
00:15:44,339 --> 00:15:46,680
and I believe some of you have heard

319
00:15:46,680 --> 00:15:49,860
about this research in the Quran because

320
00:15:49,860 --> 00:15:53,339
in 2020 the project zero and I both

321
00:15:53,339 --> 00:15:55,440
contact conduct funding again in the

322
00:15:55,440 --> 00:15:58,920
Quran library and we find we did some

323
00:15:58,920 --> 00:16:00,660
research in the from different code

324
00:16:00,660 --> 00:16:02,579
passes and different formats and we

325
00:16:02,579 --> 00:16:05,220
found different bugs the project Zero's

326
00:16:05,220 --> 00:16:07,980
blog mentioned part in the qmg code qmg

327
00:16:07,980 --> 00:16:10,380
image key image format and I found other

328
00:16:10,380 --> 00:16:13,500
box in the jpeg shift dng passing

329
00:16:13,500 --> 00:16:15,839
the Chrome is a quite complex binary

330
00:16:15,839 --> 00:16:19,260
with lot of codecs and in the Samsung

331
00:16:19,260 --> 00:16:21,600
system partition which means that it

332
00:16:21,600 --> 00:16:23,699
exists in in billions of signs and

333
00:16:23,699 --> 00:16:26,599
phones by default

334
00:16:27,320 --> 00:16:30,959
the API reversing of the Samsung Chrome

335
00:16:30,959 --> 00:16:34,019
library is the first step for for us to

336
00:16:34,019 --> 00:16:37,079
find the box here a natural entries in

337
00:16:37,079 --> 00:16:40,079
the stock Gallery applications and you

338
00:16:40,079 --> 00:16:42,240
can see that the Chrome codec interface

339
00:16:42,240 --> 00:16:44,339
is a Java wrapper for the Chrome codec

340
00:16:44,339 --> 00:16:47,339
and the code the puzzle will be called

341
00:16:47,339 --> 00:16:50,940
by image decoder decoded file and when

342
00:16:50,940 --> 00:16:53,040
will Chrome codec be used and we will

343
00:16:53,040 --> 00:16:55,860
use the Android scab used there are

344
00:16:55,860 --> 00:16:59,519
three preconditions uh the codec need to

345
00:16:59,519 --> 00:17:02,699
be presented the flag injustical bonds

346
00:17:02,699 --> 00:17:05,400
need to be true and in if preferred qm

347
00:17:05,400 --> 00:17:08,400
codec flag needs to be true

348
00:17:08,400 --> 00:17:11,040
so when will this flux be true so that

349
00:17:11,040 --> 00:17:14,099
the current codec will be will be used

350
00:17:14,099 --> 00:17:16,740
uh the rounds are different for

351
00:17:16,740 --> 00:17:19,319
different image types but for all image

352
00:17:19,319 --> 00:17:23,760
types for some image types uh the the

353
00:17:23,760 --> 00:17:26,160
flags are defer to true for some Samsung

354
00:17:26,160 --> 00:17:29,520
perpetually format but other major

355
00:17:29,520 --> 00:17:32,340
formats like a pack GIF BMP and others

356
00:17:32,340 --> 00:17:34,980
it is set to true in some threads for

357
00:17:34,980 --> 00:17:36,960
example in the thumbnail thread the

358
00:17:36,960 --> 00:17:39,000
phase detection stress and is

359
00:17:39,000 --> 00:17:41,580
automatically triggered when the fire is

360
00:17:41,580 --> 00:17:44,340
is added to inventory by media scan

361
00:17:44,340 --> 00:17:46,860
interns for example if you download the

362
00:17:46,860 --> 00:17:48,000
image

363
00:17:48,000 --> 00:17:51,660
from browser from e-farm emails from a

364
00:17:51,660 --> 00:17:54,179
receiving a receiving or send or saving

365
00:17:54,179 --> 00:17:56,340
the message from a saving the image from

366
00:17:56,340 --> 00:17:57,480
MMS

367
00:17:57,480 --> 00:18:00,000
and for other situations the scaled

368
00:18:00,000 --> 00:18:01,980
using instead current we are not

369
00:18:01,980 --> 00:18:04,740
interested in scale here so we will only

370
00:18:04,740 --> 00:18:07,559
considered about the aforementioned

371
00:18:07,559 --> 00:18:09,059
situations

372
00:18:09,059 --> 00:18:11,580
so to draw a conclusion receiving the

373
00:18:11,580 --> 00:18:14,400
image triggers the library and the code

374
00:18:14,400 --> 00:18:19,020
is actually in background suddenly

375
00:18:19,039 --> 00:18:22,440
to take further away go from the Java

376
00:18:22,440 --> 00:18:24,780
code to the native code the Java code

377
00:18:24,780 --> 00:18:26,760
called in the GI function then the GI

378
00:18:26,760 --> 00:18:29,640
function accepts a far path and the byte

379
00:18:29,640 --> 00:18:31,559
array and returns a bitmap with pixel

380
00:18:31,559 --> 00:18:33,780
filled the metadata had retrieved by

381
00:18:33,780 --> 00:18:36,900
Chrome get image info from file under

382
00:18:36,900 --> 00:18:38,360
the create speed map

383
00:18:38,360 --> 00:18:40,980
based on the metadata

384
00:18:40,980 --> 00:18:45,720
the metadata will tell the color the it

385
00:18:45,720 --> 00:18:48,419
will try to decide the image type the

386
00:18:48,419 --> 00:18:52,740
words the hit another meta message for

387
00:18:52,740 --> 00:18:55,860
the image the Android bitmap log pixels

388
00:18:55,860 --> 00:18:58,260
function increase buffer depends on RGB

389
00:18:58,260 --> 00:19:02,160
types and the file the image size image

390
00:19:02,160 --> 00:19:05,400
Wireless orders other informations other

391
00:19:05,400 --> 00:19:07,620
parsing now will dispatch it to QR

392
00:19:07,620 --> 00:19:10,320
decode image for different types and for

393
00:19:10,320 --> 00:19:12,960
example in the right side of the of the

394
00:19:12,960 --> 00:19:14,640
presentation you can see the code the

395
00:19:14,640 --> 00:19:16,559
compare code snipping and for different

396
00:19:16,559 --> 00:19:18,900
types they have a decode jpactic called

397
00:19:18,900 --> 00:19:22,919
EMP and other functions code on the code

398
00:19:22,919 --> 00:19:24,299
passes

399
00:19:24,299 --> 00:19:26,820
and there's a passing result is written

400
00:19:26,820 --> 00:19:29,700
to the buffer provided by bitmap.pixels

401
00:19:29,700 --> 00:19:32,160
and the final is Android feedback analog

402
00:19:32,160 --> 00:19:34,320
pixels finish decoding and handles the

403
00:19:34,320 --> 00:19:38,580
bitmap but upwards to the Java world

404
00:19:38,580 --> 00:19:40,919
you can see from the other screenshot

405
00:19:40,919 --> 00:19:43,799
that this code is a rather complexity

406
00:19:43,799 --> 00:19:45,480
which means it's a very interesting

407
00:19:45,480 --> 00:19:47,100
Target for fuzzing

408
00:19:47,100 --> 00:19:51,059
uh to if we want to fire this codec we

409
00:19:51,059 --> 00:19:53,760
need to draw a curve flow of this

410
00:19:53,760 --> 00:19:57,000
Library under so to for summer for

411
00:19:57,000 --> 00:19:59,880
summarize you can see that from because

412
00:19:59,880 --> 00:20:03,179
from ji entry to Chrome get image input

413
00:20:03,179 --> 00:20:05,640
from File 2 and decrease Android paymap

414
00:20:05,640 --> 00:20:07,919
and locks buffer and accurate economics

415
00:20:07,919 --> 00:20:09,419
right for buffer and finalize the

416
00:20:09,419 --> 00:20:12,000
bitmaps returns

417
00:20:12,000 --> 00:20:14,760
the other interesting uh

418
00:20:14,760 --> 00:20:17,460
a situation interesting exception here

419
00:20:17,460 --> 00:20:20,280
is that for the dng format you can see

420
00:20:20,280 --> 00:20:23,400
that dng is a specially handled here by

421
00:20:23,400 --> 00:20:26,880
a specific code parts

422
00:20:26,880 --> 00:20:29,880
and uh I I would like to say I like to

423
00:20:29,880 --> 00:20:32,039
say that TNG is the first class citizen

424
00:20:32,039 --> 00:20:34,620
of the Chrome image code

425
00:20:34,620 --> 00:20:38,580
it has a more complex called flow here

426
00:20:38,580 --> 00:20:40,919
and there is never delegated to scale

427
00:20:40,919 --> 00:20:44,700
for some Custom Custom formats uh for

428
00:20:44,700 --> 00:20:47,340
example in the right side of this

429
00:20:47,340 --> 00:20:49,320
presentation we can see the The Parting

430
00:20:49,320 --> 00:20:52,080
flow of the dng images for incoming

431
00:20:52,080 --> 00:20:55,500
image file if the extension is dng uh it

432
00:20:55,500 --> 00:20:58,140
will call into QR pass metadata and

433
00:20:58,140 --> 00:21:00,059
there is a metadata about it and there

434
00:21:00,059 --> 00:21:02,280
is the make field uh it's also the

435
00:21:02,280 --> 00:21:04,679
window field is Samsung and it will cost

436
00:21:04,679 --> 00:21:07,500
into Quran bit manufacturer decode TNG

437
00:21:07,500 --> 00:21:10,559
preview I mean if the metadata is not

438
00:21:10,559 --> 00:21:12,539
valid it will call into current bit from

439
00:21:12,539 --> 00:21:14,760
in my factory decode file

440
00:21:14,760 --> 00:21:18,059
and if the extension is not TNG the

441
00:21:18,059 --> 00:21:19,860
current build manifest radical fire will

442
00:21:19,860 --> 00:21:23,280
be called again to decide if the current

443
00:21:23,280 --> 00:21:26,220
gas emerge image info from fires think

444
00:21:26,220 --> 00:21:28,740
the fire is a job format the Azure

445
00:21:28,740 --> 00:21:32,039
format is is a separate name for the TNG

446
00:21:32,039 --> 00:21:34,500
format and this answer is true the

447
00:21:34,500 --> 00:21:38,299
qrtical dng file will be called

448
00:21:38,940 --> 00:21:42,179
so uh to create to create a filing

449
00:21:42,179 --> 00:21:45,059
harness uh is similar to the previous

450
00:21:45,059 --> 00:21:48,240
program example we have a new dng

451
00:21:48,240 --> 00:21:51,500
harness for the dng passing and

452
00:21:51,500 --> 00:21:55,260
we will conduct funding on these harness

453
00:21:55,260 --> 00:21:57,840
and we will elaborate about it uh more

454
00:21:57,840 --> 00:21:59,700
later

455
00:21:59,700 --> 00:22:02,520
so we found several bugs or actually

456
00:22:02,520 --> 00:22:04,740
tensor bars in the Chrome our Chrome

457
00:22:04,740 --> 00:22:08,179
Library including cve 2021 a

458
00:22:08,179 --> 00:22:10,919
24346 and there is a typical integer

459
00:22:10,919 --> 00:22:14,940
flow here and you can see a size field

460
00:22:14,940 --> 00:22:18,600
is retrieved from the image under it and

461
00:22:18,600 --> 00:22:21,480
it have uh it is passed to the

462
00:22:21,480 --> 00:22:25,320
Constructor of the new of the array by a

463
00:22:25,320 --> 00:22:28,500
multiplied by eight and then the side

464
00:22:28,500 --> 00:22:31,860
used as a loop to the array and they're

465
00:22:31,860 --> 00:22:34,620
the obvious interior flow here and found

466
00:22:34,620 --> 00:22:36,020
by flooding

467
00:22:36,020 --> 00:22:38,880
and also other bugs like hippo flow will

468
00:22:38,880 --> 00:22:42,419
be right by free others in the hpback

469
00:22:42,419 --> 00:22:44,280
parsing others

470
00:22:44,280 --> 00:22:48,000
so this is uh the the story for the

471
00:22:48,000 --> 00:22:50,820
Target 2 including the box or font and

472
00:22:50,820 --> 00:22:52,799
now I will handle to change out to talk

473
00:22:52,799 --> 00:22:55,559
about the target 3 here

474
00:22:55,559 --> 00:22:56,940
okay

475
00:22:56,940 --> 00:22:58,620
thanks cheetah

476
00:22:58,620 --> 00:23:01,860
now after we drag into two no file

477
00:23:01,860 --> 00:23:05,280
formats it's time to deep tie in can we

478
00:23:05,280 --> 00:23:07,100
find the most similar availabilities

479
00:23:07,100 --> 00:23:12,299
beside Q Mage gpack dng and the exaggery

480
00:23:12,299 --> 00:23:14,460
no more information on the web about

481
00:23:14,460 --> 00:23:17,940
primate media files for searching phones

482
00:23:17,940 --> 00:23:20,159
so where we are essentially use its

483
00:23:20,159 --> 00:23:21,480
unique format

484
00:23:21,480 --> 00:23:24,900
for application point of view media

485
00:23:24,900 --> 00:23:27,059
files are commonly found in preview

486
00:23:27,059 --> 00:23:28,980
instilled applications

487
00:23:28,980 --> 00:23:31,380
and at the same time from another point

488
00:23:31,380 --> 00:23:34,500
of view system or some other privilege

489
00:23:34,500 --> 00:23:36,900
in the process can also handles media

490
00:23:36,900 --> 00:23:39,380
files

491
00:23:43,320 --> 00:23:46,320
so let's find something interesting when

492
00:23:46,320 --> 00:23:48,659
we look for new attack surveys based on

493
00:23:48,659 --> 00:23:50,700
the idea of meaning qmage format

494
00:23:50,700 --> 00:23:52,320
vulnerabilities

495
00:23:52,320 --> 00:23:54,539
we review the past availability mini

496
00:23:54,539 --> 00:23:57,179
methods we found something interesting

497
00:23:57,179 --> 00:24:00,299
in some dictionaries for example system

498
00:24:00,299 --> 00:24:02,760
Media or the dictionaries of building

499
00:24:02,760 --> 00:24:04,799
application on the phone

500
00:24:04,799 --> 00:24:07,440
in attention to Q Majors there are files

501
00:24:07,440 --> 00:24:11,460
which is in SPI service format

502
00:24:11,460 --> 00:24:14,640
in fact security researchers from Google

503
00:24:14,640 --> 00:24:17,039
project zero had discovered this file

504
00:24:17,039 --> 00:24:19,860
formats before which you can see it on

505
00:24:19,860 --> 00:24:23,280
their blog in the mm series but this

506
00:24:23,280 --> 00:24:25,320
audio has no attack service and the

507
00:24:25,320 --> 00:24:26,640
ignored it

508
00:24:26,640 --> 00:24:29,940
however that doesn't proclude us taking

509
00:24:29,940 --> 00:24:32,760
a great interest in this matters

510
00:24:32,760 --> 00:24:35,580
you can see that these files are named

511
00:24:35,580 --> 00:24:38,240
all about system studies like battery

512
00:24:38,240 --> 00:24:42,059
USB charging and some others

513
00:24:42,059 --> 00:24:44,700
for a common scenes of system designs

514
00:24:44,700 --> 00:24:47,940
the system developers usually put files

515
00:24:47,940 --> 00:24:49,980
of the same type of some similar types

516
00:24:49,980 --> 00:24:50,940
together

517
00:24:50,940 --> 00:24:54,360
therefore we found that after we have

518
00:24:54,360 --> 00:24:56,700
found the relative vulnerabilities of

519
00:24:56,700 --> 00:24:59,940
qmage we believe the SPI it may be also

520
00:24:59,940 --> 00:25:02,460
another sensing special image for file

521
00:25:02,460 --> 00:25:07,460
format and it may have such a problem

522
00:25:07,740 --> 00:25:10,140
foreign

523
00:25:10,140 --> 00:25:13,500
next we need to determine our attack

524
00:25:13,500 --> 00:25:14,460
service

525
00:25:14,460 --> 00:25:17,580
unlike Q major we had a no more

526
00:25:17,580 --> 00:25:20,940
information about SPF format so we

527
00:25:20,940 --> 00:25:23,400
decided to choose the old version Away

528
00:25:23,400 --> 00:25:25,320
we have done a lot of reverse

529
00:25:25,320 --> 00:25:27,360
engineering the Java application Level

530
00:25:27,360 --> 00:25:29,760
and the nature level of the system

531
00:25:29,760 --> 00:25:32,460
and we found some interesting strings

532
00:25:32,460 --> 00:25:34,200
and the sound related functions about

533
00:25:34,200 --> 00:25:35,580
SPI

534
00:25:35,580 --> 00:25:37,980
in system binaries and function

535
00:25:37,980 --> 00:25:41,700
libraries we found LPN and label made

536
00:25:41,700 --> 00:25:43,020
Shadow Library

537
00:25:43,020 --> 00:25:46,020
to help him it is actually responsible

538
00:25:46,020 --> 00:25:48,000
for some logical processing when the

539
00:25:48,000 --> 00:25:50,460
Android device is plugged in and the

540
00:25:50,460 --> 00:25:53,000
label Mage is a library which provides

541
00:25:53,000 --> 00:25:56,640
creative processing functions

542
00:25:56,640 --> 00:25:59,460
in fact when we reversed here we can

543
00:25:59,460 --> 00:26:02,039
already understand the name of the SPI

544
00:26:02,039 --> 00:26:04,380
file we talked before a correspondence

545
00:26:04,380 --> 00:26:07,080
to the operation to this processing like

546
00:26:07,080 --> 00:26:10,679
charging batteries or remote it is

547
00:26:10,679 --> 00:26:13,080
actually the picture which is displayed

548
00:26:13,080 --> 00:26:16,919
when searching phone is plugged in the

549
00:26:16,919 --> 00:26:20,640
exactly but unfortunately we can't do

550
00:26:20,640 --> 00:26:23,640
anything about this startup process the

551
00:26:23,640 --> 00:26:26,100
file path is used is a hardcoded in the

552
00:26:26,100 --> 00:26:27,000
code

553
00:26:27,000 --> 00:26:29,220
and all we can do is change the picture

554
00:26:29,220 --> 00:26:34,279
which is displayed in the charging model

555
00:26:35,880 --> 00:26:38,880
therefore we continue to reverse the

556
00:26:38,880 --> 00:26:42,179
relative applications of the media files

557
00:26:42,179 --> 00:26:44,940
and we found the different applications

558
00:26:44,940 --> 00:26:47,760
have the same some same native libraries

559
00:26:47,760 --> 00:26:50,940
which names counting span

560
00:26:50,940 --> 00:26:53,760
it is actually the underlying support of

561
00:26:53,760 --> 00:26:57,299
the S Pen SDK or we can say that is the

562
00:26:57,299 --> 00:27:01,500
SPM framework expand is the highlight of

563
00:27:01,500 --> 00:27:03,779
Jesse mobile phone and it can support

564
00:27:03,779 --> 00:27:07,260
you to do something like hand write text

565
00:27:07,260 --> 00:27:09,059
 pictures

566
00:27:09,059 --> 00:27:11,880
that's why so many preview instilled

567
00:27:11,880 --> 00:27:13,980
applications about it

568
00:27:13,980 --> 00:27:16,980
and after we classify the functions of

569
00:27:16,980 --> 00:27:19,440
each applications we choose testing

570
00:27:19,440 --> 00:27:21,720
nodes as our Target because it has a

571
00:27:21,720 --> 00:27:23,700
very clear way of passing attacked

572
00:27:23,700 --> 00:27:24,779
vectors

573
00:27:24,779 --> 00:27:28,020
it is processing special Note 5 formats

574
00:27:28,020 --> 00:27:31,700
and stocks and stocks

575
00:27:34,320 --> 00:27:37,020
so we did the detail reverse engineering

576
00:27:37,020 --> 00:27:40,140
of searching nodes on the right of right

577
00:27:40,140 --> 00:27:42,659
side of the screen you can see the stock

578
00:27:42,659 --> 00:27:47,279
for Mid file opening xxg hackstamp model

579
00:27:47,279 --> 00:27:50,400
it is a compost compressed file counting

580
00:27:50,400 --> 00:27:52,940
information about other media files like

581
00:27:52,940 --> 00:27:57,419
SPI spp and some others you can see

582
00:27:57,419 --> 00:27:59,700
exactly the string of spi is already

583
00:27:59,700 --> 00:28:02,340
including the Xbox file

584
00:28:02,340 --> 00:28:05,100
and on the left side of the screen is

585
00:28:05,100 --> 00:28:07,140
the passing logic in Java and the native

586
00:28:07,140 --> 00:28:08,220
labor

587
00:28:08,220 --> 00:28:11,220
when you open or save a stock format

588
00:28:11,220 --> 00:28:14,159
document it will first performance

589
00:28:14,159 --> 00:28:16,919
operation similarity simulator to the

590
00:28:16,919 --> 00:28:20,700
compressed and secondly if there is a

591
00:28:20,700 --> 00:28:23,659
image information in hand drive format

592
00:28:23,659 --> 00:28:26,880
which is actually the SPI in the

593
00:28:26,880 --> 00:28:30,480
document it will call its unique puzzles

594
00:28:30,480 --> 00:28:33,720
FPS green coder decoder to cover the

595
00:28:33,720 --> 00:28:36,779
speed map and passing it like a spr

596
00:28:36,779 --> 00:28:39,840
so the logic in Java layer will finally

597
00:28:39,840 --> 00:28:42,659
called native function to code SPI to

598
00:28:42,659 --> 00:28:45,000
puzzles the bitmap of the head driver

599
00:28:45,000 --> 00:28:46,260
picture

600
00:28:46,260 --> 00:28:49,080
then at the nature layer

601
00:28:49,080 --> 00:28:52,140
it's passing logic is similar to the

602
00:28:52,140 --> 00:28:54,720
usual media file pausing

603
00:28:54,720 --> 00:28:56,940
so Vanishing checkout file will call

604
00:28:56,940 --> 00:28:59,940
region metal RGB and the performance

605
00:28:59,940 --> 00:29:03,799
series of processing

606
00:29:06,059 --> 00:29:08,940
so the logic is clear here

607
00:29:08,940 --> 00:29:11,880
the SPI is a built-in file formats for

608
00:29:11,880 --> 00:29:15,480
stocks and this message is retrieved by

609
00:29:15,480 --> 00:29:18,000
read the message argb

610
00:29:18,000 --> 00:29:20,279
it will increase speed map based on

611
00:29:20,279 --> 00:29:23,760
these metadata and the j9 function also

612
00:29:23,760 --> 00:29:27,600
accepts fire pass or better area and the

613
00:29:27,600 --> 00:29:30,960
returns and attribute map with pixel

614
00:29:30,960 --> 00:29:33,200
field

615
00:29:35,279 --> 00:29:39,720
and Andrew bitmap pixels Chris buffers

616
00:29:39,720 --> 00:29:43,500
depend on RGB type passing this patch to

617
00:29:43,500 --> 00:29:46,440
metadata code for different types and

618
00:29:46,440 --> 00:29:49,320
your bitmap on block pixels finish the

619
00:29:49,320 --> 00:29:52,440
decoding compared with the pattern logic

620
00:29:52,440 --> 00:29:54,120
of the queue measure you can find that

621
00:29:54,120 --> 00:29:57,539
something has some similarity in the

622
00:29:57,539 --> 00:30:01,460
processing logic of file policy

623
00:30:05,039 --> 00:30:08,940
so similar similar to many ordinary file

624
00:30:08,940 --> 00:30:11,640
puzzles the point of passing basically

625
00:30:11,640 --> 00:30:14,700
lies in some boundary values like white

626
00:30:14,700 --> 00:30:17,760
height and or the number of materials

627
00:30:17,760 --> 00:30:20,100
the index of material or the size in the

628
00:30:20,100 --> 00:30:20,960
material

629
00:30:20,960 --> 00:30:23,340
understanding likes to use logs which

630
00:30:23,340 --> 00:30:26,279
help us to convert its logic quickly

631
00:30:26,279 --> 00:30:28,380
therefore we focus on the reverse

632
00:30:28,380 --> 00:30:30,779
analyze of the analytic Logic for the

633
00:30:30,779 --> 00:30:33,600
boundary key bound values and the change

634
00:30:33,600 --> 00:30:36,299
some key bias to see as if the code is

635
00:30:36,299 --> 00:30:39,899
running correctly to our surprise we

636
00:30:39,899 --> 00:30:41,880
easily found out about the right

637
00:30:41,880 --> 00:30:44,460
availability this leader has to believe

638
00:30:44,460 --> 00:30:47,279
the statistics piece of code is on test

639
00:30:47,279 --> 00:30:49,559
and we found the Downs of

640
00:30:49,559 --> 00:30:52,140
vulnerabilities based on positive

641
00:30:52,140 --> 00:30:55,200
and the filing work is similarly to the

642
00:30:55,200 --> 00:30:57,360
previous operation in community part we

643
00:30:57,360 --> 00:30:59,039
also wrote a harness to load the

644
00:30:59,039 --> 00:31:01,200
function Library which is responsible

645
00:31:01,200 --> 00:31:03,600
for passing the pspi logic and the

646
00:31:03,600 --> 00:31:05,940
litigator running our folding tool so

647
00:31:05,940 --> 00:31:08,220
space every detail will be discussed in

648
00:31:08,220 --> 00:31:11,159
the following pages and now let's take a

649
00:31:11,159 --> 00:31:14,340
look at the sum of vulnerabilities here

650
00:31:14,340 --> 00:31:17,899
the first case is cve

651
00:31:17,899 --> 00:31:21,480
2021-25496 it happens in the code snap

652
00:31:21,480 --> 00:31:24,360
about segment passing logic and it is

653
00:31:24,360 --> 00:31:26,100
actually a function table hijacking

654
00:31:26,100 --> 00:31:28,620
vulnerabilities caused by an area index

655
00:31:28,620 --> 00:31:31,340
out of bounds

656
00:31:31,340 --> 00:31:34,440
variable V4 is the user to calculated

657
00:31:34,440 --> 00:31:37,279
the index of the area offset

658
00:31:37,279 --> 00:31:40,679
b4138 so obviously it's Point actually

659
00:31:40,679 --> 00:31:43,440
points to an area of functions which is

660
00:31:43,440 --> 00:31:46,080
on the right side of the screen and the

661
00:31:46,080 --> 00:31:48,480
opposite will pass the edges of a

662
00:31:48,480 --> 00:31:51,720
function to v11 and finally in the next

663
00:31:51,720 --> 00:31:54,020
passing logic it will call different

664
00:31:54,020 --> 00:31:56,700
point functions according to different

665
00:31:56,700 --> 00:32:00,299
fragments and you can see v11 is used as

666
00:32:00,299 --> 00:32:02,820
a function point we will just need to

667
00:32:02,820 --> 00:32:04,559
make it point to the position of the

668
00:32:04,559 --> 00:32:06,539
target function and the menu is the

669
00:32:06,539 --> 00:32:09,179
opposite and constructs the parameter

670
00:32:09,179 --> 00:32:12,059
Methods at the same time then you will

671
00:32:12,059 --> 00:32:14,580
give it a primary of excision of the

672
00:32:14,580 --> 00:32:16,320
function

673
00:32:16,320 --> 00:32:21,860
and the next case is CBE 2021

674
00:32:21,860 --> 00:32:25,919
25498 this venabilities is actually a

675
00:32:25,919 --> 00:32:28,679
hijacking of Striker internal function

676
00:32:28,679 --> 00:32:31,260
points you can see it happens in that

677
00:32:31,260 --> 00:32:35,220
code snap 2. the argument of history of

678
00:32:35,220 --> 00:32:38,159
major corporate CB model is actually a

679
00:32:38,159 --> 00:32:40,559
structure that stores the contents of

680
00:32:40,559 --> 00:32:43,679
the object file for for convenience you

681
00:32:43,679 --> 00:32:45,179
can consider it as basically

682
00:32:45,179 --> 00:32:48,779
controllable content so V3 will pass

683
00:32:48,779 --> 00:32:50,940
through the read function and there is a

684
00:32:50,940 --> 00:32:52,980
struggle internal function point will

685
00:32:52,980 --> 00:32:55,740
finally be executed in conditional

686
00:32:55,740 --> 00:32:56,700
statement

687
00:32:56,700 --> 00:32:58,980
but the struggle here is the parents

688
00:32:58,980 --> 00:33:00,899
executive by this function are defined

689
00:33:00,899 --> 00:33:03,899
it and if you want to use this you need

690
00:33:03,899 --> 00:33:06,600
to find a better way

691
00:33:06,600 --> 00:33:09,779
well that's what's the SPI spots

692
00:33:09,779 --> 00:33:12,120
researchers next the chidin will

693
00:33:12,120 --> 00:33:14,340
continue to give you the spreadsheet of

694
00:33:14,340 --> 00:33:17,418
the following contents

695
00:33:18,200 --> 00:33:20,760
since the time is ticking and I will go

696
00:33:20,760 --> 00:33:23,940
a bit further a bit faster here so to

697
00:33:23,940 --> 00:33:25,860
find the previous Mission box we need

698
00:33:25,860 --> 00:33:29,940
some sort of fasting to to do the bug

699
00:33:29,940 --> 00:33:32,399
hunting and the central filing is the

700
00:33:32,399 --> 00:33:34,320
courage guided funding and you know that

701
00:33:34,320 --> 00:33:36,240
her funding needs some sort of feedback

702
00:33:36,240 --> 00:33:38,720
and the coverage information is a key

703
00:33:38,720 --> 00:33:41,519
for source code focusing with source

704
00:33:41,519 --> 00:33:43,279
code access we have compiler

705
00:33:43,279 --> 00:33:46,500
instrumentation support like the ones in

706
00:33:46,500 --> 00:33:50,279
GCC and rvm and therefore if you do not

707
00:33:50,279 --> 00:33:53,100
have the com sort code access or or

708
00:33:53,100 --> 00:33:54,659
compiler support you can use

709
00:33:54,659 --> 00:33:57,419
hardware-based like processor Trace like

710
00:33:57,419 --> 00:33:59,760
Intel pts however they are not very

711
00:33:59,760 --> 00:34:02,279
stable and not very mature to use

712
00:34:02,279 --> 00:34:05,100
and in our situation we use binary based

713
00:34:05,100 --> 00:34:07,980
static rewrite and dynamic tracing a

714
00:34:07,980 --> 00:34:10,080
fighting approach

715
00:34:10,080 --> 00:34:12,839
for funding with resource code access

716
00:34:12,839 --> 00:34:15,300
you have a compiler instrumentations

717
00:34:15,300 --> 00:34:18,839
like the very typical AFL implementation

718
00:34:18,839 --> 00:34:22,980
that it insert code at Edge transfers

719
00:34:22,980 --> 00:34:26,280
and record coverage Edge transfers in

720
00:34:26,280 --> 00:34:28,739
the sharp memory current location is

721
00:34:28,739 --> 00:34:30,960
generally have a random generated and

722
00:34:30,960 --> 00:34:33,960
the share memory records the control the

723
00:34:33,960 --> 00:34:37,139
control flow transfers and the inputs

724
00:34:37,139 --> 00:34:39,780
that triggers new local states which

725
00:34:39,780 --> 00:34:42,480
means it touches new code is added to

726
00:34:42,480 --> 00:34:45,480
the queue and the inputs that have no

727
00:34:45,480 --> 00:34:47,460
use are dropped

728
00:34:47,460 --> 00:34:50,580
uh so we have a very we are very

729
00:34:50,580 --> 00:34:52,500
familiar familiar with open source

730
00:34:52,500 --> 00:34:54,359
software fuzzing and there are tons of

731
00:34:54,359 --> 00:34:57,119
use cases started here and tools to use

732
00:34:57,119 --> 00:34:59,760
however for closed Source uh binary

733
00:34:59,760 --> 00:35:02,119
funding like the previous box we we

734
00:35:02,119 --> 00:35:05,460
discussed there are few real work cases

735
00:35:05,460 --> 00:35:08,099
that we can refer to and especially for

736
00:35:08,099 --> 00:35:10,440
mobile boundaries so in today's talk we

737
00:35:10,440 --> 00:35:12,180
like to fill the gap between the theory

738
00:35:12,180 --> 00:35:14,099
and actions

739
00:35:14,099 --> 00:35:16,619
so first thing first is that so which

740
00:35:16,619 --> 00:35:18,480
one do we need to choose for binary

741
00:35:18,480 --> 00:35:20,280
funding static rewrite or dynamic

742
00:35:20,280 --> 00:35:21,320
tracing

743
00:35:21,320 --> 00:35:24,480
uh our conclusion here is that factory

744
00:35:24,480 --> 00:35:25,920
rewrite is an option for Android

745
00:35:25,920 --> 00:35:28,800
boundaries but it has many disadvantages

746
00:35:28,800 --> 00:35:32,760
for example the arm ct4 support for

747
00:35:32,760 --> 00:35:35,280
Android boundaries is immature at least

748
00:35:35,280 --> 00:35:38,339
for a publicly accessible tools that

749
00:35:38,339 --> 00:35:40,560
they have runtime crashes income

750
00:35:40,560 --> 00:35:42,660
coverages especially for complex

751
00:35:42,660 --> 00:35:43,800
boundaries

752
00:35:43,800 --> 00:35:48,480
and also funding on phones is uh you you

753
00:35:48,480 --> 00:35:51,300
have many issues that on if your father

754
00:35:51,300 --> 00:35:53,099
and phones you have overheating issues

755
00:35:53,099 --> 00:35:55,260
low for privacy issues or even physical

756
00:35:55,260 --> 00:35:57,900
bricks issues it is so it is of course

757
00:35:57,900 --> 00:36:01,079
more convenient and more affordable and

758
00:36:01,079 --> 00:36:04,859
cheaper 2000 servers especially on X x86

759
00:36:04,859 --> 00:36:08,460
servers rather than arm servers so a

760
00:36:08,460 --> 00:36:11,339
conclusion here is that uh rewriting arm

761
00:36:11,339 --> 00:36:14,460
binaries and fathom and armed phones is

762
00:36:14,460 --> 00:36:16,920
not very acceptable solution not enough

763
00:36:16,920 --> 00:36:19,260
scale and of course you can try it on

764
00:36:19,260 --> 00:36:21,720
servers but we do not we did not test

765
00:36:21,720 --> 00:36:24,780
here and I think is it is somehow a bit

766
00:36:24,780 --> 00:36:28,500
expensive on AWS so it's an open

767
00:36:28,500 --> 00:36:31,560
question here that we can discuss later

768
00:36:31,560 --> 00:36:33,900
if you choose a dynamic tracing approach

769
00:36:33,900 --> 00:36:37,020
you still have some decisions that need

770
00:36:37,020 --> 00:36:39,900
to make uh you do do you want to use the

771
00:36:39,900 --> 00:36:43,020
Trap or debugger approach it is great in

772
00:36:43,020 --> 00:36:46,020
Macos format advising as demonstrated by

773
00:36:46,020 --> 00:36:49,020
project zero and it's also good for

774
00:36:49,020 --> 00:36:51,060
doing quick dirty tasks and fasting in

775
00:36:51,060 --> 00:36:53,339
the service apis but have the same

776
00:36:53,339 --> 00:36:56,280
problem that it does not scale

777
00:36:56,280 --> 00:36:58,800
so finally we choose the cumul approach

778
00:36:58,800 --> 00:37:01,260
for the dynamic treating fasting a cumul

779
00:37:01,260 --> 00:37:03,119
you know that cumul provides a dynamic

780
00:37:03,119 --> 00:37:05,040
binary translation where transistor

781
00:37:05,040 --> 00:37:08,160
block the TCG time no tiny code

782
00:37:08,160 --> 00:37:12,180
generator has Ops isir and for Target

783
00:37:12,180 --> 00:37:14,460
machine code it translates the target

784
00:37:14,460 --> 00:37:18,420
machine code to uh where front end to

785
00:37:18,420 --> 00:37:21,960
open to Ops ir and the Ops IR is

786
00:37:21,960 --> 00:37:24,420
translated by backend to actual host

787
00:37:24,420 --> 00:37:27,660
machine code and and executed the whole

788
00:37:27,660 --> 00:37:31,320
flow is Illustrated here that for each

789
00:37:31,320 --> 00:37:34,020
Target PC a translated block counter is

790
00:37:34,020 --> 00:37:36,619
looked up and if the block is already

791
00:37:36,619 --> 00:37:40,020
translated and is catch the transit code

792
00:37:40,020 --> 00:37:41,880
is directly executed

793
00:37:41,880 --> 00:37:43,500
and therefore

794
00:37:43,500 --> 00:37:48,180
uh for untransit blocks the

795
00:37:48,180 --> 00:37:51,119
the code the block is will be will go

796
00:37:51,119 --> 00:37:53,940
through the TB generator code and it

797
00:37:53,940 --> 00:37:57,300
will translate it into a new block and

798
00:37:57,300 --> 00:37:59,820
change it to explain existing block and

799
00:37:59,820 --> 00:38:02,640
the transit code is executed and for a

800
00:38:02,640 --> 00:38:05,160
synchronized interrupts process iOS and

801
00:38:05,160 --> 00:38:07,079
there's no more a translated block

802
00:38:07,079 --> 00:38:09,420
exceptions uh the excitement handling

803
00:38:09,420 --> 00:38:11,700
routine is called

804
00:38:11,700 --> 00:38:14,160
so a procurement approach we can insert

805
00:38:14,160 --> 00:38:16,619
the coverage collection of our TB

806
00:38:16,619 --> 00:38:18,720
hooking and they there are some

807
00:38:18,720 --> 00:38:21,599
implementations some patches in the AFL

808
00:38:21,599 --> 00:38:24,960
plus plus and AFL Unicom into the cumul

809
00:38:24,960 --> 00:38:28,079
code and so that the coverage is is

810
00:38:28,079 --> 00:38:30,300
recorded when the TV is executed and

811
00:38:30,300 --> 00:38:32,760
translated

812
00:38:32,760 --> 00:38:35,220
uh so for human approach we still have

813
00:38:35,220 --> 00:38:38,040
some options here that uh Kuma Unicom

814
00:38:38,040 --> 00:38:39,900
provides a raw interface to run machine

815
00:38:39,900 --> 00:38:42,420
code that it can run some code at a

816
00:38:42,420 --> 00:38:45,300
given memory address of given content it

817
00:38:45,300 --> 00:38:47,579
also uh Pro it provides callback and

818
00:38:47,579 --> 00:38:50,339
memory interfaces for end users and

819
00:38:50,339 --> 00:38:52,800
developers which means that it does not

820
00:38:52,800 --> 00:38:55,740
have support for this course or AFL in

821
00:38:55,740 --> 00:38:59,520
the erf initialization or loading and

822
00:38:59,520 --> 00:39:01,680
the user need to implement them himself

823
00:39:01,680 --> 00:39:04,440
the QV user on the other hand reduced

824
00:39:04,440 --> 00:39:06,119
uses the host operating system

825
00:39:06,119 --> 00:39:08,220
environment to support different

826
00:39:08,220 --> 00:39:10,440
instruction set and there is a

827
00:39:10,440 --> 00:39:12,000
translation for this course to host

828
00:39:12,000 --> 00:39:14,339
kernel with the same Cisco interfaces or

829
00:39:14,339 --> 00:39:17,640
ebi so that you can use Google user to

830
00:39:17,640 --> 00:39:21,780
execute Android arm ex64 harness on x84

831
00:39:21,780 --> 00:39:24,060
Linux server

832
00:39:24,060 --> 00:39:29,040
uh so to draw uh to to give a more uh uh

833
00:39:29,040 --> 00:39:31,380
clear illustration here you can see that

834
00:39:31,380 --> 00:39:34,740
uh for cumul a system that uh when when

835
00:39:34,740 --> 00:39:37,680
it executes the binary it actually have

836
00:39:37,680 --> 00:39:40,200
the CPU immigration part their interface

837
00:39:40,200 --> 00:39:42,960
part the peripheral model part and flow

838
00:39:42,960 --> 00:39:45,060
control part A cubic user approach

839
00:39:45,060 --> 00:39:47,400
actually delegates the io interfaces and

840
00:39:47,400 --> 00:39:50,820
a periform models to its translate and

841
00:39:50,820 --> 00:39:53,099
forward it to host operating systems

842
00:39:53,099 --> 00:39:55,619
however for human user approach you need

843
00:39:55,619 --> 00:39:58,280
to implement the assist calls yourself

844
00:39:58,280 --> 00:40:01,320
like implementing a provided kernel and

845
00:40:01,320 --> 00:40:04,619
even managing the memory and and

846
00:40:04,619 --> 00:40:06,960
implementing the peripheral models

847
00:40:06,960 --> 00:40:09,140
yourself

848
00:40:09,240 --> 00:40:11,579
so uh

849
00:40:11,579 --> 00:40:14,520
okay so uh to draw conclusion here that

850
00:40:14,520 --> 00:40:17,040
Community come is a faster than human

851
00:40:17,040 --> 00:40:19,740
user if you implement the ciscoes

852
00:40:19,740 --> 00:40:21,420
yourself with the cost of engineering

853
00:40:21,420 --> 00:40:24,359
effort but the QB user is very fairly

854
00:40:24,359 --> 00:40:26,760
enough to conduct funding with a proper

855
00:40:26,760 --> 00:40:27,660
harness

856
00:40:27,660 --> 00:40:30,259
foreign

857
00:40:31,940 --> 00:40:34,200
unicorn approach and Community approach

858
00:40:34,200 --> 00:40:36,240
for conduct funding on the about

859
00:40:36,240 --> 00:40:39,560
mentioned harness

860
00:40:40,980 --> 00:40:44,040
so the first input is actually a very

861
00:40:44,040 --> 00:40:46,859
common image case image seat in the AFL

862
00:40:46,859 --> 00:40:49,500
images and we prepare the relevant

863
00:40:49,500 --> 00:40:51,420
screen partition in the environment for

864
00:40:51,420 --> 00:40:53,040
the camera user to run the Android

865
00:40:53,040 --> 00:40:57,000
boundaries the funding it runs at 200

866
00:40:57,000 --> 00:41:00,240
200 seconds at 200 per second per core

867
00:41:00,240 --> 00:41:02,460
and the 66

868
00:41:02,460 --> 00:41:05,880
000 per server.com is like a 7 000

869
00:41:05,880 --> 00:41:08,220
crashes here under the box is all

870
00:41:08,220 --> 00:41:09,540
Dimension above

871
00:41:09,540 --> 00:41:12,300
uh so for crowd charging that there's a

872
00:41:12,300 --> 00:41:14,220
problem that cumul does not reflect

873
00:41:14,220 --> 00:41:16,800
reflect crashes to host and you will

874
00:41:16,800 --> 00:41:19,920
need a custom arminer and Bug Tracer we

875
00:41:19,920 --> 00:41:22,320
hear you some memory sanitizers like

876
00:41:22,320 --> 00:41:25,440
this locator and curation the Quran is

877
00:41:25,440 --> 00:41:28,020
especially useful

878
00:41:28,020 --> 00:41:30,720
so uh here's uh the power for the

879
00:41:30,720 --> 00:41:33,060
dynamic dynamic fuzzing and for other

880
00:41:33,060 --> 00:41:35,700
cases we also found a large part of

881
00:41:35,700 --> 00:41:38,400
critical High celebrity box in the

882
00:41:38,400 --> 00:41:40,260
Samsung symbol library and show Miss

883
00:41:40,260 --> 00:41:42,839
Library another vulnerabilities but due

884
00:41:42,839 --> 00:41:44,579
to the disclosure process we will not

885
00:41:44,579 --> 00:41:46,619
discuss it more here

886
00:41:46,619 --> 00:41:50,040
uh finally we have some references on

887
00:41:50,040 --> 00:41:52,560
the tools and the codes and you can read

888
00:41:52,560 --> 00:41:55,800
them more if you are interested

889
00:41:55,800 --> 00:41:58,560
so here's our first slide and do you

890
00:41:58,560 --> 00:42:00,300
have any questions under the relevant

891
00:42:00,300 --> 00:42:02,280
POC and the fasting harness and funding

892
00:42:02,280 --> 00:42:04,980
script will be available at the at my

893
00:42:04,980 --> 00:42:06,960
GitHub after the talk

894
00:42:06,960 --> 00:42:09,619
thank you

895
00:42:09,630 --> 00:42:12,699
[Music]

896
00:42:16,540 --> 00:42:19,630
[Music]

