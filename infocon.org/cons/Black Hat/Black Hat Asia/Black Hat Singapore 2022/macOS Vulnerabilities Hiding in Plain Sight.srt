1
00:00:01,740 --> 00:00:04,810
[Music]

2
00:00:08,320 --> 00:00:10,320
hello everyone uh

3
00:00:10,320 --> 00:00:13,519
here in the room and uh virtually at uh

4
00:00:13,519 --> 00:00:14,639
your home

5
00:00:14,639 --> 00:00:16,880
my name is uh trevor fiesel and i will

6
00:00:16,880 --> 00:00:18,000
talk about

7
00:00:18,000 --> 00:00:20,480
mac os vulnerabilities hiding in plain

8
00:00:20,480 --> 00:00:21,680
sight

9
00:00:21,680 --> 00:00:24,560
a couple of words about myself um

10
00:00:24,560 --> 00:00:26,640
i'm currently working for offensive

11
00:00:26,640 --> 00:00:29,679
security as a content developer and i'm

12
00:00:29,679 --> 00:00:32,399
the lead content developer there for the

13
00:00:32,399 --> 00:00:33,760
for our mac os

14
00:00:33,760 --> 00:00:35,840
control bypasses training

15
00:00:35,840 --> 00:00:38,239
i used to do mac os bug hunting

16
00:00:38,239 --> 00:00:40,719
in my free time as a hobby

17
00:00:40,719 --> 00:00:42,640
uh before that i was a blue and red

18
00:00:42,640 --> 00:00:45,280
teamer for about eight years

19
00:00:45,280 --> 00:00:47,600
i'm married have two kids and i really

20
00:00:47,600 --> 00:00:48,719
like to do

21
00:00:48,719 --> 00:00:50,879
tray running hiking

22
00:00:50,879 --> 00:00:53,520
in my free time

23
00:00:53,520 --> 00:00:56,079
so what i will talk about today

24
00:00:56,079 --> 00:00:57,840
i will start with a short introduction

25
00:00:57,840 --> 00:01:01,039
about uh the whole concept uh behind

26
00:01:01,039 --> 00:01:03,760
this talk and then covering uh three

27
00:01:03,760 --> 00:01:06,080
different vulnerabilities

28
00:01:06,080 --> 00:01:08,000
uh i found the first is a privilege

29
00:01:08,000 --> 00:01:10,400
escalation on macquarie

30
00:01:10,400 --> 00:01:13,520
using the system preferences daemon

31
00:01:13,520 --> 00:01:16,720
the second one is a tcc privacy bypass

32
00:01:16,720 --> 00:01:19,759
and the last one is a sandbox escape

33
00:01:19,759 --> 00:01:22,159
and for each of the cv or for each of

34
00:01:22,159 --> 00:01:24,479
the vulnerabilities i will cover some

35
00:01:24,479 --> 00:01:26,960
technical background of the given

36
00:01:26,960 --> 00:01:29,119
process or or framework

37
00:01:29,119 --> 00:01:31,360
uh then i will talk about the original

38
00:01:31,360 --> 00:01:33,119
vulnerability and the exploit that led

39
00:01:33,119 --> 00:01:35,280
me to find the new one and then

40
00:01:35,280 --> 00:01:37,920
obviously also about the new one

41
00:01:37,920 --> 00:01:39,600
uh

42
00:01:39,600 --> 00:01:41,680
so the whole concept behind this talk is

43
00:01:41,680 --> 00:01:43,119
we often

44
00:01:43,119 --> 00:01:44,720
uh say that

45
00:01:44,720 --> 00:01:47,520
someone can see the forest for the trees

46
00:01:47,520 --> 00:01:49,680
and that's often because we are so

47
00:01:49,680 --> 00:01:53,040
focused on something uh that we don't

48
00:01:53,040 --> 00:01:56,000
notice something behind or we or we just

49
00:01:56,000 --> 00:01:57,360
missed something

50
00:01:57,360 --> 00:01:59,119
and personally i think that's that's a

51
00:01:59,119 --> 00:02:03,119
human nature so this is just how we work

52
00:02:03,119 --> 00:02:04,240
and

53
00:02:04,240 --> 00:02:05,759
also i think

54
00:02:05,759 --> 00:02:08,800
nowadays there are so many

55
00:02:08,800 --> 00:02:11,840
articles like even technical articles

56
00:02:11,840 --> 00:02:14,800
information that we want to consume

57
00:02:14,800 --> 00:02:17,200
that we simply have no time to actually

58
00:02:17,200 --> 00:02:20,160
deep dive or many times

59
00:02:20,160 --> 00:02:24,959
read in-depth uh many of those articles

60
00:02:25,200 --> 00:02:27,760
so but sometimes uh

61
00:02:27,760 --> 00:02:30,319
i happen to read some articles again and

62
00:02:30,319 --> 00:02:32,400
again uh maybe because it was so

63
00:02:32,400 --> 00:02:35,200
interesting maybe because i forgot

64
00:02:35,200 --> 00:02:37,680
what was inside or i need to look up

65
00:02:37,680 --> 00:02:39,440
some information

66
00:02:39,440 --> 00:02:42,160
uh again and again uh obviously we

67
00:02:42,160 --> 00:02:44,480
cannot remember everything

68
00:02:44,480 --> 00:02:45,440
so

69
00:02:45,440 --> 00:02:47,040
this is how it happened that there were

70
00:02:47,040 --> 00:02:48,560
a couple of vulnerabilities that i

71
00:02:48,560 --> 00:02:50,879
always return to

72
00:02:50,879 --> 00:02:52,959
and read them again again and again for

73
00:02:52,959 --> 00:02:55,920
some reason and eventually i found

74
00:02:55,920 --> 00:02:58,160
some new vulnerabilities

75
00:02:58,160 --> 00:03:00,000
and actually he'd done

76
00:03:00,000 --> 00:03:02,560
inside the article except one which is a

77
00:03:02,560 --> 00:03:05,120
little outlier but that's the the whole

78
00:03:05,120 --> 00:03:06,480
idea

79
00:03:06,480 --> 00:03:09,040
uh so let's start with the first one

80
00:03:09,040 --> 00:03:13,040
uh which is cv 2021 1815 which is a mac

81
00:03:13,040 --> 00:03:14,959
os local privilege escalation in

82
00:03:14,959 --> 00:03:17,280
preferences

83
00:03:17,280 --> 00:03:21,200
so what is cf preps d this is i think it

84
00:03:21,200 --> 00:03:22,879
stands for the core foundation

85
00:03:22,879 --> 00:03:24,480
preferences daemon

86
00:03:24,480 --> 00:03:27,280
cf is core foundation uh that is where

87
00:03:27,280 --> 00:03:30,159
the preferences api lives

88
00:03:30,159 --> 00:03:32,879
and basically this process is

89
00:03:32,879 --> 00:03:36,080
responsible for setting uh application

90
00:03:36,080 --> 00:03:38,480
preferences on the system there are two

91
00:03:38,480 --> 00:03:41,280
of them one is running as a user and one

92
00:03:41,280 --> 00:03:42,879
is running as root

93
00:03:42,879 --> 00:03:44,840
uh for system-wide

94
00:03:44,840 --> 00:03:46,879
preferences and basically you can

95
00:03:46,879 --> 00:03:48,239
interact with this daemon through the

96
00:03:48,239 --> 00:03:50,080
preferences api

97
00:03:50,080 --> 00:03:51,120
uh

98
00:03:51,120 --> 00:03:51,920
so

99
00:03:51,920 --> 00:03:54,159
the whole settings is hidden

100
00:03:54,159 --> 00:03:56,480
but behind the scenes the preferences

101
00:03:56,480 --> 00:03:59,680
api uses direct xpc cores

102
00:03:59,680 --> 00:04:02,159
to talk with cf perhaps the xpc is an

103
00:04:02,159 --> 00:04:05,360
inter-process communication unique to

104
00:04:05,360 --> 00:04:07,040
mac os or ios

105
00:04:07,040 --> 00:04:08,640
basically all the upper operating

106
00:04:08,640 --> 00:04:11,040
systems

107
00:04:11,120 --> 00:04:13,519
so the original vulnerability

108
00:04:13,519 --> 00:04:15,120
was part of the

109
00:04:15,120 --> 00:04:18,639
pawn to own 2020

110
00:04:18,639 --> 00:04:21,040
mac os extroy chain

111
00:04:21,040 --> 00:04:22,720
where the team there

112
00:04:22,720 --> 00:04:24,880
basically exploited mac os from safari

113
00:04:24,880 --> 00:04:27,680
to canada through a six step extra chain

114
00:04:27,680 --> 00:04:30,000
i think that was a really neat

115
00:04:30,000 --> 00:04:33,680
uh chain with lots of great ideas and

116
00:04:33,680 --> 00:04:35,040
one of the step

117
00:04:35,040 --> 00:04:36,479
was to get

118
00:04:36,479 --> 00:04:40,080
root privileges privileges from admin

119
00:04:40,080 --> 00:04:42,880
and this is the original vulnerable code

120
00:04:42,880 --> 00:04:45,680
what we see uh on the screen

121
00:04:45,680 --> 00:04:48,479
uh basically what happened there um the

122
00:04:48,479 --> 00:04:51,680
preferences daemon allowed someone to

123
00:04:51,680 --> 00:04:52,479
uh

124
00:04:52,479 --> 00:04:54,639
change the ownership

125
00:04:54,639 --> 00:04:59,199
of an arbitrary directory to the user

126
00:05:00,000 --> 00:05:02,160
so what they did uh in the original

127
00:05:02,160 --> 00:05:04,960
exploit uh they it was a raised

128
00:05:04,960 --> 00:05:06,160
condition

129
00:05:06,160 --> 00:05:07,840
exploit so they raised it with a sim

130
00:05:07,840 --> 00:05:09,199
link

131
00:05:09,199 --> 00:05:10,800
and they eventually changed the

132
00:05:10,800 --> 00:05:14,080
ownership of the etc spam.the

133
00:05:14,080 --> 00:05:17,600
directory the pmd directory is the

134
00:05:17,600 --> 00:05:20,240
plugable authentication modules

135
00:05:20,240 --> 00:05:22,400
directory where all the

136
00:05:22,400 --> 00:05:25,039
pam configuration leaves

137
00:05:25,039 --> 00:05:27,919
and after the permission was changed

138
00:05:27,919 --> 00:05:30,560
they basically changed the pseudoconfig

139
00:05:30,560 --> 00:05:33,120
file so they could get

140
00:05:33,120 --> 00:05:36,400
root without the password

141
00:05:36,479 --> 00:05:39,360
and after fixed this and the team the

142
00:05:39,360 --> 00:05:42,080
0.1 team reversed the fix and it was

143
00:05:42,080 --> 00:05:46,479
presented in at blackhead i think 2019

144
00:05:46,479 --> 00:05:49,759
uh and this is the reverse fix code

145
00:05:49,759 --> 00:05:52,479
and this is good so it basically ensures

146
00:05:52,479 --> 00:05:53,600
that

147
00:05:53,600 --> 00:05:55,440
siblings are not allowed anymore or at

148
00:05:55,440 --> 00:05:57,600
least they are not followed

149
00:05:57,600 --> 00:05:59,600
thus exploitation wasn't possible

150
00:05:59,600 --> 00:06:01,360
anymore

151
00:06:01,360 --> 00:06:04,160
so it will all look nice

152
00:06:04,160 --> 00:06:05,199
and clean

153
00:06:05,199 --> 00:06:07,759
however at one point it hit me that it's

154
00:06:07,759 --> 00:06:09,360
still not right

155
00:06:09,360 --> 00:06:11,120
because

156
00:06:11,120 --> 00:06:13,440
in this code we still have

157
00:06:13,440 --> 00:06:16,319
uh the mkdirat function which is

158
00:06:16,319 --> 00:06:19,039
basically creating a directory uh on the

159
00:06:19,039 --> 00:06:23,199
system and that is run unconditionally

160
00:06:23,199 --> 00:06:26,000
uh okay so that means that we can create

161
00:06:26,000 --> 00:06:28,080
a directory somewhere

162
00:06:28,080 --> 00:06:30,880
and basically after that the

163
00:06:30,880 --> 00:06:32,400
next checks will be

164
00:06:32,400 --> 00:06:33,759
passed again

165
00:06:33,759 --> 00:06:35,680
for any regular call

166
00:06:35,680 --> 00:06:37,280
and then the ownership of the newly

167
00:06:37,280 --> 00:06:38,880
created directory

168
00:06:38,880 --> 00:06:40,720
will be set to the user

169
00:06:40,720 --> 00:06:42,240
so what that mean

170
00:06:42,240 --> 00:06:44,960
is we could create a new directory

171
00:06:44,960 --> 00:06:47,199
somewhere on the system

172
00:06:47,199 --> 00:06:48,560
um

173
00:06:48,560 --> 00:06:51,280
with root privileges so it can be set

174
00:06:51,280 --> 00:06:54,880
anywhere and then change to the user

175
00:06:54,880 --> 00:06:56,080
so

176
00:06:56,080 --> 00:06:58,400
this is a privilege escalation scenario

177
00:06:58,400 --> 00:07:01,280
but it wasn't of use to actually exploit

178
00:07:01,280 --> 00:07:02,639
it

179
00:07:02,639 --> 00:07:04,639
because we can only create a directory

180
00:07:04,639 --> 00:07:05,759
somewhere

181
00:07:05,759 --> 00:07:09,759
so how we can turn it to code execution

182
00:07:09,759 --> 00:07:12,639
on mac os we have periodic scripts which

183
00:07:12,639 --> 00:07:13,599
are

184
00:07:13,599 --> 00:07:15,599
originated from bsd these are

185
00:07:15,599 --> 00:07:17,919
maintenance scripts run on a daily

186
00:07:17,919 --> 00:07:20,479
weekly monthly basis they clean like the

187
00:07:20,479 --> 00:07:23,199
temp folder or other files and

188
00:07:23,199 --> 00:07:25,520
do some maintenance stuff

189
00:07:25,520 --> 00:07:27,039
and

190
00:07:27,039 --> 00:07:29,919
these scripts has a configuration file

191
00:07:29,919 --> 00:07:32,080
and this configuration file

192
00:07:32,080 --> 00:07:32,960
store

193
00:07:32,960 --> 00:07:38,000
defines a local periodic script location

194
00:07:38,000 --> 00:07:40,240
where the user can drop their own

195
00:07:40,240 --> 00:07:41,440
scripts

196
00:07:41,440 --> 00:07:43,520
that he would like to run

197
00:07:43,520 --> 00:07:46,319
now this location this usr local slash

198
00:07:46,319 --> 00:07:49,599
edc slash periodic doesn't exist by

199
00:07:49,599 --> 00:07:52,479
default so what we can do is use this

200
00:07:52,479 --> 00:07:53,840
vulnerability

201
00:07:53,840 --> 00:07:55,680
create this directory

202
00:07:55,680 --> 00:07:58,160
as the user again and drop our script

203
00:07:58,160 --> 00:07:58,960
there

204
00:07:58,960 --> 00:08:00,960
and since these periodic scripts are

205
00:08:00,960 --> 00:08:02,879
executed as root

206
00:08:02,879 --> 00:08:04,240
and what we drop there it will be

207
00:08:04,240 --> 00:08:07,280
executed as root

208
00:08:07,759 --> 00:08:09,840
the only problem with this method that

209
00:08:09,840 --> 00:08:11,919
it's a bit slow because those scripts

210
00:08:11,919 --> 00:08:13,520
are invoked

211
00:08:13,520 --> 00:08:15,599
daily only so that's the shortest time

212
00:08:15,599 --> 00:08:17,919
frame we can go it can take up to a day

213
00:08:17,919 --> 00:08:19,360
to get root

214
00:08:19,360 --> 00:08:21,440
but if you are on a slow engagement

215
00:08:21,440 --> 00:08:23,759
that's probably not a big issue

216
00:08:23,759 --> 00:08:26,160
also this will not work beyond the bixer

217
00:08:26,160 --> 00:08:28,080
11.5

218
00:08:28,080 --> 00:08:30,479
because epper made another patch that

219
00:08:30,479 --> 00:08:31,680
time

220
00:08:31,680 --> 00:08:32,479
uh

221
00:08:32,479 --> 00:08:35,360
now the periodic scripts if the periodic

222
00:08:35,360 --> 00:08:37,839
script is owned by the user

223
00:08:37,839 --> 00:08:40,159
it will not be executed as root but as

224
00:08:40,159 --> 00:08:41,200
the user

225
00:08:41,200 --> 00:08:42,880
so this

226
00:08:42,880 --> 00:08:45,360
exploitation method no longer works on

227
00:08:45,360 --> 00:08:47,839
like monterey

228
00:08:47,839 --> 00:08:49,600
so here is a show

229
00:08:49,600 --> 00:08:51,360
video of this

230
00:08:51,360 --> 00:08:53,600
so we can see that the

231
00:08:53,600 --> 00:08:57,519
usr local directory is empty

232
00:08:57,760 --> 00:09:00,959
we run our exploit

233
00:09:03,040 --> 00:09:04,959
and now we can see that the

234
00:09:04,959 --> 00:09:08,560
directory is created and we will have

235
00:09:08,560 --> 00:09:11,359
our script there

236
00:09:17,040 --> 00:09:19,040
and now i basically simulate the

237
00:09:19,040 --> 00:09:20,880
execution of the

238
00:09:20,880 --> 00:09:23,200
daily periodic scripts

239
00:09:23,200 --> 00:09:25,279
and basically we will see terminal

240
00:09:25,279 --> 00:09:26,959
popping up as

241
00:09:26,959 --> 00:09:28,000
root

242
00:09:28,000 --> 00:09:30,080
uh we could wait for the periodic

243
00:09:30,080 --> 00:09:32,080
scripts but then it would be a really

244
00:09:32,080 --> 00:09:34,240
long

245
00:09:34,839 --> 00:09:37,360
video so yeah we got

246
00:09:37,360 --> 00:09:39,760
a root

247
00:09:40,399 --> 00:09:41,760
so i

248
00:09:41,760 --> 00:09:44,160
kind of think about how we could exploit

249
00:09:44,160 --> 00:09:44,800
it

250
00:09:44,800 --> 00:09:47,519
um through another way

251
00:09:47,519 --> 00:09:48,480
and

252
00:09:48,480 --> 00:09:51,200
i came up with another again unperfect

253
00:09:51,200 --> 00:09:53,360
way uh but this could be this could be

254
00:09:53,360 --> 00:09:55,279
another method to exploit this

255
00:09:55,279 --> 00:09:56,880
vulnerability

256
00:09:56,880 --> 00:09:58,800
so on mac os there is this cease

257
00:09:58,800 --> 00:10:00,640
diagnosis utility

258
00:10:00,640 --> 00:10:01,519
which

259
00:10:01,519 --> 00:10:03,370
typically runs as root

260
00:10:03,370 --> 00:10:04,560
[Music]

261
00:10:04,560 --> 00:10:07,200
and it tries to execute many binaries

262
00:10:07,200 --> 00:10:10,000
from the usr local bin

263
00:10:10,000 --> 00:10:12,160
directory which again doesn't exist by

264
00:10:12,160 --> 00:10:14,640
default

265
00:10:15,839 --> 00:10:18,160
so some of these have been remediated

266
00:10:18,160 --> 00:10:21,680
now but still there might be some

267
00:10:21,680 --> 00:10:23,680
out there that we can invoke so

268
00:10:23,680 --> 00:10:25,680
basically what we can do in our exploit

269
00:10:25,680 --> 00:10:28,560
create this usr local bin directory

270
00:10:28,560 --> 00:10:29,760
drop

271
00:10:29,760 --> 00:10:32,480
one of the binaries there and hopefully

272
00:10:32,480 --> 00:10:34,560
it will it will be invoked

273
00:10:34,560 --> 00:10:36,880
uh although this diagnosis contains all

274
00:10:36,880 --> 00:10:39,600
these references it doesn't

275
00:10:39,600 --> 00:10:42,320
always call each of these

276
00:10:42,320 --> 00:10:44,160
but again it's not perfect

277
00:10:44,160 --> 00:10:46,959
because it depends on the user

278
00:10:46,959 --> 00:10:49,440
triggering the sysdiagnos utility so it

279
00:10:49,440 --> 00:10:51,600
can be either

280
00:10:51,600 --> 00:10:53,680
done manually so the user is typing in

281
00:10:53,680 --> 00:10:56,240
this diagnose and enters his password to

282
00:10:56,240 --> 00:10:58,720
run as root uh the other way is to

283
00:10:58,720 --> 00:11:01,360
launch feedback assistant and create a

284
00:11:01,360 --> 00:11:04,000
new case

285
00:11:04,079 --> 00:11:05,040
and then

286
00:11:05,040 --> 00:11:06,959
feedback assistance will automatically

287
00:11:06,959 --> 00:11:08,720
invoke this diagnose

288
00:11:08,720 --> 00:11:11,360
to attach the result to the new

289
00:11:11,360 --> 00:11:12,880
feedback ticket

290
00:11:12,880 --> 00:11:14,560
now i actually looked into this how

291
00:11:14,560 --> 00:11:16,880
feedback assistance which runs as the

292
00:11:16,880 --> 00:11:19,440
user can invoke this diagnosis which

293
00:11:19,440 --> 00:11:20,800
runs as root

294
00:11:20,800 --> 00:11:22,240
and it turned out that feedback

295
00:11:22,240 --> 00:11:25,519
assistant had some private entitlement

296
00:11:25,519 --> 00:11:27,680
that allowed it to basically invoke this

297
00:11:27,680 --> 00:11:28,880
diagnosis

298
00:11:28,880 --> 00:11:32,560
and run it as roots so unfortunately

299
00:11:32,560 --> 00:11:35,760
we cannot achieve the same

300
00:11:35,760 --> 00:11:38,480
if we are not feedback assistant

301
00:11:38,480 --> 00:11:40,959
the third way to invoke this diagnosis

302
00:11:40,959 --> 00:11:43,360
is to use this keyboard shortcut

303
00:11:43,360 --> 00:11:45,839
which is command option shift control

304
00:11:45,839 --> 00:11:47,600
period at one time

305
00:11:47,600 --> 00:11:50,240
and then this diagnosis will start

306
00:11:50,240 --> 00:11:52,000
but again if we are

307
00:11:52,000 --> 00:11:54,839
a more aware or pentester we cannot

308
00:11:54,839 --> 00:11:57,279
simulate uh keyboard

309
00:11:57,279 --> 00:11:58,480
uh

310
00:11:58,480 --> 00:12:00,399
shortcuts or

311
00:12:00,399 --> 00:12:02,160
or keyboard

312
00:12:02,160 --> 00:12:04,480
entries

313
00:12:04,480 --> 00:12:07,040
so that was the first one the next one

314
00:12:07,040 --> 00:12:10,720
is a tcc bypass

315
00:12:10,720 --> 00:12:11,839
this was

316
00:12:11,839 --> 00:12:15,279
a shared finding with voice regular

317
00:12:15,279 --> 00:12:18,720
with a guy from poland i often work with

318
00:12:18,720 --> 00:12:22,000
so what is tcc tcc is

319
00:12:22,000 --> 00:12:24,399
the security feature on mac os which is

320
00:12:24,399 --> 00:12:26,720
responsible for

321
00:12:26,720 --> 00:12:29,600
um protecting all of the privacy related

322
00:12:29,600 --> 00:12:32,320
resources uh on the computer

323
00:12:32,320 --> 00:12:35,440
so like microphone camera your photos

324
00:12:35,440 --> 00:12:39,440
your contacts your documents

325
00:12:39,440 --> 00:12:41,279
the list is quite long it's basically

326
00:12:41,279 --> 00:12:44,079
whatever apple considered private

327
00:12:44,079 --> 00:12:46,639
uh it will be protected

328
00:12:46,639 --> 00:12:49,519
uh it mainly works by two sqlite

329
00:12:49,519 --> 00:12:52,560
databases one is located in the system

330
00:12:52,560 --> 00:12:55,279
library application support com app.ecc

331
00:12:55,279 --> 00:12:58,160
slash dccdb

332
00:12:58,160 --> 00:13:00,560
and the other one

333
00:13:00,560 --> 00:13:02,480
it's the same location but in the in the

334
00:13:02,480 --> 00:13:04,240
user home folder

335
00:13:04,240 --> 00:13:06,480
so some of the settings like microphone

336
00:13:06,480 --> 00:13:08,639
and camera is set on the user home

337
00:13:08,639 --> 00:13:09,600
folder

338
00:13:09,600 --> 00:13:11,839
some of the settings

339
00:13:11,839 --> 00:13:13,600
like full disk access is controlled

340
00:13:13,600 --> 00:13:16,800
through the system-wide uh database

341
00:13:16,800 --> 00:13:18,800
so that's just a really short intro to

342
00:13:18,800 --> 00:13:20,399
tcc if you

343
00:13:20,399 --> 00:13:22,639
want to know more about it i defer to

344
00:13:22,639 --> 00:13:24,800
our talk with voice

345
00:13:24,800 --> 00:13:26,639
from last year blackhead

346
00:13:26,639 --> 00:13:29,120
about the 20 plus ways to bypass your

347
00:13:29,120 --> 00:13:32,079
macos privacy mechanism

348
00:13:32,079 --> 00:13:34,399
so what happened here uh

349
00:13:34,399 --> 00:13:38,639
last year uh the xc set

350
00:13:38,639 --> 00:13:40,720
as set marvel

351
00:13:40,720 --> 00:13:43,519
uh used the tcco day

352
00:13:43,519 --> 00:13:45,760
which is i think highly unusual for a

353
00:13:45,760 --> 00:13:49,040
macos malware to to use any audi

354
00:13:49,040 --> 00:13:50,880
but they did one

355
00:13:50,880 --> 00:13:53,519
and basically what happened there

356
00:13:53,519 --> 00:13:55,200
is that the mother enumerated the

357
00:13:55,200 --> 00:13:57,199
applications on the system and let's say

358
00:13:57,199 --> 00:13:59,680
they found zoom now zoom is a video

359
00:13:59,680 --> 00:14:02,480
conferencing application and it very

360
00:14:02,480 --> 00:14:05,519
likely has microphone and camera access

361
00:14:05,519 --> 00:14:07,440
granted by the user otherwise it

362
00:14:07,440 --> 00:14:09,839
couldn't work and then there is no point

363
00:14:09,839 --> 00:14:12,800
to have zoom on your system so it likely

364
00:14:12,800 --> 00:14:14,480
has those permissions

365
00:14:14,480 --> 00:14:16,800
and then the marvel created a new

366
00:14:16,800 --> 00:14:18,560
application bundle

367
00:14:18,560 --> 00:14:21,440
uh which was an apple script based

368
00:14:21,440 --> 00:14:22,880
application

369
00:14:22,880 --> 00:14:23,760
and

370
00:14:23,760 --> 00:14:27,040
copied that application inside the zoom

371
00:14:27,040 --> 00:14:28,720
application bundle

372
00:14:28,720 --> 00:14:31,440
mac os folder in the mac os folder

373
00:14:31,440 --> 00:14:33,279
usually you have the main

374
00:14:33,279 --> 00:14:36,399
executable of the application

375
00:14:36,399 --> 00:14:38,639
so they simply copied the new

376
00:14:38,639 --> 00:14:41,120
application bundle into this location

377
00:14:41,120 --> 00:14:42,880
and started it

378
00:14:42,880 --> 00:14:46,240
and what happened that time mac os was

379
00:14:46,240 --> 00:14:48,480
confused and they told that it's

380
00:14:48,480 --> 00:14:50,639
actually zoom that is running

381
00:14:50,639 --> 00:14:51,680
and not

382
00:14:51,680 --> 00:14:53,519
this everything

383
00:14:53,519 --> 00:14:54,959
application

384
00:14:54,959 --> 00:14:58,959
and it basically inherited zoom's

385
00:14:58,959 --> 00:15:01,600
privacy permissions so it could access

386
00:15:01,600 --> 00:15:03,279
camera and

387
00:15:03,279 --> 00:15:04,959
microphone

388
00:15:04,959 --> 00:15:06,880
so basically macos wrongly identified

389
00:15:06,880 --> 00:15:08,560
the bundle

390
00:15:08,560 --> 00:15:11,440
which would be already a hint here

391
00:15:11,440 --> 00:15:12,959
but this was fixed

392
00:15:12,959 --> 00:15:14,079
and then

393
00:15:14,079 --> 00:15:16,959
later on uh again last year

394
00:15:16,959 --> 00:15:20,560
mick gene from trend micro

395
00:15:20,560 --> 00:15:22,880
played more with this vulnerability

396
00:15:22,880 --> 00:15:25,360
and found the bypass

397
00:15:25,360 --> 00:15:28,800
the tcc database contains the bundle id

398
00:15:28,800 --> 00:15:31,680
and basically just by creating

399
00:15:31,680 --> 00:15:34,399
a new application with the same bundle

400
00:15:34,399 --> 00:15:37,920
id as our target so let's keep zoom

401
00:15:37,920 --> 00:15:39,760
as our target

402
00:15:39,760 --> 00:15:41,920
so he created a fake application put the

403
00:15:41,920 --> 00:15:44,480
same bundle id as zoom

404
00:15:44,480 --> 00:15:46,639
and when he executed the fake

405
00:15:46,639 --> 00:15:49,279
application

406
00:15:49,360 --> 00:15:51,519
the system was confused again

407
00:15:51,519 --> 00:15:54,079
to think that it's zoom that is running

408
00:15:54,079 --> 00:15:57,440
and it inherited zoom privacy permission

409
00:15:57,440 --> 00:15:58,639
and again

410
00:15:58,639 --> 00:16:01,040
the issue was that um

411
00:16:01,040 --> 00:16:02,880
all the code signing verification and

412
00:16:02,880 --> 00:16:03,920
everything

413
00:16:03,920 --> 00:16:06,839
was done on the main zoom us

414
00:16:06,839 --> 00:16:09,040
uh that app

415
00:16:09,040 --> 00:16:11,360
application and not on the fake

416
00:16:11,360 --> 00:16:13,279
application

417
00:16:13,279 --> 00:16:15,920
uh which is a problem and this was the

418
00:16:15,920 --> 00:16:18,560
point where it hit me that

419
00:16:18,560 --> 00:16:20,639
there is a fundamental issue here with

420
00:16:20,639 --> 00:16:22,240
tcc

421
00:16:22,240 --> 00:16:24,560
which enabled both

422
00:16:24,560 --> 00:16:26,880
vulnerabilities

423
00:16:26,880 --> 00:16:28,560
and it's

424
00:16:28,560 --> 00:16:29,680
the fact

425
00:16:29,680 --> 00:16:32,079
that

426
00:16:32,079 --> 00:16:34,639
macos didn't verify

427
00:16:34,639 --> 00:16:36,560
the code signing properties of the

428
00:16:36,560 --> 00:16:38,320
running process

429
00:16:38,320 --> 00:16:41,920
but it verified something on the disk

430
00:16:41,920 --> 00:16:44,560
now the tcc database does contain the

431
00:16:44,560 --> 00:16:47,759
code signing requirements

432
00:16:47,759 --> 00:16:49,519
for the application

433
00:16:49,519 --> 00:16:51,440
so it's it properly intensifies the

434
00:16:51,440 --> 00:16:54,639
application now obviously when we start

435
00:16:54,639 --> 00:16:57,040
our fake application it will not have

436
00:16:57,040 --> 00:17:00,000
the same signature as zoom

437
00:17:00,000 --> 00:17:01,199
in this case

438
00:17:01,199 --> 00:17:03,759
so if they were verifying the process it

439
00:17:03,759 --> 00:17:06,160
could have been identified that hey it's

440
00:17:06,160 --> 00:17:08,480
not zoom but it's running but something

441
00:17:08,480 --> 00:17:10,000
else

442
00:17:10,000 --> 00:17:11,359
and

443
00:17:11,359 --> 00:17:15,119
this was really shocking a bit um

444
00:17:15,119 --> 00:17:18,400
because on mac os you never verify

445
00:17:18,400 --> 00:17:20,880
code signature on disk if you have a

446
00:17:20,880 --> 00:17:22,319
process running

447
00:17:22,319 --> 00:17:24,640
because what you can do on mac os once

448
00:17:24,640 --> 00:17:26,880
the process is started and running you

449
00:17:26,880 --> 00:17:28,720
can basically delete that application or

450
00:17:28,720 --> 00:17:31,039
delete that binary and it will keep

451
00:17:31,039 --> 00:17:32,559
running

452
00:17:32,559 --> 00:17:34,160
until it's shut down

453
00:17:34,160 --> 00:17:36,480
unlike on windows where you cannot

454
00:17:36,480 --> 00:17:39,120
modify or delete the binary

455
00:17:39,120 --> 00:17:41,679
of the application

456
00:17:41,679 --> 00:17:43,600
so

457
00:17:43,600 --> 00:17:46,480
usually every time on mac os

458
00:17:46,480 --> 00:17:48,559
because of this

459
00:17:48,559 --> 00:17:50,640
the code signature is verified in memory

460
00:17:50,640 --> 00:17:52,480
well except gatekeeper when the process

461
00:17:52,480 --> 00:17:54,240
is not even running of course then we

462
00:17:54,240 --> 00:17:56,559
have no choice

463
00:17:56,559 --> 00:17:58,799
also the same issue with

464
00:17:58,799 --> 00:18:02,160
xpc and mac message or mac connection

465
00:18:02,160 --> 00:18:05,039
verification when we try to verify the

466
00:18:05,039 --> 00:18:07,039
connecting client

467
00:18:07,039 --> 00:18:09,360
we should always use

468
00:18:09,360 --> 00:18:10,480
the

469
00:18:10,480 --> 00:18:13,440
verify the connecting process

470
00:18:13,440 --> 00:18:15,679
signature based on its audit token so

471
00:18:15,679 --> 00:18:18,000
even like the process id is not

472
00:18:18,000 --> 00:18:20,799
not considered secure uh or mac os for

473
00:18:20,799 --> 00:18:23,919
this and like on disk on on xpc or mac

474
00:18:23,919 --> 00:18:26,480
verification it doesn't really come up

475
00:18:26,480 --> 00:18:27,600
uh

476
00:18:27,600 --> 00:18:29,200
at all

477
00:18:29,200 --> 00:18:32,160
as a verification step although i saw

478
00:18:32,160 --> 00:18:33,360
vendors

479
00:18:33,360 --> 00:18:36,480
being very creative and doing this

480
00:18:36,480 --> 00:18:38,880
like adobe

481
00:18:38,880 --> 00:18:40,960
it's fixed now but

482
00:18:40,960 --> 00:18:44,160
yeah so you should use audi token

483
00:18:44,160 --> 00:18:46,160
and based on the auditor can verify the

484
00:18:46,160 --> 00:18:47,120
process

485
00:18:47,120 --> 00:18:48,720
also mp

486
00:18:48,720 --> 00:18:51,280
checks in memory integrity checks again

487
00:18:51,280 --> 00:18:53,919
in memory and not not on the disk

488
00:18:53,919 --> 00:18:55,360
so

489
00:18:55,360 --> 00:18:57,600
what we could do is really simply make a

490
00:18:57,600 --> 00:18:59,840
fake application with the same bundle id

491
00:18:59,840 --> 00:19:02,720
as our target so let's stay with zoom i

492
00:19:02,720 --> 00:19:04,559
have no issues with zoom it's a great

493
00:19:04,559 --> 00:19:07,840
app we just use it as an example

494
00:19:07,840 --> 00:19:09,840
we start our application

495
00:19:09,840 --> 00:19:10,640
then

496
00:19:10,640 --> 00:19:13,679
we take zoom and copy over our fake

497
00:19:13,679 --> 00:19:15,200
application

498
00:19:15,200 --> 00:19:18,160
then we initiate some actions that

499
00:19:18,160 --> 00:19:19,280
require

500
00:19:19,280 --> 00:19:21,360
privacy permissions like recording

501
00:19:21,360 --> 00:19:24,240
camera microphone or accessing various

502
00:19:24,240 --> 00:19:25,600
locations

503
00:19:25,600 --> 00:19:27,919
and and it will be permitted and we

504
00:19:27,919 --> 00:19:30,480
bypass dcc because

505
00:19:30,480 --> 00:19:33,600
the bundle on the disk is verified

506
00:19:33,600 --> 00:19:34,400
uh

507
00:19:34,400 --> 00:19:36,320
or voice check made an alteration to

508
00:19:36,320 --> 00:19:39,679
this so we make a fake app and

509
00:19:39,679 --> 00:19:42,240
uh embed it in our donor app with the

510
00:19:42,240 --> 00:19:44,880
same team id start the app again copy

511
00:19:44,880 --> 00:19:46,240
over the

512
00:19:46,240 --> 00:19:48,640
donor app over the uh the fake

513
00:19:48,640 --> 00:19:50,720
application

514
00:19:50,720 --> 00:19:52,640
and initiate the action and again we

515
00:19:52,640 --> 00:19:55,840
bypass dcc so here's a

516
00:19:55,840 --> 00:19:58,480
demo of this so we can see that we have

517
00:19:58,480 --> 00:19:59,520
zoom

518
00:19:59,520 --> 00:20:02,240
on the system

519
00:20:02,240 --> 00:20:04,240
zoom has

520
00:20:04,240 --> 00:20:06,160
audio input which is microphone and

521
00:20:06,160 --> 00:20:08,559
comma access i'm

522
00:20:08,559 --> 00:20:10,880
opening system preferences and showing

523
00:20:10,880 --> 00:20:13,039
that

524
00:20:14,000 --> 00:20:15,440
indeed zoom

525
00:20:15,440 --> 00:20:18,000
is granted these permissions by the user

526
00:20:18,000 --> 00:20:22,000
and nothing else basically

527
00:20:22,000 --> 00:20:23,760
and then i have

528
00:20:23,760 --> 00:20:26,480
the other fake zoom application

529
00:20:26,480 --> 00:20:30,159
which has no writes at all

530
00:20:30,799 --> 00:20:33,200
now i start the fake

531
00:20:33,200 --> 00:20:36,159
zoom application

532
00:20:36,159 --> 00:20:38,559
and we can see that the size of the

533
00:20:38,559 --> 00:20:40,640
application is growing and this is

534
00:20:40,640 --> 00:20:43,039
because at this stage i'm copying over

535
00:20:43,039 --> 00:20:45,360
the original zoom application

536
00:20:45,360 --> 00:20:47,120
over the fake one

537
00:20:47,120 --> 00:20:49,440
and then we can see a

538
00:20:49,440 --> 00:20:50,480
new

539
00:20:50,480 --> 00:20:54,159
move mod file uh is showing up

540
00:20:54,159 --> 00:20:57,280
this is like a 10 second recording with

541
00:20:57,280 --> 00:20:58,880
my camera

542
00:20:58,880 --> 00:21:03,840
and it's done and yeah i recorded myself

543
00:21:04,159 --> 00:21:05,200
so

544
00:21:05,200 --> 00:21:06,880
this has been fixed

545
00:21:06,880 --> 00:21:11,200
now luckily so based on the

546
00:21:11,360 --> 00:21:13,120
tcc daemon

547
00:21:13,120 --> 00:21:15,520
locks we can actually confirm that

548
00:21:15,520 --> 00:21:17,120
finally

549
00:21:17,120 --> 00:21:18,480
macos

550
00:21:18,480 --> 00:21:20,720
the tcc process on mac os uses the

551
00:21:20,720 --> 00:21:23,280
dynamic code signature of the process to

552
00:21:23,280 --> 00:21:24,960
verify

553
00:21:24,960 --> 00:21:26,320
uh

554
00:21:26,320 --> 00:21:30,960
code signature so if it's done

555
00:21:30,960 --> 00:21:32,799
and the last one

556
00:21:32,799 --> 00:21:35,039
is a sandbox escape using the disk

557
00:21:35,039 --> 00:21:38,559
arbitration service uh it's been fixed

558
00:21:38,559 --> 00:21:40,720
so no all days

559
00:21:40,720 --> 00:21:43,760
but there was no cv assigned yet

560
00:21:43,760 --> 00:21:45,120
so that's why

561
00:21:45,120 --> 00:21:47,520
all the x is

562
00:21:47,520 --> 00:21:49,840
so what is this arbitration uh it's

563
00:21:49,840 --> 00:21:51,760
basically a service

564
00:21:51,760 --> 00:21:56,400
for managing disk mounting and mounting

565
00:21:56,400 --> 00:21:59,440
it can also notify us if

566
00:21:59,440 --> 00:22:00,400
um

567
00:22:00,400 --> 00:22:02,720
there is new mounting happening and we

568
00:22:02,720 --> 00:22:05,440
can even set uh handlers

569
00:22:05,440 --> 00:22:07,760
on our own programs that we maybe permit

570
00:22:07,760 --> 00:22:10,960
or deny uh specific mount

571
00:22:10,960 --> 00:22:12,880
operations so that's

572
00:22:12,880 --> 00:22:15,679
that's what it does

573
00:22:16,400 --> 00:22:19,120
it has an xpc service

574
00:22:19,120 --> 00:22:20,960
and but under the hood

575
00:22:20,960 --> 00:22:24,799
it will call the the mount and unmount

576
00:22:24,799 --> 00:22:28,080
regular system calls

577
00:22:28,320 --> 00:22:32,480
so why this arbitration is uh the demon

578
00:22:32,480 --> 00:22:35,200
why we like it why is it good for us as

579
00:22:35,200 --> 00:22:37,280
pen testers or

580
00:22:37,280 --> 00:22:39,760
security researcher bug hunters so first

581
00:22:39,760 --> 00:22:41,360
it runs as root

582
00:22:41,360 --> 00:22:44,559
which is nice it's runs on sandbox which

583
00:22:44,559 --> 00:22:46,000
is also nice

584
00:22:46,000 --> 00:22:48,240
it has an xbc service which is

585
00:22:48,240 --> 00:22:52,480
accessible from the application sandbox

586
00:22:52,480 --> 00:22:54,400
this is part of the

587
00:22:54,400 --> 00:22:56,640
application sandbox profile and we can

588
00:22:56,640 --> 00:22:58,640
see that the disk arbitration

589
00:22:58,640 --> 00:23:01,919
service is permitted at the bottom

590
00:23:01,919 --> 00:23:03,919
so basically

591
00:23:03,919 --> 00:23:06,880
any regular sandbox application can

592
00:23:06,880 --> 00:23:08,480
access this service

593
00:23:08,480 --> 00:23:10,880
and it's also open source so it's like

594
00:23:10,880 --> 00:23:11,919
the dream

595
00:23:11,919 --> 00:23:13,440
combination

596
00:23:13,440 --> 00:23:15,919
uh at this stage

597
00:23:15,919 --> 00:23:16,880
uh

598
00:23:16,880 --> 00:23:19,360
so again first the original exploit from

599
00:23:19,360 --> 00:23:22,080
2017

600
00:23:22,080 --> 00:23:24,480
uh it was also

601
00:23:24,480 --> 00:23:27,120
done in one of the pawn to one contest

602
00:23:27,120 --> 00:23:29,360
uh by the fern hex team it was again

603
00:23:29,360 --> 00:23:31,440
part of an exploit chain

604
00:23:31,440 --> 00:23:35,200
and this was also a privilege escalation

605
00:23:35,200 --> 00:23:37,760
so what this arbitration does

606
00:23:37,760 --> 00:23:41,120
to prevent abuse uh because it transits

607
00:23:41,120 --> 00:23:43,440
route if someone calls this service it

608
00:23:43,440 --> 00:23:45,919
will check if the calling process

609
00:23:45,919 --> 00:23:48,960
has permissions to mount over a specific

610
00:23:48,960 --> 00:23:51,760
directory or not

611
00:23:51,760 --> 00:23:54,320
obviously if this check wasn't there

612
00:23:54,320 --> 00:23:56,080
then someone could mount

613
00:23:56,080 --> 00:23:58,640
anywhere and escalate privileges

614
00:23:58,640 --> 00:24:00,159
trivially

615
00:24:00,159 --> 00:24:01,520
so what it did

616
00:24:01,520 --> 00:24:03,360
it

617
00:24:03,360 --> 00:24:06,000
took the pass given to the mount

618
00:24:06,000 --> 00:24:08,400
location resolved it

619
00:24:08,400 --> 00:24:09,919
checked

620
00:24:09,919 --> 00:24:11,919
that can the calling process mount there

621
00:24:11,919 --> 00:24:13,120
or not

622
00:24:13,120 --> 00:24:16,240
and if yes then it kind of proceeded did

623
00:24:16,240 --> 00:24:18,799
something and then it resolved the pass

624
00:24:18,799 --> 00:24:21,200
again

625
00:24:21,200 --> 00:24:23,600
which was a problem because there

626
00:24:23,600 --> 00:24:25,600
there was a time of check time of use

627
00:24:25,600 --> 00:24:27,039
bug

628
00:24:27,039 --> 00:24:28,480
because of these

629
00:24:28,480 --> 00:24:30,080
two resolutions

630
00:24:30,080 --> 00:24:33,200
and basically once the check is done

631
00:24:33,200 --> 00:24:35,840
we can do something with that pass

632
00:24:35,840 --> 00:24:37,520
using symlinks

633
00:24:37,520 --> 00:24:39,440
and point it to somewhere else and

634
00:24:39,440 --> 00:24:42,400
basically mount

635
00:24:42,400 --> 00:24:45,360
somewhere else on the system

636
00:24:45,360 --> 00:24:47,120
not on the location where the check was

637
00:24:47,120 --> 00:24:48,000
done

638
00:24:48,000 --> 00:24:50,080
so this can be this

639
00:24:50,080 --> 00:24:51,279
could be accelerated with a race

640
00:24:51,279 --> 00:24:53,360
condition a little

641
00:24:53,360 --> 00:24:55,679
like a race

642
00:24:55,679 --> 00:24:58,240
and what the

643
00:24:58,240 --> 00:25:02,480
uh team did at 2017 they mounted the efi

644
00:25:02,480 --> 00:25:05,440
partition which is admin writable

645
00:25:05,440 --> 00:25:07,039
and they

646
00:25:07,039 --> 00:25:08,960
mounted it over the chrome tabs

647
00:25:08,960 --> 00:25:12,240
directory and created a new

648
00:25:12,240 --> 00:25:14,880
cron job there and escalated admin to

649
00:25:14,880 --> 00:25:16,240
root

650
00:25:16,240 --> 00:25:18,880
uh on mac os

651
00:25:18,880 --> 00:25:21,039
now the new one

652
00:25:21,039 --> 00:25:22,640
so this is a bit

653
00:25:22,640 --> 00:25:24,880
outlier from the previous two this

654
00:25:24,880 --> 00:25:26,799
doesn't come directly from the article

655
00:25:26,799 --> 00:25:27,679
but

656
00:25:27,679 --> 00:25:30,240
when i opened the source code of disk

657
00:25:30,240 --> 00:25:32,559
arbitration the new one

658
00:25:32,559 --> 00:25:34,799
i realized that the same

659
00:25:34,799 --> 00:25:38,159
verification step there is a new one

660
00:25:38,159 --> 00:25:40,559
for sandbox checking because sandbox is

661
00:25:40,559 --> 00:25:42,720
rich this conversation is reachable from

662
00:25:42,720 --> 00:25:44,720
the sandbox

663
00:25:44,720 --> 00:25:47,279
this arbitration has to also ensure

664
00:25:47,279 --> 00:25:50,799
that the sandbox application

665
00:25:50,799 --> 00:25:52,799
has rights to mount

666
00:25:52,799 --> 00:25:55,039
on the target location

667
00:25:55,039 --> 00:25:57,520
so it runs a sandbox check by audit

668
00:25:57,520 --> 00:25:58,720
token

669
00:25:58,720 --> 00:26:01,200
which is a system called to the sandbox

670
00:26:01,200 --> 00:26:02,880
driver

671
00:26:02,880 --> 00:26:05,039
and it will check if

672
00:26:05,039 --> 00:26:07,120
mounting is permitted for that process

673
00:26:07,120 --> 00:26:08,720
or not

674
00:26:08,720 --> 00:26:09,679
now

675
00:26:09,679 --> 00:26:11,039
let's see

676
00:26:11,039 --> 00:26:13,120
how the check was done

677
00:26:13,120 --> 00:26:14,240
uh

678
00:26:14,240 --> 00:26:16,400
on the old vulnerability for the mount

679
00:26:16,400 --> 00:26:17,840
point location

680
00:26:17,840 --> 00:26:20,559
and the new vulnerability for the

681
00:26:20,559 --> 00:26:24,480
sandbox so we had the past received the

682
00:26:24,480 --> 00:26:25,600
same way

683
00:26:25,600 --> 00:26:28,080
then we have the same if statement

684
00:26:28,080 --> 00:26:31,600
and then the same pass

685
00:26:31,600 --> 00:26:35,039
variable is used on the old version is

686
00:26:35,039 --> 00:26:37,760
it was used for the

687
00:26:37,760 --> 00:26:40,320
user id permission check and now the

688
00:26:40,320 --> 00:26:42,240
same way it's being used for the sandbox

689
00:26:42,240 --> 00:26:43,200
check

690
00:26:43,200 --> 00:26:45,039
so

691
00:26:45,039 --> 00:26:46,880
it looked like

692
00:26:46,880 --> 00:26:49,360
the same logic issue is there but now

693
00:26:49,360 --> 00:26:50,559
not

694
00:26:50,559 --> 00:26:52,240
for previous escalation but for a

695
00:26:52,240 --> 00:26:55,279
sandbox potential sandbox escape

696
00:26:55,279 --> 00:26:56,799
so what i did

697
00:26:56,799 --> 00:26:59,220
as it's again it's a race condition and

698
00:26:59,220 --> 00:27:00,880
[Music]

699
00:27:00,880 --> 00:27:03,679
if i were directly going to

700
00:27:03,679 --> 00:27:06,400
exploit it and it's not successful i

701
00:27:06,400 --> 00:27:08,480
wouldn't know if it's because my exploit

702
00:27:08,480 --> 00:27:10,960
is wrong for any reason or it's simply

703
00:27:10,960 --> 00:27:12,559
not exploitable

704
00:27:12,559 --> 00:27:14,720
so i created a sandbox profile which

705
00:27:14,720 --> 00:27:16,080
simply denied

706
00:27:16,080 --> 00:27:18,880
mounting over the private temp disk

707
00:27:18,880 --> 00:27:21,039
directory

708
00:27:21,039 --> 00:27:22,159
and

709
00:27:22,159 --> 00:27:24,720
launched a shell with this profile and

710
00:27:24,720 --> 00:27:26,799
then try to do two mountings one for

711
00:27:26,799 --> 00:27:28,559
disk and then disk two

712
00:27:28,559 --> 00:27:29,600
and

713
00:27:29,600 --> 00:27:32,000
the profile is working properly so like

714
00:27:32,000 --> 00:27:34,159
temp disk wasn't allowed while the other

715
00:27:34,159 --> 00:27:35,840
one was allowed

716
00:27:35,840 --> 00:27:38,720
so i launched a debugger and attached it

717
00:27:38,720 --> 00:27:41,039
to this arbitration d

718
00:27:41,039 --> 00:27:44,720
for this we need to disable zip

719
00:27:44,720 --> 00:27:46,559
on the system so we can debug this

720
00:27:46,559 --> 00:27:48,159
arbitration

721
00:27:48,159 --> 00:27:50,559
and set a breakpoint on the sandbox

722
00:27:50,559 --> 00:27:52,400
check by audit token

723
00:27:52,400 --> 00:27:53,520
and then

724
00:27:53,520 --> 00:27:55,600
i run

725
00:27:55,600 --> 00:27:57,600
the mounting again so i wanted now to

726
00:27:57,600 --> 00:27:59,360
mount over temp

727
00:27:59,360 --> 00:28:01,279
disk 2

728
00:28:01,279 --> 00:28:02,720
again

729
00:28:02,720 --> 00:28:05,120
and then we hit the breakpoint

730
00:28:05,120 --> 00:28:06,720
i set finish

731
00:28:06,720 --> 00:28:08,000
on the check

732
00:28:08,000 --> 00:28:09,760
and

733
00:28:09,760 --> 00:28:11,279
i'm not sure how well it's in but

734
00:28:11,279 --> 00:28:13,919
basically it returned 0 which means yes

735
00:28:13,919 --> 00:28:16,159
you can go ahead it's permitted of

736
00:28:16,159 --> 00:28:20,159
course because i want to mount over them

737
00:28:20,159 --> 00:28:22,399
disk 2.

738
00:28:22,399 --> 00:28:24,799
but what i did at this stage i'm still

739
00:28:24,799 --> 00:28:26,880
holding

740
00:28:26,880 --> 00:28:28,480
the service

741
00:28:28,480 --> 00:28:30,480
i remove the disk 2 folder

742
00:28:30,480 --> 00:28:33,279
and created new sim link

743
00:28:33,279 --> 00:28:36,399
as disk 2 pointing to slash temp slash

744
00:28:36,399 --> 00:28:37,919
disk

745
00:28:37,919 --> 00:28:40,080
which is the original location which

746
00:28:40,080 --> 00:28:43,200
wasn't allowed by the sandbox profile

747
00:28:43,200 --> 00:28:46,559
i continued the process and what i could

748
00:28:46,559 --> 00:28:48,799
mount over this location

749
00:28:48,799 --> 00:28:50,880
so that at least confirmed that yes the

750
00:28:50,880 --> 00:28:54,559
bug is there so i can it's exploitable

751
00:28:54,559 --> 00:28:56,000
now i need to

752
00:28:56,000 --> 00:28:58,399
really exploit it and it turned out to

753
00:28:58,399 --> 00:28:59,679
be not

754
00:28:59,679 --> 00:29:02,240
trivial

755
00:29:03,200 --> 00:29:06,000
because the first question was okay what

756
00:29:06,000 --> 00:29:07,440
do i mount

757
00:29:07,440 --> 00:29:09,840
uh efi partition is really out of

758
00:29:09,840 --> 00:29:12,880
question first because uh this

759
00:29:12,880 --> 00:29:15,600
arbitration now has a specific check for

760
00:29:15,600 --> 00:29:17,520
the efi partition

761
00:29:17,520 --> 00:29:20,240
uh that's what we see there

762
00:29:20,240 --> 00:29:23,760
so that long grid is for the

763
00:29:23,760 --> 00:29:26,960
it's for the efi partition

764
00:29:26,960 --> 00:29:28,320
and

765
00:29:28,320 --> 00:29:30,880
but even if i could mount it i mean i

766
00:29:30,880 --> 00:29:32,559
cannot reach that location from the

767
00:29:32,559 --> 00:29:34,080
sandbox

768
00:29:34,080 --> 00:29:37,200
so okay let's mount a custom dmg file a

769
00:29:37,200 --> 00:29:39,840
dmg file is a like a disk image uh or

770
00:29:39,840 --> 00:29:41,120
mac os

771
00:29:41,120 --> 00:29:43,440
okay so i can mount i plan to mount a

772
00:29:43,440 --> 00:29:45,039
disk image but

773
00:29:45,039 --> 00:29:47,120
the problem is that this arbitration

774
00:29:47,120 --> 00:29:49,600
service doesn't work with disk images it

775
00:29:49,600 --> 00:29:52,559
works with slash dev uh

776
00:29:52,559 --> 00:29:54,399
devices

777
00:29:54,399 --> 00:29:56,240
so how do i get

778
00:29:56,240 --> 00:29:59,279
a slash dev device from my dmg

779
00:29:59,279 --> 00:30:00,640
and

780
00:30:00,640 --> 00:30:01,840
that is

781
00:30:01,840 --> 00:30:02,640
what

782
00:30:02,640 --> 00:30:05,039
disk management daemon for

783
00:30:05,039 --> 00:30:07,440
this management daemon can turn a dng or

784
00:30:07,440 --> 00:30:11,760
map a dmg file into a dev device

785
00:30:11,760 --> 00:30:13,760
but this management demon is not

786
00:30:13,760 --> 00:30:16,240
reachable from the sandbox

787
00:30:16,240 --> 00:30:18,720
and

788
00:30:18,960 --> 00:30:21,120
it happened to me that okay i

789
00:30:21,120 --> 00:30:23,520
cannot reach disk management d but what

790
00:30:23,520 --> 00:30:26,399
i can do is i can call the open

791
00:30:26,399 --> 00:30:29,440
system command on the dmg file and then

792
00:30:29,440 --> 00:30:32,399
the system will automatically

793
00:30:32,399 --> 00:30:35,760
map the dmg file into a dev device and

794
00:30:35,760 --> 00:30:38,240
also mount it at the same time into the

795
00:30:38,240 --> 00:30:40,399
slash volumes

796
00:30:40,399 --> 00:30:41,760
directory

797
00:30:41,760 --> 00:30:43,840
which is nice because now i have a slash

798
00:30:43,840 --> 00:30:46,960
dev device but it's also mounted what i

799
00:30:46,960 --> 00:30:48,080
don't need

800
00:30:48,080 --> 00:30:49,840
at this point because i want this

801
00:30:49,840 --> 00:30:51,840
manager daemon

802
00:30:51,840 --> 00:30:54,720
this management demon to mount it for me

803
00:30:54,720 --> 00:30:55,840
but

804
00:30:55,840 --> 00:30:57,840
i can use the disk management daemon to

805
00:30:57,840 --> 00:30:59,200
unmount

806
00:30:59,200 --> 00:31:01,600
the slash volumes

807
00:31:01,600 --> 00:31:04,000
whatever name location and the dev

808
00:31:04,000 --> 00:31:07,679
device remains in place

809
00:31:07,679 --> 00:31:10,399
so that was nice

810
00:31:10,399 --> 00:31:12,159
because now i can

811
00:31:12,159 --> 00:31:16,000
mount something an arbitrary file

812
00:31:16,000 --> 00:31:16,720
and

813
00:31:16,720 --> 00:31:18,559
sorry create a dev device

814
00:31:18,559 --> 00:31:20,880
so the last question was okay where do i

815
00:31:20,880 --> 00:31:23,679
mount to actually achieve

816
00:31:23,679 --> 00:31:26,559
code execution outside of the sandbox

817
00:31:26,559 --> 00:31:28,960
and there might be multiple ways to do

818
00:31:28,960 --> 00:31:32,880
it my idea was to mount over the

819
00:31:32,880 --> 00:31:35,200
home library preferences

820
00:31:35,200 --> 00:31:36,880
directory

821
00:31:36,880 --> 00:31:38,960
where

822
00:31:38,960 --> 00:31:41,679
we have all the preferences file for

823
00:31:41,679 --> 00:31:43,919
all the applications that runs as the

824
00:31:43,919 --> 00:31:45,120
user

825
00:31:45,120 --> 00:31:47,360
now the terminal

826
00:31:47,360 --> 00:31:49,440
has also preferences file and it has a

827
00:31:49,440 --> 00:31:50,960
preference that

828
00:31:50,960 --> 00:31:52,960
the command string

829
00:31:52,960 --> 00:31:55,519
and we can put there any

830
00:31:55,519 --> 00:31:56,399
bash

831
00:31:56,399 --> 00:31:59,120
or share command and it will be executed

832
00:31:59,120 --> 00:32:01,840
when we launch terminal

833
00:32:01,840 --> 00:32:02,799
so

834
00:32:02,799 --> 00:32:06,559
let's put it all together

835
00:32:06,720 --> 00:32:09,919
we have we have our sandbox application

836
00:32:09,919 --> 00:32:12,480
we drop a dmg file

837
00:32:12,480 --> 00:32:15,760
we call open on the dmg file

838
00:32:15,760 --> 00:32:18,000
so it will be mounted and also the dev

839
00:32:18,000 --> 00:32:22,559
device is created then we unmount

840
00:32:23,120 --> 00:32:25,279
the the mount point but our dev device

841
00:32:25,279 --> 00:32:27,440
is still in place

842
00:32:27,440 --> 00:32:29,600
and then we will start our race so

843
00:32:29,600 --> 00:32:32,000
basically we want to mount

844
00:32:32,000 --> 00:32:33,200
uh

845
00:32:33,200 --> 00:32:35,840
over the preferences directory

846
00:32:35,840 --> 00:32:38,559
and once we want to mount over

847
00:32:38,559 --> 00:32:41,039
uh inside a container in a folder which

848
00:32:41,039 --> 00:32:43,039
is permitted and we erase it with a sim

849
00:32:43,039 --> 00:32:44,480
link

850
00:32:44,480 --> 00:32:46,080
and

851
00:32:46,080 --> 00:32:48,640
eventually it will succeed so eventually

852
00:32:48,640 --> 00:32:51,039
we will mount over the preferences

853
00:32:51,039 --> 00:32:54,960
directory and once we manage to do that

854
00:32:54,960 --> 00:32:58,399
we stop arrays and then we open terminal

855
00:32:58,399 --> 00:33:00,720
we can do that from the sec sandbox so

856
00:33:00,720 --> 00:33:03,200
from the sandbox we can call the open

857
00:33:03,200 --> 00:33:05,519
command and launch an application

858
00:33:05,519 --> 00:33:10,159
and once we started terminal um

859
00:33:10,159 --> 00:33:12,080
our code will be executed

860
00:33:12,080 --> 00:33:14,640
on sandbox because i forget to tell that

861
00:33:14,640 --> 00:33:18,399
terminal is not a sandbox application so

862
00:33:18,399 --> 00:33:20,960
that's why it was the target

863
00:33:20,960 --> 00:33:23,120
so here's a

864
00:33:23,120 --> 00:33:25,600
another recorded demo of this

865
00:33:25,600 --> 00:33:27,760
so i have

866
00:33:27,760 --> 00:33:30,240
the da escape application which is

867
00:33:30,240 --> 00:33:32,799
sandboxed it has the com apple security

868
00:33:32,799 --> 00:33:34,960
app sandbox profile

869
00:33:34,960 --> 00:33:37,600
and i list the currently mounted

870
00:33:37,600 --> 00:33:39,279
locations so we can see that the

871
00:33:39,279 --> 00:33:41,519
preference this directory is not mounted

872
00:33:41,519 --> 00:33:43,760
over

873
00:33:44,480 --> 00:33:47,679
and then i simply start the application

874
00:33:47,679 --> 00:33:50,799
and at this point it will start

875
00:33:50,799 --> 00:33:52,960
the race

876
00:33:52,960 --> 00:33:54,880
we can also see that

877
00:33:54,880 --> 00:33:57,039
some mounting happening

878
00:33:57,039 --> 00:34:01,760
it's finished we launched terminal and

879
00:34:01,840 --> 00:34:03,760
we mounted over the

880
00:34:03,760 --> 00:34:04,799
user

881
00:34:04,799 --> 00:34:07,279
username library preferences and now if

882
00:34:07,279 --> 00:34:10,079
i open the terminal profiles

883
00:34:10,079 --> 00:34:11,679
and go to the shell now we can see that

884
00:34:11,679 --> 00:34:14,159
there is a run command

885
00:34:14,159 --> 00:34:16,159
setup so basically

886
00:34:16,159 --> 00:34:19,440
we achieved a sandbox escape

887
00:34:19,440 --> 00:34:22,159
through this mode

888
00:34:23,440 --> 00:34:25,040
so conclusion

889
00:34:25,040 --> 00:34:26,000
uh

890
00:34:26,000 --> 00:34:27,440
to all of this

891
00:34:27,440 --> 00:34:28,239
um

892
00:34:28,239 --> 00:34:31,040
i think it's first to read write-ups

893
00:34:31,040 --> 00:34:32,800
carefully

894
00:34:32,800 --> 00:34:34,960
i know we have no time to do it every

895
00:34:34,960 --> 00:34:35,918
time

896
00:34:35,918 --> 00:34:38,560
uh but sometimes it's worse and and we

897
00:34:38,560 --> 00:34:42,159
can find hidden gems uh there

898
00:34:42,159 --> 00:34:43,839
and it's virtual visiting all

899
00:34:43,839 --> 00:34:46,960
documentation notes articles or code or

900
00:34:46,960 --> 00:34:48,800
or whatever

901
00:34:48,800 --> 00:34:51,359
because again we don't remember anything

902
00:34:51,359 --> 00:34:54,560
and we might get new ideas uh

903
00:34:54,560 --> 00:34:56,639
by reading them again

904
00:34:56,639 --> 00:34:59,200
also maybe when we originally read

905
00:34:59,200 --> 00:35:00,400
something

906
00:35:00,400 --> 00:35:03,119
maybe we lacked some knowledge that we

907
00:35:03,119 --> 00:35:07,119
have now so when we reread something

908
00:35:07,119 --> 00:35:08,720
uh it's

909
00:35:08,720 --> 00:35:10,800
we read it with a different

910
00:35:10,800 --> 00:35:13,200
context or with uh with a different

911
00:35:13,200 --> 00:35:15,920
knowledge set uh at that time so it's

912
00:35:15,920 --> 00:35:18,960
it's worse to slow them

913
00:35:18,960 --> 00:35:21,040
sometimes

914
00:35:21,040 --> 00:35:22,880
thank you

915
00:35:22,880 --> 00:35:25,200
very much i'm not sure if there are any

916
00:35:25,200 --> 00:35:27,930
questions

917
00:35:27,930 --> 00:35:31,000
[Music]

918
00:35:34,840 --> 00:35:36,000
[Music]

919
00:35:36,000 --> 00:35:38,079
you

