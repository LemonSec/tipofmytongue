1
00:00:01,740 --> 00:00:03,720
[Music]

2
00:00:03,720 --> 00:00:08,220
foreign ecosystem

3
00:00:16,580 --> 00:00:19,689
[Music]

4
00:00:20,039 --> 00:00:23,100
first let me introduce our team we

5
00:00:23,100 --> 00:00:26,160
belong to the battle alt secure team and

6
00:00:26,160 --> 00:00:28,740
focus on the security of the Android and

7
00:00:28,740 --> 00:00:31,859
the Linux platform our duty is to

8
00:00:31,859 --> 00:00:34,500
discover zero de vulnerability and

9
00:00:34,500 --> 00:00:38,480
explore possible defensive Solutions

10
00:00:40,140 --> 00:00:42,239
here is the agenda for over today's

11
00:00:42,239 --> 00:00:45,120
presentation firstly we will briefly

12
00:00:45,120 --> 00:00:47,760
introduce some physical knowledge about

13
00:00:47,760 --> 00:00:51,300
the unique domain socket secondly usage

14
00:00:51,300 --> 00:00:52,620
scenarios

15
00:00:52,620 --> 00:00:54,719
you may wonder where the unique domain

16
00:00:54,719 --> 00:00:56,520
circuit is used in

17
00:00:56,520 --> 00:00:59,460
each section will answer this question

18
00:00:59,460 --> 00:01:02,699
suddenly common vulnerabilities and case

19
00:01:02,699 --> 00:01:05,220
study normally the third part

20
00:01:05,220 --> 00:01:07,860
application can directly connect to a

21
00:01:07,860 --> 00:01:11,179
vendor circular service

22
00:01:11,360 --> 00:01:14,760
security but Access Control accounts of

23
00:01:14,760 --> 00:01:16,979
all security issues in these two

24
00:01:16,979 --> 00:01:20,520
sections we will elaborate on this

25
00:01:20,520 --> 00:01:23,220
and in the end we will introduce some

26
00:01:23,220 --> 00:01:27,380
automated analysis methods

27
00:01:28,560 --> 00:01:30,600
let's first understand some basic

28
00:01:30,600 --> 00:01:33,420
concepts the unique domain socket is

29
00:01:33,420 --> 00:01:36,900
also known as UDS or IPC circulator for

30
00:01:36,900 --> 00:01:39,180
convenience we will use the name UDS

31
00:01:39,180 --> 00:01:40,439
data

32
00:01:40,439 --> 00:01:43,140
for UTS is a data Communications

33
00:01:43,140 --> 00:01:45,920
endpoint for exchanging data between

34
00:01:45,920 --> 00:01:49,740
processes executing on the same host

35
00:01:49,740 --> 00:01:52,439
but shown in the figure is easier and

36
00:01:52,439 --> 00:01:54,899
the communication mode are very similar

37
00:01:54,899 --> 00:01:58,259
to the network circuit but rather than

38
00:01:58,259 --> 00:02:01,140
using an online Network protocol

39
00:02:01,140 --> 00:02:03,780
for communication occurs entirely within

40
00:02:03,780 --> 00:02:06,060
the kernel so it's more suitable for the

41
00:02:06,060 --> 00:02:08,960
local APC

42
00:02:09,899 --> 00:02:12,959
tabs and namespaces like the network

43
00:02:12,959 --> 00:02:16,739
circuit the UDS also has three tabs so

44
00:02:16,739 --> 00:02:19,140
extreme 60 gram and the circular

45
00:02:19,140 --> 00:02:22,440
sequence packet the stream circuit is

46
00:02:22,440 --> 00:02:25,920
stream oriented works like a pep and the

47
00:02:25,920 --> 00:02:28,560
diagram circuit is datagram oriented

48
00:02:28,560 --> 00:02:31,739
it's similar to a message queue the

49
00:02:31,739 --> 00:02:34,319
sequence packet circuit is connection

50
00:02:34,319 --> 00:02:37,500
oriented but also preserves the message

51
00:02:37,500 --> 00:02:39,480
boundaries

52
00:02:39,480 --> 00:02:43,260
and use UDS can use a name to identify

53
00:02:43,260 --> 00:02:46,200
identify itself you can use the cell

54
00:02:46,200 --> 00:02:49,739
system name space and found the name to

55
00:02:49,739 --> 00:02:53,160
the system pass or use the abstract

56
00:02:53,160 --> 00:02:54,900
namespace

57
00:02:54,900 --> 00:02:58,560
which is independent of the file system

58
00:02:58,560 --> 00:03:01,860
and using that state or SS command you

59
00:03:01,860 --> 00:03:04,140
can list all unique domain sockets on a

60
00:03:04,140 --> 00:03:06,900
device and you can see their tips and

61
00:03:06,900 --> 00:03:08,400
names

62
00:03:08,400 --> 00:03:11,580
if a name starting with at means it uses

63
00:03:11,580 --> 00:03:14,840
the abstract namespace

64
00:03:15,080 --> 00:03:18,780
Android approve as many encapsulated if

65
00:03:18,780 --> 00:03:21,239
she has to use the UDS

66
00:03:21,239 --> 00:03:24,180
knowing this FCS is very helpful for

67
00:03:24,180 --> 00:03:27,540
reverse analysis as a Java layer you can

68
00:03:27,540 --> 00:03:29,280
use local circuit

69
00:03:29,280 --> 00:03:31,159
and the local server circulator to

70
00:03:31,159 --> 00:03:34,319
create a UDS

71
00:03:34,319 --> 00:03:36,420
the local storage operator is the most

72
00:03:36,420 --> 00:03:39,840
common MPI it encapsulates multiple

73
00:03:39,840 --> 00:03:43,440
low-level FCS such as band analysis it

74
00:03:43,440 --> 00:03:46,620
can create a server circuit listening at

75
00:03:46,620 --> 00:03:49,940
a specified name

76
00:03:50,940 --> 00:03:53,760
indeed most unique domain sockets are

77
00:03:53,760 --> 00:03:56,159
created in the native code

78
00:03:56,159 --> 00:03:58,200
because there are more fingering than if

79
00:03:58,200 --> 00:03:58,920
there's

80
00:03:58,920 --> 00:04:01,860
the UDS facility is a standard component

81
00:04:01,860 --> 00:04:04,920
of the posix operating system so we can

82
00:04:04,920 --> 00:04:07,860
use opposite socket HCI just assess the

83
00:04:07,860 --> 00:04:10,140
domain to the AF Unix

84
00:04:10,140 --> 00:04:12,480
on the other hand you can use some

85
00:04:12,480 --> 00:04:15,900
encapsulated HS such as circuit local

86
00:04:15,900 --> 00:04:18,660
server and circular local client

87
00:04:18,660 --> 00:04:21,540
they are more coming into but no not

88
00:04:21,540 --> 00:04:25,040
included in the indicate

89
00:04:25,919 --> 00:04:28,560
access control is a key point

90
00:04:28,560 --> 00:04:30,600
there are many ways to do access control

91
00:04:30,600 --> 00:04:35,100
for the UDS first if a UTS is bound to a

92
00:04:35,100 --> 00:04:37,860
fair system pass then we can use the

93
00:04:37,860 --> 00:04:39,900
fair permissions to control who can

94
00:04:39,900 --> 00:04:42,479
write the circuit file this is the easy

95
00:04:42,479 --> 00:04:43,500
history

96
00:04:43,500 --> 00:04:47,340
secondly the get sock opt API can get a

97
00:04:47,340 --> 00:04:50,100
client's credential which is the ucred

98
00:04:50,100 --> 00:04:54,180
structure it contains the prcpid uid and

99
00:04:54,180 --> 00:04:55,740
the GID

100
00:04:55,740 --> 00:04:58,020
then you can use this information to

101
00:04:58,020 --> 00:05:02,479
determine whether to deny the request

102
00:05:03,900 --> 00:05:06,840
in practice using acid Linux to do

103
00:05:06,840 --> 00:05:09,240
access control is the most common way

104
00:05:09,240 --> 00:05:12,960
the SE nuts has good support for the UDS

105
00:05:12,960 --> 00:05:15,660
there are three related classes stock

106
00:05:15,660 --> 00:05:18,479
fail stock unique stream socket and the

107
00:05:18,479 --> 00:05:20,699
Unix degrees

108
00:05:20,699 --> 00:05:23,400
the software class is used for the

109
00:05:23,400 --> 00:05:25,080
circuit Affair object

110
00:05:25,080 --> 00:05:27,780
and the rest are used for the process

111
00:05:27,780 --> 00:05:28,800
object

112
00:05:28,800 --> 00:05:31,860
we can't control which domain can better

113
00:05:31,860 --> 00:05:34,680
to a specified software

114
00:05:34,680 --> 00:05:37,979
like policy 1 in the figure it means all

115
00:05:37,979 --> 00:05:40,320
domains are allowed to write the low DW

116
00:05:40,320 --> 00:05:41,759
circuit fail

117
00:05:41,759 --> 00:05:44,039
we also can control which domain can

118
00:05:44,039 --> 00:05:47,699
connect to a circuit created a specified

119
00:05:47,699 --> 00:05:49,500
process

120
00:05:49,500 --> 00:05:52,440
like policy 2 in the figure it means all

121
00:05:52,440 --> 00:05:55,280
domains are allowed to connect to the

122
00:05:55,280 --> 00:05:58,560
linuxgram Circuit created by the login

123
00:05:58,560 --> 00:06:00,060
process

124
00:06:00,060 --> 00:06:03,539
in addition Android also provides some

125
00:06:03,539 --> 00:06:06,479
macros for setting as signals policies

126
00:06:06,479 --> 00:06:10,758
you can find a lot in AOSP

127
00:06:12,240 --> 00:06:15,000
next I will introduce some usage

128
00:06:15,000 --> 00:06:18,300
scenarios of the UDS which will help us

129
00:06:18,300 --> 00:06:20,820
synchronize systematically about this

130
00:06:20,820 --> 00:06:22,380
attack service

131
00:06:22,380 --> 00:06:25,020
we analyzed the udl services on various

132
00:06:25,020 --> 00:06:28,020
devices one by one and summarize the

133
00:06:28,020 --> 00:06:30,539
most important scenarios

134
00:06:30,539 --> 00:06:33,780
this usage scenarios can be divided into

135
00:06:33,780 --> 00:06:35,400
categories

136
00:06:35,400 --> 00:06:38,580
the first is diagnostic tools such as

137
00:06:38,580 --> 00:06:41,400
log management tools analog and the

138
00:06:41,400 --> 00:06:44,100
exception management tools the second is

139
00:06:44,100 --> 00:06:46,080
the complex the whole modules such as

140
00:06:46,080 --> 00:06:48,060
GPS

141
00:06:48,060 --> 00:06:51,919
let's see some real world examples

142
00:06:52,080 --> 00:06:55,020
the first is log management tools

143
00:06:55,020 --> 00:06:57,060
logs are the most important information

144
00:06:57,060 --> 00:06:59,400
for troubleshooting you know Android

145
00:06:59,400 --> 00:07:01,740
device there are literally two login

146
00:07:01,740 --> 00:07:04,259
systems one is the Android standard

147
00:07:04,259 --> 00:07:06,720
login system and the other is the

148
00:07:06,720 --> 00:07:08,819
Windows login system

149
00:07:08,819 --> 00:07:11,520
let's first look at the Android standard

150
00:07:11,520 --> 00:07:13,580
open system

151
00:07:13,580 --> 00:07:16,860
is occur whether using local API

152
00:07:16,860 --> 00:07:20,220
application or using local command all

153
00:07:20,220 --> 00:07:23,280
requests are handled by the login just

154
00:07:23,280 --> 00:07:27,679
like the architecture in the diagram

155
00:07:28,199 --> 00:07:30,479
not D contains the three modules each

156
00:07:30,479 --> 00:07:33,840
module listens on a UDS to export the

157
00:07:33,840 --> 00:07:35,039
interface

158
00:07:35,039 --> 00:07:37,319
then you can write logs to the low DW

159
00:07:37,319 --> 00:07:40,740
socket with logs from the low Dr circuit

160
00:07:40,740 --> 00:07:43,139
and the center commands to the log D

161
00:07:43,139 --> 00:07:44,280
socket

162
00:07:44,280 --> 00:07:47,220
and this is also how locate command

163
00:07:47,220 --> 00:07:49,639
works

164
00:07:51,360 --> 00:07:53,520
the Windows login system is more

165
00:07:53,520 --> 00:07:54,900
complicated

166
00:07:54,900 --> 00:07:58,680
Android contains many Hardware modules

167
00:07:58,680 --> 00:08:01,139
if logos of Hardware modules are all

168
00:08:01,139 --> 00:08:04,259
printed to the standard login system and

169
00:08:04,259 --> 00:08:07,199
the mixed with applications log

170
00:08:07,199 --> 00:08:09,479
it will be difficult to troubleshoot

171
00:08:09,479 --> 00:08:12,300
hardware issues so a better way is to

172
00:08:12,300 --> 00:08:15,199
develop another login system

173
00:08:15,199 --> 00:08:18,300
the diagram shows the architecture of a

174
00:08:18,300 --> 00:08:20,220
Windows login system

175
00:08:20,220 --> 00:08:21,979
the top layer is a management

176
00:08:21,979 --> 00:08:25,020
application debugger UI

177
00:08:25,020 --> 00:08:28,379
system developers can use it can use it

178
00:08:28,379 --> 00:08:30,419
to manage logs

179
00:08:30,419 --> 00:08:32,820
and below the debugger UI

180
00:08:32,820 --> 00:08:35,458
is various logins and they are

181
00:08:35,458 --> 00:08:37,559
responsible for collecting logs of

182
00:08:37,559 --> 00:08:40,500
different modules

183
00:08:40,500 --> 00:08:44,300
mobile of T is the most important one

184
00:08:44,300 --> 00:08:47,100
kernel modules log

185
00:08:47,100 --> 00:08:50,399
each demands listens on a UDS to receive

186
00:08:50,399 --> 00:08:52,980
command synthesize the debugger UI

187
00:08:52,980 --> 00:08:55,620
the next layer is about how each demand

188
00:08:55,620 --> 00:08:58,500
get logs and the different modules print

189
00:08:58,500 --> 00:09:00,540
logs in different Hobbies

190
00:09:00,540 --> 00:09:02,940
kernel modules usually use the virtual

191
00:09:02,940 --> 00:09:05,700
file system and the user space process

192
00:09:05,700 --> 00:09:10,399
is usually use the index domain circuit

193
00:09:11,880 --> 00:09:14,339
exception management tools also used a

194
00:09:14,339 --> 00:09:17,060
lot of your next domain sockets

195
00:09:17,060 --> 00:09:20,220
AOSP the tombstone D and the system

196
00:09:20,220 --> 00:09:22,980
server all use the UDS to receive

197
00:09:22,980 --> 00:09:25,740
exception information but our Focus

198
00:09:25,740 --> 00:09:27,779
today is not on them

199
00:09:27,779 --> 00:09:30,360
many vendors would develop additional

200
00:09:30,360 --> 00:09:32,940
tools to enhance the existing reception

201
00:09:32,940 --> 00:09:35,640
system such as a

202
00:09:35,640 --> 00:09:38,519
Android exception engine

203
00:09:38,519 --> 00:09:41,399
e is a powerful tool if I can cache

204
00:09:41,399 --> 00:09:43,500
exceptions soon from the Java code

205
00:09:43,500 --> 00:09:47,820
native code and the human kernel code

206
00:09:47,820 --> 00:09:51,060
is also prior has various supporting

207
00:09:51,060 --> 00:09:54,540
tools such as rtt which can dump runtime

208
00:09:54,540 --> 00:09:57,200
information of a process

209
00:09:57,200 --> 00:10:00,120
assuming in the figure it contains the

210
00:10:00,120 --> 00:10:01,620
exception table

211
00:10:01,620 --> 00:10:03,779
I think it's convenient to query which

212
00:10:03,779 --> 00:10:07,200
module occurs an exception at what time

213
00:10:07,200 --> 00:10:09,300
and you can get four pack check

214
00:10:09,300 --> 00:10:11,599
information

215
00:10:13,260 --> 00:10:16,019
the full implementation of the aea is

216
00:10:16,019 --> 00:10:19,140
extremely complex and is a closed

217
00:10:19,140 --> 00:10:22,620
software fortunately we only need to

218
00:10:22,620 --> 00:10:25,380
focus on the UDS part

219
00:10:25,380 --> 00:10:28,080
assume in the figure the AED demand

220
00:10:28,080 --> 00:10:30,839
listens on three unique domain sockets

221
00:10:30,839 --> 00:10:34,320
the AED and the aed32 circuits are used

222
00:10:34,320 --> 00:10:36,839
to receive exception information the

223
00:10:36,839 --> 00:10:40,080
rttd socket is used to explore the star

224
00:10:40,080 --> 00:10:42,660
interfaces for dumping long-time

225
00:10:42,660 --> 00:10:44,459
information

226
00:10:44,459 --> 00:10:48,060
the AE has instrumented the activity

227
00:10:48,060 --> 00:10:51,380
manager service and the Crackdown so the

228
00:10:51,380 --> 00:10:54,779
application instead occurs the activity

229
00:10:54,779 --> 00:10:56,880
manager service will connect to the Ed

230
00:10:56,880 --> 00:10:59,579
circuit and the reported the exception

231
00:10:59,579 --> 00:11:01,320
information

232
00:11:01,320 --> 00:11:03,779
the native reception occurs the

233
00:11:03,779 --> 00:11:06,300
questions will connect to the ad32

234
00:11:06,300 --> 00:11:08,940
circuit and the send the tombstone field

235
00:11:08,940 --> 00:11:09,899
parts

236
00:11:09,899 --> 00:11:12,300
the tombstone file holds the exception

237
00:11:12,300 --> 00:11:14,719
detail

238
00:11:17,339 --> 00:11:20,220
other usage scenarios

239
00:11:20,220 --> 00:11:23,399
I will exchange they are assuming the

240
00:11:23,399 --> 00:11:24,839
diagram

241
00:11:24,839 --> 00:11:27,839
of our defines a standard interface for

242
00:11:27,839 --> 00:11:30,779
Hardware vendors to implement which

243
00:11:30,779 --> 00:11:34,079
enables Android to be agnostic about low

244
00:11:34,079 --> 00:11:36,779
level driver implementations

245
00:11:36,779 --> 00:11:38,820
a complex the whole module usually

246
00:11:38,820 --> 00:11:41,940
consists of two types of process

247
00:11:41,940 --> 00:11:44,880
what is the whole Services used to

248
00:11:44,880 --> 00:11:47,220
provide the standard interfaces for the

249
00:11:47,220 --> 00:11:50,160
framework and the other is image

250
00:11:50,160 --> 00:11:53,399
responsible for implementing specific

251
00:11:53,399 --> 00:11:55,200
functionality

252
00:11:55,200 --> 00:11:58,140
so what does this have to do with the

253
00:11:58,140 --> 00:12:00,060
UDS

254
00:12:00,060 --> 00:12:03,120
answer is the UTS is the main accuracy

255
00:12:03,120 --> 00:12:07,220
method between these processes

256
00:12:09,079 --> 00:12:12,300
let's look at a example

257
00:12:12,300 --> 00:12:15,060
the diagram shows the architecture of a

258
00:12:15,060 --> 00:12:17,820
GPS module it contains two Hardware

259
00:12:17,820 --> 00:12:21,720
vendor services and the three demons

260
00:12:21,720 --> 00:12:24,360
two Services provide the framework with

261
00:12:24,360 --> 00:12:28,380
standard interface to use GSS and LT

262
00:12:28,380 --> 00:12:30,500
precisioning protocol

263
00:12:30,500 --> 00:12:33,560
and the core functions are implied

264
00:12:33,560 --> 00:12:37,740
implemented as three elements

265
00:12:37,740 --> 00:12:42,720
which LPS DPG is responsible for the GPS

266
00:12:42,720 --> 00:12:44,420
modules log

267
00:12:44,420 --> 00:12:48,420
MLG is responsible for Genesis related

268
00:12:48,420 --> 00:12:50,880
functions

269
00:12:50,880 --> 00:12:56,399
and httpsd is responsible for a GPS

270
00:12:56,399 --> 00:12:59,040
using network information to access the

271
00:12:59,040 --> 00:13:00,560
positioning

272
00:13:00,560 --> 00:13:03,240
iftml provides some low-level interfaces

273
00:13:03,240 --> 00:13:06,839
through the UDS and the processes in all

274
00:13:06,839 --> 00:13:10,019
operators through the UTS

275
00:13:10,019 --> 00:13:12,600
and this communication model is very

276
00:13:12,600 --> 00:13:16,040
common in Hardware modules

277
00:13:18,720 --> 00:13:21,959
so far we have seen some UDS services

278
00:13:21,959 --> 00:13:26,760
we also analyzed many other UTS services

279
00:13:26,760 --> 00:13:29,279
and they have some common features

280
00:13:29,279 --> 00:13:30,720
first

281
00:13:30,720 --> 00:13:32,639
they are usually run in the high

282
00:13:32,639 --> 00:13:34,920
privileged documents as a system over

283
00:13:34,920 --> 00:13:37,380
root and are responsible for some

284
00:13:37,380 --> 00:13:40,440
sensitive tasks such as reading and

285
00:13:40,440 --> 00:13:42,959
waiting system fails talking to the

286
00:13:42,959 --> 00:13:43,800
driver

287
00:13:43,800 --> 00:13:46,800
and

288
00:13:47,880 --> 00:13:51,600
UDS is a good attack service

289
00:13:51,600 --> 00:13:55,079
the second is unimportant but I usually

290
00:13:55,079 --> 00:13:57,180
Overlook the feature

291
00:13:57,180 --> 00:14:00,000
these services are usually a node of a

292
00:14:00,000 --> 00:14:02,519
completed data flow diagram

293
00:14:02,519 --> 00:14:05,820
assuming the figure in complex module

294
00:14:05,820 --> 00:14:09,600
various IPC methods connect multiple

295
00:14:09,600 --> 00:14:12,300
processes at different layers

296
00:14:12,300 --> 00:14:15,240
the UDS is just one of them

297
00:14:15,240 --> 00:14:17,220
they are made

298
00:14:17,220 --> 00:14:19,920
there are many parts to attack a UDS

299
00:14:19,920 --> 00:14:20,700
service

300
00:14:20,700 --> 00:14:23,459
you can do this Upstream node to forward

301
00:14:23,459 --> 00:14:26,399
the attack payload and the way which

302
00:14:26,399 --> 00:14:30,560
will works in multiple scenarios

303
00:14:33,899 --> 00:14:36,839
next I will introduce some common

304
00:14:36,839 --> 00:14:39,420
vulnerabilities we found in Vendor

305
00:14:39,420 --> 00:14:40,820
demons

306
00:14:40,820 --> 00:14:44,459
let's show in the diagram

307
00:14:44,459 --> 00:14:47,880
a typical UDF server usually has four

308
00:14:47,880 --> 00:14:50,459
states each data may have different

309
00:14:50,459 --> 00:14:51,959
problems

310
00:14:51,959 --> 00:14:55,380
the first is to initialize enable

311
00:14:55,380 --> 00:14:58,260
different functions according to the

312
00:14:58,260 --> 00:14:59,940
configuration

313
00:14:59,940 --> 00:15:02,639
sometimes misconfiguration can cause

314
00:15:02,639 --> 00:15:04,380
serious issues

315
00:15:04,380 --> 00:15:06,660
there is too late and the received

316
00:15:06,660 --> 00:15:09,120
requests there may be a problem of when

317
00:15:09,120 --> 00:15:11,699
you ready to access control

318
00:15:11,699 --> 00:15:14,399
and the next is to pass the request and

319
00:15:14,399 --> 00:15:16,740
forward it to the Handler there may be

320
00:15:16,740 --> 00:15:19,380
some memory corruption vulnerabilities

321
00:15:19,380 --> 00:15:23,279
last is to handle the request there may

322
00:15:23,279 --> 00:15:25,760
be some logical vulnerabilities

323
00:15:25,760 --> 00:15:30,439
let's go into some more details

324
00:15:31,680 --> 00:15:33,360
first is in this configuration

325
00:15:33,360 --> 00:15:34,920
vulnerabilities

326
00:15:34,920 --> 00:15:37,740
they are common in the diagnostic tools

327
00:15:37,740 --> 00:15:40,680
there are two common mistakes and they

328
00:15:40,680 --> 00:15:42,300
all result in something or rest

329
00:15:42,300 --> 00:15:45,300
interfaces to be exported

330
00:15:45,300 --> 00:15:47,399
the first is packaging configuration

331
00:15:47,399 --> 00:15:50,339
mistakes it can cause internal debugging

332
00:15:50,339 --> 00:15:52,740
tools to be packaged into the

333
00:15:52,740 --> 00:15:55,500
distribution room

334
00:15:55,500 --> 00:15:58,320
second is run configuration mistakes it

335
00:15:58,320 --> 00:16:01,560
can cause diagnostic tools to run in the

336
00:16:01,560 --> 00:16:02,940
Raw model

337
00:16:02,940 --> 00:16:08,459
for example we one one eight species

338
00:16:08,459 --> 00:16:11,220
is the information leakage in our

339
00:16:11,220 --> 00:16:13,399
ability

340
00:16:13,440 --> 00:16:16,320
the downstream manufacturers configure

341
00:16:16,320 --> 00:16:19,560
it to the debug mode and causing

342
00:16:19,560 --> 00:16:22,980
something your rest interfaces exported

343
00:16:22,980 --> 00:16:25,560
and the attacker can use this services

344
00:16:25,560 --> 00:16:28,320
to obtain some sensitive information

345
00:16:28,320 --> 00:16:31,620
but in normal mode these interfaces are

346
00:16:31,620 --> 00:16:35,100
only available for the root privilege

347
00:16:35,100 --> 00:16:36,720
foreign

348
00:16:36,720 --> 00:16:39,000
control

349
00:16:39,000 --> 00:16:41,579
as we mentioned earlier 50s service

350
00:16:41,579 --> 00:16:43,980
usually undertakes some high previewed

351
00:16:43,980 --> 00:16:46,680
tasks therefore the must be guaranteed

352
00:16:46,680 --> 00:16:49,740
that is a fantastic application contact

353
00:16:49,740 --> 00:16:51,540
sensitive services

354
00:16:51,540 --> 00:16:53,639
but in practice

355
00:16:53,639 --> 00:16:56,399
many Access Control strategies are

356
00:16:56,399 --> 00:16:59,699
unrelated there are four common mistakes

357
00:16:59,699 --> 00:17:02,459
first Downstream vendors May disable

358
00:17:02,459 --> 00:17:05,220
acid Linux doing so will shorten the

359
00:17:05,220 --> 00:17:06,720
development cycle

360
00:17:06,720 --> 00:17:09,419
and unfortunately this situation has

361
00:17:09,419 --> 00:17:12,140
improved a lot

362
00:17:12,179 --> 00:17:14,160
second does the Performing

363
00:17:14,160 --> 00:17:17,339
authentication in the console SDK

364
00:17:17,339 --> 00:17:20,520
but an attacker can be passed at the SDK

365
00:17:20,520 --> 00:17:23,760
and directly connect to the service

366
00:17:23,760 --> 00:17:26,579
so using run authentication methods such

367
00:17:26,579 --> 00:17:29,040
as obtaining the client's process name

368
00:17:29,040 --> 00:17:31,260
and then checking whether the process

369
00:17:31,260 --> 00:17:33,240
name is in the red list

370
00:17:33,240 --> 00:17:36,539
this is invalid because the process name

371
00:17:36,539 --> 00:17:39,900
can be said actually

372
00:17:39,900 --> 00:17:43,380
first there are any attack paths that

373
00:17:43,380 --> 00:17:45,960
can bypass the access control for

374
00:17:45,960 --> 00:17:48,600
example let's show in the figure you

375
00:17:48,600 --> 00:17:50,600
have a fail pass to attack the Target

376
00:17:50,600 --> 00:17:53,580
and if the target has access control

377
00:17:53,580 --> 00:17:56,580
then password fails

378
00:17:56,580 --> 00:17:59,280
at the amount remaining four parts there

379
00:17:59,280 --> 00:18:02,220
may be a very little attacker pass

380
00:18:02,220 --> 00:18:04,440
and this is beyond the reach of the

381
00:18:04,440 --> 00:18:06,120
target itself

382
00:18:06,120 --> 00:18:08,240
the

383
00:18:08,240 --> 00:18:11,340
cv0346 is a real world example we can

384
00:18:11,340 --> 00:18:13,860
bypass the XC Lux to achieve common

385
00:18:13,860 --> 00:18:16,380
injection we will show detail in the

386
00:18:16,380 --> 00:18:18,660
case study section

387
00:18:18,660 --> 00:18:21,419
memory corruption with an immunity

388
00:18:21,419 --> 00:18:24,000
is common in passing and the processing

389
00:18:24,000 --> 00:18:26,700
requests such as stack Overflow and

390
00:18:26,700 --> 00:18:29,900
integer overflow in addition we use a

391
00:18:29,900 --> 00:18:32,940
multi-trading to process quests

392
00:18:32,940 --> 00:18:35,220
if synchronization measures are not

393
00:18:35,220 --> 00:18:36,120
taken

394
00:18:36,120 --> 00:18:40,520
it because we have vulnerability the

395
00:18:40,520 --> 00:18:43,919
cv053 is a real world example if the

396
00:18:43,919 --> 00:18:45,660
typical integer overflow vulnerability

397
00:18:45,660 --> 00:18:49,400
in passing TRV data structures

398
00:18:49,400 --> 00:18:53,100
using the tool to subtract the headers

399
00:18:53,100 --> 00:18:55,260
lens to get the part business

400
00:18:55,260 --> 00:18:59,100
but the last can be negative and we need

401
00:18:59,100 --> 00:19:02,039
to cover to assigned there will became a

402
00:19:02,039 --> 00:19:04,740
huge number and the resulting physical

403
00:19:04,740 --> 00:19:07,220
workflow

404
00:19:07,980 --> 00:19:11,220
the last is logical vulnerability

405
00:19:11,220 --> 00:19:13,380
it's often caused the better lack of

406
00:19:13,380 --> 00:19:15,299
input validation

407
00:19:15,299 --> 00:19:18,240
first of all UDS Services I have access

408
00:19:18,240 --> 00:19:20,580
control so when you think your service

409
00:19:20,580 --> 00:19:23,520
will not be accessed as a contrasted

410
00:19:23,520 --> 00:19:26,100
application you are left you are likely

411
00:19:26,100 --> 00:19:30,000
to trust your input and directly use it

412
00:19:30,000 --> 00:19:33,440
for example the series

413
00:19:33,440 --> 00:19:35,820
39616 is a common injection

414
00:19:35,820 --> 00:19:37,919
vulnerability in a network management

415
00:19:37,919 --> 00:19:41,039
demand the root cause is marked with the

416
00:19:41,039 --> 00:19:42,799
black box in the figure

417
00:19:42,799 --> 00:19:45,900
the team directly use an input to

418
00:19:45,900 --> 00:19:48,960
concatenate the commander an attacker

419
00:19:48,960 --> 00:19:51,240
can use this probability to execute

420
00:19:51,240 --> 00:19:54,380
arbitrary command

421
00:19:54,539 --> 00:19:57,480
next my partner Yahoo will show some

422
00:19:57,480 --> 00:19:59,880
real world real world vulnerabilities

423
00:19:59,880 --> 00:20:03,720
and demonstrate how to bypass success

424
00:20:03,720 --> 00:20:05,220
control

425
00:20:05,220 --> 00:20:08,000
thank you

426
00:20:22,919 --> 00:20:26,580
hello everyone I'm yahan next let me

427
00:20:26,580 --> 00:20:29,760
introduce our real world 1bt mining of

428
00:20:29,760 --> 00:20:34,260
udx and up to April 20s we have found 12

429
00:20:34,260 --> 00:20:37,380
issues in total covered for well-known

430
00:20:37,380 --> 00:20:40,380
windows and God's acknowledgments from

431
00:20:40,380 --> 00:20:43,020
three of them now all the

432
00:20:43,020 --> 00:20:45,720
vulnerabilities are reported have been

433
00:20:45,720 --> 00:20:49,200
fixed by leaders and in this part we

434
00:20:49,200 --> 00:20:52,740
will make two cases to show that sex

435
00:20:52,740 --> 00:20:55,140
restriction cannot solve all these

436
00:20:55,140 --> 00:20:56,640
security problems

437
00:20:56,640 --> 00:21:00,120
there are restrictions in both cases but

438
00:21:00,120 --> 00:21:04,039
we still have other way to bypass

439
00:21:04,860 --> 00:21:07,260
the first case is a command injection

440
00:21:07,260 --> 00:21:10,440
that we found in Block management demon

441
00:21:10,440 --> 00:21:13,320
with the Restriction bypass it could

442
00:21:13,320 --> 00:21:16,020
finally lead to an articulation of

443
00:21:16,020 --> 00:21:19,140
privileges from Shell to system

444
00:21:19,140 --> 00:21:22,380
the root cause is directly using the

445
00:21:22,380 --> 00:21:24,000
availity input

446
00:21:24,000 --> 00:21:25,980
the log mode will behave like this

447
00:21:25,980 --> 00:21:28,500
before recording the log management

448
00:21:28,500 --> 00:21:31,860
demon will do such a check but rather

449
00:21:31,860 --> 00:21:33,960
the saving directory access the size

450
00:21:33,960 --> 00:21:37,980
limit so some of that wider the saving

451
00:21:37,980 --> 00:21:41,640
directory access the size limit so some

452
00:21:41,640 --> 00:21:44,520
of the previously saved logs will be

453
00:21:44,520 --> 00:21:48,299
deleted such deletion is performed by

454
00:21:48,299 --> 00:21:51,480
command R and RP

455
00:21:51,480 --> 00:21:55,380
and in this case user can determine the

456
00:21:55,380 --> 00:21:58,200
receiving directory that means we can

457
00:21:58,200 --> 00:22:01,799
control the vulnerable Theory so in

458
00:22:01,799 --> 00:22:04,679
instance we can inject a mailbox log

459
00:22:04,679 --> 00:22:07,440
into the CMD using separators such as

460
00:22:07,440 --> 00:22:09,860
simple

461
00:22:12,840 --> 00:22:16,320
since we have found the probability the

462
00:22:16,320 --> 00:22:18,900
next work is to study how to check the

463
00:22:18,900 --> 00:22:22,020
vulnerability with that move along the

464
00:22:22,020 --> 00:22:24,000
domain provides several log management

465
00:22:24,000 --> 00:22:27,679
commands through UDS for configuration

466
00:22:27,679 --> 00:22:31,340
recording control and so on

467
00:22:31,340 --> 00:22:33,960
we should be able to trigger the

468
00:22:33,960 --> 00:22:36,840
vulnerabilities of new tests following

469
00:22:36,840 --> 00:22:38,460
the shown process

470
00:22:38,460 --> 00:22:42,480
first we set the size limit and then we

471
00:22:42,480 --> 00:22:44,760
inject the malware command into the log

472
00:22:44,760 --> 00:22:48,720
pass and then we record logs several

473
00:22:48,720 --> 00:22:52,260
times to treat the cleanup and at that

474
00:22:52,260 --> 00:22:55,559
time Uber login should execute the

475
00:22:55,559 --> 00:22:58,020
injective command

476
00:22:58,020 --> 00:23:01,559
is a real simple and clear process but

477
00:23:01,559 --> 00:23:04,559
when we run the talk we found that the

478
00:23:04,559 --> 00:23:07,919
UDS cannot be connected because the

479
00:23:07,919 --> 00:23:11,760
Linux blocks the request and the logs

480
00:23:11,760 --> 00:23:14,299
shown here

481
00:23:18,260 --> 00:23:22,320
so the problem now is how to bypass the

482
00:23:22,320 --> 00:23:26,460
access restriction and our idea is to

483
00:23:26,460 --> 00:23:28,260
find such a proxy

484
00:23:28,260 --> 00:23:30,600
it should be allowed to access the

485
00:23:30,600 --> 00:23:33,720
vulnerable Udi service and it should

486
00:23:33,720 --> 00:23:37,020
also have an exported interface which

487
00:23:37,020 --> 00:23:40,200
can forward our malicious requests

488
00:23:40,200 --> 00:23:43,140
since the restrictions are performed

489
00:23:43,140 --> 00:23:46,559
basically news we first analyze the IC

490
00:23:46,559 --> 00:23:49,500
rules to find out which domain can

491
00:23:49,500 --> 00:23:51,780
access this GPS

492
00:23:51,780 --> 00:23:55,559
and we use the IC Search tool and we

493
00:23:55,559 --> 00:23:58,620
finally found that the domain platform

494
00:23:58,620 --> 00:24:03,659
if you can connect the UDS mobile login

495
00:24:03,659 --> 00:24:07,919
so we have privacy mentioned that there

496
00:24:07,919 --> 00:24:11,520
is a platform app named the power UI it

497
00:24:11,520 --> 00:24:14,280
is allowed to access the vulnerable Udi

498
00:24:14,280 --> 00:24:18,000
service and even better there is a

499
00:24:18,000 --> 00:24:20,780
exported broadcast receiver in the app

500
00:24:20,780 --> 00:24:25,200
to receive our log measurement once we

501
00:24:25,200 --> 00:24:28,679
can pass our log commands just to be

502
00:24:28,679 --> 00:24:32,419
broadcast to this proxy

503
00:24:34,679 --> 00:24:38,700
so now there are two attack patches

504
00:24:38,700 --> 00:24:43,380
first is directly connect to you yes and

505
00:24:43,380 --> 00:24:45,840
send our malicious pill to the mobile

506
00:24:45,840 --> 00:24:50,580
login well the second is to send our

507
00:24:50,580 --> 00:24:52,799
payload to the debug view back through

508
00:24:52,799 --> 00:24:55,799
the broadcasting and then let's debugger

509
00:24:55,799 --> 00:24:59,179
UI Force to udx

510
00:24:59,179 --> 00:25:02,580
well the first part is blocked by

511
00:25:02,580 --> 00:25:05,580
selinix note well the second is a

512
00:25:05,580 --> 00:25:07,500
Facebook bypass

513
00:25:07,500 --> 00:25:11,100
we then write a expose here

514
00:25:11,100 --> 00:25:12,480
as well

515
00:25:12,480 --> 00:25:15,539
we inject command or am I

516
00:25:15,539 --> 00:25:19,140
and the result shows that we have

517
00:25:19,140 --> 00:25:21,539
successfully gained the average of

518
00:25:21,539 --> 00:25:22,980
system

519
00:25:22,980 --> 00:25:26,820
so in summary we Face problems when

520
00:25:26,820 --> 00:25:29,460
trying to connect to the UDS directly

521
00:25:29,460 --> 00:25:32,880
but we found an upstream process that

522
00:25:32,880 --> 00:25:36,140
have two backpacks

523
00:25:38,400 --> 00:25:44,400
and next is the second Case Case two is

524
00:25:44,400 --> 00:25:46,980
a auto form right vulnerability we found

525
00:25:46,980 --> 00:25:50,039
income with a bypass of access

526
00:25:50,039 --> 00:25:53,580
restriction it can be exported to make

527
00:25:53,580 --> 00:25:57,000
arbitrary objects right and could lead

528
00:25:57,000 --> 00:26:01,279
to an escalation of privilege

529
00:26:01,279 --> 00:26:04,440
this vulnerability has been fixed by

530
00:26:04,440 --> 00:26:07,620
window but it's not the disclosure date

531
00:26:07,620 --> 00:26:09,900
yet so we won't mention any specific

532
00:26:09,900 --> 00:26:11,779
vendor and model name

533
00:26:11,779 --> 00:26:14,820
and the root cause of the vulnerability

534
00:26:14,820 --> 00:26:19,020
is also the directly using a relative

535
00:26:19,020 --> 00:26:21,500
input

536
00:26:22,080 --> 00:26:24,659
well this is very common in service

537
00:26:24,659 --> 00:26:28,559
that's untrusted app cannot access

538
00:26:28,559 --> 00:26:31,200
the vulnerable demon exports are

539
00:26:31,200 --> 00:26:33,299
interface for citing configuration

540
00:26:33,299 --> 00:26:35,059
through udis

541
00:26:35,059 --> 00:26:38,179
auto parts are here

542
00:26:38,179 --> 00:26:42,240
and in this case user can Define the

543
00:26:42,240 --> 00:26:45,059
receiving directory that means we can

544
00:26:45,059 --> 00:26:48,840
control the vulnerable Theory so in

545
00:26:48,840 --> 00:26:51,600
instance we can inject a malware command

546
00:26:51,600 --> 00:26:54,179
into the CMD using separate terms such

547
00:26:54,179 --> 00:26:56,720
as simple

548
00:26:59,600 --> 00:27:02,340
since we have found the vulnerability

549
00:27:02,340 --> 00:27:05,580
the next work is to study how to check

550
00:27:05,580 --> 00:27:09,240
the volatility with that we allowed them

551
00:27:09,240 --> 00:27:10,919
and provides several log management

552
00:27:10,919 --> 00:27:14,539
commands through UDS for configuration

553
00:27:14,539 --> 00:27:18,539
recording control so on

554
00:27:18,539 --> 00:27:20,760
we should be able to trigger the

555
00:27:20,760 --> 00:27:23,700
vulnerabilities of new tests following

556
00:27:23,700 --> 00:27:25,320
the strong process

557
00:27:25,320 --> 00:27:29,400
first we set the size limit and then we

558
00:27:29,400 --> 00:27:31,679
inject the malware command into the log

559
00:27:31,679 --> 00:27:35,640
pass and then we record logs several

560
00:27:35,640 --> 00:27:39,059
times to treat the cleaner and at that

561
00:27:39,059 --> 00:27:40,460
time

562
00:27:40,460 --> 00:27:44,880
should ask you the injective command

563
00:27:44,880 --> 00:27:48,419
is a real simple and clear process but

564
00:27:48,419 --> 00:27:51,360
when we run the talk we found that the

565
00:27:51,360 --> 00:27:54,659
UDS cannot be connected because the

566
00:27:54,659 --> 00:27:58,620
Linux blocks the request and the logs

567
00:27:58,620 --> 00:28:01,100
show here

568
00:28:05,159 --> 00:28:09,000
so the problem now is how to bypass the

569
00:28:09,000 --> 00:28:13,200
access restriction and our idea is to

570
00:28:13,200 --> 00:28:15,059
find such a proxy

571
00:28:15,059 --> 00:28:17,520
it should be allowed to access the

572
00:28:17,520 --> 00:28:20,700
vulnerable Udi service and it should

573
00:28:20,700 --> 00:28:23,940
also have an executive interface which

574
00:28:23,940 --> 00:28:27,059
can forward our malicious requests

575
00:28:27,059 --> 00:28:30,179
since the restrictions are performed by

576
00:28:30,179 --> 00:28:33,840
the news we first analyze the IC rules

577
00:28:33,840 --> 00:28:37,200
to find out which domain can access this

578
00:28:37,200 --> 00:28:38,640
GPS

579
00:28:38,640 --> 00:28:42,299
and we use the IC Search tool and we

580
00:28:42,299 --> 00:28:45,419
finally found that the domain platform

581
00:28:45,419 --> 00:28:50,460
ATP can connect the UDS mobile login

582
00:28:50,460 --> 00:28:55,080
so we have privacy merchandise there is

583
00:28:55,080 --> 00:28:58,559
a platform ABP named the power UI it is

584
00:28:58,559 --> 00:29:01,140
allowed to access the vulnerable Udi

585
00:29:01,140 --> 00:29:04,799
service and the inviter there is a

586
00:29:04,799 --> 00:29:07,740
exported broadcast receiver in the ATP

587
00:29:07,740 --> 00:29:11,940
to receive or log measurement costs we

588
00:29:11,940 --> 00:29:15,539
can pass our log mounts just to be

589
00:29:15,539 --> 00:29:19,279
broadcast to this proxy

590
00:29:21,539 --> 00:29:25,620
so now there are two attack patches

591
00:29:25,620 --> 00:29:26,840
first

592
00:29:26,840 --> 00:29:30,720
is directly connect to you yes and send

593
00:29:30,720 --> 00:29:33,200
our malicious pill to the mobile login

594
00:29:33,200 --> 00:29:37,919
well the second is to send our payload

595
00:29:37,919 --> 00:29:39,840
to the debug you back through the

596
00:29:39,840 --> 00:29:43,140
Broadcasting and then let's debugger UI

597
00:29:43,140 --> 00:29:46,200
Force to udx

598
00:29:46,200 --> 00:29:49,380
well the first part is blocked by

599
00:29:49,380 --> 00:29:52,380
selinix note while the second is a

600
00:29:52,380 --> 00:29:54,360
Facebook bypass

601
00:29:54,360 --> 00:29:57,960
we don't write a exposed here

602
00:29:57,960 --> 00:29:59,279
password

603
00:29:59,279 --> 00:30:02,399
we inject command who am I

604
00:30:02,399 --> 00:30:05,940
and the result shows that we have

605
00:30:05,940 --> 00:30:08,340
successfully gained the average of

606
00:30:08,340 --> 00:30:09,840
system

607
00:30:09,840 --> 00:30:13,500
so in summary we Face problems when

608
00:30:13,500 --> 00:30:16,260
trying to connect to the UDS directly

609
00:30:16,260 --> 00:30:19,679
but we found an upstream process that

610
00:30:19,679 --> 00:30:23,000
have two backups

611
00:30:25,320 --> 00:30:31,260
and next is the second Case Case two is

612
00:30:31,260 --> 00:30:33,840
a auto form right vulnerability we found

613
00:30:33,840 --> 00:30:36,840
income with a bypass of access

614
00:30:36,840 --> 00:30:40,500
restriction it can be exported to make

615
00:30:40,500 --> 00:30:43,919
arbitrary objects right and could lead

616
00:30:43,919 --> 00:30:48,200
to an escalation of privilege

617
00:30:48,200 --> 00:30:51,299
this vulnerability has been fixed by

618
00:30:51,299 --> 00:30:54,419
window but it's not the disclosure that

619
00:30:54,419 --> 00:30:56,700
yet so we won't mention any specific

620
00:30:56,700 --> 00:30:58,620
vendor and modeling

621
00:30:58,620 --> 00:31:01,500
and the root cause of the vulnerability

622
00:31:01,500 --> 00:31:05,880
is also the directly using a validate

623
00:31:05,880 --> 00:31:07,440
input

624
00:31:07,440 --> 00:31:08,940
uh

625
00:31:08,940 --> 00:31:11,520
well this is very common in service

626
00:31:11,520 --> 00:31:15,480
that's untrusted app cannot access

627
00:31:15,480 --> 00:31:18,120
the vulnerable statement exports are

628
00:31:18,120 --> 00:31:20,279
interface for citing configuration

629
00:31:20,279 --> 00:31:22,620
through udis

630
00:31:22,620 --> 00:31:25,200
um other configurations are saved into a

631
00:31:25,200 --> 00:31:28,500
global array and which configuration to

632
00:31:28,500 --> 00:31:31,279
modify is determined by an index

633
00:31:31,279 --> 00:31:33,659
provided by user

634
00:31:33,659 --> 00:31:38,100
so from this example code we can see if

635
00:31:38,100 --> 00:31:41,520
here the V4 is 1 and there is no Bank

636
00:31:41,520 --> 00:31:44,399
check for the index then we can control

637
00:31:44,399 --> 00:31:48,620
the index to write outputs

638
00:31:49,740 --> 00:31:52,200
the photo studies how to trigger this

639
00:31:52,200 --> 00:31:55,260
vulnerability the UDS service provides

640
00:31:55,260 --> 00:31:57,120
an interface for setting configuration

641
00:31:57,120 --> 00:32:00,360
here we can control 16 integers from

642
00:32:00,360 --> 00:32:04,620
parallel known as CMD index we want to

643
00:32:04,620 --> 00:32:06,179
V4

644
00:32:06,179 --> 00:32:08,820
by citing before we can disable the

645
00:32:08,820 --> 00:32:12,240
check of the index by citing index and

646
00:32:12,240 --> 00:32:15,600
CMD we can control where to write and we

647
00:32:15,600 --> 00:32:19,799
want V3 are actually written value then

648
00:32:19,799 --> 00:32:22,799
we know we should be able to write an

649
00:32:22,799 --> 00:32:24,720
arbitrary address by sending these

650
00:32:24,720 --> 00:32:28,380
integers to the IDI service however the

651
00:32:28,380 --> 00:32:32,179
links blocks to request once again

652
00:32:36,799 --> 00:32:39,899
so we also have to find another attack

653
00:32:39,899 --> 00:32:43,080
pass to bypass a satisfaction the

654
00:32:43,080 --> 00:32:45,419
procedure of communication program of

655
00:32:45,419 --> 00:32:48,360
this UD as show like this here the

656
00:32:48,360 --> 00:32:51,179
entertainment is the UTI service it

657
00:32:51,179 --> 00:32:52,919
implements the function on

658
00:32:52,919 --> 00:32:54,960
Communications with driver

659
00:32:54,960 --> 00:32:58,320
and there is a hardware box service it

660
00:32:58,320 --> 00:33:02,279
provides an interface for free helping

661
00:33:02,279 --> 00:33:05,460
the report to indirectly communicate is

662
00:33:05,460 --> 00:33:09,059
the weather there and framework also has

663
00:33:09,059 --> 00:33:12,240
an aid activities for application have

664
00:33:12,240 --> 00:33:14,220
the application to indirectly

665
00:33:14,220 --> 00:33:17,700
communicate with the entertainment

666
00:33:17,700 --> 00:33:21,919
there are three podcasts first is

667
00:33:21,919 --> 00:33:25,460
the UBS

668
00:33:26,040 --> 00:33:27,980
[Music]

669
00:33:27,980 --> 00:33:31,260
service and then Hardware vendor service

670
00:33:31,260 --> 00:33:34,799
falls to the udx service

671
00:33:34,799 --> 00:33:37,799
foreign

672
00:33:44,500 --> 00:33:51,500
[Music]

673
00:33:58,250 --> 00:34:01,359
[Music]

674
00:34:13,260 --> 00:34:16,199
and in summary because the untrusted app

675
00:34:16,199 --> 00:34:20,339
is generally a ble to assess the Udi

676
00:34:20,339 --> 00:34:23,159
service the implementation security of

677
00:34:23,159 --> 00:34:26,580
the UDS is often ignored however access

678
00:34:26,580 --> 00:34:28,859
restrictions cannot solve all the

679
00:34:28,859 --> 00:34:33,179
security problems you can service is

680
00:34:33,179 --> 00:34:34,980
usually a node in communication

681
00:34:34,980 --> 00:34:38,099
flowchart access restrictions can only

682
00:34:38,099 --> 00:34:41,339
determine who can't access the Udi

683
00:34:41,339 --> 00:34:43,679
service but cannot determine how

684
00:34:43,679 --> 00:34:46,379
Upstream process use this

685
00:34:46,379 --> 00:34:47,659
UD Enterprise

686
00:34:47,659 --> 00:34:51,000
careful a vital way to ensure Security

687
00:34:51,000 --> 00:34:54,599
is to improve its own security rather

688
00:34:54,599 --> 00:34:57,060
than entirely depends on the excess

689
00:34:57,060 --> 00:34:59,779
restriction

690
00:35:00,740 --> 00:35:04,440
okay next part we are going to introduce

691
00:35:04,440 --> 00:35:08,099
some automatic analysis methods which

692
00:35:08,099 --> 00:35:11,339
can help to improve the efficiency of

693
00:35:11,339 --> 00:35:14,420
udx vulnerability mining

694
00:35:14,420 --> 00:35:17,880
General mining steps can be summarized

695
00:35:17,880 --> 00:35:19,200
as follow

696
00:35:19,200 --> 00:35:23,460
first we should find the Target and do

697
00:35:23,460 --> 00:35:27,480
the information ever and second it would

698
00:35:27,480 --> 00:35:31,380
be 109 and third we should find a way to

699
00:35:31,380 --> 00:35:35,040
bypass the access restriction in it is

700
00:35:35,040 --> 00:35:36,480
necessary

701
00:35:36,480 --> 00:35:39,839
so how can we improve the efficiency of

702
00:35:39,839 --> 00:35:42,560
these steps

703
00:35:42,839 --> 00:35:47,420
that's the information can reinforce

704
00:35:48,680 --> 00:35:52,079
information process information under

705
00:35:52,079 --> 00:35:53,820
the Linux policy

706
00:35:53,820 --> 00:35:56,460
socket information includes namespace

707
00:35:56,460 --> 00:36:00,180
type and so on and therefore our system

708
00:36:00,180 --> 00:36:05,760
socket we also need this Linux context

709
00:36:05,760 --> 00:36:08,520
for process information we may need the

710
00:36:08,520 --> 00:36:11,520
binary pass pause utilizer before it

711
00:36:11,520 --> 00:36:12,780
reverse engine

712
00:36:12,780 --> 00:36:15,119
and we also need just the Linux context

713
00:36:15,119 --> 00:36:17,220
of the process

714
00:36:17,220 --> 00:36:20,880
well this Linux proxy is required for

715
00:36:20,880 --> 00:36:23,180
attack pass analysis

716
00:36:23,180 --> 00:36:26,160
fortunately there are many great tools

717
00:36:26,160 --> 00:36:28,740
for information gathering we can obtain

718
00:36:28,740 --> 00:36:31,260
enough information by combining existing

719
00:36:31,260 --> 00:36:35,220
tools for example the Link's rules can

720
00:36:35,220 --> 00:36:39,900
be exported by a cut system five as the

721
00:36:39,900 --> 00:36:42,720
Linux policy like this command and then

722
00:36:42,720 --> 00:36:47,660
analyze the bias IC search tools

723
00:36:49,859 --> 00:36:52,980
and we have combine these tools with

724
00:36:52,980 --> 00:36:56,640
python and ADB here the root permission

725
00:36:56,640 --> 00:37:00,060
is required the figure shows a result of

726
00:37:00,060 --> 00:37:03,480
the two the two kind enumerate all Udi

727
00:37:03,480 --> 00:37:05,940
service on the device and list some

728
00:37:05,940 --> 00:37:09,119
basic information such as Linux contacts

729
00:37:09,119 --> 00:37:13,140
of socket file and process the process a

730
00:37:13,140 --> 00:37:16,200
binary file and so on we can use this

731
00:37:16,200 --> 00:37:18,200
tool to help us

732
00:37:18,200 --> 00:37:22,520
quickly find the udl service

733
00:37:23,780 --> 00:37:28,079
so for the Second Step do you want to be

734
00:37:28,079 --> 00:37:30,960
mining it is more difficult to realize

735
00:37:30,960 --> 00:37:34,619
the automation optimization in white box

736
00:37:34,619 --> 00:37:37,140
cases we can use wireless called

737
00:37:37,140 --> 00:37:39,480
analysis tools to improve efficiency

738
00:37:39,480 --> 00:37:42,599
such as code ql and suit

739
00:37:42,599 --> 00:37:46,380
but for blackbox one repeat mining we'll

740
00:37:46,380 --> 00:37:49,520
still use traditional reverse engine

741
00:37:49,520 --> 00:37:53,700
because they are leaking a well a

742
00:37:53,700 --> 00:37:57,060
well-performed automatic analysis method

743
00:37:57,060 --> 00:37:59,540
this figure shows an example of

744
00:37:59,540 --> 00:38:02,220
automatic vulnerability mining in white

745
00:38:02,220 --> 00:38:06,720
box cases we use port URL to run plus

746
00:38:06,720 --> 00:38:10,260
the command injection vulnerability we

747
00:38:10,260 --> 00:38:13,740
conduct a static trained analyze to find

748
00:38:13,740 --> 00:38:16,440
out whether there is a parts that the

749
00:38:16,440 --> 00:38:19,440
data read from the received buffer flows

750
00:38:19,440 --> 00:38:22,280
to the system command

751
00:38:22,280 --> 00:38:26,400
and the code QR is very effective for

752
00:38:26,400 --> 00:38:29,760
code analyzing as well as the study 10

753
00:38:29,760 --> 00:38:33,780
analysis but there is a disadvantage

754
00:38:33,780 --> 00:38:37,560
that we have to model Wireless Library

755
00:38:37,560 --> 00:38:40,140
functions before using the code QR

756
00:38:40,140 --> 00:38:41,839
because

757
00:38:41,839 --> 00:38:46,140
it is needed a lot of manual effort it's

758
00:38:46,140 --> 00:38:48,119
actually you'll be modeling some

759
00:38:48,119 --> 00:38:52,880
container class of the CVP

760
00:38:54,060 --> 00:38:58,320
okay finally the final step if we have

761
00:38:58,320 --> 00:39:02,099
successfully found a UDS vulnerability

762
00:39:02,099 --> 00:39:04,859
but if we found that it cannot be

763
00:39:04,859 --> 00:39:07,460
assessed directly by the Enterprise app

764
00:39:07,460 --> 00:39:10,980
and then we need to find another path to

765
00:39:10,980 --> 00:39:13,920
bypass the access restriction

766
00:39:13,920 --> 00:39:18,540
and our solution is trying to draw a

767
00:39:18,540 --> 00:39:22,200
complete data flow diagram of the model

768
00:39:22,200 --> 00:39:25,800
an example is shown in the figure the

769
00:39:25,800 --> 00:39:28,560
data flow diagram contains mining nodes

770
00:39:28,560 --> 00:39:29,940
and edges

771
00:39:29,940 --> 00:39:33,960
here the nodes represent a process and

772
00:39:33,960 --> 00:39:35,700
the edges represent different

773
00:39:35,700 --> 00:39:38,760
communication methods such as spanner

774
00:39:38,760 --> 00:39:41,280
Hardware run and UDS

775
00:39:41,280 --> 00:39:45,599
well from this program we can see which

776
00:39:45,599 --> 00:39:46,880
process

777
00:39:46,880 --> 00:39:51,720
communicate with other process with

778
00:39:51,720 --> 00:39:54,320
what communication method

779
00:39:54,320 --> 00:39:58,320
well the key point of optimization in

780
00:39:58,320 --> 00:40:01,020
this step is to automatically find both

781
00:40:01,020 --> 00:40:05,119
ends of the IPC

782
00:40:05,520 --> 00:40:08,820
finding pairs of given UDS is quite

783
00:40:08,820 --> 00:40:11,820
difficult because product doesn't

784
00:40:11,820 --> 00:40:14,400
provide such an interface

785
00:40:14,400 --> 00:40:17,760
but there's still some ways to try

786
00:40:17,760 --> 00:40:21,240
to find which process can connect it to

787
00:40:21,240 --> 00:40:24,900
a given udx we can gather under normal

788
00:40:24,900 --> 00:40:28,859
size the restrictions I IC search

789
00:40:28,859 --> 00:40:32,579
but those Linux rules only tells us

790
00:40:32,579 --> 00:40:36,060
which domain is allowed but not a

791
00:40:36,060 --> 00:40:37,680
specific process

792
00:40:37,680 --> 00:40:40,859
so the difficulty lies in how to list

793
00:40:40,859 --> 00:40:44,280
all the processes that belong to a given

794
00:40:44,280 --> 00:40:46,560
domain

795
00:40:46,560 --> 00:40:49,560
find the owner and the user of the

796
00:40:49,560 --> 00:40:52,920
bundle service we can use a tool in the

797
00:40:52,920 --> 00:40:56,280
bin down for analysis however window

798
00:40:56,280 --> 00:40:59,339
relies on tick bug effects which is

799
00:40:59,339 --> 00:41:01,800
turned off on Android 11.

800
00:41:01,800 --> 00:41:04,800
so generally speaking there are some

801
00:41:04,800 --> 00:41:08,400
analysis methods can be used to obtain

802
00:41:08,400 --> 00:41:12,180
complete communication flow but it is

803
00:41:12,180 --> 00:41:14,280
still very difficult to realize a

804
00:41:14,280 --> 00:41:17,540
complete optimization

805
00:41:18,560 --> 00:41:22,260
and in the end we summarize our topic as

806
00:41:22,260 --> 00:41:23,520
follow

807
00:41:23,520 --> 00:41:27,000
which are some main conclusions that

808
00:41:27,000 --> 00:41:30,960
first qds are widely used in Vendor

809
00:41:30,960 --> 00:41:32,160
demons

810
00:41:32,160 --> 00:41:35,220
and the windows often ignore their

811
00:41:35,220 --> 00:41:37,800
security because the untrusted app

812
00:41:37,800 --> 00:41:41,520
cannot directly assess the udx

813
00:41:41,520 --> 00:41:44,640
well the access control policy cannot

814
00:41:44,640 --> 00:41:48,900
solve all security problems so it is

815
00:41:48,900 --> 00:41:52,500
very highly recommended to pay attention

816
00:41:52,500 --> 00:41:54,599
to the security of the service

817
00:41:54,599 --> 00:41:56,760
implementation itself

818
00:41:56,760 --> 00:42:00,300
rather than depending on the access

819
00:42:00,300 --> 00:42:01,680
control

820
00:42:01,680 --> 00:42:05,820
and for the vulnerability remediation

821
00:42:05,820 --> 00:42:08,820
um all the vendors have worked

822
00:42:08,820 --> 00:42:12,540
diligently with us to remediate the

823
00:42:12,540 --> 00:42:15,780
security issues and all vulnerabilities

824
00:42:15,780 --> 00:42:19,260
have been fixed in the patch are

825
00:42:19,260 --> 00:42:21,119
available

826
00:42:21,119 --> 00:42:24,480
so we also have several Future Works to

827
00:42:24,480 --> 00:42:27,720
do on the one hand we need to future

828
00:42:27,720 --> 00:42:31,980
study the automatic analysis method to

829
00:42:31,980 --> 00:42:35,040
improve our tools and on the other hand

830
00:42:35,040 --> 00:42:38,579
we notice that Udi service is not the

831
00:42:38,579 --> 00:42:41,700
end point it is also an entrance to the

832
00:42:41,700 --> 00:42:42,599
driver

833
00:42:42,599 --> 00:42:45,780
so we will go deeper into these parts to

834
00:42:45,780 --> 00:42:48,200
see what happens

835
00:42:48,200 --> 00:42:52,160
that's all for our speak

836
00:42:53,900 --> 00:42:57,859
uh is there any question

837
00:42:59,080 --> 00:43:02,150
[Music]

838
00:43:05,990 --> 00:43:09,080
[Music]

