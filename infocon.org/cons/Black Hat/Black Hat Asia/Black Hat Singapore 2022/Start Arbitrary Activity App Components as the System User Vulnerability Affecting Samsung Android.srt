1
00:00:01,740 --> 00:00:04,810
[Music]

2
00:00:08,639 --> 00:00:11,120
uh so hello everyone uh can you hear me

3
00:00:11,120 --> 00:00:12,639
all right

4
00:00:12,639 --> 00:00:14,719
all right my name is ryan johnson and

5
00:00:14,719 --> 00:00:16,400
today i'm going to be talking about a

6
00:00:16,400 --> 00:00:18,080
vulnerability that was present in

7
00:00:18,080 --> 00:00:19,119
samsung

8
00:00:19,119 --> 00:00:20,960
android devices

9
00:00:20,960 --> 00:00:22,720
so today we're going to talk a little

10
00:00:22,720 --> 00:00:24,720
bit about android then we're going to

11
00:00:24,720 --> 00:00:27,199
talk about intent messages

12
00:00:27,199 --> 00:00:29,359
next we'll talk about intent injection

13
00:00:29,359 --> 00:00:30,480
then we'll get to the actual

14
00:00:30,480 --> 00:00:32,479
vulnerability

15
00:00:32,479 --> 00:00:35,200
next we'll talk about impacted versions

16
00:00:35,200 --> 00:00:37,680
and then we'll talk about in use cases

17
00:00:37,680 --> 00:00:40,320
that we dynamically confirmed

18
00:00:40,320 --> 00:00:41,760
next we'll talk about disclosure

19
00:00:41,760 --> 00:00:43,600
timeline and then wrap it up with some

20
00:00:43,600 --> 00:00:45,280
conclusions

21
00:00:45,280 --> 00:00:47,760
so for this research i collaborated with

22
00:00:47,760 --> 00:00:51,039
uh angelo stavro and mohammed el-sabag

23
00:00:51,039 --> 00:00:53,760
so we all work for crypto wire which was

24
00:00:53,760 --> 00:00:56,559
jump-started by a darpa project back in

25
00:00:56,559 --> 00:01:00,559
2011. we've also worked with dhs s and t

26
00:01:00,559 --> 00:01:02,399
as well as nist which are government

27
00:01:02,399 --> 00:01:05,040
organizations so at cryptowire we do

28
00:01:05,040 --> 00:01:06,560
software assurance

29
00:01:06,560 --> 00:01:08,560
developer integration mobile device

30
00:01:08,560 --> 00:01:10,880
management threat feed and security

31
00:01:10,880 --> 00:01:12,400
analytics

32
00:01:12,400 --> 00:01:13,200
so

33
00:01:13,200 --> 00:01:14,799
over on the right you can see the

34
00:01:14,799 --> 00:01:17,119
android software stack and where we're

35
00:01:17,119 --> 00:01:19,360
going to focus today is up at the top

36
00:01:19,360 --> 00:01:21,600
on the system applications

37
00:01:21,600 --> 00:01:24,560
and android makes

38
00:01:24,560 --> 00:01:26,880
or google makes android open source via

39
00:01:26,880 --> 00:01:29,439
the android open source project

40
00:01:29,439 --> 00:01:32,000
so there's android's an open ecosystem

41
00:01:32,000 --> 00:01:34,000
with many vendors creating android

42
00:01:34,000 --> 00:01:36,079
devices so they will fork a version of

43
00:01:36,079 --> 00:01:37,119
android

44
00:01:37,119 --> 00:01:38,479
and then

45
00:01:38,479 --> 00:01:40,320
make their own modifications to it to

46
00:01:40,320 --> 00:01:42,560
somewhat differentiate themselves

47
00:01:42,560 --> 00:01:44,640
uh in the marketplace

48
00:01:44,640 --> 00:01:46,479
so these customizations are great and

49
00:01:46,479 --> 00:01:48,240
that they add extra functionality that

50
00:01:48,240 --> 00:01:50,720
was not there but they can also

51
00:01:50,720 --> 00:01:52,079
introduce

52
00:01:52,079 --> 00:01:54,240
vulnerabilities because it may not have

53
00:01:54,240 --> 00:01:56,000
the code changes may not have the same

54
00:01:56,000 --> 00:01:59,360
visibility that is present in aosp

55
00:01:59,360 --> 00:02:01,119
and some of the android vendors have

56
00:02:01,119 --> 00:02:03,520
their own security bulletin

57
00:02:03,520 --> 00:02:06,560
such as huawei motorola nokia oneplus

58
00:02:06,560 --> 00:02:08,720
oppo and samsung for when they do

59
00:02:08,720 --> 00:02:10,399
introduce a vulnerability based on the

60
00:02:10,399 --> 00:02:14,400
modifications that they do make to aosp

61
00:02:14,400 --> 00:02:17,280
so the system apps that software layer

62
00:02:17,280 --> 00:02:18,720
we're going to focus on

63
00:02:18,720 --> 00:02:20,560
here calling it pre-installed apps and

64
00:02:20,560 --> 00:02:22,480
these are just any applications when you

65
00:02:22,480 --> 00:02:24,640
get a android device power it on for the

66
00:02:24,640 --> 00:02:26,640
first time these are the applications

67
00:02:26,640 --> 00:02:28,720
that are present that you did not

68
00:02:28,720 --> 00:02:30,879
install yourself so some of these

69
00:02:30,879 --> 00:02:33,120
applications cannot be uninstalled

70
00:02:33,120 --> 00:02:34,800
they're just present on your device some

71
00:02:34,800 --> 00:02:36,480
of these applications cannot even be

72
00:02:36,480 --> 00:02:38,640
disabled so if there's a vulnerability

73
00:02:38,640 --> 00:02:41,280
in one of these applications then you

74
00:02:41,280 --> 00:02:42,720
essentially just have to wait until

75
00:02:42,720 --> 00:02:45,120
there's a software update that patches

76
00:02:45,120 --> 00:02:46,480
it

77
00:02:46,480 --> 00:02:47,200
so

78
00:02:47,200 --> 00:02:48,879
some of these pre-installed apps run

79
00:02:48,879 --> 00:02:51,120
with special uids

80
00:02:51,120 --> 00:02:52,160
which

81
00:02:52,160 --> 00:02:53,440
kind of what we're going to focus on

82
00:02:53,440 --> 00:02:55,840
today is a system user which uses uid

83
00:02:55,840 --> 00:02:58,480
1000 but there's also radio which is for

84
00:02:58,480 --> 00:03:01,519
phone bluetooth keystore nfc and secure

85
00:03:01,519 --> 00:03:02,480
element

86
00:03:02,480 --> 00:03:04,959
so these pre-installed applications by

87
00:03:04,959 --> 00:03:07,120
their nature of being pre-installed have

88
00:03:07,120 --> 00:03:08,879
access to permissions that are not

89
00:03:08,879 --> 00:03:10,720
available to third-party applications

90
00:03:10,720 --> 00:03:12,959
and a third-party application is a

91
00:03:12,959 --> 00:03:15,360
application that you install from an

92
00:03:15,360 --> 00:03:17,280
application marketplace

93
00:03:17,280 --> 00:03:19,200
and an example of a permission that a

94
00:03:19,200 --> 00:03:21,120
third-party application cannot obtain is

95
00:03:21,120 --> 00:03:23,200
the master clear permission it has a

96
00:03:23,200 --> 00:03:25,200
protection level of

97
00:03:25,200 --> 00:03:27,360
privileged and signature so privileged

98
00:03:27,360 --> 00:03:29,280
that's just a pre-installed application

99
00:03:29,280 --> 00:03:31,280
and signature

100
00:03:31,280 --> 00:03:33,599
requires that for an application to get

101
00:03:33,599 --> 00:03:35,200
this permission it has to be signed with

102
00:03:35,200 --> 00:03:36,879
the same cryptographic key as the

103
00:03:36,879 --> 00:03:39,040
application that declares it and this is

104
00:03:39,040 --> 00:03:41,200
declared in the android framework which

105
00:03:41,200 --> 00:03:44,319
runs as a system user

106
00:03:44,319 --> 00:03:47,440
so speaking of android applications they

107
00:03:47,440 --> 00:03:48,159
are

108
00:03:48,159 --> 00:03:50,400
composed of app components android apps

109
00:03:50,400 --> 00:03:51,920
are not monolithic they do not have a

110
00:03:51,920 --> 00:03:52,879
single

111
00:03:52,879 --> 00:03:54,720
application entry point

112
00:03:54,720 --> 00:03:57,439
so these application components android

113
00:03:57,439 --> 00:03:59,360
provides in the framework activity

114
00:03:59,360 --> 00:04:01,680
service broadcast receiver and content

115
00:04:01,680 --> 00:04:03,760
provider so an application developer

116
00:04:03,760 --> 00:04:07,280
will extend these framework classes and

117
00:04:07,280 --> 00:04:09,439
provide their own application logic in

118
00:04:09,439 --> 00:04:11,040
the callbacks

119
00:04:11,040 --> 00:04:14,400
so for the android system to be aware of

120
00:04:14,400 --> 00:04:16,000
you know what

121
00:04:16,000 --> 00:04:19,600
application components are within an app

122
00:04:19,600 --> 00:04:22,639
uh each valid android app must have a

123
00:04:22,639 --> 00:04:25,360
android manifest.xml file so this the

124
00:04:25,360 --> 00:04:27,120
system parses this and

125
00:04:27,120 --> 00:04:28,880
figures it tells the system what

126
00:04:28,880 --> 00:04:30,560
application components

127
00:04:30,560 --> 00:04:32,560
are contained within the app also

128
00:04:32,560 --> 00:04:33,919
there's a declaration there for an

129
00:04:33,919 --> 00:04:35,840
activity so that just contains the name

130
00:04:35,840 --> 00:04:38,160
any access requirements with regards to

131
00:04:38,160 --> 00:04:42,400
permissions and intent filters

132
00:04:42,400 --> 00:04:44,880
so an intent to communicate with

133
00:04:44,880 --> 00:04:46,560
application components this is done

134
00:04:46,560 --> 00:04:48,560
through intents and an intent is

135
00:04:48,560 --> 00:04:50,960
essentially an abstraction for a message

136
00:04:50,960 --> 00:04:53,040
so if you want to this can be sent

137
00:04:53,040 --> 00:04:55,919
within apps or between apps so in the

138
00:04:55,919 --> 00:04:57,520
example here

139
00:04:57,520 --> 00:04:59,600
application a is going to send an intent

140
00:04:59,600 --> 00:05:02,240
message to application c using binder as

141
00:05:02,240 --> 00:05:05,759
the transport so in the code example

142
00:05:05,759 --> 00:05:08,800
application a creates an intent uses an

143
00:05:08,800 --> 00:05:10,720
action or an action string

144
00:05:10,720 --> 00:05:13,199
denoting an abstract action

145
00:05:13,199 --> 00:05:16,000
it happens to be

146
00:05:16,000 --> 00:05:18,160
call privileged and then provides a uri

147
00:05:18,160 --> 00:05:19,759
which is a phone number

148
00:05:19,759 --> 00:05:23,440
and it sends this intent which to the

149
00:05:23,440 --> 00:05:24,400
system

150
00:05:24,400 --> 00:05:27,280
and application c registers for the same

151
00:05:27,280 --> 00:05:30,880
action so the system resolves the intent

152
00:05:30,880 --> 00:05:33,039
and routes it to application c

153
00:05:33,039 --> 00:05:35,360
and application c receives it and then

154
00:05:35,360 --> 00:05:38,240
it can get whatever embedded data is

155
00:05:38,240 --> 00:05:40,720
contained within the intent and process

156
00:05:40,720 --> 00:05:42,160
it

157
00:05:42,160 --> 00:05:44,160
so intent

158
00:05:44,160 --> 00:05:46,320
the intent message internally has a

159
00:05:46,320 --> 00:05:49,520
field which is a bundle data type and a

160
00:05:49,520 --> 00:05:51,680
bundled data type

161
00:05:51,680 --> 00:05:53,919
essentially stores values as key value

162
00:05:53,919 --> 00:05:54,880
pairs

163
00:05:54,880 --> 00:05:56,240
so

164
00:05:56,240 --> 00:05:58,800
this a bundle can contain primitive data

165
00:05:58,800 --> 00:06:01,680
types as well as arrays and any objects

166
00:06:01,680 --> 00:06:03,520
that implement the serializable or

167
00:06:03,520 --> 00:06:06,000
parcelable interface and the parcelable

168
00:06:06,000 --> 00:06:07,360
interface

169
00:06:07,360 --> 00:06:09,280
allows for quick serialization where you

170
00:06:09,280 --> 00:06:12,080
exp explicitly create routines for

171
00:06:12,080 --> 00:06:14,880
converting the object to or from uh the

172
00:06:14,880 --> 00:06:18,400
byte stream and the intent object itself

173
00:06:18,400 --> 00:06:20,639
it implements the parcelable interface

174
00:06:20,639 --> 00:06:23,120
so this allows an intent object to be

175
00:06:23,120 --> 00:06:25,680
embedded within an intent object and it

176
00:06:25,680 --> 00:06:26,880
can be nested

177
00:06:26,880 --> 00:06:28,319
arbitrarily

178
00:06:28,319 --> 00:06:30,720
within an intent object given the

179
00:06:30,720 --> 00:06:33,440
constraints on memory and all that

180
00:06:33,440 --> 00:06:34,479
so

181
00:06:34,479 --> 00:06:36,479
here is uh we're going to talk about

182
00:06:36,479 --> 00:06:40,160
intent injection and here application a

183
00:06:40,160 --> 00:06:42,639
is going to create an intent in yellow

184
00:06:42,639 --> 00:06:44,240
which

185
00:06:44,240 --> 00:06:47,360
is to essentially call

186
00:06:47,360 --> 00:06:50,000
number it 911 a second intent in blue

187
00:06:50,000 --> 00:06:51,919
and then it's going to embed the first

188
00:06:51,919 --> 00:06:54,880
intent into the second intent using a a

189
00:06:54,880 --> 00:06:56,080
key name

190
00:06:56,080 --> 00:06:59,520
which is extra call intent it sends the

191
00:06:59,520 --> 00:07:00,479
intent

192
00:07:00,479 --> 00:07:03,199
um using an action string of

193
00:07:03,199 --> 00:07:06,080
user select wi-fi call to application b

194
00:07:06,080 --> 00:07:07,759
which registers for it it's going to

195
00:07:07,759 --> 00:07:09,520
receive that intent

196
00:07:09,520 --> 00:07:11,680
get the embedded intent using the same

197
00:07:11,680 --> 00:07:14,639
key name and then send the intent which

198
00:07:14,639 --> 00:07:16,639
then will reach application x so

199
00:07:16,639 --> 00:07:19,599
application a is created in intent and

200
00:07:19,599 --> 00:07:22,080
sent it indirectly to application x

201
00:07:22,080 --> 00:07:23,599
through application b and when

202
00:07:23,599 --> 00:07:25,919
application x receives the intent it's

203
00:07:25,919 --> 00:07:27,280
going to see that it comes from

204
00:07:27,280 --> 00:07:29,360
application b and since it's sent from

205
00:07:29,360 --> 00:07:31,360
application b it's going to be sent

206
00:07:31,360 --> 00:07:32,800
within its context so if it's a

207
00:07:32,800 --> 00:07:34,319
privileged app it's going to be sent

208
00:07:34,319 --> 00:07:36,160
with all its uh permissions and

209
00:07:36,160 --> 00:07:38,400
capabilities

210
00:07:38,400 --> 00:07:39,440
so

211
00:07:39,440 --> 00:07:41,520
there's the telecom app which in android

212
00:07:41,520 --> 00:07:42,720
devices

213
00:07:42,720 --> 00:07:45,440
uh according to its documentation

214
00:07:45,440 --> 00:07:47,919
it implements the telecom framework

215
00:07:47,919 --> 00:07:50,479
service which manages audio and video

216
00:07:50,479 --> 00:07:53,039
calls on an android device so the

217
00:07:53,039 --> 00:07:54,960
telecom app is open source you can see

218
00:07:54,960 --> 00:07:58,878
it uh browse the code or

219
00:07:59,520 --> 00:08:00,879
perform

220
00:08:00,879 --> 00:08:02,560
you can fork it

221
00:08:02,560 --> 00:08:04,800
this application is generally modified

222
00:08:04,800 --> 00:08:07,599
by android vendors and it executes with

223
00:08:07,599 --> 00:08:10,160
the system user id

224
00:08:10,160 --> 00:08:12,080
which to do this an application will

225
00:08:12,080 --> 00:08:14,160
need to use a

226
00:08:14,160 --> 00:08:16,879
shared user id of android uid system and

227
00:08:16,879 --> 00:08:18,800
be signed with the same

228
00:08:18,800 --> 00:08:19,680
key

229
00:08:19,680 --> 00:08:22,960
that signs the android framework

230
00:08:22,960 --> 00:08:26,000
so we looked at for a concrete example

231
00:08:26,000 --> 00:08:29,280
on the samsung s21 ultra 5g which is

232
00:08:29,280 --> 00:08:31,520
running android 12 the build fingerprint

233
00:08:31,520 --> 00:08:33,360
is provided there this application

234
00:08:33,360 --> 00:08:36,080
itself in its manifest file requests 47

235
00:08:36,080 --> 00:08:38,320
different permissions but at runtime it

236
00:08:38,320 --> 00:08:41,120
has 420 permissions granted to it and

237
00:08:41,120 --> 00:08:43,279
this is because when an application uses

238
00:08:43,279 --> 00:08:45,440
a shared user id

239
00:08:45,440 --> 00:08:47,360
any other applications that use the

240
00:08:47,360 --> 00:08:49,440
shared user id they pool permissions

241
00:08:49,440 --> 00:08:51,760
together so any

242
00:08:51,760 --> 00:08:53,920
permission which is requested by any app

243
00:08:53,920 --> 00:08:55,920
that runs is the system shared user id

244
00:08:55,920 --> 00:08:58,959
is available to any app that runs is the

245
00:08:58,959 --> 00:09:00,959
system shared user id

246
00:09:00,959 --> 00:09:03,839
and if you use an adb android debug

247
00:09:03,839 --> 00:09:06,080
bridge you can just execute that command

248
00:09:06,080 --> 00:09:08,399
shell adb shell dumps this package and

249
00:09:08,399 --> 00:09:10,399
the package name this will show you the

250
00:09:10,399 --> 00:09:11,839
permissions that the application

251
00:09:11,839 --> 00:09:13,839
requests itself and then also the

252
00:09:13,839 --> 00:09:15,839
permissions that the application

253
00:09:15,839 --> 00:09:18,240
is granted at runtime

254
00:09:18,240 --> 00:09:21,120
so samsung has modified the telecom app

255
00:09:21,120 --> 00:09:23,360
to add in additional

256
00:09:23,360 --> 00:09:25,200
application components statically that

257
00:09:25,200 --> 00:09:26,720
are present in the manifest as well as

258
00:09:26,720 --> 00:09:29,360
dynamically which are

259
00:09:29,360 --> 00:09:30,959
broadcast receivers which can be

260
00:09:30,959 --> 00:09:32,959
registered at runtime for specific

261
00:09:32,959 --> 00:09:35,279
actions

262
00:09:35,279 --> 00:09:37,920
so coming to the vulnerability uh in

263
00:09:37,920 --> 00:09:41,279
samsung android devices local apps can

264
00:09:41,279 --> 00:09:43,519
use the telecom app

265
00:09:43,519 --> 00:09:46,320
to send to start arbitrary activity

266
00:09:46,320 --> 00:09:49,440
application components on its behalf as

267
00:09:49,440 --> 00:09:51,200
running as the system user and all the

268
00:09:51,200 --> 00:09:53,279
privileges that are granted to it

269
00:09:53,279 --> 00:09:55,519
uh due to a broadcast receiver

270
00:09:55,519 --> 00:09:57,839
application component which lacks access

271
00:09:57,839 --> 00:10:00,160
control uh the cve is provided there it

272
00:10:00,160 --> 00:10:01,839
has a cvss

273
00:10:01,839 --> 00:10:04,480
bit three base score of 7.8

274
00:10:04,480 --> 00:10:05,360
and

275
00:10:05,360 --> 00:10:07,760
the goal would be privilege escalation

276
00:10:07,760 --> 00:10:08,560
by

277
00:10:08,560 --> 00:10:11,360
a local application using an insecure

278
00:10:11,360 --> 00:10:13,600
application that's privileged

279
00:10:13,600 --> 00:10:16,079
having it perform actions on its behalf

280
00:10:16,079 --> 00:10:17,519
which it does not have the permissions

281
00:10:17,519 --> 00:10:20,240
or capabilities to do so and using this

282
00:10:20,240 --> 00:10:22,079
since the telecom app is running a

283
00:10:22,079 --> 00:10:24,240
system it can start activity application

284
00:10:24,240 --> 00:10:26,560
components which are not exported uh and

285
00:10:26,560 --> 00:10:28,320
when an application component is not

286
00:10:28,320 --> 00:10:31,360
exported it cannot in the general case

287
00:10:31,360 --> 00:10:33,519
um be started by other applications

288
00:10:33,519 --> 00:10:34,959
although it's running as a system user

289
00:10:34,959 --> 00:10:37,120
so it's considered part of the system

290
00:10:37,120 --> 00:10:40,560
and the telecom app uh has

291
00:10:40,560 --> 00:10:42,320
a large amount of permissions that are

292
00:10:42,320 --> 00:10:44,399
granted to it

293
00:10:44,399 --> 00:10:47,120
so it's quite uh privileged

294
00:10:47,120 --> 00:10:49,440
so here kind of the somewhat of an

295
00:10:49,440 --> 00:10:51,920
abstract uh workflow for the

296
00:10:51,920 --> 00:10:54,000
vulnerability there's a telecom app it

297
00:10:54,000 --> 00:10:57,040
registers for the user select wi-fi

298
00:10:57,040 --> 00:10:58,480
service call

299
00:10:58,480 --> 00:10:59,440
action

300
00:10:59,440 --> 00:11:01,519
then a malicious app that's co-located

301
00:11:01,519 --> 00:11:02,800
on the device

302
00:11:02,800 --> 00:11:05,760
creates an intent that it wants to send

303
00:11:05,760 --> 00:11:08,240
embeds it into a second intent and then

304
00:11:08,240 --> 00:11:10,640
sends it to the telecom app using the

305
00:11:10,640 --> 00:11:13,040
user select wi-fi service call action

306
00:11:13,040 --> 00:11:16,160
string by broadcasting it the telecom

307
00:11:16,160 --> 00:11:18,480
app will then receive this intent and

308
00:11:18,480 --> 00:11:21,600
then extract the embedded intent

309
00:11:21,600 --> 00:11:24,640
and then start it as an activity which

310
00:11:24,640 --> 00:11:25,920
will then

311
00:11:25,920 --> 00:11:28,160
be sent to the ultimate target app or

312
00:11:28,160 --> 00:11:29,360
target

313
00:11:29,360 --> 00:11:30,959
application

314
00:11:30,959 --> 00:11:33,680
which will then

315
00:11:33,680 --> 00:11:35,200
essentially receive the intent and

316
00:11:35,200 --> 00:11:37,680
perform whatever action according to its

317
00:11:37,680 --> 00:11:39,279
application logic

318
00:11:39,279 --> 00:11:41,519
acting on the embedded data

319
00:11:41,519 --> 00:11:44,240
so here's a more concrete

320
00:11:44,240 --> 00:11:45,760
workflow example we have the malicious

321
00:11:45,760 --> 00:11:47,440
app on the

322
00:11:47,440 --> 00:11:50,120
samsung devices there's a

323
00:11:50,120 --> 00:11:52,160
com.sec.factory application there's

324
00:11:52,160 --> 00:11:53,680
within that a

325
00:11:53,680 --> 00:11:57,200
activity called factory reset

326
00:11:57,200 --> 00:11:59,440
it creates an intent for this activity

327
00:11:59,440 --> 00:12:01,920
puts it into a second intent

328
00:12:01,920 --> 00:12:03,519
with the second intent having an action

329
00:12:03,519 --> 00:12:05,600
string of user select wi-fi service call

330
00:12:05,600 --> 00:12:07,760
sends it to the telecom app the telecom

331
00:12:07,760 --> 00:12:10,000
app extracts the activity application

332
00:12:10,000 --> 00:12:11,200
component

333
00:12:11,200 --> 00:12:13,440
and then sends it on to its destination

334
00:12:13,440 --> 00:12:15,360
which was controlled by the malicious

335
00:12:15,360 --> 00:12:17,200
application so it gets sent to the

336
00:12:17,200 --> 00:12:19,600
factory reset app or factory

337
00:12:19,600 --> 00:12:21,760
reset activity within the device test

338
00:12:21,760 --> 00:12:22,959
app

339
00:12:22,959 --> 00:12:24,880
the device test app

340
00:12:24,880 --> 00:12:26,800
um here the factory reset activity is

341
00:12:26,800 --> 00:12:28,800
not exported and it's protected with the

342
00:12:28,800 --> 00:12:30,800
permission although the both the telecom

343
00:12:30,800 --> 00:12:32,560
app and the device test app are running

344
00:12:32,560 --> 00:12:34,800
as a system user

345
00:12:34,800 --> 00:12:38,399
so the telecom app can start it and the

346
00:12:38,399 --> 00:12:40,480
application logic for the

347
00:12:40,480 --> 00:12:44,079
device test app is to upon starting this

348
00:12:44,079 --> 00:12:46,800
activity send a broadcast intent with

349
00:12:46,800 --> 00:12:48,399
the master clear

350
00:12:48,399 --> 00:12:50,560
action string which this and android is

351
00:12:50,560 --> 00:12:52,399
going to be received by the master clear

352
00:12:52,399 --> 00:12:54,480
receiver and the android system

353
00:12:54,480 --> 00:12:55,920
which will then programmatically

354
00:12:55,920 --> 00:12:58,320
initiate a factory reset this is done

355
00:12:58,320 --> 00:13:01,680
with the recovery system api reboot wipe

356
00:13:01,680 --> 00:13:03,760
user data

357
00:13:03,760 --> 00:13:04,720
method

358
00:13:04,720 --> 00:13:07,519
which then boots into recovery mode and

359
00:13:07,519 --> 00:13:09,760
wipes the data partition which contains

360
00:13:09,760 --> 00:13:13,040
the user's applications and data

361
00:13:13,040 --> 00:13:14,800
so the root cause of the vulnerability

362
00:13:14,800 --> 00:13:17,440
is the telecom service application

363
00:13:17,440 --> 00:13:18,560
component

364
00:13:18,560 --> 00:13:20,000
which

365
00:13:20,000 --> 00:13:22,240
will run at startup and it sets up

366
00:13:22,240 --> 00:13:24,399
various managers including one that

367
00:13:24,399 --> 00:13:26,240
handles wi-fi calling

368
00:13:26,240 --> 00:13:27,200
and

369
00:13:27,200 --> 00:13:28,880
for the wi-fi calling there's a class

370
00:13:28,880 --> 00:13:32,240
called samsung usa wps broadcast

371
00:13:32,240 --> 00:13:34,720
receiver this registers for the user

372
00:13:34,720 --> 00:13:38,000
select wi-fi service call action

373
00:13:38,000 --> 00:13:40,800
and it doesn't require any permission so

374
00:13:40,800 --> 00:13:42,800
this allows local applications to send

375
00:13:42,800 --> 00:13:44,880
it broadcast intents which it will then

376
00:13:44,880 --> 00:13:47,120
extract an intent from and then start it

377
00:13:47,120 --> 00:13:48,399
as the activity

378
00:13:48,399 --> 00:13:50,800
so the threat model is a local app on

379
00:13:50,800 --> 00:13:52,480
the device that doesn't require any

380
00:13:52,480 --> 00:13:54,480
permission so it may appear harmless

381
00:13:54,480 --> 00:13:55,760
although if you were actually doing this

382
00:13:55,760 --> 00:13:58,240
you'd likely want the foreground service

383
00:13:58,240 --> 00:14:00,240
permission just so you can run as a

384
00:14:00,240 --> 00:14:01,839
service in the background although the

385
00:14:01,839 --> 00:14:03,360
foreground service does have a

386
00:14:03,360 --> 00:14:07,279
notification in the notification drawer

387
00:14:07,279 --> 00:14:09,600
we don't assume any user interaction and

388
00:14:09,600 --> 00:14:11,440
the goal is to indirectly obtain

389
00:14:11,440 --> 00:14:12,880
privileges

390
00:14:12,880 --> 00:14:16,320
via privilege escalation by sending uh

391
00:14:16,320 --> 00:14:18,560
broadcast intents to the telecom app for

392
00:14:18,560 --> 00:14:21,120
it to extract the intent and then start

393
00:14:21,120 --> 00:14:23,600
it as an activity and since it is an

394
00:14:23,600 --> 00:14:25,760
activity there is likely going to be a

395
00:14:25,760 --> 00:14:27,519
gui component

396
00:14:27,519 --> 00:14:30,000
to it which using the same vulnerability

397
00:14:30,000 --> 00:14:32,399
you can start an activity to request the

398
00:14:32,399 --> 00:14:34,800
home screen or the launcher to remove

399
00:14:34,800 --> 00:14:37,279
whatever lingering activity

400
00:14:37,279 --> 00:14:38,800
was present

401
00:14:38,800 --> 00:14:41,440
so this vulnerability has uh at the time

402
00:14:41,440 --> 00:14:42,800
of disclosure

403
00:14:42,800 --> 00:14:46,800
which was november 25th 2021 to samsung

404
00:14:46,800 --> 00:14:50,560
was present in android 12 android 11

405
00:14:50,560 --> 00:14:52,160
android 10

406
00:14:52,160 --> 00:14:55,279
and also android 9. which android 9 the

407
00:14:55,279 --> 00:14:58,000
vulnerability is slightly different it

408
00:14:58,000 --> 00:15:00,079
still uses the same

409
00:15:00,079 --> 00:15:02,160
insecure broadcast receiver with the

410
00:15:02,160 --> 00:15:05,120
same action string although in android 9

411
00:15:05,120 --> 00:15:06,880
instead of starting arbitrary

412
00:15:06,880 --> 00:15:08,959
application components

413
00:15:08,959 --> 00:15:10,160
it will

414
00:15:10,160 --> 00:15:11,040
send

415
00:15:11,040 --> 00:15:12,959
broadcast intent so the attack surface

416
00:15:12,959 --> 00:15:16,639
is different so on um 10 to 12

417
00:15:16,639 --> 00:15:19,360
it the attack surface is activity

418
00:15:19,360 --> 00:15:21,600
application components and on 9 it's

419
00:15:21,600 --> 00:15:23,199
broadcast receiver

420
00:15:23,199 --> 00:15:24,839
components so

421
00:15:24,839 --> 00:15:27,120
using uh it's essentially done in the

422
00:15:27,120 --> 00:15:29,360
same way where it extracts the intent

423
00:15:29,360 --> 00:15:31,920
and then it will broadcast it so using

424
00:15:31,920 --> 00:15:33,120
this you can use the extensive

425
00:15:33,120 --> 00:15:34,880
permissions of the telecom app you can

426
00:15:34,880 --> 00:15:36,160
also send

427
00:15:36,160 --> 00:15:38,240
broadcast intents which are protected

428
00:15:38,240 --> 00:15:40,720
broadcasts and broadcast receivers don't

429
00:15:40,720 --> 00:15:42,160
have a gui component so this is going to

430
00:15:42,160 --> 00:15:44,399
be done in the background and at the

431
00:15:44,399 --> 00:15:46,880
bottom is a poc code example to

432
00:15:46,880 --> 00:15:50,560
programmatically wipe the device

433
00:15:51,759 --> 00:15:54,880
so here on android

434
00:15:54,880 --> 00:15:56,320
10 to 12

435
00:15:56,320 --> 00:15:59,600
we provide some concrete use cases

436
00:15:59,600 --> 00:16:00,639
which

437
00:16:00,639 --> 00:16:02,720
on the left shows the capability what we

438
00:16:02,720 --> 00:16:04,880
were able to do and since this is being

439
00:16:04,880 --> 00:16:08,240
done through the telecom app which has

440
00:16:08,240 --> 00:16:10,079
the requisite permissions to perform

441
00:16:10,079 --> 00:16:12,079
these behaviors

442
00:16:12,079 --> 00:16:14,240
we you know our local application that's

443
00:16:14,240 --> 00:16:16,639
malicious does not so for each of those

444
00:16:16,639 --> 00:16:18,720
capabilities we also show the permission

445
00:16:18,720 --> 00:16:21,519
that was bypassed

446
00:16:21,519 --> 00:16:24,240
so the all of the permissions except for

447
00:16:24,240 --> 00:16:28,160
call phone are only available to

448
00:16:28,160 --> 00:16:30,399
uh pre-installed applications which call

449
00:16:30,399 --> 00:16:31,600
phone that's a dangerous level

450
00:16:31,600 --> 00:16:33,040
permission which

451
00:16:33,040 --> 00:16:33,839
will

452
00:16:33,839 --> 00:16:35,759
have to rely on the user to grant to an

453
00:16:35,759 --> 00:16:37,279
application

454
00:16:37,279 --> 00:16:38,959
there's also additional unexplored

455
00:16:38,959 --> 00:16:40,959
capabilities we

456
00:16:40,959 --> 00:16:43,199
provided some but there's the attack

457
00:16:43,199 --> 00:16:45,600
surface is pretty great just all the

458
00:16:45,600 --> 00:16:46,959
different

459
00:16:46,959 --> 00:16:49,199
activity components which are accessible

460
00:16:49,199 --> 00:16:51,839
to the telecom app

461
00:16:51,839 --> 00:16:54,079
so one of the capabilities is installing

462
00:16:54,079 --> 00:16:56,000
an uninstalling app so there's a few

463
00:16:56,000 --> 00:16:57,600
things that you may want to do so

464
00:16:57,600 --> 00:16:59,680
installing an app

465
00:16:59,680 --> 00:17:01,120
you can start with an app that has no

466
00:17:01,120 --> 00:17:02,880
permissions and then install an app

467
00:17:02,880 --> 00:17:04,799
which requests that you have embedded

468
00:17:04,799 --> 00:17:06,959
within the malicious app which requests

469
00:17:06,959 --> 00:17:08,559
all permissions that are normal level

470
00:17:08,559 --> 00:17:11,199
which are granted to an application at

471
00:17:11,199 --> 00:17:13,679
install time on certain android devices

472
00:17:13,679 --> 00:17:14,959
we've seen

473
00:17:14,959 --> 00:17:17,760
some capabilities be pre-granted to

474
00:17:17,760 --> 00:17:20,079
package names which are not present

475
00:17:20,079 --> 00:17:21,599
where it will only consider the package

476
00:17:21,599 --> 00:17:22,720
name and not actually look at the

477
00:17:22,720 --> 00:17:24,880
signature which obviously is indeed

478
00:17:24,880 --> 00:17:26,720
insecure and doesn't really provide any

479
00:17:26,720 --> 00:17:28,079
authentication

480
00:17:28,079 --> 00:17:29,120
at all

481
00:17:29,120 --> 00:17:30,480
so that can be

482
00:17:30,480 --> 00:17:32,960
if taken advantage of just by installing

483
00:17:32,960 --> 00:17:34,799
an application with a

484
00:17:34,799 --> 00:17:37,120
given package name and you can also

485
00:17:37,120 --> 00:17:38,880
install

486
00:17:38,880 --> 00:17:40,960
applications with a lower target sdk

487
00:17:40,960 --> 00:17:42,559
level which

488
00:17:42,559 --> 00:17:44,960
the may have greater

489
00:17:44,960 --> 00:17:46,640
ability

490
00:17:46,640 --> 00:17:48,640
to perform certain actions based on

491
00:17:48,640 --> 00:17:50,559
backwards compatibility

492
00:17:50,559 --> 00:17:52,960
so for uninstalling apps you could do

493
00:17:52,960 --> 00:17:55,520
this to weaken system security by you

494
00:17:55,520 --> 00:17:58,000
know any av application or any

495
00:17:58,000 --> 00:17:59,520
applications that are performing health

496
00:17:59,520 --> 00:18:01,520
checks you could remove those assuming

497
00:18:01,520 --> 00:18:03,360
they're a third-party application if

498
00:18:03,360 --> 00:18:05,120
there is has been a

499
00:18:05,120 --> 00:18:08,559
an update to a pre-installed system app

500
00:18:08,559 --> 00:18:11,120
you could uninstall the update which may

501
00:18:11,120 --> 00:18:13,039
you know regress it and cause a

502
00:18:13,039 --> 00:18:15,280
vulnerability that was patched to be

503
00:18:15,280 --> 00:18:17,520
unpatched and if there is a third party

504
00:18:17,520 --> 00:18:19,360
screen lock application you could remove

505
00:18:19,360 --> 00:18:21,919
that to get access to the device and

506
00:18:21,919 --> 00:18:24,000
then using both the uninstall and

507
00:18:24,000 --> 00:18:27,039
install capabilities you could uninstall

508
00:18:27,039 --> 00:18:29,520
an application that the user has say

509
00:18:29,520 --> 00:18:31,760
whatsapp and then

510
00:18:31,760 --> 00:18:33,919
install a version which is repackaged

511
00:18:33,919 --> 00:18:36,400
which is malicious and leaks

512
00:18:36,400 --> 00:18:40,160
or obtains a user's credentials and also

513
00:18:40,160 --> 00:18:42,160
steals data

514
00:18:42,160 --> 00:18:44,880
so here is the code to

515
00:18:44,880 --> 00:18:47,679
uninstall arbitrary applications the

516
00:18:47,679 --> 00:18:50,400
target application or activity component

517
00:18:50,400 --> 00:18:52,240
is not exported it's

518
00:18:52,240 --> 00:18:54,799
in the standard package installer

519
00:18:54,799 --> 00:18:57,120
and the activity name is called

520
00:18:57,120 --> 00:19:00,160
uninstall uninstalling so here it's

521
00:19:00,160 --> 00:19:02,320
going to

522
00:19:02,320 --> 00:19:04,640
uninstall a screen

523
00:19:04,640 --> 00:19:06,559
uh or a third-party screen lock

524
00:19:06,559 --> 00:19:08,880
application which is in blue so

525
00:19:08,880 --> 00:19:12,320
just uninstall it when you provide the

526
00:19:12,320 --> 00:19:14,480
data that uninstall uninstalling

527
00:19:14,480 --> 00:19:17,679
activity is expecting uh the

528
00:19:17,679 --> 00:19:19,440
behavior of it is to essentially just

529
00:19:19,440 --> 00:19:21,120
programmatically uninstall

530
00:19:21,120 --> 00:19:23,520
uh an application you can also call

531
00:19:23,520 --> 00:19:25,600
arbitrary phone numbers so here you

532
00:19:25,600 --> 00:19:27,919
provide a uri and some of the action

533
00:19:27,919 --> 00:19:30,240
strings are call which is for placing

534
00:19:30,240 --> 00:19:31,919
normal phone calls as well as call

535
00:19:31,919 --> 00:19:34,559
privileged which is for emergency

536
00:19:34,559 --> 00:19:37,039
numbers and the code example there is to

537
00:19:37,039 --> 00:19:39,760
call 999 which is the emergency police

538
00:19:39,760 --> 00:19:41,280
number in singapore

539
00:19:41,280 --> 00:19:43,600
and

540
00:19:43,600 --> 00:19:46,400
the screenshot on the right is for

541
00:19:46,400 --> 00:19:49,360
calling 911. so here we have

542
00:19:49,360 --> 00:19:50,840
a

543
00:19:50,840 --> 00:19:55,679
video where there's a application that's

544
00:19:55,679 --> 00:19:57,840
co-located on the device

545
00:19:57,840 --> 00:19:58,880
and

546
00:19:58,880 --> 00:20:00,240
it's going to

547
00:20:00,240 --> 00:20:04,760
programmatically initiate a phone call

548
00:20:12,799 --> 00:20:15,840
and they're going to

549
00:20:15,840 --> 00:20:20,960
pick up and i'm going to exit the call

550
00:20:20,960 --> 00:20:22,880
next is calling

551
00:20:22,880 --> 00:20:25,280
emergency phone numbers so this the

552
00:20:25,280 --> 00:20:27,360
co-located application is going to call

553
00:20:27,360 --> 00:20:28,799
9-1-1

554
00:20:28,799 --> 00:20:31,120
which you need to hang up pretty quickly

555
00:20:31,120 --> 00:20:33,120
on that one

556
00:20:33,120 --> 00:20:35,200
and for installing arbitrary

557
00:20:35,200 --> 00:20:37,679
applications this co-located app the poc

558
00:20:37,679 --> 00:20:41,039
app there is going to install a terminal

559
00:20:41,039 --> 00:20:42,400
um

560
00:20:42,400 --> 00:20:44,880
emulator application and then dismiss

561
00:20:44,880 --> 00:20:47,120
the activity that was left there's the

562
00:20:47,120 --> 00:20:49,200
lock screen application it can just

563
00:20:49,200 --> 00:20:51,280
uninstall the application

564
00:20:51,280 --> 00:20:53,120
any third-party application that is

565
00:20:53,120 --> 00:20:55,440
present there it also has the capability

566
00:20:55,440 --> 00:20:58,640
to spoof arbitrary apps so here is the

567
00:20:58,640 --> 00:21:01,440
legit facebook application

568
00:21:01,440 --> 00:21:03,360
so just showing the gui it's going to

569
00:21:03,360 --> 00:21:06,720
uninstall it and then install a

570
00:21:06,720 --> 00:21:08,799
fake version with the same package name

571
00:21:08,799 --> 00:21:10,159
and icon

572
00:21:10,159 --> 00:21:11,919
and application name

573
00:21:11,919 --> 00:21:13,760
and here just showing you know that we

574
00:21:13,760 --> 00:21:16,000
can control that application and then

575
00:21:16,000 --> 00:21:17,200
also uh

576
00:21:17,200 --> 00:21:19,039
you can programmatically install a

577
00:21:19,039 --> 00:21:20,640
certificate authority so here's just a

578
00:21:20,640 --> 00:21:23,039
screen showing um

579
00:21:23,039 --> 00:21:24,320
you know we installed the men in the

580
00:21:24,320 --> 00:21:26,960
middle proxy root certificate authority

581
00:21:26,960 --> 00:21:29,600
which you know undermines

582
00:21:29,600 --> 00:21:32,559
tls and ssl which is used extensively in

583
00:21:32,559 --> 00:21:35,280
https here is

584
00:21:35,280 --> 00:21:37,840
performing a programmatic factory reset

585
00:21:37,840 --> 00:21:40,320
so just running the application

586
00:21:40,320 --> 00:21:43,440
it sends the this is on android 9 the

587
00:21:43,440 --> 00:21:46,799
factory reset action string which is

588
00:21:46,799 --> 00:21:50,879
then received by the android system

589
00:21:51,679 --> 00:21:53,440
and it's going to boot into recovery

590
00:21:53,440 --> 00:21:55,440
mode and then it's going to erase the

591
00:21:55,440 --> 00:21:58,640
data partition which contains the user's

592
00:21:58,640 --> 00:22:00,720
installed applications as well as all

593
00:22:00,720 --> 00:22:03,679
application data

594
00:22:11,039 --> 00:22:13,039
so we've talked about uh intent

595
00:22:13,039 --> 00:22:15,520
injection uh so some of the defenses

596
00:22:15,520 --> 00:22:17,840
where there are these activities which

597
00:22:17,840 --> 00:22:19,840
when started are going to perform a

598
00:22:19,840 --> 00:22:21,760
privileged action

599
00:22:21,760 --> 00:22:23,840
and for some of these say like wiping

600
00:22:23,840 --> 00:22:25,120
the device

601
00:22:25,120 --> 00:22:27,039
or installing a certificate authority

602
00:22:27,039 --> 00:22:29,360
you could put the user in the loop where

603
00:22:29,360 --> 00:22:31,120
you know it provides a dialogue where

604
00:22:31,120 --> 00:22:33,200
the user can either reject or accept

605
00:22:33,200 --> 00:22:35,760
this action instead of being performed

606
00:22:35,760 --> 00:22:37,200
programmatically

607
00:22:37,200 --> 00:22:39,200
there's a class in android called

608
00:22:39,200 --> 00:22:40,720
pending intent

609
00:22:40,720 --> 00:22:42,799
which uh

610
00:22:42,799 --> 00:22:45,200
once you create a pending intent the

611
00:22:45,200 --> 00:22:47,280
application that creates it can create

612
00:22:47,280 --> 00:22:49,919
an intent pass it to another application

613
00:22:49,919 --> 00:22:52,000
and then once that pending intent is

614
00:22:52,000 --> 00:22:54,559
sent it's going to be sent within the

615
00:22:54,559 --> 00:22:56,640
context of the application that created

616
00:22:56,640 --> 00:22:58,640
it and not the application that sent it

617
00:22:58,640 --> 00:23:00,240
so you can maintain

618
00:23:00,240 --> 00:23:03,840
um the the context of the application

619
00:23:03,840 --> 00:23:07,520
that created it instead of just the last

620
00:23:07,520 --> 00:23:09,120
application in

621
00:23:09,120 --> 00:23:11,679
a chain that happens to send an intent

622
00:23:11,679 --> 00:23:14,080
and if pending intent objects can be

623
00:23:14,080 --> 00:23:16,159
can't be used you can at least perform

624
00:23:16,159 --> 00:23:18,320
some filtering maybe you can put in

625
00:23:18,320 --> 00:23:20,159
a explicit

626
00:23:20,159 --> 00:23:22,559
application component destination or at

627
00:23:22,559 --> 00:23:24,559
least filter based on action strings and

628
00:23:24,559 --> 00:23:26,480
not have it be completely open to

629
00:23:26,480 --> 00:23:27,679
performing

630
00:23:27,679 --> 00:23:29,440
any um

631
00:23:29,440 --> 00:23:31,280
sending any

632
00:23:31,280 --> 00:23:33,600
uh intent

633
00:23:33,600 --> 00:23:35,919
so here is the timeline it was reported

634
00:23:35,919 --> 00:23:38,720
on november 25th to samsung

635
00:23:38,720 --> 00:23:40,640
two days later they acknowledged the

636
00:23:40,640 --> 00:23:41,840
submission

637
00:23:41,840 --> 00:23:44,320
and about two weeks later they confirmed

638
00:23:44,320 --> 00:23:46,480
the vulnerability and then rated it as

639
00:23:46,480 --> 00:23:48,320
high severity

640
00:23:48,320 --> 00:23:51,600
then on december 30th they reserved a

641
00:23:51,600 --> 00:23:53,360
cve

642
00:23:53,360 --> 00:23:56,799
and on february 7th they initiated uh

643
00:23:56,799 --> 00:23:59,679
bug bounty uh 4 300

644
00:23:59,679 --> 00:24:02,880
through bug crowd and february 11th the

645
00:24:02,880 --> 00:24:04,720
cve on the national vulnerability

646
00:24:04,720 --> 00:24:06,880
database became public

647
00:24:06,880 --> 00:24:08,640
and samsung wrote about this

648
00:24:08,640 --> 00:24:12,320
vulnerability in their february 2022

649
00:24:12,320 --> 00:24:15,279
security bulletin

650
00:24:15,279 --> 00:24:16,720
and

651
00:24:16,720 --> 00:24:19,360
to conclude so

652
00:24:19,360 --> 00:24:20,960
you would want to use some defense

653
00:24:20,960 --> 00:24:22,880
in-depth principle and kind of assume

654
00:24:22,880 --> 00:24:24,720
that you know even if you do have this

655
00:24:24,720 --> 00:24:27,120
activity which is not exported and is

656
00:24:27,120 --> 00:24:29,120
protected by permission that you know

657
00:24:29,120 --> 00:24:32,000
maybe there is some vulnerability which

658
00:24:32,000 --> 00:24:34,320
a local or remote actor could exploit to

659
00:24:34,320 --> 00:24:36,480
actually start this activity which like

660
00:24:36,480 --> 00:24:39,200
in this case we see it can be exploited

661
00:24:39,200 --> 00:24:41,600
locally so

662
00:24:41,600 --> 00:24:42,640
one way

663
00:24:42,640 --> 00:24:44,799
to at least put the user in the loop is

664
00:24:44,799 --> 00:24:45,520
to

665
00:24:45,520 --> 00:24:47,120
you know for some of these privileged

666
00:24:47,120 --> 00:24:49,919
jackson actions rely on the user to

667
00:24:49,919 --> 00:24:51,440
either

668
00:24:51,440 --> 00:24:53,520
confirm or deny this action from

669
00:24:53,520 --> 00:24:55,039
proceeding

670
00:24:55,039 --> 00:24:58,080
and in general in android you any

671
00:24:58,080 --> 00:24:59,200
application

672
00:24:59,200 --> 00:25:01,039
component interfaces you want to

673
00:25:01,039 --> 00:25:02,320
exercise

674
00:25:02,320 --> 00:25:03,919
proper access control whether they're

675
00:25:03,919 --> 00:25:05,760
exported or not

676
00:25:05,760 --> 00:25:08,480
and where possible you should prefer

677
00:25:08,480 --> 00:25:10,640
pending intent objects over

678
00:25:10,640 --> 00:25:12,640
intent objects just because that

679
00:25:12,640 --> 00:25:14,720
diminishes

680
00:25:14,720 --> 00:25:17,760
the effectiveness of intent injection

681
00:25:17,760 --> 00:25:20,400
and privileged pre-insult software

682
00:25:20,400 --> 00:25:23,120
requires security vetting just because

683
00:25:23,120 --> 00:25:25,120
it runs at such a high privilege level

684
00:25:25,120 --> 00:25:27,919
it can have a an adverse effect on the

685
00:25:27,919 --> 00:25:29,120
end user

686
00:25:29,120 --> 00:25:32,559
if the vulnerability is discovered

687
00:25:32,559 --> 00:25:33,679
and

688
00:25:33,679 --> 00:25:35,760
that concludes

689
00:25:35,760 --> 00:25:37,120
the talk

690
00:25:37,120 --> 00:25:41,039
i'd like to thank you for attending and

691
00:25:41,039 --> 00:25:43,679
if anybody has any questions

692
00:25:43,679 --> 00:25:47,000
thank you everyone

693
00:25:47,080 --> 00:25:50,149
[Music]

694
00:25:53,990 --> 00:25:57,079
[Music]

