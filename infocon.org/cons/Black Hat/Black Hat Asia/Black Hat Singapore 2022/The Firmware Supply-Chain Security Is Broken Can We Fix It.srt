1
00:00:01,740 --> 00:00:04,810
[Music]

2
00:00:08,160 --> 00:00:10,160
hello everyone and good morning

3
00:00:10,160 --> 00:00:13,040
singapore uh it's a pleasure to be on

4
00:00:13,040 --> 00:00:15,040
this stage and today we are talking

5
00:00:15,040 --> 00:00:17,279
about the topic of firmware supply chain

6
00:00:17,279 --> 00:00:20,000
security and it is actually broken but

7
00:00:20,000 --> 00:00:23,760
the question is can we fix it or not so

8
00:00:23,760 --> 00:00:28,320
um i'm alex matrozov and uh

9
00:00:28,320 --> 00:00:32,479
i'm a ceo and founder of binary so we

10
00:00:32,479 --> 00:00:34,640
are doing a lot of firmware security

11
00:00:34,640 --> 00:00:37,600
research and uh with me uh on this

12
00:00:37,600 --> 00:00:40,160
research committed uh alexis

13
00:00:40,160 --> 00:00:42,399
he is principal security researcher at

14
00:00:42,399 --> 00:00:44,160
binary and he's doing a lot of

15
00:00:44,160 --> 00:00:45,840
vulnerability research in firmware

16
00:00:45,840 --> 00:00:49,280
hardware and all shades of devices

17
00:00:49,280 --> 00:00:51,280
and my name is richard hughes i'm a

18
00:00:51,280 --> 00:00:53,360
principal engineer at red hat and i'm

19
00:00:53,360 --> 00:00:58,320
the maintainer of fwfd and the ldfs

20
00:00:58,320 --> 00:01:00,320
and i'm karmichaelis i'm the cto of

21
00:01:00,320 --> 00:01:02,559
immune and i care about all things

22
00:01:02,559 --> 00:01:06,640
firmware and cryptography related

23
00:01:07,280 --> 00:01:09,920
so the firmware and halfway supply chain

24
00:01:09,920 --> 00:01:12,560
what's all about

25
00:01:12,560 --> 00:01:14,720
uh so before we start off um for the

26
00:01:14,720 --> 00:01:16,159
purpose of this talk where we talk about

27
00:01:16,159 --> 00:01:17,759
firmware we're talking about everything

28
00:01:17,759 --> 00:01:20,400
that comes with your x86 based server or

29
00:01:20,400 --> 00:01:21,680
laptop system

30
00:01:21,680 --> 00:01:24,400
um and of course everything this means

31
00:01:24,400 --> 00:01:26,799
of course the ufi the bios firmware

32
00:01:26,799 --> 00:01:27,520
right

33
00:01:27,520 --> 00:01:29,040
but if you have a server you have at

34
00:01:29,040 --> 00:01:31,119
least a bmc firmware on there there's

35
00:01:31,119 --> 00:01:33,040
whole operating system in there

36
00:01:33,040 --> 00:01:34,320
you of course have the source bridge

37
00:01:34,320 --> 00:01:36,880
that runs the dreaded me

38
00:01:36,880 --> 00:01:39,200
or if you have an amd system the psp and

39
00:01:39,200 --> 00:01:41,280
you have extension cards like pcr cards

40
00:01:41,280 --> 00:01:44,720
that come with all their own firmware

41
00:01:46,159 --> 00:01:49,360
so um which begs the question who builds

42
00:01:49,360 --> 00:01:51,680
out this formula and something is

43
00:01:51,680 --> 00:01:53,200
actually built by the soc banners

44
00:01:53,200 --> 00:01:55,680
themselves like intel and amd um some of

45
00:01:55,680 --> 00:01:57,360
that is just binary blobs that are

46
00:01:57,360 --> 00:01:59,119
signed and can be inspected or really

47
00:01:59,119 --> 00:02:01,280
changed um but some of it is actually

48
00:02:01,280 --> 00:02:03,040
open source right so the

49
00:02:03,040 --> 00:02:05,360
reference implementation of ufi tia core

50
00:02:05,360 --> 00:02:07,520
is actually open source

51
00:02:07,520 --> 00:02:10,080
is only a really small part um and these

52
00:02:10,080 --> 00:02:12,160
these artifacts that are generated by

53
00:02:12,160 --> 00:02:14,959
the soc vendors are then consumed

54
00:02:14,959 --> 00:02:16,959
by the independent bias vendors who are

55
00:02:16,959 --> 00:02:19,360
actually only pure software vendors on

56
00:02:19,360 --> 00:02:21,920
this on this whole chart um and they

57
00:02:21,920 --> 00:02:23,200
take that combined with their own

58
00:02:23,200 --> 00:02:25,520
proprietary code and produce bios

59
00:02:25,520 --> 00:02:26,879
firmware right

60
00:02:26,879 --> 00:02:29,280
and this is then shipped to the oems or

61
00:02:29,280 --> 00:02:30,640
the oems

62
00:02:30,640 --> 00:02:32,080
that will combine with our firmware from

63
00:02:32,080 --> 00:02:34,080
other vendors and flashes from the

64
00:02:34,080 --> 00:02:37,840
system and ship it to you

65
00:02:37,840 --> 00:02:39,599
um the problem is that when we look at

66
00:02:39,599 --> 00:02:41,519
the supply chain for that firmware it's

67
00:02:41,519 --> 00:02:44,239
not as easy as a linear chart

68
00:02:44,239 --> 00:02:46,400
because the oems have different

69
00:02:46,400 --> 00:02:48,959
suppliers for example the bmc maybe

70
00:02:48,959 --> 00:02:50,959
comes from a different supplier maybe of

71
00:02:50,959 --> 00:02:52,480
other cards on there they have their own

72
00:02:52,480 --> 00:02:54,879
firmware right um so we have a tree of

73
00:02:54,879 --> 00:02:56,959
firmware that's flowing to the oem

74
00:02:56,959 --> 00:02:59,680
um and the problem is uh that not only

75
00:02:59,680 --> 00:03:01,519
the firmware is flowing downstream to

76
00:03:01,519 --> 00:03:03,360
the om so does the updates for that

77
00:03:03,360 --> 00:03:05,440
firmware right so if you have a bug you

78
00:03:05,440 --> 00:03:07,840
have to approach one of these suppliers

79
00:03:07,840 --> 00:03:09,440
um convince them this is actual problem

80
00:03:09,440 --> 00:03:11,680
right they have to fix um they ship an

81
00:03:11,680 --> 00:03:13,760
update and this has to be then consumed

82
00:03:13,760 --> 00:03:16,480
by the oem package into a new update and

83
00:03:16,480 --> 00:03:19,760
then shipped to user

84
00:03:19,760 --> 00:03:21,680
um so this creates a lot of problems

85
00:03:21,680 --> 00:03:22,400
right

86
00:03:22,400 --> 00:03:24,239
first the slack in the system right the

87
00:03:24,239 --> 00:03:26,080
time it takes for an update to flow

88
00:03:26,080 --> 00:03:28,000
downstream to an actual consumer uh

89
00:03:28,000 --> 00:03:30,319
takes a long time right um

90
00:03:30,319 --> 00:03:32,239
can be measured in months to years uh

91
00:03:32,239 --> 00:03:34,400
until the update is actually reaching

92
00:03:34,400 --> 00:03:36,239
the user so it's a so he's able to

93
00:03:36,239 --> 00:03:39,120
install that right um there's also no

94
00:03:39,120 --> 00:03:40,400
not much coordination between these

95
00:03:40,400 --> 00:03:42,400
vendors right there's no like

96
00:03:42,400 --> 00:03:43,840
coordinated patch cycles or anything

97
00:03:43,840 --> 00:03:44,720
like that

98
00:03:44,720 --> 00:03:45,840
they push the updates they have

99
00:03:45,840 --> 00:03:47,280
sometimes not even

100
00:03:47,280 --> 00:03:48,640
really um

101
00:03:48,640 --> 00:03:50,560
inform the downstream consumers right so

102
00:03:50,560 --> 00:03:51,840
sometimes things are just slightly

103
00:03:51,840 --> 00:03:52,720
patched

104
00:03:52,720 --> 00:03:54,560
um so there's a large problem this is a

105
00:03:54,560 --> 00:03:56,879
big problem and i mean consumers also

106
00:03:56,879 --> 00:03:58,480
have to install it up right in

107
00:03:58,480 --> 00:03:59,920
installing firmware update for example

108
00:03:59,920 --> 00:04:02,239
on scale on linux systems uh can be

109
00:04:02,239 --> 00:04:05,120
quite challenging

110
00:04:05,120 --> 00:04:06,799
um so what do we mean with this

111
00:04:06,799 --> 00:04:08,959
complexity here right so uh we have to

112
00:04:08,959 --> 00:04:11,519
have this little example here um so

113
00:04:11,519 --> 00:04:13,599
let's say we have availability in in one

114
00:04:13,599 --> 00:04:15,599
of these components right and

115
00:04:15,599 --> 00:04:18,160
vulnerability um that maybe when we look

116
00:04:18,160 --> 00:04:20,160
at it in isolation isn't really

117
00:04:20,160 --> 00:04:22,079
exploitable for example it allows us to

118
00:04:22,079 --> 00:04:24,400
bypass secure boot but the code in order

119
00:04:24,400 --> 00:04:26,400
to bypass it that's vulnerable isn't

120
00:04:26,400 --> 00:04:28,160
really reachable right that code can

121
00:04:28,160 --> 00:04:30,800
breach as a normal process so the vendor

122
00:04:30,800 --> 00:04:32,960
decides assessing your vulnerability

123
00:04:32,960 --> 00:04:34,720
that is not a risk and it's not patched

124
00:04:34,720 --> 00:04:36,880
right

125
00:04:37,120 --> 00:04:40,000
so this only means that we just need

126
00:04:40,000 --> 00:04:42,240
another bug somewhere else in the supply

127
00:04:42,240 --> 00:04:44,400
chain a completely different vendor um

128
00:04:44,400 --> 00:04:45,919
that does completely different thing but

129
00:04:45,919 --> 00:04:47,840
because all of these this code is

130
00:04:47,840 --> 00:04:50,400
combined and for example ufi um and runs

131
00:04:50,400 --> 00:04:52,000
in the same security context more or

132
00:04:52,000 --> 00:04:53,919
less and it means that i can can use

133
00:04:53,919 --> 00:04:56,160
another vulnerability that again in

134
00:04:56,160 --> 00:04:57,759
isolation looks nine

135
00:04:57,759 --> 00:04:59,840
maybe allows me to reach certain code

136
00:04:59,840 --> 00:05:01,199
that's normally not reachable but it's

137
00:05:01,199 --> 00:05:03,440
all shipped with dfi so there's not much

138
00:05:03,440 --> 00:05:05,600
of a problem but again if i combine

139
00:05:05,600 --> 00:05:06,720
these two

140
00:05:06,720 --> 00:05:08,560
um i can see as you can see on the next

141
00:05:08,560 --> 00:05:10,320
slide

142
00:05:10,320 --> 00:05:12,000
i get an actual vulnerability that can

143
00:05:12,000 --> 00:05:14,800
exploit it right at the consumer and

144
00:05:14,800 --> 00:05:16,639
it doesn't even necessarily mean that

145
00:05:16,639 --> 00:05:18,720
this vulnerability is out there and

146
00:05:18,720 --> 00:05:20,960
ignored right the dna vulnerability

147
00:05:20,960 --> 00:05:22,800
maybe there's already a patch out there

148
00:05:22,800 --> 00:05:24,639
but because of the the slack in the

149
00:05:24,639 --> 00:05:26,000
supply chain the time it takes for an

150
00:05:26,000 --> 00:05:27,840
update to throw downstream

151
00:05:27,840 --> 00:05:29,440
i can as an attacker

152
00:05:29,440 --> 00:05:30,880
find another vulnerability and exploit

153
00:05:30,880 --> 00:05:34,400
it before the update reaches the user

154
00:05:34,639 --> 00:05:36,000
so this is the problem here

155
00:05:36,000 --> 00:05:37,600
vulnerabilities are assessed in

156
00:05:37,600 --> 00:05:39,120
isolation because vendors don't talk to

157
00:05:39,120 --> 00:05:40,320
each other

158
00:05:40,320 --> 00:05:42,000
and vulnerabilities have an extremely

159
00:05:42,000 --> 00:05:43,680
long lifetime right because vendors

160
00:05:43,680 --> 00:05:46,479
either are unable to push patches fast

161
00:05:46,479 --> 00:05:48,639
or are completely unwilling to patch

162
00:05:48,639 --> 00:05:50,000
because they say okay this is on live

163
00:05:50,000 --> 00:05:52,000
life we don't support the system anymore

164
00:05:52,000 --> 00:05:53,520
and security patches are part of the

165
00:05:53,520 --> 00:05:56,240
support package

166
00:05:56,800 --> 00:05:58,800
um so why do we care about security and

167
00:05:58,800 --> 00:06:01,120
firmware so much um the problem is that

168
00:06:01,120 --> 00:06:03,199
security is the chain right and and

169
00:06:03,199 --> 00:06:05,120
these these operating system based

170
00:06:05,120 --> 00:06:07,039
security mechanisms they all are based

171
00:06:07,039 --> 00:06:09,039
on a working ufc keyboard or working as

172
00:06:09,039 --> 00:06:12,080
a secured snm code um and again that

173
00:06:12,080 --> 00:06:13,600
depends on a working platform

174
00:06:13,600 --> 00:06:15,520
protections like boot card so if i'm

175
00:06:15,520 --> 00:06:17,440
able to attack the firmware i'm able to

176
00:06:17,440 --> 00:06:18,880
take everything after that like

177
00:06:18,880 --> 00:06:20,560
everything after that breaks

178
00:06:20,560 --> 00:06:21,919
and everything after includes the

179
00:06:21,919 --> 00:06:23,440
operating system right the thing that we

180
00:06:23,440 --> 00:06:26,400
already actually want to protect

181
00:06:27,280 --> 00:06:29,440
um so before we go into super detail how

182
00:06:29,440 --> 00:06:31,520
these bugs look like right and how

183
00:06:31,520 --> 00:06:34,400
vendors um actually responds to bucks um

184
00:06:34,400 --> 00:06:36,479
let's let's look at what we can do to

185
00:06:36,479 --> 00:06:39,199
fix that right um so we have to educate

186
00:06:39,199 --> 00:06:40,880
vendors about security right so we have

187
00:06:40,880 --> 00:06:42,639
to explain to them okay security is not

188
00:06:42,639 --> 00:06:44,720
a matter matter of whether the system is

189
00:06:44,720 --> 00:06:46,400
supported but you have to always push

190
00:06:46,400 --> 00:06:48,560
these security updates um you have to

191
00:06:48,560 --> 00:06:50,000
decrease the turnaround times the slack

192
00:06:50,000 --> 00:06:51,440
in the system has to be

193
00:06:51,440 --> 00:06:53,680
decreased um so we get from months to

194
00:06:53,680 --> 00:06:55,919
maybe weeks to maybe days

195
00:06:55,919 --> 00:06:58,160
until we can actually instant update um

196
00:06:58,160 --> 00:06:59,759
we have to increase the transparency we

197
00:06:59,759 --> 00:07:02,400
need more centralization right i have to

198
00:07:02,400 --> 00:07:04,240
find and have a centralized repository i

199
00:07:04,240 --> 00:07:06,160
can say okay for this piece of hardware

200
00:07:06,160 --> 00:07:07,599
what patches are available right and how

201
00:07:07,599 --> 00:07:09,360
do i install them easily

202
00:07:09,360 --> 00:07:11,919
um and in more long term i we probably

203
00:07:11,919 --> 00:07:14,240
want more open source here um so we are

204
00:07:14,240 --> 00:07:16,639
less dependent on the vendors themselves

205
00:07:16,639 --> 00:07:18,160
and we can access the source code right

206
00:07:18,160 --> 00:07:21,120
we can fix our problems ourselves um and

207
00:07:21,120 --> 00:07:22,800
compile that and passion on our systems

208
00:07:22,800 --> 00:07:25,199
we're no longer dependent on the vendors

209
00:07:25,199 --> 00:07:26,960
and maybe we should think about how we

210
00:07:26,960 --> 00:07:28,840
build hardware and make it more

211
00:07:28,840 --> 00:07:31,759
inspectable um so we don't have to just

212
00:07:31,759 --> 00:07:34,240
rely on what we uh get shipped into a

213
00:07:34,240 --> 00:07:36,880
doorstep but we can also verify that the

214
00:07:36,880 --> 00:07:38,720
same we verify our software and i think

215
00:07:38,720 --> 00:07:40,560
the precursor project is a good example

216
00:07:40,560 --> 00:07:43,720
for that

217
00:07:47,120 --> 00:07:50,479
so um i will take over to uh firmware

218
00:07:50,479 --> 00:07:53,840
supply chain uh failures and before uh i

219
00:07:53,840 --> 00:07:55,919
will start actually kai did a great

220
00:07:55,919 --> 00:07:58,400
overview about supply chain problems and

221
00:07:58,400 --> 00:08:00,639
in general where it can be failed and

222
00:08:00,639 --> 00:08:03,360
how multiple uh vulnerabilities or

223
00:08:03,360 --> 00:08:05,520
vulnerable primitives can be combined in

224
00:08:05,520 --> 00:08:07,440
pretty suitable uh

225
00:08:07,440 --> 00:08:09,440
exploit chain

226
00:08:09,440 --> 00:08:12,560
but let's talk about uh repeatable

227
00:08:12,560 --> 00:08:15,199
failures and actually binary been

228
00:08:15,199 --> 00:08:17,680
discovering multiple vulnerabilities

229
00:08:17,680 --> 00:08:20,160
over the year and it's already disclosed

230
00:08:20,160 --> 00:08:23,280
uh 43 vulnerabilities uh with actually

231
00:08:23,280 --> 00:08:25,840
high severity vulnerabilities and most

232
00:08:25,840 --> 00:08:28,639
of them it is smm privilege escalation

233
00:08:28,639 --> 00:08:31,520
or memory corruption vulnerabilities and

234
00:08:31,520 --> 00:08:33,440
such types of and classes of

235
00:08:33,440 --> 00:08:35,679
vulnerabilities they've been discovered

236
00:08:35,679 --> 00:08:38,640
like early 2000s and still

237
00:08:38,640 --> 00:08:40,958
suitable in modern firmwares and as we

238
00:08:40,958 --> 00:08:42,958
can see they not go away and the

239
00:08:42,958 --> 00:08:44,880
exploitation of them maybe became a bit

240
00:08:44,880 --> 00:08:48,480
more complicated but not actually stop

241
00:08:48,480 --> 00:08:51,920
the attackers to steal finding such bugs

242
00:08:51,920 --> 00:08:55,600
and also i want to talk about another uh

243
00:08:55,600 --> 00:08:58,320
good thing it is intel initiative about

244
00:08:58,320 --> 00:09:00,720
uh bug bounty project circuit breaker

245
00:09:00,720 --> 00:09:03,120
and binary also been participating there

246
00:09:03,120 --> 00:09:06,480
uh 20 plus uh advisor has been submitted

247
00:09:06,480 --> 00:09:09,120
so we have some scoring like the widest

248
00:09:09,120 --> 00:09:12,000
impact for the binary fi export team and

249
00:09:12,000 --> 00:09:13,519
most eligible

250
00:09:13,519 --> 00:09:16,560
reports uh for our submissions

251
00:09:16,560 --> 00:09:18,160
but let's talk

252
00:09:18,160 --> 00:09:20,480
about actual vulnerabilities and where

253
00:09:20,480 --> 00:09:22,880
these failures are happening to be

254
00:09:22,880 --> 00:09:26,720
honest uh like sometimes even already

255
00:09:26,720 --> 00:09:30,000
known vulnerability can became a

256
00:09:30,000 --> 00:09:31,200
multiple

257
00:09:31,200 --> 00:09:34,240
iterations problem and as we can see one

258
00:09:34,240 --> 00:09:36,480
of perfect example for this repeatable

259
00:09:36,480 --> 00:09:39,440
failure it is usbrt component which is

260
00:09:39,440 --> 00:09:42,959
widely used on uh biases which has been

261
00:09:42,959 --> 00:09:44,800
developed on top of american mega

262
00:09:44,800 --> 00:09:47,440
transcode and it's not only desktop

263
00:09:47,440 --> 00:09:50,080
system or laptops it is a lot of servers

264
00:09:50,080 --> 00:09:52,959
using as well such code and

265
00:09:52,959 --> 00:09:54,959
as we can see the first time when it's

266
00:09:54,959 --> 00:09:56,720
publicly discovered it's the

267
00:09:56,720 --> 00:09:58,800
vulnerability in usbrt company and it's

268
00:09:58,800 --> 00:10:01,120
been 2016 but

269
00:10:01,120 --> 00:10:03,760
since that we still can find the

270
00:10:03,760 --> 00:10:07,200
vulnerabilities in this component and

271
00:10:07,200 --> 00:10:09,440
the reasoning why

272
00:10:09,440 --> 00:10:12,640
it is multiple

273
00:10:12,640 --> 00:10:15,600
components of this equation connected

274
00:10:15,600 --> 00:10:17,279
each other one of them it is a

275
00:10:17,279 --> 00:10:19,200
complexity of the code and to be honest

276
00:10:19,200 --> 00:10:20,959
it's hard to fix this code because

277
00:10:20,959 --> 00:10:22,880
actually the structure which is

278
00:10:22,880 --> 00:10:25,760
responsible for actually passing some of

279
00:10:25,760 --> 00:10:29,200
the data object from uh controlled by

280
00:10:29,200 --> 00:10:31,200
the attacker space

281
00:10:31,200 --> 00:10:34,959
to the smm driver is just very very big

282
00:10:34,959 --> 00:10:37,360
it is like a few screens

283
00:10:37,360 --> 00:10:40,640
of uh fields in this object and it's

284
00:10:40,640 --> 00:10:43,200
hard to protect and sanitize all of them

285
00:10:43,200 --> 00:10:45,839
and also the developer can always did a

286
00:10:45,839 --> 00:10:48,399
mistake when introducing new code but

287
00:10:48,399 --> 00:10:51,839
forget to uh copy copy and paste or

288
00:10:51,839 --> 00:10:54,240
develop like boundaries for this code or

289
00:10:54,240 --> 00:10:58,399
sanitization and it's create overall

290
00:10:58,399 --> 00:11:01,040
like repeatable failures and introducing

291
00:11:01,040 --> 00:11:03,120
like new and new vulnerabilities in the

292
00:11:03,120 --> 00:11:06,079
same component and it's just very hard

293
00:11:06,079 --> 00:11:09,279
to fix it uh we really recommend to just

294
00:11:09,279 --> 00:11:11,920
removing usbr key if you have in your

295
00:11:11,920 --> 00:11:14,640
bias or in your firmware

296
00:11:14,640 --> 00:11:16,880
if you are a device vendor because uh

297
00:11:16,880 --> 00:11:20,240
this open uh opening like a large attack

298
00:11:20,240 --> 00:11:23,000
surface and we've been talking about

299
00:11:23,000 --> 00:11:27,360
usbrt vulnerability and new uh

300
00:11:27,360 --> 00:11:29,200
iterations of the vulnerabilities we

301
00:11:29,200 --> 00:11:31,200
found on uh

302
00:11:31,200 --> 00:11:32,399
our

303
00:11:32,399 --> 00:11:34,160
offensive contact and we also

304
00:11:34,160 --> 00:11:38,720
demonstrated uh first our first publicly

305
00:11:38,720 --> 00:11:42,320
known rop technique against smm it's

306
00:11:42,320 --> 00:11:44,880
demo available in internet on our

307
00:11:44,880 --> 00:11:47,519
youtube channel but basically the thing

308
00:11:47,519 --> 00:11:50,079
is uh it can

309
00:11:50,079 --> 00:11:52,800
generically bypass such mitigations as

310
00:11:52,800 --> 00:11:56,560
smm code check and many others

311
00:11:56,560 --> 00:12:00,399
but also uh sometimes vendors can say

312
00:12:00,399 --> 00:12:01,600
like

313
00:12:01,600 --> 00:12:04,160
these vulnerabilities are not

314
00:12:04,160 --> 00:12:06,800
actual vulnerabilities already because

315
00:12:06,800 --> 00:12:10,160
they are being patched or basically this

316
00:12:10,160 --> 00:12:12,959
component out of support but

317
00:12:12,959 --> 00:12:15,200
we're talking about supply chain right

318
00:12:15,200 --> 00:12:17,519
so it's hard if the vendor not

319
00:12:17,519 --> 00:12:19,519
supporting this component it's a lot of

320
00:12:19,519 --> 00:12:21,920
devices in the field which is still use

321
00:12:21,920 --> 00:12:25,519
this company right or maybe uh these

322
00:12:25,519 --> 00:12:27,600
vendors who support the devices can

323
00:12:27,600 --> 00:12:29,760
introduce new code which is can

324
00:12:29,760 --> 00:12:34,399
basically uh still available on uh usb

325
00:12:34,399 --> 00:12:38,560
based on usbrt on modern devices and

326
00:12:38,560 --> 00:12:41,279
modern biases and as you can see like in

327
00:12:41,279 --> 00:12:43,680
this year we discussed uh in a

328
00:12:43,680 --> 00:12:45,920
collaboration with the dell pcr three

329
00:12:45,920 --> 00:12:48,320
new vulnerabilities and thanks dell team

330
00:12:48,320 --> 00:12:51,440
for making very quick fixes and actually

331
00:12:51,440 --> 00:12:53,680
remediate these vulnerabilities on their

332
00:12:53,680 --> 00:12:55,040
devices

333
00:12:55,040 --> 00:12:57,920
but still such of the problem exists but

334
00:12:57,920 --> 00:13:00,480
let's talk about the collisions in the

335
00:13:00,480 --> 00:13:03,120
supply chain basically one of these

336
00:13:03,120 --> 00:13:05,120
perfect examples it's

337
00:13:05,120 --> 00:13:07,760
overclocked my handler if you can see

338
00:13:07,760 --> 00:13:12,000
here is a classical uh out of bound uh

339
00:13:12,000 --> 00:13:15,279
right primitive where basically uh the

340
00:13:15,279 --> 00:13:18,240
attacker can control uh right to smm

341
00:13:18,240 --> 00:13:19,680
memory of course it's lead to the

342
00:13:19,680 --> 00:13:22,880
arbitrary code execution but problem is

343
00:13:22,880 --> 00:13:25,760
this vulnerability get fixed in the

344
00:13:25,760 --> 00:13:27,839
component which has been developed by

345
00:13:27,839 --> 00:13:30,639
ibv independent bias developer but

346
00:13:30,639 --> 00:13:34,079
basically not included the fixed version

347
00:13:34,079 --> 00:13:36,720
to the device package uh

348
00:13:36,720 --> 00:13:39,120
firmware device package on the vendors

349
00:13:39,120 --> 00:13:41,279
on device vendor site at intel and

350
00:13:41,279 --> 00:13:43,200
binary found independently this

351
00:13:43,200 --> 00:13:45,440
vulnerability and actually this

352
00:13:45,440 --> 00:13:47,440
discovery i would classify as a

353
00:13:47,440 --> 00:13:49,680
collision of supply chain technically

354
00:13:49,680 --> 00:13:52,320
this fig's been exist but the device

355
00:13:52,320 --> 00:13:56,240
been still vulnerable so we get uh cve

356
00:13:56,240 --> 00:13:58,160
for that and thanks intel for

357
00:13:58,160 --> 00:14:00,399
collaborating to fix this issue but to

358
00:14:00,399 --> 00:14:03,279
be honest gain overclock is my handler

359
00:14:03,279 --> 00:14:06,320
it's very vulnerable component it's been

360
00:14:06,320 --> 00:14:09,040
uh known for years as a very suitable

361
00:14:09,040 --> 00:14:13,199
attack vector uh binary team uh opinion

362
00:14:13,199 --> 00:14:15,199
this component should be removed to

363
00:14:15,199 --> 00:14:17,519
secure the firmware because the

364
00:14:17,519 --> 00:14:21,839
complexity and the code it's not very

365
00:14:21,839 --> 00:14:24,720
suitable for providing uh security

366
00:14:24,720 --> 00:14:27,199
capabilities in the firmware another

367
00:14:27,199 --> 00:14:28,160
issue

368
00:14:28,160 --> 00:14:31,600
it is actually a classical uh stack

369
00:14:31,600 --> 00:14:37,040
overflow uh which is uh controlled by uh

370
00:14:37,040 --> 00:14:39,680
by the attacker uh

371
00:14:39,680 --> 00:14:42,480
in vram variable and basically

372
00:14:42,480 --> 00:14:44,079
as we can see this is platform

373
00:14:44,079 --> 00:14:46,480
initialization mode which is executing

374
00:14:46,480 --> 00:14:49,600
on very early boot and it's before ism

375
00:14:49,600 --> 00:14:53,040
even get initialized the attacker if

376
00:14:53,040 --> 00:14:54,560
if the attacker will be use this

377
00:14:54,560 --> 00:14:57,360
vulnerability the it's actually give

378
00:14:57,360 --> 00:14:59,360
them a lot of privileges even more

379
00:14:59,360 --> 00:15:02,959
privileges before uh compared to smm

380
00:15:02,959 --> 00:15:05,440
because the attacker can influence smm

381
00:15:05,440 --> 00:15:08,399
initialization and a lot of other things

382
00:15:08,399 --> 00:15:11,760
so basically this bug is very powerful

383
00:15:11,760 --> 00:15:15,760
and it's been uh found uh on

384
00:15:15,760 --> 00:15:18,399
originally on platform we need advanced

385
00:15:18,399 --> 00:15:21,279
premium uh component and it's been

386
00:15:21,279 --> 00:15:23,760
published by intel here is a cv number

387
00:15:23,760 --> 00:15:26,160
and this vulnerability related to ibv

388
00:15:26,160 --> 00:15:28,000
code base and what

389
00:15:28,000 --> 00:15:30,560
ibv means kai actually provide very good

390
00:15:30,560 --> 00:15:33,199
explanation it is kind of like some sort

391
00:15:33,199 --> 00:15:35,680
of a reference code which is applies to

392
00:15:35,680 --> 00:15:38,959
many uh devices which is used this code

393
00:15:38,959 --> 00:15:41,519
base across of them and

394
00:15:41,519 --> 00:15:43,519
if you found vulnerabilities there it

395
00:15:43,519 --> 00:15:45,920
can attack not only single vendors can

396
00:15:45,920 --> 00:15:49,120
attack multiple vendors

397
00:15:49,120 --> 00:15:51,839
another very interesting vulnerability

398
00:15:51,839 --> 00:15:55,360
related to pretty new tiger lake based

399
00:15:55,360 --> 00:15:58,639
hp device and this one actually been

400
00:15:58,639 --> 00:16:01,519
found as a part of the bug bounty with

401
00:16:01,519 --> 00:16:04,160
intel and this close to intel but this

402
00:16:04,160 --> 00:16:07,120
leads some of the delays of disclosing

403
00:16:07,120 --> 00:16:10,000
to hp hp introduced

404
00:16:10,000 --> 00:16:13,920
the fixes earlier than uh like

405
00:16:13,920 --> 00:16:16,959
bug been reported to them but basically

406
00:16:16,959 --> 00:16:19,600
binary being discovering independently

407
00:16:19,600 --> 00:16:22,560
and tomorrow it will be updated uh

408
00:16:22,560 --> 00:16:25,120
vulnerability report on the hp site at

409
00:16:25,120 --> 00:16:28,399
least it's how it's been explained to us

410
00:16:28,399 --> 00:16:31,360
why this collision happens but also as

411
00:16:31,360 --> 00:16:33,519
if we can see and it will be discussed

412
00:16:33,519 --> 00:16:36,160
later today the collisions and actually

413
00:16:36,160 --> 00:16:38,399
earlier fixes and we call these silent

414
00:16:38,399 --> 00:16:41,920
fixes happening in many many times and

415
00:16:41,920 --> 00:16:45,040
sometimes even like the component can be

416
00:16:45,040 --> 00:16:48,720
removed this effects and by mistake or

417
00:16:48,720 --> 00:16:51,279
maybe accidentally for supporting some

418
00:16:51,279 --> 00:16:54,560
of the older features it can be uh

419
00:16:54,560 --> 00:16:56,959
replace it with vulnerable component

420
00:16:56,959 --> 00:16:59,199
with an older version

421
00:16:59,199 --> 00:17:00,480
so and

422
00:17:00,480 --> 00:17:03,120
this vulnerability is actually

423
00:17:03,120 --> 00:17:08,480
also classical uh out-of-bound

424
00:17:08,640 --> 00:17:11,359
is classical memory corruption over smm

425
00:17:11,359 --> 00:17:13,679
so which is lead to the code execution

426
00:17:13,679 --> 00:17:17,359
and it's being found on hp code base so

427
00:17:17,359 --> 00:17:21,039
another one uh it is um

428
00:17:21,039 --> 00:17:23,280
classical get wearable in this time it

429
00:17:23,280 --> 00:17:26,000
is a dixie phase so basically leads to

430
00:17:26,000 --> 00:17:29,440
the stack overflow uh the attacker uh

431
00:17:29,440 --> 00:17:32,799
have like control on a pcie power

432
00:17:32,799 --> 00:17:35,919
management variable and also data size

433
00:17:35,919 --> 00:17:39,360
as you can see it's uh initialized just

434
00:17:39,360 --> 00:17:42,080
one time and it is zero but basically

435
00:17:42,080 --> 00:17:44,799
after the first time get variable call

436
00:17:44,799 --> 00:17:48,200
we don't have uh initialization or

437
00:17:48,200 --> 00:17:50,400
radiationalization of data size and it's

438
00:17:50,400 --> 00:17:52,640
just to use from the previous time which

439
00:17:52,640 --> 00:17:55,919
is can lead to the classical uh memory

440
00:17:55,919 --> 00:17:57,919
corruption vulnerability and

441
00:17:57,919 --> 00:18:00,480
such vector being discussed in many

442
00:18:00,480 --> 00:18:02,960
uh many times already we talked about

443
00:18:02,960 --> 00:18:04,799
that with alex verskin and adam

444
00:18:04,799 --> 00:18:07,600
zabrotsky uh last year on the cut us

445
00:18:07,600 --> 00:18:10,640
also it's been multiple publications on

446
00:18:10,640 --> 00:18:12,799
uh binary block and

447
00:18:12,799 --> 00:18:15,600
our plugging efi explorer can detect

448
00:18:15,600 --> 00:18:18,880
such problems automatically so basically

449
00:18:18,880 --> 00:18:22,000
as we can see it is even more issues we

450
00:18:22,000 --> 00:18:25,280
just discussed 50 uh

451
00:18:25,280 --> 00:18:30,240
1 and 52 uh 50 and 51 but here is a two

452
00:18:30,240 --> 00:18:33,200
more vulnerabilities and actually it is

453
00:18:33,200 --> 00:18:34,720
can lead to

454
00:18:34,720 --> 00:18:37,919
uh multiple failures in supply chain

455
00:18:37,919 --> 00:18:40,480
when the vendors deliver sometimes by

456
00:18:40,480 --> 00:18:43,600
mistake or uh maybe just rushing to

457
00:18:43,600 --> 00:18:46,400
deliver the fix the silent patches when

458
00:18:46,400 --> 00:18:49,520
the pledge doesn't contain the cve so it

459
00:18:49,520 --> 00:18:52,799
can mislead the understanding of uh

460
00:18:52,799 --> 00:18:55,200
enterprise companies like what's the

461
00:18:55,200 --> 00:18:57,760
priorities to fix that what's the impact

462
00:18:57,760 --> 00:19:00,960
of this security uh fixes which is being

463
00:19:00,960 --> 00:19:04,400
just said by the vendors this firmware

464
00:19:04,400 --> 00:19:06,559
contains security fixes but which one

465
00:19:06,559 --> 00:19:08,320
sometimes it's not explained pretty

466
00:19:08,320 --> 00:19:11,280
clearly so it's why it is very important

467
00:19:11,280 --> 00:19:14,240
to have all the components tracking

468
00:19:14,240 --> 00:19:17,520
about the cvss uh scoring and

469
00:19:17,520 --> 00:19:20,640
vulnerabilities because also it can be

470
00:19:20,640 --> 00:19:23,120
additional information and context why

471
00:19:23,120 --> 00:19:25,280
the developer need to pay more attention

472
00:19:25,280 --> 00:19:27,840
on that and of course like during the

473
00:19:27,840 --> 00:19:30,960
development phase it can be

474
00:19:30,960 --> 00:19:33,520
happening in multiple circumstances as

475
00:19:33,520 --> 00:19:36,960
example like as you can see on this uh

476
00:19:36,960 --> 00:19:42,320
example with binary 2021 44 it is

477
00:19:42,320 --> 00:19:45,600
use of one of the edk libraries called

478
00:19:45,600 --> 00:19:48,160
security package and this static library

479
00:19:48,160 --> 00:19:51,679
just get accidentally compiled to some

480
00:19:51,679 --> 00:19:53,520
of the component which is called trusted

481
00:19:53,520 --> 00:19:56,880
device setup app and it's contained a

482
00:19:56,880 --> 00:19:58,640
pretty suitable

483
00:19:58,640 --> 00:20:00,240
cloud pattern

484
00:20:00,240 --> 00:20:04,000
but fortunately for intel device this

485
00:20:04,000 --> 00:20:05,840
vulnerability and this driver not

486
00:20:05,840 --> 00:20:08,640
getting to run time with this cloud code

487
00:20:08,640 --> 00:20:10,400
so basically

488
00:20:10,400 --> 00:20:11,919
that means this bucket is hard to

489
00:20:11,919 --> 00:20:15,120
exploit but the primitive vulnerable

490
00:20:15,120 --> 00:20:17,520
primitive it's actually uh

491
00:20:17,520 --> 00:20:19,760
exists and if it will be different

492
00:20:19,760 --> 00:20:22,320
environment it can be exploitable right

493
00:20:22,320 --> 00:20:24,799
so it's just this particular device

494
00:20:24,799 --> 00:20:26,640
don't uh

495
00:20:26,640 --> 00:20:29,280
provide in runtime suitable environment

496
00:20:29,280 --> 00:20:32,320
to for the attacker to reach this uh

497
00:20:32,320 --> 00:20:35,039
vulnerability trigger

498
00:20:35,039 --> 00:20:37,600
another example it is actually

499
00:20:37,600 --> 00:20:40,640
vulnerability 20 21

500
00:20:40,640 --> 00:20:45,360
40 which is being patched by hp in merge

501
00:20:45,360 --> 00:20:47,760
but actually some variant of this

502
00:20:47,760 --> 00:20:49,200
vulnerability

503
00:20:49,200 --> 00:20:51,760
this different pcd number

504
00:20:51,760 --> 00:20:55,120
just one byte uh difference being uh

505
00:20:55,120 --> 00:20:57,600
patch it a week after why is that

506
00:20:57,600 --> 00:20:59,840
happening because sometimes actually

507
00:20:59,840 --> 00:21:02,320
static source code analysis is failing

508
00:21:02,320 --> 00:21:05,120
because it's hard to identify

509
00:21:05,120 --> 00:21:07,919
this uh similar

510
00:21:07,919 --> 00:21:10,880
code pattern because it just contained a

511
00:21:10,880 --> 00:21:14,000
different parameter but basically it's

512
00:21:14,000 --> 00:21:16,400
exactly the same vulnerability

513
00:21:16,400 --> 00:21:19,360
so basically we

514
00:21:19,360 --> 00:21:21,520
understand why it's been fixed without

515
00:21:21,520 --> 00:21:23,600
introducing additional cve because it's

516
00:21:23,600 --> 00:21:26,720
exactly the same vulnerability but just

517
00:21:26,720 --> 00:21:29,120
different byte which doesn't actually

518
00:21:29,120 --> 00:21:32,000
relate that to the trigger itself so if

519
00:21:32,000 --> 00:21:34,799
it will be uh providing additional

520
00:21:34,799 --> 00:21:36,559
capability for the attacker and

521
00:21:36,559 --> 00:21:38,400
triggering something so of course it

522
00:21:38,400 --> 00:21:39,840
will be a different doc

523
00:21:39,840 --> 00:21:42,840
but also very interesting uh

524
00:21:42,840 --> 00:21:46,320
situation with a compiler generated

525
00:21:46,320 --> 00:21:50,000
artifacts and if you if you can see here

526
00:21:50,000 --> 00:21:53,760
it's a few examples which is uh showing

527
00:21:53,760 --> 00:21:56,640
how compiler can optimize the

528
00:21:56,640 --> 00:21:58,960
mitigations and security boundaries

529
00:21:58,960 --> 00:22:01,360
that's pretty cool when you have like a

530
00:22:01,360 --> 00:22:04,240
size calculated dynamically but compiler

531
00:22:04,240 --> 00:22:06,320
can think differently and just use a

532
00:22:06,320 --> 00:22:09,039
constant which is uh suitable for this

533
00:22:09,039 --> 00:22:12,000
particular state of the code which is

534
00:22:12,000 --> 00:22:14,880
when it's get compiled right and as we

535
00:22:14,880 --> 00:22:17,520
can see this can lead for multiple

536
00:22:17,520 --> 00:22:19,919
problems when the boundaries original

537
00:22:19,919 --> 00:22:22,640
security boundaries created by developer

538
00:22:22,640 --> 00:22:25,679
doesn't meet the reality and

539
00:22:25,679 --> 00:22:28,559
as we can see here it is basically

540
00:22:28,559 --> 00:22:31,440
failing on validation of the boundaries

541
00:22:31,440 --> 00:22:33,039
and

542
00:22:33,039 --> 00:22:35,679
right primitive can exist to lead

543
00:22:35,679 --> 00:22:38,960
classical code execution into smm

544
00:22:38,960 --> 00:22:42,400
so basically uh we highly recommend you

545
00:22:42,400 --> 00:22:46,159
to uh not avoid the binary code analysis

546
00:22:46,159 --> 00:22:48,080
if you're developing the firmware

547
00:22:48,080 --> 00:22:51,200
because it's very important to make sure

548
00:22:51,200 --> 00:22:54,080
what exactly caught your ship to your

549
00:22:54,080 --> 00:22:57,039
customers and does this code containing

550
00:22:57,039 --> 00:22:59,919
any additional vulnerability patterns on

551
00:22:59,919 --> 00:23:02,080
binary level because it's exactly where

552
00:23:02,080 --> 00:23:03,760
you can find the truth and what you're

553
00:23:03,760 --> 00:23:04,880
shipping

554
00:23:04,880 --> 00:23:06,880
out of uh

555
00:23:06,880 --> 00:23:10,159
control to to the customers right so and

556
00:23:10,159 --> 00:23:12,320
uh we developed the efi explorer plug-in

557
00:23:12,320 --> 00:23:13,760
we actually been talking a couple of

558
00:23:13,760 --> 00:23:16,080
times on the uh black hat already and

559
00:23:16,080 --> 00:23:18,400
mentioned in this plug-in it's uh open

560
00:23:18,400 --> 00:23:21,039
sourced and it's providing very

561
00:23:21,039 --> 00:23:22,880
powerful capabilities to reverse

562
00:23:22,880 --> 00:23:26,000
engineer ufi farmers so also

563
00:23:26,000 --> 00:23:27,760
for detecting known vulnerabilities

564
00:23:27,760 --> 00:23:30,799
patterns all

565
00:23:30,880 --> 00:23:32,960
all the disclosures lead to the firmware

566
00:23:32,960 --> 00:23:35,520
hunt rules and this actually introducing

567
00:23:35,520 --> 00:23:37,600
the new version of the firmware hunt

568
00:23:37,600 --> 00:23:40,720
which is not only detect uh one variant

569
00:23:40,720 --> 00:23:43,039
of vulnerable triggers have some logical

570
00:23:43,039 --> 00:23:46,159
concatenation uh of multiple patterns

571
00:23:46,159 --> 00:23:48,559
and can trigger uh variants of the

572
00:23:48,559 --> 00:23:51,520
similar vulnerability patterns but also

573
00:23:51,520 --> 00:23:54,640
uh richard will be talking about lvfs

574
00:23:54,640 --> 00:23:57,440
and talking how this is working on at

575
00:23:57,440 --> 00:24:00,000
scale to protect firmer supply chain

576
00:24:00,000 --> 00:24:02,159
with the multiple vendors yeah it's a

577
00:24:02,159 --> 00:24:04,720
small demo how firmware hunt works we

578
00:24:04,720 --> 00:24:07,440
can see how fast it is scanning the

579
00:24:07,440 --> 00:24:09,039
whole firmware image

580
00:24:09,039 --> 00:24:12,240
but also we want to cover very important

581
00:24:12,240 --> 00:24:16,000
topic how the ecosystem is broken but

582
00:24:16,000 --> 00:24:18,640
do we really have a fix for that

583
00:24:18,640 --> 00:24:20,320
so alex has shown

584
00:24:20,320 --> 00:24:22,799
just how broken everything is

585
00:24:22,799 --> 00:24:27,120
and maybe we can show you a solution

586
00:24:27,600 --> 00:24:30,960
so lvfs is a website creators it's the

587
00:24:30,960 --> 00:24:33,360
linux vendor firmware service and it

588
00:24:33,360 --> 00:24:35,440
allows hobby vendors to upload firmware

589
00:24:35,440 --> 00:24:38,559
updates to be distributed to linux users

590
00:24:38,559 --> 00:24:42,000
at zero cost um both the vendor and the

591
00:24:42,000 --> 00:24:43,200
user

592
00:24:43,200 --> 00:24:46,080
there are about 150 vendors including

593
00:24:46,080 --> 00:24:49,120
dell lenovo intel hp etc

594
00:24:49,120 --> 00:24:51,200
using the service every day

595
00:24:51,200 --> 00:24:53,039
there's about a thousand different

596
00:24:53,039 --> 00:24:56,000
devices supported and we've shipped over

597
00:24:56,000 --> 00:24:58,400
51 million updates since we started the

598
00:24:58,400 --> 00:24:59,440
project

599
00:24:59,440 --> 00:25:01,200
i mean now average about two million

600
00:25:01,200 --> 00:25:02,480
updates a month

601
00:25:02,480 --> 00:25:06,480
all deployed using fwft client

602
00:25:06,480 --> 00:25:08,960
as part of the conditions we

603
00:25:08,960 --> 00:25:10,799
agree with vendors is that we can take

604
00:25:10,799 --> 00:25:13,200
the firmware we can decompress into

605
00:25:13,200 --> 00:25:16,400
shards so a shard might be an efi binary

606
00:25:16,400 --> 00:25:20,400
intel micro codes amd psp image etc and

607
00:25:20,400 --> 00:25:23,279
we can analyze it however we like using

608
00:25:23,279 --> 00:25:25,200
various rule engines

609
00:25:25,200 --> 00:25:27,760
which sometimes includes decompiling the

610
00:25:27,760 --> 00:25:29,600
firmware into some sort of bytecode

611
00:25:29,600 --> 00:25:33,520
which lets us do some cool stuff

612
00:25:34,240 --> 00:25:36,559
so all of those vendors uploading all

613
00:25:36,559 --> 00:25:39,279
those updates gives us a huge amount of

614
00:25:39,279 --> 00:25:40,480
data

615
00:25:40,480 --> 00:25:42,320
this graph shows the results of

616
00:25:42,320 --> 00:25:46,000
analyzing over 9 000 uv updates from

617
00:25:46,000 --> 00:25:48,720
about 800 different devices

618
00:25:48,720 --> 00:25:50,880
and this shows the newest

619
00:25:50,880 --> 00:25:53,279
available intel microcode for all of the

620
00:25:53,279 --> 00:25:56,080
different models on the lvfs

621
00:25:56,080 --> 00:25:58,559
we can see about half the models are

622
00:25:58,559 --> 00:26:01,120
shipping microcode from this year or

623
00:26:01,120 --> 00:26:05,039
last year which i suppose is good ish

624
00:26:05,039 --> 00:26:06,320
um

625
00:26:06,320 --> 00:26:08,880
of course microcode updates are hugely

626
00:26:08,880 --> 00:26:10,720
important for the entire sakia boot

627
00:26:10,720 --> 00:26:13,120
story i guess second only to like acms

628
00:26:13,120 --> 00:26:14,400
or something

629
00:26:14,400 --> 00:26:16,559
um so many of these devices with old

630
00:26:16,559 --> 00:26:18,159
versions

631
00:26:18,159 --> 00:26:19,600
is really bad

632
00:26:19,600 --> 00:26:22,080
especially since specter meltdown was

633
00:26:22,080 --> 00:26:22,840
what

634
00:26:22,840 --> 00:26:26,080
2019 platypus was 2020

635
00:26:26,080 --> 00:26:28,400
and there was another cv release just

636
00:26:28,400 --> 00:26:30,960
two days ago for a different speculation

637
00:26:30,960 --> 00:26:31,919
issue

638
00:26:31,919 --> 00:26:34,240
and in almost all the hardware in the

639
00:26:34,240 --> 00:26:38,840
field is completely unpatched

640
00:26:40,880 --> 00:26:42,080
so

641
00:26:42,080 --> 00:26:45,120
analyzing the 300 most

642
00:26:45,120 --> 00:26:48,080
popular cves we can see some trends over

643
00:26:48,080 --> 00:26:49,039
time

644
00:26:49,039 --> 00:26:50,880
now there is a lot to unpack on this

645
00:26:50,880 --> 00:26:52,080
graph

646
00:26:52,080 --> 00:26:54,880
the x-axis is time the y-axis is the

647
00:26:54,880 --> 00:26:57,679
delta between the embargo date of public

648
00:26:57,679 --> 00:26:58,880
release

649
00:26:58,880 --> 00:27:00,320
and when the update is available to

650
00:27:00,320 --> 00:27:04,240
install on the end user customer machine

651
00:27:04,240 --> 00:27:07,039
each dot represents one update with

652
00:27:07,039 --> 00:27:09,200
bigger dots representing more models

653
00:27:09,200 --> 00:27:11,279
covered in that release

654
00:27:11,279 --> 00:27:12,960
and the different colors represent the

655
00:27:12,960 --> 00:27:15,120
different vendors uploading

656
00:27:15,120 --> 00:27:16,240
um

657
00:27:16,240 --> 00:27:18,799
the cv data is self-reported by the

658
00:27:18,799 --> 00:27:21,520
vendors and is broadly but not wholly

659
00:27:21,520 --> 00:27:24,000
accurate

660
00:27:24,000 --> 00:27:26,000
you can see there are some big delays in

661
00:27:26,000 --> 00:27:29,360
getting some security fixes with some

662
00:27:29,360 --> 00:27:31,840
users waiting two years since the

663
00:27:31,840 --> 00:27:35,279
embargo date

664
00:27:35,279 --> 00:27:37,679
go back

665
00:27:37,760 --> 00:27:38,720
um

666
00:27:38,720 --> 00:27:40,640
you might notice that in some cases the

667
00:27:40,640 --> 00:27:43,679
delta value is negative i.e the dot is

668
00:27:43,679 --> 00:27:45,600
below the zero line

669
00:27:45,600 --> 00:27:47,279
some vendors ship updates before the

670
00:27:47,279 --> 00:27:49,600
embargo date either by accident or

671
00:27:49,600 --> 00:27:52,480
deliberately this is really bad as it's

672
00:27:52,480 --> 00:27:54,880
trivial to diff to decompile binaries

673
00:27:54,880 --> 00:27:56,159
and find out exactly the security

674
00:27:56,159 --> 00:27:58,159
problem is being fixed

675
00:27:58,159 --> 00:27:59,919
interestingly the diagonal line shows

676
00:27:59,919 --> 00:28:03,679
how manual the whole process is um

677
00:28:03,679 --> 00:28:05,360
security team is patching the flagship

678
00:28:05,360 --> 00:28:07,919
models first and device is nearing the

679
00:28:07,919 --> 00:28:11,200
end of life being patched much later

680
00:28:11,200 --> 00:28:12,799
in the data you can also see delays due

681
00:28:12,799 --> 00:28:14,799
to national holidays like golden week

682
00:28:14,799 --> 00:28:16,960
and us thanksgiving

683
00:28:16,960 --> 00:28:19,200
i guess the good news is the trend over

684
00:28:19,200 --> 00:28:22,159
the last three years is downwards i.e

685
00:28:22,159 --> 00:28:24,080
the vendors are getting slightly better

686
00:28:24,080 --> 00:28:29,240
at shipping updates in a timely fashion

687
00:28:30,320 --> 00:28:33,120
so we can be cleverer

688
00:28:33,120 --> 00:28:34,880
we can detect when vendors are fixing

689
00:28:34,880 --> 00:28:36,960
security updates even if they're not

690
00:28:36,960 --> 00:28:38,640
tagging them with the correct cve

691
00:28:38,640 --> 00:28:39,679
numbers

692
00:28:39,679 --> 00:28:41,520
using the firmware hunt rules um

693
00:28:41,520 --> 00:28:43,440
developed by bernarli we can scan the

694
00:28:43,440 --> 00:28:46,960
efi binaries and perhaps remind vendors

695
00:28:46,960 --> 00:28:48,720
that they might have misclassified the

696
00:28:48,720 --> 00:28:51,360
bug from an enhancement update to a

697
00:28:51,360 --> 00:28:53,120
security update

698
00:28:53,120 --> 00:28:55,039
working with sir we can use the vince

699
00:28:55,039 --> 00:28:57,200
api to get the embargo date of public

700
00:28:57,200 --> 00:29:01,520
release and suggest to the oem qa team

701
00:29:01,520 --> 00:29:03,440
that pushing the seemingly innocuous

702
00:29:03,440 --> 00:29:06,159
update would be breaking the embargo or

703
00:29:06,159 --> 00:29:08,399
remind them perhaps the other way that

704
00:29:08,399 --> 00:29:10,960
it's been many months since security

705
00:29:10,960 --> 00:29:12,880
issue has been made public

706
00:29:12,880 --> 00:29:15,360
as more firmware hunt rules are created

707
00:29:15,360 --> 00:29:17,840
this will become even more useful for

708
00:29:17,840 --> 00:29:21,840
oems and odms

709
00:29:22,720 --> 00:29:25,679
so my personal conclusion is that only

710
00:29:25,679 --> 00:29:28,320
by working together with cert and

711
00:29:28,320 --> 00:29:30,240
companies like bernarli we can improve

712
00:29:30,240 --> 00:29:33,120
the ecosystem even further

713
00:29:33,120 --> 00:29:35,120
speeding up the process of shipping

714
00:29:35,120 --> 00:29:37,919
fixes to end users and making sure that

715
00:29:37,919 --> 00:29:39,679
security issues are patched by all

716
00:29:39,679 --> 00:29:41,360
vendors

717
00:29:41,360 --> 00:29:43,200
these are really hard problems and

718
00:29:43,200 --> 00:29:45,520
making sure security and

719
00:29:45,520 --> 00:29:47,440
that they've played the entire industry

720
00:29:47,440 --> 00:29:49,360
for what 20 years

721
00:29:49,360 --> 00:29:51,200
and only now do we have all the

722
00:29:51,200 --> 00:29:54,080
infrastructure and the data to make

723
00:29:54,080 --> 00:29:55,679
things better

724
00:29:55,679 --> 00:29:57,679
so i guess back to alex to sum all this

725
00:29:57,679 --> 00:29:59,200
up

726
00:29:59,200 --> 00:30:02,240
thank you richard that's been uh amazing

727
00:30:02,240 --> 00:30:03,440
uh

728
00:30:03,440 --> 00:30:06,320
solution provide during your speech and

729
00:30:06,320 --> 00:30:08,960
basically collaboration it's a key to

730
00:30:08,960 --> 00:30:11,440
fixing the supply chain and what's i i

731
00:30:11,440 --> 00:30:14,000
want to say like fixing supply chain

732
00:30:14,000 --> 00:30:16,720
it's a team sport so only cross industry

733
00:30:16,720 --> 00:30:19,840
collaboration and uh with multiple

734
00:30:19,840 --> 00:30:22,399
vendors it can help us to provide

735
00:30:22,399 --> 00:30:25,039
suitable solution for such problem and

736
00:30:25,039 --> 00:30:27,919
also i would say uh you mentioned it

737
00:30:27,919 --> 00:30:30,960
already working with the crcc and bean

738
00:30:30,960 --> 00:30:33,360
system it's very helpful because we

739
00:30:33,360 --> 00:30:35,600
really need some sort of independent

740
00:30:35,600 --> 00:30:38,640
oracle which is not a vendor dependent

741
00:30:38,640 --> 00:30:41,600
uh to helping coordinate and disclosure

742
00:30:41,600 --> 00:30:44,000
with a similar attention to multiple

743
00:30:44,000 --> 00:30:45,760
parties right because when you're

744
00:30:45,760 --> 00:30:48,880
disclosing to one vendor always vendor

745
00:30:48,880 --> 00:30:51,520
cares to punch themselves faster and

746
00:30:51,520 --> 00:30:53,840
basically as a courtesy collaborating

747
00:30:53,840 --> 00:30:57,360
with other parties but that's not always

748
00:30:57,360 --> 00:31:00,080
works well uh visa industry-wide

749
00:31:00,080 --> 00:31:02,080
disclosures because when the multiple

750
00:31:02,080 --> 00:31:05,039
parties involved on the disclosure

751
00:31:05,039 --> 00:31:07,520
everyone have their different patch

752
00:31:07,520 --> 00:31:10,399
cycles and it became some sort of race

753
00:31:10,399 --> 00:31:13,200
condition when a synchronous nature of

754
00:31:13,200 --> 00:31:15,919
delivering the fixes by multiple vendors

755
00:31:15,919 --> 00:31:18,640
it can create some sort of circumstances

756
00:31:18,640 --> 00:31:20,480
which is actually kyben covering at the

757
00:31:20,480 --> 00:31:22,559
beginning when one vendor patch

758
00:31:22,559 --> 00:31:25,840
vulnerability another didn't and this

759
00:31:25,840 --> 00:31:28,559
will be lead to some sort of like window

760
00:31:28,559 --> 00:31:31,520
when already patched vulnerability still

761
00:31:31,520 --> 00:31:34,240
suitable zeroth day for some set of the

762
00:31:34,240 --> 00:31:37,600
devices and it's really why we need to

763
00:31:37,600 --> 00:31:40,159
collaborate better to fix supply chain

764
00:31:40,159 --> 00:31:41,600
problems and

765
00:31:41,600 --> 00:31:43,200
make uh

766
00:31:43,200 --> 00:31:46,720
patch cycles actually shorter and

767
00:31:46,720 --> 00:31:48,320
uh

768
00:31:48,320 --> 00:31:51,200
patch delivery more uh suitable and

769
00:31:51,200 --> 00:31:53,679
synchronized between different vendors

770
00:31:53,679 --> 00:31:55,679
and as we mentioned it like we have this

771
00:31:55,679 --> 00:31:57,440
open source technology called

772
00:31:57,440 --> 00:32:00,559
firmwarehunt which is can be used for uh

773
00:32:00,559 --> 00:32:02,720
patching uh

774
00:32:02,720 --> 00:32:05,440
for actually detecting uh already known

775
00:32:05,440 --> 00:32:07,279
vulnerabilities and it's

776
00:32:07,279 --> 00:32:09,600
works on the semantic level of the code

777
00:32:09,600 --> 00:32:11,519
which is make much more suitable

778
00:32:11,519 --> 00:32:14,080
detection it can detect the patterns

779
00:32:14,080 --> 00:32:17,679
which is hard to as example uh create a

780
00:32:17,679 --> 00:32:20,559
rule for detecting this yara and other

781
00:32:20,559 --> 00:32:23,440
things we need more tools to cover and

782
00:32:23,440 --> 00:32:27,440
protect supply chain and i think uh kai

783
00:32:27,440 --> 00:32:30,559
richard and myself we try to make this

784
00:32:30,559 --> 00:32:34,000
talk combined multiple problems in one

785
00:32:34,000 --> 00:32:36,240
way to deliver the message we really

786
00:32:36,240 --> 00:32:38,960
need to collaborate more and

787
00:32:38,960 --> 00:32:43,600
fix such problem and supply chain

788
00:32:43,600 --> 00:32:44,960
thank you very much

789
00:32:44,960 --> 00:32:47,200
and it's been pleasure to deliver our

790
00:32:47,200 --> 00:32:51,039
talk uh on singapore blackhat asia this

791
00:32:51,039 --> 00:32:53,600
time virtually but we open for question

792
00:32:53,600 --> 00:32:54,840
thank

793
00:32:54,840 --> 00:32:58,720
you yeah just also i wanted to say we

794
00:32:58,720 --> 00:33:00,720
have a three different time zones on the

795
00:33:00,720 --> 00:33:04,720
stage uh it is london uh it is uh

796
00:33:04,720 --> 00:33:08,159
germany bochum and uh

797
00:33:08,159 --> 00:33:11,120
thousand california los angeles so

798
00:33:11,120 --> 00:33:14,039
basically uh we made that with all this

799
00:33:14,039 --> 00:33:16,480
desynchronization of the european time

800
00:33:16,480 --> 00:33:18,799
zone from uh uh

801
00:33:18,799 --> 00:33:19,760
uh

802
00:33:19,760 --> 00:33:22,000
pacific time zone and actually we need

803
00:33:22,000 --> 00:33:24,080
to sync with the time zone in singapore

804
00:33:24,080 --> 00:33:26,480
so richard have a crazy craziest uh

805
00:33:26,480 --> 00:33:29,039
timeline it's like been 4 a.m when we

806
00:33:29,039 --> 00:33:31,120
started the community went off at 3am

807
00:33:31,120 --> 00:33:33,600
this morning

808
00:33:36,480 --> 00:33:38,080
so i guess we wait for questions in the

809
00:33:38,080 --> 00:33:39,279
chat

810
00:33:39,279 --> 00:33:42,000
yes i think so i guess if anyone doesn't

811
00:33:42,000 --> 00:33:44,880
want to ask questions like bernarli is

812
00:33:44,880 --> 00:33:47,039
easy to google um

813
00:33:47,039 --> 00:33:48,159
and

814
00:33:48,159 --> 00:33:50,000
obviously talk to alex

815
00:33:50,000 --> 00:33:52,320
from lvfs point of view again next

816
00:33:52,320 --> 00:33:54,120
vendor firmware services

817
00:33:54,120 --> 00:33:55,840
fwft.org

818
00:33:55,840 --> 00:33:59,440
um and i guess i'm friendly

819
00:33:59,440 --> 00:34:02,159
and kai you're immune

820
00:34:02,159 --> 00:34:03,519
so yeah you

821
00:34:03,519 --> 00:34:05,519
uh you can find my email

822
00:34:05,519 --> 00:34:07,679
in my profile right on on

823
00:34:07,679 --> 00:34:09,280
the website

824
00:34:09,280 --> 00:34:12,639
or just mu dot any

825
00:34:12,639 --> 00:34:15,760
but yeah um thank you guys uh what a

826
00:34:15,760 --> 00:34:19,040
nice nice uh presentation here um and i

827
00:34:19,040 --> 00:34:22,639
think um if if if you guys uh i'm

828
00:34:22,639 --> 00:34:24,480
looking uh watching our presentation i'm

829
00:34:24,480 --> 00:34:26,079
not really sure about what firmware

830
00:34:26,079 --> 00:34:27,679
right and is it this is really that

831
00:34:27,679 --> 00:34:29,520
important um

832
00:34:29,520 --> 00:34:31,280
keep in mind that we are pretty early in

833
00:34:31,280 --> 00:34:33,440
the firmware security space here

834
00:34:33,440 --> 00:34:36,239
the problem will only be become bigger

835
00:34:36,239 --> 00:34:37,918
right so the complexity of firmware is

836
00:34:37,918 --> 00:34:39,839
only growing um the amount of code down

837
00:34:39,839 --> 00:34:41,679
there is only growing if you look at the

838
00:34:41,679 --> 00:34:44,399
bugs that that finally found um these

839
00:34:44,399 --> 00:34:46,639
are modded if you compare that with like

840
00:34:46,639 --> 00:34:47,679
chrome

841
00:34:47,679 --> 00:34:49,280
or the the standard bucks in operating

842
00:34:49,280 --> 00:34:50,960
system these are more low-hanging fruits

843
00:34:50,960 --> 00:34:52,719
there there are a lot of bugs in there

844
00:34:52,719 --> 00:34:54,399
still

845
00:34:54,399 --> 00:34:56,399
a lot of surprises there

846
00:34:56,399 --> 00:34:59,280
and i think if you're a defender

847
00:34:59,280 --> 00:35:01,280
i think i think it makes sense to to

848
00:35:01,280 --> 00:35:03,599
take this problem series now instead of

849
00:35:03,599 --> 00:35:05,680
like five years recent uh

850
00:35:05,680 --> 00:35:08,400
dhs report actually been saying for the

851
00:35:08,400 --> 00:35:10,480
critical infrastructure firmware and

852
00:35:10,480 --> 00:35:13,520
device security became a critical uh

853
00:35:13,520 --> 00:35:16,079
point of failure so which is very

854
00:35:16,079 --> 00:35:18,240
important message and we need to pay

855
00:35:18,240 --> 00:35:20,160
much more attention specifically in the

856
00:35:20,160 --> 00:35:22,480
areas where it's related to the critical

857
00:35:22,480 --> 00:35:24,880
infrastructure medical devices and some

858
00:35:24,880 --> 00:35:26,560
others

859
00:35:26,560 --> 00:35:27,760
so

860
00:35:27,760 --> 00:35:29,599
we don't have the questions in the chat

861
00:35:29,599 --> 00:35:32,079
but basically like uh

862
00:35:32,079 --> 00:35:34,960
it's very important to cover uh such

863
00:35:34,960 --> 00:35:36,560
topics like a firmware and device

864
00:35:36,560 --> 00:35:38,240
security and i think the audience will

865
00:35:38,240 --> 00:35:40,160
be paying much more attention but as a

866
00:35:40,160 --> 00:35:42,640
guy say complexity only growing and if

867
00:35:42,640 --> 00:35:45,760
you think about like modern u5 firmware

868
00:35:45,760 --> 00:35:49,040
it's much more complex than uh modern

869
00:35:49,040 --> 00:35:51,280
and tosca now on modern windows

870
00:35:51,280 --> 00:35:53,760
operating system uh currently the

871
00:35:53,760 --> 00:35:57,359
firmware image contain uh overall about

872
00:35:57,359 --> 00:36:00,880
like six million plus lines of c code

873
00:36:00,880 --> 00:36:02,240
which is a lot

874
00:36:02,240 --> 00:36:05,839
and basically of course c code uh

875
00:36:05,839 --> 00:36:08,079
kind of like a pointing to the direction

876
00:36:08,079 --> 00:36:10,960
it can be vulnerable at some point and

877
00:36:10,960 --> 00:36:13,119
lead some blocks and we see also the

878
00:36:13,119 --> 00:36:16,240
shift when some firmwares uh get

879
00:36:16,240 --> 00:36:18,400
developed on some particular drivers get

880
00:36:18,400 --> 00:36:20,960
developed on more safer languages like

881
00:36:20,960 --> 00:36:24,160
rust but still because you can't just

882
00:36:24,160 --> 00:36:28,000
develop on safer language whole firmware

883
00:36:28,000 --> 00:36:29,440
you need some

884
00:36:29,440 --> 00:36:31,440
assembly stops for early boot or

885
00:36:31,440 --> 00:36:33,760
something like that it still has some

886
00:36:33,760 --> 00:36:35,119
window where

887
00:36:35,119 --> 00:36:37,200
the code can be vulnerable

888
00:36:37,200 --> 00:36:40,240
for multiple different directions but

889
00:36:40,240 --> 00:36:42,000
thank you thank you very much all i

890
00:36:42,000 --> 00:36:45,200
think it's pretty much it from us and

891
00:36:45,200 --> 00:36:47,440
see you next time

892
00:36:47,440 --> 00:36:49,359
hopefully in vegas

893
00:36:49,359 --> 00:36:52,359
bye-bye

894
00:36:53,480 --> 00:36:56,550
[Music]

895
00:37:00,390 --> 00:37:01,520
[Music]

896
00:37:01,520 --> 00:37:03,599
you

