1
00:00:01,740 --> 00:00:04,810
[Music]

2
00:00:08,320 --> 00:00:11,040
hello everyone thanks for coming and

3
00:00:11,040 --> 00:00:12,960
joining for my session

4
00:00:12,960 --> 00:00:14,960
my name is noshin chabot and i'm going

5
00:00:14,960 --> 00:00:18,240
to talk about sidewinder third actor and

6
00:00:18,240 --> 00:00:20,960
what we have been seeing

7
00:00:20,960 --> 00:00:25,599
from them um in the past two years

8
00:00:25,599 --> 00:00:28,320
so let's start with a little bit of

9
00:00:28,320 --> 00:00:30,640
introduction about myself

10
00:00:30,640 --> 00:00:32,800
i'm a security researcher from the

11
00:00:32,800 --> 00:00:34,719
global research and analysis team at

12
00:00:34,719 --> 00:00:36,800
kaspersky

13
00:00:36,800 --> 00:00:39,040
i've been with the company for

14
00:00:39,040 --> 00:00:40,559
six years

15
00:00:40,559 --> 00:00:43,280
but in in total i've been working in the

16
00:00:43,280 --> 00:00:44,800
same area for

17
00:00:44,800 --> 00:00:46,320
over 10 years

18
00:00:46,320 --> 00:00:48,399
doing malware analysis and threat

19
00:00:48,399 --> 00:00:51,039
intelligence

20
00:00:52,879 --> 00:00:55,760
a little bit of the agenda for

21
00:00:55,760 --> 00:00:57,440
my talk today

22
00:00:57,440 --> 00:00:59,440
i'm going to first

23
00:00:59,440 --> 00:01:01,680
have an introduction about the threat

24
00:01:01,680 --> 00:01:03,520
actor

25
00:01:03,520 --> 00:01:05,519
then we will look at the different

26
00:01:05,519 --> 00:01:07,680
inflation vectors that they have been

27
00:01:07,680 --> 00:01:10,159
using over the past

28
00:01:10,159 --> 00:01:13,280
two years which is the subject of my

29
00:01:13,280 --> 00:01:15,200
research for today

30
00:01:15,200 --> 00:01:16,720
uh we look at different malware

31
00:01:16,720 --> 00:01:18,159
components and

32
00:01:18,159 --> 00:01:20,400
um the techniques that

33
00:01:20,400 --> 00:01:22,799
they've been using

34
00:01:22,799 --> 00:01:24,960
to

35
00:01:25,040 --> 00:01:26,320
to um

36
00:01:26,320 --> 00:01:27,280
do

37
00:01:27,280 --> 00:01:29,439
their attacks in a more advanced and

38
00:01:29,439 --> 00:01:32,000
sophisticated way we will look at the

39
00:01:32,000 --> 00:01:35,680
infrastructure a little bit and

40
00:01:35,680 --> 00:01:36,479
then

41
00:01:36,479 --> 00:01:37,920
i'll talk about

42
00:01:37,920 --> 00:01:40,240
the whole investigation

43
00:01:40,240 --> 00:01:42,880
and analysis

44
00:01:42,880 --> 00:01:46,560
basically because it was a

45
00:01:46,880 --> 00:01:48,799
huge

46
00:01:48,799 --> 00:01:52,000
research with a lot of

47
00:01:52,000 --> 00:01:54,399
components and malware samples so i'm

48
00:01:54,399 --> 00:01:55,759
going to talk about

49
00:01:55,759 --> 00:01:57,840
the investigation and also a little bit

50
00:01:57,840 --> 00:01:59,680
of the

51
00:01:59,680 --> 00:02:03,280
mitigation tips and um

52
00:02:03,280 --> 00:02:04,799
points to

53
00:02:04,799 --> 00:02:06,640
detect the attacks

54
00:02:06,640 --> 00:02:10,239
and then of course conclusion

55
00:02:10,720 --> 00:02:13,680
so first of all um what is who is

56
00:02:13,680 --> 00:02:15,520
sidewinder protector

57
00:02:15,520 --> 00:02:18,319
um this trajectory is also known as

58
00:02:18,319 --> 00:02:23,000
rattlesnake or tapt04

59
00:02:23,920 --> 00:02:25,920
there might be other names

60
00:02:25,920 --> 00:02:27,680
that i

61
00:02:27,680 --> 00:02:29,200
i don't know of

62
00:02:29,200 --> 00:02:32,400
but these are the most common ones

63
00:02:32,400 --> 00:02:36,080
they've been active since at least 2012.

64
00:02:36,080 --> 00:02:40,319
and we first reported about this threat

65
00:02:40,319 --> 00:02:44,720
trade actors activities in january 2018.

66
00:02:44,720 --> 00:02:47,440
so the main target profiles of their

67
00:02:47,440 --> 00:02:48,800
attacks

68
00:02:48,800 --> 00:02:52,400
are police military maritime navy

69
00:02:52,400 --> 00:02:54,000
foreign affairs

70
00:02:54,000 --> 00:02:56,560
scientific and defense organizations

71
00:02:56,560 --> 00:02:58,319
aviation i.t

72
00:02:58,319 --> 00:02:59,200
and

73
00:02:59,200 --> 00:03:01,760
even law firms

74
00:03:01,760 --> 00:03:03,760
and the countries that they are more

75
00:03:03,760 --> 00:03:05,280
focused on

76
00:03:05,280 --> 00:03:08,560
which has been growing over the time

77
00:03:08,560 --> 00:03:09,360
is

78
00:03:09,360 --> 00:03:12,879
mostly central asian countries

79
00:03:12,879 --> 00:03:16,319
pakistan bangladesh sri lanka and nepal

80
00:03:16,319 --> 00:03:18,959
and in more recent attacks we've seen

81
00:03:18,959 --> 00:03:21,440
them targeting victims in europe and

82
00:03:21,440 --> 00:03:22,560
middle east

83
00:03:22,560 --> 00:03:23,680
in

84
00:03:23,680 --> 00:03:26,159
other countries in asia africa

85
00:03:26,159 --> 00:03:27,200
and

86
00:03:27,200 --> 00:03:31,360
other regions also sometimes related to

87
00:03:31,360 --> 00:03:33,120
department of foreign affairs of the

88
00:03:33,120 --> 00:03:34,560
main

89
00:03:34,560 --> 00:03:36,799
victim countries sometimes like

90
00:03:36,799 --> 00:03:40,480
individual and separate victims

91
00:03:41,920 --> 00:03:43,280
so what

92
00:03:43,280 --> 00:03:44,480
is

93
00:03:44,480 --> 00:03:46,319
really fascinating about this threat

94
00:03:46,319 --> 00:03:48,560
actor is that

95
00:03:48,560 --> 00:03:51,200
during the past two years we have seen

96
00:03:51,200 --> 00:03:52,879
them

97
00:03:52,879 --> 00:03:56,959
performing over a thousand new attacks

98
00:03:56,959 --> 00:03:58,640
which is

99
00:03:58,640 --> 00:04:01,280
not very common among

100
00:04:01,280 --> 00:04:04,640
other pt actors that we've been tracking

101
00:04:04,640 --> 00:04:07,200
they maintain hundreds of domains and

102
00:04:07,200 --> 00:04:08,720
sub-domains

103
00:04:08,720 --> 00:04:10,560
that are used for

104
00:04:10,560 --> 00:04:12,159
command and control

105
00:04:12,159 --> 00:04:15,040
communication and also as download

106
00:04:15,040 --> 00:04:17,440
servers to download further stages of

107
00:04:17,440 --> 00:04:19,040
the attack

108
00:04:19,040 --> 00:04:20,399
and they've been

109
00:04:20,399 --> 00:04:21,680
constantly

110
00:04:21,680 --> 00:04:24,560
registering new domains and new

111
00:04:24,560 --> 00:04:26,840
using new sub domains

112
00:04:26,840 --> 00:04:30,000
to make sure that if if some of the

113
00:04:30,000 --> 00:04:34,320
domains are burnt and detected in

114
00:04:34,320 --> 00:04:36,240
in the past they they still have a

115
00:04:36,240 --> 00:04:40,160
chance to um to compromise their victims

116
00:04:40,160 --> 00:04:42,800
also they have a relatively

117
00:04:42,800 --> 00:04:45,680
high level of sophistication with many

118
00:04:45,680 --> 00:04:49,360
techniques to stay undetected for longer

119
00:04:49,360 --> 00:04:51,600
such as multiple obfuscation techniques

120
00:04:51,600 --> 00:04:55,759
which we will see in the next slides

121
00:04:55,759 --> 00:04:57,919
different encryptions with unique keys

122
00:04:57,919 --> 00:05:01,199
for each malware sample

123
00:05:01,199 --> 00:05:02,400
also

124
00:05:02,400 --> 00:05:04,639
multi-state malwares

125
00:05:04,639 --> 00:05:06,800
memory resident malwares

126
00:05:06,800 --> 00:05:08,320
and also

127
00:05:08,320 --> 00:05:09,680
they've been

128
00:05:09,680 --> 00:05:12,080
splitting the urls that the malware's

129
00:05:12,080 --> 00:05:13,919
used to contact their command and

130
00:05:13,919 --> 00:05:16,000
control server into different attack

131
00:05:16,000 --> 00:05:20,240
components so even um having access to

132
00:05:20,240 --> 00:05:22,160
one malware sample

133
00:05:22,160 --> 00:05:24,479
being able to decrypt that and the

134
00:05:24,479 --> 00:05:26,800
obfuscates um all the strings and all

135
00:05:26,800 --> 00:05:28,400
the parts of the malware you wouldn't

136
00:05:28,400 --> 00:05:31,360
get the full picture and full um

137
00:05:31,360 --> 00:05:33,759
url that the malware uses

138
00:05:33,759 --> 00:05:37,800
to communicate with the server

139
00:05:38,080 --> 00:05:40,000
so talking about the infection chain

140
00:05:40,000 --> 00:05:41,039
that

141
00:05:41,039 --> 00:05:44,000
we've been seeing um from this threat

142
00:05:44,000 --> 00:05:45,440
actor

143
00:05:45,440 --> 00:05:46,639
the main

144
00:05:46,639 --> 00:05:48,960
malware components

145
00:05:48,960 --> 00:05:51,360
are the parts that you see here with the

146
00:05:51,360 --> 00:05:53,759
first stage second stage and third stage

147
00:05:53,759 --> 00:05:55,360
and final stage

148
00:05:55,360 --> 00:05:58,160
components here and for the delivery

149
00:05:58,160 --> 00:06:00,800
they've used different

150
00:06:00,800 --> 00:06:01,919
sort of

151
00:06:01,919 --> 00:06:04,080
file formats

152
00:06:04,080 --> 00:06:07,520
they've been using rtf files with the

153
00:06:07,520 --> 00:06:10,160
artifact exploits to export vulnerable

154
00:06:10,160 --> 00:06:13,360
old unpatched microsoft

155
00:06:13,360 --> 00:06:14,960
word

156
00:06:14,960 --> 00:06:16,240
applications

157
00:06:16,240 --> 00:06:19,280
in some cases the rtf file

158
00:06:19,280 --> 00:06:21,199
drops

159
00:06:21,199 --> 00:06:24,160
javascript drops actually an hta file

160
00:06:24,160 --> 00:06:27,680
with an obfuscated javascript

161
00:06:27,680 --> 00:06:28,880
that's the

162
00:06:28,880 --> 00:06:32,080
one that you see with the first stage

163
00:06:32,080 --> 00:06:34,800
with the line that shows

164
00:06:34,800 --> 00:06:37,600
see if i can point to it

165
00:06:37,600 --> 00:06:38,800
no i can't

166
00:06:38,800 --> 00:06:41,039
anyway um

167
00:06:41,039 --> 00:06:43,680
they drop

168
00:06:43,680 --> 00:06:46,400
delta files drop an hda5 with obfuscated

169
00:06:46,400 --> 00:06:49,440
javascript which loads a downloader

170
00:06:49,440 --> 00:06:51,360
module which is a dotnet module in

171
00:06:51,360 --> 00:06:53,919
memory and that downloader module would

172
00:06:53,919 --> 00:06:55,280
communicate with its

173
00:06:55,280 --> 00:06:58,160
command with its download server to

174
00:06:58,160 --> 00:07:00,400
download the next message of the attack

175
00:07:00,400 --> 00:07:02,479
which is again another hta file with

176
00:07:02,479 --> 00:07:04,800
another obfuscated javascript with the

177
00:07:04,800 --> 00:07:07,680
similar format to the first stage

178
00:07:07,680 --> 00:07:10,800
javascript but this time the final

179
00:07:10,800 --> 00:07:12,319
payload

180
00:07:12,319 --> 00:07:13,440
is

181
00:07:13,440 --> 00:07:14,560
another

182
00:07:14,560 --> 00:07:17,120
dotnet module it's an installer file the

183
00:07:17,120 --> 00:07:18,800
installer file would drop different

184
00:07:18,800 --> 00:07:20,800
components of the

185
00:07:20,800 --> 00:07:22,000
final

186
00:07:22,000 --> 00:07:25,360
backdoor module and then

187
00:07:25,360 --> 00:07:27,360
load the

188
00:07:27,360 --> 00:07:29,120
backdoor loader

189
00:07:29,120 --> 00:07:31,520
through dll side loading

190
00:07:31,520 --> 00:07:35,759
in memory and the back door loader would

191
00:07:35,759 --> 00:07:38,160
in turn

192
00:07:40,080 --> 00:07:42,000
load and execute the final backdoor

193
00:07:42,000 --> 00:07:43,280
which communicates with the command and

194
00:07:43,280 --> 00:07:45,039
control server

195
00:07:45,039 --> 00:07:46,160
in another

196
00:07:46,160 --> 00:07:49,599
infection chain we saw similar rtf files

197
00:07:49,599 --> 00:07:50,879
that had

198
00:07:50,879 --> 00:07:52,479
javascript

199
00:07:52,479 --> 00:07:55,599
obfuscate the javascript inside htm hd

200
00:07:55,599 --> 00:07:57,199
file

201
00:07:57,199 --> 00:08:00,000
but this time they skipped the first

202
00:08:00,000 --> 00:08:01,199
stage

203
00:08:01,199 --> 00:08:04,720
with the downloader and they

204
00:08:04,879 --> 00:08:07,039
immediately dropped the

205
00:08:07,039 --> 00:08:09,039
javascript file use the javascript file

206
00:08:09,039 --> 00:08:11,039
with the installer module

207
00:08:11,039 --> 00:08:12,960
there were other examples

208
00:08:12,960 --> 00:08:14,720
for

209
00:08:14,720 --> 00:08:15,919
delivery

210
00:08:15,919 --> 00:08:18,800
in some cases the attackers use lnk

211
00:08:18,800 --> 00:08:21,759
files which are windows shortcut files

212
00:08:21,759 --> 00:08:23,199
these files

213
00:08:23,199 --> 00:08:27,199
have a command inside to

214
00:08:27,199 --> 00:08:29,599
to contact a remote server and download

215
00:08:29,599 --> 00:08:30,800
the file

216
00:08:30,800 --> 00:08:33,360
and execute on the system through

217
00:08:33,360 --> 00:08:36,000
mshta.exe

218
00:08:36,000 --> 00:08:38,399
process on the system

219
00:08:38,399 --> 00:08:41,120
and this file that gets downloaded would

220
00:08:41,120 --> 00:08:43,839
be the same um sort of

221
00:08:43,839 --> 00:08:47,440
hta file from the first stage

222
00:08:47,440 --> 00:08:50,160
last infection vector that we

223
00:08:50,160 --> 00:08:52,160
saw from this trajectory

224
00:08:52,160 --> 00:08:53,040
is

225
00:08:53,040 --> 00:08:56,000
using an oxml file which is an open

226
00:08:56,000 --> 00:08:57,360
office

227
00:08:57,360 --> 00:09:00,320
document file and this file has an

228
00:09:00,320 --> 00:09:03,839
external reference that would

229
00:09:03,839 --> 00:09:06,240
contact and

230
00:09:06,240 --> 00:09:09,839
retrieve the file from that

231
00:09:09,839 --> 00:09:12,480
remote server and execute on the system

232
00:09:12,480 --> 00:09:16,399
which is again the first stage hda file

233
00:09:16,399 --> 00:09:19,200
now let's talk about the

234
00:09:19,200 --> 00:09:21,200
different components of that hack in a

235
00:09:21,200 --> 00:09:23,440
little bit more detail

236
00:09:23,440 --> 00:09:26,640
so these are some examples of the

237
00:09:26,640 --> 00:09:29,920
of the delivery stage malware

238
00:09:29,920 --> 00:09:32,160
on the top you can see some metadata

239
00:09:32,160 --> 00:09:34,880
from one of the lnk files if you notice

240
00:09:34,880 --> 00:09:36,480
the first line

241
00:09:36,480 --> 00:09:40,880
says the relative path is system 32 cftm

242
00:09:40,880 --> 00:09:44,720
on.xz which is actually a fake name

243
00:09:44,720 --> 00:09:46,399
they have

244
00:09:46,399 --> 00:09:49,360
they actually hide the main

245
00:09:49,360 --> 00:09:51,480
process which is

246
00:09:51,480 --> 00:09:55,120
mshta.exe in other parts of the lnk file

247
00:09:55,120 --> 00:10:00,000
which can even be parts with like normal

248
00:10:00,000 --> 00:10:03,279
lnk file parsers this is

249
00:10:03,279 --> 00:10:04,480
from

250
00:10:04,480 --> 00:10:08,320
010 editor parser for lnk

251
00:10:08,320 --> 00:10:10,800
but anyway you can see also

252
00:10:10,800 --> 00:10:13,519
the command line argument which is

253
00:10:13,519 --> 00:10:15,519
the address to

254
00:10:15,519 --> 00:10:19,839
retrieve the next stage of the attack

255
00:10:21,839 --> 00:10:25,600
and then you can see one example of a

256
00:10:25,600 --> 00:10:27,839
spellfishing document that they've used

257
00:10:27,839 --> 00:10:30,880
this one was actually quite interesting

258
00:10:30,880 --> 00:10:33,279
in this case the attacker sent

259
00:10:33,279 --> 00:10:36,880
an empty document to the victims

260
00:10:36,880 --> 00:10:40,160
empty as in terms of no content but it

261
00:10:40,160 --> 00:10:42,640
actually had a malicious only object

262
00:10:42,640 --> 00:10:46,000
inside with the obfuscated javascript

263
00:10:46,000 --> 00:10:47,040
and then

264
00:10:47,040 --> 00:10:49,519
after a short while they

265
00:10:49,519 --> 00:10:52,320
would send another email to the victim

266
00:10:52,320 --> 00:10:55,279
with a letter like this this is

267
00:10:55,279 --> 00:10:57,920
like an apology letter for the previous

268
00:10:57,920 --> 00:10:59,440
email

269
00:10:59,440 --> 00:11:03,120
this one also had a similar

270
00:11:03,120 --> 00:11:06,079
structure of malware inside but with a

271
00:11:06,079 --> 00:11:07,440
different

272
00:11:07,440 --> 00:11:10,160
command and control server

273
00:11:10,160 --> 00:11:12,800
that malware would communicate with so

274
00:11:12,800 --> 00:11:16,000
even if the um even if the victim was

275
00:11:16,000 --> 00:11:18,399
suspicious that

276
00:11:18,399 --> 00:11:21,680
they have received an empty document

277
00:11:21,680 --> 00:11:24,640
they would receive this document

278
00:11:24,640 --> 00:11:26,959
a short while later

279
00:11:26,959 --> 00:11:28,959
and also at the bottom you can see an

280
00:11:28,959 --> 00:11:31,360
example of the oxml file with the

281
00:11:31,360 --> 00:11:33,839
external reference that

282
00:11:33,839 --> 00:11:36,800
shows the download server for

283
00:11:36,800 --> 00:11:40,399
for the next stage of the attack

284
00:11:40,880 --> 00:11:43,360
talking about the first stage javascript

285
00:11:43,360 --> 00:11:45,680
what it does it um

286
00:11:45,680 --> 00:11:48,720
as i said it's obfuscated i'll show the

287
00:11:48,720 --> 00:11:51,839
obfuscation routine uh in nexus slide

288
00:11:51,839 --> 00:11:53,839
but here let's talk about what it

289
00:11:53,839 --> 00:11:55,200
actually does

290
00:11:55,200 --> 00:11:58,639
it its main responsibility is to collect

291
00:11:58,639 --> 00:12:02,560
list of antivirus products on the system

292
00:12:02,560 --> 00:12:04,720
using wmi

293
00:12:04,720 --> 00:12:06,240
interface

294
00:12:06,240 --> 00:12:09,200
and also decrypt and load a dot net

295
00:12:09,200 --> 00:12:12,399
payload from a serialized stream using

296
00:12:12,399 --> 00:12:14,480
activex object

297
00:12:14,480 --> 00:12:17,920
and this dotnet payload in the case of

298
00:12:17,920 --> 00:12:20,079
the first state javascript is the

299
00:12:20,079 --> 00:12:22,639
downloader module that i mentioned and

300
00:12:22,639 --> 00:12:24,639
in the case of the second stage

301
00:12:24,639 --> 00:12:27,279
javascript is the installer module

302
00:12:27,279 --> 00:12:30,160
also um there is a

303
00:12:30,160 --> 00:12:32,560
encrypted url inside this javascript

304
00:12:32,560 --> 00:12:34,160
that would get

305
00:12:34,160 --> 00:12:37,760
decrypted and passed to the dot-net

306
00:12:37,760 --> 00:12:39,920
payload

307
00:12:39,920 --> 00:12:40,800
for

308
00:12:40,800 --> 00:12:42,000
download

309
00:12:42,000 --> 00:12:45,680
communication with the server later

310
00:12:45,760 --> 00:12:47,360
the url

311
00:12:47,360 --> 00:12:50,880
is created in two forms one is to send

312
00:12:50,880 --> 00:12:52,560
the collected information from the

313
00:12:52,560 --> 00:12:55,839
system to the server and the second url

314
00:12:55,839 --> 00:12:58,720
form is to download the next stage

315
00:12:58,720 --> 00:13:01,040
malware from the server but these things

316
00:13:01,040 --> 00:13:03,680
happen in in the dotnet

317
00:13:03,680 --> 00:13:07,440
downloader module not in the javascript

318
00:13:07,440 --> 00:13:09,680
so talking about the obfuscation used in

319
00:13:09,680 --> 00:13:12,160
the javascript files

320
00:13:12,160 --> 00:13:13,440
this is

321
00:13:13,440 --> 00:13:16,160
the obfuscation method and routines that

322
00:13:16,160 --> 00:13:18,839
they've used throughout 2021

323
00:13:18,839 --> 00:13:22,560
um basically it has

324
00:13:22,560 --> 00:13:26,560
a custom base64 encoding

325
00:13:26,560 --> 00:13:27,920
the top

326
00:13:27,920 --> 00:13:30,720
screenshot is the base64

327
00:13:30,720 --> 00:13:33,279
decoding

328
00:13:33,360 --> 00:13:36,399
routine but you can see that

329
00:13:36,399 --> 00:13:39,120
the line that shows the array the base64

330
00:13:39,120 --> 00:13:41,600
decryption array decoding array is

331
00:13:41,600 --> 00:13:44,399
customized and this was different in in

332
00:13:44,399 --> 00:13:45,199
every

333
00:13:45,199 --> 00:13:48,000
sample every single sample and as i said

334
00:13:48,000 --> 00:13:50,720
we have we've had thousands

335
00:13:50,720 --> 00:13:52,959
around a thousand samples with like

336
00:13:52,959 --> 00:13:55,040
different

337
00:13:55,040 --> 00:13:57,279
different keys and different arrays

338
00:13:57,279 --> 00:14:00,160
also apart from that they have used a

339
00:14:00,160 --> 00:14:03,519
double xor encryption and that means

340
00:14:03,519 --> 00:14:05,760
that there was

341
00:14:05,760 --> 00:14:08,800
there was a xor key that would get

342
00:14:08,800 --> 00:14:11,279
installed with another key and then it

343
00:14:11,279 --> 00:14:13,040
was used to

344
00:14:13,040 --> 00:14:14,880
decrypt

345
00:14:14,880 --> 00:14:17,040
other strings encrypted strings inside

346
00:14:17,040 --> 00:14:20,160
the file these keys were also

347
00:14:20,160 --> 00:14:23,519
unique for each sample

348
00:14:25,040 --> 00:14:27,279
they actually changed the obfuscation

349
00:14:27,279 --> 00:14:29,440
technique

350
00:14:29,440 --> 00:14:30,760
before end of

351
00:14:30,760 --> 00:14:32,320
2021

352
00:14:32,320 --> 00:14:33,680
but they

353
00:14:33,680 --> 00:14:36,160
still continued using it for for some

354
00:14:36,160 --> 00:14:38,800
time alongside the new obfuscation

355
00:14:38,800 --> 00:14:40,079
routine

356
00:14:40,079 --> 00:14:42,800
and then finally fully moved to the new

357
00:14:42,800 --> 00:14:46,880
offication routine in 2020 22.

358
00:14:46,880 --> 00:14:49,839
so what they use

359
00:14:49,839 --> 00:14:52,320
for obfuscation here

360
00:14:52,320 --> 00:14:54,720
is

361
00:14:55,440 --> 00:14:58,560
two two different methods here uh used

362
00:14:58,560 --> 00:15:01,040
in inside like two different techniques

363
00:15:01,040 --> 00:15:03,279
using um in every

364
00:15:03,279 --> 00:15:05,920
javascript file first one that you see

365
00:15:05,920 --> 00:15:09,199
on the left side is basically some sort

366
00:15:09,199 --> 00:15:11,040
of splitting and reversing with

367
00:15:11,040 --> 00:15:12,800
different lengths

368
00:15:12,800 --> 00:15:14,480
and

369
00:15:14,480 --> 00:15:15,920
strings like

370
00:15:15,920 --> 00:15:19,199
splitting each string in

371
00:15:19,199 --> 00:15:22,480
in substrings with various

372
00:15:22,480 --> 00:15:24,720
lengths and reversing and concatenating

373
00:15:24,720 --> 00:15:26,800
these strings and then

374
00:15:26,800 --> 00:15:29,600
the right side you can see

375
00:15:29,600 --> 00:15:32,880
there are different functions defined

376
00:15:32,880 --> 00:15:35,839
these functions are actually defined

377
00:15:35,839 --> 00:15:38,560
from one another like each one is

378
00:15:38,560 --> 00:15:41,120
defined from the prototype of the

379
00:15:41,120 --> 00:15:44,160
previous function with some

380
00:15:44,160 --> 00:15:47,199
again obfuscated strings that would get

381
00:15:47,199 --> 00:15:50,719
the obfuscated through that

382
00:15:51,279 --> 00:15:52,399
through that

383
00:15:52,399 --> 00:15:55,519
splitting and reversing technique

384
00:15:55,519 --> 00:15:57,839
and different parts of the

385
00:15:57,839 --> 00:16:00,639
strings have different keys for exalt

386
00:16:00,639 --> 00:16:02,800
decryption as you see here there are

387
00:16:02,800 --> 00:16:05,120
some you can see some key

388
00:16:05,120 --> 00:16:07,680
8 18

389
00:16:07,680 --> 00:16:11,839
all different xo decryption keys

390
00:16:12,160 --> 00:16:13,199
so

391
00:16:13,199 --> 00:16:15,360
now for the obfuscation

392
00:16:15,360 --> 00:16:17,839
let's talk about the.net

393
00:16:17,839 --> 00:16:20,560
module that was the downloader

394
00:16:20,560 --> 00:16:22,959
it was a sim it is a simple module it

395
00:16:22,959 --> 00:16:24,240
only

396
00:16:24,240 --> 00:16:26,160
checks

397
00:16:26,160 --> 00:16:31,600
system for presence of a few antivirus

398
00:16:31,600 --> 00:16:35,040
programs like as you see here there's a

399
00:16:35,040 --> 00:16:38,720
substring of kaspersky you can see avas

400
00:16:38,720 --> 00:16:41,040
and avg here as well so they would

401
00:16:41,040 --> 00:16:42,800
collect this information and when

402
00:16:42,800 --> 00:16:45,920
communicating with the download server

403
00:16:45,920 --> 00:16:48,560
that they had received from the previous

404
00:16:48,560 --> 00:16:50,880
stage

405
00:16:50,880 --> 00:16:53,279
they would send this information

406
00:16:53,279 --> 00:16:57,120
to the server as well and then finally

407
00:16:57,120 --> 00:16:59,360
this would contact the download server

408
00:16:59,360 --> 00:17:00,959
and download the next stage of the

409
00:17:00,959 --> 00:17:03,120
attack which is another

410
00:17:03,120 --> 00:17:06,559
obfuscated javascript with the same

411
00:17:06,559 --> 00:17:08,640
same structure as we've seen with the

412
00:17:08,640 --> 00:17:10,720
first stage

413
00:17:10,720 --> 00:17:12,079
but that

414
00:17:12,079 --> 00:17:14,319
secondary state javascript the main

415
00:17:14,319 --> 00:17:17,199
payload is another.net module which is

416
00:17:17,199 --> 00:17:20,079
different from the first stage

417
00:17:20,079 --> 00:17:21,679
which was the downloader module this

418
00:17:21,679 --> 00:17:24,559
time is the installer module what this

419
00:17:24,559 --> 00:17:27,280
module does it has some

420
00:17:27,280 --> 00:17:29,600
encrypted strings inside

421
00:17:29,600 --> 00:17:32,320
you can see the name of the variables x

422
00:17:32,320 --> 00:17:36,080
key inst folder domain and reg key

423
00:17:36,080 --> 00:17:38,720
the first one is

424
00:17:38,720 --> 00:17:42,400
x all decryption key second one after

425
00:17:42,400 --> 00:17:45,679
being decrypted shows the address of the

426
00:17:45,679 --> 00:17:46,799
folder

427
00:17:46,799 --> 00:17:48,000
or like

428
00:17:48,000 --> 00:17:50,880
past that the malware uses and creates

429
00:17:50,880 --> 00:17:52,240
for

430
00:17:52,240 --> 00:17:53,440
um

431
00:17:53,440 --> 00:17:55,600
storing different files and

432
00:17:55,600 --> 00:17:57,280
communicating with the server through

433
00:17:57,280 --> 00:17:59,919
that folder like the files that are

434
00:17:59,919 --> 00:18:01,840
stored in that folder

435
00:18:01,840 --> 00:18:03,840
also the domain is

436
00:18:03,840 --> 00:18:06,960
the first part of the

437
00:18:06,960 --> 00:18:08,960
command and control

438
00:18:08,960 --> 00:18:10,000
server

439
00:18:10,000 --> 00:18:12,799
address that is in

440
00:18:12,799 --> 00:18:14,720
stored inside this module the second

441
00:18:14,720 --> 00:18:18,000
part is stored in another module

442
00:18:18,000 --> 00:18:19,760
also the red key

443
00:18:19,760 --> 00:18:21,919
after decryption has the name of the

444
00:18:21,919 --> 00:18:23,679
registry key

445
00:18:23,679 --> 00:18:25,039
registry

446
00:18:25,039 --> 00:18:27,840
value that is registered on the run

447
00:18:27,840 --> 00:18:29,919
registry key for the persistence of the

448
00:18:29,919 --> 00:18:32,160
malware

449
00:18:32,160 --> 00:18:34,559
and as i said the main responsibility is

450
00:18:34,559 --> 00:18:37,120
to drop a few

451
00:18:37,120 --> 00:18:40,080
files on the system

452
00:18:40,080 --> 00:18:42,799
for the final stage of the

453
00:18:42,799 --> 00:18:44,799
matter and these files

454
00:18:44,799 --> 00:18:46,960
are the ones that you see in the list

455
00:18:46,960 --> 00:18:50,080
here the first one are e keywords.xd is

456
00:18:50,080 --> 00:18:52,559
a legitimate file that is copied from

457
00:18:52,559 --> 00:18:54,880
the system directory in the directory

458
00:18:54,880 --> 00:18:56,880
malware directory this file is

459
00:18:56,880 --> 00:18:58,880
vulnerable to dll site loading and is

460
00:18:58,880 --> 00:19:00,080
used to

461
00:19:00,080 --> 00:19:04,080
load the backdoor loader on the system

462
00:19:04,080 --> 00:19:07,200
next file the user.dll this is the back

463
00:19:07,200 --> 00:19:10,480
dll of the backdoor loader this is the

464
00:19:10,480 --> 00:19:13,039
dll that gets loaded through dll side

465
00:19:13,039 --> 00:19:17,160
loading by our eqvs.exe

466
00:19:17,520 --> 00:19:20,480
third file which is which you see here

467
00:19:20,480 --> 00:19:22,480
as random.tmp

468
00:19:22,480 --> 00:19:24,400
is created by

469
00:19:24,400 --> 00:19:24,830
um

470
00:19:24,830 --> 00:19:26,960
[Music]

471
00:19:26,960 --> 00:19:28,320
decrypting

472
00:19:28,320 --> 00:19:29,840
uh the main

473
00:19:29,840 --> 00:19:32,640
the main backdoor content that is inside

474
00:19:32,640 --> 00:19:35,840
the installer module um changing it a

475
00:19:35,840 --> 00:19:38,480
little bit adding the domain

476
00:19:38,480 --> 00:19:42,080
um the decrypted domain um to some parts

477
00:19:42,080 --> 00:19:43,760
of the

478
00:19:43,760 --> 00:19:46,160
malware body and then encrypting the

479
00:19:46,160 --> 00:19:49,039
backdoor again with a new randomly

480
00:19:49,039 --> 00:19:51,360
generated 32

481
00:19:51,360 --> 00:19:52,720
byte

482
00:19:52,720 --> 00:19:55,440
xor key

483
00:19:55,679 --> 00:19:57,520
and gets dropped on the system with the

484
00:19:57,520 --> 00:20:00,320
random name and tmp extension

485
00:20:00,320 --> 00:20:02,039
also the

486
00:20:02,039 --> 00:20:04,559
rekvis.exe.config has some

487
00:20:04,559 --> 00:20:07,120
config information about like setting

488
00:20:07,120 --> 00:20:10,720
system policies for uh folder.net

489
00:20:10,720 --> 00:20:12,559
like and the dotnet environment

490
00:20:12,559 --> 00:20:14,400
variables

491
00:20:14,400 --> 00:20:16,480
the last thing that it does is to create

492
00:20:16,480 --> 00:20:18,960
persistence as i said by creating a sub

493
00:20:18,960 --> 00:20:22,640
key on the run registry key for the

494
00:20:22,640 --> 00:20:26,600
for the re keywise.xz

495
00:20:27,120 --> 00:20:28,000
so

496
00:20:28,000 --> 00:20:30,640
next stage is the backdoor loader which

497
00:20:30,640 --> 00:20:33,120
is the user.dll

498
00:20:33,120 --> 00:20:35,520
the dll that gets loaded through dll

499
00:20:35,520 --> 00:20:38,080
side loading on the system

500
00:20:38,080 --> 00:20:41,520
so what it does it looks at

501
00:20:41,520 --> 00:20:44,880
the file with the tmp extension which is

502
00:20:44,880 --> 00:20:47,200
the encrypted

503
00:20:47,200 --> 00:20:49,760
final payload final backdoor it decrypts

504
00:20:49,760 --> 00:20:52,799
the file as you see here and this is the

505
00:20:52,799 --> 00:20:55,039
decryption routine with

506
00:20:55,039 --> 00:20:56,799
xor key

507
00:20:56,799 --> 00:20:58,880
32.x or key

508
00:20:58,880 --> 00:21:00,880
and at the end loads the final payload

509
00:21:00,880 --> 00:21:02,880
in memory

510
00:21:02,880 --> 00:21:06,159
the final backdoor is also another

511
00:21:06,159 --> 00:21:09,120
dotnet module it has

512
00:21:09,120 --> 00:21:10,080
four

513
00:21:10,080 --> 00:21:12,480
different classes inside

514
00:21:12,480 --> 00:21:16,640
see here in the screenshot above the

515
00:21:16,640 --> 00:21:20,400
classes um or file listing program

516
00:21:20,400 --> 00:21:22,559
structure flyweight something something

517
00:21:22,559 --> 00:21:25,039
this is a this is not a legitimate name

518
00:21:25,039 --> 00:21:27,520
this is a name that they use then like

519
00:21:27,520 --> 00:21:28,799
different names that they use in

520
00:21:28,799 --> 00:21:30,559
different

521
00:21:30,559 --> 00:21:33,440
different examples just to look like

522
00:21:33,440 --> 00:21:35,440
it's a legitimate

523
00:21:35,440 --> 00:21:37,840
module from some application and then

524
00:21:37,840 --> 00:21:40,799
last one is this info so what each of

525
00:21:40,799 --> 00:21:43,120
these classes are responsible for the

526
00:21:43,120 --> 00:21:45,840
first one is responsible for uh for a

527
00:21:45,840 --> 00:21:47,760
listing as it's

528
00:21:47,760 --> 00:21:50,400
it can be seen from the name

529
00:21:50,400 --> 00:21:52,880
it is used to collect information about

530
00:21:52,880 --> 00:21:54,559
different files and directories on the

531
00:21:54,559 --> 00:21:56,559
system all sorts of information like

532
00:21:56,559 --> 00:21:58,000
different

533
00:21:58,000 --> 00:22:00,080
access types

534
00:22:00,080 --> 00:22:02,960
different timer stamps and so on

535
00:22:02,960 --> 00:22:04,400
the program

536
00:22:04,400 --> 00:22:07,520
class is used for

537
00:22:07,520 --> 00:22:08,400
initial

538
00:22:08,400 --> 00:22:10,240
initiating the communication with the

539
00:22:10,240 --> 00:22:12,480
command and control server

540
00:22:12,480 --> 00:22:14,240
the third

541
00:22:14,240 --> 00:22:16,320
class with the long name this is the

542
00:22:16,320 --> 00:22:18,240
main

543
00:22:18,240 --> 00:22:20,159
backdoor communication

544
00:22:20,159 --> 00:22:21,600
class

545
00:22:21,600 --> 00:22:23,280
in in the malware

546
00:22:23,280 --> 00:22:25,600
and also the last one season collects

547
00:22:25,600 --> 00:22:28,880
all sorts of information from the system

548
00:22:28,880 --> 00:22:30,960
from

549
00:22:30,960 --> 00:22:33,360
information about different drives

550
00:22:33,360 --> 00:22:35,600
the free space the user space

551
00:22:35,600 --> 00:22:38,799
information about like

552
00:22:39,120 --> 00:22:40,400
hotfix

553
00:22:40,400 --> 00:22:43,840
id numbers and

554
00:22:43,840 --> 00:22:46,480
install dates that are found on the

555
00:22:46,480 --> 00:22:49,039
system information about different users

556
00:22:49,039 --> 00:22:52,080
different processes their owners

557
00:22:52,080 --> 00:22:54,559
the command lines all sorts of

558
00:22:54,559 --> 00:22:56,640
information

559
00:22:56,640 --> 00:22:58,640
um also the back door has a

560
00:22:58,640 --> 00:23:01,200
configuration block that is encrypted

561
00:23:01,200 --> 00:23:03,679
as you see here um

562
00:23:03,679 --> 00:23:06,159
if if it's big enough you can notice

563
00:23:06,159 --> 00:23:09,679
that the first two rows that

564
00:23:09,679 --> 00:23:12,720
show the xor

565
00:23:12,720 --> 00:23:15,360
key for decryption and encryption and

566
00:23:15,360 --> 00:23:18,240
once it's decrypted um there are

567
00:23:18,240 --> 00:23:19,760
different information inside this

568
00:23:19,760 --> 00:23:23,200
configuration block it starts at offset

569
00:23:23,200 --> 00:23:24,720
0x20

570
00:23:24,720 --> 00:23:26,080
with a

571
00:23:26,080 --> 00:23:28,640
directory that is created by the

572
00:23:28,640 --> 00:23:30,640
previous stage to store different files

573
00:23:30,640 --> 00:23:31,840
on the system

574
00:23:31,840 --> 00:23:34,720
uh also another directory that is used

575
00:23:34,720 --> 00:23:37,280
for

576
00:23:37,280 --> 00:23:41,279
storing other files like files that are

577
00:23:41,279 --> 00:23:44,320
prepared with the system information

578
00:23:44,320 --> 00:23:45,840
and then you can see a list of file

579
00:23:45,840 --> 00:23:48,400
extensions these are the extensions for

580
00:23:48,400 --> 00:23:51,679
the files that the actor translator is

581
00:23:51,679 --> 00:23:54,799
interested in to collect from the system

582
00:23:54,799 --> 00:23:58,640
um it can actually be um be updated with

583
00:23:58,640 --> 00:24:00,000
with a

584
00:24:00,000 --> 00:24:02,559
with the relevant command

585
00:24:02,559 --> 00:24:04,080
you can look at the back door commands

586
00:24:04,080 --> 00:24:04,880
and

587
00:24:04,880 --> 00:24:07,520
capabilities that the final backdoor

588
00:24:07,520 --> 00:24:10,159
has it can collect system information

589
00:24:10,159 --> 00:24:12,400
collect file listing

590
00:24:12,400 --> 00:24:14,159
collect selected files with the

591
00:24:14,159 --> 00:24:15,919
extension

592
00:24:15,919 --> 00:24:18,159
the specific extensions that the

593
00:24:18,159 --> 00:24:20,320
attackers are interested in

594
00:24:20,320 --> 00:24:23,039
also it can update the command and

595
00:24:23,039 --> 00:24:25,360
control server address it can update the

596
00:24:25,360 --> 00:24:27,919
configuration block

597
00:24:27,919 --> 00:24:30,559
can set a flag to upload collected files

598
00:24:30,559 --> 00:24:33,520
to the server or stop send communicating

599
00:24:33,520 --> 00:24:36,720
with the server for some time

600
00:24:36,720 --> 00:24:39,039
also it can update the list of file

601
00:24:39,039 --> 00:24:41,200
extensions to collect

602
00:24:41,200 --> 00:24:43,840
it can update the maximum upload file

603
00:24:43,840 --> 00:24:45,440
size

604
00:24:45,440 --> 00:24:48,400
in terms of systems that

605
00:24:48,400 --> 00:24:49,679
have

606
00:24:49,679 --> 00:24:50,880
like

607
00:24:50,880 --> 00:24:53,760
certain circumstances that the attackers

608
00:24:53,760 --> 00:24:57,120
decide not to send like huge files

609
00:24:57,120 --> 00:24:59,200
to the server

610
00:24:59,200 --> 00:25:01,919
also it can receive a

611
00:25:01,919 --> 00:25:04,320
path of a specific file to upload to the

612
00:25:04,320 --> 00:25:06,640
server and also

613
00:25:06,640 --> 00:25:08,400
saving the configuration block that's

614
00:25:08,400 --> 00:25:11,039
been updated

615
00:25:11,039 --> 00:25:12,559
okay

616
00:25:12,559 --> 00:25:14,400
so that was all about the malware

617
00:25:14,400 --> 00:25:16,559
components let's talk a little bit about

618
00:25:16,559 --> 00:25:19,120
the infrastructure um

619
00:25:19,120 --> 00:25:21,919
as i said they've been maintaining more

620
00:25:21,919 --> 00:25:22,720
than

621
00:25:22,720 --> 00:25:24,960
um they've been maintaining hundreds

622
00:25:24,960 --> 00:25:27,279
actually more than 400 domains and

623
00:25:27,279 --> 00:25:29,520
subdomains for that in their attacks in

624
00:25:29,520 --> 00:25:32,640
the past two years we've seen them using

625
00:25:32,640 --> 00:25:34,000
like

626
00:25:34,000 --> 00:25:35,600
different domains and different sub

627
00:25:35,600 --> 00:25:37,039
domains for

628
00:25:37,039 --> 00:25:38,000
one

629
00:25:38,000 --> 00:25:42,000
um like individual victim over and over

630
00:25:42,000 --> 00:25:44,480
registering new domains or new sub

631
00:25:44,480 --> 00:25:46,159
domains and

632
00:25:46,159 --> 00:25:49,360
contacting the victim again with these

633
00:25:49,360 --> 00:25:50,960
new domains

634
00:25:50,960 --> 00:25:51,840
over

635
00:25:51,840 --> 00:25:56,080
over a period of few months

636
00:25:56,080 --> 00:25:57,919
so talking about the domains they are

637
00:25:57,919 --> 00:26:00,880
basically categorized in two

638
00:26:00,880 --> 00:26:02,400
categories

639
00:26:02,400 --> 00:26:04,799
the first group of domains

640
00:26:04,799 --> 00:26:05,919
which

641
00:26:05,919 --> 00:26:08,000
are the first stage domains they are

642
00:26:08,000 --> 00:26:10,400
used for different purposes

643
00:26:10,400 --> 00:26:12,480
like

644
00:26:12,480 --> 00:26:15,360
they are used in urls to download the

645
00:26:15,360 --> 00:26:17,440
first stage malware

646
00:26:17,440 --> 00:26:18,880
which are used in a spare phishing

647
00:26:18,880 --> 00:26:21,279
modules like the lnk files and all xml

648
00:26:21,279 --> 00:26:22,640
files

649
00:26:22,640 --> 00:26:24,880
there are also urls

650
00:26:24,880 --> 00:26:28,880
to send collected information by

651
00:26:28,880 --> 00:26:32,320
the first stage malware to the server

652
00:26:32,320 --> 00:26:33,120
um

653
00:26:33,120 --> 00:26:35,600
there are urls to download the second

654
00:26:35,600 --> 00:26:38,240
stage malware as well

655
00:26:38,240 --> 00:26:39,840
and these urls

656
00:26:39,840 --> 00:26:41,600
are

657
00:26:41,600 --> 00:26:43,360
created from the

658
00:26:43,360 --> 00:26:44,240
first

659
00:26:44,240 --> 00:26:46,960
the first stage domains as you see here

660
00:26:46,960 --> 00:26:49,520
there are some patterns that

661
00:26:49,520 --> 00:26:51,279
that we could

662
00:26:51,279 --> 00:26:53,440
we could extract from this

663
00:26:53,440 --> 00:26:56,400
from these urls like the urls that are

664
00:26:56,400 --> 00:26:59,120
used to download the first stage malware

665
00:26:59,120 --> 00:27:00,320
has this

666
00:27:00,320 --> 00:27:04,840
2 0 0 in um in the urls the

667
00:27:04,840 --> 00:27:08,240
um the ones that are used to download

668
00:27:08,240 --> 00:27:10,080
second stage malware has a different

669
00:27:10,080 --> 00:27:11,120
pattern

670
00:27:11,120 --> 00:27:12,000
um

671
00:27:12,000 --> 00:27:14,320
the one that are used for

672
00:27:14,320 --> 00:27:16,799
collect sending collected security

673
00:27:16,799 --> 00:27:18,720
software module names have different

674
00:27:18,720 --> 00:27:20,960
pattern

675
00:27:20,960 --> 00:27:22,159
also

676
00:27:22,159 --> 00:27:24,640
there are there's another pattern in the

677
00:27:24,640 --> 00:27:26,399
files that

678
00:27:26,399 --> 00:27:30,080
you can see these images in in the

679
00:27:30,080 --> 00:27:32,720
url that comes right after the

680
00:27:32,720 --> 00:27:35,919
um domain and these are also used in the

681
00:27:35,919 --> 00:27:39,120
lnk files in the osml files and also

682
00:27:39,120 --> 00:27:40,960
sometimes in the um

683
00:27:40,960 --> 00:27:42,880
in the download

684
00:27:42,880 --> 00:27:44,080
in the

685
00:27:44,080 --> 00:27:46,080
javascript audio files that would

686
00:27:46,080 --> 00:27:47,840
immediately download the second stage

687
00:27:47,840 --> 00:27:51,360
and skip the first stage

688
00:27:51,600 --> 00:27:54,799
apart from that domains there are also

689
00:27:54,799 --> 00:27:56,559
another and there's also another

690
00:27:56,559 --> 00:27:57,919
category which is the command and

691
00:27:57,919 --> 00:27:59,520
control domains these are completely

692
00:27:59,520 --> 00:28:02,480
different domains from the first ones

693
00:28:02,480 --> 00:28:04,880
these domains are used in the final

694
00:28:04,880 --> 00:28:06,799
stage of the attack

695
00:28:06,799 --> 00:28:09,600
these are used for city communication

696
00:28:09,600 --> 00:28:11,120
and as i said

697
00:28:11,120 --> 00:28:14,159
they are split into two parts first part

698
00:28:14,159 --> 00:28:16,640
is inside one

699
00:28:16,640 --> 00:28:17,760
malware

700
00:28:17,760 --> 00:28:21,200
component and second part is

701
00:28:21,200 --> 00:28:23,120
stored in another malware component they

702
00:28:23,120 --> 00:28:25,760
get decrypted and concatenated and used

703
00:28:25,760 --> 00:28:26,960
for

704
00:28:26,960 --> 00:28:28,840
command and control

705
00:28:28,840 --> 00:28:30,799
communication

706
00:28:30,799 --> 00:28:32,159
so

707
00:28:32,159 --> 00:28:35,679
that was it from the technical details

708
00:28:35,679 --> 00:28:37,520
let's talk a little bit about the

709
00:28:37,520 --> 00:28:40,480
investigation and

710
00:28:40,480 --> 00:28:42,960
like some techniques that

711
00:28:42,960 --> 00:28:45,039
i've used

712
00:28:45,039 --> 00:28:47,440
and i'm happy to

713
00:28:47,440 --> 00:28:49,120
hear if

714
00:28:49,120 --> 00:28:51,279
if someone else has been tracking this

715
00:28:51,279 --> 00:28:53,919
threat actor and they have other ways to

716
00:28:53,919 --> 00:28:56,080
to hunt for their new malwares and to do

717
00:28:56,080 --> 00:28:57,679
the analysis

718
00:28:57,679 --> 00:29:00,240
so basically

719
00:29:00,240 --> 00:29:02,960
first thing looking for new samples from

720
00:29:02,960 --> 00:29:06,320
known modules through antivirus verdicts

721
00:29:06,320 --> 00:29:09,279
or euro rules as i said there are lots

722
00:29:09,279 --> 00:29:10,480
of

723
00:29:10,480 --> 00:29:12,640
stages of the attack that

724
00:29:12,640 --> 00:29:14,080
are

725
00:29:14,080 --> 00:29:17,200
decrypted and loaded only in memory so

726
00:29:17,200 --> 00:29:19,840
there are only a few

727
00:29:19,840 --> 00:29:23,039
few malware components that can be

728
00:29:23,039 --> 00:29:25,840
used to

729
00:29:25,840 --> 00:29:28,799
to catch with the aura rules uh or to

730
00:29:28,799 --> 00:29:30,159
catch with like

731
00:29:30,159 --> 00:29:32,080
antwara signatures

732
00:29:32,080 --> 00:29:34,880
um also looking for patterns in

733
00:29:34,880 --> 00:29:37,600
malicious urls as i said this one this

734
00:29:37,600 --> 00:29:40,399
has been quite helpful for me looking

735
00:29:40,399 --> 00:29:42,640
for those patterns that we saw

736
00:29:42,640 --> 00:29:44,720
highlighted in the infrastructure

737
00:29:44,720 --> 00:29:46,720
analysis section

738
00:29:46,720 --> 00:29:47,760
in the

739
00:29:47,760 --> 00:29:49,679
antivirus detection

740
00:29:49,679 --> 00:29:52,240
logs in network logs in

741
00:29:52,240 --> 00:29:55,120
virustotal search to look for new

742
00:29:55,120 --> 00:29:56,799
domains that were

743
00:29:56,799 --> 00:30:00,080
registered by this trade actor

744
00:30:00,080 --> 00:30:02,320
also talking about the analysis

745
00:30:02,320 --> 00:30:05,679
um as i said there were

746
00:30:05,679 --> 00:30:09,440
about a thousand um different javascript

747
00:30:09,440 --> 00:30:11,279
files that i had

748
00:30:11,279 --> 00:30:14,960
actually the javascript files are after

749
00:30:14,960 --> 00:30:16,559
extracting from

750
00:30:16,559 --> 00:30:19,279
rtf modules from

751
00:30:19,279 --> 00:30:20,840
download

752
00:30:20,840 --> 00:30:24,080
downloaded like from um

753
00:30:24,080 --> 00:30:26,480
network communication of the lnk files

754
00:30:26,480 --> 00:30:28,559
and all xml modules

755
00:30:28,559 --> 00:30:30,720
so

756
00:30:30,880 --> 00:30:33,360
the main part was to extract

757
00:30:33,360 --> 00:30:35,120
different components from this

758
00:30:35,120 --> 00:30:36,720
javascript files

759
00:30:36,720 --> 00:30:37,919
um

760
00:30:37,919 --> 00:30:39,279
it

761
00:30:39,279 --> 00:30:41,200
it could be done through

762
00:30:41,200 --> 00:30:43,919
the obfuscating javascripts with an off

763
00:30:43,919 --> 00:30:46,480
the shelf tool i didn't

764
00:30:46,480 --> 00:30:49,279
do that i thought it's more fun to write

765
00:30:49,279 --> 00:30:52,159
a short de-offer skater to de-obfuscate

766
00:30:52,159 --> 00:30:53,440
the files and extract different

767
00:30:53,440 --> 00:30:55,120
components from the files

768
00:30:55,120 --> 00:30:57,360
which was not that difficult it was

769
00:30:57,360 --> 00:30:59,590
quite fun i just used the

770
00:30:59,590 --> 00:31:00,799
[Music]

771
00:31:00,799 --> 00:31:04,159
use the regular expression um

772
00:31:04,159 --> 00:31:06,480
library from python to

773
00:31:06,480 --> 00:31:08,799
find keys and find the

774
00:31:08,799 --> 00:31:12,480
array of the base64 decryption and find

775
00:31:12,480 --> 00:31:14,960
different parts of the

776
00:31:14,960 --> 00:31:17,279
different parts of the

777
00:31:17,279 --> 00:31:19,519
strings of scatter strings

778
00:31:19,519 --> 00:31:20,720
from

779
00:31:20,720 --> 00:31:23,039
the script files and use them to

780
00:31:23,039 --> 00:31:25,600
de-obfuscate that same script and

781
00:31:25,600 --> 00:31:27,279
extract

782
00:31:27,279 --> 00:31:30,640
other components from it

783
00:31:31,360 --> 00:31:33,200
and then um

784
00:31:33,200 --> 00:31:34,559
i had the

785
00:31:34,559 --> 00:31:36,640
dot-net modules that were extracted from

786
00:31:36,640 --> 00:31:39,360
the javascript files uh also used

787
00:31:39,360 --> 00:31:41,679
another um

788
00:31:41,679 --> 00:31:42,880
small

789
00:31:42,880 --> 00:31:46,440
script for decrypting um the

790
00:31:46,440 --> 00:31:49,120
embedded.net modules from

791
00:31:49,120 --> 00:31:50,640
from these

792
00:31:50,640 --> 00:31:53,600
from these samples

793
00:31:55,200 --> 00:31:57,679
also extracted the urls from the first

794
00:31:57,679 --> 00:32:02,000
stage communication with the servers

795
00:32:02,000 --> 00:32:04,559
last part is was to

796
00:32:04,559 --> 00:32:08,159
extract final c2 address

797
00:32:08,159 --> 00:32:10,159
which

798
00:32:10,159 --> 00:32:12,159
which i couldn't done

799
00:32:12,159 --> 00:32:15,919
in the um in the same uh script that i

800
00:32:15,919 --> 00:32:18,960
used for the obfuscation because i had

801
00:32:18,960 --> 00:32:22,080
to extract uh the back final vector

802
00:32:22,080 --> 00:32:24,320
modules and then the factor modules were

803
00:32:24,320 --> 00:32:27,200
net modules i had to go through them to

804
00:32:27,200 --> 00:32:29,919
see how i can decrypt the final command

805
00:32:29,919 --> 00:32:31,600
and control address

806
00:32:31,600 --> 00:32:33,760
but the good thing was that

807
00:32:33,760 --> 00:32:36,320
the number of the final backdoor modules

808
00:32:36,320 --> 00:32:38,000
were

809
00:32:38,000 --> 00:32:40,480
not in thousands

810
00:32:40,480 --> 00:32:42,399
it was maybe like

811
00:32:42,399 --> 00:32:44,399
one hundredth of the number of the

812
00:32:44,399 --> 00:32:46,880
unique first stage malwares and this is

813
00:32:46,880 --> 00:32:48,559
actually um

814
00:32:48,559 --> 00:32:50,320
this actually shows how the attackers

815
00:32:50,320 --> 00:32:52,480
work they didn't

816
00:32:52,480 --> 00:32:54,399
compile

817
00:32:54,399 --> 00:32:59,039
new backdoor modules every time they

818
00:32:59,039 --> 00:33:00,960
they try to

819
00:33:00,960 --> 00:33:03,360
just use um

820
00:33:03,360 --> 00:33:05,679
a different and unique

821
00:33:05,679 --> 00:33:07,279
um

822
00:33:07,279 --> 00:33:09,760
like first stage just to

823
00:33:09,760 --> 00:33:12,799
postpone the detection for like few

824
00:33:12,799 --> 00:33:13,919
stages

825
00:33:13,919 --> 00:33:15,919
until the final backdoor

826
00:33:15,919 --> 00:33:19,440
which would actually be only in memory

827
00:33:19,440 --> 00:33:21,600
um and at the end

828
00:33:21,600 --> 00:33:23,840
using a script to decrypt the final c2

829
00:33:23,840 --> 00:33:26,320
addresses and

830
00:33:26,320 --> 00:33:28,399
concatenate the two parts of the final

831
00:33:28,399 --> 00:33:31,360
c2 addresses together

832
00:33:31,360 --> 00:33:35,918
a little bit of the mitigation and

833
00:33:37,679 --> 00:33:38,880
how to

834
00:33:38,880 --> 00:33:39,840
um

835
00:33:39,840 --> 00:33:43,200
keep safe from this uh trade actor first

836
00:33:43,200 --> 00:33:45,919
of all as i said they are um

837
00:33:45,919 --> 00:33:48,080
as we we saw they are quite

838
00:33:48,080 --> 00:33:49,919
sophisticated but

839
00:33:49,919 --> 00:33:52,080
for the most of the

840
00:33:52,080 --> 00:33:53,919
attacks they relied on an old

841
00:33:53,919 --> 00:33:57,200
vulnerability in microsoft world so an

842
00:33:57,200 --> 00:33:59,600
up to date microsoft office would stop

843
00:33:59,600 --> 00:34:02,640
the attack at an entry point from

844
00:34:02,640 --> 00:34:04,720
a lot of cases

845
00:34:04,720 --> 00:34:08,239
also with other cases like the oxml file

846
00:34:08,239 --> 00:34:10,480
just customizing settings and not

847
00:34:10,480 --> 00:34:12,639
allowing the

848
00:34:12,639 --> 00:34:14,960
the remote communication would stop

849
00:34:14,960 --> 00:34:15,839
those

850
00:34:15,839 --> 00:34:18,159
attacks as well those

851
00:34:18,159 --> 00:34:20,480
infection chains as well

852
00:34:20,480 --> 00:34:21,918
again

853
00:34:21,918 --> 00:34:23,679
application white listing to stop

854
00:34:23,679 --> 00:34:25,119
different malicious components to

855
00:34:25,119 --> 00:34:26,480
execute

856
00:34:26,480 --> 00:34:29,839
also network detection rules with

857
00:34:29,839 --> 00:34:32,159
with the patterns and also

858
00:34:32,159 --> 00:34:33,119
other

859
00:34:33,119 --> 00:34:35,760
specific

860
00:34:35,760 --> 00:34:38,079
specific communication details

861
00:34:38,079 --> 00:34:40,399
that the malware has with its

862
00:34:40,399 --> 00:34:43,119
server can be used

863
00:34:43,119 --> 00:34:44,480
and

864
00:34:44,480 --> 00:34:46,560
secure the advanced security product to

865
00:34:46,560 --> 00:34:49,119
detect memory resident malwares and the

866
00:34:49,119 --> 00:34:52,800
whole infection chain would also

867
00:34:53,280 --> 00:34:55,440
help

868
00:34:55,440 --> 00:34:56,960
conclusion

869
00:34:56,960 --> 00:34:59,599
this trajectory is

870
00:34:59,599 --> 00:35:01,920
has traditionally had a quite niche

871
00:35:01,920 --> 00:35:04,160
target profile but they

872
00:35:04,160 --> 00:35:06,640
are expanding and

873
00:35:06,640 --> 00:35:08,079
targeting

874
00:35:08,079 --> 00:35:11,839
different industries now

875
00:35:11,839 --> 00:35:15,280
they had a significantly large number of

876
00:35:15,280 --> 00:35:17,680
attacks compared to many other threat

877
00:35:17,680 --> 00:35:20,079
actors that we have been tracking

878
00:35:20,079 --> 00:35:22,079
they are extremely persistent with

879
00:35:22,079 --> 00:35:24,240
multiple attempts to compromise each

880
00:35:24,240 --> 00:35:26,720
victim with newly compiled malwares and

881
00:35:26,720 --> 00:35:29,280
newly registered domains over and over

882
00:35:29,280 --> 00:35:30,800
again

883
00:35:30,800 --> 00:35:33,200
they have a highly um

884
00:35:33,200 --> 00:35:36,320
they have a high level of sophistication

885
00:35:36,320 --> 00:35:38,560
with many techniques that they've used

886
00:35:38,560 --> 00:35:39,520
and they've

887
00:35:39,520 --> 00:35:41,839
also been updating like the obfuscation

888
00:35:41,839 --> 00:35:44,640
routines that they've been updating

889
00:35:44,640 --> 00:35:46,880
from time to time

890
00:35:46,880 --> 00:35:49,599
and this shows that they are quite

891
00:35:49,599 --> 00:35:53,680
resourceful and quite advanced

892
00:35:55,119 --> 00:35:56,480
that was it

893
00:35:56,480 --> 00:35:58,960
then we have a few minutes if you have

894
00:35:58,960 --> 00:36:03,200
questions i'm happy to answer

895
00:36:03,520 --> 00:36:07,280
we do not have any questions from our

896
00:36:07,280 --> 00:36:09,440
virtual audience

897
00:36:09,440 --> 00:36:13,520
so i would like to open up the floor for

898
00:36:13,520 --> 00:36:15,680
the sure there's actually

899
00:36:15,680 --> 00:36:17,920
you can just head on to the microphone

900
00:36:17,920 --> 00:36:19,440
thank you

901
00:36:19,440 --> 00:36:21,119
uh hi i'm simon show and i'm a

902
00:36:21,119 --> 00:36:24,240
journalist with the register

903
00:36:24,240 --> 00:36:26,000
two or three questions firstly

904
00:36:26,000 --> 00:36:28,240
sidewinder has in the past been linked

905
00:36:28,240 --> 00:36:29,599
to india

906
00:36:29,599 --> 00:36:32,880
do you believe that's still the case

907
00:36:32,880 --> 00:36:34,960
and secondly a couple of the target

908
00:36:34,960 --> 00:36:36,560
nations you've mentioned pakistan

909
00:36:36,560 --> 00:36:38,480
bangladesh they've certainly had some

910
00:36:38,480 --> 00:36:40,880
issues with unlicensed software being

911
00:36:40,880 --> 00:36:42,720
used in government

912
00:36:42,720 --> 00:36:45,760
do you think that that has

913
00:36:45,760 --> 00:36:47,920
enabled sidewinder to

914
00:36:47,920 --> 00:36:48,800
to

915
00:36:48,800 --> 00:36:50,320
be more potent

916
00:36:50,320 --> 00:36:52,640
and lastly why do you think sidewinder

917
00:36:52,640 --> 00:36:57,680
has accelerated its number of attacks

918
00:36:57,680 --> 00:37:00,079
okay um so if i remember all the

919
00:37:00,079 --> 00:37:03,920
questions first one um

920
00:37:03,920 --> 00:37:04,880
so

921
00:37:04,880 --> 00:37:07,280
when we when we initially started

922
00:37:07,280 --> 00:37:10,400
looking and tracking this protector we

923
00:37:10,400 --> 00:37:11,839
had seen some

924
00:37:11,839 --> 00:37:14,640
private companies there was one company

925
00:37:14,640 --> 00:37:17,359
based out of india that

926
00:37:17,359 --> 00:37:19,920
we had we found some connections with

927
00:37:19,920 --> 00:37:22,480
the malware components it was years ago

928
00:37:22,480 --> 00:37:23,440
but

929
00:37:23,440 --> 00:37:25,760
over the years the attribution became

930
00:37:25,760 --> 00:37:26,640
more

931
00:37:26,640 --> 00:37:28,960
difficult as

932
00:37:28,960 --> 00:37:32,320
you know with the privacy

933
00:37:32,320 --> 00:37:35,520
privacy protections used in reducing

934
00:37:35,520 --> 00:37:38,240
domains and also

935
00:37:38,240 --> 00:37:41,119
interesting case with this protector

936
00:37:41,119 --> 00:37:42,880
there's also another threat actor that

937
00:37:42,880 --> 00:37:45,520
we've been tracking

938
00:37:45,520 --> 00:37:47,920
the site copy protector it's a

939
00:37:47,920 --> 00:37:50,320
completely different detector but they

940
00:37:50,320 --> 00:37:51,520
they've been

941
00:37:51,520 --> 00:37:52,880
trying to

942
00:37:52,880 --> 00:37:55,119
um

943
00:37:55,680 --> 00:37:57,680
they were trying to impersonate as

944
00:37:57,680 --> 00:37:59,119
sidewinder

945
00:37:59,119 --> 00:38:00,720
and use different

946
00:38:00,720 --> 00:38:04,400
malware components um like the same

947
00:38:04,400 --> 00:38:05,680
same

948
00:38:05,680 --> 00:38:07,839
infrastructure

949
00:38:07,839 --> 00:38:09,599
sorry same structure for matter

950
00:38:09,599 --> 00:38:12,400
components same file names even with the

951
00:38:12,400 --> 00:38:15,920
new obfuscation routine that the site

952
00:38:15,920 --> 00:38:19,359
winder started using more frequently in

953
00:38:19,359 --> 00:38:21,359
2022

954
00:38:21,359 --> 00:38:24,320
we've seen site copy copying the same um

955
00:38:24,320 --> 00:38:26,560
obfuscation routines for the for their

956
00:38:26,560 --> 00:38:30,640
javascripts as well so all these facts

957
00:38:30,640 --> 00:38:33,680
they they all add up to make

958
00:38:33,680 --> 00:38:35,760
the attribution more difficult so it's

959
00:38:35,760 --> 00:38:36,640
not

960
00:38:36,640 --> 00:38:39,040
it's not easy i mean it's not

961
00:38:39,040 --> 00:38:42,720
there's no um facts that i can use to

962
00:38:42,720 --> 00:38:44,160
say that they

963
00:38:44,160 --> 00:38:45,440
are

964
00:38:45,440 --> 00:38:48,000
based in this country or uh connected to

965
00:38:48,000 --> 00:38:49,520
that country

966
00:38:49,520 --> 00:38:50,640
um

967
00:38:50,640 --> 00:38:53,040
your next question was

968
00:38:53,040 --> 00:38:54,960
about the

969
00:38:54,960 --> 00:38:57,520
industries that they're targeting

970
00:38:57,520 --> 00:39:00,240
unlicensed software and if that's uh

971
00:39:00,240 --> 00:39:02,079
unlicensed software in the target

972
00:39:02,079 --> 00:39:04,640
industries and if that helps them to

973
00:39:04,640 --> 00:39:06,000
to attack

974
00:39:06,000 --> 00:39:07,359
okay

975
00:39:07,359 --> 00:39:09,598
so

976
00:39:09,760 --> 00:39:11,440
good question

977
00:39:11,440 --> 00:39:14,480
i've actually seen them using similar

978
00:39:14,480 --> 00:39:16,160
malwares

979
00:39:16,160 --> 00:39:17,119
to

980
00:39:17,119 --> 00:39:19,760
target some of the softwares that are

981
00:39:19,760 --> 00:39:20,880
used

982
00:39:20,880 --> 00:39:22,800
in in different countries like the

983
00:39:22,800 --> 00:39:25,760
software's that are used during the

984
00:39:25,760 --> 00:39:27,760
pandemic time for like

985
00:39:27,760 --> 00:39:28,960
tracking

986
00:39:28,960 --> 00:39:29,920
um

987
00:39:29,920 --> 00:39:32,960
like draw location tracking but but they

988
00:39:32,960 --> 00:39:35,040
they only use like

989
00:39:35,040 --> 00:39:36,320
document

990
00:39:36,320 --> 00:39:38,480
like phishing documents

991
00:39:38,480 --> 00:39:44,400
with that theme and that name to trick

992
00:39:44,400 --> 00:39:48,000
victims to click on links

993
00:39:48,000 --> 00:39:49,280
more

994
00:39:49,280 --> 00:39:50,720
and and get a better

995
00:39:50,720 --> 00:39:54,960
foothold on the victims system i

996
00:39:54,960 --> 00:39:57,200
i don't have any information about the

997
00:39:57,200 --> 00:39:59,680
softwares

998
00:40:00,400 --> 00:40:01,280
and

999
00:40:01,280 --> 00:40:03,839
your last question was about the sheer

1000
00:40:03,839 --> 00:40:06,800
volume of the attacks that they've been

1001
00:40:06,800 --> 00:40:08,880
performing right

1002
00:40:08,880 --> 00:40:12,240
um i guess they've they've um always

1003
00:40:12,240 --> 00:40:14,800
been quite active even in the first

1004
00:40:14,800 --> 00:40:17,440
years that um they've um

1005
00:40:17,440 --> 00:40:20,160
that we haven't started tracking them

1006
00:40:20,160 --> 00:40:22,800
but they they got more and more

1007
00:40:22,800 --> 00:40:26,560
active in the past two years

1008
00:40:26,560 --> 00:40:30,000
and i guess it only shows that they

1009
00:40:30,000 --> 00:40:31,359
they

1010
00:40:31,359 --> 00:40:34,400
have more resources and they spend more

1011
00:40:34,400 --> 00:40:36,720
time and more effort to

1012
00:40:36,720 --> 00:40:39,440
to do more attacks and expand their

1013
00:40:39,440 --> 00:40:40,480
victim

1014
00:40:40,480 --> 00:40:43,440
their victim base

1015
00:40:44,000 --> 00:40:47,200
i hope i answered your questions

1016
00:40:47,200 --> 00:40:50,640
okay with that we will end our session

1017
00:40:50,640 --> 00:40:52,560
for now

1018
00:40:52,560 --> 00:40:53,760
thank you

1019
00:40:53,760 --> 00:40:55,460
thank you everyone

1020
00:40:55,460 --> 00:40:57,960
[Applause]

1021
00:40:57,960 --> 00:41:01,030
[Music]

1022
00:41:04,870 --> 00:41:07,960
[Music]

