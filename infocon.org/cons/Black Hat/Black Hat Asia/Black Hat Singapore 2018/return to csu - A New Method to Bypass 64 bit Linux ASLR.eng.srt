1
00:00:00,210 --> 00:00:07,950
good morning everyone<font color="#CCCCCC"> my name</font><font color="#E5E5E5"> is Hector</font>

2
00:00:03,810 --> 00:00:10,139
Marco<font color="#CCCCCC"> I'm going to present</font><font color="#E5E5E5"> a word</font>

3
00:00:07,950 --> 00:00:12,570
related with with the SLR how to<font color="#E5E5E5"> bypass</font>

4
00:00:10,139 --> 00:00:14,360
<font color="#CCCCCC">Israel and all this</font><font color="#E5E5E5"> stuff so first of</font>

5
00:00:12,570 --> 00:00:17,400
all who we are

6
00:00:14,360 --> 00:00:19,259
my name is<font color="#CCCCCC"> hector marco gain i'm working</font>

7
00:00:17,400 --> 00:00:20,189
as a<font color="#CCCCCC"> lecturer in the university</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> the</font>

8
00:00:19,260 --> 00:00:23,039
west of<font color="#E5E5E5"> Scotland</font>

9
00:00:20,189 --> 00:00:26,250
<font color="#E5E5E5">okay this is a collaboration or shared</font>

10
00:00:23,039 --> 00:00:29,220
work between<font color="#CCCCCC"> you WS and GPB in Valencia</font>

11
00:00:26,250 --> 00:00:31,920
<font color="#CCCCCC">so I am from Scotland I miss like to New</font>

12
00:00:29,220 --> 00:00:34,219
Scotland and Ismail<font color="#E5E5E5"> is is working</font><font color="#CCCCCC"> a</font>

13
00:00:31,920 --> 00:00:36,829
cyber security researcher<font color="#CCCCCC"> - in</font>

14
00:00:34,219 --> 00:00:44,399
<font color="#CCCCCC">university epidemic of Valencia in Spain</font>

15
00:00:36,829 --> 00:00:46,559
<font color="#CCCCCC">okay well a</font><font color="#E5E5E5"> little bit about us in order</font>

16
00:00:44,399 --> 00:00:48,480
<font color="#E5E5E5">to</font><font color="#CCCCCC"> summarize a</font><font color="#E5E5E5"> little bit our findings</font>

17
00:00:46,559 --> 00:00:50,339
I just put some<font color="#E5E5E5"> lines here</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> we have</font>

18
00:00:48,480 --> 00:00:52,529
made<font color="#CCCCCC"> some contributions</font><font color="#E5E5E5"> to the Linux</font>

19
00:00:50,340 --> 00:00:56,149
<font color="#E5E5E5">kernel to the library to the</font><font color="#CCCCCC"> jealousy</font>

20
00:00:52,530 --> 00:00:58,590
<font color="#CCCCCC">library as many other</font><font color="#E5E5E5"> open source code</font>

21
00:00:56,149 --> 00:01:01,109
some of them were rewarded by Google

22
00:00:58,590 --> 00:01:03,780
<font color="#E5E5E5">packet the store</font><font color="#CCCCCC"> ok I was here two years</font>

23
00:01:01,109 --> 00:01:07,409
ago blackhat<font color="#CCCCCC"> hacia</font><font color="#E5E5E5"> two years ago deep</font>

24
00:01:03,780 --> 00:01:10,560
seek<font color="#E5E5E5"> also one or two of them so we have</font>

25
00:01:07,409 --> 00:01:13,080
reported<font color="#CCCCCC"> multiple TVs numbers maybe</font><font color="#E5E5E5"> some</font>

26
00:01:10,560 --> 00:01:17,520
of you<font color="#CCCCCC"> remember the one of these two is</font>

27
00:01:13,080 --> 00:01:21,539
the<font color="#CCCCCC"> root shell ok with this this</font><font color="#E5E5E5"> Enter</font>

28
00:01:17,520 --> 00:01:23,840
key<font color="#CCCCCC"> for 70 seconds do</font><font color="#E5E5E5"> remember that so</font>

29
00:01:21,540 --> 00:01:26,850
we were the ones<font color="#CCCCCC"> who discovered that</font>

30
00:01:23,840 --> 00:01:29,850
<font color="#E5E5E5">maybe some of you also</font><font color="#CCCCCC"> remembered about</font>

31
00:01:26,850 --> 00:01:33,419
<font color="#CCCCCC">the</font><font color="#E5E5E5"> group 28 vulnerability again so if</font>

32
00:01:29,850 --> 00:01:37,979
you back<font color="#CCCCCC"> in space 28 times and then a</font>

33
00:01:33,420 --> 00:01:39,360
<font color="#E5E5E5">drop shell will appear so</font><font color="#CCCCCC"> okay so this</font>

34
00:01:37,979 --> 00:01:41,610
is one<font color="#CCCCCC"> of the two months no but</font>

35
00:01:39,360 --> 00:01:44,610
<font color="#E5E5E5">obviously we have</font><font color="#CCCCCC"> more than more than</font>

36
00:01:41,610 --> 00:01:47,640
<font color="#E5E5E5">that</font><font color="#CCCCCC"> okay we have</font><font color="#E5E5E5"> basically working</font><font color="#CCCCCC"> on</font>

37
00:01:44,610 --> 00:01:49,979
<font color="#CCCCCC">low-level</font><font color="#E5E5E5"> security we found also</font><font color="#CCCCCC"> opening</font>

38
00:01:47,640 --> 00:01:53,460
abilities<font color="#E5E5E5"> maybe they are not as</font><font color="#CCCCCC"> popular</font>

39
00:01:49,979 --> 00:01:55,408
<font color="#CCCCCC">as</font><font color="#E5E5E5"> the group or root shell but for</font>

40
00:01:53,460 --> 00:01:57,589
example<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> kernel integral flow</font>

41
00:01:55,409 --> 00:02:00,899
was a vulnerability in<font color="#CCCCCC"> the</font><font color="#E5E5E5"> Linux kernel</font>

42
00:01:57,590 --> 00:02:03,030
<font color="#CCCCCC">that's affecting basically the</font><font color="#E5E5E5"> the</font>

43
00:02:00,899 --> 00:02:05,310
quality<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> entropy of the executive</font>

44
00:02:03,030 --> 00:02:07,530
<font color="#E5E5E5">or when they were got in memory okay</font>

45
00:02:05,310 --> 00:02:09,060
they were nobility was<font color="#CCCCCC"> present says the</font>

46
00:02:07,530 --> 00:02:10,649
very<font color="#E5E5E5"> first version</font><font color="#CCCCCC"> of Linux</font>

47
00:02:09,060 --> 00:02:12,840
so we discovered that two years ago

48
00:02:10,649 --> 00:02:13,650
<font color="#CCCCCC">monitors and was present signed the very</font>

49
00:02:12,840 --> 00:02:17,099
first version<font color="#CCCCCC"> of</font>

50
00:02:13,650 --> 00:02:19,760
well to be clear<font color="#CCCCCC"> science the Linux</font>

51
00:02:17,099 --> 00:02:23,929
<font color="#E5E5E5">support 64-bit architectures</font>

52
00:02:19,760 --> 00:02:26,879
<font color="#E5E5E5">randomization for 64-bit architecture</font><font color="#CCCCCC"> ok</font>

53
00:02:23,930 --> 00:02:29,459
<font color="#CCCCCC">we have also experienced in love level</font>

54
00:02:26,879 --> 00:02:33,510
<font color="#CCCCCC">security in maybe you have heard</font><font color="#E5E5E5"> about</font>

55
00:02:29,459 --> 00:02:35,790
rainy<font color="#E5E5E5"> with SP is a new a new method on a</font>

56
00:02:33,510 --> 00:02:37,260
new technique to prevent brute-force

57
00:02:35,790 --> 00:02:39,030
attacks again the stack is<font color="#E5E5E5"> matching</font>

58
00:02:37,260 --> 00:02:42,060
protector<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> so this is a new technology</font>

59
00:02:39,030 --> 00:02:45,120
let's say you sell our next generation

60
00:02:42,060 --> 00:02:48,000
is also<font color="#CCCCCC"> a serial patches little patches</font>

61
00:02:45,120 --> 00:02:50,069
that as<font color="#E5E5E5"> far</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> we know are is the best</font>

62
00:02:48,000 --> 00:02:52,409
the<font color="#E5E5E5"> best implementation the best is our</font>

63
00:02:50,069 --> 00:02:55,290
implementation<font color="#CCCCCC"> ok providing a lot of</font>

64
00:02:52,409 --> 00:02:56,970
<font color="#E5E5E5">entropy so it's not so a little bit</font>

65
00:02:55,290 --> 00:02:58,379
<font color="#CCCCCC">about that</font><font color="#E5E5E5"> ok love level let's say</font>

66
00:02:56,970 --> 00:03:00,510
background this is<font color="#E5E5E5"> the</font><font color="#CCCCCC"> low level ok</font>

67
00:02:58,379 --> 00:03:01,920
<font color="#E5E5E5">because we are also doing</font><font color="#CCCCCC"> cyber</font><font color="#E5E5E5"> security</font>

68
00:03:00,510 --> 00:03:04,349
research we're<font color="#E5E5E5"> also lectures at the</font>

69
00:03:01,920 --> 00:03:06,869
universities so<font color="#CCCCCC"> we are doing</font><font color="#E5E5E5"> a plenty</font><font color="#CCCCCC"> of</font>

70
00:03:04,349 --> 00:03:09,988
things<font color="#E5E5E5"> this is part of more more hockey</font>

71
00:03:06,870 --> 00:03:11,579
thing so talking about<font color="#CCCCCC"> a</font><font color="#E5E5E5"> SLR you can</font>

72
00:03:09,989 --> 00:03:13,859
imagine<font color="#CCCCCC"> an SLR is a technology that</font><font color="#E5E5E5"> is</font>

73
00:03:11,579 --> 00:03:19,190
<font color="#E5E5E5">present in all modern systems</font><font color="#CCCCCC"> ok in</font>

74
00:03:13,859 --> 00:03:22,739
Windows Linux Android iOS everywhere<font color="#CCCCCC"> ok</font>

75
00:03:19,190 --> 00:03:24,690
<font color="#CCCCCC">it is a barrier that</font><font color="#E5E5E5"> most attacks needs</font>

76
00:03:22,739 --> 00:03:26,400
to to bypass<font color="#E5E5E5"> ok especially</font><font color="#CCCCCC"> if we are</font>

77
00:03:24,690 --> 00:03:28,049
<font color="#E5E5E5">talking about memory errors when we are</font>

78
00:03:26,400 --> 00:03:30,629
exploiting<font color="#E5E5E5"> memory errors we need to face</font>

79
00:03:28,049 --> 00:03:33,989
against this<font color="#E5E5E5"> ok not only memory errors</font>

80
00:03:30,629 --> 00:03:35,819
<font color="#E5E5E5">ok but especially and then we thought</font>

81
00:03:33,989 --> 00:03:38,579
<font color="#CCCCCC">okay we</font><font color="#E5E5E5"> need to assess the effectiveness</font>

82
00:03:35,819 --> 00:03:40,980
of the<font color="#E5E5E5"> you SLR</font><font color="#CCCCCC"> ok let's see</font><font color="#E5E5E5"> if a seller</font>

83
00:03:38,579 --> 00:03:43,159
is as hard<font color="#E5E5E5"> as they say to bypass ok</font>

84
00:03:40,980 --> 00:03:46,349
maybe we can find some<font color="#E5E5E5"> tricks some</font>

85
00:03:43,159 --> 00:03:47,608
something to bypass the user<font color="#CCCCCC"> ok so and</font>

86
00:03:46,349 --> 00:03:50,728
then we<font color="#E5E5E5"> have</font><font color="#CCCCCC"> ok let's see</font><font color="#E5E5E5"> if we can find</font>

87
00:03:47,609 --> 00:03:53,340
<font color="#E5E5E5">a</font><font color="#CCCCCC"> genetic</font><font color="#E5E5E5"> method in</font><font color="#CCCCCC"> order to bypass</font><font color="#E5E5E5"> the</font>

88
00:03:50,729 --> 00:03:55,290
SLR<font color="#E5E5E5"> in 64-bit architecture</font><font color="#CCCCCC"> so this is</font>

89
00:03:53,340 --> 00:03:57,449
<font color="#E5E5E5">what's our goal so the question now here</font>

90
00:03:55,290 --> 00:03:59,760
is can we<font color="#CCCCCC"> do that can we create</font><font color="#E5E5E5"> a</font>

91
00:03:57,449 --> 00:04:01,500
generic<font color="#CCCCCC"> method that we can reduce in</font>

92
00:03:59,760 --> 00:04:04,798
multiple attacks in multiple scenarios

93
00:04:01,500 --> 00:04:07,470
<font color="#E5E5E5">to bypass the SLR in 64-bit architecture</font>

94
00:04:04,799 --> 00:04:09,599
well this talk is exactly<font color="#CCCCCC"> about that in</font>

95
00:04:07,470 --> 00:04:12,449
this talk I'm going<font color="#CCCCCC"> to present rate or</font>

96
00:04:09,599 --> 00:04:15,720
to see as you which is a<font color="#CCCCCC"> detect method</font>

97
00:04:12,449 --> 00:04:18,780
to bypass the<font color="#CCCCCC"> a SLR in modern in current</font>

98
00:04:15,720 --> 00:04:20,399
64-bit<font color="#CCCCCC"> windows</font><font color="#E5E5E5"> ok</font>

99
00:04:18,779 --> 00:04:22,289
in order to<font color="#E5E5E5"> do the demo more attractive</font>

100
00:04:20,399 --> 00:04:23,940
I'm going to bypass<font color="#E5E5E5"> also the attack is</font>

101
00:04:22,289 --> 00:04:27,469
matching protector the non-executable

102
00:04:23,940 --> 00:04:30,320
beat the the railroad<font color="#E5E5E5"> a pi/4</font>

103
00:04:27,470 --> 00:04:33,680
five<font color="#E5E5E5"> so we are going to face against a</font>

104
00:04:30,320 --> 00:04:35,270
full protective server<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> and let's</font>

105
00:04:33,680 --> 00:04:37,850
see how<font color="#E5E5E5"> come we were past all these</font>

106
00:04:35,270 --> 00:04:40,669
protections<font color="#E5E5E5"> okay and obviously the demo</font>

107
00:04:37,850 --> 00:04:41,840
is around one second two seconds<font color="#E5E5E5"> so we</font>

108
00:04:40,670 --> 00:04:43,940
are going<font color="#E5E5E5"> to invest</font><font color="#CCCCCC"> one seconds two</font>

109
00:04:41,840 --> 00:04:50,419
seconds to bypass all these technologies

110
00:04:43,940 --> 00:04:52,040
okay so agenda<font color="#E5E5E5"> briefly what</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> a SLR</font><font color="#CCCCCC"> I</font>

111
00:04:50,420 --> 00:04:55,790
am pretty sure<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you know what is a</font>

112
00:04:52,040 --> 00:04:59,210
SLR<font color="#CCCCCC"> but maybe it's a lot is not what</font><font color="#E5E5E5"> you</font>

113
00:04:55,790 --> 00:05:02,330
<font color="#E5E5E5">have in mind</font><font color="#CCCCCC"> okay SLR is is not only one</font>

114
00:04:59,210 --> 00:05:04,099
statical thing that is<font color="#CCCCCC"> implant</font><font color="#E5E5E5"> no we</font>

115
00:05:02,330 --> 00:05:05,870
will<font color="#E5E5E5"> see in a minute which are the</font>

116
00:05:04,100 --> 00:05:09,140
<font color="#CCCCCC">barium</font><font color="#E5E5E5"> which is the flavors of this is a</font>

117
00:05:05,870 --> 00:05:10,280
lot<font color="#E5E5E5"> the second part we are</font><font color="#CCCCCC"> going to talk</font>

118
00:05:09,140 --> 00:05:13,039
<font color="#E5E5E5">about which is the difference between</font>

119
00:05:10,280 --> 00:05:16,059
<font color="#E5E5E5">the</font><font color="#CCCCCC"> soft curve</font><font color="#E5E5E5"> and the result in</font>

120
00:05:13,040 --> 00:05:18,680
executable file because this is

121
00:05:16,060 --> 00:05:20,810
something<font color="#CCCCCC"> that we were going</font><font color="#E5E5E5"> to use to</font>

122
00:05:18,680 --> 00:05:22,640
exploit this okay<font color="#E5E5E5"> we will see the</font>

123
00:05:20,810 --> 00:05:25,250
difference<font color="#CCCCCC"> that we are</font><font color="#E5E5E5"> we're facing</font>

124
00:05:22,640 --> 00:05:28,039
against an executable<font color="#CCCCCC"> we need to see</font>

125
00:05:25,250 --> 00:05:29,810
which part came from the source<font color="#E5E5E5"> code and</font>

126
00:05:28,040 --> 00:05:32,060
<font color="#E5E5E5">which are not on what is</font><font color="#CCCCCC"> happening there</font>

127
00:05:29,810 --> 00:05:33,620
okay the point here<font color="#E5E5E5"> is that they</font><font color="#CCCCCC"> don't</font>

128
00:05:32,060 --> 00:05:35,720
match<font color="#E5E5E5"> when you're compiling a source</font>

129
00:05:33,620 --> 00:05:38,419
application<font color="#E5E5E5"> the result in elf is not</font>

130
00:05:35,720 --> 00:05:40,280
exactly what you have<font color="#CCCCCC"> in the C file so</font>

131
00:05:38,419 --> 00:05:43,159
let's let's analyze this<font color="#E5E5E5"> so thanks to</font>

132
00:05:40,280 --> 00:05:46,309
that we find our<font color="#CCCCCC"> way</font><font color="#E5E5E5"> to create a method</font>

133
00:05:43,160 --> 00:05:49,930
<font color="#CCCCCC">a generic method to bypass this SLR</font><font color="#E5E5E5"> okay</font>

134
00:05:46,310 --> 00:05:52,700
we hope we<font color="#CCCCCC"> name</font><font color="#E5E5E5"> that rate or to CSU okay</font>

135
00:05:49,930 --> 00:05:55,370
<font color="#CCCCCC">in</font><font color="#E5E5E5"> order to solve you a little bit how</font>

136
00:05:52,700 --> 00:05:57,800
can we make take profit of this method

137
00:05:55,370 --> 00:05:59,960
we have modified<font color="#CCCCCC"> drooper okay it's a</font>

138
00:05:57,800 --> 00:06:01,400
tool which we<font color="#CCCCCC"> generate output generation</font>

139
00:05:59,960 --> 00:06:04,549
rope chain tool

140
00:06:01,400 --> 00:06:07,190
okay so we have modified this<font color="#E5E5E5"> tool to</font>

141
00:06:04,550 --> 00:06:09,260
implement<font color="#CCCCCC"> this attack</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> I will show</font>

142
00:06:07,190 --> 00:06:11,240
<font color="#CCCCCC">you in the demo I will show</font><font color="#E5E5E5"> you</font>

143
00:06:09,260 --> 00:06:13,669
<font color="#CCCCCC">different demos</font><font color="#E5E5E5"> but one of them is this</font>

144
00:06:11,240 --> 00:06:15,710
tool this modified tool with<font color="#E5E5E5"> basically</font>

145
00:06:13,669 --> 00:06:17,859
you just need<font color="#E5E5E5"> to</font><font color="#CCCCCC"> paste</font><font color="#E5E5E5"> okay this is the</font>

146
00:06:15,710 --> 00:06:19,880
IP of the server and<font color="#E5E5E5"> then the</font>

147
00:06:17,860 --> 00:06:23,360
<font color="#CCCCCC">application of</font><font color="#E5E5E5"> in this case the tool</font>

148
00:06:19,880 --> 00:06:25,159
will create<font color="#E5E5E5"> a Python an exploit in</font>

149
00:06:23,360 --> 00:06:27,020
<font color="#E5E5E5">Python that you can just against any</font>

150
00:06:25,160 --> 00:06:30,610
server so it's a<font color="#E5E5E5"> completely automatic</font>

151
00:06:27,020 --> 00:06:34,340
<font color="#CCCCCC">okay so you don't need to do anything</font>

152
00:06:30,610 --> 00:06:37,190
<font color="#CCCCCC">well</font><font color="#E5E5E5"> again in the demo I will show you</font>

153
00:06:34,340 --> 00:06:39,710
how<font color="#CCCCCC"> can</font><font color="#E5E5E5"> bypass</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> these thing</font><font color="#CCCCCC"> all these</font>

154
00:06:37,190 --> 00:06:41,389
<font color="#CCCCCC">okay position independent code SLR and</font>

155
00:06:39,710 --> 00:06:45,500
execute so it's like<font color="#E5E5E5"> this</font>

156
00:06:41,389 --> 00:06:46,729
full protected<font color="#CCCCCC"> okay let's see and also</font>

157
00:06:45,500 --> 00:06:48,469
I'm going to<font color="#E5E5E5"> talk a little bit</font><font color="#CCCCCC"> about</font>

158
00:06:46,729 --> 00:06:50,479
mitigation conclusion white is so

159
00:06:48,469 --> 00:06:53,360
difficult to<font color="#E5E5E5"> face that what is not so</font>

160
00:06:50,479 --> 00:06:55,789
easy to<font color="#CCCCCC"> Pat to patch this problem</font><font color="#E5E5E5"> okay</font>

161
00:06:53,360 --> 00:06:57,259
<font color="#E5E5E5">so</font><font color="#CCCCCC"> what do you see as a lot is you go to</font>

162
00:06:55,789 --> 00:06:58,789
Wikipedia<font color="#CCCCCC"> probably will find that</font>

163
00:06:57,259 --> 00:07:00,879
<font color="#E5E5E5">computer security technique for</font>

164
00:06:58,789 --> 00:07:03,289
preventing exploitation of<font color="#CCCCCC"> work that's</font>

165
00:07:00,879 --> 00:07:04,580
definition<font color="#E5E5E5"> so I think no</font><font color="#CCCCCC"> one is going to</font>

166
00:07:03,289 --> 00:07:06,139
understand what<font color="#E5E5E5"> you say</font><font color="#CCCCCC"> is a lot</font>

167
00:07:04,580 --> 00:07:08,389
actually<font color="#CCCCCC"> if you go and read Wikipedia</font>

168
00:07:06,139 --> 00:07:11,090
<font color="#E5E5E5">okay you will find something like the</font>

169
00:07:08,389 --> 00:07:16,550
<font color="#CCCCCC">stack executable will be randomizer but</font>

170
00:07:11,090 --> 00:07:19,549
when how which<font color="#E5E5E5"> is the quality so what is</font>

171
00:07:16,550 --> 00:07:22,039
<font color="#E5E5E5">actually yes well it is</font><font color="#CCCCCC"> a concept okay</font>

172
00:07:19,550 --> 00:07:23,900
<font color="#CCCCCC">and Windows</font><font color="#E5E5E5"> is implementing this concept</font>

173
00:07:22,039 --> 00:07:25,340
in a way<font color="#CCCCCC"> Linux is implementing this</font>

174
00:07:23,900 --> 00:07:27,378
content in a<font color="#CCCCCC"> different way</font>

175
00:07:25,340 --> 00:07:29,688
even Mac is using a different

176
00:07:27,379 --> 00:07:31,699
implementation<font color="#CCCCCC"> so we cannot say oh this</font>

177
00:07:29,689 --> 00:07:34,129
half<font color="#E5E5E5"> is</font><font color="#CCCCCC"> LR so I can no</font><font color="#E5E5E5"> bypass it</font><font color="#CCCCCC"> no</font><font color="#E5E5E5"> you</font>

178
00:07:31,699 --> 00:07:36,020
need<font color="#E5E5E5"> to study this particular target you</font>

179
00:07:34,129 --> 00:07:39,409
need<font color="#E5E5E5"> to see okay which is the weaknesses</font>

180
00:07:36,020 --> 00:07:41,299
or of how can we bypass this<font color="#E5E5E5"> okay so in</font>

181
00:07:39,409 --> 00:07:43,819
our case we choose Linux because<font color="#E5E5E5"> it's</font>

182
00:07:41,300 --> 00:07:45,560
one of<font color="#CCCCCC"> the most</font><font color="#E5E5E5"> popular and to be honest</font>

183
00:07:43,819 --> 00:07:47,900
one<font color="#CCCCCC"> of the more robust okay you can now</font>

184
00:07:45,560 --> 00:07:50,360
compare the<font color="#CCCCCC"> the slrlewis with Windows on</font>

185
00:07:47,900 --> 00:07:54,169
<font color="#E5E5E5">Mac they are far from from the quality</font>

186
00:07:50,360 --> 00:07:56,240
of okay<font color="#E5E5E5"> so one of the huge difference is</font>

187
00:07:54,169 --> 00:07:59,779
that<font color="#E5E5E5"> for example in Linux and Mac they</font>

188
00:07:56,240 --> 00:08:02,419
are using<font color="#E5E5E5"> Perl boot SLR which means that</font>

189
00:07:59,779 --> 00:08:05,960
libraries and executable are<font color="#CCCCCC"> only under</font>

190
00:08:02,419 --> 00:08:08,029
myself when the<font color="#E5E5E5"> system is booting so at</font>

191
00:08:05,960 --> 00:08:11,120
the very<font color="#CCCCCC"> first boot</font><font color="#E5E5E5"> so if you execute</font>

192
00:08:08,029 --> 00:08:12,620
any application all libraries will be

193
00:08:11,120 --> 00:08:14,659
<font color="#E5E5E5">exactly at the same position you know</font>

194
00:08:12,620 --> 00:08:16,279
you can execute one application<font color="#E5E5E5"> and</font>

195
00:08:14,659 --> 00:08:19,009
later on execute a different application

196
00:08:16,279 --> 00:08:22,939
<font color="#E5E5E5">but they are sharing these addresses</font>

197
00:08:19,009 --> 00:08:24,529
this this mapping okay so in<font color="#CCCCCC"> Linux know</font>

198
00:08:22,939 --> 00:08:26,060
you do secrete an application in Linux

199
00:08:24,529 --> 00:08:27,949
you can<font color="#E5E5E5"> kill this application</font><font color="#CCCCCC"> to launch</font>

200
00:08:26,060 --> 00:08:29,180
the application<font color="#E5E5E5"> and the map will be</font>

201
00:08:27,949 --> 00:08:31,039
<font color="#E5E5E5">completely different</font>

202
00:08:29,180 --> 00:08:34,789
<font color="#E5E5E5">okay the map is that one so this is</font><font color="#CCCCCC"> the</font>

203
00:08:31,039 --> 00:08:37,760
<font color="#E5E5E5">map</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so talking about</font><font color="#CCCCCC"> Lena what is</font>

204
00:08:34,789 --> 00:08:39,559
doing Linux how an executable<font color="#E5E5E5"> ends in</font>

205
00:08:37,760 --> 00:08:42,439
the memory layout and this is random I

206
00:08:39,559 --> 00:08:44,750
said how this<font color="#CCCCCC"> happen well when you</font>

207
00:08:42,440 --> 00:08:49,520
basically<font color="#E5E5E5"> run application that is a</font>

208
00:08:44,750 --> 00:08:51,500
module<font color="#E5E5E5"> a Linux kernel part which instead</font>

209
00:08:49,520 --> 00:08:53,720
of<font color="#E5E5E5"> just writing this executable into the</font>

210
00:08:51,500 --> 00:08:55,340
memory<font color="#E5E5E5"> they what is doing okay let's put</font>

211
00:08:53,720 --> 00:08:57,380
in<font color="#CCCCCC"> our</font><font color="#E5E5E5"> random places because</font>

212
00:08:55,340 --> 00:08:59,660
we have the<font color="#CCCCCC"> fool</font><font color="#E5E5E5"> let's say the foot</font>

213
00:08:57,380 --> 00:09:01,970
built on memory space so let's run<font color="#E5E5E5"> the</font>

214
00:08:59,660 --> 00:09:03,350
<font color="#E5E5E5">mice a little bit this let's start for</font>

215
00:09:01,970 --> 00:09:06,140
these four things<font color="#CCCCCC"> that are much more but</font>

216
00:09:03,350 --> 00:09:09,410
you<font color="#CCCCCC"> know this a stack so the stack is</font><font color="#E5E5E5"> at</font>

217
00:09:06,140 --> 00:09:11,689
some random<font color="#E5E5E5"> place at the top</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> the</font>

218
00:09:09,410 --> 00:09:13,550
executable<font color="#E5E5E5"> if it is</font><font color="#CCCCCC"> PI compile be</font>

219
00:09:11,690 --> 00:09:16,250
careful with that<font color="#E5E5E5"> because I think the</font>

220
00:09:13,550 --> 00:09:19,339
recent versions of<font color="#E5E5E5"> Ubuntu they are</font>

221
00:09:16,250 --> 00:09:22,250
already used that<font color="#CCCCCC"> okay but if you don't</font>

222
00:09:19,340 --> 00:09:24,410
specify<font color="#E5E5E5"> this</font><font color="#CCCCCC"> flat compiler</font><font color="#E5E5E5"> then don't</font>

223
00:09:22,250 --> 00:09:27,710
expect that the executable is randomized

224
00:09:24,410 --> 00:09:30,770
<font color="#E5E5E5">okay because kernel can do magic so the</font>

225
00:09:27,710 --> 00:09:32,930
hip<font color="#E5E5E5"> if you</font><font color="#CCCCCC"> use in randomized</font><font color="#E5E5E5"> V space</font>

226
00:09:30,770 --> 00:09:35,090
equal to<font color="#CCCCCC"> 2</font><font color="#E5E5E5"> this is a</font><font color="#CCCCCC"> Linux kernel</font>

227
00:09:32,930 --> 00:09:37,640
<font color="#E5E5E5">configuration then</font><font color="#CCCCCC"> v will be also</font>

228
00:09:35,090 --> 00:09:40,160
randomizes<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so don't confuse because</font>

229
00:09:37,640 --> 00:09:42,530
<font color="#E5E5E5">maybe you can see even even a</font><font color="#CCCCCC"> zero here</font>

230
00:09:40,160 --> 00:09:43,939
<font color="#E5E5E5">or as you</font><font color="#CCCCCC"> don't know</font><font color="#E5E5E5"> I want you just you</font>

231
00:09:42,530 --> 00:09:47,390
know<font color="#E5E5E5"> what here means that the hip is not</font>

232
00:09:43,940 --> 00:09:48,080
<font color="#E5E5E5">run to myself with means that is join to</font>

233
00:09:47,390 --> 00:09:50,300
<font color="#E5E5E5">the executable</font>

234
00:09:48,080 --> 00:09:52,160
<font color="#E5E5E5">but because executable is random I set</font>

235
00:09:50,300 --> 00:09:54,290
from outside<font color="#E5E5E5"> it looks that the</font><font color="#CCCCCC"> heap is</font>

236
00:09:52,160 --> 00:09:56,000
random I said that<font color="#E5E5E5"> actually is not in</font>

237
00:09:54,290 --> 00:09:57,860
other words if you know<font color="#E5E5E5"> word executable</font>

238
00:09:56,000 --> 00:10:00,680
is you know where the hip is and in the

239
00:09:57,860 --> 00:10:02,960
opposite<font color="#CCCCCC"> ok so this</font><font color="#E5E5E5"> is this value so</font>

240
00:10:00,680 --> 00:10:06,459
<font color="#E5E5E5">Linux basically is</font><font color="#CCCCCC"> randomizing</font>

241
00:10:02,960 --> 00:10:09,050
everything<font color="#E5E5E5"> if you put one here and</font>

242
00:10:06,460 --> 00:10:11,300
additionally the hip is a little bit

243
00:10:09,050 --> 00:10:14,240
<font color="#E5E5E5">randomized it from the executable if you</font>

244
00:10:11,300 --> 00:10:15,680
put<font color="#CCCCCC"> a number</font><font color="#E5E5E5"> two here okay so how</font>

245
00:10:14,240 --> 00:10:17,480
libraries<font color="#E5E5E5"> and randomized easily knows</font>

246
00:10:15,680 --> 00:10:20,719
well we are we<font color="#CCCCCC"> are still in the kernel</font>

247
00:10:17,480 --> 00:10:23,450
side okay<font color="#E5E5E5"> so basically what</font><font color="#CCCCCC"> Linux is</font>

248
00:10:20,720 --> 00:10:25,370
doing is<font color="#CCCCCC"> tooth in a random value</font><font color="#E5E5E5"> more or</font>

249
00:10:23,450 --> 00:10:27,560
less between<font color="#E5E5E5"> the heap and the stack so</font>

250
00:10:25,370 --> 00:10:29,570
<font color="#E5E5E5">for me this is where the libraries will</font>

251
00:10:27,560 --> 00:10:33,709
<font color="#CCCCCC">be loaded</font><font color="#E5E5E5"> okay so this is a random value</font>

252
00:10:29,570 --> 00:10:36,770
<font color="#E5E5E5">okay but there is no library so what the</font>

253
00:10:33,710 --> 00:10:39,950
Linux Linux is doing is<font color="#E5E5E5"> lot the dynamic</font>

254
00:10:36,770 --> 00:10:43,040
brother<font color="#E5E5E5"> okay this is a library</font><font color="#CCCCCC"> were</font>

255
00:10:39,950 --> 00:10:48,980
again in the in the number<font color="#E5E5E5"> that the</font>

256
00:10:43,040 --> 00:10:52,730
Linux<font color="#CCCCCC"> tools and what happened so</font><font color="#E5E5E5"> jump to</font>

257
00:10:48,980 --> 00:10:54,410
<font color="#CCCCCC">user land okay when we are compiling</font><font color="#E5E5E5"> an</font>

258
00:10:52,730 --> 00:10:56,990
executable<font color="#E5E5E5"> and this executable is</font>

259
00:10:54,410 --> 00:11:00,319
dynamically<font color="#E5E5E5"> linked it then Linux</font>

260
00:10:56,990 --> 00:11:03,800
<font color="#E5E5E5">transfer the control to this water so</font>

261
00:11:00,320 --> 00:11:06,140
the very first the very first assembly

262
00:11:03,800 --> 00:11:09,740
instructions executed in<font color="#CCCCCC"> do salon is not</font>

263
00:11:06,140 --> 00:11:12,980
<font color="#CCCCCC">your executable</font><font color="#E5E5E5"> okay is this</font>

264
00:11:09,740 --> 00:11:17,690
so if we are<font color="#CCCCCC"> for</font><font color="#E5E5E5"> example this is a</font><font color="#CCCCCC"> vamp</font>

265
00:11:12,980 --> 00:11:20,510
<font color="#CCCCCC">just in gdb</font><font color="#E5E5E5"> we can stop the application</font>

266
00:11:17,690 --> 00:11:24,170
in the DL<font color="#E5E5E5"> a start with</font><font color="#CCCCCC"> Miss basically</font>

267
00:11:20,510 --> 00:11:26,779
it's almost<font color="#CCCCCC"> the</font><font color="#E5E5E5"> start symbol in the this</font>

268
00:11:24,170 --> 00:11:28,579
dynamic ladder<font color="#E5E5E5"> and if we inspect the</font>

269
00:11:26,779 --> 00:11:30,460
memory map<font color="#E5E5E5"> exactly at that point this is</font>

270
00:11:28,580 --> 00:11:32,570
<font color="#E5E5E5">basically one</font><font color="#CCCCCC"> or two instructions</font>

271
00:11:30,460 --> 00:11:34,490
<font color="#E5E5E5">executed in the user land no more I</font>

272
00:11:32,570 --> 00:11:37,070
think<font color="#CCCCCC"> is one</font><font color="#E5E5E5"> move on one call so there</font>

273
00:11:34,490 --> 00:11:40,670
is<font color="#E5E5E5"> nothing here so you can see that we</font>

274
00:11:37,070 --> 00:11:43,820
have two lines per file for example<font color="#E5E5E5"> in</font>

275
00:11:40,670 --> 00:11:48,250
this test application we see<font color="#CCCCCC"> read</font><font color="#E5E5E5"> an</font>

276
00:11:43,820 --> 00:11:49,510
executable and<font color="#CCCCCC"> real-time right okay so</font>

277
00:11:48,250 --> 00:11:52,040
[Music]

278
00:11:49,510 --> 00:11:53,720
but there is no where is the live see

279
00:11:52,040 --> 00:11:56,510
the library see there is no live see

280
00:11:53,720 --> 00:11:58,279
here we<font color="#E5E5E5"> don't have</font><font color="#CCCCCC"> lycée okay</font><font color="#E5E5E5"> because</font>

281
00:11:56,510 --> 00:12:02,000
<font color="#E5E5E5">linux is not the one who</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> letting</font>

282
00:11:58,279 --> 00:12:05,689
everything<font color="#E5E5E5"> for you okay this is done by</font>

283
00:12:02,000 --> 00:12:09,290
the dynamic<font color="#CCCCCC"> rather this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> the one who</font>

284
00:12:05,690 --> 00:12:11,500
is<font color="#E5E5E5"> living object here okay so the</font>

285
00:12:09,290 --> 00:12:14,240
dynamic ladder is who is loading

286
00:12:11,500 --> 00:12:17,990
libraries<font color="#E5E5E5"> depending on your needs</font>

287
00:12:14,240 --> 00:12:20,089
okay so now let's impact that let's

288
00:12:17,990 --> 00:12:21,740
inspect the memory layout<font color="#E5E5E5"> at the very</font>

289
00:12:20,089 --> 00:12:23,990
beginning of the executable<font color="#E5E5E5"> so if you</font>

290
00:12:21,740 --> 00:12:26,690
see here<font color="#E5E5E5"> now</font>

291
00:12:23,990 --> 00:12:29,029
this start symbol is the start of<font color="#E5E5E5"> the</font>

292
00:12:26,690 --> 00:12:31,160
executable so take take a<font color="#E5E5E5"> look and see</font>

293
00:12:29,029 --> 00:12:34,370
the difference<font color="#E5E5E5"> before</font><font color="#CCCCCC"> we have only two</font>

294
00:12:31,160 --> 00:12:37,430
lines<font color="#E5E5E5"> three executable</font><font color="#CCCCCC"> read/write but</font>

295
00:12:34,370 --> 00:12:39,800
now we have only one with real<font color="#E5E5E5"> which</font>

296
00:12:37,430 --> 00:12:42,729
<font color="#E5E5E5">means that the dynamic no that is the</font>

297
00:12:39,800 --> 00:12:46,339
one who is<font color="#CCCCCC"> responsible or protecting</font>

298
00:12:42,730 --> 00:12:48,980
pages with read-only permissions<font color="#CCCCCC"> ok</font>

299
00:12:46,339 --> 00:12:51,680
Linux is not doing that<font color="#CCCCCC"> for us okay this</font>

300
00:12:48,980 --> 00:12:54,080
is just to show<font color="#CCCCCC"> you what this</font><font color="#E5E5E5"> actually</font>

301
00:12:51,680 --> 00:12:55,729
is a large memory<font color="#E5E5E5"> layout and all this</font>

302
00:12:54,080 --> 00:12:59,380
stuff<font color="#CCCCCC"> ok it's not just a static thing</font>

303
00:12:55,730 --> 00:13:01,760
<font color="#E5E5E5">that you don't</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> who is doing what ok</font>

304
00:12:59,380 --> 00:13:04,310
but the point here is that<font color="#E5E5E5"> libraries are</font>

305
00:13:01,760 --> 00:13:06,410
<font color="#E5E5E5">loaded</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> side-by-side here but there</font>

306
00:13:04,310 --> 00:13:10,430
<font color="#CCCCCC">is no more randomization okay there is</font>

307
00:13:06,410 --> 00:13:13,160
no no no one<font color="#E5E5E5"> is</font><font color="#CCCCCC"> doing more random things</font>

308
00:13:10,430 --> 00:13:15,859
let's say<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> put in libraries here</font>

309
00:13:13,160 --> 00:13:20,240
<font color="#E5E5E5">side by</font><font color="#CCCCCC"> side by from outside it looks</font><font color="#E5E5E5"> ok</font>

310
00:13:15,860 --> 00:13:23,420
<font color="#E5E5E5">this is a random value okay so just to</font>

311
00:13:20,240 --> 00:13:27,230
do a comparison between<font color="#E5E5E5"> a SLR in 32-bit</font>

312
00:13:23,420 --> 00:13:30,349
and 64-bit architecture quickly<font color="#CCCCCC"> most</font><font color="#E5E5E5"> of</font>

313
00:13:27,230 --> 00:13:32,390
the people<font color="#E5E5E5"> if you ask why the SLR is</font>

314
00:13:30,350 --> 00:13:33,709
<font color="#E5E5E5">much better in 64-bit architectures well</font>

315
00:13:32,390 --> 00:13:35,060
the<font color="#CCCCCC"> fennec will be all character</font><font color="#E5E5E5"> because</font>

316
00:13:33,709 --> 00:13:36,619
you have much more entropy

317
00:13:35,060 --> 00:13:38,900
<font color="#CCCCCC">ok</font><font color="#E5E5E5"> if you compare the entropy</font><font color="#CCCCCC"> that we</font>

318
00:13:36,620 --> 00:13:40,910
have in 32-bit architecture is only a

319
00:13:38,900 --> 00:13:44,329
bit with me that

320
00:13:40,910 --> 00:13:46,880
260 possibilities you<font color="#E5E5E5"> know</font><font color="#CCCCCC"> and if you</font>

321
00:13:44,329 --> 00:13:50,239
compare this entropy with with<font color="#CCCCCC"> 64-bit</font>

322
00:13:46,880 --> 00:13:53,900
<font color="#CCCCCC">elected you will</font><font color="#E5E5E5"> see a lot millions</font>

323
00:13:50,240 --> 00:13:55,430
<font color="#CCCCCC">ok so well</font><font color="#E5E5E5"> millions of options millions</font>

324
00:13:53,900 --> 00:13:57,800
of<font color="#E5E5E5"> places where you can allocate</font><font color="#CCCCCC"> your</font>

325
00:13:55,430 --> 00:13:59,089
libraries so<font color="#E5E5E5"> that is much better but</font>

326
00:13:57,800 --> 00:14:02,540
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is not the only reason</font>

327
00:13:59,089 --> 00:14:06,260
okay what about the<font color="#E5E5E5"> AVI the call</font>

328
00:14:02,540 --> 00:14:08,480
parameters<font color="#CCCCCC"> ok and this is important I'm</font>

329
00:14:06,260 --> 00:14:10,459
<font color="#E5E5E5">going to explain why in 32-bit</font>

330
00:14:08,480 --> 00:14:16,040
architectures<font color="#E5E5E5"> parameters are</font><font color="#CCCCCC"> based on</font>

331
00:14:10,459 --> 00:14:18,650
stack so<font color="#E5E5E5"> and in 64-bit architecture</font>

332
00:14:16,040 --> 00:14:22,219
parameters are<font color="#E5E5E5"> placed in registers and</font>

333
00:14:18,650 --> 00:14:24,230
this is a huge<font color="#CCCCCC"> difference why because</font>

334
00:14:22,220 --> 00:14:27,980
for<font color="#E5E5E5"> example attacks</font><font color="#CCCCCC"> like greater to live</font>

335
00:14:24,230 --> 00:14:31,279
see or read<font color="#E5E5E5"> to whatever are not possible</font>

336
00:14:27,980 --> 00:14:33,680
<font color="#CCCCCC">in 64-bit architecture okay and that's a</font>

337
00:14:31,279 --> 00:14:37,189
<font color="#E5E5E5">matter is not because the entropy is not</font>

338
00:14:33,680 --> 00:14:38,870
no no you can't<font color="#E5E5E5"> jump to do in for</font>

339
00:14:37,190 --> 00:14:40,339
example<font color="#E5E5E5"> in letter to Lucy what the</font>

340
00:14:38,870 --> 00:14:41,750
<font color="#E5E5E5">attackers were doing in 32-bit</font>

341
00:14:40,339 --> 00:14:43,760
architectures is because they control

342
00:14:41,750 --> 00:14:45,589
<font color="#E5E5E5">the stack basically they for example</font>

343
00:14:43,760 --> 00:14:47,209
<font color="#CCCCCC">exploiting a stack buffer overflow they</font>

344
00:14:45,589 --> 00:14:49,850
are<font color="#CCCCCC"> all be writing the stack because</font>

345
00:14:47,209 --> 00:14:51,709
<font color="#CCCCCC">they</font><font color="#E5E5E5"> control the stack they can put the</font>

346
00:14:49,850 --> 00:14:55,459
perimeter they want and then jump for

347
00:14:51,709 --> 00:14:57,739
example to the<font color="#CCCCCC"> PT ok for system or any</font>

348
00:14:55,459 --> 00:15:00,619
other<font color="#E5E5E5"> entry in the PLT section of the</font>

349
00:14:57,740 --> 00:15:02,450
executable<font color="#CCCCCC"> ok so this can</font><font color="#E5E5E5"> this is no</font>

350
00:15:00,620 --> 00:15:04,550
<font color="#CCCCCC">longer</font><font color="#E5E5E5"> possible</font><font color="#CCCCCC"> it's 64</font><font color="#E5E5E5"> with a detector</font>

351
00:15:02,450 --> 00:15:09,440
<font color="#CCCCCC">and it doesn't depend</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> the quality</font><font color="#E5E5E5"> of</font>

352
00:15:04,550 --> 00:15:11,359
<font color="#E5E5E5">SLR or beach entropy</font><font color="#CCCCCC"> over</font><font color="#E5E5E5"> error</font><font color="#CCCCCC"> ok so</font>

353
00:15:09,440 --> 00:15:12,620
for<font color="#E5E5E5"> example</font><font color="#CCCCCC"> they'll set too deep</font><font color="#E5E5E5"> I don't</font>

354
00:15:11,360 --> 00:15:14,180
know if many<font color="#E5E5E5"> of you know</font><font color="#CCCCCC"> what set</font><font color="#E5E5E5"> to</font>

355
00:15:12,620 --> 00:15:16,600
leave is something that we also also

356
00:15:14,180 --> 00:15:19,550
<font color="#CCCCCC">discover unreleased some years ago</font>

357
00:15:16,600 --> 00:15:21,079
currently is not possible<font color="#E5E5E5"> I am using the</font>

358
00:15:19,550 --> 00:15:23,120
word<font color="#E5E5E5"> partial here I'm going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> explain</font>

359
00:15:21,079 --> 00:15:25,670
in a minute why is partial offset to

360
00:15:23,120 --> 00:15:27,740
read<font color="#CCCCCC"> okay you can't use offset</font><font color="#E5E5E5"> to need</font>

361
00:15:25,670 --> 00:15:30,890
to<font color="#CCCCCC"> bypass a salary of 64-bit lectures</font>

362
00:15:27,740 --> 00:15:31,910
today<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> but we can use some of the</font>

363
00:15:30,890 --> 00:15:34,730
<font color="#CCCCCC">ideas of</font><font color="#E5E5E5"> this</font>

364
00:15:31,910 --> 00:15:36,589
<font color="#CCCCCC">tack okay</font><font color="#E5E5E5"> to combine with this the</font>

365
00:15:34,730 --> 00:15:38,840
attack<font color="#CCCCCC"> I am presenting today in order to</font>

366
00:15:36,590 --> 00:15:41,570
achieve<font color="#CCCCCC"> overdrawn okay</font><font color="#E5E5E5"> so summarizing</font>

367
00:15:38,840 --> 00:15:44,390
the<font color="#E5E5E5"> SLR the 64-bit system is not only</font>

368
00:15:41,570 --> 00:15:47,510
<font color="#CCCCCC">better</font><font color="#E5E5E5"> but faster why because I didn't</font>

369
00:15:44,390 --> 00:15:49,340
mention but<font color="#E5E5E5"> we have not support with the</font>

370
00:15:47,510 --> 00:15:52,189
CPU have support for relative

371
00:15:49,340 --> 00:15:53,900
instruction pointer<font color="#CCCCCC"> okay but we</font><font color="#E5E5E5"> don't</font>

372
00:15:52,190 --> 00:15:56,210
have this<font color="#E5E5E5"> kind of support in 32-bit</font>

373
00:15:53,900 --> 00:15:57,439
architecture<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so we need to do some</font>

374
00:15:56,210 --> 00:15:59,150
call tricks here

375
00:15:57,440 --> 00:16:01,760
in order to<font color="#CCCCCC"> know where we are</font><font color="#E5E5E5"> and then</font>

376
00:15:59,150 --> 00:16:05,990
to relatively<font color="#E5E5E5"> access to data and</font><font color="#CCCCCC"> all</font>

377
00:16:01,760 --> 00:16:07,790
this stuff<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so if you can move to 64</font>

378
00:16:05,990 --> 00:16:09,410
you shall do it now so 64 it has

379
00:16:07,790 --> 00:16:13,490
<font color="#CCCCCC">detected is much more secure by</font><font color="#E5E5E5"> file</font>

380
00:16:09,410 --> 00:16:16,069
<font color="#CCCCCC">okay and is faster</font><font color="#E5E5E5"> okay</font>

381
00:16:13,490 --> 00:16:16,910
<font color="#E5E5E5">and again it's not a matter of only a</font>

382
00:16:16,070 --> 00:16:20,810
matter of entropy

383
00:16:16,910 --> 00:16:26,510
<font color="#E5E5E5">but this</font><font color="#CCCCCC"> ABI introduces have</font><font color="#E5E5E5"> a huge</font>

384
00:16:20,810 --> 00:16:28,280
challenge<font color="#CCCCCC"> ok so when I'm saying</font><font color="#E5E5E5"> that</font>

385
00:16:26,510 --> 00:16:30,740
<font color="#E5E5E5">offset to leap attacks are partially</font>

386
00:16:28,280 --> 00:16:32,870
possible<font color="#E5E5E5"> basically of</font><font color="#CCCCCC"> it really</font><font color="#E5E5E5"> was a</font>

387
00:16:30,740 --> 00:16:34,430
<font color="#E5E5E5">practically</font><font color="#CCCCCC"> still are bypass it was a</font>

388
00:16:32,870 --> 00:16:37,370
generic<font color="#CCCCCC"> method but it for multiple</font>

389
00:16:34,430 --> 00:16:40,880
scenarios<font color="#CCCCCC"> but in two</font><font color="#E5E5E5"> years ago three</font>

390
00:16:37,370 --> 00:16:42,440
years ago was was fix it<font color="#E5E5E5"> with and parts</font>

391
00:16:40,880 --> 00:16:44,840
to<font color="#CCCCCC"> the Linux kernel</font><font color="#E5E5E5"> and they and they</font>

392
00:16:42,440 --> 00:16:48,410
fix that<font color="#E5E5E5"> okay with basically</font><font color="#CCCCCC"> means that</font>

393
00:16:44,840 --> 00:16:50,690
now the executable is here but<font color="#CCCCCC"> not here</font>

394
00:16:48,410 --> 00:16:52,420
so before<font color="#CCCCCC"> ever we sent</font><font color="#E5E5E5"> over pass to</font>

395
00:16:50,690 --> 00:16:56,240
Linux kernel the executive all was

396
00:16:52,420 --> 00:16:58,550
joined to<font color="#E5E5E5"> the libraries okay so once you</font>

397
00:16:56,240 --> 00:17:01,220
<font color="#CCCCCC">know where is the executable means that</font>

398
00:16:58,550 --> 00:17:06,829
the libraries are<font color="#E5E5E5"> a constant distance</font>

399
00:17:01,220 --> 00:17:08,720
<font color="#E5E5E5">offset okay but we can use partially</font>

400
00:17:06,829 --> 00:17:10,429
<font color="#E5E5E5">these in order</font><font color="#CCCCCC"> to know where the</font>

401
00:17:08,720 --> 00:17:13,220
executable is in memory<font color="#E5E5E5"> yeah I will</font>

402
00:17:10,430 --> 00:17:15,260
<font color="#CCCCCC">actually later on how so basically we</font>

403
00:17:13,220 --> 00:17:17,480
need<font color="#CCCCCC"> to find an alternative</font><font color="#E5E5E5"> okay so we</font>

404
00:17:15,260 --> 00:17:19,849
are looking<font color="#E5E5E5"> for a generic method okay in</font>

405
00:17:17,480 --> 00:17:22,339
order<font color="#E5E5E5"> to be</font><font color="#CCCCCC"> use this this attacking in</font>

406
00:17:19,849 --> 00:17:24,919
linear scenarios okay<font color="#CCCCCC"> I must to be valid</font>

407
00:17:22,339 --> 00:17:27,290
for 64-bit architectures need to deal

408
00:17:24,920 --> 00:17:29,690
with<font color="#CCCCCC"> a Bri call perimeters all this</font>

409
00:17:27,290 --> 00:17:31,700
<font color="#CCCCCC">stuff okay let's let's find let's</font><font color="#E5E5E5"> see</font>

410
00:17:29,690 --> 00:17:33,200
what we can<font color="#CCCCCC"> do okay so the first</font><font color="#E5E5E5"> thing</font>

411
00:17:31,700 --> 00:17:36,440
we<font color="#E5E5E5"> need okay if we know where is</font>

412
00:17:33,200 --> 00:17:38,720
executable<font color="#E5E5E5"> if we know that we can use it</font>

413
00:17:36,440 --> 00:17:41,300
and<font color="#E5E5E5"> we need to deal</font><font color="#CCCCCC"> with the API with</font>

414
00:17:38,720 --> 00:17:44,360
the<font color="#CCCCCC"> Cal parameters let's see which code</font>

415
00:17:41,300 --> 00:17:45,320
will be<font color="#E5E5E5"> always present there so let's do</font>

416
00:17:44,360 --> 00:17:47,360
a MTC

417
00:17:45,320 --> 00:17:50,178
this is<font color="#E5E5E5"> IMTC file of his only contain</font>

418
00:17:47,360 --> 00:17:53,269
one single line okay<font color="#E5E5E5"> and this</font><font color="#CCCCCC"> is a</font><font color="#E5E5E5"> rate</font>

419
00:17:50,179 --> 00:17:56,480
<font color="#CCCCCC">of zero we mean</font><font color="#E5E5E5"> is doing nothing</font><font color="#CCCCCC"> but if</font>

420
00:17:53,269 --> 00:17:59,149
we compile this<font color="#E5E5E5"> we will see that</font><font color="#CCCCCC"> a lot a</font>

421
00:17:56,480 --> 00:18:02,419
lot of<font color="#E5E5E5"> different</font><font color="#CCCCCC"> symbols</font><font color="#E5E5E5"> are already</font>

422
00:17:59,149 --> 00:18:04,699
include<font color="#E5E5E5"> somehow in our executable but</font>

423
00:18:02,419 --> 00:18:09,440
you know I didn't put that wait a moment

424
00:18:04,700 --> 00:18:13,330
<font color="#CCCCCC">my serum</font><font color="#E5E5E5"> only had main so what are these</font>

425
00:18:09,440 --> 00:18:16,850
<font color="#CCCCCC">functions from where who is</font><font color="#E5E5E5"> putting that</font>

426
00:18:13,330 --> 00:18:19,879
because this<font color="#E5E5E5"> was compiled this was</font>

427
00:18:16,850 --> 00:18:22,279
linked it<font color="#E5E5E5"> my application is dynamically</font>

428
00:18:19,879 --> 00:18:24,230
linked it so what is going<font color="#E5E5E5"> on here</font>

429
00:18:22,279 --> 00:18:26,179
so let's inspect the code you will

430
00:18:24,230 --> 00:18:28,549
inspect the<font color="#E5E5E5"> code we will say the</font><font color="#CCCCCC"> Occulus</font>

431
00:18:26,179 --> 00:18:30,049
<font color="#CCCCCC">object um</font><font color="#E5E5E5"> and we maybe we</font><font color="#CCCCCC"> can't read</font><font color="#E5E5E5"> it</font>

432
00:18:28,549 --> 00:18:33,019
<font color="#E5E5E5">I don't</font><font color="#CCCCCC"> know if you can read it from</font>

433
00:18:30,049 --> 00:18:37,009
there<font color="#E5E5E5"> but there is</font><font color="#CCCCCC"> an init function PL</font>

434
00:18:33,019 --> 00:18:39,279
<font color="#CCCCCC">PL T</font><font color="#E5E5E5"> entries here some</font><font color="#CCCCCC"> finalize errs but</font>

435
00:18:37,009 --> 00:18:42,919
there are more code we have<font color="#CCCCCC"> they start</font>

436
00:18:39,279 --> 00:18:44,960
who is put in the start<font color="#E5E5E5"> from work this</font>

437
00:18:42,919 --> 00:18:48,470
code this is a<font color="#E5E5E5"> sounder Co we can abuse</font>

438
00:18:44,960 --> 00:18:50,750
<font color="#E5E5E5">of it</font><font color="#CCCCCC"> ok the registered in clones</font>

439
00:18:48,470 --> 00:18:52,309
another function but more don't<font color="#E5E5E5"> worry</font>

440
00:18:50,750 --> 00:18:56,179
there<font color="#CCCCCC"> are more registered to in cloned</font>

441
00:18:52,309 --> 00:18:58,460
<font color="#E5E5E5">another function a lot of</font><font color="#CCCCCC"> cohere global</font>

442
00:18:56,179 --> 00:19:00,860
<font color="#E5E5E5">destructors auxilia</font><font color="#CCCCCC"> framed a me Oh</font>

443
00:18:58,460 --> 00:19:04,429
finally we got we will have our main

444
00:19:00,860 --> 00:19:09,918
<font color="#E5E5E5">function here</font><font color="#CCCCCC"> wow this is the return</font><font color="#E5E5E5"> 0</font>

445
00:19:04,429 --> 00:19:12,259
<font color="#CCCCCC">ok code</font><font color="#E5E5E5"> more</font><font color="#CCCCCC"> curved leaves you leave</font><font color="#E5E5E5"> see</font>

446
00:19:09,919 --> 00:19:16,460
as you in it that you can<font color="#CCCCCC"> see</font><font color="#E5E5E5"> here a lot</font>

447
00:19:12,259 --> 00:19:20,649
<font color="#E5E5E5">of code more code fine a lot of function</font>

448
00:19:16,460 --> 00:19:24,730
<font color="#CCCCCC">so we have this sort of code application</font>

449
00:19:20,649 --> 00:19:27,860
<font color="#E5E5E5">but when we see the result in executable</font>

450
00:19:24,730 --> 00:19:32,980
we have all<font color="#E5E5E5"> of this and only this</font><font color="#CCCCCC"> a</font>

451
00:19:27,860 --> 00:19:37,158
small part came from<font color="#E5E5E5"> our C code</font><font color="#CCCCCC"> ok so</font>

452
00:19:32,980 --> 00:19:39,169
let's remove that so let's put a<font color="#E5E5E5"> name to</font>

453
00:19:37,159 --> 00:19:44,059
that so we have<font color="#CCCCCC"> named this attached'</font>

454
00:19:39,169 --> 00:19:47,629
code<font color="#CCCCCC"> ok so for us</font><font color="#E5E5E5"> everything apart from</font>

455
00:19:44,059 --> 00:19:51,710
what<font color="#E5E5E5"> the user</font><font color="#CCCCCC"> can control ok what</font><font color="#E5E5E5"> the</font>

456
00:19:47,629 --> 00:19:54,590
compiler can<font color="#E5E5E5"> let's say protect adopt for</font>

457
00:19:51,710 --> 00:19:56,929
us<font color="#E5E5E5"> will be at a cheat code but who is</font>

458
00:19:54,590 --> 00:19:58,350
<font color="#CCCCCC">attaching it what is used</font><font color="#E5E5E5"> for so we</font>

459
00:19:56,929 --> 00:20:01,020
start to ask question

460
00:19:58,350 --> 00:20:04,590
how protected is this code<font color="#E5E5E5"> so let's</font><font color="#CCCCCC"> say</font>

461
00:20:01,020 --> 00:20:08,760
to quickly answer this<font color="#CCCCCC"> questions</font><font color="#E5E5E5"> who is</font>

462
00:20:04,590 --> 00:20:11,370
attacked<font color="#E5E5E5"> in this code well with just</font><font color="#CCCCCC"> our</font>

463
00:20:08,760 --> 00:20:13,379
script<font color="#E5E5E5"> and let's find everything about</font>

464
00:20:11,370 --> 00:20:15,719
<font color="#CCCCCC">these functions okay</font>

465
00:20:13,380 --> 00:20:19,020
and what we look is and we found<font color="#E5E5E5"> is that</font>

466
00:20:15,720 --> 00:20:20,220
<font color="#CCCCCC">all these functions are in that</font>

467
00:20:19,020 --> 00:20:24,179
<font color="#E5E5E5">particular</font><font color="#CCCCCC"> file</font>

468
00:20:20,220 --> 00:20:26,880
fine<font color="#CCCCCC"> okay these</font><font color="#E5E5E5"> two functions and is in</font>

469
00:20:24,179 --> 00:20:29,370
this particular<font color="#CCCCCC"> file</font><font color="#E5E5E5"> the start is in</font>

470
00:20:26,880 --> 00:20:31,799
that file and<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is in</font><font color="#E5E5E5"> this file well</font>

471
00:20:29,370 --> 00:20:33,780
but wait<font color="#E5E5E5"> a moment theorically my</font>

472
00:20:31,799 --> 00:20:36,750
application is a dynamically<font color="#E5E5E5"> compiled</font>

473
00:20:33,780 --> 00:20:41,178
application<font color="#E5E5E5"> so theorically why I am</font>

474
00:20:36,750 --> 00:20:46,159
using libraries and object files

475
00:20:41,179 --> 00:20:48,780
theorically<font color="#E5E5E5"> you know why so this is a</font>

476
00:20:46,159 --> 00:20:50,280
this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the classical library that</font><font color="#CCCCCC"> is</font>

477
00:20:48,780 --> 00:20:53,370
use when you are compiling a static

478
00:20:50,280 --> 00:20:56,668
things and this is object 5 and when you

479
00:20:53,370 --> 00:20:58,559
are<font color="#CCCCCC"> linking things</font><font color="#E5E5E5"> so basically we can</font>

480
00:20:56,669 --> 00:21:01,289
<font color="#E5E5E5">say that this is the minimum static link</font>

481
00:20:58,559 --> 00:21:04,230
at<font color="#CCCCCC"> call</font><font color="#E5E5E5"> that we will see when</font><font color="#CCCCCC"> we are</font>

482
00:21:01,289 --> 00:21:07,200
<font color="#E5E5E5">using dynamically</font><font color="#CCCCCC"> link at applications</font>

483
00:21:04,230 --> 00:21:09,150
<font color="#CCCCCC">ok so don't</font><font color="#E5E5E5"> think that when you are</font>

484
00:21:07,200 --> 00:21:12,360
<font color="#CCCCCC">using</font><font color="#E5E5E5"> dynamic link application</font>

485
00:21:09,150 --> 00:21:16,650
<font color="#E5E5E5">everything is static so</font><font color="#CCCCCC"> ok now we know</font>

486
00:21:12,360 --> 00:21:19,199
this<font color="#E5E5E5"> code but what is useful let's</font>

487
00:21:16,650 --> 00:21:22,020
simplify it quickly<font color="#E5E5E5"> this is the</font><font color="#CCCCCC"> this is</font>

488
00:21:19,200 --> 00:21:25,530
<font color="#E5E5E5">the</font><font color="#CCCCCC"> x-axis called flow basically</font><font color="#E5E5E5"> the</font>

489
00:21:22,020 --> 00:21:27,299
Linux kernel<font color="#E5E5E5"> again when</font><font color="#CCCCCC"> dams to the to</font>

490
00:21:25,530 --> 00:21:30,120
the dynamic model what is doing

491
00:21:27,299 --> 00:21:32,340
basically is calling from some functions

492
00:21:30,120 --> 00:21:34,260
<font color="#CCCCCC">before mine and</font><font color="#E5E5E5"> after mine so basically</font>

493
00:21:32,340 --> 00:21:36,840
you can<font color="#E5E5E5"> see this as a mechanism which</font>

494
00:21:34,260 --> 00:21:40,200
allow us<font color="#CCCCCC"> to execute</font><font color="#E5E5E5"> code before</font><font color="#CCCCCC"> and</font>

495
00:21:36,840 --> 00:21:41,668
after main<font color="#E5E5E5"> ok don't think that you</font>

496
00:21:40,200 --> 00:21:45,000
remain is the<font color="#E5E5E5"> very first thing</font><font color="#CCCCCC"> that will</font>

497
00:21:41,669 --> 00:21:48,809
be executed<font color="#CCCCCC"> no main is far very far</font>

498
00:21:45,000 --> 00:21:51,600
<font color="#CCCCCC">ok from from is millions of the from</font><font color="#E5E5E5"> the</font>

499
00:21:48,809 --> 00:21:56,299
from the<font color="#E5E5E5"> very first line executed at</font><font color="#CCCCCC"> the</font>

500
00:21:51,600 --> 00:21:58,799
user lab<font color="#E5E5E5"> ok so we can use this</font><font color="#CCCCCC"> attribute</font>

501
00:21:56,299 --> 00:22:00,658
<font color="#E5E5E5">constructor in in over C program and</font>

502
00:21:58,799 --> 00:22:03,960
then all these functions will<font color="#CCCCCC"> be called</font>

503
00:22:00,659 --> 00:22:06,720
<font color="#CCCCCC">before mine ok</font><font color="#E5E5E5"> saying for</font><font color="#CCCCCC"> distractors of</font>

504
00:22:03,960 --> 00:22:10,230
inertia and<font color="#E5E5E5"> so on an example very quick</font>

505
00:22:06,720 --> 00:22:11,440
we have our main fraction<font color="#CCCCCC"> ok yeah</font><font color="#E5E5E5"> this</font>

506
00:22:10,230 --> 00:22:13,809
is the main faction

507
00:22:11,440 --> 00:22:17,259
as you can see this main<font color="#CCCCCC"> function is</font>

508
00:22:13,809 --> 00:22:19,539
calling<font color="#CCCCCC"> - at exit okay but I</font><font color="#E5E5E5"> don't have</font>

509
00:22:17,259 --> 00:22:25,059
any<font color="#CCCCCC"> at exit function</font><font color="#E5E5E5"> here okay</font><font color="#CCCCCC"> I only</font>

510
00:22:19,539 --> 00:22:26,919
<font color="#E5E5E5">have function before after main I my</font>

511
00:22:25,059 --> 00:22:29,559
function at exit<font color="#CCCCCC"> only these three</font><font color="#E5E5E5"> okay</font>

512
00:22:26,919 --> 00:22:33,309
but I<font color="#E5E5E5"> am</font><font color="#CCCCCC"> not killing</font><font color="#E5E5E5"> calling to any of</font>

513
00:22:29,559 --> 00:22:35,168
these in my main program if<font color="#E5E5E5"> we compile</font>

514
00:22:33,309 --> 00:22:38,889
this and<font color="#E5E5E5"> we run this application we will</font>

515
00:22:35,169 --> 00:22:42,669
see<font color="#CCCCCC"> this pops these messages</font><font color="#E5E5E5"> okay so the</font>

516
00:22:38,889 --> 00:22:44,850
first printf is before main<font color="#CCCCCC"> is</font><font color="#E5E5E5"> that one</font>

517
00:22:42,669 --> 00:22:48,309
<font color="#E5E5E5">so because we are using this attribute</font>

518
00:22:44,850 --> 00:22:52,000
constructor so how is possible<font color="#CCCCCC"> that if</font>

519
00:22:48,309 --> 00:22:56,289
<font color="#CCCCCC">we are not</font><font color="#E5E5E5"> in the main calling - - to</font>

520
00:22:52,000 --> 00:22:59,039
that function this printf is how someone

521
00:22:56,289 --> 00:23:02,230
<font color="#E5E5E5">must</font><font color="#CCCCCC"> call this function before our main</font>

522
00:22:59,039 --> 00:23:05,289
<font color="#E5E5E5">okay say it happen after you can use</font>

523
00:23:02,230 --> 00:23:07,899
attribute destructor after main okay and

524
00:23:05,289 --> 00:23:11,559
you see before main<font color="#E5E5E5"> this is the printf</font>

525
00:23:07,899 --> 00:23:14,949
main this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the main take a look this</font>

526
00:23:11,559 --> 00:23:18,210
<font color="#E5E5E5">is</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> exit function but so far good main</font>

527
00:23:14,950 --> 00:23:21,250
mine function at exit is that one and

528
00:23:18,210 --> 00:23:24,940
after main is<font color="#E5E5E5"> the last one</font><font color="#CCCCCC"> okay so</font>

529
00:23:21,250 --> 00:23:26,470
<font color="#CCCCCC">somehow is there are something there</font>

530
00:23:24,940 --> 00:23:31,179
that<font color="#E5E5E5"> is providing us this functionality</font>

531
00:23:26,470 --> 00:23:32,860
<font color="#CCCCCC">okay let's go faster</font><font color="#E5E5E5"> so why it is attach</font>

532
00:23:31,179 --> 00:23:35,220
it<font color="#E5E5E5"> to the executable why this code must</font>

533
00:23:32,860 --> 00:23:38,199
<font color="#CCCCCC">to be in this executable okay basically</font>

534
00:23:35,220 --> 00:23:39,879
because in order<font color="#CCCCCC"> to</font><font color="#E5E5E5"> call</font><font color="#CCCCCC"> these functions</font>

535
00:23:38,200 --> 00:23:41,559
<font color="#E5E5E5">we need to save the pointer somewhere</font>

536
00:23:39,879 --> 00:23:43,539
and these pointers are saved in<font color="#E5E5E5"> the</font>

537
00:23:41,559 --> 00:23:45,100
executable<font color="#E5E5E5"> and why we are saving these</font>

538
00:23:43,539 --> 00:23:46,539
pointers or store<font color="#E5E5E5"> these pointers in</font>

539
00:23:45,100 --> 00:23:49,840
executable<font color="#E5E5E5"> you know because each</font>

540
00:23:46,539 --> 00:23:51,700
application define its own<font color="#E5E5E5"> constructors</font>

541
00:23:49,840 --> 00:23:54,539
destructors<font color="#CCCCCC"> initializing all</font><font color="#E5E5E5"> this stuff</font>

542
00:23:51,700 --> 00:23:57,759
so<font color="#E5E5E5"> make sense that</font><font color="#CCCCCC"> these these pointers</font>

543
00:23:54,539 --> 00:24:00,610
<font color="#E5E5E5">must they are a store in the executable</font>

544
00:23:57,759 --> 00:24:03,759
<font color="#E5E5E5">and in order to</font><font color="#CCCCCC"> sum to</font><font color="#E5E5E5"> simplify this</font>

545
00:24:00,610 --> 00:24:06,758
call this call to leave<font color="#CCCCCC"> CSU unit they</font>

546
00:24:03,759 --> 00:24:09,340
are attaching this<font color="#E5E5E5"> call to the executive</font>

547
00:24:06,759 --> 00:24:11,529
or rather<font color="#E5E5E5"> than other place because if we</font>

548
00:24:09,340 --> 00:24:14,860
don't you if they don't do that<font color="#E5E5E5"> the</font>

549
00:24:11,529 --> 00:24:16,090
problem<font color="#CCCCCC"> is</font><font color="#E5E5E5"> that someone someone call</font><font color="#CCCCCC"> in</font>

550
00:24:14,860 --> 00:24:17,799
<font color="#CCCCCC">to this function for example</font><font color="#E5E5E5"> if you are</font>

551
00:24:16,090 --> 00:24:20,918
<font color="#CCCCCC">using the live</font><font color="#E5E5E5"> C or</font><font color="#CCCCCC"> any other library</font>

552
00:24:17,799 --> 00:24:23,259
<font color="#E5E5E5">will need to parse over executable to</font>

553
00:24:20,919 --> 00:24:25,559
find this pointer in the<font color="#CCCCCC"> executive also</font>

554
00:24:23,259 --> 00:24:28,740
<font color="#E5E5E5">you know it's much more easy</font>

555
00:24:25,559 --> 00:24:30,629
if you attach this probe<font color="#CCCCCC"> examiner</font><font color="#E5E5E5"> okay</font>

556
00:24:28,740 --> 00:24:33,840
so let's analyze this code how protected

557
00:24:30,630 --> 00:24:35,730
is this code so we we just<font color="#E5E5E5"> let's see all</font>

558
00:24:33,840 --> 00:24:38,549
these functions that<font color="#E5E5E5"> we found in our</font>

559
00:24:35,730 --> 00:24:41,549
<font color="#E5E5E5">attach code and let's for example look</font>

560
00:24:38,549 --> 00:24:45,059
for a<font color="#CCCCCC"> stakus machine protector</font><font color="#E5E5E5"> so as we</font>

561
00:24:41,549 --> 00:24:47,460
can<font color="#E5E5E5"> see we are compiling this empty file</font>

562
00:24:45,059 --> 00:24:50,908
with a stack protector<font color="#CCCCCC"> all</font><font color="#E5E5E5"> will means</font>

563
00:24:47,460 --> 00:24:53,429
that all functions<font color="#E5E5E5"> must to</font><font color="#CCCCCC"> be protected</font>

564
00:24:50,909 --> 00:24:54,990
using<font color="#CCCCCC"> the stack smashing protector take</font>

565
00:24:53,429 --> 00:24:58,529
a look only the main function is

566
00:24:54,990 --> 00:25:01,769
protected all the<font color="#CCCCCC"> other</font><font color="#E5E5E5"> functions that</font>

567
00:24:58,529 --> 00:25:04,529
are in our executable<font color="#E5E5E5"> are not protected</font>

568
00:25:01,769 --> 00:25:07,019
so this is<font color="#E5E5E5"> telling us that these</font>

569
00:25:04,529 --> 00:25:11,909
functions<font color="#E5E5E5"> were already compiled are they</font>

570
00:25:07,019 --> 00:25:13,320
are<font color="#E5E5E5"> just linked okay so</font><font color="#CCCCCC"> pi compiled</font><font color="#E5E5E5"> for</font>

571
00:25:11,909 --> 00:25:16,049
these<font color="#CCCCCC"> functions are PI compiled this is</font>

572
00:25:13,320 --> 00:25:18,000
good but all these functions have no

573
00:25:16,049 --> 00:25:20,309
<font color="#E5E5E5">status machine protector</font><font color="#CCCCCC"> which is a</font>

574
00:25:18,000 --> 00:25:22,740
problem okay<font color="#E5E5E5"> so how profitable is this</font>

575
00:25:20,309 --> 00:25:24,779
code in a real attack<font color="#E5E5E5"> okay okay that's</font>

576
00:25:22,740 --> 00:25:27,539
<font color="#E5E5E5">fine</font><font color="#CCCCCC"> we have some added code is in</font><font color="#E5E5E5"> the</font>

577
00:25:24,779 --> 00:25:29,700
executable but how can we abusively<font color="#E5E5E5"> okay</font>

578
00:25:27,539 --> 00:25:32,789
<font color="#E5E5E5">well the</font><font color="#CCCCCC"> first</font><font color="#E5E5E5"> thing</font><font color="#CCCCCC"> you need</font><font color="#E5E5E5"> to</font>

579
00:25:29,700 --> 00:25:36,360
<font color="#E5E5E5">consider is</font><font color="#CCCCCC"> that independently of the</font>

580
00:25:32,789 --> 00:25:39,000
applications of code we have always<font color="#E5E5E5"> disk</font>

581
00:25:36,360 --> 00:25:40,500
<font color="#E5E5E5">all there and it is not protected</font>

582
00:25:39,000 --> 00:25:45,809
against<font color="#CCCCCC"> the stack as machine protector</font>

583
00:25:40,500 --> 00:25:48,269
for example okay<font color="#CCCCCC"> so how can we abuse of</font>

584
00:25:45,809 --> 00:25:49,408
the scenario practice attack so this is

585
00:25:48,269 --> 00:25:52,019
what I'm<font color="#E5E5E5"> going to explain</font><font color="#CCCCCC"> in a minute</font>

586
00:25:49,409 --> 00:25:54,840
<font color="#E5E5E5">later to see see what that okay so this</font>

587
00:25:52,019 --> 00:25:59,220
is the let's say the<font color="#E5E5E5"> steps the receive</font>

588
00:25:54,840 --> 00:26:01,559
in order<font color="#E5E5E5"> to to bypass the the SLR in</font>

589
00:25:59,220 --> 00:26:04,980
64-bit<font color="#E5E5E5"> so the first thing we did</font><font color="#CCCCCC"> is</font>

590
00:26:01,559 --> 00:26:07,408
let's let's try<font color="#E5E5E5"> to reduce this attacks</font>

591
00:26:04,980 --> 00:26:09,809
code let's pass this<font color="#CCCCCC"> at article 2</font>

592
00:26:07,409 --> 00:26:14,039
automatic tools to see if they can find

593
00:26:09,809 --> 00:26:18,149
any drop any gadget something that is

594
00:26:14,039 --> 00:26:20,220
useful<font color="#E5E5E5"> for</font><font color="#CCCCCC"> us okay</font><font color="#E5E5E5"> only</font><font color="#CCCCCC"> considering this</font>

595
00:26:18,149 --> 00:26:22,260
<font color="#CCCCCC">attacks code</font><font color="#E5E5E5"> okay this will be printed</font>

596
00:26:20,220 --> 00:26:24,240
you know you can go home<font color="#E5E5E5"> you can check</font>

597
00:26:22,260 --> 00:26:26,519
<font color="#E5E5E5">any application you have and all this</font>

598
00:26:24,240 --> 00:26:27,960
code will<font color="#CCCCCC"> be printed always</font><font color="#E5E5E5"> okay and you</font>

599
00:26:26,519 --> 00:26:30,630
can do anything you<font color="#E5E5E5"> can't protect it you</font>

600
00:26:27,960 --> 00:26:34,590
<font color="#E5E5E5">can't</font><font color="#CCCCCC"> really be there you</font><font color="#E5E5E5"> can touch it</font>

601
00:26:30,630 --> 00:26:37,289
<font color="#CCCCCC">okay so we have</font><font color="#E5E5E5"> use dropper and the</font>

602
00:26:34,590 --> 00:26:38,939
result unfortunately is<font color="#CCCCCC"> that some</font><font color="#E5E5E5"> of the</font>

603
00:26:37,289 --> 00:26:40,980
necessary gadget to will

604
00:26:38,940 --> 00:26:44,310
<font color="#E5E5E5">ban drop attack were not found by this</font>

605
00:26:40,980 --> 00:26:46,620
by this dropper tool okay<font color="#E5E5E5"> got it like</font>

606
00:26:44,310 --> 00:26:49,080
right what we were not present<font color="#CCCCCC"> no</font>

607
00:26:46,620 --> 00:26:51,989
control of some registered no sis<font color="#E5E5E5"> call</font>

608
00:26:49,080 --> 00:26:53,939
<font color="#E5E5E5">okay so means that this code you know is</font>

609
00:26:51,990 --> 00:26:57,390
good but<font color="#CCCCCC"> you know it's</font><font color="#E5E5E5"> not as good as</font>

610
00:26:53,940 --> 00:26:59,720
<font color="#E5E5E5">let's use automatic tool okay so let's</font>

611
00:26:57,390 --> 00:27:04,050
use another another application<font color="#E5E5E5"> another</font>

612
00:26:59,720 --> 00:27:05,910
rope<font color="#E5E5E5"> shell change in</font><font color="#CCCCCC"> attitude so same</font>

613
00:27:04,050 --> 00:27:09,240
basically same problem<font color="#E5E5E5"> okay they find</font>

614
00:27:05,910 --> 00:27:10,910
the we<font color="#CCCCCC"> can</font><font color="#E5E5E5"> control some registers but</font>

615
00:27:09,240 --> 00:27:14,370
there are enough<font color="#E5E5E5"> there are not enough</font>

616
00:27:10,910 --> 00:27:15,960
stuff here<font color="#E5E5E5"> to build a real attack in</font>

617
00:27:14,370 --> 00:27:17,300
practice<font color="#E5E5E5"> okay so we are looking for</font>

618
00:27:15,960 --> 00:27:20,880
<font color="#E5E5E5">something that we can use in practice</font>

619
00:27:17,300 --> 00:27:24,300
<font color="#E5E5E5">okay they fail so let's see what we can</font>

620
00:27:20,880 --> 00:27:26,370
<font color="#CCCCCC">do so let's do a manual analysis of this</font>

621
00:27:24,300 --> 00:27:29,700
attach it code for fun and profit<font color="#CCCCCC"> okay</font>

622
00:27:26,370 --> 00:27:31,110
so the first<font color="#E5E5E5"> thing we found is</font><font color="#CCCCCC"> that</font>

623
00:27:29,700 --> 00:27:32,790
there are<font color="#E5E5E5"> something interesting in in</font>

624
00:27:31,110 --> 00:27:35,340
one<font color="#E5E5E5"> of these attached code in a partial</font>

625
00:27:32,790 --> 00:27:37,230
at the bottom we<font color="#CCCCCC"> can see this we can</font>

626
00:27:35,340 --> 00:27:39,600
probably recognize<font color="#E5E5E5"> this pop-pop-pop-pop</font>

627
00:27:37,230 --> 00:27:42,600
<font color="#CCCCCC">we look very good for us okay</font><font color="#E5E5E5"> basically</font>

628
00:27:39,600 --> 00:27:44,490
<font color="#CCCCCC">this guy to</font><font color="#E5E5E5"> be named is gadget one it is</font>

629
00:27:42,600 --> 00:27:46,500
not<font color="#E5E5E5"> bad</font><font color="#CCCCCC"> we are controlling some register</font>

630
00:27:44,490 --> 00:27:48,150
<font color="#E5E5E5">but unfortunately the interested ones</font>

631
00:27:46,500 --> 00:27:50,430
the ones that are used to pass

632
00:27:48,150 --> 00:27:53,220
parameters to functions<font color="#E5E5E5"> we don't have</font>

633
00:27:50,430 --> 00:27:55,260
the control<font color="#CCCCCC"> of that for</font><font color="#E5E5E5"> example at the</font><font color="#CCCCCC"> I</font>

634
00:27:53,220 --> 00:27:58,590
<font color="#CCCCCC">air as I at the edge we</font><font color="#E5E5E5"> don't control</font>

635
00:27:55,260 --> 00:28:01,050
<font color="#E5E5E5">this this okay so not bad but you know</font>

636
00:27:58,590 --> 00:28:04,560
this we are in the<font color="#E5E5E5"> same situation</font><font color="#CCCCCC"> that</font>

637
00:28:01,050 --> 00:28:08,129
<font color="#E5E5E5">the</font><font color="#CCCCCC"> automatic thought well if we take a</font>

638
00:28:04,560 --> 00:28:10,020
look to<font color="#CCCCCC"> the second gadget we found in we</font>

639
00:28:08,130 --> 00:28:15,050
now expect some<font color="#CCCCCC"> Amana inspection we will</font>

640
00:28:10,020 --> 00:28:19,860
see that there<font color="#CCCCCC"> are some some moves here</font>

641
00:28:15,050 --> 00:28:21,720
<font color="#CCCCCC">one our call</font><font color="#E5E5E5"> using this r12 and EDX</font>

642
00:28:19,860 --> 00:28:27,780
<font color="#CCCCCC">which means that we</font><font color="#E5E5E5"> don't have the</font>

643
00:28:21,720 --> 00:28:30,650
<font color="#E5E5E5">control but if you see this end of this</font>

644
00:28:27,780 --> 00:28:38,220
<font color="#CCCCCC">gadget you will see that the registers</font>

645
00:28:30,650 --> 00:28:40,950
we need here<font color="#CCCCCC"> to control this</font><font color="#E5E5E5"> call these</font>

646
00:28:38,220 --> 00:28:44,760
<font color="#E5E5E5">three basically are using because they</font>

647
00:28:40,950 --> 00:28:46,590
are moved are using these three we<font color="#E5E5E5"> don't</font>

648
00:28:44,760 --> 00:28:48,960
control<font color="#E5E5E5"> this we here but we control</font>

649
00:28:46,590 --> 00:28:51,419
these three in the first gadget

650
00:28:48,960 --> 00:28:52,870
<font color="#E5E5E5">okay the</font><font color="#CCCCCC"> furniture wall is not you know</font>

651
00:28:51,420 --> 00:28:55,660
actor is<font color="#CCCCCC"> not very</font><font color="#E5E5E5"> interesting because</font>

652
00:28:52,870 --> 00:28:56,800
I can't<font color="#E5E5E5"> control this</font><font color="#CCCCCC"> that youssef useful</font>

653
00:28:55,660 --> 00:29:00,670
register that<font color="#E5E5E5"> I need</font>

654
00:28:56,800 --> 00:29:02,230
well let's save it<font color="#CCCCCC"> for later</font><font color="#E5E5E5"> we can't</font>

655
00:29:00,670 --> 00:29:04,840
see oops

656
00:29:02,230 --> 00:29:08,200
<font color="#E5E5E5">okay so basically</font><font color="#CCCCCC"> what this is telling</font>

657
00:29:04,840 --> 00:29:10,540
us is<font color="#CCCCCC"> that we can basically make</font><font color="#E5E5E5"> a call</font>

658
00:29:08,200 --> 00:29:12,610
a control call more or less<font color="#CCCCCC"> okay let's</font>

659
00:29:10,540 --> 00:29:16,480
see<font color="#E5E5E5"> what we can</font><font color="#CCCCCC"> find</font><font color="#E5E5E5"> from here so this</font>

660
00:29:12,610 --> 00:29:19,389
<font color="#CCCCCC">is a nice</font><font color="#E5E5E5"> in summary we can jump to the</font>

661
00:29:16,480 --> 00:29:24,430
<font color="#CCCCCC">very first gadget</font><font color="#E5E5E5"> we can do this pops</font>

662
00:29:19,390 --> 00:29:27,730
<font color="#E5E5E5">okay and we can again change the control</font>

663
00:29:24,430 --> 00:29:29,559
flow to the moves and basically what we

664
00:29:27,730 --> 00:29:32,320
have in zip code is<font color="#CCCCCC"> something like this</font>

665
00:29:29,559 --> 00:29:35,678
<font color="#E5E5E5">okay we have like a called</font>

666
00:29:32,320 --> 00:29:39,790
function call<font color="#E5E5E5"> with three arguments</font><font color="#CCCCCC"> that</font>

667
00:29:35,679 --> 00:29:42,070
we can control<font color="#E5E5E5"> more or less okay</font><font color="#CCCCCC"> so at</font>

668
00:29:39,790 --> 00:29:44,970
this point we have a<font color="#E5E5E5"> control call okay</font>

669
00:29:42,070 --> 00:29:48,970
<font color="#E5E5E5">well</font><font color="#CCCCCC"> basically we can control almost</font>

670
00:29:44,970 --> 00:29:52,780
<font color="#E5E5E5">three registers except the first which</font>

671
00:29:48,970 --> 00:29:56,230
<font color="#E5E5E5">is only 32 32 lower</font><font color="#CCCCCC"> speech because this</font>

672
00:29:52,780 --> 00:29:58,990
is this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> R is</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> e and we are</font>

673
00:29:56,230 --> 00:30:01,929
using only the health of the world<font color="#E5E5E5"> okay</font>

674
00:29:58,990 --> 00:30:04,330
so we can jump what we want<font color="#E5E5E5"> and control</font>

675
00:30:01,929 --> 00:30:06,970
up to<font color="#CCCCCC"> three arguments not</font><font color="#E5E5E5"> bad so now</font><font color="#CCCCCC"> the</font>

676
00:30:04,330 --> 00:30:09,790
question<font color="#CCCCCC"> is</font><font color="#E5E5E5"> let's analyze what we have</font>

677
00:30:06,970 --> 00:30:11,620
so in order<font color="#E5E5E5"> to create a universal micro</font>

678
00:30:09,790 --> 00:30:13,870
Rob to control the<font color="#CCCCCC"> execution flow</font><font color="#E5E5E5"> just</font>

679
00:30:11,620 --> 00:30:15,489
ablution of this and considering only

680
00:30:13,870 --> 00:30:18,550
the attached code the code<font color="#E5E5E5"> that is not</font>

681
00:30:15,490 --> 00:30:22,030
<font color="#CCCCCC">coming from this source code</font><font color="#E5E5E5"> okay this</font>

682
00:30:18,550 --> 00:30:25,178
is our current situation<font color="#E5E5E5"> okay with</font><font color="#CCCCCC"> a</font>

683
00:30:22,030 --> 00:30:28,030
<font color="#CCCCCC">micro rope chain but again we don't have</font>

684
00:30:25,179 --> 00:30:30,330
<font color="#CCCCCC">catch it like right what</font><font color="#E5E5E5"> were with means</font>

685
00:30:28,030 --> 00:30:33,610
okay I want<font color="#E5E5E5"> to write this string in this</font>

686
00:30:30,330 --> 00:30:36,610
portion of memory<font color="#E5E5E5"> we control three</font>

687
00:30:33,610 --> 00:30:39,399
arguments<font color="#E5E5E5"> okay but you know we can we</font>

688
00:30:36,610 --> 00:30:42,550
can set some register<font color="#E5E5E5"> to some values but</font>

689
00:30:39,400 --> 00:30:46,510
if<font color="#CCCCCC"> we</font><font color="#E5E5E5"> are looking</font><font color="#CCCCCC"> for to call</font><font color="#E5E5E5"> some some</font>

690
00:30:42,550 --> 00:30:48,790
functions<font color="#E5E5E5"> we can set this particular</font>

691
00:30:46,510 --> 00:30:50,860
register to a particular<font color="#E5E5E5"> value but not</font>

692
00:30:48,790 --> 00:30:53,710
<font color="#E5E5E5">the content</font><font color="#CCCCCC"> okay so we need</font><font color="#E5E5E5"> to be</font>

693
00:30:50,860 --> 00:30:56,678
<font color="#CCCCCC">careful with pointers for example we can</font>

694
00:30:53,710 --> 00:30:59,980
<font color="#CCCCCC">put this number but we cannot create</font>

695
00:30:56,679 --> 00:31:02,560
<font color="#E5E5E5">this string or this multi-dimensional</font>

696
00:30:59,980 --> 00:31:05,170
<font color="#E5E5E5">array string okay which is the second</font>

697
00:31:02,560 --> 00:31:08,139
argument<font color="#E5E5E5"> for the exec system call for</font>

698
00:31:05,170 --> 00:31:10,510
<font color="#CCCCCC">example</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so we can</font><font color="#E5E5E5"> control the flow</font>

699
00:31:08,140 --> 00:31:11,170
we can specify the destination of all

700
00:31:10,510 --> 00:31:14,700
<font color="#E5E5E5">kind okay</font>

701
00:31:11,170 --> 00:31:18,340
I'm going to<font color="#E5E5E5"> jump here</font><font color="#CCCCCC"> but we</font><font color="#E5E5E5"> don't have</font>

702
00:31:14,700 --> 00:31:20,500
some some interesting register<font color="#E5E5E5"> so let's</font>

703
00:31:18,340 --> 00:31:24,639
see what how<font color="#E5E5E5"> can we escape of these and</font>

704
00:31:20,500 --> 00:31:26,710
finally execute what we want okay<font color="#E5E5E5"> again</font>

705
00:31:24,640 --> 00:31:29,710
we<font color="#E5E5E5"> don't know where the heap live</font><font color="#CCCCCC"> see or</font>

706
00:31:26,710 --> 00:31:31,690
extract is memory<font color="#CCCCCC"> okay so how can we</font>

707
00:31:29,710 --> 00:31:33,670
create<font color="#E5E5E5"> a method</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> delimiter from this</font>

708
00:31:31,690 --> 00:31:37,600
<font color="#E5E5E5">so let's review again</font>

709
00:31:33,670 --> 00:31:41,470
<font color="#E5E5E5">okay this attached' code okay</font><font color="#CCCCCC"> so far we</font>

710
00:31:37,600 --> 00:31:44,500
have abuse of<font color="#CCCCCC"> leaves see as you in it</font>

711
00:31:41,470 --> 00:31:49,270
okay<font color="#CCCCCC"> only that but we have much more</font><font color="#E5E5E5"> at</font>

712
00:31:44,500 --> 00:31:52,240
<font color="#E5E5E5">that code so going faster because I am</font>

713
00:31:49,270 --> 00:31:54,100
running<font color="#E5E5E5"> of time we can use</font><font color="#CCCCCC"> P LTS because</font>

714
00:31:52,240 --> 00:31:59,050
<font color="#CCCCCC">they are</font><font color="#E5E5E5"> very good candidate okay you</font>

715
00:31:54,100 --> 00:32:02,219
see the<font color="#CCCCCC"> how we need to call a PhD</font><font color="#E5E5E5"> it</font>

716
00:31:59,050 --> 00:32:06,428
looks<font color="#E5E5E5"> like a function function call okay</font>

717
00:32:02,220 --> 00:32:08,500
<font color="#CCCCCC">PT's re as you can see in the executable</font>

718
00:32:06,429 --> 00:32:11,290
areas of mice<font color="#CCCCCC"> that is attached to the</font>

719
00:32:08,500 --> 00:32:13,600
wall<font color="#E5E5E5"> and if we</font><font color="#CCCCCC"> consider</font><font color="#E5E5E5"> the basic basic</font>

720
00:32:11,290 --> 00:32:16,000
<font color="#E5E5E5">very basic application</font><font color="#CCCCCC"> must have read</font>

721
00:32:13,600 --> 00:32:17,830
write or<font color="#E5E5E5"> send and recite because</font>

722
00:32:16,000 --> 00:32:19,630
otherwise is there is no way to<font color="#CCCCCC"> interact</font>

723
00:32:17,830 --> 00:32:23,290
with<font color="#E5E5E5"> the application so we can assume</font>

724
00:32:19,630 --> 00:32:25,660
<font color="#E5E5E5">that or either</font><font color="#CCCCCC"> read write or</font><font color="#E5E5E5"> send</font>

725
00:32:23,290 --> 00:32:27,550
receive will<font color="#CCCCCC"> be there</font><font color="#E5E5E5"> okay or all</font>

726
00:32:25,660 --> 00:32:30,580
<font color="#CCCCCC">honored this is just two examples but</font>

727
00:32:27,550 --> 00:32:32,830
some way to interact<font color="#E5E5E5"> okay because if we</font>

728
00:32:30,580 --> 00:32:36,730
<font color="#E5E5E5">cannot interact it's hard to explain</font>

729
00:32:32,830 --> 00:32:38,439
<font color="#E5E5E5">that okay so assuming</font><font color="#CCCCCC"> that this is a</font>

730
00:32:36,730 --> 00:32:40,780
basic basic server

731
00:32:38,440 --> 00:32:43,870
calling to return right<font color="#CCCCCC"> okay so now we</font>

732
00:32:40,780 --> 00:32:45,809
have<font color="#CCCCCC"> our MTC file</font><font color="#E5E5E5"> but this simplified is</font>

733
00:32:43,870 --> 00:32:48,070
calling to read and write only these<font color="#E5E5E5"> two</font>

734
00:32:45,809 --> 00:32:50,740
<font color="#E5E5E5">otherwise we cannot even talk to the</font>

735
00:32:48,070 --> 00:32:54,850
<font color="#CCCCCC">execute oh</font><font color="#E5E5E5"> okay this is how PS</font><font color="#CCCCCC"> these</font>

736
00:32:50,740 --> 00:32:57,940
looks<font color="#E5E5E5"> okay so basically</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> did an</font>

737
00:32:54,850 --> 00:33:00,790
abstraction is basically if we have

738
00:32:57,940 --> 00:33:04,059
right in in our program<font color="#E5E5E5"> okay means that</font>

739
00:33:00,790 --> 00:33:05,110
there is<font color="#CCCCCC"> a P P LT entry</font><font color="#E5E5E5"> okay and this is</font>

740
00:33:04,059 --> 00:33:07,720
<font color="#CCCCCC">basically the arguments they are</font>

741
00:33:05,110 --> 00:33:10,418
expecting<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> you will match this</font><font color="#E5E5E5"> what</font>

742
00:33:07,720 --> 00:33:12,250
we have<font color="#E5E5E5"> basically the very first</font>

743
00:33:10,419 --> 00:33:14,740
argument is a file<font color="#E5E5E5"> description</font><font color="#CCCCCC"> this is</font>

744
00:33:12,250 --> 00:33:17,140
<font color="#E5E5E5">okay with us the second argument is</font><font color="#CCCCCC"> R is</font>

745
00:33:14,740 --> 00:33:19,600
a pointer<font color="#E5E5E5"> so we can control</font><font color="#CCCCCC"> the others</font>

746
00:33:17,140 --> 00:33:22,020
<font color="#E5E5E5">but not the</font><font color="#CCCCCC"> content so 5050</font>

747
00:33:19,600 --> 00:33:24,428
and the<font color="#E5E5E5"> fifth the third argument is the</font>

748
00:33:22,020 --> 00:33:26,830
<font color="#E5E5E5">number</font><font color="#CCCCCC"> of a</font><font color="#E5E5E5"> bite that</font><font color="#CCCCCC"> you want to</font><font color="#E5E5E5"> write</font>

749
00:33:24,429 --> 00:33:28,570
<font color="#CCCCCC">okay so this is fine for us</font><font color="#E5E5E5"> so the</font>

750
00:33:26,830 --> 00:33:31,990
second one<font color="#E5E5E5"> so far is the</font><font color="#CCCCCC"> only one</font><font color="#E5E5E5"> that</font>

751
00:33:28,570 --> 00:33:35,080
<font color="#E5E5E5">is a little bit difficult so let's let's</font>

752
00:33:31,990 --> 00:33:38,140
see how we can up<font color="#E5E5E5"> use of this right okay</font>

753
00:33:35,080 --> 00:33:41,530
if we are able to<font color="#E5E5E5"> call to this right we</font>

754
00:33:38,140 --> 00:33:44,470
can<font color="#E5E5E5"> reduce the file descriptor in order</font>

755
00:33:41,530 --> 00:33:47,200
<font color="#E5E5E5">to leak information to us okay</font>

756
00:33:44,470 --> 00:33:48,669
for<font color="#E5E5E5"> example we can call to</font><font color="#CCCCCC"> right and if</font>

757
00:33:47,200 --> 00:33:50,590
<font color="#E5E5E5">we somehow are connected to a server</font>

758
00:33:48,669 --> 00:33:52,480
that<font color="#E5E5E5"> means that this server internally</font>

759
00:33:50,590 --> 00:33:55,270
is handling<font color="#E5E5E5"> is keeping a file descriptor</font>

760
00:33:52,480 --> 00:33:58,450
associated to<font color="#CCCCCC"> our connection</font><font color="#E5E5E5"> okay so if</font>

761
00:33:55,270 --> 00:34:02,129
we write in this file descriptor<font color="#E5E5E5"> these</font>

762
00:33:58,450 --> 00:34:04,240
<font color="#E5E5E5">methods will arrive to us okay</font><font color="#CCCCCC"> so</font>

763
00:34:02,130 --> 00:34:05,890
basically<font color="#CCCCCC"> define the</font><font color="#E5E5E5"> future</font><font color="#CCCCCC"> is an</font>

764
00:34:04,240 --> 00:34:08,530
<font color="#CCCCCC">integrator we can predict</font><font color="#E5E5E5"> okay this is</font>

765
00:34:05,890 --> 00:34:11,260
this is trivial<font color="#E5E5E5"> so the second the most</font>

766
00:34:08,530 --> 00:34:16,750
problematic one<font color="#E5E5E5"> we can put any value but</font>

767
00:34:11,260 --> 00:34:19,679
no pointers so so better say we cannot

768
00:34:16,750 --> 00:34:23,739
control<font color="#E5E5E5"> the</font><font color="#CCCCCC"> content or the point well we</font>

769
00:34:19,679 --> 00:34:26,290
<font color="#CCCCCC">have the</font><font color="#E5E5E5"> god table here okay and the god</font>

770
00:34:23,739 --> 00:34:29,408
fable is helping us a lot<font color="#E5E5E5"> why because</font>

771
00:34:26,290 --> 00:34:32,710
<font color="#CCCCCC">god table</font><font color="#E5E5E5"> is an</font><font color="#CCCCCC"> arai</font><font color="#E5E5E5"> this array is in</font>

772
00:34:29,409 --> 00:34:35,919
<font color="#E5E5E5">the executable area and contains its</font>

773
00:34:32,710 --> 00:34:38,889
content is our pointer to libraries

774
00:34:35,918 --> 00:34:40,330
<font color="#CCCCCC">where the library side</font><font color="#E5E5E5"> okay so basically</font>

775
00:34:38,889 --> 00:34:45,280
<font color="#CCCCCC">we can</font><font color="#E5E5E5"> see this</font><font color="#CCCCCC"> God as an array of</font>

776
00:34:40,330 --> 00:34:49,659
<font color="#E5E5E5">pointers so we can use here as a second</font>

777
00:34:45,280 --> 00:34:53,800
argument<font color="#E5E5E5"> word</font><font color="#CCCCCC"> an entry in this case the</font>

778
00:34:49,659 --> 00:34:57,280
number<font color="#E5E5E5"> one okay so</font><font color="#CCCCCC"> this is the call we</font>

779
00:34:53,800 --> 00:35:00,160
can do using<font color="#CCCCCC"> the let's say the gadget we</font>

780
00:34:57,280 --> 00:35:02,500
have okay<font color="#CCCCCC"> and this is a trick to</font>

781
00:35:00,160 --> 00:35:05,200
<font color="#CCCCCC">randomize the live cylinder</font><font color="#E5E5E5"> okay this is</font>

782
00:35:02,500 --> 00:35:08,109
<font color="#E5E5E5">part of the attack</font><font color="#CCCCCC"> so if we somehow</font><font color="#E5E5E5"> can</font>

783
00:35:05,200 --> 00:35:10,330
for example<font color="#E5E5E5"> assuming that the</font><font color="#CCCCCC"> operating</font>

784
00:35:08,109 --> 00:35:13,180
system<font color="#CCCCCC"> platoon the number four</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> I've</font>

785
00:35:10,330 --> 00:35:16,660
added<font color="#E5E5E5"> as a fi the filter and then we can</font>

786
00:35:13,180 --> 00:35:20,410
write for<font color="#E5E5E5"> God Table eight</font><font color="#CCCCCC"> and this will</font>

787
00:35:16,660 --> 00:35:25,299
magically send us the content of the<font color="#CCCCCC"> God</font>

788
00:35:20,410 --> 00:35:28,089
<font color="#E5E5E5">okay so basically in order to leak where</font>

789
00:35:25,300 --> 00:35:30,609
the life<font color="#E5E5E5"> C is in memory we are basically</font>

790
00:35:28,089 --> 00:35:33,770
<font color="#E5E5E5">are writing the</font><font color="#CCCCCC"> address of this</font><font color="#E5E5E5"> God</font>

791
00:35:30,609 --> 00:35:36,500
<font color="#E5E5E5">table which</font><font color="#CCCCCC"> is in the executable area</font>

792
00:35:33,770 --> 00:35:39,380
<font color="#E5E5E5">okay and</font><font color="#CCCCCC"> therefore</font><font color="#E5E5E5"> the life C will be</font>

793
00:35:36,500 --> 00:35:41,300
randomized<font color="#CCCCCC"> okay so now the third</font>

794
00:35:39,380 --> 00:35:44,300
parameter<font color="#CCCCCC"> is eight with miss that please</font>

795
00:35:41,300 --> 00:35:46,190
<font color="#E5E5E5">write</font><font color="#CCCCCC"> eight byte using the file</font>

796
00:35:44,300 --> 00:35:49,310
descriptor<font color="#E5E5E5"> associated to my connection</font>

797
00:35:46,190 --> 00:35:51,710
and please send us the content of the

798
00:35:49,310 --> 00:35:55,640
very first<font color="#E5E5E5"> entry</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the god table</font><font color="#CCCCCC"> which</font>

799
00:35:51,710 --> 00:35:59,660
is where is the right function is is

800
00:35:55,640 --> 00:36:01,549
loaded<font color="#E5E5E5"> in</font><font color="#CCCCCC"> memory okay so basically</font><font color="#E5E5E5"> the</font>

801
00:35:59,660 --> 00:36:03,920
server is sending us where this<font color="#CCCCCC"> write</font>

802
00:36:01,550 --> 00:36:06,560
<font color="#E5E5E5">function is located in memory</font><font color="#CCCCCC"> so we have</font>

803
00:36:03,920 --> 00:36:09,200
the<font color="#E5E5E5"> the</font><font color="#CCCCCC"> randomized where the live C is</font>

804
00:36:06,560 --> 00:36:13,130
in memory<font color="#CCCCCC"> okay so how</font><font color="#E5E5E5"> can we build a</font>

805
00:36:09,200 --> 00:36:15,140
final attack<font color="#E5E5E5"> okay now we</font><font color="#CCCCCC"> have live C</font>

806
00:36:13,130 --> 00:36:17,570
this is trivial<font color="#CCCCCC"> okay it's trivial to</font>

807
00:36:15,140 --> 00:36:19,490
generate any kind<font color="#CCCCCC"> of food Rob chain</font>

808
00:36:17,570 --> 00:36:22,100
attack okay

809
00:36:19,490 --> 00:36:27,020
and basically it's allowing<font color="#E5E5E5"> us to</font>

810
00:36:22,100 --> 00:36:29,720
execute arbitrary code<font color="#E5E5E5"> okay so we can</font>

811
00:36:27,020 --> 00:36:32,420
see this<font color="#E5E5E5"> attack this</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> two</font><font color="#CCCCCC"> two stages</font>

812
00:36:29,720 --> 00:36:35,089
okay<font color="#CCCCCC"> the first</font><font color="#E5E5E5"> stage basically me is to</font>

813
00:36:32,420 --> 00:36:39,410
create a micro payload to leak<font color="#E5E5E5"> where</font>

814
00:36:35,090 --> 00:36:41,870
this right is in in memory<font color="#E5E5E5"> okay and then</font>

815
00:36:39,410 --> 00:36:43,759
attackers will<font color="#E5E5E5"> reside where</font><font color="#CCCCCC"> this live C</font>

816
00:36:41,870 --> 00:36:47,270
is located the memory actually<font color="#E5E5E5"> wear this</font>

817
00:36:43,760 --> 00:36:49,520
<font color="#E5E5E5">right symbol is in memory but right is a</font>

818
00:36:47,270 --> 00:36:52,040
constant offset from<font color="#CCCCCC"> the base where the</font>

819
00:36:49,520 --> 00:36:55,880
leaves is<font color="#E5E5E5"> in memory and the second</font><font color="#CCCCCC"> stage</font>

820
00:36:52,040 --> 00:36:58,250
is<font color="#E5E5E5"> using this let's create</font><font color="#CCCCCC"> a full</font>

821
00:36:55,880 --> 00:37:01,850
payload<font color="#E5E5E5"> this will</font><font color="#CCCCCC"> formalize much better</font>

822
00:36:58,250 --> 00:37:04,550
these two stages<font color="#CCCCCC"> okay so the full attack</font>

823
00:37:01,850 --> 00:37:05,120
is basically called to the gadget one

824
00:37:04,550 --> 00:37:07,280
<font color="#CCCCCC">okay</font>

825
00:37:05,120 --> 00:37:10,040
this is attached code so this means<font color="#CCCCCC"> that</font>

826
00:37:07,280 --> 00:37:11,720
all<font color="#CCCCCC"> of this is in</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> attach code is in</font>

827
00:37:10,040 --> 00:37:15,740
<font color="#E5E5E5">the executable okay this is the very</font>

828
00:37:11,720 --> 00:37:17,899
first the<font color="#E5E5E5"> very</font><font color="#CCCCCC"> first part</font><font color="#E5E5E5"> okay so we</font>

829
00:37:15,740 --> 00:37:20,000
what we need is to<font color="#E5E5E5"> relate the control</font>

830
00:37:17,900 --> 00:37:22,370
flow to the very first gadget<font color="#E5E5E5"> okay and</font>

831
00:37:20,000 --> 00:37:24,760
then to the second one and<font color="#E5E5E5"> and then to</font>

832
00:37:22,370 --> 00:37:29,089
<font color="#CCCCCC">the third so the third is basically the</font>

833
00:37:24,760 --> 00:37:32,300
PLT entry of right okay as a result<font color="#E5E5E5"> we</font>

834
00:37:29,090 --> 00:37:36,320
will have<font color="#CCCCCC"> word this right symbol is in</font>

835
00:37:32,300 --> 00:37:38,450
memory<font color="#CCCCCC"> okay and this is the input of the</font>

836
00:37:36,320 --> 00:37:42,980
second pilot for the stage number two

837
00:37:38,450 --> 00:37:46,580
<font color="#E5E5E5">okay using this information and then we</font>

838
00:37:42,980 --> 00:37:49,100
<font color="#E5E5E5">can start to jump to gadget</font>

839
00:37:46,580 --> 00:37:53,060
from leave see as much<font color="#E5E5E5"> as</font><font color="#CCCCCC"> we need</font><font color="#E5E5E5"> to</font>

840
00:37:49,100 --> 00:37:55,670
create full functional drop attacks to

841
00:37:53,060 --> 00:37:58,610
do whatever we want with<font color="#CCCCCC"> no restriction</font>

842
00:37:55,670 --> 00:38:00,020
<font color="#E5E5E5">okay at the end I will show you how can</font>

843
00:37:58,610 --> 00:38:04,490
<font color="#E5E5E5">we execute every</font><font color="#CCCCCC"> motion</font>

844
00:38:00,020 --> 00:38:08,750
okay<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> well more</font><font color="#E5E5E5"> or less</font><font color="#CCCCCC"> it seems</font>

845
00:38:04,490 --> 00:38:10,520
<font color="#CCCCCC">clear but how can we</font><font color="#E5E5E5"> know where the</font>

846
00:38:08,750 --> 00:38:12,410
executable is in memory<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is the big</font>

847
00:38:10,520 --> 00:38:13,730
question<font color="#CCCCCC"> okay because you know if I know</font>

848
00:38:12,410 --> 00:38:16,819
where the executable is a<font color="#E5E5E5"> memory</font>

849
00:38:13,730 --> 00:38:19,240
everything<font color="#E5E5E5"> is well again you can use the</font>

850
00:38:16,820 --> 00:38:22,790
offset<font color="#E5E5E5"> to lip</font><font color="#CCCCCC"> burner ability the</font>

851
00:38:19,240 --> 00:38:26,299
witnesses to guess that but I would like

852
00:38:22,790 --> 00:38:28,820
<font color="#E5E5E5">to just present to two things if we are</font>

853
00:38:26,300 --> 00:38:31,340
attacking<font color="#CCCCCC"> a</font><font color="#E5E5E5"> forking server and the</font>

854
00:38:28,820 --> 00:38:34,460
executable<font color="#CCCCCC"> is PI compiled with Miss full</font>

855
00:38:31,340 --> 00:38:37,820
<font color="#CCCCCC">SLR that means that we somehow need to</font>

856
00:38:34,460 --> 00:38:39,530
<font color="#CCCCCC">do brute force attack okay if we are</font>

857
00:38:37,820 --> 00:38:42,200
<font color="#CCCCCC">talking a four-team server and this</font>

858
00:38:39,530 --> 00:38:45,320
forking server is not<font color="#CCCCCC"> pi</font><font color="#E5E5E5"> compile means</font>

859
00:38:42,200 --> 00:38:47,359
that we need<font color="#E5E5E5"> only</font><font color="#CCCCCC"> one single shot to</font>

860
00:38:45,320 --> 00:38:52,370
bypass everything<font color="#CCCCCC"> okay</font>

861
00:38:47,360 --> 00:38:54,470
so that's another<font color="#E5E5E5"> a but doesn't matter</font>

862
00:38:52,370 --> 00:38:56,720
<font color="#E5E5E5">if a canary or all this stuff I</font><font color="#CCCCCC"> will</font>

863
00:38:54,470 --> 00:38:58,899
show you if we<font color="#E5E5E5"> have in</font><font color="#CCCCCC"> a server with</font>

864
00:38:56,720 --> 00:39:02,509
<font color="#E5E5E5">means that is not a four-team server</font>

865
00:38:58,900 --> 00:39:04,340
<font color="#E5E5E5">well if it's not PI executable again</font><font color="#CCCCCC"> one</font>

866
00:39:02,510 --> 00:39:06,380
<font color="#E5E5E5">single salt because</font><font color="#CCCCCC"> we know where we</font>

867
00:39:04,340 --> 00:39:08,470
<font color="#E5E5E5">need</font><font color="#CCCCCC"> to jump</font><font color="#E5E5E5"> and we need how to create a</font>

868
00:39:06,380 --> 00:39:11,060
stack<font color="#CCCCCC"> and we need to you</font><font color="#E5E5E5"> know everything</font>

869
00:39:08,470 --> 00:39:13,700
so we can use this attack in all<font color="#E5E5E5"> these</font>

870
00:39:11,060 --> 00:39:16,220
scenarios<font color="#E5E5E5"> what about we have</font><font color="#CCCCCC"> our in at</font>

871
00:39:13,700 --> 00:39:17,720
the server<font color="#E5E5E5"> and</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> PI executable well</font>

872
00:39:16,220 --> 00:39:21,399
<font color="#E5E5E5">question mark we are still analyzing</font>

873
00:39:17,720 --> 00:39:24,680
<font color="#E5E5E5">this is not that easy because</font><font color="#CCCCCC"> we can't</font>

874
00:39:21,400 --> 00:39:26,870
<font color="#E5E5E5">we can't let's say guess what is the</font>

875
00:39:24,680 --> 00:39:28,930
executable in memory by<font color="#E5E5E5"> doing a small</font>

876
00:39:26,870 --> 00:39:31,880
brute force attack we can<font color="#E5E5E5"> do for example</font>

877
00:39:28,930 --> 00:39:35,270
<font color="#E5E5E5">partial overwrite of the return address</font>

878
00:39:31,880 --> 00:39:37,490
<font color="#E5E5E5">without touching the full address</font><font color="#CCCCCC"> okay</font>

879
00:39:35,270 --> 00:39:40,940
in order to control and jump to the<font color="#E5E5E5"> same</font>

880
00:39:37,490 --> 00:39:44,540
executable<font color="#CCCCCC"> okay but this is a Z for</font>

881
00:39:40,940 --> 00:39:46,870
another day<font color="#E5E5E5"> okay so one automatic tools</font>

882
00:39:44,540 --> 00:39:48,800
like<font color="#CCCCCC"> repair Rob</font><font color="#E5E5E5"> sell fail</font><font color="#CCCCCC"> ok basically</font>

883
00:39:46,870 --> 00:39:50,420
<font color="#E5E5E5">they are so clever</font>

884
00:39:48,800 --> 00:39:52,100
<font color="#CCCCCC">ok but you can imagine</font><font color="#E5E5E5"> they have</font>

885
00:39:50,420 --> 00:39:55,520
limitation they are not perfect<font color="#CCCCCC"> so</font>

886
00:39:52,100 --> 00:39:57,589
basically they are focused on profitable

887
00:39:55,520 --> 00:39:59,060
gadget<font color="#CCCCCC"> ok and then then try to link them</font>

888
00:39:57,590 --> 00:39:59,890
<font color="#CCCCCC">ok this is a gadget this is a</font><font color="#E5E5E5"> ready</font>

889
00:39:59,060 --> 00:40:02,619
<font color="#E5E5E5">disregarded</font>

890
00:39:59,890 --> 00:40:06,190
and as you can<font color="#E5E5E5"> see we this this the</font>

891
00:40:02,619 --> 00:40:07,799
gadget that<font color="#E5E5E5"> was key for</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> not a</font>

892
00:40:06,190 --> 00:40:12,400
<font color="#CCCCCC">budget</font><font color="#E5E5E5"> typical budget</font>

893
00:40:07,799 --> 00:40:15,009
pop-pop-pop return this pop-pop-pop<font color="#E5E5E5"> call</font>

894
00:40:12,400 --> 00:40:17,079
and even this<font color="#E5E5E5"> sorry MooMoo book called</font>

895
00:40:15,009 --> 00:40:20,039
anyways even<font color="#CCCCCC"> this move-move-move</font>

896
00:40:17,079 --> 00:40:24,609
is not you know<font color="#E5E5E5"> there is no no relation</font>

897
00:40:20,039 --> 00:40:26,319
so it's hard to to know<font color="#CCCCCC"> that so i better</font>

898
00:40:24,609 --> 00:40:27,848
<font color="#E5E5E5">knowledge about with registers we</font>

899
00:40:26,319 --> 00:40:29,470
control<font color="#CCCCCC"> will improv</font><font color="#E5E5E5"> this tool for</font>

900
00:40:27,849 --> 00:40:31,390
<font color="#E5E5E5">example</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> they don't know okay I don't</font>

901
00:40:29,470 --> 00:40:34,299
<font color="#E5E5E5">I have no</font><font color="#CCCCCC"> control of the register now</font>

902
00:40:31,390 --> 00:40:37,180
<font color="#CCCCCC">but you know if there is</font><font color="#E5E5E5"> a gadget in</font>

903
00:40:34,299 --> 00:40:40,059
other place that<font color="#E5E5E5"> I control and I can</font>

904
00:40:37,180 --> 00:40:42,129
start to<font color="#CCCCCC"> see registers and you know it's</font>

905
00:40:40,059 --> 00:40:44,380
not an easy<font color="#E5E5E5"> and easy task for an</font>

906
00:40:42,130 --> 00:40:47,259
automatic to a lot of combinations but

907
00:40:44,380 --> 00:40:50,049
manually<font color="#E5E5E5"> it can be so when app when an</font>

908
00:40:47,259 --> 00:40:50,859
<font color="#CCCCCC">advanced</font><font color="#E5E5E5"> drop</font><font color="#CCCCCC"> tools</font><font color="#E5E5E5"> say there are not</font>

909
00:40:50,049 --> 00:40:53,019
<font color="#E5E5E5">enough</font><font color="#CCCCCC"> gadgets</font>

910
00:40:50,859 --> 00:40:55,900
well it's not<font color="#E5E5E5"> always</font><font color="#CCCCCC"> true</font><font color="#E5E5E5"> as you do</font>

911
00:40:53,019 --> 00:40:59,519
fuzzy<font color="#CCCCCC"> okay so I will suggest you</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> do a</font>

912
00:40:55,900 --> 00:41:02,499
manual inspection of the code and<font color="#E5E5E5"> see so</font>

913
00:40:59,519 --> 00:41:04,569
making this attack profitable<font color="#E5E5E5"> with a</font>

914
00:41:02,499 --> 00:41:07,629
modifier with<font color="#E5E5E5"> a modified this this</font>

915
00:41:04,569 --> 00:41:10,989
<font color="#E5E5E5">repair tool to support this attack okay</font>

916
00:41:07,630 --> 00:41:15,640
basically<font color="#E5E5E5"> we we extend this tool and now</font>

917
00:41:10,989 --> 00:41:18,339
it supports<font color="#E5E5E5"> dupe - okay and exec with</font>

918
00:41:15,640 --> 00:41:20,828
with these<font color="#E5E5E5"> parameters okay in order</font><font color="#CCCCCC"> to</font>

919
00:41:18,339 --> 00:41:24,788
have an interactive<font color="#E5E5E5"> shell okay</font><font color="#CCCCCC"> Minho's</font>

920
00:41:20,829 --> 00:41:27,130
symbol is<font color="#CCCCCC"> Miss here</font><font color="#E5E5E5"> okay basically we do</font>

921
00:41:24,789 --> 00:41:29,109
help you will see that now you<font color="#E5E5E5"> can use</font>

922
00:41:27,130 --> 00:41:32,470
this tool<font color="#E5E5E5"> wait I didn't publish the</font>

923
00:41:29,109 --> 00:41:34,359
patch<font color="#E5E5E5"> yet I will do I will</font><font color="#CCCCCC"> do son</font><font color="#E5E5E5"> okay</font>

924
00:41:32,470 --> 00:41:41,919
and then you can you<font color="#CCCCCC"> can optimize this</font>

925
00:41:34,359 --> 00:41:46,900
attack so demo<font color="#E5E5E5"> quickly I'm going</font><font color="#CCCCCC"> to show</font>

926
00:41:41,920 --> 00:41:49,900
you how<font color="#CCCCCC"> bypass</font><font color="#E5E5E5"> all these things okay not</font>

927
00:41:46,900 --> 00:41:52,089
only the SLR<font color="#E5E5E5"> we are going to use a fork</font>

928
00:41:49,900 --> 00:41:54,069
in server and this<font color="#CCCCCC"> Fork interval is</font>

929
00:41:52,089 --> 00:41:55,328
protected with all this technology<font color="#E5E5E5"> okay</font>

930
00:41:54,069 --> 00:41:58,420
that means<font color="#E5E5E5"> that</font><font color="#CCCCCC"> this PI</font><font color="#E5E5E5"> compile</font>

931
00:41:55,329 --> 00:42:02,859
<font color="#E5E5E5">libraries obviously with</font><font color="#CCCCCC"> pic</font><font color="#E5E5E5"> randomized</font>

932
00:41:58,420 --> 00:42:06,450
<font color="#E5E5E5">be a space full number</font><font color="#CCCCCC"> two full stack</font>

933
00:42:02,859 --> 00:42:11,440
<font color="#E5E5E5">protect at all or as much</font><font color="#CCCCCC"> as we can</font><font color="#E5E5E5"> okay</font>

934
00:42:06,450 --> 00:42:14,100
<font color="#E5E5E5">64-bit architectures will</font><font color="#CCCCCC"> row now</font><font color="#E5E5E5"> 45</font>

935
00:42:11,440 --> 00:42:16,720
<font color="#E5E5E5">equal to optimizations</font>

936
00:42:14,100 --> 00:42:19,750
the best executable<font color="#E5E5E5"> you can give me now</font>

937
00:42:16,720 --> 00:42:22,120
full protected<font color="#E5E5E5"> okay this is more or less</font>

938
00:42:19,750 --> 00:42:26,260
<font color="#E5E5E5">than what I'm going to show</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> okay so</font>

939
00:42:22,120 --> 00:42:34,029
let's see how can<font color="#CCCCCC"> we do that</font><font color="#E5E5E5"> okay I will</font>

940
00:42:26,260 --> 00:42:57,690
show<font color="#CCCCCC"> you first okay</font><font color="#E5E5E5"> with me one second</font>

941
00:42:34,030 --> 00:42:57,690
and we'll move the screen one moment

942
00:43:12,440 --> 00:43:24,630
<font color="#E5E5E5">okay I have here some exploits</font><font color="#CCCCCC"> I don't</font>

943
00:43:18,180 --> 00:43:28,109
know how my homemade<font color="#CCCCCC"> have so this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> the</font>

944
00:43:24,630 --> 00:43:31,580
<font color="#CCCCCC">wrapper</font><font color="#E5E5E5"> so I need to wait to turn on the</font>

945
00:43:28,110 --> 00:43:31,580
Builder<font color="#E5E5E5"> machine</font><font color="#CCCCCC"> let me see</font>

946
00:43:39,440 --> 00:43:46,010
okay<font color="#CCCCCC"> basically</font><font color="#E5E5E5"> this bill trauma teen is</font>

947
00:43:42,500 --> 00:43:47,960
a regular<font color="#E5E5E5"> Ubuntu builder machine and I'm</font>

948
00:43:46,010 --> 00:43:50,210
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> run a server a</font><font color="#CCCCCC"> four</font><font color="#E5E5E5"> game server</font>

949
00:43:47,960 --> 00:43:52,760
who basically is reading from a socket

950
00:43:50,210 --> 00:44:10,240
okay I'm writing back that the<font color="#CCCCCC"> Antwoord</font>

951
00:43:52,760 --> 00:44:21,730
so let me okay<font color="#E5E5E5"> I'm going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> run the okay</font>

952
00:44:10,240 --> 00:44:21,729
so some work with okay okay

953
00:44:27,020 --> 00:44:43,109
I'm going to move to route okay<font color="#CCCCCC"> you yes</font>

954
00:44:40,650 --> 00:44:47,550
we have here the server<font color="#E5E5E5"> I'm going to</font>

955
00:44:43,109 --> 00:44:50,430
launch the server<font color="#CCCCCC"> okay this is a server</font>

956
00:44:47,550 --> 00:44:52,740
64-bit architectures<font color="#E5E5E5"> pile compiled</font><font color="#CCCCCC"> a</font>

957
00:44:50,430 --> 00:44:55,500
stack<font color="#CCCCCC"> as</font><font color="#E5E5E5"> machine protector everything</font><font color="#CCCCCC"> ok</font>

958
00:44:52,740 --> 00:45:01,189
I will I will<font color="#E5E5E5"> publish the</font><font color="#CCCCCC"> code and</font><font color="#E5E5E5"> all</font>

959
00:44:55,500 --> 00:45:01,190
this stuff<font color="#CCCCCC"> so it's a</font><font color="#E5E5E5"> little bit strange</font>

960
00:45:05,210 --> 00:45:12,210
so because I don't<font color="#CCCCCC"> have too much time</font><font color="#E5E5E5"> I</font>

961
00:45:09,570 --> 00:45:14,820
<font color="#CCCCCC">will go directly because I have to</font>

962
00:45:12,210 --> 00:45:17,400
exploit this is the the<font color="#E5E5E5"> first one</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> a</font>

963
00:45:14,820 --> 00:45:19,710
stage<font color="#CCCCCC"> 1 ready</font><font color="#E5E5E5"> to seize you which matches</font>

964
00:45:17,400 --> 00:45:22,020
<font color="#E5E5E5">exactly with</font><font color="#CCCCCC"> my explanation okay the</font>

965
00:45:19,710 --> 00:45:25,349
first one<font color="#E5E5E5"> is</font><font color="#CCCCCC"> just well maybe I</font><font color="#E5E5E5"> hope it's</font>

966
00:45:22,020 --> 00:45:34,589
<font color="#E5E5E5">one second stage let's let's launch the</font>

967
00:45:25,349 --> 00:45:43,070
very first exploit<font color="#E5E5E5"> ok server is</font><font color="#CCCCCC"> this</font>

968
00:45:34,589 --> 00:45:43,070
being<font color="#E5E5E5"> worse server port is</font><font color="#CCCCCC"> $19.99</font>

969
00:45:46,550 --> 00:45:52,700
well basically the output means<font color="#E5E5E5"> okay</font>

970
00:45:50,270 --> 00:45:54,550
I'm going<font color="#E5E5E5"> to find where is the the the</font>

971
00:45:52,700 --> 00:45:57,859
offset of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> canary and the trick is</font>

972
00:45:54,550 --> 00:45:59,420
<font color="#E5E5E5">same pilot and every time you are</font>

973
00:45:57,860 --> 00:46:01,340
sending a pilot you<font color="#E5E5E5"> are increasing the</font>

974
00:45:59,420 --> 00:46:03,290
pilot until you will get across when<font color="#E5E5E5"> do</font>

975
00:46:01,340 --> 00:46:05,120
get across the connection is closed and

976
00:46:03,290 --> 00:46:06,950
that<font color="#CCCCCC"> means</font><font color="#E5E5E5"> that you are</font><font color="#CCCCCC"> talking</font>

977
00:46:05,120 --> 00:46:08,630
something<font color="#E5E5E5"> that is producing a cross and</font>

978
00:46:06,950 --> 00:46:10,549
this<font color="#E5E5E5"> is the offset of the canary then we</font>

979
00:46:08,630 --> 00:46:13,700
are<font color="#E5E5E5"> guessing the Canada value do it</font>

980
00:46:10,550 --> 00:46:16,040
using<font color="#E5E5E5"> a PI</font><font color="#CCCCCC"> for bite attack and we are</font>

981
00:46:13,700 --> 00:46:18,410
using<font color="#CCCCCC"> again the</font><font color="#E5E5E5"> same trick from the</font>

982
00:46:16,040 --> 00:46:20,180
offset<font color="#E5E5E5"> to leave</font><font color="#CCCCCC"> to guess where the world</font>

983
00:46:18,410 --> 00:46:23,029
executable is in memory<font color="#E5E5E5"> using a wife or</font>

984
00:46:20,180 --> 00:46:25,100
by to the return address<font color="#E5E5E5"> and then we</font><font color="#CCCCCC"> are</font>

985
00:46:23,030 --> 00:46:31,880
using<font color="#CCCCCC"> the</font><font color="#E5E5E5"> gadget number</font><font color="#CCCCCC"> one to lick</font>

986
00:46:25,100 --> 00:46:42,710
where this<font color="#E5E5E5"> write this by fraction is in</font>

987
00:46:31,880 --> 00:46:45,560
<font color="#E5E5E5">memory</font><font color="#CCCCCC"> okay so basically if we save this</font>

988
00:46:42,710 --> 00:46:48,380
output basically<font color="#E5E5E5"> as you can see if you</font>

989
00:46:45,560 --> 00:46:51,500
can read from here<font color="#E5E5E5"> the stage</font><font color="#CCCCCC"> output</font><font color="#E5E5E5"> one</font>

990
00:46:48,380 --> 00:46:53,510
stage one<font color="#CCCCCC"> output this is</font><font color="#E5E5E5"> the pilot we</font>

991
00:46:51,500 --> 00:46:58,400
need to introduce<font color="#E5E5E5"> to the second stage</font>

992
00:46:53,510 --> 00:47:00,440
<font color="#E5E5E5">and this is</font><font color="#CCCCCC"> the match the</font><font color="#E5E5E5"> output stage</font>

993
00:46:58,400 --> 00:47:01,580
<font color="#E5E5E5">one right okay this is</font><font color="#CCCCCC"> used by the other</font>

994
00:47:00,440 --> 00:47:11,510
<font color="#E5E5E5">Python</font><font color="#CCCCCC"> asleep</font>

995
00:47:01,580 --> 00:47:18,170
okay so let<font color="#CCCCCC"> me we can't directly I have</font>

996
00:47:11,510 --> 00:47:20,960
<font color="#E5E5E5">I have combined</font><font color="#CCCCCC"> both in full greater to</font>

997
00:47:18,170 --> 00:47:29,780
CCU script<font color="#E5E5E5"> so let's use it directly for</font>

998
00:47:20,960 --> 00:47:38,620
the sake of time<font color="#E5E5E5"> okay full server and</font>

999
00:47:29,780 --> 00:47:42,560
then<font color="#E5E5E5"> the port port 99 okay so the time</font>

1000
00:47:38,620 --> 00:47:45,380
it's real so this is the time we need to

1001
00:47:42,560 --> 00:47:47,840
<font color="#CCCCCC">bypass</font><font color="#E5E5E5"> a fork in server full protected</font>

1002
00:47:45,380 --> 00:47:52,180
okay using<font color="#E5E5E5"> this technique okay this is</font>

1003
00:47:47,840 --> 00:47:57,320
real time<font color="#E5E5E5"> count the time so</font><font color="#CCCCCC"> cannery</font>

1004
00:47:52,180 --> 00:47:59,089
everything<font color="#E5E5E5"> self okay now we</font><font color="#CCCCCC"> are in a</font>

1005
00:47:57,320 --> 00:48:00,350
different<font color="#E5E5E5"> environment</font><font color="#CCCCCC"> take a look you</font>

1006
00:47:59,090 --> 00:48:02,630
can see<font color="#E5E5E5"> the circle</font><font color="#CCCCCC"> pie</font>

1007
00:48:00,350 --> 00:48:09,440
stuff did you see the IP<font color="#E5E5E5"> for example I</font>

1008
00:48:02,630 --> 00:48:12,650
don't<font color="#CCCCCC"> know</font><font color="#E5E5E5"> it's not DPR okay and we are</font>

1009
00:48:09,440 --> 00:48:16,190
<font color="#CCCCCC">route</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> this is the full time</font><font color="#E5E5E5"> we need</font>

1010
00:48:12,650 --> 00:48:19,100
to<font color="#CCCCCC"> bypass all of</font><font color="#E5E5E5"> this so like one second</font>

1011
00:48:16,190 --> 00:48:23,240
<font color="#E5E5E5">one and a half seconds okay</font><font color="#CCCCCC"> all these</font>

1012
00:48:19,100 --> 00:48:25,279
stitches<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so the best thing this is</font>

1013
00:48:23,240 --> 00:48:27,439
<font color="#CCCCCC">genetic you</font><font color="#E5E5E5"> can use it in any executable</font>

1014
00:48:25,280 --> 00:48:28,970
<font color="#E5E5E5">so you don't need to care about</font><font color="#CCCCCC"> okay</font>

1015
00:48:27,440 --> 00:48:30,560
maybe that this function will<font color="#CCCCCC"> be</font>

1016
00:48:28,970 --> 00:48:32,990
protected no they don't have a stack as

1017
00:48:30,560 --> 00:48:35,060
machine protector or maybe this code is

1018
00:48:32,990 --> 00:48:38,899
not<font color="#CCCCCC"> there no this</font><font color="#E5E5E5"> code will be there if</font>

1019
00:48:35,060 --> 00:48:41,720
<font color="#E5E5E5">you can redirect the flow do it and this</font>

1020
00:48:38,900 --> 00:48:42,470
<font color="#E5E5E5">is</font><font color="#CCCCCC"> how to do it in less than one second</font>

1021
00:48:41,720 --> 00:48:45,379
<font color="#E5E5E5">okay</font>

1022
00:48:42,470 --> 00:48:49,089
so when back to<font color="#CCCCCC"> their presentation to</font>

1023
00:48:45,380 --> 00:48:49,090
talk<font color="#CCCCCC"> about little</font><font color="#E5E5E5"> bit mitigation</font>

1024
00:48:56,150 --> 00:49:12,119
one second<font color="#CCCCCC"> I need</font><font color="#E5E5E5"> to go back okay so</font>

1025
00:49:08,280 --> 00:49:14,609
basically with<font color="#E5E5E5"> this attack what we are</font>

1026
00:49:12,119 --> 00:49:18,630
basically saying is<font color="#E5E5E5"> that if you have a</font>

1027
00:49:14,609 --> 00:49:22,590
four-team server in the world<font color="#E5E5E5"> and you</font>

1028
00:49:18,630 --> 00:49:23,220
have<font color="#CCCCCC"> a stack buffer overflow</font><font color="#E5E5E5"> today you</font>

1029
00:49:22,590 --> 00:49:25,410
<font color="#E5E5E5">are lost</font>

1030
00:49:23,220 --> 00:49:30,419
okay there is no<font color="#E5E5E5"> way to protect</font><font color="#CCCCCC"> that</font>

1031
00:49:25,410 --> 00:49:33,569
<font color="#E5E5E5">okay if you find some server in the</font>

1032
00:49:30,420 --> 00:49:36,480
world<font color="#E5E5E5"> we have</font><font color="#CCCCCC"> a stack buffer overflow</font>

1033
00:49:33,570 --> 00:49:39,150
<font color="#E5E5E5">and you have the</font><font color="#CCCCCC"> ability to</font><font color="#E5E5E5"> perform a</font>

1034
00:49:36,480 --> 00:49:40,770
<font color="#CCCCCC">byte for byte attack and then</font><font color="#E5E5E5"> you can</font>

1035
00:49:39,150 --> 00:49:43,230
<font color="#CCCCCC">combine this attack and you will get</font><font color="#E5E5E5"> a</font>

1036
00:49:40,770 --> 00:49:45,060
root<font color="#CCCCCC"> shell in two seconds we are</font><font color="#E5E5E5"> talking</font>

1037
00:49:43,230 --> 00:49:48,240
<font color="#E5E5E5">about more</font><font color="#CCCCCC"> than 20 years all</font>

1038
00:49:45,060 --> 00:49:51,330
vulnerability<font color="#E5E5E5"> stack buffer overflow okay</font>

1039
00:49:48,240 --> 00:49:55,439
and we are still trying to<font color="#E5E5E5"> fix that so</font>

1040
00:49:51,330 --> 00:50:10,910
let<font color="#E5E5E5"> me show you the final conclusions if</font>

1041
00:49:55,440 --> 00:50:10,910
this<font color="#CCCCCC"> allows me</font><font color="#E5E5E5"> okay it's</font><font color="#CCCCCC"> close</font>

1042
00:50:17,630 --> 00:50:29,680
wait<font color="#CCCCCC"> a second something is happening to</font>

1043
00:50:21,440 --> 00:50:34,130
<font color="#E5E5E5">my presentation okay so let me</font><font color="#CCCCCC"> see</font>

1044
00:50:29,680 --> 00:50:37,370
<font color="#E5E5E5">Wiggly okay</font>

1045
00:50:34,130 --> 00:50:41,800
<font color="#CCCCCC">I plan to</font><font color="#E5E5E5"> publish this in my</font><font color="#CCCCCC"> my probably</font>

1046
00:50:37,370 --> 00:50:41,799
<font color="#E5E5E5">my personal website okay in order to</font>

1047
00:50:41,980 --> 00:50:48,740
it's not working okay<font color="#CCCCCC"> what I'm going to</font>

1048
00:50:46,430 --> 00:50:51,980
<font color="#E5E5E5">talk</font><font color="#CCCCCC"> now is about</font><font color="#E5E5E5"> some some mitigations</font>

1049
00:50:48,740 --> 00:50:58,100
<font color="#CCCCCC">I will talk</font><font color="#E5E5E5"> about why why</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> hard</font><font color="#E5E5E5"> to</font>

1050
00:50:51,980 --> 00:51:00,460
fix why we<font color="#E5E5E5"> don't have let's do it</font>

1051
00:50:58,100 --> 00:51:00,460
without

1052
00:51:12,830 --> 00:51:18,319
<font color="#CCCCCC">okay yes quickly</font><font color="#E5E5E5"> about mitigation</font><font color="#CCCCCC"> ok</font>

1053
00:51:16,430 --> 00:51:21,319
mitigation<font color="#E5E5E5"> one one thing we can do is</font>

1054
00:51:18,320 --> 00:51:23,570
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> let's move some of this gadget to</font>

1055
00:51:21,320 --> 00:51:25,580
the live<font color="#CCCCCC"> see to the library</font><font color="#E5E5E5"> so basically</font>

1056
00:51:23,570 --> 00:51:28,190
we basically what we can<font color="#E5E5E5"> do is to move</font>

1057
00:51:25,580 --> 00:51:30,259
some of this code that<font color="#E5E5E5"> is in attach it</font>

1058
00:51:28,190 --> 00:51:33,110
to the executable<font color="#E5E5E5"> let's move to the live</font>

1059
00:51:30,260 --> 00:51:35,540
<font color="#E5E5E5">see okay and then what we</font><font color="#CCCCCC"> are doing is</font>

1060
00:51:33,110 --> 00:51:39,050
we are removing they got a number<font color="#CCCCCC"> two</font>

1061
00:51:35,540 --> 00:51:41,480
from our first<font color="#E5E5E5"> let's say 10 or gadget</font>

1062
00:51:39,050 --> 00:51:42,890
<font color="#E5E5E5">located the stage number</font><font color="#CCCCCC"> one we</font><font color="#E5E5E5"> are</font>

1063
00:51:41,480 --> 00:51:45,020
removing that<font color="#CCCCCC"> okay</font>

1064
00:51:42,890 --> 00:51:47,450
we have<font color="#CCCCCC"> implement that apart</font><font color="#E5E5E5"> to do that</font>

1065
00:51:45,020 --> 00:51:49,070
this can be this can<font color="#E5E5E5"> be this can be</font>

1066
00:51:47,450 --> 00:51:52,700
implemented<font color="#E5E5E5"> but again we are removing</font>

1067
00:51:49,070 --> 00:51:55,460
only<font color="#E5E5E5"> one</font><font color="#CCCCCC"> gadget for a full chain</font><font color="#E5E5E5"> okay so</font>

1068
00:51:52,700 --> 00:51:57,200
the second the second is basically<font color="#E5E5E5"> let's</font>

1069
00:51:55,460 --> 00:51:59,150
implement in a different way<font color="#CCCCCC"> how the</font>

1070
00:51:57,200 --> 00:52:01,850
life<font color="#CCCCCC"> see is managing</font><font color="#E5E5E5"> all this stuff and</font>

1071
00:51:59,150 --> 00:52:03,920
<font color="#CCCCCC">basically what we can do is to update</font><font color="#E5E5E5"> or</font>

1072
00:52:01,850 --> 00:52:05,810
to change how this<font color="#CCCCCC"> scale</font><font color="#E5E5E5"> is made because</font>

1073
00:52:03,920 --> 00:52:08,450
this call it just yet<font color="#E5E5E5"> the zip code is</font>

1074
00:52:05,810 --> 00:52:10,790
<font color="#E5E5E5">using a stack we can use</font><font color="#CCCCCC"> it we can do</font>

1075
00:52:08,450 --> 00:52:12,649
basically<font color="#E5E5E5"> way just by adding a stack the</font>

1076
00:52:10,790 --> 00:52:14,330
static world<font color="#E5E5E5"> to the variables means that</font>

1077
00:52:12,650 --> 00:52:17,180
the variables instead<font color="#E5E5E5"> of the stack edges</font>

1078
00:52:14,330 --> 00:52:20,509
<font color="#E5E5E5">in data and then</font><font color="#CCCCCC"> we are not depending</font><font color="#E5E5E5"> on</font>

1079
00:52:17,180 --> 00:52:23,270
the stack<font color="#E5E5E5"> okay again we are just</font><font color="#CCCCCC"> destroy</font>

1080
00:52:20,510 --> 00:52:26,060
<font color="#E5E5E5">in one of the links so it doesn't look a</font>

1081
00:52:23,270 --> 00:52:29,000
<font color="#CCCCCC">very good solution</font><font color="#E5E5E5"> so a third solution</font>

1082
00:52:26,060 --> 00:52:31,460
could be<font color="#E5E5E5"> two-putt correct applications</font>

1083
00:52:29,000 --> 00:52:33,680
<font color="#CCCCCC">basically we have two flower</font><font color="#E5E5E5"> wars we can</font>

1084
00:52:31,460 --> 00:52:35,050
once we<font color="#E5E5E5"> have we are in main we are</font>

1085
00:52:33,680 --> 00:52:37,850
<font color="#CCCCCC">executing the</font><font color="#E5E5E5"> main function</font><font color="#CCCCCC"> we can write</font>

1086
00:52:35,050 --> 00:52:40,970
<font color="#CCCCCC">overwrite with</font><font color="#E5E5E5"> zeros so let's destroy</font>

1087
00:52:37,850 --> 00:52:42,830
this code<font color="#E5E5E5"> because I am 100% sure</font><font color="#CCCCCC"> I don't</font>

1088
00:52:40,970 --> 00:52:44,750
<font color="#CCCCCC">need</font><font color="#E5E5E5"> this code in the future</font><font color="#CCCCCC"> this have a</font>

1089
00:52:42,830 --> 00:52:46,670
problem with with certain<font color="#E5E5E5"> resources of</font>

1090
00:52:44,750 --> 00:52:49,730
all this stuff we have<font color="#CCCCCC"> also implemented</font>

1091
00:52:46,670 --> 00:52:51,440
a<font color="#E5E5E5"> part which can</font><font color="#CCCCCC"> which can you can</font>

1092
00:52:49,730 --> 00:52:52,820
achieve that so you can download<font color="#E5E5E5"> this</font>

1093
00:52:51,440 --> 00:52:54,860
part you can<font color="#E5E5E5"> apply this light to all</font>

1094
00:52:52,820 --> 00:52:59,330
your security<font color="#E5E5E5"> walls and more or less you</font>

1095
00:52:54,860 --> 00:53:01,430
<font color="#CCCCCC">are safe it</font><font color="#E5E5E5"> that's it the solution</font><font color="#CCCCCC"> that</font>

1096
00:52:59,330 --> 00:53:05,900
we really want is to<font color="#CCCCCC"> move this</font><font color="#E5E5E5"> attached</font>

1097
00:53:01,430 --> 00:53:08,210
code to to the libraries area<font color="#E5E5E5"> okay why</font>

1098
00:53:05,900 --> 00:53:09,890
<font color="#E5E5E5">well because if this code is dirt we can</font>

1099
00:53:08,210 --> 00:53:15,160
not abuse at all of the of this code

1100
00:53:09,890 --> 00:53:17,240
<font color="#E5E5E5">okay all executable codes will be</font><font color="#CCCCCC"> used</font>

1101
00:53:15,160 --> 00:53:19,850
<font color="#CCCCCC">controllable with</font><font color="#E5E5E5"> means that there are</font>

1102
00:53:17,240 --> 00:53:22,069
called here as we can<font color="#CCCCCC"> note an</font><font color="#E5E5E5"> if I am a</font>

1103
00:53:19,850 --> 00:53:23,450
developer<font color="#E5E5E5"> okay I want this this code to</font>

1104
00:53:22,070 --> 00:53:24,950
be<font color="#CCCCCC"> secure</font><font color="#E5E5E5"> I want to compile this code</font>

1105
00:53:23,450 --> 00:53:27,140
with the stack as much

1106
00:53:24,950 --> 00:53:28,879
<font color="#CCCCCC">you can do that</font><font color="#E5E5E5"> okay because this code</font>

1107
00:53:27,140 --> 00:53:31,250
is already<font color="#E5E5E5"> compiled and this is in the</font>

1108
00:53:28,880 --> 00:53:33,260
in<font color="#CCCCCC"> your executable okay</font><font color="#E5E5E5"> this solution is</font>

1109
00:53:31,250 --> 00:53:35,990
is it's<font color="#E5E5E5"> almost impossible to is very</font>

1110
00:53:33,260 --> 00:53:38,060
hard to<font color="#E5E5E5"> apply basically because this</font>

1111
00:53:35,990 --> 00:53:41,779
means move this to<font color="#CCCCCC"> this will means that</font>

1112
00:53:38,060 --> 00:53:44,480
the PLT and<font color="#CCCCCC"> god must to be in library</font>

1113
00:53:41,780 --> 00:53:47,990
<font color="#E5E5E5">and by definition</font><font color="#CCCCCC"> god is something that</font>

1114
00:53:44,480 --> 00:53:49,880
<font color="#E5E5E5">must to be is belongs to</font><font color="#CCCCCC"> the executable</font>

1115
00:53:47,990 --> 00:53:52,310
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> it's not it's not something</font><font color="#CCCCCC"> that</font>

1116
00:53:49,880 --> 00:53:54,920
you need<font color="#CCCCCC"> to share</font><font color="#E5E5E5"> so you</font><font color="#CCCCCC"> can implement</font>

1117
00:53:52,310 --> 00:53:57,109
<font color="#E5E5E5">tricks but is not easy okay and you can</font>

1118
00:53:54,920 --> 00:53:59,510
remove<font color="#CCCCCC"> PT and then if you REM ability</font>

1119
00:53:57,109 --> 00:54:01,940
the way to call<font color="#CCCCCC"> functions</font><font color="#E5E5E5"> library</font>

1120
00:53:59,510 --> 00:54:04,490
functions is by<font color="#CCCCCC"> accessing to go to the</font>

1121
00:54:01,940 --> 00:54:05,930
code table<font color="#E5E5E5"> but we also want to remove</font>

1122
00:54:04,490 --> 00:54:07,939
<font color="#E5E5E5">God</font><font color="#CCCCCC"> if we remove all we can know the</font>

1123
00:54:05,930 --> 00:54:11,000
mobility<font color="#E5E5E5"> so there is no easy solution</font><font color="#CCCCCC"> so</font>

1124
00:54:07,940 --> 00:54:13,099
this<font color="#E5E5E5"> is how we find it okay so because</font>

1125
00:54:11,000 --> 00:54:14,650
sometimes<font color="#E5E5E5"> people ask me how do you find</font>

1126
00:54:13,099 --> 00:54:17,270
that well

1127
00:54:14,650 --> 00:54:19,670
sometimes you need<font color="#CCCCCC"> to print a</font><font color="#E5E5E5"> sound blue</font>

1128
00:54:17,270 --> 00:54:22,579
and you need to a study assembler<font color="#E5E5E5"> okay</font>

1129
00:54:19,670 --> 00:54:24,099
<font color="#E5E5E5">you can</font><font color="#CCCCCC"> just your printer at home and as</font>

1130
00:54:22,579 --> 00:54:27,260
paint<font color="#E5E5E5"> I don't know</font>

1131
00:54:24,099 --> 00:54:29,569
one today is<font color="#CCCCCC"> reading line by line</font><font color="#E5E5E5"> for</font>

1132
00:54:27,260 --> 00:54:32,089
example<font color="#CCCCCC"> this world might not</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> it</font>

1133
00:54:29,569 --> 00:54:34,490
seems<font color="#E5E5E5"> that this are not useful but you</font>

1134
00:54:32,089 --> 00:54:36,680
<font color="#E5E5E5">know maybe I can jump here</font><font color="#CCCCCC"> and later</font><font color="#E5E5E5"> on</font>

1135
00:54:34,490 --> 00:54:38,479
<font color="#E5E5E5">I can down there and well be careful</font>

1136
00:54:36,680 --> 00:54:41,359
with this<font color="#CCCCCC"> this is changing</font><font color="#E5E5E5"> the control</font>

1137
00:54:38,480 --> 00:54:43,660
flow so<font color="#CCCCCC"> we were writing overall now to</font>

1138
00:54:41,359 --> 00:54:46,990
see<font color="#E5E5E5"> okay but basically you can print</font>

1139
00:54:43,660 --> 00:54:49,250
object<font color="#CCCCCC"> and output and</font><font color="#E5E5E5"> learn about that</font>

1140
00:54:46,990 --> 00:54:51,770
conclusions and black hats<font color="#CCCCCC"> alright</font>

1141
00:54:49,250 --> 00:54:54,560
<font color="#E5E5E5">basically we have presented a technique</font>

1142
00:54:51,770 --> 00:54:56,720
a method that basically can automate the

1143
00:54:54,560 --> 00:54:59,170
construction of off exploit to bypass

1144
00:54:56,720 --> 00:55:03,560
the you<font color="#CCCCCC"> salary</font><font color="#E5E5E5"> in 64-bit architecture</font>

1145
00:54:59,170 --> 00:55:05,119
okay<font color="#E5E5E5"> to go over young automatic tools</font><font color="#CCCCCC"> I</font>

1146
00:55:03,560 --> 00:55:08,119
<font color="#E5E5E5">always recommend to a manual inspection</font>

1147
00:55:05,119 --> 00:55:10,609
<font color="#CCCCCC">okay because we</font><font color="#E5E5E5"> have always gadgets</font><font color="#CCCCCC"> okay</font>

1148
00:55:08,119 --> 00:55:13,430
<font color="#E5E5E5">and we we saw that we can trust</font>

1149
00:55:10,609 --> 00:55:15,529
automatic tools<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> default we</font>

1150
00:55:13,430 --> 00:55:18,440
<font color="#E5E5E5">present how we can create a micro Rob to</font>

1151
00:55:15,530 --> 00:55:20,300
leak things<font color="#E5E5E5"> okay in this case I use this</font>

1152
00:55:18,440 --> 00:55:23,180
<font color="#CCCCCC">micrograph to lick where they</font><font color="#E5E5E5"> write is</font>

1153
00:55:20,300 --> 00:55:25,010
<font color="#E5E5E5">in memory but you can use this micro</font><font color="#CCCCCC"> Rob</font>

1154
00:55:23,180 --> 00:55:27,020
to lick whatever you want<font color="#E5E5E5"> okay do for</font>

1155
00:55:25,010 --> 00:55:28,910
example<font color="#CCCCCC"> passwords or any any data and</font>

1156
00:55:27,020 --> 00:55:31,810
executable<font color="#CCCCCC"> any buffer law</font><font color="#E5E5E5"> whatever you</font>

1157
00:55:28,910 --> 00:55:35,299
want okay imagination<font color="#E5E5E5"> is the limit</font>

1158
00:55:31,810 --> 00:55:36,980
<font color="#CCCCCC">also the</font><font color="#E5E5E5"> attach</font><font color="#CCCCCC"> call</font><font color="#E5E5E5"> or be careful</font><font color="#CCCCCC"> with</font>

1159
00:55:35,300 --> 00:55:38,840
that<font color="#E5E5E5"> because invalid invalidates other</font>

1160
00:55:36,980 --> 00:55:40,610
security<font color="#CCCCCC"> images for example</font>

1161
00:55:38,840 --> 00:55:42,790
the<font color="#E5E5E5"> instruction</font><font color="#CCCCCC"> set randomization which</font>

1162
00:55:40,610 --> 00:55:45,560
<font color="#E5E5E5">means that every executable is</font>

1163
00:55:42,790 --> 00:55:47,300
completely<font color="#CCCCCC"> different okay because</font><font color="#E5E5E5"> you</font>

1164
00:55:45,560 --> 00:55:51,650
<font color="#CCCCCC">can randomize the instructions</font><font color="#E5E5E5"> or you</font>

1165
00:55:47,300 --> 00:55:53,690
<font color="#CCCCCC">can the they say</font><font color="#E5E5E5"> take how they work if</font>

1166
00:55:51,650 --> 00:55:56,540
<font color="#E5E5E5">you're attaching some code that you</font>

1167
00:55:53,690 --> 00:55:58,400
can't compile<font color="#E5E5E5"> you can't expect that this</font>

1168
00:55:56,540 --> 00:56:01,520
protected oh this is something with you

1169
00:55:58,400 --> 00:56:03,350
okay<font color="#CCCCCC"> so also security options</font><font color="#E5E5E5"> must to be</font>

1170
00:56:01,520 --> 00:56:04,850
<font color="#E5E5E5">decided at the very beginning you are</font>

1171
00:56:03,350 --> 00:56:06,980
attaching some<font color="#E5E5E5"> code your link in so code</font>

1172
00:56:04,850 --> 00:56:08,690
you can't you can learn<font color="#E5E5E5"> okay we</font>

1173
00:56:06,980 --> 00:56:10,130
represented some workarounds<font color="#E5E5E5"> okay to</font>

1174
00:56:08,690 --> 00:56:12,530
prevent this<font color="#CCCCCC"> gadget you can use it</font><font color="#E5E5E5"> you</font>

1175
00:56:10,130 --> 00:56:15,020
can<font color="#E5E5E5"> pass your</font><font color="#CCCCCC"> executables to be safer</font>

1176
00:56:12,530 --> 00:56:16,850
let's say okay<font color="#E5E5E5"> the</font><font color="#CCCCCC"> ideal solution will</font>

1177
00:56:15,020 --> 00:56:19,220
be<font color="#E5E5E5"> to move this attached code to the</font><font color="#CCCCCC"> lip</font>

1178
00:56:16,850 --> 00:56:22,430
<font color="#CCCCCC">see but I</font><font color="#E5E5E5"> saw that it's not it's not a</font>

1179
00:56:19,220 --> 00:56:27,189
<font color="#E5E5E5">easy task</font><font color="#CCCCCC"> and that's all form from</font><font color="#E5E5E5"> my</font>

1180
00:56:22,430 --> 00:56:27,190
side<font color="#CCCCCC"> any questions</font><font color="#E5E5E5"> thank you</font><font color="#CCCCCC"> very much</font>

1181
00:56:29,100 --> 00:56:33,839
[Applause]

