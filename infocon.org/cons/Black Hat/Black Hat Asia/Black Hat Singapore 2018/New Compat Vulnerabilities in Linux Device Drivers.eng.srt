1
00:00:00,000 --> 00:00:07,649
hi<font color="#CCCCCC"> good</font><font color="#E5E5E5"> afternoon everyone</font><font color="#CCCCCC"> welcome to</font>

2
00:00:04,560 --> 00:00:12,899
<font color="#CCCCCC">the talk new compact vulnerabilities in</font>

3
00:00:07,649 --> 00:00:13,620
Linux device drivers this is a<font color="#CCCCCC"> twenty</font>

4
00:00:12,900 --> 00:00:18,710
<font color="#CCCCCC">five</font><font color="#E5E5E5"> minutes</font>

5
00:00:13,620 --> 00:00:18,710
talk so just ignore<font color="#E5E5E5"> the schedule outside</font>

6
00:00:19,400 --> 00:00:23,810
my name is<font color="#E5E5E5"> chen foo and that is my</font>

7
00:00:22,230 --> 00:00:26,160
colleague<font color="#CCCCCC"> comfy</font>

8
00:00:23,810 --> 00:00:29,640
we are security researcher and

9
00:00:26,160 --> 00:00:32,549
developers at by dou<font color="#E5E5E5"> X lab they</font><font color="#CCCCCC"> have</font>

10
00:00:29,640 --> 00:00:35,360
been focused<font color="#E5E5E5"> on mobile IOT and Linux</font>

11
00:00:32,549 --> 00:00:37,589
kernel security<font color="#E5E5E5"> our major work is</font>

12
00:00:35,360 --> 00:00:41,790
developing<font color="#E5E5E5"> security solutions for</font>

13
00:00:37,590 --> 00:00:44,809
<font color="#CCCCCC">Baidu's</font><font color="#E5E5E5"> a ice platforms</font><font color="#CCCCCC"> besides</font><font color="#E5E5E5"> that we</font>

14
00:00:41,790 --> 00:00:47,190
also do some<font color="#E5E5E5"> security researchers</font>

15
00:00:44,809 --> 00:00:50,160
including<font color="#CCCCCC"> finding vulnerabilities in</font>

16
00:00:47,190 --> 00:00:53,399
<font color="#CCCCCC">linux kernel and device drivers in last</font>

17
00:00:50,160 --> 00:00:57,260
year<font color="#CCCCCC"> Humphrey</font><font color="#E5E5E5"> and I got more</font><font color="#CCCCCC"> than</font><font color="#E5E5E5"> 30</font>

18
00:00:53,399 --> 00:01:01,140
Linux kernel<font color="#E5E5E5"> and device driver</font><font color="#CCCCCC"> series</font>

19
00:00:57,260 --> 00:01:04,048
<font color="#CCCCCC">this is our agenda first we will</font>

20
00:01:01,140 --> 00:01:07,229
introduce the<font color="#CCCCCC"> concept of compact</font><font color="#E5E5E5"> and the</font>

21
00:01:04,049 --> 00:01:09,360
security risks of<font color="#E5E5E5"> combat then we will</font>

22
00:01:07,229 --> 00:01:13,110
<font color="#E5E5E5">introduce some compact vulnerabilities</font>

23
00:01:09,360 --> 00:01:14,939
found<font color="#E5E5E5"> in the past few</font><font color="#CCCCCC"> years</font><font color="#E5E5E5"> and we will</font>

24
00:01:13,110 --> 00:01:17,820
introduce how<font color="#CCCCCC"> we found a new type of</font>

25
00:01:14,939 --> 00:01:20,880
compact<font color="#E5E5E5"> one abilities</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> Linux device</font>

26
00:01:17,820 --> 00:01:23,789
drivers<font color="#E5E5E5"> after that we will give some</font>

27
00:01:20,880 --> 00:01:27,420
advices<font color="#E5E5E5"> and medications to developers</font>

28
00:01:23,790 --> 00:01:32,600
and security researchers at last<font color="#E5E5E5"> we will</font>

29
00:01:27,420 --> 00:01:36,659
<font color="#E5E5E5">have some conclusions</font><font color="#CCCCCC"> ok let's</font><font color="#E5E5E5"> start</font>

30
00:01:32,600 --> 00:01:40,470
compat is the<font color="#E5E5E5"> 32-bit compatibility mode</font>

31
00:01:36,659 --> 00:01:43,950
in 64-bit Linux kernels on a 64-bit

32
00:01:40,470 --> 00:01:46,798
Linux system when the<font color="#E5E5E5"> 32-bit user a user</font>

33
00:01:43,950 --> 00:01:48,630
<font color="#E5E5E5">space program makes a system call the</font>

34
00:01:46,799 --> 00:01:53,280
compact<font color="#CCCCCC"> version of the system called</font>

35
00:01:48,630 --> 00:01:55,920
entry is used<font color="#E5E5E5"> instead of sorry instead</font>

36
00:01:53,280 --> 00:02:01,469
of the original<font color="#CCCCCC"> 64-bit system called</font>

37
00:01:55,920 --> 00:02:03,719
entry in general the reason that Linux

38
00:02:01,469 --> 00:02:06,479
kernel<font color="#E5E5E5"> use compact mode system call is</font>

39
00:02:03,719 --> 00:02:10,970
to handle the differences in the data

40
00:02:06,479 --> 00:02:13,860
sizes<font color="#CCCCCC"> as we know many system costs have</font>

41
00:02:10,970 --> 00:02:19,250
parameters with different<font color="#E5E5E5"> sizes in</font>

42
00:02:13,860 --> 00:02:22,080
32-bit<font color="#CCCCCC"> and 64-bit system</font><font color="#E5E5E5"> for example</font><font color="#CCCCCC"> a</font>

43
00:02:19,250 --> 00:02:25,380
structure<font color="#E5E5E5"> parameter in the</font><font color="#CCCCCC"> Cisco may</font>

44
00:02:22,080 --> 00:02:26,120
have a pointer type or long type field

45
00:02:25,380 --> 00:02:30,290
in it

46
00:02:26,120 --> 00:02:33,450
<font color="#E5E5E5">their size our platform</font><font color="#CCCCCC"> dependent so</font>

47
00:02:30,290 --> 00:02:37,620
when the 32-bit<font color="#E5E5E5"> user space program makes</font>

48
00:02:33,450 --> 00:02:40,290
a<font color="#CCCCCC"> system call</font><font color="#E5E5E5"> and passes parameters into</font>

49
00:02:37,620 --> 00:02:42,510
<font color="#E5E5E5">kernel compact mode system call will</font>

50
00:02:40,290 --> 00:02:44,549
first convert<font color="#E5E5E5"> the values of these</font>

51
00:02:42,510 --> 00:02:51,120
parameters into corresponding<font color="#CCCCCC"> 6 to</font>

52
00:02:44,550 --> 00:02:53,730
64-bit values this<font color="#E5E5E5"> is an example of set</font>

53
00:02:51,120 --> 00:02:56,940
time<font color="#CCCCCC"> of days is</font><font color="#E5E5E5"> called on the left side</font>

54
00:02:53,730 --> 00:02:59,100
<font color="#E5E5E5">there is</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> 64-bit system call on the</font>

55
00:02:56,940 --> 00:03:02,190
<font color="#CCCCCC">right side</font><font color="#E5E5E5"> there's the compact mode</font>

56
00:02:59,100 --> 00:03:05,430
system call<font color="#E5E5E5"> we can see on the left that</font>

57
00:03:02,190 --> 00:03:07,530
<font color="#CCCCCC">a user time value structure</font><font color="#E5E5E5"> is directly</font>

58
00:03:05,430 --> 00:03:11,940
copied into kernel time value structure

59
00:03:07,530 --> 00:03:13,590
using copy from user and on the right

60
00:03:11,940 --> 00:03:16,350
you can<font color="#E5E5E5"> see that the type of user</font>

61
00:03:13,590 --> 00:03:18,660
parameter which is compact time value

62
00:03:16,350 --> 00:03:21,690
and the kernel structure which is time

63
00:03:18,660 --> 00:03:24,120
value they are different so<font color="#CCCCCC"> the compact</font>

64
00:03:21,690 --> 00:03:27,930
version uses a<font color="#E5E5E5"> function called compact</font>

65
00:03:24,120 --> 00:03:30,299
<font color="#CCCCCC">get</font><font color="#E5E5E5"> time value to convert user compat</font>

66
00:03:27,930 --> 00:03:34,230
<font color="#E5E5E5">stamp value structure to kernel time</font>

67
00:03:30,299 --> 00:03:37,620
value structure also<font color="#E5E5E5"> from this case we</font>

68
00:03:34,230 --> 00:03:39,959
can notice that there are<font color="#CCCCCC"> two</font><font color="#E5E5E5"> placate</font>

69
00:03:37,620 --> 00:03:44,150
duplicate<font color="#E5E5E5"> codes in these two functions</font>

70
00:03:39,959 --> 00:03:48,750
we can<font color="#E5E5E5"> see that this part of codes are</font>

71
00:03:44,150 --> 00:03:51,510
the same<font color="#E5E5E5"> so from this</font><font color="#CCCCCC"> example we can</font>

72
00:03:48,750 --> 00:03:55,140
notice some potential security risks<font color="#E5E5E5"> of</font>

73
00:03:51,510 --> 00:03:57,750
compact code the first<font color="#E5E5E5"> a security risk</font>

74
00:03:55,140 --> 00:03:59,940
<font color="#CCCCCC">is code redundancy</font><font color="#E5E5E5"> actually code</font>

75
00:03:57,750 --> 00:04:01,769
redundancy is common in many compact

76
00:03:59,940 --> 00:04:04,440
mode system<font color="#E5E5E5"> called implementations in</font>

77
00:04:01,769 --> 00:04:06,540
<font color="#E5E5E5">Linux kernel which means two similar</font>

78
00:04:04,440 --> 00:04:09,359
copies of code and data structures<font color="#E5E5E5"> need</font>

79
00:04:06,540 --> 00:04:11,160
to<font color="#E5E5E5"> be maintained with no doubt this</font>

80
00:04:09,360 --> 00:04:15,150
<font color="#E5E5E5">maintenance efforts</font><font color="#CCCCCC"> introduce more</font>

81
00:04:11,160 --> 00:04:18,358
security risks and<font color="#E5E5E5"> furthermore compared</font>

82
00:04:15,150 --> 00:04:20,608
<font color="#E5E5E5">to original 64-bit system calls their</font>

83
00:04:18,358 --> 00:04:22,859
compact counterpart<font color="#E5E5E5"> you really have some</font>

84
00:04:20,608 --> 00:04:26,180
additional definition of data structures

85
00:04:22,860 --> 00:04:27,690
<font color="#E5E5E5">and additional type tab conversion and</font>

86
00:04:26,180 --> 00:04:31,830
additional

87
00:04:27,690 --> 00:04:35,810
data processing<font color="#E5E5E5"> logic which exposed new</font>

88
00:04:31,830 --> 00:04:39,479
<font color="#E5E5E5">attack surfaces</font><font color="#CCCCCC"> to user mode processes</font>

89
00:04:35,810 --> 00:04:41,460
in the past few years<font color="#CCCCCC"> there are some but</font>

90
00:04:39,480 --> 00:04:44,910
<font color="#E5E5E5">not too many compatible abilities has</font>

91
00:04:41,460 --> 00:04:47,700
been discovered almost<font color="#CCCCCC"> all of them are</font>

92
00:04:44,910 --> 00:04:50,550
<font color="#E5E5E5">found in device drivers we think there</font>

93
00:04:47,700 --> 00:04:53,250
<font color="#E5E5E5">are two reasons first compared to</font><font color="#CCCCCC"> the</font>

94
00:04:50,550 --> 00:04:54,890
number of<font color="#E5E5E5"> system calls the number of</font>

95
00:04:53,250 --> 00:04:58,320
device drivers<font color="#CCCCCC"> are much more and</font>

96
00:04:54,890 --> 00:05:00,990
secondly device drivers usually have to

97
00:04:58,320 --> 00:05:05,099
handle more<font color="#CCCCCC"> complex data</font><font color="#E5E5E5"> structures than</font>

98
00:05:00,990 --> 00:05:08,100
normal system calls<font color="#E5E5E5"> and the most common</font>

99
00:05:05,100 --> 00:05:10,890
route<font color="#CCCCCC"> costs of this vulnerabilities is</font>

100
00:05:08,100 --> 00:05:14,460
the<font color="#E5E5E5"> inconsistency between compact and</font>

101
00:05:10,890 --> 00:05:17,190
<font color="#CCCCCC">non compact mode there are two types of</font>

102
00:05:14,460 --> 00:05:19,560
inconsistency<font color="#CCCCCC"> are the first is the</font>

103
00:05:17,190 --> 00:05:22,380
<font color="#E5E5E5">inconsistency of data structure</font>

104
00:05:19,560 --> 00:05:24,660
definition<font color="#CCCCCC"> and the second one is the</font>

105
00:05:22,380 --> 00:05:30,450
inconsistency<font color="#CCCCCC"> of user input validation</font>

106
00:05:24,660 --> 00:05:32,670
logic let's<font color="#E5E5E5"> see some examples this is an</font>

107
00:05:30,450 --> 00:05:35,610
example of<font color="#E5E5E5"> inconsistency of data</font>

108
00:05:32,670 --> 00:05:39,450
structure definition<font color="#E5E5E5"> in this case the</font>

109
00:05:35,610 --> 00:05:42,350
left one and<font color="#CCCCCC"> DP layer</font><font color="#E5E5E5"> committee 132 is</font>

110
00:05:39,450 --> 00:05:46,229
the<font color="#CCCCCC"> 32-bit user space data structure</font>

111
00:05:42,350 --> 00:05:48,330
while the right one MDP<font color="#CCCCCC"> Kevon is the</font>

112
00:05:46,230 --> 00:05:51,480
corresponding 64-bit kernel space

113
00:05:48,330 --> 00:05:54,780
<font color="#E5E5E5">structure the two</font><font color="#CCCCCC"> structures have almost</font>

114
00:05:51,480 --> 00:05:58,950
the same definition<font color="#E5E5E5"> making it seems easy</font>

115
00:05:54,780 --> 00:06:01,500
<font color="#E5E5E5">to convert however the real field we can</font>

116
00:05:58,950 --> 00:06:03,770
see that that a refilled reserved in

117
00:06:01,500 --> 00:06:06,530
these two structures<font color="#E5E5E5"> have different size</font>

118
00:06:03,770 --> 00:06:10,590
<font color="#E5E5E5">this should have be the same but</font>

119
00:06:06,530 --> 00:06:13,159
developer made a mistake so the one in

120
00:06:10,590 --> 00:06:18,150
the<font color="#E5E5E5"> left is larger than one in the right</font>

121
00:06:13,160 --> 00:06:21,060
and then when kernel<font color="#E5E5E5"> costs mem copy to</font>

122
00:06:18,150 --> 00:06:25,489
copy data from<font color="#E5E5E5"> the larger one to the</font>

123
00:06:21,060 --> 00:06:25,490
smaller one there's a stack overflow

124
00:06:28,270 --> 00:06:32,750
in this case we can see<font color="#E5E5E5"> the</font>

125
00:06:30,680 --> 00:06:36,740
inconsistency<font color="#CCCCCC"> of user input validation</font>

126
00:06:32,750 --> 00:06:38,930
logic<font color="#E5E5E5"> this function</font><font color="#CCCCCC"> IEP</font><font color="#E5E5E5"> ROM</font><font color="#CCCCCC"> init config</font>

127
00:06:36,740 --> 00:06:41,960
32 is<font color="#CCCCCC"> the</font><font color="#E5E5E5"> campaign mode</font><font color="#CCCCCC"> version of</font>

128
00:06:38,930 --> 00:06:44,210
function e to e<font color="#CCCCCC"> EP ROM</font><font color="#E5E5E5"> in it</font><font color="#CCCCCC"> config</font>

129
00:06:41,960 --> 00:06:49,400
which<font color="#E5E5E5"> is not shown</font><font color="#CCCCCC"> in this code snippet</font>

130
00:06:44,210 --> 00:06:52,159
and<font color="#E5E5E5"> the EP</font><font color="#CCCCCC"> ROM in it config function are</font>

131
00:06:49,400 --> 00:06:54,830
correctly validates user input well we

132
00:06:52,160 --> 00:06:58,790
can see<font color="#E5E5E5"> that this compound mode version</font>

133
00:06:54,830 --> 00:07:02,690
<font color="#E5E5E5">does</font><font color="#CCCCCC"> not validate</font><font color="#E5E5E5"> which leads to heap</font>

134
00:06:58,790 --> 00:07:06,730
overflow so the patch<font color="#CCCCCC"> we can see that</font><font color="#E5E5E5"> is</font>

135
00:07:02,690 --> 00:07:10,790
simply adding validation logic<font color="#E5E5E5"> on it</font><font color="#CCCCCC"> and</font>

136
00:07:06,730 --> 00:07:14,210
in this<font color="#E5E5E5"> case a function</font><font color="#CCCCCC"> card is compact</font>

137
00:07:10,790 --> 00:07:17,980
<font color="#CCCCCC">task is used to implement</font><font color="#E5E5E5"> both</font><font color="#CCCCCC"> compact</font>

138
00:07:14,210 --> 00:07:21,950
and noncom had a logic in<font color="#E5E5E5"> one function</font>

139
00:07:17,980 --> 00:07:25,700
this<font color="#E5E5E5"> can reduce some code redundancy but</font>

140
00:07:21,950 --> 00:07:28,400
still can't eliminate the inconsistency

141
00:07:25,700 --> 00:07:31,750
<font color="#CCCCCC">so in this function</font><font color="#E5E5E5"> when implementing</font>

142
00:07:28,400 --> 00:07:35,750
<font color="#E5E5E5">compile logic the developer forget to</font>

143
00:07:31,750 --> 00:07:37,790
validate<font color="#E5E5E5"> the user</font><font color="#CCCCCC"> space pointer power</font>

144
00:07:35,750 --> 00:07:41,030
setting eater and<font color="#CCCCCC"> it sighs sets down</font>

145
00:07:37,790 --> 00:07:45,590
<font color="#E5E5E5">which leads to</font><font color="#CCCCCC"> out of</font><font color="#E5E5E5"> bounds array</font>

146
00:07:41,030 --> 00:07:48,830
access based on our research on those

147
00:07:45,590 --> 00:07:51,590
paths<font color="#CCCCCC"> compatibilities we found that the</font>

148
00:07:48,830 --> 00:07:55,240
<font color="#CCCCCC">past</font><font color="#E5E5E5"> research on compatibilities only</font>

149
00:07:51,590 --> 00:07:57,979
focuses on normal program<font color="#E5E5E5"> logic</font>

150
00:07:55,240 --> 00:08:00,380
so this<font color="#E5E5E5"> vulnerabilities looks just like</font>

151
00:07:57,980 --> 00:08:02,780
any<font color="#E5E5E5"> other vulnerabilities in any other</font>

152
00:08:00,380 --> 00:08:06,080
<font color="#E5E5E5">part of the kernel assumes nothing</font>

153
00:08:02,780 --> 00:08:08,419
special<font color="#E5E5E5"> but during the research on those</font>

154
00:08:06,080 --> 00:08:11,539
vulnerabilities<font color="#E5E5E5"> we went deep into many</font>

155
00:08:08,420 --> 00:08:12,530
device drivers code and we found that in

156
00:08:11,540 --> 00:08:15,500
device drivers

157
00:08:12,530 --> 00:08:17,960
compared and non compact hosts you

158
00:08:15,500 --> 00:08:21,260
really mix together<font color="#E5E5E5"> making</font><font color="#CCCCCC"> the whole</font>

159
00:08:17,960 --> 00:08:24,219
program logic<font color="#E5E5E5"> very complex even</font>

160
00:08:21,260 --> 00:08:27,670
confusing so<font color="#E5E5E5"> we came up with a question</font>

161
00:08:24,220 --> 00:08:30,770
<font color="#E5E5E5">can this mixed codes</font><font color="#CCCCCC"> cause some expected</font>

162
00:08:27,670 --> 00:08:34,909
program<font color="#CCCCCC"> logic even</font><font color="#E5E5E5"> causing some security</font>

163
00:08:30,770 --> 00:08:39,010
problems<font color="#CCCCCC"> then my colleague conve will</font>

164
00:08:34,909 --> 00:08:39,010
introduce our research and<font color="#CCCCCC"> finding</font>

165
00:08:45,000 --> 00:08:51,580
hello I'm<font color="#CCCCCC"> competing at a</font><font color="#E5E5E5"> continue and we</font>

166
00:08:49,180 --> 00:08:54,400
know I'll come to a la<font color="#E5E5E5"> mota commonly</font>

167
00:08:51,580 --> 00:08:57,550
<font color="#E5E5E5">used</font><font color="#CCCCCC"> the interface in device drivers</font>

168
00:08:54,400 --> 00:08:59,130
so I will research many focused on our

169
00:08:57,550 --> 00:09:01,959
control

170
00:08:59,130 --> 00:09:05,650
this is<font color="#CCCCCC"> a symbol our country of</font><font color="#E5E5E5"> blue</font>

171
00:09:01,960 --> 00:09:08,950
<font color="#E5E5E5">tata inti white drivers and we know</font><font color="#CCCCCC"> how</font>

172
00:09:05,650 --> 00:09:11,400
control have saved parameters the

173
00:09:08,950 --> 00:09:16,030
further<font color="#E5E5E5"> a</font><font color="#CCCCCC"> pilot is</font><font color="#E5E5E5"> quite well</font>

174
00:09:11,400 --> 00:09:20,920
the second parameter<font color="#CCCCCC"> command</font><font color="#E5E5E5"> is the</font>

175
00:09:16,030 --> 00:09:24,490
<font color="#CCCCCC">device dependent aquatic</font><font color="#E5E5E5"> order thus</font>

176
00:09:20,920 --> 00:09:27,880
<font color="#E5E5E5">other parameter is a pointer to you the</font>

177
00:09:24,490 --> 00:09:31,720
memory you early it appointed to a

178
00:09:27,880 --> 00:09:40,510
<font color="#CCCCCC">structure lost rugged hyper depend on</font>

179
00:09:31,720 --> 00:09:43,900
specific device drivers and command 164

180
00:09:40,510 --> 00:09:47,980
<font color="#E5E5E5">Peter process invokes out on top in the</font>

181
00:09:43,900 --> 00:09:51,400
<font color="#CCCCCC">passage 64-bit aware of parameters</font><font color="#E5E5E5"> to</font>

182
00:09:47,980 --> 00:09:54,940
<font color="#E5E5E5">Colonel then</font><font color="#CCCCCC"> Colonel</font><font color="#E5E5E5"> will invoke</font>

183
00:09:51,400 --> 00:09:58,680
unlocked<font color="#CCCCCC"> I'll control with</font><font color="#E5E5E5"> this 64-bit</font>

184
00:09:54,940 --> 00:09:58,680
version of<font color="#E5E5E5"> user parameters</font>

185
00:10:00,420 --> 00:10:07,479
<font color="#E5E5E5">130 to be the process involves our</font>

186
00:10:03,490 --> 00:10:10,470
control in the<font color="#CCCCCC"> passages study to be the</font>

187
00:10:07,480 --> 00:10:13,540
<font color="#CCCCCC">wording of</font><font color="#E5E5E5"> all parameters that Colonel</font>

188
00:10:10,470 --> 00:10:20,830
Connor will invoke compare our control

189
00:10:13,540 --> 00:10:23,260
instead in device drivers we define the

190
00:10:20,830 --> 00:10:25,500
second of<font color="#CCCCCC"> our</font><font color="#E5E5E5"> control commander</font>

191
00:10:23,260 --> 00:10:30,130
parameters

192
00:10:25,500 --> 00:10:31,440
<font color="#E5E5E5">commander 32 are used up by</font><font color="#CCCCCC"> only city to</font>

193
00:10:30,130 --> 00:10:36,040
be<font color="#E5E5E5"> the program's</font>

194
00:10:31,440 --> 00:10:40,570
commander 64 are used by only<font color="#E5E5E5"> thing for</font>

195
00:10:36,040 --> 00:10:45,719
<font color="#CCCCCC">builder programs and some common command</font>

196
00:10:40,570 --> 00:10:51,040
can be used by posts 32-bit and 64-bit

197
00:10:45,720 --> 00:10:52,360
programs<font color="#E5E5E5"> because that corresponding</font><font color="#CCCCCC"> tell</font>

198
00:10:51,040 --> 00:10:55,238
<font color="#E5E5E5">structures</font>

199
00:10:52,360 --> 00:11:01,410
so<font color="#CCCCCC"> the outcome two parameters are</font><font color="#E5E5E5"> the</font>

200
00:10:55,239 --> 00:11:01,410
<font color="#CCCCCC">same</font><font color="#E5E5E5"> 32-bit and 64-bit platforms</font>

201
00:11:05,790 --> 00:11:13,929
after analyzing many different device

202
00:11:10,119 --> 00:11:16,299
drivers Dakota<font color="#E5E5E5"> we summarized this</font>

203
00:11:13,929 --> 00:11:21,629
typical detailed approach out of our

204
00:11:16,299 --> 00:11:21,629
control<font color="#CCCCCC"> in device driver implementations</font>

205
00:11:21,779 --> 00:11:29,110
in motor device drivers

206
00:11:24,369 --> 00:11:32,799
no matter compared<font color="#E5E5E5"> or non non compared</font>

207
00:11:29,110 --> 00:11:39,189
mode there are functionality<font color="#CCCCCC"> are the</font>

208
00:11:32,799 --> 00:11:42,639
same so<font color="#E5E5E5"> compare our control and unlock</font>

209
00:11:39,189 --> 00:11:45,540
the adventure<font color="#E5E5E5"> was account some common</font>

210
00:11:42,639 --> 00:11:50,920
cause to implement<font color="#CCCCCC"> there some</font>

211
00:11:45,540 --> 00:11:53,199
functionality and the motor important

212
00:11:50,920 --> 00:11:57,599
the<font color="#E5E5E5"> difference between compared our</font>

213
00:11:53,199 --> 00:12:02,099
control and unlock the outcome to<font color="#E5E5E5"> the</font>

214
00:11:57,600 --> 00:12:06,129
company our control had one extra<font color="#E5E5E5"> step</font>

215
00:12:02,100 --> 00:12:09,699
in needed to convert<font color="#E5E5E5"> a study to be the</font>

216
00:12:06,129 --> 00:12:11,879
<font color="#CCCCCC">wording of</font><font color="#E5E5E5"> the parameters to 64-bit the</font>

217
00:12:09,699 --> 00:12:11,878
world

218
00:12:17,780 --> 00:12:22,819
compared<font color="#E5E5E5"> to</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> control we will make a</font>

219
00:12:20,000 --> 00:12:29,780
conversion<font color="#E5E5E5"> according</font><font color="#CCCCCC"> to the value</font><font color="#E5E5E5"> of a</font>

220
00:12:22,820 --> 00:12:31,970
commander<font color="#CCCCCC"> 32 so we had a fresh idea what</font>

221
00:12:29,780 --> 00:12:34,550
you<font color="#CCCCCC"> will intentionally confuse the</font>

222
00:12:31,970 --> 00:12:38,780
company our control parameters with

223
00:12:34,550 --> 00:12:42,130
<font color="#CCCCCC">unloaded our</font><font color="#E5E5E5"> control parameters will it</font>

224
00:12:38,780 --> 00:12:48,860
<font color="#E5E5E5">affect the behavior of the conversion</font>

225
00:12:42,130 --> 00:12:52,070
not coding security problems then we

226
00:12:48,860 --> 00:12:55,330
<font color="#CCCCCC">listed the following</font><font color="#E5E5E5"> six conditions with</font>

227
00:12:52,070 --> 00:12:58,040
<font color="#E5E5E5">the computer parameters and</font><font color="#CCCCCC"> try to</font>

228
00:12:55,330 --> 00:13:00,220
<font color="#CCCCCC">verify</font><font color="#E5E5E5"> whether they have a security</font>

229
00:12:58,040 --> 00:13:00,219
<font color="#E5E5E5">problem</font>

230
00:13:06,080 --> 00:13:12,630
further we found<font color="#E5E5E5"> unlock the outcome to</font>

231
00:13:09,270 --> 00:13:16,050
another have become weary on behavior in

232
00:13:12,630 --> 00:13:19,290
a more<font color="#E5E5E5"> fall and the name of five when</font>

233
00:13:16,050 --> 00:13:21,540
<font color="#CCCCCC">you pass a commander so the tool to</font>

234
00:13:19,290 --> 00:13:25,530
<font color="#E5E5E5">unlock the outcome job</font><font color="#CCCCCC"> it will be</font>

235
00:13:21,540 --> 00:13:32,880
<font color="#CCCCCC">filtered so number four and the number</font>

236
00:13:25,530 --> 00:13:37,050
five<font color="#CCCCCC"> argued out second in number six</font>

237
00:13:32,880 --> 00:13:40,410
when<font color="#CCCCCC"> you pass a peach doctor 32 with the</font>

238
00:13:37,050 --> 00:13:44,310
commander 64 how control car will

239
00:13:40,410 --> 00:13:47,579
<font color="#CCCCCC">written fell directly</font><font color="#E5E5E5"> because the size</font>

240
00:13:44,310 --> 00:13:51,329
<font color="#E5E5E5">of the target appointed by historical</font>

241
00:13:47,580 --> 00:14:00,470
SATA 2 is less than what<font color="#CCCCCC"> the colonel</font>

242
00:13:51,330 --> 00:14:03,090
<font color="#E5E5E5">need so number six</font><font color="#CCCCCC"> ruled out as a lotta</font>

243
00:14:00,470 --> 00:14:06,420
<font color="#E5E5E5">processing logical of pathology a</font>

244
00:14:03,090 --> 00:14:10,350
parameter in our control<font color="#CCCCCC"> depend on the</font>

245
00:14:06,420 --> 00:14:14,339
<font color="#E5E5E5">value of</font><font color="#CCCCCC"> commander</font><font color="#E5E5E5"> so we</font><font color="#CCCCCC"> ignore</font><font color="#E5E5E5"> the</font>

246
00:14:10,350 --> 00:14:17,220
wearable piece<font color="#E5E5E5"> doctor only</font><font color="#CCCCCC"> focusing on</font>

247
00:14:14,340 --> 00:14:21,590
how change of the second parameter

248
00:14:17,220 --> 00:14:26,220
command will affect<font color="#E5E5E5"> our control</font>

249
00:14:21,590 --> 00:14:29,180
so<font color="#E5E5E5"> number</font><font color="#CCCCCC"> three is equivalent to come</font>

250
00:14:26,220 --> 00:14:32,310
head our control with the commander

251
00:14:29,180 --> 00:14:38,120
study<font color="#CCCCCC"> two</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> peace</font><font color="#E5E5E5"> doctors</font><font color="#CCCCCC"> little</font>

252
00:14:32,310 --> 00:14:38,119
<font color="#CCCCCC">parameters which</font><font color="#E5E5E5"> in the normal case</font>

253
00:14:39,050 --> 00:14:45,810
so which other need either to<font color="#E5E5E5"> focus on</font>

254
00:14:42,330 --> 00:14:48,710
the<font color="#E5E5E5"> safety of</font><font color="#CCCCCC"> company control</font><font color="#E5E5E5"> with 64</font>

255
00:14:45,810 --> 00:14:48,709
<font color="#CCCCCC">Peter commander</font>

256
00:14:55,190 --> 00:15:01,910
then we<font color="#CCCCCC"> Annelle and light</font><font color="#E5E5E5"> the many</font>

257
00:14:58,639 --> 00:15:06,220
<font color="#CCCCCC">demise drivers try to find</font><font color="#E5E5E5"> know what</font>

258
00:15:01,910 --> 00:15:10,519
behavior will be triggered if we pass

259
00:15:06,220 --> 00:15:15,279
commander<font color="#E5E5E5"> 64 and carefully control a</font>

260
00:15:10,519 --> 00:15:15,279
<font color="#CCCCCC">diminishes the pitch other parameters in</font>

261
00:15:16,569 --> 00:15:25,819
<font color="#CCCCCC">some of them</font><font color="#E5E5E5"> will</font><font color="#CCCCCC"> found when commander</font>

262
00:15:21,050 --> 00:15:29,359
64 is passed up to<font color="#E5E5E5"> compare our control</font>

263
00:15:25,819 --> 00:15:40,490
and<font color="#CCCCCC"> its</font><font color="#E5E5E5"> second parameter the check and</font>

264
00:15:29,360 --> 00:15:43,279
confirm will be bypassed then with the

265
00:15:40,490 --> 00:15:47,329
carefully constructed<font color="#CCCCCC"> a</font><font color="#E5E5E5"> malicious v</font>

266
00:15:43,279 --> 00:15:48,649
<font color="#E5E5E5">other parameters in some of common</font>

267
00:15:47,329 --> 00:15:53,469
common cold

268
00:15:48,649 --> 00:16:03,170
we<font color="#CCCCCC"> amend data to</font><font color="#E5E5E5"> Jericho no</font>

269
00:15:53,470 --> 00:16:06,759
vulnerabilities so we<font color="#E5E5E5"> wanted</font><font color="#CCCCCC"> a to</font>

270
00:16:03,170 --> 00:16:09,560
<font color="#E5E5E5">discover more vulnerability by father</font>

271
00:16:06,759 --> 00:16:12,949
<font color="#CCCCCC">ego sitting in Linux is called</font><font color="#E5E5E5"> panel</font>

272
00:16:09,560 --> 00:16:17,329
tools including Trinity and the<font color="#E5E5E5"> city</font>

273
00:16:12,949 --> 00:16:20,329
<font color="#E5E5E5">color to notice about the competitor so</font>

274
00:16:17,329 --> 00:16:23,959
we added<font color="#E5E5E5"> a compared supporter continuity</font>

275
00:16:20,329 --> 00:16:29,660
and acid color then I use them<font color="#CCCCCC"> to</font>

276
00:16:23,959 --> 00:16:33,699
<font color="#CCCCCC">further</font><font color="#E5E5E5"> device driver</font><font color="#CCCCCC"> as expected</font><font color="#E5E5E5"> we</font>

277
00:16:29,660 --> 00:16:33,699
<font color="#E5E5E5">discovered a more vulnerabilities</font>

278
00:16:38,490 --> 00:16:46,319
here<font color="#E5E5E5"> I summarized the</font><font color="#CCCCCC"> full</font><font color="#E5E5E5"> security</font>

279
00:16:42,730 --> 00:16:51,699
issues<font color="#E5E5E5"> that can code by the type of</font>

280
00:16:46,319 --> 00:16:54,639
<font color="#E5E5E5">competitive and abilities since this</font>

281
00:16:51,699 --> 00:16:58,719
logical vulnerability causes the check

282
00:16:54,639 --> 00:17:03,309
and converter<font color="#E5E5E5"> are you input</font><font color="#CCCCCC"> beam by</font>

283
00:16:58,720 --> 00:17:06,370
pattern maliciously<font color="#E5E5E5"> you the input for</font>

284
00:17:03,309 --> 00:17:11,609
<font color="#E5E5E5">the course every security problems</font>

285
00:17:06,369 --> 00:17:11,609
depending<font color="#CCCCCC"> on</font><font color="#E5E5E5"> behaviors bypassed by</font>

286
00:17:12,869 --> 00:17:19,779
passing verification are you the input

287
00:17:16,470 --> 00:17:22,529
elements can lead to<font color="#E5E5E5"> a</font><font color="#CCCCCC"> outer</font><font color="#E5E5E5"> bound</font>

288
00:17:19,779 --> 00:17:27,869
reader and<font color="#CCCCCC"> the writer told</font><font color="#E5E5E5"> it array</font>

289
00:17:22,529 --> 00:17:27,869
that's causing probability at<font color="#CCCCCC"> collision</font>

290
00:17:28,109 --> 00:17:34,600
<font color="#CCCCCC">by passing verification are you the</font>

291
00:17:31,840 --> 00:17:39,100
<font color="#CCCCCC">input a point of value can lead to</font>

292
00:17:34,600 --> 00:17:42,389
<font color="#E5E5E5">arbitrator memory read not coding</font>

293
00:17:39,100 --> 00:17:42,389
<font color="#CCCCCC">information leakage</font>

294
00:17:48,130 --> 00:17:55,030
<font color="#CCCCCC">compared to</font><font color="#E5E5E5"> a local user space in the</font>

295
00:17:51,190 --> 00:18:01,570
unit or allocate<font color="#E5E5E5"> us best memory in</font>

296
00:17:55,030 --> 00:18:06,280
<font color="#E5E5E5">Colonel CAI Malaga ayuda instead of it</font>

297
00:18:01,570 --> 00:18:09,789
for<font color="#E5E5E5"> checker and Nakamura which</font><font color="#CCCCCC"> increases</font>

298
00:18:06,280 --> 00:18:13,600
<font color="#CCCCCC">operational internal memory that</font>

299
00:18:09,789 --> 00:18:21,580
<font color="#E5E5E5">increasing the security risk</font>

300
00:18:13,600 --> 00:18:24,908
<font color="#E5E5E5">one check and converter a bipod using in</font>

301
00:18:21,580 --> 00:18:27,189
the competitor today in common code to

302
00:18:24,909 --> 00:18:31,510
deal with the campaign mode and<font color="#CCCCCC"> the</font>

303
00:18:27,190 --> 00:18:36,370
64-bit mode it is easy to call logic

304
00:18:31,510 --> 00:18:41,110
<font color="#CCCCCC">confusion ignoring the security auditor</font>

305
00:18:36,370 --> 00:18:43,330
of<font color="#E5E5E5"> the compatible in common</font><font color="#CCCCCC"> core and it</font>

306
00:18:41,110 --> 00:18:46,379
is more<font color="#E5E5E5"> likely</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> cause security</font>

307
00:18:43,330 --> 00:18:54,879
problems<font color="#E5E5E5"> when by patent checker and</font>

308
00:18:46,380 --> 00:18:58,929
camera here I lived to see me<font color="#E5E5E5"> we found</font>

309
00:18:54,880 --> 00:19:04,059
to further illustrate this vulnerability

310
00:18:58,929 --> 00:19:06,640
type in the Left diagram the second

311
00:19:04,059 --> 00:19:09,879
<font color="#E5E5E5">stable process the study to be</font><font color="#CCCCCC"> the</font>

312
00:19:06,640 --> 00:19:16,799
commander including check and convert<font color="#E5E5E5"> a</font>

313
00:19:09,880 --> 00:19:20,200
u.s. importer if we<font color="#CCCCCC"> part</font><font color="#E5E5E5"> directly is</font>

314
00:19:16,799 --> 00:19:23,700
corresponding 64-bit<font color="#CCCCCC"> a</font><font color="#E5E5E5"> command the very</font>

315
00:19:20,200 --> 00:19:27,580
tender of us bad point

316
00:19:23,700 --> 00:19:34,360
check the<font color="#CCCCCC"> PI copy form user will be</font>

317
00:19:27,580 --> 00:19:37,510
bypassed so it can be assigned not

318
00:19:34,360 --> 00:19:40,959
<font color="#CCCCCC">invaluable without any</font>

319
00:19:37,510 --> 00:19:43,408
arbitrator address access why you the

320
00:19:40,960 --> 00:19:43,409
mem copy

321
00:19:47,760 --> 00:19:54,850
this is<font color="#CCCCCC"> a</font><font color="#E5E5E5"> second</font><font color="#CCCCCC"> example in the left a</font>

322
00:19:51,490 --> 00:19:59,470
diagram<font color="#E5E5E5"> the second step of processes the</font>

323
00:19:54,850 --> 00:20:04,240
study to<font color="#CCCCCC"> be the commander copy from user</font>

324
00:19:59,470 --> 00:20:07,540
checks<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> euler's best pointer</font><font color="#E5E5E5"> even</font>

325
00:20:04,240 --> 00:20:11,200
<font color="#CCCCCC">way passes directly to</font><font color="#E5E5E5"> the corresponding</font>

326
00:20:07,540 --> 00:20:17,889
<font color="#E5E5E5">64-bit</font><font color="#CCCCCC"> command</font><font color="#E5E5E5"> the validation will be by</font>

327
00:20:11,200 --> 00:20:22,560
pasta this pointer can be assigned<font color="#E5E5E5"> to</font>

328
00:20:17,890 --> 00:20:26,440
<font color="#E5E5E5">any</font><font color="#CCCCCC"> value without he-he arbitrary</font>

329
00:20:22,560 --> 00:20:30,000
address access<font color="#E5E5E5"> why did the dereference</font>

330
00:20:26,440 --> 00:20:30,000
the in<font color="#CCCCCC"> a</font><font color="#E5E5E5"> third step</font>

331
00:20:35,990 --> 00:20:43,880
here<font color="#E5E5E5"> we summarize the three tips to</font>

332
00:20:39,800 --> 00:20:46,800
mitigate the<font color="#E5E5E5"> compare the vulnerability</font>

333
00:20:43,880 --> 00:20:50,580
try to use<font color="#CCCCCC"> compare the a local user</font>

334
00:20:46,800 --> 00:20:54,540
space instead of camera the entire<font color="#CCCCCC"> user</font>

335
00:20:50,580 --> 00:20:59,870
<font color="#E5E5E5">input checker and</font><font color="#CCCCCC"> converted under</font>

336
00:20:54,540 --> 00:21:03,030
<font color="#CCCCCC">conversion avoiding security problems</font>

337
00:20:59,870 --> 00:21:09,120
caused by<font color="#CCCCCC"> the rebel operation and</font>

338
00:21:03,030 --> 00:21:12,210
commemorate try to avoid<font color="#E5E5E5"> the using a the</font>

339
00:21:09,120 --> 00:21:17,340
competitors in common codes to deal with

340
00:21:12,210 --> 00:21:19,740
the<font color="#CCCCCC"> compare code</font><font color="#E5E5E5"> and 64-bit mode</font><font color="#CCCCCC"> which</font>

341
00:21:17,340 --> 00:21:24,659
make all logical computer and the

342
00:21:19,740 --> 00:21:27,360
security problems we can use<font color="#CCCCCC"> compare a</font>

343
00:21:24,660 --> 00:21:30,860
<font color="#CCCCCC">local us best to</font><font color="#E5E5E5"> help calm weather</font>

344
00:21:27,360 --> 00:21:36,540
illness but you know parameters from

345
00:21:30,860 --> 00:21:40,580
company<font color="#E5E5E5"> mode to 64-bit</font><font color="#CCCCCC"> model then</font>

346
00:21:36,540 --> 00:21:47,670
proceed in common cold<font color="#E5E5E5"> so as to avoid</font>

347
00:21:40,580 --> 00:21:51,260
using<font color="#CCCCCC"> a competitor's try to use dot</font>

348
00:21:47,670 --> 00:21:54,200
<font color="#E5E5E5">instead of point in user input to</font>

349
00:21:51,260 --> 00:21:59,700
<font color="#CCCCCC">minimize</font><font color="#E5E5E5"> the very tight validation of</font>

350
00:21:54,200 --> 00:22:03,950
user of you the important<font color="#E5E5E5"> Chinese best</font>

351
00:21:59,700 --> 00:22:03,950
for efficiency<font color="#E5E5E5"> and security</font>

352
00:22:07,850 --> 00:22:16,459
this is our<font color="#E5E5E5"> devices development and</font><font color="#CCCCCC"> data</font>

353
00:22:13,430 --> 00:22:18,440
and in<font color="#E5E5E5"> Europe should suggesting the tech</font>

354
00:22:16,460 --> 00:22:24,650
team and<font color="#E5E5E5"> the oddity of</font>

355
00:22:18,440 --> 00:22:26,660
<font color="#CCCCCC">competi</font><font color="#E5E5E5"> code for tools and coding in</font>

356
00:22:24,650 --> 00:22:33,680
<font color="#E5E5E5">tools should give more</font><font color="#CCCCCC"> attention to</font>

357
00:22:26,660 --> 00:22:36,530
compare the code security<font color="#E5E5E5"> researchers</font>

358
00:22:33,680 --> 00:22:39,940
can continue to explore compare the

359
00:22:36,530 --> 00:22:39,940
attack<font color="#CCCCCC"> on more platforms</font>

360
00:22:48,220 --> 00:22:54,309
so this bitch<font color="#CCCCCC"> I hope</font><font color="#E5E5E5"> to help you</font>

361
00:22:51,370 --> 00:22:57,428
understand the concept<font color="#E5E5E5"> and</font><font color="#CCCCCC"> the security</font>

362
00:22:54,309 --> 00:23:01,620
<font color="#CCCCCC">risk</font><font color="#E5E5E5"> of combat and</font><font color="#CCCCCC"> we'll add some</font>

363
00:22:57,429 --> 00:23:01,620
<font color="#CCCCCC">compare the vulnerabilities in</font><font color="#E5E5E5"> a part</font>

364
00:23:02,129 --> 00:23:10,959
more important<font color="#CCCCCC"> we identified a new type</font>

365
00:23:07,090 --> 00:23:15,189
of combative on abilities in<font color="#E5E5E5"> device</font>

366
00:23:10,960 --> 00:23:20,529
drivers which had not<font color="#CCCCCC"> needed covered by</font>

367
00:23:15,190 --> 00:23:22,629
any<font color="#E5E5E5"> others before and last time</font><font color="#CCCCCC"> I wanted</font>

368
00:23:20,529 --> 00:23:26,200
<font color="#E5E5E5">to show you how to discover the kind of</font>

369
00:23:22,629 --> 00:23:31,840
vulnerabilities<font color="#E5E5E5"> and how to avoid them in</font>

370
00:23:26,200 --> 00:23:35,429
development thank you

371
00:23:31,840 --> 00:23:35,428
any questions

372
00:23:38,880 --> 00:23:42,759
<font color="#E5E5E5">okay</font>

373
00:23:39,700 --> 00:23:42,759
[Music]

