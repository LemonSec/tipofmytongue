1
00:00:00,000 --> 00:00:06,240
<font color="#E5E5E5">okay hello and welcome to our talk</font><font color="#CCCCCC"> when</font>

2
00:00:03,120 --> 00:00:09,840
good turns evil using<font color="#E5E5E5"> intellect checks</font>

3
00:00:06,240 --> 00:00:12,599
to stealthily<font color="#E5E5E5"> steal bitcoins great that</font>

4
00:00:09,840 --> 00:00:15,500
so<font color="#CCCCCC"> many of you showed up</font><font color="#E5E5E5"> so I hope this</font>

5
00:00:12,599 --> 00:00:18,420
<font color="#CCCCCC">is an interesting</font><font color="#E5E5E5"> talk for a lot of you</font>

6
00:00:15,500 --> 00:00:21,270
let's talk shortly about the outline of

7
00:00:18,420 --> 00:00:23,400
this talk today

8
00:00:21,270 --> 00:00:25,710
you all know bitcoins and then you have

9
00:00:23,400 --> 00:00:27,060
this wallets there that you need to

10
00:00:25,710 --> 00:00:29,279
<font color="#E5E5E5">store your bitcoins and then you have</font>

11
00:00:27,060 --> 00:00:32,189
<font color="#E5E5E5">your private key in your Bitcoin</font><font color="#CCCCCC"> wallet</font>

12
00:00:29,279 --> 00:00:35,280
<font color="#E5E5E5">that you have to protect at all costs</font><font color="#CCCCCC"> so</font>

13
00:00:32,189 --> 00:00:36,360
no one should<font color="#CCCCCC"> have your private key that</font>

14
00:00:35,280 --> 00:00:39,870
you use for your Bitcoin wallet

15
00:00:36,360 --> 00:00:42,890
<font color="#CCCCCC">otherwise</font><font color="#E5E5E5"> anybody could use your private</font>

16
00:00:39,870 --> 00:00:46,169
<font color="#E5E5E5">key to</font><font color="#CCCCCC"> make transactions</font><font color="#E5E5E5"> with your money</font>

17
00:00:42,890 --> 00:00:48,450
<font color="#E5E5E5">literally stealing your money which</font>

18
00:00:46,170 --> 00:00:51,629
would<font color="#E5E5E5"> be really bad so you really want</font>

19
00:00:48,450 --> 00:00:54,449
<font color="#E5E5E5">to protect your Bitcoin</font><font color="#CCCCCC"> wallet and then</font>

20
00:00:51,629 --> 00:00:57,089
you have this nice<font color="#CCCCCC"> Hardware feature by</font>

21
00:00:54,449 --> 00:01:00,839
Intel<font color="#E5E5E5"> it's called intellect checks that</font>

22
00:00:57,090 --> 00:01:03,180
allows you to<font color="#CCCCCC"> run applications in</font><font color="#E5E5E5"> secure</font>

23
00:01:00,840 --> 00:01:06,030
<font color="#CCCCCC">nkf</font><font color="#E5E5E5"> and hardware</font>

24
00:01:03,180 --> 00:01:08,189
so it's<font color="#E5E5E5"> hardware support</font><font color="#CCCCCC"> it isolation it</font>

25
00:01:06,030 --> 00:01:11,280
allows you to<font color="#CCCCCC"> run programs</font><font color="#E5E5E5"> store data</font>

26
00:01:08,189 --> 00:01:13,798
and make<font color="#CCCCCC"> it completely secure so that no</font>

27
00:01:11,280 --> 00:01:16,290
one can get access<font color="#E5E5E5"> to</font><font color="#CCCCCC"> your code</font><font color="#E5E5E5"> tree</font>

28
00:01:13,799 --> 00:01:21,020
data everything<font color="#CCCCCC"> is encrypted</font><font color="#E5E5E5"> has</font>

29
00:01:16,290 --> 00:01:23,159
enforced<font color="#CCCCCC"> the CPU</font><font color="#E5E5E5"> so what's better than</font>

30
00:01:21,020 --> 00:01:25,500
using<font color="#CCCCCC"> that</font><font color="#E5E5E5"> combining that with your</font>

31
00:01:23,159 --> 00:01:28,229
Bitcoin wallet<font color="#E5E5E5"> so implementing your</font>

32
00:01:25,500 --> 00:01:31,710
Bitcoin wallet<font color="#E5E5E5"> inside in less x26</font><font color="#CCCCCC"> urine</font>

33
00:01:28,229 --> 00:01:34,560
cave which protects your private key by

34
00:01:31,710 --> 00:01:36,329
<font color="#CCCCCC">encrypting the memory by not allowing</font>

35
00:01:34,560 --> 00:01:38,939
any other application or operating

36
00:01:36,329 --> 00:01:41,100
<font color="#CCCCCC">system to</font><font color="#E5E5E5"> access the data to access your</font>

37
00:01:38,939 --> 00:01:44,309
<font color="#CCCCCC">private key so that</font><font color="#E5E5E5"> sounds like</font>

38
00:01:41,100 --> 00:01:46,949
<font color="#E5E5E5">something we might want to do right true</font>

39
00:01:44,310 --> 00:01:48,869
so we have this nice technology<font color="#E5E5E5"> but as</font>

40
00:01:46,950 --> 00:01:52,079
an attacker<font color="#E5E5E5"> why not use this technology</font>

41
00:01:48,869 --> 00:01:54,750
<font color="#E5E5E5">as well we can also use</font><font color="#CCCCCC"> SGX</font><font color="#E5E5E5"> to hide</font>

42
00:01:52,079 --> 00:01:56,610
ourselves from the operating systems<font color="#E5E5E5"> and</font>

43
00:01:54,750 --> 00:01:58,920
<font color="#E5E5E5">the antivirus software because no one</font>

44
00:01:56,610 --> 00:02:01,140
can look what we<font color="#CCCCCC"> are</font><font color="#E5E5E5"> doing and maybe as</font>

45
00:01:58,920 --> 00:02:03,630
an attack here we can also attack other

46
00:02:01,140 --> 00:02:06,360
enclaves<font color="#E5E5E5"> running inside</font><font color="#CCCCCC"> SGX</font>

47
00:02:03,630 --> 00:02:10,320
<font color="#E5E5E5">if we can do so we</font><font color="#CCCCCC"> can steal the</font>

48
00:02:06,360 --> 00:02:13,450
bitcoins<font color="#E5E5E5"> and you do again</font>

49
00:02:10,320 --> 00:02:16,299
<font color="#CCCCCC">okay so that was the outline to our</font>

50
00:02:13,450 --> 00:02:18,670
persons<font color="#E5E5E5"> my name is Michael</font><font color="#CCCCCC"> Schwarz I'm a</font>

51
00:02:16,300 --> 00:02:22,150
PhD student at Cass University of

52
00:02:18,670 --> 00:02:23,769
Technology<font color="#E5E5E5"> in</font><font color="#CCCCCC"> Austria</font><font color="#E5E5E5"> I'm working on</font>

53
00:02:22,150 --> 00:02:26,500
side-channel attacks on

54
00:02:23,770 --> 00:02:29,430
microarchitecture attacks<font color="#E5E5E5"> so all the</font>

55
00:02:26,500 --> 00:02:32,470
attacks<font color="#E5E5E5"> that exploit some side effects</font>

56
00:02:29,430 --> 00:02:34,110
<font color="#CCCCCC">we only do that in software</font><font color="#E5E5E5"> so we work</font>

57
00:02:32,470 --> 00:02:38,470
on software based<font color="#E5E5E5"> side-channel attacks</font>

58
00:02:34,110 --> 00:02:41,230
<font color="#E5E5E5">to exfiltrate secrets anywhere typically</font>

59
00:02:38,470 --> 00:02:44,470
using the<font color="#E5E5E5"> cache or</font><font color="#CCCCCC"> the branch picture or</font>

60
00:02:41,230 --> 00:02:46,510
the<font color="#CCCCCC"> DRM you can reach me on</font><font color="#E5E5E5"> Twitter</font>

61
00:02:44,470 --> 00:02:48,100
it's my<font color="#E5E5E5"> twitter handle there you can</font>

62
00:02:46,510 --> 00:02:50,290
write me an email if<font color="#CCCCCC"> you have questions</font>

63
00:02:48,100 --> 00:02:52,269
if you<font color="#E5E5E5"> want to get in any contact</font>

64
00:02:50,290 --> 00:02:55,060
we will also<font color="#E5E5E5"> be here for the rest of the</font>

65
00:02:52,270 --> 00:02:58,090
conference<font color="#CCCCCC"> so you can just come to us</font>

66
00:02:55,060 --> 00:03:01,630
<font color="#E5E5E5">and talk</font><font color="#CCCCCC"> to us if you're interested in</font>

67
00:02:58,090 --> 00:03:03,220
<font color="#CCCCCC">that stuff</font><font color="#E5E5E5"> and my name is Moritz lip I'm</font>

68
00:03:01,630 --> 00:03:05,650
also a<font color="#CCCCCC"> PhD student at</font><font color="#E5E5E5"> Carleton</font>

69
00:03:03,220 --> 00:03:08,410
<font color="#E5E5E5">University University of Technology I</font>

70
00:03:05,650 --> 00:03:10,480
also focus<font color="#E5E5E5"> on side-channel attacks you</font>

71
00:03:08,410 --> 00:03:12,579
can also contact me<font color="#E5E5E5"> on Twitter or via</font>

72
00:03:10,480 --> 00:03:15,340
email<font color="#E5E5E5"> or</font><font color="#CCCCCC"> just talk talk to us</font><font color="#E5E5E5"> later on</font>

73
00:03:12,580 --> 00:03:17,709
but<font color="#E5E5E5"> we were not the</font><font color="#CCCCCC"> only one working on</font>

74
00:03:15,340 --> 00:03:19,900
those subjects<font color="#E5E5E5"> so our research team</font>

75
00:03:17,709 --> 00:03:22,720
consists of<font color="#E5E5E5"> Daniel</font><font color="#CCCCCC"> Cruz came on teen</font>

76
00:03:19,900 --> 00:03:24,850
<font color="#E5E5E5">Maurice</font><font color="#CCCCCC"> Samuel Weiser</font><font color="#E5E5E5"> to Omashu star and</font>

77
00:03:22,720 --> 00:03:27,549
<font color="#CCCCCC">Shepherd manga</font><font color="#E5E5E5"> also from</font><font color="#CCCCCC"> crass</font>

78
00:03:24,850 --> 00:03:29,739
University of Technology and under<font color="#E5E5E5"> Spock</font>

79
00:03:27,549 --> 00:03:32,860
<font color="#E5E5E5">who is working at G theta advanced</font>

80
00:03:29,739 --> 00:03:37,570
analytics so let's dive back<font color="#E5E5E5"> into our</font>

81
00:03:32,860 --> 00:03:39,790
<font color="#E5E5E5">topic how does</font><font color="#CCCCCC"> s GX work exactly so we</font>

82
00:03:37,570 --> 00:03:42,609
have seen there<font color="#E5E5E5"> is some hardware support</font>

83
00:03:39,790 --> 00:03:44,109
for<font color="#CCCCCC"> running things securely so but the</font>

84
00:03:42,610 --> 00:03:46,060
others that<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> works so</font><font color="#E5E5E5"> I guess</font>

85
00:03:44,110 --> 00:03:48,160
not<font color="#E5E5E5"> all of you have heard about</font><font color="#CCCCCC"> sjx and</font>

86
00:03:46,060 --> 00:03:49,900
how that<font color="#E5E5E5"> really</font><font color="#CCCCCC"> works so I'll give a</font>

87
00:03:48,160 --> 00:03:52,359
brief<font color="#E5E5E5"> introduction to</font><font color="#CCCCCC"> STX</font>

88
00:03:49,900 --> 00:03:55,290
and if you're talking<font color="#E5E5E5"> about applications</font>

89
00:03:52,360 --> 00:03:57,810
we<font color="#E5E5E5"> usually have one application</font><font color="#CCCCCC"> with the</font>

90
00:03:55,290 --> 00:04:00,970
secrets in there<font color="#E5E5E5"> and all the code and</font>

91
00:03:57,810 --> 00:04:03,130
<font color="#E5E5E5">with the</font><font color="#CCCCCC"> STX</font><font color="#E5E5E5"> model we split our</font>

92
00:04:00,970 --> 00:04:06,100
application<font color="#E5E5E5"> so we split it into an</font>

93
00:04:03,130 --> 00:04:09,040
untrusted part we don't have any<font color="#E5E5E5"> secrets</font>

94
00:04:06,100 --> 00:04:10,989
or<font color="#E5E5E5"> anything critical stored and this</font>

95
00:04:09,040 --> 00:04:14,590
untrusted part is responsible<font color="#CCCCCC"> to create</font>

96
00:04:10,989 --> 00:04:16,780
<font color="#E5E5E5">this</font><font color="#CCCCCC"> M cave and</font><font color="#E5E5E5"> this anchor is</font><font color="#CCCCCC"> the</font>

97
00:04:14,590 --> 00:04:18,940
trusted part of our<font color="#CCCCCC"> application</font>

98
00:04:16,779 --> 00:04:22,078
containing<font color="#E5E5E5"> all the secrets or the code</font>

99
00:04:18,940 --> 00:04:25,050
that should not be<font color="#E5E5E5"> attackable</font>

100
00:04:22,079 --> 00:04:28,800
and everything is stored in<font color="#E5E5E5"> there it's</font>

101
00:04:25,050 --> 00:04:30,780
encrypted<font color="#E5E5E5"> in</font><font color="#CCCCCC"> a DRM and if you wanted</font><font color="#E5E5E5"> to</font>

102
00:04:28,800 --> 00:04:33,240
call any function inside<font color="#E5E5E5"> the</font><font color="#CCCCCC"> secure</font>

103
00:04:30,780 --> 00:04:35,758
anklet we have to go through a Colgate

104
00:04:33,240 --> 00:04:37,650
<font color="#CCCCCC">it's similar to</font><font color="#E5E5E5"> how untrusted</font>

105
00:04:35,759 --> 00:04:39,750
applications<font color="#E5E5E5"> interact with the operating</font>

106
00:04:37,650 --> 00:04:42,349
system<font color="#E5E5E5"> they use this cause there here we</font>

107
00:04:39,750 --> 00:04:45,240
have a<font color="#E5E5E5"> call</font><font color="#CCCCCC"> kit with all calls and</font>

108
00:04:42,349 --> 00:04:47,219
<font color="#CCCCCC">recalls</font><font color="#E5E5E5"> and we call into this Colgate</font>

109
00:04:45,240 --> 00:04:49,039
and it gets dispatched to the correct

110
00:04:47,220 --> 00:04:50,849
trusted function we wants to<font color="#E5E5E5"> call</font>

111
00:04:49,039 --> 00:04:52,830
<font color="#E5E5E5">distrusted function does all the</font>

112
00:04:50,849 --> 00:04:56,550
computation<font color="#E5E5E5"> with the secrets in there</font>

113
00:04:52,830 --> 00:04:59,729
<font color="#E5E5E5">and then if it's done returns and in the</font>

114
00:04:56,550 --> 00:05:02,099
untrusted<font color="#E5E5E5"> part we just get the result of</font>

115
00:04:59,729 --> 00:05:03,810
this operation<font color="#CCCCCC"> which was done in a in</font>

116
00:05:02,099 --> 00:05:06,840
the trusted part and then we can

117
00:05:03,810 --> 00:05:09,479
continue<font color="#CCCCCC"> our whole computation</font><font color="#E5E5E5"> and</font>

118
00:05:06,840 --> 00:05:13,289
trusted pad with the secretly<font color="#E5E5E5"> computed</font>

119
00:05:09,479 --> 00:05:16,020
secret of the trust part and the nice

120
00:05:13,289 --> 00:05:19,620
thing<font color="#CCCCCC"> about that</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> that it uses</font><font color="#E5E5E5"> quite</font>

121
00:05:16,020 --> 00:05:21,870
some protection even<font color="#E5E5E5"> in a way that we</font>

122
00:05:19,620 --> 00:05:25,199
can assume<font color="#CCCCCC"> that X trust model</font><font color="#E5E5E5"> assumes</font>

123
00:05:21,870 --> 00:05:28,349
that the operating<font color="#E5E5E5"> system is compromised</font>

124
00:05:25,199 --> 00:05:30,539
<font color="#E5E5E5">so the operating system is evil we have</font>

125
00:05:28,349 --> 00:05:34,020
a virus for example<font color="#E5E5E5"> and tries</font><font color="#CCCCCC"> to get the</font>

126
00:05:30,539 --> 00:05:35,340
<font color="#E5E5E5">secrets out of the</font><font color="#CCCCCC"> end cave and we can't</font>

127
00:05:34,020 --> 00:05:37,409
do<font color="#E5E5E5"> that so there's no access from the</font>

128
00:05:35,340 --> 00:05:39,090
operating<font color="#CCCCCC"> system to the end</font><font color="#E5E5E5"> cave we are</font>

129
00:05:37,409 --> 00:05:41,610
protected against a certain<font color="#E5E5E5"> hardware</font>

130
00:05:39,090 --> 00:05:44,250
<font color="#E5E5E5">text such as sniffing on a dram pass or</font>

131
00:05:41,610 --> 00:05:47,490
doing cold boot attack<font color="#E5E5E5"> because the T</font><font color="#CCCCCC"> Ram</font>

132
00:05:44,250 --> 00:05:49,409
is encrypted<font color="#CCCCCC"> and we can't see anything</font>

133
00:05:47,490 --> 00:05:51,240
that's going on in<font color="#E5E5E5"> there</font>

134
00:05:49,409 --> 00:05:53,159
in fact the operating system sees

135
00:05:51,240 --> 00:05:55,469
everything that's executed in there just

136
00:05:53,159 --> 00:05:57,270
as one single<font color="#E5E5E5"> function call cannot</font>

137
00:05:55,469 --> 00:05:59,840
intercept anything there doesn't see

138
00:05:57,270 --> 00:06:03,270
anything<font color="#E5E5E5"> so quite a good protection</font>

139
00:05:59,840 --> 00:06:05,818
<font color="#E5E5E5">that's why people decided</font><font color="#CCCCCC"> okay let's use</font>

140
00:06:03,270 --> 00:06:07,830
<font color="#E5E5E5">that feature of our Intel CPU to</font>

141
00:06:05,819 --> 00:06:11,610
implement Bitcoin wallets in there

142
00:06:07,830 --> 00:06:13,830
for example<font color="#CCCCCC"> destice let's say</font><font color="#E5E5E5"> s</font><font color="#CCCCCC"> x NK for</font>

143
00:06:11,610 --> 00:06:15,930
blockchain applications we have<font color="#E5E5E5"> a bit</font>

144
00:06:13,830 --> 00:06:19,440
<font color="#CCCCCC">bake up</font><font color="#E5E5E5"> a Bitcoin wallet</font><font color="#CCCCCC"> that's</font>

145
00:06:15,930 --> 00:06:22,949
<font color="#E5E5E5">implemented in an intellect yes even</font><font color="#CCCCCC"> on</font>

146
00:06:19,440 --> 00:06:26,569
a payment<font color="#E5E5E5"> channel called</font><font color="#CCCCCC"> T chain that's</font>

147
00:06:22,949 --> 00:06:29,129
using s<font color="#CCCCCC"> X as a trusted third party and</font>

148
00:06:26,569 --> 00:06:30,420
we took one<font color="#CCCCCC"> of the snippets out of the</font>

149
00:06:29,129 --> 00:06:33,330
paper there

150
00:06:30,420 --> 00:06:34,980
and the<font color="#CCCCCC"> tea chain paper</font><font color="#E5E5E5"> the office</font>

151
00:06:33,330 --> 00:06:37,740
assume that the trusted execution

152
00:06:34,980 --> 00:06:39,660
<font color="#E5E5E5">environment guarantees to hold and do</font>

153
00:06:37,740 --> 00:06:41,640
not consider<font color="#E5E5E5"> that</font><font color="#CCCCCC"> they'll</font><font color="#E5E5E5"> hold</font><font color="#CCCCCC"> and they</font>

154
00:06:39,660 --> 00:06:43,500
do not<font color="#E5E5E5"> consider</font><font color="#CCCCCC"> site channels so side</font>

155
00:06:41,640 --> 00:06:48,090
channel attacks are out of<font color="#E5E5E5"> scope for</font>

156
00:06:43,500 --> 00:06:50,810
<font color="#E5E5E5">their trust model and we might see</font><font color="#CCCCCC"> that</font>

157
00:06:48,090 --> 00:06:53,869
<font color="#E5E5E5">this is not something you want to have</font>

158
00:06:50,810 --> 00:06:57,110
that<font color="#E5E5E5"> you consider site</font><font color="#CCCCCC"> ran out of scope</font>

159
00:06:53,870 --> 00:06:59,520
<font color="#E5E5E5">okay but we need something for</font>

160
00:06:57,110 --> 00:07:01,530
<font color="#E5E5E5">blockchain</font><font color="#CCCCCC"> uh bitcoins right yes so</font>

161
00:06:59,520 --> 00:07:03,990
before we see that side channels are<font color="#CCCCCC"> not</font>

162
00:07:01,530 --> 00:07:05,609
a good<font color="#CCCCCC"> idea to make them out of</font><font color="#E5E5E5"> scope we</font>

163
00:07:03,990 --> 00:07:08,190
<font color="#E5E5E5">need to think</font><font color="#CCCCCC"> what are we</font><font color="#E5E5E5"> going to put</font>

164
00:07:05,610 --> 00:07:09,360
<font color="#E5E5E5">into our</font><font color="#CCCCCC"> SP xing life so of course we</font>

165
00:07:08,190 --> 00:07:11,400
<font color="#E5E5E5">are going to put the grip to there</font>

166
00:07:09,360 --> 00:07:13,680
because<font color="#CCCCCC"> we have our private key which</font><font color="#E5E5E5"> we</font>

167
00:07:11,400 --> 00:07:15,900
want<font color="#E5E5E5"> to protect</font><font color="#CCCCCC"> and what we want to do</font>

168
00:07:13,680 --> 00:07:18,150
we want<font color="#CCCCCC"> to sign our transactions so</font><font color="#E5E5E5"> that</font>

169
00:07:15,900 --> 00:07:19,739
no<font color="#E5E5E5"> one else can take our</font><font color="#CCCCCC"> money and shall</font>

170
00:07:18,150 --> 00:07:22,200
spend<font color="#E5E5E5"> it that's why we</font><font color="#CCCCCC"> have those</font>

171
00:07:19,740 --> 00:07:24,600
signatures for instance like a nice a

172
00:07:22,200 --> 00:07:26,550
signature<font color="#E5E5E5"> and it works as following we</font>

173
00:07:24,600 --> 00:07:28,470
<font color="#E5E5E5">have a simple exponentiation with our</font>

174
00:07:26,550 --> 00:07:31,950
<font color="#E5E5E5">private key</font><font color="#CCCCCC"> which we want</font><font color="#E5E5E5"> to protect</font><font color="#CCCCCC"> and</font>

175
00:07:28,470 --> 00:07:35,280
<font color="#E5E5E5">if you want to implement that you use</font>

176
00:07:31,950 --> 00:07:37,710
<font color="#E5E5E5">square and</font><font color="#CCCCCC"> multiply</font><font color="#E5E5E5"> for instance and the</font>

177
00:07:35,280 --> 00:07:42,150
nice<font color="#CCCCCC"> thing is</font><font color="#E5E5E5"> that when they keep it is</font>

178
00:07:37,710 --> 00:07:44,430
one you use<font color="#E5E5E5"> square and multiply and if</font>

179
00:07:42,150 --> 00:07:47,130
it's a zero<font color="#CCCCCC"> you</font><font color="#E5E5E5"> just use square so the</font>

180
00:07:44,430 --> 00:07:50,340
implementation<font color="#CCCCCC"> is quite forward and you</font>

181
00:07:47,130 --> 00:07:52,370
do this for<font color="#CCCCCC"> every bit in</font><font color="#E5E5E5"> your key and as</font>

182
00:07:50,340 --> 00:07:54,929
you can<font color="#E5E5E5"> see the</font><font color="#CCCCCC"> multiplier operation</font>

183
00:07:52,370 --> 00:07:58,020
<font color="#E5E5E5">corresponds with the one in the key and</font>

184
00:07:54,930 --> 00:08:01,080
if by any<font color="#CCCCCC"> chance you</font><font color="#E5E5E5"> can possible</font>

185
00:07:58,020 --> 00:08:03,719
<font color="#E5E5E5">monitor whenever the multiply</font><font color="#CCCCCC"> operation</font>

186
00:08:01,080 --> 00:08:05,909
is<font color="#E5E5E5"> caught you can directly infer when a</font>

187
00:08:03,720 --> 00:08:08,370
<font color="#E5E5E5">one bit has been</font><font color="#CCCCCC"> set in the</font><font color="#E5E5E5"> key and</font>

188
00:08:05,910 --> 00:08:09,110
therefore<font color="#E5E5E5"> you can find</font><font color="#CCCCCC"> out what the key</font>

189
00:08:08,370 --> 00:08:13,710
is

190
00:08:09,110 --> 00:08:15,930
so you do this for<font color="#CCCCCC"> every</font><font color="#E5E5E5"> bit but with</font>

191
00:08:13,710 --> 00:08:19,169
bitcoins<font color="#CCCCCC"> we use</font><font color="#E5E5E5"> elliptic curves</font>

192
00:08:15,930 --> 00:08:23,100
<font color="#E5E5E5">so if we use ECDSA to sign our</font>

193
00:08:19,170 --> 00:08:25,710
transactions<font color="#E5E5E5"> and it's quite</font><font color="#CCCCCC"> similar but</font>

194
00:08:23,100 --> 00:08:28,980
we use point multiplication<font color="#E5E5E5"> instead of</font>

195
00:08:25,710 --> 00:08:31,950
the RSA exponentiation<font color="#CCCCCC"> and when we want</font>

196
00:08:28,980 --> 00:08:34,170
to<font color="#E5E5E5"> implement that we use mm net instead</font>

197
00:08:31,950 --> 00:08:36,330
of square and multiply<font color="#E5E5E5"> or the constant</font>

198
00:08:34,169 --> 00:08:38,490
time<font color="#CCCCCC"> montgomery letter</font><font color="#E5E5E5"> which is nice</font>

199
00:08:36,330 --> 00:08:42,430
because it<font color="#E5E5E5"> protects us against timing</font>

200
00:08:38,490 --> 00:08:45,370
<font color="#CCCCCC">citations</font><font color="#E5E5E5"> and also our side channels</font>

201
00:08:42,429 --> 00:08:48,579
but what you have<font color="#CCCCCC"> to keep in mind</font><font color="#E5E5E5"> that</font>

202
00:08:45,370 --> 00:08:52,420
both algorithms<font color="#CCCCCC"> use secret dependent</font>

203
00:08:48,580 --> 00:08:54,790
<font color="#E5E5E5">memory accesses so they access some</font>

204
00:08:52,420 --> 00:08:57,729
memory locations<font color="#E5E5E5"> dependent on the key</font>

205
00:08:54,790 --> 00:09:01,000
<font color="#E5E5E5">and why this is important we see in a</font>

206
00:08:57,730 --> 00:09:03,400
second because<font color="#E5E5E5"> for</font><font color="#CCCCCC"> instance</font><font color="#E5E5E5"> we have</font>

207
00:09:01,000 --> 00:09:06,970
<font color="#CCCCCC">so-called</font><font color="#E5E5E5"> cache attacks like the primal</font>

208
00:09:03,400 --> 00:09:09,640
<font color="#E5E5E5">probe attack and cache attacks exploits</font>

209
00:09:06,970 --> 00:09:12,190
<font color="#E5E5E5">timing differences depending on whether</font>

210
00:09:09,640 --> 00:09:14,140
data has been loaded into the cache<font color="#E5E5E5"> so</font>

211
00:09:12,190 --> 00:09:16,960
the timing access to this data is fast

212
00:09:14,140 --> 00:09:19,300
<font color="#CCCCCC">or we have a cache miss where the data</font>

213
00:09:16,960 --> 00:09:21,400
has<font color="#E5E5E5"> not</font><font color="#CCCCCC"> been in</font><font color="#E5E5E5"> the cache</font><font color="#CCCCCC"> so we have to</font>

214
00:09:19,300 --> 00:09:26,469
load<font color="#CCCCCC"> it from</font><font color="#E5E5E5"> the memory and the timing</font>

215
00:09:21,400 --> 00:09:29,829
access is slow so<font color="#CCCCCC"> priming probe</font><font color="#E5E5E5"> can be</font>

216
00:09:26,470 --> 00:09:32,440
used to monitor memory<font color="#E5E5E5"> accesses and this</font>

217
00:09:29,830 --> 00:09:34,870
corresponds to<font color="#E5E5E5"> what we want if we want</font>

218
00:09:32,440 --> 00:09:36,730
<font color="#E5E5E5">to attack like the signature creation</font>

219
00:09:34,870 --> 00:09:38,830
where we have those secret dependent

220
00:09:36,730 --> 00:09:42,150
memory<font color="#E5E5E5"> accesses so</font><font color="#CCCCCC"> maybe we can use</font>

221
00:09:38,830 --> 00:09:44,770
<font color="#E5E5E5">priming probe to find out the key</font><font color="#CCCCCC"> and</font>

222
00:09:42,150 --> 00:09:48,459
what is important that the prime

223
00:09:44,770 --> 00:09:51,579
<font color="#E5E5E5">improper tech only attacks</font><font color="#CCCCCC"> a part of the</font>

224
00:09:48,460 --> 00:09:53,380
CPU cache namely<font color="#E5E5E5"> a cache set which we</font>

225
00:09:51,580 --> 00:09:56,800
will see<font color="#CCCCCC"> in a second</font><font color="#E5E5E5"> where we illustrate</font>

226
00:09:53,380 --> 00:09:58,780
how the attack is working what's nice

227
00:09:56,800 --> 00:10:02,109
<font color="#E5E5E5">about the attack that it also works</font>

228
00:09:58,780 --> 00:10:04,270
across CPU cores<font color="#E5E5E5"> so we do not care if</font>

229
00:10:02,110 --> 00:10:06,190
<font color="#E5E5E5">one application is running on the first</font>

230
00:10:04,270 --> 00:10:08,140
<font color="#CCCCCC">core</font><font color="#E5E5E5"> and the target application</font><font color="#CCCCCC"> is</font>

231
00:10:06,190 --> 00:10:11,080
running on<font color="#E5E5E5"> the other core because we can</font>

232
00:10:08,140 --> 00:10:13,600
still<font color="#E5E5E5"> apply the attack because on Intel</font>

233
00:10:11,080 --> 00:10:18,580
<font color="#E5E5E5">the last level cache is shared among all</font>

234
00:10:13,600 --> 00:10:20,560
<font color="#E5E5E5">costs so</font><font color="#CCCCCC"> how does Prime</font><font color="#E5E5E5"> and Rope work</font><font color="#CCCCCC"> on</font>

235
00:10:18,580 --> 00:10:23,140
the left you see the<font color="#E5E5E5"> address space of</font>

236
00:10:20,560 --> 00:10:25,989
<font color="#CCCCCC">the attacker</font><font color="#E5E5E5"> on the right of the victim</font>

237
00:10:23,140 --> 00:10:27,550
<font color="#E5E5E5">and in the middle you see the cache so</font>

238
00:10:25,990 --> 00:10:30,190
the first step what the attacker is

239
00:10:27,550 --> 00:10:33,310
doing it just<font color="#E5E5E5"> loads addresses that he</font>

240
00:10:30,190 --> 00:10:37,270
owns into the cache<font color="#E5E5E5"> filling up one</font>

241
00:10:33,310 --> 00:10:39,510
entire cache set so every data that is

242
00:10:37,270 --> 00:10:43,020
in the cache set belongs to the attacker

243
00:10:39,510 --> 00:10:46,150
<font color="#CCCCCC">now the attacker</font><font color="#E5E5E5"> schedules the victim</font>

244
00:10:43,020 --> 00:10:48,640
the victim<font color="#CCCCCC"> maybe decides on depending</font>

245
00:10:46,150 --> 00:10:52,300
what he is doing<font color="#E5E5E5"> to load an address that</font>

246
00:10:48,640 --> 00:10:55,600
<font color="#CCCCCC">maps</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> the same cache set and therefore</font>

247
00:10:52,300 --> 00:10:56,079
loading data into the cache and evicting

248
00:10:55,600 --> 00:10:57,730
data

249
00:10:56,080 --> 00:11:00,700
out of the<font color="#CCCCCC"> cash that</font><font color="#E5E5E5"> belongs to the</font>

250
00:10:57,730 --> 00:11:03,310
attacker<font color="#CCCCCC"> and in</font><font color="#E5E5E5"> that case this happens</font>

251
00:11:00,700 --> 00:11:05,260
two times so the<font color="#CCCCCC"> cash that is not filled</font>

252
00:11:03,310 --> 00:11:07,719
<font color="#E5E5E5">anymore with data belonging to the</font>

253
00:11:05,260 --> 00:11:11,230
attacker<font color="#E5E5E5"> but also data belonging to the</font>

254
00:11:07,720 --> 00:11:13,780
victim<font color="#CCCCCC"> what you</font><font color="#E5E5E5"> take can now can do he</font>

255
00:11:11,230 --> 00:11:16,030
can broke<font color="#E5E5E5"> if his own dater</font><font color="#CCCCCC"> is still in</font>

256
00:11:13,780 --> 00:11:18,850
the<font color="#CCCCCC"> cash</font><font color="#E5E5E5"> but just measuring how long</font><font color="#CCCCCC"> it</font>

257
00:11:16,030 --> 00:11:21,430
takes<font color="#CCCCCC"> to access</font><font color="#E5E5E5"> those addresses and as</font>

258
00:11:18,850 --> 00:11:25,300
we can<font color="#E5E5E5"> see the first block is still in</font>

259
00:11:21,430 --> 00:11:27,939
the<font color="#E5E5E5"> cache so</font><font color="#CCCCCC"> the address loading is</font><font color="#E5E5E5"> very</font>

260
00:11:25,300 --> 00:11:30,160
fast<font color="#E5E5E5"> but for the second block it has</font>

261
00:11:27,940 --> 00:11:32,260
been evicted by the victim<font color="#E5E5E5"> so the memory</font>

262
00:11:30,160 --> 00:11:34,510
access<font color="#E5E5E5"> is slow and therefore we have a</font>

263
00:11:32,260 --> 00:11:36,580
time difference<font color="#E5E5E5"> where we can</font><font color="#CCCCCC"> deduce</font><font color="#E5E5E5"> if</font>

264
00:11:34,510 --> 00:11:41,410
something has been accessed and loaded

265
00:11:36,580 --> 00:11:44,620
into<font color="#E5E5E5"> the</font><font color="#CCCCCC"> cache by the victim so we can</font>

266
00:11:41,410 --> 00:11:47,949
<font color="#CCCCCC">combine this to attack</font><font color="#E5E5E5"> how does this</font>

267
00:11:44,620 --> 00:11:49,690
work<font color="#E5E5E5"> okay so we have this algorithm with</font>

268
00:11:47,950 --> 00:11:51,880
secret dependent memory<font color="#E5E5E5"> accesses and</font>

269
00:11:49,690 --> 00:11:55,150
then we have an attack that<font color="#E5E5E5"> detects</font>

270
00:11:51,880 --> 00:11:58,750
memory accesses<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we want to combine</font>

271
00:11:55,150 --> 00:12:02,020
<font color="#CCCCCC">itself</font><font color="#E5E5E5"> somehow we have our victim</font><font color="#CCCCCC"> that</font>

272
00:11:58,750 --> 00:12:05,320
has set before uses<font color="#CCCCCC"> SGX to protect the</font>

273
00:12:02,020 --> 00:12:07,240
private key and all the signature we of

274
00:12:05,320 --> 00:12:10,570
<font color="#E5E5E5">course need some</font><font color="#CCCCCC"> API to interact with</font>

275
00:12:07,240 --> 00:12:13,630
<font color="#E5E5E5">this secure</font><font color="#CCCCCC"> end cave</font><font color="#E5E5E5"> with our wallet API</font>

276
00:12:10,570 --> 00:12:16,390
there and on the other<font color="#CCCCCC"> side we have</font><font color="#E5E5E5"> the</font>

277
00:12:13,630 --> 00:12:19,660
attacker<font color="#E5E5E5"> and</font><font color="#CCCCCC"> the attacker wants to</font><font color="#E5E5E5"> also</font>

278
00:12:16,390 --> 00:12:21,850
leverage intellect<font color="#E5E5E5"> X to stay stealthy</font>

279
00:12:19,660 --> 00:12:24,790
<font color="#E5E5E5">because it's</font><font color="#CCCCCC"> also the attacker can use</font>

280
00:12:21,850 --> 00:12:27,460
<font color="#CCCCCC">sjx</font><font color="#E5E5E5"> to get protection</font><font color="#CCCCCC"> from anything</font><font color="#E5E5E5"> else</font>

281
00:12:24,790 --> 00:12:31,089
<font color="#E5E5E5">so that no antivirus can detect or stop</font>

282
00:12:27,460 --> 00:12:34,540
it that's why<font color="#E5E5E5"> we want to implement</font><font color="#CCCCCC"> our</font>

283
00:12:31,090 --> 00:12:37,810
key extractor within the<font color="#CCCCCC"> s3 xn cave and</font>

284
00:12:34,540 --> 00:12:39,939
<font color="#E5E5E5">just have a benign loader</font><font color="#CCCCCC"> that does</font>

285
00:12:37,810 --> 00:12:43,119
nothing<font color="#E5E5E5"> else then create the</font><font color="#CCCCCC"> endlave</font><font color="#E5E5E5"> and</font>

286
00:12:39,940 --> 00:12:46,830
call the<font color="#E5E5E5"> attack function which is inside</font>

287
00:12:43,120 --> 00:12:49,420
the<font color="#CCCCCC"> sjx in cave</font><font color="#E5E5E5"> it's only</font><font color="#CCCCCC"> Hardware side</font>

288
00:12:46,830 --> 00:12:51,670
<font color="#CCCCCC">they can run in different</font><font color="#E5E5E5"> course we</font>

289
00:12:49,420 --> 00:12:55,569
don't care about<font color="#E5E5E5"> that they have</font><font color="#CCCCCC"> their</font>

290
00:12:51,670 --> 00:12:58,150
own l1 l2 cache but they have their

291
00:12:55,570 --> 00:13:00,700
shared last level cache which makes it

292
00:12:58,150 --> 00:13:02,650
perfectly applicable to mount a<font color="#CCCCCC"> brahmin</font>

293
00:13:00,700 --> 00:13:03,180
<font color="#E5E5E5">probotector</font><font color="#CCCCCC"> because I have to share</font>

294
00:13:02,650 --> 00:13:04,829
cache

295
00:13:03,180 --> 00:13:06,870
and we can wear<font color="#E5E5E5"> this on top what you</font>

296
00:13:04,830 --> 00:13:09,540
<font color="#CCCCCC">told</font><font color="#E5E5E5"> us you really want to mount a crime</font>

297
00:13:06,870 --> 00:13:13,500
and<font color="#E5E5E5"> protect in</font><font color="#CCCCCC"> SJ</font><font color="#E5E5E5"> yes that's not that</font>

298
00:13:09,540 --> 00:13:15,180
<font color="#CCCCCC">easy</font><font color="#E5E5E5"> not at all because first you want</font>

299
00:13:13,500 --> 00:13:16,920
to<font color="#E5E5E5"> measure if something has been</font><font color="#CCCCCC"> loaded</font>

300
00:13:15,180 --> 00:13:19,859
into the cache<font color="#E5E5E5"> or</font><font color="#CCCCCC"> not so you</font><font color="#E5E5E5"> need a</font>

301
00:13:16,920 --> 00:13:22,650
<font color="#E5E5E5">really high precision timer like a DTSC</font>

302
00:13:19,860 --> 00:13:24,300
but inside<font color="#CCCCCC"> SJ x</font><font color="#E5E5E5"> you don't have the timer</font>

303
00:13:22,650 --> 00:13:27,240
so you<font color="#E5E5E5"> cannot measure with the high</font>

304
00:13:24,300 --> 00:13:29,040
<font color="#E5E5E5">precision in addition you do not have</font>

305
00:13:27,240 --> 00:13:31,860
any syscalls that you could use<font color="#E5E5E5"> for</font>

306
00:13:29,040 --> 00:13:33,870
instance<font color="#E5E5E5"> go to craft event interface on</font>

307
00:13:31,860 --> 00:13:35,940
<font color="#CCCCCC">linux where you could also get a high</font>

308
00:13:33,870 --> 00:13:38,730
<font color="#E5E5E5">precision timer you don't have</font><font color="#CCCCCC"> syscalls</font>

309
00:13:35,940 --> 00:13:41,550
at all<font color="#E5E5E5"> how do you want to do that also</font>

310
00:13:38,730 --> 00:13:43,260
<font color="#E5E5E5">you do</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> have any shared memory you do</font>

311
00:13:41,550 --> 00:13:45,630
not have any<font color="#CCCCCC"> information</font><font color="#E5E5E5"> about physical</font>

312
00:13:43,260 --> 00:13:47,189
<font color="#E5E5E5">addresses that you need to build up the</font>

313
00:13:45,630 --> 00:13:49,460
eviction set because it's not<font color="#E5E5E5"> that</font>

314
00:13:47,190 --> 00:13:52,290
straightforward to just fill the cache

315
00:13:49,460 --> 00:13:53,970
<font color="#E5E5E5">you also do not have any large pages</font>

316
00:13:52,290 --> 00:13:55,680
that you could use<font color="#E5E5E5"> to get some</font>

317
00:13:53,970 --> 00:13:59,100
information<font color="#CCCCCC"> about the physical addresses</font>

318
00:13:55,680 --> 00:14:01,050
<font color="#E5E5E5">you have nothing of that</font><font color="#CCCCCC"> okay okay</font><font color="#E5E5E5"> let's</font>

319
00:13:59,100 --> 00:14:03,060
start simple<font color="#E5E5E5"> okay if I don't</font><font color="#CCCCCC"> have access</font>

320
00:14:01,050 --> 00:14:05,849
<font color="#CCCCCC">to the to the high</font><font color="#E5E5E5"> precision</font><font color="#CCCCCC"> timer I</font>

321
00:14:03,060 --> 00:14:10,380
just build my own timer<font color="#E5E5E5"> I mean you want</font>

322
00:14:05,850 --> 00:14:12,510
to<font color="#CCCCCC"> build</font><font color="#E5E5E5"> the time I mean the timing</font>

323
00:14:10,380 --> 00:14:15,270
resolution must<font color="#E5E5E5"> be in the order of</font>

324
00:14:12,510 --> 00:14:16,830
cyclists so very<font color="#E5E5E5"> very precise</font><font color="#CCCCCC"> how do you</font>

325
00:14:15,270 --> 00:14:19,260
want to<font color="#E5E5E5"> do that I mean that simple</font>

326
00:14:16,830 --> 00:14:22,050
<font color="#CCCCCC">you're learnt programming right I just</font>

327
00:14:19,260 --> 00:14:25,260
<font color="#E5E5E5">start a fret and this fret continuously</font>

328
00:14:22,050 --> 00:14:26,910
<font color="#CCCCCC">increment securable variable and the</font>

329
00:14:25,260 --> 00:14:29,069
<font color="#CCCCCC">doses all the time does nothing else and</font>

330
00:14:26,910 --> 00:14:31,079
then I can use<font color="#CCCCCC"> this global variable</font><font color="#E5E5E5"> as</font>

331
00:14:29,070 --> 00:14:33,900
my<font color="#CCCCCC"> timestamp</font><font color="#E5E5E5"> because I don't need any</font>

332
00:14:31,080 --> 00:14:35,820
<font color="#CCCCCC">Volkov</font><font color="#E5E5E5"> it's for me it's</font><font color="#CCCCCC"> sufficient to</font>

333
00:14:33,900 --> 00:14:38,250
<font color="#E5E5E5">measure tiny</font><font color="#CCCCCC"> differences so it's totally</font>

334
00:14:35,820 --> 00:14:40,050
<font color="#CCCCCC">fine if does this doesn't correspond 20</font>

335
00:14:38,250 --> 00:14:42,870
seconds or<font color="#CCCCCC"> something I just</font><font color="#E5E5E5"> need</font>

336
00:14:40,050 --> 00:14:45,990
something that<font color="#E5E5E5"> counts monotonically okay</font>

337
00:14:42,870 --> 00:14:48,540
this should<font color="#E5E5E5"> work let me try that out so</font>

338
00:14:45,990 --> 00:14:52,020
for<font color="#CCCCCC"> our DT you see we have one increment</font>

339
00:14:48,540 --> 00:14:54,860
<font color="#E5E5E5">per cycle which is very nice so</font><font color="#CCCCCC"> I</font>

340
00:14:52,020 --> 00:14:57,689
implement<font color="#E5E5E5"> your idea with</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> loop and</font>

341
00:14:54,860 --> 00:15:00,209
<font color="#E5E5E5">actually that's</font><font color="#CCCCCC"> not that bad</font><font color="#E5E5E5"> it's</font>

342
00:14:57,690 --> 00:15:02,279
roughly<font color="#CCCCCC"> five cycles that it takes to</font>

343
00:15:00,209 --> 00:15:05,099
increment once<font color="#E5E5E5"> so maybe we can already</font>

344
00:15:02,279 --> 00:15:05,970
use them but<font color="#CCCCCC"> popula not even close to</font>

345
00:15:05,100 --> 00:15:08,459
<font color="#CCCCCC">RTC</font>

346
00:15:05,970 --> 00:15:12,030
but I<font color="#E5E5E5"> know assembly</font><font color="#CCCCCC"> I can I can do it</font>

347
00:15:08,459 --> 00:15:14,229
better<font color="#E5E5E5"> than than my compiler see it is a</font>

348
00:15:12,030 --> 00:15:18,319
lot better<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> not</font>

349
00:15:14,230 --> 00:15:21,680
okay but<font color="#E5E5E5"> okay I get it</font><font color="#CCCCCC"> but I have a</font>

350
00:15:18,320 --> 00:15:23,330
really<font color="#E5E5E5"> cool idea instead</font><font color="#CCCCCC"> of incrementing</font>

351
00:15:21,680 --> 00:15:25,430
this<font color="#E5E5E5"> memory</font><font color="#CCCCCC"> location which</font><font color="#E5E5E5"> has to fetch</font>

352
00:15:23,330 --> 00:15:27,260
it<font color="#E5E5E5"> from the</font><font color="#CCCCCC"> memory then increment it put</font>

353
00:15:25,430 --> 00:15:29,599
it<font color="#CCCCCC"> back to</font><font color="#E5E5E5"> the memory I do something</font>

354
00:15:27,260 --> 00:15:31,610
else<font color="#CCCCCC"> I use the register increment the</font>

355
00:15:29,600 --> 00:15:33,140
register all<font color="#CCCCCC"> the time and then just move</font>

356
00:15:31,610 --> 00:15:34,610
<font color="#CCCCCC">the register only to the memory so that</font>

357
00:15:33,140 --> 00:15:36,980
<font color="#E5E5E5">don't have to read from the memory and</font>

358
00:15:34,610 --> 00:15:40,400
this should<font color="#E5E5E5"> be faster look at that</font>

359
00:15:36,980 --> 00:15:42,920
whoa<font color="#CCCCCC"> it's even more precise than the</font>

360
00:15:40,400 --> 00:15:45,439
hacker provided<font color="#E5E5E5"> timeout by Intel so it's</font>

361
00:15:42,920 --> 00:15:48,319
really cool<font color="#E5E5E5"> we can we have solved that</font>

362
00:15:45,440 --> 00:15:50,660
problem<font color="#E5E5E5"> right yeah apparently</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> can use</font>

363
00:15:48,320 --> 00:15:52,670
that we have a timer but there's only

364
00:15:50,660 --> 00:15:55,520
one<font color="#E5E5E5"> out of many problems</font><font color="#CCCCCC"> that you have</font>

365
00:15:52,670 --> 00:15:57,589
<font color="#CCCCCC">to solve</font><font color="#E5E5E5"> because as I said the cache set</font>

366
00:15:55,520 --> 00:15:59,090
is determined by some bits of<font color="#E5E5E5"> the</font>

367
00:15:57,590 --> 00:16:01,640
physical<font color="#E5E5E5"> address</font><font color="#CCCCCC"> and you have no</font>

368
00:15:59,090 --> 00:16:03,140
information about<font color="#E5E5E5"> that so without any</font>

369
00:16:01,640 --> 00:16:05,710
knowledge you cannot<font color="#CCCCCC"> build an eviction</font>

370
00:16:03,140 --> 00:16:08,319
set<font color="#E5E5E5"> regardless if you have</font><font color="#CCCCCC"> a time or not</font>

371
00:16:05,710 --> 00:16:11,780
that that's<font color="#E5E5E5"> a good point</font><font color="#CCCCCC"> actually</font>

372
00:16:08,320 --> 00:16:14,570
<font color="#E5E5E5">but I remember something</font><font color="#CCCCCC"> and it was this</font>

373
00:16:11,780 --> 00:16:18,260
<font color="#E5E5E5">DRAM side channel attack I pass let all</font>

374
00:16:14,570 --> 00:16:21,020
in 2016 and they reverse engineered<font color="#E5E5E5"> how</font>

375
00:16:18,260 --> 00:16:23,900
memory actually maps to the physically

376
00:16:21,020 --> 00:16:26,329
DRAM the<font color="#CCCCCC"> theme in there and what they</font>

377
00:16:23,900 --> 00:16:28,430
found is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we have timing differences</font>

378
00:16:26,330 --> 00:16:30,920
depending on<font color="#CCCCCC"> varrick's exactly the</font>

379
00:16:28,430 --> 00:16:34,310
memory is in the DRAM and<font color="#E5E5E5"> now we have a</font>

380
00:16:30,920 --> 00:16:38,860
<font color="#CCCCCC">dimer because if you look at the DRAM in</font>

381
00:16:34,310 --> 00:16:42,109
detail we<font color="#CCCCCC"> have it's divided into borders</font>

382
00:16:38,860 --> 00:16:44,930
and every time we had a rope<font color="#CCCCCC"> border</font>

383
00:16:42,110 --> 00:16:48,110
you know exactly<font color="#E5E5E5"> that's aligned with our</font>

384
00:16:44,930 --> 00:16:50,660
pages<font color="#E5E5E5"> that the 18 least significant bits</font>

385
00:16:48,110 --> 00:16:53,240
are<font color="#CCCCCC"> 0 so</font><font color="#E5E5E5"> that's of the physical address</font>

386
00:16:50,660 --> 00:16:55,280
so we get at<font color="#E5E5E5"> least parts of the physical</font>

387
00:16:53,240 --> 00:16:57,080
address which are sufficient<font color="#CCCCCC"> because we</font>

388
00:16:55,280 --> 00:17:00,199
only<font color="#E5E5E5"> need 16 bits of the physical</font>

389
00:16:57,080 --> 00:17:03,050
address<font color="#E5E5E5"> so I'm sure</font><font color="#CCCCCC"> that if we can find</font>

390
00:17:00,200 --> 00:17:05,890
<font color="#E5E5E5">a</font><font color="#CCCCCC"> robot</font><font color="#E5E5E5"> that's fine and if you now look</font>

391
00:17:03,050 --> 00:17:08,690
<font color="#E5E5E5">at a physical page</font><font color="#CCCCCC"> a 4 kilobyte</font><font color="#E5E5E5"> page</font>

392
00:17:05,890 --> 00:17:11,060
<font color="#CCCCCC">that's really divided</font><font color="#E5E5E5"> into different</font>

393
00:17:08,690 --> 00:17:14,390
rows in the theorem so we have<font color="#E5E5E5"> two rows</font>

394
00:17:11,060 --> 00:17:17,149
on the right side<font color="#CCCCCC"> 10</font><font color="#E5E5E5"> different banks and</font>

395
00:17:14,390 --> 00:17:19,910
groups<font color="#CCCCCC"> and channels and that's</font><font color="#E5E5E5"> really</font>

396
00:17:17,150 --> 00:17:22,280
divided into so every part of a 4

397
00:17:19,910 --> 00:17:25,520
kilobyte page<font color="#E5E5E5"> maps to different rows in</font>

398
00:17:22,280 --> 00:17:26,809
the<font color="#E5E5E5"> T Ram and that depends on the on how</font>

399
00:17:25,520 --> 00:17:29,149
much theorem you have

400
00:17:26,809 --> 00:17:32,240
on the micro architecture of the CPU<font color="#E5E5E5"> but</font>

401
00:17:29,149 --> 00:17:35,408
we know it for most of<font color="#E5E5E5"> them so we can do</font>

402
00:17:32,240 --> 00:17:39,470
a nice trick<font color="#CCCCCC"> we choose</font><font color="#E5E5E5"> two</font><font color="#CCCCCC"> addresses and</font>

403
00:17:35,409 --> 00:17:42,049
we choose it with a certain distance<font color="#CCCCCC"> so</font>

404
00:17:39,470 --> 00:17:44,149
that they both<font color="#E5E5E5"> fall in different rows of</font>

405
00:17:42,049 --> 00:17:47,269
the DRAM we know the<font color="#E5E5E5"> rows as so that's</font>

406
00:17:44,149 --> 00:17:49,668
not too hard and<font color="#E5E5E5"> we</font><font color="#CCCCCC"> choose</font><font color="#E5E5E5"> a distance so</font>

407
00:17:47,269 --> 00:17:52,970
that<font color="#E5E5E5"> we go into a different row in the</font>

408
00:17:49,669 --> 00:17:56,539
same<font color="#CCCCCC"> Bank of the</font><font color="#E5E5E5"> DRAM that we always</font>

409
00:17:52,970 --> 00:17:58,429
<font color="#E5E5E5">have</font><font color="#CCCCCC"> that case if a new Row starts at</font>

410
00:17:56,539 --> 00:18:00,710
directly<font color="#CCCCCC"> to row Bora we get such a</font>

411
00:17:58,429 --> 00:18:02,629
<font color="#E5E5E5">conflict there and then we know from a</font>

412
00:18:00,710 --> 00:18:05,899
high timing that<font color="#E5E5E5"> we at the beginning of</font>

413
00:18:02,629 --> 00:18:07,850
a<font color="#E5E5E5"> new row</font><font color="#CCCCCC"> and with that we know 18</font><font color="#E5E5E5"> bits</font>

414
00:18:05,899 --> 00:18:10,189
of the<font color="#E5E5E5"> physical</font><font color="#CCCCCC"> address and we</font><font color="#E5E5E5"> can just</font>

415
00:18:07,850 --> 00:18:14,299
iterate over a memory<font color="#CCCCCC"> there match</font><font color="#E5E5E5"> the</font>

416
00:18:10,190 --> 00:18:16,369
timing<font color="#CCCCCC"> with our now good timer and get</font>

417
00:18:14,299 --> 00:18:19,309
timing differences<font color="#E5E5E5"> and high timings when</font>

418
00:18:16,369 --> 00:18:22,908
we add the raw water and I tried<font color="#E5E5E5"> that</font>

419
00:18:19,309 --> 00:18:24,860
and you can see it<font color="#CCCCCC"> actually works so we</font>

420
00:18:22,909 --> 00:18:27,379
have this<font color="#E5E5E5"> timing</font><font color="#CCCCCC"> Peaks here but new</font><font color="#E5E5E5"> row</font>

421
00:18:24,860 --> 00:18:31,039
<font color="#CCCCCC">starts and at these</font><font color="#E5E5E5"> others</font><font color="#CCCCCC"> I know to</font>

422
00:18:27,379 --> 00:18:32,959
<font color="#E5E5E5">visit the address impressive so now to</font>

423
00:18:31,039 --> 00:18:34,549
sum it up<font color="#CCCCCC"> you use the accounting</font>

424
00:18:32,960 --> 00:18:37,039
primitive to measure the<font color="#E5E5E5"> tearoom</font>

425
00:18:34,549 --> 00:18:40,309
accesses then through the<font color="#CCCCCC"> different side</font>

426
00:18:37,039 --> 00:18:42,379
channels you<font color="#E5E5E5"> determine to robot us with</font>

427
00:18:40,309 --> 00:18:44,450
the knowledge<font color="#E5E5E5"> that for robot us the</font>

428
00:18:42,379 --> 00:18:46,549
least significant 18 bits are set to

429
00:18:44,450 --> 00:18:49,399
<font color="#CCCCCC">zero you know that the map to the cache</font>

430
00:18:46,549 --> 00:18:51,559
<font color="#CCCCCC">sub 0 so you can use that to build</font><font color="#E5E5E5"> the</font>

431
00:18:49,399 --> 00:18:53,658
eviction set for the<font color="#E5E5E5"> primal proper</font><font color="#CCCCCC"> deck</font>

432
00:18:51,559 --> 00:18:55,820
<font color="#CCCCCC">that we explained</font><font color="#E5E5E5"> earlier and then you</font>

433
00:18:53,659 --> 00:18:57,820
can just mount the primary over<font color="#E5E5E5"> there on</font>

434
00:18:55,820 --> 00:19:00,408
<font color="#E5E5E5">the buffer containing the multiplier</font>

435
00:18:57,820 --> 00:19:03,049
<font color="#E5E5E5">monitoring whenever you keep it is set</font>

436
00:19:00,409 --> 00:19:05,749
to<font color="#E5E5E5"> 1 otherwise</font><font color="#CCCCCC"> to 0 and therefore you</font>

437
00:19:03,049 --> 00:19:06,740
can get the private key<font color="#E5E5E5"> exactly</font><font color="#CCCCCC"> see</font>

438
00:19:05,749 --> 00:19:08,869
really easy

439
00:19:06,740 --> 00:19:11,299
<font color="#E5E5E5">it sounds nice in theory but does this</font>

440
00:19:08,869 --> 00:19:16,309
really<font color="#CCCCCC"> work let's look</font><font color="#E5E5E5"> at the results so</font>

441
00:19:11,299 --> 00:19:20,059
we actually<font color="#E5E5E5"> did</font><font color="#CCCCCC"> that for 40 4096 bit RSA</font>

442
00:19:16,309 --> 00:19:21,918
private key how with an<font color="#CCCCCC"> embed TLS</font>

443
00:19:20,059 --> 00:19:24,110
running in<font color="#E5E5E5"> an</font><font color="#CCCCCC"> egg</font><font color="#E5E5E5"> cave and attacking</font>

444
00:19:21,919 --> 00:19:25,309
<font color="#E5E5E5">that from a different angle and see</font>

445
00:19:24,110 --> 00:19:28,459
there's the key

446
00:19:25,309 --> 00:19:30,408
yeah easy to see<font color="#CCCCCC"> right the noise</font><font color="#E5E5E5"> okay</font>

447
00:19:28,460 --> 00:19:32,840
<font color="#CCCCCC">coughs</font><font color="#E5E5E5"> where's the key</font>

448
00:19:30,409 --> 00:19:35,330
maybe you should add some some simple

449
00:19:32,840 --> 00:19:39,529
pre-processing<font color="#E5E5E5"> simple moving average</font>

450
00:19:35,330 --> 00:19:40,299
over<font color="#CCCCCC"> that gives us</font><font color="#E5E5E5"> already some spikes</font>

451
00:19:39,529 --> 00:19:42,909
there

452
00:19:40,299 --> 00:19:45,099
and if we look closely at them they

453
00:19:42,909 --> 00:19:48,159
<font color="#E5E5E5">really corresponds to the key bits of</font>

454
00:19:45,099 --> 00:19:51,399
the private key<font color="#CCCCCC"> so we can</font><font color="#E5E5E5"> see a spike</font>

455
00:19:48,159 --> 00:19:53,469
there<font color="#CCCCCC"> corresponds to a 1</font><font color="#E5E5E5"> and if</font><font color="#CCCCCC"> you</font>

456
00:19:51,399 --> 00:19:55,539
don't have a spike<font color="#CCCCCC"> then</font><font color="#E5E5E5"> this is</font><font color="#CCCCCC"> zero</font><font color="#E5E5E5"> the</font>

457
00:19:53,469 --> 00:19:57,669
zeros are<font color="#E5E5E5"> faster to calculate because we</font>

458
00:19:55,539 --> 00:20:00,309
don't have<font color="#E5E5E5"> to so many operations so they</font>

459
00:19:57,669 --> 00:20:03,519
are not<font color="#E5E5E5"> so they are bit smaller than the</font>

460
00:20:00,309 --> 00:20:05,918
ones but that's<font color="#E5E5E5"> just simple matching the</font>

461
00:20:03,519 --> 00:20:08,229
ones<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the zeros in there so we can</font>

462
00:20:05,919 --> 00:20:10,029
actually extract the<font color="#CCCCCC"> private key from</font>

463
00:20:08,229 --> 00:20:12,399
<font color="#E5E5E5">the cave you're using the prime and</font>

464
00:20:10,029 --> 00:20:15,129
<font color="#E5E5E5">prophetic right yes so you have many</font>

465
00:20:12,399 --> 00:20:17,498
<font color="#CCCCCC">cache hits many cache misses</font><font color="#E5E5E5"> we have a</font>

466
00:20:15,129 --> 00:20:19,089
performance counter so we can just

467
00:20:17,499 --> 00:20:23,349
monitor whenever you mount the attack

468
00:20:19,089 --> 00:20:25,719
<font color="#E5E5E5">and it's easily detectable yeah that's a</font>

469
00:20:23,349 --> 00:20:28,208
few<font color="#CCCCCC"> mount brahmin prophetic</font><font color="#E5E5E5"> by the way</font>

470
00:20:25,719 --> 00:20:30,339
<font color="#CCCCCC">why when I do</font><font color="#E5E5E5"> that in</font><font color="#CCCCCC"> these</font><font color="#E5E5E5"> checks and</font>

471
00:20:28,209 --> 00:20:32,919
<font color="#E5E5E5">gave</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> then I have</font><font color="#CCCCCC"> this additional</font>

472
00:20:30,339 --> 00:20:35,799
<font color="#E5E5E5">protection where the</font><font color="#CCCCCC"> S checks and give</font>

473
00:20:32,919 --> 00:20:38,559
protects me as an attacker<font color="#E5E5E5"> and does</font><font color="#CCCCCC"> not</font>

474
00:20:35,799 --> 00:20:40,749
<font color="#CCCCCC">allow me</font><font color="#E5E5E5"> it doesn't</font><font color="#CCCCCC"> allow anyone to see</font>

475
00:20:38,559 --> 00:20:42,609
the performance<font color="#CCCCCC"> counters</font><font color="#E5E5E5"> so if we look</font>

476
00:20:40,749 --> 00:20:44,169
at the performance<font color="#CCCCCC"> counters</font><font color="#E5E5E5"> showing me</font>

477
00:20:42,609 --> 00:20:45,369
the cache hits and misses and I do that

478
00:20:44,169 --> 00:20:48,879
inside<font color="#E5E5E5"> s</font><font color="#CCCCCC"> checks</font>

479
00:20:45,369 --> 00:20:51,458
<font color="#CCCCCC">I can't see anything and this small</font><font color="#E5E5E5"> bars</font>

480
00:20:48,879 --> 00:20:53,228
here<font color="#CCCCCC"> are just</font><font color="#E5E5E5"> the noise outside the</font><font color="#CCCCCC"> end</font>

481
00:20:51,459 --> 00:20:55,649
cave by calling the<font color="#E5E5E5"> functions there and</font>

482
00:20:53,229 --> 00:21:01,179
the load application the API<font color="#E5E5E5"> so</font>

483
00:20:55,649 --> 00:21:04,839
perfectly hidden<font color="#E5E5E5"> and we do anything</font>

484
00:21:01,179 --> 00:21:08,950
<font color="#E5E5E5">against of course so we can of course</font>

485
00:21:04,839 --> 00:21:10,570
<font color="#CCCCCC">fix that on a source level we can so we</font>

486
00:21:08,950 --> 00:21:13,389
have the<font color="#E5E5E5"> scatter deck that attack attack</font>

487
00:21:10,570 --> 00:21:16,989
our code and if we can<font color="#E5E5E5"> change the code</font>

488
00:21:13,389 --> 00:21:18,789
<font color="#E5E5E5">then we can also fix stuff there</font><font color="#CCCCCC"> so what</font>

489
00:21:16,989 --> 00:21:21,849
we should<font color="#E5E5E5"> do what we should have done</font>

490
00:21:18,789 --> 00:21:23,859
<font color="#CCCCCC">four years now sad thing is</font><font color="#E5E5E5"> doesn't</font>

491
00:21:21,849 --> 00:21:25,299
happen that often<font color="#CCCCCC"> is</font><font color="#E5E5E5"> that we have to use</font>

492
00:21:23,859 --> 00:21:28,059
<font color="#CCCCCC">side-channel</font><font color="#E5E5E5"> resistant crypto</font>

493
00:21:25,299 --> 00:21:30,700
implementations so we have such

494
00:21:28,059 --> 00:21:32,859
implementations we can do things<font color="#E5E5E5"> for</font><font color="#CCCCCC"> our</font>

495
00:21:30,700 --> 00:21:34,539
<font color="#CCCCCC">s</font><font color="#E5E5E5"> our RSA for example if exponent</font>

496
00:21:32,859 --> 00:21:37,839
<font color="#E5E5E5">blinding we have</font><font color="#CCCCCC"> pit sliced</font>

497
00:21:34,539 --> 00:21:39,629
implementations<font color="#E5E5E5"> that</font><font color="#CCCCCC"> do not have secret</font>

498
00:21:37,839 --> 00:21:42,908
<font color="#CCCCCC">dependent memory</font><font color="#E5E5E5"> accesses anymore and</font>

499
00:21:39,629 --> 00:21:45,579
then<font color="#E5E5E5"> I have no chance of attacking your</font>

500
00:21:42,909 --> 00:21:50,619
crypto implementation<font color="#E5E5E5"> inside the</font><font color="#CCCCCC"> SJ x NK</font>

501
00:21:45,579 --> 00:21:52,178
<font color="#E5E5E5">so we really should use that we could of</font>

502
00:21:50,619 --> 00:21:52,770
course<font color="#CCCCCC"> do everything</font><font color="#E5E5E5"> on the operating</font>

503
00:21:52,179 --> 00:21:55,800
system

504
00:21:52,770 --> 00:21:58,139
but before<font color="#E5E5E5"> that you</font><font color="#CCCCCC"> said that</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> do</font><font color="#E5E5E5"> not</font>

505
00:21:55,800 --> 00:22:00,480
<font color="#E5E5E5">trust the operating system that's of</font>

506
00:21:58,140 --> 00:22:02,700
course right so that would weaken our

507
00:22:00,480 --> 00:22:05,190
<font color="#CCCCCC">fred model because</font><font color="#E5E5E5"> sjx assumes that we</font>

508
00:22:02,700 --> 00:22:07,740
do not trust the operating system still

509
00:22:05,190 --> 00:22:10,830
we could add some<font color="#CCCCCC"> countermeasures to</font><font color="#E5E5E5"> the</font>

510
00:22:07,740 --> 00:22:13,380
operating<font color="#E5E5E5"> system like given them an API</font>

511
00:22:10,830 --> 00:22:15,960
to inspect the code<font color="#E5E5E5"> or enable certain</font>

512
00:22:13,380 --> 00:22:18,179
<font color="#E5E5E5">performance counters for last level</font>

513
00:22:15,960 --> 00:22:19,770
cache hits and misses<font color="#CCCCCC"> so the operating</font>

514
00:22:18,179 --> 00:22:21,540
<font color="#E5E5E5">system can at least detect that</font>

515
00:22:19,770 --> 00:22:24,750
something<font color="#CCCCCC"> is going on not exactly</font><font color="#E5E5E5"> what</font>

516
00:22:21,540 --> 00:22:26,670
but<font color="#E5E5E5"> that something is odd we can</font>

517
00:22:24,750 --> 00:22:30,150
implement<font color="#CCCCCC"> a flight implement</font><font color="#E5E5E5"> stuff like</font>

518
00:22:26,670 --> 00:22:32,400
<font color="#CCCCCC">enclaved coloring prevent cross nkf</font>

519
00:22:30,150 --> 00:22:34,530
attack which<font color="#E5E5E5"> means every</font><font color="#CCCCCC"> end cave that</font>

520
00:22:32,400 --> 00:22:36,720
<font color="#CCCCCC">is started</font><font color="#E5E5E5"> gets different part of the</font>

521
00:22:34,530 --> 00:22:38,490
cache with different cache sets and if

522
00:22:36,720 --> 00:22:40,920
you don't have the same cache<font color="#CCCCCC"> set</font><font color="#E5E5E5"> in the</font>

523
00:22:38,490 --> 00:22:43,500
last level<font color="#CCCCCC"> cache then we simply cannot</font>

524
00:22:40,920 --> 00:22:45,630
mount a<font color="#E5E5E5"> primate probe attack so that</font>

525
00:22:43,500 --> 00:22:49,590
prevents<font color="#E5E5E5"> any attack cross</font><font color="#CCCCCC"> an cave</font>

526
00:22:45,630 --> 00:22:53,370
<font color="#E5E5E5">meaning is an attacker cannot use a SJ x</font>

527
00:22:49,590 --> 00:22:56,010
<font color="#E5E5E5">NK to stealthily mount this brahmin</font>

528
00:22:53,370 --> 00:22:58,649
probe attack and<font color="#E5E5E5"> I can only do it</font><font color="#CCCCCC"> from</font>

529
00:22:56,010 --> 00:23:00,629
the outside<font color="#CCCCCC"> and</font><font color="#E5E5E5"> it's easier to detect so</font>

530
00:22:58,650 --> 00:23:02,130
we could do<font color="#E5E5E5"> that we could also add some</font>

531
00:23:00,630 --> 00:23:04,800
randomization as we do all the<font color="#E5E5E5"> time</font>

532
00:23:02,130 --> 00:23:07,020
everywhere to make<font color="#CCCCCC"> addicts harder</font><font color="#E5E5E5"> like a</font>

533
00:23:04,800 --> 00:23:10,159
heap randomization<font color="#E5E5E5"> then my multiplier</font>

534
00:23:07,020 --> 00:23:13,050
would be all the time<font color="#E5E5E5"> somewhere else</font>

535
00:23:10,160 --> 00:23:14,730
<font color="#CCCCCC">that doesn't solve anything</font>

536
00:23:13,050 --> 00:23:16,980
but it makes it harder for<font color="#E5E5E5"> an attacker</font>

537
00:23:14,730 --> 00:23:19,410
<font color="#E5E5E5">because it's not that predictable where</font>

538
00:23:16,980 --> 00:23:21,420
he has to attack and it makes attacks a

539
00:23:19,410 --> 00:23:22,860
lot harder<font color="#E5E5E5"> but sure that weakens the</font>

540
00:23:21,420 --> 00:23:26,309
<font color="#CCCCCC">rustman</font><font color="#E5E5E5"> the trust model</font>

541
00:23:22,860 --> 00:23:29,189
so finally we<font color="#CCCCCC"> should get rid</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> in</font>

542
00:23:26,309 --> 00:23:33,920
<font color="#E5E5E5">hardware so we</font><font color="#CCCCCC"> can't do that insulin has</font>

543
00:23:29,190 --> 00:23:36,809
to do<font color="#E5E5E5"> that</font><font color="#CCCCCC"> until could add things to</font><font color="#E5E5E5"> s3x</font>

544
00:23:33,920 --> 00:23:39,780
for example there's already this cache

545
00:23:36,809 --> 00:23:42,059
allocation technology that participates

546
00:23:39,780 --> 00:23:44,129
the cache so<font color="#E5E5E5"> that different applications</font>

547
00:23:42,059 --> 00:23:49,320
cannot influence each other in the cache

548
00:23:44,130 --> 00:23:51,950
and<font color="#E5E5E5"> that</font><font color="#CCCCCC"> could be combined with s</font><font color="#E5E5E5"> X so</font>

549
00:23:49,320 --> 00:23:54,990
that if we enter<font color="#CCCCCC"> n cave it automatically</font>

550
00:23:51,950 --> 00:23:58,230
partitions the cache and every<font color="#CCCCCC"> N cave</font>

551
00:23:54,990 --> 00:24:00,090
gets a<font color="#E5E5E5"> different part and no application</font>

552
00:23:58,230 --> 00:24:02,490
can access<font color="#CCCCCC"> this part of the last last</font>

553
00:24:00,090 --> 00:24:06,060
level cache because<font color="#CCCCCC"> only for the</font><font color="#E5E5E5"> N cave</font>

554
00:24:02,490 --> 00:24:08,460
and then the<font color="#CCCCCC"> anguish is complete</font>

555
00:24:06,060 --> 00:24:11,159
isolated in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> cash</font><font color="#E5E5E5"> and no one can</font>

556
00:24:08,460 --> 00:24:12,090
<font color="#E5E5E5">mount a prime and</font><font color="#CCCCCC"> Robotech on the cash</font>

557
00:24:11,160 --> 00:24:13,620
right now

558
00:24:12,090 --> 00:24:16,230
that's<font color="#CCCCCC"> only controllable</font><font color="#E5E5E5"> by the</font>

559
00:24:13,620 --> 00:24:20,550
<font color="#E5E5E5">operating</font><font color="#CCCCCC"> system but</font><font color="#E5E5E5"> that could be</font>

560
00:24:16,230 --> 00:24:22,950
combined with<font color="#CCCCCC"> sjx</font><font color="#E5E5E5"> in hardware we could</font>

561
00:24:20,550 --> 00:24:26,520
also have some form of<font color="#E5E5E5"> secure memory</font>

562
00:24:22,950 --> 00:24:28,200
element<font color="#E5E5E5"> like providing a small memory</font>

563
00:24:26,520 --> 00:24:31,350
<font color="#E5E5E5">element that's not yet it's never</font>

564
00:24:28,200 --> 00:24:33,030
<font color="#CCCCCC">cacheable just for certain operations</font>

565
00:24:31,350 --> 00:24:35,969
inside the in<font color="#E5E5E5"> cave</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> signing</font>

566
00:24:33,030 --> 00:24:38,360
operations<font color="#E5E5E5"> encryption operations so it's</font>

567
00:24:35,970 --> 00:24:42,990
not shared with<font color="#E5E5E5"> the insecure world and</font>

568
00:24:38,360 --> 00:24:45,060
then we cannot attack that because we

569
00:24:42,990 --> 00:24:47,460
don't have existed in that<font color="#E5E5E5"> must be must</font>

570
00:24:45,060 --> 00:24:50,220
be<font color="#E5E5E5"> of course also mutually exclusive to</font>

571
00:24:47,460 --> 00:24:53,250
<font color="#CCCCCC">one end cave otherwise</font><font color="#E5E5E5"> we again get this</font>

572
00:24:50,220 --> 00:24:56,250
<font color="#CCCCCC">gross cross</font><font color="#E5E5E5"> and Cave attacks so there</font>

573
00:24:53,250 --> 00:24:59,670
<font color="#E5E5E5">are some of the things we could do to</font>

574
00:24:56,250 --> 00:25:02,640
<font color="#E5E5E5">prevent such attacks to not lose our</font>

575
00:24:59,670 --> 00:25:05,280
Bitcoin private key true<font color="#CCCCCC"> so you</font><font color="#E5E5E5"> cannot</font>

576
00:25:02,640 --> 00:25:07,320
steal my bitcoins<font color="#E5E5E5"> anymore but we have</font>

577
00:25:05,280 --> 00:25:09,780
another nice<font color="#E5E5E5"> attack that we want to show</font>

578
00:25:07,320 --> 00:25:12,899
<font color="#E5E5E5">you where we exploit non</font><font color="#CCCCCC"> sidechain bus</font>

579
00:25:09,780 --> 00:25:16,710
but<font color="#CCCCCC"> we utilize sizegenetics to actually</font>

580
00:25:12,900 --> 00:25:18,960
exploit them so<font color="#E5E5E5"> imagine a scenario where</font>

581
00:25:16,710 --> 00:25:20,820
we now<font color="#CCCCCC"> have sidechain resistant crypto</font>

582
00:25:18,960 --> 00:25:22,530
<font color="#E5E5E5">so you cannot attack it anymore</font>

583
00:25:20,820 --> 00:25:24,870
<font color="#CCCCCC">you cannot steal</font><font color="#E5E5E5"> my bitcoins anymore</font>

584
00:25:22,530 --> 00:25:27,870
which is nice for<font color="#CCCCCC"> me</font><font color="#E5E5E5"> because they are</font>

585
00:25:24,870 --> 00:25:30,449
<font color="#E5E5E5">mine and we put everything inside the</font>

586
00:25:27,870 --> 00:25:32,550
English and as you said we do<font color="#E5E5E5"> not have</font>

587
00:25:30,450 --> 00:25:34,560
any source code<font color="#E5E5E5"> the binary is encrypted</font>

588
00:25:32,550 --> 00:25:37,320
<font color="#E5E5E5">from the</font><font color="#CCCCCC"> enclaves so we cannot inspect</font>

589
00:25:34,560 --> 00:25:40,020
it from the<font color="#E5E5E5"> outside so it's basically a</font>

590
00:25:37,320 --> 00:25:42,840
black box that has an<font color="#E5E5E5"> Mei that we can</font>

591
00:25:40,020 --> 00:25:45,360
talk<font color="#E5E5E5"> to and that's it and for instance</font>

592
00:25:42,840 --> 00:25:48,929
<font color="#E5E5E5">what you could do in</font><font color="#CCCCCC"> that scenario would</font>

593
00:25:45,360 --> 00:25:51,510
be<font color="#CCCCCC"> a simple</font><font color="#E5E5E5"> DRM video player because if</font>

594
00:25:48,930 --> 00:25:53,850
you buy a video<font color="#CCCCCC"> you should</font><font color="#E5E5E5"> only be able</font>

595
00:25:51,510 --> 00:25:56,129
to<font color="#CCCCCC"> watch it</font><font color="#E5E5E5"> like once or twice</font><font color="#CCCCCC"> or in a</font>

596
00:25:53,850 --> 00:25:59,010
<font color="#E5E5E5">certain time period because otherwise</font>

597
00:25:56,130 --> 00:26:00,720
you<font color="#CCCCCC"> have to</font><font color="#E5E5E5"> pay another time so I can</font>

598
00:25:59,010 --> 00:26:03,720
<font color="#E5E5E5">earn more money if you want</font><font color="#CCCCCC"> to watch my</font>

599
00:26:00,720 --> 00:26:06,720
video which is<font color="#CCCCCC"> the classical digital</font>

600
00:26:03,720 --> 00:26:09,240
rights management<font color="#E5E5E5"> scenario where sex is</font>

601
00:26:06,720 --> 00:26:12,090
also useful to<font color="#E5E5E5"> implement things like</font>

602
00:26:09,240 --> 00:26:14,400
<font color="#E5E5E5">that so we have</font><font color="#CCCCCC"> an encrypted video</font><font color="#E5E5E5"> file</font>

603
00:26:12,090 --> 00:26:15,540
with<font color="#E5E5E5"> a</font><font color="#CCCCCC"> signed header so you</font><font color="#E5E5E5"> can obtain</font>

604
00:26:14,400 --> 00:26:19,170
<font color="#E5E5E5">put the file</font>

605
00:26:15,540 --> 00:26:21,240
the header contains<font color="#CCCCCC"> ability</font><font color="#E5E5E5"> period</font>

606
00:26:19,170 --> 00:26:23,430
which states when you allow<font color="#CCCCCC"> to watch the</font>

607
00:26:21,240 --> 00:26:25,020
fine<font color="#E5E5E5"> so you can only watch it for one</font>

608
00:26:23,430 --> 00:26:28,110
<font color="#CCCCCC">week for instance after you</font><font color="#E5E5E5"> bought it</font>

609
00:26:25,020 --> 00:26:29,850
<font color="#CCCCCC">and the</font><font color="#E5E5E5"> video player checks whether the</font>

610
00:26:28,110 --> 00:26:32,189
<font color="#E5E5E5">current time is within this period</font>

611
00:26:29,850 --> 00:26:34,320
<font color="#E5E5E5">otherwise it would not allow you to play</font>

612
00:26:32,190 --> 00:26:36,630
it<font color="#E5E5E5"> and also if the signature is valid</font>

613
00:26:34,320 --> 00:26:38,639
because<font color="#E5E5E5"> if you have modified the file it</font>

614
00:26:36,630 --> 00:26:42,150
would also not<font color="#E5E5E5"> play the video so we have</font>

615
00:26:38,640 --> 00:26:44,340
a nice secure<font color="#CCCCCC"> AM video player it will</font>

616
00:26:42,150 --> 00:26:46,920
<font color="#E5E5E5">play the file</font><font color="#CCCCCC"> even using impulse</font>

617
00:26:44,340 --> 00:26:49,379
protected<font color="#CCCCCC"> audio video path</font><font color="#E5E5E5"> so you cannot</font>

618
00:26:46,920 --> 00:26:51,570
just record<font color="#CCCCCC"> the video</font><font color="#E5E5E5"> and then what</font>

619
00:26:49,380 --> 00:26:53,160
should again<font color="#E5E5E5"> because it just use the</font>

620
00:26:51,570 --> 00:26:56,370
screen recorder you cannot use that

621
00:26:53,160 --> 00:27:00,930
<font color="#E5E5E5">because of that technology yeah right I</font>

622
00:26:56,370 --> 00:27:03,689
really do not like<font color="#E5E5E5"> your M so yeah I want</font>

623
00:27:00,930 --> 00:27:05,820
I<font color="#CCCCCC"> know I stole your bitcoins and that</font>

624
00:27:03,690 --> 00:27:08,250
you thought you protected and I want to

625
00:27:05,820 --> 00:27:10,860
keep my stone<font color="#E5E5E5"> bitcoins so I don't want</font>

626
00:27:08,250 --> 00:27:13,200
to pay for<font color="#CCCCCC"> the same</font><font color="#E5E5E5"> movie</font><font color="#CCCCCC"> over and over</font>

627
00:27:10,860 --> 00:27:15,240
if I want to watch<font color="#CCCCCC"> it again</font><font color="#E5E5E5"> so I really</font>

628
00:27:13,200 --> 00:27:18,450
<font color="#E5E5E5">don't like</font><font color="#CCCCCC"> you're good you're in</font><font color="#E5E5E5"> DRM</font>

629
00:27:15,240 --> 00:27:21,600
play and scheme<font color="#E5E5E5"> so I want to break</font><font color="#CCCCCC"> that</font>

630
00:27:18,450 --> 00:27:24,480
<font color="#E5E5E5">yeah</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so this</font><font color="#CCCCCC"> time it won't be a</font>

631
00:27:21,600 --> 00:27:27,300
<font color="#CCCCCC">cash</font><font color="#E5E5E5"> it back on Krypton yes it's a</font>

632
00:27:24,480 --> 00:27:29,670
resistant crypt in there<font color="#E5E5E5"> yeah so let's</font>

633
00:27:27,300 --> 00:27:32,460
take a look<font color="#E5E5E5"> at our code we have a simple</font>

634
00:27:29,670 --> 00:27:34,800
<font color="#E5E5E5">function which gets DTM file as a</font>

635
00:27:32,460 --> 00:27:37,290
parameter<font color="#E5E5E5"> which is our protected video</font>

636
00:27:34,800 --> 00:27:39,720
and then the first thing<font color="#CCCCCC"> that we do we</font>

637
00:27:37,290 --> 00:27:42,030
<font color="#E5E5E5">check the signature so whenever you</font>

638
00:27:39,720 --> 00:27:43,800
tamper with the file<font color="#E5E5E5"> we detect that we</font>

639
00:27:42,030 --> 00:27:46,590
<font color="#CCCCCC">return</font><font color="#E5E5E5"> and you are not able to watch the</font>

640
00:27:43,800 --> 00:27:49,260
video<font color="#E5E5E5"> because this is what we want the</font>

641
00:27:46,590 --> 00:27:51,600
second check that we do is we check if

642
00:27:49,260 --> 00:27:54,870
<font color="#E5E5E5">the file has expired in</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> mean time so</font>

643
00:27:51,600 --> 00:27:57,449
we get<font color="#CCCCCC"> a secure timestamp</font><font color="#E5E5E5"> and when it's</font>

644
00:27:54,870 --> 00:27:59,310
one week after<font color="#E5E5E5"> you put it you're not</font>

645
00:27:57,450 --> 00:28:01,920
allowed<font color="#CCCCCC"> to watch it anymore</font><font color="#E5E5E5"> so we have a</font>

646
00:27:59,310 --> 00:28:05,070
second sanity check which<font color="#E5E5E5"> is working and</font>

647
00:28:01,920 --> 00:28:07,320
we detect that<font color="#E5E5E5"> and in the end</font><font color="#CCCCCC"> if</font>

648
00:28:05,070 --> 00:28:09,210
everything is fine<font color="#CCCCCC"> if you fought for it</font>

649
00:28:07,320 --> 00:28:12,300
<font color="#E5E5E5">if you</font><font color="#CCCCCC"> haven't temper the video file</font><font color="#E5E5E5"> you</font>

650
00:28:09,210 --> 00:28:14,030
<font color="#CCCCCC">can actually</font><font color="#E5E5E5"> watch</font><font color="#CCCCCC"> it so this is what we</font>

651
00:28:12,300 --> 00:28:17,700
wanted to<font color="#E5E5E5"> do in the first place</font>

652
00:28:14,030 --> 00:28:19,920
but although<font color="#E5E5E5"> the code looks correct</font>

653
00:28:17,700 --> 00:28:21,660
right no I haven't seen any<font color="#E5E5E5"> part in</font>

654
00:28:19,920 --> 00:28:26,310
<font color="#E5E5E5">there so that but there's a problem</font>

655
00:28:21,660 --> 00:28:28,890
there because<font color="#CCCCCC"> as Schenk's English can</font>

656
00:28:26,310 --> 00:28:31,770
access knowledge<font color="#E5E5E5"> life memory because</font>

657
00:28:28,890 --> 00:28:32,720
this is convenient<font color="#E5E5E5"> and</font><font color="#CCCCCC"> therefore</font>

658
00:28:31,770 --> 00:28:36,310
<font color="#E5E5E5">memories of</font>

659
00:28:32,720 --> 00:28:39,320
between the new life and the load of and

660
00:28:36,310 --> 00:28:41,030
this<font color="#E5E5E5"> can create race conditions do we</font>

661
00:28:39,320 --> 00:28:43,820
<font color="#E5E5E5">have any idea why this could be</font><font color="#CCCCCC"> a</font>

662
00:28:41,030 --> 00:28:45,950
problem<font color="#CCCCCC"> oh now I see</font><font color="#E5E5E5"> it that's something</font>

663
00:28:43,820 --> 00:28:48,080
there's a problem<font color="#E5E5E5"> with our code because</font>

664
00:28:45,950 --> 00:28:51,680
now<font color="#E5E5E5"> we also have my teeth reading right</font>

665
00:28:48,080 --> 00:28:54,740
you can run things in parallel<font color="#CCCCCC"> so if we</font>

666
00:28:51,680 --> 00:28:57,950
go back<font color="#E5E5E5"> at the code</font><font color="#CCCCCC"> I see we have</font><font color="#E5E5E5"> this</font>

667
00:28:54,740 --> 00:28:59,270
<font color="#E5E5E5">this year my which is</font><font color="#CCCCCC"> the Nash object--</font>

668
00:28:57,950 --> 00:29:02,000
because we don't want to<font color="#E5E5E5"> copy everything</font>

669
00:28:59,270 --> 00:29:04,850
in there we<font color="#E5E5E5"> just provide the point as we</font>

670
00:29:02,000 --> 00:29:08,300
see and it is<font color="#CCCCCC"> a shared memory object and</font>

671
00:29:04,850 --> 00:29:11,030
then we<font color="#CCCCCC"> access the shared memory</font><font color="#E5E5E5"> to</font>

672
00:29:08,300 --> 00:29:13,580
check the signature<font color="#E5E5E5"> and afterwards we</font>

673
00:29:11,030 --> 00:29:16,910
access again to<font color="#CCCCCC"> check</font><font color="#E5E5E5"> whether it's still</font>

674
00:29:13,580 --> 00:29:20,810
valid<font color="#CCCCCC"> but in the meantime I could in</font>

675
00:29:16,910 --> 00:29:22,700
parallel change the headers<font color="#E5E5E5"> and make it</font>

676
00:29:20,810 --> 00:29:24,770
<font color="#E5E5E5">about it so the signature check was okay</font>

677
00:29:22,700 --> 00:29:26,440
<font color="#E5E5E5">and then</font><font color="#CCCCCC"> I change</font><font color="#E5E5E5"> the headers and then</font>

678
00:29:24,770 --> 00:29:29,750
the<font color="#E5E5E5"> signature is never checked again and</font>

679
00:29:26,440 --> 00:29:31,970
the validity<font color="#E5E5E5"> period yeah miss then</font>

680
00:29:29,750 --> 00:29:33,770
fetched afterwards we have a time<font color="#E5E5E5"> of</font>

681
00:29:31,970 --> 00:29:35,120
<font color="#CCCCCC">checked a time of you</font><font color="#E5E5E5"> Spock we check</font>

682
00:29:33,770 --> 00:29:37,430
<font color="#E5E5E5">something before then and reuse it</font>

683
00:29:35,120 --> 00:29:40,100
afterwards<font color="#E5E5E5"> and we expect it not to</font>

684
00:29:37,430 --> 00:29:42,080
change in the<font color="#CCCCCC"> meantime so</font><font color="#E5E5E5"> after the</font>

685
00:29:40,100 --> 00:29:45,320
signature<font color="#E5E5E5"> check we can do</font><font color="#CCCCCC"> anything</font><font color="#E5E5E5"> with</font>

686
00:29:42,080 --> 00:29:48,320
the header<font color="#E5E5E5"> that we wanted</font><font color="#CCCCCC"> to do and this</font>

687
00:29:45,320 --> 00:29:50,389
allows<font color="#CCCCCC"> us to set an arbitrary</font><font color="#E5E5E5"> validity</font>

688
00:29:48,320 --> 00:29:52,840
period<font color="#E5E5E5"> because we can just change that</font>

689
00:29:50,390 --> 00:29:55,970
<font color="#CCCCCC">in</font><font color="#E5E5E5"> the header which</font><font color="#CCCCCC"> is only</font><font color="#E5E5E5"> signed and</font>

690
00:29:52,840 --> 00:29:58,820
because we access the memory twice we

691
00:29:55,970 --> 00:30:01,480
fetch<font color="#E5E5E5"> something twice from the memory we</font>

692
00:29:58,820 --> 00:30:04,939
also called<font color="#CCCCCC"> host box double fetch box</font>

693
00:30:01,480 --> 00:30:09,740
because<font color="#E5E5E5"> we fetch it twice the same data</font>

694
00:30:04,940 --> 00:30:12,020
from<font color="#E5E5E5"> the memory but we</font><font color="#CCCCCC"> cheated right</font><font color="#E5E5E5"> I</font>

695
00:30:09,740 --> 00:30:14,630
<font color="#E5E5E5">mean if we have the code it's really</font>

696
00:30:12,020 --> 00:30:17,240
easy<font color="#CCCCCC"> to see if we know this kind of Park</font>

697
00:30:14,630 --> 00:30:20,120
then we can see<font color="#E5E5E5"> that so that's this</font>

698
00:30:17,240 --> 00:30:21,470
<font color="#E5E5E5">really cheating</font><font color="#CCCCCC"> because</font><font color="#E5E5E5"> you said we</font>

699
00:30:20,120 --> 00:30:23,810
<font color="#E5E5E5">don't have the code we don't have the</font>

700
00:30:21,470 --> 00:30:27,290
<font color="#E5E5E5">binary so we cannot analyze it for such</font>

701
00:30:23,810 --> 00:30:29,810
facts so<font color="#E5E5E5"> that still like security by</font>

702
00:30:27,290 --> 00:30:32,000
obscurity<font color="#CCCCCC"> righteousness</font><font color="#E5E5E5"> kind of fine</font><font color="#CCCCCC"> I</font>

703
00:30:29,810 --> 00:30:34,389
get what you're saying<font color="#CCCCCC"> but you're not</font>

704
00:30:32,000 --> 00:30:37,190
entirely correct<font color="#E5E5E5"> because as we've seen</font>

705
00:30:34,390 --> 00:30:39,500
<font color="#E5E5E5">memory accesses are visible in the cache</font>

706
00:30:37,190 --> 00:30:41,390
<font color="#E5E5E5">so</font><font color="#CCCCCC"> also if you run</font><font color="#E5E5E5"> your code it will</font>

707
00:30:39,500 --> 00:30:43,940
access memory of course and those

708
00:30:41,390 --> 00:30:46,550
accesses can be visible<font color="#E5E5E5"> in the cache so</font>

709
00:30:43,940 --> 00:30:48,830
what we can<font color="#E5E5E5"> do we can again use</font><font color="#CCCCCC"> a cache</font>

710
00:30:46,550 --> 00:30:51,230
attack to observe those memory accesses

711
00:30:48,830 --> 00:30:55,429
<font color="#E5E5E5">and therefore the deck if a double fetch</font>

712
00:30:51,230 --> 00:30:57,200
<font color="#E5E5E5">back has occurred</font><font color="#CCCCCC"> a lot and this time we</font>

713
00:30:55,430 --> 00:30:59,300
even have shared memory<font color="#E5E5E5"> which makes</font>

714
00:30:57,200 --> 00:31:00,890
everything easier so<font color="#E5E5E5"> we do not have to</font>

715
00:30:59,300 --> 00:31:02,450
use<font color="#E5E5E5"> crime and probe</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> prime</font><font color="#CCCCCC"> and pro</font>

716
00:31:00,890 --> 00:31:04,550
protect where we have to build<font color="#E5E5E5"> our</font>

717
00:31:02,450 --> 00:31:07,670
<font color="#CCCCCC">eviction set and have to have so much</font>

718
00:31:04,550 --> 00:31:09,919
knowledge we can make use of<font color="#E5E5E5"> the shared</font>

719
00:31:07,670 --> 00:31:12,500
memory<font color="#CCCCCC"> and</font><font color="#E5E5E5"> what we can do is the</font><font color="#CCCCCC"> so</font>

720
00:31:09,920 --> 00:31:15,110
<font color="#CCCCCC">called flush and reload attack so we</font>

721
00:31:12,500 --> 00:31:18,800
<font color="#E5E5E5">constantly flush the address that</font><font color="#CCCCCC"> you</font>

722
00:31:15,110 --> 00:31:20,270
<font color="#CCCCCC">are changing from the cache using the CL</font>

723
00:31:18,800 --> 00:31:23,090
flash instruction which is<font color="#E5E5E5"> an</font>

724
00:31:20,270 --> 00:31:26,510
unprivileged<font color="#E5E5E5"> x86 instruction which just</font>

725
00:31:23,090 --> 00:31:28,250
removes one address from the cache<font color="#E5E5E5"> so it</font>

726
00:31:26,510 --> 00:31:31,760
won't be in<font color="#CCCCCC"> the</font><font color="#E5E5E5"> cache the next time</font>

727
00:31:28,250 --> 00:31:34,400
someone accessible then we just schedule

728
00:31:31,760 --> 00:31:36,410
the victim the victim may access the

729
00:31:34,400 --> 00:31:38,510
<font color="#CCCCCC">address</font><font color="#E5E5E5"> loading the data back into the</font>

730
00:31:36,410 --> 00:31:40,850
cache<font color="#E5E5E5"> or just do not access the data</font>

731
00:31:38,510 --> 00:31:43,220
then it won't<font color="#E5E5E5"> be</font><font color="#CCCCCC"> in the cache and the</font>

732
00:31:40,850 --> 00:31:46,159
next time<font color="#E5E5E5"> we measure the excess time</font><font color="#CCCCCC"> we</font>

733
00:31:43,220 --> 00:31:47,960
can indeed distinguish<font color="#E5E5E5"> if the data has</font>

734
00:31:46,160 --> 00:31:50,960
<font color="#CCCCCC">been loaded to the</font><font color="#E5E5E5"> cache or not and</font>

735
00:31:47,960 --> 00:31:53,930
therefore<font color="#E5E5E5"> if</font><font color="#CCCCCC"> the victim</font><font color="#E5E5E5"> also</font><font color="#CCCCCC"> has</font>

736
00:31:50,960 --> 00:31:54,350
<font color="#CCCCCC">accessed the</font><font color="#E5E5E5"> data so if the excess is</font>

737
00:31:53,930 --> 00:31:57,050
fast

738
00:31:54,350 --> 00:32:01,070
the victim has access<font color="#CCCCCC"> to data we can</font><font color="#E5E5E5"> see</font>

739
00:31:57,050 --> 00:32:02,780
this in our trace<font color="#CCCCCC"> and we know if it has</font>

740
00:32:01,070 --> 00:32:05,060
<font color="#E5E5E5">been accessed</font><font color="#CCCCCC"> a second time that</font><font color="#E5E5E5"> we have</font>

741
00:32:02,780 --> 00:32:07,550
a double fetch pocket<font color="#E5E5E5"> so if we look at a</font>

742
00:32:05,060 --> 00:32:11,629
<font color="#E5E5E5">simple plot from such an experiment it's</font>

743
00:32:07,550 --> 00:32:13,879
easily visible the point of time where

744
00:32:11,630 --> 00:32:17,320
the victim process<font color="#CCCCCC"> has access to Tator</font>

745
00:32:13,880 --> 00:32:20,210
<font color="#CCCCCC">in the</font><font color="#E5E5E5"> scenario of our video player</font>

746
00:32:17,320 --> 00:32:23,000
<font color="#E5E5E5">where the data</font><font color="#CCCCCC"> has been</font><font color="#E5E5E5"> accessed twice</font>

747
00:32:20,210 --> 00:32:25,880
we can also see<font color="#E5E5E5"> that in the trace so we</font>

748
00:32:23,000 --> 00:32:28,910
have those two distinct spikes<font color="#E5E5E5"> telling</font>

749
00:32:25,880 --> 00:32:30,950
us that the video player has access<font color="#CCCCCC"> the</font>

750
00:32:28,910 --> 00:32:33,590
data twice and that this might<font color="#CCCCCC"> be a</font>

751
00:32:30,950 --> 00:32:38,630
problem<font color="#E5E5E5"> so we</font><font color="#CCCCCC"> see the first</font><font color="#E5E5E5"> axis and the</font>

752
00:32:33,590 --> 00:32:41,270
second axis so<font color="#E5E5E5"> cached X also</font><font color="#CCCCCC"> allows us</font>

753
00:32:38,630 --> 00:32:44,030
<font color="#CCCCCC">to dynamically detect</font><font color="#E5E5E5"> double</font><font color="#CCCCCC"> fetch box</font>

754
00:32:41,270 --> 00:32:45,070
<font color="#E5E5E5">in black boxes so for instance in an</font>

755
00:32:44,030 --> 00:32:48,310
average<font color="#E5E5E5"> X in play</font>

756
00:32:45,070 --> 00:32:50,470
or in<font color="#CCCCCC"> trust zone</font><font color="#E5E5E5"> trust let what we</font><font color="#CCCCCC"> do</font>

757
00:32:48,310 --> 00:32:55,169
not have<font color="#E5E5E5"> the code where the binary is</font>

758
00:32:50,470 --> 00:32:58,660
encrypted<font color="#CCCCCC"> and where we just can use this</font>

759
00:32:55,170 --> 00:33:01,630
solution<font color="#E5E5E5"> to detect</font><font color="#CCCCCC"> a double</font><font color="#E5E5E5"> Fishbach so</font>

760
00:32:58,660 --> 00:33:04,180
how reliable is<font color="#CCCCCC"> that yeah the thing is</font>

761
00:33:01,630 --> 00:33:06,430
<font color="#E5E5E5">the further apart</font><font color="#CCCCCC"> those memory accesses</font>

762
00:33:04,180 --> 00:33:09,340
<font color="#E5E5E5">are the higher the probability of course</font>

763
00:33:06,430 --> 00:33:12,100
<font color="#E5E5E5">because our attack code also needs to</font>

764
00:33:09,340 --> 00:33:14,020
<font color="#CCCCCC">execute some instructions and the</font>

765
00:33:12,100 --> 00:33:17,110
minimum time that<font color="#E5E5E5"> we've measured is</font>

766
00:33:14,020 --> 00:33:19,420
around<font color="#E5E5E5"> 600 cycles that those memory</font>

767
00:33:17,110 --> 00:33:21,520
accesses<font color="#E5E5E5"> need to be a part so</font><font color="#CCCCCC"> that we</font>

768
00:33:19,420 --> 00:33:24,010
can detect it<font color="#E5E5E5"> using the flash and reload</font>

769
00:33:21,520 --> 00:33:26,350
<font color="#E5E5E5">side</font><font color="#CCCCCC"> channel so I'm not</font><font color="#E5E5E5"> I'm not good in</font>

770
00:33:24,010 --> 00:33:28,990
<font color="#E5E5E5">psychics as in units of can you give me</font>

771
00:33:26,350 --> 00:33:30,969
an<font color="#E5E5E5"> estimate how long is 600 cycle this</font>

772
00:33:28,990 --> 00:33:33,580
is only<font color="#E5E5E5"> a few memory accesses so that's</font>

773
00:33:30,970 --> 00:33:35,560
not<font color="#E5E5E5"> a lot okay so one memory</font><font color="#CCCCCC"> axis</font><font color="#E5E5E5"> is</font>

774
00:33:33,580 --> 00:33:39,159
like<font color="#CCCCCC"> 200 cycles so exactly so about</font>

775
00:33:35,560 --> 00:33:41,889
three<font color="#E5E5E5"> memory accesses and if the time</font>

776
00:33:39,160 --> 00:33:44,560
between<font color="#E5E5E5"> those exercises is more than</font>

777
00:33:41,890 --> 00:33:46,300
<font color="#E5E5E5">3000 cycles which is also not a</font><font color="#CCCCCC"> lot if</font>

778
00:33:44,560 --> 00:33:48,490
we<font color="#CCCCCC"> have seen the code where it does some</font>

779
00:33:46,300 --> 00:33:52,330
computation<font color="#CCCCCC"> we have a detection rate</font>

780
00:33:48,490 --> 00:33:54,220
that is very close<font color="#CCCCCC"> to 100% so we can say</font>

781
00:33:52,330 --> 00:33:58,929
<font color="#E5E5E5">for</font><font color="#CCCCCC"> sure</font><font color="#E5E5E5"> if there has been</font><font color="#CCCCCC"> a double</font>

782
00:33:54,220 --> 00:34:01,480
fetch or not and using this we<font color="#E5E5E5"> have an</font>

783
00:33:58,930 --> 00:34:02,500
automatic solution<font color="#E5E5E5"> to detect these</font>

784
00:34:01,480 --> 00:34:05,440
double fetch<font color="#CCCCCC"> facts</font>

785
00:34:02,500 --> 00:34:07,630
in many many scenarios<font color="#CCCCCC"> okay so that</font>

786
00:34:05,440 --> 00:34:09,220
<font color="#CCCCCC">means we have this nice we</font><font color="#E5E5E5"> can again use</font>

787
00:34:07,630 --> 00:34:12,100
<font color="#CCCCCC">a side channel we can</font><font color="#E5E5E5"> again</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> the</font>

788
00:34:09,219 --> 00:34:14,408
cache<font color="#E5E5E5"> so powerful microarchitecture</font>

789
00:34:12,100 --> 00:34:16,659
element to detect double<font color="#CCCCCC"> fetches</font><font color="#E5E5E5"> in any</font>

790
00:34:14,409 --> 00:34:19,419
black box anywhere<font color="#CCCCCC"> we don't have access</font>

791
00:34:16,659 --> 00:34:22,720
<font color="#E5E5E5">to the code or to the binary which is</font>

792
00:34:19,418 --> 00:34:25,540
nice<font color="#E5E5E5"> but I'm more the kind of guy that</font>

793
00:34:22,719 --> 00:34:28,540
tries to<font color="#E5E5E5"> destroy things</font><font color="#CCCCCC"> and to make them</font>

794
00:34:25,540 --> 00:34:31,120
<font color="#E5E5E5">more secure so I like the detecting</font>

795
00:34:28,540 --> 00:34:33,159
stuff<font color="#E5E5E5"> but I also want to exploit it can</font>

796
00:34:31,120 --> 00:34:34,899
we can<font color="#E5E5E5"> we exploit</font><font color="#CCCCCC"> that I mean</font><font color="#E5E5E5"> that I</font>

797
00:34:33,159 --> 00:34:37,149
want<font color="#E5E5E5"> to exploit</font><font color="#CCCCCC"> that not that</font><font color="#E5E5E5"> easy I</font>

798
00:34:34,899 --> 00:34:39,239
mean you need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> change the</font><font color="#CCCCCC"> value in</font>

799
00:34:37,149 --> 00:34:41,679
this small time window<font color="#E5E5E5"> that we have</font>

800
00:34:39,239 --> 00:34:44,888
otherwise you cannot exploit it<font color="#E5E5E5"> which</font>

801
00:34:41,679 --> 00:34:46,240
would break<font color="#E5E5E5"> my video player and when we</font>

802
00:34:44,889 --> 00:34:48,820
take a<font color="#CCCCCC"> look at state-of-the-art</font>

803
00:34:46,239 --> 00:34:51,129
<font color="#E5E5E5">exploitation what they do is they just</font>

804
00:34:48,820 --> 00:34:54,129
<font color="#E5E5E5">flip the value constantly all the time</font>

805
00:34:51,129 --> 00:34:55,870
<font color="#CCCCCC">and hope that they</font><font color="#E5E5E5"> hit the time frame</font><font color="#CCCCCC"> so</font>

806
00:34:54,129 --> 00:34:57,700
<font color="#CCCCCC">that they can really exploit that</font><font color="#E5E5E5"> and</font>

807
00:34:55,870 --> 00:34:59,680
this<font color="#CCCCCC"> has a very very low</font>

808
00:34:57,700 --> 00:35:02,410
ability so the chances that<font color="#E5E5E5"> you can</font>

809
00:34:59,680 --> 00:35:05,890
exploit it are not<font color="#CCCCCC"> were</font><font color="#E5E5E5"> behind but I</font>

810
00:35:02,410 --> 00:35:10,509
have an<font color="#E5E5E5"> idea we just need a trigger we</font>

811
00:35:05,890 --> 00:35:13,839
just need some way to to detect when the

812
00:35:10,510 --> 00:35:16,270
<font color="#E5E5E5">first axis was as a trigger right now</font>

813
00:35:13,839 --> 00:35:18,279
<font color="#CCCCCC">this</font><font color="#E5E5E5"> could help and you said detection</font>

814
00:35:16,270 --> 00:35:20,470
is easy<font color="#E5E5E5"> because we can see it in the</font>

815
00:35:18,280 --> 00:35:23,680
<font color="#E5E5E5">cache so why not use the cache</font>

816
00:35:20,470 --> 00:35:25,328
side-channel<font color="#CCCCCC"> as a trigger</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> we can</font>

817
00:35:23,680 --> 00:35:28,000
already detect all<font color="#CCCCCC"> the memory accesses</font>

818
00:35:25,329 --> 00:35:32,050
in the cache and if we know when the

819
00:35:28,000 --> 00:35:35,050
<font color="#E5E5E5">first axis was then we also know when we</font>

820
00:35:32,050 --> 00:35:36,940
have to change<font color="#E5E5E5"> our values right</font><font color="#CCCCCC"> we</font>

821
00:35:35,050 --> 00:35:39,099
detect the first<font color="#E5E5E5"> axis we do not even</font>

822
00:35:36,940 --> 00:35:40,990
care about the second axis so it's even

823
00:35:39,099 --> 00:35:43,329
better than<font color="#CCCCCC"> the detection</font><font color="#E5E5E5"> we really</font>

824
00:35:40,990 --> 00:35:45,368
don't<font color="#E5E5E5"> care how far the two accesses are</font>

825
00:35:43,329 --> 00:35:48,099
part we only need to detect<font color="#E5E5E5"> the first</font>

826
00:35:45,369 --> 00:35:50,200
<font color="#E5E5E5">one and if we see the</font><font color="#CCCCCC"> first</font><font color="#E5E5E5"> one we</font>

827
00:35:48,099 --> 00:35:51,970
simply change the value afterwards to

828
00:35:50,200 --> 00:35:54,160
the<font color="#E5E5E5"> value we want to have because after</font>

829
00:35:51,970 --> 00:35:56,919
first<font color="#CCCCCC"> access we know the sanity check is</font>

830
00:35:54,160 --> 00:35:59,190
done and we<font color="#CCCCCC"> can change our value to</font>

831
00:35:56,920 --> 00:36:02,920
<font color="#CCCCCC">something we want to have in there</font><font color="#E5E5E5"> and</font>

832
00:35:59,190 --> 00:36:04,690
if<font color="#E5E5E5"> we look at that in the trace so we</font>

833
00:36:02,920 --> 00:36:06,760
see the detection and we have<font color="#CCCCCC"> the first</font>

834
00:36:04,690 --> 00:36:09,160
<font color="#E5E5E5">access and then we have this time window</font>

835
00:36:06,760 --> 00:36:10,630
<font color="#CCCCCC">onto the until the</font><font color="#E5E5E5"> second access but we</font>

836
00:36:09,160 --> 00:36:13,598
perfectly get a trigger signal on the

837
00:36:10,630 --> 00:36:16,510
first access so<font color="#CCCCCC"> we just modify</font><font color="#E5E5E5"> the value</font>

838
00:36:13,599 --> 00:36:18,940
in there<font color="#E5E5E5"> gives us enough time to do</font><font color="#CCCCCC"> that</font>

839
00:36:16,510 --> 00:36:21,880
<font color="#CCCCCC">and</font><font color="#E5E5E5"> set</font><font color="#CCCCCC"> it to</font><font color="#E5E5E5"> any value we want to have</font>

840
00:36:18,940 --> 00:36:25,510
any validity period and then on the

841
00:36:21,880 --> 00:36:28,690
second<font color="#E5E5E5"> access of your</font><font color="#CCCCCC"> erm player it</font>

842
00:36:25,510 --> 00:36:33,160
already works with the wrong value the

843
00:36:28,690 --> 00:36:36,160
value<font color="#CCCCCC"> I have</font><font color="#E5E5E5"> provided so so this again</font>

844
00:36:33,160 --> 00:36:39,490
sounds very nice in<font color="#E5E5E5"> theory I actually</font>

845
00:36:36,160 --> 00:36:42,149
brought the<font color="#E5E5E5"> video player with me so can</font>

846
00:36:39,490 --> 00:36:50,589
<font color="#CCCCCC">you really</font><font color="#E5E5E5"> exploit that I hope so</font>

847
00:36:42,150 --> 00:36:53,290
so let's look<font color="#E5E5E5"> at that so I have</font><font color="#CCCCCC"> the</font>

848
00:36:50,589 --> 00:36:55,779
video<font color="#E5E5E5"> player code in here</font><font color="#CCCCCC"> and I</font><font color="#E5E5E5"> already</font>

849
00:36:53,290 --> 00:36:58,420
prepared the attack code because I don't

850
00:36:55,780 --> 00:37:01,329
have<font color="#E5E5E5"> that much time and I</font><font color="#CCCCCC"> just commented</font>

851
00:36:58,420 --> 00:37:04,240
in and what we see here<font color="#E5E5E5"> is that we have</font>

852
00:37:01,329 --> 00:37:05,829
this ankov call to play the file<font color="#E5E5E5"> and we</font>

853
00:37:04,240 --> 00:37:07,770
want to attack this header field<font color="#E5E5E5"> this</font>

854
00:37:05,829 --> 00:37:10,740
<font color="#E5E5E5">bill well it too</font>

855
00:37:07,770 --> 00:37:13,350
and we just<font color="#E5E5E5"> want to set it to a</font>

856
00:37:10,740 --> 00:37:15,720
different well it's to our period

857
00:37:13,350 --> 00:37:17,700
afterwards<font color="#CCCCCC"> so first you need to show yep</font>

858
00:37:15,720 --> 00:37:19,709
let me show if the players working<font color="#E5E5E5"> as</font>

859
00:37:17,700 --> 00:37:22,230
expected<font color="#CCCCCC"> when</font><font color="#E5E5E5"> you're not running yet yes</font>

860
00:37:19,710 --> 00:37:31,920
first<font color="#E5E5E5"> let me show that the player does</font>

861
00:37:22,230 --> 00:37:35,270
something so let's first start<font color="#E5E5E5"> the</font>

862
00:37:31,920 --> 00:37:35,270
player with something

863
00:37:35,360 --> 00:37:46,260
okay start the<font color="#E5E5E5"> player with some demo</font>

864
00:37:41,940 --> 00:37:48,480
video<font color="#E5E5E5"> and it says</font><font color="#CCCCCC"> okay I can watch this</font>

865
00:37:46,260 --> 00:37:51,450
on<font color="#E5E5E5"> till 2020</font><font color="#CCCCCC"> so you've bought it I</font>

866
00:37:48,480 --> 00:37:54,990
bought it<font color="#E5E5E5"> yeah and oh</font><font color="#CCCCCC"> no it's something</font>

867
00:37:51,450 --> 00:37:56,879
<font color="#E5E5E5">wrong screen and I can</font><font color="#CCCCCC"> actually see some</font>

868
00:37:54,990 --> 00:37:59,368
video playing<font color="#E5E5E5"> okay that's fine</font>

869
00:37:56,880 --> 00:38:01,530
so the<font color="#CCCCCC"> play is actually working and then</font>

870
00:37:59,369 --> 00:38:06,270
I have one video<font color="#CCCCCC"> a</font><font color="#E5E5E5"> part</font><font color="#CCCCCC"> that I wanted</font><font color="#E5E5E5"> to</font>

871
00:38:01,530 --> 00:38:09,780
<font color="#CCCCCC">watch that's movie</font><font color="#E5E5E5"> and so no</font><font color="#CCCCCC"> one find</font>

872
00:38:06,270 --> 00:38:13,410
has expired<font color="#CCCCCC"> oh</font><font color="#E5E5E5"> she saw I didn't pay for</font>

873
00:38:09,780 --> 00:38:19,619
it<font color="#E5E5E5"> okay but as I still want to watch it</font>

874
00:38:13,410 --> 00:38:22,470
so<font color="#E5E5E5"> I comment in</font><font color="#CCCCCC"> my tech</font><font color="#E5E5E5"> code so until</font>

875
00:38:19,619 --> 00:38:24,990
when should we make<font color="#E5E5E5"> it playable any</font>

876
00:38:22,470 --> 00:38:31,618
favorite year<font color="#E5E5E5"> in the audience that's in</font>

877
00:38:24,990 --> 00:38:36,060
the<font color="#E5E5E5"> future you can say anything okay</font>

878
00:38:31,619 --> 00:38:38,820
figure out I hope to see<font color="#E5E5E5"> library accept</font>

879
00:38:36,060 --> 00:38:40,410
<font color="#E5E5E5">state that's fine future</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> then</font>

880
00:38:38,820 --> 00:38:43,160
should<font color="#CCCCCC"> be ready done today yes field I</font>

881
00:38:40,410 --> 00:38:46,319
<font color="#E5E5E5">wasn't then what we simply do I start my</font>

882
00:38:43,160 --> 00:38:48,629
attack function that creates another

883
00:38:46,320 --> 00:38:50,430
<font color="#E5E5E5">threat does the multi-threading part in</font>

884
00:38:48,630 --> 00:38:53,940
<font color="#E5E5E5">this</font><font color="#CCCCCC"> red I have to flash it reload that</font>

885
00:38:50,430 --> 00:38:55,859
<font color="#CCCCCC">I access the trigger</font><font color="#E5E5E5"> and if it finds the</font>

886
00:38:53,940 --> 00:39:02,040
first<font color="#E5E5E5"> axis then it changes</font><font color="#CCCCCC"> divided you</font>

887
00:38:55,859 --> 00:39:03,660
to the one that we want to<font color="#CCCCCC"> have</font><font color="#E5E5E5"> so let's</font>

888
00:39:02,040 --> 00:39:05,100
rebuild<font color="#CCCCCC"> layer we don't change anything</font>

889
00:39:03,660 --> 00:39:08,040
in the<font color="#CCCCCC"> N key if we</font><font color="#E5E5E5"> don't have access</font><font color="#CCCCCC"> to</font>

890
00:39:05,100 --> 00:39:12,950
<font color="#E5E5E5">ink if just the functions</font><font color="#CCCCCC"> outside</font><font color="#E5E5E5"> and</font>

891
00:39:08,040 --> 00:39:12,950
then I want<font color="#E5E5E5"> to play the movie</font>

892
00:39:14,860 --> 00:39:28,990
on screen and it<font color="#E5E5E5"> says well it until</font>

893
00:39:25,720 --> 00:39:34,200
January<font color="#E5E5E5"> 3000 somewhere</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> long time to</font>

894
00:39:28,990 --> 00:39:37,839
watch<font color="#CCCCCC"> this movie</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> can say play and</font>

895
00:39:34,200 --> 00:39:40,450
we can actually watch<font color="#E5E5E5"> this movie and we</font>

896
00:39:37,840 --> 00:39:42,850
have defeated<font color="#E5E5E5"> this DRM protection that</font>

897
00:39:40,450 --> 00:39:45,819
you<font color="#CCCCCC"> have implemented there so this</font>

898
00:39:42,850 --> 00:39:48,540
actually works<font color="#E5E5E5"> really</font><font color="#CCCCCC"> reliable with the</font>

899
00:39:45,820 --> 00:39:50,950
double fetch<font color="#E5E5E5"> detection and then</font>

900
00:39:48,540 --> 00:39:53,980
exploitation here and we have this video

901
00:39:50,950 --> 00:39:59,850
<font color="#E5E5E5">running which we should not be</font><font color="#CCCCCC"> able to</font>

902
00:39:53,980 --> 00:40:03,550
you so it does work<font color="#CCCCCC"> what we proposed</font>

903
00:39:59,850 --> 00:40:05,529
perfect<font color="#E5E5E5"> true so how can we prevent that</font>

904
00:40:03,550 --> 00:40:09,220
<font color="#E5E5E5">because we do not want to end with my</font>

905
00:40:05,530 --> 00:40:13,000
broken video<font color="#E5E5E5"> plays</font><font color="#CCCCCC"> so double fetches</font>

906
00:40:09,220 --> 00:40:14,649
itself<font color="#E5E5E5"> are not bad because sometimes</font>

907
00:40:13,000 --> 00:40:16,570
they are necessary sometimes<font color="#CCCCCC"> you need to</font>

908
00:40:14,650 --> 00:40:18,580
<font color="#CCCCCC">code it in a way that you have double</font>

909
00:40:16,570 --> 00:40:21,580
fetches<font color="#CCCCCC"> the only problem that you have</font>

910
00:40:18,580 --> 00:40:23,680
is when you change the value and this

911
00:40:21,580 --> 00:40:25,120
leads to<font color="#CCCCCC"> an actually exploit</font><font color="#E5E5E5"> where you</font>

912
00:40:23,680 --> 00:40:27,580
can do something<font color="#CCCCCC"> like with the video</font>

913
00:40:25,120 --> 00:40:29,950
<font color="#CCCCCC">player</font><font color="#E5E5E5"> where you're then</font><font color="#CCCCCC"> allowed to</font>

914
00:40:27,580 --> 00:40:32,200
<font color="#E5E5E5">watch the video even</font><font color="#CCCCCC"> if your would have</font>

915
00:40:29,950 --> 00:40:35,259
not<font color="#E5E5E5"> been otherwise</font><font color="#CCCCCC"> so we have a problem</font>

916
00:40:32,200 --> 00:40:38,020
<font color="#E5E5E5">there</font><font color="#CCCCCC"> and nowadays we even have</font>

917
00:40:35,260 --> 00:40:40,660
frameworks that allow us to exploit such

918
00:40:38,020 --> 00:40:43,420
<font color="#E5E5E5">race conditions in a very very good way</font>

919
00:40:40,660 --> 00:40:46,870
and with the cash trigger that we've

920
00:40:43,420 --> 00:40:48,760
just<font color="#E5E5E5"> seen they also get very reliable so</font>

921
00:40:46,870 --> 00:40:52,750
we as we have<font color="#CCCCCC"> seen in the demo</font><font color="#E5E5E5"> it worked</font>

922
00:40:48,760 --> 00:40:56,910
right<font color="#E5E5E5"> away so but I have an idea how</font><font color="#CCCCCC"> we</font>

923
00:40:52,750 --> 00:40:59,470
could<font color="#E5E5E5"> fix that</font><font color="#CCCCCC"> okay so the problem was</font><font color="#E5E5E5"> I</font>

924
00:40:56,910 --> 00:41:01,960
mean we have this time in between<font color="#E5E5E5"> to</font>

925
00:40:59,470 --> 00:41:05,290
change the value but we<font color="#CCCCCC"> can't just</font>

926
00:41:01,960 --> 00:41:07,060
ensure<font color="#CCCCCC"> that both the defects we</font><font color="#E5E5E5"> leave</font>

927
00:41:05,290 --> 00:41:09,520
<font color="#CCCCCC">the doubles matches in there which has</font>

928
00:41:07,060 --> 00:41:12,490
to<font color="#E5E5E5"> ensure that both accesses are atomic</font>

929
00:41:09,520 --> 00:41:15,009
so they appear as one<font color="#E5E5E5"> I mean you have so</font>

930
00:41:12,490 --> 00:41:17,799
many instructions in between yeah I know

931
00:41:15,010 --> 00:41:20,110
<font color="#E5E5E5">that'll just be</font><font color="#CCCCCC"> maybe that doesn't</font><font color="#E5E5E5"> work</font>

932
00:41:17,800 --> 00:41:21,910
on the CPU CPU architectures we have

933
00:41:20,110 --> 00:41:23,680
right now<font color="#E5E5E5"> because yeah of course we</font><font color="#CCCCCC"> can</font>

934
00:41:21,910 --> 00:41:26,290
<font color="#CCCCCC">only do</font><font color="#E5E5E5"> that some certain things in</font>

935
00:41:23,680 --> 00:41:26,990
parallel<font color="#E5E5E5"> we can't make them exactly at</font>

936
00:41:26,290 --> 00:41:30,610
the same

937
00:41:26,990 --> 00:41:34,640
time<font color="#E5E5E5"> so they cannot be really atomic but</font>

938
00:41:30,610 --> 00:41:37,280
maybe it's enough<font color="#E5E5E5"> if they look atomic so</font>

939
00:41:34,640 --> 00:41:38,779
from an attackers perspective<font color="#CCCCCC"> so they</font>

940
00:41:37,280 --> 00:41:41,330
are not<font color="#E5E5E5"> atomic of course not so we have</font>

941
00:41:38,780 --> 00:41:44,119
to fetch one once<font color="#E5E5E5"> do something</font><font color="#CCCCCC"> fetch</font>

942
00:41:41,330 --> 00:41:45,500
again<font color="#E5E5E5"> so that cannot be one operation we</font>

943
00:41:44,119 --> 00:41:48,140
just can't do<font color="#E5E5E5"> that in our</font><font color="#CCCCCC"> cpu</font>

944
00:41:45,500 --> 00:41:50,480
architecture<font color="#E5E5E5"> but we can we want to make</font>

945
00:41:48,140 --> 00:41:53,868
them look<font color="#E5E5E5"> atomic so that even though</font>

946
00:41:50,480 --> 00:41:55,460
they are not atomic the attacker thinks

947
00:41:53,869 --> 00:41:58,010
<font color="#E5E5E5">they're atomic because the attacker</font>

948
00:41:55,460 --> 00:42:00,619
cannot see any time window in between

949
00:41:58,010 --> 00:42:03,200
<font color="#E5E5E5">that I can only sees one operation</font>

950
00:42:00,619 --> 00:42:06,170
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> the idea is very good and as</font>

951
00:42:03,200 --> 00:42:08,779
you maybe<font color="#CCCCCC"> know we have such mechanisms</font>

952
00:42:06,170 --> 00:42:12,050
already<font color="#E5E5E5"> in modern interest abuse we have</font>

953
00:42:08,780 --> 00:42:14,240
<font color="#CCCCCC">include tsx</font><font color="#E5E5E5"> which provides exactly</font><font color="#CCCCCC"> this</font>

954
00:42:12,050 --> 00:42:18,140
functionality<font color="#E5E5E5"> that accesses a</font>

955
00:42:14,240 --> 00:42:20,990
peer-to-peer<font color="#E5E5E5"> atomic in hardware and the</font>

956
00:42:18,140 --> 00:42:22,790
idea is that<font color="#E5E5E5"> in</font><font color="#CCCCCC"> t FX</font><font color="#E5E5E5"> is an</font>

957
00:42:20,990 --> 00:42:24,979
implementation of Hardware transactional

958
00:42:22,790 --> 00:42:28,279
memory that you might know<font color="#CCCCCC"> from</font>

959
00:42:24,980 --> 00:42:31,880
databases<font color="#E5E5E5"> so we ensure that multiple</font>

960
00:42:28,280 --> 00:42:33,680
reads and writes are<font color="#E5E5E5"> atomic and we just</font>

961
00:42:31,880 --> 00:42:36,290
<font color="#CCCCCC">wrapped all those</font><font color="#E5E5E5"> operations that we</font>

962
00:42:33,680 --> 00:42:39,470
want to<font color="#E5E5E5"> be appearing atomic in one</font>

963
00:42:36,290 --> 00:42:41,690
transaction<font color="#E5E5E5"> and if something conflicts</font>

964
00:42:39,470 --> 00:42:44,240
we just roll back to the<font color="#CCCCCC"> previous state</font>

965
00:42:41,690 --> 00:42:47,300
<font color="#E5E5E5">so nothing has</font><font color="#CCCCCC"> actually changed</font><font color="#E5E5E5"> we can</font>

966
00:42:44,240 --> 00:42:49,430
detect<font color="#CCCCCC"> that</font><font color="#E5E5E5"> and therefore if no conflict</font>

967
00:42:47,300 --> 00:42:51,650
has occurred<font color="#E5E5E5"> everything is fine</font>

968
00:42:49,430 --> 00:42:52,040
<font color="#E5E5E5">everything appeared atomic and we're</font>

969
00:42:51,650 --> 00:42:55,520
good

970
00:42:52,040 --> 00:43:00,740
and by coincidence<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is implemented</font>

971
00:42:55,520 --> 00:43:03,080
<font color="#E5E5E5">using the</font><font color="#CCCCCC"> cache</font><font color="#E5E5E5"> so how does this work we</font>

972
00:43:00,740 --> 00:43:06,160
<font color="#E5E5E5">have to catch in the middle again on the</font>

973
00:43:03,080 --> 00:43:09,920
<font color="#E5E5E5">left fret</font><font color="#CCCCCC"> 0 on the right</font><font color="#E5E5E5"> of thread 1 and</font>

974
00:43:06,160 --> 00:43:12,920
fret 0<font color="#E5E5E5"> uses X begin to begin such a</font>

975
00:43:09,920 --> 00:43:15,200
transaction<font color="#CCCCCC"> then it will execute some</font>

976
00:43:12,920 --> 00:43:18,619
instructions<font color="#E5E5E5"> and end the transaction</font>

977
00:43:15,200 --> 00:43:21,169
<font color="#E5E5E5">with X and if this completes everything</font>

978
00:43:18,619 --> 00:43:23,660
<font color="#E5E5E5">is fine otherwise deterrence action will</font>

979
00:43:21,170 --> 00:43:29,270
<font color="#CCCCCC">depart</font><font color="#E5E5E5"> and we will go to the else path</font>

980
00:43:23,660 --> 00:43:32,000
so fret 0<font color="#CCCCCC"> with some data therefore we</font>

981
00:43:29,270 --> 00:43:34,940
have read set and also<font color="#CCCCCC"> fret 1 reads the</font>

982
00:43:32,000 --> 00:43:38,740
same data<font color="#E5E5E5"> no values have changed so</font>

983
00:43:34,940 --> 00:43:42,230
<font color="#E5E5E5">is to define</font><font color="#CCCCCC"> the second step</font><font color="#E5E5E5"> fret 0</font>

984
00:43:38,740 --> 00:43:44,569
<font color="#E5E5E5">rijalallah theta and Fred</font><font color="#CCCCCC"> 1</font><font color="#E5E5E5"> actually</font>

985
00:43:42,230 --> 00:43:48,230
write something<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we're going</font><font color="#E5E5E5"> to update</font>

986
00:43:44,569 --> 00:43:50,300
the read set within the read set no

987
00:43:48,230 --> 00:43:53,810
values have been changed<font color="#CCCCCC"> everything is</font>

988
00:43:50,300 --> 00:43:57,050
still fine<font color="#CCCCCC"> but now in the third step</font>

989
00:43:53,810 --> 00:43:59,750
<font color="#E5E5E5">Fred</font><font color="#CCCCCC"> one write something</font><font color="#E5E5E5"> into the data</font>

990
00:43:57,050 --> 00:44:00,680
within the<font color="#E5E5E5"> read set which read zero</font>

991
00:43:59,750 --> 00:44:03,619
tries to read

992
00:44:00,680 --> 00:44:08,450
so actually<font color="#CCCCCC"> Fred one modify the value in</font>

993
00:44:03,619 --> 00:44:10,210
<font color="#E5E5E5">therefore we acquire the transaction you</font>

994
00:44:08,450 --> 00:44:13,129
might have noticed something<font color="#CCCCCC"> now</font>

995
00:44:10,210 --> 00:44:16,310
<font color="#E5E5E5">actually what we</font><font color="#CCCCCC"> see in this example</font><font color="#E5E5E5"> is</font>

996
00:44:13,130 --> 00:44:19,760
a typical double<font color="#E5E5E5"> fetch bar where we have</font>

997
00:44:16,310 --> 00:44:22,490
the first<font color="#E5E5E5"> access to the value then the</font>

998
00:44:19,760 --> 00:44:24,290
other<font color="#E5E5E5"> Fred modifies the value and then</font>

999
00:44:22,490 --> 00:44:26,930
<font color="#E5E5E5">we have the second access where we</font>

1000
00:44:24,290 --> 00:44:29,300
reused at<font color="#CCCCCC"> them so exactly</font><font color="#E5E5E5"> at the back</font>

1001
00:44:26,930 --> 00:44:32,270
that<font color="#E5E5E5"> we've seen earlier but this time</font>

1002
00:44:29,300 --> 00:44:34,819
the transactional costs and<font color="#E5E5E5"> therefore we</font>

1003
00:44:32,270 --> 00:44:37,099
can detect<font color="#E5E5E5"> that and do not continue the</font>

1004
00:44:34,819 --> 00:44:39,500
rest of our application<font color="#CCCCCC"> so we still do</font>

1005
00:44:37,099 --> 00:44:45,500
not do that by playing the video<font color="#E5E5E5"> as</font>

1006
00:44:39,500 --> 00:44:47,420
we've detected<font color="#E5E5E5"> your attack okay so we</font>

1007
00:44:45,500 --> 00:44:49,220
can now detect it<font color="#E5E5E5"> and that works really</font>

1008
00:44:47,420 --> 00:44:51,440
<font color="#E5E5E5">reliable because it's implemented in</font>

1009
00:44:49,220 --> 00:44:55,339
hardware<font color="#CCCCCC"> so have a feature that</font><font color="#E5E5E5"> we can</font>

1010
00:44:51,440 --> 00:44:58,220
use and so we we also<font color="#E5E5E5"> created a small</font>

1011
00:44:55,339 --> 00:45:01,640
<font color="#E5E5E5">library of that called drop it that</font>

1012
00:44:58,220 --> 00:45:05,299
prevents<font color="#E5E5E5"> such exploitation of double</font>

1013
00:45:01,640 --> 00:45:07,279
fetch<font color="#E5E5E5"> parks using</font><font color="#CCCCCC"> TSX you also have it</font>

1014
00:45:05,300 --> 00:45:09,859
open source<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can try it out</font><font color="#E5E5E5"> it's</font>

1015
00:45:07,280 --> 00:45:15,230
<font color="#E5E5E5">especially useful in nest egg</font><font color="#CCCCCC"> scenario</font>

1016
00:45:09,859 --> 00:45:16,700
that we only have<font color="#E5E5E5"> small code bases where</font>

1017
00:45:15,230 --> 00:45:19,400
we want<font color="#E5E5E5"> to</font><font color="#CCCCCC"> actually protect</font><font color="#E5E5E5"> them from</font>

1018
00:45:16,700 --> 00:45:22,098
any exploitation<font color="#CCCCCC"> so we can just wrap it</font>

1019
00:45:19,400 --> 00:45:24,890
with<font color="#E5E5E5"> this library it's really easy to</font>

1020
00:45:22,099 --> 00:45:27,410
<font color="#E5E5E5">use in the easiest case we only</font><font color="#CCCCCC"> have</font>

1021
00:45:24,890 --> 00:45:29,180
three additional<font color="#E5E5E5"> lines of codes that</font><font color="#CCCCCC"> are</font>

1022
00:45:27,410 --> 00:45:32,899
sufficient to<font color="#CCCCCC"> protect any type of fetch</font>

1023
00:45:29,180 --> 00:45:35,328
from<font color="#E5E5E5"> being exploited and we can apply</font>

1024
00:45:32,900 --> 00:45:37,880
that<font color="#CCCCCC"> to our</font><font color="#E5E5E5"> code it doesn't only work</font>

1025
00:45:35,329 --> 00:45:40,730
for<font color="#E5E5E5"> for sjx code we also did</font><font color="#CCCCCC"> that in a</font>

1026
00:45:37,880 --> 00:45:43,220
<font color="#E5E5E5">Linux kernel it also works there to</font>

1027
00:45:40,730 --> 00:45:46,200
protect<font color="#CCCCCC"> everything</font><font color="#E5E5E5"> but let's let's look</font>

1028
00:45:43,220 --> 00:45:48,870
how easy it<font color="#E5E5E5"> is to use it on our code</font>

1029
00:45:46,200 --> 00:45:52,109
if we have this<font color="#E5E5E5"> your mplayer with the</font>

1030
00:45:48,870 --> 00:45:54,180
file<font color="#E5E5E5"> we just</font><font color="#CCCCCC"> have some initialization we</font>

1031
00:45:52,110 --> 00:45:56,640
say okay we're going<font color="#CCCCCC"> to retry ten times</font>

1032
00:45:54,180 --> 00:45:58,529
<font color="#E5E5E5">so if it fails for some other reason</font>

1033
00:45:56,640 --> 00:46:00,420
<font color="#CCCCCC">which might</font><font color="#E5E5E5"> be the case case because the</font>

1034
00:45:58,530 --> 00:46:03,500
cache is used<font color="#E5E5E5"> a lot by other</font>

1035
00:46:00,420 --> 00:46:06,630
applications running at<font color="#E5E5E5"> the same time</font>

1036
00:46:03,500 --> 00:46:08,700
<font color="#E5E5E5">then we might want to retry do not have</font>

1037
00:46:06,630 --> 00:46:11,520
<font color="#E5E5E5">any false</font><font color="#CCCCCC"> positives there</font><font color="#E5E5E5"> and then we</font>

1038
00:46:08,700 --> 00:46:13,529
just say start the protection and anti

1039
00:46:11,520 --> 00:46:16,400
protection started<font color="#E5E5E5"> before the first</font>

1040
00:46:13,530 --> 00:46:20,220
<font color="#CCCCCC">fetch</font><font color="#E5E5E5"> and it after the second fetch and</font>

1041
00:46:16,400 --> 00:46:23,660
everything in<font color="#CCCCCC"> between is atomic for any</font>

1042
00:46:20,220 --> 00:46:26,640
outside<font color="#CCCCCC"> attacker any outside viewer and</font>

1043
00:46:23,660 --> 00:46:28,950
if someone tries<font color="#CCCCCC"> to</font><font color="#E5E5E5"> exploit that it will</font>

1044
00:46:26,640 --> 00:46:31,980
fail more<font color="#E5E5E5"> than</font><font color="#CCCCCC"> ten times and then we</font>

1045
00:46:28,950 --> 00:46:33,930
just go out there<font color="#CCCCCC"> and say some something</font>

1046
00:46:31,980 --> 00:46:38,220
<font color="#E5E5E5">fishy is going on we don't</font><font color="#CCCCCC"> want to</font>

1047
00:46:33,930 --> 00:46:41,160
<font color="#CCCCCC">continue here and everything</font><font color="#E5E5E5"> is safe so</font>

1048
00:46:38,220 --> 00:46:43,649
this really is just<font color="#E5E5E5"> three additional</font>

1049
00:46:41,160 --> 00:46:46,529
lines of code that<font color="#E5E5E5"> we can add there to</font>

1050
00:46:43,650 --> 00:46:50,280
make an exploit<font color="#E5E5E5"> impossible using</font><font color="#CCCCCC"> this</font>

1051
00:46:46,530 --> 00:46:54,030
<font color="#E5E5E5">hyper protection so it's really</font>

1052
00:46:50,280 --> 00:46:56,190
efficient<font color="#E5E5E5"> and easy if</font><font color="#CCCCCC"> we have this is a</font>

1053
00:46:54,030 --> 00:46:58,680
complex<font color="#E5E5E5"> problem double fetches are</font>

1054
00:46:56,190 --> 00:47:00,720
really hard<font color="#E5E5E5"> to detect</font><font color="#CCCCCC"> they are really</font>

1055
00:46:58,680 --> 00:47:05,040
hard<font color="#E5E5E5"> to fix because they are necessary</font>

1056
00:47:00,720 --> 00:47:07,230
<font color="#E5E5E5">and then we need complex workarounds</font>

1057
00:47:05,040 --> 00:47:09,360
<font color="#E5E5E5">retry logic and other and different</font>

1058
00:47:07,230 --> 00:47:12,660
<font color="#E5E5E5">logics to prevent double fed</font>

1059
00:47:09,360 --> 00:47:14,520
exploitation but if we have<font color="#CCCCCC"> tsx</font><font color="#E5E5E5"> then we</font>

1060
00:47:12,660 --> 00:47:17,160
have a really<font color="#CCCCCC"> easy solution for</font><font color="#E5E5E5"> many</font>

1061
00:47:14,520 --> 00:47:20,040
<font color="#CCCCCC">double-fudge scenarios to fix them or</font>

1062
00:47:17,160 --> 00:47:22,620
make them<font color="#E5E5E5"> non exploitable it's also fast</font>

1063
00:47:20,040 --> 00:47:25,050
<font color="#CCCCCC">it's implemented in</font><font color="#E5E5E5"> hardware it's better</font>

1064
00:47:22,620 --> 00:47:27,380
than any software lock<font color="#CCCCCC"> work around our</font>

1065
00:47:25,050 --> 00:47:30,780
<font color="#E5E5E5">versions if you use traditional locking</font>

1066
00:47:27,380 --> 00:47:32,550
traditional<font color="#E5E5E5"> tsx is approximately 18</font>

1067
00:47:30,780 --> 00:47:34,800
percent faster than<font color="#E5E5E5"> traditional locking</font>

1068
00:47:32,550 --> 00:47:38,850
so even gives you<font color="#E5E5E5"> better performance and</font>

1069
00:47:34,800 --> 00:47:42,540
<font color="#E5E5E5">better protection of</font><font color="#CCCCCC"> course one</font><font color="#E5E5E5"> of the</font>

1070
00:47:38,850 --> 00:47:45,089
critics years it's limited to CPUs have

1071
00:47:42,540 --> 00:47:48,240
<font color="#CCCCCC">to INTRUST abuse and to new Intel CPUs</font>

1072
00:47:45,090 --> 00:47:52,290
that<font color="#CCCCCC"> have</font><font color="#E5E5E5"> that feature</font><font color="#CCCCCC"> because not all</font>

1073
00:47:48,240 --> 00:47:55,049
of<font color="#E5E5E5"> them have but many CPUs that have the</font>

1074
00:47:52,290 --> 00:47:57,930
<font color="#CCCCCC">SGX extension</font><font color="#E5E5E5"> also</font><font color="#CCCCCC"> have the</font><font color="#E5E5E5"> TS exist</font>

1075
00:47:55,050 --> 00:47:58,450
extension so we<font color="#E5E5E5"> can secure most of our</font>

1076
00:47:57,930 --> 00:48:00,899
anchor

1077
00:47:58,450 --> 00:48:04,598
with the<font color="#E5E5E5"> teeth with the tsx feature</font>

1078
00:48:00,900 --> 00:48:07,380
which is really cool makes easy<font color="#E5E5E5"> to</font>

1079
00:48:04,599 --> 00:48:11,140
protect<font color="#E5E5E5"> that back from being exploited</font>

1080
00:48:07,380 --> 00:48:14,440
so in the beginning<font color="#CCCCCC"> you stole my</font>

1081
00:48:11,140 --> 00:48:17,020
bitcoins<font color="#E5E5E5"> but we fix that then you broke</font>

1082
00:48:14,440 --> 00:48:21,700
my video player<font color="#E5E5E5"> but we also fixed that</font>

1083
00:48:17,020 --> 00:48:25,119
<font color="#E5E5E5">so what did we</font><font color="#CCCCCC"> learn today what we</font>

1084
00:48:21,700 --> 00:48:27,520
<font color="#CCCCCC">learned</font><font color="#E5E5E5"> main takeaways side channels can</font>

1085
00:48:25,119 --> 00:48:29,650
cost you money<font color="#CCCCCC"> doesn't</font><font color="#E5E5E5"> matter</font><font color="#CCCCCC"> whether I</font>

1086
00:48:27,520 --> 00:48:32,290
directly steal your bitcoins<font color="#E5E5E5"> or if I do</font>

1087
00:48:29,650 --> 00:48:35,470
not pay you for watching the video<font color="#CCCCCC"> or</font>

1088
00:48:32,290 --> 00:48:37,750
for whatever reason<font color="#CCCCCC"> citations are</font>

1089
00:48:35,470 --> 00:48:40,959
something you should consider<font color="#E5E5E5"> new Fred</font>

1090
00:48:37,750 --> 00:48:43,480
model<font color="#E5E5E5"> they are nowadays</font><font color="#CCCCCC"> not that</font><font color="#E5E5E5"> hard</font><font color="#CCCCCC"> to</font>

1091
00:48:40,960 --> 00:48:45,250
mount we<font color="#CCCCCC"> have many side channels</font><font color="#E5E5E5"> so they</font>

1092
00:48:43,480 --> 00:48:49,000
can<font color="#E5E5E5"> really cost you money because</font><font color="#CCCCCC"> in</font>

1093
00:48:45,250 --> 00:48:51,460
<font color="#CCCCCC">TECA</font><font color="#E5E5E5"> can use them so it's really</font>

1094
00:48:49,000 --> 00:48:53,410
<font color="#E5E5E5">important</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you do not consider side</font>

1095
00:48:51,460 --> 00:48:55,930
channels out of scope as we have also

1096
00:48:53,410 --> 00:48:59,170
seen<font color="#CCCCCC"> in the beginning of this year side</font>

1097
00:48:55,930 --> 00:49:02,649
channels are very applicable even<font color="#E5E5E5"> in the</font>

1098
00:48:59,170 --> 00:49:04,690
scenario of<font color="#CCCCCC"> SGX and</font><font color="#E5E5E5"> very many other</font>

1099
00:49:02,650 --> 00:49:07,030
scenarios<font color="#CCCCCC"> wherever you reso</font><font color="#E5E5E5"> of wherever</font>

1100
00:49:04,690 --> 00:49:09,609
<font color="#E5E5E5">you share resources you might run</font><font color="#CCCCCC"> into a</font>

1101
00:49:07,030 --> 00:49:11,260
problem with side channels<font color="#E5E5E5"> therefore do</font>

1102
00:49:09,609 --> 00:49:13,480
not consider<font color="#E5E5E5"> them out of scope and keep</font>

1103
00:49:11,260 --> 00:49:18,220
that<font color="#CCCCCC"> in mind also if you use</font><font color="#E5E5E5"> those</font>

1104
00:49:13,480 --> 00:49:20,910
technologies exactly<font color="#E5E5E5"> and do not take</font>

1105
00:49:18,220 --> 00:49:24,368
<font color="#E5E5E5">Hardware extensions as the Silver Bullet</font>

1106
00:49:20,910 --> 00:49:26,558
<font color="#CCCCCC">that you just</font><font color="#E5E5E5"> can add to your code with</font>

1107
00:49:24,369 --> 00:49:28,390
all your<font color="#CCCCCC"> bugs with all this exploitable</font>

1108
00:49:26,559 --> 00:49:31,210
stuff in there<font color="#E5E5E5"> so if you have</font>

1109
00:49:28,390 --> 00:49:34,058
exploitable code which<font color="#CCCCCC"> bucks in there it</font>

1110
00:49:31,210 --> 00:49:35,829
doesn't<font color="#CCCCCC"> matter</font><font color="#E5E5E5"> whether it's normal</font><font color="#CCCCCC"> Park</font>

1111
00:49:34,059 --> 00:49:38,290
as we've seen memory corruptions or

1112
00:49:35,829 --> 00:49:40,720
double fetches use after freeze<font color="#E5E5E5"> whatever</font>

1113
00:49:38,290 --> 00:49:43,410
something<font color="#E5E5E5"> that's known</font><font color="#CCCCCC"> for a while</font><font color="#E5E5E5"> or</font>

1114
00:49:40,720 --> 00:49:46,480
whether it's something that's<font color="#E5E5E5"> only for a</font>

1115
00:49:43,410 --> 00:49:49,660
exploitable<font color="#CCCCCC"> side channels like non</font><font color="#E5E5E5"> side</font>

1116
00:49:46,480 --> 00:49:52,030
channel<font color="#CCCCCC"> resistance crypto or atom memory</font>

1117
00:49:49,660 --> 00:49:54,339
secret dependent<font color="#E5E5E5"> memory accesses that</font>

1118
00:49:52,030 --> 00:49:56,740
can be exploited with side channels if

1119
00:49:54,339 --> 00:49:58,930
you have exploitable code<font color="#E5E5E5"> and you put it</font>

1120
00:49:56,740 --> 00:50:01,200
in a secure<font color="#CCCCCC"> and Cave</font><font color="#E5E5E5"> doesn't matter</font>

1121
00:49:58,930 --> 00:50:05,609
<font color="#E5E5E5">whether it's</font><font color="#CCCCCC"> in Tech's</font><font color="#E5E5E5"> arm trust zone</font>

1122
00:50:01,200 --> 00:50:09,848
<font color="#E5E5E5">it's applicable to all of the hardware</font>

1123
00:50:05,609 --> 00:50:12,339
<font color="#E5E5E5">in caves then you do not get</font><font color="#CCCCCC"> secure code</font>

1124
00:50:09,849 --> 00:50:15,609
<font color="#E5E5E5">with that you only get</font>

1125
00:50:12,339 --> 00:50:17,440
exploitable<font color="#CCCCCC"> in caves so then the</font><font color="#E5E5E5"> a code</font>

1126
00:50:15,609 --> 00:50:19,869
inside your<font color="#CCCCCC"> hangar F is exploitable</font><font color="#E5E5E5"> and</font>

1127
00:50:17,440 --> 00:50:22,989
that can be<font color="#E5E5E5"> even</font><font color="#CCCCCC"> worse</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> rely</font>

1128
00:50:19,869 --> 00:50:25,029
on it to be<font color="#E5E5E5"> secure and then it's an</font>

1129
00:50:22,989 --> 00:50:26,829
<font color="#E5E5E5">organized target for an attacker because</font>

1130
00:50:25,029 --> 00:50:29,259
<font color="#E5E5E5">they take a knows exactly where your</font>

1131
00:50:26,829 --> 00:50:32,319
secrets are so you should not have

1132
00:50:29,259 --> 00:50:35,380
exploitable code<font color="#E5E5E5"> just put in to secure</font>

1133
00:50:32,319 --> 00:50:37,839
hardware<font color="#CCCCCC"> elements</font><font color="#E5E5E5"> but you have to write</font>

1134
00:50:35,380 --> 00:50:40,390
secure<font color="#E5E5E5"> codes so</font><font color="#CCCCCC"> that you can use then in</font>

1135
00:50:37,839 --> 00:50:42,999
<font color="#CCCCCC">addition this half of</font><font color="#E5E5E5"> features to</font><font color="#CCCCCC"> make</font>

1136
00:50:40,390 --> 00:50:44,950
<font color="#CCCCCC">it really secure so that's one of the</font>

1137
00:50:42,999 --> 00:50:48,899
<font color="#E5E5E5">really important takeaways if you write</font>

1138
00:50:44,950 --> 00:50:52,499
<font color="#E5E5E5">software using such hardware features</font>

1139
00:50:48,900 --> 00:50:55,779
<font color="#E5E5E5">okay and this concludes our presentation</font>

1140
00:50:52,499 --> 00:50:58,649
<font color="#CCCCCC">so thanks</font><font color="#E5E5E5"> for your attention</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> we are</font>

1141
00:50:55,779 --> 00:50:58,650
open for<font color="#CCCCCC"> any questions</font>

1142
00:51:01,740 --> 00:51:18,569
[Applause]

1143
00:51:03,470 --> 00:51:20,339
yes yes exactly<font color="#E5E5E5"> so the side channel</font>

1144
00:51:18,570 --> 00:51:22,380
leakage is still there<font color="#E5E5E5"> so for the first</font>

1145
00:51:20,340 --> 00:51:25,770
attack a few months a genetic<font color="#E5E5E5"> for</font>

1146
00:51:22,380 --> 00:51:27,869
example<font color="#CCCCCC"> on crypto that cannot be</font>

1147
00:51:25,770 --> 00:51:30,090
prevented<font color="#E5E5E5"> with this library</font><font color="#CCCCCC"> test but</font>

1148
00:51:27,869 --> 00:51:33,710
there<font color="#E5E5E5"> is a paper from</font><font color="#CCCCCC"> last year using</font>

1149
00:51:30,090 --> 00:51:37,020
<font color="#E5E5E5">security</font><font color="#CCCCCC"> where a team of researchers</font>

1150
00:51:33,710 --> 00:51:39,600
found a solution<font color="#E5E5E5"> to also use in the TSX</font>

1151
00:51:37,020 --> 00:51:41,730
to prevent<font color="#E5E5E5"> side channel leakage because</font>

1152
00:51:39,600 --> 00:51:43,799
it's implemented in<font color="#E5E5E5"> the cache</font><font color="#CCCCCC"> so you can</font>

1153
00:51:41,730 --> 00:51:46,320
also see if someone does a cache attack

1154
00:51:43,800 --> 00:51:48,720
with<font color="#E5E5E5"> that and evict something from the</font>

1155
00:51:46,320 --> 00:51:51,900
cache then that can be detected within

1156
00:51:48,720 --> 00:51:55,049
<font color="#CCCCCC">TSX because your read set is destroyed</font>

1157
00:51:51,900 --> 00:51:56,760
or<font color="#E5E5E5"> your right set and it supports so the</font>

1158
00:51:55,050 --> 00:51:58,740
operation<font color="#CCCCCC"> reports before any leakage</font>

1159
00:51:56,760 --> 00:52:08,369
occurs so you can also use<font color="#CCCCCC"> it against</font>

1160
00:51:58,740 --> 00:52:13,500
cache attacks so from outside<font color="#E5E5E5"> the NK if</font>

1161
00:52:08,369 --> 00:52:15,540
it's a bit if yes from outside<font color="#CCCCCC"> NK if</font>

1162
00:52:13,500 --> 00:52:18,450
it's even easier<font color="#CCCCCC"> to do because</font><font color="#E5E5E5"> you have</font>

1163
00:52:15,540 --> 00:52:20,040
<font color="#CCCCCC">all the features</font><font color="#E5E5E5"> you can get physical</font>

1164
00:52:18,450 --> 00:52:23,460
addresses because<font color="#E5E5E5"> in this attack model</font>

1165
00:52:20,040 --> 00:52:25,230
<font color="#E5E5E5">you have root privileges so you get</font>

1166
00:52:23,460 --> 00:52:29,490
<font color="#E5E5E5">physical addresses you</font><font color="#CCCCCC"> can easily built</font>

1167
00:52:25,230 --> 00:52:32,010
your<font color="#E5E5E5"> eviction sets for</font><font color="#CCCCCC"> Prime</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> pro you</font>

1168
00:52:29,490 --> 00:52:35,069
can<font color="#CCCCCC"> also tamper with the scheduling</font><font color="#E5E5E5"> of</font>

1169
00:52:32,010 --> 00:52:38,330
<font color="#CCCCCC">the enclaves so you can for example the</font>

1170
00:52:35,070 --> 00:52:41,760
<font color="#CCCCCC">x-step framework that allows you to only</font>

1171
00:52:38,330 --> 00:52:44,190
let<font color="#E5E5E5"> ankov execute a few instruction</font><font color="#CCCCCC"> ten</font>

1172
00:52:41,760 --> 00:52:47,130
<font color="#E5E5E5">interrupted then attack again the cache</font>

1173
00:52:44,190 --> 00:52:50,180
<font color="#E5E5E5">so it's basically slows down the</font><font color="#CCCCCC"> nkf</font>

1174
00:52:47,130 --> 00:52:53,190
extremely which makes it a lot<font color="#CCCCCC"> easier to</font>

1175
00:52:50,180 --> 00:52:55,080
<font color="#E5E5E5">exploit this attacks from the outside</font><font color="#CCCCCC"> so</font>

1176
00:52:53,190 --> 00:52:56,640
if you are not in<font color="#CCCCCC"> n</font><font color="#E5E5E5"> cave it's a lot</font>

1177
00:52:55,080 --> 00:52:58,259
<font color="#CCCCCC">younger you're also</font><font color="#E5E5E5"> visible to the</font>

1178
00:52:56,640 --> 00:52:59,940
operating<font color="#CCCCCC"> system</font><font color="#E5E5E5"> so you cannot hide</font>

1179
00:52:58,260 --> 00:53:02,730
<font color="#E5E5E5">within the ink layer as we've seen with</font>

1180
00:52:59,940 --> 00:53:05,490
<font color="#E5E5E5">the performance yeah there are</font><font color="#CCCCCC"> detection</font>

1181
00:53:02,730 --> 00:53:09,660
mechanisms<font color="#CCCCCC"> presented in two thousand</font>

1182
00:53:05,490 --> 00:53:11,520
<font color="#CCCCCC">fifteen or sixteen blackhat that use the</font>

1183
00:53:09,660 --> 00:53:13,350
<font color="#E5E5E5">performance counter to detect ongoing</font>

1184
00:53:11,520 --> 00:53:15,530
cash attacks and then you could stop

1185
00:53:13,350 --> 00:53:15,529
them

1186
00:53:16,950 --> 00:53:22,240
so if there any more<font color="#CCCCCC"> questions</font><font color="#E5E5E5"> but if</font>

1187
00:53:21,040 --> 00:53:24,430
you<font color="#CCCCCC"> are still interested you can check</font>

1188
00:53:22,240 --> 00:53:26,410
<font color="#CCCCCC">out the white paper which has much more</font>

1189
00:53:24,430 --> 00:53:28,810
detailed<font color="#E5E5E5"> information in there otherwise</font>

1190
00:53:26,410 --> 00:53:31,020
<font color="#E5E5E5">you can talk to us later on</font><font color="#CCCCCC"> and thank</font>

1191
00:53:28,810 --> 00:53:31,020
you again

