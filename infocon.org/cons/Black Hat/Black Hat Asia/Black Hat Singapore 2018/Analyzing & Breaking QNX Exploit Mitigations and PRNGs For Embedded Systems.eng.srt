1
00:00:00,030 --> 00:00:04,140
hello and welcome everybody to<font color="#E5E5E5"> my talk</font>

2
00:00:02,100 --> 00:00:05,670
<font color="#E5E5E5">analyzing and breaking cue</font><font color="#CCCCCC"> annex exploit</font>

3
00:00:04,140 --> 00:00:07,529
mitigations and peering<font color="#CCCCCC"> G's for</font>

4
00:00:05,670 --> 00:00:10,410
automotive industrial medical<font color="#E5E5E5"> and other</font>

5
00:00:07,529 --> 00:00:12,150
embedded<font color="#E5E5E5"> systems my name is</font><font color="#CCCCCC"> Jose vessels</font>

6
00:00:10,410 --> 00:00:13,710
and I'm an independent<font color="#E5E5E5"> security</font>

7
00:00:12,150 --> 00:00:15,870
researcher with<font color="#E5E5E5"> midnight blue where I</font>

8
00:00:13,710 --> 00:00:18,480
mainly focus<font color="#CCCCCC"> on</font><font color="#E5E5E5"> a better system security</font>

9
00:00:15,870 --> 00:00:19,890
<font color="#CCCCCC">I previously worked as a researcher at</font>

10
00:00:18,480 --> 00:00:21,270
the University<font color="#CCCCCC"> of Twente</font><font color="#E5E5E5"> in the</font>

11
00:00:19,890 --> 00:00:23,250
Netherlands focusing on the critical

12
00:00:21,270 --> 00:00:25,619
<font color="#E5E5E5">infrastructure</font><font color="#CCCCCC"> protection</font><font color="#E5E5E5"> mainly and</font>

13
00:00:23,250 --> 00:00:27,269
most of this work<font color="#E5E5E5"> was done as part</font><font color="#CCCCCC"> of my</font>

14
00:00:25,619 --> 00:00:28,920
master's thesis at the Eindhoven

15
00:00:27,269 --> 00:00:31,009
University of Technology<font color="#CCCCCC"> also in the</font>

16
00:00:28,920 --> 00:00:33,600
Netherlands<font color="#E5E5E5"> and this research was done</font>

17
00:00:31,009 --> 00:00:36,059
together<font color="#E5E5E5"> with my colleague</font><font color="#CCCCCC"> Ali Abbas II</font>

18
00:00:33,600 --> 00:00:38,040
he's a PhD candidate at the hind Open

19
00:00:36,059 --> 00:00:39,718
University of Technology and a visiting

20
00:00:38,040 --> 00:00:41,070
researcher at<font color="#CCCCCC"> the rural university of</font>

21
00:00:39,719 --> 00:00:42,930
<font color="#CCCCCC">bokram in Germany where he mainly</font>

22
00:00:41,070 --> 00:00:46,410
<font color="#E5E5E5">focuses on industrial control</font><font color="#CCCCCC"> systems</font>

23
00:00:42,930 --> 00:00:48,269
<font color="#E5E5E5">security and embedded binary security so</font>

24
00:00:46,410 --> 00:00:50,578
I want to start<font color="#E5E5E5"> off</font><font color="#CCCCCC"> with a little</font><font color="#E5E5E5"> road</font>

25
00:00:48,270 --> 00:00:52,710
<font color="#E5E5E5">map</font><font color="#CCCCCC"> today I'm</font><font color="#E5E5E5"> gonna start with an</font>

26
00:00:50,579 --> 00:00:54,629
introduction<font color="#E5E5E5"> to</font><font color="#CCCCCC"> cue annex</font><font color="#E5E5E5"> what</font><font color="#CCCCCC"> exactly</font>

27
00:00:52,710 --> 00:00:55,680
<font color="#E5E5E5">is it then I'm gonna move on to the</font>

28
00:00:54,629 --> 00:00:57,899
operating<font color="#CCCCCC"> system and security</font>

29
00:00:55,680 --> 00:00:59,879
<font color="#E5E5E5">architecture outline</font><font color="#CCCCCC"> before discussing</font>

30
00:00:57,899 --> 00:01:01,770
the<font color="#E5E5E5"> given</font><font color="#CCCCCC"> Experion G's and the</font>

31
00:00:59,879 --> 00:01:05,610
exploitation<font color="#E5E5E5"> and finishing off</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> some</font>

32
00:01:01,770 --> 00:01:07,830
final remarks<font color="#E5E5E5"> so what exactly is given X</font>

33
00:01:05,610 --> 00:01:10,740
<font color="#CCCCCC">Q</font><font color="#E5E5E5"> annex is a unix-like POSIX compliant</font>

34
00:01:07,830 --> 00:01:13,170
real-time embedded operating system was

35
00:01:10,740 --> 00:01:15,270
<font color="#E5E5E5">initially released in 1982 and later</font>

36
00:01:13,170 --> 00:01:17,700
acquired by<font color="#E5E5E5"> blackberry which is also its</font>

37
00:01:15,270 --> 00:01:20,548
current owner<font color="#CCCCCC"> it's closed source and</font>

38
00:01:17,700 --> 00:01:23,880
proprietary<font color="#CCCCCC"> there are two main lines of</font>

39
00:01:20,549 --> 00:01:26,520
<font color="#E5E5E5">queuing excu nix 6.6 these days released</font>

40
00:01:23,880 --> 00:01:29,490
<font color="#E5E5E5">in</font><font color="#CCCCCC"> March of 2014</font><font color="#E5E5E5"> which is a 32-bit</font>

41
00:01:26,520 --> 00:01:31,408
<font color="#CCCCCC">operating</font><font color="#E5E5E5"> system in UNIX 7 which</font><font color="#CCCCCC"> is a</font>

42
00:01:29,490 --> 00:01:33,780
64-bit<font color="#CCCCCC"> operating</font><font color="#E5E5E5"> system which was</font>

43
00:01:31,409 --> 00:01:36,270
<font color="#E5E5E5">released in March</font><font color="#CCCCCC"> of 2017</font>

44
00:01:33,780 --> 00:01:38,610
<font color="#E5E5E5">it's most famously known</font><font color="#CCCCCC"> for use in</font>

45
00:01:36,270 --> 00:01:40,320
mobile devices<font color="#E5E5E5"> such as</font><font color="#CCCCCC"> BlackBerry 10 and</font>

46
00:01:38,610 --> 00:01:42,119
like<font color="#E5E5E5"> very tablet operating systems where</font>

47
00:01:40,320 --> 00:01:44,369
it forms the core basis of the operating

48
00:01:42,119 --> 00:01:46,049
system<font color="#E5E5E5"> but really</font><font color="#CCCCCC"> this is only</font><font color="#E5E5E5"> the tip</font>

49
00:01:44,369 --> 00:01:47,310
<font color="#CCCCCC">of</font><font color="#E5E5E5"> the iceberg of conics usage</font>

50
00:01:46,049 --> 00:01:49,799
especially<font color="#CCCCCC"> these days</font>

51
00:01:47,310 --> 00:01:52,920
it's far more well known for its use for

52
00:01:49,799 --> 00:01:54,570
example<font color="#CCCCCC"> in automotive systems blackberry</font>

53
00:01:52,920 --> 00:01:55,290
absolutely dominates the<font color="#E5E5E5"> infotainment</font>

54
00:01:54,570 --> 00:01:56,820
market

55
00:01:55,290 --> 00:01:58,770
<font color="#CCCCCC">you find it in a lot of in vehicle in</font>

56
00:01:56,820 --> 00:02:01,408
for infotainment systems in telematics

57
00:01:58,770 --> 00:02:03,780
<font color="#E5E5E5">control units and so</font><font color="#CCCCCC"> on as you can see</font>

58
00:02:01,409 --> 00:02:06,390
<font color="#E5E5E5">for example most famously it was used in</font>

59
00:02:03,780 --> 00:02:07,090
the<font color="#CCCCCC"> infotainment</font><font color="#E5E5E5"> unit which featured in</font>

60
00:02:06,390 --> 00:02:10,780
the hack

61
00:02:07,090 --> 00:02:13,750
by Charlie Miller and Chris valasek<font color="#CCCCCC"> an</font>

62
00:02:10,780 --> 00:02:15,400
<font color="#CCCCCC">or use of Q Nixon automotive is as</font><font color="#E5E5E5"> part</font>

63
00:02:13,750 --> 00:02:17,440
of<font color="#E5E5E5"> blackberry radar which is</font><font color="#CCCCCC"> a fleet</font>

64
00:02:15,400 --> 00:02:20,170
monitoring solution used for trailers

65
00:02:17,440 --> 00:02:21,609
flatbeds<font color="#E5E5E5"> fans heavy equipment</font><font color="#CCCCCC"> and here</font>

66
00:02:20,170 --> 00:02:23,230
it provides asset<font color="#E5E5E5"> tracking and</font>

67
00:02:21,610 --> 00:02:25,300
telematics functionality which allows

68
00:02:23,230 --> 00:02:27,250
<font color="#CCCCCC">for cargo integrity and anti-theft</font>

69
00:02:25,300 --> 00:02:29,520
functionality as well<font color="#CCCCCC"> as</font><font color="#E5E5E5"> preventative</font>

70
00:02:27,250 --> 00:02:32,380
<font color="#E5E5E5">maintenance and operational efficiency</font>

71
00:02:29,520 --> 00:02:34,930
<font color="#CCCCCC">and finally use of</font><font color="#E5E5E5"> Q</font><font color="#CCCCCC"> Knicks</font><font color="#E5E5E5"> and</font>

72
00:02:32,380 --> 00:02:37,060
automotive systems or projected use is

73
00:02:34,930 --> 00:02:38,860
it<font color="#E5E5E5"> used in autonomous vehicles so</font>

74
00:02:37,060 --> 00:02:40,570
<font color="#CCCCCC">blackberry Korea has created an</font>

75
00:02:38,860 --> 00:02:42,340
Innovation Center for connected and

76
00:02:40,570 --> 00:02:45,730
autonomous<font color="#CCCCCC"> vehicles</font><font color="#E5E5E5"> and partner with</font>

77
00:02:42,340 --> 00:02:48,610
<font color="#CCCCCC">various big players and vidya delphi</font>

78
00:02:45,730 --> 00:02:50,470
automotive<font color="#E5E5E5"> Baidu which all seek to</font>

79
00:02:48,610 --> 00:02:54,340
integrate<font color="#E5E5E5"> Q</font><font color="#CCCCCC"> and X as part of their self</font>

80
00:02:50,470 --> 00:02:56,590
driving car platforms and the industrial

81
00:02:54,340 --> 00:02:58,780
sector are you encountered in the more

82
00:02:56,590 --> 00:03:01,030
<font color="#E5E5E5">high-end systems as well for</font><font color="#CCCCCC"> example in</font>

83
00:02:58,780 --> 00:03:03,790
the nuclear HMI systems by Westinghouse

84
00:03:01,030 --> 00:03:05,920
<font color="#CCCCCC">a</font><font color="#E5E5E5"> flat panel display system which forms</font>

85
00:03:03,790 --> 00:03:08,950
an interface<font color="#CCCCCC"> between the safety system</font>

86
00:03:05,920 --> 00:03:11,440
processor and<font color="#E5E5E5"> and I human machine</font>

87
00:03:08,950 --> 00:03:12,970
interface this place this runs on<font color="#CCCCCC"> Q</font>

88
00:03:11,440 --> 00:03:16,209
<font color="#E5E5E5">annex a much older version that I'm</font>

89
00:03:12,970 --> 00:03:17,890
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> discuss</font><font color="#CCCCCC"> today</font><font color="#E5E5E5"> q</font><font color="#CCCCCC"> Nix for but</font><font color="#E5E5E5"> yeah</font>

90
00:03:16,209 --> 00:03:19,540
you can<font color="#E5E5E5"> see that this is a quite an</font>

91
00:03:17,890 --> 00:03:21,578
important sector to work<font color="#CCCCCC"> to</font><font color="#E5E5E5"> take a look</font>

92
00:03:19,540 --> 00:03:23,980
at as<font color="#E5E5E5"> well it's</font><font color="#CCCCCC"> used</font><font color="#E5E5E5"> in defense</font>

93
00:03:21,579 --> 00:03:25,690
applications a<font color="#CCCCCC"> lot too one</font><font color="#E5E5E5"> example but</font>

94
00:03:23,980 --> 00:03:27,910
just one out of<font color="#E5E5E5"> many is the fact that</font>

95
00:03:25,690 --> 00:03:30,430
it's used in<font color="#E5E5E5"> the Harris Falcon</font><font color="#CCCCCC"> 3 line of</font>

96
00:03:27,910 --> 00:03:32,340
tactical radios<font color="#CCCCCC"> work UNIX forms the</font>

97
00:03:30,430 --> 00:03:35,049
basis of the operating<font color="#E5E5E5"> system there and</font>

98
00:03:32,340 --> 00:03:37,269
<font color="#CCCCCC">you can find it in medical sector as</font>

99
00:03:35,049 --> 00:03:40,140
well surgical robots such as the one by

100
00:03:37,269 --> 00:03:43,120
DLR or<font color="#CCCCCC"> it's used in micro surgery</font>

101
00:03:40,140 --> 00:03:46,750
applications another very interesting

102
00:03:43,120 --> 00:03:48,220
use case is in carrier routers<font color="#E5E5E5"> because Q</font>

103
00:03:46,750 --> 00:03:51,010
<font color="#CCCCCC">and X</font><font color="#E5E5E5"> as you can see on the right</font><font color="#CCCCCC"> of the</font>

104
00:03:48,220 --> 00:03:53,730
slide<font color="#E5E5E5"> from the basis of Cisco's iOS 6</font>

105
00:03:51,010 --> 00:03:59,078
<font color="#CCCCCC">are operating system which runs</font><font color="#E5E5E5"> on the</font><font color="#CCCCCC"> C</font>

106
00:03:53,730 --> 00:04:00,790
<font color="#CCCCCC">rs.12000 and</font><font color="#E5E5E5"> ASR 9000 series and neuro</font>

107
00:03:59,079 --> 00:04:02,530
of course many<font color="#E5E5E5"> many more critical</font>

108
00:04:00,790 --> 00:04:04,660
systems where you<font color="#E5E5E5"> can find Q annex from</font>

109
00:04:02,530 --> 00:04:06,910
<font color="#CCCCCC">inertial</font><font color="#E5E5E5"> control</font><font color="#CCCCCC"> sectors such as</font><font color="#E5E5E5"> surface</font>

110
00:04:04,660 --> 00:04:08,859
mining control turbine controllers<font color="#CCCCCC"> to</font>

111
00:04:06,910 --> 00:04:12,310
defense<font color="#E5E5E5"> and aerospace such as anti-tank</font>

112
00:04:08,859 --> 00:04:14,650
guidance or UAVs<font color="#E5E5E5"> real safety equipments</font>

113
00:04:12,310 --> 00:04:16,060
and cancer therapy machines so this

114
00:04:14,650 --> 00:04:18,180
should be<font color="#E5E5E5"> sufficient reason to be</font>

115
00:04:16,060 --> 00:04:20,048
<font color="#E5E5E5">interested in the security of Q and X</font>

116
00:04:18,180 --> 00:04:22,150
now<font color="#CCCCCC"> what</font>

117
00:04:20,048 --> 00:04:23,710
some of you might have<font color="#E5E5E5"> seen my talk at</font>

118
00:04:22,150 --> 00:04:27,159
and not<font color="#E5E5E5"> last year's but the year before</font>

119
00:04:23,710 --> 00:04:29,258
<font color="#E5E5E5">that wheel</font><font color="#CCCCCC"> of fortune and the CCC which</font>

120
00:04:27,159 --> 00:04:31,210
discussed<font color="#CCCCCC"> PRNG</font><font color="#E5E5E5"> issues and various</font>

121
00:04:29,259 --> 00:04:33,759
embedded operating<font color="#E5E5E5"> systems including</font><font color="#CCCCCC"> cue</font>

122
00:04:31,210 --> 00:04:36,280
<font color="#E5E5E5">annex now in this talk I will discuss</font>

123
00:04:33,759 --> 00:04:38,020
<font color="#CCCCCC">new cue annex 7 user space in kernel</font>

124
00:04:36,280 --> 00:04:41,080
space<font color="#E5E5E5"> peering G's which were introduced</font>

125
00:04:38,020 --> 00:04:42,729
as part<font color="#E5E5E5"> of</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> assessment</font><font color="#CCCCCC"> or as a</font>

126
00:04:41,080 --> 00:04:45,430
<font color="#E5E5E5">result of that assessment I should say</font>

127
00:04:42,729 --> 00:04:47,139
and the exploit mitigations in Kunik<font color="#CCCCCC"> 6 &</font>

128
00:04:45,430 --> 00:04:49,539
<font color="#CCCCCC">7 which have not been discussed before</font>

129
00:04:47,139 --> 00:04:50,860
<font color="#E5E5E5">yet so let's start off with</font><font color="#CCCCCC"> the</font>

130
00:04:49,539 --> 00:04:52,030
operating<font color="#CCCCCC"> system</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> security</font>

131
00:04:50,860 --> 00:04:54,699
architecture of<font color="#CCCCCC"> QNX</font>

132
00:04:52,030 --> 00:04:56,440
<font color="#CCCCCC">ik UNIX</font><font color="#E5E5E5"> is a true microkernel</font>

133
00:04:54,699 --> 00:04:57,819
architecture which means that only the

134
00:04:56,440 --> 00:04:59,560
<font color="#E5E5E5">most basic operating system</font>

135
00:04:57,819 --> 00:05:01,449
<font color="#CCCCCC">functionalities such as the scheduler</font>

136
00:04:59,560 --> 00:05:03,669
<font color="#E5E5E5">message passing and interrupt handling</font>

137
00:05:01,449 --> 00:05:05,530
is located in the kernel<font color="#E5E5E5"> you can see on</font>

138
00:05:03,669 --> 00:05:07,690
<font color="#E5E5E5">the on the left while all other</font>

139
00:05:05,530 --> 00:05:09,818
functionality is included in user space

140
00:05:07,690 --> 00:05:11,590
<font color="#CCCCCC">so</font><font color="#E5E5E5"> these things run a separate processes</font>

141
00:05:09,819 --> 00:05:14,139
outside of the kernel and<font color="#E5E5E5"> that includes</font>

142
00:05:11,590 --> 00:05:16,179
traditional<font color="#E5E5E5"> functionality which would be</font>

143
00:05:14,139 --> 00:05:18,370
<font color="#E5E5E5">located in the kernel in a monolithic</font>

144
00:05:16,180 --> 00:05:20,020
<font color="#E5E5E5">operating system such as file system</font>

145
00:05:18,370 --> 00:05:21,280
functionality various kinds<font color="#E5E5E5"> of drivers</font>

146
00:05:20,020 --> 00:05:24,310
protocol stacks

147
00:05:21,280 --> 00:05:27,489
<font color="#CCCCCC">you name it and the result of this is</font>

148
00:05:24,310 --> 00:05:29,620
that<font color="#E5E5E5"> it's a much more robust operating</font>

149
00:05:27,490 --> 00:05:32,259
system because<font color="#E5E5E5"> if one of these operating</font>

150
00:05:29,620 --> 00:05:33,789
<font color="#E5E5E5">components system components fails and</font>

151
00:05:32,259 --> 00:05:37,560
it doesn't bring<font color="#CCCCCC"> down the entire kernel</font>

152
00:05:33,789 --> 00:05:41,500
with it<font color="#E5E5E5"> so that allows for great use in</font>

153
00:05:37,560 --> 00:05:43,479
<font color="#E5E5E5">safety and survivability applications in</font>

154
00:05:41,500 --> 00:05:45,039
<font color="#E5E5E5">order for these components of the</font>

155
00:05:43,479 --> 00:05:47,560
operating system to<font color="#CCCCCC"> communicate with</font>

156
00:05:45,039 --> 00:05:49,210
each<font color="#E5E5E5"> other</font><font color="#CCCCCC"> qnx works by IPC message</font>

157
00:05:47,560 --> 00:05:51,069
passing<font color="#E5E5E5"> and this is basically a</font>

158
00:05:49,210 --> 00:05:53,020
client-server architecture<font color="#E5E5E5"> where you</font>

159
00:05:51,069 --> 00:05:55,169
have a<font color="#E5E5E5"> client application such as some</font>

160
00:05:53,020 --> 00:05:57,818
process<font color="#E5E5E5"> running in user space</font>

161
00:05:55,169 --> 00:05:59,770
<font color="#E5E5E5">communicating with another functionality</font>

162
00:05:57,819 --> 00:06:02,169
<font color="#E5E5E5">of the operating system or a protocol</font>

163
00:05:59,770 --> 00:06:03,698
stack or a driver residing user<font color="#E5E5E5"> space</font>

164
00:06:02,169 --> 00:06:06,520
<font color="#E5E5E5">and communicating through the</font>

165
00:06:03,699 --> 00:06:08,080
microkernel<font color="#E5E5E5"> by passing</font><font color="#CCCCCC"> messages which</font>

166
00:06:06,520 --> 00:06:12,909
<font color="#E5E5E5">are specific</font><font color="#CCCCCC"> to this</font><font color="#E5E5E5"> particular</font>

167
00:06:08,080 --> 00:06:15,340
functionality so the attack surface

168
00:06:12,909 --> 00:06:19,029
roughly looks as<font color="#E5E5E5"> follows as you can see</font>

169
00:06:15,340 --> 00:06:20,799
here on the slide<font color="#CCCCCC"> now on the right</font><font color="#E5E5E5"> side</font>

170
00:06:19,029 --> 00:06:22,719
you have<font color="#CCCCCC"> the</font><font color="#E5E5E5"> remote attack surface</font><font color="#CCCCCC"> Fork</font>

171
00:06:20,800 --> 00:06:25,080
<font color="#CCCCCC">UNIX which consists of</font><font color="#E5E5E5"> the network</font>

172
00:06:22,719 --> 00:06:28,899
managers various kinds<font color="#E5E5E5"> of packet drivers</font>

173
00:06:25,080 --> 00:06:30,789
<font color="#E5E5E5">protocol modules different things like</font>

174
00:06:28,899 --> 00:06:31,630
the communications device drivers<font color="#CCCCCC"> and</font>

175
00:06:30,789 --> 00:06:34,150
various networks

176
00:06:31,630 --> 00:06:36,070
services which are used to in<font color="#E5E5E5"> most UNIX</font>

177
00:06:34,150 --> 00:06:38,260
environments and on the left<font color="#E5E5E5"> you have</font>

178
00:06:36,070 --> 00:06:40,540
the<font color="#E5E5E5"> local attack surface which consists</font>

179
00:06:38,260 --> 00:06:43,300
of that process manager<font color="#E5E5E5"> the path manager</font>

180
00:06:40,540 --> 00:06:46,570
<font color="#E5E5E5">memory manager resource managers for</font>

181
00:06:43,300 --> 00:06:48,670
various custom<font color="#E5E5E5"> IO and lures the PPS</font>

182
00:06:46,570 --> 00:06:50,290
architecture and various kinds<font color="#CCCCCC"> of device</font>

183
00:06:48,670 --> 00:06:52,990
<font color="#E5E5E5">drivers which might be written by</font>

184
00:06:50,290 --> 00:06:55,390
<font color="#CCCCCC">third-party applications file system</font>

185
00:06:52,990 --> 00:06:57,100
graphics and audio stuff<font color="#E5E5E5"> and of course</font>

186
00:06:55,390 --> 00:06:58,870
there's the microkernel itself but

187
00:06:57,100 --> 00:07:00,610
because<font color="#CCCCCC"> there is so little functionality</font>

188
00:06:58,870 --> 00:07:03,970
in there<font color="#E5E5E5"> the attack surface there</font><font color="#CCCCCC"> is</font>

189
00:07:00,610 --> 00:07:06,220
very limited<font color="#CCCCCC"> as well</font><font color="#E5E5E5"> on the plus side</font>

190
00:07:03,970 --> 00:07:08,080
for<font color="#E5E5E5"> attackers at least is the fact that</font>

191
00:07:06,220 --> 00:07:11,440
you<font color="#E5E5E5"> don't actually need</font><font color="#CCCCCC"> to attack the</font>

192
00:07:08,080 --> 00:07:13,919
microkernel<font color="#E5E5E5"> to get root access attacking</font>

193
00:07:11,440 --> 00:07:16,660
one<font color="#CCCCCC"> of the processes that</font><font color="#E5E5E5"> runners</font><font color="#CCCCCC"> root</font>

194
00:07:13,920 --> 00:07:20,110
<font color="#E5E5E5">locally can be sufficient for elevating</font>

195
00:07:16,660 --> 00:07:22,150
privileges as well so a<font color="#E5E5E5"> little bit about</font>

196
00:07:20,110 --> 00:07:24,550
blackberry<font color="#E5E5E5"> and by the communiques</font>

197
00:07:22,150 --> 00:07:27,460
security history so there<font color="#CCCCCC"> hasn't been a</font>

198
00:07:24,550 --> 00:07:28,870
<font color="#E5E5E5">ton of research out there most of the</font>

199
00:07:27,460 --> 00:07:30,520
research that<font color="#E5E5E5"> has</font><font color="#CCCCCC"> been</font><font color="#E5E5E5"> out</font><font color="#CCCCCC"> there has</font>

200
00:07:28,870 --> 00:07:32,350
been a byproduct of the<font color="#E5E5E5"> BlackBerry</font>

201
00:07:30,520 --> 00:07:37,090
<font color="#E5E5E5">mobile research mainly in the period</font>

202
00:07:32,350 --> 00:07:39,880
from<font color="#CCCCCC"> 2011 to 2014 this was followed</font><font color="#E5E5E5"> by</font>

203
00:07:37,090 --> 00:07:42,070
some research on Kunik<font color="#CCCCCC"> sie PCP PS and</font>

204
00:07:39,880 --> 00:07:45,340
kernel call security<font color="#E5E5E5"> by Alex Plaskett at</font>

205
00:07:42,070 --> 00:07:47,320
all in 2016 various individual

206
00:07:45,340 --> 00:07:49,570
vulnerabilities were discovered over<font color="#E5E5E5"> the</font>

207
00:07:47,320 --> 00:07:52,180
<font color="#CCCCCC">years as you</font><font color="#E5E5E5"> can see on the pie</font><font color="#CCCCCC"> chart on</font>

208
00:07:49,570 --> 00:07:54,040
the right this was mainly set<font color="#CCCCCC"> UID logic</font>

209
00:07:52,180 --> 00:07:56,800
bugs<font color="#E5E5E5"> and various kinds of memory</font>

210
00:07:54,040 --> 00:07:59,940
<font color="#CCCCCC">corruption issues</font><font color="#E5E5E5"> buffer overflows and</font>

211
00:07:56,800 --> 00:08:03,130
so on<font color="#CCCCCC"> what's</font><font color="#E5E5E5"> interesting</font><font color="#CCCCCC"> to see</font><font color="#E5E5E5"> is that</font>

212
00:07:59,940 --> 00:08:05,290
<font color="#CCCCCC">you can find a lot of set UID logic bugs</font>

213
00:08:03,130 --> 00:08:08,290
that you<font color="#E5E5E5"> would expect</font><font color="#CCCCCC"> to encounter in a</font>

214
00:08:05,290 --> 00:08:11,110
very old unix-like system you know<font color="#E5E5E5"> if</font>

215
00:08:08,290 --> 00:08:13,390
you go<font color="#E5E5E5"> back to the early 2000s there are</font>

216
00:08:11,110 --> 00:08:15,610
a lot of memory corruption<font color="#E5E5E5"> issues in</font>

217
00:08:13,390 --> 00:08:17,650
various standard utility still even in

218
00:08:15,610 --> 00:08:20,140
the graphical<font color="#E5E5E5"> user interface</font><font color="#CCCCCC"> that were</font>

219
00:08:17,650 --> 00:08:21,940
<font color="#E5E5E5">discovered and lots of insecure</font>

220
00:08:20,140 --> 00:08:24,669
permission settings so this was the

221
00:08:21,940 --> 00:08:27,840
attack surface<font color="#E5E5E5"> in the security history</font>

222
00:08:24,670 --> 00:08:30,640
when<font color="#E5E5E5"> I started</font><font color="#CCCCCC"> looking at Unix</font>

223
00:08:27,840 --> 00:08:33,640
another interesting<font color="#CCCCCC"> thing</font><font color="#E5E5E5"> to notice is</font>

224
00:08:30,640 --> 00:08:36,370
that<font color="#CCCCCC"> Q Nix had received some interest</font>

225
00:08:33,640 --> 00:08:38,590
from<font color="#E5E5E5"> the CIA</font><font color="#CCCCCC"> which was revealed</font><font color="#E5E5E5"> in the</font>

226
00:08:36,370 --> 00:08:40,469
WikiLeaks<font color="#E5E5E5"> fall</font><font color="#CCCCCC"> seven releases or they</font>

227
00:08:38,590 --> 00:08:43,810
listed it as one<font color="#CCCCCC"> of the targets for</font><font color="#E5E5E5"> the</font>

228
00:08:40,469 --> 00:08:44,340
embedded development<font color="#E5E5E5"> branch because of</font>

229
00:08:43,809 --> 00:08:47,040
its use

230
00:08:44,340 --> 00:08:49,560
in<font color="#E5E5E5"> automotive systems now they hadn't</font>

231
00:08:47,040 --> 00:08:51,300
done<font color="#E5E5E5"> any work as of 2014 according</font><font color="#CCCCCC"> to</font>

232
00:08:49,560 --> 00:08:53,459
<font color="#E5E5E5">the leaks of course we don't know if</font>

233
00:08:51,300 --> 00:08:55,859
anything<font color="#CCCCCC"> has advanced past that</font>

234
00:08:53,460 --> 00:08:57,930
so to summarize there has been no prior

235
00:08:55,860 --> 00:09:00,000
work on exploit mitigations or<font color="#CCCCCC"> peering</font>

236
00:08:57,930 --> 00:09:01,949
<font color="#CCCCCC">G's Fork</font><font color="#E5E5E5"> UNIX up until this</font><font color="#CCCCCC"> point and</font>

237
00:09:00,000 --> 00:09:04,740
there has been<font color="#E5E5E5"> almost no prior work on</font>

238
00:09:01,950 --> 00:09:08,490
any<font color="#E5E5E5"> of the internals so far but that's</font>

239
00:09:04,740 --> 00:09:10,380
changing<font color="#CCCCCC"> so to start off Kunik supports</font>

240
00:09:08,490 --> 00:09:12,870
a minimal set of<font color="#E5E5E5"> native system calls</font>

241
00:09:10,380 --> 00:09:14,640
<font color="#E5E5E5">because it's true microkernel and these</font>

242
00:09:12,870 --> 00:09:16,920
system calls<font color="#E5E5E5"> mainly related to threading</font>

243
00:09:14,640 --> 00:09:18,600
message passing signals clocks<font color="#E5E5E5"> interrupt</font>

244
00:09:16,920 --> 00:09:20,880
handlers and<font color="#E5E5E5"> all this very basic</font>

245
00:09:18,600 --> 00:09:22,980
functionality and for comparison<font color="#CCCCCC"> q Nix</font>

246
00:09:20,880 --> 00:09:25,560
has less<font color="#CCCCCC"> than 90 system calls compared</font>

247
00:09:22,980 --> 00:09:27,390
to Linux which is<font color="#E5E5E5"> over 300 so you can</font>

248
00:09:25,560 --> 00:09:29,280
see how lightweight and<font color="#E5E5E5"> have small the</font>

249
00:09:27,390 --> 00:09:31,380
attack surface for the microkernel is

250
00:09:29,280 --> 00:09:33,839
here<font color="#E5E5E5"> the prototypes</font><font color="#CCCCCC"> release</font><font color="#E5E5E5"> things are</font>

251
00:09:31,380 --> 00:09:36,810
defined<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the neutrino</font><font color="#E5E5E5"> dot H header</font>

252
00:09:33,840 --> 00:09:38,760
file of<font color="#E5E5E5"> course because it's a POSIX</font>

253
00:09:36,810 --> 00:09:40,229
<font color="#E5E5E5">compliant operating system it does</font>

254
00:09:38,760 --> 00:09:42,360
implement<font color="#E5E5E5"> all the system call</font>

255
00:09:40,230 --> 00:09:44,160
functionality that comes with<font color="#E5E5E5"> it at</font>

256
00:09:42,360 --> 00:09:46,200
<font color="#CCCCCC">weight does this is by implementing</font>

257
00:09:44,160 --> 00:09:48,150
these functions in Lib C as message

258
00:09:46,200 --> 00:09:50,130
passing<font color="#CCCCCC"> stops</font><font color="#E5E5E5"> which basically</font><font color="#CCCCCC"> wrap</font>

259
00:09:48,150 --> 00:09:51,840
<font color="#CCCCCC">around calls to other uses space</font>

260
00:09:50,130 --> 00:09:55,530
processes which actually implement<font color="#E5E5E5"> it</font>

261
00:09:51,840 --> 00:09:57,840
instead of native system<font color="#E5E5E5"> calls the way</font>

262
00:09:55,530 --> 00:10:00,150
<font color="#CCCCCC">this works is native system</font><font color="#E5E5E5"> calls are</font>

263
00:09:57,840 --> 00:10:04,440
invoked with the usual instructions<font color="#CCCCCC"> sis</font>

264
00:10:00,150 --> 00:10:08,069
<font color="#E5E5E5">enter interrupt 0 X 28 as WI or</font><font color="#CCCCCC"> SP see</font>

265
00:10:04,440 --> 00:10:11,820
on<font color="#E5E5E5"> arm SC on PowerPC the system call</font>

266
00:10:08,070 --> 00:10:14,940
number is<font color="#E5E5E5"> located in</font><font color="#CCCCCC"> a X on x86 on</font>

267
00:10:11,820 --> 00:10:18,840
register 12 on arm and on register 0 on

268
00:10:14,940 --> 00:10:21,030
<font color="#E5E5E5">PPC and the listings for for this system</font>

269
00:10:18,840 --> 00:10:23,400
<font color="#E5E5E5">called invocation stubs</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> in kernel</font>

270
00:10:21,030 --> 00:10:27,000
calls<font color="#E5E5E5"> of age and the system call entry</font>

271
00:10:23,400 --> 00:10:29,370
point in the<font color="#E5E5E5"> in the microkernel is</font>

272
00:10:27,000 --> 00:10:31,860
located at the<font color="#CCCCCC"> Kerr entry or curses</font>

273
00:10:29,370 --> 00:10:34,110
enter symbol and here the registers are

274
00:10:31,860 --> 00:10:36,540
saved<font color="#E5E5E5"> switch is</font><font color="#CCCCCC"> made to the kernel stack</font>

275
00:10:34,110 --> 00:10:38,220
the active kernel thread is retrieved

276
00:10:36,540 --> 00:10:40,560
<font color="#E5E5E5">and then we wait</font><font color="#CCCCCC"> until we are on the</font>

277
00:10:38,220 --> 00:10:42,990
right CPU and we acquire a kernel and

278
00:10:40,560 --> 00:10:45,449
actually dispatch<font color="#CCCCCC"> the kernel call which</font>

279
00:10:42,990 --> 00:10:48,830
is done by<font color="#CCCCCC"> a</font><font color="#E5E5E5"> simple call to</font><font color="#CCCCCC"> the system</font>

280
00:10:45,450 --> 00:10:53,090
<font color="#E5E5E5">called index in the kernel called table</font>

281
00:10:48,830 --> 00:10:53,090
so the<font color="#E5E5E5"> communiques boot process</font>

282
00:10:55,820 --> 00:11:01,140
Nik UNIX boot process works by after

283
00:10:58,620 --> 00:11:03,600
<font color="#E5E5E5">power on having</font><font color="#CCCCCC"> hardware being</font>

284
00:11:01,140 --> 00:11:06,029
initialized<font color="#E5E5E5"> then having the initial</font>

285
00:11:03,600 --> 00:11:09,660
program<font color="#CCCCCC"> loader the IPL copy the</font><font color="#E5E5E5"> image</font>

286
00:11:06,029 --> 00:11:12,240
file system<font color="#E5E5E5"> the</font><font color="#CCCCCC"> ifs to RAM then you get</font>

287
00:11:09,660 --> 00:11:13,980
a startup program which depends<font color="#E5E5E5"> on</font><font color="#CCCCCC"> the</font>

288
00:11:12,240 --> 00:11:15,660
kind of architecture<font color="#E5E5E5"> around for</font><font color="#CCCCCC"> example</font>

289
00:11:13,980 --> 00:11:17,520
a startup program for the<font color="#E5E5E5"> BIOS if</font>

290
00:11:15,660 --> 00:11:19,699
there's one present which configures the

291
00:11:17,520 --> 00:11:22,140
<font color="#E5E5E5">system interrupt controllers and so on</font>

292
00:11:19,700 --> 00:11:25,050
which then passes<font color="#CCCCCC"> control to the actual</font>

293
00:11:22,140 --> 00:11:27,029
microkernel<font color="#E5E5E5"> called proc antio onk UNIX</font>

294
00:11:25,050 --> 00:11:29,189
which sets up the kernel<font color="#E5E5E5"> and then runs</font>

295
00:11:27,029 --> 00:11:31,470
the<font color="#E5E5E5"> boot file a build file such as a</font>

296
00:11:29,190 --> 00:11:33,960
boot script<font color="#E5E5E5"> which initializes the</font>

297
00:11:31,470 --> 00:11:35,790
drivers in user space<font color="#E5E5E5"> and our operating</font>

298
00:11:33,960 --> 00:11:39,420
system components<font color="#CCCCCC"> and then the full</font>

299
00:11:35,790 --> 00:11:41,490
system<font color="#E5E5E5"> is initialized AK</font><font color="#CCCCCC"> UNIX firmware</font>

300
00:11:39,420 --> 00:11:43,800
is relatively straightforward<font color="#CCCCCC"> there are</font>

301
00:11:41,490 --> 00:11:46,680
very<font color="#CCCCCC"> various q Nix operating system</font>

302
00:11:43,800 --> 00:11:49,500
packages Kunik<font color="#E5E5E5"> Skaar Kunik safety</font><font color="#CCCCCC"> Unix</font>

303
00:11:46,680 --> 00:11:51,660
medical but under the hood these are all

304
00:11:49,500 --> 00:11:53,550
roughly<font color="#CCCCCC"> the same it's all the same try</font>

305
00:11:51,660 --> 00:11:56,069
<font color="#E5E5E5">no microkernel and the core services</font>

306
00:11:53,550 --> 00:11:59,390
binaries are the same as well the only

307
00:11:56,070 --> 00:12:01,770
differences here<font color="#E5E5E5"> are really unusual and</font>

308
00:11:59,390 --> 00:12:05,279
binaries<font color="#CCCCCC"> that you find packaged with the</font>

309
00:12:01,770 --> 00:12:07,589
decor<font color="#E5E5E5"> and the microkernel binaries the</font>

310
00:12:05,279 --> 00:12:09,240
<font color="#CCCCCC">QX images come in three flavors an</font>

311
00:12:07,589 --> 00:12:11,550
operating system image which is<font color="#E5E5E5"> called</font>

312
00:12:09,240 --> 00:12:14,580
the ifs and pictured on the right<font color="#E5E5E5"> of the</font>

313
00:12:11,550 --> 00:12:17,069
slide<font color="#E5E5E5"> well it looks like a flash file</font>

314
00:12:14,580 --> 00:12:18,779
system image called<font color="#E5E5E5"> the EFS and then we</font>

315
00:12:17,070 --> 00:12:21,480
have an embedded<font color="#E5E5E5"> transaction file system</font>

316
00:12:18,779 --> 00:12:23,730
image called the<font color="#E5E5E5"> ETFs and these can be</font>

317
00:12:21,480 --> 00:12:26,220
combined into<font color="#CCCCCC"> a single image stored on a</font>

318
00:12:23,730 --> 00:12:28,320
<font color="#E5E5E5">NAND flash chip as you can see on the</font>

319
00:12:26,220 --> 00:12:30,089
right<font color="#CCCCCC"> of the of the</font><font color="#E5E5E5"> slide so this is how</font>

320
00:12:28,320 --> 00:12:33,690
you might encounter<font color="#E5E5E5"> this in some</font>

321
00:12:30,089 --> 00:12:36,120
embedded<font color="#E5E5E5"> systems now unpacking it is</font>

322
00:12:33,690 --> 00:12:38,459
very easy because<font color="#E5E5E5"> UNIX has provided us</font>

323
00:12:36,120 --> 00:12:40,380
<font color="#E5E5E5">with a dump ifs and dump EFS utilities</font>

324
00:12:38,459 --> 00:12:42,750
<font color="#E5E5E5">so if you encounter a firmware</font><font color="#CCCCCC"> image and</font>

325
00:12:40,380 --> 00:12:46,560
you chop<font color="#CCCCCC"> it into</font><font color="#E5E5E5"> the EFS</font><font color="#CCCCCC"> and the EFS</font>

326
00:12:42,750 --> 00:12:48,360
faul faul segments then you can quickly

327
00:12:46,560 --> 00:12:50,040
unpack it with these standard utilities

328
00:12:48,360 --> 00:12:53,700
<font color="#CCCCCC">that have been provided by</font><font color="#E5E5E5"> communiques</font>

329
00:12:50,040 --> 00:12:55,589
<font color="#E5E5E5">and the Kunik memory layout is divided</font>

330
00:12:53,700 --> 00:12:58,650
into<font color="#E5E5E5"> a kernel space part and a user</font>

331
00:12:55,589 --> 00:13:01,140
<font color="#E5E5E5">space part which are separated so</font><font color="#CCCCCC"> that</font>

332
00:12:58,650 --> 00:13:04,160
<font color="#CCCCCC">only the microkernel truly runs into</font>

333
00:13:01,140 --> 00:13:05,810
kernel space<font color="#E5E5E5"> user space has separate</font>

334
00:13:04,160 --> 00:13:08,750
of sensitive code from regular

335
00:13:05,810 --> 00:13:10,758
applications<font color="#E5E5E5"> by means of virtual</font><font color="#CCCCCC"> private</font>

336
00:13:08,750 --> 00:13:13,550
memory<font color="#E5E5E5"> at least if a memory management</font>

337
00:13:10,759 --> 00:13:16,279
<font color="#E5E5E5">unit is present on part of the</font><font color="#CCCCCC"> hardware</font>

338
00:13:13,550 --> 00:13:18,290
<font color="#E5E5E5">and this allows you to enforce unix-like</font>

339
00:13:16,279 --> 00:13:21,800
process access controls<font color="#E5E5E5"> as you can see</font>

340
00:13:18,290 --> 00:13:23,959
on the bottom<font color="#E5E5E5"> of the slide</font><font color="#CCCCCC"> AK UNIX user</font>

341
00:13:21,800 --> 00:13:26,569
management is really<font color="#E5E5E5"> what you're used to</font>

342
00:13:23,959 --> 00:13:28,609
<font color="#E5E5E5">in most unix-like environments if your</font>

343
00:13:26,569 --> 00:13:31,599
user and file permission model<font color="#E5E5E5"> which is</font>

344
00:13:28,610 --> 00:13:34,399
all mostly<font color="#E5E5E5"> the same etc</font><font color="#CCCCCC"> pass</font><font color="#E5E5E5"> would be</font>

345
00:13:31,600 --> 00:13:36,079
group and<font color="#CCCCCC"> shadow files</font><font color="#E5E5E5"> you have</font><font color="#CCCCCC"> the</font>

346
00:13:34,399 --> 00:13:37,819
usual<font color="#CCCCCC"> login</font><font color="#E5E5E5"> utilities you have some</font>

347
00:13:36,079 --> 00:13:40,339
support<font color="#E5E5E5"> for mandatory access control</font>

348
00:13:37,819 --> 00:13:43,699
listings<font color="#E5E5E5"> and what's interesting is that</font>

349
00:13:40,339 --> 00:13:45,680
<font color="#CCCCCC">qx6 hashes use</font><font color="#E5E5E5"> sha-256</font>

350
00:13:43,699 --> 00:13:48,378
or<font color="#E5E5E5"> five one two by default</font><font color="#CCCCCC"> but there is</font>

351
00:13:45,680 --> 00:13:51,969
big<font color="#E5E5E5"> backwards compatibility support for</font>

352
00:13:48,379 --> 00:13:54,680
md5<font color="#CCCCCC"> des crypt and a legacy Kunik script</font>

353
00:13:51,970 --> 00:13:55,970
hashing scheme which<font color="#E5E5E5"> is not really a</font>

354
00:13:54,680 --> 00:13:58,459
hashing<font color="#CCCCCC"> scheme because it's fully</font>

355
00:13:55,970 --> 00:13:59,000
invertible as you can see on the right

356
00:13:58,459 --> 00:14:01,939
<font color="#CCCCCC">of the slide</font>

357
00:13:59,000 --> 00:14:03,649
news posting from<font color="#E5E5E5"> 2000 and what's</font>

358
00:14:01,939 --> 00:14:06,740
interesting<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> this backwards</font>

359
00:14:03,649 --> 00:14:09,500
compatibility is enabled<font color="#E5E5E5"> in some systems</font>

360
00:14:06,740 --> 00:14:12,290
for backwards<font color="#CCCCCC"> compatibility support</font><font color="#E5E5E5"> with</font>

361
00:14:09,500 --> 00:14:14,810
older<font color="#E5E5E5"> build images so you might still</font>

362
00:14:12,290 --> 00:14:18,170
encounter punic<font color="#CCCCCC"> 6 images</font><font color="#E5E5E5"> where you have</font>

363
00:14:14,810 --> 00:14:19,969
des crypt or md5<font color="#E5E5E5"> and that's interesting</font>

364
00:14:18,170 --> 00:14:21,680
<font color="#CCCCCC">for embedded systems because a crack</font>

365
00:14:19,970 --> 00:14:23,750
root or maintenance password<font color="#CCCCCC"> in embedded</font>

366
00:14:21,680 --> 00:14:25,930
<font color="#CCCCCC">systems can have a very high shelf life</font>

367
00:14:23,750 --> 00:14:28,069
because of course updates are not<font color="#E5E5E5"> as</font>

368
00:14:25,930 --> 00:14:30,290
frequent<font color="#E5E5E5"> there as you might expect in</font>

369
00:14:28,069 --> 00:14:33,439
the<font color="#E5E5E5"> general-purpose world as of</font><font color="#CCCCCC"> queuing</font>

370
00:14:30,290 --> 00:14:36,410
X 7 or patched versions of<font color="#CCCCCC"> Kunik 6.6 the</font>

371
00:14:33,439 --> 00:14:39,230
default hashing scheme is pbkdf2<font color="#CCCCCC"> I would</font>

372
00:14:36,410 --> 00:14:43,370
<font color="#E5E5E5">sha-256 or sha-512 so that's an</font>

373
00:14:39,230 --> 00:14:44,990
improvement<font color="#CCCCCC"> qnx process management</font><font color="#E5E5E5"> is</font>

374
00:14:43,370 --> 00:14:47,389
<font color="#E5E5E5">done by the process manager which is</font>

375
00:14:44,990 --> 00:14:49,939
<font color="#E5E5E5">combined with</font><font color="#CCCCCC"> a microkernel</font><font color="#E5E5E5"> in one</font>

376
00:14:47,389 --> 00:14:52,819
executable<font color="#CCCCCC"> and it runs as a</font><font color="#E5E5E5"> root process</font>

377
00:14:49,939 --> 00:14:54,349
with PID<font color="#E5E5E5"> 1 and invokes a microkernel in</font>

378
00:14:52,819 --> 00:14:56,300
the same way as every other process

379
00:14:54,350 --> 00:14:58,910
despite<font color="#E5E5E5"> the fact that it's packaged with</font>

380
00:14:56,300 --> 00:15:02,149
within<font color="#E5E5E5"> the same executable</font><font color="#CCCCCC"> but it has a</font>

381
00:14:58,910 --> 00:15:04,490
special<font color="#E5E5E5"> flag which allows it to call a</font>

382
00:15:02,149 --> 00:15:06,350
specific<font color="#CCCCCC"> system call called</font><font color="#E5E5E5"> ring</font><font color="#CCCCCC"> zero</font>

383
00:15:04,490 --> 00:15:08,449
which allows you<font color="#E5E5E5"> to execute arbitrary</font>

384
00:15:06,350 --> 00:15:11,600
code within ring<font color="#E5E5E5"> zero if you're in</font>

385
00:15:08,449 --> 00:15:13,579
<font color="#CCCCCC">possession of this</font><font color="#E5E5E5"> this process flag</font><font color="#CCCCCC"> at</font>

386
00:15:11,600 --> 00:15:15,100
our support for usual POSIX<font color="#CCCCCC"> stuff spawn</font>

387
00:15:13,579 --> 00:15:17,589
<font color="#CCCCCC">fork exact</font><font color="#E5E5E5"> all the</font><font color="#CCCCCC"> can</font>

388
00:15:15,100 --> 00:15:20,080
stuff<font color="#E5E5E5"> and</font><font color="#CCCCCC"> qnx uses the elf format for</font>

389
00:15:17,590 --> 00:15:22,480
its binaries<font color="#CCCCCC"> what's</font><font color="#E5E5E5"> interesting to</font><font color="#CCCCCC"> note</font>

390
00:15:20,080 --> 00:15:24,850
<font color="#CCCCCC">is is</font><font color="#E5E5E5"> that if the filesystem</font><font color="#CCCCCC"> is on a</font>

391
00:15:22,480 --> 00:15:26,890
block oriented device<font color="#E5E5E5"> code and data are</font>

392
00:15:24,850 --> 00:15:29,200
loaded into main memory<font color="#E5E5E5"> but if the</font>

393
00:15:26,890 --> 00:15:31,689
<font color="#CCCCCC">filesystem is on</font><font color="#E5E5E5"> a memory map device for</font>

394
00:15:29,200 --> 00:15:33,220
<font color="#CCCCCC">example on flash it can be executed in</font>

395
00:15:31,690 --> 00:15:35,370
place which<font color="#E5E5E5"> means that multiple</font>

396
00:15:33,220 --> 00:15:38,350
instances of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> same</font><font color="#E5E5E5"> process will share</font>

397
00:15:35,370 --> 00:15:42,190
code memory that's something to keep in

398
00:15:38,350 --> 00:15:44,950
<font color="#CCCCCC">mind Kunik support for process abilities</font>

399
00:15:42,190 --> 00:15:46,360
<font color="#E5E5E5">in a form of proc manager ability which</font>

400
00:15:44,950 --> 00:15:48,220
is<font color="#CCCCCC"> very similar</font><font color="#E5E5E5"> to the</font><font color="#CCCCCC"> Linux</font>

401
00:15:46,360 --> 00:15:49,900
capabilities model<font color="#E5E5E5"> you can obtain</font>

402
00:15:48,220 --> 00:15:51,520
capabilities<font color="#E5E5E5"> before dropping root</font>

403
00:15:49,900 --> 00:15:54,160
privileges if you want to be able<font color="#E5E5E5"> to do</font>

404
00:15:51,520 --> 00:15:56,530
some<font color="#E5E5E5"> things but not allow all of</font><font color="#CCCCCC"> the</font>

405
00:15:54,160 --> 00:15:58,900
things to a particular process you can

406
00:15:56,530 --> 00:16:01,510
restrict<font color="#E5E5E5"> actions for even root processes</font>

407
00:15:58,900 --> 00:16:04,510
in this way and this<font color="#E5E5E5"> is integral to</font><font color="#CCCCCC"> q</font>

408
00:16:01,510 --> 00:16:07,210
<font color="#CCCCCC">and XS rootless execution security model</font>

409
00:16:04,510 --> 00:16:09,490
by ensuring some degree of<font color="#CCCCCC"> the principle</font>

410
00:16:07,210 --> 00:16:11,890
of<font color="#E5E5E5"> least privilege abilities have</font><font color="#CCCCCC"> a</font>

411
00:16:09,490 --> 00:16:14,680
<font color="#CCCCCC">domain</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> rude</font><font color="#E5E5E5"> users or non-root users</font>

412
00:16:11,890 --> 00:16:16,930
they have<font color="#CCCCCC"> a</font><font color="#E5E5E5"> range restricting it to</font>

413
00:16:14,680 --> 00:16:19,150
<font color="#E5E5E5">certain values inheritability lock</font>

414
00:16:16,930 --> 00:16:20,859
ability<font color="#CCCCCC"> etcetera so</font><font color="#E5E5E5"> you can for</font><font color="#CCCCCC"> example</font>

415
00:16:19,150 --> 00:16:22,870
if you want<font color="#E5E5E5"> to be able to use the</font><font color="#CCCCCC"> spawn</font>

416
00:16:20,860 --> 00:16:24,250
<font color="#CCCCCC">set your ID system call you can restrict</font>

417
00:16:22,870 --> 00:16:25,990
<font color="#E5E5E5">the range for the set you Eddie's</font>

418
00:16:24,250 --> 00:16:28,180
they're allowed to be<font color="#E5E5E5"> spawned by a</font>

419
00:16:25,990 --> 00:16:30,220
certain process<font color="#E5E5E5"> and you can specify</font>

420
00:16:28,180 --> 00:16:33,609
custom<font color="#E5E5E5"> abilities as</font><font color="#CCCCCC"> well if you're a</font>

421
00:16:30,220 --> 00:16:35,740
system<font color="#E5E5E5"> integrator now there are some</font>

422
00:16:33,610 --> 00:16:37,600
<font color="#CCCCCC">limitations to</font><font color="#E5E5E5"> this model which are not</font>

423
00:16:35,740 --> 00:16:40,420
<font color="#E5E5E5">actually included in the documentation</font>

424
00:16:37,600 --> 00:16:43,450
<font color="#E5E5E5">or discussed</font><font color="#CCCCCC"> out there if</font><font color="#E5E5E5"> people want to</font>

425
00:16:40,420 --> 00:16:44,920
adopt a rootless execution model<font color="#E5E5E5"> so it's</font>

426
00:16:43,450 --> 00:16:47,350
up to<font color="#CCCCCC"> the developers and the system</font>

427
00:16:44,920 --> 00:16:48,939
<font color="#E5E5E5">integrators to really get</font><font color="#CCCCCC"> this right you</font>

428
00:16:47,350 --> 00:16:51,070
need<font color="#E5E5E5"> to watch out with inheritability</font>

429
00:16:48,940 --> 00:16:53,380
because in heritability is inheritable

430
00:16:51,070 --> 00:16:55,390
itself<font color="#E5E5E5"> and that means that if you want</font>

431
00:16:53,380 --> 00:16:57,670
an ability to be inheritable by a child

432
00:16:55,390 --> 00:16:59,710
process<font color="#CCCCCC"> but not by the child processes</font>

433
00:16:57,670 --> 00:17:02,650
<font color="#E5E5E5">of that child process then you need to</font>

434
00:16:59,710 --> 00:17:05,710
explicitly<font color="#E5E5E5"> state this some system calls</font>

435
00:17:02,650 --> 00:17:08,170
<font color="#CCCCCC">honor</font><font color="#E5E5E5"> this inheritability others do not</font>

436
00:17:05,710 --> 00:17:10,090
<font color="#E5E5E5">and this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> very well documented</font>

437
00:17:08,170 --> 00:17:12,130
which<font color="#E5E5E5"> do and which do not</font>

438
00:17:10,089 --> 00:17:14,109
some functionality remains<font color="#E5E5E5"> uncovered by</font>

439
00:17:12,130 --> 00:17:16,330
capabilities<font color="#CCCCCC"> file</font><font color="#E5E5E5"> system functionality</font>

440
00:17:14,109 --> 00:17:18,069
for example networking functionality<font color="#CCCCCC"> so</font>

441
00:17:16,329 --> 00:17:20,740
don't treat this like an actual sandbox

442
00:17:18,069 --> 00:17:22,450
which some people<font color="#E5E5E5"> do but it's not some</font>

443
00:17:20,740 --> 00:17:24,730
capabilities don't have ranges<font color="#E5E5E5"> for</font>

444
00:17:22,450 --> 00:17:26,339
<font color="#E5E5E5">example if you want to be able to spawn</font>

445
00:17:24,730 --> 00:17:28,230
processes you cannot specify

446
00:17:26,339 --> 00:17:30,240
which process you<font color="#CCCCCC"> are allowed to</font><font color="#E5E5E5"> spawn</font>

447
00:17:28,230 --> 00:17:32,669
in which you are<font color="#E5E5E5"> not various</font>

448
00:17:30,240 --> 00:17:34,500
capabilities<font color="#CCCCCC"> can be used to elevate</font>

449
00:17:32,669 --> 00:17:36,900
privileges to<font color="#CCCCCC"> route</font><font color="#E5E5E5"> even if you're not</font>

450
00:17:34,500 --> 00:17:38,850
<font color="#CCCCCC">and some of these are very</font><font color="#E5E5E5"> clear for</font>

451
00:17:36,900 --> 00:17:40,679
<font color="#CCCCCC">example the spawns at UID system call</font>

452
00:17:38,850 --> 00:17:42,689
but in some other<font color="#E5E5E5"> cases</font><font color="#CCCCCC"> it's not that</font>

453
00:17:40,679 --> 00:17:45,240
clear for<font color="#CCCCCC"> example the 8</font><font color="#E5E5E5"> interrupts all</font>

454
00:17:42,690 --> 00:17:47,370
it's not<font color="#E5E5E5"> a true sandbox and you can see</font>

455
00:17:45,240 --> 00:17:49,590
here why for example<font color="#CCCCCC"> let's say you</font><font color="#E5E5E5"> have</font>

456
00:17:47,370 --> 00:17:52,199
a low<font color="#E5E5E5"> privilege child process and you</font>

457
00:17:49,590 --> 00:17:53,970
have<font color="#CCCCCC"> IO and intra privileges</font><font color="#E5E5E5"> then you</font>

458
00:17:52,200 --> 00:17:55,919
can use this to attach a custom

459
00:17:53,970 --> 00:17:57,929
interrupt service routine handler which

460
00:17:55,919 --> 00:18:00,090
runs in kernel<font color="#CCCCCC"> space and allows you to</font>

461
00:17:57,929 --> 00:18:02,760
invoke arbitrary<font color="#CCCCCC"> microkernel code</font>

462
00:18:00,090 --> 00:18:05,459
<font color="#E5E5E5">obviously</font><font color="#CCCCCC"> for security people</font><font color="#E5E5E5"> it's it's</font>

463
00:18:02,760 --> 00:18:06,990
<font color="#CCCCCC">very you know obvious</font><font color="#E5E5E5"> to say well if I</font>

464
00:18:05,460 --> 00:18:09,360
can run an interrupt<font color="#CCCCCC"> service routine</font>

465
00:18:06,990 --> 00:18:10,830
then<font color="#E5E5E5"> I can execute within microkernel</font>

466
00:18:09,360 --> 00:18:13,199
and then it's game over

467
00:18:10,830 --> 00:18:14,939
but for system integrators who<font color="#CCCCCC"> can</font><font color="#E5E5E5"> come</font>

468
00:18:13,200 --> 00:18:16,529
from<font color="#E5E5E5"> a security background this is not</font>

469
00:18:14,940 --> 00:18:19,140
<font color="#E5E5E5">that clear especially of all these</font>

470
00:18:16,529 --> 00:18:23,340
<font color="#E5E5E5">different calls and the implications are</font>

471
00:18:19,140 --> 00:18:25,740
not well documented<font color="#E5E5E5"> another interesting</font>

472
00:18:23,340 --> 00:18:28,678
part<font color="#E5E5E5"> of the attack surface is</font><font color="#CCCCCC"> qnet</font><font color="#E5E5E5"> which</font>

473
00:18:25,740 --> 00:18:30,779
is a native networking protocol which<font color="#E5E5E5"> is</font>

474
00:18:28,679 --> 00:18:33,690
laid<font color="#CCCCCC"> on top of anything</font><font color="#E5E5E5"> with a packet</font>

475
00:18:30,779 --> 00:18:36,330
driver<font color="#E5E5E5"> so</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> previously discussed the IPC</font>

476
00:18:33,690 --> 00:18:37,470
security model and this can be extended

477
00:18:36,330 --> 00:18:39,570
using<font color="#CCCCCC"> qnet</font>

478
00:18:37,470 --> 00:18:42,090
so instead of having the communication

479
00:18:39,570 --> 00:18:44,279
<font color="#CCCCCC">between</font><font color="#E5E5E5"> components and one microkernel</font>

480
00:18:42,090 --> 00:18:46,678
<font color="#CCCCCC">you can</font><font color="#E5E5E5"> extend this over any kind of</font>

481
00:18:44,279 --> 00:18:48,899
interconnect so Ethernet or some kind of

482
00:18:46,679 --> 00:18:51,270
serial<font color="#E5E5E5"> link or whatever</font><font color="#CCCCCC"> and then you can</font>

483
00:18:48,899 --> 00:18:53,459
lay<font color="#E5E5E5"> qnet on top of that and communicate</font>

484
00:18:51,270 --> 00:18:56,039
<font color="#CCCCCC">between different</font><font color="#E5E5E5"> components and</font>

485
00:18:53,460 --> 00:18:59,630
different<font color="#E5E5E5"> micro kernels</font><font color="#CCCCCC"> so you can have</font>

486
00:18:56,039 --> 00:19:02,370
a distributed computing application

487
00:18:59,630 --> 00:19:04,860
which interesting is that<font color="#E5E5E5"> this is very</font>

488
00:19:02,370 --> 00:19:06,989
useful for<font color="#CCCCCC"> applications such as</font><font color="#E5E5E5"> inter</font>

489
00:19:04,860 --> 00:19:08,760
module communication in industrial

490
00:19:06,990 --> 00:19:10,529
control systems let's say you have a

491
00:19:08,760 --> 00:19:12,629
factory floor<font color="#CCCCCC"> and</font><font color="#E5E5E5"> you have one</font>

492
00:19:10,529 --> 00:19:14,190
application<font color="#CCCCCC"> which is distributed</font><font color="#E5E5E5"> among</font>

493
00:19:12,630 --> 00:19:15,929
different<font color="#E5E5E5"> machines and you want these to</font>

494
00:19:14,190 --> 00:19:17,820
be<font color="#E5E5E5"> able to communicate with the same</font>

495
00:19:15,929 --> 00:19:20,039
microkernel then you can use this

496
00:19:17,820 --> 00:19:21,658
application<font color="#E5E5E5"> it's useful in automotive</font>

497
00:19:20,039 --> 00:19:23,340
<font color="#E5E5E5">for example if you want to share a</font>

498
00:19:21,659 --> 00:19:26,309
cellular modem<font color="#E5E5E5"> or a Bluetooth</font>

499
00:19:23,340 --> 00:19:28,770
transceiver among many ECU's in some

500
00:19:26,309 --> 00:19:31,408
automotive application and it's used in

501
00:19:28,770 --> 00:19:34,049
large routers with multiple interface

502
00:19:31,409 --> 00:19:38,429
cards for example<font color="#CCCCCC"> the lwm IPC and</font>

503
00:19:34,049 --> 00:19:38,850
Cisco's iOS<font color="#E5E5E5"> X</font><font color="#CCCCCC"> are operating system the</font>

504
00:19:38,429 --> 00:19:42,030
way

505
00:19:38,850 --> 00:19:44,730
it works qnet<font color="#E5E5E5"> is that once you plug in</font>

506
00:19:42,030 --> 00:19:47,220
this this driver the net directory is

507
00:19:44,730 --> 00:19:48,630
populated by<font color="#CCCCCC"> a discovered or mapped qnet</font>

508
00:19:47,220 --> 00:19:53,370
<font color="#CCCCCC">nodes as you can see on the</font><font color="#E5E5E5"> slide here</font>

509
00:19:48,630 --> 00:19:55,350
<font color="#CCCCCC">and it's really</font><font color="#E5E5E5"> meant to be used among</font>

510
00:19:53,370 --> 00:19:57,719
trusted notes this<font color="#CCCCCC"> is what they say so</font>

511
00:19:55,350 --> 00:20:00,179
they<font color="#E5E5E5"> say you know don't expect much</font>

512
00:19:57,720 --> 00:20:02,160
security<font color="#CCCCCC"> wise it's meant</font><font color="#E5E5E5"> to be used only</font>

513
00:20:00,180 --> 00:20:05,100
<font color="#E5E5E5">among trusts at nodes but while this</font>

514
00:20:02,160 --> 00:20:07,320
<font color="#E5E5E5">might have been true in</font><font color="#CCCCCC"> the past many of</font>

515
00:20:05,100 --> 00:20:09,510
these<font color="#E5E5E5"> nodes can no longer be considered</font>

516
00:20:07,320 --> 00:20:11,669
trusted in many embedded environments

517
00:20:09,510 --> 00:20:13,770
for<font color="#CCCCCC"> example another motive system which</font>

518
00:20:11,670 --> 00:20:15,660
might<font color="#E5E5E5"> have been closed</font><font color="#CCCCCC"> now might have an</font>

519
00:20:13,770 --> 00:20:18,389
infotainment or a telematics unit with

520
00:20:15,660 --> 00:20:20,040
an<font color="#E5E5E5"> internet facing or network facing a</font>

521
00:20:18,390 --> 00:20:22,320
text surface so you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> no longer</font>

522
00:20:20,040 --> 00:20:25,200
consider<font color="#E5E5E5"> all of the nodes on that</font>

523
00:20:22,320 --> 00:20:27,330
particular<font color="#E5E5E5"> Network trusted qnet does not</font>

524
00:20:25,200 --> 00:20:29,820
have any kind<font color="#E5E5E5"> of authentication</font><font color="#CCCCCC"> it</font>

525
00:20:27,330 --> 00:20:31,770
simply passes<font color="#CCCCCC"> a user ID as part of</font><font color="#E5E5E5"> the Q</font>

526
00:20:29,820 --> 00:20:34,980
<font color="#E5E5E5">net packet to a remote</font><font color="#CCCCCC"> machine and then</font>

527
00:20:31,770 --> 00:20:36,389
<font color="#E5E5E5">it trusts</font><font color="#CCCCCC"> that you're not lying this</font><font color="#E5E5E5"> is</font>

528
00:20:34,980 --> 00:20:38,820
interesting<font color="#E5E5E5"> because you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> execute</font>

529
00:20:36,390 --> 00:20:41,100
commands remotely over<font color="#E5E5E5"> Q net as you can</font>

530
00:20:38,820 --> 00:20:43,560
see on the<font color="#E5E5E5"> slide here</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> a local machine</font>

531
00:20:41,100 --> 00:20:45,510
<font color="#CCCCCC">and there I'm executing it</font><font color="#E5E5E5"> on a remote</font>

532
00:20:43,560 --> 00:20:48,000
node<font color="#E5E5E5"> and executing this command without</font>

533
00:20:45,510 --> 00:20:49,920
any<font color="#CCCCCC"> kind of authentication this</font><font color="#E5E5E5"> means</font>

534
00:20:48,000 --> 00:20:53,070
<font color="#E5E5E5">that if I</font><font color="#CCCCCC"> compromised a single qnx</font>

535
00:20:49,920 --> 00:20:55,200
machine on a<font color="#CCCCCC"> network with multiple qnx</font>

536
00:20:53,070 --> 00:20:57,030
machines<font color="#E5E5E5"> or the</font><font color="#CCCCCC"> underlying</font><font color="#E5E5E5"> network link</font>

537
00:20:55,200 --> 00:20:59,130
<font color="#E5E5E5">then</font><font color="#CCCCCC"> I have</font><font color="#E5E5E5"> access</font><font color="#CCCCCC"> to all the Q net</font>

538
00:20:57,030 --> 00:21:01,370
nodes at the<font color="#E5E5E5"> particular UID level I</font>

539
00:20:59,130 --> 00:21:03,840
already possess<font color="#CCCCCC"> on my own machine</font>

540
00:21:01,370 --> 00:21:06,449
there's no Q net packet integrity or

541
00:21:03,840 --> 00:21:08,610
authentication so I can forge<font color="#E5E5E5"> these even</font>

542
00:21:06,450 --> 00:21:11,370
if I'm not<font color="#CCCCCC"> rude on my local</font><font color="#E5E5E5"> machine then</font>

543
00:21:08,610 --> 00:21:13,740
I can still<font color="#CCCCCC"> Forge</font><font color="#E5E5E5"> a route ID now there</font>

544
00:21:11,370 --> 00:21:15,719
is some kind<font color="#E5E5E5"> of protection here in the</font>

545
00:21:13,740 --> 00:21:18,330
form of<font color="#E5E5E5"> the map any and map route</font>

546
00:21:15,720 --> 00:21:20,820
<font color="#E5E5E5">options which are simple similar to the</font>

547
00:21:18,330 --> 00:21:23,429
<font color="#E5E5E5">BSD and</font><font color="#CCCCCC"> the vests options and this</font>

548
00:21:20,820 --> 00:21:26,129
allows you<font color="#E5E5E5"> to map any incoming UID to a</font>

549
00:21:23,430 --> 00:21:27,690
low privileged<font color="#E5E5E5"> UID so that means that on</font>

550
00:21:26,130 --> 00:21:29,910
a<font color="#E5E5E5"> particular machine if I receive an</font>

551
00:21:27,690 --> 00:21:32,100
<font color="#E5E5E5">incoming packet</font><font color="#CCCCCC"> I can say regardless</font><font color="#E5E5E5"> of</font>

552
00:21:29,910 --> 00:21:34,320
whether<font color="#CCCCCC"> it's route or whatever</font><font color="#E5E5E5"> I map it</font>

553
00:21:32,100 --> 00:21:37,409
<font color="#CCCCCC">to</font><font color="#E5E5E5"> nobody</font><font color="#CCCCCC"> and at least limit some of the</font>

554
00:21:34,320 --> 00:21:39,510
harm the problem is that<font color="#E5E5E5"> this was not</font>

555
00:21:37,410 --> 00:21:41,850
<font color="#E5E5E5">implemented fully correctly I discovered</font>

556
00:21:39,510 --> 00:21:44,490
a elevation of<font color="#E5E5E5"> privileged vulnerability</font>

557
00:21:41,850 --> 00:21:46,770
here read permissions of any operations

558
00:21:44,490 --> 00:21:48,930
executed<font color="#CCCCCC"> over Q</font><font color="#E5E5E5"> net are not properly</font>

559
00:21:46,770 --> 00:21:51,270
resolved by the resource manager and it

560
00:21:48,930 --> 00:21:51,660
allows<font color="#E5E5E5"> for arbitrary remote read access</font>

561
00:21:51,270 --> 00:21:53,580
over

562
00:21:51,660 --> 00:21:55,890
<font color="#E5E5E5">Union regardless of privileges and this</font>

563
00:21:53,580 --> 00:21:58,139
can also<font color="#E5E5E5"> be used of course for</font><font color="#CCCCCC"> local</font>

564
00:21:55,890 --> 00:21:59,370
arbitrary read access by making a read

565
00:21:58,140 --> 00:22:01,920
<font color="#CCCCCC">rug</font><font color="#E5E5E5"> request</font>

566
00:21:59,370 --> 00:22:03,929
originated from a remote node<font color="#E5E5E5"> so instead</font>

567
00:22:01,920 --> 00:22:06,720
of<font color="#E5E5E5"> reading locally</font><font color="#CCCCCC"> I dispatch it</font><font color="#E5E5E5"> through</font>

568
00:22:03,930 --> 00:22:08,640
Q<font color="#E5E5E5"> net over a remote node to actually</font>

569
00:22:06,720 --> 00:22:10,950
disclose the local shadow file

570
00:22:08,640 --> 00:22:13,950
<font color="#E5E5E5">regardless of my low privileges as you</font>

571
00:22:10,950 --> 00:22:16,200
can see there this bypasses<font color="#CCCCCC"> these map</font>

572
00:22:13,950 --> 00:22:18,540
<font color="#CCCCCC">M&E and map</font><font color="#E5E5E5"> route settings patches</font>

573
00:22:16,200 --> 00:22:20,520
available<font color="#CCCCCC"> but</font><font color="#E5E5E5"> Q net security is really</font>

574
00:22:18,540 --> 00:22:23,850
fundamentally broken if<font color="#E5E5E5"> you encounter Q</font>

575
00:22:20,520 --> 00:22:27,180
net<font color="#E5E5E5"> in an embedded</font><font color="#CCCCCC"> says setting you're</font>

576
00:22:23,850 --> 00:22:28,409
<font color="#CCCCCC">usually golden Q niché's has great</font>

577
00:22:27,180 --> 00:22:30,600
debugging capabilities

578
00:22:28,410 --> 00:22:34,590
sorry Zack UNIX moment x ide which

579
00:22:30,600 --> 00:22:37,230
integrates gdb debugger capabilities<font color="#CCCCCC"> by</font>

580
00:22:34,590 --> 00:22:39,179
means of the PD bug utility this allows

581
00:22:37,230 --> 00:22:42,900
for process level debugging over serial

582
00:22:39,180 --> 00:22:45,420
or tcp/ip<font color="#CCCCCC"> this is wrapped by the Q con</font>

583
00:22:42,900 --> 00:22:47,520
utility which is used for<font color="#CCCCCC"> remote IDE</font>

584
00:22:45,420 --> 00:22:50,760
connectivity this starts the<font color="#E5E5E5"> PD buck</font>

585
00:22:47,520 --> 00:22:52,500
utility on port 8000<font color="#E5E5E5"> a great thing to</font>

586
00:22:50,760 --> 00:22:54,980
notice is again here is no

587
00:22:52,500 --> 00:22:57,810
authentication<font color="#CCCCCC"> so if system integrators</font>

588
00:22:54,980 --> 00:22:59,490
<font color="#E5E5E5">failed to remove the debugging utility</font>

589
00:22:57,810 --> 00:23:02,250
then you can<font color="#E5E5E5"> upload or download files</font>

590
00:22:59,490 --> 00:23:03,780
<font color="#E5E5E5">and run anything as</font><font color="#CCCCCC"> route by default on</font>

591
00:23:02,250 --> 00:23:06,480
<font color="#E5E5E5">this system and there's already a</font>

592
00:23:03,780 --> 00:23:09,360
Metasploit module for this<font color="#CCCCCC"> so keep an</font>

593
00:23:06,480 --> 00:23:11,220
eye<font color="#CCCCCC"> out for that debugging</font><font color="#E5E5E5"> is also</font>

594
00:23:09,360 --> 00:23:13,139
facilitated by the dumper utility which

595
00:23:11,220 --> 00:23:15,360
<font color="#E5E5E5">is a service</font><font color="#CCCCCC"> that produces post crash</font>

596
00:23:13,140 --> 00:23:18,690
core dumps<font color="#E5E5E5"> by default in the for dumps</font>

597
00:23:15,360 --> 00:23:20,219
directory<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> also direct lead dump</font>

598
00:23:18,690 --> 00:23:21,900
or running process using this utility

599
00:23:20,220 --> 00:23:23,850
<font color="#E5E5E5">and this is very nice for</font><font color="#CCCCCC"> integration</font>

600
00:23:21,900 --> 00:23:26,280
<font color="#E5E5E5">into fuzzers if you want to collect all</font>

601
00:23:23,850 --> 00:23:28,199
<font color="#E5E5E5">these</font><font color="#CCCCCC"> post-mortem crashes</font><font color="#E5E5E5"> and there</font><font color="#CCCCCC"> is</font>

602
00:23:26,280 --> 00:23:30,840
<font color="#E5E5E5">also kernel debugging capability over</font>

603
00:23:28,200 --> 00:23:32,730
<font color="#E5E5E5">serial using K debug this needs</font><font color="#CCCCCC"> to be</font>

604
00:23:30,840 --> 00:23:35,100
included<font color="#E5E5E5"> with the</font><font color="#CCCCCC"> IFS because it's not</font>

605
00:23:32,730 --> 00:23:37,470
by default<font color="#CCCCCC"> you</font><font color="#E5E5E5"> may need to build this</font>

606
00:23:35,100 --> 00:23:39,480
from source<font color="#CCCCCC"> depending on the</font>

607
00:23:37,470 --> 00:23:41,430
architecture<font color="#CCCCCC"> you're using and</font><font color="#E5E5E5"> you need a</font>

608
00:23:39,480 --> 00:23:43,200
debuggable version of proc<font color="#CCCCCC"> antio for</font>

609
00:23:41,430 --> 00:23:45,330
this it's really<font color="#E5E5E5"> a pain in the ass to</font>

610
00:23:43,200 --> 00:23:49,860
get it working<font color="#E5E5E5"> but it can be done if you</font>

611
00:23:45,330 --> 00:23:51,929
<font color="#CCCCCC">have the time to spare finally kernel</font>

612
00:23:49,860 --> 00:23:55,500
dumps come in a<font color="#E5E5E5"> particular format as you</font>

613
00:23:51,930 --> 00:23:58,560
<font color="#E5E5E5">can see here you have your signal code</font>

614
00:23:55,500 --> 00:24:01,290
and fault<font color="#E5E5E5"> options which indicate which</font>

615
00:23:58,560 --> 00:24:02,668
can be looked<font color="#E5E5E5"> up in</font><font color="#CCCCCC"> the corresponding</font>

616
00:24:01,290 --> 00:24:04,499
header files

617
00:24:02,669 --> 00:24:06,450
you have the kernel<font color="#E5E5E5"> code and data</font>

618
00:24:04,499 --> 00:24:08,070
<font color="#E5E5E5">location where the crash</font><font color="#CCCCCC"> occurred you</font>

619
00:24:06,450 --> 00:24:09,600
have the kernel<font color="#E5E5E5"> state at the time</font><font color="#CCCCCC"> of the</font>

620
00:24:08,070 --> 00:24:12,928
crash you have the kernel stack<font color="#E5E5E5"> base</font>

621
00:24:09,600 --> 00:24:14,759
process and thread<font color="#E5E5E5"> IDs on the CPUs that</font>

622
00:24:12,929 --> 00:24:16,919
are currently active<font color="#CCCCCC"> processing</font><font color="#E5E5E5"> threat</font>

623
00:24:14,759 --> 00:24:19,109
flags basically<font color="#E5E5E5"> anything</font><font color="#CCCCCC"> you want to get</font>

624
00:24:16,919 --> 00:24:22,109
a good look and what cost a particular

625
00:24:19,109 --> 00:24:25,908
kernel crash so that<font color="#E5E5E5"> brings us to the</font>

626
00:24:22,109 --> 00:24:25,908
<font color="#E5E5E5">pseudo-random number generators</font>

627
00:24:33,150 --> 00:24:38,190
so why<font color="#E5E5E5"> take a look at the pier in</font><font color="#CCCCCC"> geez</font>

628
00:24:35,600 --> 00:24:39,899
<font color="#CCCCCC">well first of all because the</font><font color="#E5E5E5"> PNG is</font>

629
00:24:38,190 --> 00:24:42,270
form<font color="#E5E5E5"> the foundation of the wider</font>

630
00:24:39,900 --> 00:24:44,490
cryptographic ecosystem and received

631
00:24:42,270 --> 00:24:46,230
wisdom<font color="#E5E5E5"> for many developers and system</font>

632
00:24:44,490 --> 00:24:48,809
<font color="#E5E5E5">integrators is if you need secure</font>

633
00:24:46,230 --> 00:24:51,809
randomness<font color="#CCCCCC"> just use</font><font color="#E5E5E5"> that random and in</font>

634
00:24:48,809 --> 00:24:54,210
<font color="#CCCCCC">my opinion secure randomness provision</font>

635
00:24:51,809 --> 00:24:56,730
is a core task of any modern operating

636
00:24:54,210 --> 00:24:58,830
<font color="#CCCCCC">system so you should be able to expect</font>

637
00:24:56,730 --> 00:25:00,420
some<font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of secure pseudo-random number</font>

638
00:24:58,830 --> 00:25:03,000
generator<font color="#CCCCCC"> to be provided</font><font color="#E5E5E5"> by the</font>

639
00:25:00,420 --> 00:25:05,010
operating<font color="#E5E5E5"> system</font><font color="#CCCCCC"> secondly because the</font>

640
00:25:03,000 --> 00:25:07,260
strength<font color="#E5E5E5"> of some exploit mitigations</font>

641
00:25:05,010 --> 00:25:09,000
should depend in part on the strength<font color="#E5E5E5"> of</font>

642
00:25:07,260 --> 00:25:11,520
the<font color="#CCCCCC"> peer in G's</font><font color="#E5E5E5"> for example if I can</font>

643
00:25:09,000 --> 00:25:13,590
predict the stack<font color="#CCCCCC"> canary or the ASLR</font>

644
00:25:11,520 --> 00:25:15,450
addresses it makes exploit development a

645
00:25:13,590 --> 00:25:19,320
lot easier<font color="#E5E5E5"> so you want strong peer in</font>

646
00:25:15,450 --> 00:25:22,170
G's to be present on your system now<font color="#CCCCCC"> Q</font>

647
00:25:19,320 --> 00:25:24,240
Nix has<font color="#E5E5E5"> two security-oriented</font><font color="#CCCCCC"> peering</font>

648
00:25:22,170 --> 00:25:26,190
G's the first is the use<font color="#CCCCCC"> of space PNG</font>

649
00:25:24,240 --> 00:25:28,080
which is accessed through<font color="#E5E5E5"> the dev</font><font color="#CCCCCC"> random</font>

650
00:25:26,190 --> 00:25:30,420
interface and this is<font color="#E5E5E5"> handled by</font><font color="#CCCCCC"> the</font>

651
00:25:28,080 --> 00:25:31,230
user space service random which is run

652
00:25:30,420 --> 00:25:33,300
as root

653
00:25:31,230 --> 00:25:36,360
this is started after<font color="#E5E5E5"> boot by the</font>

654
00:25:33,300 --> 00:25:40,320
startup script<font color="#E5E5E5"> as you can see here it's</font>

655
00:25:36,360 --> 00:25:42,389
run run as a user<font color="#E5E5E5"> space service and then</font>

656
00:25:40,320 --> 00:25:44,730
<font color="#E5E5E5">you have a second kernel space PNG</font>

657
00:25:42,390 --> 00:25:46,410
<font color="#E5E5E5">introduced in</font><font color="#CCCCCC"> Kunik 7</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> is</font>

658
00:25:44,730 --> 00:25:48,210
implemented in<font color="#E5E5E5"> a microkernel as a</font>

659
00:25:46,410 --> 00:25:49,950
function named random value and this

660
00:25:48,210 --> 00:25:52,910
cannot be<font color="#E5E5E5"> accessed directly in the user</font>

661
00:25:49,950 --> 00:25:56,400
space<font color="#CCCCCC"> it's only</font><font color="#E5E5E5"> for kernel space</font>

662
00:25:52,910 --> 00:25:59,250
now the Kunik<font color="#E5E5E5"> 6 def random user space</font>

663
00:25:56,400 --> 00:26:02,670
PNG was covered in our talk wheel of

664
00:25:59,250 --> 00:26:05,670
<font color="#CCCCCC">fortune' at 33</font><font color="#E5E5E5"> c 3 so give a brief recap</font>

665
00:26:02,670 --> 00:26:08,370
<font color="#E5E5E5">here the underlying PNG is based on the</font>

666
00:26:05,670 --> 00:26:10,530
<font color="#CCCCCC">yellow PNG by Bruce Schneier at all but</font>

667
00:26:08,370 --> 00:26:12,449
it turned out to<font color="#CCCCCC"> be based on an older</font>

668
00:26:10,530 --> 00:26:14,700
<font color="#CCCCCC">version of yarrow and not the reference</font>

669
00:26:12,450 --> 00:26:17,330
<font color="#CCCCCC">hero 160 so it was a version that</font><font color="#E5E5E5"> was</font>

670
00:26:14,700 --> 00:26:19,650
put out<font color="#E5E5E5"> before</font><font color="#CCCCCC"> yarrow was</font><font color="#E5E5E5"> actually fully</font>

671
00:26:17,330 --> 00:26:21,809
will not standardized but fully

672
00:26:19,650 --> 00:26:23,309
finalized<font color="#E5E5E5"> and on top of</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> they</font>

673
00:26:21,809 --> 00:26:25,170
integrated<font color="#E5E5E5"> a bunch of sketchy</font>

674
00:26:23,309 --> 00:26:27,540
cryptographic design decisions or I'll

675
00:26:25,170 --> 00:26:32,520
save you the<font color="#E5E5E5"> details</font><font color="#CCCCCC"> but just to give</font>

676
00:26:27,540 --> 00:26:34,678
<font color="#CCCCCC">you an overview the boot time entropy</font>

677
00:26:32,520 --> 00:26:36,420
<font color="#E5E5E5">gathering happens on the top right you</font>

678
00:26:34,679 --> 00:26:38,790
have the clock time<font color="#E5E5E5"> the clock cycles the</font>

679
00:26:36,420 --> 00:26:40,559
process<font color="#CCCCCC"> pids and device names which were</font>

680
00:26:38,790 --> 00:26:42,840
all concatenated and pulled through

681
00:26:40,559 --> 00:26:46,029
sha-1<font color="#E5E5E5"> and that creates the initial</font><font color="#CCCCCC"> state</font>

682
00:26:42,840 --> 00:26:48,129
<font color="#CCCCCC">of course that that ensures terrible</font>

683
00:26:46,029 --> 00:26:50,169
<font color="#CCCCCC">diamond trip equality because you know</font>

684
00:26:48,129 --> 00:26:52,209
the process<font color="#E5E5E5"> IDs and the device names are</font>

685
00:26:50,169 --> 00:26:54,369
not<font color="#E5E5E5"> gonna vary on an embedded system</font><font color="#CCCCCC"> on</font>

686
00:26:52,210 --> 00:26:56,289
every<font color="#E5E5E5"> startup and the</font><font color="#CCCCCC"> clock cycles</font><font color="#E5E5E5"> and</font>

687
00:26:54,369 --> 00:26:58,408
clock time just provide<font color="#E5E5E5"> too little</font>

688
00:26:56,289 --> 00:27:01,090
entropy to make for a good initial<font color="#E5E5E5"> State</font>

689
00:26:58,409 --> 00:27:03,909
on top<font color="#E5E5E5"> of that they had broken receive</font>

690
00:27:01,090 --> 00:27:05,738
control<font color="#E5E5E5"> which meant</font><font color="#CCCCCC"> that the</font><font color="#E5E5E5"> the runtime</font>

691
00:27:03,909 --> 00:27:08,229
entropy collection which happens on<font color="#E5E5E5"> the</font>

692
00:27:05,739 --> 00:27:09,999
bottom of<font color="#E5E5E5"> the slide was implemented and</font>

693
00:27:08,229 --> 00:27:12,340
it was<font color="#E5E5E5"> running but they never actually</font>

694
00:27:09,999 --> 00:27:14,259
mixed any of the entropy gathered at

695
00:27:12,340 --> 00:27:16,119
<font color="#CCCCCC">runtime back into the pool again</font><font color="#E5E5E5"> so the</font>

696
00:27:14,259 --> 00:27:17,830
only entropy that<font color="#E5E5E5"> was in the system was</font>

697
00:27:16,119 --> 00:27:21,189
the one that was<font color="#E5E5E5"> present at boot time so</font>

698
00:27:17,830 --> 00:27:23,349
yeah that was quite<font color="#E5E5E5"> terrible then the</font>

699
00:27:21,190 --> 00:27:25,539
runtime<font color="#E5E5E5"> entropy selection was also left</font>

700
00:27:23,349 --> 00:27:28,539
up to system integrators<font color="#E5E5E5"> so they had to</font>

701
00:27:25,539 --> 00:27:31,119
decide for<font color="#E5E5E5"> example from what interrupt</font>

702
00:27:28,539 --> 00:27:33,309
sources<font color="#E5E5E5"> to gather their entropy and this</font>

703
00:27:31,119 --> 00:27:35,738
is kind of a hard decision<font color="#CCCCCC"> if you're not</font>

704
00:27:33,309 --> 00:27:37,269
a<font color="#E5E5E5"> security engineer so there was a lot</font>

705
00:27:35,739 --> 00:27:40,690
<font color="#CCCCCC">of rope</font><font color="#E5E5E5"> for people to hang themselves</font>

706
00:27:37,269 --> 00:27:41,859
with now<font color="#E5E5E5"> after our assessment of</font>

707
00:27:40,690 --> 00:27:46,299
<font color="#CCCCCC">communiques six</font>

708
00:27:41,859 --> 00:27:48,759
we contacted blackberry<font color="#E5E5E5"> and gave them</font>

709
00:27:46,299 --> 00:27:51,519
some some some design advice and they

710
00:27:48,759 --> 00:27:54,099
<font color="#E5E5E5">incorporated this into the nuke</font><font color="#CCCCCC"> UNIX dev</font>

711
00:27:51,519 --> 00:27:56,649
random<font color="#E5E5E5"> Kunik</font><font color="#CCCCCC"> seven dev random user space</font>

712
00:27:54,099 --> 00:27:58,418
<font color="#E5E5E5">PNG they now</font><font color="#CCCCCC"> use the Heimdall</font><font color="#E5E5E5"> fortuna</font>

713
00:27:56,649 --> 00:28:00,189
implementation and<font color="#E5E5E5"> they have some new</font>

714
00:27:58,419 --> 00:28:01,749
entropy sources they have new<font color="#CCCCCC"> reset</font>

715
00:28:00,190 --> 00:28:04,149
<font color="#E5E5E5">control mechanism the overall quality</font>

716
00:28:01,749 --> 00:28:06,429
<font color="#E5E5E5">seems much better than</font><font color="#CCCCCC"> qx6 and the</font>

717
00:28:04,149 --> 00:28:07,899
potential for weaknesses<font color="#E5E5E5"> still remains</font>

718
00:28:06,429 --> 00:28:10,929
depending on system integration

719
00:28:07,899 --> 00:28:12,699
conditions but is a little<font color="#CCCCCC"> bit</font><font color="#E5E5E5"> less so</font>

720
00:28:10,929 --> 00:28:15,909
what does it<font color="#E5E5E5"> look like</font><font color="#CCCCCC"> well it looks</font>

721
00:28:12,700 --> 00:28:19,089
like<font color="#E5E5E5"> this so the source is in green are</font>

722
00:28:15,909 --> 00:28:21,309
the<font color="#E5E5E5"> new sources on</font><font color="#CCCCCC"> Q and x7 so</font><font color="#E5E5E5"> now you</font>

723
00:28:19,089 --> 00:28:23,979
have a seed file source<font color="#E5E5E5"> which basically</font>

724
00:28:21,309 --> 00:28:25,869
means that once the system starts up<font color="#CCCCCC"> you</font>

725
00:28:23,979 --> 00:28:27,820
can specify a particular<font color="#E5E5E5"> file with some</font>

726
00:28:25,869 --> 00:28:29,439
entropy<font color="#E5E5E5"> and this will be used as boot</font>

727
00:28:27,820 --> 00:28:31,359
time entropy to be mixed into<font color="#E5E5E5"> the</font>

728
00:28:29,440 --> 00:28:33,580
<font color="#E5E5E5">entropy pool</font><font color="#CCCCCC"> and when the system shuts</font>

729
00:28:31,359 --> 00:28:35,289
down<font color="#E5E5E5"> it can write this to a file again</font>

730
00:28:33,580 --> 00:28:37,330
<font color="#E5E5E5">and</font><font color="#CCCCCC"> so you have new entropy for the next</font>

731
00:28:35,289 --> 00:28:39,039
boot and this<font color="#E5E5E5"> is to really address low</font>

732
00:28:37,330 --> 00:28:40,149
boot<font color="#E5E5E5"> time entropy conditions which are</font>

733
00:28:39,039 --> 00:28:42,249
<font color="#CCCCCC">really common</font><font color="#E5E5E5"> in embedded systems</font>

734
00:28:40,149 --> 00:28:45,639
<font color="#CCCCCC">because at boot time there's not a lot</font>

735
00:28:42,249 --> 00:28:47,830
of activity<font color="#CCCCCC"> going on the second new</font>

736
00:28:45,639 --> 00:28:49,389
source is the user supplied<font color="#E5E5E5"> entropy so</font>

737
00:28:47,830 --> 00:28:51,489
users can write our own entropy

738
00:28:49,389 --> 00:28:53,019
gathering daemon which can be<font color="#CCCCCC"> whatever</font>

739
00:28:51,489 --> 00:28:55,360
people want<font color="#CCCCCC"> depending</font><font color="#E5E5E5"> on the embedded</font>

740
00:28:53,019 --> 00:28:57,370
<font color="#E5E5E5">device they're using even</font>

741
00:28:55,360 --> 00:28:59,530
number generator<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> they can</font>

742
00:28:57,370 --> 00:29:02,469
simply write<font color="#E5E5E5"> to the dev random interface</font>

743
00:28:59,530 --> 00:29:03,700
and add<font color="#CCCCCC"> entropy to the pool it's</font>

744
00:29:02,470 --> 00:29:05,980
interesting to notice<font color="#E5E5E5"> that this</font>

745
00:29:03,700 --> 00:29:08,470
interface<font color="#E5E5E5"> is left right world writable</font>

746
00:29:05,980 --> 00:29:10,840
by<font color="#E5E5E5"> default which can be a problem</font>

747
00:29:08,470 --> 00:29:12,730
depending on how many<font color="#E5E5E5"> other entropy</font>

748
00:29:10,840 --> 00:29:15,129
sources have been<font color="#E5E5E5"> selected</font><font color="#CCCCCC"> so you might</font>

749
00:29:12,730 --> 00:29:18,160
want to watch out<font color="#CCCCCC"> for</font><font color="#E5E5E5"> that if you if you</font>

750
00:29:15,130 --> 00:29:20,410
encounter<font color="#E5E5E5"> a</font><font color="#CCCCCC"> UNIX system finally they</font>

751
00:29:18,160 --> 00:29:23,080
have a new<font color="#CCCCCC"> receipt source which works by</font>

752
00:29:20,410 --> 00:29:26,080
<font color="#CCCCCC">using</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> C</font><font color="#E5E5E5"> for random which basically</font>

753
00:29:23,080 --> 00:29:29,830
is seeded<font color="#E5E5E5"> with output of the PNG itself</font>

754
00:29:26,080 --> 00:29:31,659
which is<font color="#E5E5E5"> not bad</font><font color="#CCCCCC"> but in in addition it</font>

755
00:29:29,830 --> 00:29:34,000
uses the process ID again<font color="#E5E5E5"> the time of</font>

756
00:29:31,660 --> 00:29:36,669
<font color="#CCCCCC">day and</font><font color="#E5E5E5"> the user ID which are static so</font>

757
00:29:34,000 --> 00:29:39,370
that<font color="#E5E5E5"> doesn't add a whole lot it's better</font>

758
00:29:36,669 --> 00:29:43,390
but<font color="#CCCCCC"> it's still</font><font color="#E5E5E5"> not not perfect</font><font color="#CCCCCC"> to be</font>

759
00:29:39,370 --> 00:29:45,939
honest<font color="#CCCCCC"> in addition to the Qun x7 user</font>

760
00:29:43,390 --> 00:29:48,190
space PNG<font color="#CCCCCC"> is now also introduced colonel</font>

761
00:29:45,940 --> 00:29:50,530
PNG for<font color="#CCCCCC"> randomness that</font><font color="#E5E5E5"> is needed within</font>

762
00:29:48,190 --> 00:29:53,020
<font color="#E5E5E5">a microkernel itself because you know</font>

763
00:29:50,530 --> 00:29:55,200
the user space PNG starts up after boot

764
00:29:53,020 --> 00:29:56,679
and you might need early<font color="#E5E5E5"> boot randomness</font>

765
00:29:55,200 --> 00:30:00,549
the communiques

766
00:29:56,679 --> 00:30:01,960
<font color="#CCCCCC">seven kernel PNG is used for</font><font color="#E5E5E5"> a SLR stack</font>

767
00:30:00,549 --> 00:30:05,110
Canaries<font color="#CCCCCC"> and that kind</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> functionality</font>

768
00:30:01,960 --> 00:30:07,210
and it works basically<font color="#E5E5E5"> as follows so you</font>

769
00:30:05,110 --> 00:30:10,809
have a couple<font color="#CCCCCC"> of sources</font><font color="#E5E5E5"> clock cycles</font>

770
00:30:07,210 --> 00:30:12,190
the currently active process ID<font color="#E5E5E5"> the</font>

771
00:30:10,809 --> 00:30:15,850
currently<font color="#E5E5E5"> the current time in</font>

772
00:30:12,190 --> 00:30:17,620
nanoseconds<font color="#CCCCCC"> the wakeup timer which is</font>

773
00:30:15,850 --> 00:30:19,600
basically a timer<font color="#E5E5E5"> that is set for the</font>

774
00:30:17,620 --> 00:30:21,520
kernel to trigger some activity and

775
00:30:19,600 --> 00:30:23,949
various kinds<font color="#E5E5E5"> of these sources are all</font>

776
00:30:21,520 --> 00:30:27,129
concatenated<font color="#CCCCCC"> into one PNG input block</font>

777
00:30:23,950 --> 00:30:29,080
that's pulled through<font color="#E5E5E5"> sha-256 and that</font>

778
00:30:27,130 --> 00:30:31,780
results in<font color="#CCCCCC"> appear in</font><font color="#E5E5E5"> G state the spear</font>

779
00:30:29,080 --> 00:30:34,449
in G<font color="#E5E5E5"> state is chopped into 32 bit blocks</font>

780
00:30:31,780 --> 00:30:37,780
<font color="#E5E5E5">the first block is kept</font><font color="#CCCCCC"> secret</font><font color="#E5E5E5"> and is</font>

781
00:30:34,450 --> 00:30:40,330
stored as a salt<font color="#E5E5E5"> and the next block</font>

782
00:30:37,780 --> 00:30:42,910
that's output as a 32 bit random<font color="#E5E5E5"> value</font>

783
00:30:40,330 --> 00:30:45,220
and then when the<font color="#E5E5E5"> next call is made the</font>

784
00:30:42,910 --> 00:30:48,850
this salt<font color="#E5E5E5"> is included as part of the</font><font color="#CCCCCC"> new</font>

785
00:30:45,220 --> 00:30:50,410
input<font color="#E5E5E5"> and these boot then the next block</font>

786
00:30:48,850 --> 00:30:51,939
<font color="#E5E5E5">is taken the next block in the next</font>

787
00:30:50,410 --> 00:30:54,010
<font color="#E5E5E5">block</font><font color="#CCCCCC"> and the next block until the PNG</font>

788
00:30:51,940 --> 00:30:56,830
<font color="#E5E5E5">state is exhausted and then the whole</font>

789
00:30:54,010 --> 00:31:00,669
<font color="#E5E5E5">thing starts again</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> addition</font><font color="#CCCCCC"> to these</font>

790
00:30:56,830 --> 00:31:02,980
<font color="#CCCCCC">sources</font><font color="#E5E5E5"> there is now</font><font color="#CCCCCC"> also assist random</font>

791
00:31:00,669 --> 00:31:04,649
<font color="#E5E5E5">system call and this new system</font><font color="#CCCCCC"> call</font>

792
00:31:02,980 --> 00:31:08,789
<font color="#E5E5E5">which requires a certain</font>

793
00:31:04,649 --> 00:31:10,739
<font color="#CCCCCC">communiques capability allows users to</font>

794
00:31:08,789 --> 00:31:14,249
supply some randomness<font color="#E5E5E5"> for the</font><font color="#CCCCCC"> criminal</font>

795
00:31:10,740 --> 00:31:16,529
<font color="#CCCCCC">PNG as well</font><font color="#E5E5E5"> this is a big improvement</font>

796
00:31:14,249 --> 00:31:19,789
<font color="#E5E5E5">over</font><font color="#CCCCCC"> kianak 7 which did not have any</font>

797
00:31:16,529 --> 00:31:21,840
<font color="#E5E5E5">kind of secure and earnest in</font><font color="#CCCCCC"> the kernel</font>

798
00:31:19,789 --> 00:31:34,320
<font color="#E5E5E5">and this brings us</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the exploit</font>

799
00:31:21,840 --> 00:31:37,408
mitigations so weíll look at exploit

800
00:31:34,320 --> 00:31:39,090
mitigations well the mitigations in the

801
00:31:37,409 --> 00:31:41,249
<font color="#E5E5E5">general-purpose world didn't</font><font color="#CCCCCC"> come</font>

802
00:31:39,090 --> 00:31:44,070
<font color="#E5E5E5">falling from the sky and there is a</font>

803
00:31:41,249 --> 00:31:46,019
history<font color="#E5E5E5"> of weaknesses and bypasses in</font>

804
00:31:44,070 --> 00:31:48,149
the<font color="#E5E5E5"> general-purpose world which have led</font>

805
00:31:46,019 --> 00:31:50,100
<font color="#CCCCCC">to the</font><font color="#E5E5E5"> current state</font><font color="#CCCCCC"> of hardening</font><font color="#E5E5E5"> that</font>

806
00:31:48,149 --> 00:31:52,229
we've come<font color="#CCCCCC"> to</font><font color="#E5E5E5"> expect there for example</font>

807
00:31:50,100 --> 00:31:53,639
if you look at<font color="#CCCCCC"> Windows</font><font color="#E5E5E5"> it took years</font><font color="#CCCCCC"> and</font>

808
00:31:52,230 --> 00:31:56,659
<font color="#CCCCCC">years to get to the</font><font color="#E5E5E5"> point where we are</font>

809
00:31:53,639 --> 00:32:00,479
<font color="#CCCCCC">now and</font><font color="#E5E5E5"> the same holds for for</font><font color="#CCCCCC"> Linux and</font>

810
00:31:56,659 --> 00:32:03,119
<font color="#E5E5E5">smartphone operating systems iOS and we</font>

811
00:32:00,480 --> 00:32:05,340
don't have a history<font color="#CCCCCC"> like this in most</font>

812
00:32:03,119 --> 00:32:06,480
embedded systems<font color="#CCCCCC"> communiques doesn't</font>

813
00:32:05,340 --> 00:32:09,090
have a history<font color="#CCCCCC"> like this</font>

814
00:32:06,480 --> 00:32:11,399
so that's a reason<font color="#CCCCCC"> to start taking</font><font color="#E5E5E5"> an</font>

815
00:32:09,090 --> 00:32:13,320
offensive look and the implementations

816
00:32:11,399 --> 00:32:15,869
of<font color="#E5E5E5"> their</font><font color="#CCCCCC"> mitigation</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> I have to say</font>

817
00:32:13,320 --> 00:32:17,639
that<font color="#CCCCCC"> qnx is already</font><font color="#E5E5E5"> doing quite well</font>

818
00:32:15,869 --> 00:32:19,199
<font color="#E5E5E5">comparative to many other embedded</font>

819
00:32:17,639 --> 00:32:21,149
<font color="#E5E5E5">operating systems because they even</font>

820
00:32:19,200 --> 00:32:24,779
bother to implement any<font color="#CCCCCC"> mitigations in</font>

821
00:32:21,149 --> 00:32:26,639
the first place<font color="#E5E5E5"> so</font><font color="#CCCCCC"> CUNY to exploit</font>

822
00:32:24,779 --> 00:32:28,379
mitigations<font color="#CCCCCC"> for what does it have</font>

823
00:32:26,639 --> 00:32:30,508
support it has support<font color="#E5E5E5"> for data</font>

824
00:32:28,379 --> 00:32:32,399
<font color="#E5E5E5">execution prevention and as support for</font>

825
00:32:30,509 --> 00:32:34,379
address space layout randomization<font color="#E5E5E5"> and a</font>

826
00:32:32,399 --> 00:32:36,748
support for stack Canaries<font color="#E5E5E5"> and it has</font>

827
00:32:34,379 --> 00:32:39,449
support<font color="#E5E5E5"> for relocation read-only but</font>

828
00:32:36,749 --> 00:32:41,879
none of these<font color="#E5E5E5"> are enabled by default</font><font color="#CCCCCC"> so</font>

829
00:32:39,450 --> 00:32:45,360
yeah it might still<font color="#CCCCCC"> be that even if you</font>

830
00:32:41,879 --> 00:32:47,100
encounter latest version of<font color="#CCCCCC"> unix in a</font>

831
00:32:45,360 --> 00:32:49,289
system<font color="#E5E5E5"> that none of these medications</font>

832
00:32:47,100 --> 00:32:50,850
<font color="#E5E5E5">are actually enabled despite</font><font color="#CCCCCC"> them being</font>

833
00:32:49,289 --> 00:32:53,879
<font color="#E5E5E5">supported and it might still</font><font color="#CCCCCC"> be</font>

834
00:32:50,850 --> 00:32:57,029
exploding like it's the 90s but at least

835
00:32:53,879 --> 00:32:59,490
they they are supported in theory so the

836
00:32:57,029 --> 00:33:02,009
you should<font color="#E5E5E5"> surpass expect any kind of</font>

837
00:32:59,490 --> 00:33:03,720
support for advanced mitigation such as

838
00:33:02,009 --> 00:33:06,480
feed table protection control<font color="#E5E5E5"> flow</font>

839
00:33:03,720 --> 00:33:08,369
integrity<font color="#E5E5E5"> kernel data and code isolation</font>

840
00:33:06,480 --> 00:33:10,429
none of this is present just the<font color="#CCCCCC"> ones</font>

841
00:33:08,369 --> 00:33:14,340
<font color="#E5E5E5">that are listed here</font>

842
00:33:10,429 --> 00:33:16,540
<font color="#CCCCCC">QX</font><font color="#E5E5E5"> DP works by being based on hardware</font>

843
00:33:14,340 --> 00:33:20,860
<font color="#E5E5E5">based DP support the</font>

844
00:33:16,540 --> 00:33:21,730
a bit on on x86 the<font color="#CCCCCC"> example</font><font color="#E5E5E5"> on arm that</font>

845
00:33:20,860 --> 00:33:23,620
kind of stuff

846
00:33:21,730 --> 00:33:25,930
there is support for<font color="#E5E5E5"> the x86</font>

847
00:33:23,620 --> 00:33:29,050
architecture<font color="#CCCCCC"> for the</font><font color="#E5E5E5"> ARM architecture</font>

848
00:33:25,930 --> 00:33:32,380
<font color="#E5E5E5">version</font><font color="#CCCCCC"> six however there</font><font color="#E5E5E5"> is no support</font>

849
00:33:29,050 --> 00:33:34,860
<font color="#CCCCCC">for</font><font color="#E5E5E5"> this feature on MIPS and for PowerPC</font>

850
00:33:32,380 --> 00:33:39,070
it varies but you know that's<font color="#E5E5E5"> that's a</font>

851
00:33:34,860 --> 00:33:42,070
logical<font color="#CCCCCC"> considering PowerPC there are</font>

852
00:33:39,070 --> 00:33:44,590
the problem with given<font color="#E5E5E5"> X DP is</font><font color="#CCCCCC"> the fact</font>

853
00:33:42,070 --> 00:33:47,530
that it has<font color="#CCCCCC"> insecure default settings so</font>

854
00:33:44,590 --> 00:33:49,629
<font color="#E5E5E5">by default the stack is always left</font>

855
00:33:47,530 --> 00:33:51,460
executable even if you're running<font color="#E5E5E5"> on a</font>

856
00:33:49,630 --> 00:33:53,560
system with<font color="#CCCCCC"> an</font><font color="#E5E5E5"> X support and</font><font color="#CCCCCC"> even if</font>

857
00:33:51,460 --> 00:33:57,280
this<font color="#CCCCCC"> is enabled</font><font color="#E5E5E5"> the stack will still be</font>

858
00:33:53,560 --> 00:33:59,350
left executable and any new stack<font color="#E5E5E5"> elf</font>

859
00:33:57,280 --> 00:34:01,240
program headers in the<font color="#E5E5E5"> old binary are</font>

860
00:33:59,350 --> 00:34:03,730
completely ignored by<font color="#CCCCCC"> the program loader</font>

861
00:34:01,240 --> 00:34:05,110
so even if you set up<font color="#E5E5E5"> your linker</font>

862
00:34:03,730 --> 00:34:06,520
correct<font color="#E5E5E5"> even</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> you have you know the</font>

863
00:34:05,110 --> 00:34:08,380
correct architecture all that kind of

864
00:34:06,520 --> 00:34:11,710
stuff<font color="#CCCCCC"> you will still</font><font color="#E5E5E5"> have an executable</font>

865
00:34:08,380 --> 00:34:13,810
stack<font color="#E5E5E5"> you can only make this tag</font>

866
00:34:11,710 --> 00:34:16,418
non-executive all by specifying this

867
00:34:13,810 --> 00:34:18,549
particular<font color="#E5E5E5"> start up flag in the</font>

868
00:34:16,418 --> 00:34:20,440
microkernel startup options which makes

869
00:34:18,550 --> 00:34:22,179
<font color="#CCCCCC">it</font><font color="#E5E5E5"> stack not execute</font><font color="#CCCCCC"> all and the problem</font>

870
00:34:20,440 --> 00:34:24,610
here<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that this is a system-wide</font>

871
00:34:22,179 --> 00:34:27,100
setting without<font color="#CCCCCC"> opt</font><font color="#E5E5E5"> outs</font><font color="#CCCCCC"> so if you</font><font color="#E5E5E5"> ever</font>

872
00:34:24,610 --> 00:34:29,710
for whatever reason need legacy

873
00:34:27,100 --> 00:34:31,299
executables or an executable switch for

874
00:34:29,710 --> 00:34:33,280
example have executable code on the

875
00:34:31,300 --> 00:34:34,960
stack for whatever reason then it's not

876
00:34:33,280 --> 00:34:38,260
backwards<font color="#E5E5E5"> compatibility for this stuff</font>

877
00:34:34,960 --> 00:34:40,389
so<font color="#CCCCCC"> for</font><font color="#E5E5E5"> this reason they</font><font color="#CCCCCC"> decided not to</font>

878
00:34:38,260 --> 00:34:42,700
fix their particular situation and<font color="#E5E5E5"> the</font>

879
00:34:40,389 --> 00:34:45,850
issue is<font color="#E5E5E5"> still present on Kunik 6</font><font color="#CCCCCC"> & 7</font>

880
00:34:42,699 --> 00:34:48,069
<font color="#CCCCCC">and it makes for an interesting thing if</font>

881
00:34:45,850 --> 00:34:50,230
you see a<font color="#E5E5E5"> Q and</font><font color="#CCCCCC"> X image inspect</font><font color="#E5E5E5"> whether</font>

882
00:34:48,070 --> 00:34:52,360
that flag is within the<font color="#CCCCCC"> microkernel</font>

883
00:34:50,230 --> 00:34:53,740
startup options because if it's not you

884
00:34:52,360 --> 00:34:56,590
<font color="#E5E5E5">don't even have to bother with a lot of</font>

885
00:34:53,739 --> 00:34:59,350
<font color="#CCCCCC">the other</font><font color="#E5E5E5"> stuff that</font><font color="#CCCCCC"> brings</font><font color="#E5E5E5"> us to the</font>

886
00:34:56,590 --> 00:35:01,120
second mitigation<font color="#E5E5E5"> unix</font><font color="#CCCCCC"> ASLR</font><font color="#E5E5E5"> this is</font>

887
00:34:59,350 --> 00:35:04,660
again enabled by starting the

888
00:35:01,120 --> 00:35:06,700
microkernel with specific flag<font color="#E5E5E5"> child</font>

889
00:35:04,660 --> 00:35:09,370
process inherent our parents<font color="#CCCCCC"> is</font><font color="#E5E5E5"> lower</font>

890
00:35:06,700 --> 00:35:11,319
settings<font color="#E5E5E5"> and these can be enabled</font><font color="#CCCCCC"> or</font>

891
00:35:09,370 --> 00:35:13,480
disabled on a per process basis so<font color="#E5E5E5"> you</font>

892
00:35:11,320 --> 00:35:16,780
have a good opt-out scheme here<font color="#E5E5E5"> place if</font>

893
00:35:13,480 --> 00:35:18,460
people<font color="#CCCCCC"> specify it right objects are</font>

894
00:35:16,780 --> 00:35:20,920
randomized at the base address level

895
00:35:18,460 --> 00:35:23,620
<font color="#E5E5E5">which is not very fine-grained but it</font>

896
00:35:20,920 --> 00:35:26,110
goes for most<font color="#E5E5E5"> a</font><font color="#CCCCCC"> SLR implementations and</font>

897
00:35:23,620 --> 00:35:27,819
all memory objects are randomized except

898
00:35:26,110 --> 00:35:30,190
for the kernel

899
00:35:27,820 --> 00:35:32,740
code image<font color="#E5E5E5"> which you know it's only</font>

900
00:35:30,190 --> 00:35:34,990
terrible if<font color="#E5E5E5"> you really value</font><font color="#CCCCCC"> kasl</font><font color="#E5E5E5"> are a</font>

901
00:35:32,740 --> 00:35:36,939
lot and embedded systems<font color="#CCCCCC"> you can see</font>

902
00:35:34,990 --> 00:35:39,100
here all the<font color="#E5E5E5"> things on the right</font><font color="#CCCCCC"> of the</font>

903
00:35:36,940 --> 00:35:42,610
<font color="#CCCCCC">slide that</font><font color="#E5E5E5"> are randomized by given</font><font color="#CCCCCC"> X a</font>

904
00:35:39,100 --> 00:35:44,380
<font color="#CCCCCC">SLR by position independent executables</font>

905
00:35:42,610 --> 00:35:46,780
are disabled by default<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the tool</font>

906
00:35:44,380 --> 00:35:48,520
chain<font color="#CCCCCC"> and you</font><font color="#E5E5E5"> can really see the result</font>

907
00:35:46,780 --> 00:35:51,280
of this that no system binaries by

908
00:35:48,520 --> 00:35:53,380
default<font color="#E5E5E5"> have any</font><font color="#CCCCCC"> PI in the images you</font>

909
00:35:51,280 --> 00:35:56,080
your encounter so people will need to

910
00:35:53,380 --> 00:35:58,330
<font color="#E5E5E5">explicitly build their base system and</font>

911
00:35:56,080 --> 00:36:00,640
any subsequent executables<font color="#E5E5E5"> when on the</font>

912
00:35:58,330 --> 00:36:04,330
<font color="#CCCCCC">fault toolchain</font><font color="#E5E5E5"> settings to have</font><font color="#CCCCCC"> PI</font>

913
00:36:00,640 --> 00:36:06,060
enabled so in<font color="#CCCCCC"> order</font><font color="#E5E5E5"> to figure out</font><font color="#CCCCCC"> how Q</font>

914
00:36:04,330 --> 00:36:08,049
<font color="#CCCCCC">annex SLR works under the</font><font color="#E5E5E5"> hood</font>

915
00:36:06,060 --> 00:36:10,480
<font color="#CCCCCC">reverse-engineer the memory manager and</font>

916
00:36:08,050 --> 00:36:12,900
<font color="#E5E5E5">it's mapped out in in short form here</font>

917
00:36:10,480 --> 00:36:16,000
<font color="#E5E5E5">and what it really comes down</font><font color="#CCCCCC"> to is that</font>

918
00:36:12,900 --> 00:36:18,370
basically all<font color="#E5E5E5"> the memory functionality</font>

919
00:36:16,000 --> 00:36:20,620
is under the hood implemented using<font color="#E5E5E5"> a</font>

920
00:36:18,370 --> 00:36:23,589
map and randomization happens at two

921
00:36:20,620 --> 00:36:26,230
points which<font color="#E5E5E5"> are colored in blue stack</font>

922
00:36:23,590 --> 00:36:29,230
<font color="#CCCCCC">randomized and</font><font color="#E5E5E5"> map find VA and both of</font>

923
00:36:26,230 --> 00:36:32,800
them<font color="#E5E5E5"> rely on the same random</font><font color="#CCCCCC"> number</font>

924
00:36:29,230 --> 00:36:34,810
generator so let's start with map find

925
00:36:32,800 --> 00:36:36,550
VA which is a function<font color="#CCCCCC"> that among other</font>

926
00:36:34,810 --> 00:36:38,710
things randomizes virtual addresses

927
00:36:36,550 --> 00:36:41,020
which are returned<font color="#E5E5E5"> by the</font><font color="#CCCCCC"> M map call and</font>

928
00:36:38,710 --> 00:36:42,880
the randomization here happens as you

929
00:36:41,020 --> 00:36:44,500
can see on the right of<font color="#CCCCCC"> the slide</font><font color="#E5E5E5"> by</font>

930
00:36:42,880 --> 00:36:46,840
subtracting<font color="#E5E5E5"> or adding a random value</font>

931
00:36:44,500 --> 00:36:48,640
from or to the found virtual address<font color="#E5E5E5"> so</font>

932
00:36:46,840 --> 00:36:50,710
it takes<font color="#CCCCCC"> a lower 32 bits</font><font color="#E5E5E5"> of the random</font>

933
00:36:48,640 --> 00:36:53,859
number<font color="#E5E5E5"> generator result</font><font color="#CCCCCC"> bitwise left</font>

934
00:36:50,710 --> 00:36:56,980
shift<font color="#E5E5E5"> and by</font><font color="#CCCCCC"> 12</font><font color="#E5E5E5"> extracts a lower 24 bits</font>

935
00:36:53,860 --> 00:37:00,100
and then applies that<font color="#E5E5E5"> to the end result</font>

936
00:36:56,980 --> 00:37:01,960
<font color="#CCCCCC">and the problem already</font><font color="#E5E5E5"> the first</font>

937
00:37:00,100 --> 00:37:04,299
<font color="#E5E5E5">problem is that</font><font color="#CCCCCC"> it contributes and most</font>

938
00:37:01,960 --> 00:37:06,040
<font color="#CCCCCC">twelve bits</font><font color="#E5E5E5"> of entropy here because of</font>

939
00:37:04,300 --> 00:37:09,040
the bit mask that's<font color="#E5E5E5"> applied but as well</font>

940
00:37:06,040 --> 00:37:11,920
<font color="#CCCCCC">see this is worse in practice the second</font>

941
00:37:09,040 --> 00:37:13,570
function<font color="#E5E5E5"> is stack randomized and well it</font>

942
00:37:11,920 --> 00:37:15,850
does what it says<font color="#E5E5E5"> on the tin it</font>

943
00:37:13,570 --> 00:37:17,440
randomizes the<font color="#E5E5E5"> stack start address so</font>

944
00:37:15,850 --> 00:37:19,690
once you allocate<font color="#E5E5E5"> is stack either when</font>

945
00:37:17,440 --> 00:37:21,460
<font color="#E5E5E5">the process is started itself or when a</font>

946
00:37:19,690 --> 00:37:24,130
<font color="#E5E5E5">new thread is spawned with its own stack</font>

947
00:37:21,460 --> 00:37:25,540
this function that's applied<font color="#CCCCCC"> to any</font>

948
00:37:24,130 --> 00:37:27,310
allocated new stack and the

949
00:37:25,540 --> 00:37:29,500
randomization happens as you can see on

950
00:37:27,310 --> 00:37:31,570
the right of the<font color="#CCCCCC"> slide again</font><font color="#E5E5E5"> in the same</font>

951
00:37:29,500 --> 00:37:33,580
fashion<font color="#CCCCCC"> by subtracting a random value</font>

952
00:37:31,570 --> 00:37:35,320
from the original stack pointer you take

953
00:37:33,580 --> 00:37:37,600
the lower 32 bits<font color="#E5E5E5"> of the random number</font>

954
00:37:35,320 --> 00:37:38,299
generator result<font color="#CCCCCC"> bit</font><font color="#E5E5E5"> was left shift them</font>

955
00:37:37,600 --> 00:37:40,220
by<font color="#CCCCCC"> 4</font>

956
00:37:38,299 --> 00:37:43,730
and that most the lower 11<font color="#E5E5E5"> bits are</font>

957
00:37:40,220 --> 00:37:46,308
extracted<font color="#E5E5E5"> again because of this bit mask</font>

958
00:37:43,730 --> 00:37:48,799
it contributes<font color="#E5E5E5"> at most 7 bits of entropy</font>

959
00:37:46,309 --> 00:37:51,349
depending on the stack size<font color="#E5E5E5"> as you can</font>

960
00:37:48,799 --> 00:37:53,059
see how the<font color="#CCCCCC"> the bit mask is constructed</font>

961
00:37:51,349 --> 00:37:55,819
there and again this is worse in

962
00:37:53,059 --> 00:37:57,499
practice this<font color="#CCCCCC"> is mitigated a little bit</font>

963
00:37:55,819 --> 00:37:59,599
by<font color="#E5E5E5"> the</font><font color="#CCCCCC"> fact that</font><font color="#E5E5E5"> it's combined with the</font>

964
00:37:57,499 --> 00:38:01,910
results<font color="#CCCCCC"> of map</font><font color="#E5E5E5"> find VA because any stack</font>

965
00:37:59,599 --> 00:38:03,470
is first allocated using<font color="#CCCCCC"> M map and then</font>

966
00:38:01,910 --> 00:38:11,299
this function<font color="#E5E5E5"> gets applied but in</font>

967
00:38:03,470 --> 00:38:14,720
practice that<font color="#E5E5E5"> doesn't really matter the</font>

968
00:38:11,299 --> 00:38:17,180
real problem is that Kunik 6 is a SLR

969
00:38:14,720 --> 00:38:19,490
has a weak random number generator<font color="#E5E5E5"> these</font>

970
00:38:17,180 --> 00:38:22,999
upper bounds we gave of 12 bits<font color="#E5E5E5"> and</font><font color="#CCCCCC"> 7</font>

971
00:38:19,490 --> 00:38:25,578
bits are actually<font color="#CCCCCC"> optimistic so Kunik 6</font>

972
00:38:22,999 --> 00:38:27,618
is a SLR uses a<font color="#E5E5E5"> random number</font><font color="#CCCCCC"> generator</font>

973
00:38:25,579 --> 00:38:30,259
that's basically<font color="#E5E5E5"> a single call to</font><font color="#CCCCCC"> the</font>

974
00:38:27,619 --> 00:38:33,140
clock<font color="#E5E5E5"> cycle system</font><font color="#CCCCCC"> call a clock cycles</font>

975
00:38:30,259 --> 00:38:35,359
as the name already<font color="#E5E5E5"> says retrieves a 64</font>

976
00:38:33,140 --> 00:38:36,769
bit freerunning cycle counter<font color="#E5E5E5"> an</font>

977
00:38:35,359 --> 00:38:39,499
<font color="#E5E5E5">implementation of which is</font>

978
00:38:36,769 --> 00:38:42,200
<font color="#CCCCCC">architecture-specific so</font><font color="#E5E5E5"> next 86 it will</font>

979
00:38:39,499 --> 00:38:44,629
be a simple<font color="#E5E5E5"> call</font><font color="#CCCCCC"> to our DTSC which</font>

980
00:38:42,200 --> 00:38:46,879
<font color="#E5E5E5">receives the time stamp counter</font><font color="#CCCCCC"> armed</font>

981
00:38:44,630 --> 00:38:48,529
it's the result of some some emulation

982
00:38:46,880 --> 00:38:50,410
<font color="#E5E5E5">of this functionality on</font><font color="#CCCCCC"> MIPS it will</font>

983
00:38:48,529 --> 00:38:54,470
retrieve<font color="#CCCCCC"> the counter register and PPC</font>

984
00:38:50,410 --> 00:38:58,999
<font color="#E5E5E5">TBF and on</font><font color="#CCCCCC"> Super HD TMU so</font><font color="#E5E5E5"> it's all more</font>

985
00:38:54,470 --> 00:39:02,689
<font color="#E5E5E5">or</font><font color="#CCCCCC"> less</font><font color="#E5E5E5"> similar</font><font color="#CCCCCC"> to our DTSC now this is</font>

986
00:38:58,999 --> 00:39:04,549
not a<font color="#E5E5E5"> strong use of randomness</font><font color="#CCCCCC"> we</font>

987
00:39:02,690 --> 00:39:07,640
<font color="#CCCCCC">evaluated the</font><font color="#E5E5E5"> actual entropy of this</font>

988
00:39:04,549 --> 00:39:09,619
this<font color="#E5E5E5"> particular use and we measured</font>

989
00:39:07,640 --> 00:39:11,328
processes across different boot sessions

990
00:39:09,619 --> 00:39:13,249
and various different<font color="#CCCCCC"> kinds of processes</font>

991
00:39:11,329 --> 00:39:16,430
and harvested their memory object

992
00:39:13,249 --> 00:39:19,519
<font color="#E5E5E5">addresses</font><font color="#CCCCCC"> then we evaluated them using</font>

993
00:39:16,430 --> 00:39:21,680
the nist SP 890 be and should be source

994
00:39:19,519 --> 00:39:25,069
testing tool to obtain min<font color="#E5E5E5"> entropy</font>

995
00:39:21,680 --> 00:39:27,140
estimates and just a brief<font color="#CCCCCC"> reminder 256</font>

996
00:39:25,069 --> 00:39:30,230
bits of uniformly random data should

997
00:39:27,140 --> 00:39:32,749
correspond to 256<font color="#E5E5E5"> bits</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> min and trippy</font>

998
00:39:30,230 --> 00:39:34,999
<font color="#E5E5E5">now the average min entropy of an ASL</font>

999
00:39:32,749 --> 00:39:37,189
are protected address<font color="#E5E5E5"> and</font><font color="#CCCCCC"> qnx is four</font>

1000
00:39:34,999 --> 00:39:39,529
point four seven bits<font color="#E5E5E5"> and this is very</font>

1001
00:39:37,190 --> 00:39:40,489
weak if you compare<font color="#E5E5E5"> it to for</font><font color="#CCCCCC"> example on</font>

1002
00:39:39,529 --> 00:39:43,700
the right of the slide

1003
00:39:40,489 --> 00:39:47,150
<font color="#CCCCCC">mainline linux aslr or the pax</font><font color="#E5E5E5"> SLR</font>

1004
00:39:43,700 --> 00:39:50,569
implementations we have entropy<font color="#CCCCCC"> between</font>

1005
00:39:47,150 --> 00:39:54,320
27 bits or at least 5.7

1006
00:39:50,570 --> 00:39:56,090
bits of entropy<font color="#CCCCCC"> and why is this a</font>

1007
00:39:54,320 --> 00:39:57,800
problem<font color="#CCCCCC"> well this is a</font><font color="#E5E5E5"> problem for</font>

1008
00:39:56,090 --> 00:40:04,190
<font color="#CCCCCC">example remotely because</font><font color="#E5E5E5"> of</font>

1009
00:39:57,800 --> 00:40:05,870
<font color="#CCCCCC">brute-forcing attacks</font><font color="#E5E5E5"> if you have memory</font>

1010
00:40:04,190 --> 00:40:08,480
<font color="#E5E5E5">layered inheritance which you</font><font color="#CCCCCC"> haven't</font>

1011
00:40:05,870 --> 00:40:10,880
<font color="#CCCCCC">qyx</font><font color="#E5E5E5"> that means that if you fork</font><font color="#CCCCCC"> a</font>

1012
00:40:08,480 --> 00:40:13,070
process the child<font color="#CCCCCC"> process will copy the</font>

1013
00:40:10,880 --> 00:40:16,670
<font color="#CCCCCC">memory layout of the parent</font><font color="#E5E5E5"> and this</font>

1014
00:40:13,070 --> 00:40:19,400
happens after<font color="#CCCCCC"> a SLR is</font><font color="#E5E5E5"> applied so</font><font color="#CCCCCC"> that</font>

1015
00:40:16,670 --> 00:40:22,010
<font color="#E5E5E5">means that a child</font><font color="#CCCCCC"> will have the same a</font>

1016
00:40:19,400 --> 00:40:24,620
<font color="#CCCCCC">SLR randomization applied to it</font><font color="#E5E5E5"> as the</font>

1017
00:40:22,010 --> 00:40:26,690
parent<font color="#E5E5E5"> now if you have an attacker</font>

1018
00:40:24,620 --> 00:40:29,420
for example attacking a network

1019
00:40:26,690 --> 00:40:31,760
application which upon every new

1020
00:40:29,420 --> 00:40:33,800
connection<font color="#E5E5E5"> Forks a client a child</font>

1021
00:40:31,760 --> 00:40:36,110
process<font color="#E5E5E5"> to</font><font color="#CCCCCC"> handle this client connection</font>

1022
00:40:33,800 --> 00:40:38,590
then an attacker can brute force<font color="#E5E5E5"> this</font>

1023
00:40:36,110 --> 00:40:41,420
address and try one candidate the child

1024
00:40:38,590 --> 00:40:43,130
<font color="#E5E5E5">will will will die if it's not the</font>

1025
00:40:41,420 --> 00:40:44,660
<font color="#E5E5E5">correct address and then the next one</font>

1026
00:40:43,130 --> 00:40:46,850
will<font color="#CCCCCC"> be respond and</font><font color="#E5E5E5"> the next one in the</font>

1027
00:40:44,660 --> 00:40:49,009
<font color="#E5E5E5">next</font><font color="#CCCCCC"> one the next</font><font color="#E5E5E5"> one and if you don't</font>

1028
00:40:46,850 --> 00:40:50,960
have enough entropy in this in<font color="#E5E5E5"> these</font>

1029
00:40:49,010 --> 00:40:53,600
addresses your brute force might<font color="#CCCCCC"> be</font>

1030
00:40:50,960 --> 00:40:56,450
successful<font color="#E5E5E5"> within a reasonable</font><font color="#CCCCCC"> time</font>

1031
00:40:53,600 --> 00:40:58,610
frame<font color="#E5E5E5"> and is this reasonable within</font>

1032
00:40:56,450 --> 00:41:00,740
practice well yes as you can<font color="#E5E5E5"> see on the</font>

1033
00:40:58,610 --> 00:41:03,830
left of the slide you have a demo

1034
00:41:00,740 --> 00:41:05,930
<font color="#E5E5E5">vulnerable service protected by Q</font><font color="#CCCCCC"> annex</font>

1035
00:41:03,830 --> 00:41:08,600
<font color="#CCCCCC">a SLR and</font><font color="#E5E5E5"> on the right of the slide in</font>

1036
00:41:05,930 --> 00:41:11,540
23 seconds<font color="#E5E5E5"> you can remotely exploit this</font>

1037
00:41:08,600 --> 00:41:16,370
and<font color="#E5E5E5"> pop a</font><font color="#CCCCCC"> root</font><font color="#E5E5E5"> so that that's not a lot</font>

1038
00:41:11,540 --> 00:41:18,080
of<font color="#E5E5E5"> good for a SLR of course not only</font>

1039
00:41:16,370 --> 00:41:19,490
<font color="#E5E5E5">does it have a weak random number</font>

1040
00:41:18,080 --> 00:41:21,500
generator there are a lot of<font color="#CCCCCC"> attack</font>

1041
00:41:19,490 --> 00:41:23,209
factors outside<font color="#CCCCCC"> of that as well which</font>

1042
00:41:21,500 --> 00:41:25,400
includes a lot<font color="#E5E5E5"> of local information</font>

1043
00:41:23,210 --> 00:41:27,290
<font color="#E5E5E5">leaks and I'm gonna discuss two of them</font>

1044
00:41:25,400 --> 00:41:29,420
<font color="#E5E5E5">but there are many many more out there</font>

1045
00:41:27,290 --> 00:41:33,080
<font color="#CCCCCC">than</font><font color="#E5E5E5"> I'm sure anyone</font><font color="#CCCCCC"> who takes a glance</font>

1046
00:41:29,420 --> 00:41:35,390
at it<font color="#E5E5E5"> will find for example in the</font>

1047
00:41:33,080 --> 00:41:37,819
process<font color="#CCCCCC"> file system</font><font color="#E5E5E5"> there was</font><font color="#CCCCCC"> a very</font>

1048
00:41:35,390 --> 00:41:40,069
interesting info leak ik<font color="#CCCCCC"> unix-like many</font>

1049
00:41:37,820 --> 00:41:42,580
unix-like systems as a virtual process

1050
00:41:40,070 --> 00:41:44,960
file system which for<font color="#CCCCCC"> every entry in</font>

1051
00:41:42,580 --> 00:41:46,970
<font color="#CCCCCC">every running process as an</font>

1052
00:41:44,960 --> 00:41:48,860
corresponding entry<font color="#CCCCCC"> in this directory</font>

1053
00:41:46,970 --> 00:41:50,629
with information about<font color="#E5E5E5"> the process and</font>

1054
00:41:48,860 --> 00:41:53,600
you can<font color="#E5E5E5"> query this information using the</font>

1055
00:41:50,630 --> 00:41:56,510
<font color="#CCCCCC">DEF</font><font color="#E5E5E5"> CDL API which retrieves information</font>

1056
00:41:53,600 --> 00:41:58,730
such as the memory map<font color="#E5E5E5"> current register</font>

1057
00:41:56,510 --> 00:42:00,830
values and all that kind of juicy

1058
00:41:58,730 --> 00:42:03,080
<font color="#CCCCCC">information as you can</font><font color="#E5E5E5"> see on the top of</font>

1059
00:42:00,830 --> 00:42:03,589
<font color="#CCCCCC">the slide the permissions are set the</font>

1060
00:42:03,080 --> 00:42:05,299
world

1061
00:42:03,589 --> 00:42:08,359
readable which is<font color="#E5E5E5"> very interesting</font>

1062
00:42:05,299 --> 00:42:10,969
<font color="#CCCCCC">because that</font><font color="#E5E5E5"> allows you to</font><font color="#CCCCCC"> she can see</font>

1063
00:42:08,359 --> 00:42:13,369
here retrieve as a low<font color="#E5E5E5"> privileged user</font>

1064
00:42:10,969 --> 00:42:15,109
<font color="#E5E5E5">the complete memory layout of high</font>

1065
00:42:13,369 --> 00:42:17,299
<font color="#CCCCCC">privileged processes including</font>

1066
00:42:15,109 --> 00:42:19,519
microkernel which kind of defeats the

1067
00:42:17,299 --> 00:42:22,009
<font color="#CCCCCC">purpose of any</font><font color="#E5E5E5"> a SLR because the goal of</font>

1068
00:42:19,519 --> 00:42:23,749
a SLR<font color="#E5E5E5"> is not so much randomization as it</font>

1069
00:42:22,009 --> 00:42:26,170
is the insurance<font color="#CCCCCC"> of memory layout</font>

1070
00:42:23,749 --> 00:42:28,729
secrecy to prevent code reuse attacks

1071
00:42:26,170 --> 00:42:31,099
the interesting thing is that<font color="#E5E5E5"> even if</font>

1072
00:42:28,729 --> 00:42:34,069
you can't compile your own utility to

1073
00:42:31,099 --> 00:42:35,900
exploit this locally<font color="#E5E5E5"> you can use the PID</font>

1074
00:42:34,069 --> 00:42:38,119
<font color="#CCCCCC">end utility which is provided by Q and</font>

1075
00:42:35,900 --> 00:42:42,229
<font color="#CCCCCC">it's itself to achieve a similar result</font>

1076
00:42:38,119 --> 00:42:45,380
so that's<font color="#E5E5E5"> very nice second information</font>

1077
00:42:42,229 --> 00:42:47,210
<font color="#CCCCCC">leaked</font><font color="#E5E5E5"> I discovered was recited in LD</font>

1078
00:42:45,380 --> 00:42:48,979
debug<font color="#E5E5E5"> which is an environment variable</font>

1079
00:42:47,210 --> 00:42:51,259
which allows you to<font color="#E5E5E5"> specify some</font>

1080
00:42:48,979 --> 00:42:53,149
information for<font color="#E5E5E5"> debugging and the</font>

1081
00:42:51,259 --> 00:42:56,420
interesting<font color="#CCCCCC"> thing</font><font color="#E5E5E5"> is that it has a debug</font>

1082
00:42:53,150 --> 00:42:58,309
option called<font color="#E5E5E5"> all which you can use</font><font color="#CCCCCC"> to</font>

1083
00:42:56,420 --> 00:43:00,619
start<font color="#E5E5E5"> an application with full debugging</font>

1084
00:42:58,309 --> 00:43:03,499
capabilities<font color="#CCCCCC"> but this does not do any</font>

1085
00:43:00,619 --> 00:43:07,190
<font color="#E5E5E5">kind of</font><font color="#CCCCCC"> privilege checking</font><font color="#E5E5E5"> so if I have</font>

1086
00:43:03,499 --> 00:43:09,828
a set UID binary that's set UID root<font color="#E5E5E5"> I</font>

1087
00:43:07,190 --> 00:43:11,779
started and I'm a<font color="#E5E5E5"> low privileged user it</font>

1088
00:43:09,829 --> 00:43:14,420
fully ignores the fact that<font color="#E5E5E5"> I</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> have</font>

1089
00:43:11,779 --> 00:43:17,140
privileges to do whatever I want and

1090
00:43:14,420 --> 00:43:19,849
then you<font color="#CCCCCC"> can see</font><font color="#E5E5E5"> that all the mapped</font>

1091
00:43:17,140 --> 00:43:22,160
loaded libraries<font color="#CCCCCC"> such as Lipsy and the</font>

1092
00:43:19,849 --> 00:43:25,039
program image base are disclosed to<font color="#CCCCCC"> me</font>

1093
00:43:22,160 --> 00:43:29,479
<font color="#E5E5E5">regardless of any kind of a SLR</font><font color="#CCCCCC"> or</font>

1094
00:43:25,039 --> 00:43:31,039
<font color="#E5E5E5">privilege settings now in Kunik</font><font color="#CCCCCC"> seven as</font>

1095
00:43:29,479 --> 00:43:33,410
a result of these reporting's<font color="#CCCCCC"> they made</font>

1096
00:43:31,039 --> 00:43:36,229
some<font color="#E5E5E5"> changes as</font><font color="#CCCCCC"> laura is still disabled</font>

1097
00:43:33,410 --> 00:43:38,328
by default<font color="#CCCCCC"> and there's no case</font><font color="#E5E5E5"> a lot but</font>

1098
00:43:36,229 --> 00:43:40,788
they do use the kernel<font color="#CCCCCC"> PNG we previously</font>

1099
00:43:38,329 --> 00:43:44,269
discussed<font color="#E5E5E5"> now so it's it's the entropy</font>

1100
00:43:40,789 --> 00:43:45,650
<font color="#E5E5E5">is much better in theory unfortunately</font>

1101
00:43:44,269 --> 00:43:48,078
despite<font color="#E5E5E5"> using this new random number</font>

1102
00:43:45,650 --> 00:43:50,690
<font color="#E5E5E5">generator and having a 64-bit address</font>

1103
00:43:48,079 --> 00:43:52,069
space<font color="#CCCCCC"> and Q and X 7</font><font color="#E5E5E5"> the low theoretical</font>

1104
00:43:50,690 --> 00:43:54,979
upper<font color="#E5E5E5"> bounds remained because they</font>

1105
00:43:52,069 --> 00:43:57,950
forgot to<font color="#E5E5E5"> remove these bit masks so</font>

1106
00:43:54,979 --> 00:44:00,618
still the they<font color="#E5E5E5"> are bounded by</font><font color="#CCCCCC"> seven</font><font color="#E5E5E5"> bits</font>

1107
00:43:57,950 --> 00:44:02,660
for the stack and twelve bits<font color="#E5E5E5"> excuse me</font>

1108
00:44:00,619 --> 00:44:06,049
<font color="#CCCCCC">and</font><font color="#E5E5E5"> twelve bits for everything else</font><font color="#CCCCCC"> and</font>

1109
00:44:02,660 --> 00:44:08,359
as you can<font color="#CCCCCC"> see here the code is always</font>

1110
00:44:06,049 --> 00:44:09,920
<font color="#E5E5E5">loaded into the lower 32 bits of the</font>

1111
00:44:08,359 --> 00:44:12,710
address<font color="#E5E5E5"> space so this this really</font>

1112
00:44:09,920 --> 00:44:15,109
<font color="#E5E5E5">reduces</font><font color="#CCCCCC"> the usefulness</font><font color="#E5E5E5"> of a SLR even on</font>

1113
00:44:12,710 --> 00:44:17,569
<font color="#E5E5E5">Q and</font><font color="#CCCCCC"> X</font><font color="#E5E5E5"> 7</font><font color="#CCCCCC"> I've been told</font><font color="#E5E5E5"> by blackberry</font>

1114
00:44:15,109 --> 00:44:20,480
working on changing this but I haven't

1115
00:44:17,569 --> 00:44:23,808
had any any update yet so even new

1116
00:44:20,480 --> 00:44:26,299
<font color="#CCCCCC">communiques 7 has</font><font color="#E5E5E5"> this problem</font>

1117
00:44:23,809 --> 00:44:28,609
they did fix the<font color="#E5E5E5"> LD debug issue but</font>

1118
00:44:26,299 --> 00:44:30,980
<font color="#E5E5E5">unfortunately they did not</font><font color="#CCCCCC"> completely</font>

1119
00:44:28,609 --> 00:44:34,670
fix the proc<font color="#E5E5E5"> FS issue what they did as</font>

1120
00:44:30,980 --> 00:44:37,220
you can see<font color="#CCCCCC"> on the slide is restrict any</font>

1121
00:44:34,670 --> 00:44:39,079
kind<font color="#E5E5E5"> of reading using the PID end</font>

1122
00:44:37,220 --> 00:44:41,058
utility which is included with<font color="#CCCCCC"> given X</font>

1123
00:44:39,079 --> 00:44:44,450
by default so this does<font color="#CCCCCC"> two privilege</font>

1124
00:44:41,059 --> 00:44:46,609
<font color="#CCCCCC">checking but</font><font color="#E5E5E5"> if you write</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> own C</font>

1125
00:44:44,450 --> 00:44:48,680
application<font color="#CCCCCC"> that discloses this</font>

1126
00:44:46,609 --> 00:44:50,328
information you<font color="#CCCCCC"> can still read from</font>

1127
00:44:48,680 --> 00:44:52,399
<font color="#E5E5E5">higher privileged processes so there's</font>

1128
00:44:50,329 --> 00:44:55,759
an info leak that's that we an out dirty

1129
00:44:52,400 --> 00:44:58,700
use that brings us to the stack Canaries

1130
00:44:55,759 --> 00:45:00,710
<font color="#CCCCCC">kyun</font><font color="#E5E5E5"> X uses GCC stack smashing protector</font>

1131
00:44:58,700 --> 00:45:03,470
for this so you're probably all familiar

1132
00:45:00,710 --> 00:45:05,930
<font color="#E5E5E5">with</font><font color="#CCCCCC"> that and the computer compiler side</font>

1133
00:45:03,470 --> 00:45:07,910
<font color="#CCCCCC">it's what we're used to and it's mostly</font>

1134
00:45:05,930 --> 00:45:09,919
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> on the operating system side</font>

1135
00:45:07,910 --> 00:45:12,170
<font color="#E5E5E5">however the implementations are custom</font>

1136
00:45:09,920 --> 00:45:14,150
and user space master<font color="#E5E5E5"> cannery is</font>

1137
00:45:12,170 --> 00:45:16,190
generated the program startup when<font color="#CCCCCC"> Lipsy</font>

1138
00:45:14,150 --> 00:45:18,319
is loaded<font color="#E5E5E5"> but it doesn't use lip as a</font>

1139
00:45:16,190 --> 00:45:20,059
space guard<font color="#CCCCCC"> setup</font><font color="#E5E5E5"> function but a custom</font>

1140
00:45:18,319 --> 00:45:24,349
init cookie functions to actually

1141
00:45:20,059 --> 00:45:27,230
initialize the master cannery again the

1142
00:45:24,349 --> 00:45:29,299
<font color="#E5E5E5">problem here is low entropy so it draws</font>

1143
00:45:27,230 --> 00:45:30,739
entropy from<font color="#E5E5E5"> three sources only two of</font>

1144
00:45:29,299 --> 00:45:32,930
which are relevant<font color="#CCCCCC"> to phase lares</font>

1145
00:45:30,739 --> 00:45:34,730
enabled<font color="#E5E5E5"> and all of them are again based</font>

1146
00:45:32,930 --> 00:45:37,910
on clock cycles<font color="#E5E5E5"> here you can see our</font>

1147
00:45:34,730 --> 00:45:39,289
DTSC and it's<font color="#CCCCCC"> sort</font><font color="#E5E5E5"> would</font><font color="#CCCCCC"> be the address</font>

1148
00:45:37,910 --> 00:45:40,910
of a local stack variable and the

1149
00:45:39,289 --> 00:45:43,279
address of the<font color="#CCCCCC"> function itself which are</font>

1150
00:45:40,910 --> 00:45:45,319
only randomized<font color="#E5E5E5"> if</font><font color="#CCCCCC"> aslr is enabled and</font>

1151
00:45:43,279 --> 00:45:47,930
<font color="#E5E5E5">of course also rely</font><font color="#CCCCCC"> on clock cycles</font>

1152
00:45:45,319 --> 00:45:50,119
<font color="#E5E5E5">again we did an evaluation of the</font>

1153
00:45:47,930 --> 00:45:52,910
entropy<font color="#E5E5E5"> here as well</font><font color="#CCCCCC"> across</font><font color="#E5E5E5"> three</font>

1154
00:45:50,119 --> 00:45:55,489
<font color="#CCCCCC">configurations</font><font color="#E5E5E5"> without a SLR with</font><font color="#CCCCCC"> asel</font>

1155
00:45:52,910 --> 00:45:57,440
<font color="#CCCCCC">arabic</font><font color="#E5E5E5"> without pi and with a SLR</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> pi</font>

1156
00:45:55,489 --> 00:45:59,539
and the average<font color="#CCCCCC"> minute reprieve found to</font>

1157
00:45:57,440 --> 00:46:02,299
be seven point<font color="#E5E5E5"> seven nine bits which is</font>

1158
00:45:59,539 --> 00:46:04,400
<font color="#E5E5E5">less than ideal because using a secure</font>

1159
00:46:02,299 --> 00:46:06,170
random<font color="#CCCCCC"> number generator you should have</font>

1160
00:46:04,400 --> 00:46:08,390
had 24 bits of min and repeat

1161
00:46:06,170 --> 00:46:10,970
considering that they use one byte for a

1162
00:46:08,390 --> 00:46:15,410
null byte in Terminator style<font color="#CCCCCC"> cannery</font>

1163
00:46:10,970 --> 00:46:16,939
<font color="#E5E5E5">form so this is unusual space but in</font>

1164
00:46:15,410 --> 00:46:18,980
kernel space the problems with the

1165
00:46:16,940 --> 00:46:20,230
<font color="#CCCCCC">Canaries</font><font color="#E5E5E5"> are even worse because the</font>

1166
00:46:18,980 --> 00:46:22,690
<font color="#CCCCCC">microkernel</font><font color="#E5E5E5"> is nice</font>

1167
00:46:20,230 --> 00:46:24,520
loaded nor linked against<font color="#CCCCCC"> Lipsy the</font>

1168
00:46:22,690 --> 00:46:27,160
master can you<font color="#E5E5E5"> generation cannot be done</font>

1169
00:46:24,520 --> 00:46:29,170
by any cookies unfortunately<font color="#CCCCCC"> q annex</font>

1170
00:46:27,160 --> 00:46:31,750
forgot to implement any kind of

1171
00:46:29,170 --> 00:46:33,820
replacement master<font color="#CCCCCC"> kanri</font><font color="#E5E5E5"> generation</font>

1172
00:46:31,750 --> 00:46:35,950
routine and as a result<font color="#CCCCCC"> kernel-space</font>

1173
00:46:33,820 --> 00:46:37,420
<font color="#CCCCCC">canneries</font><font color="#E5E5E5"> are used everywhere</font><font color="#CCCCCC"> throughout</font>

1174
00:46:35,950 --> 00:46:39,578
the microkernel but they're never

1175
00:46:37,420 --> 00:46:41,740
<font color="#CCCCCC">actually generated</font><font color="#E5E5E5"> sort of always left</font>

1176
00:46:39,579 --> 00:46:44,560
<font color="#E5E5E5">to zero which is a very predictable</font>

1177
00:46:41,740 --> 00:46:47,859
<font color="#CCCCCC">gamma-ray value and makes it more or</font>

1178
00:46:44,560 --> 00:46:49,869
<font color="#CCCCCC">less useless as of Kunik 7 they have</font>

1179
00:46:47,859 --> 00:46:51,970
<font color="#E5E5E5">some changes</font><font color="#CCCCCC"> they're now</font><font color="#E5E5E5"> enabled by</font>

1180
00:46:49,869 --> 00:46:55,540
<font color="#CCCCCC">default the Canaries it generates</font><font color="#E5E5E5"> 64 bit</font>

1181
00:46:51,970 --> 00:46:58,240
Canaries<font color="#E5E5E5"> and as per our advice in</font>

1182
00:46:55,540 --> 00:47:00,310
userspace<font color="#E5E5E5"> kyun X now mixes in an alpha</font>

1183
00:46:58,240 --> 00:47:02,259
ciliary<font color="#E5E5E5"> factor value with the</font><font color="#CCCCCC"> unit</font>

1184
00:47:00,310 --> 00:47:05,140
cookie stuff which<font color="#CCCCCC"> is basically drawn</font>

1185
00:47:02,260 --> 00:47:06,910
from the kernel space<font color="#E5E5E5"> P&G transport it</font>

1186
00:47:05,140 --> 00:47:09,098
to user space and mixed in<font color="#E5E5E5"> with the</font>

1187
00:47:06,910 --> 00:47:11,259
<font color="#E5E5E5">previous stuff we saw and for kernel</font>

1188
00:47:09,099 --> 00:47:14,440
space<font color="#E5E5E5"> they simply concatenate</font><font color="#CCCCCC"> two 32-bit</font>

1189
00:47:11,260 --> 00:47:17,170
<font color="#E5E5E5">kernel PNG values during very early boot</font>

1190
00:47:14,440 --> 00:47:20,260
so stack Canaries<font color="#E5E5E5"> are more or less fixed</font>

1191
00:47:17,170 --> 00:47:22,119
in<font color="#CCCCCC"> communiques</font><font color="#E5E5E5"> 7 now that brings us to</font>

1192
00:47:20,260 --> 00:47:25,810
the final mitigation relocation<font color="#E5E5E5"> read</font>

1193
00:47:22,119 --> 00:47:28,270
<font color="#E5E5E5">only to explain what is</font><font color="#CCCCCC"> lesser-known</font>

1194
00:47:25,810 --> 00:47:30,759
<font color="#E5E5E5">mitigation is about dynamically linked</font>

1195
00:47:28,270 --> 00:47:32,589
binaries use relocation to<font color="#CCCCCC"> do runtime</font>

1196
00:47:30,760 --> 00:47:34,480
lookup of symbols<font color="#E5E5E5"> that reside in shared</font>

1197
00:47:32,589 --> 00:47:37,630
libraries as you can see on the right<font color="#CCCCCC"> of</font>

1198
00:47:34,480 --> 00:47:40,270
the slide<font color="#E5E5E5"> and this relocation data is a</font>

1199
00:47:37,630 --> 00:47:41,740
very popular target for<font color="#E5E5E5"> overriding to</font>

1200
00:47:40,270 --> 00:47:44,200
hijack control flow because<font color="#CCCCCC"> of our</font>

1201
00:47:41,740 --> 00:47:45,879
hijack<font color="#E5E5E5"> one of the got</font><font color="#CCCCCC"> BLT entries for</font>

1202
00:47:44,200 --> 00:47:47,859
example<font color="#E5E5E5"> then once this particular</font>

1203
00:47:45,880 --> 00:47:50,440
<font color="#CCCCCC">function gets called I can hijack</font>

1204
00:47:47,859 --> 00:47:53,160
control flow<font color="#E5E5E5"> it's interesting because</font>

1205
00:47:50,440 --> 00:47:58,630
this<font color="#E5E5E5"> this particular</font><font color="#CCCCCC"> area doesn't</font><font color="#E5E5E5"> get</font>

1206
00:47:53,160 --> 00:48:00,759
randomized in many systems<font color="#CCCCCC"> and one of</font>

1207
00:47:58,630 --> 00:48:03,010
these implementations of this mitigation

1208
00:48:00,760 --> 00:48:05,560
is partial<font color="#E5E5E5"> railroad where we can reorder</font>

1209
00:48:03,010 --> 00:48:07,900
elf sections so<font color="#CCCCCC"> that internal data</font><font color="#E5E5E5"> like</font>

1210
00:48:05,560 --> 00:48:10,359
the global<font color="#E5E5E5"> offset table and structures</font>

1211
00:48:07,900 --> 00:48:12,640
and<font color="#E5E5E5"> stuff like that precedes any program</font>

1212
00:48:10,359 --> 00:48:15,549
data like the data and the BSS section

1213
00:48:12,640 --> 00:48:17,770
<font color="#E5E5E5">the relocation data is then made we only</font>

1214
00:48:15,550 --> 00:48:20,470
by covering<font color="#E5E5E5"> it with a kernel</font><font color="#CCCCCC"> Rio segment</font>

1215
00:48:17,770 --> 00:48:23,160
after relocation but<font color="#E5E5E5"> the problem is</font>

1216
00:48:20,470 --> 00:48:26,140
<font color="#CCCCCC">because of what they call lazy binding</font>

1217
00:48:23,160 --> 00:48:28,390
<font color="#CCCCCC">the PLT</font><font color="#E5E5E5"> god will still be writable and</font>

1218
00:48:26,140 --> 00:48:31,098
<font color="#E5E5E5">why is that the case because most of</font>

1219
00:48:28,390 --> 00:48:32,989
these symbols<font color="#E5E5E5"> will be looked up only</font>

1220
00:48:31,099 --> 00:48:35,390
<font color="#CCCCCC">runtime which means that you cannot make</font>

1221
00:48:32,989 --> 00:48:37,009
<font color="#CCCCCC">them readable</font><font color="#E5E5E5"> right away because they</font>

1222
00:48:35,390 --> 00:48:39,109
need to be<font color="#E5E5E5"> writable during dynamic</font>

1223
00:48:37,009 --> 00:48:42,680
<font color="#E5E5E5">lookup and that means that the most</font>

1224
00:48:39,109 --> 00:48:44,359
<font color="#E5E5E5">interesting part of the of these these</font>

1225
00:48:42,680 --> 00:48:46,879
sections<font color="#CCCCCC"> will still be writable</font><font color="#E5E5E5"> and this</font>

1226
00:48:44,359 --> 00:48:49,130
is well full railroad comes in<font color="#E5E5E5"> this</font>

1227
00:48:46,880 --> 00:48:51,440
<font color="#E5E5E5">basically works by disabling lazy</font>

1228
00:48:49,130 --> 00:48:53,869
binding and resolving all the symbols at

1229
00:48:51,440 --> 00:48:56,239
load time which makes<font color="#E5E5E5"> for slower load</font>

1230
00:48:53,869 --> 00:48:58,069
times but you know that's that's the<font color="#CCCCCC"> the</font>

1231
00:48:56,239 --> 00:49:02,229
price you have to pay and then<font color="#E5E5E5"> appeal to</font>

1232
00:48:58,069 --> 00:49:02,229
God<font color="#E5E5E5"> as only read is also read only</font>

1233
00:49:02,739 --> 00:49:06,589
unfortunately<font color="#CCCCCC"> on-q annex they did</font>

1234
00:49:04,849 --> 00:49:09,229
<font color="#E5E5E5">implement this but they implemented it</font>

1235
00:49:06,589 --> 00:49:10,819
<font color="#E5E5E5">in a fully broken way</font><font color="#CCCCCC"> on the left you</font>

1236
00:49:09,229 --> 00:49:13,249
<font color="#E5E5E5">can see</font><font color="#CCCCCC"> the implementation on Debian</font>

1237
00:49:10,819 --> 00:49:15,109
where the canoe railroad segment covers

1238
00:49:13,249 --> 00:49:17,269
all of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> sections including the global</font>

1239
00:49:15,109 --> 00:49:19,549
offset table<font color="#E5E5E5"> and on the right you</font><font color="#CCCCCC"> can</font>

1240
00:49:17,269 --> 00:49:23,118
see the<font color="#E5E5E5"> implementation</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> Q and</font><font color="#CCCCCC"> X 6.6</font>

1241
00:49:19,549 --> 00:49:25,940
<font color="#E5E5E5">and here you can see that they forgot</font><font color="#CCCCCC"> to</font>

1242
00:49:23,119 --> 00:49:28,519
relocate<font color="#E5E5E5"> the global offset</font><font color="#CCCCCC"> table</font><font color="#E5E5E5"> before</font>

1243
00:49:25,940 --> 00:49:30,259
<font color="#CCCCCC">the program data so the program data is</font>

1244
00:49:28,519 --> 00:49:34,098
in between<font color="#E5E5E5"> all these internal data</font>

1245
00:49:30,259 --> 00:49:37,190
sections and and the got which means

1246
00:49:34,099 --> 00:49:38,959
that the<font color="#E5E5E5"> god is not actually me made</font>

1247
00:49:37,190 --> 00:49:40,819
read-only and that means that even

1248
00:49:38,959 --> 00:49:42,589
though you set up your linker correctly

1249
00:49:40,819 --> 00:49:46,369
and you think you're protected by<font color="#CCCCCC"> rail</font>

1250
00:49:42,589 --> 00:49:47,599
<font color="#CCCCCC">row the God is still rideable here you</font>

1251
00:49:46,369 --> 00:49:50,539
can see how<font color="#CCCCCC"> that</font><font color="#E5E5E5"> works out</font><font color="#CCCCCC"> in practice</font>

1252
00:49:47,599 --> 00:49:52,880
<font color="#CCCCCC">on the left you have an Debian Linux</font><font color="#E5E5E5"> one</font>

1253
00:49:50,539 --> 00:49:56,089
application protected<font color="#CCCCCC"> railroad and we</font>

1254
00:49:52,880 --> 00:49:58,400
cannot write to<font color="#CCCCCC"> the particular</font><font color="#E5E5E5"> enter</font>

1255
00:49:56,089 --> 00:50:00,199
entry in the<font color="#CCCCCC"> gob PLT and on the right</font>

1256
00:49:58,400 --> 00:50:02,930
you have<font color="#E5E5E5"> the</font><font color="#CCCCCC"> same application with the</font>

1257
00:50:00,199 --> 00:50:05,420
same linker settings on<font color="#CCCCCC"> cue annex 6.6</font>

1258
00:50:02,930 --> 00:50:06,618
<font color="#E5E5E5">and we can actually bypass that despite</font>

1259
00:50:05,420 --> 00:50:10,670
the protection which should have been

1260
00:50:06,619 --> 00:50:12,680
<font color="#E5E5E5">active so we also found a local bypass</font>

1261
00:50:10,670 --> 00:50:14,959
which was very<font color="#E5E5E5"> weird apparently</font><font color="#CCCCCC"> all the</font>

1262
00:50:12,680 --> 00:50:17,660
debug has an undocumented option called

1263
00:50:14,959 --> 00:50:19,519
<font color="#E5E5E5">imposter which does</font><font color="#CCCCCC"> nothing except</font><font color="#E5E5E5"> for</font>

1264
00:50:17,660 --> 00:50:21,529
disabling railroad<font color="#E5E5E5"> without any kind of</font>

1265
00:50:19,519 --> 00:50:24,258
<font color="#CCCCCC">privilege checks</font><font color="#E5E5E5"> this is nice if you</font>

1266
00:50:21,529 --> 00:50:26,420
<font color="#CCCCCC">want to exploit set UID binaries locally</font>

1267
00:50:24,259 --> 00:50:29,289
<font color="#E5E5E5">now both of these issues</font><font color="#CCCCCC"> are fixed with</font>

1268
00:50:26,420 --> 00:50:32,839
patches<font color="#CCCCCC"> fork UNIX 6.6 and QX 7</font><font color="#E5E5E5"> however</font>

1269
00:50:29,289 --> 00:50:34,099
<font color="#E5E5E5">that brings us to the final remarks so</font>

1270
00:50:32,839 --> 00:50:36,259
we<font color="#E5E5E5"> disclosed all the issues we discussed</font>

1271
00:50:34,099 --> 00:50:38,989
<font color="#CCCCCC">the Blackberry</font><font color="#E5E5E5"> most of</font><font color="#CCCCCC"> these</font><font color="#E5E5E5"> issues are</font>

1272
00:50:36,259 --> 00:50:40,670
fixed<font color="#E5E5E5"> in</font><font color="#CCCCCC"> seven patches 46.6 are</font>

1273
00:50:38,989 --> 00:50:43,160
available for

1274
00:50:40,670 --> 00:50:44,990
some of these<font color="#CCCCCC"> issues</font><font color="#E5E5E5"> but it will take</font>

1275
00:50:43,160 --> 00:50:47,210
lots and lots of time before<font color="#CCCCCC"> these</font>

1276
00:50:44,990 --> 00:50:50,390
patches<font color="#E5E5E5"> will filter down to the OEMs</font><font color="#CCCCCC"> and</font>

1277
00:50:47,210 --> 00:50:53,869
end-users<font color="#CCCCCC"> in embedded systems</font><font color="#E5E5E5"> people</font>

1278
00:50:50,390 --> 00:50:55,700
will need<font color="#E5E5E5"> to recompile the the operating</font>

1279
00:50:53,869 --> 00:50:57,230
system ship new<font color="#E5E5E5"> firmware images these</font>

1280
00:50:55,700 --> 00:50:59,540
firmware images will have to be loaded

1281
00:50:57,230 --> 00:51:01,160
<font color="#CCCCCC">on</font><font color="#E5E5E5"> whatever system so these</font><font color="#CCCCCC"> issues are</font>

1282
00:50:59,540 --> 00:51:03,200
discussed might be out there<font color="#CCCCCC"> in real</font>

1283
00:51:01,160 --> 00:51:03,640
<font color="#E5E5E5">world systems for years and years to</font>

1284
00:51:03,200 --> 00:51:05,899
come

1285
00:51:03,640 --> 00:51:07,578
and in conclusion most of the

1286
00:51:05,900 --> 00:51:09,290
mitigations were<font color="#CCCCCC"> okay on the toolchain</font>

1287
00:51:07,579 --> 00:51:10,579
site and some<font color="#E5E5E5"> weak defaults and</font>

1288
00:51:09,290 --> 00:51:12,859
<font color="#CCCCCC">lingering mistakes but</font><font color="#E5E5E5"> that wasn't</font><font color="#CCCCCC"> the</font>

1289
00:51:10,579 --> 00:51:14,510
problem<font color="#CCCCCC"> but the problems really reside</font>

1290
00:51:12,859 --> 00:51:16,220
<font color="#CCCCCC">on the operating system side because</font>

1291
00:51:14,510 --> 00:51:18,200
<font color="#CCCCCC">communiques cannot</font><font color="#E5E5E5"> benefit directly from</font>

1292
00:51:16,220 --> 00:51:19,669
<font color="#E5E5E5">any work that</font><font color="#CCCCCC"> has been</font><font color="#E5E5E5"> done</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> general</font>

1293
00:51:18,200 --> 00:51:22,129
purpose operating<font color="#E5E5E5"> system security</font>

1294
00:51:19,670 --> 00:51:23,780
<font color="#CCCCCC">because it cannot</font><font color="#E5E5E5"> easily port one to one</font>

1295
00:51:22,130 --> 00:51:25,579
<font color="#E5E5E5">because of a different architectural</font>

1296
00:51:23,780 --> 00:51:28,369
legacy<font color="#E5E5E5"> and the result is a lot of</font>

1297
00:51:25,579 --> 00:51:30,109
homebrew DIY mitigations<font color="#CCCCCC"> what's really</font>

1298
00:51:28,369 --> 00:51:32,270
evident is<font color="#CCCCCC"> the lack of</font><font color="#E5E5E5"> prior attention</font>

1299
00:51:30,109 --> 00:51:34,098
by security researchers<font color="#CCCCCC"> the</font>

1300
00:51:32,270 --> 00:51:36,799
vulnerabilities that<font color="#E5E5E5"> you saw here feel</font>

1301
00:51:34,099 --> 00:51:38,540
like they're from<font color="#E5E5E5"> the</font><font color="#CCCCCC"> early</font><font color="#E5E5E5"> 2000s and we</font>

1302
00:51:36,799 --> 00:51:40,369
can see time and<font color="#E5E5E5"> time</font><font color="#CCCCCC"> again</font><font color="#E5E5E5"> that</font>

1303
00:51:38,540 --> 00:51:42,380
embedded random number generator design

1304
00:51:40,369 --> 00:51:44,540
remains difficult<font color="#E5E5E5"> entropy issues mean</font>

1305
00:51:42,380 --> 00:51:45,980
that the design burden usually rests

1306
00:51:44,540 --> 00:51:49,910
with system integrators and<font color="#E5E5E5"> that</font>

1307
00:51:45,980 --> 00:51:51,980
presents<font color="#E5E5E5"> a lot of troubling issues on a</font>

1308
00:51:49,910 --> 00:51:53,420
positive note<font color="#CCCCCC"> q Nix at least</font><font color="#E5E5E5"> attempts to</font>

1309
00:51:51,980 --> 00:51:55,910
keep up with general purpose<font color="#E5E5E5"> operating</font>

1310
00:51:53,420 --> 00:51:58,040
system security<font color="#CCCCCC"> at one of the few non</font>

1311
00:51:55,910 --> 00:51:59,598
<font color="#CCCCCC">line x</font><font color="#E5E5E5"> bsd and windows-based embedded</font>

1312
00:51:58,040 --> 00:52:02,569
operating<font color="#E5E5E5"> systems with any kind of</font>

1313
00:51:59,599 --> 00:52:04,190
exploit mitigations whatsoever<font color="#E5E5E5"> they had</font>

1314
00:52:02,569 --> 00:52:05,450
a quick and extensive vendor<font color="#CCCCCC"> response</font>

1315
00:52:04,190 --> 00:52:07,839
and integration of<font color="#E5E5E5"> our feedback</font>

1316
00:52:05,450 --> 00:52:10,520
<font color="#E5E5E5">sometimes directly into the code and</font>

1317
00:52:07,839 --> 00:52:12,410
what we really need is more<font color="#E5E5E5"> attention to</font>

1318
00:52:10,520 --> 00:52:15,020
<font color="#E5E5E5">embedded operating system security in</font>

1319
00:52:12,410 --> 00:52:17,509
general<font color="#E5E5E5"> you can expect some more Kunik</font>

1320
00:52:15,020 --> 00:52:20,750
stuff later this<font color="#E5E5E5"> year at infiltrate in</font>

1321
00:52:17,510 --> 00:52:29,380
<font color="#E5E5E5">Miami and that's it if there's any</font>

1322
00:52:20,750 --> 00:52:29,380
questions I'll take them now yeah

1323
00:52:31,270 --> 00:52:34,369
[Music]

1324
00:52:37,580 --> 00:52:40,679
[Music]

1325
00:52:41,090 --> 00:52:46,890
you mean if they had any driver support

1326
00:52:44,190 --> 00:52:49,200
for<font color="#CCCCCC"> tearing G's stuff like</font><font color="#E5E5E5"> that no I</font><font color="#CCCCCC"> I</font>

1327
00:52:46,890 --> 00:52:52,859
hadn't seen anything there<font color="#E5E5E5"> but I suspect</font>

1328
00:52:49,200 --> 00:52:54,810
<font color="#CCCCCC">that there are board support packages</font>

1329
00:52:52,860 --> 00:52:56,970
for particular<font color="#CCCCCC"> things maybe by</font>

1330
00:52:54,810 --> 00:53:00,360
blackberry maybe by<font color="#CCCCCC"> third-party vendors</font>

1331
00:52:56,970 --> 00:53:02,370
but by default<font color="#CCCCCC"> they have a very</font><font color="#E5E5E5"> very</font>

1332
00:53:00,360 --> 00:53:05,070
respect restricted space of entropy

1333
00:53:02,370 --> 00:53:07,529
sources so I haven't<font color="#E5E5E5"> seen anything</font><font color="#CCCCCC"> there</font>

1334
00:53:05,070 --> 00:53:09,180
<font color="#CCCCCC">already like out-of-the-box TNG support</font>

1335
00:53:07,530 --> 00:53:10,800
for anything<font color="#E5E5E5"> like I</font><font color="#CCCCCC"> don't know what's</font>

1336
00:53:09,180 --> 00:53:17,759
present<font color="#CCCCCC"> on some arm course or whatever</font>

1337
00:53:10,800 --> 00:53:20,330
<font color="#E5E5E5">there's nothing like that by default any</font>

1338
00:53:17,760 --> 00:53:20,330
other questions

1339
00:53:26,550 --> 00:53:34,519
<font color="#E5E5E5">all right thank you</font>

1340
00:53:28,470 --> 00:53:34,519
[Applause]

