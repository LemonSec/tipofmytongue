1
00:00:00,030 --> 00:00:05,790
hello everyone<font color="#CCCCCC"> good</font><font color="#E5E5E5"> morning welcome to</font>

2
00:00:02,760 --> 00:00:08,039
<font color="#E5E5E5">the rise and fall</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> MC a bit about me</font>

3
00:00:05,790 --> 00:00:11,490
my<font color="#CCCCCC"> name is Talley Berman</font><font color="#E5E5E5"> I'm a</font>

4
00:00:08,039 --> 00:00:13,889
researcher<font color="#CCCCCC"> focused</font><font color="#E5E5E5"> on reverse</font>

5
00:00:11,490 --> 00:00:17,130
engineering<font color="#E5E5E5"> and I mostly do</font><font color="#CCCCCC"> low-level</font>

6
00:00:13,889 --> 00:00:19,939
stuff for the past two<font color="#CCCCCC"> years I</font><font color="#E5E5E5"> was the</font>

7
00:00:17,130 --> 00:00:23,160
head of<font color="#CCCCCC"> the research team</font><font color="#E5E5E5"> at in silo and</font>

8
00:00:19,939 --> 00:00:24,900
there I worked<font color="#E5E5E5"> on</font><font color="#CCCCCC"> processed doppelganger</font>

9
00:00:23,160 --> 00:00:28,140
<font color="#E5E5E5">and atom bombing which are</font><font color="#CCCCCC"> attack</font>

10
00:00:24,900 --> 00:00:29,880
techniques on<font color="#E5E5E5"> Windows and currently I'm</font>

11
00:00:28,140 --> 00:00:32,610
one of the founders at<font color="#E5E5E5"> Pilar</font><font color="#CCCCCC"> iam which</font>

12
00:00:29,880 --> 00:00:35,100
is a security<font color="#E5E5E5"> company that provides</font>

13
00:00:32,610 --> 00:00:38,010
software<font color="#E5E5E5"> research services to big</font>

14
00:00:35,100 --> 00:00:41,040
companies<font color="#E5E5E5"> governments and startups</font><font color="#CCCCCC"> all</font>

15
00:00:38,010 --> 00:00:44,370
<font color="#E5E5E5">over the world and today we're gonna be</font>

16
00:00:41,040 --> 00:00:46,200
<font color="#CCCCCC">talking about</font><font color="#E5E5E5"> MC we're gonna start off</font>

17
00:00:44,370 --> 00:00:47,669
by<font color="#CCCCCC"> talking about an introduction we're</font>

18
00:00:46,200 --> 00:00:49,800
going to talk<font color="#E5E5E5"> about script based threats</font>

19
00:00:47,670 --> 00:00:51,840
and file<font color="#CCCCCC"> of threats we're going to talk</font>

20
00:00:49,800 --> 00:00:53,730
<font color="#E5E5E5">about obfuscation</font><font color="#CCCCCC"> and the cat and</font><font color="#E5E5E5"> mouse</font>

21
00:00:51,840 --> 00:00:56,190
game that attackers<font color="#E5E5E5"> and defenders play</font>

22
00:00:53,730 --> 00:00:59,849
in the scripting domain we're gonna take

23
00:00:56,190 --> 00:01:01,769
a look at at<font color="#CCCCCC"> AMC from the developers</font>

24
00:00:59,850 --> 00:01:03,690
side from the app<font color="#E5E5E5"> developer side and</font>

25
00:01:01,770 --> 00:01:07,020
from the security vendors perspective

26
00:01:03,690 --> 00:01:10,770
<font color="#E5E5E5">then we're gonna take a look at building</font>

27
00:01:07,020 --> 00:01:13,080
and providing<font color="#CCCCCC"> your own AMC provider and</font>

28
00:01:10,770 --> 00:01:15,360
once we<font color="#E5E5E5"> know</font><font color="#CCCCCC"> all this</font><font color="#E5E5E5"> we're gonna take a</font>

29
00:01:13,080 --> 00:01:19,048
look<font color="#E5E5E5"> at bypassing MC because this is</font>

30
00:01:15,360 --> 00:01:22,920
black hat<font color="#E5E5E5"> and we're gonna really try to</font>

31
00:01:19,049 --> 00:01:25,530
think<font color="#CCCCCC"> if MC is the tool that we need to</font>

32
00:01:22,920 --> 00:01:29,850
deal with<font color="#E5E5E5"> obfuscation</font><font color="#CCCCCC"> and if this is a</font>

33
00:01:25,530 --> 00:01:33,150
<font color="#CCCCCC">long-term solution or not so</font><font color="#E5E5E5"> script</font>

34
00:01:29,850 --> 00:01:35,369
<font color="#E5E5E5">based threats well I feel like for</font><font color="#CCCCCC"> the</font>

35
00:01:33,150 --> 00:01:37,680
<font color="#E5E5E5">past five or</font><font color="#CCCCCC"> six</font><font color="#E5E5E5"> years every single</font>

36
00:01:35,369 --> 00:01:39,060
article that mentions<font color="#E5E5E5"> script based</font>

37
00:01:37,680 --> 00:01:42,150
malware tries to make it<font color="#CCCCCC"> seem like</font>

38
00:01:39,060 --> 00:01:43,829
<font color="#E5E5E5">there's a trend of script based malware</font>

39
00:01:42,150 --> 00:01:45,829
<font color="#E5E5E5">oh I think it's not really a trend</font>

40
00:01:43,829 --> 00:01:49,559
anymore<font color="#CCCCCC"> I think it's pretty mainstream</font>

41
00:01:45,829 --> 00:01:51,360
<font color="#E5E5E5">so I think it's safe</font><font color="#CCCCCC"> to say that</font><font color="#E5E5E5"> more</font>

42
00:01:49,560 --> 00:01:54,659
threats today<font color="#CCCCCC"> contain some kind of</font>

43
00:01:51,360 --> 00:01:57,450
script based component in them and the

44
00:01:54,659 --> 00:02:00,479
reasons for<font color="#E5E5E5"> this are that first of all</font>

45
00:01:57,450 --> 00:02:03,030
PowerShell is available or<font color="#E5E5E5"> BB script or</font>

46
00:02:00,479 --> 00:02:05,700
on<font color="#E5E5E5"> Linux you have bash is available in</font>

47
00:02:03,030 --> 00:02:07,560
all platforms<font color="#E5E5E5"> on all machines it's</font>

48
00:02:05,700 --> 00:02:09,890
vastly<font color="#E5E5E5"> used in domain environments right</font>

49
00:02:07,560 --> 00:02:11,790
<font color="#E5E5E5">you have system administrators who love</font>

50
00:02:09,889 --> 00:02:12,660
setting up<font color="#E5E5E5"> your environment by using</font>

51
00:02:11,790 --> 00:02:16,530
<font color="#E5E5E5">PowerShell Square</font>

52
00:02:12,660 --> 00:02:20,730
and scripts are faster to develop and

53
00:02:16,530 --> 00:02:26,330
there's a minimal skill set needed to to

54
00:02:20,730 --> 00:02:28,739
achieve<font color="#E5E5E5"> decently function in malware now</font>

55
00:02:26,330 --> 00:02:32,340
another<font color="#E5E5E5"> reason that they choose to use</font>

56
00:02:28,740 --> 00:02:34,950
<font color="#CCCCCC">scripts is that scripts</font><font color="#E5E5E5"> are text and</font>

57
00:02:32,340 --> 00:02:37,530
text<font color="#E5E5E5"> is easier to obfuscate than machine</font>

58
00:02:34,950 --> 00:02:40,220
code and empirically<font color="#E5E5E5"> anti viruses and</font>

59
00:02:37,530 --> 00:02:43,860
security products<font color="#E5E5E5"> have had trouble</font>

60
00:02:40,220 --> 00:02:47,130
<font color="#E5E5E5">monitoring scripts compared to natively</font>

61
00:02:43,860 --> 00:02:49,620
compiled code and this<font color="#CCCCCC"> is probably</font>

62
00:02:47,130 --> 00:02:51,620
<font color="#E5E5E5">because when you have an engine such</font><font color="#CCCCCC"> as</font>

63
00:02:49,620 --> 00:02:54,510
power shell or<font color="#E5E5E5"> the dotnet framework or</font>

64
00:02:51,620 --> 00:02:59,300
<font color="#E5E5E5">Java</font><font color="#CCCCCC"> for that matter</font><font color="#E5E5E5"> when you</font><font color="#CCCCCC"> have an</font>

65
00:02:54,510 --> 00:03:01,769
engine<font color="#E5E5E5"> that's running code interpreted</font>

66
00:02:59,300 --> 00:03:04,200
<font color="#E5E5E5">it's very hard to tell where</font><font color="#CCCCCC"> the engine</font>

67
00:03:01,770 --> 00:03:06,870
ends and where<font color="#CCCCCC"> the code begins and this</font>

68
00:03:04,200 --> 00:03:08,970
makes<font color="#E5E5E5"> it more difficult</font><font color="#CCCCCC"> than</font><font color="#E5E5E5"> that when</font>

69
00:03:06,870 --> 00:03:09,330
<font color="#E5E5E5">you try</font><font color="#CCCCCC"> to inspect machine code that's</font>

70
00:03:08,970 --> 00:03:10,890
running

71
00:03:09,330 --> 00:03:12,360
that's compiled natively and<font color="#E5E5E5"> then it's</font>

72
00:03:10,890 --> 00:03:16,170
<font color="#E5E5E5">very clear</font><font color="#CCCCCC"> where the image ends and</font>

73
00:03:12,360 --> 00:03:18,959
where<font color="#CCCCCC"> the operating system begins so</font>

74
00:03:16,170 --> 00:03:21,630
Silas is another<font color="#CCCCCC"> buzzword</font><font color="#E5E5E5"> that's been</font>

75
00:03:18,959 --> 00:03:23,670
thrown around a<font color="#CCCCCC"> lot</font><font color="#E5E5E5"> basically</font><font color="#CCCCCC"> a file</font>

76
00:03:21,630 --> 00:03:25,829
always has to run if we're gonna<font color="#E5E5E5"> if</font>

77
00:03:23,670 --> 00:03:27,750
we're gonna survive<font color="#CCCCCC"> a reboot except for</font>

78
00:03:25,830 --> 00:03:29,760
very special<font color="#E5E5E5"> cases like if you find a</font>

79
00:03:27,750 --> 00:03:31,170
vulnerability<font color="#E5E5E5"> and DFS driver</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> you're</font>

80
00:03:29,760 --> 00:03:33,540
able<font color="#E5E5E5"> to get the kernel to run code while</font>

81
00:03:31,170 --> 00:03:35,399
it's parsing the<font color="#CCCCCC"> raw</font><font color="#E5E5E5"> NTFS data well</font><font color="#CCCCCC"> okay</font>

82
00:03:33,540 --> 00:03:37,410
<font color="#E5E5E5">that will qualify as truly truly</font><font color="#CCCCCC"> file us</font>

83
00:03:35,400 --> 00:03:40,350
but in all other scenarios we're talking

84
00:03:37,410 --> 00:03:42,630
about abusing<font color="#E5E5E5"> a signed executable such</font>

85
00:03:40,350 --> 00:03:45,359
as<font color="#CCCCCC"> powershell</font><font color="#E5E5E5"> for that matter and having</font>

86
00:03:42,630 --> 00:03:47,040
it run your code<font color="#E5E5E5"> and then your code is</font>

87
00:03:45,360 --> 00:03:49,470
<font color="#E5E5E5">probably stored somewhere in the</font>

88
00:03:47,040 --> 00:03:53,070
registry or in a file but there is no

89
00:03:49,470 --> 00:03:55,410
file to scan<font color="#CCCCCC"> or for the antivirus</font><font color="#E5E5E5"> for</font>

90
00:03:53,070 --> 00:03:58,500
that matter now a very simple<font color="#CCCCCC"> example</font>

91
00:03:55,410 --> 00:04:01,680
you can see is here<font color="#CCCCCC"> a command line of</font>

92
00:03:58,500 --> 00:04:03,750
<font color="#E5E5E5">powershell running a download string</font>

93
00:04:01,680 --> 00:04:05,520
function to download<font color="#CCCCCC"> something</font><font color="#E5E5E5"> code from</font>

94
00:04:03,750 --> 00:04:08,100
paste bin<font color="#E5E5E5"> and then executing it at</font>

95
00:04:05,520 --> 00:04:12,030
<font color="#E5E5E5">runtime so the malware comes from the</font>

96
00:04:08,100 --> 00:04:13,079
internet<font color="#E5E5E5"> but the powershell is the one</font>

97
00:04:12,030 --> 00:04:14,910
downloading it and<font color="#E5E5E5"> running it without</font>

98
00:04:13,080 --> 00:04:17,430
<font color="#CCCCCC">putting it on disk</font><font color="#E5E5E5"> and there's not much</font>

99
00:04:14,910 --> 00:04:20,700
<font color="#E5E5E5">for a security product to scan at this</font>

100
00:04:17,430 --> 00:04:22,610
point right<font color="#CCCCCC"> now obfuscation</font><font color="#E5E5E5"> according to</font>

101
00:04:20,700 --> 00:04:24,840
<font color="#CCCCCC">Wikipedia</font><font color="#E5E5E5"> and software development</font>

102
00:04:22,610 --> 00:04:25,970
application is the deliberate act of

103
00:04:24,840 --> 00:04:27,560
creating<font color="#E5E5E5"> source or</font>

104
00:04:25,970 --> 00:04:29,000
<font color="#CCCCCC">chin coat that is</font><font color="#E5E5E5"> difficult for humans</font>

105
00:04:27,560 --> 00:04:31,310
to understand<font color="#E5E5E5"> well I do agree with that</font>

106
00:04:29,000 --> 00:04:33,890
<font color="#E5E5E5">but</font><font color="#CCCCCC"> when</font><font color="#E5E5E5"> you're</font><font color="#CCCCCC"> talking about</font><font color="#E5E5E5"> malware</font>

107
00:04:31,310 --> 00:04:35,650
<font color="#CCCCCC">scripting</font><font color="#E5E5E5"> and obfuscation you're not</font>

108
00:04:33,890 --> 00:04:37,849
just<font color="#E5E5E5"> you're</font><font color="#CCCCCC"> just trying to</font><font color="#E5E5E5"> avoid</font>

109
00:04:35,650 --> 00:04:40,130
<font color="#CCCCCC">comprehension by humans</font><font color="#E5E5E5"> you're trying to</font>

110
00:04:37,850 --> 00:04:41,330
avoid the inspection<font color="#E5E5E5"> of security</font>

111
00:04:40,130 --> 00:04:44,240
products that are trying<font color="#E5E5E5"> to understand</font>

112
00:04:41,330 --> 00:04:45,919
what<font color="#CCCCCC"> it is that you're trying to</font><font color="#E5E5E5"> run now</font>

113
00:04:44,240 --> 00:04:47,060
<font color="#E5E5E5">there's a</font><font color="#CCCCCC"> cat-and-mouse game</font><font color="#E5E5E5"> a very</font>

114
00:04:45,920 --> 00:04:49,250
<font color="#E5E5E5">simple one that goes on between</font>

115
00:04:47,060 --> 00:04:51,410
attackers and defenders in the<font color="#E5E5E5"> scripting</font>

116
00:04:49,250 --> 00:04:52,780
world<font color="#E5E5E5"> now start with</font><font color="#CCCCCC"> a simple example</font>

117
00:04:51,410 --> 00:04:57,280
[Music]

118
00:04:52,780 --> 00:04:59,299
let's say I have<font color="#E5E5E5"> a function</font><font color="#CCCCCC"> that runs</font>

119
00:04:57,280 --> 00:05:01,849
right host malware which is basically

120
00:04:59,300 --> 00:05:04,400
like a hello<font color="#CCCCCC"> world for PowerShell that</font>

121
00:05:01,850 --> 00:05:06,410
prints out malware so a simple signature

122
00:05:04,400 --> 00:05:08,659
<font color="#E5E5E5">would be okay well if I see right host</font>

123
00:05:06,410 --> 00:05:10,730
<font color="#CCCCCC">single quote malware single quote</font><font color="#E5E5E5"> then</font>

124
00:05:08,660 --> 00:05:12,260
that<font color="#E5E5E5"> is a</font><font color="#CCCCCC"> malware</font><font color="#E5E5E5"> so a simple bypass</font>

125
00:05:10,730 --> 00:05:14,210
would be to change<font color="#E5E5E5"> the single quote to a</font>

126
00:05:12,260 --> 00:05:16,550
double quote right<font color="#E5E5E5"> and then the</font>

127
00:05:14,210 --> 00:05:18,979
antivirus would say okay well I'm gonna

128
00:05:16,550 --> 00:05:20,090
<font color="#E5E5E5">ignore the single quote for me as far</font><font color="#CCCCCC"> as</font>

129
00:05:18,980 --> 00:05:21,560
I'm concerned it<font color="#E5E5E5"> could be a single quote</font>

130
00:05:20,090 --> 00:05:24,590
<font color="#E5E5E5">double quote or any any other character</font>

131
00:05:21,560 --> 00:05:27,080
<font color="#E5E5E5">and so this is a simple bypass and this</font>

132
00:05:24,590 --> 00:05:28,580
can be again a simple signature for that

133
00:05:27,080 --> 00:05:30,800
<font color="#CCCCCC">and this can</font><font color="#E5E5E5"> be bypassed by using screen</font>

134
00:05:28,580 --> 00:05:32,990
string concatenation<font color="#E5E5E5"> and this game can</font>

135
00:05:30,800 --> 00:05:36,200
<font color="#CCCCCC">continue on and on we can use base64</font>

136
00:05:32,990 --> 00:05:39,230
encoding and then the antivirus<font color="#E5E5E5"> can</font>

137
00:05:36,200 --> 00:05:41,719
decide if it<font color="#E5E5E5"> wants</font><font color="#CCCCCC"> to either emulate</font><font color="#E5E5E5"> the</font>

138
00:05:39,230 --> 00:05:43,490
basics<font color="#E5E5E5"> T for decoding or to create</font><font color="#CCCCCC"> a</font>

139
00:05:41,720 --> 00:05:46,400
signature for the actual base64 data

140
00:05:43,490 --> 00:05:49,490
both<font color="#E5E5E5"> things are quite easy to bypass and</font>

141
00:05:46,400 --> 00:05:53,719
then malware authors begin to use things

142
00:05:49,490 --> 00:05:57,080
like XOR based encoding so<font color="#CCCCCC"> antivirus is</font>

143
00:05:53,720 --> 00:05:58,940
implement an emulation for<font color="#E5E5E5"> that until</font>

144
00:05:57,080 --> 00:06:04,070
finally<font color="#E5E5E5"> malware authors realized you</font>

145
00:05:58,940 --> 00:06:06,200
could just<font color="#E5E5E5"> really run a encryption</font>

146
00:06:04,070 --> 00:06:07,700
algorithm because<font color="#E5E5E5"> PowerShell that allows</font>

147
00:06:06,200 --> 00:06:09,380
you access to<font color="#E5E5E5"> all</font><font color="#CCCCCC"> types</font><font color="#E5E5E5"> of encryption</font>

148
00:06:07,700 --> 00:06:11,150
libraries that are<font color="#CCCCCC"> available to</font><font color="#E5E5E5"> Nets so</font>

149
00:06:09,380 --> 00:06:13,490
you could<font color="#CCCCCC"> just</font><font color="#E5E5E5"> simply use AES encryption</font>

150
00:06:11,150 --> 00:06:16,130
for<font color="#E5E5E5"> that matter and and you're able</font><font color="#CCCCCC"> to</font>

151
00:06:13,490 --> 00:06:18,229
execute whatever<font color="#E5E5E5"> you want and for for</font>

152
00:06:16,130 --> 00:06:21,440
the antivirus<font color="#E5E5E5"> this would be very very</font>

153
00:06:18,229 --> 00:06:25,400
hard to<font color="#E5E5E5"> brute-force probably</font><font color="#CCCCCC"> impossible</font>

154
00:06:21,440 --> 00:06:27,440
and we can as antivirus products we can

155
00:06:25,400 --> 00:06:29,989
try to<font color="#CCCCCC"> identify the key in the algorithm</font>

156
00:06:27,440 --> 00:06:32,150
<font color="#E5E5E5">but what if the key comes from like file</font>

157
00:06:29,990 --> 00:06:35,479
or registry or the<font color="#E5E5E5"> Internet it becomes</font>

158
00:06:32,150 --> 00:06:37,219
<font color="#E5E5E5">very hard</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> do reliably so the point is</font>

159
00:06:35,479 --> 00:06:38,719
<font color="#E5E5E5">a bit of creative thinking and we can</font>

160
00:06:37,220 --> 00:06:39,820
slip<font color="#CCCCCC"> past the most advanced detection</font>

161
00:06:38,720 --> 00:06:44,090
<font color="#E5E5E5">algorithm</font>

162
00:06:39,820 --> 00:06:45,530
now at this point<font color="#E5E5E5"> antivirus solutions</font>

163
00:06:44,090 --> 00:06:47,289
begin to write signatures for<font color="#CCCCCC"> the</font>

164
00:06:45,530 --> 00:06:49,219
<font color="#E5E5E5">opposite getters themselves instead of</font>

165
00:06:47,290 --> 00:06:50,930
instead<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the actual malware and</font>

166
00:06:49,220 --> 00:06:53,630
according to<font color="#E5E5E5"> Lee</font><font color="#CCCCCC"> Holmes from</font><font color="#E5E5E5"> Microsoft</font>

167
00:06:50,930 --> 00:06:54,920
<font color="#CCCCCC">he says that in fact it that is what it</font>

168
00:06:53,630 --> 00:06:56,870
accounts for<font color="#E5E5E5"> the</font><font color="#CCCCCC"> vast</font><font color="#E5E5E5"> majority of</font>

169
00:06:54,920 --> 00:06:59,270
signatures for script based malware now

170
00:06:56,870 --> 00:07:00,890
if we have an obfuscation that is as

171
00:06:59,270 --> 00:07:03,289
<font color="#E5E5E5">trivial as the one we saw</font><font color="#CCCCCC"> before</font><font color="#E5E5E5"> which</font>

172
00:07:00,890 --> 00:07:04,969
is<font color="#E5E5E5"> here again then trying to create a</font>

173
00:07:03,290 --> 00:07:06,350
signature<font color="#E5E5E5"> for something like this would</font>

174
00:07:04,970 --> 00:07:09,200
generate an unacceptable number<font color="#E5E5E5"> of false</font>

175
00:07:06,350 --> 00:07:12,080
positives<font color="#E5E5E5"> at this point we have</font>

176
00:07:09,200 --> 00:07:15,380
anti-malware scan interface MC or<font color="#CCCCCC"> Amos</font>

177
00:07:12,080 --> 00:07:17,120
ID which enters the<font color="#E5E5E5"> picture now there's</font>

178
00:07:15,380 --> 00:07:18,409
a long text on<font color="#CCCCCC"> MSDN that describes the</font>

179
00:07:17,120 --> 00:07:19,720
purpose<font color="#E5E5E5"> of this I'm</font><font color="#CCCCCC"> gonna save you the</font>

180
00:07:18,410 --> 00:07:23,600
trouble of reading it<font color="#E5E5E5"> and I'll explain</font>

181
00:07:19,720 --> 00:07:25,280
<font color="#E5E5E5">so MC or anti-malware scan interface was</font>

182
00:07:23,600 --> 00:07:28,910
introduced to help AV vendors deal with

183
00:07:25,280 --> 00:07:30,739
script based threats it's a mechanism

184
00:07:28,910 --> 00:07:34,640
that standardizes<font color="#E5E5E5"> the scanning of</font>

185
00:07:30,740 --> 00:07:37,010
content right<font color="#E5E5E5"> so any app can</font><font color="#CCCCCC"> request any</font>

186
00:07:34,640 --> 00:07:39,530
content<font color="#CCCCCC"> to be scanned</font><font color="#E5E5E5"> it can be a file</font>

187
00:07:37,010 --> 00:07:42,710
can be<font color="#E5E5E5"> text to be a buffer and any</font>

188
00:07:39,530 --> 00:07:44,840
security vendor can implement an MC

189
00:07:42,710 --> 00:07:46,219
provider and register to receive<font color="#E5E5E5"> those</font>

190
00:07:44,840 --> 00:07:47,630
scans so basically we have the OS

191
00:07:46,220 --> 00:07:49,910
becoming like a middleman<font color="#E5E5E5"> between</font>

192
00:07:47,630 --> 00:07:51,890
application developers and antivirus

193
00:07:49,910 --> 00:07:55,850
developers where any app<font color="#CCCCCC"> can request</font>

194
00:07:51,890 --> 00:07:57,590
content to be scanned<font color="#E5E5E5"> and any antivirus</font>

195
00:07:55,850 --> 00:08:01,820
can scan that contact<font color="#CCCCCC"> and return and</font>

196
00:07:57,590 --> 00:08:04,280
answer to the app now the supported

197
00:08:01,820 --> 00:08:06,530
vendors<font color="#E5E5E5"> for</font><font color="#CCCCCC"> MC</font><font color="#E5E5E5"> are Windows Defender</font>

198
00:08:04,280 --> 00:08:08,150
<font color="#CCCCCC">Windows</font><font color="#E5E5E5"> Defender ATP which</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the paid</font>

199
00:08:06,530 --> 00:08:10,489
version<font color="#E5E5E5"> of it which is Microsoft so</font>

200
00:08:08,150 --> 00:08:13,039
that's<font color="#E5E5E5"> not a big surprise</font><font color="#CCCCCC"> but also ESET</font>

201
00:08:10,490 --> 00:08:14,500
supports it<font color="#E5E5E5"> AVG and</font><font color="#CCCCCC"> BitDefender and the</font>

202
00:08:13,040 --> 00:08:17,600
funny<font color="#E5E5E5"> thing is</font><font color="#CCCCCC"> that if you</font><font color="#E5E5E5"> google</font>

203
00:08:14,500 --> 00:08:19,340
<font color="#CCCCCC">BitDefender</font><font color="#E5E5E5"> and MC the first thing you</font>

204
00:08:17,600 --> 00:08:21,560
see<font color="#CCCCCC"> is how do I disable</font><font color="#E5E5E5"> MC service</font>

205
00:08:19,340 --> 00:08:25,909
provider so that's kind of funny joke

206
00:08:21,560 --> 00:08:27,620
<font color="#E5E5E5">but it's it's really the</font><font color="#CCCCCC"> case</font><font color="#E5E5E5"> so let's</font>

207
00:08:25,910 --> 00:08:29,930
take a look<font color="#CCCCCC"> at MC from a developer's</font>

208
00:08:27,620 --> 00:08:31,400
perspective<font color="#CCCCCC"> right</font><font color="#E5E5E5"> let's get into the</font>

209
00:08:29,930 --> 00:08:33,440
mindset of<font color="#E5E5E5"> someone who</font><font color="#CCCCCC"> is writing</font><font color="#E5E5E5"> an app</font>

210
00:08:31,400 --> 00:08:36,409
such<font color="#CCCCCC"> as the creators or</font><font color="#E5E5E5"> PowerShell and</font>

211
00:08:33,440 --> 00:08:40,280
they want<font color="#E5E5E5"> to use MC as clients they</font><font color="#CCCCCC"> want</font>

212
00:08:36,409 --> 00:08:41,179
to send requests to<font color="#CCCCCC"> be scanned</font><font color="#E5E5E5"> so we</font>

213
00:08:40,280 --> 00:08:43,309
start off<font color="#CCCCCC"> by looking at the</font>

214
00:08:41,179 --> 00:08:44,870
documentation on<font color="#CCCCCC"> MSDN</font><font color="#E5E5E5"> right and we see</font>

215
00:08:43,309 --> 00:08:46,849
that the<font color="#E5E5E5"> documentation is split into</font>

216
00:08:44,870 --> 00:08:48,980
enumerations functions and interfaces

217
00:08:46,850 --> 00:08:51,500
<font color="#E5E5E5">now</font><font color="#CCCCCC"> out of the</font><font color="#E5E5E5"> immunes we only worry</font>

218
00:08:48,980 --> 00:08:52,630
about<font color="#E5E5E5"> single enumeration which is the</font>

219
00:08:51,500 --> 00:08:54,970
<font color="#CCCCCC">m-series</font>

220
00:08:52,630 --> 00:08:58,000
now this is<font color="#E5E5E5"> just a list of different</font>

221
00:08:54,970 --> 00:09:01,750
values<font color="#CCCCCC"> that a scanner can return for a</font>

222
00:08:58,000 --> 00:09:02,589
specific<font color="#E5E5E5"> contents and now</font><font color="#CCCCCC"> the different</font>

223
00:09:01,750 --> 00:09:04,660
values that<font color="#E5E5E5"> we're gonna be discussing</font>

224
00:09:02,589 --> 00:09:06,279
<font color="#CCCCCC">are the result clean which means I've</font>

225
00:09:04,660 --> 00:09:09,069
scanned it and<font color="#E5E5E5"> it's clean it's not</font><font color="#CCCCCC"> a</font>

226
00:09:06,279 --> 00:09:10,930
malware result<font color="#E5E5E5"> not detected which is the</font>

227
00:09:09,070 --> 00:09:12,040
neutral<font color="#E5E5E5"> value it's I've scanned it I</font>

228
00:09:10,930 --> 00:09:13,540
don't know that<font color="#CCCCCC"> it's a Mauer</font>

229
00:09:12,040 --> 00:09:15,490
I don't know that it's<font color="#E5E5E5"> not a malware so</font>

230
00:09:13,540 --> 00:09:17,319
I haven't detected anything<font color="#CCCCCC"> and then</font>

231
00:09:15,490 --> 00:09:17,950
results detected which is I've detected

232
00:09:17,320 --> 00:09:21,459
a<font color="#E5E5E5"> malware</font>

233
00:09:17,950 --> 00:09:22,660
right then we<font color="#E5E5E5"> have the functions now we</font>

234
00:09:21,459 --> 00:09:24,010
have a bunch of different<font color="#CCCCCC"> functions</font><font color="#E5E5E5"> here</font>

235
00:09:22,660 --> 00:09:25,810
most<font color="#E5E5E5"> of them deal with initialization</font>

236
00:09:24,010 --> 00:09:28,209
<font color="#CCCCCC">and</font><font color="#E5E5E5"> uninitialized a</font><font color="#CCCCCC"> tion</font>

237
00:09:25,810 --> 00:09:30,219
but the interesting<font color="#E5E5E5"> two functions that</font>

238
00:09:28,209 --> 00:09:32,199
<font color="#E5E5E5">we're</font><font color="#CCCCCC"> looking at</font><font color="#E5E5E5"> our scan buffer and</font>

239
00:09:30,220 --> 00:09:34,690
scan<font color="#CCCCCC"> string which are two functions that</font>

240
00:09:32,200 --> 00:09:36,850
<font color="#CCCCCC">an app developer can</font><font color="#E5E5E5"> use to requests</font>

241
00:09:34,690 --> 00:09:38,740
content to be scanned<font color="#E5E5E5"> now if you take a</font>

242
00:09:36,850 --> 00:09:41,019
look<font color="#CCCCCC"> at scan buffer we see that</font><font color="#E5E5E5"> it</font>

243
00:09:38,740 --> 00:09:43,390
<font color="#E5E5E5">accepts two parameters</font><font color="#CCCCCC"> that describe the</font>

244
00:09:41,019 --> 00:09:45,310
buffer<font color="#E5E5E5"> and an output result so we have</font>

245
00:09:43,390 --> 00:09:47,140
the buffer pointer which points to a

246
00:09:45,310 --> 00:09:48,939
<font color="#E5E5E5">buffer to be scanned we have the length</font>

247
00:09:47,140 --> 00:09:51,550
parameter which is<font color="#E5E5E5"> the length of the</font>

248
00:09:48,940 --> 00:09:54,519
buffer<font color="#E5E5E5"> and then we have the result so</font>

249
00:09:51,550 --> 00:09:56,800
that's<font color="#E5E5E5"> that now the result will be the</font>

250
00:09:54,519 --> 00:09:58,899
MC result as we discussed earlier one<font color="#CCCCCC"> of</font>

251
00:09:56,800 --> 00:10:03,160
<font color="#CCCCCC">the values that you can choose detected</font>

252
00:09:58,899 --> 00:10:07,269
not detected and clean and according<font color="#CCCCCC"> to</font>

253
00:10:03,160 --> 00:10:11,319
the documentation<font color="#E5E5E5"> an app should use MC</font>

254
00:10:07,269 --> 00:10:13,120
result is malware<font color="#CCCCCC"> to decide if the</font>

255
00:10:11,320 --> 00:10:16,329
result that it received is a malware<font color="#E5E5E5"> or</font>

256
00:10:13,120 --> 00:10:17,980
not another function is the<font color="#E5E5E5"> MC scan</font>

257
00:10:16,329 --> 00:10:19,810
string which is exactly the same

258
00:10:17,980 --> 00:10:21,370
function except in this<font color="#E5E5E5"> case we receive</font>

259
00:10:19,810 --> 00:10:23,199
<font color="#E5E5E5">a string instead of a buffer and a</font>

260
00:10:21,370 --> 00:10:26,019
length<font color="#E5E5E5"> which</font><font color="#CCCCCC"> means it's assuming a null</font>

261
00:10:23,199 --> 00:10:28,120
terminated string and it seems like a

262
00:10:26,019 --> 00:10:29,949
sort of a wrapper around<font color="#E5E5E5"> MC scan buffer</font>

263
00:10:28,120 --> 00:10:32,079
and if we take<font color="#E5E5E5"> a look at it in code</font><font color="#CCCCCC"> we</font>

264
00:10:29,949 --> 00:10:36,939
<font color="#CCCCCC">can actually see</font><font color="#E5E5E5"> that we have a bit of</font>

265
00:10:32,079 --> 00:10:39,760
error<font color="#CCCCCC"> checking here and here but</font><font color="#E5E5E5"> mainly</font>

266
00:10:36,940 --> 00:10:42,730
what this does is<font color="#E5E5E5"> simply calculate the</font>

267
00:10:39,760 --> 00:10:48,089
<font color="#E5E5E5">length of the input string and then</font>

268
00:10:42,730 --> 00:10:53,050
calls<font color="#CCCCCC"> MC scan buffer with</font><font color="#E5E5E5"> the buffer</font><font color="#CCCCCC"> and</font>

269
00:10:48,089 --> 00:10:55,630
the length that was<font color="#E5E5E5"> calculated so for</font>

270
00:10:53,050 --> 00:10:59,019
<font color="#E5E5E5">our</font><font color="#CCCCCC"> purposes MC scan string is the same</font>

271
00:10:55,630 --> 00:11:00,220
as<font color="#E5E5E5"> MC scan buffer and as for MC result</font>

272
00:10:59,019 --> 00:11:01,390
is<font color="#CCCCCC"> malware which we're supposed to</font><font color="#E5E5E5"> use</font>

273
00:11:00,220 --> 00:11:04,089
<font color="#CCCCCC">to check if we're supposed</font><font color="#E5E5E5"> to block</font>

274
00:11:01,390 --> 00:11:05,710
<font color="#E5E5E5">content</font><font color="#CCCCCC"> well this is just a macro from</font>

275
00:11:04,089 --> 00:11:08,410
<font color="#CCCCCC">MCH</font>

276
00:11:05,710 --> 00:11:15,940
just check if its larger than<font color="#CCCCCC"> MC result</font>

277
00:11:08,410 --> 00:11:18,699
detected so now that we know how a

278
00:11:15,940 --> 00:11:21,910
developer<font color="#E5E5E5"> would go about using MC we</font>

279
00:11:18,700 --> 00:11:23,860
need to take<font color="#CCCCCC"> a look</font><font color="#E5E5E5"> at how PowerShell</font>

280
00:11:21,910 --> 00:11:26,050
uses MC<font color="#CCCCCC"> so let's take a look at</font>

281
00:11:23,860 --> 00:11:27,490
<font color="#E5E5E5">PowerShell right PowerShell is where</font>

282
00:11:26,050 --> 00:11:28,750
<font color="#CCCCCC">theoretical EMT is most effective</font>

283
00:11:27,490 --> 00:11:30,730
<font color="#CCCCCC">because most of our</font><font color="#E5E5E5"> threats are either</font>

284
00:11:28,750 --> 00:11:32,710
in PowerShell or<font color="#CCCCCC"> VB script</font><font color="#E5E5E5"> but</font>

285
00:11:30,730 --> 00:11:34,240
PowerShell is open source<font color="#E5E5E5"> so we can take</font>

286
00:11:32,710 --> 00:11:36,900
a<font color="#E5E5E5"> look at the code online and just</font>

287
00:11:34,240 --> 00:11:39,490
<font color="#E5E5E5">figure out how it was implemented and</font>

288
00:11:36,900 --> 00:11:42,699
there it's gonna be<font color="#CCCCCC"> very easy to inspect</font>

289
00:11:39,490 --> 00:11:46,810
how<font color="#E5E5E5"> AMC was integrated so I'm gonna open</font>

290
00:11:42,700 --> 00:11:49,560
up<font color="#E5E5E5"> PowerShell on github and as you can</font>

291
00:11:46,810 --> 00:11:49,560
<font color="#E5E5E5">see</font><font color="#CCCCCC"> we're looking</font><font color="#E5E5E5"> at</font>

292
00:11:53,400 --> 00:11:58,490
at security support that<font color="#E5E5E5"> c-sharp</font>

293
00:12:00,180 --> 00:12:05,310
and at the bottom<font color="#CCCCCC"> we have</font><font color="#E5E5E5"> a simple class</font>

294
00:12:03,420 --> 00:12:08,670
called MC native methods which will

295
00:12:05,310 --> 00:12:11,489
export<font color="#CCCCCC"> all the</font><font color="#E5E5E5"> different methods that MC</font>

296
00:12:08,670 --> 00:12:14,010
<font color="#CCCCCC">DLL exports</font><font color="#E5E5E5"> so we have MC initialize</font>

297
00:12:11,490 --> 00:12:16,470
uninitialized scan buffer scan string

298
00:12:14,010 --> 00:12:20,520
<font color="#E5E5E5">etc this is a very simple thin wrapper</font>

299
00:12:16,470 --> 00:12:22,890
around<font color="#E5E5E5"> the</font><font color="#CCCCCC"> MC</font><font color="#E5E5E5"> API from MC DLL and if we</font>

300
00:12:20,520 --> 00:12:24,899
look above we<font color="#CCCCCC"> have a more thick</font><font color="#E5E5E5"> more</font>

301
00:12:22,890 --> 00:12:28,620
<font color="#E5E5E5">high-level wrapper that's called MC</font>

302
00:12:24,899 --> 00:12:30,270
utils<font color="#E5E5E5"> which has an init function now</font>

303
00:12:28,620 --> 00:12:32,880
this init function is going<font color="#E5E5E5"> to call MC</font>

304
00:12:30,270 --> 00:12:35,760
initialize and if the initialization

305
00:12:32,880 --> 00:12:38,189
<font color="#E5E5E5">process fails we're going to put MC in</font>

306
00:12:35,760 --> 00:12:40,230
it failed equals true<font color="#E5E5E5"> this is very</font>

307
00:12:38,190 --> 00:12:44,430
important<font color="#CCCCCC"> because</font><font color="#E5E5E5"> we're gonna come</font><font color="#CCCCCC"> back</font>

308
00:12:40,230 --> 00:12:46,200
<font color="#CCCCCC">to it later</font><font color="#E5E5E5"> now at this point we can</font>

309
00:12:44,430 --> 00:12:48,540
take<font color="#CCCCCC"> a look</font><font color="#E5E5E5"> at the function scan content</font>

310
00:12:46,200 --> 00:12:52,709
which on<font color="#E5E5E5"> UNIX just returns the neutral</font>

311
00:12:48,540 --> 00:12:54,569
result not detected but on<font color="#E5E5E5"> Windows it</font>

312
00:12:52,709 --> 00:12:55,920
calls<font color="#E5E5E5"> win scan content and if we take a</font>

313
00:12:54,570 --> 00:12:58,410
look at<font color="#E5E5E5"> win scan content we see two</font>

314
00:12:55,920 --> 00:12:59,899
<font color="#CCCCCC">things happening the</font><font color="#E5E5E5"> first is we're</font>

315
00:12:58,410 --> 00:13:02,880
checking if the initialization failed

316
00:12:59,899 --> 00:13:05,790
and if it failed we will return<font color="#CCCCCC"> result</font>

317
00:13:02,880 --> 00:13:08,790
<font color="#E5E5E5">not detected so if a scan occurs and it</font>

318
00:13:05,790 --> 00:13:12,150
failed<font color="#E5E5E5"> then we're going to say</font><font color="#CCCCCC"> okay well</font>

319
00:13:08,790 --> 00:13:13,230
I can't I can't scan<font color="#E5E5E5"> so I haven't</font>

320
00:13:12,150 --> 00:13:15,449
<font color="#E5E5E5">detected anything</font><font color="#CCCCCC"> this is the</font><font color="#E5E5E5"> neutral</font>

321
00:13:13,230 --> 00:13:18,360
result<font color="#E5E5E5"> now the problem here is that</font>

322
00:13:15,450 --> 00:13:22,130
we're assuming the<font color="#E5E5E5"> PowerShell code is</font>

323
00:13:18,360 --> 00:13:27,050
assuming<font color="#CCCCCC"> that whatever the provider</font>

324
00:13:22,130 --> 00:13:29,250
answered whether it's a it's a it's<font color="#E5E5E5"> a</font>

325
00:13:27,050 --> 00:13:31,349
return<font color="#E5E5E5"> a valid return code that says</font>

326
00:13:29,250 --> 00:13:33,540
I've scanned it<font color="#E5E5E5"> and it's not it's not</font>

327
00:13:31,350 --> 00:13:36,450
malicious<font color="#E5E5E5"> or I had trouble scanning it</font>

328
00:13:33,540 --> 00:13:38,579
or I couldn't even initialize<font color="#E5E5E5"> MC because</font>

329
00:13:36,450 --> 00:13:41,310
of some attacker method that we're gonna

330
00:13:38,580 --> 00:13:43,050
see<font color="#E5E5E5"> later at this point PowerShell is</font>

331
00:13:41,310 --> 00:13:45,449
going to keep going<font color="#E5E5E5"> as if an MC didn't</font>

332
00:13:43,050 --> 00:13:47,040
exist so<font color="#CCCCCC"> MT is like a</font><font color="#E5E5E5"> best-effort thing</font>

333
00:13:45,450 --> 00:13:49,339
but if there's a<font color="#E5E5E5"> problem though it's not</font>

334
00:13:47,040 --> 00:13:51,569
<font color="#E5E5E5">going to be</font><font color="#CCCCCC"> propagated to to the user</font>

335
00:13:49,339 --> 00:13:54,690
<font color="#CCCCCC">okay and then the last thing that</font>

336
00:13:51,570 --> 00:13:59,250
happens in scan content is we call the

337
00:13:54,690 --> 00:14:02,399
scan string method and whatever<font color="#E5E5E5"> the</font>

338
00:13:59,250 --> 00:14:06,779
result is we return back<font color="#CCCCCC"> to the caller</font>

339
00:14:02,399 --> 00:14:09,930
<font color="#CCCCCC">and so that is the wrappers of</font><font color="#E5E5E5"> MC in</font>

340
00:14:06,779 --> 00:14:14,380
PowerShell<font color="#E5E5E5"> right</font>

341
00:14:09,930 --> 00:14:18,459
now we can take<font color="#CCCCCC"> a</font><font color="#E5E5E5"> look at the code in</font>

342
00:14:14,380 --> 00:14:22,420
<font color="#E5E5E5">PowerShell that really compiles code and</font>

343
00:14:18,459 --> 00:14:23,920
that actually calls these<font color="#E5E5E5"> MC wrappers so</font>

344
00:14:22,420 --> 00:14:27,550
as we can<font color="#E5E5E5"> see whenever we want</font><font color="#CCCCCC"> to run a</font>

345
00:14:23,920 --> 00:14:28,899
command<font color="#E5E5E5"> in PowerShell we need to compile</font>

346
00:14:27,550 --> 00:14:31,209
the text into something that can be

347
00:14:28,899 --> 00:14:32,500
executed<font color="#E5E5E5"> and this function called really</font>

348
00:14:31,209 --> 00:14:35,170
<font color="#CCCCCC">compile</font><font color="#E5E5E5"> which is called by other</font>

349
00:14:32,500 --> 00:14:37,139
functions is<font color="#E5E5E5"> the function that is in</font>

350
00:14:35,170 --> 00:14:41,589
<font color="#CCCCCC">charge of compiling as if you see here</font>

351
00:14:37,139 --> 00:14:44,560
we<font color="#CCCCCC"> have the call to create the compiler</font>

352
00:14:41,589 --> 00:14:47,230
and<font color="#E5E5E5"> the</font><font color="#CCCCCC"> call</font><font color="#E5E5E5"> to the function compile but</font>

353
00:14:44,560 --> 00:14:49,000
right<font color="#CCCCCC"> before this we have perform</font>

354
00:14:47,230 --> 00:14:53,949
<font color="#E5E5E5">security checks if we take a look at</font>

355
00:14:49,000 --> 00:14:56,620
<font color="#E5E5E5">this we can see simply</font><font color="#CCCCCC"> a call to MC</font>

356
00:14:53,949 --> 00:15:01,089
utils as we saw before<font color="#CCCCCC"> scan content all</font>

357
00:14:56,620 --> 00:15:06,250
<font color="#E5E5E5">right and if the result is result</font>

358
00:15:01,089 --> 00:15:11,500
detected which is malware<font color="#CCCCCC"> then we're</font>

359
00:15:06,250 --> 00:15:12,970
going to raise a parse exception saying

360
00:15:11,500 --> 00:15:16,540
<font color="#E5E5E5">that the script contained malicious</font>

361
00:15:12,970 --> 00:15:17,019
content<font color="#E5E5E5"> but if any other result</font><font color="#CCCCCC"> is</font>

362
00:15:16,540 --> 00:15:20,620
returned

363
00:15:17,019 --> 00:15:22,930
whether it be not detected or even a

364
00:15:20,620 --> 00:15:25,480
value that's larger than result detected

365
00:15:22,930 --> 00:15:28,660
which according to<font color="#E5E5E5"> documentation should</font>

366
00:15:25,480 --> 00:15:35,199
<font color="#CCCCCC">be considered malicious</font><font color="#E5E5E5"> PowerShell is</font>

367
00:15:28,660 --> 00:15:38,319
going to ignore that<font color="#CCCCCC"> okay so now</font><font color="#E5E5E5"> that we</font>

368
00:15:35,199 --> 00:15:39,579
know<font color="#E5E5E5"> how MC works from a developer</font><font color="#CCCCCC"> we</font>

369
00:15:38,319 --> 00:15:42,040
saw how<font color="#CCCCCC"> it</font><font color="#E5E5E5"> was integrated into</font>

370
00:15:39,579 --> 00:15:44,529
<font color="#E5E5E5">PowerShell in its source code we can</font>

371
00:15:42,040 --> 00:15:49,719
take a look<font color="#E5E5E5"> at how MC looks from a</font>

372
00:15:44,529 --> 00:15:50,829
security<font color="#E5E5E5"> providers</font><font color="#CCCCCC"> perspective</font><font color="#E5E5E5"> what we</font>

373
00:15:49,720 --> 00:15:54,190
have here is we have three main

374
00:15:50,829 --> 00:15:55,930
interfaces<font color="#E5E5E5"> we have the MC</font><font color="#CCCCCC"> stream we</font><font color="#E5E5E5"> have</font>

375
00:15:54,190 --> 00:15:59,410
<font color="#E5E5E5">the anti-malware and the anti-malware</font>

376
00:15:55,930 --> 00:16:01,930
provider now the MC stream is a<font color="#E5E5E5"> very</font>

377
00:15:59,410 --> 00:16:03,670
simple<font color="#CCCCCC"> concept it's a wrapper around an</font>

378
00:16:01,930 --> 00:16:05,769
object<font color="#CCCCCC"> that needs to be scanned so</font>

379
00:16:03,670 --> 00:16:07,389
whenever we want<font color="#CCCCCC"> to scan something when</font>

380
00:16:05,769 --> 00:16:10,269
everyone<font color="#E5E5E5"> will request to scan this our</font>

381
00:16:07,389 --> 00:16:13,240
scanner will receive a<font color="#E5E5E5"> MC stream object</font>

382
00:16:10,269 --> 00:16:15,970
<font color="#CCCCCC">on which it can perform</font><font color="#E5E5E5"> the scanning now</font>

383
00:16:13,240 --> 00:16:18,100
this is<font color="#E5E5E5"> a and this object has a read</font>

384
00:16:15,970 --> 00:16:19,480
function<font color="#CCCCCC"> and theoretically we're</font>

385
00:16:18,100 --> 00:16:22,209
supposed<font color="#CCCCCC"> to</font><font color="#E5E5E5"> use this read function in</font>

386
00:16:19,480 --> 00:16:24,639
order<font color="#E5E5E5"> to to read the content from</font>

387
00:16:22,209 --> 00:16:27,339
the buffer that<font color="#CCCCCC"> was requested to</font><font color="#E5E5E5"> be</font>

388
00:16:24,639 --> 00:16:29,470
scanned<font color="#E5E5E5"> so when I tried</font><font color="#CCCCCC"> to implement my</font>

389
00:16:27,339 --> 00:16:32,829
own provider to kind<font color="#CCCCCC"> of learn how this</font>

390
00:16:29,470 --> 00:16:35,230
works<font color="#CCCCCC"> I was trying to</font><font color="#E5E5E5"> use the read</font>

391
00:16:32,829 --> 00:16:36,998
<font color="#E5E5E5">function and it kept failing again</font><font color="#CCCCCC"> and</font>

392
00:16:35,230 --> 00:16:39,999
again so I took<font color="#E5E5E5"> a look at with my</font>

393
00:16:36,999 --> 00:16:41,589
debugger<font color="#CCCCCC"> and I saw</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> I found the</font>

394
00:16:39,999 --> 00:16:44,679
<font color="#CCCCCC">address of the function that I'm</font><font color="#E5E5E5"> calling</font>

395
00:16:41,589 --> 00:16:48,129
the read function<font color="#E5E5E5"> which is of a class</font><font color="#CCCCCC"> am</font>

396
00:16:44,679 --> 00:16:50,740
<font color="#CCCCCC">c buffer stream and if we</font><font color="#E5E5E5"> take a look at</font>

397
00:16:48,129 --> 00:16:52,869
this<font color="#E5E5E5"> function we can</font><font color="#CCCCCC"> see that not much</font>

398
00:16:50,740 --> 00:16:56,589
<font color="#CCCCCC">is</font><font color="#E5E5E5"> going on here</font><font color="#CCCCCC"> there is a</font><font color="#E5E5E5"> logging</font><font color="#CCCCCC"> that</font>

399
00:16:52,869 --> 00:16:59,230
takes place and then we return<font color="#CCCCCC"> error not</font>

400
00:16:56,589 --> 00:17:01,569
implemented<font color="#E5E5E5"> so this is a nice little</font>

401
00:16:59,230 --> 00:17:02,949
concept it's a documented function it

402
00:17:01,569 --> 00:17:04,779
doesn't<font color="#CCCCCC"> use</font><font color="#E5E5E5"> any things it's not</font>

403
00:17:02,949 --> 00:17:06,849
<font color="#CCCCCC">implemented</font><font color="#E5E5E5"> but there are ways</font><font color="#CCCCCC"> around</font>

404
00:17:04,779 --> 00:17:09,039
this<font color="#E5E5E5"> now as for anti-malware</font><font color="#CCCCCC"> and</font>

405
00:17:06,849 --> 00:17:10,240
anti-malware provider<font color="#E5E5E5"> well reading</font><font color="#CCCCCC"> the</font>

406
00:17:09,039 --> 00:17:12,220
description on<font color="#CCCCCC"> MSDN</font><font color="#E5E5E5"> I really couldn't</font>

407
00:17:10,240 --> 00:17:14,140
<font color="#E5E5E5">tell the difference but after looking at</font>

408
00:17:12,220 --> 00:17:16,209
<font color="#CCCCCC">a</font><font color="#E5E5E5"> diagram</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we're gonna take a look</font>

409
00:17:14,140 --> 00:17:17,649
<font color="#E5E5E5">at in a minute</font><font color="#CCCCCC"> I was able to kind of</font>

410
00:17:16,209 --> 00:17:19,870
understand what<font color="#E5E5E5"> the</font><font color="#CCCCCC"> difference is and</font>

411
00:17:17,648 --> 00:17:26,198
<font color="#CCCCCC">then that became much more clear when I</font>

412
00:17:19,869 --> 00:17:29,408
looked<font color="#CCCCCC"> at the</font><font color="#E5E5E5"> code itself so the</font>

413
00:17:26,199 --> 00:17:32,010
anti-malware provider<font color="#E5E5E5"> interface that is</font>

414
00:17:29,409 --> 00:17:35,350
the one<font color="#E5E5E5"> that is actually pretty clear</font>

415
00:17:32,010 --> 00:17:37,840
the anti-malware provider<font color="#E5E5E5"> is the object</font>

416
00:17:35,350 --> 00:17:39,580
<font color="#CCCCCC">that the</font><font color="#E5E5E5"> anti-malware needs to provide</font>

417
00:17:37,840 --> 00:17:42,189
<font color="#E5E5E5">the operating system in order to process</font>

418
00:17:39,580 --> 00:17:44,168
scans<font color="#E5E5E5"> now it needs to export</font><font color="#CCCCCC"> two</font>

419
00:17:42,190 --> 00:17:45,610
functions a scan function<font color="#E5E5E5"> well that</font>

420
00:17:44,169 --> 00:17:47,559
makes sense<font color="#E5E5E5"> it needs to scan things and</font>

421
00:17:45,610 --> 00:17:49,719
a display name function<font color="#E5E5E5"> which I haven't</font>

422
00:17:47,559 --> 00:17:52,480
<font color="#E5E5E5">figured out what it's used for but it's</font>

423
00:17:49,720 --> 00:17:55,570
there and<font color="#CCCCCC"> I forced</font><font color="#E5E5E5"> Windows the defenders</font>

424
00:17:52,480 --> 00:17:58,090
<font color="#CCCCCC">MC provider to call its own display name</font>

425
00:17:55,570 --> 00:18:04,059
function<font color="#E5E5E5"> and the name was Windows</font>

426
00:17:58,090 --> 00:18:06,370
<font color="#E5E5E5">Defender</font><font color="#CCCCCC"> big</font><font color="#E5E5E5"> surprise</font><font color="#CCCCCC"> and then we get to</font>

427
00:18:04,059 --> 00:18:08,230
<font color="#E5E5E5">talk about the</font><font color="#CCCCCC"> architecture</font><font color="#E5E5E5"> after all</font>

428
00:18:06,370 --> 00:18:10,479
the pieces are kind of in<font color="#E5E5E5"> place let's</font>

429
00:18:08,230 --> 00:18:13,330
<font color="#E5E5E5">take a look at the big picture</font><font color="#CCCCCC"> so we</font>

430
00:18:10,480 --> 00:18:17,679
have<font color="#E5E5E5"> PowerShell right calling a masseuse</font>

431
00:18:13,330 --> 00:18:19,299
can buffer or<font color="#CCCCCC"> MC scan string and anti</font>

432
00:18:17,679 --> 00:18:20,919
scan buffer is<font color="#E5E5E5"> can string and also the</font>

433
00:18:19,299 --> 00:18:23,408
initialization functions they all work

434
00:18:20,919 --> 00:18:25,570
with a class called<font color="#E5E5E5"> anti-malware that we</font>

435
00:18:23,409 --> 00:18:29,380
saw before<font color="#CCCCCC"> now this class</font><font color="#E5E5E5"> is an internal</font>

436
00:18:25,570 --> 00:18:31,149
class for<font color="#CCCCCC"> for am c and</font><font color="#E5E5E5"> i honestly</font><font color="#CCCCCC"> don't</font>

437
00:18:29,380 --> 00:18:33,660
know why it's on<font color="#CCCCCC"> MSDN</font><font color="#E5E5E5"> but it's</font>

438
00:18:31,149 --> 00:18:35,550
implemented entirely in<font color="#E5E5E5"> MC</font><font color="#CCCCCC"> DLL and</font>

439
00:18:33,660 --> 00:18:37,830
what this class is<font color="#CCCCCC"> in charge of</font><font color="#E5E5E5"> doing is</font>

440
00:18:35,550 --> 00:18:40,260
<font color="#E5E5E5">it's in charge of managing all the</font>

441
00:18:37,830 --> 00:18:42,000
different all the different<font color="#E5E5E5"> providers</font>

442
00:18:40,260 --> 00:18:43,410
<font color="#CCCCCC">that</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> loaded</font><font color="#E5E5E5"> all the different</font>

443
00:18:42,000 --> 00:18:44,340
antivirus providers that are<font color="#E5E5E5"> loaded</font>

444
00:18:43,410 --> 00:18:47,460
because<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> have more than one</font>

445
00:18:44,340 --> 00:18:48,060
provider<font color="#CCCCCC"> that that just processes the</font>

446
00:18:47,460 --> 00:18:51,990
requests

447
00:18:48,060 --> 00:18:55,379
now this anti-malware will be in charge

448
00:18:51,990 --> 00:18:56,970
<font color="#E5E5E5">of loading the various</font><font color="#CCCCCC"> providers and</font>

449
00:18:55,380 --> 00:18:58,800
then dispatching the scans to them when

450
00:18:56,970 --> 00:19:00,780
the scans arrive and then we<font color="#E5E5E5"> finally</font>

451
00:18:58,800 --> 00:19:04,409
have the bottom layer which is the

452
00:19:00,780 --> 00:19:05,610
provider itself and<font color="#E5E5E5"> that layer is for</font>

453
00:19:04,410 --> 00:19:07,860
<font color="#E5E5E5">example could be Windows defenders</font>

454
00:19:05,610 --> 00:19:10,770
provider or it could be my own<font color="#E5E5E5"> and here</font>

455
00:19:07,860 --> 00:19:12,179
we also have<font color="#E5E5E5"> the diagram of</font><font color="#CCCCCC"> how Windows</font>

456
00:19:10,770 --> 00:19:14,879
Defender decided to<font color="#CCCCCC"> implement it so</font><font color="#E5E5E5"> the</font>

457
00:19:12,180 --> 00:19:17,120
RPC<font color="#E5E5E5"> the scan to</font><font color="#CCCCCC"> the service which</font>

458
00:19:14,880 --> 00:19:21,780
creates the scan and then finally

459
00:19:17,120 --> 00:19:24,239
returns the result back so now we know

460
00:19:21,780 --> 00:19:26,160
<font color="#E5E5E5">all the</font><font color="#CCCCCC"> different interfaces</font><font color="#E5E5E5"> the stream</font>

461
00:19:24,240 --> 00:19:29,850
the anti-malware and the anti-malware

462
00:19:26,160 --> 00:19:31,680
provider now we want to move on to build

463
00:19:29,850 --> 00:19:33,360
our own provider<font color="#CCCCCC"> because first of all</font>

464
00:19:31,680 --> 00:19:35,220
it's something that we'd like<font color="#CCCCCC"> to be able</font>

465
00:19:33,360 --> 00:19:37,439
to<font color="#E5E5E5"> do it for security products and</font>

466
00:19:35,220 --> 00:19:38,760
second of all it's good to be able to<font color="#CCCCCC"> do</font>

467
00:19:37,440 --> 00:19:41,040
<font color="#E5E5E5">that in order to try to play around with</font>

468
00:19:38,760 --> 00:19:44,760
<font color="#E5E5E5">AMC</font><font color="#CCCCCC"> and to learn</font><font color="#E5E5E5"> how it</font><font color="#CCCCCC"> works and what</font>

469
00:19:41,040 --> 00:19:46,200
we<font color="#E5E5E5"> can do with it</font><font color="#CCCCCC"> so we know what we</font>

470
00:19:44,760 --> 00:19:48,510
need<font color="#CCCCCC"> to implement</font><font color="#E5E5E5"> the anti-malware</font>

471
00:19:46,200 --> 00:19:50,880
provider the question is how do we

472
00:19:48,510 --> 00:19:53,100
<font color="#E5E5E5">implement it well anti-malware provider</font>

473
00:19:50,880 --> 00:19:55,680
is a<font color="#CCCCCC"> comm interface and</font><font color="#E5E5E5"> Microsoft does</font>

474
00:19:53,100 --> 00:19:58,429
provide frameworks or implementing comm

475
00:19:55,680 --> 00:20:00,810
interfaces<font color="#E5E5E5"> so there's no need</font><font color="#CCCCCC"> to know</font>

476
00:19:58,430 --> 00:20:02,490
under the hood how it really works<font color="#CCCCCC"> and</font>

477
00:20:00,810 --> 00:20:04,740
if you want to go down this road<font color="#CCCCCC"> you can</font>

478
00:20:02,490 --> 00:20:06,480
use<font color="#E5E5E5"> MC IDL from the Windows SDK to</font>

479
00:20:04,740 --> 00:20:08,190
create your solution<font color="#CCCCCC"> and to implement</font>

480
00:20:06,480 --> 00:20:10,200
<font color="#CCCCCC">your own provider and just you</font><font color="#E5E5E5"> have to</font>

481
00:20:08,190 --> 00:20:12,360
implement<font color="#E5E5E5"> the scan and the display</font><font color="#CCCCCC"> name</font>

482
00:20:10,200 --> 00:20:14,310
method<font color="#E5E5E5"> and that will</font><font color="#CCCCCC"> work but I do</font>

483
00:20:12,360 --> 00:20:14,820
encourage<font color="#CCCCCC"> you</font><font color="#E5E5E5"> to forget</font><font color="#CCCCCC"> about the</font>

484
00:20:14,310 --> 00:20:16,800
frameworks

485
00:20:14,820 --> 00:20:18,060
<font color="#E5E5E5">and implement everything yourself</font><font color="#CCCCCC"> you</font>

486
00:20:16,800 --> 00:20:20,940
will<font color="#CCCCCC"> learn a lot more I</font><font color="#E5E5E5"> can promise you</font>

487
00:20:18,060 --> 00:20:22,710
that<font color="#E5E5E5"> and later go</font><font color="#CCCCCC"> back and use the</font>

488
00:20:20,940 --> 00:20:26,970
frameworks<font color="#E5E5E5"> so the best resource</font><font color="#CCCCCC"> for this</font>

489
00:20:22,710 --> 00:20:28,590
by far<font color="#E5E5E5"> is this link</font><font color="#CCCCCC"> right here and</font><font color="#E5E5E5"> also</font>

490
00:20:26,970 --> 00:20:30,660
I'll be<font color="#E5E5E5"> releasing my code samples that</font>

491
00:20:28,590 --> 00:20:32,129
you guys can<font color="#CCCCCC"> check out and together</font><font color="#E5E5E5"> with</font>

492
00:20:30,660 --> 00:20:34,950
both<font color="#E5E5E5"> resources I'm sure you can follow</font>

493
00:20:32,130 --> 00:20:37,710
<font color="#E5E5E5">along very well so registering a</font>

494
00:20:34,950 --> 00:20:39,660
provider<font color="#E5E5E5"> well we built our comm object</font>

495
00:20:37,710 --> 00:20:41,370
and registered our comm object which is

496
00:20:39,660 --> 00:20:44,550
all<font color="#E5E5E5"> documented behavior and we know how</font>

497
00:20:41,370 --> 00:20:45,899
to<font color="#E5E5E5"> do it we now need to</font><font color="#CCCCCC"> register it as</font>

498
00:20:44,550 --> 00:20:48,030
an AMC provider but

499
00:20:45,900 --> 00:20:50,670
unfortunately<font color="#CCCCCC"> MC</font><font color="#E5E5E5"> provider registration</font>

500
00:20:48,030 --> 00:20:52,470
is undocumented but that's not going<font color="#E5E5E5"> to</font>

501
00:20:50,670 --> 00:20:59,690
<font color="#E5E5E5">stop us of course</font><font color="#CCCCCC"> so let's take a look</font>

502
00:20:52,470 --> 00:21:02,490
at MC DLL now<font color="#E5E5E5"> I've said that MC is an</font>

503
00:20:59,690 --> 00:21:04,170
anti-malware<font color="#E5E5E5"> class has an anti-malware</font>

504
00:21:02,490 --> 00:21:06,480
class<font color="#E5E5E5"> that is in charge of</font><font color="#CCCCCC"> loading the</font>

505
00:21:04,170 --> 00:21:08,670
providers so the loading<font color="#E5E5E5"> is going to</font>

506
00:21:06,480 --> 00:21:11,880
take place<font color="#E5E5E5"> in the function called final</font>

507
00:21:08,670 --> 00:21:18,330
construct right here so let's<font color="#CCCCCC"> take a</font>

508
00:21:11,880 --> 00:21:19,830
<font color="#E5E5E5">look at this function now as we can see</font>

509
00:21:18,330 --> 00:21:24,000
<font color="#E5E5E5">here we can</font><font color="#CCCCCC"> see a call to a function</font>

510
00:21:19,830 --> 00:21:28,350
that<font color="#CCCCCC"> have</font><font color="#E5E5E5"> labeled MC load providers now</font>

511
00:21:24,000 --> 00:21:31,350
this<font color="#CCCCCC"> function right here will be passed</font>

512
00:21:28,350 --> 00:21:34,050
<font color="#E5E5E5">a list of providers</font><font color="#CCCCCC"> a list of provider</font>

513
00:21:31,350 --> 00:21:36,178
<font color="#CCCCCC">Goods and the number of providers</font><font color="#E5E5E5"> and</font>

514
00:21:34,050 --> 00:21:38,550
actually these are all output parameters

515
00:21:36,179 --> 00:21:40,170
<font color="#E5E5E5">that once this function loads all of the</font>

516
00:21:38,550 --> 00:21:42,780
different providers<font color="#CCCCCC"> it will</font><font color="#E5E5E5"> return</font><font color="#CCCCCC"> back</font>

517
00:21:40,170 --> 00:21:45,300
to me all the different<font color="#CCCCCC"> providers</font><font color="#E5E5E5"> that I</font>

518
00:21:42,780 --> 00:21:47,820
can then work with inside this

519
00:21:45,300 --> 00:21:49,379
anti-malware class<font color="#E5E5E5"> now if we take a</font><font color="#CCCCCC"> look</font>

520
00:21:47,820 --> 00:21:53,370
at<font color="#E5E5E5"> this function the load providers</font>

521
00:21:49,380 --> 00:21:54,870
function we can<font color="#E5E5E5"> see the first thing is a</font>

522
00:21:53,370 --> 00:21:58,010
reference<font color="#E5E5E5"> to this string right</font><font color="#CCCCCC"> here</font>

523
00:21:54,870 --> 00:22:00,899
<font color="#E5E5E5">which is software Microsoft MC providers</font>

524
00:21:58,010 --> 00:22:02,490
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is a pretty encouraging hint that</font>

525
00:22:00,900 --> 00:22:04,770
<font color="#E5E5E5">we're in the right</font><font color="#CCCCCC"> place we're looking</font>

526
00:22:02,490 --> 00:22:09,000
<font color="#E5E5E5">at the</font><font color="#CCCCCC"> register key where you would</font>

527
00:22:04,770 --> 00:22:12,410
register a provider and as you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> see</font>

528
00:22:09,000 --> 00:22:15,960
here we have<font color="#E5E5E5"> a another class that is the</font>

529
00:22:12,410 --> 00:22:18,270
<font color="#E5E5E5">gooood enumerator and we're calling it</font>

530
00:22:15,960 --> 00:22:19,470
with start<font color="#E5E5E5"> enumerator so what this class</font>

531
00:22:18,270 --> 00:22:21,690
is<font color="#E5E5E5"> in charge of doing it's going to</font>

532
00:22:19,470 --> 00:22:23,309
enumerate<font color="#E5E5E5"> this registry key that we just</font>

533
00:22:21,690 --> 00:22:25,770
talked<font color="#CCCCCC"> about and it's going to enumerate</font>

534
00:22:23,309 --> 00:22:27,330
<font color="#E5E5E5">all the different goods which are IDs</font>

535
00:22:25,770 --> 00:22:31,080
that represent the<font color="#E5E5E5"> different</font><font color="#CCCCCC"> providers</font>

536
00:22:27,330 --> 00:22:34,409
that<font color="#E5E5E5"> are registered underneath the class</font>

537
00:22:31,080 --> 00:22:39,030
<font color="#E5E5E5">root read a string key so if we move on</font>

538
00:22:34,410 --> 00:22:41,640
down we can see that<font color="#CCCCCC"> after the the the</font>

539
00:22:39,030 --> 00:22:44,160
initialization takes place we call<font color="#E5E5E5"> the</font>

540
00:22:41,640 --> 00:22:46,620
function<font color="#E5E5E5"> next gooood which will bring</font>

541
00:22:44,160 --> 00:22:50,580
the<font color="#E5E5E5"> next do it in the list and once we</font>

542
00:22:46,620 --> 00:22:52,820
have this good we're<font color="#E5E5E5"> going to call a</font>

543
00:22:50,580 --> 00:22:56,090
function that<font color="#E5E5E5"> I've labeled load provider</font>

544
00:22:52,820 --> 00:22:59,029
which receives<font color="#E5E5E5"> the gooood to load</font>

545
00:22:56,090 --> 00:23:01,340
and the provider<font color="#CCCCCC"> that</font><font color="#E5E5E5"> was loaded and if</font>

546
00:22:59,029 --> 00:23:03,760
we take a<font color="#E5E5E5"> look at load provider well we</font>

547
00:23:01,340 --> 00:23:07,490
can see that it does a few simple<font color="#CCCCCC"> steps</font>

548
00:23:03,760 --> 00:23:10,070
one is<font color="#E5E5E5"> to get the string from</font><font color="#CCCCCC"> the class</font>

549
00:23:07,490 --> 00:23:12,710
ID<font color="#E5E5E5"> so it can convert the</font><font color="#CCCCCC"> GUI</font><font color="#E5E5E5"> to a string</font>

550
00:23:10,070 --> 00:23:14,809
<font color="#E5E5E5">and then using string formatting it'll</font>

551
00:23:12,710 --> 00:23:18,890
access the registry<font color="#E5E5E5"> so it's going to</font>

552
00:23:14,809 --> 00:23:22,580
access the<font color="#E5E5E5"> class ID and then in proc</font>

553
00:23:18,890 --> 00:23:25,190
<font color="#E5E5E5">Server 32 where the path of my provider</font>

554
00:23:22,580 --> 00:23:28,100
is<font color="#CCCCCC"> going to be</font><font color="#E5E5E5"> stored then we'll</font>

555
00:23:25,190 --> 00:23:31,549
actually do the registry access which is

556
00:23:28,100 --> 00:23:33,168
<font color="#E5E5E5">the</font><font color="#CCCCCC"> Reg gate value</font><font color="#E5E5E5"> and finally</font><font color="#CCCCCC"> after a</font>

557
00:23:31,549 --> 00:23:37,610
bit of processing<font color="#CCCCCC"> we're going to call</font>

558
00:23:33,169 --> 00:23:39,140
load<font color="#E5E5E5"> library on our provider after that</font>

559
00:23:37,610 --> 00:23:41,510
we have a bit<font color="#CCCCCC"> of common Ischl ization</font>

560
00:23:39,140 --> 00:23:42,890
which we're not<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to go</font><font color="#E5E5E5"> into but</font>

561
00:23:41,510 --> 00:23:44,539
when we go back to<font color="#CCCCCC"> the function that's</font>

562
00:23:42,890 --> 00:23:47,360
in charge of<font color="#CCCCCC"> loading all the</font><font color="#E5E5E5"> different</font>

563
00:23:44,539 --> 00:23:52,070
providers<font color="#CCCCCC"> then we can see</font><font color="#E5E5E5"> that there are</font>

564
00:23:47,360 --> 00:23:54,379
<font color="#E5E5E5">two more things that take place one is</font>

565
00:23:52,070 --> 00:23:59,500
to copy the<font color="#E5E5E5"> loaded provider into the</font>

566
00:23:54,380 --> 00:24:02,260
list of loaded providers and<font color="#E5E5E5"> two is</font>

567
00:23:59,500 --> 00:24:05,090
increment the number of loaded providers

568
00:24:02,260 --> 00:24:07,158
that's pretty simple<font color="#E5E5E5"> now this takes this</font>

569
00:24:05,090 --> 00:24:08,600
takes<font color="#E5E5E5"> place in a loop for each</font><font color="#CCCCCC"> gooood</font>

570
00:24:07,159 --> 00:24:12,049
that is enumerated in the<font color="#E5E5E5"> registry</font>

571
00:24:08,600 --> 00:24:16,879
<font color="#E5E5E5">underneath the MC registry key that we</font>

572
00:24:12,049 --> 00:24:19,520
saw before<font color="#CCCCCC"> so now we know that</font>

573
00:24:16,880 --> 00:24:21,110
registering<font color="#E5E5E5"> a provider is broken down</font>

574
00:24:19,520 --> 00:24:22,850
into<font color="#CCCCCC"> two steps</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> first step</font><font color="#E5E5E5"> is</font>

575
00:24:21,110 --> 00:24:24,529
registering<font color="#CCCCCC"> a common object a normal</font>

576
00:24:22,850 --> 00:24:27,620
fashion<font color="#E5E5E5"> underneath the classes root</font>

577
00:24:24,529 --> 00:24:29,240
class<font color="#E5E5E5"> ID registry key and the second</font>

578
00:24:27,620 --> 00:24:32,120
part is creating a key with our

579
00:24:29,240 --> 00:24:35,659
providers<font color="#CCCCCC"> good</font><font color="#E5E5E5"> under local machine</font>

580
00:24:32,120 --> 00:24:39,129
software<font color="#E5E5E5"> Microsoft MC providers now once</font>

581
00:24:35,659 --> 00:24:42,529
we do that<font color="#E5E5E5"> we can run PowerShell</font><font color="#CCCCCC"> in</font>

582
00:24:39,130 --> 00:24:44,630
PowerShell<font color="#CCCCCC"> and our provider sorry it was</font>

583
00:24:42,529 --> 00:24:47,480
going to receive every single<font color="#E5E5E5"> request</font>

584
00:24:44,630 --> 00:24:48,710
<font color="#E5E5E5">that PowerShell sends which means every</font>

585
00:24:47,480 --> 00:24:51,049
single command that is entered

586
00:24:48,710 --> 00:24:53,929
explicitly or implicitly<font color="#E5E5E5"> will arrive at</font>

587
00:24:51,049 --> 00:24:56,320
our<font color="#E5E5E5"> provider for</font><font color="#CCCCCC"> scanning</font><font color="#E5E5E5"> so let's take</font>

588
00:24:53,929 --> 00:24:56,320
a look<font color="#CCCCCC"> at this</font>

589
00:24:57,090 --> 00:25:02,399
so what<font color="#E5E5E5"> I have</font><font color="#CCCCCC"> here is a virtual</font><font color="#E5E5E5"> machine</font>

590
00:25:00,629 --> 00:25:09,658
<font color="#E5E5E5">right now my provider is not</font><font color="#CCCCCC"> registered</font>

591
00:25:02,399 --> 00:25:12,360
<font color="#CCCCCC">I'm going to that's a bit slow what I'm</font>

592
00:25:09,659 --> 00:25:14,610
going to do is I'm going<font color="#CCCCCC"> to check if my</font>

593
00:25:12,360 --> 00:25:16,168
provider is installed with a command

594
00:25:14,610 --> 00:25:18,418
line then I'm going<font color="#CCCCCC"> to install my</font>

595
00:25:16,169 --> 00:25:20,159
provider<font color="#E5E5E5"> check that it's installed again</font>

596
00:25:18,419 --> 00:25:22,919
and see that it's<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> now going to be</font>

597
00:25:20,159 --> 00:25:26,360
<font color="#E5E5E5">installed and then we're gonna see it in</font>

598
00:25:22,919 --> 00:25:26,360
action working

599
00:25:27,000 --> 00:25:30,200
[Music]

600
00:25:31,680 --> 00:25:34,280
<font color="#E5E5E5">okay</font>

601
00:25:35,860 --> 00:25:40,990
there we go<font color="#E5E5E5"> some resolution problems so</font>

602
00:25:39,039 --> 00:25:42,549
as you can<font color="#E5E5E5"> see we can see the Windows</font>

603
00:25:40,990 --> 00:25:45,850
Defender good which starts with<font color="#CCCCCC"> two</font>

604
00:25:42,549 --> 00:25:48,580
<font color="#CCCCCC">seven and we can see</font><font color="#E5E5E5"> that our gooood was</font>

605
00:25:45,850 --> 00:25:55,360
nowhere to<font color="#E5E5E5"> be found</font><font color="#CCCCCC"> right so now I'm</font>

606
00:25:48,580 --> 00:25:57,908
going<font color="#E5E5E5"> to install my provider and now my</font>

607
00:25:55,360 --> 00:26:00,939
provider is installed and once I run

608
00:25:57,909 --> 00:26:03,760
PowerShell well<font color="#E5E5E5"> what my provider does</font>

609
00:26:00,940 --> 00:26:05,110
it'll simply debug print all the<font color="#E5E5E5"> scan</font>

610
00:26:03,760 --> 00:26:10,120
<font color="#E5E5E5">requests so we can see them with the bug</font>

611
00:26:05,110 --> 00:26:13,469
view so PowerShell is run and we can see

612
00:26:10,120 --> 00:26:17,018
my provider has started printing<font color="#E5E5E5"> and</font>

613
00:26:13,470 --> 00:26:19,750
that's clear this<font color="#E5E5E5"> and if we</font><font color="#CCCCCC"> go for for</font>

614
00:26:17,019 --> 00:26:25,179
example<font color="#CCCCCC"> we'll</font><font color="#E5E5E5"> type ipconfig</font><font color="#CCCCCC"> we can see</font>

615
00:26:19,750 --> 00:26:29,289
<font color="#E5E5E5">IP config right here it's been scanned</font>

616
00:26:25,179 --> 00:26:32,139
<font color="#E5E5E5">now if we take a look at what Microsoft</font>

617
00:26:29,289 --> 00:26:33,760
calls<font color="#E5E5E5"> the</font><font color="#CCCCCC"> AMC</font><font color="#E5E5E5"> test sample then when I</font>

618
00:26:32,139 --> 00:26:37,870
try to<font color="#E5E5E5"> run this I'm going to do it in</font>

619
00:26:33,760 --> 00:26:41,408
two steps I'm<font color="#E5E5E5"> going to first load it</font>

620
00:26:37,870 --> 00:26:44,260
from<font color="#CCCCCC"> Bay 64 right and now this</font><font color="#E5E5E5"> variable</font>

621
00:26:41,409 --> 00:26:46,389
here<font color="#E5E5E5"> AMC test sample contains the AMC</font>

622
00:26:44,260 --> 00:26:48,460
test sample but<font color="#E5E5E5"> it hasn't been run yet</font>

623
00:26:46,389 --> 00:26:50,620
<font color="#CCCCCC">and as you can see</font><font color="#E5E5E5"> this is the command</font>

624
00:26:48,460 --> 00:26:54,970
that<font color="#E5E5E5"> was entered and now I'm going to</font>

625
00:26:50,620 --> 00:26:56,590
execute<font color="#E5E5E5"> the AMC test sample by calling</font>

626
00:26:54,970 --> 00:27:00,519
invoke expression<font color="#E5E5E5"> so let's delete</font>

627
00:26:56,590 --> 00:27:02,980
everything<font color="#E5E5E5"> here and enter now you can</font>

628
00:27:00,519 --> 00:27:07,210
see that Windows Defender<font color="#CCCCCC"> was able to</font>

629
00:27:02,980 --> 00:27:09,519
catch the<font color="#CCCCCC"> MC test sample and the reason</font>

630
00:27:07,210 --> 00:27:11,139
for<font color="#CCCCCC"> that is because we</font><font color="#E5E5E5"> have two lines</font>

631
00:27:09,519 --> 00:27:13,600
here the first is<font color="#E5E5E5"> the invoke expression</font>

632
00:27:11,139 --> 00:27:15,639
but<font color="#E5E5E5"> the second is what expression</font><font color="#CCCCCC"> I was</font>

633
00:27:13,600 --> 00:27:17,799
invoking so I never<font color="#E5E5E5"> typed this this is</font>

634
00:27:15,639 --> 00:27:20,620
this<font color="#E5E5E5"> has been called sort of implicitly</font>

635
00:27:17,799 --> 00:27:22,389
but this is the power<font color="#E5E5E5"> of</font><font color="#CCCCCC"> MC it allows me</font>

636
00:27:20,620 --> 00:27:26,820
<font color="#CCCCCC">to see everything that goes on in</font>

637
00:27:22,389 --> 00:27:26,820
PowerShell<font color="#E5E5E5"> so</font>

638
00:27:29,070 --> 00:27:34,220
now that wasn't<font color="#CCCCCC"> very hard to do and why</font>

639
00:27:32,400 --> 00:27:36,840
is<font color="#E5E5E5"> it such a secret</font><font color="#CCCCCC"> I really</font><font color="#E5E5E5"> don't know</font>

640
00:27:34,220 --> 00:27:38,400
<font color="#E5E5E5">Microsoft has decided to keep this</font>

641
00:27:36,840 --> 00:27:45,060
undocumented and I would kind of like to

642
00:27:38,400 --> 00:27:48,120
<font color="#E5E5E5">know why</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> force can dispatching we</font>

643
00:27:45,060 --> 00:27:49,980
know how MC loads<font color="#CCCCCC"> its providers but</font><font color="#E5E5E5"> we</font>

644
00:27:48,120 --> 00:27:52,979
<font color="#E5E5E5">haven't seen how MC dispatches its</font>

645
00:27:49,980 --> 00:27:54,870
requests can providers fail what happens

646
00:27:52,980 --> 00:27:56,580
if they do well we do know that<font color="#E5E5E5"> their</font>

647
00:27:54,870 --> 00:27:58,860
return<font color="#E5E5E5"> error codes in return</font><font color="#CCCCCC"> the error</font>

648
00:27:56,580 --> 00:28:01,850
codes can indicate failure so what will

649
00:27:58,860 --> 00:28:05,340
happen<font color="#CCCCCC"> in case of a failure</font><font color="#E5E5E5"> so back to</font>

650
00:28:01,850 --> 00:28:07,800
MC<font color="#CCCCCC"> dll we can take a look at the</font>

651
00:28:05,340 --> 00:28:11,370
function scan now this<font color="#E5E5E5"> function right</font>

652
00:28:07,800 --> 00:28:13,230
here will<font color="#CCCCCC"> be very simple function</font><font color="#E5E5E5"> what</font>

653
00:28:11,370 --> 00:28:16,139
we can see here<font color="#CCCCCC"> it'll</font><font color="#E5E5E5"> set the result to</font>

654
00:28:13,230 --> 00:28:17,520
be<font color="#E5E5E5"> not detected at first and then if</font>

655
00:28:16,140 --> 00:28:20,430
<font color="#CCCCCC">nothing changes</font><font color="#E5E5E5"> this will be what will</font>

656
00:28:17,520 --> 00:28:24,629
be returned<font color="#E5E5E5"> and then we can see that we</font>

657
00:28:20,430 --> 00:28:26,970
have a loop here<font color="#CCCCCC"> that will create a</font><font color="#E5E5E5"> an</font>

658
00:28:24,630 --> 00:28:30,450
<font color="#CCCCCC">MC provider iterator that</font><font color="#E5E5E5"> will iterate</font>

659
00:28:26,970 --> 00:28:33,090
through the<font color="#E5E5E5"> list</font><font color="#CCCCCC"> of MC providers and for</font>

660
00:28:30,450 --> 00:28:38,970
each<font color="#E5E5E5"> provider it's going to call its</font>

661
00:28:33,090 --> 00:28:40,649
scan method<font color="#E5E5E5"> right here and whatever the</font>

662
00:28:38,970 --> 00:28:44,730
result is it's going to<font color="#E5E5E5"> be stored</font><font color="#CCCCCC"> here</font>

663
00:28:40,650 --> 00:28:46,770
<font color="#CCCCCC">in this variable scan return value now</font>

664
00:28:44,730 --> 00:28:48,480
if we<font color="#E5E5E5"> take a look</font><font color="#CCCCCC"> towards the</font><font color="#E5E5E5"> end of the</font>

665
00:28:46,770 --> 00:28:51,240
loop we<font color="#CCCCCC"> can see a condition and that</font>

666
00:28:48,480 --> 00:28:54,300
condition checks if<font color="#CCCCCC"> the return value was</font>

667
00:28:51,240 --> 00:28:56,010
s<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> now bear</font><font color="#CCCCCC"> in mind</font><font color="#E5E5E5"> here we're not</font>

668
00:28:54,300 --> 00:28:57,450
<font color="#E5E5E5">talking about the result of the scan</font>

669
00:28:56,010 --> 00:29:00,570
whether it was malicious or<font color="#E5E5E5"> not this is</font>

670
00:28:57,450 --> 00:29:02,730
did I successfully scan the buffer that

671
00:29:00,570 --> 00:29:06,389
<font color="#CCCCCC">was passed to</font><font color="#E5E5E5"> me or not</font><font color="#CCCCCC"> so regardless of</font>

672
00:29:02,730 --> 00:29:09,510
<font color="#E5E5E5">the result we're going</font><font color="#CCCCCC"> to we're going</font><font color="#E5E5E5"> to</font>

673
00:29:06,390 --> 00:29:11,970
either<font color="#E5E5E5"> go right which means the result</font>

674
00:29:09,510 --> 00:29:14,640
was<font color="#CCCCCC"> ok to stop the loop don't continue</font>

675
00:29:11,970 --> 00:29:17,310
<font color="#E5E5E5">to the next provider or we're gonna go</font>

676
00:29:14,640 --> 00:29:21,110
left<font color="#E5E5E5"> which is the result who is not a</font>

677
00:29:17,310 --> 00:29:21,110
success<font color="#E5E5E5"> so continue to the next provider</font>

678
00:29:23,160 --> 00:29:29,590
now<font color="#CCCCCC"> a brief summary is that providers</font>

679
00:29:26,950 --> 00:29:32,950
are loaded by<font color="#E5E5E5"> their goods alphabetically</font>

680
00:29:29,590 --> 00:29:36,669
so I can choose what my<font color="#E5E5E5"> gooood starts</font>

681
00:29:32,950 --> 00:29:39,580
<font color="#E5E5E5">with and a lower good means that my</font>

682
00:29:36,670 --> 00:29:41,350
provider will be<font color="#E5E5E5"> loaded first so all</font>

683
00:29:39,580 --> 00:29:43,300
providers will<font color="#CCCCCC"> be stored</font><font color="#E5E5E5"> in some list of</font>

684
00:29:41,350 --> 00:29:47,139
providers<font color="#E5E5E5"> and whenever a scan request</font>

685
00:29:43,300 --> 00:29:48,490
arrives<font color="#E5E5E5"> it will dispatch the scan to all</font>

686
00:29:47,140 --> 00:29:51,280
the different providers<font color="#E5E5E5"> in</font><font color="#CCCCCC"> that list</font><font color="#E5E5E5"> if</font>

687
00:29:48,490 --> 00:29:53,110
the scan succeeds we don't<font color="#E5E5E5"> continue the</font>

688
00:29:51,280 --> 00:29:56,800
next provider and if the scan fails we

689
00:29:53,110 --> 00:29:57,969
do continue<font color="#CCCCCC"> the next provider so we do</font>

690
00:29:56,800 --> 00:30:00,399
know<font color="#E5E5E5"> how to register a provider this</font>

691
00:29:57,970 --> 00:30:02,020
does<font color="#E5E5E5"> require administrator</font><font color="#CCCCCC"> access but if</font>

692
00:30:00,400 --> 00:30:04,270
we register a simple provider that

693
00:30:02,020 --> 00:30:07,540
always<font color="#E5E5E5"> returns s</font><font color="#CCCCCC"> ok and that the result</font>

694
00:30:04,270 --> 00:30:09,910
is result clean then defender will never

695
00:30:07,540 --> 00:30:11,920
receive the scans because argue it

696
00:30:09,910 --> 00:30:15,280
starts with 1 or 0 because we can choose

697
00:30:11,920 --> 00:30:16,930
<font color="#E5E5E5">that this will essentially disable</font><font color="#CCCCCC"> MC</font>

698
00:30:15,280 --> 00:30:20,560
completely and there will be no

699
00:30:16,930 --> 00:30:22,120
indication to the<font color="#E5E5E5"> user or to defender</font><font color="#CCCCCC"> so</font>

700
00:30:20,560 --> 00:30:24,730
this is a pretty<font color="#E5E5E5"> cool trick</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> I</font>

701
00:30:22,120 --> 00:30:26,379
wouldn't go about calling it a bypass

702
00:30:24,730 --> 00:30:29,220
because<font color="#E5E5E5"> it</font><font color="#CCCCCC"> doesn't require administrator</font>

703
00:30:26,380 --> 00:30:31,120
privileges<font color="#CCCCCC"> and you are installing a</font>

704
00:30:29,220 --> 00:30:34,420
provider so in<font color="#CCCCCC"> theory</font><font color="#E5E5E5"> you can also</font>

705
00:30:31,120 --> 00:30:36,040
disable<font color="#E5E5E5"> MC completely but this is a very</font>

706
00:30:34,420 --> 00:30:38,680
<font color="#E5E5E5">nice trick because there will be no</font>

707
00:30:36,040 --> 00:30:41,860
indication to defend it<font color="#E5E5E5"> or to the</font><font color="#CCCCCC"> user</font>

708
00:30:38,680 --> 00:30:45,750
that something<font color="#E5E5E5"> took</font><font color="#CCCCCC"> place so now we're</font>

709
00:30:41,860 --> 00:30:45,750
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> be talking</font><font color="#CCCCCC"> about bypassing MC</font><font color="#E5E5E5"> and</font>

710
00:30:45,780 --> 00:30:49,930
we're gonna see some very cool bypasses

711
00:30:48,070 --> 00:30:51,879
that<font color="#E5E5E5"> were previously disclosed in the</font>

712
00:30:49,930 --> 00:30:54,670
<font color="#E5E5E5">internet and we're gonna see some new</font>

713
00:30:51,880 --> 00:30:56,740
things<font color="#CCCCCC"> but</font><font color="#E5E5E5"> the crucial</font><font color="#CCCCCC"> thing we must</font>

714
00:30:54,670 --> 00:31:00,670
understand is that when trying to<font color="#E5E5E5"> bypass</font>

715
00:30:56,740 --> 00:31:03,310
<font color="#E5E5E5">MC we need to understand what MC is</font>

716
00:31:00,670 --> 00:31:06,700
there to solve so according<font color="#CCCCCC"> to the blog</font>

717
00:31:03,310 --> 00:31:10,120
<font color="#E5E5E5">post by Microsoft that explains what MC</font>

718
00:31:06,700 --> 00:31:12,100
is good for the crux of<font color="#E5E5E5"> the issue is</font>

719
00:31:10,120 --> 00:31:14,050
that<font color="#E5E5E5"> this is that scripting like engines</font>

720
00:31:12,100 --> 00:31:15,909
can run code<font color="#E5E5E5"> that was generated at</font><font color="#CCCCCC"> run</font>

721
00:31:14,050 --> 00:31:17,800
<font color="#CCCCCC">time this is where the new anti-malware</font>

722
00:31:15,910 --> 00:31:18,940
scan interface comes in while the

723
00:31:17,800 --> 00:31:20,560
malicious script might go through

724
00:31:18,940 --> 00:31:22,120
<font color="#CCCCCC">several passes of the up</font><font color="#E5E5E5"> to station</font><font color="#CCCCCC"> it</font>

725
00:31:20,560 --> 00:31:24,909
<font color="#E5E5E5">ultimately needs to supply the scripting</font>

726
00:31:22,120 --> 00:31:27,699
engine<font color="#E5E5E5"> with plain an obfuscated code so</font>

727
00:31:24,910 --> 00:31:29,500
MC is a<font color="#E5E5E5"> technology created to help in</font>

728
00:31:27,700 --> 00:31:32,110
the battle<font color="#E5E5E5"> against script based malware</font>

729
00:31:29,500 --> 00:31:33,700
MC assumes<font color="#CCCCCC"> compromise</font><font color="#E5E5E5"> so if you're</font>

730
00:31:32,110 --> 00:31:36,100
running<font color="#E5E5E5"> the script you're already</font>

731
00:31:33,700 --> 00:31:37,450
<font color="#CCCCCC">infected</font><font color="#E5E5E5"> and MC says I'm</font>

732
00:31:36,100 --> 00:31:39,730
to take<font color="#E5E5E5"> away the attackers ability to</font>

733
00:31:37,450 --> 00:31:41,679
<font color="#E5E5E5">pop you skate</font><font color="#CCCCCC"> code</font><font color="#E5E5E5"> so if I have a known</font>

734
00:31:39,730 --> 00:31:43,059
malware<font color="#E5E5E5"> and known malicious script no</font>

735
00:31:41,679 --> 00:31:45,640
matter what you do before<font color="#E5E5E5"> you run</font><font color="#CCCCCC"> the</font>

736
00:31:43,059 --> 00:31:48,160
script<font color="#CCCCCC"> eventually you have</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> supply the</font>

737
00:31:45,640 --> 00:31:49,720
script to<font color="#CCCCCC"> the PowerShell engine</font><font color="#E5E5E5"> which</font>

738
00:31:48,160 --> 00:31:51,160
means<font color="#E5E5E5"> that I'll be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to scan it</font>

739
00:31:49,720 --> 00:31:54,400
without<font color="#CCCCCC"> having</font><font color="#E5E5E5"> to understand what kind</font>

740
00:31:51,160 --> 00:31:56,230
<font color="#E5E5E5">of procedures and</font><font color="#CCCCCC"> processes and and D</font>

741
00:31:54,400 --> 00:31:59,910
obfuscation you're running before<font color="#CCCCCC"> then</font>

742
00:31:56,230 --> 00:32:03,130
<font color="#CCCCCC">so some of the bypasses we're going to</font>

743
00:31:59,910 --> 00:32:06,400
discuss are not as troubling<font color="#E5E5E5"> because</font>

744
00:32:03,130 --> 00:32:07,750
<font color="#E5E5E5">their implementation flaws and basically</font>

745
00:32:06,400 --> 00:32:09,850
it's<font color="#CCCCCC"> something that the developers</font><font color="#E5E5E5"> of</font>

746
00:32:07,750 --> 00:32:11,980
<font color="#CCCCCC">AMC maybe overlooked</font><font color="#E5E5E5"> but these can</font>

747
00:32:09,850 --> 00:32:14,080
usually be fixed without much effort<font color="#CCCCCC"> so</font>

748
00:32:11,980 --> 00:32:17,169
let's see some<font color="#E5E5E5"> examples</font><font color="#CCCCCC"> of these so Matt</font>

749
00:32:14,080 --> 00:32:18,520
Nelson<font color="#CCCCCC"> posted a great blog post</font><font color="#E5E5E5"> and you</font>

750
00:32:17,169 --> 00:32:20,380
can<font color="#CCCCCC"> check</font><font color="#E5E5E5"> it out in this link</font><font color="#CCCCCC"> right</font>

751
00:32:18,520 --> 00:32:23,980
there<font color="#CCCCCC"> but what he figured out is that</font>

752
00:32:20,380 --> 00:32:26,350
the anti-malware object is loaded as a

753
00:32:23,980 --> 00:32:28,960
<font color="#CCCCCC">calm object just like the providers</font>

754
00:32:26,350 --> 00:32:31,689
themselves with co-create instance so

755
00:32:28,960 --> 00:32:33,190
when he looked at<font color="#E5E5E5"> process monitor he was</font>

756
00:32:31,690 --> 00:32:36,820
able<font color="#CCCCCC"> to see I</font><font color="#E5E5E5"> don't know if you guys can</font>

757
00:32:33,190 --> 00:32:40,299
see well<font color="#CCCCCC"> but</font><font color="#E5E5E5"> he was able to see that the</font>

758
00:32:36,820 --> 00:32:43,149
anti-malware<font color="#E5E5E5"> or</font><font color="#CCCCCC"> MC DLL is loaded from</font>

759
00:32:40,299 --> 00:32:46,179
<font color="#E5E5E5">the registry under the current user hive</font>

760
00:32:43,150 --> 00:32:47,590
the H key current user first and that

761
00:32:46,179 --> 00:32:51,370
fails which you can see the name not

762
00:32:47,590 --> 00:32:52,809
found over there<font color="#CCCCCC"> and at this point you</font>

763
00:32:51,370 --> 00:32:55,059
figured<font color="#E5E5E5"> okay well I'm just gonna create</font>

764
00:32:52,809 --> 00:32:56,590
this this registry key because I can I

765
00:32:55,059 --> 00:32:59,678
don't need<font color="#CCCCCC"> administrator resistant to</font>

766
00:32:56,590 --> 00:33:02,199
write to<font color="#CCCCCC"> HK Cu and I'm</font><font color="#E5E5E5"> gonna put a</font>

767
00:32:59,679 --> 00:33:05,409
reference<font color="#E5E5E5"> to a DLL that doesn't exist</font>

768
00:33:02,200 --> 00:33:08,320
and at<font color="#E5E5E5"> this point this causes</font><font color="#CCCCCC"> empty</font><font color="#E5E5E5"> to</font>

769
00:33:05,409 --> 00:33:10,630
fail and<font color="#CCCCCC"> PowerShell continues without</font>

770
00:33:08,320 --> 00:33:13,030
<font color="#E5E5E5">loading</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> MC and does not scan</font>

771
00:33:10,630 --> 00:33:16,230
anything<font color="#E5E5E5"> so this this issue was fixed</font>

772
00:33:13,030 --> 00:33:22,149
<font color="#E5E5E5">then another great post by Satoshi tanda</font>

773
00:33:16,230 --> 00:33:25,090
<font color="#E5E5E5">also in this blog post what he found out</font>

774
00:33:22,150 --> 00:33:28,570
is<font color="#CCCCCC"> that as we all saw</font><font color="#E5E5E5"> PowerShell uses MC</font>

775
00:33:25,090 --> 00:33:31,120
scan string and<font color="#CCCCCC"> AMG's can string assumes</font>

776
00:33:28,570 --> 00:33:33,340
that you're passing<font color="#CCCCCC"> to</font><font color="#E5E5E5"> it a null</font>

777
00:33:31,120 --> 00:33:35,770
terminated strength so that<font color="#E5E5E5"> means that</font>

778
00:33:33,340 --> 00:33:38,830
if you put<font color="#CCCCCC"> a null terminator</font><font color="#E5E5E5"> inside of</font>

779
00:33:35,770 --> 00:33:43,059
your script<font color="#E5E5E5"> MC will not scan past that</font>

780
00:33:38,830 --> 00:33:45,220
null<font color="#E5E5E5"> terminator and so what he did</font><font color="#CCCCCC"> was</font>

781
00:33:43,059 --> 00:33:47,918
<font color="#CCCCCC">he created a live a command that</font>

782
00:33:45,220 --> 00:33:49,120
contains<font color="#E5E5E5"> something benign a null</font>

783
00:33:47,919 --> 00:33:50,980
<font color="#E5E5E5">terminator and then something</font>

784
00:33:49,120 --> 00:33:54,639
delicious<font color="#E5E5E5"> and that thing completely</font>

785
00:33:50,980 --> 00:33:56,440
<font color="#E5E5E5">bypassed</font><font color="#CCCCCC"> AMC now this also was supposed</font>

786
00:33:54,640 --> 00:33:59,860
to<font color="#E5E5E5"> be corrected I haven't seen the</font>

787
00:33:56,440 --> 00:34:02,770
commits on github<font color="#CCCCCC"> but it's I think it's</font>

788
00:33:59,860 --> 00:34:03,729
supposed<font color="#CCCCCC"> to be fixed another</font><font color="#E5E5E5"> little</font>

789
00:34:02,770 --> 00:34:07,389
trick<font color="#CCCCCC"> and I don't</font><font color="#E5E5E5"> know who to attribute</font>

790
00:34:03,730 --> 00:34:09,909
<font color="#E5E5E5">this to but if you copy PowerShell to</font><font color="#CCCCCC"> a</font>

791
00:34:07,390 --> 00:34:11,590
different<font color="#CCCCCC"> directory</font><font color="#E5E5E5"> and you can do this</font>

792
00:34:09,909 --> 00:34:15,070
<font color="#CCCCCC">without administrator access</font><font color="#E5E5E5"> then you</font>

793
00:34:11,590 --> 00:34:17,919
can simply run it<font color="#E5E5E5"> and it'll try to load</font>

794
00:34:15,070 --> 00:34:20,500
MC from that directory<font color="#E5E5E5"> MC DLL so if you</font>

795
00:34:17,918 --> 00:34:23,440
drop<font color="#E5E5E5"> a rope MC DLL in that directory</font><font color="#CCCCCC"> and</font>

796
00:34:20,500 --> 00:34:25,300
you can<font color="#E5E5E5"> simply just copy the original</font><font color="#CCCCCC"> MC</font>

797
00:34:23,440 --> 00:34:26,440
directory and patch it before<font color="#E5E5E5"> so it</font>

798
00:34:25,300 --> 00:34:29,200
<font color="#E5E5E5">doesn't really</font><font color="#CCCCCC"> really require you</font><font color="#E5E5E5"> to</font>

799
00:34:26,440 --> 00:34:30,730
create<font color="#E5E5E5"> a DLL of your own and you put</font>

800
00:34:29,199 --> 00:34:33,549
<font color="#E5E5E5">that DLL in that directory it will</font><font color="#CCCCCC"> be</font>

801
00:34:30,730 --> 00:34:36,179
<font color="#E5E5E5">loaded instead of the original one and</font>

802
00:34:33,550 --> 00:34:39,330
<font color="#CCCCCC">this can also effectively disabled</font><font color="#E5E5E5"> MC</font>

803
00:34:36,179 --> 00:34:43,149
now if you do have<font color="#E5E5E5"> administrator access</font>

804
00:34:39,330 --> 00:34:45,370
notice that<font color="#E5E5E5"> PowerShell lives in a</font>

805
00:34:43,149 --> 00:34:48,549
subdirectory of system<font color="#CCCCCC"> 32 which is</font>

806
00:34:45,370 --> 00:34:50,830
<font color="#CCCCCC">Windows</font><font color="#E5E5E5"> PowerShell</font><font color="#CCCCCC"> V one point</font><font color="#E5E5E5"> zero so</font>

807
00:34:48,550 --> 00:34:51,700
it'll try<font color="#E5E5E5"> to load amps</font><font color="#CCCCCC"> e DLL from</font><font color="#E5E5E5"> that</font>

808
00:34:50,830 --> 00:34:53,560
directory as well

809
00:34:51,699 --> 00:34:56,500
<font color="#E5E5E5">so if you do have administrator access</font>

810
00:34:53,560 --> 00:34:58,090
you<font color="#CCCCCC"> can simply drop the patched MC DLL</font>

811
00:34:56,500 --> 00:34:59,770
in that directory<font color="#E5E5E5"> and then run</font>

812
00:34:58,090 --> 00:35:02,020
PowerShell<font color="#E5E5E5"> and</font><font color="#CCCCCC"> that will work and also</font>

813
00:34:59,770 --> 00:35:04,150
<font color="#CCCCCC">disable MC as you can see here in an</font>

814
00:35:02,020 --> 00:35:07,300
<font color="#E5E5E5">example that I played with it and I saw</font>

815
00:35:04,150 --> 00:35:10,210
<font color="#E5E5E5">that it's actually able</font><font color="#CCCCCC"> to load MC DLL</font>

816
00:35:07,300 --> 00:35:11,880
from<font color="#E5E5E5"> the</font><font color="#CCCCCC"> PowerShell directory and the</font>

817
00:35:10,210 --> 00:35:17,250
operation is success<font color="#CCCCCC"> and it does work</font><font color="#E5E5E5"> in</font>

818
00:35:11,880 --> 00:35:20,730
mitigating<font color="#CCCCCC"> or stopping</font><font color="#E5E5E5"> MC from scanning</font>

819
00:35:17,250 --> 00:35:20,730
one second

820
00:35:29,150 --> 00:35:34,339
so we talked a lot<font color="#E5E5E5"> about PowerShell</font><font color="#CCCCCC"> I</font>

821
00:35:32,690 --> 00:35:36,200
wanted<font color="#E5E5E5"> to take a look at VB script and</font>

822
00:35:34,339 --> 00:35:40,460
JavaScript as well<font color="#CCCCCC"> so I took</font><font color="#E5E5E5"> a look at</font>

823
00:35:36,200 --> 00:35:43,519
VB<font color="#E5E5E5"> script and JavaScript DLL and without</font>

824
00:35:40,460 --> 00:35:47,089
<font color="#E5E5E5">going into much detail</font><font color="#CCCCCC"> here we can see</font>

825
00:35:43,519 --> 00:35:50,479
that they both<font color="#CCCCCC"> contain</font><font color="#E5E5E5"> a class called</font><font color="#CCCCCC"> Oh</font>

826
00:35:47,089 --> 00:35:55,009
le script that<font color="#E5E5E5"> has an initialize</font>

827
00:35:50,480 --> 00:35:59,269
function which we'll call<font color="#CCCCCC"> the MC</font>

828
00:35:55,009 --> 00:36:02,839
initialize API call<font color="#CCCCCC"> and then later on</font>

829
00:35:59,269 --> 00:36:04,839
<font color="#E5E5E5">they both have the check dynamic code</font>

830
00:36:02,839 --> 00:36:09,410
safety which will be called to<font color="#E5E5E5"> check</font>

831
00:36:04,839 --> 00:36:15,680
code dynamically and this calls<font color="#CCCCCC"> AMC scan</font>

832
00:36:09,410 --> 00:36:17,149
string also and<font color="#E5E5E5"> when looking at the code</font>

833
00:36:15,680 --> 00:36:20,390
<font color="#CCCCCC">I noticed something very very</font>

834
00:36:17,150 --> 00:36:22,519
<font color="#E5E5E5">interesting</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> took a look at one of</font><font color="#CCCCCC"> the</font>

835
00:36:20,390 --> 00:36:24,680
functions and<font color="#E5E5E5"> I saw that actually a</font>

836
00:36:22,519 --> 00:36:27,859
string is being<font color="#E5E5E5"> referenced from the</font>

837
00:36:24,680 --> 00:36:30,169
registry and that string is MC<font color="#CCCCCC"> enable so</font>

838
00:36:27,859 --> 00:36:30,950
I figured well<font color="#E5E5E5"> this looks like a bypass</font>

839
00:36:30,170 --> 00:36:33,559
waiting to happen

840
00:36:30,950 --> 00:36:35,390
but I figured well for sure<font color="#E5E5E5"> this happens</font>

841
00:36:33,559 --> 00:36:37,249
from the local machine<font color="#E5E5E5"> where I won't be</font>

842
00:36:35,390 --> 00:36:40,249
<font color="#CCCCCC">able</font><font color="#E5E5E5"> to access it as an administrator</font>

843
00:36:37,249 --> 00:36:42,169
<font color="#E5E5E5">right</font><font color="#CCCCCC"> no so as we can see it explicitly</font>

844
00:36:40,249 --> 00:36:45,828
requests this to be accessed from the

845
00:36:42,170 --> 00:36:47,059
current user<font color="#E5E5E5"> so I thought okay I can</font><font color="#CCCCCC"> I</font>

846
00:36:45,829 --> 00:36:49,609
can write<font color="#E5E5E5"> to this and see what happens</font>

847
00:36:47,059 --> 00:36:51,710
<font color="#E5E5E5">and I also took a look at what registry</font>

848
00:36:49,609 --> 00:36:53,150
<font color="#CCCCCC">Keys being is being</font><font color="#E5E5E5"> accessed and we can</font>

849
00:36:51,710 --> 00:36:55,880
see<font color="#CCCCCC"> it's software microsoft windows</font>

850
00:36:53,150 --> 00:36:57,349
script settings now<font color="#E5E5E5"> windows script</font>

851
00:36:55,880 --> 00:36:59,720
doesn't<font color="#E5E5E5"> exist at least not</font><font color="#CCCCCC"> in my</font>

852
00:36:57,349 --> 00:37:02,059
<font color="#E5E5E5">up-to-date version of Windows 10 there's</font>

853
00:36:59,720 --> 00:37:03,890
windows script<font color="#E5E5E5"> scripts host or scripting</font>

854
00:37:02,059 --> 00:37:05,720
host but there's no windows script let

855
00:37:03,890 --> 00:37:11,328
alone settings let alone the value

856
00:37:05,720 --> 00:37:12,769
<font color="#E5E5E5">inside</font><font color="#CCCCCC"> MC enable so essentially VB</font>

857
00:37:11,329 --> 00:37:14,989
script will try<font color="#CCCCCC"> to access this value but</font>

858
00:37:12,769 --> 00:37:18,558
it doesn't exist<font color="#CCCCCC"> so it'll just continue</font>

859
00:37:14,989 --> 00:37:21,410
<font color="#E5E5E5">as if this value exists it doesn't</font><font color="#CCCCCC"> exist</font>

860
00:37:18,559 --> 00:37:23,960
<font color="#E5E5E5">and MC is enabled now</font><font color="#CCCCCC"> if we take a look</font>

861
00:37:21,410 --> 00:37:26,930
at a demo<font color="#CCCCCC"> of this we can</font><font color="#E5E5E5"> see that here I</font>

862
00:37:23,960 --> 00:37:30,950
have<font color="#CCCCCC"> a VB script sample that'll load the</font>

863
00:37:26,930 --> 00:37:32,569
<font color="#CCCCCC">MC test sample into a variable</font><font color="#E5E5E5"> and we</font>

864
00:37:30,950 --> 00:37:34,129
can see here<font color="#E5E5E5"> that if I take a look at</font>

865
00:37:32,569 --> 00:37:36,170
<font color="#E5E5E5">this</font><font color="#CCCCCC"> register key doesn't</font><font color="#E5E5E5"> exist if I try</font>

866
00:37:34,130 --> 00:37:41,019
to<font color="#E5E5E5"> look at</font><font color="#CCCCCC"> if this register key also</font>

867
00:37:36,170 --> 00:37:44,180
doesn't exist<font color="#E5E5E5"> and this</font>

868
00:37:41,019 --> 00:37:46,218
this script will have another variable

869
00:37:44,180 --> 00:37:48,890
<font color="#E5E5E5">it says should I try to bypass MC using</font>

870
00:37:46,219 --> 00:37:50,029
this MC<font color="#E5E5E5"> enable trick so first what we're</font>

871
00:37:48,890 --> 00:37:55,209
<font color="#CCCCCC">going to do is we're going to disable</font>

872
00:37:50,029 --> 00:37:59,229
Windows Defender<font color="#E5E5E5"> for demo purposes and</font>

873
00:37:55,209 --> 00:37:59,229
now I'm going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> run the script</font>

874
00:38:03,230 --> 00:38:08,930
and as you can<font color="#CCCCCC"> see we have a message box</font>

875
00:38:05,510 --> 00:38:15,109
with the MC test sample now when we

876
00:38:08,930 --> 00:38:17,799
enable the protection we can double

877
00:38:15,109 --> 00:38:21,200
click<font color="#E5E5E5"> it and we can see that this time</font>

878
00:38:17,800 --> 00:38:23,480
an error occurs we have threats<font color="#E5E5E5"> found by</font>

879
00:38:21,200 --> 00:38:25,069
Windows Defender<font color="#E5E5E5"> and the script contains</font>

880
00:38:23,480 --> 00:38:28,099
malicious<font color="#E5E5E5"> content and has been blocked</font>

881
00:38:25,070 --> 00:38:30,290
<font color="#E5E5E5">by your</font><font color="#CCCCCC"> antivirus software</font><font color="#E5E5E5"> so what we're</font>

882
00:38:28,099 --> 00:38:31,579
gonna do now is we're<font color="#CCCCCC"> going to leave</font>

883
00:38:30,290 --> 00:38:34,339
Windows Defender

884
00:38:31,579 --> 00:38:35,750
on and just use this little bypass

885
00:38:34,339 --> 00:38:37,339
should bypass<font color="#CCCCCC"> MC and this</font><font color="#E5E5E5"> will create</font>

886
00:38:35,750 --> 00:38:38,810
<font color="#CCCCCC">the registry key now as you can see the</font>

887
00:38:37,339 --> 00:38:41,270
registry key still it doesn't<font color="#CCCCCC"> exist</font>

888
00:38:38,810 --> 00:38:46,720
<font color="#CCCCCC">right and when we double-click</font><font color="#E5E5E5"> the</font>

889
00:38:41,270 --> 00:38:52,759
script it'll pop up<font color="#E5E5E5"> the message box</font><font color="#CCCCCC"> and</font>

890
00:38:46,720 --> 00:38:53,810
we know that<font color="#E5E5E5"> MC was bypassed</font><font color="#CCCCCC"> ok if we</font>

891
00:38:52,760 --> 00:39:01,270
<font color="#E5E5E5">take a look at the registry we can see</font>

892
00:38:53,810 --> 00:39:01,270
that<font color="#E5E5E5"> this</font><font color="#CCCCCC"> value was actually created</font><font color="#E5E5E5"> ok</font>

893
00:39:01,980 --> 00:39:08,160
so this is a<font color="#E5E5E5"> summary of what</font><font color="#CCCCCC"> we need</font><font color="#E5E5E5"> to</font>

894
00:39:04,079 --> 00:39:11,670
do we just<font color="#CCCCCC"> need to create</font><font color="#E5E5E5"> a value MC</font>

895
00:39:08,160 --> 00:39:13,470
<font color="#E5E5E5">enable to be</font><font color="#CCCCCC"> zero in</font><font color="#E5E5E5"> H key current user</font>

896
00:39:11,670 --> 00:39:15,119
software microsoft windows script

897
00:39:13,470 --> 00:39:18,950
settings<font color="#E5E5E5"> MC enabled</font>

898
00:39:15,119 --> 00:39:18,950
sorry without the<font color="#CCCCCC"> MCA enable at the end</font>

899
00:39:19,640 --> 00:39:23,549
<font color="#E5E5E5">so these are all what I like to call</font>

900
00:39:21,990 --> 00:39:25,618
implementation issues things<font color="#E5E5E5"> that</font><font color="#CCCCCC"> can be</font>

901
00:39:23,550 --> 00:39:27,210
<font color="#E5E5E5">easily patched as you see like the</font>

902
00:39:25,619 --> 00:39:28,770
previous<font color="#E5E5E5"> one was just something</font><font color="#CCCCCC"> that</font>

903
00:39:27,210 --> 00:39:31,920
shouldn't<font color="#E5E5E5"> be in the code just remove it</font>

904
00:39:28,770 --> 00:39:33,630
<font color="#CCCCCC">and Microsoft will fix</font><font color="#E5E5E5"> all of these</font>

905
00:39:31,920 --> 00:39:36,750
probably some of them have been<font color="#E5E5E5"> fixed</font>

906
00:39:33,630 --> 00:39:39,060
<font color="#E5E5E5">already but what if we have fundamental</font>

907
00:39:36,750 --> 00:39:40,770
issues in<font color="#E5E5E5"> MC like issues that are not</font>

908
00:39:39,060 --> 00:39:43,890
<font color="#E5E5E5">just implementation flaws something that</font>

909
00:39:40,770 --> 00:39:45,750
is not so easy<font color="#CCCCCC"> to fix with a patch</font><font color="#E5E5E5"> then</font>

910
00:39:43,890 --> 00:39:47,069
we have a more serious<font color="#E5E5E5"> problem let's</font>

911
00:39:45,750 --> 00:39:50,400
let's<font color="#E5E5E5"> take a look at some examples of</font>

912
00:39:47,070 --> 00:39:52,800
<font color="#E5E5E5">this so do you guys think</font><font color="#CCCCCC"> that it would</font>

913
00:39:50,400 --> 00:39:54,300
<font color="#E5E5E5">be possible to bypass MC with a command</font>

914
00:39:52,800 --> 00:39:58,440
line that<font color="#E5E5E5"> would fit into a single tweet</font>

915
00:39:54,300 --> 00:40:00,839
well let's recall the<font color="#CCCCCC"> MC in it filled in</font>

916
00:39:58,440 --> 00:40:01,890
it in it failed<font color="#CCCCCC"> filled from the</font>

917
00:40:00,839 --> 00:40:04,770
<font color="#CCCCCC">beginning when we</font><font color="#E5E5E5"> took a look at</font>

918
00:40:01,890 --> 00:40:07,200
PowerShell code now<font color="#E5E5E5"> what if we can</font>

919
00:40:04,770 --> 00:40:09,599
somehow manually set this to true<font color="#E5E5E5"> then</font>

920
00:40:07,200 --> 00:40:12,359
scans will not be by pet would not be

921
00:40:09,599 --> 00:40:14,640
dispatched because as far<font color="#CCCCCC"> as PowerShell</font>

922
00:40:12,359 --> 00:40:15,328
is concerned the MC initialization

923
00:40:14,640 --> 00:40:17,790
process failed

924
00:40:15,329 --> 00:40:18,720
<font color="#E5E5E5">now PowerShell is a very very powerful</font>

925
00:40:17,790 --> 00:40:20,940
<font color="#E5E5E5">tool</font>

926
00:40:18,720 --> 00:40:23,399
<font color="#CCCCCC">so without administrative access mat</font>

927
00:40:20,940 --> 00:40:26,670
<font color="#CCCCCC">Graber</font><font color="#E5E5E5"> was able</font><font color="#CCCCCC"> to literally</font><font color="#E5E5E5"> tweet</font><font color="#CCCCCC"> a</font>

928
00:40:23,400 --> 00:40:31,349
<font color="#E5E5E5">name an MC bypass and you can check this</font>

929
00:40:26,670 --> 00:40:35,099
bypass right here as you<font color="#CCCCCC"> can see</font><font color="#E5E5E5"> what he</font>

930
00:40:31,349 --> 00:40:38,480
does is he he references<font color="#E5E5E5"> the</font><font color="#CCCCCC"> class</font><font color="#E5E5E5"> MC</font>

931
00:40:35,099 --> 00:40:44,130
utils<font color="#E5E5E5"> he accesses the MC in it failed</font>

932
00:40:38,480 --> 00:40:47,869
<font color="#E5E5E5">member and then he sets it</font><font color="#CCCCCC"> to true</font><font color="#E5E5E5"> we</font>

933
00:40:44,130 --> 00:40:47,869
can see<font color="#E5E5E5"> this also in</font><font color="#CCCCCC"> action</font>

934
00:40:48,980 --> 00:40:54,500
and that the<font color="#E5E5E5"> interesting thing about</font>

935
00:40:51,680 --> 00:40:57,680
this bypass is if we take a look<font color="#E5E5E5"> at the</font>

936
00:40:54,500 --> 00:41:00,200
date<font color="#E5E5E5"> of this tweet it's from May 24th</font>

937
00:40:57,680 --> 00:41:03,140
2016 which is<font color="#CCCCCC"> nearly two years</font><font color="#E5E5E5"> ago</font><font color="#CCCCCC"> and</font>

938
00:41:00,200 --> 00:41:06,439
this<font color="#E5E5E5"> bypass still works at least in my</font>

939
00:41:03,140 --> 00:41:08,328
<font color="#CCCCCC">experiments even even as it</font><font color="#E5E5E5"> doesn't even</font>

940
00:41:06,440 --> 00:41:10,940
<font color="#E5E5E5">have a signature for</font><font color="#CCCCCC"> it in Windows</font>

941
00:41:08,329 --> 00:41:13,940
Defender<font color="#CCCCCC"> so literally attackers can just</font>

942
00:41:10,940 --> 00:41:16,820
use this<font color="#CCCCCC"> this command</font><font color="#E5E5E5"> line</font><font color="#CCCCCC"> to bypass MC</font>

943
00:41:13,940 --> 00:41:17,810
<font color="#E5E5E5">and completely disable it</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> the cool</font>

944
00:41:16,820 --> 00:41:19,640
<font color="#CCCCCC">thing about</font><font color="#E5E5E5"> it is it doesn't need</font>

945
00:41:17,810 --> 00:41:22,339
<font color="#CCCCCC">administrative privileges</font><font color="#E5E5E5"> so in my</font>

946
00:41:19,640 --> 00:41:24,770
opinion<font color="#CCCCCC"> this is the best MC</font><font color="#E5E5E5"> bypass to</font>

947
00:41:22,339 --> 00:41:30,109
date the most original<font color="#E5E5E5"> and the most</font>

948
00:41:24,770 --> 00:41:36,050
<font color="#E5E5E5">sophisticated</font><font color="#CCCCCC"> so if we copy paste this</font>

949
00:41:30,109 --> 00:41:40,339
code here we can see that we<font color="#E5E5E5"> were able</font>

950
00:41:36,050 --> 00:41:42,859
<font color="#CCCCCC">to create</font><font color="#E5E5E5"> the sample try to execute it</font>

951
00:41:40,339 --> 00:41:45,770
Windows Defender<font color="#E5E5E5"> says no this script</font>

952
00:41:42,859 --> 00:41:49,400
contains<font color="#E5E5E5"> malicious code so we</font><font color="#CCCCCC"> disable</font>

953
00:41:45,770 --> 00:41:51,380
<font color="#E5E5E5">using</font><font color="#CCCCCC"> Matt's</font><font color="#E5E5E5"> one-liner</font><font color="#CCCCCC"> and execute it</font>

954
00:41:49,400 --> 00:41:53,980
<font color="#E5E5E5">and as you</font><font color="#CCCCCC"> can see MC has been disabled</font>

955
00:41:51,380 --> 00:41:59,240
<font color="#E5E5E5">so this is pretty cool</font>

956
00:41:53,980 --> 00:42:02,390
now one more bypass is that<font color="#E5E5E5"> PowerShell</font>

957
00:41:59,240 --> 00:42:04,759
allows you to access native<font color="#E5E5E5"> API</font><font color="#CCCCCC"> as much</font>

958
00:42:02,390 --> 00:42:08,828
as you want<font color="#E5E5E5"> using native API calls there</font>

959
00:42:04,760 --> 00:42:11,540
are literally numerous ways<font color="#CCCCCC"> to bypass</font><font color="#E5E5E5"> MC</font>

960
00:42:08,829 --> 00:42:12,710
there was<font color="#E5E5E5"> actually a publication by two</font>

961
00:42:11,540 --> 00:42:15,170
<font color="#E5E5E5">researchers from cyber-ark</font>

962
00:42:12,710 --> 00:42:17,240
describing an MC bypass by loading a

963
00:42:15,170 --> 00:42:19,550
native DLL from<font color="#E5E5E5"> disk so you drop a deal</font>

964
00:42:17,240 --> 00:42:22,459
out to<font color="#E5E5E5"> disk and then you load it</font><font color="#CCCCCC"> but</font>

965
00:42:19,550 --> 00:42:23,869
let's<font color="#E5E5E5"> try to demonstrate a more simple</font>

966
00:42:22,460 --> 00:42:26,060
approach<font color="#CCCCCC"> to this</font>

967
00:42:23,869 --> 00:42:28,940
we know that<font color="#CCCCCC"> PowerShell calls</font><font color="#E5E5E5"> eventually</font>

968
00:42:26,060 --> 00:42:30,470
<font color="#E5E5E5">MC scan buffer</font><font color="#CCCCCC"> I'm you know that MCC and</font>

969
00:42:28,940 --> 00:42:34,099
buffer is in charge<font color="#E5E5E5"> of passing scan</font>

970
00:42:30,470 --> 00:42:36,859
requests to the the providers themselves

971
00:42:34,099 --> 00:42:38,869
<font color="#CCCCCC">so what</font><font color="#E5E5E5"> we're going to try to do is</font>

972
00:42:36,859 --> 00:42:42,109
without administrator access we're going

973
00:42:38,869 --> 00:42:43,849
to try to patch MC<font color="#E5E5E5"> in memory the DLL</font>

974
00:42:42,109 --> 00:42:45,799
itself<font color="#E5E5E5"> and we're going to replace it</font>

975
00:42:43,849 --> 00:42:49,550
<font color="#CCCCCC">with something along</font><font color="#E5E5E5"> the lines of this</font>

976
00:42:45,800 --> 00:42:51,560
right<font color="#E5E5E5"> here which</font><font color="#CCCCCC"> is move</font><font color="#E5E5E5"> a l1 return</font>

977
00:42:49,550 --> 00:42:54,349
which means<font color="#E5E5E5"> basically return one now</font>

978
00:42:51,560 --> 00:42:56,299
since we expect<font color="#E5E5E5"> a scan to return zero</font>

979
00:42:54,349 --> 00:42:57,500
<font color="#CCCCCC">which is success</font><font color="#E5E5E5"> this is going to be</font>

980
00:42:56,300 --> 00:43:05,330
regarded as<font color="#E5E5E5"> an error</font>

981
00:42:57,500 --> 00:43:07,780
and it'll<font color="#E5E5E5"> allow us</font><font color="#CCCCCC"> to bypass so take a</font>

982
00:43:05,330 --> 00:43:07,779
<font color="#E5E5E5">look at this</font>

983
00:43:10,700 --> 00:43:19,129
as you can<font color="#E5E5E5"> see we're using the the API</font>

984
00:43:15,140 --> 00:43:21,440
get procedure address on MC<font color="#E5E5E5"> DLL to get</font>

985
00:43:19,130 --> 00:43:24,320
the<font color="#E5E5E5"> address of MC scan buffer and then</font>

986
00:43:21,440 --> 00:43:27,260
<font color="#CCCCCC">we're</font><font color="#E5E5E5"> going to call virtual protect to</font>

987
00:43:24,320 --> 00:43:29,990
make that memory writable and then we're

988
00:43:27,260 --> 00:43:33,650
<font color="#E5E5E5">going to use</font><font color="#CCCCCC"> mem set to write byte by</font>

989
00:43:29,990 --> 00:43:41,328
byte<font color="#E5E5E5"> the new</font><font color="#CCCCCC"> app codes that will disable</font>

990
00:43:33,650 --> 00:43:43,880
<font color="#E5E5E5">MC so here we have some helper functions</font>

991
00:43:41,329 --> 00:43:45,980
<font color="#E5E5E5">that I'll be posting online later but</font>

992
00:43:43,880 --> 00:43:47,300
I'm<font color="#E5E5E5"> gonna paste them into power so as</font>

993
00:43:45,980 --> 00:43:49,190
you can<font color="#E5E5E5"> see Windows</font><font color="#CCCCCC"> Defender doesn't</font>

994
00:43:47,300 --> 00:43:51,829
mind<font color="#E5E5E5"> because</font><font color="#CCCCCC"> these are legitimate</font>

995
00:43:49,190 --> 00:43:54,530
functions and then what I'm going to do

996
00:43:51,829 --> 00:43:58,730
is I need<font color="#E5E5E5"> another helper function which</font>

997
00:43:54,530 --> 00:44:01,040
is get win32 functions which will give

998
00:43:58,730 --> 00:44:02,359
me<font color="#E5E5E5"> the access to virtual protect and</font><font color="#CCCCCC"> mem</font>

999
00:44:01,040 --> 00:44:06,859
<font color="#CCCCCC">set</font><font color="#E5E5E5"> and this</font><font color="#CCCCCC"> I copied from another</font>

1000
00:44:02,359 --> 00:44:08,839
<font color="#E5E5E5">repository</font><font color="#CCCCCC"> on github and when I run</font><font color="#E5E5E5"> this</font>

1001
00:44:06,859 --> 00:44:10,640
and hit enter<font color="#CCCCCC"> now I have a problem with</font>

1002
00:44:08,839 --> 00:44:13,190
<font color="#E5E5E5">MC it says this is malicious because</font>

1003
00:44:10,640 --> 00:44:15,290
<font color="#E5E5E5">well</font><font color="#CCCCCC"> I copied it</font><font color="#E5E5E5"> from somewhere</font><font color="#CCCCCC"> that MC</font>

1004
00:44:13,190 --> 00:44:17,420
was aware of<font color="#E5E5E5"> so what I'm going to do is</font>

1005
00:44:15,290 --> 00:44:20,119
I'm<font color="#CCCCCC"> going to bypass this incredibly</font>

1006
00:44:17,420 --> 00:44:22,300
sophisticated<font color="#E5E5E5"> protection by deleting the</font>

1007
00:44:20,119 --> 00:44:27,500
<font color="#CCCCCC">T in virtual protect and the</font>

1008
00:44:22,300 --> 00:44:29,060
<font color="#CCCCCC">corresponding T here and this is</font>

1009
00:44:27,500 --> 00:44:31,970
effectively good enough to bypass the

1010
00:44:29,060 --> 00:44:34,069
signature and now I'm going to copy the

1011
00:44:31,970 --> 00:44:35,990
function we saw in the in the slide

1012
00:44:34,069 --> 00:44:41,470
before<font color="#CCCCCC"> all right</font>

1013
00:44:35,990 --> 00:44:44,629
paste it and create the test<font color="#CCCCCC"> sample as</font>

1014
00:44:41,470 --> 00:44:48,609
we've always<font color="#E5E5E5"> been doing now we're going</font>

1015
00:44:44,630 --> 00:44:53,079
we can test if<font color="#CCCCCC"> we are administrators and</font>

1016
00:44:48,609 --> 00:44:53,078
as we can<font color="#CCCCCC"> see we are</font><font color="#E5E5E5"> not administrators</font>

1017
00:44:54,090 --> 00:44:57,440
we're not administrators

1018
00:44:59,740 --> 00:45:05,189
and when we tried<font color="#CCCCCC"> to execute</font><font color="#E5E5E5"> the sample</font>

1019
00:45:08,880 --> 00:45:12,359
we have a problem<font color="#CCCCCC"> because we haven't</font>

1020
00:45:10,890 --> 00:45:13,288
disabled it yet<font color="#CCCCCC"> so what we're gonna</font><font color="#E5E5E5"> do</font>

1021
00:45:12,359 --> 00:45:18,180
now<font color="#CCCCCC"> is</font><font color="#E5E5E5"> we're gonna call the patch</font>

1022
00:45:13,289 --> 00:45:22,380
<font color="#E5E5E5">function and then run this again</font><font color="#CCCCCC"> and it</font>

1023
00:45:18,180 --> 00:45:25,950
works<font color="#CCCCCC"> so we we took a look here we</font><font color="#E5E5E5"> tried</font>

1024
00:45:22,380 --> 00:45:28,710
to run<font color="#E5E5E5"> it we had a malicious content</font>

1025
00:45:25,950 --> 00:45:32,189
<font color="#E5E5E5">error we patched the DLL in memory and</font>

1026
00:45:28,710 --> 00:45:37,410
then we executed it again and it worked

1027
00:45:32,190 --> 00:45:40,319
<font color="#CCCCCC">so MC</font><font color="#E5E5E5"> should we keep it should be toss</font>

1028
00:45:37,410 --> 00:45:42,720
it<font color="#CCCCCC"> what should we do</font><font color="#E5E5E5"> with it well the</font>

1029
00:45:40,319 --> 00:45:45,239
good<font color="#E5E5E5"> things about MC is it allows more</font>

1030
00:45:42,720 --> 00:45:47,488
visibility<font color="#E5E5E5"> for anti anti viruses and</font>

1031
00:45:45,239 --> 00:45:49,170
security products<font color="#E5E5E5"> and so I do think</font><font color="#CCCCCC"> that</font>

1032
00:45:47,489 --> 00:45:51,960
<font color="#CCCCCC">all security products</font><font color="#E5E5E5"> should implement</font>

1033
00:45:49,170 --> 00:45:53,249
providers as long as we have<font color="#CCCCCC"> em see</font><font color="#E5E5E5"> it's</font>

1034
00:45:51,960 --> 00:45:56,279
better<font color="#E5E5E5"> to see something than to see</font>

1035
00:45:53,249 --> 00:45:58,910
nothing<font color="#CCCCCC"> and this can help</font><font color="#E5E5E5"> because not</font>

1036
00:45:56,279 --> 00:46:03,450
every attack will contain an AMC bypass

1037
00:45:58,910 --> 00:46:06,920
<font color="#CCCCCC">and</font><font color="#E5E5E5"> the fact that an app developer can</font>

1038
00:46:03,450 --> 00:46:09,509
take active part and the<font color="#CCCCCC"> users</font>

1039
00:46:06,920 --> 00:46:11,160
<font color="#E5E5E5">protection by actually requesting</font>

1040
00:46:09,509 --> 00:46:12,960
content to be scanned<font color="#CCCCCC"> I think is a good</font>

1041
00:46:11,160 --> 00:46:14,759
step it's a good idea<font color="#CCCCCC"> and the fact that</font>

1042
00:46:12,960 --> 00:46:17,219
you can do it with any<font color="#CCCCCC"> Content opens</font><font color="#E5E5E5"> the</font>

1043
00:46:14,759 --> 00:46:19,739
<font color="#E5E5E5">door to many other applications and I</font>

1044
00:46:17,219 --> 00:46:21,599
think this is in<font color="#CCCCCC"> general a good</font><font color="#E5E5E5"> idea but</font>

1045
00:46:19,739 --> 00:46:23,339
the bad<font color="#CCCCCC"> thing is as long as PowerShell</font>

1046
00:46:21,599 --> 00:46:25,769
can do anything in dotnet and<font color="#E5E5E5"> access</font>

1047
00:46:23,339 --> 00:46:28,440
native methods<font color="#E5E5E5"> it'll always be like</font>

1048
00:46:25,769 --> 00:46:30,450
nearly<font color="#E5E5E5"> impossible to beat obfuscation</font>

1049
00:46:28,440 --> 00:46:32,069
<font color="#E5E5E5">and the same issues are going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> arise</font>

1050
00:46:30,450 --> 00:46:33,660
when<font color="#E5E5E5"> we try to integrate MC and two</font>

1051
00:46:32,069 --> 00:46:35,369
other scripting<font color="#E5E5E5"> languages such as Python</font>

1052
00:46:33,660 --> 00:46:37,319
<font color="#E5E5E5">for example because as long as you can</font>

1053
00:46:35,369 --> 00:46:39,329
control<font color="#E5E5E5"> your your own memory address</font>

1054
00:46:37,319 --> 00:46:40,950
space from the scripting language<font color="#E5E5E5"> then</font>

1055
00:46:39,329 --> 00:46:46,049
you<font color="#CCCCCC"> can always</font><font color="#E5E5E5"> mess with this kind of</font>

1056
00:46:40,950 --> 00:46:49,410
this kind<font color="#CCCCCC"> of myth</font><font color="#E5E5E5"> defense mechanism so</font>

1057
00:46:46,049 --> 00:46:51,059
to sum up<font color="#E5E5E5"> what we did is we we talked</font>

1058
00:46:49,410 --> 00:46:53,249
about script language<font color="#E5E5E5"> script language</font>

1059
00:46:51,059 --> 00:46:55,619
malware and obfuscation<font color="#CCCCCC"> we talked about</font>

1060
00:46:53,249 --> 00:46:58,709
what MC was created for we talked about

1061
00:46:55,619 --> 00:47:00,569
the internals of MC the design the API

1062
00:46:58,710 --> 00:47:03,180
the structures the initialization

1063
00:47:00,569 --> 00:47:05,670
<font color="#CCCCCC">process of the providers the dispatching</font>

1064
00:47:03,180 --> 00:47:07,919
<font color="#E5E5E5">of scans we talked</font><font color="#CCCCCC"> about how one would</font>

1065
00:47:05,670 --> 00:47:09,779
go about implementing their own provider

1066
00:47:07,920 --> 00:47:11,759
and registering<font color="#E5E5E5"> it and then we talked</font>

1067
00:47:09,779 --> 00:47:14,279
about bypassing<font color="#E5E5E5"> it we talked about</font>

1068
00:47:11,759 --> 00:47:15,960
implementation<font color="#CCCCCC"> issues the com server</font>

1069
00:47:14,279 --> 00:47:18,960
hijacking<font color="#E5E5E5"> by</font><font color="#CCCCCC"> Matt the null</font><font color="#E5E5E5"> terminator</font>

1070
00:47:15,960 --> 00:47:21,299
<font color="#E5E5E5">Bob by</font><font color="#CCCCCC"> satoshi the ancien Abel bug and</font>

1071
00:47:18,960 --> 00:47:22,140
VB script<font color="#E5E5E5"> and in JavaScript and we</font>

1072
00:47:21,299 --> 00:47:24,240
talked about<font color="#CCCCCC"> fundamental</font>

1073
00:47:22,140 --> 00:47:26,160
issues<font color="#E5E5E5"> like the one-liner</font><font color="#CCCCCC"> that match out</font>

1074
00:47:24,240 --> 00:47:29,939
and the in<font color="#E5E5E5"> memory games bypassed by</font>

1075
00:47:26,160 --> 00:47:31,170
using<font color="#CCCCCC"> in-memory hot patching so at this</font>

1076
00:47:29,940 --> 00:47:32,369
point I'd like<font color="#CCCCCC"> to thank you all for</font>

1077
00:47:31,170 --> 00:47:34,200
<font color="#CCCCCC">coming</font>

1078
00:47:32,369 --> 00:47:36,329
hope you<font color="#E5E5E5"> enjoyed and you learn something</font>

1079
00:47:34,200 --> 00:48:19,649
<font color="#CCCCCC">and I'm here to</font><font color="#E5E5E5"> answer any questions if</font>

1080
00:47:36,329 --> 00:48:22,680
<font color="#E5E5E5">you haven't well it depends</font><font color="#CCCCCC"> I think that</font>

1081
00:48:19,650 --> 00:48:25,079
macros<font color="#E5E5E5"> use vbscript</font><font color="#CCCCCC"> DLL so in this case</font>

1082
00:48:22,680 --> 00:48:28,500
some<font color="#E5E5E5"> functional functionality will</font><font color="#CCCCCC"> be</font>

1083
00:48:25,079 --> 00:48:30,720
sent to<font color="#E5E5E5"> MC so it could</font><font color="#CCCCCC"> be but whatever</font>

1084
00:48:28,500 --> 00:48:33,589
is being<font color="#E5E5E5"> blocked in</font><font color="#CCCCCC"> your situation could</font>

1085
00:48:30,720 --> 00:48:33,589
also<font color="#E5E5E5"> be something else</font>

1086
00:48:33,830 --> 00:48:43,009
[Music]

1087
00:48:36,880 --> 00:48:46,039
<font color="#CCCCCC">mm-hmm</font><font color="#E5E5E5"> I'm not aware</font><font color="#CCCCCC"> of anything</font>

1088
00:48:43,009 --> 00:48:47,989
specifically<font color="#E5E5E5"> but many vendors implement</font>

1089
00:48:46,039 --> 00:48:50,660
<font color="#E5E5E5">things</font><font color="#CCCCCC"> around the macro because we know</font>

1090
00:48:47,989 --> 00:48:52,400
that's<font color="#E5E5E5"> a sensitive topic</font><font color="#CCCCCC"> so at</font><font color="#E5E5E5"> in silo</font>

1091
00:48:50,660 --> 00:48:54,529
where I worked we we had<font color="#E5E5E5"> something and</font>

1092
00:48:52,400 --> 00:48:55,999
and I'm sure every other vendor has

1093
00:48:54,529 --> 00:48:58,670
something there and<font color="#E5E5E5"> with Windows</font>

1094
00:48:55,999 --> 00:49:01,848
<font color="#E5E5E5">Defender</font><font color="#CCCCCC"> so there's probably something</font>

1095
00:48:58,670 --> 00:49:04,130
<font color="#E5E5E5">to try to block macro content from</font>

1096
00:49:01,849 --> 00:49:06,079
running malicious stuff<font color="#E5E5E5"> and also</font><font color="#CCCCCC"> AMC is</font>

1097
00:49:04,130 --> 00:49:13,930
there probably because<font color="#CCCCCC"> it</font><font color="#E5E5E5"> uses vbscript</font>

1098
00:49:06,079 --> 00:49:13,930
<font color="#E5E5E5">a</font><font color="#CCCCCC"> DLL</font><font color="#E5E5E5"> so welcome any other questions</font>

1099
00:49:14,319 --> 00:49:17,739
<font color="#CCCCCC">okay thank you</font>

