1
00:00:00,359 --> 00:00:02,040
So today we're going to talk about uh

2
00:00:02,040 --> 00:00:04,980
get bomb now originally this talk was

3
00:00:04,980 --> 00:00:08,460
going to be given by Ed warnecke and Ava

4
00:00:08,460 --> 00:00:11,580
black but Ed warnicki gots uh iced in in

5
00:00:11,580 --> 00:00:15,420
Austin and uh Ava black uh came down

6
00:00:15,420 --> 00:00:17,520
with an illness and so we went down

7
00:00:17,520 --> 00:00:18,900
through the Rolodex of various other

8
00:00:18,900 --> 00:00:21,420
omnibor or people who are present and I

9
00:00:21,420 --> 00:00:23,100
was top of the list so

10
00:00:23,100 --> 00:00:25,980
uh so please excuse me the slide deck is

11
00:00:25,980 --> 00:00:28,140
not one that I that I wrote but I will

12
00:00:28,140 --> 00:00:30,539
do my best to give the spirit of the of

13
00:00:30,539 --> 00:00:33,899
the talk uh I did write a significant

14
00:00:33,899 --> 00:00:35,880
portion of two of the six

15
00:00:35,880 --> 00:00:39,059
implementations of omnibor so I can

16
00:00:39,059 --> 00:00:40,920
definitely answer questions on the

17
00:00:40,920 --> 00:00:43,440
technical side please raise your hand

18
00:00:43,440 --> 00:00:45,660
and interrupt me if you have questions

19
00:00:45,660 --> 00:00:47,460
along the way because it's better to get

20
00:00:47,460 --> 00:00:49,460
the questions out as we go rather than

21
00:00:49,460 --> 00:00:52,559
let them sit and linger because there'll

22
00:00:52,559 --> 00:00:53,940
be other people with the same set of

23
00:00:53,940 --> 00:00:56,460
questions and but it's up to you on how

24
00:00:56,460 --> 00:00:58,559
you want to deal with that

25
00:00:58,559 --> 00:01:02,039
so first let's talk about timeline so we

26
00:01:02,039 --> 00:01:03,780
had a colonial pipeline hack which

27
00:01:03,780 --> 00:01:05,939
occurred in May 2021 I'm pretty sure

28
00:01:05,939 --> 00:01:08,460
everyone here is familiar with it

29
00:01:08,460 --> 00:01:12,479
um and uh that ended up causing the

30
00:01:12,479 --> 00:01:14,040
secure the Cyber Security executive

31
00:01:14,040 --> 00:01:15,960
order to be put out by the uh by the

32
00:01:15,960 --> 00:01:17,880
Biden Administration

33
00:01:17,880 --> 00:01:21,000
but if we go back in time we actually

34
00:01:21,000 --> 00:01:23,280
can see that much of the much of the

35
00:01:23,280 --> 00:01:25,520
work that had been done that led up to

36
00:01:25,520 --> 00:01:30,119
uh to omnivore was the creation of spdx

37
00:01:30,119 --> 00:01:32,720
which was launched in February 2010 and

38
00:01:32,720 --> 00:01:35,820
before that where some of that working

39
00:01:35,820 --> 00:01:37,439
from was from initially the an

40
00:01:37,439 --> 00:01:38,939
industrialized s-bomb that would have

41
00:01:38,939 --> 00:01:40,439
been done at Cisco where Cisco had a

42
00:01:40,439 --> 00:01:42,420
requirement to know exactly where all

43
00:01:42,420 --> 00:01:44,280
their infrastructure or all of their

44
00:01:44,280 --> 00:01:46,259
stuff was coming from so they can work

45
00:01:46,259 --> 00:01:48,479
out what um

46
00:01:48,479 --> 00:01:50,399
let's make it work out where where did

47
00:01:50,399 --> 00:01:52,380
the hardware come from uh what software

48
00:01:52,380 --> 00:01:54,119
patches and so on within their within

49
00:01:54,119 --> 00:01:57,119
their switches and routers and so

50
00:01:57,119 --> 00:02:01,280
uh however mistakes were made

51
00:02:02,820 --> 00:02:06,780
but at the same time much was learned

52
00:02:06,780 --> 00:02:08,880
so again back to the timeline

53
00:02:08,880 --> 00:02:12,120
uh Colonial pipeline hack may 6. take a

54
00:02:12,120 --> 00:02:13,560
look at the Timeline between May 6 to

55
00:02:13,560 --> 00:02:15,480
May 12th was the time between when they

56
00:02:15,480 --> 00:02:17,640
uh and actually what this means is that

57
00:02:17,640 --> 00:02:19,920
they were actually working on the uh on

58
00:02:19,920 --> 00:02:21,599
the release but they were just waiting

59
00:02:21,599 --> 00:02:22,860
for the opportune time to actually

60
00:02:22,860 --> 00:02:25,860
release it out uh and this was huge so

61
00:02:25,860 --> 00:02:27,780
the timing was perfect they launched it

62
00:02:27,780 --> 00:02:30,420
got got the support

63
00:02:30,420 --> 00:02:32,640
um the first omnibor talk well at the

64
00:02:32,640 --> 00:02:33,959
time was called gitbomb but now the

65
00:02:33,959 --> 00:02:36,379
first omnibar talk occurred uh May 28th

66
00:02:36,379 --> 00:02:38,400
uh we actually were doing a lot of work

67
00:02:38,400 --> 00:02:41,340
before this as well uh to lead up to it

68
00:02:41,340 --> 00:02:42,660
but

69
00:02:42,660 --> 00:02:45,080
um we ended up talking about like

70
00:02:45,080 --> 00:02:47,760
amongst each other and and having like

71
00:02:47,760 --> 00:02:49,860
various private conversations between

72
00:02:49,860 --> 00:02:52,920
people uh we launched it you know we

73
00:02:52,920 --> 00:02:55,319
actually did the the community launch in

74
00:02:55,319 --> 00:02:57,300
February of last year so it's slightly

75
00:02:57,300 --> 00:02:59,160
under a year old

76
00:02:59,160 --> 00:03:00,900
when we announced it

77
00:03:00,900 --> 00:03:03,239
this is the uh this was the on the day

78
00:03:03,239 --> 00:03:05,940
of of the uh the reach that we had so we

79
00:03:05,940 --> 00:03:07,500
had some pretty good Outreach we were

80
00:03:07,500 --> 00:03:09,420
pretty happy with that and interest is

81
00:03:09,420 --> 00:03:10,980
definitely kept uh has definitely kept

82
00:03:10,980 --> 00:03:13,040
up

83
00:03:14,879 --> 00:03:18,420
um so however one of the things that we

84
00:03:18,420 --> 00:03:20,340
did and especially Ava black was

85
00:03:20,340 --> 00:03:21,780
absolutely fantastic with this for six

86
00:03:21,780 --> 00:03:23,760
months went around and spoke with

87
00:03:23,760 --> 00:03:26,099
various people so she would listen to to

88
00:03:26,099 --> 00:03:27,900
what people have to say about uh about

89
00:03:27,900 --> 00:03:29,220
the space

90
00:03:29,220 --> 00:03:31,680
uh usually over a cup of tea or coffee

91
00:03:31,680 --> 00:03:33,480
or something similar hence the uh hence

92
00:03:33,480 --> 00:03:35,180
the the baby Yoda

93
00:03:35,180 --> 00:03:37,860
and found that there was there were

94
00:03:37,860 --> 00:03:41,400
issues around how s-bombs were were done

95
00:03:41,400 --> 00:03:42,959
how do we actually correlate them to the

96
00:03:42,959 --> 00:03:44,120
things that were that we're working on

97
00:03:44,120 --> 00:03:46,980
and the reality is that as in the short

98
00:03:46,980 --> 00:03:49,140
small scale it looked okay but in the

99
00:03:49,140 --> 00:03:50,580
large scale when you actually start to

100
00:03:50,580 --> 00:03:52,680
scale it out uh it actually looked a

101
00:03:52,680 --> 00:03:55,140
little bit more like this like trying to

102
00:03:55,140 --> 00:03:57,959
trace where everything was

103
00:03:57,959 --> 00:04:00,780
and the the general response to that was

104
00:04:00,780 --> 00:04:04,680
uh was uh horror or

105
00:04:04,680 --> 00:04:07,500
uh or frustration

106
00:04:07,500 --> 00:04:10,319
or a mixture of both

107
00:04:10,319 --> 00:04:12,659
and this is all to answer a simple

108
00:04:12,659 --> 00:04:16,019
question am I safe is what am I is what

109
00:04:16,019 --> 00:04:19,100
I am doing safe

110
00:04:19,680 --> 00:04:21,540
um but in order to answer the question

111
00:04:21,540 --> 00:04:24,840
whether you're safe or not you also have

112
00:04:24,840 --> 00:04:26,940
to look at again we saw The Rat's Nest

113
00:04:26,940 --> 00:04:28,199
before you also have to look at the

114
00:04:28,199 --> 00:04:29,280
Simplicity of the thing you're doing

115
00:04:29,280 --> 00:04:31,199
because you cannot answer that question

116
00:04:31,199 --> 00:04:33,000
if things are too complex and if things

117
00:04:33,000 --> 00:04:34,139
are too complex there's no way you're

118
00:04:34,139 --> 00:04:35,220
going to be able to get everyone on

119
00:04:35,220 --> 00:04:39,300
board and so we found uh We've many of

120
00:04:39,300 --> 00:04:42,120
us on on the uh on the project have

121
00:04:42,120 --> 00:04:44,220
significant distributed systems

122
00:04:44,220 --> 00:04:45,660
experience

123
00:04:45,660 --> 00:04:47,340
and so we aim towards things that are

124
00:04:47,340 --> 00:04:49,740
more simple uh to try to keep reliable

125
00:04:49,740 --> 00:04:51,479
try to keep it performant and also so

126
00:04:51,479 --> 00:04:52,740
you can actually reason about the

127
00:04:52,740 --> 00:04:54,479
security I want to make a point here

128
00:04:54,479 --> 00:04:56,460
there's actually great talk by I think

129
00:04:56,460 --> 00:04:58,560
it was about 15 years ago maybe at

130
00:04:58,560 --> 00:05:00,240
strange loot by a guy named Rich hickey

131
00:05:00,240 --> 00:05:03,900
who created the closure uh language

132
00:05:03,900 --> 00:05:05,759
um the talk was not about closure the

133
00:05:05,759 --> 00:05:08,160
talk was about simple versus easy

134
00:05:08,160 --> 00:05:09,300
just because it's something as simple

135
00:05:09,300 --> 00:05:10,860
doesn't mean it's easy just because easy

136
00:05:10,860 --> 00:05:13,440
doesn't mean it's simple and very often

137
00:05:13,440 --> 00:05:15,180
you can get lulled into the idea that

138
00:05:15,180 --> 00:05:16,979
something is easy and then work out

139
00:05:16,979 --> 00:05:18,900
later on that when something breaks you

140
00:05:18,900 --> 00:05:20,759
now have this massive Rat's Nest that

141
00:05:20,759 --> 00:05:22,620
you have to do you have to deal with so

142
00:05:22,620 --> 00:05:24,539
we wanted to avoid that like yes there

143
00:05:24,539 --> 00:05:26,220
may be some areas where this where the

144
00:05:26,220 --> 00:05:28,259
Simplicity may be at odds with the ease

145
00:05:28,259 --> 00:05:29,460
of use of it but we want to make sure

146
00:05:29,460 --> 00:05:30,600
that what we're doing is something can

147
00:05:30,600 --> 00:05:32,580
be reasoned about

148
00:05:32,580 --> 00:05:35,039
and there's different ways as well when

149
00:05:35,039 --> 00:05:36,240
you look at the complexity of something

150
00:05:36,240 --> 00:05:39,180
so on here we have a very simple example

151
00:05:39,180 --> 00:05:40,860
of a line graph and you think okay well

152
00:05:40,860 --> 00:05:43,320
I can actually use two points X and Y in

153
00:05:43,320 --> 00:05:45,240
order to identify where where something

154
00:05:45,240 --> 00:05:48,840
is if you change your perspective uh you

155
00:05:48,840 --> 00:05:50,160
actually only need one number because

156
00:05:50,160 --> 00:05:52,440
you could say well let's angle ourselves

157
00:05:52,440 --> 00:05:53,880
in such a way that we only need one

158
00:05:53,880 --> 00:05:55,440
number in order to identify where things

159
00:05:55,440 --> 00:05:58,560
where things are actually at so part of

160
00:05:58,560 --> 00:05:59,880
what we're looking at is well how do we

161
00:05:59,880 --> 00:06:01,560
change our perspective a little bit in

162
00:06:01,560 --> 00:06:03,660
the software supply chain so that we

163
00:06:03,660 --> 00:06:06,120
could see if there's some way we can

164
00:06:06,120 --> 00:06:07,979
simplify the problem a little bit a

165
00:06:07,979 --> 00:06:09,840
little bit further and that was part of

166
00:06:09,840 --> 00:06:10,979
what we were asking a question on with

167
00:06:10,979 --> 00:06:12,180
with omnivore we actually had a little

168
00:06:12,180 --> 00:06:13,380
bit something a little bit more complex

169
00:06:13,380 --> 00:06:14,880
we worked out if we make it a little bit

170
00:06:14,880 --> 00:06:16,919
smaller a little bit smaller uh there's

171
00:06:16,919 --> 00:06:18,300
you know what what actually gets to the

172
00:06:18,300 --> 00:06:20,280
heart of what we want to do

173
00:06:20,280 --> 00:06:22,620
so there's three simple questions that

174
00:06:22,620 --> 00:06:25,080
we uh that we ran that we came across

175
00:06:25,080 --> 00:06:27,060
the first one is what is the identity of

176
00:06:27,060 --> 00:06:28,680
something like what it by identity I

177
00:06:28,680 --> 00:06:30,840
don't mean like this is the uh the URI

178
00:06:30,840 --> 00:06:33,539
or URL of the package or this is the

179
00:06:33,539 --> 00:06:35,160
human name we give it like what is the

180
00:06:35,160 --> 00:06:37,740
canonical identity of what uh of what a

181
00:06:37,740 --> 00:06:38,639
thing is

182
00:06:38,639 --> 00:06:41,280
dependency of is what is in the uh what

183
00:06:41,280 --> 00:06:43,139
is in the artifact

184
00:06:43,139 --> 00:06:45,840
metadata is things are not in the

185
00:06:45,840 --> 00:06:48,180
artifact that are not the identity of it

186
00:06:48,180 --> 00:06:49,740
but are something extra that we've

187
00:06:49,740 --> 00:06:51,060
learned about it so we have to have the

188
00:06:51,060 --> 00:06:53,520
ability to attach metadata to whatever

189
00:06:53,520 --> 00:06:55,319
whatever it is that we're doing a really

190
00:06:55,319 --> 00:06:56,520
good example of metadata could be

191
00:06:56,520 --> 00:06:58,800
something like the uh the license of a

192
00:06:58,800 --> 00:07:01,800
project uh could be who who compiled it

193
00:07:01,800 --> 00:07:04,139
is is metadata what what did your image

194
00:07:04,139 --> 00:07:05,280
scanner say about something is

195
00:07:05,280 --> 00:07:08,179
additional metadata

196
00:07:08,280 --> 00:07:10,979
so jumping more into identify to

197
00:07:10,979 --> 00:07:12,380
Identity

198
00:07:12,380 --> 00:07:16,440
we asked what is what is a software Art

199
00:07:16,440 --> 00:07:18,600
Attack artifact

200
00:07:18,600 --> 00:07:20,819
so an artifact in this scenario is any

201
00:07:20,819 --> 00:07:23,520
software object that is of Interest one

202
00:07:23,520 --> 00:07:25,860
thing that all software artifacts up to

203
00:07:25,860 --> 00:07:27,479
now have in common and who knows maybe

204
00:07:27,479 --> 00:07:29,039
in the far future this will change but

205
00:07:29,039 --> 00:07:30,660
something all happened in common right

206
00:07:30,660 --> 00:07:32,580
now is that they're represented as a

207
00:07:32,580 --> 00:07:34,440
byte of arrays it doesn't matter whether

208
00:07:34,440 --> 00:07:36,419
using source code or object files jar

209
00:07:36,419 --> 00:07:39,780
files python or python C

210
00:07:39,780 --> 00:07:42,660
Deb bmrpms oci images they're all

211
00:07:42,660 --> 00:07:44,880
they're all represented as a buy as an

212
00:07:44,880 --> 00:07:46,800
array of bytes

213
00:07:46,800 --> 00:07:48,539
so we say the two artifacts are

214
00:07:48,539 --> 00:07:51,599
equivalent if and only if the byte array

215
00:07:51,599 --> 00:07:54,780
of one is equal to the byte array of the

216
00:07:54,780 --> 00:07:56,819
second so with this this gives us a

217
00:07:56,819 --> 00:07:59,039
sense as to what a unique of a unique

218
00:07:59,039 --> 00:08:00,300
artifact ID

219
00:08:00,300 --> 00:08:01,800
of course it'd be terrible to stick the

220
00:08:01,800 --> 00:08:03,780
whole application in a nest bomb so we

221
00:08:03,780 --> 00:08:04,620
have to do something a little bit

222
00:08:04,620 --> 00:08:05,720
smarter

223
00:08:05,720 --> 00:08:07,860
but in general there's three properties

224
00:08:07,860 --> 00:08:09,840
it's canonical independent parties

225
00:08:09,840 --> 00:08:11,280
presented with equivalent artifacts can

226
00:08:11,280 --> 00:08:13,500
derive the same identity that they are

227
00:08:13,500 --> 00:08:15,180
unique in that two non-equivalent

228
00:08:15,180 --> 00:08:17,220
artifacts have a separate and distinct

229
00:08:17,220 --> 00:08:19,080
identity and that it is immutable that

230
00:08:19,080 --> 00:08:20,580
once you have the identity of something

231
00:08:20,580 --> 00:08:22,440
it's not going to shift into something

232
00:08:22,440 --> 00:08:24,180
else so these are the three properties

233
00:08:24,180 --> 00:08:26,639
we're looking for

234
00:08:26,639 --> 00:08:29,220
some identity non-solutions that we ran

235
00:08:29,220 --> 00:08:31,800
into was you'll often see many things

236
00:08:31,800 --> 00:08:33,539
that is actually prevalent in many

237
00:08:33,539 --> 00:08:36,000
s-bomb uh when people think of s-bombs

238
00:08:36,000 --> 00:08:37,679
it's like well the file name the file

239
00:08:37,679 --> 00:08:39,059
name is the identity of the thing well

240
00:08:39,059 --> 00:08:40,799
file data is actually metadata it's not

241
00:08:40,799 --> 00:08:42,779
actually the identity of it because your

242
00:08:42,779 --> 00:08:44,820
file name can change I can change food.c

243
00:08:44,820 --> 00:08:47,940
to be bar.c or I can actually change

244
00:08:47,940 --> 00:08:50,040
what's in foo.c to something else and so

245
00:08:50,040 --> 00:08:52,019
now the the identity should should

246
00:08:52,019 --> 00:08:53,880
change if I move it to a different

247
00:08:53,880 --> 00:08:56,279
directory does as it changed or what if

248
00:08:56,279 --> 00:08:58,080
I take that file and just stick the

249
00:08:58,080 --> 00:09:00,959
entire contents into uh into a data into

250
00:09:00,959 --> 00:09:02,100
a database somewhere where there's no

251
00:09:02,100 --> 00:09:05,100
file name like so it finally is not

252
00:09:05,100 --> 00:09:06,839
quite not quite there they're they're

253
00:09:06,839 --> 00:09:08,459
good for locating things but they're not

254
00:09:08,459 --> 00:09:10,740
that is not good for defining the

255
00:09:10,740 --> 00:09:12,320
identity of something

256
00:09:12,320 --> 00:09:15,440
the same problem is with URLs

257
00:09:15,440 --> 00:09:18,000
PRL is a little bit better and than just

258
00:09:18,000 --> 00:09:19,800
the URL but it still has the same the

259
00:09:19,800 --> 00:09:21,240
same set of problems you're looking at

260
00:09:21,240 --> 00:09:22,860
the location of where something is which

261
00:09:22,860 --> 00:09:24,959
is a hugely valuable thing but is not

262
00:09:24,959 --> 00:09:28,980
the identity of of an uh of an artifact

263
00:09:28,980 --> 00:09:31,080
um the minimum elements of an s-bomb uh

264
00:09:31,080 --> 00:09:33,600
which uh I am actually a fan of I know a

265
00:09:33,600 --> 00:09:35,519
lot of people rail against them but the

266
00:09:35,519 --> 00:09:36,839
reason I'm a fan of them is because

267
00:09:36,839 --> 00:09:38,459
they're very simple there's something

268
00:09:38,459 --> 00:09:40,680
that companies can do today that move

269
00:09:40,680 --> 00:09:43,080
the needle but also sets them up so if

270
00:09:43,080 --> 00:09:44,339
they can do this and then they can do a

271
00:09:44,339 --> 00:09:45,899
little bit more next time and then they

272
00:09:45,899 --> 00:09:47,220
can do a little bit more of this year or

273
00:09:47,220 --> 00:09:48,720
next year and so on so it actually gets

274
00:09:48,720 --> 00:09:50,459
them in a baseline we can increase that

275
00:09:50,459 --> 00:09:52,860
Baseline over time but that being said

276
00:09:52,860 --> 00:09:54,660
it's not an identity it doesn't actually

277
00:09:54,660 --> 00:09:55,860
provide you and especially when you look

278
00:09:55,860 --> 00:09:57,660
at the kernel versions like I have

279
00:09:57,660 --> 00:10:03,120
kernel version 1 5 17 3. I compile it

280
00:10:03,120 --> 00:10:04,380
you compile the same version we're

281
00:10:04,380 --> 00:10:05,399
actually coming up with two different

282
00:10:05,399 --> 00:10:08,100
pieces of software because uh in general

283
00:10:08,100 --> 00:10:10,740
there's maybe around 3 000 line or three

284
00:10:10,740 --> 00:10:12,000
thousand files that actually get used

285
00:10:12,000 --> 00:10:13,560
and depending on how I configure it and

286
00:10:13,560 --> 00:10:15,180
how you configure it you're going to get

287
00:10:15,180 --> 00:10:17,100
two different outcomes and that's

288
00:10:17,100 --> 00:10:18,779
assuming that the bills are also

289
00:10:18,779 --> 00:10:20,820
deterministic as well so we'll ignore

290
00:10:20,820 --> 00:10:22,560
the term like you can ignore determinism

291
00:10:22,560 --> 00:10:26,160
uh rather pretend it's all deterministic

292
00:10:26,160 --> 00:10:29,600
and you still have the same problem

293
00:10:29,820 --> 00:10:33,980
which makes which makes us all sad

294
00:10:35,940 --> 00:10:38,399
so it turns out that we already have a

295
00:10:38,399 --> 00:10:40,680
an interesting solution for identity so

296
00:10:40,680 --> 00:10:43,080
if you look at git git actually computes

297
00:10:43,080 --> 00:10:45,240
an object ID to be the uh the identity

298
00:10:45,240 --> 00:10:47,579
and what it you have this algorithm

299
00:10:47,579 --> 00:10:49,500
called the gitode

300
00:10:49,500 --> 00:10:51,959
um and so in terms of a getoid it takes

301
00:10:51,959 --> 00:10:53,459
the contents of that and it generates a

302
00:10:53,459 --> 00:10:57,060
20 byte hash or uh I should say 160 bit

303
00:10:57,060 --> 00:11:00,480
hash which is a size of a shot one

304
00:11:00,480 --> 00:11:03,540
there is work to turn it into shot two I

305
00:11:03,540 --> 00:11:04,800
know that violates the immutable

306
00:11:04,800 --> 00:11:07,320
immutability project uh property you

307
00:11:07,320 --> 00:11:08,459
were talking about before

308
00:11:08,459 --> 00:11:11,040
we actually have a solution for that

309
00:11:11,040 --> 00:11:12,420
that we've included in the spec but

310
00:11:12,420 --> 00:11:15,060
that's but we'll get into that later uh

311
00:11:15,060 --> 00:11:17,700
in short the it has a solution towards

312
00:11:17,700 --> 00:11:19,680
that which is basically that you have a

313
00:11:19,680 --> 00:11:21,899
goodoid that getoid ends up in a file

314
00:11:21,899 --> 00:11:24,420
system which happens to be the git uh

315
00:11:24,420 --> 00:11:26,399
object repository itself and everything

316
00:11:26,399 --> 00:11:28,079
inside of that is identified by their

317
00:11:28,079 --> 00:11:29,339
gitoid

318
00:11:29,339 --> 00:11:31,740
and so what we did with omnibor to

319
00:11:31,740 --> 00:11:35,100
really dive into this is we set up the

320
00:11:35,100 --> 00:11:38,339
identity where you and you have you have

321
00:11:38,339 --> 00:11:40,860
an artifact and that artifact is you

322
00:11:40,860 --> 00:11:43,079
have an omni board document and that the

323
00:11:43,079 --> 00:11:45,720
omnivore document itself you say like a

324
00:11:45,720 --> 00:11:48,240
specific file is identified by its

325
00:11:48,240 --> 00:11:50,279
ghettoid went into the creation of a

326
00:11:50,279 --> 00:11:52,860
particular of a particular object

327
00:11:52,860 --> 00:11:55,500
so so you have identity of that object

328
00:11:55,500 --> 00:11:57,000
and the and the identity of the things

329
00:11:57,000 --> 00:11:59,399
that went into that object so that's the

330
00:11:59,399 --> 00:12:01,079
example of the lowest one right here you

331
00:12:01,079 --> 00:12:03,720
have uh getoid of each of each file

332
00:12:03,720 --> 00:12:05,700
those all get wrapped up into whatever

333
00:12:05,700 --> 00:12:07,500
uh whatever those things came together

334
00:12:07,500 --> 00:12:09,600
to produce ends up with its own gitode

335
00:12:09,600 --> 00:12:13,200
that is unique to to itself and uh and

336
00:12:13,200 --> 00:12:15,360
that's then represented as part of uh as

337
00:12:15,360 --> 00:12:17,579
part of the dependency graph the same

338
00:12:17,579 --> 00:12:18,899
thing happens when you go further up

339
00:12:18,899 --> 00:12:21,839
where you have uh you have an omnibor

340
00:12:21,839 --> 00:12:23,880
document that is consumed by another

341
00:12:23,880 --> 00:12:25,560
omnivore documents as you get more

342
00:12:25,560 --> 00:12:27,860
hierarchy you say that the particular

343
00:12:27,860 --> 00:12:30,959
blob of a particular item is represented

344
00:12:30,959 --> 00:12:33,420
by a omnivore getoid of that particular

345
00:12:33,420 --> 00:12:34,920
thing so what this does is it gives us a

346
00:12:34,920 --> 00:12:37,100
graph like you can think of it like a

347
00:12:37,100 --> 00:12:41,820
uh I I often call the the Bor a a bag of

348
00:12:41,820 --> 00:12:43,980
receipts of cryptographic receipts uh

349
00:12:43,980 --> 00:12:45,779
because at that point it's what you're

350
00:12:45,779 --> 00:12:47,279
doing is you have a set of identity uh

351
00:12:47,279 --> 00:12:49,440
you have a a tree of identities or a dag

352
00:12:49,440 --> 00:12:51,600
of identity uh of things that you that

353
00:12:51,600 --> 00:12:52,680
you use in order to build that

354
00:12:52,680 --> 00:12:55,079
particular system

355
00:12:55,079 --> 00:12:58,980
so uh git is a is a Mercury masquerading

356
00:12:58,980 --> 00:13:02,519
as a VCS as a as a versioning uh uh as a

357
00:13:02,519 --> 00:13:04,800
version control system so does everyone

358
00:13:04,800 --> 00:13:06,180
know what a Merkle tree is is there any

359
00:13:06,180 --> 00:13:07,380
people who don't know what a Merkle tree

360
00:13:07,380 --> 00:13:08,360
is

361
00:13:08,360 --> 00:13:11,880
okay so a Merkle tree is a is a special

362
00:13:11,880 --> 00:13:15,620
kind of tree that is defined as

363
00:13:15,620 --> 00:13:18,720
if you have a hash of all of the chil of

364
00:13:18,720 --> 00:13:20,760
all the uh of all the sub trees you have

365
00:13:20,760 --> 00:13:22,260
a tree that has several sub trees

366
00:13:22,260 --> 00:13:23,279
underneath of it and you take the hash

367
00:13:23,279 --> 00:13:25,920
of those sub trees and those uh those

368
00:13:25,920 --> 00:13:28,740
sub trees themselves have Leaf elements

369
00:13:28,740 --> 00:13:30,060
and those Leaf elements also have their

370
00:13:30,060 --> 00:13:31,019
own set of half so you're looking at

371
00:13:31,019 --> 00:13:35,220
hashes all uh in such a way that that if

372
00:13:35,220 --> 00:13:37,620
you change a file it only changes that

373
00:13:37,620 --> 00:13:39,600
file all of the parents of that

374
00:13:39,600 --> 00:13:41,339
particular file going up to the to the

375
00:13:41,339 --> 00:13:43,019
root so that way you don't change most

376
00:13:43,019 --> 00:13:45,600
most of the most of the dag you only see

377
00:13:45,600 --> 00:13:48,420
in the in the representation the changes

378
00:13:48,420 --> 00:13:51,480
of the uh of the leaf element that was

379
00:13:51,480 --> 00:13:53,880
changed and the parents moving moving up

380
00:13:53,880 --> 00:13:55,500
to up to the roots with like minimum

381
00:13:55,500 --> 00:13:57,480
amount of changes you can make uh

382
00:13:57,480 --> 00:13:59,339
generally from a growth perspective the

383
00:13:59,339 --> 00:14:01,500
the growth the growth of changes over

384
00:14:01,500 --> 00:14:04,200
time each change might change maybe a

385
00:14:04,200 --> 00:14:06,000
log it's a logarithmic based upon the

386
00:14:06,000 --> 00:14:07,260
quantity of data you have in it so it's

387
00:14:07,260 --> 00:14:09,300
very efficient it's the reason why I

388
00:14:09,300 --> 00:14:10,980
used to get up in the in the morning I'd

389
00:14:10,980 --> 00:14:13,200
go to work uh I would hit SVN update I

390
00:14:13,200 --> 00:14:14,579
go have breakfast come back watch it

391
00:14:14,579 --> 00:14:16,920
finish uh it was all ruined by git

392
00:14:16,920 --> 00:14:19,320
because I did get it I would I would do

393
00:14:19,320 --> 00:14:20,940
my get pull and then like five seconds

394
00:14:20,940 --> 00:14:22,920
later I can't take my breakfast that

395
00:14:22,920 --> 00:14:23,880
fast

396
00:14:23,880 --> 00:14:26,880
so uh Merkle trees are the is the magic

397
00:14:26,880 --> 00:14:27,959
behind it

398
00:14:27,959 --> 00:14:30,540
and so

399
00:14:30,540 --> 00:14:33,480
uh so git uses that it uses the uh the

400
00:14:33,480 --> 00:14:36,839
gitode as the uh as the identifier

401
00:14:36,839 --> 00:14:39,120
so you uh now that we have this like

402
00:14:39,120 --> 00:14:41,100
dependency graph we don't ask the

403
00:14:41,100 --> 00:14:43,139
question what is in the artifact

404
00:14:43,139 --> 00:14:45,540
so in this scenario uh we have the

405
00:14:45,540 --> 00:14:48,060
identity of a C file maybe some headers

406
00:14:48,060 --> 00:14:50,100
and those go through a compiler you

407
00:14:50,100 --> 00:14:52,800
releases out it generates an object so

408
00:14:52,800 --> 00:14:54,300
we want to capture that information and

409
00:14:54,300 --> 00:14:55,500
then and the same with the other side so

410
00:14:55,500 --> 00:14:56,760
we now have two object files and then

411
00:14:56,760 --> 00:14:58,800
those get linked together to create an

412
00:14:58,800 --> 00:15:00,240
executable

413
00:15:00,240 --> 00:15:01,800
it's actually more complex than that

414
00:15:01,800 --> 00:15:03,660
because you also have shared objects

415
00:15:03,660 --> 00:15:05,459
that may already be present on the

416
00:15:05,459 --> 00:15:06,839
system so when you run it when you run

417
00:15:06,839 --> 00:15:08,339
an application it's not just the

418
00:15:08,339 --> 00:15:10,199
executable image it's also all of the

419
00:15:10,199 --> 00:15:11,579
additional dependencies that were in the

420
00:15:11,579 --> 00:15:12,959
environment that get pulled into it

421
00:15:12,959 --> 00:15:16,260
through your through your uh through

422
00:15:16,260 --> 00:15:17,880
your operating system which also have

423
00:15:17,880 --> 00:15:18,959
their own set of things so each of these

424
00:15:18,959 --> 00:15:22,019
can be represented by by a omnibar and

425
00:15:22,019 --> 00:15:24,480
that omnibar at the top uh you could you

426
00:15:24,480 --> 00:15:26,279
could then generate something so it's

427
00:15:26,279 --> 00:15:28,500
not just for things that are static at

428
00:15:28,500 --> 00:15:30,720
rest but also you could use it to

429
00:15:30,720 --> 00:15:33,180
represent things that when you run give

430
00:15:33,180 --> 00:15:34,620
you something that that gives you a

431
00:15:34,620 --> 00:15:37,139
little bit more information

432
00:15:37,139 --> 00:15:39,240
um also works in other environments like

433
00:15:39,240 --> 00:15:42,000
in Java everything is is linked in

434
00:15:42,000 --> 00:15:43,800
dynamically there's no there's no

435
00:15:43,800 --> 00:15:45,899
concept of statically compiling things

436
00:15:45,899 --> 00:15:48,000
once you once you cross class divides

437
00:15:48,000 --> 00:15:49,800
the class files

438
00:15:49,800 --> 00:15:52,860
so the same pattern works for for things

439
00:15:52,860 --> 00:15:56,220
like Java or other or other systems so

440
00:15:56,220 --> 00:15:57,720
we take this and what we did is we

441
00:15:57,720 --> 00:15:59,399
generalized it and we said we have this

442
00:15:59,399 --> 00:16:01,079
executable goes back to what you saw

443
00:16:01,079 --> 00:16:03,060
before with omnivore so we generalize

444
00:16:03,060 --> 00:16:06,300
that particular that particular path

445
00:16:06,300 --> 00:16:08,579
so in short you were able to use those

446
00:16:08,579 --> 00:16:11,760
getoids as artifact IDs to represent the

447
00:16:11,760 --> 00:16:13,740
whole set of dependencies that come

448
00:16:13,740 --> 00:16:16,160
along with it

449
00:16:16,440 --> 00:16:19,440
um and so when we mentioned so going

450
00:16:19,440 --> 00:16:22,079
back to this like uh just to repeat uh

451
00:16:22,079 --> 00:16:23,459
you have your artifact like this

452
00:16:23,459 --> 00:16:24,899
particular artifact has two entries so

453
00:16:24,899 --> 00:16:26,160
you see a blob you have the getaway

454
00:16:26,160 --> 00:16:27,959
that's attached to it and then you have

455
00:16:27,959 --> 00:16:30,600
an artifact with artifact three has its

456
00:16:30,600 --> 00:16:32,040
own Omni board that's attached to it as

457
00:16:32,040 --> 00:16:34,380
well in lexical order so that way you

458
00:16:34,380 --> 00:16:36,899
get a canonicalized uh view of it so

459
00:16:36,899 --> 00:16:38,339
you're not you're not guessing as to

460
00:16:38,339 --> 00:16:39,779
like what orders did I see things

461
00:16:39,779 --> 00:16:42,480
everything is is explicitly ordered by

462
00:16:42,480 --> 00:16:45,000
by lexical

463
00:16:45,000 --> 00:16:46,860
so this brings the question of metadata

464
00:16:46,860 --> 00:16:50,279
what is known about it so there was a

465
00:16:50,279 --> 00:16:51,839
great comment that was put together by

466
00:16:51,839 --> 00:16:54,839
by Jeff who's another omnibor uh

467
00:16:54,839 --> 00:16:57,060
Community member and uh

468
00:16:57,060 --> 00:17:00,060
he and contributor he said an s-bomb is

469
00:17:00,060 --> 00:17:01,860
a format for organizing metadata that

470
00:17:01,860 --> 00:17:04,380
describes the makeup of software

471
00:17:04,380 --> 00:17:08,059
artifacts so in other words

472
00:17:08,059 --> 00:17:10,439
omnibor is specifically about the

473
00:17:10,439 --> 00:17:12,660
identity of things it's not a it's it's

474
00:17:12,660 --> 00:17:14,699
not about how do you store the uh the

475
00:17:14,699 --> 00:17:16,140
metadata but we still have this metadata

476
00:17:16,140 --> 00:17:17,939
we have to we have to look at

477
00:17:17,939 --> 00:17:19,859
so we have dependencies all the stuff in

478
00:17:19,859 --> 00:17:22,439
Orange is stuff that is within omnibor

479
00:17:22,439 --> 00:17:24,540
and you have all of the purple stuff on

480
00:17:24,540 --> 00:17:27,720
the side that is uh that is metadata

481
00:17:27,720 --> 00:17:32,400
so what what we are looking at as a

482
00:17:32,400 --> 00:17:34,919
pattern is that the metadata can use the

483
00:17:34,919 --> 00:17:38,880
getoids in the orange boxes to decorate

484
00:17:38,880 --> 00:17:40,980
the tree so you might you'll have an a

485
00:17:40,980 --> 00:17:42,840
separate database where one of them

486
00:17:42,840 --> 00:17:45,179
might be I ran an image scanner another

487
00:17:45,179 --> 00:17:47,340
one might be I ran something that checks

488
00:17:47,340 --> 00:17:49,080
licenses a third one might be something

489
00:17:49,080 --> 00:17:51,600
like who compiled it and gave it to me

490
00:17:51,600 --> 00:17:53,940
so you have this metadata that's that

491
00:17:53,940 --> 00:17:55,320
sits to the side and that metadata is

492
00:17:55,320 --> 00:17:57,600
actually can be dynamic because I run an

493
00:17:57,600 --> 00:17:59,160
image scanner today I run it again six

494
00:17:59,160 --> 00:18:00,600
months from now it's probably going to

495
00:18:00,600 --> 00:18:01,940
change

496
00:18:01,940 --> 00:18:04,440
unless it's a very simple program that

497
00:18:04,440 --> 00:18:07,160
uh that's yeah it'll change

498
00:18:07,160 --> 00:18:10,140
so so in short we we want to make sure

499
00:18:10,140 --> 00:18:12,000
we can keep this separate but use the

500
00:18:12,000 --> 00:18:15,539
use the Omni bore graph as the

501
00:18:15,539 --> 00:18:17,340
identifier in order to in order to work

502
00:18:17,340 --> 00:18:19,860
to work out like what uh what what is

503
00:18:19,860 --> 00:18:22,799
the metadata apply to

504
00:18:22,799 --> 00:18:25,919
so uh getting back to the example from

505
00:18:25,919 --> 00:18:27,419
Jeff omnibor is the funnel left the

506
00:18:27,419 --> 00:18:29,160
stuff on the s-bomb is is on the right

507
00:18:29,160 --> 00:18:30,419
and we actually have been working with

508
00:18:30,419 --> 00:18:32,340
the various s-bomb vendors so for

509
00:18:32,340 --> 00:18:34,919
example in I believe it was spdx 2.3

510
00:18:34,919 --> 00:18:38,580
they've added support for for goodoids

511
00:18:38,580 --> 00:18:40,020
which then gives the ability to

512
00:18:40,020 --> 00:18:43,860
reference the the omnibor graph and that

513
00:18:43,860 --> 00:18:45,960
was our direct uh collaboration that we

514
00:18:45,960 --> 00:18:47,640
have with them

515
00:18:47,640 --> 00:18:49,080
so

516
00:18:49,080 --> 00:18:51,960
in that scenario it's it's also we're

517
00:18:51,960 --> 00:18:53,700
looking at what at what is known from a

518
00:18:53,700 --> 00:18:55,020
from a metadata but it's not enough to

519
00:18:55,020 --> 00:18:56,520
know what is known it's also important

520
00:18:56,520 --> 00:19:00,660
to know uh how how it is how it is known

521
00:19:00,660 --> 00:19:02,820
and more specifically once if you can

522
00:19:02,820 --> 00:19:04,620
understand how it's known you the

523
00:19:04,620 --> 00:19:06,660
question then is can you trust that

524
00:19:06,660 --> 00:19:08,640
information that's on there

525
00:19:08,640 --> 00:19:10,799
um so this part this particular section

526
00:19:10,799 --> 00:19:13,080
was written by uh by Ava and Ava's a

527
00:19:13,080 --> 00:19:16,980
major uh voice in terms of in terms of

528
00:19:16,980 --> 00:19:18,120
trust and

529
00:19:18,120 --> 00:19:20,280
uh I'll try to paraphrase the best

530
00:19:20,280 --> 00:19:21,660
because this was her part of the slides

531
00:19:21,660 --> 00:19:24,059
and now to paraphrase

532
00:19:24,059 --> 00:19:25,260
um when you look at something that's

533
00:19:25,260 --> 00:19:26,640
trust

534
00:19:26,640 --> 00:19:28,860
um trust is you have to look at what is

535
00:19:28,860 --> 00:19:30,440
it that you're trusting are you trusting

536
00:19:30,440 --> 00:19:33,120
uh the source code that's going into it

537
00:19:33,120 --> 00:19:35,160
uh or what something says are you

538
00:19:35,160 --> 00:19:37,320
trusting are you trusting it because I

539
00:19:37,320 --> 00:19:38,640
gave it to you are you trusting it

540
00:19:38,640 --> 00:19:42,360
because my signature is is on it uh like

541
00:19:42,360 --> 00:19:44,640
what is it really where we root that

542
00:19:44,640 --> 00:19:46,640
that trust in

543
00:19:46,640 --> 00:19:49,140
and signatures are a great example

544
00:19:49,140 --> 00:19:50,400
because something could be signed like

545
00:19:50,400 --> 00:19:52,140
how do you know what like what was

546
00:19:52,140 --> 00:19:53,760
behind that what was signed what what

547
00:19:53,760 --> 00:19:55,500
was in it like signatures give you an

548
00:19:55,500 --> 00:19:56,700
important piece of information but

549
00:19:56,700 --> 00:19:58,320
they're also very limited in terms of

550
00:19:58,320 --> 00:20:00,720
the total quantity information they can

551
00:20:00,720 --> 00:20:02,640
give you which then brings us back to

552
00:20:02,640 --> 00:20:04,860
our sad Kermit

553
00:20:04,860 --> 00:20:07,020
and by the way the the first time this

554
00:20:07,020 --> 00:20:10,020
image was used uh the contrast was way

555
00:20:10,020 --> 00:20:11,820
off in a previous presentation and it

556
00:20:11,820 --> 00:20:13,980
was like film Noir version of Kermit it

557
00:20:13,980 --> 00:20:16,559
was fantastic

558
00:20:16,559 --> 00:20:18,780
so when you ask a question of like what

559
00:20:18,780 --> 00:20:20,100
is trust because this can bring us

560
00:20:20,100 --> 00:20:21,299
towards actually helping answer that

561
00:20:21,299 --> 00:20:22,919
question

562
00:20:22,919 --> 00:20:24,780
um there was a person Dorothy Denning

563
00:20:24,780 --> 00:20:27,600
who wrote about the orange book uh back

564
00:20:27,600 --> 00:20:29,940
in uh back in the early 90s where the

565
00:20:29,940 --> 00:20:32,100
orange book said you can build a system

566
00:20:32,100 --> 00:20:35,160
that you can categorically trust uh as

567
00:20:35,160 --> 00:20:36,600
as like you can trust it because it's a

568
00:20:36,600 --> 00:20:38,640
property of how it was built

569
00:20:38,640 --> 00:20:39,960
um and Dorothy came forward and said

570
00:20:39,960 --> 00:20:42,120
trust is not a property but rather is an

571
00:20:42,120 --> 00:20:43,919
assessment based on experience a

572
00:20:43,919 --> 00:20:45,960
declaration made by an observer not a

573
00:20:45,960 --> 00:20:49,320
property of what of of of uh of what is

574
00:20:49,320 --> 00:20:50,880
being observed and this is super

575
00:20:50,880 --> 00:20:52,740
important because just because I give

576
00:20:52,740 --> 00:20:54,840
you something I and I say oh I used all

577
00:20:54,840 --> 00:20:56,280
these secure development practices in

578
00:20:56,280 --> 00:20:58,500
order to so you can trust it you can't

579
00:20:58,500 --> 00:21:01,260
trust it simply because I followed a set

580
00:21:01,260 --> 00:21:02,580
of patterns I said what you have to do

581
00:21:02,580 --> 00:21:04,740
is observe what's what's around it so

582
00:21:04,740 --> 00:21:06,120
part of the idea is like how do we give

583
00:21:06,120 --> 00:21:07,799
you that metadata how do we make sure we

584
00:21:07,799 --> 00:21:10,320
can link everything together and pull

585
00:21:10,320 --> 00:21:11,700
that information from from the places

586
00:21:11,700 --> 00:21:13,500
that have the ability to actually pull

587
00:21:13,500 --> 00:21:16,260
to give you the the best information

588
00:21:16,260 --> 00:21:18,780
and trust is also Mike Purcell wrote a

589
00:21:18,780 --> 00:21:20,700
book on uh trusting in computer system

590
00:21:20,700 --> 00:21:23,460
of which Ava was a editor on

591
00:21:23,460 --> 00:21:25,559
trust is time dependent as if I trust my

592
00:21:25,559 --> 00:21:27,240
my image scanner today but am I going to

593
00:21:27,240 --> 00:21:28,860
trust the output a year from now

594
00:21:28,860 --> 00:21:30,900
absolutely not it's asymmetrical and

595
00:21:30,900 --> 00:21:32,400
asymmetrical the best way I can describe

596
00:21:32,400 --> 00:21:33,900
this is the relationship you have with

597
00:21:33,900 --> 00:21:35,460
your bank is not the same relationship

598
00:21:35,460 --> 00:21:38,539
your bank has with you

599
00:21:38,580 --> 00:21:41,520
and so it's also contextual like you go

600
00:21:41,520 --> 00:21:43,140
into your bank you're going to have a

601
00:21:43,140 --> 00:21:44,460
different set of services that you trust

602
00:21:44,460 --> 00:21:46,260
them for than compared to like maybe you

603
00:21:46,260 --> 00:21:48,059
go into a doctor for a surgery or

604
00:21:48,059 --> 00:21:49,340
something similar

605
00:21:49,340 --> 00:21:52,440
so so it's contextual in that response

606
00:21:52,440 --> 00:21:53,820
the same goes with computer systems it's

607
00:21:53,820 --> 00:21:55,559
like it's time dependent asymmetrical

608
00:21:55,559 --> 00:21:57,659
and contextual

609
00:21:57,659 --> 00:22:00,179
um and so people often put their their

610
00:22:00,179 --> 00:22:02,400
trust into the into the bill tools and

611
00:22:02,400 --> 00:22:04,799
so but what we're looking at is if you

612
00:22:04,799 --> 00:22:05,880
look at what a build tool actually does

613
00:22:05,880 --> 00:22:08,159
a build a build tool will transforms

614
00:22:08,159 --> 00:22:11,039
your inputs to some to some output

615
00:22:11,039 --> 00:22:12,780
uh the problem is that you can scan the

616
00:22:12,780 --> 00:22:14,700
inputs and so this is where you scan the

617
00:22:14,700 --> 00:22:15,840
source code you say okay well that

618
00:22:15,840 --> 00:22:17,100
doesn't necessarily explain the output

619
00:22:17,100 --> 00:22:18,299
it helps give you a direction of whether

620
00:22:18,299 --> 00:22:19,500
the output can be it could definitely

621
00:22:19,500 --> 00:22:21,059
constrains it but you don't know exactly

622
00:22:21,059 --> 00:22:23,159
exactly what it is

623
00:22:23,159 --> 00:22:25,799
uh how about uh how about scanning the

624
00:22:25,799 --> 00:22:27,480
output so how many people here can say

625
00:22:27,480 --> 00:22:29,460
what kind of a pie this is is this an is

626
00:22:29,460 --> 00:22:32,580
it an apple pie or is this a is this

627
00:22:32,580 --> 00:22:36,120
pears I mean for for me if it's uh if it

628
00:22:36,120 --> 00:22:37,559
has coconut in it I'm probably gonna

629
00:22:37,559 --> 00:22:39,659
have a bad flavor that I'm not gonna

630
00:22:39,659 --> 00:22:43,080
like uh I got a I got a friend who uh if

631
00:22:43,080 --> 00:22:45,000
it's an apple pie it'll it'll need an

632
00:22:45,000 --> 00:22:47,580
EpiPen so knowing what's inside of it is

633
00:22:47,580 --> 00:22:48,900
super important the same goes with

634
00:22:48,900 --> 00:22:49,919
software you have to know what's inside

635
00:22:49,919 --> 00:22:51,840
of it a scanner gives you some

636
00:22:51,840 --> 00:22:53,159
information but it's not going to be

637
00:22:53,159 --> 00:22:56,100
absolutely perfect uh so what you want

638
00:22:56,100 --> 00:22:57,299
to try to do is you want to try to drive

639
00:22:57,299 --> 00:22:58,320
that to something that's a little bit

640
00:22:58,320 --> 00:22:59,580
more accurate in terms of what we can

641
00:22:59,580 --> 00:23:00,840
trust and we can actually trust the

642
00:23:00,840 --> 00:23:02,760
build tools so we look at the build

643
00:23:02,760 --> 00:23:04,080
tools the build tools will give us the

644
00:23:04,080 --> 00:23:05,280
information have have the information

645
00:23:05,280 --> 00:23:07,140
they have what was going into buy build

646
00:23:07,140 --> 00:23:09,059
tools I mean the compiler itself not

647
00:23:09,059 --> 00:23:12,780
Jenkins not Maven or the make file I

648
00:23:12,780 --> 00:23:14,520
specifically mean the build tool that is

649
00:23:14,520 --> 00:23:16,860
actually doing the transformation and so

650
00:23:16,860 --> 00:23:18,840
we can trust the we can trust the build

651
00:23:18,840 --> 00:23:20,700
tools to give us to give us more

652
00:23:20,700 --> 00:23:21,900
accurate information not to say that

653
00:23:21,900 --> 00:23:23,580
it's 100 perfect

654
00:23:23,580 --> 00:23:25,620
but it's the it is the best place where

655
00:23:25,620 --> 00:23:27,000
we can find that information at least

656
00:23:27,000 --> 00:23:28,559
get some form of attestation out of it

657
00:23:28,559 --> 00:23:31,260
in terms of like what's what uh C files

658
00:23:31,260 --> 00:23:33,299
with or what go files what headers what

659
00:23:33,299 --> 00:23:34,799
was what were the environment variables

660
00:23:34,799 --> 00:23:37,080
uh intermediates and so on

661
00:23:37,080 --> 00:23:39,960
and so the goal of omnivore is to be

662
00:23:39,960 --> 00:23:42,240
able to take that information from the

663
00:23:42,240 --> 00:23:44,039
build tools themselves and to be able to

664
00:23:44,039 --> 00:23:48,120
to create that artifact uh that uh dag

665
00:23:48,120 --> 00:23:50,280
so that we're able to then decorate that

666
00:23:50,280 --> 00:23:52,620
that bag with with information and we

667
00:23:52,620 --> 00:23:55,740
build that bag embed an ID for every for

668
00:23:55,740 --> 00:23:57,020
everything that's there in a language

669
00:23:57,020 --> 00:23:59,220
heterogeneous environment regardless of

670
00:23:59,220 --> 00:24:01,200
the packing formats regardless of and

671
00:24:01,200 --> 00:24:02,880
the key here is it has is it has to get

672
00:24:02,880 --> 00:24:04,380
to a point where there's no developer

673
00:24:04,380 --> 00:24:08,159
effort you run go build you run you run

674
00:24:08,159 --> 00:24:12,419
GCC you run a rest or cargo build like

675
00:24:12,419 --> 00:24:14,220
this is stuff that should that should

676
00:24:14,220 --> 00:24:15,600
just work it should just give you that

677
00:24:15,600 --> 00:24:17,039
information you can start decorating the

678
00:24:17,039 --> 00:24:19,380
the trees

679
00:24:19,380 --> 00:24:21,240
um and to to get to that answers to as

680
00:24:21,240 --> 00:24:23,820
to am I safe and part of it is that when

681
00:24:23,820 --> 00:24:25,260
you look at what actually went into it

682
00:24:25,260 --> 00:24:27,840
now that you have this information uh

683
00:24:27,840 --> 00:24:30,000
let's say deep down like several

684
00:24:30,000 --> 00:24:31,980
dependencies in you have this log for J

685
00:24:31,980 --> 00:24:35,280
that that was injected into your system

686
00:24:35,280 --> 00:24:36,659
um you have that information available

687
00:24:36,659 --> 00:24:38,340
because you have the metadata that was

688
00:24:38,340 --> 00:24:39,600
attached to it and you can say these

689
00:24:39,600 --> 00:24:40,980
ghettoids are known to have that

690
00:24:40,980 --> 00:24:43,500
vulnerability based upon where when the

691
00:24:43,500 --> 00:24:45,360
patch was in based upon when the version

692
00:24:45,360 --> 00:24:48,059
uh the version it was first found and so

693
00:24:48,059 --> 00:24:49,500
you can look and see whether or not

694
00:24:49,500 --> 00:24:51,840
those files were included as part of as

695
00:24:51,840 --> 00:24:53,640
part of the build and also in the future

696
00:24:53,640 --> 00:24:56,039
let's say uh six months or a year from

697
00:24:56,039 --> 00:24:58,679
now another vulnerability comes out the

698
00:24:58,679 --> 00:25:01,700
ability to tag those uh those particular

699
00:25:01,700 --> 00:25:07,260
uh getoids as uh as being unsafe is

700
00:25:07,260 --> 00:25:09,480
something that would be of huge use to

701
00:25:09,480 --> 00:25:13,380
to infrastructure and consumers so in

702
00:25:13,380 --> 00:25:16,080
short we have we have construction of

703
00:25:16,080 --> 00:25:17,880
multiple multiple systems actually this

704
00:25:17,880 --> 00:25:19,500
is an older deck we actually have two

705
00:25:19,500 --> 00:25:22,020
others that we have so we have go rust

706
00:25:22,020 --> 00:25:25,520
we have work going on in llbm bombsh

707
00:25:25,520 --> 00:25:29,520
there's also work going on in GCC as

708
00:25:29,520 --> 00:25:30,539
well

709
00:25:30,539 --> 00:25:32,460
so so we've been working with the

710
00:25:32,460 --> 00:25:33,659
compiler communities in order to get

711
00:25:33,659 --> 00:25:35,580
this stuff in with the with the

712
00:25:35,580 --> 00:25:36,960
expectation that if you're building

713
00:25:36,960 --> 00:25:39,179
tools you'll be able to use that those

714
00:25:39,179 --> 00:25:43,380
annotations to to generate the data

715
00:25:43,380 --> 00:25:44,520
um I'll make sure when this gets

716
00:25:44,520 --> 00:25:45,720
published I'll publish in the new

717
00:25:45,720 --> 00:25:46,980
version of it it has it has the

718
00:25:46,980 --> 00:25:49,320
additional two links on there uh and

719
00:25:49,320 --> 00:25:51,779
with that uh you're also welcome to to

720
00:25:51,779 --> 00:25:54,539
join and uh and get involved

721
00:25:54,539 --> 00:25:56,220
so first well I want to thank you all

722
00:25:56,220 --> 00:25:57,900
for your time and I don't know how much

723
00:25:57,900 --> 00:26:02,220
time we have left for questions so

724
00:26:02,220 --> 00:26:03,419
um does anyone know if we have time for

725
00:26:03,419 --> 00:26:05,600
questions

726
00:26:06,779 --> 00:26:08,520
seven minutes cool so are there any uh

727
00:26:08,520 --> 00:26:11,658
questions that we that we have

728
00:26:18,240 --> 00:26:20,700
okay that's a good question so non

729
00:26:20,700 --> 00:26:24,299
non-compiled we can take the uh the

730
00:26:24,299 --> 00:26:26,520
omnibor or the ghetto weights of the

731
00:26:26,520 --> 00:26:29,820
files themselves and uh and put them to

732
00:26:29,820 --> 00:26:31,200
put them together in terms of saying

733
00:26:31,200 --> 00:26:33,960
what uh what a package is what what a

734
00:26:33,960 --> 00:26:35,760
package is and also analyze so we still

735
00:26:35,760 --> 00:26:37,620
get some of the benefits of like I have

736
00:26:37,620 --> 00:26:39,000
a file that has an own vulnerability

737
00:26:39,000 --> 00:26:41,159
that I maybe pulled from another project

738
00:26:41,159 --> 00:26:43,260
and then uh be able to tell that that

739
00:26:43,260 --> 00:26:44,820
was an or maybe a dependency of when I

740
00:26:44,820 --> 00:26:48,299
compile in but

741
00:26:48,600 --> 00:26:50,220
um things like Python and symbol and

742
00:26:50,220 --> 00:26:51,720
Ruby and similar are a little bit more

743
00:26:51,720 --> 00:26:53,700
difficult and they have to work them

744
00:26:53,700 --> 00:26:57,120
into into that we've not worked with

745
00:26:57,120 --> 00:26:58,799
those particular communities just yet

746
00:26:58,799 --> 00:27:00,980
because we've been focusing primarily

747
00:27:00,980 --> 00:27:04,679
on the compiled ones but we definitely

748
00:27:04,679 --> 00:27:06,600
see ways that we can tie into it like

749
00:27:06,600 --> 00:27:08,220
maybe when you do a when you load in the

750
00:27:08,220 --> 00:27:09,900
python file or load in a ruby file you

751
00:27:09,900 --> 00:27:11,520
could check the getoid and check against

752
00:27:11,520 --> 00:27:13,980
a list and see whether or not you want

753
00:27:13,980 --> 00:27:17,400
to accept that or not that is uh that is

754
00:27:17,400 --> 00:27:19,919
work that has not been done yet so about

755
00:27:19,919 --> 00:27:21,539
that's an area of Interest we definitely

756
00:27:21,539 --> 00:27:24,860
would appreciate some some help there

757
00:27:33,600 --> 00:27:35,340
the question is whether we intend to

758
00:27:35,340 --> 00:27:37,559
capture the getaways of the build tools

759
00:27:37,559 --> 00:27:40,679
themselves so we're we're having some

760
00:27:40,679 --> 00:27:42,299
discussion on this because if you

761
00:27:42,299 --> 00:27:44,159
capture the build tools that does affect

762
00:27:44,159 --> 00:27:46,140
the the output and whether you want the

763
00:27:46,140 --> 00:27:48,000
zoo effect or not is sort of up in the

764
00:27:48,000 --> 00:27:49,640
is up in the air

765
00:27:49,640 --> 00:27:53,220
there is integration with that we've

766
00:27:53,220 --> 00:27:54,960
been looking at with a project called in

767
00:27:54,960 --> 00:27:57,179
Toto which captures those build tools

768
00:27:57,179 --> 00:28:00,000
are and I have an implementation of of

769
00:28:00,000 --> 00:28:02,820
in Toto that I've been working with to

770
00:28:02,820 --> 00:28:06,600
to capture the build tools as as getoid

771
00:28:06,600 --> 00:28:08,940
so we can get that information we can

772
00:28:08,940 --> 00:28:11,039
get that information out

773
00:28:11,039 --> 00:28:13,039
um

774
00:28:26,419 --> 00:28:28,860
so the question how do we establish the

775
00:28:28,860 --> 00:28:30,419
uh the trust of the information we that

776
00:28:30,419 --> 00:28:32,940
we captured there so so the first one is

777
00:28:32,940 --> 00:28:35,340
in terms of the in terms of the inputs

778
00:28:35,340 --> 00:28:38,159
and outputs so uh again that this is not

779
00:28:38,159 --> 00:28:40,380
designed to to solve all aspects of it

780
00:28:40,380 --> 00:28:42,000
so we're trying to solve a very specific

781
00:28:42,000 --> 00:28:44,159
problem within it but we need help from

782
00:28:44,159 --> 00:28:45,779
other tools in order to in order to

783
00:28:45,779 --> 00:28:47,940
capture that so uh I brought I mentioned

784
00:28:47,940 --> 00:28:50,460
the total one specifically because many

785
00:28:50,460 --> 00:28:52,799
of the in total systems are designed so

786
00:28:52,799 --> 00:28:55,020
that you can capture not only what

787
00:28:55,020 --> 00:28:56,880
process was ran in other words like I

788
00:28:56,880 --> 00:28:59,340
ran this Transformer or preprocessor I

789
00:28:59,340 --> 00:29:02,279
ran this compiler I ran this test and uh

790
00:29:02,279 --> 00:29:04,559
this is the group that built it that

791
00:29:04,559 --> 00:29:06,720
gets signed gets stuck into maybe a six

792
00:29:06,720 --> 00:29:08,760
door or something similar but there's

793
00:29:08,760 --> 00:29:09,779
also the question as to whether you

794
00:29:09,779 --> 00:29:12,179
could trust the uh the tool or not and

795
00:29:12,179 --> 00:29:14,279
part of there's a couple things towards

796
00:29:14,279 --> 00:29:15,539
this so one of them is when you're

797
00:29:15,539 --> 00:29:17,899
building out your CI CD system itself

798
00:29:17,899 --> 00:29:19,860
first you do want to try to keep that

799
00:29:19,860 --> 00:29:21,840
under are under control so that the

800
00:29:21,840 --> 00:29:23,279
limited people have access to it but

801
00:29:23,279 --> 00:29:24,740
simultaneously

802
00:29:24,740 --> 00:29:27,899
some of the in total tools one of the

803
00:29:27,899 --> 00:29:29,340
ones that I work on is a project called

804
00:29:29,340 --> 00:29:32,279
witness and have the ability to hook in

805
00:29:32,279 --> 00:29:36,919
with with analyzing what uh

806
00:29:36,919 --> 00:29:39,779
what files that the compiler open and

807
00:29:39,779 --> 00:29:42,299
what it to capture metadata on some of

808
00:29:42,299 --> 00:29:44,520
that stuff as well or maybe there are

809
00:29:44,520 --> 00:29:45,960
other system calls like make a

810
00:29:45,960 --> 00:29:47,520
connection out to

811
00:29:47,520 --> 00:29:49,320
to a network somewhere to be able to

812
00:29:49,320 --> 00:29:50,940
capture some of that so there's there

813
00:29:50,940 --> 00:29:52,799
are things there that help with some of

814
00:29:52,799 --> 00:29:54,840
that observability but at the end of the

815
00:29:54,840 --> 00:29:57,179
day if it's about should you run a

816
00:29:57,179 --> 00:29:59,100
particular piece of software or not you

817
00:29:59,100 --> 00:30:00,600
still have to root that trust into

818
00:30:00,600 --> 00:30:02,940
something and that something is is tied

819
00:30:02,940 --> 00:30:04,860
to do you trust the agent that that

820
00:30:04,860 --> 00:30:07,140
built it and do you trust the agent to

821
00:30:07,140 --> 00:30:09,240
uh to try to capture that that

822
00:30:09,240 --> 00:30:11,279
information effectively so you still

823
00:30:11,279 --> 00:30:12,960
have you still have that issue in terms

824
00:30:12,960 --> 00:30:15,480
of build trust so it's not designed to

825
00:30:15,480 --> 00:30:17,039
solve all the issues up and down the the

826
00:30:17,039 --> 00:30:18,960
space but it's designed to help give you

827
00:30:18,960 --> 00:30:20,399
additional information so you can make

828
00:30:20,399 --> 00:30:21,659
better decisions

829
00:30:21,659 --> 00:30:24,200
so

830
00:30:25,919 --> 00:30:28,500
um is there any other any other

831
00:30:28,500 --> 00:30:30,740
questions

832
00:30:32,100 --> 00:30:34,140
fantastic well thank you all for your

833
00:30:34,140 --> 00:30:36,659
time and I'll be around so if you have

834
00:30:36,659 --> 00:30:38,399
any questions you want to ask me in

835
00:30:38,399 --> 00:30:40,500
person uh while I'm here I'd be more

836
00:30:40,500 --> 00:30:42,930
than more than happy to answer

837
00:30:42,930 --> 00:30:47,229
[Applause]

