1
00:00:00,060 --> 00:00:02,820
I'm Greg this is Wes uh we're from

2
00:00:02,820 --> 00:00:03,780
Google we're going to talk about

3
00:00:03,780 --> 00:00:05,640
container patching today

4
00:00:05,640 --> 00:00:08,119
I actually really like the gum wall

5
00:00:08,119 --> 00:00:10,559
but I really wanted a Seattle theme talk

6
00:00:10,559 --> 00:00:12,660
so that's why there's some gumball in

7
00:00:12,660 --> 00:00:15,360
this it is gross though

8
00:00:15,360 --> 00:00:17,699
um so

9
00:00:17,699 --> 00:00:19,619
if we think about container patching at

10
00:00:19,619 --> 00:00:21,359
like a really very simplistic view

11
00:00:21,359 --> 00:00:22,859
you're trying to hit some sort of Target

12
00:00:22,859 --> 00:00:25,500
usually so I put fedramp Targets on here

13
00:00:25,500 --> 00:00:28,019
you may not be subject to those ones you

14
00:00:28,019 --> 00:00:30,119
might have PCI you might have no

15
00:00:30,119 --> 00:00:32,220
regulation you might just have sort of

16
00:00:32,220 --> 00:00:34,200
some vague notion of how quickly you

17
00:00:34,200 --> 00:00:36,300
want to patch things but the way sort of

18
00:00:36,300 --> 00:00:38,219
compliance thinks about patching

19
00:00:38,219 --> 00:00:40,020
deadlines is a scanner detects a thing

20
00:00:40,020 --> 00:00:43,260
you go patch it and then your production

21
00:00:43,260 --> 00:00:45,239
needs to be done within this whatever

22
00:00:45,239 --> 00:00:47,520
this time window is

23
00:00:47,520 --> 00:00:49,440
uh so let's just start with a little

24
00:00:49,440 --> 00:00:51,899
trip down empathy Lane uh so imagine

25
00:00:51,899 --> 00:00:54,899
you're the security person at an

26
00:00:54,899 --> 00:00:57,300
organization who's in charge of patching

27
00:00:57,300 --> 00:00:59,820
these production clusters uh or maybe

28
00:00:59,820 --> 00:01:01,680
more likely you're the developer who's

29
00:01:01,680 --> 00:01:03,420
been told you're now the security person

30
00:01:03,420 --> 00:01:05,760
who's patching these clusters

31
00:01:05,760 --> 00:01:07,560
um and so every two weeks you like go

32
00:01:07,560 --> 00:01:09,540
open up your dashboard and you look at

33
00:01:09,540 --> 00:01:11,520
like the stuff that's in there and

34
00:01:11,520 --> 00:01:13,140
you've sort of already lost two weeks on

35
00:01:13,140 --> 00:01:14,520
your timer here because there's been two

36
00:01:14,520 --> 00:01:16,080
weeks of vulnerabilities accumulating

37
00:01:16,080 --> 00:01:18,000
there while you weren't looking at it

38
00:01:18,000 --> 00:01:19,920
uh and so there's there's a couple of

39
00:01:19,920 --> 00:01:21,360
things in there there's a web front-end

40
00:01:21,360 --> 00:01:22,740
container that's missing a couple of

41
00:01:22,740 --> 00:01:24,540
critical patches and so you go hey web

42
00:01:24,540 --> 00:01:26,820
team like can you go please patch this

43
00:01:26,820 --> 00:01:29,280
uh container for me uh and of course

44
00:01:29,280 --> 00:01:30,720
like they ignore you feel weak and

45
00:01:30,720 --> 00:01:32,820
you're like hey what's up web team

46
00:01:32,820 --> 00:01:34,740
um I'd like to get this patched to my

47
00:01:34,740 --> 00:01:36,840
dashboard green please and they come

48
00:01:36,840 --> 00:01:38,700
back and like oh actually it's not

49
00:01:38,700 --> 00:01:40,320
really our code this looks like it might

50
00:01:40,320 --> 00:01:43,320
be the Django based container so

51
00:01:43,320 --> 00:01:45,299
you're like okay cool I know uh who

52
00:01:45,299 --> 00:01:47,159
maintains Django without orgo go talk to

53
00:01:47,159 --> 00:01:49,439
them so hey Django container team it

54
00:01:49,439 --> 00:01:50,520
looks like you have these critical

55
00:01:50,520 --> 00:01:52,439
patches missing can you patch a

56
00:01:52,439 --> 00:01:53,759
container please

57
00:01:53,759 --> 00:01:55,439
uh and then go away and look at it and

58
00:01:55,439 --> 00:01:56,759
they're like oh but this is Pearl like

59
00:01:56,759 --> 00:01:59,399
we don't even use Pearl like uh do we

60
00:01:59,399 --> 00:02:01,560
really need to patch this thing

61
00:02:01,560 --> 00:02:04,560
and so you're like yeah look look I just

62
00:02:04,560 --> 00:02:07,740
want my dashboard to be green uh so uh

63
00:02:07,740 --> 00:02:10,139
yes or but even better just get rid of

64
00:02:10,139 --> 00:02:11,280
it so we never have to have this

65
00:02:11,280 --> 00:02:13,020
conversation again

66
00:02:13,020 --> 00:02:15,300
um and uh by this point you're out of

67
00:02:15,300 --> 00:02:18,260
your SLO uh so uh things are not happy

68
00:02:18,260 --> 00:02:20,459
uh but like eventually they come back

69
00:02:20,459 --> 00:02:22,260
and like well I we couldn't figure out

70
00:02:22,260 --> 00:02:24,060
how to remove it so we patched it I

71
00:02:24,060 --> 00:02:25,260
guess we'll have this conversation again

72
00:02:25,260 --> 00:02:28,560
and uh all right great okay so now

73
00:02:28,560 --> 00:02:30,120
that's patched so you go back to the web

74
00:02:30,120 --> 00:02:32,099
team like hey web team uh please go

75
00:02:32,099 --> 00:02:34,860
rebuild with this Django container uh

76
00:02:34,860 --> 00:02:36,480
and they're like okay yeah we did it and

77
00:02:36,480 --> 00:02:37,500
yeah I could

78
00:02:37,500 --> 00:02:39,180
uh but then you go look at the dashboard

79
00:02:39,180 --> 00:02:41,040
and it's still the old version I'm like

80
00:02:41,040 --> 00:02:43,980
ah and you go back to the web team and

81
00:02:43,980 --> 00:02:45,720
they're like oh yeah we forgot to update

82
00:02:45,720 --> 00:02:47,640
the kubernetes Manifest so we patched

83
00:02:47,640 --> 00:02:48,959
the docker container but we didn't

84
00:02:48,959 --> 00:02:50,519
update the Manifest the points of the

85
00:02:50,519 --> 00:02:52,620
container now it's really done and you

86
00:02:52,620 --> 00:02:53,819
go to look at it you're like oh actually

87
00:02:53,819 --> 00:02:56,580
no it's still not done and also now

88
00:02:56,580 --> 00:02:58,260
there's more High vulnerabilities so

89
00:02:58,260 --> 00:02:59,940
like we had these criticals we were

90
00:02:59,940 --> 00:03:01,200
trying to patch but like there's more

91
00:03:01,200 --> 00:03:04,560
vulnerabilities accumulating and uh and

92
00:03:04,560 --> 00:03:05,940
they're like oh yeah it had the soaking

93
00:03:05,940 --> 00:03:08,099
QA so we committed the Manifest change

94
00:03:08,099 --> 00:03:10,019
to the QA Branch but we didn't put it in

95
00:03:10,019 --> 00:03:12,659
the prod branch and so now it's done and

96
00:03:12,659 --> 00:03:13,980
you go look at it you're like okay it's

97
00:03:13,980 --> 00:03:14,879
fixed

98
00:03:14,879 --> 00:03:16,920
and then sort of a little voice in the

99
00:03:16,920 --> 00:03:18,540
back of your head is like well like I

100
00:03:18,540 --> 00:03:19,860
think we have other things that run

101
00:03:19,860 --> 00:03:21,840
Django but like that's not your problem

102
00:03:21,840 --> 00:03:23,220
so you're going to just move on with

103
00:03:23,220 --> 00:03:24,080
your day

104
00:03:24,080 --> 00:03:25,680
so

105
00:03:25,680 --> 00:03:28,440
why is this gross like it's not great uh

106
00:03:28,440 --> 00:03:30,000
so there's humans at every step there's

107
00:03:30,000 --> 00:03:31,920
a human has to notice a thing human has

108
00:03:31,920 --> 00:03:33,599
to go tell another human to do a thing

109
00:03:33,599 --> 00:03:35,879
we don't know which layer we're patching

110
00:03:35,879 --> 00:03:37,500
we don't have any inventory of

111
00:03:37,500 --> 00:03:39,480
containers we're patching code that

112
00:03:39,480 --> 00:03:42,299
we're not using and the vulnerabilities

113
00:03:42,299 --> 00:03:44,519
are just accumulating faster than we can

114
00:03:44,519 --> 00:03:46,739
like pay them down so it just means this

115
00:03:46,739 --> 00:03:49,140
whole thing is like slow it's incomplete

116
00:03:49,140 --> 00:03:52,040
it's not going to scale

117
00:03:52,260 --> 00:03:54,260
um

118
00:03:55,019 --> 00:03:57,840
so who thanks the majority of the

119
00:03:57,840 --> 00:04:01,940
industry is doing better than this today

120
00:04:03,599 --> 00:04:05,159
nobody

121
00:04:05,159 --> 00:04:07,260
no takers no takers all right that's

122
00:04:07,260 --> 00:04:09,299
what I expected

123
00:04:09,299 --> 00:04:12,540
so the next slide says uh so slim they

124
00:04:12,540 --> 00:04:15,420
ran a survey and 88 of their respondents

125
00:04:15,420 --> 00:04:17,699
were like it's challenging to ensure

126
00:04:17,699 --> 00:04:19,500
containerized applications are free from

127
00:04:19,500 --> 00:04:21,358
vulnerabilities uh and it might be

128
00:04:21,358 --> 00:04:23,940
stories like that one that I just told

129
00:04:23,940 --> 00:04:25,259
so we're going to talk a little bit

130
00:04:25,259 --> 00:04:26,880
about what what we did for gke

131
00:04:26,880 --> 00:04:28,440
containers we're going to talk about

132
00:04:28,440 --> 00:04:31,380
enforcement points we use other options

133
00:04:31,380 --> 00:04:33,840
that you could use and talk about these

134
00:04:33,840 --> 00:04:35,699
sort of four things prevent detect fix

135
00:04:35,699 --> 00:04:38,280
monitor which is kind of our way of

136
00:04:38,280 --> 00:04:40,440
thinking about this problem

137
00:04:40,440 --> 00:04:42,660
uh in terms of sort of what you can take

138
00:04:42,660 --> 00:04:44,040
away from this talk we're not really

139
00:04:44,040 --> 00:04:46,500
talking about the sort of vendor

140
00:04:46,500 --> 00:04:48,360
containers or managed service provider

141
00:04:48,360 --> 00:04:50,220
containers like gke where like we've

142
00:04:50,220 --> 00:04:51,540
been we're just going to patch our

143
00:04:51,540 --> 00:04:52,860
containers for you you don't need to

144
00:04:52,860 --> 00:04:55,500
worry about that so take this as a case

145
00:04:55,500 --> 00:04:57,419
study for like where you own containers

146
00:04:57,419 --> 00:04:59,460
or you own kubernetes manifest you need

147
00:04:59,460 --> 00:05:02,040
to update to point at rebuilt containers

148
00:05:02,040 --> 00:05:05,040
that's where this sort of applies

149
00:05:05,040 --> 00:05:06,960
uh what do we know uh we've been

150
00:05:06,960 --> 00:05:10,080
patching a few containers uh I guess a

151
00:05:10,080 --> 00:05:12,060
few thousand across gke in anthos and

152
00:05:12,060 --> 00:05:13,500
some other products

153
00:05:13,500 --> 00:05:16,139
uh but we have a a reasonable number of

154
00:05:16,139 --> 00:05:17,820
advantages so our environment helps

155
00:05:17,820 --> 00:05:22,560
quite a bit we mostly use golang we use

156
00:05:22,560 --> 00:05:24,300
a small number of container repositories

157
00:05:24,300 --> 00:05:27,060
and in uh in a certain number of

158
00:05:27,060 --> 00:05:30,660
Registries uh mandatory based images we

159
00:05:30,660 --> 00:05:31,800
have a fair bit of control over the

160
00:05:31,800 --> 00:05:33,660
release process so not everyone is in

161
00:05:33,660 --> 00:05:35,820
this situation so we're going to try and

162
00:05:35,820 --> 00:05:37,919
give examples of what we did but then

163
00:05:37,919 --> 00:05:40,020
also other ways to solve the same

164
00:05:40,020 --> 00:05:43,039
problems if you don't have these things

165
00:05:43,039 --> 00:05:45,960
uh really high level view of sort of

166
00:05:45,960 --> 00:05:48,600
container release pipeline

167
00:05:48,600 --> 00:05:51,199
so containers flow through the top here

168
00:05:51,199 --> 00:05:53,880
through repos and end up on a running

169
00:05:53,880 --> 00:05:56,280
cluster and kubernetes manifests and

170
00:05:56,280 --> 00:05:58,500
other yaml bits flow through the bottom

171
00:05:58,500 --> 00:06:00,419
and they both sort of converge on a

172
00:06:00,419 --> 00:06:02,820
cluster there and then it all feeds an

173
00:06:02,820 --> 00:06:04,979
inventory system

174
00:06:04,979 --> 00:06:06,840
and if you're running sort of one of the

175
00:06:06,840 --> 00:06:09,000
many scanners out there that are in the

176
00:06:09,000 --> 00:06:11,699
Showcase out there today you'll have

177
00:06:11,699 --> 00:06:14,100
some runtime detection and that'll

178
00:06:14,100 --> 00:06:15,419
probably give you some inventory as well

179
00:06:15,419 --> 00:06:17,039
too so if you go install a thing on a

180
00:06:17,039 --> 00:06:18,840
cluster you've at least got some runtime

181
00:06:18,840 --> 00:06:20,940
visibility of what's going on and you've

182
00:06:20,940 --> 00:06:22,680
got some inventory and that's a good

183
00:06:22,680 --> 00:06:23,400
start

184
00:06:23,400 --> 00:06:27,720
uh so uh I think to really get your sort

185
00:06:27,720 --> 00:06:29,220
of like a handle on this process you

186
00:06:29,220 --> 00:06:30,780
need to do a bit more though uh and the

187
00:06:30,780 --> 00:06:33,419
further left you go uh the the sort of

188
00:06:33,419 --> 00:06:36,479
uh the cheaper it is uh uh to to catch

189
00:06:36,479 --> 00:06:38,160
things earlier and so there's a whole

190
00:06:38,160 --> 00:06:39,900
whole bunch of other points here where

191
00:06:39,900 --> 00:06:40,860
you can

192
00:06:40,860 --> 00:06:42,600
um do some prevention work and that's

193
00:06:42,600 --> 00:06:45,680
what we're going to talk about next

194
00:06:46,380 --> 00:06:48,720
so uh problem is here just way too many

195
00:06:48,720 --> 00:06:51,060
containers way too many dependencies and

196
00:06:51,060 --> 00:06:52,620
if you have some sort of Target that

197
00:06:52,620 --> 00:06:53,699
you're trying to hit it's just really

198
00:06:53,699 --> 00:06:56,400
hard about reducing the volume somehow

199
00:06:56,400 --> 00:06:59,400
uh so the sort of standard strategy that

200
00:06:59,400 --> 00:07:01,800
you have probably heard from uh multiple

201
00:07:01,800 --> 00:07:04,199
people over the years is do things like

202
00:07:04,199 --> 00:07:05,880
this standardize on your base containers

203
00:07:05,880 --> 00:07:07,560
make those containers as small as

204
00:07:07,560 --> 00:07:09,300
possible the less code you have the less

205
00:07:09,300 --> 00:07:11,940
patching you do get rid of unused code

206
00:07:11,940 --> 00:07:14,039
wherever you can so if you can separate

207
00:07:14,039 --> 00:07:16,500
out build and run time and have those

208
00:07:16,500 --> 00:07:18,419
separate uh then that that can help a

209
00:07:18,419 --> 00:07:20,400
lot and there's really sort of two

210
00:07:20,400 --> 00:07:21,960
approaches to getting the small

211
00:07:21,960 --> 00:07:24,060
containers it's either start small so

212
00:07:24,060 --> 00:07:25,680
you start on scratch or you start on

213
00:07:25,680 --> 00:07:27,840
distress or one of these other like very

214
00:07:27,840 --> 00:07:31,560
minimal images or you uh sort of like

215
00:07:31,560 --> 00:07:33,240
install everything you want and then you

216
00:07:33,240 --> 00:07:36,120
slim it down using slim toolkit that

217
00:07:36,120 --> 00:07:37,380
sort of gets rid of the things that

218
00:07:37,380 --> 00:07:39,240
you're not actively using

219
00:07:39,240 --> 00:07:41,220
and the really hard part is just doing

220
00:07:41,220 --> 00:07:43,699
this everywhere consistently

221
00:07:43,699 --> 00:07:45,780
especially if you have a very diverse

222
00:07:45,780 --> 00:07:48,060
environment

223
00:07:48,060 --> 00:07:51,180
so what we did uh was we we basically

224
00:07:51,180 --> 00:07:52,620
standardized on display list as I said

225
00:07:52,620 --> 00:07:55,759
we're mostly golang so uh we have a

226
00:07:55,759 --> 00:07:58,440
distrostatic container that's just

227
00:07:58,440 --> 00:08:00,479
enough to run a go binary there's no

228
00:08:00,479 --> 00:08:02,280
shell no package manager it's like

229
00:08:02,280 --> 00:08:04,740
really minimal little container and so

230
00:08:04,740 --> 00:08:06,300
we standardize on that one for pretty

231
00:08:06,300 --> 00:08:08,520
much everything with a few exceptions

232
00:08:08,520 --> 00:08:10,259
and then another thing that we did that

233
00:08:10,259 --> 00:08:11,880
I think is also just a good practice if

234
00:08:11,880 --> 00:08:13,919
you can do it is to get everything into

235
00:08:13,919 --> 00:08:16,020
a single registry or a small number of

236
00:08:16,020 --> 00:08:18,599
repositories in in the registry and that

237
00:08:18,599 --> 00:08:20,160
just helps like you know everything's

238
00:08:20,160 --> 00:08:23,039
sort of in one place and it also that

239
00:08:23,039 --> 00:08:24,479
has a

240
00:08:24,479 --> 00:08:27,300
a good availability property too like if

241
00:08:27,300 --> 00:08:30,479
you're uh say you're running in gke it's

242
00:08:30,479 --> 00:08:34,260
your your GCR Google container registry

243
00:08:34,260 --> 00:08:35,760
or your artifact registry that Google

244
00:08:35,760 --> 00:08:38,339
runs is a lot closer network-wise than

245
00:08:38,339 --> 00:08:39,539
something that you have to sort of reach

246
00:08:39,539 --> 00:08:42,000
out over the internet too and so uh

247
00:08:42,000 --> 00:08:43,679
there's some availability advantages to

248
00:08:43,679 --> 00:08:46,020
just bringing that uh putting all your

249
00:08:46,020 --> 00:08:48,120
containers close to where your

250
00:08:48,120 --> 00:08:49,920
production cluster is in terms of

251
00:08:49,920 --> 00:08:51,839
network hops

252
00:08:51,839 --> 00:08:55,680
so how do we do that the way we did this

253
00:08:55,680 --> 00:08:58,260
is we wrote some pre-submit checks and

254
00:08:58,260 --> 00:09:00,180
so whenever a developer turns up with

255
00:09:00,180 --> 00:09:03,420
some yaml we run this pre-subject submit

256
00:09:03,420 --> 00:09:05,580
check on it that looks at what image

257
00:09:05,580 --> 00:09:07,620
it's pointing at so we're checking that

258
00:09:07,620 --> 00:09:11,220
it's a GCR or artifact registry image

259
00:09:11,220 --> 00:09:13,019
and then we're also checking that it was

260
00:09:13,019 --> 00:09:15,360
built on this uh distroller space and

261
00:09:15,360 --> 00:09:16,800
you can actually go introspect the

262
00:09:16,800 --> 00:09:18,420
container and like pull out the file

263
00:09:18,420 --> 00:09:20,760
that tells you what OS it is and it'll

264
00:09:20,760 --> 00:09:23,760
tell you that it's a distross thing

265
00:09:23,760 --> 00:09:26,100
there's other ways to do that though you

266
00:09:26,100 --> 00:09:27,720
don't necessarily have to do that that

267
00:09:27,720 --> 00:09:30,060
way you could do it at build time you

268
00:09:30,060 --> 00:09:32,040
could look at the docker file you could

269
00:09:32,040 --> 00:09:35,040
add checks in between sort of build and

270
00:09:35,040 --> 00:09:36,300
putting the container into the

271
00:09:36,300 --> 00:09:39,180
repository you could do the kubernetes

272
00:09:39,180 --> 00:09:41,399
piece at the packaging or deployment

273
00:09:41,399 --> 00:09:43,800
layer but really probably one of the

274
00:09:43,800 --> 00:09:45,540
most common ways to do this is with

275
00:09:45,540 --> 00:09:48,480
admission control and so

276
00:09:48,480 --> 00:09:50,459
here we have an example of doing those

277
00:09:50,459 --> 00:09:52,920
two things that I said so making sure

278
00:09:52,920 --> 00:09:54,899
that all containers are coming from a

279
00:09:54,899 --> 00:09:56,760
particular registry and that they built

280
00:09:56,760 --> 00:09:58,860
off a particular base image so for the

281
00:09:58,860 --> 00:10:01,200
base image what we can do here is use

282
00:10:01,200 --> 00:10:04,080
cosine to make an attestation a

283
00:10:04,080 --> 00:10:06,180
cryptographic attestation that says hey

284
00:10:06,180 --> 00:10:08,220
this this container is a distro-less

285
00:10:08,220 --> 00:10:10,260
container and then that goes into your

286
00:10:10,260 --> 00:10:11,760
repo and then you have an admission

287
00:10:11,760 --> 00:10:14,339
controller that says do the containers

288
00:10:14,339 --> 00:10:17,279
coming in have have this disturbless

289
00:10:17,279 --> 00:10:19,860
attestation if so let them run if they

290
00:10:19,860 --> 00:10:22,680
don't then I won't and a similar thing

291
00:10:22,680 --> 00:10:25,500
uh but using gatekeeper you can write a

292
00:10:25,500 --> 00:10:27,779
gatekeeper policy that says all of the

293
00:10:27,779 --> 00:10:30,120
uh all the manifests that are coming

294
00:10:30,120 --> 00:10:32,640
into this cluster the images have to

295
00:10:32,640 --> 00:10:33,959
come from GCR

296
00:10:33,959 --> 00:10:36,980
so I'm just going to demo that quickly

297
00:10:36,980 --> 00:10:40,940
so what we've got here is

298
00:10:41,160 --> 00:10:44,040
a uh we've got those two admission

299
00:10:44,040 --> 00:10:45,720
controllers running and they're pointing

300
00:10:45,720 --> 00:10:47,820
at this enforcing namespace and we're

301
00:10:47,820 --> 00:10:49,500
going to try and run a container that's

302
00:10:49,500 --> 00:10:51,839
not a GCR container so this is BusyBox

303
00:10:51,839 --> 00:10:53,959
that's getting pulled from Docker Hub

304
00:10:53,959 --> 00:10:57,660
and so that should get denied by the

305
00:10:57,660 --> 00:11:00,120
gatekeeper admission controller uh

306
00:11:00,120 --> 00:11:03,200
that's going to block that

307
00:11:04,500 --> 00:11:06,240
let's draw on that

308
00:11:06,240 --> 00:11:08,399
and so yeah you can see here the

309
00:11:08,399 --> 00:11:09,620
gatekeeper

310
00:11:09,620 --> 00:11:12,320
validation validating Mission Control

311
00:11:12,320 --> 00:11:16,500
there's a policy called repo is GCR and

312
00:11:16,500 --> 00:11:19,920
it didn't let it in because uh the

313
00:11:19,920 --> 00:11:23,040
index.docker io is not one of the GCR

314
00:11:23,040 --> 00:11:26,160
repos that we that we specified okay so

315
00:11:26,160 --> 00:11:28,620
we'll do the same thing again and this

316
00:11:28,620 --> 00:11:30,779
time we're going to put it in GCR so

317
00:11:30,779 --> 00:11:33,480
it's the same busy box container but now

318
00:11:33,480 --> 00:11:35,519
it's in GCL so it should pass gatekeeper

319
00:11:35,519 --> 00:11:38,040
but it still fails the six door check so

320
00:11:38,040 --> 00:11:39,360
we're running the six door policy

321
00:11:39,360 --> 00:11:42,480
controller here and so that's looking

322
00:11:42,480 --> 00:11:45,480
for a distro-less attestation and

323
00:11:45,480 --> 00:11:47,160
because this container doesn't have that

324
00:11:47,160 --> 00:11:50,459
attestation it doesn't get in there

325
00:11:50,459 --> 00:11:54,180
so one more time uh this time uh we're

326
00:11:54,180 --> 00:11:56,220
going to run a container that is

327
00:11:56,220 --> 00:11:58,500
destroyless and a tested is disturbless

328
00:11:58,500 --> 00:12:01,079
using cosine and that one will go

329
00:12:01,079 --> 00:12:03,260
through

330
00:12:12,420 --> 00:12:15,660
okay so just quickly recapping here uh

331
00:12:15,660 --> 00:12:17,459
it's really good if you can look at what

332
00:12:17,459 --> 00:12:19,740
enforcement points you have we like the

333
00:12:19,740 --> 00:12:21,720
pre-submit enforcement point but you

334
00:12:21,720 --> 00:12:24,600
might have others if you can standardize

335
00:12:24,600 --> 00:12:26,160
on those base containers it really helps

336
00:12:26,160 --> 00:12:29,040
a lot and if you can get down to a

337
00:12:29,040 --> 00:12:30,240
smaller number of Registries for

338
00:12:30,240 --> 00:12:31,800
inventory there's good security and

339
00:12:31,800 --> 00:12:33,959
availability reasons to do that if you

340
00:12:33,959 --> 00:12:35,640
don't do any of these things and they're

341
00:12:35,640 --> 00:12:37,079
all kind of optional then you just have

342
00:12:37,079 --> 00:12:38,640
to be really good at the next things

343
00:12:38,640 --> 00:12:40,079
we're going to talk about

344
00:12:40,079 --> 00:12:41,399
I don't know the ways to talk about

345
00:12:41,399 --> 00:12:44,940
detection cool thank you Greg

346
00:12:44,940 --> 00:12:46,980
all right let's get into it so the the

347
00:12:46,980 --> 00:12:49,019
next part of our strategy is is

348
00:12:49,019 --> 00:12:51,240
detection so really your your

349
00:12:51,240 --> 00:12:53,040
vulnerability Management program is only

350
00:12:53,040 --> 00:12:54,660
as good as your detection methods if

351
00:12:54,660 --> 00:12:55,740
you're if you're not detecting

352
00:12:55,740 --> 00:12:57,839
vulnerabilities it's unlikely you're

353
00:12:57,839 --> 00:13:00,240
going to patch them

354
00:13:00,240 --> 00:13:01,500
so what are the problems with addiction

355
00:13:01,500 --> 00:13:03,899
first is which containers do we need to

356
00:13:03,899 --> 00:13:05,040
scan so you might have a lot of

357
00:13:05,040 --> 00:13:07,019
containers but not all of them are used

358
00:13:07,019 --> 00:13:09,660
maybe somewhere in Dev or test or just

359
00:13:09,660 --> 00:13:12,480
old and outdated next is which scanner

360
00:13:12,480 --> 00:13:14,160
should you use

361
00:13:14,160 --> 00:13:16,019
um so this this decision might have

362
00:13:16,019 --> 00:13:17,339
already been made by your organization

363
00:13:17,339 --> 00:13:19,320
you might already have a scanner but you

364
00:13:19,320 --> 00:13:20,519
should be aware of sort of the

365
00:13:20,519 --> 00:13:22,620
differences in the scanners they have

366
00:13:22,620 --> 00:13:24,300
different feature sets and different

367
00:13:24,300 --> 00:13:26,100
coverage mostly owing to different

368
00:13:26,100 --> 00:13:28,980
vulnerability sources and techniques and

369
00:13:28,980 --> 00:13:31,139
they may handle duplicates differently

370
00:13:31,139 --> 00:13:33,240
or or filtering differently so just be

371
00:13:33,240 --> 00:13:35,519
aware of these things and then last you

372
00:13:35,519 --> 00:13:36,959
need to know what layer has a

373
00:13:36,959 --> 00:13:38,519
vulnerability is it is it actually in

374
00:13:38,519 --> 00:13:40,380
this container image or is it in some

375
00:13:40,380 --> 00:13:42,120
base image and I need to go get that

376
00:13:42,120 --> 00:13:44,160
fixed

377
00:13:44,160 --> 00:13:46,620
so our solution to the problem of which

378
00:13:46,620 --> 00:13:50,100
container is sort of twofold so on the

379
00:13:50,100 --> 00:13:52,260
bottom here anytime a developer checks

380
00:13:52,260 --> 00:13:54,240
in a new image we have this pre-submit

381
00:13:54,240 --> 00:13:55,680
check similar to the pre-submit checks

382
00:13:55,680 --> 00:13:57,720
we mentioned earlier that scans it and

383
00:13:57,720 --> 00:14:00,120
ensures that it's fully patched

384
00:14:00,120 --> 00:14:01,560
so

385
00:14:01,560 --> 00:14:04,139
um this is kind of like when a developer

386
00:14:04,139 --> 00:14:06,120
is making a change it's it's the easiest

387
00:14:06,120 --> 00:14:08,100
time to actually patch and this makes

388
00:14:08,100 --> 00:14:10,560
sure anything that is staged uh going to

389
00:14:10,560 --> 00:14:12,720
be in production will be free of

390
00:14:12,720 --> 00:14:15,720
vulnerabilities then second we have sort

391
00:14:15,720 --> 00:14:17,760
of this universe of all of our container

392
00:14:17,760 --> 00:14:20,700
images and we scan through Source we can

393
00:14:20,700 --> 00:14:23,519
determine what all of those are used in

394
00:14:23,519 --> 00:14:24,959
production or will be used in production

395
00:14:24,959 --> 00:14:29,119
and those are scanned continuously

396
00:14:29,399 --> 00:14:31,800
so as an alternative here

397
00:14:31,800 --> 00:14:33,360
um you you have all of your images in

398
00:14:33,360 --> 00:14:35,279
some registry but you probably don't

399
00:14:35,279 --> 00:14:37,440
want to scan all of them so what a lot

400
00:14:37,440 --> 00:14:38,639
of folks do is they have something

401
00:14:38,639 --> 00:14:41,579
running on their hosts a Daemon set a an

402
00:14:41,579 --> 00:14:44,160
agent of some sort maybe some scanning

403
00:14:44,160 --> 00:14:45,660
tool and this collects your inventory

404
00:14:45,660 --> 00:14:47,639
your production inventory and scans

405
00:14:47,639 --> 00:14:50,820
those container images so this is like

406
00:14:50,820 --> 00:14:52,320
we said a good start that the

407
00:14:52,320 --> 00:14:53,940
disadvantage here is your you're only

408
00:14:53,940 --> 00:14:55,680
catching vulnerabilities that are have

409
00:14:55,680 --> 00:14:57,360
made it to production are already

410
00:14:57,360 --> 00:14:59,100
running

411
00:14:59,100 --> 00:15:01,560
so next is the question of which scanner

412
00:15:01,560 --> 00:15:03,899
to use so a lot of container image

413
00:15:03,899 --> 00:15:05,760
scanners today use the national

414
00:15:05,760 --> 00:15:08,760
vulnerability database nvd feed as well

415
00:15:08,760 --> 00:15:11,220
as a bunch of os vendor feeds so this

416
00:15:11,220 --> 00:15:14,339
gives you the OS system packages but uh

417
00:15:14,339 --> 00:15:16,519
there are sort of some new developments

418
00:15:16,519 --> 00:15:18,899
first a lot of scanners are beginning to

419
00:15:18,899 --> 00:15:21,240
support scanning the actual application

420
00:15:21,240 --> 00:15:23,160
code so your your go or your python

421
00:15:23,160 --> 00:15:25,860
within the container image next we've

422
00:15:25,860 --> 00:15:27,300
heard a lot about s-bombs the last

423
00:15:27,300 --> 00:15:29,160
couple days and as they become more

424
00:15:29,160 --> 00:15:30,660
ubiquitous scanners are beginning to

425
00:15:30,660 --> 00:15:32,880
consume them and then kind of optionally

426
00:15:32,880 --> 00:15:35,699
use these these Vex documents to help

427
00:15:35,699 --> 00:15:37,100
augment that

428
00:15:37,100 --> 00:15:40,079
and then I mentioned nvd and these OS

429
00:15:40,079 --> 00:15:41,040
vendor feeds but there are a number of

430
00:15:41,040 --> 00:15:42,600
other sources where vulnerabilities come

431
00:15:42,600 --> 00:15:44,480
from open source databases GitHub

432
00:15:44,480 --> 00:15:47,760
advisories these kinds of things

433
00:15:47,760 --> 00:15:50,100
some more features here so some scanners

434
00:15:50,100 --> 00:15:52,740
have uh this this idea of Base image

435
00:15:52,740 --> 00:15:55,320
detection either from metadata in the

436
00:15:55,320 --> 00:15:57,420
image or pointed at the docker file they

437
00:15:57,420 --> 00:15:58,800
could say um

438
00:15:58,800 --> 00:16:01,199
which can which container image is this

439
00:16:01,199 --> 00:16:03,300
one based on and this may be useful to

440
00:16:03,300 --> 00:16:04,920
you it's something to explore depending

441
00:16:04,920 --> 00:16:07,139
on your environment uh next I think a

442
00:16:07,139 --> 00:16:09,180
big one is reachability analysis some

443
00:16:09,180 --> 00:16:12,360
tools either usually pointed at source

444
00:16:12,360 --> 00:16:14,940
code they try to determine what what

445
00:16:14,940 --> 00:16:16,860
methods are you actually using so rather

446
00:16:16,860 --> 00:16:18,540
than just returning a huge list of cves

447
00:16:18,540 --> 00:16:20,699
we're returning only the ones that are

448
00:16:20,699 --> 00:16:23,760
in in code that that you're using it can

449
00:16:23,760 --> 00:16:25,440
also use some information in the binary

450
00:16:25,440 --> 00:16:26,880
to do that and we'll get into that a

451
00:16:26,880 --> 00:16:28,500
little later and then there are also

452
00:16:28,500 --> 00:16:30,000
additional scan types outside of

453
00:16:30,000 --> 00:16:31,199
vulnerability scanning there are things

454
00:16:31,199 --> 00:16:34,320
like CIS Etc mentioned here

455
00:16:34,320 --> 00:16:37,620
so we did a bit of an experiment

456
00:16:37,620 --> 00:16:40,680
we built a go binary we have a

457
00:16:40,680 --> 00:16:42,480
vulnerable module I've listed it up here

458
00:16:42,480 --> 00:16:44,639
at a vulnerable version it's built with

459
00:16:44,639 --> 00:16:47,040
an old go Lang version 118 and it's on

460
00:16:47,040 --> 00:16:49,259
an old W base from 2021 so I had a bunch

461
00:16:49,259 --> 00:16:50,759
of vulnerabilities

462
00:16:50,759 --> 00:16:52,980
and we scanned that with two commercial

463
00:16:52,980 --> 00:16:55,139
scanners and two open source scanners

464
00:16:55,139 --> 00:16:56,759
and these are sort of the results both

465
00:16:56,759 --> 00:16:58,440
fixed and unfixed

466
00:16:58,440 --> 00:17:01,199
so then the question becomes which one

467
00:17:01,199 --> 00:17:03,300
is correct well there's there's not

468
00:17:03,300 --> 00:17:06,240
really a right or a wrong answer almost

469
00:17:06,240 --> 00:17:08,880
all of them detected uh OS package

470
00:17:08,880 --> 00:17:11,640
vulnerabilities some detected go module

471
00:17:11,640 --> 00:17:13,559
vulnerabilities some did Google go tool

472
00:17:13,559 --> 00:17:15,900
chain vulnerabilities but even within

473
00:17:15,900 --> 00:17:17,520
those results they kind of differ on

474
00:17:17,520 --> 00:17:18,900
what they choose to hide what they

475
00:17:18,900 --> 00:17:21,000
choose a surface and the the key Point

476
00:17:21,000 --> 00:17:23,099
here is that we really want to increase

477
00:17:23,099 --> 00:17:24,839
coverage increase the number of things

478
00:17:24,839 --> 00:17:27,839
we scan but we want to decrease false

479
00:17:27,839 --> 00:17:28,860
positives so there's kind of this

480
00:17:28,860 --> 00:17:31,760
tension between the two

481
00:17:31,980 --> 00:17:33,419
so when it comes to the question of

482
00:17:33,419 --> 00:17:36,179
which scanner our solution is more than

483
00:17:36,179 --> 00:17:39,660
one and if you're publishing images for

484
00:17:39,660 --> 00:17:42,720
consumption for others to consume you

485
00:17:42,720 --> 00:17:44,220
have to sort of assume they're they're

486
00:17:44,220 --> 00:17:45,840
going to be scanned by every every

487
00:17:45,840 --> 00:17:47,460
scanner in existence and we found that

488
00:17:47,460 --> 00:17:49,559
to be true so we we run multiple

489
00:17:49,559 --> 00:17:50,880
standards and compare results and this

490
00:17:50,880 --> 00:17:54,120
gives us a couple advantages so first it

491
00:17:54,120 --> 00:17:56,220
shows us if there are any false

492
00:17:56,220 --> 00:17:58,080
positives or coverage gaps or new

493
00:17:58,080 --> 00:17:59,520
features that are that are sort of

494
00:17:59,520 --> 00:18:01,980
coming online and second it gives us an

495
00:18:01,980 --> 00:18:03,780
idea of what our customers actually see

496
00:18:03,780 --> 00:18:06,720
so if they come to us with a a scan

497
00:18:06,720 --> 00:18:08,340
result from some random scanner we've

498
00:18:08,340 --> 00:18:11,700
had some advance notice and we

499
00:18:11,700 --> 00:18:13,380
um we kind of know how to interpret

500
00:18:13,380 --> 00:18:15,299
those results so then we we take all

501
00:18:15,299 --> 00:18:16,740
these results compare them and that

502
00:18:16,740 --> 00:18:19,020
feedbacks into our our own internal

503
00:18:19,020 --> 00:18:20,640
scanner and hopefully improves things

504
00:18:20,640 --> 00:18:23,059
over time

505
00:18:23,160 --> 00:18:26,039
so the next big problem in detection is

506
00:18:26,039 --> 00:18:28,260
noise and we've broadly broken this up

507
00:18:28,260 --> 00:18:30,000
into two buckets so those things that

508
00:18:30,000 --> 00:18:32,100
are under the control of the user and

509
00:18:32,100 --> 00:18:33,720
those that are under the control of the

510
00:18:33,720 --> 00:18:36,960
scanner so in the user control bucket

511
00:18:36,960 --> 00:18:39,240
um oftentimes we're scanning code that's

512
00:18:39,240 --> 00:18:41,100
just not even used like the the Pearl

513
00:18:41,100 --> 00:18:43,020
vulnerability example at the top and

514
00:18:43,020 --> 00:18:44,960
that's just things we should rip out

515
00:18:44,960 --> 00:18:48,419
next there A lot of times cves are

516
00:18:48,419 --> 00:18:50,100
discovered but there's no fix available

517
00:18:50,100 --> 00:18:52,440
so depending on your environment your

518
00:18:52,440 --> 00:18:54,840
threat model maybe maybe you don't care

519
00:18:54,840 --> 00:18:56,700
about those since there's nothing really

520
00:18:56,700 --> 00:18:58,380
actionable at this time

521
00:18:58,380 --> 00:19:00,179
and the second bucket here we've got a

522
00:19:00,179 --> 00:19:03,960
bunch of different instances of cves a

523
00:19:03,960 --> 00:19:05,160
lot of these are just things that

524
00:19:05,160 --> 00:19:07,400
probably won't be patched or have no fix

525
00:19:07,400 --> 00:19:09,539
sometimes there's sort of discrepancies

526
00:19:09,539 --> 00:19:12,059
or there's a some some arguments about

527
00:19:12,059 --> 00:19:13,380
what the score should actually be and

528
00:19:13,380 --> 00:19:14,640
sometimes they just aren't even

529
00:19:14,640 --> 00:19:16,260
applicable at all to your environment

530
00:19:16,260 --> 00:19:19,140
and these are really some areas where we

531
00:19:19,140 --> 00:19:22,940
think the the scanners can improve

532
00:19:23,220 --> 00:19:26,820
so next going into the application

533
00:19:26,820 --> 00:19:28,860
and golang in particular so we use

534
00:19:28,860 --> 00:19:31,620
primarily golang throughout gke

535
00:19:31,620 --> 00:19:32,340
um

536
00:19:32,340 --> 00:19:34,320
and as I mentioned a lot of scanners are

537
00:19:34,320 --> 00:19:36,600
beginning to turn up these module or

538
00:19:36,600 --> 00:19:38,520
tool chain vulnerabilities

539
00:19:38,520 --> 00:19:41,100
so a problem we often see is that they

540
00:19:41,100 --> 00:19:42,840
return all of the vulnerabilities in

541
00:19:42,840 --> 00:19:44,400
that module all of the vulnerabilities

542
00:19:44,400 --> 00:19:46,620
in that that the minor version of that

543
00:19:46,620 --> 00:19:49,500
go tool chain so there's a tool released

544
00:19:49,500 --> 00:19:53,160
by The Go security team go volc this is

545
00:19:53,160 --> 00:19:54,600
kind of a new experimental tool in

546
00:19:54,600 --> 00:19:56,880
library and it tries to help with this

547
00:19:56,880 --> 00:19:58,559
problem and we'll there's a link here

548
00:19:58,559 --> 00:20:02,039
and we'll go into a demo of that

549
00:20:02,039 --> 00:20:04,320
all right so

550
00:20:04,320 --> 00:20:07,200
here I've got a small sort of terrible

551
00:20:07,200 --> 00:20:09,720
go program with one single module

552
00:20:09,720 --> 00:20:12,299
imported and you can see in particular

553
00:20:12,299 --> 00:20:14,220
I'm calling this this new server con

554
00:20:14,220 --> 00:20:17,760
method so go ahead and build that

555
00:20:17,760 --> 00:20:20,160
and I've I went ahead and I packaged

556
00:20:20,160 --> 00:20:22,020
this up I pushed it to artifact registry

557
00:20:22,020 --> 00:20:24,360
and ran container analysis on it to see

558
00:20:24,360 --> 00:20:25,799
what kind of results that scanner will

559
00:20:25,799 --> 00:20:27,539
give us

560
00:20:27,539 --> 00:20:28,919
so here it is you can see there are a

561
00:20:28,919 --> 00:20:30,480
whole bunch of go results and this is

562
00:20:30,480 --> 00:20:32,580
great this is like what we want we want

563
00:20:32,580 --> 00:20:35,160
scanners to start doing this but how

564
00:20:35,160 --> 00:20:36,419
many of these are actually reachable

565
00:20:36,419 --> 00:20:38,760
that's the question so we run go

566
00:20:38,760 --> 00:20:41,100
voltcheck on that same binary

567
00:20:41,100 --> 00:20:42,840
and what it does is it actually looks at

568
00:20:42,840 --> 00:20:44,280
the symbol table in the binary to

569
00:20:44,280 --> 00:20:46,980
determine what methods are used and so

570
00:20:46,980 --> 00:20:48,299
we've kind of gone from that big list

571
00:20:48,299 --> 00:20:50,520
down to just a a couple two instances

572
00:20:50,520 --> 00:20:52,919
and you'll notice it it even calls out

573
00:20:52,919 --> 00:20:54,960
that new servicon method the one that I

574
00:20:54,960 --> 00:20:56,280
called

575
00:20:56,280 --> 00:20:57,840
so this is pretty cool and this is

576
00:20:57,840 --> 00:20:59,280
something you could maybe incorporate in

577
00:20:59,280 --> 00:21:01,799
your CI CD pipeline maybe you could

578
00:21:01,799 --> 00:21:03,780
leverage that that library and hopefully

579
00:21:03,780 --> 00:21:05,340
this is the kind of thing that scanners

580
00:21:05,340 --> 00:21:08,520
will start to incorporate

581
00:21:08,520 --> 00:21:10,200
sort of tied all back

582
00:21:10,200 --> 00:21:12,240
um when it comes to detection you need

583
00:21:12,240 --> 00:21:13,919
to look into the new features in your

584
00:21:13,919 --> 00:21:16,919
scanner be aware of those and just in

585
00:21:16,919 --> 00:21:19,260
new advances in coverage in general

586
00:21:19,260 --> 00:21:21,600
uh when there's a lot of noise look to

587
00:21:21,600 --> 00:21:23,880
your scanner vendor for for help either

588
00:21:23,880 --> 00:21:26,760
in filtering or raising you know full

589
00:21:26,760 --> 00:21:29,340
request bug requests to them I mean then

590
00:21:29,340 --> 00:21:30,720
where it's appropriate to your threat

591
00:21:30,720 --> 00:21:33,120
model use these rules to sort of silence

592
00:21:33,120 --> 00:21:34,080
and ignore the things that aren't

593
00:21:34,080 --> 00:21:35,700
relevant things that you you have no

594
00:21:35,700 --> 00:21:38,400
intention of fixing

595
00:21:38,400 --> 00:21:40,799
so next the next part of our strategy is

596
00:21:40,799 --> 00:21:43,080
fixing or remediation and this is really

597
00:21:43,080 --> 00:21:45,120
kind of the like the meat of it so once

598
00:21:45,120 --> 00:21:46,440
you've discovered a vulnerability You

599
00:21:46,440 --> 00:21:48,480
Know You're vulnerable how do we go

600
00:21:48,480 --> 00:21:50,400
about fixing it and deploying that that

601
00:21:50,400 --> 00:21:52,919
fix to our production Fleet

602
00:21:52,919 --> 00:21:54,900
so what is the problem well

603
00:21:54,900 --> 00:21:56,880
um really it's just a complex process

604
00:21:56,880 --> 00:21:59,100
and this is maybe an example flow of

605
00:21:59,100 --> 00:22:00,840
what what it might look like

606
00:22:00,840 --> 00:22:02,640
so you have a scanner it detects a

607
00:22:02,640 --> 00:22:04,380
vulnerability in some image and then you

608
00:22:04,380 --> 00:22:06,000
have to determine is it actually in this

609
00:22:06,000 --> 00:22:08,940
image or is it in some some parent

610
00:22:08,940 --> 00:22:11,220
um some base image then you have to find

611
00:22:11,220 --> 00:22:12,960
the owner hopefully you know the owner

612
00:22:12,960 --> 00:22:15,659
you create a bug or a PR to them and

613
00:22:15,659 --> 00:22:17,520
then once this is all complete you've

614
00:22:17,520 --> 00:22:19,380
got to sort of do this process again for

615
00:22:19,380 --> 00:22:22,200
anything that depends on that image

616
00:22:22,200 --> 00:22:24,840
so our first solution

617
00:22:24,840 --> 00:22:27,380
um originally we sort of tried to

618
00:22:27,380 --> 00:22:29,580
determine the parent-child relationships

619
00:22:29,580 --> 00:22:31,919
and images in the base images but then

620
00:22:31,919 --> 00:22:33,360
more recently we've taken a different

621
00:22:33,360 --> 00:22:35,340
attack so

622
00:22:35,340 --> 00:22:37,380
as we mentioned earlier we have a sort

623
00:22:37,380 --> 00:22:39,000
of a finite limited set number of Base

624
00:22:39,000 --> 00:22:40,860
images so those are represented here on

625
00:22:40,860 --> 00:22:42,140
the left

626
00:22:42,140 --> 00:22:44,820
and when they're built they get new tags

627
00:22:44,820 --> 00:22:47,220
so on the left is the oldest tag and the

628
00:22:47,220 --> 00:22:49,260
the newest is on the right so what we do

629
00:22:49,260 --> 00:22:51,480
is we have Automation and it scans the

630
00:22:51,480 --> 00:22:53,700
latest of these continuously and then

631
00:22:53,700 --> 00:22:55,200
say we find a vulnerability in Debian

632
00:22:55,200 --> 00:22:56,640
base the middle one here

633
00:22:56,640 --> 00:22:58,440
so we go ahead and we automatically

634
00:22:58,440 --> 00:23:01,020
create a new one make a new tag

635
00:23:01,020 --> 00:23:02,700
and then we scan the latest again we

636
00:23:02,700 --> 00:23:03,900
just do this for eternity and this

637
00:23:03,900 --> 00:23:06,240
ensures that when you need to patch your

638
00:23:06,240 --> 00:23:08,460
container you always have a patched base

639
00:23:08,460 --> 00:23:10,020
image available so there's really no

640
00:23:10,020 --> 00:23:12,360
question of do I need to go find the

641
00:23:12,360 --> 00:23:14,100
base image patch the base image and do

642
00:23:14,100 --> 00:23:15,900
this whole dance

643
00:23:15,900 --> 00:23:18,419
next is the question of ownership so

644
00:23:18,419 --> 00:23:20,820
again we've got to pre-submit what

645
00:23:20,820 --> 00:23:22,380
happens here is whenever a developer

646
00:23:22,380 --> 00:23:24,780
introduces a new image this check will

647
00:23:24,780 --> 00:23:27,539
look and say is there an owner defined

648
00:23:27,539 --> 00:23:30,240
for this image so this this ensures that

649
00:23:30,240 --> 00:23:31,740
we we don't have any question of who

650
00:23:31,740 --> 00:23:34,080
owns the thing who should be on the hook

651
00:23:34,080 --> 00:23:36,960
for doing the actual patching

652
00:23:36,960 --> 00:23:40,140
so taking that earlier example and

653
00:23:40,140 --> 00:23:42,240
pulling out those those two pieces it

654
00:23:42,240 --> 00:23:44,520
this might be a simplified process so

655
00:23:44,520 --> 00:23:46,320
your scanner to detects a CV in an image

656
00:23:46,320 --> 00:23:48,059
we already know that the base image is

657
00:23:48,059 --> 00:23:49,320
patched so if there's a new one

658
00:23:49,320 --> 00:23:51,299
available we just update that we know

659
00:23:51,299 --> 00:23:53,100
that we have an owner to send the bug to

660
00:23:53,100 --> 00:23:55,500
so we go ahead and do that and then

661
00:23:55,500 --> 00:23:57,900
Etc we wait for a build and and so on

662
00:23:57,900 --> 00:23:59,220
until we're done

663
00:23:59,220 --> 00:24:01,140
something else you'll note here is that

664
00:24:01,140 --> 00:24:03,360
we also aggregate bugs that's sort of

665
00:24:03,360 --> 00:24:04,799
what we think is the appropriate level

666
00:24:04,799 --> 00:24:07,860
of abstraction so say you find uh 15

667
00:24:07,860 --> 00:24:10,860
cves in your your Cube proxy image it

668
00:24:10,860 --> 00:24:13,200
doesn't make sense to make 15 bugs to

669
00:24:13,200 --> 00:24:15,539
various teams or 15 times the number of

670
00:24:15,539 --> 00:24:18,240
deployments hundreds of bugs we found

671
00:24:18,240 --> 00:24:20,940
that when you have a large number of

672
00:24:20,940 --> 00:24:23,280
bugs or the larger number of bugs you

673
00:24:23,280 --> 00:24:25,980
you have the less likely they are to get

674
00:24:25,980 --> 00:24:27,780
fixed or rather the more likely they are

675
00:24:27,780 --> 00:24:30,360
to get ignored so we create one bug for

676
00:24:30,360 --> 00:24:32,220
the image once that image is patched

677
00:24:32,220 --> 00:24:34,380
that fixes all of them and that's

678
00:24:34,380 --> 00:24:36,480
another way we sort of simplify things

679
00:24:36,480 --> 00:24:39,480
so the title back if it's useful to you

680
00:24:39,480 --> 00:24:40,799
track the container parent-child

681
00:24:40,799 --> 00:24:42,960
relationships so you know what base

682
00:24:42,960 --> 00:24:45,960
image relates to what what image as a

683
00:24:45,960 --> 00:24:47,580
complement or alternative just automate

684
00:24:47,580 --> 00:24:49,380
patching based images consistently so

685
00:24:49,380 --> 00:24:51,120
you know you know you always have one

686
00:24:51,120 --> 00:24:53,039
it's very useful to have comprehensive

687
00:24:53,039 --> 00:24:55,440
inventory and track your ownership so we

688
00:24:55,440 --> 00:24:57,720
know who owns the image and then where

689
00:24:57,720 --> 00:24:59,820
possible sort of use the existing

690
00:24:59,820 --> 00:25:01,740
systems you have to track these things

691
00:25:01,740 --> 00:25:04,020
your your issue tracker or jira whatever

692
00:25:04,020 --> 00:25:05,940
you use

693
00:25:05,940 --> 00:25:08,220
so the last part of our strategy is

694
00:25:08,220 --> 00:25:10,080
monitoring our visibility and this sort

695
00:25:10,080 --> 00:25:12,120
of cross-cuts all the others it's kind

696
00:25:12,120 --> 00:25:14,220
of integral to to all of the rest and

697
00:25:14,220 --> 00:25:17,340
it's complementary to each of them

698
00:25:17,340 --> 00:25:20,280
so as we know what gets measured gets

699
00:25:20,280 --> 00:25:22,559
managed so the problems here are first

700
00:25:22,559 --> 00:25:24,840
there's kind of this question of what is

701
00:25:24,840 --> 00:25:28,020
the holistic view of the fleet given a

702
00:25:28,020 --> 00:25:30,480
cve is it patched and then further has

703
00:25:30,480 --> 00:25:32,220
that patch been deployed

704
00:25:32,220 --> 00:25:34,020
next is this sort of composition

705
00:25:34,020 --> 00:25:36,480
question so we know we have a cve but

706
00:25:36,480 --> 00:25:38,520
what containers actually have that cve

707
00:25:38,520 --> 00:25:41,279
and where is that container used and so

708
00:25:41,279 --> 00:25:42,600
on up the stack

709
00:25:42,600 --> 00:25:46,020
the next inevitably bugs or PRS won't

710
00:25:46,020 --> 00:25:48,480
get merged or fixed and what do we do

711
00:25:48,480 --> 00:25:50,279
about that so who is watching how do we

712
00:25:50,279 --> 00:25:51,779
measure those things and then how do we

713
00:25:51,779 --> 00:25:53,400
escalate so having those processes in

714
00:25:53,400 --> 00:25:55,980
place and then last we want to measure

715
00:25:55,980 --> 00:25:57,480
all of this we want to know how we're

716
00:25:57,480 --> 00:25:59,340
doing against our timelines and then we

717
00:25:59,340 --> 00:26:01,020
also want to know are there bottlenecks

718
00:26:01,020 --> 00:26:02,580
are there places we could make things

719
00:26:02,580 --> 00:26:04,679
better

720
00:26:04,679 --> 00:26:06,539
so our solution kind of a simplified

721
00:26:06,539 --> 00:26:08,340
view of our solution is something like

722
00:26:08,340 --> 00:26:11,220
this it may burn some ideas in your mind

723
00:26:11,220 --> 00:26:12,360
so

724
00:26:12,360 --> 00:26:15,059
um our standard detects of cve if it's

725
00:26:15,059 --> 00:26:16,860
new finding we we create a bug kind of

726
00:26:16,860 --> 00:26:18,720
like described before if it's an

727
00:26:18,720 --> 00:26:20,940
existing bug we we check it against our

728
00:26:20,940 --> 00:26:25,380
stated SLO and we if if it's nearing um

729
00:26:25,380 --> 00:26:28,620
the SLO end date we'll say hey 50 of

730
00:26:28,620 --> 00:26:30,659
your SLO is gone you really need to take

731
00:26:30,659 --> 00:26:32,100
a look at this and then once it gets

732
00:26:32,100 --> 00:26:35,220
past SLO we have escalation processes

733
00:26:35,220 --> 00:26:37,380
so a couple other things I'll mention in

734
00:26:37,380 --> 00:26:38,820
this in this slide which aren't really

735
00:26:38,820 --> 00:26:41,580
depicted here are we really we only scan

736
00:26:41,580 --> 00:26:43,620
those images that are relevant so those

737
00:26:43,620 --> 00:26:45,779
we know are used in production

738
00:26:45,779 --> 00:26:48,179
we create bugs and the priority of those

739
00:26:48,179 --> 00:26:50,159
bugs is based on the severity to kind of

740
00:26:50,159 --> 00:26:52,740
to drive a priority

741
00:26:52,740 --> 00:26:53,820
um

742
00:26:53,820 --> 00:26:56,100
so then we we create but we create these

743
00:26:56,100 --> 00:26:57,840
bugs we've got these processes in place

744
00:26:57,840 --> 00:26:59,820
to add comments and and nag and then

745
00:26:59,820 --> 00:27:02,039
we've also got processes for um sort of

746
00:27:02,039 --> 00:27:04,200
dashboarding and email reporting and

747
00:27:04,200 --> 00:27:06,059
that kind of thing another optimization

748
00:27:06,059 --> 00:27:09,900
here might be if the detection is is no

749
00:27:09,900 --> 00:27:11,640
longer around you could close the bug

750
00:27:11,640 --> 00:27:13,020
have some automation to do something

751
00:27:13,020 --> 00:27:14,880
like that

752
00:27:14,880 --> 00:27:17,520
the next problem is composition so NGK

753
00:27:17,520 --> 00:27:19,440
we've built a system all in spanner that

754
00:27:19,440 --> 00:27:20,940
has these relations so we have a GK

755
00:27:20,940 --> 00:27:22,440
version we know it has one or more

756
00:27:22,440 --> 00:27:24,600
applications one or more containers that

757
00:27:24,600 --> 00:27:27,419
have one or more cves packages with CVS

758
00:27:27,419 --> 00:27:28,320
in them

759
00:27:28,320 --> 00:27:30,059
so then

760
00:27:30,059 --> 00:27:31,799
let's say your security engineer comes

761
00:27:31,799 --> 00:27:33,720
along and says hey are we affected by

762
00:27:33,720 --> 00:27:34,980
this cve

763
00:27:34,980 --> 00:27:37,380
well we can say yes we are it's in this

764
00:27:37,380 --> 00:27:39,900
package which is in this container which

765
00:27:39,900 --> 00:27:42,419
is in this application and in this gke

766
00:27:42,419 --> 00:27:44,640
version so we're able to track using

767
00:27:44,640 --> 00:27:46,679
this system

768
00:27:46,679 --> 00:27:50,039
next is sort of the all-up visibility so

769
00:27:50,039 --> 00:27:53,100
we have a a master dashboard that should

770
00:27:53,100 --> 00:27:54,960
sort of shows the um the entire status

771
00:27:54,960 --> 00:27:57,240
of our Fleet to see how we're doing

772
00:27:57,240 --> 00:27:58,799
uh but then we've got got some other

773
00:27:58,799 --> 00:28:01,740
metrics that we we track that are super

774
00:28:01,740 --> 00:28:04,440
helpful so on the top left this is just

775
00:28:04,440 --> 00:28:07,500
all example data but we track images on

776
00:28:07,500 --> 00:28:09,659
a number of axes so by the number of

777
00:28:09,659 --> 00:28:12,840
cves by the the team

778
00:28:12,840 --> 00:28:14,820
um by that that sort of thing so we know

779
00:28:14,820 --> 00:28:16,860
which teams are getting the most which

780
00:28:16,860 --> 00:28:19,260
images have the most CVS Etc so in this

781
00:28:19,260 --> 00:28:22,020
example we have fake image 101 and 103

782
00:28:22,020 --> 00:28:24,480
have a lot of CVS this is somewhere you

783
00:28:24,480 --> 00:28:26,220
might look into the prevention methods

784
00:28:26,220 --> 00:28:28,320
we talked to the beginning moving

785
00:28:28,320 --> 00:28:30,059
something to disturbless or slimming it

786
00:28:30,059 --> 00:28:32,220
down and the top right I think something

787
00:28:32,220 --> 00:28:34,080
that's often overlooked in a lot of

788
00:28:34,080 --> 00:28:35,940
scanners is it's it's important to track

789
00:28:35,940 --> 00:28:37,799
over time we want to know how we're

790
00:28:37,799 --> 00:28:39,179
doing right now but we also want to know

791
00:28:39,179 --> 00:28:41,279
how we're trending so this gives us an

792
00:28:41,279 --> 00:28:44,340
idea of uh sort of that that Trend

793
00:28:44,340 --> 00:28:45,120
um

794
00:28:45,120 --> 00:28:46,500
and then

795
00:28:46,500 --> 00:28:48,360
it also tells us if we're meeting our

796
00:28:48,360 --> 00:28:51,419
goals so we have these stated slos are

797
00:28:51,419 --> 00:28:53,520
we are we meeting them and you can kind

798
00:28:53,520 --> 00:28:55,080
of find Trends in the data perhaps like

799
00:28:55,080 --> 00:28:57,360
in this example maybe maybe our low

800
00:28:57,360 --> 00:28:59,460
vulnerabilities are not being

801
00:28:59,460 --> 00:29:01,380
prioritized as well as they could at the

802
00:29:01,380 --> 00:29:02,820
bottom here this is sort of an example

803
00:29:02,820 --> 00:29:04,620
of how we track the life cycle of a

804
00:29:04,620 --> 00:29:06,720
single vulnerability so we look at from

805
00:29:06,720 --> 00:29:08,279
the time it's detected to the time it's

806
00:29:08,279 --> 00:29:10,679
rolled out everywhere what are as

807
00:29:10,679 --> 00:29:13,220
granularly as possible we try to say

808
00:29:13,220 --> 00:29:16,020
what actions took place and how much

809
00:29:16,020 --> 00:29:18,179
time was spent between them and those

810
00:29:18,179 --> 00:29:20,399
might be good candidates for further

811
00:29:20,399 --> 00:29:22,799
automation or for maybe you know

812
00:29:22,799 --> 00:29:24,299
improving QA processes or release

813
00:29:24,299 --> 00:29:26,580
processes simplification

814
00:29:26,580 --> 00:29:28,919
some Alternatives here for inventory

815
00:29:28,919 --> 00:29:30,419
um you're if you're on a cloud provider

816
00:29:30,419 --> 00:29:32,640
they might provide some some systems for

817
00:29:32,640 --> 00:29:34,380
that but a lot of scanners provide this

818
00:29:34,380 --> 00:29:37,260
for the kind of composition piece uh

819
00:29:37,260 --> 00:29:39,120
Lyft has a really good article about how

820
00:29:39,120 --> 00:29:40,860
they use the open source cartography

821
00:29:40,860 --> 00:29:42,659
graph database to do something similar

822
00:29:42,659 --> 00:29:44,940
something similar to what we did

823
00:29:44,940 --> 00:29:45,840
um

824
00:29:45,840 --> 00:29:48,720
s-bombs and guac are probably probably

825
00:29:48,720 --> 00:29:50,220
the future here

826
00:29:50,220 --> 00:29:51,960
um as those are kind of developing and

827
00:29:51,960 --> 00:29:54,120
then another sort of complementary thing

828
00:29:54,120 --> 00:29:56,100
you can do is just ignore all of that

829
00:29:56,100 --> 00:29:57,659
and just patch everything you find a

830
00:29:57,659 --> 00:29:59,340
vulnerability update

831
00:29:59,340 --> 00:30:01,799
as far as slugs go

832
00:30:01,799 --> 00:30:03,720
um really lean on the systems that you

833
00:30:03,720 --> 00:30:04,980
already use your your bug management

834
00:30:04,980 --> 00:30:07,679
software and if possible try to track

835
00:30:07,679 --> 00:30:09,899
the kind of commits and rollouts through

836
00:30:09,899 --> 00:30:11,520
your system

837
00:30:11,520 --> 00:30:14,279
so to tying this all back it's very

838
00:30:14,279 --> 00:30:15,779
important to track your slos over time

839
00:30:15,779 --> 00:30:18,860
not just kind of the current status

840
00:30:18,860 --> 00:30:21,299
tracking those those parts of your

841
00:30:21,299 --> 00:30:23,100
release process can help you identify

842
00:30:23,100 --> 00:30:24,840
these bottlenecks to see where you can

843
00:30:24,840 --> 00:30:27,480
sort of prioritize investment and then

844
00:30:27,480 --> 00:30:30,000
where possible use your existing systems

845
00:30:30,000 --> 00:30:31,919
to do this escalation dashboarding

846
00:30:31,919 --> 00:30:34,440
monitoring piece all right and with that

847
00:30:34,440 --> 00:30:38,360
I will give it back to Greg

848
00:30:39,840 --> 00:30:42,480
cool all right so just a reminder what

849
00:30:42,480 --> 00:30:43,860
we talked about so we talked about

850
00:30:43,860 --> 00:30:45,480
standardizing on Registries getting

851
00:30:45,480 --> 00:30:47,760
those minimal containers getting as far

852
00:30:47,760 --> 00:30:49,260
left as possible I know everyone would

853
00:30:49,260 --> 00:30:51,179
love to say shift left and loves hearing

854
00:30:51,179 --> 00:30:52,320
it

855
00:30:52,320 --> 00:30:54,299
um but we found like you know that

856
00:30:54,299 --> 00:30:55,980
that's just the cheapest uh easy

857
00:30:55,980 --> 00:30:58,260
cheapest way you can do it uh keep those

858
00:30:58,260 --> 00:31:00,360
vulnerabilities out of production

859
00:31:00,360 --> 00:31:04,020
uh scanners get you inventory and uh

860
00:31:04,020 --> 00:31:05,220
visibility

861
00:31:05,220 --> 00:31:07,380
and the record of ownership of

862
00:31:07,380 --> 00:31:09,240
containers is is really critical so you

863
00:31:09,240 --> 00:31:11,460
know who to who to nag to patch them

864
00:31:11,460 --> 00:31:13,620
if you can automatic patching is

865
00:31:13,620 --> 00:31:15,840
definitely better uh I think you'll

866
00:31:15,840 --> 00:31:17,760
probably want bugs and ticketing systems

867
00:31:17,760 --> 00:31:20,700
anyway but uh to help you build

868
00:31:20,700 --> 00:31:23,640
dashboards but uh if you can Auto patch

869
00:31:23,640 --> 00:31:25,860
and send PRS instead of just sending

870
00:31:25,860 --> 00:31:27,480
bugs uh then that's definitely going to

871
00:31:27,480 --> 00:31:28,440
be better

872
00:31:28,440 --> 00:31:30,720
and yeah ticketing systems or escalation

873
00:31:30,720 --> 00:31:32,640
and just really like if you can do

874
00:31:32,640 --> 00:31:34,380
rather than tell that will make a big

875
00:31:34,380 --> 00:31:35,840
difference

876
00:31:35,840 --> 00:31:38,399
so everything we talked about here we've

877
00:31:38,399 --> 00:31:40,799
got links for in the slides the slides

878
00:31:40,799 --> 00:31:43,500
are up on the website so the demo code

879
00:31:43,500 --> 00:31:46,740
is in a GitHub repository you can go see

880
00:31:46,740 --> 00:31:47,940
that there's actually a few other things

881
00:31:47,940 --> 00:31:50,460
we didn't uh demo that are in that

882
00:31:50,460 --> 00:31:52,860
repository yeah happy to take any

883
00:31:52,860 --> 00:31:54,659
questions

884
00:31:54,659 --> 00:31:59,600
you know I could get a few a few minutes

885
00:32:08,100 --> 00:32:10,320
ready to go do you recommend scanning

886
00:32:10,320 --> 00:32:13,080
again once you've updated in your CI

887
00:32:13,080 --> 00:32:14,880
pipeline before you re-uploaded the

888
00:32:14,880 --> 00:32:16,200
registry in case you pull in like

889
00:32:16,200 --> 00:32:18,120
appointment library or something like

890
00:32:18,120 --> 00:32:19,799
that maintainer got compromised or

891
00:32:19,799 --> 00:32:21,360
something like that

892
00:32:21,360 --> 00:32:24,059
yeah so the question is like uh scanning

893
00:32:24,059 --> 00:32:26,640
in the in the repo is nice but like uh

894
00:32:26,640 --> 00:32:28,500
isn't it isn't a good idea to like sort

895
00:32:28,500 --> 00:32:31,320
of rescan uh in case like uh I don't

896
00:32:31,320 --> 00:32:32,820
know you brought in a dependency that

897
00:32:32,820 --> 00:32:35,159
had a vulnerability in it or or some

898
00:32:35,159 --> 00:32:36,720
other malicious change yeah like

899
00:32:36,720 --> 00:32:38,399
definitely so we have like multiple

900
00:32:38,399 --> 00:32:41,399
points what I was scanning I think maybe

901
00:32:41,399 --> 00:32:43,440
there's not too many places to do it I I

902
00:32:43,440 --> 00:32:45,500
don't know a bit like it I think you can

903
00:32:45,500 --> 00:32:48,360
uh sort of the earlier you do it and

904
00:32:48,360 --> 00:32:50,039
that's sort of the least cost on the

905
00:32:50,039 --> 00:32:53,100
developer to fix it if they're already

906
00:32:53,100 --> 00:32:54,539
built their release they've already gone

907
00:32:54,539 --> 00:32:56,220
through their QA and they're like about

908
00:32:56,220 --> 00:32:58,080
to put it on a cluster and you're like

909
00:32:58,080 --> 00:33:00,539
wait that's like the most annoying place

910
00:33:00,539 --> 00:33:01,500
to do it

911
00:33:01,500 --> 00:33:04,740
um so uh but yeah I think like uh the

912
00:33:04,740 --> 00:33:06,720
visibility in multiple places along that

913
00:33:06,720 --> 00:33:10,220
pipeline is useful yeah

914
00:33:24,779 --> 00:33:26,880
question is is where's the ownership

915
00:33:26,880 --> 00:33:29,220
information right now uh effectively

916
00:33:29,220 --> 00:33:32,220
what happens is it's like we don't have

917
00:33:32,220 --> 00:33:34,019
like a huge number of images so it's

918
00:33:34,019 --> 00:33:36,840
just a file that's checked in and uh

919
00:33:36,840 --> 00:33:39,179
there's a preset that basically looks at

920
00:33:39,179 --> 00:33:41,340
your manifest and if the image your

921
00:33:41,340 --> 00:33:43,440
image is not in that file with an owner

922
00:33:43,440 --> 00:33:45,360
then we won't let you put the Manifest

923
00:33:45,360 --> 00:33:49,559
in so uh in the future this could maybe

924
00:33:49,559 --> 00:33:50,880
be something more fancy but that's

925
00:33:50,880 --> 00:33:52,140
definitely doing the job at the moment

926
00:33:52,140 --> 00:33:54,320
yeah

927
00:34:02,760 --> 00:34:05,519
do we have the open SSL CLI in our

928
00:34:05,519 --> 00:34:07,559
district list images I I don't know I'd

929
00:34:07,559 --> 00:34:10,139
have to go look I don't know I don't

930
00:34:10,139 --> 00:34:11,820
think so I don't think so we have a

931
00:34:11,820 --> 00:34:13,918
number of uh additionalist variants and

932
00:34:13,918 --> 00:34:15,300
some of them certainly don't they have

933
00:34:15,300 --> 00:34:17,639
only you know uh Temp and some Etsy

934
00:34:17,639 --> 00:34:20,399
files I mean we have sort of uh

935
00:34:20,399 --> 00:34:21,899
different variants for different use

936
00:34:21,899 --> 00:34:23,940
cases some may include glossy to my

937
00:34:23,940 --> 00:34:25,260
knowledge none of them have have open

938
00:34:25,260 --> 00:34:26,760
SSL

939
00:34:26,760 --> 00:34:29,219
um but I know that the open source

940
00:34:29,219 --> 00:34:29,820
um

941
00:34:29,820 --> 00:34:31,980
District list provided by Google some of

942
00:34:31,980 --> 00:34:35,599
those do have openness associated

943
00:34:57,119 --> 00:34:59,520
yeah I think we're actually we're

944
00:34:59,520 --> 00:35:01,560
familiar with this example yeah so the

945
00:35:01,560 --> 00:35:04,080
comment was that uh even if you don't

946
00:35:04,080 --> 00:35:06,720
have a a CLI in your container then

947
00:35:06,720 --> 00:35:08,700
there are some maybe sneaky ways to get

948
00:35:08,700 --> 00:35:10,859
uh something that's kind of close to a

949
00:35:10,859 --> 00:35:12,720
CLI if you have things like openssl

950
00:35:12,720 --> 00:35:14,280
there's a whole website I forget what

951
00:35:14,280 --> 00:35:16,920
the uh I forget what the name is but

952
00:35:16,920 --> 00:35:18,960
there's entire website dedicated to this

953
00:35:18,960 --> 00:35:21,180
premise of just like I have a small

954
00:35:21,180 --> 00:35:23,460
number of tools that aren't shells how

955
00:35:23,460 --> 00:35:25,500
can I turn them into shells and there's

956
00:35:25,500 --> 00:35:28,440
a huge and fairly surprising list of of

957
00:35:28,440 --> 00:35:30,720
things that you can do that with yeah

958
00:35:30,720 --> 00:35:32,700
uh but you know like I I think that's

959
00:35:32,700 --> 00:35:34,800
like everything that not having the

960
00:35:34,800 --> 00:35:36,060
shell is making the attacker's job

961
00:35:36,060 --> 00:35:37,619
harder it's also making my job as a

962
00:35:37,619 --> 00:35:39,480
Defender easier uh because I have less

963
00:35:39,480 --> 00:35:41,099
things to patch so it's just win-win

964
00:35:41,099 --> 00:35:43,800
anyway uh even if there is a like

965
00:35:43,800 --> 00:35:47,359
there's still a way uh

966
00:35:48,720 --> 00:35:50,720
yeah yeah

967
00:36:03,780 --> 00:36:05,220
David

968
00:36:05,220 --> 00:36:09,379
and all the other ones who knock out 20

969
00:36:09,720 --> 00:36:12,060
can I look at it that way

970
00:36:12,060 --> 00:36:15,078
that way you know that example was

971
00:36:15,420 --> 00:36:17,220
yeah yeah so what do we do about

972
00:36:17,220 --> 00:36:19,560
dependencies so I think like uh for us

973
00:36:19,560 --> 00:36:22,260
in particular and the example was like

974
00:36:22,260 --> 00:36:23,880
uh you know if there's a critical

975
00:36:23,880 --> 00:36:25,740
somewhere sort of like deep in the chain

976
00:36:25,740 --> 00:36:27,839
but there's maybe a low that will like

977
00:36:27,839 --> 00:36:30,060
fix that critical and sort of hidden uh

978
00:36:30,060 --> 00:36:31,800
so I think it probably comes down to

979
00:36:31,800 --> 00:36:34,200
like what your scanners can tell you uh

980
00:36:34,200 --> 00:36:36,839
uh for like in terms of like the some

981
00:36:36,839 --> 00:36:38,820
what we've tried to do in terms of like

982
00:36:38,820 --> 00:36:40,619
container layers is have the least

983
00:36:40,619 --> 00:36:42,599
number of container layers that even

984
00:36:42,599 --> 00:36:45,359
inside those containers uh and sort of

985
00:36:45,359 --> 00:36:46,980
like talking Beyond things that are like

986
00:36:46,980 --> 00:36:48,720
more complicated than just a go binary

987
00:36:48,720 --> 00:36:51,300
now like you you might have like a full

988
00:36:51,300 --> 00:36:53,599
programming language like a Pi Pi

989
00:36:53,599 --> 00:36:56,460
requirements.txt and other stuff and so

990
00:36:56,460 --> 00:36:57,839
but like scanners are starting to

991
00:36:57,839 --> 00:36:59,400
introspect that stuff now and give you

992
00:36:59,400 --> 00:37:03,060
some like uh some results uh that so

993
00:37:03,060 --> 00:37:04,380
they are getting smarter in that regard

994
00:37:04,380 --> 00:37:06,180
and so I think it's it mostly comes down

995
00:37:06,180 --> 00:37:09,560
to like how good your scanner is

996
00:37:09,960 --> 00:37:12,119
speaking of scanners commissioned a

997
00:37:12,119 --> 00:37:14,460
couple and then you also said we use

998
00:37:14,460 --> 00:37:16,740
almost all of them so which can actually

999
00:37:16,740 --> 00:37:18,839
use yeah we're not going to do product

1000
00:37:18,839 --> 00:37:20,640
recommendations on the scanners yeah

1001
00:37:20,640 --> 00:37:22,320
there's a lot of great scanners out

1002
00:37:22,320 --> 00:37:25,820
there a lot of them are here today yeah

1003
00:37:42,380 --> 00:37:45,839
uh yeah is there any time that you just

1004
00:37:45,839 --> 00:37:48,359
need to go fast and uh you don't have

1005
00:37:48,359 --> 00:37:49,800
time to wait on the full pipeline yeah

1006
00:37:49,800 --> 00:37:52,619
for sure like uh I I think like what

1007
00:37:52,619 --> 00:37:54,119
we're mostly talking about here is sort

1008
00:37:54,119 --> 00:37:56,940
of uh like routine patching that kind of

1009
00:37:56,940 --> 00:37:57,839
stuff but there's definitely like

1010
00:37:57,839 --> 00:38:01,079
emergency situations where it's like all

1011
00:38:01,079 --> 00:38:02,940
the stops are pulled out uh and you go

1012
00:38:02,940 --> 00:38:06,540
as fast as you can and yeah so like you

1013
00:38:06,540 --> 00:38:08,640
know the Google has these sort of like

1014
00:38:08,640 --> 00:38:10,800
release processes where like best

1015
00:38:10,800 --> 00:38:12,359
practices are sort of like rolling out

1016
00:38:12,359 --> 00:38:14,880
over a week rolling out Zone by Zone and

1017
00:38:14,880 --> 00:38:17,460
like lots of like availability safety

1018
00:38:17,460 --> 00:38:20,160
built into things so that if we if

1019
00:38:20,160 --> 00:38:21,420
there's something wrong in that release

1020
00:38:21,420 --> 00:38:23,880
then we affect a small number of people

1021
00:38:23,880 --> 00:38:26,160
uh to start with and we hopefully notice

1022
00:38:26,160 --> 00:38:28,320
and then we can roll it back quickly and

1023
00:38:28,320 --> 00:38:31,740
so you went into really urgent fix then

1024
00:38:31,740 --> 00:38:32,700
you're talking about a different

1025
00:38:32,700 --> 00:38:34,800
different playing field and so like the

1026
00:38:34,800 --> 00:38:36,060
security gets dialed up and the

1027
00:38:36,060 --> 00:38:38,040
availability gets dialed down and sort

1028
00:38:38,040 --> 00:38:40,260
of like how how far you dial each of

1029
00:38:40,260 --> 00:38:41,880
those dials is sort of depends on how

1030
00:38:41,880 --> 00:38:43,500
bad it is but if it's really bad then

1031
00:38:43,500 --> 00:38:45,599
you go really fast and you hope you

1032
00:38:45,599 --> 00:38:47,880
don't break stuff yeah can uh maybe I'll

1033
00:38:47,880 --> 00:38:50,040
add a little there so it I guess if

1034
00:38:50,040 --> 00:38:52,460
you're familiar with the the idea of uh

1035
00:38:52,460 --> 00:38:55,560
ssvc or or stakeholder specific

1036
00:38:55,560 --> 00:38:58,200
vulnerability categorization we we think

1037
00:38:58,200 --> 00:38:59,880
of it kind of like that internally that

1038
00:38:59,880 --> 00:39:01,380
some things

1039
00:39:01,380 --> 00:39:04,020
require an emergency patch some require

1040
00:39:04,020 --> 00:39:06,180
an expedited rollout some can just roll

1041
00:39:06,180 --> 00:39:07,619
out as usual

1042
00:39:07,619 --> 00:39:09,839
um so we sort of map it to those those

1043
00:39:09,839 --> 00:39:11,220
outcomes and I'd say what we're talking

1044
00:39:11,220 --> 00:39:13,320
about here is sort of the the happy path

1045
00:39:13,320 --> 00:39:15,900
and we've we sort of try to optimize

1046
00:39:15,900 --> 00:39:18,240
that happy path and we found that it

1047
00:39:18,240 --> 00:39:20,339
also indirectly helps when we have like

1048
00:39:20,339 --> 00:39:22,500
a break glass situation because those

1049
00:39:22,500 --> 00:39:24,660
tools and presses are in place it's just

1050
00:39:24,660 --> 00:39:26,400
a matter of you know making the the

1051
00:39:26,400 --> 00:39:28,200
deployment take one day instead of seven

1052
00:39:28,200 --> 00:39:31,759
okay that sort of thing

1053
00:39:34,320 --> 00:39:37,099
automated

1054
00:39:40,200 --> 00:39:43,020
oh yeah that's interesting so the

1055
00:39:43,020 --> 00:39:44,280
question is how often does automated

1056
00:39:44,280 --> 00:39:46,980
patching break test or or break prod or

1057
00:39:46,980 --> 00:39:49,920
whatever like I I think the

1058
00:39:49,920 --> 00:39:52,020
for us like we mostly go and we're like

1059
00:39:52,020 --> 00:39:53,520
on these really tiny containers so we

1060
00:39:53,520 --> 00:39:55,079
don't like have a whole ton of like

1061
00:39:55,079 --> 00:39:56,460
dependencies so we're mostly talking

1062
00:39:56,460 --> 00:39:58,140
about like go dependencies breaking us

1063
00:39:58,140 --> 00:40:00,119
uh and so there have been a couple of

1064
00:40:00,119 --> 00:40:03,240
cases where a go-minded version changed

1065
00:40:03,240 --> 00:40:05,520
changed some things and so we're like

1066
00:40:05,520 --> 00:40:08,099
pretty careful about how we like look

1067
00:40:08,099 --> 00:40:10,320
after good minor version changes there's

1068
00:40:10,320 --> 00:40:11,940
also implications for that inside of

1069
00:40:11,940 --> 00:40:14,520
kubernetes uh We've recently Jordan's

1070
00:40:14,520 --> 00:40:17,280
been doing a whole ton of work to move

1071
00:40:17,280 --> 00:40:19,440
kubernetes onto onto modern versions of

1072
00:40:19,440 --> 00:40:21,660
go and do that within a kubernetes minor

1073
00:40:21,660 --> 00:40:24,599
release and that's a bit uh sort of I

1074
00:40:24,599 --> 00:40:26,099
guess more risky than what we've been

1075
00:40:26,099 --> 00:40:27,859
doing before which was we'd only move

1076
00:40:27,859 --> 00:40:31,260
kubernetes upper version only move up a

1077
00:40:31,260 --> 00:40:33,119
Go version when kubernetes moved up a

1078
00:40:33,119 --> 00:40:35,460
minor version as well but that's not

1079
00:40:35,460 --> 00:40:37,740
really keeping patch Pace with the with

1080
00:40:37,740 --> 00:40:41,579
the the patches that we need and so like

1081
00:40:41,579 --> 00:40:44,040
in our experience I like we haven't had

1082
00:40:44,040 --> 00:40:46,020
a time like that I can't think of a like

1083
00:40:46,020 --> 00:40:47,700
automated patching time where we had an

1084
00:40:47,700 --> 00:40:49,859
outage or anything yeah the majority

1085
00:40:49,859 --> 00:40:51,720
here like Greg said these these go

1086
00:40:51,720 --> 00:40:54,540
patches um it typically when we update a

1087
00:40:54,540 --> 00:40:56,460
container it's just a matter of moving

1088
00:40:56,460 --> 00:40:58,020
to a new base image that has slightly

1089
00:40:58,020 --> 00:41:00,060
newer system packages maybe running an

1090
00:41:00,060 --> 00:41:02,280
apt update

1091
00:41:02,280 --> 00:41:04,500
Etc and those are pretty well vetted by

1092
00:41:04,500 --> 00:41:07,260
the vendor uh the the only cases I can

1093
00:41:07,260 --> 00:41:09,900
remember is when we moved like an image

1094
00:41:09,900 --> 00:41:12,599
an entire you know OS minor version and

1095
00:41:12,599 --> 00:41:14,700
there were there were differences and a

1096
00:41:14,700 --> 00:41:16,980
specific package and then they're caught

1097
00:41:16,980 --> 00:41:19,260
fairly early but it I'd say

1098
00:41:19,260 --> 00:41:21,180
to my knowledge I can remember two

1099
00:41:21,180 --> 00:41:23,099
instances in my time my time at Google

1100
00:41:23,099 --> 00:41:26,720
so fairly infrequent

1101
00:41:26,820 --> 00:41:28,940
thank you

1102
00:41:30,180 --> 00:41:32,420
okay

1103
00:41:32,420 --> 00:41:34,620
yeah all right thank you everybody

1104
00:41:34,620 --> 00:41:38,529
[Applause]

