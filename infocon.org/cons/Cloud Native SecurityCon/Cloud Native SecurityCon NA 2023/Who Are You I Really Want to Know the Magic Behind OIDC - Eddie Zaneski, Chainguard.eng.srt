1
00:00:00,120 --> 00:00:02,100
my name is Eddie zanewski I work for a

2
00:00:02,100 --> 00:00:03,300
company called chain guard where we do

3
00:00:03,300 --> 00:00:04,920
software supply chain security for

4
00:00:04,920 --> 00:00:07,259
containers and all the cool kubernetes

5
00:00:07,259 --> 00:00:08,940
stuff that's out there but today we're

6
00:00:08,940 --> 00:00:10,320
telling you to talk about an awesome

7
00:00:10,320 --> 00:00:13,740
thing called oidc and of course I had to

8
00:00:13,740 --> 00:00:16,039
come up with a fun title for this talk

9
00:00:16,039 --> 00:00:19,260
so I can't sing it or else they will

10
00:00:19,260 --> 00:00:22,080
cease and desist the LF so just sing the

11
00:00:22,080 --> 00:00:25,099
song in your head for a minute

12
00:00:25,260 --> 00:00:27,660
so quick bit about me I'm a software

13
00:00:27,660 --> 00:00:28,980
engineer chain guard I mentioned that

14
00:00:28,980 --> 00:00:30,420
you can find me on the Internet it's at

15
00:00:30,420 --> 00:00:31,740
Eddie Zane

16
00:00:31,740 --> 00:00:33,960
I live in Denver Colorado and I like to

17
00:00:33,960 --> 00:00:36,239
climb big mountains I'm a maintainer for

18
00:00:36,239 --> 00:00:37,860
the kubernetes and six store projects so

19
00:00:37,860 --> 00:00:39,300
I work on Cube control and all things

20
00:00:39,300 --> 00:00:41,100
CLI so

21
00:00:41,100 --> 00:00:43,020
you can at me

22
00:00:43,020 --> 00:00:45,120
um in Sig store I work on a tool called

23
00:00:45,120 --> 00:00:46,500
git sign which we'll take a look at in a

24
00:00:46,500 --> 00:00:49,559
bit and I am not a cryptographer or a

25
00:00:49,559 --> 00:00:51,300
security engineer just throwing that out

26
00:00:51,300 --> 00:00:53,039
there right so take all of your advice

27
00:00:53,039 --> 00:00:54,660
as it will

28
00:00:54,660 --> 00:00:57,719
again I need to do a disclaimer uh I

29
00:00:57,719 --> 00:00:59,520
know nothing about this except that it's

30
00:00:59,520 --> 00:01:02,219
fun and cool and I've spent a lot of

31
00:01:02,219 --> 00:01:04,260
time playing with it but again don't

32
00:01:04,260 --> 00:01:05,820
take advice from me in a production

33
00:01:05,820 --> 00:01:07,680
world

34
00:01:07,680 --> 00:01:09,360
so the first thing we have to talk about

35
00:01:09,360 --> 00:01:11,939
is I'm sure I've seen slides in almost

36
00:01:11,939 --> 00:01:13,920
every talk for this is authentication

37
00:01:13,920 --> 00:01:16,680
versus authorization are folks familiar

38
00:01:16,680 --> 00:01:17,880
with the difference here we don't spend

39
00:01:17,880 --> 00:01:20,340
too long on it okay we'll mention it so

40
00:01:20,340 --> 00:01:22,680
authentication is generally who you are

41
00:01:22,680 --> 00:01:24,780
authorization is what you're allowed to

42
00:01:24,780 --> 00:01:27,479
do OCTA has some really good docs on

43
00:01:27,479 --> 00:01:28,979
this if you want to check those out and

44
00:01:28,979 --> 00:01:31,619
I have a link to the slides at the end

45
00:01:31,619 --> 00:01:33,299
but it's that specification so we

46
00:01:33,299 --> 00:01:36,659
usually call this authen and ALT C

47
00:01:36,659 --> 00:01:41,340
and so rewind back to 2007 this is also

48
00:01:41,340 --> 00:01:44,579
from an OCTA blog post but this was how

49
00:01:44,579 --> 00:01:48,240
Yelp would check your contact list for

50
00:01:48,240 --> 00:01:50,939
uh if your friends were also signed into

51
00:01:50,939 --> 00:01:52,740
Yelp right this is before the days of

52
00:01:52,740 --> 00:01:55,140
oauth and you would check your little

53
00:01:55,140 --> 00:01:57,180
email service provider give them your

54
00:01:57,180 --> 00:01:58,979
username and password which they would

55
00:01:58,979 --> 00:02:01,439
just make requests directly and scrape a

56
00:02:01,439 --> 00:02:03,960
bunch of stuff probably We've Come Away

57
00:02:03,960 --> 00:02:05,520
since then there's obviously a problem

58
00:02:05,520 --> 00:02:07,220
doing it this way

59
00:02:07,220 --> 00:02:09,959
and so that's what led us to uh

60
00:02:09,959 --> 00:02:12,900
something we like to call oauth right

61
00:02:12,900 --> 00:02:14,879
and so you've all probably used oauth

62
00:02:14,879 --> 00:02:16,260
before

63
00:02:16,260 --> 00:02:18,300
right I'm assuming everyone has you've

64
00:02:18,300 --> 00:02:19,560
signed in with the service provider

65
00:02:19,560 --> 00:02:22,200
before so here I am signing in with my

66
00:02:22,200 --> 00:02:24,780
Google account and you can see the

67
00:02:24,780 --> 00:02:27,480
Scopes and all the things that uh this

68
00:02:27,480 --> 00:02:29,220
app is requesting so access to my

69
00:02:29,220 --> 00:02:31,260
calendar all these things are just

70
00:02:31,260 --> 00:02:33,900
Scopes in a a docs file that this app

71
00:02:33,900 --> 00:02:35,340
pulled in and said I would like these

72
00:02:35,340 --> 00:02:38,340
permissions on behalf of this user

73
00:02:38,340 --> 00:02:40,379
same thing here with Spotify and GitHub

74
00:02:40,379 --> 00:02:43,920
uh Spotify is asking for permission to

75
00:02:43,920 --> 00:02:46,260
read my email and my play history in

76
00:02:46,260 --> 00:02:48,060
there and GitHub can request all the

77
00:02:48,060 --> 00:02:50,340
orgs that I have access to right so

78
00:02:50,340 --> 00:02:52,019
basic stuff that we've all worked

79
00:02:52,019 --> 00:02:54,900
through oauth to me was scary for a long

80
00:02:54,900 --> 00:02:56,220
time was one of those things that you

81
00:02:56,220 --> 00:02:58,260
touched as a kid in a hackathon and

82
00:02:58,260 --> 00:02:59,760
didn't really want to understand or have

83
00:02:59,760 --> 00:03:01,680
to deal with again

84
00:03:01,680 --> 00:03:03,660
um but it's really not that bad but the

85
00:03:03,660 --> 00:03:04,920
real thing behind oauth is that it's

86
00:03:04,920 --> 00:03:06,840
designed for authorization it was not

87
00:03:06,840 --> 00:03:08,940
designed for authentication which is

88
00:03:08,940 --> 00:03:10,440
what a lot of providers and a lot of

89
00:03:10,440 --> 00:03:13,140
websites have used it for

90
00:03:13,140 --> 00:03:14,700
uh the idea is that there is some

91
00:03:14,700 --> 00:03:16,800
resource provider that has a resource

92
00:03:16,800 --> 00:03:19,260
typically owned by another user and

93
00:03:19,260 --> 00:03:21,959
oauth allows you to access that resource

94
00:03:21,959 --> 00:03:23,640
on behalf of that user right so this

95
00:03:23,640 --> 00:03:26,700
user grants you permissions to do that

96
00:03:26,700 --> 00:03:29,099
there's different flows as part of oauth

97
00:03:29,099 --> 00:03:30,360
and some of these I didn't actually know

98
00:03:30,360 --> 00:03:31,800
about until I started researching it

99
00:03:31,800 --> 00:03:33,540
authorization flow is the one that

100
00:03:33,540 --> 00:03:34,920
you're most familiar with this is where

101
00:03:34,920 --> 00:03:37,440
you go through that consent form where

102
00:03:37,440 --> 00:03:39,599
you can get a code back and that code

103
00:03:39,599 --> 00:03:41,459
either has like a refresh token that can

104
00:03:41,459 --> 00:03:43,260
be used to refresh and make long-lived

105
00:03:43,260 --> 00:03:44,280
requests

106
00:03:44,280 --> 00:03:46,080
client credentials are machine to

107
00:03:46,080 --> 00:03:47,580
machine identity so this is where your

108
00:03:47,580 --> 00:03:50,879
oath application would authenticate just

109
00:03:50,879 --> 00:03:53,159
to the API and get a token it can use so

110
00:03:53,159 --> 00:03:56,280
not accessing users data

111
00:03:56,280 --> 00:03:58,620
device flow so if you've ever had to

112
00:03:58,620 --> 00:04:01,080
type a code in from a thing on a command

113
00:04:01,080 --> 00:04:02,459
line which says open this thing and type

114
00:04:02,459 --> 00:04:04,680
this code in or if you've signed into

115
00:04:04,680 --> 00:04:08,099
Netflix or Hulu on your Google TV or

116
00:04:08,099 --> 00:04:09,780
something and it shows you the code that

117
00:04:09,780 --> 00:04:12,540
you can go to netflix.com activate and

118
00:04:12,540 --> 00:04:14,640
type in that's actually the oauth device

119
00:04:14,640 --> 00:04:16,620
flow behind the scenes

120
00:04:16,620 --> 00:04:18,358
uh and then there's the implicit flow

121
00:04:18,358 --> 00:04:20,180
which is for client-side applications

122
00:04:20,180 --> 00:04:22,500
this is typically discouraged because

123
00:04:22,500 --> 00:04:24,479
it's all client-side this is where you

124
00:04:24,479 --> 00:04:25,800
don't have secrets that you can keep

125
00:04:25,800 --> 00:04:27,780
from the user so the industry is trying

126
00:04:27,780 --> 00:04:30,780
to move away from this implicit flow

127
00:04:30,780 --> 00:04:32,340
all these oops requests have these

128
00:04:32,340 --> 00:04:33,900
things called Scopes they are just

129
00:04:33,900 --> 00:04:36,000
arbitrary strings to the provider that

130
00:04:36,000 --> 00:04:37,500
they make up whatever the hell they want

131
00:04:37,500 --> 00:04:39,440
and they represent certain permissions

132
00:04:39,440 --> 00:04:42,660
so the user read email is from Spotify

133
00:04:42,660 --> 00:04:44,580
that's one of the Scopes you can request

134
00:04:44,580 --> 00:04:47,240
if you're using OCTA you can

135
00:04:47,240 --> 00:04:49,380
octa.uses.read as the scope

136
00:04:49,380 --> 00:04:51,840
or if you're using Google and the the

137
00:04:51,840 --> 00:04:54,120
Google Sheets API they just throw a URL

138
00:04:54,120 --> 00:04:56,280
at you so completely arbitrary things

139
00:04:56,280 --> 00:04:58,500
that the provider decides on

140
00:04:58,500 --> 00:05:01,320
and if we look at this

141
00:05:01,320 --> 00:05:03,600
these are the Google Docs they have all

142
00:05:03,600 --> 00:05:05,639
of their Scopes in a single dock which

143
00:05:05,639 --> 00:05:07,560
is really cool so you can come in and

144
00:05:07,560 --> 00:05:09,900
find the service that you want see the

145
00:05:09,900 --> 00:05:11,580
different scope permissions that you can

146
00:05:11,580 --> 00:05:12,320
get

147
00:05:12,320 --> 00:05:15,840
you can access read-only Fitness data so

148
00:05:15,840 --> 00:05:19,020
it's pretty cool that it's all in there

149
00:05:19,020 --> 00:05:20,759
and then

150
00:05:20,759 --> 00:05:23,520
a oauth URL for that authorization flow

151
00:05:23,520 --> 00:05:25,139
that you've all probably used at some

152
00:05:25,139 --> 00:05:27,180
point this is what one of those URLs

153
00:05:27,180 --> 00:05:28,500
looks like so this is kind of the magic

154
00:05:28,500 --> 00:05:30,720
behind the scenes is your web server

155
00:05:30,720 --> 00:05:33,720
would construct this URL you can see

156
00:05:33,720 --> 00:05:36,180
that there's the path in there oauth 2

157
00:05:36,180 --> 00:05:39,660
V2 auth client ID which is kind of a

158
00:05:39,660 --> 00:05:42,479
username for your oauth client it sticks

159
00:05:42,479 --> 00:05:45,600
in a redirect URI that's one of the the

160
00:05:45,600 --> 00:05:47,280
other confusing things when you're a kid

161
00:05:47,280 --> 00:05:48,720
at a hackathon you don't understand how

162
00:05:48,720 --> 00:05:51,000
it works so that's kind of just where

163
00:05:51,000 --> 00:05:53,280
Google is going to redirect the request

164
00:05:53,280 --> 00:05:55,259
with your actual code that can be pulled

165
00:05:55,259 --> 00:05:56,580
out

166
00:05:56,580 --> 00:05:59,520
and response type code some other Scopes

167
00:05:59,520 --> 00:06:02,580
in there right so if I click this link

168
00:06:02,580 --> 00:06:05,220
you'll see that

169
00:06:05,220 --> 00:06:07,500
it will

170
00:06:07,500 --> 00:06:10,320
bring me to a very similar pop-up I have

171
00:06:10,320 --> 00:06:12,479
to pick a Google account and then I have

172
00:06:12,479 --> 00:06:14,400
to allow permission to use my Sheets app

173
00:06:14,400 --> 00:06:16,080
cool right and so if I click allow this

174
00:06:16,080 --> 00:06:18,539
is going to 404 because it's redirecting

175
00:06:18,539 --> 00:06:19,979
me to a web server that's not actually

176
00:06:19,979 --> 00:06:22,259
listening but in the URI here there is a

177
00:06:22,259 --> 00:06:24,840
code that my web app would grab and

178
00:06:24,840 --> 00:06:27,060
trade for a actual token so kind of the

179
00:06:27,060 --> 00:06:30,180
back end part of this secret state

180
00:06:30,180 --> 00:06:32,460
cool makes sense you can't talk about

181
00:06:32,460 --> 00:06:36,080
ogc without talking about oauth

182
00:06:36,360 --> 00:06:39,840
and so if you ever go and create a oauth

183
00:06:39,840 --> 00:06:41,880
app somewhere this is uh creating one in

184
00:06:41,880 --> 00:06:43,800
Octa you get that client ID which is

185
00:06:43,800 --> 00:06:45,419
kind of your username it identifies your

186
00:06:45,419 --> 00:06:47,340
client that's public and then the client

187
00:06:47,340 --> 00:06:49,620
secret which is locked and kept on the

188
00:06:49,620 --> 00:06:51,419
back end that's what you would use along

189
00:06:51,419 --> 00:06:53,280
with that front-end browser code to

190
00:06:53,280 --> 00:06:55,860
trade for an actual access token and you

191
00:06:55,860 --> 00:06:58,080
can see here there's some of those

192
00:06:58,080 --> 00:07:00,360
um callback Uris that you'd have to

193
00:07:00,360 --> 00:07:01,800
specify so this would be your production

194
00:07:01,800 --> 00:07:04,680
web application callback

195
00:07:04,680 --> 00:07:06,660
this is a documentation of what that

196
00:07:06,660 --> 00:07:08,580
flow looks like also from OCTA they have

197
00:07:08,580 --> 00:07:10,979
some really great Docs

198
00:07:10,979 --> 00:07:13,139
glance over pretty quickly you hit that

199
00:07:13,139 --> 00:07:15,060
authorized endpoint redirects you back

200
00:07:15,060 --> 00:07:17,280
you get that consent which is the pop-up

201
00:07:17,280 --> 00:07:19,740
I showed you got that authorization code

202
00:07:19,740 --> 00:07:22,380
server will post that to token with your

203
00:07:22,380 --> 00:07:24,539
secret from the back end you'll get that

204
00:07:24,539 --> 00:07:27,180
access token back and refresh token so

205
00:07:27,180 --> 00:07:29,099
you can renew it once it expires and

206
00:07:29,099 --> 00:07:30,479
then you can use that access token to

207
00:07:30,479 --> 00:07:32,460
make API requests on behalf of that user

208
00:07:32,460 --> 00:07:34,139
so that's what you would save

209
00:07:34,139 --> 00:07:36,660
pretty straightforward

210
00:07:36,660 --> 00:07:40,020
and so I have a quick demo of that

211
00:07:40,020 --> 00:07:42,479
so I have a Spotify

212
00:07:42,479 --> 00:07:44,580
webflow here

213
00:07:44,580 --> 00:07:48,000
and any go developers in the room yeah

214
00:07:48,000 --> 00:07:50,220
quite a few go has some really great

215
00:07:50,220 --> 00:07:52,259
unique oauth libraries that are part of

216
00:07:52,259 --> 00:07:54,840
the standard library for the most part I

217
00:07:54,840 --> 00:07:56,039
got secrets in here that I'm going to

218
00:07:56,039 --> 00:07:58,039
delete afterwards so whatever

219
00:07:58,039 --> 00:08:00,960
and so it's pretty simple I hit that

220
00:08:00,960 --> 00:08:03,539
oauth URL on my flash login it's got

221
00:08:03,539 --> 00:08:05,220
that redirect

222
00:08:05,220 --> 00:08:09,300
it's going to redirect you to a URL

223
00:08:09,300 --> 00:08:11,880
that's constructed from my provider

224
00:08:11,880 --> 00:08:13,560
that's going to take me to the browser

225
00:08:13,560 --> 00:08:15,660
browsers after I consent is going to

226
00:08:15,660 --> 00:08:17,940
send me to this oauth callback one I

227
00:08:17,940 --> 00:08:19,860
grab the code out of the URL parameters

228
00:08:19,860 --> 00:08:22,740
do some error checking call this magic

229
00:08:22,740 --> 00:08:24,539
exchange method which is what takes my

230
00:08:24,539 --> 00:08:27,000
secret and posts it for that token cool

231
00:08:27,000 --> 00:08:29,400
cool and then I'm hitting the slash me

232
00:08:29,400 --> 00:08:31,740
endpoint on Spotify right so

233
00:08:31,740 --> 00:08:33,419
very straightforward so I'm just going

234
00:08:33,419 --> 00:08:35,838
to run this

235
00:08:38,580 --> 00:08:41,700
so we'll hit localhost

236
00:08:41,700 --> 00:08:44,700
log in right there's that prompt I'm

237
00:08:44,700 --> 00:08:47,220
going to agree and allow and then we get

238
00:08:47,220 --> 00:08:49,440
my profile information cool very

239
00:08:49,440 --> 00:08:51,480
straightforward right

240
00:08:51,480 --> 00:08:53,220
so that's a regular oil flow that's a

241
00:08:53,220 --> 00:08:54,720
regular oauth application so what is

242
00:08:54,720 --> 00:08:57,440
oidc

243
00:08:59,519 --> 00:09:01,440
that's the flow we went through just

244
00:09:01,440 --> 00:09:03,120
quick diagram of it if you want to look

245
00:09:03,120 --> 00:09:05,160
later in the slides oh one more thing

246
00:09:05,160 --> 00:09:07,440
get signed demo right so git sign is a

247
00:09:07,440 --> 00:09:09,360
project from Sig store which is uh

248
00:09:09,360 --> 00:09:13,440
artifact signing and so I have a a git

249
00:09:13,440 --> 00:09:15,360
repo here that I can commit and it's

250
00:09:15,360 --> 00:09:17,100
going to use git sign which will sign my

251
00:09:17,100 --> 00:09:21,600
git commit with uh with Sig store and

252
00:09:21,600 --> 00:09:23,339
this is something you'll see in a lot of

253
00:09:23,339 --> 00:09:24,779
developer tools where you'll do

254
00:09:24,779 --> 00:09:27,660
something it'll pop out a URL open your

255
00:09:27,660 --> 00:09:29,700
browser what it's actually doing is

256
00:09:29,700 --> 00:09:31,260
running a local web server listening for

257
00:09:31,260 --> 00:09:32,820
that callback which is really cool so

258
00:09:32,820 --> 00:09:34,320
you use oauth a ton you might not

259
00:09:34,320 --> 00:09:36,300
realize it so I'm going to authorize a

260
00:09:36,300 --> 00:09:38,640
Google it's going to that's a new page

261
00:09:38,640 --> 00:09:40,980
that's nice and it's going to give it

262
00:09:40,980 --> 00:09:43,080
back to git sign sign that commit cool

263
00:09:43,080 --> 00:09:45,899
right gcloud does this too if you log in

264
00:09:45,899 --> 00:09:48,779
with the gcloud CLI a lot of tools use

265
00:09:48,779 --> 00:09:51,240
this mechanism to get a code to a CLI

266
00:09:51,240 --> 00:09:55,380
tool from your browser very neat

267
00:09:55,380 --> 00:09:58,339
and then

268
00:09:59,100 --> 00:10:01,500
so but there's issues with the loss it

269
00:10:01,500 --> 00:10:03,800
was again originally designed for

270
00:10:03,800 --> 00:10:06,120
authorization not authentication which

271
00:10:06,120 --> 00:10:07,680
is what a lot of people started using it

272
00:10:07,680 --> 00:10:08,880
for I don't actually want to access

273
00:10:08,880 --> 00:10:10,680
resources on your behalf I just want to

274
00:10:10,680 --> 00:10:11,820
know who you are and give you an easy

275
00:10:11,820 --> 00:10:14,880
way to log into my application

276
00:10:14,880 --> 00:10:16,800
there are no standard Scopes as I showed

277
00:10:16,800 --> 00:10:19,200
before right arbitrary strings you don't

278
00:10:19,200 --> 00:10:20,839
know what one provider is going to do

279
00:10:20,839 --> 00:10:24,420
some have different crazy stuff in there

280
00:10:24,420 --> 00:10:26,339
there was no standard who am I in point

281
00:10:26,339 --> 00:10:27,959
right that endpoint I hit from Spotify

282
00:10:27,959 --> 00:10:32,339
was like slash API slash V1 me uh there

283
00:10:32,339 --> 00:10:34,080
was no standard way for you to know who

284
00:10:34,080 --> 00:10:36,720
you had an API token for

285
00:10:36,720 --> 00:10:38,040
and again these are Long Live

286
00:10:38,040 --> 00:10:39,959
credentials right so the root of all

287
00:10:39,959 --> 00:10:41,339
evil we all know this we don't want to

288
00:10:41,339 --> 00:10:42,480
provision these things and have them

289
00:10:42,480 --> 00:10:43,920
sitting around all right I already

290
00:10:43,920 --> 00:10:45,839
leaked my Spotify credentials by showing

291
00:10:45,839 --> 00:10:48,060
you that file

292
00:10:48,060 --> 00:10:51,060
and so Discovery is another mechanism in

293
00:10:51,060 --> 00:10:53,160
here there is actually oauth discovery

294
00:10:53,160 --> 00:10:55,560
which I'll show you a bit later but that

295
00:10:55,560 --> 00:10:58,620
matters a bit more with oidc

296
00:10:58,620 --> 00:11:01,860
uh Spotify has this endpoint that you

297
00:11:01,860 --> 00:11:04,140
can hit it's well-known oauth

298
00:11:04,140 --> 00:11:06,420
authorization server and this kind of

299
00:11:06,420 --> 00:11:08,880
tells you about their oauth provider

300
00:11:08,880 --> 00:11:11,220
which is neat this isn't used as much

301
00:11:11,220 --> 00:11:14,040
honestly as it is in the oidc world but

302
00:11:14,040 --> 00:11:16,079
here you can know that's where you send

303
00:11:16,079 --> 00:11:19,079
a user to get a token and there's a

304
00:11:19,079 --> 00:11:21,120
slash token endpoint some here that's

305
00:11:21,120 --> 00:11:22,500
that tells you where you would post this

306
00:11:22,500 --> 00:11:26,519
to so a bit of an afterthought

307
00:11:26,519 --> 00:11:30,000
cool so enter oidc so oidc stands for

308
00:11:30,000 --> 00:11:31,860
open ID connect open ID was another form

309
00:11:31,860 --> 00:11:34,800
of authentication that kind of got shut

310
00:11:34,800 --> 00:11:36,360
down by a lot of people it was a way to

311
00:11:36,360 --> 00:11:39,060
have Federated logins but it kind of was

312
00:11:39,060 --> 00:11:40,620
replaced with oauth and then brought

313
00:11:40,620 --> 00:11:43,740
back again through oidc it is an

314
00:11:43,740 --> 00:11:45,540
extension to olap so it's a thin layer

315
00:11:45,540 --> 00:11:47,640
built on top of oauth

316
00:11:47,640 --> 00:11:50,399
it uses Json web tokens it has this

317
00:11:50,399 --> 00:11:52,500
concept of an ID token so along with

318
00:11:52,500 --> 00:11:54,120
that access token you would get back you

319
00:11:54,120 --> 00:11:56,100
would get back an ID token and this is

320
00:11:56,100 --> 00:11:57,540
supposed to contain information about

321
00:11:57,540 --> 00:12:00,720
the user by itself as a standalone

322
00:12:00,720 --> 00:12:02,640
it also introduced the standard user

323
00:12:02,640 --> 00:12:04,740
info endpoint so everything that's oidc

324
00:12:04,740 --> 00:12:06,779
compatible should have a user endpoint

325
00:12:06,779 --> 00:12:08,519
and a user info and point that you can

326
00:12:08,519 --> 00:12:10,260
hit with that access token to get back

327
00:12:10,260 --> 00:12:12,000
to that identity token and information

328
00:12:12,000 --> 00:12:14,040
about a user

329
00:12:14,040 --> 00:12:16,079
it comes with a standard set of Scopes

330
00:12:16,079 --> 00:12:19,380
open ID is the scope that you introduced

331
00:12:19,380 --> 00:12:21,000
that's pretty much the only magic behind

332
00:12:21,000 --> 00:12:23,220
getting an oidc token from a oauth

333
00:12:23,220 --> 00:12:24,779
provider usually is you have to stick in

334
00:12:24,779 --> 00:12:28,860
the open ID scope the profile scope and

335
00:12:28,860 --> 00:12:31,079
I mentioned Discovery before so IDC has

336
00:12:31,079 --> 00:12:32,760
well-known discovery

337
00:12:32,760 --> 00:12:35,339
which I'll show in a second uh quick

338
00:12:35,339 --> 00:12:37,440
breakdown of Json web tokens you may

339
00:12:37,440 --> 00:12:39,360
have seen before usually called jots

340
00:12:39,360 --> 00:12:41,820
there's three big section in it it has a

341
00:12:41,820 --> 00:12:43,740
header the header contains the algorithm

342
00:12:43,740 --> 00:12:46,560
the key ID what it was signed with all

343
00:12:46,560 --> 00:12:49,019
that jazz it has a section called

344
00:12:49,019 --> 00:12:51,300
payloads or claims this is actually what

345
00:12:51,300 --> 00:12:53,459
is assigned so this holds the

346
00:12:53,459 --> 00:12:55,740
information about the token who it's for

347
00:12:55,740 --> 00:12:58,620
who created it how long it lasts for and

348
00:12:58,620 --> 00:13:00,120
then there's that signature which is the

349
00:13:00,120 --> 00:13:01,800
first two parts put together and kind of

350
00:13:01,800 --> 00:13:05,100
sign with an RSA signature

351
00:13:05,100 --> 00:13:07,740
uh the claims section there's some

352
00:13:07,740 --> 00:13:08,940
pretty standard claims that we use

353
00:13:08,940 --> 00:13:11,700
everywhere a subject or sub this is the

354
00:13:11,700 --> 00:13:13,019
client ID that you would usually use

355
00:13:13,019 --> 00:13:15,000
throw off so this identifies who this

356
00:13:15,000 --> 00:13:18,240
token is is for who owns this token

357
00:13:18,240 --> 00:13:20,160
um the audience field this is who the

358
00:13:20,160 --> 00:13:22,200
token is intended for so that auth's

359
00:13:22,200 --> 00:13:25,139
over so who should accept this token

360
00:13:25,139 --> 00:13:28,320
the issuer this is who who minted this

361
00:13:28,320 --> 00:13:29,760
token who created this token so

362
00:13:29,760 --> 00:13:33,600
accounts.google.com accounts.spotify.com

363
00:13:33,600 --> 00:13:37,620
issued at timestamp expires time stamp

364
00:13:37,620 --> 00:13:40,980
and then this jsonweb token.io site's

365
00:13:40,980 --> 00:13:42,899
pretty great so you can come in here and

366
00:13:42,899 --> 00:13:45,120
paste the token in and see the breakdown

367
00:13:45,120 --> 00:13:46,800
of what it looks like decoded so you can

368
00:13:46,800 --> 00:13:48,420
see the algorithm that this is signed

369
00:13:48,420 --> 00:13:51,260
with the type of token uh the subject

370
00:13:51,260 --> 00:13:53,940
arbitrary field called name and then

371
00:13:53,940 --> 00:13:56,339
when this was issued and then you can

372
00:13:56,339 --> 00:13:58,680
verify the signature

373
00:13:58,680 --> 00:14:01,019
so cool that's the Json web token and

374
00:14:01,019 --> 00:14:03,120
there's also step CLI which is rad if

375
00:14:03,120 --> 00:14:04,639
you want to do this on the command line

376
00:14:04,639 --> 00:14:08,639
you can use a step CLI the folks over at

377
00:14:08,639 --> 00:14:09,860
step

378
00:14:09,860 --> 00:14:12,660
crypto Json web token inspect insecure

379
00:14:12,660 --> 00:14:13,800
because we're not going to verify the

380
00:14:13,800 --> 00:14:15,899
signature and it'll print out the same

381
00:14:15,899 --> 00:14:17,639
thing so those are tools that we're

382
00:14:17,639 --> 00:14:19,940
going to use

383
00:14:21,600 --> 00:14:23,940
uh and then I have an OCTA demo to show

384
00:14:23,940 --> 00:14:26,720
what this looks like

385
00:14:30,000 --> 00:14:31,980
so I stood up a development environment

386
00:14:31,980 --> 00:14:34,380
for OCTA uh very straightforward stuff

387
00:14:34,380 --> 00:14:37,560
so this is a full proper two-spec oidc

388
00:14:37,560 --> 00:14:39,600
flow right so this shows the oauth

389
00:14:39,600 --> 00:14:42,480
endpoint URL it's got my client ID in

390
00:14:42,480 --> 00:14:44,880
there response type blah blah blah

391
00:14:44,880 --> 00:14:48,500
callback and then the Scopes it shows

392
00:14:48,500 --> 00:14:52,620
profile open ID and email

393
00:14:52,620 --> 00:14:54,540
start up a server same thing as before

394
00:14:54,540 --> 00:14:58,680
call back at that code trade it out

395
00:14:58,680 --> 00:15:01,380
more credentials to leak

396
00:15:01,380 --> 00:15:04,019
grab the access token grab the ID token

397
00:15:04,019 --> 00:15:05,459
right so you get both back when you have

398
00:15:05,459 --> 00:15:07,680
these in your Scopes and then I'm making

399
00:15:07,680 --> 00:15:10,019
a request to that standard user info

400
00:15:10,019 --> 00:15:11,279
endpoint

401
00:15:11,279 --> 00:15:14,540
so let's run that

402
00:15:16,920 --> 00:15:19,440
and we're going to go localhost login

403
00:15:19,440 --> 00:15:21,899
it's got a semi to OCTA

404
00:15:21,899 --> 00:15:24,540
this is just a development instance so

405
00:15:24,540 --> 00:15:27,860
there's nothing actually in here

406
00:15:28,740 --> 00:15:30,540
don't actually leak this one this is

407
00:15:30,540 --> 00:15:32,399
important

408
00:15:32,399 --> 00:15:36,480
there we go sign in get that call back

409
00:15:36,480 --> 00:15:38,940
cool so here we have the access token

410
00:15:38,940 --> 00:15:41,399
that came back

411
00:15:41,399 --> 00:15:43,139
so we can take a look at that OCTA

412
00:15:43,139 --> 00:15:45,420
actually uses a Json web token as their

413
00:15:45,420 --> 00:15:47,760
access token there's nothing wrong with

414
00:15:47,760 --> 00:15:50,100
doing that it's just they're using that

415
00:15:50,100 --> 00:15:52,440
as a mechanism instead of sending you

416
00:15:52,440 --> 00:15:54,300
some arbitrary API key

417
00:15:54,300 --> 00:15:56,579
so we can pop that in here

418
00:15:56,579 --> 00:15:58,800
see the key ID that it was signed with

419
00:15:58,800 --> 00:16:01,260
the algorithm information about me

420
00:16:01,260 --> 00:16:04,860
here's the issuer my OCTA domain

421
00:16:04,860 --> 00:16:07,199
uh the Scopes that are on it the subject

422
00:16:07,199 --> 00:16:10,199
that's my email cool

423
00:16:10,199 --> 00:16:12,600
and then we can look at the

424
00:16:12,600 --> 00:16:15,660
actual ID token that came back

425
00:16:15,660 --> 00:16:17,519
which will have a bit more I sat down

426
00:16:17,519 --> 00:16:19,680
and compared the two again OCTA is a

427
00:16:19,680 --> 00:16:21,120
special case where they use the Json web

428
00:16:21,120 --> 00:16:23,399
token for both but this has a bit more

429
00:16:23,399 --> 00:16:26,100
information about me as a person so it

430
00:16:26,100 --> 00:16:29,279
has my preferred username I was trying

431
00:16:29,279 --> 00:16:30,959
to get like my city and stuff in here I

432
00:16:30,959 --> 00:16:32,160
couldn't figure out how to do that right

433
00:16:32,160 --> 00:16:33,899
but this would identify me as a user

434
00:16:33,899 --> 00:16:35,519
same kind of stuff there's the audience

435
00:16:35,519 --> 00:16:40,320
that's my user ID and OCTA the subject

436
00:16:40,320 --> 00:16:43,339
so cool

437
00:16:43,440 --> 00:16:45,899
and then below was that user info

438
00:16:45,899 --> 00:16:47,279
endpoint right so pretty much the same

439
00:16:47,279 --> 00:16:48,779
stuff that's in there just turned into a

440
00:16:48,779 --> 00:16:50,279
Json web token see this one has more

441
00:16:50,279 --> 00:16:55,040
info like my time zone stuff

442
00:16:56,220 --> 00:16:58,440
so oidc I mentioned this concept of

443
00:16:58,440 --> 00:17:00,000
Discovery this is where it's really cool

444
00:17:00,000 --> 00:17:01,380
and how it's pretty compatible for

445
00:17:01,380 --> 00:17:03,600
anybody you have an issuer that

446
00:17:03,600 --> 00:17:05,339
someplace that mints tokens right so

447
00:17:05,339 --> 00:17:07,140
fills in those claims gives them on

448
00:17:07,140 --> 00:17:08,819
behalf of a trusted user signs that

449
00:17:08,819 --> 00:17:11,119
thing ships it off

450
00:17:11,119 --> 00:17:14,699
accounts.google.com is Google's issuer

451
00:17:14,699 --> 00:17:17,040
there's this well-known field which is

452
00:17:17,040 --> 00:17:18,540
really neat so this is where you can go

453
00:17:18,540 --> 00:17:21,359
check out the open ID configuration for

454
00:17:21,359 --> 00:17:23,280
any sort of Provider that's just public

455
00:17:23,280 --> 00:17:25,020
information

456
00:17:25,020 --> 00:17:27,119
so I like showing Googles

457
00:17:27,119 --> 00:17:29,160
so Google shows their issuer

458
00:17:29,160 --> 00:17:31,140
authorization endpoint same thing with

459
00:17:31,140 --> 00:17:34,080
the the oauth I showed before but uh

460
00:17:34,080 --> 00:17:36,720
it's used a lot more in oidc so if you

461
00:17:36,720 --> 00:17:38,820
go to attach this to a service or

462
00:17:38,820 --> 00:17:40,559
provider it's saying hey trust my

463
00:17:40,559 --> 00:17:42,720
identity provider it's going to go and

464
00:17:42,720 --> 00:17:44,700
actually grab this take a fingerprint of

465
00:17:44,700 --> 00:17:46,140
it and that's how it's going to save and

466
00:17:46,140 --> 00:17:49,260
you know register if anything changes

467
00:17:49,260 --> 00:17:51,299
a couple other bits raised with a token

468
00:17:51,299 --> 00:17:53,580
endpoint

469
00:17:53,580 --> 00:17:55,919
the claims that it supports some of some

470
00:17:55,919 --> 00:17:57,419
providers don't do this and some don't

471
00:17:57,419 --> 00:17:59,520
respect the claims in the first place

472
00:17:59,520 --> 00:18:01,860
the token types that hands out Jason

473
00:18:01,860 --> 00:18:03,900
Webb Bearer token right all that stuff

474
00:18:03,900 --> 00:18:05,460
always the field I'm actually looking

475
00:18:05,460 --> 00:18:08,400
for oh here you go uh the Jason Webb key

476
00:18:08,400 --> 00:18:10,679
set ID right so that's the next field

477
00:18:10,679 --> 00:18:12,179
that's in here

478
00:18:12,179 --> 00:18:16,740
so the jwks this is what the basically

479
00:18:16,740 --> 00:18:19,200
the public Key Ring of that provider so

480
00:18:19,200 --> 00:18:21,900
it has to tell inside of that well-known

481
00:18:21,900 --> 00:18:24,000
configuration point where the consumer

482
00:18:24,000 --> 00:18:25,919
should go to get their keys and that's

483
00:18:25,919 --> 00:18:27,900
how it does it so Google's is actually

484
00:18:27,900 --> 00:18:29,580
at this URL

485
00:18:29,580 --> 00:18:31,620
same kind of deal this is again a Jason

486
00:18:31,620 --> 00:18:36,740
Webb key set has a key type key ID

487
00:18:36,740 --> 00:18:39,660
these are the um the parameters to

488
00:18:39,660 --> 00:18:41,700
generating that key

489
00:18:41,700 --> 00:18:45,240
right the exponent All That Jazz these

490
00:18:45,240 --> 00:18:46,860
rotate there's a whole bunch of magic

491
00:18:46,860 --> 00:18:48,600
and procedure behind how this rotates

492
00:18:48,600 --> 00:18:49,620
you're supposed to keep the old one

493
00:18:49,620 --> 00:18:51,000
around for a little bit so I think that

494
00:18:51,000 --> 00:18:52,980
there's two yeah there's two in here so

495
00:18:52,980 --> 00:18:54,480
here's the one that they're probably

496
00:18:54,480 --> 00:18:56,520
using right now to sign and then here's

497
00:18:56,520 --> 00:18:57,960
the one that's being deprecated and

498
00:18:57,960 --> 00:19:00,500
phased out

499
00:19:02,100 --> 00:19:04,799
uh all this is tied under an umbrella

500
00:19:04,799 --> 00:19:07,559
called Josie or Jose Json objects

501
00:19:07,559 --> 00:19:08,940
signing an encryption so if you want to

502
00:19:08,940 --> 00:19:10,559
know more about how this works check out

503
00:19:10,559 --> 00:19:12,539
those rfcs and specs I actually had to

504
00:19:12,539 --> 00:19:13,860
implement a few of them from scratch and

505
00:19:13,860 --> 00:19:16,440
python it was miserable but that's where

506
00:19:16,440 --> 00:19:19,020
all this is umbrella under

507
00:19:19,020 --> 00:19:21,480
and so why do we care about oidc and so

508
00:19:21,480 --> 00:19:22,799
this is the point of talk is this

509
00:19:22,799 --> 00:19:24,960
concept of federation I have folks

510
00:19:24,960 --> 00:19:27,120
familiar with Federation yeah maybe a

511
00:19:27,120 --> 00:19:28,320
little bit

512
00:19:28,320 --> 00:19:31,140
so Federation is just kind of like a

513
00:19:31,140 --> 00:19:32,880
magic trust relationship between an

514
00:19:32,880 --> 00:19:34,799
issuer and a resource provider right

515
00:19:34,799 --> 00:19:36,780
Google provides a service called

516
00:19:36,780 --> 00:19:38,580
workload identity Federation that's rad

517
00:19:38,580 --> 00:19:40,919
but what really is is just like a

518
00:19:40,919 --> 00:19:42,539
trusted person sitting in a cardboard

519
00:19:42,539 --> 00:19:44,580
box that takes a token from this one and

520
00:19:44,580 --> 00:19:47,039
hands it out this side there's no like

521
00:19:47,039 --> 00:19:50,160
actual uh you know spec or RFC behind

522
00:19:50,160 --> 00:19:52,320
any of this works it could be solved by

523
00:19:52,320 --> 00:19:54,120
a person in a box

524
00:19:54,120 --> 00:19:54,780
um

525
00:19:54,780 --> 00:19:56,880
there's no longer lived credentials with

526
00:19:56,880 --> 00:19:59,280
Federation which is great and so this

527
00:19:59,280 --> 00:20:01,080
would be I'll show you a demo in a

528
00:20:01,080 --> 00:20:03,960
second where your CI CD provider injects

529
00:20:03,960 --> 00:20:07,140
a unique oidc token into every pipeline

530
00:20:07,140 --> 00:20:10,140
run that can be traded out for a gcp

531
00:20:10,140 --> 00:20:13,200
credential an AWS credential so you no

532
00:20:13,200 --> 00:20:14,460
longer have to provision those

533
00:20:14,460 --> 00:20:16,440
long-lived identities store them as

534
00:20:16,440 --> 00:20:18,360
environment Secrets inside of your CI

535
00:20:18,360 --> 00:20:20,280
provider and have to worry about them

536
00:20:20,280 --> 00:20:21,960
leaking or anything there's no search

537
00:20:21,960 --> 00:20:23,480
it's just trust

538
00:20:23,480 --> 00:20:26,100
usually the the provider what will

539
00:20:26,100 --> 00:20:28,020
happen is it will take that oidc token

540
00:20:28,020 --> 00:20:30,360
hand it to the trusted source so go to

541
00:20:30,360 --> 00:20:33,539
Google cloud and usually assume a roller

542
00:20:33,539 --> 00:20:35,520
identity so this is tied to an actual

543
00:20:35,520 --> 00:20:37,860
service account

544
00:20:37,860 --> 00:20:40,500
it's super auditable so all this is

545
00:20:40,500 --> 00:20:42,179
auditable you can track who assumed that

546
00:20:42,179 --> 00:20:44,280
I identity where it came from in the

547
00:20:44,280 --> 00:20:46,320
case of GitHub when they issue tokens

548
00:20:46,320 --> 00:20:48,960
you know the pipeline ID that ran you

549
00:20:48,960 --> 00:20:52,020
know the repo the time what caused that

550
00:20:52,020 --> 00:20:54,440
pipeline to start

551
00:20:54,440 --> 00:20:56,640
where can you do this and where will you

552
00:20:56,640 --> 00:20:59,100
find these so I mentioned cicd GitHub

553
00:20:59,100 --> 00:21:01,559
gitlab Circle CI I think semaphore a

554
00:21:01,559 --> 00:21:02,760
bunch of different providers so this is

555
00:21:02,760 --> 00:21:05,059
becoming way more Pro prominent now

556
00:21:05,059 --> 00:21:07,260
injecting this token into every run

557
00:21:07,260 --> 00:21:08,820
which is cool

558
00:21:08,820 --> 00:21:10,440
there's a Jenkins plugin if you're using

559
00:21:10,440 --> 00:21:13,380
Jenkins to get oidc tokens issued

560
00:21:13,380 --> 00:21:15,539
Cloud resources will accept this I

561
00:21:15,539 --> 00:21:18,480
mentioned that gcp AWS Azure they all do

562
00:21:18,480 --> 00:21:19,740
some sort of workload identity

563
00:21:19,740 --> 00:21:21,840
Federation Google got lucky and claimed

564
00:21:21,840 --> 00:21:23,640
the the service name that makes a ton of

565
00:21:23,640 --> 00:21:25,679
sense but calling a workload identity

566
00:21:25,679 --> 00:21:27,539
Federation is like a good umbrella name

567
00:21:27,539 --> 00:21:28,400
there

568
00:21:28,400 --> 00:21:31,380
kubernetes clusters do this

569
00:21:31,380 --> 00:21:34,620
so I have a kubernetes demo somewhere I

570
00:21:34,620 --> 00:21:37,500
showed you Sig store signing with Sig

571
00:21:37,500 --> 00:21:39,600
store signing I show doing it manually

572
00:21:39,600 --> 00:21:41,340
and I had to go through the oauth flow

573
00:21:41,340 --> 00:21:44,280
but if you're doing say a again of

574
00:21:44,280 --> 00:21:46,679
action to release a binary and you want

575
00:21:46,679 --> 00:21:48,419
to sign a binary as part of an action

576
00:21:48,419 --> 00:21:50,880
pipeline you can take that oidc token

577
00:21:50,880 --> 00:21:53,340
trade that for a a Sig store signing

578
00:21:53,340 --> 00:21:55,260
certificate without any uh you know

579
00:21:55,260 --> 00:21:57,600
pop-up or oauth flow and it gets tied

580
00:21:57,600 --> 00:22:00,240
back to that actual workload so you know

581
00:22:00,240 --> 00:22:01,860
the provenance of where that artifact

582
00:22:01,860 --> 00:22:04,200
was built and all that's signed in a

583
00:22:04,200 --> 00:22:06,179
testable

584
00:22:06,179 --> 00:22:09,659
so this is a GitHub action token this is

585
00:22:09,659 --> 00:22:12,059
injected if you set a I think it's like

586
00:22:12,059 --> 00:22:14,700
token right true or something and your

587
00:22:14,700 --> 00:22:16,380
permissions for your your GitHub

588
00:22:16,380 --> 00:22:17,520
manifest

589
00:22:17,520 --> 00:22:19,799
uh same kind of deal you can see the

590
00:22:19,799 --> 00:22:21,480
subject here that's going to identify

591
00:22:21,480 --> 00:22:24,179
the repo uh the environment actions has

592
00:22:24,179 --> 00:22:25,500
the concept of different environments

593
00:22:25,500 --> 00:22:26,840
that you can use for different Secrets

594
00:22:26,840 --> 00:22:30,299
audience right who this is uh the repo

595
00:22:30,299 --> 00:22:33,780
is for the ref of that thing right so

596
00:22:33,780 --> 00:22:37,200
very unique stuff to a CI provider but

597
00:22:37,200 --> 00:22:39,179
they can all get put in there

598
00:22:39,179 --> 00:22:42,000
uh actor ID bunch of other stuff right

599
00:22:42,000 --> 00:22:45,059
so very cool the issuer is issuer or

600
00:22:45,059 --> 00:22:46,679
tokens not actions.githubuser

601
00:22:46,679 --> 00:22:48,780
content.com right so your Cloud would

602
00:22:48,780 --> 00:22:51,059
trust this

603
00:22:51,059 --> 00:22:54,320
so I have a GitHub demo

604
00:22:55,559 --> 00:22:58,039
and

605
00:23:02,220 --> 00:23:05,159
I don't even know how long I have

606
00:23:05,159 --> 00:23:06,960
let's see

607
00:23:06,960 --> 00:23:09,840
I have no person or timer

608
00:23:09,840 --> 00:23:13,080
thank you perfect timing actually uh so

609
00:23:13,080 --> 00:23:15,360
I can come into my GitHub here for this

610
00:23:15,360 --> 00:23:17,580
project show you what this

611
00:23:17,580 --> 00:23:20,100
manifest looks like right so this is a

612
00:23:20,100 --> 00:23:21,720
manual dispatch there's that permission

613
00:23:21,720 --> 00:23:22,919
so this is how you get the token

614
00:23:22,919 --> 00:23:25,380
injected I just have that job blah blah

615
00:23:25,380 --> 00:23:27,240
blah runs on so this is going to check

616
00:23:27,240 --> 00:23:29,400
out the repo it's going to set up that

617
00:23:29,400 --> 00:23:30,900
Google up so that's actually the magic

618
00:23:30,900 --> 00:23:33,120
thing that happens here so I have a

619
00:23:33,120 --> 00:23:35,760
trust relationship I've set up in gcp

620
00:23:35,760 --> 00:23:38,480
that it's trusting this particular

621
00:23:38,480 --> 00:23:41,220
pipeline in this action so it has the

622
00:23:41,220 --> 00:23:42,480
mapping there

623
00:23:42,480 --> 00:23:44,820
and so this action will set up and trade

624
00:23:44,820 --> 00:23:47,039
out for a token which I have a manual

625
00:23:47,039 --> 00:23:50,159
workflow for too and then it has the

626
00:23:50,159 --> 00:23:51,480
service account that it's assuming

627
00:23:51,480 --> 00:23:53,520
inside of gcp

628
00:23:53,520 --> 00:23:56,280
and then it's going to run that gcloud

629
00:23:56,280 --> 00:23:59,340
CLI and just kind of list out who I am

630
00:23:59,340 --> 00:24:02,418
so let's kick that off

631
00:24:04,980 --> 00:24:08,059
run workflow

632
00:24:10,740 --> 00:24:15,200
so let's see it's going to start

633
00:24:16,919 --> 00:24:19,020
right so you can imagine just being you

634
00:24:19,020 --> 00:24:21,360
tagged a release or you cut a release at

635
00:24:21,360 --> 00:24:22,740
a certain commit and now you want it to

636
00:24:22,740 --> 00:24:26,480
build binary sign them and ship them

637
00:24:27,539 --> 00:24:29,220
setting up gcloud this is the longest

638
00:24:29,220 --> 00:24:32,159
step it's got to download the the binary

639
00:24:32,159 --> 00:24:33,600
it's already set up the credentials you

640
00:24:33,600 --> 00:24:35,700
can see it created Created credentials

641
00:24:35,700 --> 00:24:38,520
file at this path so it already has the

642
00:24:38,520 --> 00:24:41,220
the token exchanged

643
00:24:41,220 --> 00:24:42,840
it's going to run that who am I there we

644
00:24:42,840 --> 00:24:44,700
go right so you can see that it is

645
00:24:44,700 --> 00:24:47,340
actually assumed that service account

646
00:24:47,340 --> 00:24:50,299
so that works

647
00:24:50,580 --> 00:24:51,659
cool

648
00:24:51,659 --> 00:24:53,659
so that's inside of your CI provider

649
00:24:53,659 --> 00:24:57,000
kubernetes demo real quick

650
00:24:57,000 --> 00:24:59,940
so if I do something like

651
00:24:59,940 --> 00:25:04,559
K get raw Cube CTL get raw slash dot

652
00:25:04,559 --> 00:25:07,220
well known

653
00:25:08,039 --> 00:25:11,460
open ID configuration

654
00:25:11,460 --> 00:25:13,559
right so every kubernetes cluster that's

655
00:25:13,559 --> 00:25:16,380
in a managed service will have an oidc

656
00:25:16,380 --> 00:25:18,000
provider that's usually backed by their

657
00:25:18,000 --> 00:25:22,140
Im so gcp will tie this to service

658
00:25:22,140 --> 00:25:24,059
accounts inside of IM there same thing

659
00:25:24,059 --> 00:25:26,880
with eks you can do this in your own

660
00:25:26,880 --> 00:25:28,500
clusters too you can provide your own

661
00:25:28,500 --> 00:25:31,080
oidc provider or kubernetes will run one

662
00:25:31,080 --> 00:25:32,880
on your behalf and tie it

663
00:25:32,880 --> 00:25:34,799
but you can see here is the issuer from

664
00:25:34,799 --> 00:25:37,020
my cluster right it's tied to a specific

665
00:25:37,020 --> 00:25:39,120
project

666
00:25:39,120 --> 00:25:43,260
and a certain uh region and the cluster

667
00:25:43,260 --> 00:25:44,760
name right there's where you could find

668
00:25:44,760 --> 00:25:47,460
that the key store for my cluster let's

669
00:25:47,460 --> 00:25:49,500
see is it public

670
00:25:49,500 --> 00:25:52,279
that's a private IP

671
00:25:52,279 --> 00:25:54,720
what's supported right so every

672
00:25:54,720 --> 00:25:56,039
kubernetes cluster has this which is

673
00:25:56,039 --> 00:25:57,179
really cool so if you have your your

674
00:25:57,179 --> 00:25:59,039
workload run and tecton actually does

675
00:25:59,039 --> 00:26:02,039
this anyone use tecton for CI CD tecton

676
00:26:02,039 --> 00:26:05,940
is a a open source project for CI CD

677
00:26:05,940 --> 00:26:08,279
that's kubernetes native and it will use

678
00:26:08,279 --> 00:26:09,840
this provider to do all of your

679
00:26:09,840 --> 00:26:12,659
federating and signing and a testing so

680
00:26:12,659 --> 00:26:14,940
it's really cool

681
00:26:14,940 --> 00:26:18,620
so that's with kubernetes

682
00:26:19,260 --> 00:26:22,500
so I've been calling this oidc wave 2.

683
00:26:22,500 --> 00:26:24,720
everything I just showed you that GitHub

684
00:26:24,720 --> 00:26:27,320
action pipeline my kubernetes cluster

685
00:26:27,320 --> 00:26:29,460
none of those are actually attached to

686
00:26:29,460 --> 00:26:31,500
oauth at all and I'm sure there's

687
00:26:31,500 --> 00:26:33,299
someone out there who will have a better

688
00:26:33,299 --> 00:26:34,980
explanation or definition of what this

689
00:26:34,980 --> 00:26:38,820
is uh but for my naive self this is a

690
00:26:38,820 --> 00:26:41,700
extension beyond what oidc was intended

691
00:26:41,700 --> 00:26:43,159
for this machine to machine

692
00:26:43,159 --> 00:26:45,659
authentication right GitHub actions was

693
00:26:45,659 --> 00:26:47,220
really the first provider to do this

694
00:26:47,220 --> 00:26:48,960
where they were injecting these tokens

695
00:26:48,960 --> 00:26:51,600
into those runs there is no oauth

696
00:26:51,600 --> 00:26:53,100
involved at all with how they mint those

697
00:26:53,100 --> 00:26:54,539
tokens

698
00:26:54,539 --> 00:26:57,000
it is a machine identity right this is

699
00:26:57,000 --> 00:26:58,860
where we're all moving towards

700
00:26:58,860 --> 00:26:59,940
um I don't think we'll have time to talk

701
00:26:59,940 --> 00:27:02,520
about spiffy Inspire but the the idea of

702
00:27:02,520 --> 00:27:04,799
having your trust relationship between a

703
00:27:04,799 --> 00:27:07,679
identity provider and a resource uh

704
00:27:07,679 --> 00:27:10,500
consumer or a producer is just that

705
00:27:10,500 --> 00:27:13,559
implicit trust so it's there's no

706
00:27:13,559 --> 00:27:15,779
long-lived credentials on either side

707
00:27:15,779 --> 00:27:17,460
so it's just it's just interesting to

708
00:27:17,460 --> 00:27:19,320
see how this has evolved beyond the need

709
00:27:19,320 --> 00:27:22,020
for having oauth attached to it

710
00:27:22,020 --> 00:27:23,460
and at the end of the day who do you

711
00:27:23,460 --> 00:27:25,559
want signing your releases do you want

712
00:27:25,559 --> 00:27:28,260
your releases assigned to a Eddie at

713
00:27:28,260 --> 00:27:31,140
chain guard.dev that you know may still

714
00:27:31,140 --> 00:27:32,400
may have been signed like three years

715
00:27:32,400 --> 00:27:34,080
ago but I haven't worked there for two

716
00:27:34,080 --> 00:27:36,360
years so is that still a valid release

717
00:27:36,360 --> 00:27:37,980
or signature when I leave do you have to

718
00:27:37,980 --> 00:27:40,620
rotate out who's signing it so having it

719
00:27:40,620 --> 00:27:42,840
signed by a service account a system

720
00:27:42,840 --> 00:27:45,299
identity uh is a much better approach

721
00:27:45,299 --> 00:27:47,279
right you can have it signed by release

722
00:27:47,279 --> 00:27:50,760
at kubernetes.io

723
00:27:50,820 --> 00:27:52,860
uh with all with all things you need to

724
00:27:52,860 --> 00:27:54,659
trust but verify uh the fun thing is

725
00:27:54,659 --> 00:27:56,279
that anyone could actually mint a valid

726
00:27:56,279 --> 00:27:58,740
oidc token uh there's nothing that

727
00:27:58,740 --> 00:28:00,720
really says otherwise

728
00:28:00,720 --> 00:28:02,520
the claims actually matter that are

729
00:28:02,520 --> 00:28:04,140
inside there

730
00:28:04,140 --> 00:28:06,419
um you can put whatever you want in that

731
00:28:06,419 --> 00:28:08,400
audience and subject field

732
00:28:08,400 --> 00:28:10,440
uh issue subject audience are really

733
00:28:10,440 --> 00:28:12,480
important ones that you want to make

734
00:28:12,480 --> 00:28:14,340
sure are verifiable

735
00:28:14,340 --> 00:28:16,320
what happens if there was a service who

736
00:28:16,320 --> 00:28:20,100
were to issue tokens with whatever uh I

737
00:28:20,100 --> 00:28:22,140
went and built one for fun I called it

738
00:28:22,140 --> 00:28:24,659
just trustme.dev

739
00:28:24,659 --> 00:28:27,960
and so this is a service that you should

740
00:28:27,960 --> 00:28:30,480
not use for anything real but it's fun

741
00:28:30,480 --> 00:28:32,760
and so it will just mint tokens with

742
00:28:32,760 --> 00:28:34,380
whatever you pass in as the URL

743
00:28:34,380 --> 00:28:40,260
parameters so here we have a token that

744
00:28:40,260 --> 00:28:42,240
let me toss this debug parameter in the

745
00:28:42,240 --> 00:28:44,600
URL

746
00:28:44,940 --> 00:28:48,779
right so I have issued a token that is

747
00:28:48,779 --> 00:28:50,960
the audience is

748
00:28:50,960 --> 00:28:53,700
sts.amazonaws.com cool well let's see

749
00:28:53,700 --> 00:28:56,159
what if we change the issuer so let's

750
00:28:56,159 --> 00:28:57,539
say this was issued by

751
00:28:57,539 --> 00:29:00,539
accounts.google.com

752
00:29:01,260 --> 00:29:04,679
cool still a valid token well what if I

753
00:29:04,679 --> 00:29:07,679
also have the subject in here

754
00:29:07,679 --> 00:29:12,240
of something like admin at cncf.io

755
00:29:12,240 --> 00:29:13,440
right

756
00:29:13,440 --> 00:29:16,380
so if I hand this this is a valid token

757
00:29:16,380 --> 00:29:18,659
you can totally verify the signature if

758
00:29:18,659 --> 00:29:21,240
I hand this off to a provider what's to

759
00:29:21,240 --> 00:29:22,679
stop them from trusting it what's to

760
00:29:22,679 --> 00:29:24,600
stop them from actually knowing this is

761
00:29:24,600 --> 00:29:25,740
forged

762
00:29:25,740 --> 00:29:27,299
well thankfully smart people have

763
00:29:27,299 --> 00:29:29,039
figured out how to prevent this though

764
00:29:29,039 --> 00:29:30,480
there are definitely Services out there

765
00:29:30,480 --> 00:29:32,520
that are not checking the fields and and

766
00:29:32,520 --> 00:29:34,020
they're just getting a valid token with

767
00:29:34,020 --> 00:29:35,940
the issuer and they're definitely not

768
00:29:35,940 --> 00:29:37,620
verifying that it's who it's for or

769
00:29:37,620 --> 00:29:39,720
where it's coming from

770
00:29:39,720 --> 00:29:44,700
uh and so I had a quick uh AWS demo

771
00:29:44,700 --> 00:29:47,940
where I can do AWS a simple token

772
00:29:47,940 --> 00:29:50,159
service assume role with web identity I

773
00:29:50,159 --> 00:29:54,059
have a a RN a role in here session name

774
00:29:54,059 --> 00:29:56,240
duration cool and then I just have to

775
00:29:56,240 --> 00:29:59,940
pop in this web identity

776
00:29:59,940 --> 00:30:02,220
so let's say

777
00:30:02,220 --> 00:30:05,059
go back

778
00:30:07,020 --> 00:30:13,620
token we give it the subject of demo

779
00:30:13,620 --> 00:30:16,580
grab this

780
00:30:16,919 --> 00:30:19,740
I think that's all I need for it to work

781
00:30:19,740 --> 00:30:21,960
no see it knows so it's missing a

782
00:30:21,960 --> 00:30:23,760
required claim audience

783
00:30:23,760 --> 00:30:27,740
so let's tossing an audience in there

784
00:30:34,440 --> 00:30:36,179
oh

785
00:30:36,179 --> 00:30:39,320
bring me the token

786
00:30:45,679 --> 00:30:49,620
ah incorrect audience token yep

787
00:30:49,620 --> 00:30:51,960
uh audience is supposed to be demo what

788
00:30:51,960 --> 00:30:53,940
did I put oh Eddie

789
00:30:53,940 --> 00:30:58,399
demo there we go let's try that again

790
00:31:03,299 --> 00:31:05,399
right so I have a trust relationship set

791
00:31:05,399 --> 00:31:08,399
up it's just gonna trust whatever I said

792
00:31:08,399 --> 00:31:10,440
um in this case this this is what it's

793
00:31:10,440 --> 00:31:12,720
supposed to happen but the the way that

794
00:31:12,720 --> 00:31:14,340
the cloud provider gets around this is

795
00:31:14,340 --> 00:31:17,159
you actually have to specify outside of

796
00:31:17,159 --> 00:31:19,200
the token who your audience is for right

797
00:31:19,200 --> 00:31:21,240
so it's just another step here

798
00:31:21,240 --> 00:31:23,159
uh the protection against so verify

799
00:31:23,159 --> 00:31:24,960
token and claims you want to make sure

800
00:31:24,960 --> 00:31:27,600
you're actually matching that issuer to

801
00:31:27,600 --> 00:31:29,340
the issuer's key right so the key

802
00:31:29,340 --> 00:31:30,600
shouldn't match if you do it the

803
00:31:30,600 --> 00:31:32,700
incorrect way

804
00:31:32,700 --> 00:31:34,380
you want to pass the audience alongside

805
00:31:34,380 --> 00:31:36,779
that token so Google Cloud does it cool

806
00:31:36,779 --> 00:31:39,960
too they have the docs right here uh the

807
00:31:39,960 --> 00:31:42,299
the token Amazon's the same way so you

808
00:31:42,299 --> 00:31:43,980
have the token here that you would

809
00:31:43,980 --> 00:31:45,000
passed

810
00:31:45,000 --> 00:31:47,520
but you also specify the audience as

811
00:31:47,520 --> 00:31:49,140
well so the audience and the requests

812
00:31:49,140 --> 00:31:51,779
should match what's in the token and

813
00:31:51,779 --> 00:31:53,399
that's how you can ensure that it's for

814
00:31:53,399 --> 00:31:55,740
the correct project

815
00:31:55,740 --> 00:32:01,740
uh Dex is a a front end for other apps

816
00:32:01,740 --> 00:32:02,580
um

817
00:32:02,580 --> 00:32:04,260
I don't think I have much time to talk

818
00:32:04,260 --> 00:32:06,179
about it but if you go through that Sig

819
00:32:06,179 --> 00:32:07,919
store oil flow and where I where I

820
00:32:07,919 --> 00:32:09,240
showed signing that git commit that's

821
00:32:09,240 --> 00:32:10,679
actually decks that's running behind the

822
00:32:10,679 --> 00:32:13,140
scenes so decks can Federate uh those

823
00:32:13,140 --> 00:32:14,880
different identity providers to a

824
00:32:14,880 --> 00:32:16,860
different application so it can handle

825
00:32:16,860 --> 00:32:19,740
all the attaching and plugging in

826
00:32:19,740 --> 00:32:22,320
uh 50 spiers for machine identities I'm

827
00:32:22,320 --> 00:32:23,580
not going to try to explain that because

828
00:32:23,580 --> 00:32:26,159
I'm running out of time the one last

829
00:32:26,159 --> 00:32:28,320
thing I wanted to show was how this

830
00:32:28,320 --> 00:32:30,480
workload Federation Works behind the

831
00:32:30,480 --> 00:32:34,020
scenes so this is grabbing an oidc token

832
00:32:34,020 --> 00:32:36,240
this is a valid one for my service so

833
00:32:36,240 --> 00:32:38,820
gcp is set up to trust me

834
00:32:38,820 --> 00:32:41,399
and so if we look at what that token

835
00:32:41,399 --> 00:32:44,239
looks like real quick

836
00:32:44,460 --> 00:32:46,620
so you can see that the audience is my

837
00:32:46,620 --> 00:32:49,620
gcp identity pool that I set up issuer

838
00:32:49,620 --> 00:32:52,639
and the the subject

839
00:32:53,100 --> 00:32:55,679
Google actually takes that and it gets

840
00:32:55,679 --> 00:32:57,960
traded for a Federated access token so

841
00:32:57,960 --> 00:32:59,039
this is kind of like a secret

842
00:32:59,039 --> 00:33:00,720
proprietary this basically Marshalls

843
00:33:00,720 --> 00:33:02,220
into a protobuf

844
00:33:02,220 --> 00:33:04,320
and so your service gets back this

845
00:33:04,320 --> 00:33:06,860
identity token after it talks to Google

846
00:33:06,860 --> 00:33:09,779
you have to take that then and you have

847
00:33:09,779 --> 00:33:12,539
to take uh hit another endpoint that

848
00:33:12,539 --> 00:33:14,159
says hey I have a Federated identity

849
00:33:14,159 --> 00:33:16,019
token can I please have an access token

850
00:33:16,019 --> 00:33:18,240
on behalf of this user so Google will go

851
00:33:18,240 --> 00:33:19,740
and mint that and that's actually the

852
00:33:19,740 --> 00:33:22,260
token that you can use to hit that who

853
00:33:22,260 --> 00:33:24,539
am I endpoint so that's what this is

854
00:33:24,539 --> 00:33:26,279
showing

855
00:33:26,279 --> 00:33:28,919
so with that I am most likely out of

856
00:33:28,919 --> 00:33:31,320
time if you want the slides you can take

857
00:33:31,320 --> 00:33:34,679
a picture of that that's the QR code for

858
00:33:34,679 --> 00:33:36,899
the slides and I'd be happy to answer

859
00:33:36,899 --> 00:33:38,760
any questions up here so thanks for

860
00:33:38,760 --> 00:33:41,780
listening to me uh ramble about oidc

861
00:33:41,780 --> 00:33:46,579
[Applause]

