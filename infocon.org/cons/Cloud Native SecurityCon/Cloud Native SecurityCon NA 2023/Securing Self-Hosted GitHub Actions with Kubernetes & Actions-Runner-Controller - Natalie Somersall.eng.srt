1
00:00:00,060 --> 00:00:02,399
so thank you everyone for coming out

2
00:00:02,399 --> 00:00:04,380
GitHub actions is one of the most

3
00:00:04,380 --> 00:00:07,080
popular CI Tools in use today but if you

4
00:00:07,080 --> 00:00:09,380
need to or want to run it yourself

5
00:00:09,380 --> 00:00:11,940
there's really not a lot of guidance to

6
00:00:11,940 --> 00:00:13,139
make and there's a whole lot of

7
00:00:13,139 --> 00:00:15,360
decisions you need to make a lot of them

8
00:00:15,360 --> 00:00:17,460
have security implications

9
00:00:17,460 --> 00:00:19,560
the most popular choice in kubernetes is

10
00:00:19,560 --> 00:00:21,600
actions Runner controller which is an

11
00:00:21,600 --> 00:00:23,820
open source Community project

12
00:00:23,820 --> 00:00:26,580
for managing and scaling your Runner

13
00:00:26,580 --> 00:00:27,720
agents

14
00:00:27,720 --> 00:00:30,920
it's a controller so it's not terribly

15
00:00:30,920 --> 00:00:33,719
difficult to Think Through the ideas of

16
00:00:33,719 --> 00:00:36,600
running your agents as pods but

17
00:00:36,600 --> 00:00:39,239
you're running arbitrary shell commands

18
00:00:39,239 --> 00:00:41,700
there's not a lot of security guidance

19
00:00:41,700 --> 00:00:43,920
on that

20
00:00:43,920 --> 00:00:46,260
so hi I'm Natalie I'm a sticker engineer

21
00:00:46,260 --> 00:00:48,780
at GitHub I work exclusively with our

22
00:00:48,780 --> 00:00:51,960
most regulated and security focused user

23
00:00:51,960 --> 00:00:53,760
communities having LED one myself for

24
00:00:53,760 --> 00:00:54,840
years

25
00:00:54,840 --> 00:00:57,059
this is a really fun intersection of

26
00:00:57,059 --> 00:00:59,100
security technology and compliance so

27
00:00:59,100 --> 00:01:00,719
let's talk about developer enablement

28
00:01:00,719 --> 00:01:03,780
but doing it securely and scalably and

29
00:01:03,780 --> 00:01:06,500
in containers

30
00:01:08,100 --> 00:01:09,420
so we're going to talk a little bit

31
00:01:09,420 --> 00:01:11,460
about where we're headed

32
00:01:11,460 --> 00:01:13,200
so first we're going to talk about like

33
00:01:13,200 --> 00:01:14,880
why on Earth would you ever do this

34
00:01:14,880 --> 00:01:17,760
GitHub actions has magic already done

35
00:01:17,760 --> 00:01:19,619
for you like why would you ever want to

36
00:01:19,619 --> 00:01:22,320
go down this really hard path

37
00:01:22,320 --> 00:01:23,520
we're going to talk a little bit about

38
00:01:23,520 --> 00:01:25,320
the kubernetes cluster settings we're

39
00:01:25,320 --> 00:01:27,000
going to talk about GitHub settings and

40
00:01:27,000 --> 00:01:29,280
deployment Scopes and then a little bit

41
00:01:29,280 --> 00:01:30,960
about how multi-tenancy works with

42
00:01:30,960 --> 00:01:32,939
actions Runner controller

43
00:01:32,939 --> 00:01:35,159
I'm going to end on looking at your

44
00:01:35,159 --> 00:01:37,740
Runner images and then have a little bit

45
00:01:37,740 --> 00:01:39,840
of wrap up on conclusions I am very

46
00:01:39,840 --> 00:01:42,600
sorry if you came in and expected me to

47
00:01:42,600 --> 00:01:45,360
tell you with this one file of yaml you

48
00:01:45,360 --> 00:01:46,979
will be completely unhackable because

49
00:01:46,979 --> 00:01:49,500
that's that's not how any of this works

50
00:01:49,500 --> 00:01:51,659
however this is where I've seen problems

51
00:01:51,659 --> 00:01:54,060
weird edge cases and security not being

52
00:01:54,060 --> 00:01:56,100
considered as companies start to adopt

53
00:01:56,100 --> 00:01:57,000
this

54
00:01:57,000 --> 00:01:59,159
and across the spectrum of maturity of

55
00:01:59,159 --> 00:02:01,020
container adoption this is a really

56
00:02:01,020 --> 00:02:03,060
weird use case

57
00:02:03,060 --> 00:02:05,340
but first off I want to just be very

58
00:02:05,340 --> 00:02:07,140
upfront with this I have a bias

59
00:02:07,140 --> 00:02:10,318
throughout my career I have continually

60
00:02:10,318 --> 00:02:12,900
confirmed this bias and that's that

61
00:02:12,900 --> 00:02:15,060
friction the force of resistance of

62
00:02:15,060 --> 00:02:17,040
movement between two parties is the

63
00:02:17,040 --> 00:02:19,260
leading cause of users administrators

64
00:02:19,260 --> 00:02:22,340
and developers doing insecure things

65
00:02:22,340 --> 00:02:25,379
eliminating any and all friction when

66
00:02:25,379 --> 00:02:27,660
any security concern is involved will

67
00:02:27,660 --> 00:02:30,480
inherently lead to proportionately fewer

68
00:02:30,480 --> 00:02:32,640
insecure things

69
00:02:32,640 --> 00:02:36,180
to be clear I am throwing no stones in

70
00:02:36,180 --> 00:02:37,980
this glass house because I have totally

71
00:02:37,980 --> 00:02:40,020
been that developer

72
00:02:40,020 --> 00:02:42,500
um there are extremely few Network

73
00:02:42,500 --> 00:02:45,360
protections that creative use of SSH

74
00:02:45,360 --> 00:02:48,540
port forwarding can't bypass and this is

75
00:02:48,540 --> 00:02:50,280
both worrying and extremely helpful to

76
00:02:50,280 --> 00:02:52,739
me over my career

77
00:02:52,739 --> 00:02:54,959
so let's talk a little bit about GitHub

78
00:02:54,959 --> 00:02:56,879
actions we're not here to talk in depth

79
00:02:56,879 --> 00:02:58,379
about it as such but there's some things

80
00:02:58,379 --> 00:03:00,180
we should all know as we start to look

81
00:03:00,180 --> 00:03:02,760
at self-hosting this it's our built-in

82
00:03:02,760 --> 00:03:04,980
automation platform it's frequently used

83
00:03:04,980 --> 00:03:07,620
for CI CD but it runs most of GitHub if

84
00:03:07,620 --> 00:03:11,340
we're being uncomfortably honest here

85
00:03:11,340 --> 00:03:13,800
and the cool kind of thing about it is

86
00:03:13,800 --> 00:03:15,120
you have this great open source

87
00:03:15,120 --> 00:03:16,739
Marketplace there's 17

88
00:03:16,739 --> 00:03:18,480
000 or some odd actions in that

89
00:03:18,480 --> 00:03:23,420
Marketplace of reusable workflow bits

90
00:03:23,700 --> 00:03:26,519
however when a user on github.com just

91
00:03:26,519 --> 00:03:28,739
uses actions you're actually getting a

92
00:03:28,739 --> 00:03:30,540
ton of engineering that's designed to be

93
00:03:30,540 --> 00:03:32,580
completely and totally invisible to you

94
00:03:32,580 --> 00:03:35,940
you just say hey run on a Mac and it it

95
00:03:35,940 --> 00:03:39,599
does or run on Ubuntu latest and it does

96
00:03:39,599 --> 00:03:41,099
magic for you

97
00:03:41,099 --> 00:03:43,379
when you do this though you're getting

98
00:03:43,379 --> 00:03:46,379
an ephemeral virtual machine with a ton

99
00:03:46,379 --> 00:03:48,299
of stuff that's already pre-loaded for

100
00:03:48,299 --> 00:03:49,680
you

101
00:03:49,680 --> 00:03:52,260
so much so that the the Ubuntu latest

102
00:03:52,260 --> 00:03:56,159
image clocks in at about 50 gigabytes

103
00:03:56,159 --> 00:03:58,680
um works well for a VM a little bit

104
00:03:58,680 --> 00:04:01,920
unwieldy for a container

105
00:04:01,920 --> 00:04:04,200
and you can get an s-bomb it's readily

106
00:04:04,200 --> 00:04:05,760
available for you it's updated weekly

107
00:04:05,760 --> 00:04:08,879
it's scaled It's Magic it's SAS

108
00:04:08,879 --> 00:04:10,920
we're not here to talk about that we're

109
00:04:10,920 --> 00:04:12,540
here to talk about what happens when you

110
00:04:12,540 --> 00:04:14,459
bring that into your own network and run

111
00:04:14,459 --> 00:04:16,978
it on your own kubernetes cluster and

112
00:04:16,978 --> 00:04:19,199
that is completely free well you don't

113
00:04:19,199 --> 00:04:22,019
pay GitHub for it you pay your commodity

114
00:04:22,019 --> 00:04:23,400
Cloud compute your data center

115
00:04:23,400 --> 00:04:25,680
co-location whatever whatever compute

116
00:04:25,680 --> 00:04:27,660
cost you have

117
00:04:27,660 --> 00:04:29,820
uh for that we ship the runner agent

118
00:04:29,820 --> 00:04:31,560
it's open source there's the the

119
00:04:31,560 --> 00:04:34,139
repository in the slides the trade-off

120
00:04:34,139 --> 00:04:35,400
with this

121
00:04:35,400 --> 00:04:36,780
is that

122
00:04:36,780 --> 00:04:39,300
all of the security operations and all

123
00:04:39,300 --> 00:04:40,919
of the rest of the operations as well

124
00:04:40,919 --> 00:04:43,740
are on you on on your team

125
00:04:43,740 --> 00:04:45,780
and this is an uneven and often

126
00:04:45,780 --> 00:04:50,119
unexpected burden for our security teams

127
00:04:50,580 --> 00:04:53,040
and not everyone has the option of just

128
00:04:53,040 --> 00:04:55,560
using SAS here are some really common

129
00:04:55,560 --> 00:04:58,680
reasons that we see self-hosted runners

130
00:04:58,680 --> 00:05:01,080
the first is GitHub Enterprise server uh

131
00:05:01,080 --> 00:05:02,400
if you self-host GitHub you're

132
00:05:02,400 --> 00:05:04,320
self-hosting all the compute that goes

133
00:05:04,320 --> 00:05:06,300
around GitHub as well

134
00:05:06,300 --> 00:05:08,160
if you want custom Hardware custom

135
00:05:08,160 --> 00:05:10,440
software and honestly because you want

136
00:05:10,440 --> 00:05:12,540
to and I'm not here to judge you I am

137
00:05:12,540 --> 00:05:14,940
here to help you

138
00:05:14,940 --> 00:05:16,979
so we need a controller

139
00:05:16,979 --> 00:05:18,600
this is where actions Runner controller

140
00:05:18,600 --> 00:05:21,240
comes in it's an open source project it

141
00:05:21,240 --> 00:05:23,520
started out as summer wins action Runner

142
00:05:23,520 --> 00:05:25,380
controller moved to the actions Runner

143
00:05:25,380 --> 00:05:27,960
controller organization and now it is

144
00:05:27,960 --> 00:05:30,300
officially the auto scaling solution for

145
00:05:30,300 --> 00:05:32,520
self-hosted runners within GitHub

146
00:05:32,520 --> 00:05:35,160
it does ship some images for the runners

147
00:05:35,160 --> 00:05:36,720
I'm sorry

148
00:05:36,720 --> 00:05:40,320
but most users build their own

149
00:05:40,320 --> 00:05:42,660
I'm going to pause here and preface that

150
00:05:42,660 --> 00:05:44,880
there is a ton of work going on in this

151
00:05:44,880 --> 00:05:46,560
project right now

152
00:05:46,560 --> 00:05:49,500
so this architecture diagram is what is

153
00:05:49,500 --> 00:05:51,840
currently in actions Runner controller

154
00:05:51,840 --> 00:05:55,199
as well as the the current crds in here

155
00:05:55,199 --> 00:05:58,199
like I said the exact crds and the

156
00:05:58,199 --> 00:06:00,120
implementation of this is about to

157
00:06:00,120 --> 00:06:03,120
change the additional work will provide

158
00:06:03,120 --> 00:06:05,940
better scaling as a supported path

159
00:06:05,940 --> 00:06:08,100
and here's a high level overview that'll

160
00:06:08,100 --> 00:06:10,259
age a little bit better than milk or

161
00:06:10,259 --> 00:06:12,180
this diagram

162
00:06:12,180 --> 00:06:14,820
Auto scaling is driven as poll driven

163
00:06:14,820 --> 00:06:16,620
over apis

164
00:06:16,620 --> 00:06:18,720
and the current implementation that's a

165
00:06:18,720 --> 00:06:21,000
very short pole length the newer

166
00:06:21,000 --> 00:06:22,620
implementation will have a longer pull

167
00:06:22,620 --> 00:06:24,840
length on new apis

168
00:06:24,840 --> 00:06:26,699
and you can prove you can see an

169
00:06:26,699 --> 00:06:28,620
overview of the new crds the

170
00:06:28,620 --> 00:06:30,300
architecture diagram all of that good

171
00:06:30,300 --> 00:06:32,460
stuff in the documentation in that

172
00:06:32,460 --> 00:06:34,500
repository we are collaborating

173
00:06:34,500 --> 00:06:37,020
completely in the open for this

174
00:06:37,020 --> 00:06:39,840
in any case users are responsible for

175
00:06:39,840 --> 00:06:41,699
all of the infrastructure Security on

176
00:06:41,699 --> 00:06:43,620
this

177
00:06:43,620 --> 00:06:45,419
and this leads to some really unique

178
00:06:45,419 --> 00:06:47,759
security challenges

179
00:06:47,759 --> 00:06:49,800
um the first I want to like really

180
00:06:49,800 --> 00:06:52,500
emphasize is that GitHub has 100 million

181
00:06:52,500 --> 00:06:55,440
developers not counting the all of the

182
00:06:55,440 --> 00:06:57,240
people that self-host

183
00:06:57,240 --> 00:07:00,259
so it's really hard to provide

184
00:07:00,259 --> 00:07:03,240
opinionated Guidance with a an audience

185
00:07:03,240 --> 00:07:06,020
that wide

186
00:07:07,080 --> 00:07:08,880
laughs

187
00:07:08,880 --> 00:07:10,759
I'm very sorry

188
00:07:10,759 --> 00:07:13,259
one of the key security challenges there

189
00:07:13,259 --> 00:07:15,600
is the user expectation of it just works

190
00:07:15,600 --> 00:07:17,880
and it enables this weird anti-pattern

191
00:07:17,880 --> 00:07:20,759
where containers are used in very VM

192
00:07:20,759 --> 00:07:22,199
ways

193
00:07:22,199 --> 00:07:24,300
which does a couple of things you know

194
00:07:24,300 --> 00:07:25,979
in addition to being kind of grossed out

195
00:07:25,979 --> 00:07:28,680
by 50 gigabyte container images or five

196
00:07:28,680 --> 00:07:30,180
gigabyte container images for that

197
00:07:30,180 --> 00:07:31,139
matter

198
00:07:31,139 --> 00:07:33,780
it increases both the true vulnerability

199
00:07:33,780 --> 00:07:37,500
area of of your agents and it also

200
00:07:37,500 --> 00:07:39,960
increases the noise from container

201
00:07:39,960 --> 00:07:42,599
scanners in your security tooling

202
00:07:42,599 --> 00:07:44,639
so both of those things means it's

203
00:07:44,639 --> 00:07:46,740
really hard to for the team to know

204
00:07:46,740 --> 00:07:49,440
where to invest their time

205
00:07:49,440 --> 00:07:50,940
and then there's this continual

206
00:07:50,940 --> 00:07:52,919
trade-off between caching for runtime

207
00:07:52,919 --> 00:07:56,280
speed versus uh just pulling your

208
00:07:56,280 --> 00:07:58,259
dependencies each and every time that

209
00:07:58,259 --> 00:07:59,880
makes for some really big container

210
00:07:59,880 --> 00:08:00,960
images

211
00:08:00,960 --> 00:08:03,240
and then the next really hard challenge

212
00:08:03,240 --> 00:08:05,880
is that there's some economic incentives

213
00:08:05,880 --> 00:08:09,479
that encourage poor security posture

214
00:08:09,479 --> 00:08:11,520
especially among smaller or less

215
00:08:11,520 --> 00:08:13,800
experienced teams what I mean here is

216
00:08:13,800 --> 00:08:16,080
that running a build system in and of

217
00:08:16,080 --> 00:08:18,240
itself does not bring a company any

218
00:08:18,240 --> 00:08:20,759
money unless you know your business is

219
00:08:20,759 --> 00:08:24,300
in running CI systems

220
00:08:24,300 --> 00:08:26,460
so it there's just not a lot of reason

221
00:08:26,460 --> 00:08:29,340
to spend time doing this securely when

222
00:08:29,340 --> 00:08:31,020
you're only looking at the economics of

223
00:08:31,020 --> 00:08:32,760
this right up front

224
00:08:32,760 --> 00:08:34,500
because of this I see quite a few

225
00:08:34,500 --> 00:08:36,360
installations with a handful of really

226
00:08:36,360 --> 00:08:37,919
common threat models we'll talk a little

227
00:08:37,919 --> 00:08:39,419
bit more in depth about

228
00:08:39,419 --> 00:08:42,000
the first is poorly scoped permissions

229
00:08:42,000 --> 00:08:43,110
or deployments

230
00:08:43,110 --> 00:08:43,679
[Music]

231
00:08:43,679 --> 00:08:44,219
um

232
00:08:44,219 --> 00:08:46,560
I I have this thing where I I'll screen

233
00:08:46,560 --> 00:08:48,360
share with somebody and I see them check

234
00:08:48,360 --> 00:08:50,760
all of the boxes for the API Scopes

235
00:08:50,760 --> 00:08:52,260
please don't do that

236
00:08:52,260 --> 00:08:56,040
the API Scopes are there for a reason

237
00:08:56,040 --> 00:08:57,899
um privileged pods they are so much

238
00:08:57,899 --> 00:08:59,399
easier than writing things to be

239
00:08:59,399 --> 00:09:01,019
containerized properly

240
00:09:01,019 --> 00:09:03,959
and expediency doesn't always help you

241
00:09:03,959 --> 00:09:04,920
here

242
00:09:04,920 --> 00:09:07,800
disabling or unsafely altering key

243
00:09:07,800 --> 00:09:10,560
security features so uh disabling SC

244
00:09:10,560 --> 00:09:12,779
Linux comes up way way more often than

245
00:09:12,779 --> 00:09:15,140
I'd like

246
00:09:15,320 --> 00:09:18,660
using latest to deploy images using

247
00:09:18,660 --> 00:09:21,660
latest is not continuous deployment

248
00:09:21,660 --> 00:09:24,060
um so I see I see quite a lot of of

249
00:09:24,060 --> 00:09:26,339
we're going to pull the image every time

250
00:09:26,339 --> 00:09:27,660
and the image that we're pulling is

251
00:09:27,660 --> 00:09:29,580
latest

252
00:09:29,580 --> 00:09:31,440
um hard to debug all of that good stuff

253
00:09:31,440 --> 00:09:34,620
but it is hellishly hard to fill out an

254
00:09:34,620 --> 00:09:37,019
incident report when you're just

255
00:09:37,019 --> 00:09:38,760
deploying off of latest

256
00:09:38,760 --> 00:09:41,399
so whatever you do please if you take

257
00:09:41,399 --> 00:09:43,380
nothing else latest is literally the

258
00:09:43,380 --> 00:09:45,660
worst don't ever use it Purge it from

259
00:09:45,660 --> 00:09:48,000
your vocabulary

260
00:09:48,000 --> 00:09:51,300
and Upstream repos or or mirrors that

261
00:09:51,300 --> 00:09:53,339
are are wildly out of date after the

262
00:09:53,339 --> 00:09:56,339
whole left pad incident in 2016 and a

263
00:09:56,339 --> 00:09:57,480
whole bunch of other kind of related

264
00:09:57,480 --> 00:10:00,240
Shenanigans running your own internal

265
00:10:00,240 --> 00:10:02,820
everything repository became super

266
00:10:02,820 --> 00:10:04,760
popular and for great reason

267
00:10:04,760 --> 00:10:06,720
understanding the dependencies of your

268
00:10:06,720 --> 00:10:09,959
software in full is a fantastic way to

269
00:10:09,959 --> 00:10:11,640
increase the security posture of your

270
00:10:11,640 --> 00:10:13,320
code and your organization

271
00:10:13,320 --> 00:10:14,700
however

272
00:10:14,700 --> 00:10:17,640
it requires regular care and feeding and

273
00:10:17,640 --> 00:10:20,459
to not just Harbor unsafe well-known

274
00:10:20,459 --> 00:10:23,820
exploitable vulnerabilities

275
00:10:23,820 --> 00:10:25,440
and to understand why these challenges

276
00:10:25,440 --> 00:10:27,720
are you really unique to actions in

277
00:10:27,720 --> 00:10:29,820
kubernetes let's take a tiny detour into

278
00:10:29,820 --> 00:10:32,880
what GitHub actions really are

279
00:10:32,880 --> 00:10:35,160
like I said earlier there's about 17

280
00:10:35,160 --> 00:10:37,320
000 of those actions in the marketplace

281
00:10:37,320 --> 00:10:40,560
and when you just use GitHub and just

282
00:10:40,560 --> 00:10:43,380
use our hosted runners things work for

283
00:10:43,380 --> 00:10:45,420
you you don't actually have to to look

284
00:10:45,420 --> 00:10:48,000
and think too in depth about what's

285
00:10:48,000 --> 00:10:49,680
going on in that action if you don't

286
00:10:49,680 --> 00:10:50,820
want to

287
00:10:50,820 --> 00:10:53,220
uh this is the first point of uh this

288
00:10:53,220 --> 00:10:56,579
gets tricky and weird in kubernetes

289
00:10:56,579 --> 00:10:58,680
so under the cover

290
00:10:58,680 --> 00:11:00,360
a GitHub action can be one of three

291
00:11:00,360 --> 00:11:03,000
things it can be JavaScript

292
00:11:03,000 --> 00:11:05,640
which has to be purely JavaScript uh

293
00:11:05,640 --> 00:11:07,680
node 16 don't use node 12 it's going to

294
00:11:07,680 --> 00:11:09,720
go away and it can't rely on other

295
00:11:09,720 --> 00:11:11,399
binaries

296
00:11:11,399 --> 00:11:13,079
Composites are what you think of when

297
00:11:13,079 --> 00:11:15,839
you think of a uh you know traditional

298
00:11:15,839 --> 00:11:18,480
CI reusable pipeline it's a bit of a

299
00:11:18,480 --> 00:11:21,060
catch-all category you can run arbitrary

300
00:11:21,060 --> 00:11:22,920
scripts in line directly you can call

301
00:11:22,920 --> 00:11:24,420
binaries on the host you can chain

302
00:11:24,420 --> 00:11:27,920
multiple other actions together

303
00:11:28,380 --> 00:11:31,200
and then lastly is a Docker container it

304
00:11:31,200 --> 00:11:33,720
builds a container on each and every run

305
00:11:33,720 --> 00:11:36,360
it executes the container inputs and

306
00:11:36,360 --> 00:11:39,060
outputs defined in a yaml file

307
00:11:39,060 --> 00:11:40,620
you put stuff in

308
00:11:40,620 --> 00:11:43,980
magically stuff comes out

309
00:11:43,980 --> 00:11:45,120
um

310
00:11:45,120 --> 00:11:46,620
and the last thing I'll note is that

311
00:11:46,620 --> 00:11:49,920
podman is not a drop-in replacement

312
00:11:49,920 --> 00:11:51,720
this looks kind of like serverless if

313
00:11:51,720 --> 00:11:53,640
you really squint and look at it from

314
00:11:53,640 --> 00:11:54,839
far away

315
00:11:54,839 --> 00:11:56,519
but this means really that as we're

316
00:11:56,519 --> 00:11:57,839
modeling threats and trying to figure

317
00:11:57,839 --> 00:11:59,640
out a more Enterprise E policy

318
00:11:59,640 --> 00:12:02,339
internally there's a lot more stuff you

319
00:12:02,339 --> 00:12:04,320
need to be aware of because that means

320
00:12:04,320 --> 00:12:05,640
there's a there's three types of

321
00:12:05,640 --> 00:12:08,279
security concerns

322
00:12:08,279 --> 00:12:10,500
and there's two points I'd like to

323
00:12:10,500 --> 00:12:12,360
highlight here for JavaScript the first

324
00:12:12,360 --> 00:12:14,579
is that it likely relies on dependencies

325
00:12:14,579 --> 00:12:18,300
in npm again most likely this is covered

326
00:12:18,300 --> 00:12:19,920
by your company's internal everything

327
00:12:19,920 --> 00:12:21,420
Repository

328
00:12:21,420 --> 00:12:23,100
so we need to make sure that the

329
00:12:23,100 --> 00:12:25,019
repositories configured to be used on

330
00:12:25,019 --> 00:12:26,700
the runner image

331
00:12:26,700 --> 00:12:29,579
and every other container in that pod

332
00:12:29,579 --> 00:12:31,380
and because the runner pods are

333
00:12:31,380 --> 00:12:32,720
ephemeral

334
00:12:32,720 --> 00:12:34,680
that means that you're going to be

335
00:12:34,680 --> 00:12:37,019
pulling and hitting that that mirror

336
00:12:37,019 --> 00:12:38,880
quite a bit

337
00:12:38,880 --> 00:12:41,160
and then the next is the possibility of

338
00:12:41,160 --> 00:12:43,560
script injections from your users

339
00:12:43,560 --> 00:12:45,720
so two things to consider here are the

340
00:12:45,720 --> 00:12:47,519
trustworthiness of the action that's in

341
00:12:47,519 --> 00:12:50,160
use a straightforward problem but

342
00:12:50,160 --> 00:12:52,560
totally out of scope for today

343
00:12:52,560 --> 00:12:55,019
and that your users can pass arbitrary

344
00:12:55,019 --> 00:12:58,800
input into a GitHub action so sometimes

345
00:12:58,800 --> 00:13:00,660
silly sometimes malicious I like to

346
00:13:00,660 --> 00:13:02,459
think of silly a little bit more

347
00:13:02,459 --> 00:13:04,260
and this is a decent way to try and

348
00:13:04,260 --> 00:13:06,000
Escape your container or otherwise

349
00:13:06,000 --> 00:13:08,880
partake in security shenanigans

350
00:13:08,880 --> 00:13:11,279
uh script injection also a concern for

351
00:13:11,279 --> 00:13:12,720
composites

352
00:13:12,720 --> 00:13:15,540
where you can run inline scripts call

353
00:13:15,540 --> 00:13:19,139
arbitrary binaries do you allow users to

354
00:13:19,139 --> 00:13:20,579
use sudo

355
00:13:20,579 --> 00:13:23,880
and and the more vm-like GitHub actions

356
00:13:23,880 --> 00:13:25,680
you can alter your environment at

357
00:13:25,680 --> 00:13:28,500
runtime uh that's not really all that

358
00:13:28,500 --> 00:13:31,019
safe to do in a container

359
00:13:31,019 --> 00:13:33,180
same for granting privileged access

360
00:13:33,180 --> 00:13:35,100
installing software messing with

361
00:13:35,100 --> 00:13:37,500
mountains this this can get really

362
00:13:37,500 --> 00:13:39,240
dangerous really quickly especially when

363
00:13:39,240 --> 00:13:42,240
you're adding privileged pods

364
00:13:42,240 --> 00:13:44,639
and then for containers you kind of have

365
00:13:44,639 --> 00:13:47,040
all of the regular image provenance

366
00:13:47,040 --> 00:13:49,380
concerns what's going on in that build

367
00:13:49,380 --> 00:13:51,540
all that good stuff and I kind of saved

368
00:13:51,540 --> 00:13:53,760
the best for last year Docker and Docker

369
00:13:53,760 --> 00:13:56,700
requires privileged pods

370
00:13:56,700 --> 00:13:59,040
but most importantly you're not just

371
00:13:59,040 --> 00:14:01,860
allowing privileged execution of random

372
00:14:01,860 --> 00:14:04,019
user input right

373
00:14:04,019 --> 00:14:07,620
right no one no one does this right

374
00:14:07,620 --> 00:14:09,959
because that's the next thing that and

375
00:14:09,959 --> 00:14:11,459
the first thing that I really like to

376
00:14:11,459 --> 00:14:13,079
talk to when people are wanting to build

377
00:14:13,079 --> 00:14:15,120
their own in-house implementation of

378
00:14:15,120 --> 00:14:17,519
actions on-prem is

379
00:14:17,519 --> 00:14:20,399
do you really trust your neighbors

380
00:14:20,399 --> 00:14:22,920
and who are your neighbors

381
00:14:22,920 --> 00:14:26,760
so zero trust is not a default vanilla

382
00:14:26,760 --> 00:14:29,040
setting click one button you have zero

383
00:14:29,040 --> 00:14:30,779
trust in kubernetes

384
00:14:30,779 --> 00:14:33,060
it's possible it requires skilled work

385
00:14:33,060 --> 00:14:36,420
and upkeep to pull off namespaces do a

386
00:14:36,420 --> 00:14:38,579
pretty good job of providing resource

387
00:14:38,579 --> 00:14:41,100
quotas sharing Secrets setting policies

388
00:14:41,100 --> 00:14:43,019
all that good stuff

389
00:14:43,019 --> 00:14:45,060
but the team that's running this will

390
00:14:45,060 --> 00:14:47,820
need to have access to that and it

391
00:14:47,820 --> 00:14:49,680
becomes really tedious to manage at

392
00:14:49,680 --> 00:14:52,380
scale going back to security and

393
00:14:52,380 --> 00:14:54,720
friction

394
00:14:54,720 --> 00:14:56,699
and in the opposite direction that you

395
00:14:56,699 --> 00:14:58,800
can take also has problems

396
00:14:58,800 --> 00:15:01,500
cluster sprawl is a is a thing you're

397
00:15:01,500 --> 00:15:03,180
adding an extra infrastructure to

398
00:15:03,180 --> 00:15:06,300
inventory to secure to patch to maintain

399
00:15:06,300 --> 00:15:08,579
to stream into your seam all of that

400
00:15:08,579 --> 00:15:09,959
good stuff

401
00:15:09,959 --> 00:15:14,279
there's no right answer to this balance

402
00:15:14,279 --> 00:15:15,959
I just want you to think through the

403
00:15:15,959 --> 00:15:18,240
risks of multi-tenancy versus managing

404
00:15:18,240 --> 00:15:21,800
lots of single tenant clusters

405
00:15:22,800 --> 00:15:24,300
and

406
00:15:24,300 --> 00:15:26,639
I found all the privileged pods so when

407
00:15:26,639 --> 00:15:28,260
I was learning kubernetes a few years

408
00:15:28,260 --> 00:15:30,600
ago there was this moment in reviewing

409
00:15:30,600 --> 00:15:32,639
all of the the documentation and the

410
00:15:32,639 --> 00:15:34,680
security stuff and I'm like well duh of

411
00:15:34,680 --> 00:15:36,959
course you don't run stuff as root

412
00:15:36,959 --> 00:15:38,459
duh

413
00:15:38,459 --> 00:15:40,860
didn't we already solve this with the SC

414
00:15:40,860 --> 00:15:42,959
Linux and app armor and the other fun

415
00:15:42,959 --> 00:15:44,940
like mandatory access control things

416
00:15:44,940 --> 00:15:48,300
that we built into the kernel to do this

417
00:15:48,300 --> 00:15:50,100
um it turns out all of the privileged

418
00:15:50,100 --> 00:15:51,839
pods are running various continuous

419
00:15:51,839 --> 00:15:54,660
integration systems in kubernetes it's

420
00:15:54,660 --> 00:15:56,220
basically the only place I see

421
00:15:56,220 --> 00:15:58,399
privileged pods

422
00:15:58,399 --> 00:16:00,779
and I'm not here to tell you it

423
00:16:00,779 --> 00:16:02,940
effectively removes all the fun process

424
00:16:02,940 --> 00:16:05,699
protection because we all know that and

425
00:16:05,699 --> 00:16:07,380
I'm not going to tell you Thou shalt

426
00:16:07,380 --> 00:16:09,600
never use privileged pods because you

427
00:16:09,600 --> 00:16:12,120
have compliance Frameworks for that it

428
00:16:12,120 --> 00:16:13,800
just never seems that it was a risk

429
00:16:13,800 --> 00:16:16,019
deliberately thought through and chosen

430
00:16:16,019 --> 00:16:18,240
when I say hey did you mean to run this

431
00:16:18,240 --> 00:16:19,740
as privileged

432
00:16:19,740 --> 00:16:23,300
and it doesn't have to be this way

433
00:16:24,120 --> 00:16:27,600
so no talk about this is complete

434
00:16:27,600 --> 00:16:30,660
without the big yicky gross thing in the

435
00:16:30,660 --> 00:16:33,300
room which is Docker and Docker and it

436
00:16:33,300 --> 00:16:35,100
is super super risky

437
00:16:35,100 --> 00:16:37,680
it provides the most sas-like experience

438
00:16:37,680 --> 00:16:40,560
though and when we we look through this

439
00:16:40,560 --> 00:16:42,420
users want this for two reasons either

440
00:16:42,420 --> 00:16:44,940
they're building containers directly or

441
00:16:44,940 --> 00:16:47,519
they're using Docker actions but there

442
00:16:47,519 --> 00:16:49,079
are some Alternatives and some

443
00:16:49,079 --> 00:16:51,000
compensating controls to think through

444
00:16:51,000 --> 00:16:53,699
that might work a little bit better for

445
00:16:53,699 --> 00:16:54,360
you

446
00:16:54,360 --> 00:16:56,639
the first is don't use Docker containers

447
00:16:56,639 --> 00:16:59,040
for GitHub actions which is easier said

448
00:16:59,040 --> 00:17:00,720
than done

449
00:17:00,720 --> 00:17:03,720
using VMS for working with containers

450
00:17:03,720 --> 00:17:06,240
I'm not here at cloudnative security con

451
00:17:06,240 --> 00:17:07,919
to talk about reverting to Virtual

452
00:17:07,919 --> 00:17:10,199
machines but don't throw it off the

453
00:17:10,199 --> 00:17:12,860
table immediately

454
00:17:13,380 --> 00:17:15,240
um my small contribution to this space

455
00:17:15,240 --> 00:17:17,040
is a root loose and pseudo-less Docker

456
00:17:17,040 --> 00:17:18,419
and Docker pod but it is still

457
00:17:18,419 --> 00:17:20,099
privileged we're going to talk a little

458
00:17:20,099 --> 00:17:21,540
bit about Kata containers and

459
00:17:21,540 --> 00:17:23,160
firecracker

460
00:17:23,160 --> 00:17:24,359
we're talking about Runners with

461
00:17:24,359 --> 00:17:26,880
kubernetes jobs and then

462
00:17:26,880 --> 00:17:29,040
container Builders so there's some

463
00:17:29,040 --> 00:17:30,780
worthwhile work there are some hard

464
00:17:30,780 --> 00:17:32,220
things to do

465
00:17:32,220 --> 00:17:34,559
and there's some some easier things to

466
00:17:34,559 --> 00:17:36,740
do

467
00:17:37,080 --> 00:17:40,820
so for rootless uh it really is rootless

468
00:17:40,820 --> 00:17:43,620
it provides some coverage by removing

469
00:17:43,620 --> 00:17:45,600
the user's ability to run arbitrary

470
00:17:45,600 --> 00:17:48,299
stuff as root

471
00:17:48,299 --> 00:17:50,400
so you can see here that we're we're

472
00:17:50,400 --> 00:17:52,799
trying to to mount something and we got

473
00:17:52,799 --> 00:17:55,919
a no and we tried sudo and pseudo's not

474
00:17:55,919 --> 00:17:58,799
here and we can't we can't s u into root

475
00:17:58,799 --> 00:18:02,640
but Docker run hello world still works

476
00:18:02,640 --> 00:18:05,640
however there's some significant

477
00:18:05,640 --> 00:18:07,440
trade-offs in this approach

478
00:18:07,440 --> 00:18:10,260
so on the upside again we're preventing

479
00:18:10,260 --> 00:18:13,020
a lot of that user silliness

480
00:18:13,020 --> 00:18:15,179
and there's still a shell though and

481
00:18:15,179 --> 00:18:16,740
some common utilities that I would

482
00:18:16,740 --> 00:18:18,600
consider risky in this context things

483
00:18:18,600 --> 00:18:20,880
like curl or W get that are available in

484
00:18:20,880 --> 00:18:22,980
the Pod because that pod was going to

485
00:18:22,980 --> 00:18:25,559
want to run a GitHub action which might

486
00:18:25,559 --> 00:18:28,440
curl down something or it might ask if

487
00:18:28,440 --> 00:18:30,419
you're like hey am I going to install

488
00:18:30,419 --> 00:18:33,380
npm packages

489
00:18:33,480 --> 00:18:35,700
and it makes a runner image that

490
00:18:35,700 --> 00:18:38,220
generally just works for both Docker

491
00:18:38,220 --> 00:18:40,140
actions and for building containers more

492
00:18:40,140 --> 00:18:41,340
generally

493
00:18:41,340 --> 00:18:43,740
but it's still privileged for all the

494
00:18:43,740 --> 00:18:46,200
same reasons that regular rootful nested

495
00:18:46,200 --> 00:18:49,080
containerization needs a privileged

496
00:18:49,080 --> 00:18:50,580
access

497
00:18:50,580 --> 00:18:54,000
next there's no uh elevated access

498
00:18:54,000 --> 00:18:57,000
inside the container but yeah any

499
00:18:57,000 --> 00:18:59,220
software configuration changes any of

500
00:18:59,220 --> 00:19:00,780
that will need to happen before runtime

501
00:19:00,780 --> 00:19:03,419
in this type of situation you cannot say

502
00:19:03,419 --> 00:19:06,539
hey yum update or you know apt-get

503
00:19:06,539 --> 00:19:08,700
install the thing I need to build my

504
00:19:08,700 --> 00:19:10,260
software

505
00:19:10,260 --> 00:19:12,419
and this means that users need to use

506
00:19:12,419 --> 00:19:14,340
this only for working with containers

507
00:19:14,340 --> 00:19:17,760
and or rebuild that image to to have

508
00:19:17,760 --> 00:19:19,200
more software

509
00:19:19,200 --> 00:19:21,179
and then at the very bottom of this

510
00:19:21,179 --> 00:19:24,059
slide I have a uh an example Docker file

511
00:19:24,059 --> 00:19:27,260
that you can look at for this

512
00:19:27,660 --> 00:19:29,760
and it's normally at this point in that

513
00:19:29,760 --> 00:19:31,620
architectured review where someone in

514
00:19:31,620 --> 00:19:33,780
the room says just use firecracker it

515
00:19:33,780 --> 00:19:35,640
works for AWS

516
00:19:35,640 --> 00:19:38,340
or any other of the make kubernetes

517
00:19:38,340 --> 00:19:41,120
orchestrate virtual machines technology

518
00:19:41,120 --> 00:19:44,460
and I am not here to dismiss it at all

519
00:19:44,460 --> 00:19:48,360
it's a solid idea VMS are much much more

520
00:19:48,360 --> 00:19:50,400
isolated both from each other and from

521
00:19:50,400 --> 00:19:52,740
the host than containers are

522
00:19:52,740 --> 00:19:55,559
however here's where I've seen teams

523
00:19:55,559 --> 00:19:57,539
going down this route have a difficult

524
00:19:57,539 --> 00:19:59,460
and insecure time

525
00:19:59,460 --> 00:20:01,620
the first obstacle is a little bit

526
00:20:01,620 --> 00:20:03,600
industry specific for me

527
00:20:03,600 --> 00:20:05,580
there's not been any managed providers

528
00:20:05,580 --> 00:20:08,460
in this space doubly so if you need

529
00:20:08,460 --> 00:20:10,679
specific compliance certifications like

530
00:20:10,679 --> 00:20:12,299
say fedramp

531
00:20:12,299 --> 00:20:13,919
this means that the team is likely

532
00:20:13,919 --> 00:20:16,260
running their own cluster on existing

533
00:20:16,260 --> 00:20:18,179
and authorized bare metal or VM

534
00:20:18,179 --> 00:20:19,500
infrastructure

535
00:20:19,500 --> 00:20:21,900
this is not a problem this just adds

536
00:20:21,900 --> 00:20:24,240
cost and complexity that maybe isn't

537
00:20:24,240 --> 00:20:27,860
always immediately obvious

538
00:20:28,020 --> 00:20:30,660
and it increases how much the more of

539
00:20:30,660 --> 00:20:33,179
the platform security again is on your

540
00:20:33,179 --> 00:20:34,860
team

541
00:20:34,860 --> 00:20:36,720
the next thing that the team faces is

542
00:20:36,720 --> 00:20:38,580
all of the paper cuts that you encounter

543
00:20:38,580 --> 00:20:40,679
because kubernetes expects to manage

544
00:20:40,679 --> 00:20:44,460
containers and the petty Hill I will die

545
00:20:44,460 --> 00:20:49,200
on is that containers are not VMS

546
00:20:49,200 --> 00:20:51,960
the most common ways in addressing these

547
00:20:51,960 --> 00:20:54,059
paper cuts ultimately undermine the

548
00:20:54,059 --> 00:20:56,220
isolation that drives this architecture

549
00:20:56,220 --> 00:20:58,380
decision to begin with

550
00:20:58,380 --> 00:20:59,940
so the first thing I like to talk

551
00:20:59,940 --> 00:21:02,400
through is shared files and mounts um

552
00:21:02,400 --> 00:21:05,100
well many workloads rely on Secrets

553
00:21:05,100 --> 00:21:07,200
config Maps service account credentials

554
00:21:07,200 --> 00:21:08,760
all of the things that are normally

555
00:21:08,760 --> 00:21:12,059
shared as mounts sharing a mount in a VM

556
00:21:12,059 --> 00:21:16,500
is significantly more difficult

557
00:21:16,500 --> 00:21:19,140
and while firecracker containerdeep has

558
00:21:19,140 --> 00:21:21,480
a cni compatible network plugin and it's

559
00:21:21,480 --> 00:21:23,520
super super cool

560
00:21:23,520 --> 00:21:26,220
um not every pod is a VM technology has

561
00:21:26,220 --> 00:21:27,840
this so keeping your isolation

562
00:21:27,840 --> 00:21:29,340
boundaries intact can be a little

563
00:21:29,340 --> 00:21:31,320
difficult

564
00:21:31,320 --> 00:21:33,120
um and then insecure things on the

565
00:21:33,120 --> 00:21:34,799
administration side are still quite

566
00:21:34,799 --> 00:21:37,140
possible the first thing I I see

567
00:21:37,140 --> 00:21:38,700
normally with with teams going down this

568
00:21:38,700 --> 00:21:41,039
route is disabling or unsafely altering

569
00:21:41,039 --> 00:21:42,900
set comp

570
00:21:42,900 --> 00:21:45,480
oh you can also drastically over

571
00:21:45,480 --> 00:21:48,419
subscribe your physical resources uh you

572
00:21:48,419 --> 00:21:50,220
can Bridge networking between your your

573
00:21:50,220 --> 00:21:54,360
pod VM thing and your host so you're not

574
00:21:54,360 --> 00:21:56,280
as isolated as you're you're really

575
00:21:56,280 --> 00:21:57,900
wanting to be

576
00:21:57,900 --> 00:22:01,740
and then lastly and most shockingly to

577
00:22:01,740 --> 00:22:04,260
everyone is if you do insecure things on

578
00:22:04,260 --> 00:22:07,799
a VM it's still insecure uh and what I

579
00:22:07,799 --> 00:22:10,260
mean here is disabling SSL verification

580
00:22:10,260 --> 00:22:13,380
which is my personal pet peeve

581
00:22:13,380 --> 00:22:15,600
messing with your software repositories

582
00:22:15,600 --> 00:22:18,000
downloading non-managed dependencies

583
00:22:18,000 --> 00:22:21,240
piping stuff to a privileged shell but

584
00:22:21,240 --> 00:22:23,159
more importantly this is the foundation

585
00:22:23,159 --> 00:22:25,640
of your company's software supply chain

586
00:22:25,640 --> 00:22:27,780
the way that you're building your

587
00:22:27,780 --> 00:22:28,860
software

588
00:22:28,860 --> 00:22:31,440
if you're publishing to an internal

589
00:22:31,440 --> 00:22:33,299
registry writing to a shared amount

590
00:22:33,299 --> 00:22:36,240
otherwise persisting data

591
00:22:36,240 --> 00:22:38,820
from an insecure platform like yes it's

592
00:22:38,820 --> 00:22:41,159
a VM yes it's more isolated but you're

593
00:22:41,159 --> 00:22:44,000
still doing dumb things

594
00:22:44,179 --> 00:22:47,820
and lastly I'm going to call out that

595
00:22:47,820 --> 00:22:49,860
this is a fantastically documented

596
00:22:49,860 --> 00:22:52,320
project and they ship improvements super

597
00:22:52,320 --> 00:22:54,840
duper fast which is amazing and also

598
00:22:54,840 --> 00:22:56,340
sometimes difficult for some Enterprise

599
00:22:56,340 --> 00:23:00,320
teams to to truly keep up with

600
00:23:01,260 --> 00:23:03,299
not a bad idea actually a pretty good

601
00:23:03,299 --> 00:23:06,000
idea just lots of time money and smarts

602
00:23:06,000 --> 00:23:08,900
go into pulling it off

603
00:23:09,780 --> 00:23:12,059
however just like in this picture there

604
00:23:12,059 --> 00:23:14,280
is a lovely paved path that does not

605
00:23:14,280 --> 00:23:16,500
require Docker and Docker we call it

606
00:23:16,500 --> 00:23:18,600
Runner with kubernetes jobs it's a

607
00:23:18,600 --> 00:23:20,340
little longer up front to use it so

608
00:23:20,340 --> 00:23:22,320
instead of cutting that corner through

609
00:23:22,320 --> 00:23:25,080
the muddy path you're actually kind of

610
00:23:25,080 --> 00:23:27,120
staying on the the pave path and keeping

611
00:23:27,120 --> 00:23:28,320
things clean

612
00:23:28,320 --> 00:23:30,900
it uses hooks so see the link in the

613
00:23:30,900 --> 00:23:33,659
slide and a service account to unnest

614
00:23:33,659 --> 00:23:36,299
Docker and Docker and shove that into

615
00:23:36,299 --> 00:23:38,340
its own non-privileged pod that's

616
00:23:38,340 --> 00:23:41,100
running in the same namespace

617
00:23:41,100 --> 00:23:42,720
there are some trade-offs here though

618
00:23:42,720 --> 00:23:45,000
the first is that Docker actions don't

619
00:23:45,000 --> 00:23:47,640
work as is so if you want a Docker

620
00:23:47,640 --> 00:23:49,799
action what you Norm what I normally see

621
00:23:49,799 --> 00:23:51,480
people end up doing is building that

622
00:23:51,480 --> 00:23:53,760
Docker container keeping that an

623
00:23:53,760 --> 00:23:55,860
internal registry and using it as a

624
00:23:55,860 --> 00:23:58,020
composite action to Docker run with all

625
00:23:58,020 --> 00:23:59,820
of the inputs and then capture all of

626
00:23:59,820 --> 00:24:02,280
the outputs

627
00:24:02,280 --> 00:24:04,679
and container builds will still need

628
00:24:04,679 --> 00:24:07,200
something like Conoco

629
00:24:07,200 --> 00:24:09,299
but most importantly just use things for

630
00:24:09,299 --> 00:24:11,039
what they're meant for and Docker and

631
00:24:11,039 --> 00:24:14,419
Docker is not what it was meant for

632
00:24:15,419 --> 00:24:18,360
so avoid privileged pods friends don't

633
00:24:18,360 --> 00:24:20,100
let friends privileged and we're all

634
00:24:20,100 --> 00:24:21,480
friends here

635
00:24:21,480 --> 00:24:23,039
segregate your workloads that need

636
00:24:23,039 --> 00:24:25,559
privileged access you know I I can't

637
00:24:25,559 --> 00:24:27,539
tell you that you'll never ever ever run

638
00:24:27,539 --> 00:24:29,400
into a legitimate business case for a

639
00:24:29,400 --> 00:24:31,679
privileged pod but when you do

640
00:24:31,679 --> 00:24:35,280
maybe put them in quarantine

641
00:24:35,280 --> 00:24:37,740
the runner with kubernetes jobs is super

642
00:24:37,740 --> 00:24:40,500
duper cool and you should use it if you

643
00:24:40,500 --> 00:24:42,960
absolutely positively have to

644
00:24:42,960 --> 00:24:44,820
run Docker and Docker and maybe it's

645
00:24:44,820 --> 00:24:46,919
sometimes okay that rootless and

646
00:24:46,919 --> 00:24:49,799
pseudo-list is probably a good way to go

647
00:24:49,799 --> 00:24:53,640
and then multi-tenancy especially poorly

648
00:24:53,640 --> 00:24:55,799
thought out multi-tenancy

649
00:24:55,799 --> 00:24:57,659
can be quite hazardous

650
00:24:57,659 --> 00:24:59,159
and it can come at the expense of

651
00:24:59,159 --> 00:25:01,200
security so let's talk a little bit

652
00:25:01,200 --> 00:25:03,240
about the ins and outs of how

653
00:25:03,240 --> 00:25:06,419
multi-tenancy is in Arc

654
00:25:06,419 --> 00:25:09,000
so security is going to dictate where

655
00:25:09,000 --> 00:25:11,280
the right group to place your Runners

656
00:25:11,280 --> 00:25:13,320
and on the image is

657
00:25:13,320 --> 00:25:15,179
you can be as broad as you would like

658
00:25:15,179 --> 00:25:17,280
and as narrow as you need

659
00:25:17,280 --> 00:25:19,500
and Runners can exist at the repository

660
00:25:19,500 --> 00:25:21,780
level the organization level or the

661
00:25:21,780 --> 00:25:23,280
Enterprise level

662
00:25:23,280 --> 00:25:26,460
but fundamentally every machine that can

663
00:25:26,460 --> 00:25:29,520
access GitHub on TCP Port 443

664
00:25:29,520 --> 00:25:32,220
can be a runner

665
00:25:32,220 --> 00:25:33,539
and

666
00:25:33,539 --> 00:25:37,380
this is both absolutely fantastic and it

667
00:25:37,380 --> 00:25:38,640
means you you might need to think

668
00:25:38,640 --> 00:25:40,140
through your security boundary a little

669
00:25:40,140 --> 00:25:42,320
bit

670
00:25:43,740 --> 00:25:46,919
for the controller authorization there's

671
00:25:46,919 --> 00:25:48,960
two authentication methods there's

672
00:25:48,960 --> 00:25:50,760
GitHub apps which you should always use

673
00:25:50,760 --> 00:25:53,700
they provide you granular control they

674
00:25:53,700 --> 00:25:55,860
have higher API rate limits

675
00:25:55,860 --> 00:25:58,260
however in this case again going back to

676
00:25:58,260 --> 00:25:59,880
kind of like old actions Runner

677
00:25:59,880 --> 00:26:02,039
controller or present and the the very

678
00:26:02,039 --> 00:26:03,659
near future state

679
00:26:03,659 --> 00:26:06,360
this is only available for repositories

680
00:26:06,360 --> 00:26:08,159
and organizations if you want Enterprise

681
00:26:08,159 --> 00:26:10,320
Runners you're using a personal access

682
00:26:10,320 --> 00:26:14,039
token with a Enterprise admin scope so

683
00:26:14,039 --> 00:26:16,799
it is a narrow subset of of the

684
00:26:16,799 --> 00:26:18,480
Enterprise permissions however it is

685
00:26:18,480 --> 00:26:21,240
still an Enterprise administrator

686
00:26:21,240 --> 00:26:23,400
so when I tell you you're going to see

687
00:26:23,400 --> 00:26:26,520
the checkbox of API Scopes please

688
00:26:26,520 --> 00:26:28,559
don't ever just check all the boxes you

689
00:26:28,559 --> 00:26:30,419
only need one in this case

690
00:26:30,419 --> 00:26:32,520
and it's the only authentication method

691
00:26:32,520 --> 00:26:35,100
for Enterprise deployments apart from

692
00:26:35,100 --> 00:26:36,120
that there's no difference in

693
00:26:36,120 --> 00:26:38,279
functionality for actions Runner

694
00:26:38,279 --> 00:26:40,380
controller

695
00:26:40,380 --> 00:26:42,179
the reason I really want to spend a

696
00:26:42,179 --> 00:26:44,220
little bit of time on this is

697
00:26:44,220 --> 00:26:46,860
being a community project it did what

698
00:26:46,860 --> 00:26:49,380
was you know reasonably expedient and

699
00:26:49,380 --> 00:26:50,400
easy

700
00:26:50,400 --> 00:26:52,740
the authentication is stored as a secret

701
00:26:52,740 --> 00:26:55,200
in the namespace in the controller so

702
00:26:55,200 --> 00:26:57,659
it's normally actions runner system and

703
00:26:57,659 --> 00:27:00,240
it's passed to the Pod to register it as

704
00:27:00,240 --> 00:27:03,960
a runner so please do not give that

705
00:27:03,960 --> 00:27:06,240
token or that GitHub app more than it

706
00:27:06,240 --> 00:27:07,919
needs

707
00:27:07,919 --> 00:27:10,140
and I would like to highlight this is

708
00:27:10,140 --> 00:27:11,940
changing to just-in-time authentication

709
00:27:11,940 --> 00:27:14,460
very soon

710
00:27:14,460 --> 00:27:16,799
and lastly this is not the token that

711
00:27:16,799 --> 00:27:18,840
GitHub actions uses at runtime that is

712
00:27:18,840 --> 00:27:23,178
already a just in time generated token

713
00:27:24,480 --> 00:27:26,100
so in practice this is what

714
00:27:26,100 --> 00:27:27,840
multi-tenancy tends to look like you

715
00:27:27,840 --> 00:27:30,120
have a shared cluster and a shared

716
00:27:30,120 --> 00:27:32,340
actions Runner controller can manage all

717
00:27:32,340 --> 00:27:34,740
of these deployments and our cluster is

718
00:27:34,740 --> 00:27:36,740
going to control our Hardware management

719
00:27:36,740 --> 00:27:40,320
Ingress egress log forwarding all of

720
00:27:40,320 --> 00:27:43,020
that the good fun cluster-wide things

721
00:27:43,020 --> 00:27:45,419
our namespaces are going to set resource

722
00:27:45,419 --> 00:27:48,059
quotas pod admissions controllers

723
00:27:48,059 --> 00:27:50,700
security policies Network all of the

724
00:27:50,700 --> 00:27:52,980
good fun stuff there and then our

725
00:27:52,980 --> 00:27:55,380
deployments are going to control the

726
00:27:55,380 --> 00:27:58,340
scope so who can use it the image to use

727
00:27:58,340 --> 00:28:01,860
vertical horizontal scaling and shared

728
00:28:01,860 --> 00:28:03,000
mounts

729
00:28:03,000 --> 00:28:04,620
and then you can always have room to

730
00:28:04,620 --> 00:28:06,799
grow

731
00:28:08,760 --> 00:28:12,360
and then for recommendations The Wider

732
00:28:12,360 --> 00:28:14,880
you go on the scope please default to

733
00:28:14,880 --> 00:28:17,400
safe and allow and govern your narrow

734
00:28:17,400 --> 00:28:19,860
deployments as needed

735
00:28:19,860 --> 00:28:22,440
um having been in this administrative

736
00:28:22,440 --> 00:28:24,840
you know enablement position in a very

737
00:28:24,840 --> 00:28:27,179
regulated environment I promise you that

738
00:28:27,179 --> 00:28:29,400
picture is absolutely accurate

739
00:28:29,400 --> 00:28:32,340
when someone says I really really need

740
00:28:32,340 --> 00:28:34,860
root access to something

741
00:28:34,860 --> 00:28:37,260
and then empowerment in this this

742
00:28:37,260 --> 00:28:41,100
situation comes in the form of no and

743
00:28:41,100 --> 00:28:43,260
here's how I'm going to help you do this

744
00:28:43,260 --> 00:28:45,740
safer

745
00:28:48,480 --> 00:28:50,520
so let's talk a little bit about that

746
00:28:50,520 --> 00:28:53,240
Runner image

747
00:28:54,120 --> 00:28:57,419
a typical Runner like I said most users

748
00:28:57,419 --> 00:29:00,419
build their own is based on a broad OS

749
00:29:00,419 --> 00:29:01,440
tag

750
00:29:01,440 --> 00:29:03,840
this is actually not that bad the base

751
00:29:03,840 --> 00:29:06,419
software is updated for you beforehand

752
00:29:06,419 --> 00:29:08,159
so you don't have to bloat your image up

753
00:29:08,159 --> 00:29:10,860
running apt update or yum update

754
00:29:10,860 --> 00:29:13,500
and then trying to run your apt clear

755
00:29:13,500 --> 00:29:16,140
cache or your your clearing the Yum cash

756
00:29:16,140 --> 00:29:17,760
out

757
00:29:17,760 --> 00:29:18,960
um

758
00:29:18,960 --> 00:29:21,179
again this is kind of a weird weird use

759
00:29:21,179 --> 00:29:22,559
of containers

760
00:29:22,559 --> 00:29:25,380
big big giant red flag if there's no

761
00:29:25,380 --> 00:29:27,240
user account set up in that Docker file

762
00:29:27,240 --> 00:29:30,419
friends don't let friends run as root

763
00:29:30,419 --> 00:29:32,100
you're going to set up the runner agency

764
00:29:32,100 --> 00:29:34,320
and all of the dependencies copy in some

765
00:29:34,320 --> 00:29:36,000
shims and then sometimes you're going to

766
00:29:36,000 --> 00:29:38,000
include in a knit process

767
00:29:38,000 --> 00:29:40,460
dependencies that your users expect

768
00:29:40,460 --> 00:29:43,500
cached tools cached dependencies all of

769
00:29:43,500 --> 00:29:44,779
that good stuff

770
00:29:44,779 --> 00:29:47,340
I see there were a couple people that

771
00:29:47,340 --> 00:29:49,740
kind of went when I said they're putting

772
00:29:49,740 --> 00:29:51,360
in a knit system in a container and I

773
00:29:51,360 --> 00:29:53,720
know that is a controversial opinion

774
00:29:53,720 --> 00:29:56,720
however keep in mind that an init system

775
00:29:56,720 --> 00:29:59,100
is actually kind of good in this use

776
00:29:59,100 --> 00:30:00,899
case because your Runner agent is

777
00:30:00,899 --> 00:30:03,419
already a process so any process that

778
00:30:03,419 --> 00:30:05,220
it's going to kick off as well you're

779
00:30:05,220 --> 00:30:06,600
going to have multiple things in that

780
00:30:06,600 --> 00:30:08,700
container

781
00:30:08,700 --> 00:30:10,860
um so it's very very common to have in a

782
00:30:10,860 --> 00:30:13,100
knit process in these

783
00:30:13,100 --> 00:30:15,419
and yeah this is starting to sound a

784
00:30:15,419 --> 00:30:17,820
little bit like a VM isn't it

785
00:30:17,820 --> 00:30:19,620
here are some examples to get you

786
00:30:19,620 --> 00:30:21,240
started

787
00:30:21,240 --> 00:30:23,880
so actions Runner controller currently

788
00:30:23,880 --> 00:30:25,919
builds three Runner images all based on

789
00:30:25,919 --> 00:30:27,600
Ubuntu

790
00:30:27,600 --> 00:30:29,880
um most people will either use them as

791
00:30:29,880 --> 00:30:32,820
is or build their own internally

792
00:30:32,820 --> 00:30:34,559
so there's a runner without Docker

793
00:30:34,559 --> 00:30:36,299
there's a Docker and Docker Runner and

794
00:30:36,299 --> 00:30:37,980
then there's the root listen pseudo list

795
00:30:37,980 --> 00:30:40,440
Docker and Docker and at the very bottom

796
00:30:40,440 --> 00:30:42,240
there is a link with tons of other

797
00:30:42,240 --> 00:30:43,980
community projects

798
00:30:43,980 --> 00:30:47,840
where people have built their own images

799
00:30:50,039 --> 00:30:52,140
you may have forgotten in building your

800
00:30:52,140 --> 00:30:53,340
own image

801
00:30:53,340 --> 00:30:55,380
your in-house repositories need to be

802
00:30:55,380 --> 00:30:57,480
configured for all the things that

803
00:30:57,480 --> 00:31:00,059
you're you're using

804
00:31:00,059 --> 00:31:02,520
and you they need to be up to date or at

805
00:31:02,520 --> 00:31:04,260
least reasonably up to date

806
00:31:04,260 --> 00:31:06,600
and then if you have self-signed SSL

807
00:31:06,600 --> 00:31:09,000
certificates or intermediaries your your

808
00:31:09,000 --> 00:31:11,940
custom root Cas whatever you're doing if

809
00:31:11,940 --> 00:31:14,220
you're messing with SSL just keep in

810
00:31:14,220 --> 00:31:16,200
mind that the number of developers who

811
00:31:16,200 --> 00:31:19,080
notice your SSL interception let's call

812
00:31:19,080 --> 00:31:23,220
that X increases the number of jobs that

813
00:31:23,220 --> 00:31:26,159
Bypass or disable SSL verification by

814
00:31:26,159 --> 00:31:29,059
like 10x

815
00:31:29,100 --> 00:31:31,740
as long as it's easier for somebody to

816
00:31:31,740 --> 00:31:33,539
look at stack Overflow and say oh well

817
00:31:33,539 --> 00:31:35,880
there's this magic flag Tech K that I

818
00:31:35,880 --> 00:31:37,799
can just put onto curl and my my job

819
00:31:37,799 --> 00:31:39,480
will work again and I can continue to do

820
00:31:39,480 --> 00:31:40,440
my job

821
00:31:40,440 --> 00:31:42,720
not thinking that that's the flag that

822
00:31:42,720 --> 00:31:47,179
disables SSL verification

823
00:31:49,620 --> 00:31:53,340
lastly your logging is easy to overlook

824
00:31:53,340 --> 00:31:56,520
there's the super easy button so let's

825
00:31:56,520 --> 00:31:57,960
talk about a little bit while I'm

826
00:31:57,960 --> 00:31:59,460
logging on what do you want to know

827
00:31:59,460 --> 00:32:02,700
there's built-in audit log streaming and

828
00:32:02,700 --> 00:32:04,520
that captures the things that were done

829
00:32:04,520 --> 00:32:08,039
get events package publishing creating

830
00:32:08,039 --> 00:32:10,020
and editing pull requests

831
00:32:10,020 --> 00:32:12,480
super easy hit the button stream it to

832
00:32:12,480 --> 00:32:13,740
your seam you're done

833
00:32:13,740 --> 00:32:15,840
a little less easy are the actions run

834
00:32:15,840 --> 00:32:18,000
logs so the console output from each run

835
00:32:18,000 --> 00:32:19,980
there's an API to interact with these

836
00:32:19,980 --> 00:32:23,100
and you set the retention policy for it

837
00:32:23,100 --> 00:32:25,559
however for actions Runner controller

838
00:32:25,559 --> 00:32:27,960
both the manager and all of the the pods

839
00:32:27,960 --> 00:32:29,880
that that's going to piggyback off of

840
00:32:29,880 --> 00:32:31,559
your kubernetes settings so make sure

841
00:32:31,559 --> 00:32:34,620
that you don't overlook that

842
00:32:34,620 --> 00:32:37,620
and lastly this is a quick screen grab

843
00:32:37,620 --> 00:32:40,140
of the default logging agent where it's

844
00:32:40,140 --> 00:32:41,520
just cutting some stuff out to the

845
00:32:41,520 --> 00:32:43,320
terminal more for debug than anything

846
00:32:43,320 --> 00:32:45,678
else

847
00:32:46,440 --> 00:32:49,679
sharing your Amounts is not caring so

848
00:32:49,679 --> 00:32:51,419
here's why you see this a lot in this

849
00:32:51,419 --> 00:32:53,580
use case inner and outer Docker don't

850
00:32:53,580 --> 00:32:55,799
share a build cache

851
00:32:55,799 --> 00:32:58,740
your setup languages so if you're using

852
00:32:58,740 --> 00:33:01,260
actions set up python it's going to

853
00:33:01,260 --> 00:33:03,539
expect a bunch of stuff there the the

854
00:33:03,539 --> 00:33:05,760
thing you're asking it to set up and if

855
00:33:05,760 --> 00:33:07,140
it's not there it's going to reach out

856
00:33:07,140 --> 00:33:08,940
it's going to install it all that good

857
00:33:08,940 --> 00:33:12,419
stuff adds run time adds Network Ingress

858
00:33:12,419 --> 00:33:15,019
and egress

859
00:33:15,480 --> 00:33:17,700
so sharing mounts is very popular there

860
00:33:17,700 --> 00:33:20,159
your i o intensive builds can get super

861
00:33:20,159 --> 00:33:21,600
fast disks

862
00:33:21,600 --> 00:33:23,399
and really at the end of the day though

863
00:33:23,399 --> 00:33:26,580
rate limiting is very expensive I had

864
00:33:26,580 --> 00:33:29,519
accidentally rate limited a a very large

865
00:33:29,519 --> 00:33:30,720
company

866
00:33:30,720 --> 00:33:33,299
running Docker pull for the next like

867
00:33:33,299 --> 00:33:35,279
six hours no one could do any Docker

868
00:33:35,279 --> 00:33:39,419
images it was uh not not a fun day

869
00:33:39,419 --> 00:33:41,519
and your shared mounts more importantly

870
00:33:41,519 --> 00:33:43,679
aren't always version controlled and

871
00:33:43,679 --> 00:33:45,539
then there's that always that risk of

872
00:33:45,539 --> 00:33:47,820
accidental data persistence at the

873
00:33:47,820 --> 00:33:51,000
intersection of privileged pods and

874
00:33:51,000 --> 00:33:53,640
writing data to a disk

875
00:33:53,640 --> 00:33:56,100
so think that through if you're wanting

876
00:33:56,100 --> 00:33:58,140
to go down that path

877
00:33:58,140 --> 00:34:01,080
and then roughly speaking a pipeline to

878
00:34:01,080 --> 00:34:02,760
manage your Runners is going to contain

879
00:34:02,760 --> 00:34:05,760
build it scan it s bomb it sign it tag

880
00:34:05,760 --> 00:34:07,380
it test it ship it

881
00:34:07,380 --> 00:34:09,960
GitHub actions is super modular so swap

882
00:34:09,960 --> 00:34:13,080
in what's in place for scanning signing

883
00:34:13,080 --> 00:34:15,418
tagging deploying all that good stuff I

884
00:34:15,418 --> 00:34:16,560
do want to talk a little bit about

885
00:34:16,560 --> 00:34:18,320
building and tagging

886
00:34:18,320 --> 00:34:20,879
just because these are both kind of

887
00:34:20,879 --> 00:34:24,139
interesting in this use case

888
00:34:26,219 --> 00:34:27,540
because

889
00:34:27,540 --> 00:34:29,879
keeping your Docker files for these

890
00:34:29,879 --> 00:34:32,760
these containers the deployment yaml and

891
00:34:32,760 --> 00:34:34,500
any other files that you're adding in

892
00:34:34,500 --> 00:34:38,460
and a shared inner Source Repository

893
00:34:38,460 --> 00:34:41,699
is having a remarkable powerful

894
00:34:41,699 --> 00:34:43,800
bottom-up influence in the most

895
00:34:43,800 --> 00:34:46,260
regulated environments

896
00:34:46,260 --> 00:34:48,659
a git repo of course is a history of who

897
00:34:48,659 --> 00:34:50,639
requested reviewed approved what changes

898
00:34:50,639 --> 00:34:51,599
and when

899
00:34:51,599 --> 00:34:54,480
but more importantly my project needs

900
00:34:54,480 --> 00:34:55,918
whatever framework and this other team

901
00:34:55,918 --> 00:34:58,920
already has this image uh my build is

902
00:34:58,920 --> 00:35:01,020
failing on image tag here's a PR with

903
00:35:01,020 --> 00:35:03,540
tests to prevent this moving forward

904
00:35:03,540 --> 00:35:06,180
show me all of the images that are

905
00:35:06,180 --> 00:35:09,060
vulnerable to the cve du jour in GitHub

906
00:35:09,060 --> 00:35:11,099
this is really really simple if you

907
00:35:11,099 --> 00:35:13,740
search the cve and then you search

908
00:35:13,740 --> 00:35:17,460
whatever tool would generate that

909
00:35:17,460 --> 00:35:19,980
and then for tagging tagging by semantic

910
00:35:19,980 --> 00:35:22,500
version and date is this one weird case

911
00:35:22,500 --> 00:35:24,599
that I've ever seen anyone tag this way

912
00:35:24,599 --> 00:35:27,900
but I've seen a couple of users kind of

913
00:35:27,900 --> 00:35:29,820
organically do this and it seems to work

914
00:35:29,820 --> 00:35:30,599
well

915
00:35:30,599 --> 00:35:32,700
they bumped the semantic version for

916
00:35:32,700 --> 00:35:34,440
software changes and the date for

917
00:35:34,440 --> 00:35:36,540
routine rebuilds

918
00:35:36,540 --> 00:35:39,060
and just like I said if you take nothing

919
00:35:39,060 --> 00:35:42,380
else from this never use latest

920
00:35:43,859 --> 00:35:46,800
balance your your permissions by your

921
00:35:46,800 --> 00:35:49,200
scope the user should be able to ask

922
00:35:49,200 --> 00:35:51,240
like hey I need to change my Runner I

923
00:35:51,240 --> 00:35:53,339
would like a new image I need a network

924
00:35:53,339 --> 00:35:55,079
exception for something

925
00:35:55,079 --> 00:35:57,359
and by the scope that they're asking it

926
00:35:57,359 --> 00:35:58,440
for

927
00:35:58,440 --> 00:36:00,960
um I'm very fond of pushing this process

928
00:36:00,960 --> 00:36:02,880
through a pull request

929
00:36:02,880 --> 00:36:06,839
that way I know which user requested it

930
00:36:06,839 --> 00:36:10,140
who who reviewed it and you can always

931
00:36:10,140 --> 00:36:13,380
add multiple reviewers to a pull request

932
00:36:13,380 --> 00:36:15,780
everyone is a stakeholder and more

933
00:36:15,780 --> 00:36:17,099
importantly

934
00:36:17,099 --> 00:36:19,859
in a large company everyone has an SLO

935
00:36:19,859 --> 00:36:22,740
to meet here no one should have to wait

936
00:36:22,740 --> 00:36:23,940
too long

937
00:36:23,940 --> 00:36:26,520
the biggest risk in in the this

938
00:36:26,520 --> 00:36:28,260
Foundation of your software supply chain

939
00:36:28,260 --> 00:36:30,599
isn't that user asking to include a

940
00:36:30,599 --> 00:36:32,579
small utility or to have privileged

941
00:36:32,579 --> 00:36:35,280
access to to their one build

942
00:36:35,280 --> 00:36:36,960
it's that user getting frustrated

943
00:36:36,960 --> 00:36:39,480
waiting having that process heavy it

944
00:36:39,480 --> 00:36:42,359
service management ticket to nowhere and

945
00:36:42,359 --> 00:36:44,280
having to wait another month after that

946
00:36:44,280 --> 00:36:46,440
for the next change management window

947
00:36:46,440 --> 00:36:47,880
just so they

948
00:36:47,880 --> 00:36:49,380
get frustrated they give up they

949
00:36:49,380 --> 00:36:51,119
configure their own build server they

950
00:36:51,119 --> 00:36:53,359
disable SSL certificate verification

951
00:36:53,359 --> 00:36:56,099
they copy in their own bootleg version

952
00:36:56,099 --> 00:36:57,780
of this utility that's never going to

953
00:36:57,780 --> 00:36:59,400
get updated again because no one knows

954
00:36:59,400 --> 00:37:01,260
it's there

955
00:37:01,260 --> 00:37:03,119
just to get things done and move on with

956
00:37:03,119 --> 00:37:05,760
their job reducing your friction makes

957
00:37:05,760 --> 00:37:08,160
everyone happier and safer we're all

958
00:37:08,160 --> 00:37:10,680
grown-ups grown-ups don't ask for random

959
00:37:10,680 --> 00:37:13,260
things not without a reason

960
00:37:13,260 --> 00:37:16,020
be thoughtful and take care of your team

961
00:37:16,020 --> 00:37:19,099
they'll take care of you

962
00:37:20,820 --> 00:37:22,079
questions

963
00:37:22,079 --> 00:37:25,380
I think I don't know what time we're at

964
00:37:25,380 --> 00:37:28,520
I think we're right at time

965
00:37:34,500 --> 00:37:37,579
awesome yeah

966
00:37:40,140 --> 00:37:43,380
without the doctor

967
00:37:43,380 --> 00:37:46,440
with Doctor actions

968
00:37:46,440 --> 00:37:48,000
um and you'd have to run anything like

969
00:37:48,000 --> 00:37:50,220
doctor run in a composite action are

970
00:37:50,220 --> 00:37:53,520
there any plans or

971
00:37:53,520 --> 00:37:56,720
long term to make

972
00:37:56,880 --> 00:37:59,640
I don't rightly know so the question

973
00:37:59,640 --> 00:38:01,440
sorry because I don't think anyone could

974
00:38:01,440 --> 00:38:03,900
hear that was about the future of Docker

975
00:38:03,900 --> 00:38:07,020
actions within actions Runner controller

976
00:38:07,020 --> 00:38:09,240
and the answer is I don't know if

977
00:38:09,240 --> 00:38:10,980
there's anything to make that easier

978
00:38:10,980 --> 00:38:14,460
right now using the container hooks is

979
00:38:14,460 --> 00:38:17,839
is the recommended solution

980
00:38:18,119 --> 00:38:20,780
yes

981
00:38:22,440 --> 00:38:25,079
shots for pipeline authentication to

982
00:38:25,079 --> 00:38:27,680
like file services

983
00:38:28,619 --> 00:38:31,619
so the question is does actions Runner

984
00:38:31,619 --> 00:38:33,619
controller issue jits

985
00:38:33,619 --> 00:38:38,160
to know however when you're what you're

986
00:38:38,160 --> 00:38:40,380
asking about for like does that pod have

987
00:38:40,380 --> 00:38:42,420
a just-in-time token to like clone a

988
00:38:42,420 --> 00:38:44,880
repository or publish to to GitHub

989
00:38:44,880 --> 00:38:46,680
packages or something like that that's

990
00:38:46,680 --> 00:38:48,240
actually controlled by GitHub either

991
00:38:48,240 --> 00:38:51,420
github.com or Enterprise server so the

992
00:38:51,420 --> 00:38:54,240
authentication there is generated by the

993
00:38:54,240 --> 00:38:56,940
action side of things not actions Runner

994
00:38:56,940 --> 00:38:58,220
controller

995
00:38:58,220 --> 00:39:01,560
the the token that that actions Runner

996
00:39:01,560 --> 00:39:03,960
controller uses is something that you

997
00:39:03,960 --> 00:39:06,060
give it and it is a long-lived

998
00:39:06,060 --> 00:39:08,280
credential right now that is changing to

999
00:39:08,280 --> 00:39:11,099
just an in-time access as well however

1000
00:39:11,099 --> 00:39:12,660
that is not the current state of the

1001
00:39:12,660 --> 00:39:15,960
project and if you go to the repo you

1002
00:39:15,960 --> 00:39:17,400
can actually see where we're adding just

1003
00:39:17,400 --> 00:39:19,079
in time access support and all of that

1004
00:39:19,079 --> 00:39:21,119
good stuff now

1005
00:39:21,119 --> 00:39:23,040
okay

1006
00:39:23,040 --> 00:39:25,020
awesome I think we might have time for

1007
00:39:25,020 --> 00:39:28,400
one more question if there's one

1008
00:39:33,720 --> 00:39:36,540
four different methods

1009
00:39:36,540 --> 00:39:39,079
yep

1010
00:39:41,880 --> 00:39:46,320
kind of simple uh like integration to

1011
00:39:46,320 --> 00:39:48,800
foreign

1012
00:39:49,440 --> 00:39:51,720
the question uh sorry just repeating it

1013
00:39:51,720 --> 00:39:54,720
for the is about logging in GitHub

1014
00:39:54,720 --> 00:39:56,640
actions so

1015
00:39:56,640 --> 00:39:59,099
as far as like having the actions Runner

1016
00:39:59,099 --> 00:40:01,260
controller stuff piggyback off of GitHub

1017
00:40:01,260 --> 00:40:03,599
settings I don't know

1018
00:40:03,599 --> 00:40:05,339
um I would encourage you to open that as

1019
00:40:05,339 --> 00:40:06,960
an issue and the actions Runner

1020
00:40:06,960 --> 00:40:10,260
controller repo because I like the idea

1021
00:40:10,260 --> 00:40:13,500
I think the hard part is if we look at

1022
00:40:13,500 --> 00:40:15,359
this slide

1023
00:40:15,359 --> 00:40:17,640
um these these things all law or

1024
00:40:17,640 --> 00:40:19,920
generate logs from a different source

1025
00:40:19,920 --> 00:40:22,740
so this the audit logs from GitHub come

1026
00:40:22,740 --> 00:40:25,920
from Enterprise server or github.com

1027
00:40:25,920 --> 00:40:29,220
the actions run logs are generated by

1028
00:40:29,220 --> 00:40:31,260
that the runner and then are sent to

1029
00:40:31,260 --> 00:40:33,300
GitHub to say like hey we passed we

1030
00:40:33,300 --> 00:40:34,800
failed here's how you view it in that

1031
00:40:34,800 --> 00:40:36,960
nice pretty window

1032
00:40:36,960 --> 00:40:37,500
um

1033
00:40:37,500 --> 00:40:39,420
but I don't know about the future of

1034
00:40:39,420 --> 00:40:42,859
actions Runner controller logging

1035
00:40:43,740 --> 00:40:46,020
all right if any more questions I will

1036
00:40:46,020 --> 00:40:47,940
be floating around I'm here at the whole

1037
00:40:47,940 --> 00:40:48,720
event

1038
00:40:48,720 --> 00:40:50,240
so always happy

1039
00:40:50,240 --> 00:40:54,160
[Applause]

