1
00:00:00,000 --> 00:00:02,940
good morning everyone Thanks for

2
00:00:02,940 --> 00:00:05,100
attending our session my name is Larry

3
00:00:05,100 --> 00:00:07,200
Carvalho I'm going to be moderating this

4
00:00:07,200 --> 00:00:09,540
session with three great panelists who

5
00:00:09,540 --> 00:00:11,099
are seated right here

6
00:00:11,099 --> 00:00:14,219
I'll start with having them do a quick

7
00:00:14,219 --> 00:00:17,100
intro and then we'll go through a few

8
00:00:17,100 --> 00:00:20,279
one slide for each company so we'll

9
00:00:20,279 --> 00:00:23,400
start from the right David you want to

10
00:00:23,400 --> 00:00:25,260
hi everybody nice to meet you

11
00:00:25,260 --> 00:00:26,820
um I do see a couple other VMware folks

12
00:00:26,820 --> 00:00:28,380
around so so you already know me but

13
00:00:28,380 --> 00:00:30,000
those who don't know me

14
00:00:30,000 --> 00:00:32,040
um David zenzi and I lead the tanzu

15
00:00:32,040 --> 00:00:34,079
which is our modern app side of VMware

16
00:00:34,079 --> 00:00:37,200
uh Global field CSO team so I I focus on

17
00:00:37,200 --> 00:00:38,840
security conversations and help our

18
00:00:38,840 --> 00:00:40,980
customers solving modern application

19
00:00:40,980 --> 00:00:43,559
problems and VMware is involved a lot of

20
00:00:43,559 --> 00:00:44,700
Open Source so we're really excited to

21
00:00:44,700 --> 00:00:46,140
be part of this panel and talk about how

22
00:00:46,140 --> 00:00:47,579
that overlaps influences customer

23
00:00:47,579 --> 00:00:49,379
decisions

24
00:00:49,379 --> 00:00:51,840
awesome my name is Hillary Benson I lead

25
00:00:51,840 --> 00:00:53,840
the product management function for

26
00:00:53,840 --> 00:00:55,860
gitlab's security data science and

27
00:00:55,860 --> 00:00:57,719
Monitoring Solutions backgrounds

28
00:00:57,719 --> 00:00:59,219
primarily in security spend some time in

29
00:00:59,219 --> 00:01:00,420
the intelligence Community working for

30
00:01:00,420 --> 00:01:03,000
NSA private sector security testing and

31
00:01:03,000 --> 00:01:04,979
I've been building products and devops

32
00:01:04,979 --> 00:01:06,659
and Cloud native space for the past few

33
00:01:06,659 --> 00:01:08,040
years

34
00:01:08,040 --> 00:01:11,040
hi Kirsten newcomer I'm with red hat

35
00:01:11,040 --> 00:01:12,840
director of security product management

36
00:01:12,840 --> 00:01:16,220
my team focuses on security for

37
00:01:16,220 --> 00:01:20,400
openstack open shift and also we're

38
00:01:20,400 --> 00:01:22,560
responsible for Red Hat Advanced cluster

39
00:01:22,560 --> 00:01:24,720
security which came to us through the

40
00:01:24,720 --> 00:01:27,119
acquisition of Stack rocks so I've been

41
00:01:27,119 --> 00:01:30,600
doing Kube and container security for

42
00:01:30,600 --> 00:01:32,939
more years than I can actually count

43
00:01:32,939 --> 00:01:36,720
maybe somewhere around 10 and prior to

44
00:01:36,720 --> 00:01:39,000
joining red hat I was at blackduck

45
00:01:39,000 --> 00:01:40,680
software where I started getting

46
00:01:40,680 --> 00:01:43,140
involved with open source

47
00:01:43,140 --> 00:01:45,659
right so so what we are here to talk

48
00:01:45,659 --> 00:01:48,540
about is not just the Security Solutions

49
00:01:48,540 --> 00:01:51,180
but how having a good end-to-end

50
00:01:51,180 --> 00:01:53,939
security posture at your company

51
00:01:53,939 --> 00:01:56,460
is going to enable you to innovate

52
00:01:56,460 --> 00:02:00,060
faster how does that speak to you know

53
00:02:00,060 --> 00:02:02,640
get code to production in a secure

54
00:02:02,640 --> 00:02:06,600
manner enable your stakeholders to work

55
00:02:06,600 --> 00:02:09,959
better with you how does it also help

56
00:02:09,959 --> 00:02:13,020
you protect your reputation at the

57
00:02:13,020 --> 00:02:15,420
keynote you've just heard about LastPass

58
00:02:15,420 --> 00:02:18,000
and what happened to them and I know so

59
00:02:18,000 --> 00:02:19,620
many people including me who was in

60
00:02:19,620 --> 00:02:22,020
LastPass who ran away and started doing

61
00:02:22,020 --> 00:02:24,480
other things for that so the reputation

62
00:02:24,480 --> 00:02:27,599
the costs are in the billions if you

63
00:02:27,599 --> 00:02:29,760
know for for a poor security posture

64
00:02:29,760 --> 00:02:31,920
what we want to talk about is how can

65
00:02:31,920 --> 00:02:33,720
you innovate Faster by putting it right

66
00:02:33,720 --> 00:02:35,700
and what is the business value and I

67
00:02:35,700 --> 00:02:37,379
hope for you to take away

68
00:02:37,379 --> 00:02:40,980
from this session what our panelists

69
00:02:40,980 --> 00:02:44,040
will talk about how they see from their

70
00:02:44,040 --> 00:02:46,680
individual companies Open Source

71
00:02:46,680 --> 00:02:48,480
Products and their products what they

72
00:02:48,480 --> 00:02:49,560
can do

73
00:02:49,560 --> 00:02:53,280
so with that and then we I'll ask them

74
00:02:53,280 --> 00:02:55,440
some questions and we'll end up with you

75
00:02:55,440 --> 00:02:57,599
know q a from the audience so please

76
00:02:57,599 --> 00:03:00,660
feel free to you know pipe up and talk

77
00:03:00,660 --> 00:03:02,819
about this talk about whatever questions

78
00:03:02,819 --> 00:03:06,319
you have at the end so we'll start with

79
00:03:06,319 --> 00:03:09,000
Hillary if you you know your slide is up

80
00:03:09,000 --> 00:03:11,700
if you want to stand up sit down talk

81
00:03:11,700 --> 00:03:14,040
whatever it's up to you all right thanks

82
00:03:14,040 --> 00:03:15,360
uh yeah so I want to talk a little bit

83
00:03:15,360 --> 00:03:18,120
about reducing unnecessary risk right so

84
00:03:18,120 --> 00:03:20,340
I think that risk is often a really

85
00:03:20,340 --> 00:03:21,659
difficult thing for people to engage

86
00:03:21,659 --> 00:03:23,700
with and that can be for you know

87
00:03:23,700 --> 00:03:25,440
philosophical reasons right at an

88
00:03:25,440 --> 00:03:26,940
organization you have to sort of decide

89
00:03:26,940 --> 00:03:29,760
what risk means to you what risks your

90
00:03:29,760 --> 00:03:31,860
business is exposed to

91
00:03:31,860 --> 00:03:33,420
um what what level of risk your

92
00:03:33,420 --> 00:03:35,159
organization is willing to accept and

93
00:03:35,159 --> 00:03:36,659
that can look very different from one

94
00:03:36,659 --> 00:03:38,940
company to another but there's a lot of

95
00:03:38,940 --> 00:03:40,560
commonalities I think when kind of the

96
00:03:40,560 --> 00:03:42,180
rubber meets the road and you're looking

97
00:03:42,180 --> 00:03:44,220
at practical considerations there's a

98
00:03:44,220 --> 00:03:44,879
lot of things that different

99
00:03:44,879 --> 00:03:47,519
organizations share in common and the

100
00:03:47,519 --> 00:03:49,860
Practical the Practical implications of

101
00:03:49,860 --> 00:03:51,780
trying to control risk come down to kind

102
00:03:51,780 --> 00:03:53,940
of what your processes are and how you

103
00:03:53,940 --> 00:03:56,400
do things and so from the from the

104
00:03:56,400 --> 00:03:57,659
gitlab perspective we've been very

105
00:03:57,659 --> 00:03:59,760
focused on building a comprehensive

106
00:03:59,760 --> 00:04:01,620
devsecops platform that helps you to

107
00:04:01,620 --> 00:04:04,739
address those specific problems so we're

108
00:04:04,739 --> 00:04:07,319
very laser focused on on the use case of

109
00:04:07,319 --> 00:04:09,180
bringing folks together into kind of a

110
00:04:09,180 --> 00:04:10,980
collaborative environment and putting

111
00:04:10,980 --> 00:04:13,099
security practitioners and developers

112
00:04:13,099 --> 00:04:15,780
side by side to fix problems earlier in

113
00:04:15,780 --> 00:04:17,699
the process so that's something that

114
00:04:17,699 --> 00:04:19,858
we've all been hearing for how many how

115
00:04:19,858 --> 00:04:21,959
many years now in relation to devsecops

116
00:04:21,959 --> 00:04:24,479
but it's really been a cool experience

117
00:04:24,479 --> 00:04:26,220
to see folks being able to actually do

118
00:04:26,220 --> 00:04:27,840
that concretely with their with their

119
00:04:27,840 --> 00:04:29,880
tooling and so I think the the business

120
00:04:29,880 --> 00:04:31,860
value or the impact of that for a lot of

121
00:04:31,860 --> 00:04:33,660
organizations is that they're able to

122
00:04:33,660 --> 00:04:36,360
not only ship more secure software but

123
00:04:36,360 --> 00:04:39,180
also ship it faster because sort of the

124
00:04:39,180 --> 00:04:42,419
the time required to resolve issues is

125
00:04:42,419 --> 00:04:43,919
reduced if you have folks kind of all

126
00:04:43,919 --> 00:04:46,199
using the same set of workflows and the

127
00:04:46,199 --> 00:04:48,060
same the same tool set and then that

128
00:04:48,060 --> 00:04:51,419
also translates into if your your way of

129
00:04:51,419 --> 00:04:53,340
doing things if your processes are

130
00:04:53,340 --> 00:04:55,320
better defined if you're using

131
00:04:55,320 --> 00:04:56,820
consistent workflows across all of your

132
00:04:56,820 --> 00:04:59,460
organizations it's easier to say what it

133
00:04:59,460 --> 00:05:00,780
is that you're doing and be able to

134
00:05:00,780 --> 00:05:02,479
prove that from a from a compliance

135
00:05:02,479 --> 00:05:05,759
regulatory you know perspective

136
00:05:05,759 --> 00:05:08,520
um and so yeah let's mainly what I

137
00:05:08,520 --> 00:05:10,380
wanted to say about that

138
00:05:10,380 --> 00:05:14,460
great let's go next to Kirsten to talk

139
00:05:14,460 --> 00:05:17,100
about her slide and you know how what

140
00:05:17,100 --> 00:05:18,600
does red hat do to secure the platform

141
00:05:18,600 --> 00:05:21,120
and application cool so rather you all

142
00:05:21,120 --> 00:05:23,160
can see the slide and read it um but

143
00:05:23,160 --> 00:05:25,199
kind of if I kind of build on what what

144
00:05:25,199 --> 00:05:28,320
Hillary's been saying so in my role as a

145
00:05:28,320 --> 00:05:30,419
product manager one of my jobs is to be

146
00:05:30,419 --> 00:05:33,780
a bridge between engineers and our end

147
00:05:33,780 --> 00:05:36,900
users our customers and because you know

148
00:05:36,900 --> 00:05:39,900
red hat is really a platform company and

149
00:05:39,900 --> 00:05:42,660
so you know Linux has been out there for

150
00:05:42,660 --> 00:05:44,940
quite a while openshift we've been

151
00:05:44,940 --> 00:05:47,880
investing in openshift cncf certified

152
00:05:47,880 --> 00:05:50,660
Coupe distribution since

153
00:05:50,660 --> 00:05:54,199
coupe1.1.0 and contributed a lot of code

154
00:05:54,199 --> 00:05:57,960
that our Enterprise customers needed to

155
00:05:57,960 --> 00:06:00,539
feel comfortable with the security of

156
00:06:00,539 --> 00:06:02,280
kubernetes I really liked one of the

157
00:06:02,280 --> 00:06:04,440
points in the Keynotes this morning that

158
00:06:04,440 --> 00:06:06,900
oftentimes you know when new technology

159
00:06:06,900 --> 00:06:09,060
is built or developed there are

160
00:06:09,060 --> 00:06:11,100
assumptions that are made that may or

161
00:06:11,100 --> 00:06:14,160
may not pan out in the long run and

162
00:06:14,160 --> 00:06:16,560
originally kubernetes right was kind of

163
00:06:16,560 --> 00:06:19,320
designed for you know internal service

164
00:06:19,320 --> 00:06:22,199
its use and there was less focus on

165
00:06:22,199 --> 00:06:25,919
Insider threat at that time and so at

166
00:06:25,919 --> 00:06:28,380
Red Hat we really believe in building

167
00:06:28,380 --> 00:06:30,900
security capabilities into the solutions

168
00:06:30,900 --> 00:06:32,880
that need to be deployed in the

169
00:06:32,880 --> 00:06:34,919
Enterprise and we start with security

170
00:06:34,919 --> 00:06:37,680
capabilities at Linux which is a key

171
00:06:37,680 --> 00:06:39,240
element for running your containers

172
00:06:39,240 --> 00:06:42,120
right you need namespace isolation you

173
00:06:42,120 --> 00:06:45,660
need a set comp you need a whole range

174
00:06:45,660 --> 00:06:47,940
of things that protect that those

175
00:06:47,940 --> 00:06:50,000
running containers on that shared host

176
00:06:50,000 --> 00:06:53,220
then at the kubernetes layer right our

177
00:06:53,220 --> 00:06:54,900
back was not something that was

178
00:06:54,900 --> 00:06:57,960
originally present when Kube was first

179
00:06:57,960 --> 00:07:00,720
open sourced we contributed our back we

180
00:07:00,720 --> 00:07:02,520
contributed a range of things that

181
00:07:02,520 --> 00:07:03,840
enabled

182
00:07:03,840 --> 00:07:07,100
security capabilities for the Enterprise

183
00:07:07,100 --> 00:07:10,560
security context constraints which the

184
00:07:10,560 --> 00:07:12,060
Upstream version was pod security

185
00:07:12,060 --> 00:07:14,340
policies this is a Kube admission

186
00:07:14,340 --> 00:07:16,680
controller plug-in that helped to

187
00:07:16,680 --> 00:07:19,940
provide guard rails for ensuring that

188
00:07:19,940 --> 00:07:23,699
pods with privileged requirements were

189
00:07:23,699 --> 00:07:26,240
not accidentally deployed onto a cluster

190
00:07:26,240 --> 00:07:30,000
in contrast with the security policy of

191
00:07:30,000 --> 00:07:32,400
the organization right and so we've

192
00:07:32,400 --> 00:07:34,880
continued to build up that stack and

193
00:07:34,880 --> 00:07:37,500
advanced cluster security stack rocks

194
00:07:37,500 --> 00:07:40,280
very focused on workload security

195
00:07:40,280 --> 00:07:43,500
enabling integration at build time

196
00:07:43,500 --> 00:07:46,259
deploy time and runtime security

197
00:07:46,259 --> 00:07:48,900
analysis so really we want to be

198
00:07:48,900 --> 00:07:50,280
thinking about

199
00:07:50,280 --> 00:07:53,160
what I like to when I think devsecops I

200
00:07:53,160 --> 00:07:55,919
like to separate between devsec and

201
00:07:55,919 --> 00:07:58,319
secops and we heard some references to

202
00:07:58,319 --> 00:08:00,720
that this morning as well so for me the

203
00:08:00,720 --> 00:08:02,880
the devsec part is ensuring that I'm

204
00:08:02,880 --> 00:08:04,979
shifting left that I've got security

205
00:08:04,979 --> 00:08:08,400
guard rails in that pipeline

206
00:08:08,400 --> 00:08:10,860
and then the middle piece where they

207
00:08:10,860 --> 00:08:12,780
intersect is deployment I need guard

208
00:08:12,780 --> 00:08:15,240
rails there as well and then I need

209
00:08:15,240 --> 00:08:18,060
runtime detect and response which is the

210
00:08:18,060 --> 00:08:20,460
secops right so I kind of need all of

211
00:08:20,460 --> 00:08:23,580
those together and as Hillary was saying

212
00:08:23,580 --> 00:08:26,400
I think one of the things that we see in

213
00:08:26,400 --> 00:08:28,919
the container in kubernetes world is the

214
00:08:28,919 --> 00:08:31,880
technology really requires

215
00:08:31,880 --> 00:08:34,500
it's the same security principles but

216
00:08:34,500 --> 00:08:36,899
the way you implement them can be

217
00:08:36,899 --> 00:08:39,479
different and to do that effectively you

218
00:08:39,479 --> 00:08:42,179
do need a Common Language between your

219
00:08:42,179 --> 00:08:44,279
development and your operations and your

220
00:08:44,279 --> 00:08:47,160
security team and managing security

221
00:08:47,160 --> 00:08:51,480
policy as code is a way to start to move

222
00:08:51,480 --> 00:08:54,240
towards that common language so that the

223
00:08:54,240 --> 00:08:56,040
security team has comfort that the guard

224
00:08:56,040 --> 00:08:58,380
rails are there the developers can read

225
00:08:58,380 --> 00:09:00,120
and understand the code that the

226
00:09:00,120 --> 00:09:03,060
security team wants and and it improves

227
00:09:03,060 --> 00:09:05,220
that communication process so this is a

228
00:09:05,220 --> 00:09:08,279
big Focus for us

229
00:09:08,279 --> 00:09:12,420
great so we'll go next to David and talk

230
00:09:12,420 --> 00:09:14,820
about you know the VMware use case which

231
00:09:14,820 --> 00:09:17,339
is beyond shift left security you know

232
00:09:17,339 --> 00:09:20,459
dig a little deeper into that and I'm

233
00:09:20,459 --> 00:09:21,600
interested more I'm actually going to

234
00:09:21,600 --> 00:09:23,640
build off of both of yours because on

235
00:09:23,640 --> 00:09:26,880
the VMware side we start actually you

236
00:09:26,880 --> 00:09:28,080
know spring boost remember the languages

237
00:09:28,080 --> 00:09:30,000
we you know and going from there up to

238
00:09:30,000 --> 00:09:31,800
the operation platform so it's a big

239
00:09:31,800 --> 00:09:33,839
picture across the whole application and

240
00:09:33,839 --> 00:09:35,880
the parts that make it up and and for my

241
00:09:35,880 --> 00:09:37,200
world the conversations I really get

242
00:09:37,200 --> 00:09:39,120
involved with from the tanzu and VMware

243
00:09:39,120 --> 00:09:41,100
side is really the people and processes

244
00:09:41,100 --> 00:09:42,720
that's the hardest shift we're talking

245
00:09:42,720 --> 00:09:44,160
about we're talking about security teams

246
00:09:44,160 --> 00:09:46,140
that traditionally don't understand the

247
00:09:46,140 --> 00:09:47,940
apps they're involved too late in the

248
00:09:47,940 --> 00:09:49,860
process you know how do you actually get

249
00:09:49,860 --> 00:09:52,019
this to happen when when the changes

250
00:09:52,019 --> 00:09:53,820
we've had in the software development

251
00:09:53,820 --> 00:09:55,800
processes the Agile development the

252
00:09:55,800 --> 00:09:57,060
operational platforms and automation

253
00:09:57,060 --> 00:09:58,980
happening on that side those are pretty

254
00:09:58,980 --> 00:10:00,180
well established patterns we're making

255
00:10:00,180 --> 00:10:01,560
it better you know through tools like

256
00:10:01,560 --> 00:10:03,540
you have and like we and VMware have but

257
00:10:03,540 --> 00:10:05,040
it really is that people in process you

258
00:10:05,040 --> 00:10:06,839
know how are we changing the way we

259
00:10:06,839 --> 00:10:08,040
think about that common language you

260
00:10:08,040 --> 00:10:09,720
mentioned how do we how do we get a

261
00:10:09,720 --> 00:10:11,580
language because security people you

262
00:10:11,580 --> 00:10:12,660
know I was having a conversation with

263
00:10:12,660 --> 00:10:14,459
one gentleman here earlier you know the

264
00:10:14,459 --> 00:10:15,839
conversations that security people have

265
00:10:15,839 --> 00:10:18,480
it is different because it's looking at

266
00:10:18,480 --> 00:10:20,160
things from that risk point of view how

267
00:10:20,160 --> 00:10:22,620
do you actually analyze the risk and

268
00:10:22,620 --> 00:10:24,240
understand the vulnerabilities and the

269
00:10:24,240 --> 00:10:25,320
problems the environment and just having

270
00:10:25,320 --> 00:10:26,660
a tool that shows you a vulnerability

271
00:10:26,660 --> 00:10:28,860
doesn't tell you what the risk is to

272
00:10:28,860 --> 00:10:30,480
that so as we're looking at things from

273
00:10:30,480 --> 00:10:31,560
a viewer point of view we're actually

274
00:10:31,560 --> 00:10:33,420
starting from the developers the

275
00:10:33,420 --> 00:10:34,560
actually how do we actually developers

276
00:10:34,560 --> 00:10:36,839
to to do development and not have to

277
00:10:36,839 --> 00:10:37,860
worry about the platform they're

278
00:10:37,860 --> 00:10:39,240
deploying to but have knowledge of how

279
00:10:39,240 --> 00:10:40,920
it works and how do we support the

280
00:10:40,920 --> 00:10:43,140
operations teams to support the

281
00:10:43,140 --> 00:10:44,279
applications that are running on them

282
00:10:44,279 --> 00:10:46,380
while all talking to Security in the

283
00:10:46,380 --> 00:10:48,060
middle so one thing you'll hear me or

284
00:10:48,060 --> 00:10:49,560
any VMware person comp a lot is talking

285
00:10:49,560 --> 00:10:51,000
about balanced teams

286
00:10:51,000 --> 00:10:52,920
how do we actually do this and usually

287
00:10:52,920 --> 00:10:54,000
you think balance teams you're thinking

288
00:10:54,000 --> 00:10:55,620
oh a developer a designer an operations

289
00:10:55,620 --> 00:10:58,019
person SRE where do security fit into

290
00:10:58,019 --> 00:10:59,760
that picture and how do we actually fit

291
00:10:59,760 --> 00:11:01,440
into that and then we start layering on

292
00:11:01,440 --> 00:11:03,180
top of that all the open source that all

293
00:11:03,180 --> 00:11:04,560
of us depend upon every day we saw some

294
00:11:04,560 --> 00:11:05,579
of the Keynotes getting into some of

295
00:11:05,579 --> 00:11:06,779
those things that you know it's great

296
00:11:06,779 --> 00:11:07,920
that they've been great you know some

297
00:11:07,920 --> 00:11:09,360
PRS committed to a bunch of Open Source

298
00:11:09,360 --> 00:11:10,440
projects but I think what they say 15

299
00:11:10,440 --> 00:11:12,720
might respond you know how does that

300
00:11:12,720 --> 00:11:14,040
really solve the problem how are we

301
00:11:14,040 --> 00:11:15,120
actually getting into the depth of

302
00:11:15,120 --> 00:11:17,100
knowing well great you would once more

303
00:11:17,100 --> 00:11:19,260
have a live XML security problem but is

304
00:11:19,260 --> 00:11:21,240
that really impacting my code so how do

305
00:11:21,240 --> 00:11:23,220
we enable a developer platform so

306
00:11:23,220 --> 00:11:24,839
developers can focus on code and not

307
00:11:24,839 --> 00:11:25,860
worry about the simple you know

308
00:11:25,860 --> 00:11:28,140
upgrading should be easy today we know

309
00:11:28,140 --> 00:11:29,399
how to do that we've learned that over

310
00:11:29,399 --> 00:11:30,959
the years how do we actually make it so

311
00:11:30,959 --> 00:11:33,360
your developers and then the platforms

312
00:11:33,360 --> 00:11:34,740
you're running on can have those table

313
00:11:34,740 --> 00:11:36,480
stakes in place you can have real risk

314
00:11:36,480 --> 00:11:38,399
discussions and make that language a

315
00:11:38,399 --> 00:11:41,120
common thing around everybody

316
00:11:41,220 --> 00:11:43,620
great so I'm gonna I had some questions

317
00:11:43,620 --> 00:11:45,839
from their slides so I'll go back to

318
00:11:45,839 --> 00:11:49,320
their to Hillary slide first and uh

319
00:11:49,320 --> 00:11:51,240
would would like to ask her a question

320
00:11:51,240 --> 00:11:52,680
about

321
00:11:52,680 --> 00:11:54,360
you know what are the most challenging

322
00:11:54,360 --> 00:11:56,820
security compliance requirements and

323
00:11:56,820 --> 00:11:58,560
what industries are they prominent in we

324
00:11:58,560 --> 00:11:59,820
you know we see different Industries

325
00:11:59,820 --> 00:12:01,440
having different security needs

326
00:12:01,440 --> 00:12:04,620
obviously health care and finance are

327
00:12:04,620 --> 00:12:06,360
most prominent and you know government

328
00:12:06,360 --> 00:12:08,700
along with that so I would like to like

329
00:12:08,700 --> 00:12:10,800
you to dig a little deeper into that

330
00:12:10,800 --> 00:12:13,019
Hillary yeah that's a great question I

331
00:12:13,019 --> 00:12:14,579
think you know you highlighted the

332
00:12:14,579 --> 00:12:15,600
industries that I would point to

333
00:12:15,600 --> 00:12:17,760
actually uh in terms of you know very

334
00:12:17,760 --> 00:12:20,640
specific pretty intense uh compliance

335
00:12:20,640 --> 00:12:22,260
and Regulatory standards that can exist

336
00:12:22,260 --> 00:12:23,760
that these companies have to have to

337
00:12:23,760 --> 00:12:24,779
meet

338
00:12:24,779 --> 00:12:26,760
um and that's you know there are very

339
00:12:26,760 --> 00:12:27,959
specific things there in some of these

340
00:12:27,959 --> 00:12:29,339
industries but something that's been

341
00:12:29,339 --> 00:12:31,380
interesting for me uh working for gitlab

342
00:12:31,380 --> 00:12:34,079
and with such a a broad customer base

343
00:12:34,079 --> 00:12:36,320
seeing everything from small startups to

344
00:12:36,320 --> 00:12:38,459
mid-sized SAS companies government

345
00:12:38,459 --> 00:12:41,600
agencies these large very regulated

346
00:12:41,600 --> 00:12:43,920
companies is

347
00:12:43,920 --> 00:12:46,380
the commonalities that exist between all

348
00:12:46,380 --> 00:12:48,240
of them and so you may have something

349
00:12:48,240 --> 00:12:51,060
very specific that you have to do at one

350
00:12:51,060 --> 00:12:52,560
company versus another but in terms of

351
00:12:52,560 --> 00:12:54,120
how that actually happens on a

352
00:12:54,120 --> 00:12:55,800
day-to-day basis how you actually take

353
00:12:55,800 --> 00:12:57,959
action to prove compliance with

354
00:12:57,959 --> 00:12:59,160
something there's a lot of commonalities

355
00:12:59,160 --> 00:13:01,380
between the sort of actions that you

356
00:13:01,380 --> 00:13:02,760
need to take the processes you need to

357
00:13:02,760 --> 00:13:04,500
put in place and it becomes a little bit

358
00:13:04,500 --> 00:13:07,800
more about you know how how visible is

359
00:13:07,800 --> 00:13:09,720
your process how well documented is it

360
00:13:09,720 --> 00:13:12,300
how well do people actually adhere to

361
00:13:12,300 --> 00:13:14,279
those compliance processes how easy is

362
00:13:14,279 --> 00:13:17,279
it to revise those things and insert a

363
00:13:17,279 --> 00:13:19,500
particular like very

364
00:13:19,500 --> 00:13:21,899
um you know specific requirement or very

365
00:13:21,899 --> 00:13:23,940
specific standard that a given a company

366
00:13:23,940 --> 00:13:25,860
might need to meet how composable is it

367
00:13:25,860 --> 00:13:27,600
and so it becomes more about kind of the

368
00:13:27,600 --> 00:13:29,760
system or the framework for enabling

369
00:13:29,760 --> 00:13:31,800
compliance than it does sort of the

370
00:13:31,800 --> 00:13:33,480
bespoke requirements that might exist in

371
00:13:33,480 --> 00:13:35,880
one industry versus another

372
00:13:35,880 --> 00:13:40,700
and anything to add Kirsten just you

373
00:13:41,820 --> 00:13:43,260
yes I'm just

374
00:13:43,260 --> 00:13:44,220
I say

375
00:13:44,220 --> 00:13:45,660
[Music]

376
00:13:45,660 --> 00:13:48,720
policy is Purity is Code Compliance is

377
00:13:48,720 --> 00:13:51,959
code so we're very focused and and you

378
00:13:51,959 --> 00:13:53,940
know Hillary rightly is painting a

379
00:13:53,940 --> 00:13:57,000
broader picture at Red Hat where we play

380
00:13:57,000 --> 00:14:00,360
is automating compliance with applicable

381
00:14:00,360 --> 00:14:03,120
technical controls right so that's only

382
00:14:03,120 --> 00:14:05,339
a subset of what you need to look at

383
00:14:05,339 --> 00:14:06,779
when you're looking at compliance

384
00:14:06,779 --> 00:14:09,300
process is a is a big part of that now

385
00:14:09,300 --> 00:14:12,420
we are also investing in process around

386
00:14:12,420 --> 00:14:15,779
supply chain security but we've been

387
00:14:15,779 --> 00:14:17,940
doing compliances code for a long time

388
00:14:17,940 --> 00:14:20,959
for relfirst now for openshift

389
00:14:20,959 --> 00:14:23,160
multi-cluster compliances code

390
00:14:23,160 --> 00:14:26,339
configuration it's interesting so many

391
00:14:26,339 --> 00:14:29,220
of the Frameworks actually have

392
00:14:29,220 --> 00:14:31,320
overlapping controls when it comes to

393
00:14:31,320 --> 00:14:33,480
the technical side so you can actually

394
00:14:33,480 --> 00:14:35,880
get some big bang for the buck on the

395
00:14:35,880 --> 00:14:37,380
technical piece

396
00:14:37,380 --> 00:14:39,540
um other than supply chain security I'm

397
00:14:39,540 --> 00:14:41,420
not going to hit process

398
00:14:41,420 --> 00:14:44,940
and and the other thing kind of that to

399
00:14:44,940 --> 00:14:47,579
Circle back to some of what David was

400
00:14:47,579 --> 00:14:50,220
saying right is that that people piece

401
00:14:50,220 --> 00:14:53,240
we have to be able to provide

402
00:14:53,240 --> 00:14:57,060
human readable output and evidence to

403
00:14:57,060 --> 00:14:59,399
our Auditors and Auditors don't

404
00:14:59,399 --> 00:15:01,459
understand the new technologies either

405
00:15:01,459 --> 00:15:04,500
so one of the things that can become

406
00:15:04,500 --> 00:15:07,620
challenging in the compliance space is

407
00:15:07,620 --> 00:15:09,720
you know how do you work with those

408
00:15:09,720 --> 00:15:13,440
Auditors to to provide them evidence but

409
00:15:13,440 --> 00:15:15,720
also to help them understand that hey

410
00:15:15,720 --> 00:15:18,060
that traditional perimeter-based network

411
00:15:18,060 --> 00:15:21,779
security controls really aren't always

412
00:15:21,779 --> 00:15:24,600
applicable to a kubernetes cluster where

413
00:15:24,600 --> 00:15:26,639
I've got a software-defined network and

414
00:15:26,639 --> 00:15:28,680
I'm using a different way to do micro

415
00:15:28,680 --> 00:15:31,980
segmentation and to create isolation so

416
00:15:31,980 --> 00:15:33,720
it's a really interesting space I think

417
00:15:33,720 --> 00:15:34,920
for us

418
00:15:34,920 --> 00:15:36,720
that we're going to keep talking off of

419
00:15:36,720 --> 00:15:37,639
each other

420
00:15:37,639 --> 00:15:40,079
but no actually that's one of the most

421
00:15:40,079 --> 00:15:41,880
interesting conversations I have with

422
00:15:41,880 --> 00:15:44,040
customers is really that you know you

423
00:15:44,040 --> 00:15:45,540
traditionally have a say a Banky

424
00:15:45,540 --> 00:15:47,160
environment where you have your firewall

425
00:15:47,160 --> 00:15:48,660
team your architecture Team all these

426
00:15:48,660 --> 00:15:50,820
different segmented by responsibility

427
00:15:50,820 --> 00:15:52,199
duties in their different environments

428
00:15:52,199 --> 00:15:53,699
now you introduce software-defined

429
00:15:53,699 --> 00:15:55,560
networking either through a you know

430
00:15:55,560 --> 00:15:57,060
like an nsxt where it's like a Global

431
00:15:57,060 --> 00:15:59,220
Network or it's kubernetes in a cni you

432
00:15:59,220 --> 00:16:00,959
know different layers which one's

433
00:16:00,959 --> 00:16:02,339
responsible is it your networking team

434
00:16:02,339 --> 00:16:04,079
is it your firewall team is your

435
00:16:04,079 --> 00:16:05,760
architecture team is it your router team

436
00:16:05,760 --> 00:16:08,040
who's responsible for managing that and

437
00:16:08,040 --> 00:16:09,779
again that's a people process how do we

438
00:16:09,779 --> 00:16:12,180
change those pieces the Frameworks you

439
00:16:12,180 --> 00:16:14,339
know security like PCI just recently

440
00:16:14,339 --> 00:16:17,279
published late last year the uh their

441
00:16:17,279 --> 00:16:18,839
guidance their best practices on

442
00:16:18,839 --> 00:16:22,139
containers and containerization and now

443
00:16:22,139 --> 00:16:23,579
the sad thing is it doesn't directly

444
00:16:23,579 --> 00:16:25,380
apply back to PCI it's best practices

445
00:16:25,380 --> 00:16:27,540
you still have to apply PCI which gets

446
00:16:27,540 --> 00:16:28,620
you into things like well section five

447
00:16:28,620 --> 00:16:31,139
you're talking about any virus well

448
00:16:31,139 --> 00:16:32,699
really how do you do any virus in

449
00:16:32,699 --> 00:16:34,079
ephemeral environment you know really

450
00:16:34,079 --> 00:16:35,820
realistically it's the same conversation

451
00:16:35,820 --> 00:16:37,320
we're having with security teams and

452
00:16:37,320 --> 00:16:39,660
csos around the globe the mindset in the

453
00:16:39,660 --> 00:16:40,800
way they built policies and you talk to

454
00:16:40,800 --> 00:16:42,120
some of these firms these policies are

455
00:16:42,120 --> 00:16:44,279
40 years old in some places the

456
00:16:44,279 --> 00:16:45,720
Technologies not only changed the

457
00:16:45,720 --> 00:16:47,220
language has changed the approach is no

458
00:16:47,220 --> 00:16:48,720
longer a department of no but a risk

459
00:16:48,720 --> 00:16:51,420
management process how do we wrap our

460
00:16:51,420 --> 00:16:53,279
heads around that conversation and

461
00:16:53,279 --> 00:16:55,079
infrastructure as code is great security

462
00:16:55,079 --> 00:16:57,000
is code is great compliance this code is

463
00:16:57,000 --> 00:16:59,220
great but the translation the reality of

464
00:16:59,220 --> 00:17:01,139
making that happen is so difficult

465
00:17:01,139 --> 00:17:03,240
because there's nuances in how it's

466
00:17:03,240 --> 00:17:04,859
interpreted within the company and how

467
00:17:04,859 --> 00:17:07,140
do you express that language I've seen

468
00:17:07,140 --> 00:17:09,299
so many companies try so hard to do all

469
00:17:09,299 --> 00:17:11,339
of it as code without changing the

470
00:17:11,339 --> 00:17:13,980
people and it doesn't succeed and to

471
00:17:13,980 --> 00:17:16,380
your point right many security teams

472
00:17:16,380 --> 00:17:20,040
don't read yaml they aren't coders right

473
00:17:20,040 --> 00:17:24,480
and so and and also some of them at kind

474
00:17:24,480 --> 00:17:26,280
of across the team they may know the

475
00:17:26,280 --> 00:17:29,040
policies but they may not any longer

476
00:17:29,040 --> 00:17:32,220
know the why behind the policy so trying

477
00:17:32,220 --> 00:17:34,440
to shift a conversation right to get

478
00:17:34,440 --> 00:17:36,720
past that department of no you have to

479
00:17:36,720 --> 00:17:39,900
shift the conversation from Thou shalt

480
00:17:39,900 --> 00:17:43,200
to what are you trying to accomplish

481
00:17:43,200 --> 00:17:45,780
what's the attack Vector you know what's

482
00:17:45,780 --> 00:17:48,240
the threat and let's talk about how else

483
00:17:48,240 --> 00:17:51,059
we can address that

484
00:17:51,059 --> 00:17:54,679
okay you guys uh after this let me go to

485
00:17:54,679 --> 00:17:57,720
Kirsten you talked about automated guard

486
00:17:57,720 --> 00:17:59,880
rails and and I want to know because

487
00:17:59,880 --> 00:18:02,940
there is so much of issues at various

488
00:18:02,940 --> 00:18:05,820
companies in the time taken to make sure

489
00:18:05,820 --> 00:18:08,960
that all security policies are you know

490
00:18:08,960 --> 00:18:11,940
catered to and how that speed of

491
00:18:11,940 --> 00:18:15,120
innovation So when you say the automated

492
00:18:15,120 --> 00:18:16,980
you know does it reduce the need for

493
00:18:16,980 --> 00:18:19,080
oversight by the security team and how

494
00:18:19,080 --> 00:18:21,179
does the efficiencies gained by

495
00:18:21,179 --> 00:18:23,820
automating the security process help

496
00:18:23,820 --> 00:18:26,820
so I think once you've got agreement on

497
00:18:26,820 --> 00:18:28,620
the guard rails and you have the

498
00:18:28,620 --> 00:18:31,620
automated guard rails in place it does

499
00:18:31,620 --> 00:18:35,640
improve efficiency that conversation as

500
00:18:35,640 --> 00:18:37,200
David's been saying right that

501
00:18:37,200 --> 00:18:40,260
conversation about the guard rails and

502
00:18:40,260 --> 00:18:42,780
what they should be and how do I have

503
00:18:42,780 --> 00:18:45,059
evidence that they're in place and that

504
00:18:45,059 --> 00:18:48,480
they're being met can take some time but

505
00:18:48,480 --> 00:18:50,160
I think as a community we've really

506
00:18:50,160 --> 00:18:53,340
evolved in this space right so Cube

507
00:18:53,340 --> 00:18:55,500
admission controller plugins have been

508
00:18:55,500 --> 00:18:58,200
around for a while now we're seeing

509
00:18:58,200 --> 00:18:59,760
things like

510
00:18:59,760 --> 00:19:02,460
um you know the the uh

511
00:19:02,460 --> 00:19:05,220
policies that can be used in a you know

512
00:19:05,220 --> 00:19:08,580
and tracked with ebpf to say you know if

513
00:19:08,580 --> 00:19:10,860
something's violated alert on runtime

514
00:19:10,860 --> 00:19:13,320
we're also seeing

515
00:19:13,320 --> 00:19:14,880
um kind of one of the things I like

516
00:19:14,880 --> 00:19:17,460
about the guard rail on on network

517
00:19:17,460 --> 00:19:19,500
policies to your point Network policies

518
00:19:19,500 --> 00:19:22,260
in kubernetes in particular that is one

519
00:19:22,260 --> 00:19:24,419
of the most challenging conversations to

520
00:19:24,419 --> 00:19:26,760
have in a large organization because

521
00:19:26,760 --> 00:19:29,280
then if there is a network security team

522
00:19:29,280 --> 00:19:32,160
they're still thinking about firewalls

523
00:19:32,160 --> 00:19:33,660
between the three tiers of the

524
00:19:33,660 --> 00:19:36,179
application they're still thinking about

525
00:19:36,179 --> 00:19:38,940
you know that you know you can have a

526
00:19:38,940 --> 00:19:41,039
firewall outside the cluster but then

527
00:19:41,039 --> 00:19:43,080
they get all anxious about the node to

528
00:19:43,080 --> 00:19:45,360
node traffic what does that mean right

529
00:19:45,360 --> 00:19:48,120
and and how do I control that and Kube

530
00:19:48,120 --> 00:19:51,120
Network policies don't translate to the

531
00:19:51,120 --> 00:19:53,880
networking team and so one of the areas

532
00:19:53,880 --> 00:19:55,860
that that we're also investing in is

533
00:19:55,860 --> 00:19:58,620
enhanced Network observability that's

534
00:19:58,620 --> 00:20:01,080
available with stack rocks or ACS but

535
00:20:01,080 --> 00:20:03,360
also now we're adding that directly into

536
00:20:03,360 --> 00:20:06,900
openshift to kind of make this easier so

537
00:20:06,900 --> 00:20:08,640
I think it's a combination of those

538
00:20:08,640 --> 00:20:10,679
conversations they do have to be

539
00:20:10,679 --> 00:20:13,260
iterative and ideally you find a team

540
00:20:13,260 --> 00:20:15,900
like if you're working with an org that

541
00:20:15,900 --> 00:20:18,539
is more traditional hasn't yet shifted

542
00:20:18,539 --> 00:20:21,299
especially your security team find a

543
00:20:21,299 --> 00:20:25,020
team that you can hopefully get somebody

544
00:20:25,020 --> 00:20:27,960
from the security team to collaborate do

545
00:20:27,960 --> 00:20:30,600
this kind of together talk through the

546
00:20:30,600 --> 00:20:33,240
the what those guard rails are show them

547
00:20:33,240 --> 00:20:34,919
how they're implemented show them the

548
00:20:34,919 --> 00:20:37,200
evidence maybe they don't read the yaml

549
00:20:37,200 --> 00:20:39,980
but if you can show them a visualization

550
00:20:39,980 --> 00:20:43,380
of the output or the controls the

551
00:20:43,380 --> 00:20:45,240
security team the network security theme

552
00:20:45,240 --> 00:20:46,980
over time will be more comfortable

553
00:20:46,980 --> 00:20:49,440
they'll still be a little uncomfortable

554
00:20:49,440 --> 00:20:51,419
that their role is challenged they're

555
00:20:51,419 --> 00:20:53,340
maybe not the ones writing those Network

556
00:20:53,340 --> 00:20:55,980
policies but if they can see what

557
00:20:55,980 --> 00:20:58,980
they're doing and have some oversight

558
00:20:58,980 --> 00:21:01,799
that provides greater comfort and that

559
00:21:01,799 --> 00:21:04,919
frees all of us up any organization to

560
00:21:04,919 --> 00:21:07,160
start moving into Cloud native

561
00:21:07,160 --> 00:21:10,860
on-premises or in the public Cloud when

562
00:21:10,860 --> 00:21:15,539
the teams can see policy uh in a way

563
00:21:15,539 --> 00:21:17,880
that they understand so again if I think

564
00:21:17,880 --> 00:21:21,620
about security policies you know the the

565
00:21:21,620 --> 00:21:24,240
kubernative security policy is available

566
00:21:24,240 --> 00:21:26,340
in stack rocks they're written in a way

567
00:21:26,340 --> 00:21:27,780
that

568
00:21:27,780 --> 00:21:29,760
um if you were looking at the code might

569
00:21:29,760 --> 00:21:31,980
not make sense to the security team but

570
00:21:31,980 --> 00:21:34,020
if you look at the policy in the UI or

571
00:21:34,020 --> 00:21:36,780
via the API it does make sense right

572
00:21:36,780 --> 00:21:40,320
don't allow don't admit images with

573
00:21:40,320 --> 00:21:42,919
critical known vulnerabilities

574
00:21:42,919 --> 00:21:46,500
don't allow external access to this

575
00:21:46,500 --> 00:21:49,860
application so that translation piece is

576
00:21:49,860 --> 00:21:52,140
is really important and I think we're

577
00:21:52,140 --> 00:21:54,419
seeing more growth in the coop community

578
00:21:54,419 --> 00:21:57,380
in that space

579
00:21:57,840 --> 00:22:01,740
so so much on that one um maybe we can

580
00:22:01,740 --> 00:22:04,080
extend our time I think

581
00:22:04,080 --> 00:22:06,360
um no actually two sides to that one is

582
00:22:06,360 --> 00:22:07,980
it's great I want to get into the

583
00:22:07,980 --> 00:22:09,480
networking side because that's I I've

584
00:22:09,480 --> 00:22:11,520
networking is a big passion of mine but

585
00:22:11,520 --> 00:22:13,980
separately on the application side

586
00:22:13,980 --> 00:22:15,360
um going back to the balance team and

587
00:22:15,360 --> 00:22:16,620
the communication the people and process

588
00:22:16,620 --> 00:22:19,500
change part of this is is we have tools

589
00:22:19,500 --> 00:22:21,059
like we can all scan our stuff and know

590
00:22:21,059 --> 00:22:22,320
if we have vulnerabilities but what do

591
00:22:22,320 --> 00:22:24,059
you do with it what is the basic table

592
00:22:24,059 --> 00:22:26,400
Stakes where we have automation handling

593
00:22:26,400 --> 00:22:28,799
your platform and your applications so

594
00:22:28,799 --> 00:22:30,179
we don't need to sit there and you know

595
00:22:30,179 --> 00:22:32,220
pay 200 000 a year to Quality sorry if

596
00:22:32,220 --> 00:22:33,360
you're here close

597
00:22:33,360 --> 00:22:36,020
um to to actually scan all of your stuff

598
00:22:36,020 --> 00:22:38,100
you know that you are running an

599
00:22:38,100 --> 00:22:39,480
automated environment that will always

600
00:22:39,480 --> 00:22:41,580
have the latest version of whatever open

601
00:22:41,580 --> 00:22:42,960
source or commercial side you have

602
00:22:42,960 --> 00:22:44,460
available to your environment once

603
00:22:44,460 --> 00:22:45,659
you've gotten that table Stakes done

604
00:22:45,659 --> 00:22:48,360
that's the basics of of that guard rails

605
00:22:48,360 --> 00:22:49,440
you can start going to this question

606
00:22:49,440 --> 00:22:51,720
around say Network policies and you'll

607
00:22:51,720 --> 00:22:53,700
never have a good conversation there if

608
00:22:53,700 --> 00:22:55,260
you don't bring your networking team

609
00:22:55,260 --> 00:22:57,419
your security team but also your

610
00:22:57,419 --> 00:22:59,039
developers you know as your developers

611
00:22:59,039 --> 00:23:00,360
are having their weekly Sprints for

612
00:23:00,360 --> 00:23:01,679
their Agile development they're doing

613
00:23:01,679 --> 00:23:04,020
they know oh I'm doing a connection to

614
00:23:04,020 --> 00:23:05,700
this third party process I need to have

615
00:23:05,700 --> 00:23:07,140
this important part they know that

616
00:23:07,140 --> 00:23:08,520
they're writing the code that makes the

617
00:23:08,520 --> 00:23:10,140
connections wouldn't it be great if

618
00:23:10,140 --> 00:23:11,700
they're code documented and you can

619
00:23:11,700 --> 00:23:13,200
actually tie with the developers doing

620
00:23:13,200 --> 00:23:15,840
into an automated policy admission you

621
00:23:15,840 --> 00:23:17,280
know there are things we can start

622
00:23:17,280 --> 00:23:18,840
focusing on once you get past that table

623
00:23:18,840 --> 00:23:21,120
Stakes of just paying overtime scanning

624
00:23:21,120 --> 00:23:22,799
and upgrading let's get past that and

625
00:23:22,799 --> 00:23:24,960
focus on real real stuff and I'm sure

626
00:23:24,960 --> 00:23:26,100
git love is doing some really neat stuff

627
00:23:26,100 --> 00:23:28,080
on that that site and I'm just just

628
00:23:28,080 --> 00:23:30,299
really quickly right we added shift left

629
00:23:30,299 --> 00:23:32,700
Network policy generation for the app

630
00:23:32,700 --> 00:23:35,220
Dev it's still in Tech preview and then

631
00:23:35,220 --> 00:23:37,080
eventually on our roadmap you'll be able

632
00:23:37,080 --> 00:23:40,440
to compare that app that Network policy

633
00:23:40,440 --> 00:23:43,200
generated for the application against a

634
00:23:43,200 --> 00:23:45,840
system policy that says this is what's

635
00:23:45,840 --> 00:23:47,640
allowed and not allowed so that the

636
00:23:47,640 --> 00:23:50,400
developer knows before they even deploy

637
00:23:50,400 --> 00:23:52,559
whether it's going to meet it yeah I

638
00:23:52,559 --> 00:23:54,120
think some things touching on things

639
00:23:54,120 --> 00:23:55,440
both of you were talking about actually

640
00:23:55,440 --> 00:23:57,120
some of the things that we're working on

641
00:23:57,120 --> 00:23:58,860
are really around kind of up leveling

642
00:23:58,860 --> 00:23:59,880
like this problem that you're talking

643
00:23:59,880 --> 00:24:01,620
about like let's get past this why can't

644
00:24:01,620 --> 00:24:03,120
we patch like why are we still talking

645
00:24:03,120 --> 00:24:04,740
about this at this point it's so hard

646
00:24:04,740 --> 00:24:06,659
right like the Practical challenges of

647
00:24:06,659 --> 00:24:08,220
that it's like actually really hard to

648
00:24:08,220 --> 00:24:10,500
do and part of the problem there is is

649
00:24:10,500 --> 00:24:12,240
sort of like the communication between

650
00:24:12,240 --> 00:24:14,039
the security team and the development

651
00:24:14,039 --> 00:24:17,280
teams and so that that concept of let

652
00:24:17,280 --> 00:24:19,320
the security team express what they need

653
00:24:19,320 --> 00:24:21,480
in a policy that works in their language

654
00:24:21,480 --> 00:24:23,880
and then let the developer see what the

655
00:24:23,880 --> 00:24:25,500
security team wants directly in their

656
00:24:25,500 --> 00:24:26,820
merge request when they're trying to

657
00:24:26,820 --> 00:24:28,740
merge code and just automate that

658
00:24:28,740 --> 00:24:31,500
process like solve that problem uh and

659
00:24:31,500 --> 00:24:33,659
so that's it's it's a little bit nuts

660
00:24:33,659 --> 00:24:35,220
that we're still at this point like

661
00:24:35,220 --> 00:24:36,840
still having this conversation about

662
00:24:36,840 --> 00:24:38,280
about patching and about basic things

663
00:24:38,280 --> 00:24:39,480
but that's still where a lot of the

664
00:24:39,480 --> 00:24:41,039
problems are for a lot of organizations

665
00:24:41,039 --> 00:24:43,260
these days One Last Thing Before You Go

666
00:24:43,260 --> 00:24:46,200
I do want to point out we can also ask

667
00:24:46,200 --> 00:24:48,299
of our developers better test driven

668
00:24:48,299 --> 00:24:49,860
development you know we can automate

669
00:24:49,860 --> 00:24:51,900
anything but the fear is you know we're

670
00:24:51,900 --> 00:24:53,640
going to still go back to the late 80s

671
00:24:53,640 --> 00:24:55,140
and we have Java upgrade problems and

672
00:24:55,140 --> 00:24:56,340
things break you know we're going to

673
00:24:56,340 --> 00:24:57,900
have that fear that's inherent in our

674
00:24:57,900 --> 00:24:59,460
developer communities as well as our

675
00:24:59,460 --> 00:25:00,539
security communities it's afraid to make

676
00:25:00,539 --> 00:25:01,620
a firewall change it's going to break

677
00:25:01,620 --> 00:25:03,240
something no one wants to be the

678
00:25:03,240 --> 00:25:05,159
firewall broke it again you know I'm

679
00:25:05,159 --> 00:25:06,840
sure some more more than I have been in

680
00:25:06,840 --> 00:25:08,700
those conversations so how do we

681
00:25:08,700 --> 00:25:10,620
actually get to a point where we're

682
00:25:10,620 --> 00:25:12,960
actually you know enabling the

683
00:25:12,960 --> 00:25:14,880
developers to do what they need to do

684
00:25:14,880 --> 00:25:16,020
and we can do the automated upgrades

685
00:25:16,020 --> 00:25:17,400
around we can upgrade platforms that's

686
00:25:17,400 --> 00:25:19,380
easy I can upgrade openshift I can

687
00:25:19,380 --> 00:25:21,659
upgrade tanzu I can have pipelines you

688
00:25:21,659 --> 00:25:23,220
know your infrastructure itself is code

689
00:25:23,220 --> 00:25:24,779
like any application treat it like an

690
00:25:24,779 --> 00:25:27,059
application treat your your Platforms in

691
00:25:27,059 --> 00:25:28,700
the platforms of developers applications

692
00:25:28,700 --> 00:25:30,840
automate the upgrades of all that but it

693
00:25:30,840 --> 00:25:32,760
doesn't work for the application if the

694
00:25:32,760 --> 00:25:34,140
developers haven't written test driven

695
00:25:34,140 --> 00:25:37,200
you know test based applications so when

696
00:25:37,200 --> 00:25:38,880
you upgrade their node or their Java or

697
00:25:38,880 --> 00:25:40,919
their go or whatever the platform pieces

698
00:25:40,919 --> 00:25:42,900
around it are they can actually test and

699
00:25:42,900 --> 00:25:44,220
value the application works in the new

700
00:25:44,220 --> 00:25:45,900
version without that we can't automate

701
00:25:45,900 --> 00:25:47,700
anything

702
00:25:47,700 --> 00:25:52,140
okay so next question for for David and

703
00:25:52,140 --> 00:25:54,059
before I open it up for the audience to

704
00:25:54,059 --> 00:25:57,299
ask some questions you know open source

705
00:25:57,299 --> 00:25:59,279
this whole conference is on open source

706
00:25:59,279 --> 00:26:01,260
we have a lot of issues with folks

707
00:26:01,260 --> 00:26:02,940
injecting vulnerabilities into open

708
00:26:02,940 --> 00:26:06,240
source so my question is how does an odd

709
00:26:06,240 --> 00:26:09,779
an organization justify using open

710
00:26:09,779 --> 00:26:12,179
source you know and how do you overcome

711
00:26:12,179 --> 00:26:14,820
those challenges that they may have for

712
00:26:14,820 --> 00:26:17,580
open source with with security

713
00:26:17,580 --> 00:26:19,200
it's actually kind of a loaded question

714
00:26:19,200 --> 00:26:20,700
if you go back far enough if you look at

715
00:26:20,700 --> 00:26:21,659
the government like oh we're not going

716
00:26:21,659 --> 00:26:23,159
to use open source and everyone's like

717
00:26:23,159 --> 00:26:25,140
laughing going you are using open source

718
00:26:25,140 --> 00:26:27,299
there's no way around it these days uh

719
00:26:27,299 --> 00:26:28,320
what was some of the stats I think we

720
00:26:28,320 --> 00:26:29,400
had some of them the Keynotes you know

721
00:26:29,400 --> 00:26:32,159
80 or 90 of all today's software is open

722
00:26:32,159 --> 00:26:33,419
source the rest is just that little bit

723
00:26:33,419 --> 00:26:35,039
you've written we're all using open

724
00:26:35,039 --> 00:26:37,020
source and we need to have a better

725
00:26:37,020 --> 00:26:38,700
visibility of the risks of using that

726
00:26:38,700 --> 00:26:40,740
open source so how you know how do you

727
00:26:40,740 --> 00:26:42,240
have a partner who provides things like

728
00:26:42,240 --> 00:26:44,400
red hat or VMware or I don't know if you

729
00:26:44,400 --> 00:26:46,140
commit stuff open towards you share so

730
00:26:46,140 --> 00:26:48,419
yeah so how how are we supporting this

731
00:26:48,419 --> 00:26:49,679
community how are we making this better

732
00:26:49,679 --> 00:26:51,779
and having visibility into the risks of

733
00:26:51,779 --> 00:26:53,940
those you know you know are you able to

734
00:26:53,940 --> 00:26:56,460
go to your partner and say you know I'm

735
00:26:56,460 --> 00:26:57,900
at the latest version you know are you

736
00:26:57,900 --> 00:26:59,159
always making sure that's up to date are

737
00:26:59,159 --> 00:27:00,659
you contributing PRS back to the

738
00:27:00,659 --> 00:27:02,400
original open source you know is if if

739
00:27:02,400 --> 00:27:03,960
the community were like like the scan

740
00:27:03,960 --> 00:27:05,220
they mentioned this morning where they

741
00:27:05,220 --> 00:27:07,020
ran and patched you know thousands and

742
00:27:07,020 --> 00:27:09,000
thousands of apps if they don't respond

743
00:27:09,000 --> 00:27:11,880
maybe the community should say that

744
00:27:11,880 --> 00:27:13,620
application or Library whatever it is

745
00:27:13,620 --> 00:27:15,299
shouldn't be used we as a community

746
00:27:15,299 --> 00:27:16,740
should say if they're not responding to

747
00:27:16,740 --> 00:27:19,740
a PR that project is dead maybe we need

748
00:27:19,740 --> 00:27:20,940
to make some hard decisions on that but

749
00:27:20,940 --> 00:27:22,620
open source is used there's no way

750
00:27:22,620 --> 00:27:24,360
around it every one of us has it in your

751
00:27:24,360 --> 00:27:26,220
pocket on your phone on your watch you

752
00:27:26,220 --> 00:27:27,960
can't go anywhere every device we have

753
00:27:27,960 --> 00:27:29,640
in this room has open source in it

754
00:27:29,640 --> 00:27:31,500
there's no no getting around that but

755
00:27:31,500 --> 00:27:33,720
knowing the risks of that so having a

756
00:27:33,720 --> 00:27:36,840
vulnerability itself is not a bad thing

757
00:27:36,840 --> 00:27:38,940
if you understand the attack vectors and

758
00:27:38,940 --> 00:27:40,200
the risks of having it and how do you

759
00:27:40,200 --> 00:27:41,880
control and mitigate that because

760
00:27:41,880 --> 00:27:42,600
everything is going to have

761
00:27:42,600 --> 00:27:43,919
vulnerabilities there's nothing shipped

762
00:27:43,919 --> 00:27:45,059
today that doesn't have a vulnerability

763
00:27:45,059 --> 00:27:47,279
in it nothing

764
00:27:47,279 --> 00:27:48,779
yeah I would just add to that and say

765
00:27:48,779 --> 00:27:50,159
that just because something is secret

766
00:27:50,159 --> 00:27:51,740
doesn't mean it's secure

767
00:27:51,740 --> 00:27:54,299
you know it's like and and frankly like

768
00:27:54,299 --> 00:27:56,279
the more you're using common components

769
00:27:56,279 --> 00:27:57,779
that lots of other people are using the

770
00:27:57,779 --> 00:27:59,700
better chance that there is that that is

771
00:27:59,700 --> 00:28:01,200
more secure because it's not something

772
00:28:01,200 --> 00:28:03,480
that's sort of one-off only used by one

773
00:28:03,480 --> 00:28:04,500
company because they developed it

774
00:28:04,500 --> 00:28:05,580
internally

775
00:28:05,580 --> 00:28:06,779
um so there's a lot of value there I

776
00:28:06,779 --> 00:28:08,100
think to having Community around open

777
00:28:08,100 --> 00:28:10,260
source uh open source components for

778
00:28:10,260 --> 00:28:13,260
sure and I I obviously I mean everything

779
00:28:13,260 --> 00:28:16,380
Red Hat delivers is is built from with

780
00:28:16,380 --> 00:28:18,419
from open source software it's we're not

781
00:28:18,419 --> 00:28:21,059
even open core everything is open

782
00:28:21,059 --> 00:28:23,580
um I think the one thing David that you

783
00:28:23,580 --> 00:28:25,020
called out that I do want to build on

784
00:28:25,020 --> 00:28:28,679
when we say it's easy to upgrade I I

785
00:28:28,679 --> 00:28:31,740
think that there's a lot of nuance there

786
00:28:31,740 --> 00:28:34,020
in fact not just because of the

787
00:28:34,020 --> 00:28:35,820
workloads and the application

788
00:28:35,820 --> 00:28:38,100
requirements but also you think about a

789
00:28:38,100 --> 00:28:41,039
kubernetes platform which has so many

790
00:28:41,039 --> 00:28:43,140
components and then layered services

791
00:28:43,140 --> 00:28:45,299
that you're adding on top of that if

792
00:28:45,299 --> 00:28:47,840
you're using istio or you know every

793
00:28:47,840 --> 00:28:52,320
group platform needs a cni you know you

794
00:28:52,320 --> 00:28:54,000
you might be using istio there's a whole

795
00:28:54,000 --> 00:28:56,820
range of things and so

796
00:28:56,820 --> 00:28:58,860
one of the things we intentionally did

797
00:28:58,860 --> 00:29:01,980
with openshift 4 was to manage that

798
00:29:01,980 --> 00:29:05,279
platform with kubernetes operators which

799
00:29:05,279 --> 00:29:09,299
allows us to use the declarative and

800
00:29:09,299 --> 00:29:11,700
automated nature of kubernetes that is

801
00:29:11,700 --> 00:29:13,919
normally applied to workloads and apply

802
00:29:13,919 --> 00:29:16,380
it to the platform components that's how

803
00:29:16,380 --> 00:29:18,899
we actually simplify the upgrade of an

804
00:29:18,899 --> 00:29:21,120
openshift platform that includes the

805
00:29:21,120 --> 00:29:23,159
host operating system which is managed

806
00:29:23,159 --> 00:29:26,640
as a component of openshift but you

807
00:29:26,640 --> 00:29:28,919
still have to think about you know we

808
00:29:28,919 --> 00:29:30,179
still have plenty of Enterprise

809
00:29:30,179 --> 00:29:34,500
customers who take their time moving

810
00:29:34,500 --> 00:29:36,960
from one version to another partly

811
00:29:36,960 --> 00:29:38,640
because to the idea that everything is

812
00:29:38,640 --> 00:29:40,559
always up to the latest

813
00:29:40,559 --> 00:29:43,740
that's not necessarily the world I see

814
00:29:43,740 --> 00:29:47,039
for our customers because they have

815
00:29:47,039 --> 00:29:49,140
approval processes they have to worry

816
00:29:49,140 --> 00:29:50,760
about you know they have certification

817
00:29:50,760 --> 00:29:53,340
processes per version they have to worry

818
00:29:53,340 --> 00:29:55,020
about whether the apps work they have

819
00:29:55,020 --> 00:29:57,779
like it can be a six-month process to

820
00:29:57,779 --> 00:29:59,880
validate and then in the Telco world

821
00:29:59,880 --> 00:30:01,740
where we also have a lot of customers

822
00:30:01,740 --> 00:30:04,279
it's an even longer Horizon

823
00:30:04,279 --> 00:30:07,140
and containerized network functions is

824
00:30:07,140 --> 00:30:10,260
kind of this new space for kubernetes

825
00:30:10,260 --> 00:30:12,720
where those functions need privileges

826
00:30:12,720 --> 00:30:15,600
that a traditional microservice based

827
00:30:15,600 --> 00:30:18,179
app is not going to necessarily need so

828
00:30:18,179 --> 00:30:20,960
it's it's this really wide-ranging space

829
00:30:20,960 --> 00:30:24,360
so given that we can't always get the

830
00:30:24,360 --> 00:30:25,380
latest

831
00:30:25,380 --> 00:30:28,320
you want to be paying attention to where

832
00:30:28,320 --> 00:30:30,539
your open source comes from and if

833
00:30:30,539 --> 00:30:32,640
you're using Upstream open source yeah

834
00:30:32,640 --> 00:30:34,260
you're going to want the latest because

835
00:30:34,260 --> 00:30:36,240
that's when the most fixes are but

836
00:30:36,240 --> 00:30:37,980
you're going to have to evaluate whether

837
00:30:37,980 --> 00:30:39,840
it breaks the other things you're

838
00:30:39,840 --> 00:30:42,659
integrating with and I really like what

839
00:30:42,659 --> 00:30:45,360
you said about risk right there we see a

840
00:30:45,360 --> 00:30:47,880
lot of I see a lot of regulations or

841
00:30:47,880 --> 00:30:50,820
companies saying every vulnerability has

842
00:30:50,820 --> 00:30:52,380
to be fixed

843
00:30:52,380 --> 00:30:56,580
it's not possible it's also not a risk a

844
00:30:56,580 --> 00:30:59,039
real risk-based conversation when that's

845
00:30:59,039 --> 00:31:01,980
what they say right and so at Red Hat

846
00:31:01,980 --> 00:31:04,440
when we have these conversations you

847
00:31:04,440 --> 00:31:06,000
know we have a product security team

848
00:31:06,000 --> 00:31:08,940
that does evaluation uh for any cve that

849
00:31:08,940 --> 00:31:10,740
affects Red Hat content

850
00:31:10,740 --> 00:31:13,980
what is the actual impact you know the

851
00:31:13,980 --> 00:31:16,320
data you get from nvd it's wonderful we

852
00:31:16,320 --> 00:31:18,539
all rely on it but they have to look at

853
00:31:18,539 --> 00:31:20,640
the worst case situation they have to

854
00:31:20,640 --> 00:31:24,059
look across Linux and windows whereas

855
00:31:24,059 --> 00:31:26,279
our product security team can say look

856
00:31:26,279 --> 00:31:28,380
we know this is how we compile the code

857
00:31:28,380 --> 00:31:30,120
these are the kind of mitigations

858
00:31:30,120 --> 00:31:33,000
available to you and so you really need

859
00:31:33,000 --> 00:31:36,480
to be thinking about when you're using

860
00:31:36,480 --> 00:31:39,840
open source not just are the cves fixed

861
00:31:39,840 --> 00:31:42,840
but are there maintainers how reliable

862
00:31:42,840 --> 00:31:45,539
are those maintainers you know is the

863
00:31:45,539 --> 00:31:49,320
project neglected and and then you know

864
00:31:49,320 --> 00:31:51,179
how are you going to manage the lifetime

865
00:31:51,179 --> 00:31:52,919
of your use and you're absolutely right

866
00:31:52,919 --> 00:31:55,740
we all everything includes open source

867
00:31:55,740 --> 00:31:59,580
these days right it's it's amazing and I

868
00:31:59,580 --> 00:32:00,960
think you just hit on the point of why

869
00:32:00,960 --> 00:32:02,279
would you have a commercial vendor

870
00:32:02,279 --> 00:32:04,860
partner for open source it's it's you

871
00:32:04,860 --> 00:32:07,740
know VMware Red Hat you know gitlab

872
00:32:07,740 --> 00:32:11,539
we're all I'm sorry

873
00:32:11,840 --> 00:32:15,059
but no if you consider the rationale of

874
00:32:15,059 --> 00:32:16,620
this you know that the work that goes

875
00:32:16,620 --> 00:32:19,020
into testing the risk analysis that the

876
00:32:19,020 --> 00:32:21,000
security teams and all of our companies

877
00:32:21,000 --> 00:32:22,860
that actually do the work you know going

878
00:32:22,860 --> 00:32:24,240
back that test driven development I said

879
00:32:24,240 --> 00:32:26,880
if you look if you go grab kubernetes

880
00:32:26,880 --> 00:32:29,279
from upstream and run a release test

881
00:32:29,279 --> 00:32:30,539
across all the tests they've built in

882
00:32:30,539 --> 00:32:32,039
they've designed it for the for all the

883
00:32:32,039 --> 00:32:33,360
pieces and kubernetes but now if you

884
00:32:33,360 --> 00:32:34,980
start looking at all the other cncf

885
00:32:34,980 --> 00:32:36,480
projects that can work in kubernetes

886
00:32:36,480 --> 00:32:38,220
who's doing the integration testing

887
00:32:38,220 --> 00:32:39,299
between all of those it's generally

888
00:32:39,299 --> 00:32:40,500
vendors

889
00:32:40,500 --> 00:32:43,559
like ours who are doing various pieces

890
00:32:43,559 --> 00:32:44,880
of the puzzle you know our application

891
00:32:44,880 --> 00:32:46,500
platform ties into kubernetes just like

892
00:32:46,500 --> 00:32:48,600
other stuff how how do you do that

893
00:32:48,600 --> 00:32:50,100
regression testing across all of that

894
00:32:50,100 --> 00:32:51,779
how do you make sure that the functional

895
00:32:51,779 --> 00:32:53,100
versions you're releasing are tied

896
00:32:53,100 --> 00:32:54,720
together and then when security do it

897
00:32:54,720 --> 00:32:56,279
does have problems how are you doing

898
00:32:56,279 --> 00:32:57,659
that risk analysis and providing and I

899
00:32:57,659 --> 00:32:59,159
do want to point out if anyone here

900
00:32:59,159 --> 00:33:01,440
deals with PCI go look at PCI version

901
00:33:01,440 --> 00:33:03,179
four if you look in the in the

902
00:33:03,179 --> 00:33:05,640
vulnerability side as of next year

903
00:33:05,640 --> 00:33:07,140
they're going to acquire low and medium

904
00:33:07,140 --> 00:33:08,760
vulnerabilities have a risk assessment

905
00:33:08,760 --> 00:33:10,620
on them so if you're not doing that you

906
00:33:10,620 --> 00:33:11,880
have to patch high and critical always

907
00:33:11,880 --> 00:33:13,620
but they're going to start next year by

908
00:33:13,620 --> 00:33:14,580
saying you have to have a risk

909
00:33:14,580 --> 00:33:16,620
assessment on low and mediums as well so

910
00:33:16,620 --> 00:33:18,059
you need to make sure you're going to

911
00:33:18,059 --> 00:33:19,380
probably come back to all of us and say

912
00:33:19,380 --> 00:33:20,880
okay well we're using your product what

913
00:33:20,880 --> 00:33:22,380
are the low medium vulnerabilities how

914
00:33:22,380 --> 00:33:23,519
do you what's your risk analysis and how

915
00:33:23,519 --> 00:33:26,279
does that apply to my space so right so

916
00:33:26,279 --> 00:33:28,440
let's let's uh you know conversations

917
00:33:28,440 --> 00:33:30,120
were very good with everybody

918
00:33:30,120 --> 00:33:31,919
contributing here we I do want to leave

919
00:33:31,919 --> 00:33:33,600
some time for our audience to ask

920
00:33:33,600 --> 00:33:35,820
questions so if you can ask a question

921
00:33:35,820 --> 00:33:37,500
since it's being recorded a little loud

922
00:33:37,500 --> 00:33:39,360
and I will repeat it so that it's

923
00:33:39,360 --> 00:33:41,159
recorded well in the audience can listen

924
00:33:41,159 --> 00:33:43,500
to it we'll go from there so any

925
00:33:43,500 --> 00:33:44,940
questions

926
00:33:44,940 --> 00:33:48,559
thoughts points yes

927
00:34:17,639 --> 00:34:19,800
okay one of you guys want to repeat the

928
00:34:19,800 --> 00:34:20,820
question

929
00:34:20,820 --> 00:34:23,099
this sres it's a big question it was it

930
00:34:23,099 --> 00:34:25,199
was it was what are we seeing or

931
00:34:25,199 --> 00:34:26,879
recommending I guess for sres and

932
00:34:26,879 --> 00:34:29,040
typical operations teams and and

933
00:34:29,040 --> 00:34:30,418
shifting left and getting that better

934
00:34:30,418 --> 00:34:32,219
security conversation is that and I'm

935
00:34:32,219 --> 00:34:34,139
thinking and and how do we help

936
00:34:34,139 --> 00:34:36,359
organizations

937
00:34:36,359 --> 00:34:39,359
um take threat models yeah and shift

938
00:34:39,359 --> 00:34:41,940
those left as well because also remember

939
00:34:41,940 --> 00:34:44,099
you know you probably have you know any

940
00:34:44,099 --> 00:34:45,300
of the large firms I'm working with they

941
00:34:45,300 --> 00:34:47,159
could have 20 000 developers but only

942
00:34:47,159 --> 00:34:48,239
maybe two or three hundred security

943
00:34:48,239 --> 00:34:50,580
people how does that scale so you do

944
00:34:50,580 --> 00:34:51,899
need to have security Champions you need

945
00:34:51,899 --> 00:34:54,000
to have a gamification you have things

946
00:34:54,000 --> 00:34:56,159
to encourage people to do their best

947
00:34:56,159 --> 00:34:57,839
because I'll be honest developers don't

948
00:34:57,839 --> 00:34:59,700
want to write bad code they take pride

949
00:34:59,700 --> 00:35:01,440
in the code they're working on and just

950
00:35:01,440 --> 00:35:02,880
because the package has some Upstream

951
00:35:02,880 --> 00:35:04,440
thing that wasn't their fault how do we

952
00:35:04,440 --> 00:35:06,000
help them just get over that you know

953
00:35:06,000 --> 00:35:08,220
have a blameless culture need to have a

954
00:35:08,220 --> 00:35:09,660
blameless culture where people are

955
00:35:09,660 --> 00:35:11,400
comfortable bringing up issues and

956
00:35:11,400 --> 00:35:13,859
discussing them and and anything you can

957
00:35:13,859 --> 00:35:16,320
do to to inspire and have that and help

958
00:35:16,320 --> 00:35:19,140
those teams scale um we need all of the

959
00:35:19,140 --> 00:35:19,980
above

960
00:35:19,980 --> 00:35:21,540
yeah I would just double down actually

961
00:35:21,540 --> 00:35:22,800
on the concept of having security

962
00:35:22,800 --> 00:35:24,480
Champions so I think some of the most

963
00:35:24,480 --> 00:35:26,640
successful customers that we've had um

964
00:35:26,640 --> 00:35:29,099
using gitlab are those folks who have

965
00:35:29,099 --> 00:35:31,500
that security-minded culture and and the

966
00:35:31,500 --> 00:35:33,540
thought that uh the security team are

967
00:35:33,540 --> 00:35:35,040
sort of ambassadors and people who are

968
00:35:35,040 --> 00:35:36,599
there to help everyone understand what

969
00:35:36,599 --> 00:35:38,640
they need to do in order to build secure

970
00:35:38,640 --> 00:35:41,040
software so I'm I'm a big fan of that

971
00:35:41,040 --> 00:35:42,960
when um when that's when it works well

972
00:35:42,960 --> 00:35:46,020
yeah yeah and and you know there for a

973
00:35:46,020 --> 00:35:47,760
while we were hearing about business

974
00:35:47,760 --> 00:35:50,520
information security officers embedded

975
00:35:50,520 --> 00:35:52,859
with the app Dev team so that you could

976
00:35:52,859 --> 00:35:54,960
have those conversations up front and

977
00:35:54,960 --> 00:35:57,480
early I don't hear that as much as I

978
00:35:57,480 --> 00:36:00,540
used to but to the to the attack factor

979
00:36:00,540 --> 00:36:02,880
or the threat modeling angle you know

980
00:36:02,880 --> 00:36:04,800
depending on how deep you're getting you

981
00:36:04,800 --> 00:36:07,440
do still need experts

982
00:36:07,440 --> 00:36:09,900
who understand how to do threat modeling

983
00:36:09,900 --> 00:36:12,060
who understand things like pen testing

984
00:36:12,060 --> 00:36:13,980
and and digging in there one of the

985
00:36:13,980 --> 00:36:16,200
things I thought was awesome that cncf

986
00:36:16,200 --> 00:36:18,780
did in 2019 and I know there's a new one

987
00:36:18,780 --> 00:36:21,060
in progress so they open sourced a

988
00:36:21,060 --> 00:36:23,960
security audit for kubernetes itself

989
00:36:23,960 --> 00:36:26,660
including a threat model

990
00:36:26,660 --> 00:36:29,700
and unfortunately the URLs that I had

991
00:36:29,700 --> 00:36:31,980
from 2019 got broken because the content

992
00:36:31,980 --> 00:36:34,320
got moved around but I scrolled away

993
00:36:34,320 --> 00:36:37,680
PDFs and one of these days I'll I'll get

994
00:36:37,680 --> 00:36:40,020
them to make sure those URLs are easy to

995
00:36:40,020 --> 00:36:41,480
find again

996
00:36:41,480 --> 00:36:45,960
but another approach is to look at

997
00:36:45,960 --> 00:36:47,960
things like the miter attack framework

998
00:36:47,960 --> 00:36:51,359
and how can we and and this is something

999
00:36:51,359 --> 00:36:54,000
that snap rocks can help with map

1000
00:36:54,000 --> 00:36:56,460
security policies to the miter attack

1001
00:36:56,460 --> 00:36:59,579
framework and then again have those

1002
00:36:59,579 --> 00:37:02,579
policies available at build time deploy

1003
00:37:02,579 --> 00:37:04,920
time and run time depending on where

1004
00:37:04,920 --> 00:37:07,380
they best math right but mapping those

1005
00:37:07,380 --> 00:37:10,140
automated policies and guard rails to

1006
00:37:10,140 --> 00:37:12,900
the miter attack Vector can also help

1007
00:37:12,900 --> 00:37:15,480
create a bridge right between security

1008
00:37:15,480 --> 00:37:19,800
teams and developers so that and and the

1009
00:37:19,800 --> 00:37:21,599
attack vectors are out there and

1010
00:37:21,599 --> 00:37:23,820
available right developers like code

1011
00:37:23,820 --> 00:37:26,579
they they like you know

1012
00:37:26,579 --> 00:37:29,160
things that that are uh you know

1013
00:37:29,160 --> 00:37:31,619
detailed have a lot of information they

1014
00:37:31,619 --> 00:37:33,359
don't always have time to get up to

1015
00:37:33,359 --> 00:37:35,220
speed on those things right they're

1016
00:37:35,220 --> 00:37:37,740
under a lot of pressure to deliver you

1017
00:37:37,740 --> 00:37:40,560
know the the code that provides business

1018
00:37:40,560 --> 00:37:43,260
value but that mapping can also give

1019
00:37:43,260 --> 00:37:45,480
them some confidence they're not just

1020
00:37:45,480 --> 00:37:48,480
hearing somebody on their team who has a

1021
00:37:48,480 --> 00:37:50,420
rule that was developed 40 years ago

1022
00:37:50,420 --> 00:37:53,220
telling them Thou shalt right they can

1023
00:37:53,220 --> 00:37:55,500
see an external source

1024
00:37:55,500 --> 00:37:57,780
okay so we have basically run out of

1025
00:37:57,780 --> 00:37:58,859
time but I'm not seeing everybody

1026
00:37:58,859 --> 00:38:00,839
running out of this session so let's

1027
00:38:00,839 --> 00:38:03,000
take a time for one more question if

1028
00:38:03,000 --> 00:38:04,320
there is one more question on the

1029
00:38:04,320 --> 00:38:05,940
audience yes please go ahead and a

1030
00:38:05,940 --> 00:38:08,480
little bit loud

1031
00:38:18,020 --> 00:38:21,980
so I'll try repeating

1032
00:38:22,740 --> 00:38:24,480
yeah can you repeat the question yeah I

1033
00:38:24,480 --> 00:38:25,980
think I caught most of it I'm not sure I

1034
00:38:25,980 --> 00:38:28,260
caught the end so we've talked a lot on

1035
00:38:28,260 --> 00:38:29,820
the panel about the importance of

1036
00:38:29,820 --> 00:38:32,660
Shifting left and automating policies

1037
00:38:32,660 --> 00:38:35,220
and the question is what about the

1038
00:38:35,220 --> 00:38:38,099
importance of incident response teams

1039
00:38:38,099 --> 00:38:42,079
and I missed the last part

1040
00:38:43,440 --> 00:38:44,700
foreign

1041
00:38:44,700 --> 00:38:46,980
okay right and and as noted right

1042
00:38:46,980 --> 00:38:50,280
breaches are can be inevitable

1043
00:38:50,280 --> 00:38:53,880
um there are always new zero days Etc so

1044
00:38:53,880 --> 00:38:56,160
some comment about incident response

1045
00:38:56,160 --> 00:38:58,859
from us would be appreciated so I'll

1046
00:38:58,859 --> 00:39:00,900
jump in first um forensics and instant

1047
00:39:00,900 --> 00:39:02,760
responsible my favorite topics I I did

1048
00:39:02,760 --> 00:39:04,619
my first bootable forensic CD back in

1049
00:39:04,619 --> 00:39:06,900
the early 90s so I've been working with

1050
00:39:06,900 --> 00:39:08,280
forensics and response for a long time

1051
00:39:08,280 --> 00:39:10,800
in this ephemeral environment forensics

1052
00:39:10,800 --> 00:39:12,900
is going to be completely different than

1053
00:39:12,900 --> 00:39:14,880
anything else your team has use of

1054
00:39:14,880 --> 00:39:17,040
anything in case all those tools they

1055
00:39:17,040 --> 00:39:18,660
don't work in this space

1056
00:39:18,660 --> 00:39:21,060
so part of your instant response plan is

1057
00:39:21,060 --> 00:39:23,280
designing an architecture that can have

1058
00:39:23,280 --> 00:39:24,900
those controls and audits in place how

1059
00:39:24,900 --> 00:39:26,220
are you going to do you know you can't

1060
00:39:26,220 --> 00:39:27,480
you can't in the middle of an incident

1061
00:39:27,480 --> 00:39:28,920
go how are we going to do this you have

1062
00:39:28,920 --> 00:39:31,440
to plan it you have to test it without

1063
00:39:31,440 --> 00:39:33,000
any of that you don't have a plan and

1064
00:39:33,000 --> 00:39:34,740
part of that has to go back to the

1065
00:39:34,740 --> 00:39:36,420
architecture having the proper design

1066
00:39:36,420 --> 00:39:38,099
when your developers are doing sprints

1067
00:39:38,099 --> 00:39:39,540
one of the most successful Banks I

1068
00:39:39,540 --> 00:39:41,460
worked with they deployed an application

1069
00:39:41,460 --> 00:39:45,000
in eight weeks 58 microservices

1070
00:39:45,000 --> 00:39:46,440
everyone at our beds in this room

1071
00:39:46,440 --> 00:39:48,839
somewhere because it's a large Bank the

1072
00:39:48,839 --> 00:39:50,520
only way it worked is security was

1073
00:39:50,520 --> 00:39:52,079
embedded every week on the Sprint and

1074
00:39:52,079 --> 00:39:54,720
said one here's what you need to have

1075
00:39:54,720 --> 00:39:56,579
from both a policy point of view but

1076
00:39:56,579 --> 00:39:58,920
also from a risk point of view and then

1077
00:39:58,920 --> 00:40:00,000
two because they were doing test driven

1078
00:40:00,000 --> 00:40:01,920
development how the developers write a

1079
00:40:01,920 --> 00:40:04,020
test to validate that so they can

1080
00:40:04,020 --> 00:40:05,820
continuously test it with every release

1081
00:40:05,820 --> 00:40:08,040
after that and part of doing that was

1082
00:40:08,040 --> 00:40:09,480
making sure that when they did have an

1083
00:40:09,480 --> 00:40:11,940
incident they knew how the data was used

1084
00:40:11,940 --> 00:40:13,800
how the applications used all the

1085
00:40:13,800 --> 00:40:15,300
controls around it and they have a plan

1086
00:40:15,300 --> 00:40:17,700
for analyzing that to do proper you know

1087
00:40:17,700 --> 00:40:19,619
you know analysis of where where the

1088
00:40:19,619 --> 00:40:21,180
attack vectors were what the actual path

1089
00:40:21,180 --> 00:40:23,339
was where they went to and and there are

1090
00:40:23,339 --> 00:40:25,680
so many new Tools in here that you you

1091
00:40:25,680 --> 00:40:27,720
have you have to start planning now if

1092
00:40:27,720 --> 00:40:29,099
you don't start now you're it's going to

1093
00:40:29,099 --> 00:40:30,180
overwhelm you when something does happen

1094
00:40:30,180 --> 00:40:32,220
because it will happen

1095
00:40:32,220 --> 00:40:34,500
yeah I also think that like the the

1096
00:40:34,500 --> 00:40:36,660
existence of immutable infrastructure

1097
00:40:36,660 --> 00:40:38,040
has a really interesting like

1098
00:40:38,040 --> 00:40:39,359
declarative declarative and immutable

1099
00:40:39,359 --> 00:40:40,500
infrastructure has really interesting

1100
00:40:40,500 --> 00:40:42,480
implications for what you actually do in

1101
00:40:42,480 --> 00:40:44,700
response to an incident you know in in

1102
00:40:44,700 --> 00:40:47,160
the old days right uh if you have an

1103
00:40:47,160 --> 00:40:49,380
application that is you know a pet right

1104
00:40:49,380 --> 00:40:51,540
it's the concept of taking down a VM

1105
00:40:51,540 --> 00:40:53,460
that serves like a business critical

1106
00:40:53,460 --> 00:40:55,560
application is like mind-blowing today

1107
00:40:55,560 --> 00:40:57,540
the concept of oh there's something that

1108
00:40:57,540 --> 00:40:59,760
you know vaguely looks wrong with this

1109
00:40:59,760 --> 00:41:01,140
application over here but it's in a

1110
00:41:01,140 --> 00:41:02,400
container let me burn it down and then

1111
00:41:02,400 --> 00:41:04,140
like figure out what's going on that's

1112
00:41:04,140 --> 00:41:06,119
just like a very that's a very different

1113
00:41:06,119 --> 00:41:08,280
world that you're operating in so it has

1114
00:41:08,280 --> 00:41:09,540
really really interesting implications

1115
00:41:09,540 --> 00:41:11,820
that I think we haven't seen uh play out

1116
00:41:11,820 --> 00:41:14,220
yet yeah a couple of things related to

1117
00:41:14,220 --> 00:41:16,980
this right so as you say there are going

1118
00:41:16,980 --> 00:41:19,440
to be things that happen in the runtime

1119
00:41:19,440 --> 00:41:21,420
and you need to figure out how to

1120
00:41:21,420 --> 00:41:24,300
respond it is a challenge when there

1121
00:41:24,300 --> 00:41:26,640
there are some options

1122
00:41:26,640 --> 00:41:28,920
um available now right in a declarative

1123
00:41:28,920 --> 00:41:32,700
environment if uh it looks like a

1124
00:41:32,700 --> 00:41:34,680
running container a pod was tampered

1125
00:41:34,680 --> 00:41:37,619
with you should be able to kill that and

1126
00:41:37,619 --> 00:41:39,900
then it's going to be redeployed from

1127
00:41:39,900 --> 00:41:43,020
code now it's possible that you know you

1128
00:41:43,020 --> 00:41:44,940
that doesn't finish everything that

1129
00:41:44,940 --> 00:41:46,560
doesn't protect everything right but but

1130
00:41:46,560 --> 00:41:49,680
how do you manage an incident in a

1131
00:41:49,680 --> 00:41:52,020
business critical application when maybe

1132
00:41:52,020 --> 00:41:53,760
you can't afford to take down that app

1133
00:41:53,760 --> 00:41:56,940
right full time so the option to kill

1134
00:41:56,940 --> 00:41:59,400
the Pod and redeploy from code while you

1135
00:41:59,400 --> 00:42:03,000
investigate is something to consider and

1136
00:42:03,000 --> 00:42:04,740
one of the cool things that is happening

1137
00:42:04,740 --> 00:42:07,020
is the Kube Community has really matured

1138
00:42:07,020 --> 00:42:09,480
they're now working like I have had so

1139
00:42:09,480 --> 00:42:11,339
many customers ask me I want to be able

1140
00:42:11,339 --> 00:42:13,920
to freeze that environment where the

1141
00:42:13,920 --> 00:42:15,780
incident happened so that I can

1142
00:42:15,780 --> 00:42:18,300
investigate and drill down and that has

1143
00:42:18,300 --> 00:42:21,180
not been something you could do in Cube

1144
00:42:21,180 --> 00:42:24,180
the community is working on capabilities

1145
00:42:24,180 --> 00:42:27,180
for kubernetes that will allow you to

1146
00:42:27,180 --> 00:42:29,700
kind of copy something off to the side

1147
00:42:29,700 --> 00:42:32,040
and kind of create that sandboxed

1148
00:42:32,040 --> 00:42:33,960
environment I'm blanking on the on the

1149
00:42:33,960 --> 00:42:36,060
new name for the for the feature but I'm

1150
00:42:36,060 --> 00:42:38,160
really excited to see the community

1151
00:42:38,160 --> 00:42:40,380
investing in that I do want to give a

1152
00:42:40,380 --> 00:42:41,700
quick note though if you are in public

1153
00:42:41,700 --> 00:42:43,859
cloud and you do this if say you're a

1154
00:42:43,859 --> 00:42:45,599
mid-sized company or say a large company

1155
00:42:45,599 --> 00:42:47,220
you have say two or three hundred

1156
00:42:47,220 --> 00:42:48,839
thousand containers and you start

1157
00:42:48,839 --> 00:42:50,460
freezing things and you automate things

1158
00:42:50,460 --> 00:42:53,160
you might end up having hundreds of

1159
00:42:53,160 --> 00:42:54,300
thousands of containers remember your

1160
00:42:54,300 --> 00:42:55,680
security team

1161
00:42:55,680 --> 00:42:57,420
forensic work takes a lot of work you're

1162
00:42:57,420 --> 00:42:59,460
going through and analyzing down to the

1163
00:42:59,460 --> 00:43:01,319
bits and bytes what happened and if

1164
00:43:01,319 --> 00:43:03,180
you're under attack every day you know

1165
00:43:03,180 --> 00:43:04,619
what's the backlog you're giving this

1166
00:43:04,619 --> 00:43:07,200
team of new images to scan and and how

1167
00:43:07,200 --> 00:43:08,520
many millions of dollars per year you're

1168
00:43:08,520 --> 00:43:09,720
going to have with this infrastructure

1169
00:43:09,720 --> 00:43:10,800
that's totally being worked through so

1170
00:43:10,800 --> 00:43:13,500
it's it's a great tool but it I want to

1171
00:43:13,500 --> 00:43:14,760
go back to what I mentioned it hasn't

1172
00:43:14,760 --> 00:43:17,160
been released yet it's still out so so

1173
00:43:17,160 --> 00:43:18,540
we don't know yet so remember in the

1174
00:43:18,540 --> 00:43:19,619
keynote for those who are watching the

1175
00:43:19,619 --> 00:43:20,760
keynote there's those great slides

1176
00:43:20,760 --> 00:43:21,839
showing like SQL injection the

1177
00:43:21,839 --> 00:43:23,520
visibility of things again bringing the

1178
00:43:23,520 --> 00:43:25,800
idea to your developers saying well

1179
00:43:25,800 --> 00:43:27,180
great you're say for example you're

1180
00:43:27,180 --> 00:43:28,859
doing input validation you know to

1181
00:43:28,859 --> 00:43:31,140
attacking applications very very noisy

1182
00:43:31,140 --> 00:43:33,240
if you're logging input validation how

1183
00:43:33,240 --> 00:43:34,380
can you build some of the metrics that

1184
00:43:34,380 --> 00:43:35,700
are coming out of the tools that all of

1185
00:43:35,700 --> 00:43:37,200
our companies are working on so when

1186
00:43:37,200 --> 00:43:39,240
actually an attack is happening you can

1187
00:43:39,240 --> 00:43:41,640
respond around it before they gain a

1188
00:43:41,640 --> 00:43:43,980
foothold in there so so let's let's that

1189
00:43:43,980 --> 00:43:45,599
means what shifting left is it really is

1190
00:43:45,599 --> 00:43:47,460
enabling our developers to take the

1191
00:43:47,460 --> 00:43:49,319
tools and techniques they have and

1192
00:43:49,319 --> 00:43:50,700
better enable a security conversation

1193
00:43:50,700 --> 00:43:53,700
from those but I think secops is just as

1194
00:43:53,700 --> 00:43:56,040
important

1195
00:43:56,040 --> 00:43:58,560
okay so with that if you have any

1196
00:43:58,560 --> 00:44:00,180
feedback that we can improve this

1197
00:44:00,180 --> 00:44:02,819
session next time please you know scan

1198
00:44:02,819 --> 00:44:04,560
the QR code and provide some feedback

1199
00:44:04,560 --> 00:44:07,380
and we had a great conversation give our

1200
00:44:07,380 --> 00:44:10,940
panelists a round of applause

1201
00:44:11,160 --> 00:44:13,380
thank you

1202
00:44:13,380 --> 00:44:14,940
and I'll be hanging out the VMware Booth

1203
00:44:14,940 --> 00:44:17,160
if anyone's going to help

1204
00:44:17,160 --> 00:44:20,240
thank you all so much

