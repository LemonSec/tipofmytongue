1
00:00:00,060 --> 00:00:01,380
okay

2
00:00:01,380 --> 00:00:04,680
um so yeah this is uh good fences mate

3
00:00:04,680 --> 00:00:07,740
good neighbors uh I am Nick Young I just

4
00:00:07,740 --> 00:00:09,059
wanted to

5
00:00:09,059 --> 00:00:10,260
I'm not gonna be doing much walking

6
00:00:10,260 --> 00:00:12,000
around because of this thing

7
00:00:12,000 --> 00:00:14,880
um but uh yeah let's get started so

8
00:00:14,880 --> 00:00:18,900
uh my name is Nick Young uh I am a uh

9
00:00:18,900 --> 00:00:21,000
Senior Systems engineer with ice

10
00:00:21,000 --> 00:00:23,279
surveillance I do a lot of work on

11
00:00:23,279 --> 00:00:25,920
ethelium service mesh there but my other

12
00:00:25,920 --> 00:00:27,420
hat is that I'm a maintainer on a

13
00:00:27,420 --> 00:00:29,580
Gateway API and that's where that's

14
00:00:29,580 --> 00:00:30,660
where all of this work on reference

15
00:00:30,660 --> 00:00:32,279
Grant mainly comes from

16
00:00:32,279 --> 00:00:34,920
so as an Australian

17
00:00:34,920 --> 00:00:37,140
I feel like it's quite important that I

18
00:00:37,140 --> 00:00:38,700
mentioned that uh I'm not talking about

19
00:00:38,700 --> 00:00:40,739
these type of neighbors

20
00:00:40,739 --> 00:00:43,020
um you know although uh the theme song

21
00:00:43,020 --> 00:00:45,840
tells us that uh you know this this type

22
00:00:45,840 --> 00:00:47,640
of neighbors often become good friends

23
00:00:47,640 --> 00:00:50,100
um the uh the TV show is not what I'm

24
00:00:50,100 --> 00:00:51,300
talking about today

25
00:00:51,300 --> 00:00:54,420
what I am talking about is that you know

26
00:00:54,420 --> 00:00:56,219
the idea for this talk sort of came from

27
00:00:56,219 --> 00:00:57,899
this statement um that you know it's a

28
00:00:57,899 --> 00:00:59,640
bit of a cliche but you know good fences

29
00:00:59,640 --> 00:01:00,960
make good neighbors is all about the

30
00:01:00,960 --> 00:01:02,879
fact that you if you're living right

31
00:01:02,879 --> 00:01:05,159
next to somebody the thing you need the

32
00:01:05,159 --> 00:01:07,500
thing you need to do is talk to them

33
00:01:07,500 --> 00:01:09,060
about you know you need to have

34
00:01:09,060 --> 00:01:10,680
agreements about what happens between

35
00:01:10,680 --> 00:01:12,180
the two of you right like it's all about

36
00:01:12,180 --> 00:01:14,340
agreements and having clear delineation

37
00:01:14,340 --> 00:01:16,860
between between neighbors is what makes

38
00:01:16,860 --> 00:01:19,200
neighbors good friends right like that's

39
00:01:19,200 --> 00:01:21,299
what the and so that's that's sort of

40
00:01:21,299 --> 00:01:23,220
the the where the theme of the tour came

41
00:01:23,220 --> 00:01:25,380
from so

42
00:01:25,380 --> 00:01:27,680
here's what we'll talk about today so

43
00:01:27,680 --> 00:01:29,640
namespace is one of the most important

44
00:01:29,640 --> 00:01:31,920
security boundaries in kubernetes

45
00:01:31,920 --> 00:01:34,200
making references across namespaces is

46
00:01:34,200 --> 00:01:36,299
actually really easy to get wrong very

47
00:01:36,299 --> 00:01:39,600
easy to do in a in a not great way

48
00:01:39,600 --> 00:01:41,460
um there is a little bit of prior art

49
00:01:41,460 --> 00:01:43,380
here before reference Grant

50
00:01:43,380 --> 00:01:45,720
and then this is how we do it in go API

51
00:01:45,720 --> 00:01:47,640
including reference Grant and what is a

52
00:01:47,640 --> 00:01:49,079
reference Grant

53
00:01:49,079 --> 00:01:50,939
and then actually there's been a lot of

54
00:01:50,939 --> 00:01:52,500
developments in next steps for reference

55
00:01:52,500 --> 00:01:53,820
Grant I had to literally update this

56
00:01:53,820 --> 00:01:56,220
like three times this week because

57
00:01:56,220 --> 00:01:57,600
there's been some stuff happen this week

58
00:01:57,600 --> 00:02:00,840
so there I'll get to that at the end

59
00:02:00,840 --> 00:02:03,840
so kubernetes namespaces um you know

60
00:02:03,840 --> 00:02:05,820
hopefully you're all reasonably familiar

61
00:02:05,820 --> 00:02:08,280
with kubernetes uh and you know

62
00:02:08,280 --> 00:02:09,840
namespace is the main way you enclose a

63
00:02:09,840 --> 00:02:12,180
trust domain in kubernetes

64
00:02:12,180 --> 00:02:15,420
um most users have access to a bunch of

65
00:02:15,420 --> 00:02:18,180
resources in a whole namespace it's

66
00:02:18,180 --> 00:02:19,620
pretty unusual to have people share a

67
00:02:19,620 --> 00:02:21,300
namespace and not sort of have access to

68
00:02:21,300 --> 00:02:24,599
all the same things so generally in this

69
00:02:24,599 --> 00:02:26,040
sort of use case we've assumed in

70
00:02:26,040 --> 00:02:27,900
general that basically that people

71
00:02:27,900 --> 00:02:30,060
pretty much have like admin over their

72
00:02:30,060 --> 00:02:32,700
namespace like that they can read read

73
00:02:32,700 --> 00:02:35,400
write and Patch all

74
00:02:35,400 --> 00:02:37,520
resources in their namespace generally

75
00:02:37,520 --> 00:02:39,599
obviously that's not always the case but

76
00:02:39,599 --> 00:02:41,040
like most of the design that we're doing

77
00:02:41,040 --> 00:02:43,319
here assumes that

78
00:02:43,319 --> 00:02:45,180
um it is sometimes really handy to have

79
00:02:45,180 --> 00:02:47,220
cost no space references um you know a

80
00:02:47,220 --> 00:02:49,319
good example here is uh you know TLS

81
00:02:49,319 --> 00:02:51,300
secrets that you might want some

82
00:02:51,300 --> 00:02:53,160
conflict to be able to consume but you

83
00:02:53,160 --> 00:02:54,180
don't want people to actually be able to

84
00:02:54,180 --> 00:02:56,700
read so an example of that would be you

85
00:02:56,700 --> 00:02:58,440
know you've got some TLS secret that is

86
00:02:58,440 --> 00:03:01,200
the um you know that's the the key pair

87
00:03:01,200 --> 00:03:03,120
for your the Wild Card keeper for your

88
00:03:03,120 --> 00:03:04,620
company domain you don't want everybody

89
00:03:04,620 --> 00:03:07,200
to be able to read that key pair but you

90
00:03:07,200 --> 00:03:08,340
probably do want a lot of people to be

91
00:03:08,340 --> 00:03:11,099
able to use things to make arbitrary you

92
00:03:11,099 --> 00:03:12,659
know subdomains for Ingress or something

93
00:03:12,659 --> 00:03:14,220
like that and so like that is a really

94
00:03:14,220 --> 00:03:15,780
good use case where it's really good to

95
00:03:15,780 --> 00:03:17,940
be able to have to be able to say you

96
00:03:17,940 --> 00:03:21,120
can use this but you can't read it

97
00:03:21,120 --> 00:03:23,099
um and you know another one is that this

98
00:03:23,099 --> 00:03:24,599
is another Ingress example some people

99
00:03:24,599 --> 00:03:26,099
want to have Ingress config live in one

100
00:03:26,099 --> 00:03:28,980
namespace and the back end's in another

101
00:03:28,980 --> 00:03:31,860
um you know with with V1 Ingress uh one

102
00:03:31,860 --> 00:03:33,060
of the problems with it is that you can

103
00:03:33,060 --> 00:03:34,920
do that really easily

104
00:03:34,920 --> 00:03:37,980
um you know but it's kind of not ideal

105
00:03:37,980 --> 00:03:39,239
um because of some of the reasons I'll

106
00:03:39,239 --> 00:03:41,159
go into

107
00:03:41,159 --> 00:03:43,680
yeah so cross namespace references are

108
00:03:43,680 --> 00:03:45,000
actually really hard because it's really

109
00:03:45,000 --> 00:03:47,459
easy to accidentally Grant too much

110
00:03:47,459 --> 00:03:48,780
access

111
00:03:48,780 --> 00:03:51,060
um you know so if you think about it you

112
00:03:51,060 --> 00:03:54,120
if uh you know Alice owns a namespace

113
00:03:54,120 --> 00:03:56,640
and Bob owns a namespace and Alice wants

114
00:03:56,640 --> 00:03:58,799
to use something in Bob's namespace and

115
00:03:58,799 --> 00:04:01,799
the The Primitives you're using just say

116
00:04:01,799 --> 00:04:03,480
Okay Alice gets to use anything that's

117
00:04:03,480 --> 00:04:05,519
in Bob's namespace Bob has no control

118
00:04:05,519 --> 00:04:07,379
Bob doesn't understand what's being used

119
00:04:07,379 --> 00:04:09,360
and has no way to say you can't use this

120
00:04:09,360 --> 00:04:10,620
maybe Bob has something he doesn't want

121
00:04:10,620 --> 00:04:12,540
other people using but there's no way

122
00:04:12,540 --> 00:04:14,340
unless you unless you do something like

123
00:04:14,340 --> 00:04:16,440
this to make sure that you do that and

124
00:04:16,440 --> 00:04:17,639
so that's that's where we come to the

125
00:04:17,639 --> 00:04:19,918
key the key is the two people need to

126
00:04:19,918 --> 00:04:21,899
agree the person who is making the

127
00:04:21,899 --> 00:04:23,940
reference needs you know needs to be

128
00:04:23,940 --> 00:04:25,259
able to Signal their intent that they

129
00:04:25,259 --> 00:04:27,240
want to use a reference across name

130
00:04:27,240 --> 00:04:29,160
spaces and the person who owns the thing

131
00:04:29,160 --> 00:04:31,620
that is being referred the referent

132
00:04:31,620 --> 00:04:33,419
um need to be able to needs to be able

133
00:04:33,419 --> 00:04:36,780
to say this type of reference is okay

134
00:04:36,780 --> 00:04:38,400
uh and you know so that's that's the

135
00:04:38,400 --> 00:04:39,479
sort of the keys there needs to be a

136
00:04:39,479 --> 00:04:41,759
two-way handshake uh for the for

137
00:04:41,759 --> 00:04:43,919
namespace for cost namespace references

138
00:04:43,919 --> 00:04:46,020
to be more secure I won't say secure

139
00:04:46,020 --> 00:04:47,040
because we're at a security conference

140
00:04:47,040 --> 00:04:48,240
we all know there's no such thing as

141
00:04:48,240 --> 00:04:50,520
secure but more secure I think is

142
00:04:50,520 --> 00:04:52,560
probably the best we can aim for you I

143
00:04:52,560 --> 00:04:54,360
should note that uh I kind of feel like

144
00:04:54,360 --> 00:04:56,460
this is a pretty good General Security

145
00:04:56,460 --> 00:04:57,960
design principle that if you're talking

146
00:04:57,960 --> 00:05:00,600
about any sort of Crossing trust domain

147
00:05:00,600 --> 00:05:03,180
relationship both sides of the trust you

148
00:05:03,180 --> 00:05:04,860
know of any trust relationship need to

149
00:05:04,860 --> 00:05:07,080
agree seems pretty stupid and simple

150
00:05:07,080 --> 00:05:09,780
when you say it aside but we all know

151
00:05:09,780 --> 00:05:12,600
Common Sense is not that common right

152
00:05:12,600 --> 00:05:13,740
so

153
00:05:13,740 --> 00:05:14,820
oh

154
00:05:14,820 --> 00:05:18,620
great my slides have not helped

155
00:05:20,220 --> 00:05:24,560
thank you for changing my things

156
00:05:28,680 --> 00:05:30,180
okay

157
00:05:30,180 --> 00:05:33,180
so here's a piece of prior art um

158
00:05:33,180 --> 00:05:36,240
well I mean for full disclosure I was a

159
00:05:36,240 --> 00:05:37,919
maintainer on Contour I didn't build

160
00:05:37,919 --> 00:05:40,259
this but I certainly used it a lot and

161
00:05:40,259 --> 00:05:40,979
so

162
00:05:40,979 --> 00:05:43,919
um we had uh we had we needed to solve

163
00:05:43,919 --> 00:05:45,180
that exact problem I talked about before

164
00:05:45,180 --> 00:05:47,820
with having you know Ingress config live

165
00:05:47,820 --> 00:05:51,600
in one namespace and the uh you know TLS

166
00:05:51,600 --> 00:05:52,800
certificate live in another namespace

167
00:05:52,800 --> 00:05:55,740
and so we came up with this um resource

168
00:05:55,740 --> 00:05:58,080
called TLS certificate delegation and so

169
00:05:58,080 --> 00:06:00,180
the way it worked was it lived in

170
00:06:00,180 --> 00:06:01,919
alongside the secret that you want to

171
00:06:01,919 --> 00:06:04,560
share access to and basically said for

172
00:06:04,560 --> 00:06:07,259
this secret you know this this secret is

173
00:06:07,259 --> 00:06:09,539
available to be used by anything in the

174
00:06:09,539 --> 00:06:12,300
following the following namespaces uh

175
00:06:12,300 --> 00:06:14,820
notably you could have star which means

176
00:06:14,820 --> 00:06:17,100
all namespaces so it's up to the it's up

177
00:06:17,100 --> 00:06:19,440
to the owner to it is an option for the

178
00:06:19,440 --> 00:06:21,419
owner to be super insecure but they need

179
00:06:21,419 --> 00:06:24,799
to actively opt into it

180
00:06:24,840 --> 00:06:26,759
um yeah so so this then allowed you to

181
00:06:26,759 --> 00:06:28,979
use it in uh our customer resource HTTP

182
00:06:28,979 --> 00:06:29,960
proxy

183
00:06:29,960 --> 00:06:32,940
we you know cribbed a thing that we you

184
00:06:32,940 --> 00:06:35,400
could do in V1 beta1 Ingress where you

185
00:06:35,400 --> 00:06:38,100
were allowed to put a slash in the name

186
00:06:38,100 --> 00:06:40,080
of the secret and so we said okay that

187
00:06:40,080 --> 00:06:41,280
means it's in a different namespace

188
00:06:41,280 --> 00:06:43,380
pretty hacky way to do this would have

189
00:06:43,380 --> 00:06:44,400
been much better to have a separate

190
00:06:44,400 --> 00:06:47,220
field but yeah this is what we ended up

191
00:06:47,220 --> 00:06:49,560
doing at the time so yeah that's sort of

192
00:06:49,560 --> 00:06:50,819
the main thing here is that it lives

193
00:06:50,819 --> 00:06:52,319
next to the to the secret that's being

194
00:06:52,319 --> 00:06:54,539
delegated and it grants access to it

195
00:06:54,539 --> 00:06:57,120
from out from other namespaces

196
00:06:57,120 --> 00:07:00,300
so in Gateway API we wanted to do this

197
00:07:00,300 --> 00:07:02,580
in a more stable we wanted to do this

198
00:07:02,580 --> 00:07:04,560
exact same thing but in a more stable

199
00:07:04,560 --> 00:07:06,539
structured way

200
00:07:06,539 --> 00:07:08,940
and so this is this is our standard uh

201
00:07:08,940 --> 00:07:10,919
diagram for Gateway API and how the

202
00:07:10,919 --> 00:07:12,660
resources break down

203
00:07:12,660 --> 00:07:14,400
um one of the other things that we're

204
00:07:14,400 --> 00:07:15,780
trying to do in Gateway API is we're

205
00:07:15,780 --> 00:07:16,860
trying to make it so that we break down

206
00:07:16,860 --> 00:07:19,500
the resources by the Persona that needs

207
00:07:19,500 --> 00:07:22,699
to use them so a Gateway class is like

208
00:07:22,699 --> 00:07:25,979
roughly analogous to English class but

209
00:07:25,979 --> 00:07:28,080
it's designed for the people who own the

210
00:07:28,080 --> 00:07:30,300
the infrastructure the people who set up

211
00:07:30,300 --> 00:07:32,639
controllers who have full view a large

212
00:07:32,639 --> 00:07:35,599
amount of access to a cluster and then

213
00:07:35,599 --> 00:07:38,639
individual cluster operators can create

214
00:07:38,639 --> 00:07:40,919
individual gateways which roughly

215
00:07:40,919 --> 00:07:42,720
correspond to a load balancer roughly

216
00:07:42,720 --> 00:07:45,419
roughly not always but a lot of the time

217
00:07:45,419 --> 00:07:46,979
um and then application developers can

218
00:07:46,979 --> 00:07:49,620
create route of different types HTTP

219
00:07:49,620 --> 00:07:51,479
routers about terminated HTTP traffic

220
00:07:51,479 --> 00:07:53,639
there's TLS route TCP route UDP route a

221
00:07:53,639 --> 00:07:54,840
bunch of other stuff

222
00:07:54,840 --> 00:07:56,280
um but the the key part here is that

223
00:07:56,280 --> 00:07:57,360
we're sort of trying to break things

224
00:07:57,360 --> 00:07:58,919
down by a persona

225
00:07:58,919 --> 00:08:01,020
and so when we're talking about these

226
00:08:01,020 --> 00:08:03,360
personas it's pretty common that say the

227
00:08:03,360 --> 00:08:05,819
Gateway and the app and the HTTP route

228
00:08:05,819 --> 00:08:06,780
will be owned by different people

229
00:08:06,780 --> 00:08:08,880
because they're different personas a lot

230
00:08:08,880 --> 00:08:10,259
of sometimes maybe they won't maybe

231
00:08:10,259 --> 00:08:11,819
they'll all be all these personas will

232
00:08:11,819 --> 00:08:13,440
simultaneously exist in the same person

233
00:08:13,440 --> 00:08:15,300
but the whole point of it is that we're

234
00:08:15,300 --> 00:08:17,340
designing it so they don't have to

235
00:08:17,340 --> 00:08:19,919
and so what we ended up doing is we

236
00:08:19,919 --> 00:08:21,660
ended up trying to find ways that we

237
00:08:21,660 --> 00:08:23,220
could solve this sort of problem where

238
00:08:23,220 --> 00:08:25,080
you've got a shared

239
00:08:25,080 --> 00:08:27,060
a shared Gateway in a shared namespace

240
00:08:27,060 --> 00:08:29,819
and then you have HTTP routes living in

241
00:08:29,819 --> 00:08:31,919
the individual app name spaces that

242
00:08:31,919 --> 00:08:34,320
refer to that shared Gateway and so this

243
00:08:34,320 --> 00:08:36,659
is a this is again a classic hey we want

244
00:08:36,659 --> 00:08:37,979
to be able to do across namespace

245
00:08:37,979 --> 00:08:41,159
reference kind of problem and we but we

246
00:08:41,159 --> 00:08:42,958
want you know we want there to be this

247
00:08:42,958 --> 00:08:44,339
agreement between these two parties

248
00:08:44,339 --> 00:08:46,200
between the owner of the Gateway and the

249
00:08:46,200 --> 00:08:49,080
owner of the HTTP Rel

250
00:08:49,080 --> 00:08:51,240
um so the way that we ended up doing

251
00:08:51,240 --> 00:08:52,080
that

252
00:08:52,080 --> 00:08:55,380
is because Gateway is a new thing it's a

253
00:08:55,380 --> 00:08:57,480
new CID and we have control of the

254
00:08:57,480 --> 00:08:58,860
entire spec and we can change anything

255
00:08:58,860 --> 00:09:00,360
we like

256
00:09:00,360 --> 00:09:02,040
um the way that we did it was that we

257
00:09:02,040 --> 00:09:04,920
made it so that HTTP routes basically

258
00:09:04,920 --> 00:09:07,440
request so you can see on the on the

259
00:09:07,440 --> 00:09:09,060
right hand side here

260
00:09:09,060 --> 00:09:10,740
um the HD period has a parent ref

261
00:09:10,740 --> 00:09:12,959
section that specifies the name and the

262
00:09:12,959 --> 00:09:15,420
namespace of a Gateway

263
00:09:15,420 --> 00:09:16,740
um that's actually there's actually a

264
00:09:16,740 --> 00:09:17,820
few other fields in there that we're not

265
00:09:17,820 --> 00:09:19,260
using here you can do other types of

266
00:09:19,260 --> 00:09:21,540
things other than Gateway but you know

267
00:09:21,540 --> 00:09:23,580
the important part for this talk is that

268
00:09:23,580 --> 00:09:25,680
uh you know the shared Gateway is in a

269
00:09:25,680 --> 00:09:29,160
different namespace to the httpr and so

270
00:09:29,160 --> 00:09:31,560
on the shared gateway then you have this

271
00:09:31,560 --> 00:09:33,600
allowed route stands up that lets you

272
00:09:33,600 --> 00:09:37,320
say hey only namespaces that have the

273
00:09:37,320 --> 00:09:39,120
share Gateway access true label are

274
00:09:39,120 --> 00:09:41,399
allowed to are allowed to have HTTP

275
00:09:41,399 --> 00:09:44,760
routes use this use this Gateway and so

276
00:09:44,760 --> 00:09:46,440
that's that's again this is the two-way

277
00:09:46,440 --> 00:09:47,820
handshake right like you've got the HTTP

278
00:09:47,820 --> 00:09:49,860
here out requesting to be able to use a

279
00:09:49,860 --> 00:09:52,019
Gateway and the Gateway has to sort of

280
00:09:52,019 --> 00:09:53,820
except it's almost like the allowed

281
00:09:53,820 --> 00:09:55,560
routes is almost like building a lock

282
00:09:55,560 --> 00:09:58,080
and then the HTTP route you know may

283
00:09:58,080 --> 00:10:01,019
have the right key and so again two-way

284
00:10:01,019 --> 00:10:02,339
handshakes that's the order of the day

285
00:10:02,339 --> 00:10:04,140
here

286
00:10:04,140 --> 00:10:05,580
but yeah and this one was only possible

287
00:10:05,580 --> 00:10:07,980
because we control both sides the spec

288
00:10:07,980 --> 00:10:10,260
of both sides of these objects so when

289
00:10:10,260 --> 00:10:14,100
we start talking about uh yeah hang on I

290
00:10:14,100 --> 00:10:16,140
haven't missed anything there good good

291
00:10:16,140 --> 00:10:16,920
um

292
00:10:16,920 --> 00:10:19,080
so when we start talking about core

293
00:10:19,080 --> 00:10:21,959
objects though we can't change secret or

294
00:10:21,959 --> 00:10:24,120
service or you know any of the other

295
00:10:24,120 --> 00:10:25,860
core kubernetes objects there because

296
00:10:25,860 --> 00:10:29,459
they're they're GA objects and you know

297
00:10:29,459 --> 00:10:31,980
we don't get to make changes to them so

298
00:10:31,980 --> 00:10:33,600
we had we needed to come up with a way

299
00:10:33,600 --> 00:10:35,940
that we could have owners of those

300
00:10:35,940 --> 00:10:39,120
objects be able to do this sort of

301
00:10:39,120 --> 00:10:40,560
um you know this sort of granting and

302
00:10:40,560 --> 00:10:41,459
permissions

303
00:10:41,459 --> 00:10:43,500
uh and so that's that's what reference

304
00:10:43,500 --> 00:10:46,320
Grant is reference Grant is the same

305
00:10:46,320 --> 00:10:48,480
idea that we had with that prior art of

306
00:10:48,480 --> 00:10:50,040
Contours with the TLs certificate

307
00:10:50,040 --> 00:10:52,920
delegation just you know kicked up a

308
00:10:52,920 --> 00:10:53,760
notch

309
00:10:53,760 --> 00:10:54,720
um you know to make it a bit more

310
00:10:54,720 --> 00:10:55,800
generic

311
00:10:55,800 --> 00:10:58,320
so here's a reference Grant um this

312
00:10:58,320 --> 00:11:01,620
reference Grant uh allow sits in the app

313
00:11:01,620 --> 00:11:07,440
namespace with the service it allows uh

314
00:11:07,440 --> 00:11:09,720
references from HTTP routes in the

315
00:11:09,720 --> 00:11:13,620
namespace prod to uh anything that's a

316
00:11:13,620 --> 00:11:16,800
service in the app namespace so you know

317
00:11:16,800 --> 00:11:20,220
pretty like reasonably simple spec here

318
00:11:20,220 --> 00:11:22,680
um yeah it's all just about creating

319
00:11:22,680 --> 00:11:25,800
that lock that sort of says I allow I

320
00:11:25,800 --> 00:11:28,079
explicitly allow this access and we're

321
00:11:28,079 --> 00:11:29,760
very careful here that there's no

322
00:11:29,760 --> 00:11:31,860
implied access here if you create an

323
00:11:31,860 --> 00:11:33,779
empty spec it means nothing you have to

324
00:11:33,779 --> 00:11:35,399
actively opt in for every one of these

325
00:11:35,399 --> 00:11:36,600
fields you have to put them in

326
00:11:36,600 --> 00:11:39,240
specifically there is no sort of default

327
00:11:39,240 --> 00:11:41,279
behavior for a reference green unless

328
00:11:41,279 --> 00:11:44,940
you specifically put things in

329
00:11:44,940 --> 00:11:46,860
and so here's another one that's uh

330
00:11:46,860 --> 00:11:49,500
secret similar idea

331
00:11:49,500 --> 00:11:51,480
um you know this one uh in in the

332
00:11:51,480 --> 00:11:53,700
Gateway API on the gateways are

333
00:11:53,700 --> 00:11:55,200
reference to less config so they're the

334
00:11:55,200 --> 00:11:56,700
only ones that need to be able to

335
00:11:56,700 --> 00:11:59,160
reference uh secrets and so this one

336
00:11:59,160 --> 00:12:01,320
allows references from the Gateway in

337
00:12:01,320 --> 00:12:03,959
the prod namespace to secrets in the

338
00:12:03,959 --> 00:12:06,720
secrets of here namespace so yeah same

339
00:12:06,720 --> 00:12:07,920
idea

340
00:12:07,920 --> 00:12:09,660
um you know it's just allowing those of

341
00:12:09,660 --> 00:12:14,000
allowing those references uh in

342
00:12:14,940 --> 00:12:17,760
so yeah so the the here's the design

343
00:12:17,760 --> 00:12:20,040
goals for a reference Grant you know for

344
00:12:20,040 --> 00:12:21,480
things that we can't we couldn't change

345
00:12:21,480 --> 00:12:23,459
the spec of easily uh service and secret

346
00:12:23,459 --> 00:12:25,620
are the first ones but basically you can

347
00:12:25,620 --> 00:12:27,779
use these for anything that you can't

348
00:12:27,779 --> 00:12:30,779
easily add fields to both sides of

349
00:12:30,779 --> 00:12:32,279
um there I'll mention a bit more later

350
00:12:32,279 --> 00:12:34,980
but um some of the folks from uh Sig

351
00:12:34,980 --> 00:12:38,279
storage have used this for um some new

352
00:12:38,279 --> 00:12:41,220
support in uh PVC controller um to be

353
00:12:41,220 --> 00:12:43,079
able to do cross namespace references to

354
00:12:43,079 --> 00:12:45,959
PVS which I thought was pretty neat

355
00:12:45,959 --> 00:12:47,160
um but yeah and the other key things

356
00:12:47,160 --> 00:12:48,720
here is it's owned by the owner of the

357
00:12:48,720 --> 00:12:50,100
granted object and lives in the same

358
00:12:50,100 --> 00:12:54,260
namespace we yeah sure

359
00:12:54,720 --> 00:12:57,779
the example we gave was a secret does it

360
00:12:57,779 --> 00:12:59,519
make a copy of the secret was it in the

361
00:12:59,519 --> 00:13:01,019
other name space no no I said it's

362
00:13:01,019 --> 00:13:03,240
literally just the they see so the

363
00:13:03,240 --> 00:13:04,860
question was um what do I mean by the

364
00:13:04,860 --> 00:13:06,720
the granted object does it make a copy

365
00:13:06,720 --> 00:13:08,100
of the secret no the original secret

366
00:13:08,100 --> 00:13:10,260
stays where it is and then the

367
00:13:10,260 --> 00:13:12,360
controller that you implement this with

368
00:13:12,360 --> 00:13:14,639
needs to respect this Behavior it's one

369
00:13:14,639 --> 00:13:16,200
of the you know it's one of the problems

370
00:13:16,200 --> 00:13:18,120
that if you want your controller to

371
00:13:18,120 --> 00:13:20,040
support reference Grant you have to like

372
00:13:20,040 --> 00:13:21,480
watch reference grants from everywhere

373
00:13:21,480 --> 00:13:24,240
and you have to you have to implement

374
00:13:24,240 --> 00:13:26,339
this behavior that says you don't allow

375
00:13:26,339 --> 00:13:27,720
cross namespace references unless

376
00:13:27,720 --> 00:13:31,040
there's a reference grant that allows it

377
00:13:33,360 --> 00:13:36,839
yes exactly yeah so

378
00:13:36,839 --> 00:13:38,519
yeah yeah so yes you do well you're

379
00:13:38,519 --> 00:13:40,320
assuming that the controller can just

380
00:13:40,320 --> 00:13:43,339
repeating for the recording yeah

381
00:13:45,779 --> 00:13:48,660
exactly yeah yeah

382
00:13:48,660 --> 00:13:51,300
so so it's not it's not that you're I

383
00:13:51,300 --> 00:13:52,560
mean we actually call this reference

384
00:13:52,560 --> 00:13:53,940
policy originally but that was an even

385
00:13:53,940 --> 00:13:55,079
worse name

386
00:13:55,079 --> 00:13:57,420
um because we have uh in Gateway API we

387
00:13:57,420 --> 00:13:58,380
have another thing called policy

388
00:13:58,380 --> 00:13:59,459
attachment that is completely different

389
00:13:59,459 --> 00:14:01,079
to this so we wanted to not reuse the

390
00:14:01,079 --> 00:14:03,480
same word for two things uh which you

391
00:14:03,480 --> 00:14:05,940
know be naming no no but yeah so I think

392
00:14:05,940 --> 00:14:08,880
the the key Parts here are that the you

393
00:14:08,880 --> 00:14:10,620
know the secret lives where it is the

394
00:14:10,620 --> 00:14:11,760
controller that is implementing this

395
00:14:11,760 --> 00:14:14,820
whole Behavior needs read access to like

396
00:14:14,820 --> 00:14:16,500
you know everything that you want to

397
00:14:16,500 --> 00:14:18,600
Grant access to everywhere

398
00:14:18,600 --> 00:14:20,100
um again this comes from the world of

399
00:14:20,100 --> 00:14:22,019
Ingress where it's quite common for your

400
00:14:22,019 --> 00:14:23,700
Ingress controller to have read access

401
00:14:23,700 --> 00:14:25,980
to Secrets across the entire cluster uh

402
00:14:25,980 --> 00:14:27,300
whether or not that's a good idea that

403
00:14:27,300 --> 00:14:29,459
is historically how it's been if you

404
00:14:29,459 --> 00:14:30,899
want to be able to do a very Dynamic

405
00:14:30,899 --> 00:14:33,839
Ingress controller where you have

406
00:14:33,839 --> 00:14:36,360
um you know you can create an Ingress or

407
00:14:36,360 --> 00:14:38,160
HD proxy or a Gateway or a route

408
00:14:38,160 --> 00:14:41,220
anywhere then and you practically

409
00:14:41,220 --> 00:14:42,480
there's no way around that like you

410
00:14:42,480 --> 00:14:43,680
can't you can't get away from the fact

411
00:14:43,680 --> 00:14:45,779
you have to just grant a bear read

412
00:14:45,779 --> 00:14:48,360
access to all secrets and that's because

413
00:14:48,360 --> 00:14:50,160
all although their secrets have a type

414
00:14:50,160 --> 00:14:53,820
you can't sub you can you can't like sub

415
00:14:53,820 --> 00:14:55,620
allocate the access that are back based

416
00:14:55,620 --> 00:14:58,560
on the type ideally you would have our

417
00:14:58,560 --> 00:15:01,139
back that says only Grant access to TLS

418
00:15:01,139 --> 00:15:02,699
Secrets but we don't have that we've

419
00:15:02,699 --> 00:15:05,940
only got buy by kind not by resource

420
00:15:05,940 --> 00:15:07,560
technically but you know but not by

421
00:15:07,560 --> 00:15:09,180
subtype

422
00:15:09,180 --> 00:15:10,980
um great question thank you

423
00:15:10,980 --> 00:15:14,040
um so yeah so the

424
00:15:14,040 --> 00:15:17,040
because it we really wanted to avoid the

425
00:15:17,040 --> 00:15:19,500
problem of having to have the thing that

426
00:15:19,500 --> 00:15:20,699
we were doing building to do cross

427
00:15:20,699 --> 00:15:22,019
namespace references have cross

428
00:15:22,019 --> 00:15:24,540
namespace references itself so that's

429
00:15:24,540 --> 00:15:26,279
why the reference Grant lives in the

430
00:15:26,279 --> 00:15:27,899
same has to live in alongside the thing

431
00:15:27,899 --> 00:15:29,639
that you're granting access to so that

432
00:15:29,639 --> 00:15:30,660
you don't have that chicken and egg

433
00:15:30,660 --> 00:15:32,279
problem

434
00:15:32,279 --> 00:15:34,860
um the it groups access it grants access

435
00:15:34,860 --> 00:15:37,019
to things by a group uh kind and

436
00:15:37,019 --> 00:15:38,519
namespace

437
00:15:38,519 --> 00:15:41,160
um the idea here being that you know if

438
00:15:41,160 --> 00:15:42,779
right now it's

439
00:15:42,779 --> 00:15:44,579
it default the group in the kind default

440
00:15:44,579 --> 00:15:46,199
to the Gateway API

441
00:15:46,199 --> 00:15:47,880
um group and kind so that you have like

442
00:15:47,880 --> 00:15:49,320
config when you're doing Gateway API

443
00:15:49,320 --> 00:15:50,459
ones

444
00:15:50,459 --> 00:15:52,920
um but the um

445
00:15:52,920 --> 00:15:54,959
but yeah and and then of course it

446
00:15:54,959 --> 00:15:56,820
allows a namespace

447
00:15:56,820 --> 00:15:58,339
um

448
00:15:58,339 --> 00:16:01,440
uh I used label selectors there

449
00:16:01,440 --> 00:16:04,139
for the um the reference Grant does not

450
00:16:04,139 --> 00:16:05,579
currently allow label selectors though

451
00:16:05,579 --> 00:16:08,339
so the um the HD appear out and Gateway

452
00:16:08,339 --> 00:16:09,899
interaction does allow label selectors

453
00:16:09,899 --> 00:16:11,820
but the reference Grant one does not

454
00:16:11,820 --> 00:16:15,060
that's because when you have

455
00:16:15,060 --> 00:16:17,339
um the label selectors plus the

456
00:16:17,339 --> 00:16:18,540
reference Grant plus all the other

457
00:16:18,540 --> 00:16:20,279
things you've got to watch adding in

458
00:16:20,279 --> 00:16:21,779
label selectors for namespaces means you

459
00:16:21,779 --> 00:16:23,940
also have to watch namespaces and then

460
00:16:23,940 --> 00:16:24,839
you have like a whole extra

461
00:16:24,839 --> 00:16:27,300
reconciliation Loop in in case of

462
00:16:27,300 --> 00:16:29,880
namespace label updates and so this is

463
00:16:29,880 --> 00:16:31,079
just about making these a little bit

464
00:16:31,079 --> 00:16:33,000
easier to implement

465
00:16:33,000 --> 00:16:34,740
um yeah when I come to the cap there's a

466
00:16:34,740 --> 00:16:35,699
couple of changes that people have

467
00:16:35,699 --> 00:16:39,540
requested and one that is one of them so

468
00:16:39,540 --> 00:16:41,339
um yeah here's some other notes uh I

469
00:16:41,339 --> 00:16:43,259
think I talked about this uh the

470
00:16:43,259 --> 00:16:44,339
reference Grant has to be fully

471
00:16:44,339 --> 00:16:46,800
reconciled so you can't just say hey I

472
00:16:46,800 --> 00:16:48,300
saw a reference granted startup now

473
00:16:48,300 --> 00:16:50,220
things are good you have to watch the

474
00:16:50,220 --> 00:16:51,480
reference grants and if the reference

475
00:16:51,480 --> 00:16:53,220
Grant is removed that constitutes

476
00:16:53,220 --> 00:16:56,220
revocation of that of the of the granted

477
00:16:56,220 --> 00:16:58,680
access and so if someone removes a

478
00:16:58,680 --> 00:17:00,060
reference grant that allows access to a

479
00:17:00,060 --> 00:17:02,160
TLS secret for a Gateway you have

480
00:17:02,160 --> 00:17:04,079
removed effectively removed the TLs

481
00:17:04,079 --> 00:17:06,000
secret and that Gateway is now invalid

482
00:17:06,000 --> 00:17:07,619
because there's no TLS Secret

483
00:17:07,619 --> 00:17:09,839
and so the exact Behavior here can

484
00:17:09,839 --> 00:17:11,699
depend on the on the exact type of

485
00:17:11,699 --> 00:17:13,020
reference and what you're doing with it

486
00:17:13,020 --> 00:17:14,579
and a bunch of other stuff like that but

487
00:17:14,579 --> 00:17:16,439
the key part here is that if you revoke

488
00:17:16,439 --> 00:17:18,959
the reference Grant by deleting it or by

489
00:17:18,959 --> 00:17:20,819
changing it such that the thing that you

490
00:17:20,819 --> 00:17:22,740
were referencing doesn't it is no longer

491
00:17:22,740 --> 00:17:24,599
in scope then you have to revoke the

492
00:17:24,599 --> 00:17:26,280
access

493
00:17:26,280 --> 00:17:27,359
um

494
00:17:27,359 --> 00:17:28,980
and again yeah controllers are expected

495
00:17:28,980 --> 00:17:30,780
to be out to be granted very broad read

496
00:17:30,780 --> 00:17:33,660
access and then self-limit based on the

497
00:17:33,660 --> 00:17:35,160
reference Grant

498
00:17:35,160 --> 00:17:37,200
um so yeah I mean that doesn't help in

499
00:17:37,200 --> 00:17:38,280
the case that you're worried about a

500
00:17:38,280 --> 00:17:40,260
controller compromise you know like if

501
00:17:40,260 --> 00:17:41,220
you're worried about your Ingress

502
00:17:41,220 --> 00:17:42,299
controller being compromised and then

503
00:17:42,299 --> 00:17:44,220
get having a read access or this does

504
00:17:44,220 --> 00:17:46,799
not help you um you know I think that is

505
00:17:46,799 --> 00:17:48,660
definitely a problem that we all should

506
00:17:48,660 --> 00:17:50,280
think about solving but this is not

507
00:17:50,280 --> 00:17:52,860
designed to solve that problem

508
00:17:52,860 --> 00:17:53,880
um

509
00:17:53,880 --> 00:17:56,880
in notably right now there is no way to

510
00:17:56,880 --> 00:17:59,520
Grant access to all namespaces

511
00:17:59,520 --> 00:18:01,740
um you know we talked about maybe using

512
00:18:01,740 --> 00:18:04,320
a special star name to say it to mean

513
00:18:04,320 --> 00:18:07,620
all namespaces again I'm kind of in

514
00:18:07,620 --> 00:18:10,980
favor of that because my my experience

515
00:18:10,980 --> 00:18:12,240
with this has been a lot of the time

516
00:18:12,240 --> 00:18:14,760
people are like I know what I'm doing I

517
00:18:14,760 --> 00:18:16,740
want to be insecure and I'm like that's

518
00:18:16,740 --> 00:18:18,660
fine as long as you're very clearly

519
00:18:18,660 --> 00:18:20,100
opting into something that's a terrible

520
00:18:20,100 --> 00:18:21,059
idea

521
00:18:21,059 --> 00:18:24,360
um you know in general and so having to

522
00:18:24,360 --> 00:18:25,500
take definite action to do something

523
00:18:25,500 --> 00:18:27,960
like really insecure is sort of my

524
00:18:27,960 --> 00:18:31,100
design goals for an API

525
00:18:31,260 --> 00:18:34,679
um sure so next steps uh in terms of

526
00:18:34,679 --> 00:18:35,760
next steps

527
00:18:35,760 --> 00:18:37,080
um yeah as I said it's already used in

528
00:18:37,080 --> 00:18:39,120
sync storage for cross namespace data

529
00:18:39,120 --> 00:18:40,860
data sources for presenting volume

530
00:18:40,860 --> 00:18:44,580
claims so you can right now uh it's in

531
00:18:44,580 --> 00:18:46,260
Alpha uh in the latest release of

532
00:18:46,260 --> 00:18:48,120
kubernetes but in a persistent volume

533
00:18:48,120 --> 00:18:51,419
claim you can reference a snapshot of a

534
00:18:51,419 --> 00:18:52,559
persistent volume that's in another

535
00:18:52,559 --> 00:18:54,799
namespace using a reference Grant object

536
00:18:54,799 --> 00:18:56,700
and so

537
00:18:56,700 --> 00:18:58,799
you know when the the focus on storage

538
00:18:58,799 --> 00:19:00,840
were doing that work they were sort of

539
00:19:00,840 --> 00:19:02,460
like I kind of sucks that we've got to

540
00:19:02,460 --> 00:19:04,260
import all the Gateway API objects just

541
00:19:04,260 --> 00:19:06,299
to be able to get reference Grant and we

542
00:19:06,299 --> 00:19:07,740
were like we agree that does kind of

543
00:19:07,740 --> 00:19:11,700
suck so um we were hoping to we opened a

544
00:19:11,700 --> 00:19:15,059
cap to uh move reference Grant to a new

545
00:19:15,059 --> 00:19:17,280
API Group Home

546
00:19:17,280 --> 00:19:20,220
um and so yeah uh the two those two QR

547
00:19:20,220 --> 00:19:22,980
codes are the the blog post and the and

548
00:19:22,980 --> 00:19:24,360
the cap itself

549
00:19:24,360 --> 00:19:27,000
um that cap uh as of like two days ago

550
00:19:27,000 --> 00:19:28,740
has actually been merged uh as

551
00:19:28,740 --> 00:19:29,760
provisional

552
00:19:29,760 --> 00:19:31,919
however

553
00:19:31,919 --> 00:19:35,880
um one of the things that happened is uh

554
00:19:35,880 --> 00:19:37,799
the all the reviewers which I was really

555
00:19:37,799 --> 00:19:39,600
surprised about were like oh no we don't

556
00:19:39,600 --> 00:19:41,580
want this to be a CID uh the SQL reviews

557
00:19:41,580 --> 00:19:42,960
are like no this should not be a CID

558
00:19:42,960 --> 00:19:44,880
this should be an entry core resource

559
00:19:44,880 --> 00:19:47,820
and I was like uh okay that's surprising

560
00:19:47,820 --> 00:19:49,080
um I thought everyone would be more in

561
00:19:49,080 --> 00:19:51,539
favor of this being a crd but in order

562
00:19:51,539 --> 00:19:53,039
for it to be a core resource it needs to

563
00:19:53,039 --> 00:19:54,480
be much more generic than it currently

564
00:19:54,480 --> 00:19:55,500
is it currently makes a lot of

565
00:19:55,500 --> 00:19:57,120
assumptions about the fact that you're

566
00:19:57,120 --> 00:19:58,380
running probably running something like

567
00:19:58,380 --> 00:20:00,660
an Ingress controller and about what

568
00:20:00,660 --> 00:20:02,340
sorts of things you're talking about and

569
00:20:02,340 --> 00:20:04,260
what sorts of access you're granting

570
00:20:04,260 --> 00:20:05,940
most importantly you're like you're

571
00:20:05,940 --> 00:20:07,860
almost always granting read access or

572
00:20:07,860 --> 00:20:10,500
read-only access to something but you

573
00:20:10,500 --> 00:20:12,120
know the stick author viewers raise the

574
00:20:12,120 --> 00:20:14,280
very reasonable question of what about

575
00:20:14,280 --> 00:20:15,660
if you want to do a cross namespace

576
00:20:15,660 --> 00:20:17,280
reference where you're kind of

577
00:20:17,280 --> 00:20:18,840
implicitly granting some sort of right

578
00:20:18,840 --> 00:20:21,780
access you know like and and you want to

579
00:20:21,780 --> 00:20:23,280
restrict that separately to the read

580
00:20:23,280 --> 00:20:25,380
access so you know we're looking it

581
00:20:25,380 --> 00:20:26,580
looks like probably we're going to need

582
00:20:26,580 --> 00:20:28,860
to add like some other stuff like verbs

583
00:20:28,860 --> 00:20:31,080
to sort of further slice the access that

584
00:20:31,080 --> 00:20:33,780
you granting down and some other stuff

585
00:20:33,780 --> 00:20:37,140
like that so really interesting work the

586
00:20:37,140 --> 00:20:38,940
original the initial cap has merged as

587
00:20:38,940 --> 00:20:41,100
provisional and so we're iterating on

588
00:20:41,100 --> 00:20:43,020
that cap right now and looking at doing

589
00:20:43,020 --> 00:20:44,400
some of the stuff like I just mentioned

590
00:20:44,400 --> 00:20:46,559
the um

591
00:20:46,559 --> 00:20:48,480
and yeah yeah I think

592
00:20:48,480 --> 00:20:50,039
that part in particular will be really

593
00:20:50,039 --> 00:20:51,660
interesting I mean I'd be really happy

594
00:20:51,660 --> 00:20:53,940
if this ended up as a core resource in a

595
00:20:53,940 --> 00:20:55,559
future version of kubernetes it'll be

596
00:20:55,559 --> 00:20:57,059
really great I think that it will be

597
00:20:57,059 --> 00:21:00,120
really handy for people notably nobody

598
00:21:00,120 --> 00:21:01,380
is suggesting that although this

599
00:21:01,380 --> 00:21:03,240
resource might be in core it will not be

600
00:21:03,240 --> 00:21:05,100
reconciled in core it'll be like Ingress

601
00:21:05,100 --> 00:21:08,100
where the the type itself existed in the

602
00:21:08,100 --> 00:21:10,919
core spec but in order to have get any

603
00:21:10,919 --> 00:21:12,480
Behavior out of it you need to install a

604
00:21:12,480 --> 00:21:13,799
controller that will reconcile it for

605
00:21:13,799 --> 00:21:15,960
you right so

606
00:21:15,960 --> 00:21:18,240
um I think everyone is agreement that

607
00:21:18,240 --> 00:21:19,260
it's going to work very much like

608
00:21:19,260 --> 00:21:20,940
Ingress in that respect so you'll need

609
00:21:20,940 --> 00:21:22,559
to install like a reference compatible

610
00:21:22,559 --> 00:21:23,700
controller

611
00:21:23,700 --> 00:21:24,900
and one of the other things that's

612
00:21:24,900 --> 00:21:26,160
really interesting about the design here

613
00:21:26,160 --> 00:21:27,120
is

614
00:21:27,120 --> 00:21:28,679
there probably will end up being

615
00:21:28,679 --> 00:21:30,780
multiple reference Grant controllers in

616
00:21:30,780 --> 00:21:32,400
the class in the cluster you know some

617
00:21:32,400 --> 00:21:34,200
of them might be a Gateway API one some

618
00:21:34,200 --> 00:21:36,539
of them might be a storage one there

619
00:21:36,539 --> 00:21:38,100
might be some other ones and they're all

620
00:21:38,100 --> 00:21:39,419
going to need to

621
00:21:39,419 --> 00:21:41,940
have some way to interact and also then

622
00:21:41,940 --> 00:21:43,860
somewhere some standard way of feeding

623
00:21:43,860 --> 00:21:45,720
back whether or not your reference Grant

624
00:21:45,720 --> 00:21:47,820
is in use that is probably one of our

625
00:21:47,820 --> 00:21:50,580
biggest areas of upcoming work is how do

626
00:21:50,580 --> 00:21:53,280
we make it clear to you the user that

627
00:21:53,280 --> 00:21:54,780
the reference grant that you have

628
00:21:54,780 --> 00:21:56,580
created is actually correctly configured

629
00:21:56,580 --> 00:21:59,400
and is being used correctly you know or

630
00:21:59,400 --> 00:22:00,900
more importantly if you want to go and

631
00:22:00,900 --> 00:22:02,820
delete this reference Grant how do you

632
00:22:02,820 --> 00:22:04,860
know if 100 people are using it or if

633
00:22:04,860 --> 00:22:06,720
nobody's using it right like that seems

634
00:22:06,720 --> 00:22:08,700
really important to me too that uh yeah

635
00:22:08,700 --> 00:22:09,960
you wouldn't want to delete the wrong

636
00:22:09,960 --> 00:22:11,460
reference Grant and have every like 100

637
00:22:11,460 --> 00:22:13,919
people be like oh my God you know my TLS

638
00:22:13,919 --> 00:22:15,240
site just went down because you deleted

639
00:22:15,240 --> 00:22:17,220
the you effectively deleted the key pair

640
00:22:17,220 --> 00:22:19,500
the TLs keeper that would suck so

641
00:22:19,500 --> 00:22:21,240
they're having some feedback available

642
00:22:21,240 --> 00:22:24,000
to people that uh that's that stuff

643
00:22:24,000 --> 00:22:26,700
um be sorted out would be good

644
00:22:26,700 --> 00:22:27,299
um

645
00:22:27,299 --> 00:22:30,360
so I have talked much faster than I

646
00:22:30,360 --> 00:22:31,559
anticipated

647
00:22:31,559 --> 00:22:32,820
um so you guys are all going to get

648
00:22:32,820 --> 00:22:34,620
heaps of time for questions

649
00:22:34,620 --> 00:22:36,960
um but here's my takeaways so across the

650
00:22:36,960 --> 00:22:38,220
namespace reference that's so hard

651
00:22:38,220 --> 00:22:40,620
really hard it's really really important

652
00:22:40,620 --> 00:22:41,820
to do them correctly but it's really

653
00:22:41,820 --> 00:22:43,740
really easy to get them wrong and so one

654
00:22:43,740 --> 00:22:44,760
of the things I wanted to do with this

655
00:22:44,760 --> 00:22:46,919
talk was to sort of

656
00:22:46,919 --> 00:22:48,780
have a way that you know to sort of tell

657
00:22:48,780 --> 00:22:51,179
people like hey that the key thing here

658
00:22:51,179 --> 00:22:52,860
is just that agreement between the two

659
00:22:52,860 --> 00:22:56,520
parties you know making sure that you

660
00:22:56,520 --> 00:22:57,659
have the agreement between the two

661
00:22:57,659 --> 00:23:00,600
parties is the right thing to do here

662
00:23:00,600 --> 00:23:03,600
sorry

663
00:23:03,780 --> 00:23:05,100
um and then so multiple patterns are

664
00:23:05,100 --> 00:23:06,539
definitely possible to do this to do

665
00:23:06,539 --> 00:23:09,120
this sort of uh Crossing trust domain uh

666
00:23:09,120 --> 00:23:11,159
relationship yeah we've already got two

667
00:23:11,159 --> 00:23:13,320
uh you know about two examples today the

668
00:23:13,320 --> 00:23:16,260
Gateway uh HTTP route mapping and then

669
00:23:16,260 --> 00:23:18,600
reference Grant itself

670
00:23:18,600 --> 00:23:21,720
um so yeah as I said

671
00:23:21,720 --> 00:23:23,460
that was a lot faster than it was when I

672
00:23:23,460 --> 00:23:24,840
practiced I think I'm talking much

673
00:23:24,840 --> 00:23:27,360
faster today so um we have a lot of time

674
00:23:27,360 --> 00:23:29,100
for questions uh really sorry about that

675
00:23:29,100 --> 00:23:32,418
but please feel free to hit me up

676
00:23:37,200 --> 00:23:39,720
maybe I have a PPI key for something

677
00:23:39,720 --> 00:23:41,340
that I'm falling outside

678
00:23:41,340 --> 00:23:44,299
I have a bunch of services

679
00:23:49,740 --> 00:23:52,740
forward

680
00:23:55,919 --> 00:23:58,140
well so I would argue that the thing

681
00:23:58,140 --> 00:23:59,880
that you are using is going to have to

682
00:23:59,880 --> 00:24:01,799
read kubernetes resources in order to be

683
00:24:01,799 --> 00:24:03,299
able to reconcile the reference Grant

684
00:24:03,299 --> 00:24:05,220
objects that makes it a controller right

685
00:24:05,220 --> 00:24:06,659
like you're building a controller that

686
00:24:06,659 --> 00:24:09,059
is gonna that is gonna maintain like

687
00:24:09,059 --> 00:24:10,860
some sort of custom reference to this

688
00:24:10,860 --> 00:24:12,780
API key secret

689
00:24:12,780 --> 00:24:15,120
um you know like so you the thing that

690
00:24:15,120 --> 00:24:16,620
you will have to build to do that is

691
00:24:16,620 --> 00:24:17,880
going to have to be a controller like

692
00:24:17,880 --> 00:24:19,020
you're going to have to have some

693
00:24:19,020 --> 00:24:21,179
something that watches

694
00:24:21,179 --> 00:24:23,940
um for reference grants knows about API

695
00:24:23,940 --> 00:24:25,520
key secrets

696
00:24:25,520 --> 00:24:28,440
knows like which ones are relevant ones

697
00:24:28,440 --> 00:24:30,179
and you know and how you would grant

698
00:24:30,179 --> 00:24:34,440
them and then um allows the allows the

699
00:24:34,440 --> 00:24:35,580
thing that you want to be able to use

700
00:24:35,580 --> 00:24:37,320
that secret to use it

701
00:24:37,320 --> 00:24:39,059
um you most of what we've done here is

702
00:24:39,059 --> 00:24:39,900
about

703
00:24:39,900 --> 00:24:42,179
if you have a

704
00:24:42,179 --> 00:24:44,220
um if you have a kubernetes object that

705
00:24:44,220 --> 00:24:45,419
needs to reference another kubernetes

706
00:24:45,419 --> 00:24:47,940
object not like a service that needs to

707
00:24:47,940 --> 00:24:49,919
reference a kubernetes object in a case

708
00:24:49,919 --> 00:24:52,020
that you're talking about where um you

709
00:24:52,020 --> 00:24:53,880
know where probably you'd want you know

710
00:24:53,880 --> 00:24:54,960
if it's an API key or something like

711
00:24:54,960 --> 00:24:56,039
that usually you'd want to mount that

712
00:24:56,039 --> 00:24:58,440
into into the Pod as like a as a volume

713
00:24:58,440 --> 00:24:59,820
is usually the way that you would

714
00:24:59,820 --> 00:25:02,640
consume an API key like that

715
00:25:02,640 --> 00:25:06,299
um and so you you might want to be if

716
00:25:06,299 --> 00:25:07,320
you want to be able to have something

717
00:25:07,320 --> 00:25:09,240
like that you know you can absolutely

718
00:25:09,240 --> 00:25:11,100
can do it using a reference Grant but

719
00:25:11,100 --> 00:25:12,419
you would need then a custom controller

720
00:25:12,419 --> 00:25:14,880
to sort of manage the how do you get the

721
00:25:14,880 --> 00:25:16,740
secret to the right place probably if

722
00:25:16,740 --> 00:25:18,120
you're spending that effort you'd almost

723
00:25:18,120 --> 00:25:21,720
be better off building a like a CSI

724
00:25:21,720 --> 00:25:24,720
plugin to handle the secret to handle

725
00:25:24,720 --> 00:25:26,279
the secret so you can build a secret

726
00:25:26,279 --> 00:25:29,940
store plug-in that will when that will

727
00:25:29,940 --> 00:25:31,620
provide you a virtual file on disk that

728
00:25:31,620 --> 00:25:33,360
when you access it we'll reach out via

729
00:25:33,360 --> 00:25:35,580
some web call to somewhere and and give

730
00:25:35,580 --> 00:25:37,440
you give the contents back in a standard

731
00:25:37,440 --> 00:25:38,880
way

732
00:25:38,880 --> 00:25:40,080
um so there's a few ones that we'll talk

733
00:25:40,080 --> 00:25:42,779
to Vault or you know uh the various Key

734
00:25:42,779 --> 00:25:44,220
Management stores of clouds and stuff

735
00:25:44,220 --> 00:25:45,960
like that so you can effectively mount a

736
00:25:45,960 --> 00:25:47,340
secret straight from some other key

737
00:25:47,340 --> 00:25:50,159
store into your pod and and then every

738
00:25:50,159 --> 00:25:51,779
time the Pod accesses it it gets the

739
00:25:51,779 --> 00:25:53,640
current value

740
00:25:53,640 --> 00:25:55,559
um so yeah I think I see what you're

741
00:25:55,559 --> 00:25:56,279
saying

742
00:25:56,279 --> 00:25:58,020
um but yeah if you did build something

743
00:25:58,020 --> 00:25:59,340
that wanted to do that sort of cross

744
00:25:59,340 --> 00:26:00,779
Nature's reference you're building a

745
00:26:00,779 --> 00:26:02,580
controller like you know it's going to

746
00:26:02,580 --> 00:26:04,140
have to reconcile the reference credits

747
00:26:04,140 --> 00:26:06,120
because again if you delete the

748
00:26:06,120 --> 00:26:07,799
reference Grant the access needs to go

749
00:26:07,799 --> 00:26:10,140
away you need to revoke it

750
00:26:10,140 --> 00:26:12,299
is that

751
00:26:12,299 --> 00:26:13,340
yeah yeah

752
00:26:13,340 --> 00:26:15,659
feel free to argue with me like I'm not

753
00:26:15,659 --> 00:26:17,100
not saying that I'm the only one who's

754
00:26:17,100 --> 00:26:19,220
right here like

755
00:26:19,220 --> 00:26:24,659
yo uh yeah yep

756
00:26:33,659 --> 00:26:35,880
yes yes exactly yeah and so that's to

757
00:26:35,880 --> 00:26:36,900
prevent exactly the sort of thing

758
00:26:36,900 --> 00:26:38,760
because if the reference Grant can live

759
00:26:38,760 --> 00:26:40,080
in a different name space to the thing

760
00:26:40,080 --> 00:26:42,419
it's granting access to then you're

761
00:26:42,419 --> 00:26:43,620
going to need a reference grant for the

762
00:26:43,620 --> 00:26:46,020
reference Grant right like that doesn't

763
00:26:46,020 --> 00:26:47,880
seem like a good idea for anybody like

764
00:26:47,880 --> 00:26:49,799
so that's what it was much simpler to

765
00:26:49,799 --> 00:26:51,779
make it that it also it helps with the

766
00:26:51,779 --> 00:26:55,200
the notion of ownership that um if the

767
00:26:55,200 --> 00:26:56,279
uh

768
00:26:56,279 --> 00:26:58,919
you that the person who owns the object

769
00:26:58,919 --> 00:27:01,380
should own the reference Grant you know

770
00:27:01,380 --> 00:27:02,700
it should be the same person it's

771
00:27:02,700 --> 00:27:04,020
actually one of the things that the uh

772
00:27:04,020 --> 00:27:06,799
came up in the kept review was that um

773
00:27:06,799 --> 00:27:09,240
let's see Authority reviewers would like

774
00:27:09,240 --> 00:27:11,880
us to mandate some sort of our back

775
00:27:11,880 --> 00:27:13,679
check that if you're creating a

776
00:27:13,679 --> 00:27:15,120
reference grant that allows access to a

777
00:27:15,120 --> 00:27:17,520
secret that you as the user have access

778
00:27:17,520 --> 00:27:19,440
to that secret

779
00:27:19,440 --> 00:27:21,179
um so that one is actually a pretty

780
00:27:21,179 --> 00:27:22,980
interesting problem of actually

781
00:27:22,980 --> 00:27:24,779
implementing that check

782
00:27:24,779 --> 00:27:27,419
um and so like yeah we'll need to do the

783
00:27:27,419 --> 00:27:28,740
controller that implements it would need

784
00:27:28,740 --> 00:27:30,480
to do like subject access review for the

785
00:27:30,480 --> 00:27:32,340
person creating the thing as like a

786
00:27:32,340 --> 00:27:34,140
validating webhook or something

787
00:27:34,140 --> 00:27:35,880
um so yeah that's a pretty interesting

788
00:27:35,880 --> 00:27:37,380
design that I'm looking forward to

789
00:27:37,380 --> 00:27:40,620
talking to other people more about

790
00:27:40,620 --> 00:27:44,658
yeah so again cool awesome thanks

791
00:27:55,980 --> 00:27:58,799
yeah so I think that so the question was

792
00:27:58,799 --> 00:28:00,539
um with the uh bringing a reference

793
00:28:00,539 --> 00:28:02,159
going into core um what's going to

794
00:28:02,159 --> 00:28:03,419
happen with the allowed routes and stuff

795
00:28:03,419 --> 00:28:04,919
I think we'll probably will keep that

796
00:28:04,919 --> 00:28:08,520
the same because um uh it allows sort of

797
00:28:08,520 --> 00:28:09,779
a really clear thing for people who

798
00:28:09,779 --> 00:28:11,400
don't necessarily need to go off and

799
00:28:11,400 --> 00:28:12,720
learn about reference Grant like it's a

800
00:28:12,720 --> 00:28:15,480
very clear relationship

801
00:28:15,480 --> 00:28:18,120
sorry too much talking um

802
00:28:18,120 --> 00:28:20,460
about it yeah yeah yeah yeah yeah yeah

803
00:28:20,460 --> 00:28:22,440
totally yeah I mean I practically

804
00:28:22,440 --> 00:28:24,600
practically I think that we'll um that

805
00:28:24,600 --> 00:28:27,419
we will end up uh sort of owning the the

806
00:28:27,419 --> 00:28:29,039
definition anyway even once it moves

807
00:28:29,039 --> 00:28:29,940
into court

808
00:28:29,940 --> 00:28:32,520
um yeah so um yeah like I said I think

809
00:28:32,520 --> 00:28:34,320
that the uh

810
00:28:34,320 --> 00:28:36,539
that um

811
00:28:36,539 --> 00:28:38,640
the the level of work that we've got to

812
00:28:38,640 --> 00:28:41,820
do uh is like yeah super interesting so

813
00:28:41,820 --> 00:28:43,679
yeah does anyone else have other

814
00:28:43,679 --> 00:28:47,159
questions if not like maybe I'll uh pull

815
00:28:47,159 --> 00:28:48,360
up that cap and walk you through a

816
00:28:48,360 --> 00:28:49,080
couple of things because you've still

817
00:28:49,080 --> 00:28:50,460
got ages um

818
00:28:50,460 --> 00:28:51,659
yeah

819
00:28:51,659 --> 00:28:54,919
okay let me pull up that kit

820
00:28:57,779 --> 00:29:00,919
uh let me find a link

821
00:29:10,380 --> 00:29:13,700
it's Wi-Fi hoping it is good

822
00:29:15,059 --> 00:29:17,840
is that

823
00:29:17,940 --> 00:29:20,899
the night at the pr

824
00:29:29,460 --> 00:29:31,880
oud

825
00:29:39,360 --> 00:29:41,640
Okay so

826
00:29:41,640 --> 00:29:44,640
here's the cap you know most of what is

827
00:29:44,640 --> 00:29:46,860
in there thank you very much

828
00:29:46,860 --> 00:29:49,580
you're a legend

829
00:29:51,659 --> 00:29:53,520
most of what is in there is what I sort

830
00:29:53,520 --> 00:29:54,720
of went over already

831
00:29:54,720 --> 00:29:56,580
um you know one of the things uh the

832
00:29:56,580 --> 00:29:58,320
phrases that uh that we did come up with

833
00:29:58,320 --> 00:30:01,919
that I do like so you know as usual for

834
00:30:01,919 --> 00:30:03,360
a cap you sort of go through like Risk

835
00:30:03,360 --> 00:30:04,799
and mitigations and stuff like no

836
00:30:04,799 --> 00:30:06,360
default implementation as I mentioned

837
00:30:06,360 --> 00:30:07,799
that's one of the things you know there

838
00:30:07,799 --> 00:30:09,360
you'll need to provide your own

839
00:30:09,360 --> 00:30:11,159
implementation

840
00:30:11,159 --> 00:30:12,500
um

841
00:30:12,500 --> 00:30:15,059
you know I mean it is a pretty big risk

842
00:30:15,059 --> 00:30:16,440
that allowing any cross namespace

843
00:30:16,440 --> 00:30:18,840
references sort of does weaken the idea

844
00:30:18,840 --> 00:30:20,220
that the namespace is your fundamental

845
00:30:20,220 --> 00:30:23,220
unit I I would argue that you know this

846
00:30:23,220 --> 00:30:25,380
is weakening a very controlled careful

847
00:30:25,380 --> 00:30:26,880
way and that's what that's the best that

848
00:30:26,880 --> 00:30:28,500
we can hope for

849
00:30:28,500 --> 00:30:30,899
um but yeah like the thing so the

850
00:30:30,899 --> 00:30:32,279
reference going object is half of a

851
00:30:32,279 --> 00:30:33,659
handshake that's one of the most

852
00:30:33,659 --> 00:30:34,919
important things that you know I would

853
00:30:34,919 --> 00:30:36,600
like you to take away from this is you

854
00:30:36,600 --> 00:30:37,740
know you've got to have the handshake

855
00:30:37,740 --> 00:30:38,940
and the thing that we're talking about

856
00:30:38,940 --> 00:30:40,740
here it's only half you know the other

857
00:30:40,740 --> 00:30:42,360
half is that something has to make a

858
00:30:42,360 --> 00:30:43,740
reference and there needs to be a way

859
00:30:43,740 --> 00:30:46,860
for that thing to make the reference so

860
00:30:46,860 --> 00:30:48,299
um

861
00:30:48,299 --> 00:30:51,059
yeah and so the

862
00:30:51,059 --> 00:30:53,279
um and so you can see here that we've

863
00:30:53,279 --> 00:30:54,240
sort of

864
00:30:54,240 --> 00:30:56,159
ended up needing to bring in the thing

865
00:30:56,159 --> 00:30:58,080
that you know you need to have uh read

866
00:30:58,080 --> 00:30:59,520
access at least to the things that

867
00:30:59,520 --> 00:31:01,080
you're gaining access to

868
00:31:01,080 --> 00:31:02,700
um so yeah part of implementing control

869
00:31:02,700 --> 00:31:04,140
for this we'll be doing a subject

870
00:31:04,140 --> 00:31:06,419
accessory review of the person who's

871
00:31:06,419 --> 00:31:08,220
created that object

872
00:31:08,220 --> 00:31:11,279
um and making sure that that person has

873
00:31:11,279 --> 00:31:12,360
access to the thing they're graining

874
00:31:12,360 --> 00:31:14,159
access to

875
00:31:14,159 --> 00:31:16,500
um yeah this this last this one is one

876
00:31:16,500 --> 00:31:17,820
that I was a bit

877
00:31:17,820 --> 00:31:19,980
sad about um in the Gateway API

878
00:31:19,980 --> 00:31:22,140
reference Grant we chose to use kind

879
00:31:22,140 --> 00:31:24,419
rather than resource

880
00:31:24,419 --> 00:31:25,860
um so who here knows about the

881
00:31:25,860 --> 00:31:28,500
distinction between kind and resource

882
00:31:28,500 --> 00:31:30,720
okay one person yeah

883
00:31:30,720 --> 00:31:32,100
um most of the time you this doesn't

884
00:31:32,100 --> 00:31:32,940
matter

885
00:31:32,940 --> 00:31:37,080
um but a kind is a singular object

886
00:31:37,080 --> 00:31:39,600
um a singular name uh capitalized it's

887
00:31:39,600 --> 00:31:41,520
what you see at the top of your most

888
00:31:41,520 --> 00:31:44,760
yaml files but um it does not uniquely

889
00:31:44,760 --> 00:31:48,480
identify an object like an object type a

890
00:31:48,480 --> 00:31:50,399
resource is actually the portion of the

891
00:31:50,399 --> 00:31:53,760
uh like the rescue URL that does

892
00:31:53,760 --> 00:31:57,240
uniquely identify a resource type so

893
00:31:57,240 --> 00:31:59,279
because this API is going to end up

894
00:31:59,279 --> 00:32:01,440
being very generic we can't get away

895
00:32:01,440 --> 00:32:04,440
with using the sort of may not be Unique

896
00:32:04,440 --> 00:32:07,260
Kind even though using it would be much

897
00:32:07,260 --> 00:32:09,179
easier for people to understand

898
00:32:09,179 --> 00:32:11,279
um and so practically what it means is

899
00:32:11,279 --> 00:32:12,600
that instead of doing something like

900
00:32:12,600 --> 00:32:13,380
this

901
00:32:13,380 --> 00:32:14,880
where you're going to be like kind

902
00:32:14,880 --> 00:32:15,960
Gateway

903
00:32:15,960 --> 00:32:18,720
you will need to be resource gateways

904
00:32:18,720 --> 00:32:20,640
and so the resource is actually the one

905
00:32:20,640 --> 00:32:22,679
that you see in Q cattle and stuff like

906
00:32:22,679 --> 00:32:24,720
that if you you know if You tab complete

907
00:32:24,720 --> 00:32:26,880
and you get like gateways in this case

908
00:32:26,880 --> 00:32:29,120
of this it'll be

909
00:32:29,120 --> 00:32:30,120
gateways.gateway.networking.kubernetes.io

910
00:32:30,120 --> 00:32:31,860
is the name of the resource fully

911
00:32:31,860 --> 00:32:34,020
qualified name and so that's why we have

912
00:32:34,020 --> 00:32:35,640
to use the name that you can use for the

913
00:32:35,640 --> 00:32:37,679
fully qualified name

914
00:32:37,679 --> 00:32:38,760
um

915
00:32:38,760 --> 00:32:40,380
unfortunately

916
00:32:40,380 --> 00:32:42,840
um you know as as Tim Hawkins said like

917
00:32:42,840 --> 00:32:44,460
it kind of sucks that we have to do this

918
00:32:44,460 --> 00:32:46,500
but here we are like we can't change it

919
00:32:46,500 --> 00:32:48,059
now

920
00:32:48,059 --> 00:32:49,320
um yeah we've got the revocation

921
00:32:49,320 --> 00:32:51,840
behavior that I mentioned the um you

922
00:32:51,840 --> 00:32:53,820
know yeah deletion deletion of a

923
00:32:53,820 --> 00:32:54,840
reference Grant means that the greatest

924
00:32:54,840 --> 00:32:57,659
actors granted access is revoked

925
00:32:57,659 --> 00:33:00,059
um so the

926
00:33:00,059 --> 00:33:02,760
um one other thing here is it's like you

927
00:33:02,760 --> 00:33:05,220
need to remove any config generated but

928
00:33:05,220 --> 00:33:06,840
it's kind of up to you exactly what that

929
00:33:06,840 --> 00:33:08,820
means right so for the storage for the

930
00:33:08,820 --> 00:33:09,840
storage use case that we talked about

931
00:33:09,840 --> 00:33:11,100
before

932
00:33:11,100 --> 00:33:12,600
um they're actually saying

933
00:33:12,600 --> 00:33:14,340
if the reference going exists when you

934
00:33:14,340 --> 00:33:16,140
make the reference and the the the

935
00:33:16,140 --> 00:33:18,779
persistent volume is provisioned that's

936
00:33:18,779 --> 00:33:20,220
okay that's enough if the reference

937
00:33:20,220 --> 00:33:22,500
Grant is later revoked you don't like

938
00:33:22,500 --> 00:33:24,000
lose access to the volume because that

939
00:33:24,000 --> 00:33:25,500
would be pretty bad

940
00:33:25,500 --> 00:33:27,899
um whereas in the case of go API

941
00:33:27,899 --> 00:33:30,419
it's kind of expected that if the TLs

942
00:33:30,419 --> 00:33:32,640
secret goes away then you can't serve

943
00:33:32,640 --> 00:33:34,019
you shouldn't be serving traffic out of

944
00:33:34,019 --> 00:33:36,240
that Gateway anymore so it's it's a

945
00:33:36,240 --> 00:33:37,320
slightly different thing because it's a

946
00:33:37,320 --> 00:33:38,940
slightly different usage and so it's one

947
00:33:38,940 --> 00:33:39,840
of the things that's a bit tricky about

948
00:33:39,840 --> 00:33:43,380
writing this is that um you know we have

949
00:33:43,380 --> 00:33:45,000
to have wording like some actions that

950
00:33:45,000 --> 00:33:47,760
have been enabled you can't be undone

951
00:33:47,760 --> 00:33:49,679
but but no future actions should be

952
00:33:49,679 --> 00:33:51,960
allowed right so

953
00:33:51,960 --> 00:33:53,700
um you know one of the hardest things

954
00:33:53,700 --> 00:33:55,919
about writing this sort of standard

955
00:33:55,919 --> 00:33:57,960
um so we had some examples here yeah I

956
00:33:57,960 --> 00:33:59,100
would definitely recommend that if you

957
00:33:59,100 --> 00:34:00,240
are interested in this have a look at

958
00:34:00,240 --> 00:34:01,740
this cap obviously it's going to be

959
00:34:01,740 --> 00:34:05,279
important later we will keep you all

960
00:34:05,279 --> 00:34:07,140
posted as this sort of makes into actual

961
00:34:07,140 --> 00:34:09,300
core I would imagine there'll be blog

962
00:34:09,300 --> 00:34:11,639
posts in the future

963
00:34:11,639 --> 00:34:12,359
um

964
00:34:12,359 --> 00:34:14,760
as you can see you end up needing to put

965
00:34:14,760 --> 00:34:17,040
quite a lot of yo text around these sort

966
00:34:17,040 --> 00:34:19,699
of things uh writing API specs turns out

967
00:34:19,699 --> 00:34:22,619
uh you need to be I have a lot more

968
00:34:22,619 --> 00:34:24,119
sympathy I would say for people who

969
00:34:24,119 --> 00:34:26,099
write rfcs than I did before I started

970
00:34:26,099 --> 00:34:28,800
writing API specs I used to read rfcs

971
00:34:28,800 --> 00:34:30,480
and was like oh how could you possibly

972
00:34:30,480 --> 00:34:31,800
write something so dry and I'm like

973
00:34:31,800 --> 00:34:33,599
that's because if it's not dry and

974
00:34:33,599 --> 00:34:36,000
boring then it contains ambiguity and

975
00:34:36,000 --> 00:34:37,619
that means that Engineers will take

976
00:34:37,619 --> 00:34:38,940
great Delight in telling you all the

977
00:34:38,940 --> 00:34:40,800
ways in which it contains ambiguity and

978
00:34:40,800 --> 00:34:42,359
will make your day living hell until you

979
00:34:42,359 --> 00:34:44,699
remove the ambiguity so

980
00:34:44,699 --> 00:34:45,540
um

981
00:34:45,540 --> 00:34:48,119
yeah but what about what about if you do

982
00:34:48,119 --> 00:34:50,280
this Edge case oh yes okay we better

983
00:34:50,280 --> 00:34:52,020
cover that too

984
00:34:52,020 --> 00:34:54,599
um so yeah uh I think

985
00:34:54,599 --> 00:34:56,940
the yeah that one of the other things

986
00:34:56,940 --> 00:34:59,040
that uh one of the other things that

987
00:34:59,040 --> 00:35:00,599
people have had an objection to is the

988
00:35:00,599 --> 00:35:03,180
use of from and two as the names

989
00:35:03,180 --> 00:35:04,800
um you know I think

990
00:35:04,800 --> 00:35:07,140
as this is a more generic API than the

991
00:35:07,140 --> 00:35:09,240
original Gateway API one it kind of

992
00:35:09,240 --> 00:35:11,640
makes a bit more sense to have like

993
00:35:11,640 --> 00:35:13,980
you know uh something like

994
00:35:13,980 --> 00:35:16,800
subject from subject origin subject

995
00:35:16,800 --> 00:35:19,680
object like you know I was like you

996
00:35:19,680 --> 00:35:20,880
could use subject object that's

997
00:35:20,880 --> 00:35:23,160
technically correct but it also means

998
00:35:23,160 --> 00:35:24,300
that you need to grammatically explain

999
00:35:24,300 --> 00:35:25,500
to people the difference between a

1000
00:35:25,500 --> 00:35:27,180
subject and an object

1001
00:35:27,180 --> 00:35:29,280
um you know and people are generally

1002
00:35:29,280 --> 00:35:32,220
pretty bad at that one so yeah uh we

1003
00:35:32,220 --> 00:35:33,720
look like we're going to be having a

1004
00:35:33,720 --> 00:35:35,579
good old bike shooting session about uh

1005
00:35:35,579 --> 00:35:38,760
about the names there but uh yeah so um

1006
00:35:38,760 --> 00:35:40,500
I feel like I'm starting to be a bit

1007
00:35:40,500 --> 00:35:43,380
boring so I will uh sort of stop here

1008
00:35:43,380 --> 00:35:44,940
that we're one of the things like I said

1009
00:35:44,940 --> 00:35:47,220
that we really need a lot of design work

1010
00:35:47,220 --> 00:35:48,540
on and I would love to hear people's

1011
00:35:48,540 --> 00:35:50,880
opinions on is how best to surface

1012
00:35:50,880 --> 00:35:52,440
information about how this thing is

1013
00:35:52,440 --> 00:35:54,000
being used

1014
00:35:54,000 --> 00:35:55,920
um the naive answer is I have a status

1015
00:35:55,920 --> 00:35:57,960
on the reference Grant the problem then

1016
00:35:57,960 --> 00:35:59,940
is that if you have 10 controllers

1017
00:35:59,940 --> 00:36:01,500
reconciling different types of reference

1018
00:36:01,500 --> 00:36:03,720
Grant every single one of them is going

1019
00:36:03,720 --> 00:36:04,920
to need to write status to every

1020
00:36:04,920 --> 00:36:06,420
reference Grant to say whether or not

1021
00:36:06,420 --> 00:36:08,040
they're using it and so how do you

1022
00:36:08,040 --> 00:36:10,140
coordinate everybody writing into the

1023
00:36:10,140 --> 00:36:13,200
one sub resource is really really hard

1024
00:36:13,200 --> 00:36:16,859
um and and ads produces lots of fun race

1025
00:36:16,859 --> 00:36:18,180
conditions and eventual consistency

1026
00:36:18,180 --> 00:36:20,940
 you know that basically makes

1027
00:36:20,940 --> 00:36:23,400
it really hard so yeah

1028
00:36:23,400 --> 00:36:25,619
um I'm really interested in like

1029
00:36:25,619 --> 00:36:26,700
spending a lot of time thinking about

1030
00:36:26,700 --> 00:36:28,619
that sort of stuff but yeah oh sorry

1031
00:36:28,619 --> 00:36:31,040
yeah go

1032
00:36:33,300 --> 00:36:35,720
community

1033
00:36:42,359 --> 00:36:45,420
exactly yeah yeah yeah yeah so that you

1034
00:36:45,420 --> 00:36:48,000
need to so either you need to be like

1035
00:36:48,000 --> 00:36:50,040
hey you are consuming reference grants

1036
00:36:50,040 --> 00:36:51,720
in your resource your resource needs to

1037
00:36:51,720 --> 00:36:53,280
have something that says the reference

1038
00:36:53,280 --> 00:36:55,440
Grant has been consumed because you know

1039
00:36:55,440 --> 00:36:57,119
um what the thing is but then the owner

1040
00:36:57,119 --> 00:36:58,500
of the reference Grant has no way of

1041
00:36:58,500 --> 00:37:01,320
knowing what what possible resources

1042
00:37:01,320 --> 00:37:03,300
could be consuming it aside from what

1043
00:37:03,300 --> 00:37:05,940
they have allowed right so

1044
00:37:05,940 --> 00:37:08,040
yeah exactly right like yeah so I mean

1045
00:37:08,040 --> 00:37:09,540
there's there's a real interesting

1046
00:37:09,540 --> 00:37:11,099
design space problem there about like

1047
00:37:11,099 --> 00:37:12,480
how do you communicate the intent back

1048
00:37:12,480 --> 00:37:15,000
to the user how do you do that without

1049
00:37:15,000 --> 00:37:16,859
creating like massive fan out problems

1050
00:37:16,859 --> 00:37:18,599
for the API server where like updating

1051
00:37:18,599 --> 00:37:20,280
what object means you then need to go

1052
00:37:20,280 --> 00:37:21,780
and update the status for like 100 other

1053
00:37:21,780 --> 00:37:23,640
objects and things like that there's a

1054
00:37:23,640 --> 00:37:25,560
real risk in this sort of design

1055
00:37:25,560 --> 00:37:27,180
so yeah there's a bunch of interesting

1056
00:37:27,180 --> 00:37:28,740
really interesting sort of design work

1057
00:37:28,740 --> 00:37:31,740
there for this API but I think that you

1058
00:37:31,740 --> 00:37:33,060
know as you can see like it has a lot of

1059
00:37:33,060 --> 00:37:33,960
potential

1060
00:37:33,960 --> 00:37:35,940
um I think that making being able to

1061
00:37:35,940 --> 00:37:37,380
make this sort of cross namespace more

1062
00:37:37,380 --> 00:37:40,140
secure in like a standard way could be

1063
00:37:40,140 --> 00:37:41,520
really uh game changing for lots of

1064
00:37:41,520 --> 00:37:42,720
different use cases

1065
00:37:42,720 --> 00:37:45,300
so yeah um with that uh I've probably

1066
00:37:45,300 --> 00:37:48,000
taken up enough of your time uh yeah if

1067
00:37:48,000 --> 00:37:49,079
if you have any other questions feel

1068
00:37:49,079 --> 00:37:50,460
free to grab me here

1069
00:37:50,460 --> 00:37:52,680
um catch me on uh kubernetes slack at

1070
00:37:52,680 --> 00:37:54,180
Young Nick

1071
00:37:54,180 --> 00:37:56,099
um or all Grammy anywhere around today

1072
00:37:56,099 --> 00:38:00,859
so thanks very much everyone free time

