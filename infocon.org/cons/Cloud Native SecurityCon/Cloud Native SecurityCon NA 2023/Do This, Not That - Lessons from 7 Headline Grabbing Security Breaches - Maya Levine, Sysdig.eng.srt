1
00:00:00,179 --> 00:00:02,399
my name is Maya Levine I'm a product

2
00:00:02,399 --> 00:00:05,460
manager at systic and the goal for me

3
00:00:05,460 --> 00:00:07,799
for today's session is for all of you to

4
00:00:07,799 --> 00:00:10,500
walk out with really clear takeaways on

5
00:00:10,500 --> 00:00:13,080
how to avoid becoming a headline

6
00:00:13,080 --> 00:00:15,360
grabbing security breach so I'm going to

7
00:00:15,360 --> 00:00:17,160
talk about actual breaches that occurred

8
00:00:17,160 --> 00:00:19,380
in the cloud and real takeaways for you

9
00:00:19,380 --> 00:00:20,820
to learn from them

10
00:00:20,820 --> 00:00:23,100
and do you want to apologize if your

11
00:00:23,100 --> 00:00:24,359
company is mentioned in this

12
00:00:24,359 --> 00:00:26,939
presentation if I bring back any PTSD

13
00:00:26,939 --> 00:00:29,760
moments for you I do think that there's

14
00:00:29,760 --> 00:00:32,040
no shame in being the victim of a

15
00:00:32,040 --> 00:00:34,399
security breach more and more people are

16
00:00:34,399 --> 00:00:37,440
realizing that it happens and I think

17
00:00:37,440 --> 00:00:39,120
that as a community we can only grow

18
00:00:39,120 --> 00:00:41,760
from being open about how and why it

19
00:00:41,760 --> 00:00:42,780
happened

20
00:00:42,780 --> 00:00:45,840
so given that before I go ahead and talk

21
00:00:45,840 --> 00:00:48,360
about the specific examples I want to

22
00:00:48,360 --> 00:00:50,820
take a step back and compare the

23
00:00:50,820 --> 00:00:52,680
differences between cloud and on-premise

24
00:00:52,680 --> 00:00:54,300
threats using different types of

25
00:00:54,300 --> 00:00:57,360
breaches and the first one is ransomware

26
00:00:57,360 --> 00:00:59,879
on premise the typical ransomware

27
00:00:59,879 --> 00:01:02,460
execution begins with a phishing email

28
00:01:02,460 --> 00:01:05,339
sent to a user they either click on an

29
00:01:05,339 --> 00:01:08,460
attachment or on a URL link malware gets

30
00:01:08,460 --> 00:01:10,140
downloaded to their endpoint and then it

31
00:01:10,140 --> 00:01:11,580
spreads throughout the nor an

32
00:01:11,580 --> 00:01:13,260
organization system

33
00:01:13,260 --> 00:01:15,240
in the cloud it's a little bit different

34
00:01:15,240 --> 00:01:18,540
the goal is less about these endpoints

35
00:01:18,540 --> 00:01:21,180
and user identity kind of directories

36
00:01:21,180 --> 00:01:23,340
and much more about storage databases

37
00:01:23,340 --> 00:01:26,280
things like S3 buckets and there's way

38
00:01:26,280 --> 00:01:28,820
more paths to get to these in the cloud

39
00:01:28,820 --> 00:01:31,320
you could have an S3 bucket be

40
00:01:31,320 --> 00:01:33,720
completely tight down in terms of

41
00:01:33,720 --> 00:01:35,880
security and permissions but you have a

42
00:01:35,880 --> 00:01:37,680
compute resource somewhere that's overly

43
00:01:37,680 --> 00:01:40,259
permissioned to allow access to the S3

44
00:01:40,259 --> 00:01:42,240
bucket and that's an entry point into

45
00:01:42,240 --> 00:01:44,520
there so in the cloud it's a little bit

46
00:01:44,520 --> 00:01:46,820
more complex

47
00:01:46,820 --> 00:01:49,799
similarly supply chain compromises are

48
00:01:49,799 --> 00:01:51,840
arguably easier to execute in the cloud

49
00:01:51,840 --> 00:01:54,479
because of these different open source

50
00:01:54,479 --> 00:01:57,420
softwares dependencies it's just much

51
00:01:57,420 --> 00:02:00,060
more complex architecture and obfuscated

52
00:02:00,060 --> 00:02:02,159
and it's harder to tell what is using

53
00:02:02,159 --> 00:02:05,399
what and so that modern way of doing

54
00:02:05,399 --> 00:02:07,979
things kind of gives these attackers

55
00:02:07,979 --> 00:02:09,500
different entry points inside

56
00:02:09,500 --> 00:02:12,420
additionally CI CD pipelines are

57
00:02:12,420 --> 00:02:14,640
favorite targets of attackers because of

58
00:02:14,640 --> 00:02:17,040
the amount of stored credentials and the

59
00:02:17,040 --> 00:02:18,840
access granted to perform automated

60
00:02:18,840 --> 00:02:21,599
tasks that being said

61
00:02:21,599 --> 00:02:24,060
although on-premises the services are

62
00:02:24,060 --> 00:02:26,400
typically more contained it's not immune

63
00:02:26,400 --> 00:02:28,200
to supply chain compromise attacks

64
00:02:28,200 --> 00:02:30,300
solarwinds is a very good example of

65
00:02:30,300 --> 00:02:32,420
that

66
00:02:32,640 --> 00:02:34,680
but when it comes to crypto mining cloud

67
00:02:34,680 --> 00:02:36,720
is really just the perfect breeding

68
00:02:36,720 --> 00:02:38,520
ground for these types of attacks

69
00:02:38,520 --> 00:02:40,680
because of the infinite amount of

70
00:02:40,680 --> 00:02:42,840
elastic compute resources that users

71
00:02:42,840 --> 00:02:44,940
have access to so attackers can

72
00:02:44,940 --> 00:02:47,160
piggyback on an organization's compute

73
00:02:47,160 --> 00:02:49,680
resources and basically generate money

74
00:02:49,680 --> 00:02:51,900
for themselves never having to foot the

75
00:02:51,900 --> 00:02:54,080
bill

76
00:02:54,540 --> 00:02:56,819
and this trend is actually increasing

77
00:02:56,819 --> 00:02:59,300
yearly and largely through targeting

78
00:02:59,300 --> 00:03:03,379
container-based Cloud resources

79
00:03:04,500 --> 00:03:07,260
now for each specific attack

80
00:03:07,260 --> 00:03:10,680
I like to draw a real life metaphor or

81
00:03:10,680 --> 00:03:12,360
example to kind of Drive the point home

82
00:03:12,360 --> 00:03:14,519
and so for the first attack which

83
00:03:14,519 --> 00:03:16,620
focuses on a supply chain compromise

84
00:03:16,620 --> 00:03:19,620
through a malicious image distribution I

85
00:03:19,620 --> 00:03:22,080
love the metaphor of a poisoned well

86
00:03:22,080 --> 00:03:24,420
like an unsuspecting villager who goes

87
00:03:24,420 --> 00:03:26,159
to drink from a well that has poison in

88
00:03:26,159 --> 00:03:28,440
it unsuspecting developers can use

89
00:03:28,440 --> 00:03:30,659
images from these public sources that

90
00:03:30,659 --> 00:03:32,700
they think are totally fine but end up

91
00:03:32,700 --> 00:03:35,580
drawing real problems for them

92
00:03:35,580 --> 00:03:38,879
and so this attack happened in 2020 and

93
00:03:38,879 --> 00:03:41,459
it started with an attacker utilizing an

94
00:03:41,459 --> 00:03:44,519
Amazon machine image or Ami an Ami is

95
00:03:44,519 --> 00:03:47,340
basically a pre-packaged ec2 instance in

96
00:03:47,340 --> 00:03:49,920
this case it was a Windows 2008 server

97
00:03:49,920 --> 00:03:50,940
instance

98
00:03:50,940 --> 00:03:53,280
and the attacker took the Ami and put it

99
00:03:53,280 --> 00:03:56,040
into the AWS Marketplace which is a very

100
00:03:56,040 --> 00:03:58,920
public well indeed and anytime somebody

101
00:03:58,920 --> 00:04:02,040
happened to use this image a script

102
00:04:02,040 --> 00:04:03,599
would run in the background that would

103
00:04:03,599 --> 00:04:05,879
execute crypto miners

104
00:04:05,879 --> 00:04:09,360
now let's talk about mining why are we

105
00:04:09,360 --> 00:04:11,879
seeing this trending oh wait

106
00:04:11,879 --> 00:04:14,519
this is the wrong kind of minors we're

107
00:04:14,519 --> 00:04:17,339
talking about crypto miners crypto

108
00:04:17,339 --> 00:04:20,399
miners are a low risk High reward way

109
00:04:20,399 --> 00:04:23,340
for attackers to make a profit they

110
00:04:23,340 --> 00:04:25,919
basically generate passive income if

111
00:04:25,919 --> 00:04:27,860
anyone happens to use this instance

112
00:04:27,860 --> 00:04:31,020
they'll be making money on their behalf

113
00:04:31,020 --> 00:04:33,180
and it's much easier to it's very easy

114
00:04:33,180 --> 00:04:35,160
to change cryptocurrency into other

115
00:04:35,160 --> 00:04:37,860
forms of currency in addition it's not

116
00:04:37,860 --> 00:04:39,840
considered as much of a damaging attack

117
00:04:39,840 --> 00:04:42,540
like ransomware so it's less likely to

118
00:04:42,540 --> 00:04:44,460
gain unwanted attention

119
00:04:44,460 --> 00:04:46,440
and the most important thing for crypto

120
00:04:46,440 --> 00:04:49,500
minor attacks is scale the more miners

121
00:04:49,500 --> 00:04:51,000
are executing the more money the

122
00:04:51,000 --> 00:04:53,759
attackers are making

123
00:04:53,759 --> 00:04:56,520
the impact on the victim in this attack

124
00:04:56,520 --> 00:04:58,440
is that they're unknowingly running a

125
00:04:58,440 --> 00:05:00,960
crypto Miner possibly multiple if

126
00:05:00,960 --> 00:05:02,280
they're running more than one instance

127
00:05:02,280 --> 00:05:03,360
at a time

128
00:05:03,360 --> 00:05:05,580
and this is pretty simple as your CPU

129
00:05:05,580 --> 00:05:06,840
usage goes up

130
00:05:06,840 --> 00:05:09,360
so does that AWS bill

131
00:05:09,360 --> 00:05:11,340
which you are responsible for most of

132
00:05:11,340 --> 00:05:13,199
the time

133
00:05:13,199 --> 00:05:15,780
so the main takeaways for this attack is

134
00:05:15,780 --> 00:05:18,540
you should really use images from only

135
00:05:18,540 --> 00:05:21,240
trusted sources and even if you are

136
00:05:21,240 --> 00:05:23,400
using a trusted Source you should also

137
00:05:23,400 --> 00:05:25,620
have static and runtime security tools

138
00:05:25,620 --> 00:05:27,660
on those instances to make sure that

139
00:05:27,660 --> 00:05:30,720
there's no malicious activity occurring

140
00:05:30,720 --> 00:05:33,840
now attack number two focuses on

141
00:05:33,840 --> 00:05:35,820
compromise credentials and when I was

142
00:05:35,820 --> 00:05:37,620
looking at the internet for a real life

143
00:05:37,620 --> 00:05:39,300
example of a compromise credential

144
00:05:39,300 --> 00:05:41,580
unfortunately it did not take me very

145
00:05:41,580 --> 00:05:43,740
long to find that many people think it's

146
00:05:43,740 --> 00:05:46,139
a great idea to post their credit cards

147
00:05:46,139 --> 00:05:48,600
on their social media with the security

148
00:05:48,600 --> 00:05:52,020
code as a given gift to people who want

149
00:05:52,020 --> 00:05:55,080
to use these now I'm not saying that

150
00:05:55,080 --> 00:05:56,880
many developers would do something like

151
00:05:56,880 --> 00:05:59,400
this but there have been known cases of

152
00:05:59,400 --> 00:06:01,680
developers accidentally putting access

153
00:06:01,680 --> 00:06:04,979
keys or credentials in code that is

154
00:06:04,979 --> 00:06:07,740
posted publicly and not encrypted so

155
00:06:07,740 --> 00:06:09,780
keep that in mind there's many different

156
00:06:09,780 --> 00:06:12,900
ways that credentials can be leaked

157
00:06:12,900 --> 00:06:16,680
for this attack the MDR expel discovered

158
00:06:16,680 --> 00:06:18,840
an attack on one of their customers that

159
00:06:18,840 --> 00:06:21,240
all centered around a you use root

160
00:06:21,240 --> 00:06:23,580
user's access key that was leaked it was

161
00:06:23,580 --> 00:06:25,199
never determined how but as I mentioned

162
00:06:25,199 --> 00:06:27,840
there's many ways that that could happen

163
00:06:27,840 --> 00:06:29,639
the attackers got their hands on this

164
00:06:29,639 --> 00:06:31,560
access key and as far as compromise

165
00:06:31,560 --> 00:06:33,780
credentials go a root user's access key

166
00:06:33,780 --> 00:06:36,900
is about as bad as it can get they were

167
00:06:36,900 --> 00:06:39,840
able to use it to generate ec2 SSH

168
00:06:39,840 --> 00:06:43,380
access keys and they would spin up ec2

169
00:06:43,380 --> 00:06:46,740
instances with the Run instances API and

170
00:06:46,740 --> 00:06:48,600
alter the security groups to allow

171
00:06:48,600 --> 00:06:50,759
inbound access from the internet

172
00:06:50,759 --> 00:06:53,400
so one leaked key made it so that

173
00:06:53,400 --> 00:06:56,639
attackers could set up SSH keys and

174
00:06:56,639 --> 00:06:58,919
install crypto miners remotely on these

175
00:06:58,919 --> 00:07:00,000
instances

176
00:07:00,000 --> 00:07:02,340
so sooner or sooner or later these

177
00:07:02,340 --> 00:07:04,500
instances were found to be communicating

178
00:07:04,500 --> 00:07:07,440
with the cryptocurrency server Monera

179
00:07:07,440 --> 00:07:09,919
hash.com

180
00:07:10,680 --> 00:07:13,860
now why why attackers execute this type

181
00:07:13,860 --> 00:07:15,720
of attack and the impact on the victims

182
00:07:15,720 --> 00:07:18,060
is largely the same as the first example

183
00:07:18,060 --> 00:07:20,940
however I do want to emphasize that a

184
00:07:20,940 --> 00:07:23,460
leaked access key can allow an attacker

185
00:07:23,460 --> 00:07:25,620
to create a very large amount of

186
00:07:25,620 --> 00:07:28,139
instances likely many more than the

187
00:07:28,139 --> 00:07:30,539
victim would have done on their own and

188
00:07:30,539 --> 00:07:32,340
this makes the potential loss even

189
00:07:32,340 --> 00:07:34,680
greater think of the the type of AWS

190
00:07:34,680 --> 00:07:36,180
bill that would be the stuff of

191
00:07:36,180 --> 00:07:39,720
nightmares for most people in this room

192
00:07:39,720 --> 00:07:42,419
so the takeaways here are that Secrets

193
00:07:42,419 --> 00:07:44,699
management is a very critical part of

194
00:07:44,699 --> 00:07:47,039
operating in the cloud

195
00:07:47,039 --> 00:07:49,199
but alongside that you really need

196
00:07:49,199 --> 00:07:51,000
real-time monitoring in your

197
00:07:51,000 --> 00:07:53,460
environments to basically notice if

198
00:07:53,460 --> 00:07:55,199
these secrets are being abused in some

199
00:07:55,199 --> 00:07:58,080
way and the real-time part is key here

200
00:07:58,080 --> 00:08:00,060
because it doesn't take attackers very

201
00:08:00,060 --> 00:08:02,880
long to generate enormous bills if they

202
00:08:02,880 --> 00:08:04,919
have the right kind of access

203
00:08:04,919 --> 00:08:08,099
in this specific attack the expel was

204
00:08:08,099 --> 00:08:11,099
able to pick up on a few things in their

205
00:08:11,099 --> 00:08:13,319
real-time monitoring they picked up on

206
00:08:13,319 --> 00:08:15,360
the fact that SSH keys were being

207
00:08:15,360 --> 00:08:17,280
generated from a suspicious IP address

208
00:08:17,280 --> 00:08:19,319
one that had never been used in the

209
00:08:19,319 --> 00:08:21,660
environment before and they picked up on

210
00:08:21,660 --> 00:08:23,759
the fact that these instances were

211
00:08:23,759 --> 00:08:25,680
communicating with a known

212
00:08:25,680 --> 00:08:27,660
cryptocurrency server so that's just

213
00:08:27,660 --> 00:08:30,479
examples of the kinds of monitoring that

214
00:08:30,479 --> 00:08:33,979
you should be having in your environment

215
00:08:34,380 --> 00:08:36,479
the next attack attack number three

216
00:08:36,479 --> 00:08:39,179
focuses on ransomware and unlike in

217
00:08:39,179 --> 00:08:41,760
Austin Powers it's never funny or for a

218
00:08:41,760 --> 00:08:44,339
laughable amount of money

219
00:08:44,339 --> 00:08:47,399
and this attack focused on onus which is

220
00:08:47,399 --> 00:08:49,860
the biggest cryptocurrency platform in

221
00:08:49,860 --> 00:08:51,060
Vietnam

222
00:08:51,060 --> 00:08:52,920
the attackers were able to take

223
00:08:52,920 --> 00:08:56,279
advantage of a log 4J vulnerability on

224
00:08:56,279 --> 00:08:58,080
one of their cycle servers it's a

225
00:08:58,080 --> 00:09:01,080
payment software that they use and so

226
00:09:01,080 --> 00:09:03,240
they got in and they installed back

227
00:09:03,240 --> 00:09:06,120
doors naming them K worker in order to

228
00:09:06,120 --> 00:09:08,100
disguise themselves as the Linux

229
00:09:08,100 --> 00:09:10,920
operating systems K worker service

230
00:09:10,920 --> 00:09:14,700
now I do want to mention that onus patch

231
00:09:14,700 --> 00:09:17,459
their cyclo servers as soon as a patch

232
00:09:17,459 --> 00:09:20,040
was released by them for log4j but by

233
00:09:20,040 --> 00:09:22,019
this point it was already too late they

234
00:09:22,019 --> 00:09:24,779
were already compromised and so the

235
00:09:24,779 --> 00:09:28,019
attackers used uh used a tunnel and

236
00:09:28,019 --> 00:09:30,180
established a remote shell and were able

237
00:09:30,180 --> 00:09:32,760
to discover a configuration file which

238
00:09:32,760 --> 00:09:36,480
held AWS credentials full access AWS

239
00:09:36,480 --> 00:09:37,680
credentials

240
00:09:37,680 --> 00:09:40,560
so they were easily able to use those to

241
00:09:40,560 --> 00:09:43,260
access onus S3 buckets where they

242
00:09:43,260 --> 00:09:45,839
conducted their extortion scheme

243
00:09:45,839 --> 00:09:48,839
onus discovered that sensitive customer

244
00:09:48,839 --> 00:09:51,120
data had been deleted from these S3

245
00:09:51,120 --> 00:09:52,200
buckets

246
00:09:52,200 --> 00:09:53,820
and at which at this point they

247
00:09:53,820 --> 00:09:56,160
obviously deactivated these access keys

248
00:09:56,160 --> 00:09:58,860
but again it was too late the next day

249
00:09:58,860 --> 00:10:01,920
they got a ransomware request for 5

250
00:10:01,920 --> 00:10:04,380
million US dollars from the attackers

251
00:10:04,380 --> 00:10:05,940
via Telegram

252
00:10:05,940 --> 00:10:09,000
now onus declined this request and so

253
00:10:09,000 --> 00:10:11,760
they had to both tell their customers

254
00:10:11,760 --> 00:10:14,760
about this leak and go through all of

255
00:10:14,760 --> 00:10:17,040
their cycle servers looking and deleting

256
00:10:17,040 --> 00:10:19,140
backdoors

257
00:10:19,140 --> 00:10:20,279
yeah

258
00:10:20,279 --> 00:10:22,560
now ransomware attacks have been around

259
00:10:22,560 --> 00:10:25,200
for a while now why are they still being

260
00:10:25,200 --> 00:10:26,820
talked about why are they still relevant

261
00:10:26,820 --> 00:10:29,100
mainly cyber criminals know that

262
00:10:29,100 --> 00:10:30,899
companies hate to see their operations

263
00:10:30,899 --> 00:10:33,480
grind to a halt in fact sometimes it

264
00:10:33,480 --> 00:10:36,240
makes more fiscal sense to actually pay

265
00:10:36,240 --> 00:10:38,700
the ransom than to deal with the

266
00:10:38,700 --> 00:10:40,740
financial implications of downtime and

267
00:10:40,740 --> 00:10:43,800
recovery so attackers know this and

268
00:10:43,800 --> 00:10:45,060
there are multiple failures which

269
00:10:45,060 --> 00:10:46,860
allowed this specific attack to happen

270
00:10:46,860 --> 00:10:49,200
the first is that the system was not

271
00:10:49,200 --> 00:10:51,120
patched for log4j that's what allowed

272
00:10:51,120 --> 00:10:53,519
the initial access but like I mentioned

273
00:10:53,519 --> 00:10:55,680
this wasn't really onus fault they

274
00:10:55,680 --> 00:10:57,120
patched it as soon as a patch was

275
00:10:57,120 --> 00:11:00,480
available but it just wasn't out in time

276
00:11:00,480 --> 00:11:02,339
so I think the point that is really

277
00:11:02,339 --> 00:11:05,519
important here is that they had very

278
00:11:05,519 --> 00:11:07,560
overly permissive access keys and

279
00:11:07,560 --> 00:11:09,959
credentials this was the key the literal

280
00:11:09,959 --> 00:11:12,660
key that gave attackers the ability to

281
00:11:12,660 --> 00:11:15,240
easily access overwrite delete S3

282
00:11:15,240 --> 00:11:17,660
buckets

283
00:11:18,120 --> 00:11:20,220
and the impact here is that over 2

284
00:11:20,220 --> 00:11:22,500
million onus users information was

285
00:11:22,500 --> 00:11:24,839
leaked including their government IDs

286
00:11:24,839 --> 00:11:27,180
other personal information and password

287
00:11:27,180 --> 00:11:29,820
hashes and if we think of something like

288
00:11:29,820 --> 00:11:31,380
gdpr

289
00:11:31,380 --> 00:11:33,420
companies don't just have to worry about

290
00:11:33,420 --> 00:11:36,180
the pr Fallout and all of that there's

291
00:11:36,180 --> 00:11:38,940
actual fines being implemented now this

292
00:11:38,940 --> 00:11:40,800
is showing you a chart over the past few

293
00:11:40,800 --> 00:11:43,440
years of the gdpr fines and we can see

294
00:11:43,440 --> 00:11:45,300
that these are increasing at what looks

295
00:11:45,300 --> 00:11:48,060
to be an exponential level so in

296
00:11:48,060 --> 00:11:49,800
addition to all your other worries you

297
00:11:49,800 --> 00:11:51,360
now also have to worry about potentially

298
00:11:51,360 --> 00:11:53,700
being fined for allowing these leaks to

299
00:11:53,700 --> 00:11:56,600
happen in the first place

300
00:11:56,760 --> 00:11:59,279
so the main takeaways for this one is

301
00:11:59,279 --> 00:12:01,800
that you for proper vulnerability

302
00:12:01,800 --> 00:12:04,200
management you need to patch as soon as

303
00:12:04,200 --> 00:12:06,180
you can and in this case this wasn't

304
00:12:06,180 --> 00:12:08,760
possible because log4j went from

305
00:12:08,760 --> 00:12:11,220
announcement to being weaponized very

306
00:12:11,220 --> 00:12:14,399
quickly so if you're waiting for a patch

307
00:12:14,399 --> 00:12:16,560
consider other mitigating controls

308
00:12:16,560 --> 00:12:18,360
something like a web application

309
00:12:18,360 --> 00:12:20,279
firewall could have filtered outlog for

310
00:12:20,279 --> 00:12:21,899
Jay

311
00:12:21,899 --> 00:12:23,700
and what I really want you to take away

312
00:12:23,700 --> 00:12:26,880
from this is that overly permissive is a

313
00:12:26,880 --> 00:12:29,459
gift that you are giving attackers if

314
00:12:29,459 --> 00:12:31,380
they manage to find their way into your

315
00:12:31,380 --> 00:12:33,600
environment via whatever method they can

316
00:12:33,600 --> 00:12:37,740
if you have overly permissive throughout

317
00:12:37,740 --> 00:12:39,860
your roles your groups your resources

318
00:12:39,860 --> 00:12:42,660
that is just enabling them to move

319
00:12:42,660 --> 00:12:44,579
laterally very easily within your

320
00:12:44,579 --> 00:12:47,459
systems and in a in a report that systic

321
00:12:47,459 --> 00:12:49,200
just released on container and security

322
00:12:49,200 --> 00:12:51,839
usage we found that ninety percent of

323
00:12:51,839 --> 00:12:54,600
granted permissions are not used ninety

324
00:12:54,600 --> 00:12:56,760
percent that is something that's a bit

325
00:12:56,760 --> 00:12:59,339
excessive right something that is a very

326
00:12:59,339 --> 00:13:02,279
easy way that we can tackle uh something

327
00:13:02,279 --> 00:13:03,720
that happens in almost every cloud

328
00:13:03,720 --> 00:13:05,519
breach that we see which is lateral

329
00:13:05,519 --> 00:13:07,880
movement

330
00:13:08,220 --> 00:13:10,320
now for attack number four I want

331
00:13:10,320 --> 00:13:12,480
everybody here to think about what

332
00:13:12,480 --> 00:13:14,100
happens when the security controls that

333
00:13:14,100 --> 00:13:16,260
are supposed to be in place don't work

334
00:13:16,260 --> 00:13:19,639
as intended

335
00:13:20,279 --> 00:13:22,320
and I think that's a good example to

336
00:13:22,320 --> 00:13:24,300
think when you think about uh object

337
00:13:24,300 --> 00:13:26,339
storage being misconfigured mainly

338
00:13:26,339 --> 00:13:28,560
because customers are trusting us to

339
00:13:28,560 --> 00:13:31,320
store their data in a responsible way

340
00:13:31,320 --> 00:13:34,440
now Pfizer was found to have multiple

341
00:13:34,440 --> 00:13:36,959
exposed files on a misconfigured Google

342
00:13:36,959 --> 00:13:38,760
Cloud Storage bucket

343
00:13:38,760 --> 00:13:42,079
these files contain transcripts between

344
00:13:42,079 --> 00:13:46,380
Pfizer customer support and customers of

345
00:13:46,380 --> 00:13:49,320
various Pfizer drugs the kinds of

346
00:13:49,320 --> 00:13:50,940
transcripts with very sensitive

347
00:13:50,940 --> 00:13:53,639
information including home address phone

348
00:13:53,639 --> 00:13:54,740
number

349
00:13:54,740 --> 00:13:58,260
email and medical and Health Data

350
00:13:58,260 --> 00:14:00,600
especially that pertained to these

351
00:14:00,600 --> 00:14:02,940
Pfizer drugs that they were using

352
00:14:02,940 --> 00:14:05,880
so VPN Mentor found the exposed files

353
00:14:05,880 --> 00:14:08,160
and reached out to Pfizer who then

354
00:14:08,160 --> 00:14:10,860
secured the bucket

355
00:14:10,860 --> 00:14:13,380
and the impact here is that this is the

356
00:14:13,380 --> 00:14:16,980
kind of information that if criminal

357
00:14:16,980 --> 00:14:19,200
hackers were able to access this data

358
00:14:19,200 --> 00:14:21,959
they could very easily use to conduct

359
00:14:21,959 --> 00:14:25,139
phishing campaigns think about it if I

360
00:14:25,139 --> 00:14:27,839
was trying to pretend to be Pfizer

361
00:14:27,839 --> 00:14:31,019
customer support and I knew your

362
00:14:31,019 --> 00:14:33,839
personal information as well as you know

363
00:14:33,839 --> 00:14:36,120
your medical health history and a

364
00:14:36,120 --> 00:14:37,860
history of all these conversations you

365
00:14:37,860 --> 00:14:40,320
had with us how hard is it for me to

366
00:14:40,320 --> 00:14:42,600
just pretend to be Pfizer and follow up

367
00:14:42,600 --> 00:14:44,339
on the next kind of thing in this

368
00:14:44,339 --> 00:14:46,139
customer support chain

369
00:14:46,139 --> 00:14:48,180
also this is the kind of information

370
00:14:48,180 --> 00:14:50,760
that can be utilized for identity theft

371
00:14:50,760 --> 00:14:52,620
campaigns for credit cards or for other

372
00:14:52,620 --> 00:14:55,920
things so basically this is kind of

373
00:14:55,920 --> 00:14:57,180
thing that you don't want to be on the

374
00:14:57,180 --> 00:14:58,740
wrong side of when it comes to data

375
00:14:58,740 --> 00:15:00,720
privacy loss

376
00:15:00,720 --> 00:15:03,360
and one thing you should definitely do

377
00:15:03,360 --> 00:15:06,060
is never leave a system that doesn't

378
00:15:06,060 --> 00:15:08,459
require authentication open to the

379
00:15:08,459 --> 00:15:10,920
Internet so in this case the gcp bucket

380
00:15:10,920 --> 00:15:13,440
had incorrect permissions that allowed

381
00:15:13,440 --> 00:15:16,620
the data to be publicly readable

382
00:15:16,620 --> 00:15:18,899
also I think it's worth mentioning that

383
00:15:18,899 --> 00:15:22,019
if you don't need to log certain data of

384
00:15:22,019 --> 00:15:24,360
your customers that's sensitive

385
00:15:24,360 --> 00:15:27,360
maybe don't you are making yourself

386
00:15:27,360 --> 00:15:30,060
liable if you are storing these this

387
00:15:30,060 --> 00:15:32,579
information and this gets misconfigured

388
00:15:32,579 --> 00:15:34,800
or gets leaked somehow if it's

389
00:15:34,800 --> 00:15:36,899
absolutely necessary for you to store

390
00:15:36,899 --> 00:15:39,420
this then at least make sure that this

391
00:15:39,420 --> 00:15:42,560
data is encrypted

392
00:15:44,339 --> 00:15:46,680
now for attack number five we're going

393
00:15:46,680 --> 00:15:48,959
to talk about attacker who is able to

394
00:15:48,959 --> 00:15:51,660
Pivot from a cloud environment to an

395
00:15:51,660 --> 00:15:54,360
on-premise resource and this is

396
00:15:54,360 --> 00:15:56,160
surprisingly easier than you would think

397
00:15:56,160 --> 00:15:59,339
much easier in fact than carrying a

398
00:15:59,339 --> 00:16:01,860
normal couch up a flight of stairs of an

399
00:16:01,860 --> 00:16:04,940
average Manhattan apartment

400
00:16:05,220 --> 00:16:08,100
and this attack all began with a

401
00:16:08,100 --> 00:16:10,139
russian-speaking cyber criminal group

402
00:16:10,139 --> 00:16:12,240
called Circus spider

403
00:16:12,240 --> 00:16:15,240
back in 2019 they released a ransomware

404
00:16:15,240 --> 00:16:17,220
variant called netwalker

405
00:16:17,220 --> 00:16:19,440
and they did what many cyber criminal

406
00:16:19,440 --> 00:16:22,680
groups have begun to do which is

407
00:16:22,680 --> 00:16:25,620
sell it in an as a service model so

408
00:16:25,620 --> 00:16:29,040
people can rent or use this malware for

409
00:16:29,040 --> 00:16:31,500
a fee or for a percentage of the profits

410
00:16:31,500 --> 00:16:34,860
and this kind of as a service model is

411
00:16:34,860 --> 00:16:36,720
becoming more and more popular

412
00:16:36,720 --> 00:16:39,420
now what networker actually does is it

413
00:16:39,420 --> 00:16:41,639
encrypts the files on the local system

414
00:16:41,639 --> 00:16:44,279
and then Maps Network shares and

415
00:16:44,279 --> 00:16:46,680
enumerates this the network for any

416
00:16:46,680 --> 00:16:48,959
additional shares attempting to access

417
00:16:48,959 --> 00:16:51,899
them using the tokens of the victims

418
00:16:51,899 --> 00:16:55,079
that are already logged into this system

419
00:16:55,079 --> 00:16:57,180
so in this way it can basically spread

420
00:16:57,180 --> 00:17:00,300
and infect as much of the system as it

421
00:17:00,300 --> 00:17:02,839
possibly can

422
00:17:03,240 --> 00:17:05,520
now equinix suffered an attack that

423
00:17:05,520 --> 00:17:08,220
utilized this ransomware variant

424
00:17:08,220 --> 00:17:10,980
officially they had a configuration

425
00:17:10,980 --> 00:17:13,980
management deviation which in one of

426
00:17:13,980 --> 00:17:15,720
their Cloud environments now what this

427
00:17:15,720 --> 00:17:17,880
most likely means is that somebody in

428
00:17:17,880 --> 00:17:21,059
the company maybe a developer spun up a

429
00:17:21,059 --> 00:17:22,799
cloud environment that was completely

430
00:17:22,799 --> 00:17:25,619
outside of the normal security policies

431
00:17:25,619 --> 00:17:29,100
and monitoring and so it was not

432
00:17:29,100 --> 00:17:32,160
configured correctly and this allowed an

433
00:17:32,160 --> 00:17:34,679
attacker to access this environment via

434
00:17:34,679 --> 00:17:36,299
RDP

435
00:17:36,299 --> 00:17:39,059
now once in there the attacker

436
00:17:39,059 --> 00:17:41,400
discovered an instance that had access

437
00:17:41,400 --> 00:17:44,520
to on-premise resources so in this way

438
00:17:44,520 --> 00:17:46,799
they were able to make that pivot from

439
00:17:46,799 --> 00:17:48,960
the cloud environment to equinix's

440
00:17:48,960 --> 00:17:52,440
on-prem where they infected many systems

441
00:17:52,440 --> 00:17:54,120
with ransomware

442
00:17:54,120 --> 00:17:56,100
now once they made it onto the

443
00:17:56,100 --> 00:17:58,500
on-premise system the security policies

444
00:17:58,500 --> 00:18:00,539
picked up on their presence and equinix

445
00:18:00,539 --> 00:18:03,059
was actually able to contain this attack

446
00:18:03,059 --> 00:18:05,220
additionally they had really good

447
00:18:05,220 --> 00:18:08,460
backups so they were able to restore all

448
00:18:08,460 --> 00:18:10,980
of this data from their own backups and

449
00:18:10,980 --> 00:18:13,260
not have to pay a ransom or kind of deal

450
00:18:13,260 --> 00:18:15,179
with it in any other way

451
00:18:15,179 --> 00:18:17,700
so nobody wants this kind of attack to

452
00:18:17,700 --> 00:18:20,100
happen to them obviously but if a

453
00:18:20,100 --> 00:18:21,720
ransomware attack does happen to you

454
00:18:21,720 --> 00:18:23,039
this is kind of the best possible

455
00:18:23,039 --> 00:18:24,780
outcome you're able to contain the

456
00:18:24,780 --> 00:18:26,520
attack and restore it from your own

457
00:18:26,520 --> 00:18:29,120
backups

458
00:18:29,880 --> 00:18:32,580
and I really just want to emphasize that

459
00:18:32,580 --> 00:18:35,400
you can't protect what you can't see if

460
00:18:35,400 --> 00:18:37,260
you don't know it's there how are you

461
00:18:37,260 --> 00:18:39,059
able how are you going to be able to

462
00:18:39,059 --> 00:18:40,860
make sure that it is secure

463
00:18:40,860 --> 00:18:43,440
and the cloud makes it really easy for

464
00:18:43,440 --> 00:18:46,140
us to spin up new resources and entire

465
00:18:46,140 --> 00:18:48,360
environments that's part of why we

466
00:18:48,360 --> 00:18:51,480
really love it but it does present Real

467
00:18:51,480 --> 00:18:54,240
security challenges if it happens in the

468
00:18:54,240 --> 00:18:56,960
cloud is it invisible to your security

469
00:18:56,960 --> 00:18:59,940
operations visibility in a lot of

470
00:18:59,940 --> 00:19:01,919
organizations Cloud environments are

471
00:19:01,919 --> 00:19:03,840
managed by devops or by a different

472
00:19:03,840 --> 00:19:06,299
group that's not I.T and that makes

473
00:19:06,299 --> 00:19:08,039
getting it integrated with these

474
00:19:08,039 --> 00:19:10,440
security policies and a sock pretty

475
00:19:10,440 --> 00:19:11,520
difficult

476
00:19:11,520 --> 00:19:14,100
and so in this case this instance that

477
00:19:14,100 --> 00:19:16,020
allowed the access to the on-premise

478
00:19:16,020 --> 00:19:18,720
environment was unknown to security it

479
00:19:18,720 --> 00:19:22,799
wasn't monitored or configured correctly

480
00:19:22,799 --> 00:19:24,480
and the impact here is that

481
00:19:24,480 --> 00:19:28,200
approximately 1800 systems in Equinox

482
00:19:28,200 --> 00:19:31,020
ended up having ransomware installed on

483
00:19:31,020 --> 00:19:31,860
them

484
00:19:31,860 --> 00:19:34,559
but again they had good backups so they

485
00:19:34,559 --> 00:19:36,900
didn't lose any data and there wasn't

486
00:19:36,900 --> 00:19:39,539
any customer data leaked so that's all

487
00:19:39,539 --> 00:19:41,820
pretty good

488
00:19:41,820 --> 00:19:45,299
now this incident came down to a lack of

489
00:19:45,299 --> 00:19:46,320
visibility

490
00:19:46,320 --> 00:19:49,200
specifically security visibility into

491
00:19:49,200 --> 00:19:50,640
what was happening in in Cloud

492
00:19:50,640 --> 00:19:53,220
environments and so you should have an

493
00:19:53,220 --> 00:19:56,280
inventory of cloud assets for for all of

494
00:19:56,280 --> 00:19:57,960
your assets and make sure that security

495
00:19:57,960 --> 00:20:00,419
policies are being applied to all

496
00:20:00,419 --> 00:20:01,500
systems

497
00:20:01,500 --> 00:20:05,220
these unmanaged and Shadow systems are

498
00:20:05,220 --> 00:20:09,600
commonly the start of breaches and so

499
00:20:09,600 --> 00:20:11,700
also keep in mind that even if you are

500
00:20:11,700 --> 00:20:13,860
in the cloud intentionally your

501
00:20:13,860 --> 00:20:16,320
on-premise assets should be in the scope

502
00:20:16,320 --> 00:20:19,500
of discussion of how to protect yourself

503
00:20:19,500 --> 00:20:22,200
um cloud and on-premise are not

504
00:20:22,200 --> 00:20:25,080
separated isolated use cases they are

505
00:20:25,080 --> 00:20:27,059
almost certainly connected and therefore

506
00:20:27,059 --> 00:20:30,000
can be abused

507
00:20:30,000 --> 00:20:31,799
and this one's kind of simple but I

508
00:20:31,799 --> 00:20:33,179
think it's worth mentioning

509
00:20:33,179 --> 00:20:35,820
backups backup so you don't play it but

510
00:20:35,820 --> 00:20:38,100
even kind of Rhymes or the same word at

511
00:20:38,100 --> 00:20:39,299
the end

512
00:20:39,299 --> 00:20:42,059
um I really am a firm believer of

513
00:20:42,059 --> 00:20:44,820
prepare for the worst case scenario and

514
00:20:44,820 --> 00:20:48,120
if it does happen at least then you have

515
00:20:48,120 --> 00:20:51,918
that already kind of taken care of

516
00:20:54,720 --> 00:20:57,299
now attack number six

517
00:20:57,299 --> 00:20:59,880
really focuses on access without

518
00:20:59,880 --> 00:21:01,440
Authentication

519
00:21:01,440 --> 00:21:04,200
and when we think of how we authenticate

520
00:21:04,200 --> 00:21:07,440
into somebody's home we usually use a

521
00:21:07,440 --> 00:21:10,559
key right we open a door with a key or

522
00:21:10,559 --> 00:21:12,840
maybe we'll ring a doorbell and wait for

523
00:21:12,840 --> 00:21:15,419
somebody to let us in but Leslie here

524
00:21:15,419 --> 00:21:18,000
completely circumvented all of that and

525
00:21:18,000 --> 00:21:19,679
found a different way into this house

526
00:21:19,679 --> 00:21:21,600
that didn't require any authentication

527
00:21:21,600 --> 00:21:22,860
at all

528
00:21:22,860 --> 00:21:24,960
and that's something that we want to

529
00:21:24,960 --> 00:21:26,100
avoid

530
00:21:26,100 --> 00:21:28,020
just allowing access without

531
00:21:28,020 --> 00:21:29,940
Authentication

532
00:21:29,940 --> 00:21:33,059
and security researchers discovered that

533
00:21:33,059 --> 00:21:35,520
some of peloton's web-based API

534
00:21:35,520 --> 00:21:38,039
endpoints had a flaw which allowed

535
00:21:38,039 --> 00:21:41,159
access without any authentication so

536
00:21:41,159 --> 00:21:43,760
unauthenticated users could then access

537
00:21:43,760 --> 00:21:47,460
Peloton user data including users who

538
00:21:47,460 --> 00:21:51,440
had set their profiles to private

539
00:21:52,500 --> 00:21:54,780
now once this was reported to them they

540
00:21:54,780 --> 00:21:57,840
got rid of that unauthenticated part and

541
00:21:57,840 --> 00:22:00,179
made it so that any authenticated user

542
00:22:00,179 --> 00:22:03,780
could then access this API endpoint

543
00:22:03,780 --> 00:22:07,380
but that wasn't a real fix because it's

544
00:22:07,380 --> 00:22:09,840
free to create an account and become an

545
00:22:09,840 --> 00:22:12,960
authenticated user as of today there are

546
00:22:12,960 --> 00:22:15,480
over three million Peloton authenticated

547
00:22:15,480 --> 00:22:18,480
users so it was reported again kind of

548
00:22:18,480 --> 00:22:20,520
like this was not you know actually

549
00:22:20,520 --> 00:22:23,179
fixing the problem and then Peloton

550
00:22:23,179 --> 00:22:27,240
fixed the actual vulnerability here

551
00:22:27,240 --> 00:22:29,280
now the impact here is that information

552
00:22:29,280 --> 00:22:31,860
could have been leaked but because this

553
00:22:31,860 --> 00:22:33,720
was found by researchers who properly

554
00:22:33,720 --> 00:22:35,700
reported it it doesn't seem like there

555
00:22:35,700 --> 00:22:37,500
was any public leaks of this data

556
00:22:37,500 --> 00:22:39,600
however this doesn't mean that somebody

557
00:22:39,600 --> 00:22:41,640
didn't collect this information for

558
00:22:41,640 --> 00:22:44,159
their own private use this is the kind

559
00:22:44,159 --> 00:22:46,200
of information that again could be

560
00:22:46,200 --> 00:22:48,659
useful for phishing campaigns or fraud

561
00:22:48,659 --> 00:22:51,620
campaigns in the future

562
00:22:52,080 --> 00:22:54,299
so a takeaway here is that you should

563
00:22:54,299 --> 00:22:57,179
have secure coding practices built into

564
00:22:57,179 --> 00:22:59,460
the development process this kind of

565
00:22:59,460 --> 00:23:01,620
vulnerability could probably have been

566
00:23:01,620 --> 00:23:04,320
discovered by an application penetration

567
00:23:04,320 --> 00:23:07,140
test by a third party

568
00:23:07,140 --> 00:23:09,419
or you can also consider API security

569
00:23:09,419 --> 00:23:12,059
tools in order to detect an attacker

570
00:23:12,059 --> 00:23:14,700
abusing the calls or trying to pull down

571
00:23:14,700 --> 00:23:18,200
large amounts of data through them

572
00:23:19,799 --> 00:23:21,780
now for the very last attack that I'm

573
00:23:21,780 --> 00:23:23,360
going to talk about

574
00:23:23,360 --> 00:23:26,820
I love the example of using a recipe

575
00:23:26,820 --> 00:23:30,500
that is inherently wrong or flawed

576
00:23:30,500 --> 00:23:33,780
when you're cooking for your friends for

577
00:23:33,780 --> 00:23:35,640
Thanksgiving or whatever you're

578
00:23:35,640 --> 00:23:37,080
expecting that the recipe that you're

579
00:23:37,080 --> 00:23:39,240
working off the base of what you're

580
00:23:39,240 --> 00:23:42,360
doing in the kitchen is Right everything

581
00:23:42,360 --> 00:23:44,039
that you're doing is kind of built off

582
00:23:44,039 --> 00:23:47,100
of this base and if this base the recipe

583
00:23:47,100 --> 00:23:49,740
itself is incorrect you'll end up making

584
00:23:49,740 --> 00:23:52,080
a monstrosity that will make it so that

585
00:23:52,080 --> 00:23:54,260
you never get asked to cook ever again

586
00:23:54,260 --> 00:23:57,000
and maybe won't even get an invite back

587
00:23:57,000 --> 00:23:59,700
to a Thanksgiving meal but when we think

588
00:23:59,700 --> 00:24:02,760
about that in terms of security I really

589
00:24:02,760 --> 00:24:05,340
think that it relates to supply chain

590
00:24:05,340 --> 00:24:07,799
compromises of Open Source software

591
00:24:07,799 --> 00:24:09,960
because similarly open source software

592
00:24:09,960 --> 00:24:12,059
is like the base that you are building

593
00:24:12,059 --> 00:24:13,919
your applications off of and if there's

594
00:24:13,919 --> 00:24:15,960
something wrong with it that can kind of

595
00:24:15,960 --> 00:24:17,940
trickle down and cause problems down the

596
00:24:17,940 --> 00:24:19,020
line

597
00:24:19,020 --> 00:24:22,080
so pytorch which is a very popular and

598
00:24:22,080 --> 00:24:23,940
widely used python-based machine

599
00:24:23,940 --> 00:24:26,640
learning library suffered an attack in

600
00:24:26,640 --> 00:24:29,100
December of 2022.

601
00:24:29,100 --> 00:24:31,799
it turns out that pytorch Imports some

602
00:24:31,799 --> 00:24:34,200
of their dependencies from python

603
00:24:34,200 --> 00:24:37,860
package index or Pi Pi as I was told it

604
00:24:37,860 --> 00:24:39,840
was called somebody might be pulling my

605
00:24:39,840 --> 00:24:43,200
chain but I think that's right and the

606
00:24:43,200 --> 00:24:45,480
problem was that Pi torch assumed that

607
00:24:45,480 --> 00:24:48,480
whatever is the most popular one

608
00:24:48,480 --> 00:24:50,580
is the one that they should include as a

609
00:24:50,580 --> 00:24:51,720
dependency

610
00:24:51,720 --> 00:24:55,080
so an attacker uploaded a poison pipei

611
00:24:55,080 --> 00:24:57,240
dependency that hid under the real

612
00:24:57,240 --> 00:25:00,059
dependency name torch Triton and this

613
00:25:00,059 --> 00:25:02,580
Trojan version behaves exactly the same

614
00:25:02,580 --> 00:25:05,280
the code was all the same except it had

615
00:25:05,280 --> 00:25:07,860
additional code that would exfiltrate

616
00:25:07,860 --> 00:25:10,620
sensitive information to a command and

617
00:25:10,620 --> 00:25:13,500
control server now this issue persisted

618
00:25:13,500 --> 00:25:15,900
for about five days but thankfully never

619
00:25:15,900 --> 00:25:17,880
made it into the stable version of

620
00:25:17,880 --> 00:25:20,520
pytorch

621
00:25:20,520 --> 00:25:22,740
and this happened because of the blind

622
00:25:22,740 --> 00:25:25,860
Trust of the repository index for a

623
00:25:25,860 --> 00:25:28,320
dependency there's a lot of layers of

624
00:25:28,320 --> 00:25:30,059
dependencies in modern applications

625
00:25:30,059 --> 00:25:32,460
especially ones that are open source

626
00:25:32,460 --> 00:25:34,500
based that there's a lot of vulnerable

627
00:25:34,500 --> 00:25:38,340
points and and the attacker here abused

628
00:25:38,340 --> 00:25:40,320
this trust relationship in order to get

629
00:25:40,320 --> 00:25:43,559
their own code into pytorch so

630
00:25:43,559 --> 00:25:47,279
blind trust maybe not the best

631
00:25:47,279 --> 00:25:49,140
and the impact here was that this

632
00:25:49,140 --> 00:25:51,120
malicious version of pytorch was

633
00:25:51,120 --> 00:25:54,179
downloaded over 2 300 times in this

634
00:25:54,179 --> 00:25:56,159
five-day period that is not an

635
00:25:56,159 --> 00:25:59,039
insignificant number and we have yet to

636
00:25:59,039 --> 00:26:01,440
know what the true implications of this

637
00:26:01,440 --> 00:26:03,779
was because some of the data that was

638
00:26:03,779 --> 00:26:06,020
exfiltrated included compromised

639
00:26:06,020 --> 00:26:09,059
included credentials and access keys and

640
00:26:09,059 --> 00:26:10,980
as I previously mentioned those are

641
00:26:10,980 --> 00:26:12,720
great starting points for further

642
00:26:12,720 --> 00:26:15,260
attacks

643
00:26:16,740 --> 00:26:19,559
so takeaways

644
00:26:19,559 --> 00:26:23,039
any code that isn't totally under your

645
00:26:23,039 --> 00:26:26,039
Project's control runs some kind of risk

646
00:26:26,039 --> 00:26:28,200
and this isn't just limited to open

647
00:26:28,200 --> 00:26:30,179
source software commercial close

648
00:26:30,179 --> 00:26:32,039
software is also vulnerable to this

649
00:26:32,039 --> 00:26:34,799
think of solarwinds again

650
00:26:34,799 --> 00:26:37,140
so you should trust the package enough

651
00:26:37,140 --> 00:26:40,140
to use it only if you can verify that

652
00:26:40,140 --> 00:26:42,900
it's behaving how it should be and in

653
00:26:42,900 --> 00:26:44,700
order to do this you need stringent

654
00:26:44,700 --> 00:26:46,559
security testing

655
00:26:46,559 --> 00:26:49,080
you can use some kind of static analysis

656
00:26:49,080 --> 00:26:51,419
to determine if there's unwanted code

657
00:26:51,419 --> 00:26:54,600
but the these tools can be fooled so

658
00:26:54,600 --> 00:26:57,299
what is more useful is dynamic or

659
00:26:57,299 --> 00:26:59,340
runtime analysis that actually looks at

660
00:26:59,340 --> 00:27:01,919
the behavior of the application

661
00:27:01,919 --> 00:27:04,620
in this case we could have detected the

662
00:27:04,620 --> 00:27:06,720
communication to the command and control

663
00:27:06,720 --> 00:27:09,260
server

664
00:27:09,419 --> 00:27:11,039
and the best way of doing this

665
00:27:11,039 --> 00:27:13,860
verification or where you want to put in

666
00:27:13,860 --> 00:27:16,620
the security testing is as close to the

667
00:27:16,620 --> 00:27:19,020
developer push as possible this is

668
00:27:19,020 --> 00:27:21,120
because the earlier you discover an

669
00:27:21,120 --> 00:27:25,340
issue the easier it is for you to fix it

670
00:27:26,460 --> 00:27:29,820
so to wrap all of this up

671
00:27:29,820 --> 00:27:31,679
some high level trends that we can

672
00:27:31,679 --> 00:27:33,000
expect

673
00:27:33,000 --> 00:27:36,659
crypto mining will continue to rise in

674
00:27:36,659 --> 00:27:38,340
popularity this might seem

675
00:27:38,340 --> 00:27:39,539
counterintuitive lots of

676
00:27:39,539 --> 00:27:41,820
cryptocurrencies are decreasing in value

677
00:27:41,820 --> 00:27:45,059
as we speak right but it doesn't change

678
00:27:45,059 --> 00:27:47,940
the fact that these attacks are very low

679
00:27:47,940 --> 00:27:50,760
effort to execute and can reap really

680
00:27:50,760 --> 00:27:54,000
high rewards again it's a passive income

681
00:27:54,000 --> 00:27:56,100
kind of structure and I know that those

682
00:27:56,100 --> 00:27:58,380
are buzzwords now everyone's trying to

683
00:27:58,380 --> 00:27:59,940
find some way of making passive income

684
00:27:59,940 --> 00:28:02,880
but attackers have found it so we can

685
00:28:02,880 --> 00:28:04,799
only expect crypto mining to get more

686
00:28:04,799 --> 00:28:07,980
popular and we can expect the scale of

687
00:28:07,980 --> 00:28:12,720
attacks to rise if the actual uh value

688
00:28:12,720 --> 00:28:15,299
of the crypto coin is decreasing you

689
00:28:15,299 --> 00:28:17,279
need to mine more in order to make the

690
00:28:17,279 --> 00:28:18,779
same amount of money

691
00:28:18,779 --> 00:28:21,539
and this isn't just for crypto jacking

692
00:28:21,539 --> 00:28:24,120
or crypto mining attacks we're seeing

693
00:28:24,120 --> 00:28:26,520
that these cyber criminal groups are

694
00:28:26,520 --> 00:28:28,500
almost like businesses they're at that

695
00:28:28,500 --> 00:28:30,840
stage in the startup cycle where they're

696
00:28:30,840 --> 00:28:33,320
starting to scale up their operations

697
00:28:33,320 --> 00:28:36,240
and we can expect that for all types of

698
00:28:36,240 --> 00:28:38,720
attacks

699
00:28:39,659 --> 00:28:42,539
and I kind of wanted to just touch on

700
00:28:42,539 --> 00:28:45,059
again how the fact that these cyber

701
00:28:45,059 --> 00:28:48,120
criminal groups are able to do this as a

702
00:28:48,120 --> 00:28:50,279
service model for the malware that they

703
00:28:50,279 --> 00:28:52,740
create it makes Advanced attacks

704
00:28:52,740 --> 00:28:55,320
accessible to even those who aren't that

705
00:28:55,320 --> 00:28:56,820
technically savvy

706
00:28:56,820 --> 00:28:59,039
and this is part of that kind of scale

707
00:28:59,039 --> 00:29:01,400
that I was mentioning so we can expect

708
00:29:01,400 --> 00:29:03,779
that these attacks are going to become

709
00:29:03,779 --> 00:29:06,860
more and more commonplace

710
00:29:07,380 --> 00:29:10,200
and this one is pretty obvious but

711
00:29:10,200 --> 00:29:12,419
supply chain compromises can really have

712
00:29:12,419 --> 00:29:14,940
devastating effects and often when

713
00:29:14,940 --> 00:29:16,260
people talk about supply chain

714
00:29:16,260 --> 00:29:19,140
compromises we hear a lot about zero day

715
00:29:19,140 --> 00:29:21,659
vulnerabilities ones that attackers know

716
00:29:21,659 --> 00:29:23,820
about but haven't been disclosed

717
00:29:23,820 --> 00:29:25,980
publicly yet and while those are really

718
00:29:25,980 --> 00:29:29,039
scary and definitely worth noting I

719
00:29:29,039 --> 00:29:31,500
think it's more kind of terrifying that

720
00:29:31,500 --> 00:29:34,399
these publicly disclosed vulnerabilities

721
00:29:34,399 --> 00:29:37,860
are still being weaponized log4j went

722
00:29:37,860 --> 00:29:41,279
from announcement to being weaponized in

723
00:29:41,279 --> 00:29:43,980
less than a few hours and that kind of

724
00:29:43,980 --> 00:29:46,919
turnaround time is just way faster than

725
00:29:46,919 --> 00:29:49,440
most vendors can provide a patch for

726
00:29:49,440 --> 00:29:52,260
and so I think that that's kind of

727
00:29:52,260 --> 00:29:55,200
really worth noting and all of this to

728
00:29:55,200 --> 00:29:57,419
say instead of being all doom and gloom

729
00:29:57,419 --> 00:29:59,640
there are ways to cope

730
00:29:59,640 --> 00:30:02,220
and one really important way that I've

731
00:30:02,220 --> 00:30:05,159
hammered on a lot is having real-time

732
00:30:05,159 --> 00:30:07,919
visibility and the reason why this is so

733
00:30:07,919 --> 00:30:10,200
important is because you can't always

734
00:30:10,200 --> 00:30:13,440
detect the compromise itself but often

735
00:30:13,440 --> 00:30:16,020
you can detect the signs of a compromise

736
00:30:16,020 --> 00:30:17,700
in your environment

737
00:30:17,700 --> 00:30:20,760
when attackers are have compromised an

738
00:30:20,760 --> 00:30:22,919
environment they typically are doing the

739
00:30:22,919 --> 00:30:25,380
same kinds of actions so you should know

740
00:30:25,380 --> 00:30:27,539
what to look for and be notified about

741
00:30:27,539 --> 00:30:30,500
in real time

742
00:30:34,100 --> 00:30:36,720
and another thing I'm trying to hammer

743
00:30:36,720 --> 00:30:39,960
on especially is least permissive for

744
00:30:39,960 --> 00:30:41,940
too long we have been like Oprah to

745
00:30:41,940 --> 00:30:44,159
developers you get a wild card you get a

746
00:30:44,159 --> 00:30:46,140
wild card you get a wild card that is

747
00:30:46,140 --> 00:30:49,500
not a sustainable security model you are

748
00:30:49,500 --> 00:30:51,840
sacrificing security for operational

749
00:30:51,840 --> 00:30:55,140
speed and that kind of compromise that

750
00:30:55,140 --> 00:30:57,600
you're making might come back to haunt

751
00:30:57,600 --> 00:31:00,899
you in the future I really urge you to

752
00:31:00,899 --> 00:31:03,059
reconsider your organization's security

753
00:31:03,059 --> 00:31:06,000
priorities and see if you can make least

754
00:31:06,000 --> 00:31:08,340
permissive one of your top goals for

755
00:31:08,340 --> 00:31:11,460
your organization because again if you

756
00:31:11,460 --> 00:31:13,559
don't if attackers are able to enter

757
00:31:13,559 --> 00:31:16,020
your system through various compromising

758
00:31:16,020 --> 00:31:18,840
methods if you have least permissive

759
00:31:18,840 --> 00:31:21,539
then you've basically given them just a

760
00:31:21,539 --> 00:31:24,360
key to access whatever they want

761
00:31:24,360 --> 00:31:25,860
foreign

762
00:31:25,860 --> 00:31:27,980
and then this is kind of

763
00:31:27,980 --> 00:31:31,020
self-explanatory but prepare for the

764
00:31:31,020 --> 00:31:32,820
worst case scenario part of that

765
00:31:32,820 --> 00:31:35,700
includes backups it includes phishing

766
00:31:35,700 --> 00:31:38,179
training for all of your employees

767
00:31:38,179 --> 00:31:41,039
just having that mindset of the worst

768
00:31:41,039 --> 00:31:43,320
will happen may not make you the most

769
00:31:43,320 --> 00:31:45,059
popular person but it will make you

770
00:31:45,059 --> 00:31:47,600
prepared

771
00:31:47,940 --> 00:31:50,880
that's about it thank you so much for

772
00:31:50,880 --> 00:31:53,039
joining this talk you can come by the

773
00:31:53,039 --> 00:31:55,039
systic Booth if you have any questions

774
00:31:55,039 --> 00:31:59,460
if you want to learn more or I guess

775
00:31:59,460 --> 00:32:01,740
there's a survey here you can go ahead

776
00:32:01,740 --> 00:32:04,440
and do that and at this point I'll see

777
00:32:04,440 --> 00:32:05,640
if there's any questions from the

778
00:32:05,640 --> 00:32:07,940
audience

779
00:32:09,720 --> 00:32:12,659
all right well thank you again for

780
00:32:12,659 --> 00:32:14,580
joining this late session and hope that

781
00:32:14,580 --> 00:32:16,020
it was useful and that you all learned

782
00:32:16,020 --> 00:32:18,090
something have a great rest of your day

783
00:32:18,090 --> 00:32:24,149
[Applause]

