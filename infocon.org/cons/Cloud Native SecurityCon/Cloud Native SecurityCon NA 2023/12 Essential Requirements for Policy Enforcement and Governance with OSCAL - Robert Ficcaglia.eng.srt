1
00:00:00,060 --> 00:00:02,700
my name is Robert fakalia I'm here to

2
00:00:02,700 --> 00:00:04,640
talk about policy governance with oscow

3
00:00:04,640 --> 00:00:08,220
the first pro tip I realized as I walked

4
00:00:08,220 --> 00:00:10,920
to the door long titles don't fit well

5
00:00:10,920 --> 00:00:13,920
on these on these boards so I've

6
00:00:13,920 --> 00:00:16,199
shortened it just a little bit about who

7
00:00:16,199 --> 00:00:18,359
I am I'm the co-chair of the kubernetes

8
00:00:18,359 --> 00:00:21,720
policy work group I've been working for

9
00:00:21,720 --> 00:00:22,800
the last

10
00:00:22,800 --> 00:00:25,920
several years with the cncf tag and the

11
00:00:25,920 --> 00:00:27,539
kubernetes 86 security

12
00:00:27,539 --> 00:00:31,080
I do have a day job and in that job I

13
00:00:31,080 --> 00:00:33,899
help companies through their sock 2

14
00:00:33,899 --> 00:00:36,660
HIPAA Audits and things like fisma

15
00:00:36,660 --> 00:00:39,600
sieges fedramp and in that Journey

16
00:00:39,600 --> 00:00:41,399
that's where I encountered something

17
00:00:41,399 --> 00:00:44,160
we'll be talking about today oscow and

18
00:00:44,160 --> 00:00:46,739
then in my copious free time I do play a

19
00:00:46,739 --> 00:00:48,539
lot with machine learning and especially

20
00:00:48,539 --> 00:00:50,879
with graph databases and you'll see some

21
00:00:50,879 --> 00:00:52,020
of those touch points in the

22
00:00:52,020 --> 00:00:53,940
presentation

23
00:00:53,940 --> 00:00:56,039
um just a quick pitch for the policy

24
00:00:56,039 --> 00:01:00,719
work group itself we started 2019 we've

25
00:01:00,719 --> 00:01:03,059
been focused on what we like to call big

26
00:01:03,059 --> 00:01:06,600
p policy and Little P policy so big p is

27
00:01:06,600 --> 00:01:08,340
kind of the human readable human

28
00:01:08,340 --> 00:01:11,520
understandable policy Concepts and

29
00:01:11,520 --> 00:01:15,060
Little P policy is that configuration

30
00:01:15,060 --> 00:01:17,340
policy more if you're in the devops and

31
00:01:17,340 --> 00:01:19,920
working in manifests and kubernetes

32
00:01:19,920 --> 00:01:21,420
these are the types of policies you're

33
00:01:21,420 --> 00:01:22,860
probably referring to

34
00:01:22,860 --> 00:01:26,220
uh we have created a crd and we're

35
00:01:26,220 --> 00:01:28,020
working on a cap for that that is

36
00:01:28,020 --> 00:01:29,700
aligned with oscow and I'll get into

37
00:01:29,700 --> 00:01:31,380
what Oscar is for those of you who don't

38
00:01:31,380 --> 00:01:32,159
know

39
00:01:32,159 --> 00:01:34,460
and that helps standardize the output

40
00:01:34,460 --> 00:01:37,680
our crd and cab is to help standardize

41
00:01:37,680 --> 00:01:40,380
the output of various configuration and

42
00:01:40,380 --> 00:01:43,380
policy checking tools and policy policy

43
00:01:43,380 --> 00:01:45,180
enforcement engines so you can get a

44
00:01:45,180 --> 00:01:48,240
consistent aggregation data structure

45
00:01:48,240 --> 00:01:50,280
we've done several white papers working

46
00:01:50,280 --> 00:01:51,899
on a governance white paper and some of

47
00:01:51,899 --> 00:01:53,040
the folks in the room I know are

48
00:01:53,040 --> 00:01:55,439
contributing to that and there's been

49
00:01:55,439 --> 00:01:57,720
some open source dashboards and adapters

50
00:01:57,720 --> 00:01:59,280
for the various

51
00:01:59,280 --> 00:02:02,220
scanners and and policy Checkers so more

52
00:02:02,220 --> 00:02:05,280
to come we are working as best we can

53
00:02:05,280 --> 00:02:07,680
with nist and trying to do more with

54
00:02:07,680 --> 00:02:10,139
oscow in kubernetes and provide real

55
00:02:10,139 --> 00:02:14,220
world examples and of course many of you

56
00:02:14,220 --> 00:02:15,959
might be aware of a common expression

57
00:02:15,959 --> 00:02:18,959
language cap that was recently I think

58
00:02:18,959 --> 00:02:21,720
it's Alpha maybe it's beta anyway it's a

59
00:02:21,720 --> 00:02:25,200
a new expression language for admission

60
00:02:25,200 --> 00:02:27,420
control in kubernetes so we're

61
00:02:27,420 --> 00:02:30,060
definitely trying to drill down on what

62
00:02:30,060 --> 00:02:32,160
we can recommend around using that best

63
00:02:32,160 --> 00:02:34,440
practices patterns Etc

64
00:02:34,440 --> 00:02:37,140
so let's jump into this talk though so

65
00:02:37,140 --> 00:02:38,640
all of you are probably familiar if

66
00:02:38,640 --> 00:02:40,379
you're at this talk with basic policy

67
00:02:40,379 --> 00:02:42,300
questions so these are questions that

68
00:02:42,300 --> 00:02:43,920
you probably deal with especially

69
00:02:43,920 --> 00:02:46,200
managing a team or interacting with

70
00:02:46,200 --> 00:02:48,480
Auditors or compliance subject matter

71
00:02:48,480 --> 00:02:50,280
experts these are the type of questions

72
00:02:50,280 --> 00:02:52,379
you might get at that big p policy level

73
00:02:52,379 --> 00:02:54,660
about your kubernetes cluster or even

74
00:02:54,660 --> 00:02:57,959
your infrastructure as code or

75
00:02:57,959 --> 00:03:00,900
infrastructure broadly I would like to

76
00:03:00,900 --> 00:03:02,280
highlight the last point because I hear

77
00:03:02,280 --> 00:03:03,900
this even most recently on a call today

78
00:03:03,900 --> 00:03:06,180
with a bunch of agency folks a bunch of

79
00:03:06,180 --> 00:03:08,220
audit folks you know there's there's

80
00:03:08,220 --> 00:03:11,580
this lack of trust in what they see what

81
00:03:11,580 --> 00:03:13,980
the data they're presented with is the

82
00:03:13,980 --> 00:03:16,560
documentation and so you know this is a

83
00:03:16,560 --> 00:03:19,260
foundational concern for how can you

84
00:03:19,260 --> 00:03:21,959
build a governance program around your

85
00:03:21,959 --> 00:03:23,819
policies and controls which we'll get

86
00:03:23,819 --> 00:03:26,819
into and build that trust so that they

87
00:03:26,819 --> 00:03:29,640
can trust how you're presenting the

88
00:03:29,640 --> 00:03:31,500
system to the auditor how the auditor

89
00:03:31,500 --> 00:03:33,300
can trust that you're giving them the

90
00:03:33,300 --> 00:03:35,159
correct information and vice versa

91
00:03:35,159 --> 00:03:37,260
uh at the at the lower level the

92
00:03:37,260 --> 00:03:38,519
kubernetes level

93
00:03:38,519 --> 00:03:41,700
those configuration policies are you

94
00:03:41,700 --> 00:03:43,080
know where you see a lot of the tooling

95
00:03:43,080 --> 00:03:44,159
that you've probably seen at the

96
00:03:44,159 --> 00:03:46,620
conference uh you're talking about you

97
00:03:46,620 --> 00:03:48,780
know checking admission control you're

98
00:03:48,780 --> 00:03:50,640
checking configurations against

99
00:03:50,640 --> 00:03:53,459
baselines like CIS benchmarks you're

100
00:03:53,459 --> 00:03:55,080
checking you know resource limits

101
00:03:55,080 --> 00:03:57,060
perhaps you're even looking at Cost

102
00:03:57,060 --> 00:03:59,940
controls all expressed at the you know

103
00:03:59,940 --> 00:04:02,280
kubernetes manifest level in some way or

104
00:04:02,280 --> 00:04:05,700
form or you know operators and other

105
00:04:05,700 --> 00:04:08,760
ways to to automate that uh you might be

106
00:04:08,760 --> 00:04:09,900
interested in you know what your

107
00:04:09,900 --> 00:04:12,299
workloads are doing in Aggregate and how

108
00:04:12,299 --> 00:04:13,439
you're isolating those how you're

109
00:04:13,439 --> 00:04:15,540
defining Network policies around those

110
00:04:15,540 --> 00:04:18,478
you may be interested in verifying the

111
00:04:18,478 --> 00:04:20,579
identity and contents of those workload

112
00:04:20,579 --> 00:04:22,620
images so these are the the policy

113
00:04:22,620 --> 00:04:25,680
Little P policy uh issues that we'll be

114
00:04:25,680 --> 00:04:28,139
wrestling with and then again I'll call

115
00:04:28,139 --> 00:04:31,080
it that last as as kubernetes itself is

116
00:04:31,080 --> 00:04:32,639
deploying kubernetes and deploying

117
00:04:32,639 --> 00:04:34,620
infrastructure as code and is becoming

118
00:04:34,620 --> 00:04:36,660
kind of a meta provisioning or meta

119
00:04:36,660 --> 00:04:38,880
admin entity there's that kind of

120
00:04:38,880 --> 00:04:41,400
bootstrapping process and then kind of

121
00:04:41,400 --> 00:04:45,840
the the ability to meta manage things as

122
00:04:45,840 --> 00:04:47,880
kubernetes itself becomes the control

123
00:04:47,880 --> 00:04:51,120
plan for other control planes

124
00:04:51,120 --> 00:04:53,759
um my basic view of how I look at the

125
00:04:53,759 --> 00:04:55,620
the model here is we're going to stick

126
00:04:55,620 --> 00:04:58,080
to that declarative configuration idea

127
00:04:58,080 --> 00:04:59,580
that kubernetes brought to the Forefront

128
00:04:59,580 --> 00:05:01,860
wasn't the first but but as certainly

129
00:05:01,860 --> 00:05:05,400
arguably been the most successful and I

130
00:05:05,400 --> 00:05:07,979
apply that in in the realm of compliance

131
00:05:07,979 --> 00:05:10,440
by comparing what you might be able to

132
00:05:10,440 --> 00:05:12,300
do with Git Ops and what we what I have

133
00:05:12,300 --> 00:05:15,180
seen done with githubs versus what a

134
00:05:15,180 --> 00:05:17,580
traditional GRC that is is the de facto

135
00:05:17,580 --> 00:05:21,000
reality today so I'll talk a little bit

136
00:05:21,000 --> 00:05:22,979
more about what that future State might

137
00:05:22,979 --> 00:05:24,120
look like

138
00:05:24,120 --> 00:05:27,060
so a obligatory slide on what oscow is

139
00:05:27,060 --> 00:05:29,039
if you if you're here you might know a

140
00:05:29,039 --> 00:05:31,639
little bit but Oscar is an initiative

141
00:05:31,639 --> 00:05:34,860
from nist they've been developing a

142
00:05:34,860 --> 00:05:36,800
standardized schema for expressing

143
00:05:36,800 --> 00:05:40,199
controls so these are configuration

144
00:05:40,199 --> 00:05:41,960
checks or

145
00:05:41,960 --> 00:05:44,639
requirements at the framework level for

146
00:05:44,639 --> 00:05:47,940
what you must do as a system owner or a

147
00:05:47,940 --> 00:05:50,400
system implementer to make sure that you

148
00:05:50,400 --> 00:05:52,740
conform with something like nist 853

149
00:05:52,740 --> 00:05:56,280
it's not necessarily specific to nist

150
00:05:56,280 --> 00:05:58,560
853 or any particular compliance

151
00:05:58,560 --> 00:06:00,840
framework but they they are a niche so

152
00:06:00,840 --> 00:06:03,240
they started with that and it has a

153
00:06:03,240 --> 00:06:05,220
broad Acceptance in the U.S federal

154
00:06:05,220 --> 00:06:09,180
government and even elsewhere in in

155
00:06:09,180 --> 00:06:10,979
healthcare High trust is also based on

156
00:06:10,979 --> 00:06:13,320
this inter53 so it's a good place for

157
00:06:13,320 --> 00:06:15,060
them to have started and they

158
00:06:15,060 --> 00:06:17,039
essentially layer on different schema

159
00:06:17,039 --> 00:06:19,860
models a catalog of all the controls

160
00:06:19,860 --> 00:06:21,539
that you might need to apply to your

161
00:06:21,539 --> 00:06:23,699
system a profile we'll talk about what

162
00:06:23,699 --> 00:06:26,220
that is a component model is kind of the

163
00:06:26,220 --> 00:06:28,560
functional things in your system the the

164
00:06:28,560 --> 00:06:31,979
elements the the subsystems you have to

165
00:06:31,979 --> 00:06:34,500
coalesce all this into a system security

166
00:06:34,500 --> 00:06:38,819
plan now and and today before things are

167
00:06:38,819 --> 00:06:41,280
are all git Ops and automated the system

168
00:06:41,280 --> 00:06:43,020
security plan might be a thousand page

169
00:06:43,020 --> 00:06:45,780
Word document that expresses all of the

170
00:06:45,780 --> 00:06:48,780
diagrams and all the controls that you

171
00:06:48,780 --> 00:06:50,520
have collected from your catalog and

172
00:06:50,520 --> 00:06:52,919
your profile and you know verbose human

173
00:06:52,919 --> 00:06:55,319
descriptions of how all of those

174
00:06:55,319 --> 00:06:56,940
controls are implemented referencing

175
00:06:56,940 --> 00:06:59,039
other documents referencing technical

176
00:06:59,039 --> 00:07:02,639
specs referencing things that only the

177
00:07:02,639 --> 00:07:03,960
subject matter expert might be able to

178
00:07:03,960 --> 00:07:05,460
express

179
00:07:05,460 --> 00:07:07,319
um so one of the goals is to put that in

180
00:07:07,319 --> 00:07:10,039
machine readable format and then allow

181
00:07:10,039 --> 00:07:11,940
organizations to exchange that

182
00:07:11,940 --> 00:07:14,819
internally with Auditors reuse that

183
00:07:14,819 --> 00:07:16,440
system security plan to get

184
00:07:16,440 --> 00:07:19,620
authorizations to deploy a system

185
00:07:19,620 --> 00:07:22,139
and then quickly just Auditors have to

186
00:07:22,139 --> 00:07:23,280
be able to assess this so you need an

187
00:07:23,280 --> 00:07:25,380
assessment plan and then after you've

188
00:07:25,380 --> 00:07:27,840
scanned things you're producing an

189
00:07:27,840 --> 00:07:29,639
assessment result essentially a report

190
00:07:29,639 --> 00:07:32,280
and then you'd have to track track your

191
00:07:32,280 --> 00:07:34,199
risks so they have a plan of action

192
00:07:34,199 --> 00:07:36,240
Milestone so those of you familiar with

193
00:07:36,240 --> 00:07:39,780
the government-led kanman activities and

194
00:07:39,780 --> 00:07:42,900
know and love poems and managing those

195
00:07:42,900 --> 00:07:46,199
risk logs it just the every ASCO file

196
00:07:46,199 --> 00:07:48,720
has a hierarchical

197
00:07:48,720 --> 00:07:52,139
a set of elements lots of linking across

198
00:07:52,139 --> 00:07:54,300
different elements and they have a

199
00:07:54,300 --> 00:07:57,720
universal unique ID that is essentially

200
00:07:57,720 --> 00:08:01,740
the the identifier that you can link

201
00:08:01,740 --> 00:08:03,720
across components too

202
00:08:03,720 --> 00:08:06,060
and you can add various supplemental

203
00:08:06,060 --> 00:08:07,940
router in the back manner

204
00:08:07,940 --> 00:08:10,620
so when you kind of merge kubernetes

205
00:08:10,620 --> 00:08:13,620
policy both kind of the big p and Little

206
00:08:13,620 --> 00:08:16,440
P policy with Oscar you you get

207
00:08:16,440 --> 00:08:18,900
essentially a compliance's code if you

208
00:08:18,900 --> 00:08:20,520
can express

209
00:08:20,520 --> 00:08:23,039
your system in a machine readable oscow

210
00:08:23,039 --> 00:08:25,800
form and you can merge that we'll talk

211
00:08:25,800 --> 00:08:27,960
about various ways merge that in with

212
00:08:27,960 --> 00:08:31,139
your policy as code and all that is very

213
00:08:31,139 --> 00:08:34,320
traceable now you get compliances code

214
00:08:34,320 --> 00:08:35,820
and you have a governance structure that

215
00:08:35,820 --> 00:08:37,320
is standardized and reusable and

216
00:08:37,320 --> 00:08:40,440
shareable and auditable and just to call

217
00:08:40,440 --> 00:08:43,080
out you know the policy report CR that I

218
00:08:43,080 --> 00:08:44,940
mentioned earlier we align that with

219
00:08:44,940 --> 00:08:46,920
oscow and red hat and IBM contributed

220
00:08:46,920 --> 00:08:49,740
some code to you know extract from that

221
00:08:49,740 --> 00:08:53,160
an oscow assessment report those of you

222
00:08:53,160 --> 00:08:55,440
might be familiar with platform one out

223
00:08:55,440 --> 00:08:58,740
of the dod the extensively use oscow and

224
00:08:58,740 --> 00:09:00,839
kubernetes and they've got a lot of git

225
00:09:00,839 --> 00:09:05,160
lab examples of askal for various cncf

226
00:09:05,160 --> 00:09:08,640
or kubernetes related projects call out

227
00:09:08,640 --> 00:09:10,260
some of the folks from defense unicorns

228
00:09:10,260 --> 00:09:12,360
who are working on open source as well

229
00:09:12,360 --> 00:09:14,399
both with a tool they're they're

230
00:09:14,399 --> 00:09:16,019
building in the caverno open source

231
00:09:16,019 --> 00:09:20,279
engine and then myself and a number of

232
00:09:20,279 --> 00:09:23,399
the cncf projects are open sourcing more

233
00:09:23,399 --> 00:09:27,420
oscow and more tooling around oscow and

234
00:09:27,420 --> 00:09:29,100
we call that sledgehammer local

235
00:09:29,100 --> 00:09:31,019
education government Enterprise and

236
00:09:31,019 --> 00:09:33,300
health care so not necessarily specific

237
00:09:33,300 --> 00:09:36,000
to government but highly aligned and

238
00:09:36,000 --> 00:09:38,540
likeness we'll be focusing on this 853

239
00:09:38,540 --> 00:09:40,920
and I've got a link at the end of the

240
00:09:40,920 --> 00:09:42,060
slide to that for those who are

241
00:09:42,060 --> 00:09:43,560
interested

242
00:09:43,560 --> 00:09:45,899
um if you don't know why you would need

243
00:09:45,899 --> 00:09:48,320
to manage your policies

244
00:09:48,320 --> 00:09:51,720
then you may not have tried to run a

245
00:09:51,720 --> 00:09:54,839
kubernetes cluster under a compliance

246
00:09:54,839 --> 00:09:59,100
regime like you know fedramp or fisma

247
00:09:59,100 --> 00:10:02,160
over time these policies change the

248
00:10:02,160 --> 00:10:03,860
requirements change

249
00:10:03,860 --> 00:10:06,180
incidents happen vulnerabilities happen

250
00:10:06,180 --> 00:10:08,700
and so you you have to be proactive in

251
00:10:08,700 --> 00:10:10,680
how you govern and create and curate

252
00:10:10,680 --> 00:10:13,200
these policies reacting to that it just

253
00:10:13,200 --> 00:10:15,540
amplifies the problem and so you know

254
00:10:15,540 --> 00:10:16,560
especially if you're talking about

255
00:10:16,560 --> 00:10:18,779
making changes to kind of a steady

256
00:10:18,779 --> 00:10:20,760
stream of vulnerabilities you're never

257
00:10:20,760 --> 00:10:22,560
going to catch up

258
00:10:22,560 --> 00:10:26,160
I think again situations almost on a

259
00:10:26,160 --> 00:10:27,600
daily basis where folks are trying to

260
00:10:27,600 --> 00:10:29,820
exchange information securely and is

261
00:10:29,820 --> 00:10:31,680
that again sending an Excel file or

262
00:10:31,680 --> 00:10:34,260
sending a Word document sending yaml or

263
00:10:34,260 --> 00:10:36,420
Jason I mean this across boundaries

264
00:10:36,420 --> 00:10:39,180
across agencies across organizations or

265
00:10:39,180 --> 00:10:40,500
may or may not have different levels of

266
00:10:40,500 --> 00:10:42,839
clearance you know this is a real

267
00:10:42,839 --> 00:10:44,880
problem so you know having a standard

268
00:10:44,880 --> 00:10:46,680
format they've been exchange over apis

269
00:10:46,680 --> 00:10:48,660
is very important

270
00:10:48,660 --> 00:10:50,519
um I I guess last point there I don't

271
00:10:50,519 --> 00:10:52,079
have to convince anybody that you know

272
00:10:52,079 --> 00:10:55,740
it's much more cost effective to

273
00:10:55,740 --> 00:10:57,660
identify where your policies are going

274
00:10:57,660 --> 00:10:59,279
to need to change and control that

275
00:10:59,279 --> 00:11:02,120
change early in the process than later

276
00:11:02,120 --> 00:11:05,519
when you're trying to operate under you

277
00:11:05,519 --> 00:11:07,740
know time pressures and cost pressures

278
00:11:07,740 --> 00:11:10,200
and everything has to be reported out on

279
00:11:10,200 --> 00:11:13,019
those monthly con one calls

280
00:11:13,019 --> 00:11:13,560
um

281
00:11:13,560 --> 00:11:16,079
yeah and policy at large it gives you

282
00:11:16,079 --> 00:11:18,839
you know consistency the policies code

283
00:11:18,839 --> 00:11:20,700
gives you guard rails I think most of

284
00:11:20,700 --> 00:11:22,399
you have seen this and there are various

285
00:11:22,399 --> 00:11:26,300
reasons that you want to centralize

286
00:11:26,300 --> 00:11:28,500
controls the wrong word centralized

287
00:11:28,500 --> 00:11:31,380
governance of of those policies so you

288
00:11:31,380 --> 00:11:33,440
have consistency across your workload

289
00:11:33,440 --> 00:11:37,019
identities your access and then again

290
00:11:37,019 --> 00:11:39,360
this notion of having a continuous

291
00:11:39,360 --> 00:11:42,060
assessment of those controls and those

292
00:11:42,060 --> 00:11:44,399
implementations and and another number

293
00:11:44,399 --> 00:11:46,200
of other things here I'll the interest

294
00:11:46,200 --> 00:11:48,839
of time skip forward and then I think

295
00:11:48,839 --> 00:11:52,440
one one real world problem that that I

296
00:11:52,440 --> 00:11:54,779
see often is that you know as their

297
00:11:54,779 --> 00:11:57,959
kubernetes clusters grow certainly the

298
00:11:57,959 --> 00:12:00,720
apps in those clusters grow you know the

299
00:12:00,720 --> 00:12:03,420
challenges become exponential and policy

300
00:12:03,420 --> 00:12:05,700
government policy itself reduces that

301
00:12:05,700 --> 00:12:07,680
and kind of bends the curve but policy

302
00:12:07,680 --> 00:12:09,180
governance taking that to the next level

303
00:12:09,180 --> 00:12:12,120
really kind of helps you you know wind

304
00:12:12,120 --> 00:12:14,940
up that complexity and control it in in

305
00:12:14,940 --> 00:12:17,760
a more linear fashion and you know if

306
00:12:17,760 --> 00:12:19,860
you're I kind of think of that maybe not

307
00:12:19,860 --> 00:12:21,600
exponential growth as I've looked at

308
00:12:21,600 --> 00:12:23,060
real world

309
00:12:23,060 --> 00:12:25,860
complexity grow over number of clustered

310
00:12:25,860 --> 00:12:28,279
it's more like a Fibonacci growth curve

311
00:12:28,279 --> 00:12:32,100
but you kind of twist that by meta

312
00:12:32,100 --> 00:12:33,660
managing your policy you can hopefully

313
00:12:33,660 --> 00:12:36,779
get into a positive spiral

314
00:12:36,779 --> 00:12:39,600
this was just a quick kind of textual

315
00:12:39,600 --> 00:12:41,480
heat map that I put up

316
00:12:41,480 --> 00:12:44,339
just the idea being that governance of

317
00:12:44,339 --> 00:12:46,800
policy policy itself has different

318
00:12:46,800 --> 00:12:48,779
utility at different time and I would

319
00:12:48,779 --> 00:12:51,240
point out that you know there is some

320
00:12:51,240 --> 00:12:53,880
very obvious negatives as you're going

321
00:12:53,880 --> 00:12:55,680
through the early phases right you're

322
00:12:55,680 --> 00:12:57,779
going to take a hit on the ability to

323
00:12:57,779 --> 00:13:00,000
deploy things quickly by having to

324
00:13:00,000 --> 00:13:01,440
reason through all the controls that

325
00:13:01,440 --> 00:13:03,560
apply by having to map this to different

326
00:13:03,560 --> 00:13:06,200
Frameworks by having to

327
00:13:06,200 --> 00:13:09,060
build that security in at the beginning

328
00:13:09,060 --> 00:13:11,279
obviously we'll have benefits on the

329
00:13:11,279 --> 00:13:12,959
tail end especially as you start talking

330
00:13:12,959 --> 00:13:15,360
about secops and incident response but

331
00:13:15,360 --> 00:13:17,220
it's not always a silver bullet and it's

332
00:13:17,220 --> 00:13:19,860
not always fun

333
00:13:19,860 --> 00:13:21,420
um I'm gonna let everyone take a deep

334
00:13:21,420 --> 00:13:24,000
breath and um kind of Channel their

335
00:13:24,000 --> 00:13:27,240
inner Bob and before I show you what I'm

336
00:13:27,240 --> 00:13:29,459
calling the the compliance canvas and

337
00:13:29,459 --> 00:13:32,220
we'll dab and take from the the palette

338
00:13:32,220 --> 00:13:34,760
and as we kind of work through this mess

339
00:13:34,760 --> 00:13:38,339
but at a high high level you kind of

340
00:13:38,339 --> 00:13:40,019
want to understand your system from the

341
00:13:40,019 --> 00:13:41,639
user view so you know on that left

342
00:13:41,639 --> 00:13:43,740
you've got the mission you know how are

343
00:13:43,740 --> 00:13:45,180
we going to accelerate this you know

344
00:13:45,180 --> 00:13:47,519
then we have to worry about our threats

345
00:13:47,519 --> 00:13:49,139
and I'm going to talk through each of

346
00:13:49,139 --> 00:13:51,420
the different policy Ops that we observe

347
00:13:51,420 --> 00:13:54,120
as being essential and make sure that we

348
00:13:54,120 --> 00:13:55,620
cover at least some high level it's it's

349
00:13:55,620 --> 00:13:57,120
going to be impossible to go through all

350
00:13:57,120 --> 00:13:59,279
the Deep Dives and talk through various

351
00:13:59,279 --> 00:14:00,779
concrete examples and everything but

352
00:14:00,779 --> 00:14:03,540
I'll try to call it a couple and then on

353
00:14:03,540 --> 00:14:05,820
the bottom you know the substrate is you

354
00:14:05,820 --> 00:14:08,459
know as oscow tooling becomes better so

355
00:14:08,459 --> 00:14:10,079
whether it's through the policy work

356
00:14:10,079 --> 00:14:11,579
group or some of the other open source

357
00:14:11,579 --> 00:14:14,120
projects I mentioned or commercial tools

358
00:14:14,120 --> 00:14:16,560
the tooling is going to enable the

359
00:14:16,560 --> 00:14:18,120
generation and consumption of these

360
00:14:18,120 --> 00:14:20,519
various models the catalogs the you know

361
00:14:20,519 --> 00:14:22,019
component definitions we'll talk about

362
00:14:22,019 --> 00:14:24,300
different variations of that

363
00:14:24,300 --> 00:14:26,399
and then ultimately kind of that system

364
00:14:26,399 --> 00:14:29,600
security plan really System model

365
00:14:29,600 --> 00:14:32,220
becomes I think the central governing

366
00:14:32,220 --> 00:14:34,320
resource that that unifies everything

367
00:14:34,320 --> 00:14:36,360
together and in terms of security

368
00:14:36,360 --> 00:14:38,220
operations those you know the assessment

369
00:14:38,220 --> 00:14:40,139
plan assessment results that's that's

370
00:14:40,139 --> 00:14:41,279
where you're going to kind of live on a

371
00:14:41,279 --> 00:14:42,360
daily basis

372
00:14:42,360 --> 00:14:44,040
so I'll try to connect all these

373
00:14:44,040 --> 00:14:45,660
together as we move through the rest of

374
00:14:45,660 --> 00:14:47,459
the presentation

375
00:14:47,459 --> 00:14:48,899
um I would you know remind everyone

376
00:14:48,899 --> 00:14:50,880
knowing probably everyone here has this

377
00:14:50,880 --> 00:14:52,680
experience that this is a journey you're

378
00:14:52,680 --> 00:14:54,420
not going to go from zero to everything

379
00:14:54,420 --> 00:14:55,820
in one step

380
00:14:55,820 --> 00:14:58,740
folks you try to do that often find out

381
00:14:58,740 --> 00:15:01,880
that it kind of implodes and you have to

382
00:15:01,880 --> 00:15:05,399
argue for trying again

383
00:15:05,399 --> 00:15:07,079
um so let's talk about these essential

384
00:15:07,079 --> 00:15:08,399
ingredients that I've called out so

385
00:15:08,399 --> 00:15:10,560
first and foremost you you have to

386
00:15:10,560 --> 00:15:12,779
collect and curate a policy library

387
00:15:12,779 --> 00:15:16,500
right and and this very much maps to uh

388
00:15:16,500 --> 00:15:18,660
your control catalog that's that oscow

389
00:15:18,660 --> 00:15:21,060
artifact for enumerating all the

390
00:15:21,060 --> 00:15:22,139
different controls and different

391
00:15:22,139 --> 00:15:24,720
families or groups and we'll talk a

392
00:15:24,720 --> 00:15:26,339
little bit more about the profile but

393
00:15:26,339 --> 00:15:28,860
essentially it's a a tailoring of the

394
00:15:28,860 --> 00:15:30,120
different controls that you might have

395
00:15:30,120 --> 00:15:31,620
under different Frameworks or for

396
00:15:31,620 --> 00:15:33,600
different systems or for different use

397
00:15:33,600 --> 00:15:35,820
cases and you can parametrize that

398
00:15:35,820 --> 00:15:39,839
uh the current benchmarks like CIS even

399
00:15:39,839 --> 00:15:41,820
some of the more

400
00:15:41,820 --> 00:15:43,740
cloud-specific benchmarks are useful

401
00:15:43,740 --> 00:15:46,199
fodder for starting this curation

402
00:15:46,199 --> 00:15:48,779
process they've typically mapped all

403
00:15:48,779 --> 00:15:50,880
their Cloud specific or kubernetes

404
00:15:50,880 --> 00:15:55,040
specific controls to an sc853 you know

405
00:15:55,040 --> 00:15:58,680
eks AKs Google config they've all done

406
00:15:58,680 --> 00:16:00,959
some mapping to initi853 but more

407
00:16:00,959 --> 00:16:02,699
broadly they've mapped it to other

408
00:16:02,699 --> 00:16:05,940
control catalogs via PCI or others so

409
00:16:05,940 --> 00:16:08,279
that's a great way to kind of bootstrap

410
00:16:08,279 --> 00:16:11,820
your your catalog review process and

411
00:16:11,820 --> 00:16:14,420
start using the tooling to generate

412
00:16:14,420 --> 00:16:16,980
oscow catalogs

413
00:16:16,980 --> 00:16:18,420
um and then in those control sets you're

414
00:16:18,420 --> 00:16:19,560
going to obviously look at preventive

415
00:16:19,560 --> 00:16:21,360
controls detective controls I'll have a

416
00:16:21,360 --> 00:16:23,220
little bit more about the kind of threat

417
00:16:23,220 --> 00:16:25,199
modeling around that

418
00:16:25,199 --> 00:16:27,420
um and ideally again getting back to

419
00:16:27,420 --> 00:16:29,699
that idea of git Ops versus GRC all of

420
00:16:29,699 --> 00:16:31,800
this is being managed from day one in

421
00:16:31,800 --> 00:16:35,220
git repo you're managing PRS to change

422
00:16:35,220 --> 00:16:37,560
the oscow catalogs to manage your

423
00:16:37,560 --> 00:16:39,779
profiles and you know there may be some

424
00:16:39,779 --> 00:16:41,639
challenges with mono repos for those of

425
00:16:41,639 --> 00:16:44,060
you who love those

426
00:16:44,060 --> 00:16:48,060
I don't recommend that folks de novo

427
00:16:48,060 --> 00:16:50,880
create policy from scratch copy and

428
00:16:50,880 --> 00:16:54,240
paste when you can there are various

429
00:16:54,240 --> 00:16:56,279
strategies for this this should be maybe

430
00:16:56,279 --> 00:16:58,980
a commonplace for kubernetes resources

431
00:16:58,980 --> 00:17:01,560
or manifest themselves so the different

432
00:17:01,560 --> 00:17:04,679
mechanisms of the the policy engine

433
00:17:04,679 --> 00:17:07,740
support the policy languages and then

434
00:17:07,740 --> 00:17:09,900
there are different API and tooling

435
00:17:09,900 --> 00:17:12,839
Frameworks they can use with those I'll

436
00:17:12,839 --> 00:17:14,579
also Show an example of how you can kind

437
00:17:14,579 --> 00:17:17,579
of use generative or transformation code

438
00:17:17,579 --> 00:17:21,000
to kind of create oscow on the fly from

439
00:17:21,000 --> 00:17:23,339
one of those policy engines

440
00:17:23,339 --> 00:17:24,480
um and of course there are many other

441
00:17:24,480 --> 00:17:26,280
dsls or you can use python or other

442
00:17:26,280 --> 00:17:29,580
things to generate your your oscow and

443
00:17:29,580 --> 00:17:32,100
then consume the oscow and generate the

444
00:17:32,100 --> 00:17:34,799
actual little p policies and we'll talk

445
00:17:34,799 --> 00:17:36,179
about parametrization next so those

446
00:17:36,179 --> 00:17:38,240
profiles remember

447
00:17:38,240 --> 00:17:41,100
selections of specific controls and then

448
00:17:41,100 --> 00:17:42,840
you're parameterizing those so that the

449
00:17:42,840 --> 00:17:44,580
variables are not defined statically

450
00:17:44,580 --> 00:17:47,520
those can be defined at deploy time or

451
00:17:47,520 --> 00:17:50,520
at even post to play and so in support

452
00:17:50,520 --> 00:17:52,980
of that you know all of the major policy

453
00:17:52,980 --> 00:17:54,480
enforcement engines and languages

454
00:17:54,480 --> 00:17:56,880
support some form of some form of

455
00:17:56,880 --> 00:17:59,220
templating with parameters so gatekeeper

456
00:17:59,220 --> 00:18:01,380
has a constraint template allows you

457
00:18:01,380 --> 00:18:04,140
then Define constraints that invoke

458
00:18:04,140 --> 00:18:06,919
specific parameter oops parameter values

459
00:18:06,919 --> 00:18:09,840
caverno has rules that support kind of

460
00:18:09,840 --> 00:18:13,980
open API V3 and ocm which is a open

461
00:18:13,980 --> 00:18:17,160
source cluster management project has

462
00:18:17,160 --> 00:18:19,260
policy templates as well

463
00:18:19,260 --> 00:18:21,720
uh now that you've got kind of all these

464
00:18:21,720 --> 00:18:23,160
templates and parameters you've got to

465
00:18:23,160 --> 00:18:24,780
kind of bind it together it's what I

466
00:18:24,780 --> 00:18:26,940
call policy assembly

467
00:18:26,940 --> 00:18:30,299
um so you can map controls and the

468
00:18:30,299 --> 00:18:31,620
example I'll show you is kind of mapping

469
00:18:31,620 --> 00:18:34,440
it to threat indicators so you can

470
00:18:34,440 --> 00:18:36,419
annotate your controls with threats you

471
00:18:36,419 --> 00:18:40,260
can then uh annotate your policies by

472
00:18:40,260 --> 00:18:41,880
mitigating different threads right and

473
00:18:41,880 --> 00:18:43,200
then that way you can kind of use that

474
00:18:43,200 --> 00:18:45,380
to to bind the two together

475
00:18:45,380 --> 00:18:48,660
you could do things and and projects

476
00:18:48,660 --> 00:18:50,700
like gov car and others have kind of

477
00:18:50,700 --> 00:18:53,520
used keyword regex or or search and

478
00:18:53,520 --> 00:18:55,580
replace or even NLP

479
00:18:55,580 --> 00:18:59,400
to to match up kind of descriptions of

480
00:18:59,400 --> 00:19:00,900
your controls description in your system

481
00:19:00,900 --> 00:19:02,820
and kind of do that mapping and they

482
00:19:02,820 --> 00:19:05,940
might add you know real world threat

483
00:19:05,940 --> 00:19:07,679
indicators from real systems and kind of

484
00:19:07,679 --> 00:19:09,780
build a scoring rubric and build a heat

485
00:19:09,780 --> 00:19:12,140
map of which which attack

486
00:19:12,140 --> 00:19:15,000
patterns match with which components and

487
00:19:15,000 --> 00:19:16,620
which mitigations so that's another

488
00:19:16,620 --> 00:19:18,179
option for kind of building an

489
00:19:18,179 --> 00:19:19,679
automation framework to generate your

490
00:19:19,679 --> 00:19:22,380
policy to control mapping

491
00:19:22,380 --> 00:19:24,059
um let me just see if this will

492
00:19:24,059 --> 00:19:25,740
cooperate

493
00:19:25,740 --> 00:19:27,419
just to show you kind of what that could

494
00:19:27,419 --> 00:19:29,460
look like so here those of you are

495
00:19:29,460 --> 00:19:31,320
familiar with Rego

496
00:19:31,320 --> 00:19:34,919
um it's from the open policy so it

497
00:19:34,919 --> 00:19:36,299
essentially just trans you can think of

498
00:19:36,299 --> 00:19:39,480
Rego and opa as transforming you know

499
00:19:39,480 --> 00:19:42,360
one Jason to another Jason right so here

500
00:19:42,360 --> 00:19:44,100
for example you might have your control

501
00:19:44,100 --> 00:19:48,240
catalog and this is very kind of uh demo

502
00:19:48,240 --> 00:19:51,360
oscow pseudo-osco I'll call it but this

503
00:19:51,360 --> 00:19:54,059
is a kind of a typical Json look for

504
00:19:54,059 --> 00:19:57,179
what uh a control might look like and

505
00:19:57,179 --> 00:19:58,980
then what we've done is we've broken it

506
00:19:58,980 --> 00:20:01,380
out into different components and some

507
00:20:01,380 --> 00:20:03,179
of those components are functional

508
00:20:03,179 --> 00:20:05,220
components but some of those components

509
00:20:05,220 --> 00:20:06,419
we actually Define as security

510
00:20:06,419 --> 00:20:08,820
capabilities so there's a good

511
00:20:08,820 --> 00:20:10,260
publication if you've never read it nist

512
00:20:10,260 --> 00:20:12,480
IR 8011 goes into great detail around

513
00:20:12,480 --> 00:20:14,940
this but you're defining you know the

514
00:20:14,940 --> 00:20:15,919
the

515
00:20:15,919 --> 00:20:20,280
capabilities the security features that

516
00:20:20,280 --> 00:20:22,080
you would need to implement this so

517
00:20:22,080 --> 00:20:23,760
encryption could be one our back could

518
00:20:23,760 --> 00:20:26,820
be one right checking integrity he could

519
00:20:26,820 --> 00:20:29,160
be one signature verification in this

520
00:20:29,160 --> 00:20:30,120
case you know you have something like

521
00:20:30,120 --> 00:20:32,940
preventing unauthorized containers you

522
00:20:32,940 --> 00:20:34,260
would you know connect that to different

523
00:20:34,260 --> 00:20:36,780
threat IDs or TTP name hopefully you can

524
00:20:36,780 --> 00:20:38,240
see that

525
00:20:38,240 --> 00:20:40,580
mitigation a defensive

526
00:20:40,580 --> 00:20:45,919
techniques like execution prevention and

527
00:20:45,919 --> 00:20:48,480
then you'd map that up with your

528
00:20:48,480 --> 00:20:50,100
controls so let me just go to the next

529
00:20:50,100 --> 00:20:51,539
set here's where I was talking about

530
00:20:51,539 --> 00:20:54,419
kind of mapping with heuristics or you

531
00:20:54,419 --> 00:20:55,860
can use you know different types of

532
00:20:55,860 --> 00:20:58,320
modeling for threats but you're going to

533
00:20:58,320 --> 00:21:03,380
want to Define in in Rigo your different

534
00:21:03,380 --> 00:21:06,240
threat scoring you know that heat map

535
00:21:06,240 --> 00:21:08,520
and then you can actually Express how

536
00:21:08,520 --> 00:21:10,020
you're doing that threat mapping in code

537
00:21:10,020 --> 00:21:13,260
right so here you're looking now this is

538
00:21:13,260 --> 00:21:15,240
fairly demo hard-coded but you can

539
00:21:15,240 --> 00:21:17,820
easily call this from external data or

540
00:21:17,820 --> 00:21:20,400
call an API but you're looking for a

541
00:21:20,400 --> 00:21:22,500
specific set of ttps and you're you know

542
00:21:22,500 --> 00:21:24,299
matching that up to the security

543
00:21:24,299 --> 00:21:27,179
capabilities and controls and then you

544
00:21:27,179 --> 00:21:28,980
can classify that further into you know

545
00:21:28,980 --> 00:21:30,900
is this a product a protective control

546
00:21:30,900 --> 00:21:33,659
is this a detective control

547
00:21:33,659 --> 00:21:36,360
or is this a responsive control right

548
00:21:36,360 --> 00:21:37,980
and then you can map that to your your

549
00:21:37,980 --> 00:21:41,720
particular framework and then

550
00:21:42,480 --> 00:21:46,440
after you have that where is the

551
00:21:46,440 --> 00:21:48,659
sorry yeah you can add some validation

552
00:21:48,659 --> 00:21:51,299
rules askal this was fairly new I think

553
00:21:51,299 --> 00:21:53,460
in the last four or six months the

554
00:21:53,460 --> 00:21:55,580
validation rules has become

555
00:21:55,580 --> 00:21:58,980
a new part of the schema and then I

556
00:21:58,980 --> 00:22:01,140
think if I run this let's see yeah so

557
00:22:01,140 --> 00:22:04,140
here now on the output side

558
00:22:04,140 --> 00:22:08,360
it's uh it's spitting out what would be

559
00:22:08,360 --> 00:22:10,260
components that you would insert into

560
00:22:10,260 --> 00:22:12,179
your oscow you know typically as a

561
00:22:12,179 --> 00:22:14,760
component model and then ultimately will

562
00:22:14,760 --> 00:22:17,820
generate a full SSP in The Next Step but

563
00:22:17,820 --> 00:22:19,980
here you're you're

564
00:22:19,980 --> 00:22:23,220
uh describing how you enumerated the

565
00:22:23,220 --> 00:22:25,380
protect the respond the different rules

566
00:22:25,380 --> 00:22:27,120
that were triggered and then you know

567
00:22:27,120 --> 00:22:29,520
what the threat coverage might be

568
00:22:29,520 --> 00:22:32,340
um and you know you're feeding that into

569
00:22:32,340 --> 00:22:36,059
the SSP here

570
00:22:36,120 --> 00:22:37,980
um you mapping those control

571
00:22:37,980 --> 00:22:39,960
implementations based on those scores

572
00:22:39,960 --> 00:22:42,020
that were generated in the previous step

573
00:22:42,020 --> 00:22:44,280
and then you're making sure it has the

574
00:22:44,280 --> 00:22:46,440
right amount of coverage

575
00:22:46,440 --> 00:22:48,860
and then this should this should produce

576
00:22:48,860 --> 00:22:53,100
yeah the now we've combined the security

577
00:22:53,100 --> 00:22:54,840
capabilities that address those

578
00:22:54,840 --> 00:22:56,340
different threats with different levels

579
00:22:56,340 --> 00:22:58,440
of scoring with the control the

580
00:22:58,440 --> 00:23:00,960
functional control components who needed

581
00:23:00,960 --> 00:23:03,000
those controls and now we've we've

582
00:23:03,000 --> 00:23:04,740
created our control implementation in

583
00:23:04,740 --> 00:23:07,559
oscow on this bottom output right and so

584
00:23:07,559 --> 00:23:08,760
it kind of maps it all the way back up

585
00:23:08,760 --> 00:23:10,440
to the control ID what were my big p

586
00:23:10,440 --> 00:23:13,799
policy requirements what rules did I use

587
00:23:13,799 --> 00:23:16,740
to actually determine that this threat

588
00:23:16,740 --> 00:23:18,659
and this capability match that control

589
00:23:18,659 --> 00:23:21,900
and then you know I get an actual uh

590
00:23:21,900 --> 00:23:24,840
oscow readable definition of that

591
00:23:24,840 --> 00:23:27,000
control implementation and then at the

592
00:23:27,000 --> 00:23:28,140
very end

593
00:23:28,140 --> 00:23:30,600
you put all that together you can

594
00:23:30,600 --> 00:23:31,980
actually use that to generate your

595
00:23:31,980 --> 00:23:34,500
assessment plan and so this again as

596
00:23:34,500 --> 00:23:37,380
another oscow artifact gets gets you to

597
00:23:37,380 --> 00:23:38,760
the audit phase where now you're

598
00:23:38,760 --> 00:23:41,340
defining how am I mitigating those

599
00:23:41,340 --> 00:23:43,200
threats how are those controls providing

600
00:23:43,200 --> 00:23:45,419
that implementation and how as a tester

601
00:23:45,419 --> 00:23:47,940
can I you know write validation rules to

602
00:23:47,940 --> 00:23:49,080
support that

603
00:23:49,080 --> 00:23:51,600
so and I just as an aside that is the

604
00:23:51,600 --> 00:23:53,700
one cool thing about Rigo that I like is

605
00:23:53,700 --> 00:23:56,580
it's uh it can generate Jason from Json

606
00:23:56,580 --> 00:23:59,340
it can generate Rigo from Rigo so

607
00:23:59,340 --> 00:24:01,980
um just something you guys might be

608
00:24:01,980 --> 00:24:04,500
interested in in other use cases

609
00:24:04,500 --> 00:24:06,659
um so let me go back uh to the the

610
00:24:06,659 --> 00:24:07,860
palette here

611
00:24:07,860 --> 00:24:10,020
we talked about those profiles and and

612
00:24:10,020 --> 00:24:11,940
base and parameters I think the the

613
00:24:11,940 --> 00:24:14,520
thing to call out all of the languages

614
00:24:14,520 --> 00:24:16,679
and engine support some sort of

615
00:24:16,679 --> 00:24:19,799
variabilization parameterization but

616
00:24:19,799 --> 00:24:22,140
again managing the variables gets very

617
00:24:22,140 --> 00:24:24,299
complex very quickly as well so while

618
00:24:24,299 --> 00:24:27,480
what helps bend that Fibonacci curve it

619
00:24:27,480 --> 00:24:31,020
can quickly get too out of control I

620
00:24:31,020 --> 00:24:32,220
wish there was a silver bullet answer

621
00:24:32,220 --> 00:24:33,659
for that I think it's something we still

622
00:24:33,659 --> 00:24:35,700
wrestle with because I've seen templates

623
00:24:35,700 --> 00:24:37,140
that are just nothing but variables and

624
00:24:37,140 --> 00:24:39,179
it's like how how readable is that how

625
00:24:39,179 --> 00:24:41,460
maintainable is that

626
00:24:41,460 --> 00:24:43,320
um you obviously want to do policy

627
00:24:43,320 --> 00:24:44,640
validation like any other coding

628
00:24:44,640 --> 00:24:46,020
exercise

629
00:24:46,020 --> 00:24:48,020
you want to do local tests you know

630
00:24:48,020 --> 00:24:50,880
caverno Opa gatekeeper do some dry run

631
00:24:50,880 --> 00:24:53,780
I'm sure cue board and others do as well

632
00:24:53,780 --> 00:24:56,400
contests all these have some sort of

633
00:24:56,400 --> 00:24:59,039
local test capability uh unit tests

634
00:24:59,039 --> 00:25:01,440
usually in a pipeline that way you're

635
00:25:01,440 --> 00:25:03,780
consistently before you're updating your

636
00:25:03,780 --> 00:25:06,059
policy Distributing policy you know that

637
00:25:06,059 --> 00:25:07,500
it's being tested all of them support

638
00:25:07,500 --> 00:25:09,260
some sort of mocking

639
00:25:09,260 --> 00:25:12,840
and replay testing and I'm not sure all

640
00:25:12,840 --> 00:25:14,039
of them have a kind of a convenient

641
00:25:14,039 --> 00:25:16,020
coverage output but I think at least

642
00:25:16,020 --> 00:25:18,480
gatekeeper Opa has a convenient coverage

643
00:25:18,480 --> 00:25:21,500
metric report

644
00:25:21,600 --> 00:25:24,120
um and then so now that you've curated

645
00:25:24,120 --> 00:25:25,980
and mapped your policy library to

646
00:25:25,980 --> 00:25:27,659
specific controls you've got to

647
00:25:27,659 --> 00:25:29,880
distribute this out and again Opa

648
00:25:29,880 --> 00:25:32,039
gatekeeper governo

649
00:25:32,039 --> 00:25:34,620
um others do support either an oci

650
00:25:34,620 --> 00:25:37,020
bundle or you know kind of not

651
00:25:37,020 --> 00:25:38,760
proprietary but they're Project Specific

652
00:25:38,760 --> 00:25:40,980
bundling you could obviously manage all

653
00:25:40,980 --> 00:25:42,480
these things in git

654
00:25:42,480 --> 00:25:43,380
um

655
00:25:43,380 --> 00:25:44,880
I think again it goes back to that

656
00:25:44,880 --> 00:25:47,640
branching strategy and you know how how

657
00:25:47,640 --> 00:25:49,020
you're going to connect that up to your

658
00:25:49,020 --> 00:25:51,080
policy enforcement point

659
00:25:51,080 --> 00:25:54,000
I'd say you know oci bundles probably

660
00:25:54,000 --> 00:25:56,240
the thing I'd recommend

661
00:25:56,240 --> 00:26:00,600
sorry ocm has their version of this was

662
00:26:00,600 --> 00:26:02,159
just placement and they have a policy

663
00:26:02,159 --> 00:26:04,559
generator component

664
00:26:04,559 --> 00:26:06,240
and then there are Cloud specific ways

665
00:26:06,240 --> 00:26:08,640
you can do this again Google config you

666
00:26:08,640 --> 00:26:12,299
can use S3 as that bucket for from

667
00:26:12,299 --> 00:26:13,740
pulling everything from get into the

668
00:26:13,740 --> 00:26:15,840
bucket and then Oppa and caberno can

669
00:26:15,840 --> 00:26:17,880
pull it from there and there's an Azure

670
00:26:17,880 --> 00:26:20,640
policy extension uh as well

671
00:26:20,640 --> 00:26:23,100
I would note that as you distribute out

672
00:26:23,100 --> 00:26:25,559
policy be sure to sign digitally sign

673
00:26:25,559 --> 00:26:27,539
cryptographically sign and then make

674
00:26:27,539 --> 00:26:29,760
sure verification happens that the

675
00:26:29,760 --> 00:26:32,220
engines support caverno oppa I should

676
00:26:32,220 --> 00:26:35,580
say opa at least gatekeeper support it

677
00:26:35,580 --> 00:26:38,100
um all of the engines support some form

678
00:26:38,100 --> 00:26:40,020
of enrichment where you can instead of

679
00:26:40,020 --> 00:26:42,059
statically as I shoot in My Demo

680
00:26:42,059 --> 00:26:43,679
statically saying you know I'm looking

681
00:26:43,679 --> 00:26:45,840
for this TTP idea I'm looking for this

682
00:26:45,840 --> 00:26:47,640
resource attribute I'm looking for this

683
00:26:47,640 --> 00:26:50,100
namespace label right you can you can

684
00:26:50,100 --> 00:26:52,260
pull external data and enrich the

685
00:26:52,260 --> 00:26:54,240
decision-making process there are

686
00:26:54,240 --> 00:26:56,700
various ways to do this kind of similar

687
00:26:56,700 --> 00:26:58,500
to the policy bundling itself you can

688
00:26:58,500 --> 00:26:59,880
you can layer it in you can have

689
00:26:59,880 --> 00:27:01,559
separate bundles you can put into

690
00:27:01,559 --> 00:27:02,840
Secrets

691
00:27:02,840 --> 00:27:05,760
but I think the the interesting thing in

692
00:27:05,760 --> 00:27:09,840
kind of real world situation is that you

693
00:27:09,840 --> 00:27:11,279
can if you have a multi-tenant

694
00:27:11,279 --> 00:27:13,440
environment a multi-cluster environment

695
00:27:13,440 --> 00:27:15,600
you can now really tailor those policies

696
00:27:15,600 --> 00:27:18,960
to different deploy time and even

697
00:27:18,960 --> 00:27:20,059
operational

698
00:27:20,059 --> 00:27:24,000
time policy choices so this becomes a

699
00:27:24,000 --> 00:27:25,260
big thing if you know those of you who

700
00:27:25,260 --> 00:27:28,140
have wrestle with say data isolation for

701
00:27:28,140 --> 00:27:30,179
gdpr and you know across different

702
00:27:30,179 --> 00:27:32,220
country boundaries this is a very

703
00:27:32,220 --> 00:27:35,460
helpful pattern to use

704
00:27:35,460 --> 00:27:37,200
um the policy assessment reporting I

705
00:27:37,200 --> 00:27:38,940
think there are lots of tools out there

706
00:27:38,940 --> 00:27:40,679
um we obviously as a publisher work

707
00:27:40,679 --> 00:27:42,720
group like the ones that support the

708
00:27:42,720 --> 00:27:45,000
policy report CR and we've tried to

709
00:27:45,000 --> 00:27:46,279
build some

710
00:27:46,279 --> 00:27:48,419
adapters for those that don't have it

711
00:27:48,419 --> 00:27:50,400
we're trying to get it into that cap so

712
00:27:50,400 --> 00:27:51,740
hopefully it will become a standard

713
00:27:51,740 --> 00:27:54,179
kubernetes API and then everything will

714
00:27:54,179 --> 00:27:56,700
support it there are Prometheus metrics

715
00:27:56,700 --> 00:27:59,460
other ways to manage your assessment

716
00:27:59,460 --> 00:28:02,400
execution and aggregate data about what

717
00:28:02,400 --> 00:28:04,520
is what violations you have

718
00:28:04,520 --> 00:28:07,380
we did as I mentioned there's an open

719
00:28:07,380 --> 00:28:09,480
source policy dashboard but there are a

720
00:28:09,480 --> 00:28:11,700
number of of other open source and

721
00:28:11,700 --> 00:28:13,260
Commercial dashboards that can roll up

722
00:28:13,260 --> 00:28:15,900
the policy violations

723
00:28:15,900 --> 00:28:18,840
and as oscow support becomes more

724
00:28:18,840 --> 00:28:21,380
prevalent in things like EMASS other

725
00:28:21,380 --> 00:28:25,380
grc's we expect to see more of that

726
00:28:25,380 --> 00:28:27,620
display the dashboard display of your

727
00:28:27,620 --> 00:28:30,918
assessment results

728
00:28:31,020 --> 00:28:33,600
um gosh TimeWise

729
00:28:33,600 --> 00:28:35,700
I will I'll this is really more what I

730
00:28:35,700 --> 00:28:38,340
call policy adjacent this is not policy

731
00:28:38,340 --> 00:28:41,220
per se to remediate obviously if you

732
00:28:41,220 --> 00:28:43,500
have everything controlled and on these

733
00:28:43,500 --> 00:28:46,080
guard rails and constraints it makes

734
00:28:46,080 --> 00:28:48,059
remediation a lot more manageable and a

735
00:28:48,059 --> 00:28:50,059
lot more deterministic

736
00:28:50,059 --> 00:28:53,159
but I think you know you can you can use

737
00:28:53,159 --> 00:28:55,799
that policy report output or the

738
00:28:55,799 --> 00:28:58,380
gatekeeper audit output and you can then

739
00:28:58,380 --> 00:29:00,059
you know generate PRS and then that

740
00:29:00,059 --> 00:29:03,900
would create new Sandbox rules Network

741
00:29:03,900 --> 00:29:05,240
policies

742
00:29:05,240 --> 00:29:07,919
you can add different labels in response

743
00:29:07,919 --> 00:29:11,580
to different attack indicators through

744
00:29:11,580 --> 00:29:14,100
admission control mutation

745
00:29:14,100 --> 00:29:16,320
um yeah and then you're obviously gonna

746
00:29:16,320 --> 00:29:18,539
have to track your your poems and risks

747
00:29:18,539 --> 00:29:20,279
over time

748
00:29:20,279 --> 00:29:22,860
uh you know there are some cross-cutting

749
00:29:22,860 --> 00:29:25,860
concerns that that will obviously be uh

750
00:29:25,860 --> 00:29:27,899
touch multiple parts of that policy

751
00:29:27,899 --> 00:29:29,700
management process so

752
00:29:29,700 --> 00:29:30,899
um you know those heuristics that I

753
00:29:30,899 --> 00:29:32,279
mentioned you know they really do cover

754
00:29:32,279 --> 00:29:34,679
the whole miter attack framework so

755
00:29:34,679 --> 00:29:36,120
you're looking at this some you know

756
00:29:36,120 --> 00:29:38,159
slice through many different pillars

757
00:29:38,159 --> 00:29:39,960
it's not always kind of neat and

758
00:29:39,960 --> 00:29:41,340
compartmentalized where you can build a

759
00:29:41,340 --> 00:29:43,260
policy snippet for you know your your

760
00:29:43,260 --> 00:29:45,179
volumes and a policy snippet for image

761
00:29:45,179 --> 00:29:46,860
management a lot of these are going to

762
00:29:46,860 --> 00:29:48,720
have cross-cutting concerns and and this

763
00:29:48,720 --> 00:29:51,179
where having a good model to drive that

764
00:29:51,179 --> 00:29:54,240
that policy generation helps so you know

765
00:29:54,240 --> 00:29:57,840
static analysis very infrequently but

766
00:29:57,840 --> 00:29:59,520
starting to see some interest in formal

767
00:29:59,520 --> 00:30:03,140
methods for that my personal area is

768
00:30:03,140 --> 00:30:06,659
graphs and kind of using ml to do graph

769
00:30:06,659 --> 00:30:09,179
embeddings and graph mappings and

770
00:30:09,179 --> 00:30:11,640
actually even a lower level model uh

771
00:30:11,640 --> 00:30:14,460
large language models from machine

772
00:30:14,460 --> 00:30:16,260
learning have actually been recently

773
00:30:16,260 --> 00:30:18,480
shown to to be able to model out

774
00:30:18,480 --> 00:30:19,860
different attack paths and defense

775
00:30:19,860 --> 00:30:21,840
sequences so that's interesting area

776
00:30:21,840 --> 00:30:23,159
research

777
00:30:23,159 --> 00:30:26,100
so what's next we need more real world

778
00:30:26,100 --> 00:30:29,580
examples so I mentioned an open source

779
00:30:29,580 --> 00:30:31,919
project that we have a number of cncf

780
00:30:31,919 --> 00:30:34,740
projects contributing Sledgehammer will

781
00:30:34,740 --> 00:30:37,679
be open sourcing oscow for component

782
00:30:37,679 --> 00:30:40,440
Dash there's you know Rigo policies that

783
00:30:40,440 --> 00:30:42,539
do the generation or the actual

784
00:30:42,539 --> 00:30:46,740
low-level policies and yeah we need more

785
00:30:46,740 --> 00:30:48,779
tools thanks to again folks like defense

786
00:30:48,779 --> 00:30:51,360
unicorns and others who are building

787
00:30:51,360 --> 00:30:55,080
open source oscow tooling and we really

788
00:30:55,080 --> 00:30:56,880
want to see some real world Audits and

789
00:30:56,880 --> 00:30:59,159
we're going to try to surface as much as

790
00:30:59,159 --> 00:31:01,260
we can within the context of you know

791
00:31:01,260 --> 00:31:04,260
sensitive host specific data but we're

792
00:31:04,260 --> 00:31:06,600
going to try to surface all of the

793
00:31:06,600 --> 00:31:09,059
assessment plan assessment result

794
00:31:09,059 --> 00:31:12,779
artifacts and sledgehammer and and more

795
00:31:12,779 --> 00:31:14,640
meta information about the processes

796
00:31:14,640 --> 00:31:17,220
that that got us through that audit and

797
00:31:17,220 --> 00:31:19,260
I think that audit Community is right

798
00:31:19,260 --> 00:31:22,200
now even less aware of Oscar Oscar is

799
00:31:22,200 --> 00:31:23,880
new for everybody but the audit

800
00:31:23,880 --> 00:31:26,940
Community is not well tuned and ready to

801
00:31:26,940 --> 00:31:30,360
receive oscow and certainly not in a

802
00:31:30,360 --> 00:31:32,340
kubernetes cluster environment right or

803
00:31:32,340 --> 00:31:34,740
Cloud native environment even so we're

804
00:31:34,740 --> 00:31:36,299
hoping that this will be a resource for

805
00:31:36,299 --> 00:31:38,220
Auditors and if there are any in the

806
00:31:38,220 --> 00:31:39,799
audience please I'd love to talk to you

807
00:31:39,799 --> 00:31:42,960
but getting them trained up and familiar

808
00:31:42,960 --> 00:31:45,059
with oscow with kubernetes and Moscow

809
00:31:45,059 --> 00:31:47,460
and then how to consume these artifacts

810
00:31:47,460 --> 00:31:49,860
and with that I will open it up to

811
00:31:49,860 --> 00:31:52,100
questions

812
00:31:52,919 --> 00:31:55,520
yes

813
00:32:02,399 --> 00:32:05,340
terrorist again where they are also

814
00:32:05,340 --> 00:32:07,760
trying to

815
00:32:08,520 --> 00:32:11,700
go to Superior schools

816
00:32:11,700 --> 00:32:14,039
so they also scan

817
00:32:14,039 --> 00:32:17,158
the kubernetes

818
00:32:19,640 --> 00:32:24,059
will Oscar home library is that

819
00:32:24,059 --> 00:32:27,059
I I think so I think there's going to be

820
00:32:27,059 --> 00:32:29,580
a lot of competing approaches you know

821
00:32:29,580 --> 00:32:30,659
everybody's looking at the same problem

822
00:32:30,659 --> 00:32:31,740
and feeling it from different

823
00:32:31,740 --> 00:32:33,899
perspectives and so there will be a lot

824
00:32:33,899 --> 00:32:36,960
of competing ideas oscow is is very new

825
00:32:36,960 --> 00:32:39,659
it's very open developers are very

826
00:32:39,659 --> 00:32:41,039
flexible I think

827
00:32:41,039 --> 00:32:43,559
in a very specific segment I.E

828
00:32:43,559 --> 00:32:46,200
government has a very strong endorsement

829
00:32:46,200 --> 00:32:48,360
and that nist is the standards body that

830
00:32:48,360 --> 00:32:51,480
most agencies use and and you know I

831
00:32:51,480 --> 00:32:53,279
don't think it's in any surprise anyone

832
00:32:53,279 --> 00:32:56,100
that fedramp is a very popular framework

833
00:32:56,100 --> 00:32:58,799
for cloud Based Services the government

834
00:32:58,799 --> 00:33:01,799
is are procuring and fedramp has

835
00:33:01,799 --> 00:33:04,919
officially adopted oscow as its emerging

836
00:33:04,919 --> 00:33:07,100
and you know very soon

837
00:33:07,100 --> 00:33:10,440
required format so I think that the

838
00:33:10,440 --> 00:33:12,260
vendors the open source projects

839
00:33:12,260 --> 00:33:15,779
Enterprises homegrown if you're going to

840
00:33:15,779 --> 00:33:17,460
play in that area you're going to have

841
00:33:17,460 --> 00:33:19,860
to embrace oscow but the good news is

842
00:33:19,860 --> 00:33:21,600
they're very flexible so lessons learned

843
00:33:21,600 --> 00:33:23,159
from other projects and other approaches

844
00:33:23,159 --> 00:33:25,200
should be incorporated in that and I

845
00:33:25,200 --> 00:33:27,120
think they would welcome that from the

846
00:33:27,120 --> 00:33:29,640
cncf policy work group I mean we're

847
00:33:29,640 --> 00:33:32,100
we're agnostic to you know the tooling

848
00:33:32,100 --> 00:33:35,279
the the specific Frameworks but again we

849
00:33:35,279 --> 00:33:37,440
just look at oscow as a very nice fit to

850
00:33:37,440 --> 00:33:39,059
the problems that come up in our work

851
00:33:39,059 --> 00:33:41,299
group

852
00:33:41,519 --> 00:33:44,179
yes

853
00:33:47,820 --> 00:33:51,720
um I I see if I can go back and if it

854
00:33:51,720 --> 00:33:55,260
will pull up here and if it will show

855
00:33:55,260 --> 00:33:57,120
yeah okay so here he goes we're going to

856
00:33:57,120 --> 00:34:00,179
re-home that that's in my current GitHub

857
00:34:00,179 --> 00:34:02,760
um so we'll we'll when we file the

858
00:34:02,760 --> 00:34:05,940
sandbox uh ticket we'll be putting in

859
00:34:05,940 --> 00:34:08,699
another kind of a DOT org or dot IO but

860
00:34:08,699 --> 00:34:10,320
um oh gosh it's looking be readable

861
00:34:10,320 --> 00:34:14,099
probably not but yeah so essentially we

862
00:34:14,099 --> 00:34:17,280
want to deliver all the oscow and and

863
00:34:17,280 --> 00:34:20,580
any tooling that we create or any you

864
00:34:20,580 --> 00:34:22,619
know configuration for other open source

865
00:34:22,619 --> 00:34:25,339
tools so that one could in theory

866
00:34:25,339 --> 00:34:27,659
generate all the oscow or use the

867
00:34:27,659 --> 00:34:30,418
templates that we create apply it to a

868
00:34:30,418 --> 00:34:33,418
fairly vanilla kubernetes cluster and

869
00:34:33,418 --> 00:34:36,060
then use that either in an agency or as

870
00:34:36,060 --> 00:34:38,460
a host and go through an audit and like

871
00:34:38,460 --> 00:34:40,560
say we plan to put as much as we can

872
00:34:40,560 --> 00:34:43,020
from a real world third party you know

873
00:34:43,020 --> 00:34:44,580
they call three we call them three Pals

874
00:34:44,580 --> 00:34:47,940
a third-party audit organization as much

875
00:34:47,940 --> 00:34:49,619
of those artifacts out onto the open

876
00:34:49,619 --> 00:34:52,800
repo de-identified from any actual IP

877
00:34:52,800 --> 00:34:54,480
addresses or sensitive you know

878
00:34:54,480 --> 00:34:57,359
vulnerabilities output Etc so that in

879
00:34:57,359 --> 00:34:59,760
theory especially agencies we talk to a

880
00:34:59,760 --> 00:35:01,800
lot of agencies who are just getting

881
00:35:01,800 --> 00:35:04,980
caught up on devops right and getting

882
00:35:04,980 --> 00:35:06,119
their head draft around how to do

883
00:35:06,119 --> 00:35:08,520
kubernetes at all the lift to go from

884
00:35:08,520 --> 00:35:11,640
nothing today or very little today to a

885
00:35:11,640 --> 00:35:13,859
full you know reliable production-ready

886
00:35:13,859 --> 00:35:16,500
kubernetes operation is pretty huge both

887
00:35:16,500 --> 00:35:18,480
in terms of staff and and money but

888
00:35:18,480 --> 00:35:20,640
really it's staff so they're looking for

889
00:35:20,640 --> 00:35:22,200
a bit more of an easy button that they

890
00:35:22,200 --> 00:35:24,660
can say give us some some best practices

891
00:35:24,660 --> 00:35:26,339
that we can take and play with in our

892
00:35:26,339 --> 00:35:30,420
lab or you know another ATO cloud

893
00:35:30,420 --> 00:35:33,180
provider can deploy you know again

894
00:35:33,180 --> 00:35:36,359
similar to Platform One platform one is

895
00:35:36,359 --> 00:35:38,940
you know pretty restricted and who can

896
00:35:38,940 --> 00:35:42,420
use it and it has some significant costs

897
00:35:42,420 --> 00:35:44,640
which again May price out some of the

898
00:35:44,640 --> 00:35:47,760
smaller you know Civ agencies

899
00:35:47,760 --> 00:35:49,859
so I again I wouldn't and I would just

900
00:35:49,859 --> 00:35:51,660
as a coder to that I wouldn't see this

901
00:35:51,660 --> 00:35:54,119
as being competitive in any way I think

902
00:35:54,119 --> 00:35:55,680
it's more a way for someone to dip their

903
00:35:55,680 --> 00:35:57,420
toes to really understand what they're

904
00:35:57,420 --> 00:35:59,579
what they're getting into and then make

905
00:35:59,579 --> 00:36:01,320
a very informed decision you know maybe

906
00:36:01,320 --> 00:36:03,359
with a couple of pilot projects

907
00:36:03,359 --> 00:36:05,700
get success and then say okay we want to

908
00:36:05,700 --> 00:36:07,200
go to platform one we want to go to a

909
00:36:07,200 --> 00:36:09,380
commercial kind of software Factory

910
00:36:09,380 --> 00:36:12,260
devsecops platform engineering

911
00:36:12,260 --> 00:36:14,579
substrate now we know what we're getting

912
00:36:14,579 --> 00:36:17,520
into and more important you know our AO

913
00:36:17,520 --> 00:36:21,000
our our authorization folks know what to

914
00:36:21,000 --> 00:36:23,040
expect and how to consume that Osco we

915
00:36:23,040 --> 00:36:25,560
know if our GRC can support it so they

916
00:36:25,560 --> 00:36:27,900
do the discovery with Sledgehammer get

917
00:36:27,900 --> 00:36:29,760
get really comfortable with the the

918
00:36:29,760 --> 00:36:31,980
operating model and then can scale up

919
00:36:31,980 --> 00:36:34,260
onto something more I guess you know

920
00:36:34,260 --> 00:36:38,300
Enterprise scale or Enterprise grid

921
00:36:39,900 --> 00:36:42,920
anything else

922
00:36:52,619 --> 00:36:54,960
workloads and then you know performing

923
00:36:54,960 --> 00:36:57,420
that generation of those artifacts

924
00:36:57,420 --> 00:37:00,180
he if being a point in time Snapchat or

925
00:37:00,180 --> 00:37:03,200
like something that could be

926
00:37:03,839 --> 00:37:06,420
um I'd say the I mean

927
00:37:06,420 --> 00:37:09,900
as we're planning to generate the the

928
00:37:09,900 --> 00:37:12,480
oscow and the corresponding policies and

929
00:37:12,480 --> 00:37:15,359
I think in kind of a similar way the the

930
00:37:15,359 --> 00:37:17,820
caverno effort you guys have

931
00:37:17,820 --> 00:37:19,680
um and which you know we'd love to to

932
00:37:19,680 --> 00:37:21,720
collaborate on that because again we're

933
00:37:21,720 --> 00:37:23,579
not picking oppa versus caverno or any

934
00:37:23,579 --> 00:37:26,400
any particular tooling I'd say we'd want

935
00:37:26,400 --> 00:37:27,780
to take it one step further from just

936
00:37:27,780 --> 00:37:30,119
the policy generation and actually the

937
00:37:30,119 --> 00:37:33,000
oscow generation so call so deploy maybe

938
00:37:33,000 --> 00:37:34,920
to answer your question deploy the

939
00:37:34,920 --> 00:37:37,859
cluster run the the oscow generation

940
00:37:37,859 --> 00:37:40,740
which then will generate the Little P

941
00:37:40,740 --> 00:37:43,800
policy run your your conf test for lack

942
00:37:43,800 --> 00:37:45,900
of a better word your assessment and

943
00:37:45,900 --> 00:37:48,000
then generate your your SAR and then

944
00:37:48,000 --> 00:37:50,220
figure out what you have to fix

945
00:37:50,220 --> 00:37:52,079
um could that be done in GitHub actions

946
00:37:52,079 --> 00:37:54,300
or you know some some other CI CD or

947
00:37:54,300 --> 00:37:57,599
Argo sure I don't see why not so as long

948
00:37:57,599 --> 00:37:58,980
as because it's going to be generated

949
00:37:58,980 --> 00:38:01,740
code as much as possible through the

950
00:38:01,740 --> 00:38:03,660
idea is that it you wouldn't have to do

951
00:38:03,660 --> 00:38:05,700
point in time updates and kind of that

952
00:38:05,700 --> 00:38:09,180
branch and merge PR change

953
00:38:09,180 --> 00:38:10,500
but

954
00:38:10,500 --> 00:38:13,980
um TBD it's early days

955
00:38:13,980 --> 00:38:15,420
anything else

956
00:38:15,420 --> 00:38:18,560
yes please oh

957
00:38:32,280 --> 00:38:34,880
when it comes

958
00:38:35,280 --> 00:38:39,720
Federal but the government I know

959
00:38:39,720 --> 00:38:42,259
basically

960
00:38:44,400 --> 00:38:48,300
multiple compliance Frameworks right and

961
00:38:48,300 --> 00:38:51,859
those like policies or

962
00:38:51,900 --> 00:38:54,680
whatever best

963
00:38:56,400 --> 00:38:58,619
Bank probably have to do multiple

964
00:38:58,619 --> 00:39:01,320
different departments or

965
00:39:01,320 --> 00:39:03,599
results in different

966
00:39:03,599 --> 00:39:06,020
you can go

967
00:39:07,920 --> 00:39:10,400
approach

968
00:39:11,579 --> 00:39:14,180
they have

969
00:39:17,640 --> 00:39:20,180
use

970
00:39:21,180 --> 00:39:25,380
like use different views for different

971
00:39:25,380 --> 00:39:28,099
companies well I

972
00:39:31,500 --> 00:39:33,060
for example yeah that and that's the

973
00:39:33,060 --> 00:39:35,280
kind of Rosetta Stone we were using was

974
00:39:35,280 --> 00:39:37,980
that the threat model right so we if you

975
00:39:37,980 --> 00:39:42,060
can model the specific you know of a

976
00:39:42,060 --> 00:39:44,760
particular framework map that to your

977
00:39:44,760 --> 00:39:47,220
threats right so tdps or you can use

978
00:39:47,220 --> 00:39:49,920
other Frameworks but specifically right

979
00:39:49,920 --> 00:39:51,780
annotate those to specific threats and

980
00:39:51,780 --> 00:39:54,480
on the mitigation side right you you're

981
00:39:54,480 --> 00:39:56,640
annotating those with specific Medicaid

982
00:39:56,640 --> 00:39:58,560
mitigation techniques defense techniques

983
00:39:58,560 --> 00:40:00,000
right then all you have to do is

984
00:40:00,000 --> 00:40:01,859
maintain that mapping of these these

985
00:40:01,859 --> 00:40:04,260
threats are mitigated by these defense

986
00:40:04,260 --> 00:40:05,700
techniques and of course miter is doing

987
00:40:05,700 --> 00:40:07,260
that for you if you're using their

988
00:40:07,260 --> 00:40:09,359
framework right so that becomes the glue

989
00:40:09,359 --> 00:40:10,980
so if you want to drop in if I

990
00:40:10,980 --> 00:40:11,940
understood your question if you're

991
00:40:11,940 --> 00:40:13,700
dropping in PCI you want to drop in

992
00:40:13,700 --> 00:40:17,960
HIPAA as long as you've annotated your

993
00:40:17,960 --> 00:40:20,280
requirements and then the specific

994
00:40:20,280 --> 00:40:22,440
controls for those requirements with

995
00:40:22,440 --> 00:40:24,540
those threads then in theory you can

996
00:40:24,540 --> 00:40:27,599
just assemble uh the oscow on the

997
00:40:27,599 --> 00:40:29,760
policies from from that mapping of

998
00:40:29,760 --> 00:40:32,700
threat to defense IDs

999
00:40:32,700 --> 00:40:35,419
why is this

1000
00:40:39,540 --> 00:40:41,460
um it's there's no formal I mean

1001
00:40:41,460 --> 00:40:43,440
something we can consider with the devs

1002
00:40:43,440 --> 00:40:45,599
for oscow to introduce but there's no

1003
00:40:45,599 --> 00:40:48,740
formal kind of threat to control mapping

1004
00:40:48,740 --> 00:40:51,420
we just kind of added extra properties

1005
00:40:51,420 --> 00:40:53,040
to the oscale

1006
00:40:53,040 --> 00:40:55,560
yeah so we could but we should maybe

1007
00:40:55,560 --> 00:40:58,500
submit a PR to get that formalized we're

1008
00:40:58,500 --> 00:41:00,060
still just we want to get more Comfort

1009
00:41:00,060 --> 00:41:02,579
again through the sledgehammer real

1010
00:41:02,579 --> 00:41:05,520
world testing before we probably stand

1011
00:41:05,520 --> 00:41:07,380
up and say this is the exact way to do

1012
00:41:07,380 --> 00:41:10,440
it let's codify it in oscom

1013
00:41:10,440 --> 00:41:14,119
I know you've had your hand of contacts

1014
00:41:26,220 --> 00:41:29,400
yeah I mean yeah the first the first the

1015
00:41:29,400 --> 00:41:31,200
first epic if you will is is that we're

1016
00:41:31,200 --> 00:41:33,599
going to go through threat modeling uh

1017
00:41:33,599 --> 00:41:35,339
exercises is something I've personally

1018
00:41:35,339 --> 00:41:36,900
been involved with the tag and with

1019
00:41:36,900 --> 00:41:38,520
security

1020
00:41:38,520 --> 00:41:41,040
um so we'll do you know Project Specific

1021
00:41:41,040 --> 00:41:43,619
threat modeling those artifacts will be

1022
00:41:43,619 --> 00:41:45,300
released then from that we'll do the the

1023
00:41:45,300 --> 00:41:48,359
mapping those oscow generation tools and

1024
00:41:48,359 --> 00:41:49,859
artifacts will be released and then I

1025
00:41:49,859 --> 00:41:51,480
think you know everybody's you know

1026
00:41:51,480 --> 00:41:52,920
welcome to participate in those

1027
00:41:52,920 --> 00:41:55,380
processes to create review and curate

1028
00:41:55,380 --> 00:41:57,119
those but I think it starts to get

1029
00:41:57,119 --> 00:41:59,119
interesting for the operator community

1030
00:41:59,119 --> 00:42:02,099
and maybe other projects who are looking

1031
00:42:02,099 --> 00:42:04,260
to emulate the process once we've got

1032
00:42:04,260 --> 00:42:08,280
that full oscow component model the

1033
00:42:08,280 --> 00:42:10,619
policy libraries and we can demonstrate

1034
00:42:10,619 --> 00:42:13,560
you know how those are actually running

1035
00:42:13,560 --> 00:42:15,240
so I think I hope that answers your

1036
00:42:15,240 --> 00:42:16,619
question

1037
00:42:16,619 --> 00:42:18,180
basically we need a little bit of Dev

1038
00:42:18,180 --> 00:42:20,400
time from the team and you know go

1039
00:42:20,400 --> 00:42:22,619
through some some reviews of what the

1040
00:42:22,619 --> 00:42:25,079
Oscar looks like for their project

1041
00:42:25,079 --> 00:42:28,940
okay and I'm told to stop so thank you

