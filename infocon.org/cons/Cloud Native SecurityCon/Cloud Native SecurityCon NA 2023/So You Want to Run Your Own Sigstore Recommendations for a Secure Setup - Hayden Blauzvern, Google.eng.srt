1
00:00:00,780 --> 00:00:02,340
hello everyone

2
00:00:02,340 --> 00:00:04,140
um thanks for coming today my name is

3
00:00:04,140 --> 00:00:06,480
Hayden blousvern I'm a software engineer

4
00:00:06,480 --> 00:00:07,980
on Google's open source security team

5
00:00:07,980 --> 00:00:09,360
and one of the maintainers on the six

6
00:00:09,360 --> 00:00:10,620
door project

7
00:00:10,620 --> 00:00:12,840
and today we'll be talking about how to

8
00:00:12,840 --> 00:00:16,560
run your own Sig store securely

9
00:00:16,560 --> 00:00:18,060
if you're at this talk

10
00:00:18,060 --> 00:00:19,260
um you might have heard of sigstore

11
00:00:19,260 --> 00:00:20,820
before but if not I'll give a really

12
00:00:20,820 --> 00:00:23,100
quick overview of Sig store before we

13
00:00:23,100 --> 00:00:25,500
dive into how to set up one privately

14
00:00:25,500 --> 00:00:28,160
and securely

15
00:00:28,680 --> 00:00:31,080
six store is a project under the open

16
00:00:31,080 --> 00:00:33,300
source security Foundation the openssf

17
00:00:33,300 --> 00:00:35,219
which is under the Linux Foundation

18
00:00:35,219 --> 00:00:37,739
and its goal is to simplify code signing

19
00:00:37,739 --> 00:00:39,899
for artifacts

20
00:00:39,899 --> 00:00:41,879
if you're familiar with the project

21
00:00:41,879 --> 00:00:44,219
let's encrypt it had a similar Mission

22
00:00:44,219 --> 00:00:47,280
but focused on increasing https adoption

23
00:00:47,280 --> 00:00:51,420
to secure traffic for websites and it

24
00:00:51,420 --> 00:00:53,399
was very successful in doing so by

25
00:00:53,399 --> 00:00:55,980
providing easy to use tooling and free

26
00:00:55,980 --> 00:00:57,840
services in particular a free

27
00:00:57,840 --> 00:01:00,120
certificate Authority in order to issue

28
00:01:00,120 --> 00:01:02,760
SSL certificates and Sig store aims to

29
00:01:02,760 --> 00:01:06,360
do the same but focused on code signing

30
00:01:06,360 --> 00:01:08,760
we enable this by providing free and

31
00:01:08,760 --> 00:01:10,439
publicly available transparency login

32
00:01:10,439 --> 00:01:13,080
certificate Authority Services which you

33
00:01:13,080 --> 00:01:14,939
can also run within your organization

34
00:01:14,939 --> 00:01:17,640
too which we'll talk about in a moment

35
00:01:17,640 --> 00:01:19,560
and one of its other goals is to remove

36
00:01:19,560 --> 00:01:22,380
the need to manage artifact signing Keys

37
00:01:22,380 --> 00:01:24,240
we found that this is one of the pain

38
00:01:24,240 --> 00:01:27,000
points for adoption when it comes to

39
00:01:27,000 --> 00:01:29,040
doing code signing

40
00:01:29,040 --> 00:01:31,259
users frequently don't have signing keys

41
00:01:31,259 --> 00:01:32,400
or they don't really know how to manage

42
00:01:32,400 --> 00:01:33,360
them

43
00:01:33,360 --> 00:01:35,520
so let's take a look at how sigstore

44
00:01:35,520 --> 00:01:39,060
enables signing without having to manage

45
00:01:39,060 --> 00:01:40,439
keys

46
00:01:40,439 --> 00:01:42,360
the first service within Sig store is

47
00:01:42,360 --> 00:01:44,880
fulsio which is six door certificate

48
00:01:44,880 --> 00:01:45,900
Authority

49
00:01:45,900 --> 00:01:48,060
and it issue certificates that bind

50
00:01:48,060 --> 00:01:50,280
public Keys which can either be

51
00:01:50,280 --> 00:01:52,799
ephemeral meaning from a single signing

52
00:01:52,799 --> 00:01:56,579
event or long-lived if the artifact

53
00:01:56,579 --> 00:01:58,860
owner maintains some signing key and

54
00:01:58,860 --> 00:02:00,780
Associates this key with an identity

55
00:02:00,780 --> 00:02:03,299
that comes from an ID token obtained

56
00:02:03,299 --> 00:02:06,060
through the openid connector oidc

57
00:02:06,060 --> 00:02:08,940
protocol

58
00:02:08,940 --> 00:02:10,739
an artifact owner will fetch one of

59
00:02:10,739 --> 00:02:12,720
these ID tokens and then give this to

60
00:02:12,720 --> 00:02:14,940
the certificate Authority along with a

61
00:02:14,940 --> 00:02:16,140
public key

62
00:02:16,140 --> 00:02:18,300
full seal will verify that identity

63
00:02:18,300 --> 00:02:20,819
token since it's signed and extract the

64
00:02:20,819 --> 00:02:22,200
identity from it and include that in the

65
00:02:22,200 --> 00:02:24,120
certificate and this identity could be

66
00:02:24,120 --> 00:02:26,400
an email address this identity could be

67
00:02:26,400 --> 00:02:28,440
a service account it could also be an

68
00:02:28,440 --> 00:02:30,599
identity that's associated with a

69
00:02:30,599 --> 00:02:33,120
workflow run on a CI platform such as

70
00:02:33,120 --> 00:02:36,260
GitHub actions

71
00:02:36,480 --> 00:02:38,459
the public instance of focio will also

72
00:02:38,459 --> 00:02:40,739
write to a certificate transparency log

73
00:02:40,739 --> 00:02:42,420
and we'll talk a bit more about the role

74
00:02:42,420 --> 00:02:44,220
of transparency within six store in a

75
00:02:44,220 --> 00:02:46,500
minute but roughly the purpose of this

76
00:02:46,500 --> 00:02:48,840
log is so that you can have an immutable

77
00:02:48,840 --> 00:02:51,239
issuance log which holds the ca

78
00:02:51,239 --> 00:02:52,920
accountable to everything that it issues

79
00:02:52,920 --> 00:02:55,739
you'll also see this within webpki that

80
00:02:55,739 --> 00:02:58,140
publicly trusted Cas will issue

81
00:02:58,140 --> 00:03:00,900
certificates for domains and include

82
00:03:00,900 --> 00:03:02,819
these in certificate transparency logs

83
00:03:02,819 --> 00:03:05,340
so that domain operators or in this case

84
00:03:05,340 --> 00:03:07,980
artifact owners can monitor the logs to

85
00:03:07,980 --> 00:03:12,319
see how their identities show up in them

86
00:03:13,319 --> 00:03:16,560
the second component of Sig store is

87
00:03:16,560 --> 00:03:20,580
recore which is our transparency log for

88
00:03:20,580 --> 00:03:23,580
storing artifacts and their signatures

89
00:03:23,580 --> 00:03:25,379
after an artifact owner signs an

90
00:03:25,379 --> 00:03:27,120
artifact they will upload the

91
00:03:27,120 --> 00:03:29,280
certificate that came back from folsio

92
00:03:29,280 --> 00:03:31,200
and a signed artifact a signature in the

93
00:03:31,200 --> 00:03:33,720
artifact hash to recore

94
00:03:33,720 --> 00:03:35,700
and then recore will return back a proof

95
00:03:35,700 --> 00:03:37,620
saying that this entry was included in

96
00:03:37,620 --> 00:03:39,180
the log and if you're familiar with

97
00:03:39,180 --> 00:03:40,620
transparency logs note that I am

98
00:03:40,620 --> 00:03:43,019
glossing over exactly what this proof

99
00:03:43,019 --> 00:03:44,760
entails but roughly it's a cryptographic

100
00:03:44,760 --> 00:03:46,379
proof

101
00:03:46,379 --> 00:03:48,180
the artifact owner can then take that

102
00:03:48,180 --> 00:03:49,799
signed artifact the certificate and the

103
00:03:49,799 --> 00:03:51,840
proof and upload that somewhere let's

104
00:03:51,840 --> 00:03:54,299
say to a package repository so that any

105
00:03:54,299 --> 00:03:56,280
verifier that wants to use a package is

106
00:03:56,280 --> 00:03:58,860
able to verify the signed artifact they

107
00:03:58,860 --> 00:04:00,599
can verify that using the public key

108
00:04:00,599 --> 00:04:02,459
that comes from the certificate

109
00:04:02,459 --> 00:04:05,159
they can verify the certificates matches

110
00:04:05,159 --> 00:04:07,560
a identity that they were provided out

111
00:04:07,560 --> 00:04:09,900
of band that maps to that artifact

112
00:04:09,900 --> 00:04:11,640
and then they can verify the proof to

113
00:04:11,640 --> 00:04:12,840
know that the entry was actually

114
00:04:12,840 --> 00:04:15,239
included in a log and the benefit of

115
00:04:15,239 --> 00:04:16,918
this is much like with certificate

116
00:04:16,918 --> 00:04:19,798
transparency it allows the verifier to

117
00:04:19,798 --> 00:04:21,478
know that an artifact owner can be

118
00:04:21,478 --> 00:04:23,520
monitoring to see how their identity and

119
00:04:23,520 --> 00:04:25,680
their artifact shows up in the log maybe

120
00:04:25,680 --> 00:04:27,660
they have some requirement that an

121
00:04:27,660 --> 00:04:29,520
artifact will only show up once in a log

122
00:04:29,520 --> 00:04:32,180
for example

123
00:04:32,820 --> 00:04:35,699
this is a an overview of all of six

124
00:04:35,699 --> 00:04:36,960
store putting all the pieces together

125
00:04:36,960 --> 00:04:38,940
and the main thing to take away from

126
00:04:38,940 --> 00:04:40,680
this diagram is that I've also mentioned

127
00:04:40,680 --> 00:04:43,560
cosine this is the command line utility

128
00:04:43,560 --> 00:04:46,320
that sigstore has created that enables

129
00:04:46,320 --> 00:04:48,840
artifact and container signing and

130
00:04:48,840 --> 00:04:50,100
verification

131
00:04:50,100 --> 00:04:52,380
and it's not the only tool within the

132
00:04:52,380 --> 00:04:54,660
sixth or ecosystem too we also have some

133
00:04:54,660 --> 00:04:57,240
command line utilities such as six star

134
00:04:57,240 --> 00:05:00,300
python or six door JS that are actively

135
00:05:00,300 --> 00:05:02,280
being developed that allow you to

136
00:05:02,280 --> 00:05:03,840
interact with the services within six

137
00:05:03,840 --> 00:05:06,080
store

138
00:05:07,020 --> 00:05:08,759
so one question that comes up a lot is

139
00:05:08,759 --> 00:05:10,680
do I actually need to rely on the public

140
00:05:10,680 --> 00:05:12,960
instances of six store or can I rely on

141
00:05:12,960 --> 00:05:15,000
the private ones like I mentioned we

142
00:05:15,000 --> 00:05:18,120
operate free to use public instances and

143
00:05:18,120 --> 00:05:21,660
these have a SLO of three nines we have

144
00:05:21,660 --> 00:05:23,940
an on-call team staff to monitor these

145
00:05:23,940 --> 00:05:26,220
services and we had recently back in

146
00:05:26,220 --> 00:05:28,620
October went General availability or GA

147
00:05:28,620 --> 00:05:30,660
for these Services declaring that these

148
00:05:30,660 --> 00:05:32,400
can now be used in production workflows

149
00:05:32,400 --> 00:05:34,380
with more confidence

150
00:05:34,380 --> 00:05:36,300
but organizations may have other

151
00:05:36,300 --> 00:05:38,280
requirements and want to have their own

152
00:05:38,280 --> 00:05:39,660
private instances of them

153
00:05:39,660 --> 00:05:41,639
this could be for performance reasons

154
00:05:41,639 --> 00:05:44,039
maybe three nines is not sufficient and

155
00:05:44,039 --> 00:05:45,539
the organization needs to have higher

156
00:05:45,539 --> 00:05:47,340
availability

157
00:05:47,340 --> 00:05:49,500
compliance is also another reason for

158
00:05:49,500 --> 00:05:51,419
example maybe the organization has data

159
00:05:51,419 --> 00:05:54,240
residency requirements and requires that

160
00:05:54,240 --> 00:05:56,400
the data get that gets generally as part

161
00:05:56,400 --> 00:05:58,380
of the system live in a geographic

162
00:05:58,380 --> 00:06:01,080
region near theirs whereas the public

163
00:06:01,080 --> 00:06:04,259
instance operates out of the U.S region

164
00:06:04,259 --> 00:06:06,419
another compliance reason may be that

165
00:06:06,419 --> 00:06:07,740
there's a requirement that the

166
00:06:07,740 --> 00:06:10,139
organization control roots of trust for

167
00:06:10,139 --> 00:06:11,820
example the certificate Authority

168
00:06:11,820 --> 00:06:13,919
signing key or the signing key that's

169
00:06:13,919 --> 00:06:15,419
associated with the transparency log

170
00:06:15,419 --> 00:06:19,020
used for generating proofs

171
00:06:19,020 --> 00:06:21,180
another one is privacy and this is one

172
00:06:21,180 --> 00:06:24,120
that comes up uh fairly frequently

173
00:06:24,120 --> 00:06:27,240
the identities that are included in

174
00:06:27,240 --> 00:06:29,280
certificates are written to these public

175
00:06:29,280 --> 00:06:31,259
logs and these identities like I said

176
00:06:31,259 --> 00:06:33,479
could include emails it could include

177
00:06:33,479 --> 00:06:35,280
service accounts associated with private

178
00:06:35,280 --> 00:06:37,740
projects it could include workflow

179
00:06:37,740 --> 00:06:39,180
information associated with private

180
00:06:39,180 --> 00:06:41,759
repositories and organizations may not

181
00:06:41,759 --> 00:06:43,520
want this information

182
00:06:43,520 --> 00:06:46,620
publicly available so these are all

183
00:06:46,620 --> 00:06:48,780
reasons that organizations might want to

184
00:06:48,780 --> 00:06:51,960
operate a private six store

185
00:06:51,960 --> 00:06:53,759
so for the rest of this talk I'll give

186
00:06:53,759 --> 00:06:56,460
some recommendations of how to set up a

187
00:06:56,460 --> 00:06:59,400
secure instance of Sig store within a

188
00:06:59,400 --> 00:07:01,160
private organization

189
00:07:01,160 --> 00:07:03,539
and this setup should give you the same

190
00:07:03,539 --> 00:07:05,639
guarantees that we have with the public

191
00:07:05,639 --> 00:07:06,780
instance

192
00:07:06,780 --> 00:07:08,520
note that I'm not going to talk about

193
00:07:08,520 --> 00:07:10,620
how to actually deploy Sig store for

194
00:07:10,620 --> 00:07:12,000
example how to harden your kubernetes

195
00:07:12,000 --> 00:07:13,740
environment or set up apples

196
00:07:13,740 --> 00:07:15,900
appropriately they'll mention at the end

197
00:07:15,900 --> 00:07:17,039
a slack Channel where if you're

198
00:07:17,039 --> 00:07:19,080
interested in that there are some folks

199
00:07:19,080 --> 00:07:20,639
within the sigster community that are

200
00:07:20,639 --> 00:07:23,280
working on how to simplify deployment

201
00:07:23,280 --> 00:07:26,059
for six or two

202
00:07:26,280 --> 00:07:28,340
so to start let's talk about

203
00:07:28,340 --> 00:07:30,360
self-managed pki or public key

204
00:07:30,360 --> 00:07:32,160
infrastructure and there's two things

205
00:07:32,160 --> 00:07:34,740
I'll discuss here one is managing

206
00:07:34,740 --> 00:07:38,160
artifact signing keys in contrast to

207
00:07:38,160 --> 00:07:41,220
ephemeral signing keys and another is

208
00:07:41,220 --> 00:07:44,759
managed private Cas in contrast to the

209
00:07:44,759 --> 00:07:47,419
full Coca

210
00:07:48,900 --> 00:07:50,639
when we talk about artifacts signing

211
00:07:50,639 --> 00:07:52,199
Keys we typically talk about three

212
00:07:52,199 --> 00:07:54,479
problems distribution storage and

213
00:07:54,479 --> 00:07:56,160
compromise

214
00:07:56,160 --> 00:07:59,539
distribution is the process of

215
00:07:59,539 --> 00:08:03,180
Distributing the map from a signing key

216
00:08:03,180 --> 00:08:06,900
or a verification key to an artifact

217
00:08:06,900 --> 00:08:08,699
frequently what happens is we end up

218
00:08:08,699 --> 00:08:10,800
relying on Trust on first use or tofu

219
00:08:10,800 --> 00:08:13,220
and we see this for example with SSH

220
00:08:13,220 --> 00:08:15,720
when you first log into an SSH server

221
00:08:15,720 --> 00:08:16,919
you're prompted to remember a key

222
00:08:16,919 --> 00:08:19,259
fingerprints and if the server's key

223
00:08:19,259 --> 00:08:20,879
changes for any reason you're presented

224
00:08:20,879 --> 00:08:22,139
with a dialog

225
00:08:22,139 --> 00:08:24,900
but frequently users simply click

226
00:08:24,900 --> 00:08:26,879
through that and ignore it and so what

227
00:08:26,879 --> 00:08:28,560
we want to do is design a system that

228
00:08:28,560 --> 00:08:31,139
removes the need to rely on Trust on

229
00:08:31,139 --> 00:08:32,760
first use

230
00:08:32,760 --> 00:08:34,620
another consideration with managed

231
00:08:34,620 --> 00:08:37,440
artifact signing Keys is storage where

232
00:08:37,440 --> 00:08:38,940
do you actually store the signing key

233
00:08:38,940 --> 00:08:40,559
are you going to put it on a flash drive

234
00:08:40,559 --> 00:08:42,479
do you encrypt that flash drive what

235
00:08:42,479 --> 00:08:44,640
happens if you lose that flash drive are

236
00:08:44,640 --> 00:08:46,740
you going to put the key in a cloud

237
00:08:46,740 --> 00:08:48,899
project what happens if there is shared

238
00:08:48,899 --> 00:08:50,839
access to that project

239
00:08:50,839 --> 00:08:53,519
and how do you also audit access to that

240
00:08:53,519 --> 00:08:55,320
signing key to make sure there's not any

241
00:08:55,320 --> 00:08:57,660
unexpected access

242
00:08:57,660 --> 00:08:59,160
and this comes to the final point which

243
00:08:59,160 --> 00:09:01,980
is compromise inevitably compromise does

244
00:09:01,980 --> 00:09:06,180
happen and how do you mark a key as no

245
00:09:06,180 --> 00:09:08,700
longer trusted revoke that key

246
00:09:08,700 --> 00:09:12,120
within webpki the way this is done is

247
00:09:12,120 --> 00:09:13,920
relying on certificate revocation lists

248
00:09:13,920 --> 00:09:16,320
these are lists that Cas maintain that

249
00:09:16,320 --> 00:09:18,120
have a list of certificates that should

250
00:09:18,120 --> 00:09:19,680
no longer be trusted

251
00:09:19,680 --> 00:09:22,019
but certificate revocation lists are

252
00:09:22,019 --> 00:09:23,700
very difficult to work with they can

253
00:09:23,700 --> 00:09:25,740
grow indefinitely they're difficult to

254
00:09:25,740 --> 00:09:27,300
ship to clients clients have to figure

255
00:09:27,300 --> 00:09:29,519
out some Cadence to fetch these and

256
00:09:29,519 --> 00:09:30,779
they're also hard to search once they

257
00:09:30,779 --> 00:09:32,700
grow really large

258
00:09:32,700 --> 00:09:34,620
so this is another thing to consider

259
00:09:34,620 --> 00:09:36,959
when managing artifacts signing Keys

260
00:09:36,959 --> 00:09:39,300
which is what does your revocation Story

261
00:09:39,300 --> 00:09:41,720
look like and are you able to

262
00:09:41,720 --> 00:09:43,680
efficiently work with really large

263
00:09:43,680 --> 00:09:46,620
reputation lists

264
00:09:46,620 --> 00:09:49,500
and this is why Sig store defaults to

265
00:09:49,500 --> 00:09:52,080
ephemeral signing Keys the idea is that

266
00:09:52,080 --> 00:09:54,839
for assigning events Sig store or the

267
00:09:54,839 --> 00:09:56,640
command line utilities is going to

268
00:09:56,640 --> 00:09:59,220
generate a single signing key that will

269
00:09:59,220 --> 00:10:01,260
be thrown away after the signing event

270
00:10:01,260 --> 00:10:03,480
and then we associate that verification

271
00:10:03,480 --> 00:10:05,399
key with some stable identifier that

272
00:10:05,399 --> 00:10:07,620
comes from an identity token

273
00:10:07,620 --> 00:10:09,779
but private organizations may not want

274
00:10:09,779 --> 00:10:12,120
this they may already have an existing

275
00:10:12,120 --> 00:10:13,740
system in place for managing artifact

276
00:10:13,740 --> 00:10:16,260
signing keys and sixstore works

277
00:10:16,260 --> 00:10:18,779
perfectly fine with artifact signing

278
00:10:18,779 --> 00:10:20,459
keys for example when I mentioned the

279
00:10:20,459 --> 00:10:21,959
recore I said that we can upload

280
00:10:21,959 --> 00:10:24,959
certificates we can also upload artifact

281
00:10:24,959 --> 00:10:27,600
signing Keys too

282
00:10:27,600 --> 00:10:28,860
um I wrote a blog post a little while

283
00:10:28,860 --> 00:10:30,660
ago called adopting sixth or

284
00:10:30,660 --> 00:10:31,800
incrementally that kind of talked

285
00:10:31,800 --> 00:10:33,720
through this problem it assumed that an

286
00:10:33,720 --> 00:10:35,580
organization doesn't want to go from a

287
00:10:35,580 --> 00:10:37,320
point where they have managed signing

288
00:10:37,320 --> 00:10:38,580
Keys jumping all the way to what we

289
00:10:38,580 --> 00:10:40,260
sometimes call keyless signing or this

290
00:10:40,260 --> 00:10:42,060
identity based signing

291
00:10:42,060 --> 00:10:44,399
and one of the intermediate steps was

292
00:10:44,399 --> 00:10:46,560
that you can issue identity-based

293
00:10:46,560 --> 00:10:49,079
certificates for long-lived keys or for

294
00:10:49,079 --> 00:10:51,959
managed keys folsio doesn't enforce

295
00:10:51,959 --> 00:10:53,940
ephemerality it doesn't have state and

296
00:10:53,940 --> 00:10:56,700
track if it's seen a key before so the

297
00:10:56,700 --> 00:10:58,380
question really comes down to what do

298
00:10:58,380 --> 00:10:59,940
you want your verification policy to

299
00:10:59,940 --> 00:11:02,220
look like would you prefer having keys

300
00:11:02,220 --> 00:11:04,500
mapped to artifacts or certificate sorry

301
00:11:04,500 --> 00:11:07,980
identities mapped to artifacts

302
00:11:07,980 --> 00:11:09,540
um we have found that identities are a

303
00:11:09,540 --> 00:11:11,700
little bit easier because we expect that

304
00:11:11,700 --> 00:11:14,700
users already have an identity to use

305
00:11:14,700 --> 00:11:17,339
and very frequently that identity is

306
00:11:17,339 --> 00:11:20,100
already publicly mapped to the artifacts

307
00:11:20,100 --> 00:11:21,959
Maybe by association maybe by the

308
00:11:21,959 --> 00:11:24,420
identity being specified in a repository

309
00:11:24,420 --> 00:11:27,240
but if an organization already has the

310
00:11:27,240 --> 00:11:28,860
right policies in place there's nothing

311
00:11:28,860 --> 00:11:30,720
preventing them from using artifacts

312
00:11:30,720 --> 00:11:33,320
Simon keys

313
00:11:34,019 --> 00:11:35,899
switching topics now let's talk about

314
00:11:35,899 --> 00:11:39,899
the ca side of things many organizations

315
00:11:39,899 --> 00:11:43,140
already have managed Cas these could be

316
00:11:43,140 --> 00:11:45,779
through things like step CA or through a

317
00:11:45,779 --> 00:11:48,899
cloud providers such as gcp or AWS

318
00:11:48,899 --> 00:11:50,820
and six store will work out of the box

319
00:11:50,820 --> 00:11:53,760
with certificates issued from NECA not

320
00:11:53,760 --> 00:11:56,220
just full CO as long as they conform to

321
00:11:56,220 --> 00:11:59,040
the full SEO certificate profile this

322
00:11:59,040 --> 00:12:00,420
includes things like setting the

323
00:12:00,420 --> 00:12:01,980
identity in the subject alternative name

324
00:12:01,980 --> 00:12:03,420
and this example here I've shown an

325
00:12:03,420 --> 00:12:06,300
email including an extension that

326
00:12:06,300 --> 00:12:09,060
specifies an issuer which is the oidc

327
00:12:09,060 --> 00:12:11,100
provider that issued an identity token

328
00:12:11,100 --> 00:12:13,620
and optionally including an extension

329
00:12:13,620 --> 00:12:16,740
that this here is called an SCT which

330
00:12:16,740 --> 00:12:19,200
roughly is a proof that something showed

331
00:12:19,200 --> 00:12:22,700
up in a transparency log

332
00:12:22,920 --> 00:12:24,420
um you'll hear me say Key Management a

333
00:12:24,420 --> 00:12:25,980
lot throughout this talk this is a

334
00:12:25,980 --> 00:12:27,300
common problem

335
00:12:27,300 --> 00:12:29,160
um not just with artifacts signing keys

336
00:12:29,160 --> 00:12:30,899
but also with the services that are

337
00:12:30,899 --> 00:12:32,940
managed and have signing keys and this

338
00:12:32,940 --> 00:12:34,920
is something to consider with managed

339
00:12:34,920 --> 00:12:38,820
Cas too if the signing key for the ca

340
00:12:38,820 --> 00:12:43,200
gets compromised a attacker could mint

341
00:12:43,200 --> 00:12:45,240
certificates for any arbitrary identity

342
00:12:45,240 --> 00:12:48,779
by passing any sort of authorization

343
00:12:48,779 --> 00:12:50,940
checks

344
00:12:50,940 --> 00:12:53,300
something else to consider is rotation

345
00:12:53,300 --> 00:12:56,700
CA certificates expire or in the event

346
00:12:56,700 --> 00:12:58,260
of a compromise you may have to rotate

347
00:12:58,260 --> 00:12:59,040
it

348
00:12:59,040 --> 00:13:01,019
and so as an organization you need to

349
00:13:01,019 --> 00:13:03,600
have some policy in place that lets you

350
00:13:03,600 --> 00:13:05,820
rotate out certificates in a secure way

351
00:13:05,820 --> 00:13:07,560
without giving attackers an opportunity

352
00:13:07,560 --> 00:13:09,959
to inject their own CA certificates and

353
00:13:09,959 --> 00:13:11,700
own trust routes and at the end of this

354
00:13:11,700 --> 00:13:12,839
talk we'll talk a little bit about how

355
00:13:12,839 --> 00:13:13,920
we do that within the production

356
00:13:13,920 --> 00:13:17,060
environment of sixstore

357
00:13:18,120 --> 00:13:20,519
if you don't already have a managed CA

358
00:13:20,519 --> 00:13:23,160
another option is simply to operate a

359
00:13:23,160 --> 00:13:25,620
private instance of fulsio from the open

360
00:13:25,620 --> 00:13:28,079
source Repository

361
00:13:28,079 --> 00:13:30,540
the same Key Management considerations

362
00:13:30,540 --> 00:13:32,220
are important here folsio has the

363
00:13:32,220 --> 00:13:34,440
concept of signing back-ends which are

364
00:13:34,440 --> 00:13:36,540
roughly where the signing key lives in

365
00:13:36,540 --> 00:13:38,160
this example here I show it's within a

366
00:13:38,160 --> 00:13:39,300
cloud environment

367
00:13:39,300 --> 00:13:42,120
within KMS and once again you need to

368
00:13:42,120 --> 00:13:43,920
make sure that access controls are

369
00:13:43,920 --> 00:13:46,079
appropriate and that access to that key

370
00:13:46,079 --> 00:13:48,620
is locked down

371
00:13:48,779 --> 00:13:50,700
we'll talk more about transparency logs

372
00:13:50,700 --> 00:13:51,899
in a moment but I think it's worth

373
00:13:51,899 --> 00:13:53,579
noting here that I also believe that

374
00:13:53,579 --> 00:13:55,139
it's critical that you operate a

375
00:13:55,139 --> 00:13:57,060
certificate transparency log even within

376
00:13:57,060 --> 00:13:59,339
a private environment even if you won't

377
00:13:59,339 --> 00:14:02,700
have these certificates public

378
00:14:02,700 --> 00:14:04,620
because this will give you an immutable

379
00:14:04,620 --> 00:14:06,240
issuance log

380
00:14:06,240 --> 00:14:08,700
such that an auditor can verify how

381
00:14:08,700 --> 00:14:10,680
identities are showing up in a log and

382
00:14:10,680 --> 00:14:11,639
make sure that there's not anything

383
00:14:11,639 --> 00:14:14,700
unexpected and this is beneficial too in

384
00:14:14,700 --> 00:14:17,040
the case of compromise of a CA signing

385
00:14:17,040 --> 00:14:17,760
key

386
00:14:17,760 --> 00:14:19,860
if a CA signing key is compromised

387
00:14:19,860 --> 00:14:22,800
either an attacker will up have to

388
00:14:22,800 --> 00:14:24,240
upload that certificate to a

389
00:14:24,240 --> 00:14:25,800
transparency log effectively forcing

390
00:14:25,800 --> 00:14:28,620
attackers into the open or they'll omit

391
00:14:28,620 --> 00:14:30,120
the certificate from a transparency log

392
00:14:30,120 --> 00:14:31,740
at which point verifier should simply

393
00:14:31,740 --> 00:14:34,940
not trust the certificate

394
00:14:35,639 --> 00:14:37,519
so now let's talk a little bit about

395
00:14:37,519 --> 00:14:40,440
private transparency logs

396
00:14:40,440 --> 00:14:42,180
and before we do that I'll talk a little

397
00:14:42,180 --> 00:14:44,459
bit about what a transparency log

398
00:14:44,459 --> 00:14:46,019
actually is

399
00:14:46,019 --> 00:14:48,180
if you're familiar with blockchain you

400
00:14:48,180 --> 00:14:49,320
might have heard of this data structure

401
00:14:49,320 --> 00:14:52,440
before which are Merkle trees and this

402
00:14:52,440 --> 00:14:54,720
is a representation of a Merkle Tree on

403
00:14:54,720 --> 00:14:56,940
the right here roughly the leaf nodes of

404
00:14:56,940 --> 00:14:59,100
the tree are hashes of what's going into

405
00:14:59,100 --> 00:15:01,800
the tree and then the parent nodes are

406
00:15:01,800 --> 00:15:03,600
hashes of the concatenation of their

407
00:15:03,600 --> 00:15:05,220
children

408
00:15:05,220 --> 00:15:08,940
and this construction uh allows you to

409
00:15:08,940 --> 00:15:11,220
calculate certain types of proofs over

410
00:15:11,220 --> 00:15:13,680
this tree and one of them is called

411
00:15:13,680 --> 00:15:16,139
inclusion proofs these are cryptographic

412
00:15:16,139 --> 00:15:17,940
proofs that allow you to show that an

413
00:15:17,940 --> 00:15:21,480
entry actually is in the tree

414
00:15:21,480 --> 00:15:24,600
another type of proof is what's called a

415
00:15:24,600 --> 00:15:26,459
consistency proof and a consistency

416
00:15:26,459 --> 00:15:29,160
proof says that between any two points

417
00:15:29,160 --> 00:15:31,139
in the log points defined by size let's

418
00:15:31,139 --> 00:15:34,500
say size 2 and size 10. we guarantee

419
00:15:34,500 --> 00:15:36,920
that the tree remains

420
00:15:36,920 --> 00:15:39,240
append only

421
00:15:39,240 --> 00:15:42,120
uh meaning that's between those two

422
00:15:42,120 --> 00:15:45,000
points what's in the tree uh was not

423
00:15:45,000 --> 00:15:47,160
modified or removed

424
00:15:47,160 --> 00:15:48,899
and over time this gives you the

425
00:15:48,899 --> 00:15:51,899
property of immutability that trees can

426
00:15:51,899 --> 00:15:54,720
only be appended to and not removed from

427
00:15:54,720 --> 00:15:58,260
or mutated more accurately the mechanism

428
00:15:58,260 --> 00:16:00,500
lets you detect any sort of mutations

429
00:16:00,500 --> 00:16:02,940
over time

430
00:16:02,940 --> 00:16:04,500
there's many applications of

431
00:16:04,500 --> 00:16:07,380
transparency logs we saw certificate

432
00:16:07,380 --> 00:16:09,779
transparency as one example a binary

433
00:16:09,779 --> 00:16:13,019
transparency this is things like recore

434
00:16:13,019 --> 00:16:15,000
on key transparency is another one that

435
00:16:15,000 --> 00:16:17,100
I want to mention which is useful within

436
00:16:17,100 --> 00:16:18,839
the end-to-end encrypted messaging space

437
00:16:18,839 --> 00:16:21,720
that give you a publicly auditable

438
00:16:21,720 --> 00:16:26,000
mapping between keys and identities

439
00:16:29,519 --> 00:16:31,279
within sigstore

440
00:16:31,279 --> 00:16:34,260
we have two primary uses for

441
00:16:34,260 --> 00:16:36,540
transparency logs one is that fulsio

442
00:16:36,540 --> 00:16:38,699
writes its issued certificates to a

443
00:16:38,699 --> 00:16:40,560
certificate transparency log

444
00:16:40,560 --> 00:16:42,120
and also that recore entries are

445
00:16:42,120 --> 00:16:44,040
appended to a transparency log which is

446
00:16:44,040 --> 00:16:45,600
sometimes a superset of what goes into

447
00:16:45,600 --> 00:16:48,779
folsio but there may be use cases where

448
00:16:48,779 --> 00:16:50,579
you only want false here or only want

449
00:16:50,579 --> 00:16:53,060
recore

450
00:16:56,600 --> 00:16:59,100
these are all questions that I've heard

451
00:16:59,100 --> 00:17:01,079
at some point when discussing with

452
00:17:01,079 --> 00:17:03,180
maintainers or community members which

453
00:17:03,180 --> 00:17:05,760
is do I actually need a transparency log

454
00:17:05,760 --> 00:17:07,559
if I'm going to be operating in a

455
00:17:07,559 --> 00:17:09,419
private environment and I'll try to

456
00:17:09,419 --> 00:17:10,919
convince you that I do think it's

457
00:17:10,919 --> 00:17:13,199
necessary to operate one

458
00:17:13,199 --> 00:17:15,359
question is well what if I already have

459
00:17:15,359 --> 00:17:17,880
an existing system for audit logging for

460
00:17:17,880 --> 00:17:20,640
example maybe you're on a cloud platform

461
00:17:20,640 --> 00:17:24,140
that already has audit logs

462
00:17:24,299 --> 00:17:27,359
one benefit of operating a transparency

463
00:17:27,359 --> 00:17:29,820
log is that it allows you a few things

464
00:17:29,820 --> 00:17:32,100
one it allows you to move a transparency

465
00:17:32,100 --> 00:17:34,020
log into a different environment let's

466
00:17:34,020 --> 00:17:36,120
say a different cloud provider so that

467
00:17:36,120 --> 00:17:37,380
you're operating at different trust

468
00:17:37,380 --> 00:17:40,500
boundary and it reduces uh the risk of

469
00:17:40,500 --> 00:17:43,020
compromise either due to an Insider risk

470
00:17:43,020 --> 00:17:44,820
compromise or even compromise of the

471
00:17:44,820 --> 00:17:47,059
cloud platform itself

472
00:17:47,059 --> 00:17:50,039
maybe a Insider is able to mutate the

473
00:17:50,039 --> 00:17:51,539
audit logs maybe they're not immutable

474
00:17:51,539 --> 00:17:53,340
maybe the cloud platform itself has a

475
00:17:53,340 --> 00:17:56,880
bug or has some compromise

476
00:17:56,880 --> 00:17:58,919
so with a transparency log we can move

477
00:17:58,919 --> 00:18:01,980
it to a different trust boundary and

478
00:18:01,980 --> 00:18:04,740
have additional confidence that's in the

479
00:18:04,740 --> 00:18:06,440
event of a compromise

480
00:18:06,440 --> 00:18:10,100
only either the log or the

481
00:18:10,100 --> 00:18:13,320
platform where things are signs gets

482
00:18:13,320 --> 00:18:15,419
compromised

483
00:18:15,419 --> 00:18:18,179
another question is what if the

484
00:18:18,179 --> 00:18:19,559
artifacts that are being signed

485
00:18:19,559 --> 00:18:22,320
privately will ever be released publicly

486
00:18:22,320 --> 00:18:25,380
and I mentioned this one because if

487
00:18:25,380 --> 00:18:27,000
you're operating a private transparency

488
00:18:27,000 --> 00:18:29,280
log and not making it public but then

489
00:18:29,280 --> 00:18:30,840
you take an artifact that's been signed

490
00:18:30,840 --> 00:18:32,400
privately even if it's on a private

491
00:18:32,400 --> 00:18:34,500
transparency log and release it publicly

492
00:18:34,500 --> 00:18:37,440
the problem is that as a verifier I have

493
00:18:37,440 --> 00:18:40,380
no way of computing and inclusion proof

494
00:18:40,380 --> 00:18:42,059
to check that an entry is actually in

495
00:18:42,059 --> 00:18:44,700
the log and I also can't calculate

496
00:18:44,700 --> 00:18:47,840
consistency proofs that the the log

497
00:18:47,840 --> 00:18:50,760
remains immutable and I mentioned this

498
00:18:50,760 --> 00:18:51,840
because I think it's worth considering

499
00:18:51,840 --> 00:18:53,760
when deciding on whether or not you need

500
00:18:53,760 --> 00:18:56,460
a private transparency log if your

501
00:18:56,460 --> 00:18:57,780
artifacts are going to be released

502
00:18:57,780 --> 00:19:00,240
publicly it's likely that it's valuable

503
00:19:00,240 --> 00:19:03,900
to rely on the public transparency log

504
00:19:03,900 --> 00:19:06,600
another question is well can I just use

505
00:19:06,600 --> 00:19:08,520
a database if let's say I already have

506
00:19:08,520 --> 00:19:11,700
an existing audit logging system

507
00:19:11,700 --> 00:19:13,140
um and I think what this really comes

508
00:19:13,140 --> 00:19:14,940
down to is do you want an immutable

509
00:19:14,940 --> 00:19:17,700
record a database is not going to be

510
00:19:17,700 --> 00:19:20,580
immutable and once again it's it's prone

511
00:19:20,580 --> 00:19:23,820
to Insider risk or compromise and so to

512
00:19:23,820 --> 00:19:25,380
me I think transparency logs are really

513
00:19:25,380 --> 00:19:27,240
critical because they provide this

514
00:19:27,240 --> 00:19:28,740
immutable record

515
00:19:28,740 --> 00:19:30,480
now one detailed that I think is worth

516
00:19:30,480 --> 00:19:32,700
noting is how you actually get this

517
00:19:32,700 --> 00:19:34,740
property of immutability

518
00:19:34,740 --> 00:19:37,620
and that's by relying on monitors within

519
00:19:37,620 --> 00:19:39,120
the transparency log space monitoring is

520
00:19:39,120 --> 00:19:40,919
a little bit of an overloaded term I've

521
00:19:40,919 --> 00:19:43,679
said monitors a lot so far referring to

522
00:19:43,679 --> 00:19:45,480
Identity monitoring where you are

523
00:19:45,480 --> 00:19:47,940
querying the log periodically asking for

524
00:19:47,940 --> 00:19:49,500
every entry in the log and doing

525
00:19:49,500 --> 00:19:51,299
introspection on the entries in the log

526
00:19:51,299 --> 00:19:55,679
to look for certain expected identities

527
00:19:55,679 --> 00:19:58,559
this type of monitor the expectation is

528
00:19:58,559 --> 00:20:01,440
that it's there to calculate consistency

529
00:20:01,440 --> 00:20:03,840
proofs so periodically it will query the

530
00:20:03,840 --> 00:20:05,700
log and say what's the current state of

531
00:20:05,700 --> 00:20:06,660
the log

532
00:20:06,660 --> 00:20:09,539
it will then query the log again some

533
00:20:09,539 --> 00:20:12,780
size later and calculate a consistency

534
00:20:12,780 --> 00:20:14,640
proof between those two points

535
00:20:14,640 --> 00:20:17,460
and if the log is not able to present a

536
00:20:17,460 --> 00:20:19,740
valid consistency proof and the monitor

537
00:20:19,740 --> 00:20:22,380
is not able to verify it then there's an

538
00:20:22,380 --> 00:20:23,880
expectation the monitor should alert the

539
00:20:23,880 --> 00:20:24,919
ecosystem

540
00:20:24,919 --> 00:20:29,480
to a potential compromise

541
00:20:29,520 --> 00:20:30,960
but another very important role of

542
00:20:30,960 --> 00:20:32,400
monitors is to prevent what's called

543
00:20:32,400 --> 00:20:34,559
split view attacks and this is really

544
00:20:34,559 --> 00:20:35,940
where everything kind of comes together

545
00:20:35,940 --> 00:20:38,039
so split view attacks are where the log

546
00:20:38,039 --> 00:20:39,960
presents different views to different

547
00:20:39,960 --> 00:20:42,179
callers and each view can look

548
00:20:42,179 --> 00:20:44,660
consistent but

549
00:20:44,660 --> 00:20:47,340
uh the contents of what's being

550
00:20:47,340 --> 00:20:48,780
presented might look different for

551
00:20:48,780 --> 00:20:51,179
example maybe the log is malicious and

552
00:20:51,179 --> 00:20:54,059
chooses to uh show nothing to some

553
00:20:54,059 --> 00:20:56,220
verifier effectively causing a denial of

554
00:20:56,220 --> 00:20:58,320
service or maybe they choose to Omit

555
00:20:58,320 --> 00:21:00,179
entries maybe the logs even secretly

556
00:21:00,179 --> 00:21:03,539
adding entries in unexpectedly

557
00:21:03,539 --> 00:21:04,740
and this is why it's important for

558
00:21:04,740 --> 00:21:06,360
monitors to do what's called gossiping

559
00:21:06,360 --> 00:21:07,980
where the monitors share their current

560
00:21:07,980 --> 00:21:10,020
state with other monitors

561
00:21:10,020 --> 00:21:12,120
and if all monitors see that they

562
00:21:12,120 --> 00:21:13,679
currently see the same state in the log

563
00:21:13,679 --> 00:21:15,480
we can have some confidence that there

564
00:21:15,480 --> 00:21:17,039
is not a split view attack it's

565
00:21:17,039 --> 00:21:18,539
important that we operate more and more

566
00:21:18,539 --> 00:21:21,480
monitors in order to feel more confident

567
00:21:21,480 --> 00:21:22,799
that a split view attack is not

568
00:21:22,799 --> 00:21:24,840
occurring

569
00:21:24,840 --> 00:21:26,039
um once again like how I mentioned that

570
00:21:26,039 --> 00:21:28,080
it's uh important that a transparency

571
00:21:28,080 --> 00:21:29,580
log be operated in a different trust

572
00:21:29,580 --> 00:21:31,440
boundary it's also important that the

573
00:21:31,440 --> 00:21:32,940
monitor run in a different trust

574
00:21:32,940 --> 00:21:35,400
boundary than the log because if the log

575
00:21:35,400 --> 00:21:37,440
becomes compromised and it's in the same

576
00:21:37,440 --> 00:21:39,539
trust boundary as the monitor an

577
00:21:39,539 --> 00:21:41,880
attacker might be able to shut down the

578
00:21:41,880 --> 00:21:43,940
Monitor and you wouldn't be notified

579
00:21:43,940 --> 00:21:46,320
when uh

580
00:21:46,320 --> 00:21:49,200
something malicious is occurring

581
00:21:49,200 --> 00:21:51,600
I've left a couple links here to some of

582
00:21:51,600 --> 00:21:53,280
the monitors that we're working on one

583
00:21:53,280 --> 00:21:55,260
of which is in the six door organization

584
00:21:55,260 --> 00:21:57,179
called record monitor this is something

585
00:21:57,179 --> 00:21:59,400
that I along with Purdue University have

586
00:21:59,400 --> 00:22:01,799
been working on this can run on GitHub

587
00:22:01,799 --> 00:22:03,720
actions which is useful for monitoring

588
00:22:03,720 --> 00:22:06,240
public transparency logs but you can

589
00:22:06,240 --> 00:22:08,340
also operate this yourself

590
00:22:08,340 --> 00:22:10,919
another monitor was created by the team

591
00:22:10,919 --> 00:22:13,260
behind trillion a trillions a scalable

592
00:22:13,260 --> 00:22:14,940
Merkle tree service and this is actually

593
00:22:14,940 --> 00:22:17,400
what backs recore and certificate

594
00:22:17,400 --> 00:22:19,020
transparency

595
00:22:19,020 --> 00:22:20,220
um if you're interested in talking more

596
00:22:20,220 --> 00:22:22,740
about monitors I'm happy to do so after

597
00:22:22,740 --> 00:22:25,159
the talk

598
00:22:25,620 --> 00:22:28,020
so next Let's Talk About Time stamping

599
00:22:28,020 --> 00:22:30,600
this is a really critical component of

600
00:22:30,600 --> 00:22:32,580
sigstore

601
00:22:32,580 --> 00:22:34,380
that is because the certificates that

602
00:22:34,380 --> 00:22:36,360
get issued by falsio are very

603
00:22:36,360 --> 00:22:40,020
short-lived this is in contrast to SSL

604
00:22:40,020 --> 00:22:41,580
certificates that are typically issued

605
00:22:41,580 --> 00:22:43,860
for 30 days 90 days a year it could even

606
00:22:43,860 --> 00:22:46,380
be more than that

607
00:22:46,380 --> 00:22:48,659
and one issue with the system is if for

608
00:22:48,659 --> 00:22:50,039
some reason the signing key material

609
00:22:50,039 --> 00:22:51,900
gets compromised you're going to have to

610
00:22:51,900 --> 00:22:53,820
revoke the certificate this means that

611
00:22:53,820 --> 00:22:55,200
you now have to rely on certificate

612
00:22:55,200 --> 00:22:56,760
revocation lists

613
00:22:56,760 --> 00:22:58,380
and we didn't want to have to rely on

614
00:22:58,380 --> 00:23:02,940
those for Sig store issued certificates

615
00:23:02,940 --> 00:23:04,679
so we issue very short-lived

616
00:23:04,679 --> 00:23:06,659
certificates in this example just for 10

617
00:23:06,659 --> 00:23:07,919
minutes

618
00:23:07,919 --> 00:23:10,260
and when verifying it's less critical

619
00:23:10,260 --> 00:23:11,820
that we check that the certificate is

620
00:23:11,820 --> 00:23:13,200
still valid

621
00:23:13,200 --> 00:23:17,340
but that's the artifact was signed when

622
00:23:17,340 --> 00:23:19,620
the certificate was valid and for that

623
00:23:19,620 --> 00:23:22,020
we effectively need a witness some other

624
00:23:22,020 --> 00:23:25,320
entity to say I saw this signed artifact

625
00:23:25,320 --> 00:23:27,539
when the certificate was valid

626
00:23:27,539 --> 00:23:29,220
and typically we rely on the

627
00:23:29,220 --> 00:23:31,620
transparency log on recore for that

628
00:23:31,620 --> 00:23:33,539
whenever you upload an entry to recore

629
00:23:33,539 --> 00:23:36,780
it includes an integrated timestamp and

630
00:23:36,780 --> 00:23:39,360
when verifying its expected that you

631
00:23:39,360 --> 00:23:41,820
check that that integrated time falls in

632
00:23:41,820 --> 00:23:43,080
the window of validity for the

633
00:23:43,080 --> 00:23:46,320
certificate between the not valid before

634
00:23:46,320 --> 00:23:49,260
and not valid after period

635
00:23:49,260 --> 00:23:51,000
well one question is what if I don't

636
00:23:51,000 --> 00:23:53,100
want to operate a private instance of

637
00:23:53,100 --> 00:23:55,020
recore for some reason well another

638
00:23:55,020 --> 00:23:57,179
option is to rely on timestamp

639
00:23:57,179 --> 00:23:59,460
authorities and this is actually quite

640
00:23:59,460 --> 00:24:01,860
an older concept within this space

641
00:24:01,860 --> 00:24:03,360
timestamp authorities have been around

642
00:24:03,360 --> 00:24:05,460
for quite a while

643
00:24:05,460 --> 00:24:08,159
um but roughly the way it works is you

644
00:24:08,159 --> 00:24:10,679
have some trusted entity a timestamp

645
00:24:10,679 --> 00:24:11,760
Authority

646
00:24:11,760 --> 00:24:14,280
and it signs over a current time along

647
00:24:14,280 --> 00:24:15,960
with something associated with what

648
00:24:15,960 --> 00:24:17,640
you're verifying typically it's an

649
00:24:17,640 --> 00:24:19,500
artifact signature and this is called a

650
00:24:19,500 --> 00:24:21,780
counter signing

651
00:24:21,780 --> 00:24:24,539
and the sign the timestamp itself is

652
00:24:24,539 --> 00:24:26,340
signed so it can be verified and it's

653
00:24:26,340 --> 00:24:28,500
the same as with recore that's when you

654
00:24:28,500 --> 00:24:30,360
want to go verify a short-lived

655
00:24:30,360 --> 00:24:33,780
certificate you take the timestamp from

656
00:24:33,780 --> 00:24:36,120
the sign timestamp and you check that it

657
00:24:36,120 --> 00:24:37,860
falls in the window of validity for the

658
00:24:37,860 --> 00:24:40,399
certificate

659
00:24:40,559 --> 00:24:43,440
we can go one step further and use both

660
00:24:43,440 --> 00:24:46,380
a timestamp Authority and recore to have

661
00:24:46,380 --> 00:24:48,260
distributed Trust

662
00:24:48,260 --> 00:24:50,220
once again when I talk about trust

663
00:24:50,220 --> 00:24:52,200
boundaries you can take a time stamp

664
00:24:52,200 --> 00:24:53,640
Authority that you're operating yourself

665
00:24:53,640 --> 00:24:55,620
and put it in a different trust boundary

666
00:24:55,620 --> 00:24:57,960
than your transparency log a different

667
00:24:57,960 --> 00:24:59,700
trust boundary than your certificate

668
00:24:59,700 --> 00:25:02,159
authority to reduce the impact of a

669
00:25:02,159 --> 00:25:03,240
compromise

670
00:25:03,240 --> 00:25:06,440
you could also rely on a third party

671
00:25:06,440 --> 00:25:08,640
time stamp Authority for example

672
00:25:08,640 --> 00:25:11,760
digi-ser Apple operates some

673
00:25:11,760 --> 00:25:13,440
um and maybe you choose to trust them to

674
00:25:13,440 --> 00:25:15,480
be the witness and to provide the

675
00:25:15,480 --> 00:25:16,860
trusted time

676
00:25:16,860 --> 00:25:19,020
so in this example as a verifier what I

677
00:25:19,020 --> 00:25:21,720
would do is I would get the signed time

678
00:25:21,720 --> 00:25:23,760
stamp and the recour entry and I can

679
00:25:23,760 --> 00:25:26,220
simply ignore the integrated time from

680
00:25:26,220 --> 00:25:27,960
the record time stamp sorry from the

681
00:25:27,960 --> 00:25:29,460
record entry if I want

682
00:25:29,460 --> 00:25:32,159
and instead rely on the timestamp that

683
00:25:32,159 --> 00:25:34,500
comes from the timestamp authority when

684
00:25:34,500 --> 00:25:37,640
verifying the certificate

685
00:25:39,059 --> 00:25:42,000
so the last consideration is roots of

686
00:25:42,000 --> 00:25:44,520
trust and in particular how to ship

687
00:25:44,520 --> 00:25:47,520
these and how to securely rotate these

688
00:25:47,520 --> 00:25:48,720
um and like I mentioned earlier these

689
00:25:48,720 --> 00:25:50,820
roots of trusts within Sig store include

690
00:25:50,820 --> 00:25:54,360
the certificate uh the ca certificate

691
00:25:54,360 --> 00:25:55,159
chain

692
00:25:55,159 --> 00:25:57,900
and verification keys for the record

693
00:25:57,900 --> 00:26:00,980
transparency log

694
00:26:02,159 --> 00:26:03,840
um once again the problems of Key

695
00:26:03,840 --> 00:26:06,240
Management come up here with roots of

696
00:26:06,240 --> 00:26:08,419
trust how do you

697
00:26:08,419 --> 00:26:10,740
securely distribute them in such a way

698
00:26:10,740 --> 00:26:12,659
that an attacker isn't able to inject

699
00:26:12,659 --> 00:26:15,900
something into the trust route

700
00:26:15,900 --> 00:26:18,120
storage is another consideration how do

701
00:26:18,120 --> 00:26:19,980
you lock down wherever these routes of

702
00:26:19,980 --> 00:26:21,360
trust are stored once again so an

703
00:26:21,360 --> 00:26:23,760
attacker can't inject other ones

704
00:26:23,760 --> 00:26:25,679
and compromise is also something to

705
00:26:25,679 --> 00:26:27,600
consider uh and I think it's worth

706
00:26:27,600 --> 00:26:30,240
noting once again expiration too if a

707
00:26:30,240 --> 00:26:32,400
compromise occurs and I need to rotate

708
00:26:32,400 --> 00:26:34,860
out some root of trust how do I do so in

709
00:26:34,860 --> 00:26:38,279
such a way that uh does not allow an

710
00:26:38,279 --> 00:26:40,860
attacker to inject their own roots of

711
00:26:40,860 --> 00:26:43,158
trust

712
00:26:43,620 --> 00:26:45,840
within the production instance of six

713
00:26:45,840 --> 00:26:48,179
store we use the update framework or

714
00:26:48,179 --> 00:26:50,700
tough and this is a framework that aims

715
00:26:50,700 --> 00:26:51,860
to

716
00:26:51,860 --> 00:26:54,539
secure software updates

717
00:26:54,539 --> 00:26:56,640
and it does so by creating this

718
00:26:56,640 --> 00:26:58,799
hierarchy of roles that are responsible

719
00:26:58,799 --> 00:27:01,500
for signing off on other roles and they

720
00:27:01,500 --> 00:27:03,059
can continue signing off on other roles

721
00:27:03,059 --> 00:27:04,440
and eventually it will terminate and

722
00:27:04,440 --> 00:27:06,779
sign off on some metadata so in this

723
00:27:06,779 --> 00:27:08,640
example here this is what a typical

724
00:27:08,640 --> 00:27:10,860
tough repository looks like

725
00:27:10,860 --> 00:27:12,960
we have a Target role which is comprised

726
00:27:12,960 --> 00:27:14,940
of some signing key I'll note that the

727
00:27:14,940 --> 00:27:17,220
signing key could either be offline or

728
00:27:17,220 --> 00:27:19,980
online so for the Target role it's I

729
00:27:19,980 --> 00:27:22,620
believe recommended that it be offline

730
00:27:22,620 --> 00:27:24,840
for the root role it's very strongly

731
00:27:24,840 --> 00:27:28,500
recommended that it be offline

732
00:27:28,500 --> 00:27:30,179
um and the target role is going to then

733
00:27:30,179 --> 00:27:33,779
sign the metadata or a set of files

734
00:27:33,779 --> 00:27:35,220
right and this is this concludes the

735
00:27:35,220 --> 00:27:36,240
certificate this could include the

736
00:27:36,240 --> 00:27:37,679
public key

737
00:27:37,679 --> 00:27:40,080
and the idea is that because it's signed

738
00:27:40,080 --> 00:27:41,220
it doesn't give attackers the

739
00:27:41,220 --> 00:27:44,100
opportunity to inject in any of their

740
00:27:44,100 --> 00:27:46,559
own metadata

741
00:27:46,559 --> 00:27:48,960
app chart role is responsible for

742
00:27:48,960 --> 00:27:51,059
specifying all of the roles that should

743
00:27:51,059 --> 00:27:53,460
be a part of the system once again as a

744
00:27:53,460 --> 00:27:55,080
mechanism to prevent injecting other

745
00:27:55,080 --> 00:27:57,000
roles

746
00:27:57,000 --> 00:27:59,700
and the timestamp role is responsible

747
00:27:59,700 --> 00:28:01,559
for signing a timestamp that's meant to

748
00:28:01,559 --> 00:28:03,480
frequently expire and this forces

749
00:28:03,480 --> 00:28:05,880
clients to go online periodically and

750
00:28:05,880 --> 00:28:08,100
fetch the latest tough Repository

751
00:28:08,100 --> 00:28:11,159
and this is very beneficial to give us a

752
00:28:11,159 --> 00:28:13,320
mechanism for rotation so let's say we

753
00:28:13,320 --> 00:28:14,940
have some certificate that expired or

754
00:28:14,940 --> 00:28:16,320
got compromised

755
00:28:16,320 --> 00:28:18,179
all we'd have to do is have the target

756
00:28:18,179 --> 00:28:23,100
role sign a new set of targets sign some

757
00:28:23,100 --> 00:28:25,080
new Target metadata

758
00:28:25,080 --> 00:28:27,960
and as clients timestamps expire locally

759
00:28:27,960 --> 00:28:30,960
they would go online and fetch this

760
00:28:30,960 --> 00:28:33,380
latest updates

761
00:28:33,380 --> 00:28:36,179
another thing to consider here is that

762
00:28:36,179 --> 00:28:38,340
what happens if the

763
00:28:38,340 --> 00:28:40,919
signing keys for any of the intermediate

764
00:28:40,919 --> 00:28:42,299
roles here the Target timestamp or

765
00:28:42,299 --> 00:28:44,400
snapshot roles get compromised well this

766
00:28:44,400 --> 00:28:46,500
is the the purpose of the root rule

767
00:28:46,500 --> 00:28:48,659
which is going to sign off on all the

768
00:28:48,659 --> 00:28:51,080
other roles

769
00:28:51,080 --> 00:28:53,100
within the production instance of Sig

770
00:28:53,100 --> 00:28:55,919
store the root role keys are held by a

771
00:28:55,919 --> 00:28:58,380
number of trusted community members and

772
00:28:58,380 --> 00:29:01,320
you need a majority of the key holders

773
00:29:01,320 --> 00:29:04,440
to do a new route signing event signing

774
00:29:04,440 --> 00:29:08,100
off on new keys for other roles

775
00:29:08,100 --> 00:29:11,159
and so this prevents the compromise of a

776
00:29:11,159 --> 00:29:14,159
single root key holder and I think it's

777
00:29:14,159 --> 00:29:16,559
important that if an organization wants

778
00:29:16,559 --> 00:29:18,779
to use tough you have a similar setup

779
00:29:18,779 --> 00:29:21,360
where you have some keys that live

780
00:29:21,360 --> 00:29:24,120
Offline that are very rarely used to

781
00:29:24,120 --> 00:29:27,020
update the roles that they delegate to

782
00:29:27,020 --> 00:29:29,399
but you rely on this mechanism so that

783
00:29:29,399 --> 00:29:31,220
you have some sort of secure update

784
00:29:31,220 --> 00:29:34,320
mechanism for rotating in new Target

785
00:29:34,320 --> 00:29:37,039
metadata

786
00:29:37,440 --> 00:29:39,899
so we're about at the end of the talk

787
00:29:39,899 --> 00:29:42,559
um there's a couple takeaways from this

788
00:29:42,559 --> 00:29:45,419
first Key Management is hard

789
00:29:45,419 --> 00:29:47,460
um and this is whether you're referring

790
00:29:47,460 --> 00:29:51,059
to artifact signing keys or for managing

791
00:29:51,059 --> 00:29:52,980
roots of trust or managing the keys

792
00:29:52,980 --> 00:29:54,299
behind your service

793
00:29:54,299 --> 00:29:56,279
so I think it's really important to when

794
00:29:56,279 --> 00:29:57,960
you're building the system to consider

795
00:29:57,960 --> 00:29:59,760
this this is why we recommend things

796
00:29:59,760 --> 00:30:03,919
like the update framework

797
00:30:03,960 --> 00:30:06,299
next auditability is critical whether

798
00:30:06,299 --> 00:30:07,679
you're using the public instance of six

799
00:30:07,679 --> 00:30:09,360
store or whether you're operating a

800
00:30:09,360 --> 00:30:11,279
private one I think it's really critical

801
00:30:11,279 --> 00:30:12,899
to have an issuance log of every

802
00:30:12,899 --> 00:30:15,539
certificate that gets issued a log of

803
00:30:15,539 --> 00:30:17,340
every artifact that gets signed because

804
00:30:17,340 --> 00:30:19,860
it gives you this permanent immutable

805
00:30:19,860 --> 00:30:21,840
record of every interaction that's

806
00:30:21,840 --> 00:30:22,820
happened

807
00:30:22,820 --> 00:30:24,960
so you can go back in the event of a

808
00:30:24,960 --> 00:30:26,279
compromise see what happens you can see

809
00:30:26,279 --> 00:30:29,899
how your identities are being used

810
00:30:31,020 --> 00:30:32,159
um like I mentioned in the beginning I

811
00:30:32,159 --> 00:30:33,600
didn't talk about how to actually deploy

812
00:30:33,600 --> 00:30:35,700
sigster uh if you're interested there is

813
00:30:35,700 --> 00:30:38,159
a channel on the six door slack uh

814
00:30:38,159 --> 00:30:40,200
called private six door users where some

815
00:30:40,200 --> 00:30:42,539
folks have been working on how to deploy

816
00:30:42,539 --> 00:30:44,399
A system that looks like this with all

817
00:30:44,399 --> 00:30:46,320
of these components

818
00:30:46,320 --> 00:30:48,659
um so feel free to go check that out

819
00:30:48,659 --> 00:30:50,520
uh thank you very much are there any

820
00:30:50,520 --> 00:30:52,760
questions

821
00:30:53,140 --> 00:31:00,249
[Applause]

822
00:31:12,720 --> 00:31:15,000
uh

823
00:31:15,000 --> 00:31:16,860
yeah so the the question was um how

824
00:31:16,860 --> 00:31:18,720
often are we seeing organizations uh

825
00:31:18,720 --> 00:31:20,520
interested in in deploying private six

826
00:31:20,520 --> 00:31:21,539
Stores

827
00:31:21,539 --> 00:31:23,640
um this is a very new area so I think

828
00:31:23,640 --> 00:31:24,659
we're just starting to kind of see

829
00:31:24,659 --> 00:31:27,659
organizations take an interest in this I

830
00:31:27,659 --> 00:31:30,059
know we have a few represented in the

831
00:31:30,059 --> 00:31:32,039
slack Channel that I mentioned

832
00:31:32,039 --> 00:31:34,799
um that have had an interest in this

833
00:31:34,799 --> 00:31:35,940
um so right now I think it's kind of a

834
00:31:35,940 --> 00:31:36,720
handful

835
00:31:36,720 --> 00:31:38,940
I expected to continue to grow over time

836
00:31:38,940 --> 00:31:44,480
though as more become interested in this

837
00:31:52,860 --> 00:31:54,860
um

838
00:31:58,740 --> 00:32:01,020
so is the question do you need the

839
00:32:01,020 --> 00:32:04,639
update framework if you're relying on

840
00:32:06,419 --> 00:32:08,640
yeah so I I think it kind of depends

841
00:32:08,640 --> 00:32:10,980
right it's it's where

842
00:32:10,980 --> 00:32:12,720
what do you trust right so if you're

843
00:32:12,720 --> 00:32:16,140
trusting the um cloud provider entirely

844
00:32:16,140 --> 00:32:17,760
maybe you can rely on their mechanism

845
00:32:17,760 --> 00:32:19,620
for something like

846
00:32:19,620 --> 00:32:23,279
um a KMS to rotate out keys I think it

847
00:32:23,279 --> 00:32:24,360
kind of depends on what your environment

848
00:32:24,360 --> 00:32:26,340
looks like it's very very tied to that

849
00:32:26,340 --> 00:32:28,380
one cloud provider maybe everything's

850
00:32:28,380 --> 00:32:30,720
integrated and you don't need to rely on

851
00:32:30,720 --> 00:32:32,039
something like the update framework but

852
00:32:32,039 --> 00:32:33,740
I think once you start

853
00:32:33,740 --> 00:32:35,520
Distributing a trust you start running

854
00:32:35,520 --> 00:32:36,720
your services within different Cloud

855
00:32:36,720 --> 00:32:37,980
environments being able to bring

856
00:32:37,980 --> 00:32:40,440
together all the roots of trust

857
00:32:40,440 --> 00:32:42,179
um in a single repository becomes

858
00:32:42,179 --> 00:32:44,100
important and that's where I think a

859
00:32:44,100 --> 00:32:47,178
tough could be valuable

860
00:32:49,740 --> 00:32:51,659
awesome um well if anybody wants to chat

861
00:32:51,659 --> 00:32:53,399
more I'll be around after the talk thank

862
00:32:53,399 --> 00:32:54,800
you very much

863
00:32:54,800 --> 00:32:58,619
[Applause]

