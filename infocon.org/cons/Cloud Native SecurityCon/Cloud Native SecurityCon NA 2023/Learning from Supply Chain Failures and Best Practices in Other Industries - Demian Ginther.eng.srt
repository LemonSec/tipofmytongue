1
00:00:00,000 --> 00:00:02,280
so my talk is learning from supply chain

2
00:00:02,280 --> 00:00:04,920
failures and best practices in other

3
00:00:04,920 --> 00:00:08,120
Industries not software

4
00:00:08,340 --> 00:00:10,440
a little bit about me I'm Damian Ginther

5
00:00:10,440 --> 00:00:12,960
I am a distributed systems engineer at

6
00:00:12,960 --> 00:00:15,179
Super orbital I'm going to talk today

7
00:00:15,179 --> 00:00:18,180
about some supply chain failures and

8
00:00:18,180 --> 00:00:20,100
practices in the non-software world that

9
00:00:20,100 --> 00:00:22,020
we can learn from and apply to our own

10
00:00:22,020 --> 00:00:23,400
work and software

11
00:00:23,400 --> 00:00:25,859
a little bit about me I've worked in

12
00:00:25,859 --> 00:00:28,439
sysadmin for over 20 years moving into

13
00:00:28,439 --> 00:00:31,500
what what's now called devops

14
00:00:31,500 --> 00:00:33,600
uh during that time I've worn a lot of

15
00:00:33,600 --> 00:00:37,320
hats security though has always been at

16
00:00:37,320 --> 00:00:39,719
the core of what I do I put some of my

17
00:00:39,719 --> 00:00:41,760
employers up here but I've done Network

18
00:00:41,760 --> 00:00:43,860
Administration incident response

19
00:00:43,860 --> 00:00:46,860
penetration testing sysadmin physical

20
00:00:46,860 --> 00:00:49,320
security for a data center I've worked

21
00:00:49,320 --> 00:00:51,420
for governmental agencies so if anybody

22
00:00:51,420 --> 00:00:53,879
wants to talk about any of that please

23
00:00:53,879 --> 00:00:56,718
feel free to say hello

24
00:00:57,059 --> 00:01:00,840
so what is a supply chain this is kind

25
00:01:00,840 --> 00:01:02,940
of a

26
00:01:02,940 --> 00:01:04,799
silly question here at this conference

27
00:01:04,799 --> 00:01:07,680
but um uh you've probably heard about

28
00:01:07,680 --> 00:01:10,020
Supply chains and other Industries like

29
00:01:10,020 --> 00:01:12,600
food food and goods and commerce medical

30
00:01:12,600 --> 00:01:14,360
and chemical

31
00:01:14,360 --> 00:01:17,280
entertainment has a supply chain energy

32
00:01:17,280 --> 00:01:19,979
utilities they all share a lot of common

33
00:01:19,979 --> 00:01:22,799
Concepts but the overall definition of a

34
00:01:22,799 --> 00:01:25,500
supply chain is here it's a network of

35
00:01:25,500 --> 00:01:27,900
entities individuals groups resources

36
00:01:27,900 --> 00:01:29,820
and Technology involved in the creation

37
00:01:29,820 --> 00:01:32,000
and sale of a product

38
00:01:32,000 --> 00:01:35,700
or put differently the entire system of

39
00:01:35,700 --> 00:01:37,439
producing and delivering a product or

40
00:01:37,439 --> 00:01:38,579
service

41
00:01:38,579 --> 00:01:41,280
so in the past few years we've seen a

42
00:01:41,280 --> 00:01:42,900
lot of growth in the complexity of

43
00:01:42,900 --> 00:01:44,640
software and a huge growth in open

44
00:01:44,640 --> 00:01:47,040
source software and we've seen a lot of

45
00:01:47,040 --> 00:01:51,060
threats emerge in in many many parts of

46
00:01:51,060 --> 00:01:52,579
the supply chain for that

47
00:01:52,579 --> 00:01:55,140
Focus had been a lot on endpoint

48
00:01:55,140 --> 00:01:57,659
protection phishing other email issues

49
00:01:57,659 --> 00:02:01,200
like that and in around 2020 it started

50
00:02:01,200 --> 00:02:03,119
to become painfully clear that the

51
00:02:03,119 --> 00:02:04,740
supply chain for the software everyone

52
00:02:04,740 --> 00:02:07,740
was relying on was really becoming a big

53
00:02:07,740 --> 00:02:10,679
threat so of course there had been some

54
00:02:10,679 --> 00:02:13,140
supply chain issues before 2020 but in

55
00:02:13,140 --> 00:02:14,900
in 2020

56
00:02:14,900 --> 00:02:16,860
there was

57
00:02:16,860 --> 00:02:19,760
all the solar winds Orion

58
00:02:19,760 --> 00:02:22,980
attack and it was an infection of a

59
00:02:22,980 --> 00:02:25,040
system that built commercial software

60
00:02:25,040 --> 00:02:28,140
there was an estimated 18 000 government

61
00:02:28,140 --> 00:02:31,379
entities and Fortune 500 Fortune 500

62
00:02:31,379 --> 00:02:34,379
companies nine federal agencies and more

63
00:02:34,379 --> 00:02:36,080
than a hundred other companies

64
00:02:36,080 --> 00:02:38,819
the estimated economic impact of that

65
00:02:38,819 --> 00:02:41,940
was about 90 million dollars in incident

66
00:02:41,940 --> 00:02:45,319
response forensics cleanup PR

67
00:02:45,319 --> 00:02:48,260
fines and lost business that's from a

68
00:02:48,260 --> 00:02:51,780
study by bit site after the fact

69
00:02:51,780 --> 00:02:53,400
um

70
00:02:53,400 --> 00:02:55,519
in 2021

71
00:02:55,519 --> 00:02:58,860
PHP suffered a compromise to their

72
00:02:58,860 --> 00:03:02,420
self-hosted git server

73
00:03:03,900 --> 00:03:07,080
and keynote crashed on apologize

74
00:03:07,080 --> 00:03:08,760
for something I don't know that was

75
00:03:08,760 --> 00:03:10,860
weird

76
00:03:10,860 --> 00:03:13,680
um so there was a self-hosted git server

77
00:03:13,680 --> 00:03:16,440
that they were using someone forged some

78
00:03:16,440 --> 00:03:18,659
malicious commits along with a forge

79
00:03:18,659 --> 00:03:21,540
developer signatures and there was an

80
00:03:21,540 --> 00:03:24,140
rce added to the PHP code

81
00:03:24,140 --> 00:03:27,480
the remediation for this included moving

82
00:03:27,480 --> 00:03:32,580
to 2fa moving to hosted GitHub turns out

83
00:03:32,580 --> 00:03:34,319
maintaining your own infrastructure is

84
00:03:34,319 --> 00:03:36,180
difficult

85
00:03:36,180 --> 00:03:38,580
um but it also impacted The credibility

86
00:03:38,580 --> 00:03:41,040
and the perception of PHP in in a

87
00:03:41,040 --> 00:03:44,120
lasting way in my opinion

88
00:03:44,700 --> 00:03:48,540
uh in mid-2021 the build system for home

89
00:03:48,540 --> 00:03:50,640
brew uh if anybody's ever used that to

90
00:03:50,640 --> 00:03:52,500
install software in their Mac

91
00:03:52,500 --> 00:03:54,540
uh there were vulnerabilities in the

92
00:03:54,540 --> 00:03:56,400
build system which allowed untrusted

93
00:03:56,400 --> 00:03:59,459
actors to inject arbitrary code using a

94
00:03:59,459 --> 00:04:01,700
pull request to the repository

95
00:04:01,700 --> 00:04:04,200
it'll basically allow anybody to insert

96
00:04:04,200 --> 00:04:07,319
any code they wanted into anything in

97
00:04:07,319 --> 00:04:08,840
the Brew ecosystem

98
00:04:08,840 --> 00:04:11,580
so obviously you know configuring your

99
00:04:11,580 --> 00:04:14,280
pipelines and secure configuration of

100
00:04:14,280 --> 00:04:16,320
those pipelines is important

101
00:04:16,320 --> 00:04:20,339
as well as trusting your developers

102
00:04:20,339 --> 00:04:22,320
um and then you know we've heard a lot

103
00:04:22,320 --> 00:04:25,100
about log4j in this conference

104
00:04:25,100 --> 00:04:27,360
there was a vulnerability discovered in

105
00:04:27,360 --> 00:04:28,860
the release code which allowed

106
00:04:28,860 --> 00:04:30,780
unsophisticated attackers to fully

107
00:04:30,780 --> 00:04:32,280
control servers

108
00:04:32,280 --> 00:04:34,500
um there was a huge cross-section of

109
00:04:34,500 --> 00:04:37,620
devices and software that were affected

110
00:04:37,620 --> 00:04:39,660
and a lot of people didn't actually know

111
00:04:39,660 --> 00:04:42,300
that they had log4j in their software

112
00:04:42,300 --> 00:04:43,919
because it was largely a dependency

113
00:04:43,919 --> 00:04:46,820
added by other software packages

114
00:04:46,820 --> 00:04:50,340
and the initial incidents that caused

115
00:04:50,340 --> 00:04:51,960
these failures maybe were not

116
00:04:51,960 --> 00:04:54,060
preventable I think determined attacker

117
00:04:54,060 --> 00:04:55,979
can and will eventually find a hole

118
00:04:55,979 --> 00:04:58,680
somewhere but the follow-on impacts and

119
00:04:58,680 --> 00:05:00,419
the overall exposure of information and

120
00:05:00,419 --> 00:05:02,100
the cost to remediate them I think could

121
00:05:02,100 --> 00:05:05,040
have been reduced by better supply chain

122
00:05:05,040 --> 00:05:06,660
security

123
00:05:06,660 --> 00:05:10,259
so let's talk about some non-software

124
00:05:10,259 --> 00:05:13,740
supply chain Concepts some of them apply

125
00:05:13,740 --> 00:05:17,520
and some don't so traceability

126
00:05:17,520 --> 00:05:19,380
where did these raw ingredients come

127
00:05:19,380 --> 00:05:20,479
from

128
00:05:20,479 --> 00:05:22,979
transparency who made the product what

129
00:05:22,979 --> 00:05:24,419
what's in the product what are their

130
00:05:24,419 --> 00:05:26,940
qualifications

131
00:05:26,940 --> 00:05:28,639
safety and quality

132
00:05:28,639 --> 00:05:31,500
in the in the non-software supply chain

133
00:05:31,500 --> 00:05:33,180
these are things like storage of the

134
00:05:33,180 --> 00:05:36,479
product freshness proper packaging but

135
00:05:36,479 --> 00:05:37,860
certainly safety and quality are

136
00:05:37,860 --> 00:05:40,620
relevant Concepts to apply

137
00:05:40,620 --> 00:05:43,020
Logistics in this case we can think

138
00:05:43,020 --> 00:05:45,539
about logistics for software as our

139
00:05:45,539 --> 00:05:47,940
pipelines and resource utilization of

140
00:05:47,940 --> 00:05:50,660
those pipelines

141
00:05:50,699 --> 00:05:52,699
tracking distribution

142
00:05:52,699 --> 00:05:55,259
where is the software deployed what

143
00:05:55,259 --> 00:05:56,820
versions deployed do I know what

144
00:05:56,820 --> 00:05:59,160
dependencies that version has can I

145
00:05:59,160 --> 00:06:00,419
track that piece of software down

146
00:06:00,419 --> 00:06:03,560
quickly if I need to

147
00:06:03,840 --> 00:06:06,419
after sales tracking so where is the

148
00:06:06,419 --> 00:06:09,539
product in use who are my customers

149
00:06:09,539 --> 00:06:11,400
here are some things that don't so much

150
00:06:11,400 --> 00:06:14,660
apply production processing packaging

151
00:06:14,660 --> 00:06:17,580
storage physical distribution these kind

152
00:06:17,580 --> 00:06:20,039
of things most of this is for wholesale

153
00:06:20,039 --> 00:06:22,319
and retail sale of physical goods and

154
00:06:22,319 --> 00:06:23,639
there are some parallels that you could

155
00:06:23,639 --> 00:06:26,220
draw but mostly aren't applicable to

156
00:06:26,220 --> 00:06:29,400
what I'm trying to discuss here

157
00:06:29,400 --> 00:06:32,160
so if you think about the last time that

158
00:06:32,160 --> 00:06:34,800
you ate romaine lettuce and

159
00:06:34,800 --> 00:06:37,680
um do you know where that lettuce was

160
00:06:37,680 --> 00:06:41,400
grown and what farm produced it and I

161
00:06:41,400 --> 00:06:42,960
had this slide here before Brandon

162
00:06:42,960 --> 00:06:45,919
showed it in his Keynote

163
00:06:46,380 --> 00:06:49,740
um so uh where did the honey that you

164
00:06:49,740 --> 00:06:52,380
ate yesterday originate and what plants

165
00:06:52,380 --> 00:06:54,240
did it come from and why might that be

166
00:06:54,240 --> 00:06:56,360
important for allergy

167
00:06:56,360 --> 00:06:58,919
mitigation and for the taste of the

168
00:06:58,919 --> 00:07:00,360
honey and that kind of thing

169
00:07:00,360 --> 00:07:03,120
as Scott Lee Scott Gottlieb points out

170
00:07:03,120 --> 00:07:05,520
in this quote the public and economic

171
00:07:05,520 --> 00:07:07,800
costs of non-transparent Supply chains

172
00:07:07,800 --> 00:07:09,960
are considerable so if we apply this

173
00:07:09,960 --> 00:07:12,180
concept of transparency to our software

174
00:07:12,180 --> 00:07:14,460
supply chain if you think about the last

175
00:07:14,460 --> 00:07:16,979
time you used a node or a python package

176
00:07:16,979 --> 00:07:20,400
in your project do you always go and

177
00:07:20,400 --> 00:07:22,319
check out their code and then follow the

178
00:07:22,319 --> 00:07:24,360
rabbit hole to look at all the code that

179
00:07:24,360 --> 00:07:25,620
they included and what their

180
00:07:25,620 --> 00:07:27,000
dependencies are

181
00:07:27,000 --> 00:07:29,160
you know we all know this joke about the

182
00:07:29,160 --> 00:07:30,780
node modules being heavier than an

183
00:07:30,780 --> 00:07:33,180
actual black hole how long did your last

184
00:07:33,180 --> 00:07:35,940
npm install take and did you recognize

185
00:07:35,940 --> 00:07:37,440
all those packages

186
00:07:37,440 --> 00:07:39,300
how do you determine where you have the

187
00:07:39,300 --> 00:07:41,099
products installed and how do you detect

188
00:07:41,099 --> 00:07:42,660
if there's a new vulnerability in those

189
00:07:42,660 --> 00:07:43,800
products

190
00:07:43,800 --> 00:07:45,419
and how do we make sure we're not this

191
00:07:45,419 --> 00:07:47,940
XK CD cartoon where we build this

192
00:07:47,940 --> 00:07:49,560
fantastic new product but somewhere in

193
00:07:49,560 --> 00:07:50,940
the dependency chain there's a project

194
00:07:50,940 --> 00:07:54,300
that's under supported vulnerable or

195
00:07:54,300 --> 00:07:57,139
problematic

196
00:07:58,259 --> 00:08:00,539
uh let's talk about safety and quality

197
00:08:00,539 --> 00:08:02,819
in many other Industries safety and

198
00:08:02,819 --> 00:08:04,620
quality is about freshness of the

199
00:08:04,620 --> 00:08:07,740
product whether it was stored properly

200
00:08:07,740 --> 00:08:10,020
and how outside factors might have

201
00:08:10,020 --> 00:08:13,139
affected it rotten food stale food those

202
00:08:13,139 --> 00:08:16,440
kind of things degradation to exposure

203
00:08:16,440 --> 00:08:20,160
to light or moisture particularly that's

204
00:08:20,160 --> 00:08:21,960
a problem with chemical and medical

205
00:08:21,960 --> 00:08:24,660
supply chains but definitely applies to

206
00:08:24,660 --> 00:08:26,639
others or in the case of the

207
00:08:26,639 --> 00:08:29,039
entertainment supply chain the safety of

208
00:08:29,039 --> 00:08:30,900
the workers the safety of the truck

209
00:08:30,900 --> 00:08:32,099
drivers

210
00:08:32,099 --> 00:08:36,539
in in logistics and transportation much

211
00:08:36,539 --> 00:08:38,099
of that doesn't apply to software

212
00:08:38,099 --> 00:08:41,099
luckily software doesn't go bad it

213
00:08:41,099 --> 00:08:42,539
doesn't have an expiration data You

214
00:08:42,539 --> 00:08:44,720
could argue that it probably should

215
00:08:44,720 --> 00:08:47,660
but these Concepts do apply to software

216
00:08:47,660 --> 00:08:51,660
but most of this is uh

217
00:08:51,660 --> 00:08:53,940
the safety and quality of software comes

218
00:08:53,940 --> 00:08:56,100
down to the previously covered

219
00:08:56,100 --> 00:08:58,080
traceability and the ability of you as

220
00:08:58,080 --> 00:08:59,880
the developer to make sure that you are

221
00:08:59,880 --> 00:09:01,920
auditing and reviewing what you put in

222
00:09:01,920 --> 00:09:03,540
your code

223
00:09:03,540 --> 00:09:05,399
um and that you are not including toxic

224
00:09:05,399 --> 00:09:07,380
ingredients in your code

225
00:09:07,380 --> 00:09:10,339
does anybody remember Mr Yuck

226
00:09:10,339 --> 00:09:12,680
maybe I'm showing my age

227
00:09:12,680 --> 00:09:15,360
we'll talk later about some supply chain

228
00:09:15,360 --> 00:09:17,399
Concepts that can help you make sure

229
00:09:17,399 --> 00:09:19,080
you're not including these toxic

230
00:09:19,080 --> 00:09:22,160
ingredients in your code

231
00:09:22,740 --> 00:09:25,260
so in other Industries we have to worry

232
00:09:25,260 --> 00:09:27,720
about many more physical concerns than

233
00:09:27,720 --> 00:09:30,420
the software supply chain but we have a

234
00:09:30,420 --> 00:09:32,640
lot of corresponding concerns so you can

235
00:09:32,640 --> 00:09:34,200
think of some software supply chain

236
00:09:34,200 --> 00:09:37,080
Logistics as how does my software get

237
00:09:37,080 --> 00:09:39,360
from the developer's keyboard into the

238
00:09:39,360 --> 00:09:41,519
code repository right you are using a

239
00:09:41,519 --> 00:09:43,920
code repository right

240
00:09:43,920 --> 00:09:45,959
um through a series of tests

241
00:09:45,959 --> 00:09:50,180
to an eventual code merge

242
00:09:50,580 --> 00:09:53,820
and how does my software get distributed

243
00:09:53,820 --> 00:09:57,320
to the end user

244
00:09:59,880 --> 00:10:02,519
and how does it get deployed and how do

245
00:10:02,519 --> 00:10:04,620
I know where it's deployed and how it's

246
00:10:04,620 --> 00:10:07,100
performing

247
00:10:07,560 --> 00:10:09,180
we aren't driving trucks or ships here

248
00:10:09,180 --> 00:10:11,040
but there is a pipeline that is

249
00:10:11,040 --> 00:10:12,660
analogous to those physical world

250
00:10:12,660 --> 00:10:15,899
Concepts so here are some common tools

251
00:10:15,899 --> 00:10:18,300
both of them both open source and paid

252
00:10:18,300 --> 00:10:20,580
and you can use these for those

253
00:10:20,580 --> 00:10:23,220
analogous processes it's not a full list

254
00:10:23,220 --> 00:10:24,779
but these are tools I've used and

255
00:10:24,779 --> 00:10:27,360
thought were good quality but whatever

256
00:10:27,360 --> 00:10:29,880
tools you choose to use you must make

257
00:10:29,880 --> 00:10:32,760
sure to incorporate best practices using

258
00:10:32,760 --> 00:10:34,380
security at every step

259
00:10:34,380 --> 00:10:36,660
scanning during builds storing your

260
00:10:36,660 --> 00:10:38,580
codes securely making sure that your

261
00:10:38,580 --> 00:10:41,279
repositories are secure contributors are

262
00:10:41,279 --> 00:10:43,080
vetted contributors are aware of

263
00:10:43,080 --> 00:10:44,360
security

264
00:10:44,360 --> 00:10:47,040
regularly scan your old builds and

265
00:10:47,040 --> 00:10:48,779
s-bombs everybody's talking about

266
00:10:48,779 --> 00:10:52,620
s-bombs for new vulnerabilities this is

267
00:10:52,620 --> 00:10:54,959
something that was mentioned in the

268
00:10:54,959 --> 00:10:58,140
keynote there's a gap I think in the uh

269
00:10:58,140 --> 00:11:00,420
the way that we handle s-bombs after

270
00:11:00,420 --> 00:11:01,920
they're created we don't want them to

271
00:11:01,920 --> 00:11:03,899
just sit there and gather dust

272
00:11:03,899 --> 00:11:05,760
new vulnerabilities are discovered all

273
00:11:05,760 --> 00:11:07,440
the time so it's possible that old

274
00:11:07,440 --> 00:11:09,180
s-bombs will show you new

275
00:11:09,180 --> 00:11:10,560
vulnerabilities

276
00:11:10,560 --> 00:11:12,839
scan your software before you deploy it

277
00:11:12,839 --> 00:11:15,380
use an admission controller

278
00:11:15,380 --> 00:11:19,019
to deny entrusted containers ensure that

279
00:11:19,019 --> 00:11:20,820
you have a way to know what's running

280
00:11:20,820 --> 00:11:23,399
and where and keep a record of what you

281
00:11:23,399 --> 00:11:25,500
deployed and what version it is so you

282
00:11:25,500 --> 00:11:27,480
can find it in a hurry in case you need

283
00:11:27,480 --> 00:11:29,579
to

284
00:11:29,579 --> 00:11:32,459
so let's talk about failure

285
00:11:32,459 --> 00:11:35,399
that was in the title of the talk so I

286
00:11:35,399 --> 00:11:37,440
love failure I think it's the best way

287
00:11:37,440 --> 00:11:39,600
to learn in the moment it can be pretty

288
00:11:39,600 --> 00:11:42,560
awful the dire consequences can happen

289
00:11:42,560 --> 00:11:44,420
but

290
00:11:44,420 --> 00:11:47,540
you see across a lot of other Industries

291
00:11:47,540 --> 00:11:49,980
like Toyota

292
00:11:49,980 --> 00:11:52,560
uses the concept of Kaizen or continuous

293
00:11:52,560 --> 00:11:55,620
Improvement in order to have continuous

294
00:11:55,620 --> 00:11:57,600
Improvement you must be open to failure

295
00:11:57,600 --> 00:11:59,700
and you must identify your mistakes and

296
00:11:59,700 --> 00:12:02,160
work toward developing Solutions in many

297
00:12:02,160 --> 00:12:04,200
ways this is also what drives agile

298
00:12:04,200 --> 00:12:07,260
software development you iterate you

299
00:12:07,260 --> 00:12:09,060
determine what didn't work you plan your

300
00:12:09,060 --> 00:12:12,619
next moves and then you move on

301
00:12:13,220 --> 00:12:16,980
in my opinion a failure is what drives

302
00:12:16,980 --> 00:12:20,519
creativity in problem solving and it can

303
00:12:20,519 --> 00:12:23,579
lead to a Eureka moment which is very

304
00:12:23,579 --> 00:12:27,060
gratifying so let's take a look at some

305
00:12:27,060 --> 00:12:29,540
failures

306
00:12:34,019 --> 00:12:36,000
there we go

307
00:12:36,000 --> 00:12:38,880
um so uh let's talk about why blockchain

308
00:12:38,880 --> 00:12:42,260
is going to save the world uh not really

309
00:12:42,260 --> 00:12:45,540
in November of 2018 there was an

310
00:12:45,540 --> 00:12:47,639
outbreak of E coli in the U.S and Canada

311
00:12:47,639 --> 00:12:51,060
which was linked to romaine lettuce 62

312
00:12:51,060 --> 00:12:53,579
people in 16 states were infected over

313
00:12:53,579 --> 00:12:55,700
roughly two months

314
00:12:55,700 --> 00:12:57,899
the source of this outbreak was

315
00:12:57,899 --> 00:13:00,060
identified and the produce was recalled

316
00:13:00,060 --> 00:13:01,980
and on the surface it looks like a

317
00:13:01,980 --> 00:13:04,980
success but economic analysis shows that

318
00:13:04,980 --> 00:13:06,779
the impact of the outbreak could have

319
00:13:06,779 --> 00:13:08,700
been lessened had there been more

320
00:13:08,700 --> 00:13:11,160
transparency and traceability for the

321
00:13:11,160 --> 00:13:13,860
affected produce if there was had been a

322
00:13:13,860 --> 00:13:15,420
system in place that allowed consumers

323
00:13:15,420 --> 00:13:17,779
to know where their food was grown

324
00:13:17,779 --> 00:13:19,920
it could have potentially reduced the

325
00:13:19,920 --> 00:13:21,360
time to determine the source of the

326
00:13:21,360 --> 00:13:23,760
lettuce determine change the scope of

327
00:13:23,760 --> 00:13:25,279
the recall and

328
00:13:25,279 --> 00:13:27,779
would have affected the subsequent drop

329
00:13:27,779 --> 00:13:30,860
in in lettuce sales so a lot of people

330
00:13:30,860 --> 00:13:33,180
weren't able to determine whether their

331
00:13:33,180 --> 00:13:34,980
lettuce was affected or the lettuce they

332
00:13:34,980 --> 00:13:36,360
saw in the store was affected so they

333
00:13:36,360 --> 00:13:39,600
just didn't buy any romaine lettuce

334
00:13:39,600 --> 00:13:42,320
um for example Walmart food safety teams

335
00:13:42,320 --> 00:13:46,019
before this event could take as many as

336
00:13:46,019 --> 00:13:48,360
seven days to trace or food that was

337
00:13:48,360 --> 00:13:50,459
sold in their store originated because

338
00:13:50,459 --> 00:13:53,160
it's all it was all tracked on paper had

339
00:13:53,160 --> 00:13:55,260
to be tracked through Farm Processing

340
00:13:55,260 --> 00:13:57,860
packaging distribution sales

341
00:13:57,860 --> 00:14:01,680
and since then Walmart has implemented a

342
00:14:01,680 --> 00:14:04,079
blockchain based tracking system which

343
00:14:04,079 --> 00:14:06,120
seems like Overkill to me but I I didn't

344
00:14:06,120 --> 00:14:07,459
design it

345
00:14:07,459 --> 00:14:10,260
it's reduced the time to Mere seconds

346
00:14:10,260 --> 00:14:12,959
actually to determine that entire chain

347
00:14:12,959 --> 00:14:15,420
which I think is excellent

348
00:14:15,420 --> 00:14:17,639
so we can take from this that the

349
00:14:17,639 --> 00:14:19,019
ability to determine where your

350
00:14:19,019 --> 00:14:21,180
dependencies came from is vital in

351
00:14:21,180 --> 00:14:23,579
detecting and reacting to potential

352
00:14:23,579 --> 00:14:26,120
problems

353
00:14:27,420 --> 00:14:30,480
um another case here the peanut

354
00:14:30,480 --> 00:14:33,660
Corporation of America uh between 2006

355
00:14:33,660 --> 00:14:36,120
and 2009 they were leasing peanuts

356
00:14:36,120 --> 00:14:37,920
contaminated with salmonella into the

357
00:14:37,920 --> 00:14:41,100
food supply and there were over 700

358
00:14:41,100 --> 00:14:44,100
infections nine people died and there

359
00:14:44,100 --> 00:14:47,279
was a big cover-up by the people who ran

360
00:14:47,279 --> 00:14:48,500
the company

361
00:14:48,500 --> 00:14:51,480
and the eventual Fallout of this was a

362
00:14:51,480 --> 00:14:55,019
federal prosecution of officials on a 76

363
00:14:55,019 --> 00:14:57,240
count indictment they got successful

364
00:14:57,240 --> 00:15:00,240
convictions there were fines huge huge

365
00:15:00,240 --> 00:15:01,980
amount of fines

366
00:15:01,980 --> 00:15:04,019
um during this process some companies

367
00:15:04,019 --> 00:15:06,000
were notified that they have had

368
00:15:06,000 --> 00:15:07,800
contaminated peanuts

369
00:15:07,800 --> 00:15:09,540
but there was a lack of full visibility

370
00:15:09,540 --> 00:15:12,899
for the entire chain of Supply not only

371
00:15:12,899 --> 00:15:15,000
because of the intentional tampering in

372
00:15:15,000 --> 00:15:16,560
the reporting of the contamination but

373
00:15:16,560 --> 00:15:19,500
also because most companies rely on what

374
00:15:19,500 --> 00:15:22,160
is called a one-up one-back approach

375
00:15:22,160 --> 00:15:24,420
companies only know their direct

376
00:15:24,420 --> 00:15:26,880
supplier where they got the peanuts and

377
00:15:26,880 --> 00:15:28,160
their direct customer

378
00:15:28,160 --> 00:15:30,240
so some companies purchase the

379
00:15:30,240 --> 00:15:31,940
contaminated peanuts from a third party

380
00:15:31,940 --> 00:15:34,380
without knowing that the original source

381
00:15:34,380 --> 00:15:36,000
of the peanuts was the peanut

382
00:15:36,000 --> 00:15:38,579
Corporation of America so even after the

383
00:15:38,579 --> 00:15:40,620
recall this meant they continued to sell

384
00:15:40,620 --> 00:15:42,600
the products because they didn't have

385
00:15:42,600 --> 00:15:44,579
sufficient visibility into the entire

386
00:15:44,579 --> 00:15:45,839
supply chain

387
00:15:45,839 --> 00:15:47,880
and we as software developers we don't

388
00:15:47,880 --> 00:15:51,060
have any such excuse we we have the

389
00:15:51,060 --> 00:15:53,220
technology to if we were selling peanuts

390
00:15:53,220 --> 00:15:55,920
we could know the individual customers

391
00:15:55,920 --> 00:15:57,420
who bought the peanuts and the peanut

392
00:15:57,420 --> 00:15:58,860
farmer could know the name of the person

393
00:15:58,860 --> 00:16:01,019
who purchased each batch of peanuts and

394
00:16:01,019 --> 00:16:02,880
the customer can know who farmed the

395
00:16:02,880 --> 00:16:05,160
peanuts and each party can know where

396
00:16:05,160 --> 00:16:07,380
all those peanuts went uh you know from

397
00:16:07,380 --> 00:16:10,139
from start to finish it's possible to do

398
00:16:10,139 --> 00:16:12,440
that I don't think we're

399
00:16:12,440 --> 00:16:14,940
necessarily quite there but I think it's

400
00:16:14,940 --> 00:16:16,800
certainly certainly a possibility with

401
00:16:16,800 --> 00:16:20,279
the technology that we have so we can

402
00:16:20,279 --> 00:16:21,660
take from this that it's not enough to

403
00:16:21,660 --> 00:16:23,399
know what your dependencies are you also

404
00:16:23,399 --> 00:16:24,660
have to know what your dependencies

405
00:16:24,660 --> 00:16:26,579
dependencies are and what their

406
00:16:26,579 --> 00:16:30,800
dependencies are and so on and so forth

407
00:16:31,139 --> 00:16:33,000
so how do we know where our dependencies

408
00:16:33,000 --> 00:16:36,000
are from and where their dependencies

409
00:16:36,000 --> 00:16:38,100
are from so on and so forth It's Turtles

410
00:16:38,100 --> 00:16:40,259
all the way down so

411
00:16:40,259 --> 00:16:41,040
um

412
00:16:41,040 --> 00:16:42,740
you can use an s-bomb

413
00:16:42,740 --> 00:16:46,079
uh what does the software or container

414
00:16:46,079 --> 00:16:48,899
or the helm chart contain what pieces of

415
00:16:48,899 --> 00:16:51,000
software are used in the creation of

416
00:16:51,000 --> 00:16:53,040
your software

417
00:16:53,040 --> 00:16:54,720
um and you want you want to use a tool

418
00:16:54,720 --> 00:16:56,399
that creates a multi-level s-bomb

419
00:16:56,399 --> 00:16:58,620
because it's not enough to just know

420
00:16:58,620 --> 00:17:00,300
your own dependencies you've got to know

421
00:17:00,300 --> 00:17:02,220
the dependencies of those also those

422
00:17:02,220 --> 00:17:03,799
dependencies as well

423
00:17:03,799 --> 00:17:07,380
and very importantly in order to lighten

424
00:17:07,380 --> 00:17:09,540
the burden of creating storing and

425
00:17:09,540 --> 00:17:11,939
signing those s-bombs you must use an

426
00:17:11,939 --> 00:17:13,980
automated process you cannot do this by

427
00:17:13,980 --> 00:17:16,260
hand it's it's

428
00:17:16,260 --> 00:17:19,199
too onerous to do that and two prone to

429
00:17:19,199 --> 00:17:21,619
mistakes not auditable

430
00:17:21,619 --> 00:17:24,179
and you should sign your s-bombs you

431
00:17:24,179 --> 00:17:26,579
should attest that they are what they

432
00:17:26,579 --> 00:17:29,280
say they are because of the theory of

433
00:17:29,280 --> 00:17:32,040
Integrity you want to make sure that

434
00:17:32,040 --> 00:17:34,440
your s-bomb is is maintains its

435
00:17:34,440 --> 00:17:36,179
integrity and that it has not been

436
00:17:36,179 --> 00:17:38,360
modified since it was created

437
00:17:38,360 --> 00:17:40,740
there's a lot of question about how we

438
00:17:40,740 --> 00:17:44,280
can verify that it's correct as well and

439
00:17:44,280 --> 00:17:46,260
I haven't seen a good solution for that

440
00:17:46,260 --> 00:17:50,039
yet but I hope hope one crops up and

441
00:17:50,039 --> 00:17:51,780
finally if you have an s-bomb and a

442
00:17:51,780 --> 00:17:54,539
digital signature you can then use an

443
00:17:54,539 --> 00:17:56,940
automated check or admission controller

444
00:17:56,940 --> 00:17:58,380
to make sure that you're not running

445
00:17:58,380 --> 00:18:02,179
unsigned or unchecked deliverables

446
00:18:02,580 --> 00:18:05,120
uh we've all seen this picture

447
00:18:05,120 --> 00:18:08,940
in March of 2021 the ship called the

448
00:18:08,940 --> 00:18:11,760
ever given got stuck in the Suez Canal

449
00:18:11,760 --> 00:18:15,179
Plan B for ships that need to Traverse

450
00:18:15,179 --> 00:18:18,059
the canal but can't is to embark on a

451
00:18:18,059 --> 00:18:21,000
voyage around the Cape of Africa it's a

452
00:18:21,000 --> 00:18:23,160
dangerous trip It's Dangerous Waters it

453
00:18:23,160 --> 00:18:25,460
adds weeks to the transport

454
00:18:25,460 --> 00:18:28,380
this wasn't the best plan B for a lot of

455
00:18:28,380 --> 00:18:30,179
those goods

456
00:18:30,179 --> 00:18:32,700
additionally some of those products

457
00:18:32,700 --> 00:18:34,980
could have been loaded on to a plane

458
00:18:34,980 --> 00:18:36,720
instead of a container ship depending on

459
00:18:36,720 --> 00:18:39,000
the monetary value of the goods you know

460
00:18:39,000 --> 00:18:41,700
you've got economic concerns there it

461
00:18:41,700 --> 00:18:43,140
could have mitigated some of the losses

462
00:18:43,140 --> 00:18:46,679
experienced and then also poor inventory

463
00:18:46,679 --> 00:18:48,179
and tracking of goods on the ship

464
00:18:48,179 --> 00:18:50,520
because it's just a bunch of giant

465
00:18:50,520 --> 00:18:52,740
containers on the ship and and there's

466
00:18:52,740 --> 00:18:55,940
poor counting in a lot of those systems

467
00:18:55,940 --> 00:18:58,620
meant that suppliers and customers

468
00:18:58,620 --> 00:19:00,299
didn't really know if their goods were

469
00:19:00,299 --> 00:19:02,400
on that ship at all and they were in

470
00:19:02,400 --> 00:19:04,380
limbo regarding whether their goods were

471
00:19:04,380 --> 00:19:06,299
affected when they might arrive

472
00:19:06,299 --> 00:19:08,940
so caused a lot of churn in the in the

473
00:19:08,940 --> 00:19:10,740
supply chain

474
00:19:10,740 --> 00:19:14,880
so there was a ripple effect of that

475
00:19:14,880 --> 00:19:17,700
it was a six day bottleneck that was

476
00:19:17,700 --> 00:19:19,080
stuck there for six days until they

477
00:19:19,080 --> 00:19:21,539
finally dug it out and it created months

478
00:19:21,539 --> 00:19:24,120
of effects and a huge financial effect

479
00:19:24,120 --> 00:19:26,700
uh six like 60 billion dollars is that's

480
00:19:26,700 --> 00:19:28,400
a lot

481
00:19:28,400 --> 00:19:31,200
so you know what we can take from this

482
00:19:31,200 --> 00:19:33,780
is that it's important to have

483
00:19:33,780 --> 00:19:35,580
infrastructure and resources available

484
00:19:35,580 --> 00:19:38,760
to support a plan B and maybe a plan C

485
00:19:38,760 --> 00:19:43,140
and A Plan B Plan D if if you know if

486
00:19:43,140 --> 00:19:45,660
you're not creating a plan that's

487
00:19:45,660 --> 00:19:49,160
tenable in in the first place

488
00:19:50,100 --> 00:19:55,679
so uh Plan B plan C plan nine

489
00:19:55,679 --> 00:19:57,660
in order to ensure that your supply

490
00:19:57,660 --> 00:20:00,360
chain can be resilient to disruptions

491
00:20:00,360 --> 00:20:02,340
and unforeseen events you should

492
00:20:02,340 --> 00:20:05,100
dedicate some thought to redundancy if

493
00:20:05,100 --> 00:20:07,320
your budget allows use multiple regions

494
00:20:07,320 --> 00:20:09,179
in your cloud provider if you're on

495
00:20:09,179 --> 00:20:11,360
premise use multiple data centers

496
00:20:11,360 --> 00:20:13,919
lacking that please use redundant power

497
00:20:13,919 --> 00:20:15,559
and cooling

498
00:20:15,559 --> 00:20:18,059
I worked for a data center that had

499
00:20:18,059 --> 00:20:20,760
cooling failures often at one in the

500
00:20:20,760 --> 00:20:23,760
morning and I had to get up and drive to

501
00:20:23,760 --> 00:20:26,580
the office and flick a switch don't be

502
00:20:26,580 --> 00:20:28,740
me

503
00:20:28,740 --> 00:20:31,080
if your supply chain pipeline breaks

504
00:20:31,080 --> 00:20:33,780
down have a plan in place for how you're

505
00:20:33,780 --> 00:20:35,460
going to track and trace your software a

506
00:20:35,460 --> 00:20:38,039
human process for that

507
00:20:38,039 --> 00:20:40,200
um kubernetes can assist with some

508
00:20:40,200 --> 00:20:43,020
redundancy and some self-healing

509
00:20:43,020 --> 00:20:45,120
and you want to make sure that you have

510
00:20:45,120 --> 00:20:47,700
monitoring and alerting in place for

511
00:20:47,700 --> 00:20:50,100
resource utilization errors visibility

512
00:20:50,100 --> 00:20:51,740
into your applications

513
00:20:51,740 --> 00:20:54,260
logs are great and they can

514
00:20:54,260 --> 00:20:56,280
assist in troubleshooting and

515
00:20:56,280 --> 00:20:57,960
maintaining integrity and traceability

516
00:20:57,960 --> 00:21:00,480
of your code pipeline but they're not

517
00:21:00,480 --> 00:21:01,919
enough

518
00:21:01,919 --> 00:21:04,320
logs are just indicators of what already

519
00:21:04,320 --> 00:21:07,980
happened so in order to avoid problems

520
00:21:07,980 --> 00:21:09,299
before they happen you need to start

521
00:21:09,299 --> 00:21:11,039
developing a system which verifies

522
00:21:11,039 --> 00:21:13,080
everything so we're starting to talk

523
00:21:13,080 --> 00:21:15,480
about a zero trust architecture here

524
00:21:15,480 --> 00:21:18,059
and if you take the time to actually

525
00:21:18,059 --> 00:21:20,220
develop a plan B you must practice that

526
00:21:20,220 --> 00:21:24,960
plan b or plan C and D if your human

527
00:21:24,960 --> 00:21:28,200
processes are too slow maybe you can't

528
00:21:28,200 --> 00:21:29,820
get around the Cape of Africa fast

529
00:21:29,820 --> 00:21:31,620
enough to prevent the goods from

530
00:21:31,620 --> 00:21:35,100
spoiling your plan may not be helpful if

531
00:21:35,100 --> 00:21:36,960
in the event of an emergency or

532
00:21:36,960 --> 00:21:38,820
unforeseen event like that

533
00:21:38,820 --> 00:21:40,860
and if you want to develop a really

534
00:21:40,860 --> 00:21:43,080
resilient systems I'd recommend looking

535
00:21:43,080 --> 00:21:46,799
into chaos engineering so that your

536
00:21:46,799 --> 00:21:48,720
engineers can start to know what happens

537
00:21:48,720 --> 00:21:50,760
in each part of your supply chain when

538
00:21:50,760 --> 00:21:53,900
things start to fail

539
00:21:54,679 --> 00:21:58,820
so there was a retrospective study done

540
00:21:58,820 --> 00:22:02,760
in 2011 a Hospital's blood transfusion

541
00:22:02,760 --> 00:22:06,780
system in Spain the hospital de Navara

542
00:22:06,780 --> 00:22:10,559
it was determined that because of the

543
00:22:10,559 --> 00:22:14,520
implementation of a manual processes for

544
00:22:14,520 --> 00:22:16,799
identifying transfusion materials and

545
00:22:16,799 --> 00:22:20,940
patients a nurse or attack would go in

546
00:22:20,940 --> 00:22:23,100
and they would look at the the patient's

547
00:22:23,100 --> 00:22:25,380
bracelet and then they would look at the

548
00:22:25,380 --> 00:22:28,679
the blood transfusion materials there

549
00:22:28,679 --> 00:22:31,200
was a 48 error rate

550
00:22:31,200 --> 00:22:33,900
uh this is terrible and people can die

551
00:22:33,900 --> 00:22:35,520
uh you know you give them the wrong

552
00:22:35,520 --> 00:22:36,600
blood

553
00:22:36,600 --> 00:22:40,919
they will pass away so this was just due

554
00:22:40,919 --> 00:22:43,740
to human error manual mistakes

555
00:22:43,740 --> 00:22:46,559
um so they implemented an electronic

556
00:22:46,559 --> 00:22:48,539
system where they had a scanner they

557
00:22:48,539 --> 00:22:50,039
could scan the bracelet scan the

558
00:22:50,039 --> 00:22:52,679
materials and it led to a massive

559
00:22:52,679 --> 00:22:55,559
increase in traceability and error error

560
00:22:55,559 --> 00:22:58,260
reduction which obviously led to better

561
00:22:58,260 --> 00:23:00,419
outcomes for the patients not not many

562
00:23:00,419 --> 00:23:03,240
people died and after 2005 they

563
00:23:03,240 --> 00:23:05,360
discovered that traceability was over 99

564
00:23:05,360 --> 00:23:10,620
so a very small error rate how did this

565
00:23:10,620 --> 00:23:13,320
happen automation is what allowed this

566
00:23:13,320 --> 00:23:14,280
to happen

567
00:23:14,280 --> 00:23:16,980
um always automate your systems manual

568
00:23:16,980 --> 00:23:19,559
systems are impossible to audit maintain

569
00:23:19,559 --> 00:23:22,880
or properly rely on and

570
00:23:22,880 --> 00:23:25,080
in your automation you need to add

571
00:23:25,080 --> 00:23:27,360
checks to ensure that you're using the

572
00:23:27,360 --> 00:23:30,480
right products deliverables software

573
00:23:30,480 --> 00:23:32,100
packages and those kind of things and

574
00:23:32,100 --> 00:23:33,059
that they've been checked for

575
00:23:33,059 --> 00:23:35,520
vulnerabilities

576
00:23:35,520 --> 00:23:37,559
so I'm sure you've heard the old proverb

577
00:23:37,559 --> 00:23:40,140
trust but verify I would much rather

578
00:23:40,140 --> 00:23:44,520
hear you say never trust always verify

579
00:23:44,520 --> 00:23:47,340
verification is the Cornerstone of a

580
00:23:47,340 --> 00:23:49,559
good security program and the basis for

581
00:23:49,559 --> 00:23:52,020
a zero trust architecture I won't get

582
00:23:52,020 --> 00:23:53,220
into the complete zero trust

583
00:23:53,220 --> 00:23:55,020
architecture conversation here because I

584
00:23:55,020 --> 00:23:58,140
only have six minutes left but some good

585
00:23:58,140 --> 00:24:00,780
things to think about are using strong

586
00:24:00,780 --> 00:24:03,840
authentication in your processes using

587
00:24:03,840 --> 00:24:07,020
least access policies and make sure that

588
00:24:07,020 --> 00:24:08,820
you're validating your application

589
00:24:08,820 --> 00:24:11,640
Behavior don't just assume that your

590
00:24:11,640 --> 00:24:13,140
application is going to behave the way

591
00:24:13,140 --> 00:24:14,640
that it says on the tin

592
00:24:14,640 --> 00:24:17,580
and use this same validation and

593
00:24:17,580 --> 00:24:19,200
verification procedures for all

594
00:24:19,200 --> 00:24:21,659
components of your system including your

595
00:24:21,659 --> 00:24:24,080
supply chain

596
00:24:25,280 --> 00:24:27,840
you cannot have a security system which

597
00:24:27,840 --> 00:24:30,780
relies on on human beings to manually

598
00:24:30,780 --> 00:24:32,580
review scan results detect

599
00:24:32,580 --> 00:24:34,980
vulnerabilities you also can have a

600
00:24:34,980 --> 00:24:36,659
system which relies entirely on computer

601
00:24:36,659 --> 00:24:40,500
automation yet anyway maybe chat GPT can

602
00:24:40,500 --> 00:24:42,360
start analyzing and fixing our

603
00:24:42,360 --> 00:24:45,179
vulnerabilities someday someone has to

604
00:24:45,179 --> 00:24:46,860
look at logs someone has to look at

605
00:24:46,860 --> 00:24:48,900
vulnerability scan output and your team

606
00:24:48,900 --> 00:24:51,659
has to take action to remediate and

607
00:24:51,659 --> 00:24:53,480
preferably you'll have another team

608
00:24:53,480 --> 00:24:56,039
using separation of Duties that will

609
00:24:56,039 --> 00:24:58,140
verify that the remediation has occurred

610
00:24:58,140 --> 00:25:01,260
and audit audit you

611
00:25:01,260 --> 00:25:03,419
um but in the meantime you can automate

612
00:25:03,419 --> 00:25:05,520
some of the easy stuff so things like

613
00:25:05,520 --> 00:25:07,440
version bumps and dependencies with

614
00:25:07,440 --> 00:25:10,580
dependabot or other tools like that

615
00:25:10,580 --> 00:25:13,080
use one of those tools to analyze your

616
00:25:13,080 --> 00:25:14,400
dependencies alert you that there's

617
00:25:14,400 --> 00:25:15,539
updates

618
00:25:15,539 --> 00:25:18,240
have it make a PR if you can automate

619
00:25:18,240 --> 00:25:21,740
tests use tdd to

620
00:25:21,740 --> 00:25:24,600
build your software so that you can know

621
00:25:24,600 --> 00:25:28,039
if a version bump breaks your software

622
00:25:28,039 --> 00:25:30,360
that will reduce the need for your team

623
00:25:30,360 --> 00:25:32,580
to manually test when versions change if

624
00:25:32,580 --> 00:25:34,620
they can just go into GitHub and see

625
00:25:34,620 --> 00:25:36,539
that well this passed all the tests even

626
00:25:36,539 --> 00:25:39,539
though it upgraded a package you can you

627
00:25:39,539 --> 00:25:41,460
can merge that

628
00:25:41,460 --> 00:25:43,620
um use automated scans in your pipelines

629
00:25:43,620 --> 00:25:45,779
make sure that if a vulnerability is

630
00:25:45,779 --> 00:25:48,140
discovered it will prevent emerge

631
00:25:48,140 --> 00:25:50,820
this can sometimes make things difficult

632
00:25:50,820 --> 00:25:52,320
for your developers

633
00:25:52,320 --> 00:25:55,080
but if you cultivate an attitude of

634
00:25:55,080 --> 00:25:56,220
security being everybody's

635
00:25:56,220 --> 00:25:59,039
responsibility surface problems early

636
00:25:59,039 --> 00:26:01,140
and often your team will have an easier

637
00:26:01,140 --> 00:26:02,640
time dealing with that they'll get used

638
00:26:02,640 --> 00:26:05,039
to it and your software will be more

639
00:26:05,039 --> 00:26:09,120
secure and then create s-bombs create

640
00:26:09,120 --> 00:26:10,740
and store s-bombs with your container

641
00:26:10,740 --> 00:26:13,860
images and sign them

642
00:26:13,860 --> 00:26:16,980
um and a missing piece in my opinion

643
00:26:16,980 --> 00:26:19,140
develop automation which will detect new

644
00:26:19,140 --> 00:26:21,840
vulnerabilities in these s-bombs make

645
00:26:21,840 --> 00:26:23,940
sure you know exactly where you're using

646
00:26:23,940 --> 00:26:25,380
a container and the version of that

647
00:26:25,380 --> 00:26:28,500
container and make sure you can know it

648
00:26:28,500 --> 00:26:30,480
quickly and easily in case something new

649
00:26:30,480 --> 00:26:33,059
is detected in an old image and then of

650
00:26:33,059 --> 00:26:36,120
course admission controllers if you're

651
00:26:36,120 --> 00:26:37,980
using containers or kubernetes it's

652
00:26:37,980 --> 00:26:39,720
pretty easy to implement an admission

653
00:26:39,720 --> 00:26:41,340
controller which will ensure validation

654
00:26:41,340 --> 00:26:43,679
and verification of all these things

655
00:26:43,679 --> 00:26:46,880
that we're talking about here

656
00:26:47,100 --> 00:26:48,960
so I'm not going to read through this

657
00:26:48,960 --> 00:26:50,159
slide we've talked about these things

658
00:26:50,159 --> 00:26:54,779
but uh that's uh that's my talk and uh

659
00:26:54,779 --> 00:26:56,220
here's some

660
00:26:56,220 --> 00:26:57,659
credits

661
00:26:57,659 --> 00:27:00,030
and uh any are there any questions

662
00:27:00,030 --> 00:27:06,469
[Applause]

663
00:27:11,039 --> 00:27:13,740
do you have any tools for figuring out

664
00:27:13,740 --> 00:27:16,320
oh I have this dependency and

665
00:27:16,320 --> 00:27:19,340
maybe that's not a big

666
00:27:21,120 --> 00:27:24,059
not a great I don't no I don't know any

667
00:27:24,059 --> 00:27:26,820
good way of figuring that out it that's

668
00:27:26,820 --> 00:27:29,720
certainly a whole yeah

669
00:27:34,159 --> 00:27:37,500
they had like a scorecard only for

670
00:27:37,500 --> 00:27:39,860
GitHub

671
00:27:44,600 --> 00:27:48,600
what I didn't oh if one of if so it has

672
00:27:48,600 --> 00:27:51,539
whatever metrics to score that but that

673
00:27:51,539 --> 00:27:55,039
could be one way of looking

674
00:27:56,400 --> 00:27:59,960
hmm it is only available

675
00:28:02,640 --> 00:28:05,760
but but looking at the open source

676
00:28:05,760 --> 00:28:07,679
stuff that's always

677
00:28:07,679 --> 00:28:11,600
how many contributors are there how many

678
00:28:11,640 --> 00:28:14,659
yeah I

679
00:28:16,740 --> 00:28:18,600
think I think somebody mentioned

680
00:28:18,600 --> 00:28:20,279
yeah I think somebody mentioned in the

681
00:28:20,279 --> 00:28:21,840
keynote yes in the Keynotes yesterday

682
00:28:21,840 --> 00:28:24,779
about using stars as a as kind of a dark

683
00:28:24,779 --> 00:28:27,179
pattern it's I mean it's difficult to

684
00:28:27,179 --> 00:28:30,720
know I personally I look and see when

685
00:28:30,720 --> 00:28:32,940
the last commits were and you know

686
00:28:32,940 --> 00:28:35,400
the you know the rate at which it's been

687
00:28:35,400 --> 00:28:37,559
developed but uh that's some annual

688
00:28:37,559 --> 00:28:41,539
process too so go ahead

689
00:28:43,980 --> 00:28:47,240
I will yeah thank you

690
00:29:04,860 --> 00:29:06,299
I think

691
00:29:06,299 --> 00:29:09,799
I mean it's my personal opinion

692
00:29:09,799 --> 00:29:13,380
blockchain has a very in my opinion

693
00:29:13,380 --> 00:29:17,880
narrow application set and I think that

694
00:29:17,880 --> 00:29:20,580
a lot of things that people want to use

695
00:29:20,580 --> 00:29:22,679
blockchain for could be much better

696
00:29:22,679 --> 00:29:25,880
managed with uh you know traditional

697
00:29:25,880 --> 00:29:30,299
database type systems I don't I don't

698
00:29:30,299 --> 00:29:31,399
know

699
00:29:31,399 --> 00:29:35,039
why it's not more you know I don't know

700
00:29:35,039 --> 00:29:36,539
why people haven't more done more

701
00:29:36,539 --> 00:29:37,980
experimentation with it but I do know

702
00:29:37,980 --> 00:29:41,340
that it is a huge thing for like

703
00:29:41,340 --> 00:29:43,919
physical Supply chains right now is

704
00:29:43,919 --> 00:29:46,380
everybody's rushing to try and try and

705
00:29:46,380 --> 00:29:50,460
do it so I I think I I need to do more

706
00:29:50,460 --> 00:29:53,279
research into how they're using it but

707
00:29:53,279 --> 00:29:54,840
yeah so I don't really have a good

708
00:29:54,840 --> 00:29:56,340
answer to that question but yeah but

709
00:29:56,340 --> 00:29:58,140
thank you

710
00:29:58,140 --> 00:30:00,299
well it's 11 30. thank you all for

711
00:30:00,299 --> 00:30:03,679
coming and yeah

