1
00:00:00,120 --> 00:00:03,120
uh hello welcome I am Andy from control

2
00:00:03,120 --> 00:00:07,740
plane and I am standing in for my uh

3
00:00:07,740 --> 00:00:10,679
right honorable head of security Dr Ron

4
00:00:10,679 --> 00:00:13,200
Baker who very sadly has gastroenteritis

5
00:00:13,200 --> 00:00:16,199
and did not deem it fit to get on a

6
00:00:16,199 --> 00:00:19,680
plane very sensibly and a lot of the

7
00:00:19,680 --> 00:00:20,400
work

8
00:00:20,400 --> 00:00:23,039
in this talk is uh part of the

9
00:00:23,039 --> 00:00:24,779
collaboration with Henry Mortimer as

10
00:00:24,779 --> 00:00:26,760
well one of our Cloud native Engineers

11
00:00:26,760 --> 00:00:29,580
so a huge thanks and greetings gentlemen

12
00:00:29,580 --> 00:00:31,560
from the past

13
00:00:31,560 --> 00:00:33,120
thank you for the work you put in today

14
00:00:33,120 --> 00:00:35,399
and I hope that as much justice as

15
00:00:35,399 --> 00:00:38,520
possible we will be talking about

16
00:00:38,520 --> 00:00:41,640
infrastructures code potholes with Cloud

17
00:00:41,640 --> 00:00:45,780
controllers this is the uh reverse

18
00:00:45,780 --> 00:00:47,940
intersection of

19
00:00:47,940 --> 00:00:51,780
uh of get Ops essentially and uh

20
00:00:51,780 --> 00:00:54,899
event driven automation so when we're

21
00:00:54,899 --> 00:00:59,640
trying to do infrastructure as code with

22
00:00:59,640 --> 00:01:01,440
with Adventure of an automation where

23
00:01:01,440 --> 00:01:03,140
are the foot guns how do we fix things

24
00:01:03,140 --> 00:01:06,960
and where can existing tooling come into

25
00:01:06,960 --> 00:01:08,400
play

26
00:01:08,400 --> 00:01:10,560
so we're going to talk about some pain

27
00:01:10,560 --> 00:01:12,360
points we've seen around configuring

28
00:01:12,360 --> 00:01:15,479
infrastructure securely at scale within

29
00:01:15,479 --> 00:01:17,340
large organizations

30
00:01:17,340 --> 00:01:20,939
using cloud and policy controllers in

31
00:01:20,939 --> 00:01:22,740
kubernetes to address some of these

32
00:01:22,740 --> 00:01:24,060
issues

33
00:01:24,060 --> 00:01:27,180
and as I say a huge thanks to Rowan and

34
00:01:27,180 --> 00:01:30,119
Henry very briefly Rowan runs the

35
00:01:30,119 --> 00:01:33,060
security team at control plane control

36
00:01:33,060 --> 00:01:34,579
plane is a cloud native security

37
00:01:34,579 --> 00:01:37,500
consultancy we are based out of London

38
00:01:37,500 --> 00:01:41,100
UK we have offices in North America and

39
00:01:41,100 --> 00:01:44,220
Asia Pacific and mostly do Consulting

40
00:01:44,220 --> 00:01:47,220
for regulated Industries we are as

41
00:01:47,220 --> 00:01:49,079
always hiring if you're a security

42
00:01:49,079 --> 00:01:51,840
engineer a supply chain specialist an

43
00:01:51,840 --> 00:01:54,000
architect or threat modeler please do

44
00:01:54,000 --> 00:01:55,880
come and have a word

45
00:01:55,880 --> 00:02:00,740
and the great disembodied Dr Baker

46
00:02:07,740 --> 00:02:09,538
well that hasn't quite worked how I

47
00:02:09,538 --> 00:02:11,459
hoped

48
00:02:11,459 --> 00:02:13,920
if you wanted to try one more time

49
00:02:13,920 --> 00:02:15,540
um

50
00:02:15,540 --> 00:02:17,940
should be coming out of here I've got

51
00:02:17,940 --> 00:02:20,480
any luck

52
00:02:21,480 --> 00:02:23,879
perhaps not

53
00:02:23,879 --> 00:02:26,480
uh

54
00:02:27,000 --> 00:02:29,580
I think should be oh my God food

55
00:02:29,580 --> 00:02:32,940
poisoning a couple of days ago so I've

56
00:02:32,940 --> 00:02:36,120
been uh unable to uh to travel

57
00:02:36,120 --> 00:02:38,400
just wanted to introduce the talk before

58
00:02:38,400 --> 00:02:40,440
my uh distinguished

59
00:02:40,440 --> 00:02:42,540
role playing colleagues take over

60
00:02:42,540 --> 00:02:44,940
today we're looking to show how

61
00:02:44,940 --> 00:02:46,560
kubernetes provisioning infrastructure

62
00:02:46,560 --> 00:02:49,319
such as load balances can cause issues

63
00:02:49,319 --> 00:02:52,200
for large organizations in regulated

64
00:02:52,200 --> 00:02:53,959
Industries

65
00:02:53,959 --> 00:02:57,000
their security architectures are

66
00:02:57,000 --> 00:03:00,080
typically uh dependent on

67
00:03:00,080 --> 00:03:02,340
infrastructures code pipelines featuring

68
00:03:02,340 --> 00:03:05,160
policy checks so kubernetes provisioning

69
00:03:05,160 --> 00:03:07,260
infrastructure just uh isn't part of the

70
00:03:07,260 --> 00:03:08,400
plan

71
00:03:08,400 --> 00:03:10,860
uh we'll describe how that kubernetes

72
00:03:10,860 --> 00:03:13,099
provision infrastructure can be secured

73
00:03:13,099 --> 00:03:15,900
using uh policy agents at cluster

74
00:03:15,900 --> 00:03:18,360
admission time and then we'll look uh

75
00:03:18,360 --> 00:03:20,220
onwards as to how we can start using

76
00:03:20,220 --> 00:03:22,260
this patent to secure infrastructure

77
00:03:22,260 --> 00:03:25,080
provision by uh exciting New Generation

78
00:03:25,080 --> 00:03:28,400
of uh Cloud infrastructure controllers

79
00:03:28,400 --> 00:03:31,500
such as crossplay

80
00:03:31,500 --> 00:03:33,720
then towards the end of the talk we'll

81
00:03:33,720 --> 00:03:36,720
show how we can work towards securing

82
00:03:36,720 --> 00:03:39,000
that infrastructure in a manner where we

83
00:03:39,000 --> 00:03:41,280
achieve both

84
00:03:41,280 --> 00:03:44,180
um automated compliance against

85
00:03:44,180 --> 00:03:48,500
standards and simultaneous enforcement

86
00:03:48,500 --> 00:03:52,220
of uh preventive controls preventing

87
00:03:52,220 --> 00:03:55,140
misconfigured infrastructure from being

88
00:03:55,140 --> 00:03:56,220
launched

89
00:03:56,220 --> 00:04:00,180
all via a single oscow document that

90
00:04:00,180 --> 00:04:03,120
forms the single source of Truth for for

91
00:04:03,120 --> 00:04:04,620
both

92
00:04:04,620 --> 00:04:07,980
and illness notwithstanding we hope to

93
00:04:07,980 --> 00:04:11,159
open source the repo of example policies

94
00:04:11,159 --> 00:04:14,819
and oscale component definitions for AWS

95
00:04:14,819 --> 00:04:16,500
Services shortly

96
00:04:16,500 --> 00:04:19,440
so with that I'll leave it to my uh my

97
00:04:19,440 --> 00:04:20,639
colleagues

98
00:04:20,639 --> 00:04:22,680
I hope you enjoy the rest of the talk

99
00:04:22,680 --> 00:04:26,180
and the rest of the conference

100
00:04:26,280 --> 00:04:28,020
thank you Ron

101
00:04:28,020 --> 00:04:30,479
right there are some demos fortunately

102
00:04:30,479 --> 00:04:33,180
they have been um ASCII cinemod for me

103
00:04:33,180 --> 00:04:36,660
so I can't book to them let's rock and

104
00:04:36,660 --> 00:04:38,580
roll so

105
00:04:38,580 --> 00:04:41,759
using infrastructure as code policy

106
00:04:41,759 --> 00:04:43,919
I'm sorry my slides a little bit booked

107
00:04:43,919 --> 00:04:45,660
with policy gates to ensure

108
00:04:45,660 --> 00:04:47,639
infrastructure is securely provisioned

109
00:04:47,639 --> 00:04:50,100
should form the backbone of any Cloud

110
00:04:50,100 --> 00:04:52,500
security program we can create

111
00:04:52,500 --> 00:04:54,780
infrastructures code templates using

112
00:04:54,780 --> 00:04:56,639
terraform at Al

113
00:04:56,639 --> 00:04:59,340
that hard codes secure by default

114
00:04:59,340 --> 00:05:01,020
configurations

115
00:05:01,020 --> 00:05:04,020
that we can distribute and reuse for

116
00:05:04,020 --> 00:05:05,759
consumers of cloud infrastructure in

117
00:05:05,759 --> 00:05:08,280
large organizations and we can back this

118
00:05:08,280 --> 00:05:10,380
up by allowing users some degree of

119
00:05:10,380 --> 00:05:13,020
customization adding policy Gates into

120
00:05:13,020 --> 00:05:15,960
pipelines using tools such as Sentinel

121
00:05:15,960 --> 00:05:18,000
policy opa

122
00:05:18,000 --> 00:05:21,060
check of Etc however this does not

123
00:05:21,060 --> 00:05:24,419
account for infrastructure provisions

124
00:05:24,419 --> 00:05:27,080
in an event driven basis by Cloud

125
00:05:27,080 --> 00:05:29,820
infrastructure most organizations have

126
00:05:29,820 --> 00:05:32,220
some non-kubernetes based workloads into

127
00:05:32,220 --> 00:05:34,440
Cloud first and it's often months or

128
00:05:34,440 --> 00:05:37,139
years before a cloud migration

129
00:05:37,139 --> 00:05:39,120
uh and please keep and that is which

130
00:05:39,120 --> 00:05:41,280
then throws a metaphorical hand grenade

131
00:05:41,280 --> 00:05:44,340
into the Enterprise security architect's

132
00:05:44,340 --> 00:05:46,199
office

133
00:05:46,199 --> 00:05:48,840
most obviously kubernetes Provisions

134
00:05:48,840 --> 00:05:52,440
service load balancer types

135
00:05:52,440 --> 00:05:55,020
this happens rapidly and flexibly at a

136
00:05:55,020 --> 00:05:57,240
developer's request via the cloud

137
00:05:57,240 --> 00:06:00,000
controller apis

138
00:06:00,000 --> 00:06:02,340
however this can bypass infrastructure

139
00:06:02,340 --> 00:06:04,259
as code controls

140
00:06:04,259 --> 00:06:05,759
um going back to everything to finders

141
00:06:05,759 --> 00:06:07,800
code and get Ops these things just

142
00:06:07,800 --> 00:06:09,720
appear in our dashboards rather than

143
00:06:09,720 --> 00:06:11,840
being defined and subject to policy

144
00:06:11,840 --> 00:06:14,039
annotations can Define that load

145
00:06:14,039 --> 00:06:15,900
balances configuration and if

146
00:06:15,900 --> 00:06:18,240
unrestricted can create insecure

147
00:06:18,240 --> 00:06:21,560
infrastructure by adding routes and

148
00:06:21,560 --> 00:06:24,840
punching through otherwise theoretically

149
00:06:24,840 --> 00:06:28,380
secure policies and firewalls we can see

150
00:06:28,380 --> 00:06:30,180
from this example that the SSL cert is

151
00:06:30,180 --> 00:06:32,100
commented out and the load balancer is

152
00:06:32,100 --> 00:06:35,460
internet facing it is easy to footgun or

153
00:06:35,460 --> 00:06:38,580
intentionally bypass policy in this way

154
00:06:38,580 --> 00:06:40,740
trying to provision a load balancer via

155
00:06:40,740 --> 00:06:42,840
infrastructure is code like terraform

156
00:06:42,840 --> 00:06:44,940
and then integrate it with kubernetes

157
00:06:44,940 --> 00:06:46,560
which gives us something that we can

158
00:06:46,560 --> 00:06:50,160
apply policy to is more difficult

159
00:06:50,160 --> 00:06:52,560
PODS of node scale with non-static IPS

160
00:06:52,560 --> 00:06:54,479
of course and encoding these targets

161
00:06:54,479 --> 00:06:56,520
into the balancing pool of a load

162
00:06:56,520 --> 00:06:58,919
balancer is difficult

163
00:06:58,919 --> 00:07:01,199
in fact you can end up using a

164
00:07:01,199 --> 00:07:02,819
controller to do this

165
00:07:02,819 --> 00:07:04,440
whilst you might end up with something

166
00:07:04,440 --> 00:07:05,759
that's compliant to policy you

167
00:07:05,759 --> 00:07:07,979
complicate life for developers and

168
00:07:07,979 --> 00:07:10,139
operators

169
00:07:10,139 --> 00:07:13,440
so The Logical way to ensure these types

170
00:07:13,440 --> 00:07:16,319
these Services of type load balancer are

171
00:07:16,319 --> 00:07:19,259
secure is to use a policy engine such as

172
00:07:19,259 --> 00:07:23,099
caverno or open GateKeeper

173
00:07:23,099 --> 00:07:24,720
we install those as an admission

174
00:07:24,720 --> 00:07:27,120
controller and those emission

175
00:07:27,120 --> 00:07:29,280
controllers intercept the requests

176
00:07:29,280 --> 00:07:31,740
as the objects are written to the

177
00:07:31,740 --> 00:07:33,960
kubernetes API server of course prior to

178
00:07:33,960 --> 00:07:35,940
the Persistence of the objects

179
00:07:35,940 --> 00:07:37,500
and so today we'll talk mostly about

180
00:07:37,500 --> 00:07:40,199
validating admission controllers that

181
00:07:40,199 --> 00:07:42,000
simply send back a positive or negative

182
00:07:42,000 --> 00:07:44,400
response to allow or prevent an object

183
00:07:44,400 --> 00:07:46,319
being persisted

184
00:07:46,319 --> 00:07:48,360
that persistence then feeds into the

185
00:07:48,360 --> 00:07:51,120
policy into the provisioning engine and

186
00:07:51,120 --> 00:07:52,800
then the infrastructure is either

187
00:07:52,800 --> 00:07:54,660
permitted to deploy or not based on the

188
00:07:54,660 --> 00:07:57,720
presence of that entity

189
00:07:57,720 --> 00:08:00,240
using admission controllers and Cloud

190
00:08:00,240 --> 00:08:02,699
controllers in tandem we have a single

191
00:08:02,699 --> 00:08:04,680
enforcement points for application and

192
00:08:04,680 --> 00:08:07,319
infrastructure with policy defined as

193
00:08:07,319 --> 00:08:09,680
code

194
00:08:10,500 --> 00:08:13,380
for completeness cluster admission is

195
00:08:13,380 --> 00:08:14,880
not the best time to discover that

196
00:08:14,880 --> 00:08:17,400
something is misconfigured of course and

197
00:08:17,400 --> 00:08:19,379
the reality is that we can't always run

198
00:08:19,379 --> 00:08:22,139
admission controllers to fail closed if

199
00:08:22,139 --> 00:08:24,360
there are errors or issues with them an

200
00:08:24,360 --> 00:08:25,740
example being running at a mission

201
00:08:25,740 --> 00:08:27,379
controller outside of a cluster

202
00:08:27,379 --> 00:08:30,120
experiencing High latency and then

203
00:08:30,120 --> 00:08:32,760
essentially bricking a cluster

204
00:08:32,760 --> 00:08:36,000
so we need to integrate checks into the

205
00:08:36,000 --> 00:08:38,339
deployment pipelines for these

206
00:08:38,339 --> 00:08:40,140
infrastructures

207
00:08:40,140 --> 00:08:44,279
with things like caverno and GateKeeper

208
00:08:44,279 --> 00:08:45,899
tooling exists that allow us to

209
00:08:45,899 --> 00:08:48,300
integrate the CLI and the with the CLI

210
00:08:48,300 --> 00:08:51,120
and gate or respectively

211
00:08:51,120 --> 00:08:53,040
this is also helpful if we're looking to

212
00:08:53,040 --> 00:08:55,680
prove to stakeholders that we have

213
00:08:55,680 --> 00:08:57,480
equivalent security gates to

214
00:08:57,480 --> 00:08:59,399
infrastructures infrastructures code

215
00:08:59,399 --> 00:09:01,740
pipelines where tooling runs statically

216
00:09:01,740 --> 00:09:04,080
on the repository or before requests are

217
00:09:04,080 --> 00:09:06,720
made to the cloud apis so we're looking

218
00:09:06,720 --> 00:09:08,760
to gain parity between statically

219
00:09:08,760 --> 00:09:11,760
analyze the clarity configuration and

220
00:09:11,760 --> 00:09:14,040
dynamically provisioned ad hoc

221
00:09:14,040 --> 00:09:16,819
infrastructure

222
00:09:16,860 --> 00:09:20,100
looking beyond the service of type load

223
00:09:20,100 --> 00:09:22,200
balancer Engineers have started to

224
00:09:22,200 --> 00:09:23,880
realize the benefits of using

225
00:09:23,880 --> 00:09:25,740
controllers to provision back-end

226
00:09:25,740 --> 00:09:27,540
infrastructure for kubernetes hosted

227
00:09:27,540 --> 00:09:28,860
applications

228
00:09:28,860 --> 00:09:32,640
such as storage buckets or databases

229
00:09:32,640 --> 00:09:35,279
there are now quite a few Cloud

230
00:09:35,279 --> 00:09:37,440
infrastructure controller projects such

231
00:09:37,440 --> 00:09:40,920
as AWS ack Google config connects and

232
00:09:40,920 --> 00:09:43,920
cross plane and these broadly follow the

233
00:09:43,920 --> 00:09:46,800
operator pattern custom resources within

234
00:09:46,800 --> 00:09:48,899
the cluster paired with reconciling

235
00:09:48,899 --> 00:09:50,459
controllers for managing Cloud

236
00:09:50,459 --> 00:09:52,500
infrastructure

237
00:09:52,500 --> 00:09:55,440
the benefits of this approach

238
00:09:55,440 --> 00:09:57,360
there is potentially less developer

239
00:09:57,360 --> 00:09:58,680
complexity

240
00:09:58,680 --> 00:10:00,660
as plus the tenants are consuming a

241
00:10:00,660 --> 00:10:02,459
single kubernetes deployment pipeline

242
00:10:02,459 --> 00:10:04,200
for applications and related

243
00:10:04,200 --> 00:10:07,620
infrastructure there is a uh you build

244
00:10:07,620 --> 00:10:10,320
it you run it concertina of uh of

245
00:10:10,320 --> 00:10:13,560
runtime SRE devopsy style risk and

246
00:10:13,560 --> 00:10:15,300
management here this won't work for all

247
00:10:15,300 --> 00:10:16,800
organizations

248
00:10:16,800 --> 00:10:18,660
this also enables git Ops for

249
00:10:18,660 --> 00:10:20,399
infrastructure configuration not just

250
00:10:20,399 --> 00:10:23,180
applications

251
00:10:23,519 --> 00:10:26,040
um so of course this is then Reliant

252
00:10:26,040 --> 00:10:29,220
upon a lack of mutation for these

253
00:10:29,220 --> 00:10:31,200
entities coming through the kubernetes

254
00:10:31,200 --> 00:10:32,760
API

255
00:10:32,760 --> 00:10:34,320
because we get back into the same

256
00:10:34,320 --> 00:10:36,420
situation where if we don't have

257
00:10:36,420 --> 00:10:39,959
a an offline representation of the

258
00:10:39,959 --> 00:10:42,240
realized cluster State well then we've

259
00:10:42,240 --> 00:10:45,000
got a Reconciliation Gap even if the

260
00:10:45,000 --> 00:10:47,160
operator thinks it's done the right

261
00:10:47,160 --> 00:10:48,839
thing because the mutate mutating

262
00:10:48,839 --> 00:10:50,880
admission controller has added in those

263
00:10:50,880 --> 00:10:54,600
extra annotations or sidecars

264
00:10:54,600 --> 00:10:56,519
all custom resource definitions in this

265
00:10:56,519 --> 00:10:57,660
case

266
00:10:57,660 --> 00:11:00,000
the controller pattern provides some

267
00:11:00,000 --> 00:11:03,420
drift protection with those caveats

268
00:11:03,420 --> 00:11:05,040
for example you have to rerun the

269
00:11:05,040 --> 00:11:06,899
infrastructure as code pipelines to

270
00:11:06,899 --> 00:11:09,720
Stamp Out the drifts

271
00:11:09,720 --> 00:11:12,180
and finally we can secure this with

272
00:11:12,180 --> 00:11:15,120
policy engines which of course is the

273
00:11:15,120 --> 00:11:18,180
counterbalance to statically analyzing

274
00:11:18,180 --> 00:11:19,860
the infrastructure's code configuration

275
00:11:19,860 --> 00:11:23,420
that we would do traditionally

276
00:11:23,640 --> 00:11:26,459
so some early projects in this space to

277
00:11:26,459 --> 00:11:28,560
find the single controller per cloud

278
00:11:28,560 --> 00:11:30,480
service API

279
00:11:30,480 --> 00:11:32,100
but the reality is that creating

280
00:11:32,100 --> 00:11:34,560
infrastructure securely is not only

281
00:11:34,560 --> 00:11:36,959
about creating one service and setting

282
00:11:36,959 --> 00:11:39,660
specific configuration options uh these

283
00:11:39,660 --> 00:11:42,240
are the guard rails removing knobs and

284
00:11:42,240 --> 00:11:45,060
dials in order to stand up a secure by

285
00:11:45,060 --> 00:11:47,160
default configuration

286
00:11:47,160 --> 00:11:49,920
often we also require other

287
00:11:49,920 --> 00:11:52,440
pieces of infrastructure in place

288
00:11:52,440 --> 00:11:55,019
take S3 which we will discuss a little

289
00:11:55,019 --> 00:11:58,200
bit more today not only do we need to

290
00:11:58,200 --> 00:12:00,300
create the buckets and configure it

291
00:12:00,300 --> 00:12:01,560
properly

292
00:12:01,560 --> 00:12:03,240
but additionally we need to create the

293
00:12:03,240 --> 00:12:05,700
IM roles and users for access to those

294
00:12:05,700 --> 00:12:06,600
buckets

295
00:12:06,600 --> 00:12:10,260
the KMS keys for back-end encryption

296
00:12:10,260 --> 00:12:13,200
etc etc presumably some population of

297
00:12:13,200 --> 00:12:15,000
the bucket as well

298
00:12:15,000 --> 00:12:17,220
cross plane as a project looks to

299
00:12:17,220 --> 00:12:21,180
address some of this issue for us

300
00:12:21,180 --> 00:12:24,959
it is a cncf incidentally this is a

301
00:12:24,959 --> 00:12:26,640
project that control plane is often

302
00:12:26,640 --> 00:12:29,519
mistaken for cross-plane is a cncf

303
00:12:29,519 --> 00:12:31,920
incubating project that enables platform

304
00:12:31,920 --> 00:12:34,200
teams to build abstractions the tenants

305
00:12:34,200 --> 00:12:36,480
can consume obviously backed by

306
00:12:36,480 --> 00:12:38,399
providers to provision the

307
00:12:38,399 --> 00:12:40,200
infrastructure

308
00:12:40,200 --> 00:12:42,839
these abstractions are called composite

309
00:12:42,839 --> 00:12:45,320
resources

310
00:12:45,899 --> 00:12:48,540
so in our hypothetical organization

311
00:12:48,540 --> 00:12:51,120
a platform team defines the composite

312
00:12:51,120 --> 00:12:53,700
resources that developers and operators

313
00:12:53,700 --> 00:12:57,360
as human operators can consume

314
00:12:57,360 --> 00:12:59,519
the composite Resources Group managed

315
00:12:59,519 --> 00:13:01,380
resources together

316
00:13:01,380 --> 00:13:03,660
a managed resource correlates to an

317
00:13:03,660 --> 00:13:05,700
individual Cloud resource for example an

318
00:13:05,700 --> 00:13:08,339
S3 bucket or an IM role

319
00:13:08,339 --> 00:13:12,480
and providers in turn manage sorry

320
00:13:12,480 --> 00:13:14,940
providers turn manage resources into

321
00:13:14,940 --> 00:13:18,480
external resources in the cloud EG S3

322
00:13:18,480 --> 00:13:20,880
buckets

323
00:13:20,880 --> 00:13:23,220
so we have our resources grouped into

324
00:13:23,220 --> 00:13:25,740
composite resources

325
00:13:25,740 --> 00:13:29,339
and they're then managed by providers

326
00:13:29,339 --> 00:13:32,459
which are then deployed this simplifies

327
00:13:32,459 --> 00:13:34,860
the life of cluster tenants application

328
00:13:34,860 --> 00:13:37,920
developers system deployers who can

329
00:13:37,920 --> 00:13:39,360
claim a composite resource for their

330
00:13:39,360 --> 00:13:42,180
applications for example to cure S3 and

331
00:13:42,180 --> 00:13:45,959
IM roles as a single entity and there

332
00:13:45,959 --> 00:13:51,319
are providers for AWS gcp and azure

333
00:13:51,500 --> 00:13:56,399
so why is adoption not more widespread

334
00:13:56,399 --> 00:13:58,200
well enablers have only been around for

335
00:13:58,200 --> 00:14:00,240
a few years the controllers themselves

336
00:14:00,240 --> 00:14:03,660
are maturing in much

337
00:14:03,660 --> 00:14:04,980
excuse me I'm having trouble with this

338
00:14:04,980 --> 00:14:07,019
guy in much the same way as terraform

339
00:14:07,019 --> 00:14:09,060
providers take some time to come to

340
00:14:09,060 --> 00:14:11,519
maturity so we see the same

341
00:14:11,519 --> 00:14:13,740
um sort of underlying integration Point

342
00:14:13,740 --> 00:14:14,700
here

343
00:14:14,700 --> 00:14:17,579
ultimately we are configuring

344
00:14:17,579 --> 00:14:20,339
distributed systems and so we expect

345
00:14:20,339 --> 00:14:22,019
things to fail resilience needs to be

346
00:14:22,019 --> 00:14:24,180
built into controllers and shaking out

347
00:14:24,180 --> 00:14:27,540
bugs just takes a bit of time

348
00:14:27,540 --> 00:14:29,160
we might not be able to migrate

349
00:14:29,160 --> 00:14:31,800
everything under a cloud account into

350
00:14:31,800 --> 00:14:34,740
cross-plane just yet there is also the

351
00:14:34,740 --> 00:14:36,899
cluster zero problem

352
00:14:36,899 --> 00:14:39,480
we need a cluster on which to install

353
00:14:39,480 --> 00:14:41,360
cross plane itself

354
00:14:41,360 --> 00:14:44,100
unironically that's provisioned via

355
00:14:44,100 --> 00:14:46,019
terraform in the repo that we will open

356
00:14:46,019 --> 00:14:48,180
source to support this talk

357
00:14:48,180 --> 00:14:50,760
but the biggest issues that we see

358
00:14:50,760 --> 00:14:52,980
for many large organizations they have

359
00:14:52,980 --> 00:14:55,440
all infrastructure defined as code with

360
00:14:55,440 --> 00:14:57,600
configurations vetted using policy

361
00:14:57,600 --> 00:14:58,980
engines

362
00:14:58,980 --> 00:15:01,019
they then build teams around this

363
00:15:01,019 --> 00:15:03,540
pattern that satisfies c-suite and

364
00:15:03,540 --> 00:15:05,040
auditors

365
00:15:05,040 --> 00:15:06,959
kubernetes provisioning infrastructure

366
00:15:06,959 --> 00:15:09,720
does not fit into the model that we have

367
00:15:09,720 --> 00:15:12,360
taken so long to try and educate upwards

368
00:15:12,360 --> 00:15:14,699
to the audit space

369
00:15:14,699 --> 00:15:16,260
about

370
00:15:16,260 --> 00:15:18,060
so we need to establish trust in a

371
00:15:18,060 --> 00:15:20,040
security model for provisioning cloud

372
00:15:20,040 --> 00:15:22,019
infrastructure via kubernetes

373
00:15:22,019 --> 00:15:23,160
controllers

374
00:15:23,160 --> 00:15:26,279
and we will look at how we do that

375
00:15:26,279 --> 00:15:28,920
we have a proof of concept project that

376
00:15:28,920 --> 00:15:30,839
demonstrates that we can address these

377
00:15:30,839 --> 00:15:34,320
controls and be in a good place from a

378
00:15:34,320 --> 00:15:36,480
security standpoint when widespread

379
00:15:36,480 --> 00:15:39,680
adoption occurs

380
00:15:40,079 --> 00:15:42,839
the library that we will open open

381
00:15:42,839 --> 00:15:45,839
source here to be made public soon I

382
00:15:45,839 --> 00:15:47,459
will do that after the talk

383
00:15:47,459 --> 00:15:49,980
contains libraries of validating policy

384
00:15:49,980 --> 00:15:53,760
for S3 and RDS provisioned using the

385
00:15:53,760 --> 00:15:57,180
cross plain Community AWS provider these

386
00:15:57,180 --> 00:15:59,240
libraries are aligned to nist

387
00:15:59,240 --> 00:16:02,940
853 Rev 5. and instead of generating

388
00:16:02,940 --> 00:16:05,880
mountains of policy and yaml that might

389
00:16:05,880 --> 00:16:08,399
ultimately be forgotten we also started

390
00:16:08,399 --> 00:16:10,380
to look at how to make those policies

391
00:16:10,380 --> 00:16:12,600
enable the documentation of compliance

392
00:16:12,600 --> 00:16:16,440
in an automated manner

393
00:16:16,440 --> 00:16:20,040
so let's see

394
00:16:20,040 --> 00:16:24,000
this isn't reticent so there we go

395
00:16:24,000 --> 00:16:25,560
ah

396
00:16:25,560 --> 00:16:27,000
that was unsuccessful I might have to

397
00:16:27,000 --> 00:16:29,100
pop this in

398
00:16:29,100 --> 00:16:31,459
window

399
00:16:34,260 --> 00:16:37,459
okay incoming

400
00:16:42,240 --> 00:16:46,040
can't see the target there we go

401
00:17:11,939 --> 00:17:15,179
um can anybody see the bottom of that

402
00:17:15,179 --> 00:17:17,939
scroll okay there we go it's still

403
00:17:17,939 --> 00:17:21,500
rolling oh there it is

404
00:17:26,099 --> 00:17:28,199
okay so what we've been doing is making

405
00:17:28,199 --> 00:17:30,000
sure there are no existing cluster

406
00:17:30,000 --> 00:17:32,160
policies the cluster has just had

407
00:17:32,160 --> 00:17:34,260
caverno and cross plane installed on it

408
00:17:34,260 --> 00:17:37,500
the policies we've created for S3 exists

409
00:17:37,500 --> 00:17:39,120
in the ls policy from the previous

410
00:17:39,120 --> 00:17:40,860
moments

411
00:17:40,860 --> 00:17:42,360
um preventing Public Access encryption

412
00:17:42,360 --> 00:17:45,600
enforcement HTTP get requests Etc this

413
00:17:45,600 --> 00:17:47,940
is what a typical caverno cluster policy

414
00:17:47,940 --> 00:17:49,440
looks like

415
00:17:49,440 --> 00:17:51,539
in this case we're ensuring the S3

416
00:17:51,539 --> 00:17:54,480
bucket object was configured with KMS

417
00:17:54,480 --> 00:17:57,960
server-side encryption by default

418
00:17:57,960 --> 00:18:00,299
and a validation failed in that case the

419
00:18:00,299 --> 00:18:01,980
object was rejected from the cluster

420
00:18:01,980 --> 00:18:03,419
preventing the launch of insecure

421
00:18:03,419 --> 00:18:04,679
configuration

422
00:18:04,679 --> 00:18:07,860
this policy is now applied we can see

423
00:18:07,860 --> 00:18:09,840
it's correctly installed

424
00:18:09,840 --> 00:18:12,720
this is our minimal S3 bucket

425
00:18:12,720 --> 00:18:15,260
configuration

426
00:18:17,520 --> 00:18:19,080
you can see from within the provider

427
00:18:19,080 --> 00:18:21,120
Fields encryption at rest using KMS was

428
00:18:21,120 --> 00:18:23,700
not defined we've tried to apply this to

429
00:18:23,700 --> 00:18:27,000
the cluster and that has been rejected

430
00:18:27,000 --> 00:18:29,280
on the basis that the S3 encryption was

431
00:18:29,280 --> 00:18:31,080
not enabled of course

432
00:18:31,080 --> 00:18:33,059
now we'll apply the rest of the policies

433
00:18:33,059 --> 00:18:36,780
shown earlier in the cluster

434
00:18:36,780 --> 00:18:39,360
so we'll just check the cluster policies

435
00:18:39,360 --> 00:18:41,640
are applied

436
00:18:41,640 --> 00:18:43,440
there we go there's the deploy and we'll

437
00:18:43,440 --> 00:18:46,400
check momentarily

438
00:18:53,820 --> 00:18:56,400
okay we've validated that they exist so

439
00:18:56,400 --> 00:18:58,440
we've created a bucket called the

440
00:18:58,440 --> 00:19:00,419
authorized bucket that satisfies all of

441
00:19:00,419 --> 00:19:03,120
these policies this is the first 30 odd

442
00:19:03,120 --> 00:19:05,940
lines of that documents

443
00:19:05,940 --> 00:19:08,280
but when we apply it on its own to the

444
00:19:08,280 --> 00:19:10,799
cluster it will fail because a bucket

445
00:19:10,799 --> 00:19:13,620
policy to deny HTTP get requests needs

446
00:19:13,620 --> 00:19:15,120
to firstly exist

447
00:19:15,120 --> 00:19:17,820
and reference our buckets to satisfy the

448
00:19:17,820 --> 00:19:23,000
security requirements as per that

449
00:19:25,080 --> 00:19:26,880
next we will look at the required

450
00:19:26,880 --> 00:19:30,059
cross-plane bucket policy this is

451
00:19:30,059 --> 00:19:31,440
attached to our authorized bucket

452
00:19:31,440 --> 00:19:34,679
through the bucket name reffield

453
00:19:34,679 --> 00:19:37,580
which is incoming

454
00:19:37,580 --> 00:19:40,919
on eight and nine lines eight and nine

455
00:19:40,919 --> 00:19:42,960
there as you can see the policy denies

456
00:19:42,960 --> 00:19:45,419
all requests that have AWS secure

457
00:19:45,419 --> 00:19:48,600
transport set the false on lines 18 19

458
00:19:48,600 --> 00:19:53,120
and 24 and 25.

459
00:19:54,360 --> 00:19:58,140
so we will now apply these prerequisites

460
00:19:58,140 --> 00:20:00,179
and the buckets will deploy successfully

461
00:20:00,179 --> 00:20:02,460
to the cluster without being rejected by

462
00:20:02,460 --> 00:20:04,380
the security policy

463
00:20:04,380 --> 00:20:07,039
so we'd expect the bucket definition

464
00:20:07,039 --> 00:20:09,299
policy definition and other

465
00:20:09,299 --> 00:20:11,220
prerequisites to be wrapped up into a

466
00:20:11,220 --> 00:20:13,980
cross-plane composite resource for

467
00:20:13,980 --> 00:20:16,080
tenants to consume

468
00:20:16,080 --> 00:20:18,900
we will then try and request the bucket

469
00:20:18,900 --> 00:20:21,240
itself

470
00:20:21,240 --> 00:20:23,280
it will take a moment for the bucket to

471
00:20:23,280 --> 00:20:26,039
show as ready

472
00:20:26,039 --> 00:20:28,200
because the S3 server logging is on a

473
00:20:28,200 --> 00:20:29,700
best effort basis

474
00:20:29,700 --> 00:20:31,380
and it can take some time for the bucket

475
00:20:31,380 --> 00:20:34,740
itself to report it's ready

476
00:20:34,740 --> 00:20:36,720
and then finally when applying the basic

477
00:20:36,720 --> 00:20:38,820
buckets it will be rejected on multiple

478
00:20:38,820 --> 00:20:42,000
counts there we go so that is the bucket

479
00:20:42,000 --> 00:20:44,100
which we expected but now the basic

480
00:20:44,100 --> 00:20:46,380
bucket will be rejected

481
00:20:46,380 --> 00:20:48,480
and with a caverno test filed for sure

482
00:20:48,480 --> 00:20:50,580
ensure the policies are behaving as

483
00:20:50,580 --> 00:20:53,100
expected

484
00:20:53,100 --> 00:20:55,200
to be clear we expect these policies to

485
00:20:55,200 --> 00:20:57,720
be triggered by the platform teams when

486
00:20:57,720 --> 00:20:59,780
they're creating compositions

487
00:20:59,780 --> 00:21:01,860
compositions should never contain

488
00:21:01,860 --> 00:21:04,140
violations these were a selection of

489
00:21:04,140 --> 00:21:06,600
demos if they did they would be

490
00:21:06,600 --> 00:21:10,639
self-defeating and useless

491
00:21:13,020 --> 00:21:16,020
okay

492
00:21:16,320 --> 00:21:18,059
so

493
00:21:18,059 --> 00:21:21,120
that's a first view for how this can be

494
00:21:21,120 --> 00:21:24,000
achieved so we've just created more yaml

495
00:21:24,000 --> 00:21:27,059
to throw at the cluster without fully

496
00:21:27,059 --> 00:21:29,340
defining where our controls come from

497
00:21:29,340 --> 00:21:31,200
and I appreciate the frustration this

498
00:21:31,200 --> 00:21:33,780
brings and how difficult managing yaml

499
00:21:33,780 --> 00:21:36,179
policy at scale truly is

500
00:21:36,179 --> 00:21:38,940
there are entire talks on that one of

501
00:21:38,940 --> 00:21:41,159
our colleagues control plane by the name

502
00:21:41,159 --> 00:21:43,440
of Mr Chris Nesbitt Smith has a

503
00:21:43,440 --> 00:21:45,539
fantastic talk called versioned policy

504
00:21:45,539 --> 00:21:48,000
as code which looks at how to make

505
00:21:48,000 --> 00:21:50,580
policy changes across massive government

506
00:21:50,580 --> 00:21:54,120
organizations the tldr is ensure people

507
00:21:54,120 --> 00:21:57,179
are allowed to test and have warning

508
00:21:57,179 --> 00:21:59,039
before enforcement

509
00:21:59,039 --> 00:22:00,840
various different ways

510
00:22:00,840 --> 00:22:04,140
but one thing we did look at here is how

511
00:22:04,140 --> 00:22:06,240
to create traceability between controls

512
00:22:06,240 --> 00:22:07,799
on the cluster and compliance

513
00:22:07,799 --> 00:22:10,620
requirements which gives meaning to the

514
00:22:10,620 --> 00:22:13,740
controls in the library

515
00:22:13,740 --> 00:22:16,919
here we get into oscow

516
00:22:16,919 --> 00:22:19,080
so using our scale documents as a source

517
00:22:19,080 --> 00:22:22,559
of Truth for the enforced policies a

518
00:22:22,559 --> 00:22:24,900
huge thanks to Mr Brent Keller who is

519
00:22:24,900 --> 00:22:26,640
the author of The tooling that we'll

520
00:22:26,640 --> 00:22:28,020
look at in a moment

521
00:22:28,020 --> 00:22:30,780
uh we have the open security controls

522
00:22:30,780 --> 00:22:32,940
assessment language going on here this

523
00:22:32,940 --> 00:22:35,159
is a collaborative project run by nist

524
00:22:35,159 --> 00:22:38,159
it is machine readable representations

525
00:22:38,159 --> 00:22:40,919
of control catalogs control based lines

526
00:22:40,919 --> 00:22:43,440
system security plans and assessment

527
00:22:43,440 --> 00:22:46,020
plans and results

528
00:22:46,020 --> 00:22:47,580
tldr

529
00:22:47,580 --> 00:22:51,439
automated policy verification

530
00:22:52,020 --> 00:22:54,360
this enables an ecosystem of tooling for

531
00:22:54,360 --> 00:22:56,820
creating manipulating and validating

532
00:22:56,820 --> 00:22:59,280
compliance artifacts around that machine

533
00:22:59,280 --> 00:23:01,320
readable formats

534
00:23:01,320 --> 00:23:03,840
this removes resilience on out-of-date

535
00:23:03,840 --> 00:23:07,080
documents spreadsheets screenshots and

536
00:23:07,080 --> 00:23:08,460
manual assessments for compliance

537
00:23:08,460 --> 00:23:10,860
activities which I'm sure any of us who

538
00:23:10,860 --> 00:23:13,140
have gone through an audit are all too

539
00:23:13,140 --> 00:23:15,120
painfully familiar with

540
00:23:15,120 --> 00:23:17,280
and this leverages the tool called Lula

541
00:23:17,280 --> 00:23:19,740
to validate controls in oscow

542
00:23:19,740 --> 00:23:22,080
documentation against reality and

543
00:23:22,080 --> 00:23:26,600
generate enforcing policy from Oscar

544
00:23:28,200 --> 00:23:31,080
so there are three documents that we

545
00:23:31,080 --> 00:23:33,059
will dig into here

546
00:23:33,059 --> 00:23:35,520
catalogs are collections of controls

547
00:23:35,520 --> 00:23:37,799
maintained by an organization or by a

548
00:23:37,799 --> 00:23:38,940
standards body

549
00:23:38,940 --> 00:23:40,980
so in this case we'll be referencing

550
00:23:40,980 --> 00:23:44,520
nist 853 which has been codified into

551
00:23:44,520 --> 00:23:47,880
our scale forests at 173 000 lines of

552
00:23:47,880 --> 00:23:49,500
yaml

553
00:23:49,500 --> 00:23:53,520
profiles baselines of selected controls

554
00:23:53,520 --> 00:23:56,340
and so nist has high medium and low bass

555
00:23:56,340 --> 00:24:00,120
lines for at least 853 but we can also

556
00:24:00,120 --> 00:24:02,220
create profiles for specific components

557
00:24:02,220 --> 00:24:05,700
such as an S3 profile that details all

558
00:24:05,700 --> 00:24:07,700
of the nist 1800

559
00:24:07,700 --> 00:24:13,520
853 controls applicable to S3

560
00:24:14,580 --> 00:24:18,059
finally component definitions are a more

561
00:24:18,059 --> 00:24:20,820
detailed description of controls

562
00:24:20,820 --> 00:24:23,000
supported in a given implementation

563
00:24:23,000 --> 00:24:28,340
referencing a control from a profile

564
00:24:28,500 --> 00:24:31,320
so to build Oscar documents for S3 we

565
00:24:31,320 --> 00:24:32,460
were lucky enough to have this

566
00:24:32,460 --> 00:24:35,039
information available to us the AWS

567
00:24:35,039 --> 00:24:38,360
config rule set mapped to the list

568
00:24:38,360 --> 00:24:41,460
853 rev 5 I'm sure he's taking the

569
00:24:41,460 --> 00:24:42,780
Mickey out of me now

570
00:24:42,780 --> 00:24:45,600
is public shown in the top left table

571
00:24:45,600 --> 00:24:47,340
here

572
00:24:47,340 --> 00:24:50,820
from this we distill the nist IDS into

573
00:24:50,820 --> 00:24:53,880
oscow profile for S3 which is shown on

574
00:24:53,880 --> 00:24:55,020
the right

575
00:24:55,020 --> 00:24:58,020
and we wrote Governor policy equivalent

576
00:24:58,020 --> 00:25:01,140
to intent and spirits of the AWS config

577
00:25:01,140 --> 00:25:02,400
rules

578
00:25:02,400 --> 00:25:06,120
Cal component document for Lula to

579
00:25:06,120 --> 00:25:08,100
Leverage

580
00:25:08,100 --> 00:25:10,080
I'll just repeat that last bit some semi

581
00:25:10,080 --> 00:25:12,419
butchered it we wrote Governor policy

582
00:25:12,419 --> 00:25:14,400
for Lula

583
00:25:14,400 --> 00:25:17,880
into Oscar so the documentation here

584
00:25:17,880 --> 00:25:19,919
shows how the aforementioned this

585
00:25:19,919 --> 00:25:22,740
standard control IDs from the S3 profile

586
00:25:22,740 --> 00:25:24,059
are addressed

587
00:25:24,059 --> 00:25:26,340
you can see on this slide references to

588
00:25:26,340 --> 00:25:29,039
the S3 profile documents

589
00:25:29,039 --> 00:25:31,740
the nist control IDs within that profile

590
00:25:31,740 --> 00:25:34,159
followed by a description of the control

591
00:25:34,159 --> 00:25:37,919
and a caverno policy block

592
00:25:37,919 --> 00:25:40,140
this block is an amendment to the Oscar

593
00:25:40,140 --> 00:25:42,480
component definition

594
00:25:42,480 --> 00:25:45,120
leveraged by Lula and proposed by the

595
00:25:45,120 --> 00:25:46,919
lular team

596
00:25:46,919 --> 00:25:49,740
and for context oscow is still a format

597
00:25:49,740 --> 00:25:51,900
under development designed to stimulate

598
00:25:51,900 --> 00:25:54,480
discussion and an ecosystem of tooling

599
00:25:54,480 --> 00:25:56,400
so nist are collaborative when taking

600
00:25:56,400 --> 00:25:58,260
suggestions from the industry around

601
00:25:58,260 --> 00:26:00,419
modifications to Oscar document

602
00:26:00,419 --> 00:26:02,700
structures

603
00:26:02,700 --> 00:26:04,919
Lula is a tool by the right honorable Mr

604
00:26:04,919 --> 00:26:06,840
Brandt Keller and team at defense

605
00:26:06,840 --> 00:26:09,480
unicorns the bridge the gap between the

606
00:26:09,480 --> 00:26:11,640
expected configuration required for

607
00:26:11,640 --> 00:26:14,159
compliance and the actual reality of

608
00:26:14,159 --> 00:26:16,500
configuration it takes the component

609
00:26:16,500 --> 00:26:18,419
definition as shown previously and

610
00:26:18,419 --> 00:26:21,059
leverages the caverno CLI to run

611
00:26:21,059 --> 00:26:23,100
generated Governor policies against the

612
00:26:23,100 --> 00:26:26,400
cluster or static manifests

613
00:26:26,400 --> 00:26:28,640
uh my colleague Henry recently had a PR

614
00:26:28,640 --> 00:26:31,320
submitted in this project to simplify

615
00:26:31,320 --> 00:26:33,480
sorry to Simply add

616
00:26:33,480 --> 00:26:35,880
a generate flag and save those rendered

617
00:26:35,880 --> 00:26:38,400
policies to disk so we can then get at

618
00:26:38,400 --> 00:26:40,799
them running incuberno and forcing them

619
00:26:40,799 --> 00:26:43,820
at admission time

620
00:26:46,919 --> 00:26:48,059
okay

621
00:26:48,059 --> 00:26:50,820
demo time again

622
00:26:50,820 --> 00:26:52,980
I'm going to reset the cluster back

623
00:26:52,980 --> 00:26:56,120
to its original states

624
00:27:00,480 --> 00:27:02,880
hit the target button there

625
00:27:02,880 --> 00:27:04,200
lovely

626
00:27:04,200 --> 00:27:06,240
okay so

627
00:27:06,240 --> 00:27:08,700
um we have a draft we have a policy here

628
00:27:08,700 --> 00:27:11,159
that we've drafted for S3 that is just

629
00:27:11,159 --> 00:27:13,440
resetting the cluster back

630
00:27:13,440 --> 00:27:14,940
the important lines we're looking for

631
00:27:14,940 --> 00:27:20,539
are lines 28 when they turn up again

632
00:27:20,820 --> 00:27:24,140
yep line 28 where we reference the nist

633
00:27:24,140 --> 00:27:27,600
853 catalog and then from line 30

634
00:27:27,600 --> 00:27:30,179
downwards we can see the list of control

635
00:27:30,179 --> 00:27:33,600
IDs from nists which can be satisfied

636
00:27:33,600 --> 00:27:37,559
with the correct configuration of S3

637
00:27:37,559 --> 00:27:40,380
and the rest of the file continues like

638
00:27:40,380 --> 00:27:42,620
so

639
00:27:44,580 --> 00:27:48,419
so what we will have next yes that is

640
00:27:48,419 --> 00:27:50,520
further controls

641
00:27:50,520 --> 00:27:53,039
so to remind you component definitions

642
00:27:53,039 --> 00:27:55,799
show how the control IDs in the profile

643
00:27:55,799 --> 00:27:57,299
are interpreted

644
00:27:57,299 --> 00:27:59,039
this is a cut down version of the

645
00:27:59,039 --> 00:28:01,200
component definition for the demo to

646
00:28:01,200 --> 00:28:03,960
reduce time under control implementation

647
00:28:03,960 --> 00:28:08,220
field on line 28 29 and 30.

648
00:28:08,220 --> 00:28:10,380
we reference the S3 profile shown

649
00:28:10,380 --> 00:28:11,520
previously

650
00:28:11,520 --> 00:28:13,559
and then the implemented requirements

651
00:28:13,559 --> 00:28:15,960
for that profile are listed below each

652
00:28:15,960 --> 00:28:21,020
requirement has its own uid line 34

653
00:28:21,120 --> 00:28:23,039
the control of these references the

654
00:28:23,039 --> 00:28:25,020
control from the nist profile which is

655
00:28:25,020 --> 00:28:27,960
line 35 followed by a description field

656
00:28:27,960 --> 00:28:30,120
where we place the name corresponding to

657
00:28:30,120 --> 00:28:33,539
the AWS config rule we have Rewritten in

658
00:28:33,539 --> 00:28:36,840
caverno and the rules block which is a

659
00:28:36,840 --> 00:28:39,960
port of proveno policy used by Lula

660
00:28:39,960 --> 00:28:42,419
in the component definition we have

661
00:28:42,419 --> 00:28:46,559
just I mean just have implemented One

662
00:28:46,559 --> 00:28:49,020
requirement and that is the S3 version

663
00:28:49,020 --> 00:28:53,000
life cycle policy enablement

664
00:28:55,740 --> 00:28:57,840
so moving on we will look at the basic

665
00:28:57,840 --> 00:29:00,720
bucket which does not have the the fine

666
00:29:00,720 --> 00:29:02,700
that we're looking for the S3 version

667
00:29:02,700 --> 00:29:05,600
lifecycle

668
00:29:05,820 --> 00:29:09,480
yes it is absent so without policy we

669
00:29:09,480 --> 00:29:11,880
can launch this into the cluster and

670
00:29:11,880 --> 00:29:14,159
have a vulnerable bucket in our estate

671
00:29:14,159 --> 00:29:16,620
that is not what we want we're proving

672
00:29:16,620 --> 00:29:19,679
the negative case in order to lock it

673
00:29:19,679 --> 00:29:23,299
down bad news for the cluster

674
00:29:23,760 --> 00:29:25,919
so we'll now run Lula to assess

675
00:29:25,919 --> 00:29:28,260
compliance against requirements in the

676
00:29:28,260 --> 00:29:30,059
component definition

677
00:29:30,059 --> 00:29:33,179
and see that it fails as expected there

678
00:29:33,179 --> 00:29:35,159
is a compliance violation which when you

679
00:29:35,159 --> 00:29:36,600
look up the uid and the component

680
00:29:36,600 --> 00:29:38,940
definition is the lack of S3 version

681
00:29:38,940 --> 00:29:42,500
life cycle policy

682
00:29:42,840 --> 00:29:44,460
we should also note that Lula does

683
00:29:44,460 --> 00:29:46,260
produce compliant support to disk as

684
00:29:46,260 --> 00:29:48,299
well and so Lula could be leveraged in a

685
00:29:48,299 --> 00:29:50,700
number of ways to assess compliance in

686
00:29:50,700 --> 00:29:53,760
an automated manner

687
00:29:53,760 --> 00:29:56,700
so let's proceed to remove the

688
00:29:56,700 --> 00:29:59,419
vulnerable bucket

689
00:30:05,039 --> 00:30:06,539
there we go

690
00:30:06,539 --> 00:30:09,720
we can also then run Lula in a generate

691
00:30:09,720 --> 00:30:12,419
mode this time against the full S3

692
00:30:12,419 --> 00:30:14,340
component definition because it is

693
00:30:14,340 --> 00:30:16,740
quicker

694
00:30:16,740 --> 00:30:18,539
this will create the governor policies

695
00:30:18,539 --> 00:30:21,600
from the S3 component definition thus we

696
00:30:21,600 --> 00:30:23,360
have the S3 component definition

697
00:30:23,360 --> 00:30:25,559
becoming the source of Truth for

698
00:30:25,559 --> 00:30:30,418
compliance and ultimately enforcement

699
00:30:36,840 --> 00:30:39,659
okay these policies are currently named

700
00:30:39,659 --> 00:30:42,000
by their euids and their duplicates as

701
00:30:42,000 --> 00:30:44,279
rules such as version life cycle policy

702
00:30:44,279 --> 00:30:48,240
are mapped to many nist control IDs we

703
00:30:48,240 --> 00:30:49,799
don't want to push these into a cluster

704
00:30:49,799 --> 00:30:51,240
just yet

705
00:30:51,240 --> 00:30:53,700
so we will have a look at the component

706
00:30:53,700 --> 00:30:55,500
definition which we have looked at

707
00:30:55,500 --> 00:30:57,360
before

708
00:30:57,360 --> 00:30:59,279
we've written a script that uses the

709
00:30:59,279 --> 00:31:01,799
uids to match the policy

710
00:31:01,799 --> 00:31:03,720
to match the policy files with

711
00:31:03,720 --> 00:31:05,880
implemented requirements in the S3

712
00:31:05,880 --> 00:31:08,340
component definition and renamed the

713
00:31:08,340 --> 00:31:11,399
file and caverno policy name according

714
00:31:11,399 --> 00:31:13,799
to the first word in the description for

715
00:31:13,799 --> 00:31:15,360
the corresponding implemented

716
00:31:15,360 --> 00:31:16,620
requirements

717
00:31:16,620 --> 00:31:20,700
which is our AWS config rule online 37.

718
00:31:20,700 --> 00:31:23,720
yes there we go

719
00:31:23,820 --> 00:31:26,220
we will run that script and observe the

720
00:31:26,220 --> 00:31:29,820
policies that are created by it

721
00:31:29,820 --> 00:31:33,260
as if by Magic

722
00:31:34,740 --> 00:31:36,600
there we go

723
00:31:36,600 --> 00:31:38,940
and these are the polishes for the

724
00:31:38,940 --> 00:31:40,919
cluster let's install them as we did

725
00:31:40,919 --> 00:31:42,000
previously

726
00:31:42,000 --> 00:31:45,120
we would expect them to fail

727
00:31:45,120 --> 00:31:47,880
with the basic buckets once these are

728
00:31:47,880 --> 00:31:50,299
deployed

729
00:32:03,419 --> 00:32:05,100
Zoom forward slightly so the policies

730
00:32:05,100 --> 00:32:07,200
are created we're now deploying the

731
00:32:07,200 --> 00:32:09,299
basic bucket which we do not expect to

732
00:32:09,299 --> 00:32:10,860
be permitted because we've applied our

733
00:32:10,860 --> 00:32:13,140
policy that we've gone through and

734
00:32:13,140 --> 00:32:14,760
generated

735
00:32:14,760 --> 00:32:17,460
and finally when we deploy the

736
00:32:17,460 --> 00:32:20,460
authorized buckets it is permitted to

737
00:32:20,460 --> 00:32:22,140
the cluster because

738
00:32:22,140 --> 00:32:26,460
it is compliant with all of our policy

739
00:32:26,460 --> 00:32:29,640
magical fabulous and wonderful we can

740
00:32:29,640 --> 00:32:31,440
subsequently validate compliance using

741
00:32:31,440 --> 00:32:33,360
Lula with the added benefit of

742
00:32:33,360 --> 00:32:35,580
preventing a vulnerable bucket being

743
00:32:35,580 --> 00:32:38,840
launched in the first place

744
00:32:44,700 --> 00:32:48,299
okay doki

745
00:32:49,200 --> 00:32:52,559
so obviously at this point in the demo

746
00:32:52,559 --> 00:32:54,179
we've just scripted and glued a few

747
00:32:54,179 --> 00:32:58,260
things together with the Majesty of Bash

748
00:32:58,260 --> 00:33:00,179
what we're looking for is the final step

749
00:33:00,179 --> 00:33:03,539
for a policy um to be generated outside

750
00:33:03,539 --> 00:33:05,159
by something slightly better tested of

751
00:33:05,159 --> 00:33:07,080
course we'd like to understand whether

752
00:33:07,080 --> 00:33:08,460
that's something we can build into the

753
00:33:08,460 --> 00:33:12,299
tool if that is found useful we welcome

754
00:33:12,299 --> 00:33:14,519
any feedback on the next steps this is

755
00:33:14,519 --> 00:33:17,159
something that we have some utility

756
00:33:17,159 --> 00:33:20,279
uh with from clients at the moment

757
00:33:20,279 --> 00:33:22,919
uh it would be logical to cover all of

758
00:33:22,919 --> 00:33:28,740
the AWS config rules in nist 853 Rev 5.

759
00:33:28,740 --> 00:33:30,779
we'll also be looking at gcp or other

760
00:33:30,779 --> 00:33:34,320
controllers such as config connector

761
00:33:34,320 --> 00:33:37,679
and in conclusion policy engines for

762
00:33:37,679 --> 00:33:40,140
event-driven workflows and

763
00:33:40,140 --> 00:33:42,600
infrastructure as code are a must from

764
00:33:42,600 --> 00:33:44,159
day one

765
00:33:44,159 --> 00:33:45,480
we need to build them into security

766
00:33:45,480 --> 00:33:47,880
architectures for kubernetes and Beyond

767
00:33:47,880 --> 00:33:49,320
any of our Cloud infrastructure

768
00:33:49,320 --> 00:33:52,440
deployment techniques they enable not

769
00:33:52,440 --> 00:33:55,019
only the initial case the load balancer

770
00:33:55,019 --> 00:33:58,080
service but can also be used more widely

771
00:33:58,080 --> 00:34:00,059
across a large organization to enable

772
00:34:00,059 --> 00:34:02,940
self-service infrastructure provisioned

773
00:34:02,940 --> 00:34:05,399
by infrastructure controllers there are

774
00:34:05,399 --> 00:34:07,440
a lot of developments in that space that

775
00:34:07,440 --> 00:34:10,500
could prove exciting in the next months

776
00:34:10,500 --> 00:34:11,639
and years

777
00:34:11,639 --> 00:34:13,440
we have some policies enforcing

778
00:34:13,440 --> 00:34:15,080
compliance to Nest

779
00:34:15,080 --> 00:34:19,679
853 for AWS S3 and RDS that you can use

780
00:34:19,679 --> 00:34:21,418
with cross-plane provisioned

781
00:34:21,418 --> 00:34:23,339
infrastructure under the collie repo

782
00:34:23,339 --> 00:34:25,918
that I will open up shortly

783
00:34:25,918 --> 00:34:29,639
and through oscarl Lula and caverno and

784
00:34:29,639 --> 00:34:31,440
Cloud controllers we're starting to get

785
00:34:31,440 --> 00:34:33,719
to a place where we can tell in an

786
00:34:33,719 --> 00:34:35,460
automated way

787
00:34:35,460 --> 00:34:38,280
sorry where you can in an automated way

788
00:34:38,280 --> 00:34:40,560
tell if audio infrastructure and

789
00:34:40,560 --> 00:34:43,020
kubernetes applications are compliant

790
00:34:43,020 --> 00:34:44,879
with policy standards while

791
00:34:44,879 --> 00:34:47,099
simultaneously enforcing those standards

792
00:34:47,099 --> 00:34:49,619
from a single source of Truth

793
00:34:49,619 --> 00:34:52,020
thank you very much to the authors of

794
00:34:52,020 --> 00:34:54,719
this talk I hope I did them Justice and

795
00:34:54,719 --> 00:34:57,439
thank you for your attention

796
00:34:57,500 --> 00:35:02,099
[Applause]

797
00:35:02,099 --> 00:35:04,260
uh would anyone like to ask questions I

798
00:35:04,260 --> 00:35:08,180
may delegate them to somebody else

799
00:35:14,520 --> 00:35:16,920
uh

800
00:35:16,920 --> 00:35:18,960
do we know if anyone has implemented

801
00:35:18,960 --> 00:35:20,700
anything like this with anything other

802
00:35:20,700 --> 00:35:23,460
Oscar with anything other my first

803
00:35:23,460 --> 00:35:26,839
delegation Mr Heller

804
00:35:28,380 --> 00:35:31,400
I wouldn't say this

805
00:35:33,599 --> 00:35:36,420
it's like a real runtime environment

806
00:35:36,420 --> 00:35:38,880
um but definitely from the perspective

807
00:35:38,880 --> 00:35:40,680
of like establishing those control

808
00:35:40,680 --> 00:35:42,180
catalogs

809
00:35:42,180 --> 00:35:44,520
um those are available for a variety of

810
00:35:44,520 --> 00:35:47,520
different standards and then from there

811
00:35:47,520 --> 00:35:49,260
you know I think we've seen a couple

812
00:35:49,260 --> 00:35:50,460
different

813
00:35:50,460 --> 00:35:52,440
entities that are starting to dive in

814
00:35:52,440 --> 00:35:55,020
and kind of own PCI for instance has

815
00:35:55,020 --> 00:35:57,180
been explored

816
00:35:57,180 --> 00:35:57,720
um

817
00:35:57,720 --> 00:36:01,380
pretty pretty recently as well as other

818
00:36:01,380 --> 00:36:03,960
kind of oscow related tooling such as

819
00:36:03,960 --> 00:36:06,000
compliance Trestle kind of exploring

820
00:36:06,000 --> 00:36:07,980
these same spaces

821
00:36:07,980 --> 00:36:10,140
thank you very much

822
00:36:10,140 --> 00:36:14,299
is there another hand somewhere hello

823
00:36:39,060 --> 00:36:41,960
are also not

824
00:36:44,339 --> 00:36:46,020
some mathematics

825
00:36:46,020 --> 00:36:48,359
so if I want to say I

826
00:36:48,359 --> 00:36:52,520
can cover it in all of my companions

827
00:36:59,099 --> 00:37:02,599
can I see all of the

828
00:37:09,420 --> 00:37:11,660
foreign

829
00:37:16,380 --> 00:37:19,200
so is the question is it possible to see

830
00:37:19,200 --> 00:37:20,880
a macro view of all policy across the

831
00:37:20,880 --> 00:37:23,240
cluster

832
00:37:24,599 --> 00:37:27,000
like from this perspective I'd say no

833
00:37:27,000 --> 00:37:28,859
um maybe there are tools out there maybe

834
00:37:28,859 --> 00:37:29,640
there are different ways of

835
00:37:29,640 --> 00:37:31,500
accomplishing this that can do the job

836
00:37:31,500 --> 00:37:33,060
and maybe the answer is yes in those

837
00:37:33,060 --> 00:37:36,359
cases Lula from this perspective is very

838
00:37:36,359 --> 00:37:39,060
highly focused on like kind of a

839
00:37:39,060 --> 00:37:41,220
inheritance model of like this is my

840
00:37:41,220 --> 00:37:42,960
infrastructure or this is my application

841
00:37:42,960 --> 00:37:45,359
here are the controls that it satisfies

842
00:37:45,359 --> 00:37:48,660
or that you can inherit but then from

843
00:37:48,660 --> 00:37:50,780
that perspective right it's very

844
00:37:50,780 --> 00:37:52,920
focused in nature so that you might

845
00:37:52,920 --> 00:37:55,500
still utilize like a GRC tool governance

846
00:37:55,500 --> 00:37:57,960
risk compliance to provide you with that

847
00:37:57,960 --> 00:38:01,079
you know high level abstraction of Lula

848
00:38:01,079 --> 00:38:03,240
might be the the runtime component

849
00:38:03,240 --> 00:38:04,859
that's looking at very specific

850
00:38:04,859 --> 00:38:07,859
composable modules that's then you know

851
00:38:07,859 --> 00:38:10,800
producing compliance reports and then

852
00:38:10,800 --> 00:38:12,720
exporting those out to a GRC tool that

853
00:38:12,720 --> 00:38:15,780
is defining relationships defining like

854
00:38:15,780 --> 00:38:18,180
how to look at the high level picture of

855
00:38:18,180 --> 00:38:20,520
all of your environment or you know

856
00:38:20,520 --> 00:38:23,040
provide filtering into different aspects

857
00:38:23,040 --> 00:38:25,260
that might you know you might want to

858
00:38:25,260 --> 00:38:27,480
focus in on and try and find what's

859
00:38:27,480 --> 00:38:29,760
what's currently validated and compliant

860
00:38:29,760 --> 00:38:33,980
versus what is not so it's one tool in a

861
00:38:33,980 --> 00:38:36,960
you know possible ecosystem that you

862
00:38:36,960 --> 00:38:39,359
know could be developed around oscow and

863
00:38:39,359 --> 00:38:41,460
system security plans all the rest of

864
00:38:41,460 --> 00:38:45,140
the oscow models that are available

865
00:38:46,140 --> 00:38:48,060
thanks again uh we might have time for

866
00:38:48,060 --> 00:38:49,560
one more question if anybody would like

867
00:38:49,560 --> 00:38:53,759
to post something to Brent hello

868
00:39:08,640 --> 00:39:12,420
uh so the question perhaps is um when

869
00:39:12,420 --> 00:39:13,980
different standards have similar

870
00:39:13,980 --> 00:39:16,020
requirements for enforcement is there a

871
00:39:16,020 --> 00:39:19,099
way of deduplicating them

872
00:39:20,099 --> 00:39:22,560
I'd say largely the answer is no

873
00:39:22,560 --> 00:39:24,420
um right now it's going to be kind of

874
00:39:24,420 --> 00:39:26,460
based upon how are you crafting the

875
00:39:26,460 --> 00:39:29,160
inputs that you're providing to like a

876
00:39:29,160 --> 00:39:31,200
tool such as Lula

877
00:39:31,200 --> 00:39:34,320
um and they're trying to develop like if

878
00:39:34,320 --> 00:39:37,380
there is a you know duplication across

879
00:39:37,380 --> 00:39:39,839
those how are you performing that and

880
00:39:39,839 --> 00:39:41,040
another thing that we kind of want to

881
00:39:41,040 --> 00:39:42,839
look at here in the very short term is

882
00:39:42,839 --> 00:39:45,119
you know having this evolve from not

883
00:39:45,119 --> 00:39:47,700
only CLI driven but also like something

884
00:39:47,700 --> 00:39:50,160
that is maybe more event driven in your

885
00:39:50,160 --> 00:39:53,880
environment that can be able to perform

886
00:39:53,880 --> 00:39:56,160
this validation at a kind of a lower

887
00:39:56,160 --> 00:39:58,859
layer so that you know if only this one

888
00:39:58,859 --> 00:40:01,200
piece has changed then maybe we can go

889
00:40:01,200 --> 00:40:04,020
and find you know not only one identify

890
00:40:04,020 --> 00:40:06,900
where there are duplicates but then it

891
00:40:06,900 --> 00:40:10,079
with that be able to you know prevent

892
00:40:10,079 --> 00:40:12,119
the need to rerun validation against the

893
00:40:12,119 --> 00:40:14,099
whole environment over again and hey

894
00:40:14,099 --> 00:40:17,099
only this application in this namespace

895
00:40:17,099 --> 00:40:18,480
has changed here are the compliance

896
00:40:18,480 --> 00:40:20,579
information for it and let's go and

897
00:40:20,579 --> 00:40:23,240
validate that

898
00:40:23,280 --> 00:40:26,040
right huge thanks to my co-presenter Mr

899
00:40:26,040 --> 00:40:28,500
Frank Heller thank you to everyone else

900
00:40:28,500 --> 00:40:31,460
have a wonderful day

