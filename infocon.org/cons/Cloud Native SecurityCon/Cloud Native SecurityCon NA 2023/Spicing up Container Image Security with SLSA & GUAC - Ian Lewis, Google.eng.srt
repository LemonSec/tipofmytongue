1
00:00:00,000 --> 00:00:02,220
okay I think we'll get started

2
00:00:02,220 --> 00:00:04,560
uh so this talk is on splicing up

3
00:00:04,560 --> 00:00:05,819
containers from image security with

4
00:00:05,819 --> 00:00:08,779
salsa and guac

5
00:00:08,940 --> 00:00:11,040
my name is Ian Lewis I'm a developer

6
00:00:11,040 --> 00:00:13,620
Advocate at Google Cloud I focus mostly

7
00:00:13,620 --> 00:00:16,400
on container and supply chain security

8
00:00:16,400 --> 00:00:20,220
and I am currently on loan to the Google

9
00:00:20,220 --> 00:00:23,220
open source security team or the ghost

10
00:00:23,220 --> 00:00:24,900
team as it's colloquially only known

11
00:00:24,900 --> 00:00:28,380
working on salted tooling

12
00:00:28,380 --> 00:00:30,119
um so I said that this talk is about

13
00:00:30,119 --> 00:00:32,460
spicing up container image security but

14
00:00:32,460 --> 00:00:34,280
I'll be pretty mild

15
00:00:34,280 --> 00:00:38,100
no hot takes or anything like that

16
00:00:38,100 --> 00:00:40,160
um

17
00:00:41,340 --> 00:00:44,399
uh I want to start by I guess uh kind of

18
00:00:44,399 --> 00:00:46,140
level setting a little bit

19
00:00:46,140 --> 00:00:48,000
um and give a little bit of context for

20
00:00:48,000 --> 00:00:49,559
like why some of the things I'm going to

21
00:00:49,559 --> 00:00:51,120
be talking about are important like why

22
00:00:51,120 --> 00:00:52,200
we're doing these things in the first

23
00:00:52,200 --> 00:00:54,000
place so hopefully this kind of like

24
00:00:54,000 --> 00:00:56,160
gives you an idea of like why some of

25
00:00:56,160 --> 00:00:57,960
these things or how some of these things

26
00:00:57,960 --> 00:00:59,820
are actually solving problems in the

27
00:00:59,820 --> 00:01:01,260
real world

28
00:01:01,260 --> 00:01:02,100
um

29
00:01:02,100 --> 00:01:04,799
and uh because it's really easy to get

30
00:01:04,799 --> 00:01:08,880
lost in the details but essentially you

31
00:01:08,880 --> 00:01:10,500
know software supply chain security has

32
00:01:10,500 --> 00:01:12,659
been a Hot Topic I guess in security

33
00:01:12,659 --> 00:01:16,320
space for the last couple years and this

34
00:01:16,320 --> 00:01:18,900
is basically because attackers have

35
00:01:18,900 --> 00:01:21,180
shifted their focus towards the software

36
00:01:21,180 --> 00:01:23,640
supply chain and part of the root causes

37
00:01:23,640 --> 00:01:25,619
of some of these are that that

38
00:01:25,619 --> 00:01:27,180
development in CI systems are

39
00:01:27,180 --> 00:01:28,439
essentially

40
00:01:28,439 --> 00:01:31,560
um not treated like production or are

41
00:01:31,560 --> 00:01:34,740
not uh you know given the same level of

42
00:01:34,740 --> 00:01:38,040
love in terms of like security hardening

43
00:01:38,040 --> 00:01:40,920
as production systems are and so there's

44
00:01:40,920 --> 00:01:43,079
been a culture of essentially like you

45
00:01:43,079 --> 00:01:44,640
know developing civilized systems are

46
00:01:44,640 --> 00:01:46,740
essentially YOLO and like you know

47
00:01:46,740 --> 00:01:48,540
production is where we actually Harden

48
00:01:48,540 --> 00:01:49,619
things

49
00:01:49,619 --> 00:01:51,180
um and that's not actually the case

50
00:01:51,180 --> 00:01:53,640
because there's uh channels to get

51
00:01:53,640 --> 00:01:55,740
software or malicious software into

52
00:01:55,740 --> 00:01:57,600
production through these CI and

53
00:01:57,600 --> 00:02:00,119
development systems

54
00:02:00,119 --> 00:02:00,780
um

55
00:02:00,780 --> 00:02:02,220
another

56
00:02:02,220 --> 00:02:06,119
aspect of this why it's a a good Target

57
00:02:06,119 --> 00:02:07,680
for attackers is that there's lots of

58
00:02:07,680 --> 00:02:09,060
places that attackers can insert

59
00:02:09,060 --> 00:02:10,500
themselves

60
00:02:10,500 --> 00:02:12,060
um apologies for this slide is a little

61
00:02:12,060 --> 00:02:14,000
bit harder to read but like essentially

62
00:02:14,000 --> 00:02:17,099
attackers can uh slot themselves in

63
00:02:17,099 --> 00:02:19,200
essentially anywhere in the development

64
00:02:19,200 --> 00:02:23,160
life cycle so from source to uh you know

65
00:02:23,160 --> 00:02:25,800
source code the developers development

66
00:02:25,800 --> 00:02:27,900
environment through the build systems

67
00:02:27,900 --> 00:02:30,120
through to the package managers and

68
00:02:30,120 --> 00:02:31,500
Distribution Systems you use for

69
00:02:31,500 --> 00:02:33,720
deployment as well as all the deploy the

70
00:02:33,720 --> 00:02:35,700
dependencies that go into the software

71
00:02:35,700 --> 00:02:37,200
that you're building

72
00:02:37,200 --> 00:02:38,760
today we'll be like pretty much

73
00:02:38,760 --> 00:02:41,340
primarily focusing on the build aspect

74
00:02:41,340 --> 00:02:43,560
of this so like your CI systems and the

75
00:02:43,560 --> 00:02:45,000
build systems

76
00:02:45,000 --> 00:02:46,680
um and having traceability from there

77
00:02:46,680 --> 00:02:48,959
into your production systems

78
00:02:48,959 --> 00:02:50,700
um but it's good to know that there's a

79
00:02:50,700 --> 00:02:52,860
little bit of context here for like why

80
00:02:52,860 --> 00:02:55,440
we're uh talking about these things and

81
00:02:55,440 --> 00:02:57,959
another like kind of overarching theme

82
00:02:57,959 --> 00:03:00,599
is that there's a lack of information

83
00:03:00,599 --> 00:03:03,180
about the the uh software that we

84
00:03:03,180 --> 00:03:06,599
consume so as we develop these things we

85
00:03:06,599 --> 00:03:08,700
and we consume software we download it

86
00:03:08,700 --> 00:03:10,379
we run it there's a lack of

87
00:03:10,379 --> 00:03:12,000
understanding about like where that

88
00:03:12,000 --> 00:03:14,580
software came from uh how it was built

89
00:03:14,580 --> 00:03:18,540
who built it and being able to verify

90
00:03:18,540 --> 00:03:20,459
that and make sure that it was actually

91
00:03:20,459 --> 00:03:22,019
built by the people we think it was

92
00:03:22,019 --> 00:03:24,500
built by

93
00:03:24,959 --> 00:03:27,840
so this comes out in a lot of ways right

94
00:03:27,840 --> 00:03:30,480
so you have something like you know how

95
00:03:30,480 --> 00:03:31,680
do you know essentially where your

96
00:03:31,680 --> 00:03:34,260
software came from right like we have

97
00:03:34,260 --> 00:03:36,420
we can download artifacts but and we can

98
00:03:36,420 --> 00:03:38,760
download them from exam for example from

99
00:03:38,760 --> 00:03:40,980
a GitHub repo

100
00:03:40,980 --> 00:03:42,959
um or something like that

101
00:03:42,959 --> 00:03:44,340
um but how do you know that that

102
00:03:44,340 --> 00:03:45,780
artifact was actually built from the

103
00:03:45,780 --> 00:03:47,940
source code in that repo there's no real

104
00:03:47,940 --> 00:03:51,360
guarantees for that and similarly like

105
00:03:51,360 --> 00:03:54,000
this is even worse in the cases of where

106
00:03:54,000 --> 00:03:55,739
the software is being distributed on a

107
00:03:55,739 --> 00:03:57,180
totally different platform for example

108
00:03:57,180 --> 00:03:59,760
Docker Hub or

109
00:03:59,760 --> 00:04:02,760
um you know on GCR or on like other

110
00:04:02,760 --> 00:04:04,920
container registries

111
00:04:04,920 --> 00:04:06,780
so for example right like you'd say like

112
00:04:06,780 --> 00:04:08,819
is Ian Lewis on Doctor Hub the same Ian

113
00:04:08,819 --> 00:04:13,379
Lewis as uh the Ian Lewis on GitHub

114
00:04:13,379 --> 00:04:15,659
there's no real linkage there uh that

115
00:04:15,659 --> 00:04:18,000
you can be sure is is something you can

116
00:04:18,000 --> 00:04:19,260
verify

117
00:04:19,260 --> 00:04:20,519
um we won't actually solve that

118
00:04:20,519 --> 00:04:23,699
particular problem uh but the

119
00:04:23,699 --> 00:04:26,400
the that's kind of one of the root root

120
00:04:26,400 --> 00:04:28,320
problems for this but like

121
00:04:28,320 --> 00:04:31,080
also like is the actual image say like

122
00:04:31,080 --> 00:04:32,940
Ian Lewis Foo

123
00:04:32,940 --> 00:04:35,820
that's on Docker Hub the same or built

124
00:04:35,820 --> 00:04:38,160
from the source code that's in the Ian

125
00:04:38,160 --> 00:04:41,100
Lewis Foo repository on on GitHub for

126
00:04:41,100 --> 00:04:43,199
example and how do you know that how can

127
00:04:43,199 --> 00:04:46,139
you verify that that's actually the case

128
00:04:46,139 --> 00:04:48,479
so essentially like how do you know like

129
00:04:48,479 --> 00:04:50,759
how the sausage is made how like what

130
00:04:50,759 --> 00:04:52,860
goes into the food that you're eating uh

131
00:04:52,860 --> 00:04:54,479
how do you like kind of maintain some of

132
00:04:54,479 --> 00:04:55,860
that hygiene

133
00:04:55,860 --> 00:04:58,740
um that's a pretty difficult thing right

134
00:04:58,740 --> 00:05:00,780
so for example let's say like that we

135
00:05:00,780 --> 00:05:03,780
have a software repository right like we

136
00:05:03,780 --> 00:05:06,600
have a uh a GitHub repository we have

137
00:05:06,600 --> 00:05:08,759
the salsa and guac demo right a

138
00:05:08,759 --> 00:05:10,080
repository here

139
00:05:10,080 --> 00:05:12,780
and we want to be able to run this as a

140
00:05:12,780 --> 00:05:15,419
container right and but we're we're

141
00:05:15,419 --> 00:05:16,919
going to first take a look at the source

142
00:05:16,919 --> 00:05:18,540
code we've kind of found this thing out

143
00:05:18,540 --> 00:05:20,639
there that looks like we're it does what

144
00:05:20,639 --> 00:05:22,440
we want it to do right we'll look at the

145
00:05:22,440 --> 00:05:24,060
source code here we'll say like okay

146
00:05:24,060 --> 00:05:25,979
this is going to like pronounce some

147
00:05:25,979 --> 00:05:27,960
version information right it'll print

148
00:05:27,960 --> 00:05:31,560
out the git uh version and uh what tag

149
00:05:31,560 --> 00:05:32,940
it was built from and things like that

150
00:05:32,940 --> 00:05:36,840
that's cool that's what I want right and

151
00:05:36,840 --> 00:05:39,419
um we can even kind of look on Docker

152
00:05:39,419 --> 00:05:41,880
Hub and see that we found a an image

153
00:05:41,880 --> 00:05:44,220
there that's built by a guy named Ian

154
00:05:44,220 --> 00:05:46,979
Lewis and it looks like it's the same

155
00:05:46,979 --> 00:05:48,360
name

156
00:05:48,360 --> 00:05:50,340
it's got like a link to the to the

157
00:05:50,340 --> 00:05:52,979
GitHub repository and the readme

158
00:05:52,979 --> 00:05:53,580
um

159
00:05:53,580 --> 00:05:55,860
you know we can look at the tags the

160
00:05:55,860 --> 00:05:57,419
tags like seem to match up we've got

161
00:05:57,419 --> 00:05:59,460
like you know the same sorts of tags as

162
00:05:59,460 --> 00:06:02,400
we have on the releases over here

163
00:06:02,400 --> 00:06:03,240
um

164
00:06:03,240 --> 00:06:05,039
we can actually click on this tag and

165
00:06:05,039 --> 00:06:06,720
see like some of the image layers right

166
00:06:06,720 --> 00:06:09,600
if we look at our Docker file you can

167
00:06:09,600 --> 00:06:12,960
see like okay this is a a

168
00:06:12,960 --> 00:06:14,699
um

169
00:06:14,699 --> 00:06:17,039
a two-step build so we can only see the

170
00:06:17,039 --> 00:06:18,600
the second half of this but we can see

171
00:06:18,600 --> 00:06:20,699
that these steps here you know line up

172
00:06:20,699 --> 00:06:22,979
with the steps that are uh that are

173
00:06:22,979 --> 00:06:24,840
present in the docker image

174
00:06:24,840 --> 00:06:27,000
okay this like pretty much looks good

175
00:06:27,000 --> 00:06:29,280
right like this is something that like

176
00:06:29,280 --> 00:06:31,259
looks like it's linked to this

177
00:06:31,259 --> 00:06:33,060
repository you know it was built from

178
00:06:33,060 --> 00:06:34,620
this repository

179
00:06:34,620 --> 00:06:36,900
um and all that but if we actually like

180
00:06:36,900 --> 00:06:38,759
go and try to run this and this is like

181
00:06:38,759 --> 00:06:42,360
just a Docker run command to to run it

182
00:06:42,360 --> 00:06:44,819
you know this is essentially like

183
00:06:44,819 --> 00:06:46,680
building and running code that's like

184
00:06:46,680 --> 00:06:48,120
completely different from the code we

185
00:06:48,120 --> 00:06:49,680
just looked at

186
00:06:49,680 --> 00:06:51,419
um and

187
00:06:51,419 --> 00:06:54,000
this is because like we have no linkage

188
00:06:54,000 --> 00:06:56,039
between the source code repository and

189
00:06:56,039 --> 00:06:57,840
the actual image that was being that

190
00:06:57,840 --> 00:06:59,819
we're downloading and running

191
00:06:59,819 --> 00:07:02,639
um so for example that like the Ian

192
00:07:02,639 --> 00:07:04,080
Lewis on Docker Hub could be a

193
00:07:04,080 --> 00:07:05,699
completely different person like if we

194
00:07:05,699 --> 00:07:08,880
don't verify that also like the the

195
00:07:08,880 --> 00:07:11,460
names don't need to necessarily match up

196
00:07:11,460 --> 00:07:13,139
like somebody could just make up their

197
00:07:13,139 --> 00:07:16,860
own uh account on Docker Hub

198
00:07:16,860 --> 00:07:19,500
um or for example like the account

199
00:07:19,500 --> 00:07:22,319
credentials could be have been leaked or

200
00:07:22,319 --> 00:07:25,860
gotten out on Docker hub for example so

201
00:07:25,860 --> 00:07:27,720
um you could have like a personal access

202
00:07:27,720 --> 00:07:30,419
token that was Excel traded or it was

203
00:07:30,419 --> 00:07:32,880
compromised and that allowed an attacker

204
00:07:32,880 --> 00:07:35,280
to upload an image

205
00:07:35,280 --> 00:07:38,280
so this is kind of an issue that is

206
00:07:38,280 --> 00:07:40,740
fairly pervasive like you're not able to

207
00:07:40,740 --> 00:07:44,599
trace back to the source code

208
00:07:44,639 --> 00:07:46,380
so how do we kind of like solve this

209
00:07:46,380 --> 00:07:49,620
problem so one of the ways that we solve

210
00:07:49,620 --> 00:07:51,419
this problem is by doing something

211
00:07:51,419 --> 00:07:54,060
called the software attestation right so

212
00:07:54,060 --> 00:07:55,800
what we're going to do in plain English

213
00:07:55,800 --> 00:07:57,599
when we say something like is an

214
00:07:57,599 --> 00:07:59,460
attestation or we attest to something

215
00:07:59,460 --> 00:08:01,380
we're basically asserting that this is

216
00:08:01,380 --> 00:08:03,780
true right like if I say something like

217
00:08:03,780 --> 00:08:05,940
my name is Ian Lewis like I miss I'm

218
00:08:05,940 --> 00:08:07,500
attesting to the fact that my name is

219
00:08:07,500 --> 00:08:10,560
Ian Lewis and then ideally I would have

220
00:08:10,560 --> 00:08:12,720
something that verifies or that like

221
00:08:12,720 --> 00:08:14,580
that somebody else could use to verify

222
00:08:14,580 --> 00:08:17,280
like that I am actually Ian Lewis or

223
00:08:17,280 --> 00:08:18,660
that might the statement that I said is

224
00:08:18,660 --> 00:08:20,699
correct right like my passport or like

225
00:08:20,699 --> 00:08:22,979
some statement that I've actually signed

226
00:08:22,979 --> 00:08:25,259
with my own signature

227
00:08:25,259 --> 00:08:27,840
right so in the case of software what

228
00:08:27,840 --> 00:08:28,740
we're going to do is we're going to

229
00:08:28,740 --> 00:08:30,479
actually use some metadata which we'll

230
00:08:30,479 --> 00:08:31,880
call provenance

231
00:08:31,880 --> 00:08:34,740
that comes from that describes

232
00:08:34,740 --> 00:08:36,659
information about how the software was

233
00:08:36,659 --> 00:08:39,120
built and where it was built and we're

234
00:08:39,120 --> 00:08:40,979
going to combine that with cryptographic

235
00:08:40,979 --> 00:08:43,679
signing and identity in order to create

236
00:08:43,679 --> 00:08:46,020
a software access station so essentially

237
00:08:46,020 --> 00:08:48,060
the identity is going to be either a

238
00:08:48,060 --> 00:08:51,839
person or some kind of workload for

239
00:08:51,839 --> 00:08:53,940
example a machine identity what people

240
00:08:53,940 --> 00:08:55,980
call a machine identity but essentially

241
00:08:55,980 --> 00:08:59,220
this is an abstract identity

242
00:08:59,220 --> 00:09:02,459
and then you combine that the identity

243
00:09:02,459 --> 00:09:04,500
then signs this this metadata to say

244
00:09:04,500 --> 00:09:07,200
that it's asserting that it's true

245
00:09:07,200 --> 00:09:09,540
and then that attestation can then be

246
00:09:09,540 --> 00:09:11,399
verified by the consumer when they're

247
00:09:11,399 --> 00:09:14,220
actually consuming the the software

248
00:09:14,220 --> 00:09:16,560
so one of the the big things is that

249
00:09:16,560 --> 00:09:18,240
people say like kind of throw these

250
00:09:18,240 --> 00:09:20,700
terms around a lot but like I like to

251
00:09:20,700 --> 00:09:22,320
think of attestation as being something

252
00:09:22,320 --> 00:09:24,600
that you can actually verify in a strong

253
00:09:24,600 --> 00:09:26,580
way so like it needs to be signed by

254
00:09:26,580 --> 00:09:27,779
somebody

255
00:09:27,779 --> 00:09:29,700
um and it needs to make sense right if

256
00:09:29,700 --> 00:09:31,200
you don't have an identity that says

257
00:09:31,200 --> 00:09:33,060
like hey this is the thing that signed

258
00:09:33,060 --> 00:09:34,800
it like who do you who's attesting to

259
00:09:34,800 --> 00:09:37,200
what like that becomes like kind of an

260
00:09:37,200 --> 00:09:39,360
issue if you're just providing metadata

261
00:09:39,360 --> 00:09:41,640
for example and you're not signing it or

262
00:09:41,640 --> 00:09:43,019
you're just signing stuff but you have

263
00:09:43,019 --> 00:09:45,180
no kind of like understanding of what

264
00:09:45,180 --> 00:09:48,979
the identity was or where that came from

265
00:09:49,380 --> 00:09:53,760
right so as kind of a building on that

266
00:09:53,760 --> 00:09:56,519
topic right we have the idea of

267
00:09:56,519 --> 00:09:59,279
kind of software attestations

268
00:09:59,279 --> 00:10:00,420
um but

269
00:10:00,420 --> 00:10:02,940
who's kind of like in the context of

270
00:10:02,940 --> 00:10:05,160
building software and deploying software

271
00:10:05,160 --> 00:10:07,080
who's actually

272
00:10:07,080 --> 00:10:09,000
um kind of attesting to what and like

273
00:10:09,000 --> 00:10:10,380
what are you actually going to be

274
00:10:10,380 --> 00:10:12,120
attesting to

275
00:10:12,120 --> 00:10:14,640
um so basically

276
00:10:14,640 --> 00:10:16,620
what happens is when you're going to do

277
00:10:16,620 --> 00:10:19,279
a build uh the build system will

278
00:10:19,279 --> 00:10:22,019
essentially attest to the fact that that

279
00:10:22,019 --> 00:10:25,380
build was run that it built that uh

280
00:10:25,380 --> 00:10:27,420
um or ran that build right so the build

281
00:10:27,420 --> 00:10:28,800
system is essentially some sort of

282
00:10:28,800 --> 00:10:30,300
machine Identity or has some sort of

283
00:10:30,300 --> 00:10:33,300
machine identity and then that is used

284
00:10:33,300 --> 00:10:34,680
to

285
00:10:34,680 --> 00:10:37,500
essentially make the attestation which

286
00:10:37,500 --> 00:10:40,740
says that I ran this build I used this

287
00:10:40,740 --> 00:10:44,820
source code I got this artifact out and

288
00:10:44,820 --> 00:10:46,380
so when you consume the artifact you can

289
00:10:46,380 --> 00:10:47,760
verify that okay this is the same

290
00:10:47,760 --> 00:10:50,100
artifact that was built by this and is

291
00:10:50,100 --> 00:10:52,740
described by this out of the station so

292
00:10:52,740 --> 00:10:55,260
you can verify that that artifact was

293
00:10:55,260 --> 00:10:57,600
actually built by that build system at a

294
00:10:57,600 --> 00:10:59,399
particular time using particular source

295
00:10:59,399 --> 00:11:01,079
code

296
00:11:01,079 --> 00:11:03,740
and we make sure that we are

297
00:11:03,740 --> 00:11:05,519
cryptographically signing this so that

298
00:11:05,519 --> 00:11:07,260
we can sign so that we can verify this

299
00:11:07,260 --> 00:11:10,320
in a very strong way that we actually

300
00:11:10,320 --> 00:11:13,920
know we don't have to like do signature

301
00:11:13,920 --> 00:11:16,140
like human level signature comparisons

302
00:11:16,140 --> 00:11:18,420
or anything like that it's not a it's a

303
00:11:18,420 --> 00:11:20,279
very objective rather than subjective

304
00:11:20,279 --> 00:11:22,820
process

305
00:11:23,040 --> 00:11:25,140
um another like issue here is that we

306
00:11:25,140 --> 00:11:27,120
need to make sure that the build System

307
00:11:27,120 --> 00:11:28,620
since the build system itself is

308
00:11:28,620 --> 00:11:30,779
attesting to running the build that the

309
00:11:30,779 --> 00:11:32,579
build itself isn't actually doing the

310
00:11:32,579 --> 00:11:34,980
attestation right so it in the sense

311
00:11:34,980 --> 00:11:36,360
that

312
00:11:36,360 --> 00:11:37,860
um we need to have the build system

313
00:11:37,860 --> 00:11:39,360
needs to have some level of separation

314
00:11:39,360 --> 00:11:42,480
or isolation from the build itself

315
00:11:42,480 --> 00:11:44,579
um because effectively you get like a

316
00:11:44,579 --> 00:11:46,380
softer equivalent of a conflict of

317
00:11:46,380 --> 00:11:48,300
interest if the build itself is

318
00:11:48,300 --> 00:11:50,519
attesting to the fact that it was run

319
00:11:50,519 --> 00:11:52,800
right like it could essentially make up

320
00:11:52,800 --> 00:11:56,300
whatever it wants to at that point

321
00:11:56,519 --> 00:11:59,820
right so so the build system it needs to

322
00:11:59,820 --> 00:12:01,500
be trustworthy right we need to make

323
00:12:01,500 --> 00:12:02,880
sure that we trust the build system

324
00:12:02,880 --> 00:12:04,079
itself

325
00:12:04,079 --> 00:12:06,779
um and so if the build itself like could

326
00:12:06,779 --> 00:12:08,880
be running any kind of software uh we

327
00:12:08,880 --> 00:12:10,620
need to make sure that the the build

328
00:12:10,620 --> 00:12:12,300
system that we trust is actually the

329
00:12:12,300 --> 00:12:15,500
thing that's making that a station

330
00:12:17,339 --> 00:12:18,839
and then we're going to combine these

331
00:12:18,839 --> 00:12:21,839
the different ideas right together along

332
00:12:21,839 --> 00:12:25,380
with Sig store uh and you've heard a lot

333
00:12:25,380 --> 00:12:26,700
about six store I'm sure during the

334
00:12:26,700 --> 00:12:28,260
conference I'm not going to go too

335
00:12:28,260 --> 00:12:30,899
detailed into it but effectively a

336
00:12:30,899 --> 00:12:34,860
six-store is a a set of tools that allow

337
00:12:34,860 --> 00:12:36,540
you that we're going to use for Keeley

338
00:12:36,540 --> 00:12:38,519
signing so

339
00:12:38,519 --> 00:12:40,800
um what we do basically here is instead

340
00:12:40,800 --> 00:12:43,620
of having using a key that we've like

341
00:12:43,620 --> 00:12:45,360
that we have to manage and that is

342
00:12:45,360 --> 00:12:48,300
long-lived and that we have to store

343
00:12:48,300 --> 00:12:51,180
somewhere and maintain access to we're

344
00:12:51,180 --> 00:12:53,100
going to use a quote-unquote keyless

345
00:12:53,100 --> 00:12:54,240
signing

346
00:12:54,240 --> 00:12:54,899
um

347
00:12:54,899 --> 00:12:58,139
and what that allows us to do is take

348
00:12:58,139 --> 00:13:00,060
essentially an identity the identity

349
00:13:00,060 --> 00:13:02,160
from the uh the machine identity from

350
00:13:02,160 --> 00:13:04,860
the build system and use that identity

351
00:13:04,860 --> 00:13:09,839
to Mint a new cert or to use the uh

352
00:13:09,839 --> 00:13:11,760
use a certificate Authority in this case

353
00:13:11,760 --> 00:13:14,760
folkio which is the Sig store service

354
00:13:14,760 --> 00:13:17,100
to create a new certificate that is

355
00:13:17,100 --> 00:13:18,980
short-lived and is only going to be used

356
00:13:18,980 --> 00:13:22,260
by the the build system one time in

357
00:13:22,260 --> 00:13:25,200
order to start to sign our provenance

358
00:13:25,200 --> 00:13:27,899
uh so that basically allows us to take

359
00:13:27,899 --> 00:13:29,760
the key sign the provenance and then

360
00:13:29,760 --> 00:13:31,440
throw away the private key we don't need

361
00:13:31,440 --> 00:13:32,579
it anymore because we're only going to

362
00:13:32,579 --> 00:13:34,920
use it one time and then the public key

363
00:13:34,920 --> 00:13:36,720
what we can do is upload that to another

364
00:13:36,720 --> 00:13:38,820
service six door service called wrecker

365
00:13:38,820 --> 00:13:43,980
uh with uh that we can then allow like

366
00:13:43,980 --> 00:13:47,540
create a log of when the key was created

367
00:13:47,540 --> 00:13:51,660
and then allow that allow us to also

368
00:13:51,660 --> 00:13:53,339
retrieve that certificate later when we

369
00:13:53,339 --> 00:13:56,060
need to verify

370
00:13:56,100 --> 00:13:58,380
so effectively we don't have to really

371
00:13:58,380 --> 00:13:59,940
keep the key around the private key

372
00:13:59,940 --> 00:14:03,180
around we can keep the public key we can

373
00:14:03,180 --> 00:14:04,860
put that in a log service that we can

374
00:14:04,860 --> 00:14:07,019
then use to pull down and verify it and

375
00:14:07,019 --> 00:14:08,459
so we don't actually need to store the

376
00:14:08,459 --> 00:14:11,760
keys anywhere in our actual build system

377
00:14:11,760 --> 00:14:14,519
we can essentially be keyless

378
00:14:14,519 --> 00:14:16,800
uh in that sense

379
00:14:16,800 --> 00:14:18,600
um so there's a lot uh there's a lot

380
00:14:18,600 --> 00:14:20,940
been a lot of talks but like one uh talk

381
00:14:20,940 --> 00:14:22,620
by uh

382
00:14:22,620 --> 00:14:24,540
um colleague on the ghost team uh Hayden

383
00:14:24,540 --> 00:14:27,300
was really good and so if you are really

384
00:14:27,300 --> 00:14:29,040
interested in a much more of a deep dive

385
00:14:29,040 --> 00:14:30,720
into the six-story ecosystem and the

386
00:14:30,720 --> 00:14:33,240
services I recommend you look at his uh

387
00:14:33,240 --> 00:14:36,560
the recording for his talk

388
00:14:40,199 --> 00:14:43,320
so okay so one now that we've kind of

389
00:14:43,320 --> 00:14:45,720
got some of the concepts out of the way

390
00:14:45,720 --> 00:14:47,160
um let's talk a little bit more about

391
00:14:47,160 --> 00:14:49,139
the concrete like way that we're going

392
00:14:49,139 --> 00:14:51,240
to implement some of the uh

393
00:14:51,240 --> 00:14:53,820
some of these ideas

394
00:14:53,820 --> 00:14:56,040
and so what we're going to do is like

395
00:14:56,040 --> 00:14:58,079
apply some of these ideas or one

396
00:14:58,079 --> 00:15:01,740
application of these ideas is in the uh

397
00:15:01,740 --> 00:15:03,839
supply chain levels of software RTX so

398
00:15:03,839 --> 00:15:07,199
this is the salsa framework and The

399
00:15:07,199 --> 00:15:08,880
Souls of framework is essentially a

400
00:15:08,880 --> 00:15:13,139
framework that is used to uh Define a

401
00:15:13,139 --> 00:15:16,079
set of requirements or levels that

402
00:15:16,079 --> 00:15:18,300
Define like an increasing set of

403
00:15:18,300 --> 00:15:20,940
security requirements so right now it

404
00:15:20,940 --> 00:15:23,160
has a like levels defined one through

405
00:15:23,160 --> 00:15:26,100
four which are progressively more secure

406
00:15:26,100 --> 00:15:29,639
more hardened levels of security for a

407
00:15:29,639 --> 00:15:31,680
build system

408
00:15:31,680 --> 00:15:33,180
um and these are make it so that it's

409
00:15:33,180 --> 00:15:35,160
like increment incrementally adoptable

410
00:15:35,160 --> 00:15:36,300
so

411
00:15:36,300 --> 00:15:37,980
um each level has a set of requirements

412
00:15:37,980 --> 00:15:40,019
and those get more stringent as you go

413
00:15:40,019 --> 00:15:43,440
up the the uh the levels

414
00:15:43,440 --> 00:15:45,000
this also said some things like common

415
00:15:45,000 --> 00:15:46,440
terminology so when we talk about

416
00:15:46,440 --> 00:15:47,880
provenance we kind of know what we're

417
00:15:47,880 --> 00:15:50,040
talking about uh when we talk about like

418
00:15:50,040 --> 00:15:51,720
signing and keyless we kind of know what

419
00:15:51,720 --> 00:15:53,399
we're talking about like I guess keyless

420
00:15:53,399 --> 00:15:54,959
isn't really necessarily defined by

421
00:15:54,959 --> 00:15:56,339
salsa but

422
00:15:56,339 --> 00:15:58,260
um it defines a bunch of common uh

423
00:15:58,260 --> 00:16:01,139
terminology that can be used for uh for

424
00:16:01,139 --> 00:16:02,519
build systems and for supply chain

425
00:16:02,519 --> 00:16:04,880
security

426
00:16:04,980 --> 00:16:06,540
um it also as part of the framework

427
00:16:06,540 --> 00:16:10,079
defines a provenance format uh which is

428
00:16:10,079 --> 00:16:12,000
essentially just a Json format that you

429
00:16:12,000 --> 00:16:14,579
can use to define metadata that

430
00:16:14,579 --> 00:16:17,880
describes the build uh and what how the

431
00:16:17,880 --> 00:16:20,660
build occurred

432
00:16:22,320 --> 00:16:23,760
Okay so

433
00:16:23,760 --> 00:16:25,320
those are a lot of kind of like abstract

434
00:16:25,320 --> 00:16:27,600
Concepts and Frameworks now let's like

435
00:16:27,600 --> 00:16:29,040
kind of get down into like actual

436
00:16:29,040 --> 00:16:31,560
implementation of some of these ideas

437
00:16:31,560 --> 00:16:33,839
um and so what we've done is we've

438
00:16:33,839 --> 00:16:36,420
started a project called the salsa

439
00:16:36,420 --> 00:16:39,420
GitHub generator project and what this

440
00:16:39,420 --> 00:16:41,220
is doing is utilizing some of these

441
00:16:41,220 --> 00:16:43,920
Concepts like keyless signing uh Salsa

442
00:16:43,920 --> 00:16:46,160
Frank like salsa provenance

443
00:16:46,160 --> 00:16:48,839
and some of the features of GitHub

444
00:16:48,839 --> 00:16:50,639
actions in order to achieve isolation

445
00:16:50,639 --> 00:16:53,699
for our build between the build system

446
00:16:53,699 --> 00:16:56,940
and the build itself

447
00:16:56,940 --> 00:17:00,000
and so we have a number of different uh

448
00:17:00,000 --> 00:17:03,120
workflows that we've implemented and

449
00:17:03,120 --> 00:17:05,099
this is using GitHub actions reusable

450
00:17:05,099 --> 00:17:06,419
workflows

451
00:17:06,419 --> 00:17:08,400
and the reason why we did that is

452
00:17:08,400 --> 00:17:10,679
because this gives us a level of

453
00:17:10,679 --> 00:17:12,900
isolation from the actual build part of

454
00:17:12,900 --> 00:17:14,520
the system so when you build something

455
00:17:14,520 --> 00:17:17,520
you can separate the build uh process

456
00:17:17,520 --> 00:17:20,040
and the generation and signing of

457
00:17:20,040 --> 00:17:22,260
provenance into separate build jobs that

458
00:17:22,260 --> 00:17:25,619
are effectively isolated from each other

459
00:17:25,619 --> 00:17:29,540
right to run in different VMS

460
00:17:29,700 --> 00:17:31,799
um and so what we have as part of this

461
00:17:31,799 --> 00:17:33,480
we have a number of reasonable workflows

462
00:17:33,480 --> 00:17:35,400
one is the language agnostic kind of

463
00:17:35,400 --> 00:17:37,620
generic generator we call the generic

464
00:17:37,620 --> 00:17:40,860
generator this is like a a workflow that

465
00:17:40,860 --> 00:17:42,780
you can use to generate provenance uh

466
00:17:42,780 --> 00:17:45,600
mostly for file based artifacts so

467
00:17:45,600 --> 00:17:48,059
things like binaries things like s-bombs

468
00:17:48,059 --> 00:17:51,000
maybe that type of thing we have another

469
00:17:51,000 --> 00:17:52,980
workflow called the container generator

470
00:17:52,980 --> 00:17:55,799
which we've just uh essentially G8 and

471
00:17:55,799 --> 00:17:57,960
so we are basically saying that this is

472
00:17:57,960 --> 00:17:59,580
stable

473
00:17:59,580 --> 00:18:00,419
um

474
00:18:00,419 --> 00:18:04,740
and this is also uh used for container

475
00:18:04,740 --> 00:18:07,020
artifacts and this is

476
00:18:07,020 --> 00:18:10,260
partly to make it so that it's easier to

477
00:18:10,260 --> 00:18:11,700
integrate with all of the other Sig

478
00:18:11,700 --> 00:18:14,940
store tooling around containers

479
00:18:14,940 --> 00:18:16,440
um as well as like have support for

480
00:18:16,440 --> 00:18:18,900
things like uploading the r the uh

481
00:18:18,900 --> 00:18:20,940
attestations to The Container registry

482
00:18:20,940 --> 00:18:22,620
alongside of the containers themselves

483
00:18:22,620 --> 00:18:25,980
so it's easily you can easily get the uh

484
00:18:25,980 --> 00:18:27,780
the provenance

485
00:18:27,780 --> 00:18:29,580
we also have a go builder for go

486
00:18:29,580 --> 00:18:32,640
projects which allows you to build and

487
00:18:32,640 --> 00:18:36,559
generate prominence kind of in one step

488
00:18:37,200 --> 00:18:39,240
we also have a project called the salsa

489
00:18:39,240 --> 00:18:42,059
verifier project which is used to verify

490
00:18:42,059 --> 00:18:44,400
the provenance that's generated by these

491
00:18:44,400 --> 00:18:49,020
Builders so this uh verifier project is

492
00:18:49,020 --> 00:18:51,179
essentially a command line tool which

493
00:18:51,179 --> 00:18:54,179
will verify the provenance for trusted

494
00:18:54,179 --> 00:18:55,980
builders that

495
00:18:55,980 --> 00:18:56,700
um

496
00:18:56,700 --> 00:18:59,760
that we essentially have identified as

497
00:18:59,760 --> 00:19:02,460
being well built and so some of those

498
00:19:02,460 --> 00:19:04,100
are the ones that we've built ourselves

499
00:19:04,100 --> 00:19:06,780
and have a full kind of like threat

500
00:19:06,780 --> 00:19:09,299
model so like these uh the workflows

501
00:19:09,299 --> 00:19:11,760
that we built as well as a Google Cloud

502
00:19:11,760 --> 00:19:13,559
build

503
00:19:13,559 --> 00:19:16,919
and we're looking to support other uh CI

504
00:19:16,919 --> 00:19:19,080
systems as we have more ways of

505
00:19:19,080 --> 00:19:22,380
generating provenance safely

506
00:19:22,380 --> 00:19:24,179
um and this also allows us to do things

507
00:19:24,179 --> 00:19:26,039
like verify the source code is the

508
00:19:26,039 --> 00:19:28,440
source code we expect and that it was

509
00:19:28,440 --> 00:19:30,840
built with the tags that we expect and

510
00:19:30,840 --> 00:19:32,520
for with the builders that we expect et

511
00:19:32,520 --> 00:19:34,799
cetera et cetera

512
00:19:34,799 --> 00:19:36,720
so let's take a little bit of a look at

513
00:19:36,720 --> 00:19:38,400
what that looks like

514
00:19:38,400 --> 00:19:40,559
right so let me blow this up a little

515
00:19:40,559 --> 00:19:42,740
bit

516
00:19:45,960 --> 00:19:48,179
um also one thing that we can do as well

517
00:19:48,179 --> 00:19:51,900
with containers as we upload them or we

518
00:19:51,900 --> 00:19:53,760
when we generate provenance we can

519
00:19:53,760 --> 00:19:55,620
actually look at some of the like

520
00:19:55,620 --> 00:19:57,480
inspect the provenance and take a look

521
00:19:57,480 --> 00:19:59,880
at what it looks like using some of the

522
00:19:59,880 --> 00:20:00,960
um

523
00:20:00,960 --> 00:20:04,140
six door based tools so

524
00:20:04,140 --> 00:20:06,840
as a way of just kind of looking at at

525
00:20:06,840 --> 00:20:09,480
this like let's look at the provenance

526
00:20:09,480 --> 00:20:12,840
uh and the address station is for the uh

527
00:20:12,840 --> 00:20:14,820
container that I just built or that I

528
00:20:14,820 --> 00:20:16,500
just ran that was like a malicious

529
00:20:16,500 --> 00:20:18,059
container right

530
00:20:18,059 --> 00:20:20,220
so if we look we can use the cosine tree

531
00:20:20,220 --> 00:20:23,640
uh command to actually run to actually

532
00:20:23,640 --> 00:20:25,140
check the container registry and look

533
00:20:25,140 --> 00:20:26,460
for added stations so we can actually

534
00:20:26,460 --> 00:20:28,679
notice that the kind of malicious

535
00:20:28,679 --> 00:20:30,900
container that was here like actually

536
00:20:30,900 --> 00:20:33,840
has an attestation itself right so this

537
00:20:33,840 --> 00:20:36,059
is a malicious container even though it

538
00:20:36,059 --> 00:20:37,740
had and

539
00:20:37,740 --> 00:20:41,220
but it has like an attestation it's just

540
00:20:41,220 --> 00:20:44,400
uh when we actually look at what the

541
00:20:44,400 --> 00:20:47,179
attestation contains so in this command

542
00:20:47,179 --> 00:20:50,340
we're going to see use the cosine

543
00:20:50,340 --> 00:20:52,320
download at a station command in order

544
00:20:52,320 --> 00:20:55,620
to download from this this image and

545
00:20:55,620 --> 00:20:57,360
then we'll look at the internal payload

546
00:20:57,360 --> 00:21:00,780
or the internal Json for that was for

547
00:21:00,780 --> 00:21:04,039
the prominence that was generated

548
00:21:04,799 --> 00:21:07,860
and so this is the the actual Json that

549
00:21:07,860 --> 00:21:09,360
was generated

550
00:21:09,360 --> 00:21:10,679
um and so we can look at some things

551
00:21:10,679 --> 00:21:13,799
like the subject this is a what's called

552
00:21:13,799 --> 00:21:16,860
an in Toto statement and this defines

553
00:21:16,860 --> 00:21:19,559
you know somewhat of like subject

554
00:21:19,559 --> 00:21:22,080
outbreak verb kind of a thing where

555
00:21:22,080 --> 00:21:24,120
um but the in this case the object is

556
00:21:24,120 --> 00:21:26,039
actually the subject but like what we

557
00:21:26,039 --> 00:21:27,360
have here is

558
00:21:27,360 --> 00:21:29,700
you know this the subject is the thing

559
00:21:29,700 --> 00:21:31,140
we're talking about so in this case the

560
00:21:31,140 --> 00:21:32,400
container image

561
00:21:32,400 --> 00:21:34,620
um and here's the digest for that

562
00:21:34,620 --> 00:21:37,200
and then we can look down and see uh

563
00:21:37,200 --> 00:21:38,820
more inside this thing called the

564
00:21:38,820 --> 00:21:40,559
predicate we can see the Builder that

565
00:21:40,559 --> 00:21:43,559
was used uh to build it as well as

566
00:21:43,559 --> 00:21:45,659
information about what source code was

567
00:21:45,659 --> 00:21:49,260
used and uh which workflows were used in

568
00:21:49,260 --> 00:21:51,679
GitHub

569
00:21:51,720 --> 00:21:53,640
and so we can see here that if we look

570
00:21:53,640 --> 00:21:56,159
at the actual source code that this came

571
00:21:56,159 --> 00:21:58,320
from this is actually not the source

572
00:21:58,320 --> 00:22:00,059
code uh

573
00:22:00,059 --> 00:22:02,580
repository that we that we expected it

574
00:22:02,580 --> 00:22:04,080
to be coming from it's actually a

575
00:22:04,080 --> 00:22:06,299
different source code Repository

576
00:22:06,299 --> 00:22:09,780
and so we can use things like the uh

577
00:22:09,780 --> 00:22:11,640
salsa GitHub generator

578
00:22:11,640 --> 00:22:14,400
or the salsa verifier

579
00:22:14,400 --> 00:22:18,480
uh in order to run the assault the the

580
00:22:18,480 --> 00:22:20,940
verifier to verify this and so we'll

581
00:22:20,940 --> 00:22:23,340
look and we'll try we'll say okay let's

582
00:22:23,340 --> 00:22:25,860
verify the this particular image and

583
00:22:25,860 --> 00:22:28,020
we'll expect that the source code Came

584
00:22:28,020 --> 00:22:30,780
From My Salsa and guac demo repository

585
00:22:30,780 --> 00:22:32,940
at this particular version

586
00:22:32,940 --> 00:22:35,460
right and so if we run that this is

587
00:22:35,460 --> 00:22:37,679
duplicated a little bit but uh

588
00:22:37,679 --> 00:22:40,200
we can see that when it tries to verify

589
00:22:40,200 --> 00:22:43,140
it that the generated

590
00:22:43,140 --> 00:22:45,659
uh artifact does not

591
00:22:45,659 --> 00:22:47,940
have the expected Source right so the

592
00:22:47,940 --> 00:22:49,860
expected source is social block demo but

593
00:22:49,860 --> 00:22:52,880
we got uh the fuldia

594
00:22:52,880 --> 00:22:55,200
repository so in this case the

595
00:22:55,200 --> 00:22:56,700
verification failed because we were

596
00:22:56,700 --> 00:22:58,440
expecting a different repository than

597
00:22:58,440 --> 00:23:00,539
the one that was actually present in the

598
00:23:00,539 --> 00:23:02,960
provenance

599
00:23:04,559 --> 00:23:07,559
so if you want to like actually see what

600
00:23:07,559 --> 00:23:09,360
it looks like to verify one that

601
00:23:09,360 --> 00:23:12,179
actually does verify

602
00:23:12,179 --> 00:23:14,039
um

603
00:23:14,039 --> 00:23:16,260
effectively like this is going to check

604
00:23:16,260 --> 00:23:18,120
the provenance like check the signatures

605
00:23:18,120 --> 00:23:20,159
on the provenance and check the the uh

606
00:23:20,159 --> 00:23:22,799
the fields in the provenance uh for the

607
00:23:22,799 --> 00:23:25,580
source code and the tags in order to

608
00:23:25,580 --> 00:23:27,600
verify those

609
00:23:27,600 --> 00:23:29,940
um those are correct and if those are

610
00:23:29,940 --> 00:23:33,059
correct then we can uh the verification

611
00:23:33,059 --> 00:23:34,980
will pass and then we can go on to use

612
00:23:34,980 --> 00:23:38,299
the container as we normally would

613
00:23:43,980 --> 00:23:47,700
so it's also kind of worth noting that

614
00:23:47,700 --> 00:23:51,360
um as part of six door like in using the

615
00:23:51,360 --> 00:23:54,059
Sig store tooling

616
00:23:54,059 --> 00:23:56,280
um and the

617
00:23:56,280 --> 00:23:58,440
uh

618
00:23:58,440 --> 00:24:01,580
and salsa provenance we're able to

619
00:24:01,580 --> 00:24:04,440
integrate really well with a lot of

620
00:24:04,440 --> 00:24:06,000
other tooling that supports six store

621
00:24:06,000 --> 00:24:08,520
and solsa provenance so tools like

622
00:24:08,520 --> 00:24:10,500
kiverno and the Sig store policy

623
00:24:10,500 --> 00:24:12,780
controller are two uh

624
00:24:12,780 --> 00:24:16,559
two tools that are used in kubernetes to

625
00:24:16,559 --> 00:24:18,299
verify prominence before you actually

626
00:24:18,299 --> 00:24:20,760
deploy containers into kubernetes

627
00:24:20,760 --> 00:24:22,740
so these are used as what's called an

628
00:24:22,740 --> 00:24:24,539
admissions controller so that admissions

629
00:24:24,539 --> 00:24:26,940
time when you try to create a pod it

630
00:24:26,940 --> 00:24:29,820
will actually verify the provenance for

631
00:24:29,820 --> 00:24:32,520
that image against the policy that

632
00:24:32,520 --> 00:24:35,159
you've defined inside of the cluster and

633
00:24:35,159 --> 00:24:37,440
in our salsa GitHub repo we have a

634
00:24:37,440 --> 00:24:39,480
number of examples about how to use

635
00:24:39,480 --> 00:24:41,460
those in example policies that you can

636
00:24:41,460 --> 00:24:45,679
use to verify containers

637
00:24:46,080 --> 00:24:47,820
um so effectively what the admissions

638
00:24:47,820 --> 00:24:49,860
controller does is it verifies the

639
00:24:49,860 --> 00:24:51,360
prominence and it will reject the pilot

640
00:24:51,360 --> 00:24:53,880
outright if the the verification doesn't

641
00:24:53,880 --> 00:24:56,240
pass

642
00:24:56,820 --> 00:24:59,760
um and these can be used with a salsa

643
00:24:59,760 --> 00:25:01,860
GitHub generator because like our uh

644
00:25:01,860 --> 00:25:04,620
workflows use this kind of uh use the

645
00:25:04,620 --> 00:25:06,600
format the same formats that are

646
00:25:06,600 --> 00:25:10,140
accepted by uh by kuverno and sigster uh

647
00:25:10,140 --> 00:25:12,980
policy controller

648
00:25:17,159 --> 00:25:19,620
okay so now that we've kind of like gone

649
00:25:19,620 --> 00:25:21,960
over like how you can kind of generate

650
00:25:21,960 --> 00:25:25,320
provenance and uh how you can kind of

651
00:25:25,320 --> 00:25:27,659
verify that before you actually run your

652
00:25:27,659 --> 00:25:29,460
containers

653
00:25:29,460 --> 00:25:31,020
um there's also

654
00:25:31,020 --> 00:25:33,000
there's still like we haven't totally

655
00:25:33,000 --> 00:25:34,980
solved the problem of you know

656
00:25:34,980 --> 00:25:37,440
understanding getting information about

657
00:25:37,440 --> 00:25:39,299
the artifacts that we're consuming so

658
00:25:39,299 --> 00:25:41,880
the uh

659
00:25:41,880 --> 00:25:44,340
so not just like how it was built but

660
00:25:44,340 --> 00:25:46,679
like you know what's inside of it

661
00:25:46,679 --> 00:25:48,360
um do these things have access Stations

662
00:25:48,360 --> 00:25:50,220
don't they like which artifacts do we

663
00:25:50,220 --> 00:25:51,179
have

664
00:25:51,179 --> 00:25:53,220
um how do they relate to each other uh

665
00:25:53,220 --> 00:25:54,480
things like that

666
00:25:54,480 --> 00:25:57,419
so one of the tools that we're also

667
00:25:57,419 --> 00:26:00,120
developing is a tool called guac which

668
00:26:00,120 --> 00:26:03,240
is a kind of graph based tool that is

669
00:26:03,240 --> 00:26:05,640
used to kind of ingest metadata and

670
00:26:05,640 --> 00:26:07,980
information about artifacts and then

671
00:26:07,980 --> 00:26:10,799
allow for querying and understanding and

672
00:26:10,799 --> 00:26:12,900
visualization of the relationships

673
00:26:12,900 --> 00:26:14,340
between those different types of

674
00:26:14,340 --> 00:26:15,779
artifacts

675
00:26:15,779 --> 00:26:17,520
um so this is really useful in a number

676
00:26:17,520 --> 00:26:18,900
of contexts

677
00:26:18,900 --> 00:26:20,880
you know essentially like you have

678
00:26:20,880 --> 00:26:23,520
artifacts that are node artifacts and

679
00:26:23,520 --> 00:26:24,960
metadata there are nodes and then you

680
00:26:24,960 --> 00:26:26,460
have like relationships between those

681
00:26:26,460 --> 00:26:28,500
nodes as they're linked so in the graph

682
00:26:28,500 --> 00:26:31,440
uh you would have like nodes that are

683
00:26:31,440 --> 00:26:33,120
artifacts and metadata and the edges or

684
00:26:33,120 --> 00:26:34,740
these relationships that go between

685
00:26:34,740 --> 00:26:37,220
these

686
00:26:38,400 --> 00:26:40,679
so in our case like

687
00:26:40,679 --> 00:26:42,720
so guac can really apply to a lot of

688
00:26:42,720 --> 00:26:44,640
different uh

689
00:26:44,640 --> 00:26:46,919
areas of

690
00:26:46,919 --> 00:26:50,340
discoverability and auditing and so kind

691
00:26:50,340 --> 00:26:53,640
of across the life cycle I guess of a uh

692
00:26:53,640 --> 00:26:55,919
vulnerability like so from the kind of

693
00:26:55,919 --> 00:26:58,440
being reactive uh how are you affected

694
00:26:58,440 --> 00:27:00,600
by something that actually happened

695
00:27:00,600 --> 00:27:01,980
um to

696
00:27:01,980 --> 00:27:03,360
trying to

697
00:27:03,360 --> 00:27:06,120
Implement safeguards into uh your system

698
00:27:06,120 --> 00:27:08,760
so like adding policies based on this

699
00:27:08,760 --> 00:27:09,559
information

700
00:27:09,559 --> 00:27:12,659
and then also on the proactive side of

701
00:27:12,659 --> 00:27:16,020
like trying to understand the wider set

702
00:27:16,020 --> 00:27:17,039
of

703
00:27:17,039 --> 00:27:19,200
security implications of like different

704
00:27:19,200 --> 00:27:21,960
uh artifacts like which areas or which

705
00:27:21,960 --> 00:27:25,260
artifacts are have higher risk profiles

706
00:27:25,260 --> 00:27:26,880
which need more attention or need to be

707
00:27:26,880 --> 00:27:28,740
prioritized instead in terms of like

708
00:27:28,740 --> 00:27:31,200
improving their supply chain security

709
00:27:31,200 --> 00:27:33,120
um that sort of thing

710
00:27:33,120 --> 00:27:34,980
so I'm going to take like a little bit

711
00:27:34,980 --> 00:27:37,860
of a uh and I'll also say that one of

712
00:27:37,860 --> 00:27:40,440
the uh folks that is working on the

713
00:27:40,440 --> 00:27:43,700
ghost team working on guac uh did a

714
00:27:43,700 --> 00:27:46,860
keynote earlier talking a little bit

715
00:27:46,860 --> 00:27:48,440
more about guac so I definitely

716
00:27:48,440 --> 00:27:50,520
recommend checking out the recording of

717
00:27:50,520 --> 00:27:53,000
that as well

718
00:27:53,100 --> 00:27:57,059
um but effectively like guac is a system

719
00:27:57,059 --> 00:27:59,039
that will ingest

720
00:27:59,039 --> 00:28:01,260
um artifacts and give you a graph kind

721
00:28:01,260 --> 00:28:02,820
of representation of those artifacts

722
00:28:02,820 --> 00:28:04,919
which you can use to kind of visualize

723
00:28:04,919 --> 00:28:08,220
and understand the uh the tools right

724
00:28:08,220 --> 00:28:09,960
now it's effectively like it's a little

725
00:28:09,960 --> 00:28:13,380
bit of an early uh early it's an image

726
00:28:13,380 --> 00:28:15,299
development life cycle so right now it's

727
00:28:15,299 --> 00:28:17,460
mostly just ingestion and then you can

728
00:28:17,460 --> 00:28:20,039
do queries on the database directly so

729
00:28:20,039 --> 00:28:22,220
in this case I'm using neo4j to

730
00:28:22,220 --> 00:28:24,659
directly query and visualize in a

731
00:28:24,659 --> 00:28:26,760
database but in the future there will be

732
00:28:26,760 --> 00:28:29,100
much more targeted type of apis for

733
00:28:29,100 --> 00:28:32,700
developing policies and things like that

734
00:28:32,700 --> 00:28:34,380
um but we can see here here is the

735
00:28:34,380 --> 00:28:36,779
here's a set of metadata that I've

736
00:28:36,779 --> 00:28:38,640
ingested for the images that I was using

737
00:28:38,640 --> 00:28:42,840
earlier so we have our uh the image that

738
00:28:42,840 --> 00:28:46,020
we uh that I built that is that is good

739
00:28:46,020 --> 00:28:47,640
and then we have the image down here

740
00:28:47,640 --> 00:28:50,460
that is uh the malicious container and

741
00:28:50,460 --> 00:28:52,980
so like say for example in a reactive

742
00:28:52,980 --> 00:28:54,720
context where we figure out that this

743
00:28:54,720 --> 00:28:56,640
one malicious container is in there how

744
00:28:56,640 --> 00:28:58,020
did that get in there and what what

745
00:28:58,020 --> 00:28:59,159
happened

746
00:28:59,159 --> 00:29:00,960
um we can actually see that this

747
00:29:00,960 --> 00:29:02,880
container has

748
00:29:02,880 --> 00:29:04,260
um

749
00:29:04,260 --> 00:29:07,020
had was built by the same Builder as our

750
00:29:07,020 --> 00:29:09,600
good container and that it has a

751
00:29:09,600 --> 00:29:11,700
software attestation so this orange node

752
00:29:11,700 --> 00:29:14,039
is an attestation node so we actually

753
00:29:14,039 --> 00:29:16,740
built it yeah it was actually built with

754
00:29:16,740 --> 00:29:18,960
the same Builder and generated as a

755
00:29:18,960 --> 00:29:21,600
station in order to try to fool uh fool

756
00:29:21,600 --> 00:29:23,399
us but it was built from a different

757
00:29:23,399 --> 00:29:26,580
repository so that's one key knowledge

758
00:29:26,580 --> 00:29:30,299
Point here is that we even though uh we

759
00:29:30,299 --> 00:29:32,820
could verify the key signature and that

760
00:29:32,820 --> 00:29:34,860
it had to add an added station we really

761
00:29:34,860 --> 00:29:36,480
still need to check the repository

762
00:29:36,480 --> 00:29:38,460
information the provenance metadata

763
00:29:38,460 --> 00:29:40,380
itself in order to make sure that that's

764
00:29:40,380 --> 00:29:43,880
what we expected was

765
00:29:44,100 --> 00:29:46,440
so we can see here a little bit about

766
00:29:46,440 --> 00:29:48,720
the relationships here and how this this

767
00:29:48,720 --> 00:29:51,360
uh artifact was built these orange these

768
00:29:51,360 --> 00:29:53,880
red nodes over here are part of a uh

769
00:29:53,880 --> 00:29:55,440
information that was ingested from an

770
00:29:55,440 --> 00:30:00,179
s-bomb so this was built from an image a

771
00:30:00,179 --> 00:30:02,520
container image and we used the the sift

772
00:30:02,520 --> 00:30:05,279
tool to generate an s-bomb which tells

773
00:30:05,279 --> 00:30:08,039
us the different uh golang packages

774
00:30:08,039 --> 00:30:10,140
these are not quite as relevant for for

775
00:30:10,140 --> 00:30:12,360
our in the this reactive use case but we

776
00:30:12,360 --> 00:30:15,720
can see that uh they have uh at least

777
00:30:15,720 --> 00:30:18,659
one kind of common dependency within the

778
00:30:18,659 --> 00:30:20,880
two uh

779
00:30:20,880 --> 00:30:23,700
the two containers

780
00:30:23,700 --> 00:30:25,440
so there you can kind of see like an

781
00:30:25,440 --> 00:30:27,960
overall set of

782
00:30:27,960 --> 00:30:28,500
um

783
00:30:28,500 --> 00:30:30,600
relationships between

784
00:30:30,600 --> 00:30:32,760
the different types of metadata about

785
00:30:32,760 --> 00:30:35,419
our artifact

786
00:30:38,340 --> 00:30:41,220
so in we just used like kind of more

787
00:30:41,220 --> 00:30:44,039
reactive context for for guac but in

788
00:30:44,039 --> 00:30:45,840
reality what we want to be doing is like

789
00:30:45,840 --> 00:30:47,659
you know quote-unquote shifting left

790
00:30:47,659 --> 00:30:51,720
I'll maybe take a a second or two to let

791
00:30:51,720 --> 00:30:54,240
you guys like check off your bingo cards

792
00:30:54,240 --> 00:30:56,700
um but uh really what we want to be

793
00:30:56,700 --> 00:30:58,679
doing is uh

794
00:30:58,679 --> 00:31:01,080
using this in a much more proactive

795
00:31:01,080 --> 00:31:03,899
context be able to like look at the

796
00:31:03,899 --> 00:31:06,000
metadata in a much more proactive way

797
00:31:06,000 --> 00:31:09,720
and better understanding overall our um

798
00:31:09,720 --> 00:31:11,399
you know this the situation of our

799
00:31:11,399 --> 00:31:14,399
supply chain uh and our

800
00:31:14,399 --> 00:31:15,960
um the artifacts that we're building and

801
00:31:15,960 --> 00:31:18,059
using

802
00:31:18,059 --> 00:31:20,720
uh

803
00:31:21,000 --> 00:31:23,460
so with that I'll

804
00:31:23,460 --> 00:31:25,260
um end and I think I have a couple of

805
00:31:25,260 --> 00:31:26,820
just a couple of minutes for questions

806
00:31:26,820 --> 00:31:30,299
if they're already but we have a blog

807
00:31:30,299 --> 00:31:32,100
post that we released uh I think today

808
00:31:32,100 --> 00:31:36,120
uh on the uh GA in the container

809
00:31:36,120 --> 00:31:38,100
workflow if you want to find out more

810
00:31:38,100 --> 00:31:39,799
about salsa you can check that out at

811
00:31:39,799 --> 00:31:43,380
salsa.dev our GitHub generator and

812
00:31:43,380 --> 00:31:45,179
social verifier repost are on GitHub

813
00:31:45,179 --> 00:31:47,120
under the salsa framework organization

814
00:31:47,120 --> 00:31:49,740
and guac is under the glocksec

815
00:31:49,740 --> 00:31:53,340
organization on GitHub as well

816
00:31:53,340 --> 00:31:56,460
um I'm Ian Lewis on GitHub and on E M

817
00:31:56,460 --> 00:31:58,320
Lewis on Twitter so if you're inclined

818
00:31:58,320 --> 00:32:01,679
you can hit me up later as well

819
00:32:01,679 --> 00:32:03,960
so thank you all

820
00:32:03,960 --> 00:32:09,419
[Applause]

821
00:32:09,419 --> 00:32:11,220
I have about three minutes for questions

822
00:32:11,220 --> 00:32:15,140
so maybe one or two if there are any

823
00:32:16,380 --> 00:32:18,860
yes

824
00:32:21,720 --> 00:32:23,760
so the question was like there's a lot

825
00:32:23,760 --> 00:32:25,620
of GitHub on the slides is there an

826
00:32:25,620 --> 00:32:28,860
equivalent project for gitlab uh the

827
00:32:28,860 --> 00:32:31,380
there is uh we are working with gitlab

828
00:32:31,380 --> 00:32:33,299
to uh to implement some of these things

829
00:32:33,299 --> 00:32:35,580
like right now some of the issues around

830
00:32:35,580 --> 00:32:39,720
on GitHub are around isolation So like

831
00:32:39,720 --> 00:32:42,539
um we are kind of Lucky in a sense on

832
00:32:42,539 --> 00:32:44,940
GitHub that we are able to create these

833
00:32:44,940 --> 00:32:46,140
generators

834
00:32:46,140 --> 00:32:50,820
um using uh features of GitHub actions

835
00:32:50,820 --> 00:32:52,799
that allow us to isolate that from the

836
00:32:52,799 --> 00:32:54,360
actual build

837
00:32:54,360 --> 00:32:56,760
um but with gitlab there's not really a

838
00:32:56,760 --> 00:32:58,620
way to do that quite yet and so we're

839
00:32:58,620 --> 00:33:00,919
working with them to actually like

840
00:33:00,919 --> 00:33:03,360
be able to generate the problem safely

841
00:33:03,360 --> 00:33:06,120
and then be able to like do essentially

842
00:33:06,120 --> 00:33:08,460
the same things we're doing on GitHub as

843
00:33:08,460 --> 00:33:10,080
well so yes we are thinking about that

844
00:33:10,080 --> 00:33:12,000
and working with them on that

845
00:33:12,000 --> 00:33:14,539
yeah

846
00:33:14,940 --> 00:33:17,779
any other questions

847
00:33:19,740 --> 00:33:22,220
yes

848
00:33:33,200 --> 00:33:36,799
like a developer

849
00:33:38,159 --> 00:33:40,440
right so the question is

850
00:33:40,440 --> 00:33:43,440
um as a user of of a CI system or a

851
00:33:43,440 --> 00:33:45,779
smaller CI system uh is this something

852
00:33:45,779 --> 00:33:46,799
that

853
00:33:46,799 --> 00:33:49,260
we have to rely on the CI system itself

854
00:33:49,260 --> 00:33:50,640
to implement or is this something that

855
00:33:50,640 --> 00:33:52,500
we can build ourselves

856
00:33:52,500 --> 00:33:55,080
um this is really something that usually

857
00:33:55,080 --> 00:33:56,760
the build system itself would have to

858
00:33:56,760 --> 00:33:58,440
kind of implement

859
00:33:58,440 --> 00:34:01,260
um or that ideally it would Implement uh

860
00:34:01,260 --> 00:34:02,820
but

861
00:34:02,820 --> 00:34:04,860
um in the case of GitHub we're like kind

862
00:34:04,860 --> 00:34:08,159
of using uh

863
00:34:08,159 --> 00:34:10,918
a uh a feature of the system in order to

864
00:34:10,918 --> 00:34:12,320
like build it ourselves

865
00:34:12,320 --> 00:34:15,359
but we are kind of essentially working

866
00:34:15,359 --> 00:34:18,719
with other like build tools like uh

867
00:34:18,719 --> 00:34:21,060
like build kite in order to be able to

868
00:34:21,060 --> 00:34:23,460
implement these things but there's still

869
00:34:23,460 --> 00:34:25,139
a lot of that is still a work in profit

870
00:34:25,139 --> 00:34:27,480
address on other CI systems particularly

871
00:34:27,480 --> 00:34:29,639
with regard to the isolation that we

872
00:34:29,639 --> 00:34:32,280
mentioned about gitlab and also about

873
00:34:32,280 --> 00:34:34,918
around the identity portion so the uh

874
00:34:34,918 --> 00:34:38,339
being able to have an identity provider

875
00:34:38,339 --> 00:34:42,139
so an oidc provider for example for

876
00:34:42,139 --> 00:34:46,379
providers like build kite and gitlab in

877
00:34:46,379 --> 00:34:47,820
order to provide the identity piece that

878
00:34:47,820 --> 00:34:51,800
allows us to sign and do keyless signing

879
00:34:54,659 --> 00:34:58,760
one more the red shirt here

880
00:35:11,339 --> 00:35:13,740
okay so the question was like did the

881
00:35:13,740 --> 00:35:16,619
salsa verifier like walk a tree of like

882
00:35:16,619 --> 00:35:18,060
dependencies in order to verify the

883
00:35:18,060 --> 00:35:19,500
dependencies as well

884
00:35:19,500 --> 00:35:21,300
um in our case like what we're doing is

885
00:35:21,300 --> 00:35:22,740
essentially just verifying the

886
00:35:22,740 --> 00:35:24,540
provenance that was generated for that

887
00:35:24,540 --> 00:35:26,460
image instead of doing any sort of

888
00:35:26,460 --> 00:35:28,500
dependency walking

889
00:35:28,500 --> 00:35:29,820
um that's something that we can explore

890
00:35:29,820 --> 00:35:32,160
in the future if we have if the artifact

891
00:35:32,160 --> 00:35:36,000
itself has a way of like uh defining or

892
00:35:36,000 --> 00:35:37,680
if we have a way of figuring out what

893
00:35:37,680 --> 00:35:39,660
those dependencies are

894
00:35:39,660 --> 00:35:42,240
um right now like you know the only way

895
00:35:42,240 --> 00:35:44,040
we do that is like if we were explicitly

896
00:35:44,040 --> 00:35:46,980
provided an s-bomb or we like tried to

897
00:35:46,980 --> 00:35:48,480
generate one ourselves but we don't

898
00:35:48,480 --> 00:35:52,859
really necessarily want to uh

899
00:35:53,700 --> 00:35:57,180
trust the artifact itself

900
00:35:57,180 --> 00:35:58,740
to provide us with those dependencies

901
00:35:58,740 --> 00:36:00,780
we'd like to be able to get those like

902
00:36:00,780 --> 00:36:03,540
kind of out of band but

903
00:36:03,540 --> 00:36:04,920
yeah that's something that's an area

904
00:36:04,920 --> 00:36:06,300
that we kind of like want to think about

905
00:36:06,300 --> 00:36:08,900
and explore

906
00:36:09,420 --> 00:36:11,579
well thanks everybody for coming

907
00:36:11,579 --> 00:36:13,500
um I'll be sticking around so if you

908
00:36:13,500 --> 00:36:14,760
have other questions and you want to

909
00:36:14,760 --> 00:36:16,680
talk to me in person then I'll I'll be

910
00:36:16,680 --> 00:36:18,920
available thanks a lot

911
00:36:18,920 --> 00:36:24,150
[Applause]

