1
00:00:00,000 --> 00:00:01,860
good afternoon my name is Aaron creel

2
00:00:01,860 --> 00:00:03,020
I'm the director of government security

3
00:00:03,020 --> 00:00:06,899
at SpaceX so kind of in that role I own

4
00:00:06,899 --> 00:00:09,300
all the spacex's like secure facilities

5
00:00:09,300 --> 00:00:12,360
clearance process and

6
00:00:12,360 --> 00:00:14,460
um and classified systems or sensitive

7
00:00:14,460 --> 00:00:15,960
systems uh we're going to talk

8
00:00:15,960 --> 00:00:17,520
specifically about that last one here

9
00:00:17,520 --> 00:00:20,039
yep and I'm Wayne Starr I'm a devsecops

10
00:00:20,039 --> 00:00:22,199
engineer at defense unicorns I spent

11
00:00:22,199 --> 00:00:23,699
five years in the Air Force kind of in

12
00:00:23,699 --> 00:00:25,500
the software Factory World working with

13
00:00:25,500 --> 00:00:27,000
secure software and how do you implement

14
00:00:27,000 --> 00:00:28,740
cicd and some of the continuous

15
00:00:28,740 --> 00:00:30,660
authority to operate stuff that you may

16
00:00:30,660 --> 00:00:32,579
have heard about so a lot of that stuff

17
00:00:32,579 --> 00:00:34,500
dealing with how you implement nist and

18
00:00:34,500 --> 00:00:36,360
all that stuff within the Air Force but

19
00:00:36,360 --> 00:00:37,739
now I'm in the kubernetes world working

20
00:00:37,739 --> 00:00:39,960
with SpaceX so a couple disclaimers

21
00:00:39,960 --> 00:00:42,300
right up right front both Wayne and I

22
00:00:42,300 --> 00:00:44,940
talk very very fast uh we're going to

23
00:00:44,940 --> 00:00:46,920
take a real make a real conscious effort

24
00:00:46,920 --> 00:00:48,660
to slow it down

25
00:00:48,660 --> 00:00:50,579
um if you see us like start spinning off

26
00:00:50,579 --> 00:00:52,079
the rails let us know and we'll try to

27
00:00:52,079 --> 00:00:54,120
slow down

28
00:00:54,120 --> 00:00:56,340
um also I am not very technical

29
00:00:56,340 --> 00:00:59,640
um Wayne is extremely technical uh so if

30
00:00:59,640 --> 00:01:00,960
he starts going down a rabbit hole and

31
00:01:00,960 --> 00:01:02,820
be like Wayne what does that mean

32
00:01:02,820 --> 00:01:04,319
um so please like

33
00:01:04,319 --> 00:01:05,580
yeah I'm trying to make a conscious

34
00:01:05,580 --> 00:01:07,799
effort for that so

35
00:01:07,799 --> 00:01:10,260
so uh kind of the problem about a year

36
00:01:10,260 --> 00:01:13,439
ago uh SpaceX well I'll back up a little

37
00:01:13,439 --> 00:01:15,000
bit so SpaceX you know commercial

38
00:01:15,000 --> 00:01:17,159
company a number of government things

39
00:01:17,159 --> 00:01:20,100
and as the years are progressing

40
00:01:20,100 --> 00:01:20,880
um

41
00:01:20,880 --> 00:01:23,220
the more government programs and the

42
00:01:23,220 --> 00:01:24,600
more sensitive government programs are

43
00:01:24,600 --> 00:01:26,420
is kind of growing

44
00:01:26,420 --> 00:01:29,520
we have uh for the for the longest time

45
00:01:29,520 --> 00:01:32,520
kind of a very manual process and how we

46
00:01:32,520 --> 00:01:34,200
do those things I knew of Defense

47
00:01:34,200 --> 00:01:36,540
unicorns uh through my previous Life as

48
00:01:36,540 --> 00:01:39,000
a presidential Innovation fellow and

49
00:01:39,000 --> 00:01:40,680
kind of asked them like what they would

50
00:01:40,680 --> 00:01:41,820
do to help make this process a little

51
00:01:41,820 --> 00:01:43,079
better

52
00:01:43,079 --> 00:01:43,680
um

53
00:01:43,680 --> 00:01:46,079
so uh yeah so we looked at an angle

54
00:01:46,079 --> 00:01:48,360
process we looked at uh you know

55
00:01:48,360 --> 00:01:51,320
how things were being done

56
00:01:51,320 --> 00:01:54,540
efficiently and and try to kind of

57
00:01:54,540 --> 00:01:55,920
bridge that gap between how we were

58
00:01:55,920 --> 00:01:57,960
doing it kind of the very tip of the

59
00:01:57,960 --> 00:01:59,759
spear how like you know these Innovation

60
00:01:59,759 --> 00:02:02,100
centers are

61
00:02:02,100 --> 00:02:03,840
you know doing this really quickly and

62
00:02:03,840 --> 00:02:05,100
try to bridge that a little bit for

63
00:02:05,100 --> 00:02:07,460
industry

64
00:02:08,340 --> 00:02:11,280
so uh this is one of the and I'm not

65
00:02:11,280 --> 00:02:13,020
going to help me out on this

66
00:02:13,020 --> 00:02:14,580
um this is one of the more

67
00:02:14,580 --> 00:02:16,560
um this is the project kind of like that

68
00:02:16,560 --> 00:02:20,099
we took on in order to do this effort

69
00:02:20,099 --> 00:02:22,860
um it's a lot so yeah and specifically

70
00:02:22,860 --> 00:02:25,200
this is one binary um that basically

71
00:02:25,200 --> 00:02:26,760
builds from a couple different projects

72
00:02:26,760 --> 00:02:29,160
internally and then it gets built itself

73
00:02:29,160 --> 00:02:31,860
into a container and then that gets ran

74
00:02:31,860 --> 00:02:34,860
in amongst uh an ecosystem containers

75
00:02:34,860 --> 00:02:35,819
um currently in Docker but moving to

76
00:02:35,819 --> 00:02:38,640
kubernetes but so this is just that one

77
00:02:38,640 --> 00:02:40,440
project and all of its dependencies not

78
00:02:40,440 --> 00:02:41,819
concluding its web components

79
00:02:41,819 --> 00:02:43,620
infrastructure components or container

80
00:02:43,620 --> 00:02:45,239
infrastructure just because of how

81
00:02:45,239 --> 00:02:46,860
complicated some of the math and

82
00:02:46,860 --> 00:02:47,879
different things that they're doing with

83
00:02:47,879 --> 00:02:51,379
a lot of these Telemetry systems are

84
00:02:52,080 --> 00:02:54,840
so why solve this and that is kind of

85
00:02:54,840 --> 00:02:56,580
the big question

86
00:02:56,580 --> 00:02:57,180
um

87
00:02:57,180 --> 00:02:59,340
you know there are kind of two points of

88
00:02:59,340 --> 00:03:01,080
view so the SpaceX point of view and I

89
00:03:01,080 --> 00:03:03,300
think it makes a lot of sense is we're

90
00:03:03,300 --> 00:03:04,680
launching a rocket a week and we're

91
00:03:04,680 --> 00:03:06,480
Landing it we're putting four thousand

92
00:03:06,480 --> 00:03:09,300
five thousand satellites into space like

93
00:03:09,300 --> 00:03:10,739
we're doing this right

94
00:03:10,739 --> 00:03:13,860
the government process is very much

95
00:03:13,860 --> 00:03:16,019
um you know we're going to assess these

96
00:03:16,019 --> 00:03:17,159
controls we're gonna look at these

97
00:03:17,159 --> 00:03:19,680
things very just you know one by one and

98
00:03:19,680 --> 00:03:20,879
we're trying to bridge that Gap here

99
00:03:20,879 --> 00:03:22,860
trying to make it where you know SpaceX

100
00:03:22,860 --> 00:03:24,780
understands kind of where the

101
00:03:24,780 --> 00:03:25,800
um where the concerns of the government

102
00:03:25,800 --> 00:03:27,780
side are and then the government side

103
00:03:27,780 --> 00:03:29,459
takes a kind of realistic understanding

104
00:03:29,459 --> 00:03:31,739
of how SpaceX is doing it and knowing

105
00:03:31,739 --> 00:03:33,060
that just because they're doing it a

106
00:03:33,060 --> 00:03:35,099
certain way doesn't make it less secure

107
00:03:35,099 --> 00:03:36,720
um but trying to kind of translate that

108
00:03:36,720 --> 00:03:39,540
from SpaceX to authorizing official was

109
00:03:39,540 --> 00:03:41,220
kind of our goal and make it more

110
00:03:41,220 --> 00:03:43,580
automated

111
00:03:44,220 --> 00:03:46,260
so kind of two ways we could do it

112
00:03:46,260 --> 00:03:47,280
um

113
00:03:47,280 --> 00:03:49,560
one is through policy saying like you

114
00:03:49,560 --> 00:03:50,340
know

115
00:03:50,340 --> 00:03:52,319
um this is our step-by-step for pro you

116
00:03:52,319 --> 00:03:53,459
know process

117
00:03:53,459 --> 00:03:54,120
um

118
00:03:54,120 --> 00:03:57,000
the concern there is

119
00:03:57,000 --> 00:03:58,500
um well a big concern is communicate

120
00:03:58,500 --> 00:04:00,360
communicating that policy you know we

121
00:04:00,360 --> 00:04:02,099
really have one

122
00:04:02,099 --> 00:04:04,200
um software process but use it for for

123
00:04:04,200 --> 00:04:05,760
everything right so with Starship

124
00:04:05,760 --> 00:04:09,599
whether it's starlink or Falcon all of

125
00:04:09,599 --> 00:04:10,980
our code really starts at the same place

126
00:04:10,980 --> 00:04:12,840
and then it kind of changes a little bit

127
00:04:12,840 --> 00:04:15,180
based on what we're deploying into

128
00:04:15,180 --> 00:04:17,880
um but the uh the concern is as it gets

129
00:04:17,880 --> 00:04:19,079
further along in the process that

130
00:04:19,079 --> 00:04:21,000
process changes

131
00:04:21,000 --> 00:04:22,979
um the better solution is to automate

132
00:04:22,979 --> 00:04:24,600
some of this

133
00:04:24,600 --> 00:04:26,460
you know for for SpaceX one of the big

134
00:04:26,460 --> 00:04:28,259
concerns is we use a lot of custom

135
00:04:28,259 --> 00:04:30,000
software

136
00:04:30,000 --> 00:04:32,340
um and you know that is

137
00:04:32,340 --> 00:04:33,780
a lot of times takes a manual process

138
00:04:33,780 --> 00:04:34,979
for the government to look at it and say

139
00:04:34,979 --> 00:04:37,080
like cool this meets my threshold from a

140
00:04:37,080 --> 00:04:39,740
risk perspective

141
00:04:42,000 --> 00:04:43,440
so we kind of looked at three ways to do

142
00:04:43,440 --> 00:04:44,520
this

143
00:04:44,520 --> 00:04:45,720
um

144
00:04:45,720 --> 00:04:47,699
so on import

145
00:04:47,699 --> 00:04:51,060
um I guess kind of a a process to do

146
00:04:51,060 --> 00:04:54,479
this so on import like initial reviews

147
00:04:54,479 --> 00:04:56,460
um once it's integrated into like that

148
00:04:56,460 --> 00:04:59,400
new stack or that new air gapped region

149
00:04:59,400 --> 00:05:01,919
or once it's fully up and running uh

150
00:05:01,919 --> 00:05:03,419
when it's deployed

151
00:05:03,419 --> 00:05:06,060
and uh yep go for it

152
00:05:06,060 --> 00:05:07,919
the other thing we really try to avoid

153
00:05:07,919 --> 00:05:09,479
is once it's deployed into that new

154
00:05:09,479 --> 00:05:10,620
environment

155
00:05:10,620 --> 00:05:13,080
how do you make sure that the version

156
00:05:13,080 --> 00:05:15,020
controls the

157
00:05:15,020 --> 00:05:19,440
software dependencies stay fresh and and

158
00:05:19,440 --> 00:05:21,660
are continuously updated so we didn't

159
00:05:21,660 --> 00:05:24,800
have an answer as we came to these guys

160
00:05:25,680 --> 00:05:26,699
um

161
00:05:26,699 --> 00:05:28,259
and really it has to be easy enough for

162
00:05:28,259 --> 00:05:29,580
me to understand

163
00:05:29,580 --> 00:05:31,139
um you know the non-technical person the

164
00:05:31,139 --> 00:05:32,400
person who

165
00:05:32,400 --> 00:05:34,020
gets it a little bit

166
00:05:34,020 --> 00:05:35,580
um but you know you ask me two or three

167
00:05:35,580 --> 00:05:36,960
questions deep and kind of just glaze

168
00:05:36,960 --> 00:05:38,340
over

169
00:05:38,340 --> 00:05:40,979
yep and so getting the automation pieces

170
00:05:40,979 --> 00:05:42,300
um there are a lot of different Tools in

171
00:05:42,300 --> 00:05:43,800
this ecosystem but I'm going to kind of

172
00:05:43,800 --> 00:05:46,139
Bring It Back to Basics at first many of

173
00:05:46,139 --> 00:05:47,400
you are probably familiar with cpe's

174
00:05:47,400 --> 00:05:49,500
common platform enumerations they've

175
00:05:49,500 --> 00:05:51,419
been around for a very very long time

176
00:05:51,419 --> 00:05:53,940
and are largely how you would identify a

177
00:05:53,940 --> 00:05:56,100
given package or a product within your

178
00:05:56,100 --> 00:05:58,320
ecosystem they're how cves are looked up

179
00:05:58,320 --> 00:06:00,180
and very similar information would be

180
00:06:00,180 --> 00:06:02,039
used for GitHub security advisories or

181
00:06:02,039 --> 00:06:04,020
other other things and so it is

182
00:06:04,020 --> 00:06:05,100
something that's important to keep in

183
00:06:05,100 --> 00:06:06,479
the back of your mind as to how you

184
00:06:06,479 --> 00:06:08,340
surface this information within your

185
00:06:08,340 --> 00:06:09,840
build process within your deployment

186
00:06:09,840 --> 00:06:11,820
process and and how you understand that

187
00:06:11,820 --> 00:06:14,400
within your environment generally with

188
00:06:14,400 --> 00:06:16,080
when you're looking at a CPE the big

189
00:06:16,080 --> 00:06:17,400
things you're kind of asking yourself

190
00:06:17,400 --> 00:06:19,380
are what's the vendor what's the product

191
00:06:19,380 --> 00:06:20,820
what's the version and what's the

192
00:06:20,820 --> 00:06:23,460
language and all parts of those are very

193
00:06:23,460 --> 00:06:24,660
important and there's obviously other

194
00:06:24,660 --> 00:06:26,340
things that are important for if a

195
00:06:26,340 --> 00:06:27,780
particular vulnerability impacts a piece

196
00:06:27,780 --> 00:06:29,460
of Target Hardware you have or various

197
00:06:29,460 --> 00:06:31,740
other other things but those four things

198
00:06:31,740 --> 00:06:34,199
are really the the big ones to hit and

199
00:06:34,199 --> 00:06:35,520
you don't always get this information

200
00:06:35,520 --> 00:06:37,680
from every packaging ecosystem within

201
00:06:37,680 --> 00:06:39,900
the container world within like say an

202
00:06:39,900 --> 00:06:41,880
Ubuntu system a Debian package system

203
00:06:41,880 --> 00:06:43,560
you'll get a lot of this stuff you may

204
00:06:43,560 --> 00:06:45,120
even get even more like the maintainer

205
00:06:45,120 --> 00:06:48,479
of a given project but within say a c

206
00:06:48,479 --> 00:06:50,160
language thing which I'll show later you

207
00:06:50,160 --> 00:06:52,800
might be missing say the vendor entirely

208
00:06:52,800 --> 00:06:54,419
and so you have to kind of guess at

209
00:06:54,419 --> 00:06:55,620
those things so the product may not

210
00:06:55,620 --> 00:06:57,720
match what the CPE database has and so

211
00:06:57,720 --> 00:06:59,220
you have to find ways to to translate

212
00:06:59,220 --> 00:07:01,139
that or find ways around that within

213
00:07:01,139 --> 00:07:03,120
within the automation

214
00:07:03,120 --> 00:07:04,199
the other thing you have to think about

215
00:07:04,199 --> 00:07:06,240
is how is this analysis actually

216
00:07:06,240 --> 00:07:07,680
happening and when and where within the

217
00:07:07,680 --> 00:07:09,900
build process is it happening are these

218
00:07:09,900 --> 00:07:12,180
dependencies that were were s-bombing

219
00:07:12,180 --> 00:07:13,259
we're trying to find we're trying to

220
00:07:13,259 --> 00:07:15,000
attest are they actually there on the

221
00:07:15,000 --> 00:07:17,639
system or are they potential theoretical

222
00:07:17,639 --> 00:07:19,319
ones that could be downloaded from say

223
00:07:19,319 --> 00:07:22,979
Amir so a package Json file for say a

224
00:07:22,979 --> 00:07:25,139
node project it describes a whole bunch

225
00:07:25,139 --> 00:07:28,199
of dependencies however none of those

226
00:07:28,199 --> 00:07:29,400
unless they're in your node modules

227
00:07:29,400 --> 00:07:31,080
folder are actually on your system until

228
00:07:31,080 --> 00:07:34,860
you run npm install so if you say had

229
00:07:34,860 --> 00:07:36,300
some optional dependencies in their Dev

230
00:07:36,300 --> 00:07:38,280
dependencies those you may not

231
00:07:38,280 --> 00:07:40,080
necessarily care about in the security

232
00:07:40,080 --> 00:07:41,340
context of your production system

233
00:07:41,340 --> 00:07:43,979
because they won't be there when you

234
00:07:43,979 --> 00:07:46,020
actually go to production so you have to

235
00:07:46,020 --> 00:07:47,160
think about the context as to where

236
00:07:47,160 --> 00:07:48,599
dependencies are used and how you're

237
00:07:48,599 --> 00:07:50,460
pulling them in the other thing

238
00:07:50,460 --> 00:07:51,960
especially for SpaceX given how much

239
00:07:51,960 --> 00:07:53,580
custom code they have is is this package

240
00:07:53,580 --> 00:07:55,440
something publicly available or is it

241
00:07:55,440 --> 00:07:58,380
private to the Enterprise so do can I go

242
00:07:58,380 --> 00:08:01,319
out onto npm or the the Pi Pi or

243
00:08:01,319 --> 00:08:02,759
whatever and figure out what this

244
00:08:02,759 --> 00:08:04,020
package is is and maybe look up

245
00:08:04,020 --> 00:08:06,240
vulnerabilities in a public way or do I

246
00:08:06,240 --> 00:08:08,039
have to dig deeper and potentially say

247
00:08:08,039 --> 00:08:10,319
okay so this is a private package what

248
00:08:10,319 --> 00:08:12,000
are its dependencies so that I can

249
00:08:12,000 --> 00:08:13,500
continue to keep going Upstream through

250
00:08:13,500 --> 00:08:15,539
that dependency tree and potentially

251
00:08:15,539 --> 00:08:17,819
find more information about it this was

252
00:08:17,819 --> 00:08:19,440
a big concern for like the air gap

253
00:08:19,440 --> 00:08:20,759
deployments that we were talking about

254
00:08:20,759 --> 00:08:23,280
right so those Depo those dependencies

255
00:08:23,280 --> 00:08:25,199
may not be available in the region

256
00:08:25,199 --> 00:08:26,699
you're trying to deploy to

257
00:08:26,699 --> 00:08:28,440
um so if you you know deploy it and

258
00:08:28,440 --> 00:08:30,180
don't check that like it's not really

259
00:08:30,180 --> 00:08:31,020
good

260
00:08:31,020 --> 00:08:32,399
um it's not really

261
00:08:32,399 --> 00:08:34,200
you're not going to action anything so

262
00:08:34,200 --> 00:08:35,279
having that check before you actually

263
00:08:35,279 --> 00:08:38,039
deploy is really important yeah and then

264
00:08:38,039 --> 00:08:39,360
the other thing is is this package

265
00:08:39,360 --> 00:08:40,620
actually used by the application as I

266
00:08:40,620 --> 00:08:41,279
kind of mentioned there could be

267
00:08:41,279 --> 00:08:42,299
optional dependencies or Dev

268
00:08:42,299 --> 00:08:44,640
dependencies that you need to consider

269
00:08:44,640 --> 00:08:46,200
you know am I do actually need to bring

270
00:08:46,200 --> 00:08:47,640
this into production or could I actually

271
00:08:47,640 --> 00:08:49,440
cut it out or you may just have for

272
00:08:49,440 --> 00:08:50,820
example like a fatter container image

273
00:08:50,820 --> 00:08:52,500
and you may just have things in there

274
00:08:52,500 --> 00:08:54,120
that you don't care about and shouldn't

275
00:08:54,120 --> 00:08:55,980
necessarily be there but um but you need

276
00:08:55,980 --> 00:08:57,120
to know that and be able to get that

277
00:08:57,120 --> 00:08:58,860
information back

278
00:08:58,860 --> 00:09:01,080
so in general kind of going through

279
00:09:01,080 --> 00:09:02,279
these things I'll show a little bit of

280
00:09:02,279 --> 00:09:03,180
this

281
00:09:03,180 --> 00:09:04,440
um through a couple different tools

282
00:09:04,440 --> 00:09:06,240
there are kind of three main issues that

283
00:09:06,240 --> 00:09:07,680
I saw across the ecosystem it's

284
00:09:07,680 --> 00:09:09,660
relatively new there have been tools

285
00:09:09,660 --> 00:09:10,860
that have been around for a while OS

286
00:09:10,860 --> 00:09:12,600
dependency check being one of them

287
00:09:12,600 --> 00:09:13,860
um but then there's newer tools like

288
00:09:13,860 --> 00:09:16,080
sift and gripe which I'll also show but

289
00:09:16,080 --> 00:09:17,160
one of the things that kind of comes up

290
00:09:17,160 --> 00:09:19,380
is consistency within package ecosystems

291
00:09:19,380 --> 00:09:22,260
so if you look at a node package it may

292
00:09:22,260 --> 00:09:24,060
identify exactly what that package is

293
00:09:24,060 --> 00:09:26,220
it's loadash whatever version cool I

294
00:09:26,220 --> 00:09:27,660
know what that is but if you look at a

295
00:09:27,660 --> 00:09:29,760
go package it's going to show you all of

296
00:09:29,760 --> 00:09:31,380
our go binary it's going to show all you

297
00:09:31,380 --> 00:09:33,300
all the dependencies of that go binary

298
00:09:33,300 --> 00:09:35,339
and so you'll get this mix of

299
00:09:35,339 --> 00:09:37,200
information that you have to handle as a

300
00:09:37,200 --> 00:09:38,279
security professional as you kind of

301
00:09:38,279 --> 00:09:39,899
look across different Packaging Systems

302
00:09:39,899 --> 00:09:42,300
the other thing is configurability some

303
00:09:42,300 --> 00:09:43,980
of these systems are quite large they

304
00:09:43,980 --> 00:09:45,839
have lots of files and you need to be

305
00:09:45,839 --> 00:09:47,580
able to say I don't care about this

306
00:09:47,580 --> 00:09:49,080
directory because I know that's a data

307
00:09:49,080 --> 00:09:50,580
directory I know that's another kind of

308
00:09:50,580 --> 00:09:53,399
thing within this project and you need

309
00:09:53,399 --> 00:09:54,600
to be able to trim out a lot of

310
00:09:54,600 --> 00:09:56,459
different things because if you scanned

311
00:09:56,459 --> 00:09:58,140
every single file and had sift for

312
00:09:58,140 --> 00:09:59,519
example interrogate every single file it

313
00:09:59,519 --> 00:10:01,620
could take a really long time to do that

314
00:10:01,620 --> 00:10:04,560
so you have to be very careful about how

315
00:10:04,560 --> 00:10:06,779
you actually Implement these tools and

316
00:10:06,779 --> 00:10:08,580
then on the back side is management when

317
00:10:08,580 --> 00:10:10,200
you actually get this information back

318
00:10:10,200 --> 00:10:12,660
when sift outputs an spdx Cyclone DX or

319
00:10:12,660 --> 00:10:15,000
Json file what do you do with it you

320
00:10:15,000 --> 00:10:17,160
need to be able to to know when an

321
00:10:17,160 --> 00:10:18,360
update happens to be able to compare

322
00:10:18,360 --> 00:10:20,399
them be able to understand what's inside

323
00:10:20,399 --> 00:10:22,860
of them and be able to pass them to skas

324
00:10:22,860 --> 00:10:23,940
or other folks who might be not

325
00:10:23,940 --> 00:10:25,440
technical

326
00:10:25,440 --> 00:10:27,120
and so I'm going to show a little bit of

327
00:10:27,120 --> 00:10:28,800
a demo as to kind of how some of this

328
00:10:28,800 --> 00:10:32,339
stuff works and so to start I have this

329
00:10:32,339 --> 00:10:34,920
basically this project it has some node

330
00:10:34,920 --> 00:10:36,660
dependencies inside of it a simple

331
00:10:36,660 --> 00:10:38,160
package Json package log Json and

332
00:10:38,160 --> 00:10:39,720
index.js file it has some python

333
00:10:39,720 --> 00:10:41,640
dependencies in it just an index.pi and

334
00:10:41,640 --> 00:10:43,860
our primers txt file and then it has a

335
00:10:43,860 --> 00:10:46,440
little shell script here and so if I go

336
00:10:46,440 --> 00:10:49,079
into this folder and I kind of just want

337
00:10:49,079 --> 00:10:49,920
to

338
00:10:49,920 --> 00:10:53,040
to see how that works I can run sift

339
00:10:53,040 --> 00:10:57,720
against it so sift packages don't

340
00:10:57,720 --> 00:10:59,399
and then you can see that it indexes

341
00:10:59,399 --> 00:11:00,480
them and it finds a whole bunch of

342
00:11:00,480 --> 00:11:03,060
things and this is great like it's a

343
00:11:03,060 --> 00:11:05,040
great start and if I was just

344
00:11:05,040 --> 00:11:07,560
implementing this for for myself I might

345
00:11:07,560 --> 00:11:08,640
think that this is kind of all that's

346
00:11:08,640 --> 00:11:10,920
there but

347
00:11:10,920 --> 00:11:12,360
um this doesn't actually tell me a whole

348
00:11:12,360 --> 00:11:13,500
lot because what it's doing is it's

349
00:11:13,500 --> 00:11:15,120
looking at that requirements.txt file

350
00:11:15,120 --> 00:11:17,279
numpy pandas and Pi TZ in this case

351
00:11:17,279 --> 00:11:19,740
aren't actually necessarily on disk and

352
00:11:19,740 --> 00:11:21,180
neither are any of the npm packages

353
00:11:21,180 --> 00:11:23,279
because I haven't run npm install the

354
00:11:23,279 --> 00:11:24,600
other thing is I haven't looked at that

355
00:11:24,600 --> 00:11:26,940
actual shell script to see what it does

356
00:11:26,940 --> 00:11:29,640
and what it downloads and so one of the

357
00:11:29,640 --> 00:11:31,140
things that we do at defense unicorns is

358
00:11:31,140 --> 00:11:32,519
we have a tool called zarf that

359
00:11:32,519 --> 00:11:35,160
integrates with sift and wraps it and

360
00:11:35,160 --> 00:11:36,660
because it's an air gap and because zarf

361
00:11:36,660 --> 00:11:38,459
is an air gap delivery tool it forces

362
00:11:38,459 --> 00:11:39,959
you to be declarative about exactly what

363
00:11:39,959 --> 00:11:42,000
you bring into that environment and if I

364
00:11:42,000 --> 00:11:43,920
actually were to look at this shell

365
00:11:43,920 --> 00:11:46,200
script you can see that it is actually

366
00:11:46,200 --> 00:11:47,339
going out and reaching out and

367
00:11:47,339 --> 00:11:49,500
downloading poop cuddle and putting it

368
00:11:49,500 --> 00:11:52,140
on the system to run so if I had

369
00:11:52,140 --> 00:11:53,760
something like this that a developer was

370
00:11:53,760 --> 00:11:55,560
trying to introduce to a system I'm

371
00:11:55,560 --> 00:11:57,180
might not necessarily know that because

372
00:11:57,180 --> 00:11:58,920
unless watching Network traffic or had

373
00:11:58,920 --> 00:12:01,320
some other policy down the line so

374
00:12:01,320 --> 00:12:03,060
knowing that this is a dependency or

375
00:12:03,060 --> 00:12:04,620
being able to pull this out is is is

376
00:12:04,620 --> 00:12:07,200
pretty important and so what zarf does

377
00:12:07,200 --> 00:12:11,160
if I go back I can run a zarf

378
00:12:11,160 --> 00:12:13,200
package create

379
00:12:13,200 --> 00:12:15,779
on this folder it allows us to have a

380
00:12:15,779 --> 00:12:17,399
declarative package that will actually

381
00:12:17,399 --> 00:12:19,380
pull all of these dependencies down

382
00:12:19,380 --> 00:12:21,180
it'll pull all the images down that are

383
00:12:21,180 --> 00:12:22,560
needed for this particular package

384
00:12:22,560 --> 00:12:24,959
because this not only pulls down this

385
00:12:24,959 --> 00:12:28,440
project but it also will upload it to a

386
00:12:28,440 --> 00:12:31,680
registry in the air gap and then it'll

387
00:12:31,680 --> 00:12:33,000
basically

388
00:12:33,000 --> 00:12:34,500
pull everything onto disk and put it

389
00:12:34,500 --> 00:12:36,240
into a tarball that I can use to bring

390
00:12:36,240 --> 00:12:38,820
up to the air gap and so this is a very

391
00:12:38,820 --> 00:12:40,380
useful thing because it basically acts

392
00:12:40,380 --> 00:12:42,540
as a forcing function for me to say

393
00:12:42,540 --> 00:12:45,060
exactly what I wanted to bring bring

394
00:12:45,060 --> 00:12:45,899
over

395
00:12:45,899 --> 00:12:47,760
so it's gotten all of those dependencies

396
00:12:47,760 --> 00:12:49,200
down and now it's pulling image data

397
00:12:49,200 --> 00:12:51,540
metadata for all of the different things

398
00:12:51,540 --> 00:12:52,860
that are inside of there and then it'll

399
00:12:52,860 --> 00:12:54,180
pull all of the images and then start

400
00:12:54,180 --> 00:12:56,899
start writing it

401
00:12:57,959 --> 00:12:59,940
and you can see here it's creating all

402
00:12:59,940 --> 00:13:01,500
the image s-bombs so it's interrogating

403
00:13:01,500 --> 00:13:03,959
all those images with sift

404
00:13:03,959 --> 00:13:07,459
my computer's getting a little warm

405
00:13:08,100 --> 00:13:09,899
and then it does the components and now

406
00:13:09,899 --> 00:13:12,360
it's done so if I want to Simply look at

407
00:13:12,360 --> 00:13:14,820
this thing I can inspect it

408
00:13:14,820 --> 00:13:18,600
and then I can get the s-bombs outside

409
00:13:18,600 --> 00:13:22,040
out of it by doing this

410
00:13:22,860 --> 00:13:25,440
so if I wanted to do that I can see that

411
00:13:25,440 --> 00:13:27,360
that's a package and it tracks it and

412
00:13:27,360 --> 00:13:31,519
now if I go into my folder here

413
00:13:32,279 --> 00:13:33,720
I can see that there's this s-bomb test

414
00:13:33,720 --> 00:13:35,519
folder and so now I have all of the

415
00:13:35,519 --> 00:13:36,899
s-bombs from that package they're inside

416
00:13:36,899 --> 00:13:38,940
that tarball but so I can extract them

417
00:13:38,940 --> 00:13:40,440
anywhere I'm at wherever that tarpal

418
00:13:40,440 --> 00:13:42,360
goes the s-bombs go with it so on the

419
00:13:42,360 --> 00:13:43,500
air gap side I could see all this

420
00:13:43,500 --> 00:13:45,060
information or here obviously I can see

421
00:13:45,060 --> 00:13:47,700
that information but I can see all of

422
00:13:47,700 --> 00:13:49,740
the sift Json files which are useful

423
00:13:49,740 --> 00:13:51,660
because sift also supports conversion of

424
00:13:51,660 --> 00:13:53,339
these to whatever format you want so if

425
00:13:53,339 --> 00:13:54,839
you had another tool you could export

426
00:13:54,839 --> 00:13:57,600
these to Cyclone DX or spdx and then I

427
00:13:57,600 --> 00:13:59,459
also have these HTML files that I can

428
00:13:59,459 --> 00:14:01,560
kind of look at that zarf Builds on on

429
00:14:01,560 --> 00:14:03,540
top so I could say Okay I want to look

430
00:14:03,540 --> 00:14:06,300
at Alpine let me look at this I can kind

431
00:14:06,300 --> 00:14:08,700
of flip through them and see all the

432
00:14:08,700 --> 00:14:10,740
different things going on in this case

433
00:14:10,740 --> 00:14:12,000
you can see them for my little software

434
00:14:12,000 --> 00:14:13,980
project that I have now not only do we

435
00:14:13,980 --> 00:14:15,480
have these npm packages and all this

436
00:14:15,480 --> 00:14:17,399
stuff we also have all the go modules of

437
00:14:17,399 --> 00:14:19,260
Coupe cuddle itself and so we now have

438
00:14:19,260 --> 00:14:21,540
all that information here

439
00:14:21,540 --> 00:14:23,160
um and kind of in one simple interface

440
00:14:23,160 --> 00:14:25,139
that I can I can refer to the other

441
00:14:25,139 --> 00:14:26,820
thing I can do with this tool that we've

442
00:14:26,820 --> 00:14:29,100
built into it is do comparisons which

443
00:14:29,100 --> 00:14:31,139
was something that is really important

444
00:14:31,139 --> 00:14:32,399
when you're trying to update software

445
00:14:32,399 --> 00:14:34,560
especially update it quickly because if

446
00:14:34,560 --> 00:14:35,880
you wanted to get

447
00:14:35,880 --> 00:14:38,459
um and kind of approval for any one of

448
00:14:38,459 --> 00:14:40,620
these modules to go onto your system

449
00:14:40,620 --> 00:14:42,120
it's going to take quite a while and if

450
00:14:42,120 --> 00:14:43,980
you do that for everything all of the

451
00:14:43,980 --> 00:14:46,139
time it's just going to bog you down and

452
00:14:46,139 --> 00:14:47,579
so being able to know exactly what

453
00:14:47,579 --> 00:14:50,459
changed is a very very useful thing so

454
00:14:50,459 --> 00:14:52,320
if I go here and I go to one of the

455
00:14:52,320 --> 00:14:54,000
previous s-bombs that I had ran for

456
00:14:54,000 --> 00:14:56,699
Alpine 316 I can basically pull that

457
00:14:56,699 --> 00:14:58,740
into the old file and then I can go into

458
00:14:58,740 --> 00:15:02,120
the one that I just generated

459
00:15:03,300 --> 00:15:05,040
and then I can run the comparison and I

460
00:15:05,040 --> 00:15:06,480
can see exactly what changed what was

461
00:15:06,480 --> 00:15:08,339
added and what was removed from that one

462
00:15:08,339 --> 00:15:09,660
container image to the next container

463
00:15:09,660 --> 00:15:11,519
image and so now this reduces the

464
00:15:11,519 --> 00:15:12,540
cognitive load on the Security

465
00:15:12,540 --> 00:15:14,399
Professionals as you manage that data

466
00:15:14,399 --> 00:15:15,899
throughout your system and what makes

467
00:15:15,899 --> 00:15:17,220
this a lot you know really helpful is

468
00:15:17,220 --> 00:15:19,680
you take this Delta to the authorizing

469
00:15:19,680 --> 00:15:21,300
official who owns that Network and say

470
00:15:21,300 --> 00:15:22,380
like this is what we want to change

471
00:15:22,380 --> 00:15:24,600
versus like this is the old one and this

472
00:15:24,600 --> 00:15:25,800
is a no one have a message to that

473
00:15:25,800 --> 00:15:26,820
process and have that kind of

474
00:15:26,820 --> 00:15:28,500
relationship that says like cool I'm

475
00:15:28,500 --> 00:15:29,639
looking at these you know 10 or 12

476
00:15:29,639 --> 00:15:33,660
different things go for it right exactly

477
00:15:33,660 --> 00:15:35,100
um so the next thing I'm going to kind

478
00:15:35,100 --> 00:15:36,240
of show is a little bit of when this

479
00:15:36,240 --> 00:15:39,060
starts to break down because sift and

480
00:15:39,060 --> 00:15:40,980
gripe work very very well for the

481
00:15:40,980 --> 00:15:42,899
container image world the node world the

482
00:15:42,899 --> 00:15:45,600
python world the go world but a lot of

483
00:15:45,600 --> 00:15:48,240
this stuff is C C plus plus code and

484
00:15:48,240 --> 00:15:49,800
that starts to get a little bit more

485
00:15:49,800 --> 00:15:51,779
hairy and so I'm going to show a project

486
00:15:51,779 --> 00:15:54,120
called Rigs of rods which is a soft body

487
00:15:54,120 --> 00:15:55,440
physics simulator it's not a satellite

488
00:15:55,440 --> 00:15:57,420
Telemetry thing but you certainly can do

489
00:15:57,420 --> 00:15:58,920
rocket boosters and attach them to

490
00:15:58,920 --> 00:16:00,199
things and see what happens

491
00:16:00,199 --> 00:16:03,180
but basically the important part about

492
00:16:03,180 --> 00:16:04,800
that particular project is that it uses

493
00:16:04,800 --> 00:16:07,139
both Conan and cmake to build so those

494
00:16:07,139 --> 00:16:08,339
are two different ways to pull in

495
00:16:08,339 --> 00:16:10,980
dependencies for C projects and Conan

496
00:16:10,980 --> 00:16:13,380
run by J frog basically allows you to

497
00:16:13,380 --> 00:16:16,160
pull dependencies down sort of like npm

498
00:16:16,160 --> 00:16:18,600
whereas in this particular case for Rigs

499
00:16:18,600 --> 00:16:20,100
of rods they use a cmake meta project

500
00:16:20,100 --> 00:16:22,920
that will pull certain things in

501
00:16:22,920 --> 00:16:26,279
so if I go into here and then I'm

502
00:16:26,279 --> 00:16:28,680
actually sorry I can go this way and I'm

503
00:16:28,680 --> 00:16:29,699
guessing what he just said means

504
00:16:29,699 --> 00:16:31,260
something to the more technical people

505
00:16:31,260 --> 00:16:33,000
because he explains me five times I just

506
00:16:33,000 --> 00:16:34,860
shake my head yes because he just it

507
00:16:34,860 --> 00:16:37,139
doesn't work

508
00:16:37,139 --> 00:16:40,199
so if I catalog uh it directly with sift

509
00:16:40,199 --> 00:16:42,000
you can see that there's all this Conan

510
00:16:42,000 --> 00:16:43,680
information that it pulls back and this

511
00:16:43,680 --> 00:16:46,019
is all of the data that it is found

512
00:16:46,019 --> 00:16:48,380
within the Conan lock file on the system

513
00:16:48,380 --> 00:16:51,000
even this though isn't entirely perfect

514
00:16:51,000 --> 00:16:53,100
because if I actually go look at that

515
00:16:53,100 --> 00:16:55,199
Conan lock file

516
00:16:55,199 --> 00:16:56,820
um you'll see that it has information

517
00:16:56,820 --> 00:16:58,980
like it is okay there's zlib okay

518
00:16:58,980 --> 00:17:02,579
there's lib PNG there's bzip two

519
00:17:02,579 --> 00:17:04,679
um but it is missing in this case vendor

520
00:17:04,679 --> 00:17:06,720
information so if I were to create a CPE

521
00:17:06,720 --> 00:17:09,240
I would have to go to the nvd database

522
00:17:09,240 --> 00:17:11,160
and I would have to look that up

523
00:17:11,160 --> 00:17:13,559
um and so in this particular case if I

524
00:17:13,559 --> 00:17:16,459
go back to search here

525
00:17:17,640 --> 00:17:19,439
we'll see if this loads if this takes

526
00:17:19,439 --> 00:17:21,660
too long I'll just walk through this

527
00:17:21,660 --> 00:17:24,419
but if I search through this for broadly

528
00:17:24,419 --> 00:17:26,220
for example whoops that's not how you

529
00:17:26,220 --> 00:17:28,760
spell Bradley

530
00:17:32,040 --> 00:17:33,780
but you can see it's pretty brittle on

531
00:17:33,780 --> 00:17:36,059
on exact precise naming of things and

532
00:17:36,059 --> 00:17:37,740
that's something that I'm going to show

533
00:17:37,740 --> 00:17:39,780
as well because

534
00:17:39,780 --> 00:17:43,260
over here you can see that it found lib

535
00:17:43,260 --> 00:17:45,840
Alpha which is a sound uh basically you

536
00:17:45,840 --> 00:17:47,780
know system for Linux

537
00:17:47,780 --> 00:17:51,059
but in this case in this case I found

538
00:17:51,059 --> 00:17:52,620
Google broadly but in this other case

539
00:17:52,620 --> 00:17:54,059
over here it's actually not called

540
00:17:54,059 --> 00:17:55,919
libalsa it's called alsa and it's under

541
00:17:55,919 --> 00:17:57,539
the Alpha Project and so if you tried to

542
00:17:57,539 --> 00:18:00,059
search the nvd for lib Elsa you would

543
00:18:00,059 --> 00:18:01,740
have found nothing and you'd think okay

544
00:18:01,740 --> 00:18:04,080
I'm secure but there's actually no CPE

545
00:18:04,080 --> 00:18:06,059
under that so there's a still a little

546
00:18:06,059 --> 00:18:06,900
bit of stuff you have to work around

547
00:18:06,900 --> 00:18:08,460
with Conan

548
00:18:08,460 --> 00:18:11,100
but if you were to point this at The

549
00:18:11,100 --> 00:18:15,320
Meta project for for this

550
00:18:15,720 --> 00:18:18,799
you basically

551
00:18:19,620 --> 00:18:22,219
whoops

552
00:18:22,380 --> 00:18:25,080
would find nothing because it's a cmake

553
00:18:25,080 --> 00:18:26,640
project in this case and this part of

554
00:18:26,640 --> 00:18:29,039
the of the project and you except

555
00:18:29,039 --> 00:18:30,600
basically just gives up and can't find

556
00:18:30,600 --> 00:18:32,100
it which is fine because that's not

557
00:18:32,100 --> 00:18:34,320
something that it can do but if you were

558
00:18:34,320 --> 00:18:36,240
to use a different tool in this case an

559
00:18:36,240 --> 00:18:38,160
older tool that has been around for

560
00:18:38,160 --> 00:18:40,740
quite a bit longer

561
00:18:40,740 --> 00:18:42,360
um dependency check which is made by the

562
00:18:42,360 --> 00:18:43,980
OAS Foundation which another talk is

563
00:18:43,980 --> 00:18:45,600
actually talking about oasp and all the

564
00:18:45,600 --> 00:18:46,799
things that they do I definitely

565
00:18:46,799 --> 00:18:48,900
recommend checking them out but if you

566
00:18:48,900 --> 00:18:52,100
enable their experimental flag

567
00:18:53,880 --> 00:18:56,100
you can actually get more information

568
00:18:56,100 --> 00:18:57,720
because it'll actually go through and

569
00:18:57,720 --> 00:18:59,220
look at the cmake lists and the dot

570
00:18:59,220 --> 00:19:01,320
cmake files and it'll try to find a

571
00:19:01,320 --> 00:19:03,000
whole bunch of stuff

572
00:19:03,000 --> 00:19:05,580
and so if I go back to

573
00:19:05,580 --> 00:19:08,360
back to that

574
00:19:08,400 --> 00:19:10,260
you can see this is the report that it

575
00:19:10,260 --> 00:19:11,039
generates and it's a little bit

576
00:19:11,039 --> 00:19:12,480
different obviously this isn't Json it's

577
00:19:12,480 --> 00:19:14,580
hard to like deal with this later on but

578
00:19:14,580 --> 00:19:16,679
you can see how much it's kind of

579
00:19:16,679 --> 00:19:18,600
guessing simply from the fact that some

580
00:19:18,600 --> 00:19:20,280
of the names are really weird like this

581
00:19:20,280 --> 00:19:23,280
is called cmake import file it found a

582
00:19:23,280 --> 00:19:26,820
an actual thing fmt is an actual CPE

583
00:19:26,820 --> 00:19:29,820
within there but you can see the data is

584
00:19:29,820 --> 00:19:30,919
very

585
00:19:30,919 --> 00:19:32,760
experimental and that's because I turned

586
00:19:32,760 --> 00:19:34,080
on that flag and it only supports this

587
00:19:34,080 --> 00:19:36,240
experimentally but it kind of shows that

588
00:19:36,240 --> 00:19:38,520
you you kind of get whatever the

589
00:19:38,520 --> 00:19:40,080
packaging ecosystem or build ecosystem

590
00:19:40,080 --> 00:19:42,860
that you run a system within gives you

591
00:19:42,860 --> 00:19:45,360
so in this case I would have to sort of

592
00:19:45,360 --> 00:19:46,919
figure this out as a security

593
00:19:46,919 --> 00:19:48,720
professional and say okay I see this

594
00:19:48,720 --> 00:19:50,400
vulnerability ID how's that happening

595
00:19:50,400 --> 00:19:52,500
and if you actually looked at this you'd

596
00:19:52,500 --> 00:19:54,840
see that the cmake import file is coming

597
00:19:54,840 --> 00:19:58,980
from this fmt target cmake over here and

598
00:19:58,980 --> 00:20:01,799
it's kind of not obvious why that pulled

599
00:20:01,799 --> 00:20:03,539
up the real reason is that there's a

600
00:20:03,539 --> 00:20:05,460
regex and it's kind of matching on this

601
00:20:05,460 --> 00:20:07,080
and then it takes the file name and then

602
00:20:07,080 --> 00:20:08,700
it searches the nvd and then it finds

603
00:20:08,700 --> 00:20:10,620
fmt and then it Returns the CPU but

604
00:20:10,620 --> 00:20:11,880
what's that mean

605
00:20:11,880 --> 00:20:13,039
um

606
00:20:13,039 --> 00:20:15,780
all of that stuff though is just kind of

607
00:20:15,780 --> 00:20:17,580
implementation details where it's kind

608
00:20:17,580 --> 00:20:19,320
of seancing its way through on these

609
00:20:19,320 --> 00:20:21,000
things and so it's very important as you

610
00:20:21,000 --> 00:20:22,140
especially when you're building custom

611
00:20:22,140 --> 00:20:24,419
software or lots of software that may be

612
00:20:24,419 --> 00:20:25,620
interconnected within a larger

613
00:20:25,620 --> 00:20:27,120
Enterprise that you think about your

614
00:20:27,120 --> 00:20:28,919
build system and how it all kind of

615
00:20:28,919 --> 00:20:31,440
comes together in the end

616
00:20:31,440 --> 00:20:34,860
so yeah that was pretty much it

617
00:20:34,860 --> 00:20:38,059
um are there any questions

618
00:20:40,140 --> 00:20:42,419
it's a nice rocket Landing

619
00:20:42,419 --> 00:20:45,299
any questions or

620
00:20:45,299 --> 00:20:48,440
nobody ready for happy hour

621
00:20:50,880 --> 00:20:52,020
cool

622
00:20:52,020 --> 00:20:53,200
all right thanks

623
00:20:53,200 --> 00:20:57,940
[Applause]

