1
00:00:00,000 --> 00:00:02,419
we'll start off going through

2
00:00:02,419 --> 00:00:06,000
the existing lightweight threat model we

3
00:00:06,000 --> 00:00:08,160
did for flux

4
00:00:08,160 --> 00:00:11,160
flux is a git Ops tool

5
00:00:11,160 --> 00:00:13,160
see if I can multitask

6
00:00:13,160 --> 00:00:15,599
it's the original get Ops tool so we're

7
00:00:15,599 --> 00:00:17,720
talking about taking static

8
00:00:17,720 --> 00:00:20,580
configuration declarative kubernetes

9
00:00:20,580 --> 00:00:23,400
yaml manifests

10
00:00:23,400 --> 00:00:25,920
putting them into git whoop that's a

11
00:00:25,920 --> 00:00:28,220
good start

12
00:00:30,000 --> 00:00:33,260
to my calendar for today

13
00:00:35,640 --> 00:00:39,239
uh yes get ups taking a declarative

14
00:00:39,239 --> 00:00:42,360
configuration pushing it into git and

15
00:00:42,360 --> 00:00:43,980
having the deployment tool none of

16
00:00:43,980 --> 00:00:45,840
that's relevant

17
00:00:45,840 --> 00:00:46,650
the

18
00:00:46,650 --> 00:00:47,879
[Music]

19
00:00:47,879 --> 00:00:49,739
and having a deployment tool reconcile

20
00:00:49,739 --> 00:00:51,420
cluster States

21
00:00:51,420 --> 00:00:54,899
with the state of gits so that at a very

22
00:00:54,899 --> 00:00:56,399
high level is

23
00:00:56,399 --> 00:00:59,100
what git Ops is

24
00:00:59,100 --> 00:01:01,980
flux is a tool from weaveworks that was

25
00:01:01,980 --> 00:01:05,400
the first tool to educate the market if

26
00:01:05,400 --> 00:01:06,720
you like

27
00:01:06,720 --> 00:01:08,700
the first instance of a tool that does

28
00:01:08,700 --> 00:01:10,740
this kind of thing

29
00:01:10,740 --> 00:01:13,640
and

30
00:01:14,340 --> 00:01:18,299
Marco would you ping me the uh the link

31
00:01:18,299 --> 00:01:20,159
thank you very much you're way ahead of

32
00:01:20,159 --> 00:01:22,700
me as usual

33
00:01:27,180 --> 00:01:29,520
and we will whiz through some

34
00:01:29,520 --> 00:01:33,060
introductory slides to talk about

35
00:01:33,060 --> 00:01:37,500
how this all works so the goal with the

36
00:01:37,500 --> 00:01:39,720
lightweight threat modeling in general

37
00:01:39,720 --> 00:01:42,119
is to facilitate the advancement of

38
00:01:42,119 --> 00:01:44,759
software through the cncf

39
00:01:44,759 --> 00:01:47,460
um through the the graduation process in

40
00:01:47,460 --> 00:01:48,299
particular

41
00:01:48,299 --> 00:01:50,700
so when a project is submitted to the

42
00:01:50,700 --> 00:01:53,399
cncf at the beginning of the process if

43
00:01:53,399 --> 00:01:56,280
the project has security side effects so

44
00:01:56,280 --> 00:01:58,439
it has cluster admin credentials or it's

45
00:01:58,439 --> 00:02:00,540
used to enforce something with a guard

46
00:02:00,540 --> 00:02:03,540
rail or it's an observability tool again

47
00:02:03,540 --> 00:02:06,540
with heightened privileges

48
00:02:06,540 --> 00:02:09,179
tax Securities asked to have a look at

49
00:02:09,179 --> 00:02:13,020
it to model what could go wrong and it

50
00:02:13,020 --> 00:02:16,020
is a wide not necessarily deep look to

51
00:02:16,020 --> 00:02:17,879
make sure that there are no foot guns

52
00:02:17,879 --> 00:02:19,860
and that people have all their limbs at

53
00:02:19,860 --> 00:02:22,020
the end of the deployment process

54
00:02:22,020 --> 00:02:24,300
and in order to achieve that

55
00:02:24,300 --> 00:02:26,940
tag security has a detailed

56
00:02:26,940 --> 00:02:29,580
self-assessment

57
00:02:29,580 --> 00:02:31,920
this self-assessment goes to the

58
00:02:31,920 --> 00:02:33,660
maintainers and it asks them a specific

59
00:02:33,660 --> 00:02:35,400
set of questions

60
00:02:35,400 --> 00:02:37,739
how do people use this what do you think

61
00:02:37,739 --> 00:02:38,940
could go wrong

62
00:02:38,940 --> 00:02:41,879
and then we collaborate with people in

63
00:02:41,879 --> 00:02:45,120
tax security working groups and people

64
00:02:45,120 --> 00:02:48,000
from the project to build out this this

65
00:02:48,000 --> 00:02:50,160
self-assessment which then goes back to

66
00:02:50,160 --> 00:02:52,560
the TOC and is used to help determine

67
00:02:52,560 --> 00:02:54,599
the maturity of the project sometimes

68
00:02:54,599 --> 00:02:56,220
the project can't graduate from one

69
00:02:56,220 --> 00:02:58,379
stage to the next without making

70
00:02:58,379 --> 00:03:00,840
remediations as based upon the

71
00:03:00,840 --> 00:03:01,980
recommendations that come through from

72
00:03:01,980 --> 00:03:03,480
these things

73
00:03:03,480 --> 00:03:06,000
this is quite a lengthy process

74
00:03:06,000 --> 00:03:09,060
the Assurance required

75
00:03:09,060 --> 00:03:11,340
to make sure that these projects are

76
00:03:11,340 --> 00:03:14,519
doing what's described on the tin and

77
00:03:14,519 --> 00:03:17,640
nothing uh egregious

78
00:03:17,640 --> 00:03:19,620
because we are a fully volunteer-led

79
00:03:19,620 --> 00:03:22,379
organization can take some time

80
00:03:22,379 --> 00:03:24,000
so

81
00:03:24,000 --> 00:03:27,480
the goal of this new lightweight threat

82
00:03:27,480 --> 00:03:30,360
modeling process

83
00:03:30,360 --> 00:03:32,879
this looks a little bit like this

84
00:03:32,879 --> 00:03:35,159
is

85
00:03:35,159 --> 00:03:37,440
to reduce the latency for these projects

86
00:03:37,440 --> 00:03:39,180
we're still doing the self-assessments

87
00:03:39,180 --> 00:03:40,379
because they're incredibly valuable

88
00:03:40,379 --> 00:03:43,500
they're deep and and they give us a

89
00:03:43,500 --> 00:03:45,420
enough of an understanding

90
00:03:45,420 --> 00:03:47,220
to to actually advance and recommend

91
00:03:47,220 --> 00:03:48,720
these projects

92
00:03:48,720 --> 00:03:51,480
the lightweight process is to quickly

93
00:03:51,480 --> 00:03:54,360
and efficiently get feedback to the pro

94
00:03:54,360 --> 00:03:55,620
the project

95
00:03:55,620 --> 00:03:57,900
and help to guide from a high level

96
00:03:57,900 --> 00:03:59,940
again looking

97
00:03:59,940 --> 00:04:02,640
for for breadth and not depth

98
00:04:02,640 --> 00:04:05,099
and ideally to do this within a single

99
00:04:05,099 --> 00:04:06,780
hour-long session

100
00:04:06,780 --> 00:04:09,120
uh those are lofty and potentially

101
00:04:09,120 --> 00:04:11,879
unachievable goals but it is a moonshot

102
00:04:11,879 --> 00:04:15,060
okay so this began in tag security issue

103
00:04:15,060 --> 00:04:16,918
903

104
00:04:16,918 --> 00:04:19,019
soon

105
00:04:19,019 --> 00:04:21,478
there we go let's uh let's pop that as

106
00:04:21,478 --> 00:04:23,659
well

107
00:04:29,100 --> 00:04:31,759
hmm

108
00:04:41,100 --> 00:04:42,660
and

109
00:04:42,660 --> 00:04:45,900
the process is based on

110
00:04:45,900 --> 00:04:48,419
uh the the Mozilla rapid risk assessment

111
00:04:48,419 --> 00:04:50,580
framework

112
00:04:50,580 --> 00:04:52,560
we had some working sessions where

113
00:04:52,560 --> 00:04:54,419
collaborators from TAG security got

114
00:04:54,419 --> 00:04:57,000
together and collaborated

115
00:04:57,000 --> 00:04:59,340
balancing the different types of threat

116
00:04:59,340 --> 00:05:00,300
modeling

117
00:05:00,300 --> 00:05:02,220
approaches

118
00:05:02,220 --> 00:05:05,100
the way control plane do this

119
00:05:05,100 --> 00:05:07,320
and in fact just to just sort of the

120
00:05:07,320 --> 00:05:08,639
issue details a lot of people

121
00:05:08,639 --> 00:05:10,020
contributing some really useful

122
00:05:10,020 --> 00:05:14,100
different perspectives at light speed

123
00:05:14,100 --> 00:05:16,800
so

124
00:05:16,800 --> 00:05:19,860
we democratized this we wanted an

125
00:05:19,860 --> 00:05:22,880
approach that would be

126
00:05:23,039 --> 00:05:24,240
an approach that would attract

127
00:05:24,240 --> 00:05:25,740
contributors so we didn't want to do

128
00:05:25,740 --> 00:05:27,720
something esoteric and unusual that

129
00:05:27,720 --> 00:05:29,039
nobody would then want to actually be

130
00:05:29,039 --> 00:05:31,580
involved with

131
00:05:31,860 --> 00:05:32,940
and we looked at various different

132
00:05:32,940 --> 00:05:35,759
approaches so we have for example

133
00:05:35,759 --> 00:05:37,440
uh the stride

134
00:05:37,440 --> 00:05:39,960
approach which is uh comes out of

135
00:05:39,960 --> 00:05:42,360
Microsoft it's atom shostaks

136
00:05:42,360 --> 00:05:43,139
um

137
00:05:43,139 --> 00:05:45,979
typical approach we also looked at this

138
00:05:45,979 --> 00:05:49,020
Mozilla rapid risk assessment there are

139
00:05:49,020 --> 00:05:51,960
other permutations there's a pastor

140
00:05:51,960 --> 00:05:53,880
way of threat modeling

141
00:05:53,880 --> 00:05:55,740
ultimately all of these things have the

142
00:05:55,740 --> 00:05:57,600
same goal which is

143
00:05:57,600 --> 00:05:59,940
understand the system ask a set of

144
00:05:59,940 --> 00:06:01,500
pertinent questions related to its

145
00:06:01,500 --> 00:06:03,479
security identify a path through

146
00:06:03,479 --> 00:06:05,280
mediation and then do the whole thing

147
00:06:05,280 --> 00:06:07,919
again add infant item ad nauseum in some

148
00:06:07,919 --> 00:06:10,139
cases and identify when we want to

149
00:06:10,139 --> 00:06:12,960
repeat that process is it to do with

150
00:06:12,960 --> 00:06:15,180
a graduation event in this case is it to

151
00:06:15,180 --> 00:06:17,039
do with a new feature release is it to

152
00:06:17,039 --> 00:06:19,320
do with a dependency tree shake up what

153
00:06:19,320 --> 00:06:21,180
whatever it is it can orbit it could be

154
00:06:21,180 --> 00:06:23,880
arbitrarily decided

155
00:06:23,880 --> 00:06:26,699
so that's the 50 000 foot View

156
00:06:26,699 --> 00:06:31,020
lightweight framework sandbox incubation

157
00:06:31,020 --> 00:06:32,220
we looked at all the different

158
00:06:32,220 --> 00:06:34,139
approaches that people suggested on the

159
00:06:34,139 --> 00:06:37,380
issue and trail of bits who are a

160
00:06:37,380 --> 00:06:39,840
security company out of New York who did

161
00:06:39,840 --> 00:06:43,020
the first kubernetes code level Security

162
00:06:43,020 --> 00:06:46,020
review put together this um this

163
00:06:46,020 --> 00:06:47,759
questionnaire format based on the

164
00:06:47,759 --> 00:06:50,100
Mozilla rapid risk assessment

165
00:06:50,100 --> 00:06:52,680
it didn't entirely fit our requirements

166
00:06:52,680 --> 00:06:55,259
so we modulated it very slightly but

167
00:06:55,259 --> 00:06:57,360
broadly it was excellent and it was

168
00:06:57,360 --> 00:07:00,919
fantastic to build on

169
00:07:01,020 --> 00:07:02,520
um what is the rapid risk assessment

170
00:07:02,520 --> 00:07:05,819
framework it comes out of Mozilla and

171
00:07:05,819 --> 00:07:08,400
it's used to build Firefox so

172
00:07:08,400 --> 00:07:09,660
specifically

173
00:07:09,660 --> 00:07:11,639
I'm a rust developer doing my thing in

174
00:07:11,639 --> 00:07:14,220
Firefox and I want to ship a new feature

175
00:07:14,220 --> 00:07:16,800
I fill out a rapid risk assessment and I

176
00:07:16,800 --> 00:07:19,199
go to security and I say

177
00:07:19,199 --> 00:07:21,599
this is what I want to do can you help

178
00:07:21,599 --> 00:07:24,180
me threat model it so for example let's

179
00:07:24,180 --> 00:07:25,979
say we're going to ship

180
00:07:25,979 --> 00:07:28,440
secure tabs so Mozilla ships sort of

181
00:07:28,440 --> 00:07:31,020
cookie isolation for tabs however a long

182
00:07:31,020 --> 00:07:32,940
time ago I guess now

183
00:07:32,940 --> 00:07:35,639
there are privacy concerns there are

184
00:07:35,639 --> 00:07:37,500
potential information leakage concerns

185
00:07:37,500 --> 00:07:39,599
there are functionality concerns maybe

186
00:07:39,599 --> 00:07:41,039
actually we just block access to

187
00:07:41,039 --> 00:07:42,900
everything and while we can't be tracked

188
00:07:42,900 --> 00:07:44,819
we also can't authenticate anywhere or

189
00:07:44,819 --> 00:07:46,319
persist the session

190
00:07:46,319 --> 00:07:49,080
and so the assessment asks what's the

191
00:07:49,080 --> 00:07:53,039
feature what are the side effects and

192
00:07:53,039 --> 00:07:54,900
ultimately democratizes the process

193
00:07:54,900 --> 00:07:57,539
again of understanding what what could

194
00:07:57,539 --> 00:08:00,599
go wrong and how will we fix it

195
00:08:00,599 --> 00:08:02,400
the risk there of course that that is

196
00:08:02,400 --> 00:08:05,759
specific to feature delivery in a very

197
00:08:05,759 --> 00:08:07,380
specific context which is a browser

198
00:08:07,380 --> 00:08:09,240
which is

199
00:08:09,240 --> 00:08:12,539
complexity in itself

200
00:08:12,539 --> 00:08:14,759
so this is the foundation that we've

201
00:08:14,759 --> 00:08:17,400
built this on again the modulations and

202
00:08:17,400 --> 00:08:20,520
changes are to focus on a component of a

203
00:08:20,520 --> 00:08:22,620
cloud native system rather than a

204
00:08:22,620 --> 00:08:25,139
browser that again that there's the 50

205
00:08:25,139 --> 00:08:27,720
000 foot view in Toto

206
00:08:27,720 --> 00:08:30,060
and

207
00:08:30,060 --> 00:08:31,740
there we go that's the slide I perhaps

208
00:08:31,740 --> 00:08:33,240
should have advanced to before waffling

209
00:08:33,240 --> 00:08:35,520
on it

210
00:08:35,520 --> 00:08:38,039
the rapidity is such that we aim to do

211
00:08:38,039 --> 00:08:40,080
it very quickly

212
00:08:40,080 --> 00:08:41,880
keeping things at a high level gives us

213
00:08:41,880 --> 00:08:43,799
enough of a macro View

214
00:08:43,799 --> 00:08:46,860
to fix the foot guns without for example

215
00:08:46,860 --> 00:08:48,779
performing a code review so there is no

216
00:08:48,779 --> 00:08:51,959
code review in this in this process

217
00:08:51,959 --> 00:08:56,100
uh concise readable easy to update

218
00:08:56,100 --> 00:08:57,899
as software is constantly under

219
00:08:57,899 --> 00:08:59,700
development so should the threat model

220
00:08:59,700 --> 00:09:02,480
be updated in tandem with it

221
00:09:02,480 --> 00:09:05,760
this risk impact and data dictionary is

222
00:09:05,760 --> 00:09:07,440
helpful to a new maintainer to come and

223
00:09:07,440 --> 00:09:09,300
say oh it's been threat modeled how do I

224
00:09:09,300 --> 00:09:10,380
understand

225
00:09:10,380 --> 00:09:12,240
how things are classified and what the

226
00:09:12,240 --> 00:09:13,680
sensitivities are

227
00:09:13,680 --> 00:09:16,380
and yes then it finishes with the

228
00:09:16,380 --> 00:09:19,860
recommendation so I think that means

229
00:09:19,860 --> 00:09:21,480
we're ready to have a look at what we

230
00:09:21,480 --> 00:09:22,680
did

231
00:09:22,680 --> 00:09:25,200
we started

232
00:09:25,200 --> 00:09:27,240
with flux

233
00:09:27,240 --> 00:09:29,220
as I say I can't actually read the

234
00:09:29,220 --> 00:09:30,660
screen from here

235
00:09:30,660 --> 00:09:32,760
um I think it's probably that link that

236
00:09:32,760 --> 00:09:35,779
I've misplaceded in

237
00:09:36,240 --> 00:09:39,360
so flux is a deployment tool for

238
00:09:39,360 --> 00:09:43,440
kubernetes this concept of git Ops is

239
00:09:43,440 --> 00:09:47,640
take a static state to find in

240
00:09:47,640 --> 00:09:50,279
not the right one apologies a static

241
00:09:50,279 --> 00:09:51,600
state

242
00:09:51,600 --> 00:09:55,100
find in

243
00:09:55,920 --> 00:09:57,959
in git

244
00:09:57,959 --> 00:09:59,760
use something with cluster admin

245
00:09:59,760 --> 00:10:02,279
credentials or some highly privileged

246
00:10:02,279 --> 00:10:04,320
deployment credentials

247
00:10:04,320 --> 00:10:05,580
I'm really struggling to click the right

248
00:10:05,580 --> 00:10:08,040
link I'm so sorry uh

249
00:10:08,040 --> 00:10:11,899
that is the one that we want

250
00:10:14,760 --> 00:10:16,440
I'm sorry which

251
00:10:16,440 --> 00:10:18,600
yeah

252
00:10:18,600 --> 00:10:21,620
yeah there's a link there

253
00:10:21,839 --> 00:10:22,860
is to know that

254
00:10:22,860 --> 00:10:26,120
it's just struggling to see it

255
00:10:37,080 --> 00:10:38,220
this guy

256
00:10:38,220 --> 00:10:40,860
oh okay do you know I'm just gonna move

257
00:10:40,860 --> 00:10:43,140
it to the screen there we go far less

258
00:10:43,140 --> 00:10:45,000
than that

259
00:10:45,000 --> 00:10:47,940
okay thanks for your help Marco much

260
00:10:47,940 --> 00:10:51,800
appreciated all right so

261
00:10:52,140 --> 00:10:53,820
just to refocus

262
00:10:53,820 --> 00:10:55,320
flux

263
00:10:55,320 --> 00:10:58,740
allows us to deploy stuff into a cluster

264
00:10:58,740 --> 00:11:00,839
in an automated fashion so instead of a

265
00:11:00,839 --> 00:11:02,040
developer having cluster admin

266
00:11:02,040 --> 00:11:03,180
credentials and doing a cube control

267
00:11:03,180 --> 00:11:06,180
deploy instead we've moved to a puller

268
00:11:06,180 --> 00:11:08,160
model it's an inversion of control it

269
00:11:08,160 --> 00:11:10,200
takes credentials out of the build

270
00:11:10,200 --> 00:11:12,600
server and instead gives them

271
00:11:12,600 --> 00:11:14,459
get pull credentials to something inside

272
00:11:14,459 --> 00:11:16,380
a cluster so the security boundary

273
00:11:16,380 --> 00:11:18,480
ceases to be right to access to

274
00:11:18,480 --> 00:11:20,279
production instead it's right access to

275
00:11:20,279 --> 00:11:23,060
a git repo then we use Branch protection

276
00:11:23,060 --> 00:11:25,620
I wrote a white paper called hardening

277
00:11:25,620 --> 00:11:28,140
gits for gitups for weave a number of

278
00:11:28,140 --> 00:11:31,440
years ago and the model is incredible I

279
00:11:31,440 --> 00:11:35,720
really appreciate it a lot so

280
00:11:35,880 --> 00:11:38,240
flux was the first project that we chose

281
00:11:38,240 --> 00:11:41,279
to assess in this way

282
00:11:41,279 --> 00:11:43,680
and I'll just pull this over here once

283
00:11:43,680 --> 00:11:45,000
more

284
00:11:45,000 --> 00:11:47,720
the

285
00:11:50,640 --> 00:11:52,680
there we go

286
00:11:52,680 --> 00:11:56,100
so what do we do in order to run through

287
00:11:56,100 --> 00:11:58,339
this

288
00:11:58,620 --> 00:12:00,000
this

289
00:12:00,000 --> 00:12:02,519
threat modeling rapid risk assessment is

290
00:12:02,519 --> 00:12:06,420
basically a script so we've scripted a

291
00:12:06,420 --> 00:12:08,040
standardized threat modeling notes in

292
00:12:08,040 --> 00:12:09,779
introduction

293
00:12:09,779 --> 00:12:12,480
and then we sit with the team on an

294
00:12:12,480 --> 00:12:14,279
hour-long call and we run through the

295
00:12:14,279 --> 00:12:16,380
documentation and we try and understand

296
00:12:16,380 --> 00:12:18,180
exactly what their intents and intention

297
00:12:18,180 --> 00:12:21,300
for the project is so in this case and

298
00:12:21,300 --> 00:12:22,680
again

299
00:12:22,680 --> 00:12:24,060
I feel like I should probably just make

300
00:12:24,060 --> 00:12:26,100
slides

301
00:12:26,100 --> 00:12:28,940
this guy

302
00:12:33,600 --> 00:12:36,300
Okay so

303
00:12:36,300 --> 00:12:37,980
we've got a project it's a get Ops

304
00:12:37,980 --> 00:12:39,959
deployment tool project data

305
00:12:39,959 --> 00:12:43,019
classification why is it critical

306
00:12:43,019 --> 00:12:46,200
because it holds cluster admin keys and

307
00:12:46,200 --> 00:12:47,760
what's the worst could happen maybe

308
00:12:47,760 --> 00:12:49,560
someone gets remote code execution into

309
00:12:49,560 --> 00:12:51,300
the Container they have the cluster

310
00:12:51,300 --> 00:12:53,519
admin keys and then they can enumerate

311
00:12:53,519 --> 00:12:55,320
Secrets deploy whatever they want to run

312
00:12:55,320 --> 00:12:56,940
privilege containers and pop the nodes

313
00:12:56,940 --> 00:13:00,320
all that good stuff

314
00:13:00,720 --> 00:13:02,760
okay so first of all introducing the

315
00:13:02,760 --> 00:13:04,980
project and its runtime data flows

316
00:13:04,980 --> 00:13:07,380
connections and protocols

317
00:13:07,380 --> 00:13:08,760
these are the threat really notes up

318
00:13:08,760 --> 00:13:10,440
here

319
00:13:10,440 --> 00:13:12,839
so this is the first stage of any threat

320
00:13:12,839 --> 00:13:14,579
modeling process Gathering as much

321
00:13:14,579 --> 00:13:16,860
metadata information and documentation

322
00:13:16,860 --> 00:13:19,079
about the project so that everybody has

323
00:13:19,079 --> 00:13:23,160
a common security lexicon and knows how

324
00:13:23,160 --> 00:13:24,420
to describe

325
00:13:24,420 --> 00:13:27,779
the various components of the system

326
00:13:27,779 --> 00:13:31,440
we already had the Genesis of this in

327
00:13:31,440 --> 00:13:33,839
the self-assessment

328
00:13:33,839 --> 00:13:37,740
and so what we can see here is

329
00:13:37,740 --> 00:13:40,980
reasonably we can just about see here is

330
00:13:40,980 --> 00:13:45,240
git flux's runtime behavior and model so

331
00:13:45,240 --> 00:13:47,399
we can see at the top the internal and

332
00:13:47,399 --> 00:13:50,880
external interfaces we have a bucket so

333
00:13:50,880 --> 00:13:53,459
an S3 bucket we have a git Repository

334
00:13:53,459 --> 00:13:55,139
communication Services container

335
00:13:55,139 --> 00:13:58,680
registry and external event selectors

336
00:13:58,680 --> 00:14:01,200
the reason that the so this is a data

337
00:14:01,200 --> 00:14:02,700
flow diagram the reason that there are

338
00:14:02,700 --> 00:14:04,860
red boxes around things is because those

339
00:14:04,860 --> 00:14:06,300
are trust boundaries

340
00:14:06,300 --> 00:14:08,100
trust boundaries are something in threat

341
00:14:08,100 --> 00:14:10,800
modeling that are slightly intangible I

342
00:14:10,800 --> 00:14:12,300
mean first of all what what's trust

343
00:14:12,300 --> 00:14:14,279
means that we like something

344
00:14:14,279 --> 00:14:17,639
sufficiently to give it some level of

345
00:14:17,639 --> 00:14:19,500
I'm going to make a self-reflective

346
00:14:19,500 --> 00:14:21,720
recursive definition Trust

347
00:14:21,720 --> 00:14:23,940
so when data is traveling between two

348
00:14:23,940 --> 00:14:25,680
different parts of a system a trust

349
00:14:25,680 --> 00:14:27,660
boundary might be a step up so if we're

350
00:14:27,660 --> 00:14:29,220
lower to a higher data classification

351
00:14:29,220 --> 00:14:32,459
could be the reciprocal step down

352
00:14:32,459 --> 00:14:34,860
it could be the fact that two components

353
00:14:34,860 --> 00:14:36,720
are written by the same team so if

354
00:14:36,720 --> 00:14:38,399
somebody ships a malicious update into

355
00:14:38,399 --> 00:14:40,139
one well it's the same team anyway so

356
00:14:40,139 --> 00:14:41,339
they're probably in the same trust

357
00:14:41,339 --> 00:14:42,540
boundary

358
00:14:42,540 --> 00:14:43,860
um it could be an external interface

359
00:14:43,860 --> 00:14:45,720
from outside of the system even though

360
00:14:45,720 --> 00:14:46,740
the data is still at the same

361
00:14:46,740 --> 00:14:49,100
classification we're passing through

362
00:14:49,100 --> 00:14:51,839
uncharted waters almost

363
00:14:51,839 --> 00:14:54,180
so defining those trust boundaries is a

364
00:14:54,180 --> 00:14:56,639
little bit ethereal and slightly

365
00:14:56,639 --> 00:14:58,620
subjective but it's a required First

366
00:14:58,620 --> 00:15:01,500
Step because again it this is a very

367
00:15:01,500 --> 00:15:03,600
abstract process and it gives us a

368
00:15:03,600 --> 00:15:05,519
common way of discussing and describing

369
00:15:05,519 --> 00:15:06,839
things

370
00:15:06,839 --> 00:15:08,220
so in this case it's relatively

371
00:15:08,220 --> 00:15:10,380
self-evident the

372
00:15:10,380 --> 00:15:13,860
external surface there is where flux

373
00:15:13,860 --> 00:15:17,220
says where is this git config stored

374
00:15:17,220 --> 00:15:20,040
probably in git oh sorry the yaml config

375
00:15:20,040 --> 00:15:21,959
probably and gets bit of course it could

376
00:15:21,959 --> 00:15:24,600
also be in a bucket etc etc

377
00:15:24,600 --> 00:15:27,360
other things we have in there then the

378
00:15:27,360 --> 00:15:30,240
set of flux controllers in the middle

379
00:15:30,240 --> 00:15:31,740
so

380
00:15:31,740 --> 00:15:33,540
it's just about readable those

381
00:15:33,540 --> 00:15:34,800
controllers

382
00:15:34,800 --> 00:15:38,279
are what reconcile the states of

383
00:15:38,279 --> 00:15:41,279
the repository or the the yaml and The

384
00:15:41,279 --> 00:15:42,959
observed state of the cluster so it's a

385
00:15:42,959 --> 00:15:45,899
Reconciliation Loop that is constantly

386
00:15:45,899 --> 00:15:47,579
um if I can remember

387
00:15:47,579 --> 00:15:50,279
observe Act

388
00:15:50,279 --> 00:15:52,440
I feel like there's three parts to it

389
00:15:52,440 --> 00:15:53,519
there's definitely observation and

390
00:15:53,519 --> 00:15:55,019
acting I can't actually remember what

391
00:15:55,019 --> 00:15:57,000
the third one is but nevertheless it's

392
00:15:57,000 --> 00:15:59,639
observing the state and reconciling the

393
00:15:59,639 --> 00:16:01,980
expected state with uh

394
00:16:01,980 --> 00:16:03,720
with the observed States

395
00:16:03,720 --> 00:16:05,399
and it's eventually consistent of course

396
00:16:05,399 --> 00:16:06,600
because

397
00:16:06,600 --> 00:16:08,579
um the the Thruster is a disputed system

398
00:16:08,579 --> 00:16:11,339
which is constantly changing

399
00:16:11,339 --> 00:16:12,959
so

400
00:16:12,959 --> 00:16:15,180
at a very high level we can see

401
00:16:15,180 --> 00:16:16,560
obviously there is a lot of complexity

402
00:16:16,560 --> 00:16:18,240
to flux

403
00:16:18,240 --> 00:16:20,240
so moving through this in an hour is

404
00:16:20,240 --> 00:16:22,680
inherently its own challenge

405
00:16:22,680 --> 00:16:24,839
so what do we do next

406
00:16:24,839 --> 00:16:27,180
how do people use this project okay

407
00:16:27,180 --> 00:16:29,279
we're deploying with gitups to

408
00:16:29,279 --> 00:16:31,139
kubernetes

409
00:16:31,139 --> 00:16:33,360
it's the only component making changes

410
00:16:33,360 --> 00:16:34,980
to a cluster this is a super important

411
00:16:34,980 --> 00:16:37,800
git Ops principle it helps us to reason

412
00:16:37,800 --> 00:16:39,360
about the security of the system because

413
00:16:39,360 --> 00:16:40,740
there's a limited number of people who

414
00:16:40,740 --> 00:16:44,180
can do anything to mutate the states

415
00:16:44,180 --> 00:16:47,220
and there is some new functionality in

416
00:16:47,220 --> 00:16:48,680
flux which is this terraform

417
00:16:48,680 --> 00:16:51,660
experimental controller

418
00:16:51,660 --> 00:16:53,399
the important part here is that we've

419
00:16:53,399 --> 00:16:55,860
identified something in the threat

420
00:16:55,860 --> 00:16:57,420
modeling process

421
00:16:57,420 --> 00:17:00,360
that relates to potentially relates to

422
00:17:00,360 --> 00:17:01,800
the threat model

423
00:17:01,800 --> 00:17:04,199
but it's out of scope scoping from a

424
00:17:04,199 --> 00:17:06,059
threat modeling perspective is how we

425
00:17:06,059 --> 00:17:08,459
attain an outcome in a reasonable amount

426
00:17:08,459 --> 00:17:11,459
of time that's because if we're going to

427
00:17:11,459 --> 00:17:13,799
threat model flux do we also threat

428
00:17:13,799 --> 00:17:15,059
model

429
00:17:15,059 --> 00:17:17,459
container runtime do we threat model the

430
00:17:17,459 --> 00:17:19,380
node that kubernetes is running on do we

431
00:17:19,380 --> 00:17:21,660
threat model the data center that the

432
00:17:21,660 --> 00:17:24,480
node that etc etc sort of again add

433
00:17:24,480 --> 00:17:26,160
infinitum

434
00:17:26,160 --> 00:17:28,980
so in order to actually achieve an

435
00:17:28,980 --> 00:17:30,799
outcome from a threat modeling process

436
00:17:30,799 --> 00:17:33,780
we downscope as much as possible and

437
00:17:33,780 --> 00:17:35,760
that laser focus

438
00:17:35,760 --> 00:17:37,679
gets us to a conclusion that we can do

439
00:17:37,679 --> 00:17:40,080
something with as opposed to just sort

440
00:17:40,080 --> 00:17:42,539
of threats everywhere in the Buzz

441
00:17:42,539 --> 00:17:45,720
Lightyear pansscape style so in this

442
00:17:45,720 --> 00:17:47,340
case there's a terraform experiment

443
00:17:47,340 --> 00:17:49,559
experimental controller it wasn't

444
00:17:49,559 --> 00:17:51,539
anything that was in the headspace of

445
00:17:51,539 --> 00:17:54,240
the team it's extraneous to some extent

446
00:17:54,240 --> 00:17:56,340
to the core functionality so we descope

447
00:17:56,340 --> 00:17:58,679
it easy decision

448
00:17:58,679 --> 00:18:01,440
so how does the project work and at this

449
00:18:01,440 --> 00:18:03,059
point you can see with these are just

450
00:18:03,059 --> 00:18:04,520
really simple

451
00:18:04,520 --> 00:18:07,500
heading question and answer Socratic

452
00:18:07,500 --> 00:18:09,299
threat modeling oh maybe that's what we

453
00:18:09,299 --> 00:18:10,620
should call it

454
00:18:10,620 --> 00:18:12,600
um how does Project work yes well we're

455
00:18:12,600 --> 00:18:15,059
looking to get that state

456
00:18:15,059 --> 00:18:16,980
and pull it from somewhere and apply it

457
00:18:16,980 --> 00:18:18,179
into the cluster

458
00:18:18,179 --> 00:18:20,160
are there any sub components or shared

459
00:18:20,160 --> 00:18:22,980
boundaries this yielded some interesting

460
00:18:22,980 --> 00:18:25,919
results so

461
00:18:25,919 --> 00:18:27,900
we have these controllers

462
00:18:27,900 --> 00:18:30,960
that flux is actually a V2 the V1 of

463
00:18:30,960 --> 00:18:33,840
flux I'd used extensively I discovered a

464
00:18:33,840 --> 00:18:36,059
whole lot of things about the the

465
00:18:36,059 --> 00:18:37,500
developments and the changes to flux

466
00:18:37,500 --> 00:18:39,360
that I had no idea about

467
00:18:39,360 --> 00:18:41,700
it can pull in customized code so it can

468
00:18:41,700 --> 00:18:44,460
run ad hoc transforms as it's customized

469
00:18:44,460 --> 00:18:47,400
does it can do Helm so it can just pull

470
00:18:47,400 --> 00:18:50,100
those Helm charts render and apply them

471
00:18:50,100 --> 00:18:51,360
in process

472
00:18:51,360 --> 00:18:54,480
Helm also has a load of deployment hooks

473
00:18:54,480 --> 00:18:56,160
which which are extensibility

474
00:18:56,160 --> 00:18:57,660
potentially places the malicious

475
00:18:57,660 --> 00:18:59,340
software could run

476
00:18:59,340 --> 00:19:01,080
The Source controller of course is where

477
00:19:01,080 --> 00:19:02,820
the source is being pulled from we saw

478
00:19:02,820 --> 00:19:04,919
those external interfaces

479
00:19:04,919 --> 00:19:07,559
and the image controllers

480
00:19:07,559 --> 00:19:08,940
so

481
00:19:08,940 --> 00:19:12,720
there is also this concept of flux

482
00:19:12,720 --> 00:19:17,160
uh deploying things and writing back

483
00:19:17,160 --> 00:19:20,280
a git tag to the repository that it's

484
00:19:20,280 --> 00:19:23,039
pulling the code from and that cat that

485
00:19:23,039 --> 00:19:25,020
tag works as a pointer sort of a

486
00:19:25,020 --> 00:19:27,299
deployment offset so in case of Disaster

487
00:19:27,299 --> 00:19:29,220
Recovery if the whole cluster is a

488
00:19:29,220 --> 00:19:31,020
smoldering hole in the ground it can

489
00:19:31,020 --> 00:19:32,640
just redeploy from the same repo and

490
00:19:32,640 --> 00:19:35,220
it's a reasonably deterministic thing

491
00:19:35,220 --> 00:19:37,200
those are credentials back to the source

492
00:19:37,200 --> 00:19:40,260
repository but otherwise read only

493
00:19:40,260 --> 00:19:42,059
the security side effects of the small

494
00:19:42,059 --> 00:19:43,679
functionality decisions and what we're

495
00:19:43,679 --> 00:19:47,160
hoping to elucidate with this process

496
00:19:47,160 --> 00:19:50,400
so what Communications protocols does it

497
00:19:50,400 --> 00:19:53,580
use at this point it's worth deviating

498
00:19:53,580 --> 00:19:55,500
slightly to talk about what we do at

499
00:19:55,500 --> 00:19:57,900
control plane which is we perform these

500
00:19:57,900 --> 00:20:00,299
threat models and assessments for every

501
00:20:00,299 --> 00:20:02,520
activity we engage in we did it for all

502
00:20:02,520 --> 00:20:04,799
our customers it is the way that we

503
00:20:04,799 --> 00:20:06,780
rationalize quantify and justify the

504
00:20:06,780 --> 00:20:08,400
security controls that are going to cost

505
00:20:08,400 --> 00:20:10,320
money and that people would like some

506
00:20:10,320 --> 00:20:12,600
Assurance actually work and are optimal

507
00:20:12,600 --> 00:20:16,320
for some for some some degree of

508
00:20:16,320 --> 00:20:18,360
requirements

509
00:20:18,360 --> 00:20:21,299
the way we do this is with a large

510
00:20:21,299 --> 00:20:22,980
um a large Matrix

511
00:20:22,980 --> 00:20:24,900
and in fact Market would you mind just

512
00:20:24,900 --> 00:20:26,340
pulling up the or just linking me

513
00:20:26,340 --> 00:20:27,840
through to the um the threat modeling

514
00:20:27,840 --> 00:20:30,240
training and I'll because we do have uh

515
00:20:30,240 --> 00:20:31,620
I should have thought about this ahead

516
00:20:31,620 --> 00:20:33,360
of time I apologize

517
00:20:33,360 --> 00:20:34,980
we do this in a data classification

518
00:20:34,980 --> 00:20:37,559
Matrix so we look at all these flows we

519
00:20:37,559 --> 00:20:39,900
classify them and again it's a it's a

520
00:20:39,900 --> 00:20:41,520
common taxonomy and language that makes

521
00:20:41,520 --> 00:20:43,200
it easier to

522
00:20:43,200 --> 00:20:46,260
visualize security let's say

523
00:20:46,260 --> 00:20:47,640
um so what we've done here for the sake

524
00:20:47,640 --> 00:20:50,340
of rapidity is just

525
00:20:50,340 --> 00:20:52,559
list out a load of bullet points but

526
00:20:52,559 --> 00:20:55,679
there are other there are other quicker

527
00:20:55,679 --> 00:20:58,440
sorry there are the less quick ways of

528
00:20:58,440 --> 00:21:02,039
achieving this as well

529
00:21:02,039 --> 00:21:04,039
um

530
00:21:04,559 --> 00:21:07,559
I will also mention uh that control

531
00:21:07,559 --> 00:21:10,140
plane have a free threat modeling

532
00:21:10,140 --> 00:21:11,820
kubernetes course that we do for

533
00:21:11,820 --> 00:21:13,679
O'Reilly so if you're on the O'Reilly

534
00:21:13,679 --> 00:21:16,200
platform I think we're streaming the

535
00:21:16,200 --> 00:21:18,120
next one

536
00:21:18,120 --> 00:21:20,820
uh at some point in the next couple of

537
00:21:20,820 --> 00:21:23,039
months we will make some noise when we

538
00:21:23,039 --> 00:21:25,799
do it and uh yeah all of the collateral

539
00:21:25,799 --> 00:21:27,120
that goes with that is all open source

540
00:21:27,120 --> 00:21:29,100
and free as well

541
00:21:29,100 --> 00:21:31,200
so for the communication protocol

542
00:21:31,200 --> 00:21:34,320
taxonomy we care about

543
00:21:34,320 --> 00:21:36,600
what these specific parts of the system

544
00:21:36,600 --> 00:21:37,860
are doing

545
00:21:37,860 --> 00:21:40,559
and how they communicate why does that

546
00:21:40,559 --> 00:21:42,299
matter because there are different

547
00:21:42,299 --> 00:21:44,460
potential problems with each different

548
00:21:44,460 --> 00:21:46,620
style of communication if we're just

549
00:21:46,620 --> 00:21:49,080
using TCP well hopefully it's actually

550
00:21:49,080 --> 00:21:50,580
bundling some sort of encryption around

551
00:21:50,580 --> 00:21:52,559
the thing it's doing is it packet and

552
00:21:52,559 --> 00:21:55,740
packets is it actually is it TLs are we

553
00:21:55,740 --> 00:21:59,220
using insecure ciphers are we using old

554
00:21:59,220 --> 00:22:02,159
SSH versions etc etc so that's what

555
00:22:02,159 --> 00:22:04,760
we're looking to determine with this

556
00:22:04,760 --> 00:22:07,740
reasonably exhausted reasonably

557
00:22:07,740 --> 00:22:11,360
exhaustive classification exercise

558
00:22:11,460 --> 00:22:13,620
so just whizzing through those Source

559
00:22:13,620 --> 00:22:17,699
Helm customize notification

560
00:22:17,940 --> 00:22:20,000
um

561
00:22:20,640 --> 00:22:24,179
the point of doing this again is to

562
00:22:24,179 --> 00:22:26,760
build this kind of uh abstract problem

563
00:22:26,760 --> 00:22:28,559
space in in the minds of the people

564
00:22:28,559 --> 00:22:30,539
undertaking the exercise so that when it

565
00:22:30,539 --> 00:22:32,400
comes to what could potentially the

566
00:22:32,400 --> 00:22:34,200
problems be then we're thinking okay

567
00:22:34,200 --> 00:22:36,240
well actually there is a metrics

568
00:22:36,240 --> 00:22:37,440
endpoint I wonder if that's

569
00:22:37,440 --> 00:22:40,260
authenticated if it's Prometheus is

570
00:22:40,260 --> 00:22:41,400
someone kind of checked that it's not

571
00:22:41,400 --> 00:22:43,140
leaking some sense of information people

572
00:22:43,140 --> 00:22:44,940
don't pick environment variables into

573
00:22:44,940 --> 00:22:47,820
into those things that kind of

574
00:22:47,820 --> 00:22:52,520
nefarious attacker-driven concept yeah

575
00:22:54,539 --> 00:22:56,960
yes

576
00:22:59,159 --> 00:23:01,919
I waffled a bit more here than we do

577
00:23:01,919 --> 00:23:04,159
there

578
00:23:16,100 --> 00:23:20,120
you make a fine point yes

579
00:23:21,240 --> 00:23:23,480
foreign

580
00:23:26,100 --> 00:23:28,500
so quick how do you

581
00:23:28,500 --> 00:23:31,700
reasonably feel like

582
00:23:31,740 --> 00:23:33,720
when you know Engineers are going quick

583
00:23:33,720 --> 00:23:35,100
maybe they don't think about it maybe

584
00:23:35,100 --> 00:23:36,419
they haven't touched some part of the

585
00:23:36,419 --> 00:23:39,059
system and there are you know protocols

586
00:23:39,059 --> 00:23:41,760
that they didn't think to mention it's

587
00:23:41,760 --> 00:23:43,440
an excellent point so the question is

588
00:23:43,440 --> 00:23:44,880
how can we be confident in the

589
00:23:44,880 --> 00:23:46,740
completeness of the model when balancing

590
00:23:46,740 --> 00:23:49,200
that with the the speed and compression

591
00:23:49,200 --> 00:23:51,659
of one hour's time ultimately that is

592
00:23:51,659 --> 00:23:54,720
the the risk balance uh

593
00:23:54,720 --> 00:23:56,940
we can't is the answer the the

594
00:23:56,940 --> 00:23:59,220
compromise is such that

595
00:23:59,220 --> 00:24:00,419
um

596
00:24:00,419 --> 00:24:03,000
and it's not an apples to oranges well

597
00:24:03,000 --> 00:24:04,500
sorry it is it's an unfair comparison

598
00:24:04,500 --> 00:24:06,480
but I'll for the point of

599
00:24:06,480 --> 00:24:08,880
um demonstration tax Securities are also

600
00:24:08,880 --> 00:24:09,840
going through

601
00:24:09,840 --> 00:24:11,280
um an Argo

602
00:24:11,280 --> 00:24:13,559
threat model assessment Argo is

603
00:24:13,559 --> 00:24:14,820
decomposed into four different parts

604
00:24:14,820 --> 00:24:16,440
we've got four different work streams

605
00:24:16,440 --> 00:24:18,240
and it's all volunteer-led and it's

606
00:24:18,240 --> 00:24:20,340
taking us a lot longer than we'd like to

607
00:24:20,340 --> 00:24:22,260
do it so we are performing those

608
00:24:22,260 --> 00:24:23,700
exhaustive

609
00:24:23,700 --> 00:24:25,679
um like deep introspections on the thing

610
00:24:25,679 --> 00:24:26,700
as well

611
00:24:26,700 --> 00:24:29,220
but this is really meant to just say

612
00:24:29,220 --> 00:24:30,900
what's the most effective and

613
00:24:30,900 --> 00:24:33,120
lightweight thing just kind of referring

614
00:24:33,120 --> 00:24:35,100
back the title is not helpful but

615
00:24:35,100 --> 00:24:36,240
um

616
00:24:36,240 --> 00:24:37,860
yes we're intentionally balancing that

617
00:24:37,860 --> 00:24:40,380
risk specifically to a point of how do

618
00:24:40,380 --> 00:24:42,960
we know that these are correct

619
00:24:42,960 --> 00:24:45,780
the the project did fill in the the

620
00:24:45,780 --> 00:24:48,299
self-assessment beforehand they shared

621
00:24:48,299 --> 00:24:51,960
the documentation with us in advance so

622
00:24:51,960 --> 00:24:56,100
I'm being maybe a bit overly uh

623
00:24:56,100 --> 00:24:57,539
I'm glossing over the fact that there

624
00:24:57,539 --> 00:24:58,980
was Preparatory work done by the people

625
00:24:58,980 --> 00:25:00,539
who attended

626
00:25:00,539 --> 00:25:03,059
um we also had

627
00:25:03,059 --> 00:25:05,039
I mean highly skilled maintainers who've

628
00:25:05,039 --> 00:25:06,299
been on the project for a long time so

629
00:25:06,299 --> 00:25:08,520
they were just a bang bang bang but as

630
00:25:08,520 --> 00:25:10,679
we go through this it is

631
00:25:10,679 --> 00:25:13,559
it is a question and answer exercise so

632
00:25:13,559 --> 00:25:15,240
there were points where things were

633
00:25:15,240 --> 00:25:16,320
missed and we said oh but what about

634
00:25:16,320 --> 00:25:17,760
this and then it was expanded on

635
00:25:17,760 --> 00:25:19,320
slightly

636
00:25:19,320 --> 00:25:20,700
um so there's definitely fallibility

637
00:25:20,700 --> 00:25:24,260
introduced by the process

638
00:25:24,600 --> 00:25:28,459
which is not in any way meant that

639
00:25:30,919 --> 00:25:33,919
ultimately

640
00:25:36,740 --> 00:25:39,299
the best you can

641
00:25:39,299 --> 00:25:43,020
and you move on and and every comment

642
00:25:43,020 --> 00:25:44,940
sounds like a criticism and so it's

643
00:25:44,940 --> 00:25:46,980
really horrible for any of us who are

644
00:25:46,980 --> 00:25:48,240
trying to lead people through the right

645
00:25:48,240 --> 00:25:50,640
it's it's funny that you say that yeah

646
00:25:50,640 --> 00:25:53,360
there's um

647
00:25:53,520 --> 00:25:56,039
I think as security people we're used to

648
00:25:56,039 --> 00:25:58,200
being on the hook like the buck stops

649
00:25:58,200 --> 00:26:00,539
with security you can't really if you

650
00:26:00,539 --> 00:26:02,340
make a mistake it might have

651
00:26:02,340 --> 00:26:05,400
pii related implications

652
00:26:05,400 --> 00:26:06,059
um

653
00:26:06,059 --> 00:26:07,860
yeah that's a really good point this is

654
00:26:07,860 --> 00:26:09,419
done in a very

655
00:26:09,419 --> 00:26:11,039
I think the spirit of the thing is like

656
00:26:11,039 --> 00:26:14,039
a blameless pre-mortem idea and

657
00:26:14,039 --> 00:26:16,559
certainly going through that with the

658
00:26:16,559 --> 00:26:19,080
I I mean one of the things that I try

659
00:26:19,080 --> 00:26:21,900
and prefix to to any of the kind of the

660
00:26:21,900 --> 00:26:23,700
the hacking demos or those kind of

661
00:26:23,700 --> 00:26:25,380
things that I do is thank you to all the

662
00:26:25,380 --> 00:26:27,360
maintainers who put all the effort in to

663
00:26:27,360 --> 00:26:29,700
give us all this incredible tooling

664
00:26:29,700 --> 00:26:30,360
um

665
00:26:30,360 --> 00:26:31,740
but yeah yeah it's a really good point

666
00:26:31,740 --> 00:26:33,539
there is there can be emotion involved

667
00:26:33,539 --> 00:26:35,880
for the people involved

668
00:26:35,880 --> 00:26:37,440
and actually being the subject of one of

669
00:26:37,440 --> 00:26:38,700
these things can feel a bit like an

670
00:26:38,700 --> 00:26:40,980
audit sometimes for people and they're

671
00:26:40,980 --> 00:26:41,700
like

672
00:26:41,700 --> 00:26:46,940
yeah yeah but I mean it's uh

673
00:26:47,700 --> 00:26:49,620
yeah I suppose I associate audit was

674
00:26:49,620 --> 00:26:52,919
more of a sort of looming Dragon of uh

675
00:26:52,919 --> 00:26:55,020
of compliance whereas this is like we're

676
00:26:55,020 --> 00:26:56,279
trying to help guys

677
00:26:56,279 --> 00:26:58,559
that's what it feels like to eat

678
00:26:58,559 --> 00:27:01,320
them it feels like

679
00:27:01,320 --> 00:27:04,939
an office that's really interesting yeah

680
00:27:07,919 --> 00:27:10,500
I'm taking yeah I'm taking notes for

681
00:27:10,500 --> 00:27:12,779
things to blog about

682
00:27:12,779 --> 00:27:13,620
um

683
00:27:13,620 --> 00:27:16,939
yes okay so

684
00:27:17,279 --> 00:27:19,200
running through and hopefully getting as

685
00:27:19,200 --> 00:27:21,120
close to

686
00:27:21,120 --> 00:27:23,100
a reasonable degree of certainty as we

687
00:27:23,100 --> 00:27:27,980
can with these communications protocols

688
00:27:28,620 --> 00:27:31,320
um so then we start getting into the

689
00:27:31,320 --> 00:27:34,919
meat of the problem thinking about and

690
00:27:34,919 --> 00:27:36,659
actually decomposing things down in my

691
00:27:36,659 --> 00:27:39,299
head to Linux namespaces is quite a

692
00:27:39,299 --> 00:27:41,460
useful way for me to think about this so

693
00:27:41,460 --> 00:27:43,140
what's in the process namespace well

694
00:27:43,140 --> 00:27:45,419
that's the runtime that's Behavior Uh

695
00:27:45,419 --> 00:27:46,620
what's in the mount name space well

696
00:27:46,620 --> 00:27:48,600
maybe the secrets red the disc those

697
00:27:48,600 --> 00:27:50,100
Secrets might cross over if some of them

698
00:27:50,100 --> 00:27:52,740
are actually pulled into the application

699
00:27:52,740 --> 00:27:55,020
for usage maybe they're decrypted on

700
00:27:55,020 --> 00:27:57,539
disk uh and so they're slightly safer

701
00:27:57,539 --> 00:27:59,640
sorry maybe they're encrypted on disk

702
00:27:59,640 --> 00:28:01,620
and so there'll be decryption keys

703
00:28:01,620 --> 00:28:03,720
somewhere else that we need to use that

704
00:28:03,720 --> 00:28:05,580
we've got the network namespace what are

705
00:28:05,580 --> 00:28:07,020
the inputs and outputs coming into this

706
00:28:07,020 --> 00:28:09,840
back to the communications so scroll

707
00:28:09,840 --> 00:28:11,760
down so

708
00:28:11,760 --> 00:28:13,860
the question is

709
00:28:13,860 --> 00:28:16,919
where does the application store data so

710
00:28:16,919 --> 00:28:18,360
we're thinking about

711
00:28:18,360 --> 00:28:19,559
the data that we've classified

712
00:28:19,559 --> 00:28:22,620
previously when it exists on disk what's

713
00:28:22,620 --> 00:28:23,820
its form

714
00:28:23,820 --> 00:28:25,559
is it

715
00:28:25,559 --> 00:28:26,640
um

716
00:28:26,640 --> 00:28:29,100
breachable in the CIA Triad so does it

717
00:28:29,100 --> 00:28:30,539
need to be confidential does it need to

718
00:28:30,539 --> 00:28:32,340
maintain this Integrity does it need to

719
00:28:32,340 --> 00:28:34,440
be available all the time sometimes the

720
00:28:34,440 --> 00:28:36,240
answer is no strangely enough do we need

721
00:28:36,240 --> 00:28:37,799
certain types of data all the time well

722
00:28:37,799 --> 00:28:40,279
not if we've got a fallback

723
00:28:40,279 --> 00:28:43,799
sometimes metrics for example you can

724
00:28:43,799 --> 00:28:45,840
just fire them on Via UDP if you've got

725
00:28:45,840 --> 00:28:48,240
a saturated network connection you

726
00:28:48,240 --> 00:28:49,980
probably want the metrics to

727
00:28:49,980 --> 00:28:52,200
be dropped before you want application

728
00:28:52,200 --> 00:28:55,500
traffic maybe not depends on the system

729
00:28:55,500 --> 00:28:58,380
so that kind of thing so in this case

730
00:28:58,380 --> 00:29:00,120
what does flux actually do well it

731
00:29:00,120 --> 00:29:02,220
doesn't persist anything which is useful

732
00:29:02,220 --> 00:29:06,059
so immediately we can descope some of

733
00:29:06,059 --> 00:29:06,960
those

734
00:29:06,960 --> 00:29:09,240
um confidentiality pieces

735
00:29:09,240 --> 00:29:11,820
but some data is stored locally

736
00:29:11,820 --> 00:29:13,860
where would I tamper with the data and

737
00:29:13,860 --> 00:29:16,380
at this point we're into that nefarious

738
00:29:16,380 --> 00:29:18,240
attacker mindset and this really is the

739
00:29:18,240 --> 00:29:20,220
value of this process because as

740
00:29:20,220 --> 00:29:22,320
developers we just like to ship happy

741
00:29:22,320 --> 00:29:24,500
path stuff we like to get the the

742
00:29:24,500 --> 00:29:28,020
functionality out and

743
00:29:28,020 --> 00:29:30,179
security can be seen as a roadblock in

744
00:29:30,179 --> 00:29:33,000
these in in these terms

745
00:29:33,000 --> 00:29:35,820
so saying to an attacker sorry saying to

746
00:29:35,820 --> 00:29:37,200
a maintainer

747
00:29:37,200 --> 00:29:38,820
if I was going to try and cause trouble

748
00:29:38,820 --> 00:29:41,880
for your users what would I do

749
00:29:41,880 --> 00:29:43,799
um well man in the middle on the source

750
00:29:43,799 --> 00:29:46,200
controller because it doesn't serve TLS

751
00:29:46,200 --> 00:29:49,799
we know this because we have

752
00:29:49,799 --> 00:29:51,919
seen here that we've got an inbound

753
00:29:51,919 --> 00:29:55,620
connection serving artifacts on HTTP so

754
00:29:55,620 --> 00:29:57,659
that process has triggered some of the

755
00:29:57,659 --> 00:29:58,799
initial thinking

756
00:29:58,799 --> 00:30:01,020
to start building out the actual model

757
00:30:01,020 --> 00:30:03,000
the team were aware of this already

758
00:30:03,000 --> 00:30:05,220
there's an RFC in flights

759
00:30:05,220 --> 00:30:06,840
but we looked to capture everything so

760
00:30:06,840 --> 00:30:09,659
that we have as holistic of you hesitate

761
00:30:09,659 --> 00:30:11,520
to say the word but as as wide and

762
00:30:11,520 --> 00:30:14,100
expansive a view as possible

763
00:30:14,100 --> 00:30:16,559
within the constraints of the scoping

764
00:30:16,559 --> 00:30:19,140
that we've chosen of course

765
00:30:19,140 --> 00:30:21,240
um sorry occurs to me I'm going up and

766
00:30:21,240 --> 00:30:22,260
down

767
00:30:22,260 --> 00:30:24,860
uh anything else here of note

768
00:30:24,860 --> 00:30:27,960
that kubernetes cve is a do not fit or

769
00:30:27,960 --> 00:30:29,340
as it won't fix

770
00:30:29,340 --> 00:30:30,539
so

771
00:30:30,539 --> 00:30:33,480
again we raise it here actually do we

772
00:30:33,480 --> 00:30:34,559
want to scope it if it's not going to

773
00:30:34,559 --> 00:30:36,360
get fixed Upstream it seems a bit

774
00:30:36,360 --> 00:30:37,860
redundant we could generate a whole

775
00:30:37,860 --> 00:30:39,960
document of things that

776
00:30:39,960 --> 00:30:40,620
um

777
00:30:40,620 --> 00:30:42,419
are they bugs or features from that kind

778
00:30:42,419 --> 00:30:44,220
of perspective

779
00:30:44,220 --> 00:30:47,399
but we do have a control

780
00:30:47,399 --> 00:30:49,320
um a suggested control there and again

781
00:30:49,320 --> 00:30:51,120
another man in the middle

782
00:30:51,120 --> 00:30:55,080
the crd's explosion here is really quite

783
00:30:55,080 --> 00:30:57,120
significant

784
00:30:57,120 --> 00:30:58,440
but we're not storing sensitive

785
00:30:58,440 --> 00:30:59,820
information

786
00:30:59,820 --> 00:31:01,140
and then we've got a final question

787
00:31:01,140 --> 00:31:03,059
about hard multi-tenancy if we've got a

788
00:31:03,059 --> 00:31:05,039
flux cluster controlling multiple other

789
00:31:05,039 --> 00:31:08,100
clusters well then potentially the

790
00:31:08,100 --> 00:31:09,600
threats there are around organizational

791
00:31:09,600 --> 00:31:11,279
responsibilities and who's actually

792
00:31:11,279 --> 00:31:13,320
managing those things

793
00:31:13,320 --> 00:31:17,039
so we're just whizzing through and

794
00:31:17,039 --> 00:31:19,380
let's just see what else we've got so

795
00:31:19,380 --> 00:31:21,240
sensitive data and where is it stored

796
00:31:21,240 --> 00:31:23,159
we've got credentials here

797
00:31:23,159 --> 00:31:25,140
and if those credentials are exfiltrated

798
00:31:25,140 --> 00:31:28,320
we've got escalations potentially not

799
00:31:28,320 --> 00:31:30,000
only for things within the cluster but

800
00:31:30,000 --> 00:31:31,860
any workload identity Integrations where

801
00:31:31,860 --> 00:31:33,539
we can exchange those credentials for

802
00:31:33,539 --> 00:31:35,460
cloud credentials of some description

803
00:31:35,460 --> 00:31:39,000
may lead to what ultimately becomes an

804
00:31:39,000 --> 00:31:40,620
account compromise or an organizational

805
00:31:40,620 --> 00:31:41,760
compromise

806
00:31:41,760 --> 00:31:43,799
just from someone breaking out of a

807
00:31:43,799 --> 00:31:44,899
container

808
00:31:44,899 --> 00:31:48,000
these these routes to escalation are

809
00:31:48,000 --> 00:31:50,600
often possible

810
00:31:51,600 --> 00:31:54,779
they do have as we can see some useful

811
00:31:54,779 --> 00:31:57,360
Secrets Integrations with Sops etc etc

812
00:31:57,360 --> 00:32:01,080
okay data storage with the crds do we

813
00:32:01,080 --> 00:32:02,580
have encryption on the things that we

814
00:32:02,580 --> 00:32:03,840
value

815
00:32:03,840 --> 00:32:05,820
no so

816
00:32:05,820 --> 00:32:08,460
as a recommendation of course we would

817
00:32:08,460 --> 00:32:11,220
ask the project to seriously consider

818
00:32:11,220 --> 00:32:12,600
um

819
00:32:12,600 --> 00:32:14,100
encrypting things

820
00:32:14,100 --> 00:32:16,320
because it protects against somebody

821
00:32:16,320 --> 00:32:19,020
compromising a node sniffing Network

822
00:32:19,020 --> 00:32:21,240
track like promiscuous Network traffic

823
00:32:21,240 --> 00:32:22,679
sniffing

824
00:32:22,679 --> 00:32:24,059
and

825
00:32:24,059 --> 00:32:27,120
um reduces Reliance on an encrypted cni

826
00:32:27,120 --> 00:32:30,320
of some description

827
00:32:30,539 --> 00:32:33,000
um okay then we get into the data

828
00:32:33,000 --> 00:32:34,679
dictionary

829
00:32:34,679 --> 00:32:36,840
and I think we might be pressed for time

830
00:32:36,840 --> 00:32:41,720
if I don't go slightly faster so yes

831
00:32:41,880 --> 00:32:44,159
the data the classification and any

832
00:32:44,159 --> 00:32:46,640
thoughts

833
00:32:47,220 --> 00:32:49,200
so at this point

834
00:32:49,200 --> 00:32:50,760
we've we've gathered enough information

835
00:32:50,760 --> 00:32:53,460
to start addressing some of these

836
00:32:53,460 --> 00:32:55,980
high-level risks again because of the

837
00:32:55,980 --> 00:32:59,039
speed at which we are going

838
00:32:59,039 --> 00:33:01,980
the uh the depths of depth of these is

839
00:33:01,980 --> 00:33:03,840
is not guaranteed

840
00:33:03,840 --> 00:33:06,299
so

841
00:33:06,299 --> 00:33:08,580
again this is scripted areas of patrols

842
00:33:08,580 --> 00:33:10,080
that we're interested in based on what

843
00:33:10,080 --> 00:33:12,539
the audit working group selected when we

844
00:33:12,539 --> 00:33:14,159
say controls we mean a logical section

845
00:33:14,159 --> 00:33:16,200
of an application or system that handles

846
00:33:16,200 --> 00:33:19,760
a security requirement

847
00:33:20,460 --> 00:33:22,559
system may have authorization

848
00:33:22,559 --> 00:33:25,380
requirements Etc we then detail the

849
00:33:25,380 --> 00:33:27,659
patrol families that we're interested in

850
00:33:27,659 --> 00:33:30,000
and these are again they're very similar

851
00:33:30,000 --> 00:33:34,679
to what the cloud native controls for

852
00:33:34,679 --> 00:33:36,179
the trail of bits order sorry for

853
00:33:36,179 --> 00:33:39,299
kubernetes look like but with a focus on

854
00:33:39,299 --> 00:33:42,659
the usage of the system and not the the

855
00:33:42,659 --> 00:33:45,419
code that authors it and this really is

856
00:33:45,419 --> 00:33:48,840
the instructive difference between most

857
00:33:48,840 --> 00:33:50,760
traditional threat modeling which is

858
00:33:50,760 --> 00:33:54,000
feature based looks at code considers

859
00:33:54,000 --> 00:33:56,100
how things are built

860
00:33:56,100 --> 00:33:58,260
and what we look to achieve uh

861
00:33:58,260 --> 00:33:59,940
specifically with this framework how

862
00:33:59,940 --> 00:34:01,260
control plane does this slightly

863
00:34:01,260 --> 00:34:03,720
differently which is the end user usage

864
00:34:03,720 --> 00:34:06,720
runtime behavior and Integrations and

865
00:34:06,720 --> 00:34:09,719
infrastructure usage of the application

866
00:34:09,719 --> 00:34:11,460
so we're looking to secure something

867
00:34:11,460 --> 00:34:13,440
that's more in the Realms of a cloud

868
00:34:13,440 --> 00:34:16,560
misconfiguration than a kernel busting

869
00:34:16,560 --> 00:34:18,839
cve

870
00:34:18,839 --> 00:34:20,159
it gives a gives a slightly different

871
00:34:20,159 --> 00:34:22,560
kind of value and they're both entirely

872
00:34:22,560 --> 00:34:24,899
useful in complementary processes but

873
00:34:24,899 --> 00:34:26,219
just worth noting that they're both

874
00:34:26,219 --> 00:34:28,980
called threat modeling hi Nicola

875
00:34:28,980 --> 00:34:31,199
um Okay so

876
00:34:31,199 --> 00:34:33,179
deployment architecture what does our

877
00:34:33,179 --> 00:34:35,760
runtime look like

878
00:34:35,760 --> 00:34:37,440
sorry I should probably just close

879
00:34:37,440 --> 00:34:39,899
signal for the purposes of illustration

880
00:34:39,899 --> 00:34:42,300
there we go how do we deploy these

881
00:34:42,300 --> 00:34:44,040
things at runtime why is that important

882
00:34:44,040 --> 00:34:46,320
because a vulnerable application can be

883
00:34:46,320 --> 00:34:47,940
deployed with a lockdown security

884
00:34:47,940 --> 00:34:50,520
configuration that makes it safe to run

885
00:34:50,520 --> 00:34:52,619
you may not want to do that by default

886
00:34:52,619 --> 00:34:56,280
but if the cost if the choice is between

887
00:34:56,280 --> 00:34:57,660
running

888
00:34:57,660 --> 00:35:00,660
a trading system in production

889
00:35:00,660 --> 00:35:03,540
with a vulnerability or not trading then

890
00:35:03,540 --> 00:35:05,700
probably the answer is obvious

891
00:35:05,700 --> 00:35:07,140
we'll still have to move through as

892
00:35:07,140 --> 00:35:08,580
quickly networking cryptography

893
00:35:08,580 --> 00:35:10,740
multi-tenancy isolation

894
00:35:10,740 --> 00:35:13,680
Secrets management storage or n and Z

895
00:35:13,680 --> 00:35:16,079
audit logging and security tests

896
00:35:16,079 --> 00:35:17,940
and then we can skip entire groups of

897
00:35:17,940 --> 00:35:20,280
families if we so desire

898
00:35:20,280 --> 00:35:22,859
and so we want to know for each control

899
00:35:22,859 --> 00:35:25,320
what does the project do what's the data

900
00:35:25,320 --> 00:35:27,060
classification and then we get into the

901
00:35:27,060 --> 00:35:28,560
attacker mindset what does the attacker

902
00:35:28,560 --> 00:35:30,660
want to do here what would they how

903
00:35:30,660 --> 00:35:32,400
would they attack it

904
00:35:32,400 --> 00:35:34,980
other specific mitigations for example

905
00:35:34,980 --> 00:35:37,320
can we just stick some sort of firewall

906
00:35:37,320 --> 00:35:39,900
or inspection in between

907
00:35:39,900 --> 00:35:42,900
are there availability concerns and have

908
00:35:42,900 --> 00:35:44,280
there been similar vulnerabilities in

909
00:35:44,280 --> 00:35:45,780
the past it is a case of history

910
00:35:45,780 --> 00:35:49,500
repeating it's again deeply instructive

911
00:35:49,500 --> 00:35:51,420
to go back and look at

912
00:35:51,420 --> 00:35:52,920
how these systems have been attacked

913
00:35:52,920 --> 00:35:55,619
previously uh and and help to derive

914
00:35:55,619 --> 00:35:56,940
controls there

915
00:35:56,940 --> 00:35:58,260
so

916
00:35:58,260 --> 00:36:00,180
and I'm not sure I think we've probably

917
00:36:00,180 --> 00:36:01,980
almost hit time I will just whiz through

918
00:36:01,980 --> 00:36:04,560
the end of this into our threat

919
00:36:04,560 --> 00:36:06,780
scenarios these are the things that were

920
00:36:06,780 --> 00:36:09,900
found in the assessments

921
00:36:09,900 --> 00:36:12,480
so theoretical threats what about

922
00:36:12,480 --> 00:36:14,400
deploying into the flux system namespace

923
00:36:14,400 --> 00:36:16,560
what would happen if someone gained

924
00:36:16,560 --> 00:36:18,359
access to those credentials

925
00:36:18,359 --> 00:36:20,280
uh what about image pool policy this is

926
00:36:20,280 --> 00:36:21,540
an old school

927
00:36:21,540 --> 00:36:24,480
um issue basically can we retrieve other

928
00:36:24,480 --> 00:36:27,720
tenants images from the local container

929
00:36:27,720 --> 00:36:31,320
cash Violet Docker or whatever that the

930
00:36:31,320 --> 00:36:33,720
broader used to be and

931
00:36:33,720 --> 00:36:35,760
what about shared secure multi-tenancy

932
00:36:35,760 --> 00:36:37,740
multi-tenancy and kubernetes is really

933
00:36:37,740 --> 00:36:39,060
difficult

934
00:36:39,060 --> 00:36:42,359
um the DNS for example is just defined

935
00:36:42,359 --> 00:36:44,520
to show you everything you can see all

936
00:36:44,520 --> 00:36:46,079
the services you've got environment

937
00:36:46,079 --> 00:36:47,400
variables pointing to everything else

938
00:36:47,400 --> 00:36:49,320
that's deployed as a service in the

939
00:36:49,320 --> 00:36:51,920
cluster anyway

940
00:36:52,140 --> 00:36:54,060
um what about Network policies

941
00:36:54,060 --> 00:36:55,800
okay we get into the multi-tenancy

942
00:36:55,800 --> 00:36:57,180
lockdown and it goes a little bit deep

943
00:36:57,180 --> 00:37:00,480
but but again kind of to the point these

944
00:37:00,480 --> 00:37:02,099
are things that the security engineers

945
00:37:02,099 --> 00:37:03,660
in an hour

946
00:37:03,660 --> 00:37:06,240
ideated and it's just bang what do you

947
00:37:06,240 --> 00:37:07,500
think about this yep that's potentially

948
00:37:07,500 --> 00:37:09,359
a problem it gets captured and we move

949
00:37:09,359 --> 00:37:10,619
on to the next

950
00:37:10,619 --> 00:37:12,960
the important thing

951
00:37:12,960 --> 00:37:14,760
um generally when threat modeling is not

952
00:37:14,760 --> 00:37:17,099
to conflate the threat and the control

953
00:37:17,099 --> 00:37:19,800
in the same breath because the stride

954
00:37:19,800 --> 00:37:22,440
process delineates the what are we

955
00:37:22,440 --> 00:37:24,540
building what could go wrong and what

956
00:37:24,540 --> 00:37:26,099
are we going to do about it it's three

957
00:37:26,099 --> 00:37:27,900
distinct parts of the process

958
00:37:27,900 --> 00:37:30,300
and this is because it can be difficult

959
00:37:30,300 --> 00:37:32,040
to keep

960
00:37:32,040 --> 00:37:34,200
the high level view while also thinking

961
00:37:34,200 --> 00:37:36,480
oh but one of my favorite controls is X

962
00:37:36,480 --> 00:37:37,800
for example

963
00:37:37,800 --> 00:37:40,920
so we throw that entire approach out

964
00:37:40,920 --> 00:37:42,300
with the rapid risk assessment

965
00:37:42,300 --> 00:37:45,119
everything really is is done in such an

966
00:37:45,119 --> 00:37:48,060
intense period of time that controls are

967
00:37:48,060 --> 00:37:51,300
suggested in flights

968
00:37:51,300 --> 00:37:54,119
so anything else this is all public of

969
00:37:54,119 --> 00:37:57,119
course so uh everyone is welcome to to

970
00:37:57,119 --> 00:38:00,560
jump in and have a read in more detail

971
00:38:00,560 --> 00:38:02,220
and

972
00:38:02,220 --> 00:38:04,260
we went through and recommended our

973
00:38:04,260 --> 00:38:08,099
controls as I say these kind of conflate

974
00:38:08,099 --> 00:38:11,839
a little bit up here in places

975
00:38:12,540 --> 00:38:14,339
yeah so for example here we're just

976
00:38:14,339 --> 00:38:16,140
going straight into recommending a

977
00:38:16,140 --> 00:38:18,540
specific admission controller

978
00:38:18,540 --> 00:38:20,400
um where we wouldn't typically do that

979
00:38:20,400 --> 00:38:23,160
but then with a view to actually

980
00:38:23,160 --> 00:38:25,440
and we kind of as you can see jammed

981
00:38:25,440 --> 00:38:27,900
some of those in further above

982
00:38:27,900 --> 00:38:29,640
and then we go through and actually

983
00:38:29,640 --> 00:38:31,079
recommend the controls that we think the

984
00:38:31,079 --> 00:38:33,480
project should

985
00:38:33,480 --> 00:38:37,820
um should well apply to remediate

986
00:38:37,980 --> 00:38:40,079
um the NS poisoning That's the do not

987
00:38:40,079 --> 00:38:44,359
fix but we do have a mitigation for it

988
00:38:44,520 --> 00:38:46,920
and then write out official

989
00:38:46,920 --> 00:38:49,260
recommendations and that was an hour's

990
00:38:49,260 --> 00:38:51,420
work and a huge thanks to everyone who

991
00:38:51,420 --> 00:38:53,880
is involved with it it provided enough

992
00:38:53,880 --> 00:38:55,920
value to corroborate some of the

993
00:38:55,920 --> 00:38:57,300
security decisions the project had

994
00:38:57,300 --> 00:39:00,359
already made and to generate a few extra

995
00:39:00,359 --> 00:39:02,520
issues

996
00:39:02,520 --> 00:39:04,079
um I really went on for much longer than

997
00:39:04,079 --> 00:39:05,760
I intended to going through that so

998
00:39:05,760 --> 00:39:08,460
rather than doing anything in flights we

999
00:39:08,460 --> 00:39:11,099
will draw it to a close any questions or

1000
00:39:11,099 --> 00:39:14,359
comments before we do

1001
00:39:18,380 --> 00:39:22,079
related to containers like other parts

1002
00:39:22,079 --> 00:39:23,339
running as

1003
00:39:23,339 --> 00:39:26,000
are they running

1004
00:39:26,700 --> 00:39:29,280
so the question is would specific

1005
00:39:29,280 --> 00:39:31,320
questions on container security contexts

1006
00:39:31,320 --> 00:39:34,859
or best practices be be useful

1007
00:39:34,859 --> 00:39:35,700
um

1008
00:39:35,700 --> 00:39:38,220
potentially I would put those under the

1009
00:39:38,220 --> 00:39:39,839
deployment architecture pod and

1010
00:39:39,839 --> 00:39:42,920
namespace configuration section

1011
00:39:42,920 --> 00:39:46,020
uh let's see probably see it on the left

1012
00:39:46,020 --> 00:39:47,700
hand side if I did

1013
00:39:47,700 --> 00:39:49,140
um

1014
00:39:49,140 --> 00:39:50,820
the

1015
00:39:50,820 --> 00:39:54,200
yeah so we do have a section for it that

1016
00:39:54,200 --> 00:39:56,820
was they said everything's fine we don't

1017
00:39:56,820 --> 00:39:58,200
think there's any any problems with the

1018
00:39:58,200 --> 00:39:59,700
deployment there

1019
00:39:59,700 --> 00:40:01,200
um

1020
00:40:01,200 --> 00:40:05,400
so I guess yes potentially

1021
00:40:05,400 --> 00:40:07,320
the

1022
00:40:07,320 --> 00:40:08,700
the quality of the output is really

1023
00:40:08,700 --> 00:40:12,000
based upon who turns up to uh to

1024
00:40:12,000 --> 00:40:13,440
contribute at the time so if there's

1025
00:40:13,440 --> 00:40:16,260
somebody who has specific kernel API

1026
00:40:16,260 --> 00:40:18,119
level knowledge they're going to be

1027
00:40:18,119 --> 00:40:19,500
asking the questions that sort of lead

1028
00:40:19,500 --> 00:40:22,380
to those answers so yes potentially but

1029
00:40:22,380 --> 00:40:25,859
but I think kind of balancing the

1030
00:40:25,859 --> 00:40:27,599
yeah I hope that's all right but I'm

1031
00:40:27,599 --> 00:40:29,040
interested in what specific questions

1032
00:40:29,040 --> 00:40:32,420
you might add there as well

1033
00:40:51,420 --> 00:40:53,760
yeah so I guess it would potentially be

1034
00:40:53,760 --> 00:40:56,900
a question in the previous

1035
00:40:57,420 --> 00:41:00,560
um would it be

1036
00:41:02,520 --> 00:41:04,380
yeah I see what you mean now so to

1037
00:41:04,380 --> 00:41:06,839
actually put it into uh

1038
00:41:06,839 --> 00:41:09,240
sensitive data where does it

1039
00:41:09,240 --> 00:41:11,700
that's a great shout okay yeah I think

1040
00:41:11,700 --> 00:41:13,260
that that is worth taking back to the

1041
00:41:13,260 --> 00:41:16,880
group and suggesting thank you

1042
00:41:17,640 --> 00:41:21,259
any more for any more

1043
00:41:23,520 --> 00:41:24,780
okay thank you very much for your

1044
00:41:24,780 --> 00:41:26,579
attention everybody that was a light

1045
00:41:26,579 --> 00:41:29,540
speed lightweight version

