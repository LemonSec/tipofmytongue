1
00:00:00,000 --> 00:00:03,600
so what Zach and I are going to talk

2
00:00:03,600 --> 00:00:06,600
today is about the identity based

3
00:00:06,600 --> 00:00:08,300
segmentation for a zero test

4
00:00:08,300 --> 00:00:11,700
architecture so naturally so we have to

5
00:00:11,700 --> 00:00:14,519
give some leading information on what is

6
00:00:14,519 --> 00:00:16,980
zero thrust architecture and voice zero

7
00:00:16,980 --> 00:00:19,859
test and then we dwelled into what is

8
00:00:19,859 --> 00:00:23,939
identity based segmentation and then all

9
00:00:23,939 --> 00:00:26,660
the nuances to the policy text

10
00:00:26,660 --> 00:00:31,099
that could explain exactly

11
00:00:31,140 --> 00:00:32,279
do you want to introduce yourself

12
00:00:32,279 --> 00:00:35,239
actually to the yeah my name is

13
00:00:35,239 --> 00:00:37,620
chandramoli people call me as mauli for

14
00:00:37,620 --> 00:00:39,600
short I work for the National Institute

15
00:00:39,600 --> 00:00:41,700
of Standards and Technology right in

16
00:00:41,700 --> 00:00:44,899
Gettysburg Washington DC area so

17
00:00:44,899 --> 00:00:47,660
we have been working with uh yes

18
00:00:47,660 --> 00:00:49,800
responsible for running a lot of the SPs

19
00:00:49,800 --> 00:00:52,140
that you all need to go Implement uh in

20
00:00:52,140 --> 00:00:54,840
practice so his fault but also awesome

21
00:00:54,840 --> 00:00:57,719
work uh and I'm Zach I'm one of the

22
00:00:57,719 --> 00:01:00,059
founding engineers at touchrates and I

23
00:01:00,059 --> 00:01:01,680
work very closely with muli to help

24
00:01:01,680 --> 00:01:04,319
author some of these in particular we've

25
00:01:04,319 --> 00:01:06,659
written a lot of the SP 800 204 series

26
00:01:06,659 --> 00:01:09,119
together which is the set of security

27
00:01:09,119 --> 00:01:11,280
recommendations for microservices and

28
00:01:11,280 --> 00:01:13,680
multi-cloud uh however we're actually

29
00:01:13,680 --> 00:01:15,600
going to be working on together on some

30
00:01:15,600 --> 00:01:17,820
things around zero trust very soon and

31
00:01:17,820 --> 00:01:19,439
you'll get a nice sneak peek of that

32
00:01:19,439 --> 00:01:22,140
here in this presentation

33
00:01:22,140 --> 00:01:23,220
yeah

34
00:01:23,220 --> 00:01:27,240
so first of all as Zach mentioned in the

35
00:01:27,240 --> 00:01:29,580
keynote address zero trust has been

36
00:01:29,580 --> 00:01:32,060
around for quite some time

37
00:01:32,060 --> 00:01:35,040
but then he says sudden

38
00:01:35,040 --> 00:01:38,520
for focus on zero trust right now is of

39
00:01:38,520 --> 00:01:41,640
course we know all the good reasons uh

40
00:01:41,640 --> 00:01:44,040
that no longer there is something called

41
00:01:44,040 --> 00:01:46,920
a parameter exist because people are

42
00:01:46,920 --> 00:01:49,200
sitting all over the place and secondly

43
00:01:49,200 --> 00:01:50,939
the applications themselves have become

44
00:01:50,939 --> 00:01:54,000
quite distributed so naturally east west

45
00:01:54,000 --> 00:01:56,399
traffic is now a bigger part of the

46
00:01:56,399 --> 00:01:59,840
traffic rather than not so traffic and

47
00:01:59,840 --> 00:02:03,360
secondly uh all applications are in the

48
00:02:03,360 --> 00:02:05,640
form of microservices there are many

49
00:02:05,640 --> 00:02:09,660
pieces involved and so naturally the

50
00:02:09,660 --> 00:02:10,759
each of the access

51
00:02:10,759 --> 00:02:13,560
decisions should be based upon per

52
00:02:13,560 --> 00:02:16,800
request and take into account all the

53
00:02:16,800 --> 00:02:18,660
contextual variables because there are

54
00:02:18,660 --> 00:02:21,000
very many variables involved and it

55
00:02:21,000 --> 00:02:23,239
should be of course conformed to the

56
00:02:23,239 --> 00:02:26,520
good old Cardinal principles of least

57
00:02:26,520 --> 00:02:28,739
privilege and so on and so forth and

58
00:02:28,739 --> 00:02:31,860
naturally it should be uh so naturally

59
00:02:31,860 --> 00:02:34,739
means it is to be identity based so

60
00:02:34,739 --> 00:02:36,660
under who are all the entities carrying

61
00:02:36,660 --> 00:02:40,319
identity you know the users and services

62
00:02:40,319 --> 00:02:42,900
and devices so that's what we are going

63
00:02:42,900 --> 00:02:45,000
to focus on today about the identity

64
00:02:45,000 --> 00:02:47,220
based segmentation and again the high

65
00:02:47,220 --> 00:02:48,840
level framing is you know assume the

66
00:02:48,840 --> 00:02:50,580
attackers in the network what do we do

67
00:02:50,580 --> 00:02:52,560
to mitigate the damage that they can do

68
00:02:52,560 --> 00:02:55,680
by balancing their attack in space and

69
00:02:55,680 --> 00:02:56,940
in time

70
00:02:56,940 --> 00:02:59,480
yep

71
00:02:59,879 --> 00:03:04,560
so uh then so we have now actually uh

72
00:03:04,560 --> 00:03:07,140
shown the need for a way a focus on zero

73
00:03:07,140 --> 00:03:10,140
trust now an identity based segmentation

74
00:03:10,140 --> 00:03:12,599
so in other words what do we call it as

75
00:03:12,599 --> 00:03:14,159
identity based pigmentation because

76
00:03:14,159 --> 00:03:16,379
originally our controls were based upon

77
00:03:16,379 --> 00:03:19,739
the Assumption of a perimeter and now

78
00:03:19,739 --> 00:03:22,560
that uh we venture into the zero trust

79
00:03:22,560 --> 00:03:25,500
the initial thinking was can we do a

80
00:03:25,500 --> 00:03:27,480
segmentation of the network itself

81
00:03:27,480 --> 00:03:31,319
uh so but the existing techniques on

82
00:03:31,319 --> 00:03:34,379
network segmentation like you know based

83
00:03:34,379 --> 00:03:36,659
upon subnets as well as some labels as

84
00:03:36,659 --> 00:03:38,760
we case in the case of vlans are no

85
00:03:38,760 --> 00:03:40,739
longer sufficient because all the

86
00:03:40,739 --> 00:03:42,299
virtually is containing is workloads

87
00:03:42,299 --> 00:03:44,519
they move all over the place you can't

88
00:03:44,519 --> 00:03:47,340
pin them through a particularly even the

89
00:03:47,340 --> 00:03:50,879
network address or a subnet and so on so

90
00:03:50,879 --> 00:03:52,860
that is why we need an identity based

91
00:03:52,860 --> 00:03:55,140
architecture so in the zero trust

92
00:03:55,140 --> 00:03:57,480
architecture essentially what we really

93
00:03:57,480 --> 00:03:59,459
described is all the very components

94
00:03:59,459 --> 00:04:02,040
that are involved and all the data flows

95
00:04:02,040 --> 00:04:04,260
that are involved and last but not the

96
00:04:04,260 --> 00:04:06,120
least the all the policies that we

97
00:04:06,120 --> 00:04:08,580
required and then the security of the

98
00:04:08,580 --> 00:04:10,680
enforcement points so those are some of

99
00:04:10,680 --> 00:04:12,720
the things that we want to concentrate

100
00:04:12,720 --> 00:04:14,640
as far as the zero trust architecture is

101
00:04:14,640 --> 00:04:17,040
concerned and then this error set

102
00:04:17,040 --> 00:04:18,660
architecture is the fundamentally it is

103
00:04:18,660 --> 00:04:22,100
based upon the identity based

104
00:04:22,100 --> 00:04:25,080
segmentation so it's another name for

105
00:04:25,080 --> 00:04:28,440
zero test segmentation also

106
00:04:28,440 --> 00:04:29,160
um

107
00:04:29,160 --> 00:04:31,800
and then of course as we all know

108
00:04:31,800 --> 00:04:33,900
identity based means what the name

109
00:04:33,900 --> 00:04:35,960
implies you know it is

110
00:04:35,960 --> 00:04:38,940
not based upon any network parameters

111
00:04:38,940 --> 00:04:42,419
and it's a place to uh Services users

112
00:04:42,419 --> 00:04:46,440
and devices and also uh it should be not

113
00:04:46,440 --> 00:04:48,960
just any identity orbital like user ID

114
00:04:48,960 --> 00:04:51,680
and so on it should be a

115
00:04:51,680 --> 00:04:54,540
cryptographically verifiable identity so

116
00:04:54,540 --> 00:04:56,759
that's uh that's the most important

117
00:04:56,759 --> 00:04:58,620
thing as far as a service is concerned

118
00:04:58,620 --> 00:04:59,880
yeah and a couple of things here to note

119
00:04:59,880 --> 00:05:01,560
is you know that and in that second

120
00:05:01,560 --> 00:05:02,759
bullet point is doing a lot of heavy

121
00:05:02,759 --> 00:05:04,860
lifting there right so we need not just

122
00:05:04,860 --> 00:05:07,020
a service and a user identity but we

123
00:05:07,020 --> 00:05:08,220
also want to know where you know the

124
00:05:08,220 --> 00:05:10,139
device that it's originating from and

125
00:05:10,139 --> 00:05:12,300
you know we may even use things like the

126
00:05:12,300 --> 00:05:13,860
network parameters as part of a

127
00:05:13,860 --> 00:05:15,960
risk-based assessment to give you

128
00:05:15,960 --> 00:05:17,699
permission or scope or things like that

129
00:05:17,699 --> 00:05:21,060
but it cannot be the only check that

130
00:05:21,060 --> 00:05:22,800
you're doing because that is not

131
00:05:22,800 --> 00:05:24,600
sufficient we need the identity checks

132
00:05:24,600 --> 00:05:27,000
and we can continue to apply traditional

133
00:05:27,000 --> 00:05:29,340
checks like Network location

134
00:05:29,340 --> 00:05:31,979
as part of a layered defense

135
00:05:31,979 --> 00:05:33,780
and we'll talk about that layering very

136
00:05:33,780 --> 00:05:36,419
soon here so

137
00:05:36,419 --> 00:05:39,198
actually then

138
00:05:41,160 --> 00:05:43,680
distributions we know consist of not

139
00:05:43,680 --> 00:05:46,620
only runtime checks but also the whole

140
00:05:46,620 --> 00:05:48,539
process is in place and also the

141
00:05:48,539 --> 00:05:51,919
monitoring and continuous

142
00:05:51,919 --> 00:05:54,419
preformulations of policies and so on so

143
00:05:54,419 --> 00:05:56,759
that is the whole food process but in

144
00:05:56,759 --> 00:05:59,100
this presentation we are just focusing

145
00:05:59,100 --> 00:06:01,800
on the identity based segmentation

146
00:06:01,800 --> 00:06:04,320
aspects yeah so really just the runtime

147
00:06:04,320 --> 00:06:06,360
controls which to be honest are the easy

148
00:06:06,360 --> 00:06:08,280
part the the people process things are

149
00:06:08,280 --> 00:06:09,539
going to be the hard part to change

150
00:06:09,539 --> 00:06:11,699
within the organization but the runtime

151
00:06:11,699 --> 00:06:13,139
controls we can help solve with

152
00:06:13,139 --> 00:06:15,720
technology right and and it can become a

153
00:06:15,720 --> 00:06:17,340
lot simpler so it is a runtime

154
00:06:17,340 --> 00:06:19,740
technology that we are focusing on this

155
00:06:19,740 --> 00:06:22,259
and then we are identified at least in

156
00:06:22,259 --> 00:06:23,780
the concept of

157
00:06:23,780 --> 00:06:25,800
microservices environment with service

158
00:06:25,800 --> 00:06:29,580
mesh that we do need at the minimum

159
00:06:29,580 --> 00:06:32,940
these five things first uh the the

160
00:06:32,940 --> 00:06:35,639
section itself should be secure for that

161
00:06:35,639 --> 00:06:37,979
we need encryption in transit and then

162
00:06:37,979 --> 00:06:41,759
of course we do need to validate service

163
00:06:41,759 --> 00:06:44,220
identities and then once identity is

164
00:06:44,220 --> 00:06:46,319
validated we need some means of

165
00:06:46,319 --> 00:06:49,440
authorizing authorization at the service

166
00:06:49,440 --> 00:06:52,979
level and then of course the end user is

167
00:06:52,979 --> 00:06:54,539
also an integral part of the whole

168
00:06:54,539 --> 00:06:56,699
picture we need to have an

169
00:06:56,699 --> 00:06:59,060
authentication of the end user and then

170
00:06:59,060 --> 00:07:02,039
lastly the inducer authorization as well

171
00:07:02,039 --> 00:07:04,860
inducer authorization especially if you

172
00:07:04,860 --> 00:07:08,460
want resource level controls you need to

173
00:07:08,460 --> 00:07:11,160
have end user authorization as well

174
00:07:11,160 --> 00:07:13,800
exactly so and that this is our goal of

175
00:07:13,800 --> 00:07:17,220
realizing the ZTA through this soil yeah

176
00:07:17,220 --> 00:07:19,560
technology approaches yeah and just you

177
00:07:19,560 --> 00:07:21,360
know kind of paint a picture here you

178
00:07:21,360 --> 00:07:23,160
know you can imagine moving up the tiers

179
00:07:23,160 --> 00:07:25,440
we we go from subnet based connectivity

180
00:07:25,440 --> 00:07:27,660
and and micro segmentation at that level

181
00:07:27,660 --> 00:07:30,300
we can start to layer in identity based

182
00:07:30,300 --> 00:07:32,819
controls but policy gets really powerful

183
00:07:32,819 --> 00:07:35,880
very compelling when I can combine both

184
00:07:35,880 --> 00:07:39,660
service runtime policy and user access

185
00:07:39,660 --> 00:07:41,759
policy together right so you can write a

186
00:07:41,759 --> 00:07:43,560
policy that says for example not just

187
00:07:43,560 --> 00:07:45,900
the front end can call the back end but

188
00:07:45,900 --> 00:07:47,340
the front end can call a particular

189
00:07:47,340 --> 00:07:49,440
method on the back end only in the

190
00:07:49,440 --> 00:07:51,120
presence of a valid end user credential

191
00:07:51,120 --> 00:07:54,060
that has the permission to read for

192
00:07:54,060 --> 00:07:56,639
example right and so again the game is

193
00:07:56,639 --> 00:07:59,340
all about bounding an attack in space

194
00:07:59,340 --> 00:08:00,660
and in time

195
00:08:00,660 --> 00:08:03,180
those more comprehensive policies that

196
00:08:03,180 --> 00:08:05,520
combine both physical location and

197
00:08:05,520 --> 00:08:07,199
application as well as end user

198
00:08:07,199 --> 00:08:10,500
credential do a lot to help us write

199
00:08:10,500 --> 00:08:14,099
very tight policy that bounds an

200
00:08:14,099 --> 00:08:16,919
attacker in Space the the what they can

201
00:08:16,919 --> 00:08:20,719
pivot to attack very tightly

202
00:08:25,280 --> 00:08:28,080
overall view of service you know that we

203
00:08:28,080 --> 00:08:29,699
are some not preaching to the class

204
00:08:29,699 --> 00:08:31,860
everyone will be familiar with the

205
00:08:31,860 --> 00:08:34,140
service mesh but just to give you an

206
00:08:34,140 --> 00:08:37,020
idea that servicemen really is meant to

207
00:08:37,020 --> 00:08:39,719
accomplish three primary things so only

208
00:08:39,719 --> 00:08:42,120
this has the infrastructure as an

209
00:08:42,120 --> 00:08:44,459
infrastructure layer it provides the

210
00:08:44,459 --> 00:08:46,020
identity to the applications which is

211
00:08:46,020 --> 00:08:48,420
the very key and then the second one is

212
00:08:48,420 --> 00:08:50,880
it does all the things with the traffic

213
00:08:50,880 --> 00:08:54,080
routing starting from service Discovery

214
00:08:54,080 --> 00:08:57,360
intelligent routing and all the nice and

215
00:08:57,360 --> 00:08:59,459
goody resilient measures like the number

216
00:08:59,459 --> 00:09:02,279
of read size blue green deployments and

217
00:09:02,279 --> 00:09:04,380
all that stuff and then the third one is

218
00:09:04,380 --> 00:09:06,779
of course the most important is to

219
00:09:06,779 --> 00:09:08,959
enforce a service to service

220
00:09:08,959 --> 00:09:11,279
authorization as well as inducer to

221
00:09:11,279 --> 00:09:13,620
Resource authorization so those that's

222
00:09:13,620 --> 00:09:15,899
where all our focus on policies and

223
00:09:15,899 --> 00:09:18,240
everything comes into the picture so and

224
00:09:18,240 --> 00:09:19,700
not only because

225
00:09:19,700 --> 00:09:22,440
this beautiful entity called the proxy

226
00:09:22,440 --> 00:09:25,440
that is part of the data plane in the

227
00:09:25,440 --> 00:09:28,560
service mesh that actually really acts

228
00:09:28,560 --> 00:09:31,019
as a security Kernel because it is a non

229
00:09:31,019 --> 00:09:34,260
bypassable and also it's verifiable it

230
00:09:34,260 --> 00:09:36,240
is outside the application code right

231
00:09:36,240 --> 00:09:40,140
and then so then actually we just give a

232
00:09:40,140 --> 00:09:43,680
brief description of how

233
00:09:43,680 --> 00:09:46,339
sorry

234
00:09:46,740 --> 00:09:49,560
these various things are accomplished in

235
00:09:49,560 --> 00:09:53,339
this one so as also most of you may be

236
00:09:53,339 --> 00:09:55,560
familiar encryption we ensures through

237
00:09:55,560 --> 00:09:59,279
the mutual TLS and Shake usually using

238
00:09:59,279 --> 00:10:01,820
the service identity which contains the

239
00:10:01,820 --> 00:10:04,740
service identities the subject alternate

240
00:10:04,740 --> 00:10:06,380
name field of the

241
00:10:06,380 --> 00:10:08,399
service the short way of the service

242
00:10:08,399 --> 00:10:09,899
yeah basically we can leverage spiffy

243
00:10:09,899 --> 00:10:12,120
certs to do both encryption and Transit

244
00:10:12,120 --> 00:10:13,980
as well as our authenticity our

245
00:10:13,980 --> 00:10:16,140
authenticatable runtime service identity

246
00:10:16,140 --> 00:10:18,360
yeah so we use the same

247
00:10:18,360 --> 00:10:20,940
certificate for service identity and

248
00:10:20,940 --> 00:10:23,279
authentication as well and then for

249
00:10:23,279 --> 00:10:27,120
service to service authorization uh we

250
00:10:27,120 --> 00:10:29,760
actually got a lot of funding options

251
00:10:29,760 --> 00:10:32,940
using that it can be an you know in

252
00:10:32,940 --> 00:10:34,339
process

253
00:10:34,339 --> 00:10:37,860
filters in the proxy itself or you can

254
00:10:37,860 --> 00:10:40,200
use proxy extensions or you can call

255
00:10:40,200 --> 00:10:42,060
external Services if you want more

256
00:10:42,060 --> 00:10:45,120
sophisticated authentication like no the

257
00:10:45,120 --> 00:10:48,000
ngac that nisters developed and so on

258
00:10:48,000 --> 00:10:51,120
and similar then we come to the inducer

259
00:10:51,120 --> 00:10:54,839
identity authentication there as we have

260
00:10:54,839 --> 00:10:58,140
said in one of our Publications that we

261
00:10:58,140 --> 00:11:01,500
can land up with you can use any of your

262
00:11:01,500 --> 00:11:03,779
native identity providers to give you

263
00:11:03,779 --> 00:11:06,240
the end user authentication the end user

264
00:11:06,240 --> 00:11:08,700
credentials and then at the Ingress

265
00:11:08,700 --> 00:11:11,100
point in the gate on the Ingress Gateway

266
00:11:11,100 --> 00:11:16,200
you can exchange it for a job token you

267
00:11:16,200 --> 00:11:19,019
know which contains you will give the a

268
00:11:19,019 --> 00:11:21,480
local identity and so on and it can also

269
00:11:21,480 --> 00:11:24,060
populate it with claims and then the

270
00:11:24,060 --> 00:11:26,519
same in the end user when they are

271
00:11:26,519 --> 00:11:29,700
inside the mesh and making a call so

272
00:11:29,700 --> 00:11:31,040
those

273
00:11:31,040 --> 00:11:33,959
the claims in the jaw token can be used

274
00:11:33,959 --> 00:11:35,880
and compared against the resources that

275
00:11:35,880 --> 00:11:37,500
are being requested that particular

276
00:11:37,500 --> 00:11:39,540
resource or again here we have the

277
00:11:39,540 --> 00:11:41,339
option that if you want to detail

278
00:11:41,339 --> 00:11:43,380
resource level authorizations you go to

279
00:11:43,380 --> 00:11:46,740
an external service like ngac and so on

280
00:11:46,740 --> 00:11:48,779
for end user to Resource authentication

281
00:11:48,779 --> 00:11:52,620
and you know specifically in SB 800 204b

282
00:11:52,620 --> 00:11:55,500
which movie and I wrote we talk about

283
00:11:55,500 --> 00:11:57,360
extra and so if you want to dig into

284
00:11:57,360 --> 00:11:58,860
some of these ideas in more detail go

285
00:11:58,860 --> 00:12:01,320
check that out we talk about pulling out

286
00:12:01,320 --> 00:12:03,720
things like authentication into this

287
00:12:03,720 --> 00:12:05,880
common layer into the service mesh so

288
00:12:05,880 --> 00:12:07,800
that it can be you know audited so that

289
00:12:07,800 --> 00:12:09,660
we can have higher Assurance in the code

290
00:12:09,660 --> 00:12:11,760
because it's not delegated across every

291
00:12:11,760 --> 00:12:13,320
application

292
00:12:13,320 --> 00:12:14,519
um you know there's a lot of really

293
00:12:14,519 --> 00:12:16,440
strong properties from a security

294
00:12:16,440 --> 00:12:18,779
perspective that we can get push pushing

295
00:12:18,779 --> 00:12:20,399
this out into a common layer right as

296
00:12:20,399 --> 00:12:23,040
long as the application's still ensures

297
00:12:23,040 --> 00:12:24,779
that those checks have been applied when

298
00:12:24,779 --> 00:12:26,760
it gets at things like you know looking

299
00:12:26,760 --> 00:12:28,500
at a job that the system mints

300
00:12:28,500 --> 00:12:31,079
validating that jot that it came from a

301
00:12:31,079 --> 00:12:32,820
trusted source and then using those

302
00:12:32,820 --> 00:12:34,320
claims to actually apply authorization

303
00:12:34,320 --> 00:12:36,480
is one way that you know a an

304
00:12:36,480 --> 00:12:39,120
application can attest that these checks

305
00:12:39,120 --> 00:12:41,940
have happened before the the request

306
00:12:41,940 --> 00:12:44,339
reaches it yeah essentially we have

307
00:12:44,339 --> 00:12:47,279
detailed the function of how to dot

308
00:12:47,279 --> 00:12:49,740
token is being processed to a private

309
00:12:49,740 --> 00:12:52,860
yeah and and not just jots it doesn't

310
00:12:52,860 --> 00:12:54,540
have to be and you know one thing I'll

311
00:12:54,540 --> 00:12:56,160
just point out is you know there are

312
00:12:56,160 --> 00:12:58,079
actually multiple you know High

313
00:12:58,079 --> 00:13:00,779
Assurance deployments uh you know

314
00:13:00,779 --> 00:13:02,220
hitting things like fedramp moderates

315
00:13:02,220 --> 00:13:05,639
and high controls leveraging things like

316
00:13:05,639 --> 00:13:08,459
the service mesh to offload uh user

317
00:13:08,459 --> 00:13:10,500
authentication and authorization to the

318
00:13:10,500 --> 00:13:12,540
to a common infrared layer to the mesh

319
00:13:12,540 --> 00:13:14,880
right and so this is not just you know

320
00:13:14,880 --> 00:13:16,860
something that we can do but this is

321
00:13:16,860 --> 00:13:18,779
something that actually is done in the

322
00:13:18,779 --> 00:13:21,300
wild in high criticality environments

323
00:13:21,300 --> 00:13:23,579
that are Security First

324
00:13:23,579 --> 00:13:25,620
so far we have outlined all the goodies

325
00:13:25,620 --> 00:13:28,380
that a service mesh can do but then this

326
00:13:28,380 --> 00:13:30,839
may be at a particular service instance

327
00:13:30,839 --> 00:13:32,880
for a particular cluster and so on so

328
00:13:32,880 --> 00:13:34,019
how do you take it to the Enterprise

329
00:13:34,019 --> 00:13:36,300
level and that's where we need another

330
00:13:36,300 --> 00:13:38,459
infrastructure layer that's sitting on

331
00:13:38,459 --> 00:13:40,980
top of the individual service meshes so

332
00:13:40,980 --> 00:13:43,019
that you can apply uniform policies

333
00:13:43,019 --> 00:13:45,240
throughout the Enterprise for all the

334
00:13:45,240 --> 00:13:47,720
service measures and so on and secondly

335
00:13:47,720 --> 00:13:51,300
that is really a reality because not

336
00:13:51,300 --> 00:13:53,279
only there are multiple clusters within

337
00:13:53,279 --> 00:13:56,519
the organization but the common scenario

338
00:13:56,519 --> 00:13:59,040
is that you do have hybrid environments

339
00:13:59,040 --> 00:14:01,860
you do have some resources in-house in

340
00:14:01,860 --> 00:14:03,720
the data centers and Branch offices and

341
00:14:03,720 --> 00:14:05,880
some in clouds and some in even multiple

342
00:14:05,880 --> 00:14:09,060
clouds so when that is the scenario

343
00:14:09,060 --> 00:14:12,060
there we definitely need a higher level

344
00:14:12,060 --> 00:14:15,360
infrastructure layer to in fact act as

345
00:14:15,360 --> 00:14:17,519
the super control plane for these

346
00:14:17,519 --> 00:14:18,959
individual control planes in the service

347
00:14:18,959 --> 00:14:21,600
instances exactly and that lets us do

348
00:14:21,600 --> 00:14:24,060
things like enforce consistent identity

349
00:14:24,060 --> 00:14:26,579
for services across the different sites

350
00:14:26,579 --> 00:14:29,100
that lets us do things like author a

351
00:14:29,100 --> 00:14:30,720
single policy hey the front end can call

352
00:14:30,720 --> 00:14:33,420
the back end and manifest that policy

353
00:14:33,420 --> 00:14:35,940
across the infrastructure right and we

354
00:14:35,940 --> 00:14:39,120
can take care to ensure that we have the

355
00:14:39,120 --> 00:14:40,800
right application in the identities

356
00:14:40,800 --> 00:14:43,019
everywhere even when we're doing things

357
00:14:43,019 --> 00:14:44,639
like going across clusters or across

358
00:14:44,639 --> 00:14:47,220
clouds so that same policy that you

359
00:14:47,220 --> 00:14:49,560
write for any kick-all backend it's

360
00:14:49,560 --> 00:14:51,660
going to apply equally regardless of

361
00:14:51,660 --> 00:14:53,040
whether they live next to each other on

362
00:14:53,040 --> 00:14:54,420
the same you know as pods on the same

363
00:14:54,420 --> 00:14:56,519
host or they happen to be you know

364
00:14:56,519 --> 00:14:58,019
traversing a DMZ and going through a

365
00:14:58,019 --> 00:14:59,339
firewall to reach back to the data

366
00:14:59,339 --> 00:15:02,519
center so yeah that's why so we do tea

367
00:15:02,519 --> 00:15:04,320
definitely everyone is convinced about

368
00:15:04,320 --> 00:15:07,380
nap to app policies but then these

369
00:15:07,380 --> 00:15:09,899
policies alone cannot be sufficient so

370
00:15:09,899 --> 00:15:12,120
that is why we need policies at the

371
00:15:12,120 --> 00:15:15,660
multiple tiers while uh because the

372
00:15:15,660 --> 00:15:17,160
network level policies are needed

373
00:15:17,160 --> 00:15:19,980
because uh some of the compliance

374
00:15:19,980 --> 00:15:22,740
regulations and even Regulators they are

375
00:15:22,740 --> 00:15:24,600
not satisfied with anything else yeah

376
00:15:24,600 --> 00:15:26,699
because service identity is something

377
00:15:26,699 --> 00:15:29,639
not everybody can get their Hands-On and

378
00:15:29,639 --> 00:15:32,339
things like that and secondly it does

379
00:15:32,339 --> 00:15:34,680
serve its purpose in the sense that uh

380
00:15:34,680 --> 00:15:37,199
the the network level policies itself

381
00:15:37,199 --> 00:15:39,600
can be at two TS one is very coarse

382
00:15:39,600 --> 00:15:41,760
grained you know between firewall to

383
00:15:41,760 --> 00:15:45,320
firewall but it can also be somewhat

384
00:15:45,320 --> 00:15:48,600
subnet based in the sense of from a

385
00:15:48,600 --> 00:15:51,120
gateway to Gateway and so on and then of

386
00:15:51,120 --> 00:15:54,000
course on top of it as Zac said we can

387
00:15:54,000 --> 00:15:56,940
layer all the goody service identity

388
00:15:56,940 --> 00:15:59,339
based publicity policies on top of this

389
00:15:59,339 --> 00:16:02,339
network policy is and so the beauty of

390
00:16:02,339 --> 00:16:05,459
this is we can this policies can really

391
00:16:05,459 --> 00:16:07,380
coexist this and they don't have to

392
00:16:07,380 --> 00:16:08,940
conflict with each other so the

393
00:16:08,940 --> 00:16:10,620
multi-tier policy is the most uh

394
00:16:10,620 --> 00:16:14,519
desirable thing and and as just now

395
00:16:14,519 --> 00:16:16,500
described can be the network tier

396
00:16:16,500 --> 00:16:19,199
policies uh which is can be both course

397
00:16:19,199 --> 00:16:21,120
grained and fine-grained and then right

398
00:16:21,120 --> 00:16:23,639
into your tier policies which are more

399
00:16:23,639 --> 00:16:27,360
really uh Dynamic so that's why so the

400
00:16:27,360 --> 00:16:29,220
network tier policies can be really be

401
00:16:29,220 --> 00:16:32,040
static so you don't have to really in

402
00:16:32,040 --> 00:16:33,600
some sense it is allows for relaxation

403
00:16:33,600 --> 00:16:36,420
of those policies in favor of higher

404
00:16:36,420 --> 00:16:38,759
level policies exactly keep changing

405
00:16:38,759 --> 00:16:40,160
with the environment

406
00:16:40,160 --> 00:16:42,899
and really this is before uh before we

407
00:16:42,899 --> 00:16:45,000
hop on you know this is really all about

408
00:16:45,000 --> 00:16:48,000
kind trying to pave a path for

409
00:16:48,000 --> 00:16:50,579
organizations and the Auditors who check

410
00:16:50,579 --> 00:16:53,040
the organization's compliance to

411
00:16:53,040 --> 00:16:55,139
understand the move from a perimeter

412
00:16:55,139 --> 00:16:58,079
model into an identity-based model and

413
00:16:58,079 --> 00:16:59,880
so we view these multi-tiered policies

414
00:16:59,880 --> 00:17:01,860
one is a stepping stone to facilitate

415
00:17:01,860 --> 00:17:04,799
that but two exactly like muli said as a

416
00:17:04,799 --> 00:17:07,559
is to help with defense in depth more

417
00:17:07,559 --> 00:17:09,059
layers for an attacker to have to

418
00:17:09,059 --> 00:17:11,760
Traverse you know more ways to bound the

419
00:17:11,760 --> 00:17:14,760
attack in both space and in time

420
00:17:14,760 --> 00:17:17,520
right and then this is just a schematic

421
00:17:17,520 --> 00:17:20,099
diagram that's just showing at uh

422
00:17:20,099 --> 00:17:23,699
between what entities uh the network

423
00:17:23,699 --> 00:17:25,500
policy Supply and then where uh

424
00:17:25,500 --> 00:17:27,839
application layer exactly and so just to

425
00:17:27,839 --> 00:17:29,520
help kind of make some of these ideas

426
00:17:29,520 --> 00:17:31,799
concrete and how kind of paint the

427
00:17:31,799 --> 00:17:33,480
picture for how they might help you

428
00:17:33,480 --> 00:17:35,880
bridge a traditional perimeter model I

429
00:17:35,880 --> 00:17:37,380
want to you know walk through some cases

430
00:17:37,380 --> 00:17:38,940
so you know suppose we have these two

431
00:17:38,940 --> 00:17:41,100
Services communicating and suppose one

432
00:17:41,100 --> 00:17:42,780
you know they're either different sites

433
00:17:42,780 --> 00:17:44,400
or maybe one is in Cloud one is in the

434
00:17:44,400 --> 00:17:46,679
data center right and so we have a

435
00:17:46,679 --> 00:17:48,780
traditional you know DMZ and a whole

436
00:17:48,780 --> 00:17:51,059
class of policy that we want to apply to

437
00:17:51,059 --> 00:17:53,400
that traffic as it's coming into kind of

438
00:17:53,400 --> 00:17:55,080
our trusted Data Center

439
00:17:55,080 --> 00:17:57,660
often times that requires rule changes

440
00:17:57,660 --> 00:18:00,360
per app right and that is where we get

441
00:18:00,360 --> 00:18:03,480
the pain in managing uh outbound

442
00:18:03,480 --> 00:18:04,679
firewalls this is where we get the pain

443
00:18:04,679 --> 00:18:07,080
in managing the network oriented rules

444
00:18:07,080 --> 00:18:09,059
right you look at a set of subnets that

445
00:18:09,059 --> 00:18:10,799
are allowed to egress to a set of IP

446
00:18:10,799 --> 00:18:12,720
addresses like what does it mean

447
00:18:12,720 --> 00:18:14,340
right and this is where we have a

448
00:18:14,340 --> 00:18:16,320
spreadsheet where we record it somewhere

449
00:18:16,320 --> 00:18:20,160
right that is clearly brittle and

450
00:18:20,160 --> 00:18:23,760
painful and we see it regularly create

451
00:18:23,760 --> 00:18:25,440
you know slowdowns in organizations

452
00:18:25,440 --> 00:18:28,559
right so one of the ideas that we put

453
00:18:28,559 --> 00:18:30,660
forward is using basically identity

454
00:18:30,660 --> 00:18:32,340
aware gateways

455
00:18:32,340 --> 00:18:35,400
to help us bridge that perimeter so the

456
00:18:35,400 --> 00:18:37,520
idea is that we can have you know

457
00:18:37,520 --> 00:18:40,500
gateways on both sides of the of the

458
00:18:40,500 --> 00:18:41,580
perimeter

459
00:18:41,580 --> 00:18:44,039
we can establish relatively static

460
00:18:44,039 --> 00:18:46,320
policies to facilitate those gateways

461
00:18:46,320 --> 00:18:48,360
communicating and we don't need to

462
00:18:48,360 --> 00:18:50,280
change those policies per app because

463
00:18:50,280 --> 00:18:52,260
those gateways are static deployments on

464
00:18:52,260 --> 00:18:53,340
our site

465
00:18:53,340 --> 00:18:55,860
then we can leverage identity-based

466
00:18:55,860 --> 00:18:58,080
policy which is which can be much more

467
00:18:58,080 --> 00:19:02,039
Dynamic and hopefully easier to maintain

468
00:19:02,039 --> 00:19:04,380
about who can go over that connection

469
00:19:04,380 --> 00:19:06,539
who can go over that Transit

470
00:19:06,539 --> 00:19:09,480
so in other words uh Zach explained

471
00:19:09,480 --> 00:19:12,059
these gateways offer a somewhat of a

472
00:19:12,059 --> 00:19:15,240
bridge to go from Identity based

473
00:19:15,240 --> 00:19:16,919
policies to the network-based policies

474
00:19:16,919 --> 00:19:18,840
in sense that they are participating in

475
00:19:18,840 --> 00:19:21,660
both exactly so so in that sense they

476
00:19:21,660 --> 00:19:23,220
are able to

477
00:19:23,220 --> 00:19:26,940
work policies and now uh yeah so we'll

478
00:19:26,940 --> 00:19:29,280
explain in detail yeah we say three

479
00:19:29,280 --> 00:19:30,840
levels of all

480
00:19:30,840 --> 00:19:33,000
yeah I ever find the network and then

481
00:19:33,000 --> 00:19:35,100
the identity based ones yeah exactly and

482
00:19:35,100 --> 00:19:37,080
so we see these exactly overlay on top

483
00:19:37,080 --> 00:19:39,120
of each other right and so we have

484
00:19:39,120 --> 00:19:40,740
exactly like Molly said coarse grain

485
00:19:40,740 --> 00:19:42,360
firewall policy at the bottom obviously

486
00:19:42,360 --> 00:19:43,620
these are not like you know real real

487
00:19:43,620 --> 00:19:45,539
policies but a shorthand for you they

488
00:19:45,539 --> 00:19:47,340
kind of get the idea right we have

489
00:19:47,340 --> 00:19:49,200
firewall to firewall policy we need

490
00:19:49,200 --> 00:19:52,559
micro segmentation as well on each half

491
00:19:52,559 --> 00:19:54,600
very hard to manage how they go over

492
00:19:54,600 --> 00:19:56,520
that that's by the way uh with things

493
00:19:56,520 --> 00:19:58,500
like a cni it becomes challenge it's not

494
00:19:58,500 --> 00:20:01,320
easy to bridge across the two halves of

495
00:20:01,320 --> 00:20:02,760
our policy

496
00:20:02,760 --> 00:20:05,400
the service mesh can sit on top of that

497
00:20:05,400 --> 00:20:07,799
and and facilitate consistent policy

498
00:20:07,799 --> 00:20:09,900
across our different deployments right

499
00:20:09,900 --> 00:20:12,120
so we know you know lower level policy

500
00:20:12,120 --> 00:20:14,640
is going to live at the site right the

501
00:20:14,640 --> 00:20:16,919
the micro segmentation is bound to a

502
00:20:16,919 --> 00:20:19,820
cluster usually right or a set of vpcs

503
00:20:19,820 --> 00:20:23,580
uh and we typically don't you know we're

504
00:20:23,580 --> 00:20:25,320
going to open up firewall rules between

505
00:20:25,320 --> 00:20:27,000
the two we typically don't see micro

506
00:20:27,000 --> 00:20:29,580
segmentation across these

507
00:20:29,580 --> 00:20:32,160
that's again where we can start to layer

508
00:20:32,160 --> 00:20:33,720
we can start to relax some of those

509
00:20:33,720 --> 00:20:35,100
policies that can be hard to maintain

510
00:20:35,100 --> 00:20:38,400
and replace them or augment them with

511
00:20:38,400 --> 00:20:41,580
mesh level identity level policies that

512
00:20:41,580 --> 00:20:43,440
can be consistent across the entire

513
00:20:43,440 --> 00:20:44,640
infrastructure

514
00:20:44,640 --> 00:20:46,500
and when I say consistent across the

515
00:20:46,500 --> 00:20:47,700
entire infrastructure what I mean is

516
00:20:47,700 --> 00:20:49,559
like literally we can instantiate the

517
00:20:49,559 --> 00:20:52,520
same policy document in every mesh

518
00:20:52,520 --> 00:20:54,960
without having to specialize it or

519
00:20:54,960 --> 00:20:57,299
change it for each deployment and have

520
00:20:57,299 --> 00:20:59,220
it be correctly enforced because

521
00:20:59,220 --> 00:21:02,780
identities flow in the end

522
00:21:03,960 --> 00:21:06,780
um so as we're looking at how we realize

523
00:21:06,780 --> 00:21:09,480
this this Enterprise ETA you know the

524
00:21:09,480 --> 00:21:11,760
first step is we want to start to

525
00:21:11,760 --> 00:21:13,020
implement this identity based

526
00:21:13,020 --> 00:21:15,179
segmentation right we want to start to

527
00:21:15,179 --> 00:21:17,039
migrate towards identity-based policy

528
00:21:17,039 --> 00:21:19,020
and we can leverage some of these

529
00:21:19,020 --> 00:21:21,539
patterns to help make our lives easier

530
00:21:21,539 --> 00:21:23,400
dealing with things like the traditional

531
00:21:23,400 --> 00:21:25,260
perimeter

532
00:21:25,260 --> 00:21:29,700
uh you know as we said uh yeah

533
00:21:29,700 --> 00:21:30,360
um

534
00:21:30,360 --> 00:21:32,640
you know we need some you will likely

535
00:21:32,640 --> 00:21:33,780
want some Central coordination

536
00:21:33,780 --> 00:21:35,460
infrastructure that sits above a service

537
00:21:35,460 --> 00:21:37,620
mesh to help manage some of these right

538
00:21:37,620 --> 00:21:40,740
so if we look at a traditional uh you

539
00:21:40,740 --> 00:21:42,720
know corporate topology of of three

540
00:21:42,720 --> 00:21:45,120
zones uh this is pretty standard stuff

541
00:21:45,120 --> 00:21:46,919
that we see all the time

542
00:21:46,919 --> 00:21:49,919
we can start to insert these identity

543
00:21:49,919 --> 00:21:51,840
aware policy enforcement points these

544
00:21:51,840 --> 00:21:54,600
gateways fundamentally an Envoy proxy

545
00:21:54,600 --> 00:21:56,880
in the data path there to start to

546
00:21:56,880 --> 00:21:59,039
leverage higher level policy at all of

547
00:21:59,039 --> 00:22:01,700
these locations

548
00:22:07,220 --> 00:22:11,100
proxy as well as the egress courtesy and

549
00:22:11,100 --> 00:22:13,620
then also as what is known as the

550
00:22:13,620 --> 00:22:16,260
transist process itself now in terms of

551
00:22:16,260 --> 00:22:18,659
they can even perform other goodies like

552
00:22:18,659 --> 00:22:21,419
load distributions and and identifying

553
00:22:21,419 --> 00:22:23,340
the Ingress proxy for the various

554
00:22:23,340 --> 00:22:25,620
clusters and so on yeah exactly because

555
00:22:25,620 --> 00:22:26,880
there's a certain amount of like service

556
00:22:26,880 --> 00:22:28,260
Discovery information you'll need to

557
00:22:28,260 --> 00:22:30,600
propagate across clusters right uh for

558
00:22:30,600 --> 00:22:32,520
example you know your Ingress Edge may

559
00:22:32,520 --> 00:22:34,860
want to load balance across multiple

560
00:22:34,860 --> 00:22:37,200
clusters behind it in in the same VPC or

561
00:22:37,200 --> 00:22:39,059
in the same data center so there's some

562
00:22:39,059 --> 00:22:40,679
service discovery that you need to to

563
00:22:40,679 --> 00:22:42,960
wire up there's policy that we want to

564
00:22:42,960 --> 00:22:45,120
push to these layers as well you know

565
00:22:45,120 --> 00:22:46,860
and so we can start to leverage things

566
00:22:46,860 --> 00:22:49,380
like your CD pipeline as one of the ways

567
00:22:49,380 --> 00:22:50,460
to implement this coordination

568
00:22:50,460 --> 00:22:52,880
infrastructure right you can for example

569
00:22:52,880 --> 00:22:55,320
templatize a lot of the things like

570
00:22:55,320 --> 00:22:57,840
service exposure and service consumption

571
00:22:57,840 --> 00:23:01,320
and let your CD pipeline instantiate the

572
00:23:01,320 --> 00:23:03,780
policies across the various meshes uh

573
00:23:03,780 --> 00:23:05,280
certainly there are online ways to do

574
00:23:05,280 --> 00:23:08,600
that as well the advantage of

575
00:23:10,080 --> 00:23:13,620
level of security Assurance exactly yeah

576
00:23:13,620 --> 00:23:15,659
and fundamentally again you know we see

577
00:23:15,659 --> 00:23:17,460
this as layering on top of each other so

578
00:23:17,460 --> 00:23:18,960
again this is a you know kind of a rough

579
00:23:18,960 --> 00:23:21,179
picture but you know we still anticipate

580
00:23:21,179 --> 00:23:23,039
these traditional perimeter-based

581
00:23:23,039 --> 00:23:25,140
controls we're gonna have you know

582
00:23:25,140 --> 00:23:28,200
segmentation or micro segmentation uh

583
00:23:28,200 --> 00:23:30,960
underneath that inside of that perimeter

584
00:23:30,960 --> 00:23:34,679
right uh you typically cni will sit even

585
00:23:34,679 --> 00:23:37,500
on top of that as another layer and we

586
00:23:37,500 --> 00:23:39,780
want the mesh to fit exactly on top of

587
00:23:39,780 --> 00:23:42,120
all those right and again the advantage

588
00:23:42,120 --> 00:23:45,120
here is that we can start to relax some

589
00:23:45,120 --> 00:23:46,799
of these lower level policies that are

590
00:23:46,799 --> 00:23:48,000
hard to maintain

591
00:23:48,000 --> 00:23:51,419
in favor of policies allowing these

592
00:23:51,419 --> 00:23:53,039
gateways to communicate

593
00:23:53,039 --> 00:23:55,620
and back that with identity-based policy

594
00:23:55,620 --> 00:23:58,520
to instead

595
00:24:00,960 --> 00:24:03,299
yeah so again you know why do we do this

596
00:24:03,299 --> 00:24:05,940
the main motivation for you know in in

597
00:24:05,940 --> 00:24:08,039
general uh identity-based segmentation

598
00:24:08,039 --> 00:24:10,200
hopefully people gets why we would want

599
00:24:10,200 --> 00:24:11,880
to do this in the context of moving

600
00:24:11,880 --> 00:24:14,280
towards a ZTA why might we want to

601
00:24:14,280 --> 00:24:16,740
manage multiple tiers of policy at the

602
00:24:16,740 --> 00:24:19,080
same time while we're doing that you

603
00:24:19,080 --> 00:24:20,900
know again it's really all about

604
00:24:20,900 --> 00:24:22,740
appeasing your current regulatory

605
00:24:22,740 --> 00:24:24,179
requirements your current control

606
00:24:24,179 --> 00:24:26,580
requirements and the knowledge of your

607
00:24:26,580 --> 00:24:29,400
current security team and the Auditors

608
00:24:29,400 --> 00:24:31,020
Regulators you have to deal with right

609
00:24:31,020 --> 00:24:34,140
they may not be in some places you know

610
00:24:34,140 --> 00:24:35,940
they're very forward for example the Air

611
00:24:35,940 --> 00:24:37,799
Force is a very forward organization

612
00:24:37,799 --> 00:24:40,559
where I can I don't need a perimeter and

613
00:24:40,559 --> 00:24:42,120
I don't need to to show a bunch of these

614
00:24:42,120 --> 00:24:44,640
controls to get it approval to get an

615
00:24:44,640 --> 00:24:49,320
ATO other parts are not the same right

616
00:24:49,320 --> 00:24:52,679
and sorry yeah and so we want that

617
00:24:52,679 --> 00:24:54,600
defense in depth to be able to prove

618
00:24:54,600 --> 00:24:56,880
both the original perimeter-based

619
00:24:56,880 --> 00:24:59,100
controls and that we can do better and

620
00:24:59,100 --> 00:25:00,840
that we can facilitate the organization

621
00:25:00,840 --> 00:25:03,299
moving faster because we're not having

622
00:25:03,299 --> 00:25:07,020
to manage brutal policy at a lower layer

623
00:25:07,020 --> 00:25:09,299
most of the time the

624
00:25:09,299 --> 00:25:11,760
is an acceptance accepting the policies

625
00:25:11,760 --> 00:25:15,419
is due to the complexity and that way in

626
00:25:15,419 --> 00:25:17,340
the tail case of identity based policies

627
00:25:17,340 --> 00:25:19,980
we are able to express it in terms of

628
00:25:19,980 --> 00:25:22,200
entities that people can understand

629
00:25:22,200 --> 00:25:24,620
exactly this application and this

630
00:25:24,620 --> 00:25:27,240
process can talk to this application in

631
00:25:27,240 --> 00:25:30,299
this process exactly that's one of the

632
00:25:30,299 --> 00:25:32,820
policy becomes a lot more yeah policy is

633
00:25:32,820 --> 00:25:34,080
more maintainable because it's more

634
00:25:34,080 --> 00:25:36,120
readable and it's in terms that are

635
00:25:36,120 --> 00:25:37,559
closer to what a developer thinks about

636
00:25:37,559 --> 00:25:40,140
service names and service identities not

637
00:25:40,140 --> 00:25:43,340
like what subnet am I on

638
00:25:44,340 --> 00:25:46,919
and again these can continue to exist uh

639
00:25:46,919 --> 00:25:50,580
in and we expect them too

640
00:25:50,580 --> 00:25:52,679
um we'll end and take questions for for

641
00:25:52,679 --> 00:25:54,600
whatever time we have left but just to

642
00:25:54,600 --> 00:25:58,380
give you a teaser here uh SB 800 207a

643
00:25:58,380 --> 00:26:00,480
will be coming out in this calendar year

644
00:26:00,480 --> 00:26:04,620
in 2023 uh around these ideas this idea

645
00:26:04,620 --> 00:26:07,440
of starting to use identity based uh

646
00:26:07,440 --> 00:26:10,140
policy enforcement points to help span

647
00:26:10,140 --> 00:26:14,880
traditional perimeter-based uh controls

648
00:26:14,880 --> 00:26:16,620
uh and with that I think we have

649
00:26:16,620 --> 00:26:18,299
hopefully a little bit of time left for

650
00:26:18,299 --> 00:26:19,740
for some questions I think maybe about

651
00:26:19,740 --> 00:26:22,080
five or seven minutes uh so please any

652
00:26:22,080 --> 00:26:23,940
any questions for for either of us for

653
00:26:23,940 --> 00:26:26,360
both of us

654
00:26:27,659 --> 00:26:30,140
yeah

655
00:26:42,620 --> 00:26:46,740
looking at the combinations like a

656
00:26:46,740 --> 00:26:50,400
CEO Opa and Google's kind of Zanzibar a

657
00:26:50,400 --> 00:26:53,880
back yeah exactly yeah and so we and you

658
00:26:53,880 --> 00:26:55,320
know for example ngac Next Generation

659
00:26:55,320 --> 00:26:57,059
access control is an access control

660
00:26:57,059 --> 00:26:59,159
standard uh that nist is working on

661
00:26:59,159 --> 00:27:00,779
that's an ABAC kind of a similar

662
00:27:00,779 --> 00:27:02,940
conceptually to what Zanzibar is used to

663
00:27:02,940 --> 00:27:05,640
implement uh and so yeah exactly you

664
00:27:05,640 --> 00:27:07,260
know we can Implement you know all of

665
00:27:07,260 --> 00:27:08,940
these orange pieces are policy

666
00:27:08,940 --> 00:27:11,279
enforcement points and we can choose

667
00:27:11,279 --> 00:27:12,720
whether we integrate with an external

668
00:27:12,720 --> 00:27:14,580
system to apply you know potentially

669
00:27:14,580 --> 00:27:17,100
very rich policy because we have like a

670
00:27:17,100 --> 00:27:19,140
full ABAC like a Zanzibar kind of a

671
00:27:19,140 --> 00:27:20,880
system but we can also apply much

672
00:27:20,880 --> 00:27:22,380
simpler policies that are like already

673
00:27:22,380 --> 00:27:24,840
built into Envoy right for example you

674
00:27:24,840 --> 00:27:26,159
know just simple service to service

675
00:27:26,159 --> 00:27:28,559
access with our back right and so that's

676
00:27:28,559 --> 00:27:31,260
a spectrum there so yeah the the mesh is

677
00:27:31,260 --> 00:27:34,020
bringing enforcement and what you choose

678
00:27:34,020 --> 00:27:36,419
to use as your decision system you know

679
00:27:36,419 --> 00:27:37,860
as long as it integrates with the mesh

680
00:27:37,860 --> 00:27:39,840
it's it's all good right and we

681
00:27:39,840 --> 00:27:41,760
typically see for example Opa used with

682
00:27:41,760 --> 00:27:43,799
Envoy actually enforcing the policy but

683
00:27:43,799 --> 00:27:45,720
Opa acting is the decision point right

684
00:27:45,720 --> 00:27:48,419
is is a very common deployment

685
00:27:48,419 --> 00:27:51,320
and all that is possible because of

686
00:27:51,320 --> 00:27:54,720
these capabilities of proxy one it can

687
00:27:54,720 --> 00:27:57,240
do the enforcement doing using an

688
00:27:57,240 --> 00:27:59,520
in-process program like a jot filter

689
00:27:59,520 --> 00:28:02,520
which Compares simply the uh the

690
00:28:02,520 --> 00:28:04,320
resources against the claims and so on

691
00:28:04,320 --> 00:28:08,700
or you can use external apis or you know

692
00:28:08,700 --> 00:28:10,200
you can call the regular authorization

693
00:28:10,200 --> 00:28:11,480
service

694
00:28:11,480 --> 00:28:14,279
external so all this because of

695
00:28:14,279 --> 00:28:17,159
extensible APA the proxies all these

696
00:28:17,159 --> 00:28:20,480
goodies are possible yeah

697
00:28:21,059 --> 00:28:22,740
Authentication

698
00:28:22,740 --> 00:28:25,620
from the authorization decision point so

699
00:28:25,620 --> 00:28:27,059
we're no longer you know relying on

700
00:28:27,059 --> 00:28:29,100
active directors to do it all by

701
00:28:29,100 --> 00:28:30,299
creating

702
00:28:30,299 --> 00:28:31,620
Capital right we're talking about

703
00:28:31,620 --> 00:28:33,059
separating the two validating the

704
00:28:33,059 --> 00:28:34,919
identity and then applying a dynamic

705
00:28:34,919 --> 00:28:36,900
Precision points based on attributes and

706
00:28:36,900 --> 00:28:39,299
contract specific awareness that's the

707
00:28:39,299 --> 00:28:41,940
goal to get to you can certainly start

708
00:28:41,940 --> 00:28:43,500
by delegating the active directory

709
00:28:43,500 --> 00:28:45,480
because that encodes your current policy

710
00:28:45,480 --> 00:28:47,940
right and so we don't you know I don't

711
00:28:47,940 --> 00:28:49,679
want to paint this as a picture of like

712
00:28:49,679 --> 00:28:52,140
do this perfectly the whole goal is to

713
00:28:52,140 --> 00:28:54,419
give us Stepping Stones to get to kind

714
00:28:54,419 --> 00:28:56,520
of that Ideal World where we're doing

715
00:28:56,520 --> 00:28:59,580
very rich and user-based application

716
00:28:59,580 --> 00:29:02,880
context aware policy on every hop that's

717
00:29:02,880 --> 00:29:05,460
all to get to if the policy is in active

718
00:29:05,460 --> 00:29:07,140
directory today and we can use that to

719
00:29:07,140 --> 00:29:09,900
do users or authorization then that's

720
00:29:09,900 --> 00:29:12,720
the perfect place to start with one of

721
00:29:12,720 --> 00:29:14,700
the Integrations and then go from there

722
00:29:14,700 --> 00:29:16,500
into a richer policy engine where you

723
00:29:16,500 --> 00:29:18,419
need it

724
00:29:18,419 --> 00:29:21,059
so in other words it offers a very

725
00:29:21,059 --> 00:29:23,460
graded path now rather than one day

726
00:29:23,460 --> 00:29:26,520
turning out the light and so on exactly

727
00:29:26,520 --> 00:29:29,480
have another question here

728
00:29:32,960 --> 00:29:36,240
yeah so it can be any number of things

729
00:29:36,240 --> 00:29:38,580
yeah it can be you know they're uh yeah

730
00:29:38,580 --> 00:29:40,200
typically it's going to be like a CD

731
00:29:40,200 --> 00:29:42,120
system that's coordinating there's also

732
00:29:42,120 --> 00:29:43,559
a variety of like vendor products that

733
00:29:43,559 --> 00:29:45,360
do online policy pushing and like

734
00:29:45,360 --> 00:29:46,740
multi-cluster management and stuff like

735
00:29:46,740 --> 00:29:49,140
that as well and you know any of those

736
00:29:49,140 --> 00:29:51,659
are good ways to do it the you know in

737
00:29:51,659 --> 00:29:53,460
my opinion the important thing is to get

738
00:29:53,460 --> 00:29:54,840
the right abstractions for your

739
00:29:54,840 --> 00:29:56,700
application developers and fit them into

740
00:29:56,700 --> 00:29:59,399
your workflow their workflow in a in the

741
00:29:59,399 --> 00:30:01,200
right way and then it shouldn't really

742
00:30:01,200 --> 00:30:03,120
matter if it's the CD system that does

743
00:30:03,120 --> 00:30:05,279
it or some other engine because they

744
00:30:05,279 --> 00:30:06,539
should be interacting with it in a way

745
00:30:06,539 --> 00:30:07,919
that's abstracted and controlled by the

746
00:30:07,919 --> 00:30:09,960
platform team

747
00:30:09,960 --> 00:30:12,779
so that's why we want to call it as a

748
00:30:12,779 --> 00:30:15,179
super controlled plane that sits on top

749
00:30:15,179 --> 00:30:17,880
of the individual service instance

750
00:30:17,880 --> 00:30:19,679
control phase yeah and it doesn't

751
00:30:19,679 --> 00:30:21,000
necessarily so control plane implies

752
00:30:21,000 --> 00:30:22,860
runtime it doesn't necessarily have to

753
00:30:22,860 --> 00:30:24,299
be a runtime system it can be a system

754
00:30:24,299 --> 00:30:26,460
like a CDE system that's pushing it but

755
00:30:26,460 --> 00:30:28,140
it can also be a runtime online system

756
00:30:28,140 --> 00:30:30,299
that's acting as a control plane getting

757
00:30:30,299 --> 00:30:32,340
data and pushing it around both of those

758
00:30:32,340 --> 00:30:33,779
are good ways it depends on what you

759
00:30:33,779 --> 00:30:35,159
need out of the system and what are the

760
00:30:35,159 --> 00:30:37,320
properties uh and what's the operational

761
00:30:37,320 --> 00:30:40,020
investment you want to make for what is

762
00:30:40,020 --> 00:30:41,279
right

763
00:30:41,279 --> 00:30:43,620
all right

764
00:30:43,620 --> 00:30:48,740
so early on you had a requirement for

765
00:30:48,740 --> 00:30:51,960
cryptographic Authentication yes

766
00:30:51,960 --> 00:30:52,919
yes

767
00:30:52,919 --> 00:30:54,600
but now you've talked a lot about

768
00:30:54,600 --> 00:30:57,659
delegating out those control tabs to

769
00:30:57,659 --> 00:31:01,580
external programs 100 uh

770
00:31:05,520 --> 00:31:07,679
uh it's just random garbage would work

771
00:31:07,679 --> 00:31:09,240
equally well to a cryptographic

772
00:31:09,240 --> 00:31:12,419
identifier uh it could potentially right

773
00:31:12,419 --> 00:31:13,860
so like yeah

774
00:31:13,860 --> 00:31:16,320
um you know it doesn't really matter how

775
00:31:16,320 --> 00:31:19,080
we encode that identity as long as we

776
00:31:19,080 --> 00:31:20,820
all agree on what the identities mean

777
00:31:20,820 --> 00:31:23,100
and we have some mechanism of runtime to

778
00:31:23,100 --> 00:31:24,779
authenticate it right so at a service

779
00:31:24,779 --> 00:31:26,520
you know at a service service layer of

780
00:31:26,520 --> 00:31:27,480
course we want to leverage spiffy

781
00:31:27,480 --> 00:31:29,159
because that's a good standard but you

782
00:31:29,159 --> 00:31:30,539
know at the end user layer it could be

783
00:31:30,539 --> 00:31:31,860
you know whatever you want right it

784
00:31:31,860 --> 00:31:33,299
doesn't really matter

785
00:31:33,299 --> 00:31:35,340
um and and you know the SP for example

786
00:31:35,340 --> 00:31:37,620
won't be strongly opinionated on that

787
00:31:37,620 --> 00:31:39,539
yeah that's why he said you can have

788
00:31:39,539 --> 00:31:42,179
either a custom authentication or one of

789
00:31:42,179 --> 00:31:45,360
the yadc providers open ID connect yeah

790
00:31:45,360 --> 00:31:46,919
because we we very frequently see you

791
00:31:46,919 --> 00:31:49,080
know yes might do oidc

792
00:31:49,080 --> 00:31:51,000
actually yeah oidc or oauth and they're

793
00:31:51,000 --> 00:31:52,740
just holding tokens right and so it

794
00:31:52,740 --> 00:31:56,120
might as well just be an opaque thing

795
00:31:56,700 --> 00:31:58,860
exactly right so there's plenty of room

796
00:31:58,860 --> 00:32:01,699
to do exactly

797
00:32:01,980 --> 00:32:03,299
what

798
00:32:03,299 --> 00:32:05,340
yeah exactly and to be clear you know

799
00:32:05,340 --> 00:32:07,740
encryption and Transit we just to tee

800
00:32:07,740 --> 00:32:09,600
off that a little bit why do we say

801
00:32:09,600 --> 00:32:11,100
encryption and Transit is required it's

802
00:32:11,100 --> 00:32:12,419
not because encryption Trends is good

803
00:32:12,419 --> 00:32:13,679
it's because we want message

804
00:32:13,679 --> 00:32:16,200
authenticity and we want eavesdropping

805
00:32:16,200 --> 00:32:18,720
protection right and so we can achieve

806
00:32:18,720 --> 00:32:19,980
the like message and message

807
00:32:19,980 --> 00:32:21,419
authenticity is the really important one

808
00:32:21,419 --> 00:32:22,559
right you may or may not care about

809
00:32:22,559 --> 00:32:24,539
eavesdroppers uh being able to see what

810
00:32:24,539 --> 00:32:26,220
the requests are but you certainly want

811
00:32:26,220 --> 00:32:27,539
to know that it hasn't been tampered

812
00:32:27,539 --> 00:32:29,399
with because otherwise all these other

813
00:32:29,399 --> 00:32:31,559
checks are meaningless right who cares

814
00:32:31,559 --> 00:32:33,539
what the identity is If the message if

815
00:32:33,539 --> 00:32:34,679
somebody stuffed the envelope with

816
00:32:34,679 --> 00:32:36,539
something different right

817
00:32:36,539 --> 00:32:38,279
um and so it really has to start there

818
00:32:38,279 --> 00:32:40,440
with the Assurance of the data on the

819
00:32:40,440 --> 00:32:43,559
wire and then we can use that to to kick

820
00:32:43,559 --> 00:32:46,220
off policy down

821
00:32:46,320 --> 00:32:49,820
any other questions yeah

822
00:33:24,059 --> 00:33:25,760
yeah

823
00:33:25,760 --> 00:33:28,500
exactly so the question is is roughly

824
00:33:28,500 --> 00:33:30,659
just a paraphrase you know can't have

825
00:33:30,659 --> 00:33:32,340
Auditors actually approve this can I can

826
00:33:32,340 --> 00:33:33,899
I actually do this pattern is that

827
00:33:33,899 --> 00:33:36,059
roughly it yeah uh and the answer is yes

828
00:33:36,059 --> 00:33:37,980
across the board we've seen a bunch of

829
00:33:37,980 --> 00:33:39,059
different Auditors under different

830
00:33:39,059 --> 00:33:41,279
regulatory regimes approve these style

831
00:33:41,279 --> 00:33:43,260
things whether that's folks like the air

832
00:33:43,260 --> 00:33:46,679
force uh AOS who have approved ATO for a

833
00:33:46,679 --> 00:33:49,320
lot of uh you know Federal moderate to

834
00:33:49,320 --> 00:33:52,260
high systems on this kind of thing we

835
00:33:52,260 --> 00:33:53,880
also see it in folks that are subject to

836
00:33:53,880 --> 00:33:56,760
PCI right and and for years actually

837
00:33:56,760 --> 00:33:59,460
we've seen folks Implement a variety of

838
00:33:59,460 --> 00:34:02,700
PCI controls using uh this kind of stuff

839
00:34:02,700 --> 00:34:04,799
right so this is something that we're

840
00:34:04,799 --> 00:34:06,960
seeing and that's why we're moving to

841
00:34:06,960 --> 00:34:09,179
start to write this as a standard right

842
00:34:09,179 --> 00:34:11,040
not because it's it's brand new and like

843
00:34:11,040 --> 00:34:13,020
we think it's a cool idea but we've seen

844
00:34:13,020 --> 00:34:15,060
this implemented we're seeing Regulators

845
00:34:15,060 --> 00:34:18,239
start to accept it and so our goal in

846
00:34:18,239 --> 00:34:20,940
codifying it as an SP is to really push

847
00:34:20,940 --> 00:34:22,800
that to those Regulators to those

848
00:34:22,800 --> 00:34:25,619
approvers to say this is a good thing

849
00:34:25,619 --> 00:34:28,679
you should accept this as a first step

850
00:34:28,679 --> 00:34:30,839
for educating them to move the ball to

851
00:34:30,839 --> 00:34:32,460
get to the end state that we all want

852
00:34:32,460 --> 00:34:34,379
which is like identity based policy so

853
00:34:34,379 --> 00:34:36,418
in other words the lessons learned that

854
00:34:36,418 --> 00:34:39,119
in two of the implementation that that

855
00:34:39,119 --> 00:34:42,000
talked about as really uh is going to be

856
00:34:42,000 --> 00:34:44,879
a good input into this document that we

857
00:34:44,879 --> 00:34:46,440
are yeah was there a follow-up there

858
00:34:46,440 --> 00:34:48,560
yeah

859
00:34:56,399 --> 00:34:58,260
yeah so we're starting to build those

860
00:34:58,260 --> 00:35:01,080
out so for example there is an istio to

861
00:35:01,080 --> 00:35:05,040
uh nist SB 853 mapping uh for example

862
00:35:05,040 --> 00:35:06,599
and that's actually in the form of an

863
00:35:06,599 --> 00:35:10,140
oscow manifest that can be used to feed

864
00:35:10,140 --> 00:35:12,240
that in and check the Assurance of the

865
00:35:12,240 --> 00:35:14,520
system at runtime right uh so that's

866
00:35:14,520 --> 00:35:16,079
it's early days for that but those are

867
00:35:16,079 --> 00:35:17,579
things that are being developed there

868
00:35:17,579 --> 00:35:19,680
and the goal is to push a lot of this

869
00:35:19,680 --> 00:35:21,240
into open source right so things like

870
00:35:21,240 --> 00:35:22,619
oscow to open source compliance

871
00:35:22,619 --> 00:35:24,359
assessment language lets us do

872
00:35:24,359 --> 00:35:27,060
programmatic uh checks a computer can

873
00:35:27,060 --> 00:35:28,440
verify that you're implementing controls

874
00:35:28,440 --> 00:35:30,720
not a human auditor who's quinting at it

875
00:35:30,720 --> 00:35:32,940
and checks the box right that moves us

876
00:35:32,940 --> 00:35:33,900
to a world where we can do it

877
00:35:33,900 --> 00:35:37,320
continuously my goal is that we can get

878
00:35:37,320 --> 00:35:39,960
basically all the the big infrastructure

879
00:35:39,960 --> 00:35:42,599
projects that we're depending on to

880
00:35:42,599 --> 00:35:45,119
produce and maintain oscow definitions

881
00:35:45,119 --> 00:35:47,220
of their components that's the you know

882
00:35:47,220 --> 00:35:49,560
that's one of my longer term goals to

883
00:35:49,560 --> 00:35:52,339
try and implement

884
00:36:09,359 --> 00:36:12,240
so the the important part here is not

885
00:36:12,240 --> 00:36:13,680
how the policy enforcement is

886
00:36:13,680 --> 00:36:16,079
implemented right so I mentioned Envoy a

887
00:36:16,079 --> 00:36:18,240
few times here but you know all the

888
00:36:18,240 --> 00:36:19,680
concepts that we're talking about are

889
00:36:19,680 --> 00:36:20,760
independent of the data plane

890
00:36:20,760 --> 00:36:22,500
implementation right so as long as

891
00:36:22,500 --> 00:36:23,940
you're doing those five checks I don't

892
00:36:23,940 --> 00:36:25,680
care you know you shouldn't care nobody

893
00:36:25,680 --> 00:36:27,839
really needs to care if it's evpf or if

894
00:36:27,839 --> 00:36:30,660
it's Envoy or or if it's some or a VPN

895
00:36:30,660 --> 00:36:33,480
like you you know it's not that part is

896
00:36:33,480 --> 00:36:35,700
not very important right there will be

897
00:36:35,700 --> 00:36:38,040
Security in runtime and operational

898
00:36:38,040 --> 00:36:39,960
trade-offs to different implementations

899
00:36:39,960 --> 00:36:43,079
and we are starting to do some write-ups

900
00:36:43,079 --> 00:36:46,020
kind of starting to analyze that right I

901
00:36:46,020 --> 00:36:47,640
fully expect a lot of this policy to

902
00:36:47,640 --> 00:36:50,040
move into ebpf as an accelerator right

903
00:36:50,040 --> 00:36:52,079
anything that we can move out of user

904
00:36:52,079 --> 00:36:53,460
space and into the kernel to be able to

905
00:36:53,460 --> 00:36:56,160
reject a request earlier without having

906
00:36:56,160 --> 00:36:58,200
to do those context switches is going to

907
00:36:58,200 --> 00:37:00,359
pay a lot of dividends for for you know

908
00:37:00,359 --> 00:37:01,740
higher throughput and higher performance

909
00:37:01,740 --> 00:37:04,800
systems right and so in that sense we I

910
00:37:04,800 --> 00:37:07,320
expect that ebpf will be widely used as

911
00:37:07,320 --> 00:37:09,119
an accelerator for data plane policy

912
00:37:09,119 --> 00:37:11,160
Apple education right

913
00:37:11,160 --> 00:37:13,140
so in other words providing coverage for

914
00:37:13,140 --> 00:37:15,420
the various events is what is important

915
00:37:15,420 --> 00:37:17,640
to us rather than what will help us

916
00:37:17,640 --> 00:37:21,060
identify the events in terms of the

917
00:37:21,060 --> 00:37:23,700
kernel triggers and things yeah exactly

918
00:37:23,700 --> 00:37:26,400
yeah already are we do we have time for

919
00:37:26,400 --> 00:37:28,920
more how are we doing on time

920
00:37:28,920 --> 00:37:30,480
I'm not nobody's come with the crew to

921
00:37:30,480 --> 00:37:32,040
get me off the stage yet so we can keep

922
00:37:32,040 --> 00:37:34,560
doing questions until until that happens

923
00:37:34,560 --> 00:37:39,259
any other questions from from folks

924
00:37:42,740 --> 00:37:45,180
yes they uh yes they will be available

925
00:37:45,180 --> 00:37:46,260
the conference should make them

926
00:37:46,260 --> 00:37:48,180
available uh if not

927
00:37:48,180 --> 00:37:49,800
um I think we have our contact info here

928
00:37:49,800 --> 00:37:51,359
you know just shoot an email worst case

929
00:37:51,359 --> 00:37:53,099
if they don't they don't pop up in a

930
00:37:53,099 --> 00:37:55,440
week already awesome well hey y'all have

931
00:37:55,440 --> 00:37:57,180
been an awesome audience I really

932
00:37:57,180 --> 00:37:59,099
appreciate the good questions uh thank

933
00:37:59,099 --> 00:38:00,260
you thanks for your time

934
00:38:00,260 --> 00:38:02,909
[Applause]

