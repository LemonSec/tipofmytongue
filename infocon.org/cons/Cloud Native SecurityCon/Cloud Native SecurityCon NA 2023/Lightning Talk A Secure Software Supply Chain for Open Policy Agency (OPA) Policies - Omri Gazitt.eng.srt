1
00:00:00,659 --> 00:00:03,059
all right we all do it together

2
00:00:03,060 --> 00:00:05,460
thank you very much my name is Omri

3
00:00:05,460 --> 00:00:08,220
Gazette I am the co-founder and CEO of

4
00:00:08,220 --> 00:00:10,860
asserto which is a developer platform

5
00:00:10,860 --> 00:00:13,679
for building fine-grained policy based

6
00:00:13,679 --> 00:00:16,139
real-time access control for cloud

7
00:00:16,139 --> 00:00:19,619
native applications we're also the

8
00:00:19,619 --> 00:00:22,320
primary maintainers of topaz which is an

9
00:00:22,320 --> 00:00:24,439
open source authorization project

10
00:00:24,439 --> 00:00:28,199
for API and application authorization

11
00:00:28,199 --> 00:00:30,779
and both of those projects are heavy

12
00:00:30,779 --> 00:00:33,600
users of the open policy agent oppa and

13
00:00:33,600 --> 00:00:36,660
so we care a lot about secure software

14
00:00:36,660 --> 00:00:39,120
Supply chains for open policies and I'll

15
00:00:39,120 --> 00:00:41,879
talk a little bit about how we do that

16
00:00:41,879 --> 00:00:44,520
so first of all Opa policies are

17
00:00:44,520 --> 00:00:46,620
becoming important application life

18
00:00:46,620 --> 00:00:49,440
cycle artifacts and as such they need to

19
00:00:49,440 --> 00:00:52,260
be secured they're used in kubernetes

20
00:00:52,260 --> 00:00:53,600
emission control

21
00:00:53,600 --> 00:00:56,579
conf test which is applying policy for

22
00:00:56,579 --> 00:00:59,579
configuration files you can use Opa as a

23
00:00:59,579 --> 00:01:01,020
general decision engine that you can

24
00:01:01,020 --> 00:01:03,180
embed into your application you can also

25
00:01:03,180 --> 00:01:05,880
use it for app and application app and

26
00:01:05,880 --> 00:01:08,720
API authorization like I said with topaz

27
00:01:08,720 --> 00:01:13,260
so what's so hard about securing oppa

28
00:01:13,260 --> 00:01:15,600
policies well policies are by default

29
00:01:15,600 --> 00:01:18,000
built into tar balls and tar balls don't

30
00:01:18,000 --> 00:01:19,979
really lend themselves well to

31
00:01:19,979 --> 00:01:22,619
application to sorry to secure software

32
00:01:22,619 --> 00:01:25,380
Supply chains and so fortunately in the

33
00:01:25,380 --> 00:01:27,119
ecosystem we have the open container

34
00:01:27,119 --> 00:01:29,340
initiative oci it's been around for

35
00:01:29,340 --> 00:01:31,439
about eight years Linux Foundation

36
00:01:31,439 --> 00:01:34,619
project and now has been taught to be

37
00:01:34,619 --> 00:01:37,200
able to contain other artifacts besides

38
00:01:37,200 --> 00:01:40,500
Docker images and so at the same time we

39
00:01:40,500 --> 00:01:44,520
want the docker uh workflow for being

40
00:01:44,520 --> 00:01:46,320
able to build and tag and push and pull

41
00:01:46,320 --> 00:01:48,780
policies just like Docker containers and

42
00:01:48,780 --> 00:01:50,399
for that we have the open policy

43
00:01:50,399 --> 00:01:52,500
containers project which is a cncf

44
00:01:52,500 --> 00:01:56,040
Sandbox project for doing exactly that

45
00:01:56,040 --> 00:01:58,020
um the third thing we need is metadata

46
00:01:58,020 --> 00:01:59,340
so we need to be able to store

47
00:01:59,340 --> 00:02:01,079
signatures and things like that and

48
00:02:01,079 --> 00:02:02,939
verify signatures and fortunately oci

49
00:02:02,939 --> 00:02:04,860
allows us to do that and then last but

50
00:02:04,860 --> 00:02:07,079
not least we have six door which is the

51
00:02:07,079 --> 00:02:08,940
cosine tool is quickly emerging as the

52
00:02:08,940 --> 00:02:10,739
way to be able to compute signatures

53
00:02:10,739 --> 00:02:14,340
over images and verify those signatures

54
00:02:14,340 --> 00:02:17,400
so let's talk about how these pieces all

55
00:02:17,400 --> 00:02:19,260
fit together like I said policy the

56
00:02:19,260 --> 00:02:22,260
policy CLI is the docker workflow for

57
00:02:22,260 --> 00:02:25,620
Opa policies and you know I can show as

58
00:02:25,620 --> 00:02:27,840
opposed to tell I have a gist here that

59
00:02:27,840 --> 00:02:30,120
you know you can click the link on uh

60
00:02:30,120 --> 00:02:32,940
I'm gonna save you the effort of uh

61
00:02:32,940 --> 00:02:36,060
installing various things and start this

62
00:02:36,060 --> 00:02:39,720
uh by using the policy CLI to create a

63
00:02:39,720 --> 00:02:41,900
sample hello world

64
00:02:41,900 --> 00:02:45,420
and because I can't really type and use

65
00:02:45,420 --> 00:02:47,580
the mic at the same time I'm going to

66
00:02:47,580 --> 00:02:49,739
use the up Arrow key as my friend here

67
00:02:49,739 --> 00:02:53,300
so this basically went off and created a

68
00:02:53,300 --> 00:02:57,480
hello world Rego file and I am going to

69
00:02:57,480 --> 00:03:00,480
be able to build a policy image just

70
00:03:00,480 --> 00:03:02,459
like Docker build we give it a source

71
00:03:02,459 --> 00:03:05,040
directory and attack a container image

72
00:03:05,040 --> 00:03:06,780
and a tag and it will go build for us

73
00:03:06,780 --> 00:03:09,959
and in fact the policy CLI allows you to

74
00:03:09,959 --> 00:03:12,599
list images so this one was created 10

75
00:03:12,599 --> 00:03:15,900
seconds ago and uh lastly we can push it

76
00:03:15,900 --> 00:03:18,480
to a container registry here we're using

77
00:03:18,480 --> 00:03:21,659
ghcr GitHub container registry so as

78
00:03:21,659 --> 00:03:24,440
simple as that building these things

79
00:03:24,440 --> 00:03:27,599
next we want to be able to sign them so

80
00:03:27,599 --> 00:03:30,120
we're going to use cosine for that and

81
00:03:30,120 --> 00:03:31,980
again I'm going to pick this story up

82
00:03:31,980 --> 00:03:33,959
rather than generate a key pair in front

83
00:03:33,959 --> 00:03:35,819
of your very eyes and and all that I'm

84
00:03:35,819 --> 00:03:39,540
just going to use cosine to sign the

85
00:03:39,540 --> 00:03:42,480
container image that we just created so

86
00:03:42,480 --> 00:03:44,220
here it's complaining that I'm passing

87
00:03:44,220 --> 00:03:45,840
in a tag instead of a signature ignore

88
00:03:45,840 --> 00:03:49,340
that I'm going to verify that signature

89
00:03:49,340 --> 00:03:51,959
you know so it's going to go out look up

90
00:03:51,959 --> 00:03:55,560
The annotation and uh you know indeed it

91
00:03:55,560 --> 00:03:57,420
has actually verified the signature

92
00:03:57,420 --> 00:03:58,799
based on the public file that we

93
00:03:58,799 --> 00:04:01,019
publicly file that we created so those

94
00:04:01,019 --> 00:04:03,000
are the components of being able to

95
00:04:03,000 --> 00:04:04,980
build this into a secure software supply

96
00:04:04,980 --> 00:04:07,560
chain last thing in the last 30 seconds

97
00:04:07,560 --> 00:04:09,659
I'll talk about is how do you actually

98
00:04:09,659 --> 00:04:11,640
tell oppa to use one of these container

99
00:04:11,640 --> 00:04:13,860
images well you create a new service of

100
00:04:13,860 --> 00:04:17,220
type oci give it some credentials and

101
00:04:17,220 --> 00:04:19,380
then in the bundles you pass in as the

102
00:04:19,380 --> 00:04:22,860
resource the fully qualified container

103
00:04:22,860 --> 00:04:23,900
image

104
00:04:23,900 --> 00:04:27,180
topaz does the same thing you can use

105
00:04:27,180 --> 00:04:29,639
topaz configure or pass it as a resource

106
00:04:29,639 --> 00:04:31,620
a container image and it'll go do its

107
00:04:31,620 --> 00:04:32,460
thing

108
00:04:32,460 --> 00:04:34,680
that's all the time we have if you want

109
00:04:34,680 --> 00:04:37,380
the slides and the clickable links scan

110
00:04:37,380 --> 00:04:40,259
the QR code and you can always find me

111
00:04:40,259 --> 00:04:43,320
after for more questions thank you very

112
00:04:43,320 --> 00:04:44,560
much

113
00:04:44,560 --> 00:04:49,279
[Applause]

