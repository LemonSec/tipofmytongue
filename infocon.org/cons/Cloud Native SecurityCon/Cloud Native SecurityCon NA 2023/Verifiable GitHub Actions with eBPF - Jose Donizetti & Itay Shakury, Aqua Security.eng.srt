1
00:00:00,420 --> 00:00:02,940
all right hi everyone

2
00:00:02,940 --> 00:00:05,279
um my name is itaisha curry

3
00:00:05,279 --> 00:00:07,379
I lead the open source team at Aqua

4
00:00:07,379 --> 00:00:08,599
security

5
00:00:08,599 --> 00:00:10,800
I was supposed to give this talk

6
00:00:10,800 --> 00:00:13,860
together with my colleague Jose but he

7
00:00:13,860 --> 00:00:17,039
got stuck in the storm so

8
00:00:17,039 --> 00:00:17,699
um

9
00:00:17,699 --> 00:00:20,100
Jose was the inevitable part of this

10
00:00:20,100 --> 00:00:22,439
presentation but unfortunately he

11
00:00:22,439 --> 00:00:24,900
couldn't make it

12
00:00:24,900 --> 00:00:27,599
um so we're going to talk today about

13
00:00:27,599 --> 00:00:29,939
something you probably haven't heard yet

14
00:00:29,939 --> 00:00:32,640
in this conference which is supply chain

15
00:00:32,640 --> 00:00:33,960
security

16
00:00:33,960 --> 00:00:35,300
yeah

17
00:00:35,300 --> 00:00:39,420
but I hope it will be a refreshing uh

18
00:00:39,420 --> 00:00:41,640
one for you because we want to see if we

19
00:00:41,640 --> 00:00:43,200
can take

20
00:00:43,200 --> 00:00:43,860
um

21
00:00:43,860 --> 00:00:47,520
Concepts or principles from the runtime

22
00:00:47,520 --> 00:00:50,100
security practice which we have some

23
00:00:50,100 --> 00:00:52,800
experience in and apply those into the

24
00:00:52,800 --> 00:00:54,420
build time

25
00:00:54,420 --> 00:00:57,000
specifically when I say random security

26
00:00:57,000 --> 00:01:01,500
experience I'm referring to our open

27
00:01:01,500 --> 00:01:04,260
source project that is called Tracy I

28
00:01:04,260 --> 00:01:06,299
know if you heard about it so I need to

29
00:01:06,299 --> 00:01:09,119
just set the level

30
00:01:09,119 --> 00:01:13,380
um Tracy uses evpf to tap into your

31
00:01:13,380 --> 00:01:14,400
system

32
00:01:14,400 --> 00:01:16,920
and give you access to hundreds of

33
00:01:16,920 --> 00:01:20,280
events that unveil how your system

34
00:01:20,280 --> 00:01:21,979
actually behaves

35
00:01:21,979 --> 00:01:25,200
moreover it can help you detect

36
00:01:25,200 --> 00:01:27,080
suspicious

37
00:01:27,080 --> 00:01:29,340
behavioral patterns

38
00:01:29,340 --> 00:01:31,140
in those events

39
00:01:31,140 --> 00:01:34,560
and either using a library of building

40
00:01:34,560 --> 00:01:38,220
signatures that we ship with with Tracy

41
00:01:38,220 --> 00:01:40,079
or you can write your own

42
00:01:40,079 --> 00:01:42,540
we call them behavioral signatures based

43
00:01:42,540 --> 00:01:45,420
on the event stream that we generate

44
00:01:45,420 --> 00:01:47,939
that's Tracy it's open source go check

45
00:01:47,939 --> 00:01:50,579
it out on GitHub just to make sure when

46
00:01:50,579 --> 00:01:52,799
I say Tracy you know what I mean

47
00:01:52,799 --> 00:01:54,720
all right so

48
00:01:54,720 --> 00:01:56,759
um I said we want to see if we can take

49
00:01:56,759 --> 00:01:58,860
random security Concepts like Tracy and

50
00:01:58,860 --> 00:02:00,899
apply them in the real time

51
00:02:00,899 --> 00:02:03,540
to explain the motivation for that I

52
00:02:03,540 --> 00:02:06,000
need to take you back a little bit

53
00:02:06,000 --> 00:02:08,639
just a couple of years ago

54
00:02:08,639 --> 00:02:10,679
um different times in Cloud native times

55
00:02:10,679 --> 00:02:12,180
you know a lot have happened in two

56
00:02:12,180 --> 00:02:16,440
years very early days for the supply

57
00:02:16,440 --> 00:02:18,860
chain security

58
00:02:18,860 --> 00:02:21,200
category

59
00:02:21,200 --> 00:02:24,860
before all the

60
00:02:24,860 --> 00:02:27,959
s-bomb craze before the executive order

61
00:02:27,959 --> 00:02:29,400
before

62
00:02:29,400 --> 00:02:33,000
tools and standards that didn't exist so

63
00:02:33,000 --> 00:02:34,920
early days

64
00:02:34,920 --> 00:02:37,800
um some meaningful attacks that happened

65
00:02:37,800 --> 00:02:41,099
and opened the our eyes and everyone

66
00:02:41,099 --> 00:02:43,220
else to look into this stuff

67
00:02:43,220 --> 00:02:46,500
specifically for us it was the code Cove

68
00:02:46,500 --> 00:02:48,360
a bridge I don't know if anyone here

69
00:02:48,360 --> 00:02:52,200
remembers that but basically he targeted

70
00:02:52,200 --> 00:02:55,260
GitHub actions users by

71
00:02:55,260 --> 00:02:55,980
um

72
00:02:55,980 --> 00:02:57,959
so the attackers were able to compromise

73
00:02:57,959 --> 00:03:00,660
a very popular GitHub action called Cove

74
00:03:00,660 --> 00:03:04,140
in code coverage scanning tool and

75
00:03:04,140 --> 00:03:06,900
through the Upstream of that Upstream

76
00:03:06,900 --> 00:03:08,519
they were able to actually compromise

77
00:03:08,519 --> 00:03:12,120
you or your build so classic supply

78
00:03:12,120 --> 00:03:13,140
chain

79
00:03:13,140 --> 00:03:15,780
attack and it made us and others things

80
00:03:15,780 --> 00:03:17,879
think what we can do

81
00:03:17,879 --> 00:03:21,480
to to protect against that at that time

82
00:03:21,480 --> 00:03:25,200
we still had the Tracy open sourced for

83
00:03:25,200 --> 00:03:28,620
a while Tracy was open source in 2019 so

84
00:03:28,620 --> 00:03:31,440
we thought why not why not just try and

85
00:03:31,440 --> 00:03:35,760
use Tracy in the pipeline

86
00:03:35,760 --> 00:03:37,560
um I was actually a little bit skeptical

87
00:03:37,560 --> 00:03:41,280
like can we run ebpf in a managed

88
00:03:41,280 --> 00:03:43,920
service like GitHub so apparently yes

89
00:03:43,920 --> 00:03:46,379
they don't care at all and Tracy just

90
00:03:46,379 --> 00:03:49,440
ran we wrapped it in a GitHub action

91
00:03:49,440 --> 00:03:51,360
that was the first incarnation of the

92
00:03:51,360 --> 00:03:53,580
Tracy action we just wrapped it in a

93
00:03:53,580 --> 00:03:55,260
GitHub action you add it to your

94
00:03:55,260 --> 00:03:57,239
pipeline it starts running in the

95
00:03:57,239 --> 00:03:59,099
background

96
00:03:59,099 --> 00:04:01,739
um it look it is looking for any of the

97
00:04:01,739 --> 00:04:03,720
suspicious behavioral patterns that are

98
00:04:03,720 --> 00:04:05,060
indicating

99
00:04:05,060 --> 00:04:09,299
and uh it worked it was a very

100
00:04:09,299 --> 00:04:11,939
um nice first step

101
00:04:11,939 --> 00:04:14,400
but

102
00:04:14,400 --> 00:04:16,918
first lesson that we learned

103
00:04:16,918 --> 00:04:18,600
is that

104
00:04:18,600 --> 00:04:20,220
the build time

105
00:04:20,220 --> 00:04:22,880
is not the same as production

106
00:04:22,880 --> 00:04:26,520
specifically Tracy had back then a

107
00:04:26,520 --> 00:04:28,080
limited set of signatures that we

108
00:04:28,080 --> 00:04:31,560
shipped it with and they were very

109
00:04:31,560 --> 00:04:35,100
tailored to production so

110
00:04:35,100 --> 00:04:36,360
um

111
00:04:36,360 --> 00:04:40,259
for example one of the signatures looked

112
00:04:40,259 --> 00:04:44,340
for let's take an example so enforcing

113
00:04:44,340 --> 00:04:46,259
immutable infrastructure this is

114
00:04:46,259 --> 00:04:47,940
something that we wanted to do in

115
00:04:47,940 --> 00:04:49,080
production

116
00:04:49,080 --> 00:04:50,340
you know immutable infrastructure

117
00:04:50,340 --> 00:04:52,259
basically you need to pre-bake your

118
00:04:52,259 --> 00:04:54,300
containers ship them to production you

119
00:04:54,300 --> 00:04:55,680
don't need to introduce any new software

120
00:04:55,680 --> 00:04:58,139
to production directly so that signature

121
00:04:58,139 --> 00:05:00,780
looked for any new executables being

122
00:05:00,780 --> 00:05:02,340
introduced

123
00:05:02,340 --> 00:05:04,440
in production

124
00:05:04,440 --> 00:05:06,840
a very good probably best practice to do

125
00:05:06,840 --> 00:05:10,080
in in the production but very bad thing

126
00:05:10,080 --> 00:05:11,960
to do in build time because the build

127
00:05:11,960 --> 00:05:15,060
server pretty much has only one job

128
00:05:15,060 --> 00:05:17,520
which is to produce new executables so

129
00:05:17,520 --> 00:05:21,240
didn't work out so we had to fine tune

130
00:05:21,240 --> 00:05:22,740
the list but I think the more important

131
00:05:22,740 --> 00:05:24,120
lesson here

132
00:05:24,120 --> 00:05:26,840
is that

133
00:05:26,840 --> 00:05:30,180
we we could make assumptions in the

134
00:05:30,180 --> 00:05:31,800
build time that we could not have make

135
00:05:31,800 --> 00:05:35,880
in the in the production so Tracy was

136
00:05:35,880 --> 00:05:38,280
built with production in mind all of the

137
00:05:38,280 --> 00:05:40,259
signatures had to be very

138
00:05:40,259 --> 00:05:43,680
generic and Abstract we didn't want to

139
00:05:43,680 --> 00:05:45,600
assume anything about what you are

140
00:05:45,600 --> 00:05:48,120
running in production what tools you're

141
00:05:48,120 --> 00:05:50,039
using what's your Tech stock

142
00:05:50,039 --> 00:05:51,960
we don't care we just want to look from

143
00:05:51,960 --> 00:05:54,600
the below from the underneath and to see

144
00:05:54,600 --> 00:05:57,300
if something suspicient looking for us

145
00:05:57,300 --> 00:05:59,759
but in the build we actually can assume

146
00:05:59,759 --> 00:06:03,000
some things like I know you're a go shop

147
00:06:03,000 --> 00:06:05,280
you know which tools you're using you

148
00:06:05,280 --> 00:06:06,900
know your tool chain you're not going to

149
00:06:06,900 --> 00:06:09,479
switch to be a python shop every other

150
00:06:09,479 --> 00:06:13,380
day right so we know how the pipeline is

151
00:06:13,380 --> 00:06:15,780
going to look more or less it's going to

152
00:06:15,780 --> 00:06:19,380
be pretty much consistent so we can

153
00:06:19,380 --> 00:06:21,780
leverage that to write more specific

154
00:06:21,780 --> 00:06:23,280
signatures

155
00:06:23,280 --> 00:06:24,960
things that we could not have afforded

156
00:06:24,960 --> 00:06:27,060
to do in production we can do here for

157
00:06:27,060 --> 00:06:27,960
example

158
00:06:27,960 --> 00:06:28,560
um

159
00:06:28,560 --> 00:06:32,060
let's do something specific to a go

160
00:06:32,060 --> 00:06:34,819
build pipeline like

161
00:06:34,819 --> 00:06:37,199
the go mod file should never change

162
00:06:37,199 --> 00:06:39,300
during the build right if you want to

163
00:06:39,300 --> 00:06:40,860
change it change it before make a full

164
00:06:40,860 --> 00:06:42,960
request have someone review it but it

165
00:06:42,960 --> 00:06:45,300
should not change during the build so we

166
00:06:45,300 --> 00:06:47,460
can do specific things like that and we

167
00:06:47,460 --> 00:06:48,720
started to do

168
00:06:48,720 --> 00:06:51,300
specific things like that like to write

169
00:06:51,300 --> 00:06:53,160
signatures that look for very specific

170
00:06:53,160 --> 00:06:55,740
things but as you can imagine it's like

171
00:06:55,740 --> 00:06:59,280
a very it's long list of bad things that

172
00:06:59,280 --> 00:07:00,600
can happen

173
00:07:00,600 --> 00:07:03,240
going to be very hard to maintain

174
00:07:03,240 --> 00:07:05,759
so then we thought why don't we do the

175
00:07:05,759 --> 00:07:08,340
inverse instead of

176
00:07:08,340 --> 00:07:10,319
looking for the bad stuff

177
00:07:10,319 --> 00:07:12,600
let's just Define what is the good

178
00:07:12,600 --> 00:07:15,780
normal behavior of your pipeline and

179
00:07:15,780 --> 00:07:17,699
just enforce it

180
00:07:17,699 --> 00:07:19,919
so in other words we started to do

181
00:07:19,919 --> 00:07:22,440
profiling with Tracy

182
00:07:22,440 --> 00:07:25,259
this was the second incarnation of this

183
00:07:25,259 --> 00:07:26,160
project

184
00:07:26,160 --> 00:07:29,220
and we introduced a profiling feature to

185
00:07:29,220 --> 00:07:30,960
Tracy you still introduced it the same

186
00:07:30,960 --> 00:07:32,880
way to your pipeline it builds the

187
00:07:32,880 --> 00:07:34,919
profile automatically for you so we

188
00:07:34,919 --> 00:07:36,660
ditch the signatures we build the

189
00:07:36,660 --> 00:07:40,880
profile of every executable that we

190
00:07:40,880 --> 00:07:43,500
encounter doing the the Run

191
00:07:43,500 --> 00:07:46,080
and it's supposed to represent more or

192
00:07:46,080 --> 00:07:48,120
less the composition like not a

193
00:07:48,120 --> 00:07:50,039
composition but um

194
00:07:50,039 --> 00:07:52,560
what your pipeline is made of how does

195
00:07:52,560 --> 00:07:55,199
it normally behaves like I sometimes

196
00:07:55,199 --> 00:07:57,780
think about it like an s-bomb for the

197
00:07:57,780 --> 00:07:58,979
runtime or something like that maybe

198
00:07:58,979 --> 00:08:01,020
that's another talk but

199
00:08:01,020 --> 00:08:03,120
um we generate the profile

200
00:08:03,120 --> 00:08:06,599
everything that was executed during the

201
00:08:06,599 --> 00:08:08,400
the uh

202
00:08:08,400 --> 00:08:12,180
the build and then you review this you

203
00:08:12,180 --> 00:08:13,440
accept it as

204
00:08:13,440 --> 00:08:16,199
the Baseline and then next time it runs

205
00:08:16,199 --> 00:08:18,960
again if we see something else if we see

206
00:08:18,960 --> 00:08:20,520
something that we didn't expect to see

207
00:08:20,520 --> 00:08:23,840
we will let you know

208
00:08:24,120 --> 00:08:27,120
um another lesson learned here is that

209
00:08:27,120 --> 00:08:29,599
building a profile is not that easy

210
00:08:29,599 --> 00:08:32,760
especially when we consider executions

211
00:08:32,760 --> 00:08:35,458
and things like that because there's a

212
00:08:35,458 --> 00:08:36,719
lot of very volatile information

213
00:08:36,719 --> 00:08:38,958
involved there

214
00:08:38,958 --> 00:08:40,760
that that

215
00:08:40,760 --> 00:08:43,080
you know that's going to change like for

216
00:08:43,080 --> 00:08:45,360
example if there's a process ID

217
00:08:45,360 --> 00:08:47,040
some somewhere in the profile right

218
00:08:47,040 --> 00:08:48,959
we're dealing with executions so

219
00:08:48,959 --> 00:08:52,200
probably the process ID recorded here

220
00:08:52,200 --> 00:08:53,880
and there you know that it's going to

221
00:08:53,880 --> 00:08:58,200
change the next time you run it so

222
00:08:58,200 --> 00:09:00,300
um it's a very difficult thing to

223
00:09:00,300 --> 00:09:01,300
balance between

224
00:09:01,300 --> 00:09:02,760
[Music]

225
00:09:02,760 --> 00:09:05,459
um collecting enough information to make

226
00:09:05,459 --> 00:09:07,980
the profile meaningful

227
00:09:07,980 --> 00:09:10,620
but not too much information

228
00:09:10,620 --> 00:09:14,940
to make it annoying so we had to to go

229
00:09:14,940 --> 00:09:18,180
through some iteration to fine-tune what

230
00:09:18,180 --> 00:09:19,800
we do and what we don't want to include

231
00:09:19,800 --> 00:09:22,680
in the profile and we removed a lot of

232
00:09:22,680 --> 00:09:25,200
things from the profile to make it

233
00:09:25,200 --> 00:09:27,000
stable

234
00:09:27,000 --> 00:09:30,839
and we thought that we can compensate

235
00:09:30,839 --> 00:09:33,480
on the information that we

236
00:09:33,480 --> 00:09:36,180
removed from the profile with signatures

237
00:09:36,180 --> 00:09:38,459
that will help balance that and that

238
00:09:38,459 --> 00:09:41,220
brings me to the third incarnation of

239
00:09:41,220 --> 00:09:44,399
this project and the current one where

240
00:09:44,399 --> 00:09:46,140
we basically take the both The Best of

241
00:09:46,140 --> 00:09:49,200
Both Worlds so you still into those

242
00:09:49,200 --> 00:09:50,880
places to pipeline the same way does the

243
00:09:50,880 --> 00:09:52,500
GitHub action you add it to the pipeline

244
00:09:52,500 --> 00:09:55,860
and it runs in the background

245
00:09:55,860 --> 00:09:58,820
um it will uh it will

246
00:09:58,820 --> 00:10:01,260
look for any of the suspicious

247
00:10:01,260 --> 00:10:03,600
behavioral patterns using the built-in

248
00:10:03,600 --> 00:10:05,519
signatures

249
00:10:05,519 --> 00:10:08,760
since then it was greatly expanded but

250
00:10:08,760 --> 00:10:11,339
uh still the same thing you can also

251
00:10:11,339 --> 00:10:13,140
write your own signatures on top of that

252
00:10:13,140 --> 00:10:16,260
and using that tool you can find a

253
00:10:16,260 --> 00:10:20,000
specific bad behaviors that you want to

254
00:10:20,000 --> 00:10:24,360
look for that's a very good tool but at

255
00:10:24,360 --> 00:10:26,640
the same time we also build a profile

256
00:10:26,640 --> 00:10:28,740
uh we also expanded the profile to

257
00:10:28,740 --> 00:10:31,440
include more than executables we also

258
00:10:31,440 --> 00:10:33,899
look for file modifications that happen

259
00:10:33,899 --> 00:10:35,940
during the pipeline and network activity

260
00:10:35,940 --> 00:10:38,279
that happened during the pipeline

261
00:10:38,279 --> 00:10:41,420
and the profile

262
00:10:41,720 --> 00:10:44,339
lets you represent the the normal

263
00:10:44,339 --> 00:10:46,440
behavior so it's kind of like an allow

264
00:10:46,440 --> 00:10:48,420
list and denialist approach the

265
00:10:48,420 --> 00:10:51,360
signatures lets you declare what is

266
00:10:51,360 --> 00:10:52,980
the bad stuff that you're looking for

267
00:10:52,980 --> 00:10:55,380
the profile lets you declare what is the

268
00:10:55,380 --> 00:10:58,320
good stuff that you want to enforce and

269
00:10:58,320 --> 00:11:01,079
you can pick the the best tool when you

270
00:11:01,079 --> 00:11:02,339
want to introduce a new security control

271
00:11:02,339 --> 00:11:05,839
you can pick either

272
00:11:05,940 --> 00:11:07,740
so um

273
00:11:07,740 --> 00:11:10,380
so that's the the current version let's

274
00:11:10,380 --> 00:11:12,060
let's see before we dive into it let's

275
00:11:12,060 --> 00:11:14,899
see how it looks like

276
00:11:16,440 --> 00:11:20,640
all right so uh we have a go project

277
00:11:20,640 --> 00:11:22,740
here

278
00:11:22,740 --> 00:11:26,220
um you see a main.go and go mod and we

279
00:11:26,220 --> 00:11:27,480
have a pipeline

280
00:11:27,480 --> 00:11:31,019
in GitHub that builds it so you see the

281
00:11:31,019 --> 00:11:33,420
the normal actions you see go mode

282
00:11:33,420 --> 00:11:36,300
verify go test go build and you can see

283
00:11:36,300 --> 00:11:39,959
the Tracy start and stop actions that uh

284
00:11:39,959 --> 00:11:42,720
to this Tracy you can also see a

285
00:11:42,720 --> 00:11:45,360
suspicious action here fake upload right

286
00:11:45,360 --> 00:11:48,720
now it's good it will turn row later on

287
00:11:48,720 --> 00:11:53,220
uh so so far so good let's push this

288
00:11:53,220 --> 00:11:56,700
a project into GitHub

289
00:11:56,700 --> 00:11:59,579
and this is the first commit so it's the

290
00:11:59,579 --> 00:12:00,779
first time

291
00:12:00,779 --> 00:12:03,540
um we are running this workflow in

292
00:12:03,540 --> 00:12:04,560
GitHub

293
00:12:04,560 --> 00:12:06,300
and um

294
00:12:06,300 --> 00:12:10,219
the the Gita workflow we run

295
00:12:10,500 --> 00:12:12,959
and

296
00:12:12,959 --> 00:12:17,640
we will see soon see that it fails

297
00:12:17,640 --> 00:12:19,380
the reason why it failed is because

298
00:12:19,380 --> 00:12:21,480
Tracy failed it

299
00:12:21,480 --> 00:12:24,120
because it's the first time you run it

300
00:12:24,120 --> 00:12:26,220
there's an unknown profile you need to

301
00:12:26,220 --> 00:12:28,560
acknowledge it so we created a new pull

302
00:12:28,560 --> 00:12:29,820
request

303
00:12:29,820 --> 00:12:34,260
this is the the pull request that asks

304
00:12:34,260 --> 00:12:36,779
you to review and commit the profile you

305
00:12:36,779 --> 00:12:39,720
can see here all of the things that we

306
00:12:39,720 --> 00:12:41,579
saw that should happen during the pro

307
00:12:41,579 --> 00:12:43,320
the the pipeline

308
00:12:43,320 --> 00:12:46,440
this is the DNS profile execution

309
00:12:46,440 --> 00:12:48,839
profile and files being modified three

310
00:12:48,839 --> 00:12:50,639
files introduced

311
00:12:50,639 --> 00:12:53,700
so we reviewed everything looks good we

312
00:12:53,700 --> 00:12:54,740
merge

313
00:12:54,740 --> 00:12:57,480
this this pull request

314
00:12:57,480 --> 00:12:59,399
again this is not a pull request that we

315
00:12:59,399 --> 00:13:01,079
made this is the pull request that Tracy

316
00:13:01,079 --> 00:13:03,420
made and now we need to go back to our

317
00:13:03,420 --> 00:13:04,920
pull request

318
00:13:04,920 --> 00:13:07,320
and update it because

319
00:13:07,320 --> 00:13:09,480
um now there's a profile

320
00:13:09,480 --> 00:13:12,980
so we go back to the code we update main

321
00:13:12,980 --> 00:13:18,360
Let's uh check out our uh our branch

322
00:13:18,360 --> 00:13:21,000
and merge it with main so basically now

323
00:13:21,000 --> 00:13:22,019
we

324
00:13:22,019 --> 00:13:27,959
update our pull request with the the

325
00:13:27,959 --> 00:13:30,360
newly built profile

326
00:13:30,360 --> 00:13:33,300
go back to to GitHub and this is the

327
00:13:33,300 --> 00:13:34,920
sample request that we had in the

328
00:13:34,920 --> 00:13:38,220
beginning now the pipeline is uh we ran

329
00:13:38,220 --> 00:13:41,760
and it passed this time because nothing

330
00:13:41,760 --> 00:13:43,980
changed from the from the profile that

331
00:13:43,980 --> 00:13:46,860
it knows to the current execution

332
00:13:46,860 --> 00:13:48,540
means that we can merge it safely

333
00:13:48,540 --> 00:13:50,160
nothing

334
00:13:50,160 --> 00:13:52,920
looks wrong here

335
00:13:52,920 --> 00:13:56,220
all right so some time passed

336
00:13:56,220 --> 00:13:58,260
someone working on this project wants to

337
00:13:58,260 --> 00:13:59,880
introduce a new feature

338
00:13:59,880 --> 00:14:02,279
so they update Main

339
00:14:02,279 --> 00:14:05,700
they would create a branch

340
00:14:05,700 --> 00:14:07,639
let's call it

341
00:14:07,639 --> 00:14:12,060
this is a new feature

342
00:14:12,060 --> 00:14:15,300
and we have a new Branch it doesn't

343
00:14:15,300 --> 00:14:16,560
really matter so it's going to be an

344
00:14:16,560 --> 00:14:18,540
empty commit we just want to re-trigger

345
00:14:18,540 --> 00:14:19,980
the the workflow

346
00:14:19,980 --> 00:14:22,680
it doesn't matter which change we make

347
00:14:22,680 --> 00:14:24,300
because what we want to demonstrate here

348
00:14:24,300 --> 00:14:27,480
is that it might be that one of the

349
00:14:27,480 --> 00:14:30,000
GitHub actions that we used

350
00:14:30,000 --> 00:14:33,240
has been also updated during this time

351
00:14:33,240 --> 00:14:35,700
like happened in the code bridge that we

352
00:14:35,700 --> 00:14:37,680
discussed earlier and let's say now

353
00:14:37,680 --> 00:14:39,240
we're at the maintainer of that action

354
00:14:39,240 --> 00:14:41,459
let's say we push the new version

355
00:14:41,459 --> 00:14:44,399
of that action

356
00:14:44,399 --> 00:14:48,120
and and we use the same tag and it means

357
00:14:48,120 --> 00:14:51,540
that our pipeline will now use this new

358
00:14:51,540 --> 00:14:53,339
code automatically

359
00:14:53,339 --> 00:14:55,740
so we go back to our feature

360
00:14:55,740 --> 00:14:58,740
and we create a new pull request to

361
00:14:58,740 --> 00:15:02,420
introduce our cool new feature

362
00:15:03,180 --> 00:15:05,760
this new pull request will trigger the

363
00:15:05,760 --> 00:15:06,839
workflow

364
00:15:06,839 --> 00:15:10,500
the workflow will use the

365
00:15:10,500 --> 00:15:14,339
the fake uploader action which is now

366
00:15:14,339 --> 00:15:16,380
have been updated

367
00:15:16,380 --> 00:15:18,540
and you can see that this time unlike

368
00:15:18,540 --> 00:15:20,820
the previous time this time this pull

369
00:15:20,820 --> 00:15:23,339
request failed

370
00:15:23,339 --> 00:15:26,880
the the pipeline failed also we see a

371
00:15:26,880 --> 00:15:29,220
comment here from Tracy saying that we

372
00:15:29,220 --> 00:15:30,660
saw something suspicious happening

373
00:15:30,660 --> 00:15:33,540
during the pipeline specifically a minor

374
00:15:33,540 --> 00:15:35,820
domain something that looks like a minor

375
00:15:35,820 --> 00:15:39,480
in the pipeline we have all the raw data

376
00:15:39,480 --> 00:15:41,820
here and also a new pull request was

377
00:15:41,820 --> 00:15:43,079
created

378
00:15:43,079 --> 00:15:45,959
to show us what is changed

379
00:15:45,959 --> 00:15:48,180
what exactly was changed so we see that

380
00:15:48,180 --> 00:15:51,480
a new process was executed we see the

381
00:15:51,480 --> 00:15:53,820
the the shaft for it we see the

382
00:15:53,820 --> 00:15:55,620
arguments and we also see that the file

383
00:15:55,620 --> 00:15:58,440
was modified main.go was modified during

384
00:15:58,440 --> 00:16:00,660
the pipelines it didn't happen before it

385
00:16:00,660 --> 00:16:01,920
shouldn't happen

386
00:16:01,920 --> 00:16:04,680
so we use the pull request here as a

387
00:16:04,680 --> 00:16:07,260
kind of a user interface to show you

388
00:16:07,260 --> 00:16:09,120
what is wrong between

389
00:16:09,120 --> 00:16:11,279
what is different between the last time

390
00:16:11,279 --> 00:16:13,560
and this time

391
00:16:13,560 --> 00:16:16,800
so that's that's how it's looking like

392
00:16:16,800 --> 00:16:17,820
um

393
00:16:17,820 --> 00:16:20,279
and

394
00:16:20,279 --> 00:16:22,800
let's talk a little bit more in depth

395
00:16:22,800 --> 00:16:24,420
about what

396
00:16:24,420 --> 00:16:27,180
uh what we saw and what we had to do in

397
00:16:27,180 --> 00:16:29,399
order to make it work

398
00:16:29,399 --> 00:16:32,279
so there's the workload and you already

399
00:16:32,279 --> 00:16:34,500
saw that the way that we introduced

400
00:16:34,500 --> 00:16:39,420
Tracy is using GitHub action actually a

401
00:16:39,420 --> 00:16:42,959
pair of actions one to start the trace

402
00:16:42,959 --> 00:16:45,860
and one to stop the trace

403
00:16:45,860 --> 00:16:48,300
everything in between

404
00:16:48,300 --> 00:16:52,459
will be captured and monitored

405
00:16:52,459 --> 00:16:56,160
the first challenge that we faced and

406
00:16:56,160 --> 00:16:58,259
we're trying to recap like the past

407
00:16:58,259 --> 00:17:00,360
couple of years of this project

408
00:17:00,360 --> 00:17:03,540
uh was that running eppf

409
00:17:03,540 --> 00:17:04,319
um

410
00:17:04,319 --> 00:17:06,059
at least a couple of years ago was not

411
00:17:06,059 --> 00:17:07,799
that trivial

412
00:17:07,799 --> 00:17:10,439
um especially in a remote service or a

413
00:17:10,439 --> 00:17:12,599
managed service

414
00:17:12,599 --> 00:17:13,679
um

415
00:17:13,679 --> 00:17:18,439
and in the beginning Tracy was basically

416
00:17:18,439 --> 00:17:22,439
compiling the ebpf code on the Node this

417
00:17:22,439 --> 00:17:24,179
is this was the common practice it still

418
00:17:24,179 --> 00:17:26,880
is in some cases compiling the abpf code

419
00:17:26,880 --> 00:17:29,340
on the Node when it runs

420
00:17:29,340 --> 00:17:31,740
it means that it it carries a very

421
00:17:31,740 --> 00:17:35,460
heavyweight tool change a tool chain in

422
00:17:35,460 --> 00:17:37,440
in the container of Tracy itself in

423
00:17:37,440 --> 00:17:39,299
order to just perform the compilation

424
00:17:39,299 --> 00:17:41,520
but also it means that it needs

425
00:17:41,520 --> 00:17:44,039
some dependencies like kernel headers

426
00:17:44,039 --> 00:17:45,360
depending on the machine that you're

427
00:17:45,360 --> 00:17:46,980
running on it's a very complicated

428
00:17:46,980 --> 00:17:48,840
process

429
00:17:48,840 --> 00:17:51,980
a airplane as well

430
00:17:51,980 --> 00:17:55,740
depending on a external environment that

431
00:17:55,740 --> 00:17:57,660
is not up to us like does the machine

432
00:17:57,660 --> 00:18:00,419
have kernel headers available is it in

433
00:18:00,419 --> 00:18:02,880
the past that we expect it to be in will

434
00:18:02,880 --> 00:18:04,260
not always show

435
00:18:04,260 --> 00:18:06,660
so one of the

436
00:18:06,660 --> 00:18:08,840
very significant changes that we made

437
00:18:08,840 --> 00:18:11,400
was to make

438
00:18:11,400 --> 00:18:17,419
the the eppf portion of Tracy

439
00:18:17,640 --> 00:18:19,740
compile ones run everywhere this is how

440
00:18:19,740 --> 00:18:22,860
it's called in the ebtf world basically

441
00:18:22,860 --> 00:18:24,720
means to make it portable in simple

442
00:18:24,720 --> 00:18:25,640
world

443
00:18:25,640 --> 00:18:28,620
it's simple words but it's very hard to

444
00:18:28,620 --> 00:18:32,220
achieve in the code and in order to make

445
00:18:32,220 --> 00:18:34,140
it happen again there are some

446
00:18:34,140 --> 00:18:36,179
dependencies on the

447
00:18:36,179 --> 00:18:39,960
on the on the machine not every Linux

448
00:18:39,960 --> 00:18:42,539
kernel supports this in the same way

449
00:18:42,539 --> 00:18:45,240
Etc and we had to create like a separate

450
00:18:45,240 --> 00:18:46,320
project

451
00:18:46,320 --> 00:18:50,039
it's called BTF Hub uh to to solve the

452
00:18:50,039 --> 00:18:52,799
problem of evpf portability but anyway

453
00:18:52,799 --> 00:18:56,820
long story short it it works now and uh

454
00:18:56,820 --> 00:18:59,340
it's it's one of the first projects to

455
00:18:59,340 --> 00:19:01,679
do something like that so it's not very

456
00:19:01,679 --> 00:19:05,400
easy to run Tracy everywhere including

457
00:19:05,400 --> 00:19:07,380
in your pipeline

458
00:19:07,380 --> 00:19:10,260
another thing that we had to implement

459
00:19:10,260 --> 00:19:13,020
here and that we learned the hard way

460
00:19:13,020 --> 00:19:15,539
was that when we are tracing stuff

461
00:19:15,539 --> 00:19:18,600
especially for security purposes

462
00:19:18,600 --> 00:19:20,880
um you need to be very certain that you

463
00:19:20,880 --> 00:19:23,460
capture every single event every single

464
00:19:23,460 --> 00:19:26,100
bit you can't afford to lose any

465
00:19:26,100 --> 00:19:28,440
information

466
00:19:28,440 --> 00:19:29,400
um

467
00:19:29,400 --> 00:19:32,700
and the way that this orchestration of

468
00:19:32,700 --> 00:19:36,000
Tracy in the pipeline worked

469
00:19:36,000 --> 00:19:38,760
um in the beginning we were losing some

470
00:19:38,760 --> 00:19:41,640
events because Tracy was starting the

471
00:19:41,640 --> 00:19:43,380
pipeline was starting there was kind of

472
00:19:43,380 --> 00:19:45,660
an opportunity there to lose events what

473
00:19:45,660 --> 00:19:49,140
we had to do is to make Tracy block the

474
00:19:49,140 --> 00:19:50,160
pipeline

475
00:19:50,160 --> 00:19:53,640
until it finished initializing we had to

476
00:19:53,640 --> 00:19:55,440
like introduce this

477
00:19:55,440 --> 00:19:58,160
again not so trivial feature to Tracy

478
00:19:58,160 --> 00:20:01,080
and in order to block the pipeline until

479
00:20:01,080 --> 00:20:04,080
Tracy says I'm finished I'm all ready

480
00:20:04,080 --> 00:20:07,080
for tracing and then the pipeline starts

481
00:20:07,080 --> 00:20:08,280
running

482
00:20:08,280 --> 00:20:10,620
so there's a minimum delay here but

483
00:20:10,620 --> 00:20:11,660
because

484
00:20:11,660 --> 00:20:15,179
we switched from compiling the ebpf code

485
00:20:15,179 --> 00:20:18,000
on the Node to the compound ones run

486
00:20:18,000 --> 00:20:20,460
everywhere it means that Tracy boots

487
00:20:20,460 --> 00:20:23,419
much much faster than it used to so

488
00:20:23,419 --> 00:20:27,620
these two goes hand in hand

489
00:20:27,780 --> 00:20:31,500
um what else so another thing uh we need

490
00:20:31,500 --> 00:20:33,539
to consider here is that there's the

491
00:20:33,539 --> 00:20:35,940
GitHub gives you basically a VM to run

492
00:20:35,940 --> 00:20:39,720
your code right in this VM there is the

493
00:20:39,720 --> 00:20:43,140
workflow itself that uh that is running

494
00:20:43,140 --> 00:20:45,780
and in order to avoid

495
00:20:45,780 --> 00:20:47,100
um

496
00:20:47,100 --> 00:20:50,220
noise from the machine itself like this

497
00:20:50,220 --> 00:20:51,720
is Linux a lot of things are happening

498
00:20:51,720 --> 00:20:55,440
at any given time I don't know uh a

499
00:20:55,440 --> 00:20:58,140
system update might start sometime and

500
00:20:58,140 --> 00:21:00,260
we will see it because Tracy is running

501
00:21:00,260 --> 00:21:04,020
uh in the kernel so in order to focus

502
00:21:04,020 --> 00:21:06,900
Tracy to look only on what's interesting

503
00:21:06,900 --> 00:21:08,940
for us

504
00:21:08,940 --> 00:21:12,000
um we have we have this filtering

505
00:21:12,000 --> 00:21:14,340
mechanism in Tracy that we can use it's

506
00:21:14,340 --> 00:21:16,200
an old feature you can tell it exactly

507
00:21:16,200 --> 00:21:19,320
what uh what to filter on so for in this

508
00:21:19,320 --> 00:21:21,539
example we identified the way that

509
00:21:21,539 --> 00:21:25,520
GitHub sets up the the

510
00:21:25,520 --> 00:21:29,220
Runner and we saw that there is a one

511
00:21:29,220 --> 00:21:31,700
process if we trace this process tree

512
00:21:31,700 --> 00:21:33,900
basically this processing everything

513
00:21:33,900 --> 00:21:36,179
underneath it is basically means we're

514
00:21:36,179 --> 00:21:38,520
tracing only the the pipeline so this

515
00:21:38,520 --> 00:21:39,299
was

516
00:21:39,299 --> 00:21:39,840
um

517
00:21:39,840 --> 00:21:44,159
not too hard to do but uh considering

518
00:21:44,159 --> 00:21:46,400
that there are other areas in the

519
00:21:46,400 --> 00:21:48,960
machine that we needed to look into as

520
00:21:48,960 --> 00:21:50,159
well

521
00:21:50,159 --> 00:21:52,020
started to face some problems for

522
00:21:52,020 --> 00:21:53,039
example

523
00:21:53,039 --> 00:21:54,780
some things will run as Docker

524
00:21:54,780 --> 00:21:55,919
containers

525
00:21:55,919 --> 00:21:58,620
these Docker containers will not will

526
00:21:58,620 --> 00:22:02,120
not be under this process tree that

527
00:22:02,120 --> 00:22:04,860
that is basically the the workflow

528
00:22:04,860 --> 00:22:07,620
itself the workflow would

529
00:22:07,620 --> 00:22:09,720
start the container but the container

530
00:22:09,720 --> 00:22:11,940
process itself would appear under the

531
00:22:11,940 --> 00:22:13,980
docker demon or something like that

532
00:22:13,980 --> 00:22:16,620
so we need visibility into that as well

533
00:22:16,620 --> 00:22:19,860
right but if we filtered to see only the

534
00:22:19,860 --> 00:22:21,059
process three

535
00:22:21,059 --> 00:22:22,860
it will conflict

536
00:22:22,860 --> 00:22:25,740
another thing is that sometimes we need

537
00:22:25,740 --> 00:22:28,260
visibility into the host itself as

538
00:22:28,260 --> 00:22:31,020
generally because remember we have the

539
00:22:31,020 --> 00:22:33,059
generic signatures that we bought from

540
00:22:33,059 --> 00:22:35,039
Tracy from the production kind of use

541
00:22:35,039 --> 00:22:39,419
case then why not use them to look into

542
00:22:39,419 --> 00:22:43,260
the host as well so we have now

543
00:22:43,260 --> 00:22:43,980
um

544
00:22:43,980 --> 00:22:47,400
a challenge that we want to trace

545
00:22:47,400 --> 00:22:49,919
different scopes

546
00:22:49,919 --> 00:22:52,020
for different purposes

547
00:22:52,020 --> 00:22:55,500
for the for the host I want to see this

548
00:22:55,500 --> 00:22:59,220
kind of events for the workflow I want

549
00:22:59,220 --> 00:23:01,500
to see another set of events only only

550
00:23:01,500 --> 00:23:02,940
the things that I need to build the

551
00:23:02,940 --> 00:23:05,340
profile for example for Docker I want to

552
00:23:05,340 --> 00:23:07,460
see other things that help me detect

553
00:23:07,460 --> 00:23:10,679
Docker specific suspicious Behavior

554
00:23:10,679 --> 00:23:12,900
so this was uh something that we were

555
00:23:12,900 --> 00:23:16,559
dragging along for a while but recently

556
00:23:16,559 --> 00:23:18,900
we finally launched a very significant

557
00:23:18,900 --> 00:23:21,000
feature in Tracy that we called

558
00:23:21,000 --> 00:23:24,000
multiscopes basically allowing us to

559
00:23:24,000 --> 00:23:27,679
to score to trace different

560
00:23:27,679 --> 00:23:30,360
to create Scopes basically a scope is

561
00:23:30,360 --> 00:23:32,880
basically a set of filters that are

562
00:23:32,880 --> 00:23:36,600
independent of uh of one another

563
00:23:36,600 --> 00:23:37,799
so

564
00:23:37,799 --> 00:23:40,260
we have for example one scope this is

565
00:23:40,260 --> 00:23:43,080
the syntax how it is uh

566
00:23:43,080 --> 00:23:46,500
in Tracy so you tell Tracy to trace and

567
00:23:46,500 --> 00:23:49,320
we create scope number one this will be

568
00:23:49,320 --> 00:23:51,659
just the list of all the signatures that

569
00:23:51,659 --> 00:23:56,280
we want to to observe on the host so

570
00:23:56,280 --> 00:23:58,919
file is execution is one signature

571
00:23:58,919 --> 00:24:01,260
hidden file created is another signature

572
00:24:01,260 --> 00:24:03,000
these are the events that you want Tracy

573
00:24:03,000 --> 00:24:06,059
to trace and we don't apply any special

574
00:24:06,059 --> 00:24:09,240
filter here except by saying this is one

575
00:24:09,240 --> 00:24:10,380
scope

576
00:24:10,380 --> 00:24:13,679
and then there's another scope that says

577
00:24:13,679 --> 00:24:15,900
that we want to look for file

578
00:24:15,900 --> 00:24:19,200
modification events this is a kind of

579
00:24:19,200 --> 00:24:22,080
events that Tracy emits but in this

580
00:24:22,080 --> 00:24:24,179
scope number two well the file

581
00:24:24,179 --> 00:24:28,679
modification event is in we want to also

582
00:24:28,679 --> 00:24:29,340
um

583
00:24:29,340 --> 00:24:32,280
limit the the file modifications only

584
00:24:32,280 --> 00:24:34,200
from

585
00:24:34,200 --> 00:24:36,720
the GitHub workspace

586
00:24:36,720 --> 00:24:39,000
directory basically were GitHub checks

587
00:24:39,000 --> 00:24:41,640
your code into otherwise we will just

588
00:24:41,640 --> 00:24:43,679
see all the files that are changed on

589
00:24:43,679 --> 00:24:45,360
the host which is not going to help

590
00:24:45,360 --> 00:24:46,559
anyone

591
00:24:46,559 --> 00:24:49,799
the third scope is basically to say

592
00:24:49,799 --> 00:24:54,059
let's look at the the guitar

593
00:24:54,059 --> 00:24:57,059
3 and the docker tree and in these cases

594
00:24:57,059 --> 00:25:00,480
we want to see uh the executions and the

595
00:25:00,480 --> 00:25:02,280
network activity in order to build the

596
00:25:02,280 --> 00:25:04,380
profile I will show you more about this

597
00:25:04,380 --> 00:25:06,720
in a second but the the point here is

598
00:25:06,720 --> 00:25:08,159
that

599
00:25:08,159 --> 00:25:08,960
um

600
00:25:08,960 --> 00:25:13,440
scoping the the trace into different use

601
00:25:13,440 --> 00:25:16,919
cases and for every use case tracing the

602
00:25:16,919 --> 00:25:20,039
only the the relevant events for that

603
00:25:20,039 --> 00:25:22,820
scope is uh it was a very very critical

604
00:25:22,820 --> 00:25:26,178
thing to do

605
00:25:26,340 --> 00:25:28,500
all right

606
00:25:28,500 --> 00:25:32,039
so let's uh look a little bit deeper

607
00:25:32,039 --> 00:25:34,020
into what

608
00:25:34,020 --> 00:25:37,380
what Tracy can tell you about every

609
00:25:37,380 --> 00:25:39,919
category

610
00:25:40,740 --> 00:25:41,820
um

611
00:25:41,820 --> 00:25:44,700
executions is one category in the

612
00:25:44,700 --> 00:25:47,039
executions category there is a bunch of

613
00:25:47,039 --> 00:25:49,380
signatures that uh

614
00:25:49,380 --> 00:25:52,020
are introduced just by the nature of

615
00:25:52,020 --> 00:25:55,320
Tracy is there so looking for suspicious

616
00:25:55,320 --> 00:25:57,539
things that might happen

617
00:25:57,539 --> 00:26:01,020
on the on the hosts

618
00:26:01,020 --> 00:26:03,120
like suspicious executions patterns

619
00:26:03,120 --> 00:26:05,880
let's pick just one for example code

620
00:26:05,880 --> 00:26:08,580
injection some process is trying to

621
00:26:08,580 --> 00:26:11,400
inject code to running another process

622
00:26:11,400 --> 00:26:14,820
running instance or uh

623
00:26:14,820 --> 00:26:16,320
um

624
00:26:16,320 --> 00:26:18,059
a

625
00:26:18,059 --> 00:26:20,820
LD preload someone is messing with the

626
00:26:20,820 --> 00:26:23,640
dynamic Linker or something like that so

627
00:26:23,640 --> 00:26:25,559
this you get for free like in quotes

628
00:26:25,559 --> 00:26:27,779
from just Tracy being there

629
00:26:27,779 --> 00:26:30,419
uh in addition Tracy also Builds an

630
00:26:30,419 --> 00:26:32,279
execution profile of what happened

631
00:26:32,279 --> 00:26:35,220
during the build what is in this profile

632
00:26:35,220 --> 00:26:37,020
first of all binary paths like what's

633
00:26:37,020 --> 00:26:39,659
the binary that was ran the binary hash

634
00:26:39,659 --> 00:26:42,659
very important to know if

635
00:26:42,659 --> 00:26:45,000
this process that is called LS is the

636
00:26:45,000 --> 00:26:47,400
same as another positive it's called LS

637
00:26:47,400 --> 00:26:50,700
the user who created it

638
00:26:50,700 --> 00:26:52,380
this was

639
00:26:52,380 --> 00:26:58,140
this was there for ages and it's kind of

640
00:26:58,140 --> 00:26:59,159
um

641
00:26:59,159 --> 00:27:03,059
goes without saying but then we found

642
00:27:03,059 --> 00:27:06,000
out another lesson that we're missing by

643
00:27:06,000 --> 00:27:08,279
not including the arguments for the

644
00:27:08,279 --> 00:27:10,860
process uh just to give an example let's

645
00:27:10,860 --> 00:27:13,260
say you have in your pipeline a curl

646
00:27:13,260 --> 00:27:14,700
into

647
00:27:14,700 --> 00:27:16,380
codecov.com

648
00:27:16,380 --> 00:27:18,480
and then someone managed to change it to

649
00:27:18,480 --> 00:27:19,919
curl into

650
00:27:19,919 --> 00:27:23,400
my bedminer.com it's the same curl it's

651
00:27:23,400 --> 00:27:25,140
the same hush if you just Trace

652
00:27:25,140 --> 00:27:27,779
executables nothing changed right all

653
00:27:27,779 --> 00:27:30,179
good but no just by changing an argument

654
00:27:30,179 --> 00:27:32,279
I dramatically changed the behavior of

655
00:27:32,279 --> 00:27:33,659
the pipeline so we needed to include

656
00:27:33,659 --> 00:27:36,120
that information as well but

657
00:27:36,120 --> 00:27:39,860
the problem was that

658
00:27:40,799 --> 00:27:44,220
a process arguments includes a lot of

659
00:27:44,220 --> 00:27:46,520
volatile information like for example

660
00:27:46,520 --> 00:27:49,679
when when you do a git clone or

661
00:27:49,679 --> 00:27:51,799
something like that

662
00:27:51,799 --> 00:27:55,200
GitHub creates a temporary directory and

663
00:27:55,200 --> 00:27:56,940
that directory name is changed every

664
00:27:56,940 --> 00:27:59,159
time you run the pipeline and that is

665
00:27:59,159 --> 00:28:01,620
being passed as an argument so a lot of

666
00:28:01,620 --> 00:28:04,080
volatile information that we that would

667
00:28:04,080 --> 00:28:06,840
just pollute the profile so to solve

668
00:28:06,840 --> 00:28:08,940
this we have to introduce another kind

669
00:28:08,940 --> 00:28:12,240
of feature that is a ignore system that

670
00:28:12,240 --> 00:28:13,520
lets you

671
00:28:13,520 --> 00:28:16,919
basically say these these kind of things

672
00:28:16,919 --> 00:28:19,260
I know that they will happen I want to

673
00:28:19,260 --> 00:28:21,299
ignore them

674
00:28:21,299 --> 00:28:24,000
um and another kind of blind spot was

675
00:28:24,000 --> 00:28:26,100
the environment variables that every

676
00:28:26,100 --> 00:28:28,500
process had access to

677
00:28:28,500 --> 00:28:31,140
so we wanted to include that as well

678
00:28:31,140 --> 00:28:35,880
but that created another problem of

679
00:28:35,880 --> 00:28:37,620
so you know environment variables

680
00:28:37,620 --> 00:28:40,919
contain Secrets usually and if we are

681
00:28:40,919 --> 00:28:42,779
including that in the profile we're

682
00:28:42,779 --> 00:28:45,059
basically committing your secrets to the

683
00:28:45,059 --> 00:28:46,860
source code not something that we want

684
00:28:46,860 --> 00:28:48,960
to do now you have the ignore system so

685
00:28:48,960 --> 00:28:50,820
you could ignore this kind of

686
00:28:50,820 --> 00:28:53,279
environment variables and say

687
00:28:53,279 --> 00:28:55,559
something that is called GitHub token

688
00:28:55,559 --> 00:28:57,480
just don't include it in the profile

689
00:28:57,480 --> 00:29:00,059
that will solve the problem but just out

690
00:29:00,059 --> 00:29:03,779
of precaution we decided to make it an

691
00:29:03,779 --> 00:29:05,460
opt-in feature just the environment

692
00:29:05,460 --> 00:29:07,679
variables if you want you can enable it

693
00:29:07,679 --> 00:29:09,659
we would include environment variables

694
00:29:09,659 --> 00:29:11,039
in your profile and then you are

695
00:29:11,039 --> 00:29:12,440
encouraged to

696
00:29:12,440 --> 00:29:16,559
filter the the secrets out

697
00:29:16,559 --> 00:29:19,260
another interesting interesting thing is

698
00:29:19,260 --> 00:29:22,260
how do we even detect an execution how

699
00:29:22,260 --> 00:29:24,000
do we know that something was executed

700
00:29:24,000 --> 00:29:28,080
so the the obvious like the Nave thought

701
00:29:28,080 --> 00:29:30,000
would be to look into the system call

702
00:29:30,000 --> 00:29:32,820
that is invoking new executables it's

703
00:29:32,820 --> 00:29:35,039
called executive e it's very commonly

704
00:29:35,039 --> 00:29:39,120
used in tracing tools but we found out

705
00:29:39,120 --> 00:29:41,100
that it was not good for our use case

706
00:29:41,100 --> 00:29:43,380
for a few reasons I would say

707
00:29:43,380 --> 00:29:45,899
categorically tracing system course was

708
00:29:45,899 --> 00:29:48,240
a little bit problematic for a number of

709
00:29:48,240 --> 00:29:50,700
reasons

710
00:29:50,700 --> 00:29:52,320
first of all we need to understand that

711
00:29:52,320 --> 00:29:54,840
the system call is not really like

712
00:29:54,840 --> 00:29:57,120
invoking function it's more like the

713
00:29:57,120 --> 00:29:59,460
user requesting the system to do

714
00:29:59,460 --> 00:30:00,240
something

715
00:30:00,240 --> 00:30:03,600
it's not necessarily what will end up

716
00:30:03,600 --> 00:30:08,340
being invoked and now that we know that

717
00:30:08,340 --> 00:30:09,000
um

718
00:30:09,000 --> 00:30:11,100
there are cases where the user might

719
00:30:11,100 --> 00:30:13,080
request to do something

720
00:30:13,080 --> 00:30:15,360
and by the time that the system actually

721
00:30:15,360 --> 00:30:17,460
got to do it the user might change the

722
00:30:17,460 --> 00:30:20,940
request so we traced X but the system

723
00:30:20,940 --> 00:30:24,240
invoked y so that is a kind of attack

724
00:30:24,240 --> 00:30:26,760
called the time of check time of use

725
00:30:26,760 --> 00:30:30,360
that for us as a security tool we just

726
00:30:30,360 --> 00:30:31,620
didn't want to be in this position

727
00:30:31,620 --> 00:30:34,380
another problem with the system calls

728
00:30:34,380 --> 00:30:37,140
and exact V is that the user might pass

729
00:30:37,140 --> 00:30:39,779
arguments that are high level because

730
00:30:39,779 --> 00:30:41,640
this is like an interface from the user

731
00:30:41,640 --> 00:30:43,020
to the system

732
00:30:43,020 --> 00:30:45,600
so let's say I'm I'm telling the system

733
00:30:45,600 --> 00:30:48,539
to invoke this binary I'm giving it a

734
00:30:48,539 --> 00:30:52,500
path that path may be relative to some

735
00:30:52,500 --> 00:30:55,679
other directory that path might be a

736
00:30:55,679 --> 00:30:57,960
file descriptor that I opened and

737
00:30:57,960 --> 00:31:00,059
obtained earlier and I don't know it

738
00:31:00,059 --> 00:31:02,700
that path might be

739
00:31:02,700 --> 00:31:05,760
a Sim link for example that the scenes

740
00:31:05,760 --> 00:31:07,980
that the system needs to resolve so if

741
00:31:07,980 --> 00:31:11,520
we're just tracing the exact ve calls

742
00:31:11,520 --> 00:31:13,140
it might be that we were seeing

743
00:31:13,140 --> 00:31:15,179
meaningless information for us we would

744
00:31:15,179 --> 00:31:17,940
see for example that file descriptor 5

745
00:31:17,940 --> 00:31:20,340
was executed what does it mean no one

746
00:31:20,340 --> 00:31:22,080
knows unless they had access to in the

747
00:31:22,080 --> 00:31:23,179
entire

748
00:31:23,179 --> 00:31:25,799
capture of that Trace

749
00:31:25,799 --> 00:31:30,360
so our solution was to switch and use

750
00:31:30,360 --> 00:31:34,380
another event that Tracy produces it's

751
00:31:34,380 --> 00:31:36,360
called the sketch process exec it's like

752
00:31:36,360 --> 00:31:38,700
an internal transport in Linux it solved

753
00:31:38,700 --> 00:31:40,080
all of those problems

754
00:31:40,080 --> 00:31:41,760
it's not vulnerable to time of check

755
00:31:41,760 --> 00:31:44,940
time of use it it gives us the real path

756
00:31:44,940 --> 00:31:47,159
how we call it like the the resolved

757
00:31:47,159 --> 00:31:49,200
path that is the absolute path to the

758
00:31:49,200 --> 00:31:52,380
file on the disk it also gives us the

759
00:31:52,380 --> 00:31:54,059
hash and many more information that we

760
00:31:54,059 --> 00:31:55,919
include on that event

761
00:31:55,919 --> 00:31:58,559
so that's another kind of uh

762
00:31:58,559 --> 00:32:02,000
lesson that we took

763
00:32:02,100 --> 00:32:04,880
all right let's move on to uh another

764
00:32:04,880 --> 00:32:08,700
category of things that we include files

765
00:32:08,700 --> 00:32:10,260
being modified

766
00:32:10,260 --> 00:32:11,159
um

767
00:32:11,159 --> 00:32:12,899
first of all there's a bunch of

768
00:32:12,899 --> 00:32:15,360
signatures same here that look into

769
00:32:15,360 --> 00:32:18,360
suspicious file access buttons for

770
00:32:18,360 --> 00:32:19,940
example someone

771
00:32:19,940 --> 00:32:23,279
changed the suders files on the system

772
00:32:23,279 --> 00:32:25,380
shouldn't happen definitely not doing

773
00:32:25,380 --> 00:32:26,340
the build

774
00:32:26,340 --> 00:32:28,559
this is the kind of thing you get again

775
00:32:28,559 --> 00:32:30,899
in quotes for free just by tracing being

776
00:32:30,899 --> 00:32:31,620
there

777
00:32:31,620 --> 00:32:35,159
uh the profile also includes file being

778
00:32:35,159 --> 00:32:37,799
modified and and I mentioned this before

779
00:32:37,799 --> 00:32:41,100
we want to limit this to only the

780
00:32:41,100 --> 00:32:43,260
the Gita workspace directory we don't

781
00:32:43,260 --> 00:32:45,779
want any file that was touched we just

782
00:32:45,779 --> 00:32:47,940
want the source code files that we

783
00:32:47,940 --> 00:32:49,919
touched how do we know what is source

784
00:32:49,919 --> 00:32:51,360
code we just say everything in the

785
00:32:51,360 --> 00:32:53,940
GitHub workspace directly

786
00:32:53,940 --> 00:32:54,960
um

787
00:32:54,960 --> 00:32:57,419
again here with the trigger it was a

788
00:32:57,419 --> 00:32:59,220
little bit tricky if you want to know

789
00:32:59,220 --> 00:33:02,220
when a file has been written to then the

790
00:33:02,220 --> 00:33:03,779
the intuitive approach would be okay

791
00:33:03,779 --> 00:33:05,580
there's a system code for that it's

792
00:33:05,580 --> 00:33:06,840
called write

793
00:33:06,840 --> 00:33:09,960
if you trace write system call in your

794
00:33:09,960 --> 00:33:12,720
system it's totally unmanageable because

795
00:33:12,720 --> 00:33:15,059
there's so many rights happening at any

796
00:33:15,059 --> 00:33:18,480
given point especially on like on Unix

797
00:33:18,480 --> 00:33:21,080
Linux everything is a file so basically

798
00:33:21,080 --> 00:33:23,820
uh impossible to deal with

799
00:33:23,820 --> 00:33:26,820
and it created a little bit of a

800
00:33:26,820 --> 00:33:29,399
challenge our solution to that

801
00:33:29,399 --> 00:33:31,340
was

802
00:33:31,340 --> 00:33:34,919
instead of tracing the the actual rights

803
00:33:34,919 --> 00:33:38,220
to the files we're tracing when a file

804
00:33:38,220 --> 00:33:40,260
has been opened

805
00:33:40,260 --> 00:33:43,440
for writing so this is this is an action

806
00:33:43,440 --> 00:33:45,659
that the the program has to take if if

807
00:33:45,659 --> 00:33:47,700
you want to write to a file you need

808
00:33:47,700 --> 00:33:49,679
first to open it technically this is how

809
00:33:49,679 --> 00:33:52,140
it works uh and you need to pass the

810
00:33:52,140 --> 00:33:54,059
right flag so this is what we capture

811
00:33:54,059 --> 00:33:57,179
instead it's a nice trick and

812
00:33:57,179 --> 00:33:59,880
um we use it later on again like to to

813
00:33:59,880 --> 00:34:02,519
trace the intent to do something and not

814
00:34:02,519 --> 00:34:04,679
necessarily the something itself

815
00:34:04,679 --> 00:34:09,500
because uh it's a lot more manageable

816
00:34:10,739 --> 00:34:13,619
another piece of the of this puzzle is

817
00:34:13,619 --> 00:34:16,260
network activity that Tracy also

818
00:34:16,260 --> 00:34:17,520
includes

819
00:34:17,520 --> 00:34:20,099
again some signatures there by the way

820
00:34:20,099 --> 00:34:22,739
network is a relatively new thing in

821
00:34:22,739 --> 00:34:26,280
Tracy we have a very robust

822
00:34:26,280 --> 00:34:29,040
Network tracing capability that also

823
00:34:29,040 --> 00:34:31,800
includes protocol parsing so this is

824
00:34:31,800 --> 00:34:35,399
unique kind of in the tracing world that

825
00:34:35,399 --> 00:34:38,820
you you don't just Trace accept system

826
00:34:38,820 --> 00:34:40,260
core for example and then you get

827
00:34:40,260 --> 00:34:42,960
gibberish you actually like you can

828
00:34:42,960 --> 00:34:45,239
trace HTTP calls for example and know

829
00:34:45,239 --> 00:34:48,899
that this process did an HTTP get to

830
00:34:48,899 --> 00:34:50,520
this

831
00:34:50,520 --> 00:34:52,918
um IP Etc

832
00:34:52,918 --> 00:34:57,180
and what we would like to do here is to

833
00:34:57,180 --> 00:35:02,040
know which which web services my

834
00:35:02,040 --> 00:35:04,200
pipeline interacted with right this is

835
00:35:04,200 --> 00:35:06,300
this is what we want to do the problem

836
00:35:06,300 --> 00:35:09,240
is that there isn't a concept of a

837
00:35:09,240 --> 00:35:11,280
service in the network world it's like

838
00:35:11,280 --> 00:35:13,380
it's it's a very high level concept but

839
00:35:13,380 --> 00:35:15,180
in the in the low level Network there

840
00:35:15,180 --> 00:35:18,839
isn't such a thing there is just TCP to

841
00:35:18,839 --> 00:35:21,599
an IP but we cannot even deal with IPS

842
00:35:21,599 --> 00:35:24,119
because IPS are also very dynamic they

843
00:35:24,119 --> 00:35:27,119
will change for good reasons

844
00:35:27,119 --> 00:35:29,220
um and uh

845
00:35:29,220 --> 00:35:30,960
and again

846
00:35:30,960 --> 00:35:32,760
um touching back on the lesson from

847
00:35:32,760 --> 00:35:33,599
before

848
00:35:33,599 --> 00:35:36,839
that instead of tracing the actual thing

849
00:35:36,839 --> 00:35:38,940
sometimes it's easier to think about

850
00:35:38,940 --> 00:35:41,760
tracing the intent in this case if I

851
00:35:41,760 --> 00:35:43,400
want to communicate with another service

852
00:35:43,400 --> 00:35:46,320
before I do that I need to do

853
00:35:46,320 --> 00:35:48,960
a dnsl solution this is like the file

854
00:35:48,960 --> 00:35:51,060
open from before

855
00:35:51,060 --> 00:35:54,359
so if my pipeline communicated with an

856
00:35:54,359 --> 00:35:56,960
external service

857
00:35:56,960 --> 00:35:59,280
using a domain name

858
00:35:59,280 --> 00:36:01,440
we would catch that because there would

859
00:36:01,440 --> 00:36:03,359
be a domain resolution and we are

860
00:36:03,359 --> 00:36:04,920
catching domain resolutions we give you

861
00:36:04,920 --> 00:36:07,079
a list of all the domains if we didn't

862
00:36:07,079 --> 00:36:09,180
use the domain name then this is

863
00:36:09,180 --> 00:36:10,619
something that we consider a suspicious

864
00:36:10,619 --> 00:36:13,619
Behavior like contacting a bear IP and

865
00:36:13,619 --> 00:36:15,800
there's a signature for that

866
00:36:15,800 --> 00:36:18,900
there's also like uh other network

867
00:36:18,900 --> 00:36:22,500
related signatures like someone opened

868
00:36:22,500 --> 00:36:25,380
the reverse shell like trying to create

869
00:36:25,380 --> 00:36:28,859
a connection outbound that tunnels your

870
00:36:28,859 --> 00:36:30,839
shell to an external endpoint and stuff

871
00:36:30,839 --> 00:36:33,300
like that the number of signatures you

872
00:36:33,300 --> 00:36:35,579
can review them later in Tracy but

873
00:36:35,579 --> 00:36:37,859
network activity is another section that

874
00:36:37,859 --> 00:36:39,300
was added

875
00:36:39,300 --> 00:36:44,420
today GitHub action of Tracy

876
00:36:45,420 --> 00:36:47,339
um

877
00:36:47,339 --> 00:36:50,099
all right and now after we understood

878
00:36:50,099 --> 00:36:52,400
that

879
00:36:53,280 --> 00:36:56,700
it was another kind of aha moment that I

880
00:36:56,700 --> 00:36:59,160
don't think we have yet uh

881
00:36:59,160 --> 00:37:01,200
to fully understand it but just wanted

882
00:37:01,200 --> 00:37:04,020
to share it even at this row point that

883
00:37:04,020 --> 00:37:06,060
we have a lot of good information at

884
00:37:06,060 --> 00:37:09,839
hand right we have executions profile we

885
00:37:09,839 --> 00:37:12,599
have network activity we have files

886
00:37:12,599 --> 00:37:14,339
being modified during the pipeline a lot

887
00:37:14,339 --> 00:37:16,200
of good information we use it in Tracy

888
00:37:16,200 --> 00:37:18,240
to tell you if something

889
00:37:18,240 --> 00:37:20,280
doesn't look right in your pipeline but

890
00:37:20,280 --> 00:37:22,320
maybe you can use it for other purposes

891
00:37:22,320 --> 00:37:23,780
as well

892
00:37:23,780 --> 00:37:27,720
specifically there is the salsa

893
00:37:27,720 --> 00:37:28,640
um

894
00:37:28,640 --> 00:37:33,240
specification that deals with

895
00:37:33,240 --> 00:37:36,540
um so they Define it like they Define a

896
00:37:36,540 --> 00:37:39,320
provenance as the verifiable information

897
00:37:39,320 --> 00:37:42,660
about software artifact describing where

898
00:37:42,660 --> 00:37:46,859
when and how something was produced so

899
00:37:46,859 --> 00:37:49,560
we have a lot to add about the how

900
00:37:49,560 --> 00:37:51,000
something was produced right we know

901
00:37:51,000 --> 00:37:54,000
exactly how it was produced so can we

902
00:37:54,000 --> 00:37:56,760
use this information in this context and

903
00:37:56,760 --> 00:37:58,260
then we saw

904
00:37:58,260 --> 00:38:00,420
um not too long ago actually that there

905
00:38:00,420 --> 00:38:03,599
is a proposal to create a formal

906
00:38:03,599 --> 00:38:06,359
attestation format it's called a runtime

907
00:38:06,359 --> 00:38:07,760
Trace

908
00:38:07,760 --> 00:38:11,839
that should complement the salsa

909
00:38:11,839 --> 00:38:15,660
predicate and from that spec I'm quoting

910
00:38:15,660 --> 00:38:17,880
the random Trace can prove that the

911
00:38:17,880 --> 00:38:20,040
build was invoked via script that the

912
00:38:20,040 --> 00:38:21,839
build was executed in a hermetic

913
00:38:21,839 --> 00:38:24,720
environment with no access and so on so

914
00:38:24,720 --> 00:38:26,220
this is exactly the kind of information

915
00:38:26,220 --> 00:38:29,660
that we already collect and definitely

916
00:38:29,660 --> 00:38:33,540
when this thing is is a little bit more

917
00:38:33,540 --> 00:38:37,920
matured we would emit the the the the

918
00:38:37,920 --> 00:38:40,920
information in this format as well so

919
00:38:40,920 --> 00:38:45,180
that you can use it for other purposes

920
00:38:45,180 --> 00:38:50,240
like complementing the salsa station

921
00:38:51,420 --> 00:38:53,339
all right

922
00:38:53,339 --> 00:38:56,820
so uh we're at the end this is like a

923
00:38:56,820 --> 00:38:59,220
recap of the Lessons Learned runtime is

924
00:38:59,220 --> 00:39:00,540
not a build time we learn something

925
00:39:00,540 --> 00:39:02,460
there

926
00:39:02,460 --> 00:39:05,460
um we were able to increase the coverage

927
00:39:05,460 --> 00:39:09,660
by using signatures as a deny and

928
00:39:09,660 --> 00:39:12,720
profile as an allow kind of controls we

929
00:39:12,720 --> 00:39:16,380
looked at how the blind spot of tracing

930
00:39:16,380 --> 00:39:19,079
tools how we overcome them with the

931
00:39:19,079 --> 00:39:22,680
specific features of Tracy we talked

932
00:39:22,680 --> 00:39:24,900
about system call tracing as opposed to

933
00:39:24,900 --> 00:39:28,079
other approaches what are the triggers

934
00:39:28,079 --> 00:39:30,720
Etc and

935
00:39:30,720 --> 00:39:34,819
this is how you can

936
00:39:34,920 --> 00:39:37,980
look at all of this actually Tracy on

937
00:39:37,980 --> 00:39:43,320
GitHub or Tracy action on GitHub and

938
00:39:43,680 --> 00:39:45,480
I'm here if you have any more questions

939
00:39:45,480 --> 00:39:47,760
thank you very much and enjoy the

940
00:39:47,760 --> 00:39:48,600
conference

941
00:39:48,600 --> 00:39:53,630
[Applause]

