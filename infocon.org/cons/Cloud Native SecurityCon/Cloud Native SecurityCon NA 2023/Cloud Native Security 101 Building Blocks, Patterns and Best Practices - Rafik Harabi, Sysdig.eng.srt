1
00:00:00,299 --> 00:00:03,120
my name is Rafi kharabi I'm living in

2
00:00:03,120 --> 00:00:05,899
Paris France and I've been in the cloud

3
00:00:05,899 --> 00:00:09,840
ecosystem since 2017. and I've been

4
00:00:09,840 --> 00:00:12,360
working with cystic since three years

5
00:00:12,360 --> 00:00:14,639
right now helping customers in Middle

6
00:00:14,639 --> 00:00:17,699
Eastern Africa and Europe

7
00:00:17,699 --> 00:00:19,920
um migrating to a cloud and adopting

8
00:00:19,920 --> 00:00:21,800
Cloud native security

9
00:00:21,800 --> 00:00:25,080
for those who don't know systic we

10
00:00:25,080 --> 00:00:27,960
provide a cloud native platform for

11
00:00:27,960 --> 00:00:29,900
security and observability

12
00:00:29,900 --> 00:00:32,820
we provide protection from source to run

13
00:00:32,820 --> 00:00:36,180
and we are the company behind falcoach

14
00:00:36,180 --> 00:00:38,040
is the thread detection engine for

15
00:00:38,040 --> 00:00:40,440
containers kubernetes

16
00:00:40,440 --> 00:00:43,020
um and uh Claudia here is my LinkedIn my

17
00:00:43,020 --> 00:00:45,420
Twitter please feel free

18
00:00:45,420 --> 00:00:47,460
to add me

19
00:00:47,460 --> 00:00:50,940
um okay that's uh about me I would like

20
00:00:50,940 --> 00:00:52,980
to know a little bit about you so my

21
00:00:52,980 --> 00:00:55,020
first question who is here for for the

22
00:00:55,020 --> 00:00:56,820
first time

23
00:00:56,820 --> 00:01:00,780
awesome yeah but most of you so um my

24
00:01:00,780 --> 00:01:03,359
second question is who knows one of

25
00:01:03,359 --> 00:01:08,840
those acronyms cwpp cspm Etc

26
00:01:09,680 --> 00:01:12,960
okay two of them

27
00:01:12,960 --> 00:01:15,080
oh just five three

28
00:01:15,080 --> 00:01:17,100
all of them

29
00:01:17,100 --> 00:01:19,320
oh yeah okay nice you are you are on the

30
00:01:19,320 --> 00:01:20,759
right spot that's what we'll be talking

31
00:01:20,759 --> 00:01:23,640
about today so let's agreed

32
00:01:23,640 --> 00:01:25,920
um so we have a packet agenda today

33
00:01:25,920 --> 00:01:27,360
um I will start by

34
00:01:27,360 --> 00:01:29,820
um uh describing and explaining those

35
00:01:29,820 --> 00:01:30,780
Cloud

36
00:01:30,780 --> 00:01:32,939
um Native security acronyms and then I

37
00:01:32,939 --> 00:01:35,100
will go into the anatomy of the cloud

38
00:01:35,100 --> 00:01:38,220
native application uh the life cycle as

39
00:01:38,220 --> 00:01:40,920
well I will describe as well the cloud

40
00:01:40,920 --> 00:01:43,220
native security platform building blocks

41
00:01:43,220 --> 00:01:46,380
and the attack vectors that comes on

42
00:01:46,380 --> 00:01:48,119
different layer Cloud containers and

43
00:01:48,119 --> 00:01:51,119
kubernetes and containers uh we'll Deep

44
00:01:51,119 --> 00:01:53,700
dive into patterns and practices best

45
00:01:53,700 --> 00:01:56,520
practices and finally we go through the

46
00:01:56,520 --> 00:01:58,380
Persona and workflows so we have this

47
00:01:58,380 --> 00:01:59,759
packet agenda

48
00:01:59,759 --> 00:02:02,220
so the idea behind this talk when you

49
00:02:02,220 --> 00:02:03,899
start like coming either like from

50
00:02:03,899 --> 00:02:05,460
development background or come from

51
00:02:05,460 --> 00:02:08,280
security and you start moving your

52
00:02:08,280 --> 00:02:09,899
workloads to the cloud

53
00:02:09,899 --> 00:02:12,000
um you got like a lot of acronyms that

54
00:02:12,000 --> 00:02:13,739
is coming from like conferences what

55
00:02:13,739 --> 00:02:18,000
webinars blogs Etc and you feel a little

56
00:02:18,000 --> 00:02:20,340
bit lost and confused uh so the idea we

57
00:02:20,340 --> 00:02:22,260
go through these acronyms to explain

58
00:02:22,260 --> 00:02:25,680
what they mean and then we explain the

59
00:02:25,680 --> 00:02:27,720
workflow that you have to implement

60
00:02:27,720 --> 00:02:29,280
so

61
00:02:29,280 --> 00:02:30,720
um talking about Cloud native

62
00:02:30,720 --> 00:02:33,599
application here we have the main

63
00:02:33,599 --> 00:02:35,400
business value which is mainly the

64
00:02:35,400 --> 00:02:37,739
workflows that you're developing

65
00:02:37,739 --> 00:02:40,020
um you have mainly maybe some some more

66
00:02:40,020 --> 00:02:41,819
clothes that you migrate through VMS to

67
00:02:41,819 --> 00:02:45,660
Cloud plus containers plus moving as

68
00:02:45,660 --> 00:02:48,180
well to serverless and this is working

69
00:02:48,180 --> 00:02:51,000
on top of platforms kubernetes is the

70
00:02:51,000 --> 00:02:53,760
most common you may using some container

71
00:02:53,760 --> 00:02:57,060
as a service and it comes with some I

72
00:02:57,060 --> 00:02:59,519
would say support or Edge services like

73
00:02:59,519 --> 00:03:02,879
data you want to store data either on

74
00:03:02,879 --> 00:03:06,420
like buckets databases management kind

75
00:03:06,420 --> 00:03:09,660
of log monitoring identity and access to

76
00:03:09,660 --> 00:03:12,739
provide access to your services and your

77
00:03:12,739 --> 00:03:15,540
platforms and finally Network and

78
00:03:15,540 --> 00:03:16,620
security

79
00:03:16,620 --> 00:03:18,959
so in order like to talk about security

80
00:03:18,959 --> 00:03:21,840
you are not just securing your workload

81
00:03:21,840 --> 00:03:26,780
but you are securing the full ecosystem

82
00:03:26,780 --> 00:03:30,239
this is uh will bring us to the first

83
00:03:30,239 --> 00:03:35,519
acronym which is cwpp and cwpp stand for

84
00:03:35,519 --> 00:03:38,280
cloud workload protection platform we

85
00:03:38,280 --> 00:03:40,080
are talking here about the security of

86
00:03:40,080 --> 00:03:43,739
workloads either containers serverless

87
00:03:43,739 --> 00:03:47,159
or VMS and it's mainly about

88
00:03:47,159 --> 00:03:49,440
vulnerability management plus thread

89
00:03:49,440 --> 00:03:51,540
detection plus hard running this is like

90
00:03:51,540 --> 00:03:53,519
and a little bit of compliance this is

91
00:03:53,519 --> 00:03:56,700
like the main thing is that you would be

92
00:03:56,700 --> 00:03:58,379
thinking about when you are thinking

93
00:03:58,379 --> 00:04:01,980
about cwpp solution

94
00:04:01,980 --> 00:04:04,680
um yeah and this is the main focus of CW

95
00:04:04,680 --> 00:04:08,400
social solution the second one is cloud

96
00:04:08,400 --> 00:04:10,860
security posture management and we are

97
00:04:10,860 --> 00:04:12,239
assessing here

98
00:04:12,239 --> 00:04:14,819
um Cloud security configuration

99
00:04:14,819 --> 00:04:16,560
um mainly protecting the cloud control

100
00:04:16,560 --> 00:04:19,320
plane plus assessing the configuration

101
00:04:19,320 --> 00:04:21,358
of the instances and the managed

102
00:04:21,358 --> 00:04:22,280
services

103
00:04:22,280 --> 00:04:25,440
that you are that you you are using as a

104
00:04:25,440 --> 00:04:27,000
part of your application so here you can

105
00:04:27,000 --> 00:04:29,639
see that this is the platform plus all

106
00:04:29,639 --> 00:04:31,860
the the manager service except the

107
00:04:31,860 --> 00:04:35,400
identity I will talk later so the next

108
00:04:35,400 --> 00:04:38,400
one is kspm and it stands for kubernetes

109
00:04:38,400 --> 00:04:40,860
security poster management and it's

110
00:04:40,860 --> 00:04:43,979
simply a subset of cspm so because there

111
00:04:43,979 --> 00:04:45,660
is a lot of workloads moving to

112
00:04:45,660 --> 00:04:47,520
kubernetes like it's becoming the de

113
00:04:47,520 --> 00:04:51,600
facto platform to run workloads so um we

114
00:04:51,600 --> 00:04:54,180
have like a kind of dedicated platform

115
00:04:54,180 --> 00:04:56,540
that and solution that look after

116
00:04:56,540 --> 00:04:59,460
kubernetes and just think about it as a

117
00:04:59,460 --> 00:05:02,280
subset of cspn

118
00:05:02,280 --> 00:05:05,220
um the next one is cloud infrastructure

119
00:05:05,220 --> 00:05:08,160
entitlement management and here I'm

120
00:05:08,160 --> 00:05:10,080
mainly looking after my identity and

121
00:05:10,080 --> 00:05:12,080
access management excessive permission

122
00:05:12,080 --> 00:05:14,820
roles and service account that I'm not

123
00:05:14,820 --> 00:05:16,639
using or they are excessive

124
00:05:16,639 --> 00:05:18,840
misconfigured and so on so this is

125
00:05:18,840 --> 00:05:22,199
mainly around identity on access

126
00:05:22,199 --> 00:05:26,880
and we have as well Cloud detection and

127
00:05:26,880 --> 00:05:30,300
response and this is mainly more wider

128
00:05:30,300 --> 00:05:31,740
than the trend detection that we have

129
00:05:31,740 --> 00:05:34,680
inside the cwpp because we are trying to

130
00:05:34,680 --> 00:05:38,340
look from end to end uh see the cwpp is

131
00:05:38,340 --> 00:05:41,160
mainly looking on workloads but we are

132
00:05:41,160 --> 00:05:43,320
seeing like most more and more

133
00:05:43,320 --> 00:05:45,660
sophisticated Cloud attacks they start

134
00:05:45,660 --> 00:05:47,160
from containers going to the cloud

135
00:05:47,160 --> 00:05:50,880
services and this versus so the idea

136
00:05:50,880 --> 00:05:54,120
here that I will have a ionic solution

137
00:05:54,120 --> 00:05:57,840
that can track all this this activity in

138
00:05:57,840 --> 00:06:00,300
in a single solution

139
00:06:00,300 --> 00:06:03,900
and the last diagram is synap and synap

140
00:06:03,900 --> 00:06:06,300
is stand for cloud native application

141
00:06:06,300 --> 00:06:08,639
protection platform and it's simply a

142
00:06:08,639 --> 00:06:12,780
combination of those solution cspm C uh

143
00:06:12,780 --> 00:06:15,240
cwpp and CDL and the idea here that you

144
00:06:15,240 --> 00:06:18,000
have a like single solution that combine

145
00:06:18,000 --> 00:06:21,120
everything because integrating all this

146
00:06:21,120 --> 00:06:22,680
data that coming from these different

147
00:06:22,680 --> 00:06:26,759
sources make building protection most

148
00:06:26,759 --> 00:06:29,900
more sophisticated

149
00:06:30,300 --> 00:06:33,000
um yeah International if you go like to

150
00:06:33,000 --> 00:06:35,900
the building blocks of a synap

151
00:06:35,900 --> 00:06:40,819
platform we have as I mentioned cspm or

152
00:06:40,819 --> 00:06:43,919
kspm which is mainly about veneability

153
00:06:43,919 --> 00:06:46,340
management of those workload

154
00:06:46,340 --> 00:06:49,080
misconfiguration infrastructure as a

155
00:06:49,080 --> 00:06:51,300
core security as well we have the

156
00:06:51,300 --> 00:06:53,819
important part which is coming at the

157
00:06:53,819 --> 00:06:57,060
very first stages and we have the thread

158
00:06:57,060 --> 00:06:59,759
detection and compliance Frameworks

159
00:06:59,759 --> 00:07:02,220
something like you need to be compliant

160
00:07:02,220 --> 00:07:04,280
with Android best

161
00:07:04,280 --> 00:07:08,759
best practices like CIS Benchmark or

162
00:07:08,759 --> 00:07:11,220
maybe you are in a regulated and you see

163
00:07:11,220 --> 00:07:13,680
that you need like to be compliant with

164
00:07:13,680 --> 00:07:17,340
the fedramp or PCI or HIPAA and so on so

165
00:07:17,340 --> 00:07:19,639
this is like the main cspn path

166
00:07:19,639 --> 00:07:23,400
cwpp all around workloads vulnerability

167
00:07:23,400 --> 00:07:24,259
management

168
00:07:24,259 --> 00:07:27,240
threat detection and runtime plus

169
00:07:27,240 --> 00:07:31,259
serverless security as well seem all

170
00:07:31,259 --> 00:07:32,000
around

171
00:07:32,000 --> 00:07:34,919
detect of excessive permission and

172
00:07:34,919 --> 00:07:38,220
finally CDL which is giving you a full a

173
00:07:38,220 --> 00:07:42,259
full spectrum of of detection and

174
00:07:42,259 --> 00:07:46,940
response across your Cloud environments

175
00:07:47,160 --> 00:07:49,680
um this is about those acronym so in the

176
00:07:49,680 --> 00:07:52,860
next few slides we go through the attack

177
00:07:52,860 --> 00:07:56,039
vectors because it's really important to

178
00:07:56,039 --> 00:07:58,919
understand how uh how we can attack

179
00:07:58,919 --> 00:08:02,400
those are platforms and workloads and

180
00:08:02,400 --> 00:08:06,240
from there we can't beat our strategy

181
00:08:06,240 --> 00:08:08,099
um are we thought first about Cloud

182
00:08:08,099 --> 00:08:11,039
attack vectors um we have like this is

183
00:08:11,039 --> 00:08:13,259
the build building big building blocks

184
00:08:13,259 --> 00:08:16,080
of a cloud environment we have this

185
00:08:16,080 --> 00:08:18,120
layer of identity Network and control

186
00:08:18,120 --> 00:08:20,520
plan that is like the foundation of a

187
00:08:20,520 --> 00:08:23,160
cloud platform plus you have the data

188
00:08:23,160 --> 00:08:25,500
that is really like

189
00:08:25,500 --> 00:08:29,099
um really um useful for you plus server

190
00:08:29,099 --> 00:08:30,379
and serverless

191
00:08:30,379 --> 00:08:33,599
and the first one is network bridge this

192
00:08:33,599 --> 00:08:35,219
is like the most common when you create

193
00:08:35,219 --> 00:08:37,080
some services that are misconfigurated

194
00:08:37,080 --> 00:08:39,779
and attacker can use any scanning tool

195
00:08:39,779 --> 00:08:41,399
and scan your environment over the

196
00:08:41,399 --> 00:08:43,339
Internet and get access

197
00:08:43,339 --> 00:08:46,800
the second one is unauthorized resource

198
00:08:46,800 --> 00:08:49,560
access a kind of example of bucket that

199
00:08:49,560 --> 00:08:54,000
you put it public with like private data

200
00:08:54,000 --> 00:08:57,120
um data exploration kind of

201
00:08:57,120 --> 00:08:59,700
um putting for example a database

202
00:08:59,700 --> 00:09:01,620
password inside container someone who

203
00:09:01,620 --> 00:09:03,839
accesses the container he gain access to

204
00:09:03,839 --> 00:09:06,480
these passwords and then be able to

205
00:09:06,480 --> 00:09:10,800
connect to those Services remotely Cloud

206
00:09:10,800 --> 00:09:13,440
security misconfiguration it's all about

207
00:09:13,440 --> 00:09:15,420
misconfiguration of your service for

208
00:09:15,420 --> 00:09:17,279
example creating a kubernetes cluster

209
00:09:17,279 --> 00:09:19,920
with a public IP which is not mandatory

210
00:09:19,920 --> 00:09:21,480
for your environment

211
00:09:21,480 --> 00:09:26,040
and finally vulnerability exploit just

212
00:09:26,040 --> 00:09:28,860
deploying the container or a workload on

213
00:09:28,860 --> 00:09:31,440
VM with vulnerabilities so this is the

214
00:09:31,440 --> 00:09:32,779
most common attack

215
00:09:32,779 --> 00:09:36,180
vectors for cloud let's go with the

216
00:09:36,180 --> 00:09:39,240
kubernetes attack volts Vector the first

217
00:09:39,240 --> 00:09:42,180
thing is a misconfiguration of the

218
00:09:42,180 --> 00:09:44,459
kubernetes control plane mainly the API

219
00:09:44,459 --> 00:09:48,540
server or the etcd API when someone

220
00:09:48,540 --> 00:09:50,880
don't block the access from outside so

221
00:09:50,880 --> 00:09:52,880
this is something that is really common

222
00:09:52,880 --> 00:09:55,200
the second one is dashboard

223
00:09:55,200 --> 00:09:57,080
misconfiguration if you deploy

224
00:09:57,080 --> 00:10:00,060
kubernetes with a dashboard that is open

225
00:10:00,060 --> 00:10:02,940
to public as well

226
00:10:02,940 --> 00:10:04,920
um malicious containers image in

227
00:10:04,920 --> 00:10:07,860
registry um yeah very common some people

228
00:10:07,860 --> 00:10:10,620
are pushing useful images but with

229
00:10:10,620 --> 00:10:13,740
malware and other sort of like uh tools

230
00:10:13,740 --> 00:10:15,660
that they can you can deploy it by

231
00:10:15,660 --> 00:10:17,399
mistake and then they gain access to

232
00:10:17,399 --> 00:10:19,320
your environment clear providing is like

233
00:10:19,320 --> 00:10:21,380
a big example here

234
00:10:21,380 --> 00:10:23,820
application with exploitable

235
00:10:23,820 --> 00:10:27,420
vulnerability as well and gain access to

236
00:10:27,420 --> 00:10:30,180
Secrets when you deploy a workload and

237
00:10:30,180 --> 00:10:32,279
you're using for example a kubernetes

238
00:10:32,279 --> 00:10:34,860
secrets and then someone can get access

239
00:10:34,860 --> 00:10:36,060
to that

240
00:10:36,060 --> 00:10:39,120
and finally Docker Damon Miss

241
00:10:39,120 --> 00:10:40,980
configuration when someone can hook on

242
00:10:40,980 --> 00:10:43,200
the docker socket and start doing some

243
00:10:43,200 --> 00:10:45,300
stuff

244
00:10:45,300 --> 00:10:48,779
so for containers workload we have a set

245
00:10:48,779 --> 00:10:51,120
of attacks the most common are like

246
00:10:51,120 --> 00:10:53,760
having your container engine or the

247
00:10:53,760 --> 00:10:56,420
hosted that you are deploying Docker

248
00:10:56,420 --> 00:10:59,060
burnable or out to date

249
00:10:59,060 --> 00:11:02,279
secondly the normal application very

250
00:11:02,279 --> 00:11:03,440
common

251
00:11:03,440 --> 00:11:06,660
exposed container engine that someone

252
00:11:06,660 --> 00:11:08,700
can hook into

253
00:11:08,700 --> 00:11:11,640
and secure image registry the same way

254
00:11:11,640 --> 00:11:14,779
that we have actually in kubernetes

255
00:11:14,779 --> 00:11:17,279
privileged containers when a container

256
00:11:17,279 --> 00:11:19,019
can hook into

257
00:11:19,019 --> 00:11:21,779
um the system onto the kernel because it

258
00:11:21,779 --> 00:11:23,880
has privileged access running as a route

259
00:11:23,880 --> 00:11:26,579
as a famous example

260
00:11:26,579 --> 00:11:29,579
um misconfigured container a container

261
00:11:29,579 --> 00:11:34,200
would be able to uh to uh to get into

262
00:11:34,200 --> 00:11:37,860
the Container engine and as well

263
00:11:37,860 --> 00:11:40,320
privileged escalation on host

264
00:11:40,320 --> 00:11:43,200
and finally ncvented Network oscillation

265
00:11:43,200 --> 00:11:45,300
when you can move from one container to

266
00:11:45,300 --> 00:11:47,040
another because you are not putting this

267
00:11:47,040 --> 00:11:48,839
isolation on

268
00:11:48,839 --> 00:11:51,600
uh on the network policy

269
00:11:51,600 --> 00:11:54,300
so that's the most common uh attacks I

270
00:11:54,300 --> 00:11:57,000
would say for a container

271
00:11:57,000 --> 00:11:58,200
um okay

272
00:11:58,200 --> 00:12:01,019
um we were moving to patents and best

273
00:12:01,019 --> 00:12:04,500
practices but before that let's take a

274
00:12:04,500 --> 00:12:06,779
look at the life cycle of a cloud native

275
00:12:06,779 --> 00:12:09,300
application we have mainly five phase

276
00:12:09,300 --> 00:12:13,800
code build provision deploy and run and

277
00:12:13,800 --> 00:12:16,260
the code phase what we are producing we

278
00:12:16,260 --> 00:12:18,120
are producing let's say our business

279
00:12:18,120 --> 00:12:20,640
logic plus the dependency that we are

280
00:12:20,640 --> 00:12:23,220
they are grafted usually by developer we

281
00:12:23,220 --> 00:12:26,120
are delivering a kind of manifest for my

282
00:12:26,120 --> 00:12:30,240
workloads like Docker files application

283
00:12:30,240 --> 00:12:33,240
packages hand charts terraform for the

284
00:12:33,240 --> 00:12:35,360
infrastructure then I have this one

285
00:12:35,360 --> 00:12:37,620
continuous integration which is mainly

286
00:12:37,620 --> 00:12:40,200
building my image and from there I'm

287
00:12:40,200 --> 00:12:43,019
provisioning my infrastructure and I'm

288
00:12:43,019 --> 00:12:45,180
doing some configuration

289
00:12:45,180 --> 00:12:46,920
um then on the deploying side I'm

290
00:12:46,920 --> 00:12:49,019
building a kind of either continuous

291
00:12:49,019 --> 00:12:50,700
deployment or continuously delivered

292
00:12:50,700 --> 00:12:53,339
Pipeline and finally on the Run what I'm

293
00:12:53,339 --> 00:12:55,860
doing I'm monitoring my workload

294
00:12:55,860 --> 00:12:57,600
troubleshooting thing in case of issue

295
00:12:57,600 --> 00:13:00,120
I'm doing a kind of incident and

296
00:13:00,120 --> 00:13:02,519
response so this is like the the Big

297
00:13:02,519 --> 00:13:05,339
Blocks for the life cycle So within the

298
00:13:05,339 --> 00:13:08,519
next uh slide we'll take a look at the

299
00:13:08,519 --> 00:13:10,260
different controls and this is coming in

300
00:13:10,260 --> 00:13:12,779
iteration so you need to implement the

301
00:13:12,779 --> 00:13:15,120
kind of continuous security and

302
00:13:15,120 --> 00:13:16,800
compliance

303
00:13:16,800 --> 00:13:19,800
um yeah within this slide I will explain

304
00:13:19,800 --> 00:13:22,200
which is the different checkpoints that

305
00:13:22,200 --> 00:13:23,639
you need to put on different phase or

306
00:13:23,639 --> 00:13:25,980
like best practices

307
00:13:25,980 --> 00:13:28,980
um on the code phase you can do a kind

308
00:13:28,980 --> 00:13:31,620
of drift detection based on the artifact

309
00:13:31,620 --> 00:13:35,220
that you are delivering a kind like if

310
00:13:35,220 --> 00:13:37,139
you are like building a Helm chart you

311
00:13:37,139 --> 00:13:40,380
can hook into see if there is any of

312
00:13:40,380 --> 00:13:42,300
um like container running as a root

313
00:13:42,300 --> 00:13:44,880
misconfiguration and so on and you can

314
00:13:44,880 --> 00:13:48,060
as well block risky configuration means

315
00:13:48,060 --> 00:13:49,800
that if there is something going to your

316
00:13:49,800 --> 00:13:52,320
git repository you just scan it and then

317
00:13:52,320 --> 00:13:55,440
you can block that on the build phase we

318
00:13:55,440 --> 00:13:58,079
are building the image so we can do a

319
00:13:58,079 --> 00:14:00,839
kind of align scanner cicd scanner plus

320
00:14:00,839 --> 00:14:03,240
having registry scanning and host

321
00:14:03,240 --> 00:14:06,420
scanning for kubernetes hosts and we can

322
00:14:06,420 --> 00:14:09,120
prioritize basic in use vulnerabilities

323
00:14:09,120 --> 00:14:11,880
this is something I will explain in

324
00:14:11,880 --> 00:14:14,339
details next

325
00:14:14,339 --> 00:14:16,920
uh then we have the deploy phase when we

326
00:14:16,920 --> 00:14:19,620
have a kind of admission controller

327
00:14:19,620 --> 00:14:22,500
um and I can't block risky images and I

328
00:14:22,500 --> 00:14:24,740
can as well block risky configuration

329
00:14:24,740 --> 00:14:26,880
for my services

330
00:14:26,880 --> 00:14:29,459
On The Run phase we have like three big

331
00:14:29,459 --> 00:14:31,440
league blocks configuration management

332
00:14:31,440 --> 00:14:34,740
the cspm compliance stuff so I can

333
00:14:34,740 --> 00:14:36,660
detect all this configuration from the

334
00:14:36,660 --> 00:14:39,600
runtime and I'm doing as well Cloud

335
00:14:39,600 --> 00:14:42,060
inventory so I need to see to list all

336
00:14:42,060 --> 00:14:44,699
my resources and be able to assist my

337
00:14:44,699 --> 00:14:47,300
resources against this I'm facing

338
00:14:47,300 --> 00:14:50,459
identities same way on the identity we

339
00:14:50,459 --> 00:14:52,920
are assessing all these resources and we

340
00:14:52,920 --> 00:14:57,180
are applying to do list privilege and as

341
00:14:57,180 --> 00:14:59,519
well with your prioritization based on

342
00:14:59,519 --> 00:15:01,680
in use permission so if one permission

343
00:15:01,680 --> 00:15:04,380
is not in use I just like

344
00:15:04,380 --> 00:15:06,360
um like disable it

345
00:15:06,360 --> 00:15:08,940
um thread detection for the cloud

346
00:15:08,940 --> 00:15:11,160
um we build some patterns on that and

347
00:15:11,160 --> 00:15:14,519
then we do a workload runtime security

348
00:15:14,519 --> 00:15:17,160
um yeah one of the famous project you

349
00:15:17,160 --> 00:15:20,040
can use Falco and on the incident

350
00:15:20,040 --> 00:15:22,079
response you need to capture what's

351
00:15:22,079 --> 00:15:25,019
happened in order to do forensics plus

352
00:15:25,019 --> 00:15:28,199
as well block malicious containers or

353
00:15:28,199 --> 00:15:31,019
processes a kind of a if I'm contain my

354
00:15:31,019 --> 00:15:34,079
container is doing something a little

355
00:15:34,079 --> 00:15:37,139
bit risky I can either like pause the

356
00:15:37,139 --> 00:15:40,680
container or like do a kind of sandbox

357
00:15:40,680 --> 00:15:42,959
or just kill the container if there is

358
00:15:42,959 --> 00:15:46,320
like some exfiltration of data and so on

359
00:15:46,320 --> 00:15:50,760
so this is mainly what we have here

360
00:15:50,760 --> 00:15:51,320
um

361
00:15:51,320 --> 00:15:55,560
as as different checkpoints

362
00:15:55,560 --> 00:15:58,800
um so are we go indicators with the

363
00:15:58,800 --> 00:16:00,240
container in use vulnerability

364
00:16:00,240 --> 00:16:01,920
prioritization

365
00:16:01,920 --> 00:16:04,440
um this is really important because

366
00:16:04,440 --> 00:16:06,240
um everyone who is Luke who is in

367
00:16:06,240 --> 00:16:08,699
security field for a while he know that

368
00:16:08,699 --> 00:16:10,680
there is a lot of like force positive

369
00:16:10,680 --> 00:16:13,139
and engineer fatigue so you need life to

370
00:16:13,139 --> 00:16:15,899
prioritize what matter for you and the

371
00:16:15,899 --> 00:16:18,060
pattern behind this that you have to

372
00:16:18,060 --> 00:16:21,000
prioritize and fix those packages that

373
00:16:21,000 --> 00:16:25,380
are really in use because every one of

374
00:16:25,380 --> 00:16:28,440
us know that developers like bring like

375
00:16:28,440 --> 00:16:31,199
Define some packages that maybe they are

376
00:16:31,199 --> 00:16:34,800
not using and how we are doing this we

377
00:16:34,800 --> 00:16:36,600
are doing this uh with applying a

378
00:16:36,600 --> 00:16:39,779
multi-level vulnerability Focus if the

379
00:16:39,779 --> 00:16:42,300
package is in news or not exploitable

380
00:16:42,300 --> 00:16:45,060
and has fixed and we can apply this for

381
00:16:45,060 --> 00:16:49,638
both containers and kubernetes host

382
00:16:49,980 --> 00:16:51,779
um how is work is let's say you have an

383
00:16:51,779 --> 00:16:54,839
image here in my registry with three uh

384
00:16:54,839 --> 00:16:56,880
vulnerable packages

385
00:16:56,880 --> 00:16:59,759
and I'm deploying this to my runtime and

386
00:16:59,759 --> 00:17:02,639
I can't see on my runtime that two of

387
00:17:02,639 --> 00:17:04,919
those packages are not loaded in the

388
00:17:04,919 --> 00:17:07,740
runtime so the risk here will be for me

389
00:17:07,740 --> 00:17:10,799
this CV that is in the runtime

390
00:17:10,799 --> 00:17:12,780
um yeah that's the release how they can

391
00:17:12,780 --> 00:17:14,339
implement this workflow the first thing

392
00:17:14,339 --> 00:17:16,380
I'll be I'll be like assessing all the

393
00:17:16,380 --> 00:17:18,299
vulnerability in the runtime I will

394
00:17:18,299 --> 00:17:21,959
check if they are in use or not and from

395
00:17:21,959 --> 00:17:23,880
there I can't check if they are

396
00:17:23,880 --> 00:17:26,220
exploitable or not if they are not

397
00:17:26,220 --> 00:17:27,720
exploitable this is like let's

398
00:17:27,720 --> 00:17:30,380
prioritize it for me and the next step

399
00:17:30,380 --> 00:17:33,120
what I'll be doing I will check if they

400
00:17:33,120 --> 00:17:35,340
has a fix or no if this if the

401
00:17:35,340 --> 00:17:37,860
availability has fixed yeah I will go to

402
00:17:37,860 --> 00:17:40,320
my development team send them the

403
00:17:40,320 --> 00:17:41,820
version of the package that takes the

404
00:17:41,820 --> 00:17:44,460
vulnerability and asks them to fix this

405
00:17:44,460 --> 00:17:47,039
this can be via pure request or just via

406
00:17:47,039 --> 00:17:50,760
reporting uh yeah on the other side if

407
00:17:50,760 --> 00:17:53,400
this is something that is in use

408
00:17:53,400 --> 00:17:56,460
exploitable and I don't have a fix for

409
00:17:56,460 --> 00:17:57,299
it so

410
00:17:57,299 --> 00:18:01,320
uh my um my strategy will be um to uh

411
00:18:01,320 --> 00:18:03,720
solicit the thread detection and the

412
00:18:03,720 --> 00:18:06,000
thread detection team and try to

413
00:18:06,000 --> 00:18:09,440
mitigate the risk

414
00:18:09,539 --> 00:18:12,480
um the second pattern is container image

415
00:18:12,480 --> 00:18:14,820
signing so actually we are we wanted to

416
00:18:14,820 --> 00:18:17,940
fight against image tempering and we

417
00:18:17,940 --> 00:18:20,760
wanted to be able and make sure that we

418
00:18:20,760 --> 00:18:22,980
are deploying images that coming from a

419
00:18:22,980 --> 00:18:25,500
trusted source and the benefits behind

420
00:18:25,500 --> 00:18:27,539
this that you get you get the images

421
00:18:27,539 --> 00:18:29,760
that are Fantastic Tools you make sure

422
00:18:29,760 --> 00:18:31,380
that you are there is no like images

423
00:18:31,380 --> 00:18:34,020
coming from a nonsense and you are

424
00:18:34,020 --> 00:18:36,960
implementing it kind of Handover from

425
00:18:36,960 --> 00:18:39,660
development to production so first of

426
00:18:39,660 --> 00:18:41,460
all this step will be like developer

427
00:18:41,460 --> 00:18:43,980
iterating over like the average history

428
00:18:43,980 --> 00:18:46,679
development registry when they get a

429
00:18:46,679 --> 00:18:50,340
version that they are ready for QA they

430
00:18:50,340 --> 00:18:52,919
will sign the image and they will push

431
00:18:52,919 --> 00:18:56,760
this to AKA registry and from there we

432
00:18:56,760 --> 00:19:00,120
know that the KA team will be able to

433
00:19:00,120 --> 00:19:03,120
deploy this based on the origin plus the

434
00:19:03,120 --> 00:19:05,520
Regency so if it's something not coming

435
00:19:05,520 --> 00:19:07,620
from the development team it will not be

436
00:19:07,620 --> 00:19:10,919
deployed to the Ka cluster on speaker

437
00:19:10,919 --> 00:19:13,860
team do the job they what they will do

438
00:19:13,860 --> 00:19:17,400
they resign the image and then they will

439
00:19:17,400 --> 00:19:20,000
push it to a prod registry

440
00:19:20,000 --> 00:19:25,020
and the operation or like the SLE that

441
00:19:25,020 --> 00:19:28,140
are looking after the prod will be able

442
00:19:28,140 --> 00:19:30,539
only to put images from this registry

443
00:19:30,539 --> 00:19:34,320
and sign it from the creative so if

444
00:19:34,320 --> 00:19:36,120
there is someone who is trying to deploy

445
00:19:36,120 --> 00:19:39,360
image from outside it will not work so

446
00:19:39,360 --> 00:19:41,340
this is something that really important

447
00:19:41,340 --> 00:19:43,200
to make sure that there is a safe

448
00:19:43,200 --> 00:19:49,039
Handover throughout your CI CD pipeline

449
00:19:49,679 --> 00:19:52,799
um the other pattern is a gatekeeper

450
00:19:52,799 --> 00:19:56,039
pattern admission controller the idea

451
00:19:56,039 --> 00:19:58,200
behind this that I would like before

452
00:19:58,200 --> 00:20:01,260
deploying any workload or deploying any

453
00:20:01,260 --> 00:20:03,780
configuration or any managed service

454
00:20:03,780 --> 00:20:06,480
instance and manager service to make

455
00:20:06,480 --> 00:20:08,940
sure that I'm not deploying vulnerable

456
00:20:08,940 --> 00:20:12,440
images or images from and trusted source

457
00:20:12,440 --> 00:20:14,940
to make sure that I'm not I'm not like

458
00:20:14,940 --> 00:20:17,820
harming my my environment so

459
00:20:17,820 --> 00:20:19,679
um I would like maybe to make a decision

460
00:20:19,679 --> 00:20:22,679
based on image scan status if the image

461
00:20:22,679 --> 00:20:24,559
is vulnerable or not

462
00:20:24,559 --> 00:20:27,660
the signing status is coming from trust

463
00:20:27,660 --> 00:20:31,280
issues and from dry t for this right

464
00:20:31,280 --> 00:20:36,120
kubernetes instance and I would like as

465
00:20:36,120 --> 00:20:38,400
well maybe to check the provenance of

466
00:20:38,400 --> 00:20:40,740
the image so we have like a midi choice

467
00:20:40,740 --> 00:20:43,140
we can take one of them or we can

468
00:20:43,140 --> 00:20:46,260
combine of them and of course you need

469
00:20:46,260 --> 00:20:48,059
to make some exception one of the famous

470
00:20:48,059 --> 00:20:50,760
exception if you have like some some

471
00:20:50,760 --> 00:20:52,860
workloads that are running at Daemon set

472
00:20:52,860 --> 00:20:55,500
that are aged that are mandatory for the

473
00:20:55,500 --> 00:20:57,900
platform or kind of like if you are

474
00:20:57,900 --> 00:21:00,360
running a service mesh and you have the

475
00:21:00,360 --> 00:21:02,039
invoice site card which is vulnerable

476
00:21:02,039 --> 00:21:04,520
you don't want to like to stop deploying

477
00:21:04,520 --> 00:21:07,080
the sidecar because by stop deploying

478
00:21:07,080 --> 00:21:08,700
the sidecar you will like block your

479
00:21:08,700 --> 00:21:11,100
your your like environment so this is

480
00:21:11,100 --> 00:21:13,320
one of the things that you need to think

481
00:21:13,320 --> 00:21:16,020
about like management exception for

482
00:21:16,020 --> 00:21:16,980
those

483
00:21:16,980 --> 00:21:17,700
um

484
00:21:17,700 --> 00:21:21,500
for those workloads that are

485
00:21:21,500 --> 00:21:25,940
monetary for your your production

486
00:21:26,460 --> 00:21:30,900
um yeah the next pattern is to use base

487
00:21:30,900 --> 00:21:33,900
image and layer analysis and one of the

488
00:21:33,900 --> 00:21:36,059
famous that you can't start with is

489
00:21:36,059 --> 00:21:38,240
using the red Health ecosystem

490
00:21:38,240 --> 00:21:41,100
catalog and by the way you can get

491
00:21:41,100 --> 00:21:43,860
updated images plus coming from trusted

492
00:21:43,860 --> 00:21:46,799
tools they are updated regularly

493
00:21:46,799 --> 00:21:50,460
and the second option is

494
00:21:50,460 --> 00:21:53,940
um to start or like a best practice to

495
00:21:53,940 --> 00:21:55,620
start with the minimal based image you

496
00:21:55,620 --> 00:21:57,659
can see here that I'm I'm scanning this

497
00:21:57,659 --> 00:22:02,220
Docker image node with this version and

498
00:22:02,220 --> 00:22:04,380
I see here that I have like 15 critical

499
00:22:04,380 --> 00:22:10,080
vulnerability plus one 53 High when I'm

500
00:22:10,080 --> 00:22:12,120
moving from this version to the slim one

501
00:22:12,120 --> 00:22:15,059
you can see here that I'm reducing my

502
00:22:15,059 --> 00:22:16,980
Surface of attack or like my variability

503
00:22:16,980 --> 00:22:20,460
exposure from 15 to 1 for critical and

504
00:22:20,460 --> 00:22:23,400
from 1 53 to 3 for high so this is

505
00:22:23,400 --> 00:22:26,460
something that if you can use those uh

506
00:22:26,460 --> 00:22:28,440
like slim images

507
00:22:28,440 --> 00:22:30,900
um yeah it will be something that you

508
00:22:30,900 --> 00:22:33,179
reduce your attack surface

509
00:22:33,179 --> 00:22:36,059
help you to reduce your attack surface

510
00:22:36,059 --> 00:22:36,799
um

511
00:22:36,799 --> 00:22:39,960
another thing that it's when you use

512
00:22:39,960 --> 00:22:43,080
like a base image you can see here for

513
00:22:43,080 --> 00:22:44,760
example that they have this base image

514
00:22:44,760 --> 00:22:47,159
that used in a batch of workloads and

515
00:22:47,159 --> 00:22:49,320
there is availability there that been

516
00:22:49,320 --> 00:22:52,760
fixed for example here in version 1.2

517
00:22:52,760 --> 00:22:56,100
it's easy here like to rebuild my these

518
00:22:56,100 --> 00:22:58,140
images with the new version up by the

519
00:22:58,140 --> 00:23:00,539
way I'm fixing a bunch of images so this

520
00:23:00,539 --> 00:23:02,520
is one of the best practices that you

521
00:23:02,520 --> 00:23:05,760
can use and usually like teams

522
00:23:05,760 --> 00:23:08,220
especially like platform teams they will

523
00:23:08,220 --> 00:23:12,120
provide a subset or a set of images that

524
00:23:12,120 --> 00:23:14,220
they are mandatory so developer cannot

525
00:23:14,220 --> 00:23:15,720
like start from an image from internet

526
00:23:15,720 --> 00:23:18,000
but hey this is my image for Java for

527
00:23:18,000 --> 00:23:21,200
node for and so on

528
00:23:21,840 --> 00:23:24,179
um yeah the next button is to implement

529
00:23:24,179 --> 00:23:27,120
a continuous cspm so what I'm trying to

530
00:23:27,120 --> 00:23:30,539
do here I'm trying to assist in an

531
00:23:30,539 --> 00:23:32,159
iterative way uh all the

532
00:23:32,159 --> 00:23:35,100
misconfiguration and address as them as

533
00:23:35,100 --> 00:23:38,039
well in a automated way so and from

534
00:23:38,039 --> 00:23:41,179
there I can do a kind of drift detection

535
00:23:41,179 --> 00:23:44,940
and CGS remediation so how this is work

536
00:23:44,940 --> 00:23:47,100
we have a kind of like

537
00:23:47,100 --> 00:23:49,740
um cspm kspm capability that is running

538
00:23:49,740 --> 00:23:53,700
with my uh Cloud accounts from there I'm

539
00:23:53,700 --> 00:23:56,400
continuously assessing the risk when I

540
00:23:56,400 --> 00:24:00,000
found something that is weighted

541
00:24:00,000 --> 00:24:03,000
um I'm opening a pull request to my

542
00:24:03,000 --> 00:24:06,020
infrastructure as a code security

543
00:24:06,020 --> 00:24:10,020
GitHub and then I'm asking those guys

544
00:24:10,020 --> 00:24:12,260
responsible for this part of code

545
00:24:12,260 --> 00:24:16,320
to fix it at two so the idea is that you

546
00:24:16,320 --> 00:24:19,799
can't like apply a quick patch on the on

547
00:24:19,799 --> 00:24:21,840
your afro structure but the a problem if

548
00:24:21,840 --> 00:24:23,580
there is a new deployment they will

549
00:24:23,580 --> 00:24:26,340
erase this part so the idea that you get

550
00:24:26,340 --> 00:24:29,220
the loop and the next time the team

551
00:24:29,220 --> 00:24:32,159
deploy a new version this has come with

552
00:24:32,159 --> 00:24:35,539
the fix that you have suggested

553
00:24:36,299 --> 00:24:38,940
um yeah how is this working from risk

554
00:24:38,940 --> 00:24:41,580
assist and prioritization I have a list

555
00:24:41,580 --> 00:24:44,460
of inventory then I'm affiliating my uh

556
00:24:44,460 --> 00:24:48,720
my uh my my my assets then prioritize

557
00:24:48,720 --> 00:24:52,080
them based on the risk and then I'm

558
00:24:52,080 --> 00:24:54,480
suggesting a kind of remediation so it

559
00:24:54,480 --> 00:24:56,940
could be either I'm doing a notification

560
00:24:56,940 --> 00:24:58,500
because it's high critical and I'm

561
00:24:58,500 --> 00:25:02,280
applying a patch or I'm adding this to

562
00:25:02,280 --> 00:25:04,380
my to-do list and maybe opening a pull

563
00:25:04,380 --> 00:25:07,260
request and send them back to uh

564
00:25:07,260 --> 00:25:10,140
developer or platform engineer

565
00:25:10,140 --> 00:25:14,820
so let's move now to the personal and

566
00:25:14,820 --> 00:25:17,100
workflows we'll go through this Persona

567
00:25:17,100 --> 00:25:19,980
and then we go uh we see in this case

568
00:25:19,980 --> 00:25:22,260
how yeah you implement uh those

569
00:25:22,260 --> 00:25:24,600
workflows for uh the best practices that

570
00:25:24,600 --> 00:25:27,059
we just expose it

571
00:25:27,059 --> 00:25:28,440
um yeah first of all we have the

572
00:25:28,440 --> 00:25:30,299
developer which is like usually is

573
00:25:30,299 --> 00:25:33,120
building like Source via secure

574
00:25:33,120 --> 00:25:35,039
application and fixes with ability that

575
00:25:35,039 --> 00:25:37,860
coming back from production

576
00:25:37,860 --> 00:25:40,980
um we have the platform engineer devops

577
00:25:40,980 --> 00:25:43,260
devsecops this is like a kind of similar

578
00:25:43,260 --> 00:25:45,120
roles but it depends like change from

579
00:25:45,120 --> 00:25:48,299
our organization uh to another and they

580
00:25:48,299 --> 00:25:52,140
are mainly looking at building platforms

581
00:25:52,140 --> 00:25:54,260
using infrastructure as a code

582
00:25:54,260 --> 00:25:56,820
continuous integration and continuous

583
00:25:56,820 --> 00:26:00,299
deployment as well policy implementation

584
00:26:00,299 --> 00:26:03,600
coming from security architects on the

585
00:26:03,600 --> 00:26:06,179
security Persona we have mainly security

586
00:26:06,179 --> 00:26:09,419
engineer who is working in close with

587
00:26:09,419 --> 00:26:10,799
security architect and they are

588
00:26:10,799 --> 00:26:14,460
responsible mainly for defining

589
00:26:14,460 --> 00:26:18,240
um policies and compliance plus trade

590
00:26:18,240 --> 00:26:19,260
modeling

591
00:26:19,260 --> 00:26:21,720
and we have the secops which is uh

592
00:26:21,720 --> 00:26:24,059
looking after the runtime and he's

593
00:26:24,059 --> 00:26:26,700
handling threat detection and forensics

594
00:26:26,700 --> 00:26:28,380
and finally we have the season which

595
00:26:28,380 --> 00:26:30,360
just like getting like the score number

596
00:26:30,360 --> 00:26:33,080
at a high level

597
00:26:33,659 --> 00:26:36,539
um yeah here we can see like um how this

598
00:26:36,539 --> 00:26:38,580
Persona are are going through the

599
00:26:38,580 --> 00:26:40,740
different life cycles so most of them

600
00:26:40,740 --> 00:26:42,539
like the devops guys will be between

601
00:26:42,539 --> 00:26:47,100
deploy and and run and secops mainly on

602
00:26:47,100 --> 00:26:50,520
the incident response and forensics and

603
00:26:50,520 --> 00:26:52,679
of course the security architect like to

604
00:26:52,679 --> 00:26:54,299
have like a kind of recommendation

605
00:26:54,299 --> 00:26:57,559
through the different phases

606
00:26:58,320 --> 00:27:00,059
um yeah the first thing that you can

607
00:27:00,059 --> 00:27:03,360
Implement is like to put a scan on the

608
00:27:03,360 --> 00:27:05,580
CI face like I'm just building my

609
00:27:05,580 --> 00:27:08,039
application here and then I'm running a

610
00:27:08,039 --> 00:27:11,779
scan if if I'm failing my my policies or

611
00:27:11,779 --> 00:27:14,580
I'll be sending back the image I will

612
00:27:14,580 --> 00:27:16,980
not push it to a registry if this is

613
00:27:16,980 --> 00:27:19,020
part I would just push it to register

614
00:27:19,020 --> 00:27:21,840
and then I will be able to deploy so

615
00:27:21,840 --> 00:27:23,039
um this is

616
00:27:23,039 --> 00:27:24,480
um actually

617
00:27:24,480 --> 00:27:26,820
um the first stage in vulnerability

618
00:27:26,820 --> 00:27:30,600
assessment and we can't combine this uh

619
00:27:30,600 --> 00:27:34,440
with a registry scanner and why we are

620
00:27:34,440 --> 00:27:36,179
combining this with the registry scanner

621
00:27:36,179 --> 00:27:38,520
because we can't bypass the cicd first

622
00:27:38,520 --> 00:27:41,460
not all not all the teams will be using

623
00:27:41,460 --> 00:27:44,159
this ICD pipeline sometimes you have

624
00:27:44,159 --> 00:27:46,260
images that coming from partners and

625
00:27:46,260 --> 00:27:48,179
they are coming from vendors so they

626
00:27:48,179 --> 00:27:50,159
they are not coming through your cicd

627
00:27:50,159 --> 00:27:52,260
pipeline so actually what we are doing

628
00:27:52,260 --> 00:27:54,779
we are continuously scanning the

629
00:27:54,779 --> 00:27:58,500
registry and we can as we will add an

630
00:27:58,500 --> 00:28:01,140
extra step here which is every time I'm

631
00:28:01,140 --> 00:28:03,779
pulling an image from a public git

632
00:28:03,779 --> 00:28:06,299
repository or from a partner or a vendor

633
00:28:06,299 --> 00:28:10,200
I will scan this this image before

634
00:28:10,200 --> 00:28:13,260
pushing it to my corporator you see so

635
00:28:13,260 --> 00:28:14,900
this is kind of

636
00:28:14,900 --> 00:28:17,460
workflow that you can Implement to make

637
00:28:17,460 --> 00:28:20,520
sure that all the images that are in

638
00:28:20,520 --> 00:28:22,820
your registered are up to date plus

639
00:28:22,820 --> 00:28:26,220
having those images scanned when it come

640
00:28:26,220 --> 00:28:30,120
from public sources

641
00:28:30,120 --> 00:28:31,440
uh

642
00:28:31,440 --> 00:28:34,140
the second thing that you can add here

643
00:28:34,140 --> 00:28:36,659
is the workload identity

644
00:28:36,659 --> 00:28:39,960
um and integrity and here it's mainly

645
00:28:39,960 --> 00:28:41,820
about signing images so I'm getting this

646
00:28:41,820 --> 00:28:44,279
picture in big picture here so what you

647
00:28:44,279 --> 00:28:48,059
are doing uh once you you you get the

648
00:28:48,059 --> 00:28:51,000
image in your registry you will apply a

649
00:28:51,000 --> 00:28:53,760
sign in process so in a national you

650
00:28:53,760 --> 00:28:56,760
have um the public the private key which

651
00:28:56,760 --> 00:28:59,279
is signing the email so you have the

652
00:28:59,279 --> 00:29:01,799
image assign it with the private key and

653
00:29:01,799 --> 00:29:03,960
then you have the public key that is

654
00:29:03,960 --> 00:29:05,640
running and pulling and running with the

655
00:29:05,640 --> 00:29:08,520
cluster so once you want to deploy an

656
00:29:08,520 --> 00:29:10,559
image and then you have this public key

657
00:29:10,559 --> 00:29:12,779
on the cluster you can verify the orange

658
00:29:12,779 --> 00:29:15,659
the origin of the image on the other

659
00:29:15,659 --> 00:29:18,539
side if there is someone who is trying

660
00:29:18,539 --> 00:29:20,840
to push email that is not

661
00:29:20,840 --> 00:29:26,000
sign it then he gets he got suggested

662
00:29:26,039 --> 00:29:28,740
um so how it's working we have the

663
00:29:28,740 --> 00:29:31,140
admission controller that is checking

664
00:29:31,140 --> 00:29:33,740
the scan status and the signature here

665
00:29:33,740 --> 00:29:36,899
and from here you can see that I can

666
00:29:36,899 --> 00:29:40,620
solicitate like the scanning result or I

667
00:29:40,620 --> 00:29:43,559
can go and check them check the the

668
00:29:43,559 --> 00:29:46,760
signature status

669
00:29:47,179 --> 00:29:50,539
on the other side this is on the

670
00:29:50,539 --> 00:29:53,159
pre-built on the other side if if you

671
00:29:53,159 --> 00:29:55,260
are in the runtime you would like to

672
00:29:55,260 --> 00:29:56,940
discover

673
00:29:56,940 --> 00:29:59,340
um zero Divine ability in running images

674
00:29:59,340 --> 00:30:02,059
so you need to have this kind of

675
00:30:02,059 --> 00:30:04,559
continuous assessment of workload

676
00:30:04,559 --> 00:30:06,899
running in the runtime and how is

677
00:30:06,899 --> 00:30:09,600
working usually you deploy kind of a

678
00:30:09,600 --> 00:30:12,059
demon said that is running with your

679
00:30:12,059 --> 00:30:14,520
Hostess and this is assess the

680
00:30:14,520 --> 00:30:16,020
vulnerability on the running container

681
00:30:16,020 --> 00:30:18,779
Hostess and then you're reporting this

682
00:30:18,779 --> 00:30:21,779
back either you send this to your sim or

683
00:30:21,779 --> 00:30:23,640
you open a ticket for the team that is

684
00:30:23,640 --> 00:30:28,020
responsible for this specific image

685
00:30:28,679 --> 00:30:31,919
um infrastructure other code security we

686
00:30:31,919 --> 00:30:33,600
have seen the vulnerability part on the

687
00:30:33,600 --> 00:30:36,740
top so the second part will be around

688
00:30:36,740 --> 00:30:39,899
scanning my artifact that's coming with

689
00:30:39,899 --> 00:30:42,779
the with the platform mainly uh Helm

690
00:30:42,779 --> 00:30:45,539
charts yaml files for kubernetes and

691
00:30:45,539 --> 00:30:47,340
here are formed cloud formation and so

692
00:30:47,340 --> 00:30:50,820
on for cloud resources so I have like a

693
00:30:50,820 --> 00:30:54,059
kind of two parallel build parallel Fair

694
00:30:54,059 --> 00:30:57,840
stages that are here from this

695
00:30:57,840 --> 00:30:59,820
perspective I'm taking the

696
00:30:59,820 --> 00:31:01,220
infrastructure

697
00:31:01,220 --> 00:31:05,580
I'm scanning it if this is fail I will

698
00:31:05,580 --> 00:31:07,580
immediately

699
00:31:07,580 --> 00:31:10,919
notify the developer or the platform

700
00:31:10,919 --> 00:31:13,140
engineer and tell him hey you need to

701
00:31:13,140 --> 00:31:14,940
fix this before going to the next step

702
00:31:14,940 --> 00:31:19,020
if this is okay I will merge this to my

703
00:31:19,020 --> 00:31:20,940
main branch or Master branch and then

704
00:31:20,940 --> 00:31:23,940
I'll be able to deploy

705
00:31:23,940 --> 00:31:26,760
um to deploy my my infrastructure as a

706
00:31:26,760 --> 00:31:28,559
code so actually

707
00:31:28,559 --> 00:31:30,419
um what we are doing here you are

708
00:31:30,419 --> 00:31:32,760
blocking the availability as Source you

709
00:31:32,760 --> 00:31:34,260
are not allowing this vulnerability to

710
00:31:34,260 --> 00:31:37,860
go to production but this is doesn't

711
00:31:37,860 --> 00:31:42,240
prevent someone uh someone from changing

712
00:31:42,240 --> 00:31:43,760
um some configuration

713
00:31:43,760 --> 00:31:47,039
in the runtime so if you get this

714
00:31:47,039 --> 00:31:48,779
configuration change it by someone

715
00:31:48,779 --> 00:31:52,020
through UI CLI and so on you can

716
00:31:52,020 --> 00:31:54,200
Implement a kind of drift detection here

717
00:31:54,200 --> 00:31:57,600
and from there what you are doing you

718
00:31:57,600 --> 00:32:01,320
are getting this drift detection and

719
00:32:01,320 --> 00:32:04,620
then you are opening a pull request and

720
00:32:04,620 --> 00:32:07,500
from the pull request the devops guy

721
00:32:07,500 --> 00:32:10,860
will will review that and merge it and

722
00:32:10,860 --> 00:32:13,799
by closing the loop here we'll be able

723
00:32:13,799 --> 00:32:17,520
to make sure that this has been embedded

724
00:32:17,520 --> 00:32:20,640
in source of Truth which is my git

725
00:32:20,640 --> 00:32:24,200
repository for infrastructure

726
00:32:24,899 --> 00:32:27,179
um that's all from me today

727
00:32:27,179 --> 00:32:30,539
um two key takeaways uh the first thing

728
00:32:30,539 --> 00:32:31,860
um that cloud native security

729
00:32:31,860 --> 00:32:33,659
implementation is a team and

730
00:32:33,659 --> 00:32:35,940
collaboration matter uh we saw through

731
00:32:35,940 --> 00:32:37,799
the Persona that there is like a

732
00:32:37,799 --> 00:32:38,820
different

733
00:32:38,820 --> 00:32:41,100
um responsibility that it's spread uh

734
00:32:41,100 --> 00:32:43,679
through different teams so you have to

735
00:32:43,679 --> 00:32:46,380
build this like a relationship and you

736
00:32:46,380 --> 00:32:48,000
have to make it

737
00:32:48,000 --> 00:32:51,360
um automated and traceable one of the

738
00:32:51,360 --> 00:32:54,240
best practices is to use infrastructure

739
00:32:54,240 --> 00:32:55,640
as a code plus

740
00:32:55,640 --> 00:32:58,559
githubs because you will be able to

741
00:32:58,559 --> 00:33:00,059
track everything and track the history

742
00:33:00,059 --> 00:33:04,620
of all the changes and the second thing

743
00:33:04,620 --> 00:33:06,539
um Cloud native security should be

744
00:33:06,539 --> 00:33:08,360
adopted gradually what I mean by that

745
00:33:08,360 --> 00:33:12,000
depending on what stage you are in uh

746
00:33:12,000 --> 00:33:15,299
some guys they are having the workloads

747
00:33:15,299 --> 00:33:17,039
gone to production so they will looking

748
00:33:17,039 --> 00:33:20,100
after melee thread detection uh those

749
00:33:20,100 --> 00:33:23,039
who are still in early stage they will

750
00:33:23,039 --> 00:33:25,320
are looking after implementing a

751
00:33:25,320 --> 00:33:27,299
security at early stage shift left and

752
00:33:27,299 --> 00:33:28,799
so on so

753
00:33:28,799 --> 00:33:30,299
um you cannot like Implement everything

754
00:33:30,299 --> 00:33:33,480
within one shot so start by the most

755
00:33:33,480 --> 00:33:37,440
important use cases for your business

756
00:33:37,440 --> 00:33:41,940
uh yeah I put a further slides here for

757
00:33:41,940 --> 00:33:45,299
reading um synap Cloud security

758
00:33:45,299 --> 00:33:47,880
um a Blog from systick there is a boss

759
00:33:47,880 --> 00:33:51,299
podcast from Annabelle from uh on the

760
00:33:51,299 --> 00:33:54,840
Google Cloud security podcast uh some

761
00:33:54,840 --> 00:33:56,700
yeah some reading from gardeners and

762
00:33:56,700 --> 00:33:59,039
admittee attack for for containers and

763
00:33:59,039 --> 00:34:01,919
you can't find as well for kubernetes so

764
00:34:01,919 --> 00:34:04,140
that's all from me today uh thank you

765
00:34:04,140 --> 00:34:06,299
very much very much for being here

766
00:34:06,299 --> 00:34:08,760
um yeah I'm open to any question uh BL

767
00:34:08,760 --> 00:34:11,339
as well on cystick Booth so just stop me

768
00:34:11,339 --> 00:34:13,560
and ask me and please don't forget to

769
00:34:13,560 --> 00:34:15,239
raise the session and provide your your

770
00:34:15,239 --> 00:34:16,440
feedback

771
00:34:16,440 --> 00:34:19,399
thank you very much

