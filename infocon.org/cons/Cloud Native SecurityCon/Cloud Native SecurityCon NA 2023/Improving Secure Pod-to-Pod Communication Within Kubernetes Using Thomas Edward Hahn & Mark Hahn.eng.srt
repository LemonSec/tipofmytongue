1
00:00:00,000 --> 00:00:04,140
my name is Mark Hahn I'm a Security

2
00:00:04,140 --> 00:00:07,020
Solutions architect with qualis if you

3
00:00:07,020 --> 00:00:08,460
want to follow along with the slides you

4
00:00:08,460 --> 00:00:10,500
can take a look at that URL there in

5
00:00:10,500 --> 00:00:12,120
blue at the bottom you can pull that up

6
00:00:12,120 --> 00:00:13,200
on your phone if you want to keep the

7
00:00:13,200 --> 00:00:15,660
slides up while we're looking at that

8
00:00:15,660 --> 00:00:18,960
it's got speaker notes if you um press

9
00:00:18,960 --> 00:00:21,740
sort of at the bottom of the mrap

10
00:00:21,740 --> 00:00:24,439
presentation you'll see speaker notes

11
00:00:24,439 --> 00:00:28,320
and this is hi I'm Ted Hahn I'm his son

12
00:00:28,320 --> 00:00:31,439
we are a father-son team and we like to

13
00:00:31,439 --> 00:00:33,000
do these presentations together we're

14
00:00:33,000 --> 00:00:35,579
having some fun with it I'm a site

15
00:00:35,579 --> 00:00:37,739
reliability engineer a Consulting site

16
00:00:37,739 --> 00:00:41,640
SRE I help a number of small startups do

17
00:00:41,640 --> 00:00:46,500
Cloud native write security AWS all of

18
00:00:46,500 --> 00:00:48,480
the you know stuff around kubernetes

19
00:00:48,480 --> 00:00:50,039
clusters

20
00:00:50,039 --> 00:00:52,079
um whether that be you know the basic

21
00:00:52,079 --> 00:00:54,899
setup to running large distributed apps

22
00:00:54,899 --> 00:00:55,800
on them

23
00:00:55,800 --> 00:00:58,020
cool

24
00:00:58,020 --> 00:01:01,620
so uh this is our presentation on kubet

25
00:01:01,620 --> 00:01:04,379
LS it's a tool that helps you achieve

26
00:01:04,379 --> 00:01:07,500
Mutual TLS by injecting certificates

27
00:01:07,500 --> 00:01:09,080
into every pod

28
00:01:09,080 --> 00:01:12,240
in 2002 we built a the original version

29
00:01:12,240 --> 00:01:14,580
of this it's a web admissions web hook

30
00:01:14,580 --> 00:01:17,720
pod which mutates the Pod

31
00:01:17,720 --> 00:01:20,580
and we've updated it to take advantage

32
00:01:20,580 --> 00:01:23,700
of new changes that are coming in uh in

33
00:01:23,700 --> 00:01:26,759
newer versions of kubernetes so in

34
00:01:26,759 --> 00:01:29,060
particular there's a feature called

35
00:01:29,060 --> 00:01:32,040
cluster trust bundles that allows you to

36
00:01:32,040 --> 00:01:35,040
set the the scope of trust for for uh

37
00:01:35,040 --> 00:01:36,900
cluster

38
00:01:36,900 --> 00:01:38,280
so

39
00:01:38,280 --> 00:01:39,840
um let's start off with what is a trust

40
00:01:39,840 --> 00:01:42,119
bundle um you know I imagine some of you

41
00:01:42,119 --> 00:01:45,060
have been to the various spiffy talks

42
00:01:45,060 --> 00:01:48,119
um so you probably have some idea but at

43
00:01:48,119 --> 00:01:49,259
the same time I don't think any of them

44
00:01:49,259 --> 00:01:52,200
defined trust bundle particularly well

45
00:01:52,200 --> 00:01:54,840
um a trust bundle is

46
00:01:54,840 --> 00:01:57,299
at its most simple a trust bundle is a

47
00:01:57,299 --> 00:01:58,860
bunch of CAS

48
00:01:58,860 --> 00:02:00,659
um you probably already use a trust

49
00:02:00,659 --> 00:02:03,180
bundle that is you know your browser's

50
00:02:03,180 --> 00:02:04,920
web CA store

51
00:02:04,920 --> 00:02:07,740
um that's a trust bundle but that is a

52
00:02:07,740 --> 00:02:10,380
very broadly scoped trust bundle

53
00:02:10,380 --> 00:02:13,020
um we want much smaller scope trust

54
00:02:13,020 --> 00:02:15,180
bundles um typically we want trust

55
00:02:15,180 --> 00:02:17,580
bundles per organization

56
00:02:17,580 --> 00:02:18,959
um or even two or three for your

57
00:02:18,959 --> 00:02:20,640
organization

58
00:02:20,640 --> 00:02:22,560
um so

59
00:02:22,560 --> 00:02:25,680
this is yeah so this is what uh

60
00:02:25,680 --> 00:02:27,360
essentially you know you're familiar

61
00:02:27,360 --> 00:02:30,180
with this this is how web certificates

62
00:02:30,180 --> 00:02:31,800
work this is how

63
00:02:31,800 --> 00:02:34,739
um https TLS certificates work

64
00:02:34,739 --> 00:02:36,840
um so at the bottom there there is a

65
00:02:36,840 --> 00:02:38,640
workload certificate that workload is

66
00:02:38,640 --> 00:02:41,220
probably a web server

67
00:02:41,220 --> 00:02:43,440
um and that web server is signed by some

68
00:02:43,440 --> 00:02:47,940
intermediate cert that then in in that

69
00:02:47,940 --> 00:02:49,620
certificate that you get back from your

70
00:02:49,620 --> 00:02:51,239
your signing Authority typically

71
00:02:51,239 --> 00:02:53,760
contains both your workload cert and

72
00:02:53,760 --> 00:02:55,319
then the intermediate search the chain

73
00:02:55,319 --> 00:02:58,379
up to uh to a CA and then at the top

74
00:02:58,379 --> 00:03:01,800
level there is that root certificate on

75
00:03:01,800 --> 00:03:03,420
most systems that you're running your

76
00:03:03,420 --> 00:03:06,540
phones your your laptops your Linux

77
00:03:06,540 --> 00:03:08,220
servers that are deployed in your in

78
00:03:08,220 --> 00:03:09,599
your Cloud architecture and on your

79
00:03:09,599 --> 00:03:12,840
clusters that root CA contains about 160

80
00:03:12,840 --> 00:03:14,700
different Cas

81
00:03:14,700 --> 00:03:16,379
um some of which you know some of which

82
00:03:16,379 --> 00:03:19,860
are just well next slide oh no

83
00:03:19,860 --> 00:03:21,780
um so some of which you know and some of

84
00:03:21,780 --> 00:03:24,300
which are you know the Peruvian Central

85
00:03:24,300 --> 00:03:26,519
Authority go ahead

86
00:03:26,519 --> 00:03:30,060
um so what what do trust bundles allow

87
00:03:30,060 --> 00:03:31,620
you to do

88
00:03:31,620 --> 00:03:34,080
um so trust bundles

89
00:03:34,080 --> 00:03:36,780
you know allow you to verify that

90
00:03:36,780 --> 00:03:39,480
somebody is saying something right

91
00:03:39,480 --> 00:03:41,459
um web certificates contain contain

92
00:03:41,459 --> 00:03:44,879
claims typically Sans

93
00:03:44,879 --> 00:03:48,299
um and web certificates you know verify

94
00:03:48,299 --> 00:03:50,280
that the trust bundle has said these

95
00:03:50,280 --> 00:03:51,840
things

96
00:03:51,840 --> 00:03:54,780
um so what trust bundles will allow you

97
00:03:54,780 --> 00:03:59,159
to do is to make the make well they'll

98
00:03:59,159 --> 00:04:00,900
make your Docker images smaller and

99
00:04:00,900 --> 00:04:03,239
they'll allow you to much more rapidly

100
00:04:03,239 --> 00:04:05,340
update uh

101
00:04:05,340 --> 00:04:08,099
trust bundles such as the web root of

102
00:04:08,099 --> 00:04:10,200
trust currently you build the web root

103
00:04:10,200 --> 00:04:12,599
of trust into the very base most layer

104
00:04:12,599 --> 00:04:14,519
of your Docker image

105
00:04:14,519 --> 00:04:16,620
um so you've got all of those things and

106
00:04:16,620 --> 00:04:18,660
they're actually you know sometimes even

107
00:04:18,660 --> 00:04:20,639
the majority of a Docker image the

108
00:04:20,639 --> 00:04:23,280
Google distro list image has just four

109
00:04:23,280 --> 00:04:25,919
things in it of which the trust bundle

110
00:04:25,919 --> 00:04:28,680
is the the largest by far that's not

111
00:04:28,680 --> 00:04:30,840
true for most Docker images but you know

112
00:04:30,840 --> 00:04:33,060
that is that is one of the base most

113
00:04:33,060 --> 00:04:35,759
layers but sometimes that trust bundle

114
00:04:35,759 --> 00:04:37,199
changes right

115
00:04:37,199 --> 00:04:39,240
um just a few months ago trust core was

116
00:04:39,240 --> 00:04:42,000
removed from every web CA

117
00:04:42,000 --> 00:04:43,919
um you know is is in the process of

118
00:04:43,919 --> 00:04:46,259
being removed I think they have like two

119
00:04:46,259 --> 00:04:47,520
or three more days before they're

120
00:04:47,520 --> 00:04:49,259
disallowed

121
00:04:49,259 --> 00:04:52,500
um but that is still embedded right that

122
00:04:52,500 --> 00:04:54,060
certificate is still embedded to all of

123
00:04:54,060 --> 00:04:57,720
the docker images you built last week

124
00:04:57,720 --> 00:05:00,180
um cluster trust bundles can be mounted

125
00:05:00,180 --> 00:05:01,979
like config maps and you will Mount them

126
00:05:01,979 --> 00:05:06,240
like config maps on Etsy SSL to update

127
00:05:06,240 --> 00:05:08,940
the web route of trust dynamically so

128
00:05:08,940 --> 00:05:10,800
you can keep up keep that up to date

129
00:05:10,800 --> 00:05:12,960
regardless of when your Docker image was

130
00:05:12,960 --> 00:05:14,100
built

131
00:05:14,100 --> 00:05:15,840
um but more importantly

132
00:05:15,840 --> 00:05:18,660
trust bundles can be mounted like uh

133
00:05:18,660 --> 00:05:21,360
like config maps and you can have a

134
00:05:21,360 --> 00:05:22,800
bunch of different trust bundles for all

135
00:05:22,800 --> 00:05:24,539
of the different little Scopes that you

136
00:05:24,539 --> 00:05:25,259
need

137
00:05:25,259 --> 00:05:26,820
and so that's what we're looking for is

138
00:05:26,820 --> 00:05:28,880
to try and limit the scope of trust so

139
00:05:28,880 --> 00:05:33,060
as we said you know your that top row of

140
00:05:33,060 --> 00:05:38,280
CAS of of root Cas is essentially the

141
00:05:38,280 --> 00:05:40,440
the web root of trust and the trust

142
00:05:40,440 --> 00:05:42,680
that's in most Linux distributions

143
00:05:42,680 --> 00:05:46,139
Amazon Linux Google District list Alpine

144
00:05:46,139 --> 00:05:49,199
you name it it's got 160 of those what

145
00:05:49,199 --> 00:05:51,240
we recommend and what what our opinion

146
00:05:51,240 --> 00:05:53,639
is you know on your clusters you

147
00:05:53,639 --> 00:05:55,979
basically want a very limited set of top

148
00:05:55,979 --> 00:05:59,820
level Cas you want essentially your

149
00:05:59,820 --> 00:06:02,400
internal private certificate authority

150
00:06:02,400 --> 00:06:05,520
to be your root of trust and no others

151
00:06:05,520 --> 00:06:08,580
maybe maybe a partner or two but not on

152
00:06:08,580 --> 00:06:11,280
every server that you've got so what we

153
00:06:11,280 --> 00:06:13,199
what what we're looking to do is try and

154
00:06:13,199 --> 00:06:15,479
Implement uh provide a way to implement

155
00:06:15,479 --> 00:06:17,120
easily

156
00:06:17,120 --> 00:06:19,620
trust bundles that let your scope to

157
00:06:19,620 --> 00:06:22,620
just the part in blue and not the 150

158
00:06:22,620 --> 00:06:24,840
items in red right there's no reason

159
00:06:24,840 --> 00:06:27,479
that that any server should have to

160
00:06:27,479 --> 00:06:28,819
trust

161
00:06:28,819 --> 00:06:33,840
you know a a Peruvian Cafe website but

162
00:06:33,840 --> 00:06:35,880
your your system would accept that

163
00:06:35,880 --> 00:06:38,160
Peruvian Cafe website's TLS certificate

164
00:06:38,160 --> 00:06:39,900
because it's got an intermediate chain

165
00:06:39,900 --> 00:06:41,880
that Roots up to

166
00:06:41,880 --> 00:06:44,520
um the the Peruvian root Authority which

167
00:06:44,520 --> 00:06:47,280
is in your trust bundle and and part of

168
00:06:47,280 --> 00:06:48,660
this point is not that you shouldn't

169
00:06:48,660 --> 00:06:50,759
trust those all of those web certs but

170
00:06:50,759 --> 00:06:52,319
you should trust them for when you're

171
00:06:52,319 --> 00:06:54,660
going to the web for most applications

172
00:06:54,660 --> 00:06:57,180
for most of your internal calls you are

173
00:06:57,180 --> 00:06:58,800
not going to the web you should be using

174
00:06:58,800 --> 00:07:01,319
a trust bundle that is scoped to your

175
00:07:01,319 --> 00:07:03,060
internal Network

176
00:07:03,060 --> 00:07:04,740
um so the the web to root of trust will

177
00:07:04,740 --> 00:07:07,199
still be around it just won't be the

178
00:07:07,199 --> 00:07:08,940
default for most of your applications

179
00:07:08,940 --> 00:07:11,460
right so in our keynote this morning we

180
00:07:11,460 --> 00:07:13,139
just added this slide

181
00:07:13,139 --> 00:07:17,360
um the the presenter Zach um Zach

182
00:07:17,360 --> 00:07:19,680
Zach butcher mentioned you know trying

183
00:07:19,680 --> 00:07:21,240
to get to a zero trust architecture

184
00:07:21,240 --> 00:07:23,099
these were the five points that he made

185
00:07:23,099 --> 00:07:25,740
Coupe TLS helped to implement those

186
00:07:25,740 --> 00:07:28,380
first three points very easily so we'll

187
00:07:28,380 --> 00:07:31,020
show you how this works yeah so Coop TLS

188
00:07:31,020 --> 00:07:33,120
automatically injects certificates that

189
00:07:33,120 --> 00:07:35,160
provide workload identity onto every pod

190
00:07:35,160 --> 00:07:37,740
and every container in the cluster

191
00:07:37,740 --> 00:07:40,860
um they provide uh privacy by TLS

192
00:07:40,860 --> 00:07:42,599
encryption they provide authentication

193
00:07:42,599 --> 00:07:46,199
by TLS Mutual encryption and

194
00:07:46,199 --> 00:07:48,180
authorization comes very quickly from

195
00:07:48,180 --> 00:07:49,380
that

196
00:07:49,380 --> 00:07:51,720
um simply because you're you know once

197
00:07:51,720 --> 00:07:54,599
you have those identities those per pod

198
00:07:54,599 --> 00:07:56,360
per service account identities

199
00:07:56,360 --> 00:07:59,039
authorization becomes a a very quick

200
00:07:59,039 --> 00:08:00,960
layer

201
00:08:00,960 --> 00:08:03,479
um so how do you do how do you do secure

202
00:08:03,479 --> 00:08:05,699
networking on kubernetes well you know

203
00:08:05,699 --> 00:08:07,800
in the last talk there was a number of

204
00:08:07,800 --> 00:08:09,840
of they they went over a bunch of those

205
00:08:09,840 --> 00:08:10,919
ways

206
00:08:10,919 --> 00:08:12,360
um any number of talks here are going to

207
00:08:12,360 --> 00:08:13,620
talk about

208
00:08:13,620 --> 00:08:17,099
um different ways to do that so uh the

209
00:08:17,099 --> 00:08:19,379
two most common ways are these first two

210
00:08:19,379 --> 00:08:21,900
sub bullets is one is you're using

211
00:08:21,900 --> 00:08:24,120
sidecars and

212
00:08:24,120 --> 00:08:26,580
um we're not a big fan of side cars they

213
00:08:26,580 --> 00:08:29,160
don't they don't cover all the space

214
00:08:29,160 --> 00:08:31,860
um they're complicated they're typically

215
00:08:31,860 --> 00:08:34,020
managed in Enterprises by teams that are

216
00:08:34,020 --> 00:08:35,760
not your application development teams

217
00:08:35,760 --> 00:08:38,339
so they're orthogonal to your

218
00:08:38,339 --> 00:08:40,799
application architecture uh the other

219
00:08:40,799 --> 00:08:44,339
thing is that your your secure your

220
00:08:44,339 --> 00:08:46,260
application security architecture should

221
00:08:46,260 --> 00:08:48,420
be designed in your application and one

222
00:08:48,420 --> 00:08:51,180
of the one of the 12 factors in the 12

223
00:08:51,180 --> 00:08:53,580
Factor app is that there's a sort of a

224
00:08:53,580 --> 00:08:56,519
single point you're you minimize

225
00:08:56,519 --> 00:08:59,459
dependencies and so if your security of

226
00:08:59,459 --> 00:09:01,019
your application Arc textures depending

227
00:09:01,019 --> 00:09:02,880
on not only your application but also

228
00:09:02,880 --> 00:09:05,640
these sidecars now you've got two points

229
00:09:05,640 --> 00:09:07,140
that are that are doing that not a

230
00:09:07,140 --> 00:09:09,660
single single dependency for it

231
00:09:09,660 --> 00:09:10,320
um

232
00:09:10,320 --> 00:09:13,560
the other choice is some kind of cni

233
00:09:13,560 --> 00:09:17,820
complex cni thing with with Calico or

234
00:09:17,820 --> 00:09:19,200
something where you're trying to limit

235
00:09:19,200 --> 00:09:21,300
network access and who can who can send

236
00:09:21,300 --> 00:09:24,120
packets to who and again this is at the

237
00:09:24,120 --> 00:09:25,980
wrong layer it is in your network

238
00:09:25,980 --> 00:09:27,839
architecture your your application

239
00:09:27,839 --> 00:09:29,279
security architecture is now dependent

240
00:09:29,279 --> 00:09:31,560
on your network architecture and and the

241
00:09:31,560 --> 00:09:33,120
two have to change in sync and that can

242
00:09:33,120 --> 00:09:35,339
be very difficult so neither of these

243
00:09:35,339 --> 00:09:36,959
two ways are very

244
00:09:36,959 --> 00:09:39,899
um they they're difficult to manage

245
00:09:39,899 --> 00:09:41,580
typically in most organizations you have

246
00:09:41,580 --> 00:09:43,260
two separate groups that do it and so

247
00:09:43,260 --> 00:09:44,519
there's a lot of communications got to

248
00:09:44,519 --> 00:09:46,560
happen our recommendation is the right

249
00:09:46,560 --> 00:09:48,060
way to do this is that every service

250
00:09:48,060 --> 00:09:50,700
speaks TLS natively so it doesn't send a

251
00:09:50,700 --> 00:09:52,980
packet anywhere unless it's over a TLS

252
00:09:52,980 --> 00:09:54,959
link and to do that you need

253
00:09:54,959 --> 00:09:57,480
certificates in every pod so that you

254
00:09:57,480 --> 00:10:01,260
can create that TLS Connection in in our

255
00:10:01,260 --> 00:10:03,779
demo in our demo repository which is

256
00:10:03,779 --> 00:10:05,360
linked at the end of this presentation

257
00:10:05,360 --> 00:10:08,279
we show different examples of how you

258
00:10:08,279 --> 00:10:10,920
configure your service so that it speaks

259
00:10:10,920 --> 00:10:13,320
TLS natively how to get how to get that

260
00:10:13,320 --> 00:10:15,540
private key and that certificate bundled

261
00:10:15,540 --> 00:10:17,519
into however your particular language

262
00:10:17,519 --> 00:10:20,279
does web servers and it really is

263
00:10:20,279 --> 00:10:22,740
usually that simple as you know when

264
00:10:22,740 --> 00:10:24,420
when you are making a grpc connection

265
00:10:24,420 --> 00:10:26,820
you have to specify I am doing this the

266
00:10:26,820 --> 00:10:29,100
insecure way or you can specify I am

267
00:10:29,100 --> 00:10:31,620
doing this the Kube TLS way we provide

268
00:10:31,620 --> 00:10:34,620
just a grpc dial option that makes it

269
00:10:34,620 --> 00:10:36,480
you know just picks up the right place

270
00:10:36,480 --> 00:10:38,700
picks up the right certificates for your

271
00:10:38,700 --> 00:10:40,800
cluster we provide a Java version of

272
00:10:40,800 --> 00:10:42,600
this as well that yeah and if you've

273
00:10:42,600 --> 00:10:45,060
ever gone you know Google how to do mtls

274
00:10:45,060 --> 00:10:47,459
with Java like half of it is how to

275
00:10:47,459 --> 00:10:50,220
create this not half it 90 of us how to

276
00:10:50,220 --> 00:10:52,560
create the certificate and and ten

277
00:10:52,560 --> 00:10:54,000
percent of it is like here's the Java

278
00:10:54,000 --> 00:10:55,620
code that just simply uses that that

279
00:10:55,620 --> 00:10:57,720
certificate private key and we've

280
00:10:57,720 --> 00:11:00,899
simplified that 90 down to five percent

281
00:11:00,899 --> 00:11:02,459
right

282
00:11:02,459 --> 00:11:03,779
um one of these days I'll get around to

283
00:11:03,779 --> 00:11:05,820
writing the python version

284
00:11:05,820 --> 00:11:08,880
um yeah but so

285
00:11:08,880 --> 00:11:10,920
um the nice thing about TLS everywhere

286
00:11:10,920 --> 00:11:13,920
at the application Level is that there

287
00:11:13,920 --> 00:11:15,600
is no chance of it being sniffed

288
00:11:15,600 --> 00:11:18,899
whenever it is leaving your pod and in

289
00:11:18,899 --> 00:11:21,720
fact your applications uh you know

290
00:11:21,720 --> 00:11:24,899
memory space it is TLS encrypted it's

291
00:11:24,899 --> 00:11:27,300
TLS native it's encrypted and it's

292
00:11:27,300 --> 00:11:31,339
mutually authenticated everywhere you go

293
00:11:31,740 --> 00:11:36,300
so yeah what is what is Coupe TLS at at

294
00:11:36,300 --> 00:11:38,579
its most basic it is it is an admission

295
00:11:38,579 --> 00:11:41,779
controller it's it's a mutating web hook

296
00:11:41,779 --> 00:11:43,920
configuration object inside of your

297
00:11:43,920 --> 00:11:46,380
kubernetes cluster what what that means

298
00:11:46,380 --> 00:11:48,480
is the kubernetes cluster is going to

299
00:11:48,480 --> 00:11:50,579
based on the filters that you set up in

300
00:11:50,579 --> 00:11:52,860
the in the in the yaml for this object

301
00:11:52,860 --> 00:11:57,120
it's going to send every pod request to

302
00:11:57,120 --> 00:11:58,380
our

303
00:11:58,380 --> 00:12:00,899
um to our service it makes a web call to

304
00:12:00,899 --> 00:12:04,079
our service we return beta data back to

305
00:12:04,079 --> 00:12:07,440
the the kubernetes master we modify that

306
00:12:07,440 --> 00:12:10,019
incoming pod request add the certificate

307
00:12:10,019 --> 00:12:11,760
secrets to add certificates to it that

308
00:12:11,760 --> 00:12:13,560
contain the secrets so that they're

309
00:12:13,560 --> 00:12:16,320
mounted on a file system visible to that

310
00:12:16,320 --> 00:12:18,540
pod and so all that pod has to do is

311
00:12:18,540 --> 00:12:20,160
pick those certificates up for book from

312
00:12:20,160 --> 00:12:21,959
a well-known location

313
00:12:21,959 --> 00:12:24,839
um and so this is the building blocks of

314
00:12:24,839 --> 00:12:25,620
uh

315
00:12:25,620 --> 00:12:28,140
um trust architecture so yeah it's got a

316
00:12:28,140 --> 00:12:30,839
private key a matching private key and

317
00:12:30,839 --> 00:12:32,519
it's got a sense actually the trust

318
00:12:32,519 --> 00:12:34,920
bundle so it's got the root certificates

319
00:12:34,920 --> 00:12:37,740
that you care about for this pod in

320
00:12:37,740 --> 00:12:39,480
there which is basically just your

321
00:12:39,480 --> 00:12:42,000
internal CA in most cases we'll talk

322
00:12:42,000 --> 00:12:43,260
about the different types of patterns

323
00:12:43,260 --> 00:12:44,360
that you'll use

324
00:12:44,360 --> 00:12:47,220
that bottom bullet will get replaced by

325
00:12:47,220 --> 00:12:49,260
the cap when it's doing cluster trust

326
00:12:49,260 --> 00:12:50,940
bundles when that feature is added to

327
00:12:50,940 --> 00:12:52,320
kubernetes and then all you need to do

328
00:12:52,320 --> 00:12:54,420
is provide a secret and a key and this

329
00:12:54,420 --> 00:12:55,380
is the building blocks of an

330
00:12:55,380 --> 00:12:58,320
architecture that we'll talk about yeah

331
00:12:58,320 --> 00:13:00,240
um yeah I think we've already mostly

332
00:13:00,240 --> 00:13:02,160
covered this but your application should

333
00:13:02,160 --> 00:13:04,139
speak only TLS

334
00:13:04,139 --> 00:13:08,040
um your your organization itself is a

335
00:13:08,040 --> 00:13:09,360
zone of trust

336
00:13:09,360 --> 00:13:11,459
um right there is no such as thing as as

337
00:13:11,459 --> 00:13:14,399
zero trust but you can make your

338
00:13:14,399 --> 00:13:16,380
application to application connections

339
00:13:16,380 --> 00:13:19,860
the start of a zone of trust and once

340
00:13:19,860 --> 00:13:23,279
you have done so the you adding the the

341
00:13:23,279 --> 00:13:27,240
you know identity aware part of allowing

342
00:13:27,240 --> 00:13:29,519
things to connect uh becomes very simple

343
00:13:29,519 --> 00:13:31,800
right once you have the the core

344
00:13:31,800 --> 00:13:33,019
identity

345
00:13:33,019 --> 00:13:36,420
and encryption provided identity and

346
00:13:36,420 --> 00:13:39,779
authentication provided on every request

347
00:13:39,779 --> 00:13:41,940
um the rest of this you know just falls

348
00:13:41,940 --> 00:13:43,260
into place

349
00:13:43,260 --> 00:13:45,660
so this is an example of how not to do

350
00:13:45,660 --> 00:13:47,639
it which is basically just the side card

351
00:13:47,639 --> 00:13:49,019
pattern we think is flawed because

352
00:13:49,019 --> 00:13:51,620
there's open text it is as the previous

353
00:13:51,620 --> 00:13:54,540
presenter mentioned like if somebody

354
00:13:54,540 --> 00:13:57,060
somebody is a muck on your network which

355
00:13:57,060 --> 00:13:58,440
you know I mean you have to think of

356
00:13:58,440 --> 00:14:00,480
that as a valid possibility

357
00:14:00,480 --> 00:14:01,800
um you have to assume breach and so if

358
00:14:01,800 --> 00:14:03,420
you assume breach that clear text

359
00:14:03,420 --> 00:14:05,639
connection can be sniffed and and used

360
00:14:05,639 --> 00:14:08,339
in in various nefarious ways so this is

361
00:14:08,339 --> 00:14:09,839
why we don't like this architecture we'd

362
00:14:09,839 --> 00:14:11,880
rather that that application pod speak

363
00:14:11,880 --> 00:14:15,480
TLS so that's encrypted well before it

364
00:14:15,480 --> 00:14:16,980
hits any of your network architecture

365
00:14:16,980 --> 00:14:19,579
inside the code inside the running

366
00:14:19,579 --> 00:14:22,019
application it's encrypted before it

367
00:14:22,019 --> 00:14:24,120
hits Network and just to be clear this

368
00:14:24,120 --> 00:14:26,279
is hard to sniff this is not this is not

369
00:14:26,279 --> 00:14:28,800
easy to happen on the other hand

370
00:14:28,800 --> 00:14:31,200
istio fills open

371
00:14:31,200 --> 00:14:33,120
um if your side cars aren't injected

372
00:14:33,120 --> 00:14:35,820
your application will still try to talk

373
00:14:35,820 --> 00:14:37,740
and the proxy won't be there and it'll

374
00:14:37,740 --> 00:14:39,540
just talk to the network

375
00:14:39,540 --> 00:14:41,579
um that's a problem that's that is

376
00:14:41,579 --> 00:14:43,560
actually pretty much the Crux of our

377
00:14:43,560 --> 00:14:46,019
argument and istio fails open you don't

378
00:14:46,019 --> 00:14:47,760
want that and there are ways to like

379
00:14:47,760 --> 00:14:51,480
bypass the the network if I have a rogue

380
00:14:51,480 --> 00:14:53,339
app that's on that's been deployed to

381
00:14:53,339 --> 00:14:55,500
the cluster I can ignore the fact that

382
00:14:55,500 --> 00:14:58,199
there's a sidecar there and talk now you

383
00:14:58,199 --> 00:15:01,079
can fix that with complex cnis but those

384
00:15:01,079 --> 00:15:04,440
are complex dnis that you know yeah

385
00:15:04,440 --> 00:15:05,639
um yeah

386
00:15:05,639 --> 00:15:07,980
so this is our opinion this is much

387
00:15:07,980 --> 00:15:11,040
easier to uh to implement in our opinion

388
00:15:11,040 --> 00:15:12,660
although this looks as complicated as

389
00:15:12,660 --> 00:15:14,519
anything else this is just a set of

390
00:15:14,519 --> 00:15:17,399
repeated patterns done the same way with

391
00:15:17,399 --> 00:15:19,620
slightly different regular pre-planned

392
00:15:19,620 --> 00:15:22,980
variations on what they are so here's

393
00:15:22,980 --> 00:15:25,560
yeah so this this is what an app looks

394
00:15:25,560 --> 00:15:27,660
like right it has it is serving

395
00:15:27,660 --> 00:15:30,600
something and it is acting as a client

396
00:15:30,600 --> 00:15:34,500
um and it does so with you know

397
00:15:34,500 --> 00:15:37,079
certificates provided but as or

398
00:15:37,079 --> 00:15:38,519
certificates chaining up to your trust

399
00:15:38,519 --> 00:15:39,720
bundle

400
00:15:39,720 --> 00:15:42,660
um it connects to you know it has an

401
00:15:42,660 --> 00:15:44,579
identity on your network

402
00:15:44,579 --> 00:15:47,160
um and that identity might tell it might

403
00:15:47,160 --> 00:15:49,440
say you know I am the server for x and

404
00:15:49,440 --> 00:15:51,060
that identity might say I am the client

405
00:15:51,060 --> 00:15:53,639
that has this service account

406
00:15:53,639 --> 00:15:55,860
um and you might just you know put both

407
00:15:55,860 --> 00:15:57,540
of those into the same client

408
00:15:57,540 --> 00:15:59,100
certificate

409
00:15:59,100 --> 00:16:01,380
um as kubetls does it just creates a

410
00:16:01,380 --> 00:16:03,240
client certificate

411
00:16:03,240 --> 00:16:06,240
um a client slash server certificate for

412
00:16:06,240 --> 00:16:08,820
each pod when it comes up it figures out

413
00:16:08,820 --> 00:16:10,620
which Services it should be valid for so

414
00:16:10,620 --> 00:16:12,360
it adds the DNS names the appropriate

415
00:16:12,360 --> 00:16:15,959
DNS names to it as DNS Sans

416
00:16:15,959 --> 00:16:18,600
um and it adds the the service account

417
00:16:18,600 --> 00:16:21,899
in uh as both the common name and the

418
00:16:21,899 --> 00:16:22,980
spiffy

419
00:16:22,980 --> 00:16:25,620
um sort of style ID

420
00:16:25,620 --> 00:16:27,959
um and probably more as we you know

421
00:16:27,959 --> 00:16:31,199
figure out and turn add feature Flags to

422
00:16:31,199 --> 00:16:34,260
to make this work in interesting ways

423
00:16:34,260 --> 00:16:35,579
um there's still some you know question

424
00:16:35,579 --> 00:16:37,259
about how exactly those identities

425
00:16:37,259 --> 00:16:39,240
should be represented though spiffy

426
00:16:39,240 --> 00:16:42,000
seems to be a pretty clear you know

427
00:16:42,000 --> 00:16:43,980
pretty commonly used

428
00:16:43,980 --> 00:16:46,620
so there's another way to to apply this

429
00:16:46,620 --> 00:16:48,420
same pattern so this would be talking to

430
00:16:48,420 --> 00:16:50,820
Partners on the web so

431
00:16:50,820 --> 00:16:52,079
um there are two different ways to do

432
00:16:52,079 --> 00:16:53,339
this we prefer the way on the top

433
00:16:53,339 --> 00:16:55,519
because we think it's it's it's more

434
00:16:55,519 --> 00:16:58,139
long-term robust but let's talk about

435
00:16:58,139 --> 00:17:00,540
that so what you do is

436
00:17:00,540 --> 00:17:02,220
um in your internal service and their

437
00:17:02,220 --> 00:17:04,319
internal service you trade trust bundles

438
00:17:04,319 --> 00:17:09,179
and that way when their API server uses

439
00:17:09,179 --> 00:17:11,819
its internally generated certificate to

440
00:17:11,819 --> 00:17:13,559
talk to your server you're going to

441
00:17:13,559 --> 00:17:15,839
validate that certificate that you're

442
00:17:15,839 --> 00:17:17,939
going to do an mtls Mutual TLS

443
00:17:17,939 --> 00:17:19,740
authentication of the incoming clients

444
00:17:19,740 --> 00:17:21,599
are with the trust bundle that that's

445
00:17:21,599 --> 00:17:24,299
been injected into your pod that trust

446
00:17:24,299 --> 00:17:25,740
bundle in this case is your partner's

447
00:17:25,740 --> 00:17:27,959
trust bundle and therefore you trust

448
00:17:27,959 --> 00:17:30,780
that certificate on on the calling side

449
00:17:30,780 --> 00:17:33,059
there your partner's API is going to

450
00:17:33,059 --> 00:17:34,679
make a call to a web server and when

451
00:17:34,679 --> 00:17:37,260
that web server sends back the hello IM

452
00:17:37,260 --> 00:17:40,140
server XYZ essentially hello I am blue

453
00:17:40,140 --> 00:17:43,320
server internal API it checks that blue

454
00:17:43,320 --> 00:17:46,020
certificate see if it's valid and it

455
00:17:46,020 --> 00:17:48,179
does so against your trust bundle which

456
00:17:48,179 --> 00:17:50,160
is the blue trust bundle and so it says

457
00:17:50,160 --> 00:17:51,720
yes this certificate chain matches

458
00:17:51,720 --> 00:17:54,240
cryptographically so we we're good to go

459
00:17:54,240 --> 00:17:55,919
we'll accept you know what we believe

460
00:17:55,919 --> 00:17:58,620
we're talking to the correct you know

461
00:17:58,620 --> 00:18:01,679
blue server and that yellow certificate

462
00:18:01,679 --> 00:18:03,299
that we send down the line the blue

463
00:18:03,299 --> 00:18:05,340
server is able to validate that yellow

464
00:18:05,340 --> 00:18:06,840
server as belonging to the yellow

465
00:18:06,840 --> 00:18:08,280
company

466
00:18:08,280 --> 00:18:10,380
um the other way to do this is basically

467
00:18:10,380 --> 00:18:12,720
not to trade trust bundles but trade

468
00:18:12,720 --> 00:18:15,480
certificates that works just as well

469
00:18:15,480 --> 00:18:17,460
because the blue server will be

470
00:18:17,460 --> 00:18:18,840
validating a blue certificate against

471
00:18:18,840 --> 00:18:22,260
the blue trust bundle that works uh the

472
00:18:22,260 --> 00:18:23,820
problem with that is that you want to be

473
00:18:23,820 --> 00:18:25,260
able to rotate your certificates pretty

474
00:18:25,260 --> 00:18:26,520
fast and that means exchanging

475
00:18:26,520 --> 00:18:28,320
certificates with your partners on a

476
00:18:28,320 --> 00:18:31,200
regular basis say every 60 days every

477
00:18:31,200 --> 00:18:33,900
every month every week like whatever

478
00:18:33,900 --> 00:18:35,000
your

479
00:18:35,000 --> 00:18:37,740
aggressive certificate rotation plan is

480
00:18:37,740 --> 00:18:39,000
you're probably not going to get down to

481
00:18:39,000 --> 00:18:40,679
seconds with that probably not good

482
00:18:40,679 --> 00:18:43,020
seconds but the upward but your

483
00:18:43,020 --> 00:18:44,700
certificates your your Cas aren't going

484
00:18:44,700 --> 00:18:46,380
to change all that often so that's

485
00:18:46,380 --> 00:18:47,820
something you can do yearly and then

486
00:18:47,820 --> 00:18:49,559
still rotate your certificates you

487
00:18:49,559 --> 00:18:51,720
rotate your blue certificates as fast as

488
00:18:51,720 --> 00:18:54,000
you want they take their yellow

489
00:18:54,000 --> 00:18:55,500
certificates as fast as they want

490
00:18:55,500 --> 00:18:57,480
YouTube pretty much don't care what

491
00:18:57,480 --> 00:18:59,280
you're doing operationally so that's why

492
00:18:59,280 --> 00:19:00,480
I just care that you trust each other

493
00:19:00,480 --> 00:19:02,880
you care that you trust each other

494
00:19:02,880 --> 00:19:06,299
um so here is the details on what a TLS

495
00:19:06,299 --> 00:19:07,799
certificate

496
00:19:07,799 --> 00:19:09,360
um looks like

497
00:19:09,360 --> 00:19:12,900
um so we we start by you know being

498
00:19:12,900 --> 00:19:15,539
called as a web hook we look up the

499
00:19:15,539 --> 00:19:18,120
container services so

500
00:19:18,120 --> 00:19:20,460
um one of the the flaws in our model is

501
00:19:20,460 --> 00:19:22,919
that whatever Services the pot is

502
00:19:22,919 --> 00:19:24,600
associated with when it starts up are

503
00:19:24,600 --> 00:19:27,120
the host names that they get uh if you

504
00:19:27,120 --> 00:19:28,500
create the service after you create the

505
00:19:28,500 --> 00:19:30,840
Pod then you're out of luck if you

506
00:19:30,840 --> 00:19:32,760
change the Pod afterwards you change the

507
00:19:32,760 --> 00:19:34,440
labels on either the Pod or the service

508
00:19:34,440 --> 00:19:37,260
after words and change the services it

509
00:19:37,260 --> 00:19:39,559
matches to then you're out of luck

510
00:19:39,559 --> 00:19:43,020
which is fine so long as you don't do

511
00:19:43,020 --> 00:19:45,480
that very often it's also fine if you

512
00:19:45,480 --> 00:19:48,360
move away from doing the DNS Sands and

513
00:19:48,360 --> 00:19:51,000
start moving to a model where rather

514
00:19:51,000 --> 00:19:52,740
than authenticating the services you

515
00:19:52,740 --> 00:19:54,960
authenticate the service accounts that

516
00:19:54,960 --> 00:19:57,240
you're trying to connect to

517
00:19:57,240 --> 00:19:59,880
um and that's sort of the the step that

518
00:19:59,880 --> 00:20:02,160
you want to go to eventually

519
00:20:02,160 --> 00:20:04,620
um but for the moment you know DNS Sands

520
00:20:04,620 --> 00:20:06,360
is is really easy and compatible with

521
00:20:06,360 --> 00:20:08,039
everything

522
00:20:08,039 --> 00:20:11,880
um so Coupe TLS then creates a CSR

523
00:20:11,880 --> 00:20:14,280
um csrs are an object a top level

524
00:20:14,280 --> 00:20:17,400
cluster level object in kubernetes

525
00:20:17,400 --> 00:20:19,380
um and you can use them to do

526
00:20:19,380 --> 00:20:22,260
certificate signing and approval

527
00:20:22,260 --> 00:20:26,220
um it will approve or uh its controller

528
00:20:26,220 --> 00:20:28,679
to approve will approve and then it

529
00:20:28,679 --> 00:20:31,919
attaches uh it attaches a secret to your

530
00:20:31,919 --> 00:20:34,740
pot by way of mutating your pod

531
00:20:34,740 --> 00:20:37,080
um and respond back to that with to

532
00:20:37,080 --> 00:20:39,660
kubernetes with that

533
00:20:39,660 --> 00:20:43,320
um yeah so these are the the key fields

534
00:20:43,320 --> 00:20:46,260
that we use in in uh the x509

535
00:20:46,260 --> 00:20:47,520
certificate that we're creating and

536
00:20:47,520 --> 00:20:50,100
injecting into into the Pod

537
00:20:50,100 --> 00:20:52,620
um so uh the common name is the name of

538
00:20:52,620 --> 00:20:55,200
the Pod so common name used to be the

539
00:20:55,200 --> 00:20:57,900
website that it served for but now that

540
00:20:57,900 --> 00:20:59,700
has moved to the sand the subject

541
00:20:59,700 --> 00:21:01,919
alternative name so we've used sand many

542
00:21:01,919 --> 00:21:03,539
times without defining it but the sand

543
00:21:03,539 --> 00:21:05,640
is the subject alternative name and

544
00:21:05,640 --> 00:21:07,500
that's the list by which most of your

545
00:21:07,500 --> 00:21:10,500
HTTP mechanism will validate like am I

546
00:21:10,500 --> 00:21:13,440
talking to server X if the sir if the

547
00:21:13,440 --> 00:21:15,440
certificate that server X presented you

548
00:21:15,440 --> 00:21:18,360
contains the sand that says serverax

549
00:21:18,360 --> 00:21:20,160
then yes you're talking to them I know

550
00:21:20,160 --> 00:21:22,380
by the way that it it cryptographically

551
00:21:22,380 --> 00:21:24,780
chains up to the root right that's what

552
00:21:24,780 --> 00:21:27,179
we do so uh the name of the Pod and the

553
00:21:27,179 --> 00:21:29,400
subject alternative name it's a DNS with

554
00:21:29,400 --> 00:21:31,140
the names of the service the name of the

555
00:21:31,140 --> 00:21:33,659
Pod and any other DNS name that makes

556
00:21:33,659 --> 00:21:35,580
sense uh based on the flags that you

557
00:21:35,580 --> 00:21:39,120
give Coupe TLS we also throw in a a the

558
00:21:39,120 --> 00:21:41,059
ID is based on the service

559
00:21:41,059 --> 00:21:43,799
and so you can use this with with your

560
00:21:43,799 --> 00:21:47,840
spiffy IDs we set the key usage so in

561
00:21:47,840 --> 00:21:49,919
n8x509 certificate there's a field that

562
00:21:49,919 --> 00:21:52,380
says how can you use this key there are

563
00:21:52,380 --> 00:21:54,059
a couple of values there one is this is

564
00:21:54,059 --> 00:21:56,340
a root CA this is a this is a signing

565
00:21:56,340 --> 00:21:58,919
typically an intermediate CA or this is

566
00:21:58,919 --> 00:22:01,080
a web server or this is a a client

567
00:22:01,080 --> 00:22:03,480
certificate and we set them both you are

568
00:22:03,480 --> 00:22:06,059
a web server and a client certificate so

569
00:22:06,059 --> 00:22:07,799
that you can use the same certificate on

570
00:22:07,799 --> 00:22:10,380
either side on the client side or the

571
00:22:10,380 --> 00:22:11,880
website we do the same thing that let's

572
00:22:11,880 --> 00:22:14,520
encrypt does yes that's that's what's

573
00:22:14,520 --> 00:22:16,200
important

574
00:22:16,200 --> 00:22:17,880
um and then it also you know has the

575
00:22:17,880 --> 00:22:20,880
identity of the root it's signing up too

576
00:22:20,880 --> 00:22:24,720
um so let's do a demo demos are fun yes

577
00:22:24,720 --> 00:22:28,380
uh apologies to Semisonic here yeah for

578
00:22:28,380 --> 00:22:30,840
the lyrics

579
00:22:30,840 --> 00:22:34,020
um let's mirror this and let's make this

580
00:22:34,020 --> 00:22:37,140
a little bit bigger

581
00:22:37,140 --> 00:22:39,360
that big enough can people read that it

582
00:22:39,360 --> 00:22:41,760
probably helps if I move it up so you

583
00:22:41,760 --> 00:22:43,799
can actually see what's going on

584
00:22:43,799 --> 00:22:45,659
um

585
00:22:45,659 --> 00:22:48,419
so I already have some of the pods

586
00:22:48,419 --> 00:22:50,940
running but I am going to delete it so

587
00:22:50,940 --> 00:22:54,080
that we can see a fresh one

588
00:22:54,600 --> 00:22:57,299
so what we've got is a a greeter service

589
00:22:57,299 --> 00:23:00,240
and a greeter client that will demo

590
00:23:00,240 --> 00:23:02,460
um and they agree it's the hello world

591
00:23:02,460 --> 00:23:04,320
example it's the grpc hello world

592
00:23:04,320 --> 00:23:07,679
example but modified to use TLS nicely

593
00:23:07,679 --> 00:23:10,700
as we want it to

594
00:23:12,000 --> 00:23:14,400
um so here is

595
00:23:14,400 --> 00:23:15,780
our pod

596
00:23:15,780 --> 00:23:19,940
and we can exec into it

597
00:23:23,159 --> 00:23:23,820
um

598
00:23:23,820 --> 00:23:28,039
and look at its

599
00:23:29,400 --> 00:23:30,840
uh

600
00:23:30,840 --> 00:23:33,120
look at the certificate that has been

601
00:23:33,120 --> 00:23:35,539
generated

602
00:23:46,020 --> 00:23:48,240
uh it helps if I

603
00:23:48,240 --> 00:23:50,820
get my Flex quite right

604
00:23:50,820 --> 00:23:53,280
cool

605
00:23:53,280 --> 00:23:56,400
so here is a certificate

606
00:23:56,400 --> 00:23:58,799
um you can see its issuer is

607
00:23:58,799 --> 00:24:01,620
our issuer and that will match up with

608
00:24:01,620 --> 00:24:03,720
the ca certificate that it's also

609
00:24:03,720 --> 00:24:06,600
provided in that file system you can see

610
00:24:06,600 --> 00:24:07,440
that

611
00:24:07,440 --> 00:24:11,340
the DNS names it's got its uh the

612
00:24:11,340 --> 00:24:13,559
service name it's got the Pod name and

613
00:24:13,559 --> 00:24:16,740
it's got a spiffy uid

614
00:24:16,740 --> 00:24:17,400
um

615
00:24:17,400 --> 00:24:20,640
and it's just a standard TLS

616
00:24:20,640 --> 00:24:23,900
uh client server server

617
00:24:23,900 --> 00:24:27,659
RSA at the moment I was putting around

618
00:24:27,659 --> 00:24:31,620
with adding uh ecdsa but you know close

619
00:24:31,620 --> 00:24:33,240
enough

620
00:24:33,240 --> 00:24:37,260
um and this more or less works and you

621
00:24:37,260 --> 00:24:39,679
can see

622
00:24:42,120 --> 00:24:44,760
the CSR that was generated

623
00:24:44,760 --> 00:24:46,559
a few seconds ago when I deleted this

624
00:24:46,559 --> 00:24:47,940
pod

625
00:24:47,940 --> 00:24:50,100
um you know Kube TLS went through the

626
00:24:50,100 --> 00:24:53,039
process of creating this CSR ish

627
00:24:53,039 --> 00:24:54,780
approving it

628
00:24:54,780 --> 00:24:57,440
um a signer that we've set up for this

629
00:24:57,440 --> 00:25:01,200
which you know you can use cert manager

630
00:25:01,200 --> 00:25:03,659
you can use an external signer or you

631
00:25:03,659 --> 00:25:06,360
can use a very basic one that is here

632
00:25:06,360 --> 00:25:08,159
for this demo

633
00:25:08,159 --> 00:25:11,340
um all of those work it it's agnostic to

634
00:25:11,340 --> 00:25:13,440
the actual signer

635
00:25:13,440 --> 00:25:15,419
um which you know allows you to provide

636
00:25:15,419 --> 00:25:18,360
your own or or do something better

637
00:25:18,360 --> 00:25:21,120
um and then we can just you know

638
00:25:21,120 --> 00:25:24,860
create uh call a service

639
00:25:25,919 --> 00:25:27,440
uh

640
00:25:27,440 --> 00:25:31,039
yeah oh yeah

641
00:25:45,360 --> 00:25:46,679
so the greeter service the greeter

642
00:25:46,679 --> 00:25:48,480
client that's just a batch job that runs

643
00:25:48,480 --> 00:25:51,299
and exits into the Pod runs and and and

644
00:25:51,299 --> 00:25:53,940
then shuts down and because the job

645
00:25:53,940 --> 00:25:55,559
kubernetes doesn't restart it but saves

646
00:25:55,559 --> 00:25:57,779
the logs and so we can examine the logs

647
00:25:57,779 --> 00:26:01,080
after it's run yeah and so you know this

648
00:26:01,080 --> 00:26:03,179
just connects

649
00:26:03,179 --> 00:26:05,520
um it connects to the the appropriate

650
00:26:05,520 --> 00:26:06,539
name

651
00:26:06,539 --> 00:26:09,659
um it gets the greeting and it also sees

652
00:26:09,659 --> 00:26:12,299
uh the service account that we've been

653
00:26:12,299 --> 00:26:15,059
running as so if I were to modify my

654
00:26:15,059 --> 00:26:17,658
greater client

655
00:26:20,580 --> 00:26:24,740
um I can set the service account name

656
00:26:25,740 --> 00:26:27,900
that has chosen a very weird

657
00:26:27,900 --> 00:26:29,640
indentation

658
00:26:29,640 --> 00:26:31,799
here we go

659
00:26:31,799 --> 00:26:33,960
can you stop for one second yeah so

660
00:26:33,960 --> 00:26:35,580
scroll down a little bit we've got some

661
00:26:35,580 --> 00:26:36,840
stuff coming out but when you look at

662
00:26:36,840 --> 00:26:38,220
the um

663
00:26:38,220 --> 00:26:40,320
um

664
00:26:40,320 --> 00:26:41,820
okay yeah I don't know what you're

665
00:26:41,820 --> 00:26:44,640
pointing at yeah no I was

666
00:26:44,640 --> 00:26:45,539
um

667
00:26:45,539 --> 00:26:47,580
so we can create another version of it

668
00:26:47,580 --> 00:26:49,020
with a different service account running

669
00:26:49,020 --> 00:26:52,100
is a different service account

670
00:26:52,620 --> 00:26:54,059
and

671
00:26:54,059 --> 00:26:56,640
now it has this other identity visible

672
00:26:56,640 --> 00:27:00,720
to it again through the the coupe DLS uh

673
00:27:00,720 --> 00:27:03,179
certificate and that this through other

674
00:27:03,179 --> 00:27:05,279
identity is not it's not our client

675
00:27:05,279 --> 00:27:07,380
saying that that is the server that it

676
00:27:07,380 --> 00:27:09,419
is connected to that has said You know

677
00:27:09,419 --> 00:27:12,059
here I know who you are I can verify Who

678
00:27:12,059 --> 00:27:13,980
You Are

679
00:27:13,980 --> 00:27:16,740
um so what else is there that is

680
00:27:16,740 --> 00:27:18,360
interesting

681
00:27:18,360 --> 00:27:19,380
um the other thing that's sort of

682
00:27:19,380 --> 00:27:21,360
interesting is that you know it's mtls

683
00:27:21,360 --> 00:27:24,659
right if I override the CA and I use

684
00:27:24,659 --> 00:27:30,659
some other random self-signed mtls cert

685
00:27:30,659 --> 00:27:32,460
oh geez

686
00:27:32,460 --> 00:27:35,900
how did I screw this up

687
00:27:36,659 --> 00:27:39,000
there's a mix of tabs and spaces and now

688
00:27:39,000 --> 00:27:41,159
I am realizing it

689
00:27:41,159 --> 00:27:43,940
to fix this

690
00:27:53,100 --> 00:27:55,639
oh yeah

691
00:27:57,419 --> 00:27:59,840
cool

692
00:28:01,500 --> 00:28:02,940
I don't know why you have a caps lock

693
00:28:02,940 --> 00:28:05,240
key

694
00:28:05,820 --> 00:28:07,620
you can create yet another copy of this

695
00:28:07,620 --> 00:28:10,380
and this one will fail because it is

696
00:28:10,380 --> 00:28:11,760
using a

697
00:28:11,760 --> 00:28:14,159
self-signed certificate

698
00:28:14,159 --> 00:28:17,000
um this one is actually failing on the

699
00:28:17,000 --> 00:28:20,279
client side because it's signed by an

700
00:28:20,279 --> 00:28:22,559
unknown Authority but we can have it

701
00:28:22,559 --> 00:28:24,779
fail on the uh

702
00:28:24,779 --> 00:28:28,820
on the other side when we present it an

703
00:28:28,820 --> 00:28:32,059
unexpected key

704
00:28:42,240 --> 00:28:46,520
um and if we go look at the logs of our

705
00:28:51,900 --> 00:28:54,720
oh well okay the debug logs are not

706
00:28:54,720 --> 00:28:57,179
working it should have printed out

707
00:28:57,179 --> 00:28:59,100
that we got a failed connection from

708
00:28:59,100 --> 00:29:00,720
this other server that we denied a

709
00:29:00,720 --> 00:29:02,940
connection right actually so the first

710
00:29:02,940 --> 00:29:06,000
the first failure was when we saw the

711
00:29:06,000 --> 00:29:08,520
other side certificate like when it sent

712
00:29:08,520 --> 00:29:11,340
us our certificate when it sent it

713
00:29:11,340 --> 00:29:13,799
server hello certificate I am server XYZ

714
00:29:13,799 --> 00:29:15,900
along with that certificate we looked at

715
00:29:15,900 --> 00:29:18,480
it and said that doesn't chain to our

716
00:29:18,480 --> 00:29:20,399
certificate Authority so we're closing

717
00:29:20,399 --> 00:29:22,440
the connection from the client side the

718
00:29:22,440 --> 00:29:24,899
second error was we accepted that

719
00:29:24,899 --> 00:29:26,940
certificate because it did chain up and

720
00:29:26,940 --> 00:29:28,799
then we sent it an invalid certificate

721
00:29:28,799 --> 00:29:30,600
that didn't chain up to its cluster

722
00:29:30,600 --> 00:29:33,659
trust bundle and so the server closed

723
00:29:33,659 --> 00:29:36,240
the certificate on that side it says use

724
00:29:36,240 --> 00:29:38,100
of closed network connection which means

725
00:29:38,100 --> 00:29:39,659
we tried to write because we thought

726
00:29:39,659 --> 00:29:41,159
this was going to work but the server

727
00:29:41,159 --> 00:29:42,899
closed down on us because it didn't

728
00:29:42,899 --> 00:29:45,299
trust our certificate

729
00:29:45,299 --> 00:29:48,179
um cool I think that's all we have a

730
00:29:48,179 --> 00:29:51,299
couple of wrap-up slides yeah

731
00:29:51,299 --> 00:29:53,940
um so yeah let's move back here yeah

732
00:29:53,940 --> 00:29:56,159
there we go yeah

733
00:29:56,159 --> 00:29:57,419
um

734
00:29:57,419 --> 00:29:59,640
this makes it really easy to you know

735
00:29:59,640 --> 00:30:01,860
have certificates populated and have

736
00:30:01,860 --> 00:30:04,140
certificates populated in your

737
00:30:04,140 --> 00:30:06,240
applications namespace so your

738
00:30:06,240 --> 00:30:07,860
application can make use of certificates

739
00:30:07,860 --> 00:30:10,320
rather than trying to wrap it in some

740
00:30:10,320 --> 00:30:12,539
Network layer that does this all

741
00:30:12,539 --> 00:30:14,159
magically

742
00:30:14,159 --> 00:30:15,720
um you know their their advantages to

743
00:30:15,720 --> 00:30:18,840
both kinds of magic we like ours yeah

744
00:30:18,840 --> 00:30:20,039
um we think all your developers should

745
00:30:20,039 --> 00:30:22,740
learn how to use TLS and mutual TLS like

746
00:30:22,740 --> 00:30:24,720
we think that's that should be the price

747
00:30:24,720 --> 00:30:27,000
of entry for being a programmer on the

748
00:30:27,000 --> 00:30:29,100
on cloud native but also that we should

749
00:30:29,100 --> 00:30:31,200
make it simple enough that they can know

750
00:30:31,200 --> 00:30:35,220
again you know your your mtls demo is 95

751
00:30:35,220 --> 00:30:36,779
playing with certificates we've

752
00:30:36,779 --> 00:30:38,399
collapsed that down to certificates are

753
00:30:38,399 --> 00:30:40,080
provided for you just do the right code

754
00:30:40,080 --> 00:30:41,880
yeah

755
00:30:41,880 --> 00:30:44,419
um and you know there there is some

756
00:30:44,419 --> 00:30:47,760
agnosticism to Identity policy

757
00:30:47,760 --> 00:30:50,100
um we intend to provide a reasonable set

758
00:30:50,100 --> 00:30:52,919
of defaults that you can flip on and off

759
00:30:52,919 --> 00:30:55,380
um and hopefully one day it will you

760
00:30:55,380 --> 00:30:58,380
know be what just one but at the moment

761
00:30:58,380 --> 00:31:00,840
there's still some some question

762
00:31:00,840 --> 00:31:02,340
um once everybody's establishing

763
00:31:02,340 --> 00:31:06,360
authentication through uh mtls then the

764
00:31:06,360 --> 00:31:09,000
authorization layer becomes you know

765
00:31:09,000 --> 00:31:10,860
relatively easy you can see who you're

766
00:31:10,860 --> 00:31:13,320
talking to so then you can pick what

767
00:31:13,320 --> 00:31:16,740
their actual authorization level is

768
00:31:16,740 --> 00:31:20,700
uh and I think there's so other future

769
00:31:20,700 --> 00:31:21,960
directions

770
00:31:21,960 --> 00:31:23,580
um private Keys should be generated on

771
00:31:23,580 --> 00:31:24,899
the nodes and never leave the nodes

772
00:31:24,899 --> 00:31:26,100
currently they're created through

773
00:31:26,100 --> 00:31:27,600
Secrets

774
00:31:27,600 --> 00:31:29,940
um that's sub-optimal if they were

775
00:31:29,940 --> 00:31:31,440
generated on the nodes then this then

776
00:31:31,440 --> 00:31:32,940
the private key material would never

777
00:31:32,940 --> 00:31:34,620
leave the nodes

778
00:31:34,620 --> 00:31:36,480
um that would be great

779
00:31:36,480 --> 00:31:38,399
um so we're planning on moving to a CSI

780
00:31:38,399 --> 00:31:40,860
model there is not ready for demo but

781
00:31:40,860 --> 00:31:43,260
there's some work on that

782
00:31:43,260 --> 00:31:46,260
um so that the so that rather than

783
00:31:46,260 --> 00:31:48,899
mounting a secret you mount a Kube TLS

784
00:31:48,899 --> 00:31:53,299
CSI that just generates the C generates

785
00:31:53,299 --> 00:31:57,120
uh for you the private key material when

786
00:31:57,120 --> 00:31:59,279
when the node comes up and the rest of

787
00:31:59,279 --> 00:32:02,760
it happens uh pretty much the same way

788
00:32:02,760 --> 00:32:04,740
but it happens on the Node rather than

789
00:32:04,740 --> 00:32:07,620
at a central set of PODS yeah on your

790
00:32:07,620 --> 00:32:10,080
cluster so because it happens on the on

791
00:32:10,080 --> 00:32:12,419
you know those that logic is on every

792
00:32:12,419 --> 00:32:14,760
node and the private Keys stay on every

793
00:32:14,760 --> 00:32:15,659
node

794
00:32:15,659 --> 00:32:17,340
um never getting transmitted even though

795
00:32:17,340 --> 00:32:19,740
it's being transmitted by the by the

796
00:32:19,740 --> 00:32:22,559
kubernetes control plane in TLS we'd

797
00:32:22,559 --> 00:32:24,000
rather just not transport those those

798
00:32:24,000 --> 00:32:26,539
around yeah

799
00:32:26,640 --> 00:32:27,480
um and this should be built into

800
00:32:27,480 --> 00:32:28,620
kubernetes

801
00:32:28,620 --> 00:32:30,480
um but you know that's our opinion we

802
00:32:30,480 --> 00:32:33,240
like it yeah the trust plus the cluster

803
00:32:33,240 --> 00:32:34,980
trust bundles is one step in that

804
00:32:34,980 --> 00:32:37,020
direction we hope it's a huge step well

805
00:32:37,020 --> 00:32:39,720
we we hope that will knock down those

806
00:32:39,720 --> 00:32:42,240
dominoes and move forward yeah cool plan

807
00:32:42,240 --> 00:32:44,100
for world domination

808
00:32:44,100 --> 00:32:46,860
um yeah here is our repo here is our

809
00:32:46,860 --> 00:32:48,480
presentation slides and here is the

810
00:32:48,480 --> 00:32:51,360
session feedback link so sorry to keep

811
00:32:51,360 --> 00:32:53,820
you from the vendor Booth crawl so there

812
00:32:53,820 --> 00:32:55,679
should be beer available now

813
00:32:55,679 --> 00:32:58,440
soon but thank you we're here for

814
00:32:58,440 --> 00:33:00,950
questions okay

815
00:33:00,950 --> 00:33:05,809
[Applause]

816
00:33:06,539 --> 00:33:10,260
uh yes though in a branch yeah

817
00:33:10,260 --> 00:33:12,960
I I will be glad to help you run that

818
00:33:12,960 --> 00:33:14,580
demo on your cluster if you would like

819
00:33:14,580 --> 00:33:17,299
to if you look at the

820
00:33:18,059 --> 00:33:20,600
ticket yeah

821
00:33:20,880 --> 00:33:23,659
go ahead

822
00:33:27,840 --> 00:33:30,419
um yes but we're not confident enough in

823
00:33:30,419 --> 00:33:32,640
the code quality yet to do that

824
00:33:32,640 --> 00:33:33,360
um

825
00:33:33,360 --> 00:33:35,340
mostly because I wanted to make the demo

826
00:33:35,340 --> 00:33:38,240
work yeah

827
00:33:40,140 --> 00:33:41,399
cool

828
00:33:41,399 --> 00:33:45,739
thank you very much question in the back

829
00:33:50,880 --> 00:33:54,120
um so we work with any CA that provides

830
00:33:54,120 --> 00:33:56,279
a kubernetes signer

831
00:33:56,279 --> 00:33:58,799
um so the

832
00:33:58,799 --> 00:34:00,659
that is a very short list at the moment

833
00:34:00,659 --> 00:34:02,580
that's cert manager

834
00:34:02,580 --> 00:34:06,240
um but at the same time there is also a

835
00:34:06,240 --> 00:34:08,780
not even in the branch but a a super

836
00:34:08,780 --> 00:34:12,599
super janky demo of here is how you use

837
00:34:12,599 --> 00:34:16,440
a awsca to provide a kubernetes signer

838
00:34:16,440 --> 00:34:19,739
uh that I you know spent 20 minutes on

839
00:34:19,739 --> 00:34:22,739
last weekend so let's let's talk about

840
00:34:22,739 --> 00:34:25,679
it I'm I'm glad to to do the work to

841
00:34:25,679 --> 00:34:27,359
make that work and I do intend to do the

842
00:34:27,359 --> 00:34:29,760
work to make that work Microsoft has CA

843
00:34:29,760 --> 00:34:32,820
like parts of their Azure CA are exposed

844
00:34:32,820 --> 00:34:35,639
in their in their AKs stuff right oh

845
00:34:35,639 --> 00:34:37,260
then then that'll then it will just work

846
00:34:37,260 --> 00:34:39,359
yeah

847
00:34:39,359 --> 00:34:40,260
yeah

848
00:34:40,260 --> 00:34:42,480
it should just work but if that's

849
00:34:42,480 --> 00:34:44,639
already if that is already exposed then

850
00:34:44,639 --> 00:34:46,440
yeah it should just work

851
00:34:46,440 --> 00:34:48,560
um

852
00:34:50,280 --> 00:34:53,040
right so I've I've tried it with you

853
00:34:53,040 --> 00:34:55,020
know our own CA and I've tried it with

854
00:34:55,020 --> 00:34:57,420
uh cert manager and I see no reason why

855
00:34:57,420 --> 00:34:59,820
it wouldn't work with the other CA that

856
00:34:59,820 --> 00:35:01,500
I've used which is the hash record Vault

857
00:35:01,500 --> 00:35:02,940
signer

858
00:35:02,940 --> 00:35:05,400
um for csrs and that like anything that

859
00:35:05,400 --> 00:35:08,640
is a kubernetes CSR signer will work you

860
00:35:08,640 --> 00:35:09,900
know unless there's something really

861
00:35:09,900 --> 00:35:12,480
weird about it

862
00:35:12,480 --> 00:35:16,020
yeah yeah

863
00:35:18,000 --> 00:35:20,480
cool

864
00:35:20,520 --> 00:35:23,160
excellent question thank you

865
00:35:23,160 --> 00:35:26,720
you get an extra beer yeah

866
00:35:44,880 --> 00:35:47,940
um yes and no I mean the the simple

867
00:35:47,940 --> 00:35:51,240
answer is that a trust bundle is all

868
00:35:51,240 --> 00:35:52,619
equivalent

869
00:35:52,619 --> 00:35:55,440
um in most SSL implementations and that

870
00:35:55,440 --> 00:35:57,180
means that you want to be careful about

871
00:35:57,180 --> 00:36:00,380
what you put in us in your ca list

872
00:36:00,380 --> 00:36:04,140
there are additional like

873
00:36:04,140 --> 00:36:07,200
I I do believe that you are getting at a

874
00:36:07,200 --> 00:36:08,940
leading question about how openssl

875
00:36:08,940 --> 00:36:14,240
handles CA pems which I well

876
00:36:16,140 --> 00:36:17,480
yeah

877
00:36:17,480 --> 00:36:19,800
oh yes of course

878
00:36:19,800 --> 00:36:22,260
yeah and that that answer is no that

879
00:36:22,260 --> 00:36:24,540
answer is very clearly no

880
00:36:24,540 --> 00:36:26,460
um and if you start your application and

881
00:36:26,460 --> 00:36:28,140
then we and then you want to rotate

882
00:36:28,140 --> 00:36:31,320
certificates the answer is still no

883
00:36:31,320 --> 00:36:33,420
um your application unlike with some

884
00:36:33,420 --> 00:36:35,880
other things like it doesn't pick up new

885
00:36:35,880 --> 00:36:37,680
certificates on a regular basis we don't

886
00:36:37,680 --> 00:36:40,079
provide a rotation mechanism of these

887
00:36:40,079 --> 00:36:41,520
secrets

888
00:36:41,520 --> 00:36:44,040
um what should you do about that

889
00:36:44,040 --> 00:36:46,079
kill your pot kill your kill your pod

890
00:36:46,079 --> 00:36:48,720
kill your pot every 30 days yeah yeah

891
00:36:48,720 --> 00:36:51,859
yeah yeah yeah yeah yeah yeah

892
00:36:55,200 --> 00:37:00,379
no no no pretty pretty simple

893
00:37:01,200 --> 00:37:02,820
um yes

894
00:37:02,820 --> 00:37:04,980
but at the same time like we're we're

895
00:37:04,980 --> 00:37:06,240
going for the the least common

896
00:37:06,240 --> 00:37:09,359
denominator here of we don't expect yeah

897
00:37:09,359 --> 00:37:13,320
yeah we we don't we are absolutely limit

898
00:37:13,320 --> 00:37:15,300
limited by all of the limitations of

899
00:37:15,300 --> 00:37:17,359
your open SSL Library whether that be

900
00:37:17,359 --> 00:37:21,300
openssl Libre SSL go Lang's ago SSL

901
00:37:21,300 --> 00:37:23,040
implementation whatever you're using

902
00:37:23,040 --> 00:37:26,160
whatever yeah please not bouncy castle

903
00:37:26,160 --> 00:37:28,859
yeah okay

904
00:37:28,859 --> 00:37:30,780
cool

905
00:37:30,780 --> 00:37:32,520
well we got the one minute I think we

906
00:37:32,520 --> 00:37:34,200
yeah

907
00:37:34,200 --> 00:37:36,720
we're good yeah so time to turn off the

908
00:37:36,720 --> 00:37:38,839
mics

