1
00:00:00,000 --> 00:00:01,620
let's get started so hey everybody my

2
00:00:01,620 --> 00:00:03,360
name is obcar litter I am a product

3
00:00:03,360 --> 00:00:05,819
manager at tenable at Town movie provide

4
00:00:05,819 --> 00:00:07,680
a cyber security platform that you can

5
00:00:07,680 --> 00:00:09,900
use to analyze your exposure and risk

6
00:00:09,900 --> 00:00:12,059
for all of your assets in one place that

7
00:00:12,059 --> 00:00:13,700
includes for example

8
00:00:13,700 --> 00:00:16,560
risk-based or priority and risk-based

9
00:00:16,560 --> 00:00:18,000
vulnerability Management on your

10
00:00:18,000 --> 00:00:20,699
workloads configuration management or

11
00:00:20,699 --> 00:00:22,439
misconfigurations on your Cloud

12
00:00:22,439 --> 00:00:24,300
resources including kubernetes and Cloud

13
00:00:24,300 --> 00:00:27,900
native resources then I said that twice

14
00:00:27,900 --> 00:00:30,779
um web application security identity

15
00:00:30,779 --> 00:00:32,940
security and a lot of other things so

16
00:00:32,940 --> 00:00:34,680
all of that coming together in one place

17
00:00:34,680 --> 00:00:36,600
because that's how you need to look at

18
00:00:36,600 --> 00:00:39,239
security not in silos in in you know one

19
00:00:39,239 --> 00:00:42,660
vulnerability at one resource level

20
00:00:42,660 --> 00:00:45,059
I primarily focus on shift left and

21
00:00:45,059 --> 00:00:48,239
container security so that's the area I

22
00:00:48,239 --> 00:00:50,219
play in and that's why I'm here to talk

23
00:00:50,219 --> 00:00:52,860
to you today about embedding policies

24
00:00:52,860 --> 00:00:56,160
code in your git Ops and CI CD builds

25
00:00:56,160 --> 00:00:58,440
and life cycle

26
00:00:58,440 --> 00:01:00,960
I have the slide here on how amazing and

27
00:01:00,960 --> 00:01:03,180
awesome Cloud native is and kubernetes

28
00:01:03,180 --> 00:01:05,099
is but I feel like I'm preaching to the

29
00:01:05,099 --> 00:01:07,080
choir here since you're all here but I

30
00:01:07,080 --> 00:01:08,880
remember a story I went to kubecon North

31
00:01:08,880 --> 00:01:12,060
America first time ever and I was really

32
00:01:12,060 --> 00:01:14,640
convinced that everybody who speaks

33
00:01:14,640 --> 00:01:16,460
there or goes there as an attendee

34
00:01:16,460 --> 00:01:19,560
basically can code an operator in their

35
00:01:19,560 --> 00:01:22,500
sleep and they dream about crds and when

36
00:01:22,500 --> 00:01:24,960
I got there I was presently surprised

37
00:01:24,960 --> 00:01:27,540
that I was wrong people go there who are

38
00:01:27,540 --> 00:01:29,460
are newcomers beginners go there to

39
00:01:29,460 --> 00:01:31,200
learn things and so that's why I left

40
00:01:31,200 --> 00:01:33,119
this thing here right because I know

41
00:01:33,119 --> 00:01:34,439
we're being live streamed and also this

42
00:01:34,439 --> 00:01:36,780
will go on replay later so for folks who

43
00:01:36,780 --> 00:01:39,240
are new to all this the point I want to

44
00:01:39,240 --> 00:01:40,979
make here is cloud native infrastructure

45
00:01:40,979 --> 00:01:43,619
is feeling Innovation there are two main

46
00:01:43,619 --> 00:01:45,060
reasons for that one is increased

47
00:01:45,060 --> 00:01:47,759
velocity in less process friction these

48
00:01:47,759 --> 00:01:49,619
numbers you know tell the same story

49
00:01:49,619 --> 00:01:52,619
this is coming from cncf survey 2020

50
00:01:52,619 --> 00:01:54,960
there's another one in 2021 and these

51
00:01:54,960 --> 00:01:57,240
numbers go up slightly right so 92

52
00:01:57,240 --> 00:01:58,860
percent of organizations you using

53
00:01:58,860 --> 00:02:00,360
containers in production

54
00:02:00,360 --> 00:02:02,820
I remember maybe like 10 years ago I'm

55
00:02:02,820 --> 00:02:04,320
from the Bay Area I was living I was

56
00:02:04,320 --> 00:02:06,899
visiting or meeting up with a friend in

57
00:02:06,899 --> 00:02:08,940
a cafe and he was so excited about

58
00:02:08,940 --> 00:02:10,380
containers and it was a brand new thing

59
00:02:10,380 --> 00:02:12,180
back then I feel like now it's more of a

60
00:02:12,180 --> 00:02:14,520
commodity everybody sort of uses it in

61
00:02:14,520 --> 00:02:17,819
their day-to-day development lives right

62
00:02:17,819 --> 00:02:20,040
so 92 using in production 83

63
00:02:20,040 --> 00:02:21,920
organizations using kubernetes

64
00:02:21,920 --> 00:02:24,540
kubernetes obviously a big leader but

65
00:02:24,540 --> 00:02:27,239
has a big lead in the orchestration race

66
00:02:27,239 --> 00:02:30,800
and then 30 using organizations using

67
00:02:30,800 --> 00:02:33,060
quote-unquote newer Technologies like

68
00:02:33,060 --> 00:02:35,280
serverless and production as well

69
00:02:35,280 --> 00:02:37,080
so Cloud native

70
00:02:37,080 --> 00:02:39,120
apart from I don't know if you've seen

71
00:02:39,120 --> 00:02:42,000
the cloud cloud native landscape where

72
00:02:42,000 --> 00:02:43,500
like you literally need a magnifying

73
00:02:43,500 --> 00:02:45,480
glass in order to see the little uh

74
00:02:45,480 --> 00:02:48,540
cards on that page but apart from all of

75
00:02:48,540 --> 00:02:50,400
the tools and Frameworks Cloud native

76
00:02:50,400 --> 00:02:52,920
brings a change in culture as well as

77
00:02:52,920 --> 00:02:54,720
processes and mindset right that's more

78
00:02:54,720 --> 00:02:56,580
important to me because technology comes

79
00:02:56,580 --> 00:02:58,500
second people come first

80
00:02:58,500 --> 00:03:00,959
it provides an extremely high Pace

81
00:03:00,959 --> 00:03:02,760
infrastructure right we all know this

82
00:03:02,760 --> 00:03:05,519
you can set up and tear up clusters in a

83
00:03:05,519 --> 00:03:06,720
matter of minutes and all of the major

84
00:03:06,720 --> 00:03:08,760
Cloud providers

85
00:03:08,760 --> 00:03:10,800
um that is not to say that the

86
00:03:10,800 --> 00:03:12,480
underneath architecture and technology

87
00:03:12,480 --> 00:03:13,800
is not complex

88
00:03:13,800 --> 00:03:15,659
but they're able to hide that from the

89
00:03:15,659 --> 00:03:17,459
developers using simple to use

90
00:03:17,459 --> 00:03:19,140
interfaces

91
00:03:19,140 --> 00:03:21,180
right and lastly I've seen a lot of

92
00:03:21,180 --> 00:03:22,560
companies building stuff on top of

93
00:03:22,560 --> 00:03:24,599
kubernetes so kubernetes by itself is

94
00:03:24,599 --> 00:03:26,239
not something that developers

95
00:03:26,239 --> 00:03:29,940
necessarily can consume outrightly so

96
00:03:29,940 --> 00:03:31,319
I've worked with serverless environments

97
00:03:31,319 --> 00:03:33,540
for example where it almost feels like

98
00:03:33,540 --> 00:03:35,940
I'm back in the Heroku Cloud Foundry

99
00:03:35,940 --> 00:03:38,400
world where am I local code and I use do

100
00:03:38,400 --> 00:03:41,159
a CF push and it pushes my code under

101
00:03:41,159 --> 00:03:42,959
the theme that might be using istio for

102
00:03:42,959 --> 00:03:45,720
service mesh I think the one I used used

103
00:03:45,720 --> 00:03:48,780
Poquito for a source to image build Etc

104
00:03:48,780 --> 00:03:50,879
but all of that again is hidden from the

105
00:03:50,879 --> 00:03:53,340
developer giving them an easier way to

106
00:03:53,340 --> 00:03:56,940
manage runtimes and deploy at scale on

107
00:03:56,940 --> 00:03:58,500
the cloud

108
00:03:58,500 --> 00:04:01,019
right sounds great just like the

109
00:04:01,019 --> 00:04:03,000
wallpaper what room is this

110
00:04:03,000 --> 00:04:07,379
anybody yeah this is all yeah however

111
00:04:07,379 --> 00:04:09,180
is this velocity leaving you vulnerable

112
00:04:09,180 --> 00:04:10,680
right this is the Crux of the talk so

113
00:04:10,680 --> 00:04:12,659
it's nice it's nice and awesome to move

114
00:04:12,659 --> 00:04:16,640
fast but what are you missing out of

115
00:04:16,738 --> 00:04:18,660
specifically from the kubernetes uh

116
00:04:18,660 --> 00:04:20,760
point of view and uh and coming in from

117
00:04:20,760 --> 00:04:22,440
a developer lens because I was the

118
00:04:22,440 --> 00:04:24,000
developer for a while before I got into

119
00:04:24,000 --> 00:04:26,460
product management

120
00:04:26,460 --> 00:04:28,440
um again if you read the blogs and stuff

121
00:04:28,440 --> 00:04:29,940
there's tons of ways to slice and dice

122
00:04:29,940 --> 00:04:31,199
at this information and put it into

123
00:04:31,199 --> 00:04:32,699
different categories this is what I

124
00:04:32,699 --> 00:04:35,520
think again from a developer lens where

125
00:04:35,520 --> 00:04:38,160
the security problems come in

126
00:04:38,160 --> 00:04:40,080
and there's always a flip side to this

127
00:04:40,080 --> 00:04:41,580
right so developer Focus management what

128
00:04:41,580 --> 00:04:43,380
I mean by that is

129
00:04:43,380 --> 00:04:44,040
um

130
00:04:44,040 --> 00:04:46,620
developers again are able to spin up

131
00:04:46,620 --> 00:04:50,220
clusters developers devops sres and

132
00:04:50,220 --> 00:04:52,020
other technical teams in my experience

133
00:04:52,020 --> 00:04:54,660
are in charge or manage the clusters

134
00:04:54,660 --> 00:04:57,240
right Security in most organizations

135
00:04:57,240 --> 00:04:58,680
that I talk to and most customers I

136
00:04:58,680 --> 00:05:01,259
speak with security still lies in with

137
00:05:01,259 --> 00:05:03,900
the security teams and there's a big gap

138
00:05:03,900 --> 00:05:07,020
there right so with that

139
00:05:07,020 --> 00:05:09,479
um disconnect the best case scenario is

140
00:05:09,479 --> 00:05:10,860
you slow down your velocity because

141
00:05:10,860 --> 00:05:12,900
security security teams will not let you

142
00:05:12,900 --> 00:05:14,580
will not allow you to push stuff to

143
00:05:14,580 --> 00:05:16,199
production that has a vulnerability

144
00:05:16,199 --> 00:05:18,540
worst case scenario is you you expand

145
00:05:18,540 --> 00:05:20,520
your exposure service and attack surface

146
00:05:20,520 --> 00:05:21,540
because you're letting things go into

147
00:05:21,540 --> 00:05:22,740
production

148
00:05:22,740 --> 00:05:24,840
right so that's number one easy for

149
00:05:24,840 --> 00:05:27,320
developers however security takes the

150
00:05:27,320 --> 00:05:30,780
back seat and it's managed in my

151
00:05:30,780 --> 00:05:33,180
experience by somebody else

152
00:05:33,180 --> 00:05:35,880
second is uh default configurations are

153
00:05:35,880 --> 00:05:36,900
not secure

154
00:05:36,900 --> 00:05:38,699
right before now before you get up and

155
00:05:38,699 --> 00:05:40,919
start throwing Tomatoes at me

156
00:05:40,919 --> 00:05:43,259
kubernetes has a very good security

157
00:05:43,259 --> 00:05:45,600
system built in my point here here is

158
00:05:45,600 --> 00:05:47,340
it's not turned on by default in most

159
00:05:47,340 --> 00:05:49,680
cases and that's and that's the problem

160
00:05:49,680 --> 00:05:52,080
right and there's a reason for that

161
00:05:52,080 --> 00:05:55,139
um default configuration drive a certain

162
00:05:55,139 --> 00:05:56,699
kind of behavior right kubernetes is

163
00:05:56,699 --> 00:05:59,460
built for Speed performance scalability

164
00:05:59,460 --> 00:06:01,680
and that's why it has the defaults it

165
00:06:01,680 --> 00:06:02,520
has

166
00:06:02,520 --> 00:06:04,560
and like I said every level in that

167
00:06:04,560 --> 00:06:06,360
architecture in kubernetes has the

168
00:06:06,360 --> 00:06:08,000
levers and control built-in for security

169
00:06:08,000 --> 00:06:12,300
but in a lot of cases I see developers

170
00:06:12,300 --> 00:06:14,940
go with what given by default and that

171
00:06:14,940 --> 00:06:18,320
generally is not good enough

172
00:06:18,660 --> 00:06:20,160
the last one again from a developer

173
00:06:20,160 --> 00:06:22,080
point of view is privilege privilege

174
00:06:22,080 --> 00:06:24,479
management so this is again if you think

175
00:06:24,479 --> 00:06:25,919
about you have your infrastructure layer

176
00:06:25,919 --> 00:06:27,780
then you have your um and then you have

177
00:06:27,780 --> 00:06:29,220
your platform as a service and then you

178
00:06:29,220 --> 00:06:30,360
have your application now you're

179
00:06:30,360 --> 00:06:33,720
building microservices on top of that

180
00:06:33,720 --> 00:06:36,780
um deploying for example eks and AWS AWS

181
00:06:36,780 --> 00:06:40,680
has its own uh policies user groups Etc

182
00:06:40,680 --> 00:06:42,720
and then kubernetes comes in with its

183
00:06:42,720 --> 00:06:45,360
own rbac system for authorization

184
00:06:45,360 --> 00:06:46,800
um and so

185
00:06:46,800 --> 00:06:48,479
you have to be very careful and that

186
00:06:48,479 --> 00:06:50,580
introduces complexity that any change

187
00:06:50,580 --> 00:06:52,319
you make at the lower layer need to then

188
00:06:52,319 --> 00:06:53,880
propagate to the other layer as well

189
00:06:53,880 --> 00:06:56,759
because they both are tied to each other

190
00:06:56,759 --> 00:06:59,639
right so these three in my viewpoint is

191
00:06:59,639 --> 00:07:01,620
what makes kubernetes difficult our

192
00:07:01,620 --> 00:07:04,139
security difficult in kubernetes

193
00:07:04,139 --> 00:07:05,819
and also if you talk to I've talked to

194
00:07:05,819 --> 00:07:08,460
many customers if you read these white

195
00:07:08,460 --> 00:07:10,919
papers and things like that right

196
00:07:10,919 --> 00:07:12,660
um down in the reads like what are the

197
00:07:12,660 --> 00:07:14,280
top concerns that security people have

198
00:07:14,280 --> 00:07:18,539
so one is am I able to Define consistent

199
00:07:18,539 --> 00:07:21,300
policies across my teams right second is

200
00:07:21,300 --> 00:07:23,639
once I've defined that am I then able to

201
00:07:23,639 --> 00:07:25,620
apply these policies across my many

202
00:07:25,620 --> 00:07:27,900
clusters as well as many Cloud providers

203
00:07:27,900 --> 00:07:29,940
right every customer I talk to usually

204
00:07:29,940 --> 00:07:32,580
there's a public cloud provider plus

205
00:07:32,580 --> 00:07:33,900
there is something on-prem that's going

206
00:07:33,900 --> 00:07:35,039
on right and you want to be able to

207
00:07:35,039 --> 00:07:36,479
apply the same policy consistently

208
00:07:36,479 --> 00:07:37,440
across

209
00:07:37,440 --> 00:07:39,419
and the third thing is how do I get my

210
00:07:39,419 --> 00:07:42,180
developers to honor the same policies on

211
00:07:42,180 --> 00:07:44,940
the very left on their laptops because

212
00:07:44,940 --> 00:07:48,199
that's where everything starts

213
00:07:49,620 --> 00:07:52,380
so this is my sort of recommendation if

214
00:07:52,380 --> 00:07:54,479
you're new to security and kubernetes I

215
00:07:54,479 --> 00:07:56,699
would say look at these things first so

216
00:07:56,699 --> 00:07:58,860
on the very left is kubernetes

217
00:07:58,860 --> 00:08:01,080
misconfigurations so you want to be able

218
00:08:01,080 --> 00:08:02,699
to create a single policy framework for

219
00:08:02,699 --> 00:08:04,680
governance and access control so this is

220
00:08:04,680 --> 00:08:05,940
when we talk this is how we talk about

221
00:08:05,940 --> 00:08:07,979
policy as code right you want to be able

222
00:08:07,979 --> 00:08:10,139
to say hey here are my set of policies

223
00:08:10,139 --> 00:08:12,960
and Associated benchmarks and I need to

224
00:08:12,960 --> 00:08:14,400
apply this again consistently

225
00:08:14,400 --> 00:08:16,319
consistently throughout that life cycle

226
00:08:16,319 --> 00:08:18,960
the development life cycle examples

227
00:08:18,960 --> 00:08:21,780
could include for um you might have a

228
00:08:21,780 --> 00:08:23,520
policy that says

229
00:08:23,520 --> 00:08:25,740
that you're you're not allowed to run

230
00:08:25,740 --> 00:08:27,060
any root container in your cluster

231
00:08:27,060 --> 00:08:28,680
that's an example or you might have a

232
00:08:28,680 --> 00:08:30,660
policy that says your kubernetes API

233
00:08:30,660 --> 00:08:32,580
server cannot be publicly accessible

234
00:08:32,580 --> 00:08:34,799
right and these are all what we call

235
00:08:34,799 --> 00:08:36,719
configurations and a violation of such a

236
00:08:36,719 --> 00:08:37,860
policy would be considered a

237
00:08:37,860 --> 00:08:40,380
misconfiguration

238
00:08:40,380 --> 00:08:42,299
moving a little bit to the right then

239
00:08:42,299 --> 00:08:43,440
you want to again apply the same

240
00:08:43,440 --> 00:08:45,540
policies and your cicd lifecycle right

241
00:08:45,540 --> 00:08:47,100
and that's when let's say you have

242
00:08:47,100 --> 00:08:49,260
infrastructure as code whenever a new

243
00:08:49,260 --> 00:08:51,779
commit comes in a new PR is open you

244
00:08:51,779 --> 00:08:53,100
again want to test against the same

245
00:08:53,100 --> 00:08:55,920
policies and disallow that PR if policy

246
00:08:55,920 --> 00:08:57,660
is violated

247
00:08:57,660 --> 00:08:59,880
but that's the misconfiguration side of

248
00:08:59,880 --> 00:09:01,620
things right then you want to be able to

249
00:09:01,620 --> 00:09:03,300
check for vulnerabilities and images as

250
00:09:03,300 --> 00:09:04,440
well

251
00:09:04,440 --> 00:09:07,200
um I've worked with an open source

252
00:09:07,200 --> 00:09:10,680
project called it was called PIRA they

253
00:09:10,680 --> 00:09:13,260
were based out of Spain Barcelona it's a

254
00:09:13,260 --> 00:09:15,839
great team to work with and I remember

255
00:09:15,839 --> 00:09:18,240
us for running you know whatever comes

256
00:09:18,240 --> 00:09:20,640
default with Docker that the

257
00:09:20,640 --> 00:09:23,880
vulnerability scanner and then as long

258
00:09:23,880 --> 00:09:26,100
as everything looked medium-ish it was

259
00:09:26,100 --> 00:09:27,779
fine right so that's the developer cake

260
00:09:27,779 --> 00:09:29,339
on it and that's why policies are

261
00:09:29,339 --> 00:09:31,980
important to enforce to avoid that kind

262
00:09:31,980 --> 00:09:36,180
of behavior enforce strict policies so

263
00:09:36,180 --> 00:09:39,240
again very important to scan your images

264
00:09:39,240 --> 00:09:41,880
before they get into your runtime

265
00:09:41,880 --> 00:09:44,459
obviously because you know one CBE and

266
00:09:44,459 --> 00:09:46,080
one vulnerability is propagated multiple

267
00:09:46,080 --> 00:09:48,420
times in your production on your runtime

268
00:09:48,420 --> 00:09:49,560
environment

269
00:09:49,560 --> 00:09:51,000
and finally once you have all of these

270
00:09:51,000 --> 00:09:53,040
three pieces in place then it's really

271
00:09:53,040 --> 00:09:54,540
important to look at sort of the whole

272
00:09:54,540 --> 00:09:56,580
picture together you want to look at

273
00:09:56,580 --> 00:10:00,600
your how you apply your exclusions I

274
00:10:00,600 --> 00:10:03,500
can't say that word how you remediate

275
00:10:03,500 --> 00:10:06,360
putting it automated processes to be

276
00:10:06,360 --> 00:10:08,399
able to do that right that's sort of the

277
00:10:08,399 --> 00:10:10,760
last step

278
00:10:12,720 --> 00:10:14,519
okay I think I'm going really fast which

279
00:10:14,519 --> 00:10:17,640
is good I usually am slow

280
00:10:17,640 --> 00:10:20,580
um okay so just strictly looking at your

281
00:10:20,580 --> 00:10:22,920
cicd pipelines and security guard guard

282
00:10:22,920 --> 00:10:25,740
rails in that in that context

283
00:10:25,740 --> 00:10:28,800
uh policies code is again a perfect way

284
00:10:28,800 --> 00:10:30,019
to do it

285
00:10:30,019 --> 00:10:32,519
policy is code so if you know

286
00:10:32,519 --> 00:10:34,500
infrastructure as code the benefits that

287
00:10:34,500 --> 00:10:36,180
that brought to the infrastructure layer

288
00:10:36,180 --> 00:10:39,779
in terms of uh repeatability reducing

289
00:10:39,779 --> 00:10:42,600
human errors the same thing is is

290
00:10:42,600 --> 00:10:44,339
brought by policies code through your

291
00:10:44,339 --> 00:10:47,160
regular policy files into your

292
00:10:47,160 --> 00:10:49,579
um into your policies right

293
00:10:49,579 --> 00:10:53,579
the the main power of policy is code

294
00:10:53,579 --> 00:10:55,200
I've listed three years so the first is

295
00:10:55,200 --> 00:10:57,420
low friction right because it's policy

296
00:10:57,420 --> 00:10:58,860
as code it can work with existing

297
00:10:58,860 --> 00:11:00,779
development environments tools and

298
00:11:00,779 --> 00:11:03,120
Frameworks right so if you're using your

299
00:11:03,120 --> 00:11:06,000
uh um Jenkins or Travis or GitHub

300
00:11:06,000 --> 00:11:07,380
actions or whatever you're using in your

301
00:11:07,380 --> 00:11:10,519
pipeline you can very easily embed

302
00:11:10,519 --> 00:11:14,220
a tool that'll check for violations in

303
00:11:14,220 --> 00:11:15,120
there

304
00:11:15,120 --> 00:11:17,220
the second one is more secure by default

305
00:11:17,220 --> 00:11:19,380
since you are

306
00:11:19,380 --> 00:11:21,839
writing these policies even before you

307
00:11:21,839 --> 00:11:24,120
actually initialize your infrastructure

308
00:11:24,120 --> 00:11:26,640
you bring that up you're by default more

309
00:11:26,640 --> 00:11:28,260
secure because you're checking for all

310
00:11:28,260 --> 00:11:29,579
of that even before your infrastructure

311
00:11:29,579 --> 00:11:31,980
comes up and then finally increase

312
00:11:31,980 --> 00:11:33,959
security visibility because its policy

313
00:11:33,959 --> 00:11:36,120
is code you check the policy files back

314
00:11:36,120 --> 00:11:37,380
into your social

315
00:11:37,380 --> 00:11:38,540
um

316
00:11:38,540 --> 00:11:40,459
sem

317
00:11:40,459 --> 00:11:43,320
and so that way your availability

318
00:11:43,320 --> 00:11:45,060
availability around what the different

319
00:11:45,060 --> 00:11:46,680
teams are doing and you can monitor it

320
00:11:46,680 --> 00:11:47,399
there

321
00:11:47,399 --> 00:11:49,560
right so very important so if there's

322
00:11:49,560 --> 00:11:51,079
one thing that I keep repeating here

323
00:11:51,079 --> 00:11:53,820
that you should go away with is

324
00:11:53,820 --> 00:11:55,800
policy check it doesn't just apply it

325
00:11:55,800 --> 00:11:57,360
one place you need to apply the same

326
00:11:57,360 --> 00:11:59,220
policies consistently across that life

327
00:11:59,220 --> 00:12:02,459
cycle all the way from the very left on

328
00:12:02,459 --> 00:12:05,339
your developer machine to your CI

329
00:12:05,339 --> 00:12:08,160
pipelines to your CD pipelines and then

330
00:12:08,160 --> 00:12:10,440
apply the same plus additional policies

331
00:12:10,440 --> 00:12:13,260
on your runtime containers right so once

332
00:12:13,260 --> 00:12:14,940
they are they have left sort of your

333
00:12:14,940 --> 00:12:16,800
world and gone into your production

334
00:12:16,800 --> 00:12:19,279
environment

335
00:12:21,240 --> 00:12:22,800
okay so this is what this is where

336
00:12:22,800 --> 00:12:24,600
Terror scan comes in it's an open source

337
00:12:24,600 --> 00:12:27,120
Solution by tenable you can see it's

338
00:12:27,120 --> 00:12:29,820
available on GitHub

339
00:12:29,820 --> 00:12:32,579
a lot of driven by Community a lot of

340
00:12:32,579 --> 00:12:34,380
interest as you can see here by your

341
00:12:34,380 --> 00:12:35,880
forks and stars and I know that's not

342
00:12:35,880 --> 00:12:37,920
the only way to measure that but you

343
00:12:37,920 --> 00:12:40,740
know it's one way it comes with 500 plus

344
00:12:40,740 --> 00:12:43,560
policies out of the box it supports ISC

345
00:12:43,560 --> 00:12:47,100
engines like kubernetes or sorry I see

346
00:12:47,100 --> 00:12:49,920
engines like terraform Helm charts

347
00:12:49,920 --> 00:12:51,899
customized Docker files so you can scan

348
00:12:51,899 --> 00:12:55,079
all of those plus it also has Benchmark

349
00:12:55,079 --> 00:12:58,139
support specifically CIS

350
00:12:58,139 --> 00:13:01,079
it leverages the open policy engine if

351
00:13:01,079 --> 00:13:02,220
you want to create your own custom

352
00:13:02,220 --> 00:13:04,500
policies or

353
00:13:04,500 --> 00:13:08,940
expand on the existing built-in policies

354
00:13:08,940 --> 00:13:10,440
and I'll show you this that in action

355
00:13:10,440 --> 00:13:13,500
and also tell you a way you can go look

356
00:13:13,500 --> 00:13:15,360
at it or we've built a tool where you

357
00:13:15,360 --> 00:13:16,800
can test it without actually downloading

358
00:13:16,800 --> 00:13:20,120
it and doing it on your terminal

359
00:13:21,120 --> 00:13:23,220
all right so get Ops like how many folks

360
00:13:23,220 --> 00:13:25,160
here actually practice github's

361
00:13:25,160 --> 00:13:28,380
Frameworks and okay very cool all right

362
00:13:28,380 --> 00:13:30,600
so this is a more of a simplified

363
00:13:30,600 --> 00:13:32,940
version of what a github's workflow

364
00:13:32,940 --> 00:13:33,959
might look like

365
00:13:33,959 --> 00:13:36,000
so you have your engineer on the left

366
00:13:36,000 --> 00:13:38,220
pushing some code to your sem maybe

367
00:13:38,220 --> 00:13:39,740
that's GitHub

368
00:13:39,740 --> 00:13:42,779
once that code gets pushed

369
00:13:42,779 --> 00:13:43,860
um

370
00:13:43,860 --> 00:13:46,500
a good practice might be to run a GitHub

371
00:13:46,500 --> 00:13:49,079
action or a gitlab runner whatever to

372
00:13:49,079 --> 00:13:51,180
then build an image you want to run all

373
00:13:51,180 --> 00:13:53,100
of your unit tests and then if

374
00:13:53,100 --> 00:13:54,839
everything goes well you get all greens

375
00:13:54,839 --> 00:13:58,260
you want to then push that image into an

376
00:13:58,260 --> 00:14:01,920
image repository public private right

377
00:14:01,920 --> 00:14:06,660
um then at the same time you trigger an

378
00:14:06,660 --> 00:14:08,700
agent like Argo CD which is looking at

379
00:14:08,700 --> 00:14:10,860
your repository to start your git Ops

380
00:14:10,860 --> 00:14:12,000
process

381
00:14:12,000 --> 00:14:14,100
right so you've got a quote-unquote good

382
00:14:14,100 --> 00:14:16,380
image sitting in your image repository

383
00:14:16,380 --> 00:14:18,360
Argo CD say oh there's there's a new

384
00:14:18,360 --> 00:14:21,360
image I need to deploy it then tells uh

385
00:14:21,360 --> 00:14:23,459
it's got that information and it tells

386
00:14:23,459 --> 00:14:25,680
your runtime so in this case maybe it's

387
00:14:25,680 --> 00:14:29,160
kubernetes uh hey go get that image do

388
00:14:29,160 --> 00:14:31,200
your thing and this might be a simple

389
00:14:31,200 --> 00:14:33,420
you know Cube cuddle set image kind of

390
00:14:33,420 --> 00:14:36,000
command kubernetes then goes pulls that

391
00:14:36,000 --> 00:14:38,459
image and it rolls it out you know it

392
00:14:38,459 --> 00:14:41,839
takes care of all of that for you

393
00:14:42,180 --> 00:14:45,000
so what I'm suggesting and recommending

394
00:14:45,000 --> 00:14:48,000
here with adding your security policies

395
00:14:48,000 --> 00:14:50,540
at different levels in this life cycle

396
00:14:50,540 --> 00:14:54,180
is first you put in your chair scan

397
00:14:54,180 --> 00:14:56,519
checks and policy checks right on the

398
00:14:56,519 --> 00:14:59,160
developer's machine right one way to do

399
00:14:59,160 --> 00:15:01,980
that is using pre-commit hooks or git

400
00:15:01,980 --> 00:15:04,920
Hooks and so this is an example from the

401
00:15:04,920 --> 00:15:08,880
terror scan site I have to say some so I

402
00:15:08,880 --> 00:15:11,760
have not tried this this exact code but

403
00:15:11,760 --> 00:15:14,940
again it should get my point across that

404
00:15:14,940 --> 00:15:17,459
you have a terraform pre-commit hook

405
00:15:17,459 --> 00:15:20,699
which runs before every time a developer

406
00:15:20,699 --> 00:15:24,060
does a git commit and it runs the it

407
00:15:24,060 --> 00:15:25,980
runs a certain set of policies that you

408
00:15:25,980 --> 00:15:28,139
have created or using the pre-built

409
00:15:28,139 --> 00:15:29,760
policies against the in this case it's

410
00:15:29,760 --> 00:15:31,260
the IAC files

411
00:15:31,260 --> 00:15:33,180
you can see down here it says your

412
00:15:33,180 --> 00:15:35,940
container is missing liveliness probe

413
00:15:35,940 --> 00:15:38,160
and also some of the resources in terms

414
00:15:38,160 --> 00:15:41,040
of memory uh it's not set

415
00:15:41,040 --> 00:15:42,959
right

416
00:15:42,959 --> 00:15:45,720
so that's number one right on the left

417
00:15:45,720 --> 00:15:47,459
right on the left

418
00:15:47,459 --> 00:15:50,880
uh the second one is on the CI side so

419
00:15:50,880 --> 00:15:52,680
in your continuous integration after

420
00:15:52,680 --> 00:15:54,120
you've done your linting you've done

421
00:15:54,120 --> 00:15:55,800
your unit tests and whatnot then you put

422
00:15:55,800 --> 00:15:58,620
in checks and balances there and this

423
00:15:58,620 --> 00:16:00,420
could again would differ based on what

424
00:16:00,420 --> 00:16:03,480
your what your code looks like for IAC

425
00:16:03,480 --> 00:16:05,160
would be a different set of policies for

426
00:16:05,160 --> 00:16:06,959
vulnerabilities would be a different set

427
00:16:06,959 --> 00:16:09,660
a way to do that

428
00:16:09,660 --> 00:16:12,959
I've shown here is with GitHub actions

429
00:16:12,959 --> 00:16:15,019
so there's a teraskan job

430
00:16:15,019 --> 00:16:18,720
uh yes okay wait

431
00:16:18,720 --> 00:16:20,699
yeah this is correct so there's a terror

432
00:16:20,699 --> 00:16:22,800
scan job action which takes in certain

433
00:16:22,800 --> 00:16:24,779
parameters so your repository what kind

434
00:16:24,779 --> 00:16:28,380
of ISE you're checking against and it'll

435
00:16:28,380 --> 00:16:30,300
check out the code and run that and only

436
00:16:30,300 --> 00:16:33,779
pass the build if uh and you can set

437
00:16:33,779 --> 00:16:35,160
that in the configuration too because

438
00:16:35,160 --> 00:16:37,139
that might depend on your team right so

439
00:16:37,139 --> 00:16:39,120
you may want to be you may be okay with

440
00:16:39,120 --> 00:16:41,399
a certain number of threshold in terms

441
00:16:41,399 --> 00:16:43,620
of low medium high and critical

442
00:16:43,620 --> 00:16:46,100
vulnerabilities

443
00:16:46,980 --> 00:16:50,759
Okay the third thing uh is to introduce

444
00:16:50,759 --> 00:16:52,560
the same set of policies are extend

445
00:16:52,560 --> 00:16:56,100
those policies in your CD pipeline so

446
00:16:56,100 --> 00:16:58,860
this is where Argo CD comes in and syncs

447
00:16:58,860 --> 00:17:01,320
with your GitHub repository you put in

448
00:17:01,320 --> 00:17:05,099
what is called a Argo CD web hook but

449
00:17:05,099 --> 00:17:07,679
it's a pre-think type of Epic so every

450
00:17:07,679 --> 00:17:10,020
time before a thing happens it'll check

451
00:17:10,020 --> 00:17:12,119
out the code of course you pass it the

452
00:17:12,119 --> 00:17:15,299
right secrets in terms of your repo

453
00:17:15,299 --> 00:17:17,400
access private repo access and you can

454
00:17:17,400 --> 00:17:18,720
see at the end here there's a command

455
00:17:18,720 --> 00:17:21,380
that runs the terror scan

456
00:17:21,380 --> 00:17:26,339
that runs Terror scan binary

457
00:17:26,760 --> 00:17:29,220
on your in this case the type of

458
00:17:29,220 --> 00:17:30,720
infrastructure we're setting is

459
00:17:30,720 --> 00:17:32,400
kubernetes so it might be terraform

460
00:17:32,400 --> 00:17:34,860
files that it's running against or sorry

461
00:17:34,860 --> 00:17:36,600
um might be Helm charts or customized

462
00:17:36,600 --> 00:17:38,160
files

463
00:17:38,160 --> 00:17:39,720
so that's number three

464
00:17:39,720 --> 00:17:41,220
and

465
00:17:41,220 --> 00:17:43,860
I have a this is the demo that I was

466
00:17:43,860 --> 00:17:45,179
hoping would work

467
00:17:45,179 --> 00:17:49,039
if not I do have a video here

468
00:17:49,620 --> 00:17:51,240
let's see

469
00:17:51,240 --> 00:17:53,220
I'm gonna uh

470
00:17:53,220 --> 00:17:56,840
try it one more time

471
00:18:05,340 --> 00:18:08,100
so

472
00:18:08,100 --> 00:18:10,039
let me see

473
00:18:10,039 --> 00:18:13,460
the tunnel

474
00:18:29,100 --> 00:18:31,320
and this is where I was having problems

475
00:18:31,320 --> 00:18:33,860
earlier

476
00:18:34,740 --> 00:18:37,700
uh

477
00:18:38,280 --> 00:18:41,460
all right let me go I'm gonna cheat a

478
00:18:41,460 --> 00:18:44,039
little and go and try and grab the

479
00:18:44,039 --> 00:18:45,480
secret

480
00:18:45,480 --> 00:18:48,059
that has my uh

481
00:18:48,059 --> 00:18:50,539
password

482
00:18:55,500 --> 00:18:57,780
if that works

483
00:18:57,780 --> 00:19:00,539
okay so I'm in my Argo CD app now

484
00:19:00,539 --> 00:19:04,700
and let's create

485
00:19:04,740 --> 00:19:06,660
I've got two applications here I can

486
00:19:06,660 --> 00:19:07,620
actually show this to you even if the

487
00:19:07,620 --> 00:19:09,299
demo doesn't work

488
00:19:09,299 --> 00:19:11,640
um this will be good to see so I've got

489
00:19:11,640 --> 00:19:13,919
my this is by the way this is public uh

490
00:19:13,919 --> 00:19:15,419
forked it from my colleague you can go

491
00:19:15,419 --> 00:19:17,880
to his or come in here

492
00:19:17,880 --> 00:19:21,059
um and that sets up Argo CD and mini

493
00:19:21,059 --> 00:19:24,919
Cube it sets up the Terra scan job

494
00:19:24,919 --> 00:19:27,360
connects it to the admission controller

495
00:19:27,360 --> 00:19:29,940
so every time and it creates that think

496
00:19:29,940 --> 00:19:32,160
the precinct webhook with Argo CD so

497
00:19:32,160 --> 00:19:33,900
every time you come in and it starts to

498
00:19:33,900 --> 00:19:36,299
sync it'll create a new job with Terror

499
00:19:36,299 --> 00:19:39,299
scan and do the do the scan that's

500
00:19:39,299 --> 00:19:41,400
what's going on here the deployment file

501
00:19:41,400 --> 00:19:43,020
is what I was looking at before so this

502
00:19:43,020 --> 00:19:45,419
does all of that

503
00:19:45,419 --> 00:19:47,580
um and

504
00:19:47,580 --> 00:19:49,200
the demo would show you two different

505
00:19:49,200 --> 00:19:52,020
apps so there's a test app good

506
00:19:52,020 --> 00:19:54,179
and to be really Frank with you

507
00:19:54,179 --> 00:19:56,700
this app is actually not no I want to

508
00:19:56,700 --> 00:19:59,220
show you the bad app first

509
00:19:59,220 --> 00:20:01,500
so if I go to test app pad and open the

510
00:20:01,500 --> 00:20:04,580
the deployment file

511
00:20:04,799 --> 00:20:05,940
I was going to say to be really Frank

512
00:20:05,940 --> 00:20:08,220
with you this does not look that bad to

513
00:20:08,220 --> 00:20:10,200
me right so this is probably what I

514
00:20:10,200 --> 00:20:11,400
would do when I was starting with

515
00:20:11,400 --> 00:20:13,919
kubernetes I've got my liveliness Pro my

516
00:20:13,919 --> 00:20:15,720
Readiness Pro those are two things that

517
00:20:15,720 --> 00:20:17,700
people always add

518
00:20:17,700 --> 00:20:18,660
um

519
00:20:18,660 --> 00:20:20,640
what else I've got some labels which is

520
00:20:20,640 --> 00:20:22,320
always nice and I've got my I'm not hard

521
00:20:22,320 --> 00:20:23,700
coding anything I've got my environment

522
00:20:23,700 --> 00:20:25,799
variable set up right so this is a

523
00:20:25,799 --> 00:20:29,940
pretty decent looking app but if I let's

524
00:20:29,940 --> 00:20:31,559
see if I can get this to work if not

525
00:20:31,559 --> 00:20:33,900
again we'll go back to the video

526
00:20:33,900 --> 00:20:35,340
so I'm going to say hey create a new

527
00:20:35,340 --> 00:20:37,820
application

528
00:20:38,220 --> 00:20:39,780
um let me see if I have the namespace

529
00:20:39,780 --> 00:20:42,139
created

530
00:20:44,760 --> 00:20:47,460
so this should be an app nope okay so

531
00:20:47,460 --> 00:20:50,700
let me go to repo and then I'm going to

532
00:20:50,700 --> 00:20:53,100
cube cuddle apply

533
00:20:53,100 --> 00:20:55,620
Apple

534
00:20:55,620 --> 00:20:57,780
all right so now

535
00:20:57,780 --> 00:21:00,720
Cube CTO get namespace so I've got this

536
00:21:00,720 --> 00:21:02,940
app name space created here

537
00:21:02,940 --> 00:21:06,780
okay so in this one test good app I'm

538
00:21:06,780 --> 00:21:09,360
going to pick this as my project

539
00:21:09,360 --> 00:21:11,460
manual think is okay I'm going to leave

540
00:21:11,460 --> 00:21:14,100
the rest as defaults then if I go into

541
00:21:14,100 --> 00:21:18,539
my repository let me grab that URL

542
00:21:18,539 --> 00:21:20,280
let's happy with that and then it needs

543
00:21:20,280 --> 00:21:23,400
a path for my bad app which I'll get

544
00:21:23,400 --> 00:21:25,820
from here

545
00:21:30,240 --> 00:21:32,640
all right so I've got my app done here

546
00:21:32,640 --> 00:21:36,080
let me create this

547
00:21:37,980 --> 00:21:39,720
oh I'm missing this so yeah I want to

548
00:21:39,720 --> 00:21:41,340
deploy my existing cluster with the

549
00:21:41,340 --> 00:21:42,780
namespace of app

550
00:21:42,780 --> 00:21:44,460
and again like in real world you'll

551
00:21:44,460 --> 00:21:46,260
probably do this through yaml files and

552
00:21:46,260 --> 00:21:48,960
not using the UI but let's just demo

553
00:21:48,960 --> 00:21:52,500
uh let's see so I've got

554
00:21:52,500 --> 00:21:54,780
let me zoom in a little bit

555
00:21:54,780 --> 00:22:00,139
and let's do a sync and synchronize

556
00:22:00,480 --> 00:22:02,580
so ideally if this demo worked this

557
00:22:02,580 --> 00:22:06,600
would go in and this is the

558
00:22:06,600 --> 00:22:08,580
oh geez okay I named the app go to Apple

559
00:22:08,580 --> 00:22:10,320
is the bad app

560
00:22:10,320 --> 00:22:13,820
Not to cause any confusion here

561
00:22:14,640 --> 00:22:16,860
um okay so it's doing its thing it's

562
00:22:16,860 --> 00:22:19,280
thinking

563
00:22:31,260 --> 00:22:33,299
okay let me let me move over I'm going

564
00:22:33,299 --> 00:22:34,440
to show you the video which does the

565
00:22:34,440 --> 00:22:36,900
same thing that I just did but it'll

566
00:22:36,900 --> 00:22:39,740
show you so

567
00:22:39,900 --> 00:22:42,240
it's a little bit blurry but the

568
00:22:42,240 --> 00:22:43,559
important part is coming next so again

569
00:22:43,559 --> 00:22:46,799
this is my bad app I'm doing the thing

570
00:22:46,799 --> 00:22:50,000
here that I was just trying to show you

571
00:22:50,640 --> 00:22:52,740
and you'll see two jobs come up on the

572
00:22:52,740 --> 00:22:54,720
side as pods and then I'll click into

573
00:22:54,720 --> 00:22:56,159
and you can see me on the top right so

574
00:22:56,159 --> 00:22:57,659
this is a real demo right there which is

575
00:22:57,659 --> 00:22:59,840
working

576
00:23:00,240 --> 00:23:01,679
all right so I'm trying to get into the

577
00:23:01,679 --> 00:23:04,020
Pod to see the logs and you can see here

578
00:23:04,020 --> 00:23:05,640
this is the output that comes out of

579
00:23:05,640 --> 00:23:07,380
terrascape right so this is doing the

580
00:23:07,380 --> 00:23:09,360
scanning and looking at policy

581
00:23:09,360 --> 00:23:12,720
violations and outputting the severity

582
00:23:12,720 --> 00:23:16,440
I've I have uh configured My Demo to

583
00:23:16,440 --> 00:23:18,360
only fail if it finds High severity if

584
00:23:18,360 --> 00:23:19,919
it finds the mediums are low it won't

585
00:23:19,919 --> 00:23:21,780
fail so again moving a little bit

586
00:23:21,780 --> 00:23:24,320
forward here

587
00:23:24,419 --> 00:23:26,520
I just want to show you this guy at the

588
00:23:26,520 --> 00:23:28,620
bottom here

589
00:23:28,620 --> 00:23:30,120
so it's kind of hard to see but I can

590
00:23:30,120 --> 00:23:32,460
see there's low two medium 11 High one

591
00:23:32,460 --> 00:23:34,440
right and because there's a high

592
00:23:34,440 --> 00:23:36,059
severity it's found at high severity

593
00:23:36,059 --> 00:23:39,000
right before sinking and pushing a bad

594
00:23:39,000 --> 00:23:41,159
vulnerability to production it doesn't

595
00:23:41,159 --> 00:23:43,559
do that thing and it stops right and

596
00:23:43,559 --> 00:23:45,179
that's that sort of broken heart that

597
00:23:45,179 --> 00:23:46,559
you saw up top so the thing didn't

598
00:23:46,559 --> 00:23:49,080
happen my cluster is still secure

599
00:23:49,080 --> 00:23:51,179
and then moving to the other side let me

600
00:23:51,179 --> 00:23:52,980
show you what the good app looks like so

601
00:23:52,980 --> 00:23:55,020
if I go back to GitHub

602
00:23:55,020 --> 00:23:58,620
let's go back one back one good app

603
00:23:58,620 --> 00:24:00,000
so you can see I've done a couple of

604
00:24:00,000 --> 00:24:01,559
things differently here

605
00:24:01,559 --> 00:24:03,960
so I've still got my liveliness probe

606
00:24:03,960 --> 00:24:06,000
and Readiness probe but now I've added

607
00:24:06,000 --> 00:24:08,280
the security context that says do not

608
00:24:08,280 --> 00:24:10,380
allow to run as rude run only as a

609
00:24:10,380 --> 00:24:12,960
specific user as a specific group and by

610
00:24:12,960 --> 00:24:15,240
the way down here I've also stepped some

611
00:24:15,240 --> 00:24:16,679
restrictions on the file system so

612
00:24:16,679 --> 00:24:18,840
read-only file system Etc right so this

613
00:24:18,840 --> 00:24:20,700
is configuration that my policies are

614
00:24:20,700 --> 00:24:21,900
checking against

615
00:24:21,900 --> 00:24:23,880
so in this case let's go back to the

616
00:24:23,880 --> 00:24:25,020
video again

617
00:24:25,020 --> 00:24:27,419
so now when I

618
00:24:27,419 --> 00:24:30,780
run the theme Argo CD sync operation

619
00:24:30,780 --> 00:24:33,720
on the good app here

620
00:24:33,720 --> 00:24:36,000
so sync sync manually

621
00:24:36,000 --> 00:24:38,039
and it'll bring up the same pods again

622
00:24:38,039 --> 00:24:40,200
so it's been bringing up the pre-hook or

623
00:24:40,200 --> 00:24:44,340
pre-sync hook jaws and it usually takes

624
00:24:44,340 --> 00:24:46,020
a couple of minutes for the logs to come

625
00:24:46,020 --> 00:24:48,139
back

626
00:24:50,400 --> 00:24:53,280
all right so you can see on top the

627
00:24:53,280 --> 00:24:54,659
there's a green heart instead of the red

628
00:24:54,659 --> 00:24:56,700
one so it's uh it's letting things

629
00:24:56,700 --> 00:24:58,679
through and if you look down here now

630
00:24:58,679 --> 00:25:00,299
I've got a high of zero medium of five

631
00:25:00,299 --> 00:25:02,460
so that's still the vulnerabilities but

632
00:25:02,460 --> 00:25:04,740
I've met my threshold to pass this and

633
00:25:04,740 --> 00:25:06,059
let this go into the production

634
00:25:06,059 --> 00:25:08,480
environment

635
00:25:10,559 --> 00:25:13,740
okay so just last couple things here so

636
00:25:13,740 --> 00:25:15,299
um again you can go here and download

637
00:25:15,299 --> 00:25:16,799
this and get it working locally on your

638
00:25:16,799 --> 00:25:18,600
mini Cube just to try it out see how

639
00:25:18,600 --> 00:25:21,299
things work you can also

640
00:25:21,299 --> 00:25:25,639
uh if I were to open a new this one

641
00:25:26,100 --> 00:25:28,080
um

642
00:25:28,080 --> 00:25:30,539
just want to show you real quick

643
00:25:30,539 --> 00:25:33,740
nope not this

644
00:25:35,340 --> 00:25:39,240
all right so I've got one folder here

645
00:25:39,240 --> 00:25:40,860
um

646
00:25:40,860 --> 00:25:45,120
if I look at app so again this is a

647
00:25:45,120 --> 00:25:47,220
simple deployment right that's something

648
00:25:47,220 --> 00:25:48,860
you might do

649
00:25:48,860 --> 00:25:52,440
nginx also looks very similar

650
00:25:52,440 --> 00:25:55,980
right here I've got a couple of replicas

651
00:25:55,980 --> 00:25:57,900
um what image it should come from and

652
00:25:57,900 --> 00:25:58,860
this one I don't even have the

653
00:25:58,860 --> 00:26:00,900
liveliness and Readiness probes here so

654
00:26:00,900 --> 00:26:03,419
this is really bad app but I can say

655
00:26:03,419 --> 00:26:06,480
Terror scan scan let me show you the

656
00:26:06,480 --> 00:26:08,820
help real quick so you can tell it other

657
00:26:08,820 --> 00:26:11,100
things too right so what kind of icy

658
00:26:11,100 --> 00:26:13,260
things you're trying to go at what kind

659
00:26:13,260 --> 00:26:15,120
of if you have custom policies you can

660
00:26:15,120 --> 00:26:16,440
tell it where they're coming from Etc

661
00:26:16,440 --> 00:26:18,360
you also have skip rules because that

662
00:26:18,360 --> 00:26:19,440
might be important that's where the

663
00:26:19,440 --> 00:26:21,840
exclusion policy is coming our workflow

664
00:26:21,840 --> 00:26:23,580
comes in but for us we're just going to

665
00:26:23,580 --> 00:26:25,559
leave everything the same and just say

666
00:26:25,559 --> 00:26:26,880
scan

667
00:26:26,880 --> 00:26:29,159
and you'll see it comes back with it's

668
00:26:29,159 --> 00:26:32,580
found some IEC code and your you know

669
00:26:32,580 --> 00:26:34,260
the stuff you're missing so it's missing

670
00:26:34,260 --> 00:26:37,559
some resource level uh limits

671
00:26:37,559 --> 00:26:39,539
um somewhere in here it'll also so this

672
00:26:39,539 --> 00:26:41,700
is admission of root containers is what

673
00:26:41,700 --> 00:26:44,039
we saw in the other one it's missing the

674
00:26:44,039 --> 00:26:45,860
read-only permission on the file system

675
00:26:45,860 --> 00:26:50,340
CPU limits are not set etc etc etc right

676
00:26:50,340 --> 00:26:52,500
it's got It's got a couple of high ones

677
00:26:52,500 --> 00:26:53,880
as well which is the root privilege

678
00:26:53,880 --> 00:26:56,880
policy

679
00:26:57,419 --> 00:26:58,980
so

680
00:26:58,980 --> 00:27:02,539
let's go back to this

681
00:27:06,240 --> 00:27:08,100
all right and the last place where you

682
00:27:08,100 --> 00:27:10,700
should also put in your hair scan

683
00:27:10,700 --> 00:27:13,080
policy evaluation and checks is on your

684
00:27:13,080 --> 00:27:16,140
runtime so you've done it at the

685
00:27:16,140 --> 00:27:17,340
developer on the developer machine

686
00:27:17,340 --> 00:27:19,080
you've done a CI pipeline you've done it

687
00:27:19,080 --> 00:27:21,539
in your CD pipeline but once you're once

688
00:27:21,539 --> 00:27:23,760
your image has made it to the your

689
00:27:23,760 --> 00:27:29,000
cluster then tearscan integrates with

690
00:27:29,000 --> 00:27:31,140
admission controllers so you can write

691
00:27:31,140 --> 00:27:33,480
you can write a hook there which says

692
00:27:33,480 --> 00:27:36,299
Hey at this point you know what image

693
00:27:36,299 --> 00:27:37,919
you're trying to grab so go test that

694
00:27:37,919 --> 00:27:39,179
image and see what vulnerabilities are

695
00:27:39,179 --> 00:27:41,100
in there before you let this thing

696
00:27:41,100 --> 00:27:43,020
become a resource in your cluster right

697
00:27:43,020 --> 00:27:44,279
that's the last place where you can

698
00:27:44,279 --> 00:27:48,000
check for the same plus more policies

699
00:27:48,000 --> 00:27:51,659
so lastly this um this is our security

700
00:27:51,659 --> 00:27:54,299
maturity model you can see everything we

701
00:27:54,299 --> 00:27:56,580
talked about today falls in the first

702
00:27:56,580 --> 00:27:58,860
step of the ladder policy as code right

703
00:27:58,860 --> 00:28:01,080
when the um so automated automated

704
00:28:01,080 --> 00:28:03,900
continuous assessment with your policies

705
00:28:03,900 --> 00:28:06,059
custom policies and also benchmarks that

706
00:28:06,059 --> 00:28:08,039
policies associated with because at the

707
00:28:08,039 --> 00:28:09,299
end of the day then at the end of the

708
00:28:09,299 --> 00:28:11,400
day you want to see which team switch or

709
00:28:11,400 --> 00:28:13,080
the compliance level at a cluster level

710
00:28:13,080 --> 00:28:14,700
at A team's level whatever that may look

711
00:28:14,700 --> 00:28:17,760
like for you then the next step is

712
00:28:17,760 --> 00:28:19,440
governance this code right so that's

713
00:28:19,440 --> 00:28:21,539
where you capture your for example your

714
00:28:21,539 --> 00:28:23,460
governance decisions like exceptions

715
00:28:23,460 --> 00:28:26,039
that can also be codified right it

716
00:28:26,039 --> 00:28:28,320
should be codified for uh audit purposes

717
00:28:28,320 --> 00:28:29,880
for example

718
00:28:29,880 --> 00:28:31,919
next is drift test code so now that

719
00:28:31,919 --> 00:28:33,840
you've got a cluster running you still

720
00:28:33,840 --> 00:28:36,960
want to see you know any time there's a

721
00:28:36,960 --> 00:28:38,460
change in the cluster which was not

722
00:28:38,460 --> 00:28:40,440
provisioned by you on the very left with

723
00:28:40,440 --> 00:28:42,960
your IAC files Etc or your images you

724
00:28:42,960 --> 00:28:44,240
want to see drift between your

725
00:28:44,240 --> 00:28:46,860
kubernetes running kubernetes versus

726
00:28:46,860 --> 00:28:49,260
your resource IC files you want to see a

727
00:28:49,260 --> 00:28:50,340
difference between your running

728
00:28:50,340 --> 00:28:52,260
containers and your images

729
00:28:52,260 --> 00:28:54,179
Etc right that's very important even

730
00:28:54,179 --> 00:28:56,760
with all of those policies in place

731
00:28:56,760 --> 00:28:59,220
the next one is Securities code this is

732
00:28:59,220 --> 00:29:00,779
where you start looking at your breach

733
00:29:00,779 --> 00:29:02,640
path your attack path and not look at

734
00:29:02,640 --> 00:29:04,919
look at one resource at a time but look

735
00:29:04,919 --> 00:29:06,659
at the whole picture as well as you want

736
00:29:06,659 --> 00:29:09,600
to see the impact that each resource has

737
00:29:09,600 --> 00:29:12,720
if it was to be exposed right and be

738
00:29:12,720 --> 00:29:14,460
wonderful and the last thing is

739
00:29:14,460 --> 00:29:17,279
remediation is code that kind of

740
00:29:17,279 --> 00:29:19,640
especially in the IAC world

741
00:29:19,640 --> 00:29:23,460
where if you do find policy violations

742
00:29:23,460 --> 00:29:25,380
then you want to automate that process

743
00:29:25,380 --> 00:29:28,380
of at least the you know sort of the low

744
00:29:28,380 --> 00:29:31,559
hanging fruits where you automatically

745
00:29:31,559 --> 00:29:34,020
do a push a pull request and fix that

746
00:29:34,020 --> 00:29:35,760
IEC violation

747
00:29:35,760 --> 00:29:36,779
right

748
00:29:36,779 --> 00:29:38,940
so I'm not sure where folks are with all

749
00:29:38,940 --> 00:29:41,159
of this but this is what we consider as

750
00:29:41,159 --> 00:29:44,399
a you know as you go to the right but

751
00:29:44,399 --> 00:29:45,960
what I showed you today was the very

752
00:29:45,960 --> 00:29:47,820
left and rare I think it's a good place

753
00:29:47,820 --> 00:29:49,620
to start

754
00:29:49,620 --> 00:29:51,299
and then I don't know how much time you

755
00:29:51,299 --> 00:29:52,559
have left I think they're almost there

756
00:29:52,559 --> 00:29:55,799
but this is the last slide I want to put

757
00:29:55,799 --> 00:29:57,659
up there's a QR code if you want to scan

758
00:29:57,659 --> 00:29:59,820
that and I can show you the site as well

759
00:29:59,820 --> 00:30:02,340
but this is tarot scan in action on

760
00:30:02,340 --> 00:30:05,220
tenable's site you can put in your own

761
00:30:05,220 --> 00:30:07,039
IEC code here

762
00:30:07,039 --> 00:30:09,960
again with Docker file Helm customize

763
00:30:09,960 --> 00:30:12,000
whatever that may be and you can see

764
00:30:12,000 --> 00:30:13,080
what comes up in terms of

765
00:30:13,080 --> 00:30:14,820
vulnerabilities

766
00:30:14,820 --> 00:30:16,679
right and I'll actually bring that up

767
00:30:16,679 --> 00:30:20,059
real quick that's the last thing

768
00:30:25,679 --> 00:30:28,440
all right so this one here so it gives

769
00:30:28,440 --> 00:30:31,260
you uh sample files so since we just

770
00:30:31,260 --> 00:30:34,500
talked about Docker I'll pull that up so

771
00:30:34,500 --> 00:30:36,659
this is a simple Docker file and you can

772
00:30:36,659 --> 00:30:39,240
click on scan it'll take you tell you

773
00:30:39,240 --> 00:30:41,720
the there's it says there's one medium

774
00:30:41,720 --> 00:30:43,980
violation here you can click on that to

775
00:30:43,980 --> 00:30:46,320
get more details as well right it can do

776
00:30:46,320 --> 00:30:48,120
the same thing with

777
00:30:48,120 --> 00:30:52,140
let's say your kubernetes yaml files

778
00:30:52,140 --> 00:30:55,620
so it supports different formats as well

779
00:30:55,620 --> 00:30:57,480
yeah here's some of the stuff we saw

780
00:30:57,480 --> 00:30:59,880
before as well so it's good to try and

781
00:30:59,880 --> 00:31:02,580
just see where you're at right

782
00:31:02,580 --> 00:31:04,679
um and again it's completely open source

783
00:31:04,679 --> 00:31:07,559
I encourage you to join the community

784
00:31:07,559 --> 00:31:09,799
uh if you see problems raised issues

785
00:31:09,799 --> 00:31:12,480
contribute if you like

786
00:31:12,480 --> 00:31:16,559
and I think that is it for me

787
00:31:16,559 --> 00:31:18,600
yeah I think that's it for me thank you

788
00:31:18,600 --> 00:31:20,600
very much for listening

789
00:31:20,600 --> 00:31:24,649
[Applause]

