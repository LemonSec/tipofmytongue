1
00:00:00,299 --> 00:00:03,240
my arm yeah more all right let's get

2
00:00:03,240 --> 00:00:04,740
started

3
00:00:04,740 --> 00:00:06,000
um so first of all thanks everybody

4
00:00:06,000 --> 00:00:07,859
thanks for showing up it's the end of

5
00:00:07,859 --> 00:00:09,540
the day it's the end of the conference

6
00:00:09,540 --> 00:00:11,340
you could have been having a beer or

7
00:00:11,340 --> 00:00:12,660
food or something but you're here so

8
00:00:12,660 --> 00:00:14,639
I'll try to make it worth it

9
00:00:14,639 --> 00:00:16,139
um we're going to talk about keyless

10
00:00:16,139 --> 00:00:19,980
signing uh without fulsio so keyless

11
00:00:19,980 --> 00:00:22,800
signing is this the signing pattern that

12
00:00:22,800 --> 00:00:24,539
was popularized by Sig store where you

13
00:00:24,539 --> 00:00:25,680
don't have to think the end user doesn't

14
00:00:25,680 --> 00:00:28,199
have to think about managing their their

15
00:00:28,199 --> 00:00:30,720
or their keys and I want to sort of

16
00:00:30,720 --> 00:00:33,120
demystify what keyless dining is and

17
00:00:33,120 --> 00:00:35,280
show that you can also create the same

18
00:00:35,280 --> 00:00:37,440
flow without having

19
00:00:37,440 --> 00:00:38,520
um

20
00:00:38,520 --> 00:00:40,379
to U6 store you can use off-the-shelf

21
00:00:40,379 --> 00:00:41,760
components and get the same kind of

22
00:00:41,760 --> 00:00:44,180
experience

23
00:00:45,180 --> 00:00:47,460
okay so if you love this talk or if you

24
00:00:47,460 --> 00:00:48,960
hate this talk here's how to get a hold

25
00:00:48,960 --> 00:00:51,180
of me afterwards I have the kind of

26
00:00:51,180 --> 00:00:53,460
pleasure of working with chain guard so

27
00:00:53,460 --> 00:00:54,480
I get to think about this kind of thing

28
00:00:54,480 --> 00:00:56,280
throughout the day for work which is

29
00:00:56,280 --> 00:00:57,780
wonderful and then you can find my

30
00:00:57,780 --> 00:01:00,239
GitHub or Mastodon handles there to to

31
00:01:00,239 --> 00:01:02,940
say hello or whatever you'd like

32
00:01:02,940 --> 00:01:04,559
and so here's how this is going to go

33
00:01:04,559 --> 00:01:06,540
down uh first we're going to take a look

34
00:01:06,540 --> 00:01:08,040
at what the experience of keyless

35
00:01:08,040 --> 00:01:10,080
signing is just what does signing look

36
00:01:10,080 --> 00:01:12,299
like for an end user and and just show

37
00:01:12,299 --> 00:01:14,520
uh just that user experience and what

38
00:01:14,520 --> 00:01:16,500
the value is first of all and if you

39
00:01:16,500 --> 00:01:18,600
haven't managed Keys before we're going

40
00:01:18,600 --> 00:01:21,780
to take a look at what that feels like a

41
00:01:21,780 --> 00:01:22,860
little bit

42
00:01:22,860 --> 00:01:24,540
um we're going to sign something with a

43
00:01:24,540 --> 00:01:27,659
key a key pair and then see some of the

44
00:01:27,659 --> 00:01:30,299
pain points and and feel that what can

45
00:01:30,299 --> 00:01:33,180
go wrong essentially and then if we're

46
00:01:33,180 --> 00:01:34,560
in the position to want to build

47
00:01:34,560 --> 00:01:36,060
something similar but we don't want to

48
00:01:36,060 --> 00:01:37,979
use six store for whatever reason we're

49
00:01:37,979 --> 00:01:39,900
going to take a look at keyless signing

50
00:01:39,900 --> 00:01:41,759
step by step and understand the

51
00:01:41,759 --> 00:01:44,939
components that we need to run ourselves

52
00:01:44,939 --> 00:01:47,040
to get the same experience for for our

53
00:01:47,040 --> 00:01:48,960
users if we don't want to use the the

54
00:01:48,960 --> 00:01:50,159
public good instance or for whatever

55
00:01:50,159 --> 00:01:51,960
reason we don't want to use all the

56
00:01:51,960 --> 00:01:54,180
components of Sig stores open source

57
00:01:54,180 --> 00:01:56,299
services

58
00:01:56,520 --> 00:01:59,220
okay so the first bit about keyless

59
00:01:59,220 --> 00:02:00,860
signing being fun it is it's it's

60
00:02:00,860 --> 00:02:02,880
fantastically easy especially if you've

61
00:02:02,880 --> 00:02:04,439
gone through the Alternatives of signing

62
00:02:04,439 --> 00:02:07,439
any other way in the past

63
00:02:07,439 --> 00:02:08,880
um we're going to see some examples with

64
00:02:08,880 --> 00:02:11,520
cosine this is six stores uh CLI client

65
00:02:11,520 --> 00:02:12,900
that just makes it a lot easier to use

66
00:02:12,900 --> 00:02:15,660
these um these services to sign things

67
00:02:15,660 --> 00:02:18,000
and really all you need to do to sign a

68
00:02:18,000 --> 00:02:20,580
container with cosine is to just type

69
00:02:20,580 --> 00:02:23,520
cosine sine and the digest of the

70
00:02:23,520 --> 00:02:24,840
container that you want to sign like

71
00:02:24,840 --> 00:02:27,780
that's it the user experience that

72
00:02:27,780 --> 00:02:29,160
happens right after this if you haven't

73
00:02:29,160 --> 00:02:31,920
done this before is if you're a person

74
00:02:31,920 --> 00:02:34,319
you're going to get you know a browser

75
00:02:34,319 --> 00:02:35,700
is going to pop open and prompt you to

76
00:02:35,700 --> 00:02:37,440
log in with an identity provider Google

77
00:02:37,440 --> 00:02:40,379
GitHub Microsoft that list might grow in

78
00:02:40,379 --> 00:02:42,660
the future but basically

79
00:02:42,660 --> 00:02:44,340
how do you want to sign this image which

80
00:02:44,340 --> 00:02:45,840
identity you want to use and just prompt

81
00:02:45,840 --> 00:02:48,300
you to log in and that's the identity

82
00:02:48,300 --> 00:02:49,739
that's going to be attached to the

83
00:02:49,739 --> 00:02:52,260
signature on this this container

84
00:02:52,260 --> 00:02:52,980
um

85
00:02:52,980 --> 00:02:55,140
there are some variations on this if

86
00:02:55,140 --> 00:02:56,400
you're running the same command inside

87
00:02:56,400 --> 00:02:58,739
of some kind of workload cosine is going

88
00:02:58,739 --> 00:03:00,060
to kind of look around and try to figure

89
00:03:00,060 --> 00:03:02,099
out who you are maybe if it looks an

90
00:03:02,099 --> 00:03:05,040
environment variable and sees GitHub ID

91
00:03:05,040 --> 00:03:07,319
token environment variable okay we're in

92
00:03:07,319 --> 00:03:08,640
GitHub actions and it's going to use

93
00:03:08,640 --> 00:03:11,900
that identity to sign if it's in

94
00:03:11,900 --> 00:03:13,739
kubernetes it might find the service

95
00:03:13,739 --> 00:03:15,780
account token and use that identity so

96
00:03:15,780 --> 00:03:17,220
if you're a workload it's not going to

97
00:03:17,220 --> 00:03:18,659
prompt you to log in it's just going to

98
00:03:18,659 --> 00:03:21,540
try to figure out who are we essentially

99
00:03:21,540 --> 00:03:23,280
um and there's some other yeah okay so

100
00:03:23,280 --> 00:03:26,159
so this is it and then a smaller side uh

101
00:03:26,159 --> 00:03:28,140
soon you'll have to use a digest because

102
00:03:28,140 --> 00:03:30,000
signing a tag doesn't really mean

103
00:03:30,000 --> 00:03:30,840
anything

104
00:03:30,840 --> 00:03:32,819
um the content can change and then what

105
00:03:32,819 --> 00:03:33,900
are we even talking about on the

106
00:03:33,900 --> 00:03:35,459
signature so that's going to be a

107
00:03:35,459 --> 00:03:37,800
required thing soon

108
00:03:37,800 --> 00:03:40,260
and I think the magic of this keyless

109
00:03:40,260 --> 00:03:43,080
signing is is really this part when you

110
00:03:43,080 --> 00:03:45,060
verify a signature

111
00:03:45,060 --> 00:03:46,860
um the aspect that you want to sort of

112
00:03:46,860 --> 00:03:48,959
look at here is we can just say cosine

113
00:03:48,959 --> 00:03:51,180
verify we point to the same image digest

114
00:03:51,180 --> 00:03:53,400
and then we talk about the signer we

115
00:03:53,400 --> 00:03:56,040
don't talk about keys in this case if I

116
00:03:56,040 --> 00:03:58,620
was signing with my Google login we talk

117
00:03:58,620 --> 00:04:00,900
about my email address that's the Alias

118
00:04:00,900 --> 00:04:03,420
for for me oh sorry and we talk about

119
00:04:03,420 --> 00:04:05,239
according to who according to

120
00:04:05,239 --> 00:04:08,040
accounts.google.com there's variations

121
00:04:08,040 --> 00:04:10,379
on this obviously you could say I want

122
00:04:10,379 --> 00:04:13,140
it to be according to the GitHub actions

123
00:04:13,140 --> 00:04:15,720
identity provider and I care about the

124
00:04:15,720 --> 00:04:18,298
specific workflow to have signed the

125
00:04:18,298 --> 00:04:21,660
image soon there'll be support for a

126
00:04:21,660 --> 00:04:23,520
couple other providers like gitlab and

127
00:04:23,520 --> 00:04:25,500
build guide in the works so hopefully

128
00:04:25,500 --> 00:04:27,479
this will be ubiquitous across CI

129
00:04:27,479 --> 00:04:29,040
providers and other workload identities

130
00:04:29,040 --> 00:04:31,320
soon

131
00:04:31,320 --> 00:04:32,880
um there's some variations on this

132
00:04:32,880 --> 00:04:35,699
verification process you can run this as

133
00:04:35,699 --> 00:04:37,680
a kubernetes admission web hook so

134
00:04:37,680 --> 00:04:39,720
there's Governor support I believe

135
00:04:39,720 --> 00:04:41,280
gatekeeper might have support now I'm

136
00:04:41,280 --> 00:04:44,759
not sure but there's also a a controller

137
00:04:44,759 --> 00:04:46,320
called the policy controller from six

138
00:04:46,320 --> 00:04:49,620
door itself that can help you check you

139
00:04:49,620 --> 00:04:51,540
know signatures and reject images that

140
00:04:51,540 --> 00:04:54,700
don't match a policy essentially right

141
00:04:54,700 --> 00:04:55,199
[Music]

142
00:04:55,199 --> 00:04:56,400
um

143
00:04:56,400 --> 00:05:00,360
this is really awesome as an end user if

144
00:05:00,360 --> 00:05:02,100
you don't know anything about public key

145
00:05:02,100 --> 00:05:04,740
cryptography you still didn't need to do

146
00:05:04,740 --> 00:05:06,120
anything and know anything about public

147
00:05:06,120 --> 00:05:08,220
heat cryptography and you can hold it

148
00:05:08,220 --> 00:05:10,680
right and not mess up not switch the

149
00:05:10,680 --> 00:05:12,900
private key in the public key or store

150
00:05:12,900 --> 00:05:16,919
something incorrectly you don't need to

151
00:05:16,919 --> 00:05:18,900
know that the keys even exist in this

152
00:05:18,900 --> 00:05:20,400
case so there's nothing to mismanage

153
00:05:20,400 --> 00:05:22,199
which is really wonderful but if you've

154
00:05:22,199 --> 00:05:24,720
never had to manage Keys you might not

155
00:05:24,720 --> 00:05:25,620
know

156
00:05:25,620 --> 00:05:27,780
how bad that can be so let's take a look

157
00:05:27,780 --> 00:05:32,580
at uh managing keys and see what that

158
00:05:32,580 --> 00:05:35,039
experience is like so cosine can can

159
00:05:35,039 --> 00:05:38,220
also sign things with a with a key pair

160
00:05:38,220 --> 00:05:39,539
and the first thing you need to do

161
00:05:39,539 --> 00:05:41,520
whether you use cosign or not is to

162
00:05:41,520 --> 00:05:44,759
generate a key pair private in public if

163
00:05:44,759 --> 00:05:46,199
you use cosine to do it it'll look kind

164
00:05:46,199 --> 00:05:47,820
of like this ask you for a little

165
00:05:47,820 --> 00:05:50,460
password to encrypt the private key and

166
00:05:50,460 --> 00:05:52,259
then it'll write out two files the

167
00:05:52,259 --> 00:05:55,320
public key it's cosign.pub here and the

168
00:05:55,320 --> 00:05:57,840
private key cosine.key is the name of

169
00:05:57,840 --> 00:05:59,460
the file here

170
00:05:59,460 --> 00:06:00,360
um

171
00:06:00,360 --> 00:06:02,580
the private key is the kind of sensitive

172
00:06:02,580 --> 00:06:04,680
bit there's some variations on this too

173
00:06:04,680 --> 00:06:06,840
the private key can be managed in like a

174
00:06:06,840 --> 00:06:09,240
cloud KMS system where you can only

175
00:06:09,240 --> 00:06:11,580
access to sign over an API instead of

176
00:06:11,580 --> 00:06:15,300
having an actual key content on disk but

177
00:06:15,300 --> 00:06:17,039
um some of the pain points end up being

178
00:06:17,039 --> 00:06:18,479
kind of similar even in that use case

179
00:06:18,479 --> 00:06:20,220
when you're not managing that and

180
00:06:20,220 --> 00:06:21,479
there's different tools you can use like

181
00:06:21,479 --> 00:06:24,840
openssl or add a step CLI to generate

182
00:06:24,840 --> 00:06:26,460
these kind of key Pairs and use them for

183
00:06:26,460 --> 00:06:28,020
signing

184
00:06:28,020 --> 00:06:29,580
and the experience of signing always

185
00:06:29,580 --> 00:06:31,080
kind of looks a little bit like this so

186
00:06:31,080 --> 00:06:33,060
here using cosine we point to the same

187
00:06:33,060 --> 00:06:35,039
kind of image and then we pass in the

188
00:06:35,039 --> 00:06:38,100
private key to sign with so you need to

189
00:06:38,100 --> 00:06:40,440
know to use the private key for signing

190
00:06:40,440 --> 00:06:42,479
and then when you're verifying you pass

191
00:06:42,479 --> 00:06:44,460
in the public key again you could use

192
00:06:44,460 --> 00:06:45,960
the kubernetes and Mission Control and

193
00:06:45,960 --> 00:06:47,340
stick the public key inside of your

194
00:06:47,340 --> 00:06:49,440
little crd to say you know it needs to

195
00:06:49,440 --> 00:06:51,240
have be signed by this thing

196
00:06:51,240 --> 00:06:53,639
and this is going to check in in the

197
00:06:53,639 --> 00:06:55,680
case of keyless and in the case of keyed

198
00:06:55,680 --> 00:06:57,060
signing it's going to check that the

199
00:06:57,060 --> 00:06:58,380
contents of the container haven't been

200
00:06:58,380 --> 00:07:00,199
shifted kind of like a hash

201
00:07:00,199 --> 00:07:02,639
but in the case of this check with the

202
00:07:02,639 --> 00:07:04,199
public key it's going to check that it

203
00:07:04,199 --> 00:07:06,419
was signed by the private key that's the

204
00:07:06,419 --> 00:07:08,759
verification that's happening

205
00:07:08,759 --> 00:07:10,259
and like

206
00:07:10,259 --> 00:07:11,819
it doesn't look like that bad really

207
00:07:11,819 --> 00:07:14,160
like it's just make sure that you handle

208
00:07:14,160 --> 00:07:15,419
the private key and stick it where you

209
00:07:15,419 --> 00:07:16,620
want to sign and then take the public

210
00:07:16,620 --> 00:07:17,880
key wherever you want to verify right

211
00:07:17,880 --> 00:07:20,039
it's it's not bad when it's one key one

212
00:07:20,039 --> 00:07:21,720
key is actually this is like the

213
00:07:21,720 --> 00:07:23,280
Temptation that leads you down the path

214
00:07:23,280 --> 00:07:25,620
of like despair

215
00:07:25,620 --> 00:07:26,340
um

216
00:07:26,340 --> 00:07:27,900
you only really need to know a little

217
00:07:27,900 --> 00:07:30,240
bit about the keys you know always

218
00:07:30,240 --> 00:07:31,860
verify with public always sign with

219
00:07:31,860 --> 00:07:33,780
private and don't leak the private one

220
00:07:33,780 --> 00:07:34,919
out there otherwise people could sign

221
00:07:34,919 --> 00:07:36,479
with it right

222
00:07:36,479 --> 00:07:37,440
um

223
00:07:37,440 --> 00:07:39,180
so let's ask a couple questions to kind

224
00:07:39,180 --> 00:07:42,360
of move Beyond just like one key pair

225
00:07:42,360 --> 00:07:44,580
right this is maybe a situation that you

226
00:07:44,580 --> 00:07:46,979
have like I want to verify that the

227
00:07:46,979 --> 00:07:50,160
things I run in my production systems

228
00:07:50,160 --> 00:07:53,819
were built in my build system right like

229
00:07:53,819 --> 00:07:55,259
we should all be able to answer that

230
00:07:55,259 --> 00:07:57,900
question that's that's like entry points

231
00:07:57,900 --> 00:07:59,520
to software security software supply

232
00:07:59,520 --> 00:08:01,740
chain security right and the way that

233
00:08:01,740 --> 00:08:03,599
you would solve this uh to kind of fix

234
00:08:03,599 --> 00:08:06,599
this this with key management is okay

235
00:08:06,599 --> 00:08:08,160
well we'll generate a key pair let's

236
00:08:08,160 --> 00:08:09,720
take the private key over in your build

237
00:08:09,720 --> 00:08:11,759
system sign stuff in your build system

238
00:08:11,759 --> 00:08:13,800
by accessing it maybe from some Secret

239
00:08:13,800 --> 00:08:15,660
store or something and then you tick

240
00:08:15,660 --> 00:08:17,699
your public key and wherever you're

241
00:08:17,699 --> 00:08:19,500
about to run your containers or your

242
00:08:19,500 --> 00:08:21,180
software verified before running and

243
00:08:21,180 --> 00:08:23,099
then reject stuff that that isn't signed

244
00:08:23,099 --> 00:08:24,840
so in this case you start to see the

245
00:08:24,840 --> 00:08:27,000
pattern that emerges with with these key

246
00:08:27,000 --> 00:08:29,220
pairs is that the public key becomes

247
00:08:29,220 --> 00:08:30,360
this kind of

248
00:08:30,360 --> 00:08:33,000
Alias for the build system and we know

249
00:08:33,000 --> 00:08:34,740
that it's the build system because we

250
00:08:34,740 --> 00:08:37,080
only gave the private key to the build

251
00:08:37,080 --> 00:08:38,279
system

252
00:08:38,279 --> 00:08:40,200
but if you want to act like slightly

253
00:08:40,200 --> 00:08:41,580
more nuanced

254
00:08:41,580 --> 00:08:44,399
language around verification like in

255
00:08:44,399 --> 00:08:46,560
this kubernetes namespace I would like

256
00:08:46,560 --> 00:08:48,180
to make sure that

257
00:08:48,180 --> 00:08:49,260
um

258
00:08:49,260 --> 00:08:51,300
that it was built and signed by a

259
00:08:51,300 --> 00:08:53,399
particular CI workflow

260
00:08:53,399 --> 00:08:55,080
the only way that you can discriminate

261
00:08:55,080 --> 00:08:56,700
between the different signers in this

262
00:08:56,700 --> 00:08:59,160
case the different CI workflows is to

263
00:08:59,160 --> 00:09:01,320
give them all different private keys to

264
00:09:01,320 --> 00:09:03,839
sign otherwise your statement can't be

265
00:09:03,839 --> 00:09:06,240
verified because you can't distinguish

266
00:09:06,240 --> 00:09:08,220
between the different signers right so

267
00:09:08,220 --> 00:09:10,740
again the keys have become sort of an

268
00:09:10,740 --> 00:09:13,860
alias for I.E this particular signer and

269
00:09:13,860 --> 00:09:16,740
they hold on onto it for a long time

270
00:09:16,740 --> 00:09:19,080
at this point you better start to kind

271
00:09:19,080 --> 00:09:21,540
of like track them somehow because

272
00:09:21,540 --> 00:09:23,220
just by looking at the key material you

273
00:09:23,220 --> 00:09:25,200
don't know where you stuck it and which

274
00:09:25,200 --> 00:09:27,620
Pipeline and it gets to be a little bit

275
00:09:27,620 --> 00:09:30,060
chaotic tracking where you put each one

276
00:09:30,060 --> 00:09:30,959
right

277
00:09:30,959 --> 00:09:33,180
you might have a lot of pipelines too

278
00:09:33,180 --> 00:09:35,040
uh okay like

279
00:09:35,040 --> 00:09:37,380
your CI provider also probably is going

280
00:09:37,380 --> 00:09:39,000
to get jacked at some point and people

281
00:09:39,000 --> 00:09:41,100
will take your private keys right like

282
00:09:41,100 --> 00:09:43,140
no one is immune if you if you create a

283
00:09:43,140 --> 00:09:46,019
Secret store people will attack it right

284
00:09:46,019 --> 00:09:48,060
um the tough bit here is you need to

285
00:09:48,060 --> 00:09:51,360
make sure you create a new key pair put

286
00:09:51,360 --> 00:09:52,980
the new public key in place to verify

287
00:09:52,980 --> 00:09:55,620
against both public Keys sign with the

288
00:09:55,620 --> 00:09:58,740
the new private key distribute you know

289
00:09:58,740 --> 00:10:00,480
a build for everything and then get the

290
00:10:00,480 --> 00:10:02,820
new builds everywhere and then remove

291
00:10:02,820 --> 00:10:04,680
the the old public key from the

292
00:10:04,680 --> 00:10:06,899
verification policy it's

293
00:10:06,899 --> 00:10:11,240
it's work but you know it happens right

294
00:10:12,300 --> 00:10:14,279
but you were maybe signing things for

295
00:10:14,279 --> 00:10:16,200
customers and they were verifying with

296
00:10:16,200 --> 00:10:18,060
those keys it starts to get rough now

297
00:10:18,060 --> 00:10:20,940
like talk to PR right you have to do the

298
00:10:20,940 --> 00:10:22,320
same thing but you also have to deal

299
00:10:22,320 --> 00:10:23,459
with the fact that you just kind of

300
00:10:23,459 --> 00:10:25,440
busted your customers trust a little bit

301
00:10:25,440 --> 00:10:26,880
and they're just kind of thinking like

302
00:10:26,880 --> 00:10:28,620
how long until it happens again I mean

303
00:10:28,620 --> 00:10:31,260
the news cycle is rough right

304
00:10:31,260 --> 00:10:32,760
um it just

305
00:10:32,760 --> 00:10:34,620
kind of keeps on going on like this you

306
00:10:34,620 --> 00:10:36,000
know if you have if you're a big company

307
00:10:36,000 --> 00:10:38,100
it's it's too much

308
00:10:38,100 --> 00:10:39,959
if you have a public key where's the

309
00:10:39,959 --> 00:10:42,420
private key like

310
00:10:42,420 --> 00:10:45,360
no it believe me it's painful and like

311
00:10:45,360 --> 00:10:47,459
the literature is riddled with like

312
00:10:47,459 --> 00:10:49,740
public key management or just key

313
00:10:49,740 --> 00:10:51,540
management just being a brutally hard

314
00:10:51,540 --> 00:10:52,560
problem

315
00:10:52,560 --> 00:10:55,260
so if we can get rid of it

316
00:10:55,260 --> 00:10:57,060
it's a good idea

317
00:10:57,060 --> 00:10:58,980
um so exactly what is it that about the

318
00:10:58,980 --> 00:11:02,640
keyless pattern that is actually better

319
00:11:02,640 --> 00:11:04,860
the thing that is actually better is is

320
00:11:04,860 --> 00:11:07,019
the verification process

321
00:11:07,019 --> 00:11:09,779
um really you only talk about who the

322
00:11:09,779 --> 00:11:12,779
signer's identity is and that's it and

323
00:11:12,779 --> 00:11:14,399
that's what verification should look

324
00:11:14,399 --> 00:11:16,860
like you're trying to assert who signed

325
00:11:16,860 --> 00:11:18,300
this thing

326
00:11:18,300 --> 00:11:19,440
um so let's look at a different example

327
00:11:19,440 --> 00:11:22,200
like uh verifying in kubernetes and

328
00:11:22,200 --> 00:11:23,700
Mission web hooks

329
00:11:23,700 --> 00:11:25,980
um so if you were using a sixstores

330
00:11:25,980 --> 00:11:28,079
policy controller this is a little bit

331
00:11:28,079 --> 00:11:30,839
what the crd would look like and

332
00:11:30,839 --> 00:11:32,399
the thing that I really want to draw

333
00:11:32,399 --> 00:11:34,200
attention to is you know there's a

334
00:11:34,200 --> 00:11:35,640
pattern for what the images look like

335
00:11:35,640 --> 00:11:38,459
gcr.io Foo something there's some

336
00:11:38,459 --> 00:11:40,800
details there about CT log and keyless

337
00:11:40,800 --> 00:11:43,019
but the the thing that's very important

338
00:11:43,019 --> 00:11:45,000
is what's highlighted in color

339
00:11:45,000 --> 00:11:47,339
and again like all keyless verification

340
00:11:47,339 --> 00:11:49,320
should have this property where you just

341
00:11:49,320 --> 00:11:52,800
say I demand that the designer was this

342
00:11:52,800 --> 00:11:55,440
you know this identity provider this

343
00:11:55,440 --> 00:11:57,839
this particular subject and maybe even a

344
00:11:57,839 --> 00:11:58,980
bit of a pattern matching thing where

345
00:11:58,980 --> 00:12:01,140
you say like I trusted this subject you

346
00:12:01,140 --> 00:12:03,360
know most of the time but November was a

347
00:12:03,360 --> 00:12:05,339
bad month they were compromised and then

348
00:12:05,339 --> 00:12:07,200
you know I care about the subjects

349
00:12:07,200 --> 00:12:08,640
looking like this pattern or something

350
00:12:08,640 --> 00:12:10,500
like that but so it can be flexible

351
00:12:10,500 --> 00:12:12,959
doesn't have to be one exact workflow so

352
00:12:12,959 --> 00:12:14,579
this is what it might look like for uh

353
00:12:14,579 --> 00:12:16,260
for someone to say trust a particular

354
00:12:16,260 --> 00:12:19,200
GitHub GitHub workflow

355
00:12:19,200 --> 00:12:21,480
that makes sense

356
00:12:21,480 --> 00:12:24,540
okay so can we build our own

357
00:12:24,540 --> 00:12:26,519
um there's a lot of people right now

358
00:12:26,519 --> 00:12:28,500
building signing systems inside their

359
00:12:28,500 --> 00:12:30,839
companies they have a lot of different

360
00:12:30,839 --> 00:12:32,279
constraints

361
00:12:32,279 --> 00:12:33,000
um

362
00:12:33,000 --> 00:12:35,940
and I guess what I'm trying to say with

363
00:12:35,940 --> 00:12:38,640
this whole kind of presentation is that

364
00:12:38,640 --> 00:12:40,740
it should be keyless

365
00:12:40,740 --> 00:12:42,360
um you should

366
00:12:42,360 --> 00:12:45,060
really really question yourself if when

367
00:12:45,060 --> 00:12:46,980
people are verifying the signatures on

368
00:12:46,980 --> 00:12:49,440
your assigning system if they need to

369
00:12:49,440 --> 00:12:53,700
reference a key ever it's just not a

370
00:12:53,700 --> 00:12:55,980
position you want to put your developers

371
00:12:55,980 --> 00:12:57,720
in because then they have to manage them

372
00:12:57,720 --> 00:12:59,519
and understand what that key means and

373
00:12:59,519 --> 00:13:02,459
what is this like referring to right it

374
00:13:02,459 --> 00:13:04,440
it's going to get bad eventually and so

375
00:13:04,440 --> 00:13:06,959
how can we get the same kind of helis

376
00:13:06,959 --> 00:13:09,899
design even if we decide that like six

377
00:13:09,899 --> 00:13:12,120
stores actual open source systems don't

378
00:13:12,120 --> 00:13:15,779
fit whatever your requirements are

379
00:13:15,779 --> 00:13:17,880
okay so there's there's kind of some

380
00:13:17,880 --> 00:13:19,560
analogies here about why you might want

381
00:13:19,560 --> 00:13:21,660
to build your own right

382
00:13:21,660 --> 00:13:23,579
um if you're building like webpki right

383
00:13:23,579 --> 00:13:25,860
there's a big one that is open source

384
00:13:25,860 --> 00:13:28,260
let's encrypt and it's a design in a

385
00:13:28,260 --> 00:13:30,540
particular way to deal with a large

386
00:13:30,540 --> 00:13:32,700
publicly trusted being a large publicly

387
00:13:32,700 --> 00:13:35,639
trusted CA it has a very large Target on

388
00:13:35,639 --> 00:13:37,620
its back so it's designed a particular

389
00:13:37,620 --> 00:13:40,440
way right but you can use like Boulders

390
00:13:40,440 --> 00:13:43,079
let's encrypts Boulder CA if you wanted

391
00:13:43,079 --> 00:13:44,040
to

392
00:13:44,040 --> 00:13:46,079
but when people have private instances

393
00:13:46,079 --> 00:13:49,260
of a web pki they often don't they often

394
00:13:49,260 --> 00:13:52,019
choose different technology that's built

395
00:13:52,019 --> 00:13:54,060
for smaller private certificate

396
00:13:54,060 --> 00:13:55,800
authorities if you're running a

397
00:13:55,800 --> 00:13:57,600
kubernetes cluster you have a CA you

398
00:13:57,600 --> 00:14:00,600
know it's baked into the API server

399
00:14:00,600 --> 00:14:03,480
if you're running a service mesh you

400
00:14:03,480 --> 00:14:05,220
also have a CA right that becomes that

401
00:14:05,220 --> 00:14:06,839
root of trust for for all the

402
00:14:06,839 --> 00:14:07,980
communication inside of your service

403
00:14:07,980 --> 00:14:10,260
mesh and people also will kind of build

404
00:14:10,260 --> 00:14:12,779
them out of you know small step or vault

405
00:14:12,779 --> 00:14:15,000
open SSL maybe is the wrong example to

406
00:14:15,000 --> 00:14:16,380
use here but you could use that too if

407
00:14:16,380 --> 00:14:18,540
you wanted to to build these sort of

408
00:14:18,540 --> 00:14:20,279
smaller systems with a different set of

409
00:14:20,279 --> 00:14:22,019
constraints maybe certificate

410
00:14:22,019 --> 00:14:24,600
transparency which you know let's

411
00:14:24,600 --> 00:14:26,459
encrypt has to have isn't something you

412
00:14:26,459 --> 00:14:28,920
need for your service mesh

413
00:14:28,920 --> 00:14:30,779
um so I guess the question is

414
00:14:30,779 --> 00:14:33,899
if Sig store is kind of the the big

415
00:14:33,899 --> 00:14:34,880
public

416
00:14:34,880 --> 00:14:39,240
code signing let's encrypt if you will

417
00:14:39,240 --> 00:14:42,180
um what are the options if we are trying

418
00:14:42,180 --> 00:14:43,800
to make something with different

419
00:14:43,800 --> 00:14:45,480
requirements that's private does it need

420
00:14:45,480 --> 00:14:46,920
to be the same and I don't mean to say

421
00:14:46,920 --> 00:14:48,540
by any means here that

422
00:14:48,540 --> 00:14:50,459
um Sig store itself shouldn't be your

423
00:14:50,459 --> 00:14:52,500
first option it should it's fantastic

424
00:14:52,500 --> 00:14:55,440
and it's built to be extremely secure so

425
00:14:55,440 --> 00:14:57,480
it's a great option but if you discover

426
00:14:57,480 --> 00:15:00,320
you have already an existing

427
00:15:00,320 --> 00:15:03,180
x509 like certificate Authority that you

428
00:15:03,180 --> 00:15:05,519
need to use for whatever reason from

429
00:15:05,519 --> 00:15:06,779
other some other team has put this

430
00:15:06,779 --> 00:15:09,120
constraint on you let's see like can we

431
00:15:09,120 --> 00:15:13,040
still get the same behavior basically

432
00:15:13,199 --> 00:15:14,760
Okay so

433
00:15:14,760 --> 00:15:16,500
to figure out how you can do this

434
00:15:16,500 --> 00:15:18,180
yourself we're going to look at the

435
00:15:18,180 --> 00:15:20,820
keyless signing process in detail when

436
00:15:20,820 --> 00:15:22,440
you use sigstore and then we're going to

437
00:15:22,440 --> 00:15:24,000
keep like a little grocery list along

438
00:15:24,000 --> 00:15:26,639
the way for the stuff that we need to

439
00:15:26,639 --> 00:15:28,860
run ourselves if we're trying to get the

440
00:15:28,860 --> 00:15:31,380
same properties okay so that's the way

441
00:15:31,380 --> 00:15:32,820
it's going to go

442
00:15:32,820 --> 00:15:34,560
so when you're using cosine like that

443
00:15:34,560 --> 00:15:36,240
the first example there to sign a

444
00:15:36,240 --> 00:15:39,180
container the the first step for cosine

445
00:15:39,180 --> 00:15:43,019
is to figure out who is using cosine so

446
00:15:43,019 --> 00:15:46,320
who are you who's who's calling me

447
00:15:46,320 --> 00:15:47,820
and that you know we talked a little bit

448
00:15:47,820 --> 00:15:48,959
around like looking around in the

449
00:15:48,959 --> 00:15:51,420
environment if it's if it's a workload

450
00:15:51,420 --> 00:15:52,920
um if it's a person and it can't find

451
00:15:52,920 --> 00:15:54,720
anything it's just going to pop open a

452
00:15:54,720 --> 00:15:56,760
browser and say log in tell me tell me

453
00:15:56,760 --> 00:15:59,459
who you are and the response from that

454
00:15:59,459 --> 00:16:02,040
is going to be specifically for Sig

455
00:16:02,040 --> 00:16:04,260
store it's going to be an oidc ID token

456
00:16:04,260 --> 00:16:07,380
that describes who the user is along

457
00:16:07,380 --> 00:16:09,660
with according to who like according to

458
00:16:09,660 --> 00:16:12,000
Google according to Microsoft that kind

459
00:16:12,000 --> 00:16:12,899
of thing

460
00:16:12,899 --> 00:16:16,380
and that brings us to

461
00:16:16,380 --> 00:16:18,420
basically grocery list item number one

462
00:16:18,420 --> 00:16:20,760
is to think about

463
00:16:20,760 --> 00:16:22,920
the identity provider you will use for

464
00:16:22,920 --> 00:16:25,320
your signers if these are these are like

465
00:16:25,320 --> 00:16:27,660
Ci workloads they need to have a strong

466
00:16:27,660 --> 00:16:29,459
sense of identity and the identity is

467
00:16:29,459 --> 00:16:30,839
going to be tied through the whole

468
00:16:30,839 --> 00:16:33,240
system all the way to the end so that

469
00:16:33,240 --> 00:16:36,720
the verifiers can use that language the

470
00:16:36,720 --> 00:16:38,399
same language as the identity provider

471
00:16:38,399 --> 00:16:40,199
to describe who they wanted to sign

472
00:16:40,199 --> 00:16:42,660
their systems but in your system it

473
00:16:42,660 --> 00:16:44,639
doesn't have to be an oidc identity

474
00:16:44,639 --> 00:16:46,320
provider thankfully that's actually

475
00:16:46,320 --> 00:16:48,240
being baked into a lot of CI providers

476
00:16:48,240 --> 00:16:50,220
these days Circle CI has one GitHub

477
00:16:50,220 --> 00:16:52,440
actions gitlab it's becoming more

478
00:16:52,440 --> 00:16:54,000
ubiquitous but

479
00:16:54,000 --> 00:16:56,339
if your system for workload identity is

480
00:16:56,339 --> 00:16:59,160
spiffy and they're you know x509s fit

481
00:16:59,160 --> 00:17:01,019
docs that could work too if you're

482
00:17:01,019 --> 00:17:03,120
building things in AWS and your identity

483
00:17:03,120 --> 00:17:04,919
provider in that case is

484
00:17:04,919 --> 00:17:08,220
AWS aim that's a perfectly fine identity

485
00:17:08,220 --> 00:17:11,160
provider so long as it works with the

486
00:17:11,160 --> 00:17:12,419
rest of the system and we're going to

487
00:17:12,419 --> 00:17:14,220
talk about that but that's one thing to

488
00:17:14,220 --> 00:17:16,260
think up up front is who's signing is it

489
00:17:16,260 --> 00:17:18,359
people is it workloads and how am I

490
00:17:18,359 --> 00:17:21,559
going to identify them right

491
00:17:22,260 --> 00:17:25,380
all right Next Step cosine knows who we

492
00:17:25,380 --> 00:17:26,459
are now

493
00:17:26,459 --> 00:17:28,199
all right so the next step is that

494
00:17:28,199 --> 00:17:29,820
cosine is going to create a private key

495
00:17:29,820 --> 00:17:31,799
and this is a keyless flow but don't

496
00:17:31,799 --> 00:17:32,820
don't worry we're going to throw it in

497
00:17:32,820 --> 00:17:34,860
the garbage really soon I swear

498
00:17:34,860 --> 00:17:35,820
um okay so it's going to create a

499
00:17:35,820 --> 00:17:37,200
private key in memory

500
00:17:37,200 --> 00:17:38,820
and then

501
00:17:38,820 --> 00:17:40,380
it's going to take the public key

502
00:17:40,380 --> 00:17:42,720
conjugate to that and that ID token

503
00:17:42,720 --> 00:17:44,820
about who the signer is and it's going

504
00:17:44,820 --> 00:17:47,160
to pass that up to falsio which is Sig

505
00:17:47,160 --> 00:17:49,200
store's certificate Authority and what

506
00:17:49,200 --> 00:17:51,900
it's asking for is a short-lived code

507
00:17:51,900 --> 00:17:53,760
signing cert

508
00:17:53,760 --> 00:17:55,380
so fulsio is going to take a look at

509
00:17:55,380 --> 00:17:57,240
that identity and remember we have to

510
00:17:57,240 --> 00:17:59,039
wire the identity all the way through to

511
00:17:59,039 --> 00:18:00,720
the end so that someone can verify just

512
00:18:00,720 --> 00:18:02,400
with that identity like me at

513
00:18:02,400 --> 00:18:04,020
example.com it needs to make it all the

514
00:18:04,020 --> 00:18:05,520
way to the end process

515
00:18:05,520 --> 00:18:07,260
so fossil is gonna

516
00:18:07,260 --> 00:18:09,660
stick that metadata inside of the

517
00:18:09,660 --> 00:18:11,580
certificate along with the public key

518
00:18:11,580 --> 00:18:13,140
because that's certificates are always

519
00:18:13,140 --> 00:18:14,580
have the public key inside them as well

520
00:18:14,580 --> 00:18:18,660
and pass that back to cosine and now the

521
00:18:18,660 --> 00:18:19,860
key property here is that this

522
00:18:19,860 --> 00:18:22,200
certificate is going to expire very soon

523
00:18:22,200 --> 00:18:25,260
I think the default on cosine for falcio

524
00:18:25,260 --> 00:18:27,780
for the the public instances 10 minutes

525
00:18:27,780 --> 00:18:29,640
you could and should maybe make yours

526
00:18:29,640 --> 00:18:31,440
short the idea is to get a certificate

527
00:18:31,440 --> 00:18:34,080
for every signature

528
00:18:34,080 --> 00:18:34,860
um

529
00:18:34,860 --> 00:18:37,080
yeah so the shorter the time window the

530
00:18:37,080 --> 00:18:38,460
better and what's really great about

531
00:18:38,460 --> 00:18:40,260
this is when you're when you have uh

532
00:18:40,260 --> 00:18:42,240
certificates or you're issuing for a

533
00:18:42,240 --> 00:18:43,679
minute or two

534
00:18:43,679 --> 00:18:45,299
um certificate revocation is just out of

535
00:18:45,299 --> 00:18:46,740
the question like there's no reason to

536
00:18:46,740 --> 00:18:49,200
have a certificate revocation list

537
00:18:49,200 --> 00:18:50,760
um with windows that short they're about

538
00:18:50,760 --> 00:18:54,500
you know they're about to expire anyways

539
00:18:55,200 --> 00:18:56,820
um

540
00:18:56,820 --> 00:18:59,760
okay so that's item number two is that

541
00:18:59,760 --> 00:19:01,320
certificate Authority

542
00:19:01,320 --> 00:19:03,000
is going to be happy it's going to have

543
00:19:03,000 --> 00:19:04,740
to be in your system somewhere because

544
00:19:04,740 --> 00:19:06,179
if you're just using public keys by

545
00:19:06,179 --> 00:19:07,140
themselves there's no additional

546
00:19:07,140 --> 00:19:09,240
metadata about the validity period and

547
00:19:09,240 --> 00:19:10,740
the certificate Authority is giving us

548
00:19:10,740 --> 00:19:13,140
two things it's pushing the identity

549
00:19:13,140 --> 00:19:15,480
information into the cert to pair it up

550
00:19:15,480 --> 00:19:17,820
with the public key and it's also giving

551
00:19:17,820 --> 00:19:20,280
us that window of it's only valid for

552
00:19:20,280 --> 00:19:21,960
you know five minutes or something like

553
00:19:21,960 --> 00:19:24,120
that which which is the magic of

554
00:19:24,120 --> 00:19:25,860
certificate authorities metadata on top

555
00:19:25,860 --> 00:19:28,140
of public keys right

556
00:19:28,140 --> 00:19:30,179
um so there's lots of different open

557
00:19:30,179 --> 00:19:31,620
source you know certificate authorities

558
00:19:31,620 --> 00:19:33,539
I think you know

559
00:19:33,539 --> 00:19:35,160
in spirit you could probably do this

560
00:19:35,160 --> 00:19:36,780
with like an SSH certificate Authority

561
00:19:36,780 --> 00:19:37,980
because you can do signatures with those

562
00:19:37,980 --> 00:19:39,780
two but we'll keep our discussions to

563
00:19:39,780 --> 00:19:41,640
x509 so the same kind of certificate

564
00:19:41,640 --> 00:19:44,160
authorities you see for uh TLS just with

565
00:19:44,160 --> 00:19:46,020
different data inside them inside the

566
00:19:46,020 --> 00:19:48,120
metadata

567
00:19:48,120 --> 00:19:49,559
and

568
00:19:49,559 --> 00:19:51,419
the key bit here when you're choosing

569
00:19:51,419 --> 00:19:54,000
your certificate Authority is that it

570
00:19:54,000 --> 00:19:55,380
needs to understand your identity

571
00:19:55,380 --> 00:19:57,960
provider so when you're choosing that

572
00:19:57,960 --> 00:19:59,940
and you know that your identity provider

573
00:19:59,940 --> 00:20:02,820
was for instance it was going to be AWS

574
00:20:02,820 --> 00:20:05,820
I am the certificate Authority needs to

575
00:20:05,820 --> 00:20:07,500
understand that and be able to exchange

576
00:20:07,500 --> 00:20:10,020
those credentials for certs that's what

577
00:20:10,020 --> 00:20:11,640
we have to keep in our head or you need

578
00:20:11,640 --> 00:20:13,140
to glue it together somehow to make that

579
00:20:13,140 --> 00:20:15,179
possible

580
00:20:15,179 --> 00:20:18,900
okay next bit we have a private key

581
00:20:18,900 --> 00:20:22,380
and we sign our artifact with it

582
00:20:22,380 --> 00:20:24,000
and that gives us back a little bit of

583
00:20:24,000 --> 00:20:25,679
data the signature

584
00:20:25,679 --> 00:20:28,320
and then we Chuck the private key in the

585
00:20:28,320 --> 00:20:29,160
garbage

586
00:20:29,160 --> 00:20:30,600
nothing more for our list now that

587
00:20:30,600 --> 00:20:31,799
that's just something we'll be able to

588
00:20:31,799 --> 00:20:34,860
do so no no more things no more

589
00:20:34,860 --> 00:20:36,059
requirements I think the only thing to

590
00:20:36,059 --> 00:20:37,620
remember here is we're kind of on the

591
00:20:37,620 --> 00:20:39,539
clock at this point the certificate is

592
00:20:39,539 --> 00:20:40,799
going to expire students so we better

593
00:20:40,799 --> 00:20:42,299
sign quickly that's that's kind of the

594
00:20:42,299 --> 00:20:45,080
only design requirement

595
00:20:45,419 --> 00:20:47,100
okay next

596
00:20:47,100 --> 00:20:50,840
so what happens next in cosine is that

597
00:20:50,840 --> 00:20:53,400
it tells it needs to go tell recore

598
00:20:53,400 --> 00:20:55,200
which is the signature transparency log

599
00:20:55,200 --> 00:20:57,960
that it it made a signature so this is

600
00:20:57,960 --> 00:20:59,340
one of these really interesting and

601
00:20:59,340 --> 00:21:01,799
excellent security features of of Sig

602
00:21:01,799 --> 00:21:03,539
store is that there's signature

603
00:21:03,539 --> 00:21:05,100
transparency so each signature that

604
00:21:05,100 --> 00:21:06,299
happens ends up in a signature

605
00:21:06,299 --> 00:21:08,400
transparency log and cosine is going to

606
00:21:08,400 --> 00:21:10,620
tell cosine is going to tell recore this

607
00:21:10,620 --> 00:21:12,900
signature transparency log I've signed

608
00:21:12,900 --> 00:21:15,600
something next

609
00:21:15,600 --> 00:21:17,760
so it's going to pass the signature it

610
00:21:17,760 --> 00:21:19,860
just created and the certificate that

611
00:21:19,860 --> 00:21:23,100
it's signed with up to recore

612
00:21:23,100 --> 00:21:24,900
and recourse is going to give basically

613
00:21:24,900 --> 00:21:27,000
all that stuff back

614
00:21:27,000 --> 00:21:30,000
but it's going to add a timestamp and

615
00:21:30,000 --> 00:21:32,220
sign the whole bundle so the certificate

616
00:21:32,220 --> 00:21:35,280
the time stamp and the artifact

617
00:21:35,280 --> 00:21:37,260
signature are all going to be signed by

618
00:21:37,260 --> 00:21:38,820
recore

619
00:21:38,820 --> 00:21:42,020
now it's not signature transparency

620
00:21:42,020 --> 00:21:45,179
that's that's what gives

621
00:21:45,179 --> 00:21:47,100
um Sig store this keyless feature

622
00:21:47,100 --> 00:21:49,380
signature signature transparency is

623
00:21:49,380 --> 00:21:51,480
great but it's not the keyless bit

624
00:21:51,480 --> 00:21:53,640
What's Happening Here

625
00:21:53,640 --> 00:21:57,179
to make keyless possible is that this is

626
00:21:57,179 --> 00:22:00,000
a verifiable timestamp of when the

627
00:22:00,000 --> 00:22:02,039
signature happened and recore doesn't

628
00:22:02,039 --> 00:22:03,960
need to necessarily be the thing that

629
00:22:03,960 --> 00:22:06,840
does this but you must have something to

630
00:22:06,840 --> 00:22:09,600
it so the key element here the last

631
00:22:09,600 --> 00:22:10,559
thing that we're going to put on our

632
00:22:10,559 --> 00:22:12,720
grocery list is a Time stamping

633
00:22:12,720 --> 00:22:14,400
Authority now if you decide that you

634
00:22:14,400 --> 00:22:15,900
want signature transparency because it

635
00:22:15,900 --> 00:22:17,340
has a lot of great properties in its own

636
00:22:17,340 --> 00:22:19,740
right you could run record if you want

637
00:22:19,740 --> 00:22:21,840
as the signature is the time stamping

638
00:22:21,840 --> 00:22:24,120
Authority but you can also run time

639
00:22:24,120 --> 00:22:26,159
stamping authorities that only do these

640
00:22:26,159 --> 00:22:28,020
time stamps and don't actually have this

641
00:22:28,020 --> 00:22:30,240
big signature append Only log if that's

642
00:22:30,240 --> 00:22:31,799
what you don't want to have

643
00:22:31,799 --> 00:22:33,240
they're a little bit simpler to operate

644
00:22:33,240 --> 00:22:35,159
as well

645
00:22:35,159 --> 00:22:36,539
um okay

646
00:22:36,539 --> 00:22:39,179
so that's it we have the three things on

647
00:22:39,179 --> 00:22:42,240
our list we have an identity provider a

648
00:22:42,240 --> 00:22:43,740
certificate Authority and a Time

649
00:22:43,740 --> 00:22:45,659
stamping Authority and then the final

650
00:22:45,659 --> 00:22:47,880
question a little bit here is that was a

651
00:22:47,880 --> 00:22:49,500
lot of stuff like a lot of bundle came

652
00:22:49,500 --> 00:22:51,059
out of this like how did that turn into

653
00:22:51,059 --> 00:22:53,400
someone just saying you know cosine

654
00:22:53,400 --> 00:22:55,620
verify this email address and this

655
00:22:55,620 --> 00:22:57,600
identity provider right

656
00:22:57,600 --> 00:23:00,299
there's this is what's in the hands of a

657
00:23:00,299 --> 00:23:02,340
verifier okay and here's how

658
00:23:02,340 --> 00:23:03,900
verification works and what you need to

659
00:23:03,900 --> 00:23:05,100
implement if you want to make this

660
00:23:05,100 --> 00:23:07,440
keyless magic kind of work right you

661
00:23:07,440 --> 00:23:09,539
have the the signature of the bundle of

662
00:23:09,539 --> 00:23:11,700
the big time stamped bundle and you have

663
00:23:11,700 --> 00:23:13,320
we have our certificate we have our

664
00:23:13,320 --> 00:23:14,760
signature we have the artifact in hand

665
00:23:14,760 --> 00:23:16,740
you have to ship all of this stuff to

666
00:23:16,740 --> 00:23:18,840
the end user what's happening in cosine

667
00:23:18,840 --> 00:23:20,700
if you signed a container is that this

668
00:23:20,700 --> 00:23:22,940
is all attached onto

669
00:23:22,940 --> 00:23:26,400
an oci image right beside your the image

670
00:23:26,400 --> 00:23:28,140
you care about so it's all stuck there

671
00:23:28,140 --> 00:23:31,380
inside your oci registry usually

672
00:23:31,380 --> 00:23:33,720
um so here's the process we kind of have

673
00:23:33,720 --> 00:23:35,940
to peel this thing like an onion so

674
00:23:35,940 --> 00:23:37,740
outside layers first and we're going to

675
00:23:37,740 --> 00:23:39,780
make our way inside

676
00:23:39,780 --> 00:23:42,240
the first bit is to just verify the

677
00:23:42,240 --> 00:23:44,520
signature of the bundle so recore in

678
00:23:44,520 --> 00:23:47,000
this case has a public key we verify

679
00:23:47,000 --> 00:23:49,620
that this signature was signed with

680
00:23:49,620 --> 00:23:52,320
recourse public key

681
00:23:52,320 --> 00:23:54,480
which kind of removes the bundle which

682
00:23:54,480 --> 00:23:56,700
means that we trust that the signature

683
00:23:56,700 --> 00:23:58,320
happened at a particular time and we

684
00:23:58,320 --> 00:23:59,760
know that what the time stamp is

685
00:23:59,760 --> 00:24:01,500
essentially

686
00:24:01,500 --> 00:24:03,900
the next part is to check that the

687
00:24:03,900 --> 00:24:06,299
certificate is valid now it's really

688
00:24:06,299 --> 00:24:08,100
important right here that we don't use

689
00:24:08,100 --> 00:24:10,320
the normal certificate validation flow

690
00:24:10,320 --> 00:24:12,419
that you would see like in TLS because

691
00:24:12,419 --> 00:24:15,179
this certificate is very likely already

692
00:24:15,179 --> 00:24:18,120
expired in that sense what we need to do

693
00:24:18,120 --> 00:24:20,700
is do most of that aspect make sure that

694
00:24:20,700 --> 00:24:22,440
it chains up to our certificate

695
00:24:22,440 --> 00:24:23,400
Authority

696
00:24:23,400 --> 00:24:25,679
but then when it comes to the time of

697
00:24:25,679 --> 00:24:28,799
validity we just need to check that the

698
00:24:28,799 --> 00:24:31,440
time stamp is inside of the validity

699
00:24:31,440 --> 00:24:33,360
window for the certificate so that's a

700
00:24:33,360 --> 00:24:34,679
modification you need to make from the

701
00:24:34,679 --> 00:24:38,039
normal you know TLS kind of verification

702
00:24:38,039 --> 00:24:39,659
so that kind of Pops off the certificate

703
00:24:39,659 --> 00:24:42,600
from the onion and then

704
00:24:42,600 --> 00:24:44,640
second last thing

705
00:24:44,640 --> 00:24:47,419
yeah go ahead

706
00:24:47,880 --> 00:24:50,159
the time yeah the timestamp was signed

707
00:24:50,159 --> 00:24:52,380
in the original bundle so if I go back

708
00:24:52,380 --> 00:24:55,140
here the signature is over the entire

709
00:24:55,140 --> 00:24:58,380
bundle which includes the time the

710
00:24:58,380 --> 00:25:01,380
signature and the certificate

711
00:25:01,380 --> 00:25:02,700
so we

712
00:25:02,700 --> 00:25:04,620
we kind of verify that the time was

713
00:25:04,620 --> 00:25:06,900
accurate insofar as we trust recore in

714
00:25:06,900 --> 00:25:10,260
the first step there yeah

715
00:25:10,260 --> 00:25:12,179
um so then we CH we checked that we

716
00:25:12,179 --> 00:25:14,640
trust the certificate Authority

717
00:25:14,640 --> 00:25:16,980
um and then second last is we Chuck the

718
00:25:16,980 --> 00:25:19,080
signature actually is valid so we take

719
00:25:19,080 --> 00:25:20,340
the artifact the public key and check

720
00:25:20,340 --> 00:25:21,900
the signature

721
00:25:21,900 --> 00:25:23,880
and after that's done we're remaining

722
00:25:23,880 --> 00:25:26,400
with the thing the user actually asks

723
00:25:26,400 --> 00:25:28,740
and they put that input in and say do I

724
00:25:28,740 --> 00:25:32,159
trust me at example.com it's just the

725
00:25:32,159 --> 00:25:34,919
identity metadata left here do I trust

726
00:25:34,919 --> 00:25:36,720
these details and those could be very

727
00:25:36,720 --> 00:25:38,539
arbitrary for your situation it could be

728
00:25:38,539 --> 00:25:42,360
AWS you know role Arn it could be

729
00:25:42,360 --> 00:25:44,159
all kinds of you know you can stick

730
00:25:44,159 --> 00:25:45,960
whatever you want in an oidc token so if

731
00:25:45,960 --> 00:25:47,640
it matters to you if this is business

732
00:25:47,640 --> 00:25:50,880
logic right it could be your own thing

733
00:25:50,880 --> 00:25:52,919
okay so let's do a couple examples I

734
00:25:52,919 --> 00:25:54,720
talked a little bit about AWS so here's

735
00:25:54,720 --> 00:25:56,400
maybe you're building things in AWS

736
00:25:56,400 --> 00:25:59,100
Cloud code build so we just need to

737
00:25:59,100 --> 00:26:00,419
choose

738
00:26:00,419 --> 00:26:03,299
three these three things we get an

739
00:26:03,299 --> 00:26:05,279
identity provider for free right we use

740
00:26:05,279 --> 00:26:07,260
AWS as one if we wanted to we don't have

741
00:26:07,260 --> 00:26:09,179
to but we can

742
00:26:09,179 --> 00:26:12,360
we could choose for instance as the

743
00:26:12,360 --> 00:26:13,860
certificate Authority

744
00:26:13,860 --> 00:26:15,419
um if you all have ever used hashicorp

745
00:26:15,419 --> 00:26:17,520
Vault you know Swiss army knife of many

746
00:26:17,520 --> 00:26:19,140
security things

747
00:26:19,140 --> 00:26:22,140
um you can use AWS as an auth method you

748
00:26:22,140 --> 00:26:23,760
know so you can authenticate using AWS

749
00:26:23,760 --> 00:26:25,740
identities and then you can exchange

750
00:26:25,740 --> 00:26:28,380
that for a certificate secret they will

751
00:26:28,380 --> 00:26:30,120
call them so you can issue short-lived

752
00:26:30,120 --> 00:26:31,380
certificates that would totally fit this

753
00:26:31,380 --> 00:26:33,299
need and then the last bit is you do

754
00:26:33,299 --> 00:26:34,380
need to choose

755
00:26:34,380 --> 00:26:36,659
timestamping Authority so six store uh

756
00:26:36,659 --> 00:26:38,520
has an open source one that you could

757
00:26:38,520 --> 00:26:40,679
just grab off the shelf and use for this

758
00:26:40,679 --> 00:26:42,960
purpose basically or you could choose

759
00:26:42,960 --> 00:26:44,760
recore here or you could try to find

760
00:26:44,760 --> 00:26:46,260
another one that is sort of I think the

761
00:26:46,260 --> 00:26:49,020
RFC is 3161 that's time stamping spec

762
00:26:49,020 --> 00:26:50,580
that you could use

763
00:26:50,580 --> 00:26:53,779
um but there's there's options

764
00:26:54,779 --> 00:26:57,299
let's think about maybe signing with a

765
00:26:57,299 --> 00:26:58,679
corporate identity provider maybe you

766
00:26:58,679 --> 00:27:00,600
want to sign git commits this way and

767
00:27:00,600 --> 00:27:02,880
you want to use like your OCTA or

768
00:27:02,880 --> 00:27:05,520
something okay so if you have octave you

769
00:27:05,520 --> 00:27:07,320
can create most of these corporate

770
00:27:07,320 --> 00:27:08,820
identity providers have you know the

771
00:27:08,820 --> 00:27:11,640
capacity to make an oidc compatible app

772
00:27:11,640 --> 00:27:13,799
you know that'll speak oidc After People

773
00:27:13,799 --> 00:27:14,880
log in

774
00:27:14,880 --> 00:27:16,559
and a great option here too another open

775
00:27:16,559 --> 00:27:19,260
source one is to use step CA so step CA

776
00:27:19,260 --> 00:27:21,539
has these uh the notion of a provisioner

777
00:27:21,539 --> 00:27:23,820
which credentials can I exchange for

778
00:27:23,820 --> 00:27:25,260
which certificates

779
00:27:25,260 --> 00:27:27,659
and certificate templating so you can

780
00:27:27,659 --> 00:27:30,299
give step CA an oidc token from your

781
00:27:30,299 --> 00:27:32,880
OCTA app or from any other place and

782
00:27:32,880 --> 00:27:35,159
templating the values from the from the

783
00:27:35,159 --> 00:27:37,980
token into extensions inside of your

784
00:27:37,980 --> 00:27:39,360
certificate so that'll give you that

785
00:27:39,360 --> 00:27:41,580
mapping into your certificate details so

786
00:27:41,580 --> 00:27:43,500
they're called provisioners with step CA

787
00:27:43,500 --> 00:27:46,620
and then the templating is attached to a

788
00:27:46,620 --> 00:27:48,720
provisioner and then again you just kind

789
00:27:48,720 --> 00:27:50,520
of choose a Time stamping Authority

790
00:27:50,520 --> 00:27:52,200
maybe you care about signature

791
00:27:52,200 --> 00:27:53,520
transparency in this case so we'll

792
00:27:53,520 --> 00:27:55,620
choose recore so this is the kind of

793
00:27:55,620 --> 00:27:57,600
feeling to get the magical three things

794
00:27:57,600 --> 00:28:00,120
together and get this keyless kind of

795
00:28:00,120 --> 00:28:01,559
flow

796
00:28:01,559 --> 00:28:03,360
okay I'm gonna give good news first

797
00:28:03,360 --> 00:28:05,520
which means you know that the bad news

798
00:28:05,520 --> 00:28:06,600
is coming

799
00:28:06,600 --> 00:28:08,520
um you can keep signing with cosine

800
00:28:08,520 --> 00:28:09,840
um it's already got flags for a

801
00:28:09,840 --> 00:28:11,460
situation just like this

802
00:28:11,460 --> 00:28:13,200
um if you're using step ca for instance

803
00:28:13,200 --> 00:28:15,299
you can get a certificate with step CA

804
00:28:15,299 --> 00:28:17,159
certificate here's you know grabbing one

805
00:28:17,159 --> 00:28:19,140
for me at example.com

806
00:28:19,140 --> 00:28:20,880
um cosine needs to have a particular

807
00:28:20,880 --> 00:28:23,039
format for the private keys so you use

808
00:28:23,039 --> 00:28:25,799
this import uh private key command to

809
00:28:25,799 --> 00:28:28,200
structure it correctly and then in

810
00:28:28,200 --> 00:28:30,659
signing you just do cosine sine you know

811
00:28:30,659 --> 00:28:32,640
you point to the private key which you

812
00:28:32,640 --> 00:28:34,500
can throw out right after signing so

813
00:28:34,500 --> 00:28:36,659
that's the keyless aspect you point the

814
00:28:36,659 --> 00:28:38,279
certificate you have and then you have

815
00:28:38,279 --> 00:28:39,900
to have a root bundle that chains up to

816
00:28:39,900 --> 00:28:41,580
your to your root and then point to your

817
00:28:41,580 --> 00:28:43,679
image

818
00:28:43,679 --> 00:28:44,520
um

819
00:28:44,520 --> 00:28:46,200
yeah

820
00:28:46,200 --> 00:28:48,600
the bad news is that we can't verify

821
00:28:48,600 --> 00:28:51,659
very easily in cosine right now cosine's

822
00:28:51,659 --> 00:28:53,340
verification really understands

823
00:28:53,340 --> 00:28:56,340
specifically falsio at this moment so

824
00:28:56,340 --> 00:28:57,659
you can imagine if you stopped all kinds

825
00:28:57,659 --> 00:29:00,120
of arbitrary like extensions inside of

826
00:29:00,120 --> 00:29:01,919
those certificates the very last

827
00:29:01,919 --> 00:29:04,440
unpeeling of the onion it would be like

828
00:29:04,440 --> 00:29:06,960
I'm not really sure what to do here

829
00:29:06,960 --> 00:29:08,100
um

830
00:29:08,100 --> 00:29:09,659
so you'd kind of you need to write your

831
00:29:09,659 --> 00:29:11,520
own verification logic and that's the

832
00:29:11,520 --> 00:29:13,559
pain point right now unless you make

833
00:29:13,559 --> 00:29:16,080
your certificates very similarly

834
00:29:16,080 --> 00:29:18,720
structured to what folsio is doing and

835
00:29:18,720 --> 00:29:21,000
you can almost pull that off but if you

836
00:29:21,000 --> 00:29:22,740
have arbitrary metadata you can't really

837
00:29:22,740 --> 00:29:24,120
get there right and that's probably why

838
00:29:24,120 --> 00:29:26,460
you're doing this in the first place

839
00:29:26,460 --> 00:29:28,559
um but the future is brighter there's a

840
00:29:28,559 --> 00:29:30,059
couple rough plans to make this just

841
00:29:30,059 --> 00:29:32,159
extensible so the I think the dream

842
00:29:32,159 --> 00:29:34,380
would be for everyone to have the first

843
00:29:34,380 --> 00:29:35,940
parts of the keyless bit you know the

844
00:29:35,940 --> 00:29:38,340
time stamping bundle being verified

845
00:29:38,340 --> 00:29:40,380
um the certificate being verified and

846
00:29:40,380 --> 00:29:42,600
then all of that just be shared inside

847
00:29:42,600 --> 00:29:44,820
of coastline's verification logic and

848
00:29:44,820 --> 00:29:46,380
then I think what some of the the hope

849
00:29:46,380 --> 00:29:48,600
is here is just to have an arbitrary

850
00:29:48,600 --> 00:29:51,179
Rigo policy or cue or whatever you love

851
00:29:51,179 --> 00:29:53,520
for your verification language at the

852
00:29:53,520 --> 00:29:55,500
end to verify the really particular

853
00:29:55,500 --> 00:29:58,200
details of your certificate structure so

854
00:29:58,200 --> 00:29:59,820
that people can bring their own pki and

855
00:29:59,820 --> 00:30:02,460
get the same you know really unique flow

856
00:30:02,460 --> 00:30:03,179
right

857
00:30:03,179 --> 00:30:05,159
so come join the effort

858
00:30:05,159 --> 00:30:06,840
um we're you know obviously looking for

859
00:30:06,840 --> 00:30:08,760
contributors at all times and we can if

860
00:30:08,760 --> 00:30:10,919
we write the logic to verify once then

861
00:30:10,919 --> 00:30:12,539
then we all share it and we can all

862
00:30:12,539 --> 00:30:14,940
audit it together right

863
00:30:14,940 --> 00:30:17,100
um and then just finally a couple of key

864
00:30:17,100 --> 00:30:19,500
takeaway thoughts

865
00:30:19,500 --> 00:30:21,360
please stop managing Keys especially if

866
00:30:21,360 --> 00:30:23,820
you're writing a new code signing

867
00:30:23,820 --> 00:30:25,799
infrastructure right now or if you're if

868
00:30:25,799 --> 00:30:27,419
you're Consulting with people

869
00:30:27,419 --> 00:30:29,279
it's going to cause you pain in the

870
00:30:29,279 --> 00:30:31,140
future and you can take off the shelf

871
00:30:31,140 --> 00:30:34,140
components and and do better already

872
00:30:34,140 --> 00:30:35,880
um and not given this pattern of trying

873
00:30:35,880 --> 00:30:37,320
to worry about where you've put all your

874
00:30:37,320 --> 00:30:39,600
private keys and then if you're in this

875
00:30:39,600 --> 00:30:41,100
pattern or you're even going to use Sig

876
00:30:41,100 --> 00:30:43,140
store start thinking now about the

877
00:30:43,140 --> 00:30:45,299
identity provider that you're going to

878
00:30:45,299 --> 00:30:48,600
use and and to to sign with and and

879
00:30:48,600 --> 00:30:51,120
hence to verify with so is there

880
00:30:51,120 --> 00:30:52,559
actually a strong sense of identity

881
00:30:52,559 --> 00:30:54,480
inside your CI system

882
00:30:54,480 --> 00:30:55,860
um that's the biggest one because it's

883
00:30:55,860 --> 00:30:57,779
not true everywhere right

884
00:30:57,779 --> 00:30:59,460
and then I guess the last one is come

885
00:30:59,460 --> 00:31:02,159
get involved uh with making verification

886
00:31:02,159 --> 00:31:05,279
for just bring your own pki uh shared

887
00:31:05,279 --> 00:31:06,840
Upstream essentially so that it's easier

888
00:31:06,840 --> 00:31:08,159
we don't have to write the same

889
00:31:08,159 --> 00:31:10,140
verification logic

890
00:31:10,140 --> 00:31:13,399
thank you that's it

891
00:31:18,020 --> 00:31:22,399
a couple minutes if anyone has questions

892
00:31:24,360 --> 00:31:27,360
cool

893
00:31:34,140 --> 00:31:36,740
yep

894
00:31:41,820 --> 00:31:44,418
yep

895
00:31:49,320 --> 00:31:52,460
and then the other direction

896
00:31:53,279 --> 00:31:54,179
the

897
00:31:54,179 --> 00:31:55,740
fixer signature

898
00:31:55,740 --> 00:31:58,020
as an attacker for fire so that when

899
00:31:58,020 --> 00:32:01,799
that comes upwards uh

900
00:32:08,580 --> 00:32:10,919
yeah so we're working in both directions

901
00:32:10,919 --> 00:32:12,960
and I just wondered if you have any

902
00:32:12,960 --> 00:32:15,059
advice if that is all functional right

903
00:32:15,059 --> 00:32:17,178
now

904
00:32:19,700 --> 00:32:22,679
yeah I hear you

905
00:32:22,679 --> 00:32:24,480
I hear you I think that's part of the

906
00:32:24,480 --> 00:32:25,799
reason some people look for something

907
00:32:25,799 --> 00:32:27,899
else is that folsio in particular can be

908
00:32:27,899 --> 00:32:29,940
a little rigid you know it's not meant

909
00:32:29,940 --> 00:32:31,440
to be this extensible system that can

910
00:32:31,440 --> 00:32:33,360
take an arbitrary identity and exchange

911
00:32:33,360 --> 00:32:36,240
it step C was one that I found kind of

912
00:32:36,240 --> 00:32:39,059
would take whatever and it worked worked

913
00:32:39,059 --> 00:32:40,679
really well and I could test that way

914
00:32:40,679 --> 00:32:42,480
but I think that there's something that

915
00:32:42,480 --> 00:32:44,760
we can all do better here to take

916
00:32:44,760 --> 00:32:46,080
hopefully with more of these

917
00:32:46,080 --> 00:32:48,299
implementations I think we need frankly

918
00:32:48,299 --> 00:32:51,059
some standards on that structure so that

919
00:32:51,059 --> 00:32:54,000
when any kind of verifier sees a keyless

920
00:32:54,000 --> 00:32:55,320
looking bundle

921
00:32:55,320 --> 00:32:57,539
you know the verification is is clear

922
00:32:57,539 --> 00:32:59,460
and then I think the other one is

923
00:32:59,460 --> 00:33:01,320
I don't know if we have and I think that

924
00:33:01,320 --> 00:33:03,720
we should kind of have a bit more of a

925
00:33:03,720 --> 00:33:05,460
what is the shape of exchanging

926
00:33:05,460 --> 00:33:07,620
something that is not oidc for a

927
00:33:07,620 --> 00:33:09,320
certificate

928
00:33:09,320 --> 00:33:11,760
and what's that look like essentially

929
00:33:11,760 --> 00:33:14,279
yeah yeah I I don't know if I have great

930
00:33:14,279 --> 00:33:15,600
advice for you other than to try

931
00:33:15,600 --> 00:33:17,039
different certificate authorities to

932
00:33:17,039 --> 00:33:18,960
make it at least easier to prototype I

933
00:33:18,960 --> 00:33:21,899
think because it is tricky it is awesome

934
00:33:21,899 --> 00:33:23,059
yeah

935
00:33:23,059 --> 00:33:26,460
yeah is that using the JWT as Fizz or

936
00:33:26,460 --> 00:33:30,299
x509 that you're trying to do um

937
00:33:30,299 --> 00:33:32,159
yeah exactly so and that's one that's

938
00:33:32,159 --> 00:33:34,559
like even further away from Easy right

939
00:33:34,559 --> 00:33:37,460
now I think in fulsio

940
00:33:37,799 --> 00:33:40,080
right right

941
00:33:40,080 --> 00:33:41,880
cool cool

942
00:33:41,880 --> 00:33:45,500
any other questions yeah thank you

943
00:33:46,860 --> 00:33:49,559
all right well I'll be around and uh you

944
00:33:49,559 --> 00:33:50,640
know where to find me you'll see these

945
00:33:50,640 --> 00:33:52,200
slides up so thank you so much for

946
00:33:52,200 --> 00:33:54,919
coming cheers

