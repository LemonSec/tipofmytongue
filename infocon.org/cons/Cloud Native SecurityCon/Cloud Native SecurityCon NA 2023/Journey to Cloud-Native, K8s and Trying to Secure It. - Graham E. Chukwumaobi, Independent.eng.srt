1
00:00:00,000 --> 00:00:02,639
good morning everybody

2
00:00:02,639 --> 00:00:04,500
nice to meet you guys

3
00:00:04,500 --> 00:00:07,799
my name is gray I'm chukumo B

4
00:00:07,799 --> 00:00:10,160
um that's my Twitter handle

5
00:00:10,160 --> 00:00:13,920
I'm not I think I've barely been on

6
00:00:13,920 --> 00:00:15,179
Facebook for a while so that's why I

7
00:00:15,179 --> 00:00:16,740
didn't bother putting that ball yeah you

8
00:00:16,740 --> 00:00:18,720
can find me on Facebook with my name and

9
00:00:18,720 --> 00:00:21,000
on Instagram so

10
00:00:21,000 --> 00:00:23,279
um today I'm going to be talking to you

11
00:00:23,279 --> 00:00:26,599
guys about my journey to Cloud native

12
00:00:26,599 --> 00:00:30,060
kubernetes and trying to secure it so

13
00:00:30,060 --> 00:00:31,980
this talk is you know I'll say for the

14
00:00:31,980 --> 00:00:34,620
newbies people trying to delve you know

15
00:00:34,620 --> 00:00:37,380
into the whole Cloud native bandwagon

16
00:00:37,380 --> 00:00:39,899
the ecosystem and then just to give you

17
00:00:39,899 --> 00:00:42,420
like a route on how to go about learning

18
00:00:42,420 --> 00:00:45,239
these Technologies so for me it all

19
00:00:45,239 --> 00:00:48,300
started you know with the workshop

20
00:00:48,300 --> 00:00:49,980
um when I was still in uni during my

21
00:00:49,980 --> 00:00:52,379
final year studying software engineering

22
00:00:52,379 --> 00:00:55,739
at Cardiff met so and I think it was six

23
00:00:55,739 --> 00:00:57,840
of my friends we had like a friend group

24
00:00:57,840 --> 00:01:00,360
where we try you know to attend as much

25
00:01:00,360 --> 00:01:04,199
workshops and seminars as possible you

26
00:01:04,199 --> 00:01:06,299
know possibly ones that will give us

27
00:01:06,299 --> 00:01:07,920
some badge to add to our LinkedIn

28
00:01:07,920 --> 00:01:09,840
profile to help us with our job search

29
00:01:09,840 --> 00:01:12,119
and job hunt so that was how we came

30
00:01:12,119 --> 00:01:14,220
across you know the kubernetes workshops

31
00:01:14,220 --> 00:01:17,100
and you know we all jumped on it

32
00:01:17,100 --> 00:01:20,100
and then you know it was I'll say it was

33
00:01:20,100 --> 00:01:23,100
a good experience then even though you

34
00:01:23,100 --> 00:01:25,680
know everything was so vague and you

35
00:01:25,680 --> 00:01:29,820
know so alien to us at the time so but

36
00:01:29,820 --> 00:01:31,799
they instructed a very good job you know

37
00:01:31,799 --> 00:01:34,759
starting to explain

38
00:01:34,920 --> 00:01:36,720
um give us an overview about the

39
00:01:36,720 --> 00:01:38,880
different architecture and the

40
00:01:38,880 --> 00:01:41,100
monolithic architecture and the micro

41
00:01:41,100 --> 00:01:43,439
service architecture so for me at the

42
00:01:43,439 --> 00:01:45,780
time I got to you know understand that

43
00:01:45,780 --> 00:01:48,299
all the soil I've been developing you

44
00:01:48,299 --> 00:01:49,680
know using the monolithic architecture

45
00:01:49,680 --> 00:01:52,320
without even now knowing about it you

46
00:01:52,320 --> 00:01:55,259
know went on after the research to after

47
00:01:55,259 --> 00:01:57,180
the workshop to do my own research to

48
00:01:57,180 --> 00:01:59,880
really get to understand this different

49
00:01:59,880 --> 00:02:03,420
architectures so you know for me I was

50
00:02:03,420 --> 00:02:06,060
like if we've been developing using this

51
00:02:06,060 --> 00:02:07,380
architecture and everything has been

52
00:02:07,380 --> 00:02:10,500
working fine so why the need for the

53
00:02:10,500 --> 00:02:12,900
whole microservices and kubernetes

54
00:02:12,900 --> 00:02:14,819
because everything sounded so difficult

55
00:02:14,819 --> 00:02:18,120
so I'm just going to touch on some of

56
00:02:18,120 --> 00:02:21,180
the advantages of Monolithic

57
00:02:21,180 --> 00:02:22,739
architecture and you know the

58
00:02:22,739 --> 00:02:25,379
disadvantages and then we'll move from

59
00:02:25,379 --> 00:02:27,540
there so I guess one of the key

60
00:02:27,540 --> 00:02:29,700
advantages of the monolithic

61
00:02:29,700 --> 00:02:31,800
architecture will be that you know it's

62
00:02:31,800 --> 00:02:34,739
very easy to develop you know you could

63
00:02:34,739 --> 00:02:36,900
develop an entire application and get it

64
00:02:36,900 --> 00:02:39,660
to Market you know very quickly compared

65
00:02:39,660 --> 00:02:43,440
to microservices it's very easy for a

66
00:02:43,440 --> 00:02:46,200
team to pull together and build an

67
00:02:46,200 --> 00:02:48,360
executable app using this architecture

68
00:02:48,360 --> 00:02:52,200
and then it's also simple to deploy it's

69
00:02:52,200 --> 00:02:54,620
not as complex as your microservice

70
00:02:54,620 --> 00:02:57,720
technology multi-complica applications

71
00:02:57,720 --> 00:03:01,260
have fewer parts so so there are fewer

72
00:03:01,260 --> 00:03:04,080
components to manage and to fix and you

73
00:03:04,080 --> 00:03:05,640
know all in all everything is

74
00:03:05,640 --> 00:03:09,060
self-contained in and it makes it easier

75
00:03:09,060 --> 00:03:13,440
to deploy your application sorry

76
00:03:13,440 --> 00:03:16,739
and then um uncomplicated testing and

77
00:03:16,739 --> 00:03:19,920
debugging testing and debugging is you

78
00:03:19,920 --> 00:03:22,140
know a very big part of the debate of

79
00:03:22,140 --> 00:03:25,080
Monolithic architectures versus the

80
00:03:25,080 --> 00:03:27,599
microservice architecture debates you

81
00:03:27,599 --> 00:03:29,340
have to test all the parts of an

82
00:03:29,340 --> 00:03:31,319
applications of an application

83
00:03:31,319 --> 00:03:34,560
separately in regards to your

84
00:03:34,560 --> 00:03:37,200
microservices you have to test that they

85
00:03:37,200 --> 00:03:40,379
work properly and also test that each

86
00:03:40,379 --> 00:03:42,780
service fits together and communicates

87
00:03:42,780 --> 00:03:45,060
properly and then you also have the case

88
00:03:45,060 --> 00:03:46,500
of

89
00:03:46,500 --> 00:03:50,159
um cash caching dependencies and data

90
00:03:50,159 --> 00:03:52,379
assets forgive my pronunciation English

91
00:03:52,379 --> 00:03:54,900
is not my first language so you know

92
00:03:54,900 --> 00:03:58,019
that but with regards to monolithic

93
00:03:58,019 --> 00:04:00,299
architecture these these are not the

94
00:04:00,299 --> 00:04:02,400
case because the application is fitted

95
00:04:02,400 --> 00:04:04,920
as a single unit and works together as a

96
00:04:04,920 --> 00:04:06,540
whole you can you know do everything

97
00:04:06,540 --> 00:04:09,720
quickly and easily from a central login

98
00:04:09,720 --> 00:04:12,120
system but it also has its own

99
00:04:12,120 --> 00:04:14,720
disadvantage in the sense that

100
00:04:14,720 --> 00:04:18,418
you it's less scalable so it's the

101
00:04:18,418 --> 00:04:21,120
monolithic architecture because the

102
00:04:21,120 --> 00:04:23,639
software is tightly coupled you know it

103
00:04:23,639 --> 00:04:26,100
can be very difficult to like scale the

104
00:04:26,100 --> 00:04:28,259
software for for instance if you wanted

105
00:04:28,259 --> 00:04:29,580
to like

106
00:04:29,580 --> 00:04:33,060
um Advance a particular feature or part

107
00:04:33,060 --> 00:04:35,280
of your application you literally have

108
00:04:35,280 --> 00:04:37,020
to take down you know the whole

109
00:04:37,020 --> 00:04:39,660
application just to alter a single

110
00:04:39,660 --> 00:04:42,360
feature it's difficult to adapt to new

111
00:04:42,360 --> 00:04:43,500
technology

112
00:04:43,500 --> 00:04:45,840
as mentioned

113
00:04:45,840 --> 00:04:48,120
um it's it's a tightly coupled

114
00:04:48,120 --> 00:04:50,940
architecture so if for instance you take

115
00:04:50,940 --> 00:04:54,180
a music application for example where

116
00:04:54,180 --> 00:04:56,460
the you have your catalog is tightly

117
00:04:56,460 --> 00:04:58,680
coupled to like the purchase and the the

118
00:04:58,680 --> 00:04:59,900
Play services

119
00:04:59,900 --> 00:05:03,680
if you wanted to like um just maybe

120
00:05:03,680 --> 00:05:06,419
alter the features of the catalog or the

121
00:05:06,419 --> 00:05:08,520
play purchase like I said earlier you

122
00:05:08,520 --> 00:05:10,560
still have to like you know take the

123
00:05:10,560 --> 00:05:13,020
whole application down just to be able

124
00:05:13,020 --> 00:05:16,139
to alter that feature and then there is

125
00:05:16,139 --> 00:05:18,660
very high dependencies between the

126
00:05:18,660 --> 00:05:22,680
functionalities of the monolithic

127
00:05:22,680 --> 00:05:25,860
architecture so applications can run

128
00:05:25,860 --> 00:05:28,199
into software engineering downtime and

129
00:05:28,199 --> 00:05:31,020
difficulties if you go back to the music

130
00:05:31,020 --> 00:05:34,020
app for example because the catalog and

131
00:05:34,020 --> 00:05:35,639
the player and the purchase function are

132
00:05:35,639 --> 00:05:38,780
so dependent upon each other

133
00:05:38,780 --> 00:05:41,880
again if you know one one of them should

134
00:05:41,880 --> 00:05:44,160
go down the whole application will be

135
00:05:44,160 --> 00:05:45,419
affected

136
00:05:45,419 --> 00:05:49,080
so but in with regards to the

137
00:05:49,080 --> 00:05:51,419
microservice architecture which is you

138
00:05:51,419 --> 00:05:53,699
know basically a style of a large

139
00:05:53,699 --> 00:05:55,440
application built as a collection of

140
00:05:55,440 --> 00:05:58,320
small independently Deployable Services

141
00:05:58,320 --> 00:06:01,259
as you can see you know in with this

142
00:06:01,259 --> 00:06:03,600
example so these Services communicate

143
00:06:03,600 --> 00:06:06,840
with each other through apis and are

144
00:06:06,840 --> 00:06:09,539
designed to be Loosely coupled you know

145
00:06:09,539 --> 00:06:11,820
so that they can be developed and tested

146
00:06:11,820 --> 00:06:14,520
and deployed independently

147
00:06:14,520 --> 00:06:15,240
um

148
00:06:15,240 --> 00:06:17,580
microservice architecture also enables

149
00:06:17,580 --> 00:06:20,400
faster development and scalability and

150
00:06:20,400 --> 00:06:23,460
makes it easier to evolve and maintain

151
00:06:23,460 --> 00:06:25,740
your application over time because you

152
00:06:25,740 --> 00:06:27,419
know as you can see with the different

153
00:06:27,419 --> 00:06:29,940
Services each service can be developed

154
00:06:29,940 --> 00:06:32,340
or you know managed by a different team

155
00:06:32,340 --> 00:06:34,740
and they can make use of what that

156
00:06:34,740 --> 00:06:36,720
whatever technology that they are very

157
00:06:36,720 --> 00:06:39,479
comfortable with and then you know it

158
00:06:39,479 --> 00:06:41,699
also has his course comes with his own

159
00:06:41,699 --> 00:06:44,660
pros and cons you know regards to

160
00:06:44,660 --> 00:06:48,120
microservices it's very scalable it's

161
00:06:48,120 --> 00:06:50,520
easier to scale each micro service can

162
00:06:50,520 --> 00:06:53,759
be scaled individually leading to better

163
00:06:53,759 --> 00:06:56,400
resource utilization and improve

164
00:06:56,400 --> 00:06:58,979
performance it's very resilient in

165
00:06:58,979 --> 00:07:00,900
informed micro service Fields it doesn't

166
00:07:00,900 --> 00:07:04,020
bring down the entire system and the

167
00:07:04,020 --> 00:07:06,139
other parts you know keep functioning as

168
00:07:06,139 --> 00:07:08,539
intended

169
00:07:08,539 --> 00:07:12,000
it improves the deployments of your

170
00:07:12,000 --> 00:07:13,979
application microservice can be deployed

171
00:07:13,979 --> 00:07:17,280
independently in to allow it for faster

172
00:07:17,280 --> 00:07:20,340
and more frequent release it's flexible

173
00:07:20,340 --> 00:07:23,220
allows for greater flexibility in

174
00:07:23,220 --> 00:07:25,680
choosing technology Stacks so like I

175
00:07:25,680 --> 00:07:29,240
said earlier each of the services can be

176
00:07:29,240 --> 00:07:33,060
created using whatever technology Stacks

177
00:07:33,060 --> 00:07:34,860
that the team or the developer is

178
00:07:34,860 --> 00:07:37,620
comfortable with but it also has its own

179
00:07:37,620 --> 00:07:40,199
disadvantages you know which includes

180
00:07:40,199 --> 00:07:43,139
complexity microservice architecture at

181
00:07:43,139 --> 00:07:45,060
you know complexity in terms of

182
00:07:45,060 --> 00:07:48,979
communicating and testing and deployment

183
00:07:48,979 --> 00:07:51,780
dependency management between the micro

184
00:07:51,780 --> 00:07:54,599
Services need to be managed carefully to

185
00:07:54,599 --> 00:07:57,780
avoid errors and delays and we also you

186
00:07:57,780 --> 00:07:59,160
know comes with the issue of network

187
00:07:59,160 --> 00:08:01,919
latency increased Network calls between

188
00:08:01,919 --> 00:08:03,720
these Services can lead to slower

189
00:08:03,720 --> 00:08:08,039
performance and debugging is also more

190
00:08:08,039 --> 00:08:11,460
complex in microservices with and

191
00:08:11,460 --> 00:08:13,919
environment issues can span between

192
00:08:13,919 --> 00:08:17,099
multiple service and also testing micro

193
00:08:17,099 --> 00:08:19,740
a micro service you know application can

194
00:08:19,740 --> 00:08:21,840
be more demanding you know you have to

195
00:08:21,840 --> 00:08:24,840
test the individual service on on their

196
00:08:24,840 --> 00:08:26,639
own and also test that they communicate

197
00:08:26,639 --> 00:08:30,000
with each other as intended so when

198
00:08:30,000 --> 00:08:32,458
stacked up together side by side you

199
00:08:32,458 --> 00:08:34,740
start to understand you know why

200
00:08:34,740 --> 00:08:36,958
microservice started becoming you know

201
00:08:36,958 --> 00:08:39,839
more popular uh for me you know being

202
00:08:39,839 --> 00:08:41,940
I'll say relatively new within the

203
00:08:41,940 --> 00:08:44,820
industry I can't really tell how far you

204
00:08:44,820 --> 00:08:46,740
know back you know we could go with

205
00:08:46,740 --> 00:08:48,839
microservices but

206
00:08:48,839 --> 00:08:50,519
um in some real monolithic application

207
00:08:50,519 --> 00:08:54,120
is built as a single unified unit while

208
00:08:54,120 --> 00:08:56,160
you know microservices is a collection

209
00:08:56,160 --> 00:08:58,980
of smaller independently deployables and

210
00:08:58,980 --> 00:09:02,160
service so in the case of the example we

211
00:09:02,160 --> 00:09:04,440
gave above for instance if you wanted to

212
00:09:04,440 --> 00:09:07,080
go about you know um program or

213
00:09:07,080 --> 00:09:09,240
developing such service

214
00:09:09,240 --> 00:09:11,700
you're going to have like um your rest

215
00:09:11,700 --> 00:09:15,420
API crowd for the account DB or the user

216
00:09:15,420 --> 00:09:17,760
DB whatever case it may be you know

217
00:09:17,760 --> 00:09:20,100
programmed like in this case I just you

218
00:09:20,100 --> 00:09:21,540
know try to

219
00:09:21,540 --> 00:09:23,940
um sketch or like call it a draft code

220
00:09:23,940 --> 00:09:26,399
for you know the account DB using fast

221
00:09:26,399 --> 00:09:29,700
API you also have your rest API crowd

222
00:09:29,700 --> 00:09:32,279
for the event inventory

223
00:09:32,279 --> 00:09:35,820
um rest API and then for the shipping

224
00:09:35,820 --> 00:09:37,680
too so

225
00:09:37,680 --> 00:09:40,920
um as you can see here in the project

226
00:09:40,920 --> 00:09:45,540
directory all the different service or

227
00:09:45,540 --> 00:09:48,000
rest API are in their own directory this

228
00:09:48,000 --> 00:09:50,459
is just to show you know that this

229
00:09:50,459 --> 00:09:52,260
service can be developed by a different

230
00:09:52,260 --> 00:09:54,240
team on its own and you know be a

231
00:09:54,240 --> 00:09:56,519
full-fledged application on its own you

232
00:09:56,519 --> 00:09:59,940
know but as long as like the design or

233
00:09:59,940 --> 00:10:02,820
the requirements for the application is

234
00:10:02,820 --> 00:10:05,459
followed and then the apis are able to

235
00:10:05,459 --> 00:10:07,740
communicate with each other both on

236
00:10:07,740 --> 00:10:10,019
Endeavor and in prod so as you can see

237
00:10:10,019 --> 00:10:12,480
for each service in its own directory

238
00:10:12,480 --> 00:10:15,600
has its own requirements.txt file its

239
00:10:15,600 --> 00:10:18,300
own Docker file but in this case you

240
00:10:18,300 --> 00:10:20,399
also have your Docker file for the whole

241
00:10:20,399 --> 00:10:22,019
application and your Docker compose file

242
00:10:22,019 --> 00:10:23,820
or you know going to explaining those

243
00:10:23,820 --> 00:10:25,860
down the slide

244
00:10:25,860 --> 00:10:29,339
so where does cloud native come you know

245
00:10:29,339 --> 00:10:31,980
into this whole picture

246
00:10:31,980 --> 00:10:36,300
Cloud native at first of all is an

247
00:10:36,300 --> 00:10:38,160
approach of building and running

248
00:10:38,160 --> 00:10:40,980
applications and services that take

249
00:10:40,980 --> 00:10:43,019
advantage of the features and

250
00:10:43,019 --> 00:10:45,060
capabilities of cloud computing

251
00:10:45,060 --> 00:10:47,700
platforms the cloud native approach

252
00:10:47,700 --> 00:10:50,640
focuses on using some of the following

253
00:10:50,640 --> 00:10:52,740
principles we've mentioned already like

254
00:10:52,740 --> 00:10:55,920
your microservices and some other

255
00:10:55,920 --> 00:10:58,380
features like containers like which is

256
00:10:58,380 --> 00:11:00,959
basically packaging applications and

257
00:11:00,959 --> 00:11:02,880
their dependencies into lightweight

258
00:11:02,880 --> 00:11:05,579
portable containers which can run

259
00:11:05,579 --> 00:11:07,320
consistently across different

260
00:11:07,320 --> 00:11:10,320
environments and Cloud native also

261
00:11:10,320 --> 00:11:13,200
focuses on automation automating the

262
00:11:13,200 --> 00:11:15,300
deployment scaling and management of

263
00:11:15,300 --> 00:11:18,740
applications and services

264
00:11:18,920 --> 00:11:21,839
observability sorry monitoring and

265
00:11:21,839 --> 00:11:24,000
collecting data from applications and

266
00:11:24,000 --> 00:11:27,180
services to gain insights about their

267
00:11:27,180 --> 00:11:30,060
behaviors and performance and also it

268
00:11:30,060 --> 00:11:32,579
also encourages resilience and designing

269
00:11:32,579 --> 00:11:35,040
applications to be highly available and

270
00:11:35,040 --> 00:11:37,680
withstand failure issues so but before

271
00:11:37,680 --> 00:11:40,440
we go into details with container

272
00:11:40,440 --> 00:11:42,839
containerization of application I'll

273
00:11:42,839 --> 00:11:45,959
just like to like touch on I'm not

274
00:11:45,959 --> 00:11:48,060
really go into full details but just you

275
00:11:48,060 --> 00:11:49,860
know I'm so you can see the difference

276
00:11:49,860 --> 00:11:52,019
between VM virtual machines and

277
00:11:52,019 --> 00:11:54,660
containerization because VMS was the

278
00:11:54,660 --> 00:11:56,360
solution before

279
00:11:56,360 --> 00:12:00,060
containerization became a thing so VMS

280
00:12:00,060 --> 00:12:02,519
is basically a software implementation

281
00:12:02,519 --> 00:12:05,459
of a physical machine which allows

282
00:12:05,459 --> 00:12:08,579
multiple operating systems to run on a

283
00:12:08,579 --> 00:12:12,240
single host each VM runs on its own

284
00:12:12,240 --> 00:12:14,579
operating system which provides an

285
00:12:14,579 --> 00:12:17,220
isolated environment for your

286
00:12:17,220 --> 00:12:18,720
application to run

287
00:12:18,720 --> 00:12:21,620
while the container is a lightweight

288
00:12:21,620 --> 00:12:24,480
Standalone executable package that

289
00:12:24,480 --> 00:12:27,600
contains everything an application

290
00:12:27,600 --> 00:12:30,300
needs to run including your code your

291
00:12:30,300 --> 00:12:33,000
runtime your system tools your libraries

292
00:12:33,000 --> 00:12:36,540
and your settings containers uses the

293
00:12:36,540 --> 00:12:39,899
host operating systems Canal which makes

294
00:12:39,899 --> 00:12:41,820
them more lightweight and efficient than

295
00:12:41,820 --> 00:12:45,420
VMS so in summary VMS a VM is a

296
00:12:45,420 --> 00:12:47,420
full-fledged and virtualized environment

297
00:12:47,420 --> 00:12:50,220
while your container is a lightweight

298
00:12:50,220 --> 00:12:52,380
isolated environment that just shares

299
00:12:52,380 --> 00:12:56,519
the host canals operating system so in

300
00:12:56,519 --> 00:13:00,600
in this case from our example a micro

301
00:13:00,600 --> 00:13:03,540
service application you'll see that each

302
00:13:03,540 --> 00:13:06,899
of the surveys it's on its own separate

303
00:13:06,899 --> 00:13:09,120
container specified by the black

304
00:13:09,120 --> 00:13:12,420
rectangle so containerization has really

305
00:13:12,420 --> 00:13:15,360
become a popular approach for packaging

306
00:13:15,360 --> 00:13:17,220
and deploying applications in recent

307
00:13:17,220 --> 00:13:19,980
years it offers several benefits like

308
00:13:19,980 --> 00:13:23,339
portability containers can run on any

309
00:13:23,339 --> 00:13:25,740
system as long as that system supports

310
00:13:25,740 --> 00:13:28,519
containerization technology in makes it

311
00:13:28,519 --> 00:13:31,079
very easy to move application between

312
00:13:31,079 --> 00:13:33,420
different environments such as from

313
00:13:33,420 --> 00:13:35,940
development to production containers

314
00:13:35,940 --> 00:13:39,779
support isolation they provide a level

315
00:13:39,779 --> 00:13:42,000
of isolation for applications which

316
00:13:42,000 --> 00:13:44,339
means that they are isolated from each

317
00:13:44,339 --> 00:13:47,579
other and from the host system this

318
00:13:47,579 --> 00:13:49,980
reduces the risk of conflict between

319
00:13:49,980 --> 00:13:51,779
different applications and their

320
00:13:51,779 --> 00:13:53,579
dependencies

321
00:13:53,579 --> 00:13:56,459
it's very resource efficient containers

322
00:13:56,459 --> 00:13:58,019
are lightweight and share the host

323
00:13:58,019 --> 00:14:00,600
operating systems kernel which makes

324
00:14:00,600 --> 00:14:03,120
them more resource efficient than in the

325
00:14:03,120 --> 00:14:05,880
case of virtual machines they are very

326
00:14:05,880 --> 00:14:07,800
scalable they can easily be scaled up

327
00:14:07,800 --> 00:14:11,279
and down to meet changing demands it can

328
00:14:11,279 --> 00:14:13,320
be version controlled container image

329
00:14:13,320 --> 00:14:14,940
can be versioned and stored in a

330
00:14:14,940 --> 00:14:17,279
container registry and you can easily

331
00:14:17,279 --> 00:14:20,519
roll back to a previous version and

332
00:14:20,519 --> 00:14:21,360
um

333
00:14:21,360 --> 00:14:23,279
with all these things

334
00:14:23,279 --> 00:14:25,800
um about containers and the features

335
00:14:25,800 --> 00:14:27,120
they bring to the table like they're

336
00:14:27,120 --> 00:14:29,339
scaling up and down you know of your

337
00:14:29,339 --> 00:14:31,500
containers depend depending on the

338
00:14:31,500 --> 00:14:34,920
changing change of Demands you know how

339
00:14:34,920 --> 00:14:37,740
do we go about implementing all these

340
00:14:37,740 --> 00:14:38,880
things I'm

341
00:14:38,880 --> 00:14:41,639
um making sure that you know everything

342
00:14:41,639 --> 00:14:43,860
works as intended we can scale up and

343
00:14:43,860 --> 00:14:47,279
down you know as required this really is

344
00:14:47,279 --> 00:14:49,139
where as you must have guessed you know

345
00:14:49,139 --> 00:14:54,300
kubernetes comes in so kubernetes

346
00:14:54,300 --> 00:14:57,899
which is often called KS for for in

347
00:14:57,899 --> 00:14:59,639
shorts is

348
00:14:59,639 --> 00:15:02,399
um a container orchestration system for

349
00:15:02,399 --> 00:15:05,760
automating the um deployments scaling

350
00:15:05,760 --> 00:15:07,620
and management of containerized

351
00:15:07,620 --> 00:15:09,480
application I hope I'm not far behind

352
00:15:09,480 --> 00:15:11,519
that time I think I started this slide

353
00:15:11,519 --> 00:15:15,540
too early so my time I think is wrong

354
00:15:15,540 --> 00:15:17,699
so um it was originally developed by

355
00:15:17,699 --> 00:15:20,220
Google and is now maintained by Cloud

356
00:15:20,220 --> 00:15:23,880
native cncf kubernetes provides a

357
00:15:23,880 --> 00:15:26,880
platform agnostic way to manage and

358
00:15:26,880 --> 00:15:28,500
orchestrate containers allowing

359
00:15:28,500 --> 00:15:30,240
developers to focus on writing code

360
00:15:30,240 --> 00:15:33,060
instead of managing infrastructure it

361
00:15:33,060 --> 00:15:34,440
also provides

362
00:15:34,440 --> 00:15:36,360
um some of the following features like

363
00:15:36,360 --> 00:15:38,760
automatic bin packing or you

364
00:15:38,760 --> 00:15:40,620
automatically schedules containers to

365
00:15:40,620 --> 00:15:42,360
run on the most appropriate nodes

366
00:15:42,360 --> 00:15:44,160
available

367
00:15:44,160 --> 00:15:46,940
um it provides self-healing capabilities

368
00:15:46,940 --> 00:15:49,740
containers can automatically detect and

369
00:15:49,740 --> 00:15:52,139
replace field sorry kubernetes can

370
00:15:52,139 --> 00:15:53,940
automatically detect and replace field

371
00:15:53,940 --> 00:15:57,959
containers it provides service Discovery

372
00:15:57,959 --> 00:16:01,920
and load balancing capabilities it has a

373
00:16:01,920 --> 00:16:03,420
built-in service Discovery mechanism

374
00:16:03,420 --> 00:16:06,120
which allows containers to automatically

375
00:16:06,120 --> 00:16:08,100
discover and communicate with each other

376
00:16:08,100 --> 00:16:10,560
it also provides loads balancing

377
00:16:10,560 --> 00:16:12,000
capabilities that automatically

378
00:16:12,000 --> 00:16:14,779
distributes traffic amongst multiple

379
00:16:14,779 --> 00:16:18,660
replicas of a container he has the

380
00:16:18,660 --> 00:16:20,880
automated rollouts and rollback features

381
00:16:20,880 --> 00:16:23,899
that allows for Auto method rollbacks of

382
00:16:23,899 --> 00:16:26,100
rollouts of new versions of an

383
00:16:26,100 --> 00:16:28,620
application which makes it easy to

384
00:16:28,620 --> 00:16:31,560
update applications without downtime it

385
00:16:31,560 --> 00:16:34,260
also has the secret and configuration

386
00:16:34,260 --> 00:16:36,899
management features that allows to that

387
00:16:36,899 --> 00:16:39,360
allows for the Secure Storage of

388
00:16:39,360 --> 00:16:41,459
um your secret password and the increase

389
00:16:41,459 --> 00:16:45,300
encryption keys there are also other

390
00:16:45,300 --> 00:16:46,680
popular choice for container

391
00:16:46,680 --> 00:16:49,019
orchestration but kubernetes is the most

392
00:16:49,019 --> 00:16:51,199
popular one and is widely used in

393
00:16:51,199 --> 00:16:54,720
production environments both on-prem and

394
00:16:54,720 --> 00:16:57,120
in cloud and can be used you know with

395
00:16:57,120 --> 00:16:58,880
other

396
00:16:58,880 --> 00:17:01,139
technology Cloud native Technologies

397
00:17:01,139 --> 00:17:04,740
like Docker and Prometheus so for me at

398
00:17:04,740 --> 00:17:06,240
the time you know

399
00:17:06,240 --> 00:17:08,939
um with this whole knowledge you know

400
00:17:08,939 --> 00:17:10,439
from the workshop and from personal

401
00:17:10,439 --> 00:17:13,859
research it was back to you know

402
00:17:13,859 --> 00:17:16,919
um usual for me but luckily um I started

403
00:17:16,919 --> 00:17:19,020
um studying my masters which was in

404
00:17:19,020 --> 00:17:20,939
cyber security and was a two years

405
00:17:20,939 --> 00:17:23,760
program so we had the option of doing

406
00:17:23,760 --> 00:17:25,559
our third I think it was the third

407
00:17:25,559 --> 00:17:27,780
semester you either research on the

408
00:17:27,780 --> 00:17:31,559
topic or you go for an internship so I I

409
00:17:31,559 --> 00:17:34,140
I went for an internship and I was lucky

410
00:17:34,140 --> 00:17:36,660
enough I got three of us

411
00:17:36,660 --> 00:17:39,059
two for software engineering then one

412
00:17:39,059 --> 00:17:41,640
for a cloud native devsecups internship

413
00:17:41,640 --> 00:17:43,799
and as you'd have guessed I went for it

414
00:17:43,799 --> 00:17:45,660
so

415
00:17:45,660 --> 00:17:47,520
um for um it was really an opportunity

416
00:17:47,520 --> 00:17:49,860
for me to really get um hands-on

417
00:17:49,860 --> 00:17:51,900
experience with Cloud native

418
00:17:51,900 --> 00:17:54,080
Technologies like kubernetes and Docker

419
00:17:54,080 --> 00:17:57,419
and you know really delve into it big

420
00:17:57,419 --> 00:18:01,140
time and I mean it's been you know for

421
00:18:01,140 --> 00:18:04,500
me Cloud native since then and

422
00:18:04,500 --> 00:18:06,620
um I'm doing the luxury of experienced

423
00:18:06,620 --> 00:18:08,940
colleagues you know during my internship

424
00:18:08,940 --> 00:18:11,400
I was able to ask them the best approach

425
00:18:11,400 --> 00:18:13,679
and best route or the best way to go

426
00:18:13,679 --> 00:18:15,780
about learning these tools and most of

427
00:18:15,780 --> 00:18:18,000
them you know we are like of the opinion

428
00:18:18,000 --> 00:18:19,799
of getting comfortable with the Linux

429
00:18:19,799 --> 00:18:23,100
system first then delving into

430
00:18:23,100 --> 00:18:25,020
containers and then eventually

431
00:18:25,020 --> 00:18:29,160
kubernetes so yeah I brushed up on my

432
00:18:29,160 --> 00:18:31,200
Linux you know abilities because I've

433
00:18:31,200 --> 00:18:34,140
always been a Windows guy and then after

434
00:18:34,140 --> 00:18:36,780
that you know

435
00:18:36,780 --> 00:18:39,539
where I delved um head deep into

436
00:18:39,539 --> 00:18:41,460
containers I was able to really

437
00:18:41,460 --> 00:18:43,320
understand containers how to create

438
00:18:43,320 --> 00:18:45,960
container from writing your Docker file

439
00:18:45,960 --> 00:18:48,419
for your application and then creating a

440
00:18:48,419 --> 00:18:51,000
Docker image a container image from your

441
00:18:51,000 --> 00:18:52,380
Docker file using the docker build

442
00:18:52,380 --> 00:18:55,200
command and then eventually a Docker

443
00:18:55,200 --> 00:18:57,000
container with the docker run command

444
00:18:57,000 --> 00:18:59,820
got to understand how to pull and push

445
00:18:59,820 --> 00:19:03,140
container images to container Registries

446
00:19:03,140 --> 00:19:07,740
and you know after that I I guess one of

447
00:19:07,740 --> 00:19:10,020
um I also I would say some of the

448
00:19:10,020 --> 00:19:13,740
resources I use to really get um hangs

449
00:19:13,740 --> 00:19:18,299
on with containers linuxware of the I

450
00:19:18,299 --> 00:19:19,980
think the main one was the upscale

451
00:19:19,980 --> 00:19:24,299
20-day upscale um channel on Reddit and

452
00:19:24,299 --> 00:19:27,600
then some YouTube resources and then

453
00:19:27,600 --> 00:19:29,640
after you know getting to understand

454
00:19:29,640 --> 00:19:33,000
Docker images how to create mine and how

455
00:19:33,000 --> 00:19:34,559
to make use of

456
00:19:34,559 --> 00:19:37,200
um images already available on container

457
00:19:37,200 --> 00:19:39,120
registry this is just an example of a

458
00:19:39,120 --> 00:19:41,700
Docker file and then really

459
00:19:41,700 --> 00:19:43,980
understanding the specifications for

460
00:19:43,980 --> 00:19:47,220
building containers you know how to make

461
00:19:47,220 --> 00:19:50,100
use of like Ci CIS benchmarks or just

462
00:19:50,100 --> 00:19:52,620
really understanding your application to

463
00:19:52,620 --> 00:19:54,840
create you know to be able to write a

464
00:19:54,840 --> 00:19:57,900
Docker file that is going to really run

465
00:19:57,900 --> 00:20:00,240
your application properly the way you

466
00:20:00,240 --> 00:20:02,580
want it or sometimes just following you

467
00:20:02,580 --> 00:20:04,559
know an intern internal specification

468
00:20:04,559 --> 00:20:06,840
depending on the organization you're

469
00:20:06,840 --> 00:20:10,200
working for so you know I was really I

470
00:20:10,200 --> 00:20:11,340
would say very comfortable with

471
00:20:11,340 --> 00:20:13,620
container at the time and then

472
00:20:13,620 --> 00:20:16,020
um went on to really understand

473
00:20:16,020 --> 00:20:20,760
kubernetes so um for um this is just a

474
00:20:20,760 --> 00:20:22,919
basic overview of the features or

475
00:20:22,919 --> 00:20:27,059
architecture of kubernetes so um some of

476
00:20:27,059 --> 00:20:29,100
the features like you can see here the

477
00:20:29,100 --> 00:20:31,980
master node which is the node

478
00:20:31,980 --> 00:20:34,260
the master node is the control plane

479
00:20:34,260 --> 00:20:36,539
node of a kubernetes cluster it's

480
00:20:36,539 --> 00:20:38,220
responsible

481
00:20:38,220 --> 00:20:40,559
for maintaining the desired State and

482
00:20:40,559 --> 00:20:42,419
ensuring that the actual State matches

483
00:20:42,419 --> 00:20:44,580
the desired State you have your worker

484
00:20:44,580 --> 00:20:47,220
nodes the worker nodes are the machines

485
00:20:47,220 --> 00:20:49,140
that run your containerized applications

486
00:20:49,140 --> 00:20:50,880
and

487
00:20:50,880 --> 00:20:53,280
and they communicate to the master node

488
00:20:53,280 --> 00:20:55,559
to receive instruction on what to run

489
00:20:55,559 --> 00:20:58,679
and how to run it each each worker node

490
00:20:58,679 --> 00:21:01,500
runs a container runtime such as Docker

491
00:21:01,500 --> 00:21:03,360
cubelet and it communicates with the

492
00:21:03,360 --> 00:21:05,700
master node and ensures that the desired

493
00:21:05,700 --> 00:21:07,620
state of the cluster is always

494
00:21:07,620 --> 00:21:10,140
maintained then you have your Cube API

495
00:21:10,140 --> 00:21:11,640
server

496
00:21:11,640 --> 00:21:14,400
um which is the key component one of the

497
00:21:14,400 --> 00:21:16,140
key components of the kubernetes control

498
00:21:16,140 --> 00:21:18,840
plane that exposes some restful API

499
00:21:18,840 --> 00:21:21,960
endpoints I think you can see them there

500
00:21:21,960 --> 00:21:24,179
that can be used to perform various

501
00:21:24,179 --> 00:21:26,880
operations on the cluster including some

502
00:21:26,880 --> 00:21:29,460
crowd operations on resources such as

503
00:21:29,460 --> 00:21:31,220
Sports Services

504
00:21:31,220 --> 00:21:34,320
deployments it communicates with the hcd

505
00:21:34,320 --> 00:21:37,020
data store to retrieve and update the

506
00:21:37,020 --> 00:21:38,520
states of the cluster and the

507
00:21:38,520 --> 00:21:40,740
communicate to the cubelets on each

508
00:21:40,740 --> 00:21:43,799
worker node to ensure that the actual

509
00:21:43,799 --> 00:21:45,780
state of the cluster matches the desired

510
00:21:45,780 --> 00:21:49,440
State you also have your Cube kubernetes

511
00:21:49,440 --> 00:21:51,780
controller manager which is a component

512
00:21:51,780 --> 00:21:53,640
that runs as part of the kubernetes

513
00:21:53,640 --> 00:21:56,159
control plane it is responsible for

514
00:21:56,159 --> 00:21:59,940
running various controllers like your

515
00:21:59,940 --> 00:22:01,799
replication controller your endpoint

516
00:22:01,799 --> 00:22:04,440
controller namespace controller service

517
00:22:04,440 --> 00:22:06,840
and token controllers these controllers

518
00:22:06,840 --> 00:22:08,400
are responsible for maintaining the

519
00:22:08,400 --> 00:22:10,799
desired state of the cluster for example

520
00:22:10,799 --> 00:22:14,460
ensuring that the number of replica pods

521
00:22:14,460 --> 00:22:17,820
desired is running on the cluster you

522
00:22:17,820 --> 00:22:19,620
also have your kubernetes scheduler

523
00:22:19,620 --> 00:22:21,960
which is a component that runs as part

524
00:22:21,960 --> 00:22:23,940
of your kubernetes control plane it's

525
00:22:23,940 --> 00:22:26,400
also responsible for scheduling pods on

526
00:22:26,400 --> 00:22:28,440
worker nodes in the cluster the

527
00:22:28,440 --> 00:22:30,419
scheduler receives specifications from

528
00:22:30,419 --> 00:22:34,080
the cube API server and the size assigns

529
00:22:34,080 --> 00:22:36,120
them to you know the appropriate worker

530
00:22:36,120 --> 00:22:38,640
nodes based on various factors such as

531
00:22:38,640 --> 00:22:40,919
available resources constraints and

532
00:22:40,919 --> 00:22:43,860
Affinity rules you have your kubernetes

533
00:22:43,860 --> 00:22:45,780
cubelets which is a lightweight agent

534
00:22:45,780 --> 00:22:47,880
that runs on each worker nodes in a

535
00:22:47,880 --> 00:22:50,460
kubernetes cluster it's responsible for

536
00:22:50,460 --> 00:22:52,140
ensuring that the desire state of the

537
00:22:52,140 --> 00:22:54,720
cluster is reflected on the nodes he

538
00:22:54,720 --> 00:22:56,640
runs on and then you have your

539
00:22:56,640 --> 00:22:59,400
kubernetes proxy which is a component

540
00:22:59,400 --> 00:23:02,100
that runs on each worker nodes of your

541
00:23:02,100 --> 00:23:04,440
kubernetes cluster and responsible for

542
00:23:04,440 --> 00:23:07,200
maintaining the network roads rules on

543
00:23:07,200 --> 00:23:09,120
the Node and for forwarding traffic to

544
00:23:09,120 --> 00:23:12,600
the correct Port then your hcd your hcd

545
00:23:12,600 --> 00:23:15,299
is a distributed key store that is used

546
00:23:15,299 --> 00:23:18,659
by kubernetes as a backing store for all

547
00:23:18,659 --> 00:23:19,820
its

548
00:23:19,820 --> 00:23:23,159
for all its cluster data it stores the

549
00:23:23,159 --> 00:23:24,840
configuration data for the kubernetes

550
00:23:24,840 --> 00:23:27,720
control plane and all objects in the

551
00:23:27,720 --> 00:23:29,940
cluster you also have your container

552
00:23:29,940 --> 00:23:32,039
engine which is the um the software

553
00:23:32,039 --> 00:23:34,020
responsible for managing the life cycles

554
00:23:34,020 --> 00:23:36,480
of containers including you know

555
00:23:36,480 --> 00:23:38,820
starting stopping and managing the con

556
00:23:38,820 --> 00:23:41,760
the resources of the containers

557
00:23:41,760 --> 00:23:44,100
um there are so many other resources of

558
00:23:44,100 --> 00:23:46,860
the kubernetes including like your pods

559
00:23:46,860 --> 00:23:50,039
your um deployments stateful sets and

560
00:23:50,039 --> 00:23:53,880
demand sets but these are just a few of

561
00:23:53,880 --> 00:23:55,980
them then

562
00:23:55,980 --> 00:23:58,580
in in our case where you know we try to

563
00:23:58,580 --> 00:24:01,980
sketch or to build up on the example

564
00:24:01,980 --> 00:24:03,600
rest API

565
00:24:03,600 --> 00:24:05,520
um if you were working on like like I

566
00:24:05,520 --> 00:24:07,740
said you know for the newbies people who

567
00:24:07,740 --> 00:24:09,620
are trying to really you know get

568
00:24:09,620 --> 00:24:12,360
accustomed with these Technologies so in

569
00:24:12,360 --> 00:24:14,700
a situation where you're creating a

570
00:24:14,700 --> 00:24:16,799
micro service like that and you wanted

571
00:24:16,799 --> 00:24:19,200
to test them you know you can make use

572
00:24:19,200 --> 00:24:22,200
of um the docker compose which is a tool

573
00:24:22,200 --> 00:24:24,240
for defining and running multiple

574
00:24:24,240 --> 00:24:27,179
container application container or

575
00:24:27,179 --> 00:24:29,400
Docker applications it allows you to

576
00:24:29,400 --> 00:24:31,919
define the service that makes up your

577
00:24:31,919 --> 00:24:34,200
application you know in a single Docker

578
00:24:34,200 --> 00:24:35,880
compost file and then you can start

579
00:24:35,880 --> 00:24:38,700
start them and manage them like in our

580
00:24:38,700 --> 00:24:41,039
case I don't know if you can see it you

581
00:24:41,039 --> 00:24:44,460
see we have the user service the

582
00:24:44,460 --> 00:24:46,380
shipping service and the inventories

583
00:24:46,380 --> 00:24:48,720
service in this case they've all been

584
00:24:48,720 --> 00:24:51,299
converted to a Docker image

585
00:24:51,299 --> 00:24:53,520
um the inventory image user image and

586
00:24:53,520 --> 00:24:55,559
shipping image and then we also have a

587
00:24:55,559 --> 00:24:58,260
network work you know for to ensure that

588
00:24:58,260 --> 00:25:00,120
all the services are running within the

589
00:25:00,120 --> 00:25:01,980
same network and we have our database

590
00:25:01,980 --> 00:25:04,919
there so you can use a Docker compose

591
00:25:04,919 --> 00:25:07,620
file to test your application or you

592
00:25:07,620 --> 00:25:08,880
could just

593
00:25:08,880 --> 00:25:12,020
write your own kubernetes deployment

594
00:25:12,020 --> 00:25:14,400
configuration file

595
00:25:14,400 --> 00:25:17,940
um using a Cuban using kubernetes to

596
00:25:17,940 --> 00:25:20,280
deploy and you can use your kubernetes

597
00:25:20,280 --> 00:25:22,559
deployment configuration file to deploy

598
00:25:22,559 --> 00:25:25,320
and scale your application this in this

599
00:25:25,320 --> 00:25:26,820
process you just write your deployment

600
00:25:26,820 --> 00:25:29,580
configuration which defines the desired

601
00:25:29,580 --> 00:25:33,240
state of the application the resources

602
00:25:33,240 --> 00:25:36,419
um it needs to run and then using the

603
00:25:36,419 --> 00:25:39,419
kubernetes command line or the or the

604
00:25:39,419 --> 00:25:41,100
API you create and manage your

605
00:25:41,100 --> 00:25:43,380
deployments the the configuration that

606
00:25:43,380 --> 00:25:45,779
can include information such as the

607
00:25:45,779 --> 00:25:47,880
number of replicas how many replicas you

608
00:25:47,880 --> 00:25:49,919
want the container to be

609
00:25:49,919 --> 00:25:52,140
um and then the resource limits and your

610
00:25:52,140 --> 00:25:54,840
environment variables to run your

611
00:25:54,840 --> 00:25:57,179
services you could also use the

612
00:25:57,179 --> 00:26:00,620
kubernetes stateful set

613
00:26:00,620 --> 00:26:03,539
resource this is used to manage

614
00:26:03,539 --> 00:26:05,880
deployments just like your deployments

615
00:26:05,880 --> 00:26:08,159
file or but in this case for stateful

616
00:26:08,159 --> 00:26:10,620
applications a stateful application is

617
00:26:10,620 --> 00:26:12,720
an application that you know it requires

618
00:26:12,720 --> 00:26:14,820
a hostname and a persistent store

619
00:26:14,820 --> 00:26:17,779
coverage like your database for example

620
00:26:17,779 --> 00:26:20,059
so

621
00:26:20,059 --> 00:26:22,860
and unlike deployment which uses

622
00:26:22,860 --> 00:26:25,440
replication controller and replica set

623
00:26:25,440 --> 00:26:27,539
to manage the scaling and availability

624
00:26:27,539 --> 00:26:30,059
of State stateless pods a stateful

625
00:26:30,059 --> 00:26:32,760
search uses a unique hostname for each

626
00:26:32,760 --> 00:26:35,640
board and guarantees that the poor that

627
00:26:35,640 --> 00:26:37,440
pods are created and deleted in a

628
00:26:37,440 --> 00:26:40,200
specific order this ensures that the Pod

629
00:26:40,200 --> 00:26:42,179
maintained the same network identity

630
00:26:42,179 --> 00:26:44,400
throughout their life cycles allowing

631
00:26:44,400 --> 00:26:45,779
them to maintain stable network

632
00:26:45,779 --> 00:26:48,240
connections and stateful set also

633
00:26:48,240 --> 00:26:50,760
provides a way to provision persistent

634
00:26:50,760 --> 00:26:53,400
storage for ports so you know this is

635
00:26:53,400 --> 00:26:55,740
also an example of a stateful set

636
00:26:55,740 --> 00:26:58,260
configuration file it's just like the um

637
00:26:58,260 --> 00:27:00,539
the deployments file but in this case

638
00:27:00,539 --> 00:27:04,020
this is more suited for pods or

639
00:27:04,020 --> 00:27:05,400
containers you know that require

640
00:27:05,400 --> 00:27:07,980
persistent storage so

641
00:27:07,980 --> 00:27:09,179
um and then

642
00:27:09,179 --> 00:27:11,159
um down you know the configuration file

643
00:27:11,159 --> 00:27:14,159
you see where a service configuration

644
00:27:14,159 --> 00:27:17,820
for a service is specified like I said

645
00:27:17,820 --> 00:27:20,880
like I stated in our Docker compose

646
00:27:20,880 --> 00:27:22,980
example this to ensure that your

647
00:27:22,980 --> 00:27:24,659
containers and Boards you know run

648
00:27:24,659 --> 00:27:27,419
within the same network so

649
00:27:27,419 --> 00:27:30,179
armed with this information you know

650
00:27:30,179 --> 00:27:33,419
with um so far you're well you know on

651
00:27:33,419 --> 00:27:35,580
your way to being able to sit for the

652
00:27:35,580 --> 00:27:38,820
cks certification and then you know like

653
00:27:38,820 --> 00:27:41,340
I said this is basically John it's Cloud

654
00:27:41,340 --> 00:27:43,200
native kubernetes and how to secure it

655
00:27:43,200 --> 00:27:46,740
so where does security come into all

656
00:27:46,740 --> 00:27:48,779
this but I would like to also point out

657
00:27:48,779 --> 00:27:50,640
that security shouldn't be an

658
00:27:50,640 --> 00:27:52,620
afterthought it should be something you

659
00:27:52,620 --> 00:27:55,260
also think about you know in the process

660
00:27:55,260 --> 00:27:58,500
of implementing and designing

661
00:27:58,500 --> 00:28:01,140
um your application but

662
00:28:01,140 --> 00:28:04,559
um for me as a newbie um one one of the

663
00:28:04,559 --> 00:28:06,480
um very important

664
00:28:06,480 --> 00:28:08,580
um place to start with with regards to

665
00:28:08,580 --> 00:28:12,179
security is your requirement.txt file

666
00:28:12,179 --> 00:28:14,700
this is where you you know I'll say keep

667
00:28:14,700 --> 00:28:17,220
track of record of all the libraries

668
00:28:17,220 --> 00:28:20,039
plugins and in third party

669
00:28:20,039 --> 00:28:22,080
um softwares or whatever you must have

670
00:28:22,080 --> 00:28:24,059
used in your in the

671
00:28:24,059 --> 00:28:25,679
um production or development of your

672
00:28:25,679 --> 00:28:28,080
application like in this case

673
00:28:28,080 --> 00:28:32,039
um using the first API framework

674
00:28:32,039 --> 00:28:34,320
um we use the python

675
00:28:34,320 --> 00:28:38,880
Python 3.4 Alpine the first API and then

676
00:28:38,880 --> 00:28:41,880
the uvicon server so I'm do this

677
00:28:41,880 --> 00:28:43,980
information you could easily you know

678
00:28:43,980 --> 00:28:46,980
maybe go to the documentation or

679
00:28:46,980 --> 00:28:48,480
research on

680
00:28:48,480 --> 00:28:51,900
um the zero day vulnerabilities

681
00:28:51,900 --> 00:28:54,000
um announcement you know of security

682
00:28:54,000 --> 00:28:57,179
updates and patches but you know um

683
00:28:57,179 --> 00:28:59,220
something another thing you could do is

684
00:28:59,220 --> 00:29:01,140
scan

685
00:29:01,140 --> 00:29:03,600
um this image using some open source and

686
00:29:03,600 --> 00:29:06,539
freely available image scanners like um

687
00:29:06,539 --> 00:29:08,880
you have your Aqua trivi for example

688
00:29:08,880 --> 00:29:12,120
which is what I like I use regularly so

689
00:29:12,120 --> 00:29:15,000
after creating your own Docker writing

690
00:29:15,000 --> 00:29:16,320
your own Docker file and creating a

691
00:29:16,320 --> 00:29:18,539
container image from it you could easily

692
00:29:18,539 --> 00:29:20,640
scan your own container image or scan

693
00:29:20,640 --> 00:29:23,279
any of this like in this case we scanned

694
00:29:23,279 --> 00:29:25,279
the python

695
00:29:25,279 --> 00:29:29,340
the the likely the python library or the

696
00:29:29,340 --> 00:29:32,940
python software itself and so and then

697
00:29:32,940 --> 00:29:35,159
the the good thing about aqua TVs that

698
00:29:35,159 --> 00:29:37,799
it not it just doesn't just give you the

699
00:29:37,799 --> 00:29:40,740
vulnerability report but it also gives

700
00:29:40,740 --> 00:29:43,799
you the installed version of you know

701
00:29:43,799 --> 00:29:46,080
whatever vulnerability

702
00:29:46,080 --> 00:29:48,179
um it finds in your container image it

703
00:29:48,179 --> 00:29:49,679
gives you the install version of that

704
00:29:49,679 --> 00:29:52,260
library or Plugin or whatever it is and

705
00:29:52,260 --> 00:29:55,140
then the fixed version of it so I'm with

706
00:29:55,140 --> 00:29:56,760
this information all you have to do is

707
00:29:56,760 --> 00:29:58,860
to go to the documentation of that

708
00:29:58,860 --> 00:30:01,860
library or Plugin you know look for the

709
00:30:01,860 --> 00:30:04,500
fixed fashion download it and implement

710
00:30:04,500 --> 00:30:07,799
it in your application but you know just

711
00:30:07,799 --> 00:30:10,020
to put it out there

712
00:30:10,020 --> 00:30:12,059
when you scan your container image and

713
00:30:12,059 --> 00:30:13,440
you don't get a report it doesn't

714
00:30:13,440 --> 00:30:16,799
necessarily mean that you know your app

715
00:30:16,799 --> 00:30:20,039
or products is completely secure it just

716
00:30:20,039 --> 00:30:22,020
means that at the time of scanning no

717
00:30:22,020 --> 00:30:25,140
vulnerability or security issue has been

718
00:30:25,140 --> 00:30:27,179
reported because the way Aqua traffic

719
00:30:27,179 --> 00:30:30,179
works is by it scans your your container

720
00:30:30,179 --> 00:30:32,100
image checks all the libraries and

721
00:30:32,100 --> 00:30:34,860
plugins and third-party softwares you're

722
00:30:34,860 --> 00:30:37,320
using and that scans this goes through

723
00:30:37,320 --> 00:30:39,539
the CV database to know if anything has

724
00:30:39,539 --> 00:30:41,220
been reported on those so if anything

725
00:30:41,220 --> 00:30:43,740
has been reported it throws it backs

726
00:30:43,740 --> 00:30:45,720
back at you and gives you the results

727
00:30:45,720 --> 00:30:50,120
and the um the

728
00:30:50,120 --> 00:30:53,580
the it tells you if it's a critical

729
00:30:53,580 --> 00:30:55,860
vulnerability a medium one or a low One

730
00:30:55,860 --> 00:30:58,200
But whichever one it is it's always good

731
00:30:58,200 --> 00:31:00,419
to implement the patch immediately and

732
00:31:00,419 --> 00:31:03,059
then some additional tips for Securities

733
00:31:03,059 --> 00:31:05,399
to you know

734
00:31:05,399 --> 00:31:09,240
always use security monitoring and

735
00:31:09,240 --> 00:31:12,480
logging tools to you know quickly detect

736
00:31:12,480 --> 00:31:14,580
and respond to security threats is

737
00:31:14,580 --> 00:31:15,720
always

738
00:31:15,720 --> 00:31:18,539
um make it a duty to always keep your

739
00:31:18,539 --> 00:31:21,480
softwares and systems up to date you

740
00:31:21,480 --> 00:31:23,820
know with later security patches and

741
00:31:23,820 --> 00:31:25,980
Updates this will always this will

742
00:31:25,980 --> 00:31:27,720
ensure that your Cloud resources are

743
00:31:27,720 --> 00:31:30,620
protected against non-vulnerabilities

744
00:31:30,620 --> 00:31:33,360
Music Cloud native Security Solutions

745
00:31:33,360 --> 00:31:35,880
such as service mesh this can provide

746
00:31:35,880 --> 00:31:38,640
security features like service to

747
00:31:38,640 --> 00:31:40,640
service authentication and encryption

748
00:31:40,640 --> 00:31:43,679
make use of role and based Access

749
00:31:43,679 --> 00:31:46,799
Control to limit access to the cluster

750
00:31:46,799 --> 00:31:50,940
to only authorize users and rows use

751
00:31:50,940 --> 00:31:53,340
kubernetes

752
00:31:53,340 --> 00:31:55,860
security context to limit the

753
00:31:55,860 --> 00:31:58,200
capabilities of your pods and your

754
00:31:58,200 --> 00:32:00,240
containers running the cluster this will

755
00:32:00,240 --> 00:32:02,340
help to protect the cluster and these

756
00:32:02,340 --> 00:32:04,260
resources from malicious or

757
00:32:04,260 --> 00:32:06,899
misconfigured containers

758
00:32:06,899 --> 00:32:09,419
make use of kubernetes network policies

759
00:32:09,419 --> 00:32:12,600
to control traffic between your pods and

760
00:32:12,600 --> 00:32:14,880
use of and make use of kubernetes

761
00:32:14,880 --> 00:32:17,580
security policies to control pod and

762
00:32:17,580 --> 00:32:19,620
container security settings

763
00:32:19,620 --> 00:32:23,640
always use secrets and config maps to

764
00:32:23,640 --> 00:32:25,980
securely store and manage sensitive data

765
00:32:25,980 --> 00:32:28,919
like password and encryption Keys use

766
00:32:28,919 --> 00:32:31,740
kubernetes audits login to track and

767
00:32:31,740 --> 00:32:34,500
monitor activities within your cluster

768
00:32:34,500 --> 00:32:37,919
you start party Security Solutions sorry

769
00:32:37,919 --> 00:32:40,500
I know this is more of like use use you

770
00:32:40,500 --> 00:32:42,600
start practice Security Solutions

771
00:32:42,600 --> 00:32:46,140
um as kubernetes Network and pod um

772
00:32:46,140 --> 00:32:48,419
Security Solutions to provide additional

773
00:32:48,419 --> 00:32:51,899
security features and protections this

774
00:32:51,899 --> 00:32:53,640
can be helpful in providing extra

775
00:32:53,640 --> 00:32:56,279
security layers to detect and prevent

776
00:32:56,279 --> 00:32:57,620
vulnerability

777
00:32:57,620 --> 00:33:01,020
like I said earlier always update and

778
00:33:01,020 --> 00:33:03,480
Patch your kubernetes cluster

779
00:33:03,480 --> 00:33:06,600
well seek help from experienced and

780
00:33:06,600 --> 00:33:09,000
professional and professionals or

781
00:33:09,000 --> 00:33:12,059
consult you know your um some online

782
00:33:12,059 --> 00:33:14,340
resources especially

783
00:33:14,340 --> 00:33:16,440
um the official documentations of

784
00:33:16,440 --> 00:33:17,820
whatever

785
00:33:17,820 --> 00:33:20,340
um third party security software you're

786
00:33:20,340 --> 00:33:23,220
using or libraries and plug-in and then

787
00:33:23,220 --> 00:33:26,460
always be vigilant about new security

788
00:33:26,460 --> 00:33:29,580
trust threats and best practices to keep

789
00:33:29,580 --> 00:33:33,440
your Cloud environment safe one of the

790
00:33:33,440 --> 00:33:36,299
tip I would like to add there is to

791
00:33:36,299 --> 00:33:39,539
always link your codes especially your

792
00:33:39,539 --> 00:33:41,640
Docker file code to make sure you're

793
00:33:41,640 --> 00:33:44,580
following industry standard in the in in

794
00:33:44,580 --> 00:33:46,440
the case of the cafe for example you can

795
00:33:46,440 --> 00:33:50,519
make use of the handling I

796
00:33:50,519 --> 00:33:52,740
um you don't you don't really need to

797
00:33:52,740 --> 00:33:54,720
install it you can just go to the to

798
00:33:54,720 --> 00:33:56,700
their website or the documentation page

799
00:33:56,700 --> 00:33:59,340
copy your Docker your codes or your

800
00:33:59,340 --> 00:34:01,559
Docker file posted there and then it

801
00:34:01,559 --> 00:34:04,260
gives you you know correction chance to

802
00:34:04,260 --> 00:34:08,219
make how to implement your path and you

803
00:34:08,219 --> 00:34:11,280
know the base images to how to specify

804
00:34:11,280 --> 00:34:14,639
your base images or your commands that

805
00:34:14,639 --> 00:34:17,399
helps a lot and then

806
00:34:17,399 --> 00:34:20,639
um I guess that's it so but feel free if

807
00:34:20,639 --> 00:34:23,399
you have any question or anything you'd

808
00:34:23,399 --> 00:34:25,980
like to know and resources are used like

809
00:34:25,980 --> 00:34:28,260
the code Cloud resource and a Monster

810
00:34:28,260 --> 00:34:31,320
tutorial feel free to reach out and I

811
00:34:31,320 --> 00:34:35,060
don't mind sharing those yeah thank you

812
00:34:35,060 --> 00:34:39,570
[Applause]

