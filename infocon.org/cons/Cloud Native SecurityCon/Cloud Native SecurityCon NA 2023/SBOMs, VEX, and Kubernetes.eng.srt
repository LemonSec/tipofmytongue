1
00:00:00,000 --> 00:00:02,040
uh there have been a couple of

2
00:00:02,040 --> 00:00:04,799
interesting setbacks I would say for

3
00:00:04,799 --> 00:00:08,099
this panel because we had four people

4
00:00:08,099 --> 00:00:10,080
that were supposed to do the panel one

5
00:00:10,080 --> 00:00:12,120
of them couldn't make it so but he was

6
00:00:12,120 --> 00:00:13,920
kind enough to record a video and send

7
00:00:13,920 --> 00:00:16,320
it over to one of the questions and the

8
00:00:16,320 --> 00:00:19,140
other person uh felt sick just last

9
00:00:19,140 --> 00:00:21,960
night so but she was kind enough to get

10
00:00:21,960 --> 00:00:23,880
up this morning and make some videos so

11
00:00:23,880 --> 00:00:25,680
it's not like so they're not going to be

12
00:00:25,680 --> 00:00:28,619
in person but we've gotten the talking

13
00:00:28,619 --> 00:00:31,740
track from them that will play so let's

14
00:00:31,740 --> 00:00:33,239
see how this goes because we were

15
00:00:33,239 --> 00:00:35,700
planning for a conversational kind of

16
00:00:35,700 --> 00:00:37,500
panel now I'm gonna have to go back and

17
00:00:37,500 --> 00:00:39,540
forth between me setting some background

18
00:00:39,540 --> 00:00:40,739
asking the question and then playing

19
00:00:40,739 --> 00:00:42,780
that video so imagine it's a

20
00:00:42,780 --> 00:00:44,040
conversation that's happening on the

21
00:00:44,040 --> 00:00:45,600
screen

22
00:00:45,600 --> 00:00:49,440
um so this panel is about all of the

23
00:00:49,440 --> 00:00:50,640
things that you've been hearing in this

24
00:00:50,640 --> 00:00:52,800
conference the primary topic of this

25
00:00:52,800 --> 00:00:54,300
conference has been around supply chain

26
00:00:54,300 --> 00:00:55,320
security

27
00:00:55,320 --> 00:00:58,620
and s-bombs especially for cloud native

28
00:00:58,620 --> 00:01:01,440
applications is something that is

29
00:01:01,440 --> 00:01:03,719
emerging as an extremely important and

30
00:01:03,719 --> 00:01:06,360
Urgent thing to do thanks to Joe Biden's

31
00:01:06,360 --> 00:01:08,100
executive order a lot of the

32
00:01:08,100 --> 00:01:10,380
organizations that are building Cloud

33
00:01:10,380 --> 00:01:11,520
native applications and other

34
00:01:11,520 --> 00:01:13,340
applications are rushing to create

35
00:01:13,340 --> 00:01:16,920
s-bombs at least as a first step towards

36
00:01:16,920 --> 00:01:19,140
their journey of achieving proper supply

37
00:01:19,140 --> 00:01:21,119
chain security and this has to happen

38
00:01:21,119 --> 00:01:22,560
especially if you're a regulated

39
00:01:22,560 --> 00:01:24,360
organization selling into federal

40
00:01:24,360 --> 00:01:26,580
government Etc by June 11th of this year

41
00:01:26,580 --> 00:01:28,200
because that's I think the date right

42
00:01:28,200 --> 00:01:30,960
for for uh complying with the Mandate

43
00:01:30,960 --> 00:01:35,040
the presidential mandate so we our goal

44
00:01:35,040 --> 00:01:37,680
in doing this panel was to bring some

45
00:01:37,680 --> 00:01:39,420
people that have that are experts in the

46
00:01:39,420 --> 00:01:42,659
operational aspects of application

47
00:01:42,659 --> 00:01:44,460
security developer security supply chain

48
00:01:44,460 --> 00:01:46,560
security Etc to make sure that we talk

49
00:01:46,560 --> 00:01:48,060
about the Practical aspects of how do

50
00:01:48,060 --> 00:01:49,619
you go about achieving this mandate how

51
00:01:49,619 --> 00:01:51,060
do you go about creating s-bomb because

52
00:01:51,060 --> 00:01:52,920
of course there's a lot of talk about

53
00:01:52,920 --> 00:01:55,020
future and things that you can do to

54
00:01:55,020 --> 00:01:56,399
make the the perfect supply chain

55
00:01:56,399 --> 00:01:58,320
security solution over the next year two

56
00:01:58,320 --> 00:02:01,259
years Etc but what do you do now from an

57
00:02:01,259 --> 00:02:02,759
operational perspective so we're going

58
00:02:02,759 --> 00:02:04,020
to touch upon some of those things first

59
00:02:04,020 --> 00:02:06,000
well we're also going to touch upon what

60
00:02:06,000 --> 00:02:08,280
can you do after you've created your

61
00:02:08,280 --> 00:02:10,020
original s-bombs and so on and so forth

62
00:02:10,020 --> 00:02:14,580
so let me introduce the panelists I'm

63
00:02:14,580 --> 00:02:16,560
going to start with the people that are

64
00:02:16,560 --> 00:02:19,440
not in person present here today Rose

65
00:02:19,440 --> 00:02:21,959
judge she is a senior open source

66
00:02:21,959 --> 00:02:23,280
engineer at VMware she's one of the

67
00:02:23,280 --> 00:02:24,780
maintainers of the turn project the turn

68
00:02:24,780 --> 00:02:27,420
project is responsible for creating it's

69
00:02:27,420 --> 00:02:29,540
a tool just like

70
00:02:29,540 --> 00:02:31,739
Trevi and others that allows you to

71
00:02:31,739 --> 00:02:34,260
create s-bombs

72
00:02:34,260 --> 00:02:37,560
the and Rose has been an integral member

73
00:02:37,560 --> 00:02:39,180
of that team

74
00:02:39,180 --> 00:02:43,860
Alan Friedman he is he works for the

75
00:02:43,860 --> 00:02:45,660
cyber security and infrastructure

76
00:02:45,660 --> 00:02:48,660
Security Agency in the US government and

77
00:02:48,660 --> 00:02:50,400
he is responsible for running the espam

78
00:02:50,400 --> 00:02:52,200
initiative for the US government

79
00:02:52,200 --> 00:02:55,200
and I will go with Andy next hello I'm

80
00:02:55,200 --> 00:02:57,660
Andy Martin CEO and founder of control

81
00:02:57,660 --> 00:02:58,620
plane

82
00:02:58,620 --> 00:03:00,840
I have an interest in supply chain

83
00:03:00,840 --> 00:03:03,360
security from uh from back in the

84
00:03:03,360 --> 00:03:06,599
original in total days and specifically

85
00:03:06,599 --> 00:03:08,040
around

86
00:03:08,040 --> 00:03:10,140
if we're signing artifacts then what are

87
00:03:10,140 --> 00:03:12,540
their composition and how did they

88
00:03:12,540 --> 00:03:14,580
work themselves into the state that we

89
00:03:14,580 --> 00:03:17,340
are currently dealing with

90
00:03:17,340 --> 00:03:20,400
awesome and my name is Kiran committee

91
00:03:20,400 --> 00:03:22,200
I'm the founder and CEO of deep Factor

92
00:03:22,200 --> 00:03:23,700
we have a booth here so check us out if

93
00:03:23,700 --> 00:03:25,800
you're interested deep factor is a

94
00:03:25,800 --> 00:03:27,720
modern developer security solution for

95
00:03:27,720 --> 00:03:30,060
Docker kubernetes type applications that

96
00:03:30,060 --> 00:03:31,680
will help you address some of your

97
00:03:31,680 --> 00:03:33,180
supply engine security supply chain

98
00:03:33,180 --> 00:03:35,280
security problems among other things

99
00:03:35,280 --> 00:03:37,760
so let's get started

100
00:03:37,760 --> 00:03:40,200
the first question that we wanted to

101
00:03:40,200 --> 00:03:41,640
talk about we want we actually wanted to

102
00:03:41,640 --> 00:03:44,700
break this into very practical aspects

103
00:03:44,700 --> 00:03:47,819
of esbar what are what is an s-bomb

104
00:03:47,819 --> 00:03:50,519
what is a Vex file what is a cyclone DX

105
00:03:50,519 --> 00:03:53,040
and spdx file what do you do with it why

106
00:03:53,040 --> 00:03:54,180
is it important

107
00:03:54,180 --> 00:03:56,400
number two we wanted to talk about

108
00:03:56,400 --> 00:03:59,280
how do people go about creating it

109
00:03:59,280 --> 00:04:01,739
number three as you go through from left

110
00:04:01,739 --> 00:04:03,420
to right in your pipeline talk about

111
00:04:03,420 --> 00:04:05,459
where do you store it why is it

112
00:04:05,459 --> 00:04:07,799
important to store it in such a way that

113
00:04:07,799 --> 00:04:09,120
you can actually search through it and

114
00:04:09,120 --> 00:04:10,980
make sense out of it and then we're

115
00:04:10,980 --> 00:04:11,819
going to talk about how do people

116
00:04:11,819 --> 00:04:14,220
consume it and lastly we're going to

117
00:04:14,220 --> 00:04:15,840
talk about is this the beginning of your

118
00:04:15,840 --> 00:04:17,339
supply chain security or is this the end

119
00:04:17,339 --> 00:04:18,418
all of your supply chain security

120
00:04:18,418 --> 00:04:20,279
obviously you guys know the answer but

121
00:04:20,279 --> 00:04:22,199
we'll double click on the details so

122
00:04:22,199 --> 00:04:23,460
let's get started with this question

123
00:04:23,460 --> 00:04:26,220
what is an s-bomb and why should people

124
00:04:26,220 --> 00:04:28,199
care about it we ask this question to

125
00:04:28,199 --> 00:04:30,060
Alan Friedman and he did record a video

126
00:04:30,060 --> 00:04:31,500
for us so imagine that he's actually

127
00:04:31,500 --> 00:04:33,660
having a conversation here with us since

128
00:04:33,660 --> 00:04:38,060
he's not available in person

129
00:04:42,500 --> 00:04:44,400
I work for the cyber security

130
00:04:44,400 --> 00:04:46,500
infrastructure Security Agency in the US

131
00:04:46,500 --> 00:04:48,540
government I'm responsible for helping

132
00:04:48,540 --> 00:04:51,180
to lead the global economy

133
00:04:51,180 --> 00:04:53,100
I'm sorry I can't be there today but I

134
00:04:53,100 --> 00:04:55,139
think we can kick off the conversation

135
00:04:55,139 --> 00:04:57,900
there's some basics of what is an s-bomb

136
00:04:57,900 --> 00:05:00,000
why is an s-bomb can we do this today

137
00:05:00,000 --> 00:05:01,680
and what's some of the broader security

138
00:05:01,680 --> 00:05:04,800
context so I'm assuming most of you are

139
00:05:04,800 --> 00:05:07,440
understanding no weapon ask mom is uh

140
00:05:07,440 --> 00:05:09,479
but essentially it's a dependency

141
00:05:09,479 --> 00:05:11,699
treatment right I use this software the

142
00:05:11,699 --> 00:05:14,520
software uses this software and so on

143
00:05:14,520 --> 00:05:16,380
transparency in the software supply

144
00:05:16,380 --> 00:05:19,020
chain is going to be a key part of

145
00:05:19,020 --> 00:05:20,220
really moving forward and making

146
00:05:20,220 --> 00:05:22,139
progress on how we think about software

147
00:05:22,139 --> 00:05:25,020
and in fact it's a bit shocking that

148
00:05:25,020 --> 00:05:26,520
perhaps the vast majority of software

149
00:05:26,520 --> 00:05:29,100
today isn't built with greater

150
00:05:29,100 --> 00:05:30,479
transparency

151
00:05:30,479 --> 00:05:33,240
so s-bomb get help developers can help

152
00:05:33,240 --> 00:05:35,400
people selecting software and it can

153
00:05:35,400 --> 00:05:36,900
help users to make sure they have a

154
00:05:36,900 --> 00:05:38,880
capability to react

155
00:05:38,880 --> 00:05:40,740
there are real risks out there as we

156
00:05:40,740 --> 00:05:43,440
think about software supply chain a lot

157
00:05:43,440 --> 00:05:44,940
of them are vulnerable vulnerabilities

158
00:05:44,940 --> 00:05:47,100
right many of us spent a lot of time

159
00:05:47,100 --> 00:05:49,440
hunched over laptops in guest rooms in

160
00:05:49,440 --> 00:05:51,780
the end of 2021 trying to understand

161
00:05:51,780 --> 00:05:54,180
where our risk was for the log for J

162
00:05:54,180 --> 00:05:57,360
crisis that's not a one-up I would not

163
00:05:57,360 --> 00:05:58,919
bet heavily on saying well there will

164
00:05:58,919 --> 00:06:01,560
never be another log for Jay

165
00:06:01,560 --> 00:06:04,139
um but there's also a broader question

166
00:06:04,139 --> 00:06:06,180
around risks right how much of my

167
00:06:06,180 --> 00:06:08,280
infrastructure depends on projects that

168
00:06:08,280 --> 00:06:10,560
have no active maintenance or how many

169
00:06:10,560 --> 00:06:14,220
of uh my projects use components that

170
00:06:14,220 --> 00:06:16,800
have been end of life or have no support

171
00:06:16,800 --> 00:06:19,440
as Farm won't directly tell you that but

172
00:06:19,440 --> 00:06:21,780
good luck managing that kind of risk

173
00:06:21,780 --> 00:06:23,819
without really being able to look into

174
00:06:23,819 --> 00:06:26,340
the entire dependency graph of your

175
00:06:26,340 --> 00:06:27,479
software

176
00:06:27,479 --> 00:06:29,580
it's also going to be coming from your

177
00:06:29,580 --> 00:06:31,520
friends the governments around the world

178
00:06:31,520 --> 00:06:34,740
uh the 2021 executive order said

179
00:06:34,740 --> 00:06:36,300
ultimately everything the US government

180
00:06:36,300 --> 00:06:38,580
buys is going to happen Captain s bomb

181
00:06:38,580 --> 00:06:41,160
the FDA which regulates medical devices

182
00:06:41,160 --> 00:06:42,600
and said hey you're not going to be able

183
00:06:42,600 --> 00:06:44,280
to put a new medical device on the

184
00:06:44,280 --> 00:06:46,139
market without telling the regulator

185
00:06:46,139 --> 00:06:49,139
what the dependencies are for a full s

186
00:06:49,139 --> 00:06:51,840
bomb and of course our friends across

187
00:06:51,840 --> 00:06:54,060
the Atlantic in the EU have proposed

188
00:06:54,060 --> 00:06:56,340
these cyber resiliency act which says

189
00:06:56,340 --> 00:06:58,919
that everything's sold in the European

190
00:06:58,919 --> 00:07:01,500
Union must have an espec

191
00:07:01,500 --> 00:07:03,360
so can we do this today

192
00:07:03,360 --> 00:07:06,539
and the short answer is yes the slightly

193
00:07:06,539 --> 00:07:09,419
more complex answer is uh we're working

194
00:07:09,419 --> 00:07:11,340
on making sure that it's interoperative

195
00:07:11,340 --> 00:07:13,740
right I think everyone uh whether you

196
00:07:13,740 --> 00:07:16,440
make software or use software can start

197
00:07:16,440 --> 00:07:19,080
to produce s-bombs and ask for s-bombs

198
00:07:19,080 --> 00:07:21,120
and then over time we're going to really

199
00:07:21,120 --> 00:07:25,259
push for better interoperability and and

200
00:07:25,259 --> 00:07:27,419
more uh full integration

201
00:07:27,419 --> 00:07:28,919
there are plenty of tools out there

202
00:07:28,919 --> 00:07:31,199
today both proprietary and open source

203
00:07:31,199 --> 00:07:33,300
and there are two great s-bomb data

204
00:07:33,300 --> 00:07:36,240
formats spdx and Cyclone VX they're both

205
00:07:36,240 --> 00:07:38,280
open source projects they continue to

206
00:07:38,280 --> 00:07:39,840
evolve and one of the things we're

207
00:07:39,840 --> 00:07:41,400
working on is to make sure that they're

208
00:07:41,400 --> 00:07:43,319
fully interoperable at the end of the

209
00:07:43,319 --> 00:07:45,419
day it's just data

210
00:07:45,419 --> 00:07:47,340
so what about the broader security

211
00:07:47,340 --> 00:07:49,800
landscape right the vision isn't just to

212
00:07:49,800 --> 00:07:51,840
create this brand new thing it's to

213
00:07:51,840 --> 00:07:54,120
build this into our software security

214
00:07:54,120 --> 00:07:57,300
architecture and how we think about risk

215
00:07:57,300 --> 00:08:01,259
uh for our organizations so we're busy

216
00:08:01,259 --> 00:08:02,880
to deciding you know what are the

217
00:08:02,880 --> 00:08:04,860
requirements uh to make sure this

218
00:08:04,860 --> 00:08:06,900
happens and then linking this data to

219
00:08:06,900 --> 00:08:08,639
other things that we care about

220
00:08:08,639 --> 00:08:11,099
such as right making sure we can map it

221
00:08:11,099 --> 00:08:13,020
to vulnerability databases making we're

222
00:08:13,020 --> 00:08:14,639
sure we can map it to other sources of

223
00:08:14,639 --> 00:08:16,039
intelligence

224
00:08:16,039 --> 00:08:20,340
there is an idea that says hey it's not

225
00:08:20,340 --> 00:08:21,840
just the risk that it's whether or not

226
00:08:21,840 --> 00:08:23,099
it's vulnerable but if there's whether

227
00:08:23,099 --> 00:08:25,620
or not something can be exploitable and

228
00:08:25,620 --> 00:08:27,780
so we're going to be publishing very

229
00:08:27,780 --> 00:08:29,879
shortly a document called the minimum

230
00:08:29,879 --> 00:08:31,860
requirements of Vex the vulnerability

231
00:08:31,860 --> 00:08:33,899
exploitability exchange which will allow

232
00:08:33,899 --> 00:08:37,620
an organization to say yes uh this or

233
00:08:37,620 --> 00:08:39,899
there is a vulnerability in here but it

234
00:08:39,899 --> 00:08:41,760
doesn't actually affect the security of

235
00:08:41,760 --> 00:08:43,559
a software and being able to communicate

236
00:08:43,559 --> 00:08:45,540
that at scale will help us prioritize

237
00:08:45,540 --> 00:08:47,279
and make sure we're really focusing on

238
00:08:47,279 --> 00:08:48,839
the vulnerabilities that matter

239
00:08:48,839 --> 00:08:51,240
and increasingly we're interested in the

240
00:08:51,240 --> 00:08:53,580
security of an s-bomb so some of it is

241
00:08:53,580 --> 00:08:54,839
pretty basic

242
00:08:54,839 --> 00:08:56,820
you should sign your s-clock how should

243
00:08:56,820 --> 00:08:58,500
you sign your s-bomb well if you have

244
00:08:58,500 --> 00:09:00,540
the ability to sign your software use

245
00:09:00,540 --> 00:09:02,100
that key and if you don't have the

246
00:09:02,100 --> 00:09:03,540
ability to use it to sign your software

247
00:09:03,540 --> 00:09:05,339
well then we've got bigger problems so

248
00:09:05,339 --> 00:09:06,839
let's focus on sort of overall

249
00:09:06,839 --> 00:09:08,399
modernization

250
00:09:08,399 --> 00:09:10,680
and the last step is going to be how do

251
00:09:10,680 --> 00:09:12,720
we verify that the data is true how do

252
00:09:12,720 --> 00:09:14,940
we actually show that there is a path

253
00:09:14,940 --> 00:09:18,060
that comes from my build process so that

254
00:09:18,060 --> 00:09:20,279
it's not just trust me but it's actually

255
00:09:20,279 --> 00:09:22,380
we can have some artifacts that have a

256
00:09:22,380 --> 00:09:24,300
full chain of trust and we're very

257
00:09:24,300 --> 00:09:27,060
excited to see that continue to evolve I

258
00:09:27,060 --> 00:09:30,660
think that's now in early days but like

259
00:09:30,660 --> 00:09:32,519
all security processes we need to start

260
00:09:32,519 --> 00:09:35,399
with a crawl then walk then run hope we

261
00:09:35,399 --> 00:09:36,959
have a very productive day and I'm

262
00:09:36,959 --> 00:09:38,160
looking forward to having conversation

263
00:09:38,160 --> 00:09:39,540
if anyone would like to know more about

264
00:09:39,540 --> 00:09:43,580
sisa's work email us at s bomb

265
00:09:43,580 --> 00:09:47,540
sisa.dhs.gov thanks so much

266
00:09:48,120 --> 00:09:51,540
awesome so to summarize there are two

267
00:09:51,540 --> 00:09:54,600
two formats for esbom that you know

268
00:09:54,600 --> 00:09:57,060
again boiling that this down to what can

269
00:09:57,060 --> 00:09:59,220
you practically do between now and June

270
00:09:59,220 --> 00:10:01,500
if you are mandated to comply with

271
00:10:01,500 --> 00:10:04,080
Biden's executive order

272
00:10:04,080 --> 00:10:08,880
two formats spdx Cyclone DX pick one and

273
00:10:08,880 --> 00:10:11,339
even if you don't worry about don't know

274
00:10:11,339 --> 00:10:12,959
which one to pick I would say pick

275
00:10:12,959 --> 00:10:14,940
either one it's it's not a bad choice to

276
00:10:14,940 --> 00:10:16,920
pick either one uh there are tools

277
00:10:16,920 --> 00:10:18,240
available to create both there are also

278
00:10:18,240 --> 00:10:20,040
tools available or being built to make

279
00:10:20,040 --> 00:10:21,899
sure that you can you know interoperate

280
00:10:21,899 --> 00:10:23,220
between the two and convert from one to

281
00:10:23,220 --> 00:10:25,019
another the second thing that you need

282
00:10:25,019 --> 00:10:28,019
to do is understand whether you need to

283
00:10:28,019 --> 00:10:30,360
generate a Pex file I would say if

284
00:10:30,360 --> 00:10:32,580
you're hard-pressed for time think of it

285
00:10:32,580 --> 00:10:34,380
like a phase two project like do your

286
00:10:34,380 --> 00:10:36,540
s-bombs first and then add Vex later on

287
00:10:36,540 --> 00:10:39,060
because Vex basically I you know helps

288
00:10:39,060 --> 00:10:41,279
you identify where you know which of the

289
00:10:41,279 --> 00:10:43,019
vulnerabilities that you have is

290
00:10:43,019 --> 00:10:45,060
exploitable ETC and you may need to do

291
00:10:45,060 --> 00:10:47,160
some additional work to get that data in

292
00:10:47,160 --> 00:10:49,500
place so that's step number two and then

293
00:10:49,500 --> 00:10:51,540
of course things like salsa Etc and

294
00:10:51,540 --> 00:10:52,380
other things that will help you

295
00:10:52,380 --> 00:10:54,120
establish provenance signatures those

296
00:10:54,120 --> 00:10:55,500
are all things that I think you can face

297
00:10:55,500 --> 00:10:58,740
down the road either could be phase two

298
00:10:58,740 --> 00:11:00,660
phase three and Beyond so if you were to

299
00:11:00,660 --> 00:11:02,160
ask me I would say create your s-bomb

300
00:11:02,160 --> 00:11:03,899
first that's step one step two would be

301
00:11:03,899 --> 00:11:05,700
think about signing step three would be

302
00:11:05,700 --> 00:11:08,100
add Vex to it as a as an addition would

303
00:11:08,100 --> 00:11:13,160
you agree Ella yeah yeah I do Andy sorry

304
00:11:13,160 --> 00:11:17,100
the uh the the mystery of Vex is

305
00:11:17,100 --> 00:11:19,560
is the cve that is in the dependency

306
00:11:19,560 --> 00:11:22,440
either one two three levels transitively

307
00:11:22,440 --> 00:11:24,420
down the call graph actually reachable

308
00:11:24,420 --> 00:11:27,720
so for example worst case scenario is a

309
00:11:27,720 --> 00:11:30,779
remote code execution can somebody

310
00:11:30,779 --> 00:11:34,920
do a maybe a Shell Shocked looking dump

311
00:11:34,920 --> 00:11:37,800
in a specific bad string into my

312
00:11:37,800 --> 00:11:40,680
web-facing server into my into my socket

313
00:11:40,680 --> 00:11:43,140
and end up triggering

314
00:11:43,140 --> 00:11:46,079
Miss um was what I'm looking for an out

315
00:11:46,079 --> 00:11:48,300
of context execution so untrusted code

316
00:11:48,300 --> 00:11:50,459
being executed and then potentially

317
00:11:50,459 --> 00:11:52,440
firing a reverse shell that's the worst

318
00:11:52,440 --> 00:11:53,880
case scenario for any web application

319
00:11:53,880 --> 00:11:56,339
gives an attacker a foothold that they

320
00:11:56,339 --> 00:11:58,040
can then begin to enumerate what's

321
00:11:58,040 --> 00:12:00,360
within that let's say a container at

322
00:12:00,360 --> 00:12:02,220
this point so

323
00:12:02,220 --> 00:12:05,579
Vex aims to say okay

324
00:12:05,579 --> 00:12:08,760
we have got shell shock five layers deep

325
00:12:08,760 --> 00:12:10,860
um to pick any example

326
00:12:10,860 --> 00:12:13,380
but actually uh

327
00:12:13,380 --> 00:12:16,260
we are going to remove Bash from this

328
00:12:16,260 --> 00:12:18,480
container image so there is no mechanism

329
00:12:18,480 --> 00:12:20,700
for that

330
00:12:20,700 --> 00:12:22,800
um that particular function signature in

331
00:12:22,800 --> 00:12:26,100
bash to be executed so we know that even

332
00:12:26,100 --> 00:12:27,839
if this is exploited

333
00:12:27,839 --> 00:12:30,060
even if that malicious payload is

334
00:12:30,060 --> 00:12:31,920
written into our web server there's no

335
00:12:31,920 --> 00:12:34,079
way this can be triggered the another

336
00:12:34,079 --> 00:12:36,180
way you can do this is uh static

337
00:12:36,180 --> 00:12:38,339
analysis of the call reachability graph

338
00:12:38,339 --> 00:12:40,800
so you can think about that kind of like

339
00:12:40,800 --> 00:12:42,600
decomposing an application into an

340
00:12:42,600 --> 00:12:45,959
abstract syntax tree and then walking it

341
00:12:45,959 --> 00:12:48,959
and if the piece of code for example you

342
00:12:48,959 --> 00:12:50,160
might have a vulnerable library with

343
00:12:50,160 --> 00:12:53,040
three function signatures and you know

344
00:12:53,040 --> 00:12:54,779
that one of those functioning signatures

345
00:12:54,779 --> 00:12:56,519
just doesn't get called in the code at

346
00:12:56,519 --> 00:13:00,420
all so you can either walk that AST with

347
00:13:00,420 --> 00:13:03,180
the breachability analysis tool code ql

348
00:13:03,180 --> 00:13:05,820
sem grep sneak they'll all have these

349
00:13:05,820 --> 00:13:07,940
capabilities

350
00:13:07,940 --> 00:13:11,579
are all able to analyze and understand

351
00:13:11,579 --> 00:13:14,279
whether that code's reachable you can

352
00:13:14,279 --> 00:13:15,720
also with some languages do something

353
00:13:15,720 --> 00:13:18,180
that's a bit like tree shaking so just

354
00:13:18,180 --> 00:13:21,600
removing the code if it's uh

355
00:13:21,600 --> 00:13:24,120
an interpreted language where the source

356
00:13:24,120 --> 00:13:25,860
is fed to an interpreter at runtime we

357
00:13:25,860 --> 00:13:27,839
can just remove the source code

358
00:13:27,839 --> 00:13:30,000
but the complexity of doing this is

359
00:13:30,000 --> 00:13:32,880
really quite a heavy burden on a user so

360
00:13:32,880 --> 00:13:34,920
as you say The Ordering of these things

361
00:13:34,920 --> 00:13:37,500
publishing effects for a piece of

362
00:13:37,500 --> 00:13:38,940
software that you're that you're

363
00:13:38,940 --> 00:13:40,139
publishing

364
00:13:40,139 --> 00:13:42,540
has to come with a deep level of

365
00:13:42,540 --> 00:13:44,160
engendered trust

366
00:13:44,160 --> 00:13:47,100
because if the Vex is wrong and people

367
00:13:47,100 --> 00:13:49,079
then run vulnerable code and production

368
00:13:49,079 --> 00:13:50,940
there's a question potentially of

369
00:13:50,940 --> 00:13:54,060
liability when deeply uncharted waters

370
00:13:54,060 --> 00:13:56,339
at this point so

371
00:13:56,339 --> 00:13:58,200
Vex is not something that we've seen

372
00:13:58,200 --> 00:14:00,240
particularly widely adopted as yet there

373
00:14:00,240 --> 00:14:02,100
has recently uh

374
00:14:02,100 --> 00:14:04,200
Affiliated version of the specification

375
00:14:04,200 --> 00:14:08,060
called openvex which I'm yet to dig into

376
00:14:08,060 --> 00:14:10,440
it will be interesting to see I believe

377
00:14:10,440 --> 00:14:12,240
they're they are compatible it's a

378
00:14:12,240 --> 00:14:14,639
subset from what I understand

379
00:14:14,639 --> 00:14:17,100
yeah I do not uh know if they are

380
00:14:17,100 --> 00:14:19,980
compatible or not but yeah um yes so it

381
00:14:19,980 --> 00:14:23,940
is uh it's definitely early days for

382
00:14:23,940 --> 00:14:25,560
these things if s bombs are nice and

383
00:14:25,560 --> 00:14:27,600
then Vex is just a twinkle in the the

384
00:14:27,600 --> 00:14:29,399
proverbial milk bonsai

385
00:14:29,399 --> 00:14:31,620
and uh and and then finally we get to

386
00:14:31,620 --> 00:14:34,200
actually signing these things Alan

387
00:14:34,200 --> 00:14:36,420
paints a perfect picture if we have the

388
00:14:36,420 --> 00:14:38,940
capability to sign our software then it

389
00:14:38,940 --> 00:14:40,620
makes sense for anything that we want to

390
00:14:40,620 --> 00:14:42,959
give that same level of trust to because

391
00:14:42,959 --> 00:14:44,940
of course the signature just says the

392
00:14:44,940 --> 00:14:46,620
person in control of this cryptographic

393
00:14:46,620 --> 00:14:49,500
key at this point in time liked this

394
00:14:49,500 --> 00:14:51,540
thing enough to put their name on it

395
00:14:51,540 --> 00:14:53,579
it's not really anything else it doesn't

396
00:14:53,579 --> 00:14:55,860
mean that the artifacts sanctity is

397
00:14:55,860 --> 00:14:57,180
secure it doesn't mean that it's

398
00:14:57,180 --> 00:15:00,060
composition is necessarily secure it

399
00:15:00,060 --> 00:15:02,160
just means the person making a point in

400
00:15:02,160 --> 00:15:03,660
time judgment call

401
00:15:03,660 --> 00:15:06,899
wanted to put a stamp on it so the

402
00:15:06,899 --> 00:15:09,959
ability to then do that signature

403
00:15:09,959 --> 00:15:12,660
signing process for additional metadata

404
00:15:12,660 --> 00:15:14,100
that you publish about your software

405
00:15:14,100 --> 00:15:17,100
awesome yeah definitely worth doing but

406
00:15:17,100 --> 00:15:18,839
really the question is

407
00:15:18,839 --> 00:15:21,120
is the thing that you're signing do you

408
00:15:21,120 --> 00:15:22,320
have a guarantee that you're actually

409
00:15:22,320 --> 00:15:25,019
giving with that artifact if you're just

410
00:15:25,019 --> 00:15:26,760
signing up for the sake of saying it's

411
00:15:26,760 --> 00:15:28,260
passed across my desk and I'm just going

412
00:15:28,260 --> 00:15:30,180
to put a rub stamp on it

413
00:15:30,180 --> 00:15:34,019
that's not the level of of trust and

414
00:15:34,019 --> 00:15:35,519
security that we want because there is

415
00:15:35,519 --> 00:15:37,980
nothing fundamentally there

416
00:15:37,980 --> 00:15:39,480
um and then the final point in that

417
00:15:39,480 --> 00:15:40,680
process

418
00:15:40,680 --> 00:15:42,360
is

419
00:15:42,360 --> 00:15:44,100
if we are publishing that Vex document

420
00:15:44,100 --> 00:15:46,260
we have to be correct so we have to be

421
00:15:46,260 --> 00:15:48,899
running not only perhaps the manual

422
00:15:48,899 --> 00:15:50,519
review or the manual exploitability

423
00:15:50,519 --> 00:15:52,079
check to make sure that we're not

424
00:15:52,079 --> 00:15:53,880
triggering that remote code execution

425
00:15:53,880 --> 00:15:56,459
but also some automation around it a

426
00:15:56,459 --> 00:15:58,740
test harness this is where the automated

427
00:15:58,740 --> 00:15:59,820
tooling comes in the reachability

428
00:15:59,820 --> 00:16:01,019
analysis

429
00:16:01,019 --> 00:16:02,459
because

430
00:16:02,459 --> 00:16:05,100
the Temptation will be to essentially

431
00:16:05,100 --> 00:16:06,899
allow that document to atrophy it's done

432
00:16:06,899 --> 00:16:09,000
once yes we're happy software moves

433
00:16:09,000 --> 00:16:10,680
quickly it evolves this is what we want

434
00:16:10,680 --> 00:16:14,100
so if we then make a second release

435
00:16:14,100 --> 00:16:17,579
without revalidating the sanctity or the

436
00:16:17,579 --> 00:16:20,639
safety of that Vex document we risk

437
00:16:20,639 --> 00:16:22,920
undermining the trust that is absolutely

438
00:16:22,920 --> 00:16:25,399
necessary for

439
00:16:25,399 --> 00:16:28,680
ultimately the internet I'd say but uh

440
00:16:28,680 --> 00:16:31,019
for for the exchange of cryptographic

441
00:16:31,019 --> 00:16:33,420
information and and trust and signing so

442
00:16:33,420 --> 00:16:35,820
uh yes small soapbox on Vex I'm super

443
00:16:35,820 --> 00:16:37,920
excited for it but it has to be done

444
00:16:37,920 --> 00:16:41,579
with a whole bunch of caveats yeah yeah

445
00:16:41,579 --> 00:16:43,800
um the next question I think that's a

446
00:16:43,800 --> 00:16:46,500
good question for you Andy uh a quick

447
00:16:46,500 --> 00:16:48,120
question that comes up whose job is it

448
00:16:48,120 --> 00:16:50,100
is it engineering team's job to generate

449
00:16:50,100 --> 00:16:51,300
these things at build time is it the

450
00:16:51,300 --> 00:16:53,639
devops team is it uh the security team

451
00:16:53,639 --> 00:16:55,380
so how would you you know these

452
00:16:55,380 --> 00:16:56,759
questions come up in organizations all

453
00:16:56,759 --> 00:16:58,259
the time so how would you answer that

454
00:16:58,259 --> 00:16:59,279
question

455
00:16:59,279 --> 00:17:01,620
uh yes it is it is a great question so

456
00:17:01,620 --> 00:17:03,240
we can consider

457
00:17:03,240 --> 00:17:05,579
the composition of an s-bomb

458
00:17:05,579 --> 00:17:09,900
to be similar to cve introspection so we

459
00:17:09,900 --> 00:17:11,339
already scan

460
00:17:11,339 --> 00:17:14,819
package manifests for dependencies and

461
00:17:14,819 --> 00:17:18,359
we take those dependency names so for a

462
00:17:18,359 --> 00:17:22,199
package URL npm left pad version 3.4

463
00:17:22,199 --> 00:17:25,339
whatever 0.3

464
00:17:25,799 --> 00:17:28,020
that that is a common practice in

465
00:17:28,020 --> 00:17:30,179
organizations because we use that

466
00:17:30,179 --> 00:17:32,880
information to go to our cve feeds that

467
00:17:32,880 --> 00:17:34,919
are published by in that case the node

468
00:17:34,919 --> 00:17:38,340
security project and then embellished by

469
00:17:38,340 --> 00:17:39,000
um

470
00:17:39,000 --> 00:17:40,919
software security vendors

471
00:17:40,919 --> 00:17:42,780
to say well actually that version is

472
00:17:42,780 --> 00:17:45,960
vulnerable and it's got a CV rating of X

473
00:17:45,960 --> 00:17:48,120
and you can then make a decision whether

474
00:17:48,120 --> 00:17:49,260
or not to ship that to production

475
00:17:49,260 --> 00:17:52,320
generating an s-bomb is really a very

476
00:17:52,320 --> 00:17:54,120
similar experience

477
00:17:54,120 --> 00:17:56,820
It generally involves going to a package

478
00:17:56,820 --> 00:17:58,320
manifest

479
00:17:58,320 --> 00:18:00,059
pulling out the versions

480
00:18:00,059 --> 00:18:01,860
and placing those into another metadata

481
00:18:01,860 --> 00:18:04,440
file which is your spdx or Cyclone DX

482
00:18:04,440 --> 00:18:07,140
packaging formats so organizations have

483
00:18:07,140 --> 00:18:09,299
the capability and the patterns and

484
00:18:09,299 --> 00:18:11,520
practices to do that already

485
00:18:11,520 --> 00:18:13,860
what is that doing

486
00:18:13,860 --> 00:18:18,059
that is asking a static manifest

487
00:18:18,059 --> 00:18:20,520
for its information and potentially not

488
00:18:20,520 --> 00:18:23,039
including things like did I just W get

489
00:18:23,039 --> 00:18:24,900
something from GitHub did I do a git

490
00:18:24,900 --> 00:18:26,520
clone for a bit of Open Source Code that

491
00:18:26,520 --> 00:18:27,660
I'm going to package up into my final

492
00:18:27,660 --> 00:18:28,740
artifact

493
00:18:28,740 --> 00:18:30,000
so

494
00:18:30,000 --> 00:18:31,620
there is a Nuance there immediately

495
00:18:31,620 --> 00:18:33,600
already as to

496
00:18:33,600 --> 00:18:35,340
what is the final artifacts that's being

497
00:18:35,340 --> 00:18:37,380
shipped there's also consideration here

498
00:18:37,380 --> 00:18:39,000
are we talking about generating an

499
00:18:39,000 --> 00:18:41,400
s-bomb for a container image which is

500
00:18:41,400 --> 00:18:42,960
all the runtime dependencies in the file

501
00:18:42,960 --> 00:18:44,580
system that we need to run an

502
00:18:44,580 --> 00:18:46,440
application or are we talking about a

503
00:18:46,440 --> 00:18:48,539
library that is then

504
00:18:48,539 --> 00:18:50,820
composed and consumed as part of a

505
00:18:50,820 --> 00:18:53,280
larger piece so

506
00:18:53,280 --> 00:18:55,320
putting that in the in the the problem

507
00:18:55,320 --> 00:18:57,360
space rather than necessarily answering

508
00:18:57,360 --> 00:19:00,600
it a build time we have the most

509
00:19:00,600 --> 00:19:04,500
information to build a complete s-bomb

510
00:19:04,500 --> 00:19:06,600
but if I give you an s-bomb

511
00:19:06,600 --> 00:19:08,160
you should probably revalidate it

512
00:19:08,160 --> 00:19:10,380
against the contents file system because

513
00:19:10,380 --> 00:19:12,240
plenty of s-bombs are wrong

514
00:19:12,240 --> 00:19:13,620
it's

515
00:19:13,620 --> 00:19:15,960
perhaps even uh the question for the

516
00:19:15,960 --> 00:19:18,179
package producer do you consider that

517
00:19:18,179 --> 00:19:21,780
actually part of the the software that

518
00:19:21,780 --> 00:19:24,860
your software you've produced consumes

519
00:19:24,860 --> 00:19:27,120
and then finally we've got so build

520
00:19:27,120 --> 00:19:30,000
packaging ingestion

521
00:19:30,000 --> 00:19:31,260
um the difference there build is

522
00:19:31,260 --> 00:19:32,880
obviously in the build system

523
00:19:32,880 --> 00:19:35,520
packaging is when it's being pushed onto

524
00:19:35,520 --> 00:19:38,039
the npm registry for example

525
00:19:38,039 --> 00:19:40,020
but what about ingestion well if we're a

526
00:19:40,020 --> 00:19:42,059
regulated organization we probably pull

527
00:19:42,059 --> 00:19:44,400
code in third party code into our

528
00:19:44,400 --> 00:19:46,200
organization across some form of

529
00:19:46,200 --> 00:19:49,440
perimeter zero trust is a wonderful uh

530
00:19:49,440 --> 00:19:51,660
and uh necessary part of modern security

531
00:19:51,660 --> 00:19:53,940
but it doesn't mean that we don't still

532
00:19:53,940 --> 00:19:55,980
establish a perimeter we don't run all

533
00:19:55,980 --> 00:19:58,440
of our kubernetes nodes publicly because

534
00:19:58,440 --> 00:19:59,880
defense and depth means that we don't

535
00:19:59,880 --> 00:20:01,020
throw the baby out with the bath water

536
00:20:01,020 --> 00:20:03,240
so when we're ingesting third-party code

537
00:20:03,240 --> 00:20:05,640
into our organizations we still care

538
00:20:05,640 --> 00:20:08,160
about its composition we should still at

539
00:20:08,160 --> 00:20:10,320
the at the top level of risk and

540
00:20:10,320 --> 00:20:13,440
compliance we should still analyze those

541
00:20:13,440 --> 00:20:15,780
packages which still run static analysis

542
00:20:15,780 --> 00:20:18,000
on the code itself we can still run

543
00:20:18,000 --> 00:20:19,799
those code reachability questions

544
00:20:19,799 --> 00:20:22,679
against those packages

545
00:20:22,679 --> 00:20:24,360
and ultimately at some point in the

546
00:20:24,360 --> 00:20:25,380
future we probably want to do

547
00:20:25,380 --> 00:20:27,179
contributor analysis as well the open

548
00:20:27,179 --> 00:20:29,880
ssf tried to do this and uh kind of had

549
00:20:29,880 --> 00:20:31,260
to back out because there's problems of

550
00:20:31,260 --> 00:20:33,720
collusion you can't actually unmask all

551
00:20:33,720 --> 00:20:35,220
the Linux kernel contributors because

552
00:20:35,220 --> 00:20:37,200
they may be under authoritarian regimes

553
00:20:37,200 --> 00:20:38,700
we don't want people being pressured to

554
00:20:38,700 --> 00:20:40,200
put back doors into the software that we

555
00:20:40,200 --> 00:20:41,520
know and love

556
00:20:41,520 --> 00:20:42,960
so

557
00:20:42,960 --> 00:20:44,520
there are there are questions of trust

558
00:20:44,520 --> 00:20:46,559
throughout this whole process and

559
00:20:46,559 --> 00:20:48,900
ultimately what s-bombs do is give us a

560
00:20:48,900 --> 00:20:50,460
better visibility into where we might

561
00:20:50,460 --> 00:20:52,740
have a vulnerability

562
00:20:52,740 --> 00:20:55,140
but they do not solve the software

563
00:20:55,140 --> 00:20:57,480
supply chain security issue they just

564
00:20:57,480 --> 00:21:00,059
enhance our view and give us more data

565
00:21:00,059 --> 00:21:02,220
to introspect

566
00:21:02,220 --> 00:21:05,460
got it okay so uh just to kind of answer

567
00:21:05,460 --> 00:21:07,559
you bring it back to what do you

568
00:21:07,559 --> 00:21:09,240
operationally do and how do you go about

569
00:21:09,240 --> 00:21:11,520
you know which team actually creates

570
00:21:11,520 --> 00:21:14,419
your s-bombs the recommendation here is

571
00:21:14,419 --> 00:21:16,500
sbos need to be created at build time

572
00:21:16,500 --> 00:21:18,120
and

573
00:21:18,120 --> 00:21:21,120
um therefore the devops person does need

574
00:21:21,120 --> 00:21:22,679
to be involved but I think the strategy

575
00:21:22,679 --> 00:21:24,240
of what is bumps need to be created

576
00:21:24,240 --> 00:21:25,740
needs to come from the Security Experts

577
00:21:25,740 --> 00:21:28,919
so Security Experts appsec prod SEC Etc

578
00:21:28,919 --> 00:21:30,419
teams are the ones that basically

579
00:21:30,419 --> 00:21:33,059
determine what do you need to do for the

580
00:21:33,059 --> 00:21:35,220
s-bombs tell work with the engineering

581
00:21:35,220 --> 00:21:36,900
teams and the devops teams to go ahead

582
00:21:36,900 --> 00:21:38,520
and Implement that as part of the CI

583
00:21:38,520 --> 00:21:41,820
pipeline to to create it right yes I did

584
00:21:41,820 --> 00:21:43,559
get slightly sidetracked on the actual

585
00:21:43,559 --> 00:21:45,120
answer to the question

586
00:21:45,120 --> 00:21:48,419
um I think the uh that devops Engineers

587
00:21:48,419 --> 00:21:50,700
need to need to generate these things

588
00:21:50,700 --> 00:21:53,100
but that question of exactly how many

589
00:21:53,100 --> 00:21:54,900
artifacts go in

590
00:21:54,900 --> 00:21:56,039
um it is really something the security

591
00:21:56,039 --> 00:21:57,960
team should be signing off on

592
00:21:57,960 --> 00:22:00,419
awesome the next question is okay we've

593
00:22:00,419 --> 00:22:01,980
generated s-bombs we've decided what

594
00:22:01,980 --> 00:22:03,480
formats are created in and we've

595
00:22:03,480 --> 00:22:04,860
generated as bombs during the build step

596
00:22:04,860 --> 00:22:07,320
where do you store them is there even a

597
00:22:07,320 --> 00:22:09,900
standard at this time and after you

598
00:22:09,900 --> 00:22:11,640
store them how do you share them so

599
00:22:11,640 --> 00:22:13,200
let's talk about that and we asked this

600
00:22:13,200 --> 00:22:16,260
question to Rose and this is her answer

601
00:22:16,260 --> 00:22:18,480
in the recorded video

602
00:22:18,480 --> 00:22:21,360
the storage and distribution of s-bombs

603
00:22:21,360 --> 00:22:23,460
is something that up until this point

604
00:22:23,460 --> 00:22:25,620
most people have had to figure out for

605
00:22:25,620 --> 00:22:27,659
themselves there's no standardized best

606
00:22:27,659 --> 00:22:30,539
practices as the focus has mostly been

607
00:22:30,539 --> 00:22:33,240
on simply generating s-bombs

608
00:22:33,240 --> 00:22:35,700
um when we think about where s-bombs

609
00:22:35,700 --> 00:22:37,380
should be stored I think the

610
00:22:37,380 --> 00:22:40,080
considerations around the storage itself

611
00:22:40,080 --> 00:22:42,659
is really not much different than any

612
00:22:42,659 --> 00:22:45,659
other type of cloud native artifact the

613
00:22:45,659 --> 00:22:47,340
same considerations are still at play

614
00:22:47,340 --> 00:22:50,039
life cycle management caching versioning

615
00:22:50,039 --> 00:22:52,320
Access Control

616
00:22:52,320 --> 00:22:54,360
um when we think about where we should

617
00:22:54,360 --> 00:22:57,179
store s-bombs those qualities around you

618
00:22:57,179 --> 00:22:58,260
know where you're actually going to put

619
00:22:58,260 --> 00:23:00,539
it are less specific to s-bombs

620
00:23:00,539 --> 00:23:01,500
themselves

621
00:23:01,500 --> 00:23:04,320
but what is unique to s-bombs when we

622
00:23:04,320 --> 00:23:06,419
think about storage is their association

623
00:23:06,419 --> 00:23:08,700
with an artifact that they are

624
00:23:08,700 --> 00:23:11,100
describing and really making sure that

625
00:23:11,100 --> 00:23:12,480
there is some type of meaningful

626
00:23:12,480 --> 00:23:14,580
relationship between the s-bomb and the

627
00:23:14,580 --> 00:23:17,340
artifact right ideally If you're

628
00:23:17,340 --> 00:23:19,140
receiving a piece of software from a

629
00:23:19,140 --> 00:23:21,240
vendor you would have access to the

630
00:23:21,240 --> 00:23:23,179
relevant parts of the s-bomb

631
00:23:23,179 --> 00:23:26,580
that describe that software in the same

632
00:23:26,580 --> 00:23:29,640
place or very near to where you are

633
00:23:29,640 --> 00:23:32,840
pulling the software from

634
00:23:33,299 --> 00:23:36,840
um as of right now how s-bombs should be

635
00:23:36,840 --> 00:23:40,200
stored is less clear there are lots of

636
00:23:40,200 --> 00:23:42,360
discussions taking place that are trying

637
00:23:42,360 --> 00:23:45,120
to answer this very question of how

638
00:23:45,120 --> 00:23:48,120
um so while there's no good answer I do

639
00:23:48,120 --> 00:23:49,919
think that there's a couple things to

640
00:23:49,919 --> 00:23:52,860
consider as you know we work to try to

641
00:23:52,860 --> 00:23:55,380
answer this and the first is access

642
00:23:55,380 --> 00:23:57,840
control and the parties involved in

643
00:23:57,840 --> 00:24:01,020
Sharing if there's no reason to restrict

644
00:24:01,020 --> 00:24:03,539
access to an s-bomb then sharing is a

645
00:24:03,539 --> 00:24:05,340
lot easier right you can post it on

646
00:24:05,340 --> 00:24:07,919
GitHub on your website like any public

647
00:24:07,919 --> 00:24:10,380
download location but when there's a

648
00:24:10,380 --> 00:24:12,179
need to restrict access for certain

649
00:24:12,179 --> 00:24:14,520
parties things start to get a little

650
00:24:14,520 --> 00:24:16,140
more complicated and there's more to

651
00:24:16,140 --> 00:24:18,120
consider

652
00:24:18,120 --> 00:24:20,700
um next is the actual data to be shared

653
00:24:20,700 --> 00:24:23,100
s-bonds are after all just a collection

654
00:24:23,100 --> 00:24:25,500
of metadata and some of that metadata

655
00:24:25,500 --> 00:24:27,840
may not be appropriate to share without

656
00:24:27,840 --> 00:24:32,159
some sort of Eula or NDA in place

657
00:24:32,159 --> 00:24:33,780
um we need to consider the mechanisms

658
00:24:33,780 --> 00:24:36,240
for sharing so likely having some type

659
00:24:36,240 --> 00:24:38,400
of network with the ability to push and

660
00:24:38,400 --> 00:24:42,000
pull documents or parts of documents

661
00:24:42,000 --> 00:24:45,240
um life cycle management of s-bomb

662
00:24:45,240 --> 00:24:47,700
metadata and protocol around when

663
00:24:47,700 --> 00:24:50,400
certain metadata might expire or no

664
00:24:50,400 --> 00:24:52,860
longer be shareable and this is just

665
00:24:52,860 --> 00:24:54,659
kind of the tip of the iceberg when we

666
00:24:54,659 --> 00:24:56,700
think about the best way to distribute

667
00:24:56,700 --> 00:25:00,120
s-bombs which I think illustrates why

668
00:25:00,120 --> 00:25:02,159
there's no canonical way to do this yet

669
00:25:02,159 --> 00:25:05,780
right there's a lot to consider

670
00:25:08,580 --> 00:25:11,100
so again there is no clear and canonical

671
00:25:11,100 --> 00:25:13,260
answer for this but a few considerations

672
00:25:13,260 --> 00:25:15,299
beyond what I've already kind of

673
00:25:15,299 --> 00:25:16,980
mentioned for how and where an s-bomb

674
00:25:16,980 --> 00:25:19,679
should be distributed needs to first and

675
00:25:19,679 --> 00:25:21,840
foremost consider what is the software

676
00:25:21,840 --> 00:25:24,539
and who is the consumer obviously if

677
00:25:24,539 --> 00:25:26,340
you're downloading an app from the App

678
00:25:26,340 --> 00:25:28,679
Store you're not expecting an s-bomb to

679
00:25:28,679 --> 00:25:30,720
come with it right but if you're

680
00:25:30,720 --> 00:25:33,299
receiving source code from a vendor to

681
00:25:33,299 --> 00:25:35,580
build into your product you probably

682
00:25:35,580 --> 00:25:37,620
have more interest in the contents of

683
00:25:37,620 --> 00:25:38,720
that code

684
00:25:38,720 --> 00:25:41,220
similarly if you have proprietary

685
00:25:41,220 --> 00:25:43,140
software whose s-bomb contains

686
00:25:43,140 --> 00:25:45,240
privileged information you're not just

687
00:25:45,240 --> 00:25:47,039
going to give it to anybody who asked

688
00:25:47,039 --> 00:25:48,659
for a copy of your s-bomb so

689
00:25:48,659 --> 00:25:50,580
understanding the exchanging parties is

690
00:25:50,580 --> 00:25:53,400
important if we look through it from the

691
00:25:53,400 --> 00:25:55,740
lens of Open Source I think the answer

692
00:25:55,740 --> 00:25:58,559
is easier because there's less Access

693
00:25:58,559 --> 00:26:01,080
Control considerations in the open

694
00:26:01,080 --> 00:26:02,299
source contact

695
00:26:02,299 --> 00:26:05,460
context ideally s-bombs would be

696
00:26:05,460 --> 00:26:07,799
distributed with the artifact that

697
00:26:07,799 --> 00:26:10,080
they're describing so most likely in

698
00:26:10,080 --> 00:26:11,940
some sort of registry with an easy to

699
00:26:11,940 --> 00:26:13,980
use API or client tool to pull the

700
00:26:13,980 --> 00:26:16,640
necessary information

701
00:26:19,799 --> 00:26:22,140
awesome so to boil this down to again

702
00:26:22,140 --> 00:26:25,320
actionable you know and and uh results

703
00:26:25,320 --> 00:26:27,779
uh we've seen at Deep factors we work

704
00:26:27,779 --> 00:26:29,039
with various customers that customers

705
00:26:29,039 --> 00:26:30,840
choose either Registries like jfrog

706
00:26:30,840 --> 00:26:33,779
artifactory or they're also uh sometimes

707
00:26:33,779 --> 00:26:36,480
use tools like servicenow even or just

708
00:26:36,480 --> 00:26:39,299
file repos to store uh their s-bombs at

709
00:26:39,299 --> 00:26:41,039
this time uh the most important thing

710
00:26:41,039 --> 00:26:42,539
like rose mentioned is not just where

711
00:26:42,539 --> 00:26:44,039
you store it but also how you give

712
00:26:44,039 --> 00:26:45,600
access to it and who's supposed to

713
00:26:45,600 --> 00:26:48,059
access what is bombs so thinking around

714
00:26:48,059 --> 00:26:50,340
that part and you know making sure that

715
00:26:50,340 --> 00:26:51,600
you have the right you work with your

716
00:26:51,600 --> 00:26:53,760
ITP people to put the right checks and

717
00:26:53,760 --> 00:26:54,840
balances from an authorization

718
00:26:54,840 --> 00:26:57,000
perspective on your OCTA or your SSO

719
00:26:57,000 --> 00:26:59,820
provider to restrict access to certain

720
00:26:59,820 --> 00:27:01,799
users to certain types of response

721
00:27:01,799 --> 00:27:04,559
that's the the the challenge the

722
00:27:04,559 --> 00:27:06,720
operational challenge so uh thinking

723
00:27:06,720 --> 00:27:10,440
through that is is the uh the

724
00:27:10,440 --> 00:27:14,640
painstaking work part the next question

725
00:27:14,640 --> 00:27:17,039
would be should organization should

726
00:27:17,039 --> 00:27:19,260
organizations be asking their vendors

727
00:27:19,260 --> 00:27:21,120
for sbon let's say you do have vendors

728
00:27:21,120 --> 00:27:23,279
providing your software uh you know if

729
00:27:23,279 --> 00:27:24,480
they're if these vendors are selling

730
00:27:24,480 --> 00:27:25,440
into federal government of course

731
00:27:25,440 --> 00:27:27,419
they're mandated by the Biden executive

732
00:27:27,419 --> 00:27:29,700
order to provide their response but

733
00:27:29,700 --> 00:27:31,380
should if you guys are not a federal

734
00:27:31,380 --> 00:27:34,320
agency are you still going to benefit by

735
00:27:34,320 --> 00:27:36,179
asking for s-bombs

736
00:27:36,179 --> 00:27:37,980
um let's see what Rose has to say for

737
00:27:37,980 --> 00:27:40,159
that

738
00:27:40,740 --> 00:27:44,240
like most answers

739
00:27:44,580 --> 00:27:46,559
of the opinion that yes you should be

740
00:27:46,559 --> 00:27:48,480
asking your vendors and Cloud providers

741
00:27:48,480 --> 00:27:51,059
for s-bombs if the software you're

742
00:27:51,059 --> 00:27:53,460
consuming from them could be exploited

743
00:27:53,460 --> 00:27:57,720
which is most software not all but most

744
00:27:57,720 --> 00:28:00,179
um if nothing else as a way to establish

745
00:28:00,179 --> 00:28:02,520
trust with those vendors so if you

746
00:28:02,520 --> 00:28:04,380
receive an s-bomb from a vendor that

747
00:28:04,380 --> 00:28:06,539
you're consuming you can kind of do a

748
00:28:06,539 --> 00:28:08,400
sanity check you can verify that the

749
00:28:08,400 --> 00:28:10,440
binary they give you

750
00:28:10,440 --> 00:28:12,960
um matches the F-bomb that they give you

751
00:28:12,960 --> 00:28:15,720
and this kind of will give you an idea

752
00:28:15,720 --> 00:28:18,059
if the vendor you're working with has an

753
00:28:18,059 --> 00:28:21,360
idea about what's in their code and if

754
00:28:21,360 --> 00:28:23,159
you know the s-bomb only has two

755
00:28:23,159 --> 00:28:27,059
components and it's a huge binary with

756
00:28:27,059 --> 00:28:30,179
lots of dependencies then maybe that's a

757
00:28:30,179 --> 00:28:31,860
red flag maybe you have to kind of

758
00:28:31,860 --> 00:28:33,840
reevaluate if you should be using that

759
00:28:33,840 --> 00:28:35,700
vendor

760
00:28:35,700 --> 00:28:37,980
um the F-bomb from the vendor might also

761
00:28:37,980 --> 00:28:40,080
provide additional information that you

762
00:28:40,080 --> 00:28:41,520
wouldn't be able to glean from just the

763
00:28:41,520 --> 00:28:42,960
binary so maybe there's build time

764
00:28:42,960 --> 00:28:45,000
information in there that's relevant to

765
00:28:45,000 --> 00:28:47,460
the way you use your software

766
00:28:47,460 --> 00:28:49,080
um and three the s-bomb from the vendor

767
00:28:49,080 --> 00:28:51,299
can help you understand your exposure

768
00:28:51,299 --> 00:28:53,880
and risk when cves come out affecting

769
00:28:53,880 --> 00:28:56,760
components that you might be consuming

770
00:28:56,760 --> 00:28:59,580
um and I think the caveat to all of this

771
00:28:59,580 --> 00:29:01,980
is that if you're asking for s-bombs

772
00:29:01,980 --> 00:29:05,100
from your vendors then you need to have

773
00:29:05,100 --> 00:29:07,860
a way to make sense of that s-bomb so

774
00:29:07,860 --> 00:29:09,539
just asking and then letting it sit

775
00:29:09,539 --> 00:29:11,640
there isn't going to do you much good

776
00:29:11,640 --> 00:29:13,620
right you have to actually be able to

777
00:29:13,620 --> 00:29:15,360
parse the information and put it into

778
00:29:15,360 --> 00:29:17,779
use

779
00:29:24,539 --> 00:29:26,340
okay so this is an interesting question

780
00:29:26,340 --> 00:29:29,100
let's say you are the vendor you provide

781
00:29:29,100 --> 00:29:31,860
you create an espa you know your s-bomb

782
00:29:31,860 --> 00:29:34,440
has some serious vulnerabilities in it

783
00:29:34,440 --> 00:29:36,899
are you still going to go share that

784
00:29:36,899 --> 00:29:39,179
respond with customers or do you are you

785
00:29:39,179 --> 00:29:40,980
going to shy away and not share it until

786
00:29:40,980 --> 00:29:42,659
that vulnerability is fixed like what's

787
00:29:42,659 --> 00:29:44,700
what's the ethical thing to do here and

788
00:29:44,700 --> 00:29:46,500
also what's the Practical thing to do

789
00:29:46,500 --> 00:29:48,679
here

790
00:29:50,700 --> 00:29:52,919
so assuming that you regularly share

791
00:29:52,919 --> 00:29:55,200
s-bombs with your customers I would

792
00:29:55,200 --> 00:29:57,779
argue that not only is it okay but it's

793
00:29:57,779 --> 00:29:59,940
something you absolutely should be doing

794
00:29:59,940 --> 00:30:02,460
right if nothing else if for nothing

795
00:30:02,460 --> 00:30:06,179
else than to really establish trust

796
00:30:06,179 --> 00:30:08,460
um intentionally not just closing an

797
00:30:08,460 --> 00:30:10,140
s-bomb when you otherwise would because

798
00:30:10,140 --> 00:30:12,419
it has a critical cve

799
00:30:12,419 --> 00:30:15,659
um seems dishonest to me as a vendor I

800
00:30:15,659 --> 00:30:16,740
would think that you would want to

801
00:30:16,740 --> 00:30:18,240
position your customer to know and

802
00:30:18,240 --> 00:30:21,600
mitigate the risk of cves as excuse me

803
00:30:21,600 --> 00:30:23,520
as soon as possible and they can't

804
00:30:23,520 --> 00:30:25,440
mitigate what they don't know

805
00:30:25,440 --> 00:30:28,380
and you know notifying your customer of

806
00:30:28,380 --> 00:30:31,320
a high severity CBE that affects them

807
00:30:31,320 --> 00:30:34,200
um is something that can 100 be done

808
00:30:34,200 --> 00:30:36,240
without an s-bomb right like this is

809
00:30:36,240 --> 00:30:37,740
kind of typically how it's done today

810
00:30:37,740 --> 00:30:40,140
you get an email or like a notification

811
00:30:40,140 --> 00:30:42,419
in a portal from a SAS provider like oh

812
00:30:42,419 --> 00:30:44,220
you should update this product because

813
00:30:44,220 --> 00:30:46,200
it has a high severity CBE

814
00:30:46,200 --> 00:30:48,419
but eventually we'd like to get to a

815
00:30:48,419 --> 00:30:50,159
point where s-bomb generation happens

816
00:30:50,159 --> 00:30:51,960
automatically it's delivered

817
00:30:51,960 --> 00:30:54,059
automatically and the consumer has the

818
00:30:54,059 --> 00:30:56,700
tools and processes to consume the

819
00:30:56,700 --> 00:30:59,279
information automatically

820
00:30:59,279 --> 00:31:01,260
um when a cve for a package and an

821
00:31:01,260 --> 00:31:02,820
s-bomb exists

822
00:31:02,820 --> 00:31:04,740
and really this communication around

823
00:31:04,740 --> 00:31:09,000
vulnerable components and cves is what

824
00:31:09,000 --> 00:31:13,260
Vex was created for Alan mentioned Vex

825
00:31:13,260 --> 00:31:15,600
in his intro but essentially it's a

826
00:31:15,600 --> 00:31:18,059
framework to assert the status of US of

827
00:31:18,059 --> 00:31:20,460
a specific vulnerability in a particular

828
00:31:20,460 --> 00:31:22,760
product

829
00:31:24,179 --> 00:31:25,740
awesome

830
00:31:25,740 --> 00:31:27,299
um

831
00:31:27,299 --> 00:31:30,679
I'm going to ask you a question Andy

832
00:31:30,679 --> 00:31:33,419
now that we've created the s-bombs how

833
00:31:33,419 --> 00:31:35,460
are how do people consume s-bombs

834
00:31:35,460 --> 00:31:36,720
because you know there's no point just

835
00:31:36,720 --> 00:31:38,100
creating a bunch of s-bombs and just

836
00:31:38,100 --> 00:31:39,799
letting it sit there

837
00:31:39,799 --> 00:31:42,559
what are the things you know proactively

838
00:31:42,559 --> 00:31:45,779
operationally and reactively that one

839
00:31:45,779 --> 00:31:47,940
could do from a consumption and making

840
00:31:47,940 --> 00:31:49,860
sense of the s-bomb perspective in the

841
00:31:49,860 --> 00:31:51,059
interest of time

842
00:31:51,059 --> 00:31:53,580
you know I'll give you two minutes thank

843
00:31:53,580 --> 00:31:54,480
you

844
00:31:54,480 --> 00:31:56,159
um yeah there's some interesting

845
00:31:56,159 --> 00:31:58,080
interesting points there one on the

846
00:31:58,080 --> 00:32:00,600
actual generation of s-bombs by Cloud

847
00:32:00,600 --> 00:32:02,640
providers and whether they're disclosed

848
00:32:02,640 --> 00:32:05,880
or not ultimately the metrics we can

849
00:32:05,880 --> 00:32:07,380
gather from these are mean times

850
00:32:07,380 --> 00:32:09,779
remediation of the providers of our

851
00:32:09,779 --> 00:32:13,260
software if somebody has a cve and then

852
00:32:13,260 --> 00:32:15,539
they ship a patch the next day well

853
00:32:15,539 --> 00:32:17,279
before like a 24-hour remediation window

854
00:32:17,279 --> 00:32:19,500
that is a risk window for our production

855
00:32:19,500 --> 00:32:21,960
software but that's that's quite

856
00:32:21,960 --> 00:32:22,919
reasonable you know in large

857
00:32:22,919 --> 00:32:24,480
organizations it might take two or three

858
00:32:24,480 --> 00:32:26,640
days just to get that process moving

859
00:32:26,640 --> 00:32:27,779
sometimes

860
00:32:27,779 --> 00:32:30,360
so what should we do well

861
00:32:30,360 --> 00:32:32,340
as there is no distribution mechanism

862
00:32:32,340 --> 00:32:34,980
for s-bombs at the moment it is

863
00:32:34,980 --> 00:32:36,779
incumbent upon us as consumers to pull

864
00:32:36,779 --> 00:32:39,419
these from when we're actually doing an

865
00:32:39,419 --> 00:32:41,100
update of whatever whatever the software

866
00:32:41,100 --> 00:32:43,440
is to pull them from the vendor

867
00:32:43,440 --> 00:32:45,360
then we might do something like actually

868
00:32:45,360 --> 00:32:47,700
scan the package manifest with with a

869
00:32:47,700 --> 00:32:49,140
container vulnerability tool because

870
00:32:49,140 --> 00:32:51,480
still those package URLs

871
00:32:51,480 --> 00:32:53,760
um are are the same information that we

872
00:32:53,760 --> 00:32:55,919
use for CV scanning

873
00:32:55,919 --> 00:32:58,740
But ultimately really to close this Loop

874
00:32:58,740 --> 00:33:01,200
and to do so in good faith as Rose says

875
00:33:01,200 --> 00:33:04,020
about the sort of dishonest lens of not

876
00:33:04,020 --> 00:33:06,360
disclosing a vulnerability or an S bond

877
00:33:06,360 --> 00:33:08,520
with vulnerability in vendors should be

878
00:33:08,520 --> 00:33:10,200
pushing out updates and saying to us

879
00:33:10,200 --> 00:33:12,659
we've determined that this one but this

880
00:33:12,659 --> 00:33:14,880
zero day has been announced it is in

881
00:33:14,880 --> 00:33:17,399
this package and we're actively working

882
00:33:17,399 --> 00:33:20,279
on it the Vex document might then be

883
00:33:20,279 --> 00:33:22,080
updated for that so the s bomb still

884
00:33:22,080 --> 00:33:23,940
exists but the new Vex would say well

885
00:33:23,940 --> 00:33:24,899
there's actually an exploitable

886
00:33:24,899 --> 00:33:26,940
vulnerability in here recommendation is

887
00:33:26,940 --> 00:33:28,500
we're working on it which is one of the

888
00:33:28,500 --> 00:33:29,940
subfields of the vex

889
00:33:29,940 --> 00:33:32,039
and then they push the next export

890
00:33:32,039 --> 00:33:34,320
s-bomb with the the next package version

891
00:33:34,320 --> 00:33:37,440
at the point for mediation so it is a

892
00:33:37,440 --> 00:33:39,539
complex dance at the moment and there is

893
00:33:39,539 --> 00:33:40,440
no

894
00:33:40,440 --> 00:33:42,899
um there's no solution for it in my mind

895
00:33:42,899 --> 00:33:45,960
that is the the cleanest way to do it

896
00:33:45,960 --> 00:33:47,940
there's still questions who who does

897
00:33:47,940 --> 00:33:49,919
that email go to I mean we're just going

898
00:33:49,919 --> 00:33:52,380
to lose that in the security at inboxes

899
00:33:52,380 --> 00:33:54,480
so uh yes

900
00:33:54,480 --> 00:33:57,659
further automation required right

901
00:33:57,659 --> 00:33:59,399
um a good resource for you guys to look

902
00:33:59,399 --> 00:34:01,740
at uh you know as you think about how do

903
00:34:01,740 --> 00:34:03,419
I make sense of these s-bombs is the

904
00:34:03,419 --> 00:34:07,019
guac document from Google guac project

905
00:34:07,019 --> 00:34:09,239
basically I like the way it breaks it

906
00:34:09,239 --> 00:34:11,520
down into three parts proactively

907
00:34:11,520 --> 00:34:13,820
thinking about consuming s-bombs

908
00:34:13,820 --> 00:34:16,739
operationally thinking about admission

909
00:34:16,739 --> 00:34:18,719
control Etc so so the proactive part

910
00:34:18,719 --> 00:34:20,820
would be

911
00:34:20,820 --> 00:34:22,080
um does my s-bomb have any

912
00:34:22,080 --> 00:34:24,119
vulnerabilities like if so is anything

913
00:34:24,119 --> 00:34:25,918
critical do I need to tell my developers

914
00:34:25,918 --> 00:34:27,418
to go fix something

915
00:34:27,418 --> 00:34:29,760
essentially the sca aspect software

916
00:34:29,760 --> 00:34:31,260
composition analysis aspect of it both

917
00:34:31,260 --> 00:34:32,699
from an OS packages installed in your

918
00:34:32,699 --> 00:34:34,199
container images perspective as well as

919
00:34:34,199 --> 00:34:35,099
the dependencies that have

920
00:34:35,099 --> 00:34:36,839
vulnerabilities Etc that's the proactive

921
00:34:36,839 --> 00:34:38,760
part then there's the operational part

922
00:34:38,760 --> 00:34:41,580
which is I'm going to start my container

923
00:34:41,580 --> 00:34:43,800
and my kubernetes is going to start my

924
00:34:43,800 --> 00:34:46,020
container and at that time from an

925
00:34:46,020 --> 00:34:47,639
admission control perspective do I even

926
00:34:47,639 --> 00:34:49,500
launch certain containers that have a

927
00:34:49,500 --> 00:34:50,879
certain set of

928
00:34:50,879 --> 00:34:53,520
vulnerabilities or a certain set of you

929
00:34:53,520 --> 00:34:54,960
know signature mismatches and things

930
00:34:54,960 --> 00:34:56,639
like that so admission control is the

931
00:34:56,639 --> 00:34:57,839
second operational part and the third

932
00:34:57,839 --> 00:35:00,240
part is reactive there there's a new CV

933
00:35:00,240 --> 00:35:02,520
that just came out where all in my

934
00:35:02,520 --> 00:35:04,619
kubernetes clusters is a vulnerable

935
00:35:04,619 --> 00:35:06,359
component running that has that CD I

936
00:35:06,359 --> 00:35:07,680
should be able to go and search for it

937
00:35:07,680 --> 00:35:10,619
and then look at it uh for my s-bomb

938
00:35:10,619 --> 00:35:12,420
from a reactive perspective so all of

939
00:35:12,420 --> 00:35:14,520
these three aspects are very important

940
00:35:14,520 --> 00:35:16,680
so don't just think about creating

941
00:35:16,680 --> 00:35:18,240
s-bombs and storing them somewhere

942
00:35:18,240 --> 00:35:20,099
actually think about this you know from

943
00:35:20,099 --> 00:35:21,839
a strategic perspective how do I make

944
00:35:21,839 --> 00:35:23,820
sense of it from a consumption uh you

945
00:35:23,820 --> 00:35:25,619
know point of view otherwise is just a

946
00:35:25,619 --> 00:35:27,000
bunch of files that are sitting in your

947
00:35:27,000 --> 00:35:29,099
folder

948
00:35:29,099 --> 00:35:32,940
um we are out of time isn't it yeah okay

949
00:35:32,940 --> 00:35:35,760
so uh because we had to do this

950
00:35:35,760 --> 00:35:37,560
recording and and as opposed to the

951
00:35:37,560 --> 00:35:39,839
conversation I think we overshot on time

952
00:35:39,839 --> 00:35:41,760
a little bit but if you do have any

953
00:35:41,760 --> 00:35:43,800
questions by all means please reach out

954
00:35:43,800 --> 00:35:45,060
to Annie and I will we're going to be

955
00:35:45,060 --> 00:35:47,579
here for a few more minutes uh to have a

956
00:35:47,579 --> 00:35:49,440
chat with and answer any other questions

957
00:35:49,440 --> 00:35:51,119
or just geek out with you guys so thank

958
00:35:51,119 --> 00:35:52,490
you

959
00:35:52,490 --> 00:35:57,910
[Applause]

