1
00:00:00,179 --> 00:00:04,080
hi everyone thanks for joining today so

2
00:00:04,080 --> 00:00:06,720
today we are going to talk about

3
00:00:06,720 --> 00:00:08,179
um

4
00:00:08,179 --> 00:00:11,580
dfir in container and now we can do the

5
00:00:11,580 --> 00:00:14,280
fir in the in container world

6
00:00:14,280 --> 00:00:17,279
so let's start introducing ourselves I'm

7
00:00:17,279 --> 00:00:19,440
Stefano and I'm a threat research that

8
00:00:19,440 --> 00:00:23,580
edit manager and at sysdig and as you

9
00:00:23,580 --> 00:00:25,980
can see from the picture I'm from Milano

10
00:00:25,980 --> 00:00:31,560
Italy here is Alberto a peditary is a

11
00:00:31,560 --> 00:00:34,680
security researcher at sisdig and he

12
00:00:34,680 --> 00:00:39,380
comes from a tour in Italy as well

13
00:00:44,719 --> 00:00:49,320
Foreigner and Cloud security company uh

14
00:00:49,320 --> 00:00:52,140
sisdict donated Falco a runtime security

15
00:00:52,140 --> 00:00:53,960
project

16
00:00:53,960 --> 00:00:58,739
in today's cncf back in 2016 and is now

17
00:00:58,739 --> 00:01:03,239
the sandbox runtime security project at

18
00:01:03,239 --> 00:01:05,519
the incubation level and this is in the

19
00:01:05,519 --> 00:01:09,720
process to to become a graduated process

20
00:01:09,720 --> 00:01:12,960
talking about Falco we are both faco

21
00:01:12,960 --> 00:01:17,760
contributors and are also active in FICO

22
00:01:17,760 --> 00:01:19,680
community and I'm also if I could

23
00:01:19,680 --> 00:01:23,280
reviewer for file core rules

24
00:01:23,280 --> 00:01:26,460
here is the agenda for today so we're

25
00:01:26,460 --> 00:01:28,700
going to talk about the fir

26
00:01:28,700 --> 00:01:31,500
especially is we are going to see

27
00:01:31,500 --> 00:01:34,680
incident response and digital forensic

28
00:01:34,680 --> 00:01:38,460
and then we are going to cover and refer

29
00:01:38,460 --> 00:01:40,740
to nist

30
00:01:40,740 --> 00:01:43,259
um incident response life cycle and then

31
00:01:43,259 --> 00:01:45,140
Alberto will go through

32
00:01:45,140 --> 00:01:49,079
some dfir container methodology

33
00:01:49,079 --> 00:01:52,439
techniques and also tools specific tools

34
00:01:52,439 --> 00:01:55,680
for dfiring containers with some demos

35
00:01:55,680 --> 00:01:57,360
and then we will wrap up the session

36
00:01:57,360 --> 00:02:00,299
with some main takeaways

37
00:02:00,299 --> 00:02:02,420
so let's start

38
00:02:02,420 --> 00:02:05,540
let's start talking about the fir

39
00:02:05,540 --> 00:02:09,419
As We Know The Firs put together two

40
00:02:09,419 --> 00:02:12,680
different areas digital forensics and

41
00:02:12,680 --> 00:02:16,080
instant response as we know digital

42
00:02:16,080 --> 00:02:19,920
phrases focus more on collecting and

43
00:02:19,920 --> 00:02:22,920
analyzing data user activities and other

44
00:02:22,920 --> 00:02:27,260
piece of digital evidence to to

45
00:02:27,260 --> 00:02:31,020
understand what's happening on a on a

46
00:02:31,020 --> 00:02:34,040
machine or what or who may be behind

47
00:02:34,040 --> 00:02:36,959
specific threats on or the specific

48
00:02:36,959 --> 00:02:40,680
attack or whatever we recorded in our

49
00:02:40,680 --> 00:02:42,959
environment all these activities need to

50
00:02:42,959 --> 00:02:45,360
be done following best practice and

51
00:02:45,360 --> 00:02:47,459
specific methodology to maintain the

52
00:02:47,459 --> 00:02:49,800
chain of custody so that the evidence

53
00:02:49,800 --> 00:02:52,860
are are legitimate and can be used and

54
00:02:52,860 --> 00:02:55,260
presented to the court in case of legal

55
00:02:55,260 --> 00:02:56,400
proceedings

56
00:02:56,400 --> 00:02:59,580
incident response is that uh are more

57
00:02:59,580 --> 00:03:01,500
are focused on preparing detecting

58
00:03:01,500 --> 00:03:04,620
containing and recovering from a data

59
00:03:04,620 --> 00:03:07,019
breach or or a security incident

60
00:03:07,019 --> 00:03:11,220
in early years and early days as we know

61
00:03:11,220 --> 00:03:14,220
these two processes were completely

62
00:03:14,220 --> 00:03:15,920
different and separated

63
00:03:15,920 --> 00:03:19,140
however I mean of course because they

64
00:03:19,140 --> 00:03:22,739
have different goals but tools processes

65
00:03:22,739 --> 00:03:25,860
methodologies are pretty similar and now

66
00:03:25,860 --> 00:03:30,440
with tools like EDR xdr that are evolved

67
00:03:30,440 --> 00:03:32,480
of course

68
00:03:32,480 --> 00:03:35,280
they empower the incident responder to

69
00:03:35,280 --> 00:03:38,519
do further actions like proceeding with

70
00:03:38,519 --> 00:03:40,620
investigation and also performing other

71
00:03:40,620 --> 00:03:43,500
actions so it makes sense now to put

72
00:03:43,500 --> 00:03:45,599
them together under the under the same

73
00:03:45,599 --> 00:03:50,239
head and referring directly to the fir

74
00:03:50,239 --> 00:03:54,420
uh and when we talk about the fir we

75
00:03:54,420 --> 00:03:56,580
used to refer to the to to the next

76
00:03:56,580 --> 00:03:58,680
instant response

77
00:03:58,680 --> 00:04:02,879
um life life cycle step and here are the

78
00:04:02,879 --> 00:04:05,220
four main uh Mains that are pretty well

79
00:04:05,220 --> 00:04:07,080
known of course today we are not

80
00:04:07,080 --> 00:04:09,599
covering all the technical and

81
00:04:09,599 --> 00:04:12,780
non-technical aspects from from nist I

82
00:04:12,780 --> 00:04:17,040
leave the um the link behind in the in

83
00:04:17,040 --> 00:04:19,738
the slide so that you can check out the

84
00:04:19,738 --> 00:04:21,899
the official this documentation if you

85
00:04:21,899 --> 00:04:24,060
are interested and you want to know more

86
00:04:24,060 --> 00:04:27,780
about it and of course today we are we

87
00:04:27,780 --> 00:04:30,180
are going to cover the technical aspect

88
00:04:30,180 --> 00:04:33,300
on how we can do dfir in containers

89
00:04:33,300 --> 00:04:35,160
which are the techniques the specific

90
00:04:35,160 --> 00:04:36,720
techniques that we need to know in order

91
00:04:36,720 --> 00:04:40,020
to do that in in container worlds

92
00:04:40,020 --> 00:04:42,300
and so this is the time of the

93
00:04:42,300 --> 00:04:44,820
presentation where we start saying the

94
00:04:44,820 --> 00:04:47,880
best practices and yes sure you need to

95
00:04:47,880 --> 00:04:49,860
follow the best practice and you need to

96
00:04:49,860 --> 00:04:52,740
check for misconfiguration right so I

97
00:04:52,740 --> 00:04:54,780
know it's kind of boring but we need to

98
00:04:54,780 --> 00:04:57,479
do that so jokes apart

99
00:04:57,479 --> 00:04:59,820
um when we talk about incident response

100
00:04:59,820 --> 00:05:02,100
plan It's always important to mention

101
00:05:02,100 --> 00:05:04,320
that these need to be prepared in

102
00:05:04,320 --> 00:05:08,220
advance is fundamental attacker aren't

103
00:05:08,220 --> 00:05:09,900
going to ask you if you are ready to

104
00:05:09,900 --> 00:05:13,320
receive the attack or uh I don't know we

105
00:05:13,320 --> 00:05:16,320
are in so are you aware that we are

106
00:05:16,320 --> 00:05:18,900
already your environment so we need to

107
00:05:18,900 --> 00:05:22,320
be prepared of that and and we we need

108
00:05:22,320 --> 00:05:24,840
we know we need also to keep in mind

109
00:05:24,840 --> 00:05:28,080
that most of the or part of their uh

110
00:05:28,080 --> 00:05:30,539
instant response plan are non-technical

111
00:05:30,539 --> 00:05:32,900
so there are some aspects like

112
00:05:32,900 --> 00:05:36,539
contacts people contacts people that

113
00:05:36,539 --> 00:05:39,720
need to be involved needs to be defined

114
00:05:39,720 --> 00:05:42,660
in advance and people from different

115
00:05:42,660 --> 00:05:44,880
teams they need they specifically need

116
00:05:44,880 --> 00:05:46,620
to know which people they need to

117
00:05:46,620 --> 00:05:49,740
contact and and exactly what they need

118
00:05:49,740 --> 00:05:52,440
to do in specific and which action they

119
00:05:52,440 --> 00:05:54,660
need to do so all these aspects are not

120
00:05:54,660 --> 00:05:57,000
are more processes and is not technical

121
00:05:57,000 --> 00:05:59,880
related but it's something that it needs

122
00:05:59,880 --> 00:06:01,199
to be set

123
00:06:01,199 --> 00:06:03,180
and and of course if we talk about

124
00:06:03,180 --> 00:06:05,699
technical aspect as we said uh there are

125
00:06:05,699 --> 00:06:07,979
specific tools that that we need to run

126
00:06:07,979 --> 00:06:10,560
and and the list of the tool required

127
00:06:10,560 --> 00:06:12,900
might be set in advance

128
00:06:12,900 --> 00:06:15,660
and also uh all the knowledge about how

129
00:06:15,660 --> 00:06:18,419
to use the tool or uh you know specific

130
00:06:18,419 --> 00:06:20,759
flight that you need to use uh they need

131
00:06:20,759 --> 00:06:22,340
to be all the knowledge should be

132
00:06:22,340 --> 00:06:25,919
prepared and to be there before the

133
00:06:25,919 --> 00:06:28,620
attack because of course we can't uh

134
00:06:28,620 --> 00:06:30,539
spend time on understanding how this

135
00:06:30,539 --> 00:06:33,479
tool work or oh yeah I need this tool to

136
00:06:33,479 --> 00:06:37,139
uh to do I don't know for a a an image a

137
00:06:37,139 --> 00:06:39,840
forensic image of something and we need

138
00:06:39,840 --> 00:06:41,699
to understand how the tool works and

139
00:06:41,699 --> 00:06:43,440
other stuff so and all this kind of

140
00:06:43,440 --> 00:06:47,280
activities so timing is fundamental and

141
00:06:47,280 --> 00:06:49,560
we need to be prepared and of course

142
00:06:49,560 --> 00:06:52,080
even if you have an instant response

143
00:06:52,080 --> 00:06:54,240
planning set we need to make sure and

144
00:06:54,240 --> 00:06:56,400
you need to make sure that this is up to

145
00:06:56,400 --> 00:06:59,520
date I mean people changing companies uh

146
00:06:59,520 --> 00:07:02,220
tools change pretty quickly as we know

147
00:07:02,220 --> 00:07:05,639
and so all the list of tools that need

148
00:07:05,639 --> 00:07:07,520
to be used should be updated

149
00:07:07,520 --> 00:07:10,199
frequently and also the people that need

150
00:07:10,199 --> 00:07:13,400
to be involved need to be

151
00:07:13,400 --> 00:07:16,919
updated frequently as well

152
00:07:16,919 --> 00:07:19,740
okay that's fine so we covered what we

153
00:07:19,740 --> 00:07:23,039
need to what we need to say and of

154
00:07:23,039 --> 00:07:24,139
course

155
00:07:24,139 --> 00:07:27,900
the fir is a pretty uh well-known

156
00:07:27,900 --> 00:07:29,880
practice and well-known methodologies

157
00:07:29,880 --> 00:07:33,000
and today we are not going to cover the

158
00:07:33,000 --> 00:07:34,919
well-known tools

159
00:07:34,919 --> 00:07:37,139
um that of course are still valid for

160
00:07:37,139 --> 00:07:38,940
containers so we are not saying they're

161
00:07:38,940 --> 00:07:41,699
not useful anymore of course they are

162
00:07:41,699 --> 00:07:44,819
but they are pretty well known and we

163
00:07:44,819 --> 00:07:46,919
are just one to cover and we're just to

164
00:07:46,919 --> 00:07:49,620
focus on specific tools that can be used

165
00:07:49,620 --> 00:07:52,680
on on containers so to do the fir

166
00:07:52,680 --> 00:07:55,259
activities in containers this happens

167
00:07:55,259 --> 00:07:56,759
also in other

168
00:07:56,759 --> 00:07:59,940
Technologies like iot or an ICS if you

169
00:07:59,940 --> 00:08:02,039
think about it there are specific tools

170
00:08:02,039 --> 00:08:04,819
that need to be known and need to be

171
00:08:04,819 --> 00:08:07,560
used in order to perform some activities

172
00:08:07,560 --> 00:08:10,340
on the fir

173
00:08:10,800 --> 00:08:14,580
so let's start talking about the fir in

174
00:08:14,580 --> 00:08:16,080
containers so

175
00:08:16,080 --> 00:08:18,660
we all know containers and we are pretty

176
00:08:18,660 --> 00:08:21,740
familiar with them and we like a lot

177
00:08:21,740 --> 00:08:24,240
it's super easy to deploy code it's

178
00:08:24,240 --> 00:08:27,060
super easy to ship code that we want in

179
00:08:27,060 --> 00:08:29,280
our environment and deploy it so of

180
00:08:29,280 --> 00:08:31,319
course we know all the advantages that

181
00:08:31,319 --> 00:08:34,140
container can bring but of course we

182
00:08:34,140 --> 00:08:35,339
also know that there are some

183
00:08:35,339 --> 00:08:37,500
challenging that we need to face and

184
00:08:37,500 --> 00:08:39,799
especially for the fir

185
00:08:39,799 --> 00:08:42,700
we know that containers are

186
00:08:42,700 --> 00:08:44,240
[Music]

187
00:08:44,240 --> 00:08:48,300
uh Dynamic and are ephemeral so doing

188
00:08:48,300 --> 00:08:51,720
activities like the fir in such a a

189
00:08:51,720 --> 00:08:53,880
dynamic environment could be pretty

190
00:08:53,880 --> 00:08:56,160
challenging and of course we need to

191
00:08:56,160 --> 00:08:58,019
respond as quickly as possible because

192
00:08:58,019 --> 00:08:59,940
some activities that Alberto will show

193
00:08:59,940 --> 00:09:03,120
now needs to be done when the container

194
00:09:03,120 --> 00:09:06,060
is live and need to be there then we

195
00:09:06,060 --> 00:09:09,360
know containers are are ephemeral and

196
00:09:09,360 --> 00:09:12,959
and super uh and super quick to to

197
00:09:12,959 --> 00:09:14,640
destroy and we might miss some

198
00:09:14,640 --> 00:09:17,040
information so it's really important to

199
00:09:17,040 --> 00:09:19,920
gather this information and and then

200
00:09:19,920 --> 00:09:22,140
perform all other activities so a little

201
00:09:22,140 --> 00:09:25,620
Alberto Deep dive into the fir and all

202
00:09:25,620 --> 00:09:28,080
the techniques and tools to use

203
00:09:28,080 --> 00:09:31,760
thank you Stefano I'm the lover one

204
00:09:31,760 --> 00:09:35,600
so for this presentation we want also to

205
00:09:35,600 --> 00:09:38,339
adopt a practical approach covering the

206
00:09:38,339 --> 00:09:40,740
previous steps that we have seen about

207
00:09:40,740 --> 00:09:45,000
nice incident response plan and to do so

208
00:09:45,000 --> 00:09:48,060
we are going to cover all of those steps

209
00:09:48,060 --> 00:09:51,060
outlining the main aspects that may be

210
00:09:51,060 --> 00:09:53,399
useful in the contourization words and

211
00:09:53,399 --> 00:09:55,500
along with tools techniques and so on

212
00:09:55,500 --> 00:09:58,140
and so forth and so for this reason

213
00:09:58,140 --> 00:10:01,440
let's begin from prep operation so

214
00:10:01,440 --> 00:10:04,140
preparation is man is maybe one of the

215
00:10:04,140 --> 00:10:06,120
main aspects of incident response

216
00:10:06,120 --> 00:10:08,640
methodologies because a good preparation

217
00:10:08,640 --> 00:10:11,220
allows you to not only prevent the

218
00:10:11,220 --> 00:10:14,100
incidents but by hardening I mean your

219
00:10:14,100 --> 00:10:16,920
environment but also to enforce the

220
00:10:16,920 --> 00:10:18,959
right capabilities so that an

221
00:10:18,959 --> 00:10:21,060
organization is ready to respond quickly

222
00:10:21,060 --> 00:10:23,220
we can talk about facilities

223
00:10:23,220 --> 00:10:25,740
Communications Hardware software

224
00:10:25,740 --> 00:10:27,839
whatever you want but we're going to

225
00:10:27,839 --> 00:10:29,880
skip all the organizative and

226
00:10:29,880 --> 00:10:33,140
traditional steps like set a word room

227
00:10:33,140 --> 00:10:36,480
or plan on site calls and so on and so

228
00:10:36,480 --> 00:10:39,600
forth but we're going to focus our

229
00:10:39,600 --> 00:10:41,760
attention on open source tools that can

230
00:10:41,760 --> 00:10:44,339
help incident response team to detect

231
00:10:44,339 --> 00:10:46,500
red flags facilitate attacks

232
00:10:46,500 --> 00:10:49,380
investigations and response

233
00:10:49,380 --> 00:10:51,720
so the first tool

234
00:10:51,720 --> 00:10:53,579
um I mean the first kind of tool that I

235
00:10:53,579 --> 00:10:54,839
want to

236
00:10:54,839 --> 00:10:58,320
um I mean to to stress is contain

237
00:10:58,320 --> 00:11:00,959
container runtime security tool

238
00:11:00,959 --> 00:11:05,820
um Falco is maybe the first cncf uh

239
00:11:05,820 --> 00:11:08,579
runtime security tool that allows you to

240
00:11:08,579 --> 00:11:11,700
spark threats at runtime

241
00:11:11,700 --> 00:11:13,620
um see whenever there are some kind of

242
00:11:13,620 --> 00:11:15,420
threats that are running in your Linux

243
00:11:15,420 --> 00:11:18,240
environment in your containers and also

244
00:11:18,240 --> 00:11:21,300
to spot audits logs and some kind of

245
00:11:21,300 --> 00:11:23,399
resources and requests that are made to

246
00:11:23,399 --> 00:11:26,040
the kubernetes API server so you may

247
00:11:26,040 --> 00:11:28,380
want to spot this kind of threats at

248
00:11:28,380 --> 00:11:31,320
runtime you may also want to adopt other

249
00:11:31,320 --> 00:11:33,720
kind of Open Source tools and cncf

250
00:11:33,720 --> 00:11:36,480
graduated projects like Prometheus in

251
00:11:36,480 --> 00:11:38,760
order to monitor your resources

252
00:11:38,760 --> 00:11:41,700
and see if there are some pickup loads

253
00:11:41,700 --> 00:11:45,899
Network changes that may be relevant for

254
00:11:45,899 --> 00:11:50,459
your investigations or also some other

255
00:11:50,459 --> 00:11:52,740
Solutions like logging Solutions because

256
00:11:52,740 --> 00:11:55,980
one of the main best practices and that

257
00:11:55,980 --> 00:11:57,300
you need to enforce during the

258
00:11:57,300 --> 00:12:01,019
preparation step is also to log I mean

259
00:12:01,019 --> 00:12:02,940
as much as you can from your

260
00:12:02,940 --> 00:12:07,140
applications so that you can I mean try

261
00:12:07,140 --> 00:12:09,360
to have all the kind of information that

262
00:12:09,360 --> 00:12:11,399
are needed and then with tools like

263
00:12:11,399 --> 00:12:14,220
fluent bits and fluid D you can try to

264
00:12:14,220 --> 00:12:18,360
forward these logs in just them parse

265
00:12:18,360 --> 00:12:20,640
them so that you can have all of them

266
00:12:20,640 --> 00:12:23,640
with for example follicle alerts in one

267
00:12:23,640 --> 00:12:26,279
single login management platform like

268
00:12:26,279 --> 00:12:28,260
the arc stack that is another open

269
00:12:28,260 --> 00:12:31,680
source projects like open search and so

270
00:12:31,680 --> 00:12:33,480
on and so forth

271
00:12:33,480 --> 00:12:36,060
so in order to address the fairing

272
00:12:36,060 --> 00:12:38,279
containers in a realistic way we're

273
00:12:38,279 --> 00:12:41,100
going to adopt kubernetes because I

274
00:12:41,100 --> 00:12:43,980
think that most of you are familiar with

275
00:12:43,980 --> 00:12:47,279
it and also because this is one of the

276
00:12:47,279 --> 00:12:50,220
main uh orchestration tools used by the

277
00:12:50,220 --> 00:12:51,779
open source community

278
00:12:51,779 --> 00:12:55,800
and as I mean as many of you already

279
00:12:55,800 --> 00:12:59,399
know in kubernetes we can run the we can

280
00:12:59,399 --> 00:13:02,040
run pods that embeds containers in there

281
00:13:02,040 --> 00:13:05,519
and so we can also perform the far in

282
00:13:05,519 --> 00:13:07,560
this kind of container so let's start

283
00:13:07,560 --> 00:13:10,200
from the demo that we have set for this

284
00:13:10,200 --> 00:13:12,420
presentation here we have in this case

285
00:13:12,420 --> 00:13:15,720
these kubernetes clusters where we have

286
00:13:15,720 --> 00:13:18,480
few nodes where we have demon sets like

287
00:13:18,480 --> 00:13:20,700
file core fluent bits and Prometheus in

288
00:13:20,700 --> 00:13:22,380
order to

289
00:13:22,380 --> 00:13:25,019
um in order to monitor our resources

290
00:13:25,019 --> 00:13:26,880
we are going to forward this kind of

291
00:13:26,880 --> 00:13:29,639
alerts to the single logging management

292
00:13:29,639 --> 00:13:32,820
platform like aux stack but as you can

293
00:13:32,820 --> 00:13:35,220
imagine in order to perform the far in a

294
00:13:35,220 --> 00:13:37,800
container we need a workload that can be

295
00:13:37,800 --> 00:13:41,700
exploited and later analyzed so let's

296
00:13:41,700 --> 00:13:43,800
teleport to the past and let's imagine

297
00:13:43,800 --> 00:13:46,860
that we are in 2021 I know that you're

298
00:13:46,860 --> 00:13:48,959
you're thinking that I'm going to talk

299
00:13:48,959 --> 00:13:52,019
about log4j because I'm not I'm bored

300
00:13:52,019 --> 00:13:53,820
about it so let's talk about another

301
00:13:53,820 --> 00:13:56,700
vulnerabilities that he that was his

302
00:13:56,700 --> 00:13:58,200
closed in

303
00:13:58,200 --> 00:14:00,959
2021 as well that is the Apache HTTP

304
00:14:00,959 --> 00:14:04,139
server that was a puff traversal

305
00:14:04,139 --> 00:14:06,120
vulnerability that under some

306
00:14:06,120 --> 00:14:08,459
circumstances allowed also to perform

307
00:14:08,459 --> 00:14:11,519
remote command executions and so in our

308
00:14:11,519 --> 00:14:13,860
cluster we basically exposed our

309
00:14:13,860 --> 00:14:17,279
workloads our Apache HTTP server with a

310
00:14:17,279 --> 00:14:19,800
kubernetes load balancers that could be

311
00:14:19,800 --> 00:14:22,680
exposed by attackers that could be

312
00:14:22,680 --> 00:14:26,940
exploited by attackers so let's nowhere

313
00:14:26,940 --> 00:14:29,399
the incident Response Team Hot

314
00:14:29,399 --> 00:14:31,260
an incident response team is always

315
00:14:31,260 --> 00:14:33,480
monitoring alerts based on Falco

316
00:14:33,480 --> 00:14:36,420
detection I mean alerts like the ones

317
00:14:36,420 --> 00:14:39,600
based on Falco detection that we set to

318
00:14:39,600 --> 00:14:41,639
be alerted as soon as possible and to

319
00:14:41,639 --> 00:14:44,339
promptly respond to incident let's jump

320
00:14:44,339 --> 00:14:47,399
into our stack and in this case here we

321
00:14:47,399 --> 00:14:51,000
have some logs that are related to one

322
00:14:51,000 --> 00:14:54,240
of our Apache HTTP Depot where we can

323
00:14:54,240 --> 00:14:57,060
found something related to launch

324
00:14:57,060 --> 00:14:59,279
Ingress remote file copy Tools in

325
00:14:59,279 --> 00:15:02,220
container that is kind of speeches I

326
00:15:02,220 --> 00:15:05,220
don't think that it happens every day

327
00:15:05,220 --> 00:15:07,620
that there are core loan duplicate

328
00:15:07,620 --> 00:15:10,079
executions that are run at runtime in

329
00:15:10,079 --> 00:15:14,160
your container so this is a red flag if

330
00:15:14,160 --> 00:15:16,459
we go ahead we can also see some kind of

331
00:15:16,459 --> 00:15:20,180
some other kind of alerts like as

332
00:15:20,180 --> 00:15:23,100
shallow spawned by the Apache httpd

333
00:15:23,100 --> 00:15:25,560
process there is kind of suspicious as

334
00:15:25,560 --> 00:15:28,260
well and also attempts to steal

335
00:15:28,260 --> 00:15:29,940
sensitive credentials

336
00:15:29,940 --> 00:15:31,260
but

337
00:15:31,260 --> 00:15:34,500
focusing on our our attention to the uh

338
00:15:34,500 --> 00:15:36,480
launching versus remote file copy Tools

339
00:15:36,480 --> 00:15:38,519
in containers we can see that it was

340
00:15:38,519 --> 00:15:42,360
executed accrual wget that tried to

341
00:15:42,360 --> 00:15:45,000
reach an endpoint the T is related to

342
00:15:45,000 --> 00:15:49,279
the IP address that you can see here

343
00:15:49,279 --> 00:15:52,620
194 and blah blah blah blah where you

344
00:15:52,620 --> 00:15:55,260
where basically that was basically used

345
00:15:55,260 --> 00:15:58,860
in order to download a malicious payload

346
00:15:58,860 --> 00:16:02,519
that we will see later so let's now uh

347
00:16:02,519 --> 00:16:04,620
go ahead and let's see also the logs

348
00:16:04,620 --> 00:16:07,139
that were forwarded by fluent beat in

349
00:16:07,139 --> 00:16:09,600
our log management platform that are

350
00:16:09,600 --> 00:16:12,240
related to the impacted Port if we see

351
00:16:12,240 --> 00:16:13,980
the logs we can see that for example

352
00:16:13,980 --> 00:16:16,980
there were a bunch of get requests on

353
00:16:16,980 --> 00:16:19,980
top of this slide and then there are

354
00:16:19,980 --> 00:16:21,959
also some commands that were not

355
00:16:21,959 --> 00:16:25,139
performed uh successfully there are also

356
00:16:25,139 --> 00:16:28,019
some other kind of

357
00:16:28,019 --> 00:16:30,060
um I mean operations that were not

358
00:16:30,060 --> 00:16:33,120
permitted and at the end if we go ahead

359
00:16:33,120 --> 00:16:35,699
we can also see a post request that is

360
00:16:35,699 --> 00:16:38,579
kind of suspicious because it basically

361
00:16:38,579 --> 00:16:41,699
tried to it X twice it it exploited DC

362
00:16:41,699 --> 00:16:45,500
GI being in order to spawn a shell

363
00:16:45,500 --> 00:16:48,959
other suggestions by the way may also

364
00:16:48,959 --> 00:16:52,199
come from uh open from Prometheus as I

365
00:16:52,199 --> 00:16:54,019
said before because

366
00:16:54,019 --> 00:16:58,560
Prometheus allows you to basically

367
00:16:58,560 --> 00:17:00,440
um for example query

368
00:17:00,440 --> 00:17:03,060
your your code that you have in this

369
00:17:03,060 --> 00:17:06,059
specific name space for example and you

370
00:17:06,059 --> 00:17:09,020
can see for example from the memory used

371
00:17:09,020 --> 00:17:12,540
that at the beginning there was these

372
00:17:12,540 --> 00:17:15,980
normal amount of memory that was

373
00:17:15,980 --> 00:17:18,660
I mean used by those ports in that

374
00:17:18,660 --> 00:17:20,520
namespace and at a certain point in time

375
00:17:20,520 --> 00:17:22,919
there was this speaker float I mean this

376
00:17:22,919 --> 00:17:25,380
is just an example also because

377
00:17:25,380 --> 00:17:27,179
this also means that I'm a bad

378
00:17:27,179 --> 00:17:28,500
programmer because I didn't accept

379
00:17:28,500 --> 00:17:30,720
resource quotes our resource limits in

380
00:17:30,720 --> 00:17:33,059
my workload but there are other kind of

381
00:17:33,059 --> 00:17:35,700
indicators like Network bytes that may

382
00:17:35,700 --> 00:17:38,100
be explanatory for your for your

383
00:17:38,100 --> 00:17:40,140
investigation purpose

384
00:17:40,140 --> 00:17:41,280
so

385
00:17:41,280 --> 00:17:44,000
let's now

386
00:17:44,000 --> 00:17:46,740
let's now

387
00:17:46,740 --> 00:17:48,600
continue

388
00:17:48,600 --> 00:17:51,000
come on

389
00:17:51,000 --> 00:17:55,919
okay yeah I love the office and now this

390
00:17:55,919 --> 00:17:57,600
is one of the main interesting part

391
00:17:57,600 --> 00:18:00,660
because I mean incident Response Team

392
00:18:00,660 --> 00:18:02,880
um should always be prepared to such

393
00:18:02,880 --> 00:18:06,360
kind of events and should be able to

394
00:18:06,360 --> 00:18:08,220
respond as soon as possible to the alert

395
00:18:08,220 --> 00:18:11,299
that happen also because in your

396
00:18:11,299 --> 00:18:14,160
orchestration environments or whenever

397
00:18:14,160 --> 00:18:15,780
you have a container that has been

398
00:18:15,780 --> 00:18:17,580
impacted you need to respond as soon as

399
00:18:17,580 --> 00:18:19,799
possible because as Stefano said before

400
00:18:19,799 --> 00:18:22,320
they are ephemeral and these kind of

401
00:18:22,320 --> 00:18:25,740
containers can disappear and you may

402
00:18:25,740 --> 00:18:28,620
lose the kind of informations about the

403
00:18:28,620 --> 00:18:31,620
attack that happened in your environment

404
00:18:31,620 --> 00:18:34,260
so let's now go ahead and let's talk

405
00:18:34,260 --> 00:18:38,160
about the real response that is engaged

406
00:18:38,160 --> 00:18:40,919
by the response team so you may want to

407
00:18:40,919 --> 00:18:44,340
contain to to evaluate their education

408
00:18:44,340 --> 00:18:47,460
and also to recover your infrastructure

409
00:18:47,460 --> 00:18:50,340
so contain basically means isolate the

410
00:18:50,340 --> 00:18:51,059
attack

411
00:18:51,059 --> 00:18:53,820
because you only want to avoid that the

412
00:18:53,820 --> 00:18:55,980
affected pods or container may impact

413
00:18:55,980 --> 00:18:58,980
other resources if you are for example

414
00:18:58,980 --> 00:19:02,280
in a kubernetes cluster the code that

415
00:19:02,280 --> 00:19:04,500
was impacted may have access to service

416
00:19:04,500 --> 00:19:07,080
account those service account May Grant

417
00:19:07,080 --> 00:19:09,539
you access to some requests to the

418
00:19:09,539 --> 00:19:12,660
kubernetes API server and so for example

419
00:19:12,660 --> 00:19:15,440
the attack can generate a mass

420
00:19:15,440 --> 00:19:18,360
and of course you need also to answer

421
00:19:18,360 --> 00:19:21,299
availability and continuity to your uh

422
00:19:21,299 --> 00:19:23,940
to your resources to services that you

423
00:19:23,940 --> 00:19:28,559
provide and you must also assess which

424
00:19:28,559 --> 00:19:30,660
resources have been impacted for example

425
00:19:30,660 --> 00:19:33,120
your containers may cause opponent

426
00:19:33,120 --> 00:19:36,059
escaping container escaping Grant to the

427
00:19:36,059 --> 00:19:39,000
attackers direct access to the nodes and

428
00:19:39,000 --> 00:19:41,039
these of course can create some other

429
00:19:41,039 --> 00:19:44,400
problems and what is also important for

430
00:19:44,400 --> 00:19:48,000
differensic step is to collection all

431
00:19:48,000 --> 00:19:50,520
the evidences about the attack so as

432
00:19:50,520 --> 00:19:53,580
always the first and the main step is to

433
00:19:53,580 --> 00:19:56,160
always snapshot the worker node volume

434
00:19:56,160 --> 00:19:59,760
because because these grants

435
00:19:59,760 --> 00:20:02,880
um some forensics uh some forensics

436
00:20:02,880 --> 00:20:05,700
analysis uh that can be done later

437
00:20:05,700 --> 00:20:09,539
during the postmortem phase but you can

438
00:20:09,539 --> 00:20:12,320
also enforce for example some other

439
00:20:12,320 --> 00:20:14,820
commands like commit and push in order

440
00:20:14,820 --> 00:20:17,340
to store the container image that was

441
00:20:17,340 --> 00:20:20,100
impacted and also checkpoint the

442
00:20:20,100 --> 00:20:22,799
container that we're going to see later

443
00:20:22,799 --> 00:20:25,260
and at the end of course last but not

444
00:20:25,260 --> 00:20:27,960
least you should also fix at the end of

445
00:20:27,960 --> 00:20:30,960
this step of this uh containment

446
00:20:30,960 --> 00:20:34,440
eradication recovery fix your uh fix the

447
00:20:34,440 --> 00:20:36,120
entry point it was exploited by

448
00:20:36,120 --> 00:20:37,559
attackers

449
00:20:37,559 --> 00:20:40,320
um so if it is a misconfiguration or a

450
00:20:40,320 --> 00:20:42,480
vulnerability you need to fix it

451
00:20:42,480 --> 00:20:45,240
otherwise you have to mitigate if for

452
00:20:45,240 --> 00:20:48,600
example the patch is not available so uh

453
00:20:48,600 --> 00:20:50,280
before jumping into the crime

454
00:20:50,280 --> 00:20:53,039
investigation scene

455
00:20:53,039 --> 00:20:55,980
um I will like hold only to stress that

456
00:20:55,980 --> 00:20:59,039
there are some kind of useful tools and

457
00:20:59,039 --> 00:21:00,780
techniques that you may want to engage

458
00:21:00,780 --> 00:21:03,179
Whenever there are breaches in your

459
00:21:03,179 --> 00:21:06,360
containers but I want also to strike to

460
00:21:06,360 --> 00:21:08,280
stress that many of these tools

461
00:21:08,280 --> 00:21:10,260
continuously evolve because there are

462
00:21:10,260 --> 00:21:12,600
some kind of tools that for example you

463
00:21:12,600 --> 00:21:15,960
could use few years ago in Docker but

464
00:21:15,960 --> 00:21:18,320
this for example cannot be used anymore

465
00:21:18,320 --> 00:21:22,440
in some kind in I mean up up-to-date

466
00:21:22,440 --> 00:21:25,020
kubernetes cluster due to the docker

467
00:21:25,020 --> 00:21:27,539
shim being deprecated

468
00:21:27,539 --> 00:21:30,360
so there are of course you can interact

469
00:21:30,360 --> 00:21:32,760
as always with the container engine or

470
00:21:32,760 --> 00:21:34,679
with the kubernetes API server to do

471
00:21:34,679 --> 00:21:36,240
some operations that you're going to see

472
00:21:36,240 --> 00:21:37,380
in a while

473
00:21:37,380 --> 00:21:40,799
but you may also want to adopt tools

474
00:21:40,799 --> 00:21:43,679
like containerdif in order to check the

475
00:21:43,679 --> 00:21:45,620
differences among two different images

476
00:21:45,620 --> 00:21:48,720
or Docker Explorer and container

477
00:21:48,720 --> 00:21:50,640
Explorer in order to check any kind of

478
00:21:50,640 --> 00:21:51,919
differences

479
00:21:51,919 --> 00:21:56,820
uh I mean in order to recover the state

480
00:21:56,820 --> 00:21:59,220
of a previously snapshoted worker not

481
00:21:59,220 --> 00:22:01,980
volume so that you can see which were

482
00:22:01,980 --> 00:22:04,559
the previously running containers by the

483
00:22:04,559 --> 00:22:07,320
way that's done let's start now from the

484
00:22:07,320 --> 00:22:08,760
exhalations tab

485
00:22:08,760 --> 00:22:12,120
so in this example as we said we are in

486
00:22:12,120 --> 00:22:15,240
a kubernetes cluster and we know which

487
00:22:15,240 --> 00:22:17,760
is the code that was impacted and the

488
00:22:17,760 --> 00:22:19,740
first kind of thing that we want to do

489
00:22:19,740 --> 00:22:23,220
is for example to label the the port

490
00:22:23,220 --> 00:22:26,760
and then apply some Network policy in

491
00:22:26,760 --> 00:22:29,580
order to isolate the port in this way if

492
00:22:29,580 --> 00:22:31,200
there was an attacker that for example

493
00:22:31,200 --> 00:22:33,480
exploited a river shell it will be cut

494
00:22:33,480 --> 00:22:36,500
off the body itself because

495
00:22:36,500 --> 00:22:39,299
the network policy doesn't allow any

496
00:22:39,299 --> 00:22:42,240
kind of Ingress or aggress traffic

497
00:22:42,240 --> 00:22:45,240
later you may want to also to call John

498
00:22:45,240 --> 00:22:48,360
the Pod denote where the Pod was

499
00:22:48,360 --> 00:22:51,120
scheduled so in this way all the new

500
00:22:51,120 --> 00:22:53,100
kind of workloads that will be deployed

501
00:22:53,100 --> 00:22:55,500
in your cluster will be scheduled

502
00:22:55,500 --> 00:22:59,120
elsewhere so in other notes and doing so

503
00:22:59,120 --> 00:23:03,179
you are now able to start some other

504
00:23:03,179 --> 00:23:05,580
forensics processes like for example

505
00:23:05,580 --> 00:23:09,860
snapshot the worker node volume or

506
00:23:09,860 --> 00:23:13,559
restrict the network access to the

507
00:23:13,559 --> 00:23:16,140
um to the worker node itself you may

508
00:23:16,140 --> 00:23:18,960
want to for example remove the IP the

509
00:23:18,960 --> 00:23:21,840
external IP that can be used in order to

510
00:23:21,840 --> 00:23:24,539
reach that kind of worker node and

511
00:23:24,539 --> 00:23:27,480
create an intermediate VM but all these

512
00:23:27,480 --> 00:23:29,460
kind of steps are mainly related to

513
00:23:29,460 --> 00:23:34,380
traditional step and our focus is right

514
00:23:34,380 --> 00:23:38,760
now to to focus I mean to to dig deeper

515
00:23:38,760 --> 00:23:40,620
into the investigation of the container

516
00:23:40,620 --> 00:23:43,020
itself so let's now assume that we have

517
00:23:43,020 --> 00:23:45,059
them first some of these steps that I've

518
00:23:45,059 --> 00:23:47,039
just mentioned

519
00:23:47,039 --> 00:23:49,679
um and that I'm going into the machine

520
00:23:49,679 --> 00:23:52,320
into the worker node that was uh that

521
00:23:52,320 --> 00:23:54,299
was scheduled that are scheduled the

522
00:23:54,299 --> 00:23:57,480
impacted Port so

523
00:23:57,480 --> 00:23:59,220
um we are now into the worker node

524
00:23:59,220 --> 00:24:01,200
itself and one of the first things that

525
00:24:01,200 --> 00:24:04,020
we want to do is for example to interact

526
00:24:04,020 --> 00:24:06,600
with the container in time

527
00:24:06,600 --> 00:24:09,419
um of course you must be sure that for

528
00:24:09,419 --> 00:24:12,539
example there there was no pods uh

529
00:24:12,539 --> 00:24:15,000
escaping or container escaping but we're

530
00:24:15,000 --> 00:24:18,059
going to see the eradication

531
00:24:18,059 --> 00:24:20,820
um their education step later but one of

532
00:24:20,820 --> 00:24:22,260
the main things that we you may want to

533
00:24:22,260 --> 00:24:23,940
do for example without interacting

534
00:24:23,940 --> 00:24:25,860
directly with the kubernetes API server

535
00:24:25,860 --> 00:24:28,559
for example is to interact directory

536
00:24:28,559 --> 00:24:30,780
with the container engine see which are

537
00:24:30,780 --> 00:24:33,360
the logs that we already seen with

538
00:24:33,360 --> 00:24:36,360
fluent pits see which are the running

539
00:24:36,360 --> 00:24:38,640
processes and in this example you can

540
00:24:38,640 --> 00:24:42,360
see at the bottom the kinsing malware

541
00:24:42,360 --> 00:24:43,220
um

542
00:24:43,220 --> 00:24:46,320
you can also see that

543
00:24:46,320 --> 00:24:51,020
there is uh we used also the uh CTR

544
00:24:51,020 --> 00:24:54,539
snapshot div that basically allows you

545
00:24:54,539 --> 00:24:58,320
to check which are the changes in the in

546
00:24:58,320 --> 00:25:01,679
the file system so if for example the

547
00:25:01,679 --> 00:25:02,820
attackers

548
00:25:02,820 --> 00:25:05,700
we're able to download some files in the

549
00:25:05,700 --> 00:25:08,400
file system and if there were some

550
00:25:08,400 --> 00:25:10,260
changes in the file system itself you

551
00:25:10,260 --> 00:25:12,360
can spot them from there and you can see

552
00:25:12,360 --> 00:25:15,059
that in this case we're engaged the TMP

553
00:25:15,059 --> 00:25:18,179
path where they downloaded some

554
00:25:18,179 --> 00:25:19,740
suspicious file

555
00:25:19,740 --> 00:25:23,760
you can of course uh commit the impacted

556
00:25:23,760 --> 00:25:26,640
container so that you can push that

557
00:25:26,640 --> 00:25:29,580
image in a remote uh replace in a remote

558
00:25:29,580 --> 00:25:33,419
registry or store it as an archive this

559
00:25:33,419 --> 00:25:36,960
kind of of course committed and stored

560
00:25:36,960 --> 00:25:41,159
image can also be restored later from a

561
00:25:41,159 --> 00:25:43,320
sandboxed machine from an analyzer

562
00:25:43,320 --> 00:25:45,480
machine that is isolated from your

563
00:25:45,480 --> 00:25:47,580
product environment

564
00:25:47,580 --> 00:25:52,020
and for example in some I mean

565
00:25:52,020 --> 00:25:54,900
some strange other cases you may want

566
00:25:54,900 --> 00:25:56,700
you may also want to use a female

567
00:25:56,700 --> 00:26:00,679
containers that became stable in version

568
00:26:00,679 --> 00:26:04,980
1.25 and that basically allows you to

569
00:26:04,980 --> 00:26:07,679
mainly debug the the container state or

570
00:26:07,679 --> 00:26:10,380
some attacks evidences they can be

571
00:26:10,380 --> 00:26:11,880
useful because

572
00:26:11,880 --> 00:26:14,520
um they are simply some kind of strange

573
00:26:14,520 --> 00:26:17,100
containers that you cannot touch to the

574
00:26:17,100 --> 00:26:20,640
to a Radix system pods accessing

575
00:26:20,640 --> 00:26:24,000
directly the same namespace the same

576
00:26:24,000 --> 00:26:27,299
process name space of the impacted

577
00:26:27,299 --> 00:26:28,919
container and you can see for example

578
00:26:28,919 --> 00:26:30,960
which are the running processes of

579
00:26:30,960 --> 00:26:33,000
course there are some all disadvantages

580
00:26:33,000 --> 00:26:36,000
because if there are some threats they

581
00:26:36,000 --> 00:26:39,240
can understand that you jumped into this

582
00:26:39,240 --> 00:26:40,679
kind of

583
00:26:40,679 --> 00:26:43,020
process name space continuing them space

584
00:26:43,020 --> 00:26:45,960
and so they may be dangerous sometimes

585
00:26:45,960 --> 00:26:48,000
but useful if for example you have some

586
00:26:48,000 --> 00:26:50,820
this strategy image that don't have any

587
00:26:50,820 --> 00:26:55,559
kind of shell or tools utilities

588
00:26:55,559 --> 00:26:58,919
and in a postmortem analysis you may

589
00:26:58,919 --> 00:27:00,840
also want to for example

590
00:27:00,840 --> 00:27:06,480
um pool or extract the images that

591
00:27:06,480 --> 00:27:09,000
that you you previously committed and

592
00:27:09,000 --> 00:27:11,940
pushed in order to download it in

593
00:27:11,940 --> 00:27:15,020
another in into analyzer machine

594
00:27:15,020 --> 00:27:18,539
you can so in this way you can see for

595
00:27:18,539 --> 00:27:20,220
example which were the changes in the

596
00:27:20,220 --> 00:27:21,740
first system

597
00:27:21,740 --> 00:27:24,960
or and this is one of the best practices

598
00:27:24,960 --> 00:27:28,260
of course using these snapshotted volume

599
00:27:28,260 --> 00:27:30,480
of the worker node that you have

600
00:27:30,480 --> 00:27:33,600
previously created you can use that

601
00:27:33,600 --> 00:27:36,659
snapshot that snapshot volume so that

602
00:27:36,659 --> 00:27:38,940
you can mount it into an analyzer

603
00:27:38,940 --> 00:27:39,960
machine

604
00:27:39,960 --> 00:27:42,059
and from the analyzer machine you can

605
00:27:42,059 --> 00:27:45,059
use tools like container Explorer or

606
00:27:45,059 --> 00:27:47,640
Docker Explorer if you're using uh if

607
00:27:47,640 --> 00:27:50,279
you have previously used Docker in order

608
00:27:50,279 --> 00:27:51,240
to

609
00:27:51,240 --> 00:27:53,520
check which were the previously run in

610
00:27:53,520 --> 00:27:55,740
containers and

611
00:27:55,740 --> 00:27:59,940
hayab here also this kind of video where

612
00:27:59,940 --> 00:28:03,620
I'm showing how to use

613
00:28:03,620 --> 00:28:06,179
container Explorer it basically allows

614
00:28:06,179 --> 00:28:08,159
you to check which were the previously

615
00:28:08,159 --> 00:28:10,140
running containers in the previously

616
00:28:10,140 --> 00:28:12,840
it's not shorted volume and from that

617
00:28:12,840 --> 00:28:15,299
you can understand for example that

618
00:28:15,299 --> 00:28:18,480
there was the Apache impacted container

619
00:28:18,480 --> 00:28:21,960
you can use the mount functionality

620
00:28:21,960 --> 00:28:24,659
so that you can mount the previously

621
00:28:24,659 --> 00:28:26,880
impacted container into the analyzer

622
00:28:26,880 --> 00:28:29,640
machine container and from the analyzer

623
00:28:29,640 --> 00:28:32,400
machine container you can run all

624
00:28:32,400 --> 00:28:34,440
different processes that you want all

625
00:28:34,440 --> 00:28:37,679
different steps that you want So at the

626
00:28:37,679 --> 00:28:41,340
end of all this video you can see that I

627
00:28:41,340 --> 00:28:44,400
was able to successfully mount

628
00:28:44,400 --> 00:28:46,380
the container the previously impacted

629
00:28:46,380 --> 00:28:49,140
contentful system and then see for

630
00:28:49,140 --> 00:28:52,520
example the TMP file system that

631
00:28:52,520 --> 00:28:56,640
was impacted by the affected container

632
00:28:56,640 --> 00:28:59,360
but okay

633
00:28:59,360 --> 00:29:01,500
let's go ahead

634
00:29:01,500 --> 00:29:03,960
and another interesting functionality

635
00:29:03,960 --> 00:29:05,600
that

636
00:29:05,600 --> 00:29:09,240
Works smoothly in podman but not in all

637
00:29:09,240 --> 00:29:11,100
the other container engine is container

638
00:29:11,100 --> 00:29:14,220
checkpoint a container checkpoint allows

639
00:29:14,220 --> 00:29:16,620
you to freeze the container state so

640
00:29:16,620 --> 00:29:18,840
this also means container processes

641
00:29:18,840 --> 00:29:21,419
container executions so the file

642
00:29:21,419 --> 00:29:24,240
descriptors are opened by the con by the

643
00:29:24,240 --> 00:29:27,360
processes themselves also some also the

644
00:29:27,360 --> 00:29:30,419
TCP connections for example stored them

645
00:29:30,419 --> 00:29:33,679
into an archive and then you can later

646
00:29:33,679 --> 00:29:36,899
restore the container execution in a

647
00:29:36,899 --> 00:29:39,539
separated environment so this is quite

648
00:29:39,539 --> 00:29:41,940
useful if you want to understand also

649
00:29:41,940 --> 00:29:45,480
turn time which kind of execution were

650
00:29:45,480 --> 00:29:49,020
previously launched into the um into the

651
00:29:49,020 --> 00:29:51,779
container that was impacted by the way

652
00:29:51,779 --> 00:29:54,120
this kind of feature as I said it works

653
00:29:54,120 --> 00:29:56,340
smoothly in podman but there are

654
00:29:56,340 --> 00:29:58,020
container engine that are trying to

655
00:29:58,020 --> 00:30:00,240
integrate it

656
00:30:00,240 --> 00:30:03,299
as well I think that there is also the

657
00:30:03,299 --> 00:30:05,880
kubernetes checkpoint feature that is a

658
00:30:05,880 --> 00:30:08,399
beta a better feature right now and

659
00:30:08,399 --> 00:30:11,159
allows you to checkpoint a container

660
00:30:11,159 --> 00:30:14,340
calling the couplet request it's it's

661
00:30:14,340 --> 00:30:16,740
still a work in progress by the way

662
00:30:16,740 --> 00:30:18,779
so at the end of this containment

663
00:30:18,779 --> 00:30:21,360
collection phases of course you can do

664
00:30:21,360 --> 00:30:23,940
all the forensics processes that you

665
00:30:23,940 --> 00:30:26,520
want but it is also important to

666
00:30:26,520 --> 00:30:29,000
understand

667
00:30:29,100 --> 00:30:31,700
um if the attack spread elsewhere so

668
00:30:31,700 --> 00:30:34,320
containers as you know may be run with

669
00:30:34,320 --> 00:30:37,260
privileged permissions with cut

670
00:30:37,260 --> 00:30:40,799
sensitive mounds and so these may allow

671
00:30:40,799 --> 00:30:43,500
attackers to escape from the container

672
00:30:43,500 --> 00:30:45,659
from the Pod to The Host

673
00:30:45,659 --> 00:30:47,940
you should always take care about the

674
00:30:47,940 --> 00:30:50,399
security settings the security contacts

675
00:30:50,399 --> 00:30:53,340
that you create in your workloads here I

676
00:30:53,340 --> 00:30:56,880
posted for examples to kind of security

677
00:30:56,880 --> 00:31:00,360
context and their analysis that was done

678
00:31:00,360 --> 00:31:02,700
by cubescore that is another open source

679
00:31:02,700 --> 00:31:04,320
project

680
00:31:04,320 --> 00:31:07,440
of course if we are talking about pods

681
00:31:07,440 --> 00:31:11,279
pods by default are bound to a service

682
00:31:11,279 --> 00:31:13,980
account token but I mean

683
00:31:13,980 --> 00:31:16,620
most of the times these service accounts

684
00:31:16,620 --> 00:31:19,080
token are pretty generic and doesn't

685
00:31:19,080 --> 00:31:21,960
allow you to do that much but if you

686
00:31:21,960 --> 00:31:25,460
create custom service account

687
00:31:25,679 --> 00:31:27,299
um you can communicate with the

688
00:31:27,299 --> 00:31:30,919
kubernetes API server create some new

689
00:31:30,919 --> 00:31:33,960
make some requests to the kubernetes API

690
00:31:33,960 --> 00:31:37,559
server create new resources and

691
00:31:37,559 --> 00:31:40,440
technically also do some lateral

692
00:31:40,440 --> 00:31:42,179
movement to the to the kubernetes

693
00:31:42,179 --> 00:31:45,299
cluster and of course if you're talking

694
00:31:45,299 --> 00:31:48,840
about for example kubernetes clusters

695
00:31:48,840 --> 00:31:50,640
um I mean most of the time whenever we

696
00:31:50,640 --> 00:31:52,860
create a Commodities cluster its worker

697
00:31:52,860 --> 00:31:56,100
nodes are bound to IM roles

698
00:31:56,100 --> 00:31:58,980
that have some privileges and if you

699
00:31:58,980 --> 00:32:02,159
modify those privileges assigning

700
00:32:02,159 --> 00:32:02,960
um

701
00:32:02,960 --> 00:32:05,159
restricted access to Some Cloud

702
00:32:05,159 --> 00:32:07,500
resources these May Grant attackers to

703
00:32:07,500 --> 00:32:09,960
attack your Cloud resources as well

704
00:32:09,960 --> 00:32:12,840
and yeah of course the recovery that I

705
00:32:12,840 --> 00:32:15,720
think it is one of the most uh implicit

706
00:32:15,720 --> 00:32:17,880
kind of thing to do at the end of an

707
00:32:17,880 --> 00:32:20,100
incident so you have of course to fix

708
00:32:20,100 --> 00:32:22,200
the vulnerability if possible sometimes

709
00:32:22,200 --> 00:32:24,059
it is not always possible and you want

710
00:32:24,059 --> 00:32:26,940
to enforce some mitigation like for

711
00:32:26,940 --> 00:32:29,159
example workload like for example delete

712
00:32:29,159 --> 00:32:31,500
the workload if of course is possible

713
00:32:31,500 --> 00:32:33,179
according to the services that you are

714
00:32:33,179 --> 00:32:35,700
providing or the workload that you have

715
00:32:35,700 --> 00:32:38,399
or also restore the container and hope

716
00:32:38,399 --> 00:32:41,399
that the attack doesn't happen again in

717
00:32:41,399 --> 00:32:42,299
the future

718
00:32:42,299 --> 00:32:45,299
or enforce some

719
00:32:45,299 --> 00:32:47,760
um some Playbook of actions Whenever

720
00:32:47,760 --> 00:32:50,880
there is a kind of rule that is detected

721
00:32:50,880 --> 00:32:54,059
by for example Falco you can enforce

722
00:32:54,059 --> 00:32:55,440
some

723
00:32:55,440 --> 00:32:57,299
um some specific Playbook of action in

724
00:32:57,299 --> 00:32:59,399
order to say Hey whenever there is this

725
00:32:59,399 --> 00:33:01,799
kind of rule that is triggered kill my

726
00:33:01,799 --> 00:33:03,779
container

727
00:33:03,779 --> 00:33:06,600
so in order to wrap up this session I'm

728
00:33:06,600 --> 00:33:09,240
now leaving the floor to Stefan again

729
00:33:09,240 --> 00:33:12,179
so thanks Alberto for all the

730
00:33:12,179 --> 00:33:16,200
information shared and of course the

731
00:33:16,200 --> 00:33:19,919
last step that required in the ascent

732
00:33:19,919 --> 00:33:22,919
response plan is post incident

733
00:33:22,919 --> 00:33:26,700
activities so we took all the action

734
00:33:26,700 --> 00:33:30,240
needed to contain eradicate the the

735
00:33:30,240 --> 00:33:33,480
threat and we restored and recover the

736
00:33:33,480 --> 00:33:36,179
environment and this is now back to

737
00:33:36,179 --> 00:33:38,399
normal and it's all working great so

738
00:33:38,399 --> 00:33:41,220
that's fine and it's now time to do some

739
00:33:41,220 --> 00:33:42,539
retrospective

740
00:33:42,539 --> 00:33:44,940
to get lesson learned from the incident

741
00:33:44,940 --> 00:33:47,220
some there are something that probably

742
00:33:47,220 --> 00:33:49,559
worked other stuff that probably didn't

743
00:33:49,559 --> 00:33:52,019
work so it's important to understand why

744
00:33:52,019 --> 00:33:54,419
they didn't work and what didn't work

745
00:33:54,419 --> 00:33:56,000
and perhaps

746
00:33:56,000 --> 00:33:59,460
understanding how we can do better so

747
00:33:59,460 --> 00:34:02,880
the output of this of this phase is

748
00:34:02,880 --> 00:34:05,700
literally a kind of checklist of of

749
00:34:05,700 --> 00:34:09,239
points and a list point of uh of what we

750
00:34:09,239 --> 00:34:11,280
need to improve and this is basically

751
00:34:11,280 --> 00:34:14,760
the input for the for the update of the

752
00:34:14,760 --> 00:34:16,980
of the incident response that we have So

753
00:34:16,980 --> 00:34:19,440
based on the feedback based on what we

754
00:34:19,440 --> 00:34:22,139
discover during during the incident we

755
00:34:22,139 --> 00:34:24,859
can update our incidental

756
00:34:24,859 --> 00:34:27,960
response plan make it better and be sure

757
00:34:27,960 --> 00:34:30,599
to avoid the same incident in the future

758
00:34:30,599 --> 00:34:33,659
so of course what happened we can do

759
00:34:33,659 --> 00:34:38,099
much but we should take these as a good

760
00:34:38,099 --> 00:34:40,800
opportunity to do a better work in the

761
00:34:40,800 --> 00:34:41,940
future

762
00:34:41,940 --> 00:34:46,080
uh so just to wrap up what we said and

763
00:34:46,080 --> 00:34:49,800
just get some main uh takeaways from

764
00:34:49,800 --> 00:34:52,320
this talk so as I said don't be caught

765
00:34:52,320 --> 00:34:55,440
unprepared uh prepare your instant plan

766
00:34:55,440 --> 00:34:58,200
as soon as possible uh as we said this

767
00:34:58,200 --> 00:35:00,839
is fundamental you need to be prepared

768
00:35:00,839 --> 00:35:03,500
if something happened

769
00:35:03,500 --> 00:35:05,880
of course

770
00:35:05,880 --> 00:35:06,740
um

771
00:35:06,740 --> 00:35:09,240
we need to respond as soon as possible

772
00:35:09,240 --> 00:35:11,760
as we said a container are a female

773
00:35:11,760 --> 00:35:15,000
container may not be there some

774
00:35:15,000 --> 00:35:17,460
activities needs to be done when the

775
00:35:17,460 --> 00:35:20,700
container is still alive so be prepared

776
00:35:20,700 --> 00:35:24,420
and act as soon as possible

777
00:35:24,420 --> 00:35:28,980
um the other point as Alberto said

778
00:35:28,980 --> 00:35:31,980
container are aren't isolated by default

779
00:35:31,980 --> 00:35:34,560
right as we know so there might happen

780
00:35:34,560 --> 00:35:37,200
like container escaping and and the

781
00:35:37,200 --> 00:35:39,240
attacks move to the to the host or to

782
00:35:39,240 --> 00:35:41,820
the node or in other parts of your

783
00:35:41,820 --> 00:35:44,640
infrastructure so don't just focus on

784
00:35:44,640 --> 00:35:47,040
the container that that was exploited

785
00:35:47,040 --> 00:35:49,140
during your investigation but go farther

786
00:35:49,140 --> 00:35:51,480
and there might be more to investigate

787
00:35:51,480 --> 00:35:55,020
so be prepared of uh not just looking

788
00:35:55,020 --> 00:35:58,200
the container but also check all the

789
00:35:58,200 --> 00:36:00,000
rest of infrastructure see the lateral

790
00:36:00,000 --> 00:36:02,640
movements if there was something and be

791
00:36:02,640 --> 00:36:05,540
prepared to go further investigation

792
00:36:05,540 --> 00:36:11,180
and also is is important to have full

793
00:36:11,180 --> 00:36:13,380
fully monitoring your your

794
00:36:13,380 --> 00:36:16,740
infrastructure so be sure to have all

795
00:36:16,740 --> 00:36:19,140
the visibility that you need in order to

796
00:36:19,140 --> 00:36:21,119
perform all the activities that we saw

797
00:36:21,119 --> 00:36:23,280
before

798
00:36:23,280 --> 00:36:25,200
um as we said there are and as we have

799
00:36:25,200 --> 00:36:27,359
seen there are specific tools that we

800
00:36:27,359 --> 00:36:30,540
need to use and we need to know how they

801
00:36:30,540 --> 00:36:32,339
works and

802
00:36:32,339 --> 00:36:34,980
which tool we need to use as we said

803
00:36:34,980 --> 00:36:37,859
there are a bunch of different tools but

804
00:36:37,859 --> 00:36:39,960
we need to stay updated and we need to

805
00:36:39,960 --> 00:36:42,660
know how to use them before the the

806
00:36:42,660 --> 00:36:44,220
incident happens

807
00:36:44,220 --> 00:36:46,980
uh also is actually important and is

808
00:36:46,980 --> 00:36:50,240
actually the best practice to simulate

809
00:36:50,240 --> 00:36:54,420
breaches to see the response of the plan

810
00:36:54,420 --> 00:36:56,460
of the people that are involved to see

811
00:36:56,460 --> 00:37:00,540
if it's it's working or if you you need

812
00:37:00,540 --> 00:37:03,000
to involve you need to involve different

813
00:37:03,000 --> 00:37:06,119
people perhaps or update contacts or

814
00:37:06,119 --> 00:37:08,400
whatever so check your plans is not

815
00:37:08,400 --> 00:37:10,200
enough just create the plan and say okay

816
00:37:10,200 --> 00:37:12,540
we have done it we need to check it see

817
00:37:12,540 --> 00:37:15,660
if it's working if not update it and

818
00:37:15,660 --> 00:37:18,480
make sure that this is working great as

819
00:37:18,480 --> 00:37:21,660
you expected and then be ready for the

820
00:37:21,660 --> 00:37:25,020
for the real incident and last but not

821
00:37:25,020 --> 00:37:26,400
least

822
00:37:26,400 --> 00:37:30,000
um as we have seen in order to do these

823
00:37:30,000 --> 00:37:31,800
kind of activities so especially in the

824
00:37:31,800 --> 00:37:33,960
far for containers but same for other

825
00:37:33,960 --> 00:37:36,900
Technologies we need people that knows

826
00:37:36,900 --> 00:37:39,780
and have background on kubernetes

827
00:37:39,780 --> 00:37:42,599
containers but also instant response

828
00:37:42,599 --> 00:37:46,079
knowledge sometimes of course we don't

829
00:37:46,079 --> 00:37:47,820
have the knowledge inside our

830
00:37:47,820 --> 00:37:50,579
organization or inside our team so it's

831
00:37:50,579 --> 00:37:54,180
important to hire or engage someone else

832
00:37:54,180 --> 00:37:56,579
that has this kind of knowledge and can

833
00:37:56,579 --> 00:38:00,599
be and can do all these activities in a

834
00:38:00,599 --> 00:38:03,420
good way right as we said in also in

835
00:38:03,420 --> 00:38:06,300
digital forensic the we need to maintain

836
00:38:06,300 --> 00:38:07,859
the chain of cars today so it's

837
00:38:07,859 --> 00:38:10,800
important to do some specific activities

838
00:38:10,800 --> 00:38:13,740
in following best practice in in good

839
00:38:13,740 --> 00:38:16,800
ways so that we we can use this data in

840
00:38:16,800 --> 00:38:19,560
in court or wherever it was so it's not

841
00:38:19,560 --> 00:38:21,540
we need to have this

842
00:38:21,540 --> 00:38:24,359
um uh this knowledge and we need to do

843
00:38:24,359 --> 00:38:27,599
the old activities in in a proper way

844
00:38:27,599 --> 00:38:30,599
uh so I get that's it from us thanks for

845
00:38:30,599 --> 00:38:33,240
joining and I think we are actually

846
00:38:33,240 --> 00:38:35,520
running out of time but if you have any

847
00:38:35,520 --> 00:38:37,500
questions we are here uh we can answer

848
00:38:37,500 --> 00:38:39,540
offline if you have any question thank

849
00:38:39,540 --> 00:38:41,960
you very much

