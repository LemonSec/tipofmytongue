1
00:00:00,299 --> 00:00:01,860
okay I guess I'll go ahead and get

2
00:00:01,860 --> 00:00:03,720
started um thank you for coming after

3
00:00:03,720 --> 00:00:05,940
lunch hopefully I keep you awake I know

4
00:00:05,940 --> 00:00:07,259
uh

5
00:00:07,259 --> 00:00:09,360
I was I got fully caffeinated beforehand

6
00:00:09,360 --> 00:00:11,280
so I'm good to go

7
00:00:11,280 --> 00:00:12,719
um we're here to talk about hardening

8
00:00:12,719 --> 00:00:14,940
against kubernetes hacks this is a

9
00:00:14,940 --> 00:00:16,619
beginner level track this is not going

10
00:00:16,619 --> 00:00:19,320
to be something that's super crazy look

11
00:00:19,320 --> 00:00:23,880
at this crazy way I found a exploits a

12
00:00:23,880 --> 00:00:25,380
buffer overrun or anything like that

13
00:00:25,380 --> 00:00:28,320
this is more of a look at why you need

14
00:00:28,320 --> 00:00:29,699
to pay attention especially from a

15
00:00:29,699 --> 00:00:31,140
developer point of view but also from

16
00:00:31,140 --> 00:00:33,480
operations why you need to pay attention

17
00:00:33,480 --> 00:00:37,200
to defaults and configurations and

18
00:00:37,200 --> 00:00:38,760
things that you might not be thinking

19
00:00:38,760 --> 00:00:40,800
about when you deploy an app

20
00:00:40,800 --> 00:00:43,320
now

21
00:00:43,320 --> 00:00:44,940
I come from a developer background I'm

22
00:00:44,940 --> 00:00:46,260
not going to read all that

23
00:00:46,260 --> 00:00:48,300
um I'm a developer Advocate at sneak I

24
00:00:48,300 --> 00:00:50,940
am not here to talk about our products

25
00:00:50,940 --> 00:00:52,260
at all today just here to talk about

26
00:00:52,260 --> 00:00:54,180
kubernetes best practice

27
00:00:54,180 --> 00:00:55,980
deployments on top of it and what can

28
00:00:55,980 --> 00:00:57,899
happen if you're not paying attention to

29
00:00:57,899 --> 00:01:01,140
things that it can impact security

30
00:01:01,140 --> 00:01:02,039
um

31
00:01:02,039 --> 00:01:03,840
those Eagle I might notice I have a

32
00:01:03,840 --> 00:01:05,820
crossout on my CK it just expired so I

33
00:01:05,820 --> 00:01:07,860
got to renew my cka I actually made that

34
00:01:07,860 --> 00:01:09,260
change because I don't want to

35
00:01:09,260 --> 00:01:11,520
misrepresent but I do have my cks I do

36
00:01:11,520 --> 00:01:13,680
my ckad and I will have my cka by this

37
00:01:13,680 --> 00:01:14,580
time

38
00:01:14,580 --> 00:01:16,080
hopefully next month when I get around

39
00:01:16,080 --> 00:01:17,820
to it

40
00:01:17,820 --> 00:01:19,560
um I hear that they've moved it all

41
00:01:19,560 --> 00:01:22,500
right up to 126 now so I'm still boning

42
00:01:22,500 --> 00:01:24,960
up on what I need to know I'm Eric

43
00:01:24,960 --> 00:01:27,119
Smalling all the socials I'm on hacky

44
00:01:27,119 --> 00:01:29,820
Durham for uh Mastodon but you can find

45
00:01:29,820 --> 00:01:31,320
me all those places

46
00:01:31,320 --> 00:01:33,180
um again if you want to follow along

47
00:01:33,180 --> 00:01:35,820
this is the GitHub repository uh click

48
00:01:35,820 --> 00:01:38,340
on the workshop directory in it that has

49
00:01:38,340 --> 00:01:40,740
the full walk through what we're going

50
00:01:40,740 --> 00:01:42,240
to do we're not going to do a lot of

51
00:01:42,240 --> 00:01:43,500
slides here we're going to mostly be

52
00:01:43,500 --> 00:01:44,579
coming right out of that GitHub

53
00:01:44,579 --> 00:01:47,179
repository

54
00:01:47,520 --> 00:01:48,479
um

55
00:01:48,479 --> 00:01:51,000
one more person let's see

56
00:01:51,000 --> 00:01:52,799
get my notes in front of me and we'll

57
00:01:52,799 --> 00:01:54,360
get going here

58
00:01:54,360 --> 00:01:55,500
so

59
00:01:55,500 --> 00:01:56,759
today we're going to be talking about

60
00:01:56,759 --> 00:01:58,619
how the combination of app

61
00:01:58,619 --> 00:02:01,320
vulnerabilities and misconfigurations

62
00:02:01,320 --> 00:02:04,740
can allow an attacker to spread the the

63
00:02:04,740 --> 00:02:06,840
the radius of their attack on your

64
00:02:06,840 --> 00:02:07,860
cluster

65
00:02:07,860 --> 00:02:10,199
this is a pattern that most every major

66
00:02:10,199 --> 00:02:12,239
exploit of recent years pretty much

67
00:02:12,239 --> 00:02:13,800
follows an application vulnerability

68
00:02:13,800 --> 00:02:16,020
gives an attacker the initial initial

69
00:02:16,020 --> 00:02:17,220
foothold

70
00:02:17,220 --> 00:02:19,140
and then either application or

71
00:02:19,140 --> 00:02:20,819
infrastructure level misconfigurations

72
00:02:20,819 --> 00:02:22,860
allow the attacker to spread out to

73
00:02:22,860 --> 00:02:24,239
other parts of your system it's pretty

74
00:02:24,239 --> 00:02:26,160
common narrative

75
00:02:26,160 --> 00:02:27,360
today we're going to be talking about

76
00:02:27,360 --> 00:02:28,620
this in the context of kubernetes

77
00:02:28,620 --> 00:02:30,300
obviously we can we're going to walk

78
00:02:30,300 --> 00:02:31,920
through how we can go from exploiting an

79
00:02:31,920 --> 00:02:33,300
app vulnerability

80
00:02:33,300 --> 00:02:35,599
to basically owning a cluster

81
00:02:35,599 --> 00:02:38,580
now this is a contrived demo I'm not

82
00:02:38,580 --> 00:02:40,319
going to show you some fancy new rce

83
00:02:40,319 --> 00:02:41,819
that's out there that nobody's seen

84
00:02:41,819 --> 00:02:44,700
before sorry to disappoint

85
00:02:44,700 --> 00:02:46,260
um I have to do something that's easily

86
00:02:46,260 --> 00:02:50,400
reproducible and demonstrable so we're

87
00:02:50,400 --> 00:02:53,340
going to set the stage here as a hacker

88
00:02:53,340 --> 00:02:55,620
whether it be from the outside in or

89
00:02:55,620 --> 00:02:57,959
inside of a company you have found a

90
00:02:57,959 --> 00:03:00,660
vulnerable ports you have found an

91
00:03:00,660 --> 00:03:03,840
application that has an rce

92
00:03:03,840 --> 00:03:05,940
and throughout this and again I'll get

93
00:03:05,940 --> 00:03:07,920
off these slides in a second I have this

94
00:03:07,920 --> 00:03:09,420
graphic we're calling the timeline of

95
00:03:09,420 --> 00:03:10,860
Doom where we're going to walk through

96
00:03:10,860 --> 00:03:13,440
left to right the the things we're

97
00:03:13,440 --> 00:03:15,780
finding and how we get from the initial

98
00:03:15,780 --> 00:03:20,040
app bone Discovery to Cluster ownership

99
00:03:20,040 --> 00:03:22,319
and with that I'm going to get out of

100
00:03:22,319 --> 00:03:23,700
the slides and we're going to jump right

101
00:03:23,700 --> 00:03:24,959
over to

102
00:03:24,959 --> 00:03:26,940
the GitHub repository that I was

103
00:03:26,940 --> 00:03:29,480
pointing you to

104
00:03:30,180 --> 00:03:32,760
get it to go back to the top

105
00:03:32,760 --> 00:03:36,239
so as I said if we go to the first okay

106
00:03:36,239 --> 00:03:38,120
I'm on Wi-Fi don't do that

107
00:03:38,120 --> 00:03:40,620
we're going to go to the workshop

108
00:03:40,620 --> 00:03:42,060
if you're following along we're going to

109
00:03:42,060 --> 00:03:44,280
go to First we're going to stop here at

110
00:03:44,280 --> 00:03:45,420
the beginning

111
00:03:45,420 --> 00:03:47,220
as I said to a couple people earlier

112
00:03:47,220 --> 00:03:49,319
that walked in here anytime you see a

113
00:03:49,319 --> 00:03:51,299
sneak person demonstrating something

114
00:03:51,299 --> 00:03:53,760
with a dash goof at the end do not

115
00:03:53,760 --> 00:03:55,700
deploy this anywhere you care about

116
00:03:55,700 --> 00:03:58,019
these are usually highly highly

117
00:03:58,019 --> 00:04:00,840
vulnerable repositories this one's not

118
00:04:00,840 --> 00:04:02,459
so bad because it's a contrived example

119
00:04:02,459 --> 00:04:04,319
but we have other ones out there if you

120
00:04:04,319 --> 00:04:06,720
go poke around our account if you were

121
00:04:06,720 --> 00:04:07,980
to deploy some of those apps to

122
00:04:07,980 --> 00:04:09,480
production people will own your cluster

123
00:04:09,480 --> 00:04:10,860
or own your at least own your

124
00:04:10,860 --> 00:04:13,379
environment pretty quickly they're meant

125
00:04:13,379 --> 00:04:15,299
for us to demonstrate vulnerable things

126
00:04:15,299 --> 00:04:17,880
so you have been warned don't put this

127
00:04:17,880 --> 00:04:19,320
on your development servers your QA

128
00:04:19,320 --> 00:04:21,418
environment your company's Cloud account

129
00:04:21,418 --> 00:04:23,160
please

130
00:04:23,160 --> 00:04:25,860
um so you have been warned so the setup

131
00:04:25,860 --> 00:04:27,479
as I said if you're going to follow

132
00:04:27,479 --> 00:04:30,000
along you need Docker desktop

133
00:04:30,000 --> 00:04:32,880
you need kind kubernetes and Docker Cube

134
00:04:32,880 --> 00:04:35,100
CTL get and you need to clone this

135
00:04:35,100 --> 00:04:36,440
repository down

136
00:04:36,440 --> 00:04:38,940
so for those who do want to follow along

137
00:04:38,940 --> 00:04:41,880
uh start doing that now

138
00:04:41,880 --> 00:04:45,979
and I'm going to I have a question

139
00:04:46,440 --> 00:04:49,139
the images pull down should work on arm

140
00:04:49,139 --> 00:04:51,060
I am on M1 and it works on mine I have

141
00:04:51,060 --> 00:04:52,919
built multi-arc for this so you should

142
00:04:52,919 --> 00:04:55,580
be good either way

143
00:04:56,000 --> 00:04:59,040
I also supposedly have unrate limited

144
00:04:59,040 --> 00:05:01,259
Docker Hub accounts so we shouldn't get

145
00:05:01,259 --> 00:05:02,540
hammered there either

146
00:05:02,540 --> 00:05:05,340
should is the key word

147
00:05:05,340 --> 00:05:08,639
uh so the reason I'm gonna while people

148
00:05:08,639 --> 00:05:09,780
are doing that I'm going to talk a

149
00:05:09,780 --> 00:05:11,460
little bit of why I'm why we have this

150
00:05:11,460 --> 00:05:13,979
platform so uh Docker desktop is just

151
00:05:13,979 --> 00:05:15,360
easy because it's there it's easy to

152
00:05:15,360 --> 00:05:17,220
install a lot of people have it

153
00:05:17,220 --> 00:05:18,900
um if as long as you have Docker on your

154
00:05:18,900 --> 00:05:19,919
machine if you're running Linux and

155
00:05:19,919 --> 00:05:21,000
you've just got the docker command line

156
00:05:21,000 --> 00:05:23,160
that should work just fine uh the reason

157
00:05:23,160 --> 00:05:25,500
I am using kind is because it is a nice

158
00:05:25,500 --> 00:05:27,720
reproducible way to demonstrate a

159
00:05:27,720 --> 00:05:30,120
cubeadm style deployment of kubernetes

160
00:05:30,120 --> 00:05:32,940
this is meant to Dem to be an example of

161
00:05:32,940 --> 00:05:34,800
you work at a company and you're DIY in

162
00:05:34,800 --> 00:05:36,720
your own cluster and some of the things

163
00:05:36,720 --> 00:05:37,800
you might or might not be thinking about

164
00:05:37,800 --> 00:05:40,380
while you do that and as an application

165
00:05:40,380 --> 00:05:42,300
deployer developer deploying on top of

166
00:05:42,300 --> 00:05:44,699
that kind of a cluster kind is really

167
00:05:44,699 --> 00:05:46,740
nice in that way because it is you can

168
00:05:46,740 --> 00:05:48,539
put on your own cni on top of it you can

169
00:05:48,539 --> 00:05:50,400
do all sorts of stuff with it uh you can

170
00:05:50,400 --> 00:05:51,419
use other you could probably do this

171
00:05:51,419 --> 00:05:52,800
with minicube you could probably do this

172
00:05:52,800 --> 00:05:55,440
with a lot of others but uh I chose kind

173
00:05:55,440 --> 00:05:57,240
because I did uh one thing you don't

174
00:05:57,240 --> 00:05:58,500
want to make sure of though is if you

175
00:05:58,500 --> 00:06:00,600
are running Docker desktop or Rancher

176
00:06:00,600 --> 00:06:02,820
desktop do not be running their

177
00:06:02,820 --> 00:06:04,919
kubernetes make sure that is turned off

178
00:06:04,919 --> 00:06:07,620
because they will you will hey you run

179
00:06:07,620 --> 00:06:09,300
out of battery real quick but they will

180
00:06:09,300 --> 00:06:11,100
fight each other and you'll may have to

181
00:06:11,100 --> 00:06:12,539
know which one you're pointing at not

182
00:06:12,539 --> 00:06:13,919
using the docker one because it can't do

183
00:06:13,919 --> 00:06:15,900
multi-node and I can't do cni and things

184
00:06:15,900 --> 00:06:17,880
like that

185
00:06:17,880 --> 00:06:20,340
so uh if you're running through the

186
00:06:20,340 --> 00:06:22,080
setup

187
00:06:22,080 --> 00:06:24,180
at the bottom of this

188
00:06:24,180 --> 00:06:26,520
setup page you'll see that there is a

189
00:06:26,520 --> 00:06:29,520
aptly named setup sh file CD into the

190
00:06:29,520 --> 00:06:31,979
setup folder run that script that is

191
00:06:31,979 --> 00:06:33,720
going to stand up that Cube that kind

192
00:06:33,720 --> 00:06:36,840
cluster it'll be 124 for you that the

193
00:06:36,840 --> 00:06:38,759
screenshots old

194
00:06:38,759 --> 00:06:41,220
um it's going to set it up with two

195
00:06:41,220 --> 00:06:43,259
nodes a control plane and a worker it's

196
00:06:43,259 --> 00:06:45,660
going to put I think I have I don't

197
00:06:45,660 --> 00:06:47,160
remember if I'm using Calico or psyllium

198
00:06:47,160 --> 00:06:50,880
it says it's Calico so it must be Calico

199
00:06:50,880 --> 00:06:52,380
um I changed it every once in a while

200
00:06:52,380 --> 00:06:54,539
and uh it's going to deploy our

201
00:06:54,539 --> 00:06:57,960
vulnerable app into it and set some

202
00:06:57,960 --> 00:06:59,520
other things up about it

203
00:06:59,520 --> 00:07:01,740
you'll see at the bottom of it a bunch

204
00:07:01,740 --> 00:07:03,479
of weightings it's basically just

205
00:07:03,479 --> 00:07:05,400
caching up some some containers that

206
00:07:05,400 --> 00:07:06,600
we'll be using throughout the

207
00:07:06,600 --> 00:07:08,880
demonstration at the very bottom you

208
00:07:08,880 --> 00:07:11,220
should see pods sneaky created pod

209
00:07:11,220 --> 00:07:13,979
sneaky deleted that's on purpose so that

210
00:07:13,979 --> 00:07:16,199
it just it primes the uh

211
00:07:16,199 --> 00:07:18,479
cache the image cache inside of the kind

212
00:07:18,479 --> 00:07:21,000
cluster and then for sanity tests you

213
00:07:21,000 --> 00:07:23,160
can check your nodes and then

214
00:07:23,160 --> 00:07:25,560
you want to go to this URL

215
00:07:25,560 --> 00:07:28,680
which is localhost web admin

216
00:07:28,680 --> 00:07:30,240
if you followed all the steps and you're

217
00:07:30,240 --> 00:07:31,860
on Docker desktop at least this should

218
00:07:31,860 --> 00:07:35,160
work if it doesn't and you get a 404

219
00:07:35,160 --> 00:07:37,259
it's I've got some kind of race

220
00:07:37,259 --> 00:07:38,639
condition in the script I need to work

221
00:07:38,639 --> 00:07:41,400
on if you just rerun this Cube apply

222
00:07:41,400 --> 00:07:43,800
which is comes from the setup script

223
00:07:43,800 --> 00:07:47,520
just re resends the the Ingress that

224
00:07:47,520 --> 00:07:49,319
should that should solve your 404

225
00:07:49,319 --> 00:07:50,460
problem should you be getting it what

226
00:07:50,460 --> 00:07:52,680
you should get is something that looks

227
00:07:52,680 --> 00:07:54,840
like this

228
00:07:54,840 --> 00:07:57,960
and as I said this is a contrived rce so

229
00:07:57,960 --> 00:07:59,699
this is just a python app that allows

230
00:07:59,699 --> 00:08:02,460
you to execute commands in a real kit in

231
00:08:02,460 --> 00:08:04,139
a real world scenario a remote code

232
00:08:04,139 --> 00:08:05,819
execution exploit if you're not familiar

233
00:08:05,819 --> 00:08:10,020
with it is a way that a bad actor or

234
00:08:10,020 --> 00:08:13,500
attacker whatever can send specifically

235
00:08:13,500 --> 00:08:14,819
formatted

236
00:08:14,819 --> 00:08:18,240
requests queries data into your app and

237
00:08:18,240 --> 00:08:21,720
get access to run arbitrary code on your

238
00:08:21,720 --> 00:08:24,840
instance your host your server and we'll

239
00:08:24,840 --> 00:08:27,000
be emulating that now we have other

240
00:08:27,000 --> 00:08:28,680
demos out there we can show you of like

241
00:08:28,680 --> 00:08:29,879
you know love Rochelle or things that

242
00:08:29,879 --> 00:08:32,039
allow you to actually do that but in 90

243
00:08:32,039 --> 00:08:33,958
minutes I can't really get into all that

244
00:08:33,958 --> 00:08:36,899
minutia so we do this simple one which

245
00:08:36,899 --> 00:08:39,179
acts like one and gives a nice pretty

246
00:08:39,179 --> 00:08:40,620
demonstratable

247
00:08:40,620 --> 00:08:43,500
face to it so for those who are running

248
00:08:43,500 --> 00:08:45,120
the setup script can I get a hands up

249
00:08:45,120 --> 00:08:47,279
that you're still running it or you okay

250
00:08:47,279 --> 00:08:49,920
has anyone completed it

251
00:08:49,920 --> 00:08:52,560
yeah on this wi-fi I have a bad feeling

252
00:08:52,560 --> 00:08:56,899
um that it's going to take a while so

253
00:08:57,779 --> 00:09:00,140
oh

254
00:09:03,720 --> 00:09:05,580
well it's going to need to be depending

255
00:09:05,580 --> 00:09:06,839
what version of kubernetes you're

256
00:09:06,839 --> 00:09:09,240
running inside kind the the setup it's

257
00:09:09,240 --> 00:09:11,279
going to start is a kind cluster with a

258
00:09:11,279 --> 00:09:13,440
specific set of parameters on it and a

259
00:09:13,440 --> 00:09:16,260
specific version of kubernetes 124 in

260
00:09:16,260 --> 00:09:18,480
this case so the thing that takes the

261
00:09:18,480 --> 00:09:20,580
longest honestly is downloading that 124

262
00:09:20,580 --> 00:09:22,560
node image so if you already have that

263
00:09:22,560 --> 00:09:24,720
image possibly that'll speed things up

264
00:09:24,720 --> 00:09:27,600
but you do do need to run the setup

265
00:09:27,600 --> 00:09:30,180
scripts to get that and the Apple

266
00:09:30,180 --> 00:09:32,880
deployed

267
00:09:32,880 --> 00:09:35,279
so I'm going to go slowly forward and

268
00:09:35,279 --> 00:09:37,980
hopefully this will finish so I want to

269
00:09:37,980 --> 00:09:39,899
make sure that the goal today is to show

270
00:09:39,899 --> 00:09:41,519
you the exploit walk through the whole

271
00:09:41,519 --> 00:09:44,100
process of expanding and expanding and

272
00:09:44,100 --> 00:09:46,200
expanding this exploit and then get into

273
00:09:46,200 --> 00:09:47,940
talking about what are some of the

274
00:09:47,940 --> 00:09:50,880
things we could do to mitigate this

275
00:09:50,880 --> 00:09:52,800
um I will mention some as we go but at

276
00:09:52,800 --> 00:09:55,200
the end there's a whole section on ideas

277
00:09:55,200 --> 00:09:57,899
for patterns and and things you can do

278
00:09:57,899 --> 00:10:01,160
to mitigate you know problems like this

279
00:10:01,160 --> 00:10:03,060
a couple things I'll call out

280
00:10:03,060 --> 00:10:05,279
immediately that will come up as a

281
00:10:05,279 --> 00:10:07,620
question is why the heck am I doing pod

282
00:10:07,620 --> 00:10:09,420
security policy there's PSPs in here

283
00:10:09,420 --> 00:10:13,200
PSPs were deprecated and removed in 125.

284
00:10:13,200 --> 00:10:16,140
problem is most people aren't on 125. um

285
00:10:16,140 --> 00:10:17,760
I shouldn't say most many people aren't

286
00:10:17,760 --> 00:10:20,160
on 125. you are going to if you are a

287
00:10:20,160 --> 00:10:21,420
consultant working with customers

288
00:10:21,420 --> 00:10:23,040
whether you're a develop working with

289
00:10:23,040 --> 00:10:25,200
developers operations whatever if

290
00:10:25,200 --> 00:10:26,399
they're running their own kubernetes

291
00:10:26,399 --> 00:10:27,899
clusters there's a very high chance

292
00:10:27,899 --> 00:10:30,720
you're still using PSPs so I'm showing

293
00:10:30,720 --> 00:10:32,820
them here we will discuss

294
00:10:32,820 --> 00:10:35,640
what's you know what replaces PSP how to

295
00:10:35,640 --> 00:10:37,560
do PSA you know we'll talk about that

296
00:10:37,560 --> 00:10:39,959
when we get there but PSPs are still a

297
00:10:39,959 --> 00:10:41,580
valid thing you're going to see in the

298
00:10:41,580 --> 00:10:43,740
wild right now so they're included in

299
00:10:43,740 --> 00:10:45,420
this

300
00:10:45,420 --> 00:10:48,540
um I talked about why I'm using kind

301
00:10:48,540 --> 00:10:51,060
um we will talk about managed clusters

302
00:10:51,060 --> 00:10:55,079
like eks sivo and whatever

303
00:10:55,079 --> 00:10:57,180
um a little bit later as well

304
00:10:57,180 --> 00:11:00,300
but for now I'm going to go back to the

305
00:11:00,300 --> 00:11:03,720
steps and when you get to where that

306
00:11:03,720 --> 00:11:06,360
sanity test is passed we're going to go

307
00:11:06,360 --> 00:11:08,220
start exploring and this is where you

308
00:11:08,220 --> 00:11:11,660
kind of put on the black hat ish

309
00:11:11,660 --> 00:11:14,339
and we're going to go look at this

310
00:11:14,339 --> 00:11:16,680
taking a vulnerability and going forward

311
00:11:16,680 --> 00:11:18,480
with it so we have this vulnerable route

312
00:11:18,480 --> 00:11:20,880
we we found this app out there for

313
00:11:20,880 --> 00:11:22,079
whatever through whatever means maybe

314
00:11:22,079 --> 00:11:23,700
we've got a POC we pulled down from the

315
00:11:23,700 --> 00:11:26,519
bone DB and we're able to identify that

316
00:11:26,519 --> 00:11:30,120
this endpoint has the uh the rce in it

317
00:11:30,120 --> 00:11:34,260
and if we take the URL in Step part one

318
00:11:34,260 --> 00:11:35,399
step one

319
00:11:35,399 --> 00:11:37,980
which is basically localhost web admin

320
00:11:37,980 --> 00:11:39,899
and we're going to send a CMD argument

321
00:11:39,899 --> 00:11:41,760
in with the word hostname

322
00:11:41,760 --> 00:11:44,760
you'll see that

323
00:11:44,760 --> 00:11:48,260
the hostname of the server the the host

324
00:11:48,260 --> 00:11:51,720
that this process is running in Ran

325
00:11:51,720 --> 00:11:52,800
now

326
00:11:52,800 --> 00:11:54,839
again like I said this is contrived but

327
00:11:54,839 --> 00:11:57,660
that is exactly how an rce can work is

328
00:11:57,660 --> 00:11:59,339
for instance in a log for Shell

329
00:11:59,339 --> 00:12:01,860
situation you have an a fake ldap server

330
00:12:01,860 --> 00:12:04,640
out there that feeds back

331
00:12:04,640 --> 00:12:08,040
a class file that can do a remote shell

332
00:12:08,040 --> 00:12:08,940
back and all of a sudden you can start

333
00:12:08,940 --> 00:12:10,860
running commands like this on somebody

334
00:12:10,860 --> 00:12:13,380
else's host

335
00:12:13,380 --> 00:12:17,279
so hostname is interesting but

336
00:12:17,279 --> 00:12:18,720
the next thing I'm probably going to

337
00:12:18,720 --> 00:12:20,339
want to do is start poking around for

338
00:12:20,339 --> 00:12:22,980
information about what's going on you

339
00:12:22,980 --> 00:12:24,480
know in the environment this app is

340
00:12:24,480 --> 00:12:26,700
running in so we're going to run EnV and

341
00:12:26,700 --> 00:12:29,880
take a look at the environment variables

342
00:12:29,880 --> 00:12:32,160
all sorts of stuff in there so we get

343
00:12:32,160 --> 00:12:33,899
some interesting info here we could see

344
00:12:33,899 --> 00:12:34,980
that there's a whole bunch of things

345
00:12:34,980 --> 00:12:37,320
called kubernetes so we now know oh this

346
00:12:37,320 --> 00:12:38,820
is most likely running in a kubernetes

347
00:12:38,820 --> 00:12:42,240
cluster again take off the put on the

348
00:12:42,240 --> 00:12:44,519
the mental Blinder that you installed

349
00:12:44,519 --> 00:12:45,720
this yourself

350
00:12:45,720 --> 00:12:47,220
we know that we're in a kubernetes

351
00:12:47,220 --> 00:12:47,940
cluster which means we're probably

352
00:12:47,940 --> 00:12:50,339
running in a container obviously and all

353
00:12:50,339 --> 00:12:52,560
that stuff we see things like a service

354
00:12:52,560 --> 00:12:56,160
host one of the more interesting pieces

355
00:12:56,160 --> 00:12:58,980
is we see a kubernetes port

356
00:12:58,980 --> 00:13:02,220
and there's an internal IP address and

357
00:13:02,220 --> 00:13:06,420
ports that is the internal API server

358
00:13:06,420 --> 00:13:09,000
endpoint that's the control plane for

359
00:13:09,000 --> 00:13:10,380
kubernetes if you're not familiar with

360
00:13:10,380 --> 00:13:13,079
the API server so

361
00:13:13,079 --> 00:13:15,839
we'll note that

362
00:13:15,839 --> 00:13:18,240
and this was just you know the text in

363
00:13:18,240 --> 00:13:20,040
here talks about that

364
00:13:20,040 --> 00:13:21,899
and the next thing we want to do is I

365
00:13:21,899 --> 00:13:24,120
want to know what the IP my my pods IP

366
00:13:24,120 --> 00:13:25,800
is because I'm going to need that info

367
00:13:25,800 --> 00:13:27,300
later as well so we're going to send

368
00:13:27,300 --> 00:13:31,260
hostname space Dash I

369
00:13:31,260 --> 00:13:34,019
and I got too many tabs already there we

370
00:13:34,019 --> 00:13:35,639
go so now I have that so I know okay

371
00:13:35,639 --> 00:13:37,860
well I'm I'm on this 10. address

372
00:13:37,860 --> 00:13:39,600
interesting

373
00:13:39,600 --> 00:13:40,680
okay

374
00:13:40,680 --> 00:13:43,440
more information so at that point

375
00:13:43,440 --> 00:13:45,180
let's take a checkpoint let's see what

376
00:13:45,180 --> 00:13:46,740
we know now so we know that we have an

377
00:13:46,740 --> 00:13:48,839
application with this rce this remote

378
00:13:48,839 --> 00:13:51,240
code execution vulnerability and it's

379
00:13:51,240 --> 00:13:52,860
available to us through Port 80 in this

380
00:13:52,860 --> 00:13:54,420
case

381
00:13:54,420 --> 00:13:55,920
um we're pretty sure that we're running

382
00:13:55,920 --> 00:13:57,779
on a kubernetes cluster one of the

383
00:13:57,779 --> 00:13:59,040
environmental variables in there showed

384
00:13:59,040 --> 00:14:00,660
a port of 5000 so we probably earn a

385
00:14:00,660 --> 00:14:02,459
service with this support is this pods

386
00:14:02,459 --> 00:14:04,440
listening on Port 5000.

387
00:14:04,440 --> 00:14:06,720
uh we have the internal API server

388
00:14:06,720 --> 00:14:08,540
apparently of a kubernetes

389
00:14:08,540 --> 00:14:12,600
control plane IP address sorry and we

390
00:14:12,600 --> 00:14:15,120
know what IP address we're running on so

391
00:14:15,120 --> 00:14:17,279
pretty graphic skip past

392
00:14:17,279 --> 00:14:18,540
um so in the timeline of Doom we're in

393
00:14:18,540 --> 00:14:19,920
the with that one I had showed before we

394
00:14:19,920 --> 00:14:23,339
know we have an app voltm at that point

395
00:14:23,339 --> 00:14:25,380
okay

396
00:14:25,380 --> 00:14:27,060
how many people are still running the

397
00:14:27,060 --> 00:14:29,399
setup script

398
00:14:29,399 --> 00:14:31,560
okay I apologize

399
00:14:31,560 --> 00:14:31,920
[Music]

400
00:14:31,920 --> 00:14:33,180
um

401
00:14:33,180 --> 00:14:35,820
I I've had people actually draw I

402
00:14:35,820 --> 00:14:37,440
presented versions like this where they

403
00:14:37,440 --> 00:14:39,000
use their hotspot and it's it's better

404
00:14:39,000 --> 00:14:42,240
but I apologize the uh I didn't count on

405
00:14:42,240 --> 00:14:44,399
it being as slow as it is

406
00:14:44,399 --> 00:14:46,019
I'm just going to go forward and we're

407
00:14:46,019 --> 00:14:47,399
going to treat this as you can play with

408
00:14:47,399 --> 00:14:49,320
this afterwards if you can follow along

409
00:14:49,320 --> 00:14:51,899
and catch up great in fact uh if I had

410
00:14:51,899 --> 00:14:53,760
swag I'd give you some for doing it but

411
00:14:53,760 --> 00:14:56,100
we're gonna I'm gonna keep going through

412
00:14:56,100 --> 00:14:57,300
this so I wanna make sure we have time

413
00:14:57,300 --> 00:14:58,980
at the end for questions and to get

414
00:14:58,980 --> 00:15:01,139
through it all so I'm just going to go

415
00:15:01,139 --> 00:15:03,240
through to step two now

416
00:15:03,240 --> 00:15:06,000
and so now we're going to try to access

417
00:15:06,000 --> 00:15:09,120
that API server

418
00:15:09,120 --> 00:15:14,100
so by default every kubernetes pod has a

419
00:15:14,100 --> 00:15:16,459
service token

420
00:15:16,459 --> 00:15:20,160
associated with a service account

421
00:15:20,160 --> 00:15:22,860
it's let me just open this talk about it

422
00:15:22,860 --> 00:15:25,019
while I pull it and there it is so I

423
00:15:25,019 --> 00:15:27,660
just catted I ran Cat

424
00:15:27,660 --> 00:15:29,459
bar run Secrets kubernetes i o service

425
00:15:29,459 --> 00:15:30,899
account token that's the default place

426
00:15:30,899 --> 00:15:33,060
for the default token that by default

427
00:15:33,060 --> 00:15:35,100
gets mounted there

428
00:15:35,100 --> 00:15:37,260
so that

429
00:15:37,260 --> 00:15:38,760
is a credential

430
00:15:38,760 --> 00:15:42,360
we can use that to try to

431
00:15:42,360 --> 00:15:43,920
get at

432
00:15:43,920 --> 00:15:44,579
um

433
00:15:44,579 --> 00:15:46,620
that started picking away at that API

434
00:15:46,620 --> 00:15:48,540
server and see if what we can see with

435
00:15:48,540 --> 00:15:49,560
it

436
00:15:49,560 --> 00:15:52,199
this which is the next stage this is

437
00:15:52,199 --> 00:15:54,899
just a a side saying even if we didn't

438
00:15:54,899 --> 00:15:57,779
have an rce we could potentially get a

439
00:15:57,779 --> 00:15:59,100
lot of this kind of information through

440
00:15:59,100 --> 00:16:00,420
something like

441
00:16:00,420 --> 00:16:02,940
um the proc file system if we could just

442
00:16:02,940 --> 00:16:05,220
get a directory traversal vulnerability

443
00:16:05,220 --> 00:16:06,540
we could actually get into your

444
00:16:06,540 --> 00:16:08,279
environment variables that way

445
00:16:08,279 --> 00:16:10,680
look at that so similar kind of

446
00:16:10,680 --> 00:16:12,360
information to be gathered there it's

447
00:16:12,360 --> 00:16:13,860
just a more of an aside than anything

448
00:16:13,860 --> 00:16:15,660
else but we do have an rce so we're

449
00:16:15,660 --> 00:16:17,880
going to try to see let's see if we've

450
00:16:17,880 --> 00:16:20,220
got some tools that are and access at

451
00:16:20,220 --> 00:16:21,720
our disposal

452
00:16:21,720 --> 00:16:25,320
so I just ran curl to google.com

453
00:16:25,320 --> 00:16:27,959
and not only do I have curl so hey I've

454
00:16:27,959 --> 00:16:30,800
got curl on my file system yay

455
00:16:30,800 --> 00:16:33,899
but I also have it looks like access to

456
00:16:33,899 --> 00:16:34,800
the internet

457
00:16:34,800 --> 00:16:37,860
from this post to this container I got a

458
00:16:37,860 --> 00:16:39,600
301 back from Google which is the normal

459
00:16:39,600 --> 00:16:42,540
response so

460
00:16:42,540 --> 00:16:45,540
we have network access and we have curl

461
00:16:45,540 --> 00:16:48,300
at our disposal

462
00:16:48,300 --> 00:16:50,579
so

463
00:16:50,579 --> 00:16:52,079
let's take what we've learned and we're

464
00:16:52,079 --> 00:16:53,100
going to apply this to try to get out

465
00:16:53,100 --> 00:16:55,740
that API server so we are going to take

466
00:16:55,740 --> 00:16:57,180
the kubernetes port we saw on the from

467
00:16:57,180 --> 00:16:58,800
the environment of the environmental

468
00:16:58,800 --> 00:17:01,500
variables we're going to

469
00:17:01,500 --> 00:17:03,660
um I'm going to skip past the the

470
00:17:03,660 --> 00:17:06,540
pecking away at the at the API server to

471
00:17:06,540 --> 00:17:08,939
try to find something vulnerable and say

472
00:17:08,939 --> 00:17:10,980
that I found out hey endpoints seems to

473
00:17:10,980 --> 00:17:12,720
be available to me and we're going to

474
00:17:12,720 --> 00:17:15,839
form a curl command that goes after that

475
00:17:15,839 --> 00:17:17,220
so

476
00:17:17,220 --> 00:17:19,619
here we have curling we're taking the

477
00:17:19,619 --> 00:17:21,599
casert which is right alongside that

478
00:17:21,599 --> 00:17:25,199
token same place using that and setting

479
00:17:25,199 --> 00:17:27,240
an authorization Bearer with the output

480
00:17:27,240 --> 00:17:30,120
of catting the token calling the that's

481
00:17:30,120 --> 00:17:33,660
uh 10 9601 that's the kubit host

482
00:17:33,660 --> 00:17:35,460
and we're calling the default endpoints

483
00:17:35,460 --> 00:17:38,780
and we got a response back

484
00:17:40,080 --> 00:17:41,760
this is interesting it shows that we

485
00:17:41,760 --> 00:17:44,039
have a good token mainly we know we are

486
00:17:44,039 --> 00:17:45,600
able to talk to the kubernetes API

487
00:17:45,600 --> 00:17:49,799
server if this was not running in kind

488
00:17:49,799 --> 00:17:51,780
um this is one of the bad things about

489
00:17:51,780 --> 00:17:53,580
using kind since it's behind a Docker

490
00:17:53,580 --> 00:17:55,820
networking kind of layer onion layer

491
00:17:55,820 --> 00:17:58,260
we're seeing an IP address there that's

492
00:17:58,260 --> 00:18:01,980
172 1903 in the in this bottom section

493
00:18:01,980 --> 00:18:04,500
that is very likely would have otherwise

494
00:18:04,500 --> 00:18:07,980
be the public facing API server endpoint

495
00:18:07,980 --> 00:18:10,080
that I could get in at because we're in

496
00:18:10,080 --> 00:18:11,760
kind we're actually it's a local host

497
00:18:11,760 --> 00:18:14,280
one that's it's wrapped but if we

498
00:18:14,280 --> 00:18:16,020
weren't kind that we could uh use this

499
00:18:16,020 --> 00:18:18,179
IP now to try to get at this thing from

500
00:18:18,179 --> 00:18:20,700
outside of this pod

501
00:18:20,700 --> 00:18:22,980
and that's all spelled out in the uh

502
00:18:22,980 --> 00:18:25,440
paragraphs below here

503
00:18:25,440 --> 00:18:27,120
so we already knew a bunch of stuff when

504
00:18:27,120 --> 00:18:29,220
the new info we have the service account

505
00:18:29,220 --> 00:18:30,720
and pod configurations and it's

506
00:18:30,720 --> 00:18:33,179
applications namespace is using the

507
00:18:33,179 --> 00:18:35,460
default Auto Mount service account token

508
00:18:35,460 --> 00:18:38,220
setting of true so when you create a

509
00:18:38,220 --> 00:18:40,700
service account

510
00:18:41,220 --> 00:18:43,620
um by default that service account token

511
00:18:43,620 --> 00:18:45,360
will get automated you can turn that off

512
00:18:45,360 --> 00:18:47,700
you can set that to false

513
00:18:47,700 --> 00:18:49,440
unfortunately the default and kubernetes

514
00:18:49,440 --> 00:18:52,559
is true and so it'll be there you should

515
00:18:52,559 --> 00:18:54,660
set it to loss in my opinion

516
00:18:54,660 --> 00:18:56,280
um so we'll leave that at that for a

517
00:18:56,280 --> 00:18:59,160
moment uh so we found that token

518
00:18:59,160 --> 00:19:00,600
and we're able to connect to the API

519
00:19:00,600 --> 00:19:02,780
server with it

520
00:19:02,780 --> 00:19:06,000
and again the external IP is kind of

521
00:19:06,000 --> 00:19:08,280
masked so we now know we have a pod

522
00:19:08,280 --> 00:19:10,559
token inside the Pod we have a it allows

523
00:19:10,559 --> 00:19:13,559
access to the endpoints API

524
00:19:13,559 --> 00:19:16,320
so let's see if we can get deeper

525
00:19:16,320 --> 00:19:18,600
this step we're going to try to find out

526
00:19:18,600 --> 00:19:19,740
some more information about the cluster

527
00:19:19,740 --> 00:19:20,880
itself so we found out a bunch of

528
00:19:20,880 --> 00:19:22,320
information about this container in this

529
00:19:22,320 --> 00:19:23,460
pod

530
00:19:23,460 --> 00:19:24,660
and we found a little bit about the

531
00:19:24,660 --> 00:19:25,980
cluster we're going to get more info

532
00:19:25,980 --> 00:19:29,460
about this cluster so we wanted now this

533
00:19:29,460 --> 00:19:33,480
this using our rce this this URL based

534
00:19:33,480 --> 00:19:36,059
back and forth is cumbersome so I want

535
00:19:36,059 --> 00:19:38,760
to try to use a local Cube CTL and that

536
00:19:38,760 --> 00:19:40,140
token

537
00:19:40,140 --> 00:19:42,900
to start accessing this from

538
00:19:42,900 --> 00:19:45,059
my machine now you can imagine this

539
00:19:45,059 --> 00:19:47,100
could be either a machine

540
00:19:47,100 --> 00:19:48,720
connecting over the Internet or more

541
00:19:48,720 --> 00:19:50,039
likely this is probably somebody who's

542
00:19:50,039 --> 00:19:51,900
got malware on a laptop who's connecting

543
00:19:51,900 --> 00:19:54,419
into your QA cluster or your Dev cluster

544
00:19:54,419 --> 00:19:55,980
you know who knows what

545
00:19:55,980 --> 00:19:57,539
so

546
00:19:57,539 --> 00:19:58,740
um

547
00:19:58,740 --> 00:20:00,360
we're going to take that token that we

548
00:20:00,360 --> 00:20:03,000
found in the prior

549
00:20:03,000 --> 00:20:05,340
to which dab are you there we are I'm

550
00:20:05,340 --> 00:20:07,860
just going to copy that whole thing

551
00:20:07,860 --> 00:20:10,380
and in your demonstration GitHub

552
00:20:10,380 --> 00:20:13,500
repository that we cloned coming back

553
00:20:13,500 --> 00:20:15,299
out of that setup folder

554
00:20:15,299 --> 00:20:17,220
there is a little helper script in here

555
00:20:17,220 --> 00:20:20,039
called setup cubeconfig shell I'm going

556
00:20:20,039 --> 00:20:21,660
to source that let me put it I'm going

557
00:20:21,660 --> 00:20:24,559
to put a dot set up

558
00:20:24,559 --> 00:20:26,280
cubeconfig

559
00:20:26,280 --> 00:20:27,900
and it's going to ask for the token I'm

560
00:20:27,900 --> 00:20:29,160
going to paste what I just copied out of

561
00:20:29,160 --> 00:20:30,600
the browser into this

562
00:20:30,600 --> 00:20:32,760
and now again here because I'm in kind

563
00:20:32,760 --> 00:20:34,320
I'm going to put

564
00:20:34,320 --> 00:20:38,039
localhost oops I could type it

565
00:20:38,039 --> 00:20:41,039
6443

566
00:20:41,100 --> 00:20:42,720
and we just it just created a quick

567
00:20:42,720 --> 00:20:45,840
config file and set my context to that

568
00:20:45,840 --> 00:20:48,360
so if I do Cube CTL

569
00:20:48,360 --> 00:20:53,760
uh let's do get pods

570
00:20:53,760 --> 00:20:55,740
I gotta forbidden that's actually not a

571
00:20:55,740 --> 00:20:56,580
bad thing

572
00:20:56,580 --> 00:20:57,960
hopefully I'm not riffing away from my

573
00:20:57,960 --> 00:21:00,419
my steps here but

574
00:21:00,419 --> 00:21:02,700
this is telling me that um that tells me

575
00:21:02,700 --> 00:21:03,900
first of all my context is set up

576
00:21:03,900 --> 00:21:06,059
correctly I was able to connect to that

577
00:21:06,059 --> 00:21:07,799
API server because I got a forbidden

578
00:21:07,799 --> 00:21:10,140
back and it's telling me that the system

579
00:21:10,140 --> 00:21:12,179
service account secure web admin cannot

580
00:21:12,179 --> 00:21:15,059
list resources pods in the API Group in

581
00:21:15,059 --> 00:21:18,299
the deep in the namespace default

582
00:21:18,299 --> 00:21:19,799
because I didn't specify default on the

583
00:21:19,799 --> 00:21:22,559
command line obviously so this walks

584
00:21:22,559 --> 00:21:24,820
through all of that

585
00:21:24,820 --> 00:21:25,440
[Music]

586
00:21:25,440 --> 00:21:27,240
um

587
00:21:27,240 --> 00:21:30,120
but that forbidden error exposed

588
00:21:30,120 --> 00:21:32,780
something interesting

589
00:21:35,039 --> 00:21:36,780
pure if that's is that legible from the

590
00:21:36,780 --> 00:21:38,640
back and you need me to grow that are we

591
00:21:38,640 --> 00:21:40,340
okay

592
00:21:40,340 --> 00:21:44,280
so there's a namespace named secure

593
00:21:44,280 --> 00:21:46,380
namespaces aren't technically security

594
00:21:46,380 --> 00:21:48,480
boundaries naming one secure does not

595
00:21:48,480 --> 00:21:51,240
make your deployment secure

596
00:21:51,240 --> 00:21:54,179
um but this one is named secure

597
00:21:54,179 --> 00:21:56,039
so that's where the service account came

598
00:21:56,039 --> 00:21:57,480
from so let's try

599
00:21:57,480 --> 00:21:59,700
using it so we'll do

600
00:21:59,700 --> 00:22:01,200
add that to my command and sure enough

601
00:22:01,200 --> 00:22:03,299
there's a pod single pod single

602
00:22:03,299 --> 00:22:05,520
container in there running a web app

603
00:22:05,520 --> 00:22:08,220
that's that's our vulnerable app

604
00:22:08,220 --> 00:22:09,960
so we are now connecting from an

605
00:22:09,960 --> 00:22:12,720
external entity index my laptop in this

606
00:22:12,720 --> 00:22:16,080
case to the API server using a token we

607
00:22:16,080 --> 00:22:16,980
stole

608
00:22:16,980 --> 00:22:19,860
from the Pod that had a vulnerable

609
00:22:19,860 --> 00:22:21,659
remote code execution vulnerability in

610
00:22:21,659 --> 00:22:23,780
it

611
00:22:24,960 --> 00:22:26,460
let's see let's see what else we can do

612
00:22:26,460 --> 00:22:27,960
with this so we're going to use the cube

613
00:22:27,960 --> 00:22:30,960
CTL auth can I

614
00:22:30,960 --> 00:22:32,820
command and we're going to list our

615
00:22:32,820 --> 00:22:33,900
capabilities

616
00:22:33,900 --> 00:22:36,000
so in the default namespace because I

617
00:22:36,000 --> 00:22:38,400
didn't provide one it's saying I can get

618
00:22:38,400 --> 00:22:40,559
it endpoints so that was my kind of my

619
00:22:40,559 --> 00:22:42,659
first in to know that the token worked

620
00:22:42,659 --> 00:22:44,100
remember we were able to get endpoints

621
00:22:44,100 --> 00:22:46,620
that's interesting but whatever but I

622
00:22:46,620 --> 00:22:47,820
don't really have a lot of access to

623
00:22:47,820 --> 00:22:49,679
access to anything else but if I ask

624
00:22:49,679 --> 00:22:53,840
what I can do in the secure namespace

625
00:22:55,440 --> 00:22:59,159
here you can see at the top resources

626
00:22:59,159 --> 00:23:01,559
point at it here I guess the very top

627
00:23:01,559 --> 00:23:04,500
you see resources wild card

628
00:23:04,500 --> 00:23:08,159
and all the verbs so I pretty much have

629
00:23:08,159 --> 00:23:11,580
all the access I need in this namespace

630
00:23:11,580 --> 00:23:13,740
this is not uncommon

631
00:23:13,740 --> 00:23:15,780
with with a deployment developer will

632
00:23:15,780 --> 00:23:17,640
write a deployment and create a service

633
00:23:17,640 --> 00:23:19,140
account and create our back for it

634
00:23:19,140 --> 00:23:20,580
because of course I'm going to need to

635
00:23:20,580 --> 00:23:22,200
access the stuff in my namespace it's my

636
00:23:22,200 --> 00:23:23,820
namespace it's where my app is deployed

637
00:23:23,820 --> 00:23:26,340
I need access to all the things

638
00:23:26,340 --> 00:23:29,340
we they might think

639
00:23:29,340 --> 00:23:31,620
so

640
00:23:31,620 --> 00:23:33,120
we have access to things in the

641
00:23:33,120 --> 00:23:37,100
namespace in the secure namespace

642
00:23:37,380 --> 00:23:40,740
um so uh so what we found out now among

643
00:23:40,740 --> 00:23:42,600
we already already know all that stuff

644
00:23:42,600 --> 00:23:45,179
the new info is that we have this uh

645
00:23:45,179 --> 00:23:46,799
token that has limited access and

646
00:23:46,799 --> 00:23:48,900
default but it has

647
00:23:48,900 --> 00:23:51,480
um broad access in the secure named

648
00:23:51,480 --> 00:23:54,140
namespace

649
00:23:54,240 --> 00:23:56,460
and the finding here is that there's a

650
00:23:56,460 --> 00:23:58,500
role that gives a service account way

651
00:23:58,500 --> 00:23:59,820
too many permissions in the same space

652
00:23:59,820 --> 00:24:01,260
shouldn't have that many verbs you

653
00:24:01,260 --> 00:24:02,880
shouldn't give blanket access just

654
00:24:02,880 --> 00:24:05,039
because it's your namespace

655
00:24:05,039 --> 00:24:07,140
doesn't mean you need to do everything

656
00:24:07,140 --> 00:24:08,580
in your namespace

657
00:24:08,580 --> 00:24:12,419
so moving to the next step

658
00:24:12,419 --> 00:24:15,260
so now

659
00:24:15,360 --> 00:24:16,740
um we want to get a beachhead in this

660
00:24:16,740 --> 00:24:18,360
cluster we want to get our own code

661
00:24:18,360 --> 00:24:20,220
running out there it's been nice

662
00:24:20,220 --> 00:24:23,100
visiting this this vulnerable pod but

663
00:24:23,100 --> 00:24:24,539
I'd like to get my own stuff running out

664
00:24:24,539 --> 00:24:26,760
there so the first thing I'm going to do

665
00:24:26,760 --> 00:24:28,200
is

666
00:24:28,200 --> 00:24:28,919
um

667
00:24:28,919 --> 00:24:30,659
I want to get into that pod that's

668
00:24:30,659 --> 00:24:32,640
running with a with an exec so that I

669
00:24:32,640 --> 00:24:34,020
have a like a real shell in there and

670
00:24:34,020 --> 00:24:35,520
I'm not having to use that web interface

671
00:24:35,520 --> 00:24:39,780
to mess with it so we have I'll rerun

672
00:24:39,780 --> 00:24:43,020
that pod so there's our pod

673
00:24:43,020 --> 00:24:45,419
and we're just going to do

674
00:24:45,419 --> 00:24:48,860
um an exec into it

675
00:24:49,320 --> 00:24:51,900
so I'll just type it I have K Alias to

676
00:24:51,900 --> 00:24:53,640
cubesatel

677
00:24:53,640 --> 00:24:56,820
because I'm lazy I.T

678
00:24:56,820 --> 00:24:58,980
we're going to go after web admin up

679
00:24:58,980 --> 00:25:01,140
name the namespace secure I'm going to

680
00:25:01,140 --> 00:25:03,299
go after web admin

681
00:25:03,299 --> 00:25:05,580
and we want to run

682
00:25:05,580 --> 00:25:06,900
Bash

683
00:25:06,900 --> 00:25:09,179
okay and I'm exacting to that pod now

684
00:25:09,179 --> 00:25:12,419
from outside exact in

685
00:25:12,419 --> 00:25:14,640
who am I

686
00:25:14,640 --> 00:25:16,200
I can see it from The Prompt but I

687
00:25:16,200 --> 00:25:18,000
wanted to type it to be sure I'm the web

688
00:25:18,000 --> 00:25:19,500
admin user so that's a hey that's a

689
00:25:19,500 --> 00:25:21,000
bonus whoever developed this container

690
00:25:21,000 --> 00:25:23,280
or rent or this deployment is not

691
00:25:23,280 --> 00:25:25,260
running as root by default most open

692
00:25:25,260 --> 00:25:27,360
source containers by default the base

693
00:25:27,360 --> 00:25:30,179
images you pull are usually root by

694
00:25:30,179 --> 00:25:32,100
default

695
00:25:32,100 --> 00:25:34,620
um you should not run as root if you can

696
00:25:34,620 --> 00:25:36,179
avoid it we'll talk more about that in

697
00:25:36,179 --> 00:25:38,880
the mitigation sections but

698
00:25:38,880 --> 00:25:41,279
um that's a good sign for them

699
00:25:41,279 --> 00:25:43,200
I need to be root though to do something

700
00:25:43,200 --> 00:25:45,179
so let's see if I can sudo and become

701
00:25:45,179 --> 00:25:48,000
root sudo not found okay well this image

702
00:25:48,000 --> 00:25:49,860
doesn't have suda that's that's good for

703
00:25:49,860 --> 00:25:50,760
them

704
00:25:50,760 --> 00:25:52,980
let's see if we can

705
00:25:52,980 --> 00:25:54,480
touch the file system and make some

706
00:25:54,480 --> 00:25:56,760
changes so I'm going to do a touch

707
00:25:56,760 --> 00:25:59,159
test

708
00:25:59,159 --> 00:26:01,500
I was able to make a file so I have a

709
00:26:01,500 --> 00:26:03,659
readable or I'm sorry a writable root

710
00:26:03,659 --> 00:26:05,640
file system here

711
00:26:05,640 --> 00:26:07,220
um

712
00:26:07,220 --> 00:26:10,020
that is because whoever deployed this

713
00:26:10,020 --> 00:26:13,320
did not set these security context read

714
00:26:13,320 --> 00:26:15,900
only root file system equal true for

715
00:26:15,900 --> 00:26:17,700
those of you aren't aware when you

716
00:26:17,700 --> 00:26:19,500
container runtime starts up a container

717
00:26:19,500 --> 00:26:21,480
all the layers that are in the image are

718
00:26:21,480 --> 00:26:24,539
immutable basically and then it adds

719
00:26:24,539 --> 00:26:26,880
inserts by default a read write layer

720
00:26:26,880 --> 00:26:29,580
and any mutations that happen at runtime

721
00:26:29,580 --> 00:26:31,980
are happen happen there with a copy on

722
00:26:31,980 --> 00:26:33,840
write kind of an operation so what I

723
00:26:33,840 --> 00:26:35,700
just did is told you know the process

724
00:26:35,700 --> 00:26:38,400
said make a file so the file got put

725
00:26:38,400 --> 00:26:40,440
into that read write layer

726
00:26:40,440 --> 00:26:40,799
[Music]

727
00:26:40,799 --> 00:26:42,179
um

728
00:26:42,179 --> 00:26:43,980
that's interesting we'll talk about why

729
00:26:43,980 --> 00:26:46,320
you might not want to run with a read

730
00:26:46,320 --> 00:26:48,960
write layer in a bit but we'll leave it

731
00:26:48,960 --> 00:26:51,600
at that good information to have

732
00:26:51,600 --> 00:26:52,679
um

733
00:26:52,679 --> 00:26:54,000
so

734
00:26:54,000 --> 00:26:56,220
that's nice but I really can't do much

735
00:26:56,220 --> 00:26:58,679
else here I I don't want to really poke

736
00:26:58,679 --> 00:27:00,720
around in here much more but I know now

737
00:27:00,720 --> 00:27:03,419
this pod really isn't interesting so I

738
00:27:03,419 --> 00:27:05,159
want to run my own pod

739
00:27:05,159 --> 00:27:07,260
so we have I'm going to pull this up in

740
00:27:07,260 --> 00:27:09,960
my IDE to show it to you we have some

741
00:27:09,960 --> 00:27:13,620
demo yamls with different pods to try to

742
00:27:13,620 --> 00:27:15,360
deploy I'm going to try to run a root

743
00:27:15,360 --> 00:27:16,500
pod

744
00:27:16,500 --> 00:27:18,720
which is simply an Alpine pod I just

745
00:27:18,720 --> 00:27:20,940
want to see Alpine is root by default I

746
00:27:20,940 --> 00:27:22,799
just want to see if this will run it's

747
00:27:22,799 --> 00:27:25,020
just going to start up and sleep

748
00:27:25,020 --> 00:27:26,940
I just want to see if I can deploy that

749
00:27:26,940 --> 00:27:29,279
so we'll go back to my shell and get out

750
00:27:29,279 --> 00:27:31,559
of my exec

751
00:27:31,559 --> 00:27:35,220
and I'm going to do an apply into the

752
00:27:35,220 --> 00:27:38,480
secure namespace

753
00:27:40,260 --> 00:27:45,539
the file demo yamos root

754
00:27:45,840 --> 00:27:48,059
pod

755
00:27:48,059 --> 00:27:50,279
it says it created it

756
00:27:50,279 --> 00:27:51,960
as you'll see right there

757
00:27:51,960 --> 00:27:55,020
so if I do a git pod in the secure

758
00:27:55,020 --> 00:27:57,260
namespace yes I could set my default

759
00:27:57,260 --> 00:28:00,360
namespace but I don't want to uh so it's

760
00:28:00,360 --> 00:28:02,460
sitting there on container creating it's

761
00:28:02,460 --> 00:28:04,200
probably pulling the Alpine image at the

762
00:28:04,200 --> 00:28:05,940
moment

763
00:28:05,940 --> 00:28:08,059
um

764
00:28:08,880 --> 00:28:10,980
in a moment I'm not going to wait for it

765
00:28:10,980 --> 00:28:12,179
right now but you're going to see it

766
00:28:12,179 --> 00:28:14,159
change to create configure create

767
00:28:14,159 --> 00:28:15,960
container config error

768
00:28:15,960 --> 00:28:18,240
the reason being

769
00:28:18,240 --> 00:28:19,380
if

770
00:28:19,380 --> 00:28:21,779
come on hey there it goes so if we do a

771
00:28:21,779 --> 00:28:24,440
describe on this

772
00:28:26,840 --> 00:28:30,299
pod root pod

773
00:28:30,299 --> 00:28:31,980
see at the bottom here it says container

774
00:28:31,980 --> 00:28:33,600
has run is non-root and an image will

775
00:28:33,600 --> 00:28:35,640
run as root

776
00:28:35,640 --> 00:28:38,700
um so something I didn't say that my

777
00:28:38,700 --> 00:28:40,440
manifest didn't have run as non-read in

778
00:28:40,440 --> 00:28:42,299
it but something is doing that and that

779
00:28:42,299 --> 00:28:43,980
something is a pod security policy I'm

780
00:28:43,980 --> 00:28:44,880
pretty

781
00:28:44,880 --> 00:28:47,279
I know because I wrote this demo but you

782
00:28:47,279 --> 00:28:49,799
can see here there's a PSP here so pod

783
00:28:49,799 --> 00:28:52,440
security policy is making sure no images

784
00:28:52,440 --> 00:28:54,419
are running or no containers are running

785
00:28:54,419 --> 00:28:55,799
as roots

786
00:28:55,799 --> 00:28:59,000
that's also a smart choice because again

787
00:28:59,000 --> 00:29:01,679
if even if you're in a container if

788
00:29:01,679 --> 00:29:03,600
you're root you have elevated privileges

789
00:29:03,600 --> 00:29:05,460
in that container to do things you can

790
00:29:05,460 --> 00:29:07,020
do app get install possibly you can do

791
00:29:07,020 --> 00:29:08,940
all sorts of things you

792
00:29:08,940 --> 00:29:12,059
might not want people to do so I've got

793
00:29:12,059 --> 00:29:15,659
another pod here called non-root priv

794
00:29:15,659 --> 00:29:17,820
I'm going to look at that

795
00:29:17,820 --> 00:29:19,799
this one's a little more

796
00:29:19,799 --> 00:29:22,620
longer it has an image called sneaky

797
00:29:22,620 --> 00:29:25,200
it's in my Docker Hub repository it's my

798
00:29:25,200 --> 00:29:27,179
own image of my own crafting it's

799
00:29:27,179 --> 00:29:29,399
actually Matt up here wrote it but I

800
00:29:29,399 --> 00:29:31,679
took it over and I own it now

801
00:29:31,679 --> 00:29:32,340
um

802
00:29:32,340 --> 00:29:35,760
it is going to try to run with

803
00:29:35,760 --> 00:29:37,380
privileged mode on

804
00:29:37,380 --> 00:29:40,440
privileged basically gives you access to

805
00:29:40,440 --> 00:29:43,260
devices on the hosts uh I've heard it

806
00:29:43,260 --> 00:29:46,500
called the insecure mode uh so but it's

807
00:29:46,500 --> 00:29:48,480
going to run as a non-root user so it's

808
00:29:48,480 --> 00:29:50,279
going to start startup is non-root but

809
00:29:50,279 --> 00:29:52,559
be privileged and in doing so I want

810
00:29:52,559 --> 00:29:54,120
it's going to try to mount the host

811
00:29:54,120 --> 00:29:57,299
volume on the Node into the container

812
00:29:57,299 --> 00:29:59,940
out of at a path called charoot

813
00:29:59,940 --> 00:30:02,899
so let's try to deploy that let me kill

814
00:30:02,899 --> 00:30:04,640
uh

815
00:30:04,640 --> 00:30:07,080
secure I'm going to delete that root pod

816
00:30:07,080 --> 00:30:08,340
just to get it out of the way so it's

817
00:30:08,340 --> 00:30:11,159
not confusing

818
00:30:11,159 --> 00:30:14,419
let me tell it it's a pod

819
00:30:14,640 --> 00:30:17,720
did I type that wrong

820
00:30:20,039 --> 00:30:21,360
okay

821
00:30:21,360 --> 00:30:24,320
did I what I miss

822
00:30:24,539 --> 00:30:27,120
oh thank you

823
00:30:27,120 --> 00:30:30,199
okay so now

824
00:30:34,020 --> 00:30:37,980
yamos root

825
00:30:40,440 --> 00:30:42,419
oh actually

826
00:30:42,419 --> 00:30:46,380
read your notes are non-root

827
00:30:46,380 --> 00:30:48,960
peruv yaml this one immediately fails

828
00:30:48,960 --> 00:30:51,120
and sure enough it says pod security

829
00:30:51,120 --> 00:30:53,820
policy unable to admit pod invalid

830
00:30:53,820 --> 00:30:55,500
privileged containers are not allowed

831
00:30:55,500 --> 00:30:57,059
that's very standard that's the standard

832
00:30:57,059 --> 00:30:59,159
pod security example you don't want

833
00:30:59,159 --> 00:31:00,419
privileged containers privileged

834
00:31:00,419 --> 00:31:02,039
containers are

835
00:31:02,039 --> 00:31:03,779
you you don't need them I mean unless

836
00:31:03,779 --> 00:31:06,779
you're writing like low level uh

837
00:31:06,779 --> 00:31:08,159
monitoring stuff for your kubernetes

838
00:31:08,159 --> 00:31:10,620
clusters or or you're running things

839
00:31:10,620 --> 00:31:11,940
that you're a cluster you're a cluster

840
00:31:11,940 --> 00:31:14,100
op and you've got things like that if

841
00:31:14,100 --> 00:31:15,600
you're running business apps you don't

842
00:31:15,600 --> 00:31:17,100
need to be privileged

843
00:31:17,100 --> 00:31:18,539
um you shouldn't be privileged if you

844
00:31:18,539 --> 00:31:20,159
are come talk to me I'll tell you why

845
00:31:20,159 --> 00:31:22,200
you don't need to be privileged

846
00:31:22,200 --> 00:31:22,980
um

847
00:31:22,980 --> 00:31:25,140
utilities Maybe

848
00:31:25,140 --> 00:31:28,200
but so that's good to know so I've got

849
00:31:28,200 --> 00:31:31,740
another one called non-root non-priv

850
00:31:31,740 --> 00:31:33,720
that gets a gets rid of that we'll just

851
00:31:33,720 --> 00:31:34,799
say fine we're just going to run my

852
00:31:34,799 --> 00:31:37,679
sneaky image with

853
00:31:37,679 --> 00:31:40,559
um my non-root non-privileged user since

854
00:31:40,559 --> 00:31:42,419
that's the only thing I'm seeming to be

855
00:31:42,419 --> 00:31:44,779
able to do

856
00:31:46,380 --> 00:31:50,940
that says it deployed so let's look at

857
00:31:50,940 --> 00:31:52,980
and there it is running so we have a

858
00:31:52,980 --> 00:31:55,679
sneaky pod that is running so

859
00:31:55,679 --> 00:31:57,659
again I want to get away from my notes

860
00:31:57,659 --> 00:31:59,640
because I'll get ahead of myself uh

861
00:31:59,640 --> 00:32:01,200
let's exec into it I'm just going to

862
00:32:01,200 --> 00:32:04,559
copy this so it's type it

863
00:32:04,559 --> 00:32:06,840
so here I am in my sneaky pod now we

864
00:32:06,840 --> 00:32:10,020
can't run as root so

865
00:32:10,020 --> 00:32:14,100
we are the sneaky user in the sneaky pod

866
00:32:14,100 --> 00:32:18,600
um and however this is my image

867
00:32:18,600 --> 00:32:20,640
I do have sudo in my image so now I am

868
00:32:20,640 --> 00:32:23,520
root in a pod in a container

869
00:32:23,520 --> 00:32:26,940
on somebody else's kubernetes server

870
00:32:26,940 --> 00:32:29,340
what can we do with that so let's do a

871
00:32:29,340 --> 00:32:31,860
checkpoint real quick we now know that

872
00:32:31,860 --> 00:32:33,960
um the container is somewhat hardened by

873
00:32:33,960 --> 00:32:36,240
running is non-root and not having sudo

874
00:32:36,240 --> 00:32:37,679
in there

875
00:32:37,679 --> 00:32:39,659
um the application application container

876
00:32:39,659 --> 00:32:41,820
is mutable

877
00:32:41,820 --> 00:32:43,799
interesting uh there are PSP

878
00:32:43,799 --> 00:32:46,080
configurations in place that are

879
00:32:46,080 --> 00:32:48,659
stopping root user and

880
00:32:48,659 --> 00:32:51,179
um privilege mode

881
00:32:51,179 --> 00:32:52,500
but

882
00:32:52,500 --> 00:32:54,960
that namespace the PSP must not be

883
00:32:54,960 --> 00:32:56,880
setting allow privileged escalation to

884
00:32:56,880 --> 00:32:57,840
false

885
00:32:57,840 --> 00:32:59,880
what that setting would do would be stop

886
00:32:59,880 --> 00:33:02,279
an suid binary from doing what I just

887
00:33:02,279 --> 00:33:05,220
did that is not default

888
00:33:05,220 --> 00:33:08,100
so even though you say don't allow

889
00:33:08,100 --> 00:33:09,720
privileged containers don't allow root

890
00:33:09,720 --> 00:33:12,600
users unless you explicitly say don't

891
00:33:12,600 --> 00:33:15,840
allow privilege escalation you can and

892
00:33:15,840 --> 00:33:17,039
that's because there are applications

893
00:33:17,039 --> 00:33:20,100
out there who need to use possibly

894
00:33:20,100 --> 00:33:22,559
Elevate privileges temporarily to do

895
00:33:22,559 --> 00:33:23,340
something

896
00:33:23,340 --> 00:33:26,159
so the folks that wrote you know the

897
00:33:26,159 --> 00:33:28,860
original uh you know containerd Docker

898
00:33:28,860 --> 00:33:30,840
and podman and all that they're like oh

899
00:33:30,840 --> 00:33:32,399
we're going to have to allow that one

900
00:33:32,399 --> 00:33:34,740
kind of because there's too many apps

901
00:33:34,740 --> 00:33:37,100
that would break if we didn't

902
00:33:37,100 --> 00:33:39,240
nowadays I kind of wish they hadn't made

903
00:33:39,240 --> 00:33:40,740
that decision and the kubernetes folks

904
00:33:40,740 --> 00:33:41,880
would have you know would change this

905
00:33:41,880 --> 00:33:44,340
but again backwards compatibility

906
00:33:44,340 --> 00:33:47,039
so just know that you can you know run

907
00:33:47,039 --> 00:33:48,960
SE IDs unless you explicitly say not to

908
00:33:48,960 --> 00:33:50,700
so the PSP did not disallow privilege

909
00:33:50,700 --> 00:33:52,980
escalation is that is that step and I'm

910
00:33:52,980 --> 00:33:55,519
going to take a drink

911
00:33:57,539 --> 00:33:58,860
for anybody that might have caught up

912
00:33:58,860 --> 00:34:00,600
and I'm doubting Wi-Fi has let you but

913
00:34:00,600 --> 00:34:03,480
uh we are now on 2E

914
00:34:03,480 --> 00:34:07,500
exploit MD part five

915
00:34:07,500 --> 00:34:11,099
so we have now exploited the secure name

916
00:34:11,099 --> 00:34:12,418
namespace

917
00:34:12,418 --> 00:34:14,839
let's see if we get out of that because

918
00:34:14,839 --> 00:34:17,820
I'm I want to I I want more I always

919
00:34:17,820 --> 00:34:21,000
want more I want to expand my borders

920
00:34:21,000 --> 00:34:21,599
um

921
00:34:21,599 --> 00:34:23,820
so we now have a container with root

922
00:34:23,820 --> 00:34:25,739
privileges and we're going to use that

923
00:34:25,739 --> 00:34:28,260
to explore more of the cluster

924
00:34:28,260 --> 00:34:30,780
we know this cluster hat is hosting this

925
00:34:30,780 --> 00:34:32,460
vulnerable application

926
00:34:32,460 --> 00:34:34,199
we're saying in production but you know

927
00:34:34,199 --> 00:34:36,060
in this environment whatever this might

928
00:34:36,060 --> 00:34:39,899
be uh but you know what there's a good

929
00:34:39,899 --> 00:34:41,399
chance there might be people running the

930
00:34:41,399 --> 00:34:42,839
same app somewhere else on this cluster

931
00:34:42,839 --> 00:34:44,760
and I would like to find that if so and

932
00:34:44,760 --> 00:34:47,219
maybe use that to break out

933
00:34:47,219 --> 00:34:49,139
so I'm going to use nmap this is why I

934
00:34:49,139 --> 00:34:50,879
needed root because there are some

935
00:34:50,879 --> 00:34:53,339
commands that you need root to run and

936
00:34:53,339 --> 00:34:56,339
nmap is one of them I'm not a I'm not an

937
00:34:56,339 --> 00:34:59,099
uh sys admin I'm not a network engineer

938
00:34:59,099 --> 00:35:01,680
what I know of nmap is it's a tool for

939
00:35:01,680 --> 00:35:03,480
scanning your network to find open ports

940
00:35:03,480 --> 00:35:06,119
I know it has valid uses I'm sure

941
00:35:06,119 --> 00:35:08,040
Mourinho over here can tell me these

942
00:35:08,040 --> 00:35:10,619
cool uses that Network people use nmap

943
00:35:10,619 --> 00:35:12,300
for but I know it is this is the thing

944
00:35:12,300 --> 00:35:14,160
you sniff networks with to break into

945
00:35:14,160 --> 00:35:15,420
things

946
00:35:15,420 --> 00:35:18,060
so what I'm going to do first

947
00:35:18,060 --> 00:35:19,560
so I'd like to know what my IP address

948
00:35:19,560 --> 00:35:21,300
is just so I kind of have a bearing of

949
00:35:21,300 --> 00:35:23,460
who I am on this on this network

950
00:35:23,460 --> 00:35:25,440
and I'm using hostname I you could also

951
00:35:25,440 --> 00:35:27,839
use ifconfig or whatever you like

952
00:35:27,839 --> 00:35:29,940
and I'm going to use that in the nmap

953
00:35:29,940 --> 00:35:31,740
arguments which I have to copy because I

954
00:35:31,740 --> 00:35:33,839
had to relearn these every time I do it

955
00:35:33,839 --> 00:35:35,839
and I'm going to replace what's in this

956
00:35:35,839 --> 00:35:39,359
with what I just pulled up

957
00:35:39,359 --> 00:35:41,700
so I'm going to delete

958
00:35:41,700 --> 00:35:44,460
honestly it's just a 24 so I probably

959
00:35:44,460 --> 00:35:46,500
don't even need to do that so

960
00:35:46,500 --> 00:35:48,720
so what nmap is now doing is it is

961
00:35:48,720 --> 00:35:50,460
searching for any five port five

962
00:35:50,460 --> 00:35:52,740
thousand listeners on that subnet on the

963
00:35:52,740 --> 00:35:55,920
24-bit uh bitmap netmask

964
00:35:55,920 --> 00:35:59,040
um so anything in 10 to 244 162 that's

965
00:35:59,040 --> 00:36:02,220
listing on 5000 any moment now it will

966
00:36:02,220 --> 00:36:03,839
come back and tell me

967
00:36:03,839 --> 00:36:07,079
what's there there we go so it is

968
00:36:07,079 --> 00:36:09,359
telling me

969
00:36:09,359 --> 00:36:12,259
that's

970
00:36:14,520 --> 00:36:19,500
scan report for we've got 162 129 and

971
00:36:19,500 --> 00:36:22,260
162 133 both were found listening on

972
00:36:22,260 --> 00:36:26,220
that TCP Port we know that 129 well

973
00:36:26,220 --> 00:36:27,660
let's actually before I say that let's

974
00:36:27,660 --> 00:36:29,640
go back to our browser and the port

975
00:36:29,640 --> 00:36:33,780
where I pulled the IP address 133 is our

976
00:36:33,780 --> 00:36:35,820
vulnerable app that we started with

977
00:36:35,820 --> 00:36:37,859
that's this one

978
00:36:37,859 --> 00:36:40,200
that's not that's something else

979
00:36:40,200 --> 00:36:42,540
listening on Port 5000. now I know it's

980
00:36:42,540 --> 00:36:44,520
not this my my

981
00:36:44,520 --> 00:36:47,880
uh sneaky image container because that's

982
00:36:47,880 --> 00:36:50,940
136. so I want to see what's what's in

983
00:36:50,940 --> 00:36:54,300
this 133 it's listing on Fort 5000.

984
00:36:54,300 --> 00:36:57,380
maybe it's vulnerable

985
00:37:00,660 --> 00:37:02,760
um so again I'm not gonna

986
00:37:02,760 --> 00:37:05,339
to labor this but we have another app

987
00:37:05,339 --> 00:37:07,320
listening on 5000 that's not in the

988
00:37:07,320 --> 00:37:08,579
secure namespace we know it's not in the

989
00:37:08,579 --> 00:37:10,140
secure name space because we looked at

990
00:37:10,140 --> 00:37:11,460
the pods running in Secure there's only

991
00:37:11,460 --> 00:37:12,300
one

992
00:37:12,300 --> 00:37:14,400
and it only has one instance one one

993
00:37:14,400 --> 00:37:18,480
replica so it's got to be somewhere else

994
00:37:18,480 --> 00:37:21,359
um this also tells me this plus the fact

995
00:37:21,359 --> 00:37:23,040
that I was able to hit Google pull

996
00:37:23,040 --> 00:37:25,380
images from Docker Hub is we probably

997
00:37:25,380 --> 00:37:27,180
have absolutely no network policy in

998
00:37:27,180 --> 00:37:28,859
place here or we have a very loose one

999
00:37:28,859 --> 00:37:31,619
if any and uh perimeter firewalls are

1000
00:37:31,619 --> 00:37:33,540
seem to be not set up either which is

1001
00:37:33,540 --> 00:37:35,359
you know maybe that's contrived but

1002
00:37:35,359 --> 00:37:37,740
Network policy missing is not something

1003
00:37:37,740 --> 00:37:39,300
that's that

1004
00:37:39,300 --> 00:37:41,460
um that that happens a lot a lot of

1005
00:37:41,460 --> 00:37:43,680
developers shy away from Network policy

1006
00:37:43,680 --> 00:37:45,300
because they think oh firewall rules

1007
00:37:45,300 --> 00:37:46,920
that's not my job

1008
00:37:46,920 --> 00:37:49,079
Network policy if if you're a developer

1009
00:37:49,079 --> 00:37:50,700
Like Me In This Crowd and you look at

1010
00:37:50,700 --> 00:37:52,500
Network policy and you think it's scary

1011
00:37:52,500 --> 00:37:54,540
it's really not please take some time to

1012
00:37:54,540 --> 00:37:55,920
learn it and we'll talk about that in a

1013
00:37:55,920 --> 00:37:57,420
little bit

1014
00:37:57,420 --> 00:37:59,820
um as a yeah we'll talk about that a

1015
00:37:59,820 --> 00:38:01,920
little bit so I'm going to skip over

1016
00:38:01,920 --> 00:38:02,700
that we're just going to go to the

1017
00:38:02,700 --> 00:38:04,260
timeout if we now we now know that

1018
00:38:04,260 --> 00:38:05,640
network has

1019
00:38:05,640 --> 00:38:07,980
nearly no or no network controls are in

1020
00:38:07,980 --> 00:38:09,119
place here

1021
00:38:09,119 --> 00:38:11,160
so let's try to get out of our namespace

1022
00:38:11,160 --> 00:38:13,560
by attacking that IP address

1023
00:38:13,560 --> 00:38:15,920
for now on part six

1024
00:38:15,920 --> 00:38:18,839
and we're going to use another tool that

1025
00:38:18,839 --> 00:38:20,579
I'm sure has valid reasons for you all

1026
00:38:20,579 --> 00:38:23,040
useless admins out there so cat I use it

1027
00:38:23,040 --> 00:38:25,079
for tunneling through things

1028
00:38:25,079 --> 00:38:26,700
um so we're going to use that in the

1029
00:38:26,700 --> 00:38:28,500
sneaky pod we're going to set up a

1030
00:38:28,500 --> 00:38:31,859
listener there on 5001 and we're going

1031
00:38:31,859 --> 00:38:34,800
to send all traffic to this other pod on

1032
00:38:34,800 --> 00:38:38,760
5000. and I have to adjust that IP

1033
00:38:38,760 --> 00:38:42,420
because it what was it it was 130

1034
00:38:42,420 --> 00:38:45,720
129 yeah okay

1035
00:38:45,720 --> 00:38:46,980
there we go so that's just going to sit

1036
00:38:46,980 --> 00:38:49,800
there and Route traffic for me so I need

1037
00:38:49,800 --> 00:38:51,540
now need to

1038
00:38:51,540 --> 00:38:52,740
come back out I'm going to open another

1039
00:38:52,740 --> 00:38:56,099
shell and I'm going to do a cube CTL

1040
00:38:56,099 --> 00:38:58,440
port forward into the sneaky pod so that

1041
00:38:58,440 --> 00:39:00,180
I can send traffic through that port

1042
00:39:00,180 --> 00:39:01,500
forward and then bounce it through that

1043
00:39:01,500 --> 00:39:02,940
socat

1044
00:39:02,940 --> 00:39:04,920
so I'm going to copy that so if I open

1045
00:39:04,920 --> 00:39:07,820
another terminal

1046
00:39:07,980 --> 00:39:10,920
let me grow that font up for you and CD

1047
00:39:10,920 --> 00:39:13,079
back into the right directory so if you

1048
00:39:13,079 --> 00:39:14,579
look at where we ran that setup

1049
00:39:14,579 --> 00:39:17,880
kubeconfig sh it dropped a demo Cube

1050
00:39:17,880 --> 00:39:22,160
config file and I can cat that

1051
00:39:22,619 --> 00:39:24,540
so that's that token we stole at the

1052
00:39:24,540 --> 00:39:26,040
beginning

1053
00:39:26,040 --> 00:39:30,720
I want to set my kubeconfig to that

1054
00:39:30,720 --> 00:39:32,760
and then I'm going to port forward into

1055
00:39:32,760 --> 00:39:34,920
the sneaky pod and the secure named

1056
00:39:34,920 --> 00:39:36,420
namespace

1057
00:39:36,420 --> 00:39:40,740
so now I'm listening on localhost 5001

1058
00:39:40,740 --> 00:39:43,320
sending to 5001 in sneaky pod which will

1059
00:39:43,320 --> 00:39:45,240
then turn around and send it to 5000 and

1060
00:39:45,240 --> 00:39:48,379
whatever that other thing is

1061
00:39:48,420 --> 00:39:50,099
so from there I'm just going to open a

1062
00:39:50,099 --> 00:39:52,859
localhost 5001. and lo and behold it's

1063
00:39:52,859 --> 00:39:55,520
the same app imagine that

1064
00:39:55,520 --> 00:39:58,020
so uh you notice I didn't put a context

1065
00:39:58,020 --> 00:39:59,579
on there because I I am not going

1066
00:39:59,579 --> 00:40:00,960
through Port 80 I'm not going through

1067
00:40:00,960 --> 00:40:03,359
any kind of Ingress any kind of routing

1068
00:40:03,359 --> 00:40:05,760
thing I'm hitting a pod directly at this

1069
00:40:05,760 --> 00:40:07,859
point or a service

1070
00:40:07,859 --> 00:40:10,260
so let's see if it's vulnerable maybe

1071
00:40:10,260 --> 00:40:11,760
this is a new version maybe they know

1072
00:40:11,760 --> 00:40:12,960
about this vulnerability and they fixed

1073
00:40:12,960 --> 00:40:15,720
it so let's just do command equal oh I

1074
00:40:15,720 --> 00:40:16,680
don't know

1075
00:40:16,680 --> 00:40:18,599
hostname again

1076
00:40:18,599 --> 00:40:21,720
it's vulnerable so somebody else maybe a

1077
00:40:21,720 --> 00:40:23,820
developer who knows is running another

1078
00:40:23,820 --> 00:40:25,740
copy of this app somewhere else in the

1079
00:40:25,740 --> 00:40:29,099
cluster now okay

1080
00:40:29,099 --> 00:40:32,220
so let's rinse and repeat rinse and

1081
00:40:32,220 --> 00:40:34,079
repeat let's try to get the token out of

1082
00:40:34,079 --> 00:40:35,160
that

1083
00:40:35,160 --> 00:40:36,960
there it is so we're going to copy that

1084
00:40:36,960 --> 00:40:38,880
token

1085
00:40:38,880 --> 00:40:40,500
now

1086
00:40:40,500 --> 00:40:41,579
again I'm going to make sure I'm

1087
00:40:41,579 --> 00:40:42,900
following my steps don't want to skip

1088
00:40:42,900 --> 00:40:44,880
ahead of anything now I don't really

1089
00:40:44,880 --> 00:40:46,320
need the port forward anymore because if

1090
00:40:46,320 --> 00:40:47,579
this is what I think it is I should be

1091
00:40:47,579 --> 00:40:49,260
able to get into that pod the same way I

1092
00:40:49,260 --> 00:40:51,300
got into this one so just so I'm going

1093
00:40:51,300 --> 00:40:52,680
to kill my

1094
00:40:52,680 --> 00:40:54,660
port forward here

1095
00:40:54,660 --> 00:40:57,240
I'm going to kill my slow cat and exit

1096
00:40:57,240 --> 00:41:00,119
out of my sneaky pod

1097
00:41:00,119 --> 00:41:02,820
I'm going to edit that demo Cube config

1098
00:41:02,820 --> 00:41:05,280
file just because it's easy

1099
00:41:05,280 --> 00:41:09,619
and I'll just comment that line out

1100
00:41:10,800 --> 00:41:13,020
and we'll add a new token

1101
00:41:13,020 --> 00:41:16,200
I'm just going to paste it in

1102
00:41:16,200 --> 00:41:20,760
and now let's do Cube CTL get pods

1103
00:41:20,760 --> 00:41:24,780
it's a default namespace token so I can

1104
00:41:24,780 --> 00:41:26,220
see there's another copy web admin

1105
00:41:26,220 --> 00:41:28,260
running but I'm in the default namespace

1106
00:41:28,260 --> 00:41:30,000
because I did not specify a namespace on

1107
00:41:30,000 --> 00:41:32,480
that command line

1108
00:41:32,480 --> 00:41:35,940
so I should now be able to do the good

1109
00:41:35,940 --> 00:41:38,359
old Q that's k

1110
00:41:38,359 --> 00:41:42,259
auth can

1111
00:41:42,780 --> 00:41:46,079
I dash dash lists so now I'm in the

1112
00:41:46,079 --> 00:41:48,119
default namespace with a wild card

1113
00:41:48,119 --> 00:41:51,240
resource that has all the verbs

1114
00:41:51,240 --> 00:41:54,300
so why would this have happened well

1115
00:41:54,300 --> 00:41:56,820
developer maybe deployed to default

1116
00:41:56,820 --> 00:41:59,460
namespace in this development cluster

1117
00:41:59,460 --> 00:42:01,380
and

1118
00:42:01,380 --> 00:42:03,359
didn't bother to go through and set up

1119
00:42:03,359 --> 00:42:04,619
our back for it

1120
00:42:04,619 --> 00:42:06,000
just because they're they're hacking

1121
00:42:06,000 --> 00:42:08,280
away they're trying something out not

1122
00:42:08,280 --> 00:42:10,079
uncommon

1123
00:42:10,079 --> 00:42:12,020
um

1124
00:42:12,020 --> 00:42:14,880
so yeah

1125
00:42:14,880 --> 00:42:18,300
that's interesting to me so now

1126
00:42:18,300 --> 00:42:20,599
um I would like to try to deploy

1127
00:42:20,599 --> 00:42:24,900
my non-rootproof file again into the

1128
00:42:24,900 --> 00:42:26,880
default namespace so if you remember

1129
00:42:26,880 --> 00:42:28,380
this is the one that's going to try to

1130
00:42:28,380 --> 00:42:31,320
run in privilege mode

1131
00:42:31,320 --> 00:42:33,240
so again we're kind of in a rinse and

1132
00:42:33,240 --> 00:42:35,579
repeat mode here we're going to get K

1133
00:42:35,579 --> 00:42:40,619
apply file demo yaml non-root prove

1134
00:42:40,619 --> 00:42:41,820
I'm not doing the root one because

1135
00:42:41,820 --> 00:42:43,140
that's just Alpine and I'm kind of past

1136
00:42:43,140 --> 00:42:45,359
that I don't really care right now

1137
00:42:45,359 --> 00:42:47,280
it says it created it so we don't have a

1138
00:42:47,280 --> 00:42:49,680
PSP stopping things in the default

1139
00:42:49,680 --> 00:42:53,040
namespace apparently

1140
00:42:53,040 --> 00:42:55,200
um okay get pods

1141
00:42:55,200 --> 00:42:59,060
it's running okay exact

1142
00:42:59,520 --> 00:43:05,339
i t into the non-root prove Bash

1143
00:43:05,339 --> 00:43:07,560
and you can see where I'm going

1144
00:43:07,560 --> 00:43:10,560
I'm now root in a privileged pod

1145
00:43:10,560 --> 00:43:15,319
in the default namespace of this cluster

1146
00:43:15,420 --> 00:43:16,800
and again making sure I'm not getting

1147
00:43:16,800 --> 00:43:18,300
past anything

1148
00:43:18,300 --> 00:43:19,200
um

1149
00:43:19,200 --> 00:43:22,040
so

1150
00:43:24,000 --> 00:43:26,040
what am I looking at okay so uh I've

1151
00:43:26,040 --> 00:43:28,140
become root

1152
00:43:28,140 --> 00:43:29,700
now what I can do is kind of interesting

1153
00:43:29,700 --> 00:43:32,819
let's do a PS there's my process list

1154
00:43:32,819 --> 00:43:34,560
that's normal for a container right all

1155
00:43:34,560 --> 00:43:37,319
I see is the bash that I'm in ignore the

1156
00:43:37,319 --> 00:43:39,180
go TTY that's another hack I have in

1157
00:43:39,180 --> 00:43:40,859
this this sneaky image I could actually

1158
00:43:40,859 --> 00:43:42,960
be connecting through a web terminal go

1159
00:43:42,960 --> 00:43:46,020
TTY server go tdi's fund

1160
00:43:46,020 --> 00:43:47,400
um but I'm just running PS here I've

1161
00:43:47,400 --> 00:43:48,900
just got those are the processes running

1162
00:43:48,900 --> 00:43:50,160
in this container

1163
00:43:50,160 --> 00:43:52,980
however if you know I I'm again I'm not

1164
00:43:52,980 --> 00:43:56,400
a CIS admin but I know that uh PS uses

1165
00:43:56,400 --> 00:43:58,800
the proc file system to list its

1166
00:43:58,800 --> 00:44:01,319
processes so if I do a true root

1167
00:44:01,319 --> 00:44:04,440
change my route to the aptly named

1168
00:44:04,440 --> 00:44:07,079
charroot volume

1169
00:44:07,079 --> 00:44:08,700
and do it again

1170
00:44:08,700 --> 00:44:11,160
there's all the processes on the host

1171
00:44:11,160 --> 00:44:13,920
I'm now basically rude on this box this

1172
00:44:13,920 --> 00:44:16,339
node is mine

1173
00:44:16,339 --> 00:44:19,079
because I'm privileged again privileged

1174
00:44:19,079 --> 00:44:21,180
bad unless you know what you're doing

1175
00:44:21,180 --> 00:44:24,119
please don't use privilege

1176
00:44:24,119 --> 00:44:25,380
um

1177
00:44:25,380 --> 00:44:27,359
and again that's because the proc file

1178
00:44:27,359 --> 00:44:28,920
says the PS command is looking at the

1179
00:44:28,920 --> 00:44:30,180
proc file system to come up with all the

1180
00:44:30,180 --> 00:44:33,660
processes uh and when I remapped to root

1181
00:44:33,660 --> 00:44:35,819
remaps your what what your your root

1182
00:44:35,819 --> 00:44:38,700
volume is for the you know the context

1183
00:44:38,700 --> 00:44:41,099
of of where you ran it

1184
00:44:41,099 --> 00:44:43,680
um so now we know got a lot of stuff

1185
00:44:43,680 --> 00:44:45,420
here but you've been following along so

1186
00:44:45,420 --> 00:44:48,599
you get where we are here we we are now

1187
00:44:48,599 --> 00:44:50,220
finding that we have no restrictions in

1188
00:44:50,220 --> 00:44:51,960
the default namespace to speak of or at

1189
00:44:51,960 --> 00:44:53,099
least not enough that stopped me from

1190
00:44:53,099 --> 00:44:54,420
doing that

1191
00:44:54,420 --> 00:44:56,700
so the next step check my time well

1192
00:44:56,700 --> 00:44:59,280
we're doing pretty good okay

1193
00:44:59,280 --> 00:45:01,020
um let's take this over the Finish Line

1194
00:45:01,020 --> 00:45:03,420
as it says

1195
00:45:03,420 --> 00:45:05,280
so owning a node is nice but we want to

1196
00:45:05,280 --> 00:45:08,460
own a cluster so

1197
00:45:08,460 --> 00:45:09,119
um

1198
00:45:09,119 --> 00:45:10,680
now that we have that host file system

1199
00:45:10,680 --> 00:45:12,540
there's a lot of information on a node's

1200
00:45:12,540 --> 00:45:15,260
file system that is useful

1201
00:45:15,260 --> 00:45:19,440
so what we want to get at now is I want

1202
00:45:19,440 --> 00:45:21,180
to look into the cube system namespace

1203
00:45:21,180 --> 00:45:22,859
and I want to see what other nodes are

1204
00:45:22,859 --> 00:45:24,300
in this cluster

1205
00:45:24,300 --> 00:45:26,040
so

1206
00:45:26,040 --> 00:45:28,319
I need a token for doing that well

1207
00:45:28,319 --> 00:45:31,140
fortunately the kublet has one of those

1208
00:45:31,140 --> 00:45:33,359
as you can see in these steps I'm going

1209
00:45:33,359 --> 00:45:36,119
to now use the kubelets cubeconfig

1210
00:45:36,119 --> 00:45:38,040
to start poking around so we're going to

1211
00:45:38,040 --> 00:45:41,760
copy this so now I have to type it

1212
00:45:41,760 --> 00:45:44,700
and it's my sneaky pod I have Cube CTL

1213
00:45:44,700 --> 00:45:45,960
in there so I don't even have to worry

1214
00:45:45,960 --> 00:45:47,400
about downloading and installing that

1215
00:45:47,400 --> 00:45:49,619
let's list our pods and so I can see

1216
00:45:49,619 --> 00:45:52,560
Kube system now because kubelet has that

1217
00:45:52,560 --> 00:45:54,240
privilege

1218
00:45:54,240 --> 00:45:56,099
and

1219
00:45:56,099 --> 00:45:59,040
it has the ability to look at nodes so I

1220
00:45:59,040 --> 00:46:00,780
can see I have a kind control plane and

1221
00:46:00,780 --> 00:46:03,060
a kind worker

1222
00:46:03,060 --> 00:46:04,460
uh

1223
00:46:04,460 --> 00:46:07,619
that's all that

1224
00:46:07,619 --> 00:46:11,040
I want to run a pod directly on This

1225
00:46:11,040 --> 00:46:12,060
Server I'm not going to do this because

1226
00:46:12,060 --> 00:46:13,200
I don't want to wait for the Wi-Fi to

1227
00:46:13,200 --> 00:46:16,619
pull down BusyBox you can't the kublets

1228
00:46:16,619 --> 00:46:19,319
token is not allowed to ask the API

1229
00:46:19,319 --> 00:46:21,420
server to start a pod because it would

1230
00:46:21,420 --> 00:46:22,859
never need to do that kublet starts

1231
00:46:22,859 --> 00:46:25,079
containers kubelet talks to the runtime

1232
00:46:25,079 --> 00:46:27,119
it wouldn't do that so if I were to try

1233
00:46:27,119 --> 00:46:28,500
to run that I'm going to get a forbidden

1234
00:46:28,500 --> 00:46:31,079
because it doesn't have those privileges

1235
00:46:31,079 --> 00:46:32,880
um however

1236
00:46:32,880 --> 00:46:35,640
I do have Etsy kubernetes manifests I

1237
00:46:35,640 --> 00:46:37,200
could put in anything I want in there

1238
00:46:37,200 --> 00:46:39,720
and it'll start those up all day long

1239
00:46:39,720 --> 00:46:40,319
um

1240
00:46:40,319 --> 00:46:42,660
not going to do that that's that is an

1241
00:46:42,660 --> 00:46:43,680
option though

1242
00:46:43,680 --> 00:46:45,240
but because we've escaped the spot

1243
00:46:45,240 --> 00:46:47,160
security policy and we know what nodes

1244
00:46:47,160 --> 00:46:49,140
we have uh I want to go after something

1245
00:46:49,140 --> 00:46:50,819
else I want to launch

1246
00:46:50,819 --> 00:46:53,760
um uh I want to launch a pod to the node

1247
00:46:53,760 --> 00:46:57,420
that is hosting FCD

1248
00:46:57,420 --> 00:46:58,800
and

1249
00:46:58,800 --> 00:46:59,640
um

1250
00:46:59,640 --> 00:47:01,560
Mount the file system there to find out

1251
00:47:01,560 --> 00:47:04,859
the credentials to NCD because SCD is

1252
00:47:04,859 --> 00:47:06,180
where everything is

1253
00:47:06,180 --> 00:47:10,200
so go back to my IDE

1254
00:47:10,200 --> 00:47:12,540
see I have a simple SCD

1255
00:47:12,540 --> 00:47:15,060
pod definition it's going to go use the

1256
00:47:15,060 --> 00:47:20,160
standard FCD 3310 image and

1257
00:47:20,160 --> 00:47:21,780
I'm actually skipping forward here so

1258
00:47:21,780 --> 00:47:24,859
let me show you

1259
00:47:25,140 --> 00:47:28,460
let's just let me do this

1260
00:47:29,280 --> 00:47:31,260
so I'm going to describe

1261
00:47:31,260 --> 00:47:33,420
the Pod that we see in there named FCD

1262
00:47:33,420 --> 00:47:35,460
kind control plane in the cube system

1263
00:47:35,460 --> 00:47:37,500
and I can scroll up here and there's all

1264
00:47:37,500 --> 00:47:39,119
sorts of Juicy bits of information here

1265
00:47:39,119 --> 00:47:41,400
it's telling me where my cert file is

1266
00:47:41,400 --> 00:47:44,099
what's my what's the IPS for connecting

1267
00:47:44,099 --> 00:47:45,859
to the to the FCD

1268
00:47:45,859 --> 00:47:49,140
database all that good information that

1269
00:47:49,140 --> 00:47:53,099
I might need to get at go after at CD

1270
00:47:53,099 --> 00:47:55,560
now I've because it's kind it's all

1271
00:47:55,560 --> 00:47:57,240
going to be the same values every time

1272
00:47:57,240 --> 00:47:59,579
so I've already copied those create in

1273
00:47:59,579 --> 00:48:01,859
here for you and you can see environment

1274
00:48:01,859 --> 00:48:03,300
variables being set up for all the

1275
00:48:03,300 --> 00:48:06,300
things about where where that is and the

1276
00:48:06,300 --> 00:48:09,359
amount paths for where those certain

1277
00:48:09,359 --> 00:48:12,359
keys are on the on the Node that we're

1278
00:48:12,359 --> 00:48:13,920
going to run this on

1279
00:48:13,920 --> 00:48:15,480
so

1280
00:48:15,480 --> 00:48:18,000
let me go ahead and

1281
00:48:18,000 --> 00:48:21,359
again let me go back to my steps

1282
00:48:21,359 --> 00:48:23,280
uh this just talks about what I just

1283
00:48:23,280 --> 00:48:24,839
said

1284
00:48:24,839 --> 00:48:27,000
and if they were different you would

1285
00:48:27,000 --> 00:48:29,400
edit that yaml file to to match but

1286
00:48:29,400 --> 00:48:33,619
we're going to go ahead and oops

1287
00:48:33,900 --> 00:48:35,700
copy this we're going to get out of my

1288
00:48:35,700 --> 00:48:38,419
sneaky pod

1289
00:48:39,619 --> 00:48:43,260
one more they're back on the laptop

1290
00:48:43,260 --> 00:48:48,000
using the defaults namespace token

1291
00:48:48,000 --> 00:48:48,960
foreign

1292
00:48:48,960 --> 00:48:50,819
sorry that is my my daughter's school

1293
00:48:50,819 --> 00:48:51,900
district calling to say they probably

1294
00:48:51,900 --> 00:48:53,099
have no school tomorrow again because

1295
00:48:53,099 --> 00:48:57,020
it's ice all over the place there

1296
00:48:57,599 --> 00:49:02,000
okay so we have just deployed FCD client

1297
00:49:02,280 --> 00:49:04,859
it's running

1298
00:49:04,859 --> 00:49:08,940
and I'm then going to exec into that and

1299
00:49:08,940 --> 00:49:10,319
I first just want to do something that

1300
00:49:10,319 --> 00:49:11,579
will verify that the connection's

1301
00:49:11,579 --> 00:49:13,800
working so I'm going to do a net CD CTL

1302
00:49:13,800 --> 00:49:16,260
member list

1303
00:49:16,260 --> 00:49:19,020
and it's that tells me hey yeah I was

1304
00:49:19,020 --> 00:49:20,099
able to connect here's some information

1305
00:49:20,099 --> 00:49:21,480
about

1306
00:49:21,480 --> 00:49:25,880
um the cluster about the LCD cluster

1307
00:49:26,579 --> 00:49:29,700
um now what do you go after an FCD you

1308
00:49:29,700 --> 00:49:31,319
go after secrets of course so I'm going

1309
00:49:31,319 --> 00:49:34,380
to go get keys

1310
00:49:34,380 --> 00:49:35,400
um

1311
00:49:35,400 --> 00:49:38,400
rep for secrets and only two things came

1312
00:49:38,400 --> 00:49:39,960
back

1313
00:49:39,960 --> 00:49:42,859
that's interesting

1314
00:49:48,240 --> 00:49:50,339
hmm

1315
00:49:50,339 --> 00:49:52,740
so this has changed from when I ran this

1316
00:49:52,740 --> 00:49:56,070
probably because I ran this against 123.

1317
00:49:56,070 --> 00:49:56,460
[Music]

1318
00:49:56,460 --> 00:49:58,460
um

1319
00:50:00,839 --> 00:50:03,599
oh crap

1320
00:50:03,599 --> 00:50:06,560
just a second

1321
00:50:13,079 --> 00:50:15,359
all right here here's a here here is

1322
00:50:15,359 --> 00:50:17,520
where you see the guy that does the demo

1323
00:50:17,520 --> 00:50:20,880
sweat because I've made a change to my

1324
00:50:20,880 --> 00:50:23,099
uh my repository without changing my

1325
00:50:23,099 --> 00:50:25,260
steps so

1326
00:50:25,260 --> 00:50:26,520
um

1327
00:50:26,520 --> 00:50:28,140
shoot

1328
00:50:28,140 --> 00:50:30,000
what I expected to see is what you see

1329
00:50:30,000 --> 00:50:32,460
output here and I now I'm thinking back

1330
00:50:32,460 --> 00:50:33,900
and this is why because I normally I

1331
00:50:33,900 --> 00:50:35,760
used to run this on 123 and I've updated

1332
00:50:35,760 --> 00:50:37,400
it to 124.

1333
00:50:37,400 --> 00:50:39,060
and

1334
00:50:39,060 --> 00:50:41,700
you never do that right before your demo

1335
00:50:41,700 --> 00:50:44,760
um in 124 the defaults for Secrets I

1336
00:50:44,760 --> 00:50:47,220
believe changed for tokens but what you

1337
00:50:47,220 --> 00:50:49,440
should be seeing if I were to go back

1338
00:50:49,440 --> 00:50:50,640
and troubleshoot this if I had time to

1339
00:50:50,640 --> 00:50:52,680
is a whole bunch of Secrets and we're

1340
00:50:52,680 --> 00:50:54,240
looking for the cluster aggregation

1341
00:50:54,240 --> 00:50:56,819
controller token one

1342
00:50:56,819 --> 00:50:58,680
that's not a cluster aggregation

1343
00:50:58,680 --> 00:51:01,520
controller one

1344
00:51:02,099 --> 00:51:04,500
um this one has cluster admin rights by

1345
00:51:04,500 --> 00:51:05,940
default so we want to go after that

1346
00:51:05,940 --> 00:51:09,720
token if

1347
00:51:10,500 --> 00:51:12,359
if I have time at the end of this I'm

1348
00:51:12,359 --> 00:51:13,800
going to run through showing you the

1349
00:51:13,800 --> 00:51:15,540
screenshots and I'm going to try to

1350
00:51:15,540 --> 00:51:17,640
redeploy this quickly on 123 and show it

1351
00:51:17,640 --> 00:51:19,260
to you

1352
00:51:19,260 --> 00:51:22,559
um but what you would see

1353
00:51:22,559 --> 00:51:25,740
is this big long if you if you go on

1354
00:51:25,740 --> 00:51:27,660
there you get it replace the that

1355
00:51:27,660 --> 00:51:28,980
command with the right token you'd get

1356
00:51:28,980 --> 00:51:32,160
the output with this token in it set

1357
00:51:32,160 --> 00:51:33,420
that up the same way we set the other

1358
00:51:33,420 --> 00:51:34,680
token up

1359
00:51:34,680 --> 00:51:37,020
and do a can I this is old you don't

1360
00:51:37,020 --> 00:51:38,339
actually have to do the pasting of the

1361
00:51:38,339 --> 00:51:39,900
token in there but

1362
00:51:39,900 --> 00:51:42,540
you would see that you have

1363
00:51:42,540 --> 00:51:44,640
um not quite full access but you do have

1364
00:51:44,640 --> 00:51:49,160
escalates on cluster roles

1365
00:51:50,520 --> 00:51:53,280
if you then uh

1366
00:51:53,280 --> 00:51:55,740
edit your roles because you have

1367
00:51:55,740 --> 00:51:56,940
escalate

1368
00:51:56,940 --> 00:51:59,640
you can escalate your privileges to

1369
00:51:59,640 --> 00:52:01,859
wildcard everything

1370
00:52:01,859 --> 00:52:05,280
and do the auth can I again and now you

1371
00:52:05,280 --> 00:52:07,319
have wild card with all verbs I

1372
00:52:07,319 --> 00:52:09,119
apologize for that demo failing at the

1373
00:52:09,119 --> 00:52:11,460
very end there trust me you can do this

1374
00:52:11,460 --> 00:52:14,400
and I will fix this but

1375
00:52:14,400 --> 00:52:16,140
um

1376
00:52:16,140 --> 00:52:17,880
what you

1377
00:52:17,880 --> 00:52:19,740
uh what we did here is we got root

1378
00:52:19,740 --> 00:52:21,960
access on the Node got us the kublet

1379
00:52:21,960 --> 00:52:23,280
token used the kublet token to get

1380
00:52:23,280 --> 00:52:24,859
access to the cube system resources

1381
00:52:24,859 --> 00:52:28,640
including NCD pod

1382
00:52:28,920 --> 00:52:29,579
um

1383
00:52:29,579 --> 00:52:33,240
we use we then deployed that FCD client

1384
00:52:33,240 --> 00:52:35,040
in there and went after the uh the

1385
00:52:35,040 --> 00:52:36,540
credentials got that credential and then

1386
00:52:36,540 --> 00:52:39,720
escalated its rights to become root so

1387
00:52:39,720 --> 00:52:43,200
we are now owning the cluster

1388
00:52:43,200 --> 00:52:45,420
um so like I said let's talk about ways

1389
00:52:45,420 --> 00:52:46,920
to mitigate a lot of the things we just

1390
00:52:46,920 --> 00:52:49,380
saw and if I have time I'll go back and

1391
00:52:49,380 --> 00:52:51,059
I'll actually show you that happening in

1392
00:52:51,059 --> 00:52:51,900
a second

1393
00:52:51,900 --> 00:52:55,020
um so there's a few this is by no in by

1394
00:52:55,020 --> 00:52:56,760
no means exhaustive there are many

1395
00:52:56,760 --> 00:52:59,099
things if those of you who do security

1396
00:52:59,099 --> 00:53:00,780
you you probably think of a million

1397
00:53:00,780 --> 00:53:02,339
things we could be doing better in this

1398
00:53:02,339 --> 00:53:04,260
cluster but some of the the low-hanging

1399
00:53:04,260 --> 00:53:06,180
fruit

1400
00:53:06,180 --> 00:53:08,160
um

1401
00:53:08,160 --> 00:53:10,800
first of all we had an RC and an app now

1402
00:53:10,800 --> 00:53:12,480
given this was this was a contrived

1403
00:53:12,480 --> 00:53:15,540
example but you should be scanning your

1404
00:53:15,540 --> 00:53:17,339
apps for vulnerabilities period now

1405
00:53:17,339 --> 00:53:18,720
obviously I work for sneak I would love

1406
00:53:18,720 --> 00:53:19,980
you to use our tools I don't care what

1407
00:53:19,980 --> 00:53:22,619
tools you use honestly use whatever you

1408
00:53:22,619 --> 00:53:25,260
sneak use whatever

1409
00:53:25,260 --> 00:53:27,900
um you you have to make sure you're

1410
00:53:27,900 --> 00:53:30,480
catching any known vulnerabilities in

1411
00:53:30,480 --> 00:53:32,640
your apps uh this is just a screenshot

1412
00:53:32,640 --> 00:53:33,660
of what our tool would look like

1413
00:53:33,660 --> 00:53:35,339
actually we've updated our UI I need to

1414
00:53:35,339 --> 00:53:36,660
update that

1415
00:53:36,660 --> 00:53:40,440
um static analysis uh Library you know

1416
00:53:40,440 --> 00:53:42,960
dependency analysis image analysis all

1417
00:53:42,960 --> 00:53:44,460
those kinds of scans you want to do all

1418
00:53:44,460 --> 00:53:46,200
that to find vulnerabilities snuff them

1419
00:53:46,200 --> 00:53:47,400
out before they even get committed to

1420
00:53:47,400 --> 00:53:49,440
your code

1421
00:53:49,440 --> 00:53:50,640
um

1422
00:53:50,640 --> 00:53:52,380
also

1423
00:53:52,380 --> 00:53:53,819
you want to scan you want to have

1424
00:53:53,819 --> 00:53:55,140
there's many scanners to do this you

1425
00:53:55,140 --> 00:53:58,160
want to go in and look for bad practice

1426
00:53:58,160 --> 00:54:00,480
in your kubernetes yaml so here we're

1427
00:54:00,480 --> 00:54:01,619
looking at that allow privilege

1428
00:54:01,619 --> 00:54:03,300
escalation

1429
00:54:03,300 --> 00:54:05,640
if you were to run most kubernetes

1430
00:54:05,640 --> 00:54:07,319
scanners this is our the output of ours

1431
00:54:07,319 --> 00:54:09,480
it'll let you know hey medium level

1432
00:54:09,480 --> 00:54:11,359
severity

1433
00:54:11,359 --> 00:54:13,140
your containers running without

1434
00:54:13,140 --> 00:54:15,300
privilege escalation control it walks

1435
00:54:15,300 --> 00:54:17,339
you through tells you why that's bad how

1436
00:54:17,339 --> 00:54:18,599
to resolve it all those kinds of things

1437
00:54:18,599 --> 00:54:22,800
so scan your code scan your IAC files

1438
00:54:22,800 --> 00:54:24,720
scan everything you got with whatever

1439
00:54:24,720 --> 00:54:27,680
scanners you prefer to use

1440
00:54:27,680 --> 00:54:31,020
uh next we talked about this when we saw

1441
00:54:31,020 --> 00:54:33,540
it the service account token Auto Mount

1442
00:54:33,540 --> 00:54:36,540
uh this you should set to false whenever

1443
00:54:36,540 --> 00:54:38,579
you create a service account do it uh

1444
00:54:38,579 --> 00:54:39,839
you can also set it in the Pod but just

1445
00:54:39,839 --> 00:54:41,579
set it on the service account

1446
00:54:41,579 --> 00:54:46,020
um unless your program your process for

1447
00:54:46,020 --> 00:54:48,119
some reason needs to talk to the cube

1448
00:54:48,119 --> 00:54:51,119
API you don't need that token

1449
00:54:51,119 --> 00:54:54,000
um don't don't mount it in there

1450
00:54:54,000 --> 00:54:55,380
um and setting up to false will stop

1451
00:54:55,380 --> 00:54:56,520
that that would have stopped us on our

1452
00:54:56,520 --> 00:54:59,220
tracks on this example and this this

1453
00:54:59,220 --> 00:55:02,040
thread of execution right right away

1454
00:55:02,040 --> 00:55:03,839
and this will walk you through if you go

1455
00:55:03,839 --> 00:55:05,819
through here how to do this is basically

1456
00:55:05,819 --> 00:55:07,319
you just add this line to your service

1457
00:55:07,319 --> 00:55:10,020
account definition and you're done

1458
00:55:10,020 --> 00:55:11,339
um

1459
00:55:11,339 --> 00:55:13,020
so there were changes in 124 and I'm

1460
00:55:13,020 --> 00:55:14,339
wondering if this is what caused my

1461
00:55:14,339 --> 00:55:15,780
issue at the end

1462
00:55:15,780 --> 00:55:19,079
um but that's uh

1463
00:55:19,079 --> 00:55:22,559
124 Legacy service account token no Auto

1464
00:55:22,559 --> 00:55:26,220
generation feature is now enabled

1465
00:55:26,220 --> 00:55:28,260
um and that sounds like it would stop

1466
00:55:28,260 --> 00:55:29,940
that token from getting mounted but it

1467
00:55:29,940 --> 00:55:31,800
doesn't it just stops the secret from

1468
00:55:31,800 --> 00:55:33,300
being created that you can easily pull

1469
00:55:33,300 --> 00:55:34,980
down from the API it does not stop the

1470
00:55:34,980 --> 00:55:36,240
token from getting mounted in the Pod

1471
00:55:36,240 --> 00:55:38,099
because again backwards compatibility

1472
00:55:38,099 --> 00:55:40,559
you may have apps that do talk to the

1473
00:55:40,559 --> 00:55:41,940
API server and they don't want to by

1474
00:55:41,940 --> 00:55:44,520
default break everybody's app that's not

1475
00:55:44,520 --> 00:55:48,200
explicitly asking for that token

1476
00:55:51,059 --> 00:55:53,579
yeah see there you go is it

1477
00:55:53,579 --> 00:55:56,220
yep so there you go

1478
00:55:56,220 --> 00:55:57,240
um

1479
00:55:57,240 --> 00:55:59,099
and again you should be setting if

1480
00:55:59,099 --> 00:56:01,200
you're using PSPs again we'll get to

1481
00:56:01,200 --> 00:56:03,599
PSPs are going away

1482
00:56:03,599 --> 00:56:04,980
um you should be at least setting that

1483
00:56:04,980 --> 00:56:07,079
don't allow people to have privileged

1484
00:56:07,079 --> 00:56:09,780
escalation because

1485
00:56:09,780 --> 00:56:11,819
they can you know use suid now again

1486
00:56:11,819 --> 00:56:13,740
that can break things so test your apps

1487
00:56:13,740 --> 00:56:16,339
obviously

1488
00:56:16,500 --> 00:56:18,900
um lock down your rbac permissions for

1489
00:56:18,900 --> 00:56:20,220
goodness sake

1490
00:56:20,220 --> 00:56:22,260
um if you were to look into the what we

1491
00:56:22,260 --> 00:56:24,540
deployed in this example the web admin

1492
00:56:24,540 --> 00:56:26,160
service account are back roles you'll

1493
00:56:26,160 --> 00:56:28,980
see a common mistake uh giving your

1494
00:56:28,980 --> 00:56:31,380
service account blanket privileges that

1495
00:56:31,380 --> 00:56:33,240
allowed me to get around get start doing

1496
00:56:33,240 --> 00:56:34,500
things in there that I shouldn't be

1497
00:56:34,500 --> 00:56:35,940
allowed to do

1498
00:56:35,940 --> 00:56:37,920
um not only that but

1499
00:56:37,920 --> 00:56:38,880
um

1500
00:56:38,880 --> 00:56:41,400
they also basically didn't have anything

1501
00:56:41,400 --> 00:56:44,160
on the default namespace so pay

1502
00:56:44,160 --> 00:56:46,440
attention to default now this is a

1503
00:56:46,440 --> 00:56:47,819
religious War

1504
00:56:47,819 --> 00:56:49,140
um whether or not you should allow

1505
00:56:49,140 --> 00:56:51,780
people to use default in your clusters

1506
00:56:51,780 --> 00:56:53,940
um I don't care but a lot of people

1507
00:56:53,940 --> 00:56:55,920
don't want developers using default it's

1508
00:56:55,920 --> 00:56:57,900
just another namespace however it's

1509
00:56:57,900 --> 00:57:00,540
everywhere you can't not have it so

1510
00:57:00,540 --> 00:57:02,880
there are some people who would say

1511
00:57:02,880 --> 00:57:05,339
block default from getting deployments

1512
00:57:05,339 --> 00:57:07,260
in your clusters because then you don't

1513
00:57:07,260 --> 00:57:09,540
have to worry about our permissions

1514
00:57:09,540 --> 00:57:12,059
being set there correctly or not

1515
00:57:12,059 --> 00:57:13,800
that's your call

1516
00:57:13,800 --> 00:57:15,480
um I was talking to Duffy Cooley about

1517
00:57:15,480 --> 00:57:17,099
this as far as how would you do how

1518
00:57:17,099 --> 00:57:19,200
would you do that foolproofly and his

1519
00:57:19,200 --> 00:57:21,059
favorite way to do that actually he said

1520
00:57:21,059 --> 00:57:23,160
you could just set quotas to zero in

1521
00:57:23,160 --> 00:57:25,200
default so you deploy all you want but

1522
00:57:25,200 --> 00:57:26,880
it's not going to run like it's

1523
00:57:26,880 --> 00:57:28,500
interesting I don't know if that's a

1524
00:57:28,500 --> 00:57:30,900
it's it's it's it It's Curious way to do

1525
00:57:30,900 --> 00:57:32,700
it but uh

1526
00:57:32,700 --> 00:57:35,700
um again we'll get to more ways better

1527
00:57:35,700 --> 00:57:37,559
ways maybe to do that in a minute

1528
00:57:37,559 --> 00:57:38,460
um

1529
00:57:38,460 --> 00:57:40,079
be explicit in your name spaces that's

1530
00:57:40,079 --> 00:57:41,460
another way to do it is make sure

1531
00:57:41,460 --> 00:57:43,740
everyone's deploying with a declared

1532
00:57:43,740 --> 00:57:46,619
namespace that's another again religious

1533
00:57:46,619 --> 00:57:48,839
War you could have uh for that kind of a

1534
00:57:48,839 --> 00:57:49,680
thing if you're going to do that I've

1535
00:57:49,680 --> 00:57:51,300
seen a lot of people use customize so

1536
00:57:51,300 --> 00:57:52,859
that they're using that to automatically

1537
00:57:52,859 --> 00:57:55,559
populate in a namespace as they create

1538
00:57:55,559 --> 00:57:58,200
you know the the or as they do the

1539
00:57:58,200 --> 00:58:00,000
deployments

1540
00:58:00,000 --> 00:58:02,040
um you know the body you look into that

1541
00:58:02,040 --> 00:58:03,720
if you want but the one I want to really

1542
00:58:03,720 --> 00:58:05,460
talk about though is Network policies I

1543
00:58:05,460 --> 00:58:07,260
mentioned this earlier again coming from

1544
00:58:07,260 --> 00:58:10,079
a developer background the developers I

1545
00:58:10,079 --> 00:58:11,339
don't know why we have this aversion

1546
00:58:11,339 --> 00:58:14,099
Network policy or network firewalling or

1547
00:58:14,099 --> 00:58:16,380
if you come from the VMware space the

1548
00:58:16,380 --> 00:58:18,540
the the uh what are they what does NSX

1549
00:58:18,540 --> 00:58:20,160
call it they call it the uh

1550
00:58:20,160 --> 00:58:23,280
uh micro segmented

1551
00:58:23,280 --> 00:58:26,099
distributed firewall right it sounds so

1552
00:58:26,099 --> 00:58:28,200
complicated and oh my gosh tags and

1553
00:58:28,200 --> 00:58:30,180
selectors and what it's not you're

1554
00:58:30,180 --> 00:58:32,099
basically if you've not in I don't know

1555
00:58:32,099 --> 00:58:33,119
if anyone here has not done Network

1556
00:58:33,119 --> 00:58:35,400
policy but the basic Network policy not

1557
00:58:35,400 --> 00:58:37,859
even getting into custom cnis what they

1558
00:58:37,859 --> 00:58:39,660
provide on top of it but you're

1559
00:58:39,660 --> 00:58:42,119
basically just saying hey this is the

1560
00:58:42,119 --> 00:58:44,460
Pod selectors for what can and can't

1561
00:58:44,460 --> 00:58:47,160
talk to each other and I like the

1562
00:58:47,160 --> 00:58:48,960
standard deny everything and then only

1563
00:58:48,960 --> 00:58:51,299
allow the pieces you want that's my

1564
00:58:51,299 --> 00:58:54,720
go-to for example

1565
00:58:54,720 --> 00:58:56,579
this network policy that that one right

1566
00:58:56,579 --> 00:58:58,500
there is that's the denial that's saying

1567
00:58:58,500 --> 00:59:00,359
for every pod that's the wild card for

1568
00:59:00,359 --> 00:59:01,500
every pod

1569
00:59:01,500 --> 00:59:03,780
set up empty ingression egress so it's

1570
00:59:03,780 --> 00:59:06,059
completely broken

1571
00:59:06,059 --> 00:59:07,859
technically you probably need egress out

1572
00:59:07,859 --> 00:59:09,540
to DNS because you can't do service

1573
00:59:09,540 --> 00:59:12,119
Discovery but that's you know

1574
00:59:12,119 --> 00:59:15,480
that's you'll need that but other than

1575
00:59:15,480 --> 00:59:17,099
that all you all I would then would add

1576
00:59:17,099 --> 00:59:19,140
in this case would be I need Ingress to

1577
00:59:19,140 --> 00:59:21,780
five thousand on TCP that's all I need I

1578
00:59:21,780 --> 00:59:22,920
don't want anyone connecting to any

1579
00:59:22,920 --> 00:59:25,559
other ports I don't want any egress out

1580
00:59:25,559 --> 00:59:27,480
of this app because it's like a static

1581
00:59:27,480 --> 00:59:30,720
hosting kind of a thing if this was a

1582
00:59:30,720 --> 00:59:32,400
two-tier app maybe I'd have an egress

1583
00:59:32,400 --> 00:59:34,619
just to my back end namespace or to my

1584
00:59:34,619 --> 00:59:37,440
backend pod selector and then I wouldn't

1585
00:59:37,440 --> 00:59:40,200
have any access maybe between web tier

1586
00:59:40,200 --> 00:59:42,480
so if I'm running five replicas there's

1587
00:59:42,480 --> 00:59:43,980
no reason unless I had a distributed

1588
00:59:43,980 --> 00:59:45,960
caching system and built in for them to

1589
00:59:45,960 --> 00:59:48,480
talk to each other so don't allow that

1590
00:59:48,480 --> 00:59:49,740
um all sorts of stuff

1591
00:59:49,740 --> 00:59:51,000
now

1592
00:59:51,000 --> 00:59:54,299
that's easy to say as the the person up

1593
00:59:54,299 --> 00:59:55,980
here just giving a demo

1594
00:59:55,980 --> 00:59:59,880
um real world you probably have uh apms

1595
00:59:59,880 --> 01:00:01,140
and other things that have you know

1596
01:00:01,140 --> 01:00:02,640
connections from your apps coming back

1597
01:00:02,640 --> 01:00:05,280
and and things that are

1598
01:00:05,280 --> 01:00:07,500
specific to your organization that you

1599
01:00:07,500 --> 01:00:10,440
need done blanket across there are some

1600
01:00:10,440 --> 01:00:12,119
we'll talk about I think on the next

1601
01:00:12,119 --> 01:00:14,099
page I have some interesting

1602
01:00:14,099 --> 01:00:15,960
mitigations for that but you got to take

1603
01:00:15,960 --> 01:00:17,160
that into account so you got to make

1604
01:00:17,160 --> 01:00:19,440
sure you're not going to break your you

1605
01:00:19,440 --> 01:00:20,579
know you have to throw vendors out there

1606
01:00:20,579 --> 01:00:23,040
or anyone but like your your dynatrace

1607
01:00:23,040 --> 01:00:24,720
or whatever whatever you got running you

1608
01:00:24,720 --> 01:00:25,859
want to make sure you're connecting to

1609
01:00:25,859 --> 01:00:27,059
all the things you need to connect to

1610
01:00:27,059 --> 01:00:28,559
but that should be well known for your

1611
01:00:28,559 --> 01:00:30,180
for your developers anyway because

1612
01:00:30,180 --> 01:00:31,500
they're doing it in the agent strings

1613
01:00:31,500 --> 01:00:34,020
for their apps or whatever

1614
01:00:34,020 --> 01:00:36,020
um

1615
01:00:36,540 --> 01:00:39,900
so that appears to be duplicated I'm

1616
01:00:39,900 --> 01:00:42,480
going to skip that so let's talk PSP

1617
01:00:42,480 --> 01:00:46,619
so as I said PSP was removed in v125 it

1618
01:00:46,619 --> 01:00:49,859
was deprecated two years ago

1619
01:00:49,859 --> 01:00:51,420
um and so it's been coming it's becoming

1620
01:00:51,420 --> 01:00:54,119
they finally removed it in 125. uh again

1621
01:00:54,119 --> 01:00:56,180
I showed it here because

1622
01:00:56,180 --> 01:00:58,680
people don't upgrade immediately to

1623
01:00:58,680 --> 01:01:00,480
things and PSPs are still going to be

1624
01:01:00,480 --> 01:01:01,440
out there

1625
01:01:01,440 --> 01:01:03,660
however you should be migrating off and

1626
01:01:03,660 --> 01:01:04,859
you should if you're working with a team

1627
01:01:04,859 --> 01:01:06,480
that is still using PSPs you should be

1628
01:01:06,480 --> 01:01:09,000
at least planning to get off of them and

1629
01:01:09,000 --> 01:01:10,920
uh the uh

1630
01:01:10,920 --> 01:01:12,839
six security folks Tabitha and other

1631
01:01:12,839 --> 01:01:14,700
folks have a good blog about kind of the

1632
01:01:14,700 --> 01:01:16,260
history of this if you're curious why

1633
01:01:16,260 --> 01:01:18,480
did they deprecate it what was the what

1634
01:01:18,480 --> 01:01:19,920
was the plan for the future and then of

1635
01:01:19,920 --> 01:01:22,319
course the kubernetes docs talks about

1636
01:01:22,319 --> 01:01:24,660
um what to go to so it's pod security

1637
01:01:24,660 --> 01:01:27,119
admission is kind of the new replacement

1638
01:01:27,119 --> 01:01:29,579
for it kind of sort of it doesn't do

1639
01:01:29,579 --> 01:01:32,640
everything PSP did but it's kind of a

1640
01:01:32,640 --> 01:01:35,880
new take on how to do this kind of

1641
01:01:35,880 --> 01:01:37,980
security however most shops that I've

1642
01:01:37,980 --> 01:01:39,299
seen or the people that I've talked to

1643
01:01:39,299 --> 01:01:41,819
have are replacing it with either

1644
01:01:41,819 --> 01:01:44,760
kyberno or Opa with gatekeeper an

1645
01:01:44,760 --> 01:01:46,559
emission controller and PSA is an

1646
01:01:46,559 --> 01:01:47,640
emission controller on pod security

1647
01:01:47,640 --> 01:01:49,020
policies admission controllers for that

1648
01:01:49,020 --> 01:01:52,680
matter but having policy management

1649
01:01:52,680 --> 01:01:55,200
systems like Carbono or Opa or whatever

1650
01:01:55,200 --> 01:01:57,660
allow you to have centralized policy on

1651
01:01:57,660 --> 01:01:59,339
all of this stuff and enforce it across

1652
01:01:59,339 --> 01:02:01,400
your cluster and it's much more flexible

1653
01:02:01,400 --> 01:02:03,540
and you can block all of these kinds of

1654
01:02:03,540 --> 01:02:06,420
things with any of these kinds of tools

1655
01:02:06,420 --> 01:02:09,000
so take a look at those uh there's

1656
01:02:09,000 --> 01:02:10,680
there's I mean since I've written this

1657
01:02:10,680 --> 01:02:12,359
page there's probably 18 more blogs you

1658
01:02:12,359 --> 01:02:14,460
could add to this because once 125 went

1659
01:02:14,460 --> 01:02:15,780
live

1660
01:02:15,780 --> 01:02:18,299
it's uh quite common to need to do that

1661
01:02:18,299 --> 01:02:21,180
uh Network policy complexities some

1662
01:02:21,180 --> 01:02:22,440
things some references that you can

1663
01:02:22,440 --> 01:02:24,059
point your developers to if they are

1664
01:02:24,059 --> 01:02:26,400
trying to learn Network policy

1665
01:02:26,400 --> 01:02:29,099
um the kind of the the Bible uh the the

1666
01:02:29,099 --> 01:02:31,619
recipe guide Ahmed all Balkans

1667
01:02:31,619 --> 01:02:33,720
kubernetes Network policy recipes let me

1668
01:02:33,720 --> 01:02:35,579
go ahead and click on that because it

1669
01:02:35,579 --> 01:02:38,099
this is a nice simple

1670
01:02:38,099 --> 01:02:41,940
listing of ideas with most of them

1671
01:02:41,940 --> 01:02:44,880
having animated graphics showing the

1672
01:02:44,880 --> 01:02:47,400
policy we're talking about looks like

1673
01:02:47,400 --> 01:02:49,619
this Ingress egress so for instance

1674
01:02:49,619 --> 01:02:51,480
let's look at I'll pick one that doesn't

1675
01:02:51,480 --> 01:02:53,760
have a Graphic process uh let's see

1676
01:02:53,760 --> 01:02:56,220
limit traffic to an application this one

1677
01:02:56,220 --> 01:02:58,680
does so this is a restrict traffic to a

1678
01:02:58,680 --> 01:03:01,200
service blah blah blah it's showing that

1679
01:03:01,200 --> 01:03:04,619
Ingress from App coffee shop in is

1680
01:03:04,619 --> 01:03:07,680
blocked but app bookstore in that

1681
01:03:07,680 --> 01:03:10,020
selector works that selector doesn't and

1682
01:03:10,020 --> 01:03:13,079
then it shows you the actual policy

1683
01:03:13,079 --> 01:03:17,180
so this is a nice resource

1684
01:03:17,180 --> 01:03:19,319
the psyllium folks have a really cool

1685
01:03:19,319 --> 01:03:20,460
visualizer if you go to network

1686
01:03:20,460 --> 01:03:24,119
policy.io you can craft Network policies

1687
01:03:24,119 --> 01:03:26,250
and it'll show you how it looks

1688
01:03:26,250 --> 01:03:26,640
[Music]

1689
01:03:26,640 --> 01:03:27,900
um

1690
01:03:27,900 --> 01:03:30,480
cnis have their specific policies so if

1691
01:03:30,480 --> 01:03:32,220
you are a psyllium shop or a Calico

1692
01:03:32,220 --> 01:03:33,599
Shopper insert the name of your favorite

1693
01:03:33,599 --> 01:03:36,540
cni almost all of them it's what maybe

1694
01:03:36,540 --> 01:03:38,220
well flannel doesn't have Network policy

1695
01:03:38,220 --> 01:03:40,500
so not that one but all the rest have

1696
01:03:40,500 --> 01:03:42,780
their own network policy additions

1697
01:03:42,780 --> 01:03:45,059
extensions that do things for instance

1698
01:03:45,059 --> 01:03:47,520
Calico will have a cluster-wide policy

1699
01:03:47,520 --> 01:03:49,440
option where you can apply things not

1700
01:03:49,440 --> 01:03:51,420
just at the namespace psyllium has the

1701
01:03:51,420 --> 01:03:53,660
same kinds of things so take a look

1702
01:03:53,660 --> 01:03:56,040
generally your your cni is going to be

1703
01:03:56,040 --> 01:03:57,180
picked for you if you're a developer you

1704
01:03:57,180 --> 01:03:58,980
don't normally get to pick your cni but

1705
01:03:58,980 --> 01:04:00,359
you should learn what your cni offers

1706
01:04:00,359 --> 01:04:03,299
and weigh the benefits or costs of using

1707
01:04:03,299 --> 01:04:05,099
specific cni functionalities because you

1708
01:04:05,099 --> 01:04:06,720
are tying yourself to that cni when you

1709
01:04:06,720 --> 01:04:10,559
do so the network policy next-gen folks

1710
01:04:10,559 --> 01:04:12,480
are doing you know similar things to try

1711
01:04:12,480 --> 01:04:13,980
to take some of those cool extensions

1712
01:04:13,980 --> 01:04:16,500
and make them part of the main spec I've

1713
01:04:16,500 --> 01:04:19,740
not been following that Sig or tag I'll

1714
01:04:19,740 --> 01:04:21,240
be interested to see where they are with

1715
01:04:21,240 --> 01:04:23,760
that but it's a good group to go listen

1716
01:04:23,760 --> 01:04:25,079
to if you want so that's the network

1717
01:04:25,079 --> 01:04:27,480
policy plus plus comments

1718
01:04:27,480 --> 01:04:29,400
um there's another cool one here I've

1719
01:04:29,400 --> 01:04:31,619
never seen actually at anyone I've

1720
01:04:31,619 --> 01:04:33,420
talked to use but I've read blogs on

1721
01:04:33,420 --> 01:04:34,460
this and that's a link to a Blog

1722
01:04:34,460 --> 01:04:37,260
hierarchical name spaces anyone used

1723
01:04:37,260 --> 01:04:39,599
hierarchical namespaces here

1724
01:04:39,599 --> 01:04:41,579
no see I'm not running to anyone using

1725
01:04:41,579 --> 01:04:42,660
it it sounds really cool though it

1726
01:04:42,660 --> 01:04:44,099
allows you to have hierarchical

1727
01:04:44,099 --> 01:04:46,200
namespaces which allows you to set

1728
01:04:46,200 --> 01:04:49,079
workloads in a sub in a kind of a sub

1729
01:04:49,079 --> 01:04:50,520
tree pattern where you could set Ingress

1730
01:04:50,520 --> 01:04:52,980
and egress rules that apply to all the

1731
01:04:52,980 --> 01:04:55,260
namespace that are Downstream from it um

1732
01:04:55,260 --> 01:04:56,640
you've got a parent Network policy

1733
01:04:56,640 --> 01:04:58,920
propagates to its children sounds really

1734
01:04:58,920 --> 01:04:59,940
cool

1735
01:04:59,940 --> 01:05:02,220
um I'm not Consulting anymore so I've

1736
01:05:02,220 --> 01:05:05,000
not had time to go try this at any once

1737
01:05:05,000 --> 01:05:08,119
but take a look at the the with that

1738
01:05:08,119 --> 01:05:10,260
that looks off to the project actually

1739
01:05:10,260 --> 01:05:12,420
it's not a Blog

1740
01:05:12,420 --> 01:05:14,819
um there you go so that's an interesting

1741
01:05:14,819 --> 01:05:16,440
idea for especially for handling that

1742
01:05:16,440 --> 01:05:17,940
issue where everybody in this company

1743
01:05:17,940 --> 01:05:22,020
must connect to our APM server so you

1744
01:05:22,020 --> 01:05:23,280
would you could use something like this

1745
01:05:23,280 --> 01:05:25,619
to implement that

1746
01:05:25,619 --> 01:05:29,400
uh and finally Community Resources uh

1747
01:05:29,400 --> 01:05:31,920
obviously kubernetes security uh I'm in

1748
01:05:31,920 --> 01:05:33,180
there often

1749
01:05:33,180 --> 01:05:36,780
um this is uh where a lot of discusses a

1750
01:05:36,780 --> 01:05:38,640
lot of the things that you see here came

1751
01:05:38,640 --> 01:05:41,819
from discussions there cncf tag security

1752
01:05:41,819 --> 01:05:43,680
which runs this conference if you're not

1753
01:05:43,680 --> 01:05:45,540
attending tax security it's not a bad

1754
01:05:45,540 --> 01:05:47,220
thing to lurk on at least and get in

1755
01:05:47,220 --> 01:05:48,960
there I try to go to that as often as I

1756
01:05:48,960 --> 01:05:49,920
can

1757
01:05:49,920 --> 01:05:51,480
um Sig Network for the network stuff I

1758
01:05:51,480 --> 01:05:52,740
was just talking about and then the open

1759
01:05:52,740 --> 01:05:54,540
ssf if you get outside the cncf world

1760
01:05:54,540 --> 01:05:56,640
the open ssf talks a lot of really cool

1761
01:05:56,640 --> 01:06:00,059
stuff also Linux Foundation owned and if

1762
01:06:00,059 --> 01:06:02,040
that is that's the end of the workshop

1763
01:06:02,040 --> 01:06:03,720
itself

1764
01:06:03,720 --> 01:06:07,680
and I have left us 15 minutes for any

1765
01:06:07,680 --> 01:06:10,380
questions I can try to get this the

1766
01:06:10,380 --> 01:06:12,240
actual you know I can bump down to 123

1767
01:06:12,240 --> 01:06:13,559
real quick and try to get the the finish

1768
01:06:13,559 --> 01:06:15,720
the demo for you but I'm thinking maybe

1769
01:06:15,720 --> 01:06:17,099
if you've got questions that might be a

1770
01:06:17,099 --> 01:06:19,880
better use of our time

1771
01:06:20,339 --> 01:06:24,020
no questions here's one

1772
01:06:38,880 --> 01:06:41,400
so the question is could we have saved a

1773
01:06:41,400 --> 01:06:43,740
step because we had so much access in

1774
01:06:43,740 --> 01:06:46,079
the secret secure named namespace could

1775
01:06:46,079 --> 01:06:48,480
we have edited the Pod security policy

1776
01:06:48,480 --> 01:06:50,760
there to give us privileged access

1777
01:06:50,760 --> 01:06:53,039
possibly um that's a good I should try

1778
01:06:53,039 --> 01:06:53,880
that

1779
01:06:53,880 --> 01:06:54,599
um

1780
01:06:54,599 --> 01:06:56,039
I should try that and I should change my

1781
01:06:56,039 --> 01:06:57,240
demo then to make sure you don't have

1782
01:06:57,240 --> 01:06:59,339
that much access but yes that that very

1783
01:06:59,339 --> 01:07:00,539
likely

1784
01:07:00,539 --> 01:07:02,520
um hopefully you don't that would be one

1785
01:07:02,520 --> 01:07:04,640
thing that you would think out you would

1786
01:07:04,640 --> 01:07:06,180
specifically not that's a good one

1787
01:07:06,180 --> 01:07:07,859
though I like that

1788
01:07:07,859 --> 01:07:11,880
any other questions comments

1789
01:07:13,380 --> 01:07:15,980
say again

1790
01:07:17,099 --> 01:07:20,039
that's a good question let's click on it

1791
01:07:20,039 --> 01:07:23,240
I haven't looked at it in a little while

1792
01:07:24,780 --> 01:07:28,400
this is

1793
01:07:28,559 --> 01:07:31,579
I should say in here right

1794
01:07:33,780 --> 01:07:36,960
overseen by working group multi-tenancy

1795
01:07:36,960 --> 01:07:39,480
uh

1796
01:07:39,480 --> 01:07:42,500
I'm not sure

1797
01:07:42,539 --> 01:07:43,980
it's been a while it's been around a

1798
01:07:43,980 --> 01:07:45,240
while though

1799
01:07:45,240 --> 01:07:46,680
um it's probably still an alpha whatever

1800
01:07:46,680 --> 01:07:48,480
it is I'd have to look it up I'm not

1801
01:07:48,480 --> 01:07:50,400
going to do that up here but yeah go

1802
01:07:50,400 --> 01:07:51,599
take a look

1803
01:07:51,599 --> 01:07:53,640
um I'll find out later today and I'll

1804
01:07:53,640 --> 01:07:56,598
tweet it out or something

1805
01:07:56,819 --> 01:07:59,520
any other ideas

1806
01:07:59,520 --> 01:08:01,380
that we could have blocked this early

1807
01:08:01,380 --> 01:08:04,579
Beyond these

1808
01:08:21,179 --> 01:08:23,839
right

1809
01:08:25,080 --> 01:08:27,299
good question so the question is the the

1810
01:08:27,299 --> 01:08:29,160
run is non-root stops the container from

1811
01:08:29,160 --> 01:08:31,738
starting as root the escalation

1812
01:08:31,738 --> 01:08:34,380
privilege being not there allows you to

1813
01:08:34,380 --> 01:08:38,160
elevate privilege as you run an suid to

1814
01:08:38,160 --> 01:08:40,979
become elevated privilege or basically

1815
01:08:40,979 --> 01:08:43,799
root what's the point of doing one

1816
01:08:43,799 --> 01:08:45,719
without the other

1817
01:08:45,719 --> 01:08:46,920
um

1818
01:08:46,920 --> 01:08:49,380
you can

1819
01:08:49,380 --> 01:08:51,600
there are processes who need to elevate

1820
01:08:51,600 --> 01:08:53,160
privilege

1821
01:08:53,160 --> 01:08:54,540
um I'm trying to think of a ping used to

1822
01:08:54,540 --> 01:08:56,279
need it but now it uses net

1823
01:08:56,279 --> 01:08:58,560
um the capabilities to do it but there

1824
01:08:58,560 --> 01:09:00,238
are processes that need to become root

1825
01:09:00,238 --> 01:09:01,738
quickly to grab a low port or do

1826
01:09:01,738 --> 01:09:02,819
whatever they need to do and then they

1827
01:09:02,819 --> 01:09:04,920
drop right back down if you set that

1828
01:09:04,920 --> 01:09:06,960
elevation to false it will not be able

1829
01:09:06,960 --> 01:09:09,359
to do that anymore but your point is

1830
01:09:09,359 --> 01:09:10,920
valid and then I think you're right I

1831
01:09:10,920 --> 01:09:13,140
think you should always have both unless

1832
01:09:13,140 --> 01:09:16,439
you absolutely need one or the other

1833
01:09:16,439 --> 01:09:18,060
um the main thing with the the run is

1834
01:09:18,060 --> 01:09:20,420
non-roots is

1835
01:09:20,420 --> 01:09:24,238
in if if I'm root in a container even if

1836
01:09:24,238 --> 01:09:25,979
I wasn't trying to do nmap and do that I

1837
01:09:25,979 --> 01:09:28,080
can still do other things like I can um

1838
01:09:28,080 --> 01:09:31,500
let's say I've got a standard uh Debian

1839
01:09:31,500 --> 01:09:34,799
base image that has the full apt in it

1840
01:09:34,799 --> 01:09:37,140
or um yeah I can I can install software

1841
01:09:37,140 --> 01:09:39,779
if I've got access to an apt an apprepo

1842
01:09:39,779 --> 01:09:41,219
um because I'm root because I can do

1843
01:09:41,219 --> 01:09:43,560
whatever I want in a container then and

1844
01:09:43,560 --> 01:09:46,560
I'm uid 0. if I found another volume

1845
01:09:46,560 --> 01:09:47,819
Mount maybe it's not a privileged one

1846
01:09:47,819 --> 01:09:49,259
maybe it's not a root Mount like that

1847
01:09:49,259 --> 01:09:50,819
but if I somebody has mounted another

1848
01:09:50,819 --> 01:09:53,939
file system in I'm uid 0 in that mount

1849
01:09:53,939 --> 01:09:56,940
so now let's say there's sensitive

1850
01:09:56,940 --> 01:09:58,980
information application configurations

1851
01:09:58,980 --> 01:10:01,199
that I shouldn't be able to read as the

1852
01:10:01,199 --> 01:10:04,140
normal user but I can because I'm uid 0.

1853
01:10:04,140 --> 01:10:06,660
so there's that now there's also

1854
01:10:06,660 --> 01:10:08,640
username spaces which is a whole nother

1855
01:10:08,640 --> 01:10:10,260
ball of wax we can talk about which

1856
01:10:10,260 --> 01:10:12,179
someday will have

1857
01:10:12,179 --> 01:10:14,280
um which allows you to then map names

1858
01:10:14,280 --> 01:10:16,440
username spaces so that you're no longer

1859
01:10:16,440 --> 01:10:18,300
root in a container no longer means root

1860
01:10:18,300 --> 01:10:20,880
on the host that's a whole other

1861
01:10:20,880 --> 01:10:23,699
scope that I'm not going to tackle right

1862
01:10:23,699 --> 01:10:25,820
now

1863
01:10:25,920 --> 01:10:27,360
other things that I didn't talk about

1864
01:10:27,360 --> 01:10:30,960
capability I mean uh security context

1865
01:10:30,960 --> 01:10:34,380
that whole API for your pods learn it

1866
01:10:34,380 --> 01:10:36,120
understand what the different things in

1867
01:10:36,120 --> 01:10:39,120
there do do like capabilities a lot of

1868
01:10:39,120 --> 01:10:40,679
time you can deny capabilities because

1869
01:10:40,679 --> 01:10:42,840
your app doesn't need them if you're not

1870
01:10:42,840 --> 01:10:44,280
doing low-level networking things you

1871
01:10:44,280 --> 01:10:45,719
don't need extra networking capabilities

1872
01:10:45,719 --> 01:10:47,000
for your process

1873
01:10:47,000 --> 01:10:49,440
a lot of business apps you can just deny

1874
01:10:49,440 --> 01:10:53,100
all and they'll run just fine you need

1875
01:10:53,100 --> 01:10:54,900
to test that you need to make sure your

1876
01:10:54,900 --> 01:10:56,219
app can run that way but if you're in a

1877
01:10:56,219 --> 01:10:57,960
micro service type of environment with a

1878
01:10:57,960 --> 01:11:00,239
tiny app that's not a hard thing to you

1879
01:11:00,239 --> 01:11:02,959
know figure out

1880
01:11:03,360 --> 01:11:05,159
um immutability is important I talked

1881
01:11:05,159 --> 01:11:06,659
about read-only root file system that's

1882
01:11:06,659 --> 01:11:07,980
it's one of my favorites because it's an

1883
01:11:07,980 --> 01:11:09,300
easy one

1884
01:11:09,300 --> 01:11:11,640
um generally if you're you're if you're

1885
01:11:11,640 --> 01:11:13,980
truly writing microservices they're

1886
01:11:13,980 --> 01:11:15,300
going to be immutable because it's one

1887
01:11:15,300 --> 01:11:16,260
of the 12 factors you're supposed to be

1888
01:11:16,260 --> 01:11:18,300
following 12 factors right that makes

1889
01:11:18,300 --> 01:11:19,980
kubernetes more easily able to move

1890
01:11:19,980 --> 01:11:21,360
things around if your containers don't

1891
01:11:21,360 --> 01:11:22,980
have state in them that they care about

1892
01:11:22,980 --> 01:11:25,500
now that's easy for me to say here then

1893
01:11:25,500 --> 01:11:27,179
you got and I stepped back into my last

1894
01:11:27,179 --> 01:11:28,860
roles as a developer where I'm writing

1895
01:11:28,860 --> 01:11:31,020
Tomcat apps that are dropping log files

1896
01:11:31,020 --> 01:11:31,739
and

1897
01:11:31,739 --> 01:11:33,719
you know work directories all over the

1898
01:11:33,719 --> 01:11:34,620
place so you got to make sure you're

1899
01:11:34,620 --> 01:11:36,060
mounting volumes or doing whatever you

1900
01:11:36,060 --> 01:11:38,280
need to do to make your app run

1901
01:11:38,280 --> 01:11:40,380
but honestly that's things you should

1902
01:11:40,380 --> 01:11:42,540
probably be migrating away from anyway

1903
01:11:42,540 --> 01:11:45,179
in modern apps so read only root file

1904
01:11:45,179 --> 01:11:46,140
system is one of my favorites because

1905
01:11:46,140 --> 01:11:48,960
without it it makes it harder it's not a

1906
01:11:48,960 --> 01:11:50,280
silver bullet but it makes it harder I

1907
01:11:50,280 --> 01:11:51,719
can't download a script and start

1908
01:11:51,719 --> 01:11:54,120
Bitcoin mining it's as easy if I can't

1909
01:11:54,120 --> 01:11:56,100
modify your file system I mean I got the

1910
01:11:56,100 --> 01:11:58,560
temp file system maybe but

1911
01:11:58,560 --> 01:12:00,600
just every little thing you do makes it

1912
01:12:00,600 --> 01:12:01,620
a little harder it's kind of like in the

1913
01:12:01,620 --> 01:12:03,120
old days you have the club on your car

1914
01:12:03,120 --> 01:12:04,380
it's not going to stop a thief from

1915
01:12:04,380 --> 01:12:06,300
stealing your Ferrari but

1916
01:12:06,300 --> 01:12:09,060
if it's on a Civic yeah maybe they're

1917
01:12:09,060 --> 01:12:12,020
going to look at the next car

1918
01:12:12,420 --> 01:12:14,280
okay well with that

1919
01:12:14,280 --> 01:12:17,280
um I am going to uh call it done unless

1920
01:12:17,280 --> 01:12:19,320
you have anything else

1921
01:12:19,320 --> 01:12:22,080
I'm going to let you out early

1922
01:12:22,080 --> 01:12:23,400
thanks oh

1923
01:12:23,400 --> 01:12:25,020
one other thing one thing I actually do

1924
01:12:25,020 --> 01:12:27,719
have a slide that I do very much care to

1925
01:12:27,719 --> 01:12:30,120
show if I can get my browser back up

1926
01:12:30,120 --> 01:12:31,500
here

1927
01:12:31,500 --> 01:12:32,640
um

1928
01:12:32,640 --> 01:12:34,800
get past all so you have all these

1929
01:12:34,800 --> 01:12:36,060
slides that

1930
01:12:36,060 --> 01:12:37,739
we're all in the GitHub repository so

1931
01:12:37,739 --> 01:12:39,120
you don't need them

1932
01:12:39,120 --> 01:12:40,260
um

1933
01:12:40,260 --> 01:12:41,640
that's all we just talked about I just

1934
01:12:41,640 --> 01:12:43,080
want to give thanks first of all so the

1935
01:12:43,080 --> 01:12:45,239
people listed here plus a ton more

1936
01:12:45,239 --> 01:12:46,980
um a lot of the content you saw here is

1937
01:12:46,980 --> 01:12:51,120
is gathered from calls and and blogs and

1938
01:12:51,120 --> 01:12:54,420
and discussions had with folks like this

1939
01:12:54,420 --> 01:12:56,100
people in the in six security tag

1940
01:12:56,100 --> 01:12:57,420
security I just want to thank them all

1941
01:12:57,420 --> 01:12:59,460
because and we all we all learn from

1942
01:12:59,460 --> 01:13:02,880
each other and uh we do have this QR

1943
01:13:02,880 --> 01:13:05,940
code if you want to

1944
01:13:05,940 --> 01:13:08,280
um give feedback on the um to the to the

1945
01:13:08,280 --> 01:13:10,560
people running the show they will uh

1946
01:13:10,560 --> 01:13:13,980
take that I am Eric Smalling on all the

1947
01:13:13,980 --> 01:13:16,519
socials

1948
01:13:17,280 --> 01:13:20,450
um that's it thanks again

1949
01:13:20,450 --> 01:13:24,608
[Applause]

