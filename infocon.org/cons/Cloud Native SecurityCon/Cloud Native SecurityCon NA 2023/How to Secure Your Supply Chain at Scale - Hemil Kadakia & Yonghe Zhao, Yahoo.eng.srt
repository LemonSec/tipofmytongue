1
00:00:00,420 --> 00:00:02,580
thank you everybody for joining us today

2
00:00:02,580 --> 00:00:05,520
we'll be talking about how to secure

3
00:00:05,520 --> 00:00:07,919
your software supply chain at scale I'm

4
00:00:07,919 --> 00:00:10,200
heimel and I'm a software engineer at

5
00:00:10,200 --> 00:00:12,480
Yahoo security team and this is my

6
00:00:12,480 --> 00:00:15,179
colleague hi I'm jungko also from Yahoo

7
00:00:15,179 --> 00:00:18,000
security team and our security team is

8
00:00:18,000 --> 00:00:20,880
on also known as the paranoids and here

9
00:00:20,880 --> 00:00:23,520
is a logo for identifying us we are very

10
00:00:23,520 --> 00:00:25,859
excited to be here

11
00:00:25,859 --> 00:00:28,560
all right so here's the agenda for today

12
00:00:28,560 --> 00:00:31,199
by the end of this talk we would like to

13
00:00:31,199 --> 00:00:33,540
show you how a lot of the existing open

14
00:00:33,540 --> 00:00:36,000
source tools can be deployed and

15
00:00:36,000 --> 00:00:38,000
integrated with your existing ecosystem

16
00:00:38,000 --> 00:00:40,920
and also some of the policies one can

17
00:00:40,920 --> 00:00:42,239
create to

18
00:00:42,239 --> 00:00:44,219
uh Safeguard again some of the supply

19
00:00:44,219 --> 00:00:45,660
chain attacks

20
00:00:45,660 --> 00:00:48,539
so let's get started so what is the

21
00:00:48,539 --> 00:00:49,980
software supply chain

22
00:00:49,980 --> 00:00:52,200
software supply chain is

23
00:00:52,200 --> 00:00:54,360
made up of everything and everyone that

24
00:00:54,360 --> 00:00:56,820
touches your code as part of software

25
00:00:56,820 --> 00:00:58,500
development life cycle

26
00:00:58,500 --> 00:01:00,420
beginning from application development

27
00:01:00,420 --> 00:01:03,420
to CI CD Pipeline and eventually

28
00:01:03,420 --> 00:01:05,580
deployment to production

29
00:01:05,580 --> 00:01:08,159
it also includes information about the

30
00:01:08,159 --> 00:01:10,040
software

31
00:01:10,040 --> 00:01:13,979
like components uh the source the people

32
00:01:13,979 --> 00:01:16,560
who wrote The Source Code and sources

33
00:01:16,560 --> 00:01:18,479
where they come from it includes

34
00:01:18,479 --> 00:01:19,680
information about the known

35
00:01:19,680 --> 00:01:22,439
vulnerabilities supported versions and

36
00:01:22,439 --> 00:01:24,360
so on basically everything that touches

37
00:01:24,360 --> 00:01:27,780
it at some point

38
00:01:27,780 --> 00:01:30,119
so what is the problem and what are the

39
00:01:30,119 --> 00:01:31,740
various attacks that are possible in the

40
00:01:31,740 --> 00:01:33,240
software supply chain

41
00:01:33,240 --> 00:01:35,100
there are quite a lot of places an

42
00:01:35,100 --> 00:01:36,799
attacker can Target your infrastructure

43
00:01:36,799 --> 00:01:39,600
starting from compromising your Source

44
00:01:39,600 --> 00:01:42,119
Code system example being the php's git

45
00:01:42,119 --> 00:01:43,979
server when they were attacked or

46
00:01:43,979 --> 00:01:46,380
compromising your build system uh

47
00:01:46,380 --> 00:01:48,479
resentish example being the solar winds

48
00:01:48,479 --> 00:01:51,060
attack or they could also trick users to

49
00:01:51,060 --> 00:01:54,180
use bad artifacts which is known as typo

50
00:01:54,180 --> 00:01:55,560
squatting and that's been happening

51
00:01:55,560 --> 00:01:58,560
often in package managers

52
00:01:58,560 --> 00:02:00,960
so why is software supply chain security

53
00:02:00,960 --> 00:02:03,600
important to us these are some of the

54
00:02:03,600 --> 00:02:06,420
recent attacks and headlines related to

55
00:02:06,420 --> 00:02:08,399
software supply chain security

56
00:02:08,399 --> 00:02:10,440
at the bottom you can see the most

57
00:02:10,440 --> 00:02:13,379
recent attack on Pi torch where a

58
00:02:13,379 --> 00:02:16,319
nightly version of pytorch which was

59
00:02:16,319 --> 00:02:18,599
released during the holiday season most

60
00:02:18,599 --> 00:02:22,200
likely had a rogue package which was

61
00:02:22,200 --> 00:02:24,300
able to siphon off some sensitive data

62
00:02:24,300 --> 00:02:27,599
from user system this attack is known as

63
00:02:27,599 --> 00:02:30,120
dependency confusion and that's been

64
00:02:30,120 --> 00:02:33,180
affecting a lot of the development

65
00:02:33,180 --> 00:02:35,760
environments and package managers

66
00:02:35,760 --> 00:02:38,640
right at the top uh you can see the one

67
00:02:38,640 --> 00:02:40,860
for where there was a well-planned spear

68
00:02:40,860 --> 00:02:42,060
fishing attack

69
00:02:42,060 --> 00:02:44,580
uh where they were able to attack more

70
00:02:44,580 --> 00:02:47,819
than 130 organizations and were able to

71
00:02:47,819 --> 00:02:50,280
get around 10 000 OCTA and 2fa

72
00:02:50,280 --> 00:02:52,500
credentials

73
00:02:52,500 --> 00:02:55,319
so here's an obligatory side showing you

74
00:02:55,319 --> 00:02:56,819
some scary figures

75
00:02:56,819 --> 00:02:59,099
industry data suggests anywhere between

76
00:02:59,099 --> 00:03:02,940
85 to 97 percent of Enterprise code base

77
00:03:02,940 --> 00:03:04,980
is using open source

78
00:03:04,980 --> 00:03:07,140
this means that most of your application

79
00:03:07,140 --> 00:03:09,420
consists of code that you didn't write

80
00:03:09,420 --> 00:03:12,060
the vulnerabilities in third party or

81
00:03:12,060 --> 00:03:14,459
open source dependencies can pose a

82
00:03:14,459 --> 00:03:17,280
significant security risk

83
00:03:17,280 --> 00:03:19,800
supply chain attacks are on the rise and

84
00:03:19,800 --> 00:03:21,780
according to the recent report by sonar

85
00:03:21,780 --> 00:03:24,180
type the supply chain attacks have gone

86
00:03:24,180 --> 00:03:27,840
up by 742 percent uh year over year over

87
00:03:27,840 --> 00:03:29,640
the last three years

88
00:03:29,640 --> 00:03:31,560
three out of five companies have been

89
00:03:31,560 --> 00:03:33,780
targeted uh due to the supply chain

90
00:03:33,780 --> 00:03:37,379
attacks based on angkor's report as well

91
00:03:37,379 --> 00:03:39,780
so what is the industry doing in order

92
00:03:39,780 --> 00:03:42,239
to secure software supply chain

93
00:03:42,239 --> 00:03:44,159
actually quite a lot

94
00:03:44,159 --> 00:03:46,140
so there are a lot of great tools and

95
00:03:46,140 --> 00:03:48,599
resources especially open source and

96
00:03:48,599 --> 00:03:51,239
proprietary with a wealth of security

97
00:03:51,239 --> 00:03:54,540
guidance and resources that can help aid

98
00:03:54,540 --> 00:03:56,580
In One Security Journey

99
00:03:56,580 --> 00:03:59,580
recently cncf technical Advisory Group

100
00:03:59,580 --> 00:04:02,700
also published a document that lists

101
00:04:02,700 --> 00:04:05,580
down all Publications and references

102
00:04:05,580 --> 00:04:08,400
that could help one in their Journey

103
00:04:08,400 --> 00:04:11,159
especially it has information like the

104
00:04:11,159 --> 00:04:14,040
policies security assessments use cases

105
00:04:14,040 --> 00:04:16,738
and best practices

106
00:04:16,738 --> 00:04:19,858
however it can be really hard and

107
00:04:19,858 --> 00:04:21,779
intimidating to find the right choices

108
00:04:21,779 --> 00:04:24,479
for your company or your situation

109
00:04:24,479 --> 00:04:26,880
especially when a lot of these tools

110
00:04:26,880 --> 00:04:30,120
either have overlap of functionality or

111
00:04:30,120 --> 00:04:32,460
one tool depends on the other

112
00:04:32,460 --> 00:04:35,580
in a in a company where the

113
00:04:35,580 --> 00:04:38,040
infrastructure is already set up it's

114
00:04:38,040 --> 00:04:40,320
really challenging and difficult to

115
00:04:40,320 --> 00:04:43,199
figure out how to integrate these tools

116
00:04:43,199 --> 00:04:45,600
in their existing ecosystem

117
00:04:45,600 --> 00:04:48,419
when we at Yahoo were starting our

118
00:04:48,419 --> 00:04:49,860
journey in software supply chain

119
00:04:49,860 --> 00:04:52,320
security we faced a similar conundrum

120
00:04:52,320 --> 00:04:54,660
and my colleague here will talk more

121
00:04:54,660 --> 00:04:57,780
about what tools we used and how we

122
00:04:57,780 --> 00:05:02,000
integrated in our existing ecosystem

123
00:05:02,340 --> 00:05:06,479
thanks Hano Yahoo indeed has a large

124
00:05:06,479 --> 00:05:08,820
software span system we are supporting

125
00:05:08,820 --> 00:05:11,340
yahoo.com which is amongst the top 10

126
00:05:11,340 --> 00:05:14,220
visited website in the world we have a

127
00:05:14,220 --> 00:05:16,199
lot of services and products serving

128
00:05:16,199 --> 00:05:18,060
high low traffics

129
00:05:18,060 --> 00:05:21,660
internally there are about 60

130
00:05:21,660 --> 00:05:24,960
000 build jobs running and about 5 000

131
00:05:24,960 --> 00:05:27,180
images published to the registry on a

132
00:05:27,180 --> 00:05:28,259
daily basis

133
00:05:28,259 --> 00:05:30,900
and at the same time there are more than

134
00:05:30,900 --> 00:05:33,300
700 kubernetes clusters running more

135
00:05:33,300 --> 00:05:35,460
than 100 000 ports

136
00:05:35,460 --> 00:05:38,100
and that is still now the whole picture

137
00:05:38,100 --> 00:05:40,919
of Jaco's software suspension there are

138
00:05:40,919 --> 00:05:42,960
still a lot of other kinds of artifacts

139
00:05:42,960 --> 00:05:44,759
not being deployed to the kubernetes

140
00:05:44,759 --> 00:05:47,039
Clusters like to the on-prem virtual

141
00:05:47,039 --> 00:05:51,000
machines so Yahoo suffers a bench and

142
00:05:51,000 --> 00:05:53,880
scale is large not only in the direct

143
00:05:53,880 --> 00:05:56,280
quantity but also in terms of

144
00:05:56,280 --> 00:05:58,139
tuning choices

145
00:05:58,139 --> 00:06:00,539
within Yahoo we have different teams

146
00:06:00,539 --> 00:06:02,400
with different requirements and needs

147
00:06:02,400 --> 00:06:04,860
and each team may have their own path to

148
00:06:04,860 --> 00:06:06,660
deliver their software

149
00:06:06,660 --> 00:06:09,600
so this diagram lists some of the major

150
00:06:09,600 --> 00:06:12,360
tools we are using on Yahoo from source

151
00:06:12,360 --> 00:06:14,340
code management tools build systems

152
00:06:14,340 --> 00:06:16,800
artifact stores and finally the

153
00:06:16,800 --> 00:06:18,780
deployment environment

154
00:06:18,780 --> 00:06:21,360
the variety of tools makes securing

155
00:06:21,360 --> 00:06:25,380
software suspension of Yahoo challenging

156
00:06:25,380 --> 00:06:28,259
so we must simplify the problem at hand

157
00:06:28,259 --> 00:06:30,720
when we first started our journey we

158
00:06:30,720 --> 00:06:33,720
decided to Pilot the security measures

159
00:06:33,720 --> 00:06:37,380
and produce real value in a certain

160
00:06:37,380 --> 00:06:40,560
software suspension has we choose the

161
00:06:40,560 --> 00:06:43,740
cloud native path that is a GitHub

162
00:06:43,740 --> 00:06:45,539
Enterprise a source called measurement

163
00:06:45,539 --> 00:06:48,380
tool screwdriver as a build pipeline

164
00:06:48,380 --> 00:06:51,660
internal site registry as artifact store

165
00:06:51,660 --> 00:06:54,960
and finally kubernetes as a deployment

166
00:06:54,960 --> 00:06:56,460
environment

167
00:06:56,460 --> 00:06:58,740
for those who are not aware a

168
00:06:58,740 --> 00:07:02,039
screwdriver is a sales lady platform

169
00:07:02,039 --> 00:07:05,220
build an open source at Yahoo you can

170
00:07:05,220 --> 00:07:08,160
also find this product on the cncf cloud

171
00:07:08,160 --> 00:07:10,979
native landscape website and it is also

172
00:07:10,979 --> 00:07:14,659
widely used internally at Yahoo

173
00:07:14,759 --> 00:07:17,460
okay so as we all know software's

174
00:07:17,460 --> 00:07:19,740
pension security has a lot of aspects

175
00:07:19,740 --> 00:07:23,699
even if we have only one path there are

176
00:07:23,699 --> 00:07:26,220
still a lot of security controls and the

177
00:07:26,220 --> 00:07:28,199
best practice to follow

178
00:07:28,199 --> 00:07:30,720
uh but luckily we do not need to start

179
00:07:30,720 --> 00:07:33,060
from scratch because we have already had

180
00:07:33,060 --> 00:07:35,340
some fundamental security controls in

181
00:07:35,340 --> 00:07:38,220
place like static code scanning Ripple

182
00:07:38,220 --> 00:07:40,440
Branch production to progress reverse

183
00:07:40,440 --> 00:07:43,099
and so on

184
00:07:43,259 --> 00:07:46,199
so after evaluating the existing

185
00:07:46,199 --> 00:07:49,199
security controls and open source

186
00:07:49,199 --> 00:07:51,539
standards we realized there were three

187
00:07:51,539 --> 00:07:52,979
major gaps

188
00:07:52,979 --> 00:07:55,800
firstly even if we have static code

189
00:07:55,800 --> 00:07:57,780
scanning to check the proprietary code

190
00:07:57,780 --> 00:08:00,180
we are not able to detect the

191
00:08:00,180 --> 00:08:02,039
vulnerabilities or open source

192
00:08:02,039 --> 00:08:03,900
dependencies

193
00:08:03,900 --> 00:08:06,300
so we decided to introduce software

194
00:08:06,300 --> 00:08:09,000
conversation analysis essay to fill this

195
00:08:09,000 --> 00:08:10,380
Gap

196
00:08:10,380 --> 00:08:13,080
in addition we are not able to check the

197
00:08:13,080 --> 00:08:15,599
software and block the deployment after

198
00:08:15,599 --> 00:08:18,599
the code is released from the Repository

199
00:08:18,599 --> 00:08:21,919
so to fill this Gap we decided to

200
00:08:21,919 --> 00:08:24,780
add two checkpoints in our software

201
00:08:24,780 --> 00:08:27,479
development lifecycle while in the build

202
00:08:27,479 --> 00:08:30,599
stage another in the deployment stage

203
00:08:30,599 --> 00:08:33,419
we will work you through for this Recaps

204
00:08:33,419 --> 00:08:36,958
what did we do in the following slides

205
00:08:36,958 --> 00:08:39,779
uh first software conversation analysis

206
00:08:39,779 --> 00:08:41,880
also known as essay

207
00:08:41,880 --> 00:08:44,219
as Hannah said earlier

208
00:08:44,219 --> 00:08:47,399
most of most of our application consists

209
00:08:47,399 --> 00:08:49,380
of code we didn't write

210
00:08:49,380 --> 00:08:51,720
traditional code scanning will just look

211
00:08:51,720 --> 00:08:53,880
at the flow and logic of your

212
00:08:53,880 --> 00:08:57,180
proprietary code and reports if there is

213
00:08:57,180 --> 00:08:59,820
any potential vulnerabilities it will

214
00:08:59,820 --> 00:09:02,279
not look how the open source

215
00:09:02,279 --> 00:09:04,080
dependencies

216
00:09:04,080 --> 00:09:06,660
so that's why we need a several

217
00:09:06,660 --> 00:09:08,700
conversation analysis to fill this Gap

218
00:09:08,700 --> 00:09:12,959
because those tools can those tools will

219
00:09:12,959 --> 00:09:14,880
only focus on the Open Source

220
00:09:14,880 --> 00:09:18,360
dependencies on their basic check

221
00:09:18,360 --> 00:09:21,000
they can identify the women's Source

222
00:09:21,000 --> 00:09:23,160
dependencies package names and address

223
00:09:23,160 --> 00:09:25,920
check against the vulnerability database

224
00:09:25,920 --> 00:09:28,399
and finally report

225
00:09:28,399 --> 00:09:31,980
if they find any issue they could also

226
00:09:31,980 --> 00:09:35,700
probably raise per requests to bump up

227
00:09:35,700 --> 00:09:37,380
the version of your open source

228
00:09:37,380 --> 00:09:39,720
dependencies which will in most cases

229
00:09:39,720 --> 00:09:42,120
can feel fix the potential

230
00:09:42,120 --> 00:09:43,760
vulnerabilities

231
00:09:43,760 --> 00:09:48,360
so by applying essay tools we make the

232
00:09:48,360 --> 00:09:51,680
progress of detecting and remediating

233
00:09:51,680 --> 00:09:54,420
vulnerabilities or application code much

234
00:09:54,420 --> 00:09:56,719
easier

235
00:09:56,760 --> 00:10:00,240
uh however the images that will be

236
00:10:00,240 --> 00:10:02,940
deployed to the kubernetes Clusters will

237
00:10:02,940 --> 00:10:06,420
always have components other than the

238
00:10:06,420 --> 00:10:08,220
application binaries

239
00:10:08,220 --> 00:10:11,640
like base operating system and any other

240
00:10:11,640 --> 00:10:13,980
package you could add

241
00:10:13,980 --> 00:10:16,019
so having a

242
00:10:16,019 --> 00:10:18,360
build-time vulnerability assessment to

243
00:10:18,360 --> 00:10:20,940
hand to scan the whole image is very

244
00:10:20,940 --> 00:10:24,720
necessary because it can not only catch

245
00:10:24,720 --> 00:10:26,700
the vulnerability not solved in your

246
00:10:26,700 --> 00:10:30,600
application code allows you the uh

247
00:10:30,600 --> 00:10:33,660
issues in those actual components that

248
00:10:33,660 --> 00:10:36,839
are integrated during the build time

249
00:10:36,839 --> 00:10:39,660
in practice we use saved and drive to

250
00:10:39,660 --> 00:10:42,240
generate s-bomb and vulnerability data

251
00:10:42,240 --> 00:10:45,240
to do the assessment we also provide an

252
00:10:45,240 --> 00:10:49,260
option to block a specific pipelines if

253
00:10:49,260 --> 00:10:52,140
we found any severe vulnerability so in

254
00:10:52,140 --> 00:10:54,480
the next time if another log4j crisis

255
00:10:54,480 --> 00:10:58,620
occurs we can take actions and prevent

256
00:10:58,620 --> 00:11:00,959
those vulnerable images from being

257
00:11:00,959 --> 00:11:04,279
published to our registry

258
00:11:04,380 --> 00:11:08,399
okay so uh after we have some Garage in

259
00:11:08,399 --> 00:11:10,740
place in both vertical management tools

260
00:11:10,740 --> 00:11:14,399
and be also some we would like to check

261
00:11:14,399 --> 00:11:17,160
all the images that will be deployed to

262
00:11:17,160 --> 00:11:20,540
our kubernetes clusters

263
00:11:20,760 --> 00:11:23,279
uh so there are there are a lot of use

264
00:11:23,279 --> 00:11:26,579
cases for example uh if an image is not

265
00:11:26,579 --> 00:11:29,420
signed or it is from an untrusted

266
00:11:29,420 --> 00:11:32,220
registry or it still contains any

267
00:11:32,220 --> 00:11:35,339
unsolved vulnerabilities we can block it

268
00:11:35,339 --> 00:11:38,399
or at least inform the inform Engineers

269
00:11:38,399 --> 00:11:40,740
for those violations

270
00:11:40,740 --> 00:11:42,660
to achieve the deployment time

271
00:11:42,660 --> 00:11:45,360
verification we utilize a dynamic

272
00:11:45,360 --> 00:11:47,459
animation control in kubernetes

273
00:11:47,459 --> 00:11:52,740
it allows us to implement HTTP workbook

274
00:11:52,740 --> 00:11:55,560
that can receive admission requests

275
00:11:55,560 --> 00:11:57,720
check against predefined policies and

276
00:11:57,720 --> 00:12:00,060
finally decide whether or not to develop

277
00:12:00,060 --> 00:12:02,640
deploy a resource

278
00:12:02,640 --> 00:12:05,700
and in practice we use both Yahoo

279
00:12:05,700 --> 00:12:09,600
proprietary webhook and Kevin to achieve

280
00:12:09,600 --> 00:12:10,800
our goal

281
00:12:10,800 --> 00:12:13,440
so let's talk about some of the tracks

282
00:12:13,440 --> 00:12:16,980
video during the deployment time

283
00:12:16,980 --> 00:12:19,800
first one is ensuring prominence of

284
00:12:19,800 --> 00:12:21,899
images exists

285
00:12:21,899 --> 00:12:24,540
provenance is a bunch of records that

286
00:12:24,540 --> 00:12:27,120
tell you various this image comes from

287
00:12:27,120 --> 00:12:30,060
it can include information like who

288
00:12:30,060 --> 00:12:32,940
commits the code which Ripple and branch

289
00:12:32,940 --> 00:12:35,339
is this image originally from build

290
00:12:35,339 --> 00:12:37,800
information and so on

291
00:12:37,800 --> 00:12:41,040
we collect our prominence data from

292
00:12:41,040 --> 00:12:43,320
GitHub screwdriver and registry

293
00:12:43,320 --> 00:12:46,500
basically covers all three major steps

294
00:12:46,500 --> 00:12:48,899
or software suspension

295
00:12:48,899 --> 00:12:51,839
and those data are stored in the you

296
00:12:51,839 --> 00:12:53,459
know provenance database

297
00:12:53,459 --> 00:12:57,120
and this provenance store is based on

298
00:12:57,120 --> 00:13:00,060
Graphics which is an open source project

299
00:13:00,060 --> 00:13:03,180
that standardized provenance format

300
00:13:03,180 --> 00:13:06,959
along with API and back-end solution

301
00:13:06,959 --> 00:13:10,740
so here's a demo for showing you how

302
00:13:10,740 --> 00:13:13,860
permanent staff can secure you from some

303
00:13:13,860 --> 00:13:16,459
attacks

304
00:13:21,120 --> 00:13:24,720
okay in this demo we will deploy we will

305
00:13:24,720 --> 00:13:26,940
deploy three images the first one does

306
00:13:26,940 --> 00:13:29,579
not have problems the second one has a

307
00:13:29,579 --> 00:13:32,040
complete pronouns but it is problematic

308
00:13:32,040 --> 00:13:35,279
the third one has a complete opponence

309
00:13:35,279 --> 00:13:39,420
we designed the three policies to verify

310
00:13:39,420 --> 00:13:41,700
these three image deployments

311
00:13:41,700 --> 00:13:44,339
correspondingly and the first two images

312
00:13:44,339 --> 00:13:48,000
are the malicious cases and service a

313
00:13:48,000 --> 00:13:51,779
positive case a good case

314
00:13:51,779 --> 00:13:54,660
so this is the first one

315
00:13:54,660 --> 00:13:58,800
this image is uploaded directly by

316
00:13:58,800 --> 00:14:01,440
attacker to the registry without passing

317
00:14:01,440 --> 00:14:04,680
through the expected cell CD pipeline so

318
00:14:04,680 --> 00:14:07,440
in this case our web hook cannot get any

319
00:14:07,440 --> 00:14:11,579
problems data from our database

320
00:14:11,579 --> 00:14:15,739
so it will reject the deployment

321
00:14:17,060 --> 00:14:21,180
yeah this is a enormous set you can see

322
00:14:21,180 --> 00:14:24,360
there's no resource repo or build job

323
00:14:24,360 --> 00:14:27,800
information phone

324
00:14:29,880 --> 00:14:33,360
and the second image this image is build

325
00:14:33,360 --> 00:14:36,360
and uploaded from a forked repo with

326
00:14:36,360 --> 00:14:39,540
malicious changes in this case even if

327
00:14:39,540 --> 00:14:42,839
this image has a complete problems but

328
00:14:42,839 --> 00:14:44,880
it will show this image is already

329
00:14:44,880 --> 00:14:47,000
originally from

330
00:14:47,000 --> 00:14:50,760
forked rival another transl

331
00:14:50,760 --> 00:14:53,820
so our workbook will still reject this

332
00:14:53,820 --> 00:14:58,279
because based on our policy

333
00:14:58,680 --> 00:15:01,440
as you can see in the

334
00:15:01,440 --> 00:15:04,620
error message it says Source Ripple

335
00:15:04,620 --> 00:15:06,300
mismatch

336
00:15:06,300 --> 00:15:09,540
we find it is from a first repo but

337
00:15:09,540 --> 00:15:10,800
actually

338
00:15:10,800 --> 00:15:12,120
uh

339
00:15:12,120 --> 00:15:15,420
we expected to hear from a trusted

340
00:15:15,420 --> 00:15:17,899
Ripple

341
00:15:19,620 --> 00:15:22,380
okay lastly this image is

342
00:15:22,380 --> 00:15:25,980
built from a valley source and pipeline

343
00:15:25,980 --> 00:15:29,880
finally located in a trusted registry in

344
00:15:29,880 --> 00:15:31,620
this case this image has a complete

345
00:15:31,620 --> 00:15:33,060
provenance and the provenance

346
00:15:33,060 --> 00:15:35,820
information has no problem so our

347
00:15:35,820 --> 00:15:40,040
Macbook will allow the deployment

348
00:15:43,260 --> 00:15:46,740
okay this is the end of this demo and

349
00:15:46,740 --> 00:15:49,680
second check is the image signature

350
00:15:49,680 --> 00:15:53,220
we want to make sure all images have

351
00:15:53,220 --> 00:15:56,160
been deployed to kubernetes clusters are

352
00:15:56,160 --> 00:15:58,680
signed during the in the in the build

353
00:15:58,680 --> 00:16:02,040
system because it can help us verify the

354
00:16:02,040 --> 00:16:05,100
integral integrity and publisher of the

355
00:16:05,100 --> 00:16:07,079
images

356
00:16:07,079 --> 00:16:10,620
Yahoo currently uses a self-managed

357
00:16:10,620 --> 00:16:12,959
long-lived keys to sign the image

358
00:16:12,959 --> 00:16:14,279
certain images

359
00:16:14,279 --> 00:16:16,320
and this signing file has been

360
00:16:16,320 --> 00:16:18,959
integrated to most of our standard

361
00:16:18,959 --> 00:16:23,120
templates that builds and publish images

362
00:16:23,120 --> 00:16:25,920
signing mechanism has been existing for

363
00:16:25,920 --> 00:16:28,680
a long time but there was no enforcement

364
00:16:28,680 --> 00:16:31,399
to verify the signature before

365
00:16:31,399 --> 00:16:34,620
deployment so this chat can also fill

366
00:16:34,620 --> 00:16:36,139
this Gap

367
00:16:36,139 --> 00:16:40,220
here is a demo for this

368
00:16:43,740 --> 00:16:46,560
firstly because the signal check is

369
00:16:46,560 --> 00:16:50,339
directly integrated to the web hook so

370
00:16:50,339 --> 00:16:52,920
there's no policy shown as a previous

371
00:16:52,920 --> 00:16:55,579
demo

372
00:16:56,279 --> 00:16:59,399
in this signal check demo we will deploy

373
00:16:59,399 --> 00:17:01,019
two images

374
00:17:01,019 --> 00:17:03,899
the first one is no sign in the build

375
00:17:03,899 --> 00:17:07,619
pipeline so our webhole cannot find a

376
00:17:07,619 --> 00:17:10,400
signature attached to this image in our

377
00:17:10,400 --> 00:17:13,079
signature database

378
00:17:13,079 --> 00:17:17,240
so it will reject it

379
00:17:23,280 --> 00:17:26,220
and the second image

380
00:17:26,220 --> 00:17:30,480
was signed in the field system

381
00:17:30,480 --> 00:17:32,880
so our web hook will allow the

382
00:17:32,880 --> 00:17:35,419
deployment

383
00:17:38,580 --> 00:17:41,520
okay so here comes the third image first

384
00:17:41,520 --> 00:17:43,440
image first and check

385
00:17:43,440 --> 00:17:46,700
the motivation behind this check is to

386
00:17:46,700 --> 00:17:49,500
encourage people to upgrade their image

387
00:17:49,500 --> 00:17:52,080
regularly because an older image will

388
00:17:52,080 --> 00:17:54,900
usually have more vulnerabilities

389
00:17:54,900 --> 00:17:59,100
and if you didn't update your image for

390
00:17:59,100 --> 00:18:00,600
for a long time

391
00:18:00,600 --> 00:18:02,820
by the time you have to make the

392
00:18:02,820 --> 00:18:05,240
security fix you may find the

393
00:18:05,240 --> 00:18:08,520
patch data is to heal genius very

394
00:18:08,520 --> 00:18:11,660
difficult and risky to make the change

395
00:18:11,660 --> 00:18:15,900
lastly by regularly updating your image

396
00:18:15,900 --> 00:18:18,240
you have to trigger your build pipeline

397
00:18:18,240 --> 00:18:21,539
so by doing so you can notice your build

398
00:18:21,539 --> 00:18:24,240
pipeline issue in time

399
00:18:24,240 --> 00:18:27,059
to achieve the image first name check we

400
00:18:27,059 --> 00:18:30,500
utilize the camera and Camera policies

401
00:18:30,500 --> 00:18:34,559
here's a another demo for the first news

402
00:18:34,559 --> 00:18:36,860
track

403
00:18:40,559 --> 00:18:44,820
firstly this is a cavern or policy for

404
00:18:44,820 --> 00:18:48,620
this track you can see it is it's just a

405
00:18:48,620 --> 00:18:51,480
block any image builds more than six

406
00:18:51,480 --> 00:18:53,160
months ago

407
00:18:53,160 --> 00:18:55,440
you can also find this policy on the

408
00:18:55,440 --> 00:18:59,240
keyboard no official website

409
00:19:01,320 --> 00:19:04,559
okay in this the demo will also deploy

410
00:19:04,559 --> 00:19:07,980
two images the first one is build about

411
00:19:07,980 --> 00:19:12,840
a year ago so it is too still

412
00:19:12,840 --> 00:19:18,059
in this case uh caverno will reject it

413
00:19:18,059 --> 00:19:20,340
simply because it feels more than six

414
00:19:20,340 --> 00:19:22,879
months ago

415
00:19:23,160 --> 00:19:25,940
and

416
00:19:25,980 --> 00:19:31,160
the other images built within a month

417
00:19:31,440 --> 00:19:36,080
so Kevin will allow it

418
00:19:38,400 --> 00:19:40,500
Okay so

419
00:19:40,500 --> 00:19:43,320
the checks will be worth showing you uh

420
00:19:43,320 --> 00:19:46,679
in the deployment time or in the units

421
00:19:46,679 --> 00:19:50,160
build time are by no means expected to

422
00:19:50,160 --> 00:19:52,020
be the full story

423
00:19:52,020 --> 00:19:54,900
we could choose to evaluate nearly

424
00:19:54,900 --> 00:19:59,220
arbitrary policies with necessary data

425
00:19:59,220 --> 00:20:01,620
so for example if we want to achieve

426
00:20:01,620 --> 00:20:03,120
vulnerability check during the

427
00:20:03,120 --> 00:20:05,340
deployment time

428
00:20:05,340 --> 00:20:07,080
um we are actually interesting

429
00:20:07,080 --> 00:20:09,840
vulnerability data to our Graphics

430
00:20:09,840 --> 00:20:13,200
database so that our web hook can fetch

431
00:20:13,200 --> 00:20:15,660
and validate vulnerability data along

432
00:20:15,660 --> 00:20:20,460
this provenance data and for this the

433
00:20:20,460 --> 00:20:24,500
next two checks they can all be uh

434
00:20:24,500 --> 00:20:27,600
achieved by applying a single criminal

435
00:20:27,600 --> 00:20:30,139
policy

436
00:20:30,419 --> 00:20:33,780
okay so here's the end for the details

437
00:20:33,780 --> 00:20:36,299
and demos now my colleague ml will

438
00:20:36,299 --> 00:20:38,940
summarize our work so far

439
00:20:38,940 --> 00:20:41,880
thanks younger so just a brief summary

440
00:20:41,880 --> 00:20:45,299
on what tools we have been using and uh

441
00:20:45,299 --> 00:20:47,820
the timeline on how we reach there we

442
00:20:47,820 --> 00:20:50,299
started our journey by around mid-2020

443
00:20:50,299 --> 00:20:53,220
when we started our journey not a lot of

444
00:20:53,220 --> 00:20:55,620
Open Source tools and solutions were

445
00:20:55,620 --> 00:20:58,440
available so we built a lot of In-House

446
00:20:58,440 --> 00:21:01,919
tooling and also used graphius as the

447
00:21:01,919 --> 00:21:03,260
provenance store

448
00:21:03,260 --> 00:21:08,460
by by early mid 2021 we were able to

449
00:21:08,460 --> 00:21:10,260
collect most of the source provenance

450
00:21:10,260 --> 00:21:12,720
and around 10 percent of the built

451
00:21:12,720 --> 00:21:15,360
Providence were through our build

452
00:21:15,360 --> 00:21:19,320
pipelines later 2021 we open source

453
00:21:19,320 --> 00:21:22,260
graphius RDS which adds supports to

454
00:21:22,260 --> 00:21:24,840
postgres database with graphius

455
00:21:24,840 --> 00:21:29,400
ah early 2022 six store had emerged as a

456
00:21:29,400 --> 00:21:31,980
really promising uh solution for both

457
00:21:31,980 --> 00:21:35,820
signing container images and also a

458
00:21:35,820 --> 00:21:38,580
testing software so we started exploring

459
00:21:38,580 --> 00:21:40,260
that internally

460
00:21:40,260 --> 00:21:42,780
for some of our build pipelines and

461
00:21:42,780 --> 00:21:45,360
while doing that we were also working on

462
00:21:45,360 --> 00:21:48,000
adding deployment checks which jung-ho

463
00:21:48,000 --> 00:21:50,820
showed earlier so we use both kivarno

464
00:21:50,820 --> 00:21:54,900
and Yahoo's proprietary policy checks

465
00:21:54,900 --> 00:21:57,480
later that year and beginning this year

466
00:21:57,480 --> 00:22:00,960
we've Incorporated some of the cosine

467
00:22:00,960 --> 00:22:02,880
functionality to our existing build

468
00:22:02,880 --> 00:22:06,360
pipelines and are also working on guac

469
00:22:06,360 --> 00:22:09,299
for visualizing the s-bomb data which is

470
00:22:09,299 --> 00:22:13,320
generated by sift and gripe

471
00:22:13,320 --> 00:22:15,659
so what did we learn from our journey so

472
00:22:15,659 --> 00:22:17,480
far

473
00:22:17,480 --> 00:22:19,919
given the hybrid environment at Yahoo

474
00:22:19,919 --> 00:22:22,260
with different teams learn working on

475
00:22:22,260 --> 00:22:24,419
different projects and different tools

476
00:22:24,419 --> 00:22:26,580
we faced quite a few interesting

477
00:22:26,580 --> 00:22:28,980
challenges and few lessons were learned

478
00:22:28,980 --> 00:22:31,200
during our journey as well

479
00:22:31,200 --> 00:22:34,500
the first one is enhancing existing

480
00:22:34,500 --> 00:22:36,780
developer workflows automatically

481
00:22:36,780 --> 00:22:39,299
if the tool being built can do its job

482
00:22:39,299 --> 00:22:42,419
behind the scenes or if it's it can be

483
00:22:42,419 --> 00:22:44,460
integrated with the tools itself

484
00:22:44,460 --> 00:22:47,520
it reduces the onboarding and learning

485
00:22:47,520 --> 00:22:50,580
efforts by developers and by doing that

486
00:22:50,580 --> 00:22:53,039
we reduce the friction between the

487
00:22:53,039 --> 00:22:55,020
security team and the development team

488
00:22:55,020 --> 00:22:57,720
because they don't need to update their

489
00:22:57,720 --> 00:22:59,640
projects on a regular basis and this can

490
00:22:59,640 --> 00:23:01,919
be done behind the scenes this also

491
00:23:01,919 --> 00:23:05,340
helps us in reducing the time we go to

492
00:23:05,340 --> 00:23:07,380
market or we go to actually the

493
00:23:07,380 --> 00:23:08,700
deployment time

494
00:23:08,700 --> 00:23:11,820
ah an example to Showcase this lesson is

495
00:23:11,820 --> 00:23:13,919
when we started collecting the

496
00:23:13,919 --> 00:23:16,799
provenance uh as mentioned earlier we we

497
00:23:16,799 --> 00:23:20,640
use graphia so we integrated uh Source

498
00:23:20,640 --> 00:23:23,100
metadata collection as part of GitHub

499
00:23:23,100 --> 00:23:25,679
web books and for getting the build

500
00:23:25,679 --> 00:23:29,280
metadata we integrated it with the built

501
00:23:29,280 --> 00:23:31,380
a down step so any build which runs in

502
00:23:31,380 --> 00:23:34,080
Yahoo was able to send the provenance to

503
00:23:34,080 --> 00:23:36,960
the graphia store that way it gave us

504
00:23:36,960 --> 00:23:40,140
around 70 to 80 percent of provenance uh

505
00:23:40,140 --> 00:23:41,700
the remaining 20 is because they don't

506
00:23:41,700 --> 00:23:44,000
use the standard tooling

507
00:23:44,000 --> 00:23:47,100
and the same when we tried to do for

508
00:23:47,100 --> 00:23:50,039
admission web hook uh the problem is lot

509
00:23:50,039 --> 00:23:52,200
of the individual teams and owners have

510
00:23:52,200 --> 00:23:54,900
their own clusters running and in order

511
00:23:54,900 --> 00:23:57,240
to add the webhook to their clusters we

512
00:23:57,240 --> 00:24:00,299
had to work with individual teams that

513
00:24:00,299 --> 00:24:02,220
that took a lot of time because the

514
00:24:02,220 --> 00:24:04,620
priorities were different and eventually

515
00:24:04,620 --> 00:24:06,480
it took us around six months to make the

516
00:24:06,480 --> 00:24:08,280
webhook as default

517
00:24:08,280 --> 00:24:11,100
so that brings me to my next Point uh

518
00:24:11,100 --> 00:24:13,020
that is and one of the most important

519
00:24:13,020 --> 00:24:15,960
lessons we've learned is around adoption

520
00:24:15,960 --> 00:24:18,659
uh and Adoption of tools and services

521
00:24:18,659 --> 00:24:21,000
like the admission web hook across the

522
00:24:21,000 --> 00:24:21,840
company

523
00:24:21,840 --> 00:24:24,659
if even if there is a small portion of

524
00:24:24,659 --> 00:24:27,140
the company which is not onboarded to

525
00:24:27,140 --> 00:24:29,820
using these tools we may still be

526
00:24:29,820 --> 00:24:31,440
susceptible to software supply chain

527
00:24:31,440 --> 00:24:34,200
attacks so we need to ensure that

528
00:24:34,200 --> 00:24:37,140
everyone in the T company uses or gets

529
00:24:37,140 --> 00:24:39,780
onboarded to the admission webhook

530
00:24:39,780 --> 00:24:43,140
and example for this being we made the

531
00:24:43,140 --> 00:24:45,720
webhook as default for all eks

532
00:24:45,720 --> 00:24:48,299
deployments uh but there were some other

533
00:24:48,299 --> 00:24:50,520
teams which were using non-standard

534
00:24:50,520 --> 00:24:55,020
tools or different deployments so for in

535
00:24:55,020 --> 00:24:57,120
order for them to be onboarded we had to

536
00:24:57,120 --> 00:24:59,700
either create a Helm chart so that they

537
00:24:59,700 --> 00:25:02,039
can install it manually or we needed to

538
00:25:02,039 --> 00:25:03,780
get behind them to make sure they can

539
00:25:03,780 --> 00:25:06,419
actually adopt it so it's still a

540
00:25:06,419 --> 00:25:07,799
challenge and we are still working on

541
00:25:07,799 --> 00:25:09,240
increasing the adoption within the

542
00:25:09,240 --> 00:25:11,419
company

543
00:25:12,539 --> 00:25:15,659
a follow-up to that is follow up to the

544
00:25:15,659 --> 00:25:18,780
pre-planning is ensuring that there is

545
00:25:18,780 --> 00:25:20,960
enough visibility of the project

546
00:25:20,960 --> 00:25:23,580
if we need to convey the business value

547
00:25:23,580 --> 00:25:27,000
to the execs periodic status of update

548
00:25:27,000 --> 00:25:29,039
of the project to the stakeholders is

549
00:25:29,039 --> 00:25:31,799
important and along with selling the

550
00:25:31,799 --> 00:25:34,020
overall mission we also need to

551
00:25:34,020 --> 00:25:36,240
demonstrate the incremental value of the

552
00:25:36,240 --> 00:25:38,340
project

553
00:25:38,340 --> 00:25:41,159
the next one and an important one is

554
00:25:41,159 --> 00:25:43,559
embracing open source Technologies

555
00:25:43,559 --> 00:25:47,039
a lot of the solutions or tools which we

556
00:25:47,039 --> 00:25:50,039
use for software supply chain security

557
00:25:50,039 --> 00:25:52,620
are already available as part of Open

558
00:25:52,620 --> 00:25:55,320
Source tools so embracing open source

559
00:25:55,320 --> 00:25:58,140
source Technologies is quite important

560
00:25:58,140 --> 00:26:01,080
uh we we should engage with the open

561
00:26:01,080 --> 00:26:03,720
source community and also try to make

562
00:26:03,720 --> 00:26:06,720
meaningful contributions that increases

563
00:26:06,720 --> 00:26:08,820
the expertise in that and also gives

564
00:26:08,820 --> 00:26:10,679
back to the community

565
00:26:10,679 --> 00:26:14,100
and the last one is around continuous

566
00:26:14,100 --> 00:26:16,380
feedback so performing continuous

567
00:26:16,380 --> 00:26:18,419
testing on your solution and getting

568
00:26:18,419 --> 00:26:21,659
periodic feedback from stakeholders is

569
00:26:21,659 --> 00:26:24,240
important ensuring the requirements and

570
00:26:24,240 --> 00:26:26,880
use cases are covered is important to

571
00:26:26,880 --> 00:26:29,880
the success of the project

572
00:26:29,880 --> 00:26:33,000
yeah the this project has truly been a

573
00:26:33,000 --> 00:26:35,880
team effort and there are few folks uh

574
00:26:35,880 --> 00:26:37,980
for we would like to thank just for the

575
00:26:37,980 --> 00:26:41,230
guidance and yeah thank you

576
00:26:41,230 --> 00:26:44,460
[Applause]

577
00:26:47,220 --> 00:26:49,700
questions

578
00:26:49,980 --> 00:26:52,460
good

579
00:27:01,260 --> 00:27:03,559
sure so

580
00:27:03,559 --> 00:27:06,539
ah oppa is a great tool and it's quite

581
00:27:06,539 --> 00:27:08,880
powerful so when we started our journey

582
00:27:08,880 --> 00:27:12,659
we we started working with oppa but as

583
00:27:12,659 --> 00:27:15,900
we proceeded we we realized that uh oppa

584
00:27:15,900 --> 00:27:18,000
is so powerful and the needs what we

585
00:27:18,000 --> 00:27:21,960
have is not as uh granular which oppa

586
00:27:21,960 --> 00:27:26,760
offers and also uh it as learning a new

587
00:27:26,760 --> 00:27:28,860
language since oppa needs to have some

588
00:27:28,860 --> 00:27:31,679
expertise for learning the language uh

589
00:27:31,679 --> 00:27:33,840
it wasn't easy to adopt and add more

590
00:27:33,840 --> 00:27:36,840
policies uh because at the end of the

591
00:27:36,840 --> 00:27:39,539
day it's not just the security folks who

592
00:27:39,539 --> 00:27:41,520
would be adding the policies but we

593
00:27:41,520 --> 00:27:43,799
wanted to make it such that any admin

594
00:27:43,799 --> 00:27:46,140
could add more policies to their own

595
00:27:46,140 --> 00:27:47,220
clusters

596
00:27:47,220 --> 00:27:50,100
so by using our in-house and keyword

597
00:27:50,100 --> 00:27:53,700
policies it it's quite intuitive and

598
00:27:53,700 --> 00:27:57,600
self easy to learn but in the future we

599
00:27:57,600 --> 00:28:00,000
may revisit Opa if if we think that's

600
00:28:00,000 --> 00:28:02,600
the need but

601
00:28:20,340 --> 00:28:24,059
yeah for permanence check as I show in

602
00:28:24,059 --> 00:28:27,000
the in the demo so there are basically

603
00:28:27,000 --> 00:28:30,480
three uh Nursery maybe about several

604
00:28:30,480 --> 00:28:35,340
checks so we can check the uh Source

605
00:28:35,340 --> 00:28:38,580
repo information and build pipeline

606
00:28:38,580 --> 00:28:41,940
information and kind of what what uh

607
00:28:41,940 --> 00:28:45,059
what registry is it from

608
00:28:45,059 --> 00:28:48,840
and actually for the performance but not

609
00:28:48,840 --> 00:28:52,320
from products but during the

610
00:28:52,320 --> 00:28:55,159
um there's other kinds of

611
00:28:55,159 --> 00:28:57,720
the data storage in the graphics

612
00:28:57,720 --> 00:29:00,960
database is a vulnerability data so we

613
00:29:00,960 --> 00:29:03,419
can just fetch one ability data along

614
00:29:03,419 --> 00:29:05,700
with the prominence data it is no

615
00:29:05,700 --> 00:29:08,279
problem but we can check with problems

616
00:29:08,279 --> 00:29:11,520
we can sell some policies that we want

617
00:29:11,520 --> 00:29:14,820
to block a certain vulnerability like a

618
00:29:14,820 --> 00:29:18,419
severe survey so actually basically

619
00:29:18,419 --> 00:29:21,960
there are four kind of checks for a

620
00:29:21,960 --> 00:29:24,480
provenance part

621
00:29:24,480 --> 00:29:27,419
yeah deployment time check on three

622
00:29:27,419 --> 00:29:30,919
proponents were for vulnerability

623
00:29:47,340 --> 00:29:50,460
so I can take that so internally we do

624
00:29:50,460 --> 00:29:52,799
mirroring of most of the open source

625
00:29:52,799 --> 00:29:57,059
packages and repos so we eventually so

626
00:29:57,059 --> 00:29:58,440
obviously it doesn't go through our

627
00:29:58,440 --> 00:29:59,880
build pipelines because those are open

628
00:29:59,880 --> 00:30:02,460
source so we won't have provenance for

629
00:30:02,460 --> 00:30:06,000
those builds but for artifacts and

630
00:30:06,000 --> 00:30:08,460
making sure those are internally signed

631
00:30:08,460 --> 00:30:10,440
that's what we will make sure we do it

632
00:30:10,440 --> 00:30:13,700
as part of provenance check

633
00:30:13,980 --> 00:30:16,260
okay can you speak to the amount of

634
00:30:16,260 --> 00:30:18,480
effort it took to do this like how big

635
00:30:18,480 --> 00:30:21,059
is the team that implemented this

636
00:30:21,059 --> 00:30:25,919
yeah that's a good question so uh it's

637
00:30:25,919 --> 00:30:27,600
always a challenge to get a lot of folks

638
00:30:27,600 --> 00:30:29,899
working on things like this because it's

639
00:30:29,899 --> 00:30:32,760
unless you are attacked there's not a

640
00:30:32,760 --> 00:30:35,179
lot of value you can prove to the execs

641
00:30:35,179 --> 00:30:38,159
so I would say around four to five

642
00:30:38,159 --> 00:30:42,419
people uh working on this and this not a

643
00:30:42,419 --> 00:30:44,399
full time or that's not the only project

644
00:30:44,399 --> 00:30:47,760
they work on so it varies and I would

645
00:30:47,760 --> 00:30:49,679
say around 60 percent is worked on this

646
00:30:49,679 --> 00:30:53,640
project over the past three years or so

647
00:30:53,640 --> 00:30:56,220
part of Yahoo is that is that like

648
00:30:56,220 --> 00:30:59,940
people 60 of somebody who spoke to them

649
00:30:59,940 --> 00:31:03,360
pictures or platform engineer

650
00:31:03,360 --> 00:31:06,539
ing so we are the paranoid security team

651
00:31:06,539 --> 00:31:09,240
so within that we are the engineering uh

652
00:31:09,240 --> 00:31:12,600
pillar so we work primarily on building

653
00:31:12,600 --> 00:31:16,799
security and devsecops tools to uh make

654
00:31:16,799 --> 00:31:19,200
sure the infrastructure is set up so out

655
00:31:19,200 --> 00:31:21,179
of that around four to five of us work

656
00:31:21,179 --> 00:31:22,980
on this part

657
00:31:22,980 --> 00:31:25,740
I want to add on that because we have

658
00:31:25,740 --> 00:31:28,140
already finished most part mostly the

659
00:31:28,140 --> 00:31:30,059
coding part or the infrastructure

660
00:31:30,059 --> 00:31:32,700
building part now we are more focused on

661
00:31:32,700 --> 00:31:34,919
how to increase an adoption number how

662
00:31:34,919 --> 00:31:38,179
to collect those numbers from our system

663
00:31:38,179 --> 00:31:41,520
and make a list of them that inform the

664
00:31:41,520 --> 00:31:44,640
engineers to improve the the their

665
00:31:44,640 --> 00:31:46,500
system

666
00:31:46,500 --> 00:31:48,980
good

667
00:31:50,279 --> 00:31:55,320
I'm sure your Jenkins information

668
00:32:03,720 --> 00:32:06,299
for the wrong repository right

669
00:32:06,299 --> 00:32:11,640
yeah so uh when a CI CD job tries to

670
00:32:11,640 --> 00:32:13,679
push an artifact which it generates to

671
00:32:13,679 --> 00:32:18,240
artifactory or oci registry we we need

672
00:32:18,240 --> 00:32:20,460
to make sure or we need to explicitly

673
00:32:20,460 --> 00:32:23,399
ask the artifactory to only allow

674
00:32:23,399 --> 00:32:25,860
artifacts generated by pipeline X

675
00:32:25,860 --> 00:32:28,440
instead of pipeline y being sending it

676
00:32:28,440 --> 00:32:31,140
to it so if let's say there is a node

677
00:32:31,140 --> 00:32:35,539
package which has authorization to

678
00:32:35,539 --> 00:32:39,679
be created by pipeline X ah

679
00:32:39,679 --> 00:32:41,580
artifactory would have that information

680
00:32:41,580 --> 00:32:44,220
so we can map the image ID with the

681
00:32:44,220 --> 00:32:46,440
pipeline ID and that's how we ensure

682
00:32:46,440 --> 00:32:49,559
that only the images which are marked

683
00:32:49,559 --> 00:32:51,779
will be allowed to be published as part

684
00:32:51,779 --> 00:32:53,039
of the pipeline

685
00:32:53,039 --> 00:32:56,960
yeah does that answer your question

686
00:32:59,279 --> 00:33:01,820
right

687
00:33:05,600 --> 00:33:09,960
has an authorization like we internally

688
00:33:09,960 --> 00:33:12,600
we use a product called Essence it is

689
00:33:12,600 --> 00:33:15,720
also versus a product is uh kind of our

690
00:33:15,720 --> 00:33:19,380
back our back system this is also a CSF

691
00:33:19,380 --> 00:33:21,720
product so you can find in this in the

692
00:33:21,720 --> 00:33:25,679
in the website and every time we send

693
00:33:25,679 --> 00:33:27,720
the prominence to the graphics database

694
00:33:27,720 --> 00:33:30,840
we actually send a kind of a mission

695
00:33:30,840 --> 00:33:33,539
required to the essence and if you can

696
00:33:33,539 --> 00:33:36,659
guess like a permission they can just

697
00:33:36,659 --> 00:33:38,700
put the performance into database

698
00:33:38,700 --> 00:33:41,039
otherwise the gear cannot

699
00:33:41,039 --> 00:33:45,419
so yeah that's what we did

700
00:33:45,419 --> 00:33:48,919
okay that's the next one yeah

701
00:34:00,059 --> 00:34:02,640
yeah I think those decisions were made

702
00:34:02,640 --> 00:34:04,799
way before we actually did it and that's

703
00:34:04,799 --> 00:34:07,260
been happening for a long time but we

704
00:34:07,260 --> 00:34:10,080
are now now with cosine and six store uh

705
00:34:10,080 --> 00:34:13,379
being widely adopted we are looking at

706
00:34:13,379 --> 00:34:15,739
exploring that solution of having either

707
00:34:15,739 --> 00:34:18,418
short-lived keys or ephemeral keys by

708
00:34:18,418 --> 00:34:21,359
going the keyless route to use those

709
00:34:21,359 --> 00:34:23,099
instead

710
00:34:23,099 --> 00:34:26,099
yeah personally it could be just use

711
00:34:26,099 --> 00:34:28,980
cosine with long-lived sign keys but

712
00:34:28,980 --> 00:34:31,619
finally we can gradually uh add some

713
00:34:31,619 --> 00:34:35,099
record infrastructure to achieve the key

714
00:34:35,099 --> 00:34:38,399
less signing so here's uh it's not that

715
00:34:38,399 --> 00:34:40,560
easy path to go but it will gradually

716
00:34:40,560 --> 00:34:43,759
work towards that

717
00:34:46,260 --> 00:34:47,580
no

718
00:34:47,580 --> 00:34:50,099
yeah I don't think it's a requirement

719
00:34:50,099 --> 00:34:53,639
and I may be wrong again but we are

720
00:34:53,639 --> 00:34:55,500
working with the right folks within

721
00:34:55,500 --> 00:34:57,660
Yahoo to make sure that we change

722
00:34:57,660 --> 00:34:59,760
because it's been you always been around

723
00:34:59,760 --> 00:35:03,000
for so long uh it's and the open source

724
00:35:03,000 --> 00:35:04,920
tools have been coming in recently as

725
00:35:04,920 --> 00:35:08,099
well so it's a change of say uh learning

726
00:35:08,099 --> 00:35:09,960
curve as well so that's what we're

727
00:35:09,960 --> 00:35:12,380
working on

728
00:35:12,540 --> 00:35:16,440
sorry good

729
00:35:25,260 --> 00:35:28,920
so we we've just started collecting

730
00:35:28,920 --> 00:35:31,200
those and doing the vulnerability checks

731
00:35:31,200 --> 00:35:34,440
the plan is to tie the s-bombs with the

732
00:35:34,440 --> 00:35:38,460
freshness policy so that as as we ensure

733
00:35:38,460 --> 00:35:40,680
that an image or an artifact cannot be

734
00:35:40,680 --> 00:35:43,140
deployed for more than six months uh

735
00:35:43,140 --> 00:35:45,780
which is a stale image having an s-bomb

736
00:35:45,780 --> 00:35:48,599
which uh is older than six months Also

737
00:35:48,599 --> 00:35:51,119
may not add value because we won't have

738
00:35:51,119 --> 00:35:53,640
any artifacts which are running for old

739
00:35:53,640 --> 00:35:55,980
which are older than six months So the

740
00:35:55,980 --> 00:35:57,960
plan is to have it either for a year or

741
00:35:57,960 --> 00:36:01,579
so because teams may have exceptions or

742
00:36:01,579 --> 00:36:04,140
allowed they are allowed to deploy an

743
00:36:04,140 --> 00:36:07,079
older image so but yeah we that small

744
00:36:07,079 --> 00:36:10,880
policy question then uh developer or an

745
00:36:10,880 --> 00:36:15,300
uh engineer question I feel like so yeah

746
00:36:15,300 --> 00:36:17,940
and we are now sending the vulnerability

747
00:36:17,940 --> 00:36:21,180
data or s-bomb data in the build time to

748
00:36:21,180 --> 00:36:24,119
any database right now we are actually

749
00:36:24,119 --> 00:36:26,160
collecting the vulnerability data about

750
00:36:26,160 --> 00:36:28,800
relative from an unsynchronized resource

751
00:36:28,800 --> 00:36:31,619
to to uh to uh for the vulnerability

752
00:36:31,619 --> 00:36:35,720
data it's not from the pure stage

753
00:36:36,440 --> 00:36:39,920
it looks good

754
00:36:44,280 --> 00:36:47,280
images

755
00:36:52,500 --> 00:36:55,380
those checks or policies and the second

756
00:36:55,380 --> 00:36:57,300
one is on the freshness

757
00:36:57,300 --> 00:37:00,839
how do you determine the freshness

758
00:37:00,839 --> 00:37:03,740
state or some

759
00:37:04,980 --> 00:37:07,500
or something sure so to answer your

760
00:37:07,500 --> 00:37:10,440
first question uh so we we use

761
00:37:10,440 --> 00:37:12,900
internally gripe and sift to generate

762
00:37:12,900 --> 00:37:15,420
the s-bomb and vulnerability data and

763
00:37:15,420 --> 00:37:17,520
currently it spits out lot of

764
00:37:17,520 --> 00:37:19,320
information about vulnerabilities so

765
00:37:19,320 --> 00:37:22,040
ranging from critical to medium level

766
00:37:22,040 --> 00:37:25,380
and we use that information along with

767
00:37:25,380 --> 00:37:28,140
the information which the vulnerability

768
00:37:28,140 --> 00:37:30,900
team within Yahoo generates which which

769
00:37:30,900 --> 00:37:33,060
may determine not all vulnerabilities

770
00:37:33,060 --> 00:37:35,220
are critical to Yahoo and it can

771
00:37:35,220 --> 00:37:37,859
shortlist those so we then determine

772
00:37:37,859 --> 00:37:40,560
based on the vulnerabilities which Yahoo

773
00:37:40,560 --> 00:37:42,660
marks at as critical

774
00:37:42,660 --> 00:37:45,480
and with what shift generates and then

775
00:37:45,480 --> 00:37:47,280
based on that we make a decision whether

776
00:37:47,280 --> 00:37:50,940
to block that image or uh just report it

777
00:37:50,940 --> 00:37:54,260
and continue processing

778
00:38:05,400 --> 00:38:08,119
database

779
00:38:10,200 --> 00:38:12,859
right now it's implemented internally

780
00:38:12,859 --> 00:38:15,240
because this is more of a build time

781
00:38:15,240 --> 00:38:18,960
check and not deployment that okay the

782
00:38:18,960 --> 00:38:21,599
time is of the essence so but I think we

783
00:38:21,599 --> 00:38:23,220
are out of time but thanks for your

784
00:38:23,220 --> 00:38:24,060
question

785
00:38:24,060 --> 00:38:26,339
ah you had a follow-up question as well

786
00:38:26,339 --> 00:38:28,759
we can

787
00:38:33,060 --> 00:38:36,180
it's also a great time and just based on

788
00:38:36,180 --> 00:38:39,260
create time right now we have a plan to

789
00:38:39,260 --> 00:38:42,000
check all the components create time of

790
00:38:42,000 --> 00:38:45,300
every components uh yeah we are just

791
00:38:45,300 --> 00:38:47,339
working on that we haven't have a final

792
00:38:47,339 --> 00:38:50,299
solution for that

793
00:38:50,900 --> 00:38:53,460
we can take the questions offline I

794
00:38:53,460 --> 00:38:57,180
think we are out of time yeah yeah

795
00:38:57,180 --> 00:38:59,540
uh

796
00:39:10,859 --> 00:39:13,020
sorry can you repeat the question once

797
00:39:13,020 --> 00:39:15,140
more

798
00:39:22,560 --> 00:39:25,800
so we currently integrate our the SD

799
00:39:25,800 --> 00:39:27,900
command with screwdriver provides with

800
00:39:27,900 --> 00:39:30,300
all the standard templates so before it

801
00:39:30,300 --> 00:39:32,640
gets published to artifactory uh We've

802
00:39:32,640 --> 00:39:35,520
integrated that SD command to all all of

803
00:39:35,520 --> 00:39:38,160
the existing pipelines so it gets

804
00:39:38,160 --> 00:39:40,200
scanned and determines whether to

805
00:39:40,200 --> 00:39:43,260
proceed to publish it or not

806
00:39:43,260 --> 00:39:46,260
so yeah we use as mentioned gripeshift

807
00:39:46,260 --> 00:39:48,420
to get that information and some

808
00:39:48,420 --> 00:39:50,400
propriety code to figure out whether to

809
00:39:50,400 --> 00:39:53,000
push or not

810
00:39:54,119 --> 00:39:56,460
I think we are done thank you guys thank

811
00:39:56,460 --> 00:39:57,300
you guys

812
00:39:57,300 --> 00:40:00,829
[Applause]

