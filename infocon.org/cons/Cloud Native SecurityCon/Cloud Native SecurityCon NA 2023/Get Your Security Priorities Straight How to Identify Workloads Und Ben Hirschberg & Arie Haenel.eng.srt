1
00:00:00,060 --> 00:00:03,000
so let's talk about security priorities

2
00:00:03,000 --> 00:00:06,660
and how can we detect them

3
00:00:06,660 --> 00:00:09,620
um easily okay I'm going to present you

4
00:00:09,620 --> 00:00:13,080
with an interesting uh research we've

5
00:00:13,080 --> 00:00:15,059
been doing in the last three months

6
00:00:15,059 --> 00:00:18,680
together with Intel security

7
00:00:18,900 --> 00:00:21,539
um so do you know this guy

8
00:00:21,539 --> 00:00:24,779
I guess you've heard of him so Ken in

9
00:00:24,779 --> 00:00:26,400
the next picture I'm going to ask you to

10
00:00:26,400 --> 00:00:29,240
point him out

11
00:00:29,340 --> 00:00:31,320
do you find him

12
00:00:31,320 --> 00:00:34,140
everyone looks similar right

13
00:00:34,140 --> 00:00:36,420
sometimes it's really hard okay to pick

14
00:00:36,420 --> 00:00:38,219
out the real one right the real things

15
00:00:38,219 --> 00:00:40,200
which are which are bothering us okay

16
00:00:40,200 --> 00:00:42,899
when we're looking for uh

17
00:00:42,899 --> 00:00:46,140
um for a Target okay in our case okay to

18
00:00:46,140 --> 00:00:49,260
improve Security in in the cloud native

19
00:00:49,260 --> 00:00:51,960
World okay sometimes it's really hard

20
00:00:51,960 --> 00:00:53,940
for with today's tooling to improve

21
00:00:53,940 --> 00:00:57,600
security posture okay we have uh a lot

22
00:00:57,600 --> 00:01:00,780
of great tools giving us a ton of

23
00:01:00,780 --> 00:01:02,640
information

24
00:01:02,640 --> 00:01:06,240
and it for us it's for you know and I

25
00:01:06,240 --> 00:01:08,220
can talk right now we are not in kubecon

26
00:01:08,220 --> 00:01:10,439
right we are in Cloud native security so

27
00:01:10,439 --> 00:01:12,360
among Security Professionals sometimes

28
00:01:12,360 --> 00:01:14,460
really hard for us to pick out the real

29
00:01:14,460 --> 00:01:15,720
issues

30
00:01:15,720 --> 00:01:18,420
so this is what uh what I talk is going

31
00:01:18,420 --> 00:01:20,460
to be today

32
00:01:20,460 --> 00:01:22,920
uh uh we are going to I'm going to

33
00:01:22,920 --> 00:01:25,560
present you today a talk with Arya who's

34
00:01:25,560 --> 00:01:28,140
uh we pre-recorded him for this talk he

35
00:01:28,140 --> 00:01:29,580
couldn't make it here

36
00:01:29,580 --> 00:01:32,700
uh who is uh part of the Intel assert

37
00:01:32,700 --> 00:01:35,460
team okay they are like an offensive

38
00:01:35,460 --> 00:01:37,439
security team we inside Intel okay

39
00:01:37,439 --> 00:01:39,479
giving uh

40
00:01:39,479 --> 00:01:41,939
um helping product security teams to

41
00:01:41,939 --> 00:01:44,700
improve uh their uh product from a

42
00:01:44,700 --> 00:01:46,680
security perspective and cubescape okay

43
00:01:46,680 --> 00:01:49,860
cubescape is a Sandbox sandbox project

44
00:01:49,860 --> 00:01:55,020
in cncf for kubernetes security posture

45
00:01:55,020 --> 00:01:57,960
and we're going to show you a research

46
00:01:57,960 --> 00:02:00,299
and which we've been doing for a while

47
00:02:00,299 --> 00:02:04,200
again on how to prioritize okay security

48
00:02:04,200 --> 00:02:08,098
issues uh in kubernetes using what we

49
00:02:08,098 --> 00:02:10,800
call attack chains uh and we're going to

50
00:02:10,800 --> 00:02:14,340
show you a demo okay of of How It's been

51
00:02:14,340 --> 00:02:18,540
used inside the Intel assert team in the

52
00:02:18,540 --> 00:02:19,739
last month

53
00:02:19,739 --> 00:02:22,680
so a few words about me those who don't

54
00:02:22,680 --> 00:02:24,840
know me already

55
00:02:24,840 --> 00:02:26,520
um I just had a talk in the Next Room so

56
00:02:26,520 --> 00:02:28,920
some some of you might already heard

57
00:02:28,920 --> 00:02:32,160
this okay but I'm Ben I'm CTO and

58
00:02:32,160 --> 00:02:34,620
co-founder at armo armo is a kubernetes

59
00:02:34,620 --> 00:02:38,720
security company startup based in Israel

60
00:02:38,720 --> 00:02:41,819
but we are like we have all people

61
00:02:41,819 --> 00:02:46,800
around the whole globe in my previous uh

62
00:02:46,800 --> 00:02:48,780
uh stints okay been working as an

63
00:02:48,780 --> 00:02:51,300
offensive security engineer for a long

64
00:02:51,300 --> 00:02:54,060
time also went to the defensive side and

65
00:02:54,060 --> 00:02:56,340
then went into RND and creating products

66
00:02:56,340 --> 00:02:57,900
then to Startup

67
00:02:57,900 --> 00:03:00,239
I'm I'm fluent in a lot of languages

68
00:03:00,239 --> 00:03:02,640
English is not one of them so I'm sorry

69
00:03:02,640 --> 00:03:05,700
if I'm making mistakes uh and you can

70
00:03:05,700 --> 00:03:08,580
find me around cncf a lot

71
00:03:08,580 --> 00:03:11,459
hello everyone I am Ariana principal

72
00:03:11,459 --> 00:03:13,019
engineer at intern where I lead an

73
00:03:13,019 --> 00:03:14,519
office team security research team

74
00:03:14,519 --> 00:03:16,019
called assault

75
00:03:16,019 --> 00:03:17,819
I have 25 years of professional

76
00:03:17,819 --> 00:03:19,379
experience in different domains of

77
00:03:19,379 --> 00:03:21,720
software and security engineering and I

78
00:03:21,720 --> 00:03:23,580
teach software security at the Jerusalem

79
00:03:23,580 --> 00:03:25,560
College of Technology

80
00:03:25,560 --> 00:03:27,840
at Intel with my team we primarily

81
00:03:27,840 --> 00:03:29,340
conduct quality research and have

82
00:03:29,340 --> 00:03:31,500
different modes of operation from long

83
00:03:31,500 --> 00:03:33,420
engagements to focus their thoughts on

84
00:03:33,420 --> 00:03:35,459
various kinds of Technologies

85
00:03:35,459 --> 00:03:37,680
while some of the targeted effort may be

86
00:03:37,680 --> 00:03:39,840
short term it is crucial for the

87
00:03:39,840 --> 00:03:41,760
projecting we are working with to be

88
00:03:41,760 --> 00:03:43,680
well prepared in order for us to deliver

89
00:03:43,680 --> 00:03:46,459
the best results

90
00:03:47,760 --> 00:03:49,920
our role is not to replace the Standard

91
00:03:49,920 --> 00:03:51,540
Security actions by disease of the

92
00:03:51,540 --> 00:03:53,580
product team such as the secure

93
00:03:53,580 --> 00:03:56,400
development life cycle well known sdl

94
00:03:56,400 --> 00:03:58,560
but to complement it by providing an

95
00:03:58,560 --> 00:04:00,900
external articles perspective

96
00:04:00,900 --> 00:04:03,180
but to be effective we aim to ensure

97
00:04:03,180 --> 00:04:05,580
that any bugs that could in fact should

98
00:04:05,580 --> 00:04:07,680
have been detected by automatic tools

99
00:04:07,680 --> 00:04:11,280
have been addressed and refer to this as

100
00:04:11,280 --> 00:04:14,599
a low hanging fruits

101
00:04:16,139 --> 00:04:17,880
the challenge we face is that when

102
00:04:17,880 --> 00:04:19,918
searching for these rotten low hanging

103
00:04:19,918 --> 00:04:22,560
fruits using most automatic scanners we

104
00:04:22,560 --> 00:04:24,300
must sift through a large number of

105
00:04:24,300 --> 00:04:26,639
other fruits also reported by these

106
00:04:26,639 --> 00:04:28,740
tools many of which are not actually

107
00:04:28,740 --> 00:04:30,300
relevant to the product

108
00:04:30,300 --> 00:04:32,460
scanners report issues based on rules

109
00:04:32,460 --> 00:04:34,380
that may return alerts that are not

110
00:04:34,380 --> 00:04:36,780
applicable to this specific project

111
00:04:36,780 --> 00:04:38,820
additionally it is important to consider

112
00:04:38,820 --> 00:04:40,560
the severity and risk level of the

113
00:04:40,560 --> 00:04:42,840
reported elements some may be critical

114
00:04:42,840 --> 00:04:45,240
while Others May provide any minimal

115
00:04:45,240 --> 00:04:48,180
protection against telemetrics while we

116
00:04:48,180 --> 00:04:50,000
advocate for defense in depths

117
00:04:50,000 --> 00:04:52,259
prioritization is primordial in real

118
00:04:52,259 --> 00:04:55,040
world scenarios

119
00:04:55,740 --> 00:04:58,020
in order to effectively identify another

120
00:04:58,020 --> 00:04:59,720
security vulnerabilities in our

121
00:04:59,720 --> 00:05:02,400
kubernetes-based systems we need a tool

122
00:05:02,400 --> 00:05:04,320
that could not only discover issues but

123
00:05:04,320 --> 00:05:06,479
also categorize and prioritize them

124
00:05:06,479 --> 00:05:09,180
provide explanations and even suggest

125
00:05:09,180 --> 00:05:12,300
limitation steps after evaluating values

126
00:05:12,300 --> 00:05:14,340
options we found that cubescate was a

127
00:05:14,340 --> 00:05:16,620
good fit for our needs we have since

128
00:05:16,620 --> 00:05:18,419
worked closely with the cubescape team

129
00:05:18,419 --> 00:05:20,220
to further improve the tool and

130
00:05:20,220 --> 00:05:21,960
incorporate new features such as the

131
00:05:21,960 --> 00:05:24,060
ability to focus on identifying the most

132
00:05:24,060 --> 00:05:26,100
critical areas of the cluster from an

133
00:05:26,100 --> 00:05:27,780
attacker perspective

134
00:05:27,780 --> 00:05:29,820
my team is not the primary customer of

135
00:05:29,820 --> 00:05:32,100
this tool and it shouldn't be

136
00:05:32,100 --> 00:05:34,259
however it is important for us as a

137
00:05:34,259 --> 00:05:36,180
security team to ensure that such a tool

138
00:05:36,180 --> 00:05:38,639
is easily adoptable by developers and

139
00:05:38,639 --> 00:05:40,560
validation teams as part of their

140
00:05:40,560 --> 00:05:41,580
workflow

141
00:05:41,580 --> 00:05:43,740
this way can be used to catch and Report

142
00:05:43,740 --> 00:05:45,840
potential vulnerabilities and weaknesses

143
00:05:45,840 --> 00:05:47,759
in the cluster in a way that is easy to

144
00:05:47,759 --> 00:05:49,860
understand and actionable for

145
00:05:49,860 --> 00:05:53,180
non-security professionals

146
00:05:53,940 --> 00:05:58,440
so few words about about cubescape

147
00:05:58,440 --> 00:05:59,639
so

148
00:05:59,639 --> 00:06:02,100
cubescape was born as a kubernetes

149
00:06:02,100 --> 00:06:05,039
security posture tool okay which gives

150
00:06:05,039 --> 00:06:07,860
you both compliance and security posture

151
00:06:07,860 --> 00:06:09,960
information

152
00:06:09,960 --> 00:06:11,820
um sorry the project started a year and

153
00:06:11,820 --> 00:06:13,800
a half ago

154
00:06:13,800 --> 00:06:16,560
um as a site project at armo and as of

155
00:06:16,560 --> 00:06:18,680
today as

156
00:06:18,680 --> 00:06:20,699
Mars this is the first time okay I'm

157
00:06:20,699 --> 00:06:23,100
attending a cncfm event where I can say

158
00:06:23,100 --> 00:06:25,020
out publicly that we are became a

159
00:06:25,020 --> 00:06:27,620
Sandbox project okay armo contributed

160
00:06:27,620 --> 00:06:30,960
cubescape to cncf

161
00:06:30,960 --> 00:06:34,860
um and it gives you today two major uh

162
00:06:34,860 --> 00:06:36,780
value or information one is the

163
00:06:36,780 --> 00:06:38,100
configuration

164
00:06:38,100 --> 00:06:40,440
uh scanning okay scanning your through

165
00:06:40,440 --> 00:06:42,900
your kubernetes uh configuration you

166
00:06:42,900 --> 00:06:46,380
know there is API server uh uh and

167
00:06:46,380 --> 00:06:48,419
objects and so on in order to find out

168
00:06:48,419 --> 00:06:50,280
different security issues the other is

169
00:06:50,280 --> 00:06:52,139
the vulnerability scanning okay we are

170
00:06:52,139 --> 00:06:54,780
enabling you to scan uh uh

171
00:06:54,780 --> 00:06:56,699
vulnerabilities inside your cluster and

172
00:06:56,699 --> 00:06:59,160
found uh give posture see posture

173
00:06:59,160 --> 00:07:01,220
information about your container images

174
00:07:01,220 --> 00:07:03,900
now the interesting thing and one of the

175
00:07:03,900 --> 00:07:05,759
things which were very helpful also for

176
00:07:05,759 --> 00:07:08,880
Intel as you could heard from Arya was

177
00:07:08,880 --> 00:07:11,220
actually the ability for cubescape to

178
00:07:11,220 --> 00:07:12,780
integrate not just into your cluster

179
00:07:12,780 --> 00:07:15,539
into live information but also to tap in

180
00:07:15,539 --> 00:07:18,120
already to your development workflows

181
00:07:18,120 --> 00:07:21,539
for vs code integration GitHub

182
00:07:21,539 --> 00:07:24,360
integration and so on so you could or

183
00:07:24,360 --> 00:07:26,580
devops and Dev Engineers could already

184
00:07:26,580 --> 00:07:28,800
Implement okay one of the things during

185
00:07:28,800 --> 00:07:31,199
their work okay and not just get there

186
00:07:31,199 --> 00:07:32,759
to the production and then find out

187
00:07:32,759 --> 00:07:34,259
issues

188
00:07:34,259 --> 00:07:37,860
and this is very very helpful Point here

189
00:07:37,860 --> 00:07:41,280
now cubescape and the configuration

190
00:07:41,280 --> 00:07:43,380
scanning part of cubescape is based on

191
00:07:43,380 --> 00:07:46,319
what we call controls okay controls

192
00:07:46,319 --> 00:07:48,300
think about them as tests okay every

193
00:07:48,300 --> 00:07:51,419
control is a test and it tests a single

194
00:07:51,419 --> 00:07:56,220
I would say property of uh of kubernetes

195
00:07:56,220 --> 00:07:59,699
objects okay I'm just making it simpler

196
00:07:59,699 --> 00:08:01,440
okay to explain but it can be more

197
00:08:01,440 --> 00:08:03,240
complex because it it can have

198
00:08:03,240 --> 00:08:06,539
contextual take into account contextual

199
00:08:06,539 --> 00:08:08,160
information of multiple comparative

200
00:08:08,160 --> 00:08:12,539
objects it is based on Rego uh from the

201
00:08:12,539 --> 00:08:15,840
Opera project and you can Define we are

202
00:08:15,840 --> 00:08:19,680
defining these controls in Rego now

203
00:08:19,680 --> 00:08:22,319
every control has its severity and it

204
00:08:22,319 --> 00:08:25,020
can uh every control can cover a single

205
00:08:25,020 --> 00:08:27,319
thing like whether the

206
00:08:27,319 --> 00:08:30,539
container which is inside the Pod is

207
00:08:30,539 --> 00:08:34,260
running as a root or whether uh um you

208
00:08:34,260 --> 00:08:36,240
know the service account token which was

209
00:08:36,240 --> 00:08:39,899
mounted in into the Pod has actual

210
00:08:39,899 --> 00:08:43,500
arbuck uh privileges attached to it

211
00:08:43,500 --> 00:08:46,800
whether the workload has uh in this case

212
00:08:46,800 --> 00:08:48,540
this example okay whether it has a

213
00:08:48,540 --> 00:08:50,940
critical vulnerability inside and so on

214
00:08:50,940 --> 00:08:53,399
so we have this control concept of

215
00:08:53,399 --> 00:08:55,680
controls and and cubescape output shows

216
00:08:55,680 --> 00:08:58,380
you okay how which which resources

217
00:08:58,380 --> 00:09:00,720
failed on which controls okay and you

218
00:09:00,720 --> 00:09:05,880
can take it for uh uh for fixing them or

219
00:09:05,880 --> 00:09:08,279
either decide that you're ignoring them

220
00:09:08,279 --> 00:09:11,480
but the main problem is that in the case

221
00:09:11,480 --> 00:09:14,580
for example for Intel they they're

222
00:09:14,580 --> 00:09:17,339
running a cluster of nearly

223
00:09:17,339 --> 00:09:18,779
100

224
00:09:18,779 --> 00:09:22,260
000 workloads okay and having a scan

225
00:09:22,260 --> 00:09:24,480
single scan running inside and having uh

226
00:09:24,480 --> 00:09:27,120
taking this output is really really hard

227
00:09:27,120 --> 00:09:29,100
it's overwhelming and the security team

228
00:09:29,100 --> 00:09:31,620
is looking for want to know what are

229
00:09:31,620 --> 00:09:34,019
their most risky workloads on to

230
00:09:34,019 --> 00:09:37,200
understand what they have to fix uh for

231
00:09:37,200 --> 00:09:39,839
you know before the others therefore we

232
00:09:39,839 --> 00:09:42,839
started this project okay and we thought

233
00:09:42,839 --> 00:09:44,940
of the following concept I'm going to

234
00:09:44,940 --> 00:09:47,700
explain you now the algorithm the idea

235
00:09:47,700 --> 00:09:51,779
okay and they will show the results so

236
00:09:51,779 --> 00:09:55,260
again we have these things called

237
00:09:55,260 --> 00:09:57,720
controls okay and we want to get into

238
00:09:57,720 --> 00:09:59,580
the state where we can prioritize the

239
00:09:59,580 --> 00:10:01,860
output okay and to show you for each

240
00:10:01,860 --> 00:10:04,279
workload what which one is the most

241
00:10:04,279 --> 00:10:08,339
risky okay uh which will you have to fix

242
00:10:08,339 --> 00:10:11,640
the first okay and you know

243
00:10:11,640 --> 00:10:13,560
building something in between this

244
00:10:13,560 --> 00:10:15,660
algorithm in between these two the input

245
00:10:15,660 --> 00:10:18,480
and the output has to make take

246
00:10:18,480 --> 00:10:20,279
different things into account and the

247
00:10:20,279 --> 00:10:22,580
way we we decided to do this

248
00:10:22,580 --> 00:10:24,120
is

249
00:10:24,120 --> 00:10:27,180
um what we call attack chains okay we

250
00:10:27,180 --> 00:10:29,160
are going to with what we have done

251
00:10:29,160 --> 00:10:31,080
we've modeled

252
00:10:31,080 --> 00:10:31,920
um

253
00:10:31,920 --> 00:10:34,620
different uh these controls into a

254
00:10:34,620 --> 00:10:37,200
framework we've created and trying to

255
00:10:37,200 --> 00:10:41,339
show which controls has effect to others

256
00:10:41,339 --> 00:10:44,040
okay and if you are seeing these two

257
00:10:44,040 --> 00:10:46,279
controls failing on the same resource

258
00:10:46,279 --> 00:10:49,500
creating a bigger effect bigger risk

259
00:10:49,500 --> 00:10:52,560
okay than each of them alone

260
00:10:52,560 --> 00:10:55,560
so in order to do that

261
00:10:55,560 --> 00:10:58,680
um we've we've taken

262
00:10:58,680 --> 00:10:59,899
um

263
00:10:59,899 --> 00:11:03,680
Microsoft's work okay on kubernetes uh

264
00:11:03,680 --> 00:11:07,019
security they've released I think

265
00:11:07,019 --> 00:11:09,779
to researcher at Microsoft released this

266
00:11:09,779 --> 00:11:12,600
framework uh like two years ago

267
00:11:12,600 --> 00:11:15,240
something like that uh they've took the

268
00:11:15,240 --> 00:11:18,120
miter framework okay I guess most of you

269
00:11:18,120 --> 00:11:20,640
know of it already Okay The Miser

270
00:11:20,640 --> 00:11:22,560
framework and adopted it to the

271
00:11:22,560 --> 00:11:24,000
kubernetes world

272
00:11:24,000 --> 00:11:27,899
so what they did they they took the same

273
00:11:27,899 --> 00:11:31,200
um same uh categories okay of initial

274
00:11:31,200 --> 00:11:34,140
access execution persistence and I'm

275
00:11:34,140 --> 00:11:35,940
going to read everything out for you but

276
00:11:35,940 --> 00:11:39,600
but they took the original miter uh

277
00:11:39,600 --> 00:11:42,180
um categories okay and put different

278
00:11:42,180 --> 00:11:45,600
issues around kubernetes under each of

279
00:11:45,600 --> 00:11:47,220
those categories

280
00:11:47,220 --> 00:11:49,800
what we decided that we are going to

281
00:11:49,800 --> 00:11:52,800
categorize our controls we are doing in

282
00:11:52,800 --> 00:11:54,600
Cuba in cubescape

283
00:11:54,600 --> 00:11:57,180
to be to be part of each uh to

284
00:11:57,180 --> 00:11:59,760
categorize them under these categories

285
00:11:59,760 --> 00:12:02,940
okay and what we could what it brought

286
00:12:02,940 --> 00:12:06,600
us to uh on the our next step which is

287
00:12:06,600 --> 00:12:11,040
creating a graph okay of of these

288
00:12:11,040 --> 00:12:12,959
categories where we are seeing that one

289
00:12:12,959 --> 00:12:15,779
category can affect the other

290
00:12:15,779 --> 00:12:18,540
so for example you can look at the

291
00:12:18,540 --> 00:12:21,480
initial access category okay whether

292
00:12:21,480 --> 00:12:24,660
that different issues under this

293
00:12:24,660 --> 00:12:26,459
category of initial access whether the

294
00:12:26,459 --> 00:12:28,860
attacker has an access to the container

295
00:12:28,860 --> 00:12:30,120
okay

296
00:12:30,120 --> 00:12:31,380
and

297
00:12:31,380 --> 00:12:33,660
if the attacker has an access to the

298
00:12:33,660 --> 00:12:36,540
container it might gain execution which

299
00:12:36,540 --> 00:12:38,880
is another category right

300
00:12:38,880 --> 00:12:41,100
and one you know category can bring to

301
00:12:41,100 --> 00:12:43,800
another and execution if the attacker

302
00:12:43,800 --> 00:12:46,620
has an execution on a container it can

303
00:12:46,620 --> 00:12:48,600
try to escalate its privileges beyond

304
00:12:48,600 --> 00:12:51,360
the container okay or or trying to hack

305
00:12:51,360 --> 00:12:55,320
into the kernel okay and so on if the

306
00:12:55,320 --> 00:12:58,019
attacker has an execution it can try to

307
00:12:58,019 --> 00:12:58,940
access

308
00:12:58,940 --> 00:13:01,740
credentials inside the container okay or

309
00:13:01,740 --> 00:13:02,480
or

310
00:13:02,480 --> 00:13:05,459
credentials which are bound to The

311
00:13:05,459 --> 00:13:07,560
Container if the attacker has an

312
00:13:07,560 --> 00:13:10,800
execution it can discover uh do

313
00:13:10,800 --> 00:13:12,420
discovery of the environment and do

314
00:13:12,420 --> 00:13:14,519
lateral movements and so on

315
00:13:14,519 --> 00:13:18,180
so we created this graph okay of of

316
00:13:18,180 --> 00:13:20,160
these categories okay how they are

317
00:13:20,160 --> 00:13:22,620
affecting one to the other okay

318
00:13:22,620 --> 00:13:26,160
and with we said that this can enable us

319
00:13:26,160 --> 00:13:29,700
okay to create a sequence okay of

320
00:13:29,700 --> 00:13:33,060
potential uh uh attack inside the

321
00:13:33,060 --> 00:13:36,360
container so if cubescape

322
00:13:36,360 --> 00:13:36,899
um

323
00:13:36,899 --> 00:13:41,399
sees uh an nginx controller okay which

324
00:13:41,399 --> 00:13:44,700
in an Ingress controller which is can be

325
00:13:44,700 --> 00:13:47,700
accessed from the public internet

326
00:13:47,700 --> 00:13:49,320
um

327
00:13:49,320 --> 00:13:52,200
there it's this Con this workload fails

328
00:13:52,200 --> 00:13:55,440
on in the initial access category if it

329
00:13:55,440 --> 00:13:58,440
has a critical vulnerability which is a

330
00:13:58,440 --> 00:14:01,139
remote code execution vulnerability

331
00:14:01,139 --> 00:14:03,720
um the attacker can gain execution okay

332
00:14:03,720 --> 00:14:07,019
it if the same workload which is again

333
00:14:07,019 --> 00:14:08,639
an Ingress controller ending Ingress

334
00:14:08,639 --> 00:14:12,060
controller needs access to the

335
00:14:12,060 --> 00:14:14,160
kubernetes API

336
00:14:14,160 --> 00:14:17,160
um and therefore it will have uh access

337
00:14:17,160 --> 00:14:20,519
token with uh with um

338
00:14:20,519 --> 00:14:23,060
with roll attached to it

339
00:14:23,060 --> 00:14:26,639
then it is vulnerable to API access and

340
00:14:26,639 --> 00:14:28,920
so on if the container runs as a root

341
00:14:28,920 --> 00:14:32,100
user the attacker has more potential to

342
00:14:32,100 --> 00:14:34,920
exploit different bugs in the kernel so

343
00:14:34,920 --> 00:14:37,680
if we're taking this okay and and

344
00:14:37,680 --> 00:14:39,660
putting it on

345
00:14:39,660 --> 00:14:41,040
or

346
00:14:41,040 --> 00:14:42,180
um

347
00:14:42,180 --> 00:14:45,180
on our graph okay you will see all these

348
00:14:45,180 --> 00:14:47,699
you know red categories okay which are

349
00:14:47,699 --> 00:14:50,579
failing in a given workload okay the

350
00:14:50,579 --> 00:14:53,399
categories which are failing and this

351
00:14:53,399 --> 00:14:55,680
can show that we we can build up chains

352
00:14:55,680 --> 00:14:58,920
right because we can say

353
00:14:58,920 --> 00:15:01,260
okay that since there is initial access

354
00:15:01,260 --> 00:15:04,380
and execution and privilege escalation

355
00:15:04,380 --> 00:15:06,720
okay because this was a root container

356
00:15:06,720 --> 00:15:08,639
okay

357
00:15:08,639 --> 00:15:10,380
um then the attacker has a potential

358
00:15:10,380 --> 00:15:12,540
attack chain okay I'm not saying that

359
00:15:12,540 --> 00:15:15,300
it's it's 100 exploitable okay because

360
00:15:15,300 --> 00:15:17,399
there are other things but for the sake

361
00:15:17,399 --> 00:15:20,579
of uh of prioritization this is a

362
00:15:20,579 --> 00:15:22,740
potential attack chain now this is the

363
00:15:22,740 --> 00:15:24,480
first chain the second chain

364
00:15:24,480 --> 00:15:26,220
can be

365
00:15:26,220 --> 00:15:28,680
uh this chain initial access execution

366
00:15:28,680 --> 00:15:31,019
credential access and impact on the

367
00:15:31,019 --> 00:15:33,600
kubernetes API okay because the attacker

368
00:15:33,600 --> 00:15:38,760
has this flow inside the workload

369
00:15:38,760 --> 00:15:41,040
so if I build

370
00:15:41,040 --> 00:15:44,279
if I you know more formal defining okay

371
00:15:44,279 --> 00:15:46,560
this algorithm what cubescape will do

372
00:15:46,560 --> 00:15:50,040
okay is for every workload it already

373
00:15:50,040 --> 00:15:52,019
calculated the controls

374
00:15:52,019 --> 00:15:53,760
okay

375
00:15:53,760 --> 00:15:57,120
um it assigns each field control to the

376
00:15:57,120 --> 00:16:01,980
graph okay calculates uh the fail the

377
00:16:01,980 --> 00:16:04,199
chains of the potential chains inside

378
00:16:04,199 --> 00:16:06,240
you know this graph

379
00:16:06,240 --> 00:16:09,959
and for each chain it calculates a score

380
00:16:09,959 --> 00:16:11,699
which is based on actually on the

381
00:16:11,699 --> 00:16:14,699
severity of of if each control is failed

382
00:16:14,699 --> 00:16:16,079
on it

383
00:16:16,079 --> 00:16:19,320
and then sum up all the chains together

384
00:16:19,320 --> 00:16:21,540
and this is going to be the priority

385
00:16:21,540 --> 00:16:25,380
okay of the score of the of the workload

386
00:16:25,380 --> 00:16:27,600
and at the end it can take all the

387
00:16:27,600 --> 00:16:30,480
workloads together and create a list of

388
00:16:30,480 --> 00:16:32,339
priority lists of each of them based on

389
00:16:32,339 --> 00:16:34,079
this score

390
00:16:34,079 --> 00:16:35,820
so again

391
00:16:35,820 --> 00:16:40,199
if we are looking at uh at the scores

392
00:16:40,199 --> 00:16:42,660
so the first chain had three failed

393
00:16:42,660 --> 00:16:45,120
controls okay each control has its own

394
00:16:45,120 --> 00:16:47,639
severity we are calculating the

395
00:16:47,639 --> 00:16:50,100
multiplications of each each control

396
00:16:50,100 --> 00:16:53,240
together the chain one's core

397
00:16:53,240 --> 00:16:57,660
uh uh is you know is sad uh the chain

398
00:16:57,660 --> 00:17:00,180
two score is going to be also the

399
00:17:00,180 --> 00:17:01,920
multiplication of each of the severities

400
00:17:01,920 --> 00:17:05,880
we of these control it fell on okay then

401
00:17:05,880 --> 00:17:07,740
the actually the priority score is go of

402
00:17:07,740 --> 00:17:09,419
the workload is going to be chain one

403
00:17:09,419 --> 00:17:11,459
plus chain two

404
00:17:11,459 --> 00:17:13,919
so now what we are going to do is Aria

405
00:17:13,919 --> 00:17:15,959
is going to demo

406
00:17:15,959 --> 00:17:16,799
um

407
00:17:16,799 --> 00:17:21,000
the results he had using this

408
00:17:21,000 --> 00:17:22,740
in the last few months is we have

409
00:17:22,740 --> 00:17:24,839
evaluated the usefulness of cubescape in

410
00:17:24,839 --> 00:17:27,119
a various stages of development across

411
00:17:27,119 --> 00:17:29,640
different defaults the feedback so far

412
00:17:29,640 --> 00:17:31,799
has been very positive the findings

413
00:17:31,799 --> 00:17:33,960
reported by cubescape in a user-friendly

414
00:17:33,960 --> 00:17:36,539
manner should help them to integrate it

415
00:17:36,539 --> 00:17:38,760
into their workflow and focus on the

416
00:17:38,760 --> 00:17:41,760
most important areas of potential risks

417
00:17:41,760 --> 00:17:43,440
as you can see on this slide different

418
00:17:43,440 --> 00:17:46,520
types of output formats are available

419
00:17:46,520 --> 00:17:49,559
report shows different namespaces with

420
00:17:49,559 --> 00:17:51,299
different misconfigurations reported

421
00:17:51,299 --> 00:17:53,220
along with a direct link to the

422
00:17:53,220 --> 00:17:55,260
documentation explaining the issue and

423
00:17:55,260 --> 00:17:57,480
examples of limitation steps to fix the

424
00:17:57,480 --> 00:17:59,780
issue

425
00:18:02,160 --> 00:18:04,260
I clicked on one of the links in the

426
00:18:04,260 --> 00:18:06,240
report regarding a vulnerability with

427
00:18:06,240 --> 00:18:08,880
the cryptic name I was taking to a page

428
00:18:08,880 --> 00:18:10,620
with the vulnerabilities description

429
00:18:10,620 --> 00:18:13,320
additional resources and even recommend

430
00:18:13,320 --> 00:18:15,660
determination steps very convenient

431
00:18:15,660 --> 00:18:18,140
isn't it

432
00:18:25,880 --> 00:18:28,559
as we previously mentioned there can be

433
00:18:28,559 --> 00:18:30,179
a lot of noise when it comes to security

434
00:18:30,179 --> 00:18:33,059
threats and even after categorizing L

435
00:18:33,059 --> 00:18:34,919
filtering out the less relevant ones

436
00:18:34,919 --> 00:18:36,840
production team may still want to

437
00:18:36,840 --> 00:18:38,520
prioritize their effort

438
00:18:38,520 --> 00:18:41,039
in this video we demonstrated the use of

439
00:18:41,039 --> 00:18:43,380
cubescape on a large namespace

440
00:18:43,380 --> 00:18:45,360
despite the vast amount of information

441
00:18:45,360 --> 00:18:47,880
and useful details we still found it

442
00:18:47,880 --> 00:18:50,400
necessary to prioritize as the initial

443
00:18:50,400 --> 00:18:51,539
report

444
00:18:51,539 --> 00:18:53,640
as we previously mentioned there can be

445
00:18:53,640 --> 00:18:56,280
a lot of noise when it comes to cycling

446
00:18:56,280 --> 00:18:58,080
so here we focus on one of these

447
00:18:58,080 --> 00:19:01,200
workloads a database one in this view as

448
00:19:01,200 --> 00:19:03,240
a user I try to understand what can be

449
00:19:03,240 --> 00:19:05,039
mounted as an attack exploiting the

450
00:19:05,039 --> 00:19:06,720
vulnerabilities found in a specific

451
00:19:06,720 --> 00:19:07,799
workload

452
00:19:07,799 --> 00:19:10,020
in the bottom part I'm presenting with

453
00:19:10,020 --> 00:19:12,480
an attack tree it describes a full chain

454
00:19:12,480 --> 00:19:14,580
of exploitation using different findings

455
00:19:14,580 --> 00:19:17,580
all regarding these very namespace

456
00:19:17,580 --> 00:19:19,620
this makes the work of explaining the

457
00:19:19,620 --> 00:19:21,120
possible consequences of these

458
00:19:21,120 --> 00:19:22,860
vulnerabilities much easier

459
00:19:22,860 --> 00:19:24,840
especially when you have to justify more

460
00:19:24,840 --> 00:19:26,880
work from the development and validation

461
00:19:26,880 --> 00:19:29,780
teams to management

462
00:19:34,919 --> 00:19:37,320
this is an example of how cubescape how

463
00:19:37,320 --> 00:19:39,660
it is a workloads in the namespace I

464
00:19:39,660 --> 00:19:40,860
have been working on in the previous

465
00:19:40,860 --> 00:19:42,059
slides

466
00:19:42,059 --> 00:19:44,640
the list shows a workload that cubescape

467
00:19:44,640 --> 00:19:46,740
suggests to fix first as they are

468
00:19:46,740 --> 00:19:49,080
considered to be the most risky

469
00:19:49,080 --> 00:19:51,660
as you can see my two database instances

470
00:19:51,660 --> 00:19:53,039
are

471
00:19:53,039 --> 00:19:55,260
this is an example of how cubescape

472
00:19:55,260 --> 00:19:57,179
prioritizes the workloads in the

473
00:19:57,179 --> 00:19:58,860
namespace I have been working on in the

474
00:19:58,860 --> 00:20:00,240
previous slides

475
00:20:00,240 --> 00:20:02,700
the list shows a workload that cubescape

476
00:20:02,700 --> 00:20:04,740
suggests to fix first as they are

477
00:20:04,740 --> 00:20:07,200
considered to be the most risky

478
00:20:07,200 --> 00:20:09,780
as you can see my two database instances

479
00:20:09,780 --> 00:20:12,059
are prioritized ahead of others due to

480
00:20:12,059 --> 00:20:13,140
the fact that they both have

481
00:20:13,140 --> 00:20:15,120
persistently claims connected and

482
00:20:15,120 --> 00:20:16,620
multiplayer duplicates

483
00:20:16,620 --> 00:20:18,900
Additionally the control manager which

484
00:20:18,900 --> 00:20:21,120
is the first on the list has access to

485
00:20:21,120 --> 00:20:23,400
the kubernetes API

486
00:20:23,400 --> 00:20:25,500
this prioritization order provide

487
00:20:25,500 --> 00:20:27,299
guidance for the development team on

488
00:20:27,299 --> 00:20:29,460
where to start fixing issues within the

489
00:20:29,460 --> 00:20:30,480
namespace

490
00:20:30,480 --> 00:20:32,220
although this feature is still in the

491
00:20:32,220 --> 00:20:36,620
alpha phase its value is already evident

492
00:20:39,179 --> 00:20:41,100
this is awesome

493
00:20:41,100 --> 00:20:42,600
at the end you can access a

494
00:20:42,600 --> 00:20:44,220
comprehensive list of what has been

495
00:20:44,220 --> 00:20:46,380
tested the vulnerabilities found the

496
00:20:46,380 --> 00:20:48,539
severity and risk assessment based not

497
00:20:48,539 --> 00:20:50,700
only on the vulnerability but also in

498
00:20:50,700 --> 00:20:53,100
its context this is important because

499
00:20:53,100 --> 00:20:55,140
some potential vulnerabilities may not

500
00:20:55,140 --> 00:20:57,059
be relevant in the specific context of

501
00:20:57,059 --> 00:20:58,380
this namespace

502
00:20:58,380 --> 00:21:00,600
especially when the project is enticing

503
00:21:00,600 --> 00:21:02,820
schedule it's crucial to be able to

504
00:21:02,820 --> 00:21:05,340
prioritize your resources

505
00:21:05,340 --> 00:21:07,380
it's not perfect yet there are still

506
00:21:07,380 --> 00:21:09,299
many areas that need Improvement and

507
00:21:09,299 --> 00:21:10,799
while working with the maintainers to

508
00:21:10,799 --> 00:21:12,600
develop new features to make Cube skates

509
00:21:12,600 --> 00:21:15,780
even better however the maintainers are

510
00:21:15,780 --> 00:21:17,580
very responsive and for example the last

511
00:21:17,580 --> 00:21:19,980
time I reported an issue to Ben a new

512
00:21:19,980 --> 00:21:22,140
version was released with a fix the very

513
00:21:22,140 --> 00:21:24,559
next day

514
00:21:26,480 --> 00:21:28,140
so

515
00:21:28,140 --> 00:21:31,500
um to wrap this up

516
00:21:31,500 --> 00:21:32,820
um

517
00:21:32,820 --> 00:21:35,520
from the beginning okay we've you know

518
00:21:35,520 --> 00:21:38,940
uh we've put ourselves a very uh hard

519
00:21:38,940 --> 00:21:41,340
goal okay of of creating a good

520
00:21:41,340 --> 00:21:43,919
prioritization engine okay which will

521
00:21:43,919 --> 00:21:45,960
help you really to understand what are

522
00:21:45,960 --> 00:21:50,400
your most critical workloads uh now we

523
00:21:50,400 --> 00:21:53,640
are really in the early steps okay and

524
00:21:53,640 --> 00:21:55,919
we are working in tech security okay to

525
00:21:55,919 --> 00:21:58,860
trying to align uh this concept of of

526
00:21:58,860 --> 00:22:02,880
attack chains in with all the other

527
00:22:02,880 --> 00:22:03,620
um

528
00:22:03,620 --> 00:22:07,919
cncf uh projects okay and and and trying

529
00:22:07,919 --> 00:22:09,780
to standardize this

530
00:22:09,780 --> 00:22:12,120
but what we're we've seen in Intel okay

531
00:22:12,120 --> 00:22:15,000
and from the enthusiasm actually we got

532
00:22:15,000 --> 00:22:18,900
okay in the cubes team from Intel made

533
00:22:18,900 --> 00:22:21,299
us think that it's it's a very promising

534
00:22:21,299 --> 00:22:25,620
start and and uh we are though we are we

535
00:22:25,620 --> 00:22:27,299
still have Azaria said we have a few

536
00:22:27,299 --> 00:22:30,059
issues to work out okay uh and we have a

537
00:22:30,059 --> 00:22:33,000
few missing parts okay for example uh

538
00:22:33,000 --> 00:22:34,620
vulnerability information is not really

539
00:22:34,620 --> 00:22:37,320
connected today uh uh to this

540
00:22:37,320 --> 00:22:39,059
prioritization engine

541
00:22:39,059 --> 00:22:41,760
uh I can tell you that it's a it's

542
00:22:41,760 --> 00:22:43,799
already giving even without it it's

543
00:22:43,799 --> 00:22:47,100
already giving a valuable input and

544
00:22:47,100 --> 00:22:49,080
hopefully we're going to work out this

545
00:22:49,080 --> 00:22:50,159
issue of vulnerability information

546
00:22:50,159 --> 00:22:51,600
missing

547
00:22:51,600 --> 00:22:54,179
in the next month or two and uh you will

548
00:22:54,179 --> 00:22:56,940
have this information already uh part of

549
00:22:56,940 --> 00:22:59,640
of the prioritization we are missing a

550
00:22:59,640 --> 00:23:01,620
lot of testing and feedback and

551
00:23:01,620 --> 00:23:04,380
therefore actually what we are I have

552
00:23:04,380 --> 00:23:06,539
also here call to action okay we are

553
00:23:06,539 --> 00:23:09,059
looking for uh for inputs and feedback

554
00:23:09,059 --> 00:23:11,340
on this and also early adopters would be

555
00:23:11,340 --> 00:23:15,059
ready okay to test it having although

556
00:23:15,059 --> 00:23:17,520
this is already in the main release in

557
00:23:17,520 --> 00:23:20,640
cubescape it is hidden right now under a

558
00:23:20,640 --> 00:23:23,159
flag okay which is therefore it is not

559
00:23:23,159 --> 00:23:25,860
part of of every report but if someone

560
00:23:25,860 --> 00:23:28,799
wants to try it out okay I would ask him

561
00:23:28,799 --> 00:23:31,440
to or her to to reach out to us to the

562
00:23:31,440 --> 00:23:35,120
maintainers we have uh um

563
00:23:35,120 --> 00:23:37,799
it's like you can find find the

564
00:23:37,799 --> 00:23:40,140
cubescape and cubescape Dev channels

565
00:23:40,140 --> 00:23:42,419
where we you can always reach us okay

566
00:23:42,419 --> 00:23:44,280
and therefore we are looking really for

567
00:23:44,280 --> 00:23:46,559
input okay from all of you and have

568
00:23:46,559 --> 00:23:49,679
either you're coming from your vendor or

569
00:23:49,679 --> 00:23:52,380
your uh your user or you are just you

570
00:23:52,380 --> 00:23:54,539
know a security enthusiastic okay we'll

571
00:23:54,539 --> 00:23:59,159
be happy to get any any feedback uh from

572
00:23:59,159 --> 00:24:00,480
you

573
00:24:00,480 --> 00:24:03,539
um and yeah also on ideas how to make it

574
00:24:03,539 --> 00:24:06,659
this uh even better but I can tell you

575
00:24:06,659 --> 00:24:09,840
that that even for we have also started

576
00:24:09,840 --> 00:24:11,880
this week to show it to another company

577
00:24:11,880 --> 00:24:13,919
I don't want to disclose their name

578
00:24:13,919 --> 00:24:16,260
because it's too early but they also

579
00:24:16,260 --> 00:24:18,059
started to use it and we'll be very very

580
00:24:18,059 --> 00:24:20,159
happy about the first uh their first

581
00:24:20,159 --> 00:24:22,260
results

582
00:24:22,260 --> 00:24:25,380
so uh we started you know with this

583
00:24:25,380 --> 00:24:27,120
picture

584
00:24:27,120 --> 00:24:29,400
um I can assure you that cubescape can't

585
00:24:29,400 --> 00:24:31,080
tell you which one of the real Waldo

586
00:24:31,080 --> 00:24:36,120
here uh and therefore I the my punchline

587
00:24:36,120 --> 00:24:38,700
is that there is no punch line here uh

588
00:24:38,700 --> 00:24:42,179
uh but but I think that this is a really

589
00:24:42,179 --> 00:24:43,740
great project and if you want to

590
00:24:43,740 --> 00:24:46,799
contribute it we are more than welcome

591
00:24:46,799 --> 00:24:50,460
um and please rate this talk thank you

592
00:24:50,460 --> 00:24:52,200
very much and if you have questions I'm

593
00:24:52,200 --> 00:24:54,440
here

594
00:25:17,580 --> 00:25:20,039
so

595
00:25:20,039 --> 00:25:20,580
um

596
00:25:20,580 --> 00:25:24,659
good question okay uh con cubescape is

597
00:25:24,659 --> 00:25:26,820
working controls are working either on

598
00:25:26,820 --> 00:25:30,360
live Cube API data okay or from even

599
00:25:30,360 --> 00:25:34,080
from uh from yaml files so you can you

600
00:25:34,080 --> 00:25:35,940
know this is just a tool you can feed it

601
00:25:35,940 --> 00:25:38,400
from both directions so can you can

602
00:25:38,400 --> 00:25:40,740
create you can do this prioritization on

603
00:25:40,740 --> 00:25:43,140
your Helm charts okay already you know

604
00:25:43,140 --> 00:25:45,539
in your git okay and get a view of which

605
00:25:45,539 --> 00:25:48,080
one of how they are fair one to another

606
00:25:48,080 --> 00:25:51,299
honestly okay if you are scanning a lot

607
00:25:51,299 --> 00:25:53,880
okay in once you will get like this

608
00:25:53,880 --> 00:25:56,279
prioritization but I think it's more

609
00:25:56,279 --> 00:25:58,380
interesting inside the cluster okay

610
00:25:58,380 --> 00:26:00,299
because there have a you have there a

611
00:26:00,299 --> 00:26:02,520
lot of workloads together you can

612
00:26:02,520 --> 00:26:04,200
compare to each other

613
00:26:04,200 --> 00:26:06,659
but looking at the attack chains and the

614
00:26:06,659 --> 00:26:09,120
attack tree itself I think it can be

615
00:26:09,120 --> 00:26:12,000
also valuable you know offline okay even

616
00:26:12,000 --> 00:26:14,159
before you are deploying stuff in your

617
00:26:14,159 --> 00:26:17,100
cluster and as of today the only the

618
00:26:17,100 --> 00:26:20,039
only two data which goes inside can the

619
00:26:20,039 --> 00:26:23,460
this engine is the kubernetes objects

620
00:26:23,460 --> 00:26:26,760
themselves and uh and vulnerability

621
00:26:26,760 --> 00:26:28,380
information which is a little bit

622
00:26:28,380 --> 00:26:30,539
lagging but it's it's been it's going to

623
00:26:30,539 --> 00:26:32,520
be there

624
00:26:32,520 --> 00:26:35,000
yeah

625
00:26:35,000 --> 00:26:40,880
anything else one two three thank you

