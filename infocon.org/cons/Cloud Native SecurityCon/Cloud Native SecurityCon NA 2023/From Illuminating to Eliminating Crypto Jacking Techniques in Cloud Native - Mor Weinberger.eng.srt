1
00:00:00,000 --> 00:00:02,639
I'm so hi everyone I'm Mo Weinberger and

2
00:00:02,639 --> 00:00:04,620
I'm here to talk about from Illuminating

3
00:00:04,620 --> 00:00:06,839
to eliminating crypto jacking techniques

4
00:00:06,839 --> 00:00:11,099
in Cloud native on The Today agenda we

5
00:00:11,099 --> 00:00:13,380
are going to I'm going to present myself

6
00:00:13,380 --> 00:00:15,360
then we will talk about the crypto

7
00:00:15,360 --> 00:00:18,359
mining process then we will go over the

8
00:00:18,359 --> 00:00:20,699
birth of crypto jacking and why it's all

9
00:00:20,699 --> 00:00:22,500
appealing to Bad actors

10
00:00:22,500 --> 00:00:24,900
then we will go deep dive into some of

11
00:00:24,900 --> 00:00:26,640
the

12
00:00:26,640 --> 00:00:28,800
um crypto jacking evolutions and that

13
00:00:28,800 --> 00:00:30,599
Trend and we'll we will end up with

14
00:00:30,599 --> 00:00:33,239
detection and mitigation

15
00:00:33,239 --> 00:00:36,000
okay so quick intro so hi everyone again

16
00:00:36,000 --> 00:00:38,219
I'm more Weinberger I'm a Staff software

17
00:00:38,219 --> 00:00:41,640
engineer in aqua security I joined Aqua

18
00:00:41,640 --> 00:00:43,940
a year ago as part of the acquisition of

19
00:00:43,940 --> 00:00:46,920
argon security before that I worked for

20
00:00:46,920 --> 00:00:50,100
a Microsoft for about four years on the

21
00:00:50,100 --> 00:00:53,219
cloud security products and I really

22
00:00:53,219 --> 00:00:55,620
like to mix the engineering work with

23
00:00:55,620 --> 00:00:59,100
threat hunting and security researching

24
00:00:59,100 --> 00:01:01,440
stuff and this is basically why I'm here

25
00:01:01,440 --> 00:01:02,760
and this is basically why I'm talking

26
00:01:02,760 --> 00:01:05,040
about this topic

27
00:01:05,040 --> 00:01:07,979
okay so let's start so let's talk a

28
00:01:07,979 --> 00:01:09,659
little bit about what is the actual

29
00:01:09,659 --> 00:01:11,580
crypto mining process

30
00:01:11,580 --> 00:01:13,500
so in short it's basically the process

31
00:01:13,500 --> 00:01:15,360
of verifying transaction on the

32
00:01:15,360 --> 00:01:18,479
blockchain uh this verification process

33
00:01:18,479 --> 00:01:20,939
is actually solving a cryptographic

34
00:01:20,939 --> 00:01:25,080
puzzles and this requires compute power

35
00:01:25,080 --> 00:01:28,020
and because this activity of verifying

36
00:01:28,020 --> 00:01:30,060
transaction is super important for the

37
00:01:30,060 --> 00:01:35,100
security of the crypto Network and they

38
00:01:35,100 --> 00:01:37,500
those miners are getting reward with C

39
00:01:37,500 --> 00:01:40,920
with the transaction fee

40
00:01:40,920 --> 00:01:43,979
um in a type of uh you know new coins

41
00:01:43,979 --> 00:01:46,200
okay so let's see how easy is that to

42
00:01:46,200 --> 00:01:48,299
become a crypto Miner

43
00:01:48,299 --> 00:01:49,920
um so all you need is basically four

44
00:01:49,920 --> 00:01:51,479
things so the first thing you need to

45
00:01:51,479 --> 00:01:53,759
choose your cryptocurrency coin there

46
00:01:53,759 --> 00:01:55,500
are like multiple coins and each one has

47
00:01:55,500 --> 00:01:57,659
its own capabilities and its own

48
00:01:57,659 --> 00:02:00,899
features then you will need to buy uh

49
00:02:00,899 --> 00:02:03,840
bio equipment and as far as it will be

50
00:02:03,840 --> 00:02:09,139
uh strong equipment you could mine

51
00:02:09,139 --> 00:02:12,180
efficiency efficiently sorry

52
00:02:12,180 --> 00:02:13,739
um but if you're a bad actor you can

53
00:02:13,739 --> 00:02:17,040
just hijack systems and run your a minor

54
00:02:17,040 --> 00:02:19,080
you will also need to create a crypto

55
00:02:19,080 --> 00:02:22,260
wallet it's very simple and

56
00:02:22,260 --> 00:02:25,260
totally open source and free and you

57
00:02:25,260 --> 00:02:28,200
need to choose the mining software and

58
00:02:28,200 --> 00:02:30,239
configure it on your device so it's

59
00:02:30,239 --> 00:02:32,400
super easy you can do all those all

60
00:02:32,400 --> 00:02:35,340
those steps in just few minutes

61
00:02:35,340 --> 00:02:38,940
okay so let's quickly quickly review the

62
00:02:38,940 --> 00:02:41,519
birth of actually crypto jacking

63
00:02:41,519 --> 00:02:42,239
um

64
00:02:42,239 --> 00:02:46,980
activity so it kind of start on 2017s

65
00:02:46,980 --> 00:02:51,060
when corn Hive offered a web client

66
00:02:51,060 --> 00:02:53,340
minor code which basically means if you

67
00:02:53,340 --> 00:02:55,800
have if you are an owner of a popular

68
00:02:55,800 --> 00:02:58,860
website you can take the card put it in

69
00:02:58,860 --> 00:03:01,920
your website and then the visitors will

70
00:03:01,920 --> 00:03:05,519
start mining cryptocoin for you

71
00:03:05,519 --> 00:03:08,480
for helping with the funds of the site

72
00:03:08,480 --> 00:03:11,760
then we start seeing that there were

73
00:03:11,760 --> 00:03:13,200
some

74
00:03:13,200 --> 00:03:16,140
website popular website especially on

75
00:03:16,140 --> 00:03:19,440
the video sites that adopt this approach

76
00:03:19,440 --> 00:03:23,000
and add Conway code into their website

77
00:03:23,000 --> 00:03:25,980
but I think is most of them added

78
00:03:25,980 --> 00:03:28,200
secretly which means that they didn't

79
00:03:28,200 --> 00:03:30,840
notify the visitors and of course the

80
00:03:30,840 --> 00:03:33,440
you know the visitors the users

81
00:03:33,440 --> 00:03:36,239
didn't really like it it basically

82
00:03:36,239 --> 00:03:40,319
utilized their CPU tilde maximum

83
00:03:40,319 --> 00:03:42,860
um then we start seeing that bad actors

84
00:03:42,860 --> 00:03:46,340
that bridge uh website

85
00:03:46,340 --> 00:03:48,780
focused on government-based and

86
00:03:48,780 --> 00:03:49,640
University

87
00:03:49,640 --> 00:03:52,799
affect them with Khan I've called

88
00:03:52,799 --> 00:03:56,400
and we also saw that those Bad actors

89
00:03:56,400 --> 00:03:59,480
targeting unpatched servers with some

90
00:03:59,480 --> 00:04:02,099
non-vulnerability and again they just

91
00:04:02,099 --> 00:04:07,339
affect affect them with crypto mining

92
00:04:07,379 --> 00:04:09,319
um then we starting

93
00:04:09,319 --> 00:04:12,780
that they also targeting unpatched

94
00:04:12,780 --> 00:04:16,798
routers and actually affect them with

95
00:04:16,798 --> 00:04:19,560
with corn Hive code which basically

96
00:04:19,560 --> 00:04:23,100
means that on every HTTP request that

97
00:04:23,100 --> 00:04:25,139
sent into the router the router

98
00:04:25,139 --> 00:04:29,460
injecting response can have uh add a

99
00:04:29,460 --> 00:04:30,660
conif code

100
00:04:30,660 --> 00:04:33,360
and at that point we start seeing like

101
00:04:33,360 --> 00:04:34,860
Reaper mining everywhere this is

102
00:04:34,860 --> 00:04:36,840
basically an advertising screen in some

103
00:04:36,840 --> 00:04:39,360
parking lot and did you spot a miner

104
00:04:39,360 --> 00:04:41,160
here it's on the

105
00:04:41,160 --> 00:04:42,900
right

106
00:04:42,900 --> 00:04:46,080
here it is this is a nice hash Miner a

107
00:04:46,080 --> 00:04:50,280
client that run on this iot device

108
00:04:50,280 --> 00:04:53,220
okay so basically but why it's so

109
00:04:53,220 --> 00:04:56,540
appealing to Bad actors

110
00:04:57,000 --> 00:04:59,699
so there are there are multiple reasons

111
00:04:59,699 --> 00:05:01,680
for that so the first reason is about

112
00:05:01,680 --> 00:05:03,900
the anonymization

113
00:05:03,900 --> 00:05:06,240
so basically when you create a crypto

114
00:05:06,240 --> 00:05:08,600
wallet you don't need to provide any

115
00:05:08,600 --> 00:05:11,759
identification and to do it to doing the

116
00:05:11,759 --> 00:05:14,820
correlation is uh impossible and there

117
00:05:14,820 --> 00:05:16,800
are like additional coins like Monero

118
00:05:16,800 --> 00:05:19,800
that add another layer of anonymity

119
00:05:19,800 --> 00:05:23,580
and they basically not allows to see

120
00:05:23,580 --> 00:05:25,020
their blockchain so for example if I

121
00:05:25,020 --> 00:05:27,840
have a crypto wallet I'm a Bad actors I

122
00:05:27,840 --> 00:05:30,900
still crypto coins I am a hijacking

123
00:05:30,900 --> 00:05:34,259
systems and now the everyone

124
00:05:34,259 --> 00:05:37,259
um detect my crypto wallet as suspicious

125
00:05:37,259 --> 00:05:40,199
so once I just transfer the funds into

126
00:05:40,199 --> 00:05:42,180
another wallet it couldn't be

127
00:05:42,180 --> 00:05:43,919
addressable because the transaction on

128
00:05:43,919 --> 00:05:46,259
the blockchain are not public

129
00:05:46,259 --> 00:05:49,500
it's also very easy to fast cash out

130
00:05:49,500 --> 00:05:51,780
once I have the funds on my crypto

131
00:05:51,780 --> 00:05:53,759
wallet I'm good to convert it to other

132
00:05:53,759 --> 00:05:56,759
coin use exchange to cash out

133
00:05:56,759 --> 00:05:58,979
and we will see that it's super easy to

134
00:05:58,979 --> 00:06:00,600
do it in scale

135
00:06:00,600 --> 00:06:03,479
it's also suitable for a newbies and

136
00:06:03,479 --> 00:06:05,940
script kiddies there is no like deep

137
00:06:05,940 --> 00:06:08,699
knowledge that you need to have on on

138
00:06:08,699 --> 00:06:11,759
crypto or currency Network you can just

139
00:06:11,759 --> 00:06:13,979
run one line of code and you are good to

140
00:06:13,979 --> 00:06:16,199
to start in the crypto mining and

141
00:06:16,199 --> 00:06:17,759
unfortunately

142
00:06:17,759 --> 00:06:18,479
um

143
00:06:18,479 --> 00:06:21,780
organization consider discrete risk as a

144
00:06:21,780 --> 00:06:23,880
nuisance

145
00:06:23,880 --> 00:06:26,220
okay so enough with that let's start

146
00:06:26,220 --> 00:06:28,160
seeing some crypto jacking techniques

147
00:06:28,160 --> 00:06:31,860
that we saw in our research team called

148
00:06:31,860 --> 00:06:34,440
Nautilus in aqua security and also when

149
00:06:34,440 --> 00:06:37,139
connecting with organization

150
00:06:37,139 --> 00:06:39,479
so the first thing we will focus on is

151
00:06:39,479 --> 00:06:42,660
uh is kubernetes environment so on the

152
00:06:42,660 --> 00:06:45,180
left you could see the master node which

153
00:06:45,180 --> 00:06:47,400
contains the API server and other stuff

154
00:06:47,400 --> 00:06:49,979
on the right is yet another node

155
00:06:49,979 --> 00:06:52,020
okay and we will go over on the popular

156
00:06:52,020 --> 00:06:55,139
attack vectors that bad actors

157
00:06:55,139 --> 00:06:57,180
specifically crypto jackers are

158
00:06:57,180 --> 00:06:59,759
targeting and looking for

159
00:06:59,759 --> 00:07:02,880
so the first attack Vector is basically

160
00:07:02,880 --> 00:07:05,400
looking for a vulnerable application

161
00:07:05,400 --> 00:07:07,800
which means that in this scenario we

162
00:07:07,800 --> 00:07:10,979
have engine Linux that running on a pod

163
00:07:10,979 --> 00:07:11,580
um

164
00:07:11,580 --> 00:07:13,500
it exposed to the internet and this

165
00:07:13,500 --> 00:07:16,560
engine Linux has some RS RC

166
00:07:16,560 --> 00:07:18,060
vulnerability

167
00:07:18,060 --> 00:07:19,919
and the attacker doesn't at that point

168
00:07:19,919 --> 00:07:21,360
doesn't really care if it's run on

169
00:07:21,360 --> 00:07:23,880
kubernetes or not okay just scan the

170
00:07:23,880 --> 00:07:26,280
worldwide APS looking for a for this

171
00:07:26,280 --> 00:07:28,979
non-vulnerability since it exploitable

172
00:07:28,979 --> 00:07:31,440
so it's very easy to retrieve the

173
00:07:31,440 --> 00:07:34,099
exploit code and it just

174
00:07:34,099 --> 00:07:38,580
execute it and now we have a foothold in

175
00:07:38,580 --> 00:07:40,080
the pod

176
00:07:40,080 --> 00:07:42,479
so at that point we start seeing in the

177
00:07:42,479 --> 00:07:46,080
last few years that those actors are

178
00:07:46,080 --> 00:07:47,900
start being familiar with kubernetes

179
00:07:47,900 --> 00:07:51,240
environment and they are trying to look

180
00:07:51,240 --> 00:07:54,479
for a lateral movement for a privilege

181
00:07:54,479 --> 00:07:56,580
elevation

182
00:07:56,580 --> 00:07:59,099
um they are checking if though if this

183
00:07:59,099 --> 00:08:01,740
pod running any

184
00:08:01,740 --> 00:08:03,780
privileged container or any

185
00:08:03,780 --> 00:08:06,240
configuration like Mount was that allows

186
00:08:06,240 --> 00:08:09,180
him to to control the whole node

187
00:08:09,180 --> 00:08:10,979
and this is basically the first attack

188
00:08:10,979 --> 00:08:14,039
Vector that I review here

189
00:08:14,039 --> 00:08:16,740
second one is the misconfiguration

190
00:08:16,740 --> 00:08:19,259
misconfiguration on the docker Daemon

191
00:08:19,259 --> 00:08:22,020
so Dockers Dockers was around a little

192
00:08:22,020 --> 00:08:24,539
bit before communities became so popular

193
00:08:24,539 --> 00:08:28,560
and we we still see customers that and

194
00:08:28,560 --> 00:08:31,159
organizations that are using Dockers

195
00:08:31,159 --> 00:08:34,140
and this one is about a misconfiguration

196
00:08:34,140 --> 00:08:35,880
of the docker demons which basically

197
00:08:35,880 --> 00:08:38,458
means that the docker demon Port is

198
00:08:38,458 --> 00:08:40,919
exposed to the internet and there is no

199
00:08:40,919 --> 00:08:42,299
any authentication or access level

200
00:08:42,299 --> 00:08:44,459
control that is required

201
00:08:44,459 --> 00:08:46,740
and again this bad Act was basically

202
00:08:46,740 --> 00:08:49,440
scanned worldwide looking for this uh

203
00:08:49,440 --> 00:08:51,480
this specific port and they're just

204
00:08:51,480 --> 00:08:54,300
starting to communicate with the API

205
00:08:54,300 --> 00:08:56,880
what they are what they actually able to

206
00:08:56,880 --> 00:08:59,640
do is to list all the images list the

207
00:08:59,640 --> 00:09:01,920
running containers and getting shell on

208
00:09:01,920 --> 00:09:03,240
those containers

209
00:09:03,240 --> 00:09:06,120
and deploy new containers with crypto

210
00:09:06,120 --> 00:09:08,480
mining

211
00:09:10,260 --> 00:09:12,120
um third attack vectors is about

212
00:09:12,120 --> 00:09:15,540
poisoning the public registries for

213
00:09:15,540 --> 00:09:17,720
example dokarab is the most famous

214
00:09:17,720 --> 00:09:21,420
registry and we see that actors doing

215
00:09:21,420 --> 00:09:24,120
something that call this technique this

216
00:09:24,120 --> 00:09:26,580
technique technique sorry called type of

217
00:09:26,580 --> 00:09:27,959
squatting

218
00:09:27,959 --> 00:09:29,940
and basically what they are trying to do

219
00:09:29,940 --> 00:09:33,899
is to push malicious container for

220
00:09:33,899 --> 00:09:35,940
example this on the right we have the

221
00:09:35,940 --> 00:09:38,279
valid and popular tensorflow Docker

222
00:09:38,279 --> 00:09:40,560
image it's very pop it's very popular in

223
00:09:40,560 --> 00:09:43,800
machine learning foymock and this actor

224
00:09:43,800 --> 00:09:47,600
published a Docker image that called

225
00:09:47,600 --> 00:09:51,300
tensorflow which as you guess contains a

226
00:09:51,300 --> 00:09:53,519
crypto Miner and they are basically

227
00:09:53,519 --> 00:09:57,000
depends on the on the fact that

228
00:09:57,000 --> 00:09:59,220
developer will misspell the container

229
00:09:59,220 --> 00:10:00,839
image

230
00:10:00,839 --> 00:10:02,700
um as you can see the this image

231
00:10:02,700 --> 00:10:06,600
specifically has more than a 1K pools so

232
00:10:06,600 --> 00:10:10,880
this technique is is quite work

233
00:10:10,980 --> 00:10:12,300
um okay

234
00:10:12,300 --> 00:10:15,000
the four attack Vector is about a

235
00:10:15,000 --> 00:10:17,700
misconfiguration of kubernetes dashboard

236
00:10:17,700 --> 00:10:21,600
so kubernetes dashboard is a easy way to

237
00:10:21,600 --> 00:10:23,420
easy interface

238
00:10:23,420 --> 00:10:27,300
on your qualities cluster and what you

239
00:10:27,300 --> 00:10:31,140
actually capable of is to list all the

240
00:10:31,140 --> 00:10:34,860
running pods list secret and even get a

241
00:10:34,860 --> 00:10:37,680
shell on on those container all just

242
00:10:37,680 --> 00:10:39,480
from your browser

243
00:10:39,480 --> 00:10:42,360
okay this is actually uh an exposed

244
00:10:42,360 --> 00:10:46,279
Docker dashboard in the while

245
00:10:46,620 --> 00:10:49,800
and once and once you and and this

246
00:10:49,800 --> 00:10:52,320
basically allows you to have full

247
00:10:52,320 --> 00:10:54,959
control on your cluster

248
00:10:54,959 --> 00:10:55,680
um

249
00:10:55,680 --> 00:10:57,860
another attack Vector is about

250
00:10:57,860 --> 00:11:01,260
accessing the kubernetes API when it

251
00:11:01,260 --> 00:11:05,040
misconfigured again the API the

252
00:11:05,040 --> 00:11:07,320
kubernetes API Port is exposed and it

253
00:11:07,320 --> 00:11:09,060
doesn't require any authentication or

254
00:11:09,060 --> 00:11:10,860
access level control

255
00:11:10,860 --> 00:11:13,040
and the recommendence API is actually

256
00:11:13,040 --> 00:11:15,240
responsible to communicate it with the

257
00:11:15,240 --> 00:11:18,779
node and once you able to control it you

258
00:11:18,779 --> 00:11:22,860
basically have a cluster level control

259
00:11:22,860 --> 00:11:25,320
um and the last one is about a

260
00:11:25,320 --> 00:11:27,600
misconfiguration of the kublet so the

261
00:11:27,600 --> 00:11:30,240
kublet is stored on every one of the

262
00:11:30,240 --> 00:11:32,640
node and irresponsible to communicate it

263
00:11:32,640 --> 00:11:35,519
with the kubernetes API and once you

264
00:11:35,519 --> 00:11:40,440
misconfigure it so the bad actor has a

265
00:11:40,440 --> 00:11:43,500
node level control here

266
00:11:43,500 --> 00:11:48,000
and basically he allows to to execute

267
00:11:48,000 --> 00:11:49,740
command on the running containers and

268
00:11:49,740 --> 00:11:51,899
deploy new containers

269
00:11:51,899 --> 00:11:55,160
and and at that point we also saw that

270
00:11:55,160 --> 00:11:57,839
those Bad actors are familiar with uh

271
00:11:57,839 --> 00:12:00,720
with the kubernetes features itself and

272
00:12:00,720 --> 00:12:02,640
they are leveraging them in order to

273
00:12:02,640 --> 00:12:05,220
deploy the the mining containers in the

274
00:12:05,220 --> 00:12:07,620
scale means they are using a demon's

275
00:12:07,620 --> 00:12:10,920
deployment and and replica said in order

276
00:12:10,920 --> 00:12:14,579
to deploy the their stuff on every on

277
00:12:14,579 --> 00:12:17,579
every node in the on every pod

278
00:12:17,579 --> 00:12:20,839
okay just second

279
00:12:23,279 --> 00:12:27,060
okay so basically those attack vectors

280
00:12:27,060 --> 00:12:30,420
are being around for like many years but

281
00:12:30,420 --> 00:12:32,820
we still see that crypto jacket are

282
00:12:32,820 --> 00:12:35,820
upgrading their techniques and doing

283
00:12:35,820 --> 00:12:37,680
their optimization one of those

284
00:12:37,680 --> 00:12:40,440
optimization is about changing the huge

285
00:12:40,440 --> 00:12:41,519
pages

286
00:12:41,519 --> 00:12:45,360
which basically allows the actors to

287
00:12:45,360 --> 00:12:48,560
increase the memory page

288
00:12:48,560 --> 00:12:51,720
and basically those actors

289
00:12:51,720 --> 00:12:54,959
uh one once they are have a foothold on

290
00:12:54,959 --> 00:12:57,120
the containers if they will just run the

291
00:12:57,120 --> 00:12:59,480
minor as is it will not be that

292
00:12:59,480 --> 00:13:02,040
efficient for them so they are basically

293
00:13:02,040 --> 00:13:04,260
looking for how many cores and basically

294
00:13:04,260 --> 00:13:06,300
the architecture of the environment and

295
00:13:06,300 --> 00:13:08,399
they set the huge patients to to be

296
00:13:08,399 --> 00:13:11,040
optimal and by the documentation of a

297
00:13:11,040 --> 00:13:13,260
few of those open source miners this

298
00:13:13,260 --> 00:13:15,180
could

299
00:13:15,180 --> 00:13:18,320
this could help with increased uh

300
00:13:18,320 --> 00:13:21,540
efficiency by 50 percent

301
00:13:21,540 --> 00:13:25,260
we also saw that those Bad actors are

302
00:13:25,260 --> 00:13:28,260
aware that there are more Bad actors on

303
00:13:28,260 --> 00:13:30,480
the environment we also sit on our

304
00:13:30,480 --> 00:13:32,519
honeypots that are like multiple actors

305
00:13:32,519 --> 00:13:34,500
that basically battering each others

306
00:13:34,500 --> 00:13:36,779
because no one of them wants to share

307
00:13:36,779 --> 00:13:39,480
the resources right so we see them

308
00:13:39,480 --> 00:13:41,820
trying to disable and kill each one of

309
00:13:41,820 --> 00:13:43,260
those

310
00:13:43,260 --> 00:13:44,700
um and we also see that they are

311
00:13:44,700 --> 00:13:47,700
adopting techniques of wood keys and

312
00:13:47,700 --> 00:13:50,300
fireless and they're also trying to

313
00:13:50,300 --> 00:13:52,920
disable and remove the

314
00:13:52,920 --> 00:13:56,639
Cloud security agent those two examples

315
00:13:56,639 --> 00:13:59,220
are one of alien which is the Alibaba

316
00:13:59,220 --> 00:14:02,100
Cloud agent and the bottom one is the

317
00:14:02,100 --> 00:14:05,279
gcloud agent

318
00:14:05,279 --> 00:14:07,920
but what do you think okay we saw some

319
00:14:07,920 --> 00:14:09,899
techniques on the kubernetes style on

320
00:14:09,899 --> 00:14:11,639
the runtime side what do you think are

321
00:14:11,639 --> 00:14:13,740
those crypto jacket shifting left with

322
00:14:13,740 --> 00:14:16,620
the ecosystem are they aware of of the

323
00:14:16,620 --> 00:14:18,540
new technologies that the organizations

324
00:14:18,540 --> 00:14:21,120
are adapting around the around the left

325
00:14:21,120 --> 00:14:22,860
side

326
00:14:22,860 --> 00:14:25,380
so of course yes this is basically a

327
00:14:25,380 --> 00:14:26,459
campaign

328
00:14:26,459 --> 00:14:30,360
that we discover a year ago

329
00:14:30,360 --> 00:14:33,000
of Bad actors that are trying to abuse

330
00:14:33,000 --> 00:14:36,240
the cicd32 so basically they are not

331
00:14:36,240 --> 00:14:39,540
needed to find any any unpatched servers

332
00:14:39,540 --> 00:14:43,079
or music sorry misconfiguration

333
00:14:43,079 --> 00:14:45,360
um they are also they only need to craft

334
00:14:45,360 --> 00:14:46,800
some

335
00:14:46,800 --> 00:14:50,220
um some some techniques that they can do

336
00:14:50,220 --> 00:14:52,860
it in scale and basically the the this

337
00:14:52,860 --> 00:14:56,220
method is unlimited so what those Bad

338
00:14:56,220 --> 00:14:58,440
actors are basically

339
00:14:58,440 --> 00:15:01,279
done here is creating a GitHub repo

340
00:15:01,279 --> 00:15:05,339
connected into cicd platform okay use

341
00:15:05,339 --> 00:15:08,160
the free tier of course and on every

342
00:15:08,160 --> 00:15:10,019
change of this repo it's basically

343
00:15:10,019 --> 00:15:13,079
trigger a build job a build process all

344
00:15:13,079 --> 00:15:15,180
right and basically those actors

345
00:15:15,180 --> 00:15:18,120
understand that the build step could be

346
00:15:18,120 --> 00:15:20,100
hijacked the results of it could be

347
00:15:20,100 --> 00:15:24,000
hijacked in the favor of crypto mining

348
00:15:24,000 --> 00:15:26,279
okay so what basically happened here how

349
00:15:26,279 --> 00:15:28,440
they made it in scale

350
00:15:28,440 --> 00:15:32,639
so on the build step they said that

351
00:15:32,639 --> 00:15:36,540
first they will clone the repo then they

352
00:15:36,540 --> 00:15:39,779
will choose some some random file and

353
00:15:39,779 --> 00:15:42,720
Mains and made some random change

354
00:15:42,720 --> 00:15:46,100
then they will push this change

355
00:15:46,100 --> 00:15:48,480
inside the repository and what will

356
00:15:48,480 --> 00:15:52,260
happen another CI job will trigger which

357
00:15:52,260 --> 00:15:54,300
basically means at that point that they

358
00:15:54,300 --> 00:15:56,459
have infinitive Loop because every build

359
00:15:56,459 --> 00:15:58,680
will trigger another build

360
00:15:58,680 --> 00:16:01,260
and after they trigger another build

361
00:16:01,260 --> 00:16:04,380
they are pulling a custom-made Miner

362
00:16:04,380 --> 00:16:06,959
from another repository and they run

363
00:16:06,959 --> 00:16:10,860
this Miner until the maximum time of the

364
00:16:10,860 --> 00:16:13,620
CIA offering

365
00:16:13,620 --> 00:16:16,380
this table we found on one of those bad

366
00:16:16,380 --> 00:16:18,240
actor repositories is basically

367
00:16:18,240 --> 00:16:21,600
elaborate what are the three tiers on

368
00:16:21,600 --> 00:16:24,779
those cicd and Sr services

369
00:16:24,779 --> 00:16:25,860
um

370
00:16:25,860 --> 00:16:29,519
and we also saw that those badactors are

371
00:16:29,519 --> 00:16:33,560
learning and they are aware of every

372
00:16:33,560 --> 00:16:37,860
limitation of of every ECI CD platform

373
00:16:37,860 --> 00:16:40,440
this one targeted GitHub action as you

374
00:16:40,440 --> 00:16:44,579
can see it it set the maximum parallel

375
00:16:44,579 --> 00:16:47,940
jobs to 20 which is the limit which is

376
00:16:47,940 --> 00:16:52,139
the maximum allows they also said that

377
00:16:52,139 --> 00:16:54,959
every job will run no matter if a

378
00:16:54,959 --> 00:16:57,360
previous job will failed

379
00:16:57,360 --> 00:17:00,600
and they also use interesting evasion

380
00:17:00,600 --> 00:17:03,720
techniques here which The Miner is an

381
00:17:03,720 --> 00:17:05,819
elf binary which basically run on the

382
00:17:05,819 --> 00:17:09,720
Linux but they run it on a Windows box

383
00:17:09,720 --> 00:17:13,260
and the use and the able to execute dclf

384
00:17:13,260 --> 00:17:18,119
by the WSL feature of of windows which

385
00:17:18,119 --> 00:17:21,599
is the windows subsystem for Linux

386
00:17:21,599 --> 00:17:25,500
and we believe they they doing so

387
00:17:25,500 --> 00:17:28,140
for the for running the Yale of binary

388
00:17:28,140 --> 00:17:32,360
in kind of sandbox mode

389
00:17:32,520 --> 00:17:34,200
um another eventual technique that we we

390
00:17:34,200 --> 00:17:35,280
saw here

391
00:17:35,280 --> 00:17:37,679
is in order to make the network

392
00:17:37,679 --> 00:17:41,160
detection a little bit higher harder

393
00:17:41,160 --> 00:17:43,620
sorry so what they done here they are

394
00:17:43,620 --> 00:17:47,600
using root Keys techniques that erupt by

395
00:17:47,600 --> 00:17:51,179
npm package so they basically just pull

396
00:17:51,179 --> 00:17:54,840
an npm package which is very regular and

397
00:17:54,840 --> 00:17:56,160
popular you know

398
00:17:56,160 --> 00:17:58,980
um things to do with as part of the as

399
00:17:58,980 --> 00:18:01,799
part of your build but this one is

400
00:18:01,799 --> 00:18:05,700
wrapping a wood root Keys CLI that

401
00:18:05,700 --> 00:18:08,640
allows the Bad actors to hide is minor

402
00:18:08,640 --> 00:18:11,100
from the process list

403
00:18:11,100 --> 00:18:12,900
and as you can see on the right they

404
00:18:12,900 --> 00:18:15,539
managed to round multiple GitHub action

405
00:18:15,539 --> 00:18:17,539
jobs successfully

406
00:18:17,539 --> 00:18:21,360
and each jobs run into the maximum of uh

407
00:18:21,360 --> 00:18:25,620
of uh of the allow of GitHub action like

408
00:18:25,620 --> 00:18:28,919
until it exceeds the maximum time

409
00:18:28,919 --> 00:18:31,559
okay and this one is kind of funny uh

410
00:18:31,559 --> 00:18:33,059
shortly after I published the write-up

411
00:18:33,059 --> 00:18:36,660
about how many actors abuse those cicd

412
00:18:36,660 --> 00:18:39,240
features I got a message on LinkedIn

413
00:18:39,240 --> 00:18:41,880
that says hi Mo I'm a crypto Miner and I

414
00:18:41,880 --> 00:18:43,280
think we share the same interest

415
00:18:43,280 --> 00:18:45,900
regarding the field and I think to

416
00:18:45,900 --> 00:18:47,760
myself that shouldn't be the case the

417
00:18:47,760 --> 00:18:50,660
key point right

418
00:18:54,000 --> 00:18:56,400
okay but um

419
00:18:56,400 --> 00:18:58,980
what about supply chain techniques are

420
00:18:58,980 --> 00:19:02,520
those Bad actors adopting some supply

421
00:19:02,520 --> 00:19:04,500
chain techniques

422
00:19:04,500 --> 00:19:06,900
so as you guess all the answers here are

423
00:19:06,900 --> 00:19:08,220
yes

424
00:19:08,220 --> 00:19:10,260
um so yeah there are shifting left and

425
00:19:10,260 --> 00:19:11,820
they are aware of the risk on the

426
00:19:11,820 --> 00:19:13,559
software supply chain

427
00:19:13,559 --> 00:19:16,380
and just to align here

428
00:19:16,380 --> 00:19:18,200
so basically the software supply chain

429
00:19:18,200 --> 00:19:21,179
is start with developers that write code

430
00:19:21,179 --> 00:19:24,120
manage it in source code management then

431
00:19:24,120 --> 00:19:27,299
build it ship the package it into

432
00:19:27,299 --> 00:19:30,059
artifacts and then deploy it in into the

433
00:19:30,059 --> 00:19:32,520
runtime and the thing about it that

434
00:19:32,520 --> 00:19:34,080
every one of those steps that I just

435
00:19:34,080 --> 00:19:35,880
mentioned

436
00:19:35,880 --> 00:19:38,520
um using open source third-party

437
00:19:38,520 --> 00:19:39,840
dependencies

438
00:19:39,840 --> 00:19:43,200
and those Bad actors are understand one

439
00:19:43,200 --> 00:19:45,720
single point of value here

440
00:19:45,720 --> 00:19:46,500
um

441
00:19:46,500 --> 00:19:51,000
and they target exactly that so the

442
00:19:51,000 --> 00:19:53,760
first attack Vector that we saw is about

443
00:19:53,760 --> 00:19:55,919
a technique that call a type of

444
00:19:55,919 --> 00:19:59,280
squatting and this one was discovered by

445
00:19:59,280 --> 00:20:03,360
our friends on check marks we saw they

446
00:20:03,360 --> 00:20:07,980
saw that these Bad actors push multiple

447
00:20:07,980 --> 00:20:11,160
open source package into a pipeline into

448
00:20:11,160 --> 00:20:14,179
the public pipeline

449
00:20:14,280 --> 00:20:17,880
um and it contains as you guess a minor

450
00:20:17,880 --> 00:20:19,980
and they try to mimic the popular

451
00:20:19,980 --> 00:20:23,760
request package on a Pi Pi and because

452
00:20:23,760 --> 00:20:25,820
because Pi Pi

453
00:20:25,820 --> 00:20:27,380
just

454
00:20:27,380 --> 00:20:30,539
requests the GitHub repository that

455
00:20:30,539 --> 00:20:34,140
correlate to the the package so this bad

456
00:20:34,140 --> 00:20:38,039
actor just put the valid request one and

457
00:20:38,039 --> 00:20:40,620
it gets the exact amount of stars and

458
00:20:40,620 --> 00:20:43,679
forks and it was able to really make a

459
00:20:43,679 --> 00:20:48,360
good view of of this package

460
00:20:48,360 --> 00:20:49,260
um

461
00:20:49,260 --> 00:20:51,840
another another attack Vector is around

462
00:20:51,840 --> 00:20:54,179
something that call dependency confusion

463
00:20:54,179 --> 00:20:56,760
it happened with pytorch just like a few

464
00:20:56,760 --> 00:20:59,160
weeks ago and basically what happened

465
00:20:59,160 --> 00:21:01,260
here is that as part of the pi torch

466
00:21:01,260 --> 00:21:05,580
build processing it's a load um

467
00:21:05,580 --> 00:21:09,000
is owns dependencies and some of them

468
00:21:09,000 --> 00:21:12,120
were internal dependencies and and the

469
00:21:12,120 --> 00:21:14,520
way that and the way that when you're

470
00:21:14,520 --> 00:21:17,880
trying to load dependencies on a python

471
00:21:17,880 --> 00:21:20,340
so you're first going to the public by

472
00:21:20,340 --> 00:21:23,640
index and if we can find it it will get

473
00:21:23,640 --> 00:21:26,220
into your internal repository and

474
00:21:26,220 --> 00:21:29,400
because python didn't preserve this

475
00:21:29,400 --> 00:21:32,580
specific library library on the Pi Pi

476
00:21:32,580 --> 00:21:35,460
public index so

477
00:21:35,460 --> 00:21:39,299
this Bad actors founded he pushed a new

478
00:21:39,299 --> 00:21:40,919
package into the public Pi Pi with

479
00:21:40,919 --> 00:21:42,059
malicious

480
00:21:42,059 --> 00:21:45,120
Cod and pytorch

481
00:21:45,120 --> 00:21:47,280
pulls it as part of the build

482
00:21:47,280 --> 00:21:49,799
and he totally got a compromised this

483
00:21:49,799 --> 00:21:51,480
version

484
00:21:51,480 --> 00:21:54,000
and if you think to yourself okay we saw

485
00:21:54,000 --> 00:21:55,919
a type of spotting techniques we also

486
00:21:55,919 --> 00:21:56,659
see

487
00:21:56,659 --> 00:21:58,919
depends the confusion techniques it

488
00:21:58,919 --> 00:22:00,720
could be like some security solution

489
00:22:00,720 --> 00:22:04,799
around that that could help with defense

490
00:22:04,799 --> 00:22:06,840
the thing about open source dependencies

491
00:22:06,840 --> 00:22:09,659
is that there are multiple popular

492
00:22:09,659 --> 00:22:12,480
packages that are maintained by just

493
00:22:12,480 --> 00:22:14,340
single maintenance or maybe a few

494
00:22:14,340 --> 00:22:16,740
maintainers and we are not really aware

495
00:22:16,740 --> 00:22:20,159
of who stand behind them and what is the

496
00:22:20,159 --> 00:22:23,159
security measurement that he takes and

497
00:22:23,159 --> 00:22:26,940
how secure and how kills how secure is

498
00:22:26,940 --> 00:22:28,440
he so

499
00:22:28,440 --> 00:22:31,799
we see here a bad example of uh parser

500
00:22:31,799 --> 00:22:34,980
that happens a year maybe two years ago

501
00:22:34,980 --> 00:22:37,400
which is very popular

502
00:22:37,400 --> 00:22:41,820
UI library on the npm

503
00:22:41,820 --> 00:22:45,720
and this one got compromised by a leaked

504
00:22:45,720 --> 00:22:47,700
token of

505
00:22:47,700 --> 00:22:50,900
of the owner and it got

506
00:22:50,900 --> 00:22:55,640
breached badly this library was used by

507
00:22:55,640 --> 00:23:00,200
the most big Tech and this bad actor had

508
00:23:00,200 --> 00:23:02,820
crypto mining but also passport still

509
00:23:02,820 --> 00:23:05,100
stealing a code and he targeted both

510
00:23:05,100 --> 00:23:07,679
windows and Linux and basically trying

511
00:23:07,679 --> 00:23:09,780
to Target both the developers the build

512
00:23:09,780 --> 00:23:10,679
system

513
00:23:10,679 --> 00:23:13,620
and runtime

514
00:23:13,620 --> 00:23:15,600
but you could think to yourself okay

515
00:23:15,600 --> 00:23:18,840
like what is the actual risk here

516
00:23:18,840 --> 00:23:21,120
um so the obvious one is about financial

517
00:23:21,120 --> 00:23:23,760
loss and the service degradation either

518
00:23:23,760 --> 00:23:27,179
it either it runs on your AWS account or

519
00:23:27,179 --> 00:23:30,059
like cloud account or on your build it

520
00:23:30,059 --> 00:23:33,179
will increase your uh charge

521
00:23:33,179 --> 00:23:35,179
it you will also

522
00:23:35,179 --> 00:23:37,740
face the service degradation

523
00:23:37,740 --> 00:23:40,039
but the most important here is about

524
00:23:40,039 --> 00:23:44,100
those Bad actors has the ability to run

525
00:23:44,100 --> 00:23:44,940
um

526
00:23:44,940 --> 00:23:47,039
I'll be the record on your environment

527
00:23:47,039 --> 00:23:49,559
if it's on your build they can basically

528
00:23:49,559 --> 00:23:51,380
steal your

529
00:23:51,380 --> 00:23:53,760
secrets and on your around the

530
00:23:53,760 --> 00:23:56,880
environment they will start they will

531
00:23:56,880 --> 00:23:59,700
try to elevate permission and lateral

532
00:23:59,700 --> 00:24:03,179
movement to other high assets like your

533
00:24:03,179 --> 00:24:07,620
DB and other sensitive information

534
00:24:07,620 --> 00:24:11,840
so what we can actually do about it

535
00:24:15,659 --> 00:24:18,480
Okay so

536
00:24:18,480 --> 00:24:19,919
um so if you don't have any security

537
00:24:19,919 --> 00:24:22,500
measurement or if you have some so my

538
00:24:22,500 --> 00:24:24,900
suggestion here is first

539
00:24:24,900 --> 00:24:27,000
follow the compliance and best practices

540
00:24:27,000 --> 00:24:28,860
there are like multiple organizations

541
00:24:28,860 --> 00:24:32,700
out there this is just two of them with

542
00:24:32,700 --> 00:24:35,400
uh security expert that invest their

543
00:24:35,400 --> 00:24:38,400
time and their expertise in order to

544
00:24:38,400 --> 00:24:42,600
create standards and best practices

545
00:24:42,600 --> 00:24:47,039
specifically for each popular technology

546
00:24:47,039 --> 00:24:49,320
and the second thing about it is you

547
00:24:49,320 --> 00:24:51,720
need to understand your architecture

548
00:24:51,720 --> 00:24:54,240
from your Cloud into your formula code

549
00:24:54,240 --> 00:24:57,000
into your Cloud understand what what are

550
00:24:57,000 --> 00:24:57,860
the

551
00:24:57,860 --> 00:25:00,720
technologies that you are using what are

552
00:25:00,720 --> 00:25:03,299
the integration parts and basically

553
00:25:03,299 --> 00:25:06,780
follow those best boxes and guidelines

554
00:25:06,780 --> 00:25:08,159
and

555
00:25:08,159 --> 00:25:10,020
there are many like open source tools

556
00:25:10,020 --> 00:25:12,780
out there that that could help you run

557
00:25:12,780 --> 00:25:13,860
those

558
00:25:13,860 --> 00:25:16,500
around those guidelines and checks this

559
00:25:16,500 --> 00:25:19,080
is just two of them the first one is

560
00:25:19,080 --> 00:25:22,380
trivi that basically can help you run on

561
00:25:22,380 --> 00:25:24,960
your kubernetes cluster and even on your

562
00:25:24,960 --> 00:25:27,779
way yaml before it gets deployed uh

563
00:25:27,779 --> 00:25:29,340
security posture management to find

564
00:25:29,340 --> 00:25:31,220
those means configuration that I just

565
00:25:31,220 --> 00:25:35,640
present you and the others

566
00:25:35,640 --> 00:25:37,980
um and chain bench with which is focused

567
00:25:37,980 --> 00:25:40,559
on your software supply chain and

568
00:25:40,559 --> 00:25:42,620
they're running the same approaches

569
00:25:42,620 --> 00:25:46,140
approaches but on your left side and

570
00:25:46,140 --> 00:25:49,860
those two can also provide you a

571
00:25:49,860 --> 00:25:52,080
compliance report either it's a CIS or

572
00:25:52,080 --> 00:25:54,179
other and then you could see your

573
00:25:54,179 --> 00:25:56,159
security departure management

574
00:25:56,159 --> 00:26:00,059
based on those compliance report

575
00:26:00,059 --> 00:26:03,900
if you got to here so you can also scan

576
00:26:03,900 --> 00:26:05,580
your code your infrastructure is called

577
00:26:05,580 --> 00:26:07,919
and dependencies for vulnerabilities for

578
00:26:07,919 --> 00:26:10,679
misconfiguration and you can also do it

579
00:26:10,679 --> 00:26:14,100
with trivi and you can also

580
00:26:14,100 --> 00:26:17,820
run a static code analysis some copy is

581
00:26:17,820 --> 00:26:21,659
a great tool for that with more than 1

582
00:26:21,659 --> 00:26:24,600
000 rules that supports most of the

583
00:26:24,600 --> 00:26:27,600
popular languages and it's able to

584
00:26:27,600 --> 00:26:31,340
detect a risky code

585
00:26:31,340 --> 00:26:33,779
even before it gets merged into your

586
00:26:33,779 --> 00:26:35,880
source code like for example it could

587
00:26:35,880 --> 00:26:39,900
detect xss and injection injection risk

588
00:26:39,900 --> 00:26:41,820
within your code

589
00:26:41,820 --> 00:26:44,640
but this is not enough right trying to

590
00:26:44,640 --> 00:26:46,620
reduce your risk and fix

591
00:26:46,620 --> 00:26:48,539
misconfiguration

592
00:26:48,539 --> 00:26:50,720
most of the time is not enough

593
00:26:50,720 --> 00:26:54,299
because basically you have some

594
00:26:54,299 --> 00:26:55,500
vulnerabilities

595
00:26:55,500 --> 00:26:57,779
and other misconfiguration that you

596
00:26:57,779 --> 00:26:59,640
didn't have the time to

597
00:26:59,640 --> 00:27:03,120
to address and there are always like a

598
00:27:03,120 --> 00:27:05,279
new uh zero days and other

599
00:27:05,279 --> 00:27:07,980
vulnerabilities so you need we need to

600
00:27:07,980 --> 00:27:10,020
get one layer deeper

601
00:27:10,020 --> 00:27:12,059
we need to look for a abnormal and

602
00:27:12,059 --> 00:27:15,480
suspicious activity again on your cloud

603
00:27:15,480 --> 00:27:18,120
account to look for any increase in your

604
00:27:18,120 --> 00:27:22,460
resource creation on your abnormally

605
00:27:22,460 --> 00:27:26,360
identity activity

606
00:27:26,460 --> 00:27:27,179
um

607
00:27:27,179 --> 00:27:30,360
um and also you need to have some random

608
00:27:30,360 --> 00:27:31,559
protection

609
00:27:31,559 --> 00:27:34,559
there are like great tools out there I

610
00:27:34,559 --> 00:27:36,419
will just mention one of them which is a

611
00:27:36,419 --> 00:27:39,659
Tracy uh is is based on the ebpf

612
00:27:39,659 --> 00:27:42,200
Technologies which means it runs on your

613
00:27:42,200 --> 00:27:44,400
kernel level

614
00:27:44,400 --> 00:27:48,059
and it allows to detect root keys and

615
00:27:48,059 --> 00:27:50,100
files attacks

616
00:27:50,100 --> 00:27:54,440
and if you don't trust your third party

617
00:27:54,440 --> 00:27:57,659
libraries you can use guard dog by

618
00:27:57,659 --> 00:28:00,360
datadog that has the capability to run a

619
00:28:00,360 --> 00:28:02,419
static code analysis and detect

620
00:28:02,419 --> 00:28:06,600
malicious code like crypto mining on

621
00:28:06,600 --> 00:28:09,918
your Pi Pi lovers

622
00:28:10,140 --> 00:28:12,600
um so this is it basically

623
00:28:12,600 --> 00:28:15,600
thank you everyone and uh I would

624
00:28:15,600 --> 00:28:17,640
appreciate if you could scan the QR code

625
00:28:17,640 --> 00:28:19,799
and provide a feedback

626
00:28:19,799 --> 00:28:22,400
thanks

627
00:28:25,140 --> 00:28:26,820
I don't think I have enough time for

628
00:28:26,820 --> 00:28:30,000
question but feel free to connect me in

629
00:28:30,000 --> 00:28:32,900
person thanks

