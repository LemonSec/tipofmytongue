1
00:00:00,000 --> 00:00:03,300
I'm yossi Wiseman and with me is Ron

2
00:00:03,300 --> 00:00:05,160
pleasekin we are from Microsoft Defender

3
00:00:05,160 --> 00:00:07,859
for cloud and today we are going to talk

4
00:00:07,859 --> 00:00:10,860
about lateral movement in kubernetes

5
00:00:10,860 --> 00:00:14,580
so uh this is the agenda for today uh we

6
00:00:14,580 --> 00:00:16,199
will start with talking about identities

7
00:00:16,199 --> 00:00:17,580
in kubernetes

8
00:00:17,580 --> 00:00:19,980
then we will talk about inner cluster

9
00:00:19,980 --> 00:00:22,220
lateral Movement we will speak about

10
00:00:22,220 --> 00:00:24,660
cluster to Cloud lateral movement in the

11
00:00:24,660 --> 00:00:26,279
various Cloud providers

12
00:00:26,279 --> 00:00:28,560
then we will talk about detections and

13
00:00:28,560 --> 00:00:30,420
mitigations and then we will have some

14
00:00:30,420 --> 00:00:33,840
key takeaways so let's start

15
00:00:33,840 --> 00:00:36,120
so let's start with an overview about

16
00:00:36,120 --> 00:00:39,120
identities in kubernetes so when we're

17
00:00:39,120 --> 00:00:40,680
talking about identities in kubernetes

18
00:00:40,680 --> 00:00:42,899
we're usually talking about three main

19
00:00:42,899 --> 00:00:46,559
areas the first one is how do users or

20
00:00:46,559 --> 00:00:48,120
applications in the cluster from outside

21
00:00:48,120 --> 00:00:50,399
the cluster authenticate who is the

22
00:00:50,399 --> 00:00:53,280
cluster so for example if I need if I

23
00:00:53,280 --> 00:00:55,260
need to deploy resources or I have a

24
00:00:55,260 --> 00:00:56,699
devops pipeline that into deploy

25
00:00:56,699 --> 00:00:59,219
resources how do we authenticate with

26
00:00:59,219 --> 00:01:01,260
the cluster

27
00:01:01,260 --> 00:01:03,600
the second one is how do workloads in

28
00:01:03,600 --> 00:01:05,519
the cluster authenticate within the

29
00:01:05,519 --> 00:01:07,500
cluster with the kubernetes API server

30
00:01:07,500 --> 00:01:09,960
and the third one is how workloads in

31
00:01:09,960 --> 00:01:11,640
the cluster authenticate with resources

32
00:01:11,640 --> 00:01:14,340
in cloud in in the cloud outside the

33
00:01:14,340 --> 00:01:16,560
cluster for example if I have a pod that

34
00:01:16,560 --> 00:01:18,960
needs access to cloud storage so how

35
00:01:18,960 --> 00:01:21,060
does this pod authenticate with the

36
00:01:21,060 --> 00:01:23,540
cloud storage

37
00:01:23,759 --> 00:01:26,580
uh in our talk we will focus on point

38
00:01:26,580 --> 00:01:29,040
two and three point two will be relevant

39
00:01:29,040 --> 00:01:30,720
for the inner cluster lateral movement

40
00:01:30,720 --> 00:01:33,299
and point three will be relevant for the

41
00:01:33,299 --> 00:01:35,579
cluster to Cloud Delta movement

42
00:01:35,579 --> 00:01:37,680
so we are starting with inner cluster

43
00:01:37,680 --> 00:01:39,840
lateral movement and let's assume that

44
00:01:39,840 --> 00:01:41,520
we have a pod in our cluster that is

45
00:01:41,520 --> 00:01:44,340
compromised now Parts can become com can

46
00:01:44,340 --> 00:01:45,900
become compromised in multiple ways

47
00:01:45,900 --> 00:01:47,820
let's say that I have a pod that runs a

48
00:01:47,820 --> 00:01:49,920
web application and that web application

49
00:01:49,920 --> 00:01:51,960
is vulnerable and somebody exploited

50
00:01:51,960 --> 00:01:53,640
this vulnerability so now we have a

51
00:01:53,640 --> 00:01:56,899
cluster with a vulnerable part

52
00:01:57,119 --> 00:01:58,979
um so here we can see kubernetes cluster

53
00:01:58,979 --> 00:02:01,560
you can see uh the control plan and you

54
00:02:01,560 --> 00:02:02,939
can see the nodes that are running the

55
00:02:02,939 --> 00:02:05,100
pods and here is POD a which is

56
00:02:05,100 --> 00:02:06,840
compromised

57
00:02:06,840 --> 00:02:09,538
so what is lateral movement in the

58
00:02:09,538 --> 00:02:12,360
cluster so it could be multiple things

59
00:02:12,360 --> 00:02:14,580
it could be a movement from one pod to

60
00:02:14,580 --> 00:02:16,980
another pod

61
00:02:16,980 --> 00:02:19,080
it could be a movement from a pod to a

62
00:02:19,080 --> 00:02:20,520
node

63
00:02:20,520 --> 00:02:23,340
and ideally attackers would like to get

64
00:02:23,340 --> 00:02:25,800
a cluster takeover which means that they

65
00:02:25,800 --> 00:02:27,720
would have a full control over the

66
00:02:27,720 --> 00:02:30,360
entire workload

67
00:02:30,360 --> 00:02:32,400
and the question is how can attackers

68
00:02:32,400 --> 00:02:35,099
Leverage The compromised pod that they

69
00:02:35,099 --> 00:02:38,819
have access to to gain cluster takeover

70
00:02:38,819 --> 00:02:41,760
in other words we are asking which tools

71
00:02:41,760 --> 00:02:43,800
does the attacker have to move laterally

72
00:02:43,800 --> 00:02:46,019
in the cluster so here we can see two

73
00:02:46,019 --> 00:02:48,180
identity types that we have inside the

74
00:02:48,180 --> 00:02:51,120
Clusters the first one is uh the service

75
00:02:51,120 --> 00:02:54,599
account that is used by pod a so if the

76
00:02:54,599 --> 00:02:56,940
attacker has access to pod a obviously

77
00:02:56,940 --> 00:02:58,980
they also have access to the service

78
00:02:58,980 --> 00:03:01,680
account token of pod a

79
00:03:01,680 --> 00:03:04,080
and the second one is the notes identity

80
00:03:04,080 --> 00:03:06,780
that is used by kublet so if attackers

81
00:03:06,780 --> 00:03:09,599
somehow managed to escape from pod a to

82
00:03:09,599 --> 00:03:12,120
the underlying node or they somehow

83
00:03:12,120 --> 00:03:14,280
managed to get access to the file system

84
00:03:14,280 --> 00:03:16,500
of the underlying node and we will see

85
00:03:16,500 --> 00:03:19,200
how they might achieve that shortly so

86
00:03:19,200 --> 00:03:22,440
they can also use this identity

87
00:03:22,440 --> 00:03:25,560
all right so how can attackers leverage

88
00:03:25,560 --> 00:03:28,500
those identities

89
00:03:28,500 --> 00:03:30,840
the good news are that it becomes a

90
00:03:30,840 --> 00:03:32,400
little bit more difficult now and it

91
00:03:32,400 --> 00:03:33,540
becomes a little bit more difficult

92
00:03:33,540 --> 00:03:35,400
because in newer versions of kubernetes

93
00:03:35,400 --> 00:03:37,739
there are some security features that

94
00:03:37,739 --> 00:03:39,780
restrict operation that can lead to

95
00:03:39,780 --> 00:03:42,420
Cluster takeover and lateral movement

96
00:03:42,420 --> 00:03:44,700
uh we are going to talk about two

97
00:03:44,700 --> 00:03:46,080
notable ones

98
00:03:46,080 --> 00:03:49,140
um so the first one is that now um read

99
00:03:49,140 --> 00:03:52,200
secret access does not give you

100
00:03:52,200 --> 00:03:55,019
um so read secret permissions isn't

101
00:03:55,019 --> 00:03:57,239
enough for lateral movement

102
00:03:57,239 --> 00:03:59,580
um in the past as probably many of you

103
00:03:59,580 --> 00:04:01,560
know uh kubernetes store token of

104
00:04:01,560 --> 00:04:04,379
service accounts as secret objects uh so

105
00:04:04,379 --> 00:04:06,959
if I could read secrets so I could also

106
00:04:06,959 --> 00:04:11,480
read tokens of service accounts

107
00:04:11,519 --> 00:04:13,319
um in neural versions of kubernetes it's

108
00:04:13,319 --> 00:04:15,060
not the case and kubernetes doesn't

109
00:04:15,060 --> 00:04:17,820
store automatically Secrets um tokens of

110
00:04:17,820 --> 00:04:19,680
service accounts as kubernetes secrets

111
00:04:19,680 --> 00:04:21,839
and if I want to acquire a token I must

112
00:04:21,839 --> 00:04:24,000
use a dedicated API call that gives me a

113
00:04:24,000 --> 00:04:26,580
short-lived one

114
00:04:26,580 --> 00:04:29,759
the second thing is that node takeover

115
00:04:29,759 --> 00:04:32,280
doesn't mean necessarily a cluster

116
00:04:32,280 --> 00:04:35,880
takeover so in the past once you obtain

117
00:04:35,880 --> 00:04:38,759
the identity of the um of the node the

118
00:04:38,759 --> 00:04:40,740
cubelet identity

119
00:04:40,740 --> 00:04:42,660
you became practically cluster admin

120
00:04:42,660 --> 00:04:44,520
because this identity is very permissive

121
00:04:44,520 --> 00:04:46,380
but in neural versions of kubernetes

122
00:04:46,380 --> 00:04:48,540
it's not the case because the couplet is

123
00:04:48,540 --> 00:04:50,520
restricted and can only control

124
00:04:50,520 --> 00:04:52,740
resources that are scheduled on its own

125
00:04:52,740 --> 00:04:55,919
node which means on that particular node

126
00:04:55,919 --> 00:04:57,300
so

127
00:04:57,300 --> 00:04:59,580
um so it doesn't mean a cluster takeover

128
00:04:59,580 --> 00:05:02,699
anymore this is achieved by the node

129
00:05:02,699 --> 00:05:04,320
authorizer and the node restriction

130
00:05:04,320 --> 00:05:07,400
admission controller

131
00:05:07,500 --> 00:05:09,120
um so there were some improvement in

132
00:05:09,120 --> 00:05:11,479
this area

133
00:05:11,940 --> 00:05:14,940
but some common misconfigurations

134
00:05:14,940 --> 00:05:18,419
still uh still allow lateral movement

135
00:05:18,419 --> 00:05:20,520
and uh now we will see a real world

136
00:05:20,520 --> 00:05:22,740
example that was the root cause of a

137
00:05:22,740 --> 00:05:23,820
vulnerability in a containers

138
00:05:23,820 --> 00:05:25,440
application

139
00:05:25,440 --> 00:05:28,080
all right so um in our example we have

140
00:05:28,080 --> 00:05:29,699
application that has the permission to

141
00:05:29,699 --> 00:05:31,979
update itself so what does it mean

142
00:05:31,979 --> 00:05:34,080
so in this case we have a deployment

143
00:05:34,080 --> 00:05:36,120
resource that uses a service account

144
00:05:36,120 --> 00:05:38,699
that there's the test premise has

145
00:05:38,699 --> 00:05:42,120
permissions to update uh the deployment

146
00:05:42,120 --> 00:05:45,860
object so you can see here that we have

147
00:05:45,860 --> 00:05:49,080
a cluster role definition

148
00:05:49,080 --> 00:05:52,800
that the service account uh is bound to

149
00:05:52,800 --> 00:05:54,840
and it has permissions to update this

150
00:05:54,840 --> 00:05:57,000
specific deployment okay

151
00:05:57,000 --> 00:05:58,800
you can see the resource name that

152
00:05:58,800 --> 00:06:00,960
specified this specific deployment

153
00:06:00,960 --> 00:06:02,880
um so this is

154
00:06:02,880 --> 00:06:05,699
um the cluster role definition so maybe

155
00:06:05,699 --> 00:06:07,860
it sounds harmless because now we have a

156
00:06:07,860 --> 00:06:09,479
deployment that has a service account

157
00:06:09,479 --> 00:06:11,460
that can update itself only itself not

158
00:06:11,460 --> 00:06:13,380
other objects in the cluster so it

159
00:06:13,380 --> 00:06:15,000
sounds maybe okay it sounds fine I mean

160
00:06:15,000 --> 00:06:17,600
it can update only itself

161
00:06:17,600 --> 00:06:20,880
but it means that now I can update my

162
00:06:20,880 --> 00:06:23,160
own configuration and specifically it

163
00:06:23,160 --> 00:06:24,840
means that the application can change

164
00:06:24,840 --> 00:06:26,580
its configuration to run a privileged

165
00:06:26,580 --> 00:06:29,060
container

166
00:06:29,520 --> 00:06:30,660
um and if the container is now

167
00:06:30,660 --> 00:06:32,460
privileged it can access to the

168
00:06:32,460 --> 00:06:35,160
underlying node and if it can access to

169
00:06:35,160 --> 00:06:36,900
the underlying node it can access to the

170
00:06:36,900 --> 00:06:41,280
node node's identity like we said now as

171
00:06:41,280 --> 00:06:43,800
we said right now achieving the notes

172
00:06:43,800 --> 00:06:44,880
identity

173
00:06:44,880 --> 00:06:46,919
doesn't necessarily mean a cluster

174
00:06:46,919 --> 00:06:50,819
takeover like we explained but we can

175
00:06:50,819 --> 00:06:52,919
also specify in the configuration that

176
00:06:52,919 --> 00:06:54,539
we want to be scheduled on a specific

177
00:06:54,539 --> 00:06:57,360
node by using the node selector

178
00:06:57,360 --> 00:06:59,400
so what we have now

179
00:06:59,400 --> 00:07:02,100
is the ability to deploy a privileged

180
00:07:02,100 --> 00:07:04,139
container and we can decide on which

181
00:07:04,139 --> 00:07:06,780
node we want to deploy it so practically

182
00:07:06,780 --> 00:07:08,940
we are cluster we achieve the class to

183
00:07:08,940 --> 00:07:11,400
take over let's see it

184
00:07:11,400 --> 00:07:13,800
so we have a pod it can change its own

185
00:07:13,800 --> 00:07:16,080
deployment configuration so now we have

186
00:07:16,080 --> 00:07:18,479
a new pod

187
00:07:18,479 --> 00:07:21,419
um now this time the Pod is privileged

188
00:07:21,419 --> 00:07:24,000
and it can access to the underlying node

189
00:07:24,000 --> 00:07:27,000
now we will schedule one on node two and

190
00:07:27,000 --> 00:07:29,340
now we will schedule one on node three

191
00:07:29,340 --> 00:07:31,380
so

192
00:07:31,380 --> 00:07:34,940
now we have a cluster takeover

193
00:07:38,220 --> 00:07:41,900
so in this example we saw a permission

194
00:07:41,900 --> 00:07:44,940
that may lead to Cluster takeover

195
00:07:44,940 --> 00:07:46,560
and again it was based on the real world

196
00:07:46,560 --> 00:07:47,880
vulnerability

197
00:07:47,880 --> 00:07:50,340
let's go over a few more permissions

198
00:07:50,340 --> 00:07:52,199
that also may lead to Cluster takeover

199
00:07:52,199 --> 00:07:54,300
all right so this is the table

200
00:07:54,300 --> 00:07:56,819
so the first one is very similar to what

201
00:07:56,819 --> 00:07:59,340
we just saw if you can create a new pod

202
00:07:59,340 --> 00:08:01,319
or you can create a new controller in

203
00:08:01,319 --> 00:08:04,919
the cluster so you can use so you can

204
00:08:04,919 --> 00:08:06,599
specify its configuration you can

205
00:08:06,599 --> 00:08:09,300
specify it to be privileged and you can

206
00:08:09,300 --> 00:08:11,160
specify also the node that you want to

207
00:08:11,160 --> 00:08:13,380
be scheduled on and practically you can

208
00:08:13,380 --> 00:08:15,479
become

209
00:08:15,479 --> 00:08:17,819
um a cluster admin

210
00:08:17,819 --> 00:08:20,160
the second one is actually what we just

211
00:08:20,160 --> 00:08:21,900
talked about it's the update controller

212
00:08:21,900 --> 00:08:23,819
in our case we updated a deployment but

213
00:08:23,819 --> 00:08:25,620
it could be any other deploy any other

214
00:08:25,620 --> 00:08:28,580
controller as well

215
00:08:28,919 --> 00:08:31,379
uh the third one

216
00:08:31,379 --> 00:08:33,779
is an interesting one because as we said

217
00:08:33,779 --> 00:08:36,000
before uh in your versions of kubernetes

218
00:08:36,000 --> 00:08:39,000
kubernetes doesn't automatically create

219
00:08:39,000 --> 00:08:41,159
um secrets with tokens of service

220
00:08:41,159 --> 00:08:45,120
accounts however as a user I can still

221
00:08:45,120 --> 00:08:48,660
manually create a secret and specify

222
00:08:48,660 --> 00:08:51,420
that I want to I want it to be a token

223
00:08:51,420 --> 00:08:53,580
for a service account I just annotate

224
00:08:53,580 --> 00:08:56,160
the I annotate the secret with the name

225
00:08:56,160 --> 00:08:58,320
of the service account that I want so if

226
00:08:58,320 --> 00:09:01,019
I have the permissions to create a new

227
00:09:01,019 --> 00:09:03,300
secret and then I have the permission to

228
00:09:03,300 --> 00:09:06,600
read its value so I can get I can get

229
00:09:06,600 --> 00:09:09,360
the token a Long Live token of any

230
00:09:09,360 --> 00:09:13,160
service account that I want

231
00:09:13,740 --> 00:09:16,080
and uh the fourth one here in the table

232
00:09:16,080 --> 00:09:19,080
is the permission that you need in order

233
00:09:19,080 --> 00:09:22,620
to create short live token

234
00:09:22,620 --> 00:09:24,899
so that was in a cluster lateral

235
00:09:24,899 --> 00:09:26,940
movement now we will move to the second

236
00:09:26,940 --> 00:09:28,800
topic which is lateral movement from the

237
00:09:28,800 --> 00:09:31,620
cluster to the cloud and we will see how

238
00:09:31,620 --> 00:09:33,420
the two topics are actually sometimes

239
00:09:33,420 --> 00:09:36,260
related to each other

240
00:09:40,620 --> 00:09:41,820
thanks Jose

241
00:09:41,820 --> 00:09:43,740
so after we talked about lateral

242
00:09:43,740 --> 00:09:46,140
movement inside kubernetes clusters we

243
00:09:46,140 --> 00:09:47,760
will now move on to the second topic

244
00:09:47,760 --> 00:09:49,740
which is lateral movement form cluster

245
00:09:49,740 --> 00:09:52,560
to Cloud resources that are outside of

246
00:09:52,560 --> 00:09:53,700
the cluster

247
00:09:53,700 --> 00:09:56,940
so let's let's try to assess the

248
00:09:56,940 --> 00:09:59,580
imminence of an attacker pivoting from a

249
00:09:59,580 --> 00:10:01,200
cluster to the underlying Cloud

250
00:10:01,200 --> 00:10:02,519
environment

251
00:10:02,519 --> 00:10:04,260
coming to do so we should first

252
00:10:04,260 --> 00:10:06,540
acknowledge the different needs of which

253
00:10:06,540 --> 00:10:08,640
a managed cluster interacts with Cloud

254
00:10:08,640 --> 00:10:09,839
resources

255
00:10:09,839 --> 00:10:12,120
and there are two type of interactions

256
00:10:12,120 --> 00:10:15,300
first the maintenance routines ones for

257
00:10:15,300 --> 00:10:17,519
example with kubernetes being so Dynamic

258
00:10:17,519 --> 00:10:19,920
it's frankly it frequently needs to

259
00:10:19,920 --> 00:10:22,200
allocate or decommission VM

260
00:10:22,200 --> 00:10:24,720
this is done by ongoing engagement with

261
00:10:24,720 --> 00:10:27,180
Cloud apis the second type of

262
00:10:27,180 --> 00:10:30,920
interaction is sorry

263
00:10:31,860 --> 00:10:33,720
the second type of interaction is

264
00:10:33,720 --> 00:10:35,100
sourcing from the need to support

265
00:10:35,100 --> 00:10:37,740
customer workloads for example customer

266
00:10:37,740 --> 00:10:40,680
runs a pod that has a web service inside

267
00:10:40,680 --> 00:10:42,899
and this web service pushes that or

268
00:10:42,899 --> 00:10:45,120
reads data from S3 bucket that is

269
00:10:45,120 --> 00:10:47,640
outside of the cluster so as you can

270
00:10:47,640 --> 00:10:50,640
expect clusters that lives inside the

271
00:10:50,640 --> 00:10:52,920
cloud are tightly coupled with it with

272
00:10:52,920 --> 00:10:55,079
its resources

273
00:10:55,079 --> 00:10:58,260
so how kubernetes cluster authenticate

274
00:10:58,260 --> 00:11:01,380
themselves against cloud apis and the

275
00:11:01,380 --> 00:11:03,420
answer for this is that there are

276
00:11:03,420 --> 00:11:05,940
advancements in the way that kubernetes

277
00:11:05,940 --> 00:11:08,220
cluster can establish trust with Cloud

278
00:11:08,220 --> 00:11:10,980
resources in our talk today we will go

279
00:11:10,980 --> 00:11:12,540
over the following method of

280
00:11:12,540 --> 00:11:14,160
authentications

281
00:11:14,160 --> 00:11:16,940
so the first one is by storing a file

282
00:11:16,940 --> 00:11:20,100
locally on the kubernetes Node that

283
00:11:20,100 --> 00:11:22,260
stores Cloud credentials

284
00:11:22,260 --> 00:11:24,300
then we will talk about direct and

285
00:11:24,300 --> 00:11:27,720
indirect access to imds lastly we will

286
00:11:27,720 --> 00:11:29,820
show out kubernetes identities are being

287
00:11:29,820 --> 00:11:32,640
Federated as Cloud identities which is

288
00:11:32,640 --> 00:11:34,620
now powered by openid connect

289
00:11:34,620 --> 00:11:37,079
and while we dive into each of these

290
00:11:37,079 --> 00:11:38,820
methods we will demonstrate how

291
00:11:38,820 --> 00:11:42,060
attackers can also leverage each of the

292
00:11:42,060 --> 00:11:44,040
method to advance their foothold from

293
00:11:44,040 --> 00:11:47,300
cluster to Cloud

294
00:11:47,700 --> 00:11:50,220
so we are starting off with the way that

295
00:11:50,220 --> 00:11:52,920
AKs used to authenticate with Azure

296
00:11:52,920 --> 00:11:56,339
Resources with this method AKs stores a

297
00:11:56,339 --> 00:11:58,260
file that has a service principle secret

298
00:11:58,260 --> 00:12:02,040
on it and it was stores on each of the

299
00:12:02,040 --> 00:12:03,540
kubernetes nodes

300
00:12:03,540 --> 00:12:05,700
service principles are application-based

301
00:12:05,700 --> 00:12:07,860
identities in Azure they are like

302
00:12:07,860 --> 00:12:11,100
service accounts in kubernetes

303
00:12:11,100 --> 00:12:13,740
with this authentication method access

304
00:12:13,740 --> 00:12:16,560
to the node's file system meant

305
00:12:16,560 --> 00:12:19,620
elevation to a contributor role scope to

306
00:12:19,620 --> 00:12:21,600
the Azure Resource Group that hosts the

307
00:12:21,600 --> 00:12:23,519
cluster

308
00:12:23,519 --> 00:12:26,100
so now let's see it in action our

309
00:12:26,100 --> 00:12:28,560
attackers can leverage it

310
00:12:28,560 --> 00:12:31,140
so let's assume port a is compromised

311
00:12:31,140 --> 00:12:33,060
and it has a service account attached to

312
00:12:33,060 --> 00:12:34,200
it

313
00:12:34,200 --> 00:12:36,540
now if this service account is

314
00:12:36,540 --> 00:12:39,120
authorized to create new ports that

315
00:12:39,120 --> 00:12:41,640
attacker can abuse this formation and

316
00:12:41,640 --> 00:12:43,620
create a new pod with the configurations

317
00:12:43,620 --> 00:12:46,019
that mounts the credential the

318
00:12:46,019 --> 00:12:50,000
credential credential file to it

319
00:12:51,959 --> 00:12:54,540
this month result with a new container

320
00:12:54,540 --> 00:12:56,579
that can access the local credit file

321
00:12:56,579 --> 00:13:01,740
and make calls under the SPN identity

322
00:13:01,740 --> 00:13:04,019
and this is how attacker could have

323
00:13:04,019 --> 00:13:05,820
achieved a backdoor container with

324
00:13:05,820 --> 00:13:09,560
access to azure apis and as meant as as

325
00:13:09,560 --> 00:13:12,480
mentioned this was the default

326
00:13:12,480 --> 00:13:16,200
configuration for AKs in the past

327
00:13:16,200 --> 00:13:19,440
note that for this method the attacker

328
00:13:19,440 --> 00:13:22,620
needed access to the underlying node in

329
00:13:22,620 --> 00:13:24,720
most deployment it's not a trivial to

330
00:13:24,720 --> 00:13:26,760
it's not trivial to break the container

331
00:13:26,760 --> 00:13:29,459
isolation in the next method coming up

332
00:13:29,459 --> 00:13:31,800
we will see that escaping from a

333
00:13:31,800 --> 00:13:34,560
container is no longer a requirement

334
00:13:34,560 --> 00:13:36,120
so let's move on to the second

335
00:13:36,120 --> 00:13:38,279
authentication method that is currently

336
00:13:38,279 --> 00:13:42,300
the default in Azure AWS and gcp

337
00:13:42,300 --> 00:13:44,880
so we're going to talk about imds

338
00:13:44,880 --> 00:13:47,880
imds stands for instance metadata

339
00:13:47,880 --> 00:13:50,279
service it is a local it is a special

340
00:13:50,279 --> 00:13:52,920
endpoint that is accessible for every VM

341
00:13:52,920 --> 00:13:54,720
hosted in the cloud

342
00:13:54,720 --> 00:13:57,000
this type of service is implemented by

343
00:13:57,000 --> 00:14:00,180
all three major Cloud providers it

344
00:14:00,180 --> 00:14:02,160
basically allows VM in the cloud to

345
00:14:02,160 --> 00:14:05,160
query parameters about themselves for

346
00:14:05,160 --> 00:14:08,639
example what is my cloud identifier in

347
00:14:08,639 --> 00:14:11,220
which region I am I'm deployed or what I

348
00:14:11,220 --> 00:14:13,200
my network settings

349
00:14:13,200 --> 00:14:16,399
but also and perhaps most interestingly

350
00:14:16,399 --> 00:14:20,220
VMS can ask imds for token that

351
00:14:20,220 --> 00:14:23,160
represent Cloud identities

352
00:14:23,160 --> 00:14:25,920
all Cloud providers support attachment

353
00:14:25,920 --> 00:14:28,860
of identities to VM in Azure we call it

354
00:14:28,860 --> 00:14:31,860
managed identity in AWS it's called ec2

355
00:14:31,860 --> 00:14:34,740
role and a gcp it's a service account

356
00:14:34,740 --> 00:14:38,040
so here you can see how those apis look

357
00:14:38,040 --> 00:14:40,440
in each of the cloud providers and

358
00:14:40,440 --> 00:14:43,560
OneNote one one important note is that

359
00:14:43,560 --> 00:14:45,420
imds endpoints does not require

360
00:14:45,420 --> 00:14:47,040
Authentication

361
00:14:47,040 --> 00:14:49,440
for security it relies on the fact that

362
00:14:49,440 --> 00:14:52,680
each VM can only query its own metadata

363
00:14:52,680 --> 00:14:54,800
service

364
00:14:55,380 --> 00:14:58,560
in managed clusters kubernetes nodes are

365
00:14:58,560 --> 00:15:01,560
VMS in the cloud right so as such they

366
00:15:01,560 --> 00:15:03,360
have access to the metadata service like

367
00:15:03,360 --> 00:15:07,560
any other VM so by default pods can also

368
00:15:07,560 --> 00:15:09,300
access their node's metadata service

369
00:15:09,300 --> 00:15:13,019
that means the Pod can acquire token of

370
00:15:13,019 --> 00:15:15,360
the identities assigned to the node they

371
00:15:15,360 --> 00:15:16,680
are running on

372
00:15:16,680 --> 00:15:18,660
and of course the permissions of these

373
00:15:18,660 --> 00:15:21,060
tokens will have depend on the cloud

374
00:15:21,060 --> 00:15:22,860
provider and the specific configuration

375
00:15:22,860 --> 00:15:24,240
of the environment

376
00:15:24,240 --> 00:15:26,339
which will now see how it looks like in

377
00:15:26,339 --> 00:15:30,139
Azure AWS and gcp

378
00:15:30,480 --> 00:15:33,300
we will start with Azure so AKs cluster

379
00:15:33,300 --> 00:15:35,339
uses managed identities for their

380
00:15:35,339 --> 00:15:37,339
operation

381
00:15:37,339 --> 00:15:40,079
perhaps worth calling out that a managed

382
00:15:40,079 --> 00:15:42,959
identity is behind the scene a service a

383
00:15:42,959 --> 00:15:45,540
special type of service principle and

384
00:15:45,540 --> 00:15:46,740
the difference between managed

385
00:15:46,740 --> 00:15:49,079
identities to SPN is that managed

386
00:15:49,079 --> 00:15:51,720
identities eliminates the need for

387
00:15:51,720 --> 00:15:55,199
developer to developers to to manage its

388
00:15:55,199 --> 00:15:57,800
credentials

389
00:15:58,320 --> 00:16:00,839
so this is the this is the list of

390
00:16:00,839 --> 00:16:04,019
default managed identities by AKs some

391
00:16:04,019 --> 00:16:06,480
of them are quite powerful in red you

392
00:16:06,480 --> 00:16:08,399
can see that in some configuration the

393
00:16:08,399 --> 00:16:10,440
managed identities have a contributory

394
00:16:10,440 --> 00:16:13,160
role on the nodes Resource Group

395
00:16:13,160 --> 00:16:16,139
also users can add more managed

396
00:16:16,139 --> 00:16:18,980
identities or modify existing permission

397
00:16:18,980 --> 00:16:21,959
existing permissions of existing managed

398
00:16:21,959 --> 00:16:25,019
identities all depends on their need for

399
00:16:25,019 --> 00:16:26,760
example if my applications need access

400
00:16:26,760 --> 00:16:29,100
to a storage account or to a key Vault I

401
00:16:29,100 --> 00:16:30,839
can add permissions to these resources

402
00:16:30,839 --> 00:16:34,579
for an existing managed identity

403
00:16:34,680 --> 00:16:36,959
so like the table from previous slide

404
00:16:36,959 --> 00:16:40,459
AWS operates in a similar manner AKs

405
00:16:40,459 --> 00:16:43,199
cluster uses ec2 roles for their

406
00:16:43,199 --> 00:16:45,959
operations so we see in three roles the

407
00:16:45,959 --> 00:16:48,060
first the first wall we see includes

408
00:16:48,060 --> 00:16:49,800
permission to fetch images from

409
00:16:49,800 --> 00:16:52,380
container registry the second one is

410
00:16:52,380 --> 00:16:55,259
permissions of compute resources and the

411
00:16:55,259 --> 00:16:57,180
third one is permissions to edit the

412
00:16:57,180 --> 00:17:01,579
network configuration of an eks cluster

413
00:17:02,300 --> 00:17:05,699
GK also comes with built-in IIM service

414
00:17:05,699 --> 00:17:09,720
account but interestingly gke uses the

415
00:17:09,720 --> 00:17:11,880
default compute engine service account

416
00:17:11,880 --> 00:17:14,819
that has editor all assigned to it

417
00:17:14,819 --> 00:17:18,179
this annoyingly challenges the security

418
00:17:18,179 --> 00:17:21,179
boundary of the gke cluster it means

419
00:17:21,179 --> 00:17:24,299
that if a pod in gke get compromised the

420
00:17:24,299 --> 00:17:26,459
permission the attacker can achieve goes

421
00:17:26,459 --> 00:17:28,439
beyond the cluster

422
00:17:28,439 --> 00:17:31,679
it can impact the entire project

423
00:17:31,679 --> 00:17:35,580
for folks here that works with JK it's

424
00:17:35,580 --> 00:17:38,400
true that the permission are limited by

425
00:17:38,400 --> 00:17:41,580
access Scopes which restrict the apis

426
00:17:41,580 --> 00:17:43,820
that this service account can access to

427
00:17:43,820 --> 00:17:47,220
but even with this limitation this soul

428
00:17:47,220 --> 00:17:51,000
is still quite powerful for example it

429
00:17:51,000 --> 00:17:53,220
has read data permission it can read

430
00:17:53,220 --> 00:17:55,980
data permission it can read data from

431
00:17:55,980 --> 00:17:58,799
any cloud storage in the project as you

432
00:17:58,799 --> 00:18:01,200
can see in the image in the image of the

433
00:18:01,200 --> 00:18:03,440
slide

434
00:18:04,799 --> 00:18:07,620
so are those lateral movements look like

435
00:18:07,620 --> 00:18:09,179
in this method

436
00:18:09,179 --> 00:18:11,900
here again is a cluster

437
00:18:11,900 --> 00:18:14,640
let's keep only one note to simplify

438
00:18:14,640 --> 00:18:17,280
things a bit so as we discussed this

439
00:18:17,280 --> 00:18:20,940
node has access to an imds instance

440
00:18:20,940 --> 00:18:23,760
and now the port can retrieve token for

441
00:18:23,760 --> 00:18:27,059
a cloud identity and the metadata

442
00:18:27,059 --> 00:18:29,280
service returns a value token and

443
00:18:29,280 --> 00:18:31,140
depends on the permissions assigned to

444
00:18:31,140 --> 00:18:33,539
that identity this spot can query

445
00:18:33,539 --> 00:18:36,240
different Cloud apis right so for

446
00:18:36,240 --> 00:18:38,280
example it can read files from cloud

447
00:18:38,280 --> 00:18:41,160
storage Services another example would

448
00:18:41,160 --> 00:18:43,440
be fetching secrets from Azure key Vault

449
00:18:43,440 --> 00:18:45,419
or AWS KMS

450
00:18:45,419 --> 00:18:48,299
or even getting the credentials of other

451
00:18:48,299 --> 00:18:51,179
kubernetes clusters that are deployed in

452
00:18:51,179 --> 00:18:52,200
the cloud

453
00:18:52,200 --> 00:18:55,380
it always boils down to the permission

454
00:18:55,380 --> 00:18:57,780
assigned to the identity which the

455
00:18:57,780 --> 00:19:01,460
attacker can acquire tokens for

456
00:19:01,980 --> 00:19:04,679
so what problem we just saw on the one

457
00:19:04,679 --> 00:19:07,080
hand we saw that pods can freely access

458
00:19:07,080 --> 00:19:09,419
their node's identity and we should

459
00:19:09,419 --> 00:19:11,100
probably want to limit that

460
00:19:11,100 --> 00:19:14,520
but at the same time in some cases pods

461
00:19:14,520 --> 00:19:16,860
may need to legitimately acquire token

462
00:19:16,860 --> 00:19:19,740
to support the workload they are running

463
00:19:19,740 --> 00:19:21,720
so we want to allocate a specific

464
00:19:21,720 --> 00:19:24,960
identity to each pod that's needed and

465
00:19:24,960 --> 00:19:26,700
we want to make sure that pods have

466
00:19:26,700 --> 00:19:29,039
granular access to these these

467
00:19:29,039 --> 00:19:31,440
identities

468
00:19:31,440 --> 00:19:34,320
luckily this can be achieved and we are

469
00:19:34,320 --> 00:19:37,140
going to see two concepts that serves

470
00:19:37,140 --> 00:19:39,720
this goal the first one is indirect

471
00:19:39,720 --> 00:19:43,260
access to imds and the second is through

472
00:19:43,260 --> 00:19:45,539
Federation of kubernetes identities as

473
00:19:45,539 --> 00:19:47,160
Cloud identities

474
00:19:47,160 --> 00:19:51,299
let's start with indirect access to imds

475
00:19:51,299 --> 00:19:55,140
so we are not going to elaborate

476
00:19:55,140 --> 00:19:57,240
we are not going to elaborate too much

477
00:19:57,240 --> 00:19:59,760
here because this mechanism is not

478
00:19:59,760 --> 00:20:02,760
commonly used anymore but in general in

479
00:20:02,760 --> 00:20:06,360
this method when a pod calls imds its

480
00:20:06,360 --> 00:20:08,820
traffic is redirected to a local server

481
00:20:08,820 --> 00:20:11,820
then the local server queries imds on

482
00:20:11,820 --> 00:20:15,059
the pods BF and this is implemented by

483
00:20:15,059 --> 00:20:17,760
aadpod identity project which is now in

484
00:20:17,760 --> 00:20:20,039
duplication

485
00:20:20,039 --> 00:20:22,140
so we will quickly we will quickly go

486
00:20:22,140 --> 00:20:25,799
over our aadpod identity operates the

487
00:20:25,799 --> 00:20:29,400
first step is that traffic form per day

488
00:20:29,400 --> 00:20:32,520
to imds is intercepted and redirected to

489
00:20:32,520 --> 00:20:35,039
a local server that the nmi port that

490
00:20:35,039 --> 00:20:37,380
you see in the screen then the local

491
00:20:37,380 --> 00:20:40,559
server requests per day per day identity

492
00:20:40,559 --> 00:20:43,320
from the metadata service and with step

493
00:20:43,320 --> 00:20:47,220
3 the nmi returns amds response the

494
00:20:47,220 --> 00:20:49,980
token back to pod a

495
00:20:49,980 --> 00:20:52,919
a AAP pod identity has few limitation

496
00:20:52,919 --> 00:20:56,340
and that we call that we want to really

497
00:20:56,340 --> 00:20:59,700
go over we won't really cover today but

498
00:20:59,700 --> 00:21:01,559
I should just mention that Aid pod

499
00:21:01,559 --> 00:21:04,740
identity does not support all cnis

500
00:21:04,740 --> 00:21:07,460
uh

501
00:21:12,480 --> 00:21:15,780
all right uh thanks Ron so

502
00:21:15,780 --> 00:21:18,120
um now uh we'll move to the

503
00:21:18,120 --> 00:21:21,000
um last method for uh Cloud

504
00:21:21,000 --> 00:21:22,740
authentication

505
00:21:22,740 --> 00:21:24,780
um it's the last method in which

506
00:21:24,780 --> 00:21:27,360
um pods in the cluster can authenticate

507
00:21:27,360 --> 00:21:28,260
with

508
00:21:28,260 --> 00:21:31,080
um with the cloud and it is based on

509
00:21:31,080 --> 00:21:34,740
oidc or open ID connect

510
00:21:34,740 --> 00:21:37,080
um so this method is implemented by all

511
00:21:37,080 --> 00:21:39,120
major Cloud providers it's implemented

512
00:21:39,120 --> 00:21:42,960
by Azure AWS and UCP

513
00:21:42,960 --> 00:21:44,120
um

514
00:21:44,120 --> 00:21:45,900
that

515
00:21:45,900 --> 00:21:48,240
um here you can see how each cloud

516
00:21:48,240 --> 00:21:49,860
provider calls to this feature so in

517
00:21:49,860 --> 00:21:52,559
Asia with aad workload identity in AWS

518
00:21:52,559 --> 00:21:55,460
it's irsa and gcp it's working identity

519
00:21:55,460 --> 00:21:58,860
in gcp they actually using their

520
00:21:58,860 --> 00:22:01,500
implementation some aspects of the

521
00:22:01,500 --> 00:22:04,080
previous concept that we saw they use

522
00:22:04,080 --> 00:22:06,600
um they also intercept the traffic from

523
00:22:06,600 --> 00:22:09,419
imds to a local to imds to a local

524
00:22:09,419 --> 00:22:10,940
server

525
00:22:10,940 --> 00:22:13,799
but generally the concept is similar

526
00:22:13,799 --> 00:22:16,140
between the cloud providers

527
00:22:16,140 --> 00:22:19,320
so in this method the kubernetes cluster

528
00:22:19,320 --> 00:22:23,220
is used as an oidc identity provider and

529
00:22:23,220 --> 00:22:25,080
it means that the cloud identity

530
00:22:25,080 --> 00:22:27,299
platforms such as azio active directory

531
00:22:27,299 --> 00:22:30,000
or other identity platforms can trust

532
00:22:30,000 --> 00:22:32,640
tokens that are issued by the cluster

533
00:22:32,640 --> 00:22:35,700
and because of this trust applications

534
00:22:35,700 --> 00:22:38,520
in the cluster can exchange a token of a

535
00:22:38,520 --> 00:22:40,500
service account with a token of a cloud

536
00:22:40,500 --> 00:22:42,659
identity

537
00:22:42,659 --> 00:22:45,000
and this is a big advantage of this

538
00:22:45,000 --> 00:22:47,940
method because it means that now pods

539
00:22:47,940 --> 00:22:50,580
can authenticate with the cloud using

540
00:22:50,580 --> 00:22:52,980
their native identity native kubernetes

541
00:22:52,980 --> 00:22:55,320
identity which is their service accounts

542
00:22:55,320 --> 00:22:57,000
because and this is a big difference

543
00:22:57,000 --> 00:22:59,039
between what we saw between this and

544
00:22:59,039 --> 00:23:01,260
what we saw so far because so far we saw

545
00:23:01,260 --> 00:23:03,659
that if a pod wants to authenticate with

546
00:23:03,659 --> 00:23:06,059
the cloud so the Pod needs somehow to

547
00:23:06,059 --> 00:23:09,120
acquire a token of the cloud it needs a

548
00:23:09,120 --> 00:23:11,700
cloud credential but now we can see that

549
00:23:11,700 --> 00:23:13,799
pods can authenticate with the cloud

550
00:23:13,799 --> 00:23:16,500
using their own identity using the

551
00:23:16,500 --> 00:23:19,740
service accounts that they already have

552
00:23:19,740 --> 00:23:22,380
so they work the way it works is um so

553
00:23:22,380 --> 00:23:24,240
users can bind between a kubernetes

554
00:23:24,240 --> 00:23:26,520
service account and the cloud identity

555
00:23:26,520 --> 00:23:28,919
and after this binding

556
00:23:28,919 --> 00:23:30,140
um that is called Federation

557
00:23:30,140 --> 00:23:32,880
applications can exchange the kubernetes

558
00:23:32,880 --> 00:23:34,919
service account with the correlating

559
00:23:34,919 --> 00:23:38,520
cloud identity all right so let's see in

560
00:23:38,520 --> 00:23:41,880
high level uh the flow how this works so

561
00:23:41,880 --> 00:23:44,520
first kublet project assigned service

562
00:23:44,520 --> 00:23:47,280
account token to the Pod and this is a

563
00:23:47,280 --> 00:23:50,760
valid JWT token that is signed by the

564
00:23:50,760 --> 00:23:53,880
cluster all right so now our pod has a

565
00:23:53,880 --> 00:23:57,000
JWT token of the service account and

566
00:23:57,000 --> 00:23:59,220
then the Pod can send it to the cloud

567
00:23:59,220 --> 00:24:01,679
identity service again like azioactive

568
00:24:01,679 --> 00:24:06,360
directory or AWS ion or gcp and it

569
00:24:06,360 --> 00:24:08,280
requests to exchange the service account

570
00:24:08,280 --> 00:24:12,659
token with with an identity token

571
00:24:12,659 --> 00:24:15,120
so now the cloud identity the cloud

572
00:24:15,120 --> 00:24:17,880
identity service verifies that this

573
00:24:17,880 --> 00:24:19,559
service account token is indeed

574
00:24:19,559 --> 00:24:23,280
legitimate and the the cloud identity

575
00:24:23,280 --> 00:24:26,820
service checks that the token was indeed

576
00:24:26,820 --> 00:24:29,520
issued by the cluster that the service

577
00:24:29,520 --> 00:24:31,020
Trust

578
00:24:31,020 --> 00:24:33,539
and it does it by using the cluster oidc

579
00:24:33,539 --> 00:24:35,039
endpoint

580
00:24:35,039 --> 00:24:37,799
and if there were if the verification

581
00:24:37,799 --> 00:24:39,780
was successful the cloud identity

582
00:24:39,780 --> 00:24:42,480
platform will return a cloud identity

583
00:24:42,480 --> 00:24:46,140
token to the Pod so now our pod has a

584
00:24:46,140 --> 00:24:49,340
valid uh Cloud credential Cloud token

585
00:24:49,340 --> 00:24:51,840
and it can use it to authenticate with

586
00:24:51,840 --> 00:24:55,640
Cloud resources for example again it can

587
00:24:55,640 --> 00:24:57,840
authenticate with the cloud storage for

588
00:24:57,840 --> 00:25:00,918
example if it needs to

589
00:25:00,960 --> 00:25:03,840
so this is an example from aad from

590
00:25:03,840 --> 00:25:06,240
Azure active directory and you can see

591
00:25:06,240 --> 00:25:08,460
this binding this kind of federation so

592
00:25:08,460 --> 00:25:10,740
we have in this page you can see it's um

593
00:25:10,740 --> 00:25:13,140
it's a setting of specific aad

594
00:25:13,140 --> 00:25:15,659
application and you can see that we bind

595
00:25:15,659 --> 00:25:17,400
to this application

596
00:25:17,400 --> 00:25:19,980
um the kubernetes service account

597
00:25:19,980 --> 00:25:21,480
um you can see the name of the service

598
00:25:21,480 --> 00:25:23,159
account that will be bound and you can

599
00:25:23,159 --> 00:25:27,539
also see the oadc endpoint that aad will

600
00:25:27,539 --> 00:25:30,179
use to validate this service account

601
00:25:30,179 --> 00:25:32,659
token

602
00:25:34,320 --> 00:25:36,360
um all right so let's talk for a moment

603
00:25:36,360 --> 00:25:38,520
about gcp specifically

604
00:25:38,520 --> 00:25:39,840
um because in gcp there is something

605
00:25:39,840 --> 00:25:42,000
interesting

606
00:25:42,000 --> 00:25:44,520
in gcp there is a unified identity pool

607
00:25:44,520 --> 00:25:47,159
for the entire project and what does it

608
00:25:47,159 --> 00:25:49,860
mean it means that there is a single

609
00:25:49,860 --> 00:25:53,039
binding between a cloud identity and

610
00:25:53,039 --> 00:25:55,260
service account and service account is

611
00:25:55,260 --> 00:25:58,500
represented by uh the namespace name

612
00:25:58,500 --> 00:26:00,960
plus the service account name so let's

613
00:26:00,960 --> 00:26:02,700
see an example so we see two clusters

614
00:26:02,700 --> 00:26:05,520
here it's two clusters we have cluster a

615
00:26:05,520 --> 00:26:07,500
and we have cluster B they are in the

616
00:26:07,500 --> 00:26:09,900
same project

617
00:26:09,900 --> 00:26:11,640
um both have namespaced with the same

618
00:26:11,640 --> 00:26:13,200
name and the service account with the

619
00:26:13,200 --> 00:26:15,059
same name so both have a namespace

620
00:26:15,059 --> 00:26:16,500
called monitoring and the service

621
00:26:16,500 --> 00:26:19,020
account named sa1

622
00:26:19,020 --> 00:26:23,279
and if we bind this service account with

623
00:26:23,279 --> 00:26:25,679
the CL with the cloud identities in this

624
00:26:25,679 --> 00:26:27,960
case it's called My Cloud app so it

625
00:26:27,960 --> 00:26:30,419
means that both service accounts bound

626
00:26:30,419 --> 00:26:32,760
to the same Cloud identity all right

627
00:26:32,760 --> 00:26:34,440
that's how it works

628
00:26:34,440 --> 00:26:36,659
now let's say that we have another

629
00:26:36,659 --> 00:26:39,600
cluster in our project let's call it a

630
00:26:39,600 --> 00:26:41,880
cluster C and let's say that this

631
00:26:41,880 --> 00:26:43,980
cluster is compromised okay for example

632
00:26:43,980 --> 00:26:47,039
we saw in the first section how attacker

633
00:26:47,039 --> 00:26:50,480
might get the cluster takeover

634
00:26:51,059 --> 00:26:52,980
um so this cluster cluster C is

635
00:26:52,980 --> 00:26:55,140
compromised

636
00:26:55,140 --> 00:26:58,080
and now if the if Deckers can create a

637
00:26:58,080 --> 00:26:59,760
namespace and the service account

638
00:26:59,760 --> 00:27:03,000
assuming they can if they got if they

639
00:27:03,000 --> 00:27:05,520
gain the cluster takeover so they can

640
00:27:05,520 --> 00:27:07,860
impersonate to that cloud identity right

641
00:27:07,860 --> 00:27:10,559
because there is only one binding per

642
00:27:10,559 --> 00:27:13,380
project so if they can create a service

643
00:27:13,380 --> 00:27:15,299
account and the namespace with the same

644
00:27:15,299 --> 00:27:18,000
name so they get access to This Cloud

645
00:27:18,000 --> 00:27:20,600
identity

646
00:27:20,880 --> 00:27:23,220
um so as we said uh attackers has access

647
00:27:23,220 --> 00:27:25,080
to the cloud identity just by creating

648
00:27:25,080 --> 00:27:28,760
resources in a specific name

649
00:27:28,799 --> 00:27:31,740
so what we see here is that we must

650
00:27:31,740 --> 00:27:34,500
trust all our clusters in the project

651
00:27:34,500 --> 00:27:38,340
okay and many times we consider our

652
00:27:38,340 --> 00:27:41,039
security boundary as the cluster that

653
00:27:41,039 --> 00:27:43,620
everything in the cluster I mean that

654
00:27:43,620 --> 00:27:45,539
there is trust in the cluster but not

655
00:27:45,539 --> 00:27:47,940
outside the cluster but here we can see

656
00:27:47,940 --> 00:27:50,400
that our security boundary is actually

657
00:27:50,400 --> 00:27:52,740
not the cluster but the entire project

658
00:27:52,740 --> 00:27:55,940
and we see it once again

659
00:27:57,440 --> 00:27:58,980
so

660
00:27:58,980 --> 00:28:01,500
um this is what we saw so far uh we

661
00:28:01,500 --> 00:28:02,880
talked about inner cluster lateral

662
00:28:02,880 --> 00:28:04,919
movement and we talked about cluster to

663
00:28:04,919 --> 00:28:06,840
Cloud lateral movement and now let's

664
00:28:06,840 --> 00:28:09,120
talk about how we can detect and prevent

665
00:28:09,120 --> 00:28:11,460
those techniques

666
00:28:11,460 --> 00:28:13,320
all right so

667
00:28:13,320 --> 00:28:15,659
um we'll start with detection we'll talk

668
00:28:15,659 --> 00:28:16,980
about detections and mitigations let's

669
00:28:16,980 --> 00:28:19,799
start with detections so

670
00:28:19,799 --> 00:28:22,500
as we already saw uh when we were

671
00:28:22,500 --> 00:28:24,179
talking about kubernetes we must

672
00:28:24,179 --> 00:28:26,640
consider both kubernetes level and the

673
00:28:26,640 --> 00:28:28,919
cloud level and this applies also to

674
00:28:28,919 --> 00:28:30,960
detections and mitigations

675
00:28:30,960 --> 00:28:33,179
in kubernetes when it comes to detection

676
00:28:33,179 --> 00:28:35,460
we have a very powerful tool for

677
00:28:35,460 --> 00:28:36,900
monitoring the cluster and it's called

678
00:28:36,900 --> 00:28:39,120
kubernetes audit log it's native in

679
00:28:39,120 --> 00:28:40,799
kubernetes and it gives you visibility

680
00:28:40,799 --> 00:28:42,779
to the operations in the cluster it

681
00:28:42,779 --> 00:28:44,640
basically monitors the kubernetes API

682
00:28:44,640 --> 00:28:46,200
server

683
00:28:46,200 --> 00:28:47,100
um

684
00:28:47,100 --> 00:28:49,200
and you can use it for example to detect

685
00:28:49,200 --> 00:28:52,620
deployment of abnormal images a pod with

686
00:28:52,620 --> 00:28:54,480
suspicious configurations for example

687
00:28:54,480 --> 00:28:57,840
with suspicious volume mounts and also a

688
00:28:57,840 --> 00:29:00,000
color sensitivity and more suspicious

689
00:29:00,000 --> 00:29:02,360
operations

690
00:29:02,539 --> 00:29:05,760
uh Cloud providers also have auditing

691
00:29:05,760 --> 00:29:07,500
Services each cloud provider has a

692
00:29:07,500 --> 00:29:10,200
auditing service that allow you to track

693
00:29:10,200 --> 00:29:11,760
the behavior of the of the cloud

694
00:29:11,760 --> 00:29:14,220
identities now of course also the cloud

695
00:29:14,220 --> 00:29:15,840
identities that are used by the

696
00:29:15,840 --> 00:29:18,299
kubernetes workloads and here in this

697
00:29:18,299 --> 00:29:21,120
example we can see um Azure activity log

698
00:29:21,120 --> 00:29:23,100
which is the audit auditing service of

699
00:29:23,100 --> 00:29:25,260
azure and you can see here in the image

700
00:29:25,260 --> 00:29:27,480
that we see

701
00:29:27,480 --> 00:29:28,500
um

702
00:29:28,500 --> 00:29:30,299
we see a managed identity we see Cloud

703
00:29:30,299 --> 00:29:33,179
identity that is used by kubernetes that

704
00:29:33,179 --> 00:29:35,340
reads storage account keys so maybe it's

705
00:29:35,340 --> 00:29:36,600
suspicious it's something that we want

706
00:29:36,600 --> 00:29:39,419
to monitor in other clouds you have also

707
00:29:39,419 --> 00:29:41,880
such Services cloud trail in AWS and in

708
00:29:41,880 --> 00:29:44,640
gcp Cloud audit logs

709
00:29:44,640 --> 00:29:48,360
all right so that was uh detections now

710
00:29:48,360 --> 00:29:51,299
let's speak about mitigations

711
00:29:51,299 --> 00:29:54,360
so um in December we released the

712
00:29:54,360 --> 00:29:56,279
seventh the third version of the threat

713
00:29:56,279 --> 00:29:58,440
Matrix for kubernetes uh the threat

714
00:29:58,440 --> 00:30:00,360
Matrix is a knowledge base of attacking

715
00:30:00,360 --> 00:30:02,820
techniques of kubernetes

716
00:30:02,820 --> 00:30:05,340
um so the new version now also contains

717
00:30:05,340 --> 00:30:08,039
mitigation techniques the threat metrics

718
00:30:08,039 --> 00:30:10,260
is completely open sourced and you can

719
00:30:10,260 --> 00:30:12,120
see it in this address

720
00:30:12,120 --> 00:30:14,580
so let's see how we can work with it so

721
00:30:14,580 --> 00:30:16,260
here is the new threat metrics for

722
00:30:16,260 --> 00:30:19,500
kubernetes again it's open sourced so

723
00:30:19,500 --> 00:30:20,940
you can see the tactics and the

724
00:30:20,940 --> 00:30:23,159
techniques in each tactic so let's go to

725
00:30:23,159 --> 00:30:24,720
the lateral movement tactic because it

726
00:30:24,720 --> 00:30:26,760
just talked about lateral movement and

727
00:30:26,760 --> 00:30:29,100
let's pick pick a technique let's pick

728
00:30:29,100 --> 00:30:32,100
access to Cloud resources

729
00:30:32,100 --> 00:30:33,960
so here is the technique that talks

730
00:30:33,960 --> 00:30:35,700
about lateral movement from the cluster

731
00:30:35,700 --> 00:30:38,340
to the cloud like our session and you

732
00:30:38,340 --> 00:30:40,500
can see the uh the description of this

733
00:30:40,500 --> 00:30:42,659
uh of this technique and in the bottom

734
00:30:42,659 --> 00:30:44,279
you can now find the mitigation

735
00:30:44,279 --> 00:30:46,140
techniques which can help you to prevent

736
00:30:46,140 --> 00:30:48,360
this attacking from happening

737
00:30:48,360 --> 00:30:51,179
so let's pick one mitigations so we

738
00:30:51,179 --> 00:30:52,980
picked allocate specific identities to

739
00:30:52,980 --> 00:30:54,899
pods and here you can see the

740
00:30:54,899 --> 00:30:57,419
description of the of this mitigation

741
00:30:57,419 --> 00:30:59,640
technique let's see another example

742
00:30:59,640 --> 00:31:02,520
quickly so let's go to the technique

743
00:31:02,520 --> 00:31:04,200
container service account which talks

744
00:31:04,200 --> 00:31:06,120
about how attackers might use service

745
00:31:06,120 --> 00:31:07,919
accounts for lateral movement in the

746
00:31:07,919 --> 00:31:09,659
cluster

747
00:31:09,659 --> 00:31:12,299
and once again you can see the

748
00:31:12,299 --> 00:31:13,799
description of the attacking technique

749
00:31:13,799 --> 00:31:16,260
let's go to mitigations and let's pick

750
00:31:16,260 --> 00:31:18,779
one for example disable service account

751
00:31:18,779 --> 00:31:21,779
Auto Service account Auto Mount

752
00:31:21,779 --> 00:31:23,760
and here you can see

753
00:31:23,760 --> 00:31:26,480
um the mitigation

754
00:31:26,580 --> 00:31:27,419
okay

755
00:31:27,419 --> 00:31:29,419
um

756
00:31:34,020 --> 00:31:37,860
thanks so as we enter the closing

757
00:31:37,860 --> 00:31:40,080
section of this presentation I will

758
00:31:40,080 --> 00:31:41,940
share a bit about the process behind

759
00:31:41,940 --> 00:31:43,679
building this metrics

760
00:31:43,679 --> 00:31:46,559
in general we kicked off The Journey of

761
00:31:46,559 --> 00:31:48,179
building knowledge base or threat

762
00:31:48,179 --> 00:31:49,740
matrixes

763
00:31:49,740 --> 00:31:52,520
for services that we put in the effort

764
00:31:52,520 --> 00:31:56,100
of building security offerings for them

765
00:31:56,100 --> 00:31:58,740
we decided to rely on mild on mitral

766
00:31:58,740 --> 00:32:01,380
attack framework as it becomes defect

767
00:32:01,380 --> 00:32:03,720
though the leading standard for the

768
00:32:03,720 --> 00:32:06,120
entire EDR industry

769
00:32:06,120 --> 00:32:08,700
back at the time we knew that miterate

770
00:32:08,700 --> 00:32:11,100
attacks are too focused on the operating

771
00:32:11,100 --> 00:32:13,860
system level and it lacks visibility to

772
00:32:13,860 --> 00:32:17,580
cloudish and container ptps

773
00:32:17,580 --> 00:32:19,740
together with kubernetes being so

774
00:32:19,740 --> 00:32:23,580
rapidly adopted this drove us to

775
00:32:23,580 --> 00:32:25,620
experiment to experiment with building a

776
00:32:25,620 --> 00:32:27,659
knowledge base of attack techniques

777
00:32:27,659 --> 00:32:30,240
dedicated for kubernetes

778
00:32:30,240 --> 00:32:32,340
and so we released the first the first

779
00:32:32,340 --> 00:32:34,740
version of the micro Microsoft threat

780
00:32:34,740 --> 00:32:38,840
metrics for kubernetes in April 2020

781
00:32:38,940 --> 00:32:41,820
shortly after the release we realized

782
00:32:41,820 --> 00:32:44,279
how well it was resonated within the

783
00:32:44,279 --> 00:32:46,080
container ecosystem

784
00:32:46,080 --> 00:32:48,480
with customers starting to measure our

785
00:32:48,480 --> 00:32:51,720
coverage based on these metrics and even

786
00:32:51,720 --> 00:32:54,240
competitors sharing their areas of

787
00:32:54,240 --> 00:32:55,460
strength

788
00:32:55,460 --> 00:33:00,179
on top of our metrics uh eventually this

789
00:33:00,179 --> 00:33:03,240
led a tomato to embrace a large portion

790
00:33:03,240 --> 00:33:05,700
of Microsoft metrics into their

791
00:33:05,700 --> 00:33:07,980
Enterprise attacks framework which was

792
00:33:07,980 --> 00:33:10,620
announced by a joint publication

793
00:33:10,620 --> 00:33:14,100
between Microsoft and miter in April

794
00:33:14,100 --> 00:33:16,860
2021

795
00:33:16,860 --> 00:33:19,320
and as you see just described we

796
00:33:19,320 --> 00:33:21,240
released the third version of Microsoft

797
00:33:21,240 --> 00:33:25,140
metrics in December 2022 where we aim to

798
00:33:25,140 --> 00:33:27,299
introduce a new layer that consists of

799
00:33:27,299 --> 00:33:29,039
mitigation techniques

800
00:33:29,039 --> 00:33:32,820
our motivation was to map each TTP to

801
00:33:32,820 --> 00:33:35,159
correspondent mitigation steps that will

802
00:33:35,159 --> 00:33:37,799
instruct kubernetes user on how they

803
00:33:37,799 --> 00:33:40,019
should reduce their attack surface

804
00:33:40,019 --> 00:33:42,480
hopefully this dimension of mitigation

805
00:33:42,480 --> 00:33:45,240
step will prevent kubernetes attacks to

806
00:33:45,240 --> 00:33:47,720
begin with

807
00:33:48,320 --> 00:33:53,159
so key takeaways so we demonstrated here

808
00:33:53,159 --> 00:33:55,980
today that even with the great security

809
00:33:55,980 --> 00:33:58,140
advancements that being pushed to

810
00:33:58,140 --> 00:34:02,100
kubernetes and even with the efforts

811
00:34:02,100 --> 00:34:05,220
that led by Cloud providers that wrap

812
00:34:05,220 --> 00:34:08,399
kubernetes clusters there is still much

813
00:34:08,399 --> 00:34:10,800
work ahead of us as a community to

814
00:34:10,800 --> 00:34:12,839
strengthen the overall security posture

815
00:34:12,839 --> 00:34:15,000
of managed clusters

816
00:34:15,000 --> 00:34:17,940
as a quick recap of today's session so

817
00:34:17,940 --> 00:34:20,460
we saw the maturity of Shifting away

818
00:34:20,460 --> 00:34:22,980
from storing locally permissive creates

819
00:34:22,980 --> 00:34:26,219
files to all major Cloud providers now

820
00:34:26,219 --> 00:34:28,139
support Federation of kubernetes

821
00:34:28,139 --> 00:34:31,379
identities and binding them with Cloud

822
00:34:31,379 --> 00:34:33,179
identities

823
00:34:33,179 --> 00:34:35,699
as an industry we have proven to take

824
00:34:35,699 --> 00:34:37,980
significant steps towards more secure

825
00:34:37,980 --> 00:34:41,399
environments but in the meantime we also

826
00:34:41,399 --> 00:34:44,719
saw that built-in managed clusters

827
00:34:44,719 --> 00:34:48,418
identities of built building identities

828
00:34:48,418 --> 00:34:51,239
of managed clusters can be abused and

829
00:34:51,239 --> 00:34:54,599
manipulated and this is and how in some

830
00:34:54,599 --> 00:34:56,940
cases they themselves violating the

831
00:34:56,940 --> 00:34:59,820
security boundary of the Clusters

832
00:34:59,820 --> 00:35:02,820
therefore we are calling you to

833
00:35:02,820 --> 00:35:06,000
one Implement an holistic strategy for

834
00:35:06,000 --> 00:35:08,220
kubernetes security by considering both

835
00:35:08,220 --> 00:35:11,959
cluster and Cloud levels

836
00:35:12,320 --> 00:35:15,060
identities are key aspect of kubernetes

837
00:35:15,060 --> 00:35:17,460
security so monitor their activity using

838
00:35:17,460 --> 00:35:20,880
auditing auditing to auditing tools and

839
00:35:20,880 --> 00:35:23,280
adhere to the least privileged principle

840
00:35:23,280 --> 00:35:26,579
and lastly use the mitigation metrics to

841
00:35:26,579 --> 00:35:28,680
prevent potential attacks

842
00:35:28,680 --> 00:35:31,440
and with that thank you

843
00:35:31,440 --> 00:35:32,010
thank you

844
00:35:32,010 --> 00:35:35,609
[Applause]

