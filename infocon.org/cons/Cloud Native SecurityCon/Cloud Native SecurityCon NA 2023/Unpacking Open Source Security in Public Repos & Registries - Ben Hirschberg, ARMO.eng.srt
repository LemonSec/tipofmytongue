1
00:00:00,000 --> 00:00:02,179
so welcome everyone

2
00:00:02,179 --> 00:00:06,000
as you can see I'm not Craig box I hope

3
00:00:06,000 --> 00:00:07,919
you didn't expect him to come okay

4
00:00:07,919 --> 00:00:10,320
because he couldn't make it here but for

5
00:00:10,320 --> 00:00:12,780
a good reason and

6
00:00:12,780 --> 00:00:15,000
um I'm going to present you research

7
00:00:15,000 --> 00:00:17,340
with it together

8
00:00:17,340 --> 00:00:20,900
um about open source security in general

9
00:00:20,900 --> 00:00:24,480
and around open source project we well

10
00:00:24,480 --> 00:00:27,240
know in the kubernetes and Cloud native

11
00:00:27,240 --> 00:00:29,880
security space and we're going to

12
00:00:29,880 --> 00:00:31,500
compare them against the security

13
00:00:31,500 --> 00:00:35,040
posture of of you know the whole world

14
00:00:35,040 --> 00:00:36,660
of other projects

15
00:00:36,660 --> 00:00:40,620
so uh I don't know if who's been to the

16
00:00:40,620 --> 00:00:43,739
key set key an old session today this

17
00:00:43,739 --> 00:00:44,940
morning

18
00:00:44,940 --> 00:00:48,059
so Priyanka actually did did me a favor

19
00:00:48,059 --> 00:00:50,280
okay I'm not sure that she knew but but

20
00:00:50,280 --> 00:00:52,320
when she started to talk about the

21
00:00:52,320 --> 00:00:53,700
security posture and the good management

22
00:00:53,700 --> 00:00:56,100
of security issues okay around open

23
00:00:56,100 --> 00:00:58,079
source projects and cncf projects in

24
00:00:58,079 --> 00:01:00,539
general okay he actually really did me a

25
00:01:00,539 --> 00:01:01,920
favor okay because this is one of the

26
00:01:01,920 --> 00:01:04,140
things we are going to unwind today and

27
00:01:04,140 --> 00:01:06,260
we are going to talk about you know

28
00:01:06,260 --> 00:01:08,640
comparing them one to another based on

29
00:01:08,640 --> 00:01:12,659
on on our statistics we made at rmo

30
00:01:12,659 --> 00:01:16,280
so just a few words about me uh I'm Ben

31
00:01:16,280 --> 00:01:19,500
I'm co-founder and CTO at armo Armor is

32
00:01:19,500 --> 00:01:22,979
a kubernetes security company uh we are

33
00:01:22,979 --> 00:01:25,259
the creators of cubescape cubescape

34
00:01:25,259 --> 00:01:26,880
we'll talk about it a little bit on

35
00:01:26,880 --> 00:01:29,100
later for those who doesn't know but we

36
00:01:29,100 --> 00:01:31,140
are working in general okay we are

37
00:01:31,140 --> 00:01:32,820
working in the kubernetes security

38
00:01:32,820 --> 00:01:39,000
posture World okay in my previous uh um

39
00:01:39,000 --> 00:01:41,460
jobs okay I used to work in offensive

40
00:01:41,460 --> 00:01:43,860
security and also in this defensive

41
00:01:43,860 --> 00:01:46,680
security for a long time so

42
00:01:46,680 --> 00:01:49,799
um let's just jump in to

43
00:01:49,799 --> 00:01:55,380
the presentation okay so uh cubescape

44
00:01:55,380 --> 00:01:57,060
um which I'm one of the maintainers of

45
00:01:57,060 --> 00:02:00,000
okay is is a community security posture

46
00:02:00,000 --> 00:02:01,619
tool which tells you okay about

47
00:02:01,619 --> 00:02:04,079
misconfigurations in inside your cluster

48
00:02:04,079 --> 00:02:06,840
how you can improve your security inside

49
00:02:06,840 --> 00:02:09,660
your cluster and it's both a CLI tool

50
00:02:09,660 --> 00:02:12,239
and both our operator which you can use

51
00:02:12,239 --> 00:02:15,120
in different ways

52
00:02:15,120 --> 00:02:18,000
um and it also scans your containers

53
00:02:18,000 --> 00:02:20,220
inside the kubernetes cluster and can

54
00:02:20,220 --> 00:02:21,959
tell what kind of vulnerabilities your

55
00:02:21,959 --> 00:02:25,319
containers have and uh it does the same

56
00:02:25,319 --> 00:02:28,560
also in your what we call shift left the

57
00:02:28,560 --> 00:02:30,780
left side of the world okay when you are

58
00:02:30,780 --> 00:02:33,840
preparing uh your kubernetes deployments

59
00:02:33,840 --> 00:02:36,900
okay in your GitHub repo in your vs code

60
00:02:36,900 --> 00:02:40,080
and so on and can scan your GitHub

61
00:02:40,080 --> 00:02:42,959
repositories and container Registries to

62
00:02:42,959 --> 00:02:45,360
find out things about cellular security

63
00:02:45,360 --> 00:02:46,860
postures

64
00:02:46,860 --> 00:02:48,780
there's also very important thing here

65
00:02:48,780 --> 00:02:50,340
to note okay that's one of the most

66
00:02:50,340 --> 00:02:51,500
important

67
00:02:51,500 --> 00:02:53,700
goals of the project it's not just to

68
00:02:53,700 --> 00:02:57,140
like dump data on you and have you like

69
00:02:57,140 --> 00:03:00,120
uh trying to work out how to solve these

70
00:03:00,120 --> 00:03:02,519
issues but also to prioritize and show

71
00:03:02,519 --> 00:03:04,500
you how to fix these issues

72
00:03:04,500 --> 00:03:08,160
uh armo is providing a platform okay

73
00:03:08,160 --> 00:03:10,620
behind cubescape in order to store the

74
00:03:10,620 --> 00:03:13,379
data okay of the results of these scans

75
00:03:13,379 --> 00:03:16,519
and help you analyze them even further

76
00:03:16,519 --> 00:03:20,040
and gives you a big a bigger perspective

77
00:03:20,040 --> 00:03:23,659
okay around these issues now

78
00:03:23,700 --> 00:03:26,700
what makes us okay it creates us uh

79
00:03:26,700 --> 00:03:29,580
ability okay to look into this data okay

80
00:03:29,580 --> 00:03:31,620
and this is what you're going to analyze

81
00:03:31,620 --> 00:03:32,819
today together

82
00:03:32,819 --> 00:03:36,000
okay we have a lot of data and we wanted

83
00:03:36,000 --> 00:03:38,099
to like

84
00:03:38,099 --> 00:03:41,700
create a a comparison between projects

85
00:03:41,700 --> 00:03:43,019
of the world okay in the general

86
00:03:43,019 --> 00:03:46,379
population and in our very specific case

87
00:03:46,379 --> 00:03:47,760
the

88
00:03:47,760 --> 00:03:50,040
population okay I've graduated projects

89
00:03:50,040 --> 00:03:52,080
inside cncf and see how they are fair

90
00:03:52,080 --> 00:03:54,720
one against the other

91
00:03:54,720 --> 00:03:56,879
so there are two data sources we are

92
00:03:56,879 --> 00:03:58,500
going to talk about today

93
00:03:58,500 --> 00:04:00,180
in the armor platform we are receiving

94
00:04:00,180 --> 00:04:02,580
data from cubescapes for as I told you

95
00:04:02,580 --> 00:04:04,500
before security issues configuration

96
00:04:04,500 --> 00:04:07,739
issues are out kubernetes objects and

97
00:04:07,739 --> 00:04:11,099
and vulnerabilities from image scans

98
00:04:11,099 --> 00:04:13,620
okay the image scans can come either

99
00:04:13,620 --> 00:04:17,160
from uh container Registries or the

100
00:04:17,160 --> 00:04:20,100
kubernetes cluster itself and security

101
00:04:20,100 --> 00:04:23,460
issues can also come both from git repos

102
00:04:23,460 --> 00:04:26,100
and kubernetes clusters as well but we

103
00:04:26,100 --> 00:04:29,220
are today going to focus on data what we

104
00:04:29,220 --> 00:04:32,699
are getting okay from uh from groups

105
00:04:32,699 --> 00:04:35,699
repositories and container registries

106
00:04:35,699 --> 00:04:38,639
now about the data sets we are going to

107
00:04:38,639 --> 00:04:39,360
talk

108
00:04:39,360 --> 00:04:43,919
so we've seen container images okay from

109
00:04:43,919 --> 00:04:49,199
nearly 180 Registries we've scanned 44

110
00:04:49,199 --> 00:04:53,520
around nearly 44 000 container images

111
00:04:53,520 --> 00:04:56,600
we've seen nearly 2 000

112
00:04:56,600 --> 00:05:00,600
2000 git repositories and we inside

113
00:05:00,600 --> 00:05:02,940
those git repositories we have scanned

114
00:05:02,940 --> 00:05:05,460
yaml files and Helm charts in the size

115
00:05:05,460 --> 00:05:08,520
of nearly 164

116
00:05:08,520 --> 00:05:09,380
000

117
00:05:09,380 --> 00:05:12,780
files okay so it's a it's not a small

118
00:05:12,780 --> 00:05:15,060
data set but it can bring us some really

119
00:05:15,060 --> 00:05:17,580
interesting things so the first time

120
00:05:17,580 --> 00:05:19,560
what we are going to look into image

121
00:05:19,560 --> 00:05:21,840
vulnerability scans

122
00:05:21,840 --> 00:05:24,900
so we're going to come as I told you I'm

123
00:05:24,900 --> 00:05:26,639
going to compare two samples again one

124
00:05:26,639 --> 00:05:29,160
to the other the first temple is the

125
00:05:29,160 --> 00:05:31,800
general population the second sample is

126
00:05:31,800 --> 00:05:33,900
the uh is the sample of graduated

127
00:05:33,900 --> 00:05:36,479
projects okay we're going to look at the

128
00:05:36,479 --> 00:05:39,600
distribution of severities okay how if

129
00:05:39,600 --> 00:05:41,639
we have vulnerability how severe they

130
00:05:41,639 --> 00:05:44,340
are we are going to look at what are the

131
00:05:44,340 --> 00:05:47,280
most common vulnerabilities in both

132
00:05:47,280 --> 00:05:50,160
samples and we are going to dive into

133
00:05:50,160 --> 00:05:53,280
these the relevant relevancy of these

134
00:05:53,280 --> 00:05:55,820
vulnerabilities

135
00:05:57,539 --> 00:06:00,139
so

136
00:06:00,479 --> 00:06:04,080
if we're looking at what were the most

137
00:06:04,080 --> 00:06:06,600
prevalent uh

138
00:06:06,600 --> 00:06:08,220
image

139
00:06:08,220 --> 00:06:11,520
image repositories okay we're going in

140
00:06:11,520 --> 00:06:12,960
the general sample we are going to see

141
00:06:12,960 --> 00:06:15,419
that even the first one

142
00:06:15,419 --> 00:06:17,520
of the images image repositories is

143
00:06:17,520 --> 00:06:19,100
already a

144
00:06:19,100 --> 00:06:23,759
cncf graduated project okay Argo CD

145
00:06:23,759 --> 00:06:26,160
which was the mole which gave us the

146
00:06:26,160 --> 00:06:28,680
most image scans okay it's nearly 20

147
00:06:28,680 --> 00:06:31,080
000. you will can see that the second is

148
00:06:31,080 --> 00:06:34,860
redis okay we all know it although it's

149
00:06:34,860 --> 00:06:36,720
an open source project it is not under

150
00:06:36,720 --> 00:06:39,060
the cncf umbrella

151
00:06:39,060 --> 00:06:42,660
okay the the third one is also belong to

152
00:06:42,660 --> 00:06:45,539
Argo okay the same project then you have

153
00:06:45,539 --> 00:06:48,240
Prometheus okay which is also a

154
00:06:48,240 --> 00:06:50,580
graduated project then you have a very

155
00:06:50,580 --> 00:06:52,740
interesting project okay also open

156
00:06:52,740 --> 00:06:57,440
source okay it has sidecar from KV grid

157
00:06:57,440 --> 00:07:00,180
which is again an open source project

158
00:07:00,180 --> 00:07:04,139
not under a cncf umbrella but it's also

159
00:07:04,139 --> 00:07:07,919
we saw it in in a lot of clusters and it

160
00:07:07,919 --> 00:07:10,020
in general it is a

161
00:07:10,020 --> 00:07:12,060
um it is a tool for those who don't know

162
00:07:12,060 --> 00:07:15,000
it it's a tool to update config Maps

163
00:07:15,000 --> 00:07:18,180
during the runtime okay uh of a

164
00:07:18,180 --> 00:07:20,699
container update them uh inside the

165
00:07:20,699 --> 00:07:22,440
containers okay who are using that

166
00:07:22,440 --> 00:07:23,880
config map

167
00:07:23,880 --> 00:07:27,720
so again Prometheus we saw of mongodbs

168
00:07:27,720 --> 00:07:30,599
uh again Prometheus and the datadog

169
00:07:30,599 --> 00:07:33,020
agent

170
00:07:33,840 --> 00:07:34,860
sorry

171
00:07:34,860 --> 00:07:38,580
so among the graduated sample okay the

172
00:07:38,580 --> 00:07:40,500
top repository is obviously argosidium

173
00:07:40,500 --> 00:07:43,380
Prometheus we already saw okay in the

174
00:07:43,380 --> 00:07:45,120
general sample because they were also

175
00:07:45,120 --> 00:07:47,400
very high upon in the general sample

176
00:07:47,400 --> 00:07:48,380
itself

177
00:07:48,380 --> 00:07:53,759
uh we can see also Q proxy and uh Cube

178
00:07:53,759 --> 00:07:56,580
State Matrix exporter okay as part of

179
00:07:56,580 --> 00:07:59,340
the top uh images we've shown in the

180
00:07:59,340 --> 00:08:01,440
general sample obviously General sample

181
00:08:01,440 --> 00:08:04,380
has much more images which are unrelated

182
00:08:04,380 --> 00:08:07,800
okay to uh

183
00:08:07,800 --> 00:08:11,759
to open source uh and in the within the

184
00:08:11,759 --> 00:08:14,520
graduated samples okay this is the setup

185
00:08:14,520 --> 00:08:17,099
okay and after it after the first temp

186
00:08:17,099 --> 00:08:20,280
uh 10 images okay you can see another uh

187
00:08:20,280 --> 00:08:23,460
core images of of kubernetes itself so

188
00:08:23,460 --> 00:08:27,780
the first thing we've compared is uh the

189
00:08:27,780 --> 00:08:30,720
distribution of severities

190
00:08:30,720 --> 00:08:32,580
so

191
00:08:32,580 --> 00:08:35,159
the first one okay in this chart you can

192
00:08:35,159 --> 00:08:37,080
see that it is ordered by the general

193
00:08:37,080 --> 00:08:38,520
sample and the prevalence on

194
00:08:38,520 --> 00:08:40,799
distribution of of the severities inside

195
00:08:40,799 --> 00:08:43,559
the general sample so you can see that

196
00:08:43,559 --> 00:08:47,300
the most okay uh

197
00:08:47,339 --> 00:08:49,320
vulnerabilities were medium in the

198
00:08:49,320 --> 00:08:51,200
general sample

199
00:08:51,200 --> 00:08:55,380
and uh and in the second was what we

200
00:08:55,380 --> 00:08:56,760
call negligible

201
00:08:56,760 --> 00:08:59,100
so it might you know confuse you okay

202
00:08:59,100 --> 00:09:01,740
because there are

203
00:09:01,740 --> 00:09:05,399
um not every image scanner uses this

204
00:09:05,399 --> 00:09:07,620
severity okay

205
00:09:07,620 --> 00:09:10,860
um but we are cubescape is using gripe

206
00:09:10,860 --> 00:09:13,380
okay and gripe differentiates between

207
00:09:13,380 --> 00:09:17,820
low and negligible severities negligible

208
00:09:17,820 --> 00:09:21,720
is from zero to two uh in the CVSs score

209
00:09:21,720 --> 00:09:24,779
and two to four is low okay there are a

210
00:09:24,779 --> 00:09:27,240
lot of scanners who are like marking

211
00:09:27,240 --> 00:09:30,240
everything from zero to four as low uh

212
00:09:30,240 --> 00:09:32,100
severity but for ourselves but for

213
00:09:32,100 --> 00:09:34,680
ourselves I think it's more interesting

214
00:09:34,680 --> 00:09:37,560
to look also in for on the scale of of

215
00:09:37,560 --> 00:09:40,140
uh zero to two

216
00:09:40,140 --> 00:09:42,899
and we already can see that for uh for

217
00:09:42,899 --> 00:09:45,360
graduated projects okay the most common

218
00:09:45,360 --> 00:09:48,480
uh vulnerability severity is negligible

219
00:09:48,480 --> 00:09:50,459
so it's a very low

220
00:09:50,459 --> 00:09:53,040
most of the vulnerabilities are are

221
00:09:53,040 --> 00:09:55,200
negligible and and the lowest priorities

222
00:09:55,200 --> 00:09:58,140
severity sorry okay

223
00:09:58,140 --> 00:10:01,440
um you can see also that

224
00:10:01,440 --> 00:10:03,240
um that in the common General sample

225
00:10:03,240 --> 00:10:05,160
okay after it you have the third most

226
00:10:05,160 --> 00:10:07,140
common is high vulnerabilities

227
00:10:07,140 --> 00:10:10,140
and in the graduated projects there is

228
00:10:10,140 --> 00:10:11,760
here something interesting so in

229
00:10:11,760 --> 00:10:14,100
graduated projects you have nearly as

230
00:10:14,100 --> 00:10:16,019
much High vulnerabilities as medium

231
00:10:16,019 --> 00:10:18,000
vulnerability uh

232
00:10:18,000 --> 00:10:20,100
uh vulnerabilities

233
00:10:20,100 --> 00:10:23,399
and if you are looking at the low bar at

234
00:10:23,399 --> 00:10:25,920
low severities we can see that in the

235
00:10:25,920 --> 00:10:28,200
graduated project it is quite few and

236
00:10:28,200 --> 00:10:32,100
the general sample is above that okay if

237
00:10:32,100 --> 00:10:34,080
we're looking at the critical okay the

238
00:10:34,080 --> 00:10:36,360
critical is nearly head to head into

239
00:10:36,360 --> 00:10:39,360
both samples and the last but not least

240
00:10:39,360 --> 00:10:42,720
okay the other severities are belonging

241
00:10:42,720 --> 00:10:45,300
to those who are those vulnerabilities

242
00:10:45,300 --> 00:10:47,820
who haven't yet been scored and

243
00:10:47,820 --> 00:10:50,279
therefore they are just like not

244
00:10:50,279 --> 00:10:53,160
categorized yet okay in the time of of

245
00:10:53,160 --> 00:10:55,440
when they were scanned

246
00:10:55,440 --> 00:10:57,600
but this can show you a kind of already

247
00:10:57,600 --> 00:11:00,000
a difference in the distribution okay

248
00:11:00,000 --> 00:11:03,180
but it doesn't really honestly it didn't

249
00:11:03,180 --> 00:11:05,880
really make us you know a lot of sense

250
00:11:05,880 --> 00:11:08,820
okay yet so what we did okay we started

251
00:11:08,820 --> 00:11:12,720
to look at the top vulnerabilities in

252
00:11:12,720 --> 00:11:14,519
the general sample

253
00:11:14,519 --> 00:11:17,700
and we looked at these CVS and these are

254
00:11:17,700 --> 00:11:20,220
the top 10 CVS in the general sample you

255
00:11:20,220 --> 00:11:22,380
can see that there is one vulnerability

256
00:11:22,380 --> 00:11:24,959
which is outstanding is relatively new

257
00:11:24,959 --> 00:11:27,600
vulnerability in busy box

258
00:11:27,600 --> 00:11:29,640
which which was

259
00:11:29,640 --> 00:11:34,800
in nearly 37 000 uh images with scan

260
00:11:34,800 --> 00:11:36,480
okay and it's a high severity

261
00:11:36,480 --> 00:11:38,279
vulnerability in busy box

262
00:11:38,279 --> 00:11:41,820
then we saw another okay in libg Crypt

263
00:11:41,820 --> 00:11:46,260
which was like nearly uh 15 000 high and

264
00:11:46,260 --> 00:11:48,600
there you can see a few which are like

265
00:11:48,600 --> 00:11:51,540
also in around these 15

266
00:11:51,540 --> 00:11:54,540
000 uh scans and at the end from eight

267
00:11:54,540 --> 00:11:57,000
and down you have less now

268
00:11:57,000 --> 00:11:59,220
we started to look into each of these

269
00:11:59,220 --> 00:12:00,839
vulnerabilities because it was really

270
00:12:00,839 --> 00:12:04,320
really hard again to make sense okay to

271
00:12:04,320 --> 00:12:07,260
to understand something better okay uh

272
00:12:07,260 --> 00:12:09,660
uh something more interesting take out

273
00:12:09,660 --> 00:12:11,880
of this data so we started to manually

274
00:12:11,880 --> 00:12:14,160
go through these vulnerabilities now

275
00:12:14,160 --> 00:12:17,060
this is the time when you know my

276
00:12:17,060 --> 00:12:20,100
experience kicked in in the sense that I

277
00:12:20,100 --> 00:12:21,959
really used to look into vulnerabilities

278
00:12:21,959 --> 00:12:25,560
and reported a few CVS myself so looking

279
00:12:25,560 --> 00:12:27,779
in this how they are making sense around

280
00:12:27,779 --> 00:12:30,060
our world around the cloud native world

281
00:12:30,060 --> 00:12:33,120
so I I took you know

282
00:12:33,120 --> 00:12:36,240
the series first CV from the list and

283
00:12:36,240 --> 00:12:38,519
start to look at it okay I don't know

284
00:12:38,519 --> 00:12:42,139
how are you in Reading CVSs vectors

285
00:12:42,139 --> 00:12:45,240
uh but I can't if you are not reading it

286
00:12:45,240 --> 00:12:47,220
that well so I can tell you that that

287
00:12:47,220 --> 00:12:50,160
this is a uh vulnerability which can be

288
00:12:50,160 --> 00:12:52,160
exploited through network connections

289
00:12:52,160 --> 00:12:55,560
and relatively have a big impact okay

290
00:12:55,560 --> 00:12:58,920
Factor because it can you know it can

291
00:12:58,920 --> 00:13:00,959
cause a takeover of the client process

292
00:13:00,959 --> 00:13:02,760
now I started to read the description

293
00:13:02,760 --> 00:13:04,680
and start to read a little bit more

294
00:13:04,680 --> 00:13:06,720
about the this vulnerability so it's a

295
00:13:06,720 --> 00:13:08,519
busy box vulnerability

296
00:13:08,519 --> 00:13:12,540
BusyBox is I don't know if you know what

297
00:13:12,540 --> 00:13:14,040
BusyBox is

298
00:13:14,040 --> 00:13:17,579
yeah so BusyBox

299
00:13:17,579 --> 00:13:19,920
um invisible if you're using netstat

300
00:13:19,920 --> 00:13:23,459
okay to read DNS records okay an

301
00:13:23,459 --> 00:13:27,959
attacker with a malcrafted uh uh uh the

302
00:13:27,959 --> 00:13:31,820
answer record can take over your VT

303
00:13:31,820 --> 00:13:34,860
compliant terminal okay and

304
00:13:34,860 --> 00:13:37,380
alternatively the attacker also can

305
00:13:37,380 --> 00:13:39,959
change the colors of your terminal so I

306
00:13:39,959 --> 00:13:41,519
have to say it was really funny to read

307
00:13:41,519 --> 00:13:44,820
this this description okay because you

308
00:13:44,820 --> 00:13:46,079
know I don't want to go there we don't

309
00:13:46,079 --> 00:13:47,519
have enough time but it was very funny

310
00:13:47,519 --> 00:13:49,560
so

311
00:13:49,560 --> 00:13:53,579
I've been around okay Linux okay and and

312
00:13:53,579 --> 00:13:55,500
all these Network Tools for a long time

313
00:13:55,500 --> 00:13:57,899
even more longer than I want to admit

314
00:13:57,899 --> 00:14:01,560
okay I've never used netstat okay to

315
00:14:01,560 --> 00:14:04,019
read DNS record I don't know if there is

316
00:14:04,019 --> 00:14:07,139
anyone here here who did that but in

317
00:14:07,139 --> 00:14:09,420
general okay the attacker if he wants to

318
00:14:09,420 --> 00:14:12,600
exploit this he needs to access be able

319
00:14:12,600 --> 00:14:15,720
to poison your DNS servers okay your DS

320
00:14:15,720 --> 00:14:19,680
record and have to cause you to read use

321
00:14:19,680 --> 00:14:22,560
netstat to read that DNS record okay

322
00:14:22,560 --> 00:14:25,380
into a terminal and in order to really

323
00:14:25,380 --> 00:14:27,839
exploit to create the exploit the thing

324
00:14:27,839 --> 00:14:30,300
is which is going to be taken over is

325
00:14:30,300 --> 00:14:32,519
actually the terminal process which

326
00:14:32,519 --> 00:14:36,540
doesn't belong to your container okay

327
00:14:36,540 --> 00:14:39,300
having what it means in general if I

328
00:14:39,300 --> 00:14:40,980
want to understand what does it mean for

329
00:14:40,980 --> 00:14:44,040
a cloud native application this thing as

330
00:14:44,040 --> 00:14:46,380
a security expert okay I will say that

331
00:14:46,380 --> 00:14:48,899
well the my ability to exploit this

332
00:14:48,899 --> 00:14:53,040
issue is very very low okay so let's go

333
00:14:53,040 --> 00:14:55,760
to the next one

334
00:14:55,860 --> 00:14:56,940
um

335
00:14:56,940 --> 00:14:59,339
lipcrypt

336
00:14:59,339 --> 00:15:00,060
um

337
00:15:00,060 --> 00:15:04,440
lipcrypt okay in in very in specific

338
00:15:04,440 --> 00:15:08,519
versions okay mishandles uh

339
00:15:08,519 --> 00:15:11,699
a cryptographic algorithm I think a

340
00:15:11,699 --> 00:15:13,560
symmetric cryptographic algorithm called

341
00:15:13,560 --> 00:15:17,579
lgmal okay and it enables okay the

342
00:15:17,579 --> 00:15:19,920
attacker from a side Channel okay to

343
00:15:19,920 --> 00:15:22,680
extract the the private key okay which

344
00:15:22,680 --> 00:15:24,600
is actually a serious problem

345
00:15:24,600 --> 00:15:28,620
okay the point is that the reason why

346
00:15:28,620 --> 00:15:31,260
this is so prevalent and so up in our

347
00:15:31,260 --> 00:15:33,300
list in our top 10 list

348
00:15:33,300 --> 00:15:36,720
because it is part of the gpg protocol

349
00:15:36,720 --> 00:15:39,600
where do we use gpg protocol anyone

350
00:15:39,600 --> 00:15:42,240
recalls gpg protocol is used in our

351
00:15:42,240 --> 00:15:44,899
package manager so if we are downloading

352
00:15:44,899 --> 00:15:47,880
uh installing packages okay their

353
00:15:47,880 --> 00:15:50,639
signatures are verified with gpg

354
00:15:50,639 --> 00:15:54,180
are they verified with private keys

355
00:15:54,180 --> 00:15:57,360
no packages are validated with public

356
00:15:57,360 --> 00:16:00,300
Keys when I'm signing packages okay then

357
00:16:00,300 --> 00:16:04,500
I use a private key the the very you

358
00:16:04,500 --> 00:16:05,160
know

359
00:16:05,160 --> 00:16:07,800
small percent of container images which

360
00:16:07,800 --> 00:16:10,560
contain private key or which is like a

361
00:16:10,560 --> 00:16:13,440
very bad thing to have a private key

362
00:16:13,440 --> 00:16:16,740
inside your container okay is very small

363
00:16:16,740 --> 00:16:19,320
and the reason why you are get is so

364
00:16:19,320 --> 00:16:21,120
prevalent because the package managers

365
00:16:21,120 --> 00:16:23,579
you are having in your base images and

366
00:16:23,579 --> 00:16:27,660
this thing the most in 99.999 of the

367
00:16:27,660 --> 00:16:29,880
container applications this thing is not

368
00:16:29,880 --> 00:16:31,920
running inside your kubernetes cluster

369
00:16:31,920 --> 00:16:34,980
okay but you still have it in your in in

370
00:16:34,980 --> 00:16:37,560
our top 10. so let's go to something

371
00:16:37,560 --> 00:16:39,600
else sqlite

372
00:16:39,600 --> 00:16:42,120
sqlite when everyone knows sqlite right

373
00:16:42,120 --> 00:16:45,060
there is there is there was okay

374
00:16:45,060 --> 00:16:47,040
vulnerability in sqlite actually a

375
00:16:47,040 --> 00:16:49,680
critical vulnerability which enabled if

376
00:16:49,680 --> 00:16:53,399
someone if an attacker could craft an a

377
00:16:53,399 --> 00:16:57,300
very specific SQL query he could take

378
00:16:57,300 --> 00:17:00,779
over the SQL the process which runs

379
00:17:00,779 --> 00:17:04,439
sqlite okay with this crafted query okay

380
00:17:04,439 --> 00:17:07,799
which is a real serious thing but if you

381
00:17:07,799 --> 00:17:10,980
think about it again in order to exploit

382
00:17:10,980 --> 00:17:13,559
it the the attacker needed to have an

383
00:17:13,559 --> 00:17:16,919
SQL injection beforehand right because

384
00:17:16,919 --> 00:17:19,199
the way from outside the attacker is

385
00:17:19,199 --> 00:17:22,020
coming into your workload is to inject a

386
00:17:22,020 --> 00:17:25,079
SQL query it takes you know a weight

387
00:17:25,079 --> 00:17:27,480
that it has to access and inject this

388
00:17:27,480 --> 00:17:29,820
query so again

389
00:17:29,820 --> 00:17:32,340
it is really okay it is not really

390
00:17:32,340 --> 00:17:34,020
simple because oh you already have a

391
00:17:34,020 --> 00:17:36,240
have an SQL injection problem beforehand

392
00:17:36,240 --> 00:17:38,940
and if you are again looking at why this

393
00:17:38,940 --> 00:17:40,980
is so up in our list this is so up in

394
00:17:40,980 --> 00:17:45,480
our list because they're in uh in sqlite

395
00:17:45,480 --> 00:17:47,760
is part of all the Centos and red hat

396
00:17:47,760 --> 00:17:51,600
images by default okay I don't remember

397
00:17:51,600 --> 00:17:53,820
why maybe it's again the package manager

398
00:17:53,820 --> 00:17:57,059
I don't know okay but but but the fact

399
00:17:57,059 --> 00:17:58,799
is it's there no one says that it

400
00:17:58,799 --> 00:18:00,059
actually runs in your Cloud native

401
00:18:00,059 --> 00:18:02,220
application so again this is something

402
00:18:02,220 --> 00:18:03,900
that's really hard to see how it's going

403
00:18:03,900 --> 00:18:06,240
to be exploited if you're looking at so

404
00:18:06,240 --> 00:18:08,400
I went through okay all the top 10

405
00:18:08,400 --> 00:18:09,480
images

406
00:18:09,480 --> 00:18:13,799
and like I had this made up this really

407
00:18:13,799 --> 00:18:17,880
bad okay opinion but it's uh like it's

408
00:18:17,880 --> 00:18:20,340
trying to make here a point that I only

409
00:18:20,340 --> 00:18:22,620
seen two of them which I can see of the

410
00:18:22,620 --> 00:18:24,720
top 10 which can be in some cases

411
00:18:24,720 --> 00:18:26,640
relevant for a cloud native applications

412
00:18:26,640 --> 00:18:30,000
all the others are really hard for me to

413
00:18:30,000 --> 00:18:32,340
see how they can exploit it okay and

414
00:18:32,340 --> 00:18:35,100
again this is not I'm not completely

415
00:18:35,100 --> 00:18:37,980
like true here okay but I'm trying to

416
00:18:37,980 --> 00:18:40,740
make a point it most of these things are

417
00:18:40,740 --> 00:18:42,179
really really hard to see how they are

418
00:18:42,179 --> 00:18:44,640
exploited even if at all

419
00:18:44,640 --> 00:18:47,220
and only see year two one is which is

420
00:18:47,220 --> 00:18:49,980
this zealib uh uh vulnerability which I

421
00:18:49,980 --> 00:18:53,340
saw that there are I think node.js uh

422
00:18:53,340 --> 00:18:56,100
implementations HTTP service server

423
00:18:56,100 --> 00:18:58,919
implantations where they are using zlip

424
00:18:58,919 --> 00:19:00,600
with this vulnerability and actually can

425
00:19:00,600 --> 00:19:04,320
be exploited in very rare cases and also

426
00:19:04,320 --> 00:19:08,280
in uh lipstein with astn which is uh for

427
00:19:08,280 --> 00:19:09,360
SSL

428
00:19:09,360 --> 00:19:12,120
again not easy to exploit narrowly long

429
00:19:12,120 --> 00:19:13,860
but at least they have some you know

430
00:19:13,860 --> 00:19:15,960
some percent of them are can be

431
00:19:15,960 --> 00:19:18,059
exploited so I looked at also there are

432
00:19:18,059 --> 00:19:20,640
the 10 most vulnerable uh most

433
00:19:20,640 --> 00:19:22,200
vulnerabilities problem vulnerabilities

434
00:19:22,200 --> 00:19:25,740
in the graduated project sample and what

435
00:19:25,740 --> 00:19:28,200
I saw here okay

436
00:19:28,200 --> 00:19:30,360
um I saw he one which was really really

437
00:19:30,360 --> 00:19:32,700
outstanding okay is an issue with

438
00:19:32,700 --> 00:19:34,620
protobuf Library which is a

439
00:19:34,620 --> 00:19:37,380
vulnerability which goes dates back to

440
00:19:37,380 --> 00:19:40,620
2015 which was like a high vulnerability

441
00:19:40,620 --> 00:19:43,200
which is around for a long time and was

442
00:19:43,200 --> 00:19:45,900
really I was really curious about it and

443
00:19:45,900 --> 00:19:49,820
I saw here golang issues and Prometheus

444
00:19:49,820 --> 00:19:52,380
issues which is again make sense okay

445
00:19:52,380 --> 00:19:54,059
because Prometheus is one of the most

446
00:19:54,059 --> 00:19:57,720
common uh uh uh images we've used to

447
00:19:57,720 --> 00:19:59,220
scan also Argo

448
00:19:59,220 --> 00:20:01,020
and so on at the end of the list you can

449
00:20:01,020 --> 00:20:03,240
also see okay the same lead Jeep Crypt

450
00:20:03,240 --> 00:20:07,020
and sqlite issues we had before so I

451
00:20:07,020 --> 00:20:10,140
returned to this vulnerability okay of

452
00:20:10,140 --> 00:20:12,539
protobuf okay which made me think it's

453
00:20:12,539 --> 00:20:14,340
really strange that in the graduated

454
00:20:14,340 --> 00:20:16,799
projects you have a high vulnerability

455
00:20:16,799 --> 00:20:18,780
for which is so old

456
00:20:18,780 --> 00:20:20,520
and after a while I started to look at

457
00:20:20,520 --> 00:20:22,559
it's a real issue

458
00:20:22,559 --> 00:20:24,240
and after a while it turned out that

459
00:20:24,240 --> 00:20:28,200
actually there is a bug open on on uh on

460
00:20:28,200 --> 00:20:30,960
gripe okay and it turns out that

461
00:20:30,960 --> 00:20:33,720
actually gripe misinterprets the golang

462
00:20:33,720 --> 00:20:36,900
implementation of protobuf and it thinks

463
00:20:36,900 --> 00:20:38,820
that it's the same as the as this

464
00:20:38,820 --> 00:20:40,980
implementation and the vulnerability

465
00:20:40,980 --> 00:20:44,520
actually is only exists inside this

466
00:20:44,520 --> 00:20:45,960
implementation and nothing the Google

467
00:20:45,960 --> 00:20:48,780
implementation in other words okay this

468
00:20:48,780 --> 00:20:51,059
is a is simply is a bad entry okay and

469
00:20:51,059 --> 00:20:54,120
the scanner creates here uh a false

470
00:20:54,120 --> 00:20:57,840
positive Okay so this wasn't an issue

471
00:20:57,840 --> 00:20:59,580
but in general I went through the same

472
00:20:59,580 --> 00:21:02,280
list and and looked at also I found okay

473
00:21:02,280 --> 00:21:06,240
that only uh from my point of five uh of

474
00:21:06,240 --> 00:21:08,580
these are can be vulnerabilities that

475
00:21:08,580 --> 00:21:11,520
can't be in some circumstances exploited

476
00:21:11,520 --> 00:21:15,660
uh uh in uh in our world so

477
00:21:15,660 --> 00:21:18,480
then I looked at okay what are the

478
00:21:18,480 --> 00:21:21,419
stats of of uh per image vulnerability

479
00:21:21,419 --> 00:21:23,460
so if I'm taking a random image inside

480
00:21:23,460 --> 00:21:27,780
the sample okay what are the uh

481
00:21:27,780 --> 00:21:29,480
potential chaos number of

482
00:21:29,480 --> 00:21:32,280
vulnerabilities okay in each category

483
00:21:32,280 --> 00:21:34,860
okay and you can see that in in the

484
00:21:34,860 --> 00:21:37,380
critical vulnerabilities around you know

485
00:21:37,380 --> 00:21:39,539
nearly I think it was like seven to

486
00:21:39,539 --> 00:21:41,940
eight uh critical vulnerabilities in the

487
00:21:41,940 --> 00:21:44,940
in the general sample okay uh sorry

488
00:21:44,940 --> 00:21:47,940
there is a something bad in I just

489
00:21:47,940 --> 00:21:50,039
noticed that in the colors are were

490
00:21:50,039 --> 00:21:52,740
swapped here so

491
00:21:52,740 --> 00:21:56,100
the black is the general sample okay the

492
00:21:56,100 --> 00:21:59,580
blue is uh uh the graduated project okay

493
00:21:59,580 --> 00:22:02,700
so the legend is strong enough to be

494
00:22:02,700 --> 00:22:03,900
fixed

495
00:22:03,900 --> 00:22:04,799
um

496
00:22:04,799 --> 00:22:07,620
so as you can see it this is something

497
00:22:07,620 --> 00:22:10,799
very very uh complementing to to the

498
00:22:10,799 --> 00:22:13,080
graduated project okay because if you

499
00:22:13,080 --> 00:22:15,539
are taking any random image okay from

500
00:22:15,539 --> 00:22:17,760
our sample it most likely have so much

501
00:22:17,760 --> 00:22:20,280
more vulnerabilities than the graduated

502
00:22:20,280 --> 00:22:22,320
projects okay and it's also the same for

503
00:22:22,320 --> 00:22:23,940
what you've seen this morning in

504
00:22:23,940 --> 00:22:27,059
priyanka's uh uh Keynote

505
00:22:27,059 --> 00:22:30,419
so I thought well okay this is very very

506
00:22:30,419 --> 00:22:32,700
nice okay because we're doing an awesome

507
00:22:32,700 --> 00:22:37,080
job in in cncf okay but then it made me

508
00:22:37,080 --> 00:22:39,900
think okay well what's happening here

509
00:22:39,900 --> 00:22:43,159
because this can be so good okay

510
00:22:43,159 --> 00:22:46,200
and it's returned into to the same thing

511
00:22:46,200 --> 00:22:48,020
we already started to talk about okay

512
00:22:48,020 --> 00:22:50,580
that a vulnerability image scanner

513
00:22:50,580 --> 00:22:52,320
returns is not something that an

514
00:22:52,320 --> 00:22:55,500
actually an exploitable security issue

515
00:22:55,500 --> 00:22:56,940
always

516
00:22:56,940 --> 00:23:00,299
okay and then I started to decide to

517
00:23:00,299 --> 00:23:03,480
look into we have a cubescape we have uh

518
00:23:03,480 --> 00:23:06,600
uh working progress project okay called

519
00:23:06,600 --> 00:23:11,640
sniffer which enables you to uh to use

520
00:23:11,640 --> 00:23:14,280
ebpf to understand which software

521
00:23:14,280 --> 00:23:16,860
packages are loaded into the memory in

522
00:23:16,860 --> 00:23:18,059
the container

523
00:23:18,059 --> 00:23:21,960
and using okay this information

524
00:23:21,960 --> 00:23:24,299
what we can do is we can filter out the

525
00:23:24,299 --> 00:23:28,140
s-bomb okay of the container image and

526
00:23:28,140 --> 00:23:30,299
only create an sbone which only shows

527
00:23:30,299 --> 00:23:32,400
you the the software packages which are

528
00:23:32,400 --> 00:23:34,380
actually inside your container running

529
00:23:34,380 --> 00:23:37,620
okay and using this filter as well you

530
00:23:37,620 --> 00:23:39,659
can feed the vulnerability scanner and

531
00:23:39,659 --> 00:23:41,760
get the result now the interesting thing

532
00:23:41,760 --> 00:23:43,260
I'm just returning for here a minute

533
00:23:43,260 --> 00:23:46,620
okay you can see here in ngnx uh

534
00:23:46,620 --> 00:23:49,559
container okay the image will never be

535
00:23:49,559 --> 00:23:51,840
this kind of return near nearly 400

536
00:23:51,840 --> 00:23:53,760
vulnerabilities but only four of them

537
00:23:53,760 --> 00:23:56,460
are in the memory which is like

538
00:23:56,460 --> 00:23:59,100
amazing okay

539
00:23:59,100 --> 00:24:00,299
um

540
00:24:00,299 --> 00:24:03,539
and now it took again all the top 10

541
00:24:03,539 --> 00:24:04,860
vulnerabilities

542
00:24:04,860 --> 00:24:07,620
and now recalculated the images okay

543
00:24:07,620 --> 00:24:10,440
with this one with this relevancy and

544
00:24:10,440 --> 00:24:13,500
what I saw okay that actually still

545
00:24:13,500 --> 00:24:17,039
graduated projects are much better okay

546
00:24:17,039 --> 00:24:19,919
in the general sense but the difference

547
00:24:19,919 --> 00:24:22,919
is not so big okay so if we had like

548
00:24:22,919 --> 00:24:26,039
this ten to one like General number

549
00:24:26,039 --> 00:24:28,919
beforehand we can see that that if we

550
00:24:28,919 --> 00:24:30,720
are looking at General sample after we

551
00:24:30,720 --> 00:24:32,280
filtered out all these packages which

552
00:24:32,280 --> 00:24:33,539
are not really running inside the

553
00:24:33,539 --> 00:24:35,760
containers we can see the difference is

554
00:24:35,760 --> 00:24:37,799
not so big okay so you just focus on the

555
00:24:37,799 --> 00:24:39,720
critical and high vulnerabilities you

556
00:24:39,720 --> 00:24:41,220
will see that there is no big difference

557
00:24:41,220 --> 00:24:44,159
between the number of the uh of the

558
00:24:44,159 --> 00:24:46,380
vulnerabilities which you kind of again

559
00:24:46,380 --> 00:24:50,880
uh made us okay think that well still

560
00:24:50,880 --> 00:24:53,400
graduated projects are doing much better

561
00:24:53,400 --> 00:24:57,419
okay but but they are not so far as we

562
00:24:57,419 --> 00:24:59,100
thought before

563
00:24:59,100 --> 00:25:02,280
now why are this why this is happening

564
00:25:02,280 --> 00:25:04,320
okay and and I think it's an interesting

565
00:25:04,320 --> 00:25:06,539
uh discussion okay

566
00:25:06,539 --> 00:25:08,460
um and we could like Engineers among

567
00:25:08,460 --> 00:25:10,080
ourselves we could you know talk a lot

568
00:25:10,080 --> 00:25:12,780
about this but in general okay

569
00:25:12,780 --> 00:25:14,940
um I think that one of the reasons okay

570
00:25:14,940 --> 00:25:17,700
that in the graduated project in general

571
00:25:17,700 --> 00:25:19,200
the cncf projects has much less

572
00:25:19,200 --> 00:25:21,659
vulnerabilities okay because there we

573
00:25:21,659 --> 00:25:23,640
are using newer Technologies these are

574
00:25:23,640 --> 00:25:25,919
most of our projects are are not

575
00:25:25,919 --> 00:25:29,940
I already created for this ecosystem and

576
00:25:29,940 --> 00:25:33,299
they are using go okay they are they are

577
00:25:33,299 --> 00:25:37,320
uh um uh usually built upon uh up on

578
00:25:37,320 --> 00:25:40,380
base images which are which are empty

579
00:25:40,380 --> 00:25:42,840
okay and not like you know base images

580
00:25:42,840 --> 00:25:45,659
of of uh different Linux distributions

581
00:25:45,659 --> 00:25:47,580
which are bringing in their own

582
00:25:47,580 --> 00:25:49,440
vulnerabilities even before you've added

583
00:25:49,440 --> 00:25:53,220
your own files uh inside them so

584
00:25:53,220 --> 00:25:55,620
actually newer Technologies are are I

585
00:25:55,620 --> 00:25:59,100
think one of the you know a big uh have

586
00:25:59,100 --> 00:26:01,679
a big effect on in general okay in these

587
00:26:01,679 --> 00:26:03,419
numbers and also

588
00:26:03,419 --> 00:26:05,400
if we are looking okay the way we are

589
00:26:05,400 --> 00:26:07,980
managing things at cncf and these

590
00:26:07,980 --> 00:26:11,159
projects I think the transparency and is

591
00:26:11,159 --> 00:26:14,340
very uh um have a big effect on on

592
00:26:14,340 --> 00:26:17,400
solving issues really fast and I think

593
00:26:17,400 --> 00:26:19,620
there is a really good you know we can

594
00:26:19,620 --> 00:26:21,840
see that it it has a big effect in

595
00:26:21,840 --> 00:26:22,799
general

596
00:26:22,799 --> 00:26:24,539
so

597
00:26:24,539 --> 00:26:25,500
um

598
00:26:25,500 --> 00:26:29,159
about scanning configurations okay

599
00:26:29,159 --> 00:26:32,159
configurations of of kubernetes objects

600
00:26:32,159 --> 00:26:35,279
so again what we're going to do is is

601
00:26:35,279 --> 00:26:37,559
comparing these two samples okay of

602
00:26:37,559 --> 00:26:40,020
repository repositories of of graduated

603
00:26:40,020 --> 00:26:41,880
projects and repositors of the general

604
00:26:41,880 --> 00:26:46,020
population okay uh we're going to look

605
00:26:46,020 --> 00:26:48,240
at what kind of issues we are seeing in

606
00:26:48,240 --> 00:26:51,360
both uh samples okay and what are the

607
00:26:51,360 --> 00:26:54,360
most prevalent uh issues and then we are

608
00:26:54,360 --> 00:26:56,820
going to see okay how these issues are

609
00:26:56,820 --> 00:26:59,220
affecting okay in general these

610
00:26:59,220 --> 00:27:01,140
populations so

611
00:27:01,140 --> 00:27:03,480
uh cubescape uses

612
00:27:03,480 --> 00:27:06,720
this concept of controls uh which are

613
00:27:06,720 --> 00:27:09,059
actually think about them as tests okay

614
00:27:09,059 --> 00:27:12,059
of different properties of objects so if

615
00:27:12,059 --> 00:27:14,100
like if you like you have let's say

616
00:27:14,100 --> 00:27:15,960
different whether you are using an

617
00:27:15,960 --> 00:27:18,539
immutable file system in your kubernetes

618
00:27:18,539 --> 00:27:21,720
workload is one test okay we're checking

619
00:27:21,720 --> 00:27:25,080
okay the the security context where you

620
00:27:25,080 --> 00:27:27,240
have this property and you can see that

621
00:27:27,240 --> 00:27:30,000
the most felt control among the general

622
00:27:30,000 --> 00:27:34,080
population okay was this immutable file

623
00:27:34,080 --> 00:27:36,299
system so we've seen a lot lot of

624
00:27:36,299 --> 00:27:38,520
workloads which didn't use immutable

625
00:27:38,520 --> 00:27:40,740
file system so it kind of makes sense in

626
00:27:40,740 --> 00:27:42,659
the way that immutable system is not

627
00:27:42,659 --> 00:27:45,799
easy it takes them to configure it okay

628
00:27:45,799 --> 00:27:49,380
and and although it is very good from a

629
00:27:49,380 --> 00:27:52,260
security perspective uh I wouldn't say

630
00:27:52,260 --> 00:27:55,020
that it is the most important have the

631
00:27:55,020 --> 00:27:56,940
most effect on it so it kind of makes

632
00:27:56,940 --> 00:27:59,220
sense that it's among the first first

633
00:27:59,220 --> 00:28:02,340
things it was quite uh surprising that

634
00:28:02,340 --> 00:28:04,440
that we've seen as you can see the

635
00:28:04,440 --> 00:28:07,740
second one was resource limit there are

636
00:28:07,740 --> 00:28:09,360
a lot of workloads which doesn't have

637
00:28:09,360 --> 00:28:12,179
resource limits in our sample

638
00:28:12,179 --> 00:28:14,880
we have love who are who are running as

639
00:28:14,880 --> 00:28:17,220
root containers therefore they are

640
00:28:17,220 --> 00:28:18,360
failing the control of non-root

641
00:28:18,360 --> 00:28:20,580
containers and also around the same

642
00:28:20,580 --> 00:28:22,440
numbers are allowing privilege

643
00:28:22,440 --> 00:28:26,580
escalations inside okay your containers

644
00:28:26,580 --> 00:28:29,460
and also after it you can see that a lot

645
00:28:29,460 --> 00:28:31,080
of not configuring memory limits

646
00:28:31,080 --> 00:28:32,960
resource limits

647
00:28:32,960 --> 00:28:35,880
common labor usage I don't think it's a

648
00:28:35,880 --> 00:28:38,400
security issue but in jail I can't see

649
00:28:38,400 --> 00:28:41,039
that why it is a point has a point and I

650
00:28:41,039 --> 00:28:43,220
saw after it that we had a lot of CIS

651
00:28:43,220 --> 00:28:46,919
compliance issues down at the end of of

652
00:28:46,919 --> 00:28:49,559
the sample like it was quite interesting

653
00:28:49,559 --> 00:28:52,140
because I didn't understand at the

654
00:28:52,140 --> 00:28:53,940
beginning okay when I looked at this the

655
00:28:53,940 --> 00:28:56,340
sample why we have so few security

656
00:28:56,340 --> 00:28:57,779
contexts

657
00:28:57,779 --> 00:29:00,779
uh as opposed to a root file system and

658
00:29:00,779 --> 00:29:02,640
so on because I would expect that more

659
00:29:02,640 --> 00:29:04,679
people are are not configuring their

660
00:29:04,679 --> 00:29:06,360
security context than for example

661
00:29:06,360 --> 00:29:09,440
putting resource limits and then

662
00:29:09,440 --> 00:29:12,720
since I'm looking at the uh at the

663
00:29:12,720 --> 00:29:15,240
sample of the last three months and

664
00:29:15,240 --> 00:29:17,700
cubescape only released CIS compliance

665
00:29:17,700 --> 00:29:20,340
only a month and a half ago at the end I

666
00:29:20,340 --> 00:29:22,380
understood that actually this wasn't you

667
00:29:22,380 --> 00:29:24,000
know the reason for it that they are at

668
00:29:24,000 --> 00:29:25,440
the end of the list is because actually

669
00:29:25,440 --> 00:29:28,799
the sample is Tainted in this direction

670
00:29:28,799 --> 00:29:31,980
so I'm a graduated project it was very

671
00:29:31,980 --> 00:29:35,100
very very uh surprising to see that that

672
00:29:35,100 --> 00:29:38,520
the most common issue was that resource

673
00:29:38,520 --> 00:29:41,039
limits are not configured

674
00:29:41,039 --> 00:29:42,059
um

675
00:29:42,059 --> 00:29:45,419
and after it's okay uh Readiness probes

676
00:29:45,419 --> 00:29:47,220
and immutable file systems a little bit

677
00:29:47,220 --> 00:29:49,980
later on memory limits were missing

678
00:29:49,980 --> 00:29:51,899
non-root containers which is always

679
00:29:51,899 --> 00:29:54,240
showing that non-root contains they're

680
00:29:54,240 --> 00:29:57,419
more configured in in graduated projects

681
00:29:57,419 --> 00:29:59,039
and privilege escalations are more

682
00:29:59,039 --> 00:30:01,380
configured but a lot of them again

683
00:30:01,380 --> 00:30:04,559
missed were missing things like redness

684
00:30:04,559 --> 00:30:08,399
and probes and resource limits which was

685
00:30:08,399 --> 00:30:10,860
like you know again kind of strange but

686
00:30:10,860 --> 00:30:13,620
as it turns out this is how it how it

687
00:30:13,620 --> 00:30:14,880
goes

688
00:30:14,880 --> 00:30:16,740
but in general okay we've seen that

689
00:30:16,740 --> 00:30:18,419
there is this distribution which is a

690
00:30:18,419 --> 00:30:19,919
little bit different okay but but we

691
00:30:19,919 --> 00:30:22,260
have a lot of issues now we try to

692
00:30:22,260 --> 00:30:26,059
compare okay if we are we take a general

693
00:30:26,059 --> 00:30:29,820
uh uh uh if randomly would take uh any

694
00:30:29,820 --> 00:30:33,000
workloading from both samples okay what

695
00:30:33,000 --> 00:30:35,340
are the number of controls how

696
00:30:35,340 --> 00:30:37,260
what the percent of the control of all

697
00:30:37,260 --> 00:30:40,650
our controls which are would fail on on

698
00:30:40,650 --> 00:30:43,159
[Music]

699
00:30:43,159 --> 00:30:46,679
randomly picked workload okay and it

700
00:30:46,679 --> 00:30:49,140
turned out that 35 of the of our

701
00:30:49,140 --> 00:30:52,200
controls would fail it would pick a

702
00:30:52,200 --> 00:30:55,080
random uh uh random workload in the

703
00:30:55,080 --> 00:30:58,020
graduated project and 38 in the general

704
00:30:58,020 --> 00:30:59,159
sample

705
00:30:59,159 --> 00:31:01,740
and from my point here I can say that

706
00:31:01,740 --> 00:31:03,539
it's real clear that they are very these

707
00:31:03,539 --> 00:31:05,399
numbers are really close Okay one to

708
00:31:05,399 --> 00:31:08,159
each other so I can say that there is no

709
00:31:08,159 --> 00:31:11,100
much no big difference okay so as we

710
00:31:11,100 --> 00:31:14,039
could we saw that in the image

711
00:31:14,039 --> 00:31:15,779
vulnerabilities we saw a big difference

712
00:31:15,779 --> 00:31:18,480
between the two samples okay of

713
00:31:18,480 --> 00:31:20,399
vulnerability distribution and number of

714
00:31:20,399 --> 00:31:23,159
vulnerabilities inside image in case of

715
00:31:23,159 --> 00:31:27,240
of the way uh that uh the workloads are

716
00:31:27,240 --> 00:31:29,940
configured we can see that they're it's

717
00:31:29,940 --> 00:31:31,799
still better okay the graduated sample

718
00:31:31,799 --> 00:31:34,799
but not by far okay by a little

719
00:31:34,799 --> 00:31:39,299
so if we are wrapping up okay this

720
00:31:39,299 --> 00:31:40,860
presentation

721
00:31:40,860 --> 00:31:42,000
um

722
00:31:42,000 --> 00:31:44,279
it is really okay it is really hard if

723
00:31:44,279 --> 00:31:46,020
I'm getting back to the vulnerability

724
00:31:46,020 --> 00:31:48,779
discussion okay it's really hard I mean

725
00:31:48,779 --> 00:31:50,159
even though I presented you numbers

726
00:31:50,159 --> 00:31:52,020
which are showing you this direction

727
00:31:52,020 --> 00:31:55,200
it's really hard to say that that uh

728
00:31:55,200 --> 00:31:57,779
graduated projects are less exploitable

729
00:31:57,779 --> 00:32:00,899
okay definitely okay because the very

730
00:32:00,899 --> 00:32:04,320
reason because I'm I and I sharing you

731
00:32:04,320 --> 00:32:06,899
with this with YouTube and you know this

732
00:32:06,899 --> 00:32:08,760
small number of people we are having

733
00:32:08,760 --> 00:32:11,460
here my opinion that it is vulnerability

734
00:32:11,460 --> 00:32:15,659
scans are really bad today they are not

735
00:32:15,659 --> 00:32:18,480
really representing real exploitability

736
00:32:18,480 --> 00:32:22,080
okay and therefore all these numbers are

737
00:32:22,080 --> 00:32:24,659
even if I'm taking into account the

738
00:32:24,659 --> 00:32:26,940
sniffer results which showed you know

739
00:32:26,940 --> 00:32:28,380
filtered out a lot of issues which

740
00:32:28,380 --> 00:32:30,960
cannot be exploited definitely all with

741
00:32:30,960 --> 00:32:32,700
all the vulnerabilities I've stayed with

742
00:32:32,700 --> 00:32:35,039
I didn't have any real number about

743
00:32:35,039 --> 00:32:37,260
whether they can be exploited in a real

744
00:32:37,260 --> 00:32:38,659
life workload

745
00:32:38,659 --> 00:32:42,179
uh without going to one of them to each

746
00:32:42,179 --> 00:32:45,179
of them and start to check it so I kind

747
00:32:45,179 --> 00:32:47,039
of State for sure okay the graduated

748
00:32:47,039 --> 00:32:49,679
projects are are less vulnerable but

749
00:32:49,679 --> 00:32:52,380
like but there is a good hunch that they

750
00:32:52,380 --> 00:32:55,380
are less okay vulnerable and

751
00:32:55,380 --> 00:32:56,340
um

752
00:32:56,340 --> 00:32:58,020
and I think that you know we have to

753
00:32:58,020 --> 00:32:59,820
work in in general okay we have to work

754
00:32:59,820 --> 00:33:02,159
a lot of of uh

755
00:33:02,159 --> 00:33:03,960
vulnerability scanning to make it much

756
00:33:03,960 --> 00:33:07,500
better okay and much useful for us uh in

757
00:33:07,500 --> 00:33:09,899
the misconfiguration side uh okay again

758
00:33:09,899 --> 00:33:11,880
which I already told you I think that

759
00:33:11,880 --> 00:33:14,340
graduate projects has a slight lead okay

760
00:33:14,340 --> 00:33:17,580
on that but again this is not a big you

761
00:33:17,580 --> 00:33:20,640
know big difference and I think that one

762
00:33:20,640 --> 00:33:23,760
of the This research we are still doing

763
00:33:23,760 --> 00:33:25,559
uh one of the things that made us to

764
00:33:25,559 --> 00:33:27,299
think that how we can

765
00:33:27,299 --> 00:33:30,600
we could generate a pull request to

766
00:33:30,600 --> 00:33:32,220
graduated projects and in general okay

767
00:33:32,220 --> 00:33:35,039
open source project to send them you

768
00:33:35,039 --> 00:33:38,399
know fixes automatically in GitHub and

769
00:33:38,399 --> 00:33:40,140
you know we are looking for contributors

770
00:33:40,140 --> 00:33:41,940
in the cubescape projects for those who

771
00:33:41,940 --> 00:33:45,419
want to join this effort

772
00:33:45,419 --> 00:33:48,559
um yeah and uh this was my talk okay

773
00:33:48,559 --> 00:33:52,799
rated and thank you very much and I'm

774
00:33:52,799 --> 00:33:54,480
going to in in a half an hour I'm going

775
00:33:54,480 --> 00:33:57,679
to talk in the Next Room from here about

776
00:33:57,679 --> 00:34:01,260
prioritization of workloads and how scan

777
00:34:01,260 --> 00:34:03,620
of of

778
00:34:03,620 --> 00:34:06,000
prioritization of scan results can help

779
00:34:06,000 --> 00:34:08,460
you to solve big issues thank you very

780
00:34:08,460 --> 00:34:09,030
much

781
00:34:09,030 --> 00:34:13,479
[Applause]

