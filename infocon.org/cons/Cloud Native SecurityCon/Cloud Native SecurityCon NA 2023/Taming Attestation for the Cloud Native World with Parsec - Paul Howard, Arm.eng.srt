1
00:00:00,599 --> 00:00:03,179
okay hi good afternoon

2
00:00:03,179 --> 00:00:03,899
um

3
00:00:03,899 --> 00:00:07,160
who's enjoying the conference

4
00:00:07,740 --> 00:00:10,679
oh about half of you who's who's learned

5
00:00:10,679 --> 00:00:12,840
something new

6
00:00:12,840 --> 00:00:14,940
well that's great yep that's the reason

7
00:00:14,940 --> 00:00:17,039
we're here

8
00:00:17,039 --> 00:00:19,680
and I have one more opportunity to to

9
00:00:19,680 --> 00:00:21,480
maybe try to share something else that's

10
00:00:21,480 --> 00:00:23,279
a little new

11
00:00:23,279 --> 00:00:26,880
uh so welcome to my session on teaming

12
00:00:26,880 --> 00:00:28,859
at a station for the cloud native world

13
00:00:28,859 --> 00:00:31,320
with parsec

14
00:00:31,320 --> 00:00:31,920
um

15
00:00:31,920 --> 00:00:34,739
a title that was so long that it

16
00:00:34,739 --> 00:00:36,480
actually had to be truncated off the end

17
00:00:36,480 --> 00:00:38,280
of the digital display just outside of

18
00:00:38,280 --> 00:00:39,719
the room

19
00:00:39,719 --> 00:00:41,160
um it is a long title but I'm going to

20
00:00:41,160 --> 00:00:43,440
try to justify all of the parts of it as

21
00:00:43,440 --> 00:00:45,660
we go through

22
00:00:45,660 --> 00:00:48,960
so quick business card so my name is

23
00:00:48,960 --> 00:00:51,239
Paul Howard I'm a principal system

24
00:00:51,239 --> 00:00:53,879
Solutions architect with Arm based out

25
00:00:53,879 --> 00:00:56,579
of Cambridge in the UK I've been with

26
00:00:56,579 --> 00:00:59,640
arm for a little over four years now and

27
00:00:59,640 --> 00:01:01,440
I focus on solutions that span the

28
00:01:01,440 --> 00:01:03,660
hardware and software and try to get the

29
00:01:03,660 --> 00:01:06,360
best out of both so if you're wondering

30
00:01:06,360 --> 00:01:08,280
what is somebody from the CPU

31
00:01:08,280 --> 00:01:11,580
architectures company doing at a cloud

32
00:01:11,580 --> 00:01:13,979
native conference hardware and software

33
00:01:13,979 --> 00:01:17,700
working well together is very important

34
00:01:17,700 --> 00:01:19,619
um

35
00:01:19,619 --> 00:01:21,299
I clearly need a higher resolution

36
00:01:21,299 --> 00:01:24,020
selfie

37
00:01:24,299 --> 00:01:26,100
or maybe the picture's fine and I just

38
00:01:26,100 --> 00:01:28,140
look like that in real life

39
00:01:28,140 --> 00:01:30,780
um so so

40
00:01:30,780 --> 00:01:32,520
a lot of my work is investigations and

41
00:01:32,520 --> 00:01:35,100
prototyping but also open source

42
00:01:35,100 --> 00:01:36,780
development and I'm actually one of the

43
00:01:36,780 --> 00:01:38,700
founding maintainers of the parsec

44
00:01:38,700 --> 00:01:43,259
project which is a cncf Sandbox project

45
00:01:43,259 --> 00:01:44,400
um other

46
00:01:44,400 --> 00:01:47,400
facets of my online presence you can see

47
00:01:47,400 --> 00:01:48,900
there and you're welcome to make use of

48
00:01:48,900 --> 00:01:50,520
them so if you want to connect with me

49
00:01:50,520 --> 00:01:53,159
or follow up on anything you hear this

50
00:01:53,159 --> 00:01:55,320
afternoon please do

51
00:01:55,320 --> 00:01:57,960
so here's what I'm going to cover

52
00:01:57,960 --> 00:02:00,000
so this is a session on parsec but it's

53
00:02:00,000 --> 00:02:02,939
a session on new directions in parsec so

54
00:02:02,939 --> 00:02:04,500
there isn't going to be time today to

55
00:02:04,500 --> 00:02:07,320
cover parsec in depth uh it's not going

56
00:02:07,320 --> 00:02:09,419
to be a deep dive on parsec architecture

57
00:02:09,419 --> 00:02:11,700
I will introduce it I'll go through the

58
00:02:11,700 --> 00:02:13,560
motivations for it

59
00:02:13,560 --> 00:02:15,720
um because maybe not everyone here is

60
00:02:15,720 --> 00:02:17,940
familiar with it yet but also because

61
00:02:17,940 --> 00:02:19,680
some of that context and introduction

62
00:02:19,680 --> 00:02:22,020
will help with the main topic of the

63
00:02:22,020 --> 00:02:25,260
afternoon which is at a station

64
00:02:25,260 --> 00:02:26,819
so I'm going to talk about some future

65
00:02:26,819 --> 00:02:29,520
work in parsec to expand its feature set

66
00:02:29,520 --> 00:02:31,800
into the world of attestation and I'm

67
00:02:31,800 --> 00:02:33,239
also going to bring in another open

68
00:02:33,239 --> 00:02:35,520
source project called Verizon

69
00:02:35,520 --> 00:02:38,040
an operation lives and breathes at a

70
00:02:38,040 --> 00:02:40,680
station and is concerned with the

71
00:02:40,680 --> 00:02:43,140
verification of attestations so I'm

72
00:02:43,140 --> 00:02:44,819
going to be talking about parsec for

73
00:02:44,819 --> 00:02:47,819
evidence Gathering and veraison for

74
00:02:47,819 --> 00:02:50,580
verification and we're going to see how

75
00:02:50,580 --> 00:02:54,000
these two projects can be combined

76
00:02:54,000 --> 00:02:56,400
and then we'll see to what effect and

77
00:02:56,400 --> 00:02:58,200
I'm going to focus on two examples that

78
00:02:58,200 --> 00:03:00,060
I think are particularly interesting and

79
00:03:00,060 --> 00:03:01,920
hopefully relevant to us

80
00:03:01,920 --> 00:03:04,620
the first is the use of attestations as

81
00:03:04,620 --> 00:03:06,780
part of establishing a secure Channel

82
00:03:06,780 --> 00:03:09,300
between two entities where we're working

83
00:03:09,300 --> 00:03:12,060
with the industry on an extension to TLS

84
00:03:12,060 --> 00:03:15,239
1.3 the built at a station

85
00:03:15,239 --> 00:03:18,420
into the handshake

86
00:03:18,420 --> 00:03:20,340
and the second is going to bring in

87
00:03:20,340 --> 00:03:23,040
another cncf project namely spire and

88
00:03:23,040 --> 00:03:25,860
talks about how I think that Spire can

89
00:03:25,860 --> 00:03:27,599
consume the work that we're doing in

90
00:03:27,599 --> 00:03:29,819
parsec and Verizon

91
00:03:29,819 --> 00:03:31,440
to

92
00:03:31,440 --> 00:03:32,879
to do

93
00:03:32,879 --> 00:03:34,260
a new

94
00:03:34,260 --> 00:03:37,200
a new way of doing hardware-based node

95
00:03:37,200 --> 00:03:38,599
data station

96
00:03:38,599 --> 00:03:41,580
I will I hope leave some minutes at the

97
00:03:41,580 --> 00:03:43,319
end for Q a I don't mind being

98
00:03:43,319 --> 00:03:45,440
interrupted briefly so if I need to

99
00:03:45,440 --> 00:03:48,659
clarify or just repeat something but

100
00:03:48,659 --> 00:03:50,580
let's save more involved questions for

101
00:03:50,580 --> 00:03:53,280
the end just in the interests of running

102
00:03:53,280 --> 00:03:55,620
to time

103
00:03:55,620 --> 00:03:57,840
okay so let's begin here with the cloud

104
00:03:57,840 --> 00:04:01,500
native Edge so what does this mean

105
00:04:01,500 --> 00:04:03,060
well Edge Computing nodes were

106
00:04:03,060 --> 00:04:05,340
traditionally gateways so in an iot

107
00:04:05,340 --> 00:04:08,400
application the role of a Gateway is to

108
00:04:08,400 --> 00:04:10,260
sit between the endpoint devices that

109
00:04:10,260 --> 00:04:12,900
are typically non-ip devices and to talk

110
00:04:12,900 --> 00:04:15,900
over those local protocols so think of

111
00:04:15,900 --> 00:04:18,959
your Bluetooth your zigbee modbus those

112
00:04:18,959 --> 00:04:20,699
kinds of things

113
00:04:20,699 --> 00:04:22,860
Gateway can gather data from endpoint

114
00:04:22,860 --> 00:04:24,900
devices and it can deliver actions or

115
00:04:24,900 --> 00:04:27,479
commands over those same protocols and

116
00:04:27,479 --> 00:04:29,340
then of course in turn the Gateway is an

117
00:04:29,340 --> 00:04:31,020
IP capable device it's on the internet

118
00:04:31,020 --> 00:04:33,540
it can go and talk to services in the

119
00:04:33,540 --> 00:04:35,340
cloud

120
00:04:35,340 --> 00:04:37,560
as for the kinds of compute workloads

121
00:04:37,560 --> 00:04:39,180
that would run on Gateway as well those

122
00:04:39,180 --> 00:04:41,520
tend to be embedded very tightly

123
00:04:41,520 --> 00:04:44,220
Hardware integrated singular of purpose

124
00:04:44,220 --> 00:04:47,220
flashed in the factory and they would be

125
00:04:47,220 --> 00:04:48,960
doing things like protocol translation

126
00:04:48,960 --> 00:04:51,419
and the compute power of devices like

127
00:04:51,419 --> 00:04:54,900
that would generally be quite modest

128
00:04:54,900 --> 00:04:57,720
so that if you like is the Gateway model

129
00:04:57,720 --> 00:05:01,160
of edge computing

130
00:05:02,100 --> 00:05:04,560
so what's a cloud native model

131
00:05:04,560 --> 00:05:06,419
so as the number of connected devices

132
00:05:06,419 --> 00:05:08,759
increases so too does the volume and the

133
00:05:08,759 --> 00:05:10,199
complexity of the data that they

134
00:05:10,199 --> 00:05:13,440
generate and back hauling that kind of

135
00:05:13,440 --> 00:05:15,300
volume of data for processing centrally

136
00:05:15,300 --> 00:05:17,639
in the cloud starts to make less sense

137
00:05:17,639 --> 00:05:20,100
economically or in terms of performance

138
00:05:20,100 --> 00:05:24,120
or even sometimes the regulatory reasons

139
00:05:24,120 --> 00:05:25,919
and what this means is that we see a

140
00:05:25,919 --> 00:05:27,720
drive towards processing more and more

141
00:05:27,720 --> 00:05:30,120
of that data locally at the edge

142
00:05:30,120 --> 00:05:32,520
on edge Computing nodes that have more

143
00:05:32,520 --> 00:05:34,860
compute capability built into them able

144
00:05:34,860 --> 00:05:37,199
to run more sophisticated workloads

145
00:05:37,199 --> 00:05:40,020
doing things like ml inference or Sensor

146
00:05:40,020 --> 00:05:42,440
Fusion

147
00:05:43,800 --> 00:05:45,360
so if our workloads are more

148
00:05:45,360 --> 00:05:46,800
sophisticated then it means that they

149
00:05:46,800 --> 00:05:48,240
are looking more and more like stuff

150
00:05:48,240 --> 00:05:49,860
that we're really used to deploying in

151
00:05:49,860 --> 00:05:52,139
the cloud The Edge becomes more like an

152
00:05:52,139 --> 00:05:54,120
extension of the cloud rather than this

153
00:05:54,120 --> 00:05:56,880
very rigid locked down embedded Gateway

154
00:05:56,880 --> 00:05:58,919
that we have over here

155
00:05:58,919 --> 00:06:01,199
so the edge becomes a place where we

156
00:06:01,199 --> 00:06:02,699
want to roll out and orchestrate

157
00:06:02,699 --> 00:06:05,039
applications and services just like we

158
00:06:05,039 --> 00:06:07,680
can in the cloud and so for this reason

159
00:06:07,680 --> 00:06:11,460
we can call this a cloud native Edge

160
00:06:11,460 --> 00:06:14,280
so Gateway model

161
00:06:14,280 --> 00:06:17,359
Cloud native Edge model

162
00:06:19,139 --> 00:06:21,240
and that's great

163
00:06:21,240 --> 00:06:22,919
but we do hit a challenge when it comes

164
00:06:22,919 --> 00:06:24,660
to security and it's because we

165
00:06:24,660 --> 00:06:27,600
encounter this Collision of Worlds so

166
00:06:27,600 --> 00:06:30,360
the edge sits precisely astrides two

167
00:06:30,360 --> 00:06:32,699
very different engineering paradigms the

168
00:06:32,699 --> 00:06:35,039
world of the cloud and the world of iot

169
00:06:35,039 --> 00:06:37,319
devices

170
00:06:37,319 --> 00:06:39,600
in the cloud we have rich workloads in

171
00:06:39,600 --> 00:06:41,340
high-level languages we have

172
00:06:41,340 --> 00:06:44,340
multi-tenancy we have cicd we have

173
00:06:44,340 --> 00:06:46,740
containers and orchestration everything

174
00:06:46,740 --> 00:06:49,560
is very fluid very portable we don't

175
00:06:49,560 --> 00:06:52,080
even really see the hardware platform

176
00:06:52,080 --> 00:06:54,780
much less care about it

177
00:06:54,780 --> 00:06:56,280
we're just writing and deploying

178
00:06:56,280 --> 00:06:58,560
software

179
00:06:58,560 --> 00:07:00,360
now in the world of iot is very

180
00:07:00,360 --> 00:07:01,440
different

181
00:07:01,440 --> 00:07:03,000
we're dealing with devices that are

182
00:07:03,000 --> 00:07:04,979
running outside of the cloud

183
00:07:04,979 --> 00:07:07,199
they may be in tamper-prone environments

184
00:07:07,199 --> 00:07:09,780
they're also far less uniform

185
00:07:09,780 --> 00:07:12,240
there's lots of platform diversity and

186
00:07:12,240 --> 00:07:14,039
suddenly you can't escape needing to

187
00:07:14,039 --> 00:07:15,660
know a lot about the platform and the

188
00:07:15,660 --> 00:07:16,620
hardware

189
00:07:16,620 --> 00:07:18,539
and a great example of where this is

190
00:07:18,539 --> 00:07:20,220
true is in the application of

191
00:07:20,220 --> 00:07:22,620
hardware-backed security

192
00:07:22,620 --> 00:07:24,479
if we are in a temper prone environment

193
00:07:24,479 --> 00:07:26,699
then secure assets like secrets and

194
00:07:26,699 --> 00:07:28,500
private keys are really going to need

195
00:07:28,500 --> 00:07:30,479
hardware-backed protection

196
00:07:30,479 --> 00:07:33,180
and hardware-backed security is very

197
00:07:33,180 --> 00:07:35,940
platform specific some Edge nodes will

198
00:07:35,940 --> 00:07:37,500
have something like a trusted platform

199
00:07:37,500 --> 00:07:40,020
module the TPM there could be some other

200
00:07:40,020 --> 00:07:42,900
kind of Hardware security module or a

201
00:07:42,900 --> 00:07:44,819
secure element

202
00:07:44,819 --> 00:07:46,020
and

203
00:07:46,020 --> 00:07:47,580
there's also the possibility that

204
00:07:47,580 --> 00:07:49,800
discrete Hardware of that kind is is not

205
00:07:49,800 --> 00:07:51,720
cost effective or it complicates the

206
00:07:51,720 --> 00:07:54,120
design of the device too much

207
00:07:54,120 --> 00:07:56,099
and we might then choose to build secure

208
00:07:56,099 --> 00:07:57,960
services in software

209
00:07:57,960 --> 00:07:59,900
but isolated from the rest of the system

210
00:07:59,900 --> 00:08:02,520
using isolation features that are built

211
00:08:02,520 --> 00:08:04,979
into the CPU and we'll see an example of

212
00:08:04,979 --> 00:08:07,919
that later on

213
00:08:07,919 --> 00:08:11,400
so we have fragmentation

214
00:08:11,400 --> 00:08:13,259
and this throws up roadblocks when we

215
00:08:13,259 --> 00:08:15,660
want to be Cloud native the apis that

216
00:08:15,660 --> 00:08:17,340
they offer are very low level they're

217
00:08:17,340 --> 00:08:19,440
very device specific they mean that

218
00:08:19,440 --> 00:08:21,060
you're writing code in the C language

219
00:08:21,060 --> 00:08:23,819
with an embedded mindset tightly coupled

220
00:08:23,819 --> 00:08:25,979
with the hardware and needing quite a

221
00:08:25,979 --> 00:08:28,199
bit of specialized knowledge so it's a

222
00:08:28,199 --> 00:08:30,479
world away from that high level portable

223
00:08:30,479 --> 00:08:32,940
code that we aim to write if we really

224
00:08:32,940 --> 00:08:36,680
want a cloud native Edge

225
00:08:38,940 --> 00:08:40,799
now up until recently the best available

226
00:08:40,799 --> 00:08:43,020
solution to this fragmentation problem

227
00:08:43,020 --> 00:08:46,020
with Hardware security was the pkcs11

228
00:08:46,020 --> 00:08:49,260
interface also known as crypto key

229
00:08:49,260 --> 00:08:51,420
and even today you're going to find that

230
00:08:51,420 --> 00:08:53,399
that is the incumbent solution for cases

231
00:08:53,399 --> 00:08:55,620
where application code needs to be

232
00:08:55,620 --> 00:08:58,200
bridged to Hardware security

233
00:08:58,200 --> 00:09:00,660
and we find that all manner of shims and

234
00:09:00,660 --> 00:09:03,600
bridges have sprung up both proprietary

235
00:09:03,600 --> 00:09:06,660
and in open source making it possible to

236
00:09:06,660 --> 00:09:10,440
use pkcs 11 to talk to TPMS to hsm's

237
00:09:10,440 --> 00:09:13,500
secure elements and so on

238
00:09:13,500 --> 00:09:15,779
and it's okay as far as it goes but it

239
00:09:15,779 --> 00:09:17,160
doesn't go far enough

240
00:09:17,160 --> 00:09:19,620
for a cloud native Edge experience and

241
00:09:19,620 --> 00:09:22,140
this is for a few reasons

242
00:09:22,140 --> 00:09:24,420
you'll find actually as soon as you try

243
00:09:24,420 --> 00:09:27,300
to deploy in this way the pkcs11

244
00:09:27,300 --> 00:09:29,760
implementations are notorious for

245
00:09:29,760 --> 00:09:32,519
following the standard imperfectly

246
00:09:32,519 --> 00:09:35,880
and even with that aside

247
00:09:35,880 --> 00:09:38,459
it's still a very low level developer

248
00:09:38,459 --> 00:09:40,440
experience we're either having to write

249
00:09:40,440 --> 00:09:42,720
code in C or we're having to use

250
00:09:42,720 --> 00:09:43,920
something like a foreign function

251
00:09:43,920 --> 00:09:46,680
interface to bring that up into another

252
00:09:46,680 --> 00:09:48,779
language all of those crypto and Key

253
00:09:48,779 --> 00:09:50,459
Management functions

254
00:09:50,459 --> 00:09:53,100
so it's still still a very close to the

255
00:09:53,100 --> 00:09:55,080
metal way of interfacing with Hardware

256
00:09:55,080 --> 00:09:57,500
security

257
00:09:58,500 --> 00:10:00,839
so improving on this status quo is the

258
00:10:00,839 --> 00:10:02,279
role of parsec

259
00:10:02,279 --> 00:10:05,160
ncf sandbox project this is why parsec

260
00:10:05,160 --> 00:10:08,339
exists now parsec is more than just an

261
00:10:08,339 --> 00:10:12,360
API like pkcs 11 it's a microservice

262
00:10:12,360 --> 00:10:14,519
that handles all of that interop and all

263
00:10:14,519 --> 00:10:16,080
of the low-level details of Hardware

264
00:10:16,080 --> 00:10:18,660
security on a whole variety of platforms

265
00:10:18,660 --> 00:10:20,700
that is growing over time

266
00:10:20,700 --> 00:10:22,980
where possible it cuts out all of those

267
00:10:22,980 --> 00:10:26,160
nasty pkcs11 shims it can talk natively

268
00:10:26,160 --> 00:10:28,740
to the TPM API it can talk to secure

269
00:10:28,740 --> 00:10:30,660
elements and other Hardware Security

270
00:10:30,660 --> 00:10:32,519
Solutions

271
00:10:32,519 --> 00:10:34,860
and if you need a new one

272
00:10:34,860 --> 00:10:37,440
it's open source go contribute one

273
00:10:37,440 --> 00:10:40,920
and if you have an interop bug

274
00:10:40,920 --> 00:10:43,140
go fix it Go contribute the fix and

275
00:10:43,140 --> 00:10:45,779
everybody benefits

276
00:10:45,779 --> 00:10:48,060
now the parsec API is not defined in the

277
00:10:48,060 --> 00:10:50,700
C language this one is language neutral

278
00:10:50,700 --> 00:10:52,920
so parsec defines it as a set of

279
00:10:52,920 --> 00:10:55,320
serialized contracts on a wire and this

280
00:10:55,320 --> 00:10:56,579
means that it can be surfaced into

281
00:10:56,579 --> 00:10:58,680
programming languages in more creative

282
00:10:58,680 --> 00:11:01,140
ways ways that are more fluent and

283
00:11:01,140 --> 00:11:02,940
idiomatic for consumption in that

284
00:11:02,940 --> 00:11:04,320
language

285
00:11:04,320 --> 00:11:05,940
so at the lowest level we're only

286
00:11:05,940 --> 00:11:07,860
transacting bytes on a transport with

287
00:11:07,860 --> 00:11:09,959
system calls we're not bringing in a lot

288
00:11:09,959 --> 00:11:12,360
of C crypto functions

289
00:11:12,360 --> 00:11:14,820
and the use of IPC and a microservice

290
00:11:14,820 --> 00:11:17,700
means that the client's applications

291
00:11:17,700 --> 00:11:20,040
can be in containers we can even have

292
00:11:20,040 --> 00:11:22,500
multiple logical applications sharing

293
00:11:22,500 --> 00:11:24,540
that service in a multi-tenant fashion

294
00:11:24,540 --> 00:11:27,000
if we need to

295
00:11:27,000 --> 00:11:28,800
and the vision for parsec is that we

296
00:11:28,800 --> 00:11:31,200
just want it to become part of the

297
00:11:31,200 --> 00:11:33,120
platform really we want it to become a

298
00:11:33,120 --> 00:11:34,920
supported package in Linux distributions

299
00:11:34,920 --> 00:11:38,040
in yocto recipes it's a it becomes a

300
00:11:38,040 --> 00:11:40,339
pervasive low friction path convenient

301
00:11:40,339 --> 00:11:43,920
portable high level and evolving and

302
00:11:43,920 --> 00:11:46,140
improving over time through expert

303
00:11:46,140 --> 00:11:49,339
Community contribution

304
00:11:50,040 --> 00:11:52,440
okay let's look at a reason why all of

305
00:11:52,440 --> 00:11:54,779
that's useful

306
00:11:54,779 --> 00:11:56,519
so suppose we have an edge Computing

307
00:11:56,519 --> 00:11:57,720
device that's going to run some

308
00:11:57,720 --> 00:11:59,339
workloads that are rolled out to it from

309
00:11:59,339 --> 00:12:01,560
the cloud these workloads could be

310
00:12:01,560 --> 00:12:03,420
containerized modules for example so

311
00:12:03,420 --> 00:12:05,339
think of a technology like AWS green

312
00:12:05,339 --> 00:12:08,220
grass or Azure iot Edge

313
00:12:08,220 --> 00:12:09,839
and we want these devices to be

314
00:12:09,839 --> 00:12:12,360
provisioned and registered securely with

315
00:12:12,360 --> 00:12:14,640
the cloud we want to be sure of their

316
00:12:14,640 --> 00:12:17,820
identity and the provenance

317
00:12:17,820 --> 00:12:19,620
we can do the provisioning step like

318
00:12:19,620 --> 00:12:22,140
this we can create a private key on the

319
00:12:22,140 --> 00:12:23,339
device

320
00:12:23,339 --> 00:12:25,320
and a corresponding public certificate

321
00:12:25,320 --> 00:12:27,600
which is then chained to some CA and

322
00:12:27,600 --> 00:12:29,279
shared with the cloud so that the cloud

323
00:12:29,279 --> 00:12:31,980
can trust the device

324
00:12:31,980 --> 00:12:34,320
and then at runtime when the device is

325
00:12:34,320 --> 00:12:36,480
in the field it can talk to the cloud

326
00:12:36,480 --> 00:12:38,459
securely by means of a mutually

327
00:12:38,459 --> 00:12:41,160
authenticated TLS connection the cloud

328
00:12:41,160 --> 00:12:43,380
and the device share their certificates

329
00:12:43,380 --> 00:12:45,480
with each other the device

330
00:12:45,480 --> 00:12:48,180
proves ownership of that private Key by

331
00:12:48,180 --> 00:12:51,360
signing for the TLs handshake

332
00:12:51,360 --> 00:12:53,639
and then finally the secure channel is

333
00:12:53,639 --> 00:12:55,620
established which is foundational to

334
00:12:55,620 --> 00:12:57,180
whatever else needs to happen in the

335
00:12:57,180 --> 00:12:59,399
product stack and deliver and execute

336
00:12:59,399 --> 00:13:01,680
those workloads so you'll see this

337
00:13:01,680 --> 00:13:04,079
pattern or some variation of it in

338
00:13:04,079 --> 00:13:05,760
systems that need to do secure

339
00:13:05,760 --> 00:13:07,200
onboarding

340
00:13:07,200 --> 00:13:09,540
and it's a great fit for parsec because

341
00:13:09,540 --> 00:13:11,160
on the edge devices

342
00:13:11,160 --> 00:13:13,440
those private keys are resources that

343
00:13:13,440 --> 00:13:16,200
you absolutely want to protect ideally

344
00:13:16,200 --> 00:13:17,880
we would want to provision these things

345
00:13:17,880 --> 00:13:20,040
directly within a hardware enforced

346
00:13:20,040 --> 00:13:22,079
secure boundary and then access it later

347
00:13:22,079 --> 00:13:24,240
to do the signing

348
00:13:24,240 --> 00:13:26,339
and then if parsec becomes the default

349
00:13:26,339 --> 00:13:28,500
low friction path for achieving this

350
00:13:28,500 --> 00:13:30,360
then I think there's a greater chance

351
00:13:30,360 --> 00:13:31,860
that customers will adopt Hardware

352
00:13:31,860 --> 00:13:34,680
security because right now the lowest

353
00:13:34,680 --> 00:13:36,660
friction path is the out-of-box

354
00:13:36,660 --> 00:13:38,700
provisioning solution that's offered by

355
00:13:38,700 --> 00:13:40,920
the product Stacks that normally means

356
00:13:40,920 --> 00:13:42,839
generating your key pair in the cloud

357
00:13:42,839 --> 00:13:46,320
and then importing it onto the device so

358
00:13:46,320 --> 00:13:47,880
it was never provisioned within the

359
00:13:47,880 --> 00:13:49,680
device and you don't know where it's

360
00:13:49,680 --> 00:13:51,120
been in the meantime

361
00:13:51,120 --> 00:13:53,459
and it could be stored just as a file on

362
00:13:53,459 --> 00:13:55,440
disk protected with nothing more than

363
00:13:55,440 --> 00:13:58,579
file system permissions

364
00:13:58,860 --> 00:14:00,779
so what pasta games to do is offer a

365
00:14:00,779 --> 00:14:02,399
comparable level of ease and simplicity

366
00:14:02,399 --> 00:14:04,200
but gaining a stronger security stance

367
00:14:04,200 --> 00:14:06,360
as a result and this is the kind of use

368
00:14:06,360 --> 00:14:09,860
case that it supports already

369
00:14:11,040 --> 00:14:13,680
and so we take the next step

370
00:14:13,680 --> 00:14:15,240
and this is one of the more exciting

371
00:14:15,240 --> 00:14:17,040
opportunities that we have with parsec

372
00:14:17,040 --> 00:14:19,320
and we have it precisely because

373
00:14:19,320 --> 00:14:21,899
parsec is not locked against a fixed

374
00:14:21,899 --> 00:14:25,320
crypto API like pkcs 11 it's its own

375
00:14:25,320 --> 00:14:27,420
project its own microservice it has its

376
00:14:27,420 --> 00:14:30,060
own API that can grow organically and

377
00:14:30,060 --> 00:14:32,399
the opportunity that we have is to grow

378
00:14:32,399 --> 00:14:34,639
pulsec Beyond doing only key management

379
00:14:34,639 --> 00:14:37,500
and cryptographic operations while still

380
00:14:37,500 --> 00:14:39,779
providing those crucial platform

381
00:14:39,779 --> 00:14:43,459
abstractions for portability

382
00:14:43,560 --> 00:14:45,720
so we've seen that we can provision our

383
00:14:45,720 --> 00:14:48,180
private key with Hardware protection

384
00:14:48,180 --> 00:14:50,220
and we can use signatures in TLS to

385
00:14:50,220 --> 00:14:51,899
prove ownership of the key

386
00:14:51,899 --> 00:14:54,360
but we are only proving ownership of

387
00:14:54,360 --> 00:14:56,519
that key we aren't proving anything else

388
00:14:56,519 --> 00:14:58,920
now TLS is going to work

389
00:14:58,920 --> 00:15:00,420
whether that private key is Hardware

390
00:15:00,420 --> 00:15:02,519
protected or not that the signature

391
00:15:02,519 --> 00:15:04,740
proves ownership of the key but has

392
00:15:04,740 --> 00:15:06,420
nothing to say about the history or

393
00:15:06,420 --> 00:15:08,459
provenance of the key and nor does it

394
00:15:08,459 --> 00:15:10,380
have anything to say about the overall

395
00:15:10,380 --> 00:15:13,019
state of the platform it's Hardware it's

396
00:15:13,019 --> 00:15:15,240
firmware or any of the other components

397
00:15:15,240 --> 00:15:18,260
that are running on it

398
00:15:19,800 --> 00:15:22,320
and so the answer to that is to ensure

399
00:15:22,320 --> 00:15:23,820
that the private key

400
00:15:23,820 --> 00:15:25,800
is attached to a platform that we can

401
00:15:25,800 --> 00:15:27,000
vouch for

402
00:15:27,000 --> 00:15:29,760
we can vouch for it because we have a

403
00:15:29,760 --> 00:15:31,440
chain of measurements of all parts of

404
00:15:31,440 --> 00:15:33,120
the system going right back to the

405
00:15:33,120 --> 00:15:35,399
device's hardware route of trust and we

406
00:15:35,399 --> 00:15:37,320
can verify all of those measurements

407
00:15:37,320 --> 00:15:39,720
remotely you may recognize that that's

408
00:15:39,720 --> 00:15:41,940
remote attestation it may be familiar to

409
00:15:41,940 --> 00:15:44,220
you and the remainder of my talk is

410
00:15:44,220 --> 00:15:46,500
going to be about how we can take the

411
00:15:46,500 --> 00:15:48,779
existing portable key management and

412
00:15:48,779 --> 00:15:51,480
signing capabilities of parsec and grow

413
00:15:51,480 --> 00:15:53,339
those out to include the kinds of

414
00:15:53,339 --> 00:15:55,320
Primitives that we need to support

415
00:15:55,320 --> 00:15:57,300
remote attestation flows while

416
00:15:57,300 --> 00:15:59,760
maintaining that abstraction and that

417
00:15:59,760 --> 00:16:00,899
portability

418
00:16:00,899 --> 00:16:02,639
and then I'm going to talk about how we

419
00:16:02,639 --> 00:16:04,380
can make use of those capabilities once

420
00:16:04,380 --> 00:16:06,800
we have them

421
00:16:07,920 --> 00:16:10,019
okay let's look a little closer at the

422
00:16:10,019 --> 00:16:13,620
components of a remote attestation flow

423
00:16:13,620 --> 00:16:15,899
there are essentially three aspects to

424
00:16:15,899 --> 00:16:19,440
it so we have endorse a test and verify

425
00:16:19,440 --> 00:16:21,779
and this flow diagram indicates where

426
00:16:21,779 --> 00:16:24,839
and how those stages take place

427
00:16:24,839 --> 00:16:27,300
endorsement is the process by which a

428
00:16:27,300 --> 00:16:29,220
manufacturer or provisioning entity can

429
00:16:29,220 --> 00:16:31,740
make a statement about what is valid

430
00:16:31,740 --> 00:16:33,660
if a device has these properties this

431
00:16:33,660 --> 00:16:35,699
platform State this configuration then

432
00:16:35,699 --> 00:16:37,440
it's trustworthy

433
00:16:37,440 --> 00:16:39,720
and the provisioning entity makes these

434
00:16:39,720 --> 00:16:41,519
statements to a separate entity the

435
00:16:41,519 --> 00:16:44,040
verifier or the verifier service

436
00:16:44,040 --> 00:16:46,199
this verifier service then becomes the

437
00:16:46,199 --> 00:16:49,079
authoritative database of valid devices

438
00:16:49,079 --> 00:16:52,920
and measurements and configurations

439
00:16:52,920 --> 00:16:54,899
manufacturing can then deploy a device

440
00:16:54,899 --> 00:16:57,420
to the field and that device might then

441
00:16:57,420 --> 00:16:58,920
go and register with a cloud service

442
00:16:58,920 --> 00:17:00,899
much like we saw a couple of slides ago

443
00:17:00,899 --> 00:17:03,899
only now it can do more than just prove

444
00:17:03,899 --> 00:17:06,119
ownership of the private key it can also

445
00:17:06,119 --> 00:17:08,640
Supply a package of signed evidence to

446
00:17:08,640 --> 00:17:10,799
attest to its own state and its own

447
00:17:10,799 --> 00:17:12,660
configuration

448
00:17:12,660 --> 00:17:14,760
the cloud application or service then

449
00:17:14,760 --> 00:17:16,500
relies upon that so it becomes the

450
00:17:16,500 --> 00:17:18,959
relying party and that Reliance is based

451
00:17:18,959 --> 00:17:21,240
on this critical final strut in the

452
00:17:21,240 --> 00:17:23,640
triangle which is verification

453
00:17:23,640 --> 00:17:25,859
so the devices signed evidence is

454
00:17:25,859 --> 00:17:27,299
presented back to the verification

455
00:17:27,299 --> 00:17:29,220
service which receives the

456
00:17:29,220 --> 00:17:30,900
manufacturer's endorsements for that

457
00:17:30,900 --> 00:17:32,700
device which had received the

458
00:17:32,700 --> 00:17:34,799
endorsements previously

459
00:17:34,799 --> 00:17:37,320
the verification can then match up the

460
00:17:37,320 --> 00:17:39,179
endorsed characteristics with the actual

461
00:17:39,179 --> 00:17:41,520
presented characteristics and if they

462
00:17:41,520 --> 00:17:43,620
match the verifier can tell the relying

463
00:17:43,620 --> 00:17:46,799
party yes we can trust this device it's

464
00:17:46,799 --> 00:17:48,780
a known good device it's an unknown good

465
00:17:48,780 --> 00:17:50,520
state

466
00:17:50,520 --> 00:17:52,980
now verification Services exist in the

467
00:17:52,980 --> 00:17:55,679
ecosystem some device vendors provide

468
00:17:55,679 --> 00:17:58,320
them some product Stacks come with them

469
00:17:58,320 --> 00:18:00,480
as being readily available but I want to

470
00:18:00,480 --> 00:18:02,520
take the opportunity today to bring in

471
00:18:02,520 --> 00:18:04,200
this other Linux Foundation project

472
00:18:04,200 --> 00:18:05,900
called Verizon

473
00:18:05,900 --> 00:18:08,520
is not a cncf project it's actually

474
00:18:08,520 --> 00:18:10,140
being nurtured within the confidential

475
00:18:10,140 --> 00:18:12,179
compute Consortium which is a different

476
00:18:12,179 --> 00:18:14,340
branch of Linux Foundation but it is

477
00:18:14,340 --> 00:18:16,320
open source and it is relevant to us

478
00:18:16,320 --> 00:18:19,260
here because Verizon is concerned with

479
00:18:19,260 --> 00:18:22,679
the verification part of the process

480
00:18:22,679 --> 00:18:25,020
Verizon is in fact a set of reusable

481
00:18:25,020 --> 00:18:27,240
components or building blocks that can

482
00:18:27,240 --> 00:18:29,760
be used to accelerate the development of

483
00:18:29,760 --> 00:18:31,559
verification services

484
00:18:31,559 --> 00:18:33,539
that offer a high degree of ecosystem

485
00:18:33,539 --> 00:18:35,820
compatibility by adhering to Open

486
00:18:35,820 --> 00:18:38,280
Standards it defines apis for

487
00:18:38,280 --> 00:18:41,340
provisioning and for verification

488
00:18:41,340 --> 00:18:43,020
now I can't go into detail on Verizon

489
00:18:43,020 --> 00:18:45,299
today but I do want to bring it into the

490
00:18:45,299 --> 00:18:47,160
conversation because the work that we're

491
00:18:47,160 --> 00:18:50,039
doing on attestation in parsec is aimed

492
00:18:50,039 --> 00:18:52,200
at matching the capabilities of parsec

493
00:18:52,200 --> 00:18:54,900
to those in Verizon

494
00:18:54,900 --> 00:18:56,880
so in essence it's making it possible

495
00:18:56,880 --> 00:19:00,120
for a parsec enabled a testing device to

496
00:19:00,120 --> 00:19:02,400
bring its evidence to a Verizon based

497
00:19:02,400 --> 00:19:05,480
verification service

498
00:19:06,960 --> 00:19:08,940
okay let's come back to parsec so why is

499
00:19:08,940 --> 00:19:10,799
parsec in the picture

500
00:19:10,799 --> 00:19:12,720
well we've already seen its role in Key

501
00:19:12,720 --> 00:19:14,580
Management so that we know that the role

502
00:19:14,580 --> 00:19:16,320
of parsec is to provide Simplicity

503
00:19:16,320 --> 00:19:19,559
abstraction portability in the face of a

504
00:19:19,559 --> 00:19:21,900
diverse Hardware ecosystem

505
00:19:21,900 --> 00:19:24,600
and these things continue to matter once

506
00:19:24,600 --> 00:19:26,520
we're talking about attestation

507
00:19:26,520 --> 00:19:28,740
because it turns out that attestation is

508
00:19:28,740 --> 00:19:31,260
also device specific and causes us

509
00:19:31,260 --> 00:19:33,179
similar problems if we want to code if

510
00:19:33,179 --> 00:19:36,360
we want our code to be portable

511
00:19:36,360 --> 00:19:38,460
okay let's concentrate on two different

512
00:19:38,460 --> 00:19:41,039
route of trust Technologies not the only

513
00:19:41,039 --> 00:19:43,260
two that passer can work with but we are

514
00:19:43,260 --> 00:19:45,660
focused on these two for attestation at

515
00:19:45,660 --> 00:19:47,100
least to begin with

516
00:19:47,100 --> 00:19:48,840
so we have trusted platform module the

517
00:19:48,840 --> 00:19:51,299
TPM here on the left and then on the

518
00:19:51,299 --> 00:19:54,120
right we have an implementation of the

519
00:19:54,120 --> 00:19:56,460
PSA route of trust

520
00:19:56,460 --> 00:19:58,919
now PSA stands for platform security

521
00:19:58,919 --> 00:20:02,220
architecture and PSA certified is a

522
00:20:02,220 --> 00:20:04,980
widely adopted security standard for iot

523
00:20:04,980 --> 00:20:07,320
the PSA route of trust allows the

524
00:20:07,320 --> 00:20:09,600
device's foundational security to be

525
00:20:09,600 --> 00:20:11,220
built in a way that is cost effective

526
00:20:11,220 --> 00:20:13,799
and not necessarily reliant on discrete

527
00:20:13,799 --> 00:20:16,500
Hardware module like a TPM so it can be

528
00:20:16,500 --> 00:20:17,940
built out of software or firmware

529
00:20:17,940 --> 00:20:20,460
components typically integrated by

530
00:20:20,460 --> 00:20:22,860
silicon vendors into their sdks and

531
00:20:22,860 --> 00:20:24,360
isolated from the rest of the system

532
00:20:24,360 --> 00:20:26,520
using an isolation technology that's

533
00:20:26,520 --> 00:20:28,440
built into the CPU

534
00:20:28,440 --> 00:20:30,600
so arm trust zone for example would

535
00:20:30,600 --> 00:20:33,299
provide that kind of isolation

536
00:20:33,299 --> 00:20:35,280
and then we have these small packets of

537
00:20:35,280 --> 00:20:36,840
functionality we call trusted services

538
00:20:36,840 --> 00:20:38,880
that run within as architectural

539
00:20:38,880 --> 00:20:40,620
isolation boundary

540
00:20:40,620 --> 00:20:42,900
conceptually it's comparable to the TPM

541
00:20:42,900 --> 00:20:45,360
but the implementation is different and

542
00:20:45,360 --> 00:20:46,679
then of course the apis are different

543
00:20:46,679 --> 00:20:49,020
and the data formats are different

544
00:20:49,020 --> 00:20:50,700
and so again it's a fragmentation

545
00:20:50,700 --> 00:20:52,740
problem and we're back very much in

546
00:20:52,740 --> 00:20:54,720
parsec territory needing a common

547
00:20:54,720 --> 00:20:56,940
abstraction that allows client code to

548
00:20:56,940 --> 00:20:59,460
be portable and simplify it

549
00:20:59,460 --> 00:21:01,620
so when I talk about taming at a station

550
00:21:01,620 --> 00:21:03,419
in the title of my session that's what I

551
00:21:03,419 --> 00:21:05,600
mean

552
00:21:06,000 --> 00:21:08,340
in those boxes we can see examples of

553
00:21:08,340 --> 00:21:10,620
the data formats used so a TPM will use

554
00:21:10,620 --> 00:21:14,100
the TPM 2.0 data structures a PSA

555
00:21:14,100 --> 00:21:15,660
platform uses something known as the

556
00:21:15,660 --> 00:21:19,440
entity at a station token or eat

557
00:21:19,440 --> 00:21:21,120
and we're doing some work in parsec

558
00:21:21,120 --> 00:21:23,220
right now to expose both key attestation

559
00:21:23,220 --> 00:21:26,220
and platform attestation apis that can

560
00:21:26,220 --> 00:21:28,500
work across these distinct route of

561
00:21:28,500 --> 00:21:30,360
trust back ends and they're going to

562
00:21:30,360 --> 00:21:32,159
work in terms of a common encapsulation

563
00:21:32,159 --> 00:21:34,740
format that uses something called the

564
00:21:34,740 --> 00:21:36,840
conceptual messages wrapper

565
00:21:36,840 --> 00:21:38,880
now this wrapper is being nurtured by

566
00:21:38,880 --> 00:21:40,740
the rats working group which is one of

567
00:21:40,740 --> 00:21:42,840
the ietf working groups that focuses on

568
00:21:42,840 --> 00:21:45,059
attestation these wrappers are

569
00:21:45,059 --> 00:21:47,520
self-describing and they're keyed on a

570
00:21:47,520 --> 00:21:49,799
registered media type which makes them

571
00:21:49,799 --> 00:21:52,679
an ideal format to convey between the

572
00:21:52,679 --> 00:21:54,600
components that don't want to hardwire

573
00:21:54,600 --> 00:21:56,880
themselves to any single physical

574
00:21:56,880 --> 00:21:59,039
representation

575
00:21:59,039 --> 00:22:00,480
so they can deal with multiple

576
00:22:00,480 --> 00:22:02,340
representations they can dispatch to the

577
00:22:02,340 --> 00:22:04,080
correct kind of processor by peaking

578
00:22:04,080 --> 00:22:05,760
first at that media type and then

579
00:22:05,760 --> 00:22:07,679
assuming that the rest of the data is

580
00:22:07,679 --> 00:22:10,740
organized according to that type

581
00:22:10,740 --> 00:22:12,840
and the slide has a link to the ietf

582
00:22:12,840 --> 00:22:15,780
draft that goes into much more detail on

583
00:22:15,780 --> 00:22:18,419
how that works because I'm

584
00:22:18,419 --> 00:22:19,799
that was really just a lightning

585
00:22:19,799 --> 00:22:21,419
presentation of it

586
00:22:21,419 --> 00:22:24,840
um there's a there's a lot more to it

587
00:22:24,840 --> 00:22:26,700
so these common encapsulation formats

588
00:22:26,700 --> 00:22:28,500
can be applied end to end also

589
00:22:28,500 --> 00:22:31,320
throughout a net a station flow for all

590
00:22:31,320 --> 00:22:33,840
stages for endorsement for verification

591
00:22:33,840 --> 00:22:36,720
as well as for Gathering the evidence

592
00:22:36,720 --> 00:22:39,179
so parsec can provide them for all

593
00:22:39,179 --> 00:22:40,980
platform types beginning with the two

594
00:22:40,980 --> 00:22:42,600
examples shown here

595
00:22:42,600 --> 00:22:45,059
and Verizon can consume them so it's a

596
00:22:45,059 --> 00:22:47,159
nice story for bracing these two open

597
00:22:47,159 --> 00:22:50,120
source projects together

598
00:22:50,820 --> 00:22:52,440
okay so for the last part of the

599
00:22:52,440 --> 00:22:54,360
presentation I'd like to look at two

600
00:22:54,360 --> 00:22:58,559
areas where we are applying this work

601
00:22:58,559 --> 00:23:00,240
and let's look at the attested TLs

602
00:23:00,240 --> 00:23:01,799
proposal first

603
00:23:01,799 --> 00:23:03,120
this is another one that's being

604
00:23:03,120 --> 00:23:06,299
developed within the ietf some of my arm

605
00:23:06,299 --> 00:23:08,700
colleagues are contributing to this but

606
00:23:08,700 --> 00:23:10,440
also in collaboration with engineering

607
00:23:10,440 --> 00:23:12,900
teams across the industry so there's a

608
00:23:12,900 --> 00:23:15,000
link to the top at the proposal in the

609
00:23:15,000 --> 00:23:17,700
ITF data tracker where you can go and

610
00:23:17,700 --> 00:23:20,039
read in much more detail and go and look

611
00:23:20,039 --> 00:23:24,000
at the lovely ASCII artwork diagrams in

612
00:23:24,000 --> 00:23:25,320
The Proposal

613
00:23:25,320 --> 00:23:27,840
we looked at TLS before it's obviously

614
00:23:27,840 --> 00:23:29,820
foundational to the connection between

615
00:23:29,820 --> 00:23:33,299
an edge Computing node and the cloud so

616
00:23:33,299 --> 00:23:35,039
until you have a TLS connection you

617
00:23:35,039 --> 00:23:37,860
can't really do anything else TLS by its

618
00:23:37,860 --> 00:23:40,080
nature excludes any peers that cannot

619
00:23:40,080 --> 00:23:42,780
prove ownership of the correct private

620
00:23:42,780 --> 00:23:44,280
key

621
00:23:44,280 --> 00:23:46,440
now the attested TLs proposal goes

622
00:23:46,440 --> 00:23:49,080
beyond proof of key ownership and brings

623
00:23:49,080 --> 00:23:51,659
attestation into scope for the handshake

624
00:23:51,659 --> 00:23:53,880
phase now there's a real Elegance to

625
00:23:53,880 --> 00:23:55,860
this because it makes attestation a

626
00:23:55,860 --> 00:23:58,260
prerequisite to the establishment of the

627
00:23:58,260 --> 00:23:59,520
secure Channel

628
00:23:59,520 --> 00:24:01,679
and it means that by the time you have a

629
00:24:01,679 --> 00:24:03,780
secure channel the device has already

630
00:24:03,780 --> 00:24:06,659
been attested and verified so it's a

631
00:24:06,659 --> 00:24:09,179
very neat way of excluding devices that

632
00:24:09,179 --> 00:24:12,539
can't prove themselves to that level

633
00:24:12,539 --> 00:24:14,520
it closes a threat window that might

634
00:24:14,520 --> 00:24:16,500
otherwise exist if you set up the secure

635
00:24:16,500 --> 00:24:18,240
Channel first and then do attestation

636
00:24:18,240 --> 00:24:20,039
afterwards

637
00:24:20,039 --> 00:24:21,539
that doesn't mean it's going to

638
00:24:21,539 --> 00:24:26,240
necessarily suit every kind of workflow

639
00:24:26,280 --> 00:24:28,200
full secure channels but the onboarding

640
00:24:28,200 --> 00:24:30,000
use case is one example that I mentioned

641
00:24:30,000 --> 00:24:31,799
earlier that might benefit from this

642
00:24:31,799 --> 00:24:34,080
kind of approach

643
00:24:34,080 --> 00:24:36,240
so the diagram is a simplification the

644
00:24:36,240 --> 00:24:38,460
ietf proposal has all of the details but

645
00:24:38,460 --> 00:24:40,140
I do want to stress what's essential

646
00:24:40,140 --> 00:24:42,299
about the proposal you'll probably be

647
00:24:42,299 --> 00:24:45,360
familiar with TLS based on x509

648
00:24:45,360 --> 00:24:46,679
certificates

649
00:24:46,679 --> 00:24:48,900
but what this proposal introduces is a

650
00:24:48,900 --> 00:24:51,480
whole new credential type so it means

651
00:24:51,480 --> 00:24:53,700
that attestation evidence can be used as

652
00:24:53,700 --> 00:24:56,400
an alternative to x509 making use of

653
00:24:56,400 --> 00:24:57,960
some of the extension facilities that

654
00:24:57,960 --> 00:25:00,960
are present in the design of TLS

655
00:25:00,960 --> 00:25:02,940
so that then allows us to make use of

656
00:25:02,940 --> 00:25:04,380
the common abstractions and wrapper

657
00:25:04,380 --> 00:25:05,760
formats that I talked about on the

658
00:25:05,760 --> 00:25:08,159
previous slide the secure channel can be

659
00:25:08,159 --> 00:25:10,200
established based on that same trust

660
00:25:10,200 --> 00:25:12,659
relationship between the manufacturing

661
00:25:12,659 --> 00:25:15,059
entity the testing device and the

662
00:25:15,059 --> 00:25:17,280
relying party on the verification side

663
00:25:17,280 --> 00:25:19,320
which again I've indicated can be built

664
00:25:19,320 --> 00:25:20,700
using components from the Verizon

665
00:25:20,700 --> 00:25:22,799
project

666
00:25:22,799 --> 00:25:24,600
okay other details I've had to gloss

667
00:25:24,600 --> 00:25:26,220
over you can go and read about them

668
00:25:26,220 --> 00:25:28,620
follow the link all of this work is of

669
00:25:28,620 --> 00:25:31,380
course being done out in the open you

670
00:25:31,380 --> 00:25:33,419
can follow along with a POC effort for

671
00:25:33,419 --> 00:25:36,720
this and that's that's going on in

672
00:25:36,720 --> 00:25:38,580
GitHub I've got some links assembled on

673
00:25:38,580 --> 00:25:40,559
my final slide which we'll look at in

674
00:25:40,559 --> 00:25:42,980
just a second

675
00:25:43,080 --> 00:25:45,720
but before that let's just finish up

676
00:25:45,720 --> 00:25:48,179
um and talk about another potential

677
00:25:48,179 --> 00:25:49,799
application of this work which I was

678
00:25:49,799 --> 00:25:51,539
discussing with the Spire Community just

679
00:25:51,539 --> 00:25:53,820
towards the end of last year now spire

680
00:25:53,820 --> 00:25:55,440
and parsec already share a little bit of

681
00:25:55,440 --> 00:25:59,400
history and there is a YouTube video

682
00:25:59,400 --> 00:26:02,520
with myself uh and Andres Vega talking

683
00:26:02,520 --> 00:26:05,159
about the use of

684
00:26:05,159 --> 00:26:08,159
um spiffy identities when calling past X

685
00:26:08,159 --> 00:26:10,919
so the parsec can work in a in a

686
00:26:10,919 --> 00:26:12,659
multi-tenant fashion

687
00:26:12,659 --> 00:26:15,600
um that was in 2021 I think for the cncf

688
00:26:15,600 --> 00:26:17,940
production identity day and it's on

689
00:26:17,940 --> 00:26:18,960
YouTube

690
00:26:18,960 --> 00:26:21,659
but for today so let's look at Spire no

691
00:26:21,659 --> 00:26:23,880
data station

692
00:26:23,880 --> 00:26:26,100
so Aspire has workload as a station and

693
00:26:26,100 --> 00:26:29,279
node as a station no data station is to

694
00:26:29,279 --> 00:26:30,960
verify the provenance of the compute

695
00:26:30,960 --> 00:26:33,419
node on which a workload is running

696
00:26:33,419 --> 00:26:35,640
and Spire has a plug-in architecture

697
00:26:35,640 --> 00:26:37,799
that allows nodes to be verified via

698
00:26:37,799 --> 00:26:39,840
different characteristics

699
00:26:39,840 --> 00:26:41,460
so one of those verifiable

700
00:26:41,460 --> 00:26:43,080
characteristics could be a hardware

701
00:26:43,080 --> 00:26:45,720
route of trust that is on the Node

702
00:26:45,720 --> 00:26:48,000
and there are no data station plugins

703
00:26:48,000 --> 00:26:50,340
available today that can already use a

704
00:26:50,340 --> 00:26:52,200
hardware route of trust if it's based on

705
00:26:52,200 --> 00:26:53,940
a TPM

706
00:26:53,940 --> 00:26:56,400
but with the new attestation functions

707
00:26:56,400 --> 00:26:58,320
being added to parsec which is portable

708
00:26:58,320 --> 00:27:01,140
it raises the possibility of doing no

709
00:27:01,140 --> 00:27:03,299
data station based on an abstract route

710
00:27:03,299 --> 00:27:05,520
of trust using a TPM when it's available

711
00:27:05,520 --> 00:27:07,679
but using other technologies that might

712
00:27:07,679 --> 00:27:09,900
be on the platform such as the PSA route

713
00:27:09,900 --> 00:27:13,020
of trust that I mentioned before

714
00:27:13,020 --> 00:27:14,940
and you have that similar client server

715
00:27:14,940 --> 00:27:16,860
separation that we saw in the case of

716
00:27:16,860 --> 00:27:19,380
TLS so Spire node data station is

717
00:27:19,380 --> 00:27:21,659
separated into an agent plugin and a

718
00:27:21,659 --> 00:27:24,299
server plugin so the proposal here is to

719
00:27:24,299 --> 00:27:26,279
create an agent plugin that consumes the

720
00:27:26,279 --> 00:27:29,820
parsec apis and a server plugin that

721
00:27:29,820 --> 00:27:33,120
consumes the Verizon apis and there are

722
00:27:33,120 --> 00:27:36,600
go client libraries for both parsec and

723
00:27:36,600 --> 00:27:38,840
Verizon

724
00:27:40,320 --> 00:27:42,360
now there isn't a POC of this in the

725
00:27:42,360 --> 00:27:45,720
works just yet but I am really hoping to

726
00:27:45,720 --> 00:27:47,220
get one started and it would be great

727
00:27:47,220 --> 00:27:49,080
for the past second Spire communities to

728
00:27:49,080 --> 00:27:50,760
come back together so if you're

729
00:27:50,760 --> 00:27:52,380
interested

730
00:27:52,380 --> 00:27:53,700
do please come and talk to me because

731
00:27:53,700 --> 00:27:56,600
I'd love to engage

732
00:27:57,120 --> 00:27:59,820
okay so that's it some useful resource

733
00:27:59,820 --> 00:28:01,860
links there you can follow all of these

734
00:28:01,860 --> 00:28:04,860
if you download the deck thanks once

735
00:28:04,860 --> 00:28:07,380
again uh for coming thanks for listening

736
00:28:07,380 --> 00:28:09,840
and if I've done this right we should

737
00:28:09,840 --> 00:28:12,179
still have some minutes left for any

738
00:28:12,179 --> 00:28:15,440
questions or comments

739
00:28:21,659 --> 00:28:24,059
foreign

740
00:28:24,059 --> 00:28:26,720
yes

741
00:28:31,559 --> 00:28:35,299
uh sorry can you ask again

742
00:28:38,700 --> 00:28:40,380
okay so the question is is there

743
00:28:40,380 --> 00:28:42,360
anything for runtime attestation as

744
00:28:42,360 --> 00:28:44,640
opposed to boot at a station

745
00:28:44,640 --> 00:28:46,440
um so I think anything that you can

746
00:28:46,440 --> 00:28:47,580
measure

747
00:28:47,580 --> 00:28:50,460
is potentially in scope with this work

748
00:28:50,460 --> 00:28:53,059
so yes boot

749
00:28:53,059 --> 00:28:55,440
at a station

750
00:28:55,440 --> 00:28:57,419
um is is generally what you think of

751
00:28:57,419 --> 00:28:58,620
when you

752
00:28:58,620 --> 00:29:00,299
think of Hardware route of trust and

753
00:29:00,299 --> 00:29:03,720
platforms like a TPM for example

754
00:29:03,720 --> 00:29:05,640
um but with with what we're proposing

755
00:29:05,640 --> 00:29:08,039
with past second Verizon

756
00:29:08,039 --> 00:29:08,640
um

757
00:29:08,640 --> 00:29:11,700
both are extremely flexible so there

758
00:29:11,700 --> 00:29:13,440
definitely a scope for measuring

759
00:29:13,440 --> 00:29:16,380
components within the system that are

760
00:29:16,380 --> 00:29:17,940
not just the bootloader not just the

761
00:29:17,940 --> 00:29:19,559
firmware but potentially going beyond

762
00:29:19,559 --> 00:29:23,899
that to Encompass other things as well

763
00:29:28,740 --> 00:29:30,179
okay

764
00:29:30,179 --> 00:29:32,039
um if there are

765
00:29:32,039 --> 00:29:34,020
if there are no other questions

766
00:29:34,020 --> 00:29:37,559
um thanks very much uh that QR code is

767
00:29:37,559 --> 00:29:40,679
my session feedback code

768
00:29:40,679 --> 00:29:42,600
um if you love the session please go and

769
00:29:42,600 --> 00:29:44,820
tell me uh if you hated it please

770
00:29:44,820 --> 00:29:46,860
remember how busy you are and you don't

771
00:29:46,860 --> 00:29:49,679
have time to fill in feedback forms

772
00:29:49,679 --> 00:29:51,899
and enjoy what remains at the conference

773
00:29:51,899 --> 00:29:53,360
and have a safe trip home

774
00:29:53,360 --> 00:29:56,979
[Applause]

