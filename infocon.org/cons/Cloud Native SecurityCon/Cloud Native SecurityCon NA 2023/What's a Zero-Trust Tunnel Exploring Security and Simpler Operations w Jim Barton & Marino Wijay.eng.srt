1
00:00:00,539 --> 00:00:03,300
good morning everyone Welcome to Cloud

2
00:00:03,300 --> 00:00:05,759
native security con and Welcome to our

3
00:00:05,759 --> 00:00:08,220
talk on what is zero trust or what is

4
00:00:08,220 --> 00:00:09,900
the zero trust tunnel we're going to

5
00:00:09,900 --> 00:00:12,660
dive into ambient mesh and how

6
00:00:12,660 --> 00:00:15,240
we're able to provide a simpler approach

7
00:00:15,240 --> 00:00:19,560
to security operations with ambient mesh

8
00:00:19,560 --> 00:00:21,060
come on work

9
00:00:21,060 --> 00:00:23,340
go ahead here we go hey good morning

10
00:00:23,340 --> 00:00:24,900
everyone my name is Jim Barton I'm a

11
00:00:24,900 --> 00:00:26,400
field engineer here in North America

12
00:00:26,400 --> 00:00:28,920
with solo and uh yeah happy to be here

13
00:00:28,920 --> 00:00:30,060
this morning

14
00:00:30,060 --> 00:00:32,340
awesome I'm Marino wijay I am a platform

15
00:00:32,340 --> 00:00:35,100
Advocate at solo uh there's a lot of

16
00:00:35,100 --> 00:00:36,300
things you could do you could follow me

17
00:00:36,300 --> 00:00:37,980
if you want but one thing I will say is

18
00:00:37,980 --> 00:00:39,719
if you're kind of new to the istio

19
00:00:39,719 --> 00:00:41,100
journey or the service semester journey

20
00:00:41,100 --> 00:00:43,079
I run something called 70 days of

21
00:00:43,079 --> 00:00:44,399
service mesh and I'm doing this on

22
00:00:44,399 --> 00:00:47,219
GitHub you can follow along I basically

23
00:00:47,219 --> 00:00:48,840
will dive into various topics of the

24
00:00:48,840 --> 00:00:51,120
world of service mesh and istio and even

25
00:00:51,120 --> 00:00:53,219
application networking so go check that

26
00:00:53,219 --> 00:00:54,180
out

27
00:00:54,180 --> 00:00:55,680
but we're going to dive right into it

28
00:00:55,680 --> 00:00:57,539
you might have heard of something called

29
00:00:57,539 --> 00:01:00,180
ambient mesh which was announced last

30
00:01:00,180 --> 00:01:03,120
year as a joint effort between solo and

31
00:01:03,120 --> 00:01:06,420
Google and what it really is is a new

32
00:01:06,420 --> 00:01:09,180
mode of operation within istio or within

33
00:01:09,180 --> 00:01:11,220
the istio service mesh which offers up a

34
00:01:11,220 --> 00:01:14,280
sidecarless approach So within istio

35
00:01:14,280 --> 00:01:16,799
today you would normally deploy

36
00:01:16,799 --> 00:01:18,540
something called a sidecar resource

37
00:01:18,540 --> 00:01:20,220
alongside your your main application

38
00:01:20,220 --> 00:01:22,560
container because it behaves as the

39
00:01:22,560 --> 00:01:25,140
proxy to process requests process

40
00:01:25,140 --> 00:01:28,020
policies provide a level of telemetry

41
00:01:28,020 --> 00:01:31,080
and whatnot but there are certain

42
00:01:31,080 --> 00:01:32,880
applications out there that don't really

43
00:01:32,880 --> 00:01:34,860
benefit from it and actually are hurt by

44
00:01:34,860 --> 00:01:37,320
it so for example sometimes you may be

45
00:01:37,320 --> 00:01:38,640
experiencing things like a race

46
00:01:38,640 --> 00:01:40,320
condition between one of your

47
00:01:40,320 --> 00:01:41,400
applications trying to come online

48
00:01:41,400 --> 00:01:43,439
before a sidecar comes online so you

49
00:01:43,439 --> 00:01:46,320
can't quite get your application up and

50
00:01:46,320 --> 00:01:49,079
online so you have to tune this and set

51
00:01:49,079 --> 00:01:50,880
something like a there's a field called

52
00:01:50,880 --> 00:01:53,100
the hold application timer within your

53
00:01:53,100 --> 00:01:55,619
deployment so that you can ensure that

54
00:01:55,619 --> 00:01:57,060
your sidecar comes up online first

55
00:01:57,060 --> 00:01:59,100
there's also some other elements like

56
00:01:59,100 --> 00:02:01,560
the server send first protocols like SQL

57
00:02:01,560 --> 00:02:04,500
and other you know data database style

58
00:02:04,500 --> 00:02:07,259
of applications and they don't play

59
00:02:07,259 --> 00:02:09,060
nicely with the istio service mesh with

60
00:02:09,060 --> 00:02:11,520
the sidecar or using any sort of sidecar

61
00:02:11,520 --> 00:02:13,140
for communications

62
00:02:13,140 --> 00:02:15,120
so this is where ambient mesh shines

63
00:02:15,120 --> 00:02:18,060
because it provides a an opportunity to

64
00:02:18,060 --> 00:02:20,940
simplify that operation altogether what

65
00:02:20,940 --> 00:02:23,760
that means is while you still get the

66
00:02:23,760 --> 00:02:25,680
the benefits and the capabilities of a

67
00:02:25,680 --> 00:02:27,900
service mesh the function of the sidecar

68
00:02:27,900 --> 00:02:31,319
shifts away from the actual application

69
00:02:31,319 --> 00:02:34,860
and moves towards two components we've

70
00:02:34,860 --> 00:02:36,780
actually broken this down into layer

71
00:02:36,780 --> 00:02:39,360
four and layer 7. so the two components

72
00:02:39,360 --> 00:02:41,400
are are known as the Z tunnel and the

73
00:02:41,400 --> 00:02:42,959
Waypoint proxy

74
00:02:42,959 --> 00:02:44,340
that

75
00:02:44,340 --> 00:02:46,260
that Z tunnel what we're really here to

76
00:02:46,260 --> 00:02:47,760
talk about the zero trust tunnel is

77
00:02:47,760 --> 00:02:49,860
what's doing a lot of the activity for

78
00:02:49,860 --> 00:02:52,440
tunneling requests between one

79
00:02:52,440 --> 00:02:53,760
particular service over to another

80
00:02:53,760 --> 00:02:55,680
service maybe within the same node or in

81
00:02:55,680 --> 00:02:58,739
another node now the reality here is

82
00:02:58,739 --> 00:03:01,080
that you know not all applications are

83
00:03:01,080 --> 00:03:02,819
going to require the sidecar some will

84
00:03:02,819 --> 00:03:04,680
require the sidecar but not only that

85
00:03:04,680 --> 00:03:06,360
what what happens when you need some

86
00:03:06,360 --> 00:03:09,300
sort of layer 7 style of policy so this

87
00:03:09,300 --> 00:03:11,040
is where that Waypoint proxy comes into

88
00:03:11,040 --> 00:03:13,980
an effect here to basically come in and

89
00:03:13,980 --> 00:03:16,560
say let's act on that policy Whenever

90
00:03:16,560 --> 00:03:18,480
there is one that comes about we'll talk

91
00:03:18,480 --> 00:03:19,560
a little bit more about how that all

92
00:03:19,560 --> 00:03:22,140
flows but the mode of operation changes

93
00:03:22,140 --> 00:03:24,060
here the direction of traffic changes

94
00:03:24,060 --> 00:03:28,019
and this means that we can provide

95
00:03:28,019 --> 00:03:30,239
istio or service mesh like capabilities

96
00:03:30,239 --> 00:03:31,680
for workloads that don't need the

97
00:03:31,680 --> 00:03:33,420
sidecar whereas we can also provide it

98
00:03:33,420 --> 00:03:35,099
for workloads that do take advantage of

99
00:03:35,099 --> 00:03:37,019
this sidecar there's also some other

100
00:03:37,019 --> 00:03:38,940
interesting components around how we

101
00:03:38,940 --> 00:03:42,299
Route traffic within let's say an

102
00:03:42,299 --> 00:03:44,280
ambient mesh environment

103
00:03:44,280 --> 00:03:47,640
so we deploy something called a cni node

104
00:03:47,640 --> 00:03:50,159
pod that is deployed as a Daemon set

105
00:03:50,159 --> 00:03:51,959
alongside the Z tunnel the Z tunnel is

106
00:03:51,959 --> 00:03:55,019
also deployed as a Daemon set now if

107
00:03:55,019 --> 00:03:56,940
you've ever worked with ipsec before

108
00:03:56,940 --> 00:03:58,739
there's something interesting that goes

109
00:03:58,739 --> 00:04:00,720
on you have to Define an access control

110
00:04:00,720 --> 00:04:03,659
list that tells the tunnel hey this is

111
00:04:03,659 --> 00:04:05,099
the traffic we're going to encrypt this

112
00:04:05,099 --> 00:04:06,360
is the source traffic we're going to

113
00:04:06,360 --> 00:04:08,879
encrypt this is how we also operate in

114
00:04:08,879 --> 00:04:10,920
the world of ambient mesh we have

115
00:04:10,920 --> 00:04:13,860
traffic that is tagged towards the Z

116
00:04:13,860 --> 00:04:15,720
tunnel pod that's going to Tunnel over

117
00:04:15,720 --> 00:04:18,120
to another node and once we've

118
00:04:18,120 --> 00:04:19,918
identified what that traffic is it's

119
00:04:19,918 --> 00:04:22,320
encrypted it's sent across the tunnel

120
00:04:22,320 --> 00:04:25,139
and it gets to its destination

121
00:04:25,139 --> 00:04:27,780
so the same process flows for when we're

122
00:04:27,780 --> 00:04:29,699
having to do this with let's say a

123
00:04:29,699 --> 00:04:31,080
waypoint proxy but we'll talk a little

124
00:04:31,080 --> 00:04:33,120
bit more about that shortly but when we

125
00:04:33,120 --> 00:04:35,160
look at it at a deeper level we have two

126
00:04:35,160 --> 00:04:37,860
Services service a and service B when I

127
00:04:37,860 --> 00:04:39,300
have traffic that's destined from

128
00:04:39,300 --> 00:04:41,880
service a to service B that traffic is

129
00:04:41,880 --> 00:04:43,979
going to go towards the Z tunnel which

130
00:04:43,979 --> 00:04:46,380
used to be the sidecar that Z tunnel

131
00:04:46,380 --> 00:04:48,780
will actually derive identity from that

132
00:04:48,780 --> 00:04:51,419
workload and use it to form its end of

133
00:04:51,419 --> 00:04:52,620
mtls

134
00:04:52,620 --> 00:04:54,840
the destination does the exact same so

135
00:04:54,840 --> 00:04:56,880
now you have end to end mtls between

136
00:04:56,880 --> 00:04:59,580
these z-tunnel pods

137
00:04:59,580 --> 00:05:01,560
this way when your traffic or your

138
00:05:01,560 --> 00:05:02,820
requests are going through they're going

139
00:05:02,820 --> 00:05:04,620
to still maintain their their encryption

140
00:05:04,620 --> 00:05:06,419
all the way through to the uh the

141
00:05:06,419 --> 00:05:07,560
destination

142
00:05:07,560 --> 00:05:10,080
now actually one other thing I will

143
00:05:10,080 --> 00:05:11,520
point out though is that this is

144
00:05:11,520 --> 00:05:14,100
strictly layer four so if I'm just doing

145
00:05:14,100 --> 00:05:16,500
strictly or four Communications TCP or

146
00:05:16,500 --> 00:05:19,740
UDP style of communications then I only

147
00:05:19,740 --> 00:05:22,500
need the Z tunnel object or the the Z

148
00:05:22,500 --> 00:05:24,539
tunnel pod that gets deployed per node

149
00:05:24,539 --> 00:05:27,000
when I need

150
00:05:27,000 --> 00:05:29,460
when I need layer 7 authorization for

151
00:05:29,460 --> 00:05:31,919
example this is where the Waypoint proxy

152
00:05:31,919 --> 00:05:33,960
comes in we deploy this at the

153
00:05:33,960 --> 00:05:36,539
destination side so that as traffic is

154
00:05:36,539 --> 00:05:38,460
coming in or as layer 7 requests are

155
00:05:38,460 --> 00:05:40,620
coming in that Waypoint proxy is

156
00:05:40,620 --> 00:05:42,539
supposed to sit there and analyze those

157
00:05:42,539 --> 00:05:44,400
requests and then we'll allow that

158
00:05:44,400 --> 00:05:46,080
request to flow through or deny it

159
00:05:46,080 --> 00:05:47,639
altogether or provide some sort of

160
00:05:47,639 --> 00:05:50,699
response to the originator now the other

161
00:05:50,699 --> 00:05:51,960
interesting thing though about the

162
00:05:51,960 --> 00:05:53,940
Waypoint proxy is that it actually makes

163
00:05:53,940 --> 00:05:56,699
use of the Gateway API spec in

164
00:05:56,699 --> 00:05:59,100
kubernetes so you specify a Gateway

165
00:05:59,100 --> 00:06:01,740
class which I think Jim is going to show

166
00:06:01,740 --> 00:06:02,940
you a little bit later on when we get

167
00:06:02,940 --> 00:06:05,160
into the demo and that acts as our

168
00:06:05,160 --> 00:06:08,639
enforcement point for layer 7. now one

169
00:06:08,639 --> 00:06:10,020
other interesting thing about this is

170
00:06:10,020 --> 00:06:12,300
that the Waypoint proxy still uses Envoy

171
00:06:12,300 --> 00:06:14,400
because Envoy is the most performant

172
00:06:14,400 --> 00:06:16,380
layer 7 proxy that we know of and that

173
00:06:16,380 --> 00:06:18,720
we've used alongside istio for a very

174
00:06:18,720 --> 00:06:20,759
very long time

175
00:06:20,759 --> 00:06:24,120
now what are the benefits of using

176
00:06:24,120 --> 00:06:26,639
ambient mesh so you cut back on Race

177
00:06:26,639 --> 00:06:28,440
conditions like I mentioned earlier on

178
00:06:28,440 --> 00:06:31,020
but then you also have to think about

179
00:06:31,020 --> 00:06:33,360
this this idea of sidecar injection it

180
00:06:33,360 --> 00:06:35,160
no longer is there which means that you

181
00:06:35,160 --> 00:06:37,979
can easily onboard Services into a mesh

182
00:06:37,979 --> 00:06:40,080
without having to roll them out again

183
00:06:40,080 --> 00:06:42,240
and restart that deployment the other

184
00:06:42,240 --> 00:06:44,160
thing too is when you have to upgrade

185
00:06:44,160 --> 00:06:46,560
let's say a sidecar or now more

186
00:06:46,560 --> 00:06:48,780
specifically a z tunnel you're not

187
00:06:48,780 --> 00:06:51,240
having to do this on a per pod basis you

188
00:06:51,240 --> 00:06:53,699
just do this at the Z Tunnel level so

189
00:06:53,699 --> 00:06:54,900
that way you're cutting back on your

190
00:06:54,900 --> 00:06:57,120
overall upgrade parameters in terms of

191
00:06:57,120 --> 00:06:59,520
how many objects you have to upgrade

192
00:06:59,520 --> 00:07:01,080
the other thing too is you're also

193
00:07:01,080 --> 00:07:03,180
limiting your blast radius overall in

194
00:07:03,180 --> 00:07:04,919
terms of who gets affected in terms of

195
00:07:04,919 --> 00:07:06,660
your configuration let's just say you

196
00:07:06,660 --> 00:07:08,340
you applied a configuration that

197
00:07:08,340 --> 00:07:09,600
accidentally apply to all of your

198
00:07:09,600 --> 00:07:11,580
sidecars now all of a sudden you've

199
00:07:11,580 --> 00:07:13,020
locked out all of your services and they

200
00:07:13,020 --> 00:07:14,940
cannot communicate with each other that

201
00:07:14,940 --> 00:07:16,500
could that could actually be thwarted

202
00:07:16,500 --> 00:07:18,000
with something like ambient mesh and

203
00:07:18,000 --> 00:07:20,039
using the Z tunnel

204
00:07:20,039 --> 00:07:22,020
the other thing too is with respect to

205
00:07:22,020 --> 00:07:23,759
cost savings and resource consumption

206
00:07:23,759 --> 00:07:25,860
because you're not deploying sidecar

207
00:07:25,860 --> 00:07:28,259
resources everywhere and only where you

208
00:07:28,259 --> 00:07:30,300
need it you're now consuming less CPU

209
00:07:30,300 --> 00:07:32,220
and memory and even not having to worry

210
00:07:32,220 --> 00:07:33,720
about the additional configuration that

211
00:07:33,720 --> 00:07:35,880
goes alongside those services

212
00:07:35,880 --> 00:07:38,400
and then this all of this actually works

213
00:07:38,400 --> 00:07:40,080
to contribute to providing that zero

214
00:07:40,080 --> 00:07:42,720
trust Network

215
00:07:42,720 --> 00:07:45,120
now let's take a quick look at things

216
00:07:45,120 --> 00:07:47,039
like how do we derive identity and what

217
00:07:47,039 --> 00:07:49,440
actually goes on with this tunneling so

218
00:07:49,440 --> 00:07:51,780
like I previously showed you I have a

219
00:07:51,780 --> 00:07:53,759
service service a or apple that's trying

220
00:07:53,759 --> 00:07:55,440
to communicate with app B over on the

221
00:07:55,440 --> 00:07:57,840
right hand side now we already know that

222
00:07:57,840 --> 00:07:59,520
because these two workloads are tagged

223
00:07:59,520 --> 00:08:01,800
for ambient based traffic or ambient

224
00:08:01,800 --> 00:08:04,620
based workloads we already know to put

225
00:08:04,620 --> 00:08:06,660
that traffic or that request into the Z

226
00:08:06,660 --> 00:08:09,840
tunnel and then encrypt it with mtls the

227
00:08:09,840 --> 00:08:11,699
other thing though is that you know what

228
00:08:11,699 --> 00:08:13,080
is this tunnel like where did this

229
00:08:13,080 --> 00:08:15,780
tunnel come from so there was a lot of

230
00:08:15,780 --> 00:08:17,160
engineering effort that went in to

231
00:08:17,160 --> 00:08:19,259
create this new overlay called h-bone or

232
00:08:19,259 --> 00:08:20,759
the HTTP based overlay Network

233
00:08:20,759 --> 00:08:23,639
encapsulation and what this provides is

234
00:08:23,639 --> 00:08:26,580
a a TCP over HTTP mechanism so that you

235
00:08:26,580 --> 00:08:29,460
can carry your your requests over this

236
00:08:29,460 --> 00:08:31,680
overlay Network or this overlay tunnel

237
00:08:31,680 --> 00:08:34,260
now this is occurring from Z tunnel pod

238
00:08:34,260 --> 00:08:36,299
to Z tunnel pod so remember

239
00:08:36,299 --> 00:08:38,940
we deploy a z-tunnel pod at a Daemon set

240
00:08:38,940 --> 00:08:41,219
level so if you're no sorry if your

241
00:08:41,219 --> 00:08:43,620
cluster your kubernetes cluster has you

242
00:08:43,620 --> 00:08:45,839
know 10 nodes each one of those nodes is

243
00:08:45,839 --> 00:08:47,940
going to get a z tunnel pod which means

244
00:08:47,940 --> 00:08:50,100
that each one of those Z tunnel pods is

245
00:08:50,100 --> 00:08:51,540
going to tunnel to each other when there

246
00:08:51,540 --> 00:08:55,380
is traffic going over that wire

247
00:08:55,380 --> 00:08:58,140
now there's the element of identity now

248
00:08:58,140 --> 00:08:59,820
the Z tunnel itself actually

249
00:08:59,820 --> 00:09:02,580
impersonates the identity of that

250
00:09:02,580 --> 00:09:04,860
workload so if app a is trying to

251
00:09:04,860 --> 00:09:06,899
communicate with app B normally if we

252
00:09:06,899 --> 00:09:08,700
had the sidecar the sidecar itself would

253
00:09:08,700 --> 00:09:11,040
assume the identity using that spiffy ID

254
00:09:11,040 --> 00:09:13,680
format and then you know would form its

255
00:09:13,680 --> 00:09:15,180
mtls and this would happen on the other

256
00:09:15,180 --> 00:09:18,360
end as well in the case of Z tunnel that

257
00:09:18,360 --> 00:09:20,399
identity is actually derived from the

258
00:09:20,399 --> 00:09:22,560
actual workload itself so the Z tunnel

259
00:09:22,560 --> 00:09:24,180
will impersonate that workload for that

260
00:09:24,180 --> 00:09:26,399
request flow

261
00:09:26,399 --> 00:09:28,920
now this is also where we can apply our

262
00:09:28,920 --> 00:09:31,200
layer 4 authorization policy so if

263
00:09:31,200 --> 00:09:32,459
you're very familiar with how you can

264
00:09:32,459 --> 00:09:34,920
work with firewalls I look at this as

265
00:09:34,920 --> 00:09:36,839
more of a layer 4 layer 3 firewall

266
00:09:36,839 --> 00:09:38,760
because now I could just go ahead and

267
00:09:38,760 --> 00:09:40,380
say I'm going to a certain set of

268
00:09:40,380 --> 00:09:42,660
workloads have this label we're really

269
00:09:42,660 --> 00:09:45,000
looking at it at a TCP IP layer we're

270
00:09:45,000 --> 00:09:46,440
not looking at it at any you know at

271
00:09:46,440 --> 00:09:48,959
layer seven so we can Implement a kind

272
00:09:48,959 --> 00:09:50,940
of like a firewall policy to say this

273
00:09:50,940 --> 00:09:52,380
service can't talk to that service and

274
00:09:52,380 --> 00:09:53,880
we could do this repeatedly if we wanted

275
00:09:53,880 --> 00:09:55,019
to

276
00:09:55,019 --> 00:09:58,140
now how does Z tunnel actually get the

277
00:09:58,140 --> 00:09:59,339
certificate

278
00:09:59,339 --> 00:10:01,620
so Z10 will actually solicit the

279
00:10:01,620 --> 00:10:04,080
workloads for its service account token

280
00:10:04,080 --> 00:10:06,860
once it gets that it actually goes to

281
00:10:06,860 --> 00:10:09,300
istiod the istio-d control plane and

282
00:10:09,300 --> 00:10:12,660
says hey I am I am actually a z tunnel

283
00:10:12,660 --> 00:10:13,920
on this node and I'm trying to

284
00:10:13,920 --> 00:10:16,140
impersonate or I'm trying to service

285
00:10:16,140 --> 00:10:17,640
this identity for this particular

286
00:10:17,640 --> 00:10:19,980
workload can you run through the

287
00:10:19,980 --> 00:10:22,019
certificate signing request for me and

288
00:10:22,019 --> 00:10:23,760
issue me a certificate and say we're all

289
00:10:23,760 --> 00:10:26,100
good to go and once istiod is able to

290
00:10:26,100 --> 00:10:27,899
authorize that and because of all the

291
00:10:27,899 --> 00:10:29,640
trust that's already built in it says

292
00:10:29,640 --> 00:10:31,320
sure let's go ahead and do it it'll

293
00:10:31,320 --> 00:10:33,660
issue its identity for that particular

294
00:10:33,660 --> 00:10:36,000
workload and it'll do so for the other

295
00:10:36,000 --> 00:10:37,620
end and then we'll proceed to create

296
00:10:37,620 --> 00:10:40,920
that mtls end-to-end or then mtls

297
00:10:40,920 --> 00:10:43,819
encryption end to end

298
00:10:45,480 --> 00:10:48,480
now if we have multiple workloads that

299
00:10:48,480 --> 00:10:50,100
same Z tunnel pod is going to service

300
00:10:50,100 --> 00:10:51,720
all of these different workloads that

301
00:10:51,720 --> 00:10:54,180
exist on let's say that node and this

302
00:10:54,180 --> 00:10:55,680
you know you might wonder okay what

303
00:10:55,680 --> 00:10:57,360
happens when we have many many kinds of

304
00:10:57,360 --> 00:10:58,920
workloads running well there are

305
00:10:58,920 --> 00:11:00,120
different ways to scale that we're

306
00:11:00,120 --> 00:11:01,740
investigating one thing I will point out

307
00:11:01,740 --> 00:11:03,300
is steel ambient mesh is still

308
00:11:03,300 --> 00:11:05,040
experimental it's not ready for

309
00:11:05,040 --> 00:11:06,839
production but the reason I say that is

310
00:11:06,839 --> 00:11:08,760
because we're still testing we're still

311
00:11:08,760 --> 00:11:10,800
scale testing we're still validating

312
00:11:10,800 --> 00:11:12,959
various kinds of use cases that we can

313
00:11:12,959 --> 00:11:14,700
achieve with

314
00:11:14,700 --> 00:11:16,440
um with ambient mesh

315
00:11:16,440 --> 00:11:18,540
so in the failure scenario here let's

316
00:11:18,540 --> 00:11:20,820
say that this z-tunnel pod went down

317
00:11:20,820 --> 00:11:23,279
what would happen well kubernetes will

318
00:11:23,279 --> 00:11:25,079
try to reconcile that but why did that

319
00:11:25,079 --> 00:11:27,300
pod go down did the node go down did the

320
00:11:27,300 --> 00:11:28,740
node get disconnected from the actual

321
00:11:28,740 --> 00:11:30,060
Network there are a lot of different

322
00:11:30,060 --> 00:11:32,640
reasons and varying failure conditions

323
00:11:32,640 --> 00:11:34,200
that could have contributed to that

324
00:11:34,200 --> 00:11:35,700
failure

325
00:11:35,700 --> 00:11:36,899
now

326
00:11:36,899 --> 00:11:37,620
um

327
00:11:37,620 --> 00:11:39,720
how am I doing for time

328
00:11:39,720 --> 00:11:41,100
I just want to make sure okay all right

329
00:11:41,100 --> 00:11:42,540
because I got to make sure I give Jim

330
00:11:42,540 --> 00:11:45,180
his time for his demo now in the

331
00:11:45,180 --> 00:11:46,560
situation where I want to implement

332
00:11:46,560 --> 00:11:49,380
layer 7 authorization policies

333
00:11:49,380 --> 00:11:51,600
I have to deploy a waypoint proxy like I

334
00:11:51,600 --> 00:11:53,160
mentioned previous previously before

335
00:11:53,160 --> 00:11:56,519
what that means is I have to deploy a um

336
00:11:56,519 --> 00:11:59,820
a Gateway API resource specifically for

337
00:11:59,820 --> 00:12:01,860
the Waypoint proxy for the destination

338
00:12:01,860 --> 00:12:03,480
workload where I'm trying to communicate

339
00:12:03,480 --> 00:12:05,700
towards and then I'll go about creating

340
00:12:05,700 --> 00:12:08,579
my layer 7 authorization policy when I

341
00:12:08,579 --> 00:12:10,500
create that policy it could be you know

342
00:12:10,500 --> 00:12:13,079
service a or apple can only communicate

343
00:12:13,079 --> 00:12:16,260
and make HTTP get requests towards app B

344
00:12:16,260 --> 00:12:18,899
but not delete requests and as long as

345
00:12:18,899 --> 00:12:20,640
that policy is put into a you know into

346
00:12:20,640 --> 00:12:23,220
effect and and deployed

347
00:12:23,220 --> 00:12:25,500
what ends up happening is that Z tunnel

348
00:12:25,500 --> 00:12:29,040
pod on the source of that traffic will

349
00:12:29,040 --> 00:12:31,200
encrypt using mtls towards the Waypoint

350
00:12:31,200 --> 00:12:33,600
proxy the Waypoint proxy will derive the

351
00:12:33,600 --> 00:12:35,459
the identity of the destination workload

352
00:12:35,459 --> 00:12:37,079
much like it would do for the Z tunnel

353
00:12:37,079 --> 00:12:38,880
and then it would tunnel to the Z

354
00:12:38,880 --> 00:12:42,060
tunnels on the destination node and then

355
00:12:42,060 --> 00:12:43,440
that z-tunnel will unencrypt the traffic

356
00:12:43,440 --> 00:12:45,120
and then direct it towards that final

357
00:12:45,120 --> 00:12:48,360
workload so the request flow changes a

358
00:12:48,360 --> 00:12:49,680
little bit because now you're having to

359
00:12:49,680 --> 00:12:51,959
go through another proxy but that's just

360
00:12:51,959 --> 00:12:55,019
because we want to enforce layer 7.

361
00:12:55,019 --> 00:12:56,880
there's three conditions that I want to

362
00:12:56,880 --> 00:12:59,220
talk about in terms of what happens when

363
00:12:59,220 --> 00:13:02,220
I have let's say an app compromise let's

364
00:13:02,220 --> 00:13:03,899
say a proxy compromise or even a node

365
00:13:03,899 --> 00:13:07,500
compromise so app compromises can come

366
00:13:07,500 --> 00:13:09,360
from a variety of different scenarios

367
00:13:09,360 --> 00:13:11,639
hey I pulled down a container that I

368
00:13:11,639 --> 00:13:13,200
didn't realize was malicious and now

369
00:13:13,200 --> 00:13:15,120
it's in my environment

370
00:13:15,120 --> 00:13:16,500
that can contribute to your app

371
00:13:16,500 --> 00:13:18,300
compromise so maybe you need to be

372
00:13:18,300 --> 00:13:20,399
thinking about you know how do I prevent

373
00:13:20,399 --> 00:13:22,620
us from pulling down containers that we

374
00:13:22,620 --> 00:13:23,880
shouldn't be pulling down and deploying

375
00:13:23,880 --> 00:13:25,279
into our environment

376
00:13:25,279 --> 00:13:28,440
when it comes to

377
00:13:28,440 --> 00:13:31,880
when it comes to the proxy itself

378
00:13:31,880 --> 00:13:35,339
the original sidecar proxy has so many

379
00:13:35,339 --> 00:13:36,740
different

380
00:13:36,740 --> 00:13:40,380
ways to you know create policy ways to

381
00:13:40,380 --> 00:13:41,760
tune it there are a lot of different

382
00:13:41,760 --> 00:13:43,500
observability filters that you can tap

383
00:13:43,500 --> 00:13:44,639
into

384
00:13:44,639 --> 00:13:46,620
and this is great for the sidecar

385
00:13:46,620 --> 00:13:48,060
because it provides all of that

386
00:13:48,060 --> 00:13:49,980
functionality but one of the the biggest

387
00:13:49,980 --> 00:13:52,079
challenges here is these are all the

388
00:13:52,079 --> 00:13:54,720
different points of attack or points of

389
00:13:54,720 --> 00:13:57,240
potential vulnerability now if we slim

390
00:13:57,240 --> 00:14:00,300
down that proxy to just doing layer 4

391
00:14:00,300 --> 00:14:02,519
and mtls then we can remove all the

392
00:14:02,519 --> 00:14:03,839
additional features and we can just

393
00:14:03,839 --> 00:14:06,480
secure that surface area significantly

394
00:14:06,480 --> 00:14:09,120
so this way we have a smaller exposure

395
00:14:09,120 --> 00:14:11,459
area and we limit ourselves to you know

396
00:14:11,459 --> 00:14:13,800
the attack surface altogether

397
00:14:13,800 --> 00:14:15,660
and then there's the final piece of node

398
00:14:15,660 --> 00:14:16,980
compromise

399
00:14:16,980 --> 00:14:18,899
so node compromise is interesting

400
00:14:18,899 --> 00:14:21,060
because I get that question a lot all

401
00:14:21,060 --> 00:14:23,279
right I have an app that's going to be

402
00:14:23,279 --> 00:14:25,260
talking to the Z tunnel to you know

403
00:14:25,260 --> 00:14:27,480
forward requests over that communication

404
00:14:27,480 --> 00:14:29,100
between let's say that pod and that

405
00:14:29,100 --> 00:14:31,380
z-tunnel pod is not encrypted okay

406
00:14:31,380 --> 00:14:33,240
that's great that's that's that's

407
00:14:33,240 --> 00:14:35,880
wonderful but here's the other thing why

408
00:14:35,880 --> 00:14:38,519
does someone have access to your node

409
00:14:38,519 --> 00:14:40,380
why do they have root access you know

410
00:14:40,380 --> 00:14:42,240
this isn't this is more of a physical

411
00:14:42,240 --> 00:14:44,100
control situation this is more of a

412
00:14:44,100 --> 00:14:46,199
role-based Access Control situation do

413
00:14:46,199 --> 00:14:48,480
you have those proper policies in place

414
00:14:48,480 --> 00:14:50,160
to prevent people from being able to

415
00:14:50,160 --> 00:14:52,139
even get into your node are you using

416
00:14:52,139 --> 00:14:54,420
secure operating systems or even secure

417
00:14:54,420 --> 00:14:56,639
distributions to run your clusters so

418
00:14:56,639 --> 00:14:58,199
there are other considerations to think

419
00:14:58,199 --> 00:15:00,779
about other than the fact that app a and

420
00:15:00,779 --> 00:15:02,100
the z-tunnel don't have encrypted

421
00:15:02,100 --> 00:15:04,019
Communications if someone gets you know

422
00:15:04,019 --> 00:15:05,760
access to your nodes you're in a lot

423
00:15:05,760 --> 00:15:08,940
more trouble than what we're seeing here

424
00:15:08,940 --> 00:15:11,160
and with that that actually gives me the

425
00:15:11,160 --> 00:15:13,019
opportunity to pass it over to

426
00:15:13,019 --> 00:15:16,320
Jim to do that little demo thanks Jim

427
00:15:16,320 --> 00:15:18,660
all right thank you Mourinho

428
00:15:18,660 --> 00:15:19,260
um

429
00:15:19,260 --> 00:15:21,420
so I don't know about you but I'm

430
00:15:21,420 --> 00:15:24,480
someone who really enjoys uh not just

431
00:15:24,480 --> 00:15:26,339
hearing about how things work but

432
00:15:26,339 --> 00:15:28,620
actually seeing how they work and so

433
00:15:28,620 --> 00:15:31,019
we're going to we're going to do that

434
00:15:31,019 --> 00:15:33,480
here with

435
00:15:33,480 --> 00:15:36,300
with a brief demonstration of of ambient

436
00:15:36,300 --> 00:15:39,959
mesh in the uh in the time we have

437
00:15:39,959 --> 00:15:42,540
remaining and uh so we're actually going

438
00:15:42,540 --> 00:15:45,300
to start from the uh from the basically

439
00:15:45,300 --> 00:15:47,100
from the ground up okay we've done a

440
00:15:47,100 --> 00:15:49,800
little bit of pre-installation here

441
00:15:49,800 --> 00:15:52,440
um you can see we have a we have a kind

442
00:15:52,440 --> 00:15:55,380
cluster has four nodes on it there's a a

443
00:15:55,380 --> 00:15:57,720
control plane node there are three

444
00:15:57,720 --> 00:16:00,540
worker nodes that are uh that are active

445
00:16:00,540 --> 00:16:02,760
here and um

446
00:16:02,760 --> 00:16:05,279
so what we've done is we've we've uh

447
00:16:05,279 --> 00:16:06,959
there's actually a script that goes

448
00:16:06,959 --> 00:16:08,160
along with this if you're interested in

449
00:16:08,160 --> 00:16:09,899
in learning more you can actually follow

450
00:16:09,899 --> 00:16:12,420
along with this exercise and and do a

451
00:16:12,420 --> 00:16:14,220
lot more uh than just what we're going

452
00:16:14,220 --> 00:16:15,899
to accomplish here in the next 10 or 15

453
00:16:15,899 --> 00:16:19,260
minutes by going to academy.solo.io look

454
00:16:19,260 --> 00:16:21,720
for this ambient mesh course right here

455
00:16:21,720 --> 00:16:24,899
it's all perfectly free and uh uh you

456
00:16:24,899 --> 00:16:26,519
can actually go through this exercise on

457
00:16:26,519 --> 00:16:29,760
your own time and uh and dive into it a

458
00:16:29,760 --> 00:16:32,339
little more uh deeply so at this point

459
00:16:32,339 --> 00:16:35,160
we have a uh we have a four node cluster

460
00:16:35,160 --> 00:16:38,220
that's here we've deployed that and we

461
00:16:38,220 --> 00:16:40,440
have also we have also deployed istio

462
00:16:40,440 --> 00:16:42,839
now at this point ambient is not the

463
00:16:42,839 --> 00:16:45,480
default mode for istio was

464
00:16:45,480 --> 00:16:47,699
as Mourinho said ambient is still is

465
00:16:47,699 --> 00:16:49,500
still experimental uh it's one of the

466
00:16:49,500 --> 00:16:51,259
top priorities for the istio community

467
00:16:51,259 --> 00:16:53,880
this year to to get it hardened and get

468
00:16:53,880 --> 00:16:55,199
it production ready but at this point

469
00:16:55,199 --> 00:16:57,240
it's not so uh so we've actually

470
00:16:57,240 --> 00:17:00,600
installed uh the ambient profile in uh

471
00:17:00,600 --> 00:17:03,120
in istio which gives us uh gives us the

472
00:17:03,120 --> 00:17:06,119
the sdod control plane kind of core

473
00:17:06,119 --> 00:17:07,919
istio capabilities it gives us an

474
00:17:07,919 --> 00:17:10,559
Ingress Gateway and also the cni

475
00:17:10,559 --> 00:17:13,799
components that uh that that Mourinho

476
00:17:13,799 --> 00:17:15,780
mentioned that's responsible for

477
00:17:15,780 --> 00:17:18,660
redirecting traffic between the uh the

478
00:17:18,660 --> 00:17:21,179
worker the workloads and the uh and the

479
00:17:21,179 --> 00:17:23,040
Z tunnels that actually manage the layer

480
00:17:23,040 --> 00:17:26,880
4 policy policy enforcement Okay so

481
00:17:26,880 --> 00:17:28,860
we've we've done that we've done that

482
00:17:28,860 --> 00:17:33,360
installation you can actually see the um

483
00:17:33,360 --> 00:17:35,940
the pods that are that are available

484
00:17:35,940 --> 00:17:38,820
here so here are the um here are the

485
00:17:38,820 --> 00:17:40,559
istio system pods you can see there's

486
00:17:40,559 --> 00:17:42,720
the istioc and I node it's deployed as a

487
00:17:42,720 --> 00:17:44,700
Daemon set so you can see we have one

488
00:17:44,700 --> 00:17:48,000
per node we also have the z-tunnel

489
00:17:48,000 --> 00:17:50,640
components that have been deployed as

490
00:17:50,640 --> 00:17:51,600
well now at this point they're not

491
00:17:51,600 --> 00:17:53,039
really doing anything because we haven't

492
00:17:53,039 --> 00:17:56,700
activated ambient for any of our

493
00:17:56,700 --> 00:17:58,620
application workspaces but they're there

494
00:17:58,620 --> 00:18:00,780
there's one deployed per node they're

495
00:18:00,780 --> 00:18:03,240
ready to uh they're ready to go and you

496
00:18:03,240 --> 00:18:05,820
can also see we have deployed some

497
00:18:05,820 --> 00:18:10,140
workloads that we're going to be using

498
00:18:10,140 --> 00:18:13,380
in this exercise so to to

499
00:18:13,380 --> 00:18:15,720
to accomplish that we have a little

500
00:18:15,720 --> 00:18:18,179
simulation of an e-commerce system you

501
00:18:18,179 --> 00:18:20,039
can see this diagram at the right there

502
00:18:20,039 --> 00:18:22,320
are three components here uh there's a

503
00:18:22,320 --> 00:18:24,720
web API there's a recommendation service

504
00:18:24,720 --> 00:18:26,640
and there is a purchase history service

505
00:18:26,640 --> 00:18:28,919
now these Services aren't really real

506
00:18:28,919 --> 00:18:30,960
we're using a little framework called

507
00:18:30,960 --> 00:18:33,660
the fake service that allows us to just

508
00:18:33,660 --> 00:18:37,020
uh basically test policy enforcement

509
00:18:37,020 --> 00:18:39,120
against the the communication as it

510
00:18:39,120 --> 00:18:41,280
happens across across the different

511
00:18:41,280 --> 00:18:43,260
service boundaries and basically when

512
00:18:43,260 --> 00:18:44,640
you hit each service what you're going

513
00:18:44,640 --> 00:18:46,620
to get back is just a kind of an echo

514
00:18:46,620 --> 00:18:47,820
message that says hey you're in the

515
00:18:47,820 --> 00:18:50,039
purchase history service now and that

516
00:18:50,039 --> 00:18:52,559
sort of thing so that's uh that's our

517
00:18:52,559 --> 00:18:54,539
that's our application workload if you

518
00:18:54,539 --> 00:18:56,760
will we also have a couple of client

519
00:18:56,760 --> 00:18:59,580
pods that we have deployed here uh

520
00:18:59,580 --> 00:19:00,960
there's one called sleep and one called

521
00:19:00,960 --> 00:19:03,419
not sleep you'll you'll see those uh be

522
00:19:03,419 --> 00:19:07,799
activated in just a bit okay uh we have

523
00:19:07,799 --> 00:19:09,900
also we're also using just standard

524
00:19:09,900 --> 00:19:14,400
istio apis to expose these workloads to

525
00:19:14,400 --> 00:19:16,080
the outside world if you're familiar

526
00:19:16,080 --> 00:19:17,460
with istio there's nothing there's

527
00:19:17,460 --> 00:19:20,700
nothing exotic or unusual here at all

528
00:19:20,700 --> 00:19:24,480
we're just using we basically have a we

529
00:19:24,480 --> 00:19:27,000
have a Gateway component that we've

530
00:19:27,000 --> 00:19:28,260
defined that just says hey we're

531
00:19:28,260 --> 00:19:29,780
listening in on the host

532
00:19:29,780 --> 00:19:33,539
istioexplain.io on Port 80 with HTTP and

533
00:19:33,539 --> 00:19:35,460
then we're also establishing a virtual

534
00:19:35,460 --> 00:19:38,100
service to Route traffic that's intended

535
00:19:38,100 --> 00:19:41,640
for that domain to our web API service

536
00:19:41,640 --> 00:19:43,980
which is kind of the uh the head of our

537
00:19:43,980 --> 00:19:46,980
the head of our application chain that

538
00:19:46,980 --> 00:19:50,880
we are using here okay so once we have

539
00:19:50,880 --> 00:19:54,720
once we have all of that in place we can

540
00:19:54,720 --> 00:19:58,679
do just some simple tests here so this

541
00:19:58,679 --> 00:20:00,120
is one we're actually going to go

542
00:20:00,120 --> 00:20:03,539
through the through the Gateway through

543
00:20:03,539 --> 00:20:05,400
the istio Ingress Gateway coming from

544
00:20:05,400 --> 00:20:07,620
outside the cluster it's going to route

545
00:20:07,620 --> 00:20:09,840
to the web API service which is in turn

546
00:20:09,840 --> 00:20:13,020
going to invoke all of the others in the

547
00:20:13,020 --> 00:20:15,539
chain and you can see that when we when

548
00:20:15,539 --> 00:20:19,460
we call that here there is our web API

549
00:20:19,460 --> 00:20:21,900
response and you can see it makes some

550
00:20:21,900 --> 00:20:23,640
Upstream calls one of those is the

551
00:20:23,640 --> 00:20:25,500
recommendation service the

552
00:20:25,500 --> 00:20:28,020
recommendation service in turn makes a

553
00:20:28,020 --> 00:20:30,480
call Upstream to the to the purchase

554
00:20:30,480 --> 00:20:32,700
history service so a pretty simple setup

555
00:20:32,700 --> 00:20:35,160
everything is working we have ambient

556
00:20:35,160 --> 00:20:37,440
installed on the cluster but we've not

557
00:20:37,440 --> 00:20:39,600
really activated it yet and so that's

558
00:20:39,600 --> 00:20:43,799
what we're going to do next so we will

559
00:20:43,799 --> 00:20:46,500
check that out everything should be good

560
00:20:46,500 --> 00:20:50,160
and we will move on

561
00:20:50,160 --> 00:20:52,320
all right to the next step so we're

562
00:20:52,320 --> 00:20:53,520
going to do a couple of things here

563
00:20:53,520 --> 00:20:55,380
first of all we're going to add services

564
00:20:55,380 --> 00:20:57,240
to the ambient mesh you're going to see

565
00:20:57,240 --> 00:21:00,360
how the activation takes place we're

566
00:21:00,360 --> 00:21:02,760
going to look at some specific layer 4

567
00:21:02,760 --> 00:21:05,160
authorization policies just basic things

568
00:21:05,160 --> 00:21:07,679
that you can do that are pro that are

569
00:21:07,679 --> 00:21:11,400
applied via the z-tunnel component and

570
00:21:11,400 --> 00:21:12,600
then finally we'll show you just a

571
00:21:12,600 --> 00:21:14,539
really quick example of a layer 7

572
00:21:14,539 --> 00:21:18,000
authorization policy as well so let's uh

573
00:21:18,000 --> 00:21:21,840
let's kick off this this exercise and

574
00:21:21,840 --> 00:21:23,520
the first thing we want to do so we have

575
00:21:23,520 --> 00:21:26,220
the ambient profile of istio installed

576
00:21:26,220 --> 00:21:28,980
but we've not activated it

577
00:21:28,980 --> 00:21:31,320
for any of our namespaces yet so what

578
00:21:31,320 --> 00:21:33,720
we're going to do we're going to label

579
00:21:33,720 --> 00:21:36,240
the default namespace which is where our

580
00:21:36,240 --> 00:21:38,820
web API purchase history our e-commerce

581
00:21:38,820 --> 00:21:42,480
application services are deployed and so

582
00:21:42,480 --> 00:21:44,280
once we label that what's going to

583
00:21:44,280 --> 00:21:47,159
happen is we're going to see we're going

584
00:21:47,159 --> 00:21:50,340
to see ambient mode be activated for the

585
00:21:50,340 --> 00:21:52,700
services in this

586
00:21:52,700 --> 00:21:56,100
in this workspace specifically you can

587
00:21:56,100 --> 00:21:59,220
see that by taking a look at the logs of

588
00:21:59,220 --> 00:22:01,380
the cni node we won't go into any detail

589
00:22:01,380 --> 00:22:04,020
here but you can see it's recognized hey

590
00:22:04,020 --> 00:22:06,679
we're setting up this default namespace

591
00:22:06,679 --> 00:22:08,820
you can see

592
00:22:08,820 --> 00:22:09,360
um

593
00:22:09,360 --> 00:22:12,059
you can see where some routing rules are

594
00:22:12,059 --> 00:22:14,880
being defined here and that their routes

595
00:22:14,880 --> 00:22:17,280
that are being added from the uh from

596
00:22:17,280 --> 00:22:19,260
the the source workloads and the target

597
00:22:19,260 --> 00:22:22,860
workloads to their local uh their local

598
00:22:22,860 --> 00:22:25,320
Z tunnels okay so the nice thing is

599
00:22:25,320 --> 00:22:28,500
we're not having to go and restart those

600
00:22:28,500 --> 00:22:31,559
components at all we're not having to

601
00:22:31,559 --> 00:22:35,520
inject a sidecar or anything like that

602
00:22:35,520 --> 00:22:38,460
but you can see here for our application

603
00:22:38,460 --> 00:22:41,940
pods that we still have a single you

604
00:22:41,940 --> 00:22:43,740
know there's no sidecar injected there's

605
00:22:43,740 --> 00:22:45,600
there's no there aren't two containers

606
00:22:45,600 --> 00:22:48,419
that are active within those within

607
00:22:48,419 --> 00:22:50,760
those pods there's only a single one and

608
00:22:50,760 --> 00:22:54,059
in fact the Z tunnel is handling the uh

609
00:22:54,059 --> 00:22:54,720
um

610
00:22:54,720 --> 00:22:58,799
the routing of the traffic okay so

611
00:22:58,799 --> 00:23:01,919
um so once we have established that kind

612
00:23:01,919 --> 00:23:04,320
of verified that the the cni has is

613
00:23:04,320 --> 00:23:08,220
redirecting our um our traffic

614
00:23:08,220 --> 00:23:10,320
um actually what we're what we're going

615
00:23:10,320 --> 00:23:13,140
to do is you'll see the the what what

616
00:23:13,140 --> 00:23:15,600
what will happen is the traffic's going

617
00:23:15,600 --> 00:23:17,280
to look something like what's depicted

618
00:23:17,280 --> 00:23:19,440
in that diagram that uh it's very

619
00:23:19,440 --> 00:23:21,059
similar to what Mourinho showed where

620
00:23:21,059 --> 00:23:22,740
we're going to have a client app talking

621
00:23:22,740 --> 00:23:24,960
to its local Z tunnel it's going to

622
00:23:24,960 --> 00:23:28,500
establish a an h-bone tunnel to a z

623
00:23:28,500 --> 00:23:31,500
tunnel on the target machine and then it

624
00:23:31,500 --> 00:23:33,840
will Route traffic to the actual uh

625
00:23:33,840 --> 00:23:39,059
Target Services okay so no side car is

626
00:23:39,059 --> 00:23:41,640
required so if we generate some traffic

627
00:23:41,640 --> 00:23:44,460
now to this

628
00:23:44,460 --> 00:23:48,059
um to this API service you can actually

629
00:23:48,059 --> 00:23:52,140
see what the Z tunnel is is doing so if

630
00:23:52,140 --> 00:23:55,320
we take a look at the at the Z tunnel

631
00:23:55,320 --> 00:23:57,960
logs you can see here's here's the uh

632
00:23:57,960 --> 00:24:01,740
the HTTP connect tunnel that's uh that's

633
00:24:01,740 --> 00:24:04,260
being established here you can see some

634
00:24:04,260 --> 00:24:06,720
of the of the spiffy IDs that indicate

635
00:24:06,720 --> 00:24:09,600
things like for example we're going from

636
00:24:09,600 --> 00:24:12,179
the uh like from the from the web API to

637
00:24:12,179 --> 00:24:14,820
the recommendation engine you can also

638
00:24:14,820 --> 00:24:17,700
see here at the very bottom a record

639
00:24:17,700 --> 00:24:20,880
where that we're capturing outbound

640
00:24:20,880 --> 00:24:23,400
traffic and there's no Waypoint proxy

641
00:24:23,400 --> 00:24:25,919
that is uh that's involved and that's

642
00:24:25,919 --> 00:24:27,480
because all we're doing here is we're

643
00:24:27,480 --> 00:24:31,200
just activating the layer 4 uh component

644
00:24:31,200 --> 00:24:33,120
of the network right we're encrypting

645
00:24:33,120 --> 00:24:34,380
the traffic

646
00:24:34,380 --> 00:24:36,419
we're using we're using cryptographic

647
00:24:36,419 --> 00:24:38,400
identities to establish the connection

648
00:24:38,400 --> 00:24:41,820
uh between between the Z tunnels and the

649
00:24:41,820 --> 00:24:43,919
uh and the source the source and

650
00:24:43,919 --> 00:24:45,900
destination services but because there's

651
00:24:45,900 --> 00:24:48,539
no layer seven uh policy that's being

652
00:24:48,539 --> 00:24:50,820
applied we don't have to we don't have

653
00:24:50,820 --> 00:24:53,700
to have one of those activated at this

654
00:24:53,700 --> 00:24:55,080
point so that's an important

655
00:24:55,080 --> 00:24:57,419
consideration for a lot of what we see

656
00:24:57,419 --> 00:25:00,120
customers who are adopting ambient mesh

657
00:25:00,120 --> 00:25:02,700
or adopting istio they care primarily

658
00:25:02,700 --> 00:25:06,720
about the uh um the security aspects of

659
00:25:06,720 --> 00:25:09,059
of securing the services within their

660
00:25:09,059 --> 00:25:11,340
mesh they don't necessarily need the

661
00:25:11,340 --> 00:25:13,380
full layer 7 capabilities and so this

662
00:25:13,380 --> 00:25:16,200
gives you a way to incrementally adopt

663
00:25:16,200 --> 00:25:18,240
just the components of istio that you

664
00:25:18,240 --> 00:25:22,200
need without biting off the full uh the

665
00:25:22,200 --> 00:25:26,220
full layer 7 model okay so we can see

666
00:25:26,220 --> 00:25:29,100
there's traffic now going through the

667
00:25:29,100 --> 00:25:31,559
um through the Z tunnel and now let's

668
00:25:31,559 --> 00:25:35,880
actually apply some policies to that to

669
00:25:35,880 --> 00:25:37,740
that traffic so first we'll start with

670
00:25:37,740 --> 00:25:40,260
you know good zero trust Foundation here

671
00:25:40,260 --> 00:25:41,340
we're going to start with the policy

672
00:25:41,340 --> 00:25:44,279
that basically denies all uh denies all

673
00:25:44,279 --> 00:25:47,100
traffic okay so this is an allow nothing

674
00:25:47,100 --> 00:25:49,380
authorization policy another thing you

675
00:25:49,380 --> 00:25:52,020
might notice is that the the istio apis

676
00:25:52,020 --> 00:25:55,140
we're using standard istio apis here the

677
00:25:55,140 --> 00:25:59,340
apis themselves have not changed it's

678
00:25:59,340 --> 00:26:02,580
simply the way the icod control plane is

679
00:26:02,580 --> 00:26:04,919
is activating these policies is by

680
00:26:04,919 --> 00:26:06,779
programming you know Z tunnels and

681
00:26:06,779 --> 00:26:08,760
Waypoint proxies as opposed to

682
00:26:08,760 --> 00:26:11,279
programming sidecars that are attached

683
00:26:11,279 --> 00:26:14,640
to each individual workload so once we

684
00:26:14,640 --> 00:26:16,200
establish that allow nothing

685
00:26:16,200 --> 00:26:18,840
authorization policy we'll do the exact

686
00:26:18,840 --> 00:26:21,419
same operation we did before that worked

687
00:26:21,419 --> 00:26:23,640
fine and not surprisingly what's going

688
00:26:23,640 --> 00:26:26,159
to happen is that request is going to be

689
00:26:26,159 --> 00:26:30,299
denied so we will expand out our

690
00:26:30,299 --> 00:26:33,120
authorization policy again using best

691
00:26:33,120 --> 00:26:35,340
you know least privileged access sort of

692
00:26:35,340 --> 00:26:38,159
practices will establish a suite of

693
00:26:38,159 --> 00:26:40,860
policies that basically authorize each

694
00:26:40,860 --> 00:26:43,860
link in that service chain so here is

695
00:26:43,860 --> 00:26:47,100
one for the uh for the web API component

696
00:26:47,100 --> 00:26:49,500
it's going to allow

697
00:26:49,500 --> 00:26:50,220
um

698
00:26:50,220 --> 00:26:52,320
it's going to allow requests that come

699
00:26:52,320 --> 00:26:54,960
from either this uh this sleep identity

700
00:26:54,960 --> 00:26:58,080
the sleep pod or from the istio Ingress

701
00:26:58,080 --> 00:27:02,340
Gateway component all right so and then

702
00:27:02,340 --> 00:27:04,740
in turn the next Link in the chain the

703
00:27:04,740 --> 00:27:07,320
recommendation service is only going to

704
00:27:07,320 --> 00:27:11,940
allow access from the web API identity

705
00:27:11,940 --> 00:27:14,220
and finally the third link in the chain

706
00:27:14,220 --> 00:27:16,080
the purchase history component is only

707
00:27:16,080 --> 00:27:17,700
going to allow access from the

708
00:27:17,700 --> 00:27:19,980
recommendation service okay pretty

709
00:27:19,980 --> 00:27:22,140
straightforward stuff but gives you a

710
00:27:22,140 --> 00:27:23,299
nice

711
00:27:23,299 --> 00:27:25,860
policy-based Foundation

712
00:27:25,860 --> 00:27:30,179
for for establishing this sort of thing

713
00:27:30,179 --> 00:27:32,159
now so now what do we expect to happen

714
00:27:32,159 --> 00:27:35,760
if we use that same that same invocation

715
00:27:35,760 --> 00:27:39,840
again in this case now we expect that

716
00:27:39,840 --> 00:27:41,760
it's going to work just fine because

717
00:27:41,760 --> 00:27:44,580
we've authorized each link in the in the

718
00:27:44,580 --> 00:27:46,919
service chain and in fact that's exactly

719
00:27:46,919 --> 00:27:48,840
what you see we're hitting web API we're

720
00:27:48,840 --> 00:27:51,000
hitting recommendation and we're hitting

721
00:27:51,000 --> 00:27:54,679
purchase history okay

722
00:27:55,140 --> 00:27:57,779
now one final step here and then I'll

723
00:27:57,779 --> 00:28:02,120
turn it back over to Merino to wrap up

724
00:28:02,760 --> 00:28:05,220
so we've talked about we've talked about

725
00:28:05,220 --> 00:28:07,020
the layer four policies how those are

726
00:28:07,020 --> 00:28:10,799
applied via the via the Z tunnel we can

727
00:28:10,799 --> 00:28:13,980
also apply layer 7 policies for services

728
00:28:13,980 --> 00:28:17,220
for identities where that makes sense we

729
00:28:17,220 --> 00:28:19,039
can spin up the additional

730
00:28:19,039 --> 00:28:22,020
infrastructure to to make that happen

731
00:28:22,020 --> 00:28:24,179
but we don't have to buy it off on

732
00:28:24,179 --> 00:28:25,799
establishing that infrastructure for

733
00:28:25,799 --> 00:28:29,400
each and every workload in the mesh so

734
00:28:29,400 --> 00:28:31,860
in this case what we're going to do is

735
00:28:31,860 --> 00:28:35,360
we're going to establish a layer 7

736
00:28:35,360 --> 00:28:39,960
policy for this web API identity okay

737
00:28:39,960 --> 00:28:42,120
and so to do that we're going to first

738
00:28:42,120 --> 00:28:45,120
spin up a waypoint proxy which is at

739
00:28:45,120 --> 00:28:47,340
this point just a it's an Envoy proxy

740
00:28:47,340 --> 00:28:49,500
just like just like the uh like side

741
00:28:49,500 --> 00:28:52,679
cars are in istio that uh that's

742
00:28:52,679 --> 00:28:53,940
actually going to be the policy

743
00:28:53,940 --> 00:28:57,600
enforcement point for for this policy so

744
00:28:57,600 --> 00:28:59,039
all right what does the policy look like

745
00:28:59,039 --> 00:29:00,299
we're going to do well first of all

746
00:29:00,299 --> 00:29:02,340
let's actually uh as Mourinho said we're

747
00:29:02,340 --> 00:29:04,020
going to use the game Gateway API to

748
00:29:04,020 --> 00:29:06,779
actually spin up that that Waypoint

749
00:29:06,779 --> 00:29:09,419
proxy so you can see this Gateway uh

750
00:29:09,419 --> 00:29:12,320
this Gateway corresponds to the web API

751
00:29:12,320 --> 00:29:15,840
identity service account here so let's

752
00:29:15,840 --> 00:29:17,100
um

753
00:29:17,100 --> 00:29:20,159
Connection close the demo gods have

754
00:29:20,159 --> 00:29:21,840
struck

755
00:29:21,840 --> 00:29:24,980
I hate it when that happens

756
00:29:25,080 --> 00:29:27,918
all right

757
00:29:32,419 --> 00:29:35,460
here we go did you offer your sacrifice

758
00:29:35,460 --> 00:29:37,500
to the demo Gods this morning Mourinho I

759
00:29:37,500 --> 00:29:39,659
forgot that's probably what's going on

760
00:29:39,659 --> 00:29:43,559
here all right so um so all right so we

761
00:29:43,559 --> 00:29:45,419
have we have established that Gateway

762
00:29:45,419 --> 00:29:48,360
and uh if the gods are being kind to us

763
00:29:48,360 --> 00:29:51,419
we can look now and we should see that

764
00:29:51,419 --> 00:29:54,360
uh a a waypoint proxy corresponding to

765
00:29:54,360 --> 00:29:57,000
this web API service has indeed uh been

766
00:29:57,000 --> 00:29:59,460
been spun up for us

767
00:29:59,460 --> 00:30:00,779
and now let's actually do something

768
00:30:00,779 --> 00:30:02,940
interesting so so far we've only been

769
00:30:02,940 --> 00:30:05,340
specifying policies that require layer 4

770
00:30:05,340 --> 00:30:07,740
access let's do something that that

771
00:30:07,740 --> 00:30:10,559
introduces a layer 7 component an HTTP

772
00:30:10,559 --> 00:30:13,020
component so we're going to expand out

773
00:30:13,020 --> 00:30:17,640
the web API policy so that now uh we're

774
00:30:17,640 --> 00:30:19,559
using we're allowing traffic from the

775
00:30:19,559 --> 00:30:22,320
same principles as before but we're only

776
00:30:22,320 --> 00:30:24,779
supporting HTTP get methods all right so

777
00:30:24,779 --> 00:30:26,880
something that requires layer 7 access

778
00:30:26,880 --> 00:30:31,740
to uh to be able to enforce so when we

779
00:30:31,740 --> 00:30:35,100
when we activate that policy now if we

780
00:30:35,100 --> 00:30:36,779
try to do the same thing that we did

781
00:30:36,779 --> 00:30:38,159
before this is going to work because

782
00:30:38,159 --> 00:30:41,580
we're issuing an HTTP get against the

783
00:30:41,580 --> 00:30:44,100
against the web API all right and so

784
00:30:44,100 --> 00:30:46,159
that's all that's all fine that works

785
00:30:46,159 --> 00:30:50,240
but if we

786
00:30:50,340 --> 00:30:53,279
um try to issue a delete request instead

787
00:30:53,279 --> 00:30:54,779
of a get request what do you expect to

788
00:30:54,779 --> 00:30:56,640
happen the policy is going to kick in

789
00:30:56,640 --> 00:30:59,399
and we're going to get an access denied

790
00:30:59,399 --> 00:31:02,940
uh message there you can also see we get

791
00:31:02,940 --> 00:31:05,220
back because this is at the HTTP level

792
00:31:05,220 --> 00:31:09,260
we also get back a nice HTTP 403

793
00:31:09,260 --> 00:31:13,559
Forbidden code as well so with that I'm

794
00:31:13,559 --> 00:31:16,380
going to shut down the demo and turn it

795
00:31:16,380 --> 00:31:18,960
back over to Mourinho to take us home

796
00:31:18,960 --> 00:31:21,299
all right all right working perfect

797
00:31:21,299 --> 00:31:23,520
thank you so much for the demo

798
00:31:23,520 --> 00:31:26,220
appreciate that Jim okay so let's go

799
00:31:26,220 --> 00:31:29,120
back to the

800
00:31:31,320 --> 00:31:34,820
is it like a hiding somewhere

801
00:31:35,700 --> 00:31:38,820
there you go hit play up there

802
00:31:38,820 --> 00:31:42,360
nice okay so just to recap istio offer

803
00:31:42,360 --> 00:31:44,580
or istio ambient mesh offers you a new

804
00:31:44,580 --> 00:31:47,460
mode of operation uh for a sidecarless

805
00:31:47,460 --> 00:31:48,539
operation

806
00:31:48,539 --> 00:31:50,520
so the the fundamental difference here

807
00:31:50,520 --> 00:31:52,740
is that when you roll out Services into

808
00:31:52,740 --> 00:31:54,840
your mesh with ambient mesh you're not

809
00:31:54,840 --> 00:31:57,240
having to deploy a sidecar which means

810
00:31:57,240 --> 00:31:59,279
you're not injecting you're not having

811
00:31:59,279 --> 00:32:00,899
to modify the existing workload you're

812
00:32:00,899 --> 00:32:03,000
not having to restart it you actually

813
00:32:03,000 --> 00:32:06,419
tag your your namespace that you want it

814
00:32:06,419 --> 00:32:08,179
to be a part of the ambient mesh

815
00:32:08,179 --> 00:32:11,220
environment and once you do so then the

816
00:32:11,220 --> 00:32:13,140
Waypoint sorry then the Z tunnels get

817
00:32:13,140 --> 00:32:16,500
deployed and then they start looking for

818
00:32:16,500 --> 00:32:18,419
traffic destined towards other ambient

819
00:32:18,419 --> 00:32:21,360
mesh based workloads now what this means

820
00:32:21,360 --> 00:32:22,919
is because we're you know operating with

821
00:32:22,919 --> 00:32:24,600
less sidecars that means there are less

822
00:32:24,600 --> 00:32:27,240
resources consumed but does that mean we

823
00:32:27,240 --> 00:32:29,820
lose any capability no because we've

824
00:32:29,820 --> 00:32:31,679
shifted that operation towards the Z

825
00:32:31,679 --> 00:32:33,899
tunnel and the Waypoint proxy if I want

826
00:32:33,899 --> 00:32:36,360
layer 4 authorization it's there layer

827
00:32:36,360 --> 00:32:38,100
seven it's also there but through that

828
00:32:38,100 --> 00:32:41,600
Gateway API deployed Waypoint proxy

829
00:32:41,600 --> 00:32:43,980
finally I wanted to just point out one

830
00:32:43,980 --> 00:32:45,360
very interesting thing here you might

831
00:32:45,360 --> 00:32:47,820
have noticed that the Waypoint proxy as

832
00:32:47,820 --> 00:32:49,200
well as the Z tunnel currently use

833
00:32:49,200 --> 00:32:51,899
implementations of Envoy there is work

834
00:32:51,899 --> 00:32:54,059
being done today in the istio community

835
00:32:54,059 --> 00:32:57,480
to change that that z-tunnel proxy to be

836
00:32:57,480 --> 00:32:59,760
rust-based so that it could be far more

837
00:32:59,760 --> 00:33:03,120
performant it could also allow us to you

838
00:33:03,120 --> 00:33:05,640
know scale in different ways as well so

839
00:33:05,640 --> 00:33:06,779
you could go check that out there's

840
00:33:06,779 --> 00:33:08,820
actually if I'm not mistaken the istio

841
00:33:08,820 --> 00:33:11,100
community has even got a branch for that

842
00:33:11,100 --> 00:33:13,019
that you can go check out and even test

843
00:33:13,019 --> 00:33:14,460
it out for yourself to understand like

844
00:33:14,460 --> 00:33:16,980
what the performance might look like in

845
00:33:16,980 --> 00:33:18,419
fact I think one of the istio

846
00:33:18,419 --> 00:33:20,460
contributors also created a very good

847
00:33:20,460 --> 00:33:23,039
document that just walks through the

848
00:33:23,039 --> 00:33:24,260
different

849
00:33:24,260 --> 00:33:27,360
Envoy a go-based proxy and a rust based

850
00:33:27,360 --> 00:33:29,480
proxy and the different performance

851
00:33:29,480 --> 00:33:31,919
metrics that come out of that as well

852
00:33:31,919 --> 00:33:34,919
finally I will say if you are if you are

853
00:33:34,919 --> 00:33:36,480
interested to play with ambient mesh in

854
00:33:36,480 --> 00:33:38,460
detail we have a lab that's available

855
00:33:38,460 --> 00:33:40,860
through solo Academy go check that out

856
00:33:40,860 --> 00:33:44,340
it's academy.solo.io we have ambient

857
00:33:44,340 --> 00:33:47,039
Ambient mesh based workshops we also

858
00:33:47,039 --> 00:33:50,159
have istio we have ebpf and psyllium so

859
00:33:50,159 --> 00:33:51,419
that you can learn the whole stack for

860
00:33:51,419 --> 00:33:54,059
application networking also if you want

861
00:33:54,059 --> 00:33:55,260
to continue that conversation about

862
00:33:55,260 --> 00:33:56,580
ambient mesh and you have more questions

863
00:33:56,580 --> 00:33:58,140
if we're not able to answer them here

864
00:33:58,140 --> 00:34:01,559
obviously come visit us at G18 we're

865
00:34:01,559 --> 00:34:03,960
we're in that expo hall somewhere but

866
00:34:03,960 --> 00:34:05,519
you can't miss us

867
00:34:05,519 --> 00:34:08,820
so let's open it up to questions and by

868
00:34:08,820 --> 00:34:11,040
the way we also have giveaways the

869
00:34:11,040 --> 00:34:12,540
ambient mesh book so we can give you

870
00:34:12,540 --> 00:34:14,219
some more details if you're if you have

871
00:34:14,219 --> 00:34:15,839
a plane ride home like I do this is

872
00:34:15,839 --> 00:34:17,520
great you can read it you can read it on

873
00:34:17,520 --> 00:34:19,080
the plane on the way home so yeah come

874
00:34:19,080 --> 00:34:20,460
ask us for one

875
00:34:20,460 --> 00:34:23,159
all right any questions

876
00:34:23,159 --> 00:34:26,060
yes go ahead

877
00:34:38,460 --> 00:34:40,980
So currently as it stands you can't at

878
00:34:40,980 --> 00:34:42,599
the moment only because there hasn't

879
00:34:42,599 --> 00:34:45,239
been any sort of I'd say configuration

880
00:34:45,239 --> 00:34:47,760
or coding or programming for let's say

881
00:34:47,760 --> 00:34:49,560
the istioc and iPod to direct that

882
00:34:49,560 --> 00:34:51,839
directly to the Waypoint and in fact the

883
00:34:51,839 --> 00:34:53,219
Waypoint is only meant to be deployed

884
00:34:53,219 --> 00:34:55,379
when you have to you know use layers of

885
00:34:55,379 --> 00:34:58,140
an authorization most of the are all of

886
00:34:58,140 --> 00:34:59,339
the traffic should be flowing through

887
00:34:59,339 --> 00:35:01,200
the Z tunnel so that it can decide do we

888
00:35:01,200 --> 00:35:03,119
want to Tunnel towards a waypoint or

889
00:35:03,119 --> 00:35:05,099
directly to another Z tunnel so that we

890
00:35:05,099 --> 00:35:08,060
can maintain

891
00:35:08,520 --> 00:35:11,060
mm-hmm

892
00:35:11,820 --> 00:35:14,460
Yeah well yeah there could be other

893
00:35:14,460 --> 00:35:15,660
options

894
00:35:15,660 --> 00:35:18,119
um specifically for istio we've gone on

895
00:35:18,119 --> 00:35:20,400
the path of using the Z tunnel and then

896
00:35:20,400 --> 00:35:22,380
taking advantage of the h-bone protocol

897
00:35:22,380 --> 00:35:25,140
that in fact if you go look at I think

898
00:35:25,140 --> 00:35:28,500
istio 1.16 now supports if I'm not

899
00:35:28,500 --> 00:35:30,000
mistaken don't quote me on this because

900
00:35:30,000 --> 00:35:32,099
I got to go back and check now supports

901
00:35:32,099 --> 00:35:35,099
H bone to the sidecar as well so this

902
00:35:35,099 --> 00:35:37,800
means that there's more integration

903
00:35:37,800 --> 00:35:40,680
going towards this ambient mesh and

904
00:35:40,680 --> 00:35:42,540
non-ambient based workloads that run the

905
00:35:42,540 --> 00:35:46,020
sidecar so the potential of you saying

906
00:35:46,020 --> 00:35:48,119
when you just mentioned hey can we just

907
00:35:48,119 --> 00:35:50,880
go to the the Waypoint that could be a

908
00:35:50,880 --> 00:35:52,140
possibility and that's something that we

909
00:35:52,140 --> 00:35:53,400
could probably feed back to the istio

910
00:35:53,400 --> 00:35:56,720
community to further develop

911
00:35:57,180 --> 00:35:58,500
is there another question over here

912
00:35:58,500 --> 00:35:59,579
somewhere

913
00:35:59,579 --> 00:36:02,000
so

914
00:36:08,040 --> 00:36:10,700
that's right

915
00:36:13,560 --> 00:36:16,880
intermediary yeah that's right

916
00:36:28,520 --> 00:36:30,839
[Music]

917
00:36:30,839 --> 00:36:32,160
do you want to take that one or do you

918
00:36:32,160 --> 00:36:34,200
want me to okay so my what I would say

919
00:36:34,200 --> 00:36:35,700
is we're not there yet well the SEO

920
00:36:35,700 --> 00:36:37,740
Community is not there yet uh but that's

921
00:36:37,740 --> 00:36:39,960
definitely being investigated

922
00:36:39,960 --> 00:36:42,180
um if we could do it with istio today I

923
00:36:42,180 --> 00:36:43,920
mean there's no reason we couldn't do it

924
00:36:43,920 --> 00:36:45,540
with ambient mesh as well it's just we

925
00:36:45,540 --> 00:36:48,440
haven't gone down that path

926
00:36:56,099 --> 00:36:58,500
envoys SDS

927
00:36:58,500 --> 00:37:00,500
yeah

928
00:37:11,460 --> 00:37:13,320
yeah I I don't think that's available

929
00:37:13,320 --> 00:37:17,480
not today in the community yet yeah

930
00:37:18,540 --> 00:37:21,359
any other questions

931
00:37:21,359 --> 00:37:23,040
awesome well thank you very much for

932
00:37:23,040 --> 00:37:24,660
coming by appreciate your time thank you

933
00:37:24,660 --> 00:37:25,290
take care

934
00:37:25,290 --> 00:37:29,500
[Applause]

