1
00:00:00,000 --> 00:00:02,040
so a couple things first I just want to

2
00:00:02,040 --> 00:00:03,840
thank everybody for coming out to

3
00:00:03,840 --> 00:00:07,440
talk about zero trust in the cloud and

4
00:00:07,440 --> 00:00:09,620
the other uh I apologize if my voice

5
00:00:09,620 --> 00:00:12,599
breaks up a little bit during the talk

6
00:00:12,599 --> 00:00:14,639
I'm fighting something off but

7
00:00:14,639 --> 00:00:17,900
thankfully it's not covered

8
00:00:18,840 --> 00:00:21,720
so today I'm going to talk about zero

9
00:00:21,720 --> 00:00:24,960
trust in the cloud and how web assembly

10
00:00:24,960 --> 00:00:28,560
is a key enabling technology for that

11
00:00:28,560 --> 00:00:30,900
uh so

12
00:00:30,900 --> 00:00:33,000
I wrote a book called programming

13
00:00:33,000 --> 00:00:34,860
webassembly with Russ

14
00:00:34,860 --> 00:00:38,660
uh wrote Cloud native go

15
00:00:38,660 --> 00:00:41,000
asp.net core

16
00:00:41,000 --> 00:00:43,320
my books haven't always been on the

17
00:00:43,320 --> 00:00:45,480
right side of History I wrote a Windows

18
00:00:45,480 --> 00:00:48,739
Phone 7 programming book

19
00:00:51,120 --> 00:00:53,780
so I created a an open source

20
00:00:53,780 --> 00:00:58,399
webassembly project called wasmcloud

21
00:00:58,520 --> 00:01:02,640
I co-founded cosmonic which is a company

22
00:01:02,640 --> 00:01:05,479
that's built on top of wasm Cloud for

23
00:01:05,479 --> 00:01:08,640
managing wasm Cloud distributed

24
00:01:08,640 --> 00:01:11,100
applications

25
00:01:11,100 --> 00:01:13,680
I'm typically the most paranoid person

26
00:01:13,680 --> 00:01:16,320
in the room which I guess

27
00:01:16,320 --> 00:01:18,780
goes hand in hand with being concerned

28
00:01:18,780 --> 00:01:21,320
about security

29
00:01:21,380 --> 00:01:26,159
I'm a big web assembly fan but I'm also

30
00:01:26,159 --> 00:01:27,780
practical so

31
00:01:27,780 --> 00:01:30,119
while I think webassembly solves a ton

32
00:01:30,119 --> 00:01:32,100
of really important problems it doesn't

33
00:01:32,100 --> 00:01:34,820
solve them all

34
00:01:37,140 --> 00:01:39,900
and there's my GitHub address I've got

35
00:01:39,900 --> 00:01:41,400
some other contact Links at the end of

36
00:01:41,400 --> 00:01:43,140
the slides

37
00:01:43,140 --> 00:01:48,020
this is by far my new favorite quote

38
00:01:48,020 --> 00:01:51,899
Runar bjornison the guy who co-created

39
00:01:51,899 --> 00:01:55,079
the Unison programming language uh

40
00:01:55,079 --> 00:01:58,619
posted this and I've been stealing it

41
00:01:58,619 --> 00:02:01,340
from him ever since

42
00:02:03,180 --> 00:02:05,939
so I want to go from

43
00:02:05,939 --> 00:02:08,880
the lowest level webassembly technology

44
00:02:08,880 --> 00:02:11,819
so that's the file itself the virtual

45
00:02:11,819 --> 00:02:14,120
machine and how that enables security

46
00:02:14,120 --> 00:02:17,040
and then I'm going to take a journey

47
00:02:17,040 --> 00:02:20,640
from there to run times and then to

48
00:02:20,640 --> 00:02:23,640
above that level to capability security

49
00:02:23,640 --> 00:02:25,860
and then finally we'll talk about some

50
00:02:25,860 --> 00:02:28,020
distributed system security

51
00:02:28,020 --> 00:02:31,920
and which parts are enabled by

52
00:02:31,920 --> 00:02:33,780
webassembly itself and then which parts

53
00:02:33,780 --> 00:02:36,360
are add-ons enabled by open source

54
00:02:36,360 --> 00:02:38,780
projects

55
00:02:39,959 --> 00:02:43,680
and if you look at my amazing art skills

56
00:02:43,680 --> 00:02:46,500
you'll see that the green stuff is open

57
00:02:46,500 --> 00:02:50,700
source add-ons and the purple is stuff

58
00:02:50,700 --> 00:02:54,619
that's enabled by webassembly on its own

59
00:02:55,080 --> 00:02:57,680
so

60
00:02:59,340 --> 00:03:03,180
there it is the you've seen and probably

61
00:03:03,180 --> 00:03:06,180
heard in Keynotes and some other

62
00:03:06,180 --> 00:03:08,340
sessions how

63
00:03:08,340 --> 00:03:11,099
buffer overflows buffer overruns things

64
00:03:11,099 --> 00:03:13,080
like that are

65
00:03:13,080 --> 00:03:17,280
pretty easy attack vectors and one of my

66
00:03:17,280 --> 00:03:19,680
favorite qualities of webassembly is

67
00:03:19,680 --> 00:03:22,379
that they're simply not possible you

68
00:03:22,379 --> 00:03:24,900
physically cannot buffer over on you

69
00:03:24,900 --> 00:03:27,720
know webassembly module you can't write

70
00:03:27,720 --> 00:03:30,120
code that uses system calls

71
00:03:30,120 --> 00:03:34,140
you can't write code that branches to a

72
00:03:34,140 --> 00:03:36,060
location that wasn't there when the file

73
00:03:36,060 --> 00:03:38,180
loaded to begin with

74
00:03:38,180 --> 00:03:43,860
and in many cases where uh C and C plus

75
00:03:43,860 --> 00:03:46,099
plus would crash with undefined Behavior

76
00:03:46,099 --> 00:03:49,140
webassembly modules will do what's

77
00:03:49,140 --> 00:03:53,700
called a trap and they will fail to run

78
00:03:53,700 --> 00:03:54,959
and

79
00:03:54,959 --> 00:03:57,780
if there's one thing you take away from

80
00:03:57,780 --> 00:04:00,180
this session it would be to click on

81
00:04:00,180 --> 00:04:02,519
that YouTube video

82
00:04:02,519 --> 00:04:03,299
um

83
00:04:03,299 --> 00:04:07,080
it shows a buffer over on exploit in the

84
00:04:07,080 --> 00:04:08,879
original Legend of Zelda game for the

85
00:04:08,879 --> 00:04:10,220
Nintendo

86
00:04:10,220 --> 00:04:12,720
and it's by far one of the most

87
00:04:12,720 --> 00:04:16,560
fascinating exploits I've ever seen so

88
00:04:16,560 --> 00:04:20,040
um if you go and watch that video then I

89
00:04:20,040 --> 00:04:22,079
feel like my work is done here

90
00:04:22,079 --> 00:04:24,900
I'm sorry it's not a shortened URL but I

91
00:04:24,900 --> 00:04:26,280
figured at a security conference

92
00:04:26,280 --> 00:04:29,960
nobody's going to click a shortened URL

93
00:04:31,740 --> 00:04:34,080
as I mentioned the webassembly modules

94
00:04:34,080 --> 00:04:35,100
have

95
00:04:35,100 --> 00:04:38,160
control flow security as well as module

96
00:04:38,160 --> 00:04:40,100
security so

97
00:04:40,100 --> 00:04:43,860
you can't create arbitrary pointers you

98
00:04:43,860 --> 00:04:48,060
can't dereference memory that's invalid

99
00:04:48,060 --> 00:04:48,960
um

100
00:04:48,960 --> 00:04:51,419
there's a number of other things that

101
00:04:51,419 --> 00:04:55,919
are prevented by the simple fact that

102
00:04:55,919 --> 00:04:58,979
you cannot tell a webassembly module to

103
00:04:58,979 --> 00:05:01,560
jump to an arbitrary location you can't

104
00:05:01,560 --> 00:05:03,540
have it read past the end of a buffer

105
00:05:03,540 --> 00:05:06,060
and then treat whatever is beyond that

106
00:05:06,060 --> 00:05:07,639
as code

107
00:05:07,639 --> 00:05:11,100
linear memory and the code being

108
00:05:11,100 --> 00:05:13,919
executed on the stack are two entirely

109
00:05:13,919 --> 00:05:17,639
different things that you cannot

110
00:05:17,639 --> 00:05:20,360
push together

111
00:05:22,380 --> 00:05:23,580
so

112
00:05:23,580 --> 00:05:27,320
let me see if I can find this

113
00:05:30,120 --> 00:05:32,220
is that that uh

114
00:05:32,220 --> 00:05:35,060
can you see that

115
00:05:35,280 --> 00:05:36,300
okay

116
00:05:36,300 --> 00:05:39,120
so I've divided this particular sample

117
00:05:39,120 --> 00:05:41,580
into two highly scientific categories

118
00:05:41,580 --> 00:05:45,060
working and no worky

119
00:05:45,060 --> 00:05:47,900
uh

120
00:05:49,860 --> 00:05:54,539
so the working sample is this is rust in

121
00:05:54,539 --> 00:05:56,419
case you're curious

122
00:05:56,419 --> 00:05:59,759
basically this is an add function and

123
00:05:59,759 --> 00:06:03,180
the no mangle there tells the rust

124
00:06:03,180 --> 00:06:07,100
compiler to export that function

125
00:06:07,139 --> 00:06:10,320
at the Primitive level webassembly can

126
00:06:10,320 --> 00:06:15,060
only exchange numbers with the host and

127
00:06:15,060 --> 00:06:20,039
so anything where you need to exchange

128
00:06:20,039 --> 00:06:21,900
robust data types

129
00:06:21,900 --> 00:06:24,840
at least today you have to figure out

130
00:06:24,840 --> 00:06:26,940
how to do that on your own there are

131
00:06:26,940 --> 00:06:28,500
some standards coming that will

132
00:06:28,500 --> 00:06:31,560
hopefully help make that easier but

133
00:06:31,560 --> 00:06:33,479
uh

134
00:06:33,479 --> 00:06:36,000
that's pretty much how it works so let's

135
00:06:36,000 --> 00:06:40,280
see if I can show what this looks like

136
00:06:49,560 --> 00:06:52,199
so these are all the export functions

137
00:06:52,199 --> 00:06:54,479
from the webassembly module

138
00:06:54,479 --> 00:06:56,160
this is a

139
00:06:56,160 --> 00:06:59,220
it's not actually a webassembly language

140
00:06:59,220 --> 00:07:01,800
it's just a textual representation of

141
00:07:01,800 --> 00:07:04,199
the byte code and so you'll see there's

142
00:07:04,199 --> 00:07:06,600
a couple of them that rust adds for you

143
00:07:06,600 --> 00:07:08,940
but the two that are important are

144
00:07:08,940 --> 00:07:11,039
memory which is the linear memory block

145
00:07:11,039 --> 00:07:13,500
shared by the host and the guest an ad

146
00:07:13,500 --> 00:07:15,240
and that function is the one that we

147
00:07:15,240 --> 00:07:18,120
that we created

148
00:07:18,120 --> 00:07:21,020
and

149
00:07:21,479 --> 00:07:23,340
I don't actually have any tricks up my

150
00:07:23,340 --> 00:07:26,580
sleeve I just I measure my typing speed

151
00:07:26,580 --> 00:07:28,680
in typos per minute so I wanted to make

152
00:07:28,680 --> 00:07:30,300
sure I didn't make you suffer through

153
00:07:30,300 --> 00:07:31,440
that

154
00:07:31,440 --> 00:07:34,500
so you'll see I just added I just called

155
00:07:34,500 --> 00:07:37,860
the add function with four and four

156
00:07:37,860 --> 00:07:42,440
um the wasm time runner

157
00:07:42,440 --> 00:07:44,940
reminded me that that particular call

158
00:07:44,940 --> 00:07:47,460
interface is not currently stable so it

159
00:07:47,460 --> 00:07:48,780
might break

160
00:07:48,780 --> 00:07:53,160
but I got eight and so that's

161
00:07:53,160 --> 00:07:56,940
that's all good so now

162
00:07:56,940 --> 00:08:00,479
let's see what happens if I try and

163
00:08:00,479 --> 00:08:04,680
create a malicious actor

164
00:08:04,680 --> 00:08:06,419
in here

165
00:08:06,419 --> 00:08:10,680
this is also rust but uh and it's no

166
00:08:10,680 --> 00:08:12,360
mangle so I'm going to export in the add

167
00:08:12,360 --> 00:08:14,340
function but here I'm going to attempt

168
00:08:14,340 --> 00:08:18,060
to read a file and write to the console

169
00:08:18,060 --> 00:08:21,419
and then finally just add the number

170
00:08:21,419 --> 00:08:23,220
and

171
00:08:23,220 --> 00:08:25,680
again I'm just running using why some

172
00:08:25,680 --> 00:08:26,940
time to run it

173
00:08:26,940 --> 00:08:29,400
and

174
00:08:29,400 --> 00:08:32,339
you'll see that it trapped

175
00:08:32,339 --> 00:08:33,240
um

176
00:08:33,240 --> 00:08:36,979
it failed to invoke add and you'll see

177
00:08:36,979 --> 00:08:40,740
you will see that unreachable thing

178
00:08:40,740 --> 00:08:41,458
um

179
00:08:41,458 --> 00:08:45,060
an awful lot and generally what it means

180
00:08:45,060 --> 00:08:46,680
is

181
00:08:46,680 --> 00:08:49,160
you've attempted to execute code

182
00:08:49,160 --> 00:08:52,160
that doesn't exist so

183
00:08:52,160 --> 00:08:56,760
in this particular webassembly module

184
00:08:56,760 --> 00:08:59,940
it's not using what's called wazzy so it

185
00:08:59,940 --> 00:09:02,220
doesn't have any instructions for

186
00:09:02,220 --> 00:09:04,740
accessing the file system so when the

187
00:09:04,740 --> 00:09:07,680
rust Linker created that module

188
00:09:07,680 --> 00:09:09,540
you just placed a bunch of unreachable

189
00:09:09,540 --> 00:09:13,980
code on unreachable macros where the

190
00:09:13,980 --> 00:09:16,140
real code should be

191
00:09:16,140 --> 00:09:18,180
so that's the

192
00:09:18,180 --> 00:09:20,640
the basics of

193
00:09:20,640 --> 00:09:24,779
low level module level security

194
00:09:24,779 --> 00:09:26,580
you

195
00:09:26,580 --> 00:09:29,279
we will

196
00:09:29,279 --> 00:09:31,920
share that

197
00:09:31,920 --> 00:09:33,540
all right so the next thing I want to

198
00:09:33,540 --> 00:09:36,899
talk about one level up from the

199
00:09:36,899 --> 00:09:41,060
webassembly module security is

200
00:09:41,220 --> 00:09:43,380
is runtime security

201
00:09:43,380 --> 00:09:44,720
and

202
00:09:44,720 --> 00:09:47,459
every webassembly module requires a

203
00:09:47,459 --> 00:09:49,440
runtime the

204
00:09:49,440 --> 00:09:52,680
regardless of what magic or smoke and

205
00:09:52,680 --> 00:09:54,480
mirror shows you've seen

206
00:09:54,480 --> 00:09:56,880
uh all webassembly modules need a

207
00:09:56,880 --> 00:09:59,760
runtime so whether that's the browser

208
00:09:59,760 --> 00:10:01,459
or

209
00:10:01,459 --> 00:10:06,600
node V8 engine or as you'll see as you

210
00:10:06,600 --> 00:10:08,279
saw at wasm time

211
00:10:08,279 --> 00:10:11,880
so that runtime provides a bunch of

212
00:10:11,880 --> 00:10:12,839
security

213
00:10:12,839 --> 00:10:17,100
uh for webassembly modules

214
00:10:17,100 --> 00:10:21,000
first is that host memory is off limits

215
00:10:21,000 --> 00:10:23,880
no matter what you try and do from

216
00:10:23,880 --> 00:10:27,060
within a webassembly module you cannot

217
00:10:27,060 --> 00:10:29,480
access the host's memory you're

218
00:10:29,480 --> 00:10:32,339
basically given an isolated sandbox

219
00:10:32,339 --> 00:10:35,760
playground Vector of bytes and that's it

220
00:10:35,760 --> 00:10:38,820
that's all you can use the host has its

221
00:10:38,820 --> 00:10:42,300
own memory isolated elsewhere

222
00:10:42,300 --> 00:10:45,540
the host supplies the implementation for

223
00:10:45,540 --> 00:10:47,700
Imports you saw that I exported a

224
00:10:47,700 --> 00:10:50,700
function called add but if I needed to

225
00:10:50,700 --> 00:10:53,220
import something like the ability to

226
00:10:53,220 --> 00:10:56,940
access a file it's up to the host to

227
00:10:56,940 --> 00:10:59,640
supply the implementation for that and

228
00:10:59,640 --> 00:11:01,740
what that really means is the host is

229
00:11:01,740 --> 00:11:06,000
now has the right of last refusal for

230
00:11:06,000 --> 00:11:08,399
all operations that that module needs

231
00:11:08,399 --> 00:11:11,959
that wants to execute

232
00:11:13,079 --> 00:11:16,980
there are anti-forgery checks so

233
00:11:16,980 --> 00:11:21,300
depending on the runtime you'll see a

234
00:11:21,300 --> 00:11:22,980
whole bunch of security that prevents

235
00:11:22,980 --> 00:11:24,899
the module itself from being tampered

236
00:11:24,899 --> 00:11:28,320
with at runtime from outside

237
00:11:28,320 --> 00:11:29,640
and

238
00:11:29,640 --> 00:11:32,180
some runtimes will

239
00:11:32,180 --> 00:11:34,920
compile the webassembly module into

240
00:11:34,920 --> 00:11:37,980
machine code when it starts up and

241
00:11:37,980 --> 00:11:42,180
that's also a configurable option up to

242
00:11:42,180 --> 00:11:46,939
the host or the runtime

243
00:11:48,140 --> 00:11:49,680
so

244
00:11:49,680 --> 00:11:52,860
there's another standard within the

245
00:11:52,860 --> 00:11:55,140
webassembly community called Wazi

246
00:11:55,140 --> 00:11:57,120
and it stands for the web assembly

247
00:11:57,120 --> 00:11:59,339
systems interface and

248
00:11:59,339 --> 00:12:02,940
its original design was to close that

249
00:12:02,940 --> 00:12:05,940
Gap and give webassembly modules some

250
00:12:05,940 --> 00:12:10,339
access to system resources

251
00:12:10,980 --> 00:12:14,279
there are a lot of blog posts and even

252
00:12:14,279 --> 00:12:16,079
documentation that

253
00:12:16,079 --> 00:12:18,120
kind of steer you toward the idea that

254
00:12:18,120 --> 00:12:20,100
Wazi is basically a webassembly version

255
00:12:20,100 --> 00:12:21,420
of posix

256
00:12:21,420 --> 00:12:24,740
that is not the case and

257
00:12:24,740 --> 00:12:26,880
thinking that can actually get you into

258
00:12:26,880 --> 00:12:29,300
some trouble

259
00:12:29,959 --> 00:12:34,019
like I said the YZ modules are allowed

260
00:12:34,019 --> 00:12:37,079
to do certain types of i o but again the

261
00:12:37,079 --> 00:12:40,440
host gets to refuse or Grant access to

262
00:12:40,440 --> 00:12:42,680
those

263
00:12:43,260 --> 00:12:46,260
if I want a web assembly module that's

264
00:12:46,260 --> 00:12:49,500
compiled to wazzy to read a file or

265
00:12:49,500 --> 00:12:54,720
write a file or do any kind of disk i o

266
00:12:54,720 --> 00:12:57,540
the runtime itself

267
00:12:57,540 --> 00:13:00,980
the runtime itself needs to

268
00:13:00,980 --> 00:13:04,200
pre-approve that file so when I start it

269
00:13:04,200 --> 00:13:07,260
wasn't a web assembly runtime I have to

270
00:13:07,260 --> 00:13:10,260
tell it this directory or these files

271
00:13:10,260 --> 00:13:13,440
are available to the webassembly module

272
00:13:13,440 --> 00:13:15,660
and if I don't tell it that the

273
00:13:15,660 --> 00:13:18,000
webassembly module will not be able to

274
00:13:18,000 --> 00:13:19,680
access it

275
00:13:19,680 --> 00:13:22,980
so with that I'm going to take a look at

276
00:13:22,980 --> 00:13:25,560
a

277
00:13:25,560 --> 00:13:28,740
uh yazzy demo and again the categories

278
00:13:28,740 --> 00:13:31,620
here are worky and no worky so we'll

279
00:13:31,620 --> 00:13:34,820
take a look at the work E1 first

280
00:13:37,320 --> 00:13:39,540
and you'll see that there is a print

281
00:13:39,540 --> 00:13:41,160
line statement here

282
00:13:41,160 --> 00:13:47,220
and in a wasm32 on regular wasm32 on

283
00:13:47,220 --> 00:13:48,360
known Target

284
00:13:48,360 --> 00:13:51,899
you would be unable to do that you don't

285
00:13:51,899 --> 00:13:54,060
have access to standard out

286
00:13:54,060 --> 00:13:58,740
so but since I'm going to use YZ

287
00:13:58,740 --> 00:14:03,800
I do have that act that ability and

288
00:14:03,800 --> 00:14:06,360
you'll see that the target the rest

289
00:14:06,360 --> 00:14:08,880
Target here is wasn't 32 why is he

290
00:14:08,880 --> 00:14:12,060
that's crucial if I had left that as

291
00:14:12,060 --> 00:14:15,300
wasm32 unknown I wouldn't have been able

292
00:14:15,300 --> 00:14:17,339
to run this so

293
00:14:17,339 --> 00:14:19,500
here you can see that my webassembly

294
00:14:19,500 --> 00:14:22,620
module now wrote to standard out

295
00:14:22,620 --> 00:14:27,360
and still performed the math

296
00:14:27,360 --> 00:14:32,600
so now let's go to networking and

297
00:14:33,480 --> 00:14:36,300
see what a malicious actor might try and

298
00:14:36,300 --> 00:14:38,100
do

299
00:14:38,100 --> 00:14:41,160
so here it looks pretty much the same as

300
00:14:41,160 --> 00:14:43,800
the other rust code except it's reading

301
00:14:43,800 --> 00:14:49,019
from a file called food.text and I'm

302
00:14:49,019 --> 00:14:51,199
going to print the files metadata here

303
00:14:51,199 --> 00:14:55,019
and then add some more you know highly

304
00:14:55,019 --> 00:14:58,760
efficient debug statements right there

305
00:15:00,180 --> 00:15:03,600
and again the Run command is the same

306
00:15:03,600 --> 00:15:07,320
it's just executing against a wazy

307
00:15:07,320 --> 00:15:09,500
Target

308
00:15:10,260 --> 00:15:13,139
so now again remember the unreachable

309
00:15:13,139 --> 00:15:16,040
that I mentioned before

310
00:15:16,440 --> 00:15:20,100
it failed to invoke add and there's also

311
00:15:20,100 --> 00:15:21,899
a big panic

312
00:15:21,899 --> 00:15:25,320
and uh

313
00:15:25,320 --> 00:15:29,880
this is the important bit which is that

314
00:15:29,880 --> 00:15:31,680
it failed to find a pre-opened file

315
00:15:31,680 --> 00:15:34,139
descriptor through which food.text could

316
00:15:34,139 --> 00:15:36,000
be open

317
00:15:36,000 --> 00:15:36,779
um

318
00:15:36,779 --> 00:15:38,579
I don't want to go into too much detail

319
00:15:38,579 --> 00:15:43,880
but the web the wazzy API allows for

320
00:15:43,880 --> 00:15:47,820
descriptors to be accessed and read read

321
00:15:47,820 --> 00:15:51,600
from and written to and

322
00:15:51,600 --> 00:15:54,120
but they don't have the ability to

323
00:15:54,120 --> 00:15:57,240
create their own so the host has to

324
00:15:57,240 --> 00:15:59,820
pre-create a file descriptor

325
00:15:59,820 --> 00:16:02,820
in order for the Wazi file the wazzy

326
00:16:02,820 --> 00:16:06,860
module to be able to read from that file

327
00:16:07,380 --> 00:16:10,040
foreign

328
00:16:18,199 --> 00:16:21,420
we're going to switch from

329
00:16:21,420 --> 00:16:25,380
the the regular webassembly standards to

330
00:16:25,380 --> 00:16:28,860
uh wasm Cloud the cncf open source

331
00:16:28,860 --> 00:16:29,699
project

332
00:16:29,699 --> 00:16:32,279
and that sits on top of why some time

333
00:16:32,279 --> 00:16:34,560
and provides

334
00:16:34,560 --> 00:16:37,220
a number of extra features

335
00:16:37,220 --> 00:16:40,199
the probably the most important of which

336
00:16:40,199 --> 00:16:42,839
is capability security

337
00:16:42,839 --> 00:16:48,899
so I mentioned that for a yazzy module

338
00:16:48,899 --> 00:16:51,959
you might get a descriptor and you can

339
00:16:51,959 --> 00:16:55,440
read from it and write to it but

340
00:16:55,440 --> 00:16:58,740
you don't really know why you have no

341
00:16:58,740 --> 00:17:00,060
one really knows why you have that

342
00:17:00,060 --> 00:17:01,399
descriptor

343
00:17:01,399 --> 00:17:05,880
when you build a regular microservice a

344
00:17:05,880 --> 00:17:07,799
regular application running somewhere

345
00:17:07,799 --> 00:17:11,000
without webassembly

346
00:17:11,040 --> 00:17:14,160
your security policy might grant that

347
00:17:14,160 --> 00:17:17,579
thing access to sockets but what it

348
00:17:17,579 --> 00:17:22,280
really ever does is allow you to declare

349
00:17:22,280 --> 00:17:26,939
why it needs that socket so

350
00:17:26,939 --> 00:17:30,660
the wasm cloud runtime

351
00:17:30,660 --> 00:17:33,200
lets you

352
00:17:33,200 --> 00:17:36,120
sign your webassembly module so that you

353
00:17:36,120 --> 00:17:38,880
can declare that one of them needs an

354
00:17:38,880 --> 00:17:42,120
HTTP server or a message broker or a

355
00:17:42,120 --> 00:17:45,120
data store and the Wiseman Cloud runtime

356
00:17:45,120 --> 00:17:47,840
is responsible for

357
00:17:47,840 --> 00:17:50,039
vetting that you're allowed to do what

358
00:17:50,039 --> 00:17:52,919
you claim you're allowed to do

359
00:17:52,919 --> 00:17:54,559
and then

360
00:17:54,559 --> 00:17:57,320
actually stitching together the

361
00:17:57,320 --> 00:17:59,460
webassembly module with the capabilities

362
00:17:59,460 --> 00:18:01,880
that it needs

363
00:18:01,880 --> 00:18:05,520
so in this rust code here you can see

364
00:18:05,520 --> 00:18:06,299
that

365
00:18:06,299 --> 00:18:10,200
there is a key Value Store I've called

366
00:18:10,200 --> 00:18:11,940
increment on the key

367
00:18:11,940 --> 00:18:16,020
and I've sent a request on a message

368
00:18:16,020 --> 00:18:19,860
topic called security.day

369
00:18:20,460 --> 00:18:23,640
but what's missing there is

370
00:18:23,640 --> 00:18:24,720
uh

371
00:18:24,720 --> 00:18:27,600
pretty much everything so there's no

372
00:18:27,600 --> 00:18:29,820
connection strings there's no secrets

373
00:18:29,820 --> 00:18:33,020
there's no urls

374
00:18:33,020 --> 00:18:34,740
and

375
00:18:34,740 --> 00:18:37,020
um more importantly you don't even know

376
00:18:37,020 --> 00:18:40,160
which key value store you're talking to

377
00:18:40,160 --> 00:18:42,600
nor do you know which message broker

378
00:18:42,600 --> 00:18:46,200
you're talking to so at runtime

379
00:18:46,200 --> 00:18:49,799
when you are in your inner developer

380
00:18:49,799 --> 00:18:51,780
loop on your laptop you could use a

381
00:18:51,780 --> 00:18:53,460
whole bunch of in-memory things

382
00:18:53,460 --> 00:18:56,880
but when you're in development you could

383
00:18:56,880 --> 00:18:59,220
use one key value store and then in

384
00:18:59,220 --> 00:19:00,780
production you could use redis or

385
00:19:00,780 --> 00:19:05,240
Cassandra or whatever and

386
00:19:05,460 --> 00:19:08,100
you don't have to recompile or redeploy

387
00:19:08,100 --> 00:19:09,240
your code

388
00:19:09,240 --> 00:19:12,299
and that is specifically designed to

389
00:19:12,299 --> 00:19:13,860
address things like the log for J

390
00:19:13,860 --> 00:19:16,020
vulnerability where

391
00:19:16,020 --> 00:19:18,000
in

392
00:19:18,000 --> 00:19:21,980
current development models I have to

393
00:19:21,980 --> 00:19:25,980
compile all of my dependencies into my

394
00:19:25,980 --> 00:19:27,780
deployment unit so

395
00:19:27,780 --> 00:19:30,600
my logger the the choice I've made for

396
00:19:30,600 --> 00:19:32,520
how I log

397
00:19:32,520 --> 00:19:34,500
that's built into

398
00:19:34,500 --> 00:19:36,600
this thing that I'm deploying even

399
00:19:36,600 --> 00:19:39,240
though you know I might only have four

400
00:19:39,240 --> 00:19:41,280
lines of business business logic in

401
00:19:41,280 --> 00:19:42,179
there

402
00:19:42,179 --> 00:19:46,440
and so wasmcloud is designed to let me

403
00:19:46,440 --> 00:19:48,480
strip away all that right pure business

404
00:19:48,480 --> 00:19:52,860
logic and also be confident that these

405
00:19:52,860 --> 00:19:55,679
modules are secure

406
00:19:55,679 --> 00:19:59,880
so here's another example where it

407
00:19:59,880 --> 00:20:02,760
receives an HTTP request and returns an

408
00:20:02,760 --> 00:20:06,360
HTTP response but nowhere in there does

409
00:20:06,360 --> 00:20:09,500
it say what port it's running on or

410
00:20:09,500 --> 00:20:12,840
even if it's running in under a unit

411
00:20:12,840 --> 00:20:15,139
test

412
00:20:15,740 --> 00:20:19,140
so why isn't cloudy embeds Json web

413
00:20:19,140 --> 00:20:21,720
tokens inside the webassembly module so

414
00:20:21,720 --> 00:20:23,000
that we can

415
00:20:23,000 --> 00:20:26,340
verify them in isolation and verify them

416
00:20:26,340 --> 00:20:27,320
offline

417
00:20:27,320 --> 00:20:29,640
one of the big things that I wanted to

418
00:20:29,640 --> 00:20:32,100
be able to do was take a look at a

419
00:20:32,100 --> 00:20:34,980
webassembly module and decide whether I

420
00:20:34,980 --> 00:20:37,200
should let it do what it wants to do

421
00:20:37,200 --> 00:20:38,820
without having to consult a central

422
00:20:38,820 --> 00:20:40,080
Authority

423
00:20:40,080 --> 00:20:43,559
you know if I need to talk to Docker

424
00:20:43,559 --> 00:20:47,178
notary or something else then

425
00:20:47,720 --> 00:20:51,960
what is the how do I Define my security

426
00:20:51,960 --> 00:20:54,120
Logic for when I can't contact the

427
00:20:54,120 --> 00:20:58,919
authority and so this one allows me to

428
00:20:58,919 --> 00:21:02,520
access that stuff without

429
00:21:02,520 --> 00:21:04,140
potentially without even having network

430
00:21:04,140 --> 00:21:06,500
access

431
00:21:07,200 --> 00:21:08,940
so

432
00:21:08,940 --> 00:21:11,539
this is

433
00:21:16,200 --> 00:21:20,340
all right so again I have uh working in

434
00:21:20,340 --> 00:21:21,960
no workie

435
00:21:21,960 --> 00:21:27,860
if I inspect the claims in

436
00:21:31,200 --> 00:21:33,480
this one you'll see

437
00:21:33,480 --> 00:21:36,960
the account this is the issuer the

438
00:21:36,960 --> 00:21:40,380
module that's essentially the subject

439
00:21:40,380 --> 00:21:43,020
um each one of these webassembly modules

440
00:21:43,020 --> 00:21:47,460
is issued cryptographically

441
00:21:47,460 --> 00:21:49,380
and you can see that this one is allowed

442
00:21:49,380 --> 00:21:52,500
to use the HTTP server and the key Value

443
00:21:52,500 --> 00:21:54,919
Store

444
00:21:54,980 --> 00:21:57,900
and if I were to look at

445
00:21:57,900 --> 00:22:00,320
the networking

446
00:22:00,320 --> 00:22:03,780
you'll see that it has HTTP server but

447
00:22:03,780 --> 00:22:05,460
it doesn't have the key Value Store

448
00:22:05,460 --> 00:22:08,820
capability so at runtime

449
00:22:08,820 --> 00:22:12,059
the wasm cloud host

450
00:22:12,059 --> 00:22:13,580
will

451
00:22:13,580 --> 00:22:16,559
reject any attempt by this module to

452
00:22:16,559 --> 00:22:20,360
access any key Value Store

453
00:22:20,720 --> 00:22:24,980
and let's see if I can

454
00:22:27,000 --> 00:22:30,600
I can remember exactly how to do this

455
00:22:30,600 --> 00:22:32,600
um

456
00:22:45,360 --> 00:22:48,000
sorry I

457
00:22:48,000 --> 00:22:53,720
uh it's not wrong it's JWT only okay

458
00:22:58,380 --> 00:23:01,159
there we go

459
00:23:10,440 --> 00:23:12,480
so you can see

460
00:23:12,480 --> 00:23:16,380
when this was issued which was Monday

461
00:23:16,380 --> 00:23:18,679
January 30th

462
00:23:18,679 --> 00:23:20,700
the issuer

463
00:23:20,700 --> 00:23:22,940
and the subject

464
00:23:22,940 --> 00:23:26,299
these are

465
00:23:26,299 --> 00:23:31,020
these are Ed 25519 keys they just have

466
00:23:31,020 --> 00:23:33,840
they've been encoded in a way that makes

467
00:23:33,840 --> 00:23:36,500
it so that they're double clickable and

468
00:23:36,500 --> 00:23:40,380
I can tell from the first character the

469
00:23:40,380 --> 00:23:42,419
purpose of the key so the first

470
00:23:42,419 --> 00:23:44,280
character here is a means it's an

471
00:23:44,280 --> 00:23:45,299
account key

472
00:23:45,299 --> 00:23:48,299
first character m means it's a module

473
00:23:48,299 --> 00:23:49,380
key

474
00:23:49,380 --> 00:23:51,419
and

475
00:23:51,419 --> 00:23:54,720
I'm keeping the in the hash of the

476
00:23:54,720 --> 00:23:56,820
module so that I can verify whether it's

477
00:23:56,820 --> 00:23:58,200
been tampered with

478
00:23:58,200 --> 00:24:01,080
and here's the list of capabilities that

479
00:24:01,080 --> 00:24:03,860
it's allowed to use

480
00:24:13,740 --> 00:24:16,559
so the next thing that I want to talk

481
00:24:16,559 --> 00:24:19,100
about is cluster security so

482
00:24:19,100 --> 00:24:23,039
uh when running everything on a single

483
00:24:23,039 --> 00:24:25,880
machine offline

484
00:24:25,880 --> 00:24:28,980
your security risk is much much smaller

485
00:24:28,980 --> 00:24:30,179
than when you're running a big

486
00:24:30,179 --> 00:24:33,539
distributed system in production

487
00:24:33,539 --> 00:24:37,640
and wasmcloud allows you to form

488
00:24:37,640 --> 00:24:41,520
self-healing clusters of wasm cloud

489
00:24:41,520 --> 00:24:43,860
hosts that are running your modules and

490
00:24:43,860 --> 00:24:46,679
so because these modules are so small

491
00:24:46,679 --> 00:24:50,820
you can tell it to run a module on one

492
00:24:50,820 --> 00:24:52,500
host you can move it from one host to

493
00:24:52,500 --> 00:24:55,080
another you can scale it from one

494
00:24:55,080 --> 00:24:56,900
running instance to 100

495
00:24:56,900 --> 00:24:59,159
all of that is done through the

496
00:24:59,159 --> 00:25:02,340
distributed systems functionality

497
00:25:02,340 --> 00:25:05,120
so

498
00:25:05,120 --> 00:25:09,480
in a wasmcloud cluster every host has a

499
00:25:09,480 --> 00:25:10,919
key pair

500
00:25:10,919 --> 00:25:14,580
and each host only trusts a certain set

501
00:25:14,580 --> 00:25:19,080
of public keys so for any given wasm

502
00:25:19,080 --> 00:25:20,820
Cloud cluster

503
00:25:20,820 --> 00:25:24,360
the hosts have essentially a trust list

504
00:25:24,360 --> 00:25:28,799
of which other hosts they

505
00:25:28,799 --> 00:25:32,400
um they will allow to communicate with

506
00:25:32,400 --> 00:25:35,580
and so a an invocation whether it's an

507
00:25:35,580 --> 00:25:37,620
actor called whether it's a webassembly

508
00:25:37,620 --> 00:25:40,980
module calling another one or uh whether

509
00:25:40,980 --> 00:25:43,559
it's a module calling the key Value

510
00:25:43,559 --> 00:25:45,659
Store

511
00:25:45,659 --> 00:25:49,500
those invocations are

512
00:25:49,500 --> 00:25:52,140
uh also signed and each one of those

513
00:25:52,140 --> 00:25:55,820
also contains a Json web token and so

514
00:25:55,820 --> 00:25:59,220
anytime a wasm cloud host receives a

515
00:25:59,220 --> 00:26:01,260
request to execute something

516
00:26:01,260 --> 00:26:03,240
from a remote entity

517
00:26:03,240 --> 00:26:06,179
it can verify that it came from a

518
00:26:06,179 --> 00:26:07,919
well-known host that it hasn't been

519
00:26:07,919 --> 00:26:09,600
tampered with that the host is one of

520
00:26:09,600 --> 00:26:11,960
the ones that's allowed to communicate

521
00:26:11,960 --> 00:26:15,600
and you can even add extra policies so

522
00:26:15,600 --> 00:26:19,399
that you can verify that

523
00:26:19,860 --> 00:26:22,740
certain issuers are allowed to exist or

524
00:26:22,740 --> 00:26:24,419
allowed to communicate but other ones

525
00:26:24,419 --> 00:26:25,380
aren't

526
00:26:25,380 --> 00:26:27,539
that comes in pretty handy making when

527
00:26:27,539 --> 00:26:30,000
you want to set a policy that'll that

528
00:26:30,000 --> 00:26:32,840
forces you to

529
00:26:32,840 --> 00:26:34,940
use different

530
00:26:34,940 --> 00:26:37,740
signature identities in Devon prod so

531
00:26:37,740 --> 00:26:39,600
you don't accidentally deploy

532
00:26:39,600 --> 00:26:44,899
something destined for Dev to production

533
00:26:46,440 --> 00:26:49,020
and sorry I kind of went through a

534
00:26:49,020 --> 00:26:53,658
little bit fast on that one but uh

535
00:26:54,020 --> 00:26:56,580
if you have any questions feel free to

536
00:26:56,580 --> 00:27:00,240
ask kind of covered a lot so

537
00:27:00,240 --> 00:27:00,900
um

538
00:27:00,900 --> 00:27:02,159
more than having to answer questions

539
00:27:02,159 --> 00:27:05,659
about plasm Cloud security webassembly

540
00:27:05,659 --> 00:27:09,299
and I believe that QR code is for

541
00:27:09,299 --> 00:27:12,260
session feedback

542
00:27:12,720 --> 00:27:14,900
foreign

543
00:27:28,039 --> 00:27:31,860
Cloud can run anywhere you can spawn the

544
00:27:31,860 --> 00:27:33,059
host process

545
00:27:33,059 --> 00:27:36,360
so you could run it as a you can run

546
00:27:36,360 --> 00:27:40,260
that host as a in a as a JavaScript host

547
00:27:40,260 --> 00:27:42,140
inside a browser tab

548
00:27:42,140 --> 00:27:45,659
we have an Elixir OTP host that we use

549
00:27:45,659 --> 00:27:48,840
for the cloud backend there are smaller

550
00:27:48,840 --> 00:27:51,779
hosts that we're planning on building

551
00:27:51,779 --> 00:27:54,419
that are you know targeting you know

552
00:27:54,419 --> 00:27:57,840
like esp32 devices things like that our

553
00:27:57,840 --> 00:28:00,960
host runs on Raspberry Pi's one of my

554
00:28:00,960 --> 00:28:03,779
favorite demos is

555
00:28:03,779 --> 00:28:06,720
one of my colleagues uh brings up the

556
00:28:06,720 --> 00:28:09,240
Weisman Cloud host on a Raspberry Pi

557
00:28:09,240 --> 00:28:12,000
and

558
00:28:12,000 --> 00:28:15,140
you can see it

559
00:28:17,039 --> 00:28:18,539
uh

560
00:28:18,539 --> 00:28:21,620
we'll see if this actually

561
00:28:32,940 --> 00:28:37,760
note to self Wi-Fi is low

562
00:28:38,299 --> 00:28:41,340
and also unreliable

563
00:28:41,340 --> 00:28:43,080
anyway

564
00:28:43,080 --> 00:28:44,000
um

565
00:28:44,000 --> 00:28:47,220
when he starts the uh

566
00:28:47,220 --> 00:28:50,100
the host running on

567
00:28:50,100 --> 00:28:52,919
the Raspberry Pi you can see it show up

568
00:28:52,919 --> 00:28:57,320
in the network and you can

569
00:28:57,320 --> 00:28:59,700
basically treat it like an empty vessel

570
00:28:59,700 --> 00:29:01,799
you can send compute down to that

571
00:29:01,799 --> 00:29:04,140
Raspberry Pi

572
00:29:04,140 --> 00:29:07,140
so it'll run inside kubernetes it'll run

573
00:29:07,140 --> 00:29:09,380
inside

574
00:29:09,419 --> 00:29:12,000
anybody else's Cloud it'll run in a

575
00:29:12,000 --> 00:29:15,480
browser tab basically runs wherever you

576
00:29:15,480 --> 00:29:18,919
want to start that runtime

577
00:29:23,580 --> 00:29:26,178
yeah

578
00:29:26,340 --> 00:29:28,340
so if you there are a number of

579
00:29:28,340 --> 00:29:31,559
performance ones if you go to the our

580
00:29:31,559 --> 00:29:33,559
website you'll see

581
00:29:33,559 --> 00:29:37,260
some specific measurements but

582
00:29:37,260 --> 00:29:38,659
a

583
00:29:38,659 --> 00:29:41,100
webassembly module that has business

584
00:29:41,100 --> 00:29:42,740
logic in it

585
00:29:42,740 --> 00:29:46,440
that was built using rust

586
00:29:46,440 --> 00:29:50,700
can be to 300K in size

587
00:29:50,700 --> 00:29:54,419
or smaller and so when you think about

588
00:29:54,419 --> 00:29:57,620
like the startup cost for a particular

589
00:29:57,620 --> 00:30:00,720
piece of compute you're not starting up

590
00:30:00,720 --> 00:30:02,520
a giant Docker image you're not starting

591
00:30:02,520 --> 00:30:06,299
up a one gig jvm so there are some

592
00:30:06,299 --> 00:30:09,000
startup advantages there are scaling

593
00:30:09,000 --> 00:30:12,360
advantages so I can take that one module

594
00:30:12,360 --> 00:30:14,580
and run a thousand copies of it across

595
00:30:14,580 --> 00:30:17,940
10 hosts and now I'm I'm automatically

596
00:30:17,940 --> 00:30:21,320
spreading the load across those

597
00:30:25,080 --> 00:30:27,299
any other questions

598
00:30:27,299 --> 00:30:29,840
yeah

599
00:30:42,020 --> 00:30:45,960
yes so the capabilities are

600
00:30:45,960 --> 00:30:48,679
embedded inside the file itself

601
00:30:48,679 --> 00:30:53,039
if I were to I don't have a

602
00:30:53,039 --> 00:30:56,940
a decent tool to explain to show the the

603
00:30:56,940 --> 00:30:58,980
Explorer of it but

604
00:30:58,980 --> 00:31:02,880
wash is the wise and Cloud CLI

605
00:31:02,880 --> 00:31:05,760
and you can use that to get information

606
00:31:05,760 --> 00:31:10,380
on what's inside that module so if I

607
00:31:10,380 --> 00:31:13,140
don't want the JWT and I want the user

608
00:31:13,140 --> 00:31:14,760
friendly information this is what I get

609
00:31:14,760 --> 00:31:19,440
and you'll see that you know there's

610
00:31:19,440 --> 00:31:22,200
it has all the usual

611
00:31:22,200 --> 00:31:25,320
benefits of a Json web token like valid

612
00:31:25,320 --> 00:31:28,559
before date and expiration and so on

613
00:31:28,559 --> 00:31:31,340
then

614
00:31:31,500 --> 00:31:34,940
uh wash will do it

615
00:31:44,880 --> 00:31:46,799
yeah

616
00:31:46,799 --> 00:31:49,200
if you're using one of our templates to

617
00:31:49,200 --> 00:31:50,640
build one of these modules you can just

618
00:31:50,640 --> 00:31:52,020
type wash build

619
00:31:52,020 --> 00:31:54,179
and it automatically signs it with the

620
00:31:54,179 --> 00:31:55,799
information in the toml file that's

621
00:31:55,799 --> 00:31:58,100
there

622
00:32:01,260 --> 00:32:05,520
I think I saw one other hand yeah

623
00:32:13,260 --> 00:32:15,919
do that

624
00:32:17,700 --> 00:32:19,260
um

625
00:32:19,260 --> 00:32:23,520
so it is in general we tend to prefer

626
00:32:23,520 --> 00:32:27,059
the let it crash methodology so

627
00:32:27,059 --> 00:32:30,779
if that actor tries to do something that

628
00:32:30,779 --> 00:32:32,059
traps

629
00:32:32,059 --> 00:32:34,740
when it hits that trap we're just going

630
00:32:34,740 --> 00:32:37,320
to dispose of the actor and then bring

631
00:32:37,320 --> 00:32:40,260
another another one back because they're

632
00:32:40,260 --> 00:32:42,899
so tiny and they're already sitting and

633
00:32:42,899 --> 00:32:44,460
the bites are already sitting in memory

634
00:32:44,460 --> 00:32:47,700
it costs us you know a few microseconds

635
00:32:47,700 --> 00:32:50,700
to bring it back after death

636
00:32:50,700 --> 00:32:52,140
um

637
00:32:52,140 --> 00:32:53,720
and then

638
00:32:53,720 --> 00:32:56,640
an attempt to use a capability that it's

639
00:32:56,640 --> 00:32:58,679
not allowed to use that doesn't actually

640
00:32:58,679 --> 00:33:01,020
crash the actor we just reject the call

641
00:33:01,020 --> 00:33:04,700
and log the error message

642
00:33:09,779 --> 00:33:12,559
any more questions

643
00:33:13,799 --> 00:33:16,820
great thanks very much

