1
00:00:00,000 --> 00:00:02,639
I'm Zach I'm a research scientist at

2
00:00:02,639 --> 00:00:05,160
chain guard this is Marina hi I'm a PhD

3
00:00:05,160 --> 00:00:06,540
can

4
00:00:06,540 --> 00:00:09,059
on and today we are here to rant about

5
00:00:09,059 --> 00:00:12,360
why not all that's signed is secure and

6
00:00:12,360 --> 00:00:14,400
so the subtitle of this talk is verify

7
00:00:14,400 --> 00:00:16,020
the right way with Tuff and zinc store

8
00:00:16,020 --> 00:00:17,580
so we're going to talk about some cool

9
00:00:17,580 --> 00:00:19,619
existing Technologies we're going to

10
00:00:19,619 --> 00:00:21,240
talk about how in theory they can be

11
00:00:21,240 --> 00:00:22,619
used together really nicely and then

12
00:00:22,619 --> 00:00:24,539
we're going to ask you all in the

13
00:00:24,539 --> 00:00:26,340
audience to help make that integration

14
00:00:26,340 --> 00:00:28,980
nice and smooth and easy to adopt for

15
00:00:28,980 --> 00:00:30,480
everyone

16
00:00:30,480 --> 00:00:32,480
um

17
00:00:32,640 --> 00:00:34,200
so the problem that we're dealing with

18
00:00:34,200 --> 00:00:36,239
is that um

19
00:00:36,239 --> 00:00:37,920
people love to sign things people love

20
00:00:37,920 --> 00:00:39,540
to talk about once you've signed things

21
00:00:39,540 --> 00:00:41,820
okay they're secure right

22
00:00:41,820 --> 00:00:44,700
um and the the short answer you might be

23
00:00:44,700 --> 00:00:46,260
able to infer from the fact that I

24
00:00:46,260 --> 00:00:47,940
phrased this as a question no I don't

25
00:00:47,940 --> 00:00:49,620
believe that necessarily just because

26
00:00:49,620 --> 00:00:52,680
something is signed it is secure and in

27
00:00:52,680 --> 00:00:54,660
particular signatures are only going to

28
00:00:54,660 --> 00:00:56,699
be helpful when you verify them

29
00:00:56,699 --> 00:00:58,800
correctly what correctly means is going

30
00:00:58,800 --> 00:01:01,260
to totally depend on your use case and

31
00:01:01,260 --> 00:01:02,640
so we're gonna we're gonna work through

32
00:01:02,640 --> 00:01:05,939
a couple of different use cases but like

33
00:01:05,939 --> 00:01:08,280
one really obvious example of an

34
00:01:08,280 --> 00:01:10,080
anti-pattern that I have seen in the

35
00:01:10,080 --> 00:01:12,900
wild is people verify that something is

36
00:01:12,900 --> 00:01:15,600
signed but not to check at all who

37
00:01:15,600 --> 00:01:18,119
signed it and then you can imagine how

38
00:01:18,119 --> 00:01:20,820
that could go poorly

39
00:01:20,820 --> 00:01:21,900
um so what are we going to talk about

40
00:01:21,900 --> 00:01:24,900
today to actually actually fix that we

41
00:01:24,900 --> 00:01:26,820
want to enable sort of flexible and

42
00:01:26,820 --> 00:01:29,580
smart policy enforcement right policy is

43
00:01:29,580 --> 00:01:32,580
how you check those signatures and when

44
00:01:32,580 --> 00:01:34,080
you check those signatures correctly

45
00:01:34,080 --> 00:01:35,700
you're going to get a lot of value out

46
00:01:35,700 --> 00:01:37,920
of that so we say flexible because

47
00:01:37,920 --> 00:01:40,079
different settings have different needs

48
00:01:40,079 --> 00:01:42,000
you're going to check the signatures on

49
00:01:42,000 --> 00:01:43,920
something you pull from an open source

50
00:01:43,920 --> 00:01:46,200
package repository in a different manner

51
00:01:46,200 --> 00:01:48,360
than you would if you're you know a

52
00:01:48,360 --> 00:01:50,180
government agency and you're checking

53
00:01:50,180 --> 00:01:52,320
signatures on internally developed

54
00:01:52,320 --> 00:01:53,880
software right different parties are

55
00:01:53,880 --> 00:01:55,920
signing those uh the way you figure out

56
00:01:55,920 --> 00:01:57,420
who's supposed to be signing what is

57
00:01:57,420 --> 00:01:59,820
going to be different but we're going to

58
00:01:59,820 --> 00:02:02,520
use existing Secure Solutions that have

59
00:02:02,520 --> 00:02:04,380
kind of worked all the way through all

60
00:02:04,380 --> 00:02:06,540
the Kinks they're going to protect you

61
00:02:06,540 --> 00:02:09,660
against sorts of attacks that maybe you

62
00:02:09,660 --> 00:02:11,640
didn't even know were going to be a

63
00:02:11,640 --> 00:02:12,780
problem

64
00:02:12,780 --> 00:02:14,819
and so by using these off-the-shelf

65
00:02:14,819 --> 00:02:16,920
Solutions you're going to get protection

66
00:02:16,920 --> 00:02:20,040
in a way that that you know something

67
00:02:20,040 --> 00:02:22,260
cobbled together without that theory is

68
00:02:22,260 --> 00:02:24,180
is going to lack and then we're going to

69
00:02:24,180 --> 00:02:25,800
kind of kind of work through a couple of

70
00:02:25,800 --> 00:02:27,540
different examples uh we're going to

71
00:02:27,540 --> 00:02:29,040
work through sort of the open source

72
00:02:29,040 --> 00:02:30,840
package repository setting how are you

73
00:02:30,840 --> 00:02:32,400
signing in that environment especially

74
00:02:32,400 --> 00:02:34,800
if the signatures are coming from you

75
00:02:34,800 --> 00:02:36,540
know people all around the world who

76
00:02:36,540 --> 00:02:37,980
maybe you're not going to be able to

77
00:02:37,980 --> 00:02:40,560
ship them all Yuba keys and we're going

78
00:02:40,560 --> 00:02:41,879
to talk about internal container

79
00:02:41,879 --> 00:02:44,400
Registries inside of an organization and

80
00:02:44,400 --> 00:02:45,599
then I think from that you're going to

81
00:02:45,599 --> 00:02:47,220
be able to interpolate to a whole bunch

82
00:02:47,220 --> 00:02:49,379
of different settings uh with with again

83
00:02:49,379 --> 00:02:51,959
the same building blocks

84
00:02:51,959 --> 00:02:54,780
um so we have our obligatory collage of

85
00:02:54,780 --> 00:02:56,220
headline slide

86
00:02:56,220 --> 00:02:58,019
um if you've been at this conference for

87
00:02:58,019 --> 00:03:00,000
the past two days odds are pretty good

88
00:03:00,000 --> 00:03:01,319
that you've heard someone say the word

89
00:03:01,319 --> 00:03:03,840
software supply chain security it's in

90
00:03:03,840 --> 00:03:05,160
the news a lot

91
00:03:05,160 --> 00:03:05,940
um

92
00:03:05,940 --> 00:03:07,980
but fundamentally all of these problems

93
00:03:07,980 --> 00:03:09,900
boil down to

94
00:03:09,900 --> 00:03:12,300
someone is trying to run some software

95
00:03:12,300 --> 00:03:14,159
and it's not the software that they

96
00:03:14,159 --> 00:03:15,420
thought they were running and they get

97
00:03:15,420 --> 00:03:17,700
an unpleasant surprise for it and so

98
00:03:17,700 --> 00:03:19,379
we're getting interest from the

99
00:03:19,379 --> 00:03:20,760
government we're getting interest you

100
00:03:20,760 --> 00:03:23,159
know in the news media when when attacks

101
00:03:23,159 --> 00:03:25,280
happen we're getting academic interest

102
00:03:25,280 --> 00:03:28,680
and so these things are important and so

103
00:03:28,680 --> 00:03:30,300
uh

104
00:03:30,300 --> 00:03:32,220
the next question is you know uh

105
00:03:32,220 --> 00:03:34,800
designing software the subject of this

106
00:03:34,800 --> 00:03:36,720
talk does it help

107
00:03:36,720 --> 00:03:39,840
um and people you know armchair armchair

108
00:03:39,840 --> 00:03:43,379
uh opinionists on on sites with orange

109
00:03:43,379 --> 00:03:45,480
headers like to talk about oh just sign

110
00:03:45,480 --> 00:03:47,400
the software and then it'll be secure

111
00:03:47,400 --> 00:03:48,900
you're having all these vulnerabilities

112
00:03:48,900 --> 00:03:50,400
because you're not signing the software

113
00:03:50,400 --> 00:03:52,019
and I think there's a little bit more

114
00:03:52,019 --> 00:03:54,480
Nuance than we need uh that we need for

115
00:03:54,480 --> 00:03:56,340
that so I think signing software is part

116
00:03:56,340 --> 00:03:57,900
of the solution

117
00:03:57,900 --> 00:03:59,879
um you know you can if you download

118
00:03:59,879 --> 00:04:02,220
software from the right place but it's

119
00:04:02,220 --> 00:04:04,319
not what it's intended those kinds of

120
00:04:04,319 --> 00:04:06,420
attacks are things that sign-in software

121
00:04:06,420 --> 00:04:09,260
can help with so compromised accounts

122
00:04:09,260 --> 00:04:11,700
compromised build processes even

123
00:04:11,700 --> 00:04:13,860
compromises of the package repositories

124
00:04:13,860 --> 00:04:16,680
themselves we can we can deal with that

125
00:04:16,680 --> 00:04:19,560
by signing software it's not going to

126
00:04:19,560 --> 00:04:21,418
stop all attacks it's not going to stop

127
00:04:21,418 --> 00:04:23,040
you know normal vulnerabilities if

128
00:04:23,040 --> 00:04:24,660
someone published software honestly and

129
00:04:24,660 --> 00:04:27,419
they just made a mistake that's how

130
00:04:27,419 --> 00:04:29,160
would a signature help with that it's

131
00:04:29,160 --> 00:04:30,540
not going to defend against you know

132
00:04:30,540 --> 00:04:33,060
underhanded contributions so I send a PR

133
00:04:33,060 --> 00:04:35,220
to a project that looks safe but

134
00:04:35,220 --> 00:04:36,660
actually introduces a really bad

135
00:04:36,660 --> 00:04:37,560
vulnerability

136
00:04:37,560 --> 00:04:39,300
it's not going to you know defend

137
00:04:39,300 --> 00:04:41,160
against me going and threatening an open

138
00:04:41,160 --> 00:04:43,080
source maintainer with a hammer until

139
00:04:43,080 --> 00:04:45,120
they publish the Bitcoin miner in place

140
00:04:45,120 --> 00:04:48,540
of their you know npm package but in

141
00:04:48,540 --> 00:04:50,220
situations where you know who's supposed

142
00:04:50,220 --> 00:04:52,380
to be signing a package we are going to

143
00:04:52,380 --> 00:04:53,520
be able to help with the kinds of

144
00:04:53,520 --> 00:04:54,960
compromise mentioned on the previous

145
00:04:54,960 --> 00:04:57,840
slides and that's a really big if you

146
00:04:57,840 --> 00:04:59,220
know we're going to come back to that

147
00:04:59,220 --> 00:05:01,680
later uh you know it's doing a lot of a

148
00:05:01,680 --> 00:05:04,820
lot of heavy lifting there

149
00:05:05,940 --> 00:05:09,060
um so uh Sig store in the talk title uh

150
00:05:09,060 --> 00:05:11,100
really exciting technology we're not

151
00:05:11,100 --> 00:05:13,020
going to have time unfortunately to do a

152
00:05:13,020 --> 00:05:15,419
deep dive into how it works but the high

153
00:05:15,419 --> 00:05:18,300
level overview is that it enables really

154
00:05:18,300 --> 00:05:21,000
easy signing of software for containers

155
00:05:21,000 --> 00:05:24,300
and for for other software as well and

156
00:05:24,300 --> 00:05:26,340
it enables workflows without Key

157
00:05:26,340 --> 00:05:28,680
Management so for a long time we've

158
00:05:28,680 --> 00:05:30,660
we've known that people struggle to

159
00:05:30,660 --> 00:05:33,960
manage long-lived signing keys I'm sure

160
00:05:33,960 --> 00:05:35,880
some of the folks in this room have a

161
00:05:35,880 --> 00:05:39,240
gpg key on a hard drive in a basement or

162
00:05:39,240 --> 00:05:42,180
a garage that you know is on unencrypted

163
00:05:42,180 --> 00:05:43,620
and you know they don't know how to

164
00:05:43,620 --> 00:05:45,780
access anymore right like Key Management

165
00:05:45,780 --> 00:05:47,699
is really really hard and we've out you

166
00:05:47,699 --> 00:05:48,960
know this has been validated in the

167
00:05:48,960 --> 00:05:50,280
academic literature there's a lot of

168
00:05:50,280 --> 00:05:52,259
usability research on this

169
00:05:52,259 --> 00:05:52,860
um

170
00:05:52,860 --> 00:05:54,660
some people it works great for them and

171
00:05:54,660 --> 00:05:56,820
we're not you know we're not coming for

172
00:05:56,820 --> 00:05:58,380
your guns you're not we're not coming

173
00:05:58,380 --> 00:06:00,600
for your gpg keys either

174
00:06:00,600 --> 00:06:02,699
um but we do want to enable workflows

175
00:06:02,699 --> 00:06:04,380
for folks who don't want to be managing

176
00:06:04,380 --> 00:06:06,479
keys but are comfortable managing you

177
00:06:06,479 --> 00:06:08,820
know single sign-on identities so you

178
00:06:08,820 --> 00:06:12,419
know I don't I have a last count like

179
00:06:12,419 --> 00:06:14,880
eight gpg keys that I've used at various

180
00:06:14,880 --> 00:06:16,380
points in my lifetime that I no longer

181
00:06:16,380 --> 00:06:18,960
have access to my Gmail account I made

182
00:06:18,960 --> 00:06:20,160
when I was

183
00:06:20,160 --> 00:06:22,139
um well I'm not gonna I'm not gonna date

184
00:06:22,139 --> 00:06:24,660
myself but um I made at an earlier stage

185
00:06:24,660 --> 00:06:26,639
in my life and it was you know many

186
00:06:26,639 --> 00:06:29,759
years ago and it has remained compromise

187
00:06:29,759 --> 00:06:32,460
free since then and I I you know I've

188
00:06:32,460 --> 00:06:34,440
put all my eggs in one basket and then I

189
00:06:34,440 --> 00:06:35,580
watched that basket really really

190
00:06:35,580 --> 00:06:37,680
carefully uh and we're not advocating

191
00:06:37,680 --> 00:06:39,180
for single points of failures and we're

192
00:06:39,180 --> 00:06:40,800
going to talk about policies later on

193
00:06:40,800 --> 00:06:43,940
that that kind of prevent uh

194
00:06:43,940 --> 00:06:46,199
bottlenecking too much on a single point

195
00:06:46,199 --> 00:06:47,520
of failure

196
00:06:47,520 --> 00:06:49,680
but we are saying you know a lot of

197
00:06:49,680 --> 00:06:51,479
people have a much easier time managing

198
00:06:51,479 --> 00:06:53,400
a single sign-on identity like you know

199
00:06:53,400 --> 00:06:54,840
your Google account your Microsoft

200
00:06:54,840 --> 00:06:57,419
account your GitHub account uh then they

201
00:06:57,419 --> 00:07:00,419
do a gpg key pair similarly uh when

202
00:07:00,419 --> 00:07:02,880
you're talking about machine identity so

203
00:07:02,880 --> 00:07:04,919
I'm running a job in GitHub actions

204
00:07:04,919 --> 00:07:06,680
gitlab pipelines

205
00:07:06,680 --> 00:07:09,960
that identity you don't want to link

206
00:07:09,960 --> 00:07:12,479
that build job to a particular key pair

207
00:07:12,479 --> 00:07:14,580
because if that key pair ever leaks you

208
00:07:14,580 --> 00:07:17,460
know all all hell breaks loose basically

209
00:07:17,460 --> 00:07:21,000
looking backwards and so Sig store has a

210
00:07:21,000 --> 00:07:23,280
nice feature where I can be running a

211
00:07:23,280 --> 00:07:25,259
job in GitHub actions and I can get a

212
00:07:25,259 --> 00:07:27,539
certificate issued that identifies the

213
00:07:27,539 --> 00:07:29,639
build job as the build job that it's

214
00:07:29,639 --> 00:07:31,319
running so it can say I'm running the

215
00:07:31,319 --> 00:07:34,800
official npm build build job and then

216
00:07:34,800 --> 00:07:36,780
sign off on the software artifacts and

217
00:07:36,780 --> 00:07:38,639
now you're convinced that the artifact

218
00:07:38,639 --> 00:07:40,500
produced is the output of this this

219
00:07:40,500 --> 00:07:42,180
known job

220
00:07:42,180 --> 00:07:45,120
so identity much easier for humans much

221
00:07:45,120 --> 00:07:47,400
easier for machines and then finally Sig

222
00:07:47,400 --> 00:07:48,720
store brings in an element of

223
00:07:48,720 --> 00:07:50,580
transparency what do we mean by

224
00:07:50,580 --> 00:07:52,800
transparency it means that we post all

225
00:07:52,800 --> 00:07:55,560
of the activity in a big public log so

226
00:07:55,560 --> 00:07:58,259
we can detect misbehavior so if Sig

227
00:07:58,259 --> 00:08:00,840
store itself is misbehaving we'll be

228
00:08:00,840 --> 00:08:02,099
able to notice that you know if someone

229
00:08:02,099 --> 00:08:03,960
if Sig store is issuing certificates in

230
00:08:03,960 --> 00:08:06,660
my name to someone else I can get you

231
00:08:06,660 --> 00:08:09,720
know a text message alert if I set up a

232
00:08:09,720 --> 00:08:12,660
nerdy you know script to do that but you

233
00:08:12,660 --> 00:08:14,699
know just like when you're someone logs

234
00:08:14,699 --> 00:08:16,080
into your Amazon account you get a test

235
00:08:16,080 --> 00:08:18,120
text message so six door is transparency

236
00:08:18,120 --> 00:08:19,199
kind of

237
00:08:19,199 --> 00:08:20,940
um we're doing some centralization here

238
00:08:20,940 --> 00:08:23,039
which is scary especially to a lot of

239
00:08:23,039 --> 00:08:25,259
people who

240
00:08:25,259 --> 00:08:28,080
are used to the 90s Cypher Punk kind of

241
00:08:28,080 --> 00:08:30,240
model of of crypto as decentralize

242
00:08:30,240 --> 00:08:31,979
everything so we're doing some

243
00:08:31,979 --> 00:08:33,479
centralization but I think to to

244
00:08:33,479 --> 00:08:36,360
mitigate the impact of that we're asking

245
00:08:36,360 --> 00:08:37,740
the central parties to be fully

246
00:08:37,740 --> 00:08:39,419
transparent and everything we do so we

247
00:08:39,419 --> 00:08:41,640
can double check them

248
00:08:41,640 --> 00:08:42,299
um

249
00:08:42,299 --> 00:08:44,039
so how does it work again we're gonna

250
00:08:44,039 --> 00:08:46,740
we're gonna skim this is not a uh the

251
00:08:46,740 --> 00:08:48,600
point of this talk I would love to talk

252
00:08:48,600 --> 00:08:50,700
your ear off afterwards about about the

253
00:08:50,700 --> 00:08:52,740
details of these components but there's

254
00:08:52,740 --> 00:08:54,779
a few components uh one is full Co which

255
00:08:54,779 --> 00:08:56,519
is a certificate Authority and it's

256
00:08:56,519 --> 00:08:58,380
going to issue you short-lived

257
00:08:58,380 --> 00:09:00,480
certificates in exchange for oidc

258
00:09:00,480 --> 00:09:02,459
credentials so think like log in with

259
00:09:02,459 --> 00:09:04,560
Facebook so you basically log into this

260
00:09:04,560 --> 00:09:07,019
certificate Authority and it gives you a

261
00:09:07,019 --> 00:09:08,760
certificate that's going to last only

262
00:09:08,760 --> 00:09:10,860
about 10 minutes and then there's a log

263
00:09:10,860 --> 00:09:12,779
called recore which is going to give you

264
00:09:12,779 --> 00:09:14,820
a time stamp on that signature so you

265
00:09:14,820 --> 00:09:16,440
can know that it happened during that

266
00:09:16,440 --> 00:09:18,899
short validity period and then it's

267
00:09:18,899 --> 00:09:20,940
going to record some metadata about the

268
00:09:20,940 --> 00:09:22,680
signature itself and then finally

269
00:09:22,680 --> 00:09:24,420
there's a client called cosign which is

270
00:09:24,420 --> 00:09:26,220
really useful in a you know Cloud native

271
00:09:26,220 --> 00:09:28,200
context for sticking those signatures in

272
00:09:28,200 --> 00:09:30,180
oci Registries and kind of tying these

273
00:09:30,180 --> 00:09:32,640
components together

274
00:09:32,640 --> 00:09:33,300
um

275
00:09:33,300 --> 00:09:36,420
okay so you've got your Sig story you're

276
00:09:36,420 --> 00:09:38,760
doing the signing let's talk how does

277
00:09:38,760 --> 00:09:40,860
verification work so one way you could

278
00:09:40,860 --> 00:09:42,540
imagine doing this is you're a user you

279
00:09:42,540 --> 00:09:43,920
go to your container registry and you

280
00:09:43,920 --> 00:09:48,120
say give me the latest uh nginx image it

281
00:09:48,120 --> 00:09:50,519
gives you back you know nginx at a

282
00:09:50,519 --> 00:09:52,860
particular hash and then it also will

283
00:09:52,860 --> 00:09:55,260
give you a signature and then you verify

284
00:09:55,260 --> 00:09:57,600
that signature and life is good right

285
00:09:57,600 --> 00:09:59,820
well what if the container registry is

286
00:09:59,820 --> 00:10:01,500
evil then they can give you a signature

287
00:10:01,500 --> 00:10:02,880
and the signature could come from

288
00:10:02,880 --> 00:10:06,540
someone with the I guess app's name evil

289
00:10:06,540 --> 00:10:09,000
hacker and then you verify it just that

290
00:10:09,000 --> 00:10:10,860
that's not how we want to be verifying

291
00:10:10,860 --> 00:10:13,500
these signatures so we need a policy of

292
00:10:13,500 --> 00:10:15,959
some sort a verification policy helps us

293
00:10:15,959 --> 00:10:18,300
interpret the signatures

294
00:10:18,300 --> 00:10:20,339
um they answered the question what do I

295
00:10:20,339 --> 00:10:22,080
mean when I sign something so again

296
00:10:22,080 --> 00:10:23,339
people talk about like sign your

297
00:10:23,339 --> 00:10:25,320
container image what does it mean to

298
00:10:25,320 --> 00:10:26,940
sign the container image did you you

299
00:10:26,940 --> 00:10:30,000
know dump the all the layers in HEX dump

300
00:10:30,000 --> 00:10:32,519
and like check each byte probably not

301
00:10:32,519 --> 00:10:34,260
what you're really claiming when you

302
00:10:34,260 --> 00:10:35,640
sign something is much more specific

303
00:10:35,640 --> 00:10:38,220
than that and so being explicit about

304
00:10:38,220 --> 00:10:39,660
what you mean when you're signing

305
00:10:39,660 --> 00:10:42,480
something uh you know instead of having

306
00:10:42,480 --> 00:10:44,760
a signature just be over an artifact you

307
00:10:44,760 --> 00:10:47,040
make a claim that helps us compile

308
00:10:47,040 --> 00:10:49,860
policies that make a little bit more

309
00:10:49,860 --> 00:10:51,600
sense

310
00:10:51,600 --> 00:10:54,660
uh so we'll give some examples of that

311
00:10:54,660 --> 00:10:57,360
um yeah so so the the simplest is

312
00:10:57,360 --> 00:10:59,399
exactly that what I told you not to do

313
00:10:59,399 --> 00:11:01,320
is this idea of a universal signer

314
00:11:01,320 --> 00:11:03,480
there's one person you trust and if they

315
00:11:03,480 --> 00:11:05,339
sign a particular binary then we trust

316
00:11:05,339 --> 00:11:06,480
the binary

317
00:11:06,480 --> 00:11:09,240
um but there are more sophisticated uh I

318
00:11:09,240 --> 00:11:11,459
guess ideas that we can check when we're

319
00:11:11,459 --> 00:11:14,339
having a verification policy one is an

320
00:11:14,339 --> 00:11:16,079
idea of ownership you know package P

321
00:11:16,079 --> 00:11:18,660
came from Alice who happens to be I

322
00:11:18,660 --> 00:11:20,459
happen to know and again we'll we'll get

323
00:11:20,459 --> 00:11:22,500
into how we know that but I happen to

324
00:11:22,500 --> 00:11:24,000
know that Alice is the maintainer of

325
00:11:24,000 --> 00:11:26,220
react or whatever

326
00:11:26,220 --> 00:11:29,339
um you know she made package p and she

327
00:11:29,339 --> 00:11:31,200
signs it and she she asserts that she

328
00:11:31,200 --> 00:11:33,540
owns it and that that source is is good

329
00:11:33,540 --> 00:11:36,000
we can also do assertions about build

330
00:11:36,000 --> 00:11:38,519
Integrity so machine M built a

331
00:11:38,519 --> 00:11:40,740
particular art artifact but what's extra

332
00:11:40,740 --> 00:11:42,480
powerful is when you combine both of

333
00:11:42,480 --> 00:11:45,540
these Notions together so the uh the

334
00:11:45,540 --> 00:11:46,740
idea is that your trusted build machine

335
00:11:46,740 --> 00:11:48,779
would sign a claim like I built package

336
00:11:48,779 --> 00:11:52,380
P from source code s and Alice says I

337
00:11:52,380 --> 00:11:54,300
audited the source code s and then if

338
00:11:54,300 --> 00:11:55,860
you trust Alice these two things

339
00:11:55,860 --> 00:11:57,779
together give you a much more powerful

340
00:11:57,779 --> 00:12:00,360
claim than you know either of them on

341
00:12:00,360 --> 00:12:01,920
their own

342
00:12:01,920 --> 00:12:04,920
um so policies are good how do you get a

343
00:12:04,920 --> 00:12:08,160
policy so you may recognize some of

344
00:12:08,160 --> 00:12:09,600
these figures from the previous slide

345
00:12:09,600 --> 00:12:11,160
and we're going to go through a pretty

346
00:12:11,160 --> 00:12:13,500
similar exercise okay so I'm going to go

347
00:12:13,500 --> 00:12:16,320
you know request the latest nginx image

348
00:12:16,320 --> 00:12:19,140
it's going to give me a signature and a

349
00:12:19,140 --> 00:12:21,060
you know the image at a particular

350
00:12:21,060 --> 00:12:22,800
digest and then I go back to the

351
00:12:22,800 --> 00:12:24,720
container registry and I say by the way

352
00:12:24,720 --> 00:12:27,420
who's supposed to sign that container in

353
00:12:27,420 --> 00:12:29,220
the container registry says oh Marina

354
00:12:29,220 --> 00:12:31,680
more and then I verify it and life is

355
00:12:31,680 --> 00:12:33,000
good

356
00:12:33,000 --> 00:12:33,660
um

357
00:12:33,660 --> 00:12:36,180
that could go wrong in much the same way

358
00:12:36,180 --> 00:12:38,100
that it could go wrong the last time so

359
00:12:38,100 --> 00:12:40,500
same thing except now the signature is

360
00:12:40,500 --> 00:12:42,839
coming from the aptly named evil hacker

361
00:12:42,839 --> 00:12:44,940
I say by the way who's supposed to sign

362
00:12:44,940 --> 00:12:47,279
that that container and the container

363
00:12:47,279 --> 00:12:49,200
registry says oh evil hacker of course

364
00:12:49,200 --> 00:12:51,360
and then I verify boom check and that's

365
00:12:51,360 --> 00:12:52,980
that's not life is not good in this

366
00:12:52,980 --> 00:12:56,220
situation uh so we have to we have to

367
00:12:56,220 --> 00:12:57,779
use some some slightly more

368
00:12:57,779 --> 00:12:58,980
sophisticated

369
00:12:58,980 --> 00:13:01,260
Technologies to help us with that and

370
00:13:01,260 --> 00:13:02,160
that's where I'm going to turn it over

371
00:13:02,160 --> 00:13:03,480
to Marina

372
00:13:03,480 --> 00:13:06,240
great thanks so yeah so as those

373
00:13:06,240 --> 00:13:08,040
previous examples showed you have to

374
00:13:08,040 --> 00:13:09,779
know not just you have to know what

375
00:13:09,779 --> 00:13:11,279
you're running in the context in which

376
00:13:11,279 --> 00:13:13,260
you're running it in this context tells

377
00:13:13,260 --> 00:13:14,820
you who it is that's supposed to sign

378
00:13:14,820 --> 00:13:16,620
each thing and you have to be able to

379
00:13:16,620 --> 00:13:18,779
get this context from a secure Source a

380
00:13:18,779 --> 00:13:20,459
source that's separate from where you're

381
00:13:20,459 --> 00:13:21,839
getting the image and the signature so

382
00:13:21,839 --> 00:13:23,399
that it actually provides an additional

383
00:13:23,399 --> 00:13:26,100
layer of verification

384
00:13:26,100 --> 00:13:27,360
and so I'm going to talk a bit about

385
00:13:27,360 --> 00:13:29,279
this project called the update framework

386
00:13:29,279 --> 00:13:30,839
or tough which is a project that really

387
00:13:30,839 --> 00:13:32,940
focuses on this idea of secure

388
00:13:32,940 --> 00:13:35,100
distribution it can be used to securely

389
00:13:35,100 --> 00:13:36,720
distribute not just signatures and

390
00:13:36,720 --> 00:13:38,579
artifacts but who is supposed to sign

391
00:13:38,579 --> 00:13:41,220
these artifacts

392
00:13:41,220 --> 00:13:42,540
um and if we use for these these kinds

393
00:13:42,540 --> 00:13:44,279
of stress relationships and this

394
00:13:44,279 --> 00:13:45,779
framework has this additional property

395
00:13:45,779 --> 00:13:49,200
of compromised resilience so even if any

396
00:13:49,200 --> 00:13:51,839
single key or single

397
00:13:51,839 --> 00:13:54,120
um even even a single repository in the

398
00:13:54,120 --> 00:13:56,820
system is compromised there are ways to

399
00:13:56,820 --> 00:13:59,040
recover or prevent these attacks

400
00:13:59,040 --> 00:14:00,300
and also I think we're going to very

401
00:14:00,300 --> 00:14:01,980
briefly cover in Toto which really

402
00:14:01,980 --> 00:14:04,200
covers those combinations and I can help

403
00:14:04,200 --> 00:14:06,240
you talk about more more detailed

404
00:14:06,240 --> 00:14:08,160
relationships about what happens in your

405
00:14:08,160 --> 00:14:10,260
entire supply chain not just the

406
00:14:10,260 --> 00:14:12,120
distribution step but going back from

407
00:14:12,120 --> 00:14:13,860
the distribution step who actually built

408
00:14:13,860 --> 00:14:15,899
your software who tested it how do we

409
00:14:15,899 --> 00:14:17,040
know who's supposed to build it and

410
00:14:17,040 --> 00:14:18,720
who's supposed to test it putting all

411
00:14:18,720 --> 00:14:20,639
that stuff together into a single place

412
00:14:20,639 --> 00:14:23,160
where you can check all the steps in the

413
00:14:23,160 --> 00:14:24,480
in the supply chain to make sure they're

414
00:14:24,480 --> 00:14:26,700
done by the proper people and then

415
00:14:26,700 --> 00:14:27,720
distribute

416
00:14:27,720 --> 00:14:29,339
information about who's supposed to sign

417
00:14:29,339 --> 00:14:32,279
those in a secure fashion

418
00:14:32,279 --> 00:14:35,160
so as with Sig store unfortunately this

419
00:14:35,160 --> 00:14:38,339
is also not a in-depth tough talk so a

420
00:14:38,339 --> 00:14:40,260
lot of the details about how this stuff

421
00:14:40,260 --> 00:14:41,940
we're going to talk about Works will not

422
00:14:41,940 --> 00:14:44,279
be in this slide um or in this this

423
00:14:44,279 --> 00:14:46,980
particular presentation we have lots of

424
00:14:46,980 --> 00:14:48,779
great content on the tough website

425
00:14:48,779 --> 00:14:50,699
including in the talk listed there if

426
00:14:50,699 --> 00:14:52,380
you're interested in the low-level

427
00:14:52,380 --> 00:14:54,240
details about how tough achieves these

428
00:14:54,240 --> 00:14:55,199
properties we're going to talk about

429
00:14:55,199 --> 00:14:57,360
we're going to focus today just on kind

430
00:14:57,360 --> 00:14:59,180
of what those principles are

431
00:14:59,180 --> 00:15:02,040
but yeah tough is a cncf graduated

432
00:15:02,040 --> 00:15:04,500
project it was originally based on some

433
00:15:04,500 --> 00:15:06,660
peer-reviewed academic research by my

434
00:15:06,660 --> 00:15:09,420
advisor Justin capos it's used in

435
00:15:09,420 --> 00:15:12,300
production by organizations like fuchsia

436
00:15:12,300 --> 00:15:16,139
datadog various automotive oems and and

437
00:15:16,139 --> 00:15:17,699
many others

438
00:15:17,699 --> 00:15:20,339
and it's based on a few principles to

439
00:15:20,339 --> 00:15:22,199
really achieve these security properties

440
00:15:22,199 --> 00:15:23,940
these principles include separation of

441
00:15:23,940 --> 00:15:26,100
responsibility meaning that we can

442
00:15:26,100 --> 00:15:27,480
achieve that compromise resilience right

443
00:15:27,480 --> 00:15:29,160
so that if any one thing is compromised

444
00:15:29,160 --> 00:15:31,139
it only compromises the particular

445
00:15:31,139 --> 00:15:33,360
responsibilities of the entity and no

446
00:15:33,360 --> 00:15:35,699
entities have too much responsibility

447
00:15:35,699 --> 00:15:37,680
this idea of multi-signatory trust which

448
00:15:37,680 --> 00:15:40,199
we'll get into in a minute and explicit

449
00:15:40,199 --> 00:15:41,940
and implicit revocation to make sure

450
00:15:41,940 --> 00:15:43,740
that all parties and system can be

451
00:15:43,740 --> 00:15:46,019
revoked if they're compromised and of

452
00:15:46,019 --> 00:15:47,760
course secure recovery when a compromise

453
00:15:47,760 --> 00:15:49,800
happens

454
00:15:49,800 --> 00:15:51,240
so the first property we'll talk about

455
00:15:51,240 --> 00:15:53,459
is delegations so you can have a

456
00:15:53,459 --> 00:15:55,440
centralized entity you kind of your root

457
00:15:55,440 --> 00:15:56,880
of trust for the system if you were if

458
00:15:56,880 --> 00:15:59,040
you will so in the case of a

459
00:15:59,040 --> 00:16:01,019
organization like Pi Pi which is the

460
00:16:01,019 --> 00:16:04,380
python packaging index the um the thing

461
00:16:04,380 --> 00:16:06,540
that post python packages that are

462
00:16:06,540 --> 00:16:09,180
downloaded by pif and other installers

463
00:16:09,180 --> 00:16:11,760
um you can have it can control the space

464
00:16:11,760 --> 00:16:13,740
of packages that are uploaded to Pi Pi

465
00:16:13,740 --> 00:16:16,079
and you can say okay but I know that the

466
00:16:16,079 --> 00:16:17,480
numpy package

467
00:16:17,480 --> 00:16:19,800
is owned by Alice and Alice should be

468
00:16:19,800 --> 00:16:21,180
the only person uploading the numpy

469
00:16:21,180 --> 00:16:22,800
package so Alice has permission

470
00:16:22,800 --> 00:16:24,720
specifically for a numpy package but no

471
00:16:24,720 --> 00:16:27,060
other package on Pipi in the Sci-Fi

472
00:16:27,060 --> 00:16:29,160
package on the other hand is Bob is just

473
00:16:29,160 --> 00:16:31,260
to downflow this package I was just for

474
00:16:31,260 --> 00:16:33,720
this package and nothing else and you

475
00:16:33,720 --> 00:16:35,399
can do more complicated relationships

476
00:16:35,399 --> 00:16:37,139
list of course multiple packages for a

477
00:16:37,139 --> 00:16:39,779
person separate name spaces all those

478
00:16:39,779 --> 00:16:42,060
kinds of things

479
00:16:42,060 --> 00:16:43,980
Tuff also includes explicit revocation

480
00:16:43,980 --> 00:16:47,399
so if any entity so say we have in this

481
00:16:47,399 --> 00:16:51,320
example we have open SSL this version

482
00:16:51,320 --> 00:16:54,000
1.0.1 which we think is is totally fine

483
00:16:54,000 --> 00:16:55,800
and then

484
00:16:55,800 --> 00:16:56,579
um

485
00:16:56,579 --> 00:16:58,740
you know something changes right we

486
00:16:58,740 --> 00:17:00,060
learn that there's there's some issues

487
00:17:00,060 --> 00:17:02,519
with this version of a piece of software

488
00:17:02,519 --> 00:17:03,839
um we can respond to this vulnerability

489
00:17:03,839 --> 00:17:06,540
but we've explicitly revoking trust in

490
00:17:06,540 --> 00:17:08,280
that version of the package

491
00:17:08,280 --> 00:17:10,740
but leaving the trust in future versions

492
00:17:10,740 --> 00:17:12,000
of the package

493
00:17:12,000 --> 00:17:14,280
this includes a couple of addition this

494
00:17:14,280 --> 00:17:16,380
this is done using the metadata system

495
00:17:16,380 --> 00:17:18,480
in tough but it really ensures that you

496
00:17:18,480 --> 00:17:19,919
can explicitly say when a version of the

497
00:17:19,919 --> 00:17:22,980
package is is now has a vulnerability or

498
00:17:22,980 --> 00:17:24,299
you learn more about it it can be

499
00:17:24,299 --> 00:17:26,579
explicitly revoked and it won't be used

500
00:17:26,579 --> 00:17:28,500
anymore and every client will know that

501
00:17:28,500 --> 00:17:29,280
they

502
00:17:29,280 --> 00:17:31,679
have a version of the index that's up to

503
00:17:31,679 --> 00:17:34,620
date and lists these um

504
00:17:34,620 --> 00:17:37,260
these like outdated packages as as

505
00:17:37,260 --> 00:17:39,179
deleted

506
00:17:39,179 --> 00:17:41,880
we also have implicit revocation

507
00:17:41,880 --> 00:17:44,820
um all keys um you know nothing is is

508
00:17:44,820 --> 00:17:47,100
good forever so any key in the system

509
00:17:47,100 --> 00:17:49,980
has a a lifetime and so if it's lost

510
00:17:49,980 --> 00:17:51,660
you're stolen or you it's lost without

511
00:17:51,660 --> 00:17:53,640
stolen without you knowing it still has

512
00:17:53,640 --> 00:17:55,140
an eventual expiration so there's kind

513
00:17:55,140 --> 00:17:56,940
of a limit of time in which an attacker

514
00:17:56,940 --> 00:17:59,400
can take advantage of a lost key

515
00:17:59,400 --> 00:18:00,539
and this helps with undetected

516
00:18:00,539 --> 00:18:02,280
compromises and make sure that people

517
00:18:02,280 --> 00:18:03,720
kind of keep track of the keys that they

518
00:18:03,720 --> 00:18:05,900
have

519
00:18:06,960 --> 00:18:08,880
um we also have signature thresholds in

520
00:18:08,880 --> 00:18:11,039
tough this is a one of the the really

521
00:18:11,039 --> 00:18:12,179
powerful ways we achieve this

522
00:18:12,179 --> 00:18:14,100
compromised resilience is that you can

523
00:18:14,100 --> 00:18:15,660
have one package and you have to make

524
00:18:15,660 --> 00:18:17,039
sure that multiple different parties

525
00:18:17,039 --> 00:18:19,740
attest that they um are okay with this

526
00:18:19,740 --> 00:18:21,900
particular version of the package so you

527
00:18:21,900 --> 00:18:23,340
have lots of different people cited the

528
00:18:23,340 --> 00:18:25,200
same package for example you can have a

529
00:18:25,200 --> 00:18:27,419
developer and a security team so you say

530
00:18:27,419 --> 00:18:28,799
this developer team wrote the package

531
00:18:28,799 --> 00:18:31,679
the security team checked it therefore

532
00:18:31,679 --> 00:18:33,600
we trusted we won't trust it if either

533
00:18:33,600 --> 00:18:36,840
of these signatures is missing

534
00:18:36,840 --> 00:18:39,419
and finally we have one remaining issue

535
00:18:39,419 --> 00:18:40,500
with tough which is how we're going to

536
00:18:40,500 --> 00:18:42,360
Loop this back into our tough and Sig

537
00:18:42,360 --> 00:18:45,660
store combination which is that

538
00:18:45,660 --> 00:18:46,860
um

539
00:18:46,860 --> 00:18:50,160
how do you detect if a key is used by an

540
00:18:50,160 --> 00:18:51,960
attacker so someone manages to get your

541
00:18:51,960 --> 00:18:53,700
key without your knowledge how do you

542
00:18:53,700 --> 00:18:56,820
know that that he was used on top and

543
00:18:56,820 --> 00:18:58,200
are you seeing the same signatures on

544
00:18:58,200 --> 00:18:59,640
these packages as everybody else is

545
00:18:59,640 --> 00:19:01,559
seeing and this is where you really need

546
00:19:01,559 --> 00:19:05,160
this property of auditability

547
00:19:05,160 --> 00:19:06,179
um

548
00:19:06,179 --> 00:19:07,919
so as you guessed this is where tough

549
00:19:07,919 --> 00:19:10,080
and Sig store can come together this is

550
00:19:10,080 --> 00:19:11,720
actually already supported today you can

551
00:19:11,720 --> 00:19:14,400
include you can upload tough metadata to

552
00:19:14,400 --> 00:19:16,980
the recore transparency log in Sig store

553
00:19:16,980 --> 00:19:19,320
to get this auditability where you know

554
00:19:19,320 --> 00:19:21,600
not just that you know this this is the

555
00:19:21,600 --> 00:19:23,160
tough metadata that you're seeing it's

556
00:19:23,160 --> 00:19:24,480
the same tough metadata that everybody

557
00:19:24,480 --> 00:19:26,280
else is seeing for this particular

558
00:19:26,280 --> 00:19:27,960
package

559
00:19:27,960 --> 00:19:30,059
and this allows you to audit the use of

560
00:19:30,059 --> 00:19:31,980
so any signer in the system can audit

561
00:19:31,980 --> 00:19:34,500
that out of every time their key is used

562
00:19:34,500 --> 00:19:36,299
and you can also ensure that you have

563
00:19:36,299 --> 00:19:38,160
Global consistency and if you have like

564
00:19:38,160 --> 00:19:40,260
one particular vulnerable Target they

565
00:19:40,260 --> 00:19:41,400
know that they're seeing the same

566
00:19:41,400 --> 00:19:43,380
version of the tough repository as every

567
00:19:43,380 --> 00:19:45,660
other user of the system

568
00:19:45,660 --> 00:19:47,520
even in the event of a key compromise or

569
00:19:47,520 --> 00:19:51,059
any other change to the system

570
00:19:51,059 --> 00:19:52,260
so now we're going to talk a little bit

571
00:19:52,260 --> 00:19:53,340
about

572
00:19:53,340 --> 00:19:54,840
what this looks like in practice and

573
00:19:54,840 --> 00:19:56,640
what does this actually give you so I

574
00:19:56,640 --> 00:19:57,660
kind of ground this in some more

575
00:19:57,660 --> 00:19:59,700
concrete things rather than these high

576
00:19:59,700 --> 00:20:01,620
level security ideas

577
00:20:01,620 --> 00:20:04,140
this this particular example is still in

578
00:20:04,140 --> 00:20:05,640
the realm of

579
00:20:05,640 --> 00:20:08,220
um design docs and good ideas but we'll

580
00:20:08,220 --> 00:20:09,360
go into some other ones that are a

581
00:20:09,360 --> 00:20:11,340
little bit farther along in a minute

582
00:20:11,340 --> 00:20:13,980
so say you had a company that has a

583
00:20:13,980 --> 00:20:16,260
container registry for all the images

584
00:20:16,260 --> 00:20:17,880
that you make that you want to give to

585
00:20:17,880 --> 00:20:19,559
your customers

586
00:20:19,559 --> 00:20:22,200
and so if if you can do this this

587
00:20:22,200 --> 00:20:24,480
combination of tough metadata stored in

588
00:20:24,480 --> 00:20:26,580
Sig store and then upload all of that

589
00:20:26,580 --> 00:20:28,620
metadata to oci

590
00:20:28,620 --> 00:20:30,299
you can create like a fixed policy

591
00:20:30,299 --> 00:20:32,100
because you know as an internal company

592
00:20:32,100 --> 00:20:33,840
that your Dev team should sign every

593
00:20:33,840 --> 00:20:36,299
image so you can say okay we're going to

594
00:20:36,299 --> 00:20:37,919
create this stuff metadata that says

595
00:20:37,919 --> 00:20:39,179
this is the team that are trusted for

596
00:20:39,179 --> 00:20:40,799
these images we know those particular

597
00:20:40,799 --> 00:20:43,559
keys that are made and we also know that

598
00:20:43,559 --> 00:20:45,179
this image should be built by GitHub

599
00:20:45,179 --> 00:20:46,740
actions so that can be an additional

600
00:20:46,740 --> 00:20:49,200
signature that goes onto

601
00:20:49,200 --> 00:20:51,539
the image and you know the workload ID

602
00:20:51,539 --> 00:20:52,740
for that and you can say that's the ID

603
00:20:52,740 --> 00:20:54,299
that should be signing

604
00:20:54,299 --> 00:20:55,020
um

605
00:20:55,020 --> 00:20:56,340
those images

606
00:20:56,340 --> 00:20:57,960
and for free you get because you're

607
00:20:57,960 --> 00:20:59,400
using tough you get this revocation

608
00:20:59,400 --> 00:21:01,679
property if any any of your developers

609
00:21:01,679 --> 00:21:03,600
lose their key if you get you change

610
00:21:03,600 --> 00:21:05,580
your GitHub actions

611
00:21:05,580 --> 00:21:06,419
um

612
00:21:06,419 --> 00:21:08,400
workload or ID or switch from GitHub

613
00:21:08,400 --> 00:21:10,679
actions to some other service entirely

614
00:21:10,679 --> 00:21:13,260
you can revoke you can change the keys

615
00:21:13,260 --> 00:21:15,059
you also get freshness which makes so

616
00:21:15,059 --> 00:21:16,440
you can make sure that everyone is

617
00:21:16,440 --> 00:21:18,960
seeing the most up-to-date set of images

618
00:21:18,960 --> 00:21:21,720
at any given time and you can enforce

619
00:21:21,720 --> 00:21:23,760
all this policy that you would find in

620
00:21:23,760 --> 00:21:25,320
like a kubernetes admission controller

621
00:21:25,320 --> 00:21:29,480
or other intake system

622
00:21:29,640 --> 00:21:31,500
another idea of how you can combine

623
00:21:31,500 --> 00:21:32,940
these systems that this one is a much

624
00:21:32,940 --> 00:21:35,220
more far along which is the idea that

625
00:21:35,220 --> 00:21:36,960
you have a public package repository

626
00:21:36,960 --> 00:21:40,080
someone like Pi Pi npm rubygems all

627
00:21:40,080 --> 00:21:42,059
everyone all those folks

628
00:21:42,059 --> 00:21:43,980
and um

629
00:21:43,980 --> 00:21:46,380
instead of the versus the other in the

630
00:21:46,380 --> 00:21:48,299
in this in this previous slide right you

631
00:21:48,299 --> 00:21:50,039
know at your Dev team you know the

632
00:21:50,039 --> 00:21:51,179
people who are supposed to be creating

633
00:21:51,179 --> 00:21:53,760
the images versus these public package

634
00:21:53,760 --> 00:21:56,580
repositories anyone on the internet can

635
00:21:56,580 --> 00:22:00,000
upload to them and so you the um the

636
00:22:00,000 --> 00:22:01,799
policy looks a little bit different so

637
00:22:01,799 --> 00:22:03,539
you can have this default policy that's

638
00:22:03,539 --> 00:22:06,539
created by the package repository where

639
00:22:06,539 --> 00:22:09,360
they just map packages to the person who

640
00:22:09,360 --> 00:22:11,580
has the account on Pipi or any other

641
00:22:11,580 --> 00:22:14,280
service and say I know that

642
00:22:14,280 --> 00:22:17,400
this account is type this and so um we

643
00:22:17,400 --> 00:22:18,840
can create a policy that says that this

644
00:22:18,840 --> 00:22:20,520
image has to come from the account

645
00:22:20,520 --> 00:22:24,120
associated with that package

646
00:22:24,120 --> 00:22:24,720
um

647
00:22:24,720 --> 00:22:26,640
and in this case another kind of

648
00:22:26,640 --> 00:22:28,740
addition that you can use in this case

649
00:22:28,740 --> 00:22:31,280
is that you can use those six door

650
00:22:31,280 --> 00:22:33,960
signatures the short-lived Keys easy to

651
00:22:33,960 --> 00:22:36,299
manage that we talked about before you

652
00:22:36,299 --> 00:22:38,100
can use those in the in the place of a

653
00:22:38,100 --> 00:22:39,840
long-term key pair within the tough

654
00:22:39,840 --> 00:22:41,240
system

655
00:22:41,240 --> 00:22:44,100
to make it easier for the developers and

656
00:22:44,100 --> 00:22:46,559
so you have this yeah default policy and

657
00:22:46,559 --> 00:22:47,880
you can also in addition to the default

658
00:22:47,880 --> 00:22:50,039
policy because again this default policy

659
00:22:50,039 --> 00:22:52,620
if like any random person internet can

660
00:22:52,620 --> 00:22:54,240
create an account of IPI and then upload

661
00:22:54,240 --> 00:22:56,760
packages you might want to have an

662
00:22:56,760 --> 00:22:59,400
option for a more paranoid policy so

663
00:22:59,400 --> 00:23:02,280
security vendors or companies or anybody

664
00:23:02,280 --> 00:23:05,760
else can create a separate policy for

665
00:23:05,760 --> 00:23:07,919
more paranoid users that allow lists

666
00:23:07,919 --> 00:23:10,140
particular trusted uploaders and even

667
00:23:10,140 --> 00:23:11,940
creates that map between those trusted

668
00:23:11,940 --> 00:23:13,620
uploaders and the packages that they're

669
00:23:13,620 --> 00:23:15,179
known to maintain

670
00:23:15,179 --> 00:23:17,700
and so you can kind of have a subset of

671
00:23:17,700 --> 00:23:19,860
everything on pipei that's part of your

672
00:23:19,860 --> 00:23:21,840
trusted policy

673
00:23:21,840 --> 00:23:23,400
and you can enforce this in your package

674
00:23:23,400 --> 00:23:25,679
manager and pip or anything else as well

675
00:23:25,679 --> 00:23:27,120
as having like layers on top of that to

676
00:23:27,120 --> 00:23:29,039
make sure that you can use your specific

677
00:23:29,039 --> 00:23:30,240
allow list

678
00:23:30,240 --> 00:23:32,280
and for free as before you get this

679
00:23:32,280 --> 00:23:34,440
revocation key rotation and freshness

680
00:23:34,440 --> 00:23:36,600
that comes with tough and in addition

681
00:23:36,600 --> 00:23:38,700
you get this protection from repository

682
00:23:38,700 --> 00:23:40,980
compromise because all of these

683
00:23:40,980 --> 00:23:43,440
signatures are done by developers and

684
00:23:43,440 --> 00:23:45,600
not by the package repository which

685
00:23:45,600 --> 00:23:46,740
means that even if the package

686
00:23:46,740 --> 00:23:49,860
repository is compromised the um

687
00:23:49,860 --> 00:23:53,100
I'm delicious you users won't install a

688
00:23:53,100 --> 00:23:54,539
malicious package because it's signed by

689
00:23:54,539 --> 00:23:56,960
the wrong people

690
00:23:57,659 --> 00:23:58,860
and there's all kinds of other places

691
00:23:58,860 --> 00:24:00,419
you can use this combination of tough

692
00:24:00,419 --> 00:24:02,700
and Six Tour you can see places like app

693
00:24:02,700 --> 00:24:04,440
stores which have some particular use

694
00:24:04,440 --> 00:24:06,720
cases in that there are no interested

695
00:24:06,720 --> 00:24:07,940
developers

696
00:24:07,940 --> 00:24:10,020
which is a little bit different than the

697
00:24:10,020 --> 00:24:11,460
public package repositories because

698
00:24:11,460 --> 00:24:13,380
there's like a smaller set of folks who

699
00:24:13,380 --> 00:24:15,240
have the particular accounts to be a

700
00:24:15,240 --> 00:24:17,340
trusted developer in these app stores

701
00:24:17,340 --> 00:24:18,960
you could have more curated package

702
00:24:18,960 --> 00:24:20,539
repositories

703
00:24:20,539 --> 00:24:23,340
that have additional signatures from

704
00:24:23,340 --> 00:24:25,020
security teams and really exclude those

705
00:24:25,020 --> 00:24:26,880
other kind of packages from anyone on

706
00:24:26,880 --> 00:24:28,380
the internet and just say these are the

707
00:24:28,380 --> 00:24:30,720
packages that we actually trust and our

708
00:24:30,720 --> 00:24:32,880
list of packages will only our policy

709
00:24:32,880 --> 00:24:36,780
will only include those trusted books

710
00:24:36,780 --> 00:24:39,059
and finally there's the the case of a

711
00:24:39,059 --> 00:24:40,620
single product updater so like your

712
00:24:40,620 --> 00:24:42,600
operating system update or any

713
00:24:42,600 --> 00:24:45,299
application update

714
00:24:45,299 --> 00:24:48,179
um which can mitigate the compromise of

715
00:24:48,179 --> 00:24:49,799
a distribution server so this kind of

716
00:24:49,799 --> 00:24:52,440
men in the middle which is I think auto

717
00:24:52,440 --> 00:24:54,659
corrected there no sorry that's that's

718
00:24:54,659 --> 00:24:57,299
Mimi which was uh yes one of the

719
00:24:57,299 --> 00:24:59,220
headlines was there was a chat app which

720
00:24:59,220 --> 00:25:01,440
is popular in China called Mimi and they

721
00:25:01,440 --> 00:25:04,620
had their their CDN basically owned and

722
00:25:04,620 --> 00:25:06,780
then in the attacker substituted in

723
00:25:06,780 --> 00:25:09,000
place of Mimi the normal chat app they

724
00:25:09,000 --> 00:25:11,340
had an evil version of that instead an

725
00:25:11,340 --> 00:25:14,520
example of a minimum but it anyway yes

726
00:25:14,520 --> 00:25:15,960
yes

727
00:25:15,960 --> 00:25:17,280
so yeah so that's some other places

728
00:25:17,280 --> 00:25:20,100
where you can use this combination

729
00:25:20,100 --> 00:25:22,260
and now we have a lot more a lot more

730
00:25:22,260 --> 00:25:23,760
details a lot more Feature work so this

731
00:25:23,760 --> 00:25:25,380
is kind of where we're hoping that all

732
00:25:25,380 --> 00:25:27,360
of you can come in

733
00:25:27,360 --> 00:25:28,140
um

734
00:25:28,140 --> 00:25:29,580
there's some additional pieces here

735
00:25:29,580 --> 00:25:31,080
right that that we need to finish

736
00:25:31,080 --> 00:25:33,539
solving and make better and really want

737
00:25:33,539 --> 00:25:35,100
to prove the usability of this so that

738
00:25:35,100 --> 00:25:36,960
this is an obvious way to do it and

739
00:25:36,960 --> 00:25:38,779
doing you know

740
00:25:38,779 --> 00:25:41,520
doing updates and distribution the

741
00:25:41,520 --> 00:25:43,320
correct way should be the easiest way so

742
00:25:43,320 --> 00:25:44,940
that all of our all of our software can

743
00:25:44,940 --> 00:25:47,100
be more secure so things in this

744
00:25:47,100 --> 00:25:50,340
category include revocation and on of

745
00:25:50,340 --> 00:25:52,320
things that end up on a transparency log

746
00:25:52,320 --> 00:25:54,240
how do these things get deleted and

747
00:25:54,240 --> 00:25:56,580
changed scalability

748
00:25:56,580 --> 00:25:59,039
um there's a lot of pieces of both tough

749
00:25:59,039 --> 00:26:01,380
and Sig store that have

750
00:26:01,380 --> 00:26:02,880
interesting scalability challenges

751
00:26:02,880 --> 00:26:04,380
especially as you look at these really

752
00:26:04,380 --> 00:26:07,559
huge public package repositories

753
00:26:07,559 --> 00:26:08,279
um

754
00:26:08,279 --> 00:26:10,320
how do some of the particular roles in

755
00:26:10,320 --> 00:26:12,659
tough like the the snapshot role which

756
00:26:12,659 --> 00:26:15,120
way I didn't go over but it has a list

757
00:26:15,120 --> 00:26:16,740
of every of every package right which

758
00:26:16,740 --> 00:26:19,440
scales linearly so ways to make that do

759
00:26:19,440 --> 00:26:21,240
that in a more clever way

760
00:26:21,240 --> 00:26:23,880
we have in-band key rotation so making

761
00:26:23,880 --> 00:26:26,340
so the the delegation structure is great

762
00:26:26,340 --> 00:26:27,659
for saying

763
00:26:27,659 --> 00:26:29,640
um in this particular package should be

764
00:26:29,640 --> 00:26:31,559
signed by this person but what if this

765
00:26:31,559 --> 00:26:33,480
person you know leaves the team or wants

766
00:26:33,480 --> 00:26:35,520
to switch it off to some other developer

767
00:26:35,520 --> 00:26:37,320
how do we how can we do that in band

768
00:26:37,320 --> 00:26:39,539
without having to involve these

769
00:26:39,539 --> 00:26:41,760
volunteer volunteer repository

770
00:26:41,760 --> 00:26:43,380
administrators who don't have time to

771
00:26:43,380 --> 00:26:45,240
respond every time someone wants to

772
00:26:45,240 --> 00:26:46,559
change their key

773
00:26:46,559 --> 00:26:49,580
what do we do when we have post Quantum

774
00:26:49,580 --> 00:26:52,020
broken broken encryption from post

775
00:26:52,020 --> 00:26:53,940
Quantum algorithms how do we change

776
00:26:53,940 --> 00:26:55,860
every every signing algorithm one of the

777
00:26:55,860 --> 00:26:58,919
as many of you may be aware when quantum

778
00:26:58,919 --> 00:26:59,940
computers

779
00:26:59,940 --> 00:27:03,059
become a reality signing algorithms are

780
00:27:03,059 --> 00:27:05,000
one of as well

781
00:27:05,000 --> 00:27:07,860
signing algorithms I wanted the um the

782
00:27:07,860 --> 00:27:08,940
critical pieces of Internet

783
00:27:08,940 --> 00:27:10,620
infrastructure that will be broken so

784
00:27:10,620 --> 00:27:12,360
how do we design these systems in a way

785
00:27:12,360 --> 00:27:14,940
that if and when that happens we can

786
00:27:14,940 --> 00:27:18,059
quickly respond and um and keep

787
00:27:18,059 --> 00:27:20,039
everything secure

788
00:27:20,039 --> 00:27:21,539
and then of course there's the shifting

789
00:27:21,539 --> 00:27:23,580
left signing everything from the source

790
00:27:23,580 --> 00:27:25,140
all the way to this distribution because

791
00:27:25,140 --> 00:27:26,460
right now this is a lot focused on

792
00:27:26,460 --> 00:27:28,620
distribution how do we incorporate more

793
00:27:28,620 --> 00:27:30,900
with projects like encodo and others to

794
00:27:30,900 --> 00:27:32,700
get this all the way down back to the

795
00:27:32,700 --> 00:27:34,020
source

796
00:27:34,020 --> 00:27:36,299
and then there's this whole usability

797
00:27:36,299 --> 00:27:38,159
piece of it really simplifying the setup

798
00:27:38,159 --> 00:27:40,140
of these tough repositories and we have

799
00:27:40,140 --> 00:27:41,640
a couple of really cool ideas about how

800
00:27:41,640 --> 00:27:43,620
to do that including creating kind of a

801
00:27:43,620 --> 00:27:46,020
public good shared tough route that can

802
00:27:46,020 --> 00:27:48,059
be used by especially all of these

803
00:27:48,059 --> 00:27:49,320
public

804
00:27:49,320 --> 00:27:49,919
um

805
00:27:49,919 --> 00:27:52,080
software repositories so that they don't

806
00:27:52,080 --> 00:27:54,779
have to have the infrastructure and the

807
00:27:54,779 --> 00:27:56,460
teams to actually manage this themselves

808
00:27:56,460 --> 00:27:58,679
you'd have one centralized place for all

809
00:27:58,679 --> 00:28:01,260
of the the public open source things on

810
00:28:01,260 --> 00:28:02,159
the internet

811
00:28:02,159 --> 00:28:04,080
and of course in Toto which I mentioned

812
00:28:04,080 --> 00:28:06,600
before but I think integrating the

813
00:28:06,600 --> 00:28:08,100
entire software supply chain security

814
00:28:08,100 --> 00:28:12,000
into this is going to be a key piece

815
00:28:12,000 --> 00:28:13,860
if you want to get involved we would

816
00:28:13,860 --> 00:28:16,039
love to hear from you this is links to

817
00:28:16,039 --> 00:28:18,659
various projects within tough and Sig

818
00:28:18,659 --> 00:28:20,640
store where you can get involved

819
00:28:20,640 --> 00:28:23,360
including slacks to chat with us

820
00:28:23,360 --> 00:28:26,039
also if you are on the end user side

821
00:28:26,039 --> 00:28:27,840
rather than this side and would like to

822
00:28:27,840 --> 00:28:29,760
see how this can work in your system we

823
00:28:29,760 --> 00:28:32,159
would love to chat with you about how we

824
00:28:32,159 --> 00:28:34,260
can make that happen

825
00:28:34,260 --> 00:28:36,480
because yeah there's a QR code for

826
00:28:36,480 --> 00:28:38,460
feedback and we'd love to see any

827
00:28:38,460 --> 00:28:40,910
questions thanks

828
00:28:40,910 --> 00:28:47,159
[Applause]

829
00:28:47,159 --> 00:28:48,840
all right yeah we did leave I think

830
00:28:48,840 --> 00:28:51,600
almost 10 minutes for questions so okay

831
00:28:51,600 --> 00:28:54,799
um I think I saw your hand first

832
00:28:55,860 --> 00:28:57,419
bigger Linux distribution distribution

833
00:28:57,419 --> 00:29:01,380
repositories you know RPM W and we're

834
00:29:01,380 --> 00:29:02,520
not

835
00:29:02,520 --> 00:29:04,559
we're bringing some of this to

836
00:29:04,559 --> 00:29:07,039
be pretty horrifically

837
00:29:07,039 --> 00:29:08,600
okay

838
00:29:08,600 --> 00:29:10,919
yeah so the question was have there been

839
00:29:10,919 --> 00:29:14,039
discussions with uh Linux OS package

840
00:29:14,039 --> 00:29:16,080
repositories basically so you know

841
00:29:16,080 --> 00:29:19,919
you're talking about apt RPM and so on

842
00:29:19,919 --> 00:29:23,100
the the short answer is

843
00:29:23,100 --> 00:29:26,460
it hasn't been an area of focus largely

844
00:29:26,460 --> 00:29:28,260
because I think

845
00:29:28,260 --> 00:29:32,460
the the problems are much bigger for

846
00:29:32,460 --> 00:29:34,860
Community operated package repositories

847
00:29:34,860 --> 00:29:37,080
where you have developers coming and

848
00:29:37,080 --> 00:29:39,539
going and so while

849
00:29:39,539 --> 00:29:40,980
um I think there's a fair argument that

850
00:29:40,980 --> 00:29:43,020
package signing in inside of Linux

851
00:29:43,020 --> 00:29:45,840
distributions has has a number of issues

852
00:29:45,840 --> 00:29:46,860
um

853
00:29:46,860 --> 00:29:48,899
they're in a much better position at the

854
00:29:48,899 --> 00:29:51,059
moment than most you know than like Pi

855
00:29:51,059 --> 00:29:54,179
Pi where they have enabled gpg signing

856
00:29:54,179 --> 00:29:55,200
for

857
00:29:55,200 --> 00:29:58,440
10 15 years and the adoption is is low

858
00:29:58,440 --> 00:30:00,360
low single digits whereas you know for

859
00:30:00,360 --> 00:30:02,460
Debian you actually do see every package

860
00:30:02,460 --> 00:30:04,620
signed again there are some issues I

861
00:30:04,620 --> 00:30:05,640
think there are things we could learn

862
00:30:05,640 --> 00:30:07,140
from the tough project and bring into

863
00:30:07,140 --> 00:30:09,899
those implementations but

864
00:30:09,899 --> 00:30:11,460
for the most part

865
00:30:11,460 --> 00:30:13,320
they're in a better situation because

866
00:30:13,320 --> 00:30:15,120
they have a small number of trusted

867
00:30:15,120 --> 00:30:18,419
developers who can then manage keys so

868
00:30:18,419 --> 00:30:19,940
the revocation story could be better

869
00:30:19,940 --> 00:30:21,899
especially with some of this implicit

870
00:30:21,899 --> 00:30:25,799
revocation and so on but it hasn't been

871
00:30:25,799 --> 00:30:28,500
the most active area of focus it's

872
00:30:28,500 --> 00:30:29,520
certainly something I think that's

873
00:30:29,520 --> 00:30:31,740
that's on the the tough Project's radar

874
00:30:31,740 --> 00:30:33,539
and it's a place we'd love to have

875
00:30:33,539 --> 00:30:35,279
conversations I'll take a moment to plug

876
00:30:35,279 --> 00:30:37,799
in the openssf there is a working group

877
00:30:37,799 --> 00:30:39,659
called securian software repositories

878
00:30:39,659 --> 00:30:41,279
which has been convening a number of

879
00:30:41,279 --> 00:30:42,960
folks from various package repositories

880
00:30:42,960 --> 00:30:45,020
we have the best representation from

881
00:30:45,020 --> 00:30:48,419
language ecosystem libraries or package

882
00:30:48,419 --> 00:30:50,340
repositories like Pi Pi npm and so on

883
00:30:50,340 --> 00:30:52,140
but we have some representation there's

884
00:30:52,140 --> 00:30:54,480
someone from Gen 2 someone from Homebrew

885
00:30:54,480 --> 00:30:57,480
and so as we're as we're kind of scaling

886
00:30:57,480 --> 00:31:00,480
that up we'd love to hear more so I

887
00:31:00,480 --> 00:31:02,039
guess the the short answer is if you

888
00:31:02,039 --> 00:31:04,919
have a friendly Debian maintainer you'd

889
00:31:04,919 --> 00:31:06,240
like to send to that working group I

890
00:31:06,240 --> 00:31:06,960
think

891
00:31:06,960 --> 00:31:08,640
we could benefit a lot from having more

892
00:31:08,640 --> 00:31:11,279
voices in that room I think I saw a hand

893
00:31:11,279 --> 00:31:13,700
over here

894
00:31:18,659 --> 00:31:21,260
yes

895
00:31:23,159 --> 00:31:25,320
so there's a couple a couple of reasons

896
00:31:25,320 --> 00:31:28,620
so um oh yeah sorry so the question is

897
00:31:28,620 --> 00:31:30,840
about deleting

898
00:31:30,840 --> 00:31:34,260
um transactions from a record log and um

899
00:31:34,260 --> 00:31:36,179
one of the main kind of there's a couple

900
00:31:36,179 --> 00:31:37,559
of use cases here that have to do with

901
00:31:37,559 --> 00:31:38,820
this some of them have to do with

902
00:31:38,820 --> 00:31:42,179
privacy concerns or other like reasons

903
00:31:42,179 --> 00:31:45,299
for deletion and also the other the

904
00:31:45,299 --> 00:31:47,340
other question is if a package has a

905
00:31:47,340 --> 00:31:49,380
known vulnerability what do you do to

906
00:31:49,380 --> 00:31:51,000
make it clear that this entry in the log

907
00:31:51,000 --> 00:31:52,919
is not the one that that you want to be

908
00:31:52,919 --> 00:31:55,080
using there's a future entry that's the

909
00:31:55,080 --> 00:31:57,539
one that's that's better so there's kind

910
00:31:57,539 --> 00:32:01,220
of two angles on the on that

911
00:32:13,080 --> 00:32:14,700
sure so yeah the question is about the

912
00:32:14,700 --> 00:32:16,080
scalability issues and if you can

913
00:32:16,080 --> 00:32:18,179
highlight a couple of those yeah so I

914
00:32:18,179 --> 00:32:20,460
didn't want to get too much into the the

915
00:32:20,460 --> 00:32:21,840
weeds but I guess I can do that now

916
00:32:21,840 --> 00:32:25,980
about the tough scalability things so

917
00:32:25,980 --> 00:32:27,659
um tough has four different

918
00:32:27,659 --> 00:32:29,520
um what we call roles in tough that

919
00:32:29,520 --> 00:32:32,159
provide different specific things as

920
00:32:32,159 --> 00:32:33,299
part of that separation of

921
00:32:33,299 --> 00:32:35,760
responsibilities one of those roles in

922
00:32:35,760 --> 00:32:37,679
tough is responsible for the consistency

923
00:32:37,679 --> 00:32:40,140
of the tough repository this is we call

924
00:32:40,140 --> 00:32:41,820
it the snapshot role because it has a

925
00:32:41,820 --> 00:32:43,740
snapshot of the current state of

926
00:32:43,740 --> 00:32:45,360
signatures and artifacts that are

927
00:32:45,360 --> 00:32:47,820
currently in the repository and just

928
00:32:47,820 --> 00:32:49,860
make sure that any any like you know

929
00:32:49,860 --> 00:32:51,779
any signature that changes anything

930
00:32:51,779 --> 00:32:54,720
that's removed is then Incorporated in

931
00:32:54,720 --> 00:32:56,220
this in the snapshot

932
00:32:56,220 --> 00:32:58,320
however the way that's done in tough

933
00:32:58,320 --> 00:33:00,000
today which there are proposals to

934
00:33:00,000 --> 00:33:02,220
change this of course but is that you

935
00:33:02,220 --> 00:33:05,279
list the every metadata file inversion

936
00:33:05,279 --> 00:33:06,659
number

937
00:33:06,659 --> 00:33:08,340
um that's in the Repository

938
00:33:08,340 --> 00:33:11,820
which um in the if you have you know a

939
00:33:11,820 --> 00:33:13,500
lot of artifacts something in the

940
00:33:13,500 --> 00:33:15,120
millions of artifacts in your repository

941
00:33:15,120 --> 00:33:16,940
that lists can actually get fairly long

942
00:33:16,940 --> 00:33:20,100
and become noticeable when it comes to

943
00:33:20,100 --> 00:33:23,640
downloading things and so the um we're

944
00:33:23,640 --> 00:33:25,320
looking at various more clever ways to

945
00:33:25,320 --> 00:33:27,360
store that than a you know a linear list

946
00:33:27,360 --> 00:33:31,559
like you know trees to make it a login

947
00:33:31,559 --> 00:33:33,000
instead but but there's some security

948
00:33:33,000 --> 00:33:34,200
properties that we want to maintain

949
00:33:34,200 --> 00:33:37,500
while doing that just the the challenge

950
00:33:37,500 --> 00:33:38,519
I don't know if there's any others you

951
00:33:38,519 --> 00:33:39,659
want to talk about

952
00:33:39,659 --> 00:33:41,760
yeah that's that's the big one that that

953
00:33:41,760 --> 00:33:43,019
comes to mind

954
00:33:43,019 --> 00:33:44,220
um and then

955
00:33:44,220 --> 00:33:44,940
um

956
00:33:44,940 --> 00:33:46,799
grab us offline if you want to hear the

957
00:33:46,799 --> 00:33:49,080
the Gory details yes uh when it when it

958
00:33:49,080 --> 00:33:50,640
comes to Sig store uh Sig store

959
00:33:50,640 --> 00:33:52,860
scalability concerns uh some of those

960
00:33:52,860 --> 00:33:55,740
are around revocation uh right and this

961
00:33:55,740 --> 00:33:57,840
is something we see in the webpki is

962
00:33:57,840 --> 00:33:59,519
that revocation is actually quite tricky

963
00:33:59,519 --> 00:34:01,980
because the scale is so massive

964
00:34:01,980 --> 00:34:04,200
um when you're maintaining a certificate

965
00:34:04,200 --> 00:34:07,080
revocation list for the entire web that

966
00:34:07,080 --> 00:34:09,719
winds up getting you know too big to

967
00:34:09,719 --> 00:34:12,839
distribute to all of the sort of

968
00:34:12,839 --> 00:34:16,320
interested uh clients and so similarly

969
00:34:16,320 --> 00:34:18,659
in Sig store if if we have a replication

970
00:34:18,659 --> 00:34:20,639
solution that sort of bottlenecked on

971
00:34:20,639 --> 00:34:22,020
that on that Central

972
00:34:22,020 --> 00:34:25,020
um party then a revocation list the

973
00:34:25,020 --> 00:34:26,399
scalability problems become pretty

974
00:34:26,399 --> 00:34:27,619
immense there

975
00:34:27,619 --> 00:34:30,540
there's other other concerns like you

976
00:34:30,540 --> 00:34:33,060
know is one log for every sort of

977
00:34:33,060 --> 00:34:35,520
related Universe of you know One log

978
00:34:35,520 --> 00:34:38,820
that covers both npm you know uploads

979
00:34:38,820 --> 00:34:40,918
and Pipi uploads and you know maybe down

980
00:34:40,918 --> 00:34:43,619
the road Debbie in and every oci

981
00:34:43,619 --> 00:34:45,418
registry in the world right like you

982
00:34:45,418 --> 00:34:47,820
start to run into challenges here so can

983
00:34:47,820 --> 00:34:49,679
we maintain some separate name spaces

984
00:34:49,679 --> 00:34:51,239
and have them roll up into one log

985
00:34:51,239 --> 00:34:54,540
because you benefit from scale in

986
00:34:54,540 --> 00:34:57,060
security here right having sort of one

987
00:34:57,060 --> 00:34:59,099
central place means it's only one thing

988
00:34:59,099 --> 00:35:01,619
that you're going to have to monitor

989
00:35:01,619 --> 00:35:03,780
so that that scale is good but it comes

990
00:35:03,780 --> 00:35:05,339
with challenges of course when it when

991
00:35:05,339 --> 00:35:08,940
it relates to uh you know uh is that log

992
00:35:08,940 --> 00:35:10,560
going to be able to handle the volume of

993
00:35:10,560 --> 00:35:12,359
traffic that it that it experiences and

994
00:35:12,359 --> 00:35:14,280
so far it's it's been fine and there are

995
00:35:14,280 --> 00:35:16,140
some plans to to sort of Shard that out

996
00:35:16,140 --> 00:35:18,420
and and they're going along quite well

997
00:35:18,420 --> 00:35:20,940
um but you know if Sig store is as

998
00:35:20,940 --> 00:35:22,680
successful as the project as we hope it

999
00:35:22,680 --> 00:35:24,180
is then then that's going to become a

1000
00:35:24,180 --> 00:35:26,760
big issue pretty soon

1001
00:35:26,760 --> 00:35:27,540
okay

1002
00:35:27,540 --> 00:35:29,820
I have a question um so is there any

1003
00:35:29,820 --> 00:35:31,800
plans on running a public good health

1004
00:35:31,800 --> 00:35:32,880
instance

1005
00:35:32,880 --> 00:35:34,859
projects that I'm interested in using it

1006
00:35:34,859 --> 00:35:36,000
that's a good question so the question

1007
00:35:36,000 --> 00:35:37,859
is if there's a plan to create a public

1008
00:35:37,859 --> 00:35:39,839
good tough instance so this is

1009
00:35:39,839 --> 00:35:40,980
definitely something that we are

1010
00:35:40,980 --> 00:35:43,079
interested in I think we even have some

1011
00:35:43,079 --> 00:35:44,760
potential interest in folks who can

1012
00:35:44,760 --> 00:35:46,859
actually host it but I don't want to

1013
00:35:46,859 --> 00:35:48,420
promise anything on behalf of folks

1014
00:35:48,420 --> 00:35:50,880
hosting it until we have

1015
00:35:50,880 --> 00:35:54,119
until it's a little bit farther along

1016
00:35:54,119 --> 00:35:55,320
and that's probably going to have to be

1017
00:35:55,320 --> 00:35:56,940
the last question all right thank you

1018
00:35:56,940 --> 00:35:57,760
everyone

1019
00:35:57,760 --> 00:36:02,069
[Applause]

