1
00:00:00,060 --> 00:00:02,460
all right welcome everyone

2
00:00:02,460 --> 00:00:04,560
um my name is Michael Peters I'm an

3
00:00:04,560 --> 00:00:07,259
engineer at Red Hat I work primarily in

4
00:00:07,259 --> 00:00:09,059
the security space in emerging

5
00:00:09,059 --> 00:00:11,820
Technologies I'm a member of the keyline

6
00:00:11,820 --> 00:00:13,200
project if you're not familiar with key

7
00:00:13,200 --> 00:00:14,580
lime we'll touch briefly on key lime in

8
00:00:14,580 --> 00:00:15,599
a bit

9
00:00:15,599 --> 00:00:18,180
um but uh today's talk is zero trust

10
00:00:18,180 --> 00:00:20,900
workload identity in kubernetes is

11
00:00:20,900 --> 00:00:24,300
really Broad and all of the pretty much

12
00:00:24,300 --> 00:00:26,220
every slide I have in here could be a

13
00:00:26,220 --> 00:00:28,560
whole talk in and of itself

14
00:00:28,560 --> 00:00:30,359
um just the the ideas and Concepts

15
00:00:30,359 --> 00:00:32,759
behind zero trust what is identity

16
00:00:32,759 --> 00:00:34,860
um and and how that integrates with

17
00:00:34,860 --> 00:00:36,899
everything in the in the cloud native

18
00:00:36,899 --> 00:00:39,899
space is tricky and Myriad and so we're

19
00:00:39,899 --> 00:00:41,219
just going to be sort of doing a general

20
00:00:41,219 --> 00:00:42,780
overview of all that if you want more

21
00:00:42,780 --> 00:00:45,540
information I'll try to answer that so

22
00:00:45,540 --> 00:00:47,340
I'm going to make some assumptions as we

23
00:00:47,340 --> 00:00:49,020
go if those assumptions prove incorrect

24
00:00:49,020 --> 00:00:50,520
just let me know wait wave your hand and

25
00:00:50,520 --> 00:00:52,200
say something uh have me back up

26
00:00:52,200 --> 00:00:54,719
whatever that'll work

27
00:00:54,719 --> 00:00:57,719
so talking about zero trust

28
00:00:57,719 --> 00:01:00,480
it's kind of a misnomer zero trust

29
00:01:00,480 --> 00:01:03,180
actually means zero implicit trust it's

30
00:01:03,180 --> 00:01:05,880
not as um people don't want to go around

31
00:01:05,880 --> 00:01:08,220
like ZT is a better acronym than zit

32
00:01:08,220 --> 00:01:09,479
right

33
00:01:09,479 --> 00:01:12,600
um so uh but when we're talking about

34
00:01:12,600 --> 00:01:14,100
zero trust you can't have zero trust you

35
00:01:14,100 --> 00:01:15,720
have to trust something but what we're

36
00:01:15,720 --> 00:01:17,880
saying is we don't trust things just by

37
00:01:17,880 --> 00:01:20,100
where they are on the network so this is

38
00:01:20,100 --> 00:01:22,680
an architectural pattern where we apply

39
00:01:22,680 --> 00:01:24,540
security at the asset level not the

40
00:01:24,540 --> 00:01:27,600
location level so in the past

41
00:01:27,600 --> 00:01:29,040
a lot of things were set up in this

42
00:01:29,040 --> 00:01:31,200
castle and moat scenario where the

43
00:01:31,200 --> 00:01:32,520
castle is your data center and you're

44
00:01:32,520 --> 00:01:34,799
trying to protect it and you have you

45
00:01:34,799 --> 00:01:37,439
know a moat and walls uh and guards

46
00:01:37,439 --> 00:01:39,960
around the the data center

47
00:01:39,960 --> 00:01:41,579
um so your your firewalls your network

48
00:01:41,579 --> 00:01:45,479
segmentation your ACLS your vpns and so

49
00:01:45,479 --> 00:01:46,860
everything was focused on this perimeter

50
00:01:46,860 --> 00:01:49,320
security if we lock everything out then

51
00:01:49,320 --> 00:01:51,360
we can trust everything inside and that

52
00:01:51,360 --> 00:01:53,220
turns out to not be the case for lots of

53
00:01:53,220 --> 00:01:55,020
reasons

54
00:01:55,020 --> 00:01:58,560
um and even when this was implemented if

55
00:01:58,560 --> 00:02:01,680
it was done well then it was actually a

56
00:02:01,680 --> 00:02:03,960
burden and very strict and rigid in how

57
00:02:03,960 --> 00:02:05,520
things could be set up and this led to a

58
00:02:05,520 --> 00:02:07,520
lot of the conflict that exists between

59
00:02:07,520 --> 00:02:09,899
developers and operations and developers

60
00:02:09,899 --> 00:02:11,520
and security people

61
00:02:11,520 --> 00:02:13,379
um and when it wasn't super well done

62
00:02:13,379 --> 00:02:15,480
when it was lacks it led Intruders in

63
00:02:15,480 --> 00:02:17,520
and there were lots of holes in in the

64
00:02:17,520 --> 00:02:19,640
castle

65
00:02:19,860 --> 00:02:24,480
so as things started to grow and and the

66
00:02:24,480 --> 00:02:25,800
modern world started to change a bit

67
00:02:25,800 --> 00:02:27,480
right we have a whole bunch of things

68
00:02:27,480 --> 00:02:29,700
coming into microservices and bring your

69
00:02:29,700 --> 00:02:32,400
own devices and API gateways multi-cloud

70
00:02:32,400 --> 00:02:34,920
setups and serverless functions running

71
00:02:34,920 --> 00:02:36,360
all over the place and so your

72
00:02:36,360 --> 00:02:38,340
definition of of

73
00:02:38,340 --> 00:02:40,500
um what could be inside of this these

74
00:02:40,500 --> 00:02:43,500
walls changed and you you couldn't just

75
00:02:43,500 --> 00:02:45,420
always get a VPN connection between one

76
00:02:45,420 --> 00:02:47,040
thing or another or there's a constant

77
00:02:47,040 --> 00:02:48,900
battle every time you wanted to bring

78
00:02:48,900 --> 00:02:50,700
some new service into your to your

79
00:02:50,700 --> 00:02:52,920
system you'd have to contact security to

80
00:02:52,920 --> 00:02:55,319
set up these you know tunnels or vpns or

81
00:02:55,319 --> 00:02:56,760
whatever and so it just became this mess

82
00:02:56,760 --> 00:02:57,900
and

83
00:02:57,900 --> 00:03:00,840
um you essentially had a world where

84
00:03:00,840 --> 00:03:02,940
the walls of your Castle need to

85
00:03:02,940 --> 00:03:04,260
basically Encompass everything which

86
00:03:04,260 --> 00:03:05,760
just is not possible

87
00:03:05,760 --> 00:03:08,400
so we have a larger number of smaller

88
00:03:08,400 --> 00:03:10,440
pieces of software larger attack

89
00:03:10,440 --> 00:03:12,659
surfaces and the old security paradigms

90
00:03:12,659 --> 00:03:14,340
of mapping and restricting everything by

91
00:03:14,340 --> 00:03:15,900
port and IP addresses just doesn't work

92
00:03:15,900 --> 00:03:18,500
anymore

93
00:03:19,500 --> 00:03:23,519
so another portion of zero trust that's

94
00:03:23,519 --> 00:03:25,260
important is identity so it's kind of

95
00:03:25,260 --> 00:03:27,840
central to zero trust and that identity

96
00:03:27,840 --> 00:03:29,879
is no longer implicit but has to be very

97
00:03:29,879 --> 00:03:31,680
explicit

98
00:03:31,680 --> 00:03:32,819
um identity itself is a little

99
00:03:32,819 --> 00:03:35,280
complicated like uh in in the real world

100
00:03:35,280 --> 00:03:36,959
when when you're talking about your

101
00:03:36,959 --> 00:03:38,459
personal Identity or how you prove your

102
00:03:38,459 --> 00:03:39,959
identity you usually have to rely on

103
00:03:39,959 --> 00:03:41,760
some third party right my government

104
00:03:41,760 --> 00:03:43,440
issued ID well do I trust your

105
00:03:43,440 --> 00:03:46,440
government it depends right if if it's

106
00:03:46,440 --> 00:03:48,599
the state of North Carolina trusting a

107
00:03:48,599 --> 00:03:50,700
Seattle driver's license okay but if

108
00:03:50,700 --> 00:03:52,620
it's me traveling to Paris they're not

109
00:03:52,620 --> 00:03:53,879
going to care that I have a North

110
00:03:53,879 --> 00:03:56,519
Carolina driver's license right so the

111
00:03:56,519 --> 00:03:58,560
how we trust those third parties

112
00:03:58,560 --> 00:04:01,019
becomes part of the identity question

113
00:04:01,019 --> 00:04:03,360
and then the old castle in most scenario

114
00:04:03,360 --> 00:04:05,340
we have a lot of cases where identity

115
00:04:05,340 --> 00:04:06,980
wasn't even

116
00:04:06,980 --> 00:04:10,080
existent right a lot of services could

117
00:04:10,080 --> 00:04:12,000
be non-credentialed it's just like well

118
00:04:12,000 --> 00:04:13,739
we're both inside the same VPN so one

119
00:04:13,739 --> 00:04:14,819
service can talk to another and we're

120
00:04:14,819 --> 00:04:17,940
good and and as we go to zero trust and

121
00:04:17,940 --> 00:04:19,620
zero implicit trust we can't have that

122
00:04:19,620 --> 00:04:20,699
anymore

123
00:04:20,699 --> 00:04:22,380
so

124
00:04:22,380 --> 00:04:23,880
um and even in the scenarios where

125
00:04:23,880 --> 00:04:25,199
identity was existent it was usually

126
00:04:25,199 --> 00:04:26,759
tied to some sort of shared credential

127
00:04:26,759 --> 00:04:28,320
some secret

128
00:04:28,320 --> 00:04:29,940
um so the identity I proved my identity

129
00:04:29,940 --> 00:04:33,000
by saying I have this password and you

130
00:04:33,000 --> 00:04:34,500
recognize that password and that proves

131
00:04:34,500 --> 00:04:35,820
my identity

132
00:04:35,820 --> 00:04:37,979
and this is week two Insider threats

133
00:04:37,979 --> 00:04:39,900
this week to credential compromises

134
00:04:39,900 --> 00:04:41,639
credential leaks if I can get that

135
00:04:41,639 --> 00:04:43,259
password now I can impersonate you all

136
00:04:43,259 --> 00:04:45,479
over the place

137
00:04:45,479 --> 00:04:47,400
um a secret rotation is hard to do right

138
00:04:47,400 --> 00:04:49,800
if if that password gets leaked now I

139
00:04:49,800 --> 00:04:50,820
have to change it in all the right

140
00:04:50,820 --> 00:04:52,620
places and if I don't don't do it

141
00:04:52,620 --> 00:04:54,720
correctly I can cost outages

142
00:04:54,720 --> 00:04:56,520
and then how do we get that secret into

143
00:04:56,520 --> 00:04:58,080
the workload to begin with right are we

144
00:04:58,080 --> 00:05:00,180
embedding in code which is obviously a

145
00:05:00,180 --> 00:05:02,520
bad idea are we passing it around

146
00:05:02,520 --> 00:05:04,020
through the environment which could be

147
00:05:04,020 --> 00:05:05,759
leaked in other ways are we

148
00:05:05,759 --> 00:05:07,620
um like how are we how are we giving

149
00:05:07,620 --> 00:05:09,120
that secret

150
00:05:09,120 --> 00:05:10,139
um

151
00:05:10,139 --> 00:05:13,440
to the workload and then how do we apply

152
00:05:13,440 --> 00:05:15,419
identities to ephemeral things so we're

153
00:05:15,419 --> 00:05:17,580
talking serverless functions we're

154
00:05:17,580 --> 00:05:19,259
talking cicd build pipelines and things

155
00:05:19,259 --> 00:05:20,820
like that that just or even just a

156
00:05:20,820 --> 00:05:23,039
natural system that expands and

157
00:05:23,039 --> 00:05:26,580
contracts um under its elastic load

158
00:05:26,580 --> 00:05:28,740
so solving this identity crisis is

159
00:05:28,740 --> 00:05:30,919
crucial identities have to be explicit

160
00:05:30,919 --> 00:05:34,139
ACLS are based on identities but not

161
00:05:34,139 --> 00:05:36,240
just credentials or locations and

162
00:05:36,240 --> 00:05:38,820
everything has an identity in a zero

163
00:05:38,820 --> 00:05:40,500
trust system people machines workloads

164
00:05:40,500 --> 00:05:42,680
everything

165
00:05:42,780 --> 00:05:45,180
so this is where the spiffy comes in so

166
00:05:45,180 --> 00:05:46,919
just how many people are here familiar

167
00:05:46,919 --> 00:05:48,360
spiffy

168
00:05:48,360 --> 00:05:50,639
how many people use spiffy or spire

169
00:05:50,639 --> 00:05:53,340
it's a little less okay so um spiffy

170
00:05:53,340 --> 00:05:56,479
started as a project in 2016 by Joe beta

171
00:05:56,479 --> 00:05:59,520
and trying to to get organizations to

172
00:05:59,520 --> 00:06:00,900
come together and take all this

173
00:06:00,900 --> 00:06:03,120
knowledge that we have about identity

174
00:06:03,120 --> 00:06:04,919
and and um

175
00:06:04,919 --> 00:06:06,840
security and bring them together into a

176
00:06:06,840 --> 00:06:09,419
single project spiffy stands for the

177
00:06:09,419 --> 00:06:11,280
secure production identity framework for

178
00:06:11,280 --> 00:06:12,900
everyone

179
00:06:12,900 --> 00:06:14,699
and they wanted to leverage a lot of

180
00:06:14,699 --> 00:06:17,580
existing stuff so primarily using x509

181
00:06:17,580 --> 00:06:18,780
certificates

182
00:06:18,780 --> 00:06:23,819
and JWT so the Json web tokens

183
00:06:23,819 --> 00:06:27,120
um preferably x509 those are more secure

184
00:06:27,120 --> 00:06:31,139
and can be rotated and expired and but

185
00:06:31,139 --> 00:06:32,160
for both of these there's a lot of

186
00:06:32,160 --> 00:06:33,419
tooling available and a lot of systems

187
00:06:33,419 --> 00:06:36,840
will take them as identity to begin with

188
00:06:36,840 --> 00:06:39,600
and so we also want to ident a divorce

189
00:06:39,600 --> 00:06:42,120
identity just from the the

190
00:06:42,120 --> 00:06:43,680
um the concept of identity from the

191
00:06:43,680 --> 00:06:45,120
credential and from the network location

192
00:06:45,120 --> 00:06:47,460
and spiffy also tries to solve what we

193
00:06:47,460 --> 00:06:50,160
call the bottom Turtle problem

194
00:06:50,160 --> 00:06:52,080
is anyone familiar with this old story

195
00:06:52,080 --> 00:06:54,539
about turtles all the way down

196
00:06:54,539 --> 00:06:57,180
okay so apparently there's this

197
00:06:57,180 --> 00:06:58,800
apocryphal story of a guy giving a

198
00:06:58,800 --> 00:07:01,800
lecture and a lady a lecture about the

199
00:07:01,800 --> 00:07:04,199
the world floating through the the

200
00:07:04,199 --> 00:07:06,720
universe and that this lady old lady

201
00:07:06,720 --> 00:07:08,639
said no the world rests on a turtle on

202
00:07:08,639 --> 00:07:10,139
the back of a turtle and he says well

203
00:07:10,139 --> 00:07:11,580
what does the turtle rest on and she's

204
00:07:11,580 --> 00:07:13,380
like don't aha it's Turtles all the way

205
00:07:13,380 --> 00:07:16,440
down so like once you have this concept

206
00:07:16,440 --> 00:07:18,419
of I need this Secret

207
00:07:18,419 --> 00:07:20,520
well how do I protect that secret well I

208
00:07:20,520 --> 00:07:23,460
can use say pki a public private key

209
00:07:23,460 --> 00:07:26,400
I'll encrypt it with the private key and

210
00:07:26,400 --> 00:07:28,500
then let go the public key well then how

211
00:07:28,500 --> 00:07:31,020
do I get access to the public key or oh

212
00:07:31,020 --> 00:07:32,819
no I'll protect that by such and like so

213
00:07:32,819 --> 00:07:34,560
you get in this cycle of I need to

214
00:07:34,560 --> 00:07:35,520
protect this credential with another

215
00:07:35,520 --> 00:07:37,560
credential with another credential

216
00:07:37,560 --> 00:07:39,900
and so the bottom turtle is what we call

217
00:07:39,900 --> 00:07:41,780
our root of trust

218
00:07:41,780 --> 00:07:43,860
there's always a root of trust in the

219
00:07:43,860 --> 00:07:45,840
system even if it's not explicit so if

220
00:07:45,840 --> 00:07:47,160
you don't know what your root of trust

221
00:07:47,160 --> 00:07:48,780
is you're probably in a bad State

222
00:07:48,780 --> 00:07:50,160
because you're trusting something you're

223
00:07:50,160 --> 00:07:52,440
putting your weight on something that

224
00:07:52,440 --> 00:07:54,599
you don't know how strong that is

225
00:07:54,599 --> 00:07:56,099
and

226
00:07:56,099 --> 00:07:58,620
um so for as a good zero trust system or

227
00:07:58,620 --> 00:08:02,520
ZT system we need a solid route of trust

228
00:08:02,520 --> 00:08:04,319
um with spiffy is our root of trust

229
00:08:04,319 --> 00:08:06,660
instead of some ultimate password or

230
00:08:06,660 --> 00:08:09,000
last password that we try to protect

231
00:08:09,000 --> 00:08:11,940
um it lets us put the trust in something

232
00:08:11,940 --> 00:08:14,520
solid which bases the identity not on

233
00:08:14,520 --> 00:08:16,139
some shared secret but on the actual

234
00:08:16,139 --> 00:08:18,240
identity of that workload and the nodes

235
00:08:18,240 --> 00:08:19,199
that it's running on and we'll talk

236
00:08:19,199 --> 00:08:20,520
about that in a second how does how does

237
00:08:20,520 --> 00:08:22,680
spiffy guarantee the identity of that

238
00:08:22,680 --> 00:08:25,379
that ultimate piece

239
00:08:25,379 --> 00:08:28,139
so the spiffy consists of a couple of

240
00:08:28,139 --> 00:08:30,599
things one first off spiffy is a speck

241
00:08:30,599 --> 00:08:32,640
so there's lots of things that can

242
00:08:32,640 --> 00:08:34,380
Implement spiffy and in fact in the

243
00:08:34,380 --> 00:08:35,520
cloud native

244
00:08:35,520 --> 00:08:36,200
um

245
00:08:36,200 --> 00:08:38,399
ecosystem there are a lot of things that

246
00:08:38,399 --> 00:08:39,899
Implement different parts of spiffy

247
00:08:39,899 --> 00:08:41,279
because they're either consumers or

248
00:08:41,279 --> 00:08:42,958
producers of different parts of spiffy

249
00:08:42,958 --> 00:08:45,000
but it consists of several parts the

250
00:08:45,000 --> 00:08:46,500
spiffy ID

251
00:08:46,500 --> 00:08:48,899
which is a text representation of the

252
00:08:48,899 --> 00:08:52,500
identity the svid which is the identity

253
00:08:52,500 --> 00:08:55,140
document which is a cryptographically

254
00:08:55,140 --> 00:08:57,839
verified document that contains this ID

255
00:08:57,839 --> 00:09:02,700
and it's usually an x509 cert or a JWT

256
00:09:02,700 --> 00:09:05,519
we need the workload API and this is a

257
00:09:05,519 --> 00:09:08,339
node local API that workloads talk to to

258
00:09:08,339 --> 00:09:10,920
get their identity to get these um

259
00:09:10,920 --> 00:09:12,959
the svid

260
00:09:12,959 --> 00:09:17,100
we have the trust bundle which is a set

261
00:09:17,100 --> 00:09:19,620
of public keys for that spiffy issuing

262
00:09:19,620 --> 00:09:22,620
authority and for that sort of defines

263
00:09:22,620 --> 00:09:24,500
that what we call the trust domain

264
00:09:24,500 --> 00:09:26,880
and then Federation which allows you to

265
00:09:26,880 --> 00:09:29,899
have multiple spiffy setups that share

266
00:09:29,899 --> 00:09:32,760
information across explicitly by sharing

267
00:09:32,760 --> 00:09:35,640
trust bundles in a federation so what

268
00:09:35,640 --> 00:09:37,500
spiffy is not

269
00:09:37,500 --> 00:09:39,839
it's not designed for non-software so

270
00:09:39,839 --> 00:09:41,339
this is all about software workload

271
00:09:41,339 --> 00:09:43,440
identity so it's not good for humans

272
00:09:43,440 --> 00:09:46,260
animals artwork nfts anything like that

273
00:09:46,260 --> 00:09:48,180
like it's just this is identifying

274
00:09:48,180 --> 00:09:49,380
software

275
00:09:49,380 --> 00:09:51,480
it's also not an authorization framework

276
00:09:51,480 --> 00:09:55,040
identity is necessary for authorization

277
00:09:55,040 --> 00:09:57,660
so you need something to say what is my

278
00:09:57,660 --> 00:09:59,640
definitive Identity or how do I prove my

279
00:09:59,640 --> 00:10:01,380
identity but that doesn't say can I run

280
00:10:01,380 --> 00:10:02,399
this workload right it's not the

281
00:10:02,399 --> 00:10:04,200
authorization part of that you have to

282
00:10:04,200 --> 00:10:05,580
implement that yourself and there's lots

283
00:10:05,580 --> 00:10:06,899
of things that know how to talk about

284
00:10:06,899 --> 00:10:09,839
and with spiffy identities

285
00:10:09,839 --> 00:10:12,540
um but that that's not what spiffy does

286
00:10:12,540 --> 00:10:15,240
so it's it's like tangential and once

287
00:10:15,240 --> 00:10:16,320
you have spiffy and once you have

288
00:10:16,320 --> 00:10:18,660
identity solved then your authorization

289
00:10:18,660 --> 00:10:21,839
actually becomes a much easier problem

290
00:10:21,839 --> 00:10:24,839
so the spiffy ID is just a URI with a

291
00:10:24,839 --> 00:10:26,220
spiffy prefix

292
00:10:26,220 --> 00:10:27,899
we have a domain which is our trust

293
00:10:27,899 --> 00:10:30,180
domain so that's everything under this

294
00:10:30,180 --> 00:10:33,320
domain is issued by this spiffy setup

295
00:10:33,320 --> 00:10:36,779
and we trust it and then everything on

296
00:10:36,779 --> 00:10:40,200
the path is the identifier

297
00:10:40,200 --> 00:10:42,180
it can be hierarchical it could be

298
00:10:42,180 --> 00:10:45,300
location based like you say EU versus US

299
00:10:45,300 --> 00:10:47,880
it could be name value pairs spiffy

300
00:10:47,880 --> 00:10:49,200
doesn't say what this needs to be you

301
00:10:49,200 --> 00:10:51,000
can do whatever you want that but that

302
00:10:51,000 --> 00:10:52,680
doesn't mean you can do whatever you

303
00:10:52,680 --> 00:10:54,240
want because a lot of systems have their

304
00:10:54,240 --> 00:10:56,100
own idea of what this spiffy ID should

305
00:10:56,100 --> 00:10:57,480
look like and since we're talking about

306
00:10:57,480 --> 00:10:59,160
kubernetes the specific ID will look

307
00:10:59,160 --> 00:11:00,600
something like this with your cluster

308
00:11:00,600 --> 00:11:03,000
name as your trusted root or your

309
00:11:03,000 --> 00:11:06,899
trusted domain then we have an s slash

310
00:11:06,899 --> 00:11:10,019
the namespace name slash sa slash your

311
00:11:10,019 --> 00:11:11,640
service account

312
00:11:11,640 --> 00:11:13,200
and so

313
00:11:13,200 --> 00:11:15,180
this means that our identity of what

314
00:11:15,180 --> 00:11:16,980
this workload is is tied to which

315
00:11:16,980 --> 00:11:18,779
cluster is running which namespace is in

316
00:11:18,779 --> 00:11:20,880
and what service account is using and

317
00:11:20,880 --> 00:11:23,640
those are in most setups in kubernetes I

318
00:11:23,640 --> 00:11:26,820
use spiffy our ID for the workload this

319
00:11:26,820 --> 00:11:28,500
means that your service account you need

320
00:11:28,500 --> 00:11:30,600
to be kind of conscious of how you use

321
00:11:30,600 --> 00:11:32,160
that and not use that across multiple

322
00:11:32,160 --> 00:11:34,200
things that are not the same workload or

323
00:11:34,200 --> 00:11:35,579
they'll end up with the same ID and then

324
00:11:35,579 --> 00:11:37,019
you can't really distinguish them when

325
00:11:37,019 --> 00:11:39,720
you're talking about authorization

326
00:11:39,720 --> 00:11:40,980
um but it makes sense that like some

327
00:11:40,980 --> 00:11:42,839
pods are gonna a lot of pods are going

328
00:11:42,839 --> 00:11:44,040
to be having the same ID right if

329
00:11:44,040 --> 00:11:45,060
they're part of the same deployment or

330
00:11:45,060 --> 00:11:46,920
same service they're going to be they

331
00:11:46,920 --> 00:11:49,440
should logically have the same spiffy ID

332
00:11:49,440 --> 00:11:51,899
but you should not if you're using

333
00:11:51,899 --> 00:11:55,260
spiffy inspire you shouldn't be reusing

334
00:11:55,260 --> 00:11:56,640
your service accounts where things are

335
00:11:56,640 --> 00:12:00,019
not logically the same identity

336
00:12:00,959 --> 00:12:03,000
so that brings us to spire

337
00:12:03,000 --> 00:12:05,640
so Spire is the spiffy runtime

338
00:12:05,640 --> 00:12:07,560
environment and is the production

339
00:12:07,560 --> 00:12:09,959
reference implementation of spire and as

340
00:12:09,959 --> 00:12:11,700
I said before spiers of spec or spiffy

341
00:12:11,700 --> 00:12:14,880
suspect sorry this is it's confusing it

342
00:12:14,880 --> 00:12:16,079
confuses me even when I talk about it

343
00:12:16,079 --> 00:12:18,120
most of the time so a lot of times

344
00:12:18,120 --> 00:12:20,040
you'll say spiffy or Spire when you're

345
00:12:20,040 --> 00:12:21,060
actually meeting one or the other I'll

346
00:12:21,060 --> 00:12:22,380
try to be explicit when I'm talking

347
00:12:22,380 --> 00:12:23,459
about and a lot of times when you're

348
00:12:23,459 --> 00:12:24,720
talking about just the system in general

349
00:12:24,720 --> 00:12:26,579
you'll say spiffy Spire right to lump

350
00:12:26,579 --> 00:12:27,600
them together

351
00:12:27,600 --> 00:12:30,420
but Spire is the implementation the

352
00:12:30,420 --> 00:12:32,760
production implementation of spiffy and

353
00:12:32,760 --> 00:12:34,140
there's other things that can introduce

354
00:12:34,140 --> 00:12:36,899
or that can Implement different parts of

355
00:12:36,899 --> 00:12:38,640
the spiffy spec like your service mesh

356
00:12:38,640 --> 00:12:39,959
or your

357
00:12:39,959 --> 00:12:42,560
um whatever

358
00:12:43,200 --> 00:12:45,420
um and

359
00:12:45,420 --> 00:12:47,880
um this is the architecture of spire so

360
00:12:47,880 --> 00:12:51,600
we have a Aspire server and agents so

361
00:12:51,600 --> 00:12:54,839
the agents live in kubernetes uh on each

362
00:12:54,839 --> 00:12:57,300
node is a Daemon set

363
00:12:57,300 --> 00:13:01,560
and the what we call the attestation

364
00:13:01,560 --> 00:13:03,899
which is basically

365
00:13:03,899 --> 00:13:04,740
um

366
00:13:04,740 --> 00:13:08,040
some set of of facts that that we can

367
00:13:08,040 --> 00:13:11,459
make provable observations about

368
00:13:11,459 --> 00:13:13,440
um this attestation happens between

369
00:13:13,440 --> 00:13:16,440
these the agent and the node

370
00:13:16,440 --> 00:13:19,320
um so in Inspire we want two identities

371
00:13:19,320 --> 00:13:21,300
we want the node to have an identity and

372
00:13:21,300 --> 00:13:22,800
then we want the workload on that node

373
00:13:22,800 --> 00:13:25,260
to have its own identity

374
00:13:25,260 --> 00:13:27,420
um so the agents and the server work

375
00:13:27,420 --> 00:13:29,040
together to do both

376
00:13:29,040 --> 00:13:31,260
so first off

377
00:13:31,260 --> 00:13:33,300
um when a node comes up and has a Spire

378
00:13:33,300 --> 00:13:34,680
agent come up it wants to prove his

379
00:13:34,680 --> 00:13:39,000
identity to the server and this could be

380
00:13:39,000 --> 00:13:40,079
done in a couple different ways and

381
00:13:40,079 --> 00:13:41,459
there's there's different ways this

382
00:13:41,459 --> 00:13:42,720
happens depending on your environment

383
00:13:42,720 --> 00:13:44,519
but it basically

384
00:13:44,519 --> 00:13:47,339
comes up with some provable or facts

385
00:13:47,339 --> 00:13:49,079
about the system that it then sends to

386
00:13:49,079 --> 00:13:52,500
the server and then the server usually

387
00:13:52,500 --> 00:13:55,380
by a third party attest to the validity

388
00:13:55,380 --> 00:13:57,540
of those facts

389
00:13:57,540 --> 00:13:59,300
and then once the node has this identity

390
00:13:59,300 --> 00:14:01,560
workloads can then communicate with the

391
00:14:01,560 --> 00:14:03,360
agent over this workload API and say

392
00:14:03,360 --> 00:14:05,700
what is now give me my identity what is

393
00:14:05,700 --> 00:14:08,040
my identity give me my my cert that

394
00:14:08,040 --> 00:14:10,980
asserts my identity and then the agent

395
00:14:10,980 --> 00:14:14,100
will query the

396
00:14:14,100 --> 00:14:17,220
the kernel usually and other things on

397
00:14:17,220 --> 00:14:18,300
the Kernel depending on the plugins

398
00:14:18,300 --> 00:14:20,339
you're using to find out what is the

399
00:14:20,339 --> 00:14:22,139
identity of this workload and then I

400
00:14:22,139 --> 00:14:24,240
send that back to the

401
00:14:24,240 --> 00:14:24,959
um

402
00:14:24,959 --> 00:14:26,459
server to make sure that this workload

403
00:14:26,459 --> 00:14:28,079
has been registered and then I can get

404
00:14:28,079 --> 00:14:29,399
this ass fit now it seems like a

405
00:14:29,399 --> 00:14:30,720
complicated process but there's a lot of

406
00:14:30,720 --> 00:14:32,040
good caching involved in that so it's

407
00:14:32,040 --> 00:14:34,019
relatively quick

408
00:14:34,019 --> 00:14:36,899
and then the identity gives back is

409
00:14:36,899 --> 00:14:39,240
giving back its spiffy ID and an svid

410
00:14:39,240 --> 00:14:42,120
that's this certificate or JWT token

411
00:14:42,120 --> 00:14:44,160
that cryptographically validates my

412
00:14:44,160 --> 00:14:45,540
identity

413
00:14:45,540 --> 00:14:49,079
the sfit is a short-lived certificate

414
00:14:49,079 --> 00:14:49,920
um

415
00:14:49,920 --> 00:14:52,760
that will

416
00:14:52,760 --> 00:14:55,500
that Spire will take care of rotating

417
00:14:55,500 --> 00:14:56,699
the agent will take care of rotating

418
00:14:56,699 --> 00:14:57,839
that and then notifying the workload

419
00:14:57,839 --> 00:14:59,100
when it's rotated so if you've ever

420
00:14:59,100 --> 00:15:01,800
dealt with like SSL TLS certificates and

421
00:15:01,800 --> 00:15:03,480
rotation on that you know how much of a

422
00:15:03,480 --> 00:15:04,980
pain it is right there's there's ways to

423
00:15:04,980 --> 00:15:06,180
automate that with like let's encrypt

424
00:15:06,180 --> 00:15:07,860
and things like that this fire can take

425
00:15:07,860 --> 00:15:09,360
care of all that for you and you can

426
00:15:09,360 --> 00:15:11,639
make these credentials very short-lived

427
00:15:11,639 --> 00:15:13,500
on on the order of a few minutes if you

428
00:15:13,500 --> 00:15:15,180
want obviously there's scalability

429
00:15:15,180 --> 00:15:16,320
issues in there so you find the right

430
00:15:16,320 --> 00:15:17,399
value but it means that if this

431
00:15:17,399 --> 00:15:18,959
credential is ever compromised it's

432
00:15:18,959 --> 00:15:22,399
usually dead fairly quickly

433
00:15:22,500 --> 00:15:24,779
um so this idea of these sort of

434
00:15:24,779 --> 00:15:26,699
credentials living outside of the

435
00:15:26,699 --> 00:15:28,199
workload but being attached to the

436
00:15:28,199 --> 00:15:29,459
workload

437
00:15:29,459 --> 00:15:31,019
um I've heard it referred to as ambient

438
00:15:31,019 --> 00:15:33,540
credentials which I really like meaning

439
00:15:33,540 --> 00:15:35,880
that it's not something shared that the

440
00:15:35,880 --> 00:15:37,980
workload has embedded it's not just

441
00:15:37,980 --> 00:15:39,540
there but it accompanies a workload and

442
00:15:39,540 --> 00:15:42,860
it's part of the workloads identity

443
00:15:43,620 --> 00:15:45,660
so as I mentioned before Spire uses a

444
00:15:45,660 --> 00:15:46,940
plug-in architecture

445
00:15:46,940 --> 00:15:49,800
so the first set of plugins is

446
00:15:49,800 --> 00:15:51,360
communicating with the Upstream

447
00:15:51,360 --> 00:15:54,000
Authority so you can have Spire to be

448
00:15:54,000 --> 00:15:57,420
your ca your ultimate route of trust for

449
00:15:57,420 --> 00:15:59,639
your your certificate Authority or you

450
00:15:59,639 --> 00:16:00,839
can tie it to an existing CA

451
00:16:00,839 --> 00:16:03,680
infrastructure if you haven't

452
00:16:03,779 --> 00:16:05,519
um and then the other parts of the the

453
00:16:05,519 --> 00:16:07,680
that are plugins are the node testers

454
00:16:07,680 --> 00:16:10,079
and the workloaded testers and so these

455
00:16:10,079 --> 00:16:12,360
would be plugins both on the server and

456
00:16:12,360 --> 00:16:15,000
the the agent side

457
00:16:15,000 --> 00:16:16,320
um so for instance let's talk about like

458
00:16:16,320 --> 00:16:17,579
a real world scenario like an AWS

459
00:16:17,579 --> 00:16:18,600
deployment if you have a kubernetes

460
00:16:18,600 --> 00:16:20,880
cluster in AWS and you have Spire

461
00:16:20,880 --> 00:16:23,820
running on that the Spire agent will

462
00:16:23,820 --> 00:16:27,600
query the local AWS API that's available

463
00:16:27,600 --> 00:16:29,760
to that node to find out who am I what

464
00:16:29,760 --> 00:16:31,740
is this node gathers that information

465
00:16:31,740 --> 00:16:33,899
sends it off to the Spire server and

466
00:16:33,899 --> 00:16:35,339
then the Spire server will also talk to

467
00:16:35,339 --> 00:16:38,279
AWS out of bound out of band to confirm

468
00:16:38,279 --> 00:16:39,660
all this information that I just got

469
00:16:39,660 --> 00:16:41,639
from the Spire agent once they can agree

470
00:16:41,639 --> 00:16:43,079
that they both can get the same

471
00:16:43,079 --> 00:16:44,820
information from AWS they can now say

472
00:16:44,820 --> 00:16:46,920
all right this node is this node in AWS

473
00:16:46,920 --> 00:16:49,259
so that we can have that identity now we

474
00:16:49,259 --> 00:16:51,720
can issue certificates to that node and

475
00:16:51,720 --> 00:16:53,820
that node can now issue identity based

476
00:16:53,820 --> 00:16:55,740
on that node and so

477
00:16:55,740 --> 00:16:58,620
then the the workload attestators would

478
00:16:58,620 --> 00:17:00,300
come into play when a workload comes up

479
00:17:00,300 --> 00:17:02,820
and they'll carry uh query the kernel

480
00:17:02,820 --> 00:17:05,339
getting say the process ID they'll if

481
00:17:05,339 --> 00:17:07,319
you have a kubernetes set up they can be

482
00:17:07,319 --> 00:17:09,540
set up to query kubernetes what is my

483
00:17:09,540 --> 00:17:11,880
pod name what is what are the images I'm

484
00:17:11,880 --> 00:17:13,619
running in this pod all this sort of

485
00:17:13,619 --> 00:17:16,679
information that it combines together

486
00:17:16,679 --> 00:17:18,799
um

487
00:17:18,959 --> 00:17:22,500
so in this scenario the workloads are

488
00:17:22,500 --> 00:17:24,179
completely untrusted

489
00:17:24,179 --> 00:17:26,280
the Spire server is completely trusted

490
00:17:26,280 --> 00:17:27,839
this is part of your ca infrastructure

491
00:17:27,839 --> 00:17:29,940
and should be secure just like you would

492
00:17:29,940 --> 00:17:31,740
for any issuing authority wherever

493
00:17:31,740 --> 00:17:33,419
you're you're putting your your root

494
00:17:33,419 --> 00:17:34,559
certificates or things like that in the

495
00:17:34,559 --> 00:17:37,020
organization and the Spire agent is sort

496
00:17:37,020 --> 00:17:38,580
of in the middle it's mostly trusted

497
00:17:38,580 --> 00:17:40,440
because it's the one that can issue the

498
00:17:40,440 --> 00:17:43,020
workload identity certificates

499
00:17:43,020 --> 00:17:44,640
um but a lot of its measurements are

500
00:17:44,640 --> 00:17:46,559
concerned confirmed by the Spire server

501
00:17:46,559 --> 00:17:50,059
as it's doing its work

502
00:17:51,660 --> 00:17:53,660
um

503
00:17:53,820 --> 00:17:55,620
so the other thing to realize here is

504
00:17:55,620 --> 00:17:57,900
that workloads have to be pre-registered

505
00:17:57,900 --> 00:18:00,660
with the Spire server so that not just

506
00:18:00,660 --> 00:18:02,700
any that so that certain nodes can only

507
00:18:02,700 --> 00:18:03,900
make

508
00:18:03,900 --> 00:18:06,000
um identities for certain workloads and

509
00:18:06,000 --> 00:18:07,880
so you set that up previously

510
00:18:07,880 --> 00:18:10,500
out of band essentially

511
00:18:10,500 --> 00:18:11,700
but

512
00:18:11,700 --> 00:18:13,260
um you can do that manually through the

513
00:18:13,260 --> 00:18:15,360
command line but better ways are through

514
00:18:15,360 --> 00:18:17,100
automated processes like either your CI

515
00:18:17,100 --> 00:18:19,440
CD process during a deployment or you

516
00:18:19,440 --> 00:18:21,539
could also have things running on your

517
00:18:21,539 --> 00:18:23,160
kubernetes cluster that will do that as

518
00:18:23,160 --> 00:18:25,559
new pods come up as new workloads start

519
00:18:25,559 --> 00:18:27,240
that they will then register themselves

520
00:18:27,240 --> 00:18:28,860
with the Spire server and then the

521
00:18:28,860 --> 00:18:31,980
workload is registered when it tries to

522
00:18:31,980 --> 00:18:34,640
get its identity

523
00:18:35,280 --> 00:18:36,600
so

524
00:18:36,600 --> 00:18:38,880
now that we've broken some ground there

525
00:18:38,880 --> 00:18:40,020
and talked about sort of these

526
00:18:40,020 --> 00:18:42,000
fundamental things of what is zero trust

527
00:18:42,000 --> 00:18:43,380
what is identity how do we get into this

528
00:18:43,380 --> 00:18:46,140
practice well in most situations that

529
00:18:46,140 --> 00:18:47,100
you come into you're not going to be

530
00:18:47,100 --> 00:18:48,539
Greenfield right you're going to have a

531
00:18:48,539 --> 00:18:49,980
lot of Legacy systems that have

532
00:18:49,980 --> 00:18:52,140
usernames and passwords and Bearer

533
00:18:52,140 --> 00:18:53,400
tokens or other sort of secret

534
00:18:53,400 --> 00:18:54,600
credentials that you have stored

535
00:18:54,600 --> 00:18:55,980
somewhere so how do you get access to

536
00:18:55,980 --> 00:18:57,960
that well vault is a very common one

537
00:18:57,960 --> 00:18:59,820
some sort of password management system

538
00:18:59,820 --> 00:19:01,980
or a secret management system so how do

539
00:19:01,980 --> 00:19:02,820
you then

540
00:19:02,820 --> 00:19:05,160
integrate this with your existing

541
00:19:05,160 --> 00:19:09,000
workflow well Vault can use x509

542
00:19:09,000 --> 00:19:10,860
certificates as its identity and you can

543
00:19:10,860 --> 00:19:14,880
configure Vault to trust the the

544
00:19:14,880 --> 00:19:15,720
um

545
00:19:15,720 --> 00:19:18,059
spiffy ID that's in as part of the

546
00:19:18,059 --> 00:19:20,400
certificate so you can put a an ACL

547
00:19:20,400 --> 00:19:23,100
involved that says trust this particular

548
00:19:23,100 --> 00:19:25,500
spiffy ID this specific specific ID

549
00:19:25,500 --> 00:19:27,360
coming from these certs that you then

550
00:19:27,360 --> 00:19:29,820
validate the certain and you know prove

551
00:19:29,820 --> 00:19:32,400
that it's valid in your trust domain

552
00:19:32,400 --> 00:19:34,380
and then they get access to the secrets

553
00:19:34,380 --> 00:19:36,240
so now you have these workloads that

554
00:19:36,240 --> 00:19:38,039
have no embedded secrets that can talk

555
00:19:38,039 --> 00:19:39,720
to a vault and get the secrets they need

556
00:19:39,720 --> 00:19:41,340
for talking to third-party systems if

557
00:19:41,340 --> 00:19:43,320
they need to

558
00:19:43,320 --> 00:19:45,299
there's another project called spiffy

559
00:19:45,299 --> 00:19:46,440
vault

560
00:19:46,440 --> 00:19:48,840
which lets you read

561
00:19:48,840 --> 00:19:50,940
um secrets from Vault based on from

562
00:19:50,940 --> 00:19:52,500
inside of that that current process

563
00:19:52,500 --> 00:19:55,860
based on that process is spiffy s vid so

564
00:19:55,860 --> 00:19:58,860
if you think of it like the the scenario

565
00:19:58,860 --> 00:20:00,000
here that's really common that this

566
00:20:00,000 --> 00:20:02,280
solves is I have a CI CD process it's a

567
00:20:02,280 --> 00:20:04,080
it's a bash script but it needs to be

568
00:20:04,080 --> 00:20:05,280
able to get some secrets from something

569
00:20:05,280 --> 00:20:07,260
and then

570
00:20:07,260 --> 00:20:08,760
um so it tries to pull those secrets

571
00:20:08,760 --> 00:20:10,320
from Vault but I don't want to embed the

572
00:20:10,320 --> 00:20:11,760
the Vault

573
00:20:11,760 --> 00:20:14,760
um secret into this workload so this

574
00:20:14,760 --> 00:20:16,559
when this script starts up in my cicd

575
00:20:16,559 --> 00:20:19,860
process say in in the kubernetes cluster

576
00:20:19,860 --> 00:20:22,500
it can get its identity from spiffy use

577
00:20:22,500 --> 00:20:24,299
that to get the credentials from Vault

578
00:20:24,299 --> 00:20:25,500
and then be able to execute Vault

579
00:20:25,500 --> 00:20:27,720
command line utilities as if the

580
00:20:27,720 --> 00:20:31,100
password was already there for vault

581
00:20:32,400 --> 00:20:35,160
so databases will work in a very similar

582
00:20:35,160 --> 00:20:37,380
way a lot of the most common popular

583
00:20:37,380 --> 00:20:39,900
databases will allow x509 certificates

584
00:20:39,900 --> 00:20:42,620
to be used as your identity

585
00:20:42,620 --> 00:20:46,860
so when you configure this uh in the the

586
00:20:46,860 --> 00:20:48,780
details vary by database engine but

587
00:20:48,780 --> 00:20:51,000
essentially you configure the user to be

588
00:20:51,000 --> 00:20:52,460
identified

589
00:20:52,460 --> 00:20:54,559
by

590
00:20:54,559 --> 00:20:56,940
different criteria on the certificate so

591
00:20:56,940 --> 00:20:58,980
you install the Spire trust bundle

592
00:20:58,980 --> 00:21:01,500
that's part of your aspire issuer you

593
00:21:01,500 --> 00:21:03,660
take the trust bundle you install it in

594
00:21:03,660 --> 00:21:04,860
your database engine however that

595
00:21:04,860 --> 00:21:06,059
happens

596
00:21:06,059 --> 00:21:07,919
and then now we can validate the

597
00:21:07,919 --> 00:21:09,900
certificate certificates were signed by

598
00:21:09,900 --> 00:21:14,580
a a Aspire trusted Authority and then

599
00:21:14,580 --> 00:21:16,320
you can do things like say that the

600
00:21:16,320 --> 00:21:18,000
issuer needs to match whatever your

601
00:21:18,000 --> 00:21:20,580
Spire route is and then the subject name

602
00:21:20,580 --> 00:21:22,080
of the certificate also needs to match

603
00:21:22,080 --> 00:21:24,840
the Spire ID or the spiffy ID

604
00:21:24,840 --> 00:21:26,760
um which is uh that URI that we talked

605
00:21:26,760 --> 00:21:28,559
about and so then you can tie

606
00:21:28,559 --> 00:21:31,320
specifically identity identifiers into

607
00:21:31,320 --> 00:21:34,320
database users and now any workload with

608
00:21:34,320 --> 00:21:36,000
those identifiers will just magically be

609
00:21:36,000 --> 00:21:37,080
able to connect to the database and have

610
00:21:37,080 --> 00:21:39,500
it all work

611
00:21:39,559 --> 00:21:42,000
another very popular integration here

612
00:21:42,000 --> 00:21:43,799
with spiffy identifiers is your service

613
00:21:43,799 --> 00:21:45,659
mesh I'm assuming most people here know

614
00:21:45,659 --> 00:21:47,460
to service meshes but just

615
00:21:47,460 --> 00:21:48,840
everybody raise your hand if you notice

616
00:21:48,840 --> 00:21:52,260
service meshes or all right so

617
00:21:52,260 --> 00:21:53,940
um just very briefly it's the dedicated

618
00:21:53,940 --> 00:21:55,440
infrastructure layer that does the

619
00:21:55,440 --> 00:21:57,539
service to service communication and a

620
00:21:57,539 --> 00:21:58,740
lot of the nice features that a service

621
00:21:58,740 --> 00:22:01,020
mesh provide service Discovery load

622
00:22:01,020 --> 00:22:03,960
balancing failover recovery encryption

623
00:22:03,960 --> 00:22:07,260
and security policy enforcement

624
00:22:07,260 --> 00:22:09,059
and there's usually some API to control

625
00:22:09,059 --> 00:22:10,799
some data plane and control plane and

626
00:22:10,799 --> 00:22:12,380
things like that the most popular ones

627
00:22:12,380 --> 00:22:15,720
istio Linker D and console

628
00:22:15,720 --> 00:22:18,059
um and of these specific features that I

629
00:22:18,059 --> 00:22:19,500
mentioned that sort of server meshes

630
00:22:19,500 --> 00:22:22,559
provide encryption and security policy

631
00:22:22,559 --> 00:22:23,760
enforcement are the ones that are really

632
00:22:23,760 --> 00:22:25,919
important to something like

633
00:22:25,919 --> 00:22:30,179
um your identity what and so some

634
00:22:30,179 --> 00:22:33,360
um most or all of the uh

635
00:22:33,360 --> 00:22:34,740
service measures out there have some

636
00:22:34,740 --> 00:22:36,480
concept of identity or their own concept

637
00:22:36,480 --> 00:22:37,740
of identity

638
00:22:37,740 --> 00:22:40,440
or maybe they piggyback on

639
00:22:40,440 --> 00:22:43,980
um like kubernetes I identity attributes

640
00:22:43,980 --> 00:22:45,059
but

641
00:22:45,059 --> 00:22:47,640
they don't go as far as

642
00:22:47,640 --> 00:22:49,679
spiffy does right we talked about those

643
00:22:49,679 --> 00:22:51,179
attestation features specifically

644
00:22:51,179 --> 00:22:54,539
doesn't just trust that the kubernetes

645
00:22:54,539 --> 00:22:56,400
service account is right it actually

646
00:22:56,400 --> 00:22:58,799
interrogates kubernetes it interrogates

647
00:22:58,799 --> 00:23:02,400
the kernel uh processes and and then or

648
00:23:02,400 --> 00:23:05,039
your node uh deployment on AWS or bare

649
00:23:05,039 --> 00:23:06,240
metal or

650
00:23:06,240 --> 00:23:08,039
um even to the hardware TPM if you

651
00:23:08,039 --> 00:23:09,720
wanted to so so the Spire can do these

652
00:23:09,720 --> 00:23:11,100
deeper attestations of what your

653
00:23:11,100 --> 00:23:13,200
identity actually is and we want to be

654
00:23:13,200 --> 00:23:14,280
able to leverage that in our service

655
00:23:14,280 --> 00:23:15,299
mesh

656
00:23:15,299 --> 00:23:17,400
so when we're talking about kubernetes

657
00:23:17,400 --> 00:23:19,919
the most popular service mesh is istio

658
00:23:19,919 --> 00:23:22,500
which was a project started

659
00:23:22,500 --> 00:23:23,039
um

660
00:23:23,039 --> 00:23:25,679
by Google IBM lift and using the envoy

661
00:23:25,679 --> 00:23:26,880
proxy

662
00:23:26,880 --> 00:23:29,220
designed to be kubernetes native but

663
00:23:29,220 --> 00:23:31,280
also to work in in non-kubernetes

664
00:23:31,280 --> 00:23:34,020
scenarios to be platform independent

665
00:23:34,020 --> 00:23:35,039
um

666
00:23:35,039 --> 00:23:36,539
so

667
00:23:36,539 --> 00:23:38,159
as part of this communication between

668
00:23:38,159 --> 00:23:39,559
like Services

669
00:23:39,559 --> 00:23:43,799
most service meshes will do mtls so

670
00:23:43,799 --> 00:23:46,799
mutual TLS connections between them and

671
00:23:46,799 --> 00:23:48,419
the nice thing about that is we have

672
00:23:48,419 --> 00:23:50,700
spiffy being able to issue these x509

673
00:23:50,700 --> 00:23:52,500
certificates which can be used then as

674
00:23:52,500 --> 00:23:56,039
the keys and certificates for encryption

675
00:23:56,039 --> 00:23:57,900
here

676
00:23:57,900 --> 00:23:59,700
and

677
00:23:59,700 --> 00:24:03,240
so when you you can configure istio to

678
00:24:03,240 --> 00:24:05,400
use spire and and to use the Spire

679
00:24:05,400 --> 00:24:07,320
Secrets there's a secret Discovery

680
00:24:07,320 --> 00:24:10,260
service API in Envoy and istio that

681
00:24:10,260 --> 00:24:11,640
allows

682
00:24:11,640 --> 00:24:15,000
um the istio sidecar to talk to the

683
00:24:15,000 --> 00:24:17,220
Spire agent and get these secrets for

684
00:24:17,220 --> 00:24:18,960
this particular work workload so they

685
00:24:18,960 --> 00:24:20,700
can share them

686
00:24:20,700 --> 00:24:21,960
and then spiral will take care of

687
00:24:21,960 --> 00:24:25,220
rotating those Secrets as well

688
00:24:26,100 --> 00:24:28,320
um and so this lets you use the spiffy

689
00:24:28,320 --> 00:24:30,840
ID and because we're using Spire we can

690
00:24:30,840 --> 00:24:33,840
go further and deeper into more than

691
00:24:33,840 --> 00:24:35,520
just service account we can do things

692
00:24:35,520 --> 00:24:37,919
like make attestations based on the Pod

693
00:24:37,919 --> 00:24:39,659
name the container image the kubernetes

694
00:24:39,659 --> 00:24:41,940
labels the annotations

695
00:24:41,940 --> 00:24:43,320
um and and so we can use these these

696
00:24:43,320 --> 00:24:45,960
deeper infrastructure attributes and and

697
00:24:45,960 --> 00:24:48,659
things that we've attested to to then

698
00:24:48,659 --> 00:24:50,640
um

699
00:24:50,640 --> 00:24:52,620
have policy enforcement at the the

700
00:24:52,620 --> 00:24:55,399
service mesh level

701
00:24:55,740 --> 00:24:57,720
so Switching gears a little bit here

702
00:24:57,720 --> 00:24:58,740
we're talking about supply chain

703
00:24:58,740 --> 00:25:00,179
security

704
00:25:00,179 --> 00:25:02,940
um so sonotype puts out a state of the

705
00:25:02,940 --> 00:25:05,220
supply software supply chain report

706
00:25:05,220 --> 00:25:08,880
every year and since 2019 they've had an

707
00:25:08,880 --> 00:25:12,059
average of 742 percent year-over-year

708
00:25:12,059 --> 00:25:15,960
increases that's crazy high and it's

709
00:25:15,960 --> 00:25:17,340
getting worse and it's going to get

710
00:25:17,340 --> 00:25:20,159
worse I think part of this is not just

711
00:25:20,159 --> 00:25:22,020
that

712
00:25:22,020 --> 00:25:24,000
um well it's because as we get more

713
00:25:24,000 --> 00:25:26,820
mature as an industry we're our runtime

714
00:25:26,820 --> 00:25:27,900
environments are getting more and more

715
00:25:27,900 --> 00:25:29,779
secure we're having less and less holes

716
00:25:29,779 --> 00:25:32,279
but it means that they've gone looking

717
00:25:32,279 --> 00:25:35,039
for other places and I don't know about

718
00:25:35,039 --> 00:25:36,659
you but I've never been in an

719
00:25:36,659 --> 00:25:38,580
organization that put as much love

720
00:25:38,580 --> 00:25:40,980
attention and money into their build

721
00:25:40,980 --> 00:25:42,480
system as they do in their production

722
00:25:42,480 --> 00:25:44,460
system and so that's where the attacks

723
00:25:44,460 --> 00:25:46,260
are going

724
00:25:46,260 --> 00:25:48,539
and also I think hackers also see the

725
00:25:48,539 --> 00:25:51,000
benefit of supply chain breaches because

726
00:25:51,000 --> 00:25:53,520
you can get something early enough on

727
00:25:53,520 --> 00:25:55,620
and have a far-reaching

728
00:25:55,620 --> 00:25:57,240
um uh

729
00:25:57,240 --> 00:25:59,340
consequences for any Hanks that you

730
00:25:59,340 --> 00:26:00,779
might do if you can compromise a

731
00:26:00,779 --> 00:26:02,159
low-level Library that's used all over

732
00:26:02,159 --> 00:26:06,659
the place like log4j then you can reap

733
00:26:06,659 --> 00:26:08,100
those rewards in in lots of different

734
00:26:08,100 --> 00:26:09,840
ways

735
00:26:09,840 --> 00:26:11,640
so

736
00:26:11,640 --> 00:26:14,100
um who here is familiar with tecton as a

737
00:26:14,100 --> 00:26:15,000
project

738
00:26:15,000 --> 00:26:17,100
all right not as many but if you're

739
00:26:17,100 --> 00:26:18,240
familiar with supply chain security

740
00:26:18,240 --> 00:26:20,700
stuff technology is a big

741
00:26:20,700 --> 00:26:22,679
um a big part of that in the cloud

742
00:26:22,679 --> 00:26:24,960
native world but tecton is a kubernetes

743
00:26:24,960 --> 00:26:28,620
native CI CD system or a framework for

744
00:26:28,620 --> 00:26:30,240
building CI CD systems might be a better

745
00:26:30,240 --> 00:26:32,039
way to say it

746
00:26:32,039 --> 00:26:33,840
um so like in kubernetes everything is

747
00:26:33,840 --> 00:26:36,480
yaml objects and tecton also has some

748
00:26:36,480 --> 00:26:38,159
umbrella projects like tecton chains

749
00:26:38,159 --> 00:26:40,260
that when put together give you first

750
00:26:40,260 --> 00:26:43,020
class security features like signed

751
00:26:43,020 --> 00:26:45,240
provenance and hermetic builds and sign

752
00:26:45,240 --> 00:26:47,340
Providence basically means that every

753
00:26:47,340 --> 00:26:49,980
step of the build is signed and can be

754
00:26:49,980 --> 00:26:52,320
crypto cryptographically verified later

755
00:26:52,320 --> 00:26:55,020
by someone else

756
00:26:55,020 --> 00:26:57,020
um

757
00:26:57,659 --> 00:27:00,299
so going further with that like how do

758
00:27:00,299 --> 00:27:01,740
how where does spiffy come into this

759
00:27:01,740 --> 00:27:03,360
well there's something that's called

760
00:27:03,360 --> 00:27:06,600
Salsa s-l-s-a which stands for the

761
00:27:06,600 --> 00:27:08,039
supply chain levels for software

762
00:27:08,039 --> 00:27:10,200
artifacts and it's basically a

763
00:27:10,200 --> 00:27:12,080
recommendation system for software

764
00:27:12,080 --> 00:27:13,980
recommendations for software build

765
00:27:13,980 --> 00:27:15,840
systems and there's different levels and

766
00:27:15,840 --> 00:27:17,460
as you go through these levels there are

767
00:27:17,460 --> 00:27:18,720
stricter requirements about how your

768
00:27:18,720 --> 00:27:20,100
builds are done and the security

769
00:27:20,100 --> 00:27:21,960
controls around artifacts that you're

770
00:27:21,960 --> 00:27:24,059
producing but level three which is the

771
00:27:24,059 --> 00:27:25,740
second highest

772
00:27:25,740 --> 00:27:26,460
um

773
00:27:26,460 --> 00:27:29,720
it wants to have this one requirement

774
00:27:29,720 --> 00:27:32,700
non-fossil bio so non-falsifiable

775
00:27:32,700 --> 00:27:35,820
provenance basically means it's not just

776
00:27:35,820 --> 00:27:37,799
enough to say that this artifact was

777
00:27:37,799 --> 00:27:39,960
signed but how do I know some step of

778
00:27:39,960 --> 00:27:42,000
the of the process wasn't compromised

779
00:27:42,000 --> 00:27:45,240
along the way so who cares if I get a

780
00:27:45,240 --> 00:27:47,279
binary that's signed if something was

781
00:27:47,279 --> 00:27:48,539
injected in the middle or the build

782
00:27:48,539 --> 00:27:52,220
process was changed in the middle right

783
00:27:52,260 --> 00:27:53,940
um so technone chains because of just

784
00:27:53,940 --> 00:27:55,919
the way it works with the kubernetes

785
00:27:55,919 --> 00:27:58,200
pods can't guarantee this it can

786
00:27:58,200 --> 00:28:00,840
guarantee the Providence of the build

787
00:28:00,840 --> 00:28:02,100
artifacts but not that something could

788
00:28:02,100 --> 00:28:04,320
have modified one of the processes along

789
00:28:04,320 --> 00:28:06,620
the way

790
00:28:06,840 --> 00:28:07,679
um

791
00:28:07,679 --> 00:28:09,600
so like I can guarantee like the steps

792
00:28:09,600 --> 00:28:10,799
between the processes but not that

793
00:28:10,799 --> 00:28:12,480
something didn't modify the task as it

794
00:28:12,480 --> 00:28:14,100
was running so for that you need

795
00:28:14,100 --> 00:28:15,779
something outside of that and that's

796
00:28:15,779 --> 00:28:18,240
where spiffy comes in so there's a uh

797
00:28:18,240 --> 00:28:20,340
what called what's called tep0089 which

798
00:28:20,340 --> 00:28:23,400
is the tecton enhancement proposal which

799
00:28:23,400 --> 00:28:26,460
uses spiffy Inspire identities on the

800
00:28:26,460 --> 00:28:30,059
task run pods in kubernetes that use

801
00:28:30,059 --> 00:28:33,919
these x509s vid identities to sign

802
00:28:33,919 --> 00:28:37,200
each task run and so you can tell before

803
00:28:37,200 --> 00:28:40,620
and after if the task run was modified

804
00:28:40,620 --> 00:28:42,960
and so it's not just a not just the

805
00:28:42,960 --> 00:28:46,200
outputs but the the Run itself um so

806
00:28:46,200 --> 00:28:48,120
that something didn't modify it as it

807
00:28:48,120 --> 00:28:50,700
was running so this work is ongoing uh

808
00:28:50,700 --> 00:28:52,260
parts of it have been merged uh and

809
00:28:52,260 --> 00:28:53,700
parts of it are still going but this is

810
00:28:53,700 --> 00:28:55,260
a feature that I'm really looking

811
00:28:55,260 --> 00:28:57,179
forward to and tecton

812
00:28:57,179 --> 00:28:59,220
um and then as

813
00:28:59,220 --> 00:29:00,779
um

814
00:29:00,779 --> 00:29:02,700
one as technology becomes more popular

815
00:29:02,700 --> 00:29:04,140
and people are using it further to

816
00:29:04,140 --> 00:29:06,360
replace Jenkins and things like that

817
00:29:06,360 --> 00:29:07,919
um we people will just get these

818
00:29:07,919 --> 00:29:10,200
features by default like when if you can

819
00:29:10,200 --> 00:29:12,360
say out of the box I because I have a

820
00:29:12,360 --> 00:29:13,799
Spire server and I've connected my

821
00:29:13,799 --> 00:29:15,779
tecton build to my Spire server I now

822
00:29:15,779 --> 00:29:19,380
have salsa 3 uh level

823
00:29:19,380 --> 00:29:20,399
um

824
00:29:20,399 --> 00:29:22,320
it's also a three-level build system

825
00:29:22,320 --> 00:29:23,460
which is

826
00:29:23,460 --> 00:29:25,140
um quite impressive if you can get that

827
00:29:25,140 --> 00:29:27,559
out of the box

828
00:29:27,659 --> 00:29:30,779
another project that can integrate with

829
00:29:30,779 --> 00:29:32,640
spiffy in interesting ways is six door

830
00:29:32,640 --> 00:29:34,559
project I if you haven't heard about Sig

831
00:29:34,559 --> 00:29:35,760
store I I don't know where you've been

832
00:29:35,760 --> 00:29:36,779
the past couple years but it's

833
00:29:36,779 --> 00:29:38,760
everywhere at pretty much every

834
00:29:38,760 --> 00:29:39,960
conference I go to that's mentioned

835
00:29:39,960 --> 00:29:42,299
somewhere in the keynote but Sig store

836
00:29:42,299 --> 00:29:43,740
if you're not familiar there's an open

837
00:29:43,740 --> 00:29:45,419
source project that handles the signing

838
00:29:45,419 --> 00:29:47,100
verification and checks for Providence

839
00:29:47,100 --> 00:29:49,440
and this is as someone mentioned in one

840
00:29:49,440 --> 00:29:50,399
Aquino City this is probably something

841
00:29:50,399 --> 00:29:52,500
we should have solved in 2005. when we

842
00:29:52,500 --> 00:29:53,580
think about it and lots of different

843
00:29:53,580 --> 00:29:54,899
projects have tried to solve it in lots

844
00:29:54,899 --> 00:29:56,460
of different ways but never in a really

845
00:29:56,460 --> 00:29:59,360
robust easy to use

846
00:29:59,360 --> 00:30:01,039
and

847
00:30:01,039 --> 00:30:03,659
cryptographically verifiable by everyone

848
00:30:03,659 --> 00:30:06,440
system

849
00:30:06,720 --> 00:30:08,580
um so lots of big companies are working

850
00:30:08,580 --> 00:30:11,820
behind are working on uh six store

851
00:30:11,820 --> 00:30:15,360
Google Cisco GitHub Red Hats one of them

852
00:30:15,360 --> 00:30:16,919
and so it has a lot of this Integrations

853
00:30:16,919 --> 00:30:19,679
with various build systems and Packaging

854
00:30:19,679 --> 00:30:21,240
Systems including tecton chains that I

855
00:30:21,240 --> 00:30:22,620
mentioned earlier that's one of the ways

856
00:30:22,620 --> 00:30:24,120
that tecton chains proves its Providence

857
00:30:24,120 --> 00:30:25,980
about is by putting signatures into six

858
00:30:25,980 --> 00:30:28,279
store

859
00:30:29,399 --> 00:30:30,600
um so there's a couple of ways that we

860
00:30:30,600 --> 00:30:32,640
can have integration between spiffy

861
00:30:32,640 --> 00:30:34,980
identities and Sig store

862
00:30:34,980 --> 00:30:38,159
so if you've ever used Sig store one of

863
00:30:38,159 --> 00:30:39,659
the the cool features about it is

864
00:30:39,659 --> 00:30:42,059
something called keyless signing and so

865
00:30:42,059 --> 00:30:43,980
Sig store can integrate with an oidc

866
00:30:43,980 --> 00:30:45,960
provider which is an open identity

867
00:30:45,960 --> 00:30:46,860
connect

868
00:30:46,860 --> 00:30:49,679
and can let you once you've proven your

869
00:30:49,679 --> 00:30:51,840
identity to some oidc provider say

870
00:30:51,840 --> 00:30:54,419
Google or Facebook or GitHub or whatever

871
00:30:54,419 --> 00:30:56,039
you want to choose your internal

872
00:30:56,039 --> 00:30:58,200
identity provider it can then use that

873
00:30:58,200 --> 00:31:00,480
identity to sign the artifact produce a

874
00:31:00,480 --> 00:31:02,580
temporary key that only lives

875
00:31:02,580 --> 00:31:04,080
just for those long to sign that

876
00:31:04,080 --> 00:31:05,340
artifact and can tie it back to your

877
00:31:05,340 --> 00:31:06,600
identity and then throw the keys away

878
00:31:06,600 --> 00:31:07,980
and so no one can ever reuse or

879
00:31:07,980 --> 00:31:09,600
compromise that key and you can

880
00:31:09,600 --> 00:31:10,860
guarantee it was signed by the person

881
00:31:10,860 --> 00:31:13,320
who owned that identity but this means

882
00:31:13,320 --> 00:31:15,179
that a person has to be there right so

883
00:31:15,179 --> 00:31:16,200
when you're talking about an automated

884
00:31:16,200 --> 00:31:17,520
build system there's not necessarily

885
00:31:17,520 --> 00:31:19,260
tied to a person and there's not a

886
00:31:19,260 --> 00:31:20,700
person at every time a build is running

887
00:31:20,700 --> 00:31:22,620
to sign into an oid CD provider with

888
00:31:22,620 --> 00:31:24,840
their credentials and say okay I signed

889
00:31:24,840 --> 00:31:26,700
this artifact so we want to be able to

890
00:31:26,700 --> 00:31:28,919
do this in an automated way so

891
00:31:28,919 --> 00:31:31,679
Sig store can use spiffy as its oidc

892
00:31:31,679 --> 00:31:35,520
provider and so you can tie in spiffy

893
00:31:35,520 --> 00:31:36,299
um

894
00:31:36,299 --> 00:31:38,340
credentials or spiffy identity and

895
00:31:38,340 --> 00:31:40,260
that's what's used to sign it and so it

896
00:31:40,260 --> 00:31:41,520
can create this temporary certificate

897
00:31:41,520 --> 00:31:44,220
tied to the spiffy ID and then put that

898
00:31:44,220 --> 00:31:46,620
into six store

899
00:31:46,620 --> 00:31:49,380
so that's how we're using

900
00:31:49,380 --> 00:31:51,419
um this truss model where

901
00:31:51,419 --> 00:31:54,480
um Sig stories is basing its trust off

902
00:31:54,480 --> 00:31:55,980
of these spiffy ideas but let's go the

903
00:31:55,980 --> 00:31:58,919
other way around let's um there's a new

904
00:31:58,919 --> 00:32:00,179
experimental feature that's been merged

905
00:32:00,179 --> 00:32:02,460
into Spire that allows kubernetes

906
00:32:02,460 --> 00:32:05,279
workloads to CU Sig store to verify

907
00:32:05,279 --> 00:32:07,500
container container images

908
00:32:07,500 --> 00:32:09,720
so as I talked about this before when

909
00:32:09,720 --> 00:32:11,820
the node attestators are running and

910
00:32:11,820 --> 00:32:13,860
trying to verify this workload it can

911
00:32:13,860 --> 00:32:16,080
look at various attributes of the that

912
00:32:16,080 --> 00:32:17,880
workload in kubernetes a pod name what

913
00:32:17,880 --> 00:32:19,620
what image is running and things like

914
00:32:19,620 --> 00:32:21,899
that now with these features it can say

915
00:32:21,899 --> 00:32:24,960
also is the image that's running was it

916
00:32:24,960 --> 00:32:27,419
does it have a signature in Sig store

917
00:32:27,419 --> 00:32:29,279
and does the signature that the

918
00:32:29,279 --> 00:32:31,320
identities that sign that signature do I

919
00:32:31,320 --> 00:32:32,279
trust them

920
00:32:32,279 --> 00:32:35,220
so for instance I can say I only in my

921
00:32:35,220 --> 00:32:37,140
cluster I only allow

922
00:32:37,140 --> 00:32:38,100
um

923
00:32:38,100 --> 00:32:40,740
images that are signed by m Peterson

924
00:32:40,740 --> 00:32:43,799
sorry M Peter said red hat to get spiffy

925
00:32:43,799 --> 00:32:46,559
IDs and spiffy credentials and so you

926
00:32:46,559 --> 00:32:48,600
can sort of you can complete the circle

927
00:32:48,600 --> 00:32:51,299
and say these containers have been

928
00:32:51,299 --> 00:32:53,100
signed these I'm sorry these images have

929
00:32:53,100 --> 00:32:55,159
been signed during the six door and now

930
00:32:55,159 --> 00:32:58,320
my identity provider can trust or can

931
00:32:58,320 --> 00:33:00,679
link that to The

932
00:33:00,679 --> 00:33:03,120
Container running that specific image

933
00:33:03,120 --> 00:33:05,100
that's been signed by identities that I

934
00:33:05,100 --> 00:33:07,520
approve

935
00:33:08,100 --> 00:33:09,840
that makes sense it's a little circular

936
00:33:09,840 --> 00:33:11,279
right because we have both things that

937
00:33:11,279 --> 00:33:13,019
they can use the other as trust but this

938
00:33:13,019 --> 00:33:15,000
gives us a nice like completed circle of

939
00:33:15,000 --> 00:33:18,019
of the build system

940
00:33:18,240 --> 00:33:20,100
so I talked about this before

941
00:33:20,100 --> 00:33:22,440
um this this plug-in architecture

942
00:33:22,440 --> 00:33:24,299
um so now the node attach stator can

943
00:33:24,299 --> 00:33:27,299
reach out to Sig's door as part of its

944
00:33:27,299 --> 00:33:29,340
um sorry the workload attestation can

945
00:33:29,340 --> 00:33:31,019
reach out to Sig stores part of its

946
00:33:31,019 --> 00:33:33,860
attestation

947
00:33:34,740 --> 00:33:36,120
so I mentioned at the very beginning

948
00:33:36,120 --> 00:33:38,640
that I work on a project called key lime

949
00:33:38,640 --> 00:33:41,100
um and key lime is I I it's it's really

950
00:33:41,100 --> 00:33:42,000
hard for me to give a talk without

951
00:33:42,000 --> 00:33:43,019
talking about key lime because I think

952
00:33:43,019 --> 00:33:45,480
it should be used everywhere but um key

953
00:33:45,480 --> 00:33:48,480
lime is a cncs Sandbox project that

954
00:33:48,480 --> 00:33:50,399
provides remote boot attestation and

955
00:33:50,399 --> 00:33:53,399
also runtime file Integrity attestation

956
00:33:53,399 --> 00:33:54,539
um and it ties it back to a hardware

957
00:33:54,539 --> 00:33:55,919
route of trust and basically what this

958
00:33:55,919 --> 00:33:57,960
means is that

959
00:33:57,960 --> 00:33:59,399
you

960
00:33:59,399 --> 00:34:03,000
we can create policy based on your your

961
00:34:03,000 --> 00:34:05,100
measured boot so as your your machine

962
00:34:05,100 --> 00:34:06,480
boots up and records different things

963
00:34:06,480 --> 00:34:07,799
and the kernel knows how to record those

964
00:34:07,799 --> 00:34:10,139
and your your Booter your bootloader

965
00:34:10,139 --> 00:34:11,159
knows how to record those and put them

966
00:34:11,159 --> 00:34:13,440
inside the hardware TPM or software TPM

967
00:34:13,440 --> 00:34:15,599
or Cloud TPM or whatever but these

968
00:34:15,599 --> 00:34:17,639
cryptographic devices that lets you

969
00:34:17,639 --> 00:34:19,918
basically create a hash of a hash of a

970
00:34:19,918 --> 00:34:22,020
hash of different properties and so you

971
00:34:22,020 --> 00:34:24,440
can make guarantees about those

972
00:34:24,440 --> 00:34:28,320
hashes and then use those to to verify

973
00:34:28,320 --> 00:34:29,460
that nothing has been tampered with

974
00:34:29,460 --> 00:34:31,500
along the way

975
00:34:31,500 --> 00:34:32,879
um great talks about key lime out there

976
00:34:32,879 --> 00:34:35,699
but um essentially what we want to be

977
00:34:35,699 --> 00:34:37,739
able to do is say has this node been

978
00:34:37,739 --> 00:34:39,780
tampered with or if you remember we

979
00:34:39,780 --> 00:34:41,699
talked about the Spire agent right we're

980
00:34:41,699 --> 00:34:43,199
trusting the Spire agent to a certain

981
00:34:43,199 --> 00:34:44,940
degree to not have been tampered with

982
00:34:44,940 --> 00:34:46,139
well how do we make guarantees about

983
00:34:46,139 --> 00:34:48,000
that well key lime can make guarantees

984
00:34:48,000 --> 00:34:49,800
about your Spire agent not having been

985
00:34:49,800 --> 00:34:53,099
tampered with or anything on your system

986
00:34:53,099 --> 00:34:54,480
um

987
00:34:54,480 --> 00:34:56,879
and so there's a couple of ways that we

988
00:34:56,879 --> 00:34:59,339
can integrate this with key lime one

989
00:34:59,339 --> 00:35:03,119
like we talked about with service mesh

990
00:35:03,119 --> 00:35:05,720
um we have

991
00:35:06,060 --> 00:35:09,359
the uh the mtls connections can be

992
00:35:09,359 --> 00:35:10,920
secured through spire and and that's

993
00:35:10,920 --> 00:35:13,859
fine um that's a very common way but the

994
00:35:13,859 --> 00:35:16,680
other thing is that and this is an

995
00:35:16,680 --> 00:35:18,900
Avenue I have been thinking about if

996
00:35:18,900 --> 00:35:20,280
somebody finds this interesting let me

997
00:35:20,280 --> 00:35:22,859
know and I'll work on this but using

998
00:35:22,859 --> 00:35:26,280
key lime as an attestator plug-in in

999
00:35:26,280 --> 00:35:29,160
Spire so that when Spire is at doing an

1000
00:35:29,160 --> 00:35:31,140
attestation on the Node you can tell it

1001
00:35:31,140 --> 00:35:33,839
make sure or have the Spire agent gather

1002
00:35:33,839 --> 00:35:35,579
information about the hardware TPM or

1003
00:35:35,579 --> 00:35:38,040
software TPM whatever about the TPM and

1004
00:35:38,040 --> 00:35:39,839
about the key lime agent

1005
00:35:39,839 --> 00:35:42,780
and then the server side of the

1006
00:35:42,780 --> 00:35:44,579
attestator can then query the key lime

1007
00:35:44,579 --> 00:35:46,740
server and say it does this match right

1008
00:35:46,740 --> 00:35:49,380
do I know about this node is it the TPM

1009
00:35:49,380 --> 00:35:52,200
a valid TPA manufacturer but also has

1010
00:35:52,200 --> 00:35:53,880
the node passed acidation attestation

1011
00:35:53,880 --> 00:35:56,040
has has anything been tampered with on

1012
00:35:56,040 --> 00:35:57,780
this node if anything has been tampered

1013
00:35:57,780 --> 00:35:59,339
with on this node then I'm not going to

1014
00:35:59,339 --> 00:36:02,160
let it issue any identities and so this

1015
00:36:02,160 --> 00:36:04,920
would also again give this nice sort of

1016
00:36:04,920 --> 00:36:07,859
closed loop on on now we're not just

1017
00:36:07,859 --> 00:36:10,560
trusting Spire but we're trusting the

1018
00:36:10,560 --> 00:36:12,480
hardware measurements inside that TPM as

1019
00:36:12,480 --> 00:36:14,040
our route of trust for this whole system

1020
00:36:14,040 --> 00:36:16,680
for identity system

1021
00:36:16,680 --> 00:36:19,140
so it would be very similar so I showed

1022
00:36:19,140 --> 00:36:21,180
for Six Tour we would have

1023
00:36:21,180 --> 00:36:22,800
um the node access data on the server

1024
00:36:22,800 --> 00:36:24,660
side be talking to the verifier to

1025
00:36:24,660 --> 00:36:26,640
verify that everything is correct and

1026
00:36:26,640 --> 00:36:29,099
the node attestator on the agent talking

1027
00:36:29,099 --> 00:36:31,380
to the key lime agent to get information

1028
00:36:31,380 --> 00:36:35,780
about that TPM and the hardware and the

1029
00:36:35,780 --> 00:36:38,099
attributes of the key lime agent on that

1030
00:36:38,099 --> 00:36:39,780
node

1031
00:36:39,780 --> 00:36:41,880
so if something modifies your boot

1032
00:36:41,880 --> 00:36:44,220
sequence if someone injects a kernel

1033
00:36:44,220 --> 00:36:46,079
parameter that you don't approve of if

1034
00:36:46,079 --> 00:36:47,880
somebody modifies a key lime agent or

1035
00:36:47,880 --> 00:36:49,859
some file on your system and that you're

1036
00:36:49,859 --> 00:36:52,140
that you're not okay with key lime can

1037
00:36:52,140 --> 00:36:55,079
fail the the attestation and then when

1038
00:36:55,079 --> 00:36:57,240
Spire comes up to try to issue an

1039
00:36:57,240 --> 00:36:58,740
identity for that node it'll say nope

1040
00:36:58,740 --> 00:37:00,240
sorry the node does not pass that test

1041
00:37:00,240 --> 00:37:01,619
station and so none of the identities

1042
00:37:01,619 --> 00:37:03,000
would work and none of the credentials

1043
00:37:03,000 --> 00:37:05,720
could be compromised

1044
00:37:06,599 --> 00:37:08,520
all right thank you

1045
00:37:08,520 --> 00:37:10,500
um so I know I covered a lot a lot of

1046
00:37:10,500 --> 00:37:11,579
different systems talking to each other

1047
00:37:11,579 --> 00:37:14,660
but if you have any questions

1048
00:37:17,400 --> 00:37:18,820
okay thanks

1049
00:37:18,820 --> 00:37:23,320
[Applause]

