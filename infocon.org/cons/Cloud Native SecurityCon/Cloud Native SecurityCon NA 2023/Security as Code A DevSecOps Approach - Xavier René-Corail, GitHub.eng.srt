1
00:00:00,480 --> 00:00:03,540
hi everyone my name is Xavier on the

2
00:00:03,540 --> 00:00:05,819
Correia as you can hear from my accent

3
00:00:05,819 --> 00:00:07,460
I'm French

4
00:00:07,460 --> 00:00:09,900
so today we'll talk about security as

5
00:00:09,900 --> 00:00:12,120
code

6
00:00:12,120 --> 00:00:15,240
so I'm the senior director of the GitHub

7
00:00:15,240 --> 00:00:16,980
security lab

8
00:00:16,980 --> 00:00:19,440
what we do at the GitHub security lab is

9
00:00:19,440 --> 00:00:22,680
that we help secure open source software

10
00:00:22,680 --> 00:00:26,279
all open source software so how we do

11
00:00:26,279 --> 00:00:29,460
that our core activity is a security

12
00:00:29,460 --> 00:00:32,220
audit in open source projects we find

13
00:00:32,220 --> 00:00:34,200
vulnerabilities in this project we

14
00:00:34,200 --> 00:00:36,180
disclose them to the maintainers we help

15
00:00:36,180 --> 00:00:39,000
the maintainers fix them

16
00:00:39,000 --> 00:00:41,280
and we do that for all uh open source

17
00:00:41,280 --> 00:00:43,620
well I mean any open source project uh

18
00:00:43,620 --> 00:00:45,719
not only those that we are using at

19
00:00:45,719 --> 00:00:47,340
GitHub not even only those who are

20
00:00:47,340 --> 00:00:50,820
hosted on GitHub any open source project

21
00:00:50,820 --> 00:00:52,680
um but of course we cannot

22
00:00:52,680 --> 00:00:54,780
secure the Open Source by ourselves so

23
00:00:54,780 --> 00:00:58,440
being at GitHub we Leverage The Power of

24
00:00:58,440 --> 00:01:02,039
the community so how do we do that one

25
00:01:02,039 --> 00:01:04,559
we educate the community so we share our

26
00:01:04,559 --> 00:01:06,060
security techniques and our security

27
00:01:06,060 --> 00:01:08,760
findings with the security research

28
00:01:08,760 --> 00:01:09,780
community

29
00:01:09,780 --> 00:01:13,619
and we we try also to educate the open

30
00:01:13,619 --> 00:01:15,479
source Community we give them security

31
00:01:15,479 --> 00:01:18,180
tips secure code tips security best

32
00:01:18,180 --> 00:01:21,180
practices we also host office hours for

33
00:01:21,180 --> 00:01:23,520
maintainers to help them well answer

34
00:01:23,520 --> 00:01:25,439
their questions and help them adopt a

35
00:01:25,439 --> 00:01:27,659
better security posture

36
00:01:27,659 --> 00:01:30,720
two we amplify security research so we

37
00:01:30,720 --> 00:01:33,540
do variant analysis whenever we find a

38
00:01:33,540 --> 00:01:36,600
noticeable cve or security vulnerability

39
00:01:36,600 --> 00:01:40,079
we try to code this pattern with a code

40
00:01:40,079 --> 00:01:42,659
ql and we try to run the query on all

41
00:01:42,659 --> 00:01:44,460
open source projects to find other

42
00:01:44,460 --> 00:01:48,060
instances of this vulnerability

43
00:01:48,060 --> 00:01:51,899
and finally we notify the ecosystem so

44
00:01:51,899 --> 00:01:55,439
we are a CNA so we assign cves for

45
00:01:55,439 --> 00:01:57,360
security vulnerabilities in open source

46
00:01:57,360 --> 00:01:59,640
and we also create the GitHub advisory

47
00:01:59,640 --> 00:02:02,759
database which is D3 and open source

48
00:02:02,759 --> 00:02:05,100
database for security vulnerabilities in

49
00:02:05,100 --> 00:02:07,759
open source

50
00:02:08,880 --> 00:02:11,760
what I want to do today is convince you

51
00:02:11,760 --> 00:02:14,940
of the benefits of using security as

52
00:02:14,940 --> 00:02:15,840
code

53
00:02:15,840 --> 00:02:18,959
so I will first introduce the concept I

54
00:02:18,959 --> 00:02:20,580
will show you

55
00:02:20,580 --> 00:02:22,860
um how well what it looks like

56
00:02:22,860 --> 00:02:26,160
concretely with a codeql

57
00:02:26,160 --> 00:02:27,959
and then hopefully we'll have time for

58
00:02:27,959 --> 00:02:30,980
questions afterwards

59
00:02:31,080 --> 00:02:34,800
so my Story begins far far away on

60
00:02:34,800 --> 00:02:36,840
planet Mars

61
00:02:36,840 --> 00:02:41,459
10 years ago meet Grover it's a Well

62
00:02:41,459 --> 00:02:44,180
curiosity sorry it's a Rover

63
00:02:44,180 --> 00:02:46,860
developed by NASA Japan

64
00:02:46,860 --> 00:02:50,160
and ten years ago this small River was

65
00:02:50,160 --> 00:02:51,660
en route

66
00:02:51,660 --> 00:02:54,180
to Mars

67
00:02:54,180 --> 00:02:56,940
well not very small here you can see a

68
00:02:56,940 --> 00:02:59,160
few humans next to the river to see the

69
00:02:59,160 --> 00:03:00,660
real size of it

70
00:03:00,660 --> 00:03:03,980
uh and what happened once it was already

71
00:03:03,980 --> 00:03:07,140
going to Mars is that the NASA JPL

72
00:03:07,140 --> 00:03:10,440
engineering team found a bug

73
00:03:10,440 --> 00:03:12,480
in the

74
00:03:12,480 --> 00:03:14,340
um in the piece of code that was in

75
00:03:14,340 --> 00:03:17,519
charge of the parachute uh

76
00:03:17,519 --> 00:03:19,680
during the donding phase

77
00:03:19,680 --> 00:03:22,260
so pretty uh pretty critical

78
00:03:22,260 --> 00:03:25,459
piece of code

79
00:03:25,680 --> 00:03:27,120
this is

80
00:03:27,120 --> 00:03:30,360
um let's dig into this this bug so this

81
00:03:30,360 --> 00:03:33,780
is not NASA's real code this is sudoku

82
00:03:33,780 --> 00:03:35,159
that I've written for you to explain

83
00:03:35,159 --> 00:03:37,260
what it's about

84
00:03:37,260 --> 00:03:38,879
so in C

85
00:03:38,879 --> 00:03:43,019
if you declare a function parameter as

86
00:03:43,019 --> 00:03:46,379
an array of size 12 here an array of

87
00:03:46,379 --> 00:03:48,959
doubles of size 12 here it doesn't

88
00:03:48,959 --> 00:03:51,959
prevent you to call this function with

89
00:03:51,959 --> 00:03:54,540
an array of different size so this is

90
00:03:54,540 --> 00:03:57,180
what's happening on nine eight

91
00:03:57,180 --> 00:03:59,940
we are calling this function with an

92
00:03:59,940 --> 00:04:04,019
array of doubles of size 3.

93
00:04:04,019 --> 00:04:06,360
what happens if you look at line free

94
00:04:06,360 --> 00:04:07,920
during the processing of this function

95
00:04:07,920 --> 00:04:09,599
what happens is that the system will

96
00:04:09,599 --> 00:04:12,599
access memory space that is beyond the

97
00:04:12,599 --> 00:04:14,879
allocated memory space and then the

98
00:04:14,879 --> 00:04:16,738
result will be unpredictable you don't

99
00:04:16,738 --> 00:04:18,899
know what in this space

100
00:04:18,899 --> 00:04:21,839
so we found this bug we checked that it

101
00:04:21,839 --> 00:04:23,000
was not

102
00:04:23,000 --> 00:04:24,860
very very

103
00:04:24,860 --> 00:04:28,440
harmful but they thought hey what if

104
00:04:28,440 --> 00:04:32,040
this bug is happening in other places in

105
00:04:32,040 --> 00:04:33,660
our software

106
00:04:33,660 --> 00:04:36,000
after a quick code review we found

107
00:04:36,000 --> 00:04:39,120
project on another place where this was

108
00:04:39,120 --> 00:04:41,419
happening so they said okay hold on

109
00:04:41,419 --> 00:04:44,100
we'll need to find all instances of this

110
00:04:44,100 --> 00:04:47,639
bug and so we will use an automatic

111
00:04:47,639 --> 00:04:50,580
static analysis tool to find all of

112
00:04:50,580 --> 00:04:52,080
these instances

113
00:04:52,080 --> 00:04:54,600
and so we used codeql

114
00:04:54,600 --> 00:04:57,720
to find all instances of this pattern

115
00:04:57,720 --> 00:04:59,460
in their code

116
00:04:59,460 --> 00:05:03,300
so this is an example of this query if

117
00:05:03,300 --> 00:05:05,960
you look at the third line

118
00:05:05,960 --> 00:05:10,380
you see that we are looking for and the

119
00:05:10,380 --> 00:05:13,020
argument in position in position I and

120
00:05:13,020 --> 00:05:15,500
that this argument is position I has

121
00:05:15,500 --> 00:05:19,979
well it's an array and that has a size a

122
00:05:19,979 --> 00:05:22,919
and then we are comparing this to the

123
00:05:22,919 --> 00:05:25,680
parameter of the function declaration in

124
00:05:25,680 --> 00:05:27,660
position I same position I and you see

125
00:05:27,660 --> 00:05:30,900
that it's also an array of size B and we

126
00:05:30,900 --> 00:05:33,000
compare the size and we see that a is

127
00:05:33,000 --> 00:05:35,660
smaller than b we have coded

128
00:05:35,660 --> 00:05:39,240
the pattern of our bug

129
00:05:39,240 --> 00:05:44,039
so we run this query on their code and

130
00:05:44,039 --> 00:05:45,240
they found

131
00:05:45,240 --> 00:05:48,060
more than 20 instances

132
00:05:48,060 --> 00:05:49,860
of the same bug

133
00:05:49,860 --> 00:05:51,360
in their code

134
00:05:51,360 --> 00:05:53,880
and a handful of these instances were

135
00:05:53,880 --> 00:05:55,320
critical

136
00:05:55,320 --> 00:05:58,259
and would be causing a crush

137
00:05:58,259 --> 00:06:00,300
and here I'm talking about a physical

138
00:06:00,300 --> 00:06:02,460
Crush of the Rover

139
00:06:02,460 --> 00:06:06,600
on the surface not a software crash

140
00:06:06,600 --> 00:06:08,340
so what they did is that they fixed that

141
00:06:08,340 --> 00:06:10,680
and of course they deployed the code

142
00:06:10,680 --> 00:06:14,220
remotely to curiosity because it was

143
00:06:14,220 --> 00:06:16,740
already going to Mars but they deployed

144
00:06:16,740 --> 00:06:19,500
remotely on the Rover and

145
00:06:19,500 --> 00:06:23,240
the rest is history

146
00:06:24,060 --> 00:06:25,560
um

147
00:06:25,560 --> 00:06:28,680
fast forward nine years later

148
00:06:28,680 --> 00:06:31,380
NASA sent another robot on ours

149
00:06:31,380 --> 00:06:32,940
perseverance

150
00:06:32,940 --> 00:06:35,060
and

151
00:06:35,060 --> 00:06:39,660
here again they used code ql into their

152
00:06:39,660 --> 00:06:43,259
security testing routine

153
00:06:43,259 --> 00:06:45,900
so that perseverance also landed safely

154
00:06:45,900 --> 00:06:49,080
on Mars

155
00:06:49,080 --> 00:06:51,000
but they did things a bit differently

156
00:06:51,000 --> 00:06:52,860
this time

157
00:06:52,860 --> 00:06:55,380
what did they do differently is that

158
00:06:55,380 --> 00:06:59,280
no more late Court reviews no more late

159
00:06:59,280 --> 00:07:01,740
security testing no more patching in

160
00:07:01,740 --> 00:07:04,319
production they included all of that

161
00:07:04,319 --> 00:07:06,360
into their software development life

162
00:07:06,360 --> 00:07:08,720
cycle

163
00:07:09,840 --> 00:07:12,539
um and well

164
00:07:12,539 --> 00:07:16,319
as much as we would all love to follow

165
00:07:16,319 --> 00:07:19,259
NASA's example and shift left security

166
00:07:19,259 --> 00:07:20,940
to include all of that into the

167
00:07:20,940 --> 00:07:22,440
development life cycle

168
00:07:22,440 --> 00:07:24,660
some companies some organizations

169
00:07:24,660 --> 00:07:27,360
struggle with that apparently in a

170
00:07:27,360 --> 00:07:31,139
recent survey of about the state of

171
00:07:31,139 --> 00:07:34,919
devsecups 43 of respondents say that

172
00:07:34,919 --> 00:07:36,900
they were frustrated that security

173
00:07:36,900 --> 00:07:39,180
testing was done late

174
00:07:39,180 --> 00:07:43,099
in the software development lifecycle

175
00:07:43,680 --> 00:07:47,400
so what can we do to help this company I

176
00:07:47,400 --> 00:07:50,180
mean what could these companies do to

177
00:07:50,180 --> 00:07:53,460
effectively include security testing

178
00:07:53,460 --> 00:07:56,719
into their sdlc

179
00:07:58,440 --> 00:08:01,020
I propose you to look back at the

180
00:08:01,020 --> 00:08:03,240
success of devops and get the lessons

181
00:08:03,240 --> 00:08:05,819
learned from devops how did devops

182
00:08:05,819 --> 00:08:09,840
succeed in in uh in being deployed in

183
00:08:09,840 --> 00:08:10,919
organizations

184
00:08:10,919 --> 00:08:14,160
I think that the key factor the key

185
00:08:14,160 --> 00:08:16,380
success factor for that is empowering

186
00:08:16,380 --> 00:08:17,699
Developers

187
00:08:17,699 --> 00:08:20,879
you need to empower your developers to

188
00:08:20,879 --> 00:08:22,740
adopt these practices

189
00:08:22,740 --> 00:08:26,699
right and to do that

190
00:08:26,699 --> 00:08:29,039
you need three things

191
00:08:29,039 --> 00:08:31,740
in his book drive Daniel ping said that

192
00:08:31,740 --> 00:08:35,039
every one of us to be motivated to do

193
00:08:35,039 --> 00:08:37,679
something we need free things

194
00:08:37,679 --> 00:08:40,860
well no in fact we first need to be paid

195
00:08:40,860 --> 00:08:44,279
enough and once that is up the table we

196
00:08:44,279 --> 00:08:45,420
need three things

197
00:08:45,420 --> 00:08:49,080
autonomy Mastery and purpose

198
00:08:49,080 --> 00:08:52,560
this is what drives us to do something

199
00:08:52,560 --> 00:08:55,380
this is what drives our motivation

200
00:08:55,380 --> 00:08:57,300
what would that mean for security

201
00:08:57,300 --> 00:08:58,500
testing

202
00:08:58,500 --> 00:09:01,260
let's try to see what it would mean

203
00:09:01,260 --> 00:09:03,360
so autonomy autonomy would mean that

204
00:09:03,360 --> 00:09:05,640
you're in control as a developer you can

205
00:09:05,640 --> 00:09:09,420
run your tests when you want you can act

206
00:09:09,420 --> 00:09:11,459
on the results

207
00:09:11,459 --> 00:09:14,940
right you are autonomous to do that

208
00:09:14,940 --> 00:09:18,180
opposite would be that another team is

209
00:09:18,180 --> 00:09:20,459
running the test for you and then

210
00:09:20,459 --> 00:09:22,920
creates a bunch of issues and then send

211
00:09:22,920 --> 00:09:25,500
all the issues to you right I remember

212
00:09:25,500 --> 00:09:27,360
one former colleague

213
00:09:27,360 --> 00:09:29,880
telling me Oh wow hey my security tool

214
00:09:29,880 --> 00:09:33,899
we finally moved from generating a PDF

215
00:09:33,899 --> 00:09:36,540
and now they are integrating with driver

216
00:09:36,540 --> 00:09:40,140
and oh developers will love it and

217
00:09:40,140 --> 00:09:43,500
well as much as we can all agree that

218
00:09:43,500 --> 00:09:46,080
moving from PDF to visuals it's an

219
00:09:46,080 --> 00:09:48,660
improvement but developers didn't love

220
00:09:48,660 --> 00:09:50,399
it right they they were still not

221
00:09:50,399 --> 00:09:52,440
autonomous

222
00:09:52,440 --> 00:09:55,320
Mastery Mastery is being able to learn

223
00:09:55,320 --> 00:09:58,200
in the process right so you are you know

224
00:09:58,200 --> 00:10:00,420
acquiring a new scale learning so for

225
00:10:00,420 --> 00:10:01,980
security testing that would be that

226
00:10:01,980 --> 00:10:04,440
developers I mean this security during

227
00:10:04,440 --> 00:10:06,660
this security testing process we learn

228
00:10:06,660 --> 00:10:09,000
about some secure code practices we are

229
00:10:09,000 --> 00:10:12,240
able to learn and to not repeat the

230
00:10:12,240 --> 00:10:16,080
mistakes the same mistakes in the future

231
00:10:16,080 --> 00:10:18,600
the contrary would be that the expertise

232
00:10:18,600 --> 00:10:22,200
stays in that other team and doesn't

233
00:10:22,200 --> 00:10:24,240
benefit the Developers

234
00:10:24,240 --> 00:10:26,519
and finally purpose

235
00:10:26,519 --> 00:10:28,800
well the purpose of a developer right

236
00:10:28,800 --> 00:10:30,839
that would be to

237
00:10:30,839 --> 00:10:34,800
um to to create a delightful software

238
00:10:34,800 --> 00:10:37,440
for their uh for their users right we

239
00:10:37,440 --> 00:10:40,680
all know that so high quality and high

240
00:10:40,680 --> 00:10:42,959
security too right they should be able

241
00:10:42,959 --> 00:10:45,180
to relate what they are doing to this

242
00:10:45,180 --> 00:10:47,040
purpose right so they should be able to

243
00:10:47,040 --> 00:10:50,220
say oh okay I know why I need to fix

244
00:10:50,220 --> 00:10:52,200
this thing it's I can relate it to this

245
00:10:52,200 --> 00:10:54,360
purpose right but if you just

246
00:10:54,360 --> 00:10:56,820
do what you're told to hey pick the

247
00:10:56,820 --> 00:10:57,720
string

248
00:10:57,720 --> 00:10:59,640
you don't have this relation and it

249
00:10:59,640 --> 00:11:01,800
doesn't work

250
00:11:01,800 --> 00:11:04,019
so yeah I think that we should Empower

251
00:11:04,019 --> 00:11:06,480
developers as a key social factor to

252
00:11:06,480 --> 00:11:09,779
deploy devsecops practices

253
00:11:09,779 --> 00:11:12,720
and how do we earn power developments

254
00:11:12,720 --> 00:11:14,579
well we give them code

255
00:11:14,579 --> 00:11:17,220
this is what they do right

256
00:11:17,220 --> 00:11:18,060
um

257
00:11:18,060 --> 00:11:19,500
let's see some examples of the past

258
00:11:19,500 --> 00:11:23,279
again right when I needed to

259
00:11:23,279 --> 00:11:25,980
deploy practices such as functional

260
00:11:25,980 --> 00:11:28,320
testing with Developers

261
00:11:28,320 --> 00:11:31,079
what worked was when they were able to

262
00:11:31,079 --> 00:11:33,720
code it themselves with tools like

263
00:11:33,720 --> 00:11:36,360
Fitness and selling them

264
00:11:36,360 --> 00:11:40,040
devops when we wanted to include

265
00:11:40,040 --> 00:11:42,180
deployment testing and probability

266
00:11:42,180 --> 00:11:43,560
testing

267
00:11:43,560 --> 00:11:46,920
what worked was infrastructure as code

268
00:11:46,920 --> 00:11:50,279
this this is really what ticked and made

269
00:11:50,279 --> 00:11:51,540
them adopt these practices

270
00:11:51,540 --> 00:11:54,420
infrastructure as good

271
00:11:54,420 --> 00:11:55,800
so

272
00:11:55,800 --> 00:11:58,980
why not security escort

273
00:11:58,980 --> 00:12:01,320
it's a qts code would be

274
00:12:01,320 --> 00:12:04,860
well I took this definition from the web

275
00:12:04,860 --> 00:12:07,920
but basically what I'm what I want to do

276
00:12:07,920 --> 00:12:09,180
is

277
00:12:09,180 --> 00:12:11,579
um that the developers are able to code

278
00:12:11,579 --> 00:12:14,399
their security testing their security

279
00:12:14,399 --> 00:12:17,820
checks right and with that you get

280
00:12:17,820 --> 00:12:21,440
automation you get repeatability you get

281
00:12:21,440 --> 00:12:24,899
reusability you get documentation right

282
00:12:24,899 --> 00:12:26,940
same as infrastructure as good but with

283
00:12:26,940 --> 00:12:28,200
security

284
00:12:28,200 --> 00:12:31,640
you get all of these benefits

285
00:12:31,860 --> 00:12:35,100
and this is where I introduced codeql so

286
00:12:35,100 --> 00:12:38,459
codeql is a way to code your security

287
00:12:38,459 --> 00:12:41,339
checks it's a SAS a static analysis

288
00:12:41,339 --> 00:12:43,500
security testing tool which means that

289
00:12:43,500 --> 00:12:45,720
it will run static analysis on your code

290
00:12:45,720 --> 00:12:48,360
it will not run your program

291
00:12:48,360 --> 00:12:51,779
ql stands for query language

292
00:12:51,779 --> 00:12:55,320
it's kind of SQL for code it will query

293
00:12:55,320 --> 00:12:58,019
your code as if it's data

294
00:12:58,019 --> 00:13:00,060
with this language you describe what to

295
00:13:00,060 --> 00:13:02,339
find and not how to find it

296
00:13:02,339 --> 00:13:04,800
it's very expressive in this way

297
00:13:04,800 --> 00:13:06,959
and it's a logical declarative language

298
00:13:06,959 --> 00:13:09,480
based on data log and it's also object

299
00:13:09,480 --> 00:13:12,600
oriented which is super useful for

300
00:13:12,600 --> 00:13:16,880
reusability we will see that later

301
00:13:17,579 --> 00:13:20,399
a bit more into details codeql Works in

302
00:13:20,399 --> 00:13:23,000
two phases first phase it will extract

303
00:13:23,000 --> 00:13:26,760
your code into a relational database

304
00:13:26,760 --> 00:13:28,800
it will extract all aspects of your code

305
00:13:28,800 --> 00:13:30,959
like the abstract syntax tree some

306
00:13:30,959 --> 00:13:32,100
semantics

307
00:13:32,100 --> 00:13:34,500
and even the control flow graph

308
00:13:34,500 --> 00:13:37,079
and then it gives you an optimized

309
00:13:37,079 --> 00:13:38,700
object-oriented language that will

310
00:13:38,700 --> 00:13:40,260
abstract

311
00:13:40,260 --> 00:13:44,839
Ware right to query this DB

312
00:13:45,180 --> 00:13:47,399
um yeah so on the diagram on the left

313
00:13:47,399 --> 00:13:49,459
you see a bit more these two phases

314
00:13:49,459 --> 00:13:53,160
extraction and then query

315
00:13:53,160 --> 00:13:55,139
now let's have a look at the first

316
00:13:55,139 --> 00:13:57,660
example so what happens behind the hood

317
00:13:57,660 --> 00:13:58,740
is that

318
00:13:58,740 --> 00:14:02,700
in the GB we have a table that has been

319
00:14:02,700 --> 00:14:05,339
created that is named function and in

320
00:14:05,339 --> 00:14:10,220
this table you have a colon called name

321
00:14:10,320 --> 00:14:12,360
and then you have all the the functional

322
00:14:12,360 --> 00:14:14,720
declarations in this table and codequel

323
00:14:14,720 --> 00:14:19,019
created a class on top of that so you

324
00:14:19,019 --> 00:14:21,480
have a class function that Maps the

325
00:14:21,480 --> 00:14:22,320
table

326
00:14:22,320 --> 00:14:24,839
called function and you in this class

327
00:14:24,839 --> 00:14:26,880
you have a member name that you can

328
00:14:26,880 --> 00:14:28,860
access with get name that Maps

329
00:14:28,860 --> 00:14:31,200
the name column

330
00:14:31,200 --> 00:14:33,060
if you look at the second example you'll

331
00:14:33,060 --> 00:14:35,519
see that we are able like in SQL to do a

332
00:14:35,519 --> 00:14:37,440
join between two tables so here the

333
00:14:37,440 --> 00:14:39,540
functions and the function Scrolls and

334
00:14:39,540 --> 00:14:41,519
this joint is made super easily with the

335
00:14:41,519 --> 00:14:45,360
line and C dot Target equals f

336
00:14:45,360 --> 00:14:48,959
right so we are binding the target of

337
00:14:48,959 --> 00:14:51,120
the curl with the function

338
00:14:51,120 --> 00:14:53,399
we can also access directly the first

339
00:14:53,399 --> 00:14:55,620
argument of the curl with C dot get

340
00:14:55,620 --> 00:14:56,880
argument

341
00:14:56,880 --> 00:15:00,779
so here you see that it's abstracting

342
00:15:00,779 --> 00:15:03,480
the sequel right and it gives you a

343
00:15:03,480 --> 00:15:05,220
language that is more expressive

344
00:15:05,220 --> 00:15:07,680
something that you can read in plain

345
00:15:07,680 --> 00:15:10,339
English right

346
00:15:12,899 --> 00:15:14,880
um so with codeql you have support for

347
00:15:14,880 --> 00:15:16,940
all of these languages

348
00:15:16,940 --> 00:15:19,740
to C sharp that is missing on this slide

349
00:15:19,740 --> 00:15:23,540
and you we have also a swift and kotlin

350
00:15:23,540 --> 00:15:27,060
that are in beta right now

351
00:15:27,060 --> 00:15:28,139
so

352
00:15:28,139 --> 00:15:30,720
for each language we need a bit of work

353
00:15:30,720 --> 00:15:33,180
to support it because the code team

354
00:15:33,180 --> 00:15:37,139
needs to design the optimal

355
00:15:37,139 --> 00:15:41,040
um data schema we need to design the

356
00:15:41,040 --> 00:15:42,720
extractor that transform your code into

357
00:15:42,720 --> 00:15:46,699
a DB we need also to provide the

358
00:15:46,699 --> 00:15:48,680
fundamental

359
00:15:48,680 --> 00:15:51,300
libraries uh like the Comfort photograph

360
00:15:51,300 --> 00:15:54,860
for example so each new language

361
00:15:54,860 --> 00:15:57,839
requires a bit of a bit of work so it's

362
00:15:57,839 --> 00:16:01,699
not a one fits all

363
00:16:03,600 --> 00:16:07,079
and then so once you have a

364
00:16:07,079 --> 00:16:09,420
the code queries the code queries are

365
00:16:09,420 --> 00:16:11,100
open source and you can have two

366
00:16:11,100 --> 00:16:13,260
possible ways you can just consume them

367
00:16:13,260 --> 00:16:15,420
right the queries are there open source

368
00:16:15,420 --> 00:16:17,339
you can just run them on your code or

369
00:16:17,339 --> 00:16:19,680
you can be a writer

370
00:16:19,680 --> 00:16:22,800
if you choose to consume

371
00:16:22,800 --> 00:16:25,380
um well this is super easy you can

372
00:16:25,380 --> 00:16:26,160
really

373
00:16:26,160 --> 00:16:27,959
immediately benefit from this group is

374
00:16:27,959 --> 00:16:29,459
because

375
00:16:29,459 --> 00:16:32,519
um if you're out of an open source

376
00:16:32,519 --> 00:16:34,680
project it's free for you it's free for

377
00:16:34,680 --> 00:16:36,180
all open source project not only the

378
00:16:36,180 --> 00:16:38,759
project that are hosted on GitHub

379
00:16:38,759 --> 00:16:41,100
if you are on YouTube though you can

380
00:16:41,100 --> 00:16:42,899
also have

381
00:16:42,899 --> 00:16:45,839
free inclusion of this into your CI CD

382
00:16:45,839 --> 00:16:47,100
and it's

383
00:16:47,100 --> 00:16:49,740
one click easy you go to your GitHub

384
00:16:49,740 --> 00:16:52,500
project and you enable codeql this is a

385
00:16:52,500 --> 00:16:54,899
one-click configuration and once you do

386
00:16:54,899 --> 00:16:57,240
that you will have code query running on

387
00:16:57,240 --> 00:16:59,399
your project automatically

388
00:16:59,399 --> 00:17:02,639
and for example codeql will analyze all

389
00:17:02,639 --> 00:17:04,679
your new pull requests

390
00:17:04,679 --> 00:17:07,439
and it will comment on it

391
00:17:07,439 --> 00:17:10,919
so here for example you have a new code

392
00:17:10,919 --> 00:17:13,220
popping up and you have a codequel

393
00:17:13,220 --> 00:17:15,780
analysis telling you that there is a

394
00:17:15,780 --> 00:17:19,160
possible uh client-side cross-size

395
00:17:19,160 --> 00:17:22,980
xss in your code so

396
00:17:22,980 --> 00:17:23,640
um

397
00:17:23,640 --> 00:17:25,559
here as you can see

398
00:17:25,559 --> 00:17:28,679
it's it's really acting as if you had a

399
00:17:28,679 --> 00:17:30,780
peer reviewer telling you hey I think

400
00:17:30,780 --> 00:17:32,520
there is a problem here in your code so

401
00:17:32,520 --> 00:17:34,740
it's it's not changing anything from

402
00:17:34,740 --> 00:17:36,840
what you'd usually do it's included into

403
00:17:36,840 --> 00:17:39,120
your software development lifecycle

404
00:17:39,120 --> 00:17:40,500
right

405
00:17:40,500 --> 00:17:44,520
um you can also form your IDE

406
00:17:44,520 --> 00:17:47,179
get these uh

407
00:17:47,179 --> 00:17:50,039
these alerts and then be able to code

408
00:17:50,039 --> 00:17:53,340
the fix immediately if you click on show

409
00:17:53,340 --> 00:17:55,320
more details here you will have a

410
00:17:55,320 --> 00:17:56,940
detailed explanation of the availability

411
00:17:56,940 --> 00:18:00,679
that will educate you about this

412
00:18:00,679 --> 00:18:03,480
this reliability you will get a

413
00:18:03,480 --> 00:18:05,520
remedition device

414
00:18:05,520 --> 00:18:09,000
so as a developer you will be able to

415
00:18:09,000 --> 00:18:13,690
act on it immediately and autonomously

416
00:18:13,690 --> 00:18:14,039
[Music]

417
00:18:14,039 --> 00:18:15,179
um

418
00:18:15,179 --> 00:18:17,840
I know yes this documentation is also

419
00:18:17,840 --> 00:18:19,740
customizable because as I said the

420
00:18:19,740 --> 00:18:22,140
querys are open source so you can you

421
00:18:22,140 --> 00:18:24,000
know kind of adapt them to your

422
00:18:24,000 --> 00:18:26,700
particular the particular case of your

423
00:18:26,700 --> 00:18:28,200
code of your project your organization

424
00:18:28,200 --> 00:18:31,260
to get your developers really doing the

425
00:18:31,260 --> 00:18:33,840
right thing uh for this particular

426
00:18:33,840 --> 00:18:36,379
vulnerability

427
00:18:39,179 --> 00:18:43,200
and now if you are a writer then I've

428
00:18:43,200 --> 00:18:45,720
got a demo for you

429
00:18:45,720 --> 00:18:48,900
imagine that um

430
00:18:48,900 --> 00:18:52,679
your open source maintainer yeah those

431
00:18:52,679 --> 00:18:55,080
are the open source maintainer of uh

432
00:18:55,080 --> 00:18:57,240
popular Java Library

433
00:18:57,240 --> 00:19:00,799
let's say block 40 completely randomly

434
00:19:00,799 --> 00:19:03,480
and then you heard about this

435
00:19:03,480 --> 00:19:07,200
vulnerability pattern gndi injection

436
00:19:07,200 --> 00:19:09,900
so you want to make sure that your

437
00:19:09,900 --> 00:19:12,299
library is not vulnerable to that

438
00:19:12,299 --> 00:19:14,160
what would that be in your case it would

439
00:19:14,160 --> 00:19:16,799
be that an attacker can use your logging

440
00:19:16,799 --> 00:19:18,020
functionality

441
00:19:18,020 --> 00:19:21,360
where he can pass us they become passes

442
00:19:21,360 --> 00:19:23,480
training and then this training will

443
00:19:23,480 --> 00:19:27,000
perform a gender agenda lookup in a

444
00:19:27,000 --> 00:19:29,660
remote server

445
00:19:30,059 --> 00:19:33,059
what does that looks like so

446
00:19:33,059 --> 00:19:34,559
for example

447
00:19:34,559 --> 00:19:37,020
it means that here you have an attacker

448
00:19:37,020 --> 00:19:40,620
who can control this message

449
00:19:40,620 --> 00:19:41,700
here

450
00:19:41,700 --> 00:19:44,340
in this message they will pass a gndi

451
00:19:44,340 --> 00:19:47,640
lookup and this will end up into this

452
00:19:47,640 --> 00:19:50,580
file generally imanager.java into this

453
00:19:50,580 --> 00:19:53,100
call to context lookup

454
00:19:53,100 --> 00:19:56,520
into this argument name

455
00:19:56,520 --> 00:19:58,320
Okay so

456
00:19:58,320 --> 00:19:59,880
what I will do is that I will try to

457
00:19:59,880 --> 00:20:02,580
show you how we find this pattern with

458
00:20:02,580 --> 00:20:07,080
code ql in in log 4G

459
00:20:07,080 --> 00:20:10,140
so I mean Visual Studio code and what I

460
00:20:10,140 --> 00:20:13,620
did is that I installed the

461
00:20:13,620 --> 00:20:16,860
code ql extension here all of this is is

462
00:20:16,860 --> 00:20:18,860
free for open source

463
00:20:18,860 --> 00:20:20,760
and then

464
00:20:20,760 --> 00:20:23,940
as I told you we've gotql you have to do

465
00:20:23,940 --> 00:20:26,280
two phases you generate the code base

466
00:20:26,280 --> 00:20:28,380
and then you credit this code base so

467
00:20:28,380 --> 00:20:32,059
I've used the code qlcli to generate the

468
00:20:32,059 --> 00:20:35,340
log4j library here and I imported it

469
00:20:35,340 --> 00:20:38,700
into my workspace so now icon run

470
00:20:38,700 --> 00:20:40,919
queries on it

471
00:20:40,919 --> 00:20:44,039
ok so for example here I got a query

472
00:20:44,039 --> 00:20:46,440
that look for empty statement block and

473
00:20:46,440 --> 00:20:49,320
I can run it but that's not what is

474
00:20:49,320 --> 00:20:52,140
interesting for me what I want to find I

475
00:20:52,140 --> 00:20:53,160
want to find

476
00:20:53,160 --> 00:20:57,120
this message here

477
00:20:57,120 --> 00:20:59,039
Okay so

478
00:20:59,039 --> 00:21:01,980
one thing that is super useful is that

479
00:21:01,980 --> 00:21:05,520
in codeql you in in this extension you

480
00:21:05,520 --> 00:21:08,940
also have the ASW the AST viewer here

481
00:21:08,940 --> 00:21:11,820
that gives you the name you know of the

482
00:21:11,820 --> 00:21:14,760
classes that codeql is mapping your code

483
00:21:14,760 --> 00:21:15,600
with

484
00:21:15,600 --> 00:21:18,500
so for example

485
00:21:18,780 --> 00:21:22,320
here the method well the class that I

486
00:21:22,320 --> 00:21:24,960
need to query is called method cool

487
00:21:24,960 --> 00:21:27,480
this parameter here

488
00:21:27,480 --> 00:21:29,880
well it's called the parameter and for

489
00:21:29,880 --> 00:21:33,179
example this is an annotation okay cool

490
00:21:33,179 --> 00:21:35,159
very useful right

491
00:21:35,159 --> 00:21:36,900
some of the names are pretty intuitive

492
00:21:36,900 --> 00:21:39,179
but in some cases it's very useful to

493
00:21:39,179 --> 00:21:41,280
use this TPO to know what you are

494
00:21:41,280 --> 00:21:43,919
querying okay so let's do that

495
00:21:43,919 --> 00:21:46,880
I want to find

496
00:21:46,880 --> 00:21:50,520
the parameter the first parameter of a

497
00:21:50,520 --> 00:21:55,559
method that overrides logo.info

498
00:21:56,580 --> 00:21:59,178
so

499
00:22:00,960 --> 00:22:03,659
look

500
00:22:03,659 --> 00:22:06,539
for so here as you can see my friend

501
00:22:06,539 --> 00:22:09,120
copilot is clicking in and helping me I

502
00:22:09,120 --> 00:22:11,280
won't lie I will use it because it's so

503
00:22:11,280 --> 00:22:15,120
super useful so I'm looking for a method

504
00:22:15,120 --> 00:22:18,559
that overrides

505
00:22:19,340 --> 00:22:21,960
logo.info yes it tells me that because I

506
00:22:21,960 --> 00:22:25,620
practiced of course so okay well

507
00:22:25,620 --> 00:22:28,080
and has a consequence parameter yes

508
00:22:28,080 --> 00:22:31,440
please okay so from

509
00:22:31,440 --> 00:22:33,059
method

510
00:22:33,059 --> 00:22:38,640
pen and oop okay and parameter P let's

511
00:22:38,640 --> 00:22:40,320
see

512
00:22:40,320 --> 00:22:43,980
um so my method is overriding logo.info

513
00:22:43,980 --> 00:22:46,559
my method that's one parameter this

514
00:22:46,559 --> 00:22:49,740
parameter is p and the type of p is cow

515
00:22:49,740 --> 00:22:52,080
sequence okay yes I think this is what I

516
00:22:52,080 --> 00:22:54,539
want and then

517
00:22:54,539 --> 00:22:55,919
select

518
00:22:55,919 --> 00:22:58,860
no I don't want to select the method I

519
00:22:58,860 --> 00:23:01,740
want to select the parameter

520
00:23:01,740 --> 00:23:03,600
okay

521
00:23:03,600 --> 00:23:06,918
let's run this query

522
00:23:10,799 --> 00:23:12,600
okay one result

523
00:23:12,600 --> 00:23:14,100
if I click on it

524
00:23:14,100 --> 00:23:17,100
boom this is exactly what I was looking

525
00:23:17,100 --> 00:23:19,260
for

526
00:23:19,260 --> 00:23:21,720
okay cool

527
00:23:21,720 --> 00:23:23,159
now

528
00:23:23,159 --> 00:23:26,039
what I want is

529
00:23:26,039 --> 00:23:27,240
um

530
00:23:27,240 --> 00:23:29,900
this one I want the first argument

531
00:23:29,900 --> 00:23:32,659
of the call to a method called lookup

532
00:23:32,659 --> 00:23:35,900
and this method is a member of a class

533
00:23:35,900 --> 00:23:40,260
that implements jabax namings dot

534
00:23:40,260 --> 00:23:41,940
context

535
00:23:41,940 --> 00:23:44,340
okay now what we'll do we will ask

536
00:23:44,340 --> 00:23:46,799
copper a lot to work to find out for us

537
00:23:46,799 --> 00:23:51,240
so look uh for uh

538
00:23:51,240 --> 00:23:54,020
method call

539
00:23:54,020 --> 00:23:57,799
uh that implements

540
00:23:57,799 --> 00:24:03,179
well method call of a method called

541
00:24:03,179 --> 00:24:05,780
lookup

542
00:24:07,260 --> 00:24:08,940
um

543
00:24:08,940 --> 00:24:10,620
and

544
00:24:10,620 --> 00:24:13,740
the method is declared in a class that

545
00:24:13,740 --> 00:24:16,200
is a subtype of jadak naming context yes

546
00:24:16,200 --> 00:24:17,720
okay

547
00:24:17,720 --> 00:24:19,500
ah

548
00:24:19,500 --> 00:24:22,799
and select the first

549
00:24:22,799 --> 00:24:25,520
argument

550
00:24:25,679 --> 00:24:27,179
Okay so

551
00:24:27,179 --> 00:24:31,380
from let's see from method access method

552
00:24:31,380 --> 00:24:34,260
I'm binding the two

553
00:24:34,260 --> 00:24:36,360
the name of the method is lookup

554
00:24:36,360 --> 00:24:38,760
and the declaring type which is the

555
00:24:38,760 --> 00:24:41,600
class where this number is

556
00:24:41,600 --> 00:24:45,120
is implementing jabax naming context

557
00:24:45,120 --> 00:24:48,780
well this is exactly what I want

558
00:24:48,780 --> 00:24:51,480
and I will just select the first

559
00:24:51,480 --> 00:24:52,860
argument

560
00:24:52,860 --> 00:24:57,120
here I need to comment this bit here

561
00:24:57,120 --> 00:25:02,780
okay and I will run this query

562
00:25:05,940 --> 00:25:08,100
okay I got two results

563
00:25:08,100 --> 00:25:10,380
if I click on the first one

564
00:25:10,380 --> 00:25:12,240
it's in data source connection through

565
00:25:12,240 --> 00:25:15,120
the Java this is not what I'm looking

566
00:25:15,120 --> 00:25:16,500
for

567
00:25:16,500 --> 00:25:18,539
but this one is exactly the one I'm

568
00:25:18,539 --> 00:25:20,940
looking for I mean gndi manageable Java

569
00:25:20,940 --> 00:25:22,380
and

570
00:25:22,380 --> 00:25:26,940
I've got my uh my first argument

571
00:25:26,940 --> 00:25:28,620
cool

572
00:25:28,620 --> 00:25:30,900
okay so what I did now I found these two

573
00:25:30,900 --> 00:25:33,179
places in the in the code but what I

574
00:25:33,179 --> 00:25:34,740
want to know is

575
00:25:34,740 --> 00:25:38,220
is there a possibility that this uh

576
00:25:38,220 --> 00:25:41,880
untrusted Source right that that an

577
00:25:41,880 --> 00:25:43,620
attacker can pass to the lodging

578
00:25:43,620 --> 00:25:44,760
personality

579
00:25:44,760 --> 00:25:46,559
is this a possibility that this data

580
00:25:46,559 --> 00:25:48,000
here can flow

581
00:25:48,000 --> 00:25:51,720
to the jndi lookup

582
00:25:51,720 --> 00:25:54,659
let's ask cosql code about that

583
00:25:54,659 --> 00:25:56,340
how do we do that

584
00:25:56,340 --> 00:25:59,640
codeql has a chain tracking default

585
00:25:59,640 --> 00:26:03,179
library that you can reuse this Library

586
00:26:03,179 --> 00:26:06,779
will tell you if there is a potential

587
00:26:06,779 --> 00:26:10,860
flow between a source and what we call a

588
00:26:10,860 --> 00:26:12,419
sink

589
00:26:12,419 --> 00:26:14,159
and for that

590
00:26:14,159 --> 00:26:16,919
this Library comes with a bullet a

591
00:26:16,919 --> 00:26:18,960
boilerplate code

592
00:26:18,960 --> 00:26:23,000
in this code you just have to complete

593
00:26:23,000 --> 00:26:26,159
the definition of what you consider as

594
00:26:26,159 --> 00:26:28,500
an interested source

595
00:26:28,500 --> 00:26:31,740
here with this predicate is source and

596
00:26:31,740 --> 00:26:34,740
what you consider as being a dangerous

597
00:26:34,740 --> 00:26:36,480
thing

598
00:26:36,480 --> 00:26:38,700
we've implementing this predicate is

599
00:26:38,700 --> 00:26:40,080
zinc

600
00:26:40,080 --> 00:26:43,200
so let's use that I will

601
00:26:43,200 --> 00:26:46,320
copy this oil upgrade code

602
00:26:46,320 --> 00:26:47,380
into

603
00:26:47,380 --> 00:26:47,820
[Music]

604
00:26:47,820 --> 00:26:49,200
um

605
00:26:49,200 --> 00:26:52,740
my file here I will command this part

606
00:26:52,740 --> 00:26:54,480
and

607
00:26:54,480 --> 00:26:56,760
I will copy the code here

608
00:26:56,760 --> 00:26:59,460
okay and now let's Implement in source

609
00:26:59,460 --> 00:27:02,760
and in sync well we already implemented

610
00:27:02,760 --> 00:27:06,380
them in fact right the source is

611
00:27:06,380 --> 00:27:10,620
this parameter of logo.info

612
00:27:10,620 --> 00:27:13,140
let me copy that here

613
00:27:13,140 --> 00:27:17,299
boom I will uncomment

614
00:27:18,240 --> 00:27:20,340
and

615
00:27:20,340 --> 00:27:23,000
so

616
00:27:24,179 --> 00:27:27,480
if there is a method and a parameter P

617
00:27:27,480 --> 00:27:29,580
such as

618
00:27:29,580 --> 00:27:31,679
this method overwise logo and for this

619
00:27:31,679 --> 00:27:33,600
method as one parameter this parameter

620
00:27:33,600 --> 00:27:37,500
is B and of type child sequence

621
00:27:37,500 --> 00:27:41,279
and I have to say that my source

622
00:27:41,279 --> 00:27:45,320
is my parameter

623
00:27:45,539 --> 00:27:47,460
I think

624
00:27:47,460 --> 00:27:48,960
so here I've got a problem because

625
00:27:48,960 --> 00:27:51,600
source is not of the good type so I need

626
00:27:51,600 --> 00:27:53,820
to cast it

627
00:27:53,820 --> 00:27:56,960
as parameter okay

628
00:27:58,020 --> 00:28:00,179
so here what I will do that I will

629
00:28:00,179 --> 00:28:02,520
evaluate this predicate to make sure

630
00:28:02,520 --> 00:28:04,760
that I've got the same result

631
00:28:04,760 --> 00:28:06,779
as before

632
00:28:06,779 --> 00:28:07,919
just

633
00:28:07,919 --> 00:28:10,140
to be sure

634
00:28:10,140 --> 00:28:14,700
yes we have the same result okay cool

635
00:28:14,700 --> 00:28:17,279
let's go back okay so we have

636
00:28:17,279 --> 00:28:19,500
implemented our source good now we have

637
00:28:19,500 --> 00:28:22,320
to implement our sync what do we do well

638
00:28:22,320 --> 00:28:24,840
we should copy what is in here into the

639
00:28:24,840 --> 00:28:25,860
sync

640
00:28:25,860 --> 00:28:28,020
but no there is a simpler way remember

641
00:28:28,020 --> 00:28:31,820
that queries are open source

642
00:28:31,820 --> 00:28:35,820
and it's an objects oriented language

643
00:28:35,820 --> 00:28:39,000
so because of that

644
00:28:39,000 --> 00:28:40,460
the community

645
00:28:40,460 --> 00:28:43,620
people from the community are providing

646
00:28:43,620 --> 00:28:46,740
you know uh queries but also some

647
00:28:46,740 --> 00:28:49,200
libraries and some classes

648
00:28:49,200 --> 00:28:51,480
and that we can reuse

649
00:28:51,480 --> 00:28:54,059
it happens that a community contributor

650
00:28:54,059 --> 00:28:57,779
created a class called jndi injection

651
00:28:57,779 --> 00:29:00,480
sync hmm

652
00:29:00,480 --> 00:29:03,360
I think that I will use this one

653
00:29:03,360 --> 00:29:05,940
so I will say yeah see my sync is an

654
00:29:05,940 --> 00:29:07,980
instance of this class gndi injection

655
00:29:07,980 --> 00:29:09,600
sync

656
00:29:09,600 --> 00:29:12,539
let's quickly evaluate to make sure that

657
00:29:12,539 --> 00:29:14,159
okay this class is coming from the

658
00:29:14,159 --> 00:29:16,080
community I'm not really sure if that

659
00:29:16,080 --> 00:29:18,059
does what I want

660
00:29:18,059 --> 00:29:20,399
oh so see it's not doing exactly the

661
00:29:20,399 --> 00:29:22,620
same thing right uh it gives me Five

662
00:29:22,620 --> 00:29:24,960
results in instead of the of the two

663
00:29:24,960 --> 00:29:26,940
ones that I had so it's less precise

664
00:29:26,940 --> 00:29:30,899
that what I had before but

665
00:29:30,899 --> 00:29:33,240
this one here is exactly the one that

666
00:29:33,240 --> 00:29:36,059
I'm looking for so let's shoot it right

667
00:29:36,059 --> 00:29:38,700
let's let's trade this this uh Precision

668
00:29:38,700 --> 00:29:40,980
for Simplicity

669
00:29:40,980 --> 00:29:42,840
and let's use that so now I have

670
00:29:42,840 --> 00:29:45,240
implemented my source and my sync

671
00:29:45,240 --> 00:29:50,539
I will run the query to see what I get

672
00:29:55,020 --> 00:29:57,360
and boom I've got a result

673
00:29:57,360 --> 00:30:00,419
let's look at the results so codeql

674
00:30:00,419 --> 00:30:03,360
found four different paths between this

675
00:30:03,360 --> 00:30:05,760
source and this sync

676
00:30:05,760 --> 00:30:07,919
let's look at one of them

677
00:30:07,919 --> 00:30:10,500
so here indeed the first step of this

678
00:30:10,500 --> 00:30:13,380
path I can see that it's my parameter

679
00:30:13,380 --> 00:30:15,539
here and then if I take the seventh step

680
00:30:15,539 --> 00:30:19,440
it goes just one one line below here and

681
00:30:19,440 --> 00:30:22,140
then certainly it will go to log if the

682
00:30:22,140 --> 00:30:25,200
definition of log is enabled

683
00:30:25,200 --> 00:30:26,520
you

684
00:30:26,520 --> 00:30:28,919
yes etc etc

685
00:30:28,919 --> 00:30:33,539
and it goes across multiple steps across

686
00:30:33,539 --> 00:30:35,820
multiple functions across multiple files

687
00:30:35,820 --> 00:30:38,299
given

688
00:30:38,760 --> 00:30:40,679
down to

689
00:30:40,679 --> 00:30:43,740
the call to my gen di lookup

690
00:30:43,740 --> 00:30:47,460
so you see more than 100 steps if we

691
00:30:47,460 --> 00:30:50,100
look at this other part here so same

692
00:30:50,100 --> 00:30:53,418
thing you have

693
00:30:53,899 --> 00:30:57,299
150 50 steps right

694
00:30:57,299 --> 00:30:59,880
so this is something that is uh

695
00:30:59,880 --> 00:31:01,799
impossible to

696
00:31:01,799 --> 00:31:04,620
to find manually right even if you Elon

697
00:31:04,620 --> 00:31:05,940
Musk and you have

698
00:31:05,940 --> 00:31:07,980
code review superpower and you can read

699
00:31:07,980 --> 00:31:11,399
pages and pages of printed code you

700
00:31:11,399 --> 00:31:13,740
cannot do that you cannot beat that so

701
00:31:13,740 --> 00:31:16,380
this is the way that you can use codeql

702
00:31:16,380 --> 00:31:21,779
to find paths across a hold of your code

703
00:31:21,779 --> 00:31:24,840
here I want to mention one thing I the

704
00:31:24,840 --> 00:31:26,460
the minimal thing that you have to do

705
00:31:26,460 --> 00:31:28,140
for this thing configuration is

706
00:31:28,140 --> 00:31:31,500
to define a source and a sink right and

707
00:31:31,500 --> 00:31:34,559
the library is already pretty good to uh

708
00:31:34,559 --> 00:31:37,200
to give you nice results but you have

709
00:31:37,200 --> 00:31:39,299
control of your 10 tracking total

710
00:31:39,299 --> 00:31:41,279
control how because you can also

711
00:31:41,279 --> 00:31:44,580
Implement two other predicates one where

712
00:31:44,580 --> 00:31:46,799
you can Define sanitizers you can say

713
00:31:46,799 --> 00:31:48,720
hey when you're passing through this

714
00:31:48,720 --> 00:31:52,500
call then it's sanitizing the data so

715
00:31:52,500 --> 00:31:54,539
stop your 10 tracking here don't go

716
00:31:54,539 --> 00:31:57,539
don't go through

717
00:31:57,539 --> 00:31:59,760
the other side right on the other side

718
00:31:59,760 --> 00:32:01,500
you can say the opposite and say hey

719
00:32:01,500 --> 00:32:03,899
imagine for example that you are calling

720
00:32:03,899 --> 00:32:06,240
an external framework that you don't

721
00:32:06,240 --> 00:32:08,460
know about right I mean codeql doesn't

722
00:32:08,460 --> 00:32:10,679
know about this code then you can say

723
00:32:10,679 --> 00:32:13,500
hey I'm adding a 10 step I want you to

724
00:32:13,500 --> 00:32:15,899
continue the tent

725
00:32:15,899 --> 00:32:18,899
when I pass through this call

726
00:32:18,899 --> 00:32:21,240
because it's taking my my data so for

727
00:32:21,240 --> 00:32:24,120
example you can say hey I want to to

728
00:32:24,120 --> 00:32:26,279
have a change between the first argument

729
00:32:26,279 --> 00:32:28,140
of this call and the written value or

730
00:32:28,140 --> 00:32:31,260
the first argument of this call and that

731
00:32:31,260 --> 00:32:34,380
number of that argument of this girl I

732
00:32:34,380 --> 00:32:35,760
want you to propagate the time so that

733
00:32:35,760 --> 00:32:38,940
gives you really total control of your

734
00:32:38,940 --> 00:32:41,460
of your 10 tracking you can with

735
00:32:41,460 --> 00:32:43,740
sanitizers reduce false positive you can

736
00:32:43,740 --> 00:32:46,440
with additional 10 steps reduce for

737
00:32:46,440 --> 00:32:50,159
negatives right so the minimal

738
00:32:50,159 --> 00:32:52,020
configuration by just defining a source

739
00:32:52,020 --> 00:32:54,720
anything is already pretty good but know

740
00:32:54,720 --> 00:32:57,840
that you have full control uh on the

741
00:32:57,840 --> 00:33:01,559
team tracking feature

742
00:33:01,980 --> 00:33:04,380
so that's it we found look for Shell

743
00:33:04,380 --> 00:33:07,740
with uh with calcul that's pretty cool

744
00:33:07,740 --> 00:33:11,460
let's go back to

745
00:33:11,460 --> 00:33:14,519
our slides so

746
00:33:14,519 --> 00:33:17,700
so yeah what time for the conclusion so

747
00:33:17,700 --> 00:33:21,360
with security as code and with code QR

748
00:33:21,360 --> 00:33:25,460
you get an automated reputable reusable

749
00:33:25,460 --> 00:33:29,059
uh Security checks that you can include

750
00:33:29,059 --> 00:33:31,140
seamlessly into your software

751
00:33:31,140 --> 00:33:32,940
development lifecycle

752
00:33:32,940 --> 00:33:34,980
and if you're a developer when you get

753
00:33:34,980 --> 00:33:37,740
that you know it's code so I can read it

754
00:33:37,740 --> 00:33:39,600
I can understand I can learn from it

755
00:33:39,600 --> 00:33:42,179
baby is a documentation attached to it

756
00:33:42,179 --> 00:33:46,919
so I can really learn from it even more

757
00:33:46,919 --> 00:33:49,440
and there is also a bonus is that

758
00:33:49,440 --> 00:33:52,080
because the code queries are open source

759
00:33:52,080 --> 00:33:55,200
you get Community Driven Security checks

760
00:33:55,200 --> 00:33:57,000
what I mean by that is that these

761
00:33:57,000 --> 00:34:00,419
queries they are written by the qql team

762
00:34:00,419 --> 00:34:02,340
at GitHub they are written by 19

763
00:34:02,340 --> 00:34:05,159
security lab they're written by security

764
00:34:05,159 --> 00:34:08,159
teams at our customers they are written

765
00:34:08,159 --> 00:34:10,580
by dozens of independent security

766
00:34:10,580 --> 00:34:13,320
researchers who are contributing to the

767
00:34:13,320 --> 00:34:15,899
to this to these cultural queries

768
00:34:15,899 --> 00:34:18,599
so with that you get

769
00:34:18,599 --> 00:34:21,800
a knowledge coming from the community

770
00:34:21,800 --> 00:34:26,219
that is wider and that is more diverse

771
00:34:26,219 --> 00:34:28,020
than

772
00:34:28,020 --> 00:34:30,540
any in-house team

773
00:34:30,540 --> 00:34:32,580
could get you

774
00:34:32,580 --> 00:34:33,899
so

775
00:34:33,899 --> 00:34:36,418
that's the bonus of the of the of having

776
00:34:36,418 --> 00:34:41,099
this uh queries being Community Driven

777
00:34:41,099 --> 00:34:44,219
and that is if you want to know more you

778
00:34:44,219 --> 00:34:47,580
can browse cosplay.com you can go to the

779
00:34:47,580 --> 00:34:49,320
website of the security lab

780
00:34:49,320 --> 00:34:52,440
on this website you will find access to

781
00:34:52,440 --> 00:34:54,300
our public slide to our community slack

782
00:34:54,300 --> 00:34:57,420
you will find some examples of how we

783
00:34:57,420 --> 00:35:01,380
used codeql you will find also some code

784
00:35:01,380 --> 00:35:05,339
QR ctfs that you can you know play with

785
00:35:05,339 --> 00:35:08,640
to to learn about culture and you can

786
00:35:08,640 --> 00:35:12,300
also visit GitHub at the booth

787
00:35:12,300 --> 00:35:15,300
g17

788
00:35:16,140 --> 00:35:18,859
thank you

789
00:35:22,140 --> 00:35:24,680
foreign

790
00:35:24,740 --> 00:35:27,180
but perhaps we have time for one or two

791
00:35:27,180 --> 00:35:29,359
questions

792
00:35:30,900 --> 00:35:33,380
yes

793
00:35:47,700 --> 00:35:50,640
so no um how does that play

794
00:35:50,640 --> 00:35:52,700
yeah

795
00:35:54,300 --> 00:35:57,480
oh no no so so the question is uh how is

796
00:35:57,480 --> 00:36:00,599
uh GPT uh playing into cultural so no a

797
00:36:00,599 --> 00:36:02,940
cultural is pretty uh deterministic you

798
00:36:02,940 --> 00:36:04,980
know it just analyze your code put all

799
00:36:04,980 --> 00:36:06,960
of that into a database and then look

800
00:36:06,960 --> 00:36:09,960
for uh look for uh

801
00:36:09,960 --> 00:36:12,480
you know analyze your control flow graph

802
00:36:12,480 --> 00:36:14,700
Etc so I was just using copilot to write

803
00:36:14,700 --> 00:36:18,720
the code that does the query now if you

804
00:36:18,720 --> 00:36:21,420
go to the uh to the code ql site you

805
00:36:21,420 --> 00:36:26,040
will see that uh I I think we we run a

806
00:36:26,040 --> 00:36:29,940
beta about to use machine learning to

807
00:36:29,940 --> 00:36:31,619
identify

808
00:36:31,619 --> 00:36:34,079
more automatically some sources and some

809
00:36:34,079 --> 00:36:36,780
things right so we have a we have a bit

810
00:36:36,780 --> 00:36:37,200
of

811
00:36:37,200 --> 00:36:38,820
[Music]

812
00:36:38,820 --> 00:36:42,180
of machine learning that helps with

813
00:36:42,180 --> 00:36:44,220
defining sources and seeks automatically

814
00:36:44,220 --> 00:36:48,359
but it's uh it's still in beta uh and no

815
00:36:48,359 --> 00:36:51,540
we so we're not using uh GPT inside of

816
00:36:51,540 --> 00:36:54,359
the of the of the query itself that

817
00:36:54,359 --> 00:36:56,720
makes sense

818
00:37:01,079 --> 00:37:03,420
no more questions

819
00:37:03,420 --> 00:37:04,740
Okay so

820
00:37:04,740 --> 00:37:08,000
see you around thank you

