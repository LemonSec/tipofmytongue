1
00:00:00,840 --> 00:00:03,179
all right everyone welcome to the very

2
00:00:03,179 --> 00:00:04,440
end thank you for sticking around with

3
00:00:04,440 --> 00:00:06,839
us uh this talk is on leveraging s-bombs

4
00:00:06,839 --> 00:00:08,220
to automate packaging and transfer and

5
00:00:08,220 --> 00:00:09,660
reporting of dependencies between secure

6
00:00:09,660 --> 00:00:11,219
environments

7
00:00:11,219 --> 00:00:13,019
uh some quick introductions my name is

8
00:00:13,019 --> 00:00:15,299
Ian Dunbar Hall this is Jared heck we're

9
00:00:15,299 --> 00:00:16,619
members of Lockheed Martin's Ultra

10
00:00:16,619 --> 00:00:17,640
Factory

11
00:00:17,640 --> 00:00:19,560
um if you look at what we do we are the

12
00:00:19,560 --> 00:00:20,880
organization within the company that

13
00:00:20,880 --> 00:00:23,939
owns the devsecops experience so we do a

14
00:00:23,939 --> 00:00:25,680
lot of internal tooling and then we go

15
00:00:25,680 --> 00:00:27,240
on the integration between container

16
00:00:27,240 --> 00:00:29,099
Registries package repositories and

17
00:00:29,099 --> 00:00:31,019
other things

18
00:00:31,019 --> 00:00:33,840
so keep an open mind I think the premise

19
00:00:33,840 --> 00:00:36,180
of this talk really revolves around one

20
00:00:36,180 --> 00:00:38,280
concept you know we hear a lot about

21
00:00:38,280 --> 00:00:40,280
s-bombs over the over the week

22
00:00:40,280 --> 00:00:42,899
and we're often talking about it as a

23
00:00:42,899 --> 00:00:44,280
build artifact that's something that you

24
00:00:44,280 --> 00:00:45,660
made through through analysis with

25
00:00:45,660 --> 00:00:48,180
trivia or sift or something else and

26
00:00:48,180 --> 00:00:50,340
it's used for compliance or tracking

27
00:00:50,340 --> 00:00:52,200
I'm gonna ask you to just think about it

28
00:00:52,200 --> 00:00:53,879
slightly differently think of it as a

29
00:00:53,879 --> 00:00:55,260
packaging definition

30
00:00:55,260 --> 00:00:57,780
so we have this kind of

31
00:00:57,780 --> 00:00:59,760
agnostic

32
00:00:59,760 --> 00:01:02,640
packaging format that allows you to

33
00:01:02,640 --> 00:01:04,319
specify your Pearl and that Pearl could

34
00:01:04,319 --> 00:01:06,060
be of many different types

35
00:01:06,060 --> 00:01:07,920
so when we talk about how to package

36
00:01:07,920 --> 00:01:09,960
something and move it between different

37
00:01:09,960 --> 00:01:11,400
environments

38
00:01:11,400 --> 00:01:13,020
it's really nice because it doesn't

39
00:01:13,020 --> 00:01:14,640
necessarily tie you to one specific

40
00:01:14,640 --> 00:01:16,860
package format not necessarily you know

41
00:01:16,860 --> 00:01:19,080
say the requirements.txt file with

42
00:01:19,080 --> 00:01:20,820
python or maybe even Gradle file for

43
00:01:20,820 --> 00:01:24,500
something in the Java Realm

44
00:01:24,900 --> 00:01:27,659
so what is our problem well uh it's a

45
00:01:27,659 --> 00:01:29,040
show of hands here who here has worked

46
00:01:29,040 --> 00:01:30,780
on a classified or other secure

47
00:01:30,780 --> 00:01:31,979
environment

48
00:01:31,979 --> 00:01:34,439
yeah okay this is why you got this talk

49
00:01:34,439 --> 00:01:37,740
um so number one it sucks being a

50
00:01:37,740 --> 00:01:39,600
developer in a disconnected strict

51
00:01:39,600 --> 00:01:42,479
environment right when I say a strict

52
00:01:42,479 --> 00:01:43,860
environment I'm talking specifically

53
00:01:43,860 --> 00:01:46,079
classified or some sort of air gaps

54
00:01:46,079 --> 00:01:47,040
environment where you don't have access

55
00:01:47,040 --> 00:01:48,780
to the general internet how do you pull

56
00:01:48,780 --> 00:01:50,399
in your package dependencies how do you

57
00:01:50,399 --> 00:01:51,540
get them updated

58
00:01:51,540 --> 00:01:54,600
well what do you do you do something

59
00:01:54,600 --> 00:01:57,240
that's incredibly slow right you submit

60
00:01:57,240 --> 00:01:59,460
a package to get approved it goes to

61
00:01:59,460 --> 00:02:01,259
some queue you generate a lot of

62
00:02:01,259 --> 00:02:03,180
paperwork around it and by the time

63
00:02:03,180 --> 00:02:05,219
you're done six months later an update

64
00:02:05,219 --> 00:02:06,840
has arrived you're ready to go and start

65
00:02:06,840 --> 00:02:08,520
it all over again you're doing a lot of

66
00:02:08,520 --> 00:02:10,380
rinse and repeat and a lot of manual

67
00:02:10,380 --> 00:02:11,580
paperwork

68
00:02:11,580 --> 00:02:13,020
so the question becomes is there a

69
00:02:13,020 --> 00:02:14,580
better way

70
00:02:14,580 --> 00:02:15,239
um

71
00:02:15,239 --> 00:02:16,920
can you automate the patching the

72
00:02:16,920 --> 00:02:18,480
compliance and the delivery of those

73
00:02:18,480 --> 00:02:19,680
build dependencies and do a strict

74
00:02:19,680 --> 00:02:20,819
environment

75
00:02:20,819 --> 00:02:22,620
can this be done using existing tooling

76
00:02:22,620 --> 00:02:25,020
right how many of us write custom

77
00:02:25,020 --> 00:02:26,280
scripts all the time for a one-off

78
00:02:26,280 --> 00:02:27,540
project

79
00:02:27,540 --> 00:02:28,680
right

80
00:02:28,680 --> 00:02:30,239
is there a way to do this where you have

81
00:02:30,239 --> 00:02:32,459
a common workflow for multiple teams

82
00:02:32,459 --> 00:02:34,440
through a single data flow

83
00:02:34,440 --> 00:02:36,480
right if you have 15 teams working in a

84
00:02:36,480 --> 00:02:37,800
strict environment you don't want them

85
00:02:37,800 --> 00:02:38,940
all doing their own data flow

86
00:02:38,940 --> 00:02:40,860
synchronite neuron disks into that

87
00:02:40,860 --> 00:02:42,540
environment

88
00:02:42,540 --> 00:02:44,400
and often you're not just going to pull

89
00:02:44,400 --> 00:02:45,300
things out from the general internet

90
00:02:45,300 --> 00:02:47,099
you'll want to collect things from

91
00:02:47,099 --> 00:02:49,080
trusted sources within an intranet or

92
00:02:49,080 --> 00:02:50,819
something like iron bank or some other

93
00:02:50,819 --> 00:02:54,599
trusted um Repository

94
00:02:54,599 --> 00:02:56,099
well that's where Hopper comes in so

95
00:02:56,099 --> 00:02:56,819
we're gonna be talking a lot about

96
00:02:56,819 --> 00:02:58,620
Hopper it's an open source project that

97
00:02:58,620 --> 00:03:00,540
we've been working on and it's a

98
00:03:00,540 --> 00:03:02,040
framework for defining validating and

99
00:03:02,040 --> 00:03:03,720
transferring build dependencies between

100
00:03:03,720 --> 00:03:05,220
environments using software build

101
00:03:05,220 --> 00:03:07,980
materials right so for us we are heavy

102
00:03:07,980 --> 00:03:10,379
users of cyclone DX you've heard a lot

103
00:03:10,379 --> 00:03:12,659
this week probably about the executive

104
00:03:12,659 --> 00:03:14,040
order well if we're already going to

105
00:03:14,040 --> 00:03:15,659
produce them we're already going to make

106
00:03:15,659 --> 00:03:17,879
them can they be the thing that we use

107
00:03:17,879 --> 00:03:19,920
to to move stuff between environments

108
00:03:19,920 --> 00:03:21,959
and maybe package it up to get to a

109
00:03:21,959 --> 00:03:23,220
customer

110
00:03:23,220 --> 00:03:24,959
Hopper provides this well-defined

111
00:03:24,959 --> 00:03:28,140
solution and it's repeatable right we

112
00:03:28,140 --> 00:03:30,000
have s-bombs ideally they're going to be

113
00:03:30,000 --> 00:03:32,360
semantically released and then you can

114
00:03:32,360 --> 00:03:34,800
reprocess things over and over again to

115
00:03:34,800 --> 00:03:37,319
pull stuff in

116
00:03:37,319 --> 00:03:39,599
so I'm going to talk a lot about Hopper

117
00:03:39,599 --> 00:03:41,940
but there's two other projects that are

118
00:03:41,940 --> 00:03:43,860
pretty key to this all working one of

119
00:03:43,860 --> 00:03:45,840
them is a renovate so if you're not

120
00:03:45,840 --> 00:03:48,239
using renovate or depend about highly

121
00:03:48,239 --> 00:03:49,860
recommended right you get a tooling out

122
00:03:49,860 --> 00:03:51,540
there that will look at your upstream

123
00:03:51,540 --> 00:03:52,739
dependencies and tell you when

124
00:03:52,739 --> 00:03:54,720
something's changed and there's a patch

125
00:03:54,720 --> 00:03:57,060
or a minor or a major update

126
00:03:57,060 --> 00:03:59,220
we in-house use renovate pretty

127
00:03:59,220 --> 00:04:01,860
extensively renovate is excellent for us

128
00:04:01,860 --> 00:04:03,480
because it does that it goes out and

129
00:04:03,480 --> 00:04:05,700
looks at python packages may go look at

130
00:04:05,700 --> 00:04:07,799
them even Gradle go doesn't really

131
00:04:07,799 --> 00:04:08,700
matter

132
00:04:08,700 --> 00:04:10,319
and it's easily configurable for

133
00:04:10,319 --> 00:04:12,000
internal sources too so you can use

134
00:04:12,000 --> 00:04:13,620
renovate to look at other projects and

135
00:04:13,620 --> 00:04:15,900
say GitHub instance they have that's

136
00:04:15,900 --> 00:04:17,160
private

137
00:04:17,160 --> 00:04:19,079
we also use semantically release for

138
00:04:19,079 --> 00:04:21,418
pretty much everything so how are you

139
00:04:21,418 --> 00:04:23,880
versioning all your stuff well semantic

140
00:04:23,880 --> 00:04:25,440
version is probably the best way to do

141
00:04:25,440 --> 00:04:27,600
it and semantic release is really nice

142
00:04:27,600 --> 00:04:28,860
for us it ties in really well to our

143
00:04:28,860 --> 00:04:31,500
pipelines so at the very beginning it

144
00:04:31,500 --> 00:04:32,759
will kind of parse through all your

145
00:04:32,759 --> 00:04:34,500
commit messages and look for

146
00:04:34,500 --> 00:04:36,740
conventional commits so you say like fix

147
00:04:36,740 --> 00:04:39,900
colon whatever feature colon whatever

148
00:04:39,900 --> 00:04:42,419
for for patches and for minor updates

149
00:04:42,419 --> 00:04:44,759
and then those are used as part of the

150
00:04:44,759 --> 00:04:46,199
semantic versioning

151
00:04:46,199 --> 00:04:48,000
all right well let's take that and pair

152
00:04:48,000 --> 00:04:49,740
those two together right

153
00:04:49,740 --> 00:04:51,960
you're probably not handwriting s-bombs

154
00:04:51,960 --> 00:04:53,940
you're probably taking again I'm going

155
00:04:53,940 --> 00:04:55,199
to use Python but like a requirements

156
00:04:55,199 --> 00:04:57,720
that text file and using maybe the

157
00:04:57,720 --> 00:04:59,940
Cyclone DX tooling and generating and a

158
00:04:59,940 --> 00:05:01,860
spawn around it well let's semantically

159
00:05:01,860 --> 00:05:04,080
release that and that can be consumed as

160
00:05:04,080 --> 00:05:05,820
your packaging format to bring your

161
00:05:05,820 --> 00:05:07,320
build dependencies across that

162
00:05:07,320 --> 00:05:10,080
environment so if I'm a team and I'm

163
00:05:10,080 --> 00:05:11,639
working at a classic classified

164
00:05:11,639 --> 00:05:14,400
environment and I need up-to-date

165
00:05:14,400 --> 00:05:17,100
versions of certain packages well I can

166
00:05:17,100 --> 00:05:19,199
use these two tools to figure out when

167
00:05:19,199 --> 00:05:21,360
things change and Define what is my

168
00:05:21,360 --> 00:05:24,120
standard for that transfer for the next

169
00:05:24,120 --> 00:05:26,539
update

170
00:05:26,820 --> 00:05:29,160
so what is what does this allow us to do

171
00:05:29,160 --> 00:05:31,560
it's kind of like that multi-team single

172
00:05:31,560 --> 00:05:32,580
process

173
00:05:32,580 --> 00:05:33,960
so I'm going to show a couple diagrams

174
00:05:33,960 --> 00:05:35,639
to kind of walk through this concept a

175
00:05:35,639 --> 00:05:36,660
little bit and then I'm going to turn

176
00:05:36,660 --> 00:05:37,680
over to Jared who's going to walk

177
00:05:37,680 --> 00:05:39,840
through a demo

178
00:05:39,840 --> 00:05:41,460
um the big thing here right is if you

179
00:05:41,460 --> 00:05:43,320
have these s-bombs that different teams

180
00:05:43,320 --> 00:05:45,120
are producing they're all being updated

181
00:05:45,120 --> 00:05:46,620
with renovate and then they're

182
00:05:46,620 --> 00:05:49,080
semantically released you can build on

183
00:05:49,080 --> 00:05:51,479
that and create a tree inclusion process

184
00:05:51,479 --> 00:05:53,340
where you have like a master project

185
00:05:53,340 --> 00:05:56,220
that then references the inputs from

186
00:05:56,220 --> 00:05:57,840
these other teams that could reference

187
00:05:57,840 --> 00:06:00,300
other teams maybe you can have a generic

188
00:06:00,300 --> 00:06:02,699
process for bundling things together and

189
00:06:02,699 --> 00:06:05,880
be included in bigger deliverables

190
00:06:05,880 --> 00:06:08,820
well I'm going to jump over this diagram

191
00:06:08,820 --> 00:06:10,380
so I have three diagrams here this first

192
00:06:10,380 --> 00:06:12,000
one just kind of talking data flow I

193
00:06:12,000 --> 00:06:13,560
don't think this is going to be shocking

194
00:06:13,560 --> 00:06:15,720
to anyone if you've worked in this realm

195
00:06:15,720 --> 00:06:17,460
um we typically break things into kind

196
00:06:17,460 --> 00:06:19,740
of three three areas you have general

197
00:06:19,740 --> 00:06:21,780
internet where you might have Docker Hub

198
00:06:21,780 --> 00:06:24,419
iron bank Quay other sources of

199
00:06:24,419 --> 00:06:26,039
container images and then you have

200
00:06:26,039 --> 00:06:28,500
multiple package repositories you might

201
00:06:28,500 --> 00:06:30,479
also have stuff from GitHub especially

202
00:06:30,479 --> 00:06:32,160
if you're working a lot with go

203
00:06:32,160 --> 00:06:33,780
more Helm charts that are coming from

204
00:06:33,780 --> 00:06:36,000
from collaborator or GitHub

205
00:06:36,000 --> 00:06:38,759
we pull things into internet instances

206
00:06:38,759 --> 00:06:40,979
for proxy caching and that's where we do

207
00:06:40,979 --> 00:06:42,300
a lot of our scanning

208
00:06:42,300 --> 00:06:44,280
we look for security and other types of

209
00:06:44,280 --> 00:06:46,020
vulnerability information there

210
00:06:46,020 --> 00:06:47,880
and then we probably are going to change

211
00:06:47,880 --> 00:06:50,759
things transfer things across a diode

212
00:06:50,759 --> 00:06:53,039
using a gitlab pipeline

213
00:06:53,039 --> 00:06:54,539
so for us

214
00:06:54,539 --> 00:06:56,340
if we're talking about teams defining

215
00:06:56,340 --> 00:06:58,440
s-bombs well they're going to be pulling

216
00:06:58,440 --> 00:07:00,539
their stuff from internal references and

217
00:07:00,539 --> 00:07:02,340
using that esplan to define the what

218
00:07:02,340 --> 00:07:05,160
needs to be transferred

219
00:07:05,160 --> 00:07:07,139
I think most of us probably still do a

220
00:07:07,139 --> 00:07:08,699
decent amount of sneaker netting but if

221
00:07:08,699 --> 00:07:10,740
you want to you can use sneakernet S3

222
00:07:10,740 --> 00:07:13,979
buckets CVS or you know state of diodes

223
00:07:13,979 --> 00:07:15,600
on the other side you got this package

224
00:07:15,600 --> 00:07:17,520
and you got to do something with it well

225
00:07:17,520 --> 00:07:18,479
what are you going to do you want to

226
00:07:18,479 --> 00:07:19,740
probably transfer stuff the container

227
00:07:19,740 --> 00:07:21,660
images to whatever your secure container

228
00:07:21,660 --> 00:07:25,080
registry is the packages for python or

229
00:07:25,080 --> 00:07:27,539
whatever to your package Repository

230
00:07:27,539 --> 00:07:28,680
and then

231
00:07:28,680 --> 00:07:32,340
um mirror and merge any any git repo

232
00:07:32,340 --> 00:07:34,560
changes

233
00:07:34,560 --> 00:07:37,020
Hopper as that thing that runs in a

234
00:07:37,020 --> 00:07:40,139
pipeline kind of has a couple inputs and

235
00:07:40,139 --> 00:07:41,880
a couple outputs

236
00:07:41,880 --> 00:07:43,560
so I talked a lot about Cyclone DXs

237
00:07:43,560 --> 00:07:45,660
bombs as the thing that defines the what

238
00:07:45,660 --> 00:07:46,740
to transfer

239
00:07:46,740 --> 00:07:48,060
but that doesn't really help us in our

240
00:07:48,060 --> 00:07:49,259
situation right if I just give you an

241
00:07:49,259 --> 00:07:51,120
s-bomb it has a whole bunch of pearls

242
00:07:51,120 --> 00:07:52,259
well you need to know where to pull

243
00:07:52,259 --> 00:07:54,000
things from

244
00:07:54,000 --> 00:07:55,740
um you may not want to pull things up

245
00:07:55,740 --> 00:07:56,940
from the general Internet you may want

246
00:07:56,940 --> 00:07:59,160
those internal raw repositories or

247
00:07:59,160 --> 00:08:00,780
container registries that's where

248
00:08:00,780 --> 00:08:02,160
manifest comes in and that's our

249
00:08:02,160 --> 00:08:05,520
definition of the where to pull froms so

250
00:08:05,520 --> 00:08:08,400
we say for a specific package URL type

251
00:08:08,400 --> 00:08:10,979
like I say you know Pi Pi again pull

252
00:08:10,979 --> 00:08:13,440
from this internal Nexus instance if you

253
00:08:13,440 --> 00:08:16,860
are using a Docker Pearl type pull from

254
00:08:16,860 --> 00:08:18,599
this ordered list of container

255
00:08:18,599 --> 00:08:20,520
Registries that allows you to have an

256
00:08:20,520 --> 00:08:22,379
Enterprise registry first and maybe a

257
00:08:22,379 --> 00:08:24,479
team specific registry second and it

258
00:08:24,479 --> 00:08:26,520
will Cascade and where it goes out and

259
00:08:26,520 --> 00:08:29,000
finds things

260
00:08:29,340 --> 00:08:30,900
next up you can kind of see here in the

261
00:08:30,900 --> 00:08:32,640
middle we have our package collectors so

262
00:08:32,640 --> 00:08:33,659
we have those s-bombs and those

263
00:08:33,659 --> 00:08:35,760
manifests our input there is go out and

264
00:08:35,760 --> 00:08:37,559
find all this stuff right and we've

265
00:08:37,559 --> 00:08:38,760
written a plug-in architecture here

266
00:08:38,760 --> 00:08:41,159
where you can have our base core plugins

267
00:08:41,159 --> 00:08:44,039
that are about eight I think uh Pearl

268
00:08:44,039 --> 00:08:45,480
types and you can add other ones for

269
00:08:45,480 --> 00:08:47,279
anything custom that you want

270
00:08:47,279 --> 00:08:50,100
once you bring it in you can augment and

271
00:08:50,100 --> 00:08:52,440
filter that s-bomb all right so one of

272
00:08:52,440 --> 00:08:53,880
the big problems we have often seen here

273
00:08:53,880 --> 00:08:56,100
is you have an s-bomb and it's lacking

274
00:08:56,100 --> 00:08:57,839
additional metadata that you may need

275
00:08:57,839 --> 00:09:00,000
for security approval

276
00:09:00,000 --> 00:09:01,860
all right you may want to have cve

277
00:09:01,860 --> 00:09:04,500
scoring that's what Hopper comp does

278
00:09:04,500 --> 00:09:06,060
we're looking at other things like

279
00:09:06,060 --> 00:09:08,700
scorecard quality

280
00:09:08,700 --> 00:09:10,380
all things you may want to give off to

281
00:09:10,380 --> 00:09:12,240
an authorizing official

282
00:09:12,240 --> 00:09:15,240
at the other end is a series of plugins

283
00:09:15,240 --> 00:09:16,980
we have two out of the gate there's

284
00:09:16,980 --> 00:09:19,500
others that could be easily added

285
00:09:19,500 --> 00:09:21,120
um and one of them produces the giant

286
00:09:21,120 --> 00:09:23,040
tarfile of what those things are they

287
00:09:23,040 --> 00:09:24,540
need to be transferred the other one

288
00:09:24,540 --> 00:09:26,279
would be a Nexus instance so you can

289
00:09:26,279 --> 00:09:28,140
have Nexus instance that spun up and

290
00:09:28,140 --> 00:09:29,640
then you can transfer all the stuff that

291
00:09:29,640 --> 00:09:31,440
you define in s-bombs into that Nexus

292
00:09:31,440 --> 00:09:33,180
instance snapshot it as a container

293
00:09:33,180 --> 00:09:35,459
image you move that to the high side

294
00:09:35,459 --> 00:09:37,860
we have a feature flagged but as part of

295
00:09:37,860 --> 00:09:39,360
this you can generate in total

296
00:09:39,360 --> 00:09:41,519
attestations for each stage and all the

297
00:09:41,519 --> 00:09:43,140
files that have been collected and

298
00:09:43,140 --> 00:09:45,180
processed as part of it we also snapshot

299
00:09:45,180 --> 00:09:47,580
the s-bomb as it changes over this

300
00:09:47,580 --> 00:09:49,320
period of time so you can see exactly

301
00:09:49,320 --> 00:09:52,820
what stage and where it was modified

302
00:09:53,420 --> 00:09:56,339
and again just to kind of you know I

303
00:09:56,339 --> 00:09:58,140
guess bring it home again

304
00:09:58,140 --> 00:10:01,019
um our primary goal here is one data

305
00:10:01,019 --> 00:10:03,480
flow One Security team right and

306
00:10:03,480 --> 00:10:05,339
multiple teams have their own ability to

307
00:10:05,339 --> 00:10:07,560
specify what they want right you have

308
00:10:07,560 --> 00:10:09,240
the control as a team member to say hey

309
00:10:09,240 --> 00:10:11,399
I need to update these four packages I

310
00:10:11,399 --> 00:10:12,600
don't need to go talk to someone to get

311
00:10:12,600 --> 00:10:14,580
permission to do that right you just add

312
00:10:14,580 --> 00:10:16,800
to your s-bomb you say where to find it

313
00:10:16,800 --> 00:10:19,620
the security team then has dependencies

314
00:10:19,620 --> 00:10:21,600
on those and Jared will show you how

315
00:10:21,600 --> 00:10:23,640
that works they could then bring that

316
00:10:23,640 --> 00:10:25,500
stuff in do additional testing if need

317
00:10:25,500 --> 00:10:27,360
be and then bring it over to the high

318
00:10:27,360 --> 00:10:28,500
side

319
00:10:28,500 --> 00:10:31,200
also because we allow you to specify a

320
00:10:31,200 --> 00:10:34,019
set of places that go find things in a

321
00:10:34,019 --> 00:10:37,019
manifest you can easily override it as a

322
00:10:37,019 --> 00:10:38,519
security team and say well I'm actually

323
00:10:38,519 --> 00:10:39,660
going to only allow you to pull things

324
00:10:39,660 --> 00:10:41,820
from these four types of package

325
00:10:41,820 --> 00:10:44,220
repositories and these container

326
00:10:44,220 --> 00:10:46,640
registries

327
00:10:46,920 --> 00:10:48,540
so the hurdles here right and what are

328
00:10:48,540 --> 00:10:51,180
we solving well often you see incomplete

329
00:10:51,180 --> 00:10:52,440
s-bombs they don't have all the

330
00:10:52,440 --> 00:10:53,279
information you need for security

331
00:10:53,279 --> 00:10:55,680
approval and we're looking at how we use

332
00:10:55,680 --> 00:10:58,940
augmenters and filters the uh I guess

333
00:10:58,940 --> 00:11:01,320
add additional metadata there that

334
00:11:01,320 --> 00:11:02,459
someone would want to see for that

335
00:11:02,459 --> 00:11:04,380
security approval

336
00:11:04,380 --> 00:11:06,480
because it is a plug-in architecture if

337
00:11:06,480 --> 00:11:07,680
you wanted to generate a digital

338
00:11:07,680 --> 00:11:11,040
documentation and say I don't know Excel

339
00:11:11,040 --> 00:11:13,980
because no one's here ever done that uh

340
00:11:13,980 --> 00:11:16,200
you possibly could do that right it's a

341
00:11:16,200 --> 00:11:17,760
plug-in architecture you have an s-bomb

342
00:11:17,760 --> 00:11:20,519
we provide a model for which the parts

343
00:11:20,519 --> 00:11:22,920
do that and then you can just generate

344
00:11:22,920 --> 00:11:24,240
your own documentation there we do that

345
00:11:24,240 --> 00:11:26,220
with HTML reports

346
00:11:26,220 --> 00:11:28,260
that allows you to work with the Legacy

347
00:11:28,260 --> 00:11:30,360
approval process if you have an AO who

348
00:11:30,360 --> 00:11:32,339
isn't there yet who would accept say a

349
00:11:32,339 --> 00:11:34,860
policy of some type to bring things into

350
00:11:34,860 --> 00:11:36,660
a classified Network

351
00:11:36,660 --> 00:11:38,700
that ability to restrict where things

352
00:11:38,700 --> 00:11:39,720
come from

353
00:11:39,720 --> 00:11:41,519
right and then the ability to detect

354
00:11:41,519 --> 00:11:43,500
where things change

355
00:11:43,500 --> 00:11:45,360
renovate really does that for us we

356
00:11:45,360 --> 00:11:47,160
don't handle it with an opera but it's a

357
00:11:47,160 --> 00:11:49,680
great tool to detect things and as

358
00:11:49,680 --> 00:11:52,019
things get detected generate that next

359
00:11:52,019 --> 00:11:55,200
semantic release using um

360
00:11:55,200 --> 00:11:57,240
using semantic release that then kicks

361
00:11:57,240 --> 00:11:58,860
off by another pipeline

362
00:11:58,860 --> 00:12:01,079
so as things change Downstream in

363
00:12:01,079 --> 00:12:02,940
s-bombs they all percolate up to the

364
00:12:02,940 --> 00:12:04,680
security team that can then do that

365
00:12:04,680 --> 00:12:06,779
transfer automatically

366
00:12:06,779 --> 00:12:08,880
and then lastly this allows us to have a

367
00:12:08,880 --> 00:12:10,920
one-way delivery into an environment

368
00:12:10,920 --> 00:12:12,839
but a clear understanding of what's in

369
00:12:12,839 --> 00:12:14,279
that environment From anesman

370
00:12:14,279 --> 00:12:15,420
perspective

371
00:12:15,420 --> 00:12:19,260
so you can do it all on the low side

372
00:12:19,260 --> 00:12:20,459
so we talked a lot about these

373
00:12:20,459 --> 00:12:21,899
advantages but I'm just going to point

374
00:12:21,899 --> 00:12:23,279
out a couple of them

375
00:12:23,279 --> 00:12:25,260
the biggest one being is hey we have

376
00:12:25,260 --> 00:12:27,300
Cyclone DXs bumps for everything that's

377
00:12:27,300 --> 00:12:29,579
in that in that environment well that

378
00:12:29,579 --> 00:12:31,260
allows us to work with a lot of existing

379
00:12:31,260 --> 00:12:33,060
tooling out there I'm going to say one

380
00:12:33,060 --> 00:12:35,339
of my favorite dependency track right so

381
00:12:35,339 --> 00:12:37,500
if you want to attract dependency or do

382
00:12:37,500 --> 00:12:39,120
you want to track issues that may arise

383
00:12:39,120 --> 00:12:41,459
in a secure environment on a low side

384
00:12:41,459 --> 00:12:43,079
you know how this you know this

385
00:12:43,079 --> 00:12:45,720
inventory of everything as an s-bomb

386
00:12:45,720 --> 00:12:47,820
and that can be then tracked in defense

387
00:12:47,820 --> 00:12:49,740
track

388
00:12:49,740 --> 00:12:51,839
if you want to use Hopper you can

389
00:12:51,839 --> 00:12:53,760
augment it with additional metadata like

390
00:12:53,760 --> 00:12:55,100
Vex CV

391
00:12:55,100 --> 00:12:57,899
and then ideally sometime down the road

392
00:12:57,899 --> 00:13:00,180
the validation of attestations and

393
00:13:00,180 --> 00:13:01,800
everything else for all those components

394
00:13:01,800 --> 00:13:03,000
that you bring in

395
00:13:03,000 --> 00:13:05,220
all this is done in a pipeline there's

396
00:13:05,220 --> 00:13:08,360
no manual interaction

397
00:13:09,839 --> 00:13:11,459
all right so I'm going to show well I'm

398
00:13:11,459 --> 00:13:13,139
not going to show a demo Jerry's going

399
00:13:13,139 --> 00:13:14,399
to show a demo but here's some of the

400
00:13:14,399 --> 00:13:16,380
the key features and things to look for

401
00:13:16,380 --> 00:13:18,660
as we piece through this

402
00:13:18,660 --> 00:13:19,320
um we're going to talk a little bit

403
00:13:19,320 --> 00:13:22,019
about the dependencies between teams and

404
00:13:22,019 --> 00:13:24,240
a security team concerning how you know

405
00:13:24,240 --> 00:13:26,220
there's a tree structure

406
00:13:26,220 --> 00:13:28,019
um we'll probably briefly show an out of

407
00:13:28,019 --> 00:13:30,360
stated sorry an out of state a cve

408
00:13:30,360 --> 00:13:32,940
report with hopper cup

409
00:13:32,940 --> 00:13:34,019
um and then we'll share a little bit

410
00:13:34,019 --> 00:13:35,880
about out of station creation and

411
00:13:35,880 --> 00:13:37,920
specifically a layout file for that so

412
00:13:37,920 --> 00:13:40,800
you have a way of verifying all the the

413
00:13:40,800 --> 00:13:42,120
title links

414
00:13:42,120 --> 00:13:45,720
and lastly we'll just show the bundle

415
00:13:45,720 --> 00:13:48,899
this demo does work in gitpod so if you

416
00:13:48,899 --> 00:13:50,760
scan the QR code you can actually pull

417
00:13:50,760 --> 00:13:52,980
it up yourself and play with it and

418
00:13:52,980 --> 00:13:54,120
that's how we're going to download this

419
00:13:54,120 --> 00:13:55,200
and get pod

420
00:13:55,200 --> 00:13:56,760
so you're welcome to play with us at

421
00:13:56,760 --> 00:13:59,480
your leisure

422
00:14:02,700 --> 00:14:05,120
all right

423
00:14:08,459 --> 00:14:10,279
there you go cool

424
00:14:10,279 --> 00:14:13,860
all right so we're we're in gitpod here

425
00:14:13,860 --> 00:14:16,079
um what we did with with get pod is we

426
00:14:16,079 --> 00:14:17,220
put

427
00:14:17,220 --> 00:14:18,600
the the

428
00:14:18,600 --> 00:14:20,579
commands right here on the top so that's

429
00:14:20,579 --> 00:14:21,660
what I'm going to run here and then I

430
00:14:21,660 --> 00:14:22,920
will walk through some of what these

431
00:14:22,920 --> 00:14:25,519
pieces are doing

432
00:14:32,279 --> 00:14:33,839
and allow that to paste so that's going

433
00:14:33,839 --> 00:14:35,160
to kick off

434
00:14:35,160 --> 00:14:38,100
okay so what we're doing here is it from

435
00:14:38,100 --> 00:14:41,399
top to bottom we're generating uh in

436
00:14:41,399 --> 00:14:43,019
total we're doing a product key and a

437
00:14:43,019 --> 00:14:44,459
functionary key

438
00:14:44,459 --> 00:14:46,800
um we're then generating a layout and

439
00:14:46,800 --> 00:14:49,380
the layout is over here

440
00:14:49,380 --> 00:14:52,560
we generate that layout based on the

441
00:14:52,560 --> 00:14:54,600
transfer instructions as well as the

442
00:14:54,600 --> 00:14:56,459
s-bomb so we'd say this is what we

443
00:14:56,459 --> 00:14:58,680
expect to see and it gets generated

444
00:14:58,680 --> 00:15:01,440
based off of that command and then in

445
00:15:01,440 --> 00:15:03,300
total uses that to go and verify that

446
00:15:03,300 --> 00:15:04,980
what we thought we were going to do

447
00:15:04,980 --> 00:15:07,139
actually happened over the course of

448
00:15:07,139 --> 00:15:10,320
that operation

449
00:15:10,500 --> 00:15:13,440
we then run the bundle which is what

450
00:15:13,440 --> 00:15:14,699
it's doing right now it's collecting our

451
00:15:14,699 --> 00:15:16,139
dependencies

452
00:15:16,139 --> 00:15:17,639
um it's going to run a hopper cop on

453
00:15:17,639 --> 00:15:20,339
them which does gymnasium and trivi and

454
00:15:20,339 --> 00:15:22,740
gripe and scans it and then we get our

455
00:15:22,740 --> 00:15:24,420
reports and atar

456
00:15:24,420 --> 00:15:26,100
so you can see it kicking off right down

457
00:15:26,100 --> 00:15:27,360
there

458
00:15:27,360 --> 00:15:30,000
um and talks a lot about the multi-team

459
00:15:30,000 --> 00:15:32,940
concept and really that is defined in

460
00:15:32,940 --> 00:15:33,899
our

461
00:15:33,899 --> 00:15:35,699
let's grab this and expand this out a

462
00:15:35,699 --> 00:15:37,079
little bit uh it's defined in our

463
00:15:37,079 --> 00:15:39,720
manifest so our manifest we've got some

464
00:15:39,720 --> 00:15:41,579
metadata up there but really what we're

465
00:15:41,579 --> 00:15:42,959
looking here is we're saying grab a

466
00:15:42,959 --> 00:15:44,279
local s-bomb

467
00:15:44,279 --> 00:15:45,959
that's other stuff we want to augment

468
00:15:45,959 --> 00:15:47,760
here and then you can see in here our

469
00:15:47,760 --> 00:15:50,279
includes are referencing two different

470
00:15:50,279 --> 00:15:52,800
external these guys here two different

471
00:15:52,800 --> 00:15:55,500
external teams that have manifests that

472
00:15:55,500 --> 00:16:00,120
also Define that team or that projects

473
00:16:00,120 --> 00:16:02,579
dependencies and lists and whatever they

474
00:16:02,579 --> 00:16:04,980
want to bundle up there and what we're

475
00:16:04,980 --> 00:16:07,139
able to do there then is say go grab

476
00:16:07,139 --> 00:16:09,060
from this team we expect it in this

477
00:16:09,060 --> 00:16:11,279
format we expect an s-bomb with it give

478
00:16:11,279 --> 00:16:12,899
us our references pull that all together

479
00:16:12,899 --> 00:16:16,320
and then let us basically zip it up and

480
00:16:16,320 --> 00:16:17,519
package it up so that we have an

481
00:16:17,519 --> 00:16:18,800
artifact to deliver

482
00:16:18,800 --> 00:16:21,420
down here with the repositories that you

483
00:16:21,420 --> 00:16:23,820
see this is really our mechanism for

484
00:16:23,820 --> 00:16:25,740
enforcing the location that you're

485
00:16:25,740 --> 00:16:29,399
getting your dependencies from at the

486
00:16:29,399 --> 00:16:30,899
end of the day within an organization

487
00:16:30,899 --> 00:16:33,540
there are some sources that you trust or

488
00:16:33,540 --> 00:16:35,360
have higher faith in versus

489
00:16:35,360 --> 00:16:37,820
allowing kind of just that free form

490
00:16:37,820 --> 00:16:41,220
which you can with a note adding a no

491
00:16:41,220 --> 00:16:43,199
strict flag but by default you need to

492
00:16:43,199 --> 00:16:45,180
define those those repositories so that

493
00:16:45,180 --> 00:16:46,920
we can be very clear about what our

494
00:16:46,920 --> 00:16:49,560
sources were when we gathered them

495
00:16:49,560 --> 00:16:52,320
let's bring that back up

496
00:16:52,320 --> 00:16:54,180
we'll go here real quick we're going to

497
00:16:54,180 --> 00:16:56,779
look at um the transfer the

498
00:16:56,779 --> 00:16:59,100
transfer.yaml is really what what in

499
00:16:59,100 --> 00:17:00,899
total used earlier to kind of understand

500
00:17:00,899 --> 00:17:02,759
what was going to happen

501
00:17:02,759 --> 00:17:05,760
um in here we have stages for example we

502
00:17:05,760 --> 00:17:08,939
have a collect a report and a bundle but

503
00:17:08,939 --> 00:17:11,579
those names can they're free form as

504
00:17:11,579 --> 00:17:12,839
long as the structure maintains the same

505
00:17:12,839 --> 00:17:15,000
but inside we Define in the collect we

506
00:17:15,000 --> 00:17:16,919
want to run our git plugin our raw

507
00:17:16,919 --> 00:17:19,559
plug-in our Docker plugin

508
00:17:19,559 --> 00:17:21,359
we're going to go and generate our

509
00:17:21,359 --> 00:17:23,640
report with hopper cop and these are the

510
00:17:23,640 --> 00:17:25,260
different scanners that we want to

511
00:17:25,260 --> 00:17:27,000
enable and then down here at the bottom

512
00:17:27,000 --> 00:17:28,559
pretty simple you know where's my tar

513
00:17:28,559 --> 00:17:30,299
file going what what should it be named

514
00:17:30,299 --> 00:17:32,840
and so forth

515
00:17:33,660 --> 00:17:36,360
coming back up here

516
00:17:36,360 --> 00:17:39,240
you can see that we went through we ran

517
00:17:39,240 --> 00:17:42,120
we collected we've successfully passed

518
00:17:42,120 --> 00:17:45,000
which is always a good thing for a demo

519
00:17:45,000 --> 00:17:46,980
um and in grand total we we then look at

520
00:17:46,980 --> 00:17:48,539
the layout we do a validation and

521
00:17:48,539 --> 00:17:51,059
verification and we ensure that what we

522
00:17:51,059 --> 00:17:53,039
thought was going to happen

523
00:17:53,039 --> 00:17:55,640
happened

524
00:17:57,780 --> 00:18:00,360
all right anything else in here you've

525
00:18:00,360 --> 00:18:01,980
got to renovate you can see the links in

526
00:18:01,980 --> 00:18:04,140
here right we've got generation Our link

527
00:18:04,140 --> 00:18:06,299
dated created

528
00:18:06,299 --> 00:18:08,460
we use that then to go down

529
00:18:08,460 --> 00:18:10,500
and check to make sure that piece is

530
00:18:10,500 --> 00:18:12,539
what where they should be so in total is

531
00:18:12,539 --> 00:18:14,840
pretty cool

532
00:18:16,080 --> 00:18:17,580
what else do we have

533
00:18:17,580 --> 00:18:20,360
I think that's it

534
00:18:24,900 --> 00:18:26,820
who's that guy

535
00:18:26,820 --> 00:18:29,659
no here

536
00:18:31,919 --> 00:18:34,020
all right you can see our

537
00:18:34,020 --> 00:18:36,600
s-bomb coming from hoppercon with our

538
00:18:36,600 --> 00:18:38,160
references

539
00:18:38,160 --> 00:18:41,419
could have been formatted there but

540
00:18:42,660 --> 00:18:45,200
cool

541
00:18:45,299 --> 00:18:46,740
I don't want to pull the tarp off yeah

542
00:18:46,740 --> 00:18:49,039
let's do

543
00:19:02,700 --> 00:19:03,960
it all right and here you can see

544
00:19:03,960 --> 00:19:05,940
looking inside that tar object

545
00:19:05,940 --> 00:19:07,500
grabbed all our different pieces from

546
00:19:07,500 --> 00:19:09,740
kit

547
00:19:10,980 --> 00:19:13,740
see we got our s-bombs in there we've

548
00:19:13,740 --> 00:19:15,240
got our Consolidated and delivered so

549
00:19:15,240 --> 00:19:16,679
there's two different s-bombs that get

550
00:19:16,679 --> 00:19:18,720
put into the tar file

551
00:19:18,720 --> 00:19:20,580
right now they're going to be identical

552
00:19:20,580 --> 00:19:23,280
but on day two operations where we want

553
00:19:23,280 --> 00:19:26,400
to go and send a Delta that is where the

554
00:19:26,400 --> 00:19:27,780
Consolidated looks at what the original

555
00:19:27,780 --> 00:19:30,600
was and then the delivered is the pieces

556
00:19:30,600 --> 00:19:33,780
that we the Deltas right we only want to

557
00:19:33,780 --> 00:19:36,419
bring over that smaller subset instead

558
00:19:36,419 --> 00:19:38,760
of the entire package especially when

559
00:19:38,760 --> 00:19:42,559
the deliverables can be pretty big

560
00:19:43,440 --> 00:19:46,700
and that's it okay

561
00:19:51,360 --> 00:19:54,860
make sure our notes don't show

562
00:19:57,840 --> 00:20:01,639
there we go all right

563
00:20:01,679 --> 00:20:03,419
all right so looking ahead

564
00:20:03,419 --> 00:20:04,980
um do you need to go back to that QR

565
00:20:04,980 --> 00:20:08,660
code give you a chance of going

566
00:20:10,140 --> 00:20:12,120
I'm looking forward

567
00:20:12,120 --> 00:20:14,460
um we're we're working on developing for

568
00:20:14,460 --> 00:20:16,140
for Hopper itself we're working on

569
00:20:16,140 --> 00:20:18,080
developing a unified report generation

570
00:20:18,080 --> 00:20:21,240
to allow multiple plugins to kind of

571
00:20:21,240 --> 00:20:24,480
Define what kind of reports should be

572
00:20:24,480 --> 00:20:25,799
part of the generation and part of that

573
00:20:25,799 --> 00:20:26,720
bundle

574
00:20:26,720 --> 00:20:28,860
we're looking at expanding component

575
00:20:28,860 --> 00:20:31,320
validation doing signature validation

576
00:20:31,320 --> 00:20:33,480
with recore further attestation

577
00:20:33,480 --> 00:20:36,960
validation within Toto as well as some

578
00:20:36,960 --> 00:20:39,679
additional component validation between

579
00:20:39,679 --> 00:20:42,660
during the collect phases to to verify

580
00:20:42,660 --> 00:20:44,520
the Shaws and ensure that the pieces

581
00:20:44,520 --> 00:20:46,080
that we got are what we expected within

582
00:20:46,080 --> 00:20:47,760
the s-bomb

583
00:20:47,760 --> 00:20:49,919
um looking at doing an additional

584
00:20:49,919 --> 00:20:53,100
plug-in with openss score scorecard that

585
00:20:53,100 --> 00:20:54,600
data is really cool be nice to go and be

586
00:20:54,600 --> 00:20:57,419
able to package that in as a report to

587
00:20:57,419 --> 00:20:59,520
provide an ISO or an Islam or security

588
00:20:59,520 --> 00:21:03,480
representative on the other side

589
00:21:03,480 --> 00:21:05,280
um we're currently in progress we're

590
00:21:05,280 --> 00:21:06,720
looking at uh unbundling and

591
00:21:06,720 --> 00:21:08,039
installation of disconnected networks

592
00:21:08,039 --> 00:21:09,120
those can be a little bit challenging

593
00:21:09,120 --> 00:21:10,080
because

594
00:21:10,080 --> 00:21:12,419
those networks kind of also Define where

595
00:21:12,419 --> 00:21:14,880
pieces go they don't always go to the

596
00:21:14,880 --> 00:21:17,400
more traditional locations and they're

597
00:21:17,400 --> 00:21:19,080
often

598
00:21:19,080 --> 00:21:22,260
Diversified across those systems

599
00:21:22,260 --> 00:21:25,020
um and then looking at doing addition

600
00:21:25,020 --> 00:21:27,240
and implementation with as we go forward

601
00:21:27,240 --> 00:21:29,940
with some of the work with it's the

602
00:21:29,940 --> 00:21:32,760
s-bomb with the verified verifiable s

603
00:21:32,760 --> 00:21:34,080
bonds with them you got to say it

604
00:21:34,080 --> 00:21:38,178
correctly it's the bomb

605
00:21:40,080 --> 00:21:42,840
some of our Inspirations Sig store

606
00:21:42,840 --> 00:21:44,340
pretty strong

607
00:21:44,340 --> 00:21:46,500
um with a lot of their tools are awesome

608
00:21:46,500 --> 00:21:48,120
and we really enjoy working with those

609
00:21:48,120 --> 00:21:49,380
pieces

610
00:21:49,380 --> 00:21:52,020
um Cyclone DX uh part of the working

611
00:21:52,020 --> 00:21:53,640
group with them at the industry working

612
00:21:53,640 --> 00:21:57,539
group they've been a great uh

613
00:21:57,539 --> 00:21:59,340
Community to engage with as well as in

614
00:21:59,340 --> 00:22:02,640
Toto and then other cool projects in

615
00:22:02,640 --> 00:22:05,460
this area zarf with defense unicorns and

616
00:22:05,460 --> 00:22:08,460
then a witness with testify SEC those

617
00:22:08,460 --> 00:22:12,299
are also great tools to go check out so

618
00:22:12,299 --> 00:22:13,860
foreign

619
00:22:13,860 --> 00:22:17,120
with that any questions

620
00:22:53,400 --> 00:22:54,900
so the question is like how do you

621
00:22:54,900 --> 00:22:56,820
update us bombs how do you track those

622
00:22:56,820 --> 00:22:59,418
updates yeah

623
00:23:00,600 --> 00:23:03,139
yeah sure

624
00:23:07,020 --> 00:23:09,419
so we're not checking if s-bombs are

625
00:23:09,419 --> 00:23:11,400
stale in any way

626
00:23:11,400 --> 00:23:13,020
um but what we we kind of encourage and

627
00:23:13,020 --> 00:23:14,460
what we're doing in-house is using

628
00:23:14,460 --> 00:23:17,220
renovate quite heavily right so if if

629
00:23:17,220 --> 00:23:19,140
there are dependency updates that should

630
00:23:19,140 --> 00:23:21,000
happen we would assume that a new

631
00:23:21,000 --> 00:23:22,440
respawn gets generated and then that's

632
00:23:22,440 --> 00:23:24,419
what would be used to generate a new

633
00:23:24,419 --> 00:23:25,980
Pipeline and push a new bundle across

634
00:23:25,980 --> 00:23:28,860
into our environment we haven't really

635
00:23:28,860 --> 00:23:30,480
considered if there's a need to say okay

636
00:23:30,480 --> 00:23:33,600
this s-bomb is way too old maybe we need

637
00:23:33,600 --> 00:23:35,580
to filter it out but it's a great idea I

638
00:23:35,580 --> 00:23:36,960
think that's a call to action here this

639
00:23:36,960 --> 00:23:39,539
is a very extensible python code base

640
00:23:39,539 --> 00:23:42,780
that's all plug-in and we allow you to

641
00:23:42,780 --> 00:23:44,100
customize and build your own plugins

642
00:23:44,100 --> 00:23:45,900
very very easily and that would be a

643
00:23:45,900 --> 00:23:48,980
great good Community Edition

644
00:23:53,820 --> 00:23:57,379
data Communications

645
00:23:58,440 --> 00:24:01,440
and

646
00:24:08,460 --> 00:24:10,760
before

647
00:24:20,880 --> 00:24:23,460
so that's coming up

648
00:24:23,460 --> 00:24:25,080
yeah we haven't we haven't experienced

649
00:24:25,080 --> 00:24:26,400
that problem yet but somebody's gonna

650
00:24:26,400 --> 00:24:27,780
keep in mind I think the bigger problem

651
00:24:27,780 --> 00:24:28,500
that we have right now is

652
00:24:28,500 --> 00:24:31,440
discoverability with the open uh ssf

653
00:24:31,440 --> 00:24:33,840
scorecard being path based and assuming

654
00:24:33,840 --> 00:24:35,700
that you're on GitHub how do you for us

655
00:24:35,700 --> 00:24:37,559
since Pearl is our biggest identifier

656
00:24:37,559 --> 00:24:40,620
how do you transition from Pearl to the

657
00:24:40,620 --> 00:24:43,679
scorecard URLs it's been uh tough to

658
00:24:43,679 --> 00:24:45,799
find

659
00:24:50,880 --> 00:24:53,580
so that's yeah that's that's a tough one

660
00:24:53,580 --> 00:24:55,740
um I think we are right now assuming

661
00:24:55,740 --> 00:24:57,480
that you are defining your transitive

662
00:24:57,480 --> 00:24:58,860
dependencies and we're not going to

663
00:24:58,860 --> 00:25:00,539
discover them for you granted again

664
00:25:00,539 --> 00:25:02,880
Hopper could facilitate the addition of

665
00:25:02,880 --> 00:25:04,860
your transitive dependencies

666
00:25:04,860 --> 00:25:06,480
um I'm not sure if it's in this example

667
00:25:06,480 --> 00:25:07,860
but we typically like if you're using

668
00:25:07,860 --> 00:25:09,480
python or something else we force those

669
00:25:09,480 --> 00:25:11,880
Transit dependencies into that spawn so

670
00:25:11,880 --> 00:25:13,559
that they're tracked as part of the the

671
00:25:13,559 --> 00:25:15,780
buttons yeah

672
00:25:15,780 --> 00:25:18,360
so we we assume that you're going to

673
00:25:18,360 --> 00:25:19,679
figure out your transitive dependencies

674
00:25:19,679 --> 00:25:21,419
include them in the bomb and most

675
00:25:21,419 --> 00:25:22,740
tooling does allow you to capture that

676
00:25:22,740 --> 00:25:26,720
right it allows you to snapshot that

677
00:25:31,799 --> 00:25:33,880
okay

678
00:25:33,880 --> 00:25:37,819
[Applause]

