1
00:00:00,060 --> 00:00:02,520
today securing user server access in

2
00:00:02,520 --> 00:00:04,380
kubernetes

3
00:00:04,380 --> 00:00:06,600
hi I'm messim I'm an engineer at Dallas

4
00:00:06,600 --> 00:00:08,760
kill and I'm Mike atrovsky I'm the head

5
00:00:08,760 --> 00:00:10,500
of product at tailskill we work at

6
00:00:10,500 --> 00:00:12,360
telescale today we're here to talk about

7
00:00:12,360 --> 00:00:14,519
a specific problem that you might have

8
00:00:14,519 --> 00:00:15,900
which is allowing users to access

9
00:00:15,900 --> 00:00:17,520
internal services that you have running

10
00:00:17,520 --> 00:00:19,680
in a kubernetes cluster

11
00:00:19,680 --> 00:00:21,300
so we're talking about the network

12
00:00:21,300 --> 00:00:23,220
security of connecting users to services

13
00:00:23,220 --> 00:00:26,039
and kubernetes we'll cover first what

14
00:00:26,039 --> 00:00:27,300
kinds of traffic you might need to

15
00:00:27,300 --> 00:00:29,160
protect in kubernetes and why you might

16
00:00:29,160 --> 00:00:30,779
have that kind of traffic going to your

17
00:00:30,779 --> 00:00:32,820
cluster then we'll specifically look at

18
00:00:32,820 --> 00:00:34,559
users accessing internal services in

19
00:00:34,559 --> 00:00:36,540
your clusters that's the focus of this

20
00:00:36,540 --> 00:00:37,860
talk so we'll look at the security

21
00:00:37,860 --> 00:00:40,079
properties that you likely want for

22
00:00:40,079 --> 00:00:41,520
protecting access to these internal

23
00:00:41,520 --> 00:00:43,320
services and we'll go over the various

24
00:00:43,320 --> 00:00:44,820
options that exist in and out of

25
00:00:44,820 --> 00:00:46,200
kubernetes for protecting this traffic

26
00:00:46,200 --> 00:00:48,420
and then compare those so analyzing

27
00:00:48,420 --> 00:00:49,559
which options work for the security

28
00:00:49,559 --> 00:00:51,719
properties that you actually need this

29
00:00:51,719 --> 00:00:53,100
talk is geared or meant for Network

30
00:00:53,100 --> 00:00:54,960
administrators or security teams using

31
00:00:54,960 --> 00:00:56,879
kubernetes with some understanding of

32
00:00:56,879 --> 00:01:00,899
how kubernetes works so let's jump in

33
00:01:00,899 --> 00:01:03,000
there are many kinds of traffic that

34
00:01:03,000 --> 00:01:04,019
might be going to your kubernetes

35
00:01:04,019 --> 00:01:06,420
cluster first it's the traffic that you

36
00:01:06,420 --> 00:01:08,520
need to get kubernetes working the

37
00:01:08,520 --> 00:01:09,780
traffic between the components of

38
00:01:09,780 --> 00:01:11,700
kubernetes like from the cube API server

39
00:01:11,700 --> 00:01:13,320
to the control plane in the control

40
00:01:13,320 --> 00:01:14,760
plane to the cubelet in your work your

41
00:01:14,760 --> 00:01:16,939
nodes or pod to pod Communications

42
00:01:16,939 --> 00:01:19,020
hilariously I gave a talk on exactly

43
00:01:19,020 --> 00:01:21,600
this topic four years ago now at kubecon

44
00:01:21,600 --> 00:01:23,280
and I've forgotten all of it but if you

45
00:01:23,280 --> 00:01:25,259
want you can watch the talk the traffic

46
00:01:25,259 --> 00:01:27,060
that's managed in kubernetes and is

47
00:01:27,060 --> 00:01:29,280
mostly has authentication integrity and

48
00:01:29,280 --> 00:01:31,500
encryption again watch the talk if

49
00:01:31,500 --> 00:01:32,460
you're interested

50
00:01:32,460 --> 00:01:34,020
our second kind of traffic is traffic

51
00:01:34,020 --> 00:01:36,299
from a service to a service such as from

52
00:01:36,299 --> 00:01:37,740
like a front-end application to a

53
00:01:37,740 --> 00:01:40,140
database this can be both intra or

54
00:01:40,140 --> 00:01:42,240
inter-cluster it might be coming from

55
00:01:42,240 --> 00:01:43,799
another kubernetes cluster if the two

56
00:01:43,799 --> 00:01:45,000
applications are in different trust

57
00:01:45,000 --> 00:01:47,220
domains or hosted on different platforms

58
00:01:47,220 --> 00:01:49,799
or just managed by a different team or

59
00:01:49,799 --> 00:01:50,820
if you're using like a microservice

60
00:01:50,820 --> 00:01:52,799
architecture and the full app runs

61
00:01:52,799 --> 00:01:55,079
across multiple clusters this service to

62
00:01:55,079 --> 00:01:56,939
service traffic is often controlled

63
00:01:56,939 --> 00:01:58,439
monitored and secured using a service

64
00:01:58,439 --> 00:02:00,119
mesh

65
00:02:00,119 --> 00:02:01,799
Third Kind of traffic here traffic from

66
00:02:01,799 --> 00:02:03,899
a user to a kubernetes control plane for

67
00:02:03,899 --> 00:02:05,399
when a member of like your devops team

68
00:02:05,399 --> 00:02:06,899
or info team is accessing the control

69
00:02:06,899 --> 00:02:08,758
plane to manage cluster configurations

70
00:02:08,758 --> 00:02:10,979
you can hit the IP of the cube API

71
00:02:10,979 --> 00:02:12,360
server directly and authenticate to

72
00:02:12,360 --> 00:02:14,459
cubectl but many folks secure this

73
00:02:14,459 --> 00:02:16,560
connection with something like Sebastian

74
00:02:16,560 --> 00:02:19,260
and then lastly traffic from a user to a

75
00:02:19,260 --> 00:02:20,400
service that you're running on

76
00:02:20,400 --> 00:02:22,680
kubernetes if this is a web app for

77
00:02:22,680 --> 00:02:24,239
example then this could be an end user

78
00:02:24,239 --> 00:02:25,560
of your application who's trying to buy

79
00:02:25,560 --> 00:02:27,959
a dog toy or on your website or if it's

80
00:02:27,959 --> 00:02:30,060
an internal app then it's an employee of

81
00:02:30,060 --> 00:02:31,560
your company trying to run a Check

82
00:02:31,560 --> 00:02:33,120
processing job or something like that in

83
00:02:33,120 --> 00:02:35,040
a bank branch and if it's a public app

84
00:02:35,040 --> 00:02:36,480
you might use like a load balancer to

85
00:02:36,480 --> 00:02:38,520
manage direct access to that service

86
00:02:38,520 --> 00:02:40,860
so thinking of those like four kinds of

87
00:02:40,860 --> 00:02:42,720
traffic that we just talked about

88
00:02:42,720 --> 00:02:44,940
you know security folks and those are

89
00:02:44,940 --> 00:02:46,680
the typical Solutions we also also also

90
00:02:46,680 --> 00:02:48,239
mention security folks worry a lot about

91
00:02:48,239 --> 00:02:50,519
how to secure access from a user to the

92
00:02:50,519 --> 00:02:52,440
kubernetes control plane like with good

93
00:02:52,440 --> 00:02:54,060
reason you know mostly because apps is

94
00:02:54,060 --> 00:02:55,440
in the control plane would give you full

95
00:02:55,440 --> 00:02:57,300
control over the cluster however we're

96
00:02:57,300 --> 00:02:58,500
not here to talk about that because

97
00:02:58,500 --> 00:03:00,060
there's so much guidance on that topic

98
00:03:00,060 --> 00:03:02,640
but what we are talking about is that

99
00:03:02,640 --> 00:03:04,560
last item there a user accessing

100
00:03:04,560 --> 00:03:05,580
internal applications that you're

101
00:03:05,580 --> 00:03:07,379
running on kubernetes because there's a

102
00:03:07,379 --> 00:03:08,700
lot less guidance on how to do that and

103
00:03:08,700 --> 00:03:10,319
how to do that well

104
00:03:10,319 --> 00:03:11,940
an internal app that you're running on

105
00:03:11,940 --> 00:03:13,800
your kubernetes cluster is different

106
00:03:13,800 --> 00:03:16,319
depending on your circumstances some of

107
00:03:16,319 --> 00:03:17,640
the other options listed here like a

108
00:03:17,640 --> 00:03:19,140
service mesh or Bastion or a load

109
00:03:19,140 --> 00:03:20,760
balancer might apply to how you protect

110
00:03:20,760 --> 00:03:23,640
traffic from users to internal services

111
00:03:23,640 --> 00:03:24,959
um so you're asking like do I really

112
00:03:24,959 --> 00:03:28,500
need guidance on this topic uh probably

113
00:03:28,500 --> 00:03:30,480
um the kubernetes docs unhelpfully tell

114
00:03:30,480 --> 00:03:32,459
you that your service may or may not be

115
00:03:32,459 --> 00:03:34,080
public and also it may or may not be

116
00:03:34,080 --> 00:03:36,180
authenticated I'm not a bad at the docs

117
00:03:36,180 --> 00:03:37,560
like there's so many potential options

118
00:03:37,560 --> 00:03:40,379
that you can have here so it's on you to

119
00:03:40,379 --> 00:03:42,299
implement a solution

120
00:03:42,299 --> 00:03:43,920
um all right so what are some examples

121
00:03:43,920 --> 00:03:45,420
of kinds of apps that you have these

122
00:03:45,420 --> 00:03:46,620
internal apps that users are trying to

123
00:03:46,620 --> 00:03:47,760
access

124
00:03:47,760 --> 00:03:49,500
there's many internal services that

125
00:03:49,500 --> 00:03:51,720
might be in your cluster when you're

126
00:03:51,720 --> 00:03:54,120
running a service in kubernetes there

127
00:03:54,120 --> 00:03:55,560
are a lot of other things that you run

128
00:03:55,560 --> 00:03:57,540
alongside your actual service that you

129
00:03:57,540 --> 00:03:59,040
need to maintain and then be able to

130
00:03:59,040 --> 00:03:59,819
access

131
00:03:59,819 --> 00:04:01,620
anything that's started by Cube system

132
00:04:01,620 --> 00:04:04,860
so databases monitoring logging and

133
00:04:04,860 --> 00:04:08,159
tracing other tools those should only be

134
00:04:08,159 --> 00:04:10,260
accessible to your info team and if

135
00:04:10,260 --> 00:04:12,000
you're in the kubernetes dashboard or

136
00:04:12,000 --> 00:04:13,500
like the web UI that's another

137
00:04:13,500 --> 00:04:14,939
monitoring service that's only meant for

138
00:04:14,939 --> 00:04:16,079
your info team

139
00:04:16,079 --> 00:04:17,699
you might also have some other internet

140
00:04:17,699 --> 00:04:20,399
applications for your organization that

141
00:04:20,399 --> 00:04:22,139
you you know manage and host on

142
00:04:22,139 --> 00:04:24,000
kubernetes just like web apps for your

143
00:04:24,000 --> 00:04:25,800
customers maybe there's an easy way

144
00:04:25,800 --> 00:04:27,540
internally to look at a metrics

145
00:04:27,540 --> 00:04:29,880
dashboard or look up the employees in

146
00:04:29,880 --> 00:04:32,160
your company in a Wiki of some kind

147
00:04:32,160 --> 00:04:34,380
and so do you really need to secure

148
00:04:34,380 --> 00:04:36,840
access to these applications well

149
00:04:36,840 --> 00:04:39,180
probably they might include sensitive

150
00:04:39,180 --> 00:04:40,740
information that could be used to learn

151
00:04:40,740 --> 00:04:42,380
your organizations

152
00:04:42,380 --> 00:04:45,120
data like customers or financials or at

153
00:04:45,120 --> 00:04:46,500
the very least they probably shouldn't

154
00:04:46,500 --> 00:04:48,840
be public and these Services shouldn't

155
00:04:48,840 --> 00:04:50,820
necessarily be accessible by everyone at

156
00:04:50,820 --> 00:04:52,740
your organization so you are actually

157
00:04:52,740 --> 00:04:54,479
going to need some kind of way of

158
00:04:54,479 --> 00:04:55,860
authenticating or restricting access

159
00:04:55,860 --> 00:04:59,240
even internally

160
00:05:00,060 --> 00:05:02,400
so let's look at some criteria and these

161
00:05:02,400 --> 00:05:03,540
are these are the criteria we came up

162
00:05:03,540 --> 00:05:05,340
with right um when you're hosting an

163
00:05:05,340 --> 00:05:07,320
internal application there are several

164
00:05:07,320 --> 00:05:08,820
security properties that you're going to

165
00:05:08,820 --> 00:05:10,139
want the service to have

166
00:05:10,139 --> 00:05:12,120
first visibility this is hopefully

167
00:05:12,120 --> 00:05:13,860
self-evident but if you're hosting an

168
00:05:13,860 --> 00:05:15,720
internal application it should well

169
00:05:15,720 --> 00:05:18,180
actually be internal you want something

170
00:05:18,180 --> 00:05:19,860
that's not publicly accessible and

171
00:05:19,860 --> 00:05:21,540
restricted to a set of individuals who

172
00:05:21,540 --> 00:05:23,400
are part of your organization

173
00:05:23,400 --> 00:05:25,680
authentication this ensures that you

174
00:05:25,680 --> 00:05:27,000
know and verify the source and

175
00:05:27,000 --> 00:05:28,979
destination of the traffic that is you

176
00:05:28,979 --> 00:05:30,900
verify the user and the service they're

177
00:05:30,900 --> 00:05:32,639
connecting to

178
00:05:32,639 --> 00:05:34,680
authorization stricter than just

179
00:05:34,680 --> 00:05:37,020
visibility authorization ensures not

180
00:05:37,020 --> 00:05:39,300
only that your service is internal but

181
00:05:39,300 --> 00:05:41,160
only the right individuals in your

182
00:05:41,160 --> 00:05:42,900
organization have access to it

183
00:05:42,900 --> 00:05:44,520
you could also build authorization into

184
00:05:44,520 --> 00:05:46,380
each of your applications rather than as

185
00:05:46,380 --> 00:05:47,759
part of the Central Access solution but

186
00:05:47,759 --> 00:05:49,800
that's putting a lot of a lot of work on

187
00:05:49,800 --> 00:05:52,080
each of your application teams

188
00:05:52,080 --> 00:05:54,240
encryption by encrypting your traffic

189
00:05:54,240 --> 00:05:55,979
you're preventing just anyone from

190
00:05:55,979 --> 00:05:57,960
reading it encryption ensures that only

191
00:05:57,960 --> 00:05:59,880
the authorized parties can actually read

192
00:05:59,880 --> 00:06:01,860
the traffic so that any unauthorized

193
00:06:01,860 --> 00:06:04,020
party that intercepts traffic can't read

194
00:06:04,020 --> 00:06:05,340
its contents

195
00:06:05,340 --> 00:06:07,500
load balancing if you're running

196
00:06:07,500 --> 00:06:09,660
multiple instances of a service you want

197
00:06:09,660 --> 00:06:11,280
to load balance between them so that

198
00:06:11,280 --> 00:06:13,139
you're not overwhelming a service in any

199
00:06:13,139 --> 00:06:14,220
one node

200
00:06:14,220 --> 00:06:16,259
This falls into the availability part of

201
00:06:16,259 --> 00:06:17,520
security

202
00:06:17,520 --> 00:06:20,220
and traffic filtering your service might

203
00:06:20,220 --> 00:06:22,380
not allow all traffic to access it you

204
00:06:22,380 --> 00:06:25,139
can fill the traffic for unusually high

205
00:06:25,139 --> 00:06:27,479
requests like in response to a DDOS

206
00:06:27,479 --> 00:06:30,060
attack or to rate limit one user who

207
00:06:30,060 --> 00:06:31,740
might be limiting another user's ability

208
00:06:31,740 --> 00:06:33,539
to use a service

209
00:06:33,539 --> 00:06:35,280
internal applications might also filter

210
00:06:35,280 --> 00:06:36,960
traffic based on other criteria like

211
00:06:36,960 --> 00:06:38,880
location maybe you don't have any

212
00:06:38,880 --> 00:06:40,440
employees in Australia and so it's weird

213
00:06:40,440 --> 00:06:42,720
to see traffic coming from there

214
00:06:42,720 --> 00:06:45,000
and lastly auditability you want to

215
00:06:45,000 --> 00:06:46,500
Monitor and log information about the

216
00:06:46,500 --> 00:06:48,479
traffic going to your service so you can

217
00:06:48,479 --> 00:06:50,340
ensure it's acting as expected

218
00:06:50,340 --> 00:06:51,840
you also need these logs in case you

219
00:06:51,840 --> 00:06:53,400
need to review access as part of like a

220
00:06:53,400 --> 00:06:54,780
security incident

221
00:06:54,780 --> 00:06:56,759
and there are other criteria here that

222
00:06:56,759 --> 00:06:57,720
we haven't mentioned that aren't

223
00:06:57,720 --> 00:06:59,039
necessarily you know purely security

224
00:06:59,039 --> 00:07:00,479
focused you're going to you're going to

225
00:07:00,479 --> 00:07:01,860
want to have for users connecting to

226
00:07:01,860 --> 00:07:03,479
internal Services

227
00:07:03,479 --> 00:07:06,419
um namely latency and availability but

228
00:07:06,419 --> 00:07:07,560
like I said we're going to focus on the

229
00:07:07,560 --> 00:07:09,000
security properties

230
00:07:09,000 --> 00:07:12,180
so let's keep these criteria in mind

231
00:07:12,180 --> 00:07:14,520
when evaluating solutions for accessing

232
00:07:14,520 --> 00:07:17,359
internal apps

233
00:07:17,940 --> 00:07:20,460
all right so what options do we really

234
00:07:20,460 --> 00:07:21,840
have

235
00:07:21,840 --> 00:07:23,639
um the first couple options laid out on

236
00:07:23,639 --> 00:07:25,620
this on this slide are kubernetes

237
00:07:25,620 --> 00:07:27,840
constructs they're what kubernetes

238
00:07:27,840 --> 00:07:29,819
provides out of the box with cluster IP

239
00:07:29,819 --> 00:07:31,979
and then on top of cluster IP you can

240
00:07:31,979 --> 00:07:34,199
use a kubernetes load balancer which

241
00:07:34,199 --> 00:07:35,280
allows you to load balance traffic

242
00:07:35,280 --> 00:07:36,900
hitting a service across multiple

243
00:07:36,900 --> 00:07:39,120
different instances of that service the

244
00:07:39,120 --> 00:07:40,740
traffic could originate from either

245
00:07:40,740 --> 00:07:43,259
outside or inside the cluster

246
00:07:43,259 --> 00:07:45,180
kubernetes Ingress which allows you to

247
00:07:45,180 --> 00:07:46,440
Route web traffic from outside the

248
00:07:46,440 --> 00:07:48,060
cluster to Services running inside your

249
00:07:48,060 --> 00:07:50,460
cluster and kubernetes network policy

250
00:07:50,460 --> 00:07:51,960
which allows you to restrict access to a

251
00:07:51,960 --> 00:07:53,580
given service

252
00:07:53,580 --> 00:07:54,960
the next set of options we're going to

253
00:07:54,960 --> 00:07:56,520
consider are some of those that we

254
00:07:56,520 --> 00:07:58,080
mentioned earlier that you're typically

255
00:07:58,080 --> 00:07:59,280
used for other kinds of traffic in

256
00:07:59,280 --> 00:08:01,500
kubernetes so a service mesh which

257
00:08:01,500 --> 00:08:03,000
allows you to Route traffic between two

258
00:08:03,000 --> 00:08:05,099
Services which could be in the same or

259
00:08:05,099 --> 00:08:06,599
in different clusters

260
00:08:06,599 --> 00:08:08,759
and a Bastion to enforce traffic to a

261
00:08:08,759 --> 00:08:10,259
sensitive resource that goes through an

262
00:08:10,259 --> 00:08:12,479
audited and controlled entry point like

263
00:08:12,479 --> 00:08:13,919
restricting access to the kubernetes

264
00:08:13,919 --> 00:08:15,780
control plane

265
00:08:15,780 --> 00:08:17,400
and lastly we're going to throw into the

266
00:08:17,400 --> 00:08:19,139
mix some more generic options for

267
00:08:19,139 --> 00:08:20,699
protecting traffic between users and

268
00:08:20,699 --> 00:08:22,560
services at layer three where the

269
00:08:22,560 --> 00:08:24,060
underlying network is encrypted or

270
00:08:24,060 --> 00:08:26,639
untrusted the first is ipsec which is a

271
00:08:26,639 --> 00:08:27,840
protocol for encrypting Communications

272
00:08:27,840 --> 00:08:30,360
between endpoints and then wireguard

273
00:08:30,360 --> 00:08:31,800
which is a more modern tunneling

274
00:08:31,800 --> 00:08:33,000
protocol for end-to-end encrypted

275
00:08:33,000 --> 00:08:34,679
connections and those can be used

276
00:08:34,679 --> 00:08:37,140
Standalone or as part of VPN type

277
00:08:37,140 --> 00:08:39,059
Solutions

278
00:08:39,059 --> 00:08:40,860
so I gave you two lists a list of all

279
00:08:40,860 --> 00:08:42,539
the criteria and a list of all the

280
00:08:42,539 --> 00:08:43,799
options

281
00:08:43,799 --> 00:08:44,940
so you know what we're going to do we're

282
00:08:44,940 --> 00:08:46,440
going to compare them

283
00:08:46,440 --> 00:08:48,300
it's a very exciting talk

284
00:08:48,300 --> 00:08:50,279
all right

285
00:08:50,279 --> 00:08:53,220
thank you Maya so

286
00:08:53,220 --> 00:08:56,940
let's dig in so as I mentioned the basic

287
00:08:56,940 --> 00:08:58,080
building block for services on

288
00:08:58,080 --> 00:08:59,880
kubernetes is a cluster IP service right

289
00:08:59,880 --> 00:09:02,339
which basically provides a stable IP and

290
00:09:02,339 --> 00:09:04,200
DNA stands for accessing Bots within a

291
00:09:04,200 --> 00:09:05,040
cluster

292
00:09:05,040 --> 00:09:07,980
uh the virtual IP is shared among the

293
00:09:07,980 --> 00:09:10,200
pods a all the traffic router to that

294
00:09:10,200 --> 00:09:12,660
ipe will be routed by the cluster to

295
00:09:12,660 --> 00:09:16,140
that pod or to any of the replicas uh

296
00:09:16,140 --> 00:09:19,380
the Pod if the pods go uh come in or are

297
00:09:19,380 --> 00:09:22,500
scaled up or scaled down uh though those

298
00:09:22,500 --> 00:09:24,060
pods get removed from the service

299
00:09:24,060 --> 00:09:27,300
destinations uh the traffic keeps

300
00:09:27,300 --> 00:09:29,339
working fine you don't ex you shouldn't

301
00:09:29,339 --> 00:09:31,200
see hiccups with that point however the

302
00:09:31,200 --> 00:09:33,180
cluster IP service is internal only to

303
00:09:33,180 --> 00:09:34,440
the cluster it is not something that you

304
00:09:34,440 --> 00:09:36,300
can hit from outside the cluster without

305
00:09:36,300 --> 00:09:37,740
doing some

306
00:09:37,740 --> 00:09:39,560
additional steps

307
00:09:39,560 --> 00:09:42,060
the other thing is that cluster IP also

308
00:09:42,060 --> 00:09:43,560
does not provide any encryption all it

309
00:09:43,560 --> 00:09:46,080
really does is that it takes your

310
00:09:46,080 --> 00:09:48,600
packets of that your application would

311
00:09:48,600 --> 00:09:51,240
get normally and it just gets it from

312
00:09:51,240 --> 00:09:52,680
like different sources from like

313
00:09:52,680 --> 00:09:54,060
different parts of the cluster different

314
00:09:54,060 --> 00:09:56,040
nodes different pods

315
00:09:56,040 --> 00:09:57,660
it also doesn't do any authentication or

316
00:09:57,660 --> 00:10:00,360
authorization out of the box you need to

317
00:10:00,360 --> 00:10:02,100
add authentication and authorization to

318
00:10:02,100 --> 00:10:04,740
your application layer

319
00:10:04,740 --> 00:10:07,580
uh

320
00:10:10,220 --> 00:10:13,019
unlike cluster ipe Services load

321
00:10:13,019 --> 00:10:14,220
balancer services are actually publicly

322
00:10:14,220 --> 00:10:15,740
visible

323
00:10:15,740 --> 00:10:19,080
uh these Services basically take a

324
00:10:19,080 --> 00:10:21,300
cluster IP service which is pointing to

325
00:10:21,300 --> 00:10:23,580
like multiple replicas of your pods and

326
00:10:23,580 --> 00:10:26,399
it gives it a public IP

327
00:10:26,399 --> 00:10:29,339
uh the problem is that that IP is public

328
00:10:29,339 --> 00:10:31,560
which really means that anyone on the

329
00:10:31,560 --> 00:10:34,800
internet can reach it so it puts even

330
00:10:34,800 --> 00:10:36,839
more onus on this application layer to

331
00:10:36,839 --> 00:10:39,899
add authentication and authorization and

332
00:10:39,899 --> 00:10:42,720
to do traffic filtering a lot of sases

333
00:10:42,720 --> 00:10:44,519
actually do something similar not

334
00:10:44,519 --> 00:10:46,620
necessarily in kubernetes but they have

335
00:10:46,620 --> 00:10:49,920
IP allow listing and uh so that you can

336
00:10:49,920 --> 00:10:52,019
only restrict access or you can only

337
00:10:52,019 --> 00:10:54,320
access the service for using some

338
00:10:54,320 --> 00:10:57,620
well-trusted IPS

339
00:11:00,720 --> 00:11:02,880
yeah

340
00:11:02,880 --> 00:11:05,220
the third type of thing that we use to

341
00:11:05,220 --> 00:11:07,079
build all these Services is kubernetes

342
00:11:07,079 --> 00:11:08,880
ingress which is a collection of routing

343
00:11:08,880 --> 00:11:11,339
rules that specify how traffic is routed

344
00:11:11,339 --> 00:11:13,680
to the service within a cluster so you

345
00:11:13,680 --> 00:11:16,140
could imagine that you have a web web

346
00:11:16,140 --> 00:11:18,660
page which is uh

347
00:11:18,660 --> 00:11:23,959
running your toy app or your uh internal

348
00:11:23,959 --> 00:11:26,660
banking system or

349
00:11:26,660 --> 00:11:29,579
CI system or anything

350
00:11:29,579 --> 00:11:32,519
and you could expose all of those as

351
00:11:32,519 --> 00:11:33,779
like different services with different

352
00:11:33,779 --> 00:11:35,940
load balancers and all of them could get

353
00:11:35,940 --> 00:11:37,560
different IPS but instead you could use

354
00:11:37,560 --> 00:11:39,660
kubernetes Ingress which provides a way

355
00:11:39,660 --> 00:11:42,360
for you to reuse some of those like use

356
00:11:42,360 --> 00:11:44,940
a single public IPS and public instance

357
00:11:44,940 --> 00:11:48,480
and Route multiple domains behind it

358
00:11:48,480 --> 00:11:51,600
it also allows you to do traffic routing

359
00:11:51,600 --> 00:11:55,140
based on paths not just host names uh

360
00:11:55,140 --> 00:11:57,360
some of the some Ingress controllers

361
00:11:57,360 --> 00:12:00,660
like nginx and traffic uh provide

362
00:12:00,660 --> 00:12:02,519
authentication and authorization using

363
00:12:02,519 --> 00:12:05,040
oauth and jots

364
00:12:05,040 --> 00:12:09,120
but it's still really uh and the really

365
00:12:09,120 --> 00:12:10,920
nice thing that they provide is GEOS

366
00:12:10,920 --> 00:12:12,959
encryption which is that any traffic

367
00:12:12,959 --> 00:12:15,899
hitting your uh hitting that service

368
00:12:15,899 --> 00:12:18,480
will get automatically get a HTTP assert

369
00:12:18,480 --> 00:12:21,779
or and make sure that those that no one

370
00:12:21,779 --> 00:12:23,459
in on the public internet can intercept

371
00:12:23,459 --> 00:12:25,019
your traffic and see what is going on

372
00:12:25,019 --> 00:12:27,060
without doing like no one can man in the

373
00:12:27,060 --> 00:12:29,279
middle of your thing

374
00:12:29,279 --> 00:12:31,980
uh

375
00:12:31,980 --> 00:12:34,560
the fourth type of thing that we use for

376
00:12:34,560 --> 00:12:36,779
all of this is kubernetes Network policy

377
00:12:36,779 --> 00:12:39,899
what this does is that it says uh for a

378
00:12:39,899 --> 00:12:42,600
set of PODS or a set of or namespace or

379
00:12:42,600 --> 00:12:47,220
set of services it can restrict what uh

380
00:12:47,220 --> 00:12:50,040
traffic goes in and out of that pod so

381
00:12:50,040 --> 00:12:52,800
you could say that only a namespace can

382
00:12:52,800 --> 00:12:54,720
talk within itself you can say that only

383
00:12:54,720 --> 00:12:57,720
these pods can talk only like the

384
00:12:57,720 --> 00:12:59,100
front-end pods can talk to the back end

385
00:12:59,100 --> 00:13:02,399
pods uh only the back end ports you talk

386
00:13:02,399 --> 00:13:03,540
to the database pods and you can

387
00:13:03,540 --> 00:13:06,980
restrict access using that

388
00:13:08,220 --> 00:13:10,920
you can use the network policy in

389
00:13:10,920 --> 00:13:12,480
addition to like kubernetes load

390
00:13:12,480 --> 00:13:13,860
balancers or kubernetes Ingress to

391
00:13:13,860 --> 00:13:15,899
further restrict who can access it but

392
00:13:15,899 --> 00:13:19,139
really all this provides is a way for

393
00:13:19,139 --> 00:13:21,300
you to secure servers to service

394
00:13:21,300 --> 00:13:23,160
communication it really doesn't help

395
00:13:23,160 --> 00:13:24,600
much with the user to service

396
00:13:24,600 --> 00:13:27,240
communication because the user users are

397
00:13:27,240 --> 00:13:29,040
on the public internet and they're going

398
00:13:29,040 --> 00:13:30,000
to be reaching over the public internet

399
00:13:30,000 --> 00:13:32,880
so you would need either to do like IPL

400
00:13:32,880 --> 00:13:35,339
listing like I mentioned earlier or you

401
00:13:35,339 --> 00:13:37,560
would need to do something more fancy

402
00:13:37,560 --> 00:13:40,079
like

403
00:13:40,079 --> 00:13:42,660
uh authentication and authorization on

404
00:13:42,660 --> 00:13:45,959
like different parts of the user

405
00:13:45,959 --> 00:13:48,319
identity

406
00:13:49,980 --> 00:13:52,620
the other really interesting thing

407
00:13:52,620 --> 00:13:54,000
development that happened in kubernetes

408
00:13:54,000 --> 00:13:56,820
or in this space was a service mesh what

409
00:13:56,820 --> 00:13:59,220
this does is that in typically in

410
00:13:59,220 --> 00:14:01,079
kubernetes when you have pods

411
00:14:01,079 --> 00:14:02,339
communicating with each other the

412
00:14:02,339 --> 00:14:05,519
traffic is Flowing between them is plain

413
00:14:05,519 --> 00:14:08,220
text it is not encrypted it is not some

414
00:14:08,220 --> 00:14:10,980
it does when you're sending traffic to

415
00:14:10,980 --> 00:14:12,779
someone on in your network in your

416
00:14:12,779 --> 00:14:15,600
cluster it is not necessarily you're not

417
00:14:15,600 --> 00:14:18,000
always there's no way to guarantee who

418
00:14:18,000 --> 00:14:19,680
that traffic is coming from you could

419
00:14:19,680 --> 00:14:21,000
spoof the traffic you could spoof the

420
00:14:21,000 --> 00:14:23,880
IPS you could do a lot of you could do a

421
00:14:23,880 --> 00:14:25,800
lot of

422
00:14:25,800 --> 00:14:29,339
funky things in order to get around the

423
00:14:29,339 --> 00:14:31,079
restrictions however what service

424
00:14:31,079 --> 00:14:33,600
measures provide is that they run you

425
00:14:33,600 --> 00:14:36,060
use a sidecar proxy next to basically

426
00:14:36,060 --> 00:14:37,620
all of your pods

427
00:14:37,620 --> 00:14:39,839
that side of car proxy will intercept

428
00:14:39,839 --> 00:14:43,079
all of the traffic and make sure and it

429
00:14:43,079 --> 00:14:44,399
will commit when it's communicating with

430
00:14:44,399 --> 00:14:47,040
other services it will form mtls

431
00:14:47,040 --> 00:14:48,600
connections or Mutual Tios connection

432
00:14:48,600 --> 00:14:51,120
and make sure that the communication

433
00:14:51,120 --> 00:14:52,620
between the services is strongly

434
00:14:52,620 --> 00:14:54,360
authenticated and you know that two

435
00:14:54,360 --> 00:14:56,279
services are really

436
00:14:56,279 --> 00:14:57,959
that when you're talking to a service

437
00:14:57,959 --> 00:14:59,760
you're guaranteed that it is that

438
00:14:59,760 --> 00:15:00,959
service that you're talking to and

439
00:15:00,959 --> 00:15:02,639
you're also guaranteed that the person

440
00:15:02,639 --> 00:15:04,740
who's calling you is the or the service

441
00:15:04,740 --> 00:15:08,600
that is calling you is that service

442
00:15:10,500 --> 00:15:12,480
uh

443
00:15:12,480 --> 00:15:14,959
yeah

444
00:15:17,399 --> 00:15:19,380
back over to me so um the next option we

445
00:15:19,380 --> 00:15:22,740
have is the Bastion so Bastion host is a

446
00:15:22,740 --> 00:15:24,600
server running an application like a

447
00:15:24,600 --> 00:15:26,399
proxy or a load balancer that serves as

448
00:15:26,399 --> 00:15:28,680
the entry point to an internal service

449
00:15:28,680 --> 00:15:30,120
um traditionally the combastian is the

450
00:15:30,120 --> 00:15:31,620
point of entry to your network it's the

451
00:15:31,620 --> 00:15:33,899
it's the hole in your firewall and

452
00:15:33,899 --> 00:15:35,100
following a traditional Network model

453
00:15:35,100 --> 00:15:37,139
because it was a single point of entry

454
00:15:37,139 --> 00:15:38,699
to everything in your network and

455
00:15:38,699 --> 00:15:40,560
everything inside of your network wasn't

456
00:15:40,560 --> 00:15:43,019
encrypted or authenticated since this is

457
00:15:43,019 --> 00:15:45,180
before zero trust Trends then the

458
00:15:45,180 --> 00:15:46,560
Bastion was particularly strongly

459
00:15:46,560 --> 00:15:48,480
protected so once you got past Sebastian

460
00:15:48,480 --> 00:15:50,100
then you were just into the network

461
00:15:50,100 --> 00:15:52,260
so a Bastion is meant to be a single

462
00:15:52,260 --> 00:15:54,120
bottleneck for anything that needs to

463
00:15:54,120 --> 00:15:56,220
flow into an application and by forcing

464
00:15:56,220 --> 00:15:58,139
all the traffic through a Bastion you

465
00:15:58,139 --> 00:15:59,820
can then have a single place to enforce

466
00:15:59,820 --> 00:16:02,519
authorization and authentication do any

467
00:16:02,519 --> 00:16:04,139
filtering you want to do and then log

468
00:16:04,139 --> 00:16:05,220
access

469
00:16:05,220 --> 00:16:06,480
um so it's your point of entry yeah but

470
00:16:06,480 --> 00:16:08,160
it's also your your point of policy

471
00:16:08,160 --> 00:16:09,480
enforcement

472
00:16:09,480 --> 00:16:12,300
typically a Bastion is often just like

473
00:16:12,300 --> 00:16:14,880
openssh set up on a host U.S agent to

474
00:16:14,880 --> 00:16:16,500
the host and then from there you can

475
00:16:16,500 --> 00:16:17,639
reach the resource that you're actually

476
00:16:17,639 --> 00:16:19,500
trying to access so in terms of

477
00:16:19,500 --> 00:16:22,079
visibility Sebastian has to be publicly

478
00:16:22,079 --> 00:16:23,459
accessible which means that others at

479
00:16:23,459 --> 00:16:25,380
minimum know that it's there even if

480
00:16:25,380 --> 00:16:28,260
they can't actually access it you can

481
00:16:28,260 --> 00:16:30,360
authenticate users to the host on based

482
00:16:30,360 --> 00:16:32,279
on SSH username and password keys or

483
00:16:32,279 --> 00:16:34,019
certs and use this for authorization

484
00:16:34,019 --> 00:16:36,120
decisions although you might also be

485
00:16:36,120 --> 00:16:37,500
running a Bastion with like a single

486
00:16:37,500 --> 00:16:40,320
user that everybody logs in as and so

487
00:16:40,320 --> 00:16:41,699
you might not have that if that's if

488
00:16:41,699 --> 00:16:44,160
that's what you've set up instead opensh

489
00:16:44,160 --> 00:16:46,220
is encrypted so you get that

490
00:16:46,220 --> 00:16:48,779
bastions don't have any notion of the

491
00:16:48,779 --> 00:16:49,920
services that you're connecting to they

492
00:16:49,920 --> 00:16:51,000
just say like oh you're on the network

493
00:16:51,000 --> 00:16:53,519
now you're in so and then and so they

494
00:16:53,519 --> 00:16:55,139
don't try to load balance or in any way

495
00:16:55,139 --> 00:16:56,579
or do any kind of like sophisticated

496
00:16:56,579 --> 00:16:58,500
traffic traffic filtering you know once

497
00:16:58,500 --> 00:16:59,820
once you're in

498
00:16:59,820 --> 00:17:02,459
and if you're using openssh open SSH

499
00:17:02,459 --> 00:17:04,140
lets you log messages about what the SSH

500
00:17:04,140 --> 00:17:05,339
server is doing

501
00:17:05,339 --> 00:17:06,959
there's there's obviously more complex

502
00:17:06,959 --> 00:17:08,579
Bastion offerings on the market now

503
00:17:08,579 --> 00:17:10,140
which have better logging simple to

504
00:17:10,140 --> 00:17:12,119
manage authorization and some traffic

505
00:17:12,119 --> 00:17:14,520
management like I mentioned but um

506
00:17:14,520 --> 00:17:17,339
and there's also hosted proxies that are

507
00:17:17,339 --> 00:17:18,780
provided by the cloud provider so if you

508
00:17:18,780 --> 00:17:19,980
have something running in a cloud that

509
00:17:19,980 --> 00:17:21,419
might be the better solution for you to

510
00:17:21,419 --> 00:17:22,859
have it managed to manage for you on

511
00:17:22,859 --> 00:17:24,959
your behalf

512
00:17:24,959 --> 00:17:26,459
all right so those are the options that

513
00:17:26,459 --> 00:17:27,900
were that we're considering that are you

514
00:17:27,900 --> 00:17:29,340
know used for other kinds of accessing

515
00:17:29,340 --> 00:17:30,299
kubernetes

516
00:17:30,299 --> 00:17:32,160
so now let's talk about kind of generic

517
00:17:32,160 --> 00:17:35,100
connection and protection options

518
00:17:35,100 --> 00:17:36,720
um so ipsec

519
00:17:36,720 --> 00:17:39,360
ipsec is a layer 3 protocol for

520
00:17:39,360 --> 00:17:40,919
encrypting information between two

521
00:17:40,919 --> 00:17:43,020
endpoints it's used for transferring

522
00:17:43,020 --> 00:17:45,840
data or as part of a traditional VPN to

523
00:17:45,840 --> 00:17:47,280
encrypt traffic when it's on an

524
00:17:47,280 --> 00:17:50,039
untrusted Network ipsec can encrypt the

525
00:17:50,039 --> 00:17:51,960
whole packet in like a tunneling mode or

526
00:17:51,960 --> 00:17:53,820
just a data packet in a transport mode

527
00:17:53,820 --> 00:17:55,679
which allows you to inspect the headers

528
00:17:55,679 --> 00:17:57,299
for like more complicated routing you

529
00:17:57,299 --> 00:17:59,460
might be wanting to do in your network

530
00:17:59,460 --> 00:18:01,980
to use ipsec you need to have both the

531
00:18:01,980 --> 00:18:03,600
source and destination host that you're

532
00:18:03,600 --> 00:18:05,880
connecting from into perform a key

533
00:18:05,880 --> 00:18:08,160
exchange to establish a tunnel of which

534
00:18:08,160 --> 00:18:10,620
traffic is then sent so for users that

535
00:18:10,620 --> 00:18:12,059
are connecting to an internal service

536
00:18:12,059 --> 00:18:14,280
that means in practice that each user's

537
00:18:14,280 --> 00:18:16,440
device will need to be able to initiate

538
00:18:16,440 --> 00:18:19,440
an ipsec connection so for example by

539
00:18:19,440 --> 00:18:21,179
installing a client on each of those

540
00:18:21,179 --> 00:18:23,640
users devices this is the most common

541
00:18:23,640 --> 00:18:25,980
implementation I'm not using ipsecond

542
00:18:25,980 --> 00:18:28,500
like a standalone tacky way but by using

543
00:18:28,500 --> 00:18:31,620
it as part as a protocol on a VPN ipsec

544
00:18:31,620 --> 00:18:33,600
vpns are a common way for users to

545
00:18:33,600 --> 00:18:35,820
access internal Services no matter where

546
00:18:35,820 --> 00:18:37,080
they're running not just on kubernetes

547
00:18:37,080 --> 00:18:39,059
but they could also be used to access

548
00:18:39,059 --> 00:18:41,460
Services running on a Commerce cluster

549
00:18:41,460 --> 00:18:44,039
so if we're looking at ipsec and IPC

550
00:18:44,039 --> 00:18:46,200
vpns for this use case

551
00:18:46,200 --> 00:18:48,960
in terms of visibility ipsec doesn't

552
00:18:48,960 --> 00:18:51,720
care where it's connecting to as long as

553
00:18:51,720 --> 00:18:53,700
they're reachable so if you if you you

554
00:18:53,700 --> 00:18:55,380
can have a service on only you know

555
00:18:55,380 --> 00:18:57,419
private IPS but you'll need your VPN to

556
00:18:57,419 --> 00:18:59,400
have something like not traversal to

557
00:18:59,400 --> 00:19:01,200
actually make them accessible

558
00:19:01,200 --> 00:19:03,059
ipsec provides authentication and

559
00:19:03,059 --> 00:19:04,919
encryption of Ip packets it doesn't

560
00:19:04,919 --> 00:19:06,840
provide authorization natively but

561
00:19:06,840 --> 00:19:09,179
probably if you're using an ipsec VPN

562
00:19:09,179 --> 00:19:10,679
that's exactly what it's doing it's

563
00:19:10,679 --> 00:19:12,960
giving you authorization

564
00:19:12,960 --> 00:19:15,000
ipsec doesn't have any built-in traffic

565
00:19:15,000 --> 00:19:16,679
management like a notion of load

566
00:19:16,679 --> 00:19:19,200
balancing or traffic filtering some of

567
00:19:19,200 --> 00:19:20,820
my PSI vpns if they're using

568
00:19:20,820 --> 00:19:22,440
concentrators which is kind of like a

569
00:19:22,440 --> 00:19:24,179
Bastion you put all your traffic through

570
00:19:24,179 --> 00:19:25,919
there to get access to other stuff on

571
00:19:25,919 --> 00:19:27,539
your network then they funnel all the

572
00:19:27,539 --> 00:19:29,340
traffic through that Central Point and

573
00:19:29,340 --> 00:19:31,260
in that case a VPN concentrator might

574
00:19:31,260 --> 00:19:33,120
allow you to do some load balancing or

575
00:19:33,120 --> 00:19:34,620
traffic filtering

576
00:19:34,620 --> 00:19:37,440
and lastly auditability again since

577
00:19:37,440 --> 00:19:39,600
ipsec is just a protocol you don't get

578
00:19:39,600 --> 00:19:41,940
any of this for free but with an ipsec

579
00:19:41,940 --> 00:19:43,559
based VPN you can expect to get network

580
00:19:43,559 --> 00:19:45,419
logs of which users are accessing which

581
00:19:45,419 --> 00:19:47,580
services in some cases you can also

582
00:19:47,580 --> 00:19:49,740
introspect the actual traffic like the

583
00:19:49,740 --> 00:19:51,539
packets So Not only would you know

584
00:19:51,539 --> 00:19:53,400
metadata but a connection like you know

585
00:19:53,400 --> 00:19:55,760
Alice is connecting to the hiirs system

586
00:19:55,760 --> 00:19:58,380
but specific information like which SSH

587
00:19:58,380 --> 00:20:00,539
commands are being run by a specific

588
00:20:00,539 --> 00:20:03,559
user on a specific box

589
00:20:04,320 --> 00:20:05,640
and the last option we're going to

590
00:20:05,640 --> 00:20:07,919
consider wireguard so if you're not

591
00:20:07,919 --> 00:20:10,260
familiar with wireguard wireguard is a

592
00:20:10,260 --> 00:20:12,059
layer 3 tunneling protocol that lets two

593
00:20:12,059 --> 00:20:13,620
peers privately establish an end-10

594
00:20:13,620 --> 00:20:16,140
encrypted connection wireguard uses

595
00:20:16,140 --> 00:20:18,059
public Keys rather than public IP

596
00:20:18,059 --> 00:20:20,820
addresses to identify peers so as peers

597
00:20:20,820 --> 00:20:23,760
move connections can still persist the

598
00:20:23,760 --> 00:20:24,539
only thing you actually need to

599
00:20:24,539 --> 00:20:26,160
configure is which peers you want to

600
00:20:26,160 --> 00:20:27,419
communicate with

601
00:20:27,419 --> 00:20:29,580
like ipsec you need to have both the

602
00:20:29,580 --> 00:20:30,900
source and destination host that you're

603
00:20:30,900 --> 00:20:32,700
connecting to and from perform a key

604
00:20:32,700 --> 00:20:34,679
handshake to establish a tunnel which is

605
00:20:34,679 --> 00:20:37,080
then used for for traffic to encrypt the

606
00:20:37,080 --> 00:20:39,000
traffic that's being sent so again for

607
00:20:39,000 --> 00:20:40,919
users connecting to a service each

608
00:20:40,919 --> 00:20:42,600
user's device will need to install

609
00:20:42,600 --> 00:20:45,960
wireguard however compared to ipsec wire

610
00:20:45,960 --> 00:20:47,820
guard is explicitly designed to optimize

611
00:20:47,820 --> 00:20:49,620
for security performance and ease of use

612
00:20:49,620 --> 00:20:51,780
and so wireguard given it has like

613
00:20:51,780 --> 00:20:53,340
opinionated modern photography there's

614
00:20:53,340 --> 00:20:55,020
very little things to configure the only

615
00:20:55,020 --> 00:20:56,460
thing you really do configure is like I

616
00:20:56,460 --> 00:20:57,480
said the set of peers that you're going

617
00:20:57,480 --> 00:20:58,740
to connect to you're not picking

618
00:20:58,740 --> 00:21:00,419
protocols for encryption all that kind

619
00:21:00,419 --> 00:21:02,039
of stuff

620
00:21:02,039 --> 00:21:03,900
so looking at wireguard connecting to

621
00:21:03,900 --> 00:21:05,240
internal services

622
00:21:05,240 --> 00:21:07,380
wireguard like ipsec lets you connect

623
00:21:07,380 --> 00:21:09,000
Two Hosts anywhere as long as they're

624
00:21:09,000 --> 00:21:11,039
reachable and can continue to connect

625
00:21:11,039 --> 00:21:12,780
even if an IP address changes as I

626
00:21:12,780 --> 00:21:14,760
mentioned so a user could like initiate

627
00:21:14,760 --> 00:21:16,559
a connection to their database on their

628
00:21:16,559 --> 00:21:18,299
laptop at home bring it to the coffee

629
00:21:18,299 --> 00:21:19,860
shop and finish their work and then the

630
00:21:19,860 --> 00:21:20,940
connection will still continue with no

631
00:21:20,940 --> 00:21:23,220
hiccups you can also connect to private

632
00:21:23,220 --> 00:21:25,860
IPS like with ipsec if the VPN that

633
00:21:25,860 --> 00:21:27,299
you're using offers something like Nat

634
00:21:27,299 --> 00:21:28,799
traversal

635
00:21:28,799 --> 00:21:30,659
wireguard has built-in authentication

636
00:21:30,659 --> 00:21:33,000
and encryption Margaret uses the stream

637
00:21:33,000 --> 00:21:34,919
Cipher Cha-Cha 20 and encryption for

638
00:21:34,919 --> 00:21:36,720
encryption and poly 1305 for

639
00:21:36,720 --> 00:21:38,760
Authentication

640
00:21:38,760 --> 00:21:40,679
authorization is managed based on the

641
00:21:40,679 --> 00:21:42,480
configured list of peers so if a device

642
00:21:42,480 --> 00:21:44,400
has a peers public key then they can

643
00:21:44,400 --> 00:21:45,840
communicate and there's but there's no

644
00:21:45,840 --> 00:21:47,820
other authentication built in again like

645
00:21:47,820 --> 00:21:50,280
with ipsec vpns that are built on top of

646
00:21:50,280 --> 00:21:52,620
wireguard would add authorization that's

647
00:21:52,620 --> 00:21:54,720
what you're using a VPN for

648
00:21:54,720 --> 00:21:56,820
and like ipsec wire guard doesn't have

649
00:21:56,820 --> 00:21:58,679
any built-in traffic management for load

650
00:21:58,679 --> 00:22:00,900
balancing or traffic filtering again if

651
00:22:00,900 --> 00:22:02,640
you're using a VPN and it's in like that

652
00:22:02,640 --> 00:22:04,260
concentrator model like that funnel

653
00:22:04,260 --> 00:22:05,580
model then you might be able to do it

654
00:22:05,580 --> 00:22:07,679
use it to do load balancing

655
00:22:07,679 --> 00:22:09,659
and like ipsec there's a theme here

656
00:22:09,659 --> 00:22:11,460
there's no built-in logs or monitoring

657
00:22:11,460 --> 00:22:13,260
for auditability of a wire guard based

658
00:22:13,260 --> 00:22:14,760
connection but you could expect that

659
00:22:14,760 --> 00:22:16,559
from a VPN that you're that you use that

660
00:22:16,559 --> 00:22:18,000
it's wiregrade based to have to have

661
00:22:18,000 --> 00:22:20,340
those kinds of logs

662
00:22:20,340 --> 00:22:21,960
right

663
00:22:21,960 --> 00:22:25,080
um so let's do something a bit more fun

664
00:22:25,080 --> 00:22:28,140
let's do a demo yeah uh

665
00:22:28,140 --> 00:22:30,000
so since I work at TL scale we're gonna

666
00:22:30,000 --> 00:22:32,280
demo tail scale

667
00:22:32,280 --> 00:22:34,380
using tail scale to reach a kubernetes

668
00:22:34,380 --> 00:22:36,419
service internally

669
00:22:36,419 --> 00:22:38,760
uh in this tail scale is a

670
00:22:38,760 --> 00:22:41,100
wireguard-based mesh VPN mesh Network

671
00:22:41,100 --> 00:22:43,440
means that traffic doesn't go through a

672
00:22:43,440 --> 00:22:45,299
concentrator but connections are

673
00:22:45,299 --> 00:22:48,900
directly peer-to-peer so you get better

674
00:22:48,900 --> 00:22:51,539
latency you you're not there's no single

675
00:22:51,539 --> 00:22:53,700
point of failure uh

676
00:22:53,700 --> 00:22:56,159
and it because it's based on wireguard

677
00:22:56,159 --> 00:22:57,679
all of your connections are always

678
00:22:57,679 --> 00:22:59,880
encrypted from like one device to a

679
00:22:59,880 --> 00:23:02,580
different from any device on to any

680
00:23:02,580 --> 00:23:03,960
other device it will always be into an

681
00:23:03,960 --> 00:23:05,340
interoper

682
00:23:05,340 --> 00:23:07,080
so in this demo we're going to set up a

683
00:23:07,080 --> 00:23:09,480
service in uh kubernetes

684
00:23:09,480 --> 00:23:11,280
uh then we're going to set up uh

685
00:23:11,280 --> 00:23:13,919
something that we just are about to

686
00:23:13,919 --> 00:23:16,620
release yeah we're dropping something

687
00:23:16,620 --> 00:23:18,720
we're dropping some new stuff soon not

688
00:23:18,720 --> 00:23:21,720
CVS yeah hopefully

689
00:23:21,720 --> 00:23:24,480
so uh yeah we're gonna use we're gonna

690
00:23:24,480 --> 00:23:27,120
install the telescope operator uh and

691
00:23:27,120 --> 00:23:28,559
using that tailsql operator we're going

692
00:23:28,559 --> 00:23:31,679
to expose the service to our tlnet and

693
00:23:31,679 --> 00:23:33,240
let's see what that does

694
00:23:33,240 --> 00:23:34,620
okay

695
00:23:34,620 --> 00:23:38,120
so I'm gonna

696
00:23:38,340 --> 00:23:40,140
I'm sorry this is going to be annoying

697
00:23:40,140 --> 00:23:43,220
because I have to change this place

698
00:23:58,919 --> 00:24:02,460
can you see the same thing now okay cool

699
00:24:02,460 --> 00:24:04,559
so

700
00:24:04,559 --> 00:24:07,399
I have

701
00:24:09,240 --> 00:24:12,659
bigger okay so I have this

702
00:24:12,659 --> 00:24:14,520
mini Cube cluster that I created

703
00:24:14,520 --> 00:24:17,400
yesterday it is about 17 hours old

704
00:24:17,400 --> 00:24:20,100
you can see that it has nothing running

705
00:24:20,100 --> 00:24:21,659
on it there's only the cube system

706
00:24:21,659 --> 00:24:23,640
namespace which has pods running on it

707
00:24:23,640 --> 00:24:25,919
there are there's just

708
00:24:25,919 --> 00:24:27,900
it's it's a blank cluster there's really

709
00:24:27,900 --> 00:24:29,880
nothing here

710
00:24:29,880 --> 00:24:31,679
so the first thing I'm going to do is

711
00:24:31,679 --> 00:24:33,360
I'm going to create this service called

712
00:24:33,360 --> 00:24:36,080
classes

713
00:24:36,960 --> 00:24:40,020
and this will get me some parts and

714
00:24:40,020 --> 00:24:42,240
we're going to hope and pray that the

715
00:24:42,240 --> 00:24:43,880
parts come out quickly and did it okay

716
00:24:43,880 --> 00:24:46,980
so uh then we are

717
00:24:46,980 --> 00:24:49,860
gonna expose that service

718
00:24:49,860 --> 00:24:52,020
and you can see this and I'll just show

719
00:24:52,020 --> 00:24:53,760
this to you

720
00:24:53,760 --> 00:24:55,080
so it's literally just a simple

721
00:24:55,080 --> 00:24:57,320
deployment it there's nothing fancy here

722
00:24:57,320 --> 00:25:00,380
uh it's just running in web mode

723
00:25:00,380 --> 00:25:04,320
and I can show you the glances service

724
00:25:04,320 --> 00:25:07,260
this shows again standard nothing

725
00:25:07,260 --> 00:25:10,940
interesting I'm going to now apply this

726
00:25:10,940 --> 00:25:15,659
and we can see that as we were speaking

727
00:25:15,659 --> 00:25:16,860
talking about this earlier we have a

728
00:25:16,860 --> 00:25:20,460
cluster IP that we can now read well if

729
00:25:20,460 --> 00:25:21,840
we were in it in the cluster we could

730
00:25:21,840 --> 00:25:23,940
hit it if I do this

731
00:25:23,940 --> 00:25:25,320
oops

732
00:25:25,320 --> 00:25:29,340
nothing will happen but what I can do is

733
00:25:29,340 --> 00:25:32,580
I can do port forward I have port

734
00:25:32,580 --> 00:25:33,840
forward somewhere

735
00:25:33,840 --> 00:25:35,220
yeah there you go

736
00:25:35,220 --> 00:25:39,059
and then I can go to localhost 5000 and

737
00:25:39,059 --> 00:25:41,520
I get this fancy thing that works right

738
00:25:41,520 --> 00:25:43,320
but obviously this is running on my

739
00:25:43,320 --> 00:25:44,940
local machine and that's not useful

740
00:25:44,940 --> 00:25:47,340
right so what we're going to do

741
00:25:47,340 --> 00:25:50,640
is we're going to now apply slightly

742
00:25:50,640 --> 00:25:54,480
we're gonna create the operator which

743
00:25:54,480 --> 00:25:56,220
so this is the kubernetes tail scale

744
00:25:56,220 --> 00:26:00,080
operator that we're just releasing

745
00:26:00,740 --> 00:26:03,600
and you can see that things are coming

746
00:26:03,600 --> 00:26:07,559
up and things are there and as the

747
00:26:07,559 --> 00:26:09,539
telescope upper starts it joins my

748
00:26:09,539 --> 00:26:12,299
cluster oh it joins my tail net

749
00:26:12,299 --> 00:26:14,279
you can see that this I have tail scale

750
00:26:14,279 --> 00:26:16,679
running here and there's the operator is

751
00:26:16,679 --> 00:26:19,380
here it's not that interesting yet we'll

752
00:26:19,380 --> 00:26:20,940
we have some plans on how to make this

753
00:26:20,940 --> 00:26:23,220
more interesting but anyways back to

754
00:26:23,220 --> 00:26:24,240
this

755
00:26:24,240 --> 00:26:27,059
so now I have the kubernetes operator

756
00:26:27,059 --> 00:26:31,860
line I'm going to do a diff of this and

757
00:26:31,860 --> 00:26:33,900
this now

758
00:26:33,900 --> 00:26:35,820
to show you that all I'm doing is

759
00:26:35,820 --> 00:26:36,840
basically

760
00:26:36,840 --> 00:26:39,059
making a load balancer class I'm

761
00:26:39,059 --> 00:26:41,340
changing it from this is mini Cube

762
00:26:41,340 --> 00:26:43,020
running on my laptop I'm going to say

763
00:26:43,020 --> 00:26:45,419
that no make it a load balancer instead

764
00:26:45,419 --> 00:26:47,159
of a cluster IP and use a tailscale load

765
00:26:47,159 --> 00:26:49,260
balancer class I also tell it to use the

766
00:26:49,260 --> 00:26:51,360
demo hostname

767
00:26:51,360 --> 00:26:54,260
so let's do that

768
00:26:58,020 --> 00:27:00,480
so you will see

769
00:27:00,480 --> 00:27:04,020
that details here operator has spun up a

770
00:27:04,020 --> 00:27:05,220
new pod

771
00:27:05,220 --> 00:27:09,299
and has given me a

772
00:27:09,299 --> 00:27:12,840
a URL that I can hit okay so I'm going

773
00:27:12,840 --> 00:27:16,799
to hit this URL on my machine and this

774
00:27:16,799 --> 00:27:18,799
is not going to work but this might

775
00:27:18,799 --> 00:27:21,539
hopefully maybe

776
00:27:21,539 --> 00:27:23,279
if I'm lucky

777
00:27:23,279 --> 00:27:25,260
oh it does work

778
00:27:25,260 --> 00:27:27,659
right no Port forwards no nothing I have

779
00:27:27,659 --> 00:27:31,400
something that's running on this

780
00:27:31,860 --> 00:27:35,039
um I hope that it doesn't isn't always

781
00:27:35,039 --> 00:27:37,080
this slow but I guess Wi-Fi

782
00:27:37,080 --> 00:27:38,720
it's fine

783
00:27:38,720 --> 00:27:41,700
uh while we wait for this to do stuff

784
00:27:41,700 --> 00:27:43,860
what we're going to do is we're going to

785
00:27:43,860 --> 00:27:46,799
use a new feature and this is this is

786
00:27:46,799 --> 00:27:47,820
not part of the operator that we're

787
00:27:47,820 --> 00:27:50,100
about to drop this is coming soon but I

788
00:27:50,100 --> 00:27:52,440
it's in a branch somewhere that I'm

789
00:27:52,440 --> 00:27:54,779
working on but

790
00:27:54,779 --> 00:27:59,640
what this does is so there's a I'm sorry

791
00:27:59,640 --> 00:28:01,559
yeah

792
00:28:01,559 --> 00:28:05,418
it's it's like literally ours old

793
00:28:05,580 --> 00:28:08,340
so we're gonna and this is the other one

794
00:28:08,340 --> 00:28:10,760
which is

795
00:28:11,539 --> 00:28:13,380
glances

796
00:28:13,380 --> 00:28:14,700
funnel

797
00:28:14,700 --> 00:28:17,159
with this the only difference is that

798
00:28:17,159 --> 00:28:19,260
this is another annotation that I add

799
00:28:19,260 --> 00:28:22,080
and as you can see from it what it does

800
00:28:22,080 --> 00:28:24,299
is it uses the new uh new feature in

801
00:28:24,299 --> 00:28:25,980
telescope called funnel

802
00:28:25,980 --> 00:28:28,380
and it will allow you to have a public

803
00:28:28,380 --> 00:28:30,419
IP on your machine

804
00:28:30,419 --> 00:28:33,120
on my laptop sitting here

805
00:28:33,120 --> 00:28:36,918
in this booth all right

806
00:28:41,039 --> 00:28:44,159
okay it loaded yay

807
00:28:44,159 --> 00:28:45,720
now

808
00:28:45,720 --> 00:28:49,700
what has let's see

809
00:28:54,539 --> 00:28:57,000
yeah it seems to be working okay

810
00:28:57,000 --> 00:29:00,480
so now I can go to

811
00:29:00,480 --> 00:29:03,020
this

812
00:29:03,120 --> 00:29:05,940
and if I do that

813
00:29:05,940 --> 00:29:08,820
it starts to get a certificate

814
00:29:08,820 --> 00:29:11,159
wait what

815
00:29:11,159 --> 00:29:13,500
it's doing stuff

816
00:29:13,500 --> 00:29:17,220
but in HTTPS cert and doing DNS yeah it

817
00:29:17,220 --> 00:29:20,760
sets DNS locally and now what I can do

818
00:29:20,760 --> 00:29:24,659
is I can get off of tail scale

819
00:29:24,659 --> 00:29:27,179
I'm no longer connected to Telltale

820
00:29:27,179 --> 00:29:29,340
and if I'm lucky in the Democrats are

821
00:29:29,340 --> 00:29:32,659
with me this should still work

822
00:29:32,659 --> 00:29:34,620
and

823
00:29:34,620 --> 00:29:37,340
and maybe not

824
00:29:37,500 --> 00:29:40,039
Maybe

825
00:29:41,880 --> 00:29:45,000
we're in limbo we're in limbo we're

826
00:29:45,000 --> 00:29:46,860
hoping that it works

827
00:29:46,860 --> 00:29:50,600
maybe Carl has a better luck

828
00:29:53,100 --> 00:29:56,640
that's very small yeah I'm just

829
00:29:56,640 --> 00:29:59,880
so as you can see it did do stuff it did

830
00:29:59,880 --> 00:30:03,480
uh the it hasn't it has a public IP it

831
00:30:03,480 --> 00:30:06,360
did stuff it is it got the certificate

832
00:30:06,360 --> 00:30:09,059
uh and I'm sorry the internet is not

833
00:30:09,059 --> 00:30:09,840
great

834
00:30:09,840 --> 00:30:12,899
but uh you guys can right now go to this

835
00:30:12,899 --> 00:30:14,880
this URL

836
00:30:14,880 --> 00:30:16,980
as you can see on your phone and it

837
00:30:16,980 --> 00:30:18,659
should work you can hit his laptop you

838
00:30:18,659 --> 00:30:20,520
can hit my laptop my service is running

839
00:30:20,520 --> 00:30:23,640
on this cluster so this is

840
00:30:23,640 --> 00:30:26,039
obviously this is not you would not

841
00:30:26,039 --> 00:30:27,539
expose an internal service like this but

842
00:30:27,539 --> 00:30:28,799
you could use

843
00:30:28,799 --> 00:30:30,720
you can use sales skill to expose the

844
00:30:30,720 --> 00:30:32,760
service running basically anywhere in

845
00:30:32,760 --> 00:30:34,740
the world uh either on kubernetes are

846
00:30:34,740 --> 00:30:36,539
not in kubernetes and access it from

847
00:30:36,539 --> 00:30:37,980
anywhere in the world without doing any

848
00:30:37,980 --> 00:30:39,779
port forwarding without like I'm on a

849
00:30:39,779 --> 00:30:42,000
public Wi-Fi in some conference and it

850
00:30:42,000 --> 00:30:43,860
works

851
00:30:43,860 --> 00:30:46,279
nice thanks

852
00:30:48,919 --> 00:30:51,120
yeah don't kill the service yet so

853
00:30:51,120 --> 00:30:54,299
people can hit it yeah I'm trying not to

854
00:30:54,299 --> 00:30:55,980
um yeah so I think there is that's not

855
00:30:55,980 --> 00:30:58,440
what I wanted the um

856
00:30:58,440 --> 00:31:01,679
so it was spinning up a service of a

857
00:31:01,679 --> 00:31:04,380
load balancer class type on on

858
00:31:04,380 --> 00:31:06,419
kubernetes adding a true telescope

859
00:31:06,419 --> 00:31:07,740
Network which then made it accessible to

860
00:31:07,740 --> 00:31:08,820
anybody else who's on your telescale

861
00:31:08,820 --> 00:31:09,960
network who has authentication

862
00:31:09,960 --> 00:31:12,000
encryption all that goodness

863
00:31:12,000 --> 00:31:13,620
just like you would want for an internal

864
00:31:13,620 --> 00:31:15,179
service and then if you wanted to make

865
00:31:15,179 --> 00:31:16,620
it publicly accessible like if you were

866
00:31:16,620 --> 00:31:18,179
trying to share a link with a partner of

867
00:31:18,179 --> 00:31:19,500
you know something in CI CD that you

868
00:31:19,500 --> 00:31:20,700
were developing or that type of thing

869
00:31:20,700 --> 00:31:23,340
you can just share you can easily get I

870
00:31:23,340 --> 00:31:27,179
am um trying DNS and https and then go

871
00:31:27,179 --> 00:31:29,340
from there

872
00:31:29,340 --> 00:31:31,440
while we figure out how monitors work

873
00:31:31,440 --> 00:31:33,000
because that's actually harder than what

874
00:31:33,000 --> 00:31:35,340
Messengers did apparently so okay you

875
00:31:35,340 --> 00:31:37,860
also type really fast

876
00:31:37,860 --> 00:31:41,490
okay where was my presentation

877
00:31:41,490 --> 00:31:44,159
[Music]

878
00:31:44,159 --> 00:31:46,500
I think I think I lost it

879
00:31:46,500 --> 00:31:49,039
s lights

880
00:31:50,520 --> 00:31:53,658
okay cool

881
00:31:53,899 --> 00:31:56,100
yeah I'll make it happen

882
00:31:56,100 --> 00:31:58,380
oh

883
00:31:58,380 --> 00:32:00,779
no that didn't work either oh I see give

884
00:32:00,779 --> 00:32:02,460
me a sec

885
00:32:02,460 --> 00:32:04,880
dragon

886
00:32:05,640 --> 00:32:08,159
the other way click the next slide for

887
00:32:08,159 --> 00:32:09,779
doing the wrong way

888
00:32:09,779 --> 00:32:12,840
there we go we have something oh

889
00:32:12,840 --> 00:32:15,799
live demos are fun

890
00:32:22,440 --> 00:32:25,640
and these aren't lived almost fun

891
00:32:26,220 --> 00:32:28,140
I love that the live demo is easier than

892
00:32:28,140 --> 00:32:31,200
than fixing slides

893
00:32:31,200 --> 00:32:33,480
all right so we did a demo

894
00:32:33,480 --> 00:32:35,039
um again thanks for the demoism so we've

895
00:32:35,039 --> 00:32:37,080
covered all the options that we had and

896
00:32:37,080 --> 00:32:38,700
none of them provides all the properties

897
00:32:38,700 --> 00:32:40,080
that we were looking for which is not

898
00:32:40,080 --> 00:32:42,240
shocking nonetheless let's go look back

899
00:32:42,240 --> 00:32:43,380
at the options that we considered and

900
00:32:43,380 --> 00:32:45,299
how they stack up and I'm sorry that the

901
00:32:45,299 --> 00:32:47,580
text is so tiny there's too many options

902
00:32:47,580 --> 00:32:49,200
and two criteria

903
00:32:49,200 --> 00:32:50,940
so for the kubernetes constructs you

904
00:32:50,940 --> 00:32:52,380
know combining kubernetes cluster

905
00:32:52,380 --> 00:32:54,120
services with load balancer gets you

906
00:32:54,120 --> 00:32:55,919
load balancing that's it it gives you

907
00:32:55,919 --> 00:32:57,240
inbound connectivity from outside the

908
00:32:57,240 --> 00:32:58,799
cluster to Services running inside of it

909
00:32:58,799 --> 00:33:00,899
combining kubernetes cluster services

910
00:33:00,899 --> 00:33:02,279
with kubernetes Ingress gives you

911
00:33:02,279 --> 00:33:03,720
encryption and load balancing you can

912
00:33:03,720 --> 00:33:04,620
still

913
00:33:04,620 --> 00:33:06,240
you know you can Route traffic into a

914
00:33:06,240 --> 00:33:08,820
cluster with TLS that terminates at

915
00:33:08,820 --> 00:33:10,559
Ingress which may or may not be inside

916
00:33:10,559 --> 00:33:11,700
the cluster

917
00:33:11,700 --> 00:33:13,320
with kubernetes network policy you can

918
00:33:13,320 --> 00:33:14,820
restrict which Services inside a cluster

919
00:33:14,820 --> 00:33:15,899
can communicate with which other

920
00:33:15,899 --> 00:33:17,460
services including restricting a service

921
00:33:17,460 --> 00:33:19,320
to only access accept traffic from

922
00:33:19,320 --> 00:33:20,519
Ingress

923
00:33:20,519 --> 00:33:22,140
then for the set of options that are

924
00:33:22,140 --> 00:33:23,220
typically used for other kinds of

925
00:33:23,220 --> 00:33:25,860
trafficking kubernetes service mesh does

926
00:33:25,860 --> 00:33:28,559
it everything or it can in some cases

927
00:33:28,559 --> 00:33:30,539
depending on what you're trying to do so

928
00:33:30,539 --> 00:33:32,279
why shouldn't you use a service mesh for

929
00:33:32,279 --> 00:33:34,860
the user to internal service use case

930
00:33:34,860 --> 00:33:37,380
well you can again you just need a user

931
00:33:37,380 --> 00:33:39,720
to install the service mesh agent on all

932
00:33:39,720 --> 00:33:41,399
user machines which

933
00:33:41,399 --> 00:33:44,640
ends up looking a lot like a VPN right a

934
00:33:44,640 --> 00:33:46,140
Bastion is a single point of entry to

935
00:33:46,140 --> 00:33:47,399
your network it typically provides

936
00:33:47,399 --> 00:33:49,320
authentication authorization encryption

937
00:33:49,320 --> 00:33:50,940
and auditability but it sits on the

938
00:33:50,940 --> 00:33:52,919
public web and it might have some

939
00:33:52,919 --> 00:33:54,299
traffic management capabilities if

940
00:33:54,299 --> 00:33:55,620
that's something that you need

941
00:33:55,620 --> 00:33:57,419
and then for protocols that are used to

942
00:33:57,419 --> 00:33:59,100
protect traffic that we talked about and

943
00:33:59,100 --> 00:34:00,679
are typically used as part of a VPN

944
00:34:00,679 --> 00:34:03,000
ipsec gives you authentication and

945
00:34:03,000 --> 00:34:05,519
encryption and ipsec-based VPN will

946
00:34:05,519 --> 00:34:06,779
typically provide you with authorization

947
00:34:06,779 --> 00:34:09,060
and auditability and may have some

948
00:34:09,060 --> 00:34:11,460
traffic management options and similarly

949
00:34:11,460 --> 00:34:13,020
wire guard can be used anywhere that you

950
00:34:13,020 --> 00:34:14,159
wrote traffic but only gives you

951
00:34:14,159 --> 00:34:15,839
authentication and encryption with

952
00:34:15,839 --> 00:34:18,359
authorization based on public Keys a

953
00:34:18,359 --> 00:34:20,040
wire guard based VPN will typically

954
00:34:20,040 --> 00:34:21,599
provide you with authorization and

955
00:34:21,599 --> 00:34:23,159
auditability and might have some traffic

956
00:34:23,159 --> 00:34:25,379
filtering the main reason to favor

957
00:34:25,379 --> 00:34:28,199
wireguard over ipsec in this scenario is

958
00:34:28,199 --> 00:34:29,879
just a simpler configuration right with

959
00:34:29,879 --> 00:34:31,379
better connectivity as the user changes

960
00:34:31,379 --> 00:34:33,619
between between IPS

961
00:34:33,619 --> 00:34:35,760
wireguard-based vpns with a coordination

962
00:34:35,760 --> 00:34:38,940
server rather than a

963
00:34:38,940 --> 00:34:41,040
um yeah with the coordination server

964
00:34:41,040 --> 00:34:43,500
like Tesco can also use natural to allow

965
00:34:43,500 --> 00:34:44,940
you to Route traffic to private private

966
00:34:44,940 --> 00:34:46,379
IPS

967
00:34:46,379 --> 00:34:48,060
so the option that you should choose for

968
00:34:48,060 --> 00:34:49,619
your application doesn't only depend on

969
00:34:49,619 --> 00:34:50,820
security properties right as I mentioned

970
00:34:50,820 --> 00:34:52,080
earlier you also think about you know

971
00:34:52,080 --> 00:34:54,418
latency availability usability it's a

972
00:34:54,418 --> 00:34:55,918
huge reason to decide what to do for

973
00:34:55,918 --> 00:34:57,720
your internal users as well as ease of

974
00:34:57,720 --> 00:34:59,099
management of whatever solution you pick

975
00:34:59,099 --> 00:35:01,500
but there isn't a clear winner so I have

976
00:35:01,500 --> 00:35:02,820
this very you know every solution has

977
00:35:02,820 --> 00:35:04,560
its trade-offs I know it's a very

978
00:35:04,560 --> 00:35:06,660
unsatisfying conclusion to this talk but

979
00:35:06,660 --> 00:35:09,119
here we are nobody wins but also nobody

980
00:35:09,119 --> 00:35:11,720
loses which is

981
00:35:12,240 --> 00:35:13,560
um all right if you want to learn more

982
00:35:13,560 --> 00:35:14,760
about some of the content we covered

983
00:35:14,760 --> 00:35:17,040
today check out these links

984
00:35:17,040 --> 00:35:18,540
um there's a community's documentation a

985
00:35:18,540 --> 00:35:20,160
link to the operator that messum demoed

986
00:35:20,160 --> 00:35:22,920
and you can get a link to these slides I

987
00:35:22,920 --> 00:35:24,180
will leave this here and then I'll put

988
00:35:24,180 --> 00:35:25,920
up the next slide which is a QR code for

989
00:35:25,920 --> 00:35:27,599
some feedback

990
00:35:27,599 --> 00:35:29,960
great

991
00:35:43,500 --> 00:35:48,420
yeah so uh tailskill provides uh has its

992
00:35:48,420 --> 00:35:50,700
own uh Apple system so you can restrict

993
00:35:50,700 --> 00:35:53,280
access to like uh you can say like uh

994
00:35:53,280 --> 00:35:55,200
Maya can reach my laptop or I can reach

995
00:35:55,200 --> 00:35:57,180
her laptop but no one else can so you

996
00:35:57,180 --> 00:35:58,440
can and the authentication is based on

997
00:35:58,440 --> 00:36:00,240
your identity provider

998
00:36:00,240 --> 00:36:02,760
so it'll be like Maya tillscale.com or

999
00:36:02,760 --> 00:36:05,040
whatever or her email is yeah is going

1000
00:36:05,040 --> 00:36:08,839
to be able to reach my lotto

1001
00:36:11,599 --> 00:36:14,640
not your browser but your machine so

1002
00:36:14,640 --> 00:36:16,500
there's a tail skill client that you

1003
00:36:16,500 --> 00:36:18,780
need to install on your machine

1004
00:36:18,780 --> 00:36:20,640
and you log into that which will

1005
00:36:20,640 --> 00:36:22,560
authenticate you to the using your IDP

1006
00:36:22,560 --> 00:36:25,880
and give you credentials

1007
00:36:30,000 --> 00:36:32,480
yes

1008
00:36:34,920 --> 00:36:38,240
or is it all around

1009
00:36:40,320 --> 00:36:44,280
uh to find uh

1010
00:36:44,280 --> 00:36:46,079
if I wanted to expose an application

1011
00:36:46,079 --> 00:36:48,619
I want to

1012
00:36:50,220 --> 00:36:53,000
at all then

1013
00:36:53,880 --> 00:36:54,619
um

1014
00:36:54,619 --> 00:36:57,660
no not really so you can you can make

1015
00:36:57,660 --> 00:37:00,060
um you can write access controls based

1016
00:37:00,060 --> 00:37:02,760
on users groups that includes groups

1017
00:37:02,760 --> 00:37:06,540
from your identity provider IP addresses

1018
00:37:06,540 --> 00:37:08,880
uh tags which are kind of like a service

1019
00:37:08,880 --> 00:37:11,400
account like a service account

1020
00:37:11,400 --> 00:37:13,500
um that type of thing

1021
00:37:13,500 --> 00:37:14,820
um so you might say something like you

1022
00:37:14,820 --> 00:37:16,619
know like my can access Finance machines

1023
00:37:16,619 --> 00:37:19,500
or people in the you know Dev team can

1024
00:37:19,500 --> 00:37:21,839
access the production Network

1025
00:37:21,839 --> 00:37:23,339
uh you can also restrict based on

1026
00:37:23,339 --> 00:37:26,000
important protocol

1027
00:37:26,820 --> 00:37:29,420
yes yeah

1028
00:37:54,839 --> 00:37:56,640
any idea that

1029
00:37:56,640 --> 00:37:59,118
tastes like

1030
00:38:00,599 --> 00:38:04,800
uh not that I know of uh you can I don't

1031
00:38:04,800 --> 00:38:06,420
know about that but I know wireguard's

1032
00:38:06,420 --> 00:38:08,339
padding is very well defined and very

1033
00:38:08,339 --> 00:38:10,560
small yeah like if like if wire guard

1034
00:38:10,560 --> 00:38:12,480
breaks they have to redo like if the

1035
00:38:12,480 --> 00:38:13,740
underlying encryption breaks they have a

1036
00:38:13,740 --> 00:38:15,000
way of changing like a version number

1037
00:38:15,000 --> 00:38:16,500
but then like everything else every

1038
00:38:16,500 --> 00:38:17,820
single bit is used basically right

1039
00:38:17,820 --> 00:38:19,020
there's no there's nothing over there's

1040
00:38:19,020 --> 00:38:20,579
no overhead I don't know about if he's

1041
00:38:20,579 --> 00:38:23,960
like yeah neither sorry yeah

1042
00:38:24,119 --> 00:38:26,660
yes

1043
00:38:33,300 --> 00:38:35,880
yes so tail scale has a feature called

1044
00:38:35,880 --> 00:38:38,760
tailscale SSH which does basically that

1045
00:38:38,760 --> 00:38:40,260
so if you can install if you install

1046
00:38:40,260 --> 00:38:43,320
jail scale on your nodes you can

1047
00:38:43,320 --> 00:38:46,260
restrict who can access your nodes and

1048
00:38:46,260 --> 00:38:49,079
as what user and it runs its own SSH

1049
00:38:49,079 --> 00:38:51,780
agent on the machine so it gets a lot

1050
00:38:51,780 --> 00:38:53,820
more fine-grained access you can there's

1051
00:38:53,820 --> 00:38:55,680
also a Mode called check mode so you can

1052
00:38:55,680 --> 00:38:57,900
say like Maya needs to re-authenticate

1053
00:38:57,900 --> 00:38:59,460
every four hours in order to reach the

1054
00:38:59,460 --> 00:39:01,800
servers you could also just run any SSH

1055
00:39:01,800 --> 00:39:04,079
traffic over any either ipsec or

1056
00:39:04,079 --> 00:39:05,460
wireguard and that should work fine but

1057
00:39:05,460 --> 00:39:07,140
then you have to manage the client the

1058
00:39:07,140 --> 00:39:08,880
you know user names and passwords or

1059
00:39:08,880 --> 00:39:10,320
keys or whatever it happens to be

1060
00:39:10,320 --> 00:39:12,060
there's no reason that wouldn't work for

1061
00:39:12,060 --> 00:39:14,040
for both ipsec and wireguard-based

1062
00:39:14,040 --> 00:39:16,400
solutions

1063
00:39:20,339 --> 00:39:22,800
any more questions

1064
00:39:22,800 --> 00:39:24,900
cool

1065
00:39:24,900 --> 00:39:26,940
if you have any feedback

1066
00:39:26,940 --> 00:39:29,839
there's a QR code

1067
00:39:30,780 --> 00:39:34,780
[Applause]

