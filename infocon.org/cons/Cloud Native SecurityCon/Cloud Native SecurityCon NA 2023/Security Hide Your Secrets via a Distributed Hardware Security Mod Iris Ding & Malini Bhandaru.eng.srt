1
00:00:00,240 --> 00:00:02,760
okay let's get started

2
00:00:02,760 --> 00:00:04,620
um thank you for attending this session

3
00:00:04,620 --> 00:00:06,240
this is the last session for this

4
00:00:06,240 --> 00:00:09,960
meeting so my name is Iris Dean I'm

5
00:00:09,960 --> 00:00:12,960
coming from Intel so my co-speaker

6
00:00:12,960 --> 00:00:15,120
Malini cannot be here today due to the

7
00:00:15,120 --> 00:00:17,699
travel issues so I will cover the whole

8
00:00:17,699 --> 00:00:20,220
topic today and thanks to my college

9
00:00:20,220 --> 00:00:23,160
here we also did a lot of contribution

10
00:00:23,160 --> 00:00:24,840
to this topic

11
00:00:24,840 --> 00:00:28,140
so today I will share something about

12
00:00:28,140 --> 00:00:30,720
Cloud HSM and what's the challenge you

13
00:00:30,720 --> 00:00:32,759
might be fitting if you're using Cloud

14
00:00:32,759 --> 00:00:35,880
HSM and how we can overcome these

15
00:00:35,880 --> 00:00:39,180
challenges using digital HSM and finally

16
00:00:39,180 --> 00:00:41,820
I will show you some user cases that you

17
00:00:41,820 --> 00:00:44,760
can leverage it in your environment

18
00:00:44,760 --> 00:00:48,660
so um HSM or Hardware executive module

19
00:00:48,660 --> 00:00:51,059
this is not a very new technology

20
00:00:51,059 --> 00:00:53,820
actually it has exists for a long time

21
00:00:53,820 --> 00:00:56,879
so basically you need a specific

22
00:00:56,879 --> 00:00:59,399
plugable Hardware that you can store

23
00:00:59,399 --> 00:01:02,520
your credential information like private

24
00:01:02,520 --> 00:01:05,280
keys in this device and also you can

25
00:01:05,280 --> 00:01:07,680
perform your crypto operations in this

26
00:01:07,680 --> 00:01:10,979
device so you can see it also means you

27
00:01:10,979 --> 00:01:13,200
need some additional cost because you

28
00:01:13,200 --> 00:01:15,780
need a specific Hardware to and you also

29
00:01:15,780 --> 00:01:19,740
need to maintain it so

30
00:01:19,979 --> 00:01:21,960
um beside this

31
00:01:21,960 --> 00:01:24,540
um you know the security is coming more

32
00:01:24,540 --> 00:01:26,880
and more important today you can see

33
00:01:26,880 --> 00:01:29,040
from today's current is cloud native

34
00:01:29,040 --> 00:01:32,159
security card so also in the cloud

35
00:01:32,159 --> 00:01:34,560
environment this also bring a lot of

36
00:01:34,560 --> 00:01:37,740
security requirements so this is some

37
00:01:37,740 --> 00:01:42,920
report for the HSN market so it says

38
00:01:42,920 --> 00:01:47,460
due to 2028 the HSN Market will be

39
00:01:47,460 --> 00:01:50,939
reached to 2 billion dollars so it's a

40
00:01:50,939 --> 00:01:54,960
huge market so as we said a lot of

41
00:01:54,960 --> 00:01:57,479
workload has been onboarded to the cloud

42
00:01:57,479 --> 00:02:00,960
environment so for the currently most of

43
00:02:00,960 --> 00:02:03,780
the major cloud service providers has

44
00:02:03,780 --> 00:02:07,560
already had their Cloud HSM offering so

45
00:02:07,560 --> 00:02:10,199
it means the cloud provider will host

46
00:02:10,199 --> 00:02:12,680
the HSM Hardware in their Cloud

47
00:02:12,680 --> 00:02:16,080
infrastructure so for the customers for

48
00:02:16,080 --> 00:02:18,959
all for the end users this brings a lot

49
00:02:18,959 --> 00:02:21,959
tell benefits for example if you want to

50
00:02:21,959 --> 00:02:24,900
consume the HSM service you can just

51
00:02:24,900 --> 00:02:27,540
consume it as it provides you a lot of

52
00:02:27,540 --> 00:02:31,080
flexibility so basically if you want to

53
00:02:31,080 --> 00:02:33,660
consume the cloud HSM you need to follow

54
00:02:33,660 --> 00:02:39,239
some basic steps so most the cloud HSM

55
00:02:39,239 --> 00:02:42,959
will follow in the PKS 11 standards so

56
00:02:42,959 --> 00:02:45,900
firstly you might want to onboard your

57
00:02:45,900 --> 00:02:49,440
security keys in the cloud HSM so the

58
00:02:49,440 --> 00:02:51,599
cloud HSM after you onboarding your

59
00:02:51,599 --> 00:02:54,599
private Keys it will give you a private

60
00:02:54,599 --> 00:02:57,060
key Handler a key reference here then

61
00:02:57,060 --> 00:02:59,040
you can use in this key handle in your

62
00:02:59,040 --> 00:03:01,379
application then when your application

63
00:03:01,379 --> 00:03:02,700
is running

64
00:03:02,700 --> 00:03:06,060
he can use the key Handler and send the

65
00:03:06,060 --> 00:03:08,280
crypto operation request to the cloud

66
00:03:08,280 --> 00:03:11,700
HSM so Cloud HSM actually will perform

67
00:03:11,700 --> 00:03:14,519
the Crypt operation in his environment

68
00:03:14,519 --> 00:03:17,280
and give the computer operation without

69
00:03:17,280 --> 00:03:19,739
tools application so you can see

70
00:03:19,739 --> 00:03:22,140
actually in this scenario the crypto

71
00:03:22,140 --> 00:03:24,440
operation is happened remotely

72
00:03:24,440 --> 00:03:28,140
against your application so obviously it

73
00:03:28,140 --> 00:03:31,140
will bring your high latency for the

74
00:03:31,140 --> 00:03:33,720
crypto operations at the same time it

75
00:03:33,720 --> 00:03:35,220
also means you will have lower

76
00:03:35,220 --> 00:03:36,920
transaction range

77
00:03:36,920 --> 00:03:39,900
at the same time sometimes you want to

78
00:03:39,900 --> 00:03:41,459
migrate between different Cloud

79
00:03:41,459 --> 00:03:44,700
providers so although the most of them

80
00:03:44,700 --> 00:03:47,340
are following the same pcss 11 standards

81
00:03:47,340 --> 00:03:51,060
but the apis might have a very might

82
00:03:51,060 --> 00:03:54,120
have a slight difference so it will

83
00:03:54,120 --> 00:03:56,480
bring you moderation difficulty

84
00:03:56,480 --> 00:03:59,040
the last part is on the edge side

85
00:03:59,040 --> 00:04:00,900
actually there is no suitable

86
00:04:00,900 --> 00:04:03,180
replacement for the cloud HSI

87
00:04:03,180 --> 00:04:07,440
so how to overcome all these challenges

88
00:04:07,440 --> 00:04:10,200
this is what the distribution HSM we

89
00:04:10,200 --> 00:04:13,200
have brought up so you can see from this

90
00:04:13,200 --> 00:04:14,640
picture that

91
00:04:14,640 --> 00:04:17,339
the big difference here is this trip to

92
00:04:17,339 --> 00:04:19,560
HSM is actually sitting sitting

93
00:04:19,560 --> 00:04:21,959
alongside your application so in this

94
00:04:21,959 --> 00:04:23,580
picture you can see

95
00:04:23,580 --> 00:04:26,820
actually each application has their own

96
00:04:26,820 --> 00:04:29,180
distributed HSM here

97
00:04:29,180 --> 00:04:32,820
also the crypto operations will happen

98
00:04:32,820 --> 00:04:35,900
locally in the distributed HSM

99
00:04:35,900 --> 00:04:40,320
so so it brings a lot of benefit for you

100
00:04:40,320 --> 00:04:43,620
it's firstly is high secured and even on

101
00:04:43,620 --> 00:04:46,800
the edge you can you know have your own

102
00:04:46,800 --> 00:04:49,259
distributed HSM and do the Crypt

103
00:04:49,259 --> 00:04:52,259
operations in inside it so it is lower

104
00:04:52,259 --> 00:04:54,600
latency and will bring your grid

105
00:04:54,600 --> 00:04:57,419
throughput also because this distributed

106
00:04:57,419 --> 00:05:00,000
SM doesn't rely on additional Hardware

107
00:05:00,000 --> 00:05:02,699
comparing to the traditional traditional

108
00:05:02,699 --> 00:05:06,080
HSM so it also means lower cost

109
00:05:06,080 --> 00:05:08,759
besides this you can see actually there

110
00:05:08,759 --> 00:05:10,860
are four steps here there are additional

111
00:05:10,860 --> 00:05:14,540
step one so this means

112
00:05:14,540 --> 00:05:17,400
before you give your credential

113
00:05:17,400 --> 00:05:20,880
information into the distributed HSM HSM

114
00:05:20,880 --> 00:05:24,680
actually you can ask every evidence

115
00:05:24,680 --> 00:05:28,020
beforehand to let the distributed SM to

116
00:05:28,020 --> 00:05:30,539
prove to you that I'm actually attracted

117
00:05:30,539 --> 00:05:34,800
about attracted party so all these give

118
00:05:34,800 --> 00:05:36,840
you a lot of benefits here so you might

119
00:05:36,840 --> 00:05:40,979
be curious how we can achieve this so

120
00:05:40,979 --> 00:05:41,639
um

121
00:05:41,639 --> 00:05:44,340
the answer is using trusted execution

122
00:05:44,340 --> 00:05:46,620
environment so let's see what's the

123
00:05:46,620 --> 00:05:49,440
trusted execution environment

124
00:05:49,440 --> 00:05:53,160
so um basically this is coming from the

125
00:05:53,160 --> 00:05:56,280
confidential Computing area so um

126
00:05:56,280 --> 00:05:58,979
trusted execution environment provides

127
00:05:58,979 --> 00:06:01,759
you an isolated or protected environment

128
00:06:01,759 --> 00:06:06,000
to run your authorized code so from

129
00:06:06,000 --> 00:06:08,880
Securities perspective the data can be

130
00:06:08,880 --> 00:06:11,880
divided into three categories data

131
00:06:11,880 --> 00:06:15,479
analyzed data in emotion and data in use

132
00:06:15,479 --> 00:06:19,560
so for data at the rest the most popular

133
00:06:19,560 --> 00:06:22,620
technology is you know before you see

134
00:06:22,620 --> 00:06:25,199
your data you can encrypt it and then

135
00:06:25,199 --> 00:06:27,600
see it in the disk awesome you know

136
00:06:27,600 --> 00:06:28,520
storage

137
00:06:28,520 --> 00:06:32,039
data in motion means typically you want

138
00:06:32,039 --> 00:06:34,319
you can use interos or even Mutual tis

139
00:06:34,319 --> 00:06:37,080
to encrypt your traffic when the traffic

140
00:06:37,080 --> 00:06:40,800
is in transition the last part is data

141
00:06:40,800 --> 00:06:43,139
universe so this is the major Focus for

142
00:06:43,139 --> 00:06:46,500
Te so it means when the data is

143
00:06:46,500 --> 00:06:49,020
currently executing it is protected as

144
00:06:49,020 --> 00:06:53,940
well so um basically T will require some

145
00:06:53,940 --> 00:06:57,360
Hardware or firmware support it can you

146
00:06:57,360 --> 00:07:00,199
can see from the right part it actually

147
00:07:00,199 --> 00:07:02,699
isolates applications and some

148
00:07:02,699 --> 00:07:04,740
privileged software like the operating

149
00:07:04,740 --> 00:07:06,740
system or even the

150
00:07:06,740 --> 00:07:10,080
high provider cannot access this this

151
00:07:10,080 --> 00:07:13,500
this memory region and only the CPU is

152
00:07:13,500 --> 00:07:17,880
trusted so um as I said it also can do

153
00:07:17,880 --> 00:07:19,860
the demonstration to you like the code

154
00:07:19,860 --> 00:07:22,919
or adaptation so you can see this is

155
00:07:22,919 --> 00:07:24,720
actually a Transit party for example

156
00:07:24,720 --> 00:07:27,120
this is really adjusted executive

157
00:07:27,120 --> 00:07:30,180
environment and I can for sure deliver

158
00:07:30,180 --> 00:07:33,800
my secret to you and let you run my

159
00:07:33,800 --> 00:07:37,319
crypto operations within within your

160
00:07:37,319 --> 00:07:41,240
your te environment

161
00:07:51,240 --> 00:07:53,280
okay

162
00:07:53,280 --> 00:07:57,138
sorry my computer account here

163
00:08:15,300 --> 00:08:17,780
okay

164
00:08:20,759 --> 00:08:23,300
so um sorry for the

165
00:08:23,300 --> 00:08:27,419
interruption so Intel HDX or software

166
00:08:27,419 --> 00:08:30,479
guide extension is a kind of this te so

167
00:08:30,479 --> 00:08:33,500
it's a process based te so basically

168
00:08:33,500 --> 00:08:36,958
Intel CPU has some specific instructions

169
00:08:36,958 --> 00:08:40,500
that you can leverage it to create a

170
00:08:40,500 --> 00:08:44,700
protected environment and let you to the

171
00:08:44,700 --> 00:08:47,160
protect the environment in in the top it

172
00:08:47,160 --> 00:08:49,860
is called sgx Enclave so you can see

173
00:08:49,860 --> 00:08:51,980
from the right side picture

174
00:08:51,980 --> 00:08:55,980
it looks like a protected keys that

175
00:08:55,980 --> 00:08:58,440
other parties even like the operating

176
00:08:58,440 --> 00:09:00,839
system or the firmware they cannot go

177
00:09:00,839 --> 00:09:03,420
into there and execute other access to

178
00:09:03,420 --> 00:09:05,000
this memory region

179
00:09:05,000 --> 00:09:09,660
so basically if you want to leverage sdx

180
00:09:09,660 --> 00:09:11,820
you can write your application and

181
00:09:11,820 --> 00:09:14,160
divide it into two parts attracted part

182
00:09:14,160 --> 00:09:16,320
and untreated pad only the traffic

183
00:09:16,320 --> 00:09:19,620
department can go into The fgx Enclave

184
00:09:19,620 --> 00:09:22,620
so this memory region is encrypted and

185
00:09:22,620 --> 00:09:25,620
it has strict access control so the

186
00:09:25,620 --> 00:09:27,899
remote authentication means it will

187
00:09:27,899 --> 00:09:30,060
prove to you it's a really trusted body

188
00:09:30,060 --> 00:09:33,000
and the thinning means even if the

189
00:09:33,000 --> 00:09:35,459
computer has been restarted you can

190
00:09:35,459 --> 00:09:39,360
still get your secret back so sdx has

191
00:09:39,360 --> 00:09:41,279
been in the market actually for a long

192
00:09:41,279 --> 00:09:44,339
time as well so basically the current

193
00:09:44,339 --> 00:09:46,100
most current

194
00:09:46,100 --> 00:09:48,899
Intel server like ice leak has already

195
00:09:48,899 --> 00:09:52,560
supported this function so if you are

196
00:09:52,560 --> 00:09:55,019
interested you can using this link to

197
00:09:55,019 --> 00:09:57,320
find the detailed

198
00:09:57,320 --> 00:10:00,620
production information data support fgx

199
00:10:00,620 --> 00:10:04,140
so maybe actually in your head in your

200
00:10:04,140 --> 00:10:05,940
if you have an Intel server it's

201
00:10:05,940 --> 00:10:07,980
actually already supported in this so

202
00:10:07,980 --> 00:10:10,200
you just need to you know enable it in

203
00:10:10,200 --> 00:10:13,140
buyers and you can leverage this

204
00:10:13,140 --> 00:10:16,680
capability in your environment as well

205
00:10:16,680 --> 00:10:19,740
so um let's see some user case how we

206
00:10:19,740 --> 00:10:23,580
land this in our real world so in

207
00:10:23,580 --> 00:10:26,459
today's session I will using htl service

208
00:10:26,459 --> 00:10:29,399
mesh as an example so you know

209
00:10:29,399 --> 00:10:32,220
um is still the security is a important

210
00:10:32,220 --> 00:10:35,700
part for the that it provides so it has

211
00:10:35,700 --> 00:10:38,399
two cases the mutual Tis so this is

212
00:10:38,399 --> 00:10:41,279
majorly using the communication within

213
00:10:41,279 --> 00:10:43,560
the mesh the other is the Gateway so it

214
00:10:43,560 --> 00:10:46,140
will handle the traffic coming through

215
00:10:46,140 --> 00:10:48,600
the through the outside world like the

216
00:10:48,600 --> 00:10:50,399
user requires coming through the Gateway

217
00:10:50,399 --> 00:10:53,940
and then go into the mesh inside so in

218
00:10:53,940 --> 00:10:56,519
in these two cases see how private key

219
00:10:56,519 --> 00:10:59,760
here and the app and currently the

220
00:10:59,760 --> 00:11:01,980
Easter stream the private key will be in

221
00:11:01,980 --> 00:11:04,980
clear text so it will bring security

222
00:11:04,980 --> 00:11:08,880
Explorer um for you a lot of security

223
00:11:08,880 --> 00:11:10,860
risk so you can imagine if the product

224
00:11:10,860 --> 00:11:12,740
key has been

225
00:11:12,740 --> 00:11:15,000
compromised it will bring a lot of

226
00:11:15,000 --> 00:11:18,060
trouble here so this is the new

227
00:11:18,060 --> 00:11:20,220
architecture that we Leverage The

228
00:11:20,220 --> 00:11:23,339
distributed HSM that can enhance all

229
00:11:23,339 --> 00:11:24,680
these our

230
00:11:24,680 --> 00:11:28,500
risks so you can see here uh well for

231
00:11:28,500 --> 00:11:32,120
the n-word side car we will inject uh

232
00:11:32,120 --> 00:11:34,440
SDS server here

233
00:11:34,440 --> 00:11:36,899
there is SDS over here this is the new

234
00:11:36,899 --> 00:11:39,360
component divided by ourselves and you

235
00:11:39,360 --> 00:11:41,339
can see there is a lock in the envelope

236
00:11:41,339 --> 00:11:45,060
and SDS server this log means there is a

237
00:11:45,060 --> 00:11:47,579
HSM alongside with them which is

238
00:11:47,579 --> 00:11:50,100
implemented implemented using sgx

239
00:11:50,100 --> 00:11:52,440
Enclave so

240
00:11:52,440 --> 00:11:54,660
and take a closer look at the normal

241
00:11:54,660 --> 00:11:56,880
side so you can see here

242
00:11:56,880 --> 00:12:00,600
um there is uh so for the animal side d

243
00:12:00,600 --> 00:12:03,300
by default using borderline SL for their

244
00:12:03,300 --> 00:12:06,600
and their SSL Library so borrowing SSL

245
00:12:06,600 --> 00:12:09,000
has uh probably the key provider

246
00:12:09,000 --> 00:12:12,120
mechanism so we just leverage it and

247
00:12:12,120 --> 00:12:15,660
provide us FTX private key provider and

248
00:12:15,660 --> 00:12:18,839
we will have we will utilize the crypto

249
00:12:18,839 --> 00:12:23,399
API toolkit to generate or establish a

250
00:12:23,399 --> 00:12:26,880
sdx environment for us so this is the

251
00:12:26,880 --> 00:12:30,720
detail in the annual side

252
00:12:30,720 --> 00:12:34,620
uh this is the SDI server side so this

253
00:12:34,620 --> 00:12:37,200
is actually running a sdx Enclave the

254
00:12:37,200 --> 00:12:39,720
distributor is exam is running alongside

255
00:12:39,720 --> 00:12:41,519
it

256
00:12:41,519 --> 00:12:43,560
so basically

257
00:12:43,560 --> 00:12:46,139
um you we have local HSM while sdx

258
00:12:46,139 --> 00:12:48,480
enclave and the crypto operations are

259
00:12:48,480 --> 00:12:51,120
happening locally and the credentials

260
00:12:51,120 --> 00:12:54,300
can be synced from remote HSM or locally

261
00:12:54,300 --> 00:12:57,240
generated so for Mutual tis case the

262
00:12:57,240 --> 00:12:59,880
private key is generated locally for the

263
00:12:59,880 --> 00:13:02,579
gateways it can be uploaded from remote

264
00:13:02,579 --> 00:13:05,519
Keystone case dot like your word or you

265
00:13:05,519 --> 00:13:07,920
have your own key key server you can

266
00:13:07,920 --> 00:13:11,940
sync the keys secretly in The Enclave so

267
00:13:11,940 --> 00:13:14,940
for the military tis and Gateway we also

268
00:13:14,940 --> 00:13:17,100
can well they also have the data plan

269
00:13:17,100 --> 00:13:19,920
part and the control plan part so I will

270
00:13:19,920 --> 00:13:24,000
split them and let's take a look at them

271
00:13:24,000 --> 00:13:26,339
one by one

272
00:13:26,339 --> 00:13:28,980
so the first user case is the mutual TS

273
00:13:28,980 --> 00:13:31,320
control plan part this is the picture

274
00:13:31,320 --> 00:13:36,440
for the current istio floor so basically

275
00:13:36,440 --> 00:13:39,560
istio will let you

276
00:13:39,560 --> 00:13:42,420
delegate your C functions to the

277
00:13:42,420 --> 00:13:45,600
external side so to the external CE so

278
00:13:45,600 --> 00:13:48,860
the whole flow is like

279
00:13:48,860 --> 00:13:52,560
first the there is ICL server running

280
00:13:52,560 --> 00:13:55,139
inside the install agent

281
00:13:55,139 --> 00:13:57,200
um

282
00:14:00,200 --> 00:14:03,300
together with each agent this is a whole

283
00:14:03,300 --> 00:14:05,940
is your proxy part so when the the

284
00:14:05,940 --> 00:14:08,660
Eastern proxy part is started it will

285
00:14:08,660 --> 00:14:11,399
generate the private key pair so you can

286
00:14:11,399 --> 00:14:13,620
see this marked in red the private key

287
00:14:13,620 --> 00:14:17,040
is in clear text in memory on the this

288
00:14:17,040 --> 00:14:19,620
is the first step then it will generate

289
00:14:19,620 --> 00:14:21,779
the CSR I mean the Eco agent will

290
00:14:21,779 --> 00:14:24,240
generate the CSR the certificate signing

291
00:14:24,240 --> 00:14:26,579
request and it will send to HCL D and

292
00:14:26,579 --> 00:14:29,700
HCL D will send out the CSR to the

293
00:14:29,700 --> 00:14:32,399
kubernetes API server and the CSR will

294
00:14:32,399 --> 00:14:36,180
finally go into a sea so in our case we

295
00:14:36,180 --> 00:14:39,120
have a CE component is called trusted

296
00:14:39,120 --> 00:14:42,000
certificate service so this service will

297
00:14:42,000 --> 00:14:44,760
get the CSR and assign the search back

298
00:14:44,760 --> 00:14:48,420
so you can see now in Step 7 step 8 and

299
00:14:48,420 --> 00:14:50,339
finally the private key and the third

300
00:14:50,339 --> 00:14:53,399
will be delivered to N1 so now it will

301
00:14:53,399 --> 00:14:55,139
have the private key and the third but

302
00:14:55,139 --> 00:14:58,199
now it's in clear text so this is the

303
00:14:58,199 --> 00:15:00,920
original flow

304
00:15:10,199 --> 00:15:13,380
let's see after our enhancement on

305
00:15:13,380 --> 00:15:18,660
what's the current flow now so here

306
00:15:18,660 --> 00:15:21,240
we can see the I think we have the SDS

307
00:15:21,240 --> 00:15:23,160
server here but it's not running inside

308
00:15:23,160 --> 00:15:25,800
the install agent it is the new

309
00:15:25,800 --> 00:15:28,740
component that we just we newly added so

310
00:15:28,740 --> 00:15:32,519
this as a server is running here so it

311
00:15:32,519 --> 00:15:35,279
has an envelope here so when the awl

312
00:15:35,279 --> 00:15:38,699
sitting alongside the envoy so this will

313
00:15:38,699 --> 00:15:41,639
run you in the simple so when this is

314
00:15:41,639 --> 00:15:45,000
started it will first initialize the sdx

315
00:15:45,000 --> 00:15:47,399
enclave and will generate the pride Key

316
00:15:47,399 --> 00:15:50,579
pair in this Enclave so you can see now

317
00:15:50,579 --> 00:15:53,579
the key has been guided using this

318
00:15:53,579 --> 00:15:56,220
charted execution environment and then

319
00:15:56,220 --> 00:15:59,399
it will generate CSR and the code the

320
00:15:59,399 --> 00:16:03,060
code is some some evidence to prove that

321
00:16:03,060 --> 00:16:05,180
I'm really adjusting the environment

322
00:16:05,180 --> 00:16:06,860
then

323
00:16:06,860 --> 00:16:09,660
comparing with the original CSR the

324
00:16:09,660 --> 00:16:12,860
difference here is the code has been

325
00:16:12,860 --> 00:16:17,220
embedded into the CSR as an extension

326
00:16:17,220 --> 00:16:19,740
so now the CSI has to be generated and

327
00:16:19,740 --> 00:16:22,199
following the original flow coming to

328
00:16:22,199 --> 00:16:25,260
The Trusted certificate service the

329
00:16:25,260 --> 00:16:26,639
charges of physical service will

330
00:16:26,639 --> 00:16:29,339
recognize this extension and extract the

331
00:16:29,339 --> 00:16:31,740
code and it will generate a code

332
00:16:31,740 --> 00:16:34,800
technician customer results so we have

333
00:16:34,800 --> 00:16:37,560
the code authentication controller here

334
00:16:37,560 --> 00:16:39,320
so it will

335
00:16:39,320 --> 00:16:43,759
it will get the code and call our Intel

336
00:16:43,759 --> 00:16:46,440
alternative service to do the temptation

337
00:16:46,440 --> 00:16:49,920
to make sure this is really a trusted

338
00:16:49,920 --> 00:16:54,899
Hardware it's a very healthy and secure

339
00:16:54,899 --> 00:16:57,600
environment then after this adaptation

340
00:16:57,600 --> 00:17:01,800
has been done the TCS I mean The Trusted

341
00:17:01,800 --> 00:17:03,839
scientific service it will assign the

342
00:17:03,839 --> 00:17:06,780
setback so if the testation failed you

343
00:17:06,780 --> 00:17:09,240
will you cannot get the setback so so

344
00:17:09,240 --> 00:17:11,939
you can see all these all this change is

345
00:17:11,939 --> 00:17:15,660
is very secured and finally the the the

346
00:17:15,660 --> 00:17:18,419
third will come back

347
00:17:18,419 --> 00:17:20,939
um and then you can see here

348
00:17:20,939 --> 00:17:24,419
the the priority actually in this step

349
00:17:24,419 --> 00:17:27,780
it has been sealed using the ctk token

350
00:17:27,780 --> 00:17:30,419
file because this these two enclaves are

351
00:17:30,419 --> 00:17:33,000
sitting in the simple so it can get the

352
00:17:33,000 --> 00:17:35,880
sealed key to into his enclave and

353
00:17:35,880 --> 00:17:39,179
because the in this channel in this

354
00:17:39,179 --> 00:17:41,580
green channel uh the certificate and

355
00:17:41,580 --> 00:17:44,520
priority key config we will generate the

356
00:17:44,520 --> 00:17:47,280
related information so now the envelope

357
00:17:47,280 --> 00:17:49,740
will get the sgx private key provider

358
00:17:49,740 --> 00:17:52,260
information and the sender setback so

359
00:17:52,260 --> 00:17:54,660
this is the whole flow after our

360
00:17:54,660 --> 00:17:57,260
enhancement

361
00:17:58,260 --> 00:18:01,140
so you can see now it also leverages the

362
00:18:01,140 --> 00:18:03,900
external certificate Authority and the

363
00:18:03,900 --> 00:18:06,179
private case in the whole in the whole

364
00:18:06,179 --> 00:18:09,660
past is not it's never exposed in clear

365
00:18:09,660 --> 00:18:13,280
text and the third is only issued if the

366
00:18:13,280 --> 00:18:16,320
authentication passed and the crypto

367
00:18:16,320 --> 00:18:20,299
operations can be done locally

368
00:18:20,460 --> 00:18:24,059
so this is another user case the Gateway

369
00:18:24,059 --> 00:18:26,160
case so you can see

370
00:18:26,160 --> 00:18:28,140
um from the East Upstream the Gateway

371
00:18:28,140 --> 00:18:31,320
case to upload I mean to make the key

372
00:18:31,320 --> 00:18:33,960
available to the envelope is a long

373
00:18:33,960 --> 00:18:36,120
journey so you can see due to time

374
00:18:36,120 --> 00:18:39,299
limitation I do not want do not I cannot

375
00:18:39,299 --> 00:18:41,700
go through the details but if you are

376
00:18:41,700 --> 00:18:43,760
interested you can you know

377
00:18:43,760 --> 00:18:46,980
take a look at this picture but

378
00:18:46,980 --> 00:18:49,980
basically you can see in all these steps

379
00:18:49,980 --> 00:18:52,500
this product key is in clear text for

380
00:18:52,500 --> 00:18:54,720
example in these steps in the first step

381
00:18:54,720 --> 00:18:57,120
the admin uploaded the private key and

382
00:18:57,120 --> 00:19:00,179
the third in the secret so anyone can if

383
00:19:00,179 --> 00:19:02,760
has the authority he can get the secret

384
00:19:02,760 --> 00:19:05,039
and he can get the pride Key so it's

385
00:19:05,039 --> 00:19:07,080
really dangerous and it's the long

386
00:19:07,080 --> 00:19:08,700
journey you know in the history in the

387
00:19:08,700 --> 00:19:11,039
Easter agent and finally involved all

388
00:19:11,039 --> 00:19:13,140
this in clear text

389
00:19:13,140 --> 00:19:16,980
so this is the the floor after our

390
00:19:16,980 --> 00:19:20,820
enhancement so um you can see here this

391
00:19:20,820 --> 00:19:23,400
first step is get a great Gateway

392
00:19:23,400 --> 00:19:27,419
customer results uh and then the after

393
00:19:27,419 --> 00:19:30,059
the the SDS server is also running here

394
00:19:30,059 --> 00:19:32,280
so you can see that yes server is

395
00:19:32,280 --> 00:19:35,100
actually the same SDI server because the

396
00:19:35,100 --> 00:19:38,340
we we using the same as their server so

397
00:19:38,340 --> 00:19:41,760
so the both the Gateway and the mtis

398
00:19:41,760 --> 00:19:44,900
case so that your server will has to be

399
00:19:44,900 --> 00:19:48,559
moved out from ucld and it's coming here

400
00:19:48,559 --> 00:19:54,059
and from this land Journey it will come

401
00:19:54,059 --> 00:19:58,280
into the Enclave so maybe I can explain

402
00:19:58,280 --> 00:20:00,299
further because

403
00:20:00,299 --> 00:20:06,480
um this uh this little complex so first

404
00:20:06,480 --> 00:20:08,880
um the the mean creates the Gateway

405
00:20:08,880 --> 00:20:11,880
custom resource and then the SDS server

406
00:20:11,880 --> 00:20:14,340
will watch this customer house and after

407
00:20:14,340 --> 00:20:17,039
that it will initialize the sdx and clue

408
00:20:17,039 --> 00:20:19,860
it will create the key pair but this key

409
00:20:19,860 --> 00:20:23,220
pair is not you know the final key pair

410
00:20:23,220 --> 00:20:25,320
for Android just using two ranking

411
00:20:25,320 --> 00:20:28,340
user's private key here so the TMI here

412
00:20:28,340 --> 00:20:31,679
actually is a key storage server so

413
00:20:31,679 --> 00:20:34,559
basically you can replace it using your

414
00:20:34,559 --> 00:20:38,700
with your own key storage server so um

415
00:20:38,700 --> 00:20:41,039
you can see in the this is the first

416
00:20:41,039 --> 00:20:43,559
step the second step and then we will

417
00:20:43,559 --> 00:20:46,380
generate a code like previous keys and

418
00:20:46,380 --> 00:20:48,960
the public key here and then the

419
00:20:48,960 --> 00:20:51,240
attention controller will help us do the

420
00:20:51,240 --> 00:20:53,580
attestation meanwhile

421
00:20:53,580 --> 00:20:55,860
because in the Gateway custom results

422
00:20:55,860 --> 00:20:57,780
you will give the key Handler

423
00:20:57,780 --> 00:21:01,320
information in the kmia here or your key

424
00:21:01,320 --> 00:21:05,340
storage so you can so the attendance

425
00:21:05,340 --> 00:21:07,380
controller will help you wrap the

426
00:21:07,380 --> 00:21:09,720
private key using the public key

427
00:21:09,720 --> 00:21:12,660
generated here so it means only this guy

428
00:21:12,660 --> 00:21:15,179
this XCX Enclave guide because the

429
00:21:15,179 --> 00:21:17,700
private key is sitting here so only him

430
00:21:17,700 --> 00:21:20,640
can unwrap the key so this makes sure

431
00:21:20,640 --> 00:21:23,640
that the whole chain is secured so now

432
00:21:23,640 --> 00:21:26,940
after the left key coming here and it

433
00:21:26,940 --> 00:21:29,280
will be arrived and then finally it will

434
00:21:29,280 --> 00:21:32,580
come into this animal guide so this is a

435
00:21:32,580 --> 00:21:34,919
whole flow let me know if you have any

436
00:21:34,919 --> 00:21:37,220
questions

437
00:21:40,919 --> 00:21:43,380
um so yeah previously they are in clear

438
00:21:43,380 --> 00:21:46,140
text and the private keys are uploaded

439
00:21:46,140 --> 00:21:47,580
externally

440
00:21:47,580 --> 00:21:51,419
um so after it's also uh the priority

441
00:21:51,419 --> 00:21:54,419
case is also coming off site but the

442
00:21:54,419 --> 00:21:57,360
whole upload is secured and the private

443
00:21:57,360 --> 00:22:00,179
key is never exposed offside in clear

444
00:22:00,179 --> 00:22:03,780
text and the keys only get updated if

445
00:22:03,780 --> 00:22:06,299
the attestation passed and finally the

446
00:22:06,299 --> 00:22:09,299
crypto option it happened locally

447
00:22:09,299 --> 00:22:11,640
so let's take a look at the data plan

448
00:22:11,640 --> 00:22:14,520
part the development part means when the

449
00:22:14,520 --> 00:22:17,460
traffic coming how it happens so this is

450
00:22:17,460 --> 00:22:19,980
the original how animal works so when

451
00:22:19,980 --> 00:22:22,740
there is a new https request comes the

452
00:22:22,740 --> 00:22:25,020
TRS hash it will happen here so the

453
00:22:25,020 --> 00:22:27,900
borrowing access Library we are using

454
00:22:27,900 --> 00:22:30,539
the private key memory to do the send or

455
00:22:30,539 --> 00:22:32,400
decrypt operation and then return the

456
00:22:32,400 --> 00:22:36,780
result back now because M1 has The sdx

457
00:22:36,780 --> 00:22:39,299
Enclave here and we have the sdx private

458
00:22:39,299 --> 00:22:42,600
key provider here so now after after we

459
00:22:42,600 --> 00:22:45,539
get the TRS hashing request this request

460
00:22:45,539 --> 00:22:47,580
will be dedicated to sdx gravity

461
00:22:47,580 --> 00:22:50,159
provider and the provider will send the

462
00:22:50,159 --> 00:22:52,919
required to the local sdx enclave and

463
00:22:52,919 --> 00:22:55,740
other science and decrypt operation will

464
00:22:55,740 --> 00:22:58,740
happen in this trusted environment and

465
00:22:58,740 --> 00:23:00,539
then finally it will get the results

466
00:23:00,539 --> 00:23:05,100
back so um this is very secure and

467
00:23:05,100 --> 00:23:07,940
because the operation has happened

468
00:23:07,940 --> 00:23:10,799
locally so thought the performance

469
00:23:10,799 --> 00:23:14,480
penalty is very little

470
00:23:18,320 --> 00:23:20,700
the other case is the certificate

471
00:23:20,700 --> 00:23:23,520
Authority case so

472
00:23:23,520 --> 00:23:27,500
um so in in the sake in the same case

473
00:23:27,500 --> 00:23:31,220
the C also needs a private key here so

474
00:23:31,220 --> 00:23:33,960
our solution is called trusted

475
00:23:33,960 --> 00:23:36,419
certificate service so it can handle

476
00:23:36,419 --> 00:23:38,760
incoming a certificate signing request

477
00:23:38,760 --> 00:23:41,000
so in this

478
00:23:41,000 --> 00:23:43,860
just the scientific service it also has

479
00:23:43,860 --> 00:23:47,580
a sdx Enclave so it is about two cases

480
00:23:47,580 --> 00:23:51,780
self send search of other external

481
00:23:51,780 --> 00:23:55,020
uploaded CD case so for the first case

482
00:23:55,020 --> 00:23:57,179
the say the private key will generated

483
00:23:57,179 --> 00:23:59,580
locally and we are serving and using

484
00:23:59,580 --> 00:24:01,500
this product key to handle the incoming

485
00:24:01,500 --> 00:24:05,460
csrs in the later case the price key

486
00:24:05,460 --> 00:24:07,320
will be uploaded the other side from

487
00:24:07,320 --> 00:24:09,659
outside world so a little similar to the

488
00:24:09,659 --> 00:24:11,580
Gateway case we will also do the

489
00:24:11,580 --> 00:24:13,799
authentication and directly and unwrap

490
00:24:13,799 --> 00:24:16,520
the key so

491
00:24:16,799 --> 00:24:19,740
uh this is the detail of the flow for

492
00:24:19,740 --> 00:24:22,380
for the for this so the the upper part

493
00:24:22,380 --> 00:24:24,840
is how we upload the case and the latter

494
00:24:24,840 --> 00:24:27,840
part is how you know if you leverage

495
00:24:27,840 --> 00:24:31,380
data in HCL D how a easier how you can

496
00:24:31,380 --> 00:24:34,340
leverage it

497
00:24:34,559 --> 00:24:36,900
so this is the thumb sample yaml file

498
00:24:36,900 --> 00:24:39,960
that you can leverage this this solution

499
00:24:39,960 --> 00:24:40,559
um

500
00:24:40,559 --> 00:24:41,880
so

501
00:24:41,880 --> 00:24:43,440
um actually

502
00:24:43,440 --> 00:24:45,900
um this solution you know the HSM server

503
00:24:45,900 --> 00:24:47,880
we have already open source in the

504
00:24:47,880 --> 00:24:51,179
install ecosystem under that GitHub repo

505
00:24:51,179 --> 00:24:53,700
and all the armor changes also in public

506
00:24:53,700 --> 00:24:56,760
reports so you can just grab that this

507
00:24:56,760 --> 00:25:00,120
that Ripple and using dcmo file to have

508
00:25:00,120 --> 00:25:03,179
a try if you have interest

509
00:25:03,179 --> 00:25:05,700
so uh some future steps we want to take

510
00:25:05,700 --> 00:25:08,460
you know um actually there are a lot of

511
00:25:08,460 --> 00:25:11,039
cloud HSM here we want to do some

512
00:25:11,039 --> 00:25:14,700
adapter here that can you know if the if

513
00:25:14,700 --> 00:25:18,240
your keys are stored in this area and

514
00:25:18,240 --> 00:25:21,000
your application you know it is remote

515
00:25:21,000 --> 00:25:23,580
to this one then we can have adapter

516
00:25:23,580 --> 00:25:26,159
here to help you sync the private keys

517
00:25:26,159 --> 00:25:28,620
of any credential information in your

518
00:25:28,620 --> 00:25:31,620
local distribution HSM then you can do

519
00:25:31,620 --> 00:25:34,860
the operation locally so we we hope we

520
00:25:34,860 --> 00:25:38,760
can provide a unified API for the users

521
00:25:38,760 --> 00:25:41,820
so whether your application is Young AWS

522
00:25:41,820 --> 00:25:43,279
or

523
00:25:43,279 --> 00:25:46,380
Microsoft you can use the unified API

524
00:25:46,380 --> 00:25:49,220
and get the benefit for the digital HSM

525
00:25:49,220 --> 00:25:51,960
and then you know all the crypto

526
00:25:51,960 --> 00:25:55,460
operations can happen locally

527
00:25:57,659 --> 00:26:01,440
uh these are some GitHub repo we used so

528
00:26:01,440 --> 00:26:04,919
the first one is the Easter rainbow

529
00:26:04,919 --> 00:26:07,500
um the second one is M1 part and then

530
00:26:07,500 --> 00:26:10,919
the is is silver part of this is on the

531
00:26:10,919 --> 00:26:15,419
Easter report this is the same one this

532
00:26:15,419 --> 00:26:18,299
is our Intel case storage reference

533
00:26:18,299 --> 00:26:20,820
architecture but actually you can use in

534
00:26:20,820 --> 00:26:22,700
your own key storage server

535
00:26:22,700 --> 00:26:26,640
and this is the C uh this is the C but

536
00:26:26,640 --> 00:26:28,320
this is the attention controller part

537
00:26:28,320 --> 00:26:32,039
and we also have a ehsm solution so it's

538
00:26:32,039 --> 00:26:34,860
open source if it's Auto leveraging is

539
00:26:34,860 --> 00:26:38,640
exactly so you can have a try and this

540
00:26:38,640 --> 00:26:40,740
you know for the Easter part we actually

541
00:26:40,740 --> 00:26:43,740
rely on the external C function so this

542
00:26:43,740 --> 00:26:46,820
is the reference document

543
00:26:48,600 --> 00:26:50,039
okay

544
00:26:50,039 --> 00:26:54,000
um yeah so uh I hope you can explore and

545
00:26:54,000 --> 00:26:56,220
join us and you know all this digital

546
00:26:56,220 --> 00:26:59,220
Hub report is public and if you have any

547
00:26:59,220 --> 00:27:01,980
questions or issues um you can just

548
00:27:01,980 --> 00:27:05,159
submit it um an apis are just are very

549
00:27:05,159 --> 00:27:06,659
welcome

550
00:27:06,659 --> 00:27:10,440
yeah that's all thank you

551
00:27:10,440 --> 00:27:13,580
thank you thank you very much

