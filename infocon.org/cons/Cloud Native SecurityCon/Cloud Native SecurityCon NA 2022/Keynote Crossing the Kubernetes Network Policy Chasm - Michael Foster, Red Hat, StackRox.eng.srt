1
00:00:00,900 --> 00:00:02,639
awesome folks

2
00:00:02,639 --> 00:00:04,440
um thank you Andrew for the amazing

3
00:00:04,440 --> 00:00:07,620
opening remarks and next we have our

4
00:00:07,620 --> 00:00:10,260
keynote uh from Michael Foster Michael

5
00:00:10,260 --> 00:00:12,300
will be talking about crossing the

6
00:00:12,300 --> 00:00:15,780
kubernetes network policy jasm so let's

7
00:00:15,780 --> 00:00:17,520
hear it from Michael

8
00:00:17,520 --> 00:00:20,520
I got hope this is working

9
00:00:20,520 --> 00:00:23,100
hello hello yes crosnicasm building a

10
00:00:23,100 --> 00:00:25,199
bridge whatever analogy you want to use

11
00:00:25,199 --> 00:00:28,260
as he said I'm Michael Foster I am the

12
00:00:28,260 --> 00:00:30,240
community lead for the stack Rocks open

13
00:00:30,240 --> 00:00:33,420
source project I'm also a pmm at Red Hat

14
00:00:33,420 --> 00:00:35,040
and looking forward to an exciting week

15
00:00:35,040 --> 00:00:36,719
very happy actually I'm speaking first

16
00:00:36,719 --> 00:00:38,520
right and get it out of the way you're

17
00:00:38,520 --> 00:00:39,899
very nice

18
00:00:39,899 --> 00:00:42,420
okay so let's first talk about why the

19
00:00:42,420 --> 00:00:45,300
chasm exists Network policies today are

20
00:00:45,300 --> 00:00:47,160
very efficient and managing pod to pod

21
00:00:47,160 --> 00:00:48,899
communication Network rules for

22
00:00:48,899 --> 00:00:52,140
namespaces setting various IP blocks

23
00:00:52,140 --> 00:00:53,879
they're also additive permissions right

24
00:00:53,879 --> 00:00:55,680
we default deny everything and then we

25
00:00:55,680 --> 00:00:58,020
add the network policies on top to allow

26
00:00:58,020 --> 00:01:00,719
traffic now there is a pretty serious

27
00:01:00,719 --> 00:01:03,840
challenge with this process

28
00:01:03,840 --> 00:01:06,900
because the rules are additive the

29
00:01:06,900 --> 00:01:08,280
communication between the teams tend to

30
00:01:08,280 --> 00:01:10,439
break down the developers need specific

31
00:01:10,439 --> 00:01:12,360
rules for their applications the

32
00:01:12,360 --> 00:01:13,680
security teams don't necessarily know

33
00:01:13,680 --> 00:01:15,659
that maybe the network security team

34
00:01:15,659 --> 00:01:18,119
doesn't even know what kubernetes is and

35
00:01:18,119 --> 00:01:19,380
they're trying to tell you what ports

36
00:01:19,380 --> 00:01:21,119
and protocols you can and can't use and

37
00:01:21,119 --> 00:01:23,520
it isn't until the dev test or even

38
00:01:23,520 --> 00:01:25,020
staging environments that the developers

39
00:01:25,020 --> 00:01:27,479
find this out so we want to be able to

40
00:01:27,479 --> 00:01:29,759
have a solution that can fix the human

41
00:01:29,759 --> 00:01:31,920
problem and say where we can actually

42
00:01:31,920 --> 00:01:33,540
leverage the technology like this today

43
00:01:33,540 --> 00:01:36,299
because as they say kubernetes Network

44
00:01:36,299 --> 00:01:37,860
policy is more of a communication

45
00:01:37,860 --> 00:01:41,100
challenge with a powerful tool

46
00:01:41,100 --> 00:01:43,799
all right so what I and the MP guard

47
00:01:43,799 --> 00:01:46,380
project propose is a flexible workflow

48
00:01:46,380 --> 00:01:49,259
for the devsec organizations a process

49
00:01:49,259 --> 00:01:51,360
where the security teams can define a

50
00:01:51,360 --> 00:01:52,740
system policy for their kubernetes

51
00:01:52,740 --> 00:01:55,140
clusters and teams different ports and

52
00:01:55,140 --> 00:01:57,360
protocols what's allowed what isn't

53
00:01:57,360 --> 00:01:59,820
where developers operators or automated

54
00:01:59,820 --> 00:02:02,700
systems can generate kubernetes policies

55
00:02:02,700 --> 00:02:04,560
and validate them against the security

56
00:02:04,560 --> 00:02:08,220
team automatically and asynchronously

57
00:02:08,220 --> 00:02:10,199
and then lastly we want to deploy and

58
00:02:10,199 --> 00:02:12,720
test from git making updates in our

59
00:02:12,720 --> 00:02:14,760
automated pipelines anyway so if the

60
00:02:14,760 --> 00:02:16,620
security team updates it the developers

61
00:02:16,620 --> 00:02:19,020
will know exactly what ports and

62
00:02:19,020 --> 00:02:21,599
policies have changed

63
00:02:21,599 --> 00:02:23,580
and so the MP guard project was designed

64
00:02:23,580 --> 00:02:25,379
with this workflow in mind let's take a

65
00:02:25,379 --> 00:02:26,879
look

66
00:02:26,879 --> 00:02:28,980
so the mpguard project seeps the simple

67
00:02:28,980 --> 00:02:30,780
seeks to simplify the experience of

68
00:02:30,780 --> 00:02:33,180
creating and maintaining the K-8 Network

69
00:02:33,180 --> 00:02:35,459
policies and to help meet this challenge

70
00:02:35,459 --> 00:02:37,260
we want to automate the generation

71
00:02:37,260 --> 00:02:39,239
without having to run the application

72
00:02:39,239 --> 00:02:41,459
code so we want to integrate into the

73
00:02:41,459 --> 00:02:44,220
application's CI CD pipeline ensuring

74
00:02:44,220 --> 00:02:46,140
Network policies get gets updated

75
00:02:46,140 --> 00:02:48,000
whenever the required cluster

76
00:02:48,000 --> 00:02:49,860
connectivity changes

77
00:02:49,860 --> 00:02:52,200
so you can see it there first

78
00:02:52,200 --> 00:02:54,780
for the workflow the automatic synthesis

79
00:02:54,780 --> 00:02:57,000
stage it takes into the application's

80
00:02:57,000 --> 00:02:58,500
configuration files your deployment

81
00:02:58,500 --> 00:03:00,660
manifests your services things like that

82
00:03:00,660 --> 00:03:02,700
we also want to pair it up with maybe

83
00:03:02,700 --> 00:03:04,500
what's the typical traffic that you're

84
00:03:04,500 --> 00:03:06,180
seeing and the security teams can do

85
00:03:06,180 --> 00:03:08,099
this All automatically without the

86
00:03:08,099 --> 00:03:10,500
developer being involved or if the

87
00:03:10,500 --> 00:03:11,940
developer wants to generate them first

88
00:03:11,940 --> 00:03:13,560
as well you can generate and check them

89
00:03:13,560 --> 00:03:15,300
in

90
00:03:15,300 --> 00:03:16,500
so

91
00:03:16,500 --> 00:03:19,500
the first stage is of the flow also

92
00:03:19,500 --> 00:03:21,180
proposes the updated Network policy

93
00:03:21,180 --> 00:03:23,040
connectivity restrictions in the form of

94
00:03:23,040 --> 00:03:24,720
network policy resources

95
00:03:24,720 --> 00:03:27,239
second the review and modify stage so

96
00:03:27,239 --> 00:03:28,620
the proposed network activity is

97
00:03:28,620 --> 00:03:30,239
presented to the devops team for the

98
00:03:30,239 --> 00:03:32,280
review this presentation can be graphic

99
00:03:32,280 --> 00:03:34,860
a concise textual report or simply the

100
00:03:34,860 --> 00:03:37,140
actual Network policy yaml file so you

101
00:03:37,140 --> 00:03:39,840
think about it security team goes sets

102
00:03:39,840 --> 00:03:41,580
specific ports and policies that they

103
00:03:41,580 --> 00:03:44,400
allow the developer or operations team

104
00:03:44,400 --> 00:03:46,200
can just automatically check it against

105
00:03:46,200 --> 00:03:47,700
what they already have in their manifest

106
00:03:47,700 --> 00:03:49,799
generate a network policy we can check

107
00:03:49,799 --> 00:03:51,900
that in we can validate it against it if

108
00:03:51,900 --> 00:03:53,580
we get the green light then it goes to

109
00:03:53,580 --> 00:03:55,980
test if it doesn't maybe it breaks the

110
00:03:55,980 --> 00:03:57,840
pipeline there's a lot of flexibility in

111
00:03:57,840 --> 00:03:59,760
how you want to bring this into your

112
00:03:59,760 --> 00:04:01,200
workflow

113
00:04:01,200 --> 00:04:03,360
so again users can make changes to the

114
00:04:03,360 --> 00:04:04,980
proposed connectivity and then these

115
00:04:04,980 --> 00:04:06,959
changes can be automatically updated

116
00:04:06,959 --> 00:04:08,879
let's say the security team has decided

117
00:04:08,879 --> 00:04:10,860
a certain Port is not allowed and you

118
00:04:10,860 --> 00:04:12,840
have a massive organization with a lot

119
00:04:12,840 --> 00:04:14,519
of clusters well then we need to make a

120
00:04:14,519 --> 00:04:15,720
change and make sure that all of our

121
00:04:15,720 --> 00:04:17,760
Network policies across are validated we

122
00:04:17,760 --> 00:04:19,798
can do this automatically in a CI CD

123
00:04:19,798 --> 00:04:21,238
pipeline

124
00:04:21,238 --> 00:04:23,340
so for that workflow we want to be able

125
00:04:23,340 --> 00:04:25,500
to help simplify and scale it I know

126
00:04:25,500 --> 00:04:27,320
it's like the best buzzword ever

127
00:04:27,320 --> 00:04:30,419
but really it's about allowing the

128
00:04:30,419 --> 00:04:32,340
operations and devops teams to have the

129
00:04:32,340 --> 00:04:33,900
flexibility of how they implement it

130
00:04:33,900 --> 00:04:35,820
because we want the security teams to

131
00:04:35,820 --> 00:04:37,440
feel safe in the applications that are

132
00:04:37,440 --> 00:04:39,060
running

133
00:04:39,060 --> 00:04:40,919
now to sum it up I'll keep it quick

134
00:04:40,919 --> 00:04:42,300
because it's early Monday morning and

135
00:04:42,300 --> 00:04:43,919
the coffee's kicking in so if you'd like

136
00:04:43,919 --> 00:04:45,660
to see the project in action I'll be

137
00:04:45,660 --> 00:04:47,580
outside at the red hat Booth you can

138
00:04:47,580 --> 00:04:49,320
also download the stack Rocks open

139
00:04:49,320 --> 00:04:51,240
source platform is free to use it has

140
00:04:51,240 --> 00:04:53,280
the developer preview flag in action

141
00:04:53,280 --> 00:04:54,720
right now if you want to check it out

142
00:04:54,720 --> 00:04:57,360
again like I said free to use and you

143
00:04:57,360 --> 00:04:58,500
can also take a look at the MP guard

144
00:04:58,500 --> 00:05:00,900
project it's a project on its own as

145
00:05:00,900 --> 00:05:03,360
well and then I know we have a couple

146
00:05:03,360 --> 00:05:04,680
other people I want to give a shout out

147
00:05:04,680 --> 00:05:06,240
to and Luke Heinz is in here he's doing

148
00:05:06,240 --> 00:05:08,940
six store con tomorrow at 9 15. I'll be

149
00:05:08,940 --> 00:05:11,580
there checking him out too and again

150
00:05:11,580 --> 00:05:12,900
I'll be at the red hat Booth outside if

151
00:05:12,900 --> 00:05:14,100
you want to learn more and see it in

152
00:05:14,100 --> 00:05:16,440
action but thank you so much everyone

153
00:05:16,440 --> 00:05:21,870
[Applause]

