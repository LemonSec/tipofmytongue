1
00:00:00,000 --> 00:00:02,220
hey y'all hope you had a good first day

2
00:00:02,220 --> 00:00:04,200
here in Detroit we're having a lot of

3
00:00:04,200 --> 00:00:06,480
fun here we're going to probably I'm

4
00:00:06,480 --> 00:00:08,400
probably not going to be too long

5
00:00:08,400 --> 00:00:09,780
um but like I said my name is Cole

6
00:00:09,780 --> 00:00:12,059
Kennedy I'm the founder CEO of testify

7
00:00:12,059 --> 00:00:13,440
SEC

8
00:00:13,440 --> 00:00:16,020
um my co-found over there Mikhail he uh

9
00:00:16,020 --> 00:00:17,699
he gave a talk earlier on archivist if

10
00:00:17,699 --> 00:00:19,500
you didn't see that I'll be showing up a

11
00:00:19,500 --> 00:00:21,359
little bit in this in this talk so I

12
00:00:21,359 --> 00:00:23,279
encourage you to go back to the the feed

13
00:00:23,279 --> 00:00:24,779
and go ahead and take a look at that

14
00:00:24,779 --> 00:00:26,820
might add some context

15
00:00:26,820 --> 00:00:28,920
so at testify Sac we're building a

16
00:00:28,920 --> 00:00:30,900
platform that enables Enterprise to

17
00:00:30,900 --> 00:00:34,140
verify the Integrity compliance and

18
00:00:34,140 --> 00:00:36,780
trustworthiness of their software

19
00:00:36,780 --> 00:00:39,540
um and we're doing all this uh with open

20
00:00:39,540 --> 00:00:41,100
source software with a thin layer

21
00:00:41,100 --> 00:00:43,320
proprietary software on top

22
00:00:43,320 --> 00:00:46,079
and really what the problem we see is

23
00:00:46,079 --> 00:00:48,539
that ever since we started creating

24
00:00:48,539 --> 00:00:51,840
software we hand that software off to uh

25
00:00:51,840 --> 00:00:54,480
production right there's really no way

26
00:00:54,480 --> 00:00:56,820
to tell what was in that software where

27
00:00:56,820 --> 00:00:58,800
it came from what was in it what tools

28
00:00:58,800 --> 00:01:01,440
are used to build it right and so it's

29
00:01:01,440 --> 00:01:04,140
just a lot of magic in security and

30
00:01:04,140 --> 00:01:07,020
compliance engineers and administrators

31
00:01:07,020 --> 00:01:09,479
are really struggling with this

32
00:01:09,479 --> 00:01:10,920
especially with a lot of the new

33
00:01:10,920 --> 00:01:12,600
regulations are coming out right you

34
00:01:12,600 --> 00:01:13,400
know

35
00:01:13,400 --> 00:01:17,040
there's a new ndaa that's about to get

36
00:01:17,040 --> 00:01:19,680
signed into law that says no software

37
00:01:19,680 --> 00:01:21,540
can have vulnerabilities right and

38
00:01:21,540 --> 00:01:24,000
there's ssdf that's going to require you

39
00:01:24,000 --> 00:01:26,280
to certify all the steps of your supply

40
00:01:26,280 --> 00:01:28,439
chain and make attestations about that

41
00:01:28,439 --> 00:01:31,920
if you're a small company that tries to

42
00:01:31,920 --> 00:01:33,000
sell software to the federal government

43
00:01:33,000 --> 00:01:35,400
this is going to be really really tough

44
00:01:35,400 --> 00:01:37,740
for you right it takes a lot of manual

45
00:01:37,740 --> 00:01:40,020
labor to produce these reports and we're

46
00:01:40,020 --> 00:01:41,640
really trying to help these companies

47
00:01:41,640 --> 00:01:44,040
with this type of a burden through

48
00:01:44,040 --> 00:01:47,340
Automation in attestation

49
00:01:47,340 --> 00:01:50,579
so what I'm presenting on today is

50
00:01:50,579 --> 00:01:53,700
verifiable at the station's uh of ebpf

51
00:01:53,700 --> 00:01:56,220
traces right with witness we can do a

52
00:01:56,220 --> 00:01:57,540
lot of different types of attestations

53
00:01:57,540 --> 00:02:00,780
in in this tester is uh experimental

54
00:02:00,780 --> 00:02:02,880
it's not in the main branch yet

55
00:02:02,880 --> 00:02:03,479
um

56
00:02:03,479 --> 00:02:05,759
but why do we want to do it well we want

57
00:02:05,759 --> 00:02:08,520
to find hidden cves if we look at the

58
00:02:08,520 --> 00:02:11,360
log4 Shell or the heart bleed attack

59
00:02:11,360 --> 00:02:14,580
those artifacts that were vulnerable to

60
00:02:14,580 --> 00:02:16,980
those attacks there was no way to tell

61
00:02:16,980 --> 00:02:19,200
that they're vulnerable just by looking

62
00:02:19,200 --> 00:02:22,080
at the artifact itself later on some

63
00:02:22,080 --> 00:02:23,760
tools did come out that kind of helped

64
00:02:23,760 --> 00:02:25,140
with this let you kind of sift through

65
00:02:25,140 --> 00:02:28,200
the things but when a cves just announce

66
00:02:28,200 --> 00:02:30,959
like these what tools do you have as a

67
00:02:30,959 --> 00:02:33,300
Security administrator to find out where

68
00:02:33,300 --> 00:02:35,580
you're affected in your inventory

69
00:02:35,580 --> 00:02:36,120
um

70
00:02:36,120 --> 00:02:37,920
there was nothing now we have a little

71
00:02:37,920 --> 00:02:40,260
bit more uh you know we got s-bombs and

72
00:02:40,260 --> 00:02:41,580
we have some other tools that can help

73
00:02:41,580 --> 00:02:43,980
out with this but really it's very

74
00:02:43,980 --> 00:02:45,060
difficult

75
00:02:45,060 --> 00:02:47,400
number two we want to thwart malicious

76
00:02:47,400 --> 00:02:50,400
actors uh solarwinds had a really bad

77
00:02:50,400 --> 00:02:51,720
time

78
00:02:51,720 --> 00:02:52,980
um I think we all remember what happened

79
00:02:52,980 --> 00:02:55,620
with them right their build system was

80
00:02:55,620 --> 00:02:57,900
completely compromised

81
00:02:57,900 --> 00:02:59,879
um so they were shipping off signed

82
00:02:59,879 --> 00:03:02,519
artifacts that their customers trusted

83
00:03:02,519 --> 00:03:04,800
that had malicious code inserted into it

84
00:03:04,800 --> 00:03:07,800
what happened was their build system was

85
00:03:07,800 --> 00:03:09,360
compromised to the point where there was

86
00:03:09,360 --> 00:03:10,920
an agent running on their build system

87
00:03:10,920 --> 00:03:13,739
that every time a compiler kitchen

88
00:03:13,739 --> 00:03:15,440
action kicked off

89
00:03:15,440 --> 00:03:18,720
it looked for a specific file and

90
00:03:18,720 --> 00:03:20,099
replaced it with its own version

91
00:03:20,099 --> 00:03:22,260
therefore therefore injecting that

92
00:03:22,260 --> 00:03:25,140
Trojan and there's really no way by

93
00:03:25,140 --> 00:03:27,300
looking at that artifact that you can

94
00:03:27,300 --> 00:03:30,120
tell that that happened right if there

95
00:03:30,120 --> 00:03:33,140
is a paper Reflections on trusting trust

96
00:03:33,140 --> 00:03:36,000
written a long time ago right so we've

97
00:03:36,000 --> 00:03:37,620
known about this for a long time we just

98
00:03:37,620 --> 00:03:40,260
haven't done anything until recently

99
00:03:40,260 --> 00:03:43,560
and then finally automated uh we want to

100
00:03:43,560 --> 00:03:45,599
automate pipeline compliance right one

101
00:03:45,599 --> 00:03:47,040
of the biggest burdens we have is not

102
00:03:47,040 --> 00:03:48,480
necessarily that making sure

103
00:03:48,480 --> 00:03:50,519
everything's secure but making sure the

104
00:03:50,519 --> 00:03:52,080
people that care that it's secure have

105
00:03:52,080 --> 00:03:53,879
the information that they need to report

106
00:03:53,879 --> 00:03:57,060
up to Executives that say hey yeah this

107
00:03:57,060 --> 00:03:59,760
is good or your customers right when a

108
00:03:59,760 --> 00:04:02,280
salesperson is engaging with their

109
00:04:02,280 --> 00:04:04,260
customers the first thing that a high

110
00:04:04,260 --> 00:04:05,879
compliance high risk organization is

111
00:04:05,879 --> 00:04:07,459
going to do is ask you to make

112
00:04:07,459 --> 00:04:10,260
attestations about your software and

113
00:04:10,260 --> 00:04:11,760
this is really tough to do if you're a

114
00:04:11,760 --> 00:04:13,080
small company just trying to ship

115
00:04:13,080 --> 00:04:14,640
features

116
00:04:14,640 --> 00:04:17,820
um so at testify Sac what we want to do

117
00:04:17,820 --> 00:04:20,279
is three things we want to count for all

118
00:04:20,279 --> 00:04:22,560
the build materials everything that goes

119
00:04:22,560 --> 00:04:25,680
into a build we want to account for that

120
00:04:25,680 --> 00:04:27,360
we want to account for all the build

121
00:04:27,360 --> 00:04:30,000
processes if you do a static analysis

122
00:04:30,000 --> 00:04:32,880
test on your on your pipeline we want to

123
00:04:32,880 --> 00:04:34,500
have that information be let you deliver

124
00:04:34,500 --> 00:04:37,800
that to your customers right if you do a

125
00:04:37,800 --> 00:04:40,320
go build right we want to know which

126
00:04:40,320 --> 00:04:42,419
compiler you use to do that go build

127
00:04:42,419 --> 00:04:45,180
with that way if that compiler has a cve

128
00:04:45,180 --> 00:04:47,280
that that's going to compromise your

129
00:04:47,280 --> 00:04:49,259
entire organization we can revoke

130
00:04:49,259 --> 00:04:51,240
privileges for that workload and then

131
00:04:51,240 --> 00:04:52,979
finally right we want to make sure that

132
00:04:52,979 --> 00:04:54,960
nothing was tampered with like what

133
00:04:54,960 --> 00:04:57,120
happened in solarwinds we want to ensure

134
00:04:57,120 --> 00:04:59,820
that the build materials that we expect

135
00:04:59,820 --> 00:05:01,979
to go in the build actually do go into

136
00:05:01,979 --> 00:05:04,460
that build

137
00:05:04,740 --> 00:05:06,720
so I'm going to step back for a second

138
00:05:06,720 --> 00:05:08,759
I'm going to talk about witness witness

139
00:05:08,759 --> 00:05:10,500
is our open source project we started

140
00:05:10,500 --> 00:05:12,780
about a year ago the Genesis was

141
00:05:12,780 --> 00:05:16,199
actually at kubecon uh n a last year

142
00:05:16,199 --> 00:05:18,240
Mikhail and I have been working really

143
00:05:18,240 --> 00:05:20,520
really hard on this and some software

144
00:05:20,520 --> 00:05:22,800
around it as well what witness does is

145
00:05:22,800 --> 00:05:24,000
it implements the in total

146
00:05:24,000 --> 00:05:25,680
specifications or parts of the internal

147
00:05:25,680 --> 00:05:27,780
specification and allows software

148
00:05:27,780 --> 00:05:30,539
producer producers to make and verify

149
00:05:30,539 --> 00:05:33,060
attestations about the software that

150
00:05:33,060 --> 00:05:34,560
they produce

151
00:05:34,560 --> 00:05:37,080
it has Integrations to projects open

152
00:05:37,080 --> 00:05:38,780
source projects such as Sig store

153
00:05:38,780 --> 00:05:41,460
Inspire to allow you to sign these

154
00:05:41,460 --> 00:05:43,139
attestations without having to worry

155
00:05:43,139 --> 00:05:45,539
about keys in addition we do have a

156
00:05:45,539 --> 00:05:47,100
platform that we're developing that will

157
00:05:47,100 --> 00:05:49,139
also provide this capability we have

158
00:05:49,139 --> 00:05:52,020
Integrations into GitHub and gitlab

159
00:05:52,020 --> 00:05:54,300
currently we have a GitHub action that's

160
00:05:54,300 --> 00:05:56,160
experimental that allows you to do this

161
00:05:56,160 --> 00:05:57,440
seamlessly

162
00:05:57,440 --> 00:06:00,900
and we make it easy for it makes it easy

163
00:06:00,900 --> 00:06:03,360
to produce verifiable evidence for

164
00:06:03,360 --> 00:06:06,600
software builds if if you want to verify

165
00:06:06,600 --> 00:06:08,759
that that saroff came from your uh some

166
00:06:08,759 --> 00:06:10,979
from your static analysis tool that's

167
00:06:10,979 --> 00:06:12,900
what witness does if you want to verify

168
00:06:12,900 --> 00:06:15,120
that the s-bomb was produced that build

169
00:06:15,120 --> 00:06:18,060
time from the uh the code in your

170
00:06:18,060 --> 00:06:21,240
repository that's what witness does

171
00:06:21,240 --> 00:06:23,819
right and finally we support both

172
00:06:23,819 --> 00:06:27,240
containerized and non-containerized

173
00:06:27,240 --> 00:06:30,360
workloads we understand that not every

174
00:06:30,360 --> 00:06:32,580
uh software artifact is going to be

175
00:06:32,580 --> 00:06:34,560
delivered in the container there's the

176
00:06:34,560 --> 00:06:36,120
vast majority of software whether you're

177
00:06:36,120 --> 00:06:39,120
embedded or virtual machines does not

178
00:06:39,120 --> 00:06:41,160
exist in a container in the future maybe

179
00:06:41,160 --> 00:06:43,560
it will but today it doesn't

180
00:06:43,560 --> 00:06:46,080
so what does it support well what

181
00:06:46,080 --> 00:06:47,819
witness does is allow you to make these

182
00:06:47,819 --> 00:06:49,500
attesters to pretty much do whatever you

183
00:06:49,500 --> 00:06:51,000
want they're just little pieces of code

184
00:06:51,000 --> 00:06:53,460
that describe information about a system

185
00:06:53,460 --> 00:06:56,100
currently we have a testers for for

186
00:06:56,100 --> 00:06:57,900
GitHub that's those are currently a PR

187
00:06:57,900 --> 00:07:02,759
for that gitlab AWS gcp openssf

188
00:07:02,759 --> 00:07:08,100
scorecard s-bomb through the open S spdx

189
00:07:08,100 --> 00:07:09,259
generator

190
00:07:09,259 --> 00:07:13,680
sarif oci so you can bind it to actual

191
00:07:13,680 --> 00:07:16,319
container images and then materials what

192
00:07:16,319 --> 00:07:18,960
went into that um build product what

193
00:07:18,960 --> 00:07:21,240
came out of that build and then command

194
00:07:21,240 --> 00:07:23,400
run how'd that build happen and that

195
00:07:23,400 --> 00:07:24,599
command run is what we're going to be

196
00:07:24,599 --> 00:07:27,380
focusing on today

197
00:07:29,520 --> 00:07:31,380
so the other part of this equation is

198
00:07:31,380 --> 00:07:32,819
archivist right you have these

199
00:07:32,819 --> 00:07:34,319
attestations you need somewhere to store

200
00:07:34,319 --> 00:07:36,780
them Mikhail spoke about archivists

201
00:07:36,780 --> 00:07:38,099
earlier today at length so I'm not going

202
00:07:38,099 --> 00:07:40,620
to go in detail but in general it's an

203
00:07:40,620 --> 00:07:42,720
untrusted store what do I mean by

204
00:07:42,720 --> 00:07:45,360
untrusted well I mean that all the data

205
00:07:45,360 --> 00:07:48,539
in archivist is individually signed so

206
00:07:48,539 --> 00:07:50,539
even if the database is completely 100

207
00:07:50,539 --> 00:07:53,099
compromised if you don't trust the

208
00:07:53,099 --> 00:07:55,919
certificate Authority on that piece of

209
00:07:55,919 --> 00:07:58,259
data you as a client are not required to

210
00:07:58,259 --> 00:07:59,840
trust it right

211
00:07:59,840 --> 00:08:03,120
what it does that indexes attestation

212
00:08:03,120 --> 00:08:05,940
into a graph database that allows you to

213
00:08:05,940 --> 00:08:07,099
follow

214
00:08:07,099 --> 00:08:10,380
that allows you to follow the nodes and

215
00:08:10,380 --> 00:08:12,479
edges of your supply chain to find the

216
00:08:12,479 --> 00:08:13,979
evidence that you need

217
00:08:13,979 --> 00:08:16,500
and then finally it provides a graphql

218
00:08:16,500 --> 00:08:19,259
API into all this attestation data to

219
00:08:19,259 --> 00:08:21,419
make querying very uh efficient and

220
00:08:21,419 --> 00:08:23,780
flexible

221
00:08:24,000 --> 00:08:29,099
so right now in our release Branch we do

222
00:08:29,099 --> 00:08:31,319
include support for tracing within

223
00:08:31,319 --> 00:08:34,380
witness we currently use P Trace to

224
00:08:34,380 --> 00:08:37,260
collect traces so if you enable your

225
00:08:37,260 --> 00:08:38,820
Trace functionality doing it while

226
00:08:38,820 --> 00:08:41,159
you're doing a witness run what happens

227
00:08:41,159 --> 00:08:45,360
is we attach a p Trace to uh to that

228
00:08:45,360 --> 00:08:48,000
process and collect all the assist calls

229
00:08:48,000 --> 00:08:51,060
from that so that way if

230
00:08:51,060 --> 00:08:54,180
when uh when that process goes out the

231
00:08:54,180 --> 00:08:56,880
compiler process goes out to go touch a

232
00:08:56,880 --> 00:08:59,580
file or read a file we know about that

233
00:08:59,580 --> 00:09:02,580
so we stop that process we hash that

234
00:09:02,580 --> 00:09:05,580
file and record it so we have and then

235
00:09:05,580 --> 00:09:07,680
we allow that process to open it and

236
00:09:07,680 --> 00:09:09,839
read it and the compiler can do what it

237
00:09:09,839 --> 00:09:11,519
wants with it

238
00:09:11,519 --> 00:09:13,380
this is great and it works really well

239
00:09:13,380 --> 00:09:15,660
it's synchronous that means we stop the

240
00:09:15,660 --> 00:09:18,660
process we stop the world and we record

241
00:09:18,660 --> 00:09:20,459
what's happening before we let it go on

242
00:09:20,459 --> 00:09:22,740
but this also does have some downsides

243
00:09:22,740 --> 00:09:24,120
right

244
00:09:24,120 --> 00:09:25,019
um

245
00:09:25,019 --> 00:09:26,940
hashing takes time

246
00:09:26,940 --> 00:09:29,040
when you add a p Trace to a process that

247
00:09:29,040 --> 00:09:30,600
six times so it really does slow down

248
00:09:30,600 --> 00:09:34,320
builds quite significantly and there's

249
00:09:34,320 --> 00:09:36,839
also some other issues with threading as

250
00:09:36,839 --> 00:09:39,779
well actual impact and real CI systems

251
00:09:39,779 --> 00:09:41,820
usually they're smaller machines in many

252
00:09:41,820 --> 00:09:44,760
cases but sometimes it may double or

253
00:09:44,760 --> 00:09:47,779
even triple build times

254
00:09:48,600 --> 00:09:51,240
So currently experimentally we we have

255
00:09:51,240 --> 00:09:54,360
implemented ebpf support in witness

256
00:09:54,360 --> 00:09:57,120
using tetragram so what witness does is

257
00:09:57,120 --> 00:09:58,860
because it's actually executing your

258
00:09:58,860 --> 00:10:01,080
build process we have that full context

259
00:10:01,080 --> 00:10:03,420
of what that build process is so we know

260
00:10:03,420 --> 00:10:06,420
what the PID is right we know what uh

261
00:10:06,420 --> 00:10:09,480
what we also know what materials it

262
00:10:09,480 --> 00:10:11,100
should be touching right we add that

263
00:10:11,100 --> 00:10:13,380
context to it so then we send that

264
00:10:13,380 --> 00:10:16,860
information to the tetragon agent with

265
00:10:16,860 --> 00:10:19,019
the fine traces so we say okay

266
00:10:19,019 --> 00:10:21,480
let's let's Trace everything that

267
00:10:21,480 --> 00:10:22,800
touches our working directory where our

268
00:10:22,800 --> 00:10:24,660
source code is if anything changes in

269
00:10:24,660 --> 00:10:26,940
there right we'll know about it

270
00:10:26,940 --> 00:10:30,260
um let's

271
00:10:32,760 --> 00:10:34,320
if anything changes in there we'll know

272
00:10:34,320 --> 00:10:36,000
about it right

273
00:10:36,000 --> 00:10:37,860
and so we're able to

274
00:10:37,860 --> 00:10:38,940
um

275
00:10:38,940 --> 00:10:41,940
we're able to record a very accurate

276
00:10:41,940 --> 00:10:44,160
bill of materials for everything that

277
00:10:44,160 --> 00:10:46,200
happened in addition to any network

278
00:10:46,200 --> 00:10:47,760
calls so we're able to prove things like

279
00:10:47,760 --> 00:10:49,920
hey did this this CI process make a

280
00:10:49,920 --> 00:10:52,019
network call nope it's it's a hermetic

281
00:10:52,019 --> 00:10:54,600
build we can say that did any of the

282
00:10:54,600 --> 00:10:56,579
files change well the build processor

283
00:10:56,579 --> 00:10:57,899
happened that we didn't expect it to

284
00:10:57,899 --> 00:11:02,300
nope so it wasn't tampered with right

285
00:11:04,079 --> 00:11:06,300
but there are definitely some trade-offs

286
00:11:06,300 --> 00:11:10,560
between using BPF and P Trace

287
00:11:10,560 --> 00:11:12,959
well BPF that's asynchronous so what

288
00:11:12,959 --> 00:11:16,560
we're having to do with BPF is we get

289
00:11:16,560 --> 00:11:19,620
that grpc call that says okay this file

290
00:11:19,620 --> 00:11:23,760
was touched then we go hash it well

291
00:11:23,760 --> 00:11:25,680
um our compilation process has already

292
00:11:25,680 --> 00:11:27,300
read that in by the time we've hashed it

293
00:11:27,300 --> 00:11:28,279
right

294
00:11:28,279 --> 00:11:30,720
with P Trace write that synchronous we

295
00:11:30,720 --> 00:11:32,640
get to stop the world and actually see

296
00:11:32,640 --> 00:11:35,579
what happens so with BPF we do miss some

297
00:11:35,579 --> 00:11:38,360
things we do miss some file hash changes

298
00:11:38,360 --> 00:11:40,740
it is in our testing it's pretty

299
00:11:40,740 --> 00:11:42,660
accurate and we do get enough to

300
00:11:42,660 --> 00:11:44,880
determine if it was tampered or not but

301
00:11:44,880 --> 00:11:47,519
again Ace being asynchronous it just has

302
00:11:47,519 --> 00:11:51,060
some some trade-offs BPF it can monitor

303
00:11:51,060 --> 00:11:54,300
your entire system right with P Trace

304
00:11:54,300 --> 00:11:56,399
right we're limited to only monitoring

305
00:11:56,399 --> 00:11:58,100
that build process

306
00:11:58,100 --> 00:12:00,600
but also we don't require a root with

307
00:12:00,600 --> 00:12:03,240
betrays right we can run P Trace traces

308
00:12:03,240 --> 00:12:06,120
in GitHub actions on a shared Runner we

309
00:12:06,120 --> 00:12:08,220
can't do that with BPF right because we

310
00:12:08,220 --> 00:12:10,260
require system level access to install

311
00:12:10,260 --> 00:12:13,079
BPO

312
00:12:13,079 --> 00:12:15,899
um with p-trace the coding part of it is

313
00:12:15,899 --> 00:12:17,820
a little bit tougher and more prone to

314
00:12:17,820 --> 00:12:21,420
error with BPF the abstractions that

315
00:12:21,420 --> 00:12:23,820
tetragon has made have made it very very

316
00:12:23,820 --> 00:12:26,399
easy to implement traces very very

317
00:12:26,399 --> 00:12:27,839
quickly

318
00:12:27,839 --> 00:12:30,360
um depending on what your needs are

319
00:12:30,360 --> 00:12:32,760
our current P Trace implementation we're

320
00:12:32,760 --> 00:12:34,500
not looking at any network calls that's

321
00:12:34,500 --> 00:12:36,420
a future addition that we're going to

322
00:12:36,420 --> 00:12:39,180
make our current implementation with BPF

323
00:12:39,180 --> 00:12:40,860
right we get all those Network calls we

324
00:12:40,860 --> 00:12:42,360
know exactly where your build process

325
00:12:42,360 --> 00:12:44,399
called out so if your build process

326
00:12:44,399 --> 00:12:46,740
called like called out to some malicious

327
00:12:46,740 --> 00:12:48,540
server we can make some correlations

328
00:12:48,540 --> 00:12:50,519
with that and then there's that okay we

329
00:12:50,519 --> 00:12:53,180
shouldn't trust that because it

330
00:12:53,180 --> 00:12:55,680
contacted hacked hack chinaserver.com

331
00:12:55,680 --> 00:12:57,540
whatever instead of uploading

332
00:12:57,540 --> 00:13:00,000
information or downloading information

333
00:13:00,000 --> 00:13:02,279
like I said before the BPF agent you

334
00:13:02,279 --> 00:13:04,860
need wrote on this right so it makes

335
00:13:04,860 --> 00:13:06,959
deployment much more difficult if you're

336
00:13:06,959 --> 00:13:08,820
a small medium Enterprise and have a

337
00:13:08,820 --> 00:13:12,360
smaller security staff you may not have

338
00:13:12,360 --> 00:13:14,279
the ability to install a bunch of

339
00:13:14,279 --> 00:13:16,200
software all over your systems because

340
00:13:16,200 --> 00:13:19,019
you have to maintain that with P Trace

341
00:13:19,019 --> 00:13:20,220
right

342
00:13:20,220 --> 00:13:22,620
we just dash dash trace and it just

343
00:13:22,620 --> 00:13:24,420
works because we control that process

344
00:13:24,420 --> 00:13:26,060
that we're calling

345
00:13:26,060 --> 00:13:29,339
BPF that requires a modern kernel and

346
00:13:29,339 --> 00:13:31,560
then P Trace right we have compatibility

347
00:13:31,560 --> 00:13:34,980
I looked it up right Unix V6 in 1976 is

348
00:13:34,980 --> 00:13:36,660
where that was introduced so I don't

349
00:13:36,660 --> 00:13:38,459
think we have compatibility back that

350
00:13:38,459 --> 00:13:41,959
far but p-trace does

351
00:13:42,060 --> 00:13:44,100
so I'm gonna go and I'm going to do a

352
00:13:44,100 --> 00:13:46,560
demo I got some code up on GitHub you

353
00:13:46,560 --> 00:13:48,660
can go follow along if you want hit that

354
00:13:48,660 --> 00:13:51,260
QR code

355
00:13:56,459 --> 00:13:59,180
all right

356
00:14:00,959 --> 00:14:05,540
all right so this demo

357
00:14:06,540 --> 00:14:09,959
is non-deterministic so

358
00:14:09,959 --> 00:14:14,300
you may not go that well we'll see

359
00:14:17,279 --> 00:14:19,980
so the first thing we're going to do

360
00:14:19,980 --> 00:14:21,720
okay I'll show you what this file looks

361
00:14:21,720 --> 00:14:23,839
like

362
00:14:29,820 --> 00:14:31,440
oh

363
00:14:31,440 --> 00:14:32,940
okay so the first first thing we're

364
00:14:32,940 --> 00:14:33,779
going to do we're actually going to

365
00:14:33,779 --> 00:14:36,060
attack solar burst type tampering right

366
00:14:36,060 --> 00:14:39,360
so I recreated a I I built a red team

367
00:14:39,360 --> 00:14:41,220
tool it's on our GitHub repository that

368
00:14:41,220 --> 00:14:43,139
emulates a solarwinds attack but in a

369
00:14:43,139 --> 00:14:45,660
Linux environment and using go what we

370
00:14:45,660 --> 00:14:47,880
do is we're looking for any invocation

371
00:14:47,880 --> 00:14:50,160
of the go binary and when we see that go

372
00:14:50,160 --> 00:14:54,360
boundary we attach to it and we look for

373
00:14:54,360 --> 00:14:56,880
it trying to open a file called main.go

374
00:14:56,880 --> 00:15:00,180
if we see it open a file.maine.go we we

375
00:15:00,180 --> 00:15:02,279
inject some malicious code into it we

376
00:15:02,279 --> 00:15:05,699
let the compiler start back up again and

377
00:15:05,699 --> 00:15:07,920
then once the compiler is done we

378
00:15:07,920 --> 00:15:09,600
replace the original code back with it

379
00:15:09,600 --> 00:15:12,120
so nobody knows knows the difference

380
00:15:12,120 --> 00:15:14,100
this is this is very similar to all the

381
00:15:14,100 --> 00:15:17,040
similar to all the solar winds attacked

382
00:15:17,040 --> 00:15:19,320
um so

383
00:15:19,320 --> 00:15:23,000
let's go to the demo

384
00:15:24,540 --> 00:15:25,740
all right so the first thing we're going

385
00:15:25,740 --> 00:15:26,760
to do here is we're going to actually

386
00:15:26,760 --> 00:15:28,920
start tetragon

387
00:15:28,920 --> 00:15:30,720
and then we're going to start our solar

388
00:15:30,720 --> 00:15:33,060
sploit tool

389
00:15:33,060 --> 00:15:35,820
and then we're going to run witness oh

390
00:15:35,820 --> 00:15:38,519
so we're going to name a step we're

391
00:15:38,519 --> 00:15:41,160
going to Output an attestation watch

392
00:15:41,160 --> 00:15:43,560
prefix right here this is for the BPF

393
00:15:43,560 --> 00:15:45,899
right this is we're going to watch all

394
00:15:45,899 --> 00:15:48,899
the files in in our build folder

395
00:15:48,899 --> 00:15:49,560
um

396
00:15:49,560 --> 00:15:52,260
tetragon address that's a grpc address

397
00:15:52,260 --> 00:15:54,300
for the tetragon agent

398
00:15:54,300 --> 00:15:57,000
right here we are providing a key

399
00:15:57,000 --> 00:16:00,300
witness does support keyless so if

400
00:16:00,300 --> 00:16:01,380
you're running this in a build system

401
00:16:01,380 --> 00:16:03,360
you do not need to provide a key you can

402
00:16:03,360 --> 00:16:06,720
configure it to use oidc credentials

403
00:16:06,720 --> 00:16:07,320
um

404
00:16:07,320 --> 00:16:09,720
and then we're going to just run our

405
00:16:09,720 --> 00:16:11,760
Command and we're going to Output a file

406
00:16:11,760 --> 00:16:13,560
called hacked

407
00:16:13,560 --> 00:16:15,839
and then on step four we're actually

408
00:16:15,839 --> 00:16:17,940
going to show that at the station and if

409
00:16:17,940 --> 00:16:19,980
everything goes right

410
00:16:19,980 --> 00:16:22,560
you should see the hashes changing

411
00:16:22,560 --> 00:16:25,219
all right

412
00:16:33,420 --> 00:16:36,620
so it needs root

413
00:16:48,779 --> 00:16:50,940
so now that exploit is running it's

414
00:16:50,940 --> 00:16:53,579
looking for any indication of of go here

415
00:16:53,579 --> 00:16:56,120
I'm going to send

416
00:16:56,820 --> 00:17:00,259
let's do a different screen

417
00:17:10,380 --> 00:17:12,179
all right following the Target now we're

418
00:17:12,179 --> 00:17:14,459
sending the um stuff to tetragram we're

419
00:17:14,459 --> 00:17:16,939
setting the trace

420
00:17:22,619 --> 00:17:24,480
all right you can see a bunch of stuff

421
00:17:24,480 --> 00:17:25,859
happen when I switched over the screen

422
00:17:25,859 --> 00:17:28,079
so we have in a debug mode so we're

423
00:17:28,079 --> 00:17:29,520
getting all like the different events

424
00:17:29,520 --> 00:17:31,940
that happen

425
00:17:32,640 --> 00:17:34,440
um and you can see here that this

426
00:17:34,440 --> 00:17:37,140
exploit looks like it worked so let's

427
00:17:37,140 --> 00:17:39,440
see

428
00:17:44,880 --> 00:17:47,160
all right so what we're looking for is

429
00:17:47,160 --> 00:17:50,240
file hashes right

430
00:17:59,340 --> 00:18:01,020
all right so you can see the file hash

431
00:18:01,020 --> 00:18:03,299
we started out with is

432
00:18:03,299 --> 00:18:05,700
um starts with the zero a zero Alpha go

433
00:18:05,700 --> 00:18:07,980
down go down go down

434
00:18:07,980 --> 00:18:11,220
oh look at that it changed process two

435
00:18:11,220 --> 00:18:13,440
three eight nine one zero change that

436
00:18:13,440 --> 00:18:15,960
file hash from zero Alpha to a six nine

437
00:18:15,960 --> 00:18:17,940
right that's probably not good that's

438
00:18:17,940 --> 00:18:20,100
our main dot go nothing should change

439
00:18:20,100 --> 00:18:23,100
that file so we know from this Trace

440
00:18:23,100 --> 00:18:25,620
that this build has been tampered with

441
00:18:25,620 --> 00:18:27,480
so we should probably do some alerting

442
00:18:27,480 --> 00:18:30,860
on that and do some mitigation

443
00:18:32,400 --> 00:18:34,740
right and because witness includes a

444
00:18:34,740 --> 00:18:35,940
policy engine

445
00:18:35,940 --> 00:18:37,740
you can actually do that with a witness

446
00:18:37,740 --> 00:18:40,080
you can write a Regal policy that

447
00:18:40,080 --> 00:18:41,820
evaluates this to make sure this type of

448
00:18:41,820 --> 00:18:44,400
stuff doesn't happen and and make sure

449
00:18:44,400 --> 00:18:46,140
this this policy is applied to your

450
00:18:46,140 --> 00:18:48,179
build pipeline or integrate witness into

451
00:18:48,179 --> 00:18:49,559
something like an admission controller

452
00:18:49,559 --> 00:18:51,419
to make sure this stuff never gets in

453
00:18:51,419 --> 00:18:54,500
your kubernetes cluster

454
00:18:54,660 --> 00:18:57,780
so let's go look at the policy all right

455
00:18:57,780 --> 00:19:01,760
well time for demo two

456
00:19:16,200 --> 00:19:18,840
all right so here's another use case of

457
00:19:18,840 --> 00:19:20,460
this technology

458
00:19:20,460 --> 00:19:21,179
um

459
00:19:21,179 --> 00:19:23,460
let's say your compiler was compromised

460
00:19:23,460 --> 00:19:25,559
right you had a malicious actor that

461
00:19:25,559 --> 00:19:27,539
changed your compiler or it could just

462
00:19:27,539 --> 00:19:30,059
be a cve that's really bad that makes

463
00:19:30,059 --> 00:19:32,700
anything compiled by that compiler

464
00:19:32,700 --> 00:19:37,799
vulnerable to a a remote rce right

465
00:19:37,799 --> 00:19:40,980
so what we want to do is find

466
00:19:40,980 --> 00:19:44,160
everywhere every single artifact in our

467
00:19:44,160 --> 00:19:46,080
system every single workload

468
00:19:46,080 --> 00:19:49,140
that use this compiler it's really

469
00:19:49,140 --> 00:19:50,760
difficult to do this right now you're

470
00:19:50,760 --> 00:19:52,080
most likely just gonna have to rebuild

471
00:19:52,080 --> 00:19:54,660
all your software and redeploy it again

472
00:19:54,660 --> 00:19:56,340
and if you're working anywhere that has

473
00:19:56,340 --> 00:19:58,440
Legacy software we know that this isn't

474
00:19:58,440 --> 00:20:01,100
always possible

475
00:20:11,640 --> 00:20:13,260
right so you can see we still have

476
00:20:13,260 --> 00:20:16,220
tetragon running there

477
00:20:16,860 --> 00:20:18,840
we're gonna stop this though we don't

478
00:20:18,840 --> 00:20:20,460
need our exploit running anymore

479
00:20:20,460 --> 00:20:22,260
oh I want to show you something too just

480
00:20:22,260 --> 00:20:23,520
to show you is

481
00:20:23,520 --> 00:20:25,440
was actually hacked yeah your code is

482
00:20:25,440 --> 00:20:27,059
hacked so that's that's what it injected

483
00:20:27,059 --> 00:20:28,679
in there

484
00:20:28,679 --> 00:20:30,000
um

485
00:20:30,000 --> 00:20:32,220
all right so let's look at this demo

486
00:20:32,220 --> 00:20:34,520
next

487
00:20:36,240 --> 00:20:37,500
so the first thing we're going to do

488
00:20:37,500 --> 00:20:39,120
start tetragon we've already started

489
00:20:39,120 --> 00:20:40,260
tetragon

490
00:20:40,260 --> 00:20:42,780
so then we're going to build with

491
00:20:42,780 --> 00:20:45,120
witness and then with the experimental

492
00:20:45,120 --> 00:20:47,880
BPF tracing

493
00:20:47,880 --> 00:20:50,700
then we're going to create a policy I'll

494
00:20:50,700 --> 00:20:52,740
show you that policy and we're going to

495
00:20:52,740 --> 00:20:54,600
sign that policy one important thing

496
00:20:54,600 --> 00:20:56,160
about Witnesses it's different than a

497
00:20:56,160 --> 00:20:57,660
little some of the other policy engines

498
00:20:57,660 --> 00:20:59,460
you may know about is that we require

499
00:20:59,460 --> 00:21:01,320
policies to actually be signed that way

500
00:21:01,320 --> 00:21:03,000
not anyone can just put a policy in

501
00:21:03,000 --> 00:21:04,919
there like a break class policy right

502
00:21:04,919 --> 00:21:06,360
you would need to sign that break class

503
00:21:06,360 --> 00:21:10,380
policy in order for that to be accepted

504
00:21:10,380 --> 00:21:12,480
the number four we're going to verify

505
00:21:12,480 --> 00:21:15,600
and we're going to make sure that that

506
00:21:15,600 --> 00:21:18,660
malicious compiler was not used in this

507
00:21:18,660 --> 00:21:20,700
build in this case yes it was used in

508
00:21:20,700 --> 00:21:22,799
this build so we should get a deny poly

509
00:21:22,799 --> 00:21:26,059
deny on this

510
00:21:28,020 --> 00:21:31,039
all right

511
00:21:35,700 --> 00:21:38,360
all right

512
00:21:39,299 --> 00:21:41,400
we're setting those traces based upon

513
00:21:41,400 --> 00:21:44,880
the PID of this process

514
00:21:44,880 --> 00:21:48,320
we get those debug messages

515
00:21:49,620 --> 00:21:52,260
all right so we're actually using our

516
00:21:52,260 --> 00:21:54,419
online public uh version of archivist

517
00:21:54,419 --> 00:21:55,919
here so we stored it there so hopefully

518
00:21:55,919 --> 00:21:59,900
the Wi-Fi works when we do this verify

519
00:22:01,140 --> 00:22:03,600
so we're going to sign that policy

520
00:22:03,600 --> 00:22:05,039
actually let's go take a look at that

521
00:22:05,039 --> 00:22:06,539
policy real quick too I just want to

522
00:22:06,539 --> 00:22:09,320
show you what it looks like

523
00:22:16,020 --> 00:22:17,880
all right so

524
00:22:17,880 --> 00:22:19,500
what we're doing is we have this

525
00:22:19,500 --> 00:22:21,120
attestation right here this witness

526
00:22:21,120 --> 00:22:23,280
command run

527
00:22:23,280 --> 00:22:26,178
attestation

528
00:22:26,700 --> 00:22:28,740
and then right here we have actually no

529
00:22:28,740 --> 00:22:30,840
Regal policy in it

530
00:22:30,840 --> 00:22:33,659
uh-oh I may have booked this demo we'll

531
00:22:33,659 --> 00:22:35,840
see

532
00:22:37,860 --> 00:22:40,459
all right

533
00:22:42,360 --> 00:22:45,120
and we're going to verify it

534
00:22:45,120 --> 00:22:47,400
right so this succeeded because we

535
00:22:47,400 --> 00:22:48,900
actually didn't have a policy on it let

536
00:22:48,900 --> 00:22:51,419
me let me pull that code out of GitHub I

537
00:22:51,419 --> 00:22:52,919
have it on Old command I'm sorry about

538
00:22:52,919 --> 00:22:55,280
this

539
00:23:05,820 --> 00:23:08,640
all right so we'll take this Rigo policy

540
00:23:08,640 --> 00:23:11,419
right here

541
00:23:24,240 --> 00:23:26,419
foreign

542
00:23:29,299 --> 00:23:31,380
looks right doesn't it

543
00:23:31,380 --> 00:23:34,280
I think so

544
00:23:36,059 --> 00:23:38,159
all right so now we we created a new

545
00:23:38,159 --> 00:23:39,720
unsigned policy so let's go ahead and

546
00:23:39,720 --> 00:23:42,140
sign that

547
00:23:43,080 --> 00:23:46,340
all right cross your fingers

548
00:23:46,799 --> 00:23:50,460
right and now that failed because we had

549
00:23:50,460 --> 00:23:52,620
that hash in there of that compiler we

550
00:23:52,620 --> 00:23:54,240
didn't want to use anymore

551
00:23:54,240 --> 00:23:56,039
so now we've taken something that takes

552
00:23:56,039 --> 00:23:57,960
a lot of time if you talk to anybody

553
00:23:57,960 --> 00:24:00,179
about how long it took them to mitigate

554
00:24:00,179 --> 00:24:01,799
against something like heart bleed or

555
00:24:01,799 --> 00:24:04,740
log4j right if they have the policy

556
00:24:04,740 --> 00:24:06,480
engine like this and they have these

557
00:24:06,480 --> 00:24:08,760
attestations about their software right

558
00:24:08,760 --> 00:24:10,380
we can really lower that time and that's

559
00:24:10,380 --> 00:24:12,419
what we're trying to do here

560
00:24:12,419 --> 00:24:13,679
um

561
00:24:13,679 --> 00:24:18,020
so let me go back to my slide deck

562
00:24:23,039 --> 00:24:25,140
that's it and uh

563
00:24:25,140 --> 00:24:27,120
if anyone have any questions what are

564
00:24:27,120 --> 00:24:29,360
your questions

565
00:24:34,380 --> 00:24:36,780
yeah so witness is just a binary that

566
00:24:36,780 --> 00:24:39,539
requires no root privileges at all so

567
00:24:39,539 --> 00:24:41,340
what we did is we actually have a git

568
00:24:41,340 --> 00:24:43,380
lab Runner that we integrated with

569
00:24:43,380 --> 00:24:45,000
um so it took pulled down the gitlab

570
00:24:45,000 --> 00:24:46,740
Runner code and I found the part where

571
00:24:46,740 --> 00:24:48,539
it creates the shell command that that

572
00:24:48,539 --> 00:24:50,039
gitlab actually injects into that

573
00:24:50,039 --> 00:24:52,020
container we just instrumented that with

574
00:24:52,020 --> 00:24:54,960
witness that works great so now if

575
00:24:54,960 --> 00:24:57,179
you're using that gitlab Runner every

576
00:24:57,179 --> 00:24:59,940
single time you run a command developers

577
00:24:59,940 --> 00:25:01,320
don't even need to worry about it right

578
00:25:01,320 --> 00:25:03,299
just if they're using that gitlab Runner

579
00:25:03,299 --> 00:25:06,500
you're creating some attestations right

580
00:25:06,500 --> 00:25:09,120
for GitHub we did something a little bit

581
00:25:09,120 --> 00:25:11,940
different we're it's it's open source

582
00:25:11,940 --> 00:25:14,400
right now but still experimental so we

583
00:25:14,400 --> 00:25:16,440
have a git we have a witness run action

584
00:25:16,440 --> 00:25:20,400
that that just takes some commands and

585
00:25:20,400 --> 00:25:22,559
then it'll run whatever's in there right

586
00:25:22,559 --> 00:25:24,779
and wrap it with witness Jenkins

587
00:25:24,779 --> 00:25:26,700
something similar I think we're looking

588
00:25:26,700 --> 00:25:28,880
at maybe making a Jenkins share library

589
00:25:28,880 --> 00:25:31,380
or integrating with the agent for

590
00:25:31,380 --> 00:25:32,760
Jenkins but that's probably going to

591
00:25:32,760 --> 00:25:34,200
happen within the next couple months or

592
00:25:34,200 --> 00:25:36,380
so

593
00:25:53,760 --> 00:25:55,799
that your file change

594
00:25:55,799 --> 00:25:57,419
the thing you want to express

595
00:25:57,419 --> 00:26:03,480
yeah so I am not the best at Rigo

596
00:26:03,480 --> 00:26:06,539
um but what you're doing is you'd Loop

597
00:26:06,539 --> 00:26:08,580
through all those sha songs right and

598
00:26:08,580 --> 00:26:09,539
anything that's in your working

599
00:26:09,539 --> 00:26:11,279
directory is your code that shouldn't be

600
00:26:11,279 --> 00:26:13,919
changing right shouldn't change and so I

601
00:26:13,919 --> 00:26:15,779
would create a loop that went over and

602
00:26:15,779 --> 00:26:18,179
verify that all those Josh slums didn't

603
00:26:18,179 --> 00:26:20,539
change

604
00:26:27,419 --> 00:26:31,400
all right any more questions

605
00:26:32,220 --> 00:26:34,200
all right if you do have any more

606
00:26:34,200 --> 00:26:35,580
questions you think about anything else

607
00:26:35,580 --> 00:26:37,500
I'm going to be around all week until

608
00:26:37,500 --> 00:26:40,080
Friday I'll be at a bunch of events uh

609
00:26:40,080 --> 00:26:42,539
you see me in the hallways otherwise hit

610
00:26:42,539 --> 00:26:45,059
me up on Twitter DMS are open LinkedIn

611
00:26:45,059 --> 00:26:47,340
hit me up on messages there

612
00:26:47,340 --> 00:26:49,140
um or you can hit a contact us on our

613
00:26:49,140 --> 00:26:51,600
website testifystect.com but we love

614
00:26:51,600 --> 00:26:53,220
open source so if anyone wants to

615
00:26:53,220 --> 00:26:55,020
collaborate got some use cases for us

616
00:26:55,020 --> 00:26:57,299
we'd love to work with you hit us up on

617
00:26:57,299 --> 00:26:59,159
GitHub and let us know how we can

618
00:26:59,159 --> 00:27:00,360
improve this make it work for your

619
00:27:00,360 --> 00:27:02,690
organization thank you

620
00:27:02,690 --> 00:27:07,489
[Applause]

