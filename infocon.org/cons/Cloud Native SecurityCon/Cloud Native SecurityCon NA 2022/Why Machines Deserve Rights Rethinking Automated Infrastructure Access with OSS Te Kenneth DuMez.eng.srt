1
00:00:00,000 --> 00:00:02,520
thank you so much

2
00:00:02,520 --> 00:00:04,920
thank you all for joining today in

3
00:00:04,920 --> 00:00:07,319
beautiful Detroit

4
00:00:07,319 --> 00:00:08,400
um

5
00:00:08,400 --> 00:00:11,280
So today we're going to talk about why

6
00:00:11,280 --> 00:00:13,740
machines deserve rights rethinking

7
00:00:13,740 --> 00:00:15,480
automated infrastructure access with

8
00:00:15,480 --> 00:00:19,020
open source teleport machine ID

9
00:00:19,020 --> 00:00:20,340
so

10
00:00:20,340 --> 00:00:23,820
this is what my terminal looked like at

11
00:00:23,820 --> 00:00:26,160
an internship I did many years ago we

12
00:00:26,160 --> 00:00:28,199
had this command we had this little file

13
00:00:28,199 --> 00:00:30,840
living there called secrets.text

14
00:00:30,840 --> 00:00:32,759
when we open that up

15
00:00:32,759 --> 00:00:34,380
we get these

16
00:00:34,380 --> 00:00:37,020
some long-lived credentials that our

17
00:00:37,020 --> 00:00:39,660
team used to access automated worker

18
00:00:39,660 --> 00:00:41,700
nodes that would frequently break

19
00:00:41,700 --> 00:00:44,579
these lived in AWS and we had them

20
00:00:44,579 --> 00:00:46,079
stored in a password Vault but because

21
00:00:46,079 --> 00:00:48,000
of the frequency we needed to access

22
00:00:48,000 --> 00:00:50,579
them A bunch of people on the team just

23
00:00:50,579 --> 00:00:51,960
added them to local files on their

24
00:00:51,960 --> 00:00:52,980
machine

25
00:00:52,980 --> 00:00:56,399
and this was a terrible terrible but

26
00:00:56,399 --> 00:00:58,620
common practice

27
00:00:58,620 --> 00:01:00,780
and this is still a problem today

28
00:01:00,780 --> 00:01:02,579
one in four employees still have access

29
00:01:02,579 --> 00:01:05,760
to Old passwords and 41.7 percent of

30
00:01:05,760 --> 00:01:06,840
employees admitted to having shared

31
00:01:06,840 --> 00:01:09,420
workplace passwords along with

32
00:01:09,420 --> 00:01:14,340
credentials AWS Keys SSH Keys Etc

33
00:01:14,340 --> 00:01:16,799
and this brings it to a security breach

34
00:01:16,799 --> 00:01:19,619
every security breach has two things in

35
00:01:19,619 --> 00:01:21,479
common a human error for an initial

36
00:01:21,479 --> 00:01:23,400
infiltration an attempt to Pivot to

37
00:01:23,400 --> 00:01:25,320
maximize the blast radius

38
00:01:25,320 --> 00:01:26,720
human error

39
00:01:26,720 --> 00:01:30,659
six million of these credentials were

40
00:01:30,659 --> 00:01:32,880
leaked in 2021

41
00:01:32,880 --> 00:01:34,799
uh this is according to a git Guardian

42
00:01:34,799 --> 00:01:37,439
study that they did these types of

43
00:01:37,439 --> 00:01:39,540
secrets that were committed were you

44
00:01:39,540 --> 00:01:43,200
know Google Cloud Keys awsiam Azure API

45
00:01:43,200 --> 00:01:46,140
Keys join tokens that's a two times

46
00:01:46,140 --> 00:01:48,780
increase since 2020 and this is because

47
00:01:48,780 --> 00:01:51,479
more and more companies are scaling with

48
00:01:51,479 --> 00:01:53,040
their Cloud infrastructure thus leading

49
00:01:53,040 --> 00:01:55,200
to more and more of these secrets

50
00:01:55,200 --> 00:01:57,180
and more of these leaks and you might

51
00:01:57,180 --> 00:01:58,619
say but we're not open source so we'll

52
00:01:58,619 --> 00:02:01,320
never do that well 85 percent of these

53
00:02:01,320 --> 00:02:02,520
corporate leaks came from developers

54
00:02:02,520 --> 00:02:05,600
personal repos they would Fork the repo

55
00:02:05,600 --> 00:02:08,038
and it was public and then they would

56
00:02:08,038 --> 00:02:09,239
merge it back in once they were done

57
00:02:09,239 --> 00:02:11,520
with the pr

58
00:02:11,520 --> 00:02:13,260
the next step is to maximize the blast

59
00:02:13,260 --> 00:02:14,640
radius you get into a slack workplace

60
00:02:14,640 --> 00:02:16,379
you get access to a server get into a

61
00:02:16,379 --> 00:02:17,520
server you're going to escalate those

62
00:02:17,520 --> 00:02:19,920
privileges from there you do what you

63
00:02:19,920 --> 00:02:23,040
want and then profit uh 50 50 your

64
00:02:23,040 --> 00:02:24,480
results May Vary you'll either be on the

65
00:02:24,480 --> 00:02:26,520
beach or someplace a little bit less

66
00:02:26,520 --> 00:02:28,760
nice

67
00:02:29,520 --> 00:02:32,340
so some more numbers real quick 26.8

68
00:02:32,340 --> 00:02:33,720
million active software developers

69
00:02:33,720 --> 00:02:36,000
there's supposedly 45 million by 2030.

70
00:02:36,000 --> 00:02:38,099
there's around 8 000 data centers in the

71
00:02:38,099 --> 00:02:39,959
world with 50 000 physical servers per

72
00:02:39,959 --> 00:02:42,540
Center this varies widely depending on

73
00:02:42,540 --> 00:02:45,379
the size but this is the average

74
00:02:45,379 --> 00:02:48,540
400 million of those physical servers

75
00:02:48,540 --> 00:02:50,280
which means billions of virtual servers

76
00:02:50,280 --> 00:02:53,400
trillions of containers uh you know the

77
00:02:53,400 --> 00:02:55,260
numbers are incalculable how many

78
00:02:55,260 --> 00:02:56,760
virtual environments there are open to

79
00:02:56,760 --> 00:02:59,760
attack the attack surface is immense

80
00:02:59,760 --> 00:03:01,980
and all of these virtual servers all

81
00:03:01,980 --> 00:03:03,360
these physical servers are all running

82
00:03:03,360 --> 00:03:05,760
software written by humans

83
00:03:05,760 --> 00:03:08,899
humans who make mistakes

84
00:03:09,060 --> 00:03:11,400
the problems with machine access

85
00:03:11,400 --> 00:03:13,860
people make mistakes writing code a

86
00:03:13,860 --> 00:03:15,540
misconfigured file here there is the

87
00:03:15,540 --> 00:03:18,300
difference between a secure setup and an

88
00:03:18,300 --> 00:03:19,860
embarrassing hack

89
00:03:19,860 --> 00:03:21,720
access problems are not limited to human

90
00:03:21,720 --> 00:03:23,700
developers we need to stop thinking like

91
00:03:23,700 --> 00:03:25,680
this machine to machine communication

92
00:03:25,680 --> 00:03:27,599
operates on outdated security principles

93
00:03:27,599 --> 00:03:29,519
security principles such as static

94
00:03:29,519 --> 00:03:33,120
credentials SSH Keys API Keys shared

95
00:03:33,120 --> 00:03:34,620
creds when keys are used by different

96
00:03:34,620 --> 00:03:36,000
services

97
00:03:36,000 --> 00:03:38,519
and perimeter security

98
00:03:38,519 --> 00:03:40,440
only the network boundaries protected a

99
00:03:40,440 --> 00:03:43,260
VPN is simply not good enough anymore

100
00:03:43,260 --> 00:03:45,239
and we also have siled access policies

101
00:03:45,239 --> 00:03:48,560
for humans versus machine access

102
00:03:48,840 --> 00:03:51,180
so what can we do

103
00:03:51,180 --> 00:03:53,400
treat machines the same way that you

104
00:03:53,400 --> 00:03:55,379
treat your developers

105
00:03:55,379 --> 00:03:57,360
give them rights

106
00:03:57,360 --> 00:03:59,580
provide each piece of automation with an

107
00:03:59,580 --> 00:04:03,360
identity from a microservice to a VM to

108
00:04:03,360 --> 00:04:04,799
any worker node in your environment they

109
00:04:04,799 --> 00:04:06,480
should have an identity exactly like

110
00:04:06,480 --> 00:04:08,700
your human workers do

111
00:04:08,700 --> 00:04:10,019
and eliminate shared credentials

112
00:04:10,019 --> 00:04:11,099
entirely

113
00:04:11,099 --> 00:04:13,799
every machine every automated service

114
00:04:13,799 --> 00:04:17,880
every node should have its very own way

115
00:04:17,880 --> 00:04:20,639
of accessing the resources it needs to

116
00:04:20,639 --> 00:04:21,959
replace them with short-lived

117
00:04:21,959 --> 00:04:24,440
certificates

118
00:04:24,479 --> 00:04:27,360
this way that there's no cred to lose

119
00:04:27,360 --> 00:04:30,419
and enforce best practices by default so

120
00:04:30,419 --> 00:04:32,580
this eliminates the need for these you

121
00:04:32,580 --> 00:04:35,820
know costly and expensive uh

122
00:04:35,820 --> 00:04:38,160
configurations where it takes you know

123
00:04:38,160 --> 00:04:40,080
hours and hours to make sure you get it

124
00:04:40,080 --> 00:04:42,240
right and I missed comma here there or

125
00:04:42,240 --> 00:04:44,100
an inconfigured service account is going

126
00:04:44,100 --> 00:04:47,940
to wind up in trouble

127
00:04:47,940 --> 00:04:50,280
and tear down those access silos so you

128
00:04:50,280 --> 00:04:53,400
have to think about the way you handle

129
00:04:53,400 --> 00:04:54,960
access for your machines with the same

130
00:04:54,960 --> 00:04:57,840
care that you do for your developers

131
00:04:57,840 --> 00:05:00,240
to minimize the blast radius say worst

132
00:05:00,240 --> 00:05:02,160
case scenario one of those machines is

133
00:05:02,160 --> 00:05:03,600
compromised you have to be able to

134
00:05:03,600 --> 00:05:05,040
eliminate from your network immediately

135
00:05:05,040 --> 00:05:07,800
without letting it be the skipping point

136
00:05:07,800 --> 00:05:09,600
to the rest of your infrastructure

137
00:05:09,600 --> 00:05:11,400
and keep it simple the most secure

138
00:05:11,400 --> 00:05:12,840
solution also has to be the easiest this

139
00:05:12,840 --> 00:05:15,780
is what we saw at the beginning where

140
00:05:15,780 --> 00:05:18,240
um those credentials were ended up saved

141
00:05:18,240 --> 00:05:20,340
to these people's workstations is

142
00:05:20,340 --> 00:05:23,220
because it cut down on like developer

143
00:05:23,220 --> 00:05:25,860
time accessing these creds through some

144
00:05:25,860 --> 00:05:28,320
Vault ended up costing time and was very

145
00:05:28,320 --> 00:05:30,240
annoying so people circumvent your

146
00:05:30,240 --> 00:05:31,919
security methods if you let them if it's

147
00:05:31,919 --> 00:05:34,320
more complicated

148
00:05:34,320 --> 00:05:36,000
so this brings us to open source

149
00:05:36,000 --> 00:05:38,220
teleport machine ID

150
00:05:38,220 --> 00:05:40,259
machine to machine access so what open

151
00:05:40,259 --> 00:05:43,500
source teleport does is it handles four

152
00:05:43,500 --> 00:05:45,840
key pillars of access authentication

153
00:05:45,840 --> 00:05:48,660
connectivity and audit

154
00:05:48,660 --> 00:05:50,280
Authentication

155
00:05:50,280 --> 00:05:52,680
so for every service for every node you

156
00:05:52,680 --> 00:05:54,300
generate an identity in the form of a

157
00:05:54,300 --> 00:05:56,759
short-lived x509 certificate

158
00:05:56,759 --> 00:05:58,860
for the microservice and tie that

159
00:05:58,860 --> 00:06:00,840
identity to a role managed by teleport

160
00:06:00,840 --> 00:06:03,780
so teleport has its own concept of rbac

161
00:06:03,780 --> 00:06:05,400
that you can assign every machine

162
00:06:05,400 --> 00:06:08,340
directly to so you can share rules while

163
00:06:08,340 --> 00:06:09,780
at the still at the same time

164
00:06:09,780 --> 00:06:12,960
maintaining that um

165
00:06:12,960 --> 00:06:15,300
you know maintaining that accountability

166
00:06:15,300 --> 00:06:17,039
for these machines

167
00:06:17,039 --> 00:06:18,720
authorization

168
00:06:18,720 --> 00:06:20,460
you need to be automatically able to

169
00:06:20,460 --> 00:06:22,259
approve or deny access requests to a

170
00:06:22,259 --> 00:06:23,880
range of resources like servers

171
00:06:23,880 --> 00:06:25,460
databases kubernetes clusters

172
00:06:25,460 --> 00:06:29,039
microservices and CI CD systems

173
00:06:29,039 --> 00:06:30,900
and connectivity we're going to come

174
00:06:30,900 --> 00:06:32,699
back to this diagram in a second

175
00:06:32,699 --> 00:06:34,620
but it also needs to handle the

176
00:06:34,620 --> 00:06:36,360
connection it needs to establish a

177
00:06:36,360 --> 00:06:37,919
connection between the microservice and

178
00:06:37,919 --> 00:06:39,840
the requested resources using reverse

179
00:06:39,840 --> 00:06:41,520
proxy tone from the teleport server to

180
00:06:41,520 --> 00:06:43,919
the resource this communication is all

181
00:06:43,919 --> 00:06:46,080
encrypted and secure eliminating the

182
00:06:46,080 --> 00:06:49,319
need for vpns or you know traditional

183
00:06:49,319 --> 00:06:53,039
Bastion hosts and the like

184
00:06:53,039 --> 00:06:54,979
foreign

185
00:06:54,979 --> 00:06:57,560
extremely important for any compliance

186
00:06:57,560 --> 00:06:59,699
and any standard you're trying to reach

187
00:06:59,699 --> 00:07:01,440
any security standard you need

188
00:07:01,440 --> 00:07:03,720
accountability and you need to be able

189
00:07:03,720 --> 00:07:05,280
to review all the actions that were

190
00:07:05,280 --> 00:07:07,139
taken by both your human workers and

191
00:07:07,139 --> 00:07:09,539
your machines

192
00:07:09,539 --> 00:07:10,740
so this is kind of the high level

193
00:07:10,740 --> 00:07:13,380
architecture this is an example for

194
00:07:13,380 --> 00:07:16,620
teleport configured with ansible and so

195
00:07:16,620 --> 00:07:19,199
what you have is this orange teleport

196
00:07:19,199 --> 00:07:22,020
cluster over well I guess you can't see

197
00:07:22,020 --> 00:07:23,940
my cursor but this orange teleport

198
00:07:23,940 --> 00:07:25,380
cluster

199
00:07:25,380 --> 00:07:27,060
um that has two parts it has an off and

200
00:07:27,060 --> 00:07:29,280
a proxy service the proxy service

201
00:07:29,280 --> 00:07:32,160
handles all the traffic inside and out

202
00:07:32,160 --> 00:07:33,479
of the cluster

203
00:07:33,479 --> 00:07:35,280
and then the auth is a separate service

204
00:07:35,280 --> 00:07:38,580
that handles uh your logging it handles

205
00:07:38,580 --> 00:07:40,680
your um you know authentication and

206
00:07:40,680 --> 00:07:42,840
handling all those rbac roles

207
00:07:42,840 --> 00:07:45,360
then you have this ansible control node

208
00:07:45,360 --> 00:07:47,520
and this is a separate node on in your

209
00:07:47,520 --> 00:07:48,979
cloud

210
00:07:48,979 --> 00:07:53,160
and so when you

211
00:07:53,160 --> 00:07:55,979
create a new node or create a new worker

212
00:07:55,979 --> 00:07:57,960
you're going to onboard that to the

213
00:07:57,960 --> 00:08:00,780
teleport cluster once that teleport you

214
00:08:00,780 --> 00:08:02,099
can do this in two ways you can do this

215
00:08:02,099 --> 00:08:03,720
with either an ephemeral token or a

216
00:08:03,720 --> 00:08:07,319
dynamic join token like an AWS IM

217
00:08:07,319 --> 00:08:10,259
um and once you do that then the machine

218
00:08:10,259 --> 00:08:12,479
will refresh its credentials every 20

219
00:08:12,479 --> 00:08:14,099
minutes or that's configurable you can

220
00:08:14,099 --> 00:08:15,660
set it every five minutes every 30 every

221
00:08:15,660 --> 00:08:16,560
hour

222
00:08:16,560 --> 00:08:18,539
that way there's no long-lived

223
00:08:18,539 --> 00:08:19,860
credentials and there's no secrets that

224
00:08:19,860 --> 00:08:22,199
can be leaked

225
00:08:22,199 --> 00:08:24,360
um this then will go through the

226
00:08:24,360 --> 00:08:28,560
teleport proxy and access your host VM

227
00:08:28,560 --> 00:08:31,880
in this case this is a VM hosting a

228
00:08:31,880 --> 00:08:35,399
kubernetes cluster from there you'll use

229
00:08:35,399 --> 00:08:38,339
the SSH protocols to actually run Cube

230
00:08:38,339 --> 00:08:40,559
cuddle commands directly on the VM from

231
00:08:40,559 --> 00:08:42,479
your worker node

232
00:08:42,479 --> 00:08:43,919
and you can do this in another way as

233
00:08:43,919 --> 00:08:44,760
well

234
00:08:44,760 --> 00:08:47,760
um where you can access the cube config

235
00:08:47,760 --> 00:08:50,640
directly through machine ID it'll

236
00:08:50,640 --> 00:08:52,920
actually populate the cubeconfig with

237
00:08:52,920 --> 00:08:54,720
the machine's R back rules baked right

238
00:08:54,720 --> 00:08:56,399
in and then you can just run the cube

239
00:08:56,399 --> 00:08:58,380
cuddle commands from the node itself

240
00:08:58,380 --> 00:09:00,120
without having to go through ansible or

241
00:09:00,120 --> 00:09:02,600
any SSH

242
00:09:03,779 --> 00:09:07,160
so let's see it in action

243
00:09:08,399 --> 00:09:12,000
this is going to be interesting

244
00:09:12,000 --> 00:09:13,920
live demos

245
00:09:13,920 --> 00:09:16,800
let's see if I can type

246
00:09:16,800 --> 00:09:19,939
on the screen

247
00:09:22,680 --> 00:09:26,519
do you let's get rid of this

248
00:09:26,519 --> 00:09:30,140
close perfect

249
00:09:31,920 --> 00:09:36,740
no email bad get rid of this

250
00:09:38,220 --> 00:09:40,760
okay

251
00:09:44,220 --> 00:09:47,220
okay we can see this

252
00:09:47,220 --> 00:09:48,959
I'm sorry

253
00:09:48,959 --> 00:09:50,700
oh okay

254
00:09:50,700 --> 00:09:51,540
um

255
00:09:51,540 --> 00:09:53,940
all right so let's begin

256
00:09:53,940 --> 00:09:55,140
um so what we're going to do today is

257
00:09:55,140 --> 00:09:56,580
we're going to do we're going to see

258
00:09:56,580 --> 00:09:59,279
both of those examples from the two

259
00:09:59,279 --> 00:10:01,620
architecture diagrams I showed you

260
00:10:01,620 --> 00:10:05,279
um and let's see can I make this bigger

261
00:10:05,279 --> 00:10:07,700
oh

262
00:10:09,180 --> 00:10:10,380
okay

263
00:10:10,380 --> 00:10:12,120
can everyone see this okay or should I

264
00:10:12,120 --> 00:10:14,959
try to make it bigger

265
00:10:18,480 --> 00:10:21,540
did that do something

266
00:10:21,540 --> 00:10:25,640
oh no you can't see the edge

267
00:10:25,740 --> 00:10:28,399
uh

268
00:10:28,680 --> 00:10:32,459
okay wait let's just let's let's do this

269
00:10:32,459 --> 00:10:34,939
instead

270
00:10:43,080 --> 00:10:46,640
that I didn't do that I was like

271
00:10:46,740 --> 00:10:51,500
okay can you see this no

272
00:10:51,959 --> 00:10:54,800
yes perfect

273
00:10:55,800 --> 00:10:58,339
okay

274
00:11:00,600 --> 00:11:02,100
so

275
00:11:02,100 --> 00:11:03,720
we're going to have three Windows here

276
00:11:03,720 --> 00:11:04,920
three terminals we're going to have our

277
00:11:04,920 --> 00:11:07,620
ansible control node we're going to have

278
00:11:07,620 --> 00:11:10,140
our Kate's host here and we're going to

279
00:11:10,140 --> 00:11:13,880
have our teleport post

280
00:11:14,700 --> 00:11:17,040
so first what we're going to do is we're

281
00:11:17,040 --> 00:11:20,279
going to create our role for our bot

282
00:11:20,279 --> 00:11:22,019
and this is the role that teleport is

283
00:11:22,019 --> 00:11:23,240
going to use

284
00:11:23,240 --> 00:11:26,339
when it's assigning that role to the

285
00:11:26,339 --> 00:11:27,300
machine

286
00:11:27,300 --> 00:11:29,399
and so let's go ahead and log into our

287
00:11:29,399 --> 00:11:31,320
cluster

288
00:11:31,320 --> 00:11:33,899
this uses GitHub to authenticate as an

289
00:11:33,899 --> 00:11:34,920
SSO

290
00:11:34,920 --> 00:11:36,540
and we're going to log into our teleport

291
00:11:36,540 --> 00:11:37,560
cluster

292
00:11:37,560 --> 00:11:39,720
so we're logged in now we're going to

293
00:11:39,720 --> 00:11:44,360
actually SSH onto our teleport host

294
00:11:48,480 --> 00:11:51,300
perfect so now we are in our teleport

295
00:11:51,300 --> 00:11:54,839
host so now what we're going to do is we

296
00:11:54,839 --> 00:11:59,339
are going to create our role that our

297
00:11:59,339 --> 00:12:01,320
machine is going to use

298
00:12:01,320 --> 00:12:03,120
so we're going to go ahead and this rule

299
00:12:03,120 --> 00:12:05,660
looks like this

300
00:12:06,779 --> 00:12:09,240
we have our name the machine ID Cube

301
00:12:09,240 --> 00:12:10,320
demo this is going to be the name of

302
00:12:10,320 --> 00:12:14,000
this is so tiny oh my gosh

303
00:12:17,399 --> 00:12:18,779
a little bit better

304
00:12:18,779 --> 00:12:19,860
okay

305
00:12:19,860 --> 00:12:21,300
so we're going to have our name here

306
00:12:21,300 --> 00:12:22,860
this machine ID Cube demo this is going

307
00:12:22,860 --> 00:12:24,720
to be the name of our rule

308
00:12:24,720 --> 00:12:25,800
um and then we're going to give it

309
00:12:25,800 --> 00:12:27,300
examples we're going to give it

310
00:12:27,300 --> 00:12:29,339
kubernetes access

311
00:12:29,339 --> 00:12:30,420
and we're going to assign it the

312
00:12:30,420 --> 00:12:33,500
kubernetes user Alice

313
00:12:33,600 --> 00:12:37,560
and so let's go ahead and make our roll

314
00:12:37,560 --> 00:12:39,859
here

315
00:12:41,820 --> 00:12:45,000
great so we got our roll now and next

316
00:12:45,000 --> 00:12:46,380
we're going to go on to our kubernetes

317
00:12:46,380 --> 00:12:47,339
host

318
00:12:47,339 --> 00:12:49,139
and we're going to create a kubernetes

319
00:12:49,139 --> 00:12:52,680
role to that we're going to mirror with

320
00:12:52,680 --> 00:12:55,699
our teleport rule

321
00:12:56,220 --> 00:12:59,120
again very small

322
00:13:06,540 --> 00:13:07,680
great

323
00:13:07,680 --> 00:13:11,639
now we have uh our kubernetes rule

324
00:13:11,639 --> 00:13:12,899
and then we're going to create the role

325
00:13:12,899 --> 00:13:15,500
binding of course

326
00:13:18,120 --> 00:13:20,339
got that and then we're going to go back

327
00:13:20,339 --> 00:13:23,300
into our teleport

328
00:13:23,579 --> 00:13:26,480
uh control node here our teleport host

329
00:13:26,480 --> 00:13:29,459
and we are going to actually onboard

330
00:13:29,459 --> 00:13:31,560
this bot into our cluster

331
00:13:31,560 --> 00:13:33,180
so we're going to run this command um

332
00:13:33,180 --> 00:13:35,399
tea cuddle is a CLI tool that allows you

333
00:13:35,399 --> 00:13:37,079
to interact with the teleport cluster

334
00:13:37,079 --> 00:13:39,300
and we're going to go ahead and add our

335
00:13:39,300 --> 00:13:42,180
Cube demo bot with the roles of machine

336
00:13:42,180 --> 00:13:44,519
ID Cube demo which is the role we just

337
00:13:44,519 --> 00:13:46,019
created and another access rule that

338
00:13:46,019 --> 00:13:48,920
we'll use for our SSH

339
00:13:50,339 --> 00:13:53,040
perfect so we have this role

340
00:13:53,040 --> 00:13:55,620
and we have now this token this bot

341
00:13:55,620 --> 00:13:57,240
token here this is what we're going to

342
00:13:57,240 --> 00:13:59,399
use this is only valid for 59 minutes

343
00:13:59,399 --> 00:14:02,360
we're going to use it to onboard our bot

344
00:14:02,360 --> 00:14:04,860
to the teleport cluster and like I said

345
00:14:04,860 --> 00:14:06,060
there's two ways of doing this you could

346
00:14:06,060 --> 00:14:08,519
also use an I uh like an AWS Dynamic

347
00:14:08,519 --> 00:14:11,120
token as well

348
00:14:11,579 --> 00:14:13,519
um perfect so on the ansible Node here

349
00:14:13,519 --> 00:14:17,480
we're going to open up

350
00:14:20,060 --> 00:14:24,560
this uh t-bot config here

351
00:14:30,240 --> 00:14:32,899
whoops

352
00:14:35,480 --> 00:14:37,200
whoops

353
00:14:37,200 --> 00:14:39,839
sorry got a SSH onto our ansible node

354
00:14:39,839 --> 00:14:41,339
first

355
00:14:41,339 --> 00:14:42,720
I love

356
00:14:42,720 --> 00:14:45,560
um live demos

357
00:14:49,260 --> 00:14:51,480
perfect we're in our ansible node so now

358
00:14:51,480 --> 00:14:53,519
we can do our sudo Vim

359
00:14:53,519 --> 00:14:56,339
at ctbot yaml and this is what we're

360
00:14:56,339 --> 00:14:59,100
actually going to use to configure

361
00:14:59,100 --> 00:15:00,899
um our t-bot service which is going to

362
00:15:00,899 --> 00:15:03,420
do the credential refreshing

363
00:15:03,420 --> 00:15:04,860
so we're going to take this token we're

364
00:15:04,860 --> 00:15:06,420
going to swap it out for the token that

365
00:15:06,420 --> 00:15:09,300
we had before that we got from our

366
00:15:09,300 --> 00:15:10,680
teleport host

367
00:15:10,680 --> 00:15:13,860
so we're going to give it this token

368
00:15:13,860 --> 00:15:14,880
and this is what we're going to use to

369
00:15:14,880 --> 00:15:16,620
onboard our bot

370
00:15:16,620 --> 00:15:18,600
so next we're going to actually

371
00:15:18,600 --> 00:15:22,279
initialize this bot

372
00:15:23,339 --> 00:15:25,320
and so this is going to take in our

373
00:15:25,320 --> 00:15:27,720
config file we specify the directory

374
00:15:27,720 --> 00:15:29,760
that we want all of our credentials to

375
00:15:29,760 --> 00:15:31,320
be written to disk so this is the this

376
00:15:31,320 --> 00:15:33,240
is the directory that all of our SSH

377
00:15:33,240 --> 00:15:35,160
config and our Cube config it's all

378
00:15:35,160 --> 00:15:36,480
going to be written there and refreshed

379
00:15:36,480 --> 00:15:38,339
at a regular rate

380
00:15:38,339 --> 00:15:40,980
uh we specify the bot user these are the

381
00:15:40,980 --> 00:15:45,300
Linux users and then the reader user

382
00:15:45,300 --> 00:15:47,940
which is over here which is going to be

383
00:15:47,940 --> 00:15:49,980
the user that our service is going to be

384
00:15:49,980 --> 00:15:51,360
imitating

385
00:15:51,360 --> 00:15:55,260
great so now we have this so if we go in

386
00:15:55,260 --> 00:15:57,500
here

387
00:16:01,440 --> 00:16:03,720
we can see all of these files that were

388
00:16:03,720 --> 00:16:05,100
created all this directory we just

389
00:16:05,100 --> 00:16:07,199
generated and all these files right now

390
00:16:07,199 --> 00:16:09,660
are completely blank and what our t-bot

391
00:16:09,660 --> 00:16:11,399
service is going to do is it's actually

392
00:16:11,399 --> 00:16:13,380
going to instantiate those files with

393
00:16:13,380 --> 00:16:17,060
the credentials from the teleport host

394
00:16:19,019 --> 00:16:22,019
um great so now we're going to create a

395
00:16:22,019 --> 00:16:25,500
service using system D to actually run

396
00:16:25,500 --> 00:16:29,540
the t-bot service in the background

397
00:16:29,880 --> 00:16:31,680
and it's going to look like this it's

398
00:16:31,680 --> 00:16:33,600
pretty simple and it's just going to

399
00:16:33,600 --> 00:16:36,839
tell our systemd to start up the

400
00:16:36,839 --> 00:16:38,940
teleport t-bot service and then we can

401
00:16:38,940 --> 00:16:42,259
start refreshing those credentials

402
00:16:42,480 --> 00:16:45,120
so this looks good

403
00:16:45,120 --> 00:16:47,459
we're going to go ahead and start up

404
00:16:47,459 --> 00:16:50,060
that service

405
00:16:52,920 --> 00:16:54,899
using system cuddle start machine ID

406
00:16:54,899 --> 00:16:56,160
demo

407
00:16:56,160 --> 00:16:59,779
and let's get let's check the status

408
00:17:03,300 --> 00:17:06,540
okay so we can see that ignore this

409
00:17:06,540 --> 00:17:09,299
error that's fine we would successfully

410
00:17:09,299 --> 00:17:11,280
renew the impersonated certificates we

411
00:17:11,280 --> 00:17:14,160
persisted the new certificates to disk

412
00:17:14,160 --> 00:17:15,660
and we're starting to watch for the ca

413
00:17:15,660 --> 00:17:17,520
rotations so this will persist every 20

414
00:17:17,520 --> 00:17:19,319
minutes

415
00:17:19,319 --> 00:17:23,240
and let's take a look again now at our

416
00:17:23,240 --> 00:17:27,000
files that we had so if we go back in to

417
00:17:27,000 --> 00:17:29,720
our

418
00:17:30,360 --> 00:17:34,340
directory that we specified earlier

419
00:17:36,179 --> 00:17:38,700
whoops

420
00:17:38,700 --> 00:17:40,740
let's go into here and we can take a

421
00:17:40,740 --> 00:17:43,700
look at some of these files

422
00:17:43,980 --> 00:17:47,580
so now if we cat our Cube config yaml we

423
00:17:47,580 --> 00:17:49,020
actually see that we have a whole Cube

424
00:17:49,020 --> 00:17:50,880
config and this was generated from the

425
00:17:50,880 --> 00:17:52,559
teleport host

426
00:17:52,559 --> 00:17:56,580
and so if we

427
00:17:56,580 --> 00:18:01,100
export our Cube config here

428
00:18:03,000 --> 00:18:04,530
to this

429
00:18:04,530 --> 00:18:05,220
[Music]

430
00:18:05,220 --> 00:18:06,179
um

431
00:18:06,179 --> 00:18:10,160
opt machine ID Cube demo

432
00:18:13,200 --> 00:18:15,600
now we can actually interact with our

433
00:18:15,600 --> 00:18:18,080
cluster

434
00:18:18,960 --> 00:18:21,960
whoops

435
00:18:22,500 --> 00:18:25,860
Cube config there we go and now we can

436
00:18:25,860 --> 00:18:28,980
actually interact with our cluster

437
00:18:28,980 --> 00:18:30,559
from the worker node

438
00:18:30,559 --> 00:18:33,059
all going through the teleport proxy

439
00:18:33,059 --> 00:18:34,980
service

440
00:18:34,980 --> 00:18:38,520
and we can go in to and actually check

441
00:18:38,520 --> 00:18:42,260
it out we have a web view here

442
00:18:46,140 --> 00:18:50,179
and we sign in with GitHub

443
00:18:52,140 --> 00:18:55,020
and we can see if we go into our audit

444
00:18:55,020 --> 00:18:57,139
log

445
00:18:58,799 --> 00:19:00,960
we can see all of the activities that we

446
00:19:00,960 --> 00:19:02,880
were just doing so we can see that the

447
00:19:02,880 --> 00:19:06,240
kubernetes request we can see

448
00:19:06,240 --> 00:19:09,240
all of the metadata from here all of

449
00:19:09,240 --> 00:19:11,700
this can be fully fed into like anomaly

450
00:19:11,700 --> 00:19:14,160
detection tools or other you know log

451
00:19:14,160 --> 00:19:15,620
aggregators

452
00:19:15,620 --> 00:19:18,360
and we can have we can see our active

453
00:19:18,360 --> 00:19:19,980
sessions here so we see that our we're

454
00:19:19,980 --> 00:19:21,240
logged into ansible we see that we're

455
00:19:21,240 --> 00:19:23,340
logged into the control node

456
00:19:23,340 --> 00:19:25,679
and we can see

457
00:19:25,679 --> 00:19:28,020
our session recordings as well so all

458
00:19:28,020 --> 00:19:30,299
the sessions all the SSH sessions are

459
00:19:30,299 --> 00:19:32,059
actually going to be recorded here

460
00:19:32,059 --> 00:19:34,799
if this would load and then you can

461
00:19:34,799 --> 00:19:36,780
actually play them back

462
00:19:36,780 --> 00:19:38,820
and these aren't actually videos

463
00:19:38,820 --> 00:19:41,400
um they're just a collection of commands

464
00:19:41,400 --> 00:19:44,000
um that will run

465
00:19:45,120 --> 00:19:46,919
perfect

466
00:19:46,919 --> 00:19:49,020
um and so the last thing we're going to

467
00:19:49,020 --> 00:19:50,400
do

468
00:19:50,400 --> 00:19:52,080
is we're going to show the ansible

469
00:19:52,080 --> 00:19:53,160
example

470
00:19:53,160 --> 00:19:55,260
so in our ansible node here we're going

471
00:19:55,260 --> 00:19:57,179
to look at our ansible config

472
00:19:57,179 --> 00:20:00,179
and see that our sshrs are actually just

473
00:20:00,179 --> 00:20:03,419
set to our machine ID directory where we

474
00:20:03,419 --> 00:20:05,760
get those SSH configs that are refreshed

475
00:20:05,760 --> 00:20:08,700
on a regular rate so this way in the

476
00:20:08,700 --> 00:20:10,320
past what you do is you'd manage SSH

477
00:20:10,320 --> 00:20:13,380
Keys which were long-lived and become a

478
00:20:13,380 --> 00:20:15,960
pain both for rotation and just for

479
00:20:15,960 --> 00:20:17,700
security vulnerabilities once those keys

480
00:20:17,700 --> 00:20:20,220
were leaked they're out there but with

481
00:20:20,220 --> 00:20:22,500
teleport's machine ID these are

482
00:20:22,500 --> 00:20:24,360
refreshed every 20 minutes every on

483
00:20:24,360 --> 00:20:26,700
whatever Cadence you want making it much

484
00:20:26,700 --> 00:20:30,380
more secure and easier to deal with

485
00:20:30,480 --> 00:20:37,700
so we have this so now if we go in to

486
00:20:37,860 --> 00:20:40,860
our other directory we go into our demo

487
00:20:40,860 --> 00:20:42,600
folder here

488
00:20:42,600 --> 00:20:46,039
um and we can try to actually run

489
00:20:46,440 --> 00:20:48,840
our Playbook here and what this Playbook

490
00:20:48,840 --> 00:20:51,419
is going to do

491
00:20:51,419 --> 00:20:56,400
is that it is going to actually run Cube

492
00:20:56,400 --> 00:21:00,660
Cube Kettle commands on the SSH node of

493
00:21:00,660 --> 00:21:03,299
the that's being hosted that's hosting

494
00:21:03,299 --> 00:21:06,080
the kubernetes service

495
00:21:08,580 --> 00:21:12,059
perfect so we just have to change our

496
00:21:12,059 --> 00:21:15,980
key permissions here for ansible

497
00:21:18,720 --> 00:21:22,820
and then we should be able to run

498
00:21:23,760 --> 00:21:26,160
it's a little Playbook

499
00:21:26,160 --> 00:21:30,179
and Playbook Dot yaml

500
00:21:30,179 --> 00:21:32,640
uh

501
00:21:32,640 --> 00:21:36,179
ansible Playbook

502
00:21:36,179 --> 00:21:39,179
playbook.m

503
00:21:39,659 --> 00:21:42,419
and so we should see here is that this

504
00:21:42,419 --> 00:21:44,820
ansible control node is going to copy

505
00:21:44,820 --> 00:21:49,760
nope did that is not correct

506
00:21:50,220 --> 00:21:51,500
um

507
00:21:51,500 --> 00:21:54,480
okay that's fine so we're going to

508
00:21:54,480 --> 00:21:57,620
change this permission again

509
00:22:01,559 --> 00:22:05,000
Cube demo

510
00:22:08,700 --> 00:22:11,539
and now

511
00:22:14,220 --> 00:22:17,120
we should see

512
00:22:17,460 --> 00:22:18,780
perfect

513
00:22:18,780 --> 00:22:20,400
so now what the ansible control node is

514
00:22:20,400 --> 00:22:22,620
going to do is it's going to access our

515
00:22:22,620 --> 00:22:24,000
kubernetes host

516
00:22:24,000 --> 00:22:27,059
it is going to upload the Pod yaml and

517
00:22:27,059 --> 00:22:29,220
deployment yaml configurations that we

518
00:22:29,220 --> 00:22:31,020
have written here and it's actually

519
00:22:31,020 --> 00:22:32,640
going to create a pod and create a

520
00:22:32,640 --> 00:22:35,280
deployment on the kubernetes cluster

521
00:22:35,280 --> 00:22:36,960
and we see that the Pod engine X is

522
00:22:36,960 --> 00:22:39,299
created and we see that the nginx

523
00:22:39,299 --> 00:22:41,100
deployment was created so if we actually

524
00:22:41,100 --> 00:22:43,260
say Cube cuddle

525
00:22:43,260 --> 00:22:48,140
get pods Dash name

526
00:22:48,140 --> 00:22:54,860
namespace equals uh demo name space

527
00:22:59,280 --> 00:23:02,780
let's see where are these guys

528
00:23:03,539 --> 00:23:05,640
um so we see our nginx pod in the demo

529
00:23:05,640 --> 00:23:07,980
namespace along with our nginx

530
00:23:07,980 --> 00:23:10,140
deployment replicas

531
00:23:10,140 --> 00:23:13,559
and that is uh the end of the demo

532
00:23:13,559 --> 00:23:16,080
um so let me go back

533
00:23:16,080 --> 00:23:19,580
to the slides

534
00:23:26,880 --> 00:23:29,159
but

535
00:23:29,159 --> 00:23:33,440
and we can skip to the end here

536
00:23:38,220 --> 00:23:40,820
Maybe

537
00:23:41,760 --> 00:23:46,580
if we are cooperating please

538
00:23:47,039 --> 00:23:50,100
okay well I mean you get the picture

539
00:23:50,100 --> 00:23:51,840
um so thank you all so much thank you

540
00:23:51,840 --> 00:23:54,190
for that's a Teleport machine ID

541
00:23:54,190 --> 00:23:59,100
[Applause]

542
00:23:59,100 --> 00:24:01,559
and we also have our slack here we're

543
00:24:01,559 --> 00:24:03,600
also going to be at kubecon at Booth p13

544
00:24:03,600 --> 00:24:05,880
so if you want to come chat more I'll be

545
00:24:05,880 --> 00:24:07,919
around as well as our CEO and some other

546
00:24:07,919 --> 00:24:11,039
folks so come hang out and then we also

547
00:24:11,039 --> 00:24:12,480
are hosting a happy hour we still have

548
00:24:12,480 --> 00:24:14,100
registration spots open if you like beer

549
00:24:14,100 --> 00:24:17,240
and chicken so

550
00:24:17,460 --> 00:24:20,059
thank you

551
00:24:32,220 --> 00:24:35,059
any questions

552
00:24:39,600 --> 00:24:42,480
hey so I I liked your talk um thank you

553
00:24:42,480 --> 00:24:45,360
one of the kind of core kubernetes

554
00:24:45,360 --> 00:24:48,240
things is cattle not pets

555
00:24:48,240 --> 00:24:51,059
and I know also like kind of if you

556
00:24:51,059 --> 00:24:52,620
Spire which I'm a lot more familiar with

557
00:24:52,620 --> 00:24:55,500
also kind of with the way it does keys

558
00:24:55,500 --> 00:24:56,940
and management of identities and other

559
00:24:56,940 --> 00:24:58,799
things like that also has somewhat of a

560
00:24:58,799 --> 00:25:01,860
cattle view sure um and I may have just

561
00:25:01,860 --> 00:25:03,299
picked up on something on your slide

562
00:25:03,299 --> 00:25:05,640
without really understanding it so I'm

563
00:25:05,640 --> 00:25:07,200
just asking

564
00:25:07,200 --> 00:25:08,580
um when you talk about all machines have

565
00:25:08,580 --> 00:25:10,440
identities is this more in the pets

566
00:25:10,440 --> 00:25:12,780
category or the cattle category and

567
00:25:12,780 --> 00:25:14,640
maybe you can also explain what I mean

568
00:25:14,640 --> 00:25:18,000
by pets and Cattle yeah so

569
00:25:18,000 --> 00:25:20,220
it certainly Falls more to the the

570
00:25:20,220 --> 00:25:22,559
reason that you give it an identity

571
00:25:22,559 --> 00:25:25,260
um is to

572
00:25:25,260 --> 00:25:27,000
um you know treat it with the same

573
00:25:27,000 --> 00:25:28,860
accountability that you would like a

574
00:25:28,860 --> 00:25:30,539
human so

575
00:25:30,539 --> 00:25:32,520
um it's not like

576
00:25:32,520 --> 00:25:34,860
like a pet in that like you can do this

577
00:25:34,860 --> 00:25:37,320
also for like just an ephemeral

578
00:25:37,320 --> 00:25:39,179
um like worker nodes

579
00:25:39,179 --> 00:25:40,860
um so it's it's all about just kind of

580
00:25:40,860 --> 00:25:43,260
consolidating access rather than like

581
00:25:43,260 --> 00:25:45,960
making it something it's not it

582
00:25:45,960 --> 00:25:47,279
certainly is a cattle and we're still

583
00:25:47,279 --> 00:25:50,100
viewing them just as like worker nodes

584
00:25:50,100 --> 00:25:52,620
um and they are can be completely

585
00:25:52,620 --> 00:25:54,179
ephemeral

586
00:25:54,179 --> 00:25:55,679
um so it's just all about way of like

587
00:25:55,679 --> 00:25:57,659
consolidating that access rather than

588
00:25:57,659 --> 00:25:59,760
making them like more special than they

589
00:25:59,760 --> 00:26:01,919
need to be or something like that

590
00:26:01,919 --> 00:26:04,679
um which I also forgot actually is in

591
00:26:04,679 --> 00:26:06,419
the future so a lot of like a core of

592
00:26:06,419 --> 00:26:07,740
this product

593
00:26:07,740 --> 00:26:09,960
um in the use is like a CI CD workflow

594
00:26:09,960 --> 00:26:10,980
way

595
00:26:10,980 --> 00:26:12,120
um so that you can handle this access

596
00:26:12,120 --> 00:26:13,559
without having these long lived

597
00:26:13,559 --> 00:26:15,600
credentials that then get leaked in a

598
00:26:15,600 --> 00:26:17,100
GitHub repo for example

599
00:26:17,100 --> 00:26:19,080
so in teleport 11 the next release we'll

600
00:26:19,080 --> 00:26:21,600
actually have GitHub action support so

601
00:26:21,600 --> 00:26:22,799
that you can interact with teleport

602
00:26:22,799 --> 00:26:25,320
protected resources directly from these

603
00:26:25,320 --> 00:26:27,779
workflows without need for secrets in

604
00:26:27,779 --> 00:26:30,840
GitHub even for example

605
00:26:30,840 --> 00:26:32,580
um and we also have Kate's support for

606
00:26:32,580 --> 00:26:34,320
automatic service Discovery so you can

607
00:26:34,320 --> 00:26:36,960
have a cluster running this service and

608
00:26:36,960 --> 00:26:40,679
anytime you create new pods or new you

609
00:26:40,679 --> 00:26:42,720
know microservices or new nodes those

610
00:26:42,720 --> 00:26:44,460
will automatically be added and

611
00:26:44,460 --> 00:26:46,500
onboarded to the teleport cluster

612
00:26:46,500 --> 00:26:48,179
without doing that whole setup that we

613
00:26:48,179 --> 00:26:50,520
just did so right now we have that

614
00:26:50,520 --> 00:26:53,460
support for SSH nodes like in eks for

615
00:26:53,460 --> 00:26:57,000
example but we don't or um sorry not eks

616
00:26:57,000 --> 00:26:58,880
uh

617
00:26:58,880 --> 00:27:04,020
whatever it's called Uh or yeah eks

618
00:27:04,020 --> 00:27:07,559
um but uh that'll come in teleport 11.

619
00:27:07,559 --> 00:27:08,820
so this is like the kind of the core

620
00:27:08,820 --> 00:27:11,400
value here is this CI CD workflow so you

621
00:27:11,400 --> 00:27:12,480
don't have to have these persistent

622
00:27:12,480 --> 00:27:13,679
creds

623
00:27:13,679 --> 00:27:15,419
um in your infrastructure and that's

624
00:27:15,419 --> 00:27:16,620
kind of the idea

625
00:27:16,620 --> 00:27:18,360
does that kind of answer your question

626
00:27:18,360 --> 00:27:20,600
yeah

627
00:27:21,120 --> 00:27:24,020
another one over here

628
00:27:45,000 --> 00:27:47,760
yeah absolutely yeah so uh great

629
00:27:47,760 --> 00:27:48,840
question

630
00:27:48,840 --> 00:27:50,880
um so yeah you can do it by tags or by

631
00:27:50,880 --> 00:27:52,380
labels

632
00:27:52,380 --> 00:27:54,539
um and as soon as there's a there's a

633
00:27:54,539 --> 00:27:56,580
match that will be that uh node will be

634
00:27:56,580 --> 00:27:58,440
onboarded to the cluster with its own

635
00:27:58,440 --> 00:28:00,120
unique identity

636
00:28:00,120 --> 00:28:01,980
um so this identity will be generated

637
00:28:01,980 --> 00:28:05,400
again from its own x509 certificate

638
00:28:05,400 --> 00:28:07,080
um and

639
00:28:07,080 --> 00:28:09,960
it will have some like configurable

640
00:28:09,960 --> 00:28:11,400
naming convention that you can give it

641
00:28:11,400 --> 00:28:13,140
and you can differentiate them while

642
00:28:13,140 --> 00:28:15,419
still grouping them under the label of

643
00:28:15,419 --> 00:28:17,279
whatever you know like worker node or

644
00:28:17,279 --> 00:28:19,020
whatever like service that you're

645
00:28:19,020 --> 00:28:22,400
employing with them does that make sense

646
00:28:22,799 --> 00:28:25,279
perfect

647
00:28:26,279 --> 00:28:30,559
great oh over here as well

648
00:28:41,279 --> 00:28:45,419
um use your identity in terms of like

649
00:28:45,419 --> 00:28:47,580
I'm sorry a developer laptop yeah no

650
00:28:47,580 --> 00:28:48,960
absolutely and that's like so that's

651
00:28:48,960 --> 00:28:50,520
more of like the human use case but

652
00:28:50,520 --> 00:28:52,799
that's also like a core teleport service

653
00:28:52,799 --> 00:28:54,720
is that like machine ID is just one of

654
00:28:54,720 --> 00:28:55,980
the offerings

655
00:28:55,980 --> 00:28:57,900
um but what people typically do is that

656
00:28:57,900 --> 00:29:00,179
it'll integrate with like your SSO like

657
00:29:00,179 --> 00:29:02,340
OCTA or GitHub or whatever

658
00:29:02,340 --> 00:29:04,140
um and then you can do all this for like

659
00:29:04,140 --> 00:29:06,179
a human developer or like a even just

660
00:29:06,179 --> 00:29:08,760
like a developer laptop like you said

661
00:29:08,760 --> 00:29:11,820
um so you totally can do that yeah

662
00:29:11,820 --> 00:29:13,320
and that's kind of the core business

663
00:29:13,320 --> 00:29:15,000
right now of teleport The Wider use case

664
00:29:15,000 --> 00:29:17,580
is for engineering teams that need

665
00:29:17,580 --> 00:29:20,100
shared access to different resources

666
00:29:20,100 --> 00:29:21,840
um they use teleport instead of like

667
00:29:21,840 --> 00:29:24,600
using a password Vault or

668
00:29:24,600 --> 00:29:26,100
um you know like juggling a bunch of SSH

669
00:29:26,100 --> 00:29:29,240
keys or something like that

670
00:29:30,600 --> 00:29:32,640
but yeah thank you guys so much again

671
00:29:32,640 --> 00:29:34,919
and I hope to see you at the kubecon

672
00:29:34,919 --> 00:29:36,090
booth thank you

673
00:29:36,090 --> 00:29:39,669
[Applause]

