1
00:00:01,740 --> 00:00:05,400
great so uh my name is Diego I'm not a

2
00:00:05,400 --> 00:00:07,740
security specialist okay but I am Conan

3
00:00:07,740 --> 00:00:09,780
co-founder so I'm going to tell here my

4
00:00:09,780 --> 00:00:11,820
story here please be be kind to me

5
00:00:11,820 --> 00:00:15,000
because I'm trying to explain how we our

6
00:00:15,000 --> 00:00:17,760
modest approach to secure Conan Center

7
00:00:17,760 --> 00:00:20,100
hey please raise your hands who knows

8
00:00:20,100 --> 00:00:22,260
what is Conan raise your hand if you

9
00:00:22,260 --> 00:00:26,100
know it one person two people okay okay

10
00:00:26,100 --> 00:00:28,680
perfect so according is the missing link

11
00:00:28,680 --> 00:00:30,779
it's something that we have been missing

12
00:00:30,779 --> 00:00:33,180
in C plus for decades is a package

13
00:00:33,180 --> 00:00:35,640
manager for CNC plus it is open source

14
00:00:35,640 --> 00:00:38,040
it is decentralized it is a

15
00:00:38,040 --> 00:00:40,200
multi-platform it works in every every

16
00:00:40,200 --> 00:00:42,360
operating system with any build system

17
00:00:42,360 --> 00:00:45,059
and is very mature and reliable and

18
00:00:45,059 --> 00:00:46,260
stable

19
00:00:46,260 --> 00:00:48,239
I'm going through those show Numbers

20
00:00:48,239 --> 00:00:50,460
here for example we have been designated

21
00:00:50,460 --> 00:00:54,000
as one of the one percent critical IPI

22
00:00:54,000 --> 00:00:56,100
projects you know that what that means

23
00:00:56,100 --> 00:00:58,320
we have we it is downloaded a ton of

24
00:00:58,320 --> 00:01:00,600
times because currently itself is a

25
00:01:00,600 --> 00:01:02,579
python tool so we put it in the in the

26
00:01:02,579 --> 00:01:05,700
by by python package index

27
00:01:05,700 --> 00:01:07,320
um

28
00:01:07,320 --> 00:01:11,159
in the C plus plus uh language a slack

29
00:01:11,159 --> 00:01:14,040
team we are consistently ranked among

30
00:01:14,040 --> 00:01:16,140
the top most active channels in the

31
00:01:16,140 --> 00:01:18,960
whole in the whole place

32
00:01:18,960 --> 00:01:22,140
we get thousands of pull requests per

33
00:01:22,140 --> 00:01:25,259
year to our repos

34
00:01:25,259 --> 00:01:29,180
we have a dedicated team 10 people

35
00:01:29,180 --> 00:01:32,220
sponsored by jfrog as maintainers of the

36
00:01:32,220 --> 00:01:34,740
Conan project

37
00:01:34,740 --> 00:01:36,600
and there are many thousands of

38
00:01:36,600 --> 00:01:38,939
companies using Conan in production this

39
00:01:38,939 --> 00:01:40,740
is the number of artifactory servers

40
00:01:40,740 --> 00:01:43,619
that we know those that are not behind a

41
00:01:43,619 --> 00:01:45,659
firewall those that we get at the

42
00:01:45,659 --> 00:01:48,119
Telemetry is ranking last year was

43
00:01:48,119 --> 00:01:50,600
ranking around 8 000

44
00:01:50,600 --> 00:01:53,640
companies or teams using Conan that

45
00:01:53,640 --> 00:01:55,259
means of course a lot of support tickets

46
00:01:55,259 --> 00:01:57,119
we got a lot of feedback from them

47
00:01:57,119 --> 00:02:00,299
hundreds of video calls a lot of support

48
00:02:00,299 --> 00:02:01,340
in general

49
00:02:01,340 --> 00:02:04,140
from these users we selected a small

50
00:02:04,140 --> 00:02:07,920
group of them and we made also a group

51
00:02:07,920 --> 00:02:10,258
of we call it the tribe the tribe to

52
00:02:10,258 --> 00:02:11,520
series a group that has been giving

53
00:02:11,520 --> 00:02:14,280
feedback for the next big thing which is

54
00:02:14,280 --> 00:02:15,900
going into syrup which is coming in uh

55
00:02:15,900 --> 00:02:19,080
awful in a couple of months

56
00:02:19,080 --> 00:02:22,260
what I'm explaining this besides the

57
00:02:22,260 --> 00:02:24,360
seamless self-promotion yes I'm doing

58
00:02:24,360 --> 00:02:26,700
this is because you need to be aware

59
00:02:26,700 --> 00:02:29,099
that Conan is becoming a very important

60
00:02:29,099 --> 00:02:30,900
piece in the CNC plus plus ecosystem

61
00:02:30,900 --> 00:02:34,200
it's a piece that needs to be secure and

62
00:02:34,200 --> 00:02:36,120
today I'm going to explain what what we

63
00:02:36,120 --> 00:02:38,400
have been doing so far to try to secure

64
00:02:38,400 --> 00:02:40,140
the supply chain for CNC plus Plus

65
00:02:40,140 --> 00:02:43,260
packets packages with Conan

66
00:02:43,260 --> 00:02:45,540
first important thing the technology we

67
00:02:45,540 --> 00:02:47,580
manage the binaries so we have this

68
00:02:47,580 --> 00:02:49,440
concept of a package and we have a

69
00:02:49,440 --> 00:02:50,280
recipe

70
00:02:50,280 --> 00:02:53,099
uh and the recipe one single recipe can

71
00:02:53,099 --> 00:02:55,440
create any number of binaries for every

72
00:02:55,440 --> 00:02:56,940
different configuration every different

73
00:02:56,940 --> 00:02:58,980
operating system everything compiler

74
00:02:58,980 --> 00:03:01,080
compiler version debug release

75
00:03:01,080 --> 00:03:02,700
configurations static or search

76
00:03:02,700 --> 00:03:05,819
libraries that's that every one of those

77
00:03:05,819 --> 00:03:09,300
things is a new different binary and can

78
00:03:09,300 --> 00:03:11,519
manage all of them

79
00:03:11,519 --> 00:03:13,739
this is the way that these binaries are

80
00:03:13,739 --> 00:03:17,519
created we have a recipe it's a DSL on

81
00:03:17,519 --> 00:03:20,220
top of python that describes how a

82
00:03:20,220 --> 00:03:22,680
package is built from sources and what

83
00:03:22,680 --> 00:03:25,620
does a package contain and together with

84
00:03:25,620 --> 00:03:27,780
the recipe it goes according data.gml

85
00:03:27,780 --> 00:03:29,700
that can be used to put some data like

86
00:03:29,700 --> 00:03:32,220
the URLs and the and the checksums of

87
00:03:32,220 --> 00:03:34,620
the turbos that is going to download to

88
00:03:34,620 --> 00:03:37,879
to build those those packages

89
00:03:38,459 --> 00:03:40,319
and from the architecture point of view

90
00:03:40,319 --> 00:03:42,659
currently decentralized so you can

91
00:03:42,659 --> 00:03:45,840
easily have your own server we have an

92
00:03:45,840 --> 00:03:47,340
artifactory communication which is

93
00:03:47,340 --> 00:03:49,560
completely free for C plus plus okay so

94
00:03:49,560 --> 00:03:51,060
you can have the whole stack the current

95
00:03:51,060 --> 00:03:53,700
client and the server for free and you

96
00:03:53,700 --> 00:03:55,980
can put your own private packages in

97
00:03:55,980 --> 00:03:57,420
your artifactory server and get them

98
00:03:57,420 --> 00:04:01,319
from there and besides that we also have

99
00:04:01,319 --> 00:04:04,260
a central repository as npm for example

100
00:04:04,260 --> 00:04:06,959
which we call Conan Center Colon Center

101
00:04:06,959 --> 00:04:09,420
is the place where we host the third

102
00:04:09,420 --> 00:04:11,939
party open source packages those are

103
00:04:11,939 --> 00:04:13,439
contributed by the community but we

104
00:04:13,439 --> 00:04:15,120
maintain the infrastructure and we run

105
00:04:15,120 --> 00:04:17,720
the repo

106
00:04:18,000 --> 00:04:20,399
to give also some ideas about what is

107
00:04:20,399 --> 00:04:22,560
Conan Center Corner Center contains

108
00:04:22,560 --> 00:04:26,580
nowadays 1400 recipes for each one of

109
00:04:26,580 --> 00:04:28,620
these recipes it can contain a number of

110
00:04:28,620 --> 00:04:31,259
versions for every different versions it

111
00:04:31,259 --> 00:04:33,540
can contains different revisions that

112
00:04:33,540 --> 00:04:35,040
happens with you do a change to the

113
00:04:35,040 --> 00:04:37,020
recipe but you don't actually bump the

114
00:04:37,020 --> 00:04:39,120
the version of the of the underlying

115
00:04:39,120 --> 00:04:42,500
library and for every single revisions

116
00:04:42,500 --> 00:04:45,840
we are building up to 130 different

117
00:04:45,840 --> 00:04:48,479
binaries for Windows Linux Mac different

118
00:04:48,479 --> 00:04:50,759
flavors of the compilers as you can see

119
00:04:50,759 --> 00:04:53,639
this is a big infrastructure that means

120
00:04:53,639 --> 00:04:55,759
that more or less we are maintaining

121
00:04:55,759 --> 00:04:58,740
1.4 million packages binary packages in

122
00:04:58,740 --> 00:05:00,720
Conan Center which accounts for 20

123
00:05:00,720 --> 00:05:04,020
terabytes of storage we are getting uh

124
00:05:04,020 --> 00:05:06,540
close to 1 million packets download per

125
00:05:06,540 --> 00:05:09,600
month and where that means also like 25

126
00:05:09,600 --> 00:05:13,759
terabytes of transfer per per month

127
00:05:14,880 --> 00:05:16,860
so this is basically what is Corner

128
00:05:16,860 --> 00:05:18,300
center console that contains two parts

129
00:05:18,300 --> 00:05:21,300
the first one is the package system it's

130
00:05:21,300 --> 00:05:22,860
a system when we are creating the

131
00:05:22,860 --> 00:05:24,840
packages from Source everything starts

132
00:05:24,840 --> 00:05:27,180
from a GitHub tool request we built the

133
00:05:27,180 --> 00:05:29,039
package we store the packages and we

134
00:05:29,039 --> 00:05:31,440
serve the packages so the Conan client

135
00:05:31,440 --> 00:05:33,539
can do a common install and get the

136
00:05:33,539 --> 00:05:36,240
packages from the from the servers and

137
00:05:36,240 --> 00:05:39,539
this is goes together with a web with a

138
00:05:39,539 --> 00:05:41,759
web application that we can use to

139
00:05:41,759 --> 00:05:43,860
navigate and explore and discover these

140
00:05:43,860 --> 00:05:46,460
these packages

141
00:05:46,500 --> 00:05:50,160
the package system is is a CI we are we

142
00:05:50,160 --> 00:05:52,020
are using Jenkins here and we are using

143
00:05:52,020 --> 00:05:53,639
the different agents Windows links and

144
00:05:53,639 --> 00:05:56,880
Mac agents here to build the things we

145
00:05:56,880 --> 00:05:58,560
put the binaries in an artifactory

146
00:05:58,560 --> 00:06:01,560
Ripple and then we put a Google CDN on

147
00:06:01,560 --> 00:06:05,539
front of that for for scaling

148
00:06:05,699 --> 00:06:07,680
and the web system is a typical web

149
00:06:07,680 --> 00:06:10,320
application we are getting the metadata

150
00:06:10,320 --> 00:06:11,820
from the packages that are already in

151
00:06:11,820 --> 00:06:14,400
the artifactory server we get them we

152
00:06:14,400 --> 00:06:16,259
crawl them and then we extract the

153
00:06:16,259 --> 00:06:18,120
license the version all the things that

154
00:06:18,120 --> 00:06:20,759
we need and we put them in some storage

155
00:06:20,759 --> 00:06:22,860
basically Google storage and a postgres

156
00:06:22,860 --> 00:06:25,500
database and we serve them through a

157
00:06:25,500 --> 00:06:28,560
fast API and next is a very standard web

158
00:06:28,560 --> 00:06:30,600
application

159
00:06:30,600 --> 00:06:32,699
from that application we we have this

160
00:06:32,699 --> 00:06:34,740
this is the front end of of Conan Center

161
00:06:34,740 --> 00:06:36,840
as you can see is relatively simple it

162
00:06:36,840 --> 00:06:38,880
displays the packages one important

163
00:06:38,880 --> 00:06:41,039
thing here is that it doesn't have any

164
00:06:41,039 --> 00:06:43,319
authentication users don't need to to

165
00:06:43,319 --> 00:06:45,479
log into this system it's a read-only

166
00:06:45,479 --> 00:06:48,060
it's a read-only page

167
00:06:48,060 --> 00:06:49,919
so that means from the security point of

168
00:06:49,919 --> 00:06:53,039
view the web part of corner Center is

169
00:06:53,039 --> 00:06:54,900
very secure we are not concerned about

170
00:06:54,900 --> 00:06:57,660
it at all maybe you can get into it but

171
00:06:57,660 --> 00:06:59,940
even if you do it the information there

172
00:06:59,940 --> 00:07:02,460
the database information is absolutely

173
00:07:02,460 --> 00:07:04,080
public it's something that you can get

174
00:07:04,080 --> 00:07:05,699
from the packages that you can get from

175
00:07:05,699 --> 00:07:07,319
Conan Center so it's not that we are

176
00:07:07,319 --> 00:07:09,419
hosting any sensitive information or

177
00:07:09,419 --> 00:07:11,580
anything like that

178
00:07:11,580 --> 00:07:14,639
as you can imagine our major concern is

179
00:07:14,639 --> 00:07:16,919
about the package creation process

180
00:07:16,919 --> 00:07:18,900
because yes we have these Jenkins this

181
00:07:18,900 --> 00:07:21,060
is the first liability here so we put

182
00:07:21,060 --> 00:07:24,120
the Jenkins absolutely uh in a VPN you

183
00:07:24,120 --> 00:07:26,160
cannot access anything from from Jenkins

184
00:07:26,160 --> 00:07:28,500
from the outside but you are still

185
00:07:28,500 --> 00:07:31,020
processing the the pull request from

186
00:07:31,020 --> 00:07:33,960
GitHub and this is the main attack

187
00:07:33,960 --> 00:07:37,500
Vector for for Conan Center of course

188
00:07:37,500 --> 00:07:41,639
so what we did here is we put in place a

189
00:07:41,639 --> 00:07:44,880
very strict contribution process this is

190
00:07:44,880 --> 00:07:47,759
outlining our process several stages

191
00:07:47,759 --> 00:07:49,560
here and now I'm going to explain a

192
00:07:49,560 --> 00:07:51,840
little bit about them

193
00:07:51,840 --> 00:07:54,240
the first one is a user check

194
00:07:54,240 --> 00:07:56,699
so the users when they do a pull request

195
00:07:56,699 --> 00:07:59,880
to Conan Center repo and they first they

196
00:07:59,880 --> 00:08:01,500
need to to sign the CLI they are

197
00:08:01,500 --> 00:08:02,880
actually transferring the copyright of

198
00:08:02,880 --> 00:08:04,259
their contributions

199
00:08:04,259 --> 00:08:07,020
and then James is the first thing we'll

200
00:08:07,020 --> 00:08:10,380
do is check the GitHub username it

201
00:08:10,380 --> 00:08:12,539
contains an allow list if the user is

202
00:08:12,539 --> 00:08:14,580
not in this allow list the pull request

203
00:08:14,580 --> 00:08:17,160
will not be processed at all we don't we

204
00:08:17,160 --> 00:08:18,720
don't build anything

205
00:08:18,720 --> 00:08:21,240
and the users can request access

206
00:08:21,240 --> 00:08:24,000
for this for this allow list in doing

207
00:08:24,000 --> 00:08:25,740
also a like a pull request that is

208
00:08:25,740 --> 00:08:28,080
processed like two times per week and

209
00:08:28,080 --> 00:08:30,060
it's manually reviewed so we get the

210
00:08:30,060 --> 00:08:31,020
users

211
00:08:31,020 --> 00:08:33,299
that that has a contribute permissions

212
00:08:33,299 --> 00:08:35,940
to content Center accepted manually as

213
00:08:35,940 --> 00:08:38,120
well

214
00:08:39,000 --> 00:08:41,580
then the second stage even if you are an

215
00:08:41,580 --> 00:08:44,700
authorized user the second stage is

216
00:08:44,700 --> 00:08:48,240
static analysis so we get the diff from

217
00:08:48,240 --> 00:08:50,459
the pull request and we we have several

218
00:08:50,459 --> 00:08:53,040
tools there that analyze that div and we

219
00:08:53,040 --> 00:08:55,260
check things for example that if the

220
00:08:55,260 --> 00:08:56,940
pull request is doing a version bump

221
00:08:56,940 --> 00:08:59,040
because it only changed the content data

222
00:08:59,040 --> 00:09:01,560
jaml file with the specific URLs we

223
00:09:01,560 --> 00:09:03,720
check the URLs we check the checksums we

224
00:09:03,720 --> 00:09:05,100
check everything this is looking good

225
00:09:05,100 --> 00:09:07,260
and then we annotate it as a as a

226
00:09:07,260 --> 00:09:09,120
version bump we can detect also things

227
00:09:09,120 --> 00:09:11,600
like hey this is a dependencies bump

228
00:09:11,600 --> 00:09:13,920
which can check the consistency of the

229
00:09:13,920 --> 00:09:15,779
quantitative.dml so everything that we

230
00:09:15,779 --> 00:09:18,060
can check with a with adif analyzing the

231
00:09:18,060 --> 00:09:19,800
file is there before building anything

232
00:09:19,800 --> 00:09:22,620
is done we check that the users are not

233
00:09:22,620 --> 00:09:24,660
touching in any folder for example the

234
00:09:24,660 --> 00:09:27,000
configuration folder that we have we

235
00:09:27,000 --> 00:09:28,680
have very little but we have something

236
00:09:28,680 --> 00:09:30,420
they are not allowed of course of modify

237
00:09:30,420 --> 00:09:31,440
anything if they are touching the

238
00:09:31,440 --> 00:09:33,600
configuration folder then the the pull

239
00:09:33,600 --> 00:09:36,560
request stops

240
00:09:39,660 --> 00:09:42,480
then the next stage are some quality

241
00:09:42,480 --> 00:09:44,820
checks we have here we are using two

242
00:09:44,820 --> 00:09:46,680
tools here we are using first the GitHub

243
00:09:46,680 --> 00:09:48,899
GitHub actions and we are using some

244
00:09:48,899 --> 00:09:51,779
LinkedIn there okay it's not a strict

245
00:09:51,779 --> 00:09:53,580
security measure but if you are doing

246
00:09:53,580 --> 00:09:55,500
something weird it is likely that this

247
00:09:55,500 --> 00:09:58,200
this quality checks might raise an an

248
00:09:58,200 --> 00:09:59,459
area if you are doing I don't know

249
00:09:59,459 --> 00:10:01,200
trying to obfuscate something or

250
00:10:01,200 --> 00:10:03,720
something a linter can can easily say

251
00:10:03,720 --> 00:10:05,459
Hey you are doing something weird here

252
00:10:05,459 --> 00:10:08,100
and then we will have some some insights

253
00:10:08,100 --> 00:10:10,620
about that and also in the Jenkins side

254
00:10:10,620 --> 00:10:12,300
we are running some of our quality

255
00:10:12,300 --> 00:10:14,700
checks uh that Bitcoin hey for example

256
00:10:14,700 --> 00:10:16,260
they check that the recipe itself

257
00:10:16,260 --> 00:10:18,899
doesn't contain any URL for example or

258
00:10:18,899 --> 00:10:20,459
it's not trying to do whatever you get

259
00:10:20,459 --> 00:10:22,019
or it's not trying to do something that

260
00:10:22,019 --> 00:10:23,519
is trying to connect to the to the

261
00:10:23,519 --> 00:10:26,640
outside so we run also some quality and

262
00:10:26,640 --> 00:10:29,660
Security checks there

263
00:10:30,779 --> 00:10:33,839
then we get to the bills when we are

264
00:10:33,839 --> 00:10:36,000
actually sending the job to the to the

265
00:10:36,000 --> 00:10:37,980
bill agents and they need to start

266
00:10:37,980 --> 00:10:39,720
building and this is the first thing

267
00:10:39,720 --> 00:10:41,580
that is a bit more more delicate because

268
00:10:41,580 --> 00:10:43,860
so far we have been using temporary

269
00:10:43,860 --> 00:10:45,899
ports so everything that has been

270
00:10:45,899 --> 00:10:48,480
running so far runs in a in a pod that

271
00:10:48,480 --> 00:10:50,640
is is created on the Fly and is

272
00:10:50,640 --> 00:10:52,320
destroyed after so even if you get

273
00:10:52,320 --> 00:10:54,420
access to that Port it will be a

274
00:10:54,420 --> 00:10:56,459
completely isolated it doesn't have any

275
00:10:56,459 --> 00:10:58,079
permissions and and whatever you do

276
00:10:58,079 --> 00:10:59,940
there will stay there and will be

277
00:10:59,940 --> 00:11:01,260
destroyed

278
00:11:01,260 --> 00:11:03,779
but here we also need to build with

279
00:11:03,779 --> 00:11:05,940
Windows and Mac and of course as you can

280
00:11:05,940 --> 00:11:08,760
imagine that that is also a a problem so

281
00:11:08,760 --> 00:11:11,399
for that the best that we we are able to

282
00:11:11,399 --> 00:11:14,640
do so far is we we have automated those

283
00:11:14,640 --> 00:11:17,160
machines so we are using ansible and we

284
00:11:17,160 --> 00:11:19,019
can periodically rebuild those machines

285
00:11:19,019 --> 00:11:20,760
in case something goes wrong not only

286
00:11:20,760 --> 00:11:23,279
because of security just for or our own

287
00:11:23,279 --> 00:11:24,839
sanity because as you can guess

288
00:11:24,839 --> 00:11:26,700
maintaining this infrastructure at scale

289
00:11:26,700 --> 00:11:30,060
for Windows and OS X it is not that as

290
00:11:30,060 --> 00:11:31,740
nice and kubernetes

291
00:11:31,740 --> 00:11:34,500
so we do it but we also use it as a

292
00:11:34,500 --> 00:11:36,720
measured way let's let's build these

293
00:11:36,720 --> 00:11:38,700
machines from time to time so they are

294
00:11:38,700 --> 00:11:41,579
fresh and they are and they are clean

295
00:11:41,579 --> 00:11:45,000
in that step we also do some some binary

296
00:11:45,000 --> 00:11:46,800
checks this bill is actually building

297
00:11:46,800 --> 00:11:49,380
the binaries so we have some hooks there

298
00:11:49,380 --> 00:11:51,420
that will check hey you said that you

299
00:11:51,420 --> 00:11:53,279
were building a third library is there

300
00:11:53,279 --> 00:11:56,279
an actual dll Library here are the I'll

301
00:11:56,279 --> 00:11:57,959
say I'll say the magic numbers of the

302
00:11:57,959 --> 00:11:59,640
dealer whatever whatever we can check

303
00:11:59,640 --> 00:12:02,459
about these binaries created we also we

304
00:12:02,459 --> 00:12:04,380
also checked the artifact that has been

305
00:12:04,380 --> 00:12:08,339
built and finally everything that is

306
00:12:08,339 --> 00:12:11,100
built at this stage is put in an

307
00:12:11,100 --> 00:12:13,560
independent isolated artifactory repo

308
00:12:13,560 --> 00:12:15,360
that is created on the Fly for this

309
00:12:15,360 --> 00:12:17,760
specific pull request so even if you get

310
00:12:17,760 --> 00:12:19,860
access to this to this stage and you

311
00:12:19,860 --> 00:12:21,779
create some malicious packages and they

312
00:12:21,779 --> 00:12:23,940
are uploaded by this process they will

313
00:12:23,940 --> 00:12:25,440
not be uploaded to the production report

314
00:12:25,440 --> 00:12:27,899
they are uploaded to a clean independent

315
00:12:27,899 --> 00:12:30,300
repo for from independent also from

316
00:12:30,300 --> 00:12:33,439
every other pull request

317
00:12:34,579 --> 00:12:37,640
and finally the manual review

318
00:12:37,640 --> 00:12:40,680
we require these for anything to be

319
00:12:40,680 --> 00:12:42,420
merged into Conan Center

320
00:12:42,420 --> 00:12:44,839
and we're required in this case two

321
00:12:44,839 --> 00:12:47,639
positive reviews one review from the

322
00:12:47,639 --> 00:12:50,399
from our official reviewers these are

323
00:12:50,399 --> 00:12:52,200
people that we have selected from the

324
00:12:52,200 --> 00:12:53,880
community like heavy contributors to

325
00:12:53,880 --> 00:12:55,920
Conan Center people that we have been

326
00:12:55,920 --> 00:12:58,079
talking to them we have been doing video

327
00:12:58,079 --> 00:13:00,120
conferences with them and we meet them

328
00:13:00,120 --> 00:13:03,600
so we put them in an allowed list and we

329
00:13:03,600 --> 00:13:06,060
made them official reviewers so they can

330
00:13:06,060 --> 00:13:09,300
do a positive review and that counts and

331
00:13:09,300 --> 00:13:11,279
then it also requires a positive review

332
00:13:11,279 --> 00:13:13,139
from a maintainer

333
00:13:13,139 --> 00:13:15,899
and this is the stage where where the

334
00:13:15,899 --> 00:13:18,360
the reviewers will will care for hey

335
00:13:18,360 --> 00:13:20,160
let's do the due diligence of what is

336
00:13:20,160 --> 00:13:21,480
happening here

337
00:13:21,480 --> 00:13:23,820
and they will do checks that are

338
00:13:23,820 --> 00:13:25,440
otherwise difficult to automate for

339
00:13:25,440 --> 00:13:27,480
example is the URL that is being used

340
00:13:27,480 --> 00:13:30,300
the real URL of the project

341
00:13:30,300 --> 00:13:32,519
is the checksum there is everything

342
00:13:32,519 --> 00:13:35,820
correct is using a some recipes might be

343
00:13:35,820 --> 00:13:37,200
using mirror for example because the

344
00:13:37,200 --> 00:13:38,720
network might be flacky or the original

345
00:13:38,720 --> 00:13:42,779
source is also a bit a bit unstable so

346
00:13:42,779 --> 00:13:44,279
if there are mirrors we need to check

347
00:13:44,279 --> 00:13:46,920
the mirrors as well so everything that a

348
00:13:46,920 --> 00:13:49,980
developer will will do is done at this

349
00:13:49,980 --> 00:13:52,279
stage

350
00:13:52,800 --> 00:13:55,620
and finally when everything is good when

351
00:13:55,620 --> 00:13:57,899
everything is clean only at this stage

352
00:13:57,899 --> 00:14:01,440
they merge and promote mechanism kicks

353
00:14:01,440 --> 00:14:02,820
in

354
00:14:02,820 --> 00:14:06,360
here again we are in a in a new in a new

355
00:14:06,360 --> 00:14:09,540
temporary Port because this this port is

356
00:14:09,540 --> 00:14:11,940
the one that has access right access is

357
00:14:11,940 --> 00:14:14,160
the only one in the whole system that

358
00:14:14,160 --> 00:14:15,920
has right access to the final

359
00:14:15,920 --> 00:14:17,940
artifactory Ripple that is the

360
00:14:17,940 --> 00:14:19,740
production report for for Conan Center

361
00:14:19,740 --> 00:14:22,079
so this is basically a product that is

362
00:14:22,079 --> 00:14:24,480
using the artifactory API to copy to

363
00:14:24,480 --> 00:14:26,639
promote packages from the pull request

364
00:14:26,639 --> 00:14:29,339
repo to the final production report

365
00:14:29,339 --> 00:14:31,380
which is typical good practice for

366
00:14:31,380 --> 00:14:33,839
packets management at a scale in any in

367
00:14:33,839 --> 00:14:36,680
any in any case

368
00:14:37,200 --> 00:14:39,180
besides all these

369
00:14:39,180 --> 00:14:42,060
review process and and contribution

370
00:14:42,060 --> 00:14:44,699
process we try to follow also other best

371
00:14:44,699 --> 00:14:46,860
practices so everything that we can

372
00:14:46,860 --> 00:14:48,959
restrict permissions we do we use

373
00:14:48,959 --> 00:14:50,940
two-factor identification everywhere for

374
00:14:50,940 --> 00:14:53,279
every service that you we can do

375
00:14:53,279 --> 00:14:56,160
every single piece of the system is as

376
00:14:56,160 --> 00:14:58,260
related as possible it was mentioned

377
00:14:58,260 --> 00:15:01,019
before but our images if we can do

378
00:15:01,019 --> 00:15:02,519
something in an image that doesn't have

379
00:15:02,519 --> 00:15:05,040
a cell at all and it's just running some

380
00:15:05,040 --> 00:15:07,260
command or something we do it we try to

381
00:15:07,260 --> 00:15:09,300
maintain things as minimal as possible

382
00:15:09,300 --> 00:15:12,060
we store lots of everything GitHub as a

383
00:15:12,060 --> 00:15:15,060
record this sounds easy but it is

384
00:15:15,060 --> 00:15:17,339
actually cool it doesn't matter once you

385
00:15:17,339 --> 00:15:18,899
are using GitHub pull requests as a

386
00:15:18,899 --> 00:15:20,639
mechanism you do a pull request and it

387
00:15:20,639 --> 00:15:22,440
stays there you cannot remove it you can

388
00:15:22,440 --> 00:15:23,760
remove the source code but the pull

389
00:15:23,760 --> 00:15:26,160
request itself stay there so you cannot

390
00:15:26,160 --> 00:15:28,800
do something try to remove because it

391
00:15:28,800 --> 00:15:31,380
can maintain that information there and

392
00:15:31,380 --> 00:15:33,000
we try to maintain of course everything

393
00:15:33,000 --> 00:15:35,040
all the pieces there updated to the

394
00:15:35,040 --> 00:15:37,639
latest versions

395
00:15:38,220 --> 00:15:40,680
but let's say that

396
00:15:40,680 --> 00:15:42,779
um at some point you got access into our

397
00:15:42,779 --> 00:15:43,560
system

398
00:15:43,560 --> 00:15:45,959
right and then you manage to create some

399
00:15:45,959 --> 00:15:48,300
malicious packages of popular C plus

400
00:15:48,300 --> 00:15:49,380
plus libraries let's say that you

401
00:15:49,380 --> 00:15:52,019
infected boosts or open SSL or certainly

402
00:15:52,019 --> 00:15:54,720
there and you put them in artifactory

403
00:15:54,720 --> 00:15:56,279
Conan Center in the actual production

404
00:15:56,279 --> 00:15:59,820
repo okay this is really bad news but

405
00:15:59,820 --> 00:16:02,399
probably it's not as bad news as you

406
00:16:02,399 --> 00:16:04,440
expected if you if you thought a I'm

407
00:16:04,440 --> 00:16:06,540
gaining access to all those cool

408
00:16:06,540 --> 00:16:09,300
companies Fortune 100 companies using

409
00:16:09,300 --> 00:16:11,220
Conan in production that Diego was

410
00:16:11,220 --> 00:16:12,240
telling before

411
00:16:12,240 --> 00:16:14,820
no this is not the case and as you can

412
00:16:14,820 --> 00:16:17,279
get C plus plus is probably different to

413
00:16:17,279 --> 00:16:19,079
all the other ecosystems out there

414
00:16:19,079 --> 00:16:21,360
before you guys been commenting about

415
00:16:21,360 --> 00:16:23,519
other other languages and other package

416
00:16:23,519 --> 00:16:25,199
managers and Corner was not there it

417
00:16:25,199 --> 00:16:26,760
hasn't been that concerned that far C

418
00:16:26,760 --> 00:16:28,800
plus plus is different the community has

419
00:16:28,800 --> 00:16:30,839
been doing different things for decades

420
00:16:30,839 --> 00:16:32,699
because they didn't even have a package

421
00:16:32,699 --> 00:16:35,100
manager in this case

422
00:16:35,100 --> 00:16:38,279
80 percent eighty percent of the users

423
00:16:38,279 --> 00:16:40,199
are not using Conan Center binaries in

424
00:16:40,199 --> 00:16:41,699
production at all

425
00:16:41,699 --> 00:16:43,740
okay there are and this is goes

426
00:16:43,740 --> 00:16:46,199
proportionally also with the size and

427
00:16:46,199 --> 00:16:48,300
the value of the company if you are one

428
00:16:48,300 --> 00:16:50,759
of those big companies that are using

429
00:16:50,759 --> 00:16:52,680
Conan I can tell you that they are not

430
00:16:52,680 --> 00:16:53,759
using the coins and their binary

431
00:16:53,759 --> 00:16:56,639
simulation none of them are using them

432
00:16:56,639 --> 00:16:58,800
okay so the metrics that we saw before

433
00:16:58,800 --> 00:17:01,620
they are just from the 20 of users that

434
00:17:01,620 --> 00:17:03,720
are actually using those binaries in

435
00:17:03,720 --> 00:17:05,939
production typically hobby users

436
00:17:05,939 --> 00:17:08,339
startups small companies small teams

437
00:17:08,339 --> 00:17:11,099
exploration typically trying out things

438
00:17:11,099 --> 00:17:13,619
but not in production

439
00:17:13,619 --> 00:17:16,619
so what are these companies doing is

440
00:17:16,619 --> 00:17:18,419
something that should be done for every

441
00:17:18,419 --> 00:17:20,099
package manager it was commented before

442
00:17:20,099 --> 00:17:21,599
in a previous talk

443
00:17:21,599 --> 00:17:23,699
so one of the approaches that

444
00:17:23,699 --> 00:17:26,400
approximately 20 of the users are doing

445
00:17:26,400 --> 00:17:28,919
is they are copying the binaries from

446
00:17:28,919 --> 00:17:31,679
Conan Center they do a copy a control

447
00:17:31,679 --> 00:17:33,900
copy typically a developer does some

448
00:17:33,900 --> 00:17:36,179
some audit process they check hey I'm

449
00:17:36,179 --> 00:17:37,980
getting this version and then I'm

450
00:17:37,980 --> 00:17:39,600
copying it into my own artifactory

451
00:17:39,600 --> 00:17:42,240
instance and they they cut access to the

452
00:17:42,240 --> 00:17:45,000
to the Conan Center completely and they

453
00:17:45,000 --> 00:17:47,220
even have many of them you probably

454
00:17:47,220 --> 00:17:49,260
don't imagine because in other words is

455
00:17:49,260 --> 00:17:50,700
unthinkable

456
00:17:50,700 --> 00:17:52,919
but many of these companies they have a

457
00:17:52,919 --> 00:17:55,080
process they have a meeting to be able

458
00:17:55,080 --> 00:17:57,179
to upgrade Boost from one person to the

459
00:17:57,179 --> 00:17:58,080
other

460
00:17:58,080 --> 00:17:59,400
okay so it's not something that happened

461
00:17:59,400 --> 00:18:01,380
hey let's just get the latest version of

462
00:18:01,380 --> 00:18:03,960
of the Boost library from packet so they

463
00:18:03,960 --> 00:18:06,480
have this control copy from time to time

464
00:18:06,480 --> 00:18:09,480
and that time might be two months

465
00:18:09,480 --> 00:18:12,179
some maybe it's not best for today get

466
00:18:12,179 --> 00:18:14,940
the latest a newest version for for a

467
00:18:14,940 --> 00:18:16,919
library but it's very secure from the

468
00:18:16,919 --> 00:18:18,780
supply chain attack point of view

469
00:18:18,780 --> 00:18:20,700
because those binaries they are not

470
00:18:20,700 --> 00:18:23,460
easily getting into their organization

471
00:18:23,460 --> 00:18:25,799
and even though that was only 20 of the

472
00:18:25,799 --> 00:18:29,400
users 60 of the users and all of the

473
00:18:29,400 --> 00:18:31,860
important ones they are doing this they

474
00:18:31,860 --> 00:18:33,360
are building the packages from sources

475
00:18:33,360 --> 00:18:34,919
they are actually doing the due

476
00:18:34,919 --> 00:18:37,320
diligence over the Conan recipes and

477
00:18:37,320 --> 00:18:39,059
they are building the binaries from

478
00:18:39,059 --> 00:18:41,900
source and we are very happy about this

479
00:18:41,900 --> 00:18:44,460
owning your own binaries is a good thing

480
00:18:44,460 --> 00:18:48,480
to do so hey so all of this for nothing

481
00:18:48,480 --> 00:18:51,299
what is Colon Center worth then the

482
00:18:51,299 --> 00:18:53,400
knowledge base contained in the Conan

483
00:18:53,400 --> 00:18:55,620
Center repo is huge Building C plus plus

484
00:18:55,620 --> 00:18:57,780
is a challenge building the the third

485
00:18:57,780 --> 00:18:59,520
party libraries out there is very

486
00:18:59,520 --> 00:19:01,200
complicated Conan Center contains the

487
00:19:01,200 --> 00:19:04,140
recipes instead of a readme that it

488
00:19:04,140 --> 00:19:06,240
automates how a library is built from

489
00:19:06,240 --> 00:19:09,000
source for Windows for Linux for mac and

490
00:19:09,000 --> 00:19:11,220
that is super valuable and then Conan

491
00:19:11,220 --> 00:19:13,679
can automate hey you create the binaries

492
00:19:13,679 --> 00:19:15,419
I short the binaries and then you don't

493
00:19:15,419 --> 00:19:17,100
need to rebuild them from Source I will

494
00:19:17,100 --> 00:19:18,840
be serving you your own binary that you

495
00:19:18,840 --> 00:19:21,179
created for all the next build that you

496
00:19:21,179 --> 00:19:23,840
that you are doing

497
00:19:24,539 --> 00:19:27,720
okay since uh also since uh Jay from

498
00:19:27,720 --> 00:19:30,360
acquired video the last year we have

499
00:19:30,360 --> 00:19:31,919
been also working with the security team

500
00:19:31,919 --> 00:19:33,780
at the afrobe and we have been doing

501
00:19:33,780 --> 00:19:36,360
several improvements so I'm going to

502
00:19:36,360 --> 00:19:38,100
tell you a little bit about our ongoing

503
00:19:38,100 --> 00:19:39,539
work

504
00:19:39,539 --> 00:19:41,940
first we have been checking hey out of

505
00:19:41,940 --> 00:19:44,820
the Conan Center binaries

506
00:19:44,820 --> 00:19:47,100
um the best they can they can be for

507
00:19:47,100 --> 00:19:50,400
example because GCC is not activated by

508
00:19:50,400 --> 00:19:52,559
default some some compiler flags that

509
00:19:52,559 --> 00:19:55,380
are considered to be secured and are

510
00:19:55,380 --> 00:19:57,179
considered to be a good a good practice

511
00:19:57,179 --> 00:19:59,400
for security and by default they are not

512
00:19:59,400 --> 00:20:00,299
active

513
00:20:00,299 --> 00:20:02,280
so we have been checking these things

514
00:20:02,280 --> 00:20:04,559
and we are starting we implemented a way

515
00:20:04,559 --> 00:20:07,679
to inject these compiler Flags to any

516
00:20:07,679 --> 00:20:09,179
build system because Conan Center

517
00:20:09,179 --> 00:20:10,380
contains

518
00:20:10,380 --> 00:20:12,299
packages that are built with cmake or

519
00:20:12,299 --> 00:20:14,700
with Meson or without the tools so

520
00:20:14,700 --> 00:20:17,460
corner now now knows how to inject

521
00:20:17,460 --> 00:20:20,400
compiler flags for every project that it

522
00:20:20,400 --> 00:20:22,799
contains so in this way we can inject

523
00:20:22,799 --> 00:20:25,140
The f-stack Protector strong flag

524
00:20:25,140 --> 00:20:27,660
and in an easy way that both Conan

525
00:20:27,660 --> 00:20:30,419
Center can do it and the users that are

526
00:20:30,419 --> 00:20:32,100
building from Source the binaries they

527
00:20:32,100 --> 00:20:34,500
can also do it and start to use this

528
00:20:34,500 --> 00:20:37,980
this practices by default

529
00:20:37,980 --> 00:20:39,960
is not always possible because some

530
00:20:39,960 --> 00:20:41,520
things change the ABI the binary

531
00:20:41,520 --> 00:20:43,440
compatibility in this case we are not

532
00:20:43,440 --> 00:20:44,880
doing that but we have investigated

533
00:20:44,880 --> 00:20:47,880
which ones does and what not we have

534
00:20:47,880 --> 00:20:49,440
also been implemented package signing

535
00:20:49,440 --> 00:20:52,080
not only because it's important to know

536
00:20:52,080 --> 00:20:53,820
the authority and having the practices

537
00:20:53,820 --> 00:20:56,760
Integrity value but also because the

538
00:20:56,760 --> 00:20:58,620
ecosystem is also becoming a bit better

539
00:20:58,620 --> 00:21:00,780
there are other providers that they want

540
00:21:00,780 --> 00:21:02,880
to start and even companies that they

541
00:21:02,880 --> 00:21:04,559
are starting to distribute Quantum

542
00:21:04,559 --> 00:21:06,660
packages to their own customers at the

543
00:21:06,660 --> 00:21:09,000
same time so if the system is becoming

544
00:21:09,000 --> 00:21:10,919
more Federated

545
00:21:10,919 --> 00:21:14,520
um then he is becoming more important to

546
00:21:14,520 --> 00:21:16,679
know the origin who who is this package

547
00:21:16,679 --> 00:21:20,280
from is this package signed and so this

548
00:21:20,280 --> 00:21:22,799
is what we have been adding so in this

549
00:21:22,799 --> 00:21:24,539
case for corner to zero because it's a

550
00:21:24,539 --> 00:21:25,799
breaking change we couldn't do it in

551
00:21:25,799 --> 00:21:27,380
Quantum one which is the current version

552
00:21:27,380 --> 00:21:31,500
we added a package signing plugin a way

553
00:21:31,500 --> 00:21:34,020
that anyone can sign their packages with

554
00:21:34,020 --> 00:21:36,059
the tools they want is basically

555
00:21:36,059 --> 00:21:38,120
implementing those two functions there

556
00:21:38,120 --> 00:21:40,860
uh one the sign-in function is called

557
00:21:40,860 --> 00:21:42,659
when you are uploading packages because

558
00:21:42,659 --> 00:21:44,159
developers can create packages locally

559
00:21:44,159 --> 00:21:45,179
all the time they don't want to be

560
00:21:45,179 --> 00:21:46,919
signing all those packages so packages

561
00:21:46,919 --> 00:21:50,460
are assigned at upload time and packages

562
00:21:50,460 --> 00:21:52,740
are verified when you are downloading

563
00:21:52,740 --> 00:21:55,200
them from the servers so we have these

564
00:21:55,200 --> 00:21:58,100
two extension points you implement them

565
00:21:58,100 --> 00:22:02,700
and then it works we sign everything we

566
00:22:02,700 --> 00:22:04,320
sign not only the binaries but if you

567
00:22:04,320 --> 00:22:07,200
recall iOS 78 the recipe itself is an

568
00:22:07,200 --> 00:22:09,539
artifact that this is stored in in the

569
00:22:09,539 --> 00:22:11,400
server as well so even if for someone

570
00:22:11,400 --> 00:22:13,559
reason you didn't upload the binaries

571
00:22:13,559 --> 00:22:17,539
the recipe is also signed as well

572
00:22:18,419 --> 00:22:21,539
and we besides the plugin which is built

573
00:22:21,539 --> 00:22:23,100
in we are also providing a reference

574
00:22:23,100 --> 00:22:25,440
implementation with zip store okay we

575
00:22:25,440 --> 00:22:27,720
are using the recore and it's an

576
00:22:27,720 --> 00:22:29,580
implementation that is very easy to

577
00:22:29,580 --> 00:22:31,380
configure you only need to call Conan

578
00:22:31,380 --> 00:22:33,480
config install and then a URL of the

579
00:22:33,480 --> 00:22:35,820
repo and then you get this this Secret

580
00:22:35,820 --> 00:22:38,520
store sign in plugin we will use it in

581
00:22:38,520 --> 00:22:41,520
corner Center Conan Center packages once

582
00:22:41,520 --> 00:22:43,679
colon to zero is finally out and

583
00:22:43,679 --> 00:22:44,940
unstable

584
00:22:44,940 --> 00:22:46,559
they will start signing the packages

585
00:22:46,559 --> 00:22:49,020
okay and this implementation will also

586
00:22:49,020 --> 00:22:51,600
be public so anyone can sign their own

587
00:22:51,600 --> 00:22:53,340
packages providing their own their own

588
00:22:53,340 --> 00:22:56,899
signature their own keys

589
00:22:57,960 --> 00:23:00,960
okay to finalize uh my presentation

590
00:23:00,960 --> 00:23:03,059
today I would like to to discuss a

591
00:23:03,059 --> 00:23:05,280
little bit about the solution

592
00:23:05,280 --> 00:23:07,500
because yeah you can say Okay that was

593
00:23:07,500 --> 00:23:11,600
easy Conan only only has 1400 recipes

594
00:23:11,600 --> 00:23:14,760
different different packets

595
00:23:14,760 --> 00:23:17,520
plus the number of versions plus the

596
00:23:17,520 --> 00:23:19,860
number of binaries is not is not that

597
00:23:19,860 --> 00:23:21,059
huge compared with the number of

598
00:23:21,059 --> 00:23:22,919
different packets that the npm can

599
00:23:22,919 --> 00:23:26,460
contain for example but it is also true

600
00:23:26,460 --> 00:23:28,440
that we also have for because from the

601
00:23:28,440 --> 00:23:30,900
full content team only four people are

602
00:23:30,900 --> 00:23:32,340
working in Conan Center

603
00:23:32,340 --> 00:23:34,500
okay and the number of official official

604
00:23:34,500 --> 00:23:38,100
reviewers is 15 official reviewers so

605
00:23:38,100 --> 00:23:39,600
it's also a small numbers

606
00:23:39,600 --> 00:23:42,179
so far and this is not a cold to be

607
00:23:42,179 --> 00:23:44,940
hacked okay we have had no security

608
00:23:44,940 --> 00:23:46,500
instance

609
00:23:46,500 --> 00:23:49,679
okay it is true that some of the easy

610
00:23:49,679 --> 00:23:51,919
security the incidents that other other

611
00:23:51,919 --> 00:23:54,900
systems have had in the past like for

612
00:23:54,900 --> 00:23:57,299
example the color dot yes

613
00:23:57,299 --> 00:24:01,020
even if the the package Creator even in

614
00:24:01,020 --> 00:24:04,500
the library owner wants to hijack their

615
00:24:04,500 --> 00:24:06,960
own Library it is not possible

616
00:24:06,960 --> 00:24:09,059
because one thing is the library and one

617
00:24:09,059 --> 00:24:10,799
thing is the recipe the pull request

618
00:24:10,799 --> 00:24:13,440
that you need to do to connect Center to

619
00:24:13,440 --> 00:24:16,320
have your recipe include that process by

620
00:24:16,320 --> 00:24:18,240
the way probably it was not that clear

621
00:24:18,240 --> 00:24:21,179
before but that is also running a test

622
00:24:21,179 --> 00:24:23,159
of the package if for some reason you

623
00:24:23,159 --> 00:24:25,140
are putting the the colors yes in an

624
00:24:25,140 --> 00:24:27,179
infinite Loop then it's going to block

625
00:24:27,179 --> 00:24:29,880
the the construction of the package will

626
00:24:29,880 --> 00:24:32,340
fail okay something that our pipeline

627
00:24:32,340 --> 00:24:34,200
would easily capture and will easily

628
00:24:34,200 --> 00:24:36,600
block even even for the library author

629
00:24:36,600 --> 00:24:38,520
laborator cannot do that

630
00:24:38,520 --> 00:24:42,419
okay a the same for for uh for other

631
00:24:42,419 --> 00:24:45,059
attacks if even if someone is able to to

632
00:24:45,059 --> 00:24:48,000
gain access to the GitHub user of some

633
00:24:48,000 --> 00:24:49,679
contributor that has already accessed

634
00:24:49,679 --> 00:24:51,120
their pull requests are going to be

635
00:24:51,120 --> 00:24:53,100
reviewed no matter if they contribute to

636
00:24:53,100 --> 00:24:55,620
the original originally some package no

637
00:24:55,620 --> 00:24:57,480
matter if they are the library author

638
00:24:57,480 --> 00:24:59,460
that created that the specific C plus

639
00:24:59,460 --> 00:25:01,799
plus library that is going through the

640
00:25:01,799 --> 00:25:04,039
process

641
00:25:06,840 --> 00:25:09,780
so the question here is is this

642
00:25:09,780 --> 00:25:13,200
something that is worth to be considered

643
00:25:13,200 --> 00:25:14,820
for other Technologies

644
00:25:14,820 --> 00:25:18,600
because honestly some other Technologies

645
00:25:18,600 --> 00:25:20,700
has been super great I'm a happy users

646
00:25:20,700 --> 00:25:23,580
of them but let's be honest is they are

647
00:25:23,580 --> 00:25:25,740
not very secure so something has to be

648
00:25:25,740 --> 00:25:28,260
done I think IPI has started to do

649
00:25:28,260 --> 00:25:30,960
something with a one percent of critical

650
00:25:30,960 --> 00:25:33,360
projects and asking us to use two-factor

651
00:25:33,360 --> 00:25:35,159
authentication to be able to upload our

652
00:25:35,159 --> 00:25:37,380
own packages so we cannot be hijacked

653
00:25:37,380 --> 00:25:40,380
and someone can upload a Conan client

654
00:25:40,380 --> 00:25:42,419
that would be a disaster on our behalf

655
00:25:42,419 --> 00:25:44,220
because they gain access to our account

656
00:25:44,220 --> 00:25:47,700
okay so this is a first step but is the

657
00:25:47,700 --> 00:25:49,740
review process something that is is

658
00:25:49,740 --> 00:25:52,140
doable at a scale I think Maven has done

659
00:25:52,140 --> 00:25:54,779
something like related but the other

660
00:25:54,779 --> 00:25:57,900
maybe it is as also has been commented

661
00:25:57,900 --> 00:25:59,940
before I think the docker images this

662
00:25:59,940 --> 00:26:00,960
this morning

663
00:26:00,960 --> 00:26:03,000
all the central package management they

664
00:26:03,000 --> 00:26:05,279
follow operator distribution in our case

665
00:26:05,279 --> 00:26:09,000
I can give I can tell you that from that

666
00:26:09,000 --> 00:26:12,360
1400 recipes only 100 recipes they

667
00:26:12,360 --> 00:26:14,580
account for 80 of all the downloads from

668
00:26:14,580 --> 00:26:16,320
Conan Center

669
00:26:16,320 --> 00:26:19,020
okay so let's say let's move that to the

670
00:26:19,020 --> 00:26:21,659
other Pakistan can we review maybe the

671
00:26:21,659 --> 00:26:23,820
one percent or five percent of the most

672
00:26:23,820 --> 00:26:27,480
popular packages in npm or Pi Pi maybe

673
00:26:27,480 --> 00:26:29,760
we can maybe we can scale the number of

674
00:26:29,760 --> 00:26:33,020
reviews to 300.

675
00:26:34,679 --> 00:26:38,220
okay and to finalize

676
00:26:38,220 --> 00:26:40,860
um how what has been our approach for

677
00:26:40,860 --> 00:26:43,980
Corner Center security is just a simple

678
00:26:43,980 --> 00:26:46,860
one it's a very constrained process we

679
00:26:46,860 --> 00:26:49,020
only accept packages from sources from

680
00:26:49,020 --> 00:26:51,240
pull requests we have a lot of

681
00:26:51,240 --> 00:26:53,279
automation we do lots of automated

682
00:26:53,279 --> 00:26:56,400
checks and of course best practices

683
00:26:56,400 --> 00:26:58,860
around our system to be secure and we

684
00:26:58,860 --> 00:27:00,779
have a manual review process with due

685
00:27:00,779 --> 00:27:03,059
diligence of what is happening there

686
00:27:03,059 --> 00:27:06,559
okay we keep constantly working on that

687
00:27:06,559 --> 00:27:09,059
in our future is is we are going to

688
00:27:09,059 --> 00:27:10,740
deploy it has been already implemented

689
00:27:10,740 --> 00:27:12,179
but the package signing and robots

690
00:27:12,179 --> 00:27:14,279
Define the binaries is already there it

691
00:27:14,279 --> 00:27:16,919
will be part of after 2-0 sometime soon

692
00:27:16,919 --> 00:27:20,400
we will build more user Gates checking

693
00:27:20,400 --> 00:27:21,960
who is doing pull request to Conan

694
00:27:21,960 --> 00:27:23,760
Center deactivating accounts when they

695
00:27:23,760 --> 00:27:28,159
are not active doing uh I say how many

696
00:27:28,159 --> 00:27:30,659
months old is a GitHub account before

697
00:27:30,659 --> 00:27:33,179
getting uh before giving them access we

698
00:27:33,179 --> 00:27:35,100
are going to automate those checks that

699
00:27:35,100 --> 00:27:37,500
sometimes are manual too we are creating

700
00:27:37,500 --> 00:27:39,480
s-bombs we have been creating

701
00:27:39,480 --> 00:27:41,039
artifactory build info which is

702
00:27:41,039 --> 00:27:43,980
proprietary for for artifactory but the

703
00:27:43,980 --> 00:27:45,720
s-bomb is a standard and we will create

704
00:27:45,720 --> 00:27:47,940
them so it can be also integrated with

705
00:27:47,940 --> 00:27:49,860
other security tools

706
00:27:49,860 --> 00:27:52,440
and it has been working for Conan so far

707
00:27:52,440 --> 00:27:54,960
uh great because

708
00:27:54,960 --> 00:27:57,720
yeah the ecosystem scale is manageable

709
00:27:57,720 --> 00:27:58,679
for us

710
00:27:58,679 --> 00:28:00,779
okay and also because Building C plus

711
00:28:00,779 --> 00:28:03,120
plus is so challenging that if you want

712
00:28:03,120 --> 00:28:05,580
to hack you want to gain reputation in

713
00:28:05,580 --> 00:28:07,500
our system you are going to have to work

714
00:28:07,500 --> 00:28:10,740
a lot before you you become a popular

715
00:28:10,740 --> 00:28:12,240
contributor to Corner Center you are

716
00:28:12,240 --> 00:28:14,640
going to have to build a few C plus

717
00:28:14,640 --> 00:28:16,980
libraries third party libraries and that

718
00:28:16,980 --> 00:28:18,600
is challenging it's way more challenging

719
00:28:18,600 --> 00:28:22,020
than throwing an attack to npm or Pipi

720
00:28:22,020 --> 00:28:23,880
and within that this is something that

721
00:28:23,880 --> 00:28:26,220
can be a scale and is something to be

722
00:28:26,220 --> 00:28:28,140
considered for other communities it can

723
00:28:28,140 --> 00:28:30,539
be done is working great and something

724
00:28:30,539 --> 00:28:32,940
has to be done in our opinion

725
00:28:32,940 --> 00:28:35,159
and thank you if you want any more

726
00:28:35,159 --> 00:28:37,020
information about this you can go to the

727
00:28:37,020 --> 00:28:39,779
current.io page and if you find

728
00:28:39,779 --> 00:28:41,820
something we also have a back Bounty

729
00:28:41,820 --> 00:28:43,919
program so that's the the URL as well

730
00:28:43,919 --> 00:28:45,900
please submit your your findings there

731
00:28:45,900 --> 00:28:48,539
and if someone wants to reach me or talk

732
00:28:48,539 --> 00:28:49,980
to me I will be here after the session

733
00:28:49,980 --> 00:28:51,539
as well and that is my Twitter handled

734
00:28:51,539 --> 00:28:56,299
on hesitate to write to me too thank you

735
00:28:57,840 --> 00:28:59,039
thank you

736
00:28:59,039 --> 00:29:01,740
time for questions

737
00:29:01,740 --> 00:29:04,140
one question only hi there a very

738
00:29:04,140 --> 00:29:05,820
interesting talk

739
00:29:05,820 --> 00:29:09,299
um thank you so it's too bad I have a

740
00:29:09,299 --> 00:29:11,279
two-part question but I'll just ask the

741
00:29:11,279 --> 00:29:12,900
first I'll make a comment first about

742
00:29:12,900 --> 00:29:14,039
the first one that'll move the second

743
00:29:14,039 --> 00:29:15,779
one which is

744
00:29:15,779 --> 00:29:17,940
um a while ago I pointed out a bunch of

745
00:29:17,940 --> 00:29:19,440
problems with Linux package managers

746
00:29:19,440 --> 00:29:20,940
which led to them using a different

747
00:29:20,940 --> 00:29:22,200
signing model

748
00:29:22,200 --> 00:29:24,059
and one community that didn't do this

749
00:29:24,059 --> 00:29:25,679
was slackware because they said everyone

750
00:29:25,679 --> 00:29:27,299
could just download and read the source

751
00:29:27,299 --> 00:29:29,520
for themselves and that did not turn out

752
00:29:29,520 --> 00:29:31,860
well for them so that's my first aside

753
00:29:31,860 --> 00:29:34,559
the second question is have you heard of

754
00:29:34,559 --> 00:29:38,340
the underhanded C code contest and do

755
00:29:38,340 --> 00:29:40,620
you understand how easy it is for people

756
00:29:40,620 --> 00:29:42,779
to write code that looks legitimate

757
00:29:42,779 --> 00:29:45,179
especially in C and C plus plus and get

758
00:29:45,179 --> 00:29:46,559
it past code review because there's been

759
00:29:46,559 --> 00:29:47,760
a lot of work that's shown that that's

760
00:29:47,760 --> 00:29:50,100
not particularly difficult to do yeah

761
00:29:50,100 --> 00:29:52,320
yeah exactly so that's that's a good

762
00:29:52,320 --> 00:29:54,000
that's a good question I've been a c

763
00:29:54,000 --> 00:29:56,159
plus developer for four decades I I know

764
00:29:56,159 --> 00:29:59,580
how it is so um the thing is we are not

765
00:29:59,580 --> 00:30:02,039
doing any due diligence on the C plus

766
00:30:02,039 --> 00:30:04,260
plus code itself if the library author

767
00:30:04,260 --> 00:30:05,940
is doing something that is really nuts

768
00:30:05,940 --> 00:30:07,380
in their C plus plus code they are going

769
00:30:07,380 --> 00:30:09,360
to be able to obfuscate up we can

770
00:30:09,360 --> 00:30:11,340
control let's say from the origin the

771
00:30:11,340 --> 00:30:14,520
URL this is the official review the

772
00:30:14,520 --> 00:30:17,520
official point of source of that URL and

773
00:30:17,520 --> 00:30:19,559
to the final point it is like they're

774
00:30:19,559 --> 00:30:21,720
going something really weird they are

775
00:30:21,720 --> 00:30:23,700
trying to escape they are trying to do

776
00:30:23,700 --> 00:30:26,640
like remote codes to some place it's

777
00:30:26,640 --> 00:30:28,919
possible that something will break in

778
00:30:28,919 --> 00:30:30,600
the bill because we are running it

779
00:30:30,600 --> 00:30:32,100
actually it's not the same as running in

780
00:30:32,100 --> 00:30:34,260
a developer machine which those chains

781
00:30:34,260 --> 00:30:37,020
will be typically targeted too so if you

782
00:30:37,020 --> 00:30:38,820
try to do a pull request that adds that

783
00:30:38,820 --> 00:30:41,760
are to our system it is possible that

784
00:30:41,760 --> 00:30:43,740
that we will detect but yeah if the

785
00:30:43,740 --> 00:30:46,020
source is obfuscated in the library by

786
00:30:46,020 --> 00:30:48,240
the library author themselves and is

787
00:30:48,240 --> 00:30:50,460
that the official URL for the project

788
00:30:50,460 --> 00:30:52,260
then it's going to be challenging but

789
00:30:52,260 --> 00:30:55,679
that's more a source attack than a

790
00:30:55,679 --> 00:30:57,179
supply chain to the package manager

791
00:30:57,179 --> 00:31:00,559
which is our horoscope here

792
00:31:02,100 --> 00:31:03,600
foreign

793
00:31:03,600 --> 00:31:05,880
okay thank you

794
00:31:05,880 --> 00:31:08,000
thank you

795
00:31:08,000 --> 00:31:11,490
[Applause]

