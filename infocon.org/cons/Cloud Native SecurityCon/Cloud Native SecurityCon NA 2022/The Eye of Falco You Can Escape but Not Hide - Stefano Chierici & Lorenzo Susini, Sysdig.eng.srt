1
00:00:00,000 --> 00:00:03,360
so everyone thanks thanks for joining uh

2
00:00:03,360 --> 00:00:05,940
today we are going to talk about how we

3
00:00:05,940 --> 00:00:07,340
can use file code to monitor

4
00:00:07,340 --> 00:00:09,540
capabilities and all the work that we

5
00:00:09,540 --> 00:00:12,120
have done in order to expand FICO to

6
00:00:12,120 --> 00:00:13,620
monitor probability

7
00:00:13,620 --> 00:00:16,859
uh so let's just introduce ourselves I'm

8
00:00:16,859 --> 00:00:19,199
Stefano and I'm a security researcher at

9
00:00:19,199 --> 00:00:22,199
sysdig and with me today is presenting

10
00:00:22,199 --> 00:00:25,619
uh Lorenzo suzini which is a open source

11
00:00:25,619 --> 00:00:28,619
engineer at sysdig we are both from from

12
00:00:28,619 --> 00:00:31,380
Italy and we are both a Falco

13
00:00:31,380 --> 00:00:32,640
contributor

14
00:00:32,640 --> 00:00:36,719
so let's start for for for today and

15
00:00:36,719 --> 00:00:38,760
let's start with uh talking about

16
00:00:38,760 --> 00:00:40,340
container

17
00:00:40,340 --> 00:00:44,340
isolation so we all know uh container is

18
00:00:44,340 --> 00:00:49,399
is a a great way to uh to deploy our our

19
00:00:49,399 --> 00:00:52,860
uh our application and transport our

20
00:00:52,860 --> 00:00:56,100
code however we also know that

21
00:00:56,100 --> 00:01:00,120
um containers aren't security boundaries

22
00:01:00,120 --> 00:01:04,260
um so what makes container secure and

23
00:01:04,260 --> 00:01:06,720
what make a container resolution are all

24
00:01:06,720 --> 00:01:09,659
the layers that are around containers

25
00:01:09,659 --> 00:01:13,080
and in error reporters some of them but

26
00:01:13,080 --> 00:01:15,119
we have also uh web capabilities second

27
00:01:15,119 --> 00:01:17,760
performer but we have also uh Linux

28
00:01:17,760 --> 00:01:21,180
Linux namespaces and C group for

29
00:01:21,180 --> 00:01:23,820
instance so all these layers come

30
00:01:23,820 --> 00:01:27,479
together to bring a container container

31
00:01:27,479 --> 00:01:28,860
resolution

32
00:01:28,860 --> 00:01:32,420
today for today the main topic will be

33
00:01:32,420 --> 00:01:34,979
capabilities but let's just introduce

34
00:01:34,979 --> 00:01:39,060
also a farmer and second so cover bees

35
00:01:39,060 --> 00:01:40,880
are a way to

36
00:01:40,880 --> 00:01:44,759
restrict uh the Privileges that are

37
00:01:44,759 --> 00:01:48,540
permitted in containers second instead

38
00:01:48,540 --> 00:01:51,659
are is Linux feature that can be used to

39
00:01:51,659 --> 00:01:54,000
restrict ciscos and the argument that we

40
00:01:54,000 --> 00:01:57,479
can pass to to them to Cisco's and also

41
00:01:57,479 --> 00:02:00,780
a farmer is a mandatory Access Control

42
00:02:00,780 --> 00:02:03,479
framework that can be used to add the

43
00:02:03,479 --> 00:02:07,140
tax on programs and we can enforce the

44
00:02:07,140 --> 00:02:10,139
specific programs can have specific

45
00:02:10,139 --> 00:02:13,860
access to objects so for instance we can

46
00:02:13,860 --> 00:02:16,500
say a specific program can never access

47
00:02:16,500 --> 00:02:20,700
or read access to or to I don't know ATC

48
00:02:20,700 --> 00:02:24,599
past 2D but not to ATC Shadow it's also

49
00:02:24,599 --> 00:02:26,520
worth mentioning that

50
00:02:26,520 --> 00:02:27,120
um

51
00:02:27,120 --> 00:02:29,760
by default when when you use Docker and

52
00:02:29,760 --> 00:02:32,160
we and we deploy a container all these

53
00:02:32,160 --> 00:02:34,440
security layers are enabled by default

54
00:02:34,440 --> 00:02:36,319
in order to provide

55
00:02:36,319 --> 00:02:39,780
the least privileged concept and and

56
00:02:39,780 --> 00:02:41,280
that's enabled by default so we don't

57
00:02:41,280 --> 00:02:44,280
need to provide any uh particular Flags

58
00:02:44,280 --> 00:02:47,400
or we'll set particular Flags is all

59
00:02:47,400 --> 00:02:50,760
enabled by default today we talk about

60
00:02:50,760 --> 00:02:53,640
how we can use fileco to since fileco is

61
00:02:53,640 --> 00:02:54,739
able to

62
00:02:54,739 --> 00:02:57,300
to have a visibility over what is going

63
00:02:57,300 --> 00:02:59,760
on inside our container we can also we

64
00:02:59,760 --> 00:03:02,180
extended also a fileco to see

65
00:03:02,180 --> 00:03:05,459
capabilities and which capabilities are

66
00:03:05,459 --> 00:03:07,440
actually available so I'll let Lorenzo

67
00:03:07,440 --> 00:03:09,180
talk about capabilities and how they

68
00:03:09,180 --> 00:03:11,940
works yeah thanks a lot Stefano for

69
00:03:11,940 --> 00:03:14,220
introducing me and let's now jump into

70
00:03:14,220 --> 00:03:17,239
the main topic and well as we all know

71
00:03:17,239 --> 00:03:19,260
traditionally we used to distinguish

72
00:03:19,260 --> 00:03:21,360
Linux processes into two different

73
00:03:21,360 --> 00:03:24,360
categories which are Privileges and

74
00:03:24,360 --> 00:03:27,060
processes and unprivileged ones so we

75
00:03:27,060 --> 00:03:30,720
can say that this model is binary and it

76
00:03:30,720 --> 00:03:32,519
can be risky from a security perspective

77
00:03:32,519 --> 00:03:36,060
this is because basically privileged

78
00:03:36,060 --> 00:03:38,519
processes are those running with

79
00:03:38,519 --> 00:03:40,980
effective user ID equal to zero and it

80
00:03:40,980 --> 00:03:42,840
can basically password kernel permission

81
00:03:42,840 --> 00:03:45,480
checks as we all know and on the other

82
00:03:45,480 --> 00:03:48,840
hand privileged processes instead are

83
00:03:48,840 --> 00:03:50,340
those subject to all current permission

84
00:03:50,340 --> 00:03:52,260
checks and most of the time this is done

85
00:03:52,260 --> 00:03:54,780
using their own effective user-ready or

86
00:03:54,780 --> 00:03:57,680
group ID and from an attacker standpoint

87
00:03:57,680 --> 00:04:01,260
this model is exposable of course by

88
00:04:01,260 --> 00:04:03,379
attacking directly

89
00:04:03,379 --> 00:04:06,659
root processes and once the root process

90
00:04:06,659 --> 00:04:09,120
is compromised the whole system is at

91
00:04:09,120 --> 00:04:11,280
risk of being compromised for this

92
00:04:11,280 --> 00:04:14,159
reason to improve its security model

93
00:04:14,159 --> 00:04:16,760
Linux has implemented the capabilities

94
00:04:16,760 --> 00:04:19,738
and capabilities May are a clear example

95
00:04:19,738 --> 00:04:21,899
of applying and implementing the

96
00:04:21,899 --> 00:04:24,300
principle of list privilege and in fact

97
00:04:24,300 --> 00:04:27,000
as the model States the power of the

98
00:04:27,000 --> 00:04:28,860
super user is splitted into distinct

99
00:04:28,860 --> 00:04:32,520
units that can be independently granted

100
00:04:32,520 --> 00:04:36,240
or revoked and this allow us to run

101
00:04:36,240 --> 00:04:39,300
processes with the minimal set of

102
00:04:39,300 --> 00:04:41,639
privileges that they need and hopefully

103
00:04:41,639 --> 00:04:44,280
an attacker getting in control about the

104
00:04:44,280 --> 00:04:46,259
beginning control on these processes

105
00:04:46,259 --> 00:04:47,780
cannot

106
00:04:47,780 --> 00:04:50,340
compromise fully the system with the

107
00:04:50,340 --> 00:04:52,979
same needs as before and the classic

108
00:04:52,979 --> 00:04:56,880
example about this is the one over of a

109
00:04:56,880 --> 00:04:59,580
web server for instance and before the

110
00:04:59,580 --> 00:05:02,220
introduction of capabilities a web

111
00:05:02,220 --> 00:05:04,740
server needed to run as root only

112
00:05:04,740 --> 00:05:06,479
because it had to open a privileged part

113
00:05:06,479 --> 00:05:10,740
that is a part below 1024.

114
00:05:10,740 --> 00:05:13,139
with capabilities you can map this

115
00:05:13,139 --> 00:05:15,020
specific

116
00:05:15,020 --> 00:05:18,660
privilege to the capability which is in

117
00:05:18,660 --> 00:05:22,100
this case cabinet Mine Service

118
00:05:22,639 --> 00:05:26,940
we can let it not bypass checks for

119
00:05:26,940 --> 00:05:29,400
instance on the file system which is

120
00:05:29,400 --> 00:05:31,979
translating into a completely different

121
00:05:31,979 --> 00:05:34,020
capabilities which is in this in this

122
00:05:34,020 --> 00:05:37,139
case Capital right so since you are here

123
00:05:37,139 --> 00:05:39,600
to implement proper monitoring of

124
00:05:39,600 --> 00:05:41,220
capabilities with the purpose of

125
00:05:41,220 --> 00:05:44,340
detecting attacks our takeovers on this

126
00:05:44,340 --> 00:05:47,340
is that not all capabilities are the

127
00:05:47,340 --> 00:05:49,380
same in terms of privileges they allow

128
00:05:49,380 --> 00:05:52,440
in fact some of them can be defined as

129
00:05:52,440 --> 00:05:55,080
full root equivalent if gained by an

130
00:05:55,080 --> 00:05:58,139
attacker and this is because if an

131
00:05:58,139 --> 00:06:01,440
attacker manages to gain one of them it

132
00:06:01,440 --> 00:06:06,259
can possibly gain all of them with other

133
00:06:06,259 --> 00:06:09,660
successful attacks and as we will show

134
00:06:09,660 --> 00:06:11,160
later

135
00:06:11,160 --> 00:06:15,240
so let's go on and to implement to

136
00:06:15,240 --> 00:06:17,100
implement monitoring for capabilities we

137
00:06:17,100 --> 00:06:18,660
have to better understand how they work

138
00:06:18,660 --> 00:06:21,600
so basically capabilities are usually

139
00:06:21,600 --> 00:06:24,600
divided into three main sets and which

140
00:06:24,600 --> 00:06:26,100
are defective the permitted and

141
00:06:26,100 --> 00:06:29,400
inheritable set and you can see that the

142
00:06:29,400 --> 00:06:32,100
effective the effective set in a certain

143
00:06:32,100 --> 00:06:34,319
sense reflects a little bit the concept

144
00:06:34,319 --> 00:06:37,440
of the effective user ID and in fact

145
00:06:37,440 --> 00:06:39,960
this is the set that the kernel uses to

146
00:06:39,960 --> 00:06:42,240
perform actual permission check

147
00:06:42,240 --> 00:06:44,660
and on the other hand we have the

148
00:06:44,660 --> 00:06:48,000
permitted set which is basically the

149
00:06:48,000 --> 00:06:50,100
super set of all capabilities the

150
00:06:50,100 --> 00:06:52,380
process may have been required and we

151
00:06:52,380 --> 00:06:54,360
can move capabilities from the effective

152
00:06:54,360 --> 00:06:56,639
set to the permitted set to let the

153
00:06:56,639 --> 00:06:59,100
effective set have only the Privileges

154
00:06:59,100 --> 00:07:01,979
needed at a specific point in time

155
00:07:01,979 --> 00:07:04,139
and last button on list the inheritable

156
00:07:04,139 --> 00:07:06,780
set instead is used to control which

157
00:07:06,780 --> 00:07:09,539
capabilities are inerted upon exactly a

158
00:07:09,539 --> 00:07:12,800
system call which is a pretty relevant

159
00:07:12,800 --> 00:07:18,900
example so the narratable set is used to

160
00:07:18,900 --> 00:07:21,380
perform specific

161
00:07:21,380 --> 00:07:24,000
operations by the kernel to compute the

162
00:07:24,000 --> 00:07:26,220
new permitted set as you can see in the

163
00:07:26,220 --> 00:07:27,740
next slide

164
00:07:27,740 --> 00:07:31,080
and yeah so this is how capabilities

165
00:07:31,080 --> 00:07:34,080
changes upon exact fear and what I want

166
00:07:34,080 --> 00:07:36,539
to stress here is that the Cardinal

167
00:07:36,539 --> 00:07:39,360
um uh use uh specific set sort of rules

168
00:07:39,360 --> 00:07:42,539
to change capabilities of a process and

169
00:07:42,539 --> 00:07:44,639
following the previous reasoning we have

170
00:07:44,639 --> 00:07:47,520
to say that the effective set should

171
00:07:47,520 --> 00:07:50,940
start to empty when exactly is performed

172
00:07:50,940 --> 00:07:53,539
this is because we want processes to

173
00:07:53,539 --> 00:07:56,300
manually move with CIS called

174
00:07:56,300 --> 00:07:58,919
capabilities from the permitted sets to

175
00:07:58,919 --> 00:08:01,380
the effective one however the the kernel

176
00:08:01,380 --> 00:08:03,680
also offered

177
00:08:03,680 --> 00:08:07,440
backward compatibilities for those

178
00:08:07,440 --> 00:08:09,180
binaries that can be defined as

179
00:08:09,180 --> 00:08:11,699
capability dumped meaning that they are

180
00:08:11,699 --> 00:08:13,380
not able to move capabilities in between

181
00:08:13,380 --> 00:08:16,800
sets and for doing that the file

182
00:08:16,800 --> 00:08:19,500
effective sets and the file effective

183
00:08:19,500 --> 00:08:22,139
flag sorry it can be used and this is

184
00:08:22,139 --> 00:08:25,560
basically used to move the new permitted

185
00:08:25,560 --> 00:08:28,020
set to the effective set so that that

186
00:08:28,020 --> 00:08:30,419
the process uh doesn't have to move

187
00:08:30,419 --> 00:08:34,260
capabilities using others is called

188
00:08:34,260 --> 00:08:37,559
so uh now let's go back to container

189
00:08:37,559 --> 00:08:39,179
security and see our capabilities

190
00:08:39,179 --> 00:08:42,899
applied to it and in fact when talking

191
00:08:42,899 --> 00:08:44,600
about container security

192
00:08:44,600 --> 00:08:47,060
we basically have two different

193
00:08:47,060 --> 00:08:49,320
possibilities fill out our work with

194
00:08:49,320 --> 00:08:52,560
drums actually so the first one is to

195
00:08:52,560 --> 00:08:54,959
avoid container running as root I think

196
00:08:54,959 --> 00:08:58,740
everybody here knows about this because

197
00:08:58,740 --> 00:09:01,320
basically containers like Stefan was

198
00:09:01,320 --> 00:09:03,240
saying before are not the security

199
00:09:03,240 --> 00:09:06,120
boundary like VMS and if you're not

200
00:09:06,120 --> 00:09:09,360
using username spaces root in the

201
00:09:09,360 --> 00:09:11,399
container is also root on the host

202
00:09:11,399 --> 00:09:14,940
uh but sometimes we want our containers

203
00:09:14,940 --> 00:09:17,100
to run privileges or privileged

204
00:09:17,100 --> 00:09:19,980
operations and we may be tempted to run

205
00:09:19,980 --> 00:09:22,740
down this route so uh what can we do we

206
00:09:22,740 --> 00:09:25,740
can do we can use capabilities as we

207
00:09:25,740 --> 00:09:26,540
said

208
00:09:26,540 --> 00:09:28,680
capabilities on the other hand have the

209
00:09:28,680 --> 00:09:31,019
possibility to selectively choose the

210
00:09:31,019 --> 00:09:32,760
privilege that we want

211
00:09:32,760 --> 00:09:34,560
and anyway you think that since

212
00:09:34,560 --> 00:09:37,380
capabilities are a lot and sometimes

213
00:09:37,380 --> 00:09:39,440
it's really difficult to understand

214
00:09:39,440 --> 00:09:43,440
which capabilities our workload needs we

215
00:09:43,440 --> 00:09:46,519
may end up in certain cases running

216
00:09:46,519 --> 00:09:49,860
excessively privileged containers as

217
00:09:49,860 --> 00:09:50,700
well

218
00:09:50,700 --> 00:09:52,980
and this is for sure not good from a

219
00:09:52,980 --> 00:09:55,620
security standpoint and Stefano will now

220
00:09:55,620 --> 00:09:58,260
show you why and how capabilities can be

221
00:09:58,260 --> 00:10:00,540
used in real attacks

222
00:10:00,540 --> 00:10:02,279
so thanks

223
00:10:02,279 --> 00:10:06,180
um let's now uh deep dive into attacks

224
00:10:06,180 --> 00:10:09,360
on uh container escaping I just reported

225
00:10:09,360 --> 00:10:12,180
this slide just to say basically what we

226
00:10:12,180 --> 00:10:14,220
have said before right so containers

227
00:10:14,220 --> 00:10:17,760
aren't isolated by default and in this

228
00:10:17,760 --> 00:10:20,580
case uh we all know if we deploy a

229
00:10:20,580 --> 00:10:23,279
container as privileged this is far to

230
00:10:23,279 --> 00:10:26,640
be isolated right so of course we are we

231
00:10:26,640 --> 00:10:28,200
are still using container we are still

232
00:10:28,200 --> 00:10:31,320
using Docker but this is far to be an

233
00:10:31,320 --> 00:10:33,200
isolated environment

234
00:10:33,200 --> 00:10:36,300
that's because if we use capabilities

235
00:10:36,300 --> 00:10:37,640
and we see

236
00:10:37,640 --> 00:10:39,839
since we are talking about capabilities

237
00:10:39,839 --> 00:10:42,420
with privileged all the capabilities are

238
00:10:42,420 --> 00:10:44,880
available and all the capabilities can

239
00:10:44,880 --> 00:10:48,000
be used and loaded by a possible attack

240
00:10:48,000 --> 00:10:51,060
so that's just to mention that when we

241
00:10:51,060 --> 00:10:52,920
deploy a container as privilege we need

242
00:10:52,920 --> 00:10:56,339
to be careful that this is needed and we

243
00:10:56,339 --> 00:10:58,500
we need to be super careful of what we

244
00:10:58,500 --> 00:10:59,399
do

245
00:10:59,399 --> 00:11:01,740
so let's start let's start now really

246
00:11:01,740 --> 00:11:02,899
talk about

247
00:11:02,899 --> 00:11:06,180
container skipping attacks and in this

248
00:11:06,180 --> 00:11:07,800
case let's start with the with this

249
00:11:07,800 --> 00:11:11,040
technique with the CIS model capability

250
00:11:11,040 --> 00:11:14,820
so this module is used to load and load

251
00:11:14,820 --> 00:11:17,760
kernel module and for this technique we

252
00:11:17,760 --> 00:11:20,040
have the only requirement here that we

253
00:11:20,040 --> 00:11:22,800
have is uh having the assist model

254
00:11:22,800 --> 00:11:25,260
capability and how it works is pretty

255
00:11:25,260 --> 00:11:27,839
simple so let's say that an attacker is

256
00:11:27,839 --> 00:11:31,140
able to get any uh the initials the

257
00:11:31,140 --> 00:11:34,440
initial foothold in a container and find

258
00:11:34,440 --> 00:11:37,440
out that the disease model capability is

259
00:11:37,440 --> 00:11:39,779
is available and can be used so the

260
00:11:39,779 --> 00:11:43,680
attacker just need to drop the the

261
00:11:43,680 --> 00:11:46,700
module inside the container and since

262
00:11:46,700 --> 00:11:50,279
the module is is loaded in the kernel

263
00:11:50,279 --> 00:11:53,100
all the all the malicious code is going

264
00:11:53,100 --> 00:11:55,740
to be executed in the host so in this in

265
00:11:55,740 --> 00:11:58,740
this example one once we load the

266
00:11:58,740 --> 00:12:02,640
malicious module The Bash reversal is

267
00:12:02,640 --> 00:12:04,200
going to be executed

268
00:12:04,200 --> 00:12:07,740
and so the connection will will be open

269
00:12:07,740 --> 00:12:09,959
from the container those back to the

270
00:12:09,959 --> 00:12:12,839
back to attacker machine and it's also

271
00:12:12,839 --> 00:12:15,480
worth mentioning that uh the attacker

272
00:12:15,480 --> 00:12:17,100
might need to

273
00:12:17,100 --> 00:12:19,440
um to compile the model inside the

274
00:12:19,440 --> 00:12:21,720
container because just to be sure that

275
00:12:21,720 --> 00:12:25,740
the model is gonna is gonna run and and

276
00:12:25,740 --> 00:12:28,980
for this the attacker might need the the

277
00:12:28,980 --> 00:12:30,600
Linux heater installed in the in the

278
00:12:30,600 --> 00:12:32,399
host otherwise it's not possible to run

279
00:12:32,399 --> 00:12:34,500
this attack

280
00:12:34,500 --> 00:12:36,959
um let's just move on with another

281
00:12:36,959 --> 00:12:39,480
technique and in this case we use this

282
00:12:39,480 --> 00:12:43,260
the capability pit race in particular

283
00:12:43,260 --> 00:12:47,760
pit race is used to control other other

284
00:12:47,760 --> 00:12:49,079
processes

285
00:12:49,079 --> 00:12:52,019
but also with pit race we can also

286
00:12:52,019 --> 00:12:56,120
modify the the process memory to inject

287
00:12:56,120 --> 00:12:59,880
arbitrary code and you can also modify

288
00:12:59,880 --> 00:13:03,000
the the pointer extraction in order to

289
00:13:03,000 --> 00:13:06,079
run this

290
00:13:06,079 --> 00:13:09,839
arbitrary code so in in other words with

291
00:13:09,839 --> 00:13:12,959
pitrace we can inject malicious code and

292
00:13:12,959 --> 00:13:15,079
actually execute it so it's pretty

293
00:13:15,079 --> 00:13:16,639
powerful

294
00:13:16,639 --> 00:13:20,040
capability so in this case for this

295
00:13:20,040 --> 00:13:22,040
technique we have three main

296
00:13:22,040 --> 00:13:25,019
requirements so first one is of course

297
00:13:25,019 --> 00:13:28,320
having the CSP Trace available the

298
00:13:28,320 --> 00:13:31,320
second one is apartment we need to have

299
00:13:31,320 --> 00:13:35,579
a farmer set as unconfined or or

300
00:13:35,579 --> 00:13:38,540
allowing pit race and the third one is

301
00:13:38,540 --> 00:13:42,779
the container and those needs to share

302
00:13:42,779 --> 00:13:46,160
the dpid address space

303
00:13:46,160 --> 00:13:49,680
uh so as said before let's say an

304
00:13:49,680 --> 00:13:52,500
attacker has access uh to the to the

305
00:13:52,500 --> 00:13:55,139
container and was able to get initial

306
00:13:55,139 --> 00:13:57,180
access into the container and find out

307
00:13:57,180 --> 00:14:01,380
that see the P Trace capability is is

308
00:14:01,380 --> 00:14:03,600
available so in this case the attacker

309
00:14:03,600 --> 00:14:06,660
just need to drop its own injector with

310
00:14:06,660 --> 00:14:10,019
the with the malicious Shell Code and

311
00:14:10,019 --> 00:14:12,180
find a process that you want to inject

312
00:14:12,180 --> 00:14:15,300
and and just execute the the Shell Code

313
00:14:15,300 --> 00:14:18,420
in this case as we said before since the

314
00:14:18,420 --> 00:14:20,940
the address space is shared between the

315
00:14:20,940 --> 00:14:23,100
container and those

316
00:14:23,100 --> 00:14:25,860
um the the malicious child code is going

317
00:14:25,860 --> 00:14:28,079
to be executed in the host and that's

318
00:14:28,079 --> 00:14:31,440
why if we as as we said before if we

319
00:14:31,440 --> 00:14:34,380
open the reversal there is the the

320
00:14:34,380 --> 00:14:37,079
reversal is going to start the

321
00:14:37,079 --> 00:14:39,839
connection from the container source to

322
00:14:39,839 --> 00:14:42,480
back to the to the attacker machine and

323
00:14:42,480 --> 00:14:44,399
that's another attack but using a

324
00:14:44,399 --> 00:14:46,560
different capability

325
00:14:46,560 --> 00:14:49,320
I'll just close with with

326
00:14:49,320 --> 00:14:51,600
um the last the last example for today

327
00:14:51,600 --> 00:14:54,600
so this attack is a well-known attack

328
00:14:54,600 --> 00:14:57,720
for container escaping uh in this case

329
00:14:57,720 --> 00:15:01,880
it was published on 2019 uh on Twitter

330
00:15:01,880 --> 00:15:05,699
uh in this case the first example that

331
00:15:05,699 --> 00:15:10,279
is reported here on on the left required

332
00:15:10,279 --> 00:15:13,079
a privileged run as privileged a

333
00:15:13,079 --> 00:15:15,440
container runs privileged

334
00:15:15,440 --> 00:15:18,600
after after that a new a new exploit

335
00:15:18,600 --> 00:15:21,120
came out and in this case we just need

336
00:15:21,120 --> 00:15:24,720
the C submin capability in order to to

337
00:15:24,720 --> 00:15:26,000
be successful

338
00:15:26,000 --> 00:15:28,260
for this specific attack we have three

339
00:15:28,260 --> 00:15:31,500
requirements so since admin is one a

340
00:15:31,500 --> 00:15:35,040
farmer with the unconfined or just

341
00:15:35,040 --> 00:15:38,399
allowing the mount operation and also we

342
00:15:38,399 --> 00:15:40,800
need to have a root user inside the

343
00:15:40,800 --> 00:15:43,860
container so to understand how this work

344
00:15:43,860 --> 00:15:47,459
we just need to understand how notifying

345
00:15:47,459 --> 00:15:50,160
or release works and and this is pretty

346
00:15:50,160 --> 00:15:52,980
easy so on if I uh notify your release

347
00:15:52,980 --> 00:15:57,300
is a feature uh in the C group V1 versus

348
00:15:57,300 --> 00:16:00,600
version one and basically if it's

349
00:16:00,600 --> 00:16:03,360
enabled so it's set to one

350
00:16:03,360 --> 00:16:08,060
uh once a container a process terminates

351
00:16:08,060 --> 00:16:10,980
the kernel is going to execute the code

352
00:16:10,980 --> 00:16:13,440
inside the release agent file so

353
00:16:13,440 --> 00:16:15,600
whatever code inside is inside the

354
00:16:15,600 --> 00:16:17,279
release agent is going to be executed by

355
00:16:17,279 --> 00:16:20,339
the kernel and and that's basically the

356
00:16:20,339 --> 00:16:22,860
how the exploit works so just just going

357
00:16:22,860 --> 00:16:25,440
through the code the exploit just create

358
00:16:25,440 --> 00:16:29,699
a directory a directory is mounting the

359
00:16:29,699 --> 00:16:32,639
the C group controller inside this this

360
00:16:32,639 --> 00:16:36,240
director with the the option RDMA and

361
00:16:36,240 --> 00:16:38,959
also is creating the C group

362
00:16:38,959 --> 00:16:42,240
directory inside it also as we as we can

363
00:16:42,240 --> 00:16:44,579
see the the Notifier release is set to

364
00:16:44,579 --> 00:16:46,500
one and as we said you just to enable

365
00:16:46,500 --> 00:16:48,540
the feature and then all the other

366
00:16:48,540 --> 00:16:52,019
commands is done to create the release

367
00:16:52,019 --> 00:16:54,660
agent with the malicious command that we

368
00:16:54,660 --> 00:16:56,639
want to execute in this case it's just

369
00:16:56,639 --> 00:16:59,040
getting the path for from the overlays

370
00:16:59,040 --> 00:17:00,959
and

371
00:17:00,959 --> 00:17:02,699
and the command that we want to execute

372
00:17:02,699 --> 00:17:05,280
so in this case being sh so we actually

373
00:17:05,280 --> 00:17:08,280
we are opening a shell in the in the

374
00:17:08,280 --> 00:17:10,439
host and the last command is just used

375
00:17:10,439 --> 00:17:14,220
to trigger the the exploit uh running an

376
00:17:14,220 --> 00:17:15,959
Eco command

377
00:17:15,959 --> 00:17:18,660
um and that's it so once the Eco command

378
00:17:18,660 --> 00:17:21,660
is going to to terminate uh notify your

379
00:17:21,660 --> 00:17:23,819
releases is is enabled it's going to

380
00:17:23,819 --> 00:17:26,540
trigger uh the workflow and and

381
00:17:26,540 --> 00:17:28,860
executing the malicious command that is

382
00:17:28,860 --> 00:17:33,179
inside the um the release agent uh so

383
00:17:33,179 --> 00:17:35,760
just to recap what we have said

384
00:17:35,760 --> 00:17:37,860
um so far so we have these three

385
00:17:37,860 --> 00:17:41,400
techniques all that the three techniques

386
00:17:41,400 --> 00:17:43,320
that we have presented are using three

387
00:17:43,320 --> 00:17:45,780
different uh capabilities

388
00:17:45,780 --> 00:17:49,260
and so now we let's see

389
00:17:49,260 --> 00:17:53,780
um what we did in in FICO uh in order to

390
00:17:53,780 --> 00:17:57,179
detect those uh this malicious behavior

391
00:17:57,179 --> 00:17:59,039
and how we can and what we can do with

392
00:17:59,039 --> 00:18:01,919
FICO for monitoring abilities

393
00:18:01,919 --> 00:18:04,559
yeah thanks Stefano for doing that with

394
00:18:04,559 --> 00:18:08,100
such examples and so now that we are

395
00:18:08,100 --> 00:18:09,840
aware about talk of abilities work and

396
00:18:09,840 --> 00:18:13,200
how they can be used in real attacks we

397
00:18:13,200 --> 00:18:15,360
want to show you how to monitor them

398
00:18:15,360 --> 00:18:17,940
using Falco so for those of you who

399
00:18:17,940 --> 00:18:20,160
doesn't know about Falco Falco is an

400
00:18:20,160 --> 00:18:22,039
open source project for runtime security

401
00:18:22,039 --> 00:18:24,960
and it can it became the de facto

402
00:18:24,960 --> 00:18:27,179
standard for kubernetes strategic action

403
00:18:27,179 --> 00:18:30,120
it was originally created by sisdig and

404
00:18:30,120 --> 00:18:33,179
then donated to the cncf and it's

405
00:18:33,179 --> 00:18:36,840
currently at incubation level and we

406
00:18:36,840 --> 00:18:40,140
both work for it become better and

407
00:18:40,140 --> 00:18:43,039
better and we always try to improve it

408
00:18:43,039 --> 00:18:46,320
its detection capabilities so another

409
00:18:46,320 --> 00:18:49,200
thing that it's exciting about Falco is

410
00:18:49,200 --> 00:18:52,140
its Vibrant Community and I think that

411
00:18:52,140 --> 00:18:54,660
it's really nice to work in such an

412
00:18:54,660 --> 00:18:56,520
environment because people are really

413
00:18:56,520 --> 00:18:59,100
active and contributing and hopefully

414
00:18:59,100 --> 00:19:01,799
this all that shows an extension that we

415
00:19:01,799 --> 00:19:05,760
made to Falco we'll encourage you to do

416
00:19:05,760 --> 00:19:09,059
the same and improve it and make it

417
00:19:09,059 --> 00:19:10,799
become better and better

418
00:19:10,799 --> 00:19:13,799
so before we dig into the details on how

419
00:19:13,799 --> 00:19:15,720
we extended Falco to monitor

420
00:19:15,720 --> 00:19:17,760
capabilities let me give everybody a

421
00:19:17,760 --> 00:19:21,059
little overview about it and we can say

422
00:19:21,059 --> 00:19:23,340
that Falco is powered by its kernel

423
00:19:23,340 --> 00:19:25,559
module and it's even if you have probe

424
00:19:25,559 --> 00:19:28,500
to collect system calls data directly

425
00:19:28,500 --> 00:19:30,660
from the kernel which is considered the

426
00:19:30,660 --> 00:19:34,799
sorts of truths for our purposes so most

427
00:19:34,799 --> 00:19:37,500
of the event connection components user

428
00:19:37,500 --> 00:19:41,480
in buffer to push events that are

429
00:19:41,480 --> 00:19:46,020
uninfoliated and used in user space

430
00:19:46,020 --> 00:19:49,799
uh in our libraries what I would like to

431
00:19:49,799 --> 00:19:52,500
stress most about this is that there is

432
00:19:52,500 --> 00:19:55,559
a part in one of our libraries that is

433
00:19:55,559 --> 00:19:58,020
responsible for maintaining the state of

434
00:19:58,020 --> 00:20:00,780
the system and this part is of course in

435
00:20:00,780 --> 00:20:04,200
limp Sims as you can see and

436
00:20:04,200 --> 00:20:07,799
um what we you what what we do with this

437
00:20:07,799 --> 00:20:10,460
part of a state is

438
00:20:10,460 --> 00:20:12,980
making it accessible

439
00:20:12,980 --> 00:20:17,700
by conditions and rules and making it

440
00:20:17,700 --> 00:20:19,460
able to write

441
00:20:19,460 --> 00:20:22,320
rules and condition able to spot new

442
00:20:22,320 --> 00:20:25,620
kind of attacks so with this in mind we

443
00:20:25,620 --> 00:20:28,679
realize that Falco was only able to see

444
00:20:28,679 --> 00:20:31,620
in black and white meaning that

445
00:20:31,620 --> 00:20:35,280
uh he was only able to discriminate and

446
00:20:35,280 --> 00:20:38,520
distinguish root and root processes and

447
00:20:38,520 --> 00:20:40,620
we wanted to put some light in that gray

448
00:20:40,620 --> 00:20:44,640
area that capabilities have created

449
00:20:44,640 --> 00:20:46,320
um in between

450
00:20:46,320 --> 00:20:49,020
so to summarize the part of the work

451
00:20:49,020 --> 00:20:52,340
that we have done we can do it in

452
00:20:52,340 --> 00:20:55,799
explaining the two main steps so

453
00:20:55,799 --> 00:20:58,799
basically what we did is that when Falco

454
00:20:58,799 --> 00:21:01,559
starts it needs to be to build the state

455
00:21:01,559 --> 00:21:04,200
of the world that is the state of the

456
00:21:04,200 --> 00:21:07,559
the actual System state at a given point

457
00:21:07,559 --> 00:21:10,740
in time this is when Falco starts and

458
00:21:10,740 --> 00:21:12,480
most of the information used to do this

459
00:21:12,480 --> 00:21:15,419
comes from the frock file system and

460
00:21:15,419 --> 00:21:17,400
fortunately there is a file in the frock

461
00:21:17,400 --> 00:21:20,340
file system which let us retrieve

462
00:21:20,340 --> 00:21:24,120
information about all capabilities of

463
00:21:24,120 --> 00:21:27,360
process and we use this to populate the

464
00:21:27,360 --> 00:21:29,760
initial state

465
00:21:29,760 --> 00:21:32,340
so once this is built

466
00:21:32,340 --> 00:21:34,799
um Falco starts capturing system calls

467
00:21:34,799 --> 00:21:37,980
and keep updating it using system called

468
00:21:37,980 --> 00:21:41,280
Data so what we did is enumerating all

469
00:21:41,280 --> 00:21:42,780
the possible system codes that may

470
00:21:42,780 --> 00:21:46,159
interact with a process and modifying

471
00:21:46,159 --> 00:21:49,500
its own capabilities and we started with

472
00:21:49,500 --> 00:21:51,900
the fork system call which was the

473
00:21:51,900 --> 00:21:54,179
easiest one because basically we only

474
00:21:54,179 --> 00:21:57,179
have to copy the capabilities from the

475
00:21:57,179 --> 00:22:00,960
parent process to the chart to the child

476
00:22:00,960 --> 00:22:04,080
and almost the same goes for the Clone

477
00:22:04,080 --> 00:22:07,380
system calls except for those clone

478
00:22:07,380 --> 00:22:11,580
decks creates new name spaces and

479
00:22:11,580 --> 00:22:14,640
um moreover to push to use the space the

480
00:22:14,640 --> 00:22:18,240
new capabilities also in the exact fear

481
00:22:18,240 --> 00:22:22,080
we modified the event of exactly to push

482
00:22:22,080 --> 00:22:24,179
information about capabilities also in

483
00:22:24,179 --> 00:22:25,320
that case

484
00:22:25,320 --> 00:22:29,280
and last button on list we have also the

485
00:22:29,280 --> 00:22:31,320
possibility to move capabilities in

486
00:22:31,320 --> 00:22:34,679
between sets as we already know and this

487
00:22:34,679 --> 00:22:37,200
is usually done with the capset system

488
00:22:37,200 --> 00:22:41,120
codes and to do so we implemented the

489
00:22:41,120 --> 00:22:43,919
monitoring for that for that system

490
00:22:43,919 --> 00:22:45,780
called from scratch

491
00:22:45,780 --> 00:22:49,020
so in this way we are able to let rules

492
00:22:49,020 --> 00:22:51,780
extract capabilities from the state and

493
00:22:51,780 --> 00:22:54,299
we can write some interesting rules two

494
00:22:54,299 --> 00:22:57,600
spots attacks based on capabilities and

495
00:22:57,600 --> 00:23:00,299
now Stefan will show you what kind of

496
00:23:00,299 --> 00:23:03,059
rules we came up with and hopefully it

497
00:23:03,059 --> 00:23:05,179
is

498
00:23:05,179 --> 00:23:08,280
interesting to see it together

499
00:23:08,280 --> 00:23:10,740
so thanks and thanks to the Lawrence

500
00:23:10,740 --> 00:23:14,280
work on on FICO we are now able to use

501
00:23:14,280 --> 00:23:18,659
capabilities inside filecruz this is a

502
00:23:18,659 --> 00:23:21,780
rule that we created in order to

503
00:23:21,780 --> 00:23:26,360
um to control and detect if someone

504
00:23:26,360 --> 00:23:29,039
deploy a new container with with

505
00:23:29,039 --> 00:23:30,720
excessive capabilities

506
00:23:30,720 --> 00:23:33,419
uh so as you can see here just a two

507
00:23:33,419 --> 00:23:37,020
word on how how FICO rules work

508
00:23:37,020 --> 00:23:39,539
um so the FICO rules are loaded inside

509
00:23:39,539 --> 00:23:43,500
the FICO engine and once a news is

510
00:23:43,500 --> 00:23:46,640
called come in uh FICO engine is able to

511
00:23:46,640 --> 00:23:51,600
check and emerge all the uh all the

512
00:23:51,600 --> 00:23:54,179
rules and checking if if I will match

513
00:23:54,179 --> 00:23:57,480
with the with the Cisco uh is able to

514
00:23:57,480 --> 00:23:59,820
trigger a security alert

515
00:23:59,820 --> 00:24:02,760
and that's how it works so let's see the

516
00:24:02,760 --> 00:24:05,400
condition here so the rule is going to

517
00:24:05,400 --> 00:24:07,260
trigger when we create a new container

518
00:24:07,260 --> 00:24:09,840
with excessive capabilities and in the

519
00:24:09,840 --> 00:24:12,840
macro shows all the capabilities that we

520
00:24:12,840 --> 00:24:15,059
are monitoring in this case and as you

521
00:24:15,059 --> 00:24:18,360
can see there are assist model and see

522
00:24:18,360 --> 00:24:19,679
speed race there are the two

523
00:24:19,679 --> 00:24:21,980
capabilities that we have talked before

524
00:24:21,980 --> 00:24:25,760
uh and in the bottom we can see there

525
00:24:25,760 --> 00:24:30,600
the output from from Falcon and also we

526
00:24:30,600 --> 00:24:33,360
have also uh the the other rule that we

527
00:24:33,360 --> 00:24:36,179
created this is specific for the use

528
00:24:36,179 --> 00:24:38,220
case as we talked before about the

529
00:24:38,220 --> 00:24:41,039
release agent file so as we discussed

530
00:24:41,039 --> 00:24:43,980
before uh the the attackers need to

531
00:24:43,980 --> 00:24:46,140
modify the release agent file in order

532
00:24:46,140 --> 00:24:49,220
to inject the code that you want to

533
00:24:49,220 --> 00:24:52,260
execute and that's mainly where we

534
00:24:52,260 --> 00:24:55,559
create the detection so once the release

535
00:24:55,559 --> 00:25:00,200
agent file is open is open to write a

536
00:25:00,200 --> 00:25:04,440
commands and also the the container as

537
00:25:04,440 --> 00:25:07,440
the the sysadmin capability and the user

538
00:25:07,440 --> 00:25:10,320
is root we are going to write the

539
00:25:10,320 --> 00:25:12,840
security alert and in the bottom we see

540
00:25:12,840 --> 00:25:15,480
uh the output mentioning all the

541
00:25:15,480 --> 00:25:18,360
capabilities available so we can see the

542
00:25:18,360 --> 00:25:21,299
capsys has been is one of them and in

543
00:25:21,299 --> 00:25:23,940
this way we are able to detect with a

544
00:25:23,940 --> 00:25:26,880
very low Force positive

545
00:25:26,880 --> 00:25:30,779
um the the potential malicious behavior

546
00:25:30,779 --> 00:25:33,600
so having said that the sit from my side

547
00:25:33,600 --> 00:25:36,840
I let Lorenzo close the session and

548
00:25:36,840 --> 00:25:39,480
start the the Q a yeah that was

549
00:25:39,480 --> 00:25:41,279
basically it hope you have enjoyed the

550
00:25:41,279 --> 00:25:43,980
salt and if you have some questions feel

551
00:25:43,980 --> 00:25:47,039
free to reach out now or in the Falco

552
00:25:47,039 --> 00:25:51,900
kubernetes slack and that's it I hope

553
00:25:51,900 --> 00:25:53,400
you have enjoyed the talk and you will

554
00:25:53,400 --> 00:25:57,419
use capabilities or try to improve

555
00:25:57,419 --> 00:26:00,240
routes and hopefully contribute to the

556
00:26:00,240 --> 00:26:06,740
gut to be able to improve Falco always

557
00:26:06,740 --> 00:26:11,240
thanks a lot for being here

558
00:26:11,640 --> 00:26:14,520
thank you so if you have any someone

559
00:26:14,520 --> 00:26:17,299
else any question

560
00:26:33,620 --> 00:26:36,120
yeah if you want to use Falcon in your

561
00:26:36,120 --> 00:26:38,460
cluster there are M charts to do that

562
00:26:38,460 --> 00:26:40,740
and you can use they are officially

563
00:26:40,740 --> 00:26:42,539
provided by the Falco security

564
00:26:42,539 --> 00:26:45,179
organization

565
00:26:45,179 --> 00:26:48,120
yeah it is when you wanted to use in

566
00:26:48,120 --> 00:26:52,020
kubernetes it can be used as containers

567
00:26:52,020 --> 00:26:56,000
and you know the arm chart will

568
00:26:56,000 --> 00:26:59,460
spawn pots on each node in the cluster

569
00:26:59,460 --> 00:27:01,020
as a diamond set

570
00:27:01,020 --> 00:27:03,480
and that's that's it basically

571
00:27:03,480 --> 00:27:06,480
you can use this to the play Fark or

572
00:27:06,480 --> 00:27:09,720
Falco is also Deployable on and on and

573
00:27:09,720 --> 00:27:14,840
you can use our packages to to do that

574
00:27:17,760 --> 00:27:18,960
thank you

575
00:27:18,960 --> 00:27:22,260
uh maybe an obvious question for a Falco

576
00:27:22,260 --> 00:27:24,919
we see all the

577
00:27:24,919 --> 00:27:28,820
rule configurations that go in the

578
00:27:28,820 --> 00:27:30,980
yaml

579
00:27:30,980 --> 00:27:33,600
configuration for the cluster

580
00:27:33,600 --> 00:27:39,360
does Falco look also into those type of

581
00:27:39,360 --> 00:27:43,500
of aspects do we consider that any

582
00:27:43,500 --> 00:27:45,960
configuration that occurs is treated as

583
00:27:45,960 --> 00:27:47,820
an event and then Falco will see and

584
00:27:47,820 --> 00:27:50,880
analyze or these are two separate no no

585
00:27:50,880 --> 00:27:54,179
this is just a different thing because

586
00:27:54,179 --> 00:27:57,779
Falco it's runtime security it only it

587
00:27:57,779 --> 00:28:00,740
doesn't look about configuration in the

588
00:28:00,740 --> 00:28:05,580
in the yaml it only looks at runtime if

589
00:28:05,580 --> 00:28:07,919
a process is being executed with a

590
00:28:07,919 --> 00:28:11,520
specific capability or not and I don't

591
00:28:11,520 --> 00:28:14,279
know if this answer your question well

592
00:28:14,279 --> 00:28:15,779
these are configuration that can happen

593
00:28:15,779 --> 00:28:18,720
at runtime so it's still part of the

594
00:28:18,720 --> 00:28:20,880
runtime whether I change I do a change

595
00:28:20,880 --> 00:28:22,919
in my environment this is going to be

596
00:28:22,919 --> 00:28:25,620
captured or not yeah if you spawn

597
00:28:25,620 --> 00:28:27,960
another pod with different capabilities

598
00:28:27,960 --> 00:28:30,480
it will be captured at around Time by

599
00:28:30,480 --> 00:28:31,919
Falco

600
00:28:31,919 --> 00:28:34,520
thank you

601
00:28:38,960 --> 00:28:42,500
yeah that's

602
00:28:49,140 --> 00:28:50,299
what

603
00:28:50,299 --> 00:28:54,000
so if if I'm able now to capture at

604
00:28:54,000 --> 00:28:56,340
runtime also those type of configuration

605
00:28:56,340 --> 00:28:58,679
uh

606
00:28:58,679 --> 00:29:01,679
do I have an overlap or do I always need

607
00:29:01,679 --> 00:29:04,679
to have both of them because there are

608
00:29:04,679 --> 00:29:07,559
configuration types that cannot be

609
00:29:07,559 --> 00:29:12,179
captured by by the uh event triggering

610
00:29:12,179 --> 00:29:15,299
and looking if I if I'm allowing Falco

611
00:29:15,299 --> 00:29:17,460
to be able to detect all the

612
00:29:17,460 --> 00:29:19,500
configurations at runtime that happen

613
00:29:19,500 --> 00:29:20,700
through this you know enamel

614
00:29:20,700 --> 00:29:22,140
configuration so I have a duplication

615
00:29:22,140 --> 00:29:24,600
now I have the rule engines that detect

616
00:29:24,600 --> 00:29:27,240
that I have also a file code that is

617
00:29:27,240 --> 00:29:29,100
looking from a logging perspective to

618
00:29:29,100 --> 00:29:30,720
the same thing do I have a duplication

619
00:29:30,720 --> 00:29:34,340
can I focus only on one of them

620
00:29:35,520 --> 00:29:37,760
foreign

621
00:29:37,919 --> 00:29:40,380
okay so there will be like treat it as

622
00:29:40,380 --> 00:29:42,659
different Falco will have okay or maybe

623
00:29:42,659 --> 00:29:44,520
there is an overlap but not big enough

624
00:29:44,520 --> 00:29:46,380
to separate

625
00:29:46,380 --> 00:29:50,539
there is no overlap okay okay thank you

626
00:29:51,419 --> 00:29:53,820
any other questions

627
00:29:53,820 --> 00:29:55,320
yeah

628
00:29:55,320 --> 00:29:57,659
sorry I was just looking at the rule I

629
00:29:57,659 --> 00:29:59,399
see that you are actually ignoring Falco

630
00:29:59,399 --> 00:30:01,020
because you're running as a privilege is

631
00:30:01,020 --> 00:30:04,740
it correct the privilege rule yeah it

632
00:30:04,740 --> 00:30:09,720
says not Falco privileged why is that

633
00:30:09,720 --> 00:30:12,179
this one right that one yes

634
00:30:12,179 --> 00:30:15,059
a condition it says I'm not Falco

635
00:30:15,059 --> 00:30:16,919
privileged container

636
00:30:16,919 --> 00:30:19,620
yeah the other other markers are used to

637
00:30:19,620 --> 00:30:21,899
uh to reduce false positive I haven't

638
00:30:21,899 --> 00:30:24,659
reported the the all the macros because

639
00:30:24,659 --> 00:30:28,080
it's hard to fit all in in the slide but

640
00:30:28,080 --> 00:30:30,659
there are other macros that are reported

641
00:30:30,659 --> 00:30:34,020
to reduce false positive in environments

642
00:30:34,020 --> 00:30:36,539
sometimes so usually macros are used to

643
00:30:36,539 --> 00:30:39,240
simplify the overall condition to make

644
00:30:39,240 --> 00:30:42,620
it more readable uh and sometimes we use

645
00:30:42,620 --> 00:30:47,340
macros to reduce false positive or or at

646
00:30:47,340 --> 00:30:50,039
least some use cases that we know is

647
00:30:50,039 --> 00:30:51,899
going to trigger Force positive so and

648
00:30:51,899 --> 00:30:55,200
that's one of one of those uh cases but

649
00:30:55,200 --> 00:30:57,240
in general we can use macros for for

650
00:30:57,240 --> 00:30:59,340
those reasons

651
00:30:59,340 --> 00:31:02,480
yeah good

652
00:31:11,600 --> 00:31:14,640
you are saying if it is possible to

653
00:31:14,640 --> 00:31:17,580
deploy Falco without privilege yeah

654
00:31:17,580 --> 00:31:22,440
um Falcon it's a specific and a unique

655
00:31:22,440 --> 00:31:25,320
workload because it has to inspect the

656
00:31:25,320 --> 00:31:27,899
system so it has to have some privileges

657
00:31:27,899 --> 00:31:33,419
of course and we have in a down chart we

658
00:31:33,419 --> 00:31:37,380
we try to run the our BPF probe with

659
00:31:37,380 --> 00:31:39,720
these Privileges and there's there is an

660
00:31:39,720 --> 00:31:41,220
option to do that

661
00:31:41,220 --> 00:31:44,159
but in general it has to have some

662
00:31:44,159 --> 00:31:46,760
privileges

663
00:31:53,279 --> 00:31:55,559
it's a false positive alert a raising

664
00:31:55,559 --> 00:31:58,220
for the foreign

665
00:32:05,220 --> 00:32:08,899
it needs some privileges to run

666
00:32:10,820 --> 00:32:16,340
who is securing uh Falco I guess

667
00:32:17,760 --> 00:32:20,220
yeah

668
00:32:20,220 --> 00:32:23,940
yeah I mean we this is a security uh

669
00:32:23,940 --> 00:32:26,520
tool right so it needs a visibility over

670
00:32:26,520 --> 00:32:28,740
uh over what is going on otherwise it's

671
00:32:28,740 --> 00:32:30,360
not it's not I mean it's not going to

672
00:32:30,360 --> 00:32:32,279
work it's a security tool and we need to

673
00:32:32,279 --> 00:32:35,640
have visibility over uh um over what is

674
00:32:35,640 --> 00:32:38,220
going on so that's that's the main point

675
00:32:38,220 --> 00:32:40,620
of all of this right so of course there

676
00:32:40,620 --> 00:32:44,039
are ways to uh as we said with the with

677
00:32:44,039 --> 00:32:47,760
the ebpf to reduce this kind of

678
00:32:47,760 --> 00:32:48,960
um

679
00:32:48,960 --> 00:32:52,080
of visibility for FICO but this is

680
00:32:52,080 --> 00:32:54,240
mandatory for the type of tool that we

681
00:32:54,240 --> 00:32:57,299
are using and to have visibility so I

682
00:32:57,299 --> 00:33:00,480
guess I mean I think most of other tools

683
00:33:00,480 --> 00:33:03,299
are basically using the same way uh

684
00:33:03,299 --> 00:33:04,919
since I mean it's not possible to do any

685
00:33:04,919 --> 00:33:07,679
anyway uh in other ways so of course we

686
00:33:07,679 --> 00:33:09,720
can reduce it but at the end it's

687
00:33:09,720 --> 00:33:11,399
something that we need in order to have

688
00:33:11,399 --> 00:33:13,140
visibility and of course we want to have

689
00:33:13,140 --> 00:33:15,899
visibility uh in order to provide the

690
00:33:15,899 --> 00:33:17,700
best detection possible so I think

691
00:33:17,700 --> 00:33:19,679
that's the point good thank you thank

692
00:33:19,679 --> 00:33:21,799
you

693
00:33:23,519 --> 00:33:26,340
so thanks everyone and I wish a nice

694
00:33:26,340 --> 00:33:28,030
rest of your day thank you

695
00:33:28,030 --> 00:33:32,520
[Applause]

