1
00:00:00,120 --> 00:00:02,940
hi everyone uh my name is Steve Judd

2
00:00:02,940 --> 00:00:05,460
working for jet stack uh hopefully some

3
00:00:05,460 --> 00:00:07,440
of you are familiar with jet stack

4
00:00:07,440 --> 00:00:09,720
because of the product that we created

5
00:00:09,720 --> 00:00:13,799
cert manager but jetstack also has a

6
00:00:13,799 --> 00:00:16,619
kubernetes and Cloud native consultancy

7
00:00:16,619 --> 00:00:19,859
Division and that's where I work and

8
00:00:19,859 --> 00:00:22,439
over the last couple of years I've

9
00:00:22,439 --> 00:00:24,359
basically been helping a bunch of

10
00:00:24,359 --> 00:00:27,119
clients in the financial services and

11
00:00:27,119 --> 00:00:29,300
the fence sectors

12
00:00:29,300 --> 00:00:31,800
improve the security of their software

13
00:00:31,800 --> 00:00:35,100
Supply chains uh as you know that's kind

14
00:00:35,100 --> 00:00:37,739
of a big area big topic

15
00:00:37,739 --> 00:00:39,000
um so I'm going to cover a particular

16
00:00:39,000 --> 00:00:41,579
aspect which is to talk about how you

17
00:00:41,579 --> 00:00:44,100
can improve your knowledge and due

18
00:00:44,100 --> 00:00:45,899
diligence around the external

19
00:00:45,899 --> 00:00:49,020
dependencies that you accept into your

20
00:00:49,020 --> 00:00:52,200
organizations into your code bases uh

21
00:00:52,200 --> 00:00:54,960
for the context of this talk when I talk

22
00:00:54,960 --> 00:00:57,000
about dependencies I'm really talking

23
00:00:57,000 --> 00:01:00,360
about Docker images and code libraries

24
00:01:00,360 --> 00:01:02,160
that you import into your software

25
00:01:02,160 --> 00:01:04,140
applications

26
00:01:04,140 --> 00:01:08,400
so I split this talk into three parts

27
00:01:08,400 --> 00:01:10,460
um first of all I'm going to talk about

28
00:01:10,460 --> 00:01:13,260
why is it important that you do this

29
00:01:13,260 --> 00:01:15,420
extra due diligence and better

30
00:01:15,420 --> 00:01:17,820
understand your dependencies then I'll

31
00:01:17,820 --> 00:01:21,900
move on and explain the um if you like

32
00:01:21,900 --> 00:01:24,479
the outcomes and the benefits you should

33
00:01:24,479 --> 00:01:28,020
expect to gain from getting to

34
00:01:28,020 --> 00:01:30,180
understand your dependencies better and

35
00:01:30,180 --> 00:01:31,979
then finally I'm going to talk about

36
00:01:31,979 --> 00:01:34,140
ways in which we've helped clients

37
00:01:34,140 --> 00:01:37,619
actually achieve this goal of getting to

38
00:01:37,619 --> 00:01:40,380
know your dependencies better

39
00:01:40,380 --> 00:01:43,380
so first of all I thought I'd uh excite

40
00:01:43,380 --> 00:01:45,000
everyone with a few cherry-picked

41
00:01:45,000 --> 00:01:47,640
statistics from a couple of vendor

42
00:01:47,640 --> 00:01:50,280
reports so one of them is from a report

43
00:01:50,280 --> 00:01:52,979
from synopsis from this year uh some of

44
00:01:52,979 --> 00:01:54,479
the other stats are from a report from

45
00:01:54,479 --> 00:01:57,060
sonotype in 2020.

46
00:01:57,060 --> 00:01:59,399
um so I think you'll all agree uh

47
00:01:59,399 --> 00:02:00,659
basically modern applications

48
00:02:00,659 --> 00:02:03,600
fundamentally consist of a lot of Open

49
00:02:03,600 --> 00:02:05,899
Source libraries

50
00:02:05,899 --> 00:02:08,399
whether or not you think it's as much as

51
00:02:08,399 --> 00:02:11,940
90 percent bit moot really it's just a

52
00:02:11,940 --> 00:02:13,620
great deal

53
00:02:13,620 --> 00:02:16,440
um and interestingly uh and perhaps

54
00:02:16,440 --> 00:02:19,620
alarmingly a large majority of these

55
00:02:19,620 --> 00:02:21,900
software applications are using out of

56
00:02:21,900 --> 00:02:24,540
date versions of these open source

57
00:02:24,540 --> 00:02:27,480
libraries that they are dependent on

58
00:02:27,480 --> 00:02:30,780
and therefore perhaps unsurprisingly uh

59
00:02:30,780 --> 00:02:34,020
maybe a half or so of code based is

60
00:02:34,020 --> 00:02:36,780
surveyed have at least one high risk

61
00:02:36,780 --> 00:02:39,060
vulnerability in them and also

62
00:02:39,060 --> 00:02:42,300
interestingly I think is that about half

63
00:02:42,300 --> 00:02:44,420
of the code bases that were surveyed

64
00:02:44,420 --> 00:02:47,519
have some kind of Open Source license

65
00:02:47,519 --> 00:02:49,980
conflict and I think this is a

66
00:02:49,980 --> 00:02:51,780
particular area that that doesn't get a

67
00:02:51,780 --> 00:02:53,760
huge amount of attention but I'll talk a

68
00:02:53,760 --> 00:02:56,819
little bit more about that later on

69
00:02:56,819 --> 00:03:00,420
so now I've um kind of shown you how I

70
00:03:00,420 --> 00:03:02,340
can expertly cherry pick a few

71
00:03:02,340 --> 00:03:05,280
statistics from some useful reports uh

72
00:03:05,280 --> 00:03:07,099
here's a couple of kind of personal

73
00:03:07,099 --> 00:03:10,140
anecdotal observations

74
00:03:10,140 --> 00:03:13,140
um made because I've spent the last 10

75
00:03:13,140 --> 00:03:15,900
years or so not just as a consultant but

76
00:03:15,900 --> 00:03:19,260
also as a tech team lead developer team

77
00:03:19,260 --> 00:03:20,580
lead

78
00:03:20,580 --> 00:03:23,340
um head of platform and so on and I

79
00:03:23,340 --> 00:03:25,860
think it's fair to say and not in not at

80
00:03:25,860 --> 00:03:28,260
all disrespectful is that software

81
00:03:28,260 --> 00:03:30,840
Engineers really don't know a great deal

82
00:03:30,840 --> 00:03:33,060
about the dependencies that they're

83
00:03:33,060 --> 00:03:35,180
using within their software applications

84
00:03:35,180 --> 00:03:38,760
and the reason I say that is there are a

85
00:03:38,760 --> 00:03:40,739
lot of dependencies not just the direct

86
00:03:40,739 --> 00:03:42,900
dependencies but also the indirect

87
00:03:42,900 --> 00:03:46,620
transient dependencies so I looked at

88
00:03:46,620 --> 00:03:49,680
jet stack cert manager products a few

89
00:03:49,680 --> 00:03:52,019
weeks ago and it's probably got in the

90
00:03:52,019 --> 00:03:55,500
region of 1500 dependencies of which

91
00:03:55,500 --> 00:03:59,159
only about 30 those are direct I.E the

92
00:03:59,159 --> 00:04:02,640
developer deliberately chose to import

93
00:04:02,640 --> 00:04:06,480
them into their software it's just not

94
00:04:06,480 --> 00:04:09,959
practical to be able to understand and

95
00:04:09,959 --> 00:04:12,480
have much knowledge about such a vast

96
00:04:12,480 --> 00:04:14,120
array of

97
00:04:14,120 --> 00:04:16,320
dependencies in in your typical

98
00:04:16,320 --> 00:04:19,978
applications so if you don't know very

99
00:04:19,978 --> 00:04:22,440
much about your dependencies how are you

100
00:04:22,440 --> 00:04:26,060
able to trust them and if you can't

101
00:04:26,060 --> 00:04:28,680
trust them and you don't know much about

102
00:04:28,680 --> 00:04:31,500
them how can you gauge the level of risk

103
00:04:31,500 --> 00:04:35,180
that these dependencies are going to

104
00:04:35,180 --> 00:04:38,340
apply to your to your environments and

105
00:04:38,340 --> 00:04:40,979
your companies

106
00:04:40,979 --> 00:04:44,520
okay so hopefully I've persuaded you of

107
00:04:44,520 --> 00:04:48,600
the need to understand the dependencies

108
00:04:48,600 --> 00:04:50,759
the docker images that you use within

109
00:04:50,759 --> 00:04:53,280
your organizations significantly better

110
00:04:53,280 --> 00:04:55,259
than I think most organizations do

111
00:04:55,259 --> 00:04:56,880
currently

112
00:04:56,880 --> 00:04:59,639
um but the next part of this talk I'm

113
00:04:59,639 --> 00:05:01,440
going to go through perhaps what the

114
00:05:01,440 --> 00:05:03,600
outcomes and the benefits that you

115
00:05:03,600 --> 00:05:06,060
should be looking to achieve by getting

116
00:05:06,060 --> 00:05:08,880
to know your dependencies better

117
00:05:08,880 --> 00:05:11,479
so first of all we're looking at

118
00:05:11,479 --> 00:05:14,699
an improvement in understanding of the

119
00:05:14,699 --> 00:05:17,180
security posture of these dependencies

120
00:05:17,180 --> 00:05:21,300
and a kind of obvious example of that is

121
00:05:21,300 --> 00:05:23,639
what sort of vulnerabilities are present

122
00:05:23,639 --> 00:05:26,639
in these dependencies and no doubt all

123
00:05:26,639 --> 00:05:28,680
of you are running vulnerability

124
00:05:28,680 --> 00:05:31,259
scanners in your CI pipelines in your

125
00:05:31,259 --> 00:05:32,940
runtime environment

126
00:05:32,940 --> 00:05:35,400
but on top of that I think it's also

127
00:05:35,400 --> 00:05:37,560
important to get a good sense of like

128
00:05:37,560 --> 00:05:40,979
the security hygiene that if you like a

129
00:05:40,979 --> 00:05:43,620
health check score about all of these

130
00:05:43,620 --> 00:05:45,120
dependencies

131
00:05:45,120 --> 00:05:47,880
um and I think if you were um in one of

132
00:05:47,880 --> 00:05:50,520
the sessions this morning uh someone was

133
00:05:50,520 --> 00:05:53,100
speaking about the open ssf scorecard

134
00:05:53,100 --> 00:05:56,639
product if you haven't seen this I would

135
00:05:56,639 --> 00:05:58,680
encourage you to have a look

136
00:05:58,680 --> 00:06:01,620
um it's a it's a great tool that will

137
00:06:01,620 --> 00:06:04,560
give you a series of scores and based on

138
00:06:04,560 --> 00:06:06,960
the set of metrics around the way that

139
00:06:06,960 --> 00:06:10,620
the source the GitHub source code

140
00:06:10,620 --> 00:06:13,740
um the hygiene rules and so on

141
00:06:13,740 --> 00:06:15,180
secondly

142
00:06:15,180 --> 00:06:18,060
um and this one to be honest to achieve

143
00:06:18,060 --> 00:06:21,300
this in its entirety is is is a big ask

144
00:06:21,300 --> 00:06:23,880
it's a non-trivial activity and what

145
00:06:23,880 --> 00:06:26,520
we're trying to do here is put in some

146
00:06:26,520 --> 00:06:30,360
automation via um admission controllers

147
00:06:30,360 --> 00:06:33,960
like iverno or Gateway such that only

148
00:06:33,960 --> 00:06:36,380
approved artifacts

149
00:06:36,380 --> 00:06:39,060
Docker images can actually be deployed

150
00:06:39,060 --> 00:06:41,600
into your kubernetes clusters

151
00:06:41,600 --> 00:06:44,100
I will talk a little bit more about this

152
00:06:44,100 --> 00:06:47,460
later on in my talk but as a good first

153
00:06:47,460 --> 00:06:50,340
step looking at creating a trusted

154
00:06:50,340 --> 00:06:53,340
registry from which it is mandatory to

155
00:06:53,340 --> 00:06:55,500
pull your images in your code rather

156
00:06:55,500 --> 00:07:00,139
than going direct to the the public

157
00:07:00,139 --> 00:07:03,680
internet.key.io and so on

158
00:07:03,780 --> 00:07:06,000
um as I've already said I think

159
00:07:06,000 --> 00:07:08,160
um open source license compliance is

160
00:07:08,160 --> 00:07:09,780
kind of a thing

161
00:07:09,780 --> 00:07:12,120
um as in there are a lot of code bases

162
00:07:12,120 --> 00:07:14,460
that uh don't fulfill all of their

163
00:07:14,460 --> 00:07:17,580
obligations so having some assistance to

164
00:07:17,580 --> 00:07:19,740
help you understand what all of those

165
00:07:19,740 --> 00:07:23,819
open source licenses are in your images

166
00:07:23,819 --> 00:07:28,819
and your code bases is kind of helpful

167
00:07:29,340 --> 00:07:31,440
um now this fourth one

168
00:07:31,440 --> 00:07:33,660
um what we've kind of noticed over the

169
00:07:33,660 --> 00:07:36,840
last 12 months especially is that

170
00:07:36,840 --> 00:07:40,620
companies that consume software from

171
00:07:40,620 --> 00:07:43,500
external software suppliers are starting

172
00:07:43,500 --> 00:07:46,440
to get quite keen on understanding the

173
00:07:46,440 --> 00:07:48,780
list of dependencies in that software

174
00:07:48,780 --> 00:07:52,199
that they're taking and a good way of

175
00:07:52,199 --> 00:07:55,259
providing this inventory is to use some

176
00:07:55,259 --> 00:07:56,840
kind of s-bomb

177
00:07:56,840 --> 00:07:59,699
in jetstack we've had a lot of success

178
00:07:59,699 --> 00:08:02,819
using the Cyclone DX s-bomb format

179
00:08:02,819 --> 00:08:08,120
another popular choice is spdx

180
00:08:08,160 --> 00:08:09,660
fifthly

181
00:08:09,660 --> 00:08:10,380
um

182
00:08:10,380 --> 00:08:13,259
you've now created all of this metadata

183
00:08:13,259 --> 00:08:15,560
you've collected it together

184
00:08:15,560 --> 00:08:18,360
it would be really useful to be able to

185
00:08:18,360 --> 00:08:21,960
make that metadata very visible via

186
00:08:21,960 --> 00:08:25,440
dashboards to make it easy to consume

187
00:08:25,440 --> 00:08:28,020
for interested stakeholders such as

188
00:08:28,020 --> 00:08:31,080
security teams and Dev teams

189
00:08:31,080 --> 00:08:33,599
and later on in this talk I'll offer up

190
00:08:33,599 --> 00:08:35,520
some suggestions about how that can be

191
00:08:35,520 --> 00:08:36,958
achieved

192
00:08:36,958 --> 00:08:39,659
and then finally this isn't particularly

193
00:08:39,659 --> 00:08:41,339
a benefit but I think it's kind of

194
00:08:41,339 --> 00:08:44,520
important to emphasize is that all of

195
00:08:44,520 --> 00:08:46,320
this kind of extra due diligence

196
00:08:46,320 --> 00:08:48,959
activity and the workflows to make it

197
00:08:48,959 --> 00:08:52,380
happen really you want to avoid having

198
00:08:52,380 --> 00:08:56,839
much impact on developer velocity

199
00:08:57,480 --> 00:09:01,080
okay so I've gone through why I think

200
00:09:01,080 --> 00:09:04,680
it's important that um organizations and

201
00:09:04,680 --> 00:09:06,480
teams get to sort of better understand

202
00:09:06,480 --> 00:09:09,060
and know their dependencies and also

203
00:09:09,060 --> 00:09:10,380
what kind of

204
00:09:10,380 --> 00:09:12,959
um benefits and outcomes you can expect

205
00:09:12,959 --> 00:09:15,779
to achieve now I'm going to go through

206
00:09:15,779 --> 00:09:17,940
ways in which we've helped some of our

207
00:09:17,940 --> 00:09:20,399
clients actually achieve the outcomes

208
00:09:20,399 --> 00:09:22,580
that I've been talking about

209
00:09:22,580 --> 00:09:25,080
so first of all and I think this is kind

210
00:09:25,080 --> 00:09:28,260
of a fundamental Cornerstone is to have

211
00:09:28,260 --> 00:09:31,620
this trusted registry so rather than

212
00:09:31,620 --> 00:09:34,260
allowing developers or the CI pipelines

213
00:09:34,260 --> 00:09:36,839
or even the runtime environments rather

214
00:09:36,839 --> 00:09:38,519
than allowing them to pull images

215
00:09:38,519 --> 00:09:41,480
directly off of the internet from

216
00:09:41,480 --> 00:09:44,180
docker.hub or key.io

217
00:09:44,180 --> 00:09:46,800
you only allow them to pull from your

218
00:09:46,800 --> 00:09:49,320
trusted registry we've had a lot of

219
00:09:49,320 --> 00:09:51,839
success with artifactory and harbor but

220
00:09:51,839 --> 00:09:53,580
obviously there are other Alternatives

221
00:09:53,580 --> 00:09:55,500
out there

222
00:09:55,500 --> 00:09:57,680
foreign

223
00:09:58,860 --> 00:10:02,339
once you've now got this situation where

224
00:10:02,339 --> 00:10:04,800
the images are being pushed into your

225
00:10:04,800 --> 00:10:07,820
trusted registry before being pulled by

226
00:10:07,820 --> 00:10:10,500
the various components like developers

227
00:10:10,500 --> 00:10:13,500
CI pipelines and so on what you now do

228
00:10:13,500 --> 00:10:16,220
is you can start to kick off

229
00:10:16,220 --> 00:10:19,740
Security based workflow pipelines that

230
00:10:19,740 --> 00:10:21,720
can start to evaluate those new images

231
00:10:21,720 --> 00:10:25,080
as they're um appear in this trusted

232
00:10:25,080 --> 00:10:27,720
registry this particular workflow

233
00:10:27,720 --> 00:10:32,000
pipeline we used Argo workflows to

234
00:10:32,000 --> 00:10:35,160
execute it for a particular client

235
00:10:35,160 --> 00:10:37,080
and I'll go through the the kind of

236
00:10:37,080 --> 00:10:40,019
steps that this workflow does so the

237
00:10:40,019 --> 00:10:42,060
very first thing it does when a new

238
00:10:42,060 --> 00:10:44,160
image appears in in your trusted

239
00:10:44,160 --> 00:10:47,220
registry is it generates an s-bomb for

240
00:10:47,220 --> 00:10:49,800
that particular image and we use a tool

241
00:10:49,800 --> 00:10:52,380
from anchor called sift to generate this

242
00:10:52,380 --> 00:10:55,380
s-bomb and that s-bomb will give you

243
00:10:55,380 --> 00:10:58,980
um a list of all of the uh components

244
00:10:58,980 --> 00:11:01,459
within that Docker image

245
00:11:01,459 --> 00:11:05,459
the second set step this really applies

246
00:11:05,459 --> 00:11:08,399
only to images that were built

247
00:11:08,399 --> 00:11:10,019
internally within the client

248
00:11:10,019 --> 00:11:12,899
organization and what we've done here is

249
00:11:12,899 --> 00:11:16,079
within the software application CI

250
00:11:16,079 --> 00:11:18,660
pipelines we've injected an additional

251
00:11:18,660 --> 00:11:22,320
step that generates an s-bomb from the

252
00:11:22,320 --> 00:11:24,600
particular software applications source

253
00:11:24,600 --> 00:11:27,320
code from its go dot mod file or its

254
00:11:27,320 --> 00:11:30,420
requirements.txt file and when we've got

255
00:11:30,420 --> 00:11:33,839
that s-bomb we then include that within

256
00:11:33,839 --> 00:11:36,779
the image that gets built that contains

257
00:11:36,779 --> 00:11:39,600
the compiled binary or whatever and the

258
00:11:39,600 --> 00:11:41,640
reason that we create this separate

259
00:11:41,640 --> 00:11:44,399
s-bomb is because you can get far

260
00:11:44,399 --> 00:11:47,339
greater level of detail about the

261
00:11:47,339 --> 00:11:49,440
dependencies that have been used in that

262
00:11:49,440 --> 00:11:52,380
software application then if you uh just

263
00:11:52,380 --> 00:11:55,860
using just use an s-bomb based on the

264
00:11:55,860 --> 00:11:58,920
docker image so at this point step two

265
00:11:58,920 --> 00:12:02,519
you potentially got to um s-bombs but

266
00:12:02,519 --> 00:12:04,560
that's okay because there's a tool from

267
00:12:04,560 --> 00:12:07,560
Cyclone DX which will nicely merge those

268
00:12:07,560 --> 00:12:10,800
two s-bombs together together to give

269
00:12:10,800 --> 00:12:14,220
you a single Master s-bomb as it were

270
00:12:14,220 --> 00:12:16,680
we then use a tool from Sig store called

271
00:12:16,680 --> 00:12:20,160
cosine and we use that tool to sign the

272
00:12:20,160 --> 00:12:22,860
s-bomb and then push both the signature

273
00:12:22,860 --> 00:12:26,459
and the s-bomb as oci images back into

274
00:12:26,459 --> 00:12:28,920
that trusted registry and thanks to the

275
00:12:28,920 --> 00:12:33,060
way that the tagging works these new oci

276
00:12:33,060 --> 00:12:35,820
images can be Associated back to the

277
00:12:35,820 --> 00:12:38,300
image of the original

278
00:12:38,300 --> 00:12:40,860
Docker image that was that was triggered

279
00:12:40,860 --> 00:12:43,920
this workflow in the first place and the

280
00:12:43,920 --> 00:12:46,200
reason that this is uh incredibly useful

281
00:12:46,200 --> 00:12:49,820
is that then makes that s-bomb available

282
00:12:49,820 --> 00:12:53,459
to Consumers of that Docker image those

283
00:12:53,459 --> 00:12:55,740
consumers might be internal teams but

284
00:12:55,740 --> 00:12:58,200
they equally could be an external

285
00:12:58,200 --> 00:13:00,779
third-party client of yours that's

286
00:13:00,779 --> 00:13:03,180
consuming your Docker images

287
00:13:03,180 --> 00:13:06,959
and then finally we also push the s-bomb

288
00:13:06,959 --> 00:13:09,839
into an owoss tool called dependency

289
00:13:09,839 --> 00:13:12,200
track

290
00:13:12,959 --> 00:13:14,760
so the reason that we use dependency

291
00:13:14,760 --> 00:13:17,639
track is that it's got uh some nice

292
00:13:17,639 --> 00:13:18,959
features

293
00:13:18,959 --> 00:13:21,480
um allowing us to get it to

294
00:13:21,480 --> 00:13:23,760
automatically run a vulnerability

295
00:13:23,760 --> 00:13:26,459
analysis against the inventory that's

296
00:13:26,459 --> 00:13:29,220
just come from the s-bomb and also a

297
00:13:29,220 --> 00:13:33,000
license evaluation and once dependency

298
00:13:33,000 --> 00:13:35,160
tracks done that then it's got a nice

299
00:13:35,160 --> 00:13:38,639
web UI that allows you to view all the

300
00:13:38,639 --> 00:13:40,500
vulnerabilities in this image that

301
00:13:40,500 --> 00:13:42,600
you've just processed and what kind of

302
00:13:42,600 --> 00:13:44,760
Licensing is there

303
00:13:44,760 --> 00:13:46,860
so this is starting to make this

304
00:13:46,860 --> 00:13:50,040
information visible to the interested

305
00:13:50,040 --> 00:13:51,660
stakeholders that I was talking about

306
00:13:51,660 --> 00:13:53,519
the security teams and the development

307
00:13:53,519 --> 00:13:55,019
teams

308
00:13:55,019 --> 00:13:57,420
one of our clients is also using another

309
00:13:57,420 --> 00:13:59,760
feature of dependency track which is

310
00:13:59,760 --> 00:14:02,459
it's got this policy engine so you can

311
00:14:02,459 --> 00:14:05,160
Define security policies things like

312
00:14:05,160 --> 00:14:08,220
these are the permitted or forbidden

313
00:14:08,220 --> 00:14:11,220
types of Open Source license that are

314
00:14:11,220 --> 00:14:14,220
acceptable in our organization or we

315
00:14:14,220 --> 00:14:16,800
have a policy that any vulnerability

316
00:14:16,800 --> 00:14:19,860
with a score higher than seven that's

317
00:14:19,860 --> 00:14:21,300
not allowed to be used in our

318
00:14:21,300 --> 00:14:23,579
organization so what you can do with

319
00:14:23,579 --> 00:14:25,380
dependency track is Define these

320
00:14:25,380 --> 00:14:28,380
policies it will run the policy engine

321
00:14:28,380 --> 00:14:30,600
against those and it will give you some

322
00:14:30,600 --> 00:14:32,880
sort of feel about whether the image

323
00:14:32,880 --> 00:14:35,760
actually complies or otherwise with your

324
00:14:35,760 --> 00:14:37,860
policies

325
00:14:37,860 --> 00:14:39,779
um this particular client is also

326
00:14:39,779 --> 00:14:43,500
trialling another o wasp tool called

327
00:14:43,500 --> 00:14:46,560
defect dojo and this helps the the

328
00:14:46,560 --> 00:14:48,360
intention is that this will help them

329
00:14:48,360 --> 00:14:50,639
manage uh the vulnerabilities that have

330
00:14:50,639 --> 00:14:52,079
been discovered

331
00:14:52,079 --> 00:14:54,600
um and mitigate those vulnerabilities in

332
00:14:54,600 --> 00:14:56,100
in that have been discovered in the

333
00:14:56,100 --> 00:14:58,800
images that have been processed

334
00:14:58,800 --> 00:15:01,260
so at this point what I've done is

335
00:15:01,260 --> 00:15:03,779
describe a whole bunch of things and

336
00:15:03,779 --> 00:15:06,240
some workflows that we've done for a

337
00:15:06,240 --> 00:15:07,800
bunch of clients

338
00:15:07,800 --> 00:15:11,760
and the next couple of slides are our

339
00:15:11,760 --> 00:15:14,459
this is what we're going to do next to

340
00:15:14,459 --> 00:15:16,880
help them better understand

341
00:15:16,880 --> 00:15:20,519
their dependencies and to improve their

342
00:15:20,519 --> 00:15:22,320
due diligence

343
00:15:22,320 --> 00:15:24,720
so the first one and I don't really

344
00:15:24,720 --> 00:15:26,459
expect you to sort of be able to read

345
00:15:26,459 --> 00:15:29,100
everything on that screen what I did

346
00:15:29,100 --> 00:15:32,940
here was create a grafana dashboard the

347
00:15:32,940 --> 00:15:35,519
idea of this is to kind of create a

348
00:15:35,519 --> 00:15:37,800
single pane of glass dashboard that

349
00:15:37,800 --> 00:15:40,820
gives you some insights and useful

350
00:15:40,820 --> 00:15:43,620
useful information about the software

351
00:15:43,620 --> 00:15:46,380
applications in your organization that

352
00:15:46,380 --> 00:15:48,660
have been you know processed using the

353
00:15:48,660 --> 00:15:50,779
workflows that I've been talking about

354
00:15:50,779 --> 00:15:53,040
if any of you are familiar with a

355
00:15:53,040 --> 00:15:57,360
website called depths.dev then this this

356
00:15:57,360 --> 00:16:00,060
dashboard is heavily inspired by that

357
00:16:00,060 --> 00:16:03,060
website and I would recommend you go and

358
00:16:03,060 --> 00:16:05,880
have a look at it in any case so on the

359
00:16:05,880 --> 00:16:09,180
left hand side that's really showing a

360
00:16:09,180 --> 00:16:11,880
list of all the dependencies in this

361
00:16:11,880 --> 00:16:15,600
particular software application in the

362
00:16:15,600 --> 00:16:20,279
top right that's the scorecard score so

363
00:16:20,279 --> 00:16:22,139
each of the bars represents a different

364
00:16:22,139 --> 00:16:26,399
metric and that scorecard uses beneath

365
00:16:26,399 --> 00:16:29,459
that is a table showing a list of the

366
00:16:29,459 --> 00:16:31,019
vulnerabilities in this software

367
00:16:31,019 --> 00:16:34,620
application and beneath that is account

368
00:16:34,620 --> 00:16:37,320
and a list of all of the open source

369
00:16:37,320 --> 00:16:39,240
licenses that were discovered in this

370
00:16:39,240 --> 00:16:40,980
offer application

371
00:16:40,980 --> 00:16:44,160
in the bottom half of the screen this is

372
00:16:44,160 --> 00:16:46,320
if you like a kind of dynamic and

373
00:16:46,320 --> 00:16:49,199
interactive dependency graph

374
00:16:49,199 --> 00:16:51,540
um so this this what I did was import

375
00:16:51,540 --> 00:16:53,880
all of the the dependency graph into

376
00:16:53,880 --> 00:16:57,660
neo4j and then use the tool called Neo

377
00:16:57,660 --> 00:17:00,959
uh neoviz to be able to allow

378
00:17:00,959 --> 00:17:03,660
um developers or whoever's viewing this

379
00:17:03,660 --> 00:17:05,939
dashboard to be able to explore the

380
00:17:05,939 --> 00:17:07,439
relationships between the different

381
00:17:07,439 --> 00:17:09,839
dependencies the direct ones and the

382
00:17:09,839 --> 00:17:11,699
transient ones in this software

383
00:17:11,699 --> 00:17:14,299
application

384
00:17:15,059 --> 00:17:16,559
and then the other thing that we're

385
00:17:16,559 --> 00:17:18,240
going to look at and there's been quite

386
00:17:18,240 --> 00:17:19,199
a lot of

387
00:17:19,199 --> 00:17:22,140
um demos and so on about admission

388
00:17:22,140 --> 00:17:25,699
controllers like kyverno and gatekeeper

389
00:17:25,699 --> 00:17:29,220
so really what we're doing here is using

390
00:17:29,220 --> 00:17:31,260
um one of those types of admission

391
00:17:31,260 --> 00:17:34,260
controller to basically you can write

392
00:17:34,260 --> 00:17:37,260
policies that say if this image hasn't

393
00:17:37,260 --> 00:17:39,299
been signed or if this image doesn't

394
00:17:39,299 --> 00:17:41,400
contain a particular or doesn't possess

395
00:17:41,400 --> 00:17:44,039
a particular attestation then don't let

396
00:17:44,039 --> 00:17:46,200
it be deployed into this particular

397
00:17:46,200 --> 00:17:49,460
runtime environment

398
00:17:52,400 --> 00:17:56,880
okay so inevitably during

399
00:17:56,880 --> 00:17:59,039
um this little journey of uh creating

400
00:17:59,039 --> 00:18:02,340
these pipelines and the uh improved sort

401
00:18:02,340 --> 00:18:04,559
of security workflows we learn a few

402
00:18:04,559 --> 00:18:06,600
lessons on the way

403
00:18:06,600 --> 00:18:07,200
um

404
00:18:07,200 --> 00:18:10,500
the first of which is um there are a

405
00:18:10,500 --> 00:18:13,260
number of s-bomb generating tools out

406
00:18:13,260 --> 00:18:15,900
there uh they're not all created equal

407
00:18:15,900 --> 00:18:18,419
and by that I mean that some are better

408
00:18:18,419 --> 00:18:20,760
than others at providing

409
00:18:20,760 --> 00:18:23,280
um an an accurate reflection of the

410
00:18:23,280 --> 00:18:26,100
components in the docker images and so

411
00:18:26,100 --> 00:18:29,340
on the ones that the tools that we've

412
00:18:29,340 --> 00:18:32,460
had success with are sift from Angkor

413
00:18:32,460 --> 00:18:34,320
that I already mentioned and also

414
00:18:34,320 --> 00:18:38,820
Cyclone DX s-bond Generation tool

415
00:18:38,820 --> 00:18:41,820
um the second uh the second one is uh

416
00:18:41,820 --> 00:18:44,640
something that Adrian brought up in his

417
00:18:44,640 --> 00:18:47,700
talk this morning around the fact that

418
00:18:47,700 --> 00:18:50,539
scanners of Docker images are not magic

419
00:18:50,539 --> 00:18:54,480
if you don't use a standard package tool

420
00:18:54,480 --> 00:18:56,820
for installing software into a Docker

421
00:18:56,820 --> 00:18:59,039
image there is a reasonably good chance

422
00:18:59,039 --> 00:19:02,220
that it won't be picked up by one of the

423
00:19:02,220 --> 00:19:04,140
scanning tools

424
00:19:04,140 --> 00:19:06,480
and therefore if it's not picked up it

425
00:19:06,480 --> 00:19:08,760
won't appear in the s-bomb the

426
00:19:08,760 --> 00:19:10,559
vulnerabilities that might be associated

427
00:19:10,559 --> 00:19:12,960
with that particular binary won't be

428
00:19:12,960 --> 00:19:14,880
picked up either

429
00:19:14,880 --> 00:19:16,860
uh the third one

430
00:19:16,860 --> 00:19:19,440
um again topical I think yesterday I sat

431
00:19:19,440 --> 00:19:22,080
through an interesting talk about Conan

432
00:19:22,080 --> 00:19:25,620
uh C C plus plus package manager

433
00:19:25,620 --> 00:19:28,380
um sadly our client that uses uh that

434
00:19:28,380 --> 00:19:30,900
develops C and C plus plus don't use

435
00:19:30,900 --> 00:19:33,900
Conan so it was kind of tricky to figure

436
00:19:33,900 --> 00:19:36,179
out exactly what the dependencies and

437
00:19:36,179 --> 00:19:38,220
their versions were for the the C and C

438
00:19:38,220 --> 00:19:40,380
plus plus applications

439
00:19:40,380 --> 00:19:42,539
and then finally

440
00:19:42,539 --> 00:19:45,620
um scale and volume as we discovered

441
00:19:45,620 --> 00:19:48,600
processing these s-bombs takes up a lot

442
00:19:48,600 --> 00:19:51,059
of CPU and resource some of these

443
00:19:51,059 --> 00:19:53,940
s-bombs get really really huge sort of

444
00:19:53,940 --> 00:19:56,880
thousands and thousands of dependencies

445
00:19:56,880 --> 00:20:01,200
and so on and this takes a great deal to

446
00:20:01,200 --> 00:20:03,780
um of memory and CPU and if you've

447
00:20:03,780 --> 00:20:06,900
suddenly got a surge of images then for

448
00:20:06,900 --> 00:20:09,179
us it kind of broke our dependency track

449
00:20:09,179 --> 00:20:11,640
implementation and then the other thing

450
00:20:11,640 --> 00:20:15,179
to consider is over time you're going to

451
00:20:15,179 --> 00:20:17,280
get more and more images and of course

452
00:20:17,280 --> 00:20:18,720
you're going to need to regulate

453
00:20:18,720 --> 00:20:20,880
vulnerability scan those images probably

454
00:20:20,880 --> 00:20:24,120
on a weekly basis and so over time that

455
00:20:24,120 --> 00:20:27,000
that chunk of f resource is going to

456
00:20:27,000 --> 00:20:29,460
grow larger and larger to kind of do

457
00:20:29,460 --> 00:20:31,380
that whole scanning of more and more

458
00:20:31,380 --> 00:20:33,559
images

459
00:20:34,260 --> 00:20:37,320
so just before we wrap up

460
00:20:37,320 --> 00:20:39,360
um here are the kind of key takeaways

461
00:20:39,360 --> 00:20:42,299
that um I hope you'll get from my talk

462
00:20:42,299 --> 00:20:45,179
um open source as you perfectly well

463
00:20:45,179 --> 00:20:48,059
know is is fundamental to the large

464
00:20:48,059 --> 00:20:50,640
majority of modern software applications

465
00:20:50,640 --> 00:20:53,880
and therefore performing this kind of

466
00:20:53,880 --> 00:20:56,700
additional and in-depth due diligence is

467
00:20:56,700 --> 00:20:59,820
absolutely crucial in order to you know

468
00:20:59,820 --> 00:21:02,220
understand and mitigate the security

469
00:21:02,220 --> 00:21:03,960
risks

470
00:21:03,960 --> 00:21:05,039
um

471
00:21:05,039 --> 00:21:07,679
clearly automation is absolutely

472
00:21:07,679 --> 00:21:10,500
essential it is just not practical to do

473
00:21:10,500 --> 00:21:13,860
this stuff with a spreadsheet and manual

474
00:21:13,860 --> 00:21:16,919
sort of manual investigation I've put up

475
00:21:16,919 --> 00:21:19,380
there a few tools that

476
00:21:19,380 --> 00:21:21,299
um we've had success with

477
00:21:21,299 --> 00:21:23,720
um with with our implementations

478
00:21:23,720 --> 00:21:26,340
and then the final Point as I keep

479
00:21:26,340 --> 00:21:29,460
mentioning is make sure the developers

480
00:21:29,460 --> 00:21:31,440
the CI pipelines and the runtime

481
00:21:31,440 --> 00:21:33,419
environments pull from this trusted

482
00:21:33,419 --> 00:21:37,100
registry that's in your control

483
00:21:37,440 --> 00:21:41,159
okay well um thank you for listening

484
00:21:41,159 --> 00:21:43,740
um hope if you've got any questions then

485
00:21:43,740 --> 00:21:46,140
I'm happy to answer them and I've put up

486
00:21:46,140 --> 00:21:48,780
a few links here of uh worthwhile

487
00:21:48,780 --> 00:21:51,659
websites to go and have a look

488
00:21:51,659 --> 00:21:55,039
thank you very much Steve

489
00:21:57,059 --> 00:21:58,500
we do have time for questions who's

490
00:21:58,500 --> 00:22:00,840
first

491
00:22:00,840 --> 00:22:04,080
can you kindly expand upon limitations

492
00:22:04,080 --> 00:22:07,440
of container scanning

493
00:22:07,440 --> 00:22:11,340
okay so an example might be you've got a

494
00:22:11,340 --> 00:22:14,880
Docker file and you have a custom way of

495
00:22:14,880 --> 00:22:18,419
installing node.js so you might have in

496
00:22:18,419 --> 00:22:20,940
your Docker file a command that curls

497
00:22:20,940 --> 00:22:22,039
the

498
00:22:22,039 --> 00:22:25,260
node.js zip file and then you have

499
00:22:25,260 --> 00:22:27,419
another command that unzips it into a

500
00:22:27,419 --> 00:22:30,419
particular custom folder in your Docker

501
00:22:30,419 --> 00:22:33,419
image by doing that there's there's very

502
00:22:33,419 --> 00:22:36,720
little chance that you're like a

503
00:22:36,720 --> 00:22:39,179
scanning tool is going to notice that

504
00:22:39,179 --> 00:22:41,820
node.js runtime and if it doesn't notice

505
00:22:41,820 --> 00:22:43,740
it it's not going to be able to report

506
00:22:43,740 --> 00:22:45,720
it in the s-bomb and it's not going to

507
00:22:45,720 --> 00:22:47,880
be able to identify any vulnerabilities

508
00:22:47,880 --> 00:22:50,400
we won't even it you know it won't know

509
00:22:50,400 --> 00:22:52,980
the version First

510
00:22:52,980 --> 00:22:55,140
do that then I always put

511
00:22:55,140 --> 00:22:58,620
in there too to feed the scanner to

512
00:22:58,620 --> 00:23:00,799
it so

513
00:23:00,799 --> 00:23:03,659
you what your what I'm I suppose I'm

514
00:23:03,659 --> 00:23:06,240
really trying to say is don't let your

515
00:23:06,240 --> 00:23:09,059
whoever is responsible for creating

516
00:23:09,059 --> 00:23:10,740
Docker files

517
00:23:10,740 --> 00:23:13,500
don't let them do this make sure that

518
00:23:13,500 --> 00:23:16,020
they use standard package managers like

519
00:23:16,020 --> 00:23:19,460
yum or apt

520
00:23:28,020 --> 00:23:29,820
say

521
00:23:29,820 --> 00:23:31,919
no no you're absolutely I see what you

522
00:23:31,919 --> 00:23:33,720
mean no you're absolutely correct I

523
00:23:33,720 --> 00:23:35,600
think you have to take a view

524
00:23:35,600 --> 00:23:38,640
on how you're going to tackle images

525
00:23:38,640 --> 00:23:42,919
that come in from the from the outside

526
00:23:55,260 --> 00:23:59,360
sorry I didn't quite follow that

527
00:24:00,059 --> 00:24:02,100
no no if you're that's exactly it if

528
00:24:02,100 --> 00:24:04,380
you're that that's where you know this

529
00:24:04,380 --> 00:24:06,900
isn't um this isn't a Silver Bullet by

530
00:24:06,900 --> 00:24:07,740
the way

531
00:24:07,740 --> 00:24:09,659
um and and I completely agree with you

532
00:24:09,659 --> 00:24:12,360
if if you take random images

533
00:24:12,360 --> 00:24:14,100
um and and you depend on those random

534
00:24:14,100 --> 00:24:15,840
images then you're still leaving

535
00:24:15,840 --> 00:24:20,640
yourself open for um abuse as it were

536
00:24:20,640 --> 00:24:21,900
and the

537
00:24:21,900 --> 00:24:24,419
and and I think that's exactly the point

538
00:24:24,419 --> 00:24:26,340
that's exactly the point I'm trying to

539
00:24:26,340 --> 00:24:28,919
make is that scanners are not silver

540
00:24:28,919 --> 00:24:31,260
bullets either they will not protect you

541
00:24:31,260 --> 00:24:34,380
from that kind of activity

542
00:24:34,380 --> 00:24:37,140
that yeah and that's a great point that

543
00:24:37,140 --> 00:24:40,500
I'm glad was said also with this um did

544
00:24:40,500 --> 00:24:42,900
you look at using like in Toto style

545
00:24:42,900 --> 00:24:44,580
layouts or things like that where you

546
00:24:44,580 --> 00:24:47,700
actually generate verifiable metadata

547
00:24:47,700 --> 00:24:49,080
for checking all this ahead of time

548
00:24:49,080 --> 00:24:52,020
rather than look at something post hoc

549
00:24:52,020 --> 00:24:53,940
and hoping it's right

550
00:24:53,940 --> 00:24:56,539
so

551
00:24:56,780 --> 00:24:59,940
where we're going with this is let's

552
00:24:59,940 --> 00:25:02,760
just say I don't want perfect to be the

553
00:25:02,760 --> 00:25:05,760
enemy of good so I can like I said I

554
00:25:05,760 --> 00:25:08,400
completely accept that this is only a

555
00:25:08,400 --> 00:25:10,860
step in the in the direction of

556
00:25:10,860 --> 00:25:13,620
improving security I think things like

557
00:25:13,620 --> 00:25:16,080
in Toto and the stuff that they're doing

558
00:25:16,080 --> 00:25:20,340
is great but it's still requires a level

559
00:25:20,340 --> 00:25:22,020
of wrapping your head around things

560
00:25:22,020 --> 00:25:25,200
which are quite hard to achieve and I

561
00:25:25,200 --> 00:25:26,700
think there's some

562
00:25:26,700 --> 00:25:29,220
some miles in that Journey yet before

563
00:25:29,220 --> 00:25:30,419
that's

564
00:25:30,419 --> 00:25:33,059
how can I say it easily to understand

565
00:25:33,059 --> 00:25:36,360
and apply into existing organizations

566
00:25:36,360 --> 00:25:39,000
workflows

567
00:25:39,000 --> 00:25:42,440
any other questions

568
00:25:43,620 --> 00:25:46,080
no well then thank you very much

569
00:25:46,080 --> 00:25:49,160
and cool thank you

570
00:25:49,160 --> 00:25:51,529
[Applause]

