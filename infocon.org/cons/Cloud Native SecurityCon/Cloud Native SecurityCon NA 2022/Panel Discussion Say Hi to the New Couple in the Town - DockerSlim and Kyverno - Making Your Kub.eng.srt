1
00:00:00,000 --> 00:00:02,100
hi everyone Welcome to Cloud native

2
00:00:02,100 --> 00:00:05,460
security core North America 2022 this

3
00:00:05,460 --> 00:00:07,560
could have been an in-person discussion

4
00:00:07,560 --> 00:00:10,500
but due to our limitations let's enjoy

5
00:00:10,500 --> 00:00:13,440
it in a virtual mode so now uh let's go

6
00:00:13,440 --> 00:00:16,619
ahead and what is this talk about so

7
00:00:16,619 --> 00:00:19,440
this is a panel discussion on the title

8
00:00:19,440 --> 00:00:22,199
say hi to the new couple in town Dr slim

9
00:00:22,199 --> 00:00:24,539
and kuberno making your kubernetes

10
00:00:24,539 --> 00:00:26,820
workloads more secure

11
00:00:26,820 --> 00:00:29,840
next slide

12
00:00:30,300 --> 00:00:33,480
who do we have with us first I'm ruika

13
00:00:33,480 --> 00:00:36,899
balani I am a final year engineering

14
00:00:36,899 --> 00:00:38,160
student who's studying information

15
00:00:38,160 --> 00:00:41,760
technology I have been an LFX 90 to

16
00:00:41,760 --> 00:00:44,160
crosswind project and also a technical

17
00:00:44,160 --> 00:00:46,500
writer to signos which is an open source

18
00:00:46,500 --> 00:00:51,360
ATM and this is my first coupon plus

19
00:00:51,360 --> 00:00:53,820
Cloud intercourner speaker and I'm so

20
00:00:53,820 --> 00:00:57,180
beyond excited also before we go ahead

21
00:00:57,180 --> 00:00:59,760
I've heard a lot about what happens when

22
00:00:59,760 --> 00:01:02,100
you develop applications get them into

23
00:01:02,100 --> 00:01:04,619
containers but sometimes forget to

24
00:01:04,619 --> 00:01:06,360
harden them before shipping it to

25
00:01:06,360 --> 00:01:10,500
production and obviously this talk is

26
00:01:10,500 --> 00:01:13,439
somewhat related to that and by the end

27
00:01:13,439 --> 00:01:16,080
of the discussion I hope you and I both

28
00:01:16,080 --> 00:01:18,060
have answers to it and find something

29
00:01:18,060 --> 00:01:21,119
interesting so honestly

30
00:01:21,119 --> 00:01:23,939
um today I'm here to learn from my

31
00:01:23,939 --> 00:01:27,020
expert course speakers

32
00:01:27,080 --> 00:01:29,939
so Mr could you please introduce

33
00:01:29,939 --> 00:01:31,680
yourself

34
00:01:31,680 --> 00:01:35,040
yeah thank you so much uh Reika for that

35
00:01:35,040 --> 00:01:37,320
great introduction and and welcome

36
00:01:37,320 --> 00:01:39,600
everybody in Cloud native security con

37
00:01:39,600 --> 00:01:43,439
so introducing myself my name is and of

38
00:01:43,439 --> 00:01:46,200
course uh since we cannot make it in

39
00:01:46,200 --> 00:01:48,060
person I've made the background of USA

40
00:01:48,060 --> 00:01:51,780
of North America so yeah uh let's make

41
00:01:51,780 --> 00:01:54,600
it fun my name is nitunjay as as I

42
00:01:54,600 --> 00:01:56,700
already discussed and I just graduated

43
00:01:56,700 --> 00:01:58,079
from my bachelor's in computer science

44
00:01:58,079 --> 00:02:00,360
engineering and currently I am working

45
00:02:00,360 --> 00:02:03,119
with slim.ai as the member of technical

46
00:02:03,119 --> 00:02:05,640
staff uh previously I have been

47
00:02:05,640 --> 00:02:07,799
contributing to like various open source

48
00:02:07,799 --> 00:02:10,440
projects for for about two years now as

49
00:02:10,440 --> 00:02:12,840
a Google summer of code mentee as an LFX

50
00:02:12,840 --> 00:02:15,360
mentee and I have contributed to

51
00:02:15,360 --> 00:02:17,400
projects like Carver no docuslin both

52
00:02:17,400 --> 00:02:19,800
which we are going to discuss today so

53
00:02:19,800 --> 00:02:21,540
we're really hoping that it's going to

54
00:02:21,540 --> 00:02:23,819
be a great session for all of us and

55
00:02:23,819 --> 00:02:26,119
thank you

56
00:02:27,440 --> 00:02:30,540
you may go ahead

57
00:02:30,540 --> 00:02:33,060
thanks Rekha and thanks Martha J and

58
00:02:33,060 --> 00:02:35,819
hello everyone this is shooting Zhao I'm

59
00:02:35,819 --> 00:02:38,459
coming from caverno I'm in Montana of

60
00:02:38,459 --> 00:02:41,459
caverno and leading the uh Kevin and

61
00:02:41,459 --> 00:02:43,620
Louise's and contributing to all faces

62
00:02:43,620 --> 00:02:46,500
of caverno and I'm currently working as

63
00:02:46,500 --> 00:02:50,000
a staff engineer at the model

64
00:02:50,519 --> 00:02:52,500
thank you shooting that is a great intro

65
00:02:52,500 --> 00:02:55,920
now moving on we have a first tool which

66
00:02:55,920 --> 00:02:58,800
is so shooting could you please tell us

67
00:02:58,800 --> 00:03:01,260
about what the policies what have you

68
00:03:01,260 --> 00:03:03,480
ever know and how discover no help in

69
00:03:03,480 --> 00:03:06,720
securing workloads and kubernetes

70
00:03:06,720 --> 00:03:09,959
sure so today we'll first look at about

71
00:03:09,959 --> 00:03:13,140
policies and then we'll look into policy

72
00:03:13,140 --> 00:03:15,420
engines that are available for caverna

73
00:03:15,420 --> 00:03:18,480
right so policies are really a contract

74
00:03:18,480 --> 00:03:21,060
of your shared environment so let's take

75
00:03:21,060 --> 00:03:23,940
kubernetes as an example the most common

76
00:03:23,940 --> 00:03:26,940
practice of your deployment is probably

77
00:03:26,940 --> 00:03:29,760
running and maintaining them on a shared

78
00:03:29,760 --> 00:03:32,940
kubernetes cluster and kubernetes known

79
00:03:32,940 --> 00:03:36,540
as it's extremely powerful

80
00:03:36,540 --> 00:03:40,260
um like with the Declaration declarative

81
00:03:40,260 --> 00:03:43,319
configuration capabilities you can

82
00:03:43,319 --> 00:03:46,860
specify manifests for pods deployments

83
00:03:46,860 --> 00:03:49,319
services and others right so there's

84
00:03:49,319 --> 00:03:52,440
tons of settings of configurations can

85
00:03:52,440 --> 00:03:55,680
be done in kubernetes and with that very

86
00:03:55,680 --> 00:03:57,360
declarative manner

87
00:03:57,360 --> 00:04:00,480
and there are several different rows

88
00:04:00,480 --> 00:04:02,280
um that might be involved in this

89
00:04:02,280 --> 00:04:05,640
scenario like your obstain your security

90
00:04:05,640 --> 00:04:08,400
team devs that try to manage

91
00:04:08,400 --> 00:04:10,980
applications they're all involved in

92
00:04:10,980 --> 00:04:13,140
some aspects or the other of this

93
00:04:13,140 --> 00:04:16,320
configuration so here policy helps

94
00:04:16,320 --> 00:04:18,839
separate those concerns across different

95
00:04:18,839 --> 00:04:22,860
roles and because of that declarative

96
00:04:22,860 --> 00:04:26,160
native the configurations do get very

97
00:04:26,160 --> 00:04:29,580
detailed you need a solution like policy

98
00:04:29,580 --> 00:04:31,979
to validate or secure those

99
00:04:31,979 --> 00:04:34,740
configurations at scale

100
00:04:34,740 --> 00:04:37,380
and really the idea was policy should

101
00:04:37,380 --> 00:04:40,020
not just be you know for security but

102
00:04:40,020 --> 00:04:42,780
also for automation so how do we simply

103
00:04:42,780 --> 00:04:45,060
manage these kubernetes and

104
00:04:45,060 --> 00:04:48,540
configurations by automating as much as

105
00:04:48,540 --> 00:04:52,080
we can by taking away some of those the

106
00:04:52,080 --> 00:04:55,320
need for coordination and those manual

107
00:04:55,320 --> 00:04:58,259
handoffs and do it in the manner that

108
00:04:58,259 --> 00:05:01,440
extremely intuitive to Fox who have

109
00:05:01,440 --> 00:05:03,900
already put in the effort and time to

110
00:05:03,900 --> 00:05:06,419
learn kubernetes so policy can help with

111
00:05:06,419 --> 00:05:08,580
all of those

112
00:05:08,580 --> 00:05:11,040
so now we understand why do we need

113
00:05:11,040 --> 00:05:13,680
policies let's talk about policy engines

114
00:05:13,680 --> 00:05:16,020
right if you have used policy engines

115
00:05:16,020 --> 00:05:18,540
before you may know there are options

116
00:05:18,540 --> 00:05:21,720
like caberno open gatekeeper could

117
00:05:21,720 --> 00:05:24,720
Warden and others right so today let me

118
00:05:24,720 --> 00:05:27,600
introduce caverno a little bit caberno

119
00:05:27,600 --> 00:05:30,620
is is a kubernetes native policy Engine

120
00:05:30,620 --> 00:05:34,139
with no language required at this case

121
00:05:34,139 --> 00:05:38,160
no learning curve policies are managed

122
00:05:38,160 --> 00:05:41,520
as kubernetes custom resources which is

123
00:05:41,520 --> 00:05:44,100
easy to write and manage

124
00:05:44,100 --> 00:05:46,979
and pivarno generates the policy reports

125
00:05:46,979 --> 00:05:49,620
based on the policy application result

126
00:05:49,620 --> 00:05:52,979
right it is also another custom resource

127
00:05:52,979 --> 00:05:56,220
that is available in kubernetes uh which

128
00:05:56,220 --> 00:05:58,919
which makes it easy to access to fetch

129
00:05:58,919 --> 00:06:00,720
and process

130
00:06:00,720 --> 00:06:03,780
so caverno has this ability of you know

131
00:06:03,780 --> 00:06:06,600
validate resources you can either block

132
00:06:06,600 --> 00:06:08,820
the resource creation or audit in the

133
00:06:08,820 --> 00:06:12,060
policy reports or to mutate the incoming

134
00:06:12,060 --> 00:06:15,120
request or existing objects generate

135
00:06:15,120 --> 00:06:18,000
additional new resources and verify

136
00:06:18,000 --> 00:06:20,340
image signatures

137
00:06:20,340 --> 00:06:22,860
but caverna also supports like all

138
00:06:22,860 --> 00:06:24,900
kubernetes types including custom

139
00:06:24,900 --> 00:06:27,240
resource in fact policies and policy

140
00:06:27,240 --> 00:06:29,580
reports are managed as CRS and

141
00:06:29,580 --> 00:06:32,819
kubernetes the policies can be extended

142
00:06:32,819 --> 00:06:35,880
to apply to any of the custom resources

143
00:06:35,880 --> 00:06:38,400
available in your cluster as well and

144
00:06:38,400 --> 00:06:40,639
convertible leverages the kubernetes

145
00:06:40,639 --> 00:06:43,800
patterns and practices things like

146
00:06:43,800 --> 00:06:46,800
labels annotation selectors which can be

147
00:06:46,800 --> 00:06:50,039
used to select matching resources the

148
00:06:50,039 --> 00:06:52,080
events Cabernet generates events on

149
00:06:52,080 --> 00:06:54,780
policy application it understands the

150
00:06:54,780 --> 00:06:56,639
owner reference you can look up the

151
00:06:56,639 --> 00:06:59,880
owner reference it also use the uses the

152
00:06:59,880 --> 00:07:01,319
owner reference for the garbage

153
00:07:01,319 --> 00:07:04,080
collection and if you have the Pod

154
00:07:04,080 --> 00:07:06,840
policies installed in the convertible in

155
00:07:06,840 --> 00:07:09,419
the kubernetes cluster cavernova

156
00:07:09,419 --> 00:07:11,400
automatically cover the Pod controllers

157
00:07:11,400 --> 00:07:13,919
so so many things that is available in

158
00:07:13,919 --> 00:07:16,620
converno but today we're not gonna dive

159
00:07:16,620 --> 00:07:18,979
deep into caverno and its architecture

160
00:07:18,979 --> 00:07:21,539
instead let's let's you know talk about

161
00:07:21,539 --> 00:07:24,300
the top use cases that we've been

162
00:07:24,300 --> 00:07:27,300
collecting from the kubernetes from the

163
00:07:27,300 --> 00:07:29,639
caverno community

164
00:07:29,639 --> 00:07:32,160
so the first thing coming to mind into

165
00:07:32,160 --> 00:07:34,560
mind or uh the common use cases with

166
00:07:34,560 --> 00:07:37,199
saying from the community is the ability

167
00:07:37,199 --> 00:07:40,319
to validate or secure the Pod and

168
00:07:40,319 --> 00:07:43,080
workload security right so you know the

169
00:07:43,080 --> 00:07:46,139
kubernetes has removed the support of

170
00:07:46,139 --> 00:07:48,960
the Pod security policies and instead

171
00:07:48,960 --> 00:07:50,699
they've introduced the prosecutor

172
00:07:50,699 --> 00:07:52,919
emission to enforce the Pod security

173
00:07:52,919 --> 00:07:56,479
standards and with caberno 1.8 release

174
00:07:56,479 --> 00:07:59,639
it has the native support of integration

175
00:07:59,639 --> 00:08:01,740
of the Pod security admission controller

176
00:08:01,740 --> 00:08:04,139
you can specify a new type of part

177
00:08:04,139 --> 00:08:08,280
security rule to work with the PSA and

178
00:08:08,280 --> 00:08:10,860
use that to enforce the Pod security

179
00:08:10,860 --> 00:08:13,500
standards and trying to ease the

180
00:08:13,500 --> 00:08:15,419
validate policies to enforce best

181
00:08:15,419 --> 00:08:17,940
practices that you don't want image

182
00:08:17,940 --> 00:08:20,759
stack to be set to office and you can

183
00:08:20,759 --> 00:08:22,800
use the valid policy to eliminate

184
00:08:22,800 --> 00:08:24,560
misconfigurations

185
00:08:24,560 --> 00:08:27,660
and so on so forth right and there's the

186
00:08:27,660 --> 00:08:30,120
tiverno generate ability there's one

187
00:08:30,120 --> 00:08:33,659
interesting use case about multi-tenancy

188
00:08:33,659 --> 00:08:36,958
right the generate ability in caverno it

189
00:08:36,958 --> 00:08:39,899
helps you to set up the new namespaces

190
00:08:39,899 --> 00:08:43,140
or the virtual cluster because it can

191
00:08:43,140 --> 00:08:45,899
generate a bunch of our back resources

192
00:08:45,899 --> 00:08:49,140
as well as Secrets config Maps whatever

193
00:08:49,140 --> 00:08:51,839
resources that that are needed to help

194
00:08:51,839 --> 00:08:54,300
you set up that virtual environments

195
00:08:54,300 --> 00:08:56,580
right and caverno provides this

196
00:08:56,580 --> 00:08:59,940
Standalone ceoi which can be leveraged

197
00:08:59,940 --> 00:09:02,820
and used in your cicd pipelines to help

198
00:09:02,820 --> 00:09:06,000
validate or mutate resources before you

199
00:09:06,000 --> 00:09:08,220
push those configurations or deploy the

200
00:09:08,220 --> 00:09:11,700
applications into your real cluster

201
00:09:11,700 --> 00:09:14,640
the image signing feature or the image

202
00:09:14,640 --> 00:09:16,620
verify rule we've seen a lot of use

203
00:09:16,620 --> 00:09:19,440
cases that user would like to emit

204
00:09:19,440 --> 00:09:21,779
verify the image signatures as well as

205
00:09:21,779 --> 00:09:25,560
attach stations and a converter has its

206
00:09:25,560 --> 00:09:28,440
sub project called pulse reporter which

207
00:09:28,440 --> 00:09:30,959
integrate that which consumes the policy

208
00:09:30,959 --> 00:09:34,080
reports that are generated by kuberno or

209
00:09:34,080 --> 00:09:37,560
possibly other policy engine and it can

210
00:09:37,560 --> 00:09:40,019
push out the violations or send the

211
00:09:40,019 --> 00:09:42,420
alerts to the downstream targets right

212
00:09:42,420 --> 00:09:45,240
so there are so many features that are

213
00:09:45,240 --> 00:09:47,760
available in caverno but these are the

214
00:09:47,760 --> 00:09:50,160
common use cases that we've collect from

215
00:09:50,160 --> 00:09:54,240
the community and uh is used most

216
00:09:54,240 --> 00:09:57,660
so with that let me hand off to Rika and

217
00:09:57,660 --> 00:10:00,000
she will demonstrate one of the corona

218
00:10:00,000 --> 00:10:02,220
policy and see how how that works in the

219
00:10:02,220 --> 00:10:04,860
live cluster

220
00:10:04,860 --> 00:10:07,019
thank you so much shooting thank you for

221
00:10:07,019 --> 00:10:10,920
the brief introduction and uh telling us

222
00:10:10,920 --> 00:10:13,200
about the important use cases of kevanu

223
00:10:13,200 --> 00:10:17,660
so let me quickly share my screen

224
00:10:21,420 --> 00:10:24,860
is my Domino visible

225
00:10:25,200 --> 00:10:28,279
yes yes so today we're gonna talk about

226
00:10:28,279 --> 00:10:31,260
add labels policy actually I'll be

227
00:10:31,260 --> 00:10:34,320
demonstrating it to you so by now I have

228
00:10:34,320 --> 00:10:37,800
understood uh what is a policy so policy

229
00:10:37,800 --> 00:10:40,860
is actually a collection of rules so as

230
00:10:40,860 --> 00:10:42,839
you can see underneath the spec we have

231
00:10:42,839 --> 00:10:45,060
written rule and each rule could have

232
00:10:45,060 --> 00:10:47,459
either a match block or an exclude block

233
00:10:47,459 --> 00:10:50,700
and in our policy actually we have taken

234
00:10:50,700 --> 00:10:53,880
match for resource kinds it could also

235
00:10:53,880 --> 00:10:57,420
be for resource names user groups and

236
00:10:57,420 --> 00:11:00,600
usernames and also each rule could all

237
00:11:00,600 --> 00:11:03,540
only have one task that that is either

238
00:11:03,540 --> 00:11:06,660
you could mutate the resource validate

239
00:11:06,660 --> 00:11:09,000
the resource or generate the resource so

240
00:11:09,000 --> 00:11:12,300
let's go ahead the aim of our tiwano

241
00:11:12,300 --> 00:11:16,260
policy is to actually mutate the label

242
00:11:16,260 --> 00:11:20,220
fubar I'll quickly share my screen

243
00:11:20,220 --> 00:11:23,959
um yep so I have already created a

244
00:11:23,959 --> 00:11:27,240
directory called kivano policy and have

245
00:11:27,240 --> 00:11:29,700
pasted this policy so as you can see we

246
00:11:29,700 --> 00:11:33,300
have set Rule and it would match to uh

247
00:11:33,300 --> 00:11:35,880
this spot service config map and secret

248
00:11:35,880 --> 00:11:37,440
kind

249
00:11:37,440 --> 00:11:41,040
let's go ahead let's actually apply it

250
00:11:41,040 --> 00:11:43,260
so as you can see my cluster is up and

251
00:11:43,260 --> 00:11:46,320
running and now uh I will go to the

252
00:11:46,320 --> 00:11:50,160
documentation and see how to actually

253
00:11:50,160 --> 00:11:52,140
install the window

254
00:11:52,140 --> 00:11:54,600
so as you can see here actually they

255
00:11:54,600 --> 00:11:56,459
have given us two ways of installing

256
00:11:56,459 --> 00:11:58,980
kubernet which is directly from the

257
00:11:58,980 --> 00:12:01,140
latest release or

258
00:12:01,140 --> 00:12:03,959
using Helm I'm gonna go through method

259
00:12:03,959 --> 00:12:06,060
one which is installing from the latest

260
00:12:06,060 --> 00:12:10,640
release manifest I'll copy the code

261
00:12:10,800 --> 00:12:16,219
I think it's copied and now paste it

262
00:12:16,500 --> 00:12:20,480
cool it's installed now

263
00:12:21,120 --> 00:12:24,060
let's actually see yup we're able to see

264
00:12:24,060 --> 00:12:27,540
a dedicated namespace of kebano where

265
00:12:27,540 --> 00:12:30,660
it's installed now I'm gonna apply my

266
00:12:30,660 --> 00:12:34,279
add labels policy

267
00:12:43,320 --> 00:12:46,019
as you can see here my ad labels policy

268
00:12:46,019 --> 00:12:48,540
is created Cube Kittle apply actually

269
00:12:48,540 --> 00:12:52,800
creates and updates the resources uh so

270
00:12:52,800 --> 00:12:54,779
our next step would be to actually test

271
00:12:54,779 --> 00:12:56,880
it out now

272
00:12:56,880 --> 00:13:00,240
I have created a resource the DML with

273
00:13:00,240 --> 00:13:03,720
the kind of pod and a service uh so by

274
00:13:03,720 --> 00:13:05,880
now we're seeing that uh policy is

275
00:13:05,880 --> 00:13:08,040
actually created now let me just go

276
00:13:08,040 --> 00:13:10,560
ahead with the resource part so in the

277
00:13:10,560 --> 00:13:12,660
resource part I have actually taken pod

278
00:13:12,660 --> 00:13:15,360
and the services and I've separated this

279
00:13:15,360 --> 00:13:17,880
by three dashes which is a gamut syntax

280
00:13:17,880 --> 00:13:23,060
now I will actually go ahead and apply

281
00:13:44,880 --> 00:13:47,160
as you can see my powered and my service

282
00:13:47,160 --> 00:13:50,639
has been created now to actually see if

283
00:13:50,639 --> 00:13:53,459
the the labels have been mutated I'm

284
00:13:53,459 --> 00:13:55,019
gonna

285
00:13:55,019 --> 00:13:58,279
get a wide

286
00:13:59,940 --> 00:14:02,720
one second

287
00:14:02,940 --> 00:14:07,560
format in the Yahoo form and

288
00:14:07,560 --> 00:14:10,200
now you can see my labels who and my bar

289
00:14:10,200 --> 00:14:13,320
label screw bar has been mutated so till

290
00:14:13,320 --> 00:14:16,620
now it's been successful now uh moving

291
00:14:16,620 --> 00:14:19,980
on to the next Tool uh Mithun Jack could

292
00:14:19,980 --> 00:14:23,459
you please tell us more about containers

293
00:14:23,459 --> 00:14:29,000
and how uh what magic does caucus Lim do

294
00:14:33,420 --> 00:14:37,160
Mr Jay I think you're all mute

295
00:14:39,420 --> 00:14:42,720
okay yeah that is a age-old Zone

296
00:14:42,720 --> 00:14:45,240
probably we are used to now so yeah okay

297
00:14:45,240 --> 00:14:47,399
thank you so much Reika for that amazing

298
00:14:47,399 --> 00:14:51,899
intro and demo of kaiwano now moving to

299
00:14:51,899 --> 00:14:53,940
the next part let me share the screen I

300
00:14:53,940 --> 00:14:56,820
hope my slides are visible

301
00:14:56,820 --> 00:15:00,300
Okay cool so now that we know what is

302
00:15:00,300 --> 00:15:04,139
Carver now and what is the one tool that

303
00:15:04,139 --> 00:15:06,199
we were talking about integrating here

304
00:15:06,199 --> 00:15:09,000
next let's move to the next part

305
00:15:09,000 --> 00:15:11,760
containers and how does worker slim help

306
00:15:11,760 --> 00:15:13,500
us there

307
00:15:13,500 --> 00:15:16,260
so we know that if we look at this graph

308
00:15:16,260 --> 00:15:17,940
itself we know that containers have

309
00:15:17,940 --> 00:15:20,279
become the norm as Cloud adoption

310
00:15:20,279 --> 00:15:22,139
increases sharply

311
00:15:22,139 --> 00:15:24,600
but before we talk about how and why

312
00:15:24,600 --> 00:15:27,860
they are being adopted and why why why

313
00:15:27,860 --> 00:15:30,899
we need a tool called Docker slim let's

314
00:15:30,899 --> 00:15:33,360
talk about what are containers and I'm

315
00:15:33,360 --> 00:15:35,880
going to talk about containers by by

316
00:15:35,880 --> 00:15:37,680
reproducing or showing you something

317
00:15:37,680 --> 00:15:41,100
that I have learned from is is Judy I

318
00:15:41,100 --> 00:15:43,620
want's a beautiful Twitter threads and

319
00:15:43,620 --> 00:15:46,560
these images which uh which you can see

320
00:15:46,560 --> 00:15:48,360
are actually from our Twitter thread

321
00:15:48,360 --> 00:15:50,579
explaining about containers and most of

322
00:15:50,579 --> 00:15:53,220
my slides actually I'll be I'll be

323
00:15:53,220 --> 00:15:55,500
trying to help you out some from

324
00:15:55,500 --> 00:15:57,959
something where I learned so moving

325
00:15:57,959 --> 00:16:00,420
ahead what are containers so if you look

326
00:16:00,420 --> 00:16:02,100
at containers containers are nothing

327
00:16:02,100 --> 00:16:04,740
sort of out of the World Magic they are

328
00:16:04,740 --> 00:16:05,940
nothing but processors running on

329
00:16:05,940 --> 00:16:09,600
servers itself right so so the the a

330
00:16:09,600 --> 00:16:11,220
container is basically nothing but a

331
00:16:11,220 --> 00:16:13,139
group of Linux processors and they are

332
00:16:13,139 --> 00:16:14,160
very good

333
00:16:14,160 --> 00:16:17,339
at isolation so they are good or at

334
00:16:17,339 --> 00:16:19,320
isolation of the processes but they are

335
00:16:19,320 --> 00:16:22,620
isolated against the Linux kernel they

336
00:16:22,620 --> 00:16:25,079
are not isolated from the Linux kernel

337
00:16:25,079 --> 00:16:26,940
that is a very important thing that we

338
00:16:26,940 --> 00:16:29,220
need to know today and that is why what

339
00:16:29,220 --> 00:16:31,019
we are going to discuss ahead can be

340
00:16:31,019 --> 00:16:32,699
important for us to know

341
00:16:32,699 --> 00:16:34,740
so

342
00:16:34,740 --> 00:16:37,019
now that we know that containers

343
00:16:37,019 --> 00:16:39,779
are basically very very close to the

344
00:16:39,779 --> 00:16:41,699
heart of the Linux kernel

345
00:16:41,699 --> 00:16:43,740
we need we know that they are also

346
00:16:43,740 --> 00:16:45,660
vulnerable to attacks at the same time

347
00:16:45,660 --> 00:16:49,800
and how to control how to control and

348
00:16:49,800 --> 00:16:51,660
how to reduce the surface area of attack

349
00:16:51,660 --> 00:16:53,940
there are various options for that we

350
00:16:53,940 --> 00:16:55,860
can like maybe restrict the Ram size

351
00:16:55,860 --> 00:16:58,259
that we are going to give them we can we

352
00:16:58,259 --> 00:17:01,320
can we can try to reduce their access to

353
00:17:01,320 --> 00:17:03,959
the disk we can also we can also enforce

354
00:17:03,959 --> 00:17:06,959
the number of CIS calls that is that is

355
00:17:06,959 --> 00:17:08,400
going to be the most important part that

356
00:17:08,400 --> 00:17:10,079
we are going to discuss we can enforce

357
00:17:10,079 --> 00:17:12,540
the number of ciscals that one that one

358
00:17:12,540 --> 00:17:15,780
container might give you access to so

359
00:17:15,780 --> 00:17:19,339
what are we going to discuss ahead but

360
00:17:19,339 --> 00:17:21,599
the thing that we are going to discuss

361
00:17:21,599 --> 00:17:22,980
now is that

362
00:17:22,980 --> 00:17:24,599
now that we know a little bit about

363
00:17:24,599 --> 00:17:26,760
containers let's talk about the problems

364
00:17:26,760 --> 00:17:29,100
that the developers face while working

365
00:17:29,100 --> 00:17:31,740
with containers so making a container

366
00:17:31,740 --> 00:17:34,080
can be called still an easier task but

367
00:17:34,080 --> 00:17:35,820
making them production ready is

368
00:17:35,820 --> 00:17:37,740
something that's still difficult uh why

369
00:17:37,740 --> 00:17:39,539
because again that what we talked about

370
00:17:39,539 --> 00:17:41,460
if they are containers they are again

371
00:17:41,460 --> 00:17:44,039
just in external processes right and if

372
00:17:44,039 --> 00:17:46,320
they have processors they are they are

373
00:17:46,320 --> 00:17:48,000
prone to attacks

374
00:17:48,000 --> 00:17:50,160
how to manage it all how to how to

375
00:17:50,160 --> 00:17:52,799
reduce your container how to reduce a

376
00:17:52,799 --> 00:17:54,419
container size how to reduce that lag

377
00:17:54,419 --> 00:17:55,919
surface and also at the same time

378
00:17:55,919 --> 00:17:57,840
something that we are discussing right

379
00:17:57,840 --> 00:17:59,460
now but we are going to discuss in more

380
00:17:59,460 --> 00:18:01,919
detail later second

381
00:18:01,919 --> 00:18:04,980
how to create a security how to create a

382
00:18:04,980 --> 00:18:07,140
profile that actually controls and

383
00:18:07,140 --> 00:18:09,299
filters out the syscalls that are going

384
00:18:09,299 --> 00:18:13,740
to be available to the to the container

385
00:18:13,740 --> 00:18:16,320
and that is where this tool Docker slim

386
00:18:16,320 --> 00:18:17,940
comes in action

387
00:18:17,940 --> 00:18:20,880
so Docker slim is one tool which which

388
00:18:20,880 --> 00:18:22,799
is something that developers can

389
00:18:22,799 --> 00:18:25,380
consider it as a magical to electrovise

390
00:18:25,380 --> 00:18:27,840
them with a set of lot of commands which

391
00:18:27,840 --> 00:18:30,480
which helps them not only build a more

392
00:18:30,480 --> 00:18:33,299
minified image like suppose if your

393
00:18:33,299 --> 00:18:35,880
image was around just for the example

394
00:18:35,880 --> 00:18:37,919
sake that your image was around 1GB

395
00:18:37,919 --> 00:18:40,440
sometimes Docker slim does such a task

396
00:18:40,440 --> 00:18:43,440
that it can be reduced to 30 MB so that

397
00:18:43,440 --> 00:18:44,820
kind of reduction that kind of image

398
00:18:44,820 --> 00:18:47,580
reduction not only potentially and how

399
00:18:47,580 --> 00:18:50,160
does that happen it happens nothing but

400
00:18:50,160 --> 00:18:52,080
you know actually reducing those

401
00:18:52,080 --> 00:18:55,200
vulnerable Parts something like if just

402
00:18:55,200 --> 00:18:57,360
for we are not going into deep detail of

403
00:18:57,360 --> 00:18:58,679
the architecture of Docker spin today

404
00:18:58,679 --> 00:19:01,559
but just to explain it like suppose you

405
00:19:01,559 --> 00:19:04,380
have those batchels open or those or

406
00:19:04,380 --> 00:19:06,059
those artifacts which are no longer

407
00:19:06,059 --> 00:19:08,940
required all those things that that that

408
00:19:08,940 --> 00:19:11,820
can be a prone risk are just cleaned up

409
00:19:11,820 --> 00:19:15,000
from the end user and that is why they

410
00:19:15,000 --> 00:19:17,340
verify your image and not only optimize

411
00:19:17,340 --> 00:19:19,500
them for production but also they help

412
00:19:19,500 --> 00:19:21,960
us creating and auto an automatic set

413
00:19:21,960 --> 00:19:23,700
comp profile app are more profile for

414
00:19:23,700 --> 00:19:25,620
you so you don't have to worry about

415
00:19:25,620 --> 00:19:27,900
knowing all the sys calls knowing which

416
00:19:27,900 --> 00:19:29,400
is cause you have to be restrictive

417
00:19:29,400 --> 00:19:31,860
about creating a white list or allow and

418
00:19:31,860 --> 00:19:33,840
deny list of sitcom you don't have to be

419
00:19:33,840 --> 00:19:36,660
a Linux CIS calls expert it Dockers some

420
00:19:36,660 --> 00:19:38,940
does for you out of the box so this is a

421
00:19:38,940 --> 00:19:41,220
very versatile tool and it has a lot of

422
00:19:41,220 --> 00:19:44,160
examples it it it it can minimize node

423
00:19:44,160 --> 00:19:46,500
applications Python and even now it's

424
00:19:46,500 --> 00:19:49,200
suppose compose volumes like like if you

425
00:19:49,200 --> 00:19:51,660
have a Docker composer even there it

426
00:19:51,660 --> 00:19:53,760
works with different kind of services

427
00:19:53,760 --> 00:19:55,620
so you can tell which service you want

428
00:19:55,620 --> 00:19:57,660
to basically minimize and it can help

429
00:19:57,660 --> 00:20:01,140
you minimize accordingly so

430
00:20:01,140 --> 00:20:03,720
now that we know about this I'll ask

431
00:20:03,720 --> 00:20:06,179
rohika again to just give a brief demo

432
00:20:06,179 --> 00:20:08,100
about what Docker slim Standalone does

433
00:20:08,100 --> 00:20:10,260
we will be going to discuss later about

434
00:20:10,260 --> 00:20:12,780
both the tools together but just a brief

435
00:20:12,780 --> 00:20:14,520
little demo about what Docker slim does

436
00:20:14,520 --> 00:20:16,559
can be little good idea for the audience

437
00:20:16,559 --> 00:20:19,020
to know so rohika can you just show some

438
00:20:19,020 --> 00:20:21,240
some magic being done by doctor

439
00:20:21,240 --> 00:20:24,419
yes thank you Mr first of all I learned

440
00:20:24,419 --> 00:20:27,179
a lot of interesting things about and

441
00:20:27,179 --> 00:20:30,419
facts about uh containers so let me just

442
00:20:30,419 --> 00:20:33,600
go ahead and share my screen so we'll be

443
00:20:33,600 --> 00:20:37,020
doing a demo on uh container image

444
00:20:37,020 --> 00:20:39,900
minification and with the help of top

445
00:20:39,900 --> 00:20:42,600
Slim tools so I hope everybody is able

446
00:20:42,600 --> 00:20:43,559
to

447
00:20:43,559 --> 00:20:45,360
see my dominant

448
00:20:45,360 --> 00:20:49,100
so starting I'll be sharing the

449
00:20:49,100 --> 00:20:52,559
documentation of

450
00:20:52,559 --> 00:20:53,940
seconds

451
00:20:53,940 --> 00:20:56,880
documentation of Docker Slim So as you

452
00:20:56,880 --> 00:21:00,539
can see we have downloads and they have

453
00:21:00,539 --> 00:21:02,640
given us different options either you

454
00:21:02,640 --> 00:21:05,340
can do the zip package or there is also

455
00:21:05,340 --> 00:21:07,200
scripted install which I'm gonna go

456
00:21:07,200 --> 00:21:09,900
through so

457
00:21:09,900 --> 00:21:14,960
let's go ahead paste it and yeah

458
00:21:18,179 --> 00:21:20,700
so the idea behind is to create a

459
00:21:20,700 --> 00:21:23,100
container and then Minify it using the

460
00:21:23,100 --> 00:21:26,580
docker slim build command so uh I'll be

461
00:21:26,580 --> 00:21:28,620
creating the container I'll get the

462
00:21:28,620 --> 00:21:32,640
images of Docker and then apply that

463
00:21:32,640 --> 00:21:36,179
image against Docker slim build command

464
00:21:36,179 --> 00:21:38,760
so now we'll be creating a Docker

465
00:21:38,760 --> 00:21:41,940
container I'll do Docker run you could

466
00:21:41,940 --> 00:21:43,039
also

467
00:21:43,039 --> 00:21:46,260
document create and then start I'll give

468
00:21:46,260 --> 00:21:49,500
the name of my in movies my and the next

469
00:21:49,500 --> 00:21:52,740
one which would be this is Port mapping

470
00:21:52,740 --> 00:21:56,840
so from Port 80 to 80 in a detached mode

471
00:21:56,840 --> 00:22:00,000
and just give the name of my image

472
00:22:00,000 --> 00:22:02,280
so it's unable to find the image locally

473
00:22:02,280 --> 00:22:04,260
it is going to pull from the registry

474
00:22:04,260 --> 00:22:07,799
and here yes it is able to create the

475
00:22:07,799 --> 00:22:11,220
image now let's check if it is actually

476
00:22:11,220 --> 00:22:15,000
there so you can see nginx image image

477
00:22:15,000 --> 00:22:18,179
ID created two weeks ago and then

478
00:22:18,179 --> 00:22:21,299
its size now the main part is Docker

479
00:22:21,299 --> 00:22:23,820
minification Docker image modifications

480
00:22:23,820 --> 00:22:27,559
so I'll do Stocker slim build and

481
00:22:27,559 --> 00:22:31,399
image name

482
00:22:35,820 --> 00:22:39,120
you can see another image ends Linux dot

483
00:22:39,120 --> 00:22:42,240
slim uh has been created which is latest

484
00:22:42,240 --> 00:22:46,220
and it is it has a size of

485
00:22:46,220 --> 00:22:50,159
12.2 MB now you can actually compare the

486
00:22:50,159 --> 00:22:53,159
difference between 12.2 and 142 MB so

487
00:22:53,159 --> 00:22:56,340
that is the magic of Docker slim and

488
00:22:56,340 --> 00:22:59,340
yeah that's pretty much it and now we

489
00:22:59,340 --> 00:23:02,159
can actually go ahead and we can check

490
00:23:02,159 --> 00:23:04,500
could you please go to the next part and

491
00:23:04,500 --> 00:23:07,679
tell us more about what we're gonna do

492
00:23:07,679 --> 00:23:11,039
and the intersection of caucus Limb and

493
00:23:11,039 --> 00:23:12,360
Cabernet

494
00:23:12,360 --> 00:23:14,460
what is Docker slim we know what is Sky

495
00:23:14,460 --> 00:23:16,200
one or to some extent now let's talk

496
00:23:16,200 --> 00:23:18,659
about the problems the problems that

497
00:23:18,659 --> 00:23:20,580
will that that are the reason why that

498
00:23:20,580 --> 00:23:23,100
this demo that this talk is happening so

499
00:23:23,100 --> 00:23:24,659
as we mentioned a little bit earlier

500
00:23:24,659 --> 00:23:26,220
what are containers they are nothing but

501
00:23:26,220 --> 00:23:28,080
Chinese processes actually good at

502
00:23:28,080 --> 00:23:30,120
isolation but not isolated itself from

503
00:23:30,120 --> 00:23:32,820
the Linux kernel amazing

504
00:23:32,820 --> 00:23:34,980
now every person that happens happens

505
00:23:34,980 --> 00:23:37,980
because of a series of system calls and

506
00:23:37,980 --> 00:23:40,380
the Linux kernel has a lot of things to

507
00:23:40,380 --> 00:23:42,419
do like it with you you know when you

508
00:23:42,419 --> 00:23:44,220
whenever you execute something you can

509
00:23:44,220 --> 00:23:47,580
you can you you there are a bunch of

510
00:23:47,580 --> 00:23:49,440
things happening behind whether it is

511
00:23:49,440 --> 00:23:51,960
reading from hard drive bringing it to

512
00:23:51,960 --> 00:23:54,419
your resource making it more resource

513
00:23:54,419 --> 00:23:56,100
utilizable making the network

514
00:23:56,100 --> 00:23:58,080
connections killing the process after

515
00:23:58,080 --> 00:24:00,600
it's done so your your your program

516
00:24:00,600 --> 00:24:02,940
actually does it with the help of system

517
00:24:02,940 --> 00:24:06,120
calls and although there are multiple

518
00:24:06,120 --> 00:24:08,280
ways and multiple tools to know what has

519
00:24:08,280 --> 00:24:10,140
happening behind the scene what system

520
00:24:10,140 --> 00:24:13,320
calls are being called uh it's still

521
00:24:13,320 --> 00:24:15,539
difficult and especially like if you

522
00:24:15,539 --> 00:24:17,419
have a cross architecture system

523
00:24:17,419 --> 00:24:20,520
although usually except for the

524
00:24:20,520 --> 00:24:22,020
production use cases it doesn't happen

525
00:24:22,020 --> 00:24:25,440
but but sys calls are important and they

526
00:24:25,440 --> 00:24:27,539
are very much architecture dependent so

527
00:24:27,539 --> 00:24:30,179
if you have like up across 86 or 86

528
00:24:30,179 --> 00:24:31,980
cross 64 architecture it is very much

529
00:24:31,980 --> 00:24:34,080
possible that your sys call will be

530
00:24:34,080 --> 00:24:36,780
different from the one in the r and that

531
00:24:36,780 --> 00:24:39,059
is by writing a second profile a

532
00:24:39,059 --> 00:24:41,220
security Computing mode profile which is

533
00:24:41,220 --> 00:24:42,659
a Linux kernel feature which we are

534
00:24:42,659 --> 00:24:44,220
going to talk about next but before we

535
00:24:44,220 --> 00:24:45,840
talk about set comp let's also talk

536
00:24:45,840 --> 00:24:48,179
about another interesting thing and that

537
00:24:48,179 --> 00:24:51,419
thing is capabilities so you know the

538
00:24:51,419 --> 00:24:54,840
root user can do anything it's it's said

539
00:24:54,840 --> 00:24:57,900
and and and it's and it's it is great

540
00:24:57,900 --> 00:25:00,720
but but what happens is that sometimes

541
00:25:00,720 --> 00:25:03,360
we need to specify

542
00:25:03,360 --> 00:25:05,520
and specifically Grant permissions to

543
00:25:05,520 --> 00:25:07,140
the services running especially like if

544
00:25:07,140 --> 00:25:10,140
it's your container and and you want

545
00:25:10,140 --> 00:25:14,220
your container to be you know filter out

546
00:25:14,220 --> 00:25:17,159
the actions that it can perform so that

547
00:25:17,159 --> 00:25:19,140
is something that we can do with the

548
00:25:19,140 --> 00:25:21,480
help of capability so so even though set

549
00:25:21,480 --> 00:25:24,000
comp exists before second even before

550
00:25:24,000 --> 00:25:26,760
whatever like we come to setcom there is

551
00:25:26,760 --> 00:25:28,500
this feature of capabilities but it does

552
00:25:28,500 --> 00:25:30,900
not offer more fine gain controls right

553
00:25:30,900 --> 00:25:34,260
it it offers you some controls but it

554
00:25:34,260 --> 00:25:35,940
still has its limitations of granting

555
00:25:35,940 --> 00:25:37,679
you the specific permissions and not

556
00:25:37,679 --> 00:25:39,600
actually letting you control the sys

557
00:25:39,600 --> 00:25:42,600
calls how to control this these Cisco

558
00:25:42,600 --> 00:25:46,500
syscalls and as of now Linus kernel in

559
00:25:46,500 --> 00:25:50,400
five point like the uh the trend in in

560
00:25:50,400 --> 00:25:52,559
the 5x series offline is Kernel we have

561
00:25:52,559 --> 00:25:55,260
around more than 300 sus calls for 86

562
00:25:55,260 --> 00:25:57,840
cross 64 architecture so knowing them

563
00:25:57,840 --> 00:25:59,940
all writing them all and to know which

564
00:25:59,940 --> 00:26:01,980
one to block which one to allow is a

565
00:26:01,980 --> 00:26:03,360
difficult task

566
00:26:03,360 --> 00:26:05,400
but that is what set com was made for

567
00:26:05,400 --> 00:26:09,240
and and how and and how how how the

568
00:26:09,240 --> 00:26:11,340
attacks can happen there are various

569
00:26:11,340 --> 00:26:13,140
ways where an attack can happen when

570
00:26:13,140 --> 00:26:14,820
you're dealing with containers the most

571
00:26:14,820 --> 00:26:16,080
common are like some of the common

572
00:26:16,080 --> 00:26:17,760
attacks are the supply chain attack like

573
00:26:17,760 --> 00:26:19,440
you don't know where the image is coming

574
00:26:19,440 --> 00:26:21,840
from and that can be a potential list

575
00:26:21,840 --> 00:26:23,520
but at the same time there are some

576
00:26:23,520 --> 00:26:25,919
times when the vulnerabilities can can

577
00:26:25,919 --> 00:26:28,080
hide into your containers you you you

578
00:26:28,080 --> 00:26:30,539
know that when you are going to use FFM

579
00:26:30,539 --> 00:26:34,440
PG codec you do not need uh to share

580
00:26:34,440 --> 00:26:36,480
um need access to read memory from

581
00:26:36,480 --> 00:26:38,460
another from other parts of your system

582
00:26:38,460 --> 00:26:41,220
and that can also be happened if you are

583
00:26:41,220 --> 00:26:43,980
not controlling your syscalls and and

584
00:26:43,980 --> 00:26:46,279
these kind of attacks can potentially

585
00:26:46,279 --> 00:26:48,720
exploit our systems and in order to

586
00:26:48,720 --> 00:26:51,840
control that Linux kernel came with the

587
00:26:51,840 --> 00:26:55,380
feature of uh secure Computing mode and

588
00:26:55,380 --> 00:26:59,220
and that allows us to filter what this

589
00:26:59,220 --> 00:27:00,840
calls we need to allow and we do not

590
00:27:00,840 --> 00:27:02,340
need to allow

591
00:27:02,340 --> 00:27:04,080
but

592
00:27:04,080 --> 00:27:06,059
as we discussed ahead

593
00:27:06,059 --> 00:27:07,919
how to automate this how to make the

594
00:27:07,919 --> 00:27:09,900
developer life easy that is where Docker

595
00:27:09,900 --> 00:27:11,820
slim comes into picture now that you

596
00:27:11,820 --> 00:27:13,380
know that Docker slim comes into picture

597
00:27:13,380 --> 00:27:15,360
how to make sure that when these

598
00:27:15,360 --> 00:27:17,400
containers are being loaded are being

599
00:27:17,400 --> 00:27:19,799
are being orchestrated as chords and

600
00:27:19,799 --> 00:27:22,320
kubernetes cluster how how can we make

601
00:27:22,320 --> 00:27:24,419
sure that they are enforced there that

602
00:27:24,419 --> 00:27:26,700
is where Carbono comes into picture so

603
00:27:26,700 --> 00:27:29,480
now we can see

604
00:27:30,620 --> 00:27:33,240
happening let's move to the real part

605
00:27:33,240 --> 00:27:35,940
let's move to the real demo or the final

606
00:27:35,940 --> 00:27:37,919
demo where we are actually going to

607
00:27:37,919 --> 00:27:39,600
integrate both the tools and see how

608
00:27:39,600 --> 00:27:42,000
they are helping us enforce and make our

609
00:27:42,000 --> 00:27:43,799
communities populist more secure and

610
00:27:43,799 --> 00:27:46,799
kdir and create artifacts

611
00:27:46,799 --> 00:27:49,559
folder so now it's an empty folder that

612
00:27:49,559 --> 00:27:50,820
we have created

613
00:27:50,820 --> 00:27:53,520
now let's let's do the docker slim Magic

614
00:27:53,520 --> 00:27:55,500
first let's try that command first so

615
00:27:55,500 --> 00:27:58,380
what command we are going to run so well

616
00:27:58,380 --> 00:28:01,919
I always keep the commands handy so I'll

617
00:28:01,919 --> 00:28:04,260
just have it here in front of you all

618
00:28:04,260 --> 00:28:05,880
the future commands also there for you

619
00:28:05,880 --> 00:28:07,980
but the magic is something that I'll be

620
00:28:07,980 --> 00:28:10,140
going to show so yeah

621
00:28:10,140 --> 00:28:13,140
this is the command so this let me just

622
00:28:13,140 --> 00:28:15,120
clear the screen so that you know it

623
00:28:15,120 --> 00:28:17,640
becomes a little more clear for the

624
00:28:17,640 --> 00:28:18,960
audience so

625
00:28:18,960 --> 00:28:21,600
yeah so what is doing let's let's try to

626
00:28:21,600 --> 00:28:23,820
see this come out how this works so the

627
00:28:23,820 --> 00:28:25,500
build command is something that we call

628
00:28:25,500 --> 00:28:27,480
these shoulders and this is the image

629
00:28:27,480 --> 00:28:29,520
that we are going to apply this on but

630
00:28:29,520 --> 00:28:31,080
what is this extra thing that we are

631
00:28:31,080 --> 00:28:32,640
going to see here so this is nothing but

632
00:28:32,640 --> 00:28:34,140
the artifacts folder that we have

633
00:28:34,140 --> 00:28:38,460
created we are going to copy that and Dr

634
00:28:38,460 --> 00:28:40,440
slim has a built-in argument for that

635
00:28:40,440 --> 00:28:43,679
for us to do so so and in this artifacts

636
00:28:43,679 --> 00:28:45,720
folder we'll be having our set count

637
00:28:45,720 --> 00:28:49,799
so let's build smt as SMP act error so

638
00:28:49,799 --> 00:28:51,600
this will actually be in this is just

639
00:28:51,600 --> 00:28:53,900
like kyber knows and force and audit

640
00:28:53,900 --> 00:28:56,400
analogy so this is something that is

641
00:28:56,400 --> 00:28:58,080
going to be enforced and that is going

642
00:28:58,080 --> 00:29:00,299
to block the these that is going to

643
00:29:00,299 --> 00:29:02,279
actually block any other syscalls which

644
00:29:02,279 --> 00:29:04,080
are not these because this is a this is

645
00:29:04,080 --> 00:29:06,900
an allow list okay so this is an allowed

646
00:29:06,900 --> 00:29:07,799
list

647
00:29:07,799 --> 00:29:10,559
now this could have been also log if

648
00:29:10,559 --> 00:29:11,880
this would have been logged then this

649
00:29:11,880 --> 00:29:13,860
would have been just like an audit kind

650
00:29:13,860 --> 00:29:16,260
of action where it would have logged out

651
00:29:16,260 --> 00:29:19,620
the ciscolls that are well that um that

652
00:29:19,620 --> 00:29:21,419
that are plot that are not allowed in

653
00:29:21,419 --> 00:29:23,279
this list and this is another very

654
00:29:23,279 --> 00:29:25,080
important thing that I was mentioning

655
00:29:25,080 --> 00:29:26,880
earlier also architecture it's very

656
00:29:26,880 --> 00:29:30,120
important to know the circum uh profile

657
00:29:30,120 --> 00:29:32,100
is work is for which architecture so

658
00:29:32,100 --> 00:29:35,100
this is for my my since my uh localhost

659
00:29:35,100 --> 00:29:37,380
is on Cross 8664 so we are going to use

660
00:29:37,380 --> 00:29:38,460
this

661
00:29:38,460 --> 00:29:41,100
okay and now

662
00:29:41,100 --> 00:29:43,919
uh as we know this so why why it is

663
00:29:43,919 --> 00:29:45,720
important why because like suppose just

664
00:29:45,720 --> 00:29:47,340
for the example this is an exit group

665
00:29:47,340 --> 00:29:50,419
this is called right so if this has uh

666
00:29:50,419 --> 00:29:53,399
like an address in the memory something

667
00:29:53,399 --> 00:29:55,679
like a sports zero two four just for the

668
00:29:55,679 --> 00:29:57,840
example sake in arm it might have a

669
00:29:57,840 --> 00:29:58,620
different

670
00:29:58,620 --> 00:30:01,140
pointer and that can create problems for

671
00:30:01,140 --> 00:30:03,240
it to identify which is called to

672
00:30:03,240 --> 00:30:05,220
actually Implement so that is why this

673
00:30:05,220 --> 00:30:07,740
having architecture is very important so

674
00:30:07,740 --> 00:30:09,360
this we have this and these are the

675
00:30:09,360 --> 00:30:12,299
allowed sys calls why we are having an

676
00:30:12,299 --> 00:30:14,520
allow list instead of a block list so

677
00:30:14,520 --> 00:30:16,559
this can be actually also a CMP act

678
00:30:16,559 --> 00:30:19,260
block and in that what would as the name

679
00:30:19,260 --> 00:30:21,779
sounds it can be like all those causes

680
00:30:21,779 --> 00:30:23,820
have to be blocked but Linux kernel is

681
00:30:23,820 --> 00:30:25,559
regularly being developed and it may

682
00:30:25,559 --> 00:30:29,159
happen that if we use a block list uh we

683
00:30:29,159 --> 00:30:30,840
we are not able to capture a future

684
00:30:30,840 --> 00:30:32,159
syscall that comes in the future

685
00:30:32,159 --> 00:30:34,320
upgrades of the Linux kernel and and

686
00:30:34,320 --> 00:30:36,659
that and that can be availability right

687
00:30:36,659 --> 00:30:39,000
so allow this will make sure that only

688
00:30:39,000 --> 00:30:42,600
these which we know about are allowed

689
00:30:42,600 --> 00:30:44,960
when nothing else happens

690
00:30:44,960 --> 00:30:47,880
in that so this is how a setcom profile

691
00:30:47,880 --> 00:30:50,640
looks like great now we have this now

692
00:30:50,640 --> 00:30:52,020
that we have this what is the next step

693
00:30:52,020 --> 00:30:55,200
The Next Step will be to install Maybe

694
00:30:55,200 --> 00:30:57,240
cover now I guess so just to remember

695
00:30:57,240 --> 00:30:59,039
that we are doing it right

696
00:30:59,039 --> 00:31:02,460
let's let's check

697
00:31:02,460 --> 00:31:04,679
so yeah we are going to create the

698
00:31:04,679 --> 00:31:06,240
cluster first the kind cluster of course

699
00:31:06,240 --> 00:31:08,159
and and how we are going to create that

700
00:31:08,159 --> 00:31:11,039
we are going to see that also that is

701
00:31:11,039 --> 00:31:13,080
you know a little tricky I'm not tricky

702
00:31:13,080 --> 00:31:14,460
actually we are going to use our own

703
00:31:14,460 --> 00:31:16,380
configuration why we are going to use

704
00:31:16,380 --> 00:31:18,779
our own configuration let's go ahead to

705
00:31:18,779 --> 00:31:24,200
see that first so showing you how

706
00:31:27,720 --> 00:31:31,740
so now if we see here this is this is

707
00:31:31,740 --> 00:31:33,659
not like a normal kind of create cluster

708
00:31:33,659 --> 00:31:35,159
that we are doing we are using our own

709
00:31:35,159 --> 00:31:36,779
configuration because we need to mount

710
00:31:36,779 --> 00:31:39,120
this artifacts folder which contains our

711
00:31:39,120 --> 00:31:41,820
set comp profile into the kind image

712
00:31:41,820 --> 00:31:43,559
that will be running our cluster right

713
00:31:43,559 --> 00:31:46,440
so that is why we have this which this

714
00:31:46,440 --> 00:31:48,539
is the host path that is this is my path

715
00:31:48,539 --> 00:31:50,580
where artifacts pull the second profile

716
00:31:50,580 --> 00:31:52,980
path was and this is the container path

717
00:31:52,980 --> 00:31:54,659
so this is the path which we'll have to

718
00:31:54,659 --> 00:31:56,700
see whether there the second profiles

719
00:31:56,700 --> 00:31:58,260
that we have created with the help of

720
00:31:58,260 --> 00:32:00,120
the custom will exist or not

721
00:32:00,120 --> 00:32:01,740
creating our cluster with that

722
00:32:01,740 --> 00:32:04,559
configurations and as soon as it gets

723
00:32:04,559 --> 00:32:08,399
ready now the next step will be to see

724
00:32:08,399 --> 00:32:11,159
if that image is working fine or not and

725
00:32:11,159 --> 00:32:13,140
once it is there we are going to exit

726
00:32:13,140 --> 00:32:14,940
and see

727
00:32:14,940 --> 00:32:16,919
whether our second profiles are loaded

728
00:32:16,919 --> 00:32:19,140
there or not so like of course the

729
00:32:19,140 --> 00:32:21,360
container ID will be different here so

730
00:32:21,360 --> 00:32:24,740
let's I'll just do that

731
00:32:28,620 --> 00:32:32,100
see ya we have a Docker container here

732
00:32:32,100 --> 00:32:34,380
and this is a container ID so we are

733
00:32:34,380 --> 00:32:36,899
going to use this container ID with this

734
00:32:36,899 --> 00:32:39,179
command which is nothing but just

735
00:32:39,179 --> 00:32:40,740
checking out if we have our second

736
00:32:40,740 --> 00:32:45,799
profiles there or not so yeah

737
00:32:46,380 --> 00:32:50,179
I'm just going to exchange this

738
00:32:57,120 --> 00:32:58,440
so yeah

739
00:32:58,440 --> 00:33:01,799
holding we have all we have our second

740
00:33:01,799 --> 00:33:04,799
profile here now that we have it we have

741
00:33:04,799 --> 00:33:07,080
everything with us the next step will be

742
00:33:07,080 --> 00:33:09,779
to install cardboard now so I'll be just

743
00:33:09,779 --> 00:33:13,080
using 1.7 uh cover new release which I

744
00:33:13,080 --> 00:33:14,519
think was the latest stable release when

745
00:33:14,519 --> 00:33:16,799
I saw I think so one point it's coming

746
00:33:16,799 --> 00:33:19,260
up and so I'm not sure but yeah let's do

747
00:33:19,260 --> 00:33:21,360
that let's install the kyberno because

748
00:33:21,360 --> 00:33:23,820
that is going to do the next part we

749
00:33:23,820 --> 00:33:25,860
have our setcom profile ready we have

750
00:33:25,860 --> 00:33:27,600
our container ready minified container

751
00:33:27,600 --> 00:33:29,640
ready and we have pushed that container

752
00:33:29,640 --> 00:33:31,860
in my private in my Pub in my registry

753
00:33:31,860 --> 00:33:34,279
which I'll be going to use so

754
00:33:34,279 --> 00:33:36,779
let's check it out first whether we have

755
00:33:36,779 --> 00:33:39,480
our given up and running or not so I'll

756
00:33:39,480 --> 00:33:41,279
be just

757
00:33:41,279 --> 00:33:45,000
doing to see whether yes we can see that

758
00:33:45,000 --> 00:33:47,220
Chi one was running up and running now

759
00:33:47,220 --> 00:33:50,640
so now that we have everything in place

760
00:33:50,640 --> 00:33:53,399
I am going to try to do something that

761
00:33:53,399 --> 00:33:56,640
is that should not be done so let's see

762
00:33:56,640 --> 00:33:58,620
what what I would what would have

763
00:33:58,620 --> 00:34:01,320
happened if kaiwano was not with us

764
00:34:01,320 --> 00:34:04,320
okay to to know its importance let's try

765
00:34:04,320 --> 00:34:05,460
to do something

766
00:34:05,460 --> 00:34:06,899
what would have been happened if

767
00:34:06,899 --> 00:34:08,940
governor was not with us so what I'm

768
00:34:08,940 --> 00:34:10,379
going to do is I'm not going to apply

769
00:34:10,379 --> 00:34:12,599
the policy right now I am going to use

770
00:34:12,599 --> 00:34:16,020
the dirty resource right now itself and

771
00:34:16,020 --> 00:34:17,760
why I'm why I'm calling it a dirty

772
00:34:17,760 --> 00:34:19,800
resourceless let's try to find out by

773
00:34:19,800 --> 00:34:21,119
finding the difference between the two

774
00:34:21,119 --> 00:34:23,699
resources that we have so if we see in

775
00:34:23,699 --> 00:34:25,320
this fold in this folder in the case

776
00:34:25,320 --> 00:34:27,418
folder we have the policy which we are

777
00:34:27,418 --> 00:34:29,460
going to discuss later but before that

778
00:34:29,460 --> 00:34:31,859
let's try to see what are these

779
00:34:31,859 --> 00:34:34,080
resources how how do these resources

780
00:34:34,080 --> 00:34:35,820
look like so the dirty resource is this

781
00:34:35,820 --> 00:34:37,619
one the unset resource and why it is

782
00:34:37,619 --> 00:34:39,719
unset because it does not have the stack

783
00:34:39,719 --> 00:34:41,460
comprofile set while the set results

784
00:34:41,460 --> 00:34:43,918
have the second profile set making it

785
00:34:43,918 --> 00:34:45,679
making our

786
00:34:45,679 --> 00:34:49,560
part security uh much more hard much

787
00:34:49,560 --> 00:34:50,820
more hardened

788
00:34:50,820 --> 00:34:53,580
so let's

789
00:34:53,580 --> 00:34:55,619
see how does the answer to Source right

790
00:34:55,619 --> 00:34:58,260
yum looks like so as we can see here

791
00:34:58,260 --> 00:35:01,980
there is no mention of techcom profile

792
00:35:01,980 --> 00:35:02,940
right

793
00:35:02,940 --> 00:35:06,480
uh it's just a simple pod and we are

794
00:35:06,480 --> 00:35:08,220
specifying which image to use so this is

795
00:35:08,220 --> 00:35:10,140
the image that I have pushed so this is

796
00:35:10,140 --> 00:35:13,200
the minified image of engines that we

797
00:35:13,200 --> 00:35:14,940
are going to use that was just built I

798
00:35:14,940 --> 00:35:16,859
have pushed it earlier to save time and

799
00:35:16,859 --> 00:35:18,420
this is the container portion of which

800
00:35:18,420 --> 00:35:20,700
this will run out now that we see I have

801
00:35:20,700 --> 00:35:24,060
seen this let's try to see also how the

802
00:35:24,060 --> 00:35:26,640
good resource will look so this as we

803
00:35:26,640 --> 00:35:28,380
can see has a difference so this has

804
00:35:28,380 --> 00:35:30,300
your security context and set comp

805
00:35:30,300 --> 00:35:32,820
profile and the localhost profile which

806
00:35:32,820 --> 00:35:34,260
is related to your container of course

807
00:35:34,260 --> 00:35:36,480
because this is inside container so this

808
00:35:36,480 --> 00:35:38,700
is the path inside container that we

809
00:35:38,700 --> 00:35:41,460
have our SEC comp profile the profile

810
00:35:41,460 --> 00:35:42,599
which we saw

811
00:35:42,599 --> 00:35:45,240
now that we have this let's move ahead

812
00:35:45,240 --> 00:35:46,920
and try to see

813
00:35:46,920 --> 00:35:49,560
try to apply this answer to source and

814
00:35:49,560 --> 00:35:51,240
see if it will get

815
00:35:51,240 --> 00:35:52,859
installed on kubernetes or not

816
00:35:52,859 --> 00:35:54,359
kubernetes cluster and of course it will

817
00:35:54,359 --> 00:35:56,339
get it will get up and run because there

818
00:35:56,339 --> 00:35:59,099
is nothing to block it so

819
00:35:59,099 --> 00:36:01,619
just create a

820
00:36:01,619 --> 00:36:03,540
answer to source

821
00:36:03,540 --> 00:36:05,099
okay

822
00:36:05,099 --> 00:36:07,079
I always forget to create the namespace

823
00:36:07,079 --> 00:36:10,020
so let me just create the namespace

824
00:36:10,020 --> 00:36:11,760
first because this this resource is

825
00:36:11,760 --> 00:36:13,320
being applied on a particular namespace

826
00:36:13,320 --> 00:36:15,060
so

827
00:36:15,060 --> 00:36:17,640
I'm just creating this inspection now

828
00:36:17,640 --> 00:36:19,140
this namespace is created

829
00:36:19,140 --> 00:36:21,599
right now that we have our namespace

830
00:36:21,599 --> 00:36:23,940
created just like we forgot

831
00:36:23,940 --> 00:36:26,220
our namespace creation we can sometimes

832
00:36:26,220 --> 00:36:28,619
forget adding second profile to our

833
00:36:28,619 --> 00:36:29,880
resources and that is what has happened

834
00:36:29,880 --> 00:36:32,400
in this case so we have forgotten adding

835
00:36:32,400 --> 00:36:35,220
it now if we create this resource it

836
00:36:35,220 --> 00:36:37,560
will be happily created but this is

837
00:36:37,560 --> 00:36:39,720
again a potential vulnerability this can

838
00:36:39,720 --> 00:36:41,940
be a risk and this should not have

839
00:36:41,940 --> 00:36:43,079
happened

840
00:36:43,079 --> 00:36:45,180
and now that this part is up and running

841
00:36:45,180 --> 00:36:46,680
if we see

842
00:36:46,680 --> 00:36:48,780
this

843
00:36:48,780 --> 00:36:51,660
this can be a victim of an attacker

844
00:36:51,660 --> 00:36:53,160
and what would have happened if we have

845
00:36:53,160 --> 00:36:55,500
applied human given a policy let's

846
00:36:55,500 --> 00:36:57,780
switch our gears back let's go back to

847
00:36:57,780 --> 00:36:59,700
Carbono let's apply its policy let's

848
00:36:59,700 --> 00:37:01,560
study its policy first and let's see

849
00:37:01,560 --> 00:37:03,240
what happens so I'm just going to delete

850
00:37:03,240 --> 00:37:05,280
this part again because you don't

851
00:37:05,280 --> 00:37:06,540
deserve to be here

852
00:37:06,540 --> 00:37:11,960
my part so let's let's just delete this

853
00:37:18,119 --> 00:37:21,540
so the Pod has been deleted now that

854
00:37:21,540 --> 00:37:23,820
this pod has been deleted let's try to

855
00:37:23,820 --> 00:37:26,579
see how does the policy looks like so

856
00:37:26,579 --> 00:37:29,339
before we apply we need to know how is

857
00:37:29,339 --> 00:37:31,980
the policy right so

858
00:37:31,980 --> 00:37:35,220
this is our policy so this is a cluster

859
00:37:35,220 --> 00:37:37,140
of white policy because we don't want it

860
00:37:37,140 --> 00:37:38,579
in a particular names because we want it

861
00:37:38,579 --> 00:37:41,400
everywhere and this is the name of this

862
00:37:41,400 --> 00:37:43,440
policy the strict SEC comp State it's

863
00:37:43,440 --> 00:37:44,880
all the most required buy all the most

864
00:37:44,880 --> 00:37:47,579
because it's it's we are make sure we

865
00:37:47,579 --> 00:37:49,380
are making sure and it is mentioned in

866
00:37:49,380 --> 00:37:51,180
the description in the annotations that

867
00:37:51,180 --> 00:37:53,040
it is not it should neither be

868
00:37:53,040 --> 00:37:55,740
explicitly set to unconfined neither it

869
00:37:55,740 --> 00:37:58,640
should be unset

870
00:38:01,320 --> 00:38:04,140
yeah so on what kind of resources is

871
00:38:04,140 --> 00:38:05,460
going to be applied it's going to be

872
00:38:05,460 --> 00:38:07,500
applied on a pod and what is the message

873
00:38:07,500 --> 00:38:09,359
and what are we going to perform so

874
00:38:09,359 --> 00:38:11,700
earlier as rohika showed us she was

875
00:38:11,700 --> 00:38:13,740
doing a mutate action here we are going

876
00:38:13,740 --> 00:38:15,540
to do validation and this validation

877
00:38:15,540 --> 00:38:18,000
will be an enforced kind of uh

878
00:38:18,000 --> 00:38:20,940
validation because we'll be uh on the

879
00:38:20,940 --> 00:38:22,380
failure of the policy what will happen

880
00:38:22,380 --> 00:38:24,300
that this will enforce it that this will

881
00:38:24,300 --> 00:38:28,140
try to block any kind of quads which are

882
00:38:28,140 --> 00:38:29,700
not compliant with this

883
00:38:29,700 --> 00:38:31,920
so this is the message will be printed

884
00:38:31,920 --> 00:38:34,560
if we do not follow this policy and this

885
00:38:34,560 --> 00:38:37,560
is the pattern that that is the way

886
00:38:37,560 --> 00:38:39,300
mostly set computer files should be

887
00:38:39,300 --> 00:38:41,040
there should be runtime default or

888
00:38:41,040 --> 00:38:43,680
localhost so as we know that an asset

889
00:38:43,680 --> 00:38:45,540
resource we have the localhost and the

890
00:38:45,540 --> 00:38:47,400
answer to Source we we do not have it we

891
00:38:47,400 --> 00:38:49,380
do not have the security context and

892
00:38:49,380 --> 00:38:51,359
second profile there so this is how the

893
00:38:51,359 --> 00:38:52,859
policy will look like and this should

894
00:38:52,859 --> 00:38:55,560
block after applying our unset to source

895
00:38:55,560 --> 00:39:00,740
so now let me apply this policy so

896
00:39:02,040 --> 00:39:05,820
with this our policy is created it is

897
00:39:05,820 --> 00:39:08,579
applied now that we have this now if we

898
00:39:08,579 --> 00:39:10,859
try to create the unset resource it

899
00:39:10,859 --> 00:39:14,359
should be blocked let's see

900
00:39:16,920 --> 00:39:20,579
you so yeah we have the success here and

901
00:39:20,579 --> 00:39:22,680
this this is something where that is

902
00:39:22,680 --> 00:39:24,480
very important and very crucial part of

903
00:39:24,480 --> 00:39:25,440
the demo

904
00:39:25,440 --> 00:39:27,240
we can see that

905
00:39:27,240 --> 00:39:29,160
we had the second profile coming for

906
00:39:29,160 --> 00:39:31,440
Docker slim okay happy

907
00:39:31,440 --> 00:39:33,660
but just like I forgot to create the

908
00:39:33,660 --> 00:39:36,480
namespace somebody sometimes can have

909
00:39:36,480 --> 00:39:38,579
that risk of forgotten to add the

910
00:39:38,579 --> 00:39:40,980
security context and second profile and

911
00:39:40,980 --> 00:39:42,720
that can really be a potential headache

912
00:39:42,720 --> 00:39:44,460
for the people who are managing and

913
00:39:44,460 --> 00:39:46,460
managing your security

914
00:39:46,460 --> 00:39:48,839
that is where carbon comes into picture

915
00:39:48,839 --> 00:39:52,320
it makes sure it makes sure that you

916
00:39:52,320 --> 00:39:55,740
are as close to the as close as you can

917
00:39:55,740 --> 00:39:59,220
get to support security of your

918
00:39:59,220 --> 00:40:02,220
um of your cluster now that we have this

919
00:40:02,220 --> 00:40:04,440
this also try the set resource with

920
00:40:04,440 --> 00:40:06,060
which says which is compliant to our

921
00:40:06,060 --> 00:40:08,400
policy will that be created or not let's

922
00:40:08,400 --> 00:40:10,820
do that

923
00:40:11,160 --> 00:40:14,400
of course it follows the security uh it

924
00:40:14,400 --> 00:40:15,720
follows the profile that we have a

925
00:40:15,720 --> 00:40:17,280
policy that we have created it has the

926
00:40:17,280 --> 00:40:19,740
second profile and now if we see it in

927
00:40:19,740 --> 00:40:21,839
action we can of course see if it is

928
00:40:21,839 --> 00:40:24,119
working or not so just let me check if

929
00:40:24,119 --> 00:40:26,280
it is running or not if it is running we

930
00:40:26,280 --> 00:40:29,540
can our demo of

931
00:40:29,540 --> 00:40:32,579
the intersection of both Dr slim and

932
00:40:32,579 --> 00:40:34,800
Governor let's move to our slides again

933
00:40:34,800 --> 00:40:38,280
to to see if you have any questions and

934
00:40:38,280 --> 00:40:40,260
we are happy to answer your questions

935
00:40:40,260 --> 00:40:43,140
and after that we are of course even

936
00:40:43,140 --> 00:40:44,820
after this conference you can always

937
00:40:44,820 --> 00:40:47,280
connect with us with this these are our

938
00:40:47,280 --> 00:40:49,079
social media handles

939
00:40:49,079 --> 00:40:50,700
um I would love to connect with all of

940
00:40:50,700 --> 00:40:52,680
you and thank you so much for everyone

941
00:40:52,680 --> 00:40:55,700
joining us and hope you had a great time

942
00:40:55,700 --> 00:40:59,419
learning with us thank you

