1
00:00:00,480 --> 00:00:02,719
foreign

2
00:00:04,100 --> 00:00:06,540
I'm going to talk about the challenges

3
00:00:06,540 --> 00:00:08,700
of securing kubernetes deployments or

4
00:00:08,700 --> 00:00:10,500
parts at runtime

5
00:00:10,500 --> 00:00:12,719
before going into the details there are

6
00:00:12,719 --> 00:00:14,700
two things that needs to be highlighted

7
00:00:14,700 --> 00:00:16,640
why should one bother securing the parts

8
00:00:16,640 --> 00:00:18,960
and why does the runtime approach

9
00:00:18,960 --> 00:00:21,380
matters

10
00:00:21,900 --> 00:00:23,520
if you look at the kubernetes threat

11
00:00:23,520 --> 00:00:25,140
model broadly there are two types of

12
00:00:25,140 --> 00:00:26,460
attacks possible

13
00:00:26,460 --> 00:00:28,260
really one related to control plane

14
00:00:28,260 --> 00:00:30,180
attacks well in the attacker tries to

15
00:00:30,180 --> 00:00:32,399
compromise the cube API server on the

16
00:00:32,399 --> 00:00:34,800
masternode or the cubelet on the worker

17
00:00:34,800 --> 00:00:35,579
nodes

18
00:00:35,579 --> 00:00:37,260
the control plane is open only to

19
00:00:37,260 --> 00:00:39,300
administrative domains and the attacks

20
00:00:39,300 --> 00:00:42,120
are usually Insider attacks also the

21
00:00:42,120 --> 00:00:43,620
control plane implementation is much

22
00:00:43,620 --> 00:00:45,780
more hardened and secure as compared to

23
00:00:45,780 --> 00:00:47,879
data plane implementations

24
00:00:47,879 --> 00:00:49,860
the data plane attacks on the other hand

25
00:00:49,860 --> 00:00:51,840
are more common wherein the attacker

26
00:00:51,840 --> 00:00:53,879
leverages are known or unknown exploit

27
00:00:53,879 --> 00:00:56,039
within the application itself

28
00:00:56,039 --> 00:00:57,840
the application developer usually is

29
00:00:57,840 --> 00:00:59,940
more focused towards application logic

30
00:00:59,940 --> 00:01:02,219
and has less cyber security Focus that

31
00:01:02,219 --> 00:01:05,700
results in poor use of security controls

32
00:01:05,700 --> 00:01:08,159
secondly with kubernetes pods is an

33
00:01:08,159 --> 00:01:10,140
execution unit which means in many cases

34
00:01:10,140 --> 00:01:12,240
pods will be facing the external worker

35
00:01:12,240 --> 00:01:13,560
world

36
00:01:13,560 --> 00:01:15,479
even though the request may go through

37
00:01:15,479 --> 00:01:17,700
an Ingress controller this means that an

38
00:01:17,700 --> 00:01:19,680
attacker can leverage and exploit inside

39
00:01:19,680 --> 00:01:21,060
upon

40
00:01:21,060 --> 00:01:23,580
another point to note is that within the

41
00:01:23,580 --> 00:01:25,920
Pod there is unrestricted access to all

42
00:01:25,920 --> 00:01:27,780
the internal containers a typical

43
00:01:27,780 --> 00:01:29,700
example I use is that the service

44
00:01:29,700 --> 00:01:32,400
account token mounted as part of the pod

45
00:01:32,400 --> 00:01:34,439
typically needs access only by a few

46
00:01:34,439 --> 00:01:37,079
processes but the access is left open to

47
00:01:37,079 --> 00:01:39,000
any binary within any of the containers

48
00:01:39,000 --> 00:01:40,200
within the pawn

49
00:01:40,200 --> 00:01:42,540
almost every attack in kubernetes makes

50
00:01:42,540 --> 00:01:44,520
use of this fact that the injected

51
00:01:44,520 --> 00:01:47,280
exploit binary will have direct access

52
00:01:47,280 --> 00:01:48,960
to this service account

53
00:01:48,960 --> 00:01:50,640
the service account token is then

54
00:01:50,640 --> 00:01:52,619
leveraged by the attacker to do lateral

55
00:01:52,619 --> 00:01:53,640
movements

56
00:01:53,640 --> 00:01:55,920
the spots are becoming increasingly

57
00:01:55,920 --> 00:01:57,540
becoming the gateway to all the attacks

58
00:01:57,540 --> 00:01:59,460
as witnessed in the case of lock

59
00:01:59,460 --> 00:02:02,460
projects

60
00:02:03,200 --> 00:02:06,000
depending on the workload lifecycle the

61
00:02:06,000 --> 00:02:07,740
security elements can be bucketed into

62
00:02:07,740 --> 00:02:10,258
three broad categories namely static

63
00:02:10,258 --> 00:02:12,900
admission time and runtime vulnerability

64
00:02:12,900 --> 00:02:15,000
and configuration scanning engines fall

65
00:02:15,000 --> 00:02:16,980
in the bucket of static scanning

66
00:02:16,980 --> 00:02:19,319
the aim is to identify known

67
00:02:19,319 --> 00:02:20,819
vulnerability or known configuration

68
00:02:20,819 --> 00:02:23,340
issues in the CI pipelines itself

69
00:02:23,340 --> 00:02:25,500
admission time controls allow you to

70
00:02:25,500 --> 00:02:27,180
specify policies that checks the

71
00:02:27,180 --> 00:02:28,800
kubernetes deployment manifest and

72
00:02:28,800 --> 00:02:31,739
ensures that any resource that is to be

73
00:02:31,739 --> 00:02:32,819
persisted

74
00:02:32,819 --> 00:02:35,580
follows the security rules a typical

75
00:02:35,580 --> 00:02:38,280
example would be an admission time rule

76
00:02:38,280 --> 00:02:41,940
that disallows pods requiring privileged

77
00:02:41,940 --> 00:02:42,840
mode

78
00:02:42,840 --> 00:02:45,060
runtime controls are enforced after the

79
00:02:45,060 --> 00:02:47,879
workloads are deployed and executing

80
00:02:47,879 --> 00:02:49,860
one example would be Network policies

81
00:02:49,860 --> 00:02:51,300
for the workloads are enforced only

82
00:02:51,300 --> 00:02:53,400
after the workloads start executing

83
00:02:53,400 --> 00:02:55,200
there are other runtime policies that

84
00:02:55,200 --> 00:02:57,180
observe the execution behavior of the

85
00:02:57,180 --> 00:02:59,760
workloads and try to constrain its base

86
00:02:59,760 --> 00:03:01,260
Its Behavior based on the security

87
00:03:01,260 --> 00:03:03,000
policies

88
00:03:03,000 --> 00:03:04,860
now the question is why are in time

89
00:03:04,860 --> 00:03:07,680
matters there are two premises here as

90
00:03:07,680 --> 00:03:09,360
an organization you might not be in a

91
00:03:09,360 --> 00:03:10,860
position to patch All the known

92
00:03:10,860 --> 00:03:12,480
vulnerabilities since there could be

93
00:03:12,480 --> 00:03:14,099
literally thousands of them

94
00:03:14,099 --> 00:03:16,200
and secondly there are unknown loans

95
00:03:16,200 --> 00:03:18,840
that is zero de vulnerabilities the

96
00:03:18,840 --> 00:03:20,819
security the runtime security are more

97
00:03:20,819 --> 00:03:23,040
precisely zero trust runtime security is

98
00:03:23,040 --> 00:03:25,140
something that can fundamentally attack

99
00:03:25,140 --> 00:03:27,780
this problem and I'll talk about some of

100
00:03:27,780 --> 00:03:29,280
those challenges achieving this today

101
00:03:29,280 --> 00:03:31,200
achieving that today

102
00:03:31,200 --> 00:03:34,440
different but before I talk about policy

103
00:03:34,440 --> 00:03:36,900
controls let's look at some of the

104
00:03:36,900 --> 00:03:39,000
behavior that Parts possess and needs to

105
00:03:39,000 --> 00:03:41,519
be constrained Network Behavior has been

106
00:03:41,519 --> 00:03:43,560
a topic of study and implementation for

107
00:03:43,560 --> 00:03:45,720
long but not necessarily from zero trust

108
00:03:45,720 --> 00:03:46,739
perspective

109
00:03:46,739 --> 00:03:48,299
process behavior and file access

110
00:03:48,299 --> 00:03:50,220
Behavior have relatively received much

111
00:03:50,220 --> 00:03:52,560
less attention in containerized world

112
00:03:52,560 --> 00:03:55,080
really the two big questions are how to

113
00:03:55,080 --> 00:03:58,319
identify the allowed set of behavior and

114
00:03:58,319 --> 00:04:00,599
how to enforce that behavior restricting

115
00:04:00,599 --> 00:04:02,760
everything else without breaking the

116
00:04:02,760 --> 00:04:03,780
application

117
00:04:03,780 --> 00:04:06,120
now the question arises what exists in

118
00:04:06,120 --> 00:04:07,620
the kubernetes world that can apply

119
00:04:07,620 --> 00:04:10,920
constraints on these aspects

120
00:04:10,920 --> 00:04:13,260
there exists Port security context using

121
00:04:13,260 --> 00:04:15,659
which one can Define privilege and

122
00:04:15,659 --> 00:04:17,699
access control settings for a pod or

123
00:04:17,699 --> 00:04:19,858
container security context settings

124
00:04:19,858 --> 00:04:22,680
allows one to specify app armor set Comm

125
00:04:22,680 --> 00:04:24,780
SL Linux profiles at the Pod or

126
00:04:24,780 --> 00:04:25,919
container level

127
00:04:25,919 --> 00:04:27,600
it also allows limiting the set of

128
00:04:27,600 --> 00:04:29,699
Kernel capabilities within the pawn

129
00:04:29,699 --> 00:04:32,160
load that the user needs to identify the

130
00:04:32,160 --> 00:04:33,960
set of controls such as what

131
00:04:33,960 --> 00:04:36,120
capabilities are allowed what should be

132
00:04:36,120 --> 00:04:37,979
the native app armor profile what system

133
00:04:37,979 --> 00:04:40,620
calls are allowed this is a non-trivial

134
00:04:40,620 --> 00:04:42,919
task

135
00:04:43,199 --> 00:04:45,120
it is possible that the user of the

136
00:04:45,120 --> 00:04:47,460
security context identifies the security

137
00:04:47,460 --> 00:04:49,560
posture manually once but the security

138
00:04:49,560 --> 00:04:51,180
portion needs to be updated with the

139
00:04:51,180 --> 00:04:53,220
application updates the application

140
00:04:53,220 --> 00:04:54,720
updates are more frequently the cloud

141
00:04:54,720 --> 00:04:55,919
deployments and thus the security

142
00:04:55,919 --> 00:04:58,680
context becomes invalidated soon without

143
00:04:58,680 --> 00:05:00,840
automation it is difficult to identify

144
00:05:00,840 --> 00:05:04,159
the security posture changes

145
00:05:04,440 --> 00:05:06,360
the security context requires one to

146
00:05:06,360 --> 00:05:08,639
specify a native app armor or slms

147
00:05:08,639 --> 00:05:10,800
policies now different Cloud providers

148
00:05:10,800 --> 00:05:13,020
support different Linux security modules

149
00:05:13,020 --> 00:05:16,199
for example Google container optimized

150
00:05:16,199 --> 00:05:18,180
OS supports app or mobile only by

151
00:05:18,180 --> 00:05:20,940
default Amazon Linux 2 supports slnx by

152
00:05:20,940 --> 00:05:23,220
default and bottle rockets supports SL

153
00:05:23,220 --> 00:05:26,039
Linux and BPF LSN

154
00:05:26,039 --> 00:05:28,620
this is this it is a nightmare for a

155
00:05:28,620 --> 00:05:30,600
Security administrator to operate in

156
00:05:30,600 --> 00:05:32,639
multi-cloud environment in fact even

157
00:05:32,639 --> 00:05:34,440
within the same Cloud there are good

158
00:05:34,440 --> 00:05:36,300
chances that there is there are a mix of

159
00:05:36,300 --> 00:05:38,520
nodes supporting a permanent SC Linux

160
00:05:38,520 --> 00:05:40,740
making it extremely difficult to use the

161
00:05:40,740 --> 00:05:43,259
Pod security context

162
00:05:43,259 --> 00:05:45,419
now most of the managed cloud service

163
00:05:45,419 --> 00:05:48,120
providers provide hardened workload uh

164
00:05:48,120 --> 00:05:50,400
worker load OS images

165
00:05:50,400 --> 00:05:52,199
given the shared responsibility model

166
00:05:52,199 --> 00:05:54,240
under which they operate the security

167
00:05:54,240 --> 00:05:57,000
buck stops at the host or work node

168
00:05:57,000 --> 00:05:58,680
worker node for them

169
00:05:58,680 --> 00:06:00,539
thus assuming that the managed cloud

170
00:06:00,539 --> 00:06:02,460
service provider will take care of the

171
00:06:02,460 --> 00:06:04,860
Pod security is a misnomer

172
00:06:04,860 --> 00:06:07,380
Google container optimized OS spotted

173
00:06:07,380 --> 00:06:10,020
rocket provide excellent host hardening

174
00:06:10,020 --> 00:06:12,240
Solutions listed here with but that

175
00:06:12,240 --> 00:06:13,979
would not protect the workloads or parts

176
00:06:13,979 --> 00:06:15,360
that are exposed directly to the

177
00:06:15,360 --> 00:06:17,759
attacker

178
00:06:17,759 --> 00:06:19,500
one of the zero trust tenet is to

179
00:06:19,500 --> 00:06:21,120
identify the least permissive secretive

180
00:06:21,120 --> 00:06:23,520
posture of an application which means

181
00:06:23,520 --> 00:06:25,800
identifying the allowed behavior and

182
00:06:25,800 --> 00:06:28,500
denying or auditing everything else note

183
00:06:28,500 --> 00:06:30,180
that the same container image might

184
00:06:30,180 --> 00:06:31,740
behave in different ways in different

185
00:06:31,740 --> 00:06:34,139
environments it is important to identify

186
00:06:34,139 --> 00:06:36,000
the application behavior in its given

187
00:06:36,000 --> 00:06:38,639
deployment this mode could essentially

188
00:06:38,639 --> 00:06:40,380
enable protection from different from

189
00:06:40,380 --> 00:06:42,479
from these zero datax

190
00:06:42,479 --> 00:06:44,160
however identifying this security

191
00:06:44,160 --> 00:06:45,960
posture is non-trivial

192
00:06:45,960 --> 00:06:48,720
there are real risks of impacting the

193
00:06:48,720 --> 00:06:50,580
application runtime behavior and in

194
00:06:50,580 --> 00:06:51,840
worst case causing application

195
00:06:51,840 --> 00:06:53,880
downtrends there are few things

196
00:06:53,880 --> 00:06:55,860
necessary in the framework to consume

197
00:06:55,860 --> 00:06:57,479
the least permissive security posture

198
00:06:57,479 --> 00:06:58,979
one

199
00:06:58,979 --> 00:07:01,380
to the ability to operate in drive and

200
00:07:01,380 --> 00:07:03,120
mode the user needs to be confident that

201
00:07:03,120 --> 00:07:05,100
there are no false alerts generated by

202
00:07:05,100 --> 00:07:06,900
the system until they flick the switch

203
00:07:06,900 --> 00:07:10,259
to default enamel ability to learn from

204
00:07:10,259 --> 00:07:12,180
the fast false positives

205
00:07:12,180 --> 00:07:14,400
and reinforce the policy this may

206
00:07:14,400 --> 00:07:16,800
require manual intervention at times

207
00:07:16,800 --> 00:07:18,960
ability to correlate events on different

208
00:07:18,960 --> 00:07:21,180
Spectrum for example if there is an

209
00:07:21,180 --> 00:07:22,800
unwanted sensitive file system access

210
00:07:22,800 --> 00:07:25,080
and at the same time there is an

211
00:07:25,080 --> 00:07:27,000
attempted Mega network connection to an

212
00:07:27,000 --> 00:07:28,139
unknown IP

213
00:07:28,139 --> 00:07:30,120
then the severity of the alert should be

214
00:07:30,120 --> 00:07:31,639
high

215
00:07:31,639 --> 00:07:34,259
the need for securing the workloads has

216
00:07:34,259 --> 00:07:36,360
been time and again highlighted recently

217
00:07:36,360 --> 00:07:38,520
by NSA and more recently by CNC of cloud

218
00:07:38,520 --> 00:07:40,860
native security white paper there is a

219
00:07:40,860 --> 00:07:43,380
clear need but the question is is there

220
00:07:43,380 --> 00:07:44,759
sufficient tooling available for

221
00:07:44,759 --> 00:07:46,979
implementing such controls in a more

222
00:07:46,979 --> 00:07:49,080
user-friendly way and at the same time

223
00:07:49,080 --> 00:07:51,360
reducing the risk of application down

224
00:07:51,360 --> 00:07:52,800
times

225
00:07:52,800 --> 00:07:54,960
highlighted here is some of the cncf

226
00:07:54,960 --> 00:07:57,120
tooling available in the context Cube

227
00:07:57,120 --> 00:07:58,979
armor and security profiles operator are

228
00:07:58,979 --> 00:08:01,740
two projects that have the ability to a

229
00:08:01,740 --> 00:08:04,800
enforce LSM based security policies

230
00:08:04,800 --> 00:08:06,539
the second is the important point to

231
00:08:06,539 --> 00:08:08,759
note is that they both have a way to

232
00:08:08,759 --> 00:08:10,680
record the application behavior and

233
00:08:10,680 --> 00:08:12,360
automatically derive a set of policies

234
00:08:12,360 --> 00:08:14,160
from them identifying the least

235
00:08:14,160 --> 00:08:16,740
permissive security posture the policy

236
00:08:16,740 --> 00:08:19,080
violations or alerts needs to be knitted

237
00:08:19,080 --> 00:08:20,759
with the kubernetes metadata and both

238
00:08:20,759 --> 00:08:22,199
these engines have the ability to do

239
00:08:22,199 --> 00:08:23,599
that

240
00:08:23,599 --> 00:08:26,759
to summarize

241
00:08:26,759 --> 00:08:28,740
it seems like runtime security is an

242
00:08:28,740 --> 00:08:30,479
imperative that is the deployment or

243
00:08:30,479 --> 00:08:33,179
pods needs to be hardened however the

244
00:08:33,179 --> 00:08:34,740
tooling available today may not be

245
00:08:34,740 --> 00:08:36,299
enough especially in the context of

246
00:08:36,299 --> 00:08:38,099
dynamic application updates

247
00:08:38,099 --> 00:08:39,899
the zero trust runtime security is

248
00:08:39,899 --> 00:08:41,339
challenging to achieve but it has the

249
00:08:41,339 --> 00:08:42,839
ability to protect the workers from

250
00:08:42,839 --> 00:08:45,360
future attacks and not purely rely on

251
00:08:45,360 --> 00:08:47,700
signature based prevention methodologies

252
00:08:47,700 --> 00:08:50,480
thank you

