1
00:00:00,240 --> 00:00:01,860
thank you

2
00:00:01,860 --> 00:00:04,980
I don't know your name Eric thank you

3
00:00:04,980 --> 00:00:07,980
Eric hi everyone I actually want to

4
00:00:07,980 --> 00:00:10,800
start with a short story true story last

5
00:00:10,800 --> 00:00:12,719
week I drove back from vacation with my

6
00:00:12,719 --> 00:00:14,700
wife and while we were driving down the

7
00:00:14,700 --> 00:00:16,920
cup with the car back home

8
00:00:16,920 --> 00:00:18,600
I asked her about the talk this talk

9
00:00:18,600 --> 00:00:21,420
that I'm about to give you and she said

10
00:00:21,420 --> 00:00:23,520
why would you practice and I said okay

11
00:00:23,520 --> 00:00:25,380
and you know she's not from the industry

12
00:00:25,380 --> 00:00:27,599
she's social worker and I start

13
00:00:27,599 --> 00:00:29,580
explaining to her about the token after

14
00:00:29,580 --> 00:00:30,720
five minutes

15
00:00:30,720 --> 00:00:33,360
she fell asleep so if no one would fall

16
00:00:33,360 --> 00:00:34,920
asleep by the end of this session I'll

17
00:00:34,920 --> 00:00:36,960
consider this as a success with that

18
00:00:36,960 --> 00:00:38,820
said my name is dove hershkovitz I'm a

19
00:00:38,820 --> 00:00:40,860
senior product manager at gitlab and

20
00:00:40,860 --> 00:00:43,500
this talk was mainly inspired by many

21
00:00:43,500 --> 00:00:44,879
conversations that I had with our

22
00:00:44,879 --> 00:00:48,000
customers and users and I'm hoping that

23
00:00:48,000 --> 00:00:49,920
at the end of this presentation you'll

24
00:00:49,920 --> 00:00:51,899
know better how to secure your picd

25
00:00:51,899 --> 00:00:54,739
using the Json web token or the jot

26
00:00:54,739 --> 00:00:57,899
without today without waiting for anyone

27
00:00:57,899 --> 00:01:00,000
to build any integration for you with

28
00:01:00,000 --> 00:01:02,579
the tool set that you have

29
00:01:02,579 --> 00:01:04,080
so

30
00:01:04,080 --> 00:01:06,420
in product practice we really love to

31
00:01:06,420 --> 00:01:08,040
start talking with starting with the

32
00:01:08,040 --> 00:01:10,200
problem we're talking about problem

33
00:01:10,200 --> 00:01:12,420
statement then we lean into our

34
00:01:12,420 --> 00:01:14,220
engineering team to find the right

35
00:01:14,220 --> 00:01:16,740
solution but before I can talk about the

36
00:01:16,740 --> 00:01:18,600
problem I want to set the level straight

37
00:01:18,600 --> 00:01:21,000
and give some background with some some

38
00:01:21,000 --> 00:01:23,040
definitions now I know it's security con

39
00:01:23,040 --> 00:01:25,259
and you probably heard a lot about what

40
00:01:25,259 --> 00:01:28,320
is a secret but let's do that quickly a

41
00:01:28,320 --> 00:01:29,939
secret is an object that enables the

42
00:01:29,939 --> 00:01:31,920
process of accessing restricting data or

43
00:01:31,920 --> 00:01:34,200
resource meaning that the data itself

44
00:01:34,200 --> 00:01:36,360
that you want to access is is not a

45
00:01:36,360 --> 00:01:38,579
secret but the way to access the data

46
00:01:38,579 --> 00:01:40,799
the key itself this is the secret that

47
00:01:40,799 --> 00:01:42,479
we need to protect

48
00:01:42,479 --> 00:01:44,040
now

49
00:01:44,040 --> 00:01:46,140
in addition all of us need to agree that

50
00:01:46,140 --> 00:01:48,420
no matter who you are in the

51
00:01:48,420 --> 00:01:50,460
organization we all need Secrets it

52
00:01:50,460 --> 00:01:52,140
doesn't matter if you are an operator a

53
00:01:52,140 --> 00:01:54,299
developer devops a PM

54
00:01:54,299 --> 00:01:56,460
everyone needs Secrets everyone using

55
00:01:56,460 --> 00:01:58,140
secrets we all need to access specific

56
00:01:58,140 --> 00:02:01,200
environment information to to look for

57
00:02:01,200 --> 00:02:03,720
something or to deploy an application or

58
00:02:03,720 --> 00:02:05,759
manage an infrastructure for that we

59
00:02:05,759 --> 00:02:09,619
need secrets and we all use it

60
00:02:10,020 --> 00:02:13,200
we can separate the secret use case into

61
00:02:13,200 --> 00:02:15,720
two common use cases one is the identity

62
00:02:15,720 --> 00:02:18,420
authentication in the case of service to

63
00:02:18,420 --> 00:02:20,580
service or microservice to microservice

64
00:02:20,580 --> 00:02:23,280
well the secret is actually an API key

65
00:02:23,280 --> 00:02:25,920
or a database credential in case of

66
00:02:25,920 --> 00:02:28,800
human to service well the secret is the

67
00:02:28,800 --> 00:02:31,739
password on an SSH key the second case

68
00:02:31,739 --> 00:02:34,700
is the data protection when you

69
00:02:34,700 --> 00:02:38,040
encrypt and decrypt data without storing

70
00:02:38,040 --> 00:02:40,800
it so encryption a transit or encryption

71
00:02:40,800 --> 00:02:43,739
at rest in that case the secret is an

72
00:02:43,739 --> 00:02:46,379
encryption key or certificate in case of

73
00:02:46,379 --> 00:02:48,540
authenticity the secret is signing keys

74
00:02:48,540 --> 00:02:51,379
or credential

75
00:02:51,720 --> 00:02:53,459
I want to talk a little bit about the

76
00:02:53,459 --> 00:02:55,739
secret management problem and why is it

77
00:02:55,739 --> 00:02:57,840
become such a large problem a big

78
00:02:57,840 --> 00:03:00,300
problem in our industry and I've never

79
00:03:00,300 --> 00:03:03,000
done it to three major reasons I'm

80
00:03:03,000 --> 00:03:04,860
pretty sure that there are more but this

81
00:03:04,860 --> 00:03:06,540
is my take on why secret management

82
00:03:06,540 --> 00:03:09,480
became such a large problem

83
00:03:09,480 --> 00:03:12,180
to begin with every loud software

84
00:03:12,180 --> 00:03:14,819
company needs to deal with Legacy Legacy

85
00:03:14,819 --> 00:03:17,159
software software that wasn't built to

86
00:03:17,159 --> 00:03:19,500
work with Secrets maybe it was more

87
00:03:19,500 --> 00:03:21,239
built to work with secret in the case of

88
00:03:21,239 --> 00:03:23,580
human to machine and not machine to

89
00:03:23,580 --> 00:03:25,379
machine and nowadays what everything is

90
00:03:25,379 --> 00:03:27,840
automated we need those Legacy system to

91
00:03:27,840 --> 00:03:29,819
know how to handle secret in the case of

92
00:03:29,819 --> 00:03:32,540
machine to machine

93
00:03:32,700 --> 00:03:35,040
you know this in addition the the move

94
00:03:35,040 --> 00:03:36,659
to containers and the rise of

95
00:03:36,659 --> 00:03:38,519
microservice architecture brought us a

96
00:03:38,519 --> 00:03:40,920
lot of benefits is scaling better

97
00:03:40,920 --> 00:03:43,560
manageability and more but with that we

98
00:03:43,560 --> 00:03:45,239
are facing with a with another problem

99
00:03:45,239 --> 00:03:47,340
on how we can secure better secure our

100
00:03:47,340 --> 00:03:49,379
containers which needs to be secured

101
00:03:49,379 --> 00:03:51,780
differently than VMS and the rise of the

102
00:03:51,780 --> 00:03:53,459
microservice architecture the more

103
00:03:53,459 --> 00:03:55,560
microservices we have it needs to

104
00:03:55,560 --> 00:03:57,299
communicate between the safe we want to

105
00:03:57,299 --> 00:03:58,620
make sure that this communication happen

106
00:03:58,620 --> 00:04:00,900
in a secure manner meaning the more

107
00:04:00,900 --> 00:04:03,540
microservices we have the more quiz we

108
00:04:03,540 --> 00:04:06,079
need to manage

109
00:04:06,540 --> 00:04:09,060
and lastly secret spot stickers ball

110
00:04:09,060 --> 00:04:12,060
happens when an organization starts

111
00:04:12,060 --> 00:04:14,180
storing cigarettes in different places

112
00:04:14,180 --> 00:04:16,918
and reach to a point where they don't

113
00:04:16,918 --> 00:04:19,260
know where their secrets are now two

114
00:04:19,260 --> 00:04:21,779
things will happen with Secrets Paul and

115
00:04:21,779 --> 00:04:24,600
that's a real problem uh one I've read

116
00:04:24,600 --> 00:04:27,180
last week in an article by Gartner that

117
00:04:27,180 --> 00:04:28,199
the

118
00:04:28,199 --> 00:04:30,840
devops engineer spends approximately 20

119
00:04:30,840 --> 00:04:33,600
to 25 minutes looking for a secret just

120
00:04:33,600 --> 00:04:35,160
spending time there but but this is the

121
00:04:35,160 --> 00:04:36,419
minor

122
00:04:36,419 --> 00:04:38,639
the bigger problem is that when we don't

123
00:04:38,639 --> 00:04:41,160
know where our stickers are it is more

124
00:04:41,160 --> 00:04:43,139
likely for them to get leaked once

125
00:04:43,139 --> 00:04:46,080
clicked the path to a vulnerability is

126
00:04:46,080 --> 00:04:48,240
is short and there is also a yearly

127
00:04:48,240 --> 00:04:50,040
report the state of Secrets Paul when

128
00:04:50,040 --> 00:04:52,080
you hear all about what you hear the

129
00:04:52,080 --> 00:04:54,360
news will give you different statistics

130
00:04:54,360 --> 00:04:56,880
and interesting story of how a leakages

131
00:04:56,880 --> 00:04:59,820
came became because of a of a circus

132
00:04:59,820 --> 00:05:02,060
ball

133
00:05:02,880 --> 00:05:04,440
now

134
00:05:04,440 --> 00:05:06,180
we all know that software is all about

135
00:05:06,180 --> 00:05:08,100
speed

136
00:05:08,100 --> 00:05:10,560
every software organization wants to

137
00:05:10,560 --> 00:05:12,780
develop and deliver future to our

138
00:05:12,780 --> 00:05:15,660
customers as fast as we can we want to

139
00:05:15,660 --> 00:05:18,720
act quickly we want to hit the market

140
00:05:18,720 --> 00:05:21,780
first we want to close all the bugs and

141
00:05:21,780 --> 00:05:24,120
the vulnerability threats as fast as we

142
00:05:24,120 --> 00:05:25,259
can

143
00:05:25,259 --> 00:05:27,720
this is why devops as a practice had

144
00:05:27,720 --> 00:05:30,840
become such a was adopted so much by our

145
00:05:30,840 --> 00:05:33,120
industry because it basically automates

146
00:05:33,120 --> 00:05:35,400
everything gives you Speedy pipelines it

147
00:05:35,400 --> 00:05:38,039
will reduce your cycle time it will get

148
00:05:38,039 --> 00:05:42,080
you to the market as fast as you can

149
00:05:42,240 --> 00:05:44,820
but we know that our software and our

150
00:05:44,820 --> 00:05:46,919
pipelines need to be secure and

151
00:05:46,919 --> 00:05:49,740
sometimes it feels that security

152
00:05:49,740 --> 00:05:52,259
is reducing the velocity of our cycle

153
00:05:52,259 --> 00:05:54,360
time because security is more gate

154
00:05:54,360 --> 00:05:56,580
driven it's heavy on process and let's

155
00:05:56,580 --> 00:05:58,080
be honest with ourselves there is a lot

156
00:05:58,080 --> 00:06:00,060
of lack of knowledge around security

157
00:06:00,060 --> 00:06:02,160
because we don't know where the next

158
00:06:02,160 --> 00:06:03,660
threat will come from we don't know what

159
00:06:03,660 --> 00:06:05,400
we need to close first which Bridge do

160
00:06:05,400 --> 00:06:07,020
we need to close first

161
00:06:07,020 --> 00:06:10,259
this is why Dev stack UPS has the

162
00:06:10,259 --> 00:06:12,600
concept that the merge we hear a lot

163
00:06:12,600 --> 00:06:14,639
about security shifting left meaning

164
00:06:14,639 --> 00:06:16,740
let's think about Security even before

165
00:06:16,740 --> 00:06:19,259
we start developing our application

166
00:06:19,259 --> 00:06:22,020
so devsecopes means let's put Security

167
00:06:22,020 --> 00:06:24,300
in the heart of the of devops let's

168
00:06:24,300 --> 00:06:26,520
let's not compromise let's let's

169
00:06:26,520 --> 00:06:28,560
optimize let's optimize speed and

170
00:06:28,560 --> 00:06:31,259
security which will eventually lead us

171
00:06:31,259 --> 00:06:34,440
to speeding and secure pipeline which is

172
00:06:34,440 --> 00:06:37,280
what we want

173
00:06:38,880 --> 00:06:41,819
now let's look at where we normally see

174
00:06:41,819 --> 00:06:43,979
Secrets now this is a really bad example

175
00:06:43,979 --> 00:06:45,780
because the secrets are in plain text

176
00:06:45,780 --> 00:06:47,660
but I have a reason why I'm doing that

177
00:06:47,660 --> 00:06:51,180
but we normally see secrets in source

178
00:06:51,180 --> 00:06:53,400
code when we want to develop our

179
00:06:53,400 --> 00:06:55,500
application the next specific resource

180
00:06:55,500 --> 00:06:58,199
uh in configuration files when we want

181
00:06:58,199 --> 00:07:00,300
to manage our infrastructure and in

182
00:07:00,300 --> 00:07:02,960
devops scripts in our cicd pipelines

183
00:07:02,960 --> 00:07:05,880
usually they are being declared as a

184
00:07:05,880 --> 00:07:09,720
variable or a variable type of Secrets

185
00:07:09,720 --> 00:07:11,940
now there is a reason why I put it in

186
00:07:11,940 --> 00:07:14,460
plain text now explain it

187
00:07:14,460 --> 00:07:17,100
right now since this is a devops

188
00:07:17,100 --> 00:07:18,680
oriented talk I want to talk about

189
00:07:18,680 --> 00:07:22,020
Secrets as an environment variable

190
00:07:22,020 --> 00:07:24,660
first of all this is one of the most

191
00:07:24,660 --> 00:07:28,259
common ways to store secrets in a devops

192
00:07:28,259 --> 00:07:32,639
platform and there are several flows as

193
00:07:32,639 --> 00:07:34,259
I've listed here not not all the

194
00:07:34,259 --> 00:07:36,599
platforms have hold all the flows but

195
00:07:36,599 --> 00:07:38,039
those this is the collection of laws

196
00:07:38,039 --> 00:07:41,160
that I discovered while I was looking at

197
00:07:41,160 --> 00:07:43,199
different devops platform

198
00:07:43,199 --> 00:07:45,380
first of all as you can see yes

199
00:07:45,380 --> 00:07:48,599
variables even Secrets variables

200
00:07:48,599 --> 00:07:50,759
appears in plain text and the reason for

201
00:07:50,759 --> 00:07:53,639
that is that first of all when we come

202
00:07:53,639 --> 00:07:55,800
to develop a pipeline

203
00:07:55,800 --> 00:07:58,020
we most of the time we won't put a

204
00:07:58,020 --> 00:08:00,180
sticker there we'll put something as a

205
00:08:00,180 --> 00:08:02,160
hard coded we'll see that the pipeline

206
00:08:02,160 --> 00:08:04,380
is running and then we'll say okay let's

207
00:08:04,380 --> 00:08:06,300
change to be a secret

208
00:08:06,300 --> 00:08:08,639
sometimes Engineers forget

209
00:08:08,639 --> 00:08:11,340
sometimes it's simply impossible so

210
00:08:11,340 --> 00:08:12,960
there are a lot of cases where it's in

211
00:08:12,960 --> 00:08:15,419
plain text it is not encrypted maybe it

212
00:08:15,419 --> 00:08:17,340
is encrypted in the database but when it

213
00:08:17,340 --> 00:08:19,020
is being pulled and been used the

214
00:08:19,020 --> 00:08:21,360
pipeline is not encrypted

215
00:08:21,360 --> 00:08:24,539
it's hard coded okay there are a lot of

216
00:08:24,539 --> 00:08:26,340
times that someone push a change

217
00:08:26,340 --> 00:08:28,919
pipeline starts running suddenly the CR

218
00:08:28,919 --> 00:08:30,840
job failed why someone changed the

219
00:08:30,840 --> 00:08:32,700
credential okay so you need to go you

220
00:08:32,700 --> 00:08:34,380
need to update the credential

221
00:08:34,380 --> 00:08:36,599
not to mention key rotation that is not

222
00:08:36,599 --> 00:08:37,620
supported

223
00:08:37,620 --> 00:08:40,500
uh we are also missing the Fine Design

224
00:08:40,500 --> 00:08:43,500
Access Control meaning if any engineer

225
00:08:43,500 --> 00:08:45,180
has an access to

226
00:08:45,180 --> 00:08:47,399
to your pipeline and can run your job

227
00:08:47,399 --> 00:08:49,500
they can use that PowerPoint there is no

228
00:08:49,500 --> 00:08:51,660
way to assign a role on a specific

229
00:08:51,660 --> 00:08:52,800
variable

230
00:08:52,800 --> 00:08:54,540
also put in all the eggs in the same

231
00:08:54,540 --> 00:08:57,060
basket is a bad practice Secrets need to

232
00:08:57,060 --> 00:09:00,480
live in a dedicated secret solution and

233
00:09:00,480 --> 00:09:02,880
Devil's Plus for main to hunt Pipelines

234
00:09:02,880 --> 00:09:07,920
and also lastly it is not 100 secure in

235
00:09:07,920 --> 00:09:09,779
most of the CI platform although

236
00:09:09,779 --> 00:09:12,720
variables are in type of Secrets there

237
00:09:12,720 --> 00:09:14,940
is there are ways to extrapolate the

238
00:09:14,940 --> 00:09:17,100
data it is not rocket science I'm not

239
00:09:17,100 --> 00:09:18,839
going to show you how you can talk to me

240
00:09:18,839 --> 00:09:20,339
afterward and I'll explain you how but

241
00:09:20,339 --> 00:09:22,320
this is a this is a common knowledge

242
00:09:22,320 --> 00:09:25,200
that you can definitely get the the

243
00:09:25,200 --> 00:09:27,899
value out of a secret variable

244
00:09:27,899 --> 00:09:30,860
in most cases

245
00:09:31,380 --> 00:09:33,120
now I think we are ready to talk about

246
00:09:33,120 --> 00:09:35,399
the problem

247
00:09:35,399 --> 00:09:39,060
so as we mentioned Secrets needs to live

248
00:09:39,060 --> 00:09:40,560
in a dedicated secret management

249
00:09:40,560 --> 00:09:42,480
solution this is why

250
00:09:42,480 --> 00:09:44,399
all the cloud providers all the major

251
00:09:44,399 --> 00:09:46,279
Cloud providers have a secret management

252
00:09:46,279 --> 00:09:48,540
capability a secret manager key

253
00:09:48,540 --> 00:09:50,160
management system to store and manage

254
00:09:50,160 --> 00:09:52,920
secrets there are also many many

255
00:09:52,920 --> 00:09:54,959
dedicated secret Management Solutions

256
00:09:54,959 --> 00:09:57,300
that are out there like classical Vault

257
00:09:57,300 --> 00:10:00,120
and konjour and achilles and more

258
00:10:00,120 --> 00:10:02,820
but as we mentioned we want to integrate

259
00:10:02,820 --> 00:10:04,980
between our devops platform our cicd

260
00:10:04,980 --> 00:10:06,120
pipeline

261
00:10:06,120 --> 00:10:07,459
to those

262
00:10:07,459 --> 00:10:10,620
secret management solution to to grab

263
00:10:10,620 --> 00:10:12,060
those stickers because we don't want to

264
00:10:12,060 --> 00:10:14,519
store them as an environment variable we

265
00:10:14,519 --> 00:10:16,680
need to integrate those Secrets without

266
00:10:16,680 --> 00:10:19,260
CI pipelines so they could we can

267
00:10:19,260 --> 00:10:21,839
automate actions such as managing our

268
00:10:21,839 --> 00:10:23,459
application or managing our

269
00:10:23,459 --> 00:10:25,380
infrastructure or deploying our

270
00:10:25,380 --> 00:10:26,519
application

271
00:10:26,519 --> 00:10:29,880
now the problem is which tool should we

272
00:10:29,880 --> 00:10:32,640
choose from the should we simply choose

273
00:10:32,640 --> 00:10:33,899
a tool based on the available

274
00:10:33,899 --> 00:10:35,160
integration

275
00:10:35,160 --> 00:10:37,920
don't we want to use Best of Bread

276
00:10:37,920 --> 00:10:40,019
what if my organization is using a

277
00:10:40,019 --> 00:10:41,940
secret management solution that is not

278
00:10:41,940 --> 00:10:44,160
supported by my devops platform my cicd

279
00:10:44,160 --> 00:10:46,019
pipeline cannot communicate with that

280
00:10:46,019 --> 00:10:47,760
secret management solution or what if I

281
00:10:47,760 --> 00:10:50,040
have multi-cloud multi-cloud strategy

282
00:10:50,040 --> 00:10:51,839
and I want to integrate with all the

283
00:10:51,839 --> 00:10:53,339
cloud providers

284
00:10:53,339 --> 00:10:54,800
so

285
00:10:54,800 --> 00:10:57,120
if you haven't if there is a native

286
00:10:57,120 --> 00:10:59,100
solution and if there is an integration

287
00:10:59,100 --> 00:11:00,360
then

288
00:11:00,360 --> 00:11:02,399
you don't have this problem maybe you

289
00:11:02,399 --> 00:11:03,839
have like the vendor lock problem but

290
00:11:03,839 --> 00:11:05,820
you don't have this real problem but as

291
00:11:05,820 --> 00:11:07,560
much as the PM as much as I would love

292
00:11:07,560 --> 00:11:08,880
to integrate with all the secret

293
00:11:08,880 --> 00:11:10,440
Management Solutions that are out there

294
00:11:10,440 --> 00:11:13,740
I simply can so what you can do in case

295
00:11:13,740 --> 00:11:15,540
there is not an integration and you

296
00:11:15,540 --> 00:11:18,300
cannot retrieve those secrets

297
00:11:18,300 --> 00:11:20,760
there is a solution and in order to

298
00:11:20,760 --> 00:11:22,440
understand that we need to familiarize

299
00:11:22,440 --> 00:11:24,899
ourselves with two a concept one is the

300
00:11:24,899 --> 00:11:26,640
open ID connect

301
00:11:26,640 --> 00:11:29,459
and and the JWT the open ID connect is

302
00:11:29,459 --> 00:11:31,740
an open standard for the centralized

303
00:11:31,740 --> 00:11:32,880
Authentication

304
00:11:32,880 --> 00:11:36,060
the jw2 is an ID token this is one of

305
00:11:36,060 --> 00:11:39,240
the methods to implement openid connect

306
00:11:39,240 --> 00:11:41,640
and the good news is that all the cloud

307
00:11:41,640 --> 00:11:43,560
providers the secret management solution

308
00:11:43,560 --> 00:11:45,839
and many of the devops platform support

309
00:11:45,839 --> 00:11:49,640
openid connect today

310
00:11:49,860 --> 00:11:53,279
so let's talk a little bit about the JWT

311
00:11:53,279 --> 00:11:56,880
token so it is a short-lived ID token

312
00:11:56,880 --> 00:11:59,220
consists out of three parts the header

313
00:11:59,220 --> 00:12:00,779
the body and the signature now the body

314
00:12:00,779 --> 00:12:03,120
has different claims okay those are key

315
00:12:03,120 --> 00:12:06,360
value Pairs and there are custom claims

316
00:12:06,360 --> 00:12:08,519
and standard claims and I'm going to

317
00:12:08,519 --> 00:12:10,440
show it to you in a second but

318
00:12:10,440 --> 00:12:12,779
the standard claims are the claims that

319
00:12:12,779 --> 00:12:16,260
always exist in a JW in the token and

320
00:12:16,260 --> 00:12:18,360
the custom claims are the ones that are

321
00:12:18,360 --> 00:12:21,959
being injected by the the solution the

322
00:12:21,959 --> 00:12:25,200
generate the token for me and when a

323
00:12:25,200 --> 00:12:28,019
user a service or a CI job

324
00:12:28,019 --> 00:12:30,420
comes to authenticate against specific

325
00:12:30,420 --> 00:12:33,240
server used in a JWT token what happened

326
00:12:33,240 --> 00:12:35,339
is that that server is looking for

327
00:12:35,339 --> 00:12:38,760
specific claims that exist and then

328
00:12:38,760 --> 00:12:41,339
looking for the value of the claims and

329
00:12:41,339 --> 00:12:43,920
only if those matched then it will then

330
00:12:43,920 --> 00:12:45,899
authorize and authenticate that action

331
00:12:45,899 --> 00:12:47,579
and this is something that you can

332
00:12:47,579 --> 00:12:49,320
configure as a user you can configure

333
00:12:49,320 --> 00:12:51,600
which claims and which value will get

334
00:12:51,600 --> 00:12:55,339
authenticate and which will not

335
00:12:55,440 --> 00:12:57,360
now I'm going to show you how the token

336
00:12:57,360 --> 00:13:00,980
is going to is look looks like

337
00:13:01,560 --> 00:13:03,000
okay

338
00:13:03,000 --> 00:13:06,959
so this is my JWT token so first of all

339
00:13:06,959 --> 00:13:11,399
I'm in my web in the website JWT on the

340
00:13:11,399 --> 00:13:13,880
my left that side

341
00:13:13,880 --> 00:13:16,740
you can see the encoded version this

342
00:13:16,740 --> 00:13:19,880
long large of long strings

343
00:13:19,880 --> 00:13:22,380
this is the token this is my token that

344
00:13:22,380 --> 00:13:24,120
I've generated and then as you can see

345
00:13:24,120 --> 00:13:27,480
it has three parts it has the header

346
00:13:27,480 --> 00:13:30,180
it has the body and it has the signature

347
00:13:30,180 --> 00:13:31,620
on the right side there is the decoded

348
00:13:31,620 --> 00:13:34,019
the decoded version okay and you can see

349
00:13:34,019 --> 00:13:36,060
it easily separated by this dot there is

350
00:13:36,060 --> 00:13:39,060
a DOT that is separated by uh by the

351
00:13:39,060 --> 00:13:40,800
different parts so the header you know

352
00:13:40,800 --> 00:13:42,180
the header the signature making sure

353
00:13:42,180 --> 00:13:44,279
that nobody is tampered with with my

354
00:13:44,279 --> 00:13:45,720
token but what's really important here

355
00:13:45,720 --> 00:13:47,760
is to look at the

356
00:13:47,760 --> 00:13:49,800
at the body okay and those are the

357
00:13:49,800 --> 00:13:51,660
claims those are the claims that I

358
00:13:51,660 --> 00:13:53,399
mentioned all of them so there are some

359
00:13:53,399 --> 00:13:56,639
standard claims like ISS if you will who

360
00:13:56,639 --> 00:13:58,320
generate this template for me you can

361
00:13:58,320 --> 00:14:00,440
see it was generated by gitlab

362
00:14:00,440 --> 00:14:03,839
expiration time when the this token

363
00:14:03,839 --> 00:14:07,260
won't be one will be useful you so it

364
00:14:07,260 --> 00:14:09,899
will be useless and because even if it

365
00:14:09,899 --> 00:14:12,620
will get leaked

366
00:14:12,860 --> 00:14:16,260
even if you do it will get leaked then

367
00:14:16,260 --> 00:14:17,940
you can use it only for five minutes and

368
00:14:17,940 --> 00:14:21,600
that's it and besides the standard

369
00:14:21,600 --> 00:14:23,160
claims there are those custom claims

370
00:14:23,160 --> 00:14:25,380
that I mentioned now those custom claims

371
00:14:25,380 --> 00:14:27,660
they have they provide you with a lot of

372
00:14:27,660 --> 00:14:30,240
data first of all about the user you can

373
00:14:30,240 --> 00:14:32,880
see I have here the user login the user

374
00:14:32,880 --> 00:14:37,440
email my username my my email and also a

375
00:14:37,440 --> 00:14:40,079
specific information about the pipeline

376
00:14:40,079 --> 00:14:43,320
that this token was generated by like

377
00:14:43,320 --> 00:14:46,440
the project ID then namespace the nurses

378
00:14:46,440 --> 00:14:49,320
path the namespace ID the type of branch

379
00:14:49,320 --> 00:14:51,839
and more so as a user what you can do

380
00:14:51,839 --> 00:14:54,360
you can authenticate and say okay only

381
00:14:54,360 --> 00:14:57,540
if this user with this Pipeline on that

382
00:14:57,540 --> 00:15:00,300
branch is being authenticated then I can

383
00:15:00,300 --> 00:15:03,600
give the CI job or the service in Access

384
00:15:03,600 --> 00:15:06,839
and if not I won't Grant it no I won't

385
00:15:06,839 --> 00:15:08,940
Grant an access so two users can do the

386
00:15:08,940 --> 00:15:11,100
same job one will get authenticated and

387
00:15:11,100 --> 00:15:12,899
one will get not will not get

388
00:15:12,899 --> 00:15:14,639
authenticated

389
00:15:14,639 --> 00:15:17,220
so it gives us this fine grain access to

390
00:15:17,220 --> 00:15:20,160
control that we are looking for

391
00:15:20,160 --> 00:15:24,199
let me go back to my slides

392
00:15:27,240 --> 00:15:30,019
so in

393
00:15:32,760 --> 00:15:34,860
ok

394
00:15:34,860 --> 00:15:37,860
so what you can do assuming we have this

395
00:15:37,860 --> 00:15:41,240
tool set we have a variety of of

396
00:15:41,240 --> 00:15:43,920
platform of solution that support openid

397
00:15:43,920 --> 00:15:47,399
connect as a user I can integrate my

398
00:15:47,399 --> 00:15:49,380
open ID with jadability

399
00:15:49,380 --> 00:15:52,760
in my devops workflow and then pull

400
00:15:52,760 --> 00:15:55,500
Secrets form secret provider and then

401
00:15:55,500 --> 00:15:58,380
enable my pipeline to run securely

402
00:15:58,380 --> 00:16:02,100
so the steps that you need to do in

403
00:16:02,100 --> 00:16:04,079
order to configure it is the following

404
00:16:04,079 --> 00:16:05,459
and the steps is small is the same I

405
00:16:05,459 --> 00:16:08,100
gave this example on gitlab but it is

406
00:16:08,100 --> 00:16:09,480
more or less the same no matter which

407
00:16:09,480 --> 00:16:11,760
devops platform you're using so the

408
00:16:11,760 --> 00:16:13,079
first the first thing is that you need

409
00:16:13,079 --> 00:16:14,699
to configure trust relationship with

410
00:16:14,699 --> 00:16:17,040
open ID connect on your providers so you

411
00:16:17,040 --> 00:16:18,420
need to go to the providers and tell

412
00:16:18,420 --> 00:16:20,519
them I want to authenticate using an

413
00:16:20,519 --> 00:16:23,279
open ID connect with the JWT token and

414
00:16:23,279 --> 00:16:25,500
this is the part where I am setting the

415
00:16:25,500 --> 00:16:27,720
custom claims and the value only this

416
00:16:27,720 --> 00:16:29,579
user only this claim and only this value

417
00:16:29,579 --> 00:16:32,100
will get authenticated

418
00:16:32,100 --> 00:16:34,680
and I've linked few examples on how you

419
00:16:34,680 --> 00:16:36,420
can configure openid connect with Azure

420
00:16:36,420 --> 00:16:40,940
AWS gcp but as I mentioned

421
00:16:40,940 --> 00:16:43,279
all the secret management providers

422
00:16:43,279 --> 00:16:45,959
supports that as well

423
00:16:45,959 --> 00:16:48,240
secondly any devops platform and it

424
00:16:48,240 --> 00:16:50,940
doesn't matter if it's a if it's gitlab

425
00:16:50,940 --> 00:16:53,940
GitHub Circle Jenkins they are capable

426
00:16:53,940 --> 00:16:57,779
of generating a JWT token that JWT token

427
00:16:57,779 --> 00:17:00,959
is sent to the cloud provider where it

428
00:17:00,959 --> 00:17:02,880
has been authenticated this is where the

429
00:17:02,880 --> 00:17:05,160
matching happened on the claims

430
00:17:05,160 --> 00:17:07,859
and if it is authenticated we'll get

431
00:17:07,859 --> 00:17:09,240
back we will

432
00:17:09,240 --> 00:17:11,880
give us back an access code token and

433
00:17:11,880 --> 00:17:13,619
with that access token

434
00:17:13,619 --> 00:17:16,020
we can go ahead and retrieve secrets I'm

435
00:17:16,020 --> 00:17:17,339
going to show to you how it looks in the

436
00:17:17,339 --> 00:17:19,079
configuration

437
00:17:19,079 --> 00:17:20,819
um but this is more or less the same

438
00:17:20,819 --> 00:17:22,859
this is what you need to do with any

439
00:17:22,859 --> 00:17:25,439
platform that you have today

440
00:17:25,439 --> 00:17:26,599
now

441
00:17:26,599 --> 00:17:29,880
I've linked couple of examples here on

442
00:17:29,880 --> 00:17:31,679
how you can configure open ID connect on

443
00:17:31,679 --> 00:17:33,780
all the cloud providers some working

444
00:17:33,780 --> 00:17:35,880
examples on how you can configure

445
00:17:35,880 --> 00:17:40,559
pipelines using Vault AWS gcp konjo but

446
00:17:40,559 --> 00:17:42,900
you can go and

447
00:17:42,900 --> 00:17:45,360
grab that example or you can simply go

448
00:17:45,360 --> 00:17:47,400
to the documentation of your provider

449
00:17:47,400 --> 00:17:50,220
and just look for open ID connect you'll

450
00:17:50,220 --> 00:17:52,559
immediately see it with the example and

451
00:17:52,559 --> 00:17:54,059
like everything that doesn't matter

452
00:17:54,059 --> 00:17:56,039
which which tool you're using

453
00:17:56,039 --> 00:17:59,039
now let's look at

454
00:17:59,039 --> 00:18:01,919
an example a real example

455
00:18:01,919 --> 00:18:04,799
on how to integrate between gitlab and

456
00:18:04,799 --> 00:18:06,240
hashikov vault

457
00:18:06,240 --> 00:18:08,520
the reason I'm showing you the

458
00:18:08,520 --> 00:18:10,679
integration with hashikov vault

459
00:18:10,679 --> 00:18:13,860
is because in gitlab we did build the

460
00:18:13,860 --> 00:18:15,660
native integration between the two tools

461
00:18:15,660 --> 00:18:18,360
so I'm going to show you both methods

462
00:18:18,360 --> 00:18:21,120
how you can do it with an integration

463
00:18:21,120 --> 00:18:23,700
and how we can do it with the JWT token

464
00:18:23,700 --> 00:18:27,360
okay so I'm here at uh at the pipeline

465
00:18:27,360 --> 00:18:29,880
editor which is one of the ways to

466
00:18:29,880 --> 00:18:33,660
configure pipelines in in gitlab and

467
00:18:33,660 --> 00:18:36,299
when I Define my pipeline I need to set

468
00:18:36,299 --> 00:18:39,240
up two stages and two jobs this is job

469
00:18:39,240 --> 00:18:41,400
number one with Vault integrated client

470
00:18:41,400 --> 00:18:44,220
and job number two without the

471
00:18:44,220 --> 00:18:47,160
integrated client okay and I can also

472
00:18:47,160 --> 00:18:48,600
show you how it looks in the

473
00:18:48,600 --> 00:18:51,000
visualization this is stage number one

474
00:18:51,000 --> 00:18:53,400
job number one stage number two job

475
00:18:53,400 --> 00:18:56,160
number two now let it let me break it to

476
00:18:56,160 --> 00:18:56,900
you

477
00:18:56,900 --> 00:19:00,299
so if we have a native integration

478
00:19:00,299 --> 00:19:02,160
the configuration is pretty

479
00:19:02,160 --> 00:19:04,740
straightforward okay I'm you can follow

480
00:19:04,740 --> 00:19:06,480
the documentation but basically what we

481
00:19:06,480 --> 00:19:09,120
are doing is as I mentioned

482
00:19:09,120 --> 00:19:11,100
the name of the job then we assign a

483
00:19:11,100 --> 00:19:15,179
stage we need to use an image to run the

484
00:19:15,179 --> 00:19:17,220
scripts on top so so I'll see I job

485
00:19:17,220 --> 00:19:19,200
could not could run on that image and

486
00:19:19,200 --> 00:19:21,480
then I'm using the secret keyword the

487
00:19:21,480 --> 00:19:22,919
secret keywords

488
00:19:22,919 --> 00:19:26,480
is a predefined keyword the test gitlab

489
00:19:26,480 --> 00:19:30,419
use the The Vault integration and then I

490
00:19:30,419 --> 00:19:31,700
need to declare

491
00:19:31,700 --> 00:19:34,080
an environment variable

492
00:19:34,080 --> 00:19:36,660
and then all I need is just to

493
00:19:36,660 --> 00:19:39,360
tell gitlab where to fetch the password

494
00:19:39,360 --> 00:19:41,179
so I'm looking for the password field

495
00:19:41,179 --> 00:19:44,820
underneath the Vault demo path okay

496
00:19:44,820 --> 00:19:45,780
that's

497
00:19:45,780 --> 00:19:47,520
this is it and then there is like one

498
00:19:47,520 --> 00:19:49,440
parameter and that's it like the the

499
00:19:49,440 --> 00:19:52,200
secret is will be underneath the secret

500
00:19:52,200 --> 00:19:54,780
the secret variable okay and then I can

501
00:19:54,780 --> 00:19:56,220
use it in the script here I'm just like

502
00:19:56,220 --> 00:19:58,500
echoing the script but you can so

503
00:19:58,500 --> 00:20:00,780
echoing the secret but then you can use

504
00:20:00,780 --> 00:20:03,120
it as a part of your pipeline

505
00:20:03,120 --> 00:20:06,900
now the second example if I if gitlab

506
00:20:06,900 --> 00:20:09,240
did not or any other provider did not

507
00:20:09,240 --> 00:20:12,000
build an integration for for for for us

508
00:20:12,000 --> 00:20:15,600
we can still do we can still get the

509
00:20:15,600 --> 00:20:17,640
secrets from Vault using as I mentioned

510
00:20:17,640 --> 00:20:19,740
the JWT so

511
00:20:19,740 --> 00:20:21,960
following the same steps declaring the

512
00:20:21,960 --> 00:20:25,020
job name a stage and image and then

513
00:20:25,020 --> 00:20:26,820
those four lines that you'll see in here

514
00:20:26,820 --> 00:20:29,880
is just like updating downloading the

515
00:20:29,880 --> 00:20:32,820
hashico appliance so I can use the CLI

516
00:20:32,820 --> 00:20:35,760
and then I need to declare where hashiko

517
00:20:35,760 --> 00:20:38,280
clients located

518
00:20:38,280 --> 00:20:40,380
and this line over here this is where

519
00:20:40,380 --> 00:20:42,840
I'm sending the token the JWT token you

520
00:20:42,840 --> 00:20:45,299
can see here this is the JWT token that

521
00:20:45,299 --> 00:20:47,940
gitlab can generate for us I'm sending

522
00:20:47,940 --> 00:20:51,059
it to volt okay and I'm asking the volt

523
00:20:51,059 --> 00:20:53,400
to get me that access token and this is

524
00:20:53,400 --> 00:20:55,740
where this all matching happened this is

525
00:20:55,740 --> 00:20:57,780
basically

526
00:20:57,780 --> 00:20:59,460
the

527
00:20:59,460 --> 00:21:01,500
number three here this is this is

528
00:21:01,500 --> 00:21:03,299
actually number two a number three so

529
00:21:03,299 --> 00:21:05,160
this is where I'm sending and I'm

530
00:21:05,160 --> 00:21:07,919
getting back the the access token and

531
00:21:07,919 --> 00:21:10,559
once I got the access token back if all

532
00:21:10,559 --> 00:21:12,600
of it was successful

533
00:21:12,600 --> 00:21:15,179
hmm

534
00:21:15,179 --> 00:21:18,120
then I can ask volt

535
00:21:18,120 --> 00:21:20,820
to get the secret from the same path the

536
00:21:20,820 --> 00:21:22,440
same path The Vault demo I want the

537
00:21:22,440 --> 00:21:24,600
password field from the from Vault demo

538
00:21:24,600 --> 00:21:27,539
so I'm doing the same thing but with

539
00:21:27,539 --> 00:21:29,700
without the building notification and

540
00:21:29,700 --> 00:21:31,740
then when I retrieve the secret I'm

541
00:21:31,740 --> 00:21:34,440
echoing it but I can use it as a part of

542
00:21:34,440 --> 00:21:37,740
my pipelines to do basically any any

543
00:21:37,740 --> 00:21:40,640
action that I want

544
00:21:43,140 --> 00:21:47,240
going back to my slides

545
00:21:53,460 --> 00:21:56,880
yes it's not it's not because

546
00:21:56,880 --> 00:21:59,220
if it is being rotated if the secret is

547
00:21:59,220 --> 00:22:01,200
changing all the time why do I care this

548
00:22:01,200 --> 00:22:04,580
is something that Vault can handle

549
00:22:08,100 --> 00:22:09,840
okay so as I mentioned link some

550
00:22:09,840 --> 00:22:12,360
documentation

551
00:22:12,360 --> 00:22:14,640
now

552
00:22:14,640 --> 00:22:16,320
like any solution that we have in our

553
00:22:16,320 --> 00:22:17,760
industry there are benefits there are

554
00:22:17,760 --> 00:22:20,100
pros and cons and let's go them quickly

555
00:22:20,100 --> 00:22:23,280
if you use the JWT in a devops workflow

556
00:22:23,280 --> 00:22:25,020
the benefits is first of all it's the

557
00:22:25,020 --> 00:22:27,419
yml secure because you're using an ID

558
00:22:27,419 --> 00:22:29,580
token if even if this ID token get

559
00:22:29,580 --> 00:22:31,500
clicked it has an expiration time of

560
00:22:31,500 --> 00:22:32,700
five minutes

561
00:22:32,700 --> 00:22:35,100
second you have no vendolo you don't

562
00:22:35,100 --> 00:22:36,720
need to wait for anyone to build

563
00:22:36,720 --> 00:22:38,460
integration you can use the tools that

564
00:22:38,460 --> 00:22:41,280
you have today right now and lastly

565
00:22:41,280 --> 00:22:43,740
secrets are stored in a dedicated system

566
00:22:43,740 --> 00:22:46,440
and you can get all the all the features

567
00:22:46,440 --> 00:22:50,580
that surrounding secrets

568
00:22:50,580 --> 00:22:54,960
the downside of using JWT in your DeVos

569
00:22:54,960 --> 00:22:56,820
workflow are first of all you know you

570
00:22:56,820 --> 00:22:58,679
need to know how to configure open ID

571
00:22:58,679 --> 00:23:01,679
connect on your providers

572
00:23:01,679 --> 00:23:03,900
the setup as you saw it's a bit complex

573
00:23:03,900 --> 00:23:05,640
although you need to do it one time

574
00:23:05,640 --> 00:23:07,980
someone needs to do it someone needs to

575
00:23:07,980 --> 00:23:10,080
maintain it even in gitlab we have a

576
00:23:10,080 --> 00:23:11,760
handful of Engineers that know how to do

577
00:23:11,760 --> 00:23:13,919
it the rest of them the rest of the

578
00:23:13,919 --> 00:23:16,679
engineers are using what someone one of

579
00:23:16,679 --> 00:23:18,000
the engineers built for them and lastly

580
00:23:18,000 --> 00:23:20,340
there is an Associated cost when you

581
00:23:20,340 --> 00:23:22,799
stole Secret in a sticker management

582
00:23:22,799 --> 00:23:25,020
provider where is if you're storing it

583
00:23:25,020 --> 00:23:27,059
as an environment variable it doesn't

584
00:23:27,059 --> 00:23:29,840
cost you a dime

585
00:23:32,700 --> 00:23:34,799
if there is one slide I want you to

586
00:23:34,799 --> 00:23:37,140
remember from this talk is this one

587
00:23:37,140 --> 00:23:39,059
basically recapping this entire

588
00:23:39,059 --> 00:23:41,340
presentation the challenge the way I'm

589
00:23:41,340 --> 00:23:43,260
saying it is that secrets are typically

590
00:23:43,260 --> 00:23:44,640
stored in a dedicated management

591
00:23:44,640 --> 00:23:48,419
solution okay but we need Secrets our

592
00:23:48,419 --> 00:23:50,159
Engineers need secrets to integrate them

593
00:23:50,159 --> 00:23:52,440
with our devops platform to run cicd

594
00:23:52,440 --> 00:23:53,400
Pipelines

595
00:23:53,400 --> 00:23:56,100
the solution if you don't have a

596
00:23:56,100 --> 00:23:58,200
built-in integration okay or you don't

597
00:23:58,200 --> 00:23:59,940
want the vendor lock

598
00:23:59,940 --> 00:24:01,740
then you need to configure open ID

599
00:24:01,740 --> 00:24:04,260
connect on the target client and then

600
00:24:04,260 --> 00:24:07,200
set up your pipeline with the JWT to

601
00:24:07,200 --> 00:24:08,760
retrieve those secrets and the result

602
00:24:08,760 --> 00:24:11,159
the secrets are securely stored and

603
00:24:11,159 --> 00:24:12,960
integrated with your existing devops

604
00:24:12,960 --> 00:24:14,880
tools

605
00:24:14,880 --> 00:24:17,159
with that I want to thank you and I hope

606
00:24:17,159 --> 00:24:20,960
you find this presentation useful

607
00:24:21,299 --> 00:24:23,340
all right

608
00:24:23,340 --> 00:24:26,039
thank you very much to do we have any

609
00:24:26,039 --> 00:24:27,240
questions we have a little bit of time

610
00:24:27,240 --> 00:24:28,799
for questions one right there can you

611
00:24:28,799 --> 00:24:31,340
repeat the question

612
00:24:31,740 --> 00:24:34,740
sorry

613
00:24:40,020 --> 00:24:41,159
thanks

614
00:24:41,159 --> 00:24:43,020
um one thing I wanted to add about the

615
00:24:43,020 --> 00:24:44,820
environment variables one of the risks

616
00:24:44,820 --> 00:24:46,140
that

617
00:24:46,140 --> 00:24:47,700
um with putting putting Secrets

618
00:24:47,700 --> 00:24:49,260
environment variables is that sometimes

619
00:24:49,260 --> 00:24:51,240
when there's an error in the system dump

620
00:24:51,240 --> 00:24:52,740
it'll just dump all the environment

621
00:24:52,740 --> 00:24:55,140
variables and uh they'll be put in

622
00:24:55,140 --> 00:24:56,460
insecure logs so that's just another

623
00:24:56,460 --> 00:24:58,980
another reason why environmental

624
00:24:58,980 --> 00:25:00,900
variables are generally not a good idea

625
00:25:00,900 --> 00:25:03,480
and um thanks again for the mention we

626
00:25:03,480 --> 00:25:05,400
do have we also have a guide on conduit

627
00:25:05,400 --> 00:25:08,100
or forget forget lab specifically

628
00:25:08,100 --> 00:25:10,679
um how to use this thanks a lot

629
00:25:10,679 --> 00:25:12,840
we are looking for the documentation

630
00:25:12,840 --> 00:25:14,100
part

631
00:25:14,100 --> 00:25:17,000
to be added

632
00:25:17,100 --> 00:25:18,659
let's talk

633
00:25:18,659 --> 00:25:21,740
we got another question over here

634
00:25:22,080 --> 00:25:23,700
so I wonder

635
00:25:23,700 --> 00:25:26,760
um so basically when you use JWT to

636
00:25:26,760 --> 00:25:29,539
access Secret in while you use JWT to

637
00:25:29,539 --> 00:25:34,260
exchange the um uh while access token so

638
00:25:34,260 --> 00:25:35,460
that

639
00:25:35,460 --> 00:25:37,080
you can use the world token to access

640
00:25:37,080 --> 00:25:39,299
through the secret and during that

641
00:25:39,299 --> 00:25:40,919
process like

642
00:25:40,919 --> 00:25:43,080
basically is that developers need to

643
00:25:43,080 --> 00:25:46,740
know which what role to assume so that

644
00:25:46,740 --> 00:25:48,960
um and then my follow-up question will

645
00:25:48,960 --> 00:25:51,679
be in each of this step in the pipeline

646
00:25:51,679 --> 00:25:55,140
how do you control like which step in

647
00:25:55,140 --> 00:25:58,740
the pipeline can access to What secrets

648
00:25:58,740 --> 00:26:01,039
so when we have like this command that

649
00:26:01,039 --> 00:26:03,539
that I just show you

650
00:26:03,539 --> 00:26:06,480
we are specifying which secrets we want

651
00:26:06,480 --> 00:26:09,240
to retrieve from which path right but

652
00:26:09,240 --> 00:26:11,159
that means there is a what policy

653
00:26:11,159 --> 00:26:14,220
already exists right sorry so you must

654
00:26:14,220 --> 00:26:17,340
Define some what policy to basically

655
00:26:17,340 --> 00:26:20,520
allow which access token to access to

656
00:26:20,520 --> 00:26:22,140
this particular I need to configure that

657
00:26:22,140 --> 00:26:24,120
on on hashicot so this is like the part

658
00:26:24,120 --> 00:26:26,760
that I haven't showed how do I configure

659
00:26:26,760 --> 00:26:29,340
that in in hashicorp so

660
00:26:29,340 --> 00:26:30,659
it doesn't matter if it's actually cop

661
00:26:30,659 --> 00:26:32,820
or any other conjo or whatever but there

662
00:26:32,820 --> 00:26:34,799
is a part that is missing here I was

663
00:26:34,799 --> 00:26:37,260
just showing to you how it is look like

664
00:26:37,260 --> 00:26:39,600
from the how to set up from the pipeline

665
00:26:39,600 --> 00:26:42,539
but in the provider side there are

666
00:26:42,539 --> 00:26:44,460
different ways on how you can configure

667
00:26:44,460 --> 00:26:47,039
that and every I would say every second

668
00:26:47,039 --> 00:26:49,320
provider have a different way on how you

669
00:26:49,320 --> 00:26:51,779
can like specify which secret you want

670
00:26:51,779 --> 00:26:53,700
to retrieve

671
00:26:53,700 --> 00:26:57,059
so this goes to the uh

672
00:26:57,059 --> 00:26:59,279
yeah my ultimate question would be like

673
00:26:59,279 --> 00:27:01,679
who is going to be responsible or who

674
00:27:01,679 --> 00:27:04,020
would you suggest to manage uh such

675
00:27:04,020 --> 00:27:07,220
authorization uh policies to access

676
00:27:07,220 --> 00:27:09,480
Secrets I mean access secret from

677
00:27:09,480 --> 00:27:12,179
pipeline who is going to be responsible

678
00:27:12,179 --> 00:27:14,340
which team

679
00:27:14,340 --> 00:27:16,980
usually I think it's like it really

680
00:27:16,980 --> 00:27:19,320
depends on like which organization

681
00:27:19,320 --> 00:27:21,000
you're working on but normally when I'm

682
00:27:21,000 --> 00:27:24,059
speaking with teams it's normally you

683
00:27:24,059 --> 00:27:25,500
know the devops engineers they're sorry

684
00:27:25,500 --> 00:27:26,880
is the one that are maintaining the

685
00:27:26,880 --> 00:27:28,020
Pipelines

686
00:27:28,020 --> 00:27:30,539
and yes there is

687
00:27:30,539 --> 00:27:33,779
there is some complexity I would say

688
00:27:33,779 --> 00:27:37,740
when we ask them to configure it in the

689
00:27:37,740 --> 00:27:40,500
secret management solution sometimes

690
00:27:40,500 --> 00:27:42,539
they don't

691
00:27:42,539 --> 00:27:45,900
I would say like doing that but as I

692
00:27:45,900 --> 00:27:47,700
mentioned it's either that or use it as

693
00:27:47,700 --> 00:27:49,320
an environment variable or wait until

694
00:27:49,320 --> 00:27:52,260
event or will will build a native

695
00:27:52,260 --> 00:27:54,900
integration for you so you know it's up

696
00:27:54,900 --> 00:27:57,620
to you to decide

697
00:27:58,260 --> 00:28:00,080
any other questions quickly

698
00:28:00,080 --> 00:28:04,699
great well thanks dove that's great

