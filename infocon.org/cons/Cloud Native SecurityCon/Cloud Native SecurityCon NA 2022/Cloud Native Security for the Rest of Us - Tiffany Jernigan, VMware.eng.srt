1
00:00:00,599 --> 00:00:02,700
all right this is going well so far

2
00:00:02,700 --> 00:00:04,319
everyone yay

3
00:00:04,319 --> 00:00:06,420
all right so hi

4
00:00:06,420 --> 00:00:08,760
um yeah I'm Tiffany Jernigan I'm a

5
00:00:08,760 --> 00:00:11,700
developer Advocate at VMware as my slide

6
00:00:11,700 --> 00:00:13,620
says up there

7
00:00:13,620 --> 00:00:16,320
um if you use Twitter and want to talk

8
00:00:16,320 --> 00:00:18,480
afterward or whatever my Twitter is up

9
00:00:18,480 --> 00:00:19,680
there as well

10
00:00:19,680 --> 00:00:21,779
here's how more technology works because

11
00:00:21,779 --> 00:00:25,320
sometimes this thing here fails as well

12
00:00:25,320 --> 00:00:27,300
all right cool

13
00:00:27,300 --> 00:00:29,820
so this talk is basically focused like

14
00:00:29,820 --> 00:00:32,640
this is a security conference but I'm

15
00:00:32,640 --> 00:00:34,559
hoping and assuming that not everyone

16
00:00:34,559 --> 00:00:36,840
here is like oh my gosh I am a security

17
00:00:36,840 --> 00:00:38,579
expert I know like a ton of stuff

18
00:00:38,579 --> 00:00:41,879
hopefully someone here is newer to it

19
00:00:41,879 --> 00:00:43,559
um if not well you probably know

20
00:00:43,559 --> 00:00:45,180
everything here already

21
00:00:45,180 --> 00:00:46,739
or maybe you'll learn something and that

22
00:00:46,739 --> 00:00:47,940
would be cool as well

23
00:00:47,940 --> 00:00:50,820
all right so first off basically less is

24
00:00:50,820 --> 00:00:52,680
more the less that you have the more

25
00:00:52,680 --> 00:00:54,960
secure that you can be and I'm really

26
00:00:54,960 --> 00:00:56,760
bad at holding a mic doing this because

27
00:00:56,760 --> 00:00:58,379
I haven't done this well so I'm sorry if

28
00:00:58,379 --> 00:00:59,879
I keep like moving around you can't hear

29
00:00:59,879 --> 00:01:03,180
me so uh first off have a less code so

30
00:01:03,180 --> 00:01:05,459
where it's possible try to use unmanaged

31
00:01:05,459 --> 00:01:07,860
to use managed services and existing

32
00:01:07,860 --> 00:01:09,360
like Security Solutions already out

33
00:01:09,360 --> 00:01:11,580
there instead of going and creating your

34
00:01:11,580 --> 00:01:14,040
own basically if you're using something

35
00:01:14,040 --> 00:01:16,260
that is like off the shelf maybe there

36
00:01:16,260 --> 00:01:17,640
have been a lot more people that have

37
00:01:17,640 --> 00:01:19,500
already been working on it unless you go

38
00:01:19,500 --> 00:01:20,880
and create your own specific security

39
00:01:20,880 --> 00:01:23,640
team to do it yourself so chances are

40
00:01:23,640 --> 00:01:25,200
it's probably better unless you're

41
00:01:25,200 --> 00:01:27,479
specifically focusing on doing that also

42
00:01:27,479 --> 00:01:30,180
give fewer permissions for instance only

43
00:01:30,180 --> 00:01:32,100
give necessary permissions don't go and

44
00:01:32,100 --> 00:01:33,360
be like here I'm going to give every

45
00:01:33,360 --> 00:01:35,540
single person admin access to everything

46
00:01:35,540 --> 00:01:39,360
and also avoid having long-lived secrets

47
00:01:39,360 --> 00:01:41,759
also you want to have fewer dependencies

48
00:01:41,759 --> 00:01:44,280
so that minimizes the tech service so

49
00:01:44,280 --> 00:01:46,020
for instance maybe you'll want to use

50
00:01:46,020 --> 00:01:48,119
say a disturbless image instead of using

51
00:01:48,119 --> 00:01:49,680
Ubuntu

52
00:01:49,680 --> 00:01:51,720
also keep up with whatever the latest

53
00:01:51,720 --> 00:01:55,140
recommendations are if you go to uh the

54
00:01:55,140 --> 00:01:57,420
kubernetes docs for instance there is a

55
00:01:57,420 --> 00:01:59,520
security checklist there you might not

56
00:01:59,520 --> 00:02:01,619
be able to see it too well there I'll be

57
00:02:01,619 --> 00:02:02,880
posting some of the slides later but

58
00:02:02,880 --> 00:02:04,259
basically there's a link there that

59
00:02:04,259 --> 00:02:08,060
frequently gets updated with things

60
00:02:08,098 --> 00:02:10,560
so the kubernetes documentation it

61
00:02:10,560 --> 00:02:12,239
breaks down Cloud native security into

62
00:02:12,239 --> 00:02:15,120
four C's so there's Cloud cluster

63
00:02:15,120 --> 00:02:16,980
container and code

64
00:02:16,980 --> 00:02:19,860
as a protection as a practitioner you

65
00:02:19,860 --> 00:02:22,379
basically need to worry about hardening

66
00:02:22,379 --> 00:02:23,879
your infrastructure at every single one

67
00:02:23,879 --> 00:02:25,379
of these levels you can't just be like I

68
00:02:25,379 --> 00:02:26,940
only care about one thing and not the

69
00:02:26,940 --> 00:02:28,980
rest of it

70
00:02:28,980 --> 00:02:30,599
so first I'm going to start talking

71
00:02:30,599 --> 00:02:34,319
about things with cluster components

72
00:02:34,319 --> 00:02:36,900
so unless you really need to run

73
00:02:36,900 --> 00:02:39,660
everything yourself I suggest that you

74
00:02:39,660 --> 00:02:42,360
don't instead use a managed kubernetes

75
00:02:42,360 --> 00:02:44,580
offering so manage to manage services

76
00:02:44,580 --> 00:02:46,379
they take care of a lot of the things

77
00:02:46,379 --> 00:02:48,239
for you so you don't so you don't have

78
00:02:48,239 --> 00:02:49,800
to do it yourself and therefore there

79
00:02:49,800 --> 00:02:52,140
might be a greater chance of like not

80
00:02:52,140 --> 00:02:54,180
making a mistake screwing something up

81
00:02:54,180 --> 00:02:56,819
more of security vulnerabilities Etc

82
00:02:56,819 --> 00:02:59,459
so security and Harney is basically one

83
00:02:59,459 --> 00:03:01,200
of the primary value ads for cloud

84
00:03:01,200 --> 00:03:03,540
platforms

85
00:03:03,540 --> 00:03:05,580
so as I was kind of mentioning you need

86
00:03:05,580 --> 00:03:06,840
to worry about hurting for every single

87
00:03:06,840 --> 00:03:09,120
layer so Harden the control plane

88
00:03:09,120 --> 00:03:11,159
basically only allow people to interact

89
00:03:11,159 --> 00:03:13,379
with the API server via the kubernetes

90
00:03:13,379 --> 00:03:16,500
apis the less that you have running on

91
00:03:16,500 --> 00:03:18,900
your control plane servers the less

92
00:03:18,900 --> 00:03:21,540
potential Avenues a attacker can exploit

93
00:03:21,540 --> 00:03:24,780
to gain access to your cluster

94
00:03:24,780 --> 00:03:27,659
make sure that you use real TLS certs

95
00:03:27,659 --> 00:03:30,900
such as say from let's encrypt and

96
00:03:30,900 --> 00:03:33,959
please do not be lazy and Skip TLS start

97
00:03:33,959 --> 00:03:35,459
verification there's this nice little

98
00:03:35,459 --> 00:03:38,220
flag that is insecure skip TLS verify

99
00:03:38,220 --> 00:03:41,159
it's basically as good as not having TLS

100
00:03:41,159 --> 00:03:43,080
at all

101
00:03:43,080 --> 00:03:46,200
so there's also this talk called pki the

102
00:03:46,200 --> 00:03:49,200
wrong way in that it's demonstrated how

103
00:03:49,200 --> 00:03:51,239
the end user ability to create client

104
00:03:51,239 --> 00:03:54,000
certificates for mtls can be leveraged

105
00:03:54,000 --> 00:03:56,519
to gain complete control of a cluster

106
00:03:56,519 --> 00:03:59,040
so this basically it demonstrates the

107
00:03:59,040 --> 00:04:01,739
need to restrict access to etcd there is

108
00:04:01,739 --> 00:04:03,480
documentation in the kubernetes docs

109
00:04:03,480 --> 00:04:04,799
that basically tells you how to go about

110
00:04:04,799 --> 00:04:06,299
doing that

111
00:04:06,299 --> 00:04:09,480
and basically at CD by default it

112
00:04:09,480 --> 00:04:11,220
assumes that anyone that can

113
00:04:11,220 --> 00:04:13,980
successfully authenticate with mtls has

114
00:04:13,980 --> 00:04:16,019
proper access which isn't necessarily

115
00:04:16,019 --> 00:04:18,600
what you want

116
00:04:18,600 --> 00:04:20,220
all right so

117
00:04:20,220 --> 00:04:22,380
um make sure that you use pod security

118
00:04:22,380 --> 00:04:25,020
standards to not allow others to have

119
00:04:25,020 --> 00:04:27,780
access that they shouldn't have so pod

120
00:04:27,780 --> 00:04:30,240
security policies they were the default

121
00:04:30,240 --> 00:04:32,639
so like there's a bunch of acronyms PSPs

122
00:04:32,639 --> 00:04:36,060
PSS but um that was that's deprecated in

123
00:04:36,060 --> 00:04:39,120
121 in favor of PSS

124
00:04:39,120 --> 00:04:41,580
there's also where you have the cloud

125
00:04:41,580 --> 00:04:43,080
metadata server

126
00:04:43,080 --> 00:04:45,479
um if you're using uh if you're not like

127
00:04:45,479 --> 00:04:46,800
running at say just like completely on

128
00:04:46,800 --> 00:04:47,880
your own servers and locally and

129
00:04:47,880 --> 00:04:49,259
everything like that

130
00:04:49,259 --> 00:04:52,020
um and there are credentials and info

131
00:04:52,020 --> 00:04:53,820
that are given into the virtual machine

132
00:04:53,820 --> 00:04:56,220
you basically never want to have your

133
00:04:56,220 --> 00:04:58,680
pods to have access to that so there can

134
00:04:58,680 --> 00:05:00,720
be lots of kind of scary vulnerabilities

135
00:05:00,720 --> 00:05:03,720
that can happen if you allow talkers to

136
00:05:03,720 --> 00:05:06,060
have access to the metadata server so

137
00:05:06,060 --> 00:05:07,500
someone could get credentials for

138
00:05:07,500 --> 00:05:09,840
instance associated with the VM service

139
00:05:09,840 --> 00:05:12,660
account and basically like if the Pod

140
00:05:12,660 --> 00:05:15,840
can have access to this it can get your

141
00:05:15,840 --> 00:05:19,199
node credentials and that might have you

142
00:05:19,199 --> 00:05:20,520
might be able to do things like

143
00:05:20,520 --> 00:05:22,560
registering to the cluster itself during

144
00:05:22,560 --> 00:05:25,560
like bootstrap so a pod could put some

145
00:05:25,560 --> 00:05:28,199
amount of work uh pretend that is a node

146
00:05:28,199 --> 00:05:29,880
and get workloads assigned to it which

147
00:05:29,880 --> 00:05:32,759
is pretty bad

148
00:05:32,759 --> 00:05:36,240
so for upgrading uh if you're dealing

149
00:05:36,240 --> 00:05:37,699
with all this yourself

150
00:05:37,699 --> 00:05:40,139
there's a bunch of things that you need

151
00:05:40,139 --> 00:05:41,940
to worry about so kubernetes basically

152
00:05:41,940 --> 00:05:44,100
is designed so that upgrades can be

153
00:05:44,100 --> 00:05:46,440
relatively seamless especially if you

154
00:05:46,440 --> 00:05:49,020
are using a managed offering where you

155
00:05:49,020 --> 00:05:50,699
can maybe just like click a button and

156
00:05:50,699 --> 00:05:52,139
have it do some of those things for you

157
00:05:52,139 --> 00:05:55,199
we've gone a long way since openstack

158
00:05:55,199 --> 00:05:56,940
when you had to like create a new

159
00:05:56,940 --> 00:05:59,699
cluster and then move everything over to

160
00:05:59,699 --> 00:06:01,800
that and then go and delete your old

161
00:06:01,800 --> 00:06:02,940
cluster

162
00:06:02,940 --> 00:06:05,160
and I've seen like way too many people

163
00:06:05,160 --> 00:06:07,560
that are still running super old

164
00:06:07,560 --> 00:06:09,960
versions of kubernetes because sometimes

165
00:06:09,960 --> 00:06:13,320
it's just easier to not do anything

166
00:06:13,320 --> 00:06:15,840
um but please don't do that

167
00:06:15,840 --> 00:06:17,699
um even some managed offerings might

168
00:06:17,699 --> 00:06:20,220
have the option to do auto upgrades so

169
00:06:20,220 --> 00:06:22,380
it just makes life a lot easier

170
00:06:22,380 --> 00:06:24,300
it's you're making sure that you have

171
00:06:24,300 --> 00:06:26,580
fewer of like things to do with the cves

172
00:06:26,580 --> 00:06:28,740
that have been found maybe years ago

173
00:06:28,740 --> 00:06:30,120
that have been solved at this point in

174
00:06:30,120 --> 00:06:32,460
patched basically try to stay up to date

175
00:06:32,460 --> 00:06:35,039
with um the newest and latest matches or

176
00:06:35,039 --> 00:06:36,720
as close to the newest release as you

177
00:06:36,720 --> 00:06:38,880
possibly can

178
00:06:38,880 --> 00:06:40,560
and if you're kind of scared about what

179
00:06:40,560 --> 00:06:42,840
could go wrong with updating it probably

180
00:06:42,840 --> 00:06:44,280
won't be things blowing up when you're

181
00:06:44,280 --> 00:06:45,780
upgrading

182
00:06:45,780 --> 00:06:48,300
um it's more likely that you'll maybe

183
00:06:48,300 --> 00:06:49,979
run into something like a deprecation

184
00:06:49,979 --> 00:06:51,419
cycle and then things are no longer

185
00:06:51,419 --> 00:06:53,900
working anymore

186
00:06:54,000 --> 00:06:56,220
so like how does that work so for

187
00:06:56,220 --> 00:06:58,319
instance say you have like some API

188
00:06:58,319 --> 00:07:00,419
version that needs to be deprecated so

189
00:07:00,419 --> 00:07:03,360
say that was like for Ingress for V1

190
00:07:03,360 --> 00:07:06,720
beta1 so a new API was introduced so

191
00:07:06,720 --> 00:07:08,280
there was a V1

192
00:07:08,280 --> 00:07:10,860
and that was in 119. so at that point

193
00:07:10,860 --> 00:07:12,780
you're if you're using it you're going

194
00:07:12,780 --> 00:07:14,100
to get a bunch of warnings saying hey

195
00:07:14,100 --> 00:07:15,780
this is being deprecated it'll be

196
00:07:15,780 --> 00:07:18,539
removed in 1.22.

197
00:07:18,539 --> 00:07:20,039
you don't have to be like oh no every

198
00:07:20,039 --> 00:07:21,539
the world's like ending I need to like

199
00:07:21,539 --> 00:07:23,460
worry about this immediately and

200
00:07:23,460 --> 00:07:25,440
everything else will things will blow up

201
00:07:25,440 --> 00:07:27,539
however like try to plan for it

202
00:07:27,539 --> 00:07:29,819
basically once you start decommissioning

203
00:07:29,819 --> 00:07:32,580
your 118 cluster at this point it's just

204
00:07:32,580 --> 00:07:35,639
migrate over at that point and remember

205
00:07:35,639 --> 00:07:39,180
kubernetes will support both V1 and V1

206
00:07:39,180 --> 00:07:41,819
beta 1 during that entire period so

207
00:07:41,819 --> 00:07:44,099
maybe that's about like a year-ish or so

208
00:07:44,099 --> 00:07:48,300
so basically you have a year to upgrade

209
00:07:48,300 --> 00:07:50,699
your yaml so you don't really have an

210
00:07:50,699 --> 00:07:53,340
excuse there

211
00:07:53,340 --> 00:07:55,620
um for your enjoyment um this is the

212
00:07:55,620 --> 00:07:57,300
list of things that you have to do if

213
00:07:57,300 --> 00:08:00,240
you are upgrading a cluster yourself so

214
00:08:00,240 --> 00:08:02,280
and in the specific order that you have

215
00:08:02,280 --> 00:08:03,900
to do that in so you have to update your

216
00:08:03,900 --> 00:08:06,120
control plane you need to upgrade your

217
00:08:06,120 --> 00:08:08,759
nodes you need to upgrade clients such

218
00:08:08,759 --> 00:08:10,919
as cube cuddle and then you have to deal

219
00:08:10,919 --> 00:08:12,660
with things like adjusting manifests and

220
00:08:12,660 --> 00:08:14,880
other resources based on API changes

221
00:08:14,880 --> 00:08:16,800
that accompany the new kubernetes

222
00:08:16,800 --> 00:08:17,819
version

223
00:08:17,819 --> 00:08:20,879
so as you can see uh you really want to

224
00:08:20,879 --> 00:08:22,800
use managed offerings so that you don't

225
00:08:22,800 --> 00:08:27,080
have to deal with all of that yourself

226
00:08:27,539 --> 00:08:31,259
so quotas and limits they can be used so

227
00:08:31,259 --> 00:08:32,940
noise neighbors don't affect other

228
00:08:32,940 --> 00:08:34,440
workloads that are running on the same

229
00:08:34,440 --> 00:08:35,458
host

230
00:08:35,458 --> 00:08:37,260
they can also prevent attacker from

231
00:08:37,260 --> 00:08:40,020
using your infrastructure for using

232
00:08:40,020 --> 00:08:42,059
doing things like DDOS or crypto mining

233
00:08:42,059 --> 00:08:43,799
which unless you're trying to do the

234
00:08:43,799 --> 00:08:45,000
crypto mining you probably don't want

235
00:08:45,000 --> 00:08:46,560
someone else doing that

236
00:08:46,560 --> 00:08:48,540
you can also use things like taints and

237
00:08:48,540 --> 00:08:50,399
tolerations to schedule workloads away

238
00:08:50,399 --> 00:08:51,899
from each other if you decide you want

239
00:08:51,899 --> 00:08:52,680
to

240
00:08:52,680 --> 00:08:54,959
you can also add another layer of

241
00:08:54,959 --> 00:08:57,360
security by using sandbox container

242
00:08:57,360 --> 00:09:00,540
runtimes such as like G visor Arcata or

243
00:09:00,540 --> 00:09:03,240
firecracker basically they add another

244
00:09:03,240 --> 00:09:05,700
layer of compute isolation between the

245
00:09:05,700 --> 00:09:07,440
containerized workload and the

246
00:09:07,440 --> 00:09:09,300
underlying operating system kernel by

247
00:09:09,300 --> 00:09:13,219
adding another layer of virtualization

248
00:09:13,820 --> 00:09:18,660
by default on kubernetes uh every single

249
00:09:18,660 --> 00:09:21,240
pod can talk to every single other pod

250
00:09:21,240 --> 00:09:24,000
if you're not cool with that then you

251
00:09:24,000 --> 00:09:26,640
need to use Network policies

252
00:09:26,640 --> 00:09:29,399
basically kubernetes also assumes that

253
00:09:29,399 --> 00:09:31,560
you can trust the underlying Network so

254
00:09:31,560 --> 00:09:33,600
for example the network of say you're a

255
00:09:33,600 --> 00:09:36,120
cloud provider if you're using one

256
00:09:36,120 --> 00:09:39,060
if you don't actually trust it

257
00:09:39,060 --> 00:09:41,279
um one way to address that is to set up

258
00:09:41,279 --> 00:09:43,800
a service mesh with full end-to-end

259
00:09:43,800 --> 00:09:47,040
encryption for example like mtls some

260
00:09:47,040 --> 00:09:48,300
people might say that's Overkill but all

261
00:09:48,300 --> 00:09:50,700
depends on what you specifically want

262
00:09:50,700 --> 00:09:54,060
you can also go the extra mile and you

263
00:09:54,060 --> 00:09:56,760
can use tools like psyllium for advanced

264
00:09:56,760 --> 00:09:58,500
Network policies such as applying like

265
00:09:58,500 --> 00:10:01,920
filtering on specific API routes so for

266
00:10:01,920 --> 00:10:04,019
example you could have like some

267
00:10:04,019 --> 00:10:06,420
front-end client pod and you want that

268
00:10:06,420 --> 00:10:09,240
to be able to talk to V1 users but you

269
00:10:09,240 --> 00:10:11,120
don't want it to be able to talk to say

270
00:10:11,120 --> 00:10:13,500
V1 billing

271
00:10:13,500 --> 00:10:17,120
um using like ebpf magic

272
00:10:17,519 --> 00:10:19,860
so Secrets

273
00:10:19,860 --> 00:10:21,720
um Secrets can have different rbac

274
00:10:21,720 --> 00:10:24,360
permissions I will go a bit into what

275
00:10:24,360 --> 00:10:26,279
the heck our back is later if you don't

276
00:10:26,279 --> 00:10:27,560
already know

277
00:10:27,560 --> 00:10:29,880
if you go hard car with that you could

278
00:10:29,880 --> 00:10:32,580
even encrypt them at rest kubernetes

279
00:10:32,580 --> 00:10:34,380
supports that with encryption at rest

280
00:10:34,380 --> 00:10:36,420
which will basically encrypt resources

281
00:10:36,420 --> 00:10:40,080
like such a secrets in etcd and

282
00:10:40,080 --> 00:10:41,700
basically that prevents parties that

283
00:10:41,700 --> 00:10:44,160
gain access to your NCD backups from

284
00:10:44,160 --> 00:10:46,380
being able to view the content of those

285
00:10:46,380 --> 00:10:47,519
secrets

286
00:10:47,519 --> 00:10:51,180
also please do not put your specific

287
00:10:51,180 --> 00:10:54,360
secret data inside of a commit a config

288
00:10:54,360 --> 00:10:55,459
map

289
00:10:55,459 --> 00:10:58,500
use actual secrets and then have your

290
00:10:58,500 --> 00:11:01,820
config map reference those

291
00:11:03,300 --> 00:11:06,720
so yeah even better uh don't put stuff

292
00:11:06,720 --> 00:11:09,720
directly in Secrets uh use something

293
00:11:09,720 --> 00:11:11,399
else that will put them in there for you

294
00:11:11,399 --> 00:11:14,220
so like the whole point there is to

295
00:11:14,220 --> 00:11:16,500
avoid committing your secrets to say

296
00:11:16,500 --> 00:11:19,140
your git repo and then hey look the

297
00:11:19,140 --> 00:11:21,240
whole world sees it that kind of that's

298
00:11:21,240 --> 00:11:23,940
pretty bad I mean you may find that kind

299
00:11:23,940 --> 00:11:26,579
of obvious but just as a reminder

300
00:11:26,579 --> 00:11:28,920
um basically yeah you don't want to

301
00:11:28,920 --> 00:11:30,660
manage Secrets yourself unless you

302
00:11:30,660 --> 00:11:32,279
really have to

303
00:11:32,279 --> 00:11:34,920
you want to use something like hashicorp

304
00:11:34,920 --> 00:11:37,380
vaults or sealed Secrets or chasmus or

305
00:11:37,380 --> 00:11:39,480
Sops or if you have are using a cloud

306
00:11:39,480 --> 00:11:43,440
provider you can use KMS

307
00:11:43,440 --> 00:11:45,959
and basically yeah for a secret data

308
00:11:45,959 --> 00:11:47,100
encryption

309
00:11:47,100 --> 00:11:49,200
basically leverage the work that others

310
00:11:49,200 --> 00:11:51,660
have done to make your life easier and

311
00:11:51,660 --> 00:11:54,240
more secure

312
00:11:54,240 --> 00:11:59,100
so people such as you all or your devs

313
00:11:59,100 --> 00:12:01,320
or robots so like say if you have some

314
00:12:01,320 --> 00:12:03,600
automated services and you have code

315
00:12:03,600 --> 00:12:05,040
running on your clusters all those

316
00:12:05,040 --> 00:12:06,959
things need to be able to talk to the

317
00:12:06,959 --> 00:12:09,779
kubernetes API so that they can deploy

318
00:12:09,779 --> 00:12:11,640
things

319
00:12:11,640 --> 00:12:13,200
um whether so or maybe you have to scale

320
00:12:13,200 --> 00:12:15,360
up scale down roll out new versions do

321
00:12:15,360 --> 00:12:19,740
monitoring basically all of the things

322
00:12:19,740 --> 00:12:21,959
um but we don't want our Auto scaler to

323
00:12:21,959 --> 00:12:24,899
do things such as mining Bitcoin or like

324
00:12:24,899 --> 00:12:26,760
maybe maybe your developers ran away

325
00:12:26,760 --> 00:12:29,700
with like a credit card database but

326
00:12:29,700 --> 00:12:30,959
probably more realistically their

327
00:12:30,959 --> 00:12:33,540
laptops got stolen which may have

328
00:12:33,540 --> 00:12:35,700
happened to me in on my last trip for

329
00:12:35,700 --> 00:12:37,380
kubecon

330
00:12:37,380 --> 00:12:39,600
um so then you just want to make sure

331
00:12:39,600 --> 00:12:42,180
that people can't access this data so

332
00:12:42,180 --> 00:12:45,060
that's why this whole next section is uh

333
00:12:45,060 --> 00:12:48,240
for user management and permissions

334
00:12:48,240 --> 00:12:51,000
so we have good old separation between

335
00:12:51,000 --> 00:12:53,220
these two things so you might if people

336
00:12:53,220 --> 00:12:55,079
might just say auth but what kind of

337
00:12:55,079 --> 00:12:57,120
auth so there's auth n which is

338
00:12:57,120 --> 00:12:58,860
authentication which is basically like

339
00:12:58,860 --> 00:13:02,040
who are you then there is also Aussie

340
00:13:02,040 --> 00:13:04,380
with his authorization and that is okay

341
00:13:04,380 --> 00:13:06,300
well now we know who you are but what

342
00:13:06,300 --> 00:13:09,260
are you allowed to do

343
00:13:09,480 --> 00:13:13,139
so for authentication um kubernetes is a

344
00:13:13,139 --> 00:13:15,120
very flexible here you could use things

345
00:13:15,120 --> 00:13:17,820
such as TLS certs maybe like with your

346
00:13:17,820 --> 00:13:22,200
own root CA or not uh IDC tokens with

347
00:13:22,200 --> 00:13:24,480
any oidc provider so like maybe it's

348
00:13:24,480 --> 00:13:26,519
like some in-house thing like Dex or key

349
00:13:26,519 --> 00:13:29,519
cloak or SAS like OCTA and that in turn

350
00:13:29,519 --> 00:13:31,320
can plug in with your clouds I am if

351
00:13:31,320 --> 00:13:33,360
you're again using Cloud so basically

352
00:13:33,360 --> 00:13:35,820
that could map like cloud provider users

353
00:13:35,820 --> 00:13:38,519
to your kubernetes users

354
00:13:38,519 --> 00:13:40,800
make sure to recall like what the best

355
00:13:40,800 --> 00:13:43,800
practices are so for instance prefer to

356
00:13:43,800 --> 00:13:46,380
use short-lived credentials so for

357
00:13:46,380 --> 00:13:48,720
example use oauth access tokens instead

358
00:13:48,720 --> 00:13:51,120
of like a username and a password

359
00:13:51,120 --> 00:13:52,800
so for humans you might have to worry

360
00:13:52,800 --> 00:13:55,920
about like TLS IDC service accounts Etc

361
00:13:55,920 --> 00:13:58,560
like a fun note is uh in kubernetes

362
00:13:58,560 --> 00:14:01,260
don't you don't just like create a user

363
00:14:01,260 --> 00:14:04,019
you give hey I want to have the bill

364
00:14:04,019 --> 00:14:06,120
this person or thing or whatever to have

365
00:14:06,120 --> 00:14:07,740
the ability to create pods permissions

366
00:14:07,740 --> 00:14:09,680
for that to say like

367
00:14:09,680 --> 00:14:11,820
John Deere or something like that I

368
00:14:11,820 --> 00:14:14,459
don't know or Jane Doe or whatever

369
00:14:14,459 --> 00:14:16,800
um or your name or some robot but um

370
00:14:16,800 --> 00:14:19,200
basically what happens is as long as

371
00:14:19,200 --> 00:14:21,360
someone shows up with a valid cert or

372
00:14:21,360 --> 00:14:24,240
IDC token for that user then they can go

373
00:14:24,240 --> 00:14:26,519
and create pods and then robots deal

374
00:14:26,519 --> 00:14:28,980
with service accounts there is also the

375
00:14:28,980 --> 00:14:31,079
spiffy project which you can use for

376
00:14:31,079 --> 00:14:32,760
authenticating from one service to

377
00:14:32,760 --> 00:14:36,300
another it's an advanced use case but

378
00:14:36,300 --> 00:14:38,100
with it you can deal with things with

379
00:14:38,100 --> 00:14:39,480
like short-lived identities that can

380
00:14:39,480 --> 00:14:40,980
help you move away from these Long Live

381
00:14:40,980 --> 00:14:42,300
secrets and if you want to look more

382
00:14:42,300 --> 00:14:46,160
into that you can go to spiffy.io

383
00:14:46,440 --> 00:14:48,839
all right so authorization

384
00:14:48,839 --> 00:14:51,480
again this is do you have permissions to

385
00:14:51,480 --> 00:14:53,339
do whatever you are trying to do whether

386
00:14:53,339 --> 00:14:56,040
it's like creating some pods leading

387
00:14:56,040 --> 00:14:58,920
something listing Etc

388
00:14:58,920 --> 00:15:01,920
um kubernetes the kubernetes API has uh

389
00:15:01,920 --> 00:15:05,579
several different authorization modes so

390
00:15:05,579 --> 00:15:08,339
there's ABAC which is attribute based

391
00:15:08,339 --> 00:15:11,339
Access Control there is node which is a

392
00:15:11,339 --> 00:15:13,680
special purpose authorization mode that

393
00:15:13,680 --> 00:15:16,380
grants permissions to cubelets based on

394
00:15:16,380 --> 00:15:19,079
the pods that they're scheduled to run

395
00:15:19,079 --> 00:15:21,360
there's also web hook authorization

396
00:15:21,360 --> 00:15:24,420
which allows you to use a custom author

397
00:15:24,420 --> 00:15:25,860
Z system such as plugging in your

398
00:15:25,860 --> 00:15:29,160
existing system and the main one is rbac

399
00:15:29,160 --> 00:15:33,199
which is what we'll look into next

400
00:15:33,240 --> 00:15:35,519
so like the high level idea of

401
00:15:35,519 --> 00:15:38,100
kubernetes is you go and you define a

402
00:15:38,100 --> 00:15:40,199
role which is a collection of

403
00:15:40,199 --> 00:15:42,000
permissions so like things that can be

404
00:15:42,000 --> 00:15:44,699
done so for instance being able to list

405
00:15:44,699 --> 00:15:47,540
pods create certain types of resources

406
00:15:47,540 --> 00:15:49,800
scaling up and down for some sort of

407
00:15:49,800 --> 00:15:51,959
resource Etc

408
00:15:51,959 --> 00:15:53,760
and then there's being able to do things

409
00:15:53,760 --> 00:15:56,339
like then you you bind the role to a

410
00:15:56,339 --> 00:15:58,260
user or say whether it's a user or it

411
00:15:58,260 --> 00:15:59,699
could be a group or it could be a

412
00:15:59,699 --> 00:16:01,320
service account and you use that with a

413
00:16:01,320 --> 00:16:05,100
role binding or a cluster role binding

414
00:16:05,100 --> 00:16:08,100
also make sure to audit your rbac there

415
00:16:08,100 --> 00:16:10,139
are a bunch of different Cube cuddle

416
00:16:10,139 --> 00:16:11,459
commands that you can use to audit

417
00:16:11,459 --> 00:16:13,440
permissions the first one that is listed

418
00:16:13,440 --> 00:16:17,279
there is there by default to query the

419
00:16:17,279 --> 00:16:18,959
API authorization layer there's other

420
00:16:18,959 --> 00:16:20,459
plugins that you can add which is

421
00:16:20,459 --> 00:16:23,160
basically everything else there and just

422
00:16:23,160 --> 00:16:25,139
as a note you can't take away

423
00:16:25,139 --> 00:16:28,199
permissions so basically if you're like

424
00:16:28,199 --> 00:16:30,959
I want to give someone full access you

425
00:16:30,959 --> 00:16:32,160
can't be like oh well I don't want them

426
00:16:32,160 --> 00:16:33,360
to have access to this specific

427
00:16:33,360 --> 00:16:34,800
namespace you have to go and give

428
00:16:34,800 --> 00:16:36,420
specific access to each thing that

429
00:16:36,420 --> 00:16:37,380
you're trying to do if you want to go

430
00:16:37,380 --> 00:16:39,980
about it that way

431
00:16:40,560 --> 00:16:42,899
um permissions can be defined cluster

432
00:16:42,899 --> 00:16:45,240
wide or you can do it with a specific

433
00:16:45,240 --> 00:16:47,399
name space so you can be like hey I want

434
00:16:47,399 --> 00:16:48,959
someone to only have access to this

435
00:16:48,959 --> 00:16:50,699
random sandbox namespace but I don't

436
00:16:50,699 --> 00:16:52,560
want them to have access to prod

437
00:16:52,560 --> 00:16:55,500
so that can be a thing to like make do

438
00:16:55,500 --> 00:16:58,380
some separation there you could for

439
00:16:58,380 --> 00:17:00,660
instance make someone even an admin in

440
00:17:00,660 --> 00:17:02,459
their own specific namespace and if they

441
00:17:02,459 --> 00:17:04,140
blow everything up there it was their

442
00:17:04,140 --> 00:17:05,520
namespace

443
00:17:05,520 --> 00:17:08,760
so it won't destroy anything else

444
00:17:08,760 --> 00:17:12,299
so again do not give blanket admin

445
00:17:12,299 --> 00:17:14,220
permissions to just everyone that would

446
00:17:14,220 --> 00:17:17,339
basically be like giving root access

447
00:17:17,339 --> 00:17:20,040
so namespacers namespaces basically make

448
00:17:20,040 --> 00:17:22,619
it easier to be lazy in doubt basically

449
00:17:22,619 --> 00:17:24,419
if someone needs access to a bunch of

450
00:17:24,419 --> 00:17:26,400
stuff create a namespace specifically

451
00:17:26,400 --> 00:17:28,199
for them give them access to that and

452
00:17:28,199 --> 00:17:30,360
call it a day

453
00:17:30,360 --> 00:17:34,320
so software supply chain in 1982 there

454
00:17:34,320 --> 00:17:37,140
was the Chicago Tylenol murders they can

455
00:17:37,140 --> 00:17:39,360
figure out like where along the supply

456
00:17:39,360 --> 00:17:41,460
chain that there was something being put

457
00:17:41,460 --> 00:17:44,280
in Tylenol that was killing people

458
00:17:44,280 --> 00:17:46,140
um so the solution was basically adding

459
00:17:46,140 --> 00:17:48,440
a seal there so for instance

460
00:17:48,440 --> 00:17:51,120
transport is avoiding like a person in

461
00:17:51,120 --> 00:17:52,080
the middle attack

462
00:17:52,080 --> 00:17:55,020
your factory is your CI CD pipeline so

463
00:17:55,020 --> 00:17:57,179
you can check it by having like a

464
00:17:57,179 --> 00:17:59,280
concept of a secure Factory so for

465
00:17:59,280 --> 00:18:00,840
instance you could have two CI CD

466
00:18:00,840 --> 00:18:02,760
pipelines and have them do the same

467
00:18:02,760 --> 00:18:04,799
build you can check if the binaries are

468
00:18:04,799 --> 00:18:06,299
the same and then there's like thread

469
00:18:06,299 --> 00:18:08,039
modeling it's like a definitive

470
00:18:08,039 --> 00:18:10,140
identifying like who the actors are in

471
00:18:10,140 --> 00:18:12,480
your organization perhaps as disgruntled

472
00:18:12,480 --> 00:18:13,980
employees Etc

473
00:18:13,980 --> 00:18:16,320
so if a new vulnerability gets disclosed

474
00:18:16,320 --> 00:18:18,660
how do you a determine if you're

475
00:18:18,660 --> 00:18:21,000
affected and B how do you deploy a fix

476
00:18:21,000 --> 00:18:22,320
or mitigation

477
00:18:22,320 --> 00:18:24,600
are you like are you even sure that you

478
00:18:24,600 --> 00:18:26,580
aren't accidentally or someone is like

479
00:18:26,580 --> 00:18:29,400
unwillingly running like a Bitcoin miner

480
00:18:29,400 --> 00:18:30,960
that could be bad

481
00:18:30,960 --> 00:18:32,520
um basically you can't be confident in

482
00:18:32,520 --> 00:18:33,720
the software that you're running unless

483
00:18:33,720 --> 00:18:35,220
you know where it came from and how it

484
00:18:35,220 --> 00:18:37,380
got there

485
00:18:37,380 --> 00:18:38,820
so there's a bunch of questions that you

486
00:18:38,820 --> 00:18:40,140
need to be asking or things that you

487
00:18:40,140 --> 00:18:41,700
need to be validating as you go from

488
00:18:41,700 --> 00:18:44,400
writing code to running it in production

489
00:18:44,400 --> 00:18:46,260
so like does a change come from a

490
00:18:46,260 --> 00:18:48,240
trusted person one tool that you could

491
00:18:48,240 --> 00:18:50,280
use to help here is six stores get

492
00:18:50,280 --> 00:18:51,960
signed and you can use that sign commits

493
00:18:51,960 --> 00:18:55,020
so you're identifying Who You Are

494
00:18:55,020 --> 00:18:57,299
and it's keyless so you don't have to

495
00:18:57,299 --> 00:18:59,460
worry about gpg keys so that's pretty

496
00:18:59,460 --> 00:19:02,280
cool you can also use cosine for signing

497
00:19:02,280 --> 00:19:04,380
container images next is the source code

498
00:19:04,380 --> 00:19:06,660
coming from your Source repo can only

499
00:19:06,660 --> 00:19:09,059
authorize people push to it

500
00:19:09,059 --> 00:19:10,860
when you build your artifact is that

501
00:19:10,860 --> 00:19:12,600
from a trusted source is the build

502
00:19:12,600 --> 00:19:16,080
system itself trusted can you trust like

503
00:19:16,080 --> 00:19:17,940
where it's running and what it's running

504
00:19:17,940 --> 00:19:19,140
on

505
00:19:19,140 --> 00:19:21,000
and once your artifact or your program

506
00:19:21,000 --> 00:19:23,100
is built can you trust where that is

507
00:19:23,100 --> 00:19:24,900
being pushed to and that only trusted

508
00:19:24,900 --> 00:19:27,419
people can push to that as well and

509
00:19:27,419 --> 00:19:30,299
ideally only your build system in your

510
00:19:30,299 --> 00:19:32,940
CI CD pipeline can do the pushing

511
00:19:32,940 --> 00:19:34,679
also make sure to do vulnerability

512
00:19:34,679 --> 00:19:36,000
scanning with your images to look for

513
00:19:36,000 --> 00:19:37,320
known cves

514
00:19:37,320 --> 00:19:39,059
there are tools out there such as Claire

515
00:19:39,059 --> 00:19:41,220
and trivi some container Registries such

516
00:19:41,220 --> 00:19:43,500
as Harbor have this built in

517
00:19:43,500 --> 00:19:46,080
you should also consider using an Opa

518
00:19:46,080 --> 00:19:48,539
implementation for policy enforcement so

519
00:19:48,539 --> 00:19:50,299
gatekeeper is one of the options there

520
00:19:50,299 --> 00:19:52,500
sigster also provides an admission

521
00:19:52,500 --> 00:19:55,200
controller to assert image signatures

522
00:19:55,200 --> 00:19:58,020
and other stations

523
00:19:58,020 --> 00:20:00,240
um there are some threat models and

524
00:20:00,240 --> 00:20:01,440
there's a bunch of different ways to

525
00:20:01,440 --> 00:20:04,380
mitigate them due to a time I might skip

526
00:20:04,380 --> 00:20:06,539
through this really fast but like for

527
00:20:06,539 --> 00:20:07,679
instance

528
00:20:07,679 --> 00:20:10,559
um so say someone manages to make a

529
00:20:10,559 --> 00:20:11,760
change to your code that you depend on

530
00:20:11,760 --> 00:20:13,380
and it's not your code but something

531
00:20:13,380 --> 00:20:15,120
that you're pulling on so someone

532
00:20:15,120 --> 00:20:16,919
decides hey I'm going to delete this or

533
00:20:16,919 --> 00:20:18,900
it's accidentally deleted

534
00:20:18,900 --> 00:20:21,120
that could be a huge problem so you

535
00:20:21,120 --> 00:20:22,200
might want to have immutable

536
00:20:22,200 --> 00:20:24,240
dependencies are you vendoring so that

537
00:20:24,240 --> 00:20:26,340
you don't have to worry about if it goes

538
00:20:26,340 --> 00:20:27,539
down for instance

539
00:20:27,539 --> 00:20:30,299
there's also things like attacks on uh

540
00:20:30,299 --> 00:20:31,740
like your build infra there was this

541
00:20:31,740 --> 00:20:34,440
happened over with uh solarwinds

542
00:20:34,440 --> 00:20:37,080
and basically some code that's produced

543
00:20:37,080 --> 00:20:38,640
by the build server had malicious code

544
00:20:38,640 --> 00:20:40,260
injected in it and allowed external

545
00:20:40,260 --> 00:20:43,080
access So to avoid things like this you

546
00:20:43,080 --> 00:20:45,000
may want to have ephemeral builds and to

547
00:20:45,000 --> 00:20:46,799
not have like a dedicated machine that

548
00:20:46,799 --> 00:20:48,299
someone can hack into

549
00:20:48,299 --> 00:20:50,160
so basically you would want like a build

550
00:20:50,160 --> 00:20:52,380
system that spins up on demand and then

551
00:20:52,380 --> 00:20:54,539
goes away afterward basically if it

552
00:20:54,539 --> 00:20:57,720
doesn't exist it can't be hacked

553
00:20:57,720 --> 00:20:59,520
um a few more things um long story short

554
00:20:59,520 --> 00:21:01,919
if you spin up a cluster by clicking

555
00:21:01,919 --> 00:21:03,480
around in like some sort of web console

556
00:21:03,480 --> 00:21:05,220
or you use something like eks cuddle

557
00:21:05,220 --> 00:21:06,960
create cluster the result is far from

558
00:21:06,960 --> 00:21:08,820
being production ready for instance

559
00:21:08,820 --> 00:21:10,440
maybe backing up your cluster can be

560
00:21:10,440 --> 00:21:12,600
really important you can use a tool such

561
00:21:12,600 --> 00:21:15,360
as Valero observability is another big

562
00:21:15,360 --> 00:21:18,299
thing metrics can help you determine if

563
00:21:18,299 --> 00:21:20,760
something is going as expected or if

564
00:21:20,760 --> 00:21:22,440
it's not and try to help you figure out

565
00:21:22,440 --> 00:21:23,940
what is happening

566
00:21:23,940 --> 00:21:26,700
also good logging is indispensable for

567
00:21:26,700 --> 00:21:28,140
security because we want to be able to

568
00:21:28,140 --> 00:21:31,020
audit who does what we want to be able

569
00:21:31,020 --> 00:21:32,940
to see things like user and privilege

570
00:21:32,940 --> 00:21:35,039
changes and creation of things and

571
00:21:35,039 --> 00:21:37,200
security events interruptions logging

572
00:21:37,200 --> 00:21:38,100
Etc

573
00:21:38,100 --> 00:21:39,659
and don't forget at the end of the day

574
00:21:39,659 --> 00:21:42,059
this is running your code if you have

575
00:21:42,059 --> 00:21:43,620
problems with your code kubernetes is

576
00:21:43,620 --> 00:21:44,760
not going to be able to catch them all

577
00:21:44,760 --> 00:21:47,100
so you want to be able to use source

578
00:21:47,100 --> 00:21:49,380
code analysis tools such as oasp to help

579
00:21:49,380 --> 00:21:51,419
you analyze source code and or like

580
00:21:51,419 --> 00:21:52,980
compiled versions of code to find

581
00:21:52,980 --> 00:21:55,020
security flaws

582
00:21:55,020 --> 00:21:57,600
here are some other resources some of

583
00:21:57,600 --> 00:22:00,380
which I guess I have already mentioned

584
00:22:00,380 --> 00:22:03,659
I'm doing this talk again hopefully with

585
00:22:03,659 --> 00:22:06,419
less technical difficulties at Spring

586
00:22:06,419 --> 00:22:08,460
one in December and there will be other

587
00:22:08,460 --> 00:22:10,140
talks both on like kubernetes and spring

588
00:22:10,140 --> 00:22:12,120
if you've never heard of spring it's

589
00:22:12,120 --> 00:22:13,559
because you're probably not in the Java

590
00:22:13,559 --> 00:22:15,600
world but there's that so if you want to

591
00:22:15,600 --> 00:22:17,520
come over there

592
00:22:17,520 --> 00:22:18,360
um if

593
00:22:18,360 --> 00:22:20,760
you could fill out the feedback that

594
00:22:20,760 --> 00:22:22,440
would be super helpful that way I can

595
00:22:22,440 --> 00:22:24,360
work on improving this talk

596
00:22:24,360 --> 00:22:27,360
so that would be great

597
00:22:27,360 --> 00:22:28,980
I'll leave that up there for a second

598
00:22:28,980 --> 00:22:33,140
since I apparently have like two minutes

599
00:22:41,100 --> 00:22:44,460
all right well thank you very much

600
00:22:44,460 --> 00:22:45,620
um

601
00:22:45,620 --> 00:22:47,940
come up and talk to me afterward I think

602
00:22:47,940 --> 00:22:49,140
I'm pretty much at the end of this year

603
00:22:49,140 --> 00:22:51,720
but yeah so special thanks to a bunch of

604
00:22:51,720 --> 00:22:53,580
folks who helped me learn some of this

605
00:22:53,580 --> 00:22:57,179
because uh I went into this with I don't

606
00:22:57,179 --> 00:22:58,980
know anything about security I should

607
00:22:58,980 --> 00:23:00,240
learn it so therefore I'm going to

608
00:23:00,240 --> 00:23:01,919
propose a talk that's about security and

609
00:23:01,919 --> 00:23:03,900
force myself to do it so that's how this

610
00:23:03,900 --> 00:23:06,179
went so yeah again there's my Twitter

611
00:23:06,179 --> 00:23:08,810
and thanks again everyone

612
00:23:08,810 --> 00:23:12,190
[Applause]

