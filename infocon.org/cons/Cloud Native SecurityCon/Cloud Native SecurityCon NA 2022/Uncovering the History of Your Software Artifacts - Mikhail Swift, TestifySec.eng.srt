1
00:00:00,000 --> 00:00:01,140
thank you

2
00:00:01,140 --> 00:00:03,719
so as mentioned my name is Michael Swift

3
00:00:03,720 --> 00:00:05,460
I'm going to talk a little bit about

4
00:00:05,460 --> 00:00:07,500
supply chain security which change of

5
00:00:07,500 --> 00:00:09,300
pace of the past few talks

6
00:00:09,300 --> 00:00:12,179
it's me I'm co-founder and CTO of

7
00:00:12,179 --> 00:00:14,160
testify SEC I've contributed a little

8
00:00:14,160 --> 00:00:16,199
bit to the cncf software supply chain

9
00:00:16,199 --> 00:00:19,080
best practice paper in Toto and I really

10
00:00:19,080 --> 00:00:22,260
love open source software so a lot of

11
00:00:22,260 --> 00:00:23,699
what I'm seeing today is you know really

12
00:00:23,699 --> 00:00:27,740
really cool and speaks to me so

13
00:00:27,900 --> 00:00:29,880
I guess talking about software supply

14
00:00:29,880 --> 00:00:33,600
chain security is a really complex many

15
00:00:33,600 --> 00:00:36,059
problem many faceted issue right we have

16
00:00:36,059 --> 00:00:38,100
a lot of problems to solve all at once

17
00:00:38,100 --> 00:00:39,600
and a very little amount of time to do

18
00:00:39,600 --> 00:00:40,739
it

19
00:00:40,739 --> 00:00:42,600
and kind of a high level overview of

20
00:00:42,600 --> 00:00:43,680
some of the problems that we see

21
00:00:43,680 --> 00:00:45,420
obviously or how do I know what happened

22
00:00:45,420 --> 00:00:48,899
with this build where was it built uh

23
00:00:48,899 --> 00:00:51,480
you know who triggered a build where who

24
00:00:51,480 --> 00:00:53,760
committed to it and how do I prove that

25
00:00:53,760 --> 00:00:55,559
when I'm using it or when I want to use

26
00:00:55,559 --> 00:00:58,459
this piece of software

27
00:00:58,800 --> 00:01:00,780
next problem big problem that we have is

28
00:01:00,780 --> 00:01:03,059
how do I know if I can trust who's

29
00:01:03,059 --> 00:01:05,159
giving me this information so

30
00:01:05,159 --> 00:01:07,140
the signature on it where did it come

31
00:01:07,140 --> 00:01:09,420
from who is it and and how do I know

32
00:01:09,420 --> 00:01:12,360
that signature was actually from them

33
00:01:12,360 --> 00:01:13,799
and the problem that I'm kind of going

34
00:01:13,799 --> 00:01:16,140
to really focus on for this talk is how

35
00:01:16,140 --> 00:01:18,360
do I discover this information how do I

36
00:01:18,360 --> 00:01:19,740
actually get it to use it when I'm

37
00:01:19,740 --> 00:01:23,059
wanting to evaluate policies

38
00:01:23,640 --> 00:01:25,560
so as far as like actually generating

39
00:01:25,560 --> 00:01:29,280
this data and annotations go we have a

40
00:01:29,280 --> 00:01:31,200
bunch of really awesome work happening

41
00:01:31,200 --> 00:01:32,640
in the open source

42
00:01:32,640 --> 00:01:35,340
we have tecton chains the middle one's a

43
00:01:35,340 --> 00:01:37,020
new logo it's witness it's the project

44
00:01:37,020 --> 00:01:39,540
that I primarily work on we have salsa

45
00:01:39,540 --> 00:01:41,880
providences and this also gives us you

46
00:01:41,880 --> 00:01:43,259
know a bunch of awesome Frameworks on

47
00:01:43,259 --> 00:01:45,780
how to make decisions and really assess

48
00:01:45,780 --> 00:01:47,520
the risk assessment

49
00:01:47,520 --> 00:01:50,280
of a artifact given the information that

50
00:01:50,280 --> 00:01:52,320
you have but the one thing that all

51
00:01:52,320 --> 00:01:53,939
three of these and I'm sure many more

52
00:01:53,939 --> 00:01:55,140
projects that I did not include here

53
00:01:55,140 --> 00:01:57,780
have in common is they speak the in Toto

54
00:01:57,780 --> 00:01:59,939
language they use in Toto statements

55
00:01:59,939 --> 00:02:03,180
they create uh in Toto subjects and kind

56
00:02:03,180 --> 00:02:06,979
of wrap them up in a Toto attestations

57
00:02:07,020 --> 00:02:09,479
for the trust problem we've seen you

58
00:02:09,479 --> 00:02:11,459
know six door come out with keyless

59
00:02:11,459 --> 00:02:13,920
signing really the recore transparency

60
00:02:13,920 --> 00:02:15,239
log does it give kind of a

61
00:02:15,239 --> 00:02:17,580
non-repudiation about the the stuff

62
00:02:17,580 --> 00:02:20,280
being signed spiffy Spire for workload

63
00:02:20,280 --> 00:02:23,879
identities establishing trust there

64
00:02:23,879 --> 00:02:26,940
but what I feel we kind of have a gap in

65
00:02:26,940 --> 00:02:29,160
right now is the actual Discovery and

66
00:02:29,160 --> 00:02:31,739
usage of this information we have policy

67
00:02:31,739 --> 00:02:33,840
engines we have all this to actually

68
00:02:33,840 --> 00:02:36,239
make the decisions but we're somewhat

69
00:02:36,239 --> 00:02:39,239
lacking a way really to find it

70
00:02:39,239 --> 00:02:43,340
and kind of query and use it

71
00:02:43,620 --> 00:02:45,239
so

72
00:02:45,239 --> 00:02:48,840
Ponder a situation where we have a large

73
00:02:48,840 --> 00:02:50,580
CI pipeline we have some things that are

74
00:02:50,580 --> 00:02:52,260
happening like a manual process people

75
00:02:52,260 --> 00:02:54,480
approving things in servicenow

76
00:02:54,480 --> 00:02:56,900
tests happening

77
00:02:56,900 --> 00:02:59,340
linting testing and then finally a build

78
00:02:59,340 --> 00:03:01,200
and a deploy to you know some

79
00:03:01,200 --> 00:03:02,640
environment

80
00:03:02,640 --> 00:03:04,980
a lot of these things might happen prior

81
00:03:04,980 --> 00:03:07,739
to an artifact's creation

82
00:03:07,739 --> 00:03:09,540
and trying to link that back to the

83
00:03:09,540 --> 00:03:11,120
things that have happened before

84
00:03:11,120 --> 00:03:15,620
isn't always the easiest thing to do

85
00:03:15,659 --> 00:03:18,300
so that's kind of one of the problems I

86
00:03:18,300 --> 00:03:19,560
keep encountering when we're working on

87
00:03:19,560 --> 00:03:21,480
witness and policy enforcement is how do

88
00:03:21,480 --> 00:03:23,459
I find the code review attestation to

89
00:03:23,459 --> 00:03:26,400
prove that you know Alice approved me to

90
00:03:26,400 --> 00:03:29,180
put this in production

91
00:03:29,340 --> 00:03:31,860
so if we can find the attestation from

92
00:03:31,860 --> 00:03:34,379
when the product was created maybe we

93
00:03:34,379 --> 00:03:35,940
can use context clues from those

94
00:03:35,940 --> 00:03:38,580
attestations to find the other more

95
00:03:38,580 --> 00:03:40,379
relevant ones

96
00:03:40,379 --> 00:03:42,780
and when we start looking at this it

97
00:03:42,780 --> 00:03:45,000
kind of starts resembling a graph I have

98
00:03:45,000 --> 00:03:47,640
the attestation for when the product was

99
00:03:47,640 --> 00:03:49,980
built that gives me the commit it was

100
00:03:49,980 --> 00:03:51,959
built from I can use that to then look

101
00:03:51,959 --> 00:03:53,819
up attestations that were irrelevant to

102
00:03:53,819 --> 00:03:56,879
that commit linting testing scanning

103
00:03:56,879 --> 00:03:58,739
and I can start bringing those into my

104
00:03:58,739 --> 00:04:01,500
policy decisions

105
00:04:01,500 --> 00:04:05,400
and sorry for the the kind of rough

106
00:04:05,400 --> 00:04:07,140
graphic but this is kind of what it

107
00:04:07,140 --> 00:04:09,599
might look something like we have a

108
00:04:09,599 --> 00:04:10,739
program

109
00:04:10,739 --> 00:04:13,080
we use that digest of that program to

110
00:04:13,080 --> 00:04:15,720
look up a compile attestation that shows

111
00:04:15,720 --> 00:04:18,000
us this is how it was built this is

112
00:04:18,000 --> 00:04:19,738
where it was built and this is who

113
00:04:19,738 --> 00:04:21,660
signed that attestation saying that I

114
00:04:21,660 --> 00:04:24,300
built this on this infrastructure

115
00:04:24,300 --> 00:04:26,160
maybe that attestation might contain

116
00:04:26,160 --> 00:04:28,139
things like the commit ID to get us back

117
00:04:28,139 --> 00:04:30,479
to that code annassation one get lab

118
00:04:30,479 --> 00:04:32,400
project ID if it were built on gitlab to

119
00:04:32,400 --> 00:04:33,780
get us to maybe some deployment info

120
00:04:33,780 --> 00:04:36,780
that didn't show up for us at first or

121
00:04:36,780 --> 00:04:39,120
maybe who made the commit so we can

122
00:04:39,120 --> 00:04:40,560
start getting back to the provenance of

123
00:04:40,560 --> 00:04:43,639
the developer themselves

124
00:04:44,699 --> 00:04:48,720
so as we looked at this and and kept

125
00:04:48,720 --> 00:04:51,180
seeing this kind of graph form up around

126
00:04:51,180 --> 00:04:53,460
us we decided to go ahead and try to

127
00:04:53,460 --> 00:04:55,139
create a graph database and graph

128
00:04:55,139 --> 00:04:57,240
service to find and discover and query

129
00:04:57,240 --> 00:05:01,639
these this in Toto attestations

130
00:05:04,740 --> 00:05:06,840
so what archivist does is it takes in

131
00:05:06,840 --> 00:05:09,479
total statements and indexes them onto a

132
00:05:09,479 --> 00:05:11,820
graph using

133
00:05:11,820 --> 00:05:15,060
and which is a go framework for graph

134
00:05:15,060 --> 00:05:17,720
databases

135
00:05:18,000 --> 00:05:21,120
it exposes a graphql API so users of

136
00:05:21,120 --> 00:05:23,880
this can query it find things and kind

137
00:05:23,880 --> 00:05:25,380
of refine their queries over time to

138
00:05:25,380 --> 00:05:26,940
find more and more relevant attestations

139
00:05:26,940 --> 00:05:29,580
it pulls out specific things like what

140
00:05:29,580 --> 00:05:31,860
attestations were in that in Totowa

141
00:05:31,860 --> 00:05:34,560
station the signature is on it so we can

142
00:05:34,560 --> 00:05:35,880
look at the signatures before pulling

143
00:05:35,880 --> 00:05:37,940
the attestation

144
00:05:37,940 --> 00:05:39,479
and

145
00:05:39,479 --> 00:05:41,880
what other subjects existed on that in

146
00:05:41,880 --> 00:05:43,860
Toto at a station

147
00:05:43,860 --> 00:05:45,900
so we can then use those to kind of

148
00:05:45,900 --> 00:05:48,240
expand our Graph Search

149
00:05:48,240 --> 00:05:50,340
so it uses in total subjects as graph

150
00:05:50,340 --> 00:05:51,840
edges if you're familiar within Toto

151
00:05:51,840 --> 00:05:54,360
attestations what they all have a

152
00:05:54,360 --> 00:05:56,940
statement some subjects that describe

153
00:05:56,940 --> 00:05:59,460
what the statement is describing and

154
00:05:59,460 --> 00:06:01,380
then the statement itself which is at

155
00:06:01,380 --> 00:06:03,720
this point kind of a arbitrary amount of

156
00:06:03,720 --> 00:06:05,520
data that could be a salsa provenance it

157
00:06:05,520 --> 00:06:06,900
could be anyone else who takes some of

158
00:06:06,900 --> 00:06:08,759
these in total attestations and

159
00:06:08,759 --> 00:06:11,479
implements them

160
00:06:11,699 --> 00:06:14,460
so I have a few demos I'll show real

161
00:06:14,460 --> 00:06:16,259
quick to kind of demonstrate how we can

162
00:06:16,259 --> 00:06:18,680
use this

163
00:06:19,500 --> 00:06:22,100
all right

164
00:06:24,600 --> 00:06:27,180
so I have a simple

165
00:06:27,180 --> 00:06:28,800
main program

166
00:06:28,800 --> 00:06:30,660
all it does is print hello security con

167
00:06:30,660 --> 00:06:33,380
to the console

168
00:06:33,660 --> 00:06:35,880
and I have some commits about it or I

169
00:06:35,880 --> 00:06:39,139
have these commits here

170
00:06:39,840 --> 00:06:41,639
and what I do what I'm going to do is

171
00:06:41,639 --> 00:06:43,680
I'm going to create a witness policy

172
00:06:43,680 --> 00:06:45,479
which is describing what I expect should

173
00:06:45,479 --> 00:06:49,139
have happened when I get this binary

174
00:06:49,139 --> 00:06:51,000
I expect a step name build to happen

175
00:06:51,000 --> 00:06:52,740
that should have some materials which is

176
00:06:52,740 --> 00:06:54,300
describe all the files that were used

177
00:06:54,300 --> 00:06:56,220
during the build process

178
00:06:56,220 --> 00:06:58,319
it should have run a command and it has

179
00:06:58,319 --> 00:07:00,419
an embedded Rigo policy here that will

180
00:07:00,419 --> 00:07:02,100
let us enforce things about that command

181
00:07:02,100 --> 00:07:04,259
I'll show that here in just a second

182
00:07:04,259 --> 00:07:06,300
and it should also have some annotations

183
00:07:06,300 --> 00:07:07,740
about a product

184
00:07:07,740 --> 00:07:09,240
which will be the binary that was

185
00:07:09,240 --> 00:07:11,039
created during that build

186
00:07:11,039 --> 00:07:13,800
and the functionaries describe what

187
00:07:13,800 --> 00:07:17,039
identity we use to trust the attestation

188
00:07:17,039 --> 00:07:19,259
when we're evaluating the policy in this

189
00:07:19,259 --> 00:07:20,699
case we're just for this demo I'm using

190
00:07:20,699 --> 00:07:23,460
public Keys nothing you know fancy

191
00:07:23,460 --> 00:07:26,160
and then the next step we expect should

192
00:07:26,160 --> 00:07:28,080
be a packaging step where we're going to

193
00:07:28,080 --> 00:07:29,220
we're going to package it and create a

194
00:07:29,220 --> 00:07:31,139
tarball of that binary and then maybe

195
00:07:31,139 --> 00:07:34,680
upload it to some repo to use later and

196
00:07:34,680 --> 00:07:36,660
similarly I have an expected command

197
00:07:36,660 --> 00:07:37,860
that I'm going to a force when I'm

198
00:07:37,860 --> 00:07:40,319
evaluating this policy

199
00:07:40,319 --> 00:07:42,360
and again the function areas and then

200
00:07:42,360 --> 00:07:44,460
just the global functionaries for the

201
00:07:44,460 --> 00:07:47,299
policy itself

202
00:07:54,120 --> 00:07:55,919
so what I'm going to do real quick is

203
00:07:55,919 --> 00:07:57,539
I'm going to assign that policy we just

204
00:07:57,539 --> 00:07:58,500
looked at

205
00:07:58,500 --> 00:07:59,819
with this command so this is just

206
00:07:59,819 --> 00:08:02,759
telling witness to use a yaml config I

207
00:08:02,759 --> 00:08:04,680
have and sign the policy document we

208
00:08:04,680 --> 00:08:06,720
just looked at

209
00:08:06,720 --> 00:08:08,580
it's going to do that

210
00:08:08,580 --> 00:08:11,400
and then I'm going to wrap my go build

211
00:08:11,400 --> 00:08:14,599
with witness as well

212
00:08:15,900 --> 00:08:17,520
it's going to create this and it's going

213
00:08:17,520 --> 00:08:19,500
to store that attestation in archivist

214
00:08:19,500 --> 00:08:21,599
with some getoid that we can use to find

215
00:08:21,599 --> 00:08:22,740
later

216
00:08:22,740 --> 00:08:25,319
a getaway is just a basically a Shah of

217
00:08:25,319 --> 00:08:29,039
that file the unique identifier of it

218
00:08:29,039 --> 00:08:30,360
and the next thing I'm going to do is

219
00:08:30,360 --> 00:08:31,740
copy my

220
00:08:31,740 --> 00:08:35,000
packaging step here

221
00:08:40,080 --> 00:08:41,399
so that's going to create that tarball

222
00:08:41,399 --> 00:08:43,020
and again going to create an attestation

223
00:08:43,020 --> 00:08:46,640
that we store in archivists

224
00:08:49,920 --> 00:08:55,219
so now if I want to validate this policy

225
00:09:01,680 --> 00:09:05,959
well that's my uh my policy

226
00:09:25,560 --> 00:09:29,660
oops wrong file sorry

227
00:09:32,279 --> 00:09:34,939
oops

228
00:09:51,120 --> 00:09:52,440
this is what happens when you change

229
00:09:52,440 --> 00:09:54,180
your demo last second and mess up your

230
00:09:54,180 --> 00:09:57,560
scripts my apologies

231
00:10:01,440 --> 00:10:02,760
okay

232
00:10:02,760 --> 00:10:04,560
so now we use that policy that we

233
00:10:04,560 --> 00:10:06,240
created in that first step

234
00:10:06,240 --> 00:10:08,640
to evaluate this just this binary that

235
00:10:08,640 --> 00:10:10,200
we have and what witness did in this

236
00:10:10,200 --> 00:10:12,600
case was go to archivist with the hash

237
00:10:12,600 --> 00:10:15,420
of that file that binary and and kind of

238
00:10:15,420 --> 00:10:16,920
interrogate it to figure out what

239
00:10:16,920 --> 00:10:18,420
evidence do we have about this build

240
00:10:18,420 --> 00:10:20,640
process so it found the two different

241
00:10:20,640 --> 00:10:22,800
annotation envelopes we had generated

242
00:10:22,800 --> 00:10:24,839
prior and said this is what I use as

243
00:10:24,839 --> 00:10:27,839
evidence to say this artifact is all

244
00:10:27,839 --> 00:10:30,320
good to run

245
00:10:30,360 --> 00:10:34,580
and uh so it kind of to show

246
00:10:37,800 --> 00:10:39,480
what this looks like maybe a little bit

247
00:10:39,480 --> 00:10:42,180
is we have just a playground right now

248
00:10:42,180 --> 00:10:44,100
uh to

249
00:10:44,100 --> 00:10:46,260
kind of query into and show what the

250
00:10:46,260 --> 00:10:48,660
data in archivist looks like so we have

251
00:10:48,660 --> 00:10:50,640
this hash which is a hash of a different

252
00:10:50,640 --> 00:10:52,620
product I had created earlier I'm going

253
00:10:52,620 --> 00:10:54,180
to try to find out of stations about it

254
00:10:54,180 --> 00:10:55,200
and

255
00:10:55,200 --> 00:10:57,360
what we find here

256
00:10:57,360 --> 00:11:00,660
is we have one attestation this getoid

257
00:11:00,660 --> 00:11:02,579
we say it built it has a few different

258
00:11:02,579 --> 00:11:04,200
things in it

259
00:11:04,200 --> 00:11:07,760
and the subjects include

260
00:11:11,100 --> 00:11:12,839
a get commit

261
00:11:12,839 --> 00:11:15,779
so we found one piece of evidence about

262
00:11:15,779 --> 00:11:17,459
this attestation but we can use this git

263
00:11:17,459 --> 00:11:19,320
commit to kind of dig in a little bit

264
00:11:19,320 --> 00:11:21,680
deeper

265
00:11:22,440 --> 00:11:24,000
and if we look that up we see we find

266
00:11:24,000 --> 00:11:25,920
six more envelopes would be perhaps

267
00:11:25,920 --> 00:11:27,360
relevant data that we can use to

268
00:11:27,360 --> 00:11:28,860
continue to make decisions about this

269
00:11:28,860 --> 00:11:32,120
edit or this artifact

270
00:11:32,640 --> 00:11:34,860
and one last thing I can do to kind of

271
00:11:34,860 --> 00:11:37,620
show is

272
00:11:37,620 --> 00:11:40,560
so we have this spire server binary that

273
00:11:40,560 --> 00:11:42,240
we had built previously and I'm going to

274
00:11:42,240 --> 00:11:46,459
record it shot 256 hash

275
00:11:46,680 --> 00:11:49,019
and I'm going to use archivist control

276
00:11:49,019 --> 00:11:52,260
to Output just a rough visualization of

277
00:11:52,260 --> 00:11:53,760
the graph of evidence that it can find

278
00:11:53,760 --> 00:11:56,899
about this artifact

279
00:11:56,940 --> 00:11:58,440
so all I'm doing here is querying

280
00:11:58,440 --> 00:12:01,500
archivists it's going to Output a DOT

281
00:12:01,500 --> 00:12:04,200
file for graph from graphis which I can

282
00:12:04,200 --> 00:12:07,399
use to turn that into a PNG

283
00:12:10,260 --> 00:12:12,060
and it kind of shows the relationships

284
00:12:12,060 --> 00:12:14,339
between these attestations and what

285
00:12:14,339 --> 00:12:15,899
we're looking at

286
00:12:15,899 --> 00:12:18,300
we have you know some information about

287
00:12:18,300 --> 00:12:20,040
three different builds that happened on

288
00:12:20,040 --> 00:12:22,320
this commit maybe we have the commit

289
00:12:22,320 --> 00:12:25,620
attestation itself so whoever committed

290
00:12:25,620 --> 00:12:27,180
that would have recorded some

291
00:12:27,180 --> 00:12:29,399
attestations about themselves we have

292
00:12:29,399 --> 00:12:32,820
dependencies which records the obviously

293
00:12:32,820 --> 00:12:35,100
the dependencies of the project and kind

294
00:12:35,100 --> 00:12:37,680
of will allow us to make NSA or policy

295
00:12:37,680 --> 00:12:40,760
decisions about that later

296
00:12:44,579 --> 00:12:46,860
so kind of where we want archivists to

297
00:12:46,860 --> 00:12:49,079
go and what we really Envision for is we

298
00:12:49,079 --> 00:12:51,779
want to Archive more data right now

299
00:12:51,779 --> 00:12:53,040
we're really focusing on a total

300
00:12:53,040 --> 00:12:54,660
attestation but something we see

301
00:12:54,660 --> 00:12:56,760
frequently is

302
00:12:56,760 --> 00:12:59,399
if I have an s-bomb or if I know of a

303
00:12:59,399 --> 00:13:01,620
cve how do I find things that are

304
00:13:01,620 --> 00:13:04,680
relevant to that cve if archivists can

305
00:13:04,680 --> 00:13:08,160
archive index these s-bombs it should

306
00:13:08,160 --> 00:13:10,019
make finding those things later trivial

307
00:13:10,019 --> 00:13:12,600
this is a graphql query we can run on

308
00:13:12,600 --> 00:13:13,980
the database and we can find everything

309
00:13:13,980 --> 00:13:16,620
we know about that's affected and

310
00:13:16,620 --> 00:13:18,180
obviously improving the user experience

311
00:13:18,180 --> 00:13:19,740
right now it's obviously early in

312
00:13:19,740 --> 00:13:21,480
development where we just have

313
00:13:21,480 --> 00:13:23,519
playgrounds and demos but it's going to

314
00:13:23,519 --> 00:13:24,660
be important to kind of get this right

315
00:13:24,660 --> 00:13:27,680
for us going forward

316
00:13:28,079 --> 00:13:31,560
and I kind of ran a little fast but I

317
00:13:31,560 --> 00:13:33,600
had if there's any questions otherwise

318
00:13:33,600 --> 00:13:36,300
get archivist is available on our GitHub

319
00:13:36,300 --> 00:13:37,980
publicly and anyone's free to pull it

320
00:13:37,980 --> 00:13:40,139
down play with it break it and tell us

321
00:13:40,139 --> 00:13:42,240
about it

322
00:13:42,240 --> 00:13:44,720
yes

323
00:13:57,540 --> 00:14:00,000
yeah so link right now we're not

324
00:14:00,000 --> 00:14:02,360
currently recording it I mean we

325
00:14:02,360 --> 00:14:04,560
archivists can adjust them but it's not

326
00:14:04,560 --> 00:14:06,180
going to get kind of the more Rich data

327
00:14:06,180 --> 00:14:07,260
around it yet

328
00:14:07,260 --> 00:14:08,760
uh

329
00:14:08,760 --> 00:14:10,680
and Toto is moving toward their kind of

330
00:14:10,680 --> 00:14:13,920
generic uh attestation format with ite

331
00:14:13,920 --> 00:14:16,079
was it five or six I think so that's

332
00:14:16,079 --> 00:14:18,300
where we chose to focus on for right now

333
00:14:18,300 --> 00:14:20,279
uh but the link stuff will definitely

334
00:14:20,279 --> 00:14:21,600
still be relevant and we'll we'll

335
00:14:21,600 --> 00:14:22,860
definitely be looking at bringing that

336
00:14:22,860 --> 00:14:25,760
into archivists

337
00:14:32,040 --> 00:14:35,480
well I think that's it then

338
00:14:37,860 --> 00:14:40,380
all right well thank you

339
00:14:40,380 --> 00:14:43,450
[Applause]

