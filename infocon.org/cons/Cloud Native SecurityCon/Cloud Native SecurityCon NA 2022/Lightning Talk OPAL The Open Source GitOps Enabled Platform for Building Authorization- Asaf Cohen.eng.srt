1
00:00:00,420 --> 00:00:03,419
hello everyone I'm Assaf from permit IO

2
00:00:03,419 --> 00:00:06,060
and I'm going to talk about Oppo the

3
00:00:06,060 --> 00:00:08,460
open policy Administration layer and now

4
00:00:08,460 --> 00:00:12,179
it can help build uh

5
00:00:12,179 --> 00:00:16,160
Cloud native permissions more easily

6
00:00:19,440 --> 00:00:22,279
sorry about that

7
00:00:24,420 --> 00:00:28,019
so you just got your project to build

8
00:00:28,019 --> 00:00:30,380
in-house permissions

9
00:00:30,380 --> 00:00:32,460
but you need to understand permissions

10
00:00:32,460 --> 00:00:36,239
are hard okay so um there's a lot of

11
00:00:36,239 --> 00:00:39,260
modern challenges like microservices

12
00:00:39,260 --> 00:00:41,340
infrastructure was not what it used to

13
00:00:41,340 --> 00:00:44,520
be 10 years ago and now I cannot just

14
00:00:44,520 --> 00:00:46,200
embed permission logic into my

15
00:00:46,200 --> 00:00:48,480
application because I need to enforce

16
00:00:48,480 --> 00:00:50,940
access across many services some of them

17
00:00:50,940 --> 00:00:53,300
are third-party services as well

18
00:00:53,300 --> 00:00:55,579
modeling permissions is really difficult

19
00:00:55,579 --> 00:00:59,039
while all developers almost know what

20
00:00:59,039 --> 00:01:01,620
role-based access control is eventually

21
00:01:01,620 --> 00:01:03,120
you'd want to move to more complex

22
00:01:03,120 --> 00:01:05,640
systems let's say you want to get access

23
00:01:05,640 --> 00:01:08,580
based on the user location

24
00:01:08,580 --> 00:01:10,380
you cannot do that with war base Access

25
00:01:10,380 --> 00:01:11,460
Control

26
00:01:11,460 --> 00:01:13,439
you probably want to move to actually

27
00:01:13,439 --> 00:01:15,600
with based access control or if you want

28
00:01:15,600 --> 00:01:18,479
to get access based on ownership more

29
00:01:18,479 --> 00:01:19,860
fine-grained permissions you probably

30
00:01:19,860 --> 00:01:21,560
need relationship-based access control

31
00:01:21,560 --> 00:01:26,759
so this kind of challenges are

32
00:01:26,759 --> 00:01:29,400
are difficult because these systems are

33
00:01:29,400 --> 00:01:31,439
difficult to grasp and are difficult to

34
00:01:31,439 --> 00:01:33,960
implement and finally there are mounting

35
00:01:33,960 --> 00:01:36,420
security and compliance standards that

36
00:01:36,420 --> 00:01:38,400
we need to adhere to we all like our

37
00:01:38,400 --> 00:01:40,619
privacy but it comes with a pricing

38
00:01:40,619 --> 00:01:42,780
implementation we need built-in auditing

39
00:01:42,780 --> 00:01:45,180
we need checks and balances for example

40
00:01:45,180 --> 00:01:48,360
I want to be able to say who can even

41
00:01:48,360 --> 00:01:51,240
change the policy inside my application

42
00:01:51,240 --> 00:01:56,520
so of C4 of C this is also important

43
00:01:56,520 --> 00:01:58,439
um and all of these challenges are the

44
00:01:58,439 --> 00:02:01,079
reason that broken access control is the

45
00:02:01,079 --> 00:02:05,939
top uh top issue in our top 10 so 94

46
00:02:05,939 --> 00:02:08,160
percent of applications were tested for

47
00:02:08,160 --> 00:02:10,800
broken Access Control

48
00:02:10,800 --> 00:02:13,319
and we want to avoid these pitfalls in

49
00:02:13,319 --> 00:02:16,680
our implementation so the first one that

50
00:02:16,680 --> 00:02:19,980
we see most I'm sorry most commonly in

51
00:02:19,980 --> 00:02:21,660
coupling application logic and

52
00:02:21,660 --> 00:02:23,879
authorization logic

53
00:02:23,879 --> 00:02:26,520
um you may want to start with just like

54
00:02:26,520 --> 00:02:29,099
admin and not admin for permissions and

55
00:02:29,099 --> 00:02:31,980
that's okay but if you encode this logic

56
00:02:31,980 --> 00:02:34,080
in an if branch in your code eventually

57
00:02:34,080 --> 00:02:36,300
you'll get this code block and while

58
00:02:36,300 --> 00:02:38,700
this is a like completely fine for

59
00:02:38,700 --> 00:02:40,860
monolith applications when you get to

60
00:02:40,860 --> 00:02:42,180
microservices

61
00:02:42,180 --> 00:02:44,879
it completely breaks because

62
00:02:44,879 --> 00:02:47,400
you'd need to duplicate that logic

63
00:02:47,400 --> 00:02:49,560
across all your services and duplication

64
00:02:49,560 --> 00:02:52,680
needs to drift and drift leads to

65
00:02:52,680 --> 00:02:54,300
um security incidents so we don't want

66
00:02:54,300 --> 00:02:56,280
that we want to put everything in one

67
00:02:56,280 --> 00:02:59,340
microservice in one place

68
00:02:59,340 --> 00:03:01,319
the second kind of thing that we see is

69
00:03:01,319 --> 00:03:03,120
mixing up authentication and

70
00:03:03,120 --> 00:03:06,599
authorization so with implementations

71
00:03:06,599 --> 00:03:08,599
where people just take

72
00:03:08,599 --> 00:03:11,640
claims from OCTA and just put them in

73
00:03:11,640 --> 00:03:14,099
Json web tokens and just check that in

74
00:03:14,099 --> 00:03:16,560
code and that is fine but it has a few

75
00:03:16,560 --> 00:03:19,200
downsides so organization roles are not

76
00:03:19,200 --> 00:03:21,060
the same as application roles we find

77
00:03:21,060 --> 00:03:23,280
the head of I.T I shouldn't have admin

78
00:03:23,280 --> 00:03:25,620
access to the financing app so some

79
00:03:25,620 --> 00:03:27,959
translation from organization roles to

80
00:03:27,959 --> 00:03:29,879
application roles needs to be made

81
00:03:29,879 --> 00:03:31,200
and

82
00:03:31,200 --> 00:03:32,099
um

83
00:03:32,099 --> 00:03:34,560
another thing is that jots tokens are

84
00:03:34,560 --> 00:03:36,659
not storage they are limited by the HTTP

85
00:03:36,659 --> 00:03:39,120
header size So eventually when you'll

86
00:03:39,120 --> 00:03:41,000
have more fine-grained access

87
00:03:41,000 --> 00:03:46,500
uh you will exceed this limit and lastly

88
00:03:46,500 --> 00:03:47,159
um

89
00:03:47,159 --> 00:03:49,260
this is not flexible if you want to

90
00:03:49,260 --> 00:03:51,239
change the permissions for a user

91
00:03:51,239 --> 00:03:53,400
mid-session because the user has agility

92
00:03:53,400 --> 00:03:56,099
logs in everything's fine next time you

93
00:03:56,099 --> 00:03:57,840
re logs in this will be applied but this

94
00:03:57,840 --> 00:04:00,060
is not flexible enough

95
00:04:00,060 --> 00:04:02,099
and finally

96
00:04:02,099 --> 00:04:04,860
not planning ahead so this is completely

97
00:04:04,860 --> 00:04:06,920
fine like starting with something simple

98
00:04:06,920 --> 00:04:09,780
but let's hope you do better and the app

99
00:04:09,780 --> 00:04:12,299
will grow and more demands will come so

100
00:04:12,299 --> 00:04:15,239
demands from customers you'll have uh

101
00:04:15,239 --> 00:04:16,918
this really great deal that could be

102
00:04:16,918 --> 00:04:18,298
great for the company with an Enterprise

103
00:04:18,298 --> 00:04:20,399
customer and they need finer Grant

104
00:04:20,399 --> 00:04:21,660
permissions and now you need to build

105
00:04:21,660 --> 00:04:23,660
that into your application really fast

106
00:04:23,660 --> 00:04:26,759
or you want to expose API Keys through

107
00:04:26,759 --> 00:04:28,259
your application you need API Key

108
00:04:28,259 --> 00:04:29,720
Management

109
00:04:29,720 --> 00:04:33,419
all of these demands will come and you

110
00:04:33,419 --> 00:04:34,979
want to build the system flexible enough

111
00:04:34,979 --> 00:04:37,139
so that it can grow over time without

112
00:04:37,139 --> 00:04:39,780
being so painful to rewrite from scratch

113
00:04:39,780 --> 00:04:41,759
every time

114
00:04:41,759 --> 00:04:44,600
ah

115
00:04:45,060 --> 00:04:47,100
so let's talk about the best practices

116
00:04:47,100 --> 00:04:49,320
really briefly you want to decouple

117
00:04:49,320 --> 00:04:52,139
policy from code you want to be able to

118
00:04:52,139 --> 00:04:56,220
respond uh to events real time okay you

119
00:04:56,220 --> 00:04:58,199
want to have the github's workflow for

120
00:04:58,199 --> 00:05:00,360
policy you want back office for

121
00:05:00,360 --> 00:05:02,100
stakeholders and you want interfaces for

122
00:05:02,100 --> 00:05:04,380
customers and I will go

123
00:05:04,380 --> 00:05:08,699
um and I will go over them one by one so

124
00:05:08,699 --> 00:05:11,759
first decoupling policy from code we

125
00:05:11,759 --> 00:05:14,639
already agree this is a great idea and a

126
00:05:14,639 --> 00:05:16,320
really cool project that most people

127
00:05:16,320 --> 00:05:19,139
know right now is oppa this is the most

128
00:05:19,139 --> 00:05:20,880
adopted policy agent currently in the

129
00:05:20,880 --> 00:05:24,360
market and opal lets you express policy

130
00:05:24,360 --> 00:05:28,020
as Rego code and data is Json and this

131
00:05:28,020 --> 00:05:30,180
is great you can just create all the

132
00:05:30,180 --> 00:05:31,919
policy in the organization in Rego and

133
00:05:31,919 --> 00:05:33,320
just manage that

134
00:05:33,320 --> 00:05:37,039
oppa does have one downside it was

135
00:05:37,039 --> 00:05:39,419
originally made for kubernetes admission

136
00:05:39,419 --> 00:05:43,100
control and it cannot actually respond

137
00:05:43,100 --> 00:05:45,720
to events in real time so for

138
00:05:45,720 --> 00:05:48,060
applications this is breaking and that

139
00:05:48,060 --> 00:05:50,039
is why we made Oppo

140
00:05:50,039 --> 00:05:52,740
so opal is an Administration layer for

141
00:05:52,740 --> 00:05:54,740
Oppa that gives you two main things

142
00:05:54,740 --> 00:05:58,080
first gitops and second real-time

143
00:05:58,080 --> 00:06:00,960
updates so I'll go over them with opal

144
00:06:00,960 --> 00:06:04,080
each Opel client manages a single Opera

145
00:06:04,080 --> 00:06:07,139
agent and then it can be managed by an

146
00:06:07,139 --> 00:06:09,960
opal server that can run in a cluster so

147
00:06:09,960 --> 00:06:12,180
the oppos server's job is to track a git

148
00:06:12,180 --> 00:06:13,199
repo

149
00:06:13,199 --> 00:06:16,380
and serve that policy from there it also

150
00:06:16,380 --> 00:06:18,539
can push real-time updates like Json

151
00:06:18,539 --> 00:06:21,780
patches to the Oppo client and from that

152
00:06:21,780 --> 00:06:25,800
to the policy agent and finally Opel

153
00:06:25,800 --> 00:06:28,740
client can actually access data that the

154
00:06:28,740 --> 00:06:30,840
Oppo server cannot you can send an

155
00:06:30,840 --> 00:06:33,180
instruction to Oppo client even if they

156
00:06:33,180 --> 00:06:35,340
are in a separate Network to bring data

157
00:06:35,340 --> 00:06:37,919
from let's say an in-house database that

158
00:06:37,919 --> 00:06:39,180
shouldn't be exposed to an outside

159
00:06:39,180 --> 00:06:41,039
Network

160
00:06:41,039 --> 00:06:43,860
um opal is extensible it has a plugin

161
00:06:43,860 --> 00:06:46,380
mechanism called Fetchers so we already

162
00:06:46,380 --> 00:06:50,400
have Fetchers for ldap mongodb stripe

163
00:06:50,400 --> 00:06:51,780
Etc and

164
00:06:51,780 --> 00:06:53,340
um you can use them if you want

165
00:06:53,340 --> 00:06:55,500
everything is open source

166
00:06:55,500 --> 00:06:56,460
um

167
00:06:56,460 --> 00:06:58,919
so oppa gives you the ability to manage

168
00:06:58,919 --> 00:07:03,000
policy in git why is this so good

169
00:07:03,000 --> 00:07:07,139
yes so with Git Ops for policy your

170
00:07:07,139 --> 00:07:09,600
policy is auditable you can see who made

171
00:07:09,600 --> 00:07:11,940
the changes were the authors you can see

172
00:07:11,940 --> 00:07:14,400
all this you can use science commits and

173
00:07:14,400 --> 00:07:16,020
the entire history is available to you

174
00:07:16,020 --> 00:07:19,080
it's immutable rolling back is easy it's

175
00:07:19,080 --> 00:07:21,840
super easy and also it gives you the

176
00:07:21,840 --> 00:07:24,180
power of CI CD you can have tests you

177
00:07:24,180 --> 00:07:27,180
can have approvals with PRS for

178
00:07:27,180 --> 00:07:28,560
something sensitive you can have

179
00:07:28,560 --> 00:07:31,620
multiple approvals and you can have

180
00:07:31,620 --> 00:07:34,380
quality signals so with oppa you can

181
00:07:34,380 --> 00:07:37,139
have policies that are not as performant

182
00:07:37,139 --> 00:07:39,720
as other policies there is a meaning how

183
00:07:39,720 --> 00:07:41,819
you write your policy so you can just

184
00:07:41,819 --> 00:07:44,400
have a code signal in your CI CD that

185
00:07:44,400 --> 00:07:46,979
says if the policy is too slow it will

186
00:07:46,979 --> 00:07:50,400
affect my app SLA and please let me know

187
00:07:50,400 --> 00:07:52,139
um so all that power is available to you

188
00:07:52,139 --> 00:07:53,880
if you manage all your policy agents

189
00:07:53,880 --> 00:07:55,680
with opal

190
00:07:55,680 --> 00:07:58,280
uh

191
00:08:01,380 --> 00:08:03,419
so if you want to talk more about

192
00:08:03,419 --> 00:08:06,660
obviously uh please come find us at

193
00:08:06,660 --> 00:08:09,240
Boost su25 we're also available for

194
00:08:09,240 --> 00:08:11,639
slack and uh Oppo is available at

195
00:08:11,639 --> 00:08:15,780
opel.ac it's apache2 so uh thank you

196
00:08:15,780 --> 00:08:17,580
very much

197
00:08:17,580 --> 00:08:20,859
[Applause]

