1
00:00:00,000 --> 00:00:01,199
awesome

2
00:00:01,199 --> 00:00:03,540
good afternoon everyone so today we're

3
00:00:03,540 --> 00:00:05,400
going to talk about runtime attestations

4
00:00:05,400 --> 00:00:07,440
so that's you know how we bring

5
00:00:07,440 --> 00:00:09,660
observability into otherwise opaque

6
00:00:09,660 --> 00:00:11,400
container builds

7
00:00:11,400 --> 00:00:13,500
so a quick introduction

8
00:00:13,500 --> 00:00:15,719
um I'm parth so I'm a co-founder at

9
00:00:15,719 --> 00:00:18,060
kosari and kusari is a supply chain

10
00:00:18,060 --> 00:00:20,400
security startup and our focus is you

11
00:00:20,400 --> 00:00:22,080
know building tools that help developers

12
00:00:22,080 --> 00:00:24,539
create secure artifacts but at the same

13
00:00:24,539 --> 00:00:26,220
time answer those hard questions of

14
00:00:26,220 --> 00:00:28,279
exactly what are they ingesting

15
00:00:28,279 --> 00:00:30,240
previously to that I was a Solutions

16
00:00:30,240 --> 00:00:31,980
architect that worked in regulated

17
00:00:31,980 --> 00:00:34,440
Industries as well as commercial and I'm

18
00:00:34,440 --> 00:00:36,180
also a maintainer on various open source

19
00:00:36,180 --> 00:00:38,700
projects such as intuitive attestations

20
00:00:38,700 --> 00:00:42,120
in Toto golang Fresca and guac I'm going

21
00:00:42,120 --> 00:00:43,440
to hand it off to my colleague treepod

22
00:00:43,440 --> 00:00:45,480
to continue the presentation

23
00:00:45,480 --> 00:00:47,940
thanks thanks Bob hi everyone good

24
00:00:47,940 --> 00:00:50,120
afternoon my name is

25
00:00:50,120 --> 00:00:52,980
I'm A Cloud software architect at Intel

26
00:00:52,980 --> 00:00:55,500
I'm currently leading a few core

27
00:00:55,500 --> 00:00:57,780
services at Intel developer Cloud that

28
00:00:57,780 --> 00:01:00,000
we announced last month and security is

29
00:01:00,000 --> 00:01:01,140
one of them

30
00:01:01,140 --> 00:01:04,319
and I'm also motivated to address and go

31
00:01:04,319 --> 00:01:06,000
on the Journey of addressing security

32
00:01:06,000 --> 00:01:07,320
challenges in the open source

33
00:01:07,320 --> 00:01:08,880
communities

34
00:01:08,880 --> 00:01:11,159
so talking about security

35
00:01:11,159 --> 00:01:14,700
right so almost every discussion we have

36
00:01:14,700 --> 00:01:16,320
leads to software supply chain security

37
00:01:16,320 --> 00:01:19,560
and for good reasons and yes we will be

38
00:01:19,560 --> 00:01:20,880
talking about that in this particular

39
00:01:20,880 --> 00:01:23,179
talk

40
00:01:23,220 --> 00:01:26,159
so let's start in some familiar uh place

41
00:01:26,159 --> 00:01:27,960
right this is a

42
00:01:27,960 --> 00:01:31,380
the attack Factor that's come from salsa

43
00:01:31,380 --> 00:01:33,900
I think most of you have seen it many

44
00:01:33,900 --> 00:01:36,740
times it is

45
00:01:36,740 --> 00:01:39,000
peculiarity with it it shows the

46
00:01:39,000 --> 00:01:41,340
vulnerability all along the way from

47
00:01:41,340 --> 00:01:43,619
starting from developer when they are

48
00:01:43,619 --> 00:01:45,119
building their code and committing to

49
00:01:45,119 --> 00:01:47,579
the source repository to the way how we

50
00:01:47,579 --> 00:01:49,680
are building it how we are ingesting the

51
00:01:49,680 --> 00:01:51,360
dependencies and how we are packaging it

52
00:01:51,360 --> 00:01:54,420
all the tools all the processes they are

53
00:01:54,420 --> 00:01:56,700
vulnerable for compromises which is a

54
00:01:56,700 --> 00:01:59,460
very uh risky thing

55
00:01:59,460 --> 00:02:01,200
and then how do we start addressing

56
00:02:01,200 --> 00:02:02,579
these challenges so there is another

57
00:02:02,579 --> 00:02:05,399
good characterization that I see again

58
00:02:05,399 --> 00:02:08,340
coming from salsa is we need to think of

59
00:02:08,340 --> 00:02:10,318
our defense shield into three different

60
00:02:10,318 --> 00:02:12,959
dimensions right it consists of how do

61
00:02:12,959 --> 00:02:15,300
we secure our code how do we secure our

62
00:02:15,300 --> 00:02:17,340
dependencies and how do we secure our

63
00:02:17,340 --> 00:02:19,560
build and there are different material

64
00:02:19,560 --> 00:02:22,080
levels in which how we can address these

65
00:02:22,080 --> 00:02:23,220
challenges

66
00:02:23,220 --> 00:02:25,440
in this particular talk we are going to

67
00:02:25,440 --> 00:02:27,060
focus on the build aspect of this

68
00:02:27,060 --> 00:02:29,640
particular defense Shield

69
00:02:29,640 --> 00:02:31,920
and it's not like we are starting from

70
00:02:31,920 --> 00:02:33,959
scratch so if you see in last few years

71
00:02:33,959 --> 00:02:35,819
last couple of years we have come a long

72
00:02:35,819 --> 00:02:38,400
way right again going back to the same

73
00:02:38,400 --> 00:02:41,459
threat model that we just saw we have

74
00:02:41,459 --> 00:02:43,500
added a lot of security controls along

75
00:02:43,500 --> 00:02:45,540
the along various Dimensions like when

76
00:02:45,540 --> 00:02:47,819
the developer is committing their

77
00:02:47,819 --> 00:02:50,459
changes they can sign their commits at

78
00:02:50,459 --> 00:02:52,500
code repository we have multi-factor

79
00:02:52,500 --> 00:02:54,120
authentication secure configurations

80
00:02:54,120 --> 00:02:58,019
enabled for build we have the desired

81
00:02:58,019 --> 00:02:59,459
state of formatting and reproducible

82
00:02:59,459 --> 00:03:02,099
build when we ingest dependencies we

83
00:03:02,099 --> 00:03:05,300
have vulnerability scanner and the some

84
00:03:05,300 --> 00:03:07,500
maintainability maintainability checks

85
00:03:07,500 --> 00:03:09,540
through scorecard that we are doing we

86
00:03:09,540 --> 00:03:12,060
are pipeline signing security so we are

87
00:03:12,060 --> 00:03:14,400
basically marching on this journey of

88
00:03:14,400 --> 00:03:16,319
improving our security

89
00:03:16,319 --> 00:03:19,319
and now let's talk about the the

90
00:03:19,319 --> 00:03:21,060
Hermetic field and the reports will

91
00:03:21,060 --> 00:03:23,459
build so build aspect of this so this is

92
00:03:23,459 --> 00:03:26,040
again desired properties and we are not

93
00:03:26,040 --> 00:03:29,159
there yet right so we need uh with this

94
00:03:29,159 --> 00:03:30,300
is a journey that we need to basically

95
00:03:30,300 --> 00:03:32,940
go together

96
00:03:32,940 --> 00:03:35,340
now zooming into the why secret why

97
00:03:35,340 --> 00:03:37,260
security or build is important so we'll

98
00:03:37,260 --> 00:03:39,420
basically zoom into the what build

99
00:03:39,420 --> 00:03:42,060
process essentially comprise of so if

100
00:03:42,060 --> 00:03:43,920
you think of a typical typical build

101
00:03:43,920 --> 00:03:46,319
process it starts with some source code

102
00:03:46,319 --> 00:03:48,420
right source code is input to it and the

103
00:03:48,420 --> 00:03:50,099
source code might be what source could

104
00:03:50,099 --> 00:03:52,080
we write like python or Java code we

105
00:03:52,080 --> 00:03:54,060
have some dependency manifest like

106
00:03:54,060 --> 00:03:56,640
requirement.txt for package log.json and

107
00:03:56,640 --> 00:03:58,319
then we have some build recipe which

108
00:03:58,319 --> 00:04:00,720
could be a Docker file and then this is

109
00:04:00,720 --> 00:04:03,540
input to our build process where we have

110
00:04:03,540 --> 00:04:06,540
multiple phases where this build happens

111
00:04:06,540 --> 00:04:08,400
so first thing is we we set up the build

112
00:04:08,400 --> 00:04:10,739
environment we set up our base images we

113
00:04:10,739 --> 00:04:14,040
install our build tools then for any

114
00:04:14,040 --> 00:04:16,079
unresolved dependencies the the

115
00:04:16,079 --> 00:04:17,820
dependencies which are not pinned in the

116
00:04:17,820 --> 00:04:19,798
Manifest those gets resolved to their

117
00:04:19,798 --> 00:04:21,600
correct versions

118
00:04:21,600 --> 00:04:24,479
the dependencies their Registries get

119
00:04:24,479 --> 00:04:26,280
resolved in lot of cases a lot of

120
00:04:26,280 --> 00:04:28,639
organizations have their private

121
00:04:28,639 --> 00:04:31,500
package Registries like artifactory so

122
00:04:31,500 --> 00:04:33,660
this this gets resolved at runtime at

123
00:04:33,660 --> 00:04:35,520
during the build process and then

124
00:04:35,520 --> 00:04:36,960
finally these dependencies are

125
00:04:36,960 --> 00:04:39,240
downloaded they will compile this of our

126
00:04:39,240 --> 00:04:41,340
application and we package them

127
00:04:41,340 --> 00:04:43,680
so there are so when we talk about build

128
00:04:43,680 --> 00:04:46,440
right it comprises of whole spectrum and

129
00:04:46,440 --> 00:04:48,780
things can go bad in any of this uh

130
00:04:48,780 --> 00:04:51,300
different phases of this build

131
00:04:51,300 --> 00:04:54,180
so what things we are trying to address

132
00:04:54,180 --> 00:04:56,100
here right so when this build is

133
00:04:56,100 --> 00:04:56,940
happening

134
00:04:56,940 --> 00:04:59,400
uh we want to know that what build tools

135
00:04:59,400 --> 00:05:00,960
are being used right we don't have

136
00:05:00,960 --> 00:05:03,000
visibility into it because most of these

137
00:05:03,000 --> 00:05:05,400
phases that I mentioned they are Dynamic

138
00:05:05,400 --> 00:05:07,380
and they are non-deterministic we cannot

139
00:05:07,380 --> 00:05:09,060
determine what the package will get

140
00:05:09,060 --> 00:05:11,280
resolved to at build time where the

141
00:05:11,280 --> 00:05:14,540
package registry or my package registry

142
00:05:14,540 --> 00:05:17,100
mirror will get resolved to so these are

143
00:05:17,100 --> 00:05:19,199
all Dynamic and they might change based

144
00:05:19,199 --> 00:05:20,460
on build to build right based on the

145
00:05:20,460 --> 00:05:22,680
input to the input configuration that we

146
00:05:22,680 --> 00:05:23,759
provide

147
00:05:23,759 --> 00:05:26,759
so we need to know we need to have this

148
00:05:26,759 --> 00:05:28,380
visibility like when the build is

149
00:05:28,380 --> 00:05:30,000
happening all these stages are happening

150
00:05:30,000 --> 00:05:32,940
what build tools are being used uh

151
00:05:32,940 --> 00:05:34,620
whether my building environment has been

152
00:05:34,620 --> 00:05:36,539
compromised again we don't want to go in

153
00:05:36,539 --> 00:05:38,340
detail like but the solar wind right we

154
00:05:38,340 --> 00:05:41,340
are all heard it many times last couple

155
00:05:41,340 --> 00:05:42,960
of years so we don't want to pick on

156
00:05:42,960 --> 00:05:45,060
them but yeah that is essentially what

157
00:05:45,060 --> 00:05:47,880
we are trying to address here like if we

158
00:05:47,880 --> 00:05:50,100
our building environment are compromised

159
00:05:50,100 --> 00:05:52,020
then we need some visibility if we can

160
00:05:52,020 --> 00:05:54,419
uh someone something that can signal us

161
00:05:54,419 --> 00:05:55,500
right

162
00:05:55,500 --> 00:05:57,780
uh where my dependencies are getting

163
00:05:57,780 --> 00:06:00,240
resolved from are there any intermediary

164
00:06:00,240 --> 00:06:01,979
artifact getting produced and what are

165
00:06:01,979 --> 00:06:04,620
those right and again we talk about

166
00:06:04,620 --> 00:06:07,380
hermetic bill which is the uh which is a

167
00:06:07,380 --> 00:06:09,419
Holy Grail that we want to achieve but

168
00:06:09,419 --> 00:06:11,880
if you are building it and it one of the

169
00:06:11,880 --> 00:06:13,560
condition or the one of the requirement

170
00:06:13,560 --> 00:06:15,660
is it doesn't it should not pull any

171
00:06:15,660 --> 00:06:17,820
dependency from internet right so how do

172
00:06:17,820 --> 00:06:19,139
we ensure that when the build is

173
00:06:19,139 --> 00:06:20,639
happening how do we ensure or who can

174
00:06:20,639 --> 00:06:22,680
attest that this particular build is

175
00:06:22,680 --> 00:06:24,960
hermetic so those are the challenges

176
00:06:24,960 --> 00:06:26,280
that we are trying to address in this

177
00:06:26,280 --> 00:06:28,020
particular work

178
00:06:28,020 --> 00:06:31,860
so what we try to do right so what was

179
00:06:31,860 --> 00:06:33,600
our approach so we said okay we have

180
00:06:33,600 --> 00:06:35,520
some build servers we have this build

181
00:06:35,520 --> 00:06:37,199
process which is running on some build

182
00:06:37,199 --> 00:06:39,360
server which can be kubernetes worker

183
00:06:39,360 --> 00:06:41,100
nodes which can be genetic energy and so

184
00:06:41,100 --> 00:06:42,479
GitHub Runner

185
00:06:42,479 --> 00:06:44,639
what about we put this monitor in

186
00:06:44,639 --> 00:06:46,979
between our build actions build process

187
00:06:46,979 --> 00:06:49,560
and our build server and what this

188
00:06:49,560 --> 00:06:52,380
monitor essentially need to do it will

189
00:06:52,380 --> 00:06:53,699
collect the trace it will collect the

190
00:06:53,699 --> 00:06:55,139
trace of all the network connections

191
00:06:55,139 --> 00:06:56,340
that are happening it will collect the

192
00:06:56,340 --> 00:06:58,380
trace of all the file operations any

193
00:06:58,380 --> 00:07:00,060
credit operations that are happening and

194
00:07:00,060 --> 00:07:02,400
the process executions what processes

195
00:07:02,400 --> 00:07:04,020
are getting executed what inputs were

196
00:07:04,020 --> 00:07:07,819
there and how this project exited

197
00:07:07,819 --> 00:07:10,020
and we don't want to collect this

198
00:07:10,020 --> 00:07:11,880
information just for the sake of it

199
00:07:11,880 --> 00:07:13,620
right as if we don't have enough data

200
00:07:13,620 --> 00:07:16,080
already in our supply chain

201
00:07:16,080 --> 00:07:18,479
uh idea essentially our objective

202
00:07:18,479 --> 00:07:20,699
essential is to to generate some

203
00:07:20,699 --> 00:07:22,860
semantic understanding of this data when

204
00:07:22,860 --> 00:07:25,380
we collect the trace then make this

205
00:07:25,380 --> 00:07:27,060
stress understand this straight path

206
00:07:27,060 --> 00:07:29,099
this stress and create some attestation

207
00:07:29,099 --> 00:07:30,599
that we can make some statement about

208
00:07:30,599 --> 00:07:32,940
this build process that this build

209
00:07:32,940 --> 00:07:34,740
process is hermetic or this build

210
00:07:34,740 --> 00:07:37,319
process made this ah connections or this

211
00:07:37,319 --> 00:07:39,240
it modified this set of files it

212
00:07:39,240 --> 00:07:41,639
executed this list of processes and then

213
00:07:41,639 --> 00:07:43,199
we can build some policies and we can

214
00:07:43,199 --> 00:07:45,060
make some decisions out of it right so

215
00:07:45,060 --> 00:07:47,520
our idea behind this monitor is to

216
00:07:47,520 --> 00:07:49,440
create that registration which which can

217
00:07:49,440 --> 00:07:51,300
be actionable we can take some actions

218
00:07:51,300 --> 00:07:53,639
on top of it

219
00:07:53,639 --> 00:07:56,160
so how do we started when we started the

220
00:07:56,160 --> 00:07:59,400
design we had different choices and as I

221
00:07:59,400 --> 00:08:01,680
think yesterday Cole was also mentioning

222
00:08:01,680 --> 00:08:04,740
about this so we started with the the

223
00:08:04,740 --> 00:08:07,319
common the estrus piece dress where we

224
00:08:07,319 --> 00:08:10,500
actually started tracing this uh wrap

225
00:08:10,500 --> 00:08:12,840
our build process build actions into

226
00:08:12,840 --> 00:08:14,819
these tools and we started tracing them

227
00:08:14,819 --> 00:08:17,819
we call it in band because now we are

228
00:08:17,819 --> 00:08:19,800
essentially we are the parent process

229
00:08:19,800 --> 00:08:21,539
that are invoking all these build

230
00:08:21,539 --> 00:08:22,860
actions

231
00:08:22,860 --> 00:08:25,979
but then we suddenly find right with

232
00:08:25,979 --> 00:08:27,720
this approach we need to change all our

233
00:08:27,720 --> 00:08:30,060
existing build tools build actions to

234
00:08:30,060 --> 00:08:33,659
wrap them under this uh protocol

235
00:08:33,659 --> 00:08:36,360
it was hard to nice and then this this

236
00:08:36,360 --> 00:08:38,880
tools if you run the P dress it collects

237
00:08:38,880 --> 00:08:40,440
the information about a process right

238
00:08:40,440 --> 00:08:43,200
and we need to add a lot of decorations

239
00:08:43,200 --> 00:08:44,880
around it like this process belong to

240
00:08:44,880 --> 00:08:46,680
this part this part belong to this Tech

241
00:08:46,680 --> 00:08:48,600
this stacked on task or these actions

242
00:08:48,600 --> 00:08:50,940
and it belonged to this pipeline that

243
00:08:50,940 --> 00:08:52,800
all external metadata collection and

244
00:08:52,800 --> 00:08:55,500
mapping that was very hard then we say

245
00:08:55,500 --> 00:08:57,779
okay what about we do something out of

246
00:08:57,779 --> 00:09:00,180
band so we said okay we start with a BPF

247
00:09:00,180 --> 00:09:03,000
which will run as the agent it will

248
00:09:03,000 --> 00:09:05,339
collect this stress all the trades that

249
00:09:05,339 --> 00:09:06,240
we need

250
00:09:06,240 --> 00:09:08,640
and give us this uh information collect

251
00:09:08,640 --> 00:09:10,800
this information transparently

252
00:09:10,800 --> 00:09:13,260
right again the challenge was the same

253
00:09:13,260 --> 00:09:15,360
the contextual information gathering was

254
00:09:15,360 --> 00:09:17,339
a challenge we couldn't get that pretty

255
00:09:17,339 --> 00:09:19,680
easily there was a lack of policy

256
00:09:19,680 --> 00:09:21,959
support right we couldn't customize what

257
00:09:21,959 --> 00:09:23,760
information need to be collected what we

258
00:09:23,760 --> 00:09:26,220
need to turn on and off so we couldn't

259
00:09:26,220 --> 00:09:27,360
do that

260
00:09:27,360 --> 00:09:31,320
then uh last clip on this project was an

261
00:09:31,320 --> 00:09:33,959
Australian it was like a new kid on the

262
00:09:33,959 --> 00:09:35,880
blog that everyone was talking about and

263
00:09:35,880 --> 00:09:37,680
we said okay why not okay let's explore

264
00:09:37,680 --> 00:09:39,600
this what this tetragon is and then we

265
00:09:39,600 --> 00:09:41,279
suddenly find okay this is actually the

266
00:09:41,279 --> 00:09:44,160
right tool for the that we we are we can

267
00:09:44,160 --> 00:09:46,560
leverage and we can build on this but

268
00:09:46,560 --> 00:09:48,480
again this whole solution is not based

269
00:09:48,480 --> 00:09:50,160
on tetragon it can be applied with any

270
00:09:50,160 --> 00:09:52,920
other tracing tool and as the path will

271
00:09:52,920 --> 00:09:56,279
go in detail uh we are basically talking

272
00:09:56,279 --> 00:09:58,440
about one particular implementation here

273
00:09:58,440 --> 00:10:00,240
right and the good thing about tetragon

274
00:10:00,240 --> 00:10:02,040
is it is kubernetes is aware we need to

275
00:10:02,040 --> 00:10:03,540
collect the trace it already has the

276
00:10:03,540 --> 00:10:06,360
additional metadata where it can we can

277
00:10:06,360 --> 00:10:09,660
associate this context and then it has

278
00:10:09,660 --> 00:10:11,519
automated policy control

279
00:10:11,519 --> 00:10:13,440
right so we said okay this is something

280
00:10:13,440 --> 00:10:15,420
that we can go with

281
00:10:15,420 --> 00:10:18,000
and then once we monitor the data once

282
00:10:18,000 --> 00:10:20,600
we collect the trace uh our next

283
00:10:20,600 --> 00:10:24,000
objective was how do we format this data

284
00:10:24,000 --> 00:10:25,920
what do we do with it right so we said

285
00:10:25,920 --> 00:10:28,019
okay we need some attestation format and

286
00:10:28,019 --> 00:10:31,560
for this our options was very limited it

287
00:10:31,560 --> 00:10:32,820
was actually a single option we said

288
00:10:32,820 --> 00:10:34,920
okay we know the in total is the right

289
00:10:34,920 --> 00:10:37,320
approach we will go and create an

290
00:10:37,320 --> 00:10:38,640
intertor station

291
00:10:38,640 --> 00:10:41,100
and then we also proposed a new

292
00:10:41,100 --> 00:10:42,779
predicate type for runtime registration

293
00:10:42,779 --> 00:10:44,519
this is something some work that we have

294
00:10:44,519 --> 00:10:45,839
been doing

295
00:10:45,839 --> 00:10:48,360
uh so this is the approach that we the

296
00:10:48,360 --> 00:10:49,980
design choices and the approach that we

297
00:10:49,980 --> 00:10:51,120
are taking

298
00:10:51,120 --> 00:10:54,120
and uh if you think of as I mentioned

299
00:10:54,120 --> 00:10:56,459
right so this runtime monitor is

300
00:10:56,459 --> 00:10:58,860
happening when your your pipeline is

301
00:10:58,860 --> 00:10:59,579
running

302
00:10:59,579 --> 00:11:02,399
so if you if you want to see where this

303
00:11:02,399 --> 00:11:04,620
particular runtime registration is

304
00:11:04,620 --> 00:11:06,240
happening during the scope of your

305
00:11:06,240 --> 00:11:09,839
pipeline so this this particular picture

306
00:11:09,839 --> 00:11:12,300
it shows the life cycle of a pipeline

307
00:11:12,300 --> 00:11:14,160
right you start with the composition we

308
00:11:14,160 --> 00:11:17,100
compose our pipeline from a lot of Open

309
00:11:17,100 --> 00:11:19,920
Source component we install our setup

310
00:11:19,920 --> 00:11:22,260
our pipeline we the pipeline gets

311
00:11:22,260 --> 00:11:24,779
triggered by some events uh GitHub

312
00:11:24,779 --> 00:11:27,180
events or manual trigger and then it is

313
00:11:27,180 --> 00:11:28,680
executing

314
00:11:28,680 --> 00:11:30,180
and this is where the runtime

315
00:11:30,180 --> 00:11:32,399
registration Monitor and attestation is

316
00:11:32,399 --> 00:11:34,800
happening right and the the questions

317
00:11:34,800 --> 00:11:37,079
that we are trying to answer is how the

318
00:11:37,079 --> 00:11:38,940
artifact is built right what is

319
00:11:38,940 --> 00:11:40,260
happening when the artifact is getting

320
00:11:40,260 --> 00:11:43,260
built now there are other Solutions uh

321
00:11:43,260 --> 00:11:44,519
that are creating the salsa

322
00:11:44,519 --> 00:11:46,380
registrations for build like taked on

323
00:11:46,380 --> 00:11:48,779
chains or some GitHub actions that you

324
00:11:48,779 --> 00:11:50,880
have probably heard of those happens

325
00:11:50,880 --> 00:11:52,800
after the pipeline completions right so

326
00:11:52,800 --> 00:11:54,899
once the pipeline finishes those

327
00:11:54,899 --> 00:11:57,420
registrations get created which tells

328
00:11:57,420 --> 00:11:59,700
you what task actually ran for that

329
00:11:59,700 --> 00:12:01,860
particular your artifact or your image

330
00:12:01,860 --> 00:12:04,440
for instance that get built the runtime

331
00:12:04,440 --> 00:12:06,180
registration is happening one step one

332
00:12:06,180 --> 00:12:08,279
stage before this uh this Saul's

333
00:12:08,279 --> 00:12:09,600
attestation that are getting generated

334
00:12:09,600 --> 00:12:13,860
and again as you will see the how these

335
00:12:13,860 --> 00:12:15,660
two technologies merge together

336
00:12:15,660 --> 00:12:19,740
and to talk more I will invite past to

337
00:12:19,740 --> 00:12:22,579
talk more about it

338
00:12:33,600 --> 00:12:36,360
trip I was saying is we wanted to use

339
00:12:36,360 --> 00:12:39,480
tecton pipelines so for the general

340
00:12:39,480 --> 00:12:41,160
audience if you're not aware of what

341
00:12:41,160 --> 00:12:43,320
clecton pipelines is is that it's a CI

342
00:12:43,320 --> 00:12:46,079
CD Cloud native solution it builds

343
00:12:46,079 --> 00:12:48,000
everything in terms of containers and

344
00:12:48,000 --> 00:12:50,279
it's very easy because it's uh it builds

345
00:12:50,279 --> 00:12:52,500
everything in a femoral container that

346
00:12:52,500 --> 00:12:54,720
can be destroyed and isolated it also

347
00:12:54,720 --> 00:12:56,940
has the ability with tecton chains to

348
00:12:56,940 --> 00:12:58,920
create attestations right it creates all

349
00:12:58,920 --> 00:13:00,779
statistications signs all satisations

350
00:13:00,779 --> 00:13:04,079
that you can push into oci and um in

351
00:13:04,079 --> 00:13:06,300
other directions so we started off with

352
00:13:06,300 --> 00:13:08,579
this tool in mind because it's because

353
00:13:08,579 --> 00:13:09,899
right we're going to be working with

354
00:13:09,899 --> 00:13:12,540
tetragon tetragon is kubernetes aware

355
00:13:12,540 --> 00:13:15,120
tecton is based on kubernetes kubernetes

356
00:13:15,120 --> 00:13:17,100
is built on kubernetes it does

357
00:13:17,100 --> 00:13:19,019
everything within pods and containers so

358
00:13:19,019 --> 00:13:20,880
you can utilize those two technologies

359
00:13:20,880 --> 00:13:22,440
together to create our runtime

360
00:13:22,440 --> 00:13:23,940
attestation

361
00:13:23,940 --> 00:13:27,000
so like sharepa was saying tetragon is a

362
00:13:27,000 --> 00:13:29,040
tool that we chose in this case it's an

363
00:13:29,040 --> 00:13:31,200
ebpf solution right because it's very it

364
00:13:31,200 --> 00:13:34,680
observes uh using the PDF technology

365
00:13:34,680 --> 00:13:36,420
um we don't want to limit to we don't

366
00:13:36,420 --> 00:13:38,279
want to fix two tetragon right so we

367
00:13:38,279 --> 00:13:39,540
want to make the runtime attestation

368
00:13:39,540 --> 00:13:40,920
very generic

369
00:13:40,920 --> 00:13:43,440
but in our proof of concept we chose

370
00:13:43,440 --> 00:13:45,120
tetragon because of the benefits that it

371
00:13:45,120 --> 00:13:47,579
provides out of the box at the same time

372
00:13:47,579 --> 00:13:49,260
right because it's kubernetes aware it

373
00:13:49,260 --> 00:13:51,300
can see the pods you can see the

374
00:13:51,300 --> 00:13:52,860
processes running within the Pods at the

375
00:13:52,860 --> 00:13:54,180
same time right it can see file access

376
00:13:54,180 --> 00:13:56,339
network connections right you can see a

377
00:13:56,339 --> 00:13:57,660
lot of those things that we do want to

378
00:13:57,660 --> 00:13:59,820
collect

379
00:13:59,820 --> 00:14:01,320
so we don't want to introduce another

380
00:14:01,320 --> 00:14:03,360
controller right the kubernetes space is

381
00:14:03,360 --> 00:14:04,860
already full of controllers we don't

382
00:14:04,860 --> 00:14:06,300
want to introduce another one so what we

383
00:14:06,300 --> 00:14:08,100
decided is that let's let's just have

384
00:14:08,100 --> 00:14:10,860
the tecton change controller be the one

385
00:14:10,860 --> 00:14:12,480
that creates that attestation for us

386
00:14:12,480 --> 00:14:13,980
right tetragon is going to collect all

387
00:14:13,980 --> 00:14:16,019
the logs for us communicate that over to

388
00:14:16,019 --> 00:14:17,459
techton chains and it's going to create

389
00:14:17,459 --> 00:14:19,920
that uh sign at a station for the

390
00:14:19,920 --> 00:14:21,480
runtime station and then push that into

391
00:14:21,480 --> 00:14:23,100
any kind of direction right tecton

392
00:14:23,100 --> 00:14:25,079
chains already has the ability to create

393
00:14:25,079 --> 00:14:27,060
attestations it already can do science

394
00:14:27,060 --> 00:14:28,200
right you can already signed

395
00:14:28,200 --> 00:14:30,300
attestations push to oci or push to a

396
00:14:30,300 --> 00:14:32,459
document database it has that ability so

397
00:14:32,459 --> 00:14:34,380
why not utilize all those capabilities

398
00:14:34,380 --> 00:14:36,060
instead of starting from scratch so

399
00:14:36,060 --> 00:14:38,760
that's what we decided to do

400
00:14:38,760 --> 00:14:40,740
so let's get into a real world example

401
00:14:40,740 --> 00:14:43,100
of this

402
00:14:54,720 --> 00:14:56,940
so real quick starting off I want to

403
00:14:56,940 --> 00:14:58,500
show off that this is a simple

404
00:14:58,500 --> 00:15:00,720
kubernetes cluster on you can see all

405
00:15:00,720 --> 00:15:02,699
that's running is the tecton chains like

406
00:15:02,699 --> 00:15:05,220
I mentioned before the tecton pipeline

407
00:15:05,220 --> 00:15:06,720
controller which has two components the

408
00:15:06,720 --> 00:15:08,579
controller as well as a web hook and

409
00:15:08,579 --> 00:15:10,380
then tetragon itself right those are the

410
00:15:10,380 --> 00:15:11,639
only pieces that are running I'm not

411
00:15:11,639 --> 00:15:13,019
we're not introducing anything extra

412
00:15:13,019 --> 00:15:15,360
besides what's already coming out of the

413
00:15:15,360 --> 00:15:17,519
box with tetragon or tetragon as well as

414
00:15:17,519 --> 00:15:20,360
tekton

415
00:15:21,420 --> 00:15:22,860
so what I'm going to be showing off here

416
00:15:22,860 --> 00:15:24,899
in this pipeline basically is that it's

417
00:15:24,899 --> 00:15:26,519
a multi-step Pipeline and it's going to

418
00:15:26,519 --> 00:15:28,139
go through and it's going to clone down

419
00:15:28,139 --> 00:15:30,000
the repo it's going to build the

420
00:15:30,000 --> 00:15:31,980
artifact it's going to scan it it's

421
00:15:31,980 --> 00:15:33,720
using using gripe it's going to create

422
00:15:33,720 --> 00:15:35,279
an s-bomb and so forth it's going to do

423
00:15:35,279 --> 00:15:37,139
all these different steps and at the

424
00:15:37,139 --> 00:15:38,699
same time what's happening is that

425
00:15:38,699 --> 00:15:40,500
tetragon in the background is actually

426
00:15:40,500 --> 00:15:42,779
capturing all the processes that are

427
00:15:42,779 --> 00:15:44,820
running for each one of these tasks if

428
00:15:44,820 --> 00:15:46,620
you remember before I said that tetragon

429
00:15:46,620 --> 00:15:48,300
is kubernetes aware right it can see

430
00:15:48,300 --> 00:15:51,000
specific processes within a task each

431
00:15:51,000 --> 00:15:52,680
one of these tasks are running

432
00:15:52,680 --> 00:15:54,839
individually in each each one of the

433
00:15:54,839 --> 00:15:57,180
individual pots so they can collect all

434
00:15:57,180 --> 00:15:58,920
the processes that are running and we

435
00:15:58,920 --> 00:16:01,019
can go and actually analyze them in the

436
00:16:01,019 --> 00:16:03,540
future kind of thing so it helps us

437
00:16:03,540 --> 00:16:06,000
oops sorry about that

438
00:16:06,000 --> 00:16:08,820
um so in the future it helps us go uh

439
00:16:08,820 --> 00:16:10,620
see exactly what's happening what

440
00:16:10,620 --> 00:16:12,540
happened in each one of his individual

441
00:16:12,540 --> 00:16:14,519
tests and make policies based off of it

442
00:16:14,519 --> 00:16:16,620
so you can see it just finished

443
00:16:16,620 --> 00:16:18,360
um all the all the different steps in

444
00:16:18,360 --> 00:16:20,339
this pipeline completed so now let's

445
00:16:20,339 --> 00:16:23,839
take a look at the actual result

446
00:16:25,680 --> 00:16:27,839
so this is the build step right the

447
00:16:27,839 --> 00:16:29,639
build task that actually ran for this

448
00:16:29,639 --> 00:16:31,980
specific Pipeline and you can see the

449
00:16:31,980 --> 00:16:33,540
main point is what I want what I want

450
00:16:33,540 --> 00:16:35,040
the audience to focus on is these four

451
00:16:35,040 --> 00:16:37,500
things here the pipeline or I'm sorry

452
00:16:37,500 --> 00:16:40,199
the payload is the salsa attestation

453
00:16:40,199 --> 00:16:42,000
that tecton chains already generates

454
00:16:42,000 --> 00:16:44,220
right so that's that's something that's

455
00:16:44,220 --> 00:16:46,079
not that we're generating that sector on

456
00:16:46,079 --> 00:16:47,820
chains doing that as well as a signature

457
00:16:47,820 --> 00:16:49,620
down here the new thing that we are

458
00:16:49,620 --> 00:16:51,420
adding is these two pieces right here

459
00:16:51,420 --> 00:16:53,399
which is the runtime payload as well as

460
00:16:53,399 --> 00:16:55,500
a runtime signature like I said uh

461
00:16:55,500 --> 00:16:57,959
pecton chains has the ability to write

462
00:16:57,959 --> 00:16:59,639
tetragon is collecting this information

463
00:16:59,639 --> 00:17:01,560
tecton chains will take that information

464
00:17:01,560 --> 00:17:03,839
and create the attestation for us and

465
00:17:03,839 --> 00:17:06,359
it's appending that to this uh Into The

466
00:17:06,359 --> 00:17:08,699
annotation here in this task run as a

467
00:17:08,699 --> 00:17:10,740
label you can pull this down and

468
00:17:10,740 --> 00:17:12,540
actually view it so we can in this case

469
00:17:12,540 --> 00:17:13,980
right it's it's actually getting pushed

470
00:17:13,980 --> 00:17:16,740
into the actual kubernetes object we can

471
00:17:16,740 --> 00:17:18,720
push this into oci or some other object

472
00:17:18,720 --> 00:17:20,220
in the future if you wanted to and

473
00:17:20,220 --> 00:17:21,839
because it's signed right we can go back

474
00:17:21,839 --> 00:17:24,419
and use cosine to go verify yes this is

475
00:17:24,419 --> 00:17:26,160
signed by my private key and that is

476
00:17:26,160 --> 00:17:28,520
valid

477
00:17:30,299 --> 00:17:32,040
so taking a look at the attestation

478
00:17:32,040 --> 00:17:33,900
itself that it generated so what I did

479
00:17:33,900 --> 00:17:35,400
is that I cut this down for size right

480
00:17:35,400 --> 00:17:37,200
because it generates a lot of data and

481
00:17:37,200 --> 00:17:39,059
I'll talk about that you know why what

482
00:17:39,059 --> 00:17:41,039
we want to do about that but for now

483
00:17:41,039 --> 00:17:43,140
kind of talking through what this what

484
00:17:43,140 --> 00:17:44,580
the actual annotation actually looks

485
00:17:44,580 --> 00:17:46,919
like right so like srupa said we started

486
00:17:46,919 --> 00:17:49,679
with the in total attestation format so

487
00:17:49,679 --> 00:17:51,179
you can see that the subject is up here

488
00:17:51,179 --> 00:17:52,980
what artifact that it built right the

489
00:17:52,980 --> 00:17:55,080
pipeline built and then down here is a

490
00:17:55,080 --> 00:17:56,580
specific right starting from down here

491
00:17:56,580 --> 00:17:59,160
the predicate type is a specific at the

492
00:17:59,160 --> 00:18:01,260
runtime attestation itself so the first

493
00:18:01,260 --> 00:18:03,000
thing we see up here is the monitor ID

494
00:18:03,000 --> 00:18:04,919
and like I was saying before is that we

495
00:18:04,919 --> 00:18:07,860
wanted to make sure that we made this at

496
00:18:07,860 --> 00:18:10,260
a station very generic so we can choose

497
00:18:10,260 --> 00:18:12,059
different monitors right it does not

498
00:18:12,059 --> 00:18:13,500
have to be touch or gone it can be you

499
00:18:13,500 --> 00:18:15,660
know P Trace s-trace some other tool in

500
00:18:15,660 --> 00:18:17,520
the future kind of thing and then down

501
00:18:17,520 --> 00:18:19,020
here is this specific thing that's

502
00:18:19,020 --> 00:18:21,059
actually building this artifact right

503
00:18:21,059 --> 00:18:23,400
building the statistation so in this

504
00:18:23,400 --> 00:18:25,080
case right those tecton chains but again

505
00:18:25,080 --> 00:18:26,580
it could be something else it could be

506
00:18:26,580 --> 00:18:29,580
GitHub GitHub actions or gitlab or

507
00:18:29,580 --> 00:18:31,799
something else coming down line and then

508
00:18:31,799 --> 00:18:33,660
this is the actual

509
00:18:33,660 --> 00:18:36,360
task run object that we are actually

510
00:18:36,360 --> 00:18:38,039
looking at that that actually collected

511
00:18:38,039 --> 00:18:39,600
these logs for

512
00:18:39,600 --> 00:18:42,000
down here you see tracing policies so

513
00:18:42,000 --> 00:18:44,400
what this kind of does is out of the box

514
00:18:44,400 --> 00:18:47,700
tetragon has some capabilities right but

515
00:18:47,700 --> 00:18:49,679
if you wanted to if you want to include

516
00:18:49,679 --> 00:18:51,419
more like for example if you wanted to

517
00:18:51,419 --> 00:18:53,220
include network connections right if you

518
00:18:53,220 --> 00:18:54,900
wanted to trace network connections or

519
00:18:54,900 --> 00:18:56,700
if you wanted to check file access and

520
00:18:56,700 --> 00:18:58,919
such you have to give it a tracing

521
00:18:58,919 --> 00:19:01,200
policy that says yes enable this and

522
00:19:01,200 --> 00:19:02,580
look at this information and capture

523
00:19:02,580 --> 00:19:04,260
this information so what this is doing

524
00:19:04,260 --> 00:19:07,260
is okay we also want to know exactly how

525
00:19:07,260 --> 00:19:09,419
the tool itself right tetragon or some

526
00:19:09,419 --> 00:19:11,280
other tool is configured and how is it

527
00:19:11,280 --> 00:19:12,840
capturing that information or what was

528
00:19:12,840 --> 00:19:15,240
it supposed to capture so for example

529
00:19:15,240 --> 00:19:17,220
right if I don't see this tracing policy

530
00:19:17,220 --> 00:19:19,080
if I don't see this TCP connect policy

531
00:19:19,080 --> 00:19:21,299
here right if I don't see this one then

532
00:19:21,299 --> 00:19:23,340
I know that okay it didn't collect any

533
00:19:23,340 --> 00:19:24,600
network connection right it didn't

534
00:19:24,600 --> 00:19:26,400
collect any kind of network process logs

535
00:19:26,400 --> 00:19:28,320
for me so that can't say for certain

536
00:19:28,320 --> 00:19:30,299
that is hermetic because now it's not

537
00:19:30,299 --> 00:19:32,460
collecting anyways but if I see that

538
00:19:32,460 --> 00:19:34,140
this tracing policy existed there's a

539
00:19:34,140 --> 00:19:37,320
TCP connect policy right and if it did

540
00:19:37,320 --> 00:19:39,000
not collect any kind of network logs

541
00:19:39,000 --> 00:19:40,620
then I can say for for certain that it

542
00:19:40,620 --> 00:19:42,240
was a hermetic build

543
00:19:42,240 --> 00:19:43,980
so that's why we want to capture this

544
00:19:43,980 --> 00:19:46,020
tracing policies

545
00:19:46,020 --> 00:19:47,940
so down here if I scroll down is the

546
00:19:47,940 --> 00:19:49,919
actual processes themselves right so we

547
00:19:49,919 --> 00:19:51,539
kind of broke them out into event types

548
00:19:51,539 --> 00:19:53,640
if there were file access types exit

549
00:19:53,640 --> 00:19:55,440
exit entering

550
00:19:55,440 --> 00:19:57,059
um you know what kind of binary was it

551
00:19:57,059 --> 00:19:58,620
being used at the time and what kind of

552
00:19:58,620 --> 00:19:59,940
arguments are we taking and if there

553
00:19:59,940 --> 00:20:02,400
were privileged calls themselves so if I

554
00:20:02,400 --> 00:20:03,900
keep scrolling down you can see an

555
00:20:03,900 --> 00:20:06,720
actual example of because I had that

556
00:20:06,720 --> 00:20:09,660
tape the the network policy active right

557
00:20:09,660 --> 00:20:11,220
you can see there's a TCP send message

558
00:20:11,220 --> 00:20:13,320
here and it did actually send message to

559
00:20:13,320 --> 00:20:15,120
some kind of public IP address right so

560
00:20:15,120 --> 00:20:17,280
right away I know that this process was

561
00:20:17,280 --> 00:20:19,559
not hermetic and I can't make that claim

562
00:20:19,559 --> 00:20:21,678
anymore

563
00:20:26,039 --> 00:20:27,059
foreign

564
00:20:27,059 --> 00:20:29,220
so what do we do with all this

565
00:20:29,220 --> 00:20:30,900
information like I was saying like it's

566
00:20:30,900 --> 00:20:32,580
information overload I had to cut down

567
00:20:32,580 --> 00:20:34,500
the size of that attestation because it

568
00:20:34,500 --> 00:20:36,299
was pretty massive right so it seems

569
00:20:36,299 --> 00:20:37,740
like okay it's going to give us a lot of

570
00:20:37,740 --> 00:20:39,660
information back but it's collecting

571
00:20:39,660 --> 00:20:42,120
information for information sake like we

572
00:20:42,120 --> 00:20:42,960
need to do something with this

573
00:20:42,960 --> 00:20:45,660
information right so because they're one

574
00:20:45,660 --> 00:20:47,160
time attestations and logs themselves

575
00:20:47,160 --> 00:20:48,720
are pretty massive right they can end up

576
00:20:48,720 --> 00:20:50,940
being 500 megabytes they can be you know

577
00:20:50,940 --> 00:20:52,380
they might contain confidential

578
00:20:52,380 --> 00:20:53,940
information that maybe companies don't

579
00:20:53,940 --> 00:20:55,860
want to distribute or they're even hard

580
00:20:55,860 --> 00:20:57,240
to distribute because they're so massive

581
00:20:57,240 --> 00:20:58,559
right they're 500 megabytes or something

582
00:20:58,559 --> 00:21:01,080
so what do you do instead so we're

583
00:21:01,080 --> 00:21:03,600
actually in the talk uh in the in Toto

584
00:21:03,600 --> 00:21:04,919
attestations group we're actually in the

585
00:21:04,919 --> 00:21:07,080
talks of maybe using you know the

586
00:21:07,080 --> 00:21:08,460
software supply chain attribute

587
00:21:08,460 --> 00:21:10,799
Integrity otherwise known as sky and

588
00:21:10,799 --> 00:21:13,200
kind of having and you know for example

589
00:21:13,200 --> 00:21:14,520
in here you can see that there's an

590
00:21:14,520 --> 00:21:16,320
attribute that says it's hermetic right

591
00:21:16,320 --> 00:21:18,600
so saying like Okay this artifact was

592
00:21:18,600 --> 00:21:21,120
built this subject right here oops oh

593
00:21:21,120 --> 00:21:23,100
sorry about that this artifact here was

594
00:21:23,100 --> 00:21:25,620
built and is built in a hermetic process

595
00:21:25,620 --> 00:21:28,440
and and the evidence that says so is

596
00:21:28,440 --> 00:21:31,020
this the runtime attestation that we

597
00:21:31,020 --> 00:21:32,700
generated that's stored somewhere else

598
00:21:32,700 --> 00:21:34,260
right that could be stored in some kind

599
00:21:34,260 --> 00:21:36,360
of other public data database and that

600
00:21:36,360 --> 00:21:37,919
you could go access if you wanted to

601
00:21:37,919 --> 00:21:39,059
manually check

602
00:21:39,059 --> 00:21:41,640
uh but what what we do instead let's say

603
00:21:41,640 --> 00:21:43,380
for example in the future is that tecton

604
00:21:43,380 --> 00:21:45,900
chains right it generates right it goes

605
00:21:45,900 --> 00:21:47,940
through the runtime logs to check to see

606
00:21:47,940 --> 00:21:49,200
if there are any kind of TCP connect

607
00:21:49,200 --> 00:21:51,179
calls or anything being made

608
00:21:51,179 --> 00:21:52,500
um it checks to see that the tracing

609
00:21:52,500 --> 00:21:54,059
policy was actually active yes it's

610
00:21:54,059 --> 00:21:55,860
supposed to collect Network logs I

611
00:21:55,860 --> 00:21:57,840
didn't see any kind of network logs then

612
00:21:57,840 --> 00:21:59,520
I can be for certain that it is a

613
00:21:59,520 --> 00:22:00,840
hermetic build so I can create this

614
00:22:00,840 --> 00:22:03,539
smaller attestation and use this instead

615
00:22:03,539 --> 00:22:04,980
and distribute this out with my artifact

616
00:22:04,980 --> 00:22:08,179
and push it into oci

617
00:22:09,000 --> 00:22:10,559
and in the future we're thinking about

618
00:22:10,559 --> 00:22:12,960
incorporating this into guac right grock

619
00:22:12,960 --> 00:22:14,760
is graph for understanding artifact

620
00:22:14,760 --> 00:22:16,679
composition so you can see from this

621
00:22:16,679 --> 00:22:18,840
diagram it's you can see the artifact in

622
00:22:18,840 --> 00:22:20,480
the middle which is that orange piece

623
00:22:20,480 --> 00:22:22,500
you can see there are two attestations

624
00:22:22,500 --> 00:22:23,940
you can see there's two lines pointing

625
00:22:23,940 --> 00:22:25,440
inward Square stations whereas the salt

626
00:22:25,440 --> 00:22:26,820
satisstation as well as the runtime

627
00:22:26,820 --> 00:22:28,620
adaptation as you can see it was built

628
00:22:28,620 --> 00:22:30,900
by a monitor to buy so what guac we're

629
00:22:30,900 --> 00:22:32,880
trying to do with is basically having

630
00:22:32,880 --> 00:22:34,260
all this kind of information right like

631
00:22:34,260 --> 00:22:35,940
I said we have this information now what

632
00:22:35,940 --> 00:22:37,980
do we do with this information so now we

633
00:22:37,980 --> 00:22:39,539
want to check you know for example I

634
00:22:39,539 --> 00:22:41,640
want to have a policy that says I only

635
00:22:41,640 --> 00:22:43,799
want to make sure that I I run any kind

636
00:22:43,799 --> 00:22:45,900
of artifact that was built hermetically

637
00:22:45,900 --> 00:22:48,059
in my production environment that I can

638
00:22:48,059 --> 00:22:49,980
go query for this kind of information

639
00:22:49,980 --> 00:22:52,559
and then it can it gives us gives me

640
00:22:52,559 --> 00:22:54,480
back with confidence saying like yes I

641
00:22:54,480 --> 00:22:55,679
saw there's an annotation associated

642
00:22:55,679 --> 00:22:57,000
with it there's a runtime attestation

643
00:22:57,000 --> 00:22:59,400
associated with it and I can I can now

644
00:22:59,400 --> 00:23:01,380
run this in my production environment

645
00:23:01,380 --> 00:23:03,780
because it meets all those policies and

646
00:23:03,780 --> 00:23:05,100
I'm not going to go too much into detail

647
00:23:05,100 --> 00:23:06,539
but you can take a look my colleagues

648
00:23:06,539 --> 00:23:08,159
are going to give a talk about this on

649
00:23:08,159 --> 00:23:10,200
Thursday uh there's a QR code you can

650
00:23:10,200 --> 00:23:12,059
scan but this talk is going to be on

651
00:23:12,059 --> 00:23:13,200
Thursday if you want to learn more about

652
00:23:13,200 --> 00:23:15,179
this

653
00:23:15,179 --> 00:23:17,280
so the road forward for this is that we

654
00:23:17,280 --> 00:23:20,100
definitely want to make that so we have

655
00:23:20,100 --> 00:23:21,840
a predicate proposal in place right now

656
00:23:21,840 --> 00:23:25,260
in Toto in total attestations repo it's

657
00:23:25,260 --> 00:23:26,940
currently in draft but we want to make

658
00:23:26,940 --> 00:23:29,640
it we want to make it more generic so at

659
00:23:29,640 --> 00:23:31,260
this point I think we're looking for

660
00:23:31,260 --> 00:23:33,659
Community feedback involvement from

661
00:23:33,659 --> 00:23:35,640
others to see exactly okay what other

662
00:23:35,640 --> 00:23:38,039
information do we want to capture and

663
00:23:38,039 --> 00:23:39,600
does it Encompass everything that we

664
00:23:39,600 --> 00:23:42,419
need so we're working on that piece for

665
00:23:42,419 --> 00:23:44,820
the specific proof of concept that we're

666
00:23:44,820 --> 00:23:47,460
working on there's the one of the things

667
00:23:47,460 --> 00:23:49,080
I was working on is getting the tetragon

668
00:23:49,080 --> 00:23:50,700
policies so that tracing policy that I

669
00:23:50,700 --> 00:23:53,280
showed earlier that was a quick quick

670
00:23:53,280 --> 00:23:56,460
code change that I did but basically we

671
00:23:56,460 --> 00:23:58,380
want a formal PR that's going to be put

672
00:23:58,380 --> 00:24:00,480
in that kind of gives you more

673
00:24:00,480 --> 00:24:02,039
information in a structured format of

674
00:24:02,039 --> 00:24:04,320
exactly what configuration tetragon is

675
00:24:04,320 --> 00:24:06,120
set up with so that's that that's that

676
00:24:06,120 --> 00:24:08,520
proposal as well as formalizing the

677
00:24:08,520 --> 00:24:10,200
change right so change so I showed you

678
00:24:10,200 --> 00:24:11,700
the change integration with tetragon

679
00:24:11,700 --> 00:24:14,640
push that informally into tecton chains

680
00:24:14,640 --> 00:24:16,020
so that people can start are utilizing

681
00:24:16,020 --> 00:24:18,179
it and then lastly write the guac

682
00:24:18,179 --> 00:24:19,679
integration so we can use this

683
00:24:19,679 --> 00:24:22,500
information to create policies and then

684
00:24:22,500 --> 00:24:24,840
use that for governance

685
00:24:24,840 --> 00:24:27,539
so a quick recap right so we want to

686
00:24:27,539 --> 00:24:29,880
have visibility into the build so we

687
00:24:29,880 --> 00:24:31,440
wanted to use you know we wanted to

688
00:24:31,440 --> 00:24:32,880
integrate with existing tools we don't

689
00:24:32,880 --> 00:24:34,260
want to introduce anything new so we can

690
00:24:34,260 --> 00:24:37,020
use tetragon tecton chains to create the

691
00:24:37,020 --> 00:24:38,940
signed runtime attestation that we can

692
00:24:38,940 --> 00:24:41,159
use and then take that information and

693
00:24:41,159 --> 00:24:43,860
so that we can generate this uh the

694
00:24:43,860 --> 00:24:45,419
attribute Integrity right that's that

695
00:24:45,419 --> 00:24:48,240
sky at a station that we can use to

696
00:24:48,240 --> 00:24:50,039
check to see yes if this is hermetic

697
00:24:50,039 --> 00:24:51,720
because the runtime out of session said

698
00:24:51,720 --> 00:24:53,820
so and here is the evidence and here's

699
00:24:53,820 --> 00:24:55,260
the evidence for the runtime and you can

700
00:24:55,260 --> 00:24:59,000
go query it manually if you want to

701
00:24:59,340 --> 00:25:01,860
so definitely get involved we have our

702
00:25:01,860 --> 00:25:04,320
our own slack channel in the open open

703
00:25:04,320 --> 00:25:07,260
ssf runtime attestations and you know

704
00:25:07,260 --> 00:25:08,760
here's our Twitter handle so definitely

705
00:25:08,760 --> 00:25:10,980
contact us if you have any questions or

706
00:25:10,980 --> 00:25:12,419
if you have any comments or if you want

707
00:25:12,419 --> 00:25:15,860
to collaborate more thank you

708
00:25:18,240 --> 00:25:19,980
any questions thank you very much anyone

709
00:25:19,980 --> 00:25:22,080
have any questions

710
00:25:22,080 --> 00:25:24,779
one over there

711
00:25:24,779 --> 00:25:27,440
I'm running

712
00:25:28,080 --> 00:25:30,600
and real quick before I forget we do

713
00:25:30,600 --> 00:25:31,919
have T-shirts so if you guys want to

714
00:25:31,919 --> 00:25:34,320
pick up a cool kusari t-shirt see or see

715
00:25:34,320 --> 00:25:35,760
my colleague in the back and we'll get

716
00:25:35,760 --> 00:25:38,520
you get you that great yeah great talk

717
00:25:38,520 --> 00:25:40,140
very interesting stuff

718
00:25:40,140 --> 00:25:43,080
um I I like the Hermetic build part of

719
00:25:43,080 --> 00:25:45,480
it and there's also a lot of other ways

720
00:25:45,480 --> 00:25:46,740
that people have talked about doing

721
00:25:46,740 --> 00:25:48,480
things with build systems to try to

722
00:25:48,480 --> 00:25:50,400
protect them better like for instance

723
00:25:50,400 --> 00:25:53,820
reproducible builds or having some kind

724
00:25:53,820 --> 00:25:56,520
of Hardware root of trust that you use

725
00:25:56,520 --> 00:25:57,900
on your build system and stuff like this

726
00:25:57,900 --> 00:25:59,760
and I'm just wondering if you've thought

727
00:25:59,760 --> 00:26:01,559
about would that use the same mechanism

728
00:26:01,559 --> 00:26:03,960
that you're planning uh that you're

729
00:26:03,960 --> 00:26:05,640
proposing here or would you have

730
00:26:05,640 --> 00:26:07,200
separate mechanisms for them for some

731
00:26:07,200 --> 00:26:08,460
reason

732
00:26:08,460 --> 00:26:10,740
yeah so I think for a reproducer bill

733
00:26:10,740 --> 00:26:12,539
builds like a sheep I was saying we

734
00:26:12,539 --> 00:26:14,100
definitely use this mechanism right

735
00:26:14,100 --> 00:26:16,320
because we can again go through and

736
00:26:16,320 --> 00:26:18,360
validate that yes all the same processes

737
00:26:18,360 --> 00:26:20,039
ran for two separate bills if they were

738
00:26:20,039 --> 00:26:21,779
running um to validate that they were

739
00:26:21,779 --> 00:26:23,580
producible so there are definitely more

740
00:26:23,580 --> 00:26:25,200
use cases for this right in this case we

741
00:26:25,200 --> 00:26:26,580
chose stormtic because I think it makes

742
00:26:26,580 --> 00:26:28,620
a lot it's easy to connect with and easy

743
00:26:28,620 --> 00:26:30,299
to understand but definitely there are

744
00:26:30,299 --> 00:26:31,500
definitely more use cases that we want

745
00:26:31,500 --> 00:26:33,779
to explore in the future with this

746
00:26:33,779 --> 00:26:35,760
any other questions

747
00:26:35,760 --> 00:26:38,539
right over here

748
00:26:42,179 --> 00:26:44,279
so there was a presentation yesterday on

749
00:26:44,279 --> 00:26:47,580
testify SEC archivist yes so how does

750
00:26:47,580 --> 00:26:49,620
this compare and contrast with what so

751
00:26:49,620 --> 00:26:51,779
Cole and uh Mikhail are actually working

752
00:26:51,779 --> 00:26:53,940
with us so they were just on a call with

753
00:26:53,940 --> 00:26:56,039
us last week um so they are also going

754
00:26:56,039 --> 00:26:58,260
to take this um so we are going to like

755
00:26:58,260 --> 00:27:00,120
we're working together on this in terms

756
00:27:00,120 --> 00:27:01,919
of we want to formalize this attestation

757
00:27:01,919 --> 00:27:03,960
format right the predicate type so that

758
00:27:03,960 --> 00:27:06,240
they can also produce the same type so

759
00:27:06,240 --> 00:27:07,500
we're we're going to work in

760
00:27:07,500 --> 00:27:08,580
collaboration so that's what I was

761
00:27:08,580 --> 00:27:10,020
saying so we want to make this a

762
00:27:10,020 --> 00:27:11,760
standard runtime attestation that people

763
00:27:11,760 --> 00:27:13,799
can use in other contexts like he's

764
00:27:13,799 --> 00:27:15,659
using it using um you know he's actually

765
00:27:15,659 --> 00:27:17,460
using tetragon in this case right but

766
00:27:17,460 --> 00:27:19,200
you can and he's using another his own

767
00:27:19,200 --> 00:27:21,000
witness tool right so it doesn't have to

768
00:27:21,000 --> 00:27:23,039
be chains and tetragon it could be

769
00:27:23,039 --> 00:27:25,020
something else and this and everyone

770
00:27:25,020 --> 00:27:26,580
kind of creates a runtime attestation

771
00:27:26,580 --> 00:27:29,760
that everybody can benefit from

772
00:27:29,760 --> 00:27:32,220
okay anyone else

773
00:27:32,220 --> 00:27:35,640
going once going twice great well thank

774
00:27:35,640 --> 00:27:37,020
you very much thank you it was great

775
00:27:37,020 --> 00:27:39,320
talk

