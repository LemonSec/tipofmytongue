1
00:00:00,120 --> 00:00:02,580
how are we doing today internet's having

2
00:00:02,580 --> 00:00:04,799
problems so you have to pay attention I

3
00:00:04,799 --> 00:00:07,379
guess uh my name is Jimmy and I'm the

4
00:00:07,379 --> 00:00:09,720
co-founder and CTO of a security

5
00:00:09,720 --> 00:00:12,120
kubernetes security startup called ksoc

6
00:00:12,120 --> 00:00:14,040
and we're here to talk about a project

7
00:00:14,040 --> 00:00:15,960
I've been working on with a few folks

8
00:00:15,960 --> 00:00:18,359
over the past six months if you want the

9
00:00:18,359 --> 00:00:21,539
slides to follow along here they are

10
00:00:21,539 --> 00:00:25,800
tinyurl.com cncf owasp don't click

11
00:00:25,800 --> 00:00:27,300
strange links

12
00:00:27,300 --> 00:00:29,580
uh so who here has heard of Olas before

13
00:00:29,580 --> 00:00:31,439
we've heard of this thing open web

14
00:00:31,439 --> 00:00:33,960
application security project I've been

15
00:00:33,960 --> 00:00:35,579
involved for

16
00:00:35,579 --> 00:00:39,540
over 10 years off and on and the the

17
00:00:39,540 --> 00:00:42,840
time came for yet another top ten and

18
00:00:42,840 --> 00:00:44,760
what most people don't realize is

19
00:00:44,760 --> 00:00:47,280
there's tons and tons of oauth content

20
00:00:47,280 --> 00:00:49,500
out there in the world that isn't really

21
00:00:49,500 --> 00:00:52,800
appsec uh it's it spans the gamut of you

22
00:00:52,800 --> 00:00:55,500
know Docker and serverless and all sorts

23
00:00:55,500 --> 00:00:57,300
of different things so you can see here

24
00:00:57,300 --> 00:00:58,980
uh different projects that you can get

25
00:00:58,980 --> 00:01:01,079
involved with use internally as

26
00:01:01,079 --> 00:01:04,799
references and uh um learn more about

27
00:01:04,799 --> 00:01:06,540
the space so we have a Docker security

28
00:01:06,540 --> 00:01:08,880
cheat sheet I worked on the kubernetes

29
00:01:08,880 --> 00:01:10,560
security cheat sheet as well last summer

30
00:01:10,560 --> 00:01:12,540
and we're going to talk about the top 10

31
00:01:12,540 --> 00:01:13,439
today

32
00:01:13,439 --> 00:01:15,960
uh so the projects gained a little bit

33
00:01:15,960 --> 00:01:18,060
of momentum there's like 400 Stars it's

34
00:01:18,060 --> 00:01:19,799
getting translated into other languages

35
00:01:19,799 --> 00:01:22,740
currently uh it's really exciting to see

36
00:01:22,740 --> 00:01:25,140
uh in this space is is growing rapidly

37
00:01:25,140 --> 00:01:27,060
so please check it out and if you have

38
00:01:27,060 --> 00:01:28,200
suggestions

39
00:01:28,200 --> 00:01:30,720
um I'm usually reviewing all the issues

40
00:01:30,720 --> 00:01:33,299
in PRS so be gentle but I will uh

41
00:01:33,299 --> 00:01:35,759
definitely talk to you there

42
00:01:35,759 --> 00:01:38,759
and this is the top ten we have

43
00:01:38,759 --> 00:01:40,979
a little under 30 minutes to cover so

44
00:01:40,979 --> 00:01:42,900
hopefully we don't just get to top seven

45
00:01:42,900 --> 00:01:44,700
but this is what we're going to be going

46
00:01:44,700 --> 00:01:47,460
over today and I won't read these one by

47
00:01:47,460 --> 00:01:50,460
one but this is the overview so

48
00:01:50,460 --> 00:01:52,500
um again we know what kubernetes is

49
00:01:52,500 --> 00:01:55,920
we're all here we kind of came to this

50
00:01:55,920 --> 00:01:57,659
inflection point in kubernetes where

51
00:01:57,659 --> 00:01:59,820
it's getting complicated and and every

52
00:01:59,820 --> 00:02:02,280
day that complication adds more security

53
00:02:02,280 --> 00:02:04,920
problems and the top 10 is a reference

54
00:02:04,920 --> 00:02:07,020
guide it is not

55
00:02:07,020 --> 00:02:08,818
um gospel is not something you have to

56
00:02:08,818 --> 00:02:11,520
follow it is a a work in progress and

57
00:02:11,520 --> 00:02:14,099
really used as a reference document

58
00:02:14,099 --> 00:02:17,099
so kicking things off with number one uh

59
00:02:17,099 --> 00:02:18,379
in most things in Cloud

60
00:02:18,379 --> 00:02:20,760
misconfigurations bite us all of the

61
00:02:20,760 --> 00:02:22,680
time and kubernetes is no different uh

62
00:02:22,680 --> 00:02:25,379
we have the the red hat uh the famous

63
00:02:25,379 --> 00:02:27,660
Red Hat security survey uh basically

64
00:02:27,660 --> 00:02:30,120
saying everyone's dealing with these

65
00:02:30,120 --> 00:02:32,819
things all of the time and uh that's why

66
00:02:32,819 --> 00:02:34,920
it kind of makes the very top of the top

67
00:02:34,920 --> 00:02:36,720
ten and what do we mean when we talk

68
00:02:36,720 --> 00:02:38,640
about misconfigurations in kubernetes

69
00:02:38,640 --> 00:02:41,400
well it's everything kubernetes is one

70
00:02:41,400 --> 00:02:43,440
giant collection of configurations so

71
00:02:43,440 --> 00:02:46,560
here you have uh just a snippet of yaml

72
00:02:46,560 --> 00:02:49,440
this is a Daemon set with a variety of

73
00:02:49,440 --> 00:02:51,239
different configurations that are set

74
00:02:51,239 --> 00:02:53,459
for this particular workload right and

75
00:02:53,459 --> 00:02:55,099
we've seen some of these things before

76
00:02:55,099 --> 00:03:00,000
privileged host PID host IPC all these

77
00:03:00,000 --> 00:03:02,400
different configurations construct your

78
00:03:02,400 --> 00:03:04,379
security posture inside of your cluster

79
00:03:04,379 --> 00:03:06,780
multiply this times thousands and

80
00:03:06,780 --> 00:03:08,700
thousands across multiple clusters you

81
00:03:08,700 --> 00:03:10,920
have a serious problem right hence why

82
00:03:10,920 --> 00:03:12,060
we're at the top

83
00:03:12,060 --> 00:03:13,920
so how do we deal with best

84
00:03:13,920 --> 00:03:16,319
configurations well in an open source

85
00:03:16,319 --> 00:03:19,319
sort of ecosystem we have tools such as

86
00:03:19,319 --> 00:03:22,500
open policy agent gatekeeper to not only

87
00:03:22,500 --> 00:03:24,900
find these problems but protect us from

88
00:03:24,900 --> 00:03:27,780
these upon admission there's plenty of

89
00:03:27,780 --> 00:03:29,760
other tools out there in open source

90
00:03:29,760 --> 00:03:31,560
land as well that can help you find

91
00:03:31,560 --> 00:03:33,300
misconfigurations right our friends at

92
00:03:33,300 --> 00:03:35,519
bridgecrew have some tools ksoc has some

93
00:03:35,519 --> 00:03:38,400
tools out there we also can align

94
00:03:38,400 --> 00:03:40,440
ourselves with the CIS benchmarks and

95
00:03:40,440 --> 00:03:43,200
other Frameworks such as NSA to really

96
00:03:43,200 --> 00:03:45,420
give us a Guiding Light

97
00:03:45,420 --> 00:03:48,599
number two uh bingo cards out supply

98
00:03:48,599 --> 00:03:51,180
chain security right so we mentioned

99
00:03:51,180 --> 00:03:53,640
this earlier uh you don't really have a

100
00:03:53,640 --> 00:03:55,739
security conference in 2022 without

101
00:03:55,739 --> 00:03:58,379
talking about supply chain kubernetes is

102
00:03:58,379 --> 00:04:01,019
no different containers themselves are

103
00:04:01,019 --> 00:04:02,640
comprised of lots and lots of different

104
00:04:02,640 --> 00:04:05,040
open source software kubernetes itself

105
00:04:05,040 --> 00:04:07,019
comes from all over the place there's

106
00:04:07,019 --> 00:04:09,540
lots of contributors packages all of

107
00:04:09,540 --> 00:04:11,220
these things add to the kind of threat

108
00:04:11,220 --> 00:04:13,080
model that is your kubernetes cluster

109
00:04:13,080 --> 00:04:14,340
and

110
00:04:14,340 --> 00:04:15,840
um today we're seeing more and more

111
00:04:15,840 --> 00:04:18,238
tooling come out to help us verify the

112
00:04:18,238 --> 00:04:20,940
integrity and origin of these particular

113
00:04:20,940 --> 00:04:24,540
packages and libraries things like doing

114
00:04:24,540 --> 00:04:26,400
cve scanning which we've been doing for

115
00:04:26,400 --> 00:04:29,940
a long time uh the the infamous s-bomb

116
00:04:29,940 --> 00:04:31,800
you know you know calculating your

117
00:04:31,800 --> 00:04:34,380
software Bill and materials checking the

118
00:04:34,380 --> 00:04:36,960
image Integrity using cryptographic

119
00:04:36,960 --> 00:04:39,060
checks upon admission these all come

120
00:04:39,060 --> 00:04:41,100
into the supply chain story and we see

121
00:04:41,100 --> 00:04:44,639
it in news a lot hence it's number two

122
00:04:44,639 --> 00:04:46,919
my favorite number three

123
00:04:46,919 --> 00:04:48,900
uh overly permissive our back

124
00:04:48,900 --> 00:04:50,820
configurations has anybody had to deal

125
00:04:50,820 --> 00:04:52,380
with role-based Access Control in

126
00:04:52,380 --> 00:04:55,620
kubernetes a little bit Yeah is it

127
00:04:55,620 --> 00:04:57,840
straightforward to get right probably

128
00:04:57,840 --> 00:04:58,979
not

129
00:04:58,979 --> 00:05:01,740
um this is how we enable access to end

130
00:05:01,740 --> 00:05:04,080
users humans and service accounts inside

131
00:05:04,080 --> 00:05:07,740
of kubernetes and our back is totally

132
00:05:07,740 --> 00:05:10,740
100 configurable it's very very uh

133
00:05:10,740 --> 00:05:13,560
verbose and very granular which makes it

134
00:05:13,560 --> 00:05:16,080
easy to figure out a policy that works

135
00:05:16,080 --> 00:05:18,960
but also makes it easy to have far more

136
00:05:18,960 --> 00:05:21,300
permissions than needed so role-based

137
00:05:21,300 --> 00:05:23,220
access control is really this

138
00:05:23,220 --> 00:05:25,080
combination of roles and cluster roles

139
00:05:25,080 --> 00:05:26,580
and role bindings and cluster roll

140
00:05:26,580 --> 00:05:29,520
bindings all tied to subjects and uh

141
00:05:29,520 --> 00:05:31,500
it's really hard to monitor it's really

142
00:05:31,500 --> 00:05:34,080
hard to get right so we see a lot of

143
00:05:34,080 --> 00:05:36,240
privilege escalation and traversal sort

144
00:05:36,240 --> 00:05:38,160
of attacks and a lot of problems

145
00:05:38,160 --> 00:05:41,160
stemming from over permissive access and

146
00:05:41,160 --> 00:05:43,139
you could you know it definitely makes

147
00:05:43,139 --> 00:05:45,900
the top three so things like this right

148
00:05:45,900 --> 00:05:49,080
if you were uh set into a situation

149
00:05:49,080 --> 00:05:51,539
where you had to audit a cluster and you

150
00:05:51,539 --> 00:05:53,340
had a number of cluster role bindings

151
00:05:53,340 --> 00:05:55,440
tied to service accounts and things of

152
00:05:55,440 --> 00:05:57,300
that nature like how would you audit

153
00:05:57,300 --> 00:05:59,460
this right and this is actually

154
00:05:59,460 --> 00:06:01,080
um fairly dangerous right you're having

155
00:06:01,080 --> 00:06:03,300
the default service account kind of

156
00:06:03,300 --> 00:06:06,060
bound to Cluster admin which is built

157
00:06:06,060 --> 00:06:08,280
into kubernetes and really gives you all

158
00:06:08,280 --> 00:06:10,320
the access you could possibly need in

159
00:06:10,320 --> 00:06:12,539
the cluster and this manifests itself

160
00:06:12,539 --> 00:06:15,120
across the board inside of kubernetes

161
00:06:15,120 --> 00:06:17,220
and we see tons of problems here

162
00:06:17,220 --> 00:06:19,919
so we have tools uh

163
00:06:19,919 --> 00:06:22,560
Cube CTL doesn't really give you this

164
00:06:22,560 --> 00:06:24,539
very nice pretty output that says like

165
00:06:24,539 --> 00:06:26,940
Cube CTL you know show me what I have

166
00:06:26,940 --> 00:06:28,860
access to there are some pieces in there

167
00:06:28,860 --> 00:06:31,919
so we've kind of glued together the API

168
00:06:31,919 --> 00:06:34,259
responses to come up with tools such as

169
00:06:34,259 --> 00:06:37,500
rackus and some uh our back

170
00:06:37,500 --> 00:06:40,319
visualization tools these are really uh

171
00:06:40,319 --> 00:06:41,880
some of them are rough around the edges

172
00:06:41,880 --> 00:06:43,979
but they they give us that one place to

173
00:06:43,979 --> 00:06:46,199
see who has access to what which is the

174
00:06:46,199 --> 00:06:48,660
really existential question in our back

175
00:06:48,660 --> 00:06:51,740
and it's very very difficult to discover

176
00:06:51,740 --> 00:06:54,000
on the top 10 we had an awesome

177
00:06:54,000 --> 00:06:56,940
contribution last week this we're going

178
00:06:56,940 --> 00:06:58,919
to actually do this in in a workshop

179
00:06:58,919 --> 00:07:01,680
later but this is something that goes

180
00:07:01,680 --> 00:07:03,660
unnoticed and it's not talked about much

181
00:07:03,660 --> 00:07:07,340
but basically what you see here is

182
00:07:07,340 --> 00:07:11,539
giving the list verb access via our back

183
00:07:11,539 --> 00:07:15,900
and getting access to secrets well that

184
00:07:15,900 --> 00:07:17,940
isn't really the intended

185
00:07:17,940 --> 00:07:20,759
um you know use case of our back and

186
00:07:20,759 --> 00:07:22,860
this is not really a bypass it's a

187
00:07:22,860 --> 00:07:24,300
built-in piece of kubernetes

188
00:07:24,300 --> 00:07:26,280
functionality and I'd be happy to

189
00:07:26,280 --> 00:07:27,539
explain this more there's a full

190
00:07:27,539 --> 00:07:29,819
write-up in the top 10 of how this works

191
00:07:29,819 --> 00:07:31,680
it works with the list verb and the

192
00:07:31,680 --> 00:07:34,380
watch verb where you get these um this

193
00:07:34,380 --> 00:07:36,120
items line here and you actually print

194
00:07:36,120 --> 00:07:38,160
out Secrets where really that wasn't the

195
00:07:38,160 --> 00:07:39,599
intention of this particular our back

196
00:07:39,599 --> 00:07:41,639
policy

197
00:07:41,639 --> 00:07:43,400
the number four

198
00:07:43,400 --> 00:07:45,900
lack of centralized policy enforcement

199
00:07:45,900 --> 00:07:49,080
so it's one thing to go find issues in

200
00:07:49,080 --> 00:07:51,599
your cluster misconfiguration cves Etc

201
00:07:51,599 --> 00:07:54,240
but how do you enforce governance across

202
00:07:54,240 --> 00:07:56,880
multiple clusters well it's not that

203
00:07:56,880 --> 00:07:59,819
straightforward and we need to do this

204
00:07:59,819 --> 00:08:01,979
because this these clusters become

205
00:08:01,979 --> 00:08:04,080
unmanageable we're trying to give

206
00:08:04,080 --> 00:08:05,880
developers what they need to ship

207
00:08:05,880 --> 00:08:08,400
quickly and and build the software they

208
00:08:08,400 --> 00:08:10,020
need to build and that means we need to

209
00:08:10,020 --> 00:08:11,520
put guard rails in place not security

210
00:08:11,520 --> 00:08:14,220
practitioners so detection and

211
00:08:14,220 --> 00:08:16,680
prevention are part of the equation and

212
00:08:16,680 --> 00:08:18,900
again in in open source sort of

213
00:08:18,900 --> 00:08:22,139
situations we have a variety of ways to

214
00:08:22,139 --> 00:08:24,479
do this right we have

215
00:08:24,479 --> 00:08:26,280
built-in admission control into

216
00:08:26,280 --> 00:08:29,160
kubernetes the deprecation of pod

217
00:08:29,160 --> 00:08:31,440
security policy happened now it's a

218
00:08:31,440 --> 00:08:33,179
security admission and we have open

219
00:08:33,179 --> 00:08:34,979
policy agent if you want to plug

220
00:08:34,979 --> 00:08:37,080
something in and utilize the the Rego

221
00:08:37,080 --> 00:08:40,260
language Q Borden uh kivarno these are

222
00:08:40,260 --> 00:08:42,839
all policy engines that help you take

223
00:08:42,839 --> 00:08:46,320
you know all the regulatory controls and

224
00:08:46,320 --> 00:08:48,839
and policies you need to distribute as a

225
00:08:48,839 --> 00:08:50,760
security team and place them into

226
00:08:50,760 --> 00:08:52,620
different clusters stopping bad things

227
00:08:52,620 --> 00:08:54,240
from happening or ever entering the

228
00:08:54,240 --> 00:08:55,440
cluster

229
00:08:55,440 --> 00:08:57,779
there'll be lots of toxic kubecon on

230
00:08:57,779 --> 00:09:00,180
probably all three of these uh yeah

231
00:09:00,180 --> 00:09:02,100
there's gonna be a lot

232
00:09:02,100 --> 00:09:03,660
number five

233
00:09:03,660 --> 00:09:04,380
um

234
00:09:04,380 --> 00:09:07,320
a favorite thing logs kubernetes itself

235
00:09:07,320 --> 00:09:10,800
generates lots and lots of logs and uh

236
00:09:10,800 --> 00:09:13,140
what we do with them matters right if

237
00:09:13,140 --> 00:09:15,180
you have a single cluster great you

238
00:09:15,180 --> 00:09:16,680
could probably handle this through

239
00:09:16,680 --> 00:09:18,420
standard out and standard error dumping

240
00:09:18,420 --> 00:09:20,339
the logs into S3 and doing some

241
00:09:20,339 --> 00:09:22,680
rudimentaries kind of searching once you

242
00:09:22,680 --> 00:09:25,440
start growing into 50 100 clusters and

243
00:09:25,440 --> 00:09:27,660
they start to scale it gets very noisy

244
00:09:27,660 --> 00:09:30,060
very fast and you need to take the logs

245
00:09:30,060 --> 00:09:32,459
generated by the kubernetes API the

246
00:09:32,459 --> 00:09:33,959
applications running inside of the

247
00:09:33,959 --> 00:09:36,180
cluster and do something with them right

248
00:09:36,180 --> 00:09:39,720
so we see a lot of folks just kind of

249
00:09:39,720 --> 00:09:42,660
dumping API audit logs into S3 and

250
00:09:42,660 --> 00:09:45,120
hoping for the best that's one strategy

251
00:09:45,120 --> 00:09:47,279
but hopefully we can build a better

252
00:09:47,279 --> 00:09:49,560
centralized logging platform that finds

253
00:09:49,560 --> 00:09:52,200
anomalies and detects issues as they're

254
00:09:52,200 --> 00:09:55,260
happening and looking for uh problems

255
00:09:55,260 --> 00:09:56,339
right

256
00:09:56,339 --> 00:09:58,800
so the the kubernetes API audit log

257
00:09:58,800 --> 00:10:01,380
entry itself it's kind of hard to see

258
00:10:01,380 --> 00:10:03,060
here but it has a lot of things ready

259
00:10:03,060 --> 00:10:05,100
for you as a security practitioner to

260
00:10:05,100 --> 00:10:07,920
utilize and start detecting you know

261
00:10:07,920 --> 00:10:10,080
anomalous Behavior right the last two

262
00:10:10,080 --> 00:10:13,680
lines of this log entry this event entry

263
00:10:13,680 --> 00:10:16,140
um are decisions and reasons that are

264
00:10:16,140 --> 00:10:18,899
spit back from the kubernetes API via

265
00:10:18,899 --> 00:10:20,760
our back right it's like I allowed this

266
00:10:20,760 --> 00:10:23,279
request because of this reason this

267
00:10:23,279 --> 00:10:26,580
particular rbac policy matched and I

268
00:10:26,580 --> 00:10:28,500
allowed this user or service account to

269
00:10:28,500 --> 00:10:29,880
access the thing they wanted to access

270
00:10:29,880 --> 00:10:32,220
you can also see where they came from

271
00:10:32,220 --> 00:10:35,399
the source IP address the user agent the

272
00:10:35,399 --> 00:10:37,800
timestamp these things tell a story of

273
00:10:37,800 --> 00:10:39,779
what's going on in the cluster at any

274
00:10:39,779 --> 00:10:41,160
given moment and you can make better

275
00:10:41,160 --> 00:10:44,779
security decisions later on

276
00:10:45,060 --> 00:10:48,660
number six broken authentication so

277
00:10:48,660 --> 00:10:50,940
kubernetes supports a variety of

278
00:10:50,940 --> 00:10:53,640
authentication mechanisms it's up to you

279
00:10:53,640 --> 00:10:55,800
to choose how to authenticate to

280
00:10:55,800 --> 00:10:57,420
kubernetes you could use certificates

281
00:10:57,420 --> 00:11:00,680
you can tie into your oidc platform

282
00:11:00,680 --> 00:11:03,000
and you can use your Cloud

283
00:11:03,000 --> 00:11:04,980
authentication kind of IAM if you're

284
00:11:04,980 --> 00:11:07,019
using AWS all of these things are viable

285
00:11:07,019 --> 00:11:09,720
but it's still easy to get it wrong

286
00:11:09,720 --> 00:11:12,600
right and if you're sharing credentials

287
00:11:12,600 --> 00:11:15,300
um or or you know minting static tokens

288
00:11:15,300 --> 00:11:17,040
that are irrevocable or certificates

289
00:11:17,040 --> 00:11:19,079
that you can't rotate there's a problem

290
00:11:19,079 --> 00:11:21,899
right they're actually regulatory bodies

291
00:11:21,899 --> 00:11:24,300
out there namely PCI looking for things

292
00:11:24,300 --> 00:11:26,339
like this right developers have access

293
00:11:26,339 --> 00:11:29,339
to clusters and how do they do it and

294
00:11:29,339 --> 00:11:31,140
this is just the the you know from the

295
00:11:31,140 --> 00:11:33,000
kubernetes docs but just to show the

296
00:11:33,000 --> 00:11:34,860
flow right like it's not just humans

297
00:11:34,860 --> 00:11:36,959
these are service accounts that need to

298
00:11:36,959 --> 00:11:38,360
talk to the kubernetes API

299
00:11:38,360 --> 00:11:40,680
authentication authorization fairly

300
00:11:40,680 --> 00:11:42,180
straightforward and then a mission

301
00:11:42,180 --> 00:11:44,220
control this is where we do our policy

302
00:11:44,220 --> 00:11:46,620
enforcement

303
00:11:46,620 --> 00:11:49,260
if you have any sort of oidc

304
00:11:49,260 --> 00:11:51,959
connectivity if you are enforcing MFA

305
00:11:51,959 --> 00:11:54,180
kubernetes is no different right we

306
00:11:54,180 --> 00:11:56,820
don't want to let folks just have access

307
00:11:56,820 --> 00:11:59,880
uh because it's easier we want to apply

308
00:11:59,880 --> 00:12:01,740
the same corporate policies that we have

309
00:12:01,740 --> 00:12:04,500
for other infrastructure access

310
00:12:04,500 --> 00:12:07,980
so number seven and you'll see more and

311
00:12:07,980 --> 00:12:10,200
more of this at kubecon there's a bunch

312
00:12:10,200 --> 00:12:12,480
of uh co-located events happening in the

313
00:12:12,480 --> 00:12:15,060
networking space but missing Network

314
00:12:15,060 --> 00:12:17,940
segmentation controls right so your

315
00:12:17,940 --> 00:12:20,100
network inside of a cluster or multiple

316
00:12:20,100 --> 00:12:22,920
clusters has a lot of chatter pods talk

317
00:12:22,920 --> 00:12:24,899
to pods there are services that are

318
00:12:24,899 --> 00:12:26,399
exposed to the internet via load

319
00:12:26,399 --> 00:12:29,220
balancers or node ports there's probably

320
00:12:29,220 --> 00:12:31,740
some reason to lock that down right you

321
00:12:31,740 --> 00:12:33,720
want to stop a certain namespace from

322
00:12:33,720 --> 00:12:35,880
talking to another namespace and by

323
00:12:35,880 --> 00:12:38,160
default if you just turn kubernetes on

324
00:12:38,160 --> 00:12:40,260
nothing really happens for you you have

325
00:12:40,260 --> 00:12:43,139
to go build these policies and we have a

326
00:12:43,139 --> 00:12:44,820
lot of Technology that's coming up in

327
00:12:44,820 --> 00:12:47,279
this space to help us built into

328
00:12:47,279 --> 00:12:49,380
kubernetes depending on how you do

329
00:12:49,380 --> 00:12:51,180
networking you could utilize the network

330
00:12:51,180 --> 00:12:52,579
policy

331
00:12:52,579 --> 00:12:55,440
object here and you can be very granular

332
00:12:55,440 --> 00:12:58,860
uh it's all yaml all the time so you can

333
00:12:58,860 --> 00:13:00,600
tell kubernetes how you want to handle

334
00:13:00,600 --> 00:13:02,839
networking we can use service mesh

335
00:13:02,839 --> 00:13:05,760
Technologies such as istio o psyllium

336
00:13:05,760 --> 00:13:07,980
link or D like these things are there to

337
00:13:07,980 --> 00:13:10,680
help you plug in overlay networks to

338
00:13:10,680 --> 00:13:13,860
build and carve out uh segmented Network

339
00:13:13,860 --> 00:13:16,860
connectivity and starting with default

340
00:13:16,860 --> 00:13:19,980
denial this has been something since I

341
00:13:19,980 --> 00:13:23,040
was managing iptables many years ago is

342
00:13:23,040 --> 00:13:25,500
kind of what you do we decided not to do

343
00:13:25,500 --> 00:13:27,839
that in kubernetes and we have to go

344
00:13:27,839 --> 00:13:30,120
back now and do this default denial and

345
00:13:30,120 --> 00:13:32,519
then you build out individually what you

346
00:13:32,519 --> 00:13:34,800
want to allow right and this is just

347
00:13:34,800 --> 00:13:38,339
this is uh from Ahmed Balkans he has an

348
00:13:38,339 --> 00:13:40,320
awesome GitHub repo with a bunch of

349
00:13:40,320 --> 00:13:43,680
fancy visualizations on uh on writing

350
00:13:43,680 --> 00:13:46,380
Network policies but the tldr is really

351
00:13:46,380 --> 00:13:48,720
not everything in a cluster should talk

352
00:13:48,720 --> 00:13:50,220
to everything else it shouldn't even be

353
00:13:50,220 --> 00:13:51,660
allowed to right and you need to put

354
00:13:51,660 --> 00:13:53,940
those policies in place

355
00:13:53,940 --> 00:13:57,779
so off to eight secret management

356
00:13:57,779 --> 00:13:58,560
um

357
00:13:58,560 --> 00:14:01,860
secret storage is a highly debated topic

358
00:14:01,860 --> 00:14:03,779
I don't have a prescription for

359
00:14:03,779 --> 00:14:05,700
everybody to how to manage Secrets at

360
00:14:05,700 --> 00:14:07,800
your organization but it's something to

361
00:14:07,800 --> 00:14:09,720
consider right using the kubernetes

362
00:14:09,720 --> 00:14:13,079
secret object you certainly can we all

363
00:14:13,079 --> 00:14:14,880
know at this point that those secrets

364
00:14:14,880 --> 00:14:17,940
are base64 encoded which is the highest

365
00:14:17,940 --> 00:14:20,459
form of encryption that we have and

366
00:14:20,459 --> 00:14:22,620
shoved into FCD right we don't do it for

367
00:14:22,620 --> 00:14:25,019
security but that may be fine for your

368
00:14:25,019 --> 00:14:27,420
threat model and you have to rely on our

369
00:14:27,420 --> 00:14:29,519
back at that point to stop access to

370
00:14:29,519 --> 00:14:32,040
those Secrets right I get worried with

371
00:14:32,040 --> 00:14:34,019
you know mixing too many things in the

372
00:14:34,019 --> 00:14:36,660
cluster that are like very critical such

373
00:14:36,660 --> 00:14:38,639
as secrets and then failing at your R

374
00:14:38,639 --> 00:14:41,160
back story giving the world access to

375
00:14:41,160 --> 00:14:43,860
those secrets you can use other

376
00:14:43,860 --> 00:14:46,680
mechanisms such as KMS or hashicorp

377
00:14:46,680 --> 00:14:48,360
vault whatever it may be you need to

378
00:14:48,360 --> 00:14:50,519
have a really strong standard

379
00:14:50,519 --> 00:14:53,399
cross-cluster story around that

380
00:14:53,399 --> 00:14:55,320
and then off to misconfigured cluster

381
00:14:55,320 --> 00:14:57,300
components so

382
00:14:57,300 --> 00:15:01,560
as we know a kubernetes cluster is just

383
00:15:01,560 --> 00:15:03,600
a bunch of other services right like the

384
00:15:03,600 --> 00:15:06,860
cubelet controllers the API

385
00:15:06,860 --> 00:15:10,260
schedulers all of these things are up to

386
00:15:10,260 --> 00:15:13,380
you especially if you're kind of diying

387
00:15:13,380 --> 00:15:16,440
your own clusters to configure securely

388
00:15:16,440 --> 00:15:19,139
right the CIS Benchmark has a bunch of

389
00:15:19,139 --> 00:15:23,040
guidance for us there's also quite a bit

390
00:15:23,040 --> 00:15:25,800
taken care of from our cloud provider if

391
00:15:25,800 --> 00:15:28,560
we choose to use manage kubernetes but

392
00:15:28,560 --> 00:15:30,899
these configurations that they're vast

393
00:15:30,899 --> 00:15:32,880
there's so many of them if you were to

394
00:15:32,880 --> 00:15:35,459
kind of roll your own cluster

395
00:15:35,459 --> 00:15:38,100
um and random aside I was trying to

396
00:15:38,100 --> 00:15:39,660
figure out what the correct name is for

397
00:15:39,660 --> 00:15:41,880
a non-managed kubernetes service so out

398
00:15:41,880 --> 00:15:44,459
of 65 people it's free range artisanal

399
00:15:44,459 --> 00:15:46,920
that's what we call them so

400
00:15:46,920 --> 00:15:49,620
um I don't know go figure uh so things

401
00:15:49,620 --> 00:15:51,779
like this right the cubelet itself is

402
00:15:51,779 --> 00:15:53,639
like a kind of an agent that runs on

403
00:15:53,639 --> 00:15:55,920
every node we don't think about it a

404
00:15:55,920 --> 00:15:58,680
whole lot when we turn on an eks cluster

405
00:15:58,680 --> 00:16:00,480
because we don't have to but for those

406
00:16:00,480 --> 00:16:02,760
of us who are out there doing the hard

407
00:16:02,760 --> 00:16:05,040
work of building our own clusters from

408
00:16:05,040 --> 00:16:08,160
scratch uh using chaops or or cube ADM

409
00:16:08,160 --> 00:16:10,019
or something like that these are up to

410
00:16:10,019 --> 00:16:12,600
you right Anonymous auth and and the

411
00:16:12,600 --> 00:16:13,680
variety of other different

412
00:16:13,680 --> 00:16:15,660
configurations that exist and these

413
00:16:15,660 --> 00:16:17,579
flags get deprecated all the time you

414
00:16:17,579 --> 00:16:18,779
have to keep up with them through the

415
00:16:18,779 --> 00:16:21,180
kubernetes versions and they apply to

416
00:16:21,180 --> 00:16:23,279
all the different components right so I

417
00:16:23,279 --> 00:16:26,220
would refer to CIS but CIS isn't always

418
00:16:26,220 --> 00:16:27,720
at the bleeding edge of the latest

419
00:16:27,720 --> 00:16:29,699
version of kubernetes so

420
00:16:29,699 --> 00:16:31,320
um if you're if you're out on the World

421
00:16:31,320 --> 00:16:34,199
building your own clusters uh these are

422
00:16:34,199 --> 00:16:35,399
for you

423
00:16:35,399 --> 00:16:37,100
and then finally

424
00:16:37,100 --> 00:16:39,600
10 outdated vulner and vulnerable

425
00:16:39,600 --> 00:16:41,940
kubernetes components so

426
00:16:41,940 --> 00:16:43,920
we're at a point in in the kubernetes

427
00:16:43,920 --> 00:16:46,259
journey that we have cves we actually

428
00:16:46,259 --> 00:16:49,500
have a whole live feed of cves on

429
00:16:49,500 --> 00:16:52,560
kubernetes dot IO uh there's there's uh

430
00:16:52,560 --> 00:16:54,180
CVS that come out pertaining to

431
00:16:54,180 --> 00:16:56,519
different individual components and apis

432
00:16:56,519 --> 00:16:58,620
and things that make up a kubernetes

433
00:16:58,620 --> 00:17:02,279
cluster there's also cves in very very

434
00:17:02,279 --> 00:17:05,040
popular open source packages such as

435
00:17:05,040 --> 00:17:08,339
istio you know Envoy proxy Argo CD

436
00:17:08,339 --> 00:17:11,280
things that have a lot of access to your

437
00:17:11,280 --> 00:17:14,699
cluster that we rely on they're not you

438
00:17:14,699 --> 00:17:17,699
know they're not immune to this this

439
00:17:17,699 --> 00:17:19,919
barrage of cves that are coming out so

440
00:17:19,919 --> 00:17:22,439
patch management you know this is stuff

441
00:17:22,439 --> 00:17:24,660
that that matters a lot asset inventory

442
00:17:24,660 --> 00:17:27,119
knowing what has access to things you

443
00:17:27,119 --> 00:17:28,620
know what are you giving our back

444
00:17:28,620 --> 00:17:31,200
policies to inside your cluster we've

445
00:17:31,200 --> 00:17:33,419
probably all dealt with the helm tiller

446
00:17:33,419 --> 00:17:36,360
sort of situation of of a few years ago

447
00:17:36,360 --> 00:17:39,240
where tiller was the de facto way to use

448
00:17:39,240 --> 00:17:41,580
Helm to let you deploy workloads in your

449
00:17:41,580 --> 00:17:43,500
cluster her but tiller turned out to not

450
00:17:43,500 --> 00:17:46,440
be a great piece of code to run inside

451
00:17:46,440 --> 00:17:48,780
because of the Privileges it had and

452
00:17:48,780 --> 00:17:50,400
we're going to see more and more of that

453
00:17:50,400 --> 00:17:51,960
right there's a lot of stuff that we're

454
00:17:51,960 --> 00:17:53,760
running from open source and some of

455
00:17:53,760 --> 00:17:55,799
it's great and secure but it takes a lot

456
00:17:55,799 --> 00:17:57,080
of Maintenance

457
00:17:57,080 --> 00:17:59,580
and this isn't to pick on any one

458
00:17:59,580 --> 00:18:01,500
technology or anything like that it's

459
00:18:01,500 --> 00:18:04,440
just what is out there in the world now

460
00:18:04,440 --> 00:18:06,299
we have these feeds they're updated

461
00:18:06,299 --> 00:18:09,660
daily Argo CD has been picked on a

462
00:18:09,660 --> 00:18:12,600
little bit in in the cve world but these

463
00:18:12,600 --> 00:18:15,059
CD platforms have components that run in

464
00:18:15,059 --> 00:18:17,039
your cluster right you you got to watch

465
00:18:17,039 --> 00:18:18,900
them like a hawk and make sure that you

466
00:18:18,900 --> 00:18:21,240
have the latest version and you've given

467
00:18:21,240 --> 00:18:22,740
it minimal privileges

468
00:18:22,740 --> 00:18:24,480
so I'm not going to go through all of

469
00:18:24,480 --> 00:18:27,539
these one by one but I you know I

470
00:18:27,539 --> 00:18:29,400
suggest you do a self audit I suggest

471
00:18:29,400 --> 00:18:30,780
you ask yourself the hard questions

472
00:18:30,780 --> 00:18:33,360
right of of you know can your containers

473
00:18:33,360 --> 00:18:35,340
run as root do I have a story around

474
00:18:35,340 --> 00:18:38,460
cross multi-cluster governance

475
00:18:38,460 --> 00:18:39,179
um

476
00:18:39,179 --> 00:18:41,520
do I have an inventory right where are

477
00:18:41,520 --> 00:18:43,799
my workloads where how many nodes do I

478
00:18:43,799 --> 00:18:45,600
have what version of kubernetes am I

479
00:18:45,600 --> 00:18:47,940
running do I have a standard and am I

480
00:18:47,940 --> 00:18:50,160
bringing in third party tools packages

481
00:18:50,160 --> 00:18:52,559
libraries into this ecosystem and what

482
00:18:52,559 --> 00:18:53,940
am I doing to make sure that they're

483
00:18:53,940 --> 00:18:56,820
safe so the oauth top 10 was really

484
00:18:56,820 --> 00:19:00,840
meant to help that conversation right uh

485
00:19:00,840 --> 00:19:02,580
I know some some people may leave and

486
00:19:02,580 --> 00:19:04,740
and say we have a new standard to follow

487
00:19:04,740 --> 00:19:06,900
and a checkbox sort of thing and that's

488
00:19:06,900 --> 00:19:09,000
not really the intention of the OAS top

489
00:19:09,000 --> 00:19:11,340
10 it is to spark a conversation

490
00:19:11,340 --> 00:19:14,220
internally and and more importantly make

491
00:19:14,220 --> 00:19:17,160
sure we don't miss the highest level uh

492
00:19:17,160 --> 00:19:19,500
issues that are out there today

493
00:19:19,500 --> 00:19:21,299
so um

494
00:19:21,299 --> 00:19:23,520
I think we're good on time but I uh

495
00:19:23,520 --> 00:19:26,039
available for for questions we have a

496
00:19:26,039 --> 00:19:28,919
booth uh g32 at ksoc if you want to

497
00:19:28,919 --> 00:19:31,200
learn more it's a party going on

498
00:19:31,200 --> 00:19:32,880
um with our friends at Bridge crew in

499
00:19:32,880 --> 00:19:35,100
Palo Alto and things like that

500
00:19:35,100 --> 00:19:38,039
um and we'll be uh and come see me if

501
00:19:38,039 --> 00:19:41,600
you want to partake

502
00:19:41,940 --> 00:19:42,830
any questions

503
00:19:42,830 --> 00:19:49,609
[Applause]

504
00:19:51,780 --> 00:19:54,780
is it going to be added to the asvs

505
00:19:54,780 --> 00:19:55,380
um

506
00:19:55,380 --> 00:19:59,160
the asvs is a different governing body

507
00:19:59,160 --> 00:20:01,740
inside of a wasp I would say that there

508
00:20:01,740 --> 00:20:03,240
is a project

509
00:20:03,240 --> 00:20:04,500
um

510
00:20:04,500 --> 00:20:06,620
trying to build more of a kubernetes

511
00:20:06,620 --> 00:20:09,480
container-based verification standard

512
00:20:09,480 --> 00:20:12,059
the asvs is like probably the most

513
00:20:12,059 --> 00:20:14,760
mature oauth project out there we won't

514
00:20:14,760 --> 00:20:17,160
fold it into that particular project but

515
00:20:17,160 --> 00:20:19,799
we might have a new new take on a

516
00:20:19,799 --> 00:20:23,418
verification standard for containers

517
00:20:27,539 --> 00:20:29,880
yeah so there's there's like a like

518
00:20:29,880 --> 00:20:31,860
we're entering an era where we can

519
00:20:31,860 --> 00:20:33,900
actually have a top 10 for the OAS top

520
00:20:33,900 --> 00:20:35,280
tens which is

521
00:20:35,280 --> 00:20:37,980
I don't know go figure there is more

522
00:20:37,980 --> 00:20:40,200
than one and some are

523
00:20:40,200 --> 00:20:42,900
not some are not as maintained so we're

524
00:20:42,900 --> 00:20:44,700
trying to keep this one alive and and

525
00:20:44,700 --> 00:20:47,640
spread it across a wasp

526
00:20:47,640 --> 00:20:50,940
and we have a workshop I'm hoping Steve

527
00:20:50,940 --> 00:20:53,100
with the workshop after this so we're

528
00:20:53,100 --> 00:20:54,900
going to talk about things like this in

529
00:20:54,900 --> 00:20:58,039
very great detail yeah

530
00:20:58,860 --> 00:21:01,860
yep there'll be

531
00:21:01,860 --> 00:21:05,280
if you want them right now they're

532
00:21:05,280 --> 00:21:11,160
right here so tinyurl.com cncf owasp and

533
00:21:11,160 --> 00:21:12,120
uh

534
00:21:12,120 --> 00:21:15,120
there are they'll also

535
00:21:15,120 --> 00:21:16,860
I guess be distributed

536
00:21:16,860 --> 00:21:18,900
by the conference not really haven't

537
00:21:18,900 --> 00:21:20,460
thought that far ahead but they'll be

538
00:21:20,460 --> 00:21:24,440
there somewhere or just hit me up

539
00:21:25,559 --> 00:21:26,760
all good

540
00:21:26,760 --> 00:21:28,260
all right have a great rest of your

541
00:21:28,260 --> 00:21:31,100
conference yep

