1
00:00:00,420 --> 00:00:02,879
welcome to this talk about building

2
00:00:02,879 --> 00:00:07,279
separate things thanks to God fuzzing

3
00:00:07,980 --> 00:00:10,380
my name is Jeremy I'm an application

4
00:00:10,380 --> 00:00:13,200
security engineer at grafana Labs I

5
00:00:13,200 --> 00:00:16,260
joined six months ago I used to be a

6
00:00:16,260 --> 00:00:18,080
back-end developer a long time ago

7
00:00:18,080 --> 00:00:21,420
mostly coding for security products in

8
00:00:21,420 --> 00:00:24,900
Java and some.net go is not my main

9
00:00:24,900 --> 00:00:28,260
language but I like the design decisions

10
00:00:28,260 --> 00:00:31,099
they made from a security point of view

11
00:00:31,099 --> 00:00:34,620
uh started in graphernal labs in March

12
00:00:34,620 --> 00:00:37,160
2022 so that's further new

13
00:00:37,160 --> 00:00:39,780
uh so we are on the beginning of the

14
00:00:39,780 --> 00:00:43,020
security Journey but because grafana lab

15
00:00:43,020 --> 00:00:45,120
is all about transparency there are

16
00:00:45,120 --> 00:00:48,120
things we already wanted to share

17
00:00:48,120 --> 00:00:50,219
and you will see in their presentation

18
00:00:50,219 --> 00:00:51,960
there are many links they point to

19
00:00:51,960 --> 00:00:54,660
GitHub repo that are public and all the

20
00:00:54,660 --> 00:00:58,199
PRS and all that so you can

21
00:00:58,199 --> 00:01:01,079
follow up on that and see that it's real

22
00:01:01,079 --> 00:01:02,420
data

23
00:01:02,420 --> 00:01:05,820
uh what we will start doing is like even

24
00:01:05,820 --> 00:01:09,360
though we're as good secure defaults

25
00:01:09,360 --> 00:01:12,060
we'll see that it's still possible to

26
00:01:12,060 --> 00:01:14,159
server password

27
00:01:14,159 --> 00:01:16,560
and we talk about the fuzzing trying to

28
00:01:16,560 --> 00:01:18,799
and I don't know we can help like

29
00:01:18,799 --> 00:01:23,159
detecting past reversal then we will try

30
00:01:23,159 --> 00:01:25,259
to First Mark complex

31
00:01:25,259 --> 00:01:26,700
see that

32
00:01:26,700 --> 00:01:29,040
writing predicates that are needed for

33
00:01:29,040 --> 00:01:30,240
filling

34
00:01:30,240 --> 00:01:31,700
can

35
00:01:31,700 --> 00:01:33,860
be that easy

36
00:01:33,860 --> 00:01:37,380
and then we'll follow up with next steps

37
00:01:37,380 --> 00:01:41,159
and like once you have good feeling what

38
00:01:41,159 --> 00:01:43,200
should you do next to like the more

39
00:01:43,200 --> 00:01:46,159
value out of it

40
00:01:46,799 --> 00:01:48,299
so

41
00:01:48,299 --> 00:01:49,500
because

42
00:01:49,500 --> 00:01:51,540
girlfriend I love is all about

43
00:01:51,540 --> 00:01:54,299
transparency we share first or first

44
00:01:54,299 --> 00:01:56,700
zero day that took place in December

45
00:01:56,700 --> 00:02:00,780
2021 so I was not yet an employee but I

46
00:02:00,780 --> 00:02:02,579
discovered a lot about the context

47
00:02:02,579 --> 00:02:04,920
thanks to public blog posts and then

48
00:02:04,920 --> 00:02:07,380
public purpose one of the issue was

49
00:02:07,380 --> 00:02:11,160
fixed by that time the security team was

50
00:02:11,160 --> 00:02:14,660
only one member the size of Thomas Owen

51
00:02:14,660 --> 00:02:16,620
uh

52
00:02:16,620 --> 00:02:18,780
and basically what happened a security

53
00:02:18,780 --> 00:02:21,239
researcher responsibilities closed

54
00:02:21,239 --> 00:02:23,580
across traversal in the code of grafana

55
00:02:23,580 --> 00:02:25,620
on December the 2nd

56
00:02:25,620 --> 00:02:27,660
it was rather bad it's called as high

57
00:02:27,660 --> 00:02:31,080
because it allowed to basically download

58
00:02:31,080 --> 00:02:32,940
uh

59
00:02:32,940 --> 00:02:35,400
any files running as a graph funnel

60
00:02:35,400 --> 00:02:37,379
process from the server

61
00:02:37,379 --> 00:02:40,200
and out of excitement this researcher

62
00:02:40,200 --> 00:02:42,300
tweeted that he found a press Traverse

63
00:02:42,300 --> 00:02:45,300
wall another not the specific place in

64
00:02:45,300 --> 00:02:46,680
the source code that was vulnerable

65
00:02:46,680 --> 00:02:48,599
reduce that he found one

66
00:02:48,599 --> 00:02:51,540
and a few days later we identified on

67
00:02:51,540 --> 00:02:54,120
December the 7th that well this

68
00:02:54,120 --> 00:02:56,340
vulnerability was actively exploited

69
00:02:56,340 --> 00:02:59,220
making it to zero day service other

70
00:02:59,220 --> 00:03:01,379
researchers when they are there but hey

71
00:03:01,379 --> 00:03:03,120
there's a past traversal in this code

72
00:03:03,120 --> 00:03:06,360
they could find it because they they

73
00:03:06,360 --> 00:03:08,040
knew that if they look for something

74
00:03:08,040 --> 00:03:09,560
they will find it

75
00:03:09,560 --> 00:03:15,540
it was also fixed on December 7th uh the

76
00:03:15,540 --> 00:03:18,239
question like you may be asking now is

77
00:03:18,239 --> 00:03:20,700
yeah but even go supposed

78
00:03:20,700 --> 00:03:23,760
to have a really good standard library

79
00:03:23,760 --> 00:03:26,819
with safe defaults and then

80
00:03:26,819 --> 00:03:29,220
why did it happen

81
00:03:29,220 --> 00:03:32,640
well in fact the

82
00:03:32,640 --> 00:03:36,540
method fivepas.pin is tricky let's see

83
00:03:36,540 --> 00:03:39,420
why if you just tweet the documentation

84
00:03:39,420 --> 00:03:41,760
quickly you just like somewhere with the

85
00:03:41,760 --> 00:03:44,340
first sentence and say yeah it cleans a

86
00:03:44,340 --> 00:03:45,900
clean returns a shortcuts fast

87
00:03:45,900 --> 00:03:48,360
equivalent to pass so it looks like a

88
00:03:48,360 --> 00:03:50,040
really good candidate

89
00:03:50,040 --> 00:03:54,000
to filter any side paths you could

90
00:03:54,000 --> 00:03:56,340
receive as input and to get the camera

91
00:03:56,340 --> 00:03:58,379
nickel from out of it and then somehow

92
00:03:58,379 --> 00:04:00,299
You can conclude that you will be saved

93
00:04:00,299 --> 00:04:02,519
but if you read in details and I don't

94
00:04:02,519 --> 00:04:04,379
ask you to do it now because it's it's

95
00:04:04,379 --> 00:04:07,500
kind of really confusing there are

96
00:04:07,500 --> 00:04:09,959
several steps and it's not easy to

97
00:04:09,959 --> 00:04:12,060
understand each of those and all that

98
00:04:12,060 --> 00:04:13,319
and

99
00:04:13,319 --> 00:04:16,798
that I'll try to make a recap it's just

100
00:04:16,798 --> 00:04:17,699
like

101
00:04:17,699 --> 00:04:20,959
if you just use Simple wall

102
00:04:20,959 --> 00:04:23,699
papers.fin will remove any dot sequence

103
00:04:23,699 --> 00:04:26,160
which has a sequence that are dangerous

104
00:04:26,160 --> 00:04:27,840
from the past 12 also point of view

105
00:04:27,840 --> 00:04:30,060
because of the other one that can allow

106
00:04:30,060 --> 00:04:31,259
you to

107
00:04:31,259 --> 00:04:35,220
jump to uh top level folder so it will

108
00:04:35,220 --> 00:04:37,020
remove all of the all those those

109
00:04:37,020 --> 00:04:39,360
sequence in all the Inner Elements and

110
00:04:39,360 --> 00:04:41,280
also on the first element if it starts

111
00:04:41,280 --> 00:04:42,660
with the Slash

112
00:04:42,660 --> 00:04:45,120
which means that if the first element

113
00:04:45,120 --> 00:04:47,940
does not start with the slash it won't

114
00:04:47,940 --> 00:04:49,080
filter it

115
00:04:49,080 --> 00:04:51,240
smoke proof you just go to the go

116
00:04:51,240 --> 00:04:53,460
playground uh

117
00:04:53,460 --> 00:04:57,300
and you give

118
00:04:57,300 --> 00:05:00,180
an input that dot slash data and then

119
00:05:00,180 --> 00:05:01,800
you see that what

120
00:05:01,800 --> 00:05:05,220
it's not clean as expected to

121
00:05:05,220 --> 00:05:08,400
the function is doing what it says in

122
00:05:08,400 --> 00:05:11,280
the dock but the developer may be

123
00:05:11,280 --> 00:05:13,860
expecting something else

124
00:05:13,860 --> 00:05:16,860
so now let's look at the vulnerability

125
00:05:16,860 --> 00:05:19,460
in detail so

126
00:05:19,460 --> 00:05:22,620
aetv is using two lines first thing we

127
00:05:22,620 --> 00:05:25,560
were doing we were cleaning a web input

128
00:05:25,560 --> 00:05:27,960
so we received a file pass

129
00:05:27,960 --> 00:05:31,199
and we were just executing five plus dot

130
00:05:31,199 --> 00:05:33,300
field and thinking that we will get the

131
00:05:33,300 --> 00:05:36,300
uh canonical form out of it and then we

132
00:05:36,300 --> 00:05:39,180
join this file pass to plugin directory

133
00:05:39,180 --> 00:05:41,280
and so somehow we were expecting that

134
00:05:41,280 --> 00:05:46,680
all the files or would be content within

135
00:05:46,680 --> 00:05:48,960
this plugin directory and which was not

136
00:05:48,960 --> 00:05:51,660
the case because of this uh let's say

137
00:05:51,660 --> 00:05:54,479
unexpected Behavior what's really

138
00:05:54,479 --> 00:05:56,520
interesting if you see

139
00:05:56,520 --> 00:06:00,000
the source code a few lines below you'll

140
00:06:00,000 --> 00:06:04,259
see that we have a comment uh that's uh

141
00:06:04,259 --> 00:06:05,840
a word

142
00:06:05,840 --> 00:06:08,940
or the security Linker goes like that we

143
00:06:08,940 --> 00:06:11,520
are running

144
00:06:11,520 --> 00:06:13,979
and the developer said that well it's

145
00:06:13,979 --> 00:06:18,180
safe to ignore gossack warning his g304

146
00:06:18,180 --> 00:06:20,820
since we already cleanly requested five

147
00:06:20,820 --> 00:06:21,840
plus

148
00:06:21,840 --> 00:06:24,660
uh so somehow like it could feel like

149
00:06:24,660 --> 00:06:28,139
it's a bit of pity uh because

150
00:06:28,139 --> 00:06:29,400
with

151
00:06:29,400 --> 00:06:31,380
like some other two let's put it

152
00:06:31,380 --> 00:06:32,940
something that could be dangerous and

153
00:06:32,940 --> 00:06:34,740
then we reached a conclusion that well

154
00:06:34,740 --> 00:06:37,380
it's not and if you read the details of

155
00:06:37,380 --> 00:06:40,979
this uh goes like warning kind of like

156
00:06:40,979 --> 00:06:42,300
awkward

157
00:06:42,300 --> 00:06:44,880
thing is that there's a recommendation

158
00:06:44,880 --> 00:06:46,680
you need and that said yeah well you

159
00:06:46,680 --> 00:06:49,380
should just use bypass.clean so let's

160
00:06:49,380 --> 00:06:52,979
say any reasonable developer we will get

161
00:06:52,979 --> 00:06:55,259
this warning we'll look at the

162
00:06:55,259 --> 00:06:57,180
corresponding Dock and say well now I'm

163
00:06:57,180 --> 00:06:59,940
fine I'm using fightpass.clean

164
00:06:59,940 --> 00:07:02,039
but it's not

165
00:07:02,039 --> 00:07:04,680
because we have this past traversal so

166
00:07:04,680 --> 00:07:08,100
how did we fix it well somehow

167
00:07:08,100 --> 00:07:13,319
try to an easy way uh which just

168
00:07:13,319 --> 00:07:15,180
add a slash

169
00:07:15,180 --> 00:07:17,580
in front of the file price we received

170
00:07:17,580 --> 00:07:20,460
so that's now somehow we are making the

171
00:07:20,460 --> 00:07:23,400
key method PF as we expected it should

172
00:07:23,400 --> 00:07:24,479
have been

173
00:07:24,479 --> 00:07:27,599
and uh one unit test has been added to

174
00:07:27,599 --> 00:07:30,120
check those relative past stuff and

175
00:07:30,120 --> 00:07:33,599
making sure that we don't get outside of

176
00:07:33,599 --> 00:07:36,479
the plugin directory yet you could

177
00:07:36,479 --> 00:07:39,539
say that here one unit test may not be

178
00:07:39,539 --> 00:07:41,719
enough

179
00:07:42,060 --> 00:07:44,960
also sharing for transparency

180
00:07:44,960 --> 00:07:47,880
site descriptions we had on this topic

181
00:07:47,880 --> 00:07:52,460
and well three different proposals

182
00:07:54,900 --> 00:07:57,020
one of them was

183
00:07:57,020 --> 00:08:00,180
normalizing all the URLs so that in a

184
00:08:00,180 --> 00:08:02,099
business logic you don't really get

185
00:08:02,099 --> 00:08:04,139
toggled slash so you somehow you do the

186
00:08:04,139 --> 00:08:06,479
filtering before it happens in your

187
00:08:06,479 --> 00:08:09,240
logic another interesting comment was a

188
00:08:09,240 --> 00:08:12,479
way to silence this concept group

189
00:08:12,479 --> 00:08:14,880
but it's clearly it also clearly said

190
00:08:14,880 --> 00:08:16,860
that yeah we have the risk of getting

191
00:08:16,860 --> 00:08:19,020
blind to this issue because maybe it's

192
00:08:19,020 --> 00:08:22,379
not fixing it it's it's just tricking

193
00:08:22,379 --> 00:08:25,319
the uh goes like tool

194
00:08:25,319 --> 00:08:27,539
and the last question which would be the

195
00:08:27,539 --> 00:08:29,160
last point which would be really more

196
00:08:29,160 --> 00:08:31,919
interesting for us a point about like

197
00:08:31,919 --> 00:08:35,039
making a security help a library out of

198
00:08:35,039 --> 00:08:38,099
it so that other developers don't get

199
00:08:38,099 --> 00:08:41,820
tricked by that uh and then yeah

200
00:08:41,820 --> 00:08:44,940
question you can ask yourself is okay

201
00:08:44,940 --> 00:08:46,399
but

202
00:08:46,399 --> 00:08:50,640
how are we confident that

203
00:08:50,640 --> 00:08:53,940
only adding a slash

204
00:08:53,940 --> 00:08:56,700
in front of it will fix all the possible

205
00:08:56,700 --> 00:08:59,160
plus traversal issues we have

206
00:08:59,160 --> 00:09:02,459
uh so that's why now we will be

207
00:09:02,459 --> 00:09:05,880
discussing about your fuzzing

208
00:09:05,880 --> 00:09:08,459
so first thing in a few words uh the

209
00:09:08,459 --> 00:09:11,580
goal is to extend unit tests

210
00:09:11,580 --> 00:09:14,339
by predicate predicates are somehow

211
00:09:14,339 --> 00:09:16,980
General truths and Tamil we want to

212
00:09:16,980 --> 00:09:18,959
extend the uni test

213
00:09:18,959 --> 00:09:23,279
by predicate that say that those kind of

214
00:09:23,279 --> 00:09:25,500
things should never happen like for

215
00:09:25,500 --> 00:09:27,540
example for the plugin stuff you say hey

216
00:09:27,540 --> 00:09:30,720
I never want that the resulting file

217
00:09:30,720 --> 00:09:35,160
pass is out of my uh plugin folder

218
00:09:35,160 --> 00:09:38,640
and then what does filling do uh well in

219
00:09:38,640 --> 00:09:41,580
fact it's uh it's uh it's an engine that

220
00:09:41,580 --> 00:09:44,339
will generate a really big amount of

221
00:09:44,339 --> 00:09:46,800
pseudo random inputs and test them

222
00:09:46,800 --> 00:09:49,500
against those predicates

223
00:09:49,500 --> 00:09:50,940
so

224
00:09:50,940 --> 00:09:53,640
now it's available natively in go from

225
00:09:53,640 --> 00:09:55,740
version 1.18 which is really good

226
00:09:55,740 --> 00:09:57,360
because you don't have to depend on the

227
00:09:57,360 --> 00:10:00,060
external tool that is not augmented that

228
00:10:00,060 --> 00:10:03,000
is hard to use why you need specific

229
00:10:03,000 --> 00:10:04,980
config files to every training and all

230
00:10:04,980 --> 00:10:07,500
that and that what's really nice with

231
00:10:07,500 --> 00:10:10,380
the goal integration is by default as

232
00:10:10,380 --> 00:10:12,540
soon as it has if it finds something

233
00:10:12,540 --> 00:10:16,019
that breaks the predicate it will create

234
00:10:16,019 --> 00:10:18,779
the corresponding test data test data

235
00:10:18,779 --> 00:10:21,779
and then as soon as you relaunch a unit

236
00:10:21,779 --> 00:10:24,360
test this test data will be including in

237
00:10:24,360 --> 00:10:26,540
it

238
00:10:26,820 --> 00:10:28,800
the default implementation is a

239
00:10:28,800 --> 00:10:30,720
never-ending Loop because you are

240
00:10:30,720 --> 00:10:33,180
generating random inputs well in fact

241
00:10:33,180 --> 00:10:36,420
they are kind of there are deterministic

242
00:10:36,420 --> 00:10:40,320
permutations on inputs uh

243
00:10:40,320 --> 00:10:42,600
but it's it never ends because you you

244
00:10:42,600 --> 00:10:46,440
have so many like possible inputs of

245
00:10:46,440 --> 00:10:48,240
course you can configure it and say yeah

246
00:10:48,240 --> 00:10:50,040
you can stop after a given the amount of

247
00:10:50,040 --> 00:10:52,860
time and with the assumption that if you

248
00:10:52,860 --> 00:10:55,140
don't find something quickly it could be

249
00:10:55,140 --> 00:10:58,500
safe enough it smells is traded uh you

250
00:10:58,500 --> 00:11:00,300
could you can choose a number of workers

251
00:11:00,300 --> 00:11:03,540
and CPU course you you want to use

252
00:11:03,540 --> 00:11:06,839
uh so there's a rather nice tutorial but

253
00:11:06,839 --> 00:11:10,260
we will just use uh the past traversal

254
00:11:10,260 --> 00:11:12,360
which been discussing about

255
00:11:12,360 --> 00:11:14,339
you so

256
00:11:14,339 --> 00:11:17,459
what has been done is in this GitHub

257
00:11:17,459 --> 00:11:19,200
repo

258
00:11:19,200 --> 00:11:23,220
that is a really simple example uh well

259
00:11:23,220 --> 00:11:25,920
team paths where the validation logic

260
00:11:25,920 --> 00:11:27,600
has been extracted into this really

261
00:11:27,600 --> 00:11:30,480
simple method where we choose to slash

262
00:11:30,480 --> 00:11:34,220
Plus or parameter and we clean it

263
00:11:34,500 --> 00:11:37,500
and so what do you have to write to have

264
00:11:37,500 --> 00:11:40,140
the threading test working uh I won't

265
00:11:40,140 --> 00:11:42,000
focus on all the details just on the

266
00:11:42,000 --> 00:11:43,440
important points

267
00:11:43,440 --> 00:11:46,560
first thing you are declaring are test

268
00:11:46,560 --> 00:11:49,440
cases so that this is a list of inputs

269
00:11:49,440 --> 00:11:51,360
there are four

270
00:11:51,360 --> 00:11:54,420
three sorry here uh

271
00:11:54,420 --> 00:11:56,880
and those somehow correspond to unit

272
00:11:56,880 --> 00:11:58,680
tests and what's really nice with the go

273
00:11:58,680 --> 00:12:02,459
implementation is that if you run it

274
00:12:02,459 --> 00:12:07,079
as is so without like launching the

275
00:12:07,079 --> 00:12:09,120
phasing engine those will be considered

276
00:12:09,120 --> 00:12:12,480
as regular unique tests

277
00:12:12,480 --> 00:12:13,800
and then

278
00:12:13,800 --> 00:12:16,260
really in the specifics of the first

279
00:12:16,260 --> 00:12:19,019
method you you're telling which

280
00:12:19,019 --> 00:12:22,260
parameter you want to First

281
00:12:22,260 --> 00:12:25,019
then use for your parameter in the

282
00:12:25,019 --> 00:12:26,579
helper Library

283
00:12:26,579 --> 00:12:29,160
and then you write the predicates so for

284
00:12:29,160 --> 00:12:31,440
this example there are two the first one

285
00:12:31,440 --> 00:12:34,440
is yeah while you expect expect that the

286
00:12:34,440 --> 00:12:36,660
clean output starts with a slash because

287
00:12:36,660 --> 00:12:39,600
with really adding the Slash and if we

288
00:12:39,600 --> 00:12:41,399
are we don't have a slash anymore it

289
00:12:41,399 --> 00:12:43,920
smells bad it means that somehow an

290
00:12:43,920 --> 00:12:46,500
escape has been found

291
00:12:46,500 --> 00:12:49,500
and then the other predicate is making

292
00:12:49,500 --> 00:12:51,240
sure that we don't have any past

293
00:12:51,240 --> 00:12:53,100
traversal sequence a new pastoral

294
00:12:53,100 --> 00:12:57,000
sequence is slash dot slash which means

295
00:12:57,000 --> 00:13:00,440
that somehow you are able to move up uh

296
00:13:00,440 --> 00:13:03,860
One Directory

297
00:13:05,399 --> 00:13:07,380
all you have to do is either you just

298
00:13:07,380 --> 00:13:09,360
launch this really small clip but what

299
00:13:09,360 --> 00:13:11,639
you have to do is make sure you have a

300
00:13:11,639 --> 00:13:14,220
correct conversion

301
00:13:14,220 --> 00:13:16,380
run the regular unit test because of

302
00:13:16,380 --> 00:13:18,120
course if the few inputs you've already

303
00:13:18,120 --> 00:13:20,700
provided by activity tests it's not

304
00:13:20,700 --> 00:13:22,920
worth launching a b engine crunching

305
00:13:22,920 --> 00:13:25,019
millions of input

306
00:13:25,019 --> 00:13:27,360
if there's already something

307
00:13:27,360 --> 00:13:30,060
that you know that break some predicates

308
00:13:30,060 --> 00:13:32,160
and that if you really want to start the

309
00:13:32,160 --> 00:13:34,200
fuzzing loop you just have to add a

310
00:13:34,200 --> 00:13:36,300
minus minute first and the name of the

311
00:13:36,300 --> 00:13:39,199
test you want to First

312
00:13:39,600 --> 00:13:43,079
so it looks like super easy uh

313
00:13:43,079 --> 00:13:45,720
but fighting the predicate is not

314
00:13:45,720 --> 00:13:47,940
straightforward it's a bit more trial

315
00:13:47,940 --> 00:13:50,639
and error at the beginning if you will

316
00:13:50,639 --> 00:13:52,440
write predicates that are not totally

317
00:13:52,440 --> 00:13:54,660
correct and fuzzing will find valuation

318
00:13:54,660 --> 00:13:57,079
but in fact there are valid outputs

319
00:13:57,079 --> 00:14:00,920
uh and then searching will also identify

320
00:14:00,920 --> 00:14:03,540
counter cases where it's really hard to

321
00:14:03,540 --> 00:14:05,940
decide if it's a valid or invalid output

322
00:14:05,940 --> 00:14:08,339
but it's worth closing is really useful

323
00:14:08,339 --> 00:14:10,920
because it forces you to make

324
00:14:10,920 --> 00:14:13,740
requirements more explicit and because

325
00:14:13,740 --> 00:14:16,740
there will be less ambiguity you will

326
00:14:16,740 --> 00:14:19,560
have less vulnerabilities because you

327
00:14:19,560 --> 00:14:22,019
you will know what you would be the

328
00:14:22,019 --> 00:14:25,139
behavior of your software under let's

329
00:14:25,139 --> 00:14:27,959
say world word conditions

330
00:14:27,959 --> 00:14:31,440
so for example when to be totally honest

331
00:14:31,440 --> 00:14:35,040
I didn't get the correct predicate first

332
00:14:35,040 --> 00:14:37,860
so I saw that I would want to check this

333
00:14:37,860 --> 00:14:40,680
press 12 also looking at the dot slash

334
00:14:40,680 --> 00:14:43,079
because for me it was enough to say hey

335
00:14:43,079 --> 00:14:45,360
we are with this character sequence I'm

336
00:14:45,360 --> 00:14:50,220
able to move up uh directory level and

337
00:14:50,220 --> 00:14:52,260
then you just learn fuzzing on it and it

338
00:14:52,260 --> 00:14:56,639
really quickly finds a violation and it

339
00:14:56,639 --> 00:14:58,500
provides you the input

340
00:14:58,500 --> 00:15:01,440
and the output and it's really hard to

341
00:15:01,440 --> 00:15:04,500
figure out if is it a legit input like

342
00:15:04,500 --> 00:15:06,060
if you receive other five pulse

343
00:15:06,060 --> 00:15:09,660
something that's called 0.0

344
00:15:09,660 --> 00:15:12,120
and is the corresponding output valid

345
00:15:12,120 --> 00:15:15,560
well it starts with a slash

346
00:15:15,560 --> 00:15:18,980
but does it make sense does it

347
00:15:18,980 --> 00:15:21,779
cannot pass troubleshold with that and

348
00:15:21,779 --> 00:15:24,180
here you will have the question about

349
00:15:24,180 --> 00:15:26,519
like should I be more strict on input

350
00:15:26,519 --> 00:15:29,760
validation and do not trust that or

351
00:15:29,760 --> 00:15:31,980
should I try to do something in my

352
00:15:31,980 --> 00:15:36,079
validator to get rid of that

353
00:15:36,420 --> 00:15:38,760
so that's why now we will be looking at

354
00:15:38,760 --> 00:15:42,439
more complex helpers

355
00:15:43,680 --> 00:15:45,600
so

356
00:15:45,600 --> 00:15:47,100
I took this

357
00:15:47,100 --> 00:15:49,680
example uh

358
00:15:49,680 --> 00:15:50,940
and I

359
00:15:50,940 --> 00:15:54,660
somehow extracted your source code uh we

360
00:15:54,660 --> 00:15:57,060
have plugins in grafana and plugins are

361
00:15:57,060 --> 00:16:00,180
used to add features and they are

362
00:16:00,180 --> 00:16:02,639
positively just uh

363
00:16:02,639 --> 00:16:06,480
a zip file that you unzip in a folder on

364
00:16:06,480 --> 00:16:09,000
the server and what we don't want of

365
00:16:09,000 --> 00:16:11,220
course is that within this folder that

366
00:16:11,220 --> 00:16:14,220
there are Sim links that point out

367
00:16:14,220 --> 00:16:17,459
outside of the plugin directory so for

368
00:16:17,459 --> 00:16:20,579
that we have a helper method that's

369
00:16:20,579 --> 00:16:23,639
called uh is seeming relative Tool It's

370
00:16:23,639 --> 00:16:27,060
rather artery so yeah well go is not my

371
00:16:27,060 --> 00:16:28,920
main language even though I have to read

372
00:16:28,920 --> 00:16:31,199
it three times it was a bit hard to

373
00:16:31,199 --> 00:16:33,060
figure out what it was doing so it's

374
00:16:33,060 --> 00:16:35,579
doing a clean uh

375
00:16:35,579 --> 00:16:37,860
then it's going it's calling the fight

376
00:16:37,860 --> 00:16:39,540
pass the trail you know if it's a

377
00:16:39,540 --> 00:16:42,180
relative pass or not and then it has an

378
00:16:42,180 --> 00:16:44,579
uh return condition well that's

379
00:16:44,579 --> 00:16:47,940
basically looking for DOT slash

380
00:16:47,940 --> 00:16:50,820
which is just like the sequence I was

381
00:16:50,820 --> 00:16:53,300
choosing before that uh

382
00:16:53,300 --> 00:16:56,339
well a predicate I was using before that

383
00:16:56,339 --> 00:16:58,440
was not really okay

384
00:16:58,440 --> 00:17:01,860
so when doing that code review I was

385
00:17:01,860 --> 00:17:05,040
just yeah well uh maybe fuzzing can help

386
00:17:05,040 --> 00:17:08,339
decide if like this validation logic is

387
00:17:08,339 --> 00:17:11,520
doing its job or not so for that I had

388
00:17:11,520 --> 00:17:13,559
to write the first test

389
00:17:13,559 --> 00:17:16,079
uh

390
00:17:16,079 --> 00:17:19,140
and then it became obvious that the

391
00:17:19,140 --> 00:17:20,760
predicate is not straightforward so

392
00:17:20,760 --> 00:17:24,059
somehow are too extract it into a

393
00:17:24,059 --> 00:17:26,760
function called expected result and then

394
00:17:26,760 --> 00:17:28,740
in the fuzzing logic the only thing we

395
00:17:28,740 --> 00:17:30,059
are doing is

396
00:17:30,059 --> 00:17:34,740
Ed output of the helper difference from

397
00:17:34,740 --> 00:17:37,140
the expectation from the predicate and

398
00:17:37,140 --> 00:17:39,960
if so we found a violation

399
00:17:39,960 --> 00:17:43,080
and then the predicate experimentation

400
00:17:43,080 --> 00:17:48,360
here well uh when you need to express it

401
00:17:48,360 --> 00:17:50,940
then you quickly realize that somehow

402
00:17:50,940 --> 00:17:53,100
you have to re-implement the logic of

403
00:17:53,100 --> 00:17:55,080
the validator and it's important that's

404
00:17:55,080 --> 00:17:57,480
quite common in unit testing either

405
00:17:57,480 --> 00:18:01,020
you're just looking at an input a and

406
00:18:01,020 --> 00:18:03,179
you say you get B and input C and then

407
00:18:03,179 --> 00:18:05,940
you get D or you try to be more generic

408
00:18:05,940 --> 00:18:08,940
and somehow you have to do

409
00:18:08,940 --> 00:18:10,919
implementation number two and compare

410
00:18:10,919 --> 00:18:12,600
implementation number two with your

411
00:18:12,600 --> 00:18:15,059
original one so it's what I'm trying to

412
00:18:15,059 --> 00:18:17,100
do here with the naive implementation

413
00:18:17,100 --> 00:18:19,559
looking if it's like if it looks like an

414
00:18:19,559 --> 00:18:21,419
absolute pass

415
00:18:21,419 --> 00:18:25,140
trying not to use the Google standard

416
00:18:25,140 --> 00:18:28,380
library to be sure we are fully covered

417
00:18:28,380 --> 00:18:31,799
and then doing a naive John of pass and

418
00:18:31,799 --> 00:18:33,360
all that

419
00:18:33,360 --> 00:18:35,240
and then what's really interesting there

420
00:18:35,240 --> 00:18:38,580
uh and then as soon as you launch fading

421
00:18:38,580 --> 00:18:41,940
a violation is identified something like

422
00:18:41,940 --> 00:18:45,240
some parts that will be dot slash dot

423
00:18:45,240 --> 00:18:46,020
dot

424
00:18:46,020 --> 00:18:48,840
where the validator says yeah yeah it's

425
00:18:48,840 --> 00:18:52,320
it's legit but then I will my code is

426
00:18:52,320 --> 00:18:53,580
expecting

427
00:18:53,580 --> 00:18:55,679
that it's rejected

428
00:18:55,679 --> 00:18:57,720
and then when I found that it was

429
00:18:57,720 --> 00:18:59,820
unclear to me what

430
00:18:59,820 --> 00:19:01,799
what should be the behavior so we

431
00:19:01,799 --> 00:19:04,620
discovered that in this PR and then the

432
00:19:04,620 --> 00:19:06,299
conclusion was that yeah we don't want

433
00:19:06,299 --> 00:19:08,940
to accept it so the fix has been made

434
00:19:08,940 --> 00:19:11,280
again if you look at the fix

435
00:19:11,280 --> 00:19:14,280
doesn't seem obvious that it's the let's

436
00:19:14,280 --> 00:19:15,000
say

437
00:19:15,000 --> 00:19:17,760
a perfect solution for it so then

438
00:19:17,760 --> 00:19:20,280
filling is again useful because you

439
00:19:20,280 --> 00:19:21,900
first the new implementation and then

440
00:19:21,900 --> 00:19:24,480
you get no violation in a reasonable

441
00:19:24,480 --> 00:19:26,400
amount of time and then you can conclude

442
00:19:26,400 --> 00:19:29,480
that the future will be good enough

443
00:19:29,480 --> 00:19:32,640
uh yeah so

444
00:19:32,640 --> 00:19:35,820
writing predicates can be hard uh

445
00:19:35,820 --> 00:19:38,640
because uh as we've seen here it was

446
00:19:38,640 --> 00:19:40,679
rather straightforward for for the

447
00:19:40,679 --> 00:19:44,039
example one where it's just a one-liner

448
00:19:44,039 --> 00:19:49,020
uh so if the emperor is small uh

449
00:19:49,020 --> 00:19:52,520
and you can you can easily express

450
00:19:52,520 --> 00:19:55,559
predicates with sentences like should

451
00:19:55,559 --> 00:19:57,299
not content this character or sequence

452
00:19:57,299 --> 00:19:58,940
but if the

453
00:19:58,940 --> 00:20:02,039
helper gets bigger you will need this

454
00:20:02,039 --> 00:20:04,799
complex validation logic to implement it

455
00:20:04,799 --> 00:20:07,140
and of course if you just copy paste the

456
00:20:07,140 --> 00:20:09,600
original implementation in the first

457
00:20:09,600 --> 00:20:12,480
test it's useless because you are

458
00:20:12,480 --> 00:20:13,679
comparing

459
00:20:13,679 --> 00:20:17,940
output from the expected output and if

460
00:20:17,940 --> 00:20:20,520
his expected output is always the output

461
00:20:20,520 --> 00:20:22,440
because it's a copy paste of the

462
00:20:22,440 --> 00:20:24,720
implementation you are doing just

463
00:20:24,720 --> 00:20:25,559
nothing

464
00:20:25,559 --> 00:20:28,860
uh so you need to write your

465
00:20:28,860 --> 00:20:32,160
own implementation and for that you need

466
00:20:32,160 --> 00:20:34,260
not to get biased by the existing one

467
00:20:34,260 --> 00:20:37,380
because otherwise again you would be

468
00:20:37,380 --> 00:20:39,780
just comparing similar things and maybe

469
00:20:39,780 --> 00:20:41,880
a corner case is missing and you need to

470
00:20:41,880 --> 00:20:43,440
think about it

471
00:20:43,440 --> 00:20:47,100
a team of complex question I faced was

472
00:20:47,100 --> 00:20:49,919
there were two extent should I draft the

473
00:20:49,919 --> 00:20:51,860
standard libraries because we saw that

474
00:20:51,860 --> 00:20:54,240
flightpass.fin was tricky

475
00:20:54,240 --> 00:20:56,700
and so for that I wanted to share the

476
00:20:56,700 --> 00:20:58,980
list my lessons learned when I was

477
00:20:58,980 --> 00:21:01,500
trying to validate the file storage API

478
00:21:01,500 --> 00:21:04,440
of grafana so it's a new API that will

479
00:21:04,440 --> 00:21:07,080
allow to do file uploads on the on the

480
00:21:07,080 --> 00:21:09,360
server so of course password is a big

481
00:21:09,360 --> 00:21:10,380
concern

482
00:21:10,380 --> 00:21:13,380
uh and there's a rather complex validate

483
00:21:13,380 --> 00:21:17,100
path function in this API so add to be

484
00:21:17,100 --> 00:21:18,360
implemented

485
00:21:18,360 --> 00:21:21,720
and it was really time consuming

486
00:21:21,720 --> 00:21:25,200
uh I did not identify any violation

487
00:21:25,200 --> 00:21:28,140
which like somehow is good because it

488
00:21:28,140 --> 00:21:30,120
means like the current validate pass

489
00:21:30,120 --> 00:21:34,200
seems to be doing the job yet I'm not on

490
00:21:34,200 --> 00:21:37,679
100 confident that I did not miss some

491
00:21:37,679 --> 00:21:41,039
Chrono cases because it was hard to

492
00:21:41,039 --> 00:21:44,780
re-implement this complex logic

493
00:21:45,419 --> 00:21:48,720
okay so next step we still have some

494
00:21:48,720 --> 00:21:50,700
phasing for it and all that so it can be

495
00:21:50,700 --> 00:21:53,100
useful so what what can we do to

496
00:21:53,100 --> 00:21:56,280
are getting more value out of phasing

497
00:21:56,280 --> 00:21:59,880
well first uh yeah as we said you should

498
00:21:59,880 --> 00:22:02,159
make security helper as simple as

499
00:22:02,159 --> 00:22:05,460
possible and then one is done you can

500
00:22:05,460 --> 00:22:07,620
easily include trading in the cicd

501
00:22:07,620 --> 00:22:10,320
pipeline so you make sure you will not

502
00:22:10,320 --> 00:22:12,900
have any regression so let's say in a

503
00:22:12,900 --> 00:22:14,880
few months some other developer decide

504
00:22:14,880 --> 00:22:20,159
to refactor this example to logic uh and

505
00:22:20,159 --> 00:22:23,880
it breaks it like uh an unfolding could

506
00:22:23,880 --> 00:22:26,760
find a violation quickly and and we can

507
00:22:26,760 --> 00:22:29,220
realize that yeah the validator is not

508
00:22:29,220 --> 00:22:31,500
doing the job anymore

509
00:22:31,500 --> 00:22:35,340
of course once you have those uh

510
00:22:35,340 --> 00:22:37,559
security helpers like you can that you

511
00:22:37,559 --> 00:22:39,360
can consider trusted because they are

512
00:22:39,360 --> 00:22:40,080
first

513
00:22:40,080 --> 00:22:42,480
you should communicate about them so

514
00:22:42,480 --> 00:22:45,000
that like more developer uses them

515
00:22:45,000 --> 00:22:47,640
uh and then if you want to make sure

516
00:22:47,640 --> 00:22:50,580
that they are really used you could use

517
00:22:50,580 --> 00:22:53,640
some uh static analysis tooling like Sam

518
00:22:53,640 --> 00:22:54,600
grab

519
00:22:54,600 --> 00:22:56,940
so that you can check if like in your

520
00:22:56,940 --> 00:22:58,799
web processories

521
00:22:58,799 --> 00:23:01,500
if those security helpers are really

522
00:23:01,500 --> 00:23:05,820
used instead of the dangerous features

523
00:23:05,820 --> 00:23:07,020
thank you

524
00:23:07,020 --> 00:23:11,220
so to wrap up uh so

525
00:23:11,220 --> 00:23:13,860
yeah you've been warned that five past

526
00:23:13,860 --> 00:23:14,940
13

527
00:23:14,940 --> 00:23:17,039
can be tricky when you try to protect

528
00:23:17,039 --> 00:23:20,220
from Pastor reversal uh

529
00:23:20,220 --> 00:23:23,039
I hope that you are convinced that

530
00:23:23,039 --> 00:23:26,220
phasing can be useful in real life as it

531
00:23:26,220 --> 00:23:28,860
improves your automatic testing coverage

532
00:23:28,860 --> 00:23:31,220
and it's identity

533
00:23:31,220 --> 00:23:34,500
to identify Corner cases that would not

534
00:23:34,500 --> 00:23:35,640
be obvious

535
00:23:35,640 --> 00:23:38,220
uh and in the end it should make you

536
00:23:38,220 --> 00:23:39,659
more confident with your security

537
00:23:39,659 --> 00:23:42,720
outdoor libraries and we've also see

538
00:23:42,720 --> 00:23:45,120
that yeah well go fishing is easy to use

539
00:23:45,120 --> 00:23:47,880
and really nicely integrated and it can

540
00:23:47,880 --> 00:23:49,980
be really efficient as long as your

541
00:23:49,980 --> 00:23:52,440
target simple functions

542
00:23:52,440 --> 00:23:56,039
and now I would be really happy to take

543
00:23:56,039 --> 00:23:58,799
all the questions you have about that

544
00:23:58,799 --> 00:24:01,520
thank you

