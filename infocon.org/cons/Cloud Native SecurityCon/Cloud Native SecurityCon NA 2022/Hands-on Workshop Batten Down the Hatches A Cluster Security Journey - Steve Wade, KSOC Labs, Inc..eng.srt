1
00:00:00,299 --> 00:00:02,159
hey can everyone hear me okay

2
00:00:02,159 --> 00:00:04,380
does anyone first off does anyone not

3
00:00:04,380 --> 00:00:06,660
have a piece of paper like this if you

4
00:00:06,660 --> 00:00:08,820
don't put your hand up and my colleague

5
00:00:08,820 --> 00:00:12,679
will come and give you one of these

6
00:00:13,679 --> 00:00:15,179
so whilst he's doing that what we're

7
00:00:15,179 --> 00:00:17,160
going to try and achieve in the next 70

8
00:00:17,160 --> 00:00:20,820
minutes is to perform an audit of a

9
00:00:20,820 --> 00:00:22,740
cluster right it's almost impossible to

10
00:00:22,740 --> 00:00:25,080
be able to secure a kubernetes cluster

11
00:00:25,080 --> 00:00:27,180
in 70 minutes

12
00:00:27,180 --> 00:00:28,439
so what we're going to do is we're going

13
00:00:28,439 --> 00:00:32,040
to I'm going to take you on a journey of

14
00:00:32,040 --> 00:00:34,980
where you should look

15
00:00:34,980 --> 00:00:36,960
what you should be thinking about when

16
00:00:36,960 --> 00:00:39,000
you're performing said audit and then

17
00:00:39,000 --> 00:00:41,280
finally what defense mechanisms can we

18
00:00:41,280 --> 00:00:42,899
put in so that once we have a good

19
00:00:42,899 --> 00:00:44,640
understanding of how secure and secure

20
00:00:44,640 --> 00:00:46,140
our cluster is

21
00:00:46,140 --> 00:00:49,200
when new workloads and new resources

22
00:00:49,200 --> 00:00:51,059
are trying to be deployed to our cluster

23
00:00:51,059 --> 00:00:53,399
we want to be able to stop the bad ones

24
00:00:53,399 --> 00:00:54,960
from getting in right you don't have to

25
00:00:54,960 --> 00:00:56,340
keep repeating this order over and over

26
00:00:56,340 --> 00:00:58,460
again

27
00:00:59,160 --> 00:01:00,840
so to start with my name's Steve Wade

28
00:01:00,840 --> 00:01:03,840
I'm head of engineering at uh ksoc and I

29
00:01:03,840 --> 00:01:08,760
have my assistant boss uh Jimmy with me

30
00:01:08,760 --> 00:01:11,460
you were mostly here before so hey

31
00:01:11,460 --> 00:01:14,040
everyone yeah

32
00:01:14,040 --> 00:01:15,240
so

33
00:01:15,240 --> 00:01:17,159
a brief agenda what's the mission we're

34
00:01:17,159 --> 00:01:19,680
trying to complete so the first 10

35
00:01:19,680 --> 00:01:21,180
minutes is going to be a cluster set up

36
00:01:21,180 --> 00:01:22,500
so everyone's going to set up their own

37
00:01:22,500 --> 00:01:23,880
cluster

38
00:01:23,880 --> 00:01:25,680
and they'll be performing an audit of

39
00:01:25,680 --> 00:01:28,259
that cluster then we're going to perform

40
00:01:28,259 --> 00:01:29,939
an asset inventory so we're going to

41
00:01:29,939 --> 00:01:32,720
look at what's running on the cluster

42
00:01:32,720 --> 00:01:34,799
what are the things that are important

43
00:01:34,799 --> 00:01:36,960
to us when we're performing in audit

44
00:01:36,960 --> 00:01:38,820
then we're going to talk about workload

45
00:01:38,820 --> 00:01:40,799
hardening so how can we

46
00:01:40,799 --> 00:01:42,659
how can we make the workloads that are

47
00:01:42,659 --> 00:01:45,000
currently deployed more secure what are

48
00:01:45,000 --> 00:01:47,460
the things that we should look out for

49
00:01:47,460 --> 00:01:48,840
then we're going to move on to our back

50
00:01:48,840 --> 00:01:51,180
so everybody knows you know our back

51
00:01:51,180 --> 00:01:55,079
anywhere is a is a bit of a mess so

52
00:01:55,079 --> 00:01:57,540
what are some of the easy attack vectors

53
00:01:57,540 --> 00:01:59,280
from an rbac standpoint that allow you

54
00:01:59,280 --> 00:02:01,380
to elevate your privileges see things

55
00:02:01,380 --> 00:02:02,640
you shouldn't be able to see and do

56
00:02:02,640 --> 00:02:04,680
things you shouldn't be able to do

57
00:02:04,680 --> 00:02:05,880
and then finally we're going to finish

58
00:02:05,880 --> 00:02:07,799
up with some defensive guard rails so

59
00:02:07,799 --> 00:02:09,360
we're going to try and deploy some

60
00:02:09,360 --> 00:02:10,860
workloads

61
00:02:10,860 --> 00:02:12,959
and some of them are going to get in and

62
00:02:12,959 --> 00:02:15,860
some of them are not going to get in

63
00:02:16,140 --> 00:02:18,420
so let's get started

64
00:02:18,420 --> 00:02:21,780
in on your laptop in a Incognito or

65
00:02:21,780 --> 00:02:24,360
private browser if you will browse to

66
00:02:24,360 --> 00:02:26,780
this link

67
00:02:28,200 --> 00:02:29,640
it should take you to something that

68
00:02:29,640 --> 00:02:32,160
looks a little bit like this do a quick

69
00:02:32,160 --> 00:02:34,640
zoom in

70
00:02:34,680 --> 00:02:35,819
sure

71
00:02:35,819 --> 00:02:39,180
it's the internet behaving right now

72
00:02:39,180 --> 00:02:40,620
I guess we're about to find out we're

73
00:02:40,620 --> 00:02:43,879
about to find out yes

74
00:02:55,080 --> 00:02:59,120
everyone successfully on the site

75
00:03:01,019 --> 00:03:02,700
okay so if you click on the getting

76
00:03:02,700 --> 00:03:07,399
started link on the left hand side there

77
00:03:08,700 --> 00:03:10,980
don't double click on this link open it

78
00:03:10,980 --> 00:03:12,360
in a new tab because we're going to

79
00:03:12,360 --> 00:03:15,860
flick back and forward between

80
00:03:17,220 --> 00:03:21,560
the URL one more time okay sure

81
00:03:28,739 --> 00:03:31,700
no problem

82
00:03:33,060 --> 00:03:35,340
so when you get to this uh blue button

83
00:03:35,340 --> 00:03:37,680
if you right click and open in new tab

84
00:03:37,680 --> 00:03:39,180
because we're going to use this website

85
00:03:39,180 --> 00:03:41,099
to drive the workshop that we're about

86
00:03:41,099 --> 00:03:43,518
to go through

87
00:03:47,159 --> 00:03:49,080
you should receive a login prompt if you

88
00:03:49,080 --> 00:03:50,819
log in using the credentials on your

89
00:03:50,819 --> 00:03:53,298
piece of paper

90
00:04:02,280 --> 00:04:04,980
using Incognito is really important here

91
00:04:04,980 --> 00:04:07,080
so you don't get mixed up with

92
00:04:07,080 --> 00:04:09,360
your corporate G Suite accounts or your

93
00:04:09,360 --> 00:04:11,459
personal G Suite

94
00:04:11,459 --> 00:04:13,500
oh Adam's Adam will bring whatever to

95
00:04:13,500 --> 00:04:15,680
you

96
00:04:23,520 --> 00:04:24,960
when you get here just click I

97
00:04:24,960 --> 00:04:27,138
understand

98
00:04:40,139 --> 00:04:42,000
any paper if anyone needs any help just

99
00:04:42,000 --> 00:04:44,040
please put your hands up and add them

100
00:04:44,040 --> 00:04:46,199
where Jimmy will come and assist do we

101
00:04:46,199 --> 00:04:47,580
have one more no

102
00:04:47,580 --> 00:04:49,440
I don't know what do we have one

103
00:04:49,440 --> 00:04:52,320
we hit our 60 okay

104
00:04:52,320 --> 00:04:55,979
is anybody following along playing along

105
00:04:55,979 --> 00:05:00,680
you can you can do this in your own

106
00:05:13,100 --> 00:05:15,600
click through when you ask when it's

107
00:05:15,600 --> 00:05:17,759
asking about the cloud show click Start

108
00:05:17,759 --> 00:05:19,860
Cloud show

109
00:05:19,860 --> 00:05:22,320
when you get to this section down here

110
00:05:22,320 --> 00:05:24,300
this is the important piece so there is

111
00:05:24,300 --> 00:05:25,740
a repository that we're going to clone

112
00:05:25,740 --> 00:05:27,960
into Cloud shell

113
00:05:27,960 --> 00:05:29,340
that's going to make things a lot easier

114
00:05:29,340 --> 00:05:31,979
so don't just hit confirm you need to

115
00:05:31,979 --> 00:05:33,240
scroll down

116
00:05:33,240 --> 00:05:35,340
click trust repo

117
00:05:35,340 --> 00:05:36,900
hopefully you'll trust me that I'm not

118
00:05:36,900 --> 00:05:38,160
going to go and do something Road for

119
00:05:38,160 --> 00:05:39,000
you

120
00:05:39,000 --> 00:05:40,020
um

121
00:05:40,020 --> 00:05:41,759
hit trust repo and then finally hit

122
00:05:41,759 --> 00:05:44,300
confirm

123
00:05:48,900 --> 00:05:50,699
I'm going to stop at this point and make

124
00:05:50,699 --> 00:05:52,020
sure that everybody gets to this point

125
00:05:52,020 --> 00:05:54,060
where they have a cloud shell running

126
00:05:54,060 --> 00:05:57,139
before I move on

127
00:06:15,840 --> 00:06:19,820
anybody not got to this stage yet

128
00:06:27,600 --> 00:06:29,340
Adam

129
00:06:29,340 --> 00:06:30,960
can you come and assist this gentleman

130
00:06:30,960 --> 00:06:33,900
at the back here he's struggling to sure

131
00:06:33,900 --> 00:06:36,500
or Andre

132
00:06:41,400 --> 00:06:44,060
Shout

133
00:06:56,660 --> 00:06:59,819
to let people use their G Suite why

134
00:06:59,819 --> 00:07:04,280
you're lucky because we hit oh 16.

135
00:07:04,280 --> 00:07:07,460
no problem

136
00:07:17,479 --> 00:07:20,039
okay so the first thing we're going to

137
00:07:20,039 --> 00:07:22,020
do is

138
00:07:22,020 --> 00:07:24,240
we are going to run make in it so what

139
00:07:24,240 --> 00:07:25,979
make in it is going to do is it's going

140
00:07:25,979 --> 00:07:28,319
to ask us to authenticate when it asks

141
00:07:28,319 --> 00:07:29,520
you to authenticate we're going to go

142
00:07:29,520 --> 00:07:31,680
through the the flow use the same

143
00:07:31,680 --> 00:07:33,000
credentials that are on your piece of

144
00:07:33,000 --> 00:07:34,380
paper

145
00:07:34,380 --> 00:07:37,500
then we're going to install some default

146
00:07:37,500 --> 00:07:39,599
workloads and a couple of uh binaries

147
00:07:39,599 --> 00:07:40,500
and packages that we're going to

148
00:07:40,500 --> 00:07:43,259
leverage throughout this workshop and

149
00:07:43,259 --> 00:07:45,660
then we'll get started with uh the

150
00:07:45,660 --> 00:07:48,599
workload and asset configuration

151
00:07:48,599 --> 00:07:50,099
so what you're going to want to do is

152
00:07:50,099 --> 00:07:54,660
flick between these two tabs so this uh

153
00:07:54,660 --> 00:07:56,220
little button here allows you to be able

154
00:07:56,220 --> 00:07:58,919
to copy and paste into your clipboard so

155
00:07:58,919 --> 00:08:03,258
firstly copy and paste this one

156
00:08:09,419 --> 00:08:10,740
sure

157
00:08:10,740 --> 00:08:12,800
um

158
00:08:13,699 --> 00:08:15,840
it will ask you for an authentication

159
00:08:15,840 --> 00:08:17,699
code you simply need to take this URL

160
00:08:17,699 --> 00:08:19,940
here

161
00:08:24,660 --> 00:08:27,919
open in a new window

162
00:08:28,080 --> 00:08:32,659
log in again with your credentials

163
00:08:43,020 --> 00:08:46,819
copy this token at the bottom

164
00:08:52,620 --> 00:08:55,820
enter the token here

165
00:08:56,880 --> 00:08:59,959
click authorize

166
00:09:41,279 --> 00:09:45,320
we need to pause to make sure everyone's

167
00:09:48,899 --> 00:09:51,860
and then reconnect

168
00:09:52,200 --> 00:09:54,980
you can also do this

169
00:09:57,959 --> 00:10:01,279
should have it right here

170
00:10:29,339 --> 00:10:32,779
how do I do that

171
00:10:43,980 --> 00:10:46,440
all right did you give it the project ID

172
00:10:46,440 --> 00:10:49,160
this one

173
00:10:58,860 --> 00:11:01,519
all right

174
00:11:05,040 --> 00:11:06,779
once this has worked once you've gone

175
00:11:06,779 --> 00:11:07,980
through the flow you should be able to

176
00:11:07,980 --> 00:11:09,300
see this little prompt down the bottom

177
00:11:09,300 --> 00:11:11,220
the key Point here is that you see this

178
00:11:11,220 --> 00:11:15,440
in yellow this should be your project ID

179
00:11:15,779 --> 00:11:17,700
if this is not your project ID put your

180
00:11:17,700 --> 00:11:18,779
hand up and I'll go through the flow

181
00:11:18,779 --> 00:11:21,720
again so we can make it work okay so

182
00:11:21,720 --> 00:11:23,519
at the top here

183
00:11:23,519 --> 00:11:27,680
you want to select the organization

184
00:11:28,560 --> 00:11:32,160
select securecubernetes.com

185
00:11:32,459 --> 00:11:35,300
click through on here

186
00:11:38,940 --> 00:11:41,540
once you've clicked through on there run

187
00:11:41,540 --> 00:11:45,980
gcloud auth login again

188
00:11:54,720 --> 00:11:58,160
and you should repeat the flow

189
00:11:59,040 --> 00:12:01,500
so It'll ask you to authorize you'll get

190
00:12:01,500 --> 00:12:05,899
the token copy the token back in

191
00:12:14,519 --> 00:12:17,279
sure so from the top here select the

192
00:12:17,279 --> 00:12:18,480
organization

193
00:12:18,480 --> 00:12:21,120
select securecubernetes.com select your

194
00:12:21,120 --> 00:12:23,300
project

195
00:12:24,300 --> 00:12:26,579
once you've selected your project come

196
00:12:26,579 --> 00:12:30,120
back to the terminal do a gcloud auth

197
00:12:30,120 --> 00:12:32,360
login

198
00:12:44,040 --> 00:12:46,380
you'll go through the flow

199
00:12:46,380 --> 00:12:48,600
token should pop up copy and paste the

200
00:12:48,600 --> 00:12:50,760
token into the terminal

201
00:12:50,760 --> 00:12:54,019
complete the prompts

202
00:12:55,019 --> 00:12:56,579
and then you should see this little

203
00:12:56,579 --> 00:13:00,199
yellow section at the bottom

204
00:13:07,680 --> 00:13:11,180
okay anyone not at this section

205
00:13:13,920 --> 00:13:17,959
there you go can you zoom in yeah

206
00:13:18,240 --> 00:13:20,760
current project

207
00:13:20,760 --> 00:13:24,319
all right let me come home

208
00:14:42,779 --> 00:14:45,500
foreign

209
00:14:46,260 --> 00:14:48,439
foreign

210
00:15:54,540 --> 00:15:57,800
all right are we good to continue

211
00:15:58,079 --> 00:16:01,459
cool okay so

212
00:16:03,959 --> 00:16:05,880
once you perform this if you do a cube

213
00:16:05,880 --> 00:16:08,959
CTL get pods

214
00:16:09,420 --> 00:16:12,319
oh hold on

215
00:16:23,279 --> 00:16:25,860
if you rerun in it it's gonna because we

216
00:16:25,860 --> 00:16:27,480
need to go and get a cube config and I

217
00:16:27,480 --> 00:16:29,760
think now we've finally authenticated

218
00:16:29,760 --> 00:16:32,519
we should be able to do this so run dot

219
00:16:32,519 --> 00:16:36,079
slash init.sh again

220
00:16:54,000 --> 00:16:56,519
okay so what I did there I run dot slash

221
00:16:56,519 --> 00:16:58,920
init.sh you'll go through the loop again

222
00:16:58,920 --> 00:17:01,259
now you're authenticated

223
00:17:01,259 --> 00:17:03,360
we will obtain a cubeconfig for this

224
00:17:03,360 --> 00:17:04,500
cluster

225
00:17:04,500 --> 00:17:07,760
and then we should be able to start

226
00:17:26,459 --> 00:17:28,079
to validate that your keep config is

227
00:17:28,079 --> 00:17:30,240
working if we run Cube CTL get nodes you

228
00:17:30,240 --> 00:17:31,799
should get an output like this just a

229
00:17:31,799 --> 00:17:34,400
single node

230
00:17:47,340 --> 00:17:50,580
anybody not at this point

231
00:17:50,580 --> 00:17:54,139
stuck on selling the project still

232
00:17:56,160 --> 00:18:00,000
okay where did you where did you get to

233
00:18:00,000 --> 00:18:02,880
okay so did you so

234
00:18:02,880 --> 00:18:06,059
no problem if you if you got this link

235
00:18:06,059 --> 00:18:12,178
okay so go to tinyurl.com Workshop

236
00:18:15,660 --> 00:18:18,200
no problem

237
00:18:31,740 --> 00:18:33,240
then

238
00:18:33,240 --> 00:18:34,679
what you're going to want to do is make

239
00:18:34,679 --> 00:18:35,940
sure you open that in an incognito

240
00:18:35,940 --> 00:18:39,660
browser then on this button when you

241
00:18:39,660 --> 00:18:41,820
open it open it in a new tab because

242
00:18:41,820 --> 00:18:43,760
we're going to flick between the website

243
00:18:43,760 --> 00:18:47,720
and the cluster

244
00:18:48,480 --> 00:18:51,860
once you're in there

245
00:18:53,400 --> 00:18:56,220
you want to select the project so at the

246
00:18:56,220 --> 00:18:58,580
top here

247
00:18:59,100 --> 00:19:01,980
go to the top like so I went

248
00:19:01,980 --> 00:19:05,039
right at the top here

249
00:19:05,039 --> 00:19:07,460
okay

250
00:19:13,980 --> 00:19:16,620
can you help the guy in the purple yeah

251
00:19:16,620 --> 00:19:19,260
just get get set up no problem

252
00:19:19,260 --> 00:19:21,799
okay

253
00:19:21,960 --> 00:19:24,900
so the first thing that we are going to

254
00:19:24,900 --> 00:19:29,460
perform is an asset inventory so we want

255
00:19:29,460 --> 00:19:31,799
to know what's running what are we

256
00:19:31,799 --> 00:19:33,600
dealing with what are the things that we

257
00:19:33,600 --> 00:19:35,340
need to start looking at

258
00:19:35,340 --> 00:19:37,320
from an audit perspective

259
00:19:37,320 --> 00:19:40,799
so I'm not going to go down this list

260
00:19:40,799 --> 00:19:42,240
extensively of the things that you

261
00:19:42,240 --> 00:19:43,559
should be looking for however some

262
00:19:43,559 --> 00:19:45,299
things that are useful and I would

263
00:19:45,299 --> 00:19:47,400
recommend you look for is

264
00:19:47,400 --> 00:19:48,960
the version of kubernetes that's

265
00:19:48,960 --> 00:19:51,240
currently running reasons why this is

266
00:19:51,240 --> 00:19:53,760
important there are cves in some

267
00:19:53,760 --> 00:19:55,760
kubernetes versions

268
00:19:55,760 --> 00:19:59,400
there are also deprecations as well in

269
00:19:59,400 --> 00:20:02,400
some of the API specifications so

270
00:20:02,400 --> 00:20:04,559
not necessarily a security thing to be

271
00:20:04,559 --> 00:20:06,900
aware of but when it comes to upgrading

272
00:20:06,900 --> 00:20:08,940
your kubernetes clusters it can be an

273
00:20:08,940 --> 00:20:11,700
important thing to know right so

274
00:20:11,700 --> 00:20:14,880
if there's a deprecated API you're still

275
00:20:14,880 --> 00:20:16,559
using that API

276
00:20:16,559 --> 00:20:18,299
you upgrade your kubernetes cluster and

277
00:20:18,299 --> 00:20:19,919
that API doesn't exist

278
00:20:19,919 --> 00:20:22,140
the first time you deploy your resource

279
00:20:22,140 --> 00:20:24,179
it will work when you try and upgrade

280
00:20:24,179 --> 00:20:25,559
that resource so you upgrade a

281
00:20:25,559 --> 00:20:27,240
deployment or you upgrade a replica set

282
00:20:27,240 --> 00:20:28,620
it will not work

283
00:20:28,620 --> 00:20:30,179
so one of the things you really want to

284
00:20:30,179 --> 00:20:32,340
focus on specifically if you're

285
00:20:32,340 --> 00:20:34,559
a platform engineer and responsible for

286
00:20:34,559 --> 00:20:35,820
you for the kubernetes Clusters that

287
00:20:35,820 --> 00:20:37,919
you're running at your organization is

288
00:20:37,919 --> 00:20:40,140
to try and be

289
00:20:40,140 --> 00:20:41,760
ahead of the curve of the application

290
00:20:41,760 --> 00:20:43,200
developers right because what you don't

291
00:20:43,200 --> 00:20:45,059
want to do is upgrade your kubernetes

292
00:20:45,059 --> 00:20:46,020
cluster and then the application

293
00:20:46,020 --> 00:20:47,039
developers can't deploy their

294
00:20:47,039 --> 00:20:48,720
applications that's not a that's not a

295
00:20:48,720 --> 00:20:50,880
good look

296
00:20:50,880 --> 00:20:54,660
so there are some links here to some

297
00:20:54,660 --> 00:20:57,780
official kubernetes cve

298
00:20:57,780 --> 00:20:59,880
streams so you can see all of the cves

299
00:20:59,880 --> 00:21:01,320
kubernetes

300
00:21:01,320 --> 00:21:03,260
does have cves

301
00:21:03,260 --> 00:21:05,400
that you can go through the versions

302
00:21:05,400 --> 00:21:06,900
that they were fixed in

303
00:21:06,900 --> 00:21:08,940
I'm not going to go through these in

304
00:21:08,940 --> 00:21:11,820
detail but feel free to to take a look

305
00:21:11,820 --> 00:21:14,659
at these in your own time

306
00:21:15,059 --> 00:21:19,140
then from a uh from a managed provider

307
00:21:19,140 --> 00:21:21,299
perspective there are also a number of

308
00:21:21,299 --> 00:21:23,520
things to note here so they're like eks

309
00:21:23,520 --> 00:21:26,520
and gke and an AKs on Azure they they

310
00:21:26,520 --> 00:21:28,260
all have limits right there's there's

311
00:21:28,260 --> 00:21:29,940
edges and boundaries that you can't go

312
00:21:29,940 --> 00:21:31,980
outside of

313
00:21:31,980 --> 00:21:34,260
um I've left the links here they are

314
00:21:34,260 --> 00:21:38,120
important things to note specifically

315
00:21:38,159 --> 00:21:39,960
um when when you're dealing with

316
00:21:39,960 --> 00:21:41,460
security groups and you know your

317
00:21:41,460 --> 00:21:43,740
applications need to talk outbound to

318
00:21:43,740 --> 00:21:45,299
something is running in those Cloud

319
00:21:45,299 --> 00:21:47,340
providers so

320
00:21:47,340 --> 00:21:49,320
hands off of people that are running eks

321
00:21:49,320 --> 00:21:52,280
or running in AWS

322
00:21:53,039 --> 00:21:55,700
Google Cloud

323
00:21:56,159 --> 00:21:57,659
azure

324
00:21:57,659 --> 00:21:59,340
none of these because you're running on

325
00:21:59,340 --> 00:22:01,620
premise

326
00:22:01,620 --> 00:22:05,100
all right or no kubernetes at all

327
00:22:05,100 --> 00:22:07,440
okay

328
00:22:07,440 --> 00:22:09,480
so again some other things to note from

329
00:22:09,480 --> 00:22:11,640
a from a networking perspective

330
00:22:11,640 --> 00:22:15,059
there are also limitations there as well

331
00:22:15,059 --> 00:22:17,280
uh to be to be aware of the subnets that

332
00:22:17,280 --> 00:22:19,380
you're running in uh some of the plugins

333
00:22:19,380 --> 00:22:23,280
the the uh specifically the AWS eks uh

334
00:22:23,280 --> 00:22:26,220
cni plugin that allows you to have an

335
00:22:26,220 --> 00:22:28,740
extension to actually leverage the

336
00:22:28,740 --> 00:22:31,980
amazon security groups

337
00:22:31,980 --> 00:22:33,840
um but they can they can sometimes get a

338
00:22:33,840 --> 00:22:36,299
little bit uh mangled

339
00:22:36,299 --> 00:22:38,159
so I would recommend that specifically

340
00:22:38,159 --> 00:22:40,320
if you're running AWS to to read through

341
00:22:40,320 --> 00:22:42,780
these plug-in configurations

342
00:22:42,780 --> 00:22:44,760
so the first thing we're going to want

343
00:22:44,760 --> 00:22:47,280
to do is when we perform an audit is we

344
00:22:47,280 --> 00:22:49,260
want to know what are all of the

345
00:22:49,260 --> 00:22:50,820
different API resources that are

346
00:22:50,820 --> 00:22:52,440
currently running so the First Command

347
00:22:52,440 --> 00:22:54,960
that we're going to run is Cube CTO API

348
00:22:54,960 --> 00:22:58,880
resources Dash o wide

349
00:23:02,580 --> 00:23:04,980
what that's going to do is print out a

350
00:23:04,980 --> 00:23:06,900
load of noise

351
00:23:06,900 --> 00:23:09,840
and it is essentially every API version

352
00:23:09,840 --> 00:23:11,640
that is available in your kubernetes

353
00:23:11,640 --> 00:23:15,000
cluster and the resources that that API

354
00:23:15,000 --> 00:23:17,340
version provides you

355
00:23:17,340 --> 00:23:19,200
so this gives us a good initial

356
00:23:19,200 --> 00:23:21,360
understanding of what's currently what's

357
00:23:21,360 --> 00:23:23,460
currently possible to run this is not

358
00:23:23,460 --> 00:23:25,140
what's running right these are the

359
00:23:25,140 --> 00:23:26,640
options that are available to us to

360
00:23:26,640 --> 00:23:28,380
deploy so we can see here that we're

361
00:23:28,380 --> 00:23:31,559
able to deploy some uh some roles or

362
00:23:31,559 --> 00:23:33,419
some pod security policies or some pod

363
00:23:33,419 --> 00:23:34,980
disruption budgets

364
00:23:34,980 --> 00:23:37,440
so when we go

365
00:23:37,440 --> 00:23:40,380
deeper into doing our audit

366
00:23:40,380 --> 00:23:42,179
we should be looking at these types of

367
00:23:42,179 --> 00:23:45,179
resources and trying to find the result

368
00:23:45,179 --> 00:23:47,220
the number of resources that are

369
00:23:47,220 --> 00:23:48,900
currently running for each of these API

370
00:23:48,900 --> 00:23:51,240
groups from there we can go further and

371
00:23:51,240 --> 00:23:53,159
look from a security standpoint at the

372
00:23:53,159 --> 00:23:54,900
configuration of each of those resources

373
00:23:54,900 --> 00:23:56,940
so essentially it's a it's a layered

374
00:23:56,940 --> 00:23:58,260
approach we're going to start right at

375
00:23:58,260 --> 00:24:00,419
the top going to get a good overview and

376
00:24:00,419 --> 00:24:02,280
understanding of what possible resources

377
00:24:02,280 --> 00:24:03,659
can run

378
00:24:03,659 --> 00:24:05,400
then we go to the resources themselves

379
00:24:05,400 --> 00:24:06,539
and then finally we go to the

380
00:24:06,539 --> 00:24:08,880
configuration of those resources

381
00:24:08,880 --> 00:24:10,740
so this is our initial starting point so

382
00:24:10,740 --> 00:24:16,400
again this was API resources Dash o wide

383
00:24:23,400 --> 00:24:25,020
the second thing we want to run we want

384
00:24:25,020 --> 00:24:26,159
to know

385
00:24:26,159 --> 00:24:28,620
what containers do we currently have

386
00:24:28,620 --> 00:24:30,419
available what containers are currently

387
00:24:30,419 --> 00:24:33,179
running so again I'm flicking between

388
00:24:33,179 --> 00:24:36,240
the asset inventory page and the

389
00:24:36,240 --> 00:24:37,679
terminal itself

390
00:24:37,679 --> 00:24:39,419
so I'm now down here on list all

391
00:24:39,419 --> 00:24:41,840
Container images

392
00:24:42,900 --> 00:24:45,299
when we print this out we can see the

393
00:24:45,299 --> 00:24:47,159
number of containers

394
00:24:47,159 --> 00:24:50,280
that are currently running and what type

395
00:24:50,280 --> 00:24:51,840
of things are currently running

396
00:24:51,840 --> 00:24:54,240
so we can see here for example

397
00:24:54,240 --> 00:24:55,760
we have

398
00:24:55,760 --> 00:24:58,200
nginx1193 we have an unprivileged nginx

399
00:24:58,200 --> 00:25:00,320
we have a couple of things that are

400
00:25:00,320 --> 00:25:04,639
running sudo as well

401
00:25:05,760 --> 00:25:08,640
so again from a security standpoint we

402
00:25:08,640 --> 00:25:10,200
could think about

403
00:25:10,200 --> 00:25:12,539
scanning these images what kind of

404
00:25:12,539 --> 00:25:13,860
vulnerabilities do these individual

405
00:25:13,860 --> 00:25:16,200
images have right as as an application

406
00:25:16,200 --> 00:25:19,320
developer myself sometimes

407
00:25:19,320 --> 00:25:21,179
security isn't always top of mind right

408
00:25:21,179 --> 00:25:22,860
releasing that feature to production is

409
00:25:22,860 --> 00:25:25,140
more top of Mind potentially than the

410
00:25:25,140 --> 00:25:27,059
security of the underlying container the

411
00:25:27,059 --> 00:25:30,419
application yes that's top of mind but

412
00:25:30,419 --> 00:25:32,340
the artifact that's currently running in

413
00:25:32,340 --> 00:25:34,860
in the production cluster or you know

414
00:25:34,860 --> 00:25:36,779
even your development clusters maybe not

415
00:25:36,779 --> 00:25:39,600
top of mind maybe you've got uh you know

416
00:25:39,600 --> 00:25:42,659
a a generic configuration you use

417
00:25:42,659 --> 00:25:45,360
something like Helm or customize and

418
00:25:45,360 --> 00:25:47,820
your SRE team or your platform team are

419
00:25:47,820 --> 00:25:49,260
providing you with this configuration

420
00:25:49,260 --> 00:25:51,600
and they just say all you need to do is

421
00:25:51,600 --> 00:25:53,159
add your image in here and set a few

422
00:25:53,159 --> 00:25:55,500
variables and Away you go right but that

423
00:25:55,500 --> 00:25:57,059
whole configuration that they have could

424
00:25:57,059 --> 00:25:59,159
be completely insecure right and you're

425
00:25:59,159 --> 00:26:01,020
you're replicating this over tens or

426
00:26:01,020 --> 00:26:02,940
hundreds of workloads where you've got

427
00:26:02,940 --> 00:26:04,679
tens or hundreds of insecure

428
00:26:04,679 --> 00:26:06,299
configurable workloads right and there

429
00:26:06,299 --> 00:26:07,620
can be many reasons for that and we're

430
00:26:07,620 --> 00:26:10,260
going to dig into some of them

431
00:26:10,260 --> 00:26:12,539
hand up people who are doing container

432
00:26:12,539 --> 00:26:15,200
image scanning

433
00:26:15,659 --> 00:26:18,559
a handful of you

434
00:26:21,059 --> 00:26:22,620
tools that you may want to use things

435
00:26:22,620 --> 00:26:26,279
like gripe things like trivia clear

436
00:26:26,279 --> 00:26:27,840
um

437
00:26:27,840 --> 00:26:30,000
make sure you're running them in CI make

438
00:26:30,000 --> 00:26:32,039
sure you're running them before you push

439
00:26:32,039 --> 00:26:33,659
them to the registry

440
00:26:33,659 --> 00:26:35,460
some people that I know push them to the

441
00:26:35,460 --> 00:26:37,080
registry and then scan them well if you

442
00:26:37,080 --> 00:26:38,460
push them to the registry and then scan

443
00:26:38,460 --> 00:26:40,500
them they're available

444
00:26:40,500 --> 00:26:41,940
um so they could be on your kubernetes

445
00:26:41,940 --> 00:26:43,320
cluster before you even get a chance to

446
00:26:43,320 --> 00:26:44,279
scan it

447
00:26:44,279 --> 00:26:47,100
the other thing I'd recommend doing as

448
00:26:47,100 --> 00:26:48,659
well is

449
00:26:48,659 --> 00:26:49,500
um

450
00:26:49,500 --> 00:26:52,200
using the image digest and not the tag

451
00:26:52,200 --> 00:26:56,159
itself so often people familiar with uh

452
00:26:56,159 --> 00:26:58,200
time of change time of use what that

453
00:26:58,200 --> 00:26:59,760
means

454
00:26:59,760 --> 00:27:01,260
so

455
00:27:01,260 --> 00:27:03,900
imagine I tag an image

456
00:27:03,900 --> 00:27:06,659
1.2

457
00:27:06,659 --> 00:27:08,880
and I configure that in my kubernetes

458
00:27:08,880 --> 00:27:10,140
deployment

459
00:27:10,140 --> 00:27:12,179
and I'm about to deploy it

460
00:27:12,179 --> 00:27:15,900
I tagged the images 1.2 remember

461
00:27:15,900 --> 00:27:17,700
then someone else because all of these

462
00:27:17,700 --> 00:27:18,960
tags are

463
00:27:18,960 --> 00:27:20,279
you know that you can override them

464
00:27:20,279 --> 00:27:23,400
someone else pushes an image 1.2

465
00:27:23,400 --> 00:27:24,720
so now I'm ready to deploy my

466
00:27:24,720 --> 00:27:26,279
application well I'm deploying theirs

467
00:27:26,279 --> 00:27:28,260
and not mine

468
00:27:28,260 --> 00:27:29,700
so

469
00:27:29,700 --> 00:27:31,380
when I'm using it it's now different

470
00:27:31,380 --> 00:27:32,880
from the time I actually changed it

471
00:27:32,880 --> 00:27:35,100
right because it tags can be overwritten

472
00:27:35,100 --> 00:27:37,320
however an image digest is a specific

473
00:27:37,320 --> 00:27:38,820
point in time

474
00:27:38,820 --> 00:27:40,980
if you use the image digest when it when

475
00:27:40,980 --> 00:27:42,900
we deploy that workload to kubernetes

476
00:27:42,900 --> 00:27:44,100
it's going to use that digest

477
00:27:44,100 --> 00:27:47,039
configuration right which is a the

478
00:27:47,039 --> 00:27:49,440
makeup of the image itself and not the

479
00:27:49,440 --> 00:27:50,760
tag

480
00:27:50,760 --> 00:27:52,559
right so from a from a security

481
00:27:52,559 --> 00:27:53,880
standpoint

482
00:27:53,880 --> 00:27:55,380
I'm not really happy with the images

483
00:27:55,380 --> 00:27:56,820
that I'm seeing here right I'd much

484
00:27:56,820 --> 00:27:59,039
prefer digests

485
00:27:59,039 --> 00:28:00,840
something that is you something that is

486
00:28:00,840 --> 00:28:03,000
unique and I can validate right I can

487
00:28:03,000 --> 00:28:04,799
easily come in here not with the nginx

488
00:28:04,799 --> 00:28:07,020
ones but if I had my own registry I was

489
00:28:07,020 --> 00:28:08,520
running at my own company

490
00:28:08,520 --> 00:28:10,620
or I was a rogue employee I could easily

491
00:28:10,620 --> 00:28:12,600
come and override someone else's tag

492
00:28:12,600 --> 00:28:13,740
they could be doing all kinds of

493
00:28:13,740 --> 00:28:17,580
nonsense Bitcoin mining uh

494
00:28:17,580 --> 00:28:19,740
um it could be browsing and trying to

495
00:28:19,740 --> 00:28:21,360
work out and plot the landscape of the

496
00:28:21,360 --> 00:28:22,500
kubernetes cluster it could be doing

497
00:28:22,500 --> 00:28:24,720
anything and that application developer

498
00:28:24,720 --> 00:28:26,279
has no idea right they just see the tag

499
00:28:26,279 --> 00:28:27,600
and they've deployed it and maybe it's

500
00:28:27,600 --> 00:28:29,460
working maybe it's not maybe I've added

501
00:28:29,460 --> 00:28:30,900
another process in there that they don't

502
00:28:30,900 --> 00:28:32,220
even know existed

503
00:28:32,220 --> 00:28:34,020
and then from an application standpoint

504
00:28:34,020 --> 00:28:35,460
it's working they can hit an endpoint

505
00:28:35,460 --> 00:28:37,320
they see the website and I'm over here

506
00:28:37,320 --> 00:28:40,580
doing Bitcoin mining on the side

507
00:28:42,059 --> 00:28:43,799
so

508
00:28:43,799 --> 00:28:45,539
the next one we're going to do is we're

509
00:28:45,539 --> 00:28:46,500
going to

510
00:28:46,500 --> 00:28:48,659
look at all of the resources that are

511
00:28:48,659 --> 00:28:50,580
currently running in our cluster so

512
00:28:50,580 --> 00:28:53,580
again here we can do Cube CL Cube CTL

513
00:28:53,580 --> 00:28:56,340
Cube cuddle depending upon how you uh

514
00:28:56,340 --> 00:28:58,020
how you say it

515
00:28:58,020 --> 00:29:00,059
uh get all and then we're going to pass

516
00:29:00,059 --> 00:29:02,400
the dash dash all namespaces so what

517
00:29:02,400 --> 00:29:03,539
this is going to do is it's going to

518
00:29:03,539 --> 00:29:04,919
give us a good understanding of

519
00:29:04,919 --> 00:29:06,240
everything that's running in every

520
00:29:06,240 --> 00:29:08,700
namespace in your kubernetes cluster

521
00:29:08,700 --> 00:29:10,919
granted from an arbark perspective we

522
00:29:10,919 --> 00:29:12,299
need the ability to be able to see

523
00:29:12,299 --> 00:29:14,400
everything in our cluster but because

524
00:29:14,400 --> 00:29:15,900
we're talking about security I decided

525
00:29:15,900 --> 00:29:17,400
to give everybody cluster admin because

526
00:29:17,400 --> 00:29:20,399
that's incredibly secure and we are now

527
00:29:20,399 --> 00:29:22,500
going to be able to see everything

528
00:29:22,500 --> 00:29:26,419
so if we run this you'll see

529
00:29:26,520 --> 00:29:28,559
kubernetes displays it quite nicely for

530
00:29:28,559 --> 00:29:30,059
us we have the replica sets that are

531
00:29:30,059 --> 00:29:31,320
currently running we have the the

532
00:29:31,320 --> 00:29:34,200
deployments that are currently there

533
00:29:34,200 --> 00:29:37,740
demon set Services all of the pods

534
00:29:37,740 --> 00:29:39,659
etc etc however

535
00:29:39,659 --> 00:29:41,760
one of the things to note is this is not

536
00:29:41,760 --> 00:29:44,279
giving you absolutely everything right

537
00:29:44,279 --> 00:29:45,960
it's giving you everything from a cube

538
00:29:45,960 --> 00:29:49,500
CTL standpoint so there is a tool

539
00:29:49,500 --> 00:29:50,880
uh

540
00:29:50,880 --> 00:29:52,440
called

541
00:29:52,440 --> 00:29:55,460
um get all

542
00:29:58,020 --> 00:30:01,559
which kind of actually provides you all

543
00:30:01,559 --> 00:30:03,059
of the resources right and what we're

544
00:30:03,059 --> 00:30:04,919
going to do is we're going to run this

545
00:30:04,919 --> 00:30:06,360
now and what you'll see is it prints out

546
00:30:06,360 --> 00:30:08,340
a lot more than what the default Cube

547
00:30:08,340 --> 00:30:10,260
CTL get all this so when you're doing a

548
00:30:10,260 --> 00:30:12,059
cluster audit

549
00:30:12,059 --> 00:30:14,100
don't just take what Cube CTL tells you

550
00:30:14,100 --> 00:30:16,799
as gospel right there's other tools that

551
00:30:16,799 --> 00:30:18,419
are around that actually give you a much

552
00:30:18,419 --> 00:30:22,260
deeper and richer response

553
00:30:22,260 --> 00:30:25,200
so now in our terminal

554
00:30:25,200 --> 00:30:28,640
if we just run kettle

555
00:30:28,919 --> 00:30:32,299
it takes a little bit of time

556
00:30:37,559 --> 00:30:39,240
and now you can see there's a lot more

557
00:30:39,240 --> 00:30:40,740
printed out right we've now got storage

558
00:30:40,740 --> 00:30:43,380
classes we've got things about our back

559
00:30:43,380 --> 00:30:45,779
we've got priority classes

560
00:30:45,779 --> 00:30:47,340
so there's a lot more richer

561
00:30:47,340 --> 00:30:48,539
understanding now of what's going on

562
00:30:48,539 --> 00:30:51,000
from a kubernetes perspective so

563
00:30:51,000 --> 00:30:53,820
I use this tool more extensively than I

564
00:30:53,820 --> 00:30:56,340
do the cube CTL get all because this is

565
00:30:56,340 --> 00:31:00,779
the real girl Cube CTO get all just you

566
00:31:00,779 --> 00:31:03,860
know the bare minimum

567
00:31:07,200 --> 00:31:09,240
so

568
00:31:09,240 --> 00:31:10,980
now we have an understanding of the

569
00:31:10,980 --> 00:31:12,539
images that are currently running the

570
00:31:12,539 --> 00:31:14,700
resources that are currently there

571
00:31:14,700 --> 00:31:17,700
we've talked about images and why tags

572
00:31:17,700 --> 00:31:19,500
are not not great and we should be using

573
00:31:19,500 --> 00:31:21,120
image digest so that's something from an

574
00:31:21,120 --> 00:31:22,260
audit perspective that we should be

575
00:31:22,260 --> 00:31:23,700
going back to our application developers

576
00:31:23,700 --> 00:31:25,919
and saying and proposing to them move to

577
00:31:25,919 --> 00:31:29,279
image digests don't use image tags

578
00:31:29,279 --> 00:31:31,260
we've got a good understanding now of of

579
00:31:31,260 --> 00:31:32,399
what's running so we've got some

580
00:31:32,399 --> 00:31:33,659
deployments in there we've got some

581
00:31:33,659 --> 00:31:35,820
Demon sets we've got some pods

582
00:31:35,820 --> 00:31:38,100
so now what we're going to do is start

583
00:31:38,100 --> 00:31:41,820
to look at some workload configuration

584
00:31:41,820 --> 00:31:43,980
so now if we copy

585
00:31:43,980 --> 00:31:45,899
this link here so now I'm on the second

586
00:31:45,899 --> 00:31:49,260
number two workload configurations

587
00:31:49,260 --> 00:31:52,620
I'm copying and pasting

588
00:31:52,620 --> 00:31:56,719
the uh the command

589
00:31:57,899 --> 00:32:00,620
click yes

590
00:32:02,039 --> 00:32:03,299
and now we're going to go through an

591
00:32:03,299 --> 00:32:05,760
interactive flow so

592
00:32:05,760 --> 00:32:07,919
what I want to talk about is some of the

593
00:32:07,919 --> 00:32:10,380
ways that

594
00:32:10,380 --> 00:32:12,720
applications and workloads can be

595
00:32:12,720 --> 00:32:14,700
insecure right and there's there's many

596
00:32:14,700 --> 00:32:17,100
different ways that they can be insecure

597
00:32:17,100 --> 00:32:18,720
we're going to talk about how they

598
00:32:18,720 --> 00:32:20,100
become insecure and we're also going to

599
00:32:20,100 --> 00:32:21,840
talk about from a defense mechanism what

600
00:32:21,840 --> 00:32:23,820
are the things that we can do to be able

601
00:32:23,820 --> 00:32:25,679
to secure them

602
00:32:25,679 --> 00:32:29,100
so the the classic one pods running is

603
00:32:29,100 --> 00:32:31,860
everybody has at least one of these uh

604
00:32:31,860 --> 00:32:33,779
pods running in the kubernetes cluster

605
00:32:33,779 --> 00:32:35,880
running as root

606
00:32:35,880 --> 00:32:38,700
so if you hit enter we're going to

607
00:32:38,700 --> 00:32:39,840
deploy we're going to create a

608
00:32:39,840 --> 00:32:41,820
deployment called nginx and we're going

609
00:32:41,820 --> 00:32:46,939
to use the well-known nginx container

610
00:32:51,419 --> 00:32:54,679
if we just keep hitting enter

611
00:32:56,520 --> 00:32:58,140
so we think

612
00:32:58,140 --> 00:33:02,700
nginx probably may be secure well

613
00:33:02,700 --> 00:33:05,039
the standard nginx container runs as

614
00:33:05,039 --> 00:33:06,960
root so if I can get in that container

615
00:33:06,960 --> 00:33:08,700
I'm going to have all kinds of fun

616
00:33:08,700 --> 00:33:10,380
all right I could do do whatever I

617
00:33:10,380 --> 00:33:12,500
wanted

618
00:33:13,620 --> 00:33:15,539
so the default nginx container is now

619
00:33:15,539 --> 00:33:17,399
running as root so what what options do

620
00:33:17,399 --> 00:33:19,260
we have available to us to make sure

621
00:33:19,260 --> 00:33:21,659
that that can't happen right from a from

622
00:33:21,659 --> 00:33:23,880
a cluster audit perspective containers

623
00:33:23,880 --> 00:33:25,740
running as root especially if I'm a

624
00:33:25,740 --> 00:33:27,299
rogue employer I managed to get into a

625
00:33:27,299 --> 00:33:28,980
kubernetes cluster or you've you've

626
00:33:28,980 --> 00:33:30,960
given me too much access

627
00:33:30,960 --> 00:33:35,700
I uh you know I can I can go Rogue so

628
00:33:35,700 --> 00:33:39,000
we we have the ability to use security

629
00:33:39,000 --> 00:33:42,840
contexts so we can set uh

630
00:33:42,840 --> 00:33:45,720
Runners non-root to true

631
00:33:45,720 --> 00:33:47,340
so what does that look like from a

632
00:33:47,340 --> 00:33:48,899
deployment perspective now we are down

633
00:33:48,899 --> 00:33:50,940
at the bottom in the security contact

634
00:33:50,940 --> 00:33:52,320
Section

635
00:33:52,320 --> 00:33:54,419
and we we're saying that for this image

636
00:33:54,419 --> 00:33:56,880
we want to force you to not be able to

637
00:33:56,880 --> 00:33:59,720
run this as root

638
00:34:00,120 --> 00:34:03,979
so if we click enter here

639
00:34:13,379 --> 00:34:15,480
now what we'll see is the con the Pod

640
00:34:15,480 --> 00:34:17,760
can't run right so the Pod actually runs

641
00:34:17,760 --> 00:34:19,320
as root but we've set the security

642
00:34:19,320 --> 00:34:21,480
context to not run as uh to run as

643
00:34:21,480 --> 00:34:23,339
non-root therefore kubernetes is not

644
00:34:23,339 --> 00:34:25,940
going to deploy it

645
00:34:28,020 --> 00:34:29,399
so

646
00:34:29,399 --> 00:34:32,399
we can see that's the case we do a

647
00:34:32,399 --> 00:34:34,500
describe of that pod

648
00:34:34,500 --> 00:34:36,480
and we look for the error and kubernetes

649
00:34:36,480 --> 00:34:38,580
is telling us that you know we're trying

650
00:34:38,580 --> 00:34:40,379
to run it we have a container that's

651
00:34:40,379 --> 00:34:42,359
running as root and we've specifically

652
00:34:42,359 --> 00:34:44,460
told it that it can't run as root so

653
00:34:44,460 --> 00:34:46,260
security context is going to be a key

654
00:34:46,260 --> 00:34:47,460
thing that we're going to be wanting to

655
00:34:47,460 --> 00:34:50,040
look for when we are looking at workload

656
00:34:50,040 --> 00:34:51,480
configurations right what a lot of

657
00:34:51,480 --> 00:34:53,219
people are what a lot of people may or

658
00:34:53,219 --> 00:34:55,619
may not be doing is

659
00:34:55,619 --> 00:34:57,180
getting their deployment configuration

660
00:34:57,180 --> 00:34:59,820
set up not knowing or not worrying about

661
00:34:59,820 --> 00:35:01,560
the security context because there's

662
00:35:01,560 --> 00:35:03,060
there's some things you have to think

663
00:35:03,060 --> 00:35:05,760
about right not everything some things

664
00:35:05,760 --> 00:35:07,320
are going to have to run as root right

665
00:35:07,320 --> 00:35:10,320
potentially like or

666
00:35:10,320 --> 00:35:12,119
you could have public images like the

667
00:35:12,119 --> 00:35:14,160
nginx1 that runs as roots so there's a

668
00:35:14,160 --> 00:35:15,119
lot of work from an application

669
00:35:15,119 --> 00:35:18,599
development perspective to get that

670
00:35:18,599 --> 00:35:21,180
application to not run as root so what I

671
00:35:21,180 --> 00:35:22,680
would recommend

672
00:35:22,680 --> 00:35:24,180
from an application developer

673
00:35:24,180 --> 00:35:26,880
perspective is this concept of having

674
00:35:26,880 --> 00:35:29,220
base images so if you're running Java or

675
00:35:29,220 --> 00:35:30,599
you're running go or whatever language

676
00:35:30,599 --> 00:35:32,160
you're running

677
00:35:32,160 --> 00:35:36,119
to construct base images that meet and

678
00:35:36,119 --> 00:35:38,099
comply to a specific set of standards in

679
00:35:38,099 --> 00:35:39,660
your organization right one of the

680
00:35:39,660 --> 00:35:41,820
obvious ones don't run it as root but

681
00:35:41,820 --> 00:35:43,980
run it as a specific type of user put

682
00:35:43,980 --> 00:35:46,020
the binary in a specific location put

683
00:35:46,020 --> 00:35:48,480
the config for the application in a

684
00:35:48,480 --> 00:35:49,920
specific location

685
00:35:49,920 --> 00:35:52,380
set the units at the the user and group

686
00:35:52,380 --> 00:35:54,720
IDs right all of these things allow you

687
00:35:54,720 --> 00:35:57,300
to be able to Define workload

688
00:35:57,300 --> 00:35:58,980
configurations that are standardized

689
00:35:58,980 --> 00:36:01,380
across your organization and then we can

690
00:36:01,380 --> 00:36:02,880
start to look for anomalies because

691
00:36:02,880 --> 00:36:05,339
anything that doesn't have a urid a user

692
00:36:05,339 --> 00:36:08,700
ID or a group ID of a specific number we

693
00:36:08,700 --> 00:36:10,320
know that that doesn't conform to your

694
00:36:10,320 --> 00:36:11,820
company's standards and we can start to

695
00:36:11,820 --> 00:36:13,500
alert on that right

696
00:36:13,500 --> 00:36:16,020
with a with the ever-changing kubernetes

697
00:36:16,020 --> 00:36:18,000
landscape and the ability and ease for

698
00:36:18,000 --> 00:36:19,140
you to be able to deploy hundreds of

699
00:36:19,140 --> 00:36:21,619
applications in your uh for your company

700
00:36:21,619 --> 00:36:24,480
consistency is going to be key right you

701
00:36:24,480 --> 00:36:27,060
don't want to have to go

702
00:36:27,060 --> 00:36:29,880
on a long root cause analysis for you to

703
00:36:29,880 --> 00:36:31,380
try and figure out what's going on with

704
00:36:31,380 --> 00:36:33,180
your application right if there's sets

705
00:36:33,180 --> 00:36:35,040
of standards that your applications must

706
00:36:35,040 --> 00:36:36,960
have conform to it's better that the

707
00:36:36,960 --> 00:36:39,119
workload cannot be deployed than it gets

708
00:36:39,119 --> 00:36:40,740
deployed and is vulnerable right a

709
00:36:40,740 --> 00:36:41,880
little bit of friction with the

710
00:36:41,880 --> 00:36:43,920
application developer to make sure that

711
00:36:43,920 --> 00:36:45,660
we have secure workloads running in our

712
00:36:45,660 --> 00:36:47,760
platform is a lot better

713
00:36:47,760 --> 00:36:50,280
than being audited and being and you

714
00:36:50,280 --> 00:36:51,480
know having to tell everybody that all

715
00:36:51,480 --> 00:36:52,980
of your containers run as root and

716
00:36:52,980 --> 00:36:54,480
everyone's just copying and pasting

717
00:36:54,480 --> 00:36:57,200
configuration around

718
00:36:57,900 --> 00:37:00,500
so

719
00:37:00,660 --> 00:37:03,839
now what we have we've seen sorry is

720
00:37:03,839 --> 00:37:05,400
that we have a Public Image that is

721
00:37:05,400 --> 00:37:06,240
running

722
00:37:06,240 --> 00:37:08,040
as root and now what we want to do is

723
00:37:08,040 --> 00:37:09,540
stop it from running as root right and

724
00:37:09,540 --> 00:37:10,800
there's a number of options for us to be

725
00:37:10,800 --> 00:37:12,000
able to do that

726
00:37:12,000 --> 00:37:13,280
so

727
00:37:13,280 --> 00:37:17,820
nginx Inc actually launched or created a

728
00:37:17,820 --> 00:37:20,640
unprivileged container image

729
00:37:20,640 --> 00:37:22,500
so newsflash this is the one if you're

730
00:37:22,500 --> 00:37:23,940
running nginx that I would recommend

731
00:37:23,940 --> 00:37:25,980
that you you use you don't use the

732
00:37:25,980 --> 00:37:28,079
Normal Public nginx Image right highly

733
00:37:28,079 --> 00:37:29,160
insecure

734
00:37:29,160 --> 00:37:30,660
so

735
00:37:30,660 --> 00:37:33,060
it's the same deployment different image

736
00:37:33,060 --> 00:37:35,820
we're going to set runner's non-root to

737
00:37:35,820 --> 00:37:38,060
true

738
00:37:38,700 --> 00:37:41,400
we're going to deploy this

739
00:37:41,400 --> 00:37:43,920
now we see that this pod is actually

740
00:37:43,920 --> 00:37:44,760
running

741
00:37:44,760 --> 00:37:46,859
right so this means that this container

742
00:37:46,859 --> 00:37:49,619
this container obviously is not uh

743
00:37:49,619 --> 00:37:51,960
running its root

744
00:37:51,960 --> 00:37:53,760
so if we keep clicking through we can

745
00:37:53,760 --> 00:37:57,839
now see that from an ID perspective that

746
00:37:57,839 --> 00:37:59,700
we are now running as the nginx user

747
00:37:59,700 --> 00:38:01,800
right so this is a more secure image

748
00:38:01,800 --> 00:38:05,700
than the well-known nginx image

749
00:38:05,700 --> 00:38:08,520
so there are sometimes images that are

750
00:38:08,520 --> 00:38:10,980
available to you that are more secure

751
00:38:10,980 --> 00:38:12,180
than the ones that you know and love

752
00:38:12,180 --> 00:38:13,980
right so don't just go on Docker Hub and

753
00:38:13,980 --> 00:38:16,440
type in the thing that you you uh you

754
00:38:16,440 --> 00:38:18,000
want to leverage like nginx as an

755
00:38:18,000 --> 00:38:19,560
example and just take it verbatim right

756
00:38:19,560 --> 00:38:22,200
do some due diligence into how secure

757
00:38:22,200 --> 00:38:25,680
the the uh the container is that you're

758
00:38:25,680 --> 00:38:27,540
actually deploying or maybe have some

759
00:38:27,540 --> 00:38:29,820
standards and pro processes in place so

760
00:38:29,820 --> 00:38:31,800
that you can't even deploy certain

761
00:38:31,800 --> 00:38:34,619
certain workloads with a certain tag or

762
00:38:34,619 --> 00:38:38,240
sometimes from a specific registry

763
00:38:39,359 --> 00:38:40,980
so

764
00:38:40,980 --> 00:38:42,720
okay

765
00:38:42,720 --> 00:38:45,200
sure

766
00:38:49,440 --> 00:38:52,859
so yeah at a per resource basis so what

767
00:38:52,859 --> 00:38:56,099
I would recommend again is is to try and

768
00:38:56,099 --> 00:38:58,079
create application templates so if

769
00:38:58,079 --> 00:38:59,220
you're using something like hellmore

770
00:38:59,220 --> 00:39:00,420
customized

771
00:39:00,420 --> 00:39:02,579
the more standardized you can make the

772
00:39:02,579 --> 00:39:04,140
application from its from its

773
00:39:04,140 --> 00:39:05,880
configuration standpoint the easier this

774
00:39:05,880 --> 00:39:08,839
is going to become to manage

775
00:39:08,940 --> 00:39:12,780
so we can force workloads in kubernetes

776
00:39:12,780 --> 00:39:15,740
to to not to not run as root right

777
00:39:15,740 --> 00:39:18,780
that's that's great but we can also set

778
00:39:18,780 --> 00:39:21,960
the user ID and group ID as well in that

779
00:39:21,960 --> 00:39:23,820
configuration

780
00:39:23,820 --> 00:39:26,460
so again same thing same security

781
00:39:26,460 --> 00:39:28,500
context now but we're going to force the

782
00:39:28,500 --> 00:39:31,500
user and group that we run this

783
00:39:31,500 --> 00:39:34,579
application to run as

784
00:39:34,800 --> 00:39:37,200
why do we want to do this why why is

785
00:39:37,200 --> 00:39:39,900
this useful to us so

786
00:39:39,900 --> 00:39:41,760
imagine I broke out of this container

787
00:39:41,760 --> 00:39:43,740
and I got to the underlying host imagine

788
00:39:43,740 --> 00:39:45,660
I was running as a root

789
00:39:45,660 --> 00:39:47,160
I can do whatever I want now on the

790
00:39:47,160 --> 00:39:48,900
underlying host

791
00:39:48,900 --> 00:39:52,560
if I set an IED a user ID or a group ID

792
00:39:52,560 --> 00:39:54,599
that is not going to be on the host even

793
00:39:54,599 --> 00:39:56,760
if I break out it's highly unlikely I'm

794
00:39:56,760 --> 00:39:58,200
going to be able to do something that's

795
00:39:58,200 --> 00:40:00,540
why these these uids and goods are so

796
00:40:00,540 --> 00:40:01,500
high

797
00:40:01,500 --> 00:40:02,940
I deliberately set them high because

798
00:40:02,940 --> 00:40:04,859
they're unlikely to clash if anyone

799
00:40:04,859 --> 00:40:06,839
manages to get out of the container onto

800
00:40:06,839 --> 00:40:11,119
the uh to the physical node itself

801
00:40:11,280 --> 00:40:13,079
so we can set these again with security

802
00:40:13,079 --> 00:40:15,960
contacts you had endured if we hit

803
00:40:15,960 --> 00:40:18,300
enter here

804
00:40:18,300 --> 00:40:20,520
we are going to see again that that

805
00:40:20,520 --> 00:40:24,140
application is able to run

806
00:40:26,280 --> 00:40:28,560
and we can see that we have set

807
00:40:28,560 --> 00:40:31,260
successfully the user ID and the group

808
00:40:31,260 --> 00:40:35,880
ID to what we specified again from a

809
00:40:35,880 --> 00:40:37,140
standards perspective these things are

810
00:40:37,140 --> 00:40:38,940
really important build up a standard

811
00:40:38,940 --> 00:40:40,619
within your organization of what you

812
00:40:40,619 --> 00:40:42,540
want to set these to and roll it out

813
00:40:42,540 --> 00:40:44,760
across the board consistency is key when

814
00:40:44,760 --> 00:40:46,619
it comes to kubernetes it's far too easy

815
00:40:46,619 --> 00:40:48,300
to deploy a load of rubbish that's

816
00:40:48,300 --> 00:40:51,000
insecure right and then if you're the

817
00:40:51,000 --> 00:40:52,680
the poor person that is in the platform

818
00:40:52,680 --> 00:40:54,780
team or you have to perform an audit you

819
00:40:54,780 --> 00:40:57,359
have to go and you know dump all of this

820
00:40:57,359 --> 00:40:59,640
onto all the application Developers

821
00:40:59,640 --> 00:41:00,900
and then they'll all do something

822
00:41:00,900 --> 00:41:02,040
completely different and you'll be back

823
00:41:02,040 --> 00:41:03,540
to square one right and it's just rinse

824
00:41:03,540 --> 00:41:06,740
and repeat over and over and over again

825
00:41:09,420 --> 00:41:13,740
so again images must be designed to work

826
00:41:13,740 --> 00:41:15,480
with Runners user and Runners group

827
00:41:15,480 --> 00:41:17,760
right we can't just set them to anything

828
00:41:17,760 --> 00:41:19,079
and they're just gonna they're just

829
00:41:19,079 --> 00:41:21,420
going to work

830
00:41:21,420 --> 00:41:23,880
so let's try

831
00:41:23,880 --> 00:41:28,079
deploying the Public nginx Image

832
00:41:28,079 --> 00:41:31,020
and setting the user and group

833
00:41:31,020 --> 00:41:33,240
configuration so all we've done here is

834
00:41:33,240 --> 00:41:34,560
on the image specification we've

835
00:41:34,560 --> 00:41:36,780
switched back to that well-known nginx

836
00:41:36,780 --> 00:41:39,140
image

837
00:41:44,280 --> 00:41:46,619
we're in a crash Loop right we cut we

838
00:41:46,619 --> 00:41:49,320
can't run this image with this specific

839
00:41:49,320 --> 00:41:51,980
configuration

840
00:41:52,740 --> 00:41:54,599
this is a much safer option this is the

841
00:41:54,599 --> 00:41:56,700
position that we want to be in we want

842
00:41:56,700 --> 00:41:58,980
workloads to not run that don't meet our

843
00:41:58,980 --> 00:42:01,520
standards

844
00:42:01,920 --> 00:42:04,320
again we can see it needs some

845
00:42:04,320 --> 00:42:05,640
privileges because it's you know it's

846
00:42:05,640 --> 00:42:07,440
it's owning files it's writing files all

847
00:42:07,440 --> 00:42:09,420
over the place we've set the user and

848
00:42:09,420 --> 00:42:10,859
group and the user and group is unable

849
00:42:10,859 --> 00:42:12,660
to be able to achieve that

850
00:42:12,660 --> 00:42:14,700
so this is where you from an audit

851
00:42:14,700 --> 00:42:15,839
perspective you're going to start having

852
00:42:15,839 --> 00:42:16,980
conversations with your application

853
00:42:16,980 --> 00:42:19,079
developers and saying look

854
00:42:19,079 --> 00:42:21,300
I've I've reviewed I'm trying to trying

855
00:42:21,300 --> 00:42:22,859
to set some standards here and your

856
00:42:22,859 --> 00:42:25,560
application's not not working let's have

857
00:42:25,560 --> 00:42:27,780
that back and forward and you know move

858
00:42:27,780 --> 00:42:29,400
your application configuration to the

859
00:42:29,400 --> 00:42:32,480
standard that we want to set

860
00:42:34,680 --> 00:42:37,800
so important things to note here

861
00:42:37,800 --> 00:42:40,859
are it's gonna the reason why we're

862
00:42:40,859 --> 00:42:43,140
taking such a high user in group

863
00:42:43,140 --> 00:42:46,740
is it reduces the risk to run

864
00:42:46,740 --> 00:42:49,079
uh or sorry the the user to exist on the

865
00:42:49,079 --> 00:42:50,700
underlying hosts

866
00:42:50,700 --> 00:42:53,460
um it's

867
00:42:53,460 --> 00:42:56,220
it's important that

868
00:42:56,220 --> 00:42:59,480
these configuration options are are set

869
00:42:59,480 --> 00:43:03,660
because we we don't want to have to keep

870
00:43:03,660 --> 00:43:06,420
repeating the same set of audit all over

871
00:43:06,420 --> 00:43:08,160
again right we have to keep going back

872
00:43:08,160 --> 00:43:10,200
to the application Developers

873
00:43:10,200 --> 00:43:12,720
and uh and telling them that they have

874
00:43:12,720 --> 00:43:16,079
to keep changing some things again do do

875
00:43:16,079 --> 00:43:17,760
have to run as root and if you want if

876
00:43:17,760 --> 00:43:19,200
you need them to run as root you can set

877
00:43:19,200 --> 00:43:21,480
the group ID to zero there are a couple

878
00:43:21,480 --> 00:43:22,980
of links there

879
00:43:22,980 --> 00:43:24,660
um all of these material is going to

880
00:43:24,660 --> 00:43:25,859
become available afterwards so don't

881
00:43:25,859 --> 00:43:27,240
worry about trying to write those URLs

882
00:43:27,240 --> 00:43:28,260
down

883
00:43:28,260 --> 00:43:30,839
um for reasons why these configurations

884
00:43:30,839 --> 00:43:33,500
are important

885
00:43:38,579 --> 00:43:40,440
anyone have any questions so far are we

886
00:43:40,440 --> 00:43:43,700
good to keep going

887
00:43:44,880 --> 00:43:46,020
okay

888
00:43:46,020 --> 00:43:49,500
so the next one is privilege privilege

889
00:43:49,500 --> 00:43:51,780
escalation right so if I can elevate my

890
00:43:51,780 --> 00:43:54,960
privileges I can switch to pseudo

891
00:43:54,960 --> 00:43:56,700
I can do all kinds of things right I can

892
00:43:56,700 --> 00:43:58,200
do an app to get update for example and

893
00:43:58,200 --> 00:43:59,520
start installing all kinds of packages

894
00:43:59,520 --> 00:44:01,260
and just go Rogue on them on the

895
00:44:01,260 --> 00:44:04,319
container start curling endpoints

896
00:44:04,319 --> 00:44:07,140
etc etc so

897
00:44:07,140 --> 00:44:09,720
again we're going to create a deployment

898
00:44:09,720 --> 00:44:12,420
that's going to use this highly secure

899
00:44:12,420 --> 00:44:14,460
Docker pseudo image

900
00:44:14,460 --> 00:44:15,240
um

901
00:44:15,240 --> 00:44:18,119
and

902
00:44:18,119 --> 00:44:20,880
when we look at it it's got a user and

903
00:44:20,880 --> 00:44:23,760
group set right so from an initial

904
00:44:23,760 --> 00:44:25,859
investigation perspective this can this

905
00:44:25,859 --> 00:44:27,900
container image is looking a heck of a

906
00:44:27,900 --> 00:44:29,460
lot better than the nginx one right some

907
00:44:29,460 --> 00:44:31,579
user and group stuff set

908
00:44:31,579 --> 00:44:33,780
maybe maybe we're good right this is

909
00:44:33,780 --> 00:44:35,040
looking pretty good if we were thinking

910
00:44:35,040 --> 00:44:37,020
about what we were just looking for on

911
00:44:37,020 --> 00:44:39,560
our audit

912
00:44:39,660 --> 00:44:41,880
however now I run pseudo ID and I

913
00:44:41,880 --> 00:44:42,839
actually have the ability to better

914
00:44:42,839 --> 00:44:44,880
elevate my privileges

915
00:44:44,880 --> 00:44:47,339
to to the root user now I can do all

916
00:44:47,339 --> 00:44:49,380
kinds of things right so from an audit

917
00:44:49,380 --> 00:44:51,480
perspective when you go into the

918
00:44:51,480 --> 00:44:53,640
container and you get access

919
00:44:53,640 --> 00:44:55,619
try and switch try and elevate your

920
00:44:55,619 --> 00:44:57,359
privileges see what you have available

921
00:44:57,359 --> 00:44:59,339
you know what what do you have available

922
00:44:59,339 --> 00:45:01,560
availability to be able to do just

923
00:45:01,560 --> 00:45:03,000
because they've set those initial things

924
00:45:03,000 --> 00:45:04,859
and from the from the offset it looks

925
00:45:04,859 --> 00:45:06,060
like you're in a good position always

926
00:45:06,060 --> 00:45:09,140
try and test the boundaries

927
00:45:09,900 --> 00:45:11,640
so

928
00:45:11,640 --> 00:45:14,099
now what we'll do is we'll set the allow

929
00:45:14,099 --> 00:45:16,560
privilege escalation configuration to to

930
00:45:16,560 --> 00:45:18,599
false and we should not be able to

931
00:45:18,599 --> 00:45:21,540
elevate our privileges so again exactly

932
00:45:21,540 --> 00:45:23,400
the same deployment we're again under

933
00:45:23,400 --> 00:45:25,079
that security context

934
00:45:25,079 --> 00:45:27,359
we're going to set allow a privilege

935
00:45:27,359 --> 00:45:29,400
escalation to false

936
00:45:29,400 --> 00:45:32,460
and now if we deploy

937
00:45:32,460 --> 00:45:34,980
this and we try and perform a pseudo we

938
00:45:34,980 --> 00:45:36,300
do not have the ability to be able to do

939
00:45:36,300 --> 00:45:37,500
that

940
00:45:37,500 --> 00:45:40,079
so again from a security standpoint

941
00:45:40,079 --> 00:45:41,579
stop people from being able to switch to

942
00:45:41,579 --> 00:45:43,560
sudo right

943
00:45:43,560 --> 00:45:45,119
maybe some of your applications require

944
00:45:45,119 --> 00:45:46,560
sudo

945
00:45:46,560 --> 00:45:48,599
to be able to see certain directories

946
00:45:48,599 --> 00:45:50,700
this is again another conversation with

947
00:45:50,700 --> 00:45:53,819
your application developers start to

948
00:45:53,819 --> 00:45:55,319
put your configuration that your

949
00:45:55,319 --> 00:45:56,460
application needs in specific

950
00:45:56,460 --> 00:45:59,480
directories allow the user that that

951
00:45:59,480 --> 00:46:02,220
container is running as to be able to

952
00:46:02,220 --> 00:46:04,680
read and maybe write to that directory

953
00:46:04,680 --> 00:46:06,119
so one of the things that I would

954
00:46:06,119 --> 00:46:08,220
recommend from a container perspective

955
00:46:08,220 --> 00:46:10,440
is having a you know a slash app

956
00:46:10,440 --> 00:46:11,940
directory which is where your

957
00:46:11,940 --> 00:46:14,940
application binary runs slash config for

958
00:46:14,940 --> 00:46:16,859
where your config files live and then

959
00:46:16,859 --> 00:46:18,780
slash data for where your data lives

960
00:46:18,780 --> 00:46:20,700
make

961
00:46:20,700 --> 00:46:23,160
now we start to have a standard right we

962
00:46:23,160 --> 00:46:25,500
can allow the user whatever we've

963
00:46:25,500 --> 00:46:28,319
whatever you would uh user ID and group

964
00:46:28,319 --> 00:46:30,420
ID that we've specified we allow them to

965
00:46:30,420 --> 00:46:32,280
be able to use those specific three

966
00:46:32,280 --> 00:46:34,440
directories and nothing else

967
00:46:34,440 --> 00:46:36,420
we're now starting to get to get some

968
00:46:36,420 --> 00:46:39,319
secure standards

969
00:46:40,920 --> 00:46:43,140
so enable service links this is an

970
00:46:43,140 --> 00:46:44,520
interesting one

971
00:46:44,520 --> 00:46:46,140
um

972
00:46:46,140 --> 00:46:49,380
this is a very convenient way if I get

973
00:46:49,380 --> 00:46:51,900
inside your container to be able to

974
00:46:51,900 --> 00:46:53,819
start to plot your kubernetes landscape

975
00:46:53,819 --> 00:46:55,319
from a kubernetes landscape what I'm

976
00:46:55,319 --> 00:46:58,740
talking about is the services that are

977
00:46:58,740 --> 00:47:01,560
currently running Within kubernetes

978
00:47:01,560 --> 00:47:02,940
so

979
00:47:02,940 --> 00:47:05,119
by default

980
00:47:05,119 --> 00:47:08,819
kubernetes will add in environment

981
00:47:08,819 --> 00:47:11,460
variables into your pod to make it

982
00:47:11,460 --> 00:47:15,180
convenient in inverted in air quotes for

983
00:47:15,180 --> 00:47:17,400
you to be able to discover other Q other

984
00:47:17,400 --> 00:47:19,020
kubernetes services

985
00:47:19,020 --> 00:47:20,160
so what we're going to do here is we're

986
00:47:20,160 --> 00:47:23,700
going to run a busy box uh pod

987
00:47:23,700 --> 00:47:26,579
and if we go inside that pod and we do

988
00:47:26,579 --> 00:47:28,859
an end you'll see that the service that

989
00:47:28,859 --> 00:47:31,200
I just created I know everything about

990
00:47:31,200 --> 00:47:32,819
it I know where it is I know the IP

991
00:47:32,819 --> 00:47:34,200
address I know the port that it's

992
00:47:34,200 --> 00:47:35,700
currently running on

993
00:47:35,700 --> 00:47:37,500
from a hacker's perspective this is a

994
00:47:37,500 --> 00:47:39,420
dream right imagine you've got hundreds

995
00:47:39,420 --> 00:47:41,160
of hundreds of these Services all I have

996
00:47:41,160 --> 00:47:43,920
to do is get into one I do an end I get

997
00:47:43,920 --> 00:47:45,420
all of your services I know all the

998
00:47:45,420 --> 00:47:47,280
endpoints I know all the ports

999
00:47:47,280 --> 00:47:48,660
I just start running attacks against

1000
00:47:48,660 --> 00:47:50,520
them and I figure out and I can plot

1001
00:47:50,520 --> 00:47:51,839
your kubernetes landscape from the

1002
00:47:51,839 --> 00:47:56,819
inside so it only takes one one pod that

1003
00:47:56,819 --> 00:47:59,099
allows this or has this configuration by

1004
00:47:59,099 --> 00:48:00,839
default for me to start being able to

1005
00:48:00,839 --> 00:48:02,099
plot my whole entire kubernetes

1006
00:48:02,099 --> 00:48:03,960
landscape

1007
00:48:03,960 --> 00:48:06,540
luckily for us kubernetes has a way of

1008
00:48:06,540 --> 00:48:07,980
being able to stop this from being

1009
00:48:07,980 --> 00:48:11,640
displayed not a well-known uh

1010
00:48:11,640 --> 00:48:13,619
configuration option so under the spec

1011
00:48:13,619 --> 00:48:16,380
here you can set enable service links to

1012
00:48:16,380 --> 00:48:17,339
false

1013
00:48:17,339 --> 00:48:19,440
and what that will do now

1014
00:48:19,440 --> 00:48:21,359
is when we run the same container image

1015
00:48:21,359 --> 00:48:23,099
but we have this set

1016
00:48:23,099 --> 00:48:25,319
when we do nth we only get the

1017
00:48:25,319 --> 00:48:26,700
kubernetes one right we have to get the

1018
00:48:26,700 --> 00:48:27,960
kubernetes one to be able to talk to the

1019
00:48:27,960 --> 00:48:30,000
kubernetes API if we need to be able to

1020
00:48:30,000 --> 00:48:32,460
interact with kubernetes however the

1021
00:48:32,460 --> 00:48:34,260
service that we previously deployed we

1022
00:48:34,260 --> 00:48:36,119
cannot see anymore

1023
00:48:36,119 --> 00:48:38,099
so from an Auditor's perspective think

1024
00:48:38,099 --> 00:48:39,000
about

1025
00:48:39,000 --> 00:48:41,760
you know what that what someone could do

1026
00:48:41,760 --> 00:48:44,280
with the information by default right so

1027
00:48:44,280 --> 00:48:45,599
kubernetes by default is giving me

1028
00:48:45,599 --> 00:48:47,760
everything

1029
00:48:47,760 --> 00:48:49,440
the application developers should know

1030
00:48:49,440 --> 00:48:50,940
the endpoints right they should know the

1031
00:48:50,940 --> 00:48:53,819
services talking about consistency

1032
00:48:53,819 --> 00:48:55,380
there's no need for us to be able to

1033
00:48:55,380 --> 00:48:57,119
display all this information in you know

1034
00:48:57,119 --> 00:49:00,260
inside the container

1035
00:49:04,560 --> 00:49:08,760
setcom profiles so by default

1036
00:49:08,760 --> 00:49:10,140
workloads that get deployed into

1037
00:49:10,140 --> 00:49:12,740
kubernetes do not have set com profiles

1038
00:49:12,740 --> 00:49:15,660
provided to you

1039
00:49:15,660 --> 00:49:17,779
um

1040
00:49:18,960 --> 00:49:21,060
pretty insecure probably want to set

1041
00:49:21,060 --> 00:49:24,240
some setcom profiles luckily kubernetes

1042
00:49:24,240 --> 00:49:26,040
provides us

1043
00:49:26,040 --> 00:49:28,319
with the ability to be able to set set

1044
00:49:28,319 --> 00:49:30,720
comp profiles so what I've done here is

1045
00:49:30,720 --> 00:49:33,240
deployed an nginx image and just looked

1046
00:49:33,240 --> 00:49:34,560
at the techcom profiles that it has

1047
00:49:34,560 --> 00:49:35,880
available and we can see there that

1048
00:49:35,880 --> 00:49:39,020
there are there are none

1049
00:49:39,300 --> 00:49:41,960
however

1050
00:49:44,099 --> 00:49:46,760
let's keep going

1051
00:49:47,160 --> 00:49:51,480
we can set centcom profiles by

1052
00:49:51,480 --> 00:49:53,460
configuring an annotation on the

1053
00:49:53,460 --> 00:49:55,020
workload

1054
00:49:55,020 --> 00:49:57,599
to set a specific type so kubernetes

1055
00:49:57,599 --> 00:49:59,160
actually provides you with a couple of

1056
00:49:59,160 --> 00:50:02,640
defaults out of the box that you you may

1057
00:50:02,640 --> 00:50:05,160
want to use or you can create your own

1058
00:50:05,160 --> 00:50:07,260
they are a specific type of resource in

1059
00:50:07,260 --> 00:50:09,420
kubernetes and then you at your workload

1060
00:50:09,420 --> 00:50:12,720
level set an annotation and then specify

1061
00:50:12,720 --> 00:50:14,339
the setcom profile that you want to

1062
00:50:14,339 --> 00:50:16,640
Leverage

1063
00:50:19,800 --> 00:50:21,720
dropping capabilities right we don't

1064
00:50:21,720 --> 00:50:23,579
every container and every workload

1065
00:50:23,579 --> 00:50:24,480
that's currently running in the

1066
00:50:24,480 --> 00:50:26,280
kubernetes cluster does not need all the

1067
00:50:26,280 --> 00:50:27,720
capabilities that it could possibly have

1068
00:50:27,720 --> 00:50:28,920
right

1069
00:50:28,920 --> 00:50:31,680
applications barely need any

1070
00:50:31,680 --> 00:50:34,859
some some uh public images will require

1071
00:50:34,859 --> 00:50:36,599
more

1072
00:50:36,599 --> 00:50:39,119
so again we have the ability to be able

1073
00:50:39,119 --> 00:50:40,920
to set this

1074
00:50:40,920 --> 00:50:44,940
with within our security context

1075
00:50:44,940 --> 00:50:48,300
or you could use Upstream images like we

1076
00:50:48,300 --> 00:50:49,800
were using before this nginx I'm

1077
00:50:49,800 --> 00:50:51,720
privileged which

1078
00:50:51,720 --> 00:50:53,940
set some of these for you by default and

1079
00:50:53,940 --> 00:50:56,520
and reduces what capabilities you have

1080
00:50:56,520 --> 00:50:59,119
available to you

1081
00:51:00,420 --> 00:51:02,160
so

1082
00:51:02,160 --> 00:51:04,440
here again we're back to our normal

1083
00:51:04,440 --> 00:51:06,180
nginx image

1084
00:51:06,180 --> 00:51:08,579
and we are going to drop all of the

1085
00:51:08,579 --> 00:51:10,380
capabilities within nginx right we're

1086
00:51:10,380 --> 00:51:12,359
not going to allow any of them

1087
00:51:12,359 --> 00:51:14,099
this is the default position that I

1088
00:51:14,099 --> 00:51:15,839
would go with drop all of the

1089
00:51:15,839 --> 00:51:17,880
capabilities and slowly but surely add

1090
00:51:17,880 --> 00:51:19,800
the ones that you need right don't allow

1091
00:51:19,800 --> 00:51:21,780
all of them and then work backwards

1092
00:51:21,780 --> 00:51:24,540
so this is an iterative process excuse

1093
00:51:24,540 --> 00:51:26,040
me that you'd have to go on with your

1094
00:51:26,040 --> 00:51:27,559
application developers to understand

1095
00:51:27,559 --> 00:51:30,059
what capabilities they need within their

1096
00:51:30,059 --> 00:51:32,339
application

1097
00:51:32,339 --> 00:51:35,160
so if we deploy this and drop all the

1098
00:51:35,160 --> 00:51:37,800
capabilities we can see that nginx is

1099
00:51:37,800 --> 00:51:40,760
unable to be able to run

1100
00:51:42,599 --> 00:51:45,839
and then we look at the logs

1101
00:51:45,839 --> 00:51:47,520
we can start to understand what it needs

1102
00:51:47,520 --> 00:51:49,260
right it's it's churning some files here

1103
00:51:49,260 --> 00:51:51,480
so we need to allow it to be able to

1104
00:51:51,480 --> 00:51:53,099
have the capability to be able to tone

1105
00:51:53,099 --> 00:51:55,400
things

1106
00:51:57,059 --> 00:51:59,099
again this is an iterative process right

1107
00:51:59,099 --> 00:52:00,839
you're going to have to keep trying and

1108
00:52:00,839 --> 00:52:03,059
trying to run the application dropping

1109
00:52:03,059 --> 00:52:04,680
and allowing each type of capability

1110
00:52:04,680 --> 00:52:06,780
until you get the holy grail and it

1111
00:52:06,780 --> 00:52:08,819
actually runs

1112
00:52:08,819 --> 00:52:10,319
your application developers are going to

1113
00:52:10,319 --> 00:52:11,400
love you because this is probably going

1114
00:52:11,400 --> 00:52:13,380
to be like a 10 15 30 minute exercise

1115
00:52:13,380 --> 00:52:16,700
for every single application

1116
00:52:17,880 --> 00:52:20,160
so how do we reproduce this locally so

1117
00:52:20,160 --> 00:52:24,300
we run the docker container itself and

1118
00:52:24,300 --> 00:52:27,180
we use this cap drop flag and we set

1119
00:52:27,180 --> 00:52:28,859
them to all so this is going to drop all

1120
00:52:28,859 --> 00:52:30,300
of the capabilities

1121
00:52:30,300 --> 00:52:32,579
we again are in the same position so we

1122
00:52:32,579 --> 00:52:35,280
can see that it needs a tone so now what

1123
00:52:35,280 --> 00:52:36,960
we can do

1124
00:52:36,960 --> 00:52:39,780
is we can

1125
00:52:39,780 --> 00:52:42,720
still keep the drop all but now add the

1126
00:52:42,720 --> 00:52:45,660
capability of cap tone run it again see

1127
00:52:45,660 --> 00:52:46,920
what happens I'm not going to go through

1128
00:52:46,920 --> 00:52:48,960
this iterative process like there's four

1129
00:52:48,960 --> 00:52:51,240
or five of them it actually needs

1130
00:52:51,240 --> 00:52:52,140
um

1131
00:52:52,140 --> 00:52:53,880
and then finally you'll get to a

1132
00:52:53,880 --> 00:52:55,980
configuration standpoint where you'll

1133
00:52:55,980 --> 00:52:58,020
know the exact number of capabilities

1134
00:52:58,020 --> 00:52:59,579
that your application needs to be able

1135
00:52:59,579 --> 00:53:02,040
to run again it's time consuming however

1136
00:53:02,040 --> 00:53:05,040
it makes sure that the the container

1137
00:53:05,040 --> 00:53:06,839
configuration is as secure as it

1138
00:53:06,839 --> 00:53:09,440
possibly can be

1139
00:53:13,319 --> 00:53:15,599
yeah continue dropping them and adding

1140
00:53:15,599 --> 00:53:17,220
them until you until you reach the holy

1141
00:53:17,220 --> 00:53:20,540
grail and the application actually runs

1142
00:53:21,240 --> 00:53:23,640
so this is the actual nginx

1143
00:53:23,640 --> 00:53:25,859
configuration with the very insecure

1144
00:53:25,859 --> 00:53:28,260
running as root image with the

1145
00:53:28,260 --> 00:53:31,020
capabilities that need to be added so

1146
00:53:31,020 --> 00:53:33,059
again to reiterate when you're

1147
00:53:33,059 --> 00:53:34,619
performing the audit one of the things

1148
00:53:34,619 --> 00:53:37,140
that we should be looking for is them

1149
00:53:37,140 --> 00:53:38,880
dropping all of the capabilities and

1150
00:53:38,880 --> 00:53:40,500
only adding the ones that they need to

1151
00:53:40,500 --> 00:53:42,839
add if this configuration is not set at

1152
00:53:42,839 --> 00:53:44,640
all they have all the capabilities by

1153
00:53:44,640 --> 00:53:47,000
default

1154
00:53:51,720 --> 00:53:53,940
we can see the nginx image successfully

1155
00:53:53,940 --> 00:53:55,319
running now with those capabilities

1156
00:53:55,319 --> 00:53:58,099
finally added

1157
00:54:01,500 --> 00:54:04,680
now we also have images available to us

1158
00:54:04,680 --> 00:54:06,059
whereby we can drop all of the

1159
00:54:06,059 --> 00:54:07,380
capabilities because it doesn't need any

1160
00:54:07,380 --> 00:54:09,960
right this is the this is the ideal end

1161
00:54:09,960 --> 00:54:12,240
State I don't want to necessarily have

1162
00:54:12,240 --> 00:54:13,800
to add all of the capabilities line by

1163
00:54:13,800 --> 00:54:15,960
line in my kubernetes configuration

1164
00:54:15,960 --> 00:54:18,540
so by default the nginx unprivileged

1165
00:54:18,540 --> 00:54:21,359
container doesn't require any new

1166
00:54:21,359 --> 00:54:23,099
capabilities to be added therefore we

1167
00:54:23,099 --> 00:54:25,500
can drop all this is the ideal

1168
00:54:25,500 --> 00:54:27,780
uh configuration

1169
00:54:27,780 --> 00:54:30,119
to be able to get to the standpoint so

1170
00:54:30,119 --> 00:54:31,859
again we can deploy

1171
00:54:31,859 --> 00:54:34,319
that workload

1172
00:54:34,319 --> 00:54:36,000
and now we can see that that workload is

1173
00:54:36,000 --> 00:54:38,540
successfully running

1174
00:54:40,559 --> 00:54:44,940
so one of the things to to bear in mind

1175
00:54:44,940 --> 00:54:46,200
now

1176
00:54:46,200 --> 00:54:49,319
is what is the application actually

1177
00:54:49,319 --> 00:54:51,540
doing what does it need to do inside the

1178
00:54:51,540 --> 00:54:53,220
container maybe it's just running a

1179
00:54:53,220 --> 00:54:55,800
binary right and it just provides an API

1180
00:54:55,800 --> 00:54:58,380
endpoint or maybe it actually needs to

1181
00:54:58,380 --> 00:55:01,200
write some configuration at startup for

1182
00:55:01,200 --> 00:55:03,119
it to be able to know where the database

1183
00:55:03,119 --> 00:55:04,619
connection is or where a third-party

1184
00:55:04,619 --> 00:55:06,059
application is

1185
00:55:06,059 --> 00:55:07,520
so

1186
00:55:07,520 --> 00:55:09,660
by default

1187
00:55:09,660 --> 00:55:15,240
all of your uh pods have a writable root

1188
00:55:15,240 --> 00:55:16,619
file system right I can go in there and

1189
00:55:16,619 --> 00:55:19,400
write whatever I want

1190
00:55:19,440 --> 00:55:20,880
obviously we don't want to be able to do

1191
00:55:20,880 --> 00:55:22,859
that again same thing again when I was

1192
00:55:22,859 --> 00:55:24,359
talking about having that common

1193
00:55:24,359 --> 00:55:25,740
directory structure within your

1194
00:55:25,740 --> 00:55:28,319
application configuration this is why we

1195
00:55:28,319 --> 00:55:29,520
want to start to be able to do this

1196
00:55:29,520 --> 00:55:31,440
right we want to make the root file

1197
00:55:31,440 --> 00:55:33,540
system by default read only and then

1198
00:55:33,540 --> 00:55:35,220
have directories where the application

1199
00:55:35,220 --> 00:55:37,440
can perform its work doesn't need to be

1200
00:55:37,440 --> 00:55:38,760
able to write to all of the directories

1201
00:55:38,760 --> 00:55:39,900
that are possible on the root file

1202
00:55:39,900 --> 00:55:42,079
system

1203
00:55:43,680 --> 00:55:45,000
so

1204
00:55:45,000 --> 00:55:46,800
what I'm doing here is I'm running our

1205
00:55:46,800 --> 00:55:48,359
nice Docker pseudo image that we run

1206
00:55:48,359 --> 00:55:50,579
earlier and I'm running a sudo apt

1207
00:55:50,579 --> 00:55:53,700
update right and now because the root

1208
00:55:53,700 --> 00:55:56,579
file system is writable I can install

1209
00:55:56,579 --> 00:55:58,319
all the packages that I want I can run

1210
00:55:58,319 --> 00:55:59,640
anything that I want to be able to run

1211
00:55:59,640 --> 00:56:01,619
right from a hacker's perspective this

1212
00:56:01,619 --> 00:56:03,599
is a dream I can install all kinds of

1213
00:56:03,599 --> 00:56:04,740
tools

1214
00:56:04,740 --> 00:56:07,140
I can work out what's going on in your

1215
00:56:07,140 --> 00:56:08,940
cluster start to sniff traffic between

1216
00:56:08,940 --> 00:56:10,920
services like the list is endless what I

1217
00:56:10,920 --> 00:56:12,839
can do here all right we don't want to

1218
00:56:12,839 --> 00:56:15,599
allow every application to be able to

1219
00:56:15,599 --> 00:56:20,599
have a writable read-only file system

1220
00:56:22,440 --> 00:56:24,599
so luckily enough for us kubernetes

1221
00:56:24,599 --> 00:56:26,640
provides us with a security context to

1222
00:56:26,640 --> 00:56:28,140
where we can set this

1223
00:56:28,140 --> 00:56:30,359
to True right so we can set the default

1224
00:56:30,359 --> 00:56:34,160
position to have a read-only file system

1225
00:56:34,500 --> 00:56:36,240
again we're going to run the same image

1226
00:56:36,240 --> 00:56:38,220
we're going to use the security context

1227
00:56:38,220 --> 00:56:40,140
and set the read-only root file system

1228
00:56:40,140 --> 00:56:42,680
to true

1229
00:56:50,520 --> 00:56:52,619
and when we try and do a pseudo update

1230
00:56:52,619 --> 00:56:53,940
it's not possible right we don't have

1231
00:56:53,940 --> 00:56:57,260
the ability for us to be able to do that

1232
00:57:02,700 --> 00:57:05,760
again we can also have and try and use

1233
00:57:05,760 --> 00:57:07,619
this with our with our Public Image that

1234
00:57:07,619 --> 00:57:09,180
we have available to us set the

1235
00:57:09,180 --> 00:57:12,480
read-only file system to uh to True

1236
00:57:12,480 --> 00:57:14,760
container is unable to run right because

1237
00:57:14,760 --> 00:57:16,380
it if you remember before it needed to

1238
00:57:16,380 --> 00:57:17,700
be able to write to the to the

1239
00:57:17,700 --> 00:57:20,480
underlying file system

1240
00:57:23,220 --> 00:57:26,540
I'm going to skip through this

1241
00:57:28,319 --> 00:57:29,940
so what we can do is we need to be able

1242
00:57:29,940 --> 00:57:33,000
to find and locate the directories where

1243
00:57:33,000 --> 00:57:35,760
this application needs to be able to run

1244
00:57:35,760 --> 00:57:39,780
and then once we have those we can mount

1245
00:57:39,780 --> 00:57:43,559
those uh Mount empty directories inside

1246
00:57:43,559 --> 00:57:45,300
of our container

1247
00:57:45,300 --> 00:57:47,880
at the specific uh directory location

1248
00:57:47,880 --> 00:57:49,740
that the application actually needs

1249
00:57:49,740 --> 00:57:52,140
right so if we

1250
00:57:52,140 --> 00:57:54,119
have application configurations where we

1251
00:57:54,119 --> 00:57:55,440
have a standardized directory structure

1252
00:57:55,440 --> 00:57:57,119
this becomes very easy right we have the

1253
00:57:57,119 --> 00:57:59,280
same directory structure we create some

1254
00:57:59,280 --> 00:58:01,020
empty volumes they are able to write and

1255
00:58:01,020 --> 00:58:04,040
read files from those

1256
00:58:08,940 --> 00:58:12,599
okay that's cancel out of here let's go

1257
00:58:12,599 --> 00:58:16,339
to uh rbac

1258
00:58:26,520 --> 00:58:29,400
so we've talked about some workload

1259
00:58:29,400 --> 00:58:31,079
configuration and

1260
00:58:31,079 --> 00:58:34,280
how we can secure our workloads but

1261
00:58:34,280 --> 00:58:38,640
arbuck allows users and workloads to be

1262
00:58:38,640 --> 00:58:40,020
able to

1263
00:58:40,020 --> 00:58:42,119
access resources that are currently

1264
00:58:42,119 --> 00:58:44,940
running in the kubernetes API so what

1265
00:58:44,940 --> 00:58:46,799
I'm going to demonstrate here is the

1266
00:58:46,799 --> 00:58:49,380
unnecessary use of a list permission so

1267
00:58:49,380 --> 00:58:51,480
kubernetes by default allows you to be

1268
00:58:51,480 --> 00:58:53,579
able to get list and watch things what

1269
00:58:53,579 --> 00:58:55,020
we are going to do is we're going to

1270
00:58:55,020 --> 00:58:56,520
create a service account inside of

1271
00:58:56,520 --> 00:58:58,920
kubernetes

1272
00:58:58,920 --> 00:59:01,859
we are going to

1273
00:59:01,859 --> 00:59:05,220
provide a role whereby the only thing

1274
00:59:05,220 --> 00:59:08,040
that we can do is we can list

1275
00:59:08,040 --> 00:59:12,500
secrets in that specific namespace

1276
00:59:14,460 --> 00:59:16,740
we create a role binding whereby we're

1277
00:59:16,740 --> 00:59:18,720
going to bind that service account to

1278
00:59:18,720 --> 00:59:21,618
that cluster role

1279
00:59:23,760 --> 00:59:26,040
we're going to create a secret running

1280
00:59:26,040 --> 00:59:29,058
inside of that namespace

1281
00:59:35,220 --> 00:59:37,200
we're going to create a deployment we're

1282
00:59:37,200 --> 00:59:38,880
going to use the service account as the

1283
00:59:38,880 --> 00:59:40,260
service account that we just created so

1284
00:59:40,260 --> 00:59:44,400
remember it can only list secrets

1285
00:59:57,119 --> 00:59:59,660
oh

1286
01:00:09,240 --> 01:00:13,339
so now I'm inside this running container

1287
01:00:16,020 --> 01:00:17,819
I'm going to run this command here this

1288
01:00:17,819 --> 01:00:19,619
command is going to try and get that

1289
01:00:19,619 --> 01:00:21,299
specific secret that we've just deployed

1290
01:00:21,299 --> 01:00:23,220
what you'll notice is that I can't get

1291
01:00:23,220 --> 01:00:25,079
the data from that secret I'm getting

1292
01:00:25,079 --> 01:00:27,619
forbidden

1293
01:00:28,500 --> 01:00:32,160
however if I use the kubernetes API

1294
01:00:32,160 --> 01:00:34,680
to now do a list

1295
01:00:34,680 --> 01:00:36,780
right list all of the secrets that I

1296
01:00:36,780 --> 01:00:38,640
currently have available to us I now

1297
01:00:38,640 --> 01:00:39,900
have the ability to see every Secret

1298
01:00:39,900 --> 01:00:41,940
inside that namespace and the data

1299
01:00:41,940 --> 01:00:44,540
within that secret

1300
01:00:45,359 --> 01:00:47,700
so be very careful from an audit

1301
01:00:47,700 --> 01:00:49,079
perspective of when you're using that

1302
01:00:49,079 --> 01:00:52,200
list watch also has the same problem so

1303
01:00:52,200 --> 01:00:54,359
you really want to make sure that the

1304
01:00:54,359 --> 01:00:55,500
user

1305
01:00:55,500 --> 01:00:58,440
uses uh or your application uses gets

1306
01:00:58,440 --> 01:01:00,540
more than it does list list is giving

1307
01:01:00,540 --> 01:01:02,579
you way too many permissions right I can

1308
01:01:02,579 --> 01:01:05,040
see every single Secret inside of my

1309
01:01:05,040 --> 01:01:06,480
whole entire namespace I may only want

1310
01:01:06,480 --> 01:01:10,339
to be able to get a specific Secret

1311
01:01:23,220 --> 01:01:25,700
foreign

1312
01:01:27,960 --> 01:01:29,700
the next thing we want to be able to do

1313
01:01:29,700 --> 01:01:32,460
now is after we've gone and and looked

1314
01:01:32,460 --> 01:01:33,780
at some of the arbuck that we have

1315
01:01:33,780 --> 01:01:35,760
available to us we've looked at some of

1316
01:01:35,760 --> 01:01:37,619
the workload configuration we now

1317
01:01:37,619 --> 01:01:38,940
actually want to be able to perform an

1318
01:01:38,940 --> 01:01:40,200
audit

1319
01:01:40,200 --> 01:01:42,299
so things that we want to look for is

1320
01:01:42,299 --> 01:01:43,500
things that we've discussed and wanted

1321
01:01:43,500 --> 01:01:45,960
to be able to stop before so some high

1322
01:01:45,960 --> 01:01:47,819
level ones containers running as

1323
01:01:47,819 --> 01:01:49,619
privileged containers that are allowed

1324
01:01:49,619 --> 01:01:51,020
to perform privilege escalation

1325
01:01:51,020 --> 01:01:53,400
containers that can run as roots and

1326
01:01:53,400 --> 01:01:55,200
containers that do not have a read-only

1327
01:01:55,200 --> 01:01:56,640
file system so what we're doing here is

1328
01:01:56,640 --> 01:01:59,339
honing into workloads more than we are

1329
01:01:59,339 --> 01:02:02,220
our back our back is a is a from an

1330
01:02:02,220 --> 01:02:03,359
audit perspective is still very

1331
01:02:03,359 --> 01:02:05,280
important but we're focusing here on the

1332
01:02:05,280 --> 01:02:08,420
workloads that are currently running

1333
01:02:08,760 --> 01:02:12,000
so there is a tool called uh Cube audit

1334
01:02:12,000 --> 01:02:14,460
by Shopify I don't know if you guys are

1335
01:02:14,460 --> 01:02:15,780
familiar with that

1336
01:02:15,780 --> 01:02:18,180
that will allow you to be able to run

1337
01:02:18,180 --> 01:02:20,400
this and start to look at the

1338
01:02:20,400 --> 01:02:22,680
configuration of your the workloads that

1339
01:02:22,680 --> 01:02:24,000
are running in your kubernetes cluster

1340
01:02:24,000 --> 01:02:26,520
and see where the insecurities or

1341
01:02:26,520 --> 01:02:28,200
vulnerabilities are

1342
01:02:28,200 --> 01:02:30,960
so we are going to we've deployed

1343
01:02:30,960 --> 01:02:33,059
keyboard it and we're now going to run

1344
01:02:33,059 --> 01:02:35,099
keyboard it privileged in our namespace

1345
01:02:35,099 --> 01:02:36,359
that we've currently provided so what

1346
01:02:36,359 --> 01:02:38,640
privilege is doing is it's looking for

1347
01:02:38,640 --> 01:02:40,559
any privileged containers that have the

1348
01:02:40,559 --> 01:02:42,059
ability to be able to run

1349
01:02:42,059 --> 01:02:43,859
and what we can see here if we scroll up

1350
01:02:43,859 --> 01:02:46,920
is it lists out each individual

1351
01:02:46,920 --> 01:02:49,619
deployment and provides you warnings

1352
01:02:49,619 --> 01:02:52,020
around your configuration

1353
01:02:52,020 --> 01:02:53,700
so we can see here that it's

1354
01:02:53,700 --> 01:02:56,940
recommending that we

1355
01:02:56,940 --> 01:02:59,160
we set the we set privilege to focus on

1356
01:02:59,160 --> 01:03:00,359
all of these applications that we've

1357
01:03:00,359 --> 01:03:03,140
previously deployed

1358
01:03:03,720 --> 01:03:06,480
there are there are a load of

1359
01:03:06,480 --> 01:03:09,660
um Cube audit Flags available to you you

1360
01:03:09,660 --> 01:03:11,640
can run keyboard in cluster mode which

1361
01:03:11,640 --> 01:03:13,140
essentially runs it inside the cluster

1362
01:03:13,140 --> 01:03:16,020
and constantly runs uh an audit for you

1363
01:03:16,020 --> 01:03:17,760
gets a good understanding of your

1364
01:03:17,760 --> 01:03:20,160
kubernetes landscape and provides you a

1365
01:03:20,160 --> 01:03:21,299
report out the back of that you can

1366
01:03:21,299 --> 01:03:23,579
download that as a CSV or Json file and

1367
01:03:23,579 --> 01:03:25,680
you can use that to really dig into

1368
01:03:25,680 --> 01:03:27,000
um

1369
01:03:27,000 --> 01:03:31,520
to your your audit

1370
01:03:35,160 --> 01:03:37,559
I wanted to show guardrails but I'm I'm

1371
01:03:37,559 --> 01:03:39,359
conscious of time

1372
01:03:39,359 --> 01:03:42,200
so

1373
01:03:43,559 --> 01:03:44,700
I'm going to leave it there and I'm

1374
01:03:44,700 --> 01:03:46,559
going to open the floor for questions

1375
01:03:46,559 --> 01:03:49,200
um thanks very much uh again Jimmy I

1376
01:03:49,200 --> 01:03:52,500
myself Adam and Andrew will be at the

1377
01:03:52,500 --> 01:03:57,599
expo hall uh boo G 32 uh come along to

1378
01:03:57,599 --> 01:03:59,460
the booth see what we're doing

1379
01:03:59,460 --> 01:04:00,119
um

1380
01:04:00,119 --> 01:04:02,400
yeah thank you very much

1381
01:04:02,400 --> 01:04:09,540
[Applause]

1382
01:04:09,540 --> 01:04:12,500
anyone have any questions

1383
01:04:18,200 --> 01:04:22,619
yeah so the the URL that I provided

1384
01:04:22,619 --> 01:04:24,680
um

1385
01:04:25,559 --> 01:04:27,299
this URL here

1386
01:04:27,299 --> 01:04:29,700
is going to maintain online it's the

1387
01:04:29,700 --> 01:04:31,559
whole Workshop end to end it will go

1388
01:04:31,559 --> 01:04:34,319
through with you you can clone uh the

1389
01:04:34,319 --> 01:04:35,819
Repository

1390
01:04:35,819 --> 01:04:39,000
all of the demos all of the scripts that

1391
01:04:39,000 --> 01:04:41,160
we've currently run are are in that

1392
01:04:41,160 --> 01:04:43,680
repository you can create a gke cluster

1393
01:04:43,680 --> 01:04:44,700
and run through this whole thing

1394
01:04:44,700 --> 01:04:46,879
yourself

1395
01:04:48,480 --> 01:04:51,680
uh this one here yeah

1396
01:04:57,059 --> 01:04:58,980
yeah it's all in there the workshop all

1397
01:04:58,980 --> 01:05:01,319
of the workshop configuration is is in

1398
01:05:01,319 --> 01:05:03,500
here

1399
01:05:04,040 --> 01:05:06,420
the step by step is also yeah step by

1400
01:05:06,420 --> 01:05:09,000
step is also in there

1401
01:05:09,000 --> 01:05:12,180
do you need to use these not for me

1402
01:05:12,180 --> 01:05:14,339
so if you if you want to be able to run

1403
01:05:14,339 --> 01:05:17,400
the repository locally uh there is a

1404
01:05:17,400 --> 01:05:19,920
make file task just run make run from

1405
01:05:19,920 --> 01:05:21,780
that directory that will spin up the

1406
01:05:21,780 --> 01:05:23,579
website for you locally if you want to

1407
01:05:23,579 --> 01:05:25,020
run it locally

1408
01:05:25,020 --> 01:05:27,240
um and if you don't you can use this URL

1409
01:05:27,240 --> 01:05:29,640
here this URL is going to be up for the

1410
01:05:29,640 --> 01:05:33,558
whole of coupon and further on

1411
01:05:35,460 --> 01:05:38,599
anyone else have any questions

1412
01:05:41,160 --> 01:05:44,040
perfect thank you very much yeah let's

1413
01:05:44,040 --> 01:05:46,020
thank our speaker once again yes thanks

1414
01:05:46,020 --> 01:05:48,070
Jeff thanks Jimmy

1415
01:05:48,070 --> 01:05:52,699
[Applause]

