1
00:00:00,000 --> 00:00:01,620
as he says I'm talking about building

2
00:00:01,620 --> 00:00:04,440
images for the secure plug chain I'm a

3
00:00:04,440 --> 00:00:06,960
product manager at chain guard and I

4
00:00:06,960 --> 00:00:10,099
work on our images product

5
00:00:10,620 --> 00:00:13,380
um I think it's fair to say that people

6
00:00:13,380 --> 00:00:15,960
and my people I mean the public and

7
00:00:15,960 --> 00:00:18,600
politicians are not very happy with the

8
00:00:18,600 --> 00:00:22,199
state of security in I.T in general and

9
00:00:22,199 --> 00:00:23,760
in such a good serious enough that

10
00:00:23,760 --> 00:00:25,800
politicians are now actually doing

11
00:00:25,800 --> 00:00:29,220
something and writing acts and executive

12
00:00:29,220 --> 00:00:31,679
orders to try and encourage some

13
00:00:31,679 --> 00:00:34,320
Improvement

14
00:00:34,320 --> 00:00:37,140
and you can kind of understand why this

15
00:00:37,140 --> 00:00:38,880
was the the Sona type report that came

16
00:00:38,880 --> 00:00:41,879
out a few days ago or a week ago or so

17
00:00:41,879 --> 00:00:45,540
um and they claim 742 average growth

18
00:00:45,540 --> 00:00:48,000
rate in supply chain attacks I think

19
00:00:48,000 --> 00:00:49,079
this is

20
00:00:49,079 --> 00:00:52,320
uh like malicious packages found in

21
00:00:52,320 --> 00:00:54,379
package repository so things like typo

22
00:00:54,379 --> 00:00:59,039
typo Squadron attacks and similar

23
00:00:59,039 --> 00:01:01,020
but at any rate it certainly goes to

24
00:01:01,020 --> 00:01:02,879
show there are problems and they're

25
00:01:02,879 --> 00:01:05,099
growing and we need to try to address

26
00:01:05,099 --> 00:01:07,200
them

27
00:01:07,200 --> 00:01:09,360
um my basic thesis here is that things

28
00:01:09,360 --> 00:01:11,159
are kind of broken

29
00:01:11,159 --> 00:01:13,020
at the minute we certainly could be

30
00:01:13,020 --> 00:01:15,000
doing a lot better than we are at the

31
00:01:15,000 --> 00:01:16,920
minute

32
00:01:16,920 --> 00:01:18,780
um one of the things that I think is

33
00:01:18,780 --> 00:01:20,880
definitely room for improvement is the

34
00:01:20,880 --> 00:01:22,560
state of provenance

35
00:01:22,560 --> 00:01:25,939
so you know this is a sneaker that is

36
00:01:25,939 --> 00:01:28,920
clearly a Converse knockoff

37
00:01:28,920 --> 00:01:31,020
um

38
00:01:31,020 --> 00:01:32,939
but at the minute it's very hard to tell

39
00:01:32,939 --> 00:01:35,100
when you have an image where that image

40
00:01:35,100 --> 00:01:38,880
came from generally people uh base this

41
00:01:38,880 --> 00:01:40,500
on the name of the image because

42
00:01:40,500 --> 00:01:42,479
typically the image includes like the

43
00:01:42,479 --> 00:01:45,000
repository and the registry it came from

44
00:01:45,000 --> 00:01:46,799
so I might trust this image because it

45
00:01:46,799 --> 00:01:48,420
looks like it's a Docker official image

46
00:01:48,420 --> 00:01:50,399
or I'm a trust this image because the

47
00:01:50,399 --> 00:01:53,280
name indicates it came from my my own

48
00:01:53,280 --> 00:01:55,860
organization's registry

49
00:01:55,860 --> 00:01:57,720
but actually proven that it came from

50
00:01:57,720 --> 00:01:59,340
there or it was built

51
00:01:59,340 --> 00:02:01,619
by the people you think built it is

52
00:02:01,619 --> 00:02:03,240
another question and that's not really

53
00:02:03,240 --> 00:02:04,979
answer at all

54
00:02:04,979 --> 00:02:07,259
um by most people or answerable by most

55
00:02:07,259 --> 00:02:09,720
people yeah and similarly we can't prove

56
00:02:09,720 --> 00:02:11,099
that things haven't been tampered with

57
00:02:11,099 --> 00:02:13,739
either you know in transit or at rest or

58
00:02:13,739 --> 00:02:16,080
wherever

59
00:02:16,080 --> 00:02:17,280
um there's also a separate point about

60
00:02:17,280 --> 00:02:18,720
reproducibility

61
00:02:18,720 --> 00:02:20,940
so even if I have like the docker file

62
00:02:20,940 --> 00:02:22,440
and the source used to create an image

63
00:02:22,440 --> 00:02:24,360
typically if I run a Docker build again

64
00:02:24,360 --> 00:02:26,340
I'll end up with a very slightly

65
00:02:26,340 --> 00:02:27,780
different image because there'll be

66
00:02:27,780 --> 00:02:30,180
things like different time stamps and

67
00:02:30,180 --> 00:02:31,920
build IDs and things like that will be

68
00:02:31,920 --> 00:02:34,099
different which means they end up with a

69
00:02:34,099 --> 00:02:38,899
an image that is bitwise not identical

70
00:02:40,620 --> 00:02:42,660
um this Canon is a big problem so we

71
00:02:42,660 --> 00:02:44,459
have these great tools things like sneak

72
00:02:44,459 --> 00:02:47,519
trivi gripe and they're really useful

73
00:02:47,519 --> 00:02:49,560
and they're very powerful but they give

74
00:02:49,560 --> 00:02:52,560
us a lot of output

75
00:02:52,560 --> 00:02:55,739
um for the majority of images and the

76
00:02:55,739 --> 00:02:57,360
thing is most organizations they don't

77
00:02:57,360 --> 00:02:59,519
really know what to do with this output

78
00:02:59,519 --> 00:03:00,360
um you know you get like 100

79
00:03:00,360 --> 00:03:02,459
vulnerabilities or 200 vulnerabilities

80
00:03:02,459 --> 00:03:04,379
what are you meant to do with that I

81
00:03:04,379 --> 00:03:05,580
mean you don't have time to go and

82
00:03:05,580 --> 00:03:07,739
investigate each one and even if you do

83
00:03:07,739 --> 00:03:10,379
but next week There's a dozen more

84
00:03:10,379 --> 00:03:11,340
um

85
00:03:11,340 --> 00:03:14,040
so it's a very difficult situation with

86
00:03:14,040 --> 00:03:16,500
scanning at the moment

87
00:03:16,500 --> 00:03:18,900
and on a similar topic it's very hard to

88
00:03:18,900 --> 00:03:21,360
gauge exposure so say like a new

89
00:03:21,360 --> 00:03:23,040
vulnerability drops tomorrow that looks

90
00:03:23,040 --> 00:03:24,959
quite important we would like to be able

91
00:03:24,959 --> 00:03:27,780
to say Hey you know I have four

92
00:03:27,780 --> 00:03:29,280
containers running in production that

93
00:03:29,280 --> 00:03:31,500
potentially exposed us vulnerability

94
00:03:31,500 --> 00:03:35,400
but we can't and nobody really can

95
00:03:35,400 --> 00:03:37,739
um and that's definitely an area that we

96
00:03:37,739 --> 00:03:39,780
hope to move forward in in as an

97
00:03:39,780 --> 00:03:43,459
industry in the near future

98
00:03:47,519 --> 00:03:48,659
um but yeah so I'm going to talk about

99
00:03:48,659 --> 00:03:50,760
some approaches to trying to fix some of

100
00:03:50,760 --> 00:03:52,799
these problems so a lot of this is what

101
00:03:52,799 --> 00:03:54,060
we can do today

102
00:03:54,060 --> 00:03:55,140
um there is also a little bit about

103
00:03:55,140 --> 00:03:57,000
what's coming in the future and what

104
00:03:57,000 --> 00:03:59,340
we're kind of working on

105
00:03:59,340 --> 00:04:02,220
so provenance this is a Detroit deep

106
00:04:02,220 --> 00:04:03,900
dish pizza

107
00:04:03,900 --> 00:04:05,580
um so in terms of provenance you

108
00:04:05,580 --> 00:04:06,420
wouldn't want to be fooled into

109
00:04:06,420 --> 00:04:08,280
accidentally getting at Chicago deep

110
00:04:08,280 --> 00:04:10,879
dish pizza

111
00:04:11,640 --> 00:04:13,920
um and the way to look at provenance uh

112
00:04:13,920 --> 00:04:15,540
are one way to improve province is this

113
00:04:15,540 --> 00:04:17,639
idea of signing so we can sign our

114
00:04:17,639 --> 00:04:20,220
container images which lets us prove

115
00:04:20,220 --> 00:04:22,440
that we know where they came from and

116
00:04:22,440 --> 00:04:23,639
who built them

117
00:04:23,639 --> 00:04:25,740
uh there's a lead-in way to do this at

118
00:04:25,740 --> 00:04:27,960
the moment is sync store

119
00:04:27,960 --> 00:04:30,720
um and we got this date for six stores

120
00:04:30,720 --> 00:04:32,759
now used to sign all the kubernetes

121
00:04:32,759 --> 00:04:34,680
official images

122
00:04:34,680 --> 00:04:37,560
which is a great step forward

123
00:04:37,560 --> 00:04:38,880
um a couple of nice things about Sig

124
00:04:38,880 --> 00:04:41,040
store one is the signatures are actually

125
00:04:41,040 --> 00:04:43,199
stored alongside the images so you don't

126
00:04:43,199 --> 00:04:45,240
need to run a separate server to store

127
00:04:45,240 --> 00:04:46,979
your signatures

128
00:04:46,979 --> 00:04:48,600
and it's also something really nice

129
00:04:48,600 --> 00:04:51,300
called keyless signing so I don't know

130
00:04:51,300 --> 00:04:53,280
about you but I hate having to keep here

131
00:04:53,280 --> 00:04:54,300
and I've got to try and keep this

132
00:04:54,300 --> 00:04:55,500
private keep

133
00:04:55,500 --> 00:04:57,900
um safe and secure and worry about it

134
00:04:57,900 --> 00:05:00,020
Etc

135
00:05:00,180 --> 00:05:01,440
um yeah so I've got a couple of small

136
00:05:01,440 --> 00:05:04,580
demos that will hopefully work

137
00:05:05,820 --> 00:05:08,040
if I make this is that screen still off

138
00:05:08,040 --> 00:05:09,180
the side there

139
00:05:09,180 --> 00:05:12,320
oh can you see the whole of that

140
00:05:12,360 --> 00:05:15,500
that's good okay

141
00:05:16,199 --> 00:05:18,120
Oh see now you can see the Magics I've

142
00:05:18,120 --> 00:05:19,500
got when the script I should have

143
00:05:19,500 --> 00:05:21,360
written that before

144
00:05:21,360 --> 00:05:22,860
okay

145
00:05:22,860 --> 00:05:25,139
so I'm going to build a Docker image

146
00:05:25,139 --> 00:05:26,460
here and this could go horribly wrong

147
00:05:26,460 --> 00:05:28,979
because although it's like a automated

148
00:05:28,979 --> 00:05:31,380
um it does still run the commands

149
00:05:31,380 --> 00:05:32,340
um

150
00:05:32,340 --> 00:05:35,100
so we're building a simple Docker image

151
00:05:35,100 --> 00:05:36,180
it doesn't really matter too much what's

152
00:05:36,180 --> 00:05:37,680
in it

153
00:05:37,680 --> 00:05:39,360
um

154
00:05:39,360 --> 00:05:42,660
I'm then going to push that to my

155
00:05:42,660 --> 00:05:46,400
repository on the docker hub

156
00:05:47,699 --> 00:05:49,259
yeah so it's got some Elementor already

157
00:05:49,259 --> 00:05:52,020
exists so that was quick

158
00:05:52,020 --> 00:05:53,220
um I'm now going to try and sign this

159
00:05:53,220 --> 00:05:56,100
with cosine so as of today I do have to

160
00:05:56,100 --> 00:05:58,139
type cosine experimental equals one to

161
00:05:58,139 --> 00:06:00,000
turn on the keyless signing

162
00:06:00,000 --> 00:06:03,000
um there may be uh something about that

163
00:06:03,000 --> 00:06:05,759
being fixed in the very near future

164
00:06:05,759 --> 00:06:07,880
um

165
00:06:09,060 --> 00:06:10,919
and then the image that I want to assign

166
00:06:10,919 --> 00:06:14,820
isn't like emote cosine colon Detroit I

167
00:06:14,820 --> 00:06:16,620
really want to sign the digest so that

168
00:06:16,620 --> 00:06:18,660
I'm absolutely sure that I'm signing

169
00:06:18,660 --> 00:06:20,580
this same image and nobody else is like

170
00:06:20,580 --> 00:06:21,600
pushed

171
00:06:21,600 --> 00:06:25,340
um to the Detroit tag in the main thing

172
00:06:26,880 --> 00:06:28,620
um so I wish I had time to go into the

173
00:06:28,620 --> 00:06:31,500
details of how this all works uh but I'm

174
00:06:31,500 --> 00:06:33,000
going to answer yes here

175
00:06:33,000 --> 00:06:34,440
um this is actually open the browser in

176
00:06:34,440 --> 00:06:35,520
the background

177
00:06:35,520 --> 00:06:37,919
and it's asking me to authenticate with

178
00:06:37,919 --> 00:06:40,080
an oidc provider so I didn't I didn't

179
00:06:40,080 --> 00:06:41,759
give it like a private key to sign with

180
00:06:41,759 --> 00:06:44,580
and so what it wants to do is use my

181
00:06:44,580 --> 00:06:47,880
oidc credential to set up a temporary

182
00:06:47,880 --> 00:06:50,400
certificate behind the scenes

183
00:06:50,400 --> 00:06:53,699
so I'm going to log in with GitHub

184
00:06:53,699 --> 00:06:56,600
that looks good

185
00:06:58,440 --> 00:07:00,300
and that's going to push the signature

186
00:07:00,300 --> 00:07:02,460
up to the docker hub

187
00:07:02,460 --> 00:07:03,780
there's also some stuff with

188
00:07:03,780 --> 00:07:05,940
transparency logs and wrecker

189
00:07:05,940 --> 00:07:07,020
unfortunately that went on in the

190
00:07:07,020 --> 00:07:08,280
background

191
00:07:08,280 --> 00:07:09,660
unfortunately I don't have time to

192
00:07:09,660 --> 00:07:11,220
explain all that

193
00:07:11,220 --> 00:07:14,580
and we have Wi-Fi there we it doesn't go

194
00:07:14,580 --> 00:07:16,699
wrong

195
00:07:18,120 --> 00:07:19,860
whoa

196
00:07:19,860 --> 00:07:22,699
I don't know what went wrong

197
00:07:23,699 --> 00:07:26,699
I can't it's in the script

198
00:07:26,699 --> 00:07:30,560
so presumably this will fail

199
00:07:30,599 --> 00:07:32,759
yeah I think I just timed out no it

200
00:07:32,759 --> 00:07:33,840
didn't

201
00:07:33,840 --> 00:07:35,220
I'm not sure what the error was about

202
00:07:35,220 --> 00:07:38,819
though oh so because I've rebuilt this

203
00:07:38,819 --> 00:07:40,319
image

204
00:07:40,319 --> 00:07:42,240
um and it used the cache version it

205
00:07:42,240 --> 00:07:43,500
actually has the same digest as another

206
00:07:43,500 --> 00:07:45,240
image that you already signed so we got

207
00:07:45,240 --> 00:07:46,680
away with this

208
00:07:46,680 --> 00:07:47,819
um

209
00:07:47,819 --> 00:07:50,460
and what this is saying is I use the

210
00:07:50,460 --> 00:07:53,880
GitHub oidc provider and it was signed

211
00:07:53,880 --> 00:07:57,300
by somebody basically uh with

212
00:07:57,300 --> 00:07:59,360
the authority to access to Adrian

213
00:07:59,360 --> 00:08:03,479
adrian.mote.com account on GitHub

214
00:08:03,479 --> 00:08:06,500
um at that point in time

215
00:08:07,740 --> 00:08:10,319
oh that's the next thing

216
00:08:10,319 --> 00:08:13,160
I'm going forward

217
00:08:19,800 --> 00:08:21,840
yeah so as far as lemon chain goes

218
00:08:21,840 --> 00:08:24,419
please try and use it where you can

219
00:08:24,419 --> 00:08:26,699
um if your choice of images try and use

220
00:08:26,699 --> 00:08:28,440
ones that are signed

221
00:08:28,440 --> 00:08:30,180
um try outstanding your own images one

222
00:08:30,180 --> 00:08:32,099
thing I didn't talk about is if you use

223
00:08:32,099 --> 00:08:33,779
like GitHub actions or similar to build

224
00:08:33,779 --> 00:08:35,760
your images it's really easy to use the

225
00:08:35,760 --> 00:08:37,500
keyless sign-in because it's already set

226
00:08:37,500 --> 00:08:40,200
up the ideas that oidc account so really

227
00:08:40,200 --> 00:08:41,700
it's just a case of running cosine

228
00:08:41,700 --> 00:08:43,620
verify and there's not much else to do

229
00:08:43,620 --> 00:08:46,740
and no keys to worry about

230
00:08:46,740 --> 00:08:48,480
um yep make sure you verify signatures

231
00:08:48,480 --> 00:08:49,980
there's no point in just signing things

232
00:08:49,980 --> 00:08:51,540
we also need to be checking the

233
00:08:51,540 --> 00:08:53,399
signatures and the typical way to do

234
00:08:53,399 --> 00:08:55,500
that and kubernetes cluster is to use a

235
00:08:55,500 --> 00:08:57,899
policy management tool such as oppa or

236
00:08:57,899 --> 00:09:01,080
caverno or train garden Force

237
00:09:01,080 --> 00:09:03,660
um also if you get images from a third

238
00:09:03,660 --> 00:09:06,240
party vendor do ask them if they assign

239
00:09:06,240 --> 00:09:09,660
the images and you know find encourage

240
00:09:09,660 --> 00:09:11,820
them to sign their images

241
00:09:11,820 --> 00:09:14,220
I'm just kind of naive so this is going

242
00:09:14,220 --> 00:09:15,660
back to the problem of like hundreds of

243
00:09:15,660 --> 00:09:18,920
vulnerabilities being reported

244
00:09:19,320 --> 00:09:22,380
um it is possible to you know cut this

245
00:09:22,380 --> 00:09:24,480
noise down drastically and get to the

246
00:09:24,480 --> 00:09:27,660
point where your reports are only

247
00:09:27,660 --> 00:09:29,040
if we're you know finding any

248
00:09:29,040 --> 00:09:30,420
vulnerabilities there's only a handful

249
00:09:30,420 --> 00:09:32,820
that you can cope with

250
00:09:32,820 --> 00:09:34,800
and basically the answer is to cut your

251
00:09:34,800 --> 00:09:36,720
images down to the very minimum set of

252
00:09:36,720 --> 00:09:38,160
dependencies

253
00:09:38,160 --> 00:09:39,720
and to keep those dependencies

254
00:09:39,720 --> 00:09:43,459
absolutely up to date all the time

255
00:09:43,680 --> 00:09:45,120
um there's also in the future there's

256
00:09:45,120 --> 00:09:46,019
something called the vulnerability

257
00:09:46,019 --> 00:09:47,700
exploitability exchange that I'll talk

258
00:09:47,700 --> 00:09:49,740
about later and that may also give us a

259
00:09:49,740 --> 00:09:52,019
way to like filter vulnerabilities

260
00:09:52,019 --> 00:09:54,120
through that and cut the noise down even

261
00:09:54,120 --> 00:09:56,480
further

262
00:09:57,660 --> 00:09:59,160
um so first way to cut down your

263
00:09:59,160 --> 00:10:00,839
dependencies is to use smaller base

264
00:10:00,839 --> 00:10:01,800
images

265
00:10:01,800 --> 00:10:04,560
the easiest way that you can probably do

266
00:10:04,560 --> 00:10:06,000
that's just changing our Frontline today

267
00:10:06,000 --> 00:10:08,100
is to use something like Alpine or

268
00:10:08,100 --> 00:10:09,899
Debian Slim

269
00:10:09,899 --> 00:10:12,360
and that can be a good alternative to

270
00:10:12,360 --> 00:10:13,920
you using something like the full Debian

271
00:10:13,920 --> 00:10:15,140
distribution

272
00:10:15,140 --> 00:10:17,339
but you do find there's still quite a

273
00:10:17,339 --> 00:10:18,899
lot of stuff in there even with alpine

274
00:10:18,899 --> 00:10:20,760
and Debian I mean Alpine's probably only

275
00:10:20,760 --> 00:10:23,160
55 megabytes I think debian's limbs

276
00:10:23,160 --> 00:10:25,620
about 50. so there's still quite a few

277
00:10:25,620 --> 00:10:27,180
potentially vulnerable components in

278
00:10:27,180 --> 00:10:28,980
there

279
00:10:28,980 --> 00:10:30,540
um the other thing about these distros

280
00:10:30,540 --> 00:10:32,760
is updates sometimes take time because

281
00:10:32,760 --> 00:10:35,640
what you have to wait for is Upstream to

282
00:10:35,640 --> 00:10:38,480
either release a new version with a fix

283
00:10:38,480 --> 00:10:42,720
or to release a patch and then the

284
00:10:42,720 --> 00:10:45,480
distribution needs to

285
00:10:45,480 --> 00:10:48,000
um update their package and then you

286
00:10:48,000 --> 00:10:50,760
need to wait for the image built from

287
00:10:50,760 --> 00:10:52,860
those packages to be updated so

288
00:10:52,860 --> 00:10:54,420
typically you know it's going to take a

289
00:10:54,420 --> 00:10:56,220
week or two before vulnerabilities are

290
00:10:56,220 --> 00:10:58,459
addressed

291
00:11:00,600 --> 00:11:02,459
um we can cut things down a lot further

292
00:11:02,459 --> 00:11:03,600
if we look at things like Google

293
00:11:03,600 --> 00:11:06,000
container tools digitalis images

294
00:11:06,000 --> 00:11:08,100
and I'm sure some of you have seen these

295
00:11:08,100 --> 00:11:10,680
uh these are like really small so these

296
00:11:10,680 --> 00:11:12,360
images

297
00:11:12,360 --> 00:11:14,100
um they contain a bit more than scratch

298
00:11:14,100 --> 00:11:16,019
right so they do have a few things in

299
00:11:16,019 --> 00:11:18,720
them typically like a temp directory

300
00:11:18,720 --> 00:11:20,640
like TLS certificate so you can actually

301
00:11:20,640 --> 00:11:23,700
talk to two websites

302
00:11:23,700 --> 00:11:26,579
but the slim you know the cut down to

303
00:11:26,579 --> 00:11:27,959
the extent they won't even have a shell

304
00:11:27,959 --> 00:11:30,959
or a package manager inside them so you

305
00:11:30,959 --> 00:11:32,100
won't be able to do things like app

306
00:11:32,100 --> 00:11:35,040
install and things like that

307
00:11:35,040 --> 00:11:36,600
um they're perfect for running things

308
00:11:36,600 --> 00:11:39,959
like uh statically compelled binaries

309
00:11:39,959 --> 00:11:41,760
that you can do with like go or see or

310
00:11:41,760 --> 00:11:44,000
rust

311
00:11:44,160 --> 00:11:46,019
um they also Google also has a couple of

312
00:11:46,019 --> 00:11:47,700
images I think one for Java maybe one

313
00:11:47,700 --> 00:11:50,040
for python so you can run Dynamic stuff

314
00:11:50,040 --> 00:11:51,600
like that as well

315
00:11:51,600 --> 00:11:53,760
uh but there are some drawbacks

316
00:11:53,760 --> 00:11:55,500
typically the Google container tools

317
00:11:55,500 --> 00:11:57,300
Restless this list of is kind of hard to

318
00:11:57,300 --> 00:11:58,440
extend

319
00:11:58,440 --> 00:12:00,180
um even though it's

320
00:12:00,180 --> 00:12:02,579
um based on Debian so it's like a really

321
00:12:02,579 --> 00:12:05,339
stripped down form of Debian

322
00:12:05,339 --> 00:12:06,600
um and you would like to think you could

323
00:12:06,600 --> 00:12:08,700
like apps install stuff but doing that

324
00:12:08,700 --> 00:12:10,380
is actually kind of difficult and you'll

325
00:12:10,380 --> 00:12:12,180
end up having to play with basil if you

326
00:12:12,180 --> 00:12:15,319
want to create your own versions

327
00:12:15,360 --> 00:12:18,740
so a chain guard we basically created

328
00:12:18,740 --> 00:12:22,140
our own base images using a very similar

329
00:12:22,140 --> 00:12:24,660
technique to GCT distortless so we have

330
00:12:24,660 --> 00:12:26,220
base images

331
00:12:26,220 --> 00:12:28,560
um that completely slim down

332
00:12:28,560 --> 00:12:29,579
um to the extent that they don't have a

333
00:12:29,579 --> 00:12:32,519
package manager or shell as well

334
00:12:32,519 --> 00:12:33,839
but

335
00:12:33,839 --> 00:12:35,820
we build our images with someone called

336
00:12:35,820 --> 00:12:39,420
apko and it's easy for us to extend

337
00:12:39,420 --> 00:12:41,640
these images and add in whatever we like

338
00:12:41,640 --> 00:12:43,100
so we have both

339
00:12:43,100 --> 00:12:46,019
base images in the same sensors the GC

340
00:12:46,019 --> 00:12:48,000
as the GCT distress ones but also some

341
00:12:48,000 --> 00:12:50,459
application images so things like nginx

342
00:12:50,459 --> 00:12:52,560
and a git image that I'll show you in a

343
00:12:52,560 --> 00:12:53,820
second

344
00:12:53,820 --> 00:12:56,000
um all our images also come with s-bombs

345
00:12:56,000 --> 00:12:58,740
but importantly we continuously are

346
00:12:58,740 --> 00:13:00,839
updating these images so we're pulling

347
00:13:00,839 --> 00:13:02,700
and getting the latest sources and

348
00:13:02,700 --> 00:13:04,800
recompiling every night and building new

349
00:13:04,800 --> 00:13:07,620
images so hopefully all vulnerabilities

350
00:13:07,620 --> 00:13:11,100
should be addressed as quickly as we can

351
00:13:11,100 --> 00:13:12,480
um we basically have two flavors of

352
00:13:12,480 --> 00:13:14,279
images at the minute there's images

353
00:13:14,279 --> 00:13:16,800
built from using Alpine packages but

354
00:13:16,800 --> 00:13:19,380
there's also images built using packages

355
00:13:19,380 --> 00:13:21,800
from our own distribution called Wolfie

356
00:13:21,800 --> 00:13:25,019
which is built against julib C so now

357
00:13:25,019 --> 00:13:27,300
you can get very minimal gwc images as

358
00:13:27,300 --> 00:13:31,099
well as muzzle build ones

359
00:13:31,380 --> 00:13:34,019
and I wish I had more time to go into

360
00:13:34,019 --> 00:13:35,639
um Wolfie but that'll be for another

361
00:13:35,639 --> 00:13:36,839
time

362
00:13:36,839 --> 00:13:38,940
um so I want to quickly demonstrate sort

363
00:13:38,940 --> 00:13:40,980
of what I mean in practice

364
00:13:40,980 --> 00:13:43,800
so if we look at the nginx images in the

365
00:13:43,800 --> 00:13:46,500
docker Hub and I run sneak or trivia

366
00:13:46,500 --> 00:13:48,600
gripe against them

367
00:13:48,600 --> 00:13:51,000
the internet's latest image I think that

368
00:13:51,000 --> 00:13:53,760
uses Debian by default not even Divi and

369
00:13:53,760 --> 00:13:55,980
slim

370
00:13:55,980 --> 00:13:59,160
um and I last time I ran it uh this

371
00:13:59,160 --> 00:14:01,680
phone the 143 dependencies so there's a

372
00:14:01,680 --> 00:14:03,899
lot of components in there and there's

373
00:14:03,899 --> 00:14:07,079
94 problems now admittedly the vast

374
00:14:07,079 --> 00:14:08,820
majority of these things are going to be

375
00:14:08,820 --> 00:14:11,339
less critical but the mass the vast

376
00:14:11,339 --> 00:14:12,660
majority are going to be like negligible

377
00:14:12,660 --> 00:14:15,360
and so on but all the same it's tough

378
00:14:15,360 --> 00:14:17,579
vulnerabilities that you know you've got

379
00:14:17,579 --> 00:14:19,680
to look at and think about and deal with

380
00:14:19,680 --> 00:14:21,360
and it'll be much simpler if they simply

381
00:14:21,360 --> 00:14:23,639
weren't there

382
00:14:23,639 --> 00:14:25,740
um so we can do one better if we look at

383
00:14:25,740 --> 00:14:28,940
the Alpine image

384
00:14:31,139 --> 00:14:33,540
uh and you know so this one had 143

385
00:14:33,540 --> 00:14:36,180
dependencies Alpine image only has 43

386
00:14:36,180 --> 00:14:37,920
dependencies so there's a hundred less

387
00:14:37,920 --> 00:14:40,019
components in the Alpine image than

388
00:14:40,019 --> 00:14:41,699
there isn't a Debian image for whatever

389
00:14:41,699 --> 00:14:43,079
reason

390
00:14:43,079 --> 00:14:44,279
um it's still found two issues

391
00:14:44,279 --> 00:14:49,339
apparently to do with libxml Library

392
00:14:50,160 --> 00:14:51,600
um finally I went against the chain

393
00:14:51,600 --> 00:14:53,760
guard image this is one of our Alpine

394
00:14:53,760 --> 00:14:56,579
images but um we're using our own build

395
00:14:56,579 --> 00:14:58,019
of nginx

396
00:14:58,019 --> 00:15:00,120
from the source

397
00:15:00,120 --> 00:15:01,800
and this case is actually 46

398
00:15:01,800 --> 00:15:03,300
dependencies so some some things are

399
00:15:03,300 --> 00:15:04,320
getting pulled and it shouldn't be I

400
00:15:04,320 --> 00:15:05,880
need to fix that

401
00:15:05,880 --> 00:15:08,100
um but there are no vulnerable pass

402
00:15:08,100 --> 00:15:10,139
around and I did look at this and the

403
00:15:10,139 --> 00:15:11,820
reason is purely that we're using a

404
00:15:11,820 --> 00:15:14,639
newer version of libxml for some reason

405
00:15:14,639 --> 00:15:16,199
I'm not actually sure about Alpine one

406
00:15:16,199 --> 00:15:18,920
hasn't updated yet

407
00:15:22,320 --> 00:15:24,240
um yeah when we do this is using our own

408
00:15:24,240 --> 00:15:27,600
tool called appco to build our images

409
00:15:27,600 --> 00:15:29,459
um it's designed to be reproducible so

410
00:15:29,459 --> 00:15:30,779
if you run the same build twice you

411
00:15:30,779 --> 00:15:33,180
should get the same image out it's

412
00:15:33,180 --> 00:15:35,160
declarative

413
00:15:35,160 --> 00:15:38,220
um I'm basically all you do is you say I

414
00:15:38,220 --> 00:15:40,680
want to use this APK repo and I want to

415
00:15:40,680 --> 00:15:42,240
install these packages and that's

416
00:15:42,240 --> 00:15:44,279
basically all you do

417
00:15:44,279 --> 00:15:44,820
um

418
00:15:44,820 --> 00:15:46,980
there's no equivalent to the run in

419
00:15:46,980 --> 00:15:49,199
Docker file so you can't run like random

420
00:15:49,199 --> 00:15:51,300
things to build up the image you have to

421
00:15:51,300 --> 00:15:52,920
your only choice way to get files into

422
00:15:52,920 --> 00:15:57,019
the image is to install them via APK

423
00:15:57,180 --> 00:15:59,339
and that's basically what allows us to

424
00:15:59,339 --> 00:16:03,380
get to reproducibility and so on

425
00:16:05,639 --> 00:16:06,899
so

426
00:16:06,899 --> 00:16:09,959
so the demo of that this works

427
00:16:09,959 --> 00:16:12,720
yeah I'm going to change to a directory

428
00:16:12,720 --> 00:16:16,160
um with a get image inside it

429
00:16:16,440 --> 00:16:18,480
so this is the APCO

430
00:16:18,480 --> 00:16:22,560
file to build the git image and yeah

431
00:16:22,560 --> 00:16:24,720
this is the the Crux of it we're seeing

432
00:16:24,720 --> 00:16:26,519
we want to use the Alpine packages in

433
00:16:26,519 --> 00:16:28,440
this case and we want to install these

434
00:16:28,440 --> 00:16:30,540
packages inside the container or the

435
00:16:30,540 --> 00:16:32,220
image rather

436
00:16:32,220 --> 00:16:34,019
there's also a little bit of metadata

437
00:16:34,019 --> 00:16:36,480
like entry points and work there and

438
00:16:36,480 --> 00:16:39,360
certain user accounts but that's really

439
00:16:39,360 --> 00:16:41,899
all there is

440
00:16:42,360 --> 00:16:44,959
um this is the same file but using

441
00:16:44,959 --> 00:16:49,440
Wolfie base so like a glob C version

442
00:16:49,440 --> 00:16:51,000
um and again it's almost identical we're

443
00:16:51,000 --> 00:16:52,620
just seeing what packages we want to

444
00:16:52,620 --> 00:16:53,880
install but this time we're using

445
00:16:53,880 --> 00:16:56,660
wealthy packages

446
00:16:57,540 --> 00:16:58,500
um

447
00:16:58,500 --> 00:17:01,139
I've got the small build script

448
00:17:01,139 --> 00:17:04,500
um so one thing apko or APCO is it does

449
00:17:04,500 --> 00:17:07,319
use Alpine tooling so it's much easier

450
00:17:07,319 --> 00:17:09,720
for me on my Mac to use a container to

451
00:17:09,720 --> 00:17:12,000
run to run app code than it is to find

452
00:17:12,000 --> 00:17:14,400
it locally

453
00:17:14,400 --> 00:17:16,500
yeah so what this is going to do is

454
00:17:16,500 --> 00:17:19,919
build the the Alpine version call it get

455
00:17:19,919 --> 00:17:21,359
local and I put it to something called

456
00:17:21,359 --> 00:17:24,198
output.tar

457
00:17:25,020 --> 00:17:26,819
so hopefully this works it might take a

458
00:17:26,819 --> 00:17:28,799
second

459
00:17:28,799 --> 00:17:30,780
um and what this is going to do is um

460
00:17:30,780 --> 00:17:33,900
build the output.r file containing our

461
00:17:33,900 --> 00:17:38,280
image and also create an s-bomb

462
00:17:38,280 --> 00:17:41,418
hopefully this will work

463
00:17:46,260 --> 00:17:48,240
talk

464
00:17:48,240 --> 00:17:50,419
foreign

465
00:17:51,179 --> 00:17:54,179
problem

466
00:17:57,080 --> 00:17:59,760
didn't work as well

467
00:17:59,760 --> 00:18:04,340
okay I think this might be not work

468
00:18:07,440 --> 00:18:10,340
it's not looking good

469
00:18:11,400 --> 00:18:13,740
okay I might have to kill that

470
00:18:13,740 --> 00:18:16,940
in interest of time

471
00:18:17,760 --> 00:18:21,020
how do I go back

472
00:18:21,059 --> 00:18:23,820
uh

473
00:18:23,820 --> 00:18:25,799
well it keeps going anyway so I think

474
00:18:25,799 --> 00:18:27,059
there's still hopefully there's still

475
00:18:27,059 --> 00:18:28,919
files from a previous run

476
00:18:28,919 --> 00:18:32,460
um there is like uh will I put an s-bomb

477
00:18:32,460 --> 00:18:34,260
um not as well have like some complete

478
00:18:34,260 --> 00:18:36,059
details of all the packages inside that

479
00:18:36,059 --> 00:18:37,919
image

480
00:18:37,919 --> 00:18:39,120
um

481
00:18:39,120 --> 00:18:41,640
we can then load that into docker

482
00:18:41,640 --> 00:18:44,780
the docker load command

483
00:18:45,059 --> 00:18:47,100
or normally what you do is just push it

484
00:18:47,100 --> 00:18:49,919
straight up to a container registry

485
00:18:49,919 --> 00:18:52,500
um so what I was going to show is you

486
00:18:52,500 --> 00:18:55,940
know that's the file that comes out

487
00:18:57,419 --> 00:18:59,520
um you get an old version there and I

488
00:18:59,520 --> 00:19:01,679
was going to show

489
00:19:01,679 --> 00:19:03,539
um if you want to share some we get the

490
00:19:03,539 --> 00:19:05,940
exact shaft of the file and then if I

491
00:19:05,940 --> 00:19:07,860
run it again which of course won't work

492
00:19:07,860 --> 00:19:09,539
again

493
00:19:09,539 --> 00:19:10,679
um

494
00:19:10,679 --> 00:19:11,940
you should end up with identical

495
00:19:11,940 --> 00:19:13,559
output.r

496
00:19:13,559 --> 00:19:15,900
brought a newer time stamp on the file

497
00:19:15,900 --> 00:19:18,900
so idea being shown that it does that it

498
00:19:18,900 --> 00:19:20,660
is reproducible

499
00:19:20,660 --> 00:19:22,740
at the moment this only works with

500
00:19:22,740 --> 00:19:24,960
alpine based images there's some bug

501
00:19:24,960 --> 00:19:28,559
somewhere in the the glob C build that

502
00:19:28,559 --> 00:19:29,940
means that it's not always reproducible

503
00:19:29,940 --> 00:19:31,559
so that's why I'm using Alpine build we

504
00:19:31,559 --> 00:19:33,780
will fix the globe C issues so hopefully

505
00:19:33,780 --> 00:19:36,780
you will both be completely reproducible

506
00:19:36,780 --> 00:19:38,700
stop that

507
00:19:38,700 --> 00:19:42,179
yeah this will work but it's only I

508
00:19:42,179 --> 00:19:43,440
didn't actually build it twice that's an

509
00:19:43,440 --> 00:19:45,919
old file

510
00:19:46,140 --> 00:19:50,660
okay and that would have been a demo

511
00:19:53,160 --> 00:19:54,120
um the other thing I wanted to mention

512
00:19:54,120 --> 00:19:55,740
was vulnerability exploitability

513
00:19:55,740 --> 00:19:57,840
exchange as many people heard of that we

514
00:19:57,840 --> 00:19:59,760
I guess we're Cloud native security coin

515
00:19:59,760 --> 00:20:01,559
you put your hand at it

516
00:20:01,559 --> 00:20:04,679
yeah so because of the audience like a

517
00:20:04,679 --> 00:20:06,299
you know at least a third of you have

518
00:20:06,299 --> 00:20:07,500
heard of it

519
00:20:07,500 --> 00:20:12,080
um basically it's a standard file format

520
00:20:12,080 --> 00:20:15,120
currently being discussed

521
00:20:15,120 --> 00:20:16,799
and it basically gives away for vendors

522
00:20:16,799 --> 00:20:20,640
to say yeah we're aware that scanners

523
00:20:20,640 --> 00:20:23,340
are saying that the this product

524
00:20:23,340 --> 00:20:25,380
software or the image of whatever

525
00:20:25,380 --> 00:20:30,240
contains cve XYZ but actually you don't

526
00:20:30,240 --> 00:20:32,039
need to worry about this because it's

527
00:20:32,039 --> 00:20:34,980
not exposed in this container or

528
00:20:34,980 --> 00:20:36,600
actually it's a false positive and we

529
00:20:36,600 --> 00:20:38,220
don't have the vulnerable version of the

530
00:20:38,220 --> 00:20:40,559
software or something like that

531
00:20:40,559 --> 00:20:43,260
an idea is that by cross-referencing

532
00:20:43,260 --> 00:20:45,120
like this kind of an ability report and

533
00:20:45,120 --> 00:20:47,700
Vex you should be able to further cut

534
00:20:47,700 --> 00:20:49,980
down the amount of noise from a from our

535
00:20:49,980 --> 00:20:52,760
scanner reports

536
00:20:55,140 --> 00:20:57,179
um the final bit I wanted to talk about

537
00:20:57,179 --> 00:21:00,020
um is exposure so

538
00:21:00,020 --> 00:21:02,460
what I really hope happens in the future

539
00:21:02,460 --> 00:21:04,559
and I certainly think this is possible

540
00:21:04,559 --> 00:21:07,440
is that if all our images have complete

541
00:21:07,440 --> 00:21:09,840
s-bombs so at the minute if you if you

542
00:21:09,840 --> 00:21:11,760
use tools

543
00:21:11,760 --> 00:21:12,860
um

544
00:21:12,860 --> 00:21:16,679
the current level of tooling won't cover

545
00:21:16,679 --> 00:21:19,860
most the entirety of most images you

546
00:21:19,860 --> 00:21:21,840
quite often find like a

547
00:21:21,840 --> 00:21:24,240
for example I'm trying not to name names

548
00:21:24,240 --> 00:21:26,400
but most of the the tools to generate

549
00:21:26,400 --> 00:21:28,080
s-bombs at the minute run after the fact

550
00:21:28,080 --> 00:21:29,700
and they just interrogate the package

551
00:21:29,700 --> 00:21:32,580
manager and so they can miss things like

552
00:21:32,580 --> 00:21:34,020
um

553
00:21:34,020 --> 00:21:36,360
for example if you look at the redis I

554
00:21:36,360 --> 00:21:37,559
mentioned Docker hub

555
00:21:37,559 --> 00:21:40,440
the redis itself

556
00:21:40,440 --> 00:21:41,460
um

557
00:21:41,460 --> 00:21:44,820
is installed by downloading it from the

558
00:21:44,820 --> 00:21:46,559
the redis website

559
00:21:46,559 --> 00:21:48,120
it's not installed with a package

560
00:21:48,120 --> 00:21:51,600
manager so tools like sift and so on

561
00:21:51,600 --> 00:21:53,580
that try and create less bomb won't

562
00:21:53,580 --> 00:21:55,559
actually see that and she'll have an

563
00:21:55,559 --> 00:21:57,720
incomplete s-bomb that is actually

564
00:21:57,720 --> 00:22:00,059
missing the most important package

565
00:22:00,059 --> 00:22:02,159
inside there

566
00:22:02,159 --> 00:22:03,780
um so that's one thing it needs to

567
00:22:03,780 --> 00:22:06,059
improve but really I would like to see

568
00:22:06,059 --> 00:22:08,159
the creation of s-bombs push back to

569
00:22:08,159 --> 00:22:10,559
reverse building the software so in the

570
00:22:10,559 --> 00:22:12,179
cases like a Docker file build an image

571
00:22:12,179 --> 00:22:14,460
it should really be the Xbox created at

572
00:22:14,460 --> 00:22:17,400
that point and not afterwards

573
00:22:17,400 --> 00:22:18,720
um but assuming you do have a complete

574
00:22:18,720 --> 00:22:20,400
s-bomb that includes all dependencies

575
00:22:20,400 --> 00:22:22,919
and transitive dependencies

576
00:22:22,919 --> 00:22:25,320
um if we stick all the s-bombs for all

577
00:22:25,320 --> 00:22:27,539
our containers in a database and we

578
00:22:27,539 --> 00:22:30,960
cross-reference that with uh cve

579
00:22:30,960 --> 00:22:33,360
information and theoretically we should

580
00:22:33,360 --> 00:22:35,400
be able to instantly tell our exposure

581
00:22:35,400 --> 00:22:37,500
to a cve

582
00:22:37,500 --> 00:22:39,360
yeah so that's kind of what I have I

583
00:22:39,360 --> 00:22:41,400
hope happens in the future

584
00:22:41,400 --> 00:22:43,620
um but we'll see if that actually

585
00:22:43,620 --> 00:22:46,200
get there

586
00:22:46,200 --> 00:22:48,240
um so that demo was a little bit quicker

587
00:22:48,240 --> 00:22:50,520
than expected but to wrap up uh there's

588
00:22:50,520 --> 00:22:52,080
three things that kind of want to talk

589
00:22:52,080 --> 00:22:54,840
about uh one with provenance please look

590
00:22:54,840 --> 00:22:56,460
into signing your images if you're not

591
00:22:56,460 --> 00:22:59,280
already I'm verifying

592
00:22:59,280 --> 00:23:01,799
um signatures on the images you're using

593
00:23:01,799 --> 00:23:04,380
it is a lot easier now than it used to

594
00:23:04,380 --> 00:23:06,179
be

595
00:23:06,179 --> 00:23:08,280
um it's kind of nice the way to defeat

596
00:23:08,280 --> 00:23:09,960
scanner noise or get around the problem

597
00:23:09,960 --> 00:23:12,780
is to just aggressively reduce the the

598
00:23:12,780 --> 00:23:14,340
number of dependencies in your images

599
00:23:14,340 --> 00:23:16,500
and using chain guide images can be a

600
00:23:16,500 --> 00:23:18,960
good way to do that and also to keep

601
00:23:18,960 --> 00:23:21,299
your images as updated as possible and

602
00:23:21,299 --> 00:23:22,799
to be honest I think that's one of the

603
00:23:22,799 --> 00:23:25,200
key things we need to do as an industry

604
00:23:25,200 --> 00:23:28,020
is to keep things updated all the time I

605
00:23:28,020 --> 00:23:29,400
know there's

606
00:23:29,400 --> 00:23:31,919
um a reluctance especially at larger

607
00:23:31,919 --> 00:23:33,419
organizations to update sometimes

608
00:23:33,419 --> 00:23:36,240
because you updates and things break

609
00:23:36,240 --> 00:23:39,659
but if you don't update you know you get

610
00:23:39,659 --> 00:23:42,059
hacked so there's not really a very good

611
00:23:42,059 --> 00:23:45,000
choice there

612
00:23:45,000 --> 00:23:47,640
and finally regarding like figuring out

613
00:23:47,640 --> 00:23:50,039
exposure uh where we're not really there

614
00:23:50,039 --> 00:23:51,900
yet but hopefully the future does lie

615
00:23:51,900 --> 00:23:55,020
and stuff like s-bombs and Vex so thank

616
00:23:55,020 --> 00:23:57,440
you very much

617
00:24:00,960 --> 00:24:02,520
so I think we have some time for

618
00:24:02,520 --> 00:24:04,700
questions

619
00:24:06,480 --> 00:24:09,260
come on over there

620
00:24:09,780 --> 00:24:11,340
check

621
00:24:11,340 --> 00:24:13,380
oh thanks

622
00:24:13,380 --> 00:24:16,440
hey um is there any like

623
00:24:16,440 --> 00:24:18,600
products right now to use Vex or that's

624
00:24:18,600 --> 00:24:20,640
totally in the future right now

625
00:24:20,640 --> 00:24:22,980
oh

626
00:24:22,980 --> 00:24:25,320
okay I'll let you take the mic in a

627
00:24:25,320 --> 00:24:25,980
second

628
00:24:25,980 --> 00:24:28,220
um but uh

629
00:24:28,220 --> 00:24:30,299
I was hoping to do a demo or something

630
00:24:30,299 --> 00:24:32,340
called vexctl that we're working on but

631
00:24:32,340 --> 00:24:34,200
it's it's not really there yet basically

632
00:24:34,200 --> 00:24:36,360
the idea is

633
00:24:36,360 --> 00:24:39,059
um you know we run Vic CTL and you'll

634
00:24:39,059 --> 00:24:40,500
have like a Vex document alongside the

635
00:24:40,500 --> 00:24:42,240
container and then you can filter down

636
00:24:42,240 --> 00:24:45,179
the results but I'm not really aware of

637
00:24:45,179 --> 00:24:47,580
any too many tools but you're

638
00:24:47,580 --> 00:24:49,919
oh there's no boss the old boss tools

639
00:24:49,919 --> 00:24:51,419
dependency tracker apparently he's using

640
00:24:51,419 --> 00:24:53,760
Banks but I'm sure there's still a lot

641
00:24:53,760 --> 00:24:55,200
of discussion and stuff going on with

642
00:24:55,200 --> 00:24:57,360
vex

643
00:24:57,360 --> 00:25:00,620
so it's another question

644
00:25:03,860 --> 00:25:07,520
there's one there yeah

645
00:25:08,880 --> 00:25:12,000
is there a competitive like reason if

646
00:25:12,000 --> 00:25:13,559
you're going to enforce that

647
00:25:13,559 --> 00:25:15,419
everything's coming from a certain repo

648
00:25:15,419 --> 00:25:16,559
that you're confident on the access

649
00:25:16,559 --> 00:25:18,840
controls to also sign and require things

650
00:25:18,840 --> 00:25:21,559
that are signed

651
00:25:21,659 --> 00:25:24,179
yeah yeah there is

652
00:25:24,179 --> 00:25:26,279
um so I guess one thing would be

653
00:25:26,279 --> 00:25:27,840
you know you've still got to account for

654
00:25:27,840 --> 00:25:29,220
the time between an image being

655
00:25:29,220 --> 00:25:32,279
downloaded and run

656
00:25:32,279 --> 00:25:33,179
um sort of you know somebody could

657
00:25:33,179 --> 00:25:36,480
tamper with it in between for example

658
00:25:36,480 --> 00:25:39,080
I think you can probably say more

659
00:25:39,080 --> 00:25:41,220
complicated things or signatures I mean

660
00:25:41,220 --> 00:25:42,179
one thing I didn't talk about was

661
00:25:42,179 --> 00:25:44,520
attestations so you can start as an

662
00:25:44,520 --> 00:25:46,020
attestations to say like all the tests

663
00:25:46,020 --> 00:25:47,760
were run against this image or this

664
00:25:47,760 --> 00:25:49,559
image is you know

665
00:25:49,559 --> 00:25:51,900
um suitable for vitamin production or

666
00:25:51,900 --> 00:25:53,279
only suitable for running on stage and

667
00:25:53,279 --> 00:25:55,440
things like that so you can get a bit

668
00:25:55,440 --> 00:25:58,100
more complicated

669
00:25:58,740 --> 00:26:00,360
so any other questions oh there's one

670
00:26:00,360 --> 00:26:02,658
over there

671
00:26:13,020 --> 00:26:16,320
uh is it possible to reproduce the

672
00:26:16,320 --> 00:26:19,559
produce apk at when the arpanics

673
00:26:19,559 --> 00:26:23,580
Upstream removes uh all version or APK

674
00:26:23,580 --> 00:26:27,059
purchases and so when you run uh APK

675
00:26:27,059 --> 00:26:29,940
device with Optical uh can you reproduce

676
00:26:29,940 --> 00:26:32,279
uh exact same image

677
00:26:32,279 --> 00:26:35,880
so I didn't quite catch that so uh when

678
00:26:35,880 --> 00:26:39,900
you run article twice yeah uh between

679
00:26:39,900 --> 00:26:42,960
the first one and the second run the RPI

680
00:26:42,960 --> 00:26:44,640
packages programs must be different

681
00:26:44,640 --> 00:26:47,400
that's right so is it possible to

682
00:26:47,400 --> 00:26:50,520
reproduce the purchases with all the

683
00:26:50,520 --> 00:26:53,460
versions yeah quite right so the point

684
00:26:53,460 --> 00:26:55,500
is like in the Amco file I was just like

685
00:26:55,500 --> 00:26:57,480
specifying packages I wasn't specifying

686
00:26:57,480 --> 00:26:59,760
exact versions of packages

687
00:26:59,760 --> 00:27:01,559
um one thing we're looking at is

688
00:27:01,559 --> 00:27:03,000
basically we'll have some form of

689
00:27:03,000 --> 00:27:04,620
pinning so you can pin to an exact

690
00:27:04,620 --> 00:27:06,659
version of a package

691
00:27:06,659 --> 00:27:09,179
so at the moment we don't have a good

692
00:27:09,179 --> 00:27:10,980
story there you're quite right if it was

693
00:27:10,980 --> 00:27:12,659
to happen that a practice updated you'd

694
00:27:12,659 --> 00:27:14,159
end up with a different image but in the

695
00:27:14,159 --> 00:27:17,039
future we will have pinning so

696
00:27:17,039 --> 00:27:20,360
I I I'm writing uh very similar to uh

697
00:27:20,360 --> 00:27:24,080
right there thanks

698
00:27:25,500 --> 00:27:28,520
anything else

699
00:27:30,840 --> 00:27:32,460
we're good

700
00:27:32,460 --> 00:27:35,240
okay so well thank you all

701
00:27:35,240 --> 00:27:39,450
[Applause]

