1
00:00:00,080 --> 00:00:02,080
welcome to building effective attack

2
00:00:02,080 --> 00:00:03,199
detection in the cloud

3
00:00:03,199 --> 00:00:05,200
uh today presenting you've got nick

4
00:00:05,200 --> 00:00:07,839
jones and alfie champion um i'm nick i

5
00:00:07,839 --> 00:00:08,320
run

6
00:00:08,320 --> 00:00:10,000
our global cloud security team at

7
00:00:10,000 --> 00:00:11,759
f-secure uh when i'm not

8
00:00:11,759 --> 00:00:13,759
working on people's cloud security i do

9
00:00:13,759 --> 00:00:15,839
attack detection which is why i'm here

10
00:00:15,839 --> 00:00:18,000
um and alfie's sort of the reverse alfie

11
00:00:18,000 --> 00:00:19,920
yeah yeah absolutely uh so i lead up the

12
00:00:19,920 --> 00:00:21,039
uh global

13
00:00:21,039 --> 00:00:22,400
attack detection service for rescue

14
00:00:22,400 --> 00:00:24,320
consulting uh and likewise much like

15
00:00:24,320 --> 00:00:25,439
nick in my spare time

16
00:00:25,439 --> 00:00:27,599
i've kind of flipped focus on on

17
00:00:27,599 --> 00:00:29,119
building some really wonderful things in

18
00:00:29,119 --> 00:00:31,840
cloud

19
00:00:35,360 --> 00:00:36,719
so first up and we're going to be

20
00:00:36,719 --> 00:00:38,480
talking about the differences between

21
00:00:38,480 --> 00:00:40,160
on-premise and cloud attack detection

22
00:00:40,160 --> 00:00:41,760
and there's quite a few key differences

23
00:00:41,760 --> 00:00:43,520
there i think to focus in on

24
00:00:43,520 --> 00:00:46,239
um secondly what's an attack are likely

25
00:00:46,239 --> 00:00:46,800
to do

26
00:00:46,800 --> 00:00:48,000
and what are they going to try in your

27
00:00:48,000 --> 00:00:49,440
environments what should you be looking

28
00:00:49,440 --> 00:00:50,960
for

29
00:00:50,960 --> 00:00:52,719
and then lastly um one of the things

30
00:00:52,719 --> 00:00:54,800
we've learned over our last year or two

31
00:00:54,800 --> 00:00:55,520
working on this

32
00:00:55,520 --> 00:00:57,120
is very much that there's an awful lot

33
00:00:57,120 --> 00:00:59,920
we can learn from the the devops

34
00:00:59,920 --> 00:01:01,920
um you know tips and tricks things to do

35
00:01:01,920 --> 00:01:04,000
that really help level up your cloud

36
00:01:04,000 --> 00:01:07,680
attack detection capability long term

37
00:01:09,520 --> 00:01:11,840
absolutely so first thing to consider

38
00:01:11,840 --> 00:01:12,720
then is

39
00:01:12,720 --> 00:01:14,479
the difference when it comes to on-prem

40
00:01:14,479 --> 00:01:16,640
versus cloud is this already a solved

41
00:01:16,640 --> 00:01:17,360
problem

42
00:01:17,360 --> 00:01:19,119
and can we apply the same learnings from

43
00:01:19,119 --> 00:01:20,880
on-premises section that we've done for

44
00:01:20,880 --> 00:01:22,000
a while now

45
00:01:22,000 --> 00:01:24,880
and apply those to cloud well we take a

46
00:01:24,880 --> 00:01:26,159
look um

47
00:01:26,159 --> 00:01:28,720
in some ways yes yes there are some very

48
00:01:28,720 --> 00:01:30,560
very obvious similarities so

49
00:01:30,560 --> 00:01:32,240
you consider things like the the

50
00:01:32,240 --> 00:01:34,320
automation of attacks or scalability of

51
00:01:34,320 --> 00:01:35,040
those we see

52
00:01:35,040 --> 00:01:37,280
this kind of never-ending cycle of um

53
00:01:37,280 --> 00:01:38,960
exploits being released and then kind of

54
00:01:38,960 --> 00:01:40,240
proof of concepts being released and

55
00:01:40,240 --> 00:01:40,720
then some

56
00:01:40,720 --> 00:01:42,479
some widespread scanning and an

57
00:01:42,479 --> 00:01:44,159
exploitation taking place

58
00:01:44,159 --> 00:01:45,600
that's still a thing there are some kind

59
00:01:45,600 --> 00:01:47,840
of cloud variations of that so you see

60
00:01:47,840 --> 00:01:50,159
um exposure credentials in things like

61
00:01:50,159 --> 00:01:51,920
public s3 buckets or

62
00:01:51,920 --> 00:01:54,079
inadvertently kind of pushed to public

63
00:01:54,079 --> 00:01:56,320
code repositories like github

64
00:01:56,320 --> 00:01:57,600
and then there's also kind of a new

65
00:01:57,600 --> 00:02:00,000
flavor um of attack which is that kind

66
00:02:00,000 --> 00:02:00,320
of

67
00:02:00,320 --> 00:02:02,479
as mata defines it as resource hijacking

68
00:02:02,479 --> 00:02:04,320
kind of the crypto mining type stuff

69
00:02:04,320 --> 00:02:06,399
obviously even more so with this kind of

70
00:02:06,399 --> 00:02:08,399
a similarity there with on-prem

71
00:02:08,399 --> 00:02:10,318
when it comes to ransomware being

72
00:02:10,318 --> 00:02:12,400
definitely in vogue as it were so

73
00:02:12,400 --> 00:02:14,879
there's a lot of that going on but a lot

74
00:02:14,879 --> 00:02:16,000
of that to some degree

75
00:02:16,000 --> 00:02:18,800
is covered by some of the the managed

76
00:02:18,800 --> 00:02:20,239
service kind of the idf stuff that you

77
00:02:20,239 --> 00:02:21,599
see from cloud providers the likes of

78
00:02:21,599 --> 00:02:23,360
guard duty that provide things

79
00:02:23,360 --> 00:02:25,680
um there relating to kind of scanning

80
00:02:25,680 --> 00:02:26,800
activity to

81
00:02:26,800 --> 00:02:28,560
kind of beaking out to known bad ips

82
00:02:28,560 --> 00:02:30,480
that kind of thing what we're looking at

83
00:02:30,480 --> 00:02:31,760
and certainly is where we spend most of

84
00:02:31,760 --> 00:02:33,760
our time kind of pushes up that

85
00:02:33,760 --> 00:02:36,239
that pyramid from the opportunistic

86
00:02:36,239 --> 00:02:37,599
exploitation so

87
00:02:37,599 --> 00:02:39,440
um using the instance of metadata

88
00:02:39,440 --> 00:02:40,959
service which has obviously been

89
00:02:40,959 --> 00:02:42,720
um quite quite well known when it comes

90
00:02:42,720 --> 00:02:45,040
to cloud instance exploitation

91
00:02:45,040 --> 00:02:46,720
and then moving up into that targeted

92
00:02:46,720 --> 00:02:48,000
attack where it's like rather than just

93
00:02:48,000 --> 00:02:49,920
that indiscriminate or opportunistic

94
00:02:49,920 --> 00:02:51,440
what would it look like for a

95
00:02:51,440 --> 00:02:52,400
sophisticated

96
00:02:52,400 --> 00:02:54,400
uh attacker to target you specifically

97
00:02:54,400 --> 00:02:56,000
and the assets that you you have within

98
00:02:56,000 --> 00:02:56,480
cloud

99
00:02:56,480 --> 00:02:57,920
so that's where we've been focusing

100
00:02:57,920 --> 00:03:00,640
really um

101
00:03:00,640 --> 00:03:02,159
when we look at this from a detective

102
00:03:02,159 --> 00:03:03,280
standpoint we start looking at the

103
00:03:03,280 --> 00:03:04,480
telemetry that's like the raw

104
00:03:04,480 --> 00:03:06,159
ingredients for detection right

105
00:03:06,159 --> 00:03:08,720
um on-prem there's there's three obvious

106
00:03:08,720 --> 00:03:10,800
sources there so the first is is kind of

107
00:03:10,800 --> 00:03:12,159
endpoint telemetry so

108
00:03:12,159 --> 00:03:13,360
you know like endpoint detection and

109
00:03:13,360 --> 00:03:15,360
response edr agents are obviously

110
00:03:15,360 --> 00:03:17,360
hugely valuable there for process

111
00:03:17,360 --> 00:03:19,120
creations and kind of registry changes

112
00:03:19,120 --> 00:03:20,400
et cetera et cetera

113
00:03:20,400 --> 00:03:22,239
we've also got network telemetry which

114
00:03:22,239 --> 00:03:23,519
hosts talks to each other

115
00:03:23,519 --> 00:03:25,200
things like kind of port scanning or

116
00:03:25,200 --> 00:03:26,799
kind of domain enumeration would end up

117
00:03:26,799 --> 00:03:27,280
with some

118
00:03:27,280 --> 00:03:29,120
some noise coming from that and then

119
00:03:29,120 --> 00:03:30,799
we've also got application telemetry as

120
00:03:30,799 --> 00:03:31,840
well so the way that people are

121
00:03:31,840 --> 00:03:32,640
interacting with

122
00:03:32,640 --> 00:03:34,959
potentially our internet-facing assets

123
00:03:34,959 --> 00:03:36,879
um what telemetry does that provide is

124
00:03:36,879 --> 00:03:38,640
there any way that we can provide

125
00:03:38,640 --> 00:03:40,319
some kind of insight into mrs activity

126
00:03:40,319 --> 00:03:41,840
using that

127
00:03:41,840 --> 00:03:44,720
if we now look at cloud all of that is

128
00:03:44,720 --> 00:03:46,159
is relevant um

129
00:03:46,159 --> 00:03:48,000
but we now have this this layer above

130
00:03:48,000 --> 00:03:49,920
the control plane telemetry that kind of

131
00:03:49,920 --> 00:03:50,400
almost

132
00:03:50,400 --> 00:03:51,920
encompassing everything we've just

133
00:03:51,920 --> 00:03:54,000
spoken about you consider an environment

134
00:03:54,000 --> 00:03:56,400
um for just a kind of classic on-prem

135
00:03:56,400 --> 00:03:57,840
application tech stack

136
00:03:57,840 --> 00:03:59,280
you could be that you have the endpoint

137
00:03:59,280 --> 00:04:00,560
telemetry still from the operating

138
00:04:00,560 --> 00:04:02,080
systems hosting that stuff

139
00:04:02,080 --> 00:04:03,439
it could be that you have the network's

140
00:04:03,439 --> 00:04:05,200
limitatory of how those the various kind

141
00:04:05,200 --> 00:04:05,439
of

142
00:04:05,439 --> 00:04:06,879
front-end and back-end services interact

143
00:04:06,879 --> 00:04:08,560
with each other and then you've got the

144
00:04:08,560 --> 00:04:09,599
application telemetry

145
00:04:09,599 --> 00:04:10,799
of the thing that you've written and

146
00:04:10,799 --> 00:04:13,040
you're now hosting but now we have

147
00:04:13,040 --> 00:04:14,560
this this surrounding layer which is the

148
00:04:14,560 --> 00:04:16,160
control plane where we're

149
00:04:16,160 --> 00:04:18,160
interacting with that api so all of the

150
00:04:18,160 --> 00:04:20,000
major providers expose that api that you

151
00:04:20,000 --> 00:04:20,720
can use

152
00:04:20,720 --> 00:04:22,160
to do any number of things within the

153
00:04:22,160 --> 00:04:23,840
account that could be from spinning up

154
00:04:23,840 --> 00:04:27,360
and um virtual machines to provisioning

155
00:04:27,360 --> 00:04:27,759
um

156
00:04:27,759 --> 00:04:29,280
accounts with new permissions that kind

157
00:04:29,280 --> 00:04:31,199
of thing so there's a whole load of new

158
00:04:31,199 --> 00:04:32,800
telemetry that we have our disposal as

159
00:04:32,800 --> 00:04:34,000
defenders

160
00:04:34,000 --> 00:04:35,600
and there's also these three sources

161
00:04:35,600 --> 00:04:38,639
within that that square there that are

162
00:04:38,639 --> 00:04:40,639
of varying importance depending on what

163
00:04:40,639 --> 00:04:42,000
your stack actually looks like what

164
00:04:42,000 --> 00:04:43,520
you're hosting in cloud if obviously

165
00:04:43,520 --> 00:04:45,120
you're not using any endpoint anymore

166
00:04:45,120 --> 00:04:46,000
there's no

167
00:04:46,000 --> 00:04:47,759
equivalent there's no ec2 or virtual

168
00:04:47,759 --> 00:04:49,199
machines there then obviously that

169
00:04:49,199 --> 00:04:50,479
doesn't really come into play anymore

170
00:04:50,479 --> 00:04:51,759
and that's one of the key learnings for

171
00:04:51,759 --> 00:04:53,120
us is kind of where

172
00:04:53,120 --> 00:04:54,800
telemetry sources are applicable and

173
00:04:54,800 --> 00:04:57,840
where maybe they aren't anymore

174
00:04:58,479 --> 00:05:00,639
another major finding or kind of

175
00:05:00,639 --> 00:05:02,160
experience point for us i guess is

176
00:05:02,160 --> 00:05:04,000
around context and that comes down to

177
00:05:04,000 --> 00:05:05,280
when you're dealing with an environment

178
00:05:05,280 --> 00:05:07,039
that is purpose built

179
00:05:07,039 --> 00:05:08,400
the actions that take place in that

180
00:05:08,400 --> 00:05:10,320
environment are very much based on the

181
00:05:10,320 --> 00:05:11,280
purpose of

182
00:05:11,280 --> 00:05:12,720
everything in there every asset in there

183
00:05:12,720 --> 00:05:15,039
so we consider a given kind of i am user

184
00:05:15,039 --> 00:05:16,880
for instance in aws

185
00:05:16,880 --> 00:05:18,960
if that's upgraded it's privileges so in

186
00:05:18,960 --> 00:05:20,320
some for some reason

187
00:05:20,320 --> 00:05:21,919
it is now kind of an admin it can do

188
00:05:21,919 --> 00:05:23,280
from high level actions and cause a

189
00:05:23,280 --> 00:05:25,120
major impact

190
00:05:25,120 --> 00:05:27,520
how that user obtained those privileges

191
00:05:27,520 --> 00:05:28,479
could be of of

192
00:05:28,479 --> 00:05:31,199
huge kind of significance and if that

193
00:05:31,199 --> 00:05:33,120
that change is done by a

194
00:05:33,120 --> 00:05:34,880
cicd continuous integration continuous

195
00:05:34,880 --> 00:05:36,639
delivery user it could be that's

196
00:05:36,639 --> 00:05:38,080
completely benign that's the expected

197
00:05:38,080 --> 00:05:39,280
behavior in which case

198
00:05:39,280 --> 00:05:41,520
we're okay with that but the very same

199
00:05:41,520 --> 00:05:43,600
change made by an admin user that has no

200
00:05:43,600 --> 00:05:44,240
2fa

201
00:05:44,240 --> 00:05:47,360
potentially was like a gip enriched

202
00:05:47,360 --> 00:05:49,120
location there you could say this is

203
00:05:49,120 --> 00:05:51,120
entirely odd you know this is completely

204
00:05:51,120 --> 00:05:52,720
unexpected and in which case

205
00:05:52,720 --> 00:05:53,919
this is something that we should raise

206
00:05:53,919 --> 00:05:55,600
and we should pursue as an investigation

207
00:05:55,600 --> 00:05:56,080
so

208
00:05:56,080 --> 00:05:59,039
context is key

209
00:06:00,000 --> 00:06:02,479
and all of that kind of stuff considered

210
00:06:02,479 --> 00:06:04,240
and kind of acknowledged

211
00:06:04,240 --> 00:06:06,639
what we're facing now is is far more

212
00:06:06,639 --> 00:06:08,080
complicated than that in terms of things

213
00:06:08,080 --> 00:06:09,600
like the interconnectivity between these

214
00:06:09,600 --> 00:06:11,440
services you start dealing with

215
00:06:11,440 --> 00:06:13,199
tons of third-party services where your

216
00:06:13,199 --> 00:06:14,479
crown jewels as it were

217
00:06:14,479 --> 00:06:16,800
are no longer in in a single place in a

218
00:06:16,800 --> 00:06:18,560
data center you can kind of point to

219
00:06:18,560 --> 00:06:20,319
they're obviously hosted in a plethora

220
00:06:20,319 --> 00:06:21,759
of other services that we see there so

221
00:06:21,759 --> 00:06:22,880
be that cloud providers

222
00:06:22,880 --> 00:06:25,039
in the traditional kind of aws as your

223
00:06:25,039 --> 00:06:26,319
gcp kind of sense

224
00:06:26,319 --> 00:06:28,560
but that could also be um using like

225
00:06:28,560 --> 00:06:30,000
office 365 or slack for our

226
00:06:30,000 --> 00:06:31,440
communications et cetera and the trust

227
00:06:31,440 --> 00:06:33,280
boundary between those

228
00:06:33,280 --> 00:06:34,960
is obviously a major point for us to

229
00:06:34,960 --> 00:06:36,720
investigate and the visibility into

230
00:06:36,720 --> 00:06:37,520
those various

231
00:06:37,520 --> 00:06:39,280
um third-party services and the log

232
00:06:39,280 --> 00:06:40,960
sources they provide is going to be

233
00:06:40,960 --> 00:06:42,479
hugely important as we go forward so

234
00:06:42,479 --> 00:06:43,680
nick i know you've got a point on this

235
00:06:43,680 --> 00:06:44,479
one

236
00:06:44,479 --> 00:06:46,160
yes so we've had some recent experience

237
00:06:46,160 --> 00:06:47,680
with one client were working with for

238
00:06:47,680 --> 00:06:48,240
example

239
00:06:48,240 --> 00:06:50,000
where they had a primary cloud provider

240
00:06:50,000 --> 00:06:50,960
that they were hosting all their

241
00:06:50,960 --> 00:06:51,840
applications in

242
00:06:51,840 --> 00:06:53,520
but their source code was in github they

243
00:06:53,520 --> 00:06:55,520
were running jenkins for their ci cd

244
00:06:55,520 --> 00:06:56,400
they had

245
00:06:56,400 --> 00:06:59,520
uh what else g suite for their and their

246
00:06:59,520 --> 00:07:00,880
mail and their documents and all these

247
00:07:00,880 --> 00:07:01,680
kinds of things

248
00:07:01,680 --> 00:07:03,840
and so we had quite a variety of

249
00:07:03,840 --> 00:07:04,800
different um

250
00:07:04,800 --> 00:07:06,400
sort of infrastructure service platforms

251
00:07:06,400 --> 00:07:08,240
and service and software as a service

252
00:07:08,240 --> 00:07:11,039
and packages that were were in play that

253
00:07:11,039 --> 00:07:12,639
we were ingesting logs from and that we

254
00:07:12,639 --> 00:07:14,080
were able to use to

255
00:07:14,080 --> 00:07:16,000
track attacker activity platform to

256
00:07:16,000 --> 00:07:17,759
platform and you know that works out

257
00:07:17,759 --> 00:07:19,520
quite well but it did take a bit of

258
00:07:19,520 --> 00:07:22,319
effort to get all of that together

259
00:07:22,319 --> 00:07:25,520
yeah and so you know i think one of the

260
00:07:25,520 --> 00:07:27,120
the key things that we've learned

261
00:07:27,120 --> 00:07:29,440
is around um actually like how you

262
00:07:29,440 --> 00:07:31,360
design your cloud detection stack

263
00:07:31,360 --> 00:07:34,720
um so first off um centralizing

264
00:07:34,720 --> 00:07:36,000
everything is pretty important i

265
00:07:36,000 --> 00:07:37,680
wouldn't necessarily say we need to go

266
00:07:37,680 --> 00:07:38,319
for

267
00:07:38,319 --> 00:07:40,080
feeding all the data into one central

268
00:07:40,080 --> 00:07:41,360
location particularly

269
00:07:41,360 --> 00:07:42,880
but you need to make sure that it is

270
00:07:42,880 --> 00:07:45,280
easy for your analysts to take a look at

271
00:07:45,280 --> 00:07:48,240
one incidence in one thing and then

272
00:07:48,240 --> 00:07:50,479
pivot from that data point into

273
00:07:50,479 --> 00:07:52,319
other data sources in other applications

274
00:07:52,319 --> 00:07:54,400
cloud providers and whatever makes sense

275
00:07:54,400 --> 00:07:55,520
and you know one of the things we've

276
00:07:55,520 --> 00:07:57,360
noticed is that the harder it is for

277
00:07:57,360 --> 00:07:59,360
analysts to jump between

278
00:07:59,360 --> 00:08:00,879
data sources from different systems and

279
00:08:00,879 --> 00:08:03,199
environments uh the less likely they are

280
00:08:03,199 --> 00:08:05,280
to actively track down and investigate

281
00:08:05,280 --> 00:08:06,720
um some of these things to the degree

282
00:08:06,720 --> 00:08:08,479
that it needs to or it takes so long

283
00:08:08,479 --> 00:08:09,840
that they don't have the bandwidth to

284
00:08:09,840 --> 00:08:12,160
handle everything that's coming in so

285
00:08:12,160 --> 00:08:13,520
very important that that is right i

286
00:08:13,520 --> 00:08:14,560
think and that we

287
00:08:14,560 --> 00:08:17,440
support the analysts in generating uh or

288
00:08:17,440 --> 00:08:17,919
in

289
00:08:17,919 --> 00:08:19,919
developing their use cases right and

290
00:08:19,919 --> 00:08:22,319
having that sort of access

291
00:08:22,319 --> 00:08:24,479
and first up though and data sources

292
00:08:24,479 --> 00:08:25,680
before we start talking about where we

293
00:08:25,680 --> 00:08:27,280
put this data and there's a couple of

294
00:08:27,280 --> 00:08:28,879
key data sources i think that we need to

295
00:08:28,879 --> 00:08:29,680
dive in on

296
00:08:29,680 --> 00:08:32,159
and first off you've got the control

297
00:08:32,159 --> 00:08:34,000
plane audit logs and secondly the

298
00:08:34,000 --> 00:08:35,919
the service specific looks so by control

299
00:08:35,919 --> 00:08:37,440
plane audit logs what i mean there

300
00:08:37,440 --> 00:08:40,320
are cloud trail for aws audit log in

301
00:08:40,320 --> 00:08:41,519
azure terms and

302
00:08:41,519 --> 00:08:45,200
kubernetes um what these give you is

303
00:08:45,200 --> 00:08:46,959
visibility of all administrative actions

304
00:08:46,959 --> 00:08:48,959
taken within an environment any api call

305
00:08:48,959 --> 00:08:50,000
that's made

306
00:08:50,000 --> 00:08:52,000
gets logged there right so we can track

307
00:08:52,000 --> 00:08:53,519
creation modification deletion of

308
00:08:53,519 --> 00:08:54,480
resources

309
00:08:54,480 --> 00:08:56,880
and we can track access in some cases

310
00:08:56,880 --> 00:08:58,320
and we've got

311
00:08:58,320 --> 00:08:59,839
essentially all the visibility we could

312
00:08:59,839 --> 00:09:00,959
want of everything that's happening at

313
00:09:00,959 --> 00:09:02,720
the control plane layer coming out of

314
00:09:02,720 --> 00:09:04,000
that one data source

315
00:09:04,000 --> 00:09:05,519
so that really is critical if you only

316
00:09:05,519 --> 00:09:06,959
get one data source turned on in your

317
00:09:06,959 --> 00:09:07,519
environment

318
00:09:07,519 --> 00:09:10,160
that's the one to pick and then for

319
00:09:10,160 --> 00:09:11,920
service specific logs um

320
00:09:11,920 --> 00:09:14,320
essentially what these are are logs

321
00:09:14,320 --> 00:09:15,440
generated by

322
00:09:15,440 --> 00:09:18,000
your s3 buckets by your lambda functions

323
00:09:18,000 --> 00:09:21,279
by your kms key access

324
00:09:21,279 --> 00:09:22,800
cases where the the cloud native

325
00:09:22,800 --> 00:09:24,399
services the the past things you're

326
00:09:24,399 --> 00:09:25,200
using

327
00:09:25,200 --> 00:09:27,600
are generating their own logs and those

328
00:09:27,600 --> 00:09:29,519
those tend to be very high fidelity

329
00:09:29,519 --> 00:09:32,240
uh if you analyze them right they also

330
00:09:32,240 --> 00:09:33,120
tend to generate

331
00:09:33,120 --> 00:09:36,160
a lot of data and so typically we find

332
00:09:36,160 --> 00:09:37,600
clients benefit from turning these on on

333
00:09:37,600 --> 00:09:39,279
a case-by-case basis

334
00:09:39,279 --> 00:09:41,120
so you might have an s3 bucket that's

335
00:09:41,120 --> 00:09:42,399
full of really important information

336
00:09:42,399 --> 00:09:43,920
having access logs for that is probably

337
00:09:43,920 --> 00:09:44,720
worthwhile

338
00:09:44,720 --> 00:09:46,240
equally if you've got an s3 bucket set

339
00:09:46,240 --> 00:09:48,399
up to just serve our um

340
00:09:48,399 --> 00:09:49,760
static content for a website for

341
00:09:49,760 --> 00:09:51,200
instance you probably don't need the

342
00:09:51,200 --> 00:09:53,279
logs for that so much right so

343
00:09:53,279 --> 00:09:55,680
it's about turning these on case by case

344
00:09:55,680 --> 00:09:57,600
working out what you need them for

345
00:09:57,600 --> 00:09:59,120
and then enabling them accordingly

346
00:09:59,120 --> 00:10:00,640
rather than just blanket drowning your

347
00:10:00,640 --> 00:10:05,839
analysts in data from them i think

348
00:10:06,959 --> 00:10:10,000
yeah absolutely so when we're kind of

349
00:10:10,000 --> 00:10:11,360
well equipped we know what it is we

350
00:10:11,360 --> 00:10:12,399
should be logging we're going to

351
00:10:12,399 --> 00:10:14,399
know what the data sources are the

352
00:10:14,399 --> 00:10:16,000
question then comes in terms of

353
00:10:16,000 --> 00:10:17,519
what is it that we're looking for then

354
00:10:17,519 --> 00:10:19,040
and then that comes down to the threat

355
00:10:19,040 --> 00:10:20,240
intelligence problem when it comes to

356
00:10:20,240 --> 00:10:21,200
cloud so

357
00:10:21,200 --> 00:10:22,880
if we just look here left and right

358
00:10:22,880 --> 00:10:24,959
we've got the the mitre attack um

359
00:10:24,959 --> 00:10:27,120
matrix there and on the left you can see

360
00:10:27,120 --> 00:10:28,000
the on-premise

361
00:10:28,000 --> 00:10:29,760
version of that and on the right you can

362
00:10:29,760 --> 00:10:31,680
see um the cloud equivalent there and i

363
00:10:31,680 --> 00:10:32,160
think it's

364
00:10:32,160 --> 00:10:34,560
obvious um that the on-premise version

365
00:10:34,560 --> 00:10:36,480
is far more populated with with the

366
00:10:36,480 --> 00:10:38,079
techniques across the kill chain

367
00:10:38,079 --> 00:10:40,399
um than the cloud one is and i think

368
00:10:40,399 --> 00:10:41,600
there's obvious reasons for that the

369
00:10:41,600 --> 00:10:43,120
first of course is that the on-prem

370
00:10:43,120 --> 00:10:45,040
version has been around for much longer

371
00:10:45,040 --> 00:10:48,079
um but the way that this this matrix

372
00:10:48,079 --> 00:10:49,360
ultimately gets populated

373
00:10:49,360 --> 00:10:50,959
is through threatened so it through

374
00:10:50,959 --> 00:10:52,480
reports um

375
00:10:52,480 --> 00:10:54,399
findings there of malicious activity

376
00:10:54,399 --> 00:10:55,760
that have been found

377
00:10:55,760 --> 00:10:57,839
um and that's what ultimately it makes

378
00:10:57,839 --> 00:10:59,440
its way into this and that's how we know

379
00:10:59,440 --> 00:11:00,560
kind of what to look for so it's a

380
00:11:00,560 --> 00:11:01,920
little bit of a chicken and egg in terms

381
00:11:01,920 --> 00:11:03,360
of we need to know what to look for so

382
00:11:03,360 --> 00:11:04,640
we rely on attack for that kind of

383
00:11:04,640 --> 00:11:05,600
visibility

384
00:11:05,600 --> 00:11:07,360
but then attack itself relies on us

385
00:11:07,360 --> 00:11:09,440
providing those reports um to kind of

386
00:11:09,440 --> 00:11:11,680
fulfill it in terms of its potential

387
00:11:11,680 --> 00:11:14,240
so there's a lot there that you know we

388
00:11:14,240 --> 00:11:17,120
need to know what to look for right

389
00:11:17,120 --> 00:11:20,720
so what is an attacker likely to do well

390
00:11:20,720 --> 00:11:22,720
for us the most obvious place for us to

391
00:11:22,720 --> 00:11:24,959
kind of rely on to find that information

392
00:11:24,959 --> 00:11:26,959
is in the environments that we exploit

393
00:11:26,959 --> 00:11:29,120
as part of our consultancy work

394
00:11:29,120 --> 00:11:31,200
um and i think probably it's fair to say

395
00:11:31,200 --> 00:11:32,720
they can be distilled into one of these

396
00:11:32,720 --> 00:11:33,360
kind of four

397
00:11:33,360 --> 00:11:35,200
categories and the first is identity

398
00:11:35,200 --> 00:11:36,880
management or mismanagement

399
00:11:36,880 --> 00:11:39,920
um and using our ability to kind of

400
00:11:39,920 --> 00:11:41,440
exploit those misconfigurations that

401
00:11:41,440 --> 00:11:42,640
allow us to elevate privileges and

402
00:11:42,640 --> 00:11:43,200
ultimately

403
00:11:43,200 --> 00:11:45,200
take control of cloud environments the

404
00:11:45,200 --> 00:11:46,399
second is

405
00:11:46,399 --> 00:11:48,160
pivoting from other environments so that

406
00:11:48,160 --> 00:11:50,160
could be starting off on premise

407
00:11:50,160 --> 00:11:52,160
that could be through some other um kind

408
00:11:52,160 --> 00:11:53,519
of internet facing asset

409
00:11:53,519 --> 00:11:55,200
obtaining some level of access

410
00:11:55,200 --> 00:11:56,639
escalating to the point where we can put

411
00:11:56,639 --> 00:11:57,839
ourselves in the relevant groups

412
00:11:57,839 --> 00:11:58,720
potentially if there's some kind of

413
00:11:58,720 --> 00:11:59,600
single sign-on

414
00:11:59,600 --> 00:12:01,279
to ultimately arrive at the cloud

415
00:12:01,279 --> 00:12:02,800
environment with administrative

416
00:12:02,800 --> 00:12:03,839
privilege

417
00:12:03,839 --> 00:12:06,240
um the third is is source code

418
00:12:06,240 --> 00:12:07,839
management and continuous delivery

419
00:12:07,839 --> 00:12:09,279
which we'll cover up in a second and

420
00:12:09,279 --> 00:12:10,399
then the last is application

421
00:12:10,399 --> 00:12:11,440
vulnerabilities so

422
00:12:11,440 --> 00:12:12,720
we're going to take a little a little

423
00:12:12,720 --> 00:12:13,839
look into that that source code

424
00:12:13,839 --> 00:12:16,639
management one now

425
00:12:18,880 --> 00:12:20,480
so when we talk about source code

426
00:12:20,480 --> 00:12:22,240
management and continuous delivery here

427
00:12:22,240 --> 00:12:23,600
and really what we're talking about is

428
00:12:23,600 --> 00:12:25,360
an attacker targeting either the code

429
00:12:25,360 --> 00:12:26,959
repositories where your

430
00:12:26,959 --> 00:12:28,079
application code or your

431
00:12:28,079 --> 00:12:30,000
infrastructure's code is stored

432
00:12:30,000 --> 00:12:33,279
or the delivery pipelines um that

433
00:12:33,279 --> 00:12:35,200
take what's in those repositories and

434
00:12:35,200 --> 00:12:36,800
either build the relevant cloud

435
00:12:36,800 --> 00:12:38,000
resources or deploy

436
00:12:38,000 --> 00:12:39,440
the right application containers in the

437
00:12:39,440 --> 00:12:41,200
right places and

438
00:12:41,200 --> 00:12:43,279
in many respects this is sort of tier

439
00:12:43,279 --> 00:12:44,800
zero for your cloud security

440
00:12:44,800 --> 00:12:46,320
everyone always thinks about hardening

441
00:12:46,320 --> 00:12:48,160
down what's in the cloud and we've seen

442
00:12:48,160 --> 00:12:50,000
quite a few cases where

443
00:12:50,000 --> 00:12:52,240
people don't apply the same diligence to

444
00:12:52,240 --> 00:12:53,600
the supporting systems

445
00:12:53,600 --> 00:12:55,120
especially from a from a detection

446
00:12:55,120 --> 00:12:57,040
standpoint um you know being able to

447
00:12:57,040 --> 00:12:57,600
track

448
00:12:57,600 --> 00:12:59,440
who's doing what to your pipelines into

449
00:12:59,440 --> 00:13:01,120
your source code actually is pretty

450
00:13:01,120 --> 00:13:02,480
important now that these are

451
00:13:02,480 --> 00:13:04,240
core components of the security of your

452
00:13:04,240 --> 00:13:06,079
entire platform if an attacker

453
00:13:06,079 --> 00:13:07,680
compromises either the pipelines or the

454
00:13:07,680 --> 00:13:08,720
source code delivery

455
00:13:08,720 --> 00:13:10,240
they can take control of basically

456
00:13:10,240 --> 00:13:12,000
everything right yeah you know we can we

457
00:13:12,000 --> 00:13:12,320
can

458
00:13:12,320 --> 00:13:14,560
deploy pretty much anything we want into

459
00:13:14,560 --> 00:13:15,680
the cloud from there

460
00:13:15,680 --> 00:13:18,160
and especially when we often find that

461
00:13:18,160 --> 00:13:19,920
the roles that those pipelines are

462
00:13:19,920 --> 00:13:21,440
running as the access they have

463
00:13:21,440 --> 00:13:23,760
um is very privileged perhaps often more

464
00:13:23,760 --> 00:13:25,040
so than it needs to be

465
00:13:25,040 --> 00:13:27,200
so i think that's quite a key thing to

466
00:13:27,200 --> 00:13:28,880
factor in really um it's one that we

467
00:13:28,880 --> 00:13:30,560
we exploit regularly ourselves on

468
00:13:30,560 --> 00:13:32,240
consultancy engagements

469
00:13:32,240 --> 00:13:33,519
and i think it's a matter of time before

470
00:13:33,519 --> 00:13:34,880
we start hearing about attackers doing

471
00:13:34,880 --> 00:13:37,440
that um you know if we're not already

472
00:13:37,440 --> 00:13:40,000
so we've covered off then the telemetry

473
00:13:40,000 --> 00:13:40,800
sources so

474
00:13:40,800 --> 00:13:41,920
you know what are we going to use for

475
00:13:41,920 --> 00:13:43,839
our detections and we're taking a look

476
00:13:43,839 --> 00:13:45,680
at some of the attacks that we've seen

477
00:13:45,680 --> 00:13:47,519
um over there kind of kind of four key

478
00:13:47,519 --> 00:13:49,120
areas there so

479
00:13:49,120 --> 00:13:50,639
how do we start then how do we action

480
00:13:50,639 --> 00:13:52,480
this how do we build the effective

481
00:13:52,480 --> 00:13:54,720
attack detection and i think the the

482
00:13:54,720 --> 00:13:56,320
methodology that we've employed over the

483
00:13:56,320 --> 00:13:57,360
past year

484
00:13:57,360 --> 00:13:59,360
um is kind of summed up with this model

485
00:13:59,360 --> 00:14:00,639
here so the first thing that we're gonna

486
00:14:00,639 --> 00:14:00,959
do

487
00:14:00,959 --> 00:14:02,560
is threat model the environment

488
00:14:02,560 --> 00:14:04,160
understand

489
00:14:04,160 --> 00:14:05,680
which could be targeted what would the

490
00:14:05,680 --> 00:14:07,440
attack paths look like hypothetic

491
00:14:07,440 --> 00:14:09,519
hypothetically going from initial

492
00:14:09,519 --> 00:14:10,480
compromise

493
00:14:10,480 --> 00:14:11,839
right through to achieving some

494
00:14:11,839 --> 00:14:13,600
objective and what that objective is is

495
00:14:13,600 --> 00:14:16,160
again defined by the the specifics of

496
00:14:16,160 --> 00:14:17,120
your environment

497
00:14:17,120 --> 00:14:18,480
if you're hosting some some sensitive

498
00:14:18,480 --> 00:14:20,160
data there then likely is that that's

499
00:14:20,160 --> 00:14:20,880
going to be

500
00:14:20,880 --> 00:14:22,480
um the objective for those attack paths

501
00:14:22,480 --> 00:14:24,320
that's going to be the end goal

502
00:14:24,320 --> 00:14:26,160
so once you've defined what those attack

503
00:14:26,160 --> 00:14:27,360
paths could look like we need to

504
00:14:27,360 --> 00:14:28,399
prioritize we'd

505
00:14:28,399 --> 00:14:29,920
say which of these have the highest

506
00:14:29,920 --> 00:14:31,760
impact which of them potentially

507
00:14:31,760 --> 00:14:33,279
is going to get the the attacker from a

508
00:14:33,279 --> 00:14:34,639
to b in the most expedient way if

509
00:14:34,639 --> 00:14:35,600
there's an obvious part

510
00:14:35,600 --> 00:14:37,760
and obvious exposure and then that's the

511
00:14:37,760 --> 00:14:38,880
kind of path that we need to be paying

512
00:14:38,880 --> 00:14:40,560
most attention to

513
00:14:40,560 --> 00:14:42,720
and then we need to understand the like

514
00:14:42,720 --> 00:14:44,880
atomic attacker actions that comprise

515
00:14:44,880 --> 00:14:46,720
those those end-to-end attacks so the

516
00:14:46,720 --> 00:14:48,480
ttps the tactics the techniques the

517
00:14:48,480 --> 00:14:49,519
procedures

518
00:14:49,519 --> 00:14:51,199
what is an attacker going to do step by

519
00:14:51,199 --> 00:14:54,320
step to achieve this objective

520
00:14:54,320 --> 00:14:55,839
and then the most obvious step is

521
00:14:55,839 --> 00:14:57,360
verifying that us

522
00:14:57,360 --> 00:14:59,760
as defenders have the telemetry we need

523
00:14:59,760 --> 00:15:01,760
um to spot those things so if we have a

524
00:15:01,760 --> 00:15:03,199
given attack type

525
00:15:03,199 --> 00:15:04,959
against a given service we can take a

526
00:15:04,959 --> 00:15:06,000
look at that and say do we have the

527
00:15:06,000 --> 00:15:07,360
service specific logs

528
00:15:07,360 --> 00:15:09,440
do we have the cloud travel api commands

529
00:15:09,440 --> 00:15:10,800
that relate to that

530
00:15:10,800 --> 00:15:12,000
and in which case we're probably in a

531
00:15:12,000 --> 00:15:13,839
good place to start step five which is

532
00:15:13,839 --> 00:15:15,279
actually executing those attacker

533
00:15:15,279 --> 00:15:16,160
actions

534
00:15:16,160 --> 00:15:18,480
and understand end to end if we have the

535
00:15:18,480 --> 00:15:20,079
detection cases that work

536
00:15:20,079 --> 00:15:21,680
or even as like a step zero

537
00:15:21,680 --> 00:15:23,360
understanding what they might look like

538
00:15:23,360 --> 00:15:25,120
so we can say okay this is the specific

539
00:15:25,120 --> 00:15:26,720
api events um

540
00:15:26,720 --> 00:15:28,000
that we can look for we can start

541
00:15:28,000 --> 00:15:29,600
building detections and fine-tuning

542
00:15:29,600 --> 00:15:30,160
those

543
00:15:30,160 --> 00:15:31,920
um to ultimately detect them should we

544
00:15:31,920 --> 00:15:35,599
replay those attacks at a later date

545
00:15:36,480 --> 00:15:38,399
so i think one of the key messages that

546
00:15:38,399 --> 00:15:40,959
we've learned and working with

547
00:15:40,959 --> 00:15:42,079
a combination of this sort of the

548
00:15:42,079 --> 00:15:43,839
operational teams in some of these uh

549
00:15:43,839 --> 00:15:44,959
these environments

550
00:15:44,959 --> 00:15:46,880
but also from the perspective of

551
00:15:46,880 --> 00:15:48,720
detection one of the

552
00:15:48,720 --> 00:15:50,959
most powerful things you can do as a

553
00:15:50,959 --> 00:15:52,480
detection team in general not

554
00:15:52,480 --> 00:15:53,920
just in the cloud but especially in the

555
00:15:53,920 --> 00:15:56,079
cloud space and is move towards

556
00:15:56,079 --> 00:15:57,199
detection as code

557
00:15:57,199 --> 00:16:00,639
basically and define your detections

558
00:16:00,639 --> 00:16:02,800
in a machine readable format something

559
00:16:02,800 --> 00:16:04,480
that you can easily version control

560
00:16:04,480 --> 00:16:06,959
and that you can update over time and it

561
00:16:06,959 --> 00:16:08,000
provides an easy mean

562
00:16:08,000 --> 00:16:09,600
to share knowledge within the team if

563
00:16:09,600 --> 00:16:11,279
it's a common format that everyone can

564
00:16:11,279 --> 00:16:11,839
read

565
00:16:11,839 --> 00:16:13,920
and then rather than just talking about

566
00:16:13,920 --> 00:16:15,440
particular attacker activity at a higher

567
00:16:15,440 --> 00:16:17,199
level and how it works and explain these

568
00:16:17,199 --> 00:16:17,759
things

569
00:16:17,759 --> 00:16:19,440
and to your more junior analysts they

570
00:16:19,440 --> 00:16:20,959
can go in and read the detections and

571
00:16:20,959 --> 00:16:22,000
really understand

572
00:16:22,000 --> 00:16:23,680
um you know exactly what this this

573
00:16:23,680 --> 00:16:24,880
particular technique's going to do under

574
00:16:24,880 --> 00:16:25,519
the hood

575
00:16:25,519 --> 00:16:27,279
and we've seen a few key projects in the

576
00:16:27,279 --> 00:16:29,519
open source space around that um already

577
00:16:29,519 --> 00:16:32,720
and not least sigma and which is an

578
00:16:32,720 --> 00:16:34,639
agnostic set of rules and that you can

579
00:16:34,639 --> 00:16:37,199
compile down then to splunk or queue

580
00:16:37,199 --> 00:16:39,440
whilst you're running um we've also seen

581
00:16:39,440 --> 00:16:41,440
some interesting efforts with um jupiter

582
00:16:41,440 --> 00:16:42,240
notebooks

583
00:16:42,240 --> 00:16:45,440
um to build out a set of playbooks that

584
00:16:45,440 --> 00:16:47,199
you can run to hunt for specific

585
00:16:47,199 --> 00:16:48,639
attacker activity

586
00:16:48,639 --> 00:16:51,040
um so we took all of this and over the

587
00:16:51,040 --> 00:16:52,880
course of the last year or so we've been

588
00:16:52,880 --> 00:16:53,440
working

589
00:16:53,440 --> 00:16:55,440
on um moving a lot of this stuff into

590
00:16:55,440 --> 00:16:57,040
the cloud at which point

591
00:16:57,040 --> 00:16:59,600
we ended up with leonidas which is an

592
00:16:59,600 --> 00:17:01,680
open source tool we've we've released

593
00:17:01,680 --> 00:17:04,400
um so essentially the idea with leonidas

594
00:17:04,400 --> 00:17:06,559
is that you have your security team your

595
00:17:06,559 --> 00:17:07,520
analysts the

596
00:17:07,520 --> 00:17:09,119
purple team as red teamers who are

597
00:17:09,119 --> 00:17:11,119
executing these test cases as well

598
00:17:11,119 --> 00:17:13,839
and and they define themselves a new ttp

599
00:17:13,839 --> 00:17:15,520
that's committed into a into a

600
00:17:15,520 --> 00:17:16,400
repository

601
00:17:16,400 --> 00:17:18,640
and we then have a cicd pipeline that

602
00:17:18,640 --> 00:17:20,160
actually builds out a serverless

603
00:17:20,160 --> 00:17:20,720
function

604
00:17:20,720 --> 00:17:24,240
based on those um definitions uh we then

605
00:17:24,240 --> 00:17:26,400
expose that serverless function to the

606
00:17:26,400 --> 00:17:28,079
purple team and they can use that to

607
00:17:28,079 --> 00:17:29,919
execute attacks so you make a single web

608
00:17:29,919 --> 00:17:30,640
request

609
00:17:30,640 --> 00:17:32,559
and to execute a particular attack at

610
00:17:32,559 --> 00:17:33,760
ttp

611
00:17:33,760 --> 00:17:35,440
um that's executed against whatever

612
00:17:35,440 --> 00:17:37,200
target resources you've got set up

613
00:17:37,200 --> 00:17:39,360
and we then feed those logs uh straight

614
00:17:39,360 --> 00:17:40,880
into the the scene

615
00:17:40,880 --> 00:17:42,320
and you can then have your analysts hunt

616
00:17:42,320 --> 00:17:44,960
for the activity that we just executed

617
00:17:44,960 --> 00:17:49,039
and by this api that we've exposed

618
00:17:49,280 --> 00:17:51,120
so i think one of the most critical

619
00:17:51,120 --> 00:17:52,559
things to it is that um

620
00:17:52,559 --> 00:17:54,080
it's a fairly easy format to work with

621
00:17:54,080 --> 00:17:55,440
the definitions are quite short and

622
00:17:55,440 --> 00:17:55,919
sweet

623
00:17:55,919 --> 00:17:58,400
and the underlying framework takes care

624
00:17:58,400 --> 00:18:00,240
of basically everything about how the

625
00:18:00,240 --> 00:18:02,880
api itself functions um including how

626
00:18:02,880 --> 00:18:04,240
different identities within the cloud

627
00:18:04,240 --> 00:18:06,000
are handled you know for aws you can

628
00:18:06,000 --> 00:18:06,640
hand it

629
00:18:06,640 --> 00:18:08,799
roles to assume you can hand it um

630
00:18:08,799 --> 00:18:11,840
access keys and secret access key pairs

631
00:18:11,840 --> 00:18:13,679
and all the analyst has to do is write a

632
00:18:13,679 --> 00:18:16,000
single one or two of python to say

633
00:18:16,000 --> 00:18:17,360
essentially call this botox 3 function

634
00:18:17,360 --> 00:18:19,039
for aws or the azure apis

635
00:18:19,039 --> 00:18:22,240
for azure um and so we uh

636
00:18:22,240 --> 00:18:25,440
we then generate that into an api

637
00:18:25,440 --> 00:18:27,679
that runs inside that service function

638
00:18:27,679 --> 00:18:30,000
these definitions also then contain

639
00:18:30,000 --> 00:18:33,440
um detection cases so we write the

640
00:18:33,440 --> 00:18:35,600
sigma rules into the same place that we

641
00:18:35,600 --> 00:18:36,960
we write the detection

642
00:18:36,960 --> 00:18:38,320
so that you've got a single file that

643
00:18:38,320 --> 00:18:40,559
defines exactly how to execute the

644
00:18:40,559 --> 00:18:41,039
attack

645
00:18:41,039 --> 00:18:42,720
uh exactly how to detect it and that

646
00:18:42,720 --> 00:18:44,640
lives as a single source of truth for

647
00:18:44,640 --> 00:18:46,160
this attacker ttp that we

648
00:18:46,160 --> 00:18:47,600
we have here and we can take this

649
00:18:47,600 --> 00:18:49,280
definition and we can compile it down

650
00:18:49,280 --> 00:18:51,039
to to work with the same platform that

651
00:18:51,039 --> 00:18:52,799
we're using

652
00:18:52,799 --> 00:18:54,720
and we can also generate documentation

653
00:18:54,720 --> 00:18:56,160
off it so one of the really powerful

654
00:18:56,160 --> 00:18:57,600
things we've found with this is it's an

655
00:18:57,600 --> 00:18:59,600
opportunity to embed

656
00:18:59,600 --> 00:19:01,600
uh human contacts and notes about your

657
00:19:01,600 --> 00:19:02,880
organization's specific environments

658
00:19:02,880 --> 00:19:04,080
within your organization

659
00:19:04,080 --> 00:19:06,000
to say things like this probably is

660
00:19:06,000 --> 00:19:07,360
usually malicious but in the case of

661
00:19:07,360 --> 00:19:08,880
these two particular projects

662
00:19:08,880 --> 00:19:10,720
their aws accounts do this all the time

663
00:19:10,720 --> 00:19:12,400
for business reasons x y and z

664
00:19:12,400 --> 00:19:13,840
so therefore factor that in when you're

665
00:19:13,840 --> 00:19:15,760
triaging these events

666
00:19:15,760 --> 00:19:17,440
um and that's that's proven pretty

667
00:19:17,440 --> 00:19:19,440
useful too

668
00:19:19,440 --> 00:19:22,960
so um let's let's demo it so this is

669
00:19:22,960 --> 00:19:24,799
leonidas this is the

670
00:19:24,799 --> 00:19:27,440
web api that we expose that uh allows

671
00:19:27,440 --> 00:19:28,960
you to execute those test cases that

672
00:19:28,960 --> 00:19:30,400
i've just been talking about

673
00:19:30,400 --> 00:19:33,679
and this is built by a aws native ci cd

674
00:19:33,679 --> 00:19:35,840
pipeline for azure and gcp we're

675
00:19:35,840 --> 00:19:37,679
building out using their native tooling

676
00:19:37,679 --> 00:19:38,320
as well

677
00:19:38,320 --> 00:19:39,760
right now this is hosted in a lambda

678
00:19:39,760 --> 00:19:41,600
function with an api gateway in front of

679
00:19:41,600 --> 00:19:42,400
it

680
00:19:42,400 --> 00:19:43,840
and you can see here we've got a range

681
00:19:43,840 --> 00:19:45,520
of different test cases across the miter

682
00:19:45,520 --> 00:19:46,160
kill chain

683
00:19:46,160 --> 00:19:48,720
so let's dig into to one of them as an

684
00:19:48,720 --> 00:19:50,000
example

685
00:19:50,000 --> 00:19:53,120
perhaps we have some i am access and we

686
00:19:53,120 --> 00:19:55,120
have a user that we've created as a

687
00:19:55,120 --> 00:19:55,760
backdoor

688
00:19:55,760 --> 00:19:57,919
and so let's add a policy to to that

689
00:19:57,919 --> 00:19:59,760
user and you can see here not only can

690
00:19:59,760 --> 00:20:00,400
we pass in

691
00:20:00,400 --> 00:20:02,159
the user in the policy that we're trying

692
00:20:02,159 --> 00:20:04,320
to target here but also actually we can

693
00:20:04,320 --> 00:20:06,880
pass in a variety of identity based data

694
00:20:06,880 --> 00:20:09,760
to allow leonidas to execute the test

695
00:20:09,760 --> 00:20:10,159
case

696
00:20:10,159 --> 00:20:12,880
as something other than itself and it

697
00:20:12,880 --> 00:20:14,000
comes with an

698
00:20:14,000 --> 00:20:16,159
i am role and the permissions for that i

699
00:20:16,159 --> 00:20:18,720
am role are automatically generated

700
00:20:18,720 --> 00:20:21,840
by the build scripts but it's beneficial

701
00:20:21,840 --> 00:20:23,200
to be able to trigger test cases as a

702
00:20:23,200 --> 00:20:24,720
range of different identities so in the

703
00:20:24,720 --> 00:20:25,840
case of aws

704
00:20:25,840 --> 00:20:28,880
uh we can also pass in an arm that's

705
00:20:28,880 --> 00:20:30,799
for a role that we wish to assume or we

706
00:20:30,799 --> 00:20:31,919
can pass in an

707
00:20:31,919 --> 00:20:34,320
access key secret access key key pair we

708
00:20:34,320 --> 00:20:35,679
can also specify obviously the the

709
00:20:35,679 --> 00:20:37,360
region that we're trying to target

710
00:20:37,360 --> 00:20:39,520
now this interface is quite nice for

711
00:20:39,520 --> 00:20:40,640
exploring the api

712
00:20:40,640 --> 00:20:43,039
but for security reasons in order to

713
00:20:43,039 --> 00:20:44,480
trigger any of these test cases you need

714
00:20:44,480 --> 00:20:46,240
to supply an api parameter

715
00:20:46,240 --> 00:20:49,520
api key parameter sorry alongside it

716
00:20:49,520 --> 00:20:51,840
um in order to to get that executing

717
00:20:51,840 --> 00:20:52,640
properly

718
00:20:52,640 --> 00:20:55,520
so you can either use leo which is a

719
00:20:55,520 --> 00:20:56,480
command line

720
00:20:56,480 --> 00:20:58,799
tool that runs uh encapsulates these

721
00:20:58,799 --> 00:21:01,200
apis you run it locally and it speaks to

722
00:21:01,200 --> 00:21:03,360
the leonidas api but actually we've had

723
00:21:03,360 --> 00:21:04,640
quite a lot of success

724
00:21:04,640 --> 00:21:07,280
uh working with jupiter so jupiter for

725
00:21:07,280 --> 00:21:08,320
those who aren't familiar

726
00:21:08,320 --> 00:21:11,120
is uh essentially a web-based interface

727
00:21:11,120 --> 00:21:11,440
to

728
00:21:11,440 --> 00:21:13,760
a python interpreter and that allows you

729
00:21:13,760 --> 00:21:15,280
to embed code in and long

730
00:21:15,280 --> 00:21:18,480
documents document content and generate

731
00:21:18,480 --> 00:21:20,000
graphs and tables and all of these kinds

732
00:21:20,000 --> 00:21:21,360
of things it's a pretty popular data

733
00:21:21,360 --> 00:21:22,720
science tool but we've also found it

734
00:21:22,720 --> 00:21:23,919
very effective

735
00:21:23,919 --> 00:21:25,360
in the detection and purple teaming

736
00:21:25,360 --> 00:21:27,600
space so here what we're doing

737
00:21:27,600 --> 00:21:29,919
is uh you know we've got this leonidas

738
00:21:29,919 --> 00:21:31,600
api endpoint it's the same one we were

739
00:21:31,600 --> 00:21:32,880
looking at previously

740
00:21:32,880 --> 00:21:35,840
um and so we're going to load in the set

741
00:21:35,840 --> 00:21:37,120
of test cases

742
00:21:37,120 --> 00:21:39,440
from this case config and the leonidas

743
00:21:39,440 --> 00:21:41,039
framework will also generate this this

744
00:21:41,039 --> 00:21:42,480
yaml file for you that defines all the

745
00:21:42,480 --> 00:21:43,520
test cases

746
00:21:43,520 --> 00:21:45,039
but you can see here we've got all the

747
00:21:45,039 --> 00:21:47,440
test cases then loaded in

748
00:21:47,440 --> 00:21:49,760
into this jupyter notebook and so for

749
00:21:49,760 --> 00:21:50,720
instance

750
00:21:50,720 --> 00:21:53,840
we were looking at the

751
00:21:53,840 --> 00:21:55,840
adding policy to a user one before you

752
00:21:55,840 --> 00:21:58,320
can see that here row number 35 and so

753
00:21:58,320 --> 00:21:59,840
we'll make use of that in a bit but then

754
00:21:59,840 --> 00:22:01,280
to start actually triggering some test

755
00:22:01,280 --> 00:22:01,840
cases

756
00:22:01,840 --> 00:22:03,520
uh you can see here we're calling run

757
00:22:03,520 --> 00:22:05,520
case as a simple wrapper function around

758
00:22:05,520 --> 00:22:05,840
that

759
00:22:05,840 --> 00:22:08,880
um that http api

760
00:22:08,880 --> 00:22:10,240
and we're going to call get caller

761
00:22:10,240 --> 00:22:12,080
identity which you run

762
00:22:12,080 --> 00:22:14,080
to tell you who you are what the

763
00:22:14,080 --> 00:22:15,919
identity of the the current user or

764
00:22:15,919 --> 00:22:16,880
entity is

765
00:22:16,880 --> 00:22:18,960
and so here you can see um leonidas has

766
00:22:18,960 --> 00:22:19,919
assumed a role

767
00:22:19,919 --> 00:22:22,080
um it's this leonardo's devop role and

768
00:22:22,080 --> 00:22:24,159
so that's the the default i am role that

769
00:22:24,159 --> 00:22:25,600
the lambda function has assigned to it

770
00:22:25,600 --> 00:22:27,200
when it executes to allow it to interact

771
00:22:27,200 --> 00:22:28,320
with the aws

772
00:22:28,320 --> 00:22:32,000
apis themselves so let's assume now that

773
00:22:32,000 --> 00:22:32,960
we are an attacker

774
00:22:32,960 --> 00:22:36,559
we have a vulnerability in this lambda

775
00:22:36,559 --> 00:22:38,000
function that has allowed us to gain

776
00:22:38,000 --> 00:22:39,679
some sort of code execution or command

777
00:22:39,679 --> 00:22:41,600
injection or something and so we're now

778
00:22:41,600 --> 00:22:42,880
um

779
00:22:42,880 --> 00:22:45,200
executing these uh attacker actions

780
00:22:45,200 --> 00:22:47,919
against the underlying aws account

781
00:22:47,919 --> 00:22:51,200
so first off let's uh enumerate these

782
00:22:51,200 --> 00:22:52,559
guard duty detectors that might be

783
00:22:52,559 --> 00:22:54,720
listening to us and so in this case we

784
00:22:54,720 --> 00:22:56,080
can see guard duty

785
00:22:56,080 --> 00:22:58,720
uh is running we've got detector id here

786
00:22:58,720 --> 00:22:59,280
so

787
00:22:59,280 --> 00:23:00,880
if we try and do anything too obvious

788
00:23:00,880 --> 00:23:02,400
guard duty might spot us

789
00:23:02,400 --> 00:23:04,320
um but also let's take a look at whether

790
00:23:04,320 --> 00:23:05,679
they've got any cloud trails in the

791
00:23:05,679 --> 00:23:06,880
current region

792
00:23:06,880 --> 00:23:08,960
so here we can see we've actually got

793
00:23:08,960 --> 00:23:10,480
two cloud trails listening to us if

794
00:23:10,480 --> 00:23:11,280
their

795
00:23:11,280 --> 00:23:12,559
defenders are paying attention we

796
00:23:12,559 --> 00:23:14,080
probably will get spotted but we're

797
00:23:14,080 --> 00:23:15,440
going to carry on anyway

798
00:23:15,440 --> 00:23:17,200
and what we're going to try and do now

799
00:23:17,200 --> 00:23:19,440
is add an iron user

800
00:23:19,440 --> 00:23:22,640
the leonardis function i am role comes

801
00:23:22,640 --> 00:23:24,240
with a certain set permissions defined

802
00:23:24,240 --> 00:23:25,280
in the test cases

803
00:23:25,280 --> 00:23:27,360
to allow it to always execute these

804
00:23:27,360 --> 00:23:28,480
these particular

805
00:23:28,480 --> 00:23:30,799
test cases that it's built with so we

806
00:23:30,799 --> 00:23:32,320
know this is going to succeed

807
00:23:32,320 --> 00:23:33,360
obviously if you've got permissions

808
00:23:33,360 --> 00:23:34,720
boundaries or other things configured it

809
00:23:34,720 --> 00:23:36,320
might not but for the sake of this

810
00:23:36,320 --> 00:23:37,679
exercise um you know we're going to

811
00:23:37,679 --> 00:23:39,679
create a new user um

812
00:23:39,679 --> 00:23:42,159
so we've got this new user created um we

813
00:23:42,159 --> 00:23:43,520
passed in here into

814
00:23:43,520 --> 00:23:46,159
uh into that api call and we're now

815
00:23:46,159 --> 00:23:47,919
going to add an api key to that user to

816
00:23:47,919 --> 00:23:49,360
make sure that we can

817
00:23:49,360 --> 00:23:52,159
interact with aws as that user for good

818
00:23:52,159 --> 00:23:53,360
measure we're also going to add on the

819
00:23:53,360 --> 00:23:55,120
administrator access managed policy

820
00:23:55,120 --> 00:23:56,559
obviously pretty bad practice but it

821
00:23:56,559 --> 00:23:57,840
makes the rest of the demo work quite

822
00:23:57,840 --> 00:23:58,480
nicely

823
00:23:58,480 --> 00:24:00,480
so we've now done that and what we can

824
00:24:00,480 --> 00:24:02,000
now start doing is

825
00:24:02,000 --> 00:24:03,760
running other test cases using those

826
00:24:03,760 --> 00:24:05,600
access keys that we generated previously

827
00:24:05,600 --> 00:24:07,600
that are in our jupyter notebook

828
00:24:07,600 --> 00:24:09,360
so i'm going to rerun that get caller

829
00:24:09,360 --> 00:24:11,039
identity test case but you can see now

830
00:24:11,039 --> 00:24:12,799
we're actually passing in this

831
00:24:12,799 --> 00:24:14,320
set of credentials that we've defined

832
00:24:14,320 --> 00:24:17,039
here and so if we run that now you'll

833
00:24:17,039 --> 00:24:19,200
see that when we come back

834
00:24:19,200 --> 00:24:22,240
from the caller identity call we're now

835
00:24:22,240 --> 00:24:24,799
running as a user account in fact the

836
00:24:24,799 --> 00:24:26,400
user account we just created

837
00:24:26,400 --> 00:24:29,039
and so we've changed the entity that

838
00:24:29,039 --> 00:24:31,200
we're executing these test cases as

839
00:24:31,200 --> 00:24:33,600
and this allows us to simulate a variety

840
00:24:33,600 --> 00:24:34,320
of different

841
00:24:34,320 --> 00:24:36,080
sort of attackers start points and

842
00:24:36,080 --> 00:24:37,679
assume different types of breaches these

843
00:24:37,679 --> 00:24:39,039
kinds of things

844
00:24:39,039 --> 00:24:42,240
so then what we can do from here we can

845
00:24:42,240 --> 00:24:44,320
list the secrets in secrets manager um

846
00:24:44,320 --> 00:24:45,679
you know we're now an attacker who's

847
00:24:45,679 --> 00:24:46,720
poking around

848
00:24:46,720 --> 00:24:49,760
uh trying to find uh secret data or

849
00:24:49,760 --> 00:24:52,480
steal further uh access keys credentials

850
00:24:52,480 --> 00:24:54,080
to get further into the environment

851
00:24:54,080 --> 00:24:56,960
um and it turns out we've got a secret

852
00:24:56,960 --> 00:24:58,480
it's called leonardo's created secrets

853
00:24:58,480 --> 00:24:59,520
so what we're going to do

854
00:24:59,520 --> 00:25:02,400
is uh grab the contents of that with

855
00:25:02,400 --> 00:25:03,840
another leonardo's test case

856
00:25:03,840 --> 00:25:05,600
and you can see here we've got some some

857
00:25:05,600 --> 00:25:08,080
secret data coming back from the

858
00:25:08,080 --> 00:25:10,480
aws apis there so what we've done is

859
00:25:10,480 --> 00:25:12,320
we've executed an entire kill chain

860
00:25:12,320 --> 00:25:13,919
and we've simulated an application

861
00:25:13,919 --> 00:25:15,600
vulnerability inside the lambda function

862
00:25:15,600 --> 00:25:16,640
as a start point

863
00:25:16,640 --> 00:25:18,960
we've done some enumeration to see who

864
00:25:18,960 --> 00:25:19,679
we are

865
00:25:19,679 --> 00:25:21,919
what uh defenses are likely to be

866
00:25:21,919 --> 00:25:22,880
watching for us

867
00:25:22,880 --> 00:25:25,360
um we've created a persistence mechanism

868
00:25:25,360 --> 00:25:27,600
by creating an ion user adding an api

869
00:25:27,600 --> 00:25:28,000
key to

870
00:25:28,000 --> 00:25:31,039
it adding some iron permissions to that

871
00:25:31,039 --> 00:25:32,960
user that we just created and then we've

872
00:25:32,960 --> 00:25:34,720
used that new user to enumerate the

873
00:25:34,720 --> 00:25:36,159
contents of secrets manager

874
00:25:36,159 --> 00:25:37,840
and dump some secrets out and we've done

875
00:25:37,840 --> 00:25:40,000
all of that in a programmatic fashion

876
00:25:40,000 --> 00:25:42,000
and in a way that doesn't rely on the

877
00:25:42,000 --> 00:25:43,520
analysts having an underlying

878
00:25:43,520 --> 00:25:45,360
understanding of what these test cases

879
00:25:45,360 --> 00:25:47,360
are how the aws apis work

880
00:25:47,360 --> 00:25:48,960
and we're simply triggering the test

881
00:25:48,960 --> 00:25:51,520
cases and the individual ttps one by one

882
00:25:51,520 --> 00:25:57,440
as part of this larger kill chain

883
00:25:57,440 --> 00:25:59,840
now one of the benefits to leonidas is

884
00:25:59,840 --> 00:26:00,880
not only do we

885
00:26:00,880 --> 00:26:02,320
have the ability to trigger these test

886
00:26:02,320 --> 00:26:04,480
cases automatically it also generates

887
00:26:04,480 --> 00:26:05,440
its own logs

888
00:26:05,440 --> 00:26:06,960
so you can compare and contrast them

889
00:26:06,960 --> 00:26:08,400
with what you're seeing in your scene

890
00:26:08,400 --> 00:26:10,240
and what alerts you've got firing

891
00:26:10,240 --> 00:26:12,080
so let's jump into the the latest set of

892
00:26:12,080 --> 00:26:13,919
logs here

893
00:26:13,919 --> 00:26:17,200
and so what we'll find is yeah looking

894
00:26:17,200 --> 00:26:17,919
at the top

895
00:26:17,919 --> 00:26:19,679
you can see we've got an sts get caller

896
00:26:19,679 --> 00:26:22,000
identity call followed by lisgaard duty

897
00:26:22,000 --> 00:26:22,880
detectors

898
00:26:22,880 --> 00:26:24,400
enumerate cloud trails for a given

899
00:26:24,400 --> 00:26:26,720
region these are are all the test cases

900
00:26:26,720 --> 00:26:29,120
and you can see here that the arguments

901
00:26:29,120 --> 00:26:30,960
we're passing in are also represented so

902
00:26:30,960 --> 00:26:31,760
we can track

903
00:26:31,760 --> 00:26:33,679
uh exactly how the test cases were

904
00:26:33,679 --> 00:26:35,760
executed what parameters were passed in

905
00:26:35,760 --> 00:26:37,679
and if we go down to where we then run

906
00:26:37,679 --> 00:26:39,200
the second caller identity

907
00:26:39,200 --> 00:26:41,840
you can see also that the access key id

908
00:26:41,840 --> 00:26:42,640
that we passed in

909
00:26:42,640 --> 00:26:45,440
is recorded and we have that on record

910
00:26:45,440 --> 00:26:46,720
so that we can understand

911
00:26:46,720 --> 00:26:49,039
what uh entity these these test cases

912
00:26:49,039 --> 00:26:49,840
will run as

913
00:26:49,840 --> 00:26:52,240
we can feed all this data into a

914
00:26:52,240 --> 00:26:54,080
centralized logging platform or leave it

915
00:26:54,080 --> 00:26:56,000
in cloudwatch in fact if you prefer

916
00:26:56,000 --> 00:26:57,919
but we can diff this then against what

917
00:26:57,919 --> 00:26:59,120
we're seeing in the scene

918
00:26:59,120 --> 00:27:00,400
and it allows us to get a better

919
00:27:00,400 --> 00:27:02,320
understanding of whether our test cases

920
00:27:02,320 --> 00:27:04,320
worked or not

921
00:27:04,320 --> 00:27:06,159
and we have those logs there for

922
00:27:06,159 --> 00:27:08,080
posterity uh it doesn't require the

923
00:27:08,080 --> 00:27:09,600
analysts to take detailed notes as they

924
00:27:09,600 --> 00:27:10,799
go because everything they do is

925
00:27:10,799 --> 00:27:14,158
recorded automatically for you

926
00:27:14,799 --> 00:27:17,120
okay so one of the other really powerful

927
00:27:17,120 --> 00:27:18,960
things then is off the back of that

928
00:27:18,960 --> 00:27:20,399
we've got leonidas running we can

929
00:27:20,399 --> 00:27:22,399
execute these test cases we can look at

930
00:27:22,399 --> 00:27:23,760
the logs in our scene

931
00:27:23,760 --> 00:27:25,440
but actually leonidas itself also

932
00:27:25,440 --> 00:27:28,000
produces his own set of logs as to

933
00:27:28,000 --> 00:27:30,159
what attacker actions were executed and

934
00:27:30,159 --> 00:27:31,760
you know what parameters what context

935
00:27:31,760 --> 00:27:33,440
what resources they targeted

936
00:27:33,440 --> 00:27:35,200
and we can actually feed all of that

937
00:27:35,200 --> 00:27:36,880
somewhere as well into your scene or to

938
00:27:36,880 --> 00:27:37,919
another platform

939
00:27:37,919 --> 00:27:40,240
and we can then essentially diff the use

940
00:27:40,240 --> 00:27:42,000
cases that were triggered in leonidas

941
00:27:42,000 --> 00:27:43,360
against the

942
00:27:43,360 --> 00:27:45,120
events in the scene and we can see

943
00:27:45,120 --> 00:27:46,480
whether the detections that we were

944
00:27:46,480 --> 00:27:47,440
expecting to

945
00:27:47,440 --> 00:27:49,679
trigger and you know either as alerts or

946
00:27:49,679 --> 00:27:51,360
as tags or whatever else

947
00:27:51,360 --> 00:27:53,440
whether those happen in the correct way

948
00:27:53,440 --> 00:27:55,039
and that means that over time actually

949
00:27:55,039 --> 00:27:55,760
we can

950
00:27:55,760 --> 00:27:57,760
regression test improvements to our

951
00:27:57,760 --> 00:27:59,200
detective capability right

952
00:27:59,200 --> 00:28:02,480
we can add additional test cases

953
00:28:02,480 --> 00:28:05,039
uh additional use cases even we can then

954
00:28:05,039 --> 00:28:05,840
verify

955
00:28:05,840 --> 00:28:07,360
that doing so hasn't broken any others

956
00:28:07,360 --> 00:28:09,760
we can update uh test cases to

957
00:28:09,760 --> 00:28:11,440
to match new changes by the cloud

958
00:28:11,440 --> 00:28:13,039
providers catch additional things

959
00:28:13,039 --> 00:28:14,960
uh we can verify that we've not backslid

960
00:28:14,960 --> 00:28:16,559
in the process and actually that means

961
00:28:16,559 --> 00:28:18,159
then we can iterate much faster because

962
00:28:18,159 --> 00:28:20,159
we're confident in our ability to

963
00:28:20,159 --> 00:28:23,279
catch mistakes as we go

964
00:28:25,440 --> 00:28:28,480
yeah absolutely so conclusions then

965
00:28:28,480 --> 00:28:30,399
well it might sound corny but i guess

966
00:28:30,399 --> 00:28:31,520
the ultimate thing here is that

967
00:28:31,520 --> 00:28:33,360
detection is a journey right so

968
00:28:33,360 --> 00:28:34,799
your cloud environments are changing all

969
00:28:34,799 --> 00:28:36,720
the time and that could be because

970
00:28:36,720 --> 00:28:38,000
you're implementing new features you're

971
00:28:38,000 --> 00:28:39,200
changing the way you do that you're

972
00:28:39,200 --> 00:28:41,120
changing the services that you utilize

973
00:28:41,120 --> 00:28:43,200
so ultimately your detection has to

974
00:28:43,200 --> 00:28:44,559
change with it

975
00:28:44,559 --> 00:28:47,360
um we can also think about context think

976
00:28:47,360 --> 00:28:48,880
about how important that is

977
00:28:48,880 --> 00:28:50,799
and not only is that case of you know it

978
00:28:50,799 --> 00:28:52,320
might seem as though that's an issue for

979
00:28:52,320 --> 00:28:54,320
you that's that's to your disadvantage

980
00:28:54,320 --> 00:28:56,000
you can actually use that to make more

981
00:28:56,000 --> 00:28:57,600
effective detections if you know

982
00:28:57,600 --> 00:28:59,360
the behaviors of your environment inside

983
00:28:59,360 --> 00:29:01,919
out any deviation from that could build

984
00:29:01,919 --> 00:29:03,200
a high fidelity alert

985
00:29:03,200 --> 00:29:05,600
so you can use that to your advantage um

986
00:29:05,600 --> 00:29:06,799
and then lastly

987
00:29:06,799 --> 00:29:08,960
as we kind of discussed here that threat

988
00:29:08,960 --> 00:29:10,480
intelligence problem not knowing what

989
00:29:10,480 --> 00:29:12,720
bad looks like what we should hunt for

990
00:29:12,720 --> 00:29:14,640
the ability to codify and ultimately

991
00:29:14,640 --> 00:29:16,720
share the use cases that you build

992
00:29:16,720 --> 00:29:18,000
is going to aid knowledge sharing and

993
00:29:18,000 --> 00:29:19,919
ultimately help all of us to to build

994
00:29:19,919 --> 00:29:22,399
more effective crowd detection really

995
00:29:22,399 --> 00:29:23,919
and then we talked about that threat

996
00:29:23,919 --> 00:29:25,440
modelling process going end-to-end

997
00:29:25,440 --> 00:29:27,039
identifying attack paths

998
00:29:27,039 --> 00:29:28,480
identifying potential needs for new

999
00:29:28,480 --> 00:29:30,399
telemetry or to kind of decommission

1000
00:29:30,399 --> 00:29:31,919
something we're not using anymore

1001
00:29:31,919 --> 00:29:33,600
that constant cycle is something we can

1002
00:29:33,600 --> 00:29:35,200
use to make sure that we're always

1003
00:29:35,200 --> 00:29:36,960
kind of the most equipped we can be to

1004
00:29:36,960 --> 00:29:41,840
detect malicious activity in the cloud

1005
00:29:42,720 --> 00:29:45,440
and then lastly um you know please do a

1006
00:29:45,440 --> 00:29:46,640
go with leonidas let me know what you

1007
00:29:46,640 --> 00:29:48,080
think of it and it's available up on

1008
00:29:48,080 --> 00:29:48,640
github

1009
00:29:48,640 --> 00:29:51,840
f-secure labs slash leonidas we

1010
00:29:51,840 --> 00:29:53,279
currently support aws

1011
00:29:53,279 --> 00:29:55,200
azure and gcp are actually pretty close

1012
00:29:55,200 --> 00:29:56,720
to being done we're getting pretty far

1013
00:29:56,720 --> 00:29:57,440
with that now

1014
00:29:57,440 --> 00:29:59,440
um at the moment we've got 45 test cases

1015
00:29:59,440 --> 00:30:00,960
for aws you know you saw some of the

1016
00:30:00,960 --> 00:30:02,480
demo earlier there's quite a few others

1017
00:30:02,480 --> 00:30:03,120
too

1018
00:30:03,120 --> 00:30:05,279
um go play with it see what you think

1019
00:30:05,279 --> 00:30:06,240
and let me know

1020
00:30:06,240 --> 00:30:08,559
uh you know equally those test cases are

1021
00:30:08,559 --> 00:30:09,600
up there because they've what we've

1022
00:30:09,600 --> 00:30:10,559
needed so far

1023
00:30:10,559 --> 00:30:12,240
but actually um they're pretty easy to

1024
00:30:12,240 --> 00:30:13,840
write so please do contribute your own

1025
00:30:13,840 --> 00:30:16,080
pull requests more than welcome

1026
00:30:16,080 --> 00:30:18,399
awesome yeah and that's it from us thank

1027
00:30:18,399 --> 00:30:21,199
you

