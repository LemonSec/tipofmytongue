1
00:00:00,000 --> 00:00:02,159
hi everyone thank you for joining my

2
00:00:02,159 --> 00:00:04,000
name is itai shakuri

3
00:00:04,000 --> 00:00:06,160
and i work for aqua security on open

4
00:00:06,160 --> 00:00:08,880
source security related projects

5
00:00:08,880 --> 00:00:11,280
mostly for the cloud native ecosystem

6
00:00:11,280 --> 00:00:13,040
lately i've been working on a

7
00:00:13,040 --> 00:00:15,759
project that is a system tracing tool

8
00:00:15,759 --> 00:00:17,600
and its integration into

9
00:00:17,600 --> 00:00:20,720
a dynamic image scanning product and i

10
00:00:20,720 --> 00:00:22,320
wanted to share with you

11
00:00:22,320 --> 00:00:24,400
first of all uh the concept of dynamic

12
00:00:24,400 --> 00:00:25,680
image scanning the way that

13
00:00:25,680 --> 00:00:28,320
we perceive it and also the relationship

14
00:00:28,320 --> 00:00:29,519
between this

15
00:00:29,519 --> 00:00:32,399
and other concepts that you are familiar

16
00:00:32,399 --> 00:00:32,800
with

17
00:00:32,800 --> 00:00:35,120
maybe you're using today and also i

18
00:00:35,120 --> 00:00:37,040
wanted to talk about system tracing

19
00:00:37,040 --> 00:00:40,000
and how important it is for dynamic

20
00:00:40,000 --> 00:00:41,520
image scanning and how we can leverage

21
00:00:41,520 --> 00:00:43,040
that

22
00:00:43,040 --> 00:00:45,760
so to start the discussion i would like

23
00:00:45,760 --> 00:00:46,480
to first

24
00:00:46,480 --> 00:00:49,039
uh discuss what we have today with

25
00:00:49,039 --> 00:00:50,640
container scanning

26
00:00:50,640 --> 00:00:53,520
so i'm going to look at trivia which is

27
00:00:53,520 --> 00:00:54,719
a popular

28
00:00:54,719 --> 00:00:58,079
open source container scanning tool full

29
00:00:58,079 --> 00:00:58,879
disclaimer

30
00:00:58,879 --> 00:01:00,960
it's being built by my team in aqua but

31
00:01:00,960 --> 00:01:03,600
this is just an example for any

32
00:01:03,600 --> 00:01:05,199
container scanning tool most of them

33
00:01:05,199 --> 00:01:06,960
work the same way

34
00:01:06,960 --> 00:01:08,960
so here i'm asking trivi to scan this

35
00:01:08,960 --> 00:01:10,880
image it's drupal image which is a

36
00:01:10,880 --> 00:01:13,119
popular content management system

37
00:01:13,119 --> 00:01:17,439
trivia will discover that this image is

38
00:01:17,439 --> 00:01:20,720
based from alpine and because of that it

39
00:01:20,720 --> 00:01:22,479
will look for alpine packages that were

40
00:01:22,479 --> 00:01:23,439
installed using

41
00:01:23,439 --> 00:01:26,400
apk and then it will understand that

42
00:01:26,400 --> 00:01:27,680
this image was

43
00:01:27,680 --> 00:01:30,240
the software is using php so it will

44
00:01:30,240 --> 00:01:32,240
also look for a composer

45
00:01:32,240 --> 00:01:35,360
um a software installed using composer

46
00:01:35,360 --> 00:01:38,000
and similarly there are some javascript

47
00:01:38,000 --> 00:01:39,280
components in there so

48
00:01:39,280 --> 00:01:41,360
3d will also look at the yarn file that

49
00:01:41,360 --> 00:01:43,119
it found in order to

50
00:01:43,119 --> 00:01:45,840
obtain the list of software uh relating

51
00:01:45,840 --> 00:01:46,960
to javascript

52
00:01:46,960 --> 00:01:48,960
the goal here is to compile a list of

53
00:01:48,960 --> 00:01:50,479
install software within the compo

54
00:01:50,479 --> 00:01:52,320
within the container and most

55
00:01:52,320 --> 00:01:53,520
importantly the

56
00:01:53,520 --> 00:01:56,560
versions because in the next step we're

57
00:01:56,560 --> 00:01:58,240
going to compare this list

58
00:01:58,240 --> 00:01:59,920
with the database of known

59
00:01:59,920 --> 00:02:02,399
vulnerabilities this is the other piece

60
00:02:02,399 --> 00:02:05,040
of any container scanning tool for

61
00:02:05,040 --> 00:02:06,320
trivia because

62
00:02:06,320 --> 00:02:08,560
it's open source and we build the

63
00:02:08,560 --> 00:02:10,000
database itself

64
00:02:10,000 --> 00:02:11,760
in github and we store actually the

65
00:02:11,760 --> 00:02:13,280
database inside of github

66
00:02:13,280 --> 00:02:14,800
it's very easy to go ahead and see what

67
00:02:14,800 --> 00:02:17,760
we're doing there so just for example

68
00:02:17,760 --> 00:02:20,239
we aggregate vulnerability information

69
00:02:20,239 --> 00:02:21,520
from different sources

70
00:02:21,520 --> 00:02:24,879
for example nvd which is a great

71
00:02:24,879 --> 00:02:26,560
comprehensive database of

72
00:02:26,560 --> 00:02:28,640
vulnerabilities

73
00:02:28,640 --> 00:02:31,519
we also consider different advisories

74
00:02:31,519 --> 00:02:32,400
and lists

75
00:02:32,400 --> 00:02:34,879
that publish their own security

76
00:02:34,879 --> 00:02:36,959
advisories and vulnerabilities

77
00:02:36,959 --> 00:02:39,599
we even go as far as looking inside of

78
00:02:39,599 --> 00:02:40,319
the code

79
00:02:40,319 --> 00:02:42,720
of some projects that we are interested

80
00:02:42,720 --> 00:02:44,000
in in this case

81
00:02:44,000 --> 00:02:47,280
you see an example from alpine if

82
00:02:47,280 --> 00:02:50,800
we know that we can parse some security

83
00:02:50,800 --> 00:02:52,959
vulnerabilities from these sources there

84
00:02:52,959 --> 00:02:54,560
are many other different sources that

85
00:02:54,560 --> 00:02:56,560
goes into the tree database

86
00:02:56,560 --> 00:02:59,360
but the result is just a simple database

87
00:02:59,360 --> 00:03:00,720
of

88
00:03:00,720 --> 00:03:04,720
vulnerabilities and the affected

89
00:03:04,720 --> 00:03:07,280
software and then we can go ahead and

90
00:03:07,280 --> 00:03:09,040
cross reference the list

91
00:03:09,040 --> 00:03:11,440
of vulnerabilities with the list of the

92
00:03:11,440 --> 00:03:12,800
software that we found inside of the

93
00:03:12,800 --> 00:03:15,120
container and we see here that law dash

94
00:03:15,120 --> 00:03:18,319
which is a javascript dependency library

95
00:03:18,319 --> 00:03:20,480
has a high severity vulnerability

96
00:03:20,480 --> 00:03:21,599
because of the

97
00:03:21,599 --> 00:03:25,440
417-15 version that we were using

98
00:03:25,440 --> 00:03:27,840
so great this is this is a very useful

99
00:03:27,840 --> 00:03:28,959
thing that any

100
00:03:28,959 --> 00:03:32,400
static image scanning tool can uh

101
00:03:32,400 --> 00:03:34,239
can give us discovering known

102
00:03:34,239 --> 00:03:36,159
vulnerabilities

103
00:03:36,159 --> 00:03:39,040
what else what else can we learn by

104
00:03:39,040 --> 00:03:41,440
statically scanning the image

105
00:03:41,440 --> 00:03:43,560
so another another thing is

106
00:03:43,560 --> 00:03:45,120
misconfigurations

107
00:03:45,120 --> 00:03:47,120
unlike vulnerabilities where

108
00:03:47,120 --> 00:03:49,120
vulnerabilities are basically bugs

109
00:03:49,120 --> 00:03:51,680
in the software in the dependencies that

110
00:03:51,680 --> 00:03:54,319
needs to be fixed upstream

111
00:03:54,319 --> 00:03:56,480
misconfiguration is not about bugs it's

112
00:03:56,480 --> 00:03:58,000
mostly about

113
00:03:58,000 --> 00:04:01,599
improper usage of the software and

114
00:04:01,599 --> 00:04:03,439
if we look out there we see a lot of

115
00:04:03,439 --> 00:04:06,000
examples for misconfigured container

116
00:04:06,000 --> 00:04:06,799
images

117
00:04:06,799 --> 00:04:08,560
that we could have detected just by

118
00:04:08,560 --> 00:04:09,840
scanning the image

119
00:04:09,840 --> 00:04:12,720
for example people using the default

120
00:04:12,720 --> 00:04:14,720
settings for the software

121
00:04:14,720 --> 00:04:18,160
and wasn't adapting it for uh production

122
00:04:18,160 --> 00:04:20,880
people uh leaving a lot of unnecessarily

123
00:04:20,880 --> 00:04:22,000
open ports

124
00:04:22,000 --> 00:04:24,479
uh tls settings which were incorrectly

125
00:04:24,479 --> 00:04:25,280
configured

126
00:04:25,280 --> 00:04:27,919
people even use uh sorry people even

127
00:04:27,919 --> 00:04:28,639
forget

128
00:04:28,639 --> 00:04:31,520
their passwords and the keys inside of

129
00:04:31,520 --> 00:04:33,520
the code inside of the containers

130
00:04:33,520 --> 00:04:36,960
so these are all examples for things

131
00:04:36,960 --> 00:04:39,280
that we could easily have discovered

132
00:04:39,280 --> 00:04:41,919
just by looking at the container image

133
00:04:41,919 --> 00:04:44,400
itself

134
00:04:44,479 --> 00:04:47,680
so vulnerabilities misconfigurations

135
00:04:47,680 --> 00:04:50,960
what else can we understand just by

136
00:04:50,960 --> 00:04:52,479
analyzing the

137
00:04:52,479 --> 00:04:56,080
image at rest so another thing

138
00:04:56,080 --> 00:04:59,199
is a malware we can uh

139
00:04:59,199 --> 00:05:00,800
the container itself is just a bunch of

140
00:05:00,800 --> 00:05:02,720
files right so we can take

141
00:05:02,720 --> 00:05:04,240
any number of files from within the

142
00:05:04,240 --> 00:05:06,560
container and use the traditional

143
00:05:06,560 --> 00:05:07,759
anti-malware

144
00:05:07,759 --> 00:05:11,120
tools in order to identify those

145
00:05:11,120 --> 00:05:13,199
files and see if any of them appears to

146
00:05:13,199 --> 00:05:14,479
be malicious

147
00:05:14,479 --> 00:05:18,080
these are all examples for the benefits

148
00:05:18,080 --> 00:05:20,800
of static image scanning just by looking

149
00:05:20,800 --> 00:05:21,759
at the image

150
00:05:21,759 --> 00:05:25,600
at rest we can learn a lot about

151
00:05:25,600 --> 00:05:29,520
what this container is up to

152
00:05:31,199 --> 00:05:33,199
so what do you think if you're scanning

153
00:05:33,199 --> 00:05:35,520
containers today is this

154
00:05:35,520 --> 00:05:37,680
satisfactory to you do you feel secure

155
00:05:37,680 --> 00:05:38,720
after you

156
00:05:38,720 --> 00:05:42,080
scan your container images so my

157
00:05:42,080 --> 00:05:44,080
my claim here is that you shouldn't be

158
00:05:44,080 --> 00:05:45,360
because there is an

159
00:05:45,360 --> 00:05:48,800
entire category of risks that

160
00:05:48,800 --> 00:05:51,280
simply cannot be detected using static

161
00:05:51,280 --> 00:05:53,680
image scanning

162
00:05:53,680 --> 00:05:57,039
and one example for that

163
00:05:57,039 --> 00:05:59,840
is uh evasive malware that we have

164
00:05:59,840 --> 00:06:01,199
observed in the while

165
00:06:01,199 --> 00:06:04,639
so this is an example for an image

166
00:06:04,639 --> 00:06:07,840
in docker hub that passed

167
00:06:07,840 --> 00:06:09,759
all of the scans it has no known

168
00:06:09,759 --> 00:06:11,759
vulnerabilities no misconfigurations no

169
00:06:11,759 --> 00:06:13,520
known malware

170
00:06:13,520 --> 00:06:16,240
but when you run it you see the entry

171
00:06:16,240 --> 00:06:17,520
point here on the right

172
00:06:17,520 --> 00:06:20,800
there is an encoded base64 encoded

173
00:06:20,800 --> 00:06:23,680
string here that is essentially a

174
00:06:23,680 --> 00:06:24,479
malware

175
00:06:24,479 --> 00:06:27,520
encoded as uh his characters

176
00:06:27,520 --> 00:06:30,800
and only at runtime the script will

177
00:06:30,800 --> 00:06:34,080
uh unpack this and run it

178
00:06:34,080 --> 00:06:37,039
so if you were to scan this script you

179
00:06:37,039 --> 00:06:37,600
know it's

180
00:06:37,600 --> 00:06:39,840
it's a string it's a weird string but

181
00:06:39,840 --> 00:06:41,199
it's not necessarily malicious

182
00:06:41,199 --> 00:06:43,520
not a lot of static scanning tools will

183
00:06:43,520 --> 00:06:45,120
be able to understand what's going on

184
00:06:45,120 --> 00:06:45,840
here

185
00:06:45,840 --> 00:06:47,840
but when you run the image it's very

186
00:06:47,840 --> 00:06:49,199
easy to see

187
00:06:49,199 --> 00:06:53,199
that it is actually executing a malware

188
00:06:53,199 --> 00:06:56,880
and this is not a made up example

189
00:06:56,880 --> 00:06:58,880
our research team has recently uncovered

190
00:06:58,880 --> 00:07:00,800
a big operation

191
00:07:00,800 --> 00:07:04,639
of the group that has used uh and abused

192
00:07:04,639 --> 00:07:06,560
docker hub in order to distribute

193
00:07:06,560 --> 00:07:07,360
malware

194
00:07:07,360 --> 00:07:10,000
in seemingly legitimate containers where

195
00:07:10,000 --> 00:07:12,319
the end goal was to run crypto mining

196
00:07:12,319 --> 00:07:13,039
tools

197
00:07:13,039 --> 00:07:16,960
on your servers um and

198
00:07:16,960 --> 00:07:18,319
my point here you can go ahead and read

199
00:07:18,319 --> 00:07:20,080
the blog post if you want but my point

200
00:07:20,080 --> 00:07:22,080
here is that this is real

201
00:07:22,080 --> 00:07:25,840
this happens and the fact that we are

202
00:07:25,840 --> 00:07:28,000
trusting dockerhub in this case

203
00:07:28,000 --> 00:07:29,360
dockerhub has no

204
00:07:29,360 --> 00:07:32,400
fault here they're just storing files

205
00:07:32,400 --> 00:07:34,720
but the fact that we are trusting the

206
00:07:34,720 --> 00:07:35,520
source

207
00:07:35,520 --> 00:07:38,639
here blindly is an open door

208
00:07:38,639 --> 00:07:41,759
there's a actually an entire category of

209
00:07:41,759 --> 00:07:42,560
uh

210
00:07:42,560 --> 00:07:45,360
of the risks here that is called supply

211
00:07:45,360 --> 00:07:46,879
chain attacks

212
00:07:46,879 --> 00:07:49,680
and this is where uh the hackers will

213
00:07:49,680 --> 00:07:51,680
not even target your

214
00:07:51,680 --> 00:07:53,520
your servers they will not try to hack

215
00:07:53,520 --> 00:07:55,120
you directly

216
00:07:55,120 --> 00:07:57,360
instead they will target your supply

217
00:07:57,360 --> 00:07:59,440
chain that you already trust

218
00:07:59,440 --> 00:08:01,919
think about where you store your source

219
00:08:01,919 --> 00:08:03,840
code today

220
00:08:03,840 --> 00:08:07,440
think about where you build and test

221
00:08:07,440 --> 00:08:10,639
and produce artifacts your cicd pipeline

222
00:08:10,639 --> 00:08:12,400
think about where you store artifacts

223
00:08:12,400 --> 00:08:14,879
today and how you deliver

224
00:08:14,879 --> 00:08:17,280
those artifacts into production each

225
00:08:17,280 --> 00:08:19,440
each and every one of those

226
00:08:19,440 --> 00:08:21,599
chain in the links is a point of

227
00:08:21,599 --> 00:08:22,639
interest to

228
00:08:22,639 --> 00:08:25,039
the attacker because if they compromise

229
00:08:25,039 --> 00:08:26,720
one of them

230
00:08:26,720 --> 00:08:28,879
most likely their malware will be able

231
00:08:28,879 --> 00:08:30,720
to find its way into your servers

232
00:08:30,720 --> 00:08:34,959
because you already trust this pipeline

233
00:08:36,240 --> 00:08:40,080
so to summarize

234
00:08:40,080 --> 00:08:42,799
static image scanning can tell us a lot

235
00:08:42,799 --> 00:08:43,279
about

236
00:08:43,279 --> 00:08:45,120
the container and it's very important to

237
00:08:45,120 --> 00:08:47,040
scan our containers

238
00:08:47,040 --> 00:08:49,600
we learn about the known vulnerabilities

239
00:08:49,600 --> 00:08:51,680
we learn about misconfigurations maybe

240
00:08:51,680 --> 00:08:52,800
and maybe even about

241
00:08:52,800 --> 00:08:56,240
malware inside of the container

242
00:08:56,240 --> 00:08:59,120
but there's also an entire category of

243
00:08:59,120 --> 00:09:00,240
risks

244
00:09:00,240 --> 00:09:03,279
that we were overlooking

245
00:09:03,279 --> 00:09:05,519
we've discussed evasive malware there's

246
00:09:05,519 --> 00:09:07,560
also

247
00:09:07,560 --> 00:09:10,880
unknown vulnerabilities there's also

248
00:09:10,880 --> 00:09:12,480
more sophisticated attacks that are

249
00:09:12,480 --> 00:09:14,640
harder to scan for

250
00:09:14,640 --> 00:09:18,240
my point is that the image itself

251
00:09:18,240 --> 00:09:21,519
at rest can also can only tell us so

252
00:09:21,519 --> 00:09:22,160
much

253
00:09:22,160 --> 00:09:24,240
about what the container will do at

254
00:09:24,240 --> 00:09:25,680
runtime and the best

255
00:09:25,680 --> 00:09:27,440
way to understand what the container

256
00:09:27,440 --> 00:09:28,880
will do at runtime

257
00:09:28,880 --> 00:09:32,959
is to run it and this is where

258
00:09:32,959 --> 00:09:36,160
system tracing also enters the

259
00:09:36,160 --> 00:09:39,360
the picture because

260
00:09:39,360 --> 00:09:41,920
system tracing allows us to understand

261
00:09:41,920 --> 00:09:42,959
what's happening

262
00:09:42,959 --> 00:09:44,560
from the operating system point of view

263
00:09:44,560 --> 00:09:46,080
this is something that

264
00:09:46,080 --> 00:09:48,240
the malware the software that's running

265
00:09:48,240 --> 00:09:49,760
inside of the container

266
00:09:49,760 --> 00:09:54,320
cannot simply evade or escape

267
00:09:54,320 --> 00:09:56,560
so i would like to show you now a quick

268
00:09:56,560 --> 00:09:58,320
demonstration of what it means

269
00:09:58,320 --> 00:10:01,040
to detect a malicious behavior using

270
00:10:01,040 --> 00:10:02,839
system

271
00:10:02,839 --> 00:10:05,839
tracing

272
00:10:06,959 --> 00:10:11,440
all right so we will start

273
00:10:11,440 --> 00:10:16,360
by looking at an example for

274
00:10:16,360 --> 00:10:19,680
a script similar to the one that uh

275
00:10:19,680 --> 00:10:22,959
i showed you in the slides and uh you

276
00:10:22,959 --> 00:10:24,640
see here the the very

277
00:10:24,640 --> 00:10:27,920
long basics before encoded string

278
00:10:27,920 --> 00:10:30,800
and in the end there is a there's a

279
00:10:30,800 --> 00:10:32,079
command to decode

280
00:10:32,079 --> 00:10:34,079
it and to make it an executable and to

281
00:10:34,079 --> 00:10:36,880
execute it and then just as a disguise

282
00:10:36,880 --> 00:10:38,880
show that something something else is

283
00:10:38,880 --> 00:10:40,160
happening

284
00:10:40,160 --> 00:10:43,199
if we run this

285
00:10:43,680 --> 00:10:46,720
this is called evasive script we see

286
00:10:46,720 --> 00:10:47,519
hello world

287
00:10:47,519 --> 00:10:50,240
this is being printed by the malware and

288
00:10:50,240 --> 00:10:51,680
we see i'm good

289
00:10:51,680 --> 00:10:53,530
which is the

290
00:10:53,530 --> 00:10:54,800
[Music]

291
00:10:54,800 --> 00:10:58,959
the disguise of the script

292
00:10:59,200 --> 00:11:01,760
now if the malware didn't uh naturally

293
00:11:01,760 --> 00:11:03,920
print hello world to us how would we

294
00:11:03,920 --> 00:11:04,320
able

295
00:11:04,320 --> 00:11:06,240
how would we be able to understand that

296
00:11:06,240 --> 00:11:07,440
this script had it

297
00:11:07,440 --> 00:11:11,360
hides another executable we could read

298
00:11:11,360 --> 00:11:11,839
it

299
00:11:11,839 --> 00:11:14,079
yeah but if this wasn't a script if this

300
00:11:14,079 --> 00:11:15,040
was

301
00:11:15,040 --> 00:11:18,640
an executable maybe even an obfuscated

302
00:11:18,640 --> 00:11:21,040
executable that's harder to

303
00:11:21,040 --> 00:11:24,160
manually analyze then would be in

304
00:11:24,160 --> 00:11:26,800
some kind of trouble so um this is where

305
00:11:26,800 --> 00:11:27,440
tracing

306
00:11:27,440 --> 00:11:30,800
comes in i'm going to use a very

307
00:11:30,800 --> 00:11:33,200
popular tool that's called s trace this

308
00:11:33,200 --> 00:11:34,320
is uh

309
00:11:34,320 --> 00:11:38,240
a very common linux toolbox kind of tool

310
00:11:38,240 --> 00:11:40,399
uh it allows us to trace system calls

311
00:11:40,399 --> 00:11:43,519
from the operating system point of view

312
00:11:43,519 --> 00:11:47,440
and i'm going to run the the same

313
00:11:47,440 --> 00:11:50,560
uh script except i'm prefixing it with

314
00:11:50,560 --> 00:11:51,440
the command

315
00:11:51,440 --> 00:11:54,160
s trace i also want to tell it exactly

316
00:11:54,160 --> 00:11:55,360
what to trace

317
00:11:55,360 --> 00:11:58,480
so i will say trace

318
00:11:58,480 --> 00:12:01,360
equals exactly e exactly e is the name

319
00:12:01,360 --> 00:12:03,200
of the system called that's being

320
00:12:03,200 --> 00:12:05,120
used to ask the operating system to

321
00:12:05,120 --> 00:12:06,800
execute something

322
00:12:06,800 --> 00:12:10,000
if we do that we see the same

323
00:12:10,000 --> 00:12:12,800
result here hello world and good um in

324
00:12:12,800 --> 00:12:15,200
the output but also we see

325
00:12:15,200 --> 00:12:18,560
all of the exactly ee calls and

326
00:12:18,560 --> 00:12:21,439
we see here that

327
00:12:21,760 --> 00:12:25,360
this file was executed and again this

328
00:12:25,360 --> 00:12:27,440
time it was a script so we know

329
00:12:27,440 --> 00:12:30,160
that it was in there but think about a

330
00:12:30,160 --> 00:12:32,079
different case where this was

331
00:12:32,079 --> 00:12:35,760
a uh a binary where it wasn't so easy to

332
00:12:35,760 --> 00:12:39,839
understand what's going on in there

333
00:12:40,800 --> 00:12:43,279
actually let's take a look at an example

334
00:12:43,279 --> 00:12:44,800
like this

335
00:12:44,800 --> 00:12:49,360
so here i have another example

336
00:12:49,360 --> 00:12:51,279
it's the same hello world application

337
00:12:51,279 --> 00:12:53,519
that was the malware

338
00:12:53,519 --> 00:12:56,000
this time

339
00:12:57,440 --> 00:13:00,480
this is the manual itself this time i am

340
00:13:00,480 --> 00:13:04,839
hiding it within this hello world dot

341
00:13:04,839 --> 00:13:07,200
text

342
00:13:07,200 --> 00:13:09,680
it's it feels similar to this to the

343
00:13:09,680 --> 00:13:11,200
previous example where we

344
00:13:11,200 --> 00:13:14,480
uh we reheat it within a script but this

345
00:13:14,480 --> 00:13:15,200
time

346
00:13:15,200 --> 00:13:18,240
it will not be that easy to discover it

347
00:13:18,240 --> 00:13:20,079
first of all this is a binary

348
00:13:20,079 --> 00:13:23,120
so if we

349
00:13:23,120 --> 00:13:26,399
look at the binary itself yeah

350
00:13:26,399 --> 00:13:29,279
nothing really readable for us here it's

351
00:13:29,279 --> 00:13:30,560
just binary data

352
00:13:30,560 --> 00:13:33,600
this is one thing second of all if we

353
00:13:33,600 --> 00:13:34,000
trace

354
00:13:34,000 --> 00:13:37,360
it using the same x-trace

355
00:13:37,360 --> 00:13:40,480
command and we ask it to

356
00:13:40,480 --> 00:13:43,760
trace exactly

357
00:13:43,760 --> 00:13:47,040
remember that in the previous example

358
00:13:47,040 --> 00:13:50,160
we saw that

359
00:13:50,160 --> 00:13:53,360
the script was started

360
00:13:53,360 --> 00:13:54,959
and then other processes started and

361
00:13:54,959 --> 00:13:57,040
then explicitly

362
00:13:57,040 --> 00:14:01,040
the malware itself had started

363
00:14:01,040 --> 00:14:03,839
and this time

364
00:14:04,079 --> 00:14:06,720
i'm going to see a different result i

365
00:14:06,720 --> 00:14:08,560
only see the execution

366
00:14:08,560 --> 00:14:13,199
of the of the host of the of the

367
00:14:13,199 --> 00:14:16,320
wrapping binary there is no exact ve

368
00:14:16,320 --> 00:14:17,199
malware here

369
00:14:17,199 --> 00:14:19,120
even though we know because we see the

370
00:14:19,120 --> 00:14:22,240
output that hello world

371
00:14:22,240 --> 00:14:26,320
was invoked and this is not hello world

372
00:14:26,399 --> 00:14:29,600
so how can we still detect it

373
00:14:29,600 --> 00:14:33,600
so this is where behavioral

374
00:14:33,600 --> 00:14:36,639
analysis comes into the picture so far

375
00:14:36,639 --> 00:14:37,040
we

376
00:14:37,040 --> 00:14:40,240
we've seen an example for how tracing

377
00:14:40,240 --> 00:14:41,760
can help us understand what's going on

378
00:14:41,760 --> 00:14:42,399
so we can

379
00:14:42,399 --> 00:14:45,040
yeah we can look for exactly e and so on

380
00:14:45,040 --> 00:14:46,399
but in this case we need

381
00:14:46,399 --> 00:14:48,959
something more powerful we need to learn

382
00:14:48,959 --> 00:14:50,880
about the behavioral pattern

383
00:14:50,880 --> 00:14:54,160
of this of this technique and then we

384
00:14:54,160 --> 00:14:54,880
can

385
00:14:54,880 --> 00:14:58,000
detect it so i'm going

386
00:14:58,000 --> 00:15:01,199
to add a few um

387
00:15:01,199 --> 00:15:04,399
events to trace here not only exactly

388
00:15:04,399 --> 00:15:06,240
here i want to look also at

389
00:15:06,240 --> 00:15:10,560
map and and protect

390
00:15:11,120 --> 00:15:13,600
these two system calls are used to

391
00:15:13,600 --> 00:15:14,720
allocate memory

392
00:15:14,720 --> 00:15:17,920
uh manage its uh permissions uh

393
00:15:17,920 --> 00:15:19,360
basically to manage memory for the

394
00:15:19,360 --> 00:15:20,320
process

395
00:15:20,320 --> 00:15:22,560
and i do this because i know that the

396
00:15:22,560 --> 00:15:24,399
packed version

397
00:15:24,399 --> 00:15:27,920
is using um is using

398
00:15:27,920 --> 00:15:29,920
this technique in order to hide the

399
00:15:29,920 --> 00:15:31,279
embedded binary

400
00:15:31,279 --> 00:15:34,079
so this time we see the same exact v of

401
00:15:34,079 --> 00:15:35,839
the hello world that pack this is the

402
00:15:35,839 --> 00:15:37,360
entry point

403
00:15:37,360 --> 00:15:40,160
we still don't see any other exactly e

404
00:15:40,160 --> 00:15:41,279
for the

405
00:15:41,279 --> 00:15:44,240
embedded malware but we do see a

406
00:15:44,240 --> 00:15:45,839
suspicious pattern here

407
00:15:45,839 --> 00:15:47,600
we see that that the process has

408
00:15:47,600 --> 00:15:48,880
allocated

409
00:15:48,880 --> 00:15:52,079
um has allocated a memory region

410
00:15:52,079 --> 00:15:55,759
and it has actually made it executable

411
00:15:55,759 --> 00:15:57,920
as we can see here this is necessary for

412
00:15:57,920 --> 00:15:58,959
it to

413
00:15:58,959 --> 00:16:01,040
execute the binary data that it writes

414
00:16:01,040 --> 00:16:03,199
into this memory region

415
00:16:03,199 --> 00:16:06,480
and if we compare this to the trace

416
00:16:06,480 --> 00:16:10,720
of the regular

417
00:16:10,720 --> 00:16:14,480
hello world we see that it is very very

418
00:16:14,480 --> 00:16:15,839
different

419
00:16:15,839 --> 00:16:18,399
here we see just exactly it and here we

420
00:16:18,399 --> 00:16:19,360
see

421
00:16:19,360 --> 00:16:23,839
a whole load of suspicious activity

422
00:16:24,000 --> 00:16:28,720
okay so this was about how we can

423
00:16:29,120 --> 00:16:32,240
how we can understand

424
00:16:32,240 --> 00:16:34,480
what the software do to our art that we

425
00:16:34,480 --> 00:16:36,000
are running is doing

426
00:16:36,000 --> 00:16:39,519
by observing its behavioral patterns

427
00:16:39,519 --> 00:16:42,800
we have done it manually this time but

428
00:16:42,800 --> 00:16:45,519
soon we will see how we can also use

429
00:16:45,519 --> 00:16:47,519
more sophisticated tools to help us in

430
00:16:47,519 --> 00:16:50,720
this analysis

431
00:16:50,720 --> 00:16:52,720
all right so let's move back to the

432
00:16:52,720 --> 00:16:55,279
slides

433
00:17:01,360 --> 00:17:04,559
okay so we have seen

434
00:17:04,559 --> 00:17:06,959
how we can use system tracing you know

435
00:17:06,959 --> 00:17:08,000
to understand the software that's

436
00:17:08,000 --> 00:17:08,799
running

437
00:17:08,799 --> 00:17:11,520
in the containers uh maybe some of you

438
00:17:11,520 --> 00:17:12,240
think this

439
00:17:12,240 --> 00:17:15,919
sounds familiar maybe it rings a bell uh

440
00:17:15,919 --> 00:17:19,199
we have been using similar techniques

441
00:17:19,199 --> 00:17:22,480
in production to uh

442
00:17:22,480 --> 00:17:24,799
to prevent from certain things to happen

443
00:17:24,799 --> 00:17:25,599
onto alert

444
00:17:25,599 --> 00:17:28,480
this is often called runtime security or

445
00:17:28,480 --> 00:17:30,559
random protection

446
00:17:30,559 --> 00:17:33,280
it's nothing new right uh there's a lot

447
00:17:33,280 --> 00:17:33,679
of

448
00:17:33,679 --> 00:17:35,440
mature solutions in the market for

449
00:17:35,440 --> 00:17:36,799
runtime security

450
00:17:36,799 --> 00:17:38,559
and what it means is that we are going

451
00:17:38,559 --> 00:17:40,400
to monitor everything that happens in

452
00:17:40,400 --> 00:17:41,840
production

453
00:17:41,840 --> 00:17:45,039
we are going to analyze

454
00:17:45,039 --> 00:17:47,280
this stream of events and we are going

455
00:17:47,280 --> 00:17:48,640
to look for suspicious

456
00:17:48,640 --> 00:17:51,440
patterns and if we if we find something

457
00:17:51,440 --> 00:17:53,360
then we were going to alert or we can

458
00:17:53,360 --> 00:17:53,760
even

459
00:17:53,760 --> 00:17:57,440
block it from ever happening um

460
00:17:57,440 --> 00:18:00,000
again this is not new the company that i

461
00:18:00,000 --> 00:18:00,640
work for

462
00:18:00,640 --> 00:18:02,000
is one of the leading vendors in this

463
00:18:02,000 --> 00:18:04,640
space so

464
00:18:04,640 --> 00:18:06,720
there's there's a mature market for

465
00:18:06,720 --> 00:18:09,440
these kind of solutions

466
00:18:09,440 --> 00:18:12,640
but my argument here is that if we are

467
00:18:12,640 --> 00:18:14,160
dealing with malware and trying to

468
00:18:14,160 --> 00:18:14,960
assess

469
00:18:14,960 --> 00:18:19,039
the containers won't be won't it be

470
00:18:19,039 --> 00:18:20,880
even better to make this assessment

471
00:18:20,880 --> 00:18:23,200
earlier in the pipeline why are we

472
00:18:23,200 --> 00:18:24,960
waiting for the containers to be running

473
00:18:24,960 --> 00:18:26,320
in production in order to

474
00:18:26,320 --> 00:18:29,360
observe their behavior in other words

475
00:18:29,360 --> 00:18:31,440
what i'm saying here is

476
00:18:31,440 --> 00:18:35,120
let's shift left and use the

477
00:18:35,120 --> 00:18:37,760
the same techniques or technology that

478
00:18:37,760 --> 00:18:40,559
we have been using for random security

479
00:18:40,559 --> 00:18:44,000
but use it earlier in the pipeline

480
00:18:44,000 --> 00:18:45,919
when we build the container where we

481
00:18:45,919 --> 00:18:48,080
test it and so on

482
00:18:48,080 --> 00:18:51,200
now this is not simply taking the same

483
00:18:51,200 --> 00:18:52,799
product and running it in a different

484
00:18:52,799 --> 00:18:53,840
place

485
00:18:53,840 --> 00:18:56,000
because there are different constraints

486
00:18:56,000 --> 00:18:58,320
here we can actually tailor the product

487
00:18:58,320 --> 00:18:59,679
to fit

488
00:18:59,679 --> 00:19:03,679
the to fit its new place in the pipeline

489
00:19:03,679 --> 00:19:07,520
in the in the pre-production environment

490
00:19:07,520 --> 00:19:08,720
and this is what we call dynamic

491
00:19:08,720 --> 00:19:12,160
scanning so this solution will now

492
00:19:12,160 --> 00:19:14,559
also run the containers inside of an

493
00:19:14,559 --> 00:19:15,760
ephemera sandbox

494
00:19:15,760 --> 00:19:17,520
right because we are not running the

495
00:19:17,520 --> 00:19:19,440
containers in production anymore we need

496
00:19:19,440 --> 00:19:21,039
to run them somewhere else

497
00:19:21,039 --> 00:19:24,400
and these are untrusted software so

498
00:19:24,400 --> 00:19:26,480
in ephemeral sandbox sound like good

499
00:19:26,480 --> 00:19:27,919
solution

500
00:19:27,919 --> 00:19:29,760
we can also use more comprehensive

501
00:19:29,760 --> 00:19:30,960
tracing

502
00:19:30,960 --> 00:19:33,679
when we do it in this stage i will

503
00:19:33,679 --> 00:19:34,480
explain

504
00:19:34,480 --> 00:19:36,880
this point very soon and we can also

505
00:19:36,880 --> 00:19:38,160
automate

506
00:19:38,160 --> 00:19:41,600
this into into a

507
00:19:41,600 --> 00:19:43,440
a solution that we can integrate into

508
00:19:43,440 --> 00:19:44,799
existing processes

509
00:19:44,799 --> 00:19:46,640
think that uh whenever you do a pull

510
00:19:46,640 --> 00:19:48,880
request you can now

511
00:19:48,880 --> 00:19:50,960
spin up in ephemeral sandbox run the

512
00:19:50,960 --> 00:19:52,240
container in there

513
00:19:52,240 --> 00:19:54,480
it is heavily heavily instrumented and

514
00:19:54,480 --> 00:19:56,720
you have all of the same heuristics that

515
00:19:56,720 --> 00:19:57,520
you've used for

516
00:19:57,520 --> 00:20:00,240
random security but even more uh this

517
00:20:00,240 --> 00:20:01,280
time

518
00:20:01,280 --> 00:20:03,919
and you are able to flag this container

519
00:20:03,919 --> 00:20:06,400
as suspicious or safe

520
00:20:06,400 --> 00:20:08,240
before it reaches production actually

521
00:20:08,240 --> 00:20:09,520
before it reaches

522
00:20:09,520 --> 00:20:12,559
even your container registry

523
00:20:12,559 --> 00:20:14,720
and i want to emphasize the fact that

524
00:20:14,720 --> 00:20:15,840
this is not

525
00:20:15,840 --> 00:20:17,840
the same as runtime security because it

526
00:20:17,840 --> 00:20:19,679
is quite similar

527
00:20:19,679 --> 00:20:22,559
but not the same there are different

528
00:20:22,559 --> 00:20:23,679
constraints here

529
00:20:23,679 --> 00:20:26,799
and we need to even leverage

530
00:20:26,799 --> 00:20:28,159
these different contract different

531
00:20:28,159 --> 00:20:30,320
constraints in order to build

532
00:20:30,320 --> 00:20:32,960
a solution that is tailored for this new

533
00:20:32,960 --> 00:20:34,080
place

534
00:20:34,080 --> 00:20:37,520
in random security in production

535
00:20:37,520 --> 00:20:39,520
we always aspire to minimize the

536
00:20:39,520 --> 00:20:41,200
overhead

537
00:20:41,200 --> 00:20:44,799
of everything that that we add there

538
00:20:44,799 --> 00:20:47,919
but in dynamic scanning there is not

539
00:20:47,919 --> 00:20:50,000
there's no such requirement these are

540
00:20:50,000 --> 00:20:52,559
ad hoc environments that we spin up just

541
00:20:52,559 --> 00:20:53,600
for the sake of uh

542
00:20:53,600 --> 00:20:56,159
testing the containers we can turn on

543
00:20:56,159 --> 00:20:58,880
the verbosity to the maximum

544
00:20:58,880 --> 00:21:01,360
we don't really care we can even collect

545
00:21:01,360 --> 00:21:02,320
more

546
00:21:02,320 --> 00:21:04,640
kinds of information for example we can

547
00:21:04,640 --> 00:21:05,919
run a tcp dump

548
00:21:05,919 --> 00:21:08,880
while we're at it why not we can collect

549
00:21:08,880 --> 00:21:10,559
a lot more information

550
00:21:10,559 --> 00:21:14,320
in higher fidelity and the more data we

551
00:21:14,320 --> 00:21:16,240
have the better decisions we can make

552
00:21:16,240 --> 00:21:19,600
and so this is just one example for uh

553
00:21:19,600 --> 00:21:21,200
why the constraints are different and

554
00:21:21,200 --> 00:21:23,520
why the the resulting product

555
00:21:23,520 --> 00:21:26,000
might look different another example is

556
00:21:26,000 --> 00:21:27,919
that in production we have to make

557
00:21:27,919 --> 00:21:30,799
quick decisions this makes sense right

558
00:21:30,799 --> 00:21:31,840
because

559
00:21:31,840 --> 00:21:34,080
the runtime protection solution is in

560
00:21:34,080 --> 00:21:36,159
the critical path

561
00:21:36,159 --> 00:21:39,840
we don't want to delay uh too much

562
00:21:39,840 --> 00:21:42,960
the the decision-making process but with

563
00:21:42,960 --> 00:21:44,480
dynamic scanning

564
00:21:44,480 --> 00:21:46,240
we don't have this con this constraints

565
00:21:46,240 --> 00:21:48,400
we can take as long as we need to

566
00:21:48,400 --> 00:21:51,760
in order to make decisions we can use

567
00:21:51,760 --> 00:21:54,640
uh more complicated algorithms to to

568
00:21:54,640 --> 00:21:56,240
test or to make the decisions we can

569
00:21:56,240 --> 00:21:58,720
even defer the decisions

570
00:21:58,720 --> 00:22:01,840
so we can see that if something

571
00:22:01,840 --> 00:22:03,760
specific happens we can flag this

572
00:22:03,760 --> 00:22:05,039
container for

573
00:22:05,039 --> 00:22:07,120
someone else some security researcher to

574
00:22:07,120 --> 00:22:08,400
take a deeper look at

575
00:22:08,400 --> 00:22:10,720
later on this is a privilege that we

576
00:22:10,720 --> 00:22:11,440
have with

577
00:22:11,440 --> 00:22:13,520
dynamic scanning and we don't have this

578
00:22:13,520 --> 00:22:15,120
with front-end security

579
00:22:15,120 --> 00:22:17,520
another example for the differences is

580
00:22:17,520 --> 00:22:19,280
that in production

581
00:22:19,280 --> 00:22:22,400
the stakes are much much higher

582
00:22:22,400 --> 00:22:25,360
everything is high impact but with

583
00:22:25,360 --> 00:22:27,200
dynamic scanning

584
00:22:27,200 --> 00:22:30,240
this is a fake environment it's not real

585
00:22:30,240 --> 00:22:34,640
uh customer data so we can actually let

586
00:22:34,640 --> 00:22:37,200
the malware run to completion and do

587
00:22:37,200 --> 00:22:38,400
what it wanted to do

588
00:22:38,400 --> 00:22:40,799
maybe we will learn something about it

589
00:22:40,799 --> 00:22:41,760
that we

590
00:22:41,760 --> 00:22:44,559
that we couldn't have because we had to

591
00:22:44,559 --> 00:22:45,440
stop it short

592
00:22:45,440 --> 00:22:48,559
in production so my point here is just

593
00:22:48,559 --> 00:22:52,080
to explain why dynamic scanning

594
00:22:52,080 --> 00:22:55,280
is not runtime security yes it is using

595
00:22:55,280 --> 00:22:56,240
system tracing

596
00:22:56,240 --> 00:22:59,840
it is using even similar terminology or

597
00:22:59,840 --> 00:23:02,480
technologies but because the constraints

598
00:23:02,480 --> 00:23:03,520
are different

599
00:23:03,520 --> 00:23:05,840
we can build two different products that

600
00:23:05,840 --> 00:23:06,840
each one of them

601
00:23:06,840 --> 00:23:10,000
leverages the uh the constraints to its

602
00:23:10,000 --> 00:23:10,480
own

603
00:23:10,480 --> 00:23:12,880
benefit

604
00:23:15,280 --> 00:23:17,679
all right so now i want to explain what

605
00:23:17,679 --> 00:23:18,640
i meant earlier

606
00:23:18,640 --> 00:23:22,159
when i said advanced tracing so in the

607
00:23:22,159 --> 00:23:23,679
demo that we saw earlier

608
00:23:23,679 --> 00:23:26,960
i used s trace a very popular and very

609
00:23:26,960 --> 00:23:30,080
effective tool to trace

610
00:23:30,080 --> 00:23:34,159
the system calls that a process makes

611
00:23:34,159 --> 00:23:36,960
but we cannot speak about system tracing

612
00:23:36,960 --> 00:23:37,840
today

613
00:23:37,840 --> 00:23:41,520
without mentioning ebpf and this is not

614
00:23:41,520 --> 00:23:43,840
going to be an introduction to ebpf

615
00:23:43,840 --> 00:23:44,720
there are other

616
00:23:44,720 --> 00:23:47,919
uh sessions that cover that but

617
00:23:47,919 --> 00:23:51,360
i think the tbpf is such a

618
00:23:51,360 --> 00:23:54,640
an impactful and critical component

619
00:23:54,640 --> 00:23:57,760
that affects system tracing today

620
00:23:57,760 --> 00:24:01,120
that we need to mention it so

621
00:24:01,120 --> 00:24:03,440
ebpf is just a subsystem in the linux

622
00:24:03,440 --> 00:24:05,440
kernel that allows you to run your own

623
00:24:05,440 --> 00:24:06,000
code

624
00:24:06,000 --> 00:24:09,200
within the linux canon and

625
00:24:09,200 --> 00:24:10,640
this is very unique because if you

626
00:24:10,640 --> 00:24:12,400
wanted to do something similar to that

627
00:24:12,400 --> 00:24:15,919
before ebpf you had to

628
00:24:15,919 --> 00:24:19,039
maybe build a kernel module and load it

629
00:24:19,039 --> 00:24:21,120
so that means that the code that you

630
00:24:21,120 --> 00:24:23,039
write this kernel model

631
00:24:23,039 --> 00:24:27,039
is essentially at the same level as the

632
00:24:27,039 --> 00:24:27,919
kernel

633
00:24:27,919 --> 00:24:29,760
it has the same privileges it has the

634
00:24:29,760 --> 00:24:31,120
same

635
00:24:31,120 --> 00:24:33,679
blast radius and when we talk about

636
00:24:33,679 --> 00:24:35,840
security products

637
00:24:35,840 --> 00:24:39,679
it is um not so easy to convince

638
00:24:39,679 --> 00:24:42,720
a security-minded customer to run

639
00:24:42,720 --> 00:24:45,279
some arbitrary kernel module and

640
00:24:45,279 --> 00:24:46,960
basically load it into their production

641
00:24:46,960 --> 00:24:47,840
environment

642
00:24:47,840 --> 00:24:49,520
which means that it can do everything

643
00:24:49,520 --> 00:24:51,440
that it wants to do

644
00:24:51,440 --> 00:24:53,520
ebpf allows us to load our programs into

645
00:24:53,520 --> 00:24:55,760
the kernel in a safe way in an isolated

646
00:24:55,760 --> 00:24:56,480
way

647
00:24:56,480 --> 00:25:00,159
so that means that the the risk is lower

648
00:25:00,159 --> 00:25:02,640
and it also has a lot of different kinds

649
00:25:02,640 --> 00:25:03,840
of integrations

650
00:25:03,840 --> 00:25:06,880
one of them is tracing so we can do

651
00:25:06,880 --> 00:25:08,159
everything that we wanted to do with

652
00:25:08,159 --> 00:25:08,799
tracing

653
00:25:08,799 --> 00:25:10,400
even more than asteroids and i'm going

654
00:25:10,400 --> 00:25:12,400
to show it

655
00:25:12,400 --> 00:25:15,760
very soon in a safe way in a more

656
00:25:15,760 --> 00:25:16,640
performant in

657
00:25:16,640 --> 00:25:18,960
in a more performant way and this is

658
00:25:18,960 --> 00:25:19,840
really why the

659
00:25:19,840 --> 00:25:23,120
ebpf is so important today uh by the way

660
00:25:23,120 --> 00:25:24,640
the name edpf

661
00:25:24,640 --> 00:25:28,240
um doesn't really make sense today uh

662
00:25:28,240 --> 00:25:31,360
it carries a lot of uh legacy with it

663
00:25:31,360 --> 00:25:34,799
it originated as a packet filter utility

664
00:25:34,799 --> 00:25:35,120
to

665
00:25:35,120 --> 00:25:37,360
to filter the packets in the kernel and

666
00:25:37,360 --> 00:25:38,159
then

667
00:25:38,159 --> 00:25:41,039
it was related to berkeley's uh bsd and

668
00:25:41,039 --> 00:25:42,159
then it was extended

669
00:25:42,159 --> 00:25:45,600
to to do more than this

670
00:25:45,600 --> 00:25:46,960
this is why it's called extended

671
00:25:46,960 --> 00:25:49,200
extended berkeley packet filter

672
00:25:49,200 --> 00:25:52,640
ebpf not a lot of uh

673
00:25:52,640 --> 00:25:54,799
not not a very meaningful name today but

674
00:25:54,799 --> 00:25:56,400
still this is the name and the

675
00:25:56,400 --> 00:25:58,480
technology itself is amazing

676
00:25:58,480 --> 00:26:01,279
um so in a high level what it means is

677
00:26:01,279 --> 00:26:01,679
that

678
00:26:01,679 --> 00:26:03,039
the application is going to run

679
00:26:03,039 --> 00:26:05,120
somewhere on the stack in user space

680
00:26:05,120 --> 00:26:07,520
in a container it's going it's going to

681
00:26:07,520 --> 00:26:08,960
make a system call at some point or

682
00:26:08,960 --> 00:26:10,480
another because

683
00:26:10,480 --> 00:26:13,120
every resource that it needs to work

684
00:26:13,120 --> 00:26:14,240
with

685
00:26:14,240 --> 00:26:18,240
a network called if right into a file

686
00:26:18,240 --> 00:26:20,240
everything has to go through the

687
00:26:20,240 --> 00:26:21,760
operating system

688
00:26:21,760 --> 00:26:24,480
and this is where we're at because we

689
00:26:24,480 --> 00:26:25,760
have injected

690
00:26:25,760 --> 00:26:28,559
our ebpf probes into the kernel we will

691
00:26:28,559 --> 00:26:29,760
be waiting there

692
00:26:29,760 --> 00:26:33,600
and intercepting those requests from the

693
00:26:33,600 --> 00:26:34,720
applications

694
00:26:34,720 --> 00:26:37,120
and at this point of interception we can

695
00:26:37,120 --> 00:26:40,240
do a lot of interesting things

696
00:26:40,240 --> 00:26:44,240
so this is a very very high level

697
00:26:44,240 --> 00:26:47,520
explanation of what ebpf means for us

698
00:26:47,520 --> 00:26:49,840
and this is what we are using for our

699
00:26:49,840 --> 00:26:50,799
container

700
00:26:50,799 --> 00:26:54,000
scanning tool we've actually took this

701
00:26:54,000 --> 00:26:55,840
work and open source it

702
00:26:55,840 --> 00:26:59,360
and we have a project on github

703
00:26:59,360 --> 00:27:02,690
that is called tracy and

704
00:27:02,690 --> 00:27:03,760
[Music]

705
00:27:03,760 --> 00:27:07,600
this is basically the engine

706
00:27:07,600 --> 00:27:10,559
behind our commercial offering container

707
00:27:10,559 --> 00:27:11,840
scanning tools

708
00:27:11,840 --> 00:27:14,799
so it is completely open source under a

709
00:27:14,799 --> 00:27:17,440
permissive license apache 2.

710
00:27:17,440 --> 00:27:20,880
we have external contributors and

711
00:27:20,880 --> 00:27:23,520
it is uh it is very interesting uh

712
00:27:23,520 --> 00:27:24,640
project for you to

713
00:27:24,640 --> 00:27:27,360
look at if you are interested in ebtf or

714
00:27:27,360 --> 00:27:28,799
system tracing

715
00:27:28,799 --> 00:27:31,120
what's special about this project

716
00:27:31,120 --> 00:27:32,399
besides the fact that

717
00:27:32,399 --> 00:27:34,720
it provides similar functionality to s

718
00:27:34,720 --> 00:27:35,840
trace

719
00:27:35,840 --> 00:27:38,960
but it is safer and a lot more

720
00:27:38,960 --> 00:27:39,760
performant

721
00:27:39,760 --> 00:27:43,039
by the way what's interesting about it

722
00:27:43,039 --> 00:27:43,520
is that

723
00:27:43,520 --> 00:27:46,840
it it was built for security so when we

724
00:27:46,840 --> 00:27:49,039
instrument

725
00:27:49,039 --> 00:27:52,559
a function in the kernel we can not only

726
00:27:52,559 --> 00:27:55,840
uh report it like asterisk does

727
00:27:55,840 --> 00:27:58,799
we can we can do a lot of more

728
00:27:58,799 --> 00:28:00,080
interesting things with it that i'm

729
00:28:00,080 --> 00:28:02,480
going to show in a second

730
00:28:02,480 --> 00:28:04,399
and we can also trace other things

731
00:28:04,399 --> 00:28:06,480
besides system cost this is

732
00:28:06,480 --> 00:28:09,360
something very unique we can also

733
00:28:09,360 --> 00:28:10,880
instrument

734
00:28:10,880 --> 00:28:13,200
just arbitrary functions within the

735
00:28:13,200 --> 00:28:14,000
kernel

736
00:28:14,000 --> 00:28:16,480
that we're interested in and this

737
00:28:16,480 --> 00:28:18,320
produces

738
00:28:18,320 --> 00:28:21,360
a much higher quality of data for us to

739
00:28:21,360 --> 00:28:24,960
analyze in order to detect behavioral

740
00:28:24,960 --> 00:28:27,360
patterns

741
00:28:28,799 --> 00:28:32,559
all right so what we're going to do now

742
00:28:32,559 --> 00:28:35,440
is to take a look at tracy and see how

743
00:28:35,440 --> 00:28:36,960
it can help us

744
00:28:36,960 --> 00:28:39,679
solve a few issues some of them we have

745
00:28:39,679 --> 00:28:42,840
already started to discuss

746
00:28:42,840 --> 00:28:45,840
previously

747
00:28:51,120 --> 00:28:53,439
right

748
00:28:56,960 --> 00:29:00,000
so you remember that packed binary that

749
00:29:00,000 --> 00:29:01,760
we have

750
00:29:01,760 --> 00:29:04,799
looked at previously using s trace

751
00:29:04,799 --> 00:29:06,960
we were able to manually detect that it

752
00:29:06,960 --> 00:29:09,279
was using stress i want to first of all

753
00:29:09,279 --> 00:29:12,559
show you how it is done using tracy so

754
00:29:12,559 --> 00:29:17,039
i'm going to run tracy

755
00:29:18,000 --> 00:29:27,840
let's do this

756
00:29:30,399 --> 00:29:33,039
all right so this is tracy and there's a

757
00:29:33,039 --> 00:29:34,399
lot of options here i'm not going to

758
00:29:34,399 --> 00:29:35,360
cover them all

759
00:29:35,360 --> 00:29:37,600
i'm just at this point trying to reach

760
00:29:37,600 --> 00:29:40,240
the same result as we have

761
00:29:40,240 --> 00:29:42,399
done with s trace so i'm telling it to

762
00:29:42,399 --> 00:29:43,440
trace exact

763
00:29:43,440 --> 00:29:46,559
to the e i'm telling it to trace

764
00:29:46,559 --> 00:29:52,000
emma and i'm telling you to trace

765
00:29:52,000 --> 00:29:55,600
and protect right

766
00:29:55,600 --> 00:29:59,120
and i'm also going to prepare

767
00:29:59,120 --> 00:30:03,279
to run my hello world

768
00:30:03,279 --> 00:30:06,320
the pact version let's

769
00:30:06,320 --> 00:30:10,480
start tracy is now registering the

770
00:30:10,480 --> 00:30:14,320
the ebtf probes and we can now run

771
00:30:14,320 --> 00:30:16,960
the binary and we see a very similar

772
00:30:16,960 --> 00:30:18,000
output to what we

773
00:30:18,000 --> 00:30:22,080
have seen before we see exactly

774
00:30:22,080 --> 00:30:25,120
for the entry point we see the m-up and

775
00:30:25,120 --> 00:30:27,760
then protect

776
00:30:28,799 --> 00:30:31,760
system calls we see that the arguments

777
00:30:31,760 --> 00:30:32,559
to these calls

778
00:30:32,559 --> 00:30:35,200
in this case that someone requested a

779
00:30:35,200 --> 00:30:37,600
executable memory region

780
00:30:37,600 --> 00:30:40,960
so far pretty similar to space

781
00:30:40,960 --> 00:30:43,440
now i'm going to do the same but to turn

782
00:30:43,440 --> 00:30:44,559
on this

783
00:30:44,559 --> 00:30:46,720
very interesting flag that's called

784
00:30:46,720 --> 00:30:48,840
security

785
00:30:48,840 --> 00:30:53,600
events security events

786
00:30:56,159 --> 00:30:59,919
and oh sorry

787
00:30:59,919 --> 00:31:02,840
how did i miss you security alerts my

788
00:31:02,840 --> 00:31:04,880
dad

789
00:31:04,880 --> 00:31:06,720
i'm going to run the same packed

790
00:31:06,720 --> 00:31:08,000
executable

791
00:31:08,000 --> 00:31:12,159
and this time almost the same output

792
00:31:12,159 --> 00:31:15,600
but this time you can see here that

793
00:31:15,600 --> 00:31:19,440
we have a new kind of alerts here

794
00:31:19,440 --> 00:31:22,559
mem prot alert and this is basically

795
00:31:22,559 --> 00:31:23,200
tracy

796
00:31:23,200 --> 00:31:26,080
telling us hey we've noticed that the

797
00:31:26,080 --> 00:31:26,799
protection

798
00:31:26,799 --> 00:31:28,480
of this memory region has changed to

799
00:31:28,480 --> 00:31:30,880
executable this is a notable

800
00:31:30,880 --> 00:31:34,480
um event this is not raw data this was

801
00:31:34,480 --> 00:31:36,240
not collected from the operating system

802
00:31:36,240 --> 00:31:37,840
this is security insight

803
00:31:37,840 --> 00:31:40,559
that tracy is adding on top of the raw

804
00:31:40,559 --> 00:31:41,600
data

805
00:31:41,600 --> 00:31:43,519
eventually you can see here a state

806
00:31:43,519 --> 00:31:45,519
machine that is tracking the

807
00:31:45,519 --> 00:31:48,480
behavioral pattern and it results in

808
00:31:48,480 --> 00:31:49,200
this

809
00:31:49,200 --> 00:31:52,159
final alert that protection change to

810
00:31:52,159 --> 00:31:54,720
executable which is

811
00:31:54,720 --> 00:31:57,600
a trigger point that you can react to so

812
00:31:57,600 --> 00:31:59,840
this is very cool tracy is not only

813
00:31:59,840 --> 00:32:01,840
surfacing raw data

814
00:32:01,840 --> 00:32:05,440
it is actually producing security

815
00:32:05,440 --> 00:32:06,559
insights

816
00:32:06,559 --> 00:32:08,480
but you know tracy can do something even

817
00:32:08,480 --> 00:32:11,039
better it can actually collect

818
00:32:11,039 --> 00:32:14,799
the evidence for the security incident

819
00:32:14,799 --> 00:32:17,440
in this case the embedded binary that

820
00:32:17,440 --> 00:32:19,200
was run from memory

821
00:32:19,200 --> 00:32:22,320
it can actually capture this memory

822
00:32:22,320 --> 00:32:25,760
uh region into a file that you can later

823
00:32:25,760 --> 00:32:28,960
go on and investigate this is super cool

824
00:32:28,960 --> 00:32:30,559
so i'm going to run the same

825
00:32:30,559 --> 00:32:33,679
i will tell tracy to capture

826
00:32:33,679 --> 00:32:36,320
uh memory files and i'm going to tell it

827
00:32:36,320 --> 00:32:36,720
to

828
00:32:36,720 --> 00:32:39,120
clear the output directory before he

829
00:32:39,120 --> 00:32:40,399
does that

830
00:32:40,399 --> 00:32:43,519
so run this again

831
00:32:43,519 --> 00:32:47,279
and run the back version again

832
00:32:47,279 --> 00:32:50,159
almost the same output except this time

833
00:32:50,159 --> 00:32:51,760
where we see the

834
00:32:51,760 --> 00:32:55,039
this uh alert from tracy we also see

835
00:32:55,039 --> 00:32:57,360
that saving data to

836
00:32:57,360 --> 00:33:00,640
this file this is the addition

837
00:33:00,640 --> 00:33:04,240
and we can take a look at this file here

838
00:33:04,240 --> 00:33:07,200
uh if we look at

839
00:33:07,519 --> 00:33:09,360
temp tracy this is by default the output

840
00:33:09,360 --> 00:33:11,200
directory where tracy saves

841
00:33:11,200 --> 00:33:14,320
stuff we can see that

842
00:33:14,320 --> 00:33:17,360
we have this same file here and this

843
00:33:17,360 --> 00:33:20,320
file the contents of this file this is

844
00:33:20,320 --> 00:33:23,279
not a memory dump this is not the entire

845
00:33:23,279 --> 00:33:26,080
16 gigabyte of memory this is the

846
00:33:26,080 --> 00:33:26,880
precise

847
00:33:26,880 --> 00:33:30,480
memory region that triggered

848
00:33:30,480 --> 00:33:34,159
this alert so if we take a look

849
00:33:34,159 --> 00:33:39,840
inside of this file

850
00:33:41,519 --> 00:33:44,320
so it's under this directory this is the

851
00:33:44,320 --> 00:33:45,760
name

852
00:33:45,760 --> 00:33:47,360
so this is the binary data it's not

853
00:33:47,360 --> 00:33:49,600
readable for us but this is the same

854
00:33:49,600 --> 00:33:53,039
binary data that you would find if you

855
00:33:53,039 --> 00:33:54,880
if you were to take a look at the

856
00:33:54,880 --> 00:33:56,320
original

857
00:33:56,320 --> 00:34:00,000
embedded binary which is

858
00:34:00,000 --> 00:34:03,760
the hello world binary it's basically

859
00:34:03,760 --> 00:34:06,720
the same binary data and you can take

860
00:34:06,720 --> 00:34:07,200
this

861
00:34:07,200 --> 00:34:10,800
evidence and analyze it investigate it

862
00:34:10,800 --> 00:34:14,399
and so on all right so some very cool

863
00:34:14,399 --> 00:34:15,760
stuff here

864
00:34:15,760 --> 00:34:19,599
with tracy and by the way this is what i

865
00:34:19,599 --> 00:34:21,520
meant earlier when i said

866
00:34:21,520 --> 00:34:25,679
how um ebpf is such a game changer

867
00:34:25,679 --> 00:34:27,839
for us or for anyone who is doing uh

868
00:34:27,839 --> 00:34:29,359
system tracing today

869
00:34:29,359 --> 00:34:32,399
because this is actually running our own

870
00:34:32,399 --> 00:34:33,520
programs

871
00:34:33,520 --> 00:34:35,679
in the kernel at the point of

872
00:34:35,679 --> 00:34:37,359
interception we can do

873
00:34:37,359 --> 00:34:40,639
all of this very cool stuff we can track

874
00:34:40,639 --> 00:34:42,079
this state machine

875
00:34:42,079 --> 00:34:44,800
of uh of behavioral pattern within the

876
00:34:44,800 --> 00:34:45,280
kernel

877
00:34:45,280 --> 00:34:49,679
we can copy bits of information

878
00:34:49,679 --> 00:34:53,280
uh into the um into the user space just

879
00:34:53,280 --> 00:34:53,599
to

880
00:34:53,599 --> 00:34:55,918
save it aside we can do a lot of other

881
00:34:55,918 --> 00:34:57,520
cool stuff

882
00:34:57,520 --> 00:35:00,400
and uh we actually have a lot of

883
00:35:00,400 --> 00:35:01,680
interesting things

884
00:35:01,680 --> 00:35:04,560
for anyone who is interested in system

885
00:35:04,560 --> 00:35:05,440
tracing

886
00:35:05,440 --> 00:35:08,800
we've seen the a capture option with the

887
00:35:08,800 --> 00:35:10,400
mem

888
00:35:10,400 --> 00:35:12,480
option but we have like capturing of

889
00:35:12,480 --> 00:35:13,839
executed files

890
00:35:13,839 --> 00:35:16,400
capturing of written files we have the

891
00:35:16,400 --> 00:35:18,560
security alerts that we discussed

892
00:35:18,560 --> 00:35:21,599
we have events which are not only system

893
00:35:21,599 --> 00:35:22,720
calls we also

894
00:35:22,720 --> 00:35:24,800
support tracing arbitrary kernel

895
00:35:24,800 --> 00:35:25,839
functions

896
00:35:25,839 --> 00:35:29,440
we have container tracing specifically

897
00:35:29,440 --> 00:35:32,560
so a lot of uh very interesting

898
00:35:32,560 --> 00:35:34,160
capabilities here

899
00:35:34,160 --> 00:35:37,160
for a system tracing tool that is

900
00:35:37,160 --> 00:35:39,599
security-minded

901
00:35:39,599 --> 00:35:43,280
and tracy is built in the open

902
00:35:43,280 --> 00:35:45,680
and we welcome you to participate and

903
00:35:45,680 --> 00:35:48,480
tell us what you think

904
00:35:48,560 --> 00:35:50,720
and and tracy i remind you is the engine

905
00:35:50,720 --> 00:35:52,160
for our dynamic scanning

906
00:35:52,160 --> 00:35:54,960
solution and this session was about

907
00:35:54,960 --> 00:35:55,760
dynamic

908
00:35:55,760 --> 00:35:59,200
scanning of containers so i hope

909
00:35:59,200 --> 00:36:03,280
now maybe it all starting to

910
00:36:03,280 --> 00:36:08,320
tie together for you how static scanning

911
00:36:08,320 --> 00:36:11,200
relates to dynamic scanning which

912
00:36:11,200 --> 00:36:13,280
relates to runtime security

913
00:36:13,280 --> 00:36:17,119
and how system tracing is enabling

914
00:36:17,119 --> 00:36:20,160
this dynamic scanning technology i think

915
00:36:20,160 --> 00:36:22,560
one of my goals here today was to

916
00:36:22,560 --> 00:36:23,839
explain why

917
00:36:23,839 --> 00:36:27,200
dynamic scanning is

918
00:36:27,200 --> 00:36:30,320
distinct from static scanning and from

919
00:36:30,320 --> 00:36:31,520
runtime security

920
00:36:31,520 --> 00:36:34,880
even though it draws similar

921
00:36:34,880 --> 00:36:36,560
characteristics in some ways

922
00:36:36,560 --> 00:36:38,839
similar technology to random security or

923
00:36:38,839 --> 00:36:40,000
similar

924
00:36:40,000 --> 00:36:43,119
requirements such as static scanning

925
00:36:43,119 --> 00:36:47,520
but still it is a piece of its own

926
00:36:47,520 --> 00:36:50,640
and i hope that you find this

927
00:36:50,640 --> 00:36:54,480
idea interesting if you do then

928
00:36:54,480 --> 00:36:56,160
you can start to explore dynamic

929
00:36:56,160 --> 00:36:59,440
scanning of your images as well

930
00:37:01,280 --> 00:37:03,680
so thank you everyone this has been

931
00:37:03,680 --> 00:37:05,200
great fun

932
00:37:05,200 --> 00:37:07,920
i think we have a few more minutes for

933
00:37:07,920 --> 00:37:08,480
questions

934
00:37:08,480 --> 00:37:10,800
if you don't make it this time you can

935
00:37:10,800 --> 00:37:11,760
reach out to me

936
00:37:11,760 --> 00:37:15,200
personally over at twitter i'm at itaisk

937
00:37:15,200 --> 00:37:18,720
and i wish you a

938
00:37:18,720 --> 00:37:23,200
truthful rest of the conference

