1
00:00:00,080 --> 00:00:02,159
why openid connect is more secure than

2
00:00:02,159 --> 00:00:03,520
certificates my name is bart

3
00:00:03,520 --> 00:00:05,120
boerstein i'm the cto of trimble

4
00:00:05,120 --> 00:00:06,560
security

5
00:00:06,560 --> 00:00:09,519
all right why certificates the strongest

6
00:00:09,519 --> 00:00:10,480
credential out there

7
00:00:10,480 --> 00:00:13,599
when done correctly example u.s federal

8
00:00:13,599 --> 00:00:16,560
government uses them for their strongest

9
00:00:16,560 --> 00:00:19,439
transactions a lot of industries use

10
00:00:19,439 --> 00:00:21,119
them built into smart cards outside of

11
00:00:21,119 --> 00:00:22,720
the u.s federal government

12
00:00:22,720 --> 00:00:25,199
when done correctly it is a great

13
00:00:25,199 --> 00:00:26,320
credential

14
00:00:26,320 --> 00:00:27,760
done correctly is the important part

15
00:00:27,760 --> 00:00:29,599
we're going to get into that in the next

16
00:00:29,599 --> 00:00:30,320
set of

17
00:00:30,320 --> 00:00:32,320
slides it's built directly into

18
00:00:32,320 --> 00:00:33,600
kubernetes

19
00:00:33,600 --> 00:00:36,719
chances are the first time you used uh

20
00:00:36,719 --> 00:00:38,480
authentication with kubernetes was with

21
00:00:38,480 --> 00:00:40,719
a certificate you deployed kube adm

22
00:00:40,719 --> 00:00:42,559
got your admin.com file and you were off

23
00:00:42,559 --> 00:00:45,839
to the races

24
00:00:46,000 --> 00:00:47,440
so let's talk about what makes a

25
00:00:47,440 --> 00:00:49,360
certificate secure where does that

26
00:00:49,360 --> 00:00:51,039
security come from you got three actors

27
00:00:51,039 --> 00:00:51,440
here

28
00:00:51,440 --> 00:00:53,280
you got key store hardware security

29
00:00:53,280 --> 00:00:54,480
module and

30
00:00:54,480 --> 00:00:56,239
just about everything these days has a

31
00:00:56,239 --> 00:00:57,600
hardware security module where you're

32
00:00:57,600 --> 00:00:59,280
talking about a mobile phone

33
00:00:59,280 --> 00:01:01,680
or a server it could be on a smart card

34
00:01:01,680 --> 00:01:03,840
or a yuba key

35
00:01:03,840 --> 00:01:05,119
and so that's where you're going to keep

36
00:01:05,119 --> 00:01:07,040
your your key in your certificate

37
00:01:07,040 --> 00:01:08,479
you've got certificate authority that's

38
00:01:08,479 --> 00:01:10,960
where the trust comes from

39
00:01:10,960 --> 00:01:12,640
and you've got a web server web server

40
00:01:12,640 --> 00:01:14,240
trustee champion authority

41
00:01:14,240 --> 00:01:17,280
certificate authority trusts you

42
00:01:17,280 --> 00:01:19,520
so onsite on your device you generate

43
00:01:19,520 --> 00:01:20,479
your key pair

44
00:01:20,479 --> 00:01:22,080
and you generate a certificate signing

45
00:01:22,080 --> 00:01:24,240
request the certificate signing request

46
00:01:24,240 --> 00:01:24,720
is then

47
00:01:24,720 --> 00:01:26,880
sent to the certificate authority not

48
00:01:26,880 --> 00:01:28,400
your private key

49
00:01:28,400 --> 00:01:30,400
just your certificate signing request

50
00:01:30,400 --> 00:01:31,840
that contains a public key

51
00:01:31,840 --> 00:01:33,360
as well as some additional metadata

52
00:01:33,360 --> 00:01:35,520
information for your ca

53
00:01:35,520 --> 00:01:37,759
ca says yep we're going to sign it signs

54
00:01:37,759 --> 00:01:39,119
it with its private key

55
00:01:39,119 --> 00:01:42,880
sends back a that certificate you then

56
00:01:42,880 --> 00:01:44,640
install that directly into your keystore

57
00:01:44,640 --> 00:01:47,200
hardware security module

58
00:01:47,200 --> 00:01:48,720
you're going to go interact with an

59
00:01:48,720 --> 00:01:50,960
application like the api server

60
00:01:50,960 --> 00:01:52,960
you establish connection exchange

61
00:01:52,960 --> 00:01:54,720
certificates at this point the web

62
00:01:54,720 --> 00:01:56,240
server is going to tell you hey

63
00:01:56,240 --> 00:01:58,000
here are all the issuers that i'm going

64
00:01:58,000 --> 00:01:59,920
to trust give me a cert from one of

65
00:01:59,920 --> 00:02:01,840
these issuers

66
00:02:01,840 --> 00:02:03,759
you present the cert the web server is

67
00:02:03,759 --> 00:02:05,119
going to check a couple of things

68
00:02:05,119 --> 00:02:06,479
including whether or not it's on a

69
00:02:06,479 --> 00:02:08,318
certificate revocation list

70
00:02:08,318 --> 00:02:10,800
identity certificates can be very long

71
00:02:10,800 --> 00:02:11,520
live

72
00:02:11,520 --> 00:02:13,760
for instance those piv cards the

73
00:02:13,760 --> 00:02:14,959
certificates used

74
00:02:14,959 --> 00:02:16,800
by the us federal government often have

75
00:02:16,800 --> 00:02:18,400
lives of five years because they want to

76
00:02:18,400 --> 00:02:20,959
keep replacing those cards

77
00:02:20,959 --> 00:02:23,599
and so if somebody's contract ends they

78
00:02:23,599 --> 00:02:24,800
retire

79
00:02:24,800 --> 00:02:27,040
they leave their agency their company

80
00:02:27,040 --> 00:02:28,560
what not

81
00:02:28,560 --> 00:02:30,080
for whatever reason that certificate is

82
00:02:30,080 --> 00:02:33,200
no longer valid guess what

83
00:02:33,200 --> 00:02:35,280
by dates it's still valid so if you want

84
00:02:35,280 --> 00:02:37,040
to make sure that nobody uses it anymore

85
00:02:37,040 --> 00:02:38,640
you need to add it to something called a

86
00:02:38,640 --> 00:02:40,640
certificate revocation list

87
00:02:40,640 --> 00:02:42,800
now say this certificate has been

88
00:02:42,800 --> 00:02:43,920
revoked

89
00:02:43,920 --> 00:02:45,760
that's how the web server knows hey even

90
00:02:45,760 --> 00:02:47,120
though this search is still technically

91
00:02:47,120 --> 00:02:49,360
valid from a cryptographic standpoint

92
00:02:49,360 --> 00:02:51,599
it should no longer be trusted that all

93
00:02:51,599 --> 00:02:53,360
checks out all the trust is validated

94
00:02:53,360 --> 00:02:55,519
your handshake is established

95
00:02:55,519 --> 00:02:59,519
you do secure stuff at no point

96
00:02:59,519 --> 00:03:02,000
did your private key leave the hsm and

97
00:03:02,000 --> 00:03:02,640
that's where

98
00:03:02,640 --> 00:03:05,360
the security of this comes in the

99
00:03:05,360 --> 00:03:07,920
private key the thing that makes this so

100
00:03:07,920 --> 00:03:09,519
secure

101
00:03:09,519 --> 00:03:12,000
never left your hsm which means in order

102
00:03:12,000 --> 00:03:13,680
to get access to it they need to have

103
00:03:13,680 --> 00:03:15,519
physical an attacker would need to have

104
00:03:15,519 --> 00:03:17,120
physical access

105
00:03:17,120 --> 00:03:20,159
to the hsm

106
00:03:20,159 --> 00:03:22,879
so why wouldn't you use certificates

107
00:03:22,879 --> 00:03:23,360
well

108
00:03:23,360 --> 00:03:26,799
for one there is no hsm support in good

109
00:03:26,799 --> 00:03:28,440
control right now

110
00:03:28,440 --> 00:03:30,640
pkcs11 which is the protocol that's used

111
00:03:30,640 --> 00:03:32,640
to talk hardware security modules

112
00:03:32,640 --> 00:03:35,599
is not right now supported by cube

113
00:03:35,599 --> 00:03:36,480
control

114
00:03:36,480 --> 00:03:40,000
um that is changing uh there is an open

115
00:03:40,000 --> 00:03:41,840
cap and somebody's being paid to build

116
00:03:41,840 --> 00:03:43,519
it so i'm pretty confident that i'll

117
00:03:43,519 --> 00:03:45,040
make it in there in the not too distant

118
00:03:45,040 --> 00:03:46,640
future

119
00:03:46,640 --> 00:03:48,159
now even if you have that hardware

120
00:03:48,159 --> 00:03:50,879
security support there is no crl support

121
00:03:50,879 --> 00:03:52,959
in the api server

122
00:03:52,959 --> 00:03:55,040
so even if you have access to that

123
00:03:55,040 --> 00:03:56,400
hardware certificate that

124
00:03:56,400 --> 00:03:58,000
really really strong certificate that

125
00:03:58,000 --> 00:04:00,480
you're using to identify users

126
00:04:00,480 --> 00:04:01,680
you can't make sure that that

127
00:04:01,680 --> 00:04:04,080
certificate should still be trusted

128
00:04:04,080 --> 00:04:05,920
there is an open issue for it it hasn't

129
00:04:05,920 --> 00:04:07,360
really made a lot of progress

130
00:04:07,360 --> 00:04:09,120
it also was called out as part of the

131
00:04:09,120 --> 00:04:10,720
kubernetes security audit from a couple

132
00:04:10,720 --> 00:04:13,200
years ago

133
00:04:13,519 --> 00:04:15,120
this all assumes that you're deploying

134
00:04:15,120 --> 00:04:17,120
your certificates correctly

135
00:04:17,120 --> 00:04:19,440
and quite frankly that's probably not

136
00:04:19,440 --> 00:04:20,639
the case

137
00:04:20,639 --> 00:04:22,639
um i don't mean to call anybody's baby

138
00:04:22,639 --> 00:04:23,840
ugly but if you're

139
00:04:23,840 --> 00:04:26,320
downloading your key pair if somebody's

140
00:04:26,320 --> 00:04:28,720
giving you a call file

141
00:04:28,720 --> 00:04:31,199
you're not doing it right and so you're

142
00:04:31,199 --> 00:04:33,120
losing a lot of the security benefit

143
00:04:33,120 --> 00:04:34,560
there

144
00:04:34,560 --> 00:04:36,560
group management is really really hard

145
00:04:36,560 --> 00:04:38,400
why are groups you can do groups and a

146
00:04:38,400 --> 00:04:39,600
certificate

147
00:04:39,600 --> 00:04:41,360
you can do it as an ou and the subject

148
00:04:41,360 --> 00:04:43,040
of the cert but there are two problems

149
00:04:43,040 --> 00:04:43,759
with it

150
00:04:43,759 --> 00:04:45,520
one you can't revoke the cert so if your

151
00:04:45,520 --> 00:04:48,479
groups change the cert can't be revoked

152
00:04:48,479 --> 00:04:52,240
two you don't want to say okay we're

153
00:04:52,240 --> 00:04:54,240
going to do it all with our back

154
00:04:54,240 --> 00:04:55,919
you know if you have 5 or ten developers

155
00:04:55,919 --> 00:04:57,600
doing with the rbac probably not that

156
00:04:57,600 --> 00:04:58,960
big of a deal listing each

157
00:04:58,960 --> 00:05:02,240
one in a role binding uh you have 50

158
00:05:02,240 --> 00:05:04,960
100 a thousand developers in a large

159
00:05:04,960 --> 00:05:05,600
enterprise

160
00:05:05,600 --> 00:05:10,160
it's getting messy really really fast

161
00:05:10,160 --> 00:05:12,960
you want to be able to do groups and

162
00:05:12,960 --> 00:05:14,560
won't work with the managed cluster

163
00:05:14,560 --> 00:05:18,400
so if you're using uh eks gk whatever

164
00:05:18,400 --> 00:05:20,880
certificates aren't even an option not

165
00:05:20,880 --> 00:05:22,560
right out of the box

166
00:05:22,560 --> 00:05:24,160
and they won't work the reverse proxy if

167
00:05:24,160 --> 00:05:25,919
you want your api server

168
00:05:25,919 --> 00:05:27,840
to validate a certificate directly guess

169
00:05:27,840 --> 00:05:30,240
what none of that network infrastructure

170
00:05:30,240 --> 00:05:31,520
that you have for tls

171
00:05:31,520 --> 00:05:33,680
offloading is going to work you need to

172
00:05:33,680 --> 00:05:35,120
have that direct connection

173
00:05:35,120 --> 00:05:36,720
now there is kind of an exception to

174
00:05:36,720 --> 00:05:39,360
that we'll get to that at the end

175
00:05:39,360 --> 00:05:41,600
so what makes openid connect so great

176
00:05:41,600 --> 00:05:44,000
it's a ratified standard well

177
00:05:44,000 --> 00:05:46,639
set of standards there's like 30 or 40

178
00:05:46,639 --> 00:05:49,440
of them i think that make it up

179
00:05:49,440 --> 00:05:51,919
it supports multiple mfa options because

180
00:05:51,919 --> 00:05:53,759
it's reliant upon a web browser when

181
00:05:53,759 --> 00:05:55,360
done correctly

182
00:05:55,360 --> 00:05:56,800
if you are putting your username and

183
00:05:56,800 --> 00:05:59,360
password into a cli you're not

184
00:05:59,360 --> 00:06:02,319
doing it correctly

185
00:06:02,880 --> 00:06:05,280
that web browser opens up infinite

186
00:06:05,280 --> 00:06:07,120
numbers of mfa options where you talk

187
00:06:07,120 --> 00:06:09,120
about something like duo or octa

188
00:06:09,120 --> 00:06:13,120
i'm a big fan of u2f which is the fido

189
00:06:13,120 --> 00:06:16,880
standard using hardware keys

190
00:06:16,880 --> 00:06:19,360
lots of possibilities there it'll work

191
00:06:19,360 --> 00:06:20,960
with both on-prem and managed clouds you

192
00:06:20,960 --> 00:06:22,560
can use impersonation with open id

193
00:06:22,560 --> 00:06:24,479
connect and they'll work with any cloud

194
00:06:24,479 --> 00:06:26,160
so you can have the authenticate the

195
00:06:26,160 --> 00:06:27,600
same way to your on-prem stuff as your

196
00:06:27,600 --> 00:06:29,120
off-prompt stuff

197
00:06:29,120 --> 00:06:31,440
uh and short-lived tokens so you don't

198
00:06:31,440 --> 00:06:32,160
have these

199
00:06:32,160 --> 00:06:35,039
five-year certificates you have these

200
00:06:35,039 --> 00:06:36,880
one-minute tokens and we'll talk about

201
00:06:36,880 --> 00:06:37,919
how that works

202
00:06:37,919 --> 00:06:39,199
and finally groups are easy because

203
00:06:39,199 --> 00:06:40,800
those tokens are short-lived it's just a

204
00:06:40,800 --> 00:06:42,000
bit of json

205
00:06:42,000 --> 00:06:43,680
that's digitally signed you can shove

206
00:06:43,680 --> 00:06:46,160
all your groups right in there

207
00:06:46,160 --> 00:06:47,680
all right so how does openid connect

208
00:06:47,680 --> 00:06:48,880
work first thing you do is you

209
00:06:48,880 --> 00:06:51,520
authenticate to your identity provider

210
00:06:51,520 --> 00:06:53,520
this part is completely non-standard

211
00:06:53,520 --> 00:06:55,360
this is dependent entirely

212
00:06:55,360 --> 00:06:56,800
on your client and your identity

213
00:06:56,800 --> 00:06:59,280
provider open unison has a couple really

214
00:06:59,280 --> 00:07:00,960
nifty ways to automate this without

215
00:07:00,960 --> 00:07:02,960
having to deploy anything additional

216
00:07:02,960 --> 00:07:04,160
but there are apps out there to work

217
00:07:04,160 --> 00:07:05,759
with both key clock and dex if you want

218
00:07:05,759 --> 00:07:07,520
to go that route

219
00:07:07,520 --> 00:07:08,800
identity provider is going to give you

220
00:07:08,800 --> 00:07:11,199
two tokens an id token and a refresh

221
00:07:11,199 --> 00:07:11,840
token

222
00:07:11,840 --> 00:07:14,000
the id token gets you into the party the

223
00:07:14,000 --> 00:07:15,680
refresh token gets you a new ticket when

224
00:07:15,680 --> 00:07:16,160
the

225
00:07:16,160 --> 00:07:20,479
time comes if the id token is still good

226
00:07:20,479 --> 00:07:22,400
when you make a request to the api

227
00:07:22,400 --> 00:07:23,680
server you're just going to put that id

228
00:07:23,680 --> 00:07:24,160
token

229
00:07:24,160 --> 00:07:26,400
right into the request this is what's

230
00:07:26,400 --> 00:07:28,800
called a bearer token

231
00:07:28,800 --> 00:07:32,400
this is a security issue because you

232
00:07:32,400 --> 00:07:34,720
don't need anything else with it

233
00:07:34,720 --> 00:07:37,360
if somebody compromises that token they

234
00:07:37,360 --> 00:07:39,199
can use it against your api server which

235
00:07:39,199 --> 00:07:40,800
is why it's so important to have a

236
00:07:40,800 --> 00:07:44,720
short lived token

237
00:07:44,720 --> 00:07:46,160
once you're authenticated you can do

238
00:07:46,160 --> 00:07:47,840
your just secure stuff

239
00:07:47,840 --> 00:07:50,160
uh finally has the id token expired it's

240
00:07:50,160 --> 00:07:52,000
been a minute you need a new token

241
00:07:52,000 --> 00:07:54,000
so now you authenticate but with the

242
00:07:54,000 --> 00:07:55,919
refresh token so the cell happens with

243
00:07:55,919 --> 00:07:58,240
code control behind the scenes

244
00:07:58,240 --> 00:08:00,560
that refresh token is one-time use once

245
00:08:00,560 --> 00:08:02,319
it's used it's burned you can't use it

246
00:08:02,319 --> 00:08:02,879
again

247
00:08:02,879 --> 00:08:06,080
get a new refresh token a new id token

248
00:08:06,080 --> 00:08:07,680
rinse and repeat until you're done doing

249
00:08:07,680 --> 00:08:10,560
your work for the day

250
00:08:10,720 --> 00:08:13,919
so oidc is perfect right not really like

251
00:08:13,919 --> 00:08:14,479
i said

252
00:08:14,479 --> 00:08:16,879
bearer token easily abused there's

253
00:08:16,879 --> 00:08:18,080
always a string

254
00:08:18,080 --> 00:08:21,599
a history of leakage uh

255
00:08:21,599 --> 00:08:23,360
vulnerabilities one just came out with

256
00:08:23,360 --> 00:08:24,879
vmware i think

257
00:08:24,879 --> 00:08:27,280
um so it's really important to have

258
00:08:27,280 --> 00:08:29,039
those short-lived tokens

259
00:08:29,039 --> 00:08:30,879
it can be difficult to implement a lot

260
00:08:30,879 --> 00:08:32,880
of different steps different projects in

261
00:08:32,880 --> 00:08:33,440
there

262
00:08:33,440 --> 00:08:35,120
whereas with certificates it's a direct

263
00:08:35,120 --> 00:08:37,360
connection uh so that can make it harder

264
00:08:37,360 --> 00:08:38,000
to implement

265
00:08:38,000 --> 00:08:41,279
and hard to be to debug

266
00:08:41,279 --> 00:08:44,959
but what about using vault copy cert and

267
00:08:44,959 --> 00:08:46,399
all sorts of other schemes that i've

268
00:08:46,399 --> 00:08:47,279
seen

269
00:08:47,279 --> 00:08:50,000
um ultimately you're re-implementing

270
00:08:50,000 --> 00:08:52,640
open id connects refresh process

271
00:08:52,640 --> 00:08:54,640
but without the thousands of hours of

272
00:08:54,640 --> 00:08:55,760
peer review

273
00:08:55,760 --> 00:08:58,640
that open id has gotten chances are

274
00:08:58,640 --> 00:09:01,040
unless you work at one of the larger

275
00:09:01,040 --> 00:09:02,720
cloud vendors you are not going to have

276
00:09:02,720 --> 00:09:04,160
enough eyes on

277
00:09:04,160 --> 00:09:06,720
whatever you develop to equal the amount

278
00:09:06,720 --> 00:09:08,560
of time that's been put into open id

279
00:09:08,560 --> 00:09:10,959
connect

280
00:09:11,440 --> 00:09:13,839
i really want search great you search

281
00:09:13,839 --> 00:09:15,519
with open id connect have your identity

282
00:09:15,519 --> 00:09:17,200
provider authenticate with a certificate

283
00:09:17,200 --> 00:09:19,760
check your crl you're off to the races

284
00:09:19,760 --> 00:09:21,440
that doesn't work for you use the

285
00:09:21,440 --> 00:09:23,440
reverse proxy with impersonation

286
00:09:23,440 --> 00:09:25,200
reverse proxy checks the search checks

287
00:09:25,200 --> 00:09:26,800
the crl

288
00:09:26,800 --> 00:09:28,720
uses impersonation with the api server

289
00:09:28,720 --> 00:09:30,080
works in both cloud

290
00:09:30,080 --> 00:09:33,920
and man and on-prem solutions

291
00:09:33,920 --> 00:09:35,839
hey thanks very much for taking the time

292
00:09:35,839 --> 00:09:37,440
to learn about certificates you can find

293
00:09:37,440 --> 00:09:39,680
me on the twitters at mlbim

294
00:09:39,680 --> 00:09:41,120
and if you're looking for an openid

295
00:09:41,120 --> 00:09:43,920
connect identity provider for your

296
00:09:43,920 --> 00:09:45,440
kubernetes deployment take a look at

297
00:09:45,440 --> 00:09:48,320
open unison it's our open source project

298
00:09:48,320 --> 00:09:51,519
open id connect saml ldap theworks

299
00:09:51,519 --> 00:09:52,560
multifactor

300
00:09:52,560 --> 00:09:57,839
all there thanks and ha enjoy kubecon

