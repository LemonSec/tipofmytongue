1
00:00:00,080 --> 00:00:03,040
hello everyone and welcome to our

2
00:00:03,040 --> 00:00:04,319
session

3
00:00:04,319 --> 00:00:07,520
uh a tale of meshi kafka

4
00:00:07,520 --> 00:00:10,800
um my name is ariel shuper uh by the

5
00:00:10,800 --> 00:00:13,519
time of the recording i'm in port shift

6
00:00:13,519 --> 00:00:15,599
uh but i'm by the time of the when we

7
00:00:15,599 --> 00:00:16,880
hear this session i'm gonna be part of

8
00:00:16,880 --> 00:00:19,359
cisco

9
00:00:21,039 --> 00:00:23,760
hello from every other as well i'm very

10
00:00:23,760 --> 00:00:24,640
happy to be

11
00:00:24,640 --> 00:00:28,080
part of this event today

12
00:00:28,400 --> 00:00:32,159
thank you nicolas um

13
00:00:32,159 --> 00:00:33,280
what we're going to talk to you about

14
00:00:33,280 --> 00:00:35,760
today we'll tell you who we are

15
00:00:35,760 --> 00:00:38,320
a little bit more details i will talk

16
00:00:38,320 --> 00:00:39,040
about

17
00:00:39,040 --> 00:00:42,840
kafka usage in general and in kubernetes

18
00:00:42,840 --> 00:00:44,879
specifically we'll talk about the

19
00:00:44,879 --> 00:00:46,399
security architecture

20
00:00:46,399 --> 00:00:49,440
or how do we secure kafka clusters

21
00:00:49,440 --> 00:00:53,280
um we'll talk about kafka in istio

22
00:00:53,280 --> 00:00:56,559
or any type of service mesh

23
00:00:56,559 --> 00:00:59,280
and then nicolas will talk about uh

24
00:00:59,280 --> 00:01:00,800
marlon architecture

25
00:01:00,800 --> 00:01:03,760
and how do they secure the deployment uh

26
00:01:03,760 --> 00:01:04,000
and

27
00:01:04,000 --> 00:01:08,560
will share with us uh a great demo

28
00:01:08,560 --> 00:01:11,280
a little bit about myself who am i so my

29
00:01:11,280 --> 00:01:11,680
name is

30
00:01:11,680 --> 00:01:14,560
ariel schuper i'm a principal product

31
00:01:14,560 --> 00:01:16,400
manager at cisco

32
00:01:16,400 --> 00:01:18,880
uh used to be a vp product management in

33
00:01:18,880 --> 00:01:21,040
port shift port shifted the cloud native

34
00:01:21,040 --> 00:01:22,640
security vendor

35
00:01:22,640 --> 00:01:24,640
uh before working in port shift i was

36
00:01:24,640 --> 00:01:26,159
the head of serverless solution at

37
00:01:26,159 --> 00:01:29,759
aqua security um and before that i led

38
00:01:29,759 --> 00:01:31,680
the cloud security solutions in

39
00:01:31,680 --> 00:01:32,479
checkpoints of

40
00:01:32,479 --> 00:01:36,320
technologies uh part of uh open source

41
00:01:36,320 --> 00:01:38,960
uh with the the qb project that we in

42
00:01:38,960 --> 00:01:40,479
port shift

43
00:01:40,479 --> 00:01:43,280
created and also a member of the easter

44
00:01:43,280 --> 00:01:44,079
security

45
00:01:44,079 --> 00:01:47,680
working group um

46
00:01:47,680 --> 00:01:50,799
a little bit about port shift we are

47
00:01:50,799 --> 00:01:54,560
were founded by 2018

48
00:01:54,560 --> 00:01:58,320
uh then uh acquired by cisco

49
00:01:58,320 --> 00:02:00,719
uh beginning of november beginning of

50
00:02:00,719 --> 00:02:01,600
this

51
00:02:01,600 --> 00:02:04,880
uh beginning of this month uh focusing

52
00:02:04,880 --> 00:02:07,920
on cloud native security platform

53
00:02:07,920 --> 00:02:10,160
and more specifically on integrating it

54
00:02:10,160 --> 00:02:11,440
with service mesh

55
00:02:11,440 --> 00:02:14,800
any type of service mesh

56
00:02:14,800 --> 00:02:17,840
and that's it about it

57
00:02:19,120 --> 00:02:21,959
i'm nicolas museros i worked in

58
00:02:21,959 --> 00:02:23,120
telecommunication

59
00:02:23,120 --> 00:02:25,760
currency exchange commercial companies

60
00:02:25,760 --> 00:02:27,599
and now i'm glad to be part

61
00:02:27,599 --> 00:02:30,160
of two organizations as a devops

62
00:02:30,160 --> 00:02:31,120
engineer

63
00:02:31,120 --> 00:02:33,280
the first to the first one is marlo

64
00:02:33,280 --> 00:02:34,480
navigation

65
00:02:34,480 --> 00:02:36,160
and now i'm trying to start my own

66
00:02:36,160 --> 00:02:37,760
startup business

67
00:02:37,760 --> 00:02:40,800
rtx direct which is providing

68
00:02:40,800 --> 00:02:44,239
cloud native services

69
00:02:45,200 --> 00:02:47,360
mobile and commercial ship management

70
00:02:47,360 --> 00:02:49,680
company

71
00:02:49,680 --> 00:02:52,480
offices in over 10 countries over a

72
00:02:52,480 --> 00:02:53,280
thousand

73
00:02:53,280 --> 00:02:56,640
sure based employees and over 13 000

74
00:02:56,640 --> 00:02:59,760
employees on board at any given time

75
00:02:59,760 --> 00:03:03,440
so let's go ahead with ariel

76
00:03:03,680 --> 00:03:06,080
thank you nicholas and let's talk about

77
00:03:06,080 --> 00:03:07,440
get into the details

78
00:03:07,440 --> 00:03:08,879
and let's talk about a little bit about

79
00:03:08,879 --> 00:03:11,440
microservices communication

80
00:03:11,440 --> 00:03:14,959
so we are moving to microservices

81
00:03:14,959 --> 00:03:18,159
okay microservices um

82
00:03:18,159 --> 00:03:19,920
usually look like that we when we're

83
00:03:19,920 --> 00:03:21,920
working in distributed applications we

84
00:03:21,920 --> 00:03:23,760
start breaking down monolithic into

85
00:03:23,760 --> 00:03:24,879
small

86
00:03:24,879 --> 00:03:26,959
components we want each of them to

87
00:03:26,959 --> 00:03:28,080
communicate with

88
00:03:28,080 --> 00:03:31,519
with each other so we are creating

89
00:03:31,519 --> 00:03:34,959
you know a nice communication uh schema

90
00:03:34,959 --> 00:03:36,640
but then eventually when the cluster

91
00:03:36,640 --> 00:03:38,560
grows and there are more

92
00:03:38,560 --> 00:03:41,360
uh more elements we can quickly turn

93
00:03:41,360 --> 00:03:42,959
into this famous

94
00:03:42,959 --> 00:03:46,080
uh diagram that shows the lift micro

95
00:03:46,080 --> 00:03:47,519
services communication before they

96
00:03:47,519 --> 00:03:48,080
started

97
00:03:48,080 --> 00:03:50,159
the project with envoy before they moved

98
00:03:50,159 --> 00:03:51,840
to service mesh

99
00:03:51,840 --> 00:03:54,159
um and the idea that you know when we

100
00:03:54,159 --> 00:03:56,000
have lots of micro services a lot of

101
00:03:56,000 --> 00:03:57,120
communication i'm not going to talk

102
00:03:57,120 --> 00:03:57,760
about

103
00:03:57,760 --> 00:04:00,640
whether or not uh service mesh is the

104
00:04:00,640 --> 00:04:01,439
right

105
00:04:01,439 --> 00:04:03,680
way to choose it but we can talk about

106
00:04:03,680 --> 00:04:04,799
lots of microchips

107
00:04:04,799 --> 00:04:07,200
communicating with each other we can use

108
00:04:07,200 --> 00:04:09,120
it like the mesh in synchronous

109
00:04:09,120 --> 00:04:10,799
mechanism that everyone

110
00:04:10,799 --> 00:04:11,920
can communicate with everyone

111
00:04:11,920 --> 00:04:14,720
synchronically but you can also use

112
00:04:14,720 --> 00:04:17,519
uh asynchronous communication or

113
00:04:17,519 --> 00:04:19,839
security message passing

114
00:04:19,839 --> 00:04:23,280
with there are multiple options uh kafka

115
00:04:23,280 --> 00:04:25,840
pachi kafka just a popular one but there

116
00:04:25,840 --> 00:04:29,040
are many other options of how we can use

117
00:04:29,040 --> 00:04:33,120
event streaming between services

118
00:04:33,120 --> 00:04:36,880
which are not synchronous now

119
00:04:36,880 --> 00:04:39,360
we would like to talk about apache kafka

120
00:04:39,360 --> 00:04:40,960
you know as a popular

121
00:04:40,960 --> 00:04:44,160
uh event streaming mechanism uh

122
00:04:44,160 --> 00:04:46,960
apache kafka was you know becoming a pop

123
00:04:46,960 --> 00:04:48,800
very popular tool was donated by

124
00:04:48,800 --> 00:04:50,320
linkedin to the open source community in

125
00:04:50,320 --> 00:04:51,440
2011

126
00:04:51,440 --> 00:04:53,840
as a message queue quickly turned in to

127
00:04:53,840 --> 00:04:55,600
be like an event streaming so we're not

128
00:04:55,600 --> 00:04:56,639
just

129
00:04:56,639 --> 00:04:59,759
making like some simple computation uh

130
00:04:59,759 --> 00:05:00,800
actions on

131
00:05:00,800 --> 00:05:04,000
messages we can run multiple actions on

132
00:05:04,000 --> 00:05:06,479
multiple messages simultaneously

133
00:05:06,479 --> 00:05:09,199
we can also maintain uh persistency with

134
00:05:09,199 --> 00:05:10,000
keeping

135
00:05:10,000 --> 00:05:12,000
up the message there are many benefits

136
00:05:12,000 --> 00:05:14,400
to to apache kafka and to the way

137
00:05:14,400 --> 00:05:17,600
uh it is used today for

138
00:05:17,600 --> 00:05:20,720
asynchronous communication now our focus

139
00:05:20,720 --> 00:05:22,800
today and nikolas will uprise it a

140
00:05:22,800 --> 00:05:24,000
little bit more when you talk

141
00:05:24,000 --> 00:05:27,199
about architecture is on an open source

142
00:05:27,199 --> 00:05:28,560
distribution

143
00:05:28,560 --> 00:05:32,000
of kubernetes called strimzy

144
00:05:32,000 --> 00:05:34,240
and strimsy goal is to simplify the

145
00:05:34,240 --> 00:05:37,440
process of running kafka in kubernetes

146
00:05:37,440 --> 00:05:40,000
uh it provides you know the relevant

147
00:05:40,000 --> 00:05:41,840
container images

148
00:05:41,840 --> 00:05:45,039
uh streams you also created uh

149
00:05:45,039 --> 00:05:48,320
dedicated operators uh that can run

150
00:05:48,320 --> 00:05:50,639
the you know the kafka cluster and can

151
00:05:50,639 --> 00:05:52,240
add a lot of uh

152
00:05:52,240 --> 00:05:54,880
support or a lot of uh simple to

153
00:05:54,880 --> 00:05:56,000
simplify

154
00:05:56,000 --> 00:05:58,639
uh those these operations and to make it

155
00:05:58,639 --> 00:06:00,000
you know more

156
00:06:00,000 --> 00:06:02,080
cloud native way by automating a lot of

157
00:06:02,080 --> 00:06:03,120
those uh

158
00:06:03,120 --> 00:06:06,080
things um and the cafe component is run

159
00:06:06,080 --> 00:06:07,680
as a cluster so it can be like you know

160
00:06:07,680 --> 00:06:09,840
for availability purposes

161
00:06:09,840 --> 00:06:13,120
um and as i said again uh nicolas will

162
00:06:13,120 --> 00:06:14,080
explain more

163
00:06:14,080 --> 00:06:17,840
about the benefits of using it now

164
00:06:17,840 --> 00:06:20,720
when we talk about kafka and we want to

165
00:06:20,720 --> 00:06:21,680
talk about you know the

166
00:06:21,680 --> 00:06:23,440
different security changes so how do we

167
00:06:23,440 --> 00:06:25,360
secure this environment

168
00:06:25,360 --> 00:06:27,680
um it's important to know that kafka

169
00:06:27,680 --> 00:06:30,080
does require some level of security by

170
00:06:30,080 --> 00:06:32,160
by nature the default setting is that

171
00:06:32,160 --> 00:06:33,520
you know um

172
00:06:33,520 --> 00:06:35,919
the different configuration allow any

173
00:06:35,919 --> 00:06:36,960
user

174
00:06:36,960 --> 00:06:39,600
uh to read or write or publish or

175
00:06:39,600 --> 00:06:40,720
subscribe

176
00:06:40,720 --> 00:06:43,440
of you know any or all the data so you

177
00:06:43,440 --> 00:06:43,840
can

178
00:06:43,840 --> 00:06:45,600
you know publish your type to any topic

179
00:06:45,600 --> 00:06:48,160
so you get a full exposure

180
00:06:48,160 --> 00:06:52,080
um the communication is in plain text

181
00:06:52,080 --> 00:06:53,680
if you don't do anything specifically

182
00:06:53,680 --> 00:06:55,360
and you know and you go and

183
00:06:55,360 --> 00:06:58,720
configure the tls uh between your

184
00:06:58,720 --> 00:07:00,800
users and their brokers the

185
00:07:00,800 --> 00:07:02,400
communication is in plain text so if

186
00:07:02,400 --> 00:07:03,360
someone

187
00:07:03,360 --> 00:07:05,840
can intercept it in the cluster i can

188
00:07:05,840 --> 00:07:08,000
get exposed to all the

189
00:07:08,000 --> 00:07:09,599
communication there's no need to you

190
00:07:09,599 --> 00:07:11,039
know decrypt it

191
00:07:11,039 --> 00:07:14,639
users can delete the data and

192
00:07:14,639 --> 00:07:18,000
in some distributions uh the secrets or

193
00:07:18,000 --> 00:07:20,479
credentials are stored in plain text so

194
00:07:20,479 --> 00:07:23,120
you want to restrict the access of

195
00:07:23,120 --> 00:07:24,319
people who can

196
00:07:24,319 --> 00:07:26,960
access those you know uh the zookeeper

197
00:07:26,960 --> 00:07:28,240
uh location

198
00:07:28,240 --> 00:07:31,840
so by default uh there are many

199
00:07:31,840 --> 00:07:34,479
uh i would say security challenges but

200
00:07:34,479 --> 00:07:36,720
you know uh given the maturity of the

201
00:07:36,720 --> 00:07:37,360
product

202
00:07:37,360 --> 00:07:39,199
a lot of them you know were taken care

203
00:07:39,199 --> 00:07:40,560
of were handled

204
00:07:40,560 --> 00:07:43,520
uh more specifically uh talking about

205
00:07:43,520 --> 00:07:45,680
streamsi kafka looking the main

206
00:07:45,680 --> 00:07:47,599
security building block so the

207
00:07:47,599 --> 00:07:49,199
authentication

208
00:07:49,199 --> 00:07:52,560
um use user authentication

209
00:07:52,560 --> 00:07:55,120
can can be managed kafka listeners use

210
00:07:55,120 --> 00:07:56,400
authentication

211
00:07:56,400 --> 00:07:58,240
so they can ensure secure client

212
00:07:58,240 --> 00:08:00,879
connection um it does support

213
00:08:00,879 --> 00:08:02,560
different authentication different

214
00:08:02,560 --> 00:08:04,240
authentication options

215
00:08:04,240 --> 00:08:06,400
uh there's a dedicated user operator

216
00:08:06,400 --> 00:08:08,240
that can simplify some of them

217
00:08:08,240 --> 00:08:10,879
but as you can see that you know in

218
00:08:10,879 --> 00:08:12,080
practice

219
00:08:12,080 --> 00:08:14,800
not all of them are always in use but at

220
00:08:14,800 --> 00:08:15,199
least

221
00:08:15,199 --> 00:08:17,520
the foundation or the infrastructure to

222
00:08:17,520 --> 00:08:18,800
use them

223
00:08:18,800 --> 00:08:21,919
is available uh authorization the native

224
00:08:21,919 --> 00:08:24,400
authorization in kafka is using the

225
00:08:24,400 --> 00:08:28,319
simple acl authorizers uh it's based on

226
00:08:28,319 --> 00:08:30,319
authentication of users and then you

227
00:08:30,319 --> 00:08:32,958
allow if you have users authenticate and

228
00:08:32,958 --> 00:08:35,279
identified you can define

229
00:08:35,279 --> 00:08:37,839
access control list and you can define

230
00:08:37,839 --> 00:08:41,599
what user can access what resource

231
00:08:41,599 --> 00:08:46,000
encryption in streams is with tls

232
00:08:46,000 --> 00:08:48,240
so the communication is always encrypted

233
00:08:48,240 --> 00:08:49,519
in the

234
00:08:49,519 --> 00:08:51,440
main control elements like between the

235
00:08:51,440 --> 00:08:53,680
brokers the zookeeper nodes

236
00:08:53,680 --> 00:08:57,120
the operator and the exporter um you

237
00:08:57,120 --> 00:08:59,360
can you know encrypting the user traffic

238
00:08:59,360 --> 00:09:01,040
the user communication

239
00:09:01,040 --> 00:09:03,760
uh with the brokers is something that

240
00:09:03,760 --> 00:09:04,959
that is required

241
00:09:04,959 --> 00:09:09,839
users intervention and and making it um

242
00:09:09,839 --> 00:09:13,440
with the tls option so and i was talking

243
00:09:13,440 --> 00:09:13,839
about

244
00:09:13,839 --> 00:09:16,880
security in kubernetes committees offer

245
00:09:16,880 --> 00:09:19,920
a rich set of security mechanism

246
00:09:19,920 --> 00:09:21,600
there's a lot of investment a lot of

247
00:09:21,600 --> 00:09:24,000
work and also coming from the maturity

248
00:09:24,000 --> 00:09:24,800
of the

249
00:09:24,800 --> 00:09:26,560
of kubernetes in its deployment there

250
00:09:26,560 --> 00:09:28,560
are multiple options for security both

251
00:09:28,560 --> 00:09:30,720
for deployments for services for

252
00:09:30,720 --> 00:09:33,440
policies but also for authentication

253
00:09:33,440 --> 00:09:35,279
authorization and you know powerful

254
00:09:35,279 --> 00:09:37,360
role-based access control

255
00:09:37,360 --> 00:09:40,800
now when service mesh is used i provide

256
00:09:40,800 --> 00:09:42,720
flexible option to offload out of it a

257
00:09:42,720 --> 00:09:44,240
lot of you know the authentication and

258
00:09:44,240 --> 00:09:46,080
authorization decisions

259
00:09:46,080 --> 00:09:48,320
uh the encryption is a completely

260
00:09:48,320 --> 00:09:49,200
different

261
00:09:49,200 --> 00:09:52,000
experience when using service mesh so

262
00:09:52,000 --> 00:09:54,160
all in all the security posture

263
00:09:54,160 --> 00:09:57,200
of cluster is much higher now this lead

264
00:09:57,200 --> 00:09:58,080
us to think that

265
00:09:58,080 --> 00:10:01,120
when we deploy kafka in kubernetes and

266
00:10:01,120 --> 00:10:02,560
with istio

267
00:10:02,560 --> 00:10:05,120
um will be in a much better stage

268
00:10:05,120 --> 00:10:06,399
because the kubernetes the kafka

269
00:10:06,399 --> 00:10:08,079
security and the course

270
00:10:08,079 --> 00:10:09,600
although there are you know they don't

271
00:10:09,600 --> 00:10:11,279
match but if we're using it

272
00:10:11,279 --> 00:10:14,800
with kubernetes um then we can get the

273
00:10:14,800 --> 00:10:15,440
benefit

274
00:10:15,440 --> 00:10:18,959
of all the existing tools uh especially

275
00:10:18,959 --> 00:10:20,800
you know easter can used

276
00:10:20,800 --> 00:10:22,800
uh like it does today can contribute you

277
00:10:22,800 --> 00:10:24,000
know seamlessly

278
00:10:24,000 --> 00:10:25,680
to the security level because it's doing

279
00:10:25,680 --> 00:10:28,000
it you know using offloading the traffic

280
00:10:28,000 --> 00:10:30,000
not touching more defining or changing

281
00:10:30,000 --> 00:10:31,440
anything in the workload

282
00:10:31,440 --> 00:10:34,320
so this would come make a thing that uh

283
00:10:34,320 --> 00:10:35,600
the security

284
00:10:35,600 --> 00:10:38,720
security situat the security status uh

285
00:10:38,720 --> 00:10:41,200
can be much better now what we

286
00:10:41,200 --> 00:10:43,120
discovered

287
00:10:43,120 --> 00:10:47,279
and also together uh with marloy is that

288
00:10:47,279 --> 00:10:50,160
easter and kafka are not you know the

289
00:10:50,160 --> 00:10:50,720
best

290
00:10:50,720 --> 00:10:53,839
match or i would say uh they're not a

291
00:10:53,839 --> 00:10:55,279
match made in heaven

292
00:10:55,279 --> 00:10:58,160
and it's time for multiple reasons you

293
00:10:58,160 --> 00:10:59,040
know but

294
00:10:59,040 --> 00:11:00,640
when you come to think about it that you

295
00:11:00,640 --> 00:11:02,560
know kafka and zookeeper were both

296
00:11:02,560 --> 00:11:03,920
designed to have

297
00:11:03,920 --> 00:11:06,240
all the required resources available at

298
00:11:06,240 --> 00:11:07,680
startup time

299
00:11:07,680 --> 00:11:10,000
uh in current kubernetes versions

300
00:11:10,000 --> 00:11:12,880
sidecars like the envoy proxy

301
00:11:12,880 --> 00:11:16,560
uh availability can today still be after

302
00:11:16,560 --> 00:11:18,320
the pod is already running

303
00:11:18,320 --> 00:11:20,320
um and as a result we can see that for

304
00:11:20,320 --> 00:11:22,480
example in zookeeper it can lead to

305
00:11:22,480 --> 00:11:24,160
instability operation that

306
00:11:24,160 --> 00:11:27,600
members can't create a for a quorum

307
00:11:27,600 --> 00:11:30,640
uh with the brokers uh if a broker tried

308
00:11:30,640 --> 00:11:32,160
to communicate with the zookeeper and

309
00:11:32,160 --> 00:11:34,399
envoy is not ready or not available

310
00:11:34,399 --> 00:11:37,120
uh the broker will crash uh we also saw

311
00:11:37,120 --> 00:11:39,279
that in zookeeper installation

312
00:11:39,279 --> 00:11:43,200
um it binds it to the pod ip

313
00:11:43,200 --> 00:11:46,399
but nvo uses localhost for forwarding

314
00:11:46,399 --> 00:11:47,279
traffic

315
00:11:47,279 --> 00:11:49,600
and the result can be connection refused

316
00:11:49,600 --> 00:11:50,560
errors

317
00:11:50,560 --> 00:11:54,240
and some other uh challenges that uh

318
00:11:54,240 --> 00:11:57,120
we we happen to found and unfortunately

319
00:11:57,120 --> 00:11:57,519
this

320
00:11:57,519 --> 00:11:59,360
leave us you know with situation the

321
00:11:59,360 --> 00:12:02,000
still from one side we do deploy

322
00:12:02,000 --> 00:12:04,959
the kafka we can benefit from all those

323
00:12:04,959 --> 00:12:07,360
great tools but the reality is

324
00:12:07,360 --> 00:12:10,480
that those are cannot be used now

325
00:12:10,480 --> 00:12:13,680
what you know the way to move forward

326
00:12:13,680 --> 00:12:15,760
and really secure and benefit from

327
00:12:15,760 --> 00:12:18,880
what uh kubernetes and what service mesh

328
00:12:18,880 --> 00:12:20,639
can offer kafka

329
00:12:20,639 --> 00:12:23,279
is you know if you can really make some

330
00:12:23,279 --> 00:12:24,320
uh small

331
00:12:24,320 --> 00:12:25,920
changes or do something which some have

332
00:12:25,920 --> 00:12:27,600
already in the work but some

333
00:12:27,600 --> 00:12:29,680
uh can be done so what are the

334
00:12:29,680 --> 00:12:31,360
requirement what do we need in order to

335
00:12:31,360 --> 00:12:33,279
make kafka and east you a perfect match

336
00:12:33,279 --> 00:12:34,160
right

337
00:12:34,160 --> 00:12:36,959
so in order to create what we call a

338
00:12:36,959 --> 00:12:38,639
kafka friendly easter

339
00:12:38,639 --> 00:12:42,160
kafka friendly service mesh um

340
00:12:42,160 --> 00:12:43,440
something that will let us you know to

341
00:12:43,440 --> 00:12:45,920
benefit from all the security controls

342
00:12:45,920 --> 00:12:47,360
in an automated and

343
00:12:47,360 --> 00:12:50,160
smooth you know for existing users but

344
00:12:50,160 --> 00:12:50,639
also

345
00:12:50,639 --> 00:12:52,720
more importantly for future users which

346
00:12:52,720 --> 00:12:54,720
are deploying you want to connect

347
00:12:54,720 --> 00:12:56,560
you know with the kafka cluster there

348
00:12:56,560 --> 00:12:59,279
are two critical elements that you know

349
00:12:59,279 --> 00:13:01,600
need to be fixed in order to get this

350
00:13:01,600 --> 00:13:04,959
uh kafka friendly level uh expectation

351
00:13:04,959 --> 00:13:06,720
one of it which is already in the work

352
00:13:06,720 --> 00:13:09,200
was supposed to be part of 1.18

353
00:13:09,200 --> 00:13:12,399
1.19 but i believe it will uh be

354
00:13:12,399 --> 00:13:13,920
in the next in the next version

355
00:13:13,920 --> 00:13:16,399
definitely going to be included

356
00:13:16,399 --> 00:13:20,160
is making a sidecar first-class citizen

357
00:13:20,160 --> 00:13:22,639
uh part of kubernetes now what do i mean

358
00:13:22,639 --> 00:13:24,320
first-class citizen

359
00:13:24,320 --> 00:13:28,320
making sure that when a sidecar

360
00:13:28,320 --> 00:13:31,040
container like envoy is deployed with

361
00:13:31,040 --> 00:13:32,399
every pod

362
00:13:32,399 --> 00:13:35,519
uh you know make sure that the this

363
00:13:35,519 --> 00:13:37,920
sidecar is up before the regular

364
00:13:37,920 --> 00:13:38,720
containers are

365
00:13:38,720 --> 00:13:41,440
up and making sure it's shut down only

366
00:13:41,440 --> 00:13:43,040
after all the other containers are

367
00:13:43,040 --> 00:13:43,600
terminated

368
00:13:43,600 --> 00:13:46,320
and this will make will ensure that all

369
00:13:46,320 --> 00:13:47,680
the challenges we discussed in the

370
00:13:47,680 --> 00:13:48,079
previous

371
00:13:48,079 --> 00:13:51,040
slide will not happen because envoy will

372
00:13:51,040 --> 00:13:52,560
always be there so we can

373
00:13:52,560 --> 00:13:55,199
both zookeepers and the brokers uh can

374
00:13:55,199 --> 00:13:57,600
establish their communication without

375
00:13:57,600 --> 00:13:59,839
worrying about it but that's not it

376
00:13:59,839 --> 00:14:01,920
there's some a little bit more tweaking

377
00:14:01,920 --> 00:14:04,160
that is required and you know thanks to

378
00:14:04,160 --> 00:14:04,480
the

379
00:14:04,480 --> 00:14:07,600
flexibility of envoy and istio this is

380
00:14:07,600 --> 00:14:09,199
something which was already available

381
00:14:09,199 --> 00:14:09,600
since

382
00:14:09,600 --> 00:14:12,560
1.5 and this is adding a special

383
00:14:12,560 --> 00:14:14,639
detection to kafka traffic

384
00:14:14,639 --> 00:14:17,279
either by enhancing the current kafka

385
00:14:17,279 --> 00:14:18,480
filter because today

386
00:14:18,480 --> 00:14:21,920
envoy supports a filter for detecting

387
00:14:21,920 --> 00:14:23,600
kafka traffic but there's slightly more

388
00:14:23,600 --> 00:14:24,240
that

389
00:14:24,240 --> 00:14:27,120
needs to be done or creating a new

390
00:14:27,120 --> 00:14:30,240
filter or a new proxy for envoy

391
00:14:30,240 --> 00:14:34,160
which again also you know post 1.5

392
00:14:34,160 --> 00:14:38,000
uh is much simpler to do

393
00:14:38,000 --> 00:14:40,880
now as i said before so one there are

394
00:14:40,880 --> 00:14:43,040
infrastructure issues which are being

395
00:14:43,040 --> 00:14:46,160
mean done or managing kubernetes already

396
00:14:46,160 --> 00:14:47,920
part of the release plan and

397
00:14:47,920 --> 00:14:50,000
it's going to be you know included uh

398
00:14:50,000 --> 00:14:51,920
probably in the next version but

399
00:14:51,920 --> 00:14:54,240
there are some you know modifications to

400
00:14:54,240 --> 00:14:55,360
envoy

401
00:14:55,360 --> 00:14:57,519
uh which are required in order to make

402
00:14:57,519 --> 00:14:58,480
it you know

403
00:14:58,480 --> 00:15:02,639
kafka friendly um so

404
00:15:02,639 --> 00:15:05,920
if we will achieve that we can run

405
00:15:05,920 --> 00:15:08,880
envoy proxy in all kafka elements

406
00:15:08,880 --> 00:15:10,399
whether it's broker

407
00:15:10,399 --> 00:15:12,959
brokers zookeepers subscribers and

408
00:15:12,959 --> 00:15:14,240
producers

409
00:15:14,240 --> 00:15:17,040
um if we can use similar mechanisms like

410
00:15:17,040 --> 00:15:19,120
could today with http

411
00:15:19,120 --> 00:15:22,320
kind of a proxy that allow us to parse

412
00:15:22,320 --> 00:15:24,000
the kafka stream

413
00:15:24,000 --> 00:15:27,839
and you know send it for authentication

414
00:15:27,839 --> 00:15:30,959
uh and authorization so we can authorize

415
00:15:30,959 --> 00:15:33,120
any request now this can be done

416
00:15:33,120 --> 00:15:34,959
either by enhancement to the current

417
00:15:34,959 --> 00:15:38,000
filter or by using the new webassembly

418
00:15:38,000 --> 00:15:40,800
uh toolkit uh which allowed to customize

419
00:15:40,800 --> 00:15:41,519
and create

420
00:15:41,519 --> 00:15:44,639
uh customize filters for envoy like an

421
00:15:44,639 --> 00:15:47,360
on demand um and then you know we can

422
00:15:47,360 --> 00:15:47,680
use

423
00:15:47,680 --> 00:15:50,160
envoy to invoke authorization for every

424
00:15:50,160 --> 00:15:51,120
message

425
00:15:51,120 --> 00:15:53,279
based on installation properties we can

426
00:15:53,279 --> 00:15:55,279
of course uh authorize it

427
00:15:55,279 --> 00:15:57,440
uh we can create policies those

428
00:15:57,440 --> 00:15:58,720
processes will authorize we can of

429
00:15:58,720 --> 00:15:59,199
course

430
00:15:59,199 --> 00:16:01,040
cache the results so it's not gonna be

431
00:16:01,040 --> 00:16:03,040
like every request only for

432
00:16:03,040 --> 00:16:06,160
a new connection or new service which is

433
00:16:06,160 --> 00:16:07,759
something that will allow us you know to

434
00:16:07,759 --> 00:16:10,000
benefit from a fully authorized

435
00:16:10,000 --> 00:16:12,480
uh mechanism that allow users to define

436
00:16:12,480 --> 00:16:13,440
the rules

437
00:16:13,440 --> 00:16:15,680
uh envoy can enforce it can create it

438
00:16:15,680 --> 00:16:16,480
just like

439
00:16:16,480 --> 00:16:20,240
we do today with our http communication

440
00:16:20,240 --> 00:16:23,600
now anybody can also pass authentication

441
00:16:23,600 --> 00:16:26,160
information to kafka authorizers

442
00:16:26,160 --> 00:16:29,839
uh an envoy can seamlessly encrypt uh

443
00:16:29,839 --> 00:16:32,800
encrypt and manage all the certificates

444
00:16:32,800 --> 00:16:33,360
uh

445
00:16:33,360 --> 00:16:35,360
you know of the cluster of the brokers

446
00:16:35,360 --> 00:16:37,519
of the users there's no need

447
00:16:37,519 --> 00:16:40,000
to work on the tls certificates for the

448
00:16:40,000 --> 00:16:41,920
users we can also take it

449
00:16:41,920 --> 00:16:44,079
a step forward and do all the ingress in

450
00:16:44,079 --> 00:16:46,079
the egress communication we can manage

451
00:16:46,079 --> 00:16:47,440
them

452
00:16:47,440 --> 00:16:50,240
and using the service mesh policies so

453
00:16:50,240 --> 00:16:51,839
with

454
00:16:51,839 --> 00:16:55,040
having the right filters uh and some

455
00:16:55,040 --> 00:16:56,000
little to help

456
00:16:56,000 --> 00:16:58,399
we can really reach level of very kafka

457
00:16:58,399 --> 00:16:59,519
friendly istio

458
00:16:59,519 --> 00:17:02,000
that will allow us to benefit uh from

459
00:17:02,000 --> 00:17:03,120
all you know the

460
00:17:03,120 --> 00:17:05,280
inherent security which are included so

461
00:17:05,280 --> 00:17:06,640
how's the structure is going to look

462
00:17:06,640 --> 00:17:07,520
like

463
00:17:07,520 --> 00:17:09,679
um so this is going to be like we're

464
00:17:09,679 --> 00:17:10,720
going to

465
00:17:10,720 --> 00:17:14,240
inject the istio or the endovoy proxy to

466
00:17:14,240 --> 00:17:17,839
consumer pods producer pods

467
00:17:17,839 --> 00:17:20,000
and the kafka broker the easter control

468
00:17:20,000 --> 00:17:20,959
plane

469
00:17:20,959 --> 00:17:24,079
uh will uh make sure that everything is

470
00:17:24,079 --> 00:17:24,959
encrypted

471
00:17:24,959 --> 00:17:28,160
and you know the the envoy will encrypt

472
00:17:28,160 --> 00:17:29,280
the traffic

473
00:17:29,280 --> 00:17:32,799
uh you know get the and and of course

474
00:17:32,799 --> 00:17:35,440
uh rotate when it's rotated but can

475
00:17:35,440 --> 00:17:36,880
encrypt the traffic as soon as

476
00:17:36,880 --> 00:17:42,000
leave the the uh consumer um

477
00:17:42,000 --> 00:17:44,559
or the producer containers uh when it

478
00:17:44,559 --> 00:17:46,559
reaches the broker the broker

479
00:17:46,559 --> 00:17:48,640
uh will will forward the traffic for

480
00:17:48,640 --> 00:17:49,679
authorization

481
00:17:49,679 --> 00:17:52,960
so i can verify the three results every

482
00:17:52,960 --> 00:17:54,400
new authorization request will be

483
00:17:54,400 --> 00:17:56,000
verified it will be cached

484
00:17:56,000 --> 00:17:58,080
and this can be maintained and the

485
00:17:58,080 --> 00:17:59,280
traffic will

486
00:17:59,280 --> 00:18:01,520
uh talking not not going to impact the

487
00:18:01,520 --> 00:18:04,879
the perform the performance

488
00:18:05,280 --> 00:18:06,640
so what's going to look like so instead

489
00:18:06,640 --> 00:18:08,400
of using the regular authentication we

490
00:18:08,400 --> 00:18:10,160
can of course use the easter based

491
00:18:10,160 --> 00:18:12,080
authentication the android proxy will

492
00:18:12,080 --> 00:18:14,240
extract the application or the or the

493
00:18:14,240 --> 00:18:16,080
micro service identity

494
00:18:16,080 --> 00:18:19,200
uh and forward it and afford it for the

495
00:18:19,200 --> 00:18:20,480
authorizer

496
00:18:20,480 --> 00:18:22,480
uh just like you know it's using it

497
00:18:22,480 --> 00:18:23,520
today

498
00:18:23,520 --> 00:18:26,080
uh just decision will be made locally

499
00:18:26,080 --> 00:18:26,960
and will be

500
00:18:26,960 --> 00:18:30,080
well maintained locally

501
00:18:31,200 --> 00:18:34,160
just a second

502
00:18:34,320 --> 00:18:38,559
okay authorization

503
00:18:38,559 --> 00:18:41,200
will be will be the same so we can you

504
00:18:41,200 --> 00:18:43,200
know authorize user business specific

505
00:18:43,200 --> 00:18:46,880
attributes um and then use the android

506
00:18:46,880 --> 00:18:48,480
proxy for that

507
00:18:48,480 --> 00:18:50,799
uh as well we can get much flexible more

508
00:18:50,799 --> 00:18:52,160
granular options

509
00:18:52,160 --> 00:18:55,360
setting the rules uh and caching those

510
00:18:55,360 --> 00:18:55,840
uh

511
00:18:55,840 --> 00:18:58,559
results

512
00:18:59,919 --> 00:19:02,799
encryption can can spread around the

513
00:19:02,799 --> 00:19:05,120
entire cluster so instead of keeping it

514
00:19:05,120 --> 00:19:08,320
uh only specific to the control we can

515
00:19:08,320 --> 00:19:10,080
run it you know all the clustering trip

516
00:19:10,080 --> 00:19:11,360
all the traffic between the micro

517
00:19:11,360 --> 00:19:12,400
services

518
00:19:12,400 --> 00:19:15,200
uh and the brokers or even the internal

519
00:19:15,200 --> 00:19:16,640
everything can be managed you know

520
00:19:16,640 --> 00:19:18,480
rotating certificates

521
00:19:18,480 --> 00:19:20,640
uh it's gonna be a much easier and

522
00:19:20,640 --> 00:19:21,600
simpler

523
00:19:21,600 --> 00:19:25,760
uh task to do so all in all

524
00:19:25,760 --> 00:19:28,799
uh with having uh

525
00:19:28,799 --> 00:19:32,160
with you know making those changes

526
00:19:32,160 --> 00:19:35,600
you know we can uh make istio

527
00:19:35,600 --> 00:19:39,360
a much friendlier to

528
00:19:39,360 --> 00:19:42,000
kafka we can then once we deploy

529
00:19:42,000 --> 00:19:43,520
together we can

530
00:19:43,520 --> 00:19:46,480
use all those mechanisms which today are

531
00:19:46,480 --> 00:19:46,880
not

532
00:19:46,880 --> 00:19:48,720
very advanced in kafka we can use the

533
00:19:48,720 --> 00:19:50,880
easter mechanism and then we can

534
00:19:50,880 --> 00:19:52,799
bring the kafka to the same level of

535
00:19:52,799 --> 00:19:55,520
security like any other regular workload

536
00:19:55,520 --> 00:19:57,440
that's running in in kubernetes so we

537
00:19:57,440 --> 00:19:58,799
can really benefit

538
00:19:58,799 --> 00:20:03,360
uh from both worlds together

539
00:20:03,440 --> 00:20:04,960
but that brings us to the question what

540
00:20:04,960 --> 00:20:06,799
do we do until that

541
00:20:06,799 --> 00:20:10,240
uh and until we have uh is your friendly

542
00:20:10,240 --> 00:20:10,960
what can be an

543
00:20:10,960 --> 00:20:14,159
intermediate solution and here we won't

544
00:20:14,159 --> 00:20:15,120
talk about what

545
00:20:15,120 --> 00:20:18,240
we are using today

546
00:20:18,240 --> 00:20:20,559
and today we're using the open policy

547
00:20:20,559 --> 00:20:23,120
agent so the open policy agent

548
00:20:23,120 --> 00:20:25,200
uh to do all the micro services

549
00:20:25,200 --> 00:20:26,559
authorization

550
00:20:26,559 --> 00:20:29,360
uh just on a nutshell the open policy

551
00:20:29,360 --> 00:20:30,240
agent

552
00:20:30,240 --> 00:20:33,520
um it's a popular tool uh it decouple

553
00:20:33,520 --> 00:20:36,400
policy decision making from enforcement

554
00:20:36,400 --> 00:20:37,440
decision

555
00:20:37,440 --> 00:20:40,320
okay so when we use open policy agent

556
00:20:40,320 --> 00:20:40,720
with

557
00:20:40,720 --> 00:20:43,760
kafka uh we can we need to

558
00:20:43,760 --> 00:20:46,799
use a uh an opa plugin

559
00:20:46,799 --> 00:20:50,159
uh inside you know the streamsi kafka

560
00:20:50,159 --> 00:20:52,240
and this plugin can redirect or make

561
00:20:52,240 --> 00:20:54,799
authorization requests to the oppa

562
00:20:54,799 --> 00:20:58,080
server so when opa is using with kafka

563
00:20:58,080 --> 00:20:59,520
the kafka authorizer

564
00:20:59,520 --> 00:21:02,880
call to the plugin the opa server uh to

565
00:21:02,880 --> 00:21:05,120
evaluate the policy based on the input

566
00:21:05,120 --> 00:21:06,720
from the authorizers

567
00:21:06,720 --> 00:21:09,360
uh input is the same set of information

568
00:21:09,360 --> 00:21:10,720
just nothing change

569
00:21:10,720 --> 00:21:14,640
and then in opa server people can define

570
00:21:14,640 --> 00:21:16,960
their policies and the oppa can evaluate

571
00:21:16,960 --> 00:21:18,320
any request

572
00:21:18,320 --> 00:21:20,559
uh based on the policy and respond to

573
00:21:20,559 --> 00:21:21,679
the authorizer

574
00:21:21,679 --> 00:21:23,679
uh with a decision whether the whether

575
00:21:23,679 --> 00:21:25,440
the request is allowed or not

576
00:21:25,440 --> 00:21:27,039
and decision are cashed by the

577
00:21:27,039 --> 00:21:29,679
authorizer to make sure performance

578
00:21:29,679 --> 00:21:34,159
is not is not affected

579
00:21:34,159 --> 00:21:37,360
so this is open policy agent uh in port

580
00:21:37,360 --> 00:21:38,799
shift

581
00:21:38,799 --> 00:21:40,720
we use the same architecture and use the

582
00:21:40,720 --> 00:21:42,640
same plugin

583
00:21:42,640 --> 00:21:45,760
also to allow people to communicate

584
00:21:45,760 --> 00:21:49,760
and define uh their authorization rules

585
00:21:49,760 --> 00:21:51,600
and then the opa plugin will forward it

586
00:21:51,600 --> 00:21:53,360
to port shift port shift

587
00:21:53,360 --> 00:21:56,880
uh will based on based act like just the

588
00:21:56,880 --> 00:21:59,120
opa server and based on the predefined

589
00:21:59,120 --> 00:21:59,760
rules

590
00:21:59,760 --> 00:22:03,440
we'll verify what users can access

591
00:22:03,440 --> 00:22:07,600
uh what uh you know what um

592
00:22:07,600 --> 00:22:11,039
topic uh what broker uh can be accessed

593
00:22:11,039 --> 00:22:13,120
we are focusing on on topics

594
00:22:13,120 --> 00:22:15,280
um all the new communication going to be

595
00:22:15,280 --> 00:22:16,960
authorized the micro services are going

596
00:22:16,960 --> 00:22:18,480
to be authenticated

597
00:22:18,480 --> 00:22:20,400
based on the runtime properties you know

598
00:22:20,400 --> 00:22:22,080
in the namespace they are deployed their

599
00:22:22,080 --> 00:22:22,640
source of

600
00:22:22,640 --> 00:22:25,039
region uh we can use those customized

601
00:22:25,039 --> 00:22:27,039
identities and verify that

602
00:22:27,039 --> 00:22:30,159
our users are

603
00:22:30,159 --> 00:22:32,240
author authenticated and then the

604
00:22:32,240 --> 00:22:34,799
traffic encrypted is used to be done

605
00:22:34,799 --> 00:22:37,600
independently

606
00:22:38,240 --> 00:22:40,400
so that's going to be how our clusters

607
00:22:40,400 --> 00:22:41,520
not look like

608
00:22:41,520 --> 00:22:44,480
um you know the main issue is the op-up

609
00:22:44,480 --> 00:22:45,360
plugin

610
00:22:45,360 --> 00:22:46,720
or getting information from the

611
00:22:46,720 --> 00:22:49,039
authorizers calling port shift

612
00:22:49,039 --> 00:22:51,840
and getting information uh istio is not

613
00:22:51,840 --> 00:22:53,919
really in place not in the kafka brokers

614
00:22:53,919 --> 00:22:55,520
not in the kafka pods

615
00:22:55,520 --> 00:22:58,000
but it does being in but used in the

616
00:22:58,000 --> 00:22:59,120
kafka pods

617
00:22:59,120 --> 00:23:01,679
but again it's a the current version

618
00:23:01,679 --> 00:23:03,039
which is still

619
00:23:03,039 --> 00:23:04,480
need some modification to get it like

620
00:23:04,480 --> 00:23:06,080
you know in full fledge to get

621
00:23:06,080 --> 00:23:09,440
from all the benefits uh enjoyed

622
00:23:09,440 --> 00:23:12,720
so this is all from my side

623
00:23:12,720 --> 00:23:15,520
i'll hand over to nicolas nicolas please

624
00:23:15,520 --> 00:23:16,799
take us through

625
00:23:16,799 --> 00:23:23,840
what you do in tomorrow

626
00:23:28,080 --> 00:23:31,520
i'm sorry i was stubborn slide 20 on

627
00:23:31,520 --> 00:23:35,039
so i will talk about

628
00:23:35,039 --> 00:23:37,679
the marlow story and what happened in

629
00:23:37,679 --> 00:23:38,080
the

630
00:23:38,080 --> 00:23:41,279
practical side of stuff what

631
00:23:41,279 --> 00:23:45,200
marlow is currently using we are using a

632
00:23:45,200 --> 00:23:48,400
legacy system that was built for 25

633
00:23:48,400 --> 00:23:48,960
years

634
00:23:48,960 --> 00:23:52,400
it kept growing and became complex

635
00:23:52,400 --> 00:23:54,559
and if i can recall correctly it reached

636
00:23:54,559 --> 00:23:55,919
its end of life

637
00:23:55,919 --> 00:24:00,480
support in 2003 not only that

638
00:24:00,480 --> 00:24:02,799
but the server side application does

639
00:24:02,799 --> 00:24:04,880
everything it receives requests

640
00:24:04,880 --> 00:24:07,760
executes domain logic retrieves and

641
00:24:07,760 --> 00:24:09,600
updates data from database

642
00:24:09,600 --> 00:24:11,760
and responds back to the client

643
00:24:11,760 --> 00:24:13,840
modularity within the application is

644
00:24:13,840 --> 00:24:15,840
typically based on features of the

645
00:24:15,840 --> 00:24:17,679
programming language

646
00:24:17,679 --> 00:24:19,279
even a small change of to the

647
00:24:19,279 --> 00:24:21,440
application requires that the entire

648
00:24:21,440 --> 00:24:22,960
monolithic system

649
00:24:22,960 --> 00:24:26,400
is rebuilt and redeployed it gets

650
00:24:26,400 --> 00:24:27,919
difficult for change

651
00:24:27,919 --> 00:24:30,880
not to affect the whole system as much

652
00:24:30,880 --> 00:24:32,880
as it grows over the years it gets

653
00:24:32,880 --> 00:24:35,679
difficult and complex to maintain

654
00:24:35,679 --> 00:24:37,760
and in order to scale the application we

655
00:24:37,760 --> 00:24:39,039
would simply create

656
00:24:39,039 --> 00:24:41,279
more instances of that process and

657
00:24:41,279 --> 00:24:42,080
usually

658
00:24:42,080 --> 00:24:43,679
it is not possible to scale the

659
00:24:43,679 --> 00:24:47,840
components in primary

660
00:24:49,919 --> 00:24:52,880
so moving to cloud native micro services

661
00:24:52,880 --> 00:24:55,200
and google networks micro services

662
00:24:55,200 --> 00:24:56,720
with the google nethers natives

663
00:24:56,720 --> 00:24:58,799
deployments we can get view on different

664
00:24:58,799 --> 00:25:02,480
metrics such as cpu usage and ram usage

665
00:25:02,480 --> 00:25:05,039
the horizontal product scalers give us

666
00:25:05,039 --> 00:25:06,960
the ability to scale the number of

667
00:25:06,960 --> 00:25:07,840
instances

668
00:25:07,840 --> 00:25:10,400
in a replication controller or replica

669
00:25:10,400 --> 00:25:12,960
set based on those metrics

670
00:25:12,960 --> 00:25:14,720
we can also use the same metrics

671
00:25:14,720 --> 00:25:16,480
alongside with shell checks to

672
00:25:16,480 --> 00:25:18,000
vertically scale

673
00:25:18,000 --> 00:25:20,799
our infrastructure when needed even that

674
00:25:20,799 --> 00:25:22,880
we prefer scaling horizontally

675
00:25:22,880 --> 00:25:26,000
our infrastructure as well and

676
00:25:26,000 --> 00:25:28,000
with the introduction of githubs

677
00:25:28,000 --> 00:25:30,559
deployment configs sharing charts

678
00:25:30,559 --> 00:25:32,799
we save a lot of time we have better

679
00:25:32,799 --> 00:25:34,320
versioning

680
00:25:34,320 --> 00:25:36,480
and obviously much easier rolling

681
00:25:36,480 --> 00:25:38,880
updates

682
00:25:38,880 --> 00:25:42,480
so a bit about our this is a small

683
00:25:42,480 --> 00:25:44,240
representation of how

684
00:25:44,240 --> 00:25:47,039
our system works we still need to get

685
00:25:47,039 --> 00:25:49,039
data from our legacy system

686
00:25:49,039 --> 00:25:52,080
since we are still in development so

687
00:25:52,080 --> 00:25:54,880
we have stateless apps in blue color

688
00:25:54,880 --> 00:25:56,000
that issue commands

689
00:25:56,000 --> 00:25:58,159
and events but we still need to keep the

690
00:25:58,159 --> 00:25:59,360
state somewhere

691
00:25:59,360 --> 00:26:01,760
so we decided to use kafka and other

692
00:26:01,760 --> 00:26:03,919
storage services elasticsearch to do

693
00:26:03,919 --> 00:26:06,159
that

694
00:26:07,520 --> 00:26:10,559
given all that

695
00:26:10,559 --> 00:26:12,720
we need and given that we needed to move

696
00:26:12,720 --> 00:26:13,760
forward to

697
00:26:13,760 --> 00:26:16,159
a hybrid environment at some point which

698
00:26:16,159 --> 00:26:17,919
is a lengthy subject that i don't want

699
00:26:17,919 --> 00:26:19,520
to get into today

700
00:26:19,520 --> 00:26:21,520
we decided to move from managed kafka

701
00:26:21,520 --> 00:26:23,600
services to streams

702
00:26:23,600 --> 00:26:26,559
streams gave us freedom in so many ways

703
00:26:26,559 --> 00:26:27,760
for example

704
00:26:27,760 --> 00:26:29,919
leveraging all the kubernetes concepts

705
00:26:29,919 --> 00:26:31,520
that i already talked about

706
00:26:31,520 --> 00:26:34,480
we are able to use githubs to to easily

707
00:26:34,480 --> 00:26:36,080
deploy a ton of kafka

708
00:26:36,080 --> 00:26:39,120
with a few clicks we parameterize a lot

709
00:26:39,120 --> 00:26:41,279
of the configuration

710
00:26:41,279 --> 00:26:43,279
it's pretty much secure in comparison

711
00:26:43,279 --> 00:26:44,880
with other services

712
00:26:44,880 --> 00:26:47,039
and has a great community that is always

713
00:26:47,039 --> 00:26:49,760
willing to help

714
00:26:51,039 --> 00:26:53,520
the problem with such environments and

715
00:26:53,520 --> 00:26:55,679
traditional firewalls is that

716
00:26:55,679 --> 00:26:58,159
they need skills to get configured well

717
00:26:58,159 --> 00:27:00,400
especially on cloud-native environments

718
00:27:00,400 --> 00:27:02,320
and complex networks

719
00:27:02,320 --> 00:27:04,400
imagine having to secure a whole kaka

720
00:27:04,400 --> 00:27:06,960
cluster using regular expressions

721
00:27:06,960 --> 00:27:09,200
and having almost zero visibility on the

722
00:27:09,200 --> 00:27:11,600
request made

723
00:27:11,600 --> 00:27:14,720
furthermore firewalls need a lot of fuel

724
00:27:14,720 --> 00:27:16,000
to get configured

725
00:27:16,000 --> 00:27:18,000
which it uses the agility and the

726
00:27:18,000 --> 00:27:19,039
acceleration

727
00:27:19,039 --> 00:27:21,520
of all the development which is bad for

728
00:27:21,520 --> 00:27:23,520
everyone

729
00:27:23,520 --> 00:27:26,159
we also sometimes need to give or block

730
00:27:26,159 --> 00:27:27,919
access on different layers

731
00:27:27,919 --> 00:27:30,480
such as on the micro service level and

732
00:27:30,480 --> 00:27:33,279
more importantly on the topic level

733
00:27:33,279 --> 00:27:36,159
also given that a lot of times now with

734
00:27:36,159 --> 00:27:37,600
the corona virus days

735
00:27:37,600 --> 00:27:40,159
we need to work on home they need to

736
00:27:40,159 --> 00:27:42,399
secure the environment for specifically

737
00:27:42,399 --> 00:27:44,159
peace came up

738
00:27:44,159 --> 00:27:46,880
and as much as we move forward

739
00:27:46,880 --> 00:27:49,279
configuring and securing streamsy

740
00:27:49,279 --> 00:27:51,360
we realize that we need something more

741
00:27:51,360 --> 00:27:52,880
sophisticated from

742
00:27:52,880 --> 00:27:55,600
managed cloud services and that's where

743
00:27:55,600 --> 00:27:56,480
courtship

744
00:27:56,480 --> 00:28:01,919
jumped into the game to save our lives

745
00:28:01,919 --> 00:28:04,000
so the port shift solution

746
00:28:04,000 --> 00:28:06,320
gave us visibility on what requests are

747
00:28:06,320 --> 00:28:09,039
made with tables and nice graphs

748
00:28:09,039 --> 00:28:11,919
we were able to set up rules on a very

749
00:28:11,919 --> 00:28:14,000
user-friendly environment

750
00:28:14,000 --> 00:28:16,320
we are able to add rules for specific

751
00:28:16,320 --> 00:28:19,360
microservices and specific topics

752
00:28:19,360 --> 00:28:22,320
and moving forward i will show a small

753
00:28:22,320 --> 00:28:23,039
demo

754
00:28:23,039 --> 00:28:27,200
of how easily those stuff can be done

755
00:28:27,360 --> 00:28:30,559
so on that demo i will be using arco cd

756
00:28:30,559 --> 00:28:33,760
which is a great tool for githubs

757
00:28:33,760 --> 00:28:36,799
another great tool is lenses that is

758
00:28:36,799 --> 00:28:40,000
great for visualization of data in kafka

759
00:28:40,000 --> 00:28:41,919
among other stuff but that's what i will

760
00:28:41,919 --> 00:28:43,279
show today

761
00:28:43,279 --> 00:28:46,320
obviously i will use openshift we use

762
00:28:46,320 --> 00:28:48,240
our kubernetes cluster

763
00:28:48,240 --> 00:28:50,640
streamsy and our security solution which

764
00:28:50,640 --> 00:28:52,399
is spot shift

765
00:28:52,399 --> 00:28:59,840
so let me share my screen

766
00:29:00,640 --> 00:29:03,919
with argo i will create a new app

767
00:29:03,919 --> 00:29:06,960
i will give an application name afghan

768
00:29:06,960 --> 00:29:08,480
demo

769
00:29:08,480 --> 00:29:11,520
i will select the default project

770
00:29:11,520 --> 00:29:14,559
i will select auto create namespace

771
00:29:14,559 --> 00:29:17,600
i will choose my git reaper and choose

772
00:29:17,600 --> 00:29:20,159
the root path

773
00:29:20,159 --> 00:29:23,520
i'll choose my cluster

774
00:29:23,679 --> 00:29:27,200
and the namespace name i want

775
00:29:27,200 --> 00:29:30,240
and after creating and sensing that

776
00:29:30,240 --> 00:29:33,440
after some time we will have a full

777
00:29:33,440 --> 00:29:35,279
workable kafka cluster on

778
00:29:35,279 --> 00:29:41,840
openshift so let's see what happened

779
00:29:42,159 --> 00:29:45,200
we have embroidered zookeeper lenses and

780
00:29:45,200 --> 00:29:46,320
the operator

781
00:29:46,320 --> 00:29:50,000
and the kafka connect let's head to

782
00:29:50,000 --> 00:29:52,159
lenses to see what's happening here we

783
00:29:52,159 --> 00:29:53,760
have some

784
00:29:53,760 --> 00:29:57,440
three topics with mock data created

785
00:29:57,440 --> 00:30:00,720
let's see what's inside

786
00:30:02,000 --> 00:30:05,760
so some sensitive info of our customers

787
00:30:05,760 --> 00:30:08,399
some customer information and some

788
00:30:08,399 --> 00:30:09,919
iphone numbers

789
00:30:09,919 --> 00:30:13,919
all of those are mock data don't worry

790
00:30:14,799 --> 00:30:16,880
and let's head to post shift to see what

791
00:30:16,880 --> 00:30:22,159
we can do

792
00:30:22,159 --> 00:30:25,360
we can click on policies and then

793
00:30:25,360 --> 00:30:28,240
connection rules

794
00:30:28,240 --> 00:30:31,520
let's start adding rules

795
00:30:33,679 --> 00:30:37,600
i will select by and put the nssa port

796
00:30:37,600 --> 00:30:39,200
name

797
00:30:39,200 --> 00:30:44,159
then next i will select by kafka

798
00:30:44,159 --> 00:30:46,159
here i can see my brokers and the

799
00:30:46,159 --> 00:30:47,200
cluster

800
00:30:47,200 --> 00:30:49,440
i will select the network that we just

801
00:30:49,440 --> 00:30:50,720
created

802
00:30:50,720 --> 00:30:54,320
next we will select kafka now we can see

803
00:30:54,320 --> 00:30:55,520
all the topics

804
00:30:55,520 --> 00:30:59,519
that are used in this broker

805
00:30:59,519 --> 00:31:01,519
i will just select the iban numbers and

806
00:31:01,519 --> 00:31:05,840
the sensitive information

807
00:31:08,640 --> 00:31:10,960
and i want to block access for reading

808
00:31:10,960 --> 00:31:14,720
and writing on those topics

809
00:31:14,799 --> 00:31:19,840
next we just put a name

810
00:31:29,039 --> 00:31:31,519
and then block the axis when i press

811
00:31:31,519 --> 00:31:32,159
finish

812
00:31:32,159 --> 00:31:35,440
and apply the policy

813
00:31:37,039 --> 00:31:39,440
i will head back to lenses and after

814
00:31:39,440 --> 00:31:40,880
some time

815
00:31:40,880 --> 00:31:44,159
i will lose access to it

816
00:31:44,640 --> 00:31:46,720
so i cannot have access to those topics

817
00:31:46,720 --> 00:31:48,640
but i still have access to the custom

818
00:31:48,640 --> 00:31:49,519
information

819
00:31:49,519 --> 00:31:52,640
that i want access to

820
00:31:52,960 --> 00:31:56,240
so back to put shift

821
00:31:58,960 --> 00:32:02,240
i will add another rule i want to block

822
00:32:02,240 --> 00:32:03,600
access to eyepiece

823
00:32:03,600 --> 00:32:06,399
for everyone in the world so i'll put

824
00:32:06,399 --> 00:32:07,120
zero zero

825
00:32:07,120 --> 00:32:12,399
zero zero easy as that

826
00:32:13,039 --> 00:32:17,919
sorry about that zero next

827
00:32:22,090 --> 00:32:24,320
[Music]

828
00:32:24,320 --> 00:32:28,480
i'll choose a name len says in that case

829
00:32:28,480 --> 00:32:33,360
next and incredible

830
00:32:33,360 --> 00:32:43,840
and then block

831
00:32:45,279 --> 00:32:47,120
right click finish and then apply the

832
00:32:47,120 --> 00:32:50,720
policy i can't get back to learning this

833
00:32:50,720 --> 00:32:53,760
we need to wait a bit for it to work

834
00:32:53,760 --> 00:32:57,840
let's see what happens

835
00:33:00,480 --> 00:33:02,320
doesn't where it's going to sell on the

836
00:33:02,320 --> 00:33:04,000
first refresh but

837
00:33:04,000 --> 00:33:07,120
let's see the second one

838
00:33:08,640 --> 00:33:12,159
now it's blocked let's try again to be

839
00:33:12,159 --> 00:33:14,399
sure

840
00:33:15,040 --> 00:33:18,129
[Music]

841
00:33:18,559 --> 00:33:21,919
blocked but now i want to be able to

842
00:33:21,919 --> 00:33:22,799
work from home

843
00:33:22,799 --> 00:33:25,919
so i will add my ap to be allowed so

844
00:33:25,919 --> 00:33:29,039
let's select by ap

845
00:33:29,279 --> 00:33:32,159
i will play it out for now so you can't

846
00:33:32,159 --> 00:33:34,720
see my p

847
00:33:35,279 --> 00:33:40,399
i'm adding my ip and 32 for just one ip

848
00:33:46,960 --> 00:33:49,840
click next

849
00:33:50,240 --> 00:33:53,840
again with the same name

850
00:33:54,720 --> 00:33:59,360
clicking next any layer 7 protocol

851
00:33:59,360 --> 00:34:07,840
that now allow i will add a name

852
00:34:10,800 --> 00:34:13,520
finish and now because i want this rule

853
00:34:13,520 --> 00:34:14,159
to have

854
00:34:14,159 --> 00:34:17,918
higher priority i can easily move it up

855
00:34:17,918 --> 00:34:21,839
so let's apply the policy

856
00:34:24,079 --> 00:34:34,320
go back to lenses refresh

857
00:34:34,320 --> 00:34:37,359
now we have access to lenses but

858
00:34:37,359 --> 00:34:39,520
we still don't have access to the topics

859
00:34:39,520 --> 00:34:40,560
we blocked

860
00:34:40,560 --> 00:34:43,359
so that's good so let's head back to

861
00:34:43,359 --> 00:34:45,440
podchick to see the rest of the goodies

862
00:34:45,440 --> 00:34:47,199
it give us

863
00:34:47,199 --> 00:34:49,839
has a nice dashboard with some risky

864
00:34:49,839 --> 00:34:52,719
workloads events connection

865
00:34:52,719 --> 00:34:56,800
how much portal running permissions

866
00:34:56,800 --> 00:34:59,839
fascinates navigator that's kind of a

867
00:34:59,839 --> 00:35:02,880
nice diagram of what's happening now

868
00:35:02,880 --> 00:35:06,000
we can expand this

869
00:35:06,079 --> 00:35:07,680
and we can see all the external

870
00:35:07,680 --> 00:35:09,599
connections and all the internal

871
00:35:09,599 --> 00:35:11,119
connections so one

872
00:35:11,119 --> 00:35:14,240
data connect connecting to the brokers

873
00:35:14,240 --> 00:35:17,119
and lenses connecting to workers and

874
00:35:17,119 --> 00:35:19,200
some ips from the outside connecting to

875
00:35:19,200 --> 00:35:20,400
lenses

876
00:35:20,400 --> 00:35:24,160
let's go to ci we can see all our images

877
00:35:24,160 --> 00:35:25,520
here

878
00:35:25,520 --> 00:35:28,079
we can see some vulnerabilities and how

879
00:35:28,079 --> 00:35:30,400
many there are in every image

880
00:35:30,400 --> 00:35:34,079
we can click on the critical

881
00:35:34,240 --> 00:35:36,320
we have a lot of information here such

882
00:35:36,320 --> 00:35:38,320
as the description and we can click the

883
00:35:38,320 --> 00:35:39,280
exact cv

884
00:35:39,280 --> 00:35:41,599
to go to the cv page and see what's

885
00:35:41,599 --> 00:35:44,160
happening with that

886
00:35:44,160 --> 00:35:47,200
so that's nice as well and then we can

887
00:35:47,200 --> 00:35:49,920
go to the runtime

888
00:35:49,920 --> 00:35:51,680
where we can see all the workloads

889
00:35:51,680 --> 00:35:53,680
running on our cluster

890
00:35:53,680 --> 00:35:56,880
and some more information the result if

891
00:35:56,880 --> 00:35:58,000
it's allowed

892
00:35:58,000 --> 00:35:59,760
and then we can see all the connections

893
00:35:59,760 --> 00:36:01,359
happening right now

894
00:36:01,359 --> 00:36:03,040
as you can see on the right side we

895
00:36:03,040 --> 00:36:04,400
can't even see

896
00:36:04,400 --> 00:36:06,640
which topics are accessed by which

897
00:36:06,640 --> 00:36:09,119
workload

898
00:36:09,119 --> 00:36:11,920
and finally the risk assessment of our

899
00:36:11,920 --> 00:36:13,440
system

900
00:36:13,440 --> 00:36:15,760
we can select the scan time or schedule

901
00:36:15,760 --> 00:36:19,920
it we can select the severity to report

902
00:36:19,920 --> 00:36:22,079
and if we want we can select the

903
00:36:22,079 --> 00:36:26,079
namespace we don't want to right now

904
00:36:26,079 --> 00:36:29,839
after we click save the scan is starting

905
00:36:29,839 --> 00:36:33,520
and after some time that i cut out

906
00:36:33,520 --> 00:36:34,880
it's finishing and showing the

907
00:36:34,880 --> 00:36:37,680
vulnerabilities

908
00:36:37,680 --> 00:36:41,200
so that's me that's it for my side

909
00:36:41,200 --> 00:36:44,000
heading back to ariel to summarize the

910
00:36:44,000 --> 00:36:46,640
presentation

911
00:36:46,640 --> 00:36:49,599
cuny colas thank you for this uh great

912
00:36:49,599 --> 00:36:50,880
demo

913
00:36:50,880 --> 00:36:54,800
uh and thank you for showing everything

914
00:36:54,800 --> 00:36:58,400
i know just to summarize everything

915
00:36:58,400 --> 00:37:01,520
um you know kafka

916
00:37:01,520 --> 00:37:04,960
even when deploying kubernetes

917
00:37:04,960 --> 00:37:08,000
does require dedicated security tools it

918
00:37:08,000 --> 00:37:10,880
does not benefit or inherent

919
00:37:10,880 --> 00:37:13,680
security mechanisms which are deployed

920
00:37:13,680 --> 00:37:16,079
east 2 cannot be ideal candidate for

921
00:37:16,079 --> 00:37:19,760
man to do it or to achieve this level

922
00:37:19,760 --> 00:37:21,280
some of the work in order to make it

923
00:37:21,280 --> 00:37:23,119
it's not natively out of the box

924
00:37:23,119 --> 00:37:25,839
some require will be enhanced in the

925
00:37:25,839 --> 00:37:27,040
future when

926
00:37:27,040 --> 00:37:28,640
scica containers will get the better

927
00:37:28,640 --> 00:37:30,640
treatment and some require a little bit

928
00:37:30,640 --> 00:37:32,480
more tweaking by adding

929
00:37:32,480 --> 00:37:35,200
a dedicated filter and envoy that can

930
00:37:35,200 --> 00:37:36,079
detect

931
00:37:36,079 --> 00:37:38,320
and manipulate the traffic but with

932
00:37:38,320 --> 00:37:41,119
small fixes i'm sure in the near future

933
00:37:41,119 --> 00:37:44,079
i will be able to use istio and really

934
00:37:44,079 --> 00:37:45,760
get benefit

935
00:37:45,760 --> 00:37:48,000
from all the security mechanisms and to

936
00:37:48,000 --> 00:37:49,119
bring the

937
00:37:49,119 --> 00:37:51,119
kafka cluster to the same level of

938
00:37:51,119 --> 00:37:53,119
security which allow everyone to use it

939
00:37:53,119 --> 00:37:54,960
freely and securely

940
00:37:54,960 --> 00:37:57,359
in kubernetes or in openshift in the

941
00:37:57,359 --> 00:37:58,240
meantime

942
00:37:58,240 --> 00:38:00,800
opensort the open policy agent can be

943
00:38:00,800 --> 00:38:03,280
used in order to customize

944
00:38:03,280 --> 00:38:05,440
a lot of the work but having but

945
00:38:05,440 --> 00:38:07,920
nevertheless i'm sure in the near future

946
00:38:07,920 --> 00:38:11,119
we'll be able to benefit from uh the

947
00:38:11,119 --> 00:38:14,240
meshi kafka and make a serving flesh

948
00:38:14,240 --> 00:38:15,920
friendly kafka

949
00:38:15,920 --> 00:38:18,800
um so that's it thank you very much for

950
00:38:18,800 --> 00:38:20,720
joining thank you nicolas for a great

951
00:38:20,720 --> 00:38:22,320
demo and thank you for doing this for

952
00:38:22,320 --> 00:38:22,960
joining and

953
00:38:22,960 --> 00:38:24,640
will be available for in the next few

954
00:38:24,640 --> 00:38:26,240
minutes for a few questions from the

955
00:38:26,240 --> 00:38:27,520
audience

956
00:38:27,520 --> 00:38:30,720
thank you

