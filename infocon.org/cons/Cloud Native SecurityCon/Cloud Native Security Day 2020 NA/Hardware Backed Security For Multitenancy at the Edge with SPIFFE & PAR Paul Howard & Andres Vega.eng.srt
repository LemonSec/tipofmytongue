1
00:00:00,399 --> 00:00:03,280
okay uh so welcome everyone to our

2
00:00:03,280 --> 00:00:05,440
lightning talk hardware backed security

3
00:00:05,440 --> 00:00:07,759
for multi-tenancy at the edge uh with

4
00:00:07,759 --> 00:00:10,000
spiffy and parsec

5
00:00:10,000 --> 00:00:11,840
let's quickly introduce ourselves uh my

6
00:00:11,840 --> 00:00:13,280
name's paul howard

7
00:00:13,280 --> 00:00:15,519
i'm here representing the parsec project

8
00:00:15,519 --> 00:00:17,600
i'm a solutions architect with arm

9
00:00:17,600 --> 00:00:19,439
and i lead the team that's contributing

10
00:00:19,439 --> 00:00:21,199
to parsec inside of arm

11
00:00:21,199 --> 00:00:24,240
so andres over to you thank you paul

12
00:00:24,240 --> 00:00:26,160
and i am andres vega i am product

13
00:00:26,160 --> 00:00:27,439
manager for the

14
00:00:27,439 --> 00:00:30,960
spiffy inspire projects representing

15
00:00:30,960 --> 00:00:33,680
b projects and i happen to also work at

16
00:00:33,680 --> 00:00:37,760
vmware as a product line manager

17
00:00:38,000 --> 00:00:40,320
okay cool thanks um so what we're going

18
00:00:40,320 --> 00:00:42,160
to see today is a first glimpse and the

19
00:00:42,160 --> 00:00:44,480
first demonstration really of how parsec

20
00:00:44,480 --> 00:00:45,520
can work

21
00:00:45,520 --> 00:00:47,840
in combination with spiffy and spire and

22
00:00:47,840 --> 00:00:49,520
how we can use the security and key

23
00:00:49,520 --> 00:00:51,600
management abstractions of parsec

24
00:00:51,600 --> 00:00:53,600
in combination with the production

25
00:00:53,600 --> 00:00:55,600
identity framework of spiffy

26
00:00:55,600 --> 00:00:57,440
to provide us with a multi-tenant

27
00:00:57,440 --> 00:00:58,879
security abstraction

28
00:00:58,879 --> 00:01:00,559
where multiple workloads can use

29
00:01:00,559 --> 00:01:02,160
hardware-backed security

30
00:01:02,160 --> 00:01:04,720
to protect the private keys based on

31
00:01:04,720 --> 00:01:05,280
their own

32
00:01:05,280 --> 00:01:07,840
attested and proven identity it's the

33
00:01:07,840 --> 00:01:09,280
first time we've shown all three of

34
00:01:09,280 --> 00:01:11,680
these cncf projects working together

35
00:01:11,680 --> 00:01:15,600
to provide an integrated solution

36
00:01:15,600 --> 00:01:17,520
so let's just quickly summarize what

37
00:01:17,520 --> 00:01:19,200
these projects are

38
00:01:19,200 --> 00:01:21,439
parsec is the new kid on the block

39
00:01:21,439 --> 00:01:24,000
parsec joined cncf sandbox just earlier

40
00:01:24,000 --> 00:01:25,040
this year

41
00:01:25,040 --> 00:01:26,880
and it's the platform abstraction for

42
00:01:26,880 --> 00:01:29,840
security parsec aims to create a uniform

43
00:01:29,840 --> 00:01:31,439
software interface to the hardware

44
00:01:31,439 --> 00:01:33,200
security of any platform

45
00:01:33,200 --> 00:01:35,439
making secure services like key storage

46
00:01:35,439 --> 00:01:36,640
and cryptography

47
00:01:36,640 --> 00:01:39,040
available to cloud native applications

48
00:01:39,040 --> 00:01:41,040
in a platform agnostic and language

49
00:01:41,040 --> 00:01:42,240
agnostic way

50
00:01:42,240 --> 00:01:43,759
so application developers know they're

51
00:01:43,759 --> 00:01:45,840
getting the best available secure

52
00:01:45,840 --> 00:01:47,920
features of their platform like hardware

53
00:01:47,920 --> 00:01:49,920
protection for private keys

54
00:01:49,920 --> 00:01:51,680
but they get that without having to

55
00:01:51,680 --> 00:01:53,520
understand and code against all of the

56
00:01:53,520 --> 00:01:55,040
specs and apis

57
00:01:55,040 --> 00:01:57,280
that are needed to store keys in say an

58
00:01:57,280 --> 00:01:58,240
hsm

59
00:01:58,240 --> 00:02:00,640
or a tpm parsec handles all of those

60
00:02:00,640 --> 00:02:02,960
details and then allows applications

61
00:02:02,960 --> 00:02:06,159
to just code against parsec and not only

62
00:02:06,159 --> 00:02:08,160
that but they can code against parsec

63
00:02:08,160 --> 00:02:09,440
using their preferred programming

64
00:02:09,440 --> 00:02:10,318
language

65
00:02:10,318 --> 00:02:11,520
and using an interface that is

66
00:02:11,520 --> 00:02:14,080
simplified fluent and sensitive to

67
00:02:14,080 --> 00:02:15,280
common use cases

68
00:02:15,280 --> 00:02:17,760
in key storage and security and let me

69
00:02:17,760 --> 00:02:18,959
hand back to andres

70
00:02:18,959 --> 00:02:23,440
to summarize spiffy inspire for us

71
00:02:23,440 --> 00:02:27,200
thank you paul that is very interesting

72
00:02:27,200 --> 00:02:30,480
so spiffy inspired spiffy

73
00:02:30,480 --> 00:02:33,519
really defines a set of interfaces

74
00:02:33,519 --> 00:02:36,640
the apis and the documents for proving

75
00:02:36,640 --> 00:02:39,599
validating and obtaining service

76
00:02:39,599 --> 00:02:41,120
identities

77
00:02:41,120 --> 00:02:43,680
spire is the software that implements

78
00:02:43,680 --> 00:02:45,040
the spiffy interfaces

79
00:02:45,040 --> 00:02:46,879
for establishing trust between different

80
00:02:46,879 --> 00:02:48,080
systems

81
00:02:48,080 --> 00:02:50,080
now when we talk about trust that goes

82
00:02:50,080 --> 00:02:51,840
from securing the microservice

83
00:02:51,840 --> 00:02:52,560
communication

84
00:02:52,560 --> 00:02:55,519
automatically through application

85
00:02:55,519 --> 00:02:56,640
proxies

86
00:02:56,640 --> 00:03:00,239
x509 certificates or json web tokens

87
00:03:00,239 --> 00:03:03,440
it can help authenticate to common

88
00:03:03,440 --> 00:03:06,080
third-party services without relying on

89
00:03:06,080 --> 00:03:09,519
any api keys or embedded secrets

90
00:03:09,519 --> 00:03:12,720
and it can also help build bridge

91
00:03:12,720 --> 00:03:14,959
and extend service meshes across

92
00:03:14,959 --> 00:03:16,400
organizations without

93
00:03:16,400 --> 00:03:19,760
sharing any private keys

94
00:03:19,760 --> 00:03:22,560
back to you paul

95
00:03:24,319 --> 00:03:25,599
i think you're going to talk to this one

96
00:03:25,599 --> 00:03:27,440
as well andres

97
00:03:27,440 --> 00:03:30,560
i do intend to talk to this one as well

98
00:03:30,560 --> 00:03:33,599
so bringing the

99
00:03:33,599 --> 00:03:37,920
projects together in an integration

100
00:03:37,920 --> 00:03:40,959
parsec is establishing the keystore

101
00:03:40,959 --> 00:03:42,159
partitioning logic

102
00:03:42,159 --> 00:03:43,920
you see here at the bottom of the

103
00:03:43,920 --> 00:03:45,519
picture now

104
00:03:45,519 --> 00:03:48,560
from a developer percep perspective

105
00:03:48,560 --> 00:03:51,120
it is a platform agnostic experience

106
00:03:51,120 --> 00:03:53,439
nothing changes in their workflow

107
00:03:53,439 --> 00:03:56,239
and from an application perspective

108
00:03:56,239 --> 00:03:59,280
these being multi-tenant applications

109
00:03:59,280 --> 00:04:01,680
neither application can see each other's

110
00:04:01,680 --> 00:04:03,280
keys they're

111
00:04:03,280 --> 00:04:06,319
hard partitioned all that is required

112
00:04:06,319 --> 00:04:10,159
is a reliable source of identity to tell

113
00:04:10,159 --> 00:04:14,879
one apart from the other

114
00:04:14,879 --> 00:04:17,040
okay great thanks and that's where spire

115
00:04:17,040 --> 00:04:18,560
and spiffy come in of course

116
00:04:18,560 --> 00:04:21,040
um so for multi-tenancy to be a feature

117
00:04:21,040 --> 00:04:21,918
of parsec

118
00:04:21,918 --> 00:04:23,600
there has to be this reliable and

119
00:04:23,600 --> 00:04:26,160
verifiable source of identity

120
00:04:26,160 --> 00:04:28,400
um that source could be anything in fact

121
00:04:28,400 --> 00:04:30,400
and parsec doesn't prescribe a single

122
00:04:30,400 --> 00:04:31,600
solution to that

123
00:04:31,600 --> 00:04:33,520
um but if our workloads are running in a

124
00:04:33,520 --> 00:04:34,800
spiffy trust domain

125
00:04:34,800 --> 00:04:36,320
then it absolutely makes sense for

126
00:04:36,320 --> 00:04:39,040
spiffy ids to be what parsec uses

127
00:04:39,040 --> 00:04:41,680
to separate the clients and isolates

128
00:04:41,680 --> 00:04:42,880
their key storage

129
00:04:42,880 --> 00:04:44,880
and all that's needed is the appropriate

130
00:04:44,880 --> 00:04:46,479
three-way integration between the

131
00:04:46,479 --> 00:04:47,440
application

132
00:04:47,440 --> 00:04:51,040
and spire and parsec now all parsec

133
00:04:51,040 --> 00:04:53,040
client applications talk to parsec

134
00:04:53,040 --> 00:04:55,199
through a client library that is linked

135
00:04:55,199 --> 00:04:56,320
in process

136
00:04:56,320 --> 00:04:58,400
so if we give that client library the

137
00:04:58,400 --> 00:04:59,520
capability

138
00:04:59,520 --> 00:05:01,919
to consume a spiffy identity in the form

139
00:05:01,919 --> 00:05:04,320
of a spiffy verifiable identity document

140
00:05:04,320 --> 00:05:05,680
or an s-vid

141
00:05:05,680 --> 00:05:07,360
from the spire agent on the local

142
00:05:07,360 --> 00:05:10,000
machine then the client can pass that

143
00:05:10,000 --> 00:05:12,479
s-vid to parsec in the form of a job

144
00:05:12,479 --> 00:05:13,120
token

145
00:05:13,120 --> 00:05:15,600
which is added as an auth header onto

146
00:05:15,600 --> 00:05:17,680
the api request as it goes from the

147
00:05:17,680 --> 00:05:18,800
client's library

148
00:05:18,800 --> 00:05:21,120
into the parsec service and then the

149
00:05:21,120 --> 00:05:22,720
triangle is completed

150
00:05:22,720 --> 00:05:24,560
by a new authenticator module that we

151
00:05:24,560 --> 00:05:26,400
add to the front end of parsec

152
00:05:26,400 --> 00:05:28,479
which is going to see that incoming

153
00:05:28,479 --> 00:05:30,720
s-vid and verify it using the trust

154
00:05:30,720 --> 00:05:31,680
bundle

155
00:05:31,680 --> 00:05:34,479
from spire

156
00:05:34,800 --> 00:05:36,479
so let's get to the demo and before i

157
00:05:36,479 --> 00:05:38,080
run through the demo here i just want to

158
00:05:38,080 --> 00:05:39,520
make a couple of shout outs to some

159
00:05:39,520 --> 00:05:41,199
great people in the cncf community

160
00:05:41,199 --> 00:05:43,120
who've helped to make this possible

161
00:05:43,120 --> 00:05:44,960
so firstly to my colleague at arm

162
00:05:44,960 --> 00:05:46,960
development who actually made the demo

163
00:05:46,960 --> 00:05:48,240
we're about to see

164
00:05:48,240 --> 00:05:50,960
um also joe ellis who was the founding

165
00:05:50,960 --> 00:05:52,560
contributor of the cli

166
00:05:52,560 --> 00:05:54,400
parsec tool uh that you're going to see

167
00:05:54,400 --> 00:05:56,800
us using um and lastly to savory

168
00:05:56,800 --> 00:05:57,600
blackmon

169
00:05:57,600 --> 00:05:59,759
who created the rust client library for

170
00:05:59,759 --> 00:06:03,199
spiffy that we're going to use here

171
00:06:03,199 --> 00:06:05,360
now what you're about to see we split

172
00:06:05,360 --> 00:06:07,520
the screen into these four quadrants

173
00:06:07,520 --> 00:06:09,360
and each one is showing a shell command

174
00:06:09,360 --> 00:06:11,120
session they're all running on the same

175
00:06:11,120 --> 00:06:12,000
machine

176
00:06:12,000 --> 00:06:13,919
so on the right hand side we have our

177
00:06:13,919 --> 00:06:15,120
services

178
00:06:15,120 --> 00:06:17,520
parsec lower right and the spire service

179
00:06:17,520 --> 00:06:18,319
and the spy

180
00:06:18,319 --> 00:06:21,840
agent running upper right we've created

181
00:06:21,840 --> 00:06:23,919
a very simple minimal deployment here

182
00:06:23,919 --> 00:06:25,520
where both the service and the agent are

183
00:06:25,520 --> 00:06:26,479
running together

184
00:06:26,479 --> 00:06:28,800
on the same machine and the services are

185
00:06:28,800 --> 00:06:31,039
run during the entire demo

186
00:06:31,039 --> 00:06:32,639
we've got logging enabled so that you

187
00:06:32,639 --> 00:06:34,160
can observe what's going on

188
00:06:34,160 --> 00:06:36,319
in the services as we go through the

189
00:06:36,319 --> 00:06:37,440
demo

190
00:06:37,440 --> 00:06:39,440
and then on the left we have the two

191
00:06:39,440 --> 00:06:40,880
client windows

192
00:06:40,880 --> 00:06:42,080
and in these we're going to use the

193
00:06:42,080 --> 00:06:44,960
parsec tool which is just a simple

194
00:06:44,960 --> 00:06:46,560
command line scripting interface for

195
00:06:46,560 --> 00:06:48,560
parsec and we're just going to go

196
00:06:48,560 --> 00:06:50,160
through some simple key management

197
00:06:50,160 --> 00:06:51,039
operations

198
00:06:51,039 --> 00:06:53,120
nothing more complicated just creating

199
00:06:53,120 --> 00:06:54,240
listing and deleting

200
00:06:54,240 --> 00:06:56,240
some keys but the important thing we're

201
00:06:56,240 --> 00:06:57,360
going to show

202
00:06:57,360 --> 00:06:59,360
is that each one of those clients has

203
00:06:59,360 --> 00:07:00,639
its own key store

204
00:07:00,639 --> 00:07:02,479
the key stores are isolated from each

205
00:07:02,479 --> 00:07:04,080
other because each client has a

206
00:07:04,080 --> 00:07:05,520
different spiffy id

207
00:07:05,520 --> 00:07:08,160
parsec is going to verify those ids and

208
00:07:08,160 --> 00:07:10,000
partition the keystore views

209
00:07:10,000 --> 00:07:12,240
so that neither of our clients is able

210
00:07:12,240 --> 00:07:13,199
to see

211
00:07:13,199 --> 00:07:17,840
the keys of the other

212
00:07:23,759 --> 00:07:26,000
okay so let's start by spinning up the

213
00:07:26,000 --> 00:07:27,759
parsec service

214
00:07:27,759 --> 00:07:28,960
and then from one of the client

215
00:07:28,960 --> 00:07:30,960
applications we'll just run a quick

216
00:07:30,960 --> 00:07:34,160
ping using the parsec tool just to make

217
00:07:34,160 --> 00:07:36,560
sure that parsec has been spun up

218
00:07:36,560 --> 00:07:38,560
and is healthy and agreeing to talk back

219
00:07:38,560 --> 00:07:41,680
to us so there we go

220
00:07:41,680 --> 00:07:43,440
and now upper right will spin up the

221
00:07:43,440 --> 00:07:45,440
spire service

222
00:07:45,440 --> 00:07:48,560
and then we'll generate a join token

223
00:07:48,560 --> 00:07:50,639
from the spyder service which we need to

224
00:07:50,639 --> 00:07:53,680
start the agent

225
00:07:55,039 --> 00:07:56,840
and so now we're going to use that join

226
00:07:56,840 --> 00:07:58,479
token

227
00:07:58,479 --> 00:08:02,639
to join the agent to the system

228
00:08:07,759 --> 00:08:09,280
okay and there we go so we have the

229
00:08:09,280 --> 00:08:11,039
agent running there as well

230
00:08:11,039 --> 00:08:13,440
so now we're going to register two

231
00:08:13,440 --> 00:08:15,440
spiffy workload ids

232
00:08:15,440 --> 00:08:17,919
for our two clients um we're going to do

233
00:08:17,919 --> 00:08:19,680
this based on the unix

234
00:08:19,680 --> 00:08:22,160
user id of each client so we're running

235
00:08:22,160 --> 00:08:24,639
each client as a different unix user

236
00:08:24,639 --> 00:08:27,280
we're using the uids a thousand and two

237
00:08:27,280 --> 00:08:29,280
and a thousand and three

238
00:08:29,280 --> 00:08:31,280
um so in this really simple system the

239
00:08:31,280 --> 00:08:32,640
only selector

240
00:08:32,640 --> 00:08:35,200
is going to be the uid but of course we

241
00:08:35,200 --> 00:08:37,360
could have any number of selectors

242
00:08:37,360 --> 00:08:42,880
to map the workloads to their ids

243
00:08:42,958 --> 00:08:44,640
okay so both of our workloads now

244
00:08:44,640 --> 00:08:46,320
registered with their two different

245
00:08:46,320 --> 00:08:47,839
spiffy ids

246
00:08:47,839 --> 00:08:50,240
so let's now go ahead start interacting

247
00:08:50,240 --> 00:08:52,080
with parsec

248
00:08:52,080 --> 00:08:53,760
from those two client windows and we're

249
00:08:53,760 --> 00:08:55,839
just going to use the parsex cli tool

250
00:08:55,839 --> 00:08:56,399
here

251
00:08:56,399 --> 00:08:58,080
to run some simple key management

252
00:08:58,080 --> 00:09:00,320
operations

253
00:09:00,320 --> 00:09:09,440
so first of all we'll list the keys

254
00:09:09,440 --> 00:09:11,120
and we get an empty list back to show

255
00:09:11,120 --> 00:09:12,880
that we're starting from a clean state

256
00:09:12,880 --> 00:09:14,959
we haven't created any keys yet

257
00:09:14,959 --> 00:09:16,560
so you can see the bottom right just

258
00:09:16,560 --> 00:09:18,080
there also

259
00:09:18,080 --> 00:09:21,120
we'll highlight it just there um but

260
00:09:21,120 --> 00:09:22,399
parsec has

261
00:09:22,399 --> 00:09:24,560
seen and validated the job token that

262
00:09:24,560 --> 00:09:25,600
was passed to it

263
00:09:25,600 --> 00:09:27,040
and mapped it to its correct

264
00:09:27,040 --> 00:09:28,720
corresponding spiffy id

265
00:09:28,720 --> 00:09:30,399
which becomes a name space for the key

266
00:09:30,399 --> 00:09:31,839
store

267
00:09:31,839 --> 00:09:33,760
okay let's create a key now with the

268
00:09:33,760 --> 00:09:35,760
parsec tool from that first client don't

269
00:09:35,760 --> 00:09:38,240
worry about the details of the key

270
00:09:38,240 --> 00:09:41,040
um except that its name is toto that's

271
00:09:41,040 --> 00:09:44,240
generate key toto

272
00:09:44,240 --> 00:09:46,560
okay so it's telling us that the parsec

273
00:09:46,560 --> 00:09:48,640
key toto was generated you

274
00:09:48,640 --> 00:09:50,240
see some chatter there from the parsec

275
00:09:50,240 --> 00:09:52,320
service as well

276
00:09:52,320 --> 00:09:55,600
but now let's switch clients and the

277
00:09:55,600 --> 00:09:57,600
lower clients begin to repeat that list

278
00:09:57,600 --> 00:09:59,519
keys operation

279
00:09:59,519 --> 00:10:01,040
and you'll notice again that the key

280
00:10:01,040 --> 00:10:02,640
store is empty

281
00:10:02,640 --> 00:10:05,440
the key we just created isn't listed now

282
00:10:05,440 --> 00:10:06,959
the reason this isn't listed here is

283
00:10:06,959 --> 00:10:08,720
because this is a different client

284
00:10:08,720 --> 00:10:11,279
a different spiffy id and also it's a

285
00:10:11,279 --> 00:10:12,000
different name

286
00:10:12,000 --> 00:10:14,240
space and so it's a different key store

287
00:10:14,240 --> 00:10:16,160
this one is still empty

288
00:10:16,160 --> 00:10:19,200
and just to label that point you'll also

289
00:10:19,200 --> 00:10:21,600
see that we can't delete that key either

290
00:10:21,600 --> 00:10:24,079
um if we try to delete it here let's run

291
00:10:24,079 --> 00:10:26,560
a delete command

292
00:10:26,560 --> 00:10:28,480
it's actually a destroy command let's

293
00:10:28,480 --> 00:10:32,720
run a destroy command for toto

294
00:10:32,720 --> 00:10:34,480
okay if parsec is now reporting that

295
00:10:34,480 --> 00:10:35,680
we're trying to delete a key that

296
00:10:35,680 --> 00:10:38,000
doesn't exist so it is now ensuring

297
00:10:38,000 --> 00:10:40,640
that the second client cannot see or try

298
00:10:40,640 --> 00:10:42,720
to work with or do any operations on the

299
00:10:42,720 --> 00:10:44,640
keys of the first client

300
00:10:44,640 --> 00:10:46,399
so let's go back to where we can see it

301
00:10:46,399 --> 00:10:48,000
let's go back to the first client top

302
00:10:48,000 --> 00:10:48,560
left

303
00:10:48,560 --> 00:10:50,720
and now destroy the key we'll list it

304
00:10:50,720 --> 00:10:51,680
first

305
00:10:51,680 --> 00:10:53,920
show that it's still there and then

306
00:10:53,920 --> 00:10:56,640
we'll destroy it

307
00:10:59,040 --> 00:11:01,680
and lastly one final list keys to show

308
00:11:01,680 --> 00:11:03,600
the store is empty again so there we go

309
00:11:03,600 --> 00:11:05,440
it deleted successfully

310
00:11:05,440 --> 00:11:08,160
um and we're done uh so you've seen two

311
00:11:08,160 --> 00:11:10,079
distinct parsec clients using spiffy

312
00:11:10,079 --> 00:11:10,880
inspire

313
00:11:10,880 --> 00:11:13,440
for the identity management parsec for

314
00:11:13,440 --> 00:11:14,880
the key store management

315
00:11:14,880 --> 00:11:17,519
using those spiffy ids to ensure that

316
00:11:17,519 --> 00:11:19,760
the key stores are kept separate

317
00:11:19,760 --> 00:11:22,079
and that's it that's the demo it's very

318
00:11:22,079 --> 00:11:23,279
simple we're just creating and

319
00:11:23,279 --> 00:11:25,040
destroying some keys otherwise not doing

320
00:11:25,040 --> 00:11:26,399
anything interesting with them

321
00:11:26,399 --> 00:11:28,720
but it very visibly demonstrates this

322
00:11:28,720 --> 00:11:30,399
principle of isolation

323
00:11:30,399 --> 00:11:32,480
uh using the spiffy ids as the name

324
00:11:32,480 --> 00:11:33,440
space

325
00:11:33,440 --> 00:11:35,279
um and with that let me hand over to

326
00:11:35,279 --> 00:11:39,200
andres to wrap up the talk for us

327
00:11:39,600 --> 00:11:42,399
thanks paul you've said simple but it is

328
00:11:42,399 --> 00:11:43,600
illuminating

329
00:11:43,600 --> 00:11:45,680
to see how we can do hardware-backed

330
00:11:45,680 --> 00:11:46,880
security

331
00:11:46,880 --> 00:11:50,560
for multi-tenancy at the edge in a very

332
00:11:50,560 --> 00:11:53,600
simple but secure way leveraging

333
00:11:53,600 --> 00:11:56,880
parsec spiffy inspire if you would like

334
00:11:56,880 --> 00:11:57,600
to learn more

335
00:11:57,600 --> 00:12:00,240
about the projects how they come

336
00:12:00,240 --> 00:12:00,959
together

337
00:12:00,959 --> 00:12:04,480
as well as the intricacies that there

338
00:12:04,480 --> 00:12:05,120
are to

339
00:12:05,120 --> 00:12:07,760
each of the projects respectively we'd

340
00:12:07,760 --> 00:12:09,120
like to invite you to

341
00:12:09,120 --> 00:12:11,200
check the resources available you see on

342
00:12:11,200 --> 00:12:13,600
the screen you will find the

343
00:12:13,600 --> 00:12:16,079
code repositories on github for both

344
00:12:16,079 --> 00:12:17,680
parsec as well as

345
00:12:17,680 --> 00:12:20,880
spiffy inspire the respective slack

346
00:12:20,880 --> 00:12:21,839
channels

347
00:12:21,839 --> 00:12:24,079
if you have any questions if you would

348
00:12:24,079 --> 00:12:25,200
like to

349
00:12:25,200 --> 00:12:28,320
share work that you're doing and would

350
00:12:28,320 --> 00:12:28,959
you like

351
00:12:28,959 --> 00:12:30,959
feedback or the perspective of others

352
00:12:30,959 --> 00:12:33,519
that's a great place to come join

353
00:12:33,519 --> 00:12:36,320
exchange ideas learn from others and

354
00:12:36,320 --> 00:12:39,200
collaborate with the community and last

355
00:12:39,200 --> 00:12:42,639
here are some links to the project

356
00:12:42,639 --> 00:12:45,120
websites for each of the projects where

357
00:12:45,120 --> 00:12:46,240
you'll find

358
00:12:46,240 --> 00:12:49,519
documentation available i hope that you

359
00:12:49,519 --> 00:12:50,000
find

360
00:12:50,000 --> 00:12:52,399
our talk informational and hopefully

361
00:12:52,399 --> 00:12:54,720
it's something you can get to try for

362
00:12:54,720 --> 00:12:58,240
yourself pretty soon thank you

363
00:12:58,240 --> 00:13:02,160
thanks very much

