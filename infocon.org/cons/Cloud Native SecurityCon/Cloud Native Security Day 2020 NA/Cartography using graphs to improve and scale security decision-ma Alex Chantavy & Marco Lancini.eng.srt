1
00:00:00,000 --> 00:00:02,879
hello everyone i'm alex cintavi and i'm

2
00:00:02,879 --> 00:00:04,560
marco lancini

3
00:00:04,560 --> 00:00:06,160
today we're going to tell you about a

4
00:00:06,160 --> 00:00:08,400
free open source graph tool that we work

5
00:00:08,400 --> 00:00:08,720
on

6
00:00:08,720 --> 00:00:11,440
called cartography our talk is called

7
00:00:11,440 --> 00:00:13,679
using graphs to improve and scale

8
00:00:13,679 --> 00:00:16,480
security decision making it's an honor

9
00:00:16,480 --> 00:00:17,359
for us to

10
00:00:17,359 --> 00:00:19,359
present cartography here at cloud native

11
00:00:19,359 --> 00:00:20,560
security day

12
00:00:20,560 --> 00:00:22,160
we hope you find it and the techniques

13
00:00:22,160 --> 00:00:23,760
we present today useful

14
00:00:23,760 --> 00:00:25,680
in your own teams and we also look

15
00:00:25,680 --> 00:00:27,599
forward to receiving your feedback

16
00:00:27,599 --> 00:00:30,640
and contributions

17
00:00:30,640 --> 00:00:32,320
so just to tell you a little bit about

18
00:00:32,320 --> 00:00:34,399
who we are so i'm alex i'm a software

19
00:00:34,399 --> 00:00:35,680
engineer at lyft

20
00:00:35,680 --> 00:00:38,160
i have a background in red teaming cloud

21
00:00:38,160 --> 00:00:39,600
environments so i kind of look at all

22
00:00:39,600 --> 00:00:41,040
these security problems from

23
00:00:41,040 --> 00:00:44,800
a little bit of an offensive slant

24
00:00:44,800 --> 00:00:46,879
and i'm marco lancini i'm a cloud

25
00:00:46,879 --> 00:00:47,920
security engineer

26
00:00:47,920 --> 00:00:50,399
a thought machine in the uk and i'm also

27
00:00:50,399 --> 00:00:54,320
the curator of cloud cyclists.com

28
00:00:55,360 --> 00:00:56,960
so i'd like to start off by this

29
00:00:56,960 --> 00:00:58,879
presentation by telling you the story

30
00:00:58,879 --> 00:01:01,359
about why cartography was designed

31
00:01:01,359 --> 00:01:04,640
in the first place it all began with a

32
00:01:04,640 --> 00:01:05,600
common problem

33
00:01:05,600 --> 00:01:08,159
that security teams and all cloud native

34
00:01:08,159 --> 00:01:08,720
companies

35
00:01:08,720 --> 00:01:12,240
are facing things are moving too fast

36
00:01:12,240 --> 00:01:14,479
and when things move fast there's lots

37
00:01:14,479 --> 00:01:16,320
of security and tech debt

38
00:01:16,320 --> 00:01:18,640
that accrues and because things are

39
00:01:18,640 --> 00:01:19,840
moving so fast

40
00:01:19,840 --> 00:01:22,720
there's not time to document things and

41
00:01:22,720 --> 00:01:23,920
everybody

42
00:01:23,920 --> 00:01:25,600
develops their own sort of tribal

43
00:01:25,600 --> 00:01:28,159
knowledge with hyper growth comes

44
00:01:28,159 --> 00:01:31,600
a large attack surface and one of the

45
00:01:31,600 --> 00:01:32,880
problems that we aimed

46
00:01:32,880 --> 00:01:35,280
to that we found ourselves needing to

47
00:01:35,280 --> 00:01:37,119
address was how can we

48
00:01:37,119 --> 00:01:40,640
understand track and manage our infra as

49
00:01:40,640 --> 00:01:41,600
it changes

50
00:01:41,600 --> 00:01:46,000
over time this is compounded by the fact

51
00:01:46,000 --> 00:01:49,200
that modern infra is complicated there

52
00:01:49,200 --> 00:01:49,520
are

53
00:01:49,520 --> 00:01:51,600
very very complicated permissions models

54
00:01:51,600 --> 00:01:54,159
on all the major cloud providers

55
00:01:54,159 --> 00:01:56,799
uh for example you have your you have

56
00:01:56,799 --> 00:01:58,880
with amazon web services you'll have

57
00:01:58,880 --> 00:02:01,439
identity and access management gcp

58
00:02:01,439 --> 00:02:02,399
google has their

59
00:02:02,399 --> 00:02:06,159
own solution for iam and so

60
00:02:06,159 --> 00:02:08,639
you'll have one solution that will set

61
00:02:08,639 --> 00:02:10,800
up identities and accesses

62
00:02:10,800 --> 00:02:12,959
in one way and then you'll have this

63
00:02:12,959 --> 00:02:14,959
cloud system that'll do that and then

64
00:02:14,959 --> 00:02:16,720
there'll also need you'll also need to

65
00:02:16,720 --> 00:02:18,239
deal with plain old

66
00:02:18,239 --> 00:02:20,480
username and password pairs on a storage

67
00:02:20,480 --> 00:02:22,640
resource or database resource

68
00:02:22,640 --> 00:02:24,879
and you need to answer the question who

69
00:02:24,879 --> 00:02:25,760
can become

70
00:02:25,760 --> 00:02:29,280
whom how does this im solution allow

71
00:02:29,280 --> 00:02:31,599
identities to become other identities

72
00:02:31,599 --> 00:02:32,879
and how are you opening

73
00:02:32,879 --> 00:02:36,239
up your environment for transitive risk

74
00:02:36,239 --> 00:02:39,280
and the question of which identities

75
00:02:39,280 --> 00:02:42,080
may access what resources is not

76
00:02:42,080 --> 00:02:42,959
immediately

77
00:02:42,959 --> 00:02:46,400
obvious and with all of these multiple

78
00:02:46,400 --> 00:02:47,120
vendors

79
00:02:47,120 --> 00:02:49,519
lots of knobs and dials it's easy to get

80
00:02:49,519 --> 00:02:50,720
this wrong

81
00:02:50,720 --> 00:02:52,959
and there are big consequences for

82
00:02:52,959 --> 00:02:54,400
getting it wrong

83
00:02:54,400 --> 00:02:56,400
and the couple of the scenarios that we

84
00:02:56,400 --> 00:02:58,720
wanted to address here

85
00:02:58,720 --> 00:03:01,200
was we wanted something that could check

86
00:03:01,200 --> 00:03:02,159
and audit

87
00:03:02,159 --> 00:03:05,440
accesses we wanted to understand policy

88
00:03:05,440 --> 00:03:06,159
grants

89
00:03:06,159 --> 00:03:08,720
for cloud resources and we wanted to

90
00:03:08,720 --> 00:03:10,800
understand the effect of changes

91
00:03:10,800 --> 00:03:14,080
to network policy

92
00:03:14,080 --> 00:03:16,640
and of course we wanted it all yesterday

93
00:03:16,640 --> 00:03:17,120
and

94
00:03:17,120 --> 00:03:20,159
with me for minimal cost every

95
00:03:20,159 --> 00:03:22,159
company faces this problem where you

96
00:03:22,159 --> 00:03:23,200
have limited

97
00:03:23,200 --> 00:03:26,400
resources we had a small team

98
00:03:26,400 --> 00:03:28,159
and we needed to automate where it was

99
00:03:28,159 --> 00:03:30,080
practical we need to aggressively

100
00:03:30,080 --> 00:03:32,959
prioritize projects and you know even if

101
00:03:32,959 --> 00:03:34,000
you have a large team

102
00:03:34,000 --> 00:03:35,280
you're still going to run into this

103
00:03:35,280 --> 00:03:37,599
problem of balancing everything

104
00:03:37,599 --> 00:03:43,040
so what could we do about these problems

105
00:03:43,120 --> 00:03:44,959
first i have to give credit to sasha

106
00:03:44,959 --> 00:03:46,480
faust who originally

107
00:03:46,480 --> 00:03:48,720
built cartography by asking this

108
00:03:48,720 --> 00:03:49,599
question

109
00:03:49,599 --> 00:03:52,080
can we apply an offensive security

110
00:03:52,080 --> 00:03:53,840
approach to these keep the lights on

111
00:03:53,840 --> 00:03:55,439
problems these problems that have to

112
00:03:55,439 --> 00:03:56,640
deal with

113
00:03:56,640 --> 00:03:58,239
essentially running the business keeping

114
00:03:58,239 --> 00:04:00,080
everything alive

115
00:04:00,080 --> 00:04:02,159
what offensive approach was he actually

116
00:04:02,159 --> 00:04:03,439
talking about

117
00:04:03,439 --> 00:04:06,319
well there's this famous quote and if

118
00:04:06,319 --> 00:04:07,920
you've been in infosec the past couple

119
00:04:07,920 --> 00:04:09,680
years you've almost certainly seen this

120
00:04:09,680 --> 00:04:10,720
at some point

121
00:04:10,720 --> 00:04:15,040
and that's defenders think in lists

122
00:04:15,040 --> 00:04:18,079
attackers think in graphs as long as

123
00:04:18,079 --> 00:04:20,079
this is true attackers win

124
00:04:20,079 --> 00:04:22,880
pardon the overused drake meme i i'm

125
00:04:22,880 --> 00:04:24,880
honestly sorry about that but this quote

126
00:04:24,880 --> 00:04:26,800
has been cited so much

127
00:04:26,800 --> 00:04:29,120
it's almost become as ubiquitous as the

128
00:04:29,120 --> 00:04:30,000
drake meme

129
00:04:30,000 --> 00:04:31,680
but i promise that i'm bringing it up

130
00:04:31,680 --> 00:04:33,600
again for good reason

131
00:04:33,600 --> 00:04:36,320
so john lombard at microsoft who made

132
00:04:36,320 --> 00:04:37,280
this quote

133
00:04:37,280 --> 00:04:39,840
says has this influential paper where he

134
00:04:39,840 --> 00:04:41,600
says this and the idea is that if you

135
00:04:41,600 --> 00:04:43,680
only look at your high valued assets

136
00:04:43,680 --> 00:04:46,639
in terms of lists of people who may

137
00:04:46,639 --> 00:04:47,919
access them

138
00:04:47,919 --> 00:04:50,080
you're missing out on the opportunities

139
00:04:50,080 --> 00:04:51,600
that an attacker is going to have

140
00:04:51,600 --> 00:04:54,639
moving laterally within your environment

141
00:04:54,639 --> 00:04:56,800
so this particular example has to deal

142
00:04:56,800 --> 00:04:58,800
with a windows on-prem domain

143
00:04:58,800 --> 00:04:59,840
environment

144
00:04:59,840 --> 00:05:02,320
where an attacker could gain access to

145
00:05:02,320 --> 00:05:03,840
this terminal server

146
00:05:03,840 --> 00:05:06,000
dump creds from memory and then use

147
00:05:06,000 --> 00:05:08,080
those to move closer and closer to

148
00:05:08,080 --> 00:05:10,560
objective dumping credits along the way

149
00:05:10,560 --> 00:05:12,560
what are those graph paths to reach

150
00:05:12,560 --> 00:05:14,479
there so

151
00:05:14,479 --> 00:05:18,000
in the cloud doing a similar technique

152
00:05:18,000 --> 00:05:19,919
like this is even more effective because

153
00:05:19,919 --> 00:05:22,000
you can take advantage of the patchwork

154
00:05:22,000 --> 00:05:24,720
set of permissions models and multiple

155
00:05:24,720 --> 00:05:26,240
zig-zaggy ways to

156
00:05:26,240 --> 00:05:30,639
reach your target assets if you're

157
00:05:30,639 --> 00:05:33,280
a cloud-first company cloud-native

158
00:05:33,280 --> 00:05:34,080
company

159
00:05:34,080 --> 00:05:35,680
then where all of your infras

160
00:05:35,680 --> 00:05:37,840
cloud-based you have your security work

161
00:05:37,840 --> 00:05:40,799
cut out for you

162
00:05:41,199 --> 00:05:44,160
and it became clear to us that we need a

163
00:05:44,160 --> 00:05:44,639
self

164
00:05:44,639 --> 00:05:47,840
maintaining map we want something that

165
00:05:47,840 --> 00:05:49,840
could highlight structural risks and

166
00:05:49,840 --> 00:05:50,320
answer

167
00:05:50,320 --> 00:05:53,199
hard to answer questions we came up with

168
00:05:53,199 --> 00:05:53,600
these

169
00:05:53,600 --> 00:05:55,759
use cases that we wanted a central view

170
00:05:55,759 --> 00:05:57,280
or technical assets

171
00:05:57,280 --> 00:05:59,120
we wanted something that we could help

172
00:05:59,120 --> 00:06:02,000
us in incident response

173
00:06:02,000 --> 00:06:04,400
security research red blue teaming and

174
00:06:04,400 --> 00:06:05,039
help us

175
00:06:05,039 --> 00:06:07,360
quickly finish the drudgery of

176
00:06:07,360 --> 00:06:08,720
compliance reports

177
00:06:08,720 --> 00:06:10,880
and audits essentially such a graph

178
00:06:10,880 --> 00:06:11,919
would help us show

179
00:06:11,919 --> 00:06:15,680
non-obvious connections between one

180
00:06:15,680 --> 00:06:18,840
piece of our security posture to

181
00:06:18,840 --> 00:06:22,560
another existing solutions that we

182
00:06:22,560 --> 00:06:23,919
looked into they're either

183
00:06:23,919 --> 00:06:27,600
really expensive proprietary locked down

184
00:06:27,600 --> 00:06:30,479
or too focused and limited in scope so

185
00:06:30,479 --> 00:06:30,800
like

186
00:06:30,800 --> 00:06:32,479
the main thing that we wanted to look

187
00:06:32,479 --> 00:06:34,080
into was because

188
00:06:34,080 --> 00:06:36,639
we had many different vendors and many

189
00:06:36,639 --> 00:06:37,759
different data sources

190
00:06:37,759 --> 00:06:41,199
the ability to quickly extend on the

191
00:06:41,199 --> 00:06:43,199
product and build plug-ins for ourselves

192
00:06:43,199 --> 00:06:43,840
that was

193
00:06:43,840 --> 00:06:47,280
a very key scenario and so that would be

194
00:06:47,280 --> 00:06:49,840
a main blocker for us in considering

195
00:06:49,840 --> 00:06:51,759
some of the other products that we

196
00:06:51,759 --> 00:06:54,000
looked at

197
00:06:54,000 --> 00:06:57,039
enter cartography so we're very really

198
00:06:57,039 --> 00:06:57,599
excited

199
00:06:57,599 --> 00:07:01,599
having um last year in march of 2019 we

200
00:07:01,599 --> 00:07:05,280
open sourced this idea to github

201
00:07:05,280 --> 00:07:06,960
come check us out github.com lyft

202
00:07:06,960 --> 00:07:08,560
cartography so

203
00:07:08,560 --> 00:07:11,680
it is a python tool that pulls

204
00:07:11,680 --> 00:07:13,840
data from all of your from many

205
00:07:13,840 --> 00:07:15,360
different

206
00:07:15,360 --> 00:07:18,240
sources and it puts them together in the

207
00:07:18,240 --> 00:07:19,840
form of a graph database

208
00:07:19,840 --> 00:07:21,840
and so what you'll see is that it'll

209
00:07:21,840 --> 00:07:23,440
what this approach lets us do

210
00:07:23,440 --> 00:07:25,680
is it lets us show these non-obvious

211
00:07:25,680 --> 00:07:27,199
relationships between

212
00:07:27,199 --> 00:07:29,520
each and every one of these assets and

213
00:07:29,520 --> 00:07:30,880
i'm going to show you how we

214
00:07:30,880 --> 00:07:33,280
modeled our organization as a graph and

215
00:07:33,280 --> 00:07:35,199
why this approach has been so

216
00:07:35,199 --> 00:07:38,319
useful and effective for us

217
00:07:38,319 --> 00:07:41,120
first off i'll start off by showing that

218
00:07:41,120 --> 00:07:41,840
we can

219
00:07:41,840 --> 00:07:45,120
model our octa infrastructure at lyft as

220
00:07:45,120 --> 00:07:46,160
a graph

221
00:07:46,160 --> 00:07:49,360
so this is an octa organization octa is

222
00:07:49,360 --> 00:07:52,639
an identity provider and as a person

223
00:07:52,639 --> 00:07:56,000
as a human i have a user identity i can

224
00:07:56,000 --> 00:07:58,319
be a member of a group

225
00:07:58,319 --> 00:08:01,440
you can set up octa to delegate access

226
00:08:01,440 --> 00:08:04,879
into your aws infrastructure so

227
00:08:04,879 --> 00:08:08,000
if you are a member of an akhta group

228
00:08:08,000 --> 00:08:11,360
then you're you may assume an aws

229
00:08:11,360 --> 00:08:15,199
role you can become an amazon identity

230
00:08:15,199 --> 00:08:17,520
and those aws identities they are

231
00:08:17,520 --> 00:08:18,240
grouped up

232
00:08:18,240 --> 00:08:22,080
into accounts an account is a notion

233
00:08:22,080 --> 00:08:25,120
of separation between business units

234
00:08:25,120 --> 00:08:28,560
so you can many companies will set up

235
00:08:28,560 --> 00:08:30,639
different departments into aws accounts

236
00:08:30,639 --> 00:08:31,599
for example so

237
00:08:31,599 --> 00:08:33,360
it's meant as an organizational way for

238
00:08:33,360 --> 00:08:34,880
you to split up different

239
00:08:34,880 --> 00:08:39,599
concerns we can tie this

240
00:08:39,599 --> 00:08:42,640
personnel data to workday or any other

241
00:08:42,640 --> 00:08:46,399
hr system so we we're adding in this new

242
00:08:46,399 --> 00:08:47,680
context you see that

243
00:08:47,680 --> 00:08:50,640
we can add in the reporting structure of

244
00:08:50,640 --> 00:08:52,399
an organization we can add in who

245
00:08:52,399 --> 00:08:53,440
belongs to which

246
00:08:53,440 --> 00:08:56,640
teams we can augment this further by

247
00:08:56,640 --> 00:08:57,839
adding okay well

248
00:08:57,839 --> 00:09:00,800
let's we have octa identities now let's

249
00:09:00,800 --> 00:09:01,519
use

250
00:09:01,519 --> 00:09:03,279
g suite identities let's add that in

251
00:09:03,279 --> 00:09:05,680
there we can get visibility onto

252
00:09:05,680 --> 00:09:08,000
the chrome extensions that our

253
00:09:08,000 --> 00:09:09,839
organization installs using

254
00:09:09,839 --> 00:09:11,920
something called cr excavator as well

255
00:09:11,920 --> 00:09:13,519
and the thing i want to call out here is

256
00:09:13,519 --> 00:09:15,920
that every single one of these edges

257
00:09:15,920 --> 00:09:19,920
is if it was actually installed onto

258
00:09:19,920 --> 00:09:23,120
if we were to represent this in a

259
00:09:23,120 --> 00:09:25,360
relational database every one of these

260
00:09:25,360 --> 00:09:26,399
edges would

261
00:09:26,399 --> 00:09:29,519
be a um would be a join

262
00:09:29,519 --> 00:09:31,200
and then if you were to do this for

263
00:09:31,200 --> 00:09:32,720
every single one of these edges it's

264
00:09:32,720 --> 00:09:35,120
typing join on table name join on table

265
00:09:35,120 --> 00:09:36,080
name this gets

266
00:09:36,080 --> 00:09:38,880
really old very quickly so representing

267
00:09:38,880 --> 00:09:40,720
this in the graph allows us to see

268
00:09:40,720 --> 00:09:44,000
all of these uh connections in a lot

269
00:09:44,000 --> 00:09:44,399
more

270
00:09:44,399 --> 00:09:46,399
intuitive way and i'm going to show you

271
00:09:46,399 --> 00:09:47,839
this scenario

272
00:09:47,839 --> 00:09:49,680
i'm putting this making this a little

273
00:09:49,680 --> 00:09:51,200
bit more hopefully a little more

274
00:09:51,200 --> 00:09:52,800
compelling

275
00:09:52,800 --> 00:09:54,320
and so the point here is that we have

276
00:09:54,320 --> 00:09:56,720
this extensible pluggable

277
00:09:56,720 --> 00:09:59,839
platform your graph becomes most useful

278
00:09:59,839 --> 00:10:01,680
when you can take our existing modules

279
00:10:01,680 --> 00:10:03,279
and join them with your own

280
00:10:03,279 --> 00:10:05,279
and doing so is a straightforward

281
00:10:05,279 --> 00:10:07,040
process

282
00:10:07,040 --> 00:10:09,360
so the scenario that i was just telling

283
00:10:09,360 --> 00:10:10,800
you right now where

284
00:10:10,800 --> 00:10:13,920
i got myself and i have an octa identity

285
00:10:13,920 --> 00:10:16,480
and i am the member of the developers

286
00:10:16,480 --> 00:10:18,240
group in october

287
00:10:18,240 --> 00:10:21,600
this lets me assume an aws role named

288
00:10:21,600 --> 00:10:24,959
developers this developer's role

289
00:10:24,959 --> 00:10:28,640
belongs to the developers aws account

290
00:10:28,640 --> 00:10:31,839
and okay so far so good this is how that

291
00:10:31,839 --> 00:10:32,640
aws

292
00:10:32,640 --> 00:10:34,720
and octave you can it's it's a

293
00:10:34,720 --> 00:10:36,640
well-documented scenario

294
00:10:36,640 --> 00:10:39,279
this is the what we wanted to do now the

295
00:10:39,279 --> 00:10:40,560
problem here is

296
00:10:40,560 --> 00:10:44,000
okay um i mentioned that that it is

297
00:10:44,000 --> 00:10:45,600
possible in aws

298
00:10:45,600 --> 00:10:48,480
to for one role to assume another role

299
00:10:48,480 --> 00:10:50,160
for one identity to

300
00:10:50,160 --> 00:10:53,279
become another identity and this is used

301
00:10:53,279 --> 00:10:53,760
as

302
00:10:53,760 --> 00:10:57,279
a feature of most iam

303
00:10:57,279 --> 00:11:00,320
solutions so as developers we have

304
00:11:00,320 --> 00:11:01,920
discovered using cartography

305
00:11:01,920 --> 00:11:05,360
that i can assume this auditor's role

306
00:11:05,360 --> 00:11:08,480
so as a developer i am able to assume

307
00:11:08,480 --> 00:11:09,120
this

308
00:11:09,120 --> 00:11:12,480
additional role is this expected is this

309
00:11:12,480 --> 00:11:13,120
not

310
00:11:13,120 --> 00:11:15,120
let's find out and then so with this

311
00:11:15,120 --> 00:11:16,560
auditor's role this otter's role

312
00:11:16,560 --> 00:11:20,480
belongs to the finance account and

313
00:11:20,480 --> 00:11:22,959
like i mentioned earlier aws accounts

314
00:11:22,959 --> 00:11:25,120
are used as ways to split up

315
00:11:25,120 --> 00:11:28,000
different concerns and so having the dev

316
00:11:28,000 --> 00:11:29,600
account and the finance account the way

317
00:11:29,600 --> 00:11:31,360
that this organization was designed was

318
00:11:31,360 --> 00:11:32,959
for those things to be separate

319
00:11:32,959 --> 00:11:35,040
and yet here we have this opportunity

320
00:11:35,040 --> 00:11:36,800
for developers to become

321
00:11:36,800 --> 00:11:39,120
auditors and view assets in the finance

322
00:11:39,120 --> 00:11:39,839
account

323
00:11:39,839 --> 00:11:41,600
potentially violating some of our

324
00:11:41,600 --> 00:11:43,440
assumptions about

325
00:11:43,440 --> 00:11:46,079
how our organization is segmented off

326
00:11:46,079 --> 00:11:47,279
from each other

327
00:11:47,279 --> 00:11:49,920
and potentially highlighting some

328
00:11:49,920 --> 00:11:50,800
potential

329
00:11:50,800 --> 00:11:53,440
compliance issues auditing issues etc

330
00:11:53,440 --> 00:11:54,320
etc

331
00:11:54,320 --> 00:11:57,839
so you know you want to have this

332
00:11:57,839 --> 00:12:00,160
visibility in your organization to

333
00:12:00,160 --> 00:12:02,720
see opportunities to move between roles

334
00:12:02,720 --> 00:12:04,079
especially when

335
00:12:04,079 --> 00:12:06,399
they cross trust boundaries and we think

336
00:12:06,399 --> 00:12:08,079
that this is a compelling and powerful

337
00:12:08,079 --> 00:12:09,200
scenario that

338
00:12:09,200 --> 00:12:10,800
a graph approach that lends itself well

339
00:12:10,800 --> 00:12:13,279
to a graph approach

340
00:12:13,279 --> 00:12:16,240
i'll talk briefly about how our tool

341
00:12:16,240 --> 00:12:17,120
does this

342
00:12:17,120 --> 00:12:20,079
so the main point the main um the core

343
00:12:20,079 --> 00:12:22,880
part of cartography is this core sync

344
00:12:22,880 --> 00:12:26,720
so we take we um we run a core sync the

345
00:12:26,720 --> 00:12:28,399
core sync of cartography so like i said

346
00:12:28,399 --> 00:12:29,680
it's a python tool

347
00:12:29,680 --> 00:12:32,160
and every single one of this of these

348
00:12:32,160 --> 00:12:33,200
data modules

349
00:12:33,200 --> 00:12:36,000
is something we call an intel module and

350
00:12:36,000 --> 00:12:36,320
what

351
00:12:36,320 --> 00:12:38,560
what each intel module does is that it

352
00:12:38,560 --> 00:12:39,440
will

353
00:12:39,440 --> 00:12:42,000
pull from its data source and write it

354
00:12:42,000 --> 00:12:43,040
to a

355
00:12:43,040 --> 00:12:46,399
graph database powered by neo4j

356
00:12:46,399 --> 00:12:48,720
and it will write that and then all that

357
00:12:48,720 --> 00:12:50,480
data will be exposed either

358
00:12:50,480 --> 00:12:53,600
via a web browser interface or via

359
00:12:53,600 --> 00:12:57,440
a api um powered by vault

360
00:12:57,440 --> 00:12:59,760
and so that's the basically the basic

361
00:12:59,760 --> 00:13:02,160
idea so we have also clean up jobs so

362
00:13:02,160 --> 00:13:03,440
what happens is that

363
00:13:03,440 --> 00:13:06,480
on every sink we set a timestamp so that

364
00:13:06,480 --> 00:13:07,519
we always keep

365
00:13:07,519 --> 00:13:10,000
the freshest data in the graph and we

366
00:13:10,000 --> 00:13:11,600
run a cleanup job

367
00:13:11,600 --> 00:13:14,160
so that nodes that are no longer there

368
00:13:14,160 --> 00:13:15,680
on the graph that are no longer there in

369
00:13:15,680 --> 00:13:16,320
real life

370
00:13:16,320 --> 00:13:19,440
they get deleted and cleaned up this

371
00:13:19,440 --> 00:13:20,480
last box

372
00:13:20,480 --> 00:13:24,079
on the right for enrichment jobs

373
00:13:24,079 --> 00:13:26,240
we after we have all this data in the

374
00:13:26,240 --> 00:13:27,760
graph we can perform

375
00:13:27,760 --> 00:13:29,600
additional analysis and additional

376
00:13:29,600 --> 00:13:31,440
enhancements to that data

377
00:13:31,440 --> 00:13:33,440
and this is another scenario of like why

378
00:13:33,440 --> 00:13:35,519
it's useful to put this

379
00:13:35,519 --> 00:13:37,519
and represent the data in the way that

380
00:13:37,519 --> 00:13:39,040
we have and i'm going to show you

381
00:13:39,040 --> 00:13:42,720
uh what this looks like right now so

382
00:13:42,720 --> 00:13:45,519
we want a compelling scenario is is my

383
00:13:45,519 --> 00:13:46,240
compute

384
00:13:46,240 --> 00:13:48,720
instance open to the internet we've just

385
00:13:48,720 --> 00:13:50,000
run our

386
00:13:50,000 --> 00:13:51,839
cartography sync we've got all these

387
00:13:51,839 --> 00:13:53,040
nodes in the graph

388
00:13:53,040 --> 00:13:55,680
what can we do with all this data can we

389
00:13:55,680 --> 00:13:58,079
exploit it can we make use of it in a

390
00:13:58,079 --> 00:14:00,959
you know in a more intuitive way yeah so

391
00:14:00,959 --> 00:14:02,320
i want to answer this question

392
00:14:02,320 --> 00:14:05,279
is this ec2 instance at the bottom

393
00:14:05,279 --> 00:14:07,199
left-hand corner of your screen here

394
00:14:07,199 --> 00:14:09,360
is it open to the internet given all of

395
00:14:09,360 --> 00:14:11,440
the relationships that are available to

396
00:14:11,440 --> 00:14:12,480
it in the graph

397
00:14:12,480 --> 00:14:15,040
so if you look at the top we have an ip

398
00:14:15,040 --> 00:14:15,519
range

399
00:14:15,519 --> 00:14:17,760
representing the whole internet zero

400
00:14:17,760 --> 00:14:18,560
zero zero

401
00:14:18,560 --> 00:14:22,720
slash zero so we can ask ourselves by

402
00:14:22,720 --> 00:14:24,240
starting to form this

403
00:14:24,240 --> 00:14:27,760
query using cipher query language and so

404
00:14:27,760 --> 00:14:30,480
we say that okay is let's draw a path

405
00:14:30,480 --> 00:14:33,920
from an ip range with the zero subnet

406
00:14:33,920 --> 00:14:37,600
and connect it to aws ip permission

407
00:14:37,600 --> 00:14:38,160
inbound

408
00:14:38,160 --> 00:14:42,160
rules ip rules do any of those ip rules

409
00:14:42,160 --> 00:14:45,440
map back to an existing ec2 security

410
00:14:45,440 --> 00:14:46,320
group

411
00:14:46,320 --> 00:14:48,959
if so let's let's keep going let's keep

412
00:14:48,959 --> 00:14:50,639
drawing this path let's build on this

413
00:14:50,639 --> 00:14:51,120
query

414
00:14:51,120 --> 00:14:54,560
so from an ec2 security group can i map

415
00:14:54,560 --> 00:14:56,320
that back to a network interface

416
00:14:56,320 --> 00:15:01,360
and map it back to a amazon ec2 instance

417
00:15:01,360 --> 00:15:04,560
if so if this path matches

418
00:15:04,560 --> 00:15:07,199
let's set exposed internet on that

419
00:15:07,199 --> 00:15:08,720
instance to true

420
00:15:08,720 --> 00:15:11,600
this way what we can do later on is we

421
00:15:11,600 --> 00:15:12,639
can query

422
00:15:12,639 --> 00:15:15,519
this we can query for all ec2 instances

423
00:15:15,519 --> 00:15:15,839
that

424
00:15:15,839 --> 00:15:18,399
have this exposed internet true label

425
00:15:18,399 --> 00:15:19,760
without needing to do

426
00:15:19,760 --> 00:15:22,000
this long query that i showed you right

427
00:15:22,000 --> 00:15:22,880
here

428
00:15:22,880 --> 00:15:24,800
needing to go through this entire path

429
00:15:24,800 --> 00:15:26,000
traversal and

430
00:15:26,000 --> 00:15:28,240
so you know it's easy to so what you're

431
00:15:28,240 --> 00:15:29,120
able to do with

432
00:15:29,120 --> 00:15:32,240
our platform is come up with your own

433
00:15:32,240 --> 00:15:34,399
enhancements come up with your own

434
00:15:34,399 --> 00:15:35,759
analysis jobs

435
00:15:35,759 --> 00:15:37,839
to perform these sorts of shortcuts to

436
00:15:37,839 --> 00:15:41,040
look at and with that

437
00:15:41,040 --> 00:15:43,600
i'm going to hand over the mic to marco

438
00:15:43,600 --> 00:15:45,279
to tell you about a real-life

439
00:15:45,279 --> 00:15:48,959
deployment hello let me just

440
00:15:48,959 --> 00:15:52,240
share my screen okay so

441
00:15:52,240 --> 00:15:56,000
as alex uh was just saying

442
00:15:56,000 --> 00:15:59,120
staying on top of cloud environments

443
00:15:59,120 --> 00:16:02,320
is a challenge that many organizations

444
00:16:02,320 --> 00:16:03,360
face

445
00:16:03,360 --> 00:16:06,079
i work for a software company building a

446
00:16:06,079 --> 00:16:08,000
core banking solution in a highly

447
00:16:08,000 --> 00:16:09,519
regulated environment

448
00:16:09,519 --> 00:16:12,240
we are also by default a multi-cloud

449
00:16:12,240 --> 00:16:13,839
native organization

450
00:16:13,839 --> 00:16:17,279
hence we needed a way to detect identify

451
00:16:17,279 --> 00:16:19,360
categorize and visualize all the

452
00:16:19,360 --> 00:16:21,519
different assets we deployed in our

453
00:16:21,519 --> 00:16:22,240
state

454
00:16:22,240 --> 00:16:24,720
regardless of the cloud provider news

455
00:16:24,720 --> 00:16:27,440
whether aws ag or gcp

456
00:16:27,440 --> 00:16:30,320
here i want to describe briefly the

457
00:16:30,320 --> 00:16:31,920
process we went through

458
00:16:31,920 --> 00:16:34,720
to adopt cartography and to find a way

459
00:16:34,720 --> 00:16:36,240
to effectively use

460
00:16:36,240 --> 00:16:39,519
and also act upon the data we collected

461
00:16:39,519 --> 00:16:39,839
with

462
00:16:39,839 --> 00:16:42,959
it basically we

463
00:16:42,959 --> 00:16:45,759
started with a very high level overview

464
00:16:45,759 --> 00:16:48,480
this picture shows our multi-cloud setup

465
00:16:48,480 --> 00:16:50,240
at a glance this is something we run in

466
00:16:50,240 --> 00:16:50,880
production

467
00:16:50,880 --> 00:16:54,800
and is going is up 24 7. uh the bundle

468
00:16:54,800 --> 00:16:56,639
of cartography and neo4j

469
00:16:56,639 --> 00:17:00,240
runs in the kubernetes cluster of

470
00:17:00,240 --> 00:17:02,839
gcp project we dedicate to internal

471
00:17:02,839 --> 00:17:04,240
tooling and

472
00:17:04,240 --> 00:17:06,959
from there we instructed cartography to

473
00:17:06,959 --> 00:17:09,679
pull assets from every gcp project

474
00:17:09,679 --> 00:17:12,959
and every ws account in our estate to do

475
00:17:12,959 --> 00:17:15,119
so we had to grant cartography the

476
00:17:15,119 --> 00:17:16,959
minimum set of permissions

477
00:17:16,959 --> 00:17:19,280
necessary to pull data without

478
00:17:19,280 --> 00:17:20,400
introducing risks

479
00:17:20,400 --> 00:17:22,880
to the infrastructure as we said highly

480
00:17:22,880 --> 00:17:23,839
regulated

481
00:17:23,839 --> 00:17:26,799
for ws we use the hub and spock model

482
00:17:26,799 --> 00:17:27,679
for gcp

483
00:17:27,679 --> 00:17:30,720
we rely on service accounts at the

484
00:17:30,720 --> 00:17:34,799
organization level more in detail

485
00:17:34,799 --> 00:17:37,120
the overall deployment is made of two

486
00:17:37,120 --> 00:17:38,160
main components

487
00:17:38,160 --> 00:17:40,559
a stateful set for neo4j and a chrome

488
00:17:40,559 --> 00:17:42,480
job for cartography

489
00:17:42,480 --> 00:17:45,760
if we start for neo4j the state stateful

490
00:17:45,760 --> 00:17:47,600
set is made of two container

491
00:17:47,600 --> 00:17:50,480
one specific for database itself and one

492
00:17:50,480 --> 00:17:52,880
dedicated to both to proxy

493
00:17:52,880 --> 00:17:55,280
which is a reverse proxy that we use to

494
00:17:55,280 --> 00:17:57,919
integrate with our identity provider

495
00:17:57,919 --> 00:18:00,240
there are two services exposing the

496
00:18:00,240 --> 00:18:01,600
relevant courts

497
00:18:01,600 --> 00:18:05,200
one service for all http based services

498
00:18:05,200 --> 00:18:07,520
like the neo4j web interface

499
00:18:07,520 --> 00:18:10,960
and another service the bold service

500
00:18:10,960 --> 00:18:13,600
for interacting with neo4j

501
00:18:13,600 --> 00:18:15,280
programmatically for example

502
00:18:15,280 --> 00:18:18,400
what cartography uses in addition we

503
00:18:18,400 --> 00:18:21,039
have kubernetes ingress uses an entry

504
00:18:21,039 --> 00:18:23,679
point for connecting to a database

505
00:18:23,679 --> 00:18:26,720
and also persistent volumes for

506
00:18:26,720 --> 00:18:29,679
storing the data of the database and

507
00:18:29,679 --> 00:18:30,240
also

508
00:18:30,240 --> 00:18:33,520
we integrated actually volt

509
00:18:33,520 --> 00:18:36,240
with our gke cluster so to provide

510
00:18:36,240 --> 00:18:38,160
secrets to the running containers

511
00:18:38,160 --> 00:18:40,799
for example the neo4j password is stored

512
00:18:40,799 --> 00:18:42,480
within bold and retrieved

513
00:18:42,480 --> 00:18:45,679
on time the cartography setup instead is

514
00:18:45,679 --> 00:18:46,720
more simple

515
00:18:46,720 --> 00:18:48,799
cartography gets released as a python

516
00:18:48,799 --> 00:18:50,400
package so it is

517
00:18:50,400 --> 00:18:52,320
fairly straightforward to containerize

518
00:18:52,320 --> 00:18:55,120
it we then rely on a chrome job

519
00:18:55,120 --> 00:18:58,160
which is set to run daily and as before

520
00:18:58,160 --> 00:18:59,919
we integrated with vault so that

521
00:18:59,919 --> 00:19:02,160
cartography can fetch credentials for

522
00:19:02,160 --> 00:19:02,559
both

523
00:19:02,559 --> 00:19:06,160
aws and gcp at runtime

524
00:19:06,160 --> 00:19:09,280
so we have our setup with cartography

525
00:19:09,280 --> 00:19:10,480
running daily and

526
00:19:10,480 --> 00:19:13,280
pulling assets from all our environments

527
00:19:13,280 --> 00:19:15,440
and the next thing we wanted to see how

528
00:19:15,440 --> 00:19:16,080
we could

529
00:19:16,080 --> 00:19:18,799
put the data collected to work the most

530
00:19:18,799 --> 00:19:21,039
direct way to interact with this data is

531
00:19:21,039 --> 00:19:23,200
to connect to the browser built into

532
00:19:23,200 --> 00:19:24,160
neo4j

533
00:19:24,160 --> 00:19:26,640
you connect to the ingress and you can

534
00:19:26,640 --> 00:19:28,559
manually run queries

535
00:19:28,559 --> 00:19:31,200
although the neo4j browser gives you

536
00:19:31,200 --> 00:19:33,440
full freedom to perform exploration of

537
00:19:33,440 --> 00:19:34,080
the data

538
00:19:34,080 --> 00:19:36,400
and it's quite powerful this method is

539
00:19:36,400 --> 00:19:38,240
also completely manual

540
00:19:38,240 --> 00:19:40,640
as you will keep have to manually copy

541
00:19:40,640 --> 00:19:42,559
paste in queries in the web interface so

542
00:19:42,559 --> 00:19:44,320
this doesn't scale it's too

543
00:19:44,320 --> 00:19:47,919
many so we had to change our approach

544
00:19:47,919 --> 00:19:50,000
we wanted to be able to run queries

545
00:19:50,000 --> 00:19:50,960
automatically

546
00:19:50,960 --> 00:19:54,000
against our data set so first we had to

547
00:19:54,000 --> 00:19:56,320
define a structure format for storing

548
00:19:56,320 --> 00:19:57,440
these queries

549
00:19:57,440 --> 00:20:00,080
which allowed allowed us to enrich them

550
00:20:00,080 --> 00:20:01,600
with metadata

551
00:20:01,600 --> 00:20:04,240
so we store them in json as a list of

552
00:20:04,240 --> 00:20:05,360
dictionaries

553
00:20:05,360 --> 00:20:08,559
where each dictionary is a query

554
00:20:08,559 --> 00:20:10,480
enriched with metadata we have name

555
00:20:10,480 --> 00:20:13,360
description tags for easy filtering

556
00:20:13,360 --> 00:20:16,559
human readable list of fields and that's

557
00:20:16,559 --> 00:20:18,799
the role metadata enriching the main

558
00:20:18,799 --> 00:20:20,480
cipher query

559
00:20:20,480 --> 00:20:23,280
so we defined a custom query format and

560
00:20:23,280 --> 00:20:24,320
we define

561
00:20:24,320 --> 00:20:27,840
multiple queries that were important for

562
00:20:27,840 --> 00:20:28,880
our organization

563
00:20:28,880 --> 00:20:31,520
like as alex was saying which is it you

564
00:20:31,520 --> 00:20:32,799
are public to the word

565
00:20:32,799 --> 00:20:35,120
s3 bucket with anonymous access many

566
00:20:35,120 --> 00:20:35,840
nayam

567
00:20:35,840 --> 00:20:38,320
and many more the last piece of the

568
00:20:38,320 --> 00:20:41,039
puzzle was to find a method for

569
00:20:41,039 --> 00:20:42,240
empowering people

570
00:20:42,240 --> 00:20:44,559
and teams to perform analysis of the

571
00:20:44,559 --> 00:20:45,600
collected data

572
00:20:45,600 --> 00:20:48,960
on demand what better than jupiter

573
00:20:48,960 --> 00:20:49,679
notebooks

574
00:20:49,679 --> 00:20:52,640
they are already heavily used by the

575
00:20:52,640 --> 00:20:54,000
security community

576
00:20:54,000 --> 00:20:56,640
for investigation purposes so it felt

577
00:20:56,640 --> 00:20:58,640
natural to create run books for

578
00:20:58,640 --> 00:21:00,159
self-service consumption

579
00:21:00,159 --> 00:21:03,440
data to start we created

580
00:21:03,440 --> 00:21:05,600
dashboards specific to three main

581
00:21:05,600 --> 00:21:06,640
domains

582
00:21:06,640 --> 00:21:09,039
specif one dashboard specific for

583
00:21:09,039 --> 00:21:09,840
security

584
00:21:09,840 --> 00:21:12,559
one for generic inventory and one for

585
00:21:12,559 --> 00:21:13,679
networking

586
00:21:13,679 --> 00:21:16,799
for both aws and gcp however

587
00:21:16,799 --> 00:21:18,799
we quickly realized that jupiter

588
00:21:18,799 --> 00:21:20,720
notebooks on their own were a bit too

589
00:21:20,720 --> 00:21:21,600
restrictive

590
00:21:21,600 --> 00:21:24,559
and limited in their capabilities and we

591
00:21:24,559 --> 00:21:26,000
started looking for

592
00:21:26,000 --> 00:21:28,480
alternatives which provided better

593
00:21:28,480 --> 00:21:29,760
integration with the rest of the

594
00:21:29,760 --> 00:21:31,360
security tools that

595
00:21:31,360 --> 00:21:34,400
we already used in our organization

596
00:21:34,400 --> 00:21:38,320
that's why we turn to elasticsearch next

597
00:21:38,320 --> 00:21:41,039
our security monitoring team already

598
00:21:41,039 --> 00:21:44,080
made extensive use of the elastic stack

599
00:21:44,080 --> 00:21:46,000
hence integrating with elasticsearch was

600
00:21:46,000 --> 00:21:47,919
the most obvious option after

601
00:21:47,919 --> 00:21:50,799
jupiter notebooks in particular we had

602
00:21:50,799 --> 00:21:52,159
two main goals in mind

603
00:21:52,159 --> 00:21:54,799
the first was to provide security

604
00:21:54,799 --> 00:21:57,360
analysts with a current snapshot of the

605
00:21:57,360 --> 00:21:58,720
infrastructure

606
00:21:58,720 --> 00:22:01,280
so that cartography data could enrich

607
00:22:01,280 --> 00:22:03,200
security investigations

608
00:22:03,200 --> 00:22:06,000
and the second was to alert on any new

609
00:22:06,000 --> 00:22:07,280
instance of drift

610
00:22:07,280 --> 00:22:09,440
since cartography itself can be used to

611
00:22:09,440 --> 00:22:11,120
detect drift within ephemeral

612
00:22:11,120 --> 00:22:12,960
environments

613
00:22:12,960 --> 00:22:15,120
here you can see the high level setup

614
00:22:15,120 --> 00:22:17,280
you can note at the bottom right corner

615
00:22:17,280 --> 00:22:19,600
a new aws account

616
00:22:19,600 --> 00:22:21,919
is a completely different account used

617
00:22:21,919 --> 00:22:23,679
by monitoring team

618
00:22:23,679 --> 00:22:26,320
in there we already have elasticsearch

619
00:22:26,320 --> 00:22:28,320
deployed for all the other security

620
00:22:28,320 --> 00:22:29,280
logging

621
00:22:29,280 --> 00:22:31,600
already integrated with the last alert

622
00:22:31,600 --> 00:22:33,840
which can provide notification to jira

623
00:22:33,840 --> 00:22:34,159
and

624
00:22:34,159 --> 00:22:37,440
zlac so what we have to do

625
00:22:37,440 --> 00:22:40,000
is creating an integration between

626
00:22:40,000 --> 00:22:41,440
cartography neo4j

627
00:22:41,440 --> 00:22:44,080
and elasticsearch we created a custom

628
00:22:44,080 --> 00:22:45,120
ingester

629
00:22:45,120 --> 00:22:47,440
deployed as a kubernetes chrome job

630
00:22:47,440 --> 00:22:49,760
which periodically pulls data from the

631
00:22:49,760 --> 00:22:52,840
neo4j database and forwards them to

632
00:22:52,840 --> 00:22:54,880
elasticsearch

633
00:22:54,880 --> 00:22:56,720
with cartography data now getting

634
00:22:56,720 --> 00:22:59,039
ingested into elasticsearch we were able

635
00:22:59,039 --> 00:23:01,440
to start using many of the features of

636
00:23:01,440 --> 00:23:02,400
kibana

637
00:23:02,400 --> 00:23:04,720
the most direct way again is you can

638
00:23:04,720 --> 00:23:07,200
start by browsing the discovery section

639
00:23:07,200 --> 00:23:08,480
of kibana

640
00:23:08,480 --> 00:23:10,640
which as you can see in the screenshot

641
00:23:10,640 --> 00:23:14,080
will report data as it gets ingested

642
00:23:14,080 --> 00:23:16,400
from there we wanted to recreate the

643
00:23:16,400 --> 00:23:18,720
dashboards we already had in jupiter

644
00:23:18,720 --> 00:23:21,440
and create more advanced one within

645
00:23:21,440 --> 00:23:23,280
kibana itself

646
00:23:23,280 --> 00:23:25,360
to aggregate the wall set of the

647
00:23:25,360 --> 00:23:27,360
infrastructure and give a quick glance

648
00:23:27,360 --> 00:23:28,559
of the main

649
00:23:28,559 --> 00:23:30,720
issues and misconfiguration we had at

650
00:23:30,720 --> 00:23:32,559
the moment

651
00:23:32,559 --> 00:23:35,440
we ended up creating one kibana

652
00:23:35,440 --> 00:23:36,240
visualization

653
00:23:36,240 --> 00:23:38,240
for each one of the custom cartography

654
00:23:38,240 --> 00:23:39,600
queries we created

655
00:23:39,600 --> 00:23:43,120
around 125. they're all open source of

656
00:23:43,120 --> 00:23:43,679
course

657
00:23:43,679 --> 00:23:47,360
like cartography and then we went to

658
00:23:47,360 --> 00:23:49,919
create aggregate these queries these

659
00:23:49,919 --> 00:23:51,840
visualizations into dashboards

660
00:23:51,840 --> 00:23:54,320
again starting from one specific for

661
00:23:54,320 --> 00:23:56,240
security one for inventory and one for

662
00:23:56,240 --> 00:23:57,200
networking

663
00:23:57,200 --> 00:23:59,200
and then also what we can do with

664
00:23:59,200 --> 00:24:00,640
elastic is to

665
00:24:00,640 --> 00:24:03,919
show trends over time but also not even

666
00:24:03,919 --> 00:24:06,080
also security related we can provide

667
00:24:06,080 --> 00:24:06,880
data to

668
00:24:06,880 --> 00:24:09,679
other teams like sres to see what kind

669
00:24:09,679 --> 00:24:10,559
of emis

670
00:24:10,559 --> 00:24:12,640
we are using different accounts and

671
00:24:12,640 --> 00:24:15,360
provide a history of how the accounts

672
00:24:15,360 --> 00:24:18,559
are working these nuptials show an

673
00:24:18,559 --> 00:24:19,360
excerpt

674
00:24:19,360 --> 00:24:21,360
of some of these dashboards on some test

675
00:24:21,360 --> 00:24:22,640
data as you can

676
00:24:22,640 --> 00:24:24,640
as you can see from these screenshots

677
00:24:24,640 --> 00:24:26,000
kibana dashboards are

678
00:24:26,000 --> 00:24:28,320
perfect to provide snapshots of the

679
00:24:28,320 --> 00:24:30,240
current state it's easy to see

680
00:24:30,240 --> 00:24:33,279
how does the environment look like today

681
00:24:33,279 --> 00:24:35,679
and these visualizations can help to

682
00:24:35,679 --> 00:24:36,799
quickly identify

683
00:24:36,799 --> 00:24:39,360
specific misconfiguration you can create

684
00:24:39,360 --> 00:24:40,720
a table to show

685
00:24:40,720 --> 00:24:43,039
all the cto exposed to the internet

686
00:24:43,039 --> 00:24:44,559
which is easy to see

687
00:24:44,559 --> 00:24:47,360
however uh this entire interaction was

688
00:24:47,360 --> 00:24:48,320
still heavier

689
00:24:48,320 --> 00:24:51,520
on manual involvement and

690
00:24:51,520 --> 00:24:53,360
lacks the automation needed to be more

691
00:24:53,360 --> 00:24:55,360
proactive in remediating

692
00:24:55,360 --> 00:24:57,679
any potential of this configuration uh

693
00:24:57,679 --> 00:24:59,200
analyst still needs to

694
00:24:59,200 --> 00:25:01,120
go log into elasticsearch and look at

695
00:25:01,120 --> 00:25:03,200
this dashboard we wanted something even

696
00:25:03,200 --> 00:25:05,440
more automated

697
00:25:05,440 --> 00:25:08,559
that's why once in elasticsearch we had

698
00:25:08,559 --> 00:25:10,240
the chance to leverage

699
00:25:10,240 --> 00:25:12,240
further integrations with tools like

700
00:25:12,240 --> 00:25:14,559
last alert as we were seeing before

701
00:25:14,559 --> 00:25:17,679
so we defined the last alert rules so

702
00:25:17,679 --> 00:25:18,080
that

703
00:25:18,080 --> 00:25:20,400
we can get notified in slack for any

704
00:25:20,400 --> 00:25:21,679
misconfiguration

705
00:25:21,679 --> 00:25:25,360
and or drift so for every new entry in

706
00:25:25,360 --> 00:25:26,720
any of the dashboards

707
00:25:26,720 --> 00:25:28,640
especially for the most critical ones we

708
00:25:28,640 --> 00:25:30,240
also get an alert

709
00:25:30,240 --> 00:25:33,600
on slack so we can go and investigate

710
00:25:33,600 --> 00:25:36,240
a question that someone might ask would

711
00:25:36,240 --> 00:25:36,640
be

712
00:25:36,640 --> 00:25:38,799
many companies are shifting to

713
00:25:38,799 --> 00:25:40,559
infrastructure as code and they're using

714
00:25:40,559 --> 00:25:41,600
terraform

715
00:25:41,600 --> 00:25:44,480
so why using cartography data to perform

716
00:25:44,480 --> 00:25:45,440
drift detection

717
00:25:45,440 --> 00:25:48,320
rather than terraform itself well

718
00:25:48,320 --> 00:25:49,200
terraform

719
00:25:49,200 --> 00:25:51,200
provides drift detection capabilities

720
00:25:51,200 --> 00:25:52,400
out of the box

721
00:25:52,400 --> 00:25:55,120
and are excellent in detecting drift for

722
00:25:55,120 --> 00:25:56,000
resources

723
00:25:56,000 --> 00:25:58,720
managed by terraform itself what

724
00:25:58,720 --> 00:26:00,880
terraform lacks is support for

725
00:26:00,880 --> 00:26:02,880
any other resource that might have been

726
00:26:02,880 --> 00:26:04,640
created with other means like the

727
00:26:04,640 --> 00:26:06,960
console or via the command line

728
00:26:06,960 --> 00:26:08,559
so that's why we decided to use

729
00:26:08,559 --> 00:26:10,000
cartography as

730
00:26:10,000 --> 00:26:12,559
a complement also for terraform drift so

731
00:26:12,559 --> 00:26:13,120
to catch

732
00:26:13,120 --> 00:26:14,960
everything that could be created

733
00:26:14,960 --> 00:26:17,360
regardless of the source

734
00:26:17,360 --> 00:26:19,120
and that's our journey so far we also

735
00:26:19,120 --> 00:26:20,880
plan to integrate with many other

736
00:26:20,880 --> 00:26:21,919
providers that

737
00:26:21,919 --> 00:26:24,080
alex was talking about like g suite and

738
00:26:24,080 --> 00:26:25,039
others

739
00:26:25,039 --> 00:26:28,480
but back to alex now

740
00:26:28,960 --> 00:26:31,279
thank you very much marco and i'd like

741
00:26:31,279 --> 00:26:32,400
to talk about

742
00:26:32,400 --> 00:26:36,159
what plans we have next on cartography

743
00:26:36,159 --> 00:26:37,679
the first thing that we would like the

744
00:26:37,679 --> 00:26:39,279
first big improvement we would like to

745
00:26:39,279 --> 00:26:40,080
bring back to

746
00:26:40,080 --> 00:26:43,200
cartography is to have a dag based

747
00:26:43,200 --> 00:26:46,320
data sync a directed acyclic graph

748
00:26:46,320 --> 00:26:48,880
data sync so that our data sync is more

749
00:26:48,880 --> 00:26:51,279
reliable and that if one sync fails then

750
00:26:51,279 --> 00:26:52,000
it doesn't fail

751
00:26:52,000 --> 00:26:55,039
the entire rest of your data sync we

752
00:26:55,039 --> 00:26:56,000
would also like

753
00:26:56,000 --> 00:26:58,640
a nicer plug-in framework i mentioned

754
00:26:58,640 --> 00:26:59,039
that

755
00:26:59,039 --> 00:27:02,000
we have a very extensible way of adding

756
00:27:02,000 --> 00:27:03,679
your own context and adding new data

757
00:27:03,679 --> 00:27:04,799
modules

758
00:27:04,799 --> 00:27:06,720
that that said you know we there are

759
00:27:06,720 --> 00:27:08,240
improvements to be made there we would

760
00:27:08,240 --> 00:27:09,679
like to make this process

761
00:27:09,679 --> 00:27:12,960
even easier for new developers to get

762
00:27:12,960 --> 00:27:16,159
introduced to our platform we would also

763
00:27:16,159 --> 00:27:18,399
or we also are working on near real-time

764
00:27:18,399 --> 00:27:19,360
updates

765
00:27:19,360 --> 00:27:22,320
so i mentioned earlier that the main

766
00:27:22,320 --> 00:27:23,840
cartography sync works

767
00:27:23,840 --> 00:27:27,279
as a job that pulls in all assets from

768
00:27:27,279 --> 00:27:29,360
multiple sources and then wipes away

769
00:27:29,360 --> 00:27:31,600
the previous state anything that is not

770
00:27:31,600 --> 00:27:32,480
there

771
00:27:32,480 --> 00:27:36,000
this is slow and so the thing that we

772
00:27:36,000 --> 00:27:36,320
would

773
00:27:36,320 --> 00:27:38,240
uh we the an area that we see

774
00:27:38,240 --> 00:27:39,440
improvement on

775
00:27:39,440 --> 00:27:42,320
is being able to stream consume a stream

776
00:27:42,320 --> 00:27:44,080
of something

777
00:27:44,080 --> 00:27:47,200
perhaps like aws cloudtrail and others a

778
00:27:47,200 --> 00:27:50,320
similar providers and then put in those

779
00:27:50,320 --> 00:27:52,960
changes little by little instead of in

780
00:27:52,960 --> 00:27:54,080
batch all at once

781
00:27:54,080 --> 00:27:56,000
so just some couple of ideas we are

782
00:27:56,000 --> 00:27:57,279
exploring there

783
00:27:57,279 --> 00:28:00,399
and as always we are adding more data

784
00:28:00,399 --> 00:28:02,159
types to the graph because having more

785
00:28:02,159 --> 00:28:03,120
data makes

786
00:28:03,120 --> 00:28:06,240
things well the more the merrier right

787
00:28:06,240 --> 00:28:08,559
the more context you can throw at this

788
00:28:08,559 --> 00:28:10,320
the more powerful your graph

789
00:28:10,320 --> 00:28:12,799
can be

790
00:28:14,640 --> 00:28:18,320
so with that i would like to you know

791
00:28:18,320 --> 00:28:19,840
end with my call to action go get

792
00:28:19,840 --> 00:28:21,840
started please go play with your own

793
00:28:21,840 --> 00:28:23,360
graph check out our tool

794
00:28:23,360 --> 00:28:26,880
at github.com cartography

795
00:28:26,880 --> 00:28:28,799
join our community say hi on slack

796
00:28:28,799 --> 00:28:30,960
participate in our monthly

797
00:28:30,960 --> 00:28:33,919
video discussion tell us how to be

798
00:28:33,919 --> 00:28:35,679
useful for you your opinion

799
00:28:35,679 --> 00:28:38,640
matters we are absolutely thrilled to be

800
00:28:38,640 --> 00:28:39,039
here

801
00:28:39,039 --> 00:28:42,559
at cloud native security day our goal

802
00:28:42,559 --> 00:28:44,640
is to grow and improve the project to

803
00:28:44,640 --> 00:28:45,760
meet that bar

804
00:28:45,760 --> 00:28:47,520
for high quality open source security

805
00:28:47,520 --> 00:28:49,039
tools and we want to

806
00:28:49,039 --> 00:28:52,080
continually make this problem we want to

807
00:28:52,080 --> 00:28:53,200
continually improve

808
00:28:53,200 --> 00:28:56,320
this project so with that thank you very

809
00:28:56,320 --> 00:28:58,159
much for your time here today

810
00:28:58,159 --> 00:29:01,200
and we hope to say hi to you um directly

811
00:29:01,200 --> 00:29:02,000
on slack or

812
00:29:02,000 --> 00:29:07,760
in any other venue thank you everyone

