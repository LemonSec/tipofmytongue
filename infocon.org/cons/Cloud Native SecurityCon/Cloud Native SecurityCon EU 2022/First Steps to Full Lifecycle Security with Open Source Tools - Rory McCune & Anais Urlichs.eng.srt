1
00:00:00,000 --> 00:00:02,399
hello everyone welcome back

2
00:00:02,399 --> 00:00:04,080
uh we are going to start our next

3
00:00:04,080 --> 00:00:05,279
session

4
00:00:05,279 --> 00:00:08,160
and uh it's a hands-on workshop right so

5
00:00:08,160 --> 00:00:10,880
get your laptops ready get your machines

6
00:00:10,880 --> 00:00:12,240
ready and uh

7
00:00:12,240 --> 00:00:13,360
ns

8
00:00:13,360 --> 00:00:14,559
and rory

9
00:00:14,559 --> 00:00:16,640
they are going to

10
00:00:16,640 --> 00:00:18,480
teach us first step to full life cycle

11
00:00:18,480 --> 00:00:21,119
security with open source tools so over

12
00:00:21,119 --> 00:00:23,600
to you guys

13
00:00:25,359 --> 00:00:26,800
does it work

14
00:00:26,800 --> 00:00:27,680
hello

15
00:00:27,680 --> 00:00:28,800
yeah so

16
00:00:28,800 --> 00:00:30,560
uh yeah we're going to talk about full

17
00:00:30,560 --> 00:00:31,840
life cycle security and we're going to

18
00:00:31,840 --> 00:00:33,280
show you some tools on how you can get

19
00:00:33,280 --> 00:00:35,360
started um now if you're sitting in a

20
00:00:35,360 --> 00:00:37,680
front and you're taking table space and

21
00:00:37,680 --> 00:00:39,680
you're not participating it would be

22
00:00:39,680 --> 00:00:41,040
great if you can make space for other

23
00:00:41,040 --> 00:00:42,719
people who want to participate and sit

24
00:00:42,719 --> 00:00:44,719
on the tables just fyi so if you're just

25
00:00:44,719 --> 00:00:46,399
checking emails then please make space

26
00:00:46,399 --> 00:00:47,520
for others

27
00:00:47,520 --> 00:00:50,559
otherwise yeah if you want to join and

28
00:00:50,559 --> 00:00:52,960
participate in the workshop then here's

29
00:00:52,960 --> 00:00:55,039
spaces in the front as well

30
00:00:55,039 --> 00:00:56,480
yeah

31
00:00:56,480 --> 00:00:58,399
cool awesome uh let's do

32
00:00:58,399 --> 00:00:59,920
the bugatti about us

33
00:00:59,920 --> 00:01:02,879
first okay so my name is anis orlis i'm

34
00:01:02,879 --> 00:01:04,559
the open source developer advocate at

35
00:01:04,559 --> 00:01:07,920
aqua security i'm also a cncf ambassador

36
00:01:07,920 --> 00:01:10,960
um i got started in the devops space at

37
00:01:10,960 --> 00:01:13,520
the end of 2020 i worked as developer

38
00:01:13,520 --> 00:01:15,280
advocate and then a site reliability

39
00:01:15,280 --> 00:01:18,320
engineer and now joined aqua i also have

40
00:01:18,320 --> 00:01:19,920
a youtube channel where i talk about

41
00:01:19,920 --> 00:01:21,759
kubernetes and cloud native tools if

42
00:01:21,759 --> 00:01:24,560
you're curious about that check it out

43
00:01:24,560 --> 00:01:26,560
and i'm rory uh i'm a cloud native

44
00:01:26,560 --> 00:01:28,799
security advocate aqua my background's

45
00:01:28,799 --> 00:01:29,840
perhaps slightly different a lot of

46
00:01:29,840 --> 00:01:31,840
people's i'm i'm from the infosec slash

47
00:01:31,840 --> 00:01:33,520
pen test world i was a pen tester before

48
00:01:33,520 --> 00:01:35,520
i did this i've been doing security for

49
00:01:35,520 --> 00:01:37,439
a while now uh and you can generally

50
00:01:37,439 --> 00:01:39,119
find me on twitter github and anywhere

51
00:01:39,119 --> 00:01:41,920
else as racine and

52
00:01:41,920 --> 00:01:44,000
i will give a sticker to anyone who

53
00:01:44,000 --> 00:01:45,840
knows why racine

54
00:01:45,840 --> 00:01:47,360
and you need to be in a kind of

55
00:01:47,360 --> 00:01:48,479
role-playing game person for the

56
00:01:48,479 --> 00:01:49,920
mid-2000s you're going to answer that

57
00:01:49,920 --> 00:01:51,840
question without googling

58
00:01:51,840 --> 00:01:54,840
so

59
00:01:55,200 --> 00:01:57,280
highly workshop objectives um we've kind

60
00:01:57,280 --> 00:01:58,240
of got three things we want to cover

61
00:01:58,240 --> 00:01:59,520
across we want to talk a little bit

62
00:01:59,520 --> 00:02:00,320
about

63
00:02:00,320 --> 00:02:02,159
how you can use tools at various

64
00:02:02,159 --> 00:02:03,280
different parts of the development

65
00:02:03,280 --> 00:02:05,600
lifecycle so the idea of this workshop

66
00:02:05,600 --> 00:02:06,880
is we're trying to help people who maybe

67
00:02:06,880 --> 00:02:08,399
haven't done a lot of this before

68
00:02:08,399 --> 00:02:10,000
who want to work out where they can get

69
00:02:10,000 --> 00:02:12,400
started with some ideas of what you can

70
00:02:12,400 --> 00:02:14,720
do the commands you can use and we're

71
00:02:14,720 --> 00:02:15,840
going to give you the examples we've got

72
00:02:15,840 --> 00:02:17,840
there are others

73
00:02:17,840 --> 00:02:20,000
three stages in the development process

74
00:02:20,000 --> 00:02:21,599
things that can be done in development

75
00:02:21,599 --> 00:02:23,040
so what can you do in development during

76
00:02:23,040 --> 00:02:25,440
the development process um then things

77
00:02:25,440 --> 00:02:27,280
you might want to do in ci cd and we'll

78
00:02:27,280 --> 00:02:28,400
talk a bit about that we won't do as

79
00:02:28,400 --> 00:02:29,599
hands-on for that because it's kind of

80
00:02:29,599 --> 00:02:30,720
difficult to get everyone start setting

81
00:02:30,720 --> 00:02:32,319
up their own ci cd in the middle of a

82
00:02:32,319 --> 00:02:34,160
workshop we're not that long

83
00:02:34,160 --> 00:02:35,599
and then about we're gonna talk about

84
00:02:35,599 --> 00:02:36,879
production as well so we're gonna talk

85
00:02:36,879 --> 00:02:38,319
about things you can do once the

86
00:02:38,319 --> 00:02:39,760
containers are live once you're running

87
00:02:39,760 --> 00:02:41,680
maybe in the kubernetes cluster uh what

88
00:02:41,680 --> 00:02:44,879
sort of stuff can you do there as well

89
00:02:46,319 --> 00:02:48,160
course prereqs in terms of if you want

90
00:02:48,160 --> 00:02:50,480
to follow along

91
00:02:50,480 --> 00:02:54,080
things you will need during the workshop

92
00:02:54,080 --> 00:02:56,160
some form of cuban local kubernetes

93
00:02:56,160 --> 00:02:57,040
cluster

94
00:02:57,040 --> 00:02:58,800
kind mini cube mic anything which does

95
00:02:58,800 --> 00:03:00,720
kubernetes should be fine if it's based

96
00:03:00,720 --> 00:03:02,879
on qbadm which all of these are it will

97
00:03:02,879 --> 00:03:05,040
probably work best

98
00:03:05,040 --> 00:03:06,879
and the ability to download and run

99
00:03:06,879 --> 00:03:08,879
binaries in one of those operating

100
00:03:08,879 --> 00:03:10,239
systems

101
00:03:10,239 --> 00:03:12,400
so if you've got windows wsl will work

102
00:03:12,400 --> 00:03:14,560
fine or a vm will work fine

103
00:03:14,560 --> 00:03:16,800
linux macos freebsd apparently as well

104
00:03:16,800 --> 00:03:18,720
so if you're very unlikely that you have

105
00:03:18,720 --> 00:03:20,879
a freebsd laptop but if you do

106
00:03:20,879 --> 00:03:23,519
then this will also work um so yeah any

107
00:03:23,519 --> 00:03:24,720
of those

108
00:03:24,720 --> 00:03:26,480
setups obviously don't use production

109
00:03:26,480 --> 00:03:27,599
clusters for this because we will be

110
00:03:27,599 --> 00:03:28,720
installing tools and running them and

111
00:03:28,720 --> 00:03:29,840
people will be very annoyed with you if

112
00:03:29,840 --> 00:03:31,680
you're doing production so test clusters

113
00:03:31,680 --> 00:03:34,239
are advised

114
00:03:35,040 --> 00:03:36,319
and right this is the most important

115
00:03:36,319 --> 00:03:37,360
slide this is one if you're going to

116
00:03:37,360 --> 00:03:38,640
take pictures of slides i would

117
00:03:38,640 --> 00:03:40,480
thoroughly recommend taking a picture of

118
00:03:40,480 --> 00:03:42,400
this slide

119
00:03:42,400 --> 00:03:44,319
ground rules uh and this is already

120
00:03:44,319 --> 00:03:45,840
mentioned yeah people up front if you're

121
00:03:45,840 --> 00:03:47,519
going to do workshop stuff please do use

122
00:03:47,519 --> 00:03:49,840
the desks at the front um also phone's

123
00:03:49,840 --> 00:03:51,040
in tower but i think everyone's been

124
00:03:51,040 --> 00:03:53,120
good for that already at the conference

125
00:03:53,120 --> 00:03:55,840
materials the slides for this talk are

126
00:03:55,840 --> 00:03:58,959
at slides.poundland.uk

127
00:03:58,959 --> 00:04:00,879
the commands for this and i'll show you

128
00:04:00,879 --> 00:04:03,480
in a second what that looks like are at

129
00:04:03,480 --> 00:04:05,680
commands.coundland.uk and the setup

130
00:04:05,680 --> 00:04:07,040
notes just notes for if you're going to

131
00:04:07,040 --> 00:04:09,040
do stuff are at setup do unloading dot

132
00:04:09,040 --> 00:04:11,519
uk and this is because i hoard domain

133
00:04:11,519 --> 00:04:12,959
names and that's a domain name i wasn't

134
00:04:12,959 --> 00:04:14,239
using for anything which is why i put in

135
00:04:14,239 --> 00:04:16,320
lint dot uk um

136
00:04:16,320 --> 00:04:18,320
but i'll show you the oh yeah if any

137
00:04:18,320 --> 00:04:19,358
questions

138
00:04:19,358 --> 00:04:21,440
please feel free to ask um shout out

139
00:04:21,440 --> 00:04:22,880
we'll try and answer as we go along it's

140
00:04:22,880 --> 00:04:23,680
kind of difficult if you're right in the

141
00:04:23,680 --> 00:04:25,120
back you might need to come forward but

142
00:04:25,120 --> 00:04:26,800
you know we're happy to do questions as

143
00:04:26,800 --> 00:04:29,040
we go we will also walk around so if you

144
00:04:29,040 --> 00:04:31,040
have a question just wave at us and in

145
00:04:31,040 --> 00:04:32,720
the first part i'm just going to come to

146
00:04:32,720 --> 00:04:34,960
you with my mask on or worry in the

147
00:04:34,960 --> 00:04:37,520
second part yeah so and then what we'll

148
00:04:37,520 --> 00:04:40,560
do is we'll have a quick look at this

149
00:04:40,560 --> 00:04:42,560
am i network okay so this is what the

150
00:04:42,560 --> 00:04:44,320
commands file look like and basically

151
00:04:44,320 --> 00:04:47,280
what you've got here is at this top this

152
00:04:47,280 --> 00:04:49,280
is the the title of the slide will be on

153
00:04:49,280 --> 00:04:50,479
so if you're looking for like what's the

154
00:04:50,479 --> 00:04:51,840
right command i'm going to copy paste

155
00:04:51,840 --> 00:04:53,040
this is in case you want to copy paste

156
00:04:53,040 --> 00:04:54,639
the commands if you don't type them some

157
00:04:54,639 --> 00:04:56,479
of them get pretty long copy pasting

158
00:04:56,479 --> 00:04:58,639
them is pretty easy and typing is going

159
00:04:58,639 --> 00:05:00,400
to be error prone so if you go to that

160
00:05:00,400 --> 00:05:02,080
url you'll get this you can just copy

161
00:05:02,080 --> 00:05:04,800
the text into like a text editor

162
00:05:04,800 --> 00:05:06,800
i'm going to mention this one at the top

163
00:05:06,800 --> 00:05:09,520
because we might want to do that now

164
00:05:09,520 --> 00:05:11,759
we're gonna all install privy

165
00:05:11,759 --> 00:05:13,759
um conference wi-fi as i'm guessing

166
00:05:13,759 --> 00:05:15,440
everyone has noticed can be a little bit

167
00:05:15,440 --> 00:05:17,840
hit or miss so what we might do now is

168
00:05:17,840 --> 00:05:19,360
we'll kind of change things around we'll

169
00:05:19,360 --> 00:05:21,280
do a little bit of installing trivia now

170
00:05:21,280 --> 00:05:22,800
so that people want to do it that you

171
00:05:22,800 --> 00:05:24,160
have the time to like get it down and

172
00:05:24,160 --> 00:05:25,360
working because it might take a little

173
00:05:25,360 --> 00:05:27,520
while to download so

174
00:05:27,520 --> 00:05:28,560
first things to do if you go to

175
00:05:28,560 --> 00:05:31,560
commands.pundlund.uk

176
00:05:32,160 --> 00:05:33,280
bring that back up for everyone's not

177
00:05:33,280 --> 00:05:34,240
got it

178
00:05:34,240 --> 00:05:37,039
go to that url and get the the

179
00:05:37,039 --> 00:05:38,240
installation url this is the

180
00:05:38,240 --> 00:05:39,280
installation for trivia which we're

181
00:05:39,280 --> 00:05:40,800
going to use quite heavily in the first

182
00:05:40,800 --> 00:05:41,919
part of this

183
00:05:41,919 --> 00:05:44,479
so i'm going to

184
00:05:44,800 --> 00:05:46,160
put that into

185
00:05:46,160 --> 00:05:48,320
so there are various ways of installing

186
00:05:48,320 --> 00:05:49,680
trivia which we're going to use through

187
00:05:49,680 --> 00:05:50,720
this

188
00:05:50,720 --> 00:05:52,080
and there should be something which

189
00:05:52,080 --> 00:05:53,600
works for whatever operating system

190
00:05:53,600 --> 00:05:55,680
you're working on if you're doing uh

191
00:05:55,680 --> 00:05:57,039
debian ubuntu just getting the dev will

192
00:05:57,039 --> 00:05:58,080
work fine

193
00:05:58,080 --> 00:06:00,240
uh there's stuff for arch homebrew it

194
00:06:00,240 --> 00:06:02,160
will work fine if you've got homebrew if

195
00:06:02,160 --> 00:06:03,759
you've got nicks if you've got you can

196
00:06:03,759 --> 00:06:05,120
do an install script if you're feeling

197
00:06:05,120 --> 00:06:06,639
brave i mean obviously generally for

198
00:06:06,639 --> 00:06:08,319
security don't go curling stuff off the

199
00:06:08,319 --> 00:06:10,319
internet and running it but if you're

200
00:06:10,319 --> 00:06:11,680
comfortable doing that then that's one

201
00:06:11,680 --> 00:06:13,120
option for you

202
00:06:13,120 --> 00:06:15,039
you can also get binaries

203
00:06:15,039 --> 00:06:17,520
archives just from the github repo and

204
00:06:17,520 --> 00:06:19,440
you can if you're feeling super fancy do

205
00:06:19,440 --> 00:06:21,600
it from source you can even do it from

206
00:06:21,600 --> 00:06:22,720
docker hub

207
00:06:22,720 --> 00:06:23,840
so there's a whole load of different

208
00:06:23,840 --> 00:06:26,000
ways i wouldn't use docker hub for the

209
00:06:26,000 --> 00:06:27,680
demos it might well it might be all

210
00:06:27,680 --> 00:06:29,199
right actually um you could probably do

211
00:06:29,199 --> 00:06:31,600
that yeah i would probably work

212
00:06:31,600 --> 00:06:32,720
it'll change the commands a little bit

213
00:06:32,720 --> 00:06:33,520
because you're gonna have to like bring

214
00:06:33,520 --> 00:06:35,440
docker at the front of things um but you

215
00:06:35,440 --> 00:06:38,000
know it should work so what to do now if

216
00:06:38,000 --> 00:06:39,360
you're planning to to kind of like go

217
00:06:39,360 --> 00:06:41,199
along with it rather than just watch

218
00:06:41,199 --> 00:06:43,600
go on to that page find the installation

219
00:06:43,600 --> 00:06:45,840
methods that work for you and just like

220
00:06:45,840 --> 00:06:47,120
kind of do that in the background and

221
00:06:47,120 --> 00:06:48,400
we'll do some slides before we get to

222
00:06:48,400 --> 00:06:50,080
the first command so hopefully that'll

223
00:06:50,080 --> 00:06:51,599
give everyone enough time to have like

224
00:06:51,599 --> 00:06:53,759
got to the point of running trivia also

225
00:06:53,759 --> 00:06:55,360
there's still a completely free table in

226
00:06:55,360 --> 00:06:57,360
the front so if you're in the very back

227
00:06:57,360 --> 00:06:58,560
and you would like to participate

228
00:06:58,560 --> 00:07:00,720
there's still three tables

229
00:07:00,720 --> 00:07:03,440
so we can do that too okay

230
00:07:03,440 --> 00:07:04,400
right

231
00:07:04,400 --> 00:07:05,919
so hopefully everyone who wants those

232
00:07:05,919 --> 00:07:07,280
urls has got those now so i'll leave

233
00:07:07,280 --> 00:07:08,560
those up for a couple of seconds to make

234
00:07:08,560 --> 00:07:10,000
sure everyone who hasn't got them yet

235
00:07:10,000 --> 00:07:11,840
the commands ones put the main one and

236
00:07:11,840 --> 00:07:13,120
the slides all the information is in the

237
00:07:13,120 --> 00:07:14,400
slides as well as well so if you want to

238
00:07:14,400 --> 00:07:16,000
just use the slides url you'll get all

239
00:07:16,000 --> 00:07:17,520
the commands there just kind of easier

240
00:07:17,520 --> 00:07:20,719
to get about that commands well

241
00:07:21,039 --> 00:07:21,919
so

242
00:07:21,919 --> 00:07:24,319
um security and development when

243
00:07:24,319 --> 00:07:25,919
developers are writing code what are the

244
00:07:25,919 --> 00:07:28,000
kind of things they could do to try and

245
00:07:28,000 --> 00:07:30,479
improve security in every talk you'll

246
00:07:30,479 --> 00:07:33,520
get about um about kind of supply chain

247
00:07:33,520 --> 00:07:35,039
or about developer security you'll hear

248
00:07:35,039 --> 00:07:37,520
the phrase shift left a lot and it is a

249
00:07:37,520 --> 00:07:38,960
buzzword but it is true and the reason

250
00:07:38,960 --> 00:07:40,000
why people use it is because it is

251
00:07:40,000 --> 00:07:42,400
something i thoroughly recommend is

252
00:07:42,400 --> 00:07:44,240
doing security checks as early as

253
00:07:44,240 --> 00:07:46,080
possible the development life cycle and

254
00:07:46,080 --> 00:07:47,120
if you're a developer and you're

255
00:07:47,120 --> 00:07:49,039
thinking why should i do this the

256
00:07:49,039 --> 00:07:50,800
advantage is it means security people

257
00:07:50,800 --> 00:07:52,319
are less likely to shout at you when you

258
00:07:52,319 --> 00:07:54,160
get to production because if you've done

259
00:07:54,160 --> 00:07:55,520
your stuff in development and you've

260
00:07:55,520 --> 00:07:57,280
fixed the things that you want to fix

261
00:07:57,280 --> 00:07:58,639
you're going to pass things like

262
00:07:58,639 --> 00:08:00,639
admission control in production clusters

263
00:08:00,639 --> 00:08:02,080
much more easily you're not going to get

264
00:08:02,080 --> 00:08:04,160
a nasty surprise when you try and deploy

265
00:08:04,160 --> 00:08:06,240
and someone says hey you have left some

266
00:08:06,240 --> 00:08:07,360
flag that you're not allowed on your

267
00:08:07,360 --> 00:08:08,960
kubernetes manifest and we're not

268
00:08:08,960 --> 00:08:10,879
allowing that to go into production if

269
00:08:10,879 --> 00:08:12,240
you've done this up front and we'll show

270
00:08:12,240 --> 00:08:14,400
you it's super simple super easy to do

271
00:08:14,400 --> 00:08:15,919
you can actually get that kind of like

272
00:08:15,919 --> 00:08:17,280
ease of like you know confidence that

273
00:08:17,280 --> 00:08:18,479
things are going to deploy okay you're

274
00:08:18,479 --> 00:08:19,599
not going to get told hey you can't

275
00:08:19,599 --> 00:08:20,800
deploy this

276
00:08:20,800 --> 00:08:22,639
um so we can do vulnerability scanning

277
00:08:22,639 --> 00:08:23,759
and we'll talk about how to do that and

278
00:08:23,759 --> 00:08:25,599
also iec scanning right everything's

279
00:08:25,599 --> 00:08:27,360
infrastructure is code everyone's using

280
00:08:27,360 --> 00:08:28,720
it it's great for scanning because it

281
00:08:28,720 --> 00:08:30,319
means it's easy to scan

282
00:08:30,319 --> 00:08:31,360
so we're going to talk about iec

283
00:08:31,360 --> 00:08:34,000
scanning as well

284
00:08:35,839 --> 00:08:38,399
yeah so when are we actually

285
00:08:38,399 --> 00:08:40,880
using security scanners so first of all

286
00:08:40,880 --> 00:08:42,958
before we using any third-party

287
00:08:42,958 --> 00:08:45,279
resources any other git repository any

288
00:08:45,279 --> 00:08:46,880
container image you want to make sure

289
00:08:46,880 --> 00:08:48,640
that you know what's going inside those

290
00:08:48,640 --> 00:08:50,399
resources before you actually start

291
00:08:50,399 --> 00:08:53,279
using them so before development then

292
00:08:53,279 --> 00:08:55,680
during your development process

293
00:08:55,680 --> 00:08:58,000
and also when you're then ending up to

294
00:08:58,000 --> 00:08:59,760
build for example the container image

295
00:08:59,760 --> 00:09:01,440
deployed in your test cluster deployed

296
00:09:01,440 --> 00:09:03,279
in your staging cluster

297
00:09:03,279 --> 00:09:05,040
so before deployment in your cicd

298
00:09:05,040 --> 00:09:07,680
pipeline as well as after enduring

299
00:09:07,680 --> 00:09:09,920
deployment also in production and we're

300
00:09:09,920 --> 00:09:11,519
going to walk you through all those

301
00:09:11,519 --> 00:09:13,839
different aspects and steps during your

302
00:09:13,839 --> 00:09:15,279
development life cycle of where you can

303
00:09:15,279 --> 00:09:18,399
use security scanning

304
00:09:19,839 --> 00:09:20,720
so

305
00:09:20,720 --> 00:09:21,920
vulnerability scanning so we're gonna

306
00:09:21,920 --> 00:09:23,760
start off with vulnerability scanning um

307
00:09:23,760 --> 00:09:25,279
and we're gonna use container image

308
00:09:25,279 --> 00:09:27,600
vulnerability scanning tools uh it's a

309
00:09:27,600 --> 00:09:29,120
useful way of assessing base images

310
00:09:29,120 --> 00:09:31,200
right so if you're thinking i want to

311
00:09:31,200 --> 00:09:32,800
write an application and i've found a

312
00:09:32,800 --> 00:09:34,959
really cool base image on docker hub and

313
00:09:34,959 --> 00:09:36,959
i want to use that one of the very first

314
00:09:36,959 --> 00:09:38,320
things you should do is run a

315
00:09:38,320 --> 00:09:40,080
vulnerability scanner over that image

316
00:09:40,080 --> 00:09:42,080
before you make it the basis for your

317
00:09:42,080 --> 00:09:44,000
application because if it's for example

318
00:09:44,000 --> 00:09:46,240
be non-maintained and there are millions

319
00:09:46,240 --> 00:09:48,000
of docker hub images

320
00:09:48,000 --> 00:09:50,080
a lot of them are unmaintained a lot of

321
00:09:50,080 --> 00:09:51,680
them haven't been patched in like five

322
00:09:51,680 --> 00:09:53,680
years in some cases so if you get the

323
00:09:53,680 --> 00:09:54,640
wrong base image you're gonna have a

324
00:09:54,640 --> 00:09:55,680
really bad time because you're getting a

325
00:09:55,680 --> 00:09:57,040
lot of very old software a lot of very

326
00:09:57,040 --> 00:09:59,920
vulnerable software um so running a

327
00:09:59,920 --> 00:10:02,160
movie scanning tool um is a great way of

328
00:10:02,160 --> 00:10:03,600
checking that before you get started

329
00:10:03,600 --> 00:10:05,040
we're going to demonstrate with trivia

330
00:10:05,040 --> 00:10:06,480
because that's aqua's open source

331
00:10:06,480 --> 00:10:08,000
scanner so that little bit when we know

332
00:10:08,000 --> 00:10:10,560
best there are other scanners available

333
00:10:10,560 --> 00:10:12,640
which we'll talk about as well just fyi

334
00:10:12,640 --> 00:10:14,720
we don't take any data by you using

335
00:10:14,720 --> 00:10:16,959
trivia or anything related there's

336
00:10:16,959 --> 00:10:19,440
nothing that we track or collect from

337
00:10:19,440 --> 00:10:21,360
you it's literally just open source you

338
00:10:21,360 --> 00:10:22,399
download it you do anything you want

339
00:10:22,399 --> 00:10:23,440
with it

340
00:10:23,440 --> 00:10:25,040
download the code fork it you know all

341
00:10:25,040 --> 00:10:26,160
great

342
00:10:26,160 --> 00:10:28,399
so um how do vulnerability scanners work

343
00:10:28,399 --> 00:10:29,680
this applies to generally how vulnerable

344
00:10:29,680 --> 00:10:31,200
designs get all vulnerability scanners

345
00:10:31,200 --> 00:10:33,120
work because they can be a bit black box

346
00:10:33,120 --> 00:10:35,600
right you run this tool you split all

347
00:10:35,600 --> 00:10:36,640
the results you're like how did that

348
00:10:36,640 --> 00:10:38,240
work and the answer is it's actually

349
00:10:38,240 --> 00:10:40,720
conceptually fairly simple um

350
00:10:40,720 --> 00:10:42,320
vulnerability scanning tools basically

351
00:10:42,320 --> 00:10:44,240
look for two classes of thing one they

352
00:10:44,240 --> 00:10:46,560
look for operating system packages so

353
00:10:46,560 --> 00:10:48,720
most container images will be based on a

354
00:10:48,720 --> 00:10:52,640
distribution debian alpine rel centos

355
00:10:52,640 --> 00:10:54,000
something

356
00:10:54,000 --> 00:10:55,519
all of those things have got a security

357
00:10:55,519 --> 00:10:58,240
database the security database says this

358
00:10:58,240 --> 00:11:00,079
version of this package has got these

359
00:11:00,079 --> 00:11:01,920
vulnerabilities so all the vulnerability

360
00:11:01,920 --> 00:11:03,200
scanner does is it downloads the

361
00:11:03,200 --> 00:11:05,200
database it runs the package management

362
00:11:05,200 --> 00:11:07,040
tool inside your container image and

363
00:11:07,040 --> 00:11:08,640
compares them right and it says this

364
00:11:08,640 --> 00:11:10,160
version has got this vulnerabilities

365
00:11:10,160 --> 00:11:11,200
this is the one you got installed

366
00:11:11,200 --> 00:11:12,480
therefore you have all of these

367
00:11:12,480 --> 00:11:14,320
vulnerabilities conceptually pretty

368
00:11:14,320 --> 00:11:15,760
simple there's a lot of kind of

369
00:11:15,760 --> 00:11:17,600
complexity nuance but the basic idea is

370
00:11:17,600 --> 00:11:19,440
pretty simple and then the other thing

371
00:11:19,440 --> 00:11:21,040
that most of the

372
00:11:21,040 --> 00:11:22,160
vulnerability scanning tools and open

373
00:11:22,160 --> 00:11:23,760
source will do now is they'll do

374
00:11:23,760 --> 00:11:25,680
programming language package scanning so

375
00:11:25,680 --> 00:11:28,560
this will be things like npm rubygems

376
00:11:28,560 --> 00:11:30,240
they can also look for vulnerabilities

377
00:11:30,240 --> 00:11:32,160
in your libraries and again well worth

378
00:11:32,160 --> 00:11:33,120
doing

379
00:11:33,120 --> 00:11:34,480
a third actually mentioned worth

380
00:11:34,480 --> 00:11:36,079
mentioning is that things like golang

381
00:11:36,079 --> 00:11:38,079
specifically for golang you can actually

382
00:11:38,079 --> 00:11:40,640
scan inside the binary as well so golang

383
00:11:40,640 --> 00:11:42,160
binaries will tell you what versions of

384
00:11:42,160 --> 00:11:43,839
libraries they have so you don't you

385
00:11:43,839 --> 00:11:44,959
know you can get that information out of

386
00:11:44,959 --> 00:11:47,120
a binary as well um so again a lot of

387
00:11:47,120 --> 00:11:48,640
the scanners will do that

388
00:11:48,640 --> 00:11:49,839
and it will assess whether there's known

389
00:11:49,839 --> 00:11:52,320
vulnerabilities in installed versions

390
00:11:52,320 --> 00:11:53,839
there's been various talks about like

391
00:11:53,839 --> 00:11:55,120
how do i know if this vulnerability

392
00:11:55,120 --> 00:11:57,040
actually affects my image and the answer

393
00:11:57,040 --> 00:11:58,480
is that's a really tricky in my opinion

394
00:11:58,480 --> 00:12:00,399
really tricky question to answer but the

395
00:12:00,399 --> 00:12:01,680
easiest thing to do is to try and get as

396
00:12:01,680 --> 00:12:04,000
few vulnerabilities as possible into

397
00:12:04,000 --> 00:12:05,360
your images before you start tweaking

398
00:12:05,360 --> 00:12:07,200
production a scanner is a great place to

399
00:12:07,200 --> 00:12:10,000
start

400
00:12:10,000 --> 00:12:11,440
so open source vulnerability scanners

401
00:12:11,440 --> 00:12:12,720
there are lots we're going to quit

402
00:12:12,720 --> 00:12:13,680
trivia because there's one meaning well

403
00:12:13,680 --> 00:12:14,639
that does not mean it's the only one

404
00:12:14,639 --> 00:12:16,959
available um you can get trivia gripe

405
00:12:16,959 --> 00:12:18,880
clear sneak there are quite a lot of

406
00:12:18,880 --> 00:12:20,560
different scanners a lot of them work

407
00:12:20,560 --> 00:12:22,399
similarly the basic processes those are

408
00:12:22,399 --> 00:12:25,360
all open source um of of various

409
00:12:25,360 --> 00:12:26,880
different scanners so those are all ones

410
00:12:26,880 --> 00:12:28,399
you know you can choose but the

411
00:12:28,399 --> 00:12:32,079
fundamental idea is pretty similar

412
00:12:33,519 --> 00:12:36,000
okay so installing trivi um i'm hoping

413
00:12:36,000 --> 00:12:37,200
that anyone who's planning to kind of

414
00:12:37,200 --> 00:12:39,360
like type along has had a chance if not

415
00:12:39,360 --> 00:12:41,760
we'll pause for a little second um i

416
00:12:41,760 --> 00:12:43,360
don't know how is anyone getting on okay

417
00:12:43,360 --> 00:12:44,560
with confidence wi-fi is everyone

418
00:12:44,560 --> 00:12:46,160
managed to and almost to get this trivia

419
00:12:46,160 --> 00:12:47,440
already installed yeah we've got a

420
00:12:47,440 --> 00:12:49,600
couple of hats okay awesome fantastic we

421
00:12:49,600 --> 00:12:51,600
have some trivies you need help hands up

422
00:12:51,600 --> 00:12:53,839
if anyone needs help and ace is happy to

423
00:12:53,839 --> 00:12:55,440
help um if it's just the conference

424
00:12:55,440 --> 00:12:57,120
wi-fi being slow though we probably

425
00:12:57,120 --> 00:13:00,560
can't help um 4g might be your friend

426
00:13:00,560 --> 00:13:01,920
uh if you've got tethering and you don't

427
00:13:01,920 --> 00:13:03,200
have data limits that are going to cost

428
00:13:03,200 --> 00:13:04,240
a lot of money

429
00:13:04,240 --> 00:13:05,360
so yeah there's lots of different ways

430
00:13:05,360 --> 00:13:06,399
you can install this you can use

431
00:13:06,399 --> 00:13:08,480
homebrew apt um

432
00:13:08,480 --> 00:13:10,000
yeah hopefully now everyone's kind of

433
00:13:10,000 --> 00:13:11,360
got we got to that point we've got stuff

434
00:13:11,360 --> 00:13:13,680
installed

435
00:13:13,680 --> 00:13:15,120
so we're gonna we're gonna start off

436
00:13:15,120 --> 00:13:16,720
let's start off with scanning this is

437
00:13:16,720 --> 00:13:18,320
the most basic form of vulnerability

438
00:13:18,320 --> 00:13:20,959
scanning um what i've got here is

439
00:13:20,959 --> 00:13:22,480
there's two commands up on the screen

440
00:13:22,480 --> 00:13:24,639
the first one is trivia i which is just

441
00:13:24,639 --> 00:13:26,000
shorthand for image so you want to do an

442
00:13:26,000 --> 00:13:28,000
image scan and then the image you want

443
00:13:28,000 --> 00:13:30,160
to scan notably you don't actually have

444
00:13:30,160 --> 00:13:31,360
to have like this image pulled down

445
00:13:31,360 --> 00:13:32,880
locally for this to work

446
00:13:32,880 --> 00:13:35,120
um it will it does it stuff anyway i've

447
00:13:35,120 --> 00:13:36,880
got two up there first one is in docker

448
00:13:36,880 --> 00:13:39,680
hub the second one is in the ecr mirror

449
00:13:39,680 --> 00:13:41,120
of docker hub because i was trying to

450
00:13:41,120 --> 00:13:42,720
work out whether we would hit docker hub

451
00:13:42,720 --> 00:13:44,320
limits so i'm thinking if we all scan a

452
00:13:44,320 --> 00:13:46,560
boot to 2004 docker hub has limits rate

453
00:13:46,560 --> 00:13:47,920
limits and we might all get kind of like

454
00:13:47,920 --> 00:13:49,360
told no you're not doing it so if you do

455
00:13:49,360 --> 00:13:50,639
get like a rate limited message and

456
00:13:50,639 --> 00:13:52,480
you're doing over conference wi-fi you

457
00:13:52,480 --> 00:13:54,639
can try that second one because that one

458
00:13:54,639 --> 00:13:57,120
should not be rate limited i'm told

459
00:13:57,120 --> 00:13:58,560
so let's actually do that and see what

460
00:13:58,560 --> 00:14:01,719
it looks like

461
00:14:04,639 --> 00:14:06,320
okay so basically it's just as simple as

462
00:14:06,320 --> 00:14:07,519
that

463
00:14:07,519 --> 00:14:09,279
and it will

464
00:14:09,279 --> 00:14:10,959
what you'll get back is and this looks

465
00:14:10,959 --> 00:14:12,000
kind of messy so i'm gonna i'm gonna

466
00:14:12,000 --> 00:14:13,279
give you the neat clean version which

467
00:14:13,279 --> 00:14:15,199
means i have to make it a bit smaller

468
00:14:15,199 --> 00:14:16,160
but let me just show you because the

469
00:14:16,160 --> 00:14:17,760
table is super nice looking how small do

470
00:14:17,760 --> 00:14:20,480
i have to make this

471
00:14:20,480 --> 00:14:22,320
that gonna work

472
00:14:22,320 --> 00:14:24,240
oh one smaller wow we have to make it

473
00:14:24,240 --> 00:14:26,720
really small

474
00:14:28,959 --> 00:14:30,720
hey see the table looks really nice if

475
00:14:30,720 --> 00:14:32,639
you make your screen small enough

476
00:14:32,639 --> 00:14:34,160
so basically what you get back if you

477
00:14:34,160 --> 00:14:36,079
run this vulnerability scanner is you

478
00:14:36,079 --> 00:14:38,240
will get back a set of vulnerabilities

479
00:14:38,240 --> 00:14:40,399
it will tell you severity so we've got

480
00:14:40,399 --> 00:14:42,959
13 lows six mediums uh no highs and no

481
00:14:42,959 --> 00:14:45,199
criticals which is good it will tell you

482
00:14:45,199 --> 00:14:46,639
what cve

483
00:14:46,639 --> 00:14:48,399
is not is you know it thinks is a

484
00:14:48,399 --> 00:14:50,800
problem it'll tell you severity it'll

485
00:14:50,800 --> 00:14:52,240
tell you the install package so what

486
00:14:52,240 --> 00:14:55,040
that's telling us is core utils version

487
00:14:55,040 --> 00:14:59,040
8.3 30-3 ubuntu 2 is installed and i

488
00:14:59,040 --> 00:15:01,199
think the cve is present and that's just

489
00:15:01,199 --> 00:15:02,880
literally based on

490
00:15:02,880 --> 00:15:04,959
checking the version installed what cvs

491
00:15:04,959 --> 00:15:06,959
the security database for ubuntu thinks

492
00:15:06,959 --> 00:15:08,160
is present

493
00:15:08,160 --> 00:15:09,920
and it'll give you a title as well and

494
00:15:09,920 --> 00:15:11,040
also we've got some links out if you

495
00:15:11,040 --> 00:15:12,399
want to read more about it you can also

496
00:15:12,399 --> 00:15:14,480
read more about the cv and that gives us

497
00:15:14,480 --> 00:15:16,000
a nice table so if you just want to like

498
00:15:16,000 --> 00:15:17,279
look at it and get an idea of how the

499
00:15:17,279 --> 00:15:18,320
image is

500
00:15:18,320 --> 00:15:20,639
that's not a bad option

501
00:15:20,639 --> 00:15:22,320
so all right hopefully people is

502
00:15:22,320 --> 00:15:23,920
everyone managed to run that one okay is

503
00:15:23,920 --> 00:15:26,079
it running over conference wi-fi or 4g

504
00:15:26,079 --> 00:15:27,680
who tried to run it they'll try to run

505
00:15:27,680 --> 00:15:28,560
it

506
00:15:28,560 --> 00:15:30,800
and it worked awesome right fantastic

507
00:15:30,800 --> 00:15:32,320
this is going better than expected i'm

508
00:15:32,320 --> 00:15:33,199
honest

509
00:15:33,199 --> 00:15:34,000
um

510
00:15:34,000 --> 00:15:35,199
one thing i found out for any other

511
00:15:35,199 --> 00:15:37,120
presenters there's ethernet on the stand

512
00:15:37,120 --> 00:15:38,560
so if you're up here you're okay because

513
00:15:38,560 --> 00:15:40,959
we've got ethernet

514
00:15:40,959 --> 00:15:42,880
so fantastic

515
00:15:42,880 --> 00:15:45,120
that's a basic scan now the first thing

516
00:15:45,120 --> 00:15:46,800
we're going to get to next is something

517
00:15:46,800 --> 00:15:49,519
which is important for ubuntu

518
00:15:49,519 --> 00:15:52,160
specifically and debian images which is

519
00:15:52,160 --> 00:15:54,079
there a flag which you will want to have

520
00:15:54,079 --> 00:15:55,360
on your vulnerability scanner called

521
00:15:55,360 --> 00:15:57,360
ignore unfixed

522
00:15:57,360 --> 00:15:59,600
uh and what this does is both debian and

523
00:15:59,600 --> 00:16:02,560
ubuntu have a list of vulnerabilities

524
00:16:02,560 --> 00:16:04,399
that they have not issued a patch for

525
00:16:04,399 --> 00:16:06,079
right so even if you apt to get apt

526
00:16:06,079 --> 00:16:07,680
update to the latest version the

527
00:16:07,680 --> 00:16:09,519
vulnerability will still be present and

528
00:16:09,519 --> 00:16:11,040
that is generally because they don't

529
00:16:11,040 --> 00:16:14,000
think it's that serious mostly

530
00:16:14,000 --> 00:16:15,279
but they're not that concerned about

531
00:16:15,279 --> 00:16:17,600
specific vulnerability so they won't fix

532
00:16:17,600 --> 00:16:18,320
it

533
00:16:18,320 --> 00:16:20,320
so what you can do with trivi is you can

534
00:16:20,320 --> 00:16:22,560
just say minus minus ignore unfixed and

535
00:16:22,560 --> 00:16:25,120
if we do the same thing

536
00:16:25,120 --> 00:16:27,839
so last time we had it was at 19

537
00:16:27,839 --> 00:16:31,199
and this time we get four right

538
00:16:31,199 --> 00:16:32,959
so a lot of our vulnerabilities just

539
00:16:32,959 --> 00:16:34,000
vanished

540
00:16:34,000 --> 00:16:34,959
so the first question you're going to

541
00:16:34,959 --> 00:16:36,639
have for yourself is

542
00:16:36,639 --> 00:16:39,279
do i want to run ignore on fix or not

543
00:16:39,279 --> 00:16:40,399
because a lot people might say well i

544
00:16:40,399 --> 00:16:41,040
want to know about all my

545
00:16:41,040 --> 00:16:42,959
vulnerabilities but

546
00:16:42,959 --> 00:16:44,480
let's be honest if you actually used any

547
00:16:44,480 --> 00:16:45,759
old-school vulnerability assessment

548
00:16:45,759 --> 00:16:48,800
tools like rapid7 qualis or nessus all

549
00:16:48,800 --> 00:16:51,199
of them effectively do ignore unfixed

550
00:16:51,199 --> 00:16:52,399
they won't tell you there's not even as

551
00:16:52,399 --> 00:16:53,519
far as i can tell an option to turn it

552
00:16:53,519 --> 00:16:55,360
on so if you're doing like for like

553
00:16:55,360 --> 00:16:57,279
comparison with old-school vulnerability

554
00:16:57,279 --> 00:16:59,120
scanners i personally would always turn

555
00:16:59,120 --> 00:17:00,959
on ignore and fixed i mean you can turn

556
00:17:00,959 --> 00:17:03,519
it off like if you want to know

557
00:17:03,519 --> 00:17:04,559
like i really want to know what's

558
00:17:04,559 --> 00:17:07,199
present but for practical purposes if

559
00:17:07,199 --> 00:17:08,240
you're in an enterprise and you're

560
00:17:08,240 --> 00:17:09,599
trying to compare it with other tools i

561
00:17:09,599 --> 00:17:10,959
personally would turn it just put ignore

562
00:17:10,959 --> 00:17:12,559
and fix on you get a much more sensible

563
00:17:12,559 --> 00:17:14,640
list and basically there is one

564
00:17:14,640 --> 00:17:16,240
today there is one vulnerability one

565
00:17:16,240 --> 00:17:17,919
package they have not updated which has

566
00:17:17,919 --> 00:17:20,000
got some low cvs you're probably not too

567
00:17:20,000 --> 00:17:21,520
concerned about that you could say hey

568
00:17:21,520 --> 00:17:23,439
that's a great image i'm happy to use

569
00:17:23,439 --> 00:17:25,839
that now

570
00:17:26,640 --> 00:17:27,919
so that's ignore and fix it's an

571
00:17:27,919 --> 00:17:29,200
important one to recognize because a lot

572
00:17:29,200 --> 00:17:30,400
of people get quite concerned when they

573
00:17:30,400 --> 00:17:32,080
first start using container scanning and

574
00:17:32,080 --> 00:17:33,520
they run it on like a debian image or

575
00:17:33,520 --> 00:17:34,880
ubuntu image and they get tons of

576
00:17:34,880 --> 00:17:36,080
vulnerabilities like what's going on

577
00:17:36,080 --> 00:17:39,360
here that's the answer

578
00:17:39,760 --> 00:17:43,039
so next thing you might only care about

579
00:17:43,039 --> 00:17:45,039
high or critical vulnerabilities you

580
00:17:45,039 --> 00:17:46,400
might not always care

581
00:17:46,400 --> 00:17:48,160
the you know actually this vulnerability

582
00:17:48,160 --> 00:17:50,000
is like a medium or low depending on

583
00:17:50,000 --> 00:17:51,520
your organization depending on your

584
00:17:51,520 --> 00:17:53,039
threat model your risk posture might say

585
00:17:53,039 --> 00:17:54,880
i only want to know about stuff that's

586
00:17:54,880 --> 00:17:56,400
super serious

587
00:17:56,400 --> 00:17:57,760
and we can do that as well right so what

588
00:17:57,760 --> 00:17:59,280
we're going to do here is we're going to

589
00:17:59,280 --> 00:18:01,440
do trivia image so

590
00:18:01,440 --> 00:18:02,880
you can put eye or image either will

591
00:18:02,880 --> 00:18:05,039
work and you can just tell it severity

592
00:18:05,039 --> 00:18:06,960
and say hey i only want to know about

593
00:18:06,960 --> 00:18:08,720
highs or criticals

594
00:18:08,720 --> 00:18:10,880
and then i only want to know about

595
00:18:10,880 --> 00:18:13,360
vulnerability type os

596
00:18:13,360 --> 00:18:14,880
do you remember when i said there's two

597
00:18:14,880 --> 00:18:16,240
types of vulnerability scanning there's

598
00:18:16,240 --> 00:18:17,760
operating system and this broadband

599
00:18:17,760 --> 00:18:19,600
language package this is only going to

600
00:18:19,600 --> 00:18:21,280
look for stuff in the operating system

601
00:18:21,280 --> 00:18:22,799
it's that you know so if there's an npm

602
00:18:22,799 --> 00:18:24,240
there it won't look if there's rubygems

603
00:18:24,240 --> 00:18:26,400
it won't look so you can fine-tune your

604
00:18:26,400 --> 00:18:28,000
scan depending on what your role is

605
00:18:28,000 --> 00:18:29,440
maybe you're thinking i'm responsible

606
00:18:29,440 --> 00:18:31,120
for base images i'm not responsible for

607
00:18:31,120 --> 00:18:32,799
the app devs cool i only want to know

608
00:18:32,799 --> 00:18:35,360
about the os images oh this one films

609
00:18:35,360 --> 00:18:38,159
so let's do that one

610
00:18:39,120 --> 00:18:40,000
so

611
00:18:40,000 --> 00:18:41,440
if you're going along again i would

612
00:18:41,440 --> 00:18:42,559
probably copy paste these out the

613
00:18:42,559 --> 00:18:43,919
commands it's going to be easiest you

614
00:18:43,919 --> 00:18:45,120
can type if you're feeling super

615
00:18:45,120 --> 00:18:46,799
confident i personally as you can tell

616
00:18:46,799 --> 00:18:48,480
i'm not confident enough in my typing on

617
00:18:48,480 --> 00:18:50,720
stage so i'm just going to copy paste

618
00:18:50,720 --> 00:18:53,600
um and if we run that

619
00:18:53,600 --> 00:18:54,880
it will

620
00:18:54,880 --> 00:18:57,039
yeah so this particular image has a lot

621
00:18:57,039 --> 00:18:58,720
of vulnerabilities in it

622
00:18:58,720 --> 00:18:59,919
um and this is what i'm saying you'll

623
00:18:59,919 --> 00:19:01,919
see this is older images you can you can

624
00:19:01,919 --> 00:19:03,200
end up this has got

625
00:19:03,200 --> 00:19:04,960
what even is that

626
00:19:04,960 --> 00:19:06,880
a large number i don't necessarily

627
00:19:06,880 --> 00:19:08,480
scroll all the way top but this is an

628
00:19:08,480 --> 00:19:09,919
image that you would never should never

629
00:19:09,919 --> 00:19:10,960
run into production right if you're

630
00:19:10,960 --> 00:19:12,000
running this image don't put that

631
00:19:12,000 --> 00:19:13,120
production because look at all the highs

632
00:19:13,120 --> 00:19:14,320
and criticals

633
00:19:14,320 --> 00:19:15,120
um

634
00:19:15,120 --> 00:19:17,360
another thing i actually mentioned um

635
00:19:17,360 --> 00:19:18,799
and and shout out i don't know anyone

636
00:19:18,799 --> 00:19:19,760
from the aqua open source team is

637
00:19:19,760 --> 00:19:21,120
actually in here at the moment but shout

638
00:19:21,120 --> 00:19:22,400
out to them for rapid development

639
00:19:22,400 --> 00:19:24,240
because this secret scanning thing

640
00:19:24,240 --> 00:19:26,080
wasn't in present when i did my when i

641
00:19:26,080 --> 00:19:27,520
got these slides ready last week we now

642
00:19:27,520 --> 00:19:29,760
have secret scaring apparently um this

643
00:19:29,760 --> 00:19:31,760
one that's a good example of how secret

644
00:19:31,760 --> 00:19:32,799
scanning can be a bit tricky because

645
00:19:32,799 --> 00:19:34,400
that's obviously a dummy key

646
00:19:34,400 --> 00:19:35,760
um

647
00:19:35,760 --> 00:19:37,520
because you can tell because it says sir

648
00:19:37,520 --> 00:19:39,360
snake oil that's just a dummy key but

649
00:19:39,360 --> 00:19:40,799
it's a good example of that you can also

650
00:19:40,799 --> 00:19:42,320
use this for secret scanning we're not

651
00:19:42,320 --> 00:19:43,200
going to talk too much about that at

652
00:19:43,200 --> 00:19:44,720
this in this but because it's just

653
00:19:44,720 --> 00:19:46,480
literally turned up but useful to know

654
00:19:46,480 --> 00:19:47,760
as well

655
00:19:47,760 --> 00:19:49,440
so that's a good example if you can say

656
00:19:49,440 --> 00:19:51,440
okay i want to like just get some

657
00:19:51,440 --> 00:19:54,960
criticals i'm looking for os villains

658
00:19:55,200 --> 00:19:56,240
so

659
00:19:56,240 --> 00:19:58,320
should we take some questions oh yeah

660
00:19:58,320 --> 00:20:00,640
don't there any questions so far or is

661
00:20:00,640 --> 00:20:02,880
that all super clear and clear up to

662
00:20:02,880 --> 00:20:04,240
that point

663
00:20:04,240 --> 00:20:08,400
clear and i'm hearing clear yep awesome

664
00:20:08,400 --> 00:20:10,240
everything's clear either that or

665
00:20:10,240 --> 00:20:11,840
everyone's stunned into sounds or

666
00:20:11,840 --> 00:20:13,760
struggling with conference wi-fi

667
00:20:13,760 --> 00:20:14,880
um

668
00:20:14,880 --> 00:20:16,799
so just to give the example of you can

669
00:20:16,799 --> 00:20:18,240
also do

670
00:20:18,240 --> 00:20:20,320
you can also do library so we can we can

671
00:20:20,320 --> 00:20:22,080
flick that route right so maybe i am

672
00:20:22,080 --> 00:20:23,520
someone who does not care about the base

673
00:20:23,520 --> 00:20:25,200
images i only care about the stuff

674
00:20:25,200 --> 00:20:26,480
that's in the package libraries i'm a

675
00:20:26,480 --> 00:20:28,159
i'm an app developer i'm not in charge

676
00:20:28,159 --> 00:20:29,919
of maintaining images so you can just

677
00:20:29,919 --> 00:20:33,559
say volume type library

678
00:20:38,000 --> 00:20:39,120
and that will run this again is on a

679
00:20:39,120 --> 00:20:42,320
slightly older node image

680
00:20:42,400 --> 00:20:46,000
and again we get back tons and tons

681
00:20:46,000 --> 00:20:47,760
of

682
00:20:47,760 --> 00:20:49,280
actually not too many but enough highs

683
00:20:49,280 --> 00:20:50,559
and criticals that i would not recommend

684
00:20:50,559 --> 00:20:54,000
running that image in production

685
00:20:54,720 --> 00:20:55,919
so that's the other option so we've got

686
00:20:55,919 --> 00:20:58,960
our two different types of scanning

687
00:21:00,799 --> 00:21:02,640
the high and critical flag are also

688
00:21:02,640 --> 00:21:04,000
really useful and we're going to dive

689
00:21:04,000 --> 00:21:05,520
into more detail on that when we are at

690
00:21:05,520 --> 00:21:08,559
the cicd part but if you want to have

691
00:21:08,559 --> 00:21:10,799
checks before deploying any container

692
00:21:10,799 --> 00:21:12,640
image to production or to your staging

693
00:21:12,640 --> 00:21:14,400
environment or so on then you can

694
00:21:14,400 --> 00:21:15,679
basically make sure that the pipeline

695
00:21:15,679 --> 00:21:18,240
fails if there's certain types of

696
00:21:18,240 --> 00:21:20,320
vulnerabilities yeah actually another

697
00:21:20,320 --> 00:21:22,240
thing just to mention is where the high

698
00:21:22,240 --> 00:21:24,640
end critical come from this is the cvss

699
00:21:24,640 --> 00:21:27,520
based on the cvss score

700
00:21:27,520 --> 00:21:29,280
it's a bit of a tricky topic because

701
00:21:29,280 --> 00:21:31,600
what is high in cvss or critical in cvss

702
00:21:31,600 --> 00:21:33,360
your your particular organization may or

703
00:21:33,360 --> 00:21:34,480
may not care

704
00:21:34,480 --> 00:21:36,400
but it's unfortunately the only

705
00:21:36,400 --> 00:21:37,440
like if you're just getting like you're

706
00:21:37,440 --> 00:21:38,880
doing something

707
00:21:38,880 --> 00:21:40,720
generally like a tool you can't pick out

708
00:21:40,720 --> 00:21:42,400
like what an individual organization's

709
00:21:42,400 --> 00:21:45,039
version of severe severity is so cbss is

710
00:21:45,039 --> 00:21:46,960
at the moment anyway the most generally

711
00:21:46,960 --> 00:21:48,960
accepted way of scoring vulnerabilities

712
00:21:48,960 --> 00:21:50,320
and and the high critical thing just

713
00:21:50,320 --> 00:21:51,919
relates to exactly what the cbss score

714
00:21:51,919 --> 00:21:53,360
is

715
00:21:53,360 --> 00:21:54,400
so

716
00:21:54,400 --> 00:21:55,679
another thing you can do another way of

717
00:21:55,679 --> 00:21:57,919
using trivia another way of potentially

718
00:21:57,919 --> 00:21:59,600
doing vulnerability scanning and

719
00:21:59,600 --> 00:22:01,679
development is say you think i would

720
00:22:01,679 --> 00:22:03,679
like to download and install a package

721
00:22:03,679 --> 00:22:05,760
from github right i want to go and get

722
00:22:05,760 --> 00:22:07,520
this repository i think this is a cool

723
00:22:07,520 --> 00:22:09,280
tool and i want to have a look at it

724
00:22:09,280 --> 00:22:10,640
before you do that you might think well

725
00:22:10,640 --> 00:22:12,159
let's just check and see if this package

726
00:22:12,159 --> 00:22:14,240
is well maintained i know okay you could

727
00:22:14,240 --> 00:22:16,000
go and read the the files yourself look

728
00:22:16,000 --> 00:22:18,400
at the change log and work it out or you

729
00:22:18,400 --> 00:22:20,400
can just run a repo scan

730
00:22:20,400 --> 00:22:22,000
so trivia will happily scan github

731
00:22:22,000 --> 00:22:23,440
repositories

732
00:22:23,440 --> 00:22:25,200
um and we can just get we can tell what

733
00:22:25,200 --> 00:22:26,400
vulnerability type we're looking for in

734
00:22:26,400 --> 00:22:28,480
this case library and then we just give

735
00:22:28,480 --> 00:22:31,600
it a url so get up url any github will

736
00:22:31,600 --> 00:22:33,840
work

737
00:22:38,799 --> 00:22:41,840
let's complete that

738
00:22:41,919 --> 00:22:43,440
so this will just go and get go to

739
00:22:43,440 --> 00:22:45,840
github and pull down the repository scan

740
00:22:45,840 --> 00:22:47,440
it and what it's doing and i'll show you

741
00:22:47,440 --> 00:22:50,080
what it's doing when it's done

742
00:22:50,799 --> 00:22:51,840
and you get back a ton of

743
00:22:51,840 --> 00:22:53,440
vulnerabilities the reason being this is

744
00:22:53,440 --> 00:22:55,120
a relatively old rails app that i built

745
00:22:55,120 --> 00:22:56,640
last year and vulnerabilities stack up

746
00:22:56,640 --> 00:22:58,400
super fast in that

747
00:22:58,400 --> 00:23:00,320
area but let me just show you what it's

748
00:23:00,320 --> 00:23:01,280
doing

749
00:23:01,280 --> 00:23:03,360
so what it's done here is it's gone and

750
00:23:03,360 --> 00:23:04,880
found a yarn lock file so what is a

751
00:23:04,880 --> 00:23:06,640
scanner doing so sometimes when

752
00:23:06,640 --> 00:23:08,400
vulnerability scanners don't work a

753
00:23:08,400 --> 00:23:09,600
useful thing to troubleshoot them is to

754
00:23:09,600 --> 00:23:11,039
understand what they're looking for

755
00:23:11,039 --> 00:23:12,720
right so to find javascript

756
00:23:12,720 --> 00:23:13,919
vulnerabilities one of the things that

757
00:23:13,919 --> 00:23:15,440
trivia will do is it will look for

758
00:23:15,440 --> 00:23:17,360
anything which is called yarn.lock

759
00:23:17,360 --> 00:23:18,799
because it knows that's where the

760
00:23:18,799 --> 00:23:20,880
package versions are so it'll get that

761
00:23:20,880 --> 00:23:22,480
and that's what it does its analysis so

762
00:23:22,480 --> 00:23:24,640
it's found a yarn log file

763
00:23:24,640 --> 00:23:27,200
and it's also found a gem file so it's

764
00:23:27,200 --> 00:23:28,880
found a gem lock gemfile.lock because

765
00:23:28,880 --> 00:23:30,480
this is a rails application it's got

766
00:23:30,480 --> 00:23:32,480
genpal.lock as well so it's got two

767
00:23:32,480 --> 00:23:34,640
different sets of vulnerabilities um

768
00:23:34,640 --> 00:23:37,120
it's got those ones which are obviously

769
00:23:37,120 --> 00:23:38,559
ruby and rails vulnerabilities and then

770
00:23:38,559 --> 00:23:40,320
it's got this little lot which are npm

771
00:23:40,320 --> 00:23:42,960
vulnerabilities

772
00:23:48,720 --> 00:23:50,400
we can also do it the other way around

773
00:23:50,400 --> 00:23:52,480
so if you've got files down locally

774
00:23:52,480 --> 00:23:53,840
you've downloaded files onto your local

775
00:23:53,840 --> 00:23:55,120
machine you've already cloned the

776
00:23:55,120 --> 00:23:56,960
repository or if you want to scan stuff

777
00:23:56,960 --> 00:23:58,799
that's your own code right you might not

778
00:23:58,799 --> 00:24:00,320
want you might not have this on a github

779
00:24:00,320 --> 00:24:02,000
you might not have this on a repository

780
00:24:02,000 --> 00:24:03,440
so you might say i just want to scan the

781
00:24:03,440 --> 00:24:06,000
file system right and again once you

782
00:24:06,000 --> 00:24:07,279
know about how vulnerability scanners

783
00:24:07,279 --> 00:24:08,080
work

784
00:24:08,080 --> 00:24:09,200
all they're doing is looking for

785
00:24:09,200 --> 00:24:11,360
specific files analyzing those files

786
00:24:11,360 --> 00:24:13,360
comparing against security databases it

787
00:24:13,360 --> 00:24:14,640
makes sense that you can scan a file

788
00:24:14,640 --> 00:24:15,679
system

789
00:24:15,679 --> 00:24:16,960
so

790
00:24:16,960 --> 00:24:19,840
we should be able to do this

791
00:24:20,080 --> 00:24:22,159
ah where am i so if i just do that git

792
00:24:22,159 --> 00:24:23,840
clone

793
00:24:23,840 --> 00:24:25,360
it's a super small repository so if you

794
00:24:25,360 --> 00:24:27,520
are doing things um the git clone should

795
00:24:27,520 --> 00:24:28,480
just work

796
00:24:28,480 --> 00:24:31,120
it's pretty fast

797
00:24:31,120 --> 00:24:33,279
and then i can just do

798
00:24:33,279 --> 00:24:34,559
something with this bigger again because

799
00:24:34,559 --> 00:24:35,360
it's

800
00:24:35,360 --> 00:24:39,120
so people can probably see pretty

801
00:24:41,200 --> 00:24:42,960
it basically does the exact same process

802
00:24:42,960 --> 00:24:43,760
right

803
00:24:43,760 --> 00:24:45,679
it will go in it will say okay i've

804
00:24:45,679 --> 00:24:47,279
found a yarn lock i have found the gem

805
00:24:47,279 --> 00:24:49,039
file i'm going to scan those and i'm

806
00:24:49,039 --> 00:24:50,240
going to give you back the

807
00:24:50,240 --> 00:24:51,760
vulnerabilities we've got

808
00:24:51,760 --> 00:24:54,480
so it's super fast you can also scan

809
00:24:54,480 --> 00:24:56,720
private git repositories by providing

810
00:24:56,720 --> 00:25:00,240
the github token

811
00:25:00,240 --> 00:25:02,640
and one other thing you can do is you

812
00:25:02,640 --> 00:25:04,320
can say you know what i don't care about

813
00:25:04,320 --> 00:25:06,159
the rails vulnerabilities i only

814
00:25:06,159 --> 00:25:07,440
actually care about the javascript

815
00:25:07,440 --> 00:25:08,720
vulnerabilities so the only thing i want

816
00:25:08,720 --> 00:25:10,080
to tell you to tell me about is tell me

817
00:25:10,080 --> 00:25:11,360
what javascript vulnerabilities do i

818
00:25:11,360 --> 00:25:13,840
have in this package and just give it a

819
00:25:13,840 --> 00:25:15,520
specific file name so if you know the

820
00:25:15,520 --> 00:25:17,120
file name you want to scan the other

821
00:25:17,120 --> 00:25:18,320
thing is if your scanner is not picking

822
00:25:18,320 --> 00:25:19,600
it up for whatever reason you know it's

823
00:25:19,600 --> 00:25:20,720
having problems detecting it maybe

824
00:25:20,720 --> 00:25:21,760
you've got a different file name from

825
00:25:21,760 --> 00:25:24,000
usual then you can say hey you know what

826
00:25:24,000 --> 00:25:25,600
could you please go and send that exact

827
00:25:25,600 --> 00:25:27,760
thing and it'll go and say okay cool i'm

828
00:25:27,760 --> 00:25:29,520
just going to tell you what's in

829
00:25:29,520 --> 00:25:31,760
that

830
00:25:32,880 --> 00:25:33,919
so that gives you back those

831
00:25:33,919 --> 00:25:35,120
vulnerabilities and again we can see

832
00:25:35,120 --> 00:25:36,159
we've got we've got quite a few in there

833
00:25:36,159 --> 00:25:37,120
because i have not patched this

834
00:25:37,120 --> 00:25:41,000
application in a couple of months

835
00:25:44,799 --> 00:25:46,559
so obviously one of the things we've

836
00:25:46,559 --> 00:25:48,640
seen so far is all the output that we've

837
00:25:48,640 --> 00:25:51,679
had is table format and table format is

838
00:25:51,679 --> 00:25:53,279
nice if you just want to look at it on

839
00:25:53,279 --> 00:25:54,559
screen

840
00:25:54,559 --> 00:25:56,480
but it's not super useful if you want to

841
00:25:56,480 --> 00:25:57,600
analyze it

842
00:25:57,600 --> 00:25:59,360
because obviously you know trying to if

843
00:25:59,360 --> 00:26:00,960
you've got like 500 vulnerabilities and

844
00:26:00,960 --> 00:26:02,400
they've even come out on the table it's

845
00:26:02,400 --> 00:26:03,440
not really easy to share that

846
00:26:03,440 --> 00:26:04,640
information it's not really easy to say

847
00:26:04,640 --> 00:26:05,760
hey i'm going to save this somewhere and

848
00:26:05,760 --> 00:26:07,360
let someone else analyze it or i want to

849
00:26:07,360 --> 00:26:09,600
analyze it

850
00:26:09,600 --> 00:26:11,760
so we might want to do json format right

851
00:26:11,760 --> 00:26:14,240
uh and the json format that trivia's got

852
00:26:14,240 --> 00:26:17,120
is actually pretty useful

853
00:26:20,320 --> 00:26:22,640
so i'm just going to scan another um

854
00:26:22,640 --> 00:26:24,480
another repository i've got so again

855
00:26:24,480 --> 00:26:25,600
we're just going to tell it we want the

856
00:26:25,600 --> 00:26:26,799
output so the only thing we're doing

857
00:26:26,799 --> 00:26:28,080
differently here

858
00:26:28,080 --> 00:26:30,320
is we are going to um we're going to do

859
00:26:30,320 --> 00:26:32,480
json format but apart from that this

860
00:26:32,480 --> 00:26:34,000
command is pretty much the same we're

861
00:26:34,000 --> 00:26:36,400
just picking a repository on docker hub

862
00:26:36,400 --> 00:26:39,120
and trivia by the way like docker will

863
00:26:39,120 --> 00:26:41,520
default to docker hub as a registry so

864
00:26:41,520 --> 00:26:43,840
just taking the same format i know some

865
00:26:43,840 --> 00:26:45,120
not every container runtime will do that

866
00:26:45,120 --> 00:26:46,720
these days but it just defaults to

867
00:26:46,720 --> 00:26:47,919
docker hops if you don't tell it

868
00:26:47,919 --> 00:26:49,600
differently it assumes you're talking

869
00:26:49,600 --> 00:26:51,520
about docker hub

870
00:26:51,520 --> 00:26:52,880
and i'm going to go and get uh as you

871
00:26:52,880 --> 00:26:54,000
might tell what i'm looking for here

872
00:26:54,000 --> 00:26:55,440
because i'm going to get an image called

873
00:26:55,440 --> 00:26:58,320
spring for for shell demo

874
00:26:58,320 --> 00:26:59,840
and

875
00:26:59,840 --> 00:27:03,360
yeah you get a very large amount of

876
00:27:03,360 --> 00:27:05,039
json back

877
00:27:05,039 --> 00:27:06,880
one what's interesting here if you are

878
00:27:06,880 --> 00:27:08,240
looking to get more information about

879
00:27:08,240 --> 00:27:10,080
specific vulnerabilities is the json

880
00:27:10,080 --> 00:27:12,080
format has far more information than the

881
00:27:12,080 --> 00:27:13,760
table format you're not just getting

882
00:27:13,760 --> 00:27:16,240
like version number and like severity

883
00:27:16,240 --> 00:27:17,600
what you actually do get is you get all

884
00:27:17,600 --> 00:27:19,600
sorts of fun stuff like installed

885
00:27:19,600 --> 00:27:22,559
versions fixed versions

886
00:27:22,559 --> 00:27:24,559
you get severity source so where did

887
00:27:24,559 --> 00:27:26,640
that severity source come from because

888
00:27:26,640 --> 00:27:28,080
the fun one of the fun things about

889
00:27:28,080 --> 00:27:30,640
vulnerabilities is different bodies will

890
00:27:30,640 --> 00:27:33,120
score the same vulnerability differently

891
00:27:33,120 --> 00:27:34,559
so if you look on a github security

892
00:27:34,559 --> 00:27:36,320
advisory it might give you one severity

893
00:27:36,320 --> 00:27:37,360
and then you go to the national

894
00:27:37,360 --> 00:27:38,880
vulnerability database and it'll give

895
00:27:38,880 --> 00:27:40,480
you a different severity

896
00:27:40,480 --> 00:27:42,320
which of those you want to choose

897
00:27:42,320 --> 00:27:43,919
is kind of up to you but if you're

898
00:27:43,919 --> 00:27:45,520
trying to work out why trevi has told

899
00:27:45,520 --> 00:27:47,840
you it's a specific severity get json

900
00:27:47,840 --> 00:27:49,840
output and then it will happily

901
00:27:49,840 --> 00:27:51,679
tell you the source so that's github so

902
00:27:51,679 --> 00:27:53,039
this particular one the information came

903
00:27:53,039 --> 00:27:55,360
from github security advisory uh and it

904
00:27:55,360 --> 00:27:57,120
also tells you where the advisory is so

905
00:27:57,120 --> 00:27:58,399
if you want to go and find the advisor

906
00:27:58,399 --> 00:28:00,159
and say hey how did i get the severity

907
00:28:00,159 --> 00:28:02,720
or what is this thing

908
00:28:02,720 --> 00:28:04,640
also it gives you this

909
00:28:04,640 --> 00:28:07,840
which is this is the cvss score

910
00:28:07,840 --> 00:28:10,320
this formula looks very fancy

911
00:28:10,320 --> 00:28:12,159
but basically that's how you score these

912
00:28:12,159 --> 00:28:13,600
things it's got a number of different

913
00:28:13,600 --> 00:28:15,039
parameters you put into it and that's

914
00:28:15,039 --> 00:28:16,480
how it comes out with a number

915
00:28:16,480 --> 00:28:18,559
um i have a whole different talk about

916
00:28:18,559 --> 00:28:20,640
why that's not always very accurate but

917
00:28:20,640 --> 00:28:23,279
that's not really for today um

918
00:28:23,279 --> 00:28:24,720
and it tells you what scores there are

919
00:28:24,720 --> 00:28:27,520
cbs has two versions v2 and v3 so that's

920
00:28:27,520 --> 00:28:28,640
in there as well and then we have

921
00:28:28,640 --> 00:28:30,720
references so you want to find more

922
00:28:30,720 --> 00:28:32,320
that's there so there's a ton of

923
00:28:32,320 --> 00:28:33,520
information in there if you want to go

924
00:28:33,520 --> 00:28:36,000
in with json parsing tools um that's

925
00:28:36,000 --> 00:28:37,840
definitely an option

926
00:28:37,840 --> 00:28:40,159
any questions about that part yeah

927
00:28:40,159 --> 00:28:41,120
because there's quite a lot of

928
00:28:41,120 --> 00:28:43,039
information anything unclear

929
00:28:43,039 --> 00:28:44,480
you can raise your hand you can raise

930
00:28:44,480 --> 00:28:45,440
hands

931
00:28:45,440 --> 00:28:47,919
we have time

932
00:28:47,919 --> 00:28:50,240
how are we doing with them we're done

933
00:28:50,240 --> 00:28:52,399
yeah

934
00:28:52,960 --> 00:28:55,600
okay we're all awesome right okay we're

935
00:28:55,600 --> 00:28:57,360
doing fantastically it's all going

936
00:28:57,360 --> 00:28:59,279
brilliant so next thing we want to do

937
00:28:59,279 --> 00:29:00,640
and i am going to have to cut very much

938
00:29:00,640 --> 00:29:02,559
if you do if you are typing along do

939
00:29:02,559 --> 00:29:04,480
copy paste this one do not try and type

940
00:29:04,480 --> 00:29:06,640
it i would challenge anyone to type this

941
00:29:06,640 --> 00:29:09,200
command without making at least one typo

942
00:29:09,200 --> 00:29:11,200
so one thing you can do once you've got

943
00:29:11,200 --> 00:29:13,360
json is you might say well you know what

944
00:29:13,360 --> 00:29:14,720
i don't want to know about all these

945
00:29:14,720 --> 00:29:16,159
vulnerabilities i'm interested in a

946
00:29:16,159 --> 00:29:18,399
specific vulnerability so i for example

947
00:29:18,399 --> 00:29:20,240
i'm looking for spring for shell right

948
00:29:20,240 --> 00:29:21,360
spring for shell if you didn't come

949
00:29:21,360 --> 00:29:23,039
across it was a java ecosystem issue

950
00:29:23,039 --> 00:29:25,200
from earlier this year that was fairly

951
00:29:25,200 --> 00:29:27,520
nasty um and so a lot of companies were

952
00:29:27,520 --> 00:29:28,799
very interested in what is their

953
00:29:28,799 --> 00:29:30,640
exposure to spring for shell so you

954
00:29:30,640 --> 00:29:32,240
might say well i know the cve number i'm

955
00:29:32,240 --> 00:29:34,720
looking for and i want to actually just

956
00:29:34,720 --> 00:29:35,760
find that

957
00:29:35,760 --> 00:29:37,360
how do you do that

958
00:29:37,360 --> 00:29:38,399
and i'm going to walk through this one

959
00:29:38,399 --> 00:29:39,760
because there's a little bit more to it

960
00:29:39,760 --> 00:29:41,679
there's a couple of tricks here that are

961
00:29:41,679 --> 00:29:43,440
important if you want to do this

962
00:29:43,440 --> 00:29:44,799
the first one and this is one that

963
00:29:44,799 --> 00:29:46,240
tripped me up quite a few times before i

964
00:29:46,240 --> 00:29:48,159
got it right if you're going to be

965
00:29:48,159 --> 00:29:50,880
parsing the output of json from trivi

966
00:29:50,880 --> 00:29:53,440
you need to give it the minus q switch

967
00:29:53,440 --> 00:29:54,960
because otherwise it gives you some text

968
00:29:54,960 --> 00:29:57,120
before it goes into the json and any

969
00:29:57,120 --> 00:29:59,120
json parser will complain horribly and

970
00:29:59,120 --> 00:30:00,720
say i found something that's not json in

971
00:30:00,720 --> 00:30:03,840
here i'm not going to do it so minus q

972
00:30:03,840 --> 00:30:06,240
is a very important switch

973
00:30:06,240 --> 00:30:08,559
then we give it format json we give it

974
00:30:08,559 --> 00:30:10,480
that spring for shell again and then

975
00:30:10,480 --> 00:30:12,480
what we're doing here is just jq i don't

976
00:30:12,480 --> 00:30:14,320
know about anyone else in the room but

977
00:30:14,320 --> 00:30:16,159
personally whenever i do jq i end up

978
00:30:16,159 --> 00:30:18,480
googling um so this is my the result of

979
00:30:18,480 --> 00:30:19,840
my googling for how you get a specific

980
00:30:19,840 --> 00:30:21,440
vulnerability

981
00:30:21,440 --> 00:30:22,640
what we're going to do is we look in the

982
00:30:22,640 --> 00:30:23,919
results array

983
00:30:23,919 --> 00:30:25,600
and we look in the vulnerability so

984
00:30:25,600 --> 00:30:26,720
we're going to look at the vulnerability

985
00:30:26,720 --> 00:30:29,120
id for every vulnerability returned and

986
00:30:29,120 --> 00:30:31,120
then we're just going to use a select

987
00:30:31,120 --> 00:30:33,919
i want to select the vulnerability id

988
00:30:33,919 --> 00:30:37,440
where it's cve 2022-22965

989
00:30:37,440 --> 00:30:38,960
so this will just tell me about that

990
00:30:38,960 --> 00:30:41,520
vulnerability it won't give me all the

991
00:30:41,520 --> 00:30:45,120
other stuff that we got back before

992
00:30:47,760 --> 00:30:49,840
and what you get back is yep in this

993
00:30:49,840 --> 00:30:52,480
case this particular image does have

994
00:30:52,480 --> 00:30:54,159
spring for shell it's actually got it in

995
00:30:54,159 --> 00:30:56,799
a couple of different places

996
00:30:56,799 --> 00:30:58,559
and jq very handily makes things look

997
00:30:58,559 --> 00:31:01,120
pretty as well

998
00:31:01,760 --> 00:31:03,679
so one other thing i'm going to do it's

999
00:31:03,679 --> 00:31:04,880
actually not in the slides but i thought

1000
00:31:04,880 --> 00:31:08,159
about it after i'd written the slides

1001
00:31:08,320 --> 00:31:10,399
is another tool you can use for this

1002
00:31:10,399 --> 00:31:13,120
if you've not used it is jls

1003
00:31:13,120 --> 00:31:16,840
and jls is really handy because it does

1004
00:31:16,840 --> 00:31:19,200
this and then what you can do is you can

1005
00:31:19,200 --> 00:31:20,880
interactively

1006
00:31:20,880 --> 00:31:22,559
go through the results

1007
00:31:22,559 --> 00:31:24,320
so for example all the metadata you can

1008
00:31:24,320 --> 00:31:25,679
have a look in there you can look at the

1009
00:31:25,679 --> 00:31:27,840
diff ids the repo tags

1010
00:31:27,840 --> 00:31:30,000
image config which is quite handy and

1011
00:31:30,000 --> 00:31:31,760
then you get the results

1012
00:31:31,760 --> 00:31:32,720
so if you want to actually like

1013
00:31:32,720 --> 00:31:34,720
interactively like look through if

1014
00:31:34,720 --> 00:31:37,039
anyone's not used j less um although the

1015
00:31:37,039 --> 00:31:38,399
installer got a bit funny when i

1016
00:31:38,399 --> 00:31:40,320
installed it today uh it did some rust

1017
00:31:40,320 --> 00:31:42,240
libraries to make it work uh it is

1018
00:31:42,240 --> 00:31:43,120
actually a really nice way of

1019
00:31:43,120 --> 00:31:44,480
interactively looking through this data

1020
00:31:44,480 --> 00:31:45,600
because you do get a lot of data out of

1021
00:31:45,600 --> 00:31:46,799
these tools

1022
00:31:46,799 --> 00:31:48,000
and if you're trying to analyze it can

1023
00:31:48,000 --> 00:31:49,440
be a bit painful because even json you

1024
00:31:49,440 --> 00:31:50,880
know it's easier if you're good if

1025
00:31:50,880 --> 00:31:52,559
you're handy with json but if you're not

1026
00:31:52,559 --> 00:31:53,760
i would thoroughly recommend looking at

1027
00:31:53,760 --> 00:31:56,320
jls

1028
00:31:58,799 --> 00:32:01,799
so

1029
00:32:02,159 --> 00:32:04,960
so configuration scanning um so far what

1030
00:32:04,960 --> 00:32:05,840
we've talked about is vulnerability

1031
00:32:05,840 --> 00:32:07,519
scanning right we've talked about the

1032
00:32:07,519 --> 00:32:08,880
idea that

1033
00:32:08,880 --> 00:32:10,080
um we're going to look for

1034
00:32:10,080 --> 00:32:12,720
vulnerabilities it's relatively

1035
00:32:12,720 --> 00:32:14,159
it's relatively mechanistic i mean

1036
00:32:14,159 --> 00:32:15,360
essentially what you're doing is like

1037
00:32:15,360 --> 00:32:16,399
you know which things haven't been

1038
00:32:16,399 --> 00:32:18,480
patched with the exception of ignore

1039
00:32:18,480 --> 00:32:20,799
unfixed um you know the goal is

1040
00:32:20,799 --> 00:32:21,679
basically to try to get as few

1041
00:32:21,679 --> 00:32:23,440
vulnerabilities as possible if your

1042
00:32:23,440 --> 00:32:24,880
organization has as large you'll

1043
00:32:24,880 --> 00:32:26,320
probably have a policy about how many of

1044
00:32:26,320 --> 00:32:27,679
different severities you can have before

1045
00:32:27,679 --> 00:32:29,519
you go to production ideally i'd say

1046
00:32:29,519 --> 00:32:31,840
zero however let's all be realistic here

1047
00:32:31,840 --> 00:32:33,840
if you've ever tried to get to zero and

1048
00:32:33,840 --> 00:32:35,679
maintain that in all of container images

1049
00:32:35,679 --> 00:32:37,440
that's pretty difficult to do

1050
00:32:37,440 --> 00:32:39,519
but the other thing we can do and is a

1051
00:32:39,519 --> 00:32:41,679
great idea when when as early as

1052
00:32:41,679 --> 00:32:44,080
possible the development life cycle is

1053
00:32:44,080 --> 00:32:44,960
um

1054
00:32:44,960 --> 00:32:47,440
configuration scanning iac scanning

1055
00:32:47,440 --> 00:32:48,720
um

1056
00:32:48,720 --> 00:32:50,080
so we can do this

1057
00:32:50,080 --> 00:32:51,919
either during development or when using

1058
00:32:51,919 --> 00:32:54,000
third-party projects if you are

1059
00:32:54,000 --> 00:32:55,519
downloading people's kubernetes

1060
00:32:55,519 --> 00:32:57,200
manifests and applying them to your

1061
00:32:57,200 --> 00:33:00,080
cluster run an iec scanner over them

1062
00:33:00,080 --> 00:33:01,760
first to make sure they have been done

1063
00:33:01,760 --> 00:33:04,559
with decent practices this is important

1064
00:33:04,559 --> 00:33:05,840
i have seen lots of third-party

1065
00:33:05,840 --> 00:33:07,840
manifests do some rather

1066
00:33:07,840 --> 00:33:09,519
i mean you might be okay with it but i

1067
00:33:09,519 --> 00:33:10,640
would recommend running the scanner and

1068
00:33:10,640 --> 00:33:12,320
making sure you're okay with it so for

1069
00:33:12,320 --> 00:33:13,360
example they might do something like say

1070
00:33:13,360 --> 00:33:14,960
i want a privileged container

1071
00:33:14,960 --> 00:33:16,960
or i want to

1072
00:33:16,960 --> 00:33:18,559
i want to create a manifest that gives

1073
00:33:18,559 --> 00:33:20,640
this particular project cluster admin

1074
00:33:20,640 --> 00:33:21,600
and you might say well you know what

1075
00:33:21,600 --> 00:33:23,039
actually i'm not too comfortable with

1076
00:33:23,039 --> 00:33:25,440
the third-party project cluster admin

1077
00:33:25,440 --> 00:33:26,880
you could read the manifests obviously

1078
00:33:26,880 --> 00:33:28,000
you know you can manually read all the

1079
00:33:28,000 --> 00:33:30,720
manifest read the helm charts or you can

1080
00:33:30,720 --> 00:33:32,240
run a scanner over it and get a kind of

1081
00:33:32,240 --> 00:33:33,840
quick view for what are the likely

1082
00:33:33,840 --> 00:33:35,200
problems personally i think it's not a

1083
00:33:35,200 --> 00:33:36,799
bad way of like checking that before you

1084
00:33:36,799 --> 00:33:39,679
use any third party projects

1085
00:33:39,679 --> 00:33:40,960
what to hear is this is a bit more

1086
00:33:40,960 --> 00:33:42,080
variable

1087
00:33:42,080 --> 00:33:43,360
each tool that does this kind of

1088
00:33:43,360 --> 00:33:45,279
scanning will have its own rule set the

1089
00:33:45,279 --> 00:33:46,960
rule sets tend to have some common

1090
00:33:46,960 --> 00:33:48,320
points you know all of them will do

1091
00:33:48,320 --> 00:33:49,760
things like for example checking docker

1092
00:33:49,760 --> 00:33:51,039
files to make sure you're not running as

1093
00:33:51,039 --> 00:33:52,559
root because that's a pretty standard

1094
00:33:52,559 --> 00:33:55,120
check but each rule set will not only

1095
00:33:55,120 --> 00:33:56,480
have each tool will not only have

1096
00:33:56,480 --> 00:33:58,159
different rule sets but they will apply

1097
00:33:58,159 --> 00:33:59,600
different severities

1098
00:33:59,600 --> 00:34:01,360
i'm kind of hoping this space will get

1099
00:34:01,360 --> 00:34:03,840
better as it matures and we can all

1100
00:34:03,840 --> 00:34:05,279
agree on like what the severity of

1101
00:34:05,279 --> 00:34:06,720
things are because right now i can see

1102
00:34:06,720 --> 00:34:08,960
people running like one iec scanner and

1103
00:34:08,960 --> 00:34:10,159
saying i've got these vulnerabilities

1104
00:34:10,159 --> 00:34:12,239
then your auditor or pen tester runs a

1105
00:34:12,239 --> 00:34:13,918
different iec scanner gets a whole lot

1106
00:34:13,918 --> 00:34:15,199
of different severities and you have

1107
00:34:15,199 --> 00:34:16,879
this kind of like you know what's going

1108
00:34:16,879 --> 00:34:18,719
on that's something to be aware of when

1109
00:34:18,719 --> 00:34:19,679
you're using these tools there's not

1110
00:34:19,679 --> 00:34:21,119
like a heart it's not like cvs escort

1111
00:34:21,119 --> 00:34:23,199
there's no cvs score for ic it's

1112
00:34:23,199 --> 00:34:25,040
generally that the tool author to say

1113
00:34:25,040 --> 00:34:27,040
how severe they think something is and

1114
00:34:27,040 --> 00:34:29,599
people do vary on that

1115
00:34:29,599 --> 00:34:30,639
but we might want to look at things like

1116
00:34:30,639 --> 00:34:32,960
kubernetes pss so this is kubernetes

1117
00:34:32,960 --> 00:34:34,480
port security standards

1118
00:34:34,480 --> 00:34:37,280
um kubernetes pss essentially is a

1119
00:34:37,280 --> 00:34:39,839
document which guidelines on

1120
00:34:39,839 --> 00:34:40,800
how

1121
00:34:40,800 --> 00:34:42,079
how locked down you want your kubernetes

1122
00:34:42,079 --> 00:34:44,159
manifests so there's three levels

1123
00:34:44,159 --> 00:34:46,000
there's unrestricted the standard and

1124
00:34:46,000 --> 00:34:47,599
restricted

1125
00:34:47,599 --> 00:34:49,918
and you can have any you know of the two

1126
00:34:49,918 --> 00:34:50,960
you kind of want to see can you actually

1127
00:34:50,960 --> 00:34:52,719
comply with those there's also cis

1128
00:34:52,719 --> 00:34:55,119
benchmarks so there are cis benchmarks

1129
00:34:55,119 --> 00:34:57,200
for kubernetes and docker if you've not

1130
00:34:57,200 --> 00:34:59,440
come across them before cis benchmarks

1131
00:34:59,440 --> 00:35:01,839
essentially are vendor neutral

1132
00:35:01,839 --> 00:35:04,000
configuration guide which we were

1133
00:35:04,000 --> 00:35:06,000
talking about on friday so if you are

1134
00:35:06,000 --> 00:35:07,359
supposed to kubernetes one so if you're

1135
00:35:07,359 --> 00:35:08,960
looking for more detail on those we have

1136
00:35:08,960 --> 00:35:12,320
a talk at 2 pm at 2 pm on friday we're

1137
00:35:12,320 --> 00:35:14,160
going to talk about

1138
00:35:14,160 --> 00:35:15,359
different

1139
00:35:15,359 --> 00:35:17,680
um benchmarks compare them show you

1140
00:35:17,680 --> 00:35:19,359
different tools that you can use from

1141
00:35:19,359 --> 00:35:21,839
across the cloud native ecosystem yeah

1142
00:35:21,839 --> 00:35:23,200
so we're not going too much of those now

1143
00:35:23,200 --> 00:35:24,560
because we want to spoil the talk for

1144
00:35:24,560 --> 00:35:26,960
friday

1145
00:35:27,200 --> 00:35:28,400
so um

1146
00:35:28,400 --> 00:35:29,920
what we're going to do is we're going to

1147
00:35:29,920 --> 00:35:31,440
show you how that works how does the

1148
00:35:31,440 --> 00:35:33,280
configuration scanning works and some

1149
00:35:33,280 --> 00:35:35,920
reasonably simple examples of what you

1150
00:35:35,920 --> 00:35:37,920
can do to do configuration scanning so

1151
00:35:37,920 --> 00:35:39,920
the first thing to do if you are like

1152
00:35:39,920 --> 00:35:42,480
following along and doing the demos is

1153
00:35:42,480 --> 00:35:44,880
you want to do um just get clone so just

1154
00:35:44,880 --> 00:35:46,480
get clone that and again this should be

1155
00:35:46,480 --> 00:35:48,000
in the

1156
00:35:48,000 --> 00:35:49,680
this should be in the commands file so

1157
00:35:49,680 --> 00:35:50,800
if you just

1158
00:35:50,800 --> 00:35:52,079
if you're just picking up and you want

1159
00:35:52,079 --> 00:35:53,280
to like say where is this you want to go

1160
00:35:53,280 --> 00:35:55,839
down to

1161
00:35:55,920 --> 00:35:57,920
where are we there we go configuration

1162
00:35:57,920 --> 00:35:59,200
scanning docker

1163
00:35:59,200 --> 00:36:00,640
so just find that in the text file in

1164
00:36:00,640 --> 00:36:02,880
the commands list and you can get clone

1165
00:36:02,880 --> 00:36:05,040
that repository down shouldn't take very

1166
00:36:05,040 --> 00:36:08,160
long it's not super huge

1167
00:36:08,880 --> 00:36:12,520
so i will do that

1168
00:36:15,839 --> 00:36:17,760
we are also going to use that trivia

1169
00:36:17,760 --> 00:36:20,400
demo repository in the second part

1170
00:36:20,400 --> 00:36:21,680
of the talk

1171
00:36:21,680 --> 00:36:24,160
um so it's generally useful if you can

1172
00:36:24,160 --> 00:36:25,520
clone it now yeah it's probably worth

1173
00:36:25,520 --> 00:36:27,040
cloning now

1174
00:36:27,040 --> 00:36:27,839
okay

1175
00:36:27,839 --> 00:36:29,920
so we've got that down

1176
00:36:29,920 --> 00:36:32,079
and i'm just going to go into the

1177
00:36:32,079 --> 00:36:34,800
tributable directory

1178
00:36:34,800 --> 00:36:36,800
a little bit bigger

1179
00:36:36,800 --> 00:36:40,839
and then we're just going to go

1180
00:36:41,359 --> 00:36:43,839
config

1181
00:36:45,200 --> 00:36:47,359
so what this is doing is this is just

1182
00:36:47,359 --> 00:36:49,839
doing a configuration scan and

1183
00:36:49,839 --> 00:36:51,760
how this works essentially is it looks

1184
00:36:51,760 --> 00:36:53,680
for files that

1185
00:36:53,680 --> 00:36:56,240
are of the formats it recognizes so it

1186
00:36:56,240 --> 00:36:58,000
recognizes docker files it recognizes

1187
00:36:58,000 --> 00:36:59,520
kubernetes manifest it recognizes

1188
00:36:59,520 --> 00:37:01,200
terraform and i think some others as

1189
00:37:01,200 --> 00:37:02,240
well

1190
00:37:02,240 --> 00:37:03,440
find that on the website but definitely

1191
00:37:03,440 --> 00:37:04,320
those three because those are the ones

1192
00:37:04,320 --> 00:37:05,920
we're going to talk about when it finds

1193
00:37:05,920 --> 00:37:08,160
one of those files it analyzes it and

1194
00:37:08,160 --> 00:37:10,800
attempts to say what is wrong in here

1195
00:37:10,800 --> 00:37:13,359
based on the rule set i've got and we'll

1196
00:37:13,359 --> 00:37:14,480
we'll talk about it later on you can

1197
00:37:14,480 --> 00:37:15,680
actually write your own rules so if

1198
00:37:15,680 --> 00:37:16,720
you're not happy with the rules that

1199
00:37:16,720 --> 00:37:18,480
come with this if your organization has

1200
00:37:18,480 --> 00:37:20,560
got specific standards there's nothing

1201
00:37:20,560 --> 00:37:22,480
to stop you writing your own rule and

1202
00:37:22,480 --> 00:37:23,920
adding it in and saying all right okay

1203
00:37:23,920 --> 00:37:25,599
i'm particularly concerned about this or

1204
00:37:25,599 --> 00:37:26,960
indeed saying you know what i'm not

1205
00:37:26,960 --> 00:37:28,480
concerned about this this particular

1206
00:37:28,480 --> 00:37:29,839
thing is not a concern to me therefore i

1207
00:37:29,839 --> 00:37:31,040
want i don't want to be reported told

1208
00:37:31,040 --> 00:37:32,800
about it but we'll do a very basic scan

1209
00:37:32,800 --> 00:37:34,400
first

1210
00:37:34,400 --> 00:37:36,160
so

1211
00:37:36,160 --> 00:37:38,799
what this says

1212
00:37:39,599 --> 00:37:40,880
another delay of open source is that

1213
00:37:40,880 --> 00:37:42,160
this output completely changed from

1214
00:37:42,160 --> 00:37:44,240
yesterday uh thanks to open source team

1215
00:37:44,240 --> 00:37:45,359
being very fast on development it

1216
00:37:45,359 --> 00:37:46,320
actually looks a lot prettier than it

1217
00:37:46,320 --> 00:37:48,640
used to so what do we get back it

1218
00:37:48,640 --> 00:37:51,119
basically says i phoned a dockerfile and

1219
00:37:51,119 --> 00:37:52,240
it found a dockerfile because it was

1220
00:37:52,240 --> 00:37:54,240
called dockerfile like most dockerfiles

1221
00:37:54,240 --> 00:37:55,119
are

1222
00:37:55,119 --> 00:37:56,720
and it found certain things in it which

1223
00:37:56,720 --> 00:37:59,119
is it so the first one it has rated

1224
00:37:59,119 --> 00:38:01,520
um it says

1225
00:38:01,520 --> 00:38:03,760
medium specify tag in the from statement

1226
00:38:03,760 --> 00:38:06,240
so standard docker good practice is you

1227
00:38:06,240 --> 00:38:08,560
don't pull from latest because if you

1228
00:38:08,560 --> 00:38:10,640
pull from latest um you don't know when

1229
00:38:10,640 --> 00:38:12,240
the underlying image changes right i

1230
00:38:12,240 --> 00:38:13,440
personally i'm sure everyone has done a

1231
00:38:13,440 --> 00:38:15,599
lot of docker work has been burned by

1232
00:38:15,599 --> 00:38:17,119
pulling from latest and then the next

1233
00:38:17,119 --> 00:38:18,240
version of the image comes out and it

1234
00:38:18,240 --> 00:38:19,920
removes a binary that used to be in

1235
00:38:19,920 --> 00:38:21,359
there i know the ubuntu images they

1236
00:38:21,359 --> 00:38:22,880
spent a lot of time slimming them down

1237
00:38:22,880 --> 00:38:24,160
and a whole lot of my stuff broke

1238
00:38:24,160 --> 00:38:26,160
because i was using ubuntu latest and

1239
00:38:26,160 --> 00:38:27,280
the new version image came out they

1240
00:38:27,280 --> 00:38:28,320
pulled a whole lot of binaries out of it

1241
00:38:28,320 --> 00:38:29,839
and suddenly all my stuff didn't work so

1242
00:38:29,839 --> 00:38:32,000
don't do that don't run docker latest

1243
00:38:32,000 --> 00:38:36,000
run 224 2004 1804 or whatever tag that

1244
00:38:36,000 --> 00:38:38,560
you want to use but don't use latest

1245
00:38:38,560 --> 00:38:40,640
next one it will say

1246
00:38:40,640 --> 00:38:41,359
hi

1247
00:38:41,359 --> 00:38:43,280
and again this is subjective severity

1248
00:38:43,280 --> 00:38:44,800
you might not think of this as high but

1249
00:38:44,800 --> 00:38:46,480
this is the rating from the tool you

1250
00:38:46,480 --> 00:38:48,400
must have at least one user command in

1251
00:38:48,400 --> 00:38:51,280
the dockerfile so any docker container

1252
00:38:51,280 --> 00:38:52,800
will run as root

1253
00:38:52,800 --> 00:38:54,960
if you do not specify a user running

1254
00:38:54,960 --> 00:38:57,359
containers as root is a really bad idea

1255
00:38:57,359 --> 00:38:59,440
if you could get one thing fixed in your

1256
00:38:59,440 --> 00:39:01,520
container ecosystem i would personally

1257
00:39:01,520 --> 00:39:03,440
recommend make sure all your containers

1258
00:39:03,440 --> 00:39:06,240
don't run as root the reason for that is

1259
00:39:06,240 --> 00:39:08,480
is it makes it much easier to break out

1260
00:39:08,480 --> 00:39:10,320
the container if an attacker gets access

1261
00:39:10,320 --> 00:39:11,839
to your container and they are the root

1262
00:39:11,839 --> 00:39:14,240
user there's lots of cvs that only work

1263
00:39:14,240 --> 00:39:16,000
if you're ru there's lots of cvs that

1264
00:39:16,000 --> 00:39:17,280
will fail horribly if you're an

1265
00:39:17,280 --> 00:39:18,720
unprivileged user who don't have any

1266
00:39:18,720 --> 00:39:19,599
rights

1267
00:39:19,599 --> 00:39:20,960
you will make attackers lives much more

1268
00:39:20,960 --> 00:39:22,720
difficult if you don't let people run as

1269
00:39:22,720 --> 00:39:24,400
route so if you take one thing away from

1270
00:39:24,400 --> 00:39:26,640
this talk if nothing else go back run

1271
00:39:26,640 --> 00:39:28,960
this anywhere you see that try and fix

1272
00:39:28,960 --> 00:39:30,160
it it's not super simple because you do

1273
00:39:30,160 --> 00:39:31,280
have to make sure the application still

1274
00:39:31,280 --> 00:39:32,320
works

1275
00:39:32,320 --> 00:39:34,480
but well worth doing so we've got that

1276
00:39:34,480 --> 00:39:35,839
one

1277
00:39:35,839 --> 00:39:37,280
we've also got some other ones which are

1278
00:39:37,280 --> 00:39:39,520
for weird stuff in this and you can see

1279
00:39:39,520 --> 00:39:42,079
we've got port 22 in a docker file we're

1280
00:39:42,079 --> 00:39:43,599
running ssh in this docker image

1281
00:39:43,599 --> 00:39:45,359
obviously you should not run ssh in

1282
00:39:45,359 --> 00:39:47,040
docker images in the vast majority of

1283
00:39:47,040 --> 00:39:48,720
cases there may be some edge where that

1284
00:39:48,720 --> 00:39:51,119
makes sense most of the times it doesn't

1285
00:39:51,119 --> 00:39:52,560
and it tells you for example exactly

1286
00:39:52,560 --> 00:39:53,680
what line so it's going to say docker

1287
00:39:53,680 --> 00:39:56,560
file line 5 there is a statement exposed

1288
00:39:56,560 --> 00:39:58,880
22 and it's taken that to mean we're

1289
00:39:58,880 --> 00:40:02,960
running ssh inside this container image

1290
00:40:04,160 --> 00:40:06,160
yeah

1291
00:40:06,160 --> 00:40:07,440
and it also gives us some other stuff as

1292
00:40:07,440 --> 00:40:10,960
well around package managers and around

1293
00:40:10,960 --> 00:40:12,960
minus y so this is

1294
00:40:12,960 --> 00:40:14,400
this is where severity so this is where

1295
00:40:14,400 --> 00:40:15,599
personally if it was me i wouldn't rate

1296
00:40:15,599 --> 00:40:17,680
this as a high um but this is you know

1297
00:40:17,680 --> 00:40:19,119
where i'm saying severities are

1298
00:40:19,119 --> 00:40:21,760
subjective it's complaining here that we

1299
00:40:21,760 --> 00:40:23,680
are running without minus y and if you

1300
00:40:23,680 --> 00:40:26,079
don't uh put that sometimes it'll pause

1301
00:40:26,079 --> 00:40:28,480
for user input and so your docker build

1302
00:40:28,480 --> 00:40:30,240
will break so to my mind that's like

1303
00:40:30,240 --> 00:40:31,200
from a security standpoint i'm probably

1304
00:40:31,200 --> 00:40:32,800
not that concerned about that but from a

1305
00:40:32,800 --> 00:40:34,720
maintainability and stability standpoint

1306
00:40:34,720 --> 00:40:36,560
that's actually quite nasty because your

1307
00:40:36,560 --> 00:40:38,000
builds might break you know something

1308
00:40:38,000 --> 00:40:40,319
else for input

1309
00:40:40,319 --> 00:40:41,200
and

1310
00:40:41,200 --> 00:40:42,640
and then last one yeah maintainer should

1311
00:40:42,640 --> 00:40:44,079
not be used maintainers should not be

1312
00:40:44,079 --> 00:40:45,839
used because it's deprecated maintainer

1313
00:40:45,839 --> 00:40:48,240
was the old way many many many docker

1314
00:40:48,240 --> 00:40:49,760
versions anyone who's around when docker

1315
00:40:49,760 --> 00:40:51,920
113 was a thing you used maintainer

1316
00:40:51,920 --> 00:40:54,319
statements now you don't um so if you're

1317
00:40:54,319 --> 00:40:55,599
seeing things like that it means the

1318
00:40:55,599 --> 00:40:57,119
docker image has not been maintained in

1319
00:40:57,119 --> 00:41:00,079
a long time it's a very old dockerfile

1320
00:41:00,079 --> 00:41:01,920
it's maybe worth also pointing out that

1321
00:41:01,920 --> 00:41:03,839
you don't have to be a security

1322
00:41:03,839 --> 00:41:06,400
professional to use trevi and

1323
00:41:06,400 --> 00:41:08,480
check your manifests

1324
00:41:08,480 --> 00:41:09,599
your deployments from this

1325
00:41:09,599 --> 00:41:11,680
configurations when i got started with

1326
00:41:11,680 --> 00:41:13,599
kubernetes configuration checks helped

1327
00:41:13,599 --> 00:41:16,880
me to create better deployments so this

1328
00:41:16,880 --> 00:41:18,800
is really something that anybody can use

1329
00:41:18,800 --> 00:41:20,800
to improve their deployments that's a

1330
00:41:20,800 --> 00:41:22,000
brilliant point and i would say that

1331
00:41:22,000 --> 00:41:23,359
that's probably the best point about

1332
00:41:23,359 --> 00:41:24,640
trivia or the most not just trivia but

1333
00:41:24,640 --> 00:41:25,920
any configuration of vulnerability

1334
00:41:25,920 --> 00:41:27,760
scanner is as you can see from this you

1335
00:41:27,760 --> 00:41:29,280
don't need to be a security expert to

1336
00:41:29,280 --> 00:41:31,119
run this tool right there's not a lot of

1337
00:41:31,119 --> 00:41:32,880
specialist knowledge to read this it has

1338
00:41:32,880 --> 00:41:34,720
advice on what you can do and how you do

1339
00:41:34,720 --> 00:41:36,880
it so you have the opportunity to like

1340
00:41:36,880 --> 00:41:38,319
give this to people who are not security

1341
00:41:38,319 --> 00:41:40,000
experts and say look run this

1342
00:41:40,000 --> 00:41:41,119
try and work out how to get rid of some

1343
00:41:41,119 --> 00:41:42,240
of the highs try and get the

1344
00:41:42,240 --> 00:41:43,839
vulnerabilities down before it goes

1345
00:41:43,839 --> 00:41:44,880
further on to the development process

1346
00:41:44,880 --> 00:41:46,400
and people get used to it i think once

1347
00:41:46,400 --> 00:41:47,680
people got the habit of saying for

1348
00:41:47,680 --> 00:41:49,040
example i don't want my docker images to

1349
00:41:49,040 --> 00:41:50,800
run as root it can become part of

1350
00:41:50,800 --> 00:41:52,640
general practice and that is to my mind

1351
00:41:52,640 --> 00:41:54,240
is the only way we're going to improve

1352
00:41:54,240 --> 00:41:56,160
like container security as a concept is

1353
00:41:56,160 --> 00:41:58,240
by people gradually applying these

1354
00:41:58,240 --> 00:42:00,240
practices getting better so let's

1355
00:42:00,240 --> 00:42:02,160
actually try and do that right let's try

1356
00:42:02,160 --> 00:42:04,160
and fix something we're going to try and

1357
00:42:04,160 --> 00:42:05,440
fix this and then we're going to rerun

1358
00:42:05,440 --> 00:42:07,599
the scanner so that we can actually see

1359
00:42:07,599 --> 00:42:09,520
uh it working

1360
00:42:09,520 --> 00:42:11,520
who is vivez at this point hands up

1361
00:42:11,520 --> 00:42:14,079
who's still working who's still okay

1362
00:42:14,079 --> 00:42:15,599
awesome great really good so what we're

1363
00:42:15,599 --> 00:42:17,839
going to do is i am going to will i

1364
00:42:17,839 --> 00:42:21,040
brave why why not let's brave why

1365
00:42:21,040 --> 00:42:22,720
um so what you want to do is you're

1366
00:42:22,720 --> 00:42:24,560
going to edit the file pick an editor of

1367
00:42:24,560 --> 00:42:26,319
your choice you can pick any editor

1368
00:42:26,319 --> 00:42:28,319
that's working in the machine you're on

1369
00:42:28,319 --> 00:42:29,599
um

1370
00:42:29,599 --> 00:42:31,440
and what i'm going to do is this is this

1371
00:42:31,440 --> 00:42:33,280
particular bad docker file is helpfully

1372
00:42:33,280 --> 00:42:35,040
annotated so we know what's wrong

1373
00:42:35,040 --> 00:42:37,760
down the bottom here you will see

1374
00:42:37,760 --> 00:42:39,440
we've got a thing that says not

1375
00:42:39,440 --> 00:42:40,800
specifying a root user means the

1376
00:42:40,800 --> 00:42:42,640
container will run as root so all you

1377
00:42:42,640 --> 00:42:44,480
need to do to fix this in this case is

1378
00:42:44,480 --> 00:42:45,599
just to

1379
00:42:45,599 --> 00:42:47,920
delete that and activate the user line

1380
00:42:47,920 --> 00:42:49,839
so i now have a user when this image is

1381
00:42:49,839 --> 00:42:55,839
rebuilt it will run as user iduid 1001.

1382
00:42:55,839 --> 00:42:57,119
what's the

1383
00:42:57,119 --> 00:43:00,480
uh it is script okay yeah roughly okay

1384
00:43:00,480 --> 00:43:02,720
awesome so then what we can do is once

1385
00:43:02,720 --> 00:43:04,240
we've done that so if you've done that

1386
00:43:04,240 --> 00:43:05,440
just go in

1387
00:43:05,440 --> 00:43:07,200
uncomment that line and rerun the

1388
00:43:07,200 --> 00:43:09,200
scanner

1389
00:43:09,200 --> 00:43:12,319
and what we should see he said hopefully

1390
00:43:12,319 --> 00:43:13,599
and it's kind of hard to prove but where

1391
00:43:13,599 --> 00:43:14,720
was it i think it was there it was the

1392
00:43:14,720 --> 00:43:16,960
second one so it's no longer there right

1393
00:43:16,960 --> 00:43:18,319
so the scanner has rerun and kind of

1394
00:43:18,319 --> 00:43:20,000
predictably it now says hey i found a

1395
00:43:20,000 --> 00:43:21,599
user line therefore you're not running

1396
00:43:21,599 --> 00:43:23,200
this image as root therefore i will no

1397
00:43:23,200 --> 00:43:25,440
longer flag this i actually make one

1398
00:43:25,440 --> 00:43:26,720
point about this because there is an

1399
00:43:26,720 --> 00:43:28,319
area where this is a great example of

1400
00:43:28,319 --> 00:43:30,160
where scanners won't save you

1401
00:43:30,160 --> 00:43:32,240
there are some container images that

1402
00:43:32,240 --> 00:43:34,640
what they do is they put the switch to a

1403
00:43:34,640 --> 00:43:37,599
non-root user in the entry point script

1404
00:43:37,599 --> 00:43:39,119
at the end so in entry point or in

1405
00:43:39,119 --> 00:43:40,560
command at the end

1406
00:43:40,560 --> 00:43:42,319
and so if you have a and i've because we

1407
00:43:42,319 --> 00:43:43,119
had this problem with the docker

1408
00:43:43,119 --> 00:43:44,720
benchmark when we were writing it and

1409
00:43:44,720 --> 00:43:47,040
people said hey your remediation says

1410
00:43:47,040 --> 00:43:48,400
you need to put user but we do it a

1411
00:43:48,400 --> 00:43:49,839
different way and we're getting false

1412
00:43:49,839 --> 00:43:51,839
positives ultimately though that's quite

1413
00:43:51,839 --> 00:43:53,839
hard to detect automatically because you

1414
00:43:53,839 --> 00:43:55,359
would need to parse everyone's entry

1415
00:43:55,359 --> 00:43:56,960
point scripts and like work out where

1416
00:43:56,960 --> 00:43:58,800
they're switching to a non-root user so

1417
00:43:58,800 --> 00:44:00,880
that's a limitation of automation right

1418
00:44:00,880 --> 00:44:03,839
automation can't pick every edge case up

1419
00:44:03,839 --> 00:44:05,200
if you get a scanner result and you're

1420
00:44:05,200 --> 00:44:06,640
like hang on i've run this image and it

1421
00:44:06,640 --> 00:44:08,160
doesn't run as root

1422
00:44:08,160 --> 00:44:09,599
is a false positive but if you think

1423
00:44:09,599 --> 00:44:10,800
about how the scanner works it would be

1424
00:44:10,800 --> 00:44:12,640
super difficult but potentially possible

1425
00:44:12,640 --> 00:44:14,319
to go parsing every single person's

1426
00:44:14,319 --> 00:44:15,920
entry point script looking for where it

1427
00:44:15,920 --> 00:44:16,960
switches to a non-root user because

1428
00:44:16,960 --> 00:44:17,839
there's different ways of doing that as

1429
00:44:17,839 --> 00:44:20,079
well so that's just one to watch for

1430
00:44:20,079 --> 00:44:21,440
when you're running tools like any

1431
00:44:21,440 --> 00:44:24,160
automated tool don't take it as gospel

1432
00:44:24,160 --> 00:44:26,000
don't assume that it's right about

1433
00:44:26,000 --> 00:44:27,359
everything

1434
00:44:27,359 --> 00:44:29,040
but you can try to understand how it

1435
00:44:29,040 --> 00:44:30,319
does it because then you can go oh it

1436
00:44:30,319 --> 00:44:31,599
does it like this therefore i can

1437
00:44:31,599 --> 00:44:32,800
understand why it's not finding this

1438
00:44:32,800 --> 00:44:33,839
particular and that's just one i know

1439
00:44:33,839 --> 00:44:35,359
about because it kicked up on the

1440
00:44:35,359 --> 00:44:37,839
benchmark

1441
00:44:38,400 --> 00:44:42,480
so that's we can fix a docker issue

1442
00:44:43,200 --> 00:44:45,040
so we can also run this on kubernetes

1443
00:44:45,040 --> 00:44:47,599
right um we can do kubernetes yaml

1444
00:44:47,599 --> 00:44:48,960
there's a lot there's more probably two

1445
00:44:48,960 --> 00:44:51,119
kubernetes yaml um but we can actually

1446
00:44:51,119 --> 00:44:55,440
run it on that as well so let's do that

1447
00:44:59,200 --> 00:45:02,560
and what it's done it is phoned some

1448
00:45:02,560 --> 00:45:04,640
many many

1449
00:45:04,640 --> 00:45:07,839
things wrong so this particular um

1450
00:45:07,839 --> 00:45:09,200
this particular manifest that it's

1451
00:45:09,200 --> 00:45:10,800
running over has got a lot it's a really

1452
00:45:10,800 --> 00:45:12,800
bad manifest this manifest should never

1453
00:45:12,800 --> 00:45:14,319
see production

1454
00:45:14,319 --> 00:45:15,760
apart from if you're a pen tester that's

1455
00:45:15,760 --> 00:45:17,520
where this this comes from this is my

1456
00:45:17,520 --> 00:45:19,280
manifest that gives me root on the host

1457
00:45:19,280 --> 00:45:20,480
if you don't bought security policies

1458
00:45:20,480 --> 00:45:22,480
installed um so it's basically all the

1459
00:45:22,480 --> 00:45:24,560
bad things so if we scroll where do we

1460
00:45:24,560 --> 00:45:26,480
go oh there we go

1461
00:45:26,480 --> 00:45:28,240
um we can see things it basically is

1462
00:45:28,240 --> 00:45:29,599
going to complain about

1463
00:45:29,599 --> 00:45:31,920
um so for example it's going to say

1464
00:45:31,920 --> 00:45:33,680
allow privileges escalation should be

1465
00:45:33,680 --> 00:45:34,960
set to false

1466
00:45:34,960 --> 00:45:36,400
this is actually a really easy one to

1467
00:45:36,400 --> 00:45:39,200
say it's very risk-free because i've

1468
00:45:39,200 --> 00:45:40,720
very rarely seen a container image that

1469
00:45:40,720 --> 00:45:42,240
wants to go from an ordinary user when

1470
00:45:42,240 --> 00:45:44,480
it starts to a privileged user once it's

1471
00:45:44,480 --> 00:45:45,920
going most the time goes the other way

1472
00:45:45,920 --> 00:45:48,160
around um so if you set a low privilege

1473
00:45:48,160 --> 00:45:49,359
escalation it actually stops that

1474
00:45:49,359 --> 00:45:50,640
happening you know and you can't

1475
00:45:50,640 --> 00:45:52,560
actually do that so and what it's doing

1476
00:45:52,560 --> 00:45:54,240
is it'll then give you a range of where

1477
00:45:54,240 --> 00:45:56,400
it looked so it looked inside the

1478
00:45:56,400 --> 00:45:58,400
definition of this container it couldn't

1479
00:45:58,400 --> 00:46:00,079
find the statement allow privileged

1480
00:46:00,079 --> 00:46:02,000
escalation equals false so it's decided

1481
00:46:02,000 --> 00:46:04,000
you are vulnerable to this issue

1482
00:46:04,000 --> 00:46:05,520
um

1483
00:46:05,520 --> 00:46:07,520
and it has to give you a range right so

1484
00:46:07,520 --> 00:46:09,599
that the reason those range of lines is

1485
00:46:09,599 --> 00:46:11,280
that's the definition of that container

1486
00:46:11,280 --> 00:46:13,200
and just as somewhere in there i would

1487
00:46:13,200 --> 00:46:14,480
have expected to see a low privileged

1488
00:46:14,480 --> 00:46:16,240
escalation equals false i haven't seen

1489
00:46:16,240 --> 00:46:18,560
that therefore you've got this problem

1490
00:46:18,560 --> 00:46:20,160
and we've got a whole load of problems

1491
00:46:20,160 --> 00:46:21,520
we haven't specified an app armor

1492
00:46:21,520 --> 00:46:22,560
profile

1493
00:46:22,560 --> 00:46:25,200
we aren't yeah we aren't doing cap drop

1494
00:46:25,200 --> 00:46:28,240
all so by default docker will give you

1495
00:46:28,240 --> 00:46:30,480
access to certain parts of routes rights

1496
00:46:30,480 --> 00:46:32,400
even if you don't need them if you're

1497
00:46:32,400 --> 00:46:34,960
running an application that doesn't need

1498
00:46:34,960 --> 00:46:36,000
any part of which rights if you think

1499
00:46:36,000 --> 00:46:37,040
about an application that maybe you had

1500
00:46:37,040 --> 00:46:38,720
it running on a vm it was running as an

1501
00:46:38,720 --> 00:46:40,319
ordinary user it doesn't need

1502
00:46:40,319 --> 00:46:42,160
capabilities capabilities are only

1503
00:46:42,160 --> 00:46:43,440
needed if you're using part of roots

1504
00:46:43,440 --> 00:46:45,839
rights so you can drop cap all and

1505
00:46:45,839 --> 00:46:47,520
that's another good hardening step and

1506
00:46:47,520 --> 00:46:49,359
so the cont is setting that for you

1507
00:46:49,359 --> 00:46:51,359
saying hey you should do drop cap all if

1508
00:46:51,359 --> 00:46:52,240
you can

1509
00:46:52,240 --> 00:46:53,839
and in fact what we are doing instead is

1510
00:46:53,839 --> 00:46:55,760
we're doing cap at all because this is a

1511
00:46:55,760 --> 00:46:57,119
very bad image and should never be

1512
00:46:57,119 --> 00:46:58,319
deployed in production because we're

1513
00:46:58,319 --> 00:47:00,400
saying give me all the capabilities

1514
00:47:00,400 --> 00:47:01,920
so we've got all of these

1515
00:47:01,920 --> 00:47:03,359
um we're doing all the bad things and

1516
00:47:03,359 --> 00:47:04,400
it's going to tell us about all the bad

1517
00:47:04,400 --> 00:47:05,599
things we're doing as you can see

1518
00:47:05,599 --> 00:47:06,640
there's quite a lot of them but that's

1519
00:47:06,640 --> 00:47:08,839
because this is a very bad image

1520
00:47:08,839 --> 00:47:11,200
so what we'll do

1521
00:47:11,200 --> 00:47:13,359
um is actually hold on let me just let

1522
00:47:13,359 --> 00:47:14,480
me run that again and i'm going to find

1523
00:47:14,480 --> 00:47:15,839
the one that i'm going to try and fix

1524
00:47:15,839 --> 00:47:18,960
we're going to fix one of these as well

1525
00:47:18,960 --> 00:47:21,599
let's find one to fix where is the one

1526
00:47:21,599 --> 00:47:23,680
that's really bad there we go that one

1527
00:47:23,680 --> 00:47:25,119
right one of the things that's flagged

1528
00:47:25,119 --> 00:47:26,000
up

1529
00:47:26,000 --> 00:47:29,040
is um we should be setting privileged to

1530
00:47:29,040 --> 00:47:32,000
false right privilege to false is the is

1531
00:47:32,000 --> 00:47:34,000
is the default but i actually recommend

1532
00:47:34,000 --> 00:47:35,520
setting it explicitly in your manifest

1533
00:47:35,520 --> 00:47:37,119
like if you've got a template manifest

1534
00:47:37,119 --> 00:47:38,480
privilege to false because it makes it

1535
00:47:38,480 --> 00:47:40,160
super easy for scanners to find and it

1536
00:47:40,160 --> 00:47:41,520
won't do anything it's not going to hurt

1537
00:47:41,520 --> 00:47:42,640
it's not going to break anything unless

1538
00:47:42,640 --> 00:47:43,520
you actually need to be a privileged

1539
00:47:43,520 --> 00:47:44,960
container in fact what we're doing is

1540
00:47:44,960 --> 00:47:46,559
we're setting privilege to true

1541
00:47:46,559 --> 00:47:48,079
privileged containers as hopefully

1542
00:47:48,079 --> 00:47:50,000
everyone knows are super super dangerous

1543
00:47:50,000 --> 00:47:51,920
you if you ever need to have a

1544
00:47:51,920 --> 00:47:53,440
privileged container make sure that

1545
00:47:53,440 --> 00:47:56,000
whoever wrote that manifest really needs

1546
00:47:56,000 --> 00:47:57,920
privileged like they don't just need

1547
00:47:57,920 --> 00:47:59,440
rights to do

1548
00:47:59,440 --> 00:48:01,040
modifier fosters and path they don't

1549
00:48:01,040 --> 00:48:02,640
just need rights to bind a port they

1550
00:48:02,640 --> 00:48:04,880
don't just need rights to do raw traffic

1551
00:48:04,880 --> 00:48:06,079
all of those can be done more

1552
00:48:06,079 --> 00:48:07,760
fine-grained with less privileges

1553
00:48:07,760 --> 00:48:09,359
privileges basically turn off all the

1554
00:48:09,359 --> 00:48:12,319
security give me and anyone any attacker

1555
00:48:12,319 --> 00:48:13,359
who gets access to a privileged

1556
00:48:13,359 --> 00:48:14,960
container will break out to the

1557
00:48:14,960 --> 00:48:17,280
underlying node guaranteed because it's

1558
00:48:17,280 --> 00:48:19,280
super trivial there is nothing you know

1559
00:48:19,280 --> 00:48:20,960
it's going to happen unless you're doing

1560
00:48:20,960 --> 00:48:22,640
something funny like sandboxing but

1561
00:48:22,640 --> 00:48:23,760
basically privileged containers are

1562
00:48:23,760 --> 00:48:25,440
super dangerous don't use them so let's

1563
00:48:25,440 --> 00:48:28,640
fix that so here we go on line 16

1564
00:48:28,640 --> 00:48:30,559
of this manifest we know that the

1565
00:48:30,559 --> 00:48:34,079
statement privileged true is present so

1566
00:48:34,079 --> 00:48:36,240
what we can do is we can i'm going to

1567
00:48:36,240 --> 00:48:38,160
let's brave vi again as it worked last

1568
00:48:38,160 --> 00:48:40,399
time

1569
00:48:40,880 --> 00:48:42,559
so i'm going to edit that file and i'm

1570
00:48:42,559 --> 00:48:45,040
going to go down to the line in question

1571
00:48:45,040 --> 00:48:47,920
i'm going to find privilege true and

1572
00:48:47,920 --> 00:48:50,880
then i am going to

1573
00:48:52,000 --> 00:48:54,640
change that village false

1574
00:48:54,640 --> 00:48:56,720
great fix the issue

1575
00:48:56,720 --> 00:48:58,480
exit

1576
00:48:58,480 --> 00:49:00,240
and then rerun the scanner so all you

1577
00:49:00,240 --> 00:49:01,119
have to do is literally i mean if you

1578
00:49:01,119 --> 00:49:02,480
want to do that one pick one other ones

1579
00:49:02,480 --> 00:49:04,640
there's lots of bad things in there

1580
00:49:04,640 --> 00:49:06,960
host network is bad host pit is bad host

1581
00:49:06,960 --> 00:49:08,640
ipc is bad you could take any of those

1582
00:49:08,640 --> 00:49:11,119
in terms of false you could do cap drop

1583
00:49:11,119 --> 00:49:12,800
all instead of so just change that to be

1584
00:49:12,800 --> 00:49:14,720
dropped rather than add that would work

1585
00:49:14,720 --> 00:49:16,800
as well um but any of those things is

1586
00:49:16,800 --> 00:49:18,720
bad and you can change them

1587
00:49:18,720 --> 00:49:20,960
you can spend lots of time on that later

1588
00:49:20,960 --> 00:49:22,640
yeah yeah this manifest could takes a

1589
00:49:22,640 --> 00:49:24,160
lot to fix i said this is like literally

1590
00:49:24,160 --> 00:49:25,440
the worst manifest i deliberately

1591
00:49:25,440 --> 00:49:27,280
designed it as like the most horrible

1592
00:49:27,280 --> 00:49:29,520
manifest if anyone if you run that on on

1593
00:49:29,520 --> 00:49:31,520
a cluster that you care about and it

1594
00:49:31,520 --> 00:49:34,240
doesn't get blocked i would be concerned

1595
00:49:34,240 --> 00:49:35,680
because that should get blocked that

1596
00:49:35,680 --> 00:49:37,920
should never be allowed onto any cluster

1597
00:49:37,920 --> 00:49:39,520
because dangerous

1598
00:49:39,520 --> 00:49:44,079
but what we can do now is we can rescan

1599
00:49:44,079 --> 00:49:45,839
and

1600
00:49:45,839 --> 00:49:47,520
we should no longer see he said

1601
00:49:47,520 --> 00:49:50,000
scrolling up hopefully

1602
00:49:50,000 --> 00:49:51,440
no mentioned privilege no mentioned

1603
00:49:51,440 --> 00:49:53,119
privileged

1604
00:49:53,119 --> 00:49:55,839
no mentor privileged

1605
00:49:55,839 --> 00:49:56,839
yep

1606
00:49:56,839 --> 00:49:59,119
okay so there is nothing there that

1607
00:49:59,119 --> 00:50:00,400
mentions privilege so we fixed that

1608
00:50:00,400 --> 00:50:03,040
issue so if you are writing manifest or

1609
00:50:03,040 --> 00:50:04,559
you're using third party products you

1610
00:50:04,559 --> 00:50:06,480
can see how you could use this scanner

1611
00:50:06,480 --> 00:50:08,559
to fix your issues one at a time look at

1612
00:50:08,559 --> 00:50:10,079
the issue some of them are easy fixes

1613
00:50:10,079 --> 00:50:11,520
like the level of escalation will never

1614
00:50:11,520 --> 00:50:13,920
break anything in my experience um doing

1615
00:50:13,920 --> 00:50:15,680
things like dropping privilege you want

1616
00:50:15,680 --> 00:50:17,040
to understand why they wanted privilege

1617
00:50:17,040 --> 00:50:19,920
first uh and doing things like dropping

1618
00:50:19,920 --> 00:50:22,160
capabilities does need testing because

1619
00:50:22,160 --> 00:50:23,680
sometimes you might break something you

1620
00:50:23,680 --> 00:50:24,640
do have to watch with some of these

1621
00:50:24,640 --> 00:50:26,319
don't just blindly apply everything this

1622
00:50:26,319 --> 00:50:28,319
says this is like the whole

1623
00:50:28,319 --> 00:50:29,599
problem hopefully the whole underlying

1624
00:50:29,599 --> 00:50:30,880
message of this part of this

1625
00:50:30,880 --> 00:50:33,040
presentation is scanners are useful do

1626
00:50:33,040 --> 00:50:34,880
not blindly accept what they tell you

1627
00:50:34,880 --> 00:50:36,480
because they will they don't know your

1628
00:50:36,480 --> 00:50:37,920
environment they don't know how your

1629
00:50:37,920 --> 00:50:39,040
clusters are set up they don't know how

1630
00:50:39,040 --> 00:50:40,400
your organization is set up they can

1631
00:50:40,400 --> 00:50:42,000
give you advice but you still need to

1632
00:50:42,000 --> 00:50:44,240
interpret it

1633
00:50:44,240 --> 00:50:48,240
so but that is kubernetes

1634
00:50:49,839 --> 00:50:50,960
cool

1635
00:50:50,960 --> 00:50:53,119
and last one

1636
00:50:53,119 --> 00:50:55,359
so we've fixed our kubernetes issue

1637
00:50:55,359 --> 00:50:57,359
is terraform so if anyone's using

1638
00:50:57,359 --> 00:50:59,680
terraform as iec you can also use trivia

1639
00:50:59,680 --> 00:51:01,760
to scan terraform and it will do the

1640
00:51:01,760 --> 00:51:03,839
same job as it did for

1641
00:51:03,839 --> 00:51:07,640
both kubernetes and docker

1642
00:51:08,800 --> 00:51:10,480
so we can just again we've got a bad

1643
00:51:10,480 --> 00:51:13,839
terraform file in this directory

1644
00:51:13,839 --> 00:51:16,000
and it will happily go away and tell us

1645
00:51:16,000 --> 00:51:17,680
lots of stuff is bad here because again

1646
00:51:17,680 --> 00:51:19,200
this is designed so for example we've

1647
00:51:19,200 --> 00:51:21,359
got something like a hard-coded password

1648
00:51:21,359 --> 00:51:22,559
in our terraform obviously you should

1649
00:51:22,559 --> 00:51:24,240
never hard code passwords inside your

1650
00:51:24,240 --> 00:51:26,400
terraform scripts we have got one this

1651
00:51:26,400 --> 00:51:28,240
has identified it and said hey you have

1652
00:51:28,240 --> 00:51:30,160
got a hard coded password you don't want

1653
00:51:30,160 --> 00:51:32,640
to do that

1654
00:51:34,079 --> 00:51:35,200
and you can see there's lots of bad

1655
00:51:35,200 --> 00:51:36,960
things inside this

1656
00:51:36,960 --> 00:51:39,760
so this again um

1657
00:51:39,760 --> 00:51:41,200
we've got we've got a database and this

1658
00:51:41,200 --> 00:51:42,160
is where i'm saying every two will be

1659
00:51:42,160 --> 00:51:43,839
different every tool you use for ic

1660
00:51:43,839 --> 00:51:45,119
scanning will have its own database for

1661
00:51:45,119 --> 00:51:46,880
every format so some of them will have

1662
00:51:46,880 --> 00:51:48,559
more or fewer

1663
00:51:48,559 --> 00:51:50,079
vulnerabilities i kind of personally

1664
00:51:50,079 --> 00:51:51,280
have this hope that someday we'll have

1665
00:51:51,280 --> 00:51:53,359
like a unified database of these things

1666
00:51:53,359 --> 00:51:54,880
but for now it's pretty much tool

1667
00:51:54,880 --> 00:51:56,720
dependent so do watch for that you will

1668
00:51:56,720 --> 00:51:57,680
get different results from different

1669
00:51:57,680 --> 00:51:58,960
tools

1670
00:51:58,960 --> 00:52:00,079
and there are lots of different ic

1671
00:52:00,079 --> 00:52:01,280
scanning tools the same with lots of

1672
00:52:01,280 --> 00:52:03,119
vulnerability scanning tools but again

1673
00:52:03,119 --> 00:52:05,119
lots of things in there

1674
00:52:05,119 --> 00:52:07,280
it's worth mentioning here that tv uses

1675
00:52:07,280 --> 00:52:10,240
tf sec under the hood which is another

1676
00:52:10,240 --> 00:52:13,280
tool from from arccorp within the accra

1677
00:52:13,280 --> 00:52:16,640
github repositories so um tfsec is

1678
00:52:16,640 --> 00:52:18,800
specific for terraform scans but 3b is

1679
00:52:18,800 --> 00:52:21,200
integrating it in its

1680
00:52:21,200 --> 00:52:23,920
in its ecosystem so if you are focused

1681
00:52:23,920 --> 00:52:26,079
on terraform you can also use tfsec

1682
00:52:26,079 --> 00:52:27,920
directly and there you can write your

1683
00:52:27,920 --> 00:52:30,000
own rules with json

1684
00:52:30,000 --> 00:52:31,680
and yaml

1685
00:52:31,680 --> 00:52:33,359
yeah so

1686
00:52:33,359 --> 00:52:34,640
and we won't fix a terrible one because

1687
00:52:34,640 --> 00:52:36,319
i don't know how to fix terraform

1688
00:52:36,319 --> 00:52:37,520
uh

1689
00:52:37,520 --> 00:52:39,280
one more command uh do you wanna talk

1690
00:52:39,280 --> 00:52:40,720
about this one i'll run it oh yeah so

1691
00:52:40,720 --> 00:52:42,640
trivia has since

1692
00:52:42,640 --> 00:52:45,359
a few weeks also trivia s bomb so you

1693
00:52:45,359 --> 00:52:47,440
can we heard a lot about s-bombs

1694
00:52:47,440 --> 00:52:49,680
basically repository like an inventory

1695
00:52:49,680 --> 00:52:51,280
list of your for example your container

1696
00:52:51,280 --> 00:52:52,319
image

1697
00:52:52,319 --> 00:52:54,880
so you can run trivia s-bomb to generate

1698
00:52:54,880 --> 00:52:57,680
an s-bom of your container image now we

1699
00:52:57,680 --> 00:53:01,200
also have a docker desktop extension and

1700
00:53:01,200 --> 00:53:02,960
you can

1701
00:53:02,960 --> 00:53:05,599
you can generate asbums with the docker

1702
00:53:05,599 --> 00:53:07,280
desktop extension as well as scan

1703
00:53:07,280 --> 00:53:08,960
container images for vulnerabilities

1704
00:53:08,960 --> 00:53:10,960
also directly through docker desktop

1705
00:53:10,960 --> 00:53:12,400
so as you can see this is not supposed

1706
00:53:12,400 --> 00:53:14,720
to be human readable you can make it

1707
00:53:14,720 --> 00:53:15,920
nicer

1708
00:53:15,920 --> 00:53:18,000
yeah i mean actually i can probably make

1709
00:53:18,000 --> 00:53:18,960
it i'm thinking about it i can probably

1710
00:53:18,960 --> 00:53:20,319
make that human readable by just piping

1711
00:53:20,319 --> 00:53:21,760
it through jayla that's at the beginning

1712
00:53:21,760 --> 00:53:24,319
the minus q yeah

1713
00:53:24,319 --> 00:53:25,839
thanks i was definitely going to forget

1714
00:53:25,839 --> 00:53:26,800
that

1715
00:53:26,800 --> 00:53:29,200
so we can also like have it you can have

1716
00:53:29,200 --> 00:53:30,559
a look at it and that's what an s-bomb

1717
00:53:30,559 --> 00:53:33,119
looks like so this is a cyclone dxs bomb

1718
00:53:33,119 --> 00:53:35,520
um we also supported since yesterday

1719
00:53:35,520 --> 00:53:38,240
since it's the nearest update from tv um

1720
00:53:38,240 --> 00:53:40,400
spdx as a format

1721
00:53:40,400 --> 00:53:41,680
you can tell how easy the open source

1722
00:53:41,680 --> 00:53:44,000
team make it for us doing presentations

1723
00:53:44,000 --> 00:53:45,119
thanks guys

1724
00:53:45,119 --> 00:53:47,280
yesterday there's like five new things

1725
00:53:47,280 --> 00:53:49,280
so hopefully we will catch them all um

1726
00:53:49,280 --> 00:53:50,880
but yeah so

1727
00:53:50,880 --> 00:53:52,400
if you think about how

1728
00:53:52,400 --> 00:53:53,760
container scanning and how s bomb

1729
00:53:53,760 --> 00:53:55,520
creation works this makes sense right

1730
00:53:55,520 --> 00:53:57,200
because one of the things uh scatter

1731
00:53:57,200 --> 00:53:58,240
vulnerability scanning tool has to be

1732
00:53:58,240 --> 00:53:59,200
able to do is it has to know every

1733
00:53:59,200 --> 00:54:00,480
package that's installed that's

1734
00:54:00,480 --> 00:54:02,319
literally part of what it does so

1735
00:54:02,319 --> 00:54:03,920
there's no nothing to stop you putting

1736
00:54:03,920 --> 00:54:06,480
that into an s-bomb i'm actually going

1737
00:54:06,480 --> 00:54:08,480
to mention one thing just in passing

1738
00:54:08,480 --> 00:54:11,599
where s-bombs or some s-bomb tooling

1739
00:54:11,599 --> 00:54:13,839
might not find everything if you have a

1740
00:54:13,839 --> 00:54:15,440
container image

1741
00:54:15,440 --> 00:54:18,000
and the main program is not installed as

1742
00:54:18,000 --> 00:54:20,559
a package right so say i've create i've

1743
00:54:20,559 --> 00:54:22,319
compiled the binary and that's the main

1744
00:54:22,319 --> 00:54:24,160
thing that my container image runs and

1745
00:54:24,160 --> 00:54:25,760
this bomb tool might not find that

1746
00:54:25,760 --> 00:54:27,200
version because how would it because

1747
00:54:27,200 --> 00:54:28,240
what it's doing is using a package

1748
00:54:28,240 --> 00:54:30,000
database so something to watch out for

1749
00:54:30,000 --> 00:54:31,599
just not just with trivia but any s bomb

1750
00:54:31,599 --> 00:54:33,200
tooling is it's really tricky for s

1751
00:54:33,200 --> 00:54:34,880
bombs to pick up anything that was

1752
00:54:34,880 --> 00:54:36,880
manually compiled into the image so

1753
00:54:36,880 --> 00:54:38,480
another one of those things of tools are

1754
00:54:38,480 --> 00:54:40,240
cool but be aware of what they might not

1755
00:54:40,240 --> 00:54:41,520
do for you and that's one of the things

1756
00:54:41,520 --> 00:54:43,119
that s bomb tools might not do for you

1757
00:54:43,119 --> 00:54:44,240
and i know that there's some people in

1758
00:54:44,240 --> 00:54:45,599
the ecosystem who are looking at how to

1759
00:54:45,599 --> 00:54:47,119
fix that problem which generally

1760
00:54:47,119 --> 00:54:48,559
revolves around building the s-bomb

1761
00:54:48,559 --> 00:54:50,640
during ci cd but for the time being most

1762
00:54:50,640 --> 00:54:52,720
sbom tools do have spline spots

1763
00:54:52,720 --> 00:54:56,078
potentially so just want to know

1764
00:54:56,880 --> 00:54:59,280
cool and that's s-bomb

1765
00:54:59,280 --> 00:55:01,680
so um the next thing to talk about

1766
00:55:01,680 --> 00:55:03,119
actually before we go on any questions

1767
00:55:03,119 --> 00:55:05,680
about any of the kind of in-depth stuff

1768
00:55:05,680 --> 00:55:09,200
bond scanning copy sounding yes

1769
00:55:09,200 --> 00:55:10,240
over there

1770
00:55:10,240 --> 00:55:11,520
do we have our mic or something do we

1771
00:55:11,520 --> 00:55:14,079
have a mic never mind in the back

1772
00:55:14,079 --> 00:55:16,000
the man over there the question

1773
00:55:16,000 --> 00:55:18,319
questions we like questions

1774
00:55:18,319 --> 00:55:20,799
hopefully let's jump over this yeah so i

1775
00:55:20,799 --> 00:55:23,040
have enough time for for style yeah yeah

1776
00:55:23,040 --> 00:55:24,559
i'll jump we'll go quickly yeah we

1777
00:55:24,559 --> 00:55:26,000
should google it

1778
00:55:26,000 --> 00:55:27,119
thank you

1779
00:55:27,119 --> 00:55:28,000
when you're scanning for the

1780
00:55:28,000 --> 00:55:30,240
vulnerabilities against known cves

1781
00:55:30,240 --> 00:55:32,640
that's all well and good but uh suppose

1782
00:55:32,640 --> 00:55:35,599
the open source package has been

1783
00:55:35,599 --> 00:55:38,160
uh malware has been updated by some

1784
00:55:38,160 --> 00:55:40,559
malicious actor how do we check for

1785
00:55:40,559 --> 00:55:43,440
malware and what do you advise

1786
00:55:43,440 --> 00:55:45,440
so you can do malware you can do more

1787
00:55:45,440 --> 00:55:47,280
scanning of images

1788
00:55:47,280 --> 00:55:48,960
i mean malware scanning

1789
00:55:48,960 --> 00:55:51,280
fundamentally works the same way it's

1790
00:55:51,280 --> 00:55:52,880
going to basically look for known bad

1791
00:55:52,880 --> 00:55:55,119
things so it has a pile of signatures

1792
00:55:55,119 --> 00:55:57,280
and you can integrate that

1793
00:55:57,280 --> 00:55:58,640
the question is finding a tool that will

1794
00:55:58,640 --> 00:56:00,880
understand container formats so not all

1795
00:56:00,880 --> 00:56:03,040
of the traditional va scanners also the

1796
00:56:03,040 --> 00:56:04,319
malware scanners know about how

1797
00:56:04,319 --> 00:56:06,079
containers work and this is the tricky

1798
00:56:06,079 --> 00:56:07,520
part i mean there's technically nothing

1799
00:56:07,520 --> 00:56:08,880
difficult about it

1800
00:56:08,880 --> 00:56:10,640
but you would need to find a malware

1801
00:56:10,640 --> 00:56:11,920
scanner that understands container

1802
00:56:11,920 --> 00:56:13,680
images i'm not going to get commercial

1803
00:56:13,680 --> 00:56:14,880
products because that's something that

1804
00:56:14,880 --> 00:56:16,000
we do the question but we're talking

1805
00:56:16,000 --> 00:56:18,240
about open source today um i'm not

1806
00:56:18,240 --> 00:56:20,400
actually aware and people from the

1807
00:56:20,400 --> 00:56:22,720
audience feel free to correct me of a

1808
00:56:22,720 --> 00:56:24,640
container scanning so it does malware

1809
00:56:24,640 --> 00:56:26,559
right now i'm sure there is one but if

1810
00:56:26,559 --> 00:56:27,920
there is i don't know basically you

1811
00:56:27,920 --> 00:56:29,040
would need a malware scanner that

1812
00:56:29,040 --> 00:56:31,040
understands container format

1813
00:56:31,040 --> 00:56:32,319
or

1814
00:56:32,319 --> 00:56:33,839
you can get repositories download them

1815
00:56:33,839 --> 00:56:36,319
and use any file based malware scanner

1816
00:56:36,319 --> 00:56:37,760
the other thing i would say about that

1817
00:56:37,760 --> 00:56:39,839
is that if this is a part about trusted

1818
00:56:39,839 --> 00:56:41,760
images so if you've got a bad actor who

1819
00:56:41,760 --> 00:56:44,079
has put malware into an image this is

1820
00:56:44,079 --> 00:56:45,839
where container image signing and

1821
00:56:45,839 --> 00:56:47,839
provenance becomes so important because

1822
00:56:47,839 --> 00:56:49,119
you want to have confidence that the

1823
00:56:49,119 --> 00:56:50,720
image you're using is coming from a

1824
00:56:50,720 --> 00:56:52,640
trusted source in general one of the

1825
00:56:52,640 --> 00:56:54,160
other if like people are just thinking

1826
00:56:54,160 --> 00:56:55,200
one or two things i want to take from

1827
00:56:55,200 --> 00:56:56,880
this talk don't download random stuff

1828
00:56:56,880 --> 00:56:58,559
from docker hub and use it in your

1829
00:56:58,559 --> 00:56:59,680
production environments please don't do

1830
00:56:59,680 --> 00:57:01,599
that i was a pen tester and pretty much

1831
00:57:01,599 --> 00:57:03,839
every pen test i did of a containerized

1832
00:57:03,839 --> 00:57:05,680
environment i found at least one image

1833
00:57:05,680 --> 00:57:06,720
that someone had downloaded from a

1834
00:57:06,720 --> 00:57:08,720
random docker hub repo and run it in

1835
00:57:08,720 --> 00:57:11,200
their cluster don't do that because just

1836
00:57:11,200 --> 00:57:12,480
as the question says that might have

1837
00:57:12,480 --> 00:57:13,440
malware in it so we might have

1838
00:57:13,440 --> 00:57:15,200
compromised that so yeah basically it's

1839
00:57:15,200 --> 00:57:16,319
finding a scanning tool that will

1840
00:57:16,319 --> 00:57:18,480
support it would be the answer

1841
00:57:18,480 --> 00:57:21,200
yeah um the open the open source package

1842
00:57:21,200 --> 00:57:24,160
analysis tool uh should be coming up but

1843
00:57:24,160 --> 00:57:26,880
i think if somebody signs something

1844
00:57:26,880 --> 00:57:29,359
and certifies it that has malware in us

1845
00:57:29,359 --> 00:57:31,440
uh they could do that unintentionally so

1846
00:57:31,440 --> 00:57:33,440
people need to be aware it is a tricky

1847
00:57:33,440 --> 00:57:36,799
one it's a tricky one for sure though

1848
00:57:37,200 --> 00:57:38,880
okay i'm gonna blast through this one so

1849
00:57:38,880 --> 00:57:40,960
we big enough time for starboard um go

1850
00:57:40,960 --> 00:57:42,640
through this reasonably quickly security

1851
00:57:42,640 --> 00:57:45,920
scanning oh no more question

1852
00:57:51,839 --> 00:57:52,880
hello

1853
00:57:52,880 --> 00:57:54,559
do you have a good scanner for batch

1854
00:57:54,559 --> 00:57:56,000
scripts

1855
00:57:56,000 --> 00:57:56,880
oh

1856
00:57:56,880 --> 00:57:57,760
in

1857
00:57:57,760 --> 00:57:59,599
i don't there are linting tools i'm not

1858
00:57:59,599 --> 00:58:01,119
sure i've seen many like security

1859
00:58:01,119 --> 00:58:03,520
scanners i know they're linters for bash

1860
00:58:03,520 --> 00:58:04,799
and linters if you think about a linter

1861
00:58:04,799 --> 00:58:06,319
it's a very similar concept to a config

1862
00:58:06,319 --> 00:58:07,520
scanner i mean what's it doing right

1863
00:58:07,520 --> 00:58:08,960
it's looking for bad practice based on

1864
00:58:08,960 --> 00:58:11,200
signatures fundamentally the same thing

1865
00:58:11,200 --> 00:58:13,359
it's just question of focus where these

1866
00:58:13,359 --> 00:58:15,200
are security focused primarily and

1867
00:58:15,200 --> 00:58:17,280
linters tend to be good practice focused

1868
00:58:17,280 --> 00:58:18,960
but the concept's identical in fact some

1869
00:58:18,960 --> 00:58:20,319
linters do security some security

1870
00:58:20,319 --> 00:58:22,880
scanners do linting um

1871
00:58:22,880 --> 00:58:24,240
top my head no

1872
00:58:24,240 --> 00:58:27,359
but yeah similar idea

1873
00:58:27,359 --> 00:58:29,520
same like for terraform i mean

1874
00:58:29,520 --> 00:58:32,079
you can style weird stuff and nowadays

1875
00:58:32,079 --> 00:58:33,680
most of the open source tools throw you

1876
00:58:33,680 --> 00:58:35,440
some bash script and then simply execute

1877
00:58:35,440 --> 00:58:36,400
it

1878
00:58:36,400 --> 00:58:39,760
yeah do a w get in bash i mean it

1879
00:58:39,760 --> 00:58:41,119
doesn't feel right

1880
00:58:41,119 --> 00:58:42,559
yeah that is a problem i mean if

1881
00:58:42,559 --> 00:58:43,839
ultimately a lot of people will end up

1882
00:58:43,839 --> 00:58:45,119
when it comes to flexibility we'll end

1883
00:58:45,119 --> 00:58:46,160
up using

1884
00:58:46,160 --> 00:58:47,359
bash right because it's super flexible

1885
00:58:47,359 --> 00:58:49,280
and everyone likes a bit bash to

1886
00:58:49,280 --> 00:58:50,960
tie everything together but you do need

1887
00:58:50,960 --> 00:58:51,920
to watch because everything you're

1888
00:58:51,920 --> 00:58:53,599
running is part of your pipeline or part

1889
00:58:53,599 --> 00:58:55,119
of your development process and if you

1890
00:58:55,119 --> 00:58:56,960
just do terraform and miss the bash

1891
00:58:56,960 --> 00:58:59,520
you've potentially got a hole yeah

1892
00:58:59,520 --> 00:59:01,040
that's a good point

1893
00:59:01,040 --> 00:59:02,480
so

1894
00:59:02,480 --> 00:59:04,640
security icd um we're going to go across

1895
00:59:04,640 --> 00:59:05,920
this reasonably quickly because we can't

1896
00:59:05,920 --> 00:59:07,599
really demo this i think people try some

1897
00:59:07,599 --> 00:59:09,520
github actions in the middle of a talk

1898
00:59:09,520 --> 00:59:12,319
would go very badly for us um

1899
00:59:12,319 --> 00:59:13,839
a couple of points to make

1900
00:59:13,839 --> 00:59:15,839
you can use trivia as part of your crcd

1901
00:59:15,839 --> 00:59:16,960
pipeline

1902
00:59:16,960 --> 00:59:18,079
and we're going to give you a quick

1903
00:59:18,079 --> 00:59:19,839
example of a couple of things to note if

1904
00:59:19,839 --> 00:59:21,040
you're doing it in github actions

1905
00:59:21,040 --> 00:59:22,720
personally i love github actions once

1906
00:59:22,720 --> 00:59:24,319
i've got them working if anyone looks

1907
00:59:24,319 --> 00:59:25,760
one of my repos you'll find like 10

1908
00:59:25,760 --> 00:59:28,240
failed runs before the first pass run um

1909
00:59:28,240 --> 00:59:29,680
because it's the syntax can be a bit

1910
00:59:29,680 --> 00:59:30,720
tricky so i just want to give you a

1911
00:59:30,720 --> 00:59:32,480
couple of pointers on stuff that i went

1912
00:59:32,480 --> 00:59:33,599
wrong with

1913
00:59:33,599 --> 00:59:35,599
this is an example um you can pull that

1914
00:59:35,599 --> 00:59:37,680
one out the slides later on what this

1915
00:59:37,680 --> 00:59:40,240
does it's a github's basic docker plus

1916
00:59:40,240 --> 00:59:41,920
cosign action so this will build a

1917
00:59:41,920 --> 00:59:44,400
container image it will cosign it and

1918
00:59:44,400 --> 00:59:46,160
i'll add one to the number of talks that

1919
00:59:46,160 --> 00:59:48,799
mention cosine um it will co-sign out

1920
00:59:48,799 --> 00:59:50,240
and it'll also vulnerability scan it all

1921
00:59:50,240 --> 00:59:52,400
in a winner so you can every time you

1922
00:59:52,400 --> 00:59:53,599
build you can say i'm going to create a

1923
00:59:53,599 --> 00:59:54,720
container image i'm going to assign my

1924
00:59:54,720 --> 00:59:55,599
container image and i'm going to

1925
00:59:55,599 --> 00:59:57,520
vulnerability scan it in a git of action

1926
00:59:57,520 --> 00:59:59,040
which is cool because it's free and

1927
00:59:59,040 --> 01:00:00,720
really easy

1928
01:00:00,720 --> 01:00:02,000
a couple of things you need to know when

1929
01:00:02,000 --> 01:00:03,520
you're doing vulnerability scanning in

1930
01:00:03,520 --> 01:00:04,880
github actions

1931
01:00:04,880 --> 01:00:06,880
first one is in github actions you have

1932
01:00:06,880 --> 01:00:08,960
a permissions block and that's what can

1933
01:00:08,960 --> 01:00:11,520
this github action do to my account you

1934
01:00:11,520 --> 01:00:13,280
need to give it

1935
01:00:13,280 --> 01:00:15,520
security events right

1936
01:00:15,520 --> 01:00:17,359
so in order to upload things to github

1937
01:00:17,359 --> 01:00:19,280
security you need to given the action

1938
01:00:19,280 --> 01:00:21,359
the right to do that the right you need

1939
01:00:21,359 --> 01:00:24,640
is security events right

1940
01:00:24,640 --> 01:00:26,480
this is all stuff i didn't know when i

1941
01:00:26,480 --> 01:00:30,480
started doing this second one is how do

1942
01:00:30,480 --> 01:00:33,440
you know to tell trivi what image to

1943
01:00:33,440 --> 01:00:35,119
scan so i've just built my image i've

1944
01:00:35,119 --> 01:00:36,960
co-signed my image and those were in

1945
01:00:36,960 --> 01:00:39,040
previous steps in my action i come to do

1946
01:00:39,040 --> 01:00:40,400
trivia scan how do i know what the image

1947
01:00:40,400 --> 01:00:41,359
is called

1948
01:00:41,359 --> 01:00:42,960
and the answer is basically this is the

1949
01:00:42,960 --> 01:00:44,400
interesting part

1950
01:00:44,400 --> 01:00:45,839
first you tell it there's a variable for

1951
01:00:45,839 --> 01:00:47,040
registry so it knows what register to

1952
01:00:47,040 --> 01:00:48,079
get it from

1953
01:00:48,079 --> 01:00:49,760
then you tell it there's an environment

1954
01:00:49,760 --> 01:00:51,200
variable called image name so you know

1955
01:00:51,200 --> 01:00:52,799
the image name is and then there's the

1956
01:00:52,799 --> 01:00:54,240
one that took me quite a lot of googling

1957
01:00:54,240 --> 01:00:56,880
to find which is that's the tag

1958
01:00:56,880 --> 01:00:59,319
so it says

1959
01:00:59,319 --> 01:01:01,280
steps.meta.outputs.version as a variable

1960
01:01:01,280 --> 01:01:03,599
that's how you find out what tag to scan

1961
01:01:03,599 --> 01:01:04,720
and if you've got those three things

1962
01:01:04,720 --> 01:01:06,400
together it will essentially after it's

1963
01:01:06,400 --> 01:01:08,480
signed it it will go okay the thing you

1964
01:01:08,480 --> 01:01:09,520
have just signed is a thing i'm now

1965
01:01:09,520 --> 01:01:11,119
going to do a trivia scan on

1966
01:01:11,119 --> 01:01:12,400
that's the one that tripped me up for a

1967
01:01:12,400 --> 01:01:14,960
while and what that does and you can see

1968
01:01:14,960 --> 01:01:16,960
the bottom is it's going to output

1969
01:01:16,960 --> 01:01:19,680
trivia results.serif so this is sarah

1970
01:01:19,680 --> 01:01:21,440
format um which we're going to use to

1971
01:01:21,440 --> 01:01:22,880
upload which we can use to upload

1972
01:01:22,880 --> 01:01:25,359
together and

1973
01:01:25,359 --> 01:01:26,880
so you just tell it what format to run

1974
01:01:26,880 --> 01:01:28,559
and this is the this is our this is our

1975
01:01:28,559 --> 01:01:30,640
um action so there's a there's an aqua

1976
01:01:30,640 --> 01:01:32,559
security trivia action which you can use

1977
01:01:32,559 --> 01:01:34,160
for this

1978
01:01:34,160 --> 01:01:36,640
and then last one uploading it to github

1979
01:01:36,640 --> 01:01:38,960
security uh and this is you then uses

1980
01:01:38,960 --> 01:01:40,720
github's action so github i've got an

1981
01:01:40,720 --> 01:01:42,960
action for uploading sarif and you just

1982
01:01:42,960 --> 01:01:45,040
give it the file name it's pretty simple

1983
01:01:45,040 --> 01:01:47,680
so those three things will allow you to

1984
01:01:47,680 --> 01:01:49,440
get your github repositories and have it

1985
01:01:49,440 --> 01:01:51,520
scan every single time

1986
01:01:51,520 --> 01:01:53,839
and very quickly

1987
01:01:53,839 --> 01:01:54,960
because i don't want to run out of time

1988
01:01:54,960 --> 01:01:56,160
i'm very quickly going to show you what

1989
01:01:56,160 --> 01:01:57,359
that looks like when it gets into the

1990
01:01:57,359 --> 01:01:59,920
repository

1991
01:02:00,799 --> 01:02:02,400
uh it looks like this

1992
01:02:02,400 --> 01:02:04,000
and because i don't maintain this one

1993
01:02:04,000 --> 01:02:04,960
very well

1994
01:02:04,960 --> 01:02:06,200
i have

1995
01:02:06,200 --> 01:02:09,440
1281 code scanning alerts uh hopefully

1996
01:02:09,440 --> 01:02:11,440
you will have fewer but this is a useful

1997
01:02:11,440 --> 01:02:13,520
way of keeping track and it's also

1998
01:02:13,520 --> 01:02:14,799
useful if people are doing this you can

1999
01:02:14,799 --> 01:02:16,799
look at the repository and like get an

2000
01:02:16,799 --> 01:02:18,319
idea feel for security like you know how

2001
01:02:18,319 --> 01:02:19,440
are they getting on are they are they

2002
01:02:19,440 --> 01:02:20,640
maintaining this are they like you know

2003
01:02:20,640 --> 01:02:22,480
updating stuff or like this one is

2004
01:02:22,480 --> 01:02:23,440
something i haven't touched in six

2005
01:02:23,440 --> 01:02:26,640
months so you've got 1281 uh lots and

2006
01:02:26,640 --> 01:02:29,960
lots of abilities

2007
01:02:34,400 --> 01:02:37,039
yeah cool so

2008
01:02:37,039 --> 01:02:38,880
yeah production now we've done

2009
01:02:38,880 --> 01:02:40,400
everything right we've built it we've

2010
01:02:40,400 --> 01:02:42,319
put it through cicd now we want to do

2011
01:02:42,319 --> 01:02:44,400
security once it's live

2012
01:02:44,400 --> 01:02:46,799
yeah so trivia well that's for pretty

2013
01:02:46,799 --> 01:02:48,720
much everybody who's interacting with

2014
01:02:48,720 --> 01:02:50,640
any development resources

2015
01:02:50,640 --> 01:02:52,880
it's not particularly useful if you are

2016
01:02:52,880 --> 01:02:55,280
an sre if you're a cluster admin and you

2017
01:02:55,280 --> 01:02:58,000
want to check your in-cluster resources

2018
01:02:58,000 --> 01:02:59,599
post-deployment

2019
01:02:59,599 --> 01:03:00,640
so

2020
01:03:00,640 --> 01:03:02,720
once your workloads are deployed inside

2021
01:03:02,720 --> 01:03:04,559
of your kubernetes cluster you still

2022
01:03:04,559 --> 01:03:05,920
want to continuously check those

2023
01:03:05,920 --> 01:03:07,200
workloads what's happening inside of

2024
01:03:07,200 --> 01:03:09,039
your cluster how are your container

2025
01:03:09,039 --> 01:03:10,559
images that are already running

2026
01:03:10,559 --> 01:03:12,480
performing over time right are there any

2027
01:03:12,480 --> 01:03:14,000
container images that you might forgot

2028
01:03:14,000 --> 01:03:17,200
about uh things like that um so you want

2029
01:03:17,200 --> 01:03:19,200
to have regular scans for compliance and

2030
01:03:19,200 --> 01:03:22,400
insurance and uh runtime security to

2031
01:03:22,400 --> 01:03:25,599
attack that to detect any attacks and um

2032
01:03:25,599 --> 01:03:26,880
yeah anything else that's going on

2033
01:03:26,880 --> 01:03:28,799
e-class it's just uh

2034
01:03:28,799 --> 01:03:29,520
yeah

2035
01:03:29,520 --> 01:03:32,000
okay so who has a kubernetes cluster

2036
01:03:32,000 --> 01:03:34,160
locally running any form of kubernetes

2037
01:03:34,160 --> 01:03:36,480
cluster right now

2038
01:03:36,480 --> 01:03:38,960
okay a few people maybe if you don't

2039
01:03:38,960 --> 01:03:40,799
have one check if your part like if your

2040
01:03:40,799 --> 01:03:42,240
seat neighbor has one and then you could

2041
01:03:42,240 --> 01:03:44,079
pair up

2042
01:03:44,079 --> 01:03:46,000
that would be an option because for the

2043
01:03:46,000 --> 01:03:48,160
next step we will need

2044
01:03:48,160 --> 01:03:49,680
a kubernetes cluster and we're going to

2045
01:03:49,680 --> 01:03:51,760
install the starboard operator who is

2046
01:03:51,760 --> 01:03:53,359
here familiar with the operator

2047
01:03:53,359 --> 01:03:55,119
framework in kubernetes who has used an

2048
01:03:55,119 --> 01:03:57,280
operator before in kubernetes you have

2049
01:03:57,280 --> 01:03:59,920
few hands awesome great of you awesome

2050
01:03:59,920 --> 01:04:02,559
so here's the white paper that i helped

2051
01:04:02,559 --> 01:04:04,079
review it's a really cool white paper

2052
01:04:04,079 --> 01:04:06,160
that details everything that you have to

2053
01:04:06,160 --> 01:04:07,839
know kind of about operators how they

2054
01:04:07,839 --> 01:04:09,920
work what's the theory behind them

2055
01:04:09,920 --> 01:04:11,359
they are basically used to automate

2056
01:04:11,359 --> 01:04:12,480
human behavior

2057
01:04:12,480 --> 01:04:14,640
at my previous role as sre we used

2058
01:04:14,640 --> 01:04:16,880
operators pretty much for everything to

2059
01:04:16,880 --> 01:04:18,160
deploy

2060
01:04:18,160 --> 01:04:20,640
all kinds of tools across

2061
01:04:20,640 --> 01:04:22,160
thousands of tenant clusters which is

2062
01:04:22,160 --> 01:04:25,200
pretty useful so operators

2063
01:04:25,200 --> 01:04:27,920
um we're going to install starboard now

2064
01:04:27,920 --> 01:04:29,440
starboard is running inside of your

2065
01:04:29,440 --> 01:04:31,280
caster this is from a previous demo i

2066
01:04:31,280 --> 01:04:32,720
did where i used all of those tools that

2067
01:04:32,720 --> 01:04:34,480
you can see i use starboard to starboard

2068
01:04:34,480 --> 01:04:36,079
exporter to have the metrics from

2069
01:04:36,079 --> 01:04:38,000
starboard and i visualize them through

2070
01:04:38,000 --> 01:04:40,559
grafana and prometheus now we're going

2071
01:04:40,559 --> 01:04:42,319
to not use all of these tools i just

2072
01:04:42,319 --> 01:04:43,359
want to

2073
01:04:43,359 --> 01:04:45,680
show you how starboard lives inside of

2074
01:04:45,680 --> 01:04:47,920
your cluster it's just another set of

2075
01:04:47,920 --> 01:04:50,079
kubernetes resources pretty much

2076
01:04:50,079 --> 01:04:53,039
that you can install

2077
01:04:53,039 --> 01:04:55,200
uh so you can install starboard foot

2078
01:04:55,200 --> 01:04:57,039
different ways either through a helm

2079
01:04:57,039 --> 01:04:58,160
chart

2080
01:04:58,160 --> 01:05:00,079
if you use helm if you prefer home or

2081
01:05:00,079 --> 01:05:02,480
directly through cube cattle apply

2082
01:05:02,480 --> 01:05:04,480
the resources so

2083
01:05:04,480 --> 01:05:05,839
that command is also in the command

2084
01:05:05,839 --> 01:05:07,359
sheet and you can go ahead and install

2085
01:05:07,359 --> 01:05:09,280
it inside of your community cluster that

2086
01:05:09,280 --> 01:05:11,280
will create a separate namespace called

2087
01:05:11,280 --> 01:05:13,520
starboard system with the operator

2088
01:05:13,520 --> 01:05:15,119
living inside

2089
01:05:15,119 --> 01:05:16,079
let's do that

2090
01:05:16,079 --> 01:05:18,640
let's do that

2091
01:05:19,280 --> 01:05:21,200
and

2092
01:05:21,200 --> 01:05:23,839
okay

2093
01:05:24,880 --> 01:05:26,799
now as you can see there are lots of

2094
01:05:26,799 --> 01:05:27,839
different

2095
01:05:27,839 --> 01:05:29,280
um

2096
01:05:29,280 --> 01:05:31,520
specific resources let's say that's

2097
01:05:31,520 --> 01:05:32,720
stubborn it's installing those are

2098
01:05:32,720 --> 01:05:33,839
custom

2099
01:05:33,839 --> 01:05:35,760
resources and kubernetes that basically

2100
01:05:35,760 --> 01:05:38,240
extend the kubernetes api and allow you

2101
01:05:38,240 --> 01:05:40,000
to have

2102
01:05:40,000 --> 01:05:42,480
the configuration scans from starboard

2103
01:05:42,480 --> 01:05:44,319
stored as another kubernetes resource

2104
01:05:44,319 --> 01:05:45,760
inside of your cluster and if you have

2105
01:05:45,760 --> 01:05:47,680
basically everything as a kubernetes

2106
01:05:47,680 --> 01:05:49,359
resource living inside of your cluster

2107
01:05:49,359 --> 01:05:51,280
that means you can integrate starboard

2108
01:05:51,280 --> 01:05:53,200
for example with all of your existing

2109
01:05:53,200 --> 01:05:54,960
kubernetes related tools so it's not a

2110
01:05:54,960 --> 01:05:56,400
separate tool that's living outside of

2111
01:05:56,400 --> 01:05:58,720
your cluster it builds upon existing

2112
01:05:58,720 --> 01:06:01,759
kubernetes resources

2113
01:06:01,839 --> 01:06:04,000
here again you can see a set of

2114
01:06:04,000 --> 01:06:06,160
resources that is installing a set of

2115
01:06:06,160 --> 01:06:09,280
crds so for example the vulnerability

2116
01:06:09,280 --> 01:06:10,400
reports

2117
01:06:10,400 --> 01:06:12,880
they are ultimately used to create to do

2118
01:06:12,880 --> 01:06:15,200
trivia vulnerability scans from within

2119
01:06:15,200 --> 01:06:16,640
your cluster

2120
01:06:16,640 --> 01:06:19,119
whenever you have a new deployment or

2121
01:06:19,119 --> 01:06:20,799
whenever one of your running container

2122
01:06:20,799 --> 01:06:23,039
images change then starboard is going to

2123
01:06:23,039 --> 01:06:25,359
detect that change and it's going to

2124
01:06:25,359 --> 01:06:27,440
create a new vulnerability report for

2125
01:06:27,440 --> 01:06:28,480
that

2126
01:06:28,480 --> 01:06:30,839
container

2127
01:06:30,839 --> 01:06:33,440
image um

2128
01:06:33,440 --> 01:06:35,200
yeah so here we can go ahead and check

2129
01:06:35,200 --> 01:06:38,079
whether your starboard uh installation

2130
01:06:38,079 --> 01:06:40,240
is already up and running it's properly

2131
01:06:40,240 --> 01:06:41,280
deployed

2132
01:06:41,280 --> 01:06:43,520
um

2133
01:06:43,839 --> 01:06:46,880
now the thing is which i kind of have to

2134
01:06:46,880 --> 01:06:49,359
mention that trivia now supports

2135
01:06:49,359 --> 01:06:51,920
everything that starboard does because

2136
01:06:51,920 --> 01:06:54,079
we are going through some changes so you

2137
01:06:54,079 --> 01:06:56,000
can still use the starboard operator

2138
01:06:56,000 --> 01:06:58,079
like we're showing you here but with the

2139
01:06:58,079 --> 01:07:00,480
new release from trevi yesterday you can

2140
01:07:00,480 --> 01:07:01,839
do the exact same thing that we are

2141
01:07:01,839 --> 01:07:03,839
doing here for starboard through trivi

2142
01:07:03,839 --> 01:07:05,520
so it's this exact same code just that

2143
01:07:05,520 --> 01:07:09,280
trivia is implementing it now as well

2144
01:07:09,440 --> 01:07:10,400
okay

2145
01:07:10,400 --> 01:07:13,680
so now we to create a vulnerability scan

2146
01:07:13,680 --> 01:07:15,920
like to basically trigger starboard to

2147
01:07:15,920 --> 01:07:17,599
create a scan we need to have a

2148
01:07:17,599 --> 01:07:19,599
deployment now if you have any other

2149
01:07:19,599 --> 01:07:21,760
deployment that you want to spin up in

2150
01:07:21,760 --> 01:07:23,359
your cluster or you already have

2151
01:07:23,359 --> 01:07:24,720
deployments running inside of your

2152
01:07:24,720 --> 01:07:26,559
cluster you can go ahead and you can

2153
01:07:26,559 --> 01:07:29,760
check already through four vulnerability

2154
01:07:29,760 --> 01:07:31,680
reports inside of your cluster if the

2155
01:07:31,680 --> 01:07:33,039
deployment is within a specific

2156
01:07:33,039 --> 01:07:35,119
namespace vulnerability scans are

2157
01:07:35,119 --> 01:07:36,160
generally

2158
01:07:36,160 --> 01:07:38,160
namespace scoped like where that

2159
01:07:38,160 --> 01:07:39,520
deployment is running in your side of

2160
01:07:39,520 --> 01:07:41,200
your cluster so

2161
01:07:41,200 --> 01:07:44,160
um yeah let's let's deploy

2162
01:07:44,160 --> 01:07:46,720
that simple app it's a simple react app

2163
01:07:46,720 --> 01:07:48,400
it's just creating a deployment and a

2164
01:07:48,400 --> 01:07:49,520
service

2165
01:07:49,520 --> 01:07:51,440
and

2166
01:07:51,440 --> 01:07:53,599
now a few seconds later we should get a

2167
01:07:53,599 --> 01:07:56,319
vulnerability report

2168
01:07:56,319 --> 01:07:57,760
this is where we find out how well this

2169
01:07:57,760 --> 01:08:00,640
vm is holding up let's see how fast

2170
01:08:00,640 --> 01:08:01,920
it happened

2171
01:08:01,920 --> 01:08:04,160
awesome so here you can see how many

2172
01:08:04,160 --> 01:08:06,400
high medium low vulnerabilities there

2173
01:08:06,400 --> 01:08:09,520
inside for that deployment and whenever

2174
01:08:09,520 --> 01:08:11,440
you update that container image there

2175
01:08:11,440 --> 01:08:13,520
will be well you will see the updated

2176
01:08:13,520 --> 01:08:15,520
list but you will see also the all of

2177
01:08:15,520 --> 01:08:17,279
the previous vulnerability reports they

2178
01:08:17,279 --> 01:08:19,040
are all going to be stored within your

2179
01:08:19,040 --> 01:08:20,960
cluster um so they are not going to be

2180
01:08:20,960 --> 01:08:22,560
deleted if there is a new vulnerability

2181
01:08:22,560 --> 01:08:23,679
report

2182
01:08:23,679 --> 01:08:25,839
now we also have integrations for for

2183
01:08:25,839 --> 01:08:27,920
example lens

2184
01:08:27,920 --> 01:08:30,640
so you can view the reports with more

2185
01:08:30,640 --> 01:08:33,359
detail through lens for example

2186
01:08:33,359 --> 01:08:36,238
jv has lots of different

2187
01:08:36,238 --> 01:08:39,759
extensions um and add-ons so have a look

2188
01:08:39,759 --> 01:08:42,560
see which ones are useful for you maybe

2189
01:08:42,560 --> 01:08:44,880
now there are also cluster scoped

2190
01:08:44,880 --> 01:08:47,120
vulnerability reports and for most of

2191
01:08:47,120 --> 01:08:49,198
the audits that starboard does you will

2192
01:08:49,198 --> 01:08:51,759
have a specific namespace scoped and a

2193
01:08:51,759 --> 01:08:53,520
cluster scoped

2194
01:08:53,520 --> 01:08:56,479
scan however the cluster scope scan only

2195
01:08:56,479 --> 01:08:59,920
runs only runs every three hours

2196
01:08:59,920 --> 01:09:02,399
so you won't get the vulnerability

2197
01:09:02,399 --> 01:09:04,399
report on cluster scope

2198
01:09:04,399 --> 01:09:07,120
and like until the next three hours

2199
01:09:07,120 --> 01:09:08,960
um at least that's why i experienced it

2200
01:09:08,960 --> 01:09:10,399
you can check later in the afternoon

2201
01:09:10,399 --> 01:09:11,359
yeah

2202
01:09:11,359 --> 01:09:12,960
come back later

2203
01:09:12,960 --> 01:09:16,158
um awesome so we also have configuration

2204
01:09:16,158 --> 01:09:19,120
audit scans so while you won't want to

2205
01:09:19,120 --> 01:09:22,238
use for example trevi for your

2206
01:09:22,238 --> 01:09:25,198
kubernetes configuration scans with

2207
01:09:25,198 --> 01:09:28,000
configuration scans or for your

2208
01:09:28,000 --> 01:09:29,759
infrastructure's code configuration

2209
01:09:29,759 --> 01:09:32,158
scans starboard also performs

2210
01:09:32,158 --> 01:09:34,560
configuration audits from within your

2211
01:09:34,560 --> 01:09:36,880
cluster and again they are

2212
01:09:36,880 --> 01:09:39,759
specific resource scoped but also

2213
01:09:39,759 --> 01:09:44,000
cluster scoped this is some other thing

2214
01:09:44,560 --> 01:09:47,279
yeah so we have here our config audit

2215
01:09:47,279 --> 01:09:49,839
report and then you could go ahead and

2216
01:09:49,839 --> 01:09:51,839
you could describe that config audit

2217
01:09:51,839 --> 01:09:53,439
report

2218
01:09:53,439 --> 01:09:54,640
you want to do that so you will

2219
01:09:54,640 --> 01:09:57,360
basically get a kubernetes custom user's

2220
01:09:57,360 --> 01:10:00,000
definition just

2221
01:10:00,239 --> 01:10:03,600
yeah provide it

2222
01:10:03,600 --> 01:10:05,760
how was it oh messing up you're good and

2223
01:10:05,760 --> 01:10:07,920
you have to yeah name space okay yeah

2224
01:10:07,920 --> 01:10:10,080
there you go time completion good work

2225
01:10:10,080 --> 01:10:14,000
yeah so here's the cube i need to see id

2226
01:10:14,000 --> 01:10:17,040
um now like mentioned trevi is really

2227
01:10:17,040 --> 01:10:19,280
for any engineer anybody's who's dealing

2228
01:10:19,280 --> 01:10:22,400
with uh development resources starboard

2229
01:10:22,400 --> 01:10:24,320
is really focused on class statements

2230
01:10:24,320 --> 01:10:27,679
security professionals who want to have

2231
01:10:27,679 --> 01:10:30,320
a custom setup so you wouldn't just use

2232
01:10:30,320 --> 01:10:32,239
starboard as as itself you would

2233
01:10:32,239 --> 01:10:34,159
integrate it with your other tooling for

2234
01:10:34,159 --> 01:10:35,520
example you could visualize the

2235
01:10:35,520 --> 01:10:37,280
vulnerability reports in grafana

2236
01:10:37,280 --> 01:10:39,520
negotiate dashboard if there are new

2237
01:10:39,520 --> 01:10:41,360
vulnerabilities pop up then you can get

2238
01:10:41,360 --> 01:10:45,799
alerted things like that

2239
01:10:47,360 --> 01:10:50,800
okay so infrastructure scans um we also

2240
01:10:50,800 --> 01:10:54,320
do cas benchmark scans for cubanitas um

2241
01:10:54,320 --> 01:10:56,400
with a tool called cubebench cubebench

2242
01:10:56,400 --> 01:10:59,040
is also part of accra of the open source

2243
01:10:59,040 --> 01:11:00,480
tools and

2244
01:11:00,480 --> 01:11:03,040
starboard is integrating cubebench so it

2245
01:11:03,040 --> 01:11:05,199
will create a cis benchmark report for

2246
01:11:05,199 --> 01:11:07,440
every node that you have within your

2247
01:11:07,440 --> 01:11:09,520
cluster so for every single node it will

2248
01:11:09,520 --> 01:11:11,760
create a scan

2249
01:11:11,760 --> 01:11:13,920
we you can also with

2250
01:11:13,920 --> 01:11:14,880
the

2251
01:11:14,880 --> 01:11:17,840
starboard cli you can run cube hunter no

2252
01:11:17,840 --> 01:11:19,679
we're not going to use the cli right now

2253
01:11:19,679 --> 01:11:20,560
um

2254
01:11:20,560 --> 01:11:22,480
it's also going to evolve in the future

2255
01:11:22,480 --> 01:11:27,280
towards being integrated within 3d

2256
01:11:27,280 --> 01:11:31,280
so here's how you would run

2257
01:11:31,440 --> 01:11:34,239
the cas cube bench reports so check how

2258
01:11:34,239 --> 01:11:36,159
many nodes you have if you have a kind

2259
01:11:36,159 --> 01:11:38,400
micro case single node cluster you will

2260
01:11:38,400 --> 01:11:40,960
have one report if you have um multiple

2261
01:11:40,960 --> 01:11:43,280
notes

2262
01:11:44,480 --> 01:11:46,400
you will have multiple reports see if

2263
01:11:46,400 --> 01:11:48,640
it's run right

2264
01:11:48,640 --> 01:11:50,560
yeah yeah is that right yeah cause we're

2265
01:11:50,560 --> 01:11:52,239
gonna do it right no no that's good and

2266
01:11:52,239 --> 01:11:55,280
then we just do

2267
01:11:55,280 --> 01:11:57,120
it's all good it's the next one yeah it

2268
01:11:57,120 --> 01:11:58,480
doesn't work

2269
01:11:58,480 --> 01:12:00,320
it's nsa report

2270
01:12:00,320 --> 01:12:02,239
i was wrong it's and it's a report that

2271
01:12:02,239 --> 01:12:04,320
goes does this per node

2272
01:12:04,320 --> 01:12:06,239
i don't know this one would do actually

2273
01:12:06,239 --> 01:12:09,320
as well

2274
01:12:12,640 --> 01:12:14,960
awesome so again you can see this is a

2275
01:12:14,960 --> 01:12:17,440
kubernetes crd so you would use the

2276
01:12:17,440 --> 01:12:19,360
information from within the crd in other

2277
01:12:19,360 --> 01:12:21,920
tools to visualize it to go through it

2278
01:12:21,920 --> 01:12:23,360
um one thing i just very quickly

2279
01:12:23,360 --> 01:12:24,800
mentioned on it is you'll see that you

2280
01:12:24,800 --> 01:12:26,560
get like a fail count a pass count and a

2281
01:12:26,560 --> 01:12:29,040
warrant count um the fail count is

2282
01:12:29,040 --> 01:12:30,880
things that tested could test and were

2283
01:12:30,880 --> 01:12:32,960
failures the pass obviously is things it

2284
01:12:32,960 --> 01:12:35,199
tested nor past and the warn is things

2285
01:12:35,199 --> 01:12:36,800
it couldn't test

2286
01:12:36,800 --> 01:12:38,080
uh and we'll talk about more of this on

2287
01:12:38,080 --> 01:12:39,360
friday so if you're interested in why

2288
01:12:39,360 --> 01:12:41,360
you can't necessarily automate uh cis

2289
01:12:41,360 --> 01:12:43,440
benchmark completely due to the fact

2290
01:12:43,440 --> 01:12:45,199
that it's not possible to automate with

2291
01:12:45,199 --> 01:12:47,600
a scanner but that's what worn means war

2292
01:12:47,600 --> 01:12:49,360
means i i'm not able to test that it's

2293
01:12:49,360 --> 01:12:50,800
something you need to manually go look

2294
01:12:50,800 --> 01:12:52,880
at

2295
01:12:56,400 --> 01:12:57,600
so there

2296
01:12:57,600 --> 01:12:58,880
there's one other tool that we could

2297
01:12:58,880 --> 01:13:01,600
find it also does cas benchmark scans

2298
01:13:01,600 --> 01:13:04,560
and it's by a private project by one of

2299
01:13:04,560 --> 01:13:07,360
my co-workers from the open source team

2300
01:13:07,360 --> 01:13:09,040
which is called cute beacon now we're

2301
01:13:09,040 --> 01:13:10,960
going to go into the differences of

2302
01:13:10,960 --> 01:13:13,040
different tools on friday

2303
01:13:13,040 --> 01:13:14,400
so if you want to learn more about the

2304
01:13:14,400 --> 01:13:15,840
difference between

2305
01:13:15,840 --> 01:13:18,000
other similar scanning tools and

2306
01:13:18,000 --> 01:13:20,159
starboard for instance then join us on

2307
01:13:20,159 --> 01:13:22,400
friday

2308
01:13:22,400 --> 01:13:24,080
and then here the cluster compliance

2309
01:13:24,080 --> 01:13:25,520
reports

2310
01:13:25,520 --> 01:13:26,239
so

2311
01:13:26,239 --> 01:13:29,840
for that to run that you have to

2312
01:13:29,840 --> 01:13:32,400
put an add-on to starboard through

2313
01:13:32,400 --> 01:13:35,760
kubecon apply and then you can run nsa

2314
01:13:35,760 --> 01:13:38,159
scans

2315
01:13:40,260 --> 01:13:42,000
[Music]

2316
01:13:42,000 --> 01:13:42,960
so again obviously if you're doing in

2317
01:13:42,960 --> 01:13:44,719
production do download this manifest and

2318
01:13:44,719 --> 01:13:46,159
read it before doing what we're doing

2319
01:13:46,159 --> 01:13:47,520
but for this is a test machine which is

2320
01:13:47,520 --> 01:13:51,199
going away within this demo so it's fine

2321
01:13:53,679 --> 01:13:55,920
let's see if that's run

2322
01:13:55,920 --> 01:13:59,040
oh it's still thinking about it

2323
01:13:59,199 --> 01:14:00,880
yeah so we're going to talk a little bit

2324
01:14:00,880 --> 01:14:03,360
more about this on um on friday but um

2325
01:14:03,360 --> 01:14:05,440
the way it works is the nsa has a

2326
01:14:05,440 --> 01:14:07,120
hardening guide uh which is not a

2327
01:14:07,120 --> 01:14:09,440
compliance benchmark um but we've picked

2328
01:14:09,440 --> 01:14:10,719
out things out of that which we think

2329
01:14:10,719 --> 01:14:12,159
are checkable and we think can be you

2330
01:14:12,159 --> 01:14:14,320
know automatically assessed and from

2331
01:14:14,320 --> 01:14:15,760
that we've we've come up with a set of

2332
01:14:15,760 --> 01:14:18,000
checks which makes sense again i'm going

2333
01:14:18,000 --> 01:14:20,719
to mention the fact that any nsa scanner

2334
01:14:20,719 --> 01:14:22,480
will probably have different checks in

2335
01:14:22,480 --> 01:14:24,560
it so if you say i'm going to do an nsa

2336
01:14:24,560 --> 01:14:26,320
scan and two people run two different

2337
01:14:26,320 --> 01:14:28,000
scanners on the same cluster it's very

2338
01:14:28,000 --> 01:14:29,760
likely you will get different results so

2339
01:14:29,760 --> 01:14:31,760
another one to watch for tooling is do

2340
01:14:31,760 --> 01:14:33,520
watch for the fact that just as someone

2341
01:14:33,520 --> 01:14:34,800
says they do something you have to go

2342
01:14:34,800 --> 01:14:36,480
and read exactly what you mean by that

2343
01:14:36,480 --> 01:14:38,560
so we've got an idea and

2344
01:14:38,560 --> 01:14:40,159
he said see if it's gonna finished oh

2345
01:14:40,159 --> 01:14:42,400
it's gonna be slow hey if we get all the

2346
01:14:42,400 --> 01:14:43,840
way to the end of this and only one demo

2347
01:14:43,840 --> 01:14:45,520
fails i want to count that as a win the

2348
01:14:45,520 --> 01:14:46,960
chances of standing up for 90 minutes

2349
01:14:46,960 --> 01:14:48,880
having a single failed demo i'm like i'm

2350
01:14:48,880 --> 01:14:51,120
gonna but i it may just be being slow we

2351
01:14:51,120 --> 01:14:52,640
may want to like we may go on the slides

2352
01:14:52,640 --> 01:14:54,840
and come back it's being

2353
01:14:54,840 --> 01:14:58,080
slow there are also two types of crds

2354
01:14:58,080 --> 01:14:59,840
the cluster uh

2355
01:14:59,840 --> 01:15:01,280
i haven't run yet but it tells you what

2356
01:15:01,280 --> 01:15:02,320
it's going to do it just hasn't actually

2357
01:15:02,320 --> 01:15:04,159
finished yet

2358
01:15:04,159 --> 01:15:05,760
the cluster compliance reports in the

2359
01:15:05,760 --> 01:15:07,360
cluster compliance detail report which

2360
01:15:07,360 --> 01:15:08,840
provide more

2361
01:15:08,840 --> 01:15:10,880
information so yeah you can actually you

2362
01:15:10,880 --> 01:15:12,080
can see what it's going to do it just

2363
01:15:12,080 --> 01:15:13,840
hasn't done it yet so it's thinking

2364
01:15:13,840 --> 01:15:15,520
about it

2365
01:15:15,520 --> 01:15:18,000
and it's yeah so we'll

2366
01:15:18,000 --> 01:15:20,239
we'll let it do its stuff

2367
01:15:20,239 --> 01:15:22,640
awesome so here's an alternative for nsa

2368
01:15:22,640 --> 01:15:26,400
reports which is by cubescape um so you

2369
01:15:26,400 --> 01:15:28,480
could use keepscape instead to produce

2370
01:15:28,480 --> 01:15:30,960
nsa reports now this is like the brief

2371
01:15:30,960 --> 01:15:33,840
overview you can get a more detailed um

2372
01:15:33,840 --> 01:15:36,000
output from cubescape if you put like an

2373
01:15:36,000 --> 01:15:38,000
additional flag at the end of your

2374
01:15:38,000 --> 01:15:39,280
command

2375
01:15:39,280 --> 01:15:40,960
so you could do that you know they also

2376
01:15:40,960 --> 01:15:44,239
have a ui by ammo that you could use um

2377
01:15:44,239 --> 01:15:46,560
in addition to the ci

2378
01:15:46,560 --> 01:15:48,239
um which we're not going to show you

2379
01:15:48,239 --> 01:15:49,360
yeah because

2380
01:15:49,360 --> 01:15:51,120
we're focusing on this stuff but yeah i

2381
01:15:51,120 --> 01:15:52,560
said there are different tools that do

2382
01:15:52,560 --> 01:15:53,760
this once you understand how these tools

2383
01:15:53,760 --> 01:15:55,440
work there's always going to be an and

2384
01:15:55,440 --> 01:15:56,719
it's great to see like a decent variety

2385
01:15:56,719 --> 01:15:57,840
of different people attacking this

2386
01:15:57,840 --> 01:15:58,960
process because they'll have different

2387
01:15:58,960 --> 01:16:00,880
focuses

2388
01:16:00,880 --> 01:16:01,840
so

2389
01:16:01,840 --> 01:16:03,280
custom policies

2390
01:16:03,280 --> 01:16:04,800
um

2391
01:16:04,800 --> 01:16:08,159
yeah so you can um also i mean we

2392
01:16:08,159 --> 01:16:09,760
mentioned earlier so we might not have

2393
01:16:09,760 --> 01:16:11,600
to go into too much detail on that um

2394
01:16:11,600 --> 01:16:13,280
you can also

2395
01:16:13,280 --> 01:16:16,000
uh write custom policies

2396
01:16:16,000 --> 01:16:18,400
for you to scan for configuration uh

2397
01:16:18,400 --> 01:16:20,239
misconfigurations within your cuba needs

2398
01:16:20,239 --> 01:16:22,719
manifest um so with tv itself you can

2399
01:16:22,719 --> 01:16:24,719
use regular with tfsec like i mentioned

2400
01:16:24,719 --> 01:16:26,640
you can use yemen or json depending what

2401
01:16:26,640 --> 01:16:30,080
you prefer if you use terraform

2402
01:16:31,280 --> 01:16:33,040
and then it's gonna so you can yeah and

2403
01:16:33,040 --> 01:16:34,080
that's chucked out the results for

2404
01:16:34,080 --> 01:16:36,080
custom policies so again that's what i

2405
01:16:36,080 --> 01:16:37,760
was saying is your organization might

2406
01:16:37,760 --> 01:16:39,520
you might look at the trivia policies

2407
01:16:39,520 --> 01:16:41,120
and say you know what these don't work

2408
01:16:41,120 --> 01:16:41,920
for us

2409
01:16:41,920 --> 01:16:43,120
but they're all

2410
01:16:43,120 --> 01:16:44,800
you know editable and you can say you

2411
01:16:44,800 --> 01:16:45,760
know what i don't want these policies i

2412
01:16:45,760 --> 01:16:48,320
want my own policies so cool it's not

2413
01:16:48,320 --> 01:16:50,320
super difficult write your own policies

2414
01:16:50,320 --> 01:16:51,520
and then you can adapt and again just

2415
01:16:51,520 --> 01:16:52,800
adapt the basic ones if you say well

2416
01:16:52,800 --> 01:16:53,920
this is kind of like i want this one but

2417
01:16:53,920 --> 01:16:55,520
i want it a bit changed

2418
01:16:55,520 --> 01:16:56,800
these are things like yaml and json

2419
01:16:56,800 --> 01:16:58,719
they're not super hard to edit you can

2420
01:16:58,719 --> 01:17:02,199
go in and make changes

2421
01:17:05,040 --> 01:17:06,800
so

2422
01:17:06,800 --> 01:17:07,920
yeah so

2423
01:17:07,920 --> 01:17:09,520
what can you do with the tools now or

2424
01:17:09,520 --> 01:17:11,440
what you can what can you do next after

2425
01:17:11,440 --> 01:17:13,600
this demo well i

2426
01:17:13,600 --> 01:17:15,679
love using observability tools from the

2427
01:17:15,679 --> 01:17:18,400
cloud native ecosystem so i like to

2428
01:17:18,400 --> 01:17:20,400
integrate starboard inside of my

2429
01:17:20,400 --> 01:17:22,159
existing observability stack to get

2430
01:17:22,159 --> 01:17:24,480
additional details on

2431
01:17:24,480 --> 01:17:26,320
how my resources are performing security

2432
01:17:26,320 --> 01:17:27,920
rise

2433
01:17:27,920 --> 01:17:30,000
you can also well try out vivi play

2434
01:17:30,000 --> 01:17:31,840
around with it it's completely open

2435
01:17:31,840 --> 01:17:33,280
source if you like the tool give us a

2436
01:17:33,280 --> 01:17:36,159
star on github give us feedback

2437
01:17:36,159 --> 01:17:38,400
uh maybe we can't review it

2438
01:17:38,400 --> 01:17:39,440
yeah

2439
01:17:39,440 --> 01:17:41,120
and let us know what kind of use cases

2440
01:17:41,120 --> 01:17:43,280
would be important to you which you

2441
01:17:43,280 --> 01:17:44,719
would like to see

2442
01:17:44,719 --> 01:17:45,520
um

2443
01:17:45,520 --> 01:17:46,640
yeah the open source team have obviously

2444
01:17:46,640 --> 01:17:48,000
got their ideas and lots of things are

2445
01:17:48,000 --> 01:17:49,120
coming in like secret scanning which

2446
01:17:49,120 --> 01:17:52,159
turned up yesterday um but that said we

2447
01:17:52,159 --> 01:17:53,280
are always very interested in hearing

2448
01:17:53,280 --> 01:17:54,880
what people would like to see next like

2449
01:17:54,880 --> 01:17:55,679
you know if it's something you're

2450
01:17:55,679 --> 01:17:56,880
thinking hey it'd be great if it did

2451
01:17:56,880 --> 01:17:58,159
this but it doesn't and we have a

2452
01:17:58,159 --> 01:18:00,400
question like we do questions we have

2453
01:18:00,400 --> 01:18:01,520
yeah we've got

2454
01:18:01,520 --> 01:18:02,480
i've mentioned we're doing all right for

2455
01:18:02,480 --> 01:18:04,480
time almost exactly on time awesome

2456
01:18:04,480 --> 01:18:08,480
fantastic yeah there's a chat there

2457
01:18:10,080 --> 01:18:10,880
yeah

2458
01:18:10,880 --> 01:18:14,159
yeah in our company we use flux to

2459
01:18:14,159 --> 01:18:17,360
deploy everything and just now try

2460
01:18:17,360 --> 01:18:19,199
3v with one of our

2461
01:18:19,199 --> 01:18:21,920
repositories and it doesn't follow the

2462
01:18:21,920 --> 01:18:24,000
custom resource from flux the

2463
01:18:24,000 --> 01:18:25,600
customization

2464
01:18:25,600 --> 01:18:27,600
doesn't follow the url so do you know if

2465
01:18:27,600 --> 01:18:30,320
there is any plan to add it

2466
01:18:30,320 --> 01:18:31,360
so

2467
01:18:31,360 --> 01:18:35,679
it can't find specifics

2468
01:18:36,320 --> 01:18:38,800
so for i used flex in one of my demos

2469
01:18:38,800 --> 01:18:40,880
that you can find on my youtube channel

2470
01:18:40,880 --> 01:18:43,520
with starboard and i could see like the

2471
01:18:43,520 --> 01:18:45,040
comparison of like the vulnerabilities

2472
01:18:45,040 --> 01:18:46,719
that i found within flux versus within

2473
01:18:46,719 --> 01:18:49,120
agua cd for example so i now i can find

2474
01:18:49,120 --> 01:18:50,880
the vulnerabilities from the container

2475
01:18:50,880 --> 01:18:52,400
images so if it can find the container

2476
01:18:52,400 --> 01:18:54,480
images then it can run the vulnerability

2477
01:18:54,480 --> 01:18:57,760
scans on them it can't

2478
01:18:57,760 --> 01:19:00,400
i'm not sure if it can find for custom

2479
01:19:00,400 --> 01:19:01,920
resource definitions uh the

2480
01:19:01,920 --> 01:19:04,400
misconfiguration scans

2481
01:19:04,400 --> 01:19:06,080
but yeah i believe it can yet but again

2482
01:19:06,080 --> 01:19:07,360
that's a great one to add right and this

2483
01:19:07,360 --> 01:19:08,640
is the thing with the ecosystem there's

2484
01:19:08,640 --> 01:19:10,400
huge numbers of different platforms i

2485
01:19:10,400 --> 01:19:11,520
know at the moment the team are working

2486
01:19:11,520 --> 01:19:14,159
on adding helm so helm chart scanning um

2487
01:19:14,159 --> 01:19:15,840
but if you absolutely want to file an

2488
01:19:15,840 --> 01:19:17,520
issue uh we would be great to see that

2489
01:19:17,520 --> 01:19:19,199
because then we give some idea of what

2490
01:19:19,199 --> 01:19:20,320
the demand is right you know if everyone

2491
01:19:20,320 --> 01:19:22,080
says i would love to see flux and more

2492
01:19:22,080 --> 01:19:23,520
scanning for that then that's i'm sure

2493
01:19:23,520 --> 01:19:24,719
that's going to you know skip up the

2494
01:19:24,719 --> 01:19:26,640
priority list um so yeah please i don't

2495
01:19:26,640 --> 01:19:27,520
think it does at the moment but please

2496
01:19:27,520 --> 01:19:31,920
do add it um on the repo okay thank you

2497
01:19:31,920 --> 01:19:34,960
any other questions

2498
01:19:34,960 --> 01:19:37,520
now here are the links again um to the

2499
01:19:37,520 --> 01:19:40,000
demo to aqua security and the open

2500
01:19:40,000 --> 01:19:42,800
source tools you can find us on twitter

2501
01:19:42,800 --> 01:19:44,480
yeah

2502
01:19:44,480 --> 01:19:46,550
if you have any questions as well

2503
01:19:46,550 --> 01:19:47,920
[Music]

2504
01:19:47,920 --> 01:19:49,840
yeah so yeah that's pretty much where we

2505
01:19:49,840 --> 01:19:52,560
are so hopefully that provided a kind of

2506
01:19:52,560 --> 01:19:53,920
a useful idea and give you know give

2507
01:19:53,920 --> 01:19:56,560
somebody to get started um hopefully i

2508
01:19:56,560 --> 01:19:57,920
get i'd say what you take from that is

2509
01:19:57,920 --> 01:19:59,360
that things like trivia are pretty easy

2510
01:19:59,360 --> 01:20:01,040
to get started with it's not super

2511
01:20:01,040 --> 01:20:02,800
difficult um you don't have to be a

2512
01:20:02,800 --> 01:20:05,440
security expert uh and don't get put off

2513
01:20:05,440 --> 01:20:08,159
if you do um if you use trivi and you

2514
01:20:08,159 --> 01:20:09,760
know what if something goes wrong or

2515
01:20:09,760 --> 01:20:11,520
you're not understanding it there is a

2516
01:20:11,520 --> 01:20:13,840
slack uh for the open source projects

2517
01:20:13,840 --> 01:20:16,639
pop onto slack do ask us and people will

2518
01:20:16,639 --> 01:20:17,600
happy to try and point you in the right

2519
01:20:17,600 --> 01:20:18,560
direction

2520
01:20:18,560 --> 01:20:20,480
and also anes has got great stuff on her

2521
01:20:20,480 --> 01:20:22,080
youtube so go read go watch that because

2522
01:20:22,080 --> 01:20:23,199
you might well find the answer in there

2523
01:20:23,199 --> 01:20:24,080
because there's loads of good videos

2524
01:20:24,080 --> 01:20:25,199
there

2525
01:20:25,199 --> 01:20:26,239
and if you want to look for those we're

2526
01:20:26,239 --> 01:20:27,440
on those places

2527
01:20:27,440 --> 01:20:30,000
and if you want to learn more about uh

2528
01:20:30,000 --> 01:20:32,239
security scans and different tools we're

2529
01:20:32,239 --> 01:20:34,800
going to talk about on friday at 2 p.m

2530
01:20:34,800 --> 01:20:36,320
yeah security standards securities

2531
01:20:36,320 --> 01:20:38,800
benchmarks so more about nsa cis that

2532
01:20:38,800 --> 01:20:39,679
kind of stuff we're going to get a bit

2533
01:20:39,679 --> 01:20:41,120
more depth there because we've got time

2534
01:20:41,120 --> 01:20:42,880
for that also we're going to go into

2535
01:20:42,880 --> 01:20:44,800
more detail on the differences between

2536
01:20:44,800 --> 01:20:46,800
tools like starboard and cubescape when

2537
01:20:46,800 --> 01:20:48,080
to use which

2538
01:20:48,080 --> 01:20:49,360
yeah

2539
01:20:49,360 --> 01:20:51,760
join us there thank you hope that was

2540
01:20:51,760 --> 01:20:54,500
useful

2541
01:20:54,500 --> 01:20:57,189
[Applause]

