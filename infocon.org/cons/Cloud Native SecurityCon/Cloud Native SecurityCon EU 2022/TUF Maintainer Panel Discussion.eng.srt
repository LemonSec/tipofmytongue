1
00:00:00,080 --> 00:00:03,840
hello and welcome everybody to the cncf

2
00:00:03,840 --> 00:00:07,040
tough maintainers panel today i am

3
00:00:07,040 --> 00:00:10,240
joined by four fantastic tough

4
00:00:10,240 --> 00:00:12,799
maintainers here today

5
00:00:12,799 --> 00:00:14,880
and uh we're gonna go through and

6
00:00:14,880 --> 00:00:17,199
introduce them here very shortly we've

7
00:00:17,199 --> 00:00:19,520
got a lot of uh surface area to cover in

8
00:00:19,520 --> 00:00:21,600
this panel you're in for for quite a

9
00:00:21,600 --> 00:00:24,240
ride so let's just go ahead and start

10
00:00:24,240 --> 00:00:26,480
with marina and marina the rules are

11
00:00:26,480 --> 00:00:28,240
when you introduce yourself you've got

12
00:00:28,240 --> 00:00:30,320
to hand it off to the next person who's

13
00:00:30,320 --> 00:00:33,760
going to introduce themselves

14
00:00:34,559 --> 00:00:37,200
all right hi everyone i'm marina i'm a

15
00:00:37,200 --> 00:00:39,840
phd student at nyu i've been working on

16
00:00:39,840 --> 00:00:43,280
tough for the past almost four years now

17
00:00:43,280 --> 00:00:44,640
doing research and development

18
00:00:44,640 --> 00:00:46,320
especially on kind of the academic

19
00:00:46,320 --> 00:00:48,719
specification and new features

20
00:00:48,719 --> 00:00:50,879
side of the project um

21
00:00:50,879 --> 00:00:52,879
and a fun fact about me is that i also

22
00:00:52,879 --> 00:00:54,640
like to dance and actually have a dance

23
00:00:54,640 --> 00:00:57,199
minor from when i was in college

24
00:00:57,199 --> 00:00:59,840
and i'll hand it on to astra

25
00:00:59,840 --> 00:01:01,760
all right hi everyone my name is astra

26
00:01:01,760 --> 00:01:04,080
ali and i'm a software engineer at

27
00:01:04,080 --> 00:01:05,680
google on the google open source

28
00:01:05,680 --> 00:01:09,119
security team um and i work on supply

29
00:01:09,119 --> 00:01:11,040
chain security and i've previously

30
00:01:11,040 --> 00:01:12,720
worked on cryptography and privacy

31
00:01:12,720 --> 00:01:15,520
preserving preserving technologies

32
00:01:15,520 --> 00:01:18,400
um and a quick little side fact about me

33
00:01:18,400 --> 00:01:20,240
is when i'm not at my computer i'm

34
00:01:20,240 --> 00:01:23,280
usually outside hiking or doing some

35
00:01:23,280 --> 00:01:25,439
kind of combat sport training

36
00:01:25,439 --> 00:01:29,520
um and i will hand it off to trishank

37
00:01:29,520 --> 00:01:32,159
oh my god remind me not to mess with you

38
00:01:32,159 --> 00:01:33,840
so

39
00:01:33,840 --> 00:01:35,840
i'm trisha and karthik kupasami sorry

40
00:01:35,840 --> 00:01:37,920
camera off but kind of midnight here i

41
00:01:37,920 --> 00:01:39,520
hope you'll forgive me

42
00:01:39,520 --> 00:01:42,479
um yeah i've been uh on and off uh

43
00:01:42,479 --> 00:01:45,119
involved with the top uh you know the

44
00:01:45,119 --> 00:01:49,040
tough project um several years now um

45
00:01:49,040 --> 00:01:52,159
uh i'm a security engineer at datalog by

46
00:01:52,159 --> 00:01:55,280
the way you see when did you go next

47
00:01:55,280 --> 00:01:56,079
sure

48
00:01:56,079 --> 00:01:57,920
um i'm yousef

49
00:01:57,920 --> 00:02:01,040
open source engineer vmware i've got a

50
00:02:01,040 --> 00:02:03,280
pretty long carrier in open source and

51
00:02:03,280 --> 00:02:06,240
and now lately in supply chain security

52
00:02:06,240 --> 00:02:07,280
um

53
00:02:07,280 --> 00:02:10,000
i've got two border collies here um with

54
00:02:10,000 --> 00:02:12,959
me and all of us are waiting for

55
00:02:12,959 --> 00:02:15,440
spring to finally arrive in in helsinki

56
00:02:15,440 --> 00:02:17,760
too at least at the time of recording

57
00:02:17,760 --> 00:02:20,879
it's not happened yet

58
00:02:20,959 --> 00:02:24,080
and i am andrew krug i'm a uh the lead

59
00:02:24,080 --> 00:02:26,560
security evangelist at datadog i work

60
00:02:26,560 --> 00:02:29,440
with prashank of course and uh happy to

61
00:02:29,440 --> 00:02:32,319
be here and moderating this panel today

62
00:02:32,319 --> 00:02:34,480
so for the folks whose first time it is

63
00:02:34,480 --> 00:02:37,840
hearing about uh tough i think uh it

64
00:02:37,840 --> 00:02:39,840
would just be great to cover like what

65
00:02:39,840 --> 00:02:41,760
what is tough and like what are the

66
00:02:41,760 --> 00:02:44,000
goals of the project what problem does

67
00:02:44,000 --> 00:02:47,840
it seek to kind of uh solve here

68
00:02:49,200 --> 00:02:50,560
yeah so i can start with a little bit of

69
00:02:50,560 --> 00:02:53,120
background so tuff started off as a an

70
00:02:53,120 --> 00:02:54,959
academic project at the university of

71
00:02:54,959 --> 00:02:57,280
washington um where my advisor justin

72
00:02:57,280 --> 00:02:59,760
capos was working with justin samuel and

73
00:02:59,760 --> 00:03:02,000
some folks from the tour project

74
00:03:02,000 --> 00:03:03,760
to kind of solve this problem of package

75
00:03:03,760 --> 00:03:06,959
manager security and um

76
00:03:06,959 --> 00:03:08,319
they've been done some previous research

77
00:03:08,319 --> 00:03:10,800
on attacks on software update systems

78
00:03:10,800 --> 00:03:12,720
and so tuff was an attempt to address

79
00:03:12,720 --> 00:03:15,200
these attacks and um create a compromise

80
00:03:15,200 --> 00:03:16,319
resilient

81
00:03:16,319 --> 00:03:18,879
um software update um framework that

82
00:03:18,879 --> 00:03:20,080
allows

83
00:03:20,080 --> 00:03:22,239
um security even in the event that one

84
00:03:22,239 --> 00:03:23,840
or more signing keys or even the

85
00:03:23,840 --> 00:03:27,519
repository itself is compromised

86
00:03:27,519 --> 00:03:32,200
and i'll let let's go into more detail

87
00:03:32,720 --> 00:03:35,120
yeah um so i'll just uh kind of go a

88
00:03:35,120 --> 00:03:37,040
little bit more uh into detail coming

89
00:03:37,040 --> 00:03:40,000
from my side of things so um i

90
00:03:40,000 --> 00:03:42,080
got introduced to tough as i started

91
00:03:42,080 --> 00:03:44,159
working on the safe store project which

92
00:03:44,159 --> 00:03:47,280
is a project under the open ssf that

93
00:03:47,280 --> 00:03:48,959
regards like software signing and we

94
00:03:48,959 --> 00:03:51,680
were building a service um that required

95
00:03:51,680 --> 00:03:53,200
a lot of infrastructure components that

96
00:03:53,200 --> 00:03:56,400
you needed to trust um and tough was the

97
00:03:56,400 --> 00:03:59,360
like way that we started thinking about

98
00:03:59,360 --> 00:04:00,640
how do we

99
00:04:00,640 --> 00:04:04,959
um keep that ecosystem of trust um

100
00:04:04,959 --> 00:04:07,200
like compromise resilient like marina

101
00:04:07,200 --> 00:04:10,319
mentioned um and also like

102
00:04:10,319 --> 00:04:12,000
to be able to sort of like think about

103
00:04:12,000 --> 00:04:13,439
secure updates in the future so we

104
00:04:13,439 --> 00:04:15,360
really started integrating with tough

105
00:04:15,360 --> 00:04:17,440
and adopting some of that framework

106
00:04:17,440 --> 00:04:20,079
methodology really from the start um

107
00:04:20,079 --> 00:04:22,320
because we knew that we would eventually

108
00:04:22,320 --> 00:04:24,479
have to deal with things like having a

109
00:04:24,479 --> 00:04:27,040
trusted route having to update keys

110
00:04:27,040 --> 00:04:29,440
having to update parts of our ecosystem

111
00:04:29,440 --> 00:04:31,360
and having a sort of central repository

112
00:04:31,360 --> 00:04:33,199
where we were managing with tough was

113
00:04:33,199 --> 00:04:37,199
the way to go um yeah

114
00:04:37,520 --> 00:04:39,680
yeah i guess i guess that

115
00:04:39,680 --> 00:04:42,400
pretty much sunset but

116
00:04:42,400 --> 00:04:44,000
basically

117
00:04:44,000 --> 00:04:46,320
signatures alone just they aren't very

118
00:04:46,320 --> 00:04:47,919
useful right

119
00:04:47,919 --> 00:04:50,560
like nobody's going to

120
00:04:50,560 --> 00:04:51,600
have

121
00:04:51,600 --> 00:04:54,080
hundreds of artifacts or something where

122
00:04:54,080 --> 00:04:56,960
you're going to somehow figure out which

123
00:04:56,960 --> 00:04:59,360
signature should be or who should be

124
00:04:59,360 --> 00:05:01,680
signing this you need to be able to

125
00:05:01,680 --> 00:05:02,960
you know

126
00:05:02,960 --> 00:05:06,080
somehow delegate the trust that that you

127
00:05:06,080 --> 00:05:08,840
can just um check one or two things and

128
00:05:08,840 --> 00:05:11,919
then that kind of just flows from there

129
00:05:11,919 --> 00:05:12,800
and

130
00:05:12,800 --> 00:05:14,800
um

131
00:05:14,800 --> 00:05:16,240
i think that

132
00:05:16,240 --> 00:05:18,080
like everyone who starts looking at this

133
00:05:18,080 --> 00:05:19,039
problem

134
00:05:19,039 --> 00:05:21,840
kind of ends up at this

135
00:05:21,840 --> 00:05:23,360
same-ish

136
00:05:23,360 --> 00:05:24,720
solution

137
00:05:24,720 --> 00:05:27,280
and it you know it doesn't have to be

138
00:05:27,280 --> 00:05:29,520
tough but it's going to look quite a lot

139
00:05:29,520 --> 00:05:31,840
like it i think

140
00:05:31,840 --> 00:05:33,759
i think one of the interesting things

141
00:05:33,759 --> 00:05:36,160
about tough right is that it's actually

142
00:05:36,160 --> 00:05:38,160
a a box

143
00:05:38,160 --> 00:05:41,039
of tools and also it's a it's a

144
00:05:41,039 --> 00:05:42,960
framework on top of that

145
00:05:42,960 --> 00:05:44,960
and one of the problems that it seeks to

146
00:05:44,960 --> 00:05:46,560
solve is really being really really

147
00:05:46,560 --> 00:05:49,199
usable right it's it's not just like

148
00:05:49,199 --> 00:05:51,440
crypto for crypto folks uh one of my

149
00:05:51,440 --> 00:05:53,680
favorite quotes from rob fuller is you

150
00:05:53,680 --> 00:05:56,000
can't spell crypto without cry

151
00:05:56,000 --> 00:05:59,199
and i think that we can we can all uh

152
00:05:59,199 --> 00:06:01,680
use that to attribute why we haven't

153
00:06:01,680 --> 00:06:04,400
seen teams put more of these uh controls

154
00:06:04,400 --> 00:06:07,840
inside of their ci cd pipelines or their

155
00:06:07,840 --> 00:06:09,759
software release process is that the

156
00:06:09,759 --> 00:06:11,199
tools just really aren't understandable

157
00:06:11,199 --> 00:06:13,360
and accessible so does anybody have any

158
00:06:13,360 --> 00:06:15,199
thoughts on like how much time this

159
00:06:15,199 --> 00:06:19,960
project spends on on ux and usability

160
00:06:21,520 --> 00:06:24,080
who wants to start boy that's that's a

161
00:06:24,080 --> 00:06:28,000
good question um look so i think i think

162
00:06:28,000 --> 00:06:30,240
i think if there's one thing that the

163
00:06:30,240 --> 00:06:32,160
open ssf foundation has done well

164
00:06:32,160 --> 00:06:33,520
especially with sixth one right

165
00:06:33,520 --> 00:06:34,400
especially

166
00:06:34,400 --> 00:06:35,840
azra and friends

167
00:06:35,840 --> 00:06:36,960
um

168
00:06:36,960 --> 00:06:40,160
is try to make this technology more

169
00:06:40,160 --> 00:06:42,560
accessible to the wall

170
00:06:42,560 --> 00:06:43,840
previously

171
00:06:43,840 --> 00:06:47,520
you pretty much had to have a phd okay

172
00:06:47,520 --> 00:06:49,199
or close

173
00:06:49,199 --> 00:06:51,440
okay s marina knows

174
00:06:51,440 --> 00:06:52,639
um

175
00:06:52,639 --> 00:06:53,520
um

176
00:06:53,520 --> 00:06:56,160
so yeah the the the technology wasn't

177
00:06:56,160 --> 00:06:58,319
very usable but look

178
00:06:58,319 --> 00:07:00,080
something like tough is actually much

179
00:07:00,080 --> 00:07:02,400
more useful not if you're an

180
00:07:02,400 --> 00:07:04,400
not if you're an

181
00:07:04,400 --> 00:07:06,639
individual contributor

182
00:07:06,639 --> 00:07:07,440
but

183
00:07:07,440 --> 00:07:09,919
something on the level of uh pro

184
00:07:09,919 --> 00:07:12,240
programming language uh yeah yeah

185
00:07:12,240 --> 00:07:14,560
exactly something like a programming

186
00:07:14,560 --> 00:07:17,440
language uh community repository like

187
00:07:17,440 --> 00:07:21,360
ipi or npm or you know github and so on

188
00:07:21,360 --> 00:07:22,639
um

189
00:07:22,639 --> 00:07:23,520
and

190
00:07:23,520 --> 00:07:26,240
how do i put this the initiative just

191
00:07:26,240 --> 00:07:28,000
wasn't there before

192
00:07:28,000 --> 00:07:31,199
but it's changing now um you want to use

193
00:07:31,199 --> 00:07:34,319
stuff to to give you guarantees like

194
00:07:34,319 --> 00:07:36,960
okay look this is indeed the latest

195
00:07:36,960 --> 00:07:39,199
stuff that i'm getting i'm not being

196
00:07:39,199 --> 00:07:40,800
mixed and matched

197
00:07:40,800 --> 00:07:41,759
um

198
00:07:41,759 --> 00:07:44,319
this is actually the kubernetes project

199
00:07:44,319 --> 00:07:46,560
ski for example nasra can talk a lot

200
00:07:46,560 --> 00:07:48,479
more about this you know they've been

201
00:07:48,479 --> 00:07:50,960
working about this so that's something

202
00:07:50,960 --> 00:07:53,599
that's been missing before um

203
00:07:53,599 --> 00:07:56,240
before

204
00:07:57,280 --> 00:07:59,840
before some um

205
00:07:59,840 --> 00:08:02,560
recent uh what's the word for it high

206
00:08:02,560 --> 00:08:04,160
profile attacks

207
00:08:04,160 --> 00:08:06,000
people didn't really care about signing

208
00:08:06,000 --> 00:08:08,240
software right i think we can all agree

209
00:08:08,240 --> 00:08:09,520
to this

210
00:08:09,520 --> 00:08:11,520
um and you know with the biden

211
00:08:11,520 --> 00:08:13,360
administration this has changed

212
00:08:13,360 --> 00:08:15,599
obviously but we still don't have good

213
00:08:15,599 --> 00:08:17,520
standardized tools and i think tough

214
00:08:17,520 --> 00:08:19,520
actually belongs in one of these tools

215
00:08:19,520 --> 00:08:20,879
but um

216
00:08:20,879 --> 00:08:23,199
just wasn't too usable before but we're

217
00:08:23,199 --> 00:08:25,360
trying to change that sorry someone else

218
00:08:25,360 --> 00:08:27,360
should jump in here yeah i think a lot

219
00:08:27,360 --> 00:08:28,879
of the tough implementations were

220
00:08:28,879 --> 00:08:30,639
originally they came out of academia

221
00:08:30,639 --> 00:08:32,080
right so they were used as proofs of

222
00:08:32,080 --> 00:08:33,839
concept to show how these things can

223
00:08:33,839 --> 00:08:34,719
work

224
00:08:34,719 --> 00:08:36,880
um in code and i think we've done a lot

225
00:08:36,880 --> 00:08:38,399
of work in the past few years to kind of

226
00:08:38,399 --> 00:08:39,839
transition those from more kind of

227
00:08:39,839 --> 00:08:41,839
academic code bases

228
00:08:41,839 --> 00:08:43,120
to things that are a little bit easier

229
00:08:43,120 --> 00:08:44,959
to use

230
00:08:44,959 --> 00:08:46,399
in industry and practice and i know you

231
00:08:46,399 --> 00:08:47,680
see you can talk a lot about the work

232
00:08:47,680 --> 00:08:49,760
we've done specifically on python tuff

233
00:08:49,760 --> 00:08:51,680
our reference implementation

234
00:08:51,680 --> 00:08:53,440
to try and make it a lot more usable and

235
00:08:53,440 --> 00:08:57,279
just easy to plug into new systems

236
00:08:57,279 --> 00:08:58,800
yeah yeah and

237
00:08:58,800 --> 00:09:02,160
that's what we've been working on um

238
00:09:02,160 --> 00:09:04,240
in python especially but i think the

239
00:09:04,240 --> 00:09:06,640
same process is going on in go tough as

240
00:09:06,640 --> 00:09:07,440
well

241
00:09:07,440 --> 00:09:08,640
where

242
00:09:08,640 --> 00:09:10,720
we know we have something that that

243
00:09:10,720 --> 00:09:14,240
works for a specific use cases but

244
00:09:14,240 --> 00:09:16,480
it maybe wasn't um

245
00:09:16,480 --> 00:09:20,839
engineered with the with the sort of

246
00:09:20,839 --> 00:09:25,279
um a point of view that that maybe is

247
00:09:25,279 --> 00:09:27,920
is good for security solutions

248
00:09:27,920 --> 00:09:29,120
um

249
00:09:29,120 --> 00:09:31,680
but i will also say that

250
00:09:31,680 --> 00:09:34,000
while well it is true that this is like

251
00:09:34,000 --> 00:09:36,399
we're providing a framework or a set of

252
00:09:36,399 --> 00:09:37,600
tools

253
00:09:37,600 --> 00:09:39,040
it's

254
00:09:39,040 --> 00:09:40,880
i think we're also seeing the limits of

255
00:09:40,880 --> 00:09:45,120
that that um that when we're trying to

256
00:09:45,120 --> 00:09:46,560
look at the

257
00:09:46,560 --> 00:09:48,560
kind of generic problem that tough

258
00:09:48,560 --> 00:09:50,080
solves

259
00:09:50,080 --> 00:09:51,440
it's

260
00:09:51,440 --> 00:09:53,680
it's not quite easy enough especially

261
00:09:53,680 --> 00:09:56,959
for the for the repository case um

262
00:09:56,959 --> 00:09:59,519
to kind of for someone to just take that

263
00:09:59,519 --> 00:10:00,720
and implement

264
00:10:00,720 --> 00:10:03,440
um but if we talk about

265
00:10:03,440 --> 00:10:06,480
ease of use i think it's it's really

266
00:10:06,480 --> 00:10:08,560
useful to notice that

267
00:10:08,560 --> 00:10:10,720
what tough does for the client side is

268
00:10:10,720 --> 00:10:12,160
pretty magical

269
00:10:12,160 --> 00:10:14,000
and the fact that

270
00:10:14,000 --> 00:10:15,360
you get

271
00:10:15,360 --> 00:10:17,200
well you basically get

272
00:10:17,200 --> 00:10:20,160
no user experience because it just works

273
00:10:20,160 --> 00:10:21,839
and that is

274
00:10:21,839 --> 00:10:25,360
really something um and it you know it

275
00:10:25,360 --> 00:10:27,519
it does make it worth it to

276
00:10:27,519 --> 00:10:29,920
have to work quite a bit more on the on

277
00:10:29,920 --> 00:10:33,279
the repository side um

278
00:10:33,279 --> 00:10:35,200
yeah

279
00:10:35,200 --> 00:10:37,920
i don't know if there are

280
00:10:37,920 --> 00:10:39,839
a lot of differences in the the

281
00:10:39,839 --> 00:10:42,399
different implementations i guess we've

282
00:10:42,399 --> 00:10:45,360
all kind of um approached this in

283
00:10:45,360 --> 00:10:47,920
similar ways so it's

284
00:10:47,920 --> 00:10:49,120
maybe some

285
00:10:49,120 --> 00:10:51,440
fairly low level libraries that aren't

286
00:10:51,440 --> 00:10:52,480
like

287
00:10:52,480 --> 00:10:54,720
full solutions and then command line

288
00:10:54,720 --> 00:10:57,120
tools

289
00:10:57,120 --> 00:10:59,600
no but you see you actually raise a good

290
00:10:59,600 --> 00:11:02,000
point which is that tough isn't just

291
00:11:02,000 --> 00:11:04,640
this framework this tool that you use

292
00:11:04,640 --> 00:11:06,959
but you kind of need to know how to use

293
00:11:06,959 --> 00:11:09,200
it right

294
00:11:09,200 --> 00:11:11,760
for your own use case that's the problem

295
00:11:11,760 --> 00:11:13,360
really i mean it's a string and a

296
00:11:13,360 --> 00:11:14,880
weakness

297
00:11:14,880 --> 00:11:17,120
yep yeah yeah i think we've start we've

298
00:11:17,120 --> 00:11:18,560
seen that from the sig store side as

299
00:11:18,560 --> 00:11:20,240
well where like we really do approach it

300
00:11:20,240 --> 00:11:22,720
like a toolbox um which means that we do

301
00:11:22,720 --> 00:11:24,480
need to have some like context and

302
00:11:24,480 --> 00:11:27,040
understanding of how we're using it um

303
00:11:27,040 --> 00:11:29,279
like uh uc said like the client side is

304
00:11:29,279 --> 00:11:30,640
fairly easy you know it just kind of

305
00:11:30,640 --> 00:11:32,240
works out of the box but when you're

306
00:11:32,240 --> 00:11:34,399
looking at the repo management side or

307
00:11:34,399 --> 00:11:36,320
when you're looking at okay what do i

308
00:11:36,320 --> 00:11:38,720
actually want to protect with tough then

309
00:11:38,720 --> 00:11:40,720
you start thinking of the context and

310
00:11:40,720 --> 00:11:43,440
you know i want to protect an ecosystem

311
00:11:43,440 --> 00:11:45,200
of infrastructure like six store or i

312
00:11:45,200 --> 00:11:47,839
want to protect um you know developer

313
00:11:47,839 --> 00:11:49,920
packages so there's all these different

314
00:11:49,920 --> 00:11:51,839
sort of use cases that when you apply to

315
00:11:51,839 --> 00:11:53,920
tough you realize that your

316
00:11:53,920 --> 00:11:57,120
management and your repo workflows end

317
00:11:57,120 --> 00:11:58,399
up different

318
00:11:58,399 --> 00:11:59,760
and i think that's part of the challenge

319
00:11:59,760 --> 00:12:01,120
that we're seeing when we look at like

320
00:12:01,120 --> 00:12:03,279
adoptions and integrations is that you

321
00:12:03,279 --> 00:12:05,760
really do have to sort of specify your

322
00:12:05,760 --> 00:12:08,160
use of tough within your

323
00:12:08,160 --> 00:12:12,000
integration or adoption or ecosystem

324
00:12:12,000 --> 00:12:13,120
yeah i think that's one of the

325
00:12:13,120 --> 00:12:14,959
challenges right with with creating a

326
00:12:14,959 --> 00:12:16,240
tool like this that we want to be

327
00:12:16,240 --> 00:12:17,839
flexible enough that it can apply to

328
00:12:17,839 --> 00:12:19,200
different languages and different use

329
00:12:19,200 --> 00:12:21,279
cases and i know that there's some

330
00:12:21,279 --> 00:12:24,639
really unconventional success stories of

331
00:12:24,639 --> 00:12:26,560
tough in the wild right like things that

332
00:12:26,560 --> 00:12:28,800
we would never think of but on the other

333
00:12:28,800 --> 00:12:30,720
side of that curve it's it's always a

334
00:12:30,720 --> 00:12:32,880
question of how do we make it flexible

335
00:12:32,880 --> 00:12:35,680
enough but also prescriptive enough that

336
00:12:35,680 --> 00:12:39,680
it's it's easily applicable

337
00:12:39,680 --> 00:12:41,680
yeah speaking of success stories like i

338
00:12:41,680 --> 00:12:43,839
would love for like marina to kind of

339
00:12:43,839 --> 00:12:45,839
jump in with the octane story here um

340
00:12:45,839 --> 00:12:48,399
like that's a really cool story of um

341
00:12:48,399 --> 00:12:50,800
also seeing the whole feedback cycle of

342
00:12:50,800 --> 00:12:53,120
you know getting more taps and more

343
00:12:53,120 --> 00:12:54,959
enhancements into tough and having that

344
00:12:54,959 --> 00:12:57,440
life cycle complete

345
00:12:57,440 --> 00:13:00,160
yeah so obtain is the automotive variant

346
00:13:00,160 --> 00:13:02,160
of tough and it has its own name because

347
00:13:02,160 --> 00:13:04,480
um it kind of uses pieces of tough it

348
00:13:04,480 --> 00:13:06,079
has kind of a tough inside of it but it

349
00:13:06,079 --> 00:13:07,920
also has a lot of other pieces

350
00:13:07,920 --> 00:13:10,160
built on top of that in order to work

351
00:13:10,160 --> 00:13:12,480
like directly in the automotive space

352
00:13:12,480 --> 00:13:14,000
which has a lot of unique challenges

353
00:13:14,000 --> 00:13:16,399
having to do with very small computers

354
00:13:16,399 --> 00:13:18,320
in vehicles and also a whole network of

355
00:13:18,320 --> 00:13:20,320
computers that only have one internet

356
00:13:20,320 --> 00:13:22,079
connection with which to

357
00:13:22,079 --> 00:13:25,200
to um receive updates um

358
00:13:25,200 --> 00:13:27,200
and so um obtained we think was a really

359
00:13:27,200 --> 00:13:29,360
great project for the tough um

360
00:13:29,360 --> 00:13:31,680
specifications we learned a lot about

361
00:13:31,680 --> 00:13:32,959
um

362
00:13:32,959 --> 00:13:35,519
you know we we got taps three and four

363
00:13:35,519 --> 00:13:37,279
so we got like a bunch of new features

364
00:13:37,279 --> 00:13:39,279
from this work with obtain that are now

365
00:13:39,279 --> 00:13:41,279
merged back into the tough specification

366
00:13:41,279 --> 00:13:43,040
and are kind of part of that toolbox for

367
00:13:43,040 --> 00:13:44,320
other projects

368
00:13:44,320 --> 00:13:46,240
if they have um similar problems that

369
00:13:46,240 --> 00:13:46,959
they

370
00:13:46,959 --> 00:13:48,720
they'd like to address there

371
00:13:48,720 --> 00:13:51,279
and uptain has been very successful um

372
00:13:51,279 --> 00:13:53,120
it's been standardized i think under

373
00:13:53,120 --> 00:13:57,120
ieee isto

374
00:13:57,199 --> 00:13:59,120
and it's been you know we work a lot

375
00:13:59,120 --> 00:14:01,600
with the automotive community and we

376
00:14:01,600 --> 00:14:04,079
have integrations in various

377
00:14:04,079 --> 00:14:06,720
automobiles

378
00:14:06,720 --> 00:14:09,440
so that's been a very successful project

379
00:14:09,440 --> 00:14:11,760
um

380
00:14:11,839 --> 00:14:13,120
any other particular questions about

381
00:14:13,120 --> 00:14:14,800
that

382
00:14:14,800 --> 00:14:16,959
well i i think this demonstrates like

383
00:14:16,959 --> 00:14:19,120
the flexibility right we have everything

384
00:14:19,120 --> 00:14:22,399
from the obvious the the work that uh

385
00:14:22,399 --> 00:14:25,279
has happened on pi pi right um maybe we

386
00:14:25,279 --> 00:14:27,440
want to talk just a little bit about uh

387
00:14:27,440 --> 00:14:29,360
more about that python work as well

388
00:14:29,360 --> 00:14:30,720
after this but

389
00:14:30,720 --> 00:14:32,800
then just thinking of this inside of an

390
00:14:32,800 --> 00:14:35,120
automobile um i actually went to a

391
00:14:35,120 --> 00:14:37,120
presentation once where somebody was

392
00:14:37,120 --> 00:14:39,360
talking about running k3s inside of a

393
00:14:39,360 --> 00:14:41,920
car and it was you know this moment

394
00:14:41,920 --> 00:14:43,120
where i didn't know if i should be

395
00:14:43,120 --> 00:14:44,959
inspired or terrified

396
00:14:44,959 --> 00:14:45,920
um

397
00:14:45,920 --> 00:14:47,600
but knowing that there's something like

398
00:14:47,600 --> 00:14:49,519
tough that we could put in that supply

399
00:14:49,519 --> 00:14:51,680
chain makes me more inspired than

400
00:14:51,680 --> 00:14:53,120
terrified

401
00:14:53,120 --> 00:14:54,320
exactly it's so important that we're

402
00:14:54,320 --> 00:14:56,320
able to update the software in car in

403
00:14:56,320 --> 00:14:57,839
cars especially because they're so

404
00:14:57,839 --> 00:14:59,360
safety critical that if there's any

405
00:14:59,360 --> 00:15:01,279
kinds of bugs you want to fix those

406
00:15:01,279 --> 00:15:03,440
right away and securely so

407
00:15:03,440 --> 00:15:04,880
it's kind of it's an exciting project to

408
00:15:04,880 --> 00:15:07,439
get to work on

409
00:15:08,480 --> 00:15:11,199
so is there something that

410
00:15:11,199 --> 00:15:13,440
we could bring back from from octane or

411
00:15:13,440 --> 00:15:15,600
is that like the tweaks that they did is

412
00:15:15,600 --> 00:15:18,880
it um really specific to that use case

413
00:15:18,880 --> 00:15:19,760
where

414
00:15:19,760 --> 00:15:21,760
where you want the manufacturer to

415
00:15:21,760 --> 00:15:23,519
control everything

416
00:15:23,519 --> 00:15:25,040
yeah so i think one of the big

417
00:15:25,040 --> 00:15:26,959
differences between uptane and these

418
00:15:26,959 --> 00:15:29,519
community repository like pipi

419
00:15:29,519 --> 00:15:31,680
implementations is that everything is

420
00:15:31,680 --> 00:15:33,440
very much controlled by the automotive

421
00:15:33,440 --> 00:15:36,079
oems like the car makers they um they

422
00:15:36,079 --> 00:15:38,320
can they decide per vehicle actually

423
00:15:38,320 --> 00:15:40,079
they the vehicle basically asks which

424
00:15:40,079 --> 00:15:42,399
update should i install instead of in

425
00:15:42,399 --> 00:15:43,920
the typical software workflow where the

426
00:15:43,920 --> 00:15:46,240
computer says i want this package um

427
00:15:46,240 --> 00:15:47,920
it's a little bit more directed in

428
00:15:47,920 --> 00:15:48,880
uptane

429
00:15:48,880 --> 00:15:51,120
and it goes very top down i think one of

430
00:15:51,120 --> 00:15:53,440
the big pieces from the octane model

431
00:15:53,440 --> 00:15:55,279
that we can take back to tough is kind

432
00:15:55,279 --> 00:15:57,680
of improvements to compromise resilience

433
00:15:57,680 --> 00:15:59,680
um one of the big things that we did for

434
00:15:59,680 --> 00:16:03,440
optane was support multiple repositories

435
00:16:03,440 --> 00:16:05,680
so it allows updates i'm actually

436
00:16:05,680 --> 00:16:06,959
updating actually downloads metadata

437
00:16:06,959 --> 00:16:08,320
from two different independent

438
00:16:08,320 --> 00:16:10,720
repositories and then compares those to

439
00:16:10,720 --> 00:16:12,240
each other before actually installing

440
00:16:12,240 --> 00:16:13,759
the update

441
00:16:13,759 --> 00:16:17,360
and this has to do with ensuring that

442
00:16:17,360 --> 00:16:18,240
you can have that kind of

443
00:16:18,240 --> 00:16:20,560
customizability with online keys in one

444
00:16:20,560 --> 00:16:22,639
repository and also use offline keys for

445
00:16:22,639 --> 00:16:24,800
greater security in another but this is

446
00:16:24,800 --> 00:16:26,480
a pretty flexible mechanism that can be

447
00:16:26,480 --> 00:16:28,160
used for

448
00:16:28,160 --> 00:16:29,440
just downloading from different

449
00:16:29,440 --> 00:16:30,480
different packages from different

450
00:16:30,480 --> 00:16:32,399
repositories or just gaining that extra

451
00:16:32,399 --> 00:16:34,720
compromise resilience from

452
00:16:34,720 --> 00:16:36,800
multiple repository consensus on these

453
00:16:36,800 --> 00:16:39,360
different updates

454
00:16:39,360 --> 00:16:40,160
right

455
00:16:40,160 --> 00:16:42,560
if i could add to that marina i think in

456
00:16:42,560 --> 00:16:44,720
the future actually something like

457
00:16:44,720 --> 00:16:46,560
uptain is going to be important

458
00:16:46,560 --> 00:16:48,160
everywhere not just in the automotive

459
00:16:48,160 --> 00:16:51,839
context um here's what i mean

460
00:16:52,160 --> 00:16:54,800
if you think about it it's obtain what

461
00:16:54,800 --> 00:16:57,199
it tries to solve is try to make as

462
00:16:57,199 --> 00:16:59,600
secure as possible

463
00:16:59,600 --> 00:17:04,480
cloud package dependency resolution no

464
00:17:04,480 --> 00:17:06,640
right you have this robot sitting in the

465
00:17:06,640 --> 00:17:07,760
cloud

466
00:17:07,760 --> 00:17:09,679
being able to choose what software you

467
00:17:09,679 --> 00:17:11,760
get to install in your tesla or whatever

468
00:17:11,760 --> 00:17:14,959
you like right okay

469
00:17:14,959 --> 00:17:17,119
and do it safely it can't just make

470
00:17:17,119 --> 00:17:18,959
stuff you know it can't just make up

471
00:17:18,959 --> 00:17:22,000
firmer images on its own you can choose

472
00:17:22,000 --> 00:17:24,079
firmware images but these firmware

473
00:17:24,079 --> 00:17:26,000
images would basically develop by human

474
00:17:26,000 --> 00:17:28,240
beings and i think this is going to be a

475
00:17:28,240 --> 00:17:31,440
big problem in what we call a community

476
00:17:31,440 --> 00:17:35,280
repositories no uh marina

477
00:17:35,440 --> 00:17:37,919
yeah that makes that makes sense

478
00:17:37,919 --> 00:17:39,840
um i definitely think there are lessons

479
00:17:39,840 --> 00:17:41,200
from obtain that can that are more

480
00:17:41,200 --> 00:17:43,200
broadly applicable i think especially to

481
00:17:43,200 --> 00:17:45,280
the iot space but even just to yeah to

482
00:17:45,280 --> 00:17:46,960
community repositories

483
00:17:46,960 --> 00:17:48,960
yeah like jumping in on that whole like

484
00:17:48,960 --> 00:17:52,000
uh multi-repository support um that's

485
00:17:52,000 --> 00:17:53,760
like exactly kind of what we have been

486
00:17:53,760 --> 00:17:56,080
thinking with this the six star model so

487
00:17:56,080 --> 00:17:58,080
um like if you haven't kind of heard the

488
00:17:58,080 --> 00:18:01,039
six door like you know mission statement

489
00:18:01,039 --> 00:18:02,880
i suppose it's to to sort of be like the

490
00:18:02,880 --> 00:18:04,799
let's encrypt of software signing and

491
00:18:04,799 --> 00:18:06,960
make it easier for developers to like

492
00:18:06,960 --> 00:18:09,200
create signing keys and uh you know

493
00:18:09,200 --> 00:18:10,799
improve their security posture through

494
00:18:10,799 --> 00:18:12,880
that um so

495
00:18:12,880 --> 00:18:15,520
one thing that we currently have like i

496
00:18:15,520 --> 00:18:17,280
mentioned before is like a six store

497
00:18:17,280 --> 00:18:19,280
tough route that you know holds on to

498
00:18:19,280 --> 00:18:21,840
our six store public infrastructure

499
00:18:21,840 --> 00:18:24,799
components um but alongside that like we

500
00:18:24,799 --> 00:18:27,200
also want to make like extend that six

501
00:18:27,200 --> 00:18:29,520
store route to be able to endorse you

502
00:18:29,520 --> 00:18:32,480
know your own public um tough routes so

503
00:18:32,480 --> 00:18:34,160
let's say you want to go endorse like

504
00:18:34,160 --> 00:18:35,760
you know your enterprises recourse

505
00:18:35,760 --> 00:18:37,440
signing key or let's say you want to

506
00:18:37,440 --> 00:18:40,080
endorse some signing keys from like you

507
00:18:40,080 --> 00:18:44,160
know a large uh oss project um what you

508
00:18:44,160 --> 00:18:46,320
can do is you can start you know

509
00:18:46,320 --> 00:18:48,640
creating multiple repositories and have

510
00:18:48,640 --> 00:18:50,480
uh like clients be able to say okay i

511
00:18:50,480 --> 00:18:52,559
wanna pull from six door route here and

512
00:18:52,559 --> 00:18:54,720
i also wanna go reference um

513
00:18:54,720 --> 00:18:56,880
verification keys or other material in

514
00:18:56,880 --> 00:18:59,280
other repositories um so the six-four

515
00:18:59,280 --> 00:19:01,280
model of like you know we have a central

516
00:19:01,280 --> 00:19:02,960
repository but we also want to sort of

517
00:19:02,960 --> 00:19:05,520
distribute um signing capabilities to

518
00:19:05,520 --> 00:19:06,960
other people really falls into this

519
00:19:06,960 --> 00:19:10,720
whole multi-repository situation

520
00:19:10,720 --> 00:19:12,240
zig store sounds like one of those

521
00:19:12,240 --> 00:19:13,840
things that like really really helps

522
00:19:13,840 --> 00:19:15,840
people get started right which i think

523
00:19:15,840 --> 00:19:18,080
is one of the challenges here but uh

524
00:19:18,080 --> 00:19:21,520
before we kind of go on to a variety of

525
00:19:21,520 --> 00:19:24,240
challenges with implementation here what

526
00:19:24,240 --> 00:19:26,960
i'd like to hear maybe from each of you

527
00:19:26,960 --> 00:19:28,960
what do you think is is challenging

528
00:19:28,960 --> 00:19:30,720
adoption of these technologies because

529
00:19:30,720 --> 00:19:33,280
i've heard it's in cars it's in pi pi

530
00:19:33,280 --> 00:19:35,120
why do don't i just see this

531
00:19:35,120 --> 00:19:38,480
ubiquitously like npm uh for example if

532
00:19:38,480 --> 00:19:39,679
it's in pi pi it feels like it should be

533
00:19:39,679 --> 00:19:40,880
an npm

534
00:19:40,880 --> 00:19:43,039
not not to pick on npm or anything but

535
00:19:43,039 --> 00:19:46,160
uh why do i just not see this everywhere

536
00:19:46,160 --> 00:19:47,200
yeah

537
00:19:47,200 --> 00:19:49,440
that is a really good question and i

538
00:19:49,440 --> 00:19:51,120
think you know

539
00:19:51,120 --> 00:19:53,200
speaking about this this uh software

540
00:19:53,200 --> 00:19:56,559
repository is like npm i i probably have

541
00:19:56,559 --> 00:19:57,840
um

542
00:19:57,840 --> 00:20:00,080
the most experience with uh looking at

543
00:20:00,080 --> 00:20:02,960
those problems with with tough

544
00:20:02,960 --> 00:20:04,000
and

545
00:20:04,000 --> 00:20:07,840
i i think the core issue was that um we

546
00:20:07,840 --> 00:20:10,880
like the the tough community maybe

547
00:20:10,880 --> 00:20:13,440
underestimated the the implementation

548
00:20:13,440 --> 00:20:14,720
complexity

549
00:20:14,720 --> 00:20:17,840
of a repository you know much like azure

550
00:20:17,840 --> 00:20:18,799
has been

551
00:20:18,799 --> 00:20:20,640
talking about earlier

552
00:20:20,640 --> 00:20:21,440
um

553
00:20:21,440 --> 00:20:23,280
like just as an example

554
00:20:23,280 --> 00:20:24,799
like the

555
00:20:24,799 --> 00:20:28,720
the repository only version of um

556
00:20:28,720 --> 00:20:29,919
the python

557
00:20:29,919 --> 00:20:32,840
like pipi uh

558
00:20:32,840 --> 00:20:37,120
repository which is um like this is a

559
00:20:37,120 --> 00:20:39,760
system where we would have tough running

560
00:20:39,760 --> 00:20:42,640
on pipe ui where just the repository

561
00:20:42,640 --> 00:20:45,039
signs things on its own and developers

562
00:20:45,039 --> 00:20:46,799
don't have any kind of keys

563
00:20:46,799 --> 00:20:47,760
um

564
00:20:47,760 --> 00:20:50,240
just that proposal i think turns nine

565
00:20:50,240 --> 00:20:51,600
years

566
00:20:51,600 --> 00:20:53,280
this year

567
00:20:53,280 --> 00:20:54,400
so

568
00:20:54,400 --> 00:20:56,159
we've been looking at or people have

569
00:20:56,159 --> 00:20:57,760
been looking at this problem for nine

570
00:20:57,760 --> 00:20:59,760
years and it's still not running it's

571
00:20:59,760 --> 00:21:02,080
now pretty close there is a video i

572
00:21:02,080 --> 00:21:03,840
couldn't stop laughing at that one yeah

573
00:21:03,840 --> 00:21:05,600
it's so true

574
00:21:05,600 --> 00:21:06,559
yeah

575
00:21:06,559 --> 00:21:08,050
i think you started it

576
00:21:08,050 --> 00:21:11,280
[Laughter]

577
00:21:11,280 --> 00:21:12,159
um

578
00:21:12,159 --> 00:21:14,000
so so

579
00:21:14,000 --> 00:21:15,840
obviously we underestimated the

580
00:21:15,840 --> 00:21:19,039
complexity as a as a community and

581
00:21:19,039 --> 00:21:21,120
you know lately i've been looking at the

582
00:21:21,120 --> 00:21:23,120
the real holy grail there which would be

583
00:21:23,120 --> 00:21:25,360
the developer signing which would kind

584
00:21:25,360 --> 00:21:27,360
of give us the situation where we have

585
00:21:27,360 --> 00:21:28,320
this

586
00:21:28,320 --> 00:21:31,280
um protected path from the developers

587
00:21:31,280 --> 00:21:34,240
that even like a repository

588
00:21:34,240 --> 00:21:35,840
compromise wouldn't

589
00:21:35,840 --> 00:21:37,679
you know that wouldn't compromise users

590
00:21:37,679 --> 00:21:39,360
machines which would be

591
00:21:39,360 --> 00:21:40,559
quite something

592
00:21:40,559 --> 00:21:42,240
so i've been looking at that and what it

593
00:21:42,240 --> 00:21:45,600
would mean for those um

594
00:21:45,600 --> 00:21:47,440
repositories and

595
00:21:47,440 --> 00:21:50,640
it is a far more complex thing

596
00:21:50,640 --> 00:21:52,799
so i think we need to

597
00:21:52,799 --> 00:21:56,720
rethink our approach here um

598
00:21:56,960 --> 00:21:59,200
what you're really saying is that at a

599
00:21:59,200 --> 00:22:01,600
at any you know repository scale this

600
00:22:01,600 --> 00:22:03,679
really starts with like a threat model

601
00:22:03,679 --> 00:22:05,760
for the the workflow of the software

602
00:22:05,760 --> 00:22:08,320
itself like we've got to think like a to

603
00:22:08,320 --> 00:22:10,559
b to c before we start to put the

604
00:22:10,559 --> 00:22:13,120
technology in yeah exactly like the

605
00:22:13,120 --> 00:22:15,440
workflows are going to be

606
00:22:15,440 --> 00:22:17,440
specific to

607
00:22:17,440 --> 00:22:20,720
the use cases we can't you know we can't

608
00:22:20,720 --> 00:22:22,080
go

609
00:22:22,080 --> 00:22:24,320
well we've kind of tried that we've

610
00:22:24,320 --> 00:22:26,159
we've told them that this is the tough

611
00:22:26,159 --> 00:22:28,799
workflow and expected them to just

612
00:22:28,799 --> 00:22:30,159
implement it but

613
00:22:30,159 --> 00:22:33,120
that's not how it works um

614
00:22:33,120 --> 00:22:35,120
so yeah

615
00:22:35,120 --> 00:22:36,559
yeah i think you mentioned earlier chef

616
00:22:36,559 --> 00:22:38,080
really does it makes the client work

617
00:22:38,080 --> 00:22:39,760
flow like once it's implemented the

618
00:22:39,760 --> 00:22:41,600
client doesn't even see it right and so

619
00:22:41,600 --> 00:22:43,440
the flip side of that is that there's a

620
00:22:43,440 --> 00:22:44,480
lot of work that happens on the

621
00:22:44,480 --> 00:22:47,440
repository to make that happen and

622
00:22:47,440 --> 00:22:50,080
we the repository maintainers of these

623
00:22:50,080 --> 00:22:51,520
like pipi and others they're already

624
00:22:51,520 --> 00:22:53,280
very busy people and so it's tricky to

625
00:22:53,280 --> 00:22:54,880
figure out how to make this as simple as

626
00:22:54,880 --> 00:22:56,880
possible for them while still getting

627
00:22:56,880 --> 00:22:58,640
these the security properties of tough

628
00:22:58,640 --> 00:23:00,960
that that are really valuable so that's

629
00:23:00,960 --> 00:23:02,559
kind of that's what we've been

630
00:23:02,559 --> 00:23:04,640
trying to solve yeah i mean in addition

631
00:23:04,640 --> 00:23:07,200
the repositories really really do not

632
00:23:07,200 --> 00:23:09,120
want to experiment

633
00:23:09,120 --> 00:23:10,880
for good reasons i mean they're serving

634
00:23:10,880 --> 00:23:12,799
100 million packages per day or

635
00:23:12,799 --> 00:23:15,200
something they don't want you know new

636
00:23:15,200 --> 00:23:16,400
things to

637
00:23:16,400 --> 00:23:18,159
you know try something out they want

638
00:23:18,159 --> 00:23:20,480
something that's been proven to work

639
00:23:20,480 --> 00:23:22,960
and maybe we haven't quite quite offered

640
00:23:22,960 --> 00:23:24,159
that

641
00:23:24,159 --> 00:23:25,760
yeah it seems to be like the more

642
00:23:25,760 --> 00:23:27,919
complex like your repository management

643
00:23:27,919 --> 00:23:29,919
situation is like the exponentially

644
00:23:29,919 --> 00:23:32,960
harder the tough situation gets um with

645
00:23:32,960 --> 00:23:35,360
like our six-star case it's like it was

646
00:23:35,360 --> 00:23:37,200
fairly easy to kind of bootstrap a

647
00:23:37,200 --> 00:23:38,159
minimal

648
00:23:38,159 --> 00:23:40,880
uh tough roots uh

649
00:23:40,880 --> 00:23:42,799
key signing ceremony and really kick off

650
00:23:42,799 --> 00:23:45,279
our tough route but the the reason why

651
00:23:45,279 --> 00:23:47,200
is really because we have a very minimal

652
00:23:47,200 --> 00:23:49,679
tough route we're only fetching it like

653
00:23:49,679 --> 00:23:51,120
clients are only fetching a minimal

654
00:23:51,120 --> 00:23:52,559
number of targets

655
00:23:52,559 --> 00:23:54,880
and we only have really five or six

656
00:23:54,880 --> 00:23:57,360
signers involved in the whole process so

657
00:23:57,360 --> 00:23:59,039
we're looking at like a really nicely

658
00:23:59,039 --> 00:24:02,080
well scoped area but even then we had an

659
00:24:02,080 --> 00:24:04,320
outage maybe like two weeks ago and that

660
00:24:04,320 --> 00:24:06,559
that's very stressful because like if

661
00:24:06,559 --> 00:24:08,799
your tough you know system goes down

662
00:24:08,799 --> 00:24:11,120
then like you know your entire client

663
00:24:11,120 --> 00:24:13,120
workflow becomes everything

664
00:24:13,120 --> 00:24:15,440
yeah um and so

665
00:24:15,440 --> 00:24:17,039
like little problems like that end up

666
00:24:17,039 --> 00:24:18,799
happening in repo management things like

667
00:24:18,799 --> 00:24:20,480
race conditions started coming up like

668
00:24:20,480 --> 00:24:22,880
when you actually push your repository

669
00:24:22,880 --> 00:24:24,080
do you need to think about race

670
00:24:24,080 --> 00:24:25,520
conditions so

671
00:24:25,520 --> 00:24:26,480
um

672
00:24:26,480 --> 00:24:28,880
you know it it's turned out that like

673
00:24:28,880 --> 00:24:31,520
trying to expand the tough route in six

674
00:24:31,520 --> 00:24:33,840
store to cover things like you know

675
00:24:33,840 --> 00:24:35,840
multiple repositories and delegations

676
00:24:35,840 --> 00:24:37,919
and things like that that's

677
00:24:37,919 --> 00:24:40,480
becoming a more difficult problem

678
00:24:40,480 --> 00:24:42,880
because the repo management side is is

679
00:24:42,880 --> 00:24:44,640
fairly complex

680
00:24:44,640 --> 00:24:46,480
yeah i think that's a that's a good way

681
00:24:46,480 --> 00:24:48,320
to put it a lot of these issues are

682
00:24:48,320 --> 00:24:49,200
shared

683
00:24:49,200 --> 00:24:50,880
but they just become

684
00:24:50,880 --> 00:24:52,960
so much more pressing if you have a

685
00:24:52,960 --> 00:24:57,600
hundred thousand people signing things

686
00:24:58,320 --> 00:24:59,760
really interesting engineering problems

687
00:24:59,760 --> 00:25:01,360
right because i think as a community we

688
00:25:01,360 --> 00:25:03,039
can all agree that we need this at the

689
00:25:03,039 --> 00:25:05,039
repository level but it's more of a

690
00:25:05,039 --> 00:25:06,799
question of how do we get how do we get

691
00:25:06,799 --> 00:25:07,600
there

692
00:25:07,600 --> 00:25:10,400
um and it's it's about risk management

693
00:25:10,400 --> 00:25:11,919
to some degree not just security risk

694
00:25:11,919 --> 00:25:13,360
management but operational risk

695
00:25:13,360 --> 00:25:14,799
management so

696
00:25:14,799 --> 00:25:17,520
uh this will be a great story to tell in

697
00:25:17,520 --> 00:25:19,760
a couple of years i'm sure about how we

698
00:25:19,760 --> 00:25:21,520
made this map the way that we think

699
00:25:21,520 --> 00:25:25,840
about software um in these repositories

700
00:25:25,840 --> 00:25:27,919
so um just just kind of moving right

701
00:25:27,919 --> 00:25:30,320
along here um

702
00:25:30,320 --> 00:25:34,480
how how do you uh handle cves um between

703
00:25:34,480 --> 00:25:37,279
implementations or or like bug bounty

704
00:25:37,279 --> 00:25:40,080
type scenarios uh in the tough uh

705
00:25:40,080 --> 00:25:41,600
framework

706
00:25:41,600 --> 00:25:43,039
yeah this has been a really interesting

707
00:25:43,039 --> 00:25:45,120
problem because um the top project is

708
00:25:45,120 --> 00:25:46,320
made up of a couple of different

709
00:25:46,320 --> 00:25:48,000
components there's a specification and

710
00:25:48,000 --> 00:25:50,159
then various implementations in

711
00:25:50,159 --> 00:25:54,720
different languages um so far we have um

712
00:25:54,720 --> 00:25:56,799
not have any cves in the specification

713
00:25:56,799 --> 00:25:58,960
itself i imagine that follows a similar

714
00:25:58,960 --> 00:26:02,159
process but we have had cves in various

715
00:26:02,159 --> 00:26:04,320
implementations and most notably we've

716
00:26:04,320 --> 00:26:06,400
had a few in the python reference

717
00:26:06,400 --> 00:26:08,480
implementation which kind of by the name

718
00:26:08,480 --> 00:26:09,840
right it's the reference implementation

719
00:26:09,840 --> 00:26:11,120
and so a lot of the other

720
00:26:11,120 --> 00:26:13,200
implementations have like been inspired

721
00:26:13,200 --> 00:26:15,279
by this first implementation and so even

722
00:26:15,279 --> 00:26:17,279
if it's not a specification bug

723
00:26:17,279 --> 00:26:19,600
specifically it is a bug that has

724
00:26:19,600 --> 00:26:21,279
you know spidered its way through the

725
00:26:21,279 --> 00:26:22,480
ecosystem

726
00:26:22,480 --> 00:26:23,919
and so we wouldn't want to just really

727
00:26:23,919 --> 00:26:25,440
you know release a patch

728
00:26:25,440 --> 00:26:26,880
in one project without communicating

729
00:26:26,880 --> 00:26:29,360
properly with everybody else and so

730
00:26:29,360 --> 00:26:31,039
that's definitely been a

731
00:26:31,039 --> 00:26:32,880
a challenging thing to handle and just

732
00:26:32,880 --> 00:26:34,799
you know i have this like list of email

733
00:26:34,799 --> 00:26:36,240
addresses of like

734
00:26:36,240 --> 00:26:37,760
you know i think it's

735
00:26:37,760 --> 00:26:39,120
six or seven different open source

736
00:26:39,120 --> 00:26:41,279
projects that have to be communicated

737
00:26:41,279 --> 00:26:42,880
with before we actually

738
00:26:42,880 --> 00:26:44,400
release cvs just to make sure that we're

739
00:26:44,400 --> 00:26:46,400
all on the same page and nobody's

740
00:26:46,400 --> 00:26:47,440
um

741
00:26:47,440 --> 00:26:50,320
code can be exploited in the meantime

742
00:26:50,320 --> 00:26:52,880
i think i think usually though is it is

743
00:26:52,880 --> 00:26:54,960
it fair to say that the bugs have been

744
00:26:54,960 --> 00:26:57,440
fairly specific to implementations and

745
00:26:57,440 --> 00:26:59,760
not the framework in general yes that's

746
00:26:59,760 --> 00:27:01,600
definitely true um

747
00:27:01,600 --> 00:27:03,279
they they yeah they're invitation

748
00:27:03,279 --> 00:27:05,360
specific and usually it's not everyone

749
00:27:05,360 --> 00:27:06,720
that's affected but it's a couple

750
00:27:06,720 --> 00:27:08,000
implementations that made the same

751
00:27:08,000 --> 00:27:09,120
mistake

752
00:27:09,120 --> 00:27:10,559
which usually means we should clarify

753
00:27:10,559 --> 00:27:11,919
something which we have definitely done

754
00:27:11,919 --> 00:27:13,039
but it's not they're not technically

755
00:27:13,039 --> 00:27:15,039
specification bugs right

756
00:27:15,039 --> 00:27:17,760
so so maybe here's the lesson right

757
00:27:17,760 --> 00:27:20,159
which is that look security's hard

758
00:27:20,159 --> 00:27:22,559
enough to get it right so

759
00:27:22,559 --> 00:27:25,039
i don't wanna okay look let me let me

760
00:27:25,039 --> 00:27:26,159
just say it

761
00:27:26,159 --> 00:27:29,120
don't reinvent tough okay you could try

762
00:27:29,120 --> 00:27:32,240
to do it you're gonna mess it up

763
00:27:32,240 --> 00:27:34,799
because believe me we have okay

764
00:27:34,799 --> 00:27:36,000
so

765
00:27:36,000 --> 00:27:38,159
yeah

766
00:27:38,320 --> 00:27:40,480
yeah i heard i heard a couple of things

767
00:27:40,480 --> 00:27:42,320
there that i just want to kind of unpack

768
00:27:42,320 --> 00:27:44,080
a little bit i heard disclosure is

769
00:27:44,080 --> 00:27:45,520
really hard

770
00:27:45,520 --> 00:27:48,080
um like in in an open ecosystem like

771
00:27:48,080 --> 00:27:49,679
this and of course like patching is

772
00:27:49,679 --> 00:27:52,640
really hard an open ecosystem so i would

773
00:27:52,640 --> 00:27:54,320
just kind of ask the question to all of

774
00:27:54,320 --> 00:27:56,399
you like when you thought about this

775
00:27:56,399 --> 00:27:58,399
like the cbe process were tough or how

776
00:27:58,399 --> 00:28:00,159
you're going to handle issues like this

777
00:28:00,159 --> 00:28:01,840
do you take any learnings from anything

778
00:28:01,840 --> 00:28:04,000
like the the kubernetes project which

779
00:28:04,000 --> 00:28:05,520
which also like kind of has the exact

780
00:28:05,520 --> 00:28:06,720
same problem right when they get a

781
00:28:06,720 --> 00:28:09,120
critical vulnerability they have to kind

782
00:28:09,120 --> 00:28:12,320
of secretly work a patch in before they

783
00:28:12,320 --> 00:28:14,000
make the public release and there's all

784
00:28:14,000 --> 00:28:15,279
these stakeholders that need to be

785
00:28:15,279 --> 00:28:17,440
notified so what was your kind of

786
00:28:17,440 --> 00:28:20,240
process there

787
00:28:21,440 --> 00:28:23,360
yeah i think it's a pretty standard

788
00:28:23,360 --> 00:28:25,919
process based on the idea of we have um

789
00:28:25,919 --> 00:28:26,799
you know it's still an open source

790
00:28:26,799 --> 00:28:29,039
project but we have a temporary

791
00:28:29,039 --> 00:28:30,720
little closed section of it that we make

792
00:28:30,720 --> 00:28:33,120
to handle these vulnerabilities and

793
00:28:33,120 --> 00:28:35,279
invite in maintainers of any projects

794
00:28:35,279 --> 00:28:36,080
that

795
00:28:36,080 --> 00:28:39,440
um you know need to see it or you know

796
00:28:39,440 --> 00:28:42,000
are relevant for the for the disclosure

797
00:28:42,000 --> 00:28:43,039
um

798
00:28:43,039 --> 00:28:45,039
but obviously like drawing the line

799
00:28:45,039 --> 00:28:46,159
there

800
00:28:46,159 --> 00:28:48,320
like who needs to see it is always a

801
00:28:48,320 --> 00:28:50,240
tricky question

802
00:28:50,240 --> 00:28:53,039
so i know marina has done in in previous

803
00:28:53,039 --> 00:28:54,960
bugs you've done

804
00:28:54,960 --> 00:28:57,120
good work on trying to figure out like

805
00:28:57,120 --> 00:28:59,520
which projects we really need to

806
00:28:59,520 --> 00:29:03,120
get in the same room basically

807
00:29:03,120 --> 00:29:04,960
yeah i think one thing that we've uh

808
00:29:04,960 --> 00:29:06,880
started to also realize is the

809
00:29:06,880 --> 00:29:09,600
importance of like cross compatibility

810
00:29:09,600 --> 00:29:12,080
and like interoperability um like that's

811
00:29:12,080 --> 00:29:14,000
one learning i think as we see like more

812
00:29:14,000 --> 00:29:16,720
adoptions the really nice upshot of like

813
00:29:16,720 --> 00:29:18,399
having people use things is that like

814
00:29:18,399 --> 00:29:20,559
you realize you need more robust and

815
00:29:20,559 --> 00:29:21,679
hardened

816
00:29:21,679 --> 00:29:22,480
like

817
00:29:22,480 --> 00:29:25,039
procedures in your underlying libraries

818
00:29:25,039 --> 00:29:28,480
um and so uh we've seen like proposals

819
00:29:28,480 --> 00:29:30,799
now to like think about uh

820
00:29:30,799 --> 00:29:32,559
interoperability and and that's also

821
00:29:32,559 --> 00:29:33,919
where a lot of the bugs have been coming

822
00:29:33,919 --> 00:29:35,919
from in some of the implementation so

823
00:29:35,919 --> 00:29:37,679
especially like from my side um six

824
00:29:37,679 --> 00:29:40,559
store is like go based so we use a go

825
00:29:40,559 --> 00:29:43,440
top implementation um that's on the

826
00:29:43,440 --> 00:29:45,600
update frameworks um organization on

827
00:29:45,600 --> 00:29:47,919
github and we've realized that there's

828
00:29:47,919 --> 00:29:48,880
um

829
00:29:48,880 --> 00:29:50,799
interoperability bugs between like rust

830
00:29:50,799 --> 00:29:52,640
clients and python clients which is like

831
00:29:52,640 --> 00:29:55,039
especially pertinent in a global

832
00:29:55,039 --> 00:29:57,919
ecosystem like six store um so we've

833
00:29:57,919 --> 00:29:59,520
realized that like yes we kind of need

834
00:29:59,520 --> 00:30:01,360
to start investing some effort into

835
00:30:01,360 --> 00:30:02,240
making sure that all these

836
00:30:02,240 --> 00:30:04,399
implementations are not only like bug

837
00:30:04,399 --> 00:30:07,840
free but also like on the same page um

838
00:30:07,840 --> 00:30:10,640
which would help with uh things like you

839
00:30:10,640 --> 00:30:13,520
know cves in reference implementations

840
00:30:13,520 --> 00:30:16,640
trickling down um so that that's one

841
00:30:16,640 --> 00:30:18,159
thing that like i think one learning in

842
00:30:18,159 --> 00:30:19,520
the past like year so that we've

843
00:30:19,520 --> 00:30:20,960
realized that this really needs to be

844
00:30:20,960 --> 00:30:22,960
like a p1p0

845
00:30:22,960 --> 00:30:24,880
yeah i think um

846
00:30:24,880 --> 00:30:27,039
you might be like the first

847
00:30:27,039 --> 00:30:29,120
first implementation running into actual

848
00:30:29,120 --> 00:30:31,919
problems with this so far possibly

849
00:30:31,919 --> 00:30:33,279
everyone's been

850
00:30:33,279 --> 00:30:35,679
kind of working on a language specific

851
00:30:35,679 --> 00:30:38,080
thing and maybe even thinking that it's

852
00:30:38,080 --> 00:30:39,760
not important like this is just an

853
00:30:39,760 --> 00:30:42,159
implementation for you know pipey eyes

854
00:30:42,159 --> 00:30:43,760
so obviously

855
00:30:43,760 --> 00:30:45,200
everyone's running the same client

856
00:30:45,200 --> 00:30:47,039
that's implemented in python and that's

857
00:30:47,039 --> 00:30:48,000
it

858
00:30:48,000 --> 00:30:50,640
but you've shown that of course it's not

859
00:30:50,640 --> 00:30:51,840
true

860
00:30:51,840 --> 00:30:53,360
yeah that's a really good point like a

861
00:30:53,360 --> 00:30:55,120
lot of clients are sort of siloed into

862
00:30:55,120 --> 00:30:57,279
their own ecosystem so like really

863
00:30:57,279 --> 00:30:59,200
interoperability really maybe hasn't

864
00:30:59,200 --> 00:31:00,799
been relevant but like as we've seen

865
00:31:00,799 --> 00:31:02,799
like in this you know people wanting to

866
00:31:02,799 --> 00:31:04,399
adopt six star tools in a variety of

867
00:31:04,399 --> 00:31:06,159
different ecosystems means that six

868
00:31:06,159 --> 00:31:08,559
stores tools which means tufts tools

869
00:31:08,559 --> 00:31:11,039
have to be interoperable um so it's kind

870
00:31:11,039 --> 00:31:12,559
of this trickle down

871
00:31:12,559 --> 00:31:14,080
um

872
00:31:14,080 --> 00:31:15,600
requirement

873
00:31:15,600 --> 00:31:16,480
i think it's

874
00:31:16,480 --> 00:31:18,960
obviously it's go ahead

875
00:31:18,960 --> 00:31:20,399
oh i was just going to say i think it's

876
00:31:20,399 --> 00:31:21,919
very cool that you're thinking about

877
00:31:21,919 --> 00:31:24,720
interoperability at the outset right and

878
00:31:24,720 --> 00:31:27,039
i think that that is a great highlight

879
00:31:27,039 --> 00:31:29,440
for just how far we've come as an

880
00:31:29,440 --> 00:31:30,480
industry

881
00:31:30,480 --> 00:31:32,640
that we're not kind of like backing our

882
00:31:32,640 --> 00:31:35,360
way into interoperability it's like a

883
00:31:35,360 --> 00:31:38,240
design tenant at the outset

884
00:31:38,240 --> 00:31:39,679
and and that's very cool and i don't

885
00:31:39,679 --> 00:31:43,840
know that we see that 100 of the time

886
00:31:44,080 --> 00:31:45,760
yeah it's an especially tough problem

887
00:31:45,760 --> 00:31:47,840
just because of uh how many people need

888
00:31:47,840 --> 00:31:49,519
to be on the same page with these sorts

889
00:31:49,519 --> 00:31:51,120
of things like with uh marina like

890
00:31:51,120 --> 00:31:52,880
coordinating bug disclosures it's like

891
00:31:52,880 --> 00:31:54,720
trying to get all the projects

892
00:31:54,720 --> 00:31:56,640
especially open source projects like in

893
00:31:56,640 --> 00:31:59,519
the in the same like you know synced up

894
00:31:59,519 --> 00:32:00,399
uh

895
00:32:00,399 --> 00:32:02,640
version of things is very difficult um i

896
00:32:02,640 --> 00:32:06,240
think we all know that from experience

897
00:32:08,399 --> 00:32:10,240
i uh i'll just pause here and just

898
00:32:10,240 --> 00:32:11,919
acknowledge that you said it was a tough

899
00:32:11,919 --> 00:32:12,880
problem

900
00:32:12,880 --> 00:32:15,120
i know i know i was just gonna point it

901
00:32:15,120 --> 00:32:17,840
out too like it's brilliant

902
00:32:17,840 --> 00:32:18,720
i

903
00:32:18,720 --> 00:32:20,960
make this joke all the time in your in

904
00:32:20,960 --> 00:32:23,840
your sync meetings

905
00:32:24,080 --> 00:32:26,320
yeah so i think the upshots here is that

906
00:32:26,320 --> 00:32:28,080
there there really is like a lot of

907
00:32:28,080 --> 00:32:30,000
continuous improvement in the project

908
00:32:30,000 --> 00:32:31,360
and really kind of incorporating

909
00:32:31,360 --> 00:32:33,039
learnings and trying to

910
00:32:33,039 --> 00:32:34,960
to engineer ahead

911
00:32:34,960 --> 00:32:36,320
of of the problems that you're

912
00:32:36,320 --> 00:32:38,640
anticipating which is it's a massive

913
00:32:38,640 --> 00:32:39,919
change in the way that we think about

914
00:32:39,919 --> 00:32:42,480
and build software you know as a as an

915
00:32:42,480 --> 00:32:45,120
industry

916
00:32:45,440 --> 00:32:48,960
so what are if if if i could add to that

917
00:32:48,960 --> 00:32:50,399
um andrew

918
00:32:50,399 --> 00:32:53,120
i think i think the genius behind a

919
00:32:53,120 --> 00:32:55,039
project like six store

920
00:32:55,039 --> 00:32:57,120
is to try to make this accessible to

921
00:32:57,120 --> 00:32:59,440
everybody

922
00:32:59,440 --> 00:33:01,760
previously before this you really needed

923
00:33:01,760 --> 00:33:04,080
to um

924
00:33:04,080 --> 00:33:06,320
now you can use stuff in a way you don't

925
00:33:06,320 --> 00:33:07,919
even really need to understand how it

926
00:33:07,919 --> 00:33:09,600
works

927
00:33:09,600 --> 00:33:11,679
right someone like kubernetes can come

928
00:33:11,679 --> 00:33:14,240
along and use the keys and

929
00:33:14,240 --> 00:33:16,159
don't worry about all that stuff behind

930
00:33:16,159 --> 00:33:18,399
the scenes right thanks to um all this

931
00:33:18,399 --> 00:33:21,440
great work by by asura and marina and uc

932
00:33:21,440 --> 00:33:24,000
and friends and so on but before this

933
00:33:24,000 --> 00:33:25,760
you really needed to do a lot of the

934
00:33:25,760 --> 00:33:29,039
work on your own and that's i think is

935
00:33:29,039 --> 00:33:31,200
what's the word for it

936
00:33:31,200 --> 00:33:34,480
a bit of a bit of a

937
00:33:35,120 --> 00:33:37,440
feeling of the project right we could

938
00:33:37,440 --> 00:33:40,240
have done this better

939
00:33:40,240 --> 00:33:41,679
yeah i think we're starting to see as

940
00:33:41,679 --> 00:33:43,919
well that like um the more adoptions we

941
00:33:43,919 --> 00:33:46,080
have the more you know we

942
00:33:46,080 --> 00:33:48,399
by force have to improve those those

943
00:33:48,399 --> 00:33:50,960
like you know apis and uh

944
00:33:50,960 --> 00:33:52,640
command line tools that we're exporting

945
00:33:52,640 --> 00:33:54,960
so i think i think one really nice thing

946
00:33:54,960 --> 00:33:57,679
is that uh especially the more use cases

947
00:33:57,679 --> 00:33:59,039
you have the more you're kind of

948
00:33:59,039 --> 00:34:01,200
informed on like what the best and most

949
00:34:01,200 --> 00:34:04,720
scalable um solutions are uh

950
00:34:04,720 --> 00:34:06,559
and yeah it's it's really interesting to

951
00:34:06,559 --> 00:34:08,159
sort of see the evolvement of projects

952
00:34:08,159 --> 00:34:10,239
even in like the past year um with

953
00:34:10,239 --> 00:34:12,879
python top and go tough and rust clients

954
00:34:12,879 --> 00:34:15,119
like they're all really improving the

955
00:34:15,119 --> 00:34:17,918
more usage we have

956
00:34:17,918 --> 00:34:19,199
yeah great

957
00:34:19,199 --> 00:34:21,440
so what's uh what's next for the project

958
00:34:21,440 --> 00:34:23,760
like what's the the number one thing

959
00:34:23,760 --> 00:34:25,839
that you're all focused on right now

960
00:34:25,839 --> 00:34:29,040
that's unsolved

961
00:34:29,359 --> 00:34:30,639
i don't know if we're

962
00:34:30,639 --> 00:34:33,119
all focused on it but i think

963
00:34:33,119 --> 00:34:34,719
for me personally

964
00:34:34,719 --> 00:34:36,480
it's definitely the

965
00:34:36,480 --> 00:34:38,639
the repository side that we've already

966
00:34:38,639 --> 00:34:40,960
you know touched on several times that

967
00:34:40,960 --> 00:34:43,679
implementing a specific repository is

968
00:34:43,679 --> 00:34:46,480
just way too complex there is a like a

969
00:34:46,480 --> 00:34:48,960
like a level missing we've got a good

970
00:34:48,960 --> 00:34:50,719
good base and in the tough

971
00:34:50,719 --> 00:34:53,199
implementation and then we've got the

972
00:34:53,199 --> 00:34:55,599
the user project somewhere high above

973
00:34:55,599 --> 00:34:58,240
and there's just things missing here in

974
00:34:58,240 --> 00:34:59,839
between

975
00:34:59,839 --> 00:35:01,040
um

976
00:35:01,040 --> 00:35:03,599
that's that's definitely something that

977
00:35:03,599 --> 00:35:05,040
where

978
00:35:05,040 --> 00:35:06,640
i kind of feel that

979
00:35:06,640 --> 00:35:08,880
like in the tough specification the

980
00:35:08,880 --> 00:35:11,680
client workflow is quite well defined

981
00:35:11,680 --> 00:35:13,359
and it's it's easy to

982
00:35:13,359 --> 00:35:16,079
read and kind of grasp what it does and

983
00:35:16,079 --> 00:35:18,880
we kind of need good repository

984
00:35:18,880 --> 00:35:21,359
workflows for

985
00:35:21,359 --> 00:35:23,359
you know in the same way you know

986
00:35:23,359 --> 00:35:25,839
described and this is going to happen in

987
00:35:25,839 --> 00:35:27,839
this situation

988
00:35:27,839 --> 00:35:28,880
um

989
00:35:28,880 --> 00:35:31,440
but the problem there is that these

990
00:35:31,440 --> 00:35:33,599
different repository types that we've

991
00:35:33,599 --> 00:35:35,280
been talking about they they have

992
00:35:35,280 --> 00:35:37,599
different workflows it's it's very clear

993
00:35:37,599 --> 00:35:39,280
and different needs

994
00:35:39,280 --> 00:35:41,200
and i'm sure that's the reason reason

995
00:35:41,200 --> 00:35:44,000
why why the specification doesn't really

996
00:35:44,000 --> 00:35:46,640
talk about any of that stuff

997
00:35:46,640 --> 00:35:48,160
so

998
00:35:48,160 --> 00:35:49,680
sorry go ahead yeah

999
00:35:49,680 --> 00:35:52,320
yeah just that that's what we need a

1000
00:35:52,320 --> 00:35:54,480
good solution for or

1001
00:35:54,480 --> 00:35:56,400
more likely we need multiple different

1002
00:35:56,400 --> 00:36:00,400
solutions for these different use cases

1003
00:36:03,040 --> 00:36:04,720
you were saying yeah

1004
00:36:04,720 --> 00:36:06,400
sorry it's just somewhat similar i um i

1005
00:36:06,400 --> 00:36:07,760
think what i've been really focusing on

1006
00:36:07,760 --> 00:36:09,359
is figuring out from these conversations

1007
00:36:09,359 --> 00:36:10,720
with the doctors and with different

1008
00:36:10,720 --> 00:36:12,400
implementations

1009
00:36:12,400 --> 00:36:13,839
which of these problems are new features

1010
00:36:13,839 --> 00:36:15,119
that we should be adding to tuff and

1011
00:36:15,119 --> 00:36:16,640
which of these new features should be

1012
00:36:16,640 --> 00:36:18,720
prioritizing to really help people

1013
00:36:18,720 --> 00:36:22,240
make this process easier and and

1014
00:36:22,240 --> 00:36:24,480
make that move along

1015
00:36:24,480 --> 00:36:26,079
and then coming from my side too that

1016
00:36:26,079 --> 00:36:28,000
repo management is is again the biggest

1017
00:36:28,000 --> 00:36:30,720
key here um so we're trying to get

1018
00:36:30,720 --> 00:36:32,400
basically like smaller projects and

1019
00:36:32,400 --> 00:36:35,440
developers more interested and able to

1020
00:36:35,440 --> 00:36:38,720
create their own uh tough

1021
00:36:38,720 --> 00:36:40,880
um repository so again this comes down

1022
00:36:40,880 --> 00:36:42,560
to how do we give them the tools and

1023
00:36:42,560 --> 00:36:45,040
like package them the sig store way um

1024
00:36:45,040 --> 00:36:46,880
for them to be able to do some of this

1025
00:36:46,880 --> 00:36:49,119
um and so like i'm in particular kind of

1026
00:36:49,119 --> 00:36:52,000
looking at uh ways to leverage github

1027
00:36:52,000 --> 00:36:54,720
workflows um since most oss developers

1028
00:36:54,720 --> 00:36:57,680
are probably familiar with github um and

1029
00:36:57,680 --> 00:36:59,599
i know joshua lock as well has been

1030
00:36:59,599 --> 00:37:01,359
looking at that sort of thing of course

1031
00:37:01,359 --> 00:37:03,760
repo management on github workflows um

1032
00:37:03,760 --> 00:37:06,079
so i think honestly that that's like the

1033
00:37:06,079 --> 00:37:08,560
the next easy step to do um to get

1034
00:37:08,560 --> 00:37:10,720
developers like you know more quickly on

1035
00:37:10,720 --> 00:37:13,279
board with that

1036
00:37:13,440 --> 00:37:16,640
yeah so so i know i know what my next

1037
00:37:16,640 --> 00:37:20,160
obsession in life is right it's um look

1038
00:37:20,160 --> 00:37:21,200
um

1039
00:37:21,200 --> 00:37:23,839
so i really like this new open ssf

1040
00:37:23,839 --> 00:37:26,480
project it's called oh i forget what

1041
00:37:26,480 --> 00:37:28,480
it's called exactly something like

1042
00:37:28,480 --> 00:37:31,680
protecting the um you know

1043
00:37:31,680 --> 00:37:34,800
open source software imposters okay

1044
00:37:34,800 --> 00:37:37,760
marina and i like to call it um

1045
00:37:37,760 --> 00:37:40,000
community repositories so

1046
00:37:40,000 --> 00:37:42,320
my mission in life is to see something

1047
00:37:42,320 --> 00:37:45,119
like pipey eyes sometimes nbm

1048
00:37:45,119 --> 00:37:48,160
github ruby gems you name it protect it

1049
00:37:48,160 --> 00:37:49,280
in the dark

1050
00:37:49,280 --> 00:37:51,920
invisibly and you don't even know it

1051
00:37:51,920 --> 00:37:54,560
right and we've had ideas

1052
00:37:54,560 --> 00:37:56,560
we know how uh securing software

1053
00:37:56,560 --> 00:37:58,480
postures okay thanks marina yeah exactly

1054
00:37:58,480 --> 00:38:01,119
that's what so so

1055
00:38:01,119 --> 00:38:03,359
that's my mission in life is to try to

1056
00:38:03,359 --> 00:38:05,440
help this project coming along they're

1057
00:38:05,440 --> 00:38:07,680
using excellent technologies like full

1058
00:38:07,680 --> 00:38:09,839
gear okay so here's what i want to see

1059
00:38:09,839 --> 00:38:11,760
in the future right okay

1060
00:38:11,760 --> 00:38:12,560
is

1061
00:38:12,560 --> 00:38:15,200
developers open source developers using

1062
00:38:15,200 --> 00:38:18,400
throw away uh full geo keys

1063
00:38:18,400 --> 00:38:19,599
which is a

1064
00:38:19,599 --> 00:38:22,000
this technology that you have in six

1065
00:38:22,000 --> 00:38:23,359
store

1066
00:38:23,359 --> 00:38:25,280
and you use stuff

1067
00:38:25,280 --> 00:38:28,400
to securely distribute that it is you

1068
00:38:28,400 --> 00:38:30,800
who's supposed to be using this key

1069
00:38:30,800 --> 00:38:32,720
right now we don't quite have the

1070
00:38:32,720 --> 00:38:35,119
technology just yet so we're not living

1071
00:38:35,119 --> 00:38:37,680
in a world yet where we can download oh

1072
00:38:37,680 --> 00:38:39,920
you know pip install django for example

1073
00:38:39,920 --> 00:38:42,480
and get all the dependencies securely

1074
00:38:42,480 --> 00:38:45,200
we just don't live in that world yet um

1075
00:38:45,200 --> 00:38:46,640
i would

1076
00:38:46,640 --> 00:38:48,640
like to get us to a stage you know

1077
00:38:48,640 --> 00:38:51,200
everyone here in the room of course um

1078
00:38:51,200 --> 00:38:53,680
get to a world where we use stuff to

1079
00:38:53,680 --> 00:38:55,599
securely

1080
00:38:55,599 --> 00:38:57,599
get your dependencies

1081
00:38:57,599 --> 00:38:59,680
the latest version of them

1082
00:38:59,680 --> 00:39:02,320
make sure you've not been mixed them

1083
00:39:02,320 --> 00:39:04,800
it's a particular attack that i don't

1084
00:39:04,800 --> 00:39:06,800
really want to go into right now but

1085
00:39:06,800 --> 00:39:09,040
also more importantly how do you know

1086
00:39:09,040 --> 00:39:10,480
that you're the one who's supposed to

1087
00:39:10,480 --> 00:39:12,480
sign for this project

1088
00:39:12,480 --> 00:39:14,320
how do i know that you're the django

1089
00:39:14,320 --> 00:39:15,760
developer

1090
00:39:15,760 --> 00:39:17,680
right this is a big problem that the

1091
00:39:17,680 --> 00:39:19,680
world is not solving right now

1092
00:39:19,680 --> 00:39:21,839
we can we can we can sign things like uc

1093
00:39:21,839 --> 00:39:22,800
is saying

1094
00:39:22,800 --> 00:39:24,720
just because it's a signature why should

1095
00:39:24,720 --> 00:39:26,160
i trust you

1096
00:39:26,160 --> 00:39:27,599
so

1097
00:39:27,599 --> 00:39:30,880
so we are just about out of time uh for

1098
00:39:30,880 --> 00:39:32,960
today's panel um but i just want to make

1099
00:39:32,960 --> 00:39:35,440
sure and and recap you know

1100
00:39:35,440 --> 00:39:37,920
tough is a it's a toolbox and a

1101
00:39:37,920 --> 00:39:40,640
framework right and i put the url for

1102
00:39:40,640 --> 00:39:43,200
the tough project on screen

1103
00:39:43,200 --> 00:39:45,760
but i know that uh you all have a little

1104
00:39:45,760 --> 00:39:47,920
bit more advice on on how folks might

1105
00:39:47,920 --> 00:39:50,320
get involved with these projects

1106
00:39:50,320 --> 00:39:52,560
um we can throw some of those urls up on

1107
00:39:52,560 --> 00:39:54,240
screen as well if you have like just a

1108
00:39:54,240 --> 00:39:56,880
couple of pieces that you want to

1109
00:39:56,880 --> 00:39:58,560
recommend for for kind of getting

1110
00:39:58,560 --> 00:40:01,560
started

