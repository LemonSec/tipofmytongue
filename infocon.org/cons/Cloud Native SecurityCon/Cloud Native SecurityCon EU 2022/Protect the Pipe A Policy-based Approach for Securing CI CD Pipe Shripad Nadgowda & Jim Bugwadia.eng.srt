1
00:00:00,240 --> 00:00:02,800
hey everyone welcome back hopefully you

2
00:00:02,800 --> 00:00:04,960
are nice and fed and hopefully warmer it

3
00:00:04,960 --> 00:00:07,279
feels a little less cold in here now

4
00:00:07,279 --> 00:00:10,000
so yeah thanks for coming back so next

5
00:00:10,000 --> 00:00:12,000
we're going to be talking about securing

6
00:00:12,000 --> 00:00:13,120
cid

7
00:00:13,120 --> 00:00:16,239
ci cd pipelines we have stray pod and

8
00:00:16,239 --> 00:00:18,000
gym over here so they're going to take

9
00:00:18,000 --> 00:00:20,320
it off

10
00:00:23,680 --> 00:00:26,880
yeah hello everyone

11
00:00:27,279 --> 00:00:29,199
and welcome to this talk

12
00:00:29,199 --> 00:00:30,800
and yes we say we are going to talk

13
00:00:30,800 --> 00:00:32,719
about protect the pipe but it's a policy

14
00:00:32,719 --> 00:00:34,960
based approach for securing ci cd

15
00:00:34,960 --> 00:00:37,440
pipeline

16
00:00:38,559 --> 00:00:39,440
uh

17
00:00:39,440 --> 00:00:40,879
just to introduce ourselves my name is

18
00:00:40,879 --> 00:00:42,399
sripad i'm a senior technical staff

19
00:00:42,399 --> 00:00:44,800
member at ibm research i'm currently

20
00:00:44,800 --> 00:00:46,719
reading some innovations around supply

21
00:00:46,719 --> 00:00:48,000
chain security

22
00:00:48,000 --> 00:00:50,320
and a member of tech security and supply

23
00:00:50,320 --> 00:00:52,879
chain security working group

24
00:00:52,879 --> 00:00:54,640
hey everyone i'm jim beguardia

25
00:00:54,640 --> 00:00:57,440
co-founder at nermata also maintainer of

26
00:00:57,440 --> 00:00:59,920
kiverno and do other things around the

27
00:00:59,920 --> 00:01:02,960
kubernetes projects

28
00:01:03,039 --> 00:01:04,080
yeah so

29
00:01:04,080 --> 00:01:05,680
why we are talking about circuit right

30
00:01:05,680 --> 00:01:07,439
so if we revisit our software supply

31
00:01:07,439 --> 00:01:09,600
chain so it starts with the developer

32
00:01:09,600 --> 00:01:12,080
writing code pushing it to some source

33
00:01:12,080 --> 00:01:14,799
controller systems like github gitlab

34
00:01:14,799 --> 00:01:16,799
which then eventually triggers our ci cd

35
00:01:16,799 --> 00:01:18,159
right and

36
00:01:18,159 --> 00:01:20,640
cf pipeline specifically we run multiple

37
00:01:20,640 --> 00:01:23,200
uh devsecops checks we run

38
00:01:23,200 --> 00:01:25,119
we have git client we run some static

39
00:01:25,119 --> 00:01:27,840
scan we generate as bomb we build our

40
00:01:27,840 --> 00:01:29,439
artifact

41
00:01:29,439 --> 00:01:31,439
and finally we push them right so in

42
00:01:31,439 --> 00:01:32,320
this

43
00:01:32,320 --> 00:01:33,119
uh

44
00:01:33,119 --> 00:01:34,960
we push and deploy our application on

45
00:01:34,960 --> 00:01:36,079
the runtime

46
00:01:36,079 --> 00:01:38,159
now in this whole spectrum right so if

47
00:01:38,159 --> 00:01:40,079
we look into ci cicd this is very

48
00:01:40,079 --> 00:01:42,399
critical section right

49
00:01:42,399 --> 00:01:43,920
why it is critical

50
00:01:43,920 --> 00:01:46,079
is because there is a growing open

51
00:01:46,079 --> 00:01:47,920
source ecosystem around

52
00:01:47,920 --> 00:01:49,920
ci cd pipeline where

53
00:01:49,920 --> 00:01:52,640
multiple ready-to-use c

54
00:01:52,640 --> 00:01:54,240
tasks are getting basically being

55
00:01:54,240 --> 00:01:56,479
available on into marketplace like

56
00:01:56,479 --> 00:01:58,320
tecton catalog or

57
00:01:58,320 --> 00:02:00,240
github action marketplace

58
00:02:00,240 --> 00:02:03,040
and just like we are securing our opens

59
00:02:03,040 --> 00:02:05,280
uh our open source dependencies for

60
00:02:05,280 --> 00:02:07,280
applications we need to pay attention to

61
00:02:07,280 --> 00:02:08,878
basically securing

62
00:02:08,878 --> 00:02:10,239
these uh

63
00:02:10,239 --> 00:02:12,640
ci cd open source element as well

64
00:02:12,640 --> 00:02:15,440
right and the other aspect is our ci cd

65
00:02:15,440 --> 00:02:17,360
pipelines they have access to a lot of

66
00:02:17,360 --> 00:02:19,840
uh critical user credentials right for

67
00:02:19,840 --> 00:02:21,599
instance we have github client which

68
00:02:21,599 --> 00:02:23,760
need access to our

69
00:02:23,760 --> 00:02:24,959
git

70
00:02:24,959 --> 00:02:27,040
git or token so it can basically push

71
00:02:27,040 --> 00:02:27,840
some

72
00:02:27,840 --> 00:02:29,680
changes or create a pull request

73
00:02:29,680 --> 00:02:32,400
automatic to automate some of the tasks

74
00:02:32,400 --> 00:02:34,160
we have our build system

75
00:02:34,160 --> 00:02:37,200
which essentially has access to our

76
00:02:37,200 --> 00:02:38,720
registry credentials so it can push

77
00:02:38,720 --> 00:02:40,959
images so they have access to this lot

78
00:02:40,959 --> 00:02:43,440
of credential uh critical information

79
00:02:43,440 --> 00:02:45,680
credentials so we need basically right

80
00:02:45,680 --> 00:02:48,319
way of securing our pipelines so

81
00:02:48,319 --> 00:02:49,120
uh

82
00:02:49,120 --> 00:02:52,720
it can it cannot be compromised

83
00:02:52,879 --> 00:02:54,879
and now in today's talk we are going to

84
00:02:54,879 --> 00:02:56,560
primarily talk about four technologies

85
00:02:56,560 --> 00:02:58,319
right and how they come together we are

86
00:02:58,319 --> 00:03:00,640
going to talk about tech town as a ci cd

87
00:03:00,640 --> 00:03:03,440
platform uh but again this uh

88
00:03:03,440 --> 00:03:05,120
the scope of the stock is not limited to

89
00:03:05,120 --> 00:03:07,120
tecton right it applies equally to other

90
00:03:07,120 --> 00:03:10,239
ci platforms like jenkins or

91
00:03:10,239 --> 00:03:11,840
github actions

92
00:03:11,840 --> 00:03:13,280
we are going to talk about six store

93
00:03:13,280 --> 00:03:15,280
intel tokyo and how these all

94
00:03:15,280 --> 00:03:19,040
technologies come together to our rescue

95
00:03:19,040 --> 00:03:21,280
so first talking about tech town right

96
00:03:21,280 --> 00:03:24,319
it's a cloud native city building blocks

97
00:03:24,319 --> 00:03:27,280
it runs natively on kubernetes

98
00:03:27,280 --> 00:03:29,440
it has a bunch of crds

99
00:03:29,440 --> 00:03:31,680
like it does we have pipelines we have

100
00:03:31,680 --> 00:03:33,040
tasks

101
00:03:33,040 --> 00:03:35,280
pipeline encode the task layout like how

102
00:03:35,280 --> 00:03:36,640
what is the workflow that you want to

103
00:03:36,640 --> 00:03:37,760
execute

104
00:03:37,760 --> 00:03:40,400
tasks encode the execution logic we have

105
00:03:40,400 --> 00:03:42,319
taskrun pipeline run

106
00:03:42,319 --> 00:03:43,760
which encode the execution trigger

107
00:03:43,760 --> 00:03:45,599
properties

108
00:03:45,599 --> 00:03:47,760
and tecton again has multiple dimensions

109
00:03:47,760 --> 00:03:50,000
right so one dimension is tektron chains

110
00:03:50,000 --> 00:03:52,239
uh which is a new project which has uh

111
00:03:52,239 --> 00:03:54,080
about secure the supply chain security

112
00:03:54,080 --> 00:03:56,239
of pipelines themselves it creates an

113
00:03:56,239 --> 00:03:58,480
automated attestations of the task runs

114
00:03:58,480 --> 00:04:00,319
as they execute

115
00:04:00,319 --> 00:04:01,920
then as i said there is open source

116
00:04:01,920 --> 00:04:02,959
catalog

117
00:04:02,959 --> 00:04:05,200
for ready to use text on task

118
00:04:05,200 --> 00:04:06,640
and then there is one

119
00:04:06,640 --> 00:04:08,400
element that we are going to talk about

120
00:04:08,400 --> 00:04:10,959
more in detail is tecton bundle like it

121
00:04:10,959 --> 00:04:13,280
allows basically us to

122
00:04:13,280 --> 00:04:16,000
package and distribute this tecton task

123
00:04:16,000 --> 00:04:18,320
and share them as an through an oc add

124
00:04:18,320 --> 00:04:21,358
as an oc artifact

125
00:04:21,358 --> 00:04:24,240
the other project again in total it's an

126
00:04:24,240 --> 00:04:27,600
open extensible metadata standard

127
00:04:27,600 --> 00:04:29,680
it is used to basically

128
00:04:29,680 --> 00:04:31,360
encode the software software supply

129
00:04:31,360 --> 00:04:33,199
chain tool chain right how what is the

130
00:04:33,199 --> 00:04:35,040
workflow that you expect and create an

131
00:04:35,040 --> 00:04:37,759
attestation of those and again create a

132
00:04:37,759 --> 00:04:39,520
verification of those

133
00:04:39,520 --> 00:04:40,840
through some

134
00:04:40,840 --> 00:04:45,120
automations uh six store again i think

135
00:04:45,120 --> 00:04:47,840
all of you probably already know so

136
00:04:47,840 --> 00:04:50,560
this is basically emerging as this

137
00:04:50,560 --> 00:04:52,960
public infrastructure for signing

138
00:04:52,960 --> 00:04:54,000
software

139
00:04:54,000 --> 00:04:56,560
artifact and in this work we are

140
00:04:56,560 --> 00:04:58,720
essentially using it to sign uh various

141
00:04:58,720 --> 00:05:01,199
tectonics resources which includes our

142
00:05:01,199 --> 00:05:03,440
pipeline definitions configurations

143
00:05:03,440 --> 00:05:05,199
policies images

144
00:05:05,199 --> 00:05:07,840
uh we sign them using cosign we store

145
00:05:07,840 --> 00:05:10,479
those artifacts into artifact store uh

146
00:05:10,479 --> 00:05:13,199
well we are using uh oci as the artifact

147
00:05:13,199 --> 00:05:15,039
store for storing all this

148
00:05:15,039 --> 00:05:16,639
and

149
00:05:16,639 --> 00:05:18,880
it does the six store it's a basically

150
00:05:18,880 --> 00:05:20,800
it has broader scope it has record for

151
00:05:20,800 --> 00:05:22,400
transparency log full co for key

152
00:05:22,400 --> 00:05:24,639
management

153
00:05:24,639 --> 00:05:26,560
and then we are qrno i think jim is the

154
00:05:26,560 --> 00:05:28,560
best person to explain that

155
00:05:28,560 --> 00:05:30,720
yeah so kiverno is a policy engine that

156
00:05:30,720 --> 00:05:33,520
was designed for kubernetes and what it

157
00:05:33,520 --> 00:05:36,000
does is it kind of uses kubernetes as

158
00:05:36,000 --> 00:05:38,000
declarative configuration management

159
00:05:38,000 --> 00:05:41,520
system to manage policies itself so the

160
00:05:41,520 --> 00:05:44,160
goal of kiverna was not just enforcement

161
00:05:44,160 --> 00:05:46,240
or validation

162
00:05:46,240 --> 00:05:49,039
or checking of resources but also to

163
00:05:49,039 --> 00:05:52,240
automate security right so to be able to

164
00:05:52,240 --> 00:05:54,800
generate resources mutated resources in

165
00:05:54,800 --> 00:05:57,600
a first class manner was very important

166
00:05:57,600 --> 00:05:59,919
to kiberno from the beginning and as

167
00:05:59,919 --> 00:06:01,600
you'll see in the examples this gives

168
00:06:01,600 --> 00:06:04,240
you a very powerful toolbox to use

169
00:06:04,240 --> 00:06:06,479
similar patterns that you would with any

170
00:06:06,479 --> 00:06:09,199
kubernetes controller any kubernetes you

171
00:06:09,199 --> 00:06:10,080
know

172
00:06:10,080 --> 00:06:13,280
crd or definition and take that into

173
00:06:13,280 --> 00:06:16,799
policy management itself

174
00:06:17,280 --> 00:06:19,919
yeah so

175
00:06:21,199 --> 00:06:23,199
yeah let me pull up a bigger

176
00:06:23,199 --> 00:06:27,120
view of this it'll be easier to see

177
00:06:31,440 --> 00:06:33,360
here we go

178
00:06:33,360 --> 00:06:36,080
yeah so we essentially uh came up with

179
00:06:36,080 --> 00:06:38,880
this deciduous uh attack threat modeling

180
00:06:38,880 --> 00:06:40,720
for the takedown right

181
00:06:40,720 --> 00:06:43,280
and uh i think we are probably familiar

182
00:06:43,280 --> 00:06:46,080
with the legend so the boxes in the

183
00:06:46,080 --> 00:06:47,520
in the great they are they basically

184
00:06:47,520 --> 00:06:50,800
represent the facts uh the uh pink boxes

185
00:06:50,800 --> 00:06:53,919
they represent the attack vector

186
00:06:53,919 --> 00:06:56,080
and then the blue essentially represent

187
00:06:56,080 --> 00:06:59,280
how we can secure them yeah so uh for

188
00:06:59,280 --> 00:07:02,240
tecton if you look into this it as we

189
00:07:02,240 --> 00:07:04,639
just discussed right it has the starts

190
00:07:04,639 --> 00:07:06,479
with the pipeline the definitions right

191
00:07:06,479 --> 00:07:08,240
we have the pipeline definitions that

192
00:07:08,240 --> 00:07:10,880
encodes uh the workflow like what are

193
00:07:10,880 --> 00:07:12,720
the tasks that you can be executed what

194
00:07:12,720 --> 00:07:14,400
is the order in which this task can be

195
00:07:14,400 --> 00:07:16,160
executed

196
00:07:16,160 --> 00:07:18,880
then each task it has a certain steps

197
00:07:18,880 --> 00:07:21,199
like set of steps that

198
00:07:21,199 --> 00:07:23,520
encode the execution logic like in this

199
00:07:23,520 --> 00:07:25,520
particular task i want to execute these

200
00:07:25,520 --> 00:07:28,080
particular steps each step it's run as

201
00:07:28,080 --> 00:07:30,960
this container as a the pod and on the

202
00:07:30,960 --> 00:07:33,520
kubernetes cluster right and in this

203
00:07:33,520 --> 00:07:35,039
particular workflow or in this

204
00:07:35,039 --> 00:07:36,639
particular spectrum there are various

205
00:07:36,639 --> 00:07:38,960
attacks that are possible that jim is

206
00:07:38,960 --> 00:07:42,080
probably going to explain in detail

207
00:07:42,080 --> 00:07:44,560
yeah so before i go into that just if

208
00:07:44,560 --> 00:07:46,879
you're you know wondering what deciduous

209
00:07:46,879 --> 00:07:48,960
was and i had to look it up a few weeks

210
00:07:48,960 --> 00:07:51,919
ago uh when i started you know work on

211
00:07:51,919 --> 00:07:54,960
this tree so apparently deciduous means

212
00:07:54,960 --> 00:07:57,280
that you know trees where i guess they

213
00:07:57,280 --> 00:07:58,720
shed their leaves every year so

214
00:07:58,720 --> 00:08:01,360
something which is temporary of it

215
00:08:01,360 --> 00:08:03,680
changes right which is a nice tie-in

216
00:08:03,680 --> 00:08:06,080
into the security context here because

217
00:08:06,080 --> 00:08:08,160
security is always changing and every

218
00:08:08,160 --> 00:08:10,960
organization will probably have you know

219
00:08:10,960 --> 00:08:13,440
different needs for their security

220
00:08:13,440 --> 00:08:15,840
concerns itself right so what we did

221
00:08:15,840 --> 00:08:18,400
over here like you know sripad mentioned

222
00:08:18,400 --> 00:08:21,199
we have three major facts right so you

223
00:08:21,199 --> 00:08:23,199
have your pipelines you have your tasks

224
00:08:23,199 --> 00:08:24,960
and then you have your steps

225
00:08:24,960 --> 00:08:26,800
all of these are operating as native

226
00:08:26,800 --> 00:08:29,360
kubernetes resources each one is going

227
00:08:29,360 --> 00:08:31,520
to you know run several containers each

228
00:08:31,520 --> 00:08:34,240
step runs as a containerized image so

229
00:08:34,240 --> 00:08:36,479
every possible attack you can imagine on

230
00:08:36,479 --> 00:08:39,679
kubernetes also applies to tecton and of

231
00:08:39,679 --> 00:08:41,120
course now you're because you're

232
00:08:41,120 --> 00:08:44,000
building your software itself it's

233
00:08:44,000 --> 00:08:46,480
almost exponentially critical here right

234
00:08:46,480 --> 00:08:48,320
so some of the things we did and this is

235
00:08:48,320 --> 00:08:50,800
not a complete picture right so don't

236
00:08:50,800 --> 00:08:53,360
take this as a representation you can

237
00:08:53,360 --> 00:08:54,720
you know kind of take and put into

238
00:08:54,720 --> 00:08:57,279
production but the idea here is to come

239
00:08:57,279 --> 00:08:59,440
up with okay what can we enforce what

240
00:08:59,440 --> 00:09:01,760
should we check and you know the

241
00:09:01,760 --> 00:09:03,600
exercise the tripod and i'm going

242
00:09:03,600 --> 00:09:05,920
through is can we convert these into

243
00:09:05,920 --> 00:09:08,640
policies expressed by kiverno so the

244
00:09:08,640 --> 00:09:10,800
first thing we check for is to make sure

245
00:09:10,800 --> 00:09:12,160
that every

246
00:09:12,160 --> 00:09:14,399
ev anything that executes

247
00:09:14,399 --> 00:09:16,560
is you know executing from a pipeline

248
00:09:16,560 --> 00:09:19,680
bundle right so that's that's one policy

249
00:09:19,680 --> 00:09:21,360
the next thing we checked is to make

250
00:09:21,360 --> 00:09:23,920
sure that you cannot just run tasks

251
00:09:23,920 --> 00:09:26,480
without pipelines now

252
00:09:26,480 --> 00:09:28,560
tecton like kubernetes again is very

253
00:09:28,560 --> 00:09:31,120
flexible it lets you run you know just

254
00:09:31,120 --> 00:09:33,360
like in kubernetes if you want to run a

255
00:09:33,360 --> 00:09:35,920
pod you can but it's not a good idea

256
00:09:35,920 --> 00:09:37,760
you'd rather run a deployment or some

257
00:09:37,760 --> 00:09:40,959
other controller so similarly in here

258
00:09:40,959 --> 00:09:43,040
the idea is instead of running tasks you

259
00:09:43,040 --> 00:09:45,600
run a pipeline and better yet run a

260
00:09:45,600 --> 00:09:47,760
pipeline with a signed bundle which is

261
00:09:47,760 --> 00:09:50,560
securely stored in your oci registry

262
00:09:50,560 --> 00:09:52,800
right so those are some policies up

263
00:09:52,800 --> 00:09:55,680
there but then every step like i

264
00:09:55,680 --> 00:09:58,399
mentioned runs as a container so at that

265
00:09:58,399 --> 00:10:00,080
point you want to make sure that that

266
00:10:00,080 --> 00:10:00,880
step

267
00:10:00,880 --> 00:10:03,519
is secured it has the right pod security

268
00:10:03,519 --> 00:10:06,160
or well in this case step security

269
00:10:06,160 --> 00:10:10,560
context or um you know the same

270
00:10:10,560 --> 00:10:12,320
definitions that you would apply to a

271
00:10:12,320 --> 00:10:15,440
container like run as non-root don't

272
00:10:15,440 --> 00:10:17,760
elevate privileges things like that you

273
00:10:17,760 --> 00:10:20,160
want to enforce for that step

274
00:10:20,160 --> 00:10:22,480
similarly you know in in a kubernetes

275
00:10:22,480 --> 00:10:24,880
environment for your workloads you would

276
00:10:24,880 --> 00:10:27,519
run each workload in a namespace

277
00:10:27,519 --> 00:10:29,440
hopefully we all know that's the best

278
00:10:29,440 --> 00:10:31,519
practice to use namespaces for

279
00:10:31,519 --> 00:10:34,880
segmentation so similar year what we did

280
00:10:34,880 --> 00:10:37,600
is we applied namespacing to say every

281
00:10:37,600 --> 00:10:40,000
time you execute your pipeline it should

282
00:10:40,000 --> 00:10:42,720
be in its own namespace right so and

283
00:10:42,720 --> 00:10:44,480
once you have a namespace you can

284
00:10:44,480 --> 00:10:47,120
generate security defaults so going back

285
00:10:47,120 --> 00:10:49,200
to what i mentioned about caverno and

286
00:10:49,200 --> 00:10:51,519
the fact that it's to automate security

287
00:10:51,519 --> 00:10:53,839
so why not generate those defaults

288
00:10:53,839 --> 00:10:56,160
instead of having to manually configure

289
00:10:56,160 --> 00:10:57,360
them or

290
00:10:57,360 --> 00:10:58,800
you know come up with some other

291
00:10:58,800 --> 00:11:00,800
processes for them right and then

292
00:11:00,800 --> 00:11:03,440
finally you know besides checking for

293
00:11:03,440 --> 00:11:06,000
signatures we also came up with policies

294
00:11:06,000 --> 00:11:09,120
with check for attestations in

295
00:11:09,120 --> 00:11:11,200
in total format

296
00:11:11,200 --> 00:11:14,399
and so this is to verify that the images

297
00:11:14,399 --> 00:11:16,160
actually have a scan performed you can

298
00:11:16,160 --> 00:11:18,480
even check how recently the scan was

299
00:11:18,480 --> 00:11:20,079
performed or what type of

300
00:11:20,079 --> 00:11:21,920
vulnerabilities you might want to allow

301
00:11:21,920 --> 00:11:24,320
or prevent right or or block from

302
00:11:24,320 --> 00:11:25,680
executing

303
00:11:25,680 --> 00:11:27,600
and then of course signatures for all

304
00:11:27,600 --> 00:11:28,880
the images

305
00:11:28,880 --> 00:11:30,880
was the final policy you see over here

306
00:11:30,880 --> 00:11:32,240
as a leaf right

307
00:11:32,240 --> 00:11:33,680
so that's the

308
00:11:33,680 --> 00:11:35,920
kind of attack tree that we came up with

309
00:11:35,920 --> 00:11:38,240
now of course again this is this will

310
00:11:38,240 --> 00:11:40,640
vary based on your organization's needs

311
00:11:40,640 --> 00:11:43,440
but hopefully it gives you an idea and i

312
00:11:43,440 --> 00:11:45,440
found this a pretty useful exercise of

313
00:11:45,440 --> 00:11:48,240
you know organizing um this in terms of

314
00:11:48,240 --> 00:11:50,160
here the facts the

315
00:11:50,160 --> 00:11:52,800
possible attacks the mitigations and the

316
00:11:52,800 --> 00:11:54,720
end goal right of the attacker which is

317
00:11:54,720 --> 00:11:57,200
to get access to your cluster or to your

318
00:11:57,200 --> 00:11:58,240
host

319
00:11:58,240 --> 00:12:00,720
and anyhow by the way there's a app if

320
00:12:00,720 --> 00:12:02,880
you're not familiar with it i seems

321
00:12:02,880 --> 00:12:04,800
pretty cool to go and it was fairly easy

322
00:12:04,800 --> 00:12:06,399
to model and

323
00:12:06,399 --> 00:12:09,279
you know kind of draft this up

324
00:12:09,279 --> 00:12:11,730
so with that you know let's go into

325
00:12:11,730 --> 00:12:13,440
[Music]

326
00:12:13,440 --> 00:12:15,279
actually looking at some of this in

327
00:12:15,279 --> 00:12:16,959
action itself right so i'm going to

328
00:12:16,959 --> 00:12:18,959
switch

329
00:12:18,959 --> 00:12:22,239
let me let's make sure

330
00:12:23,040 --> 00:12:24,639
yeah so i'm not going to cover this

331
00:12:24,639 --> 00:12:26,639
policy as well i already spoke about

332
00:12:26,639 --> 00:12:29,040
them briefly but let's go to the demo

333
00:12:29,040 --> 00:12:31,600
and see this in action itself right so

334
00:12:31,600 --> 00:12:33,519
the first thing we're going to do is i'm

335
00:12:33,519 --> 00:12:35,440
going to actually kick off a pipeline

336
00:12:35,440 --> 00:12:37,920
because it takes a while to run this and

337
00:12:37,920 --> 00:12:39,680
you know i guess

338
00:12:39,680 --> 00:12:41,920
with different wi-fi speeds etc this

339
00:12:41,920 --> 00:12:44,880
might take longer so let me go and like

340
00:12:44,880 --> 00:12:46,720
i mentioned

341
00:12:46,720 --> 00:12:49,760
on my cluster right so

342
00:12:49,760 --> 00:12:52,320
we already have tecton and other things

343
00:12:52,320 --> 00:12:54,560
installed including kiverno so i'm just

344
00:12:54,560 --> 00:12:56,720
going to show you that the policies i

345
00:12:56,720 --> 00:12:59,120
have installed for cabrno they roughly

346
00:12:59,120 --> 00:13:00,720
match you know some of what we just

347
00:13:00,720 --> 00:13:01,760
talked about

348
00:13:01,760 --> 00:13:04,320
and what we'll do is first thing i'm

349
00:13:04,320 --> 00:13:07,120
going to try and do is

350
00:13:07,120 --> 00:13:10,560
run this pipeline

351
00:13:12,399 --> 00:13:15,279
outside of a namespace right so instead

352
00:13:15,279 --> 00:13:17,360
of just creating a namespace let me just

353
00:13:17,360 --> 00:13:19,200
do

354
00:13:19,200 --> 00:13:20,480
i'm going to say

355
00:13:20,480 --> 00:13:22,160
in the sign pipeline i'll show you what

356
00:13:22,160 --> 00:13:23,040
this

357
00:13:23,040 --> 00:13:26,560
is if i go into

358
00:13:26,560 --> 00:13:28,079
all of the declarations and by the way

359
00:13:28,079 --> 00:13:30,079
we have this available as a git repo so

360
00:13:30,079 --> 00:13:32,800
you can look at this later if i go in

361
00:13:32,800 --> 00:13:34,959
here and look at sign pipeline it has a

362
00:13:34,959 --> 00:13:37,440
run step and the run step is very simple

363
00:13:37,440 --> 00:13:39,279
right all it's saying is

364
00:13:39,279 --> 00:13:41,360
in this pipeline i want to execute it

365
00:13:41,360 --> 00:13:43,680
from this bundle and you know it doesn't

366
00:13:43,680 --> 00:13:45,680
have any namespace or anything defined

367
00:13:45,680 --> 00:13:48,079
so i can just run it in any namespace so

368
00:13:48,079 --> 00:13:49,839
if i try this you know what i'm

369
00:13:49,839 --> 00:13:52,079
expecting to happen is it gets blocked

370
00:13:52,079 --> 00:13:54,959
it says no i need a namespace right so

371
00:13:54,959 --> 00:13:56,720
let's go ahead and create a namespace

372
00:13:56,720 --> 00:13:58,160
for this

373
00:13:58,160 --> 00:14:00,000
and i think i already have something

374
00:14:00,000 --> 00:14:03,839
called run so i'll just call it run two

375
00:14:05,199 --> 00:14:06,079
whoops

376
00:14:06,079 --> 00:14:09,839
we want to say create namespace

377
00:14:10,639 --> 00:14:12,720
and now that we created that namespace

378
00:14:12,720 --> 00:14:14,880
let's go and see what happened in the

379
00:14:14,880 --> 00:14:17,839
namespace itself

380
00:14:21,360 --> 00:14:23,839
so i see that there are already some

381
00:14:23,839 --> 00:14:26,880
things populated for me like secrets you

382
00:14:26,880 --> 00:14:28,320
know there should be a role a role

383
00:14:28,320 --> 00:14:30,480
binding so this is everything this

384
00:14:30,480 --> 00:14:33,440
pipeline needs to execute and kiverno

385
00:14:33,440 --> 00:14:35,519
has automated that so the way that that

386
00:14:35,519 --> 00:14:38,320
got you know populated if i go into my

387
00:14:38,320 --> 00:14:41,519
policy set that i have over here um for

388
00:14:41,519 --> 00:14:42,800
security

389
00:14:42,800 --> 00:14:44,560
we looked at you know some of this you

390
00:14:44,560 --> 00:14:47,519
know to to block those resources but if

391
00:14:47,519 --> 00:14:51,519
i go and show let me make this bigger

392
00:14:52,399 --> 00:14:54,399
some of these policies which are you

393
00:14:54,399 --> 00:14:57,040
know actually generating even things

394
00:14:57,040 --> 00:14:59,120
like pvcs right so

395
00:14:59,120 --> 00:15:01,920
um techton shares information through

396
00:15:01,920 --> 00:15:03,760
volumes right so you can configure this

397
00:15:03,760 --> 00:15:05,760
in many different ways but here what

398
00:15:05,760 --> 00:15:07,440
we're doing is we're creating a volume

399
00:15:07,440 --> 00:15:09,279
and we're you know creating the pvc in

400
00:15:09,279 --> 00:15:11,920
there to make it easy to you know to now

401
00:15:11,920 --> 00:15:14,399
execute that pipeline so now that we

402
00:15:14,399 --> 00:15:16,560
have that in here if i

403
00:15:16,560 --> 00:15:18,160
um

404
00:15:18,160 --> 00:15:20,399
i haven't executed my pipeline so let's

405
00:15:20,399 --> 00:15:21,600
go ahead and

406
00:15:21,600 --> 00:15:24,480
do that so if i do run

407
00:15:24,480 --> 00:15:27,199
and if i say create signed pipeline

408
00:15:27,199 --> 00:15:29,279
that should start the execution of my

409
00:15:29,279 --> 00:15:31,199
pipeline

410
00:15:31,199 --> 00:15:33,759
and we can see and it should spin up the

411
00:15:33,759 --> 00:15:37,639
pods in a few seconds

412
00:15:42,160 --> 00:15:45,440
and we can look at this also from

413
00:15:45,440 --> 00:15:47,839
the tecton dashboard right so let's go

414
00:15:47,839 --> 00:15:49,199
back here

415
00:15:49,199 --> 00:15:53,040
if we look at it as pipeline runs

416
00:15:53,040 --> 00:15:55,040
we should see there's a new pipeline run

417
00:15:55,040 --> 00:15:57,279
and it has started executing so these

418
00:15:57,279 --> 00:15:59,120
are the different steps that are in the

419
00:15:59,120 --> 00:16:00,959
pipeline so maybe tripod if you want to

420
00:16:00,959 --> 00:16:03,199
quickly explain what this pipeline does

421
00:16:03,199 --> 00:16:04,720
yeah so this is

422
00:16:04,720 --> 00:16:06,959
yeah so this is essentially a

423
00:16:06,959 --> 00:16:08,959
template pipeline that we have created

424
00:16:08,959 --> 00:16:11,680
and it it includes a typical steps that

425
00:16:11,680 --> 00:16:12,800
we see in

426
00:16:12,800 --> 00:16:14,560
most common pipelines right and this is

427
00:16:14,560 --> 00:16:16,959
again shorter version of it so it starts

428
00:16:16,959 --> 00:16:18,800
with cloning the repo which essentially

429
00:16:18,800 --> 00:16:21,360
is getting the artifact into the

430
00:16:21,360 --> 00:16:22,720
workspace

431
00:16:22,720 --> 00:16:23,600
then

432
00:16:23,600 --> 00:16:27,360
we run some static scans on this uh

433
00:16:27,360 --> 00:16:29,360
like gosek which if it is a go

434
00:16:29,360 --> 00:16:31,279
application it checks for it statically

435
00:16:31,279 --> 00:16:34,079
or check for vulnerabilities in the code

436
00:16:34,079 --> 00:16:35,519
then we have

437
00:16:35,519 --> 00:16:37,040
okay this is not showing so we have

438
00:16:37,040 --> 00:16:39,279
build and push then once we pass those

439
00:16:39,279 --> 00:16:41,279
it essentially build and push the

440
00:16:41,279 --> 00:16:43,600
registry uh the image

441
00:16:43,600 --> 00:16:46,480
to ocr registry it signs them uh with

442
00:16:46,480 --> 00:16:48,639
cosine and uh it also add the

443
00:16:48,639 --> 00:16:50,560
attestations right so

444
00:16:50,560 --> 00:16:52,399
we see this there is generate bomb we

445
00:16:52,399 --> 00:16:55,040
generate the s bomb again attach it to

446
00:16:55,040 --> 00:16:57,120
the uh to the build image it runs the

447
00:16:57,120 --> 00:16:59,040
vulnerability scan and again create

448
00:16:59,040 --> 00:17:01,839
attestation for it and finally if it

449
00:17:01,839 --> 00:17:04,160
sees there are no vulnerabilities uh all

450
00:17:04,160 --> 00:17:05,599
the test stations have been created

451
00:17:05,599 --> 00:17:07,439
properly then it goes goes ahead and

452
00:17:07,439 --> 00:17:09,199
deploys it this particular application

453
00:17:09,199 --> 00:17:11,760
on onto the cluster

454
00:17:11,760 --> 00:17:13,359
again this is not meant to be used in

455
00:17:13,359 --> 00:17:15,119
production but this is just to give a

456
00:17:15,119 --> 00:17:16,880
context and

457
00:17:16,880 --> 00:17:18,640
some scope for us to basically play

458
00:17:18,640 --> 00:17:20,640
around with this demo

459
00:17:20,640 --> 00:17:22,880
all right so yeah it should take maybe a

460
00:17:22,880 --> 00:17:24,480
couple of more minutes to finish but

461
00:17:24,480 --> 00:17:25,199
yeah

462
00:17:25,199 --> 00:17:27,280
yeah so typically i think the last time

463
00:17:27,280 --> 00:17:29,200
i tried it it took about five to seven

464
00:17:29,200 --> 00:17:31,360
minutes to go through all the checks and

465
00:17:31,360 --> 00:17:33,600
obviously as you're adding some policies

466
00:17:33,600 --> 00:17:35,280
you know there is some time added to

467
00:17:35,280 --> 00:17:38,000
fetch data because some of this data

468
00:17:38,000 --> 00:17:39,840
comes from oci registries and let me

469
00:17:39,840 --> 00:17:41,280
quickly show you

470
00:17:41,280 --> 00:17:43,360
while that's going on what some of these

471
00:17:43,360 --> 00:17:45,360
policies look like right

472
00:17:45,360 --> 00:17:49,840
so if we go back to the policies um

473
00:17:49,840 --> 00:17:52,559
one of these is just to require a bundle

474
00:17:52,559 --> 00:17:54,880
so that we we already you know and we

475
00:17:54,880 --> 00:17:57,600
can try this by running

476
00:17:57,600 --> 00:17:59,520
a task directly to see if it gets

477
00:17:59,520 --> 00:18:01,679
blocked or not but basically as you can

478
00:18:01,679 --> 00:18:03,360
see there's a very simple policy which

479
00:18:03,360 --> 00:18:05,039
is saying you know everything should run

480
00:18:05,039 --> 00:18:07,679
into here with a bundle and don't allow

481
00:18:07,679 --> 00:18:10,160
you know bear tasks to be executed right

482
00:18:10,160 --> 00:18:12,400
so let's let's give that a try i'll we

483
00:18:12,400 --> 00:18:14,830
don't need to watch this so if i do

484
00:18:14,830 --> 00:18:17,280
[Music]

485
00:18:17,280 --> 00:18:19,200
um

486
00:18:19,200 --> 00:18:20,960
let's try

487
00:18:20,960 --> 00:18:24,559
we'll actually do a create

488
00:18:27,039 --> 00:18:30,160
and what i want to do is in my policies

489
00:18:30,160 --> 00:18:32,480
i have some test resources

490
00:18:32,480 --> 00:18:34,400
and if i look at that what i want to do

491
00:18:34,400 --> 00:18:36,480
is to just say

492
00:18:36,480 --> 00:18:38,400
you know i'll just use the sample test

493
00:18:38,400 --> 00:18:39,919
run

494
00:18:39,919 --> 00:18:42,320
to try and run that right and again what

495
00:18:42,320 --> 00:18:45,200
i'm expecting here is that this is gets

496
00:18:45,200 --> 00:18:46,960
blocked because it's saying

497
00:18:46,960 --> 00:18:49,440
first of all well it got that there's no

498
00:18:49,440 --> 00:18:51,840
signature on it so that policy blocked

499
00:18:51,840 --> 00:18:54,160
it and it would if that passed it would

500
00:18:54,160 --> 00:18:56,400
also be blocked to make sure that you

501
00:18:56,400 --> 00:18:58,559
know it has to come from a in a sine

502
00:18:58,559 --> 00:19:00,960
bundle which is stored in our oci

503
00:19:00,960 --> 00:19:02,160
registry

504
00:19:02,160 --> 00:19:03,120
so

505
00:19:03,120 --> 00:19:05,360
going back to again the set of policies

506
00:19:05,360 --> 00:19:07,600
there's this other set which are now

507
00:19:07,600 --> 00:19:10,320
verifying signatures right and what that

508
00:19:10,320 --> 00:19:12,559
looks like so it's a pretty interesting

509
00:19:12,559 --> 00:19:14,080
scheme because

510
00:19:14,080 --> 00:19:15,520
what you're trying to do is you're

511
00:19:15,520 --> 00:19:17,760
enforcing a policy so by the way this

512
00:19:17,760 --> 00:19:20,720
pop-up that shows is the vs code

513
00:19:20,720 --> 00:19:22,799
integration because given everything

514
00:19:22,799 --> 00:19:24,640
everything's a crd you get your help

515
00:19:24,640 --> 00:19:27,600
right in here so that's a nice little

516
00:19:27,600 --> 00:19:29,760
value add right um

517
00:19:29,760 --> 00:19:32,880
so we're checking signatures here and

518
00:19:32,880 --> 00:19:34,080
the one thing which is a little bit

519
00:19:34,080 --> 00:19:36,240
complex is you're not really running a

520
00:19:36,240 --> 00:19:38,880
pod right so it's one it's simple enough

521
00:19:38,880 --> 00:19:42,000
to check a signature well not exactly

522
00:19:42,000 --> 00:19:44,880
simple but it's possible to set a say or

523
00:19:44,880 --> 00:19:47,440
check a signature on a pod but here what

524
00:19:47,440 --> 00:19:50,000
ki verno is doing is it's using this new

525
00:19:50,000 --> 00:19:51,120
feature

526
00:19:51,120 --> 00:19:54,480
which we introduced in 1.7 to extract

527
00:19:54,480 --> 00:19:58,160
images out of the configuration in this

528
00:19:58,160 --> 00:20:00,480
case it's looking into the spec

529
00:20:00,480 --> 00:20:03,120
of the pipeline reference and it's going

530
00:20:03,120 --> 00:20:07,200
to check for you know a value

531
00:20:07,200 --> 00:20:09,760
with call bundle and the name and then

532
00:20:09,760 --> 00:20:12,000
it's going to check that that bundle was

533
00:20:12,000 --> 00:20:13,840
signed using the key that you're

534
00:20:13,840 --> 00:20:16,000
declaring over here so now this key

535
00:20:16,000 --> 00:20:17,679
could be in a config map or somewhere

536
00:20:17,679 --> 00:20:21,360
else but ideally what you now what this

537
00:20:21,360 --> 00:20:22,880
policy is doing

538
00:20:22,880 --> 00:20:25,280
is it's you know going through

539
00:20:25,280 --> 00:20:27,919
all of the you know the um actual

540
00:20:27,919 --> 00:20:30,400
runtime configurations it's looking in

541
00:20:30,400 --> 00:20:33,280
there and into the spec and checking for

542
00:20:33,280 --> 00:20:36,159
all of the you know the sign bundles and

543
00:20:36,159 --> 00:20:36,960
then

544
00:20:36,960 --> 00:20:39,280
verifying the signature so similarly

545
00:20:39,280 --> 00:20:41,360
here this one's a little bit different

546
00:20:41,360 --> 00:20:43,520
because now we're looking at task runs

547
00:20:43,520 --> 00:20:45,520
so remember there's pipelines there's

548
00:20:45,520 --> 00:20:48,080
tasks and there's steps and each one

549
00:20:48,080 --> 00:20:49,840
needs to be verified you want to make

550
00:20:49,840 --> 00:20:52,000
sure each one can be trusted and

551
00:20:52,000 --> 00:20:54,240
executed so similarly we're checking

552
00:20:54,240 --> 00:20:56,320
whether the task reference

553
00:20:56,320 --> 00:20:58,559
is coming from a signed pipeline and

554
00:20:58,559 --> 00:21:01,120
finally you know for the steps

555
00:21:01,120 --> 00:21:03,120
here there's a check to say that for

556
00:21:03,120 --> 00:21:05,840
each step make sure that if once you

557
00:21:05,840 --> 00:21:08,320
extract the image the image is also

558
00:21:08,320 --> 00:21:10,799
signed and verified right and in

559
00:21:10,799 --> 00:21:13,039
addition we're checking for a predicate

560
00:21:13,039 --> 00:21:14,640
one of these things i've commented this

561
00:21:14,640 --> 00:21:17,200
out because we actually found that

562
00:21:17,200 --> 00:21:19,120
one of the step has a high severity

563
00:21:19,120 --> 00:21:21,919
vulnerability so that was blocked

564
00:21:21,919 --> 00:21:23,600
and there are you know ways to kind of

565
00:21:23,600 --> 00:21:25,919
you know allow that exclusion but what

566
00:21:25,919 --> 00:21:27,360
we did for this demo is we just

567
00:21:27,360 --> 00:21:29,520
commented this out but we're checking

568
00:21:29,520 --> 00:21:33,360
that every you know step here it has an

569
00:21:33,360 --> 00:21:34,720
attestation

570
00:21:34,720 --> 00:21:37,039
which is in you know which is actually a

571
00:21:37,039 --> 00:21:39,919
vulnerability scan uh created in this

572
00:21:39,919 --> 00:21:41,919
case by gripe right so you could use

573
00:21:41,919 --> 00:21:43,600
whatever tool you want and then you can

574
00:21:43,600 --> 00:21:45,600
write if you were to kind of check for

575
00:21:45,600 --> 00:21:47,280
vulnerabilities in the policy it would

576
00:21:47,280 --> 00:21:49,280
look something like this where you're

577
00:21:49,280 --> 00:21:51,679
looking inside the json data and

578
00:21:51,679 --> 00:21:53,120
checking for that payload of that

579
00:21:53,120 --> 00:21:56,960
attestation or in fact in the predicate

580
00:21:56,960 --> 00:21:59,200
to make sure that you know you're in

581
00:21:59,200 --> 00:22:00,559
this case we want to make sure that

582
00:22:00,559 --> 00:22:03,679
there's no severity higher than eight uh

583
00:22:03,679 --> 00:22:07,200
available or in that report itself right

584
00:22:07,200 --> 00:22:08,960
so those are all of the things that

585
00:22:08,960 --> 00:22:11,679
would um be enforced one last thing i

586
00:22:11,679 --> 00:22:13,360
want to show and we'll check on our

587
00:22:13,360 --> 00:22:16,080
pipeline too is i want to actually run

588
00:22:16,080 --> 00:22:18,320
an unsigned pipeline or a pipeline which

589
00:22:18,320 --> 00:22:19,440
is not

590
00:22:19,440 --> 00:22:21,600
from a valid you know repo right so what

591
00:22:21,600 --> 00:22:24,480
i did was i just copied this pipeline

592
00:22:24,480 --> 00:22:27,280
that shri sripat created and i pushed it

593
00:22:27,280 --> 00:22:28,960
into my registry

594
00:22:28,960 --> 00:22:31,360
uh my private registry or i guess my

595
00:22:31,360 --> 00:22:34,000
github you know registry and i want to

596
00:22:34,000 --> 00:22:35,919
try and execute that just to see what

597
00:22:35,919 --> 00:22:38,080
happens right so let's go ahead and

598
00:22:38,080 --> 00:22:41,840
create another namespace

599
00:22:42,240 --> 00:22:45,360
we'll call it run3

600
00:22:45,360 --> 00:22:46,880
and

601
00:22:46,880 --> 00:22:49,840
then what we'll do

602
00:22:53,679 --> 00:22:56,000
is we're going to run now this unsigned

603
00:22:56,000 --> 00:22:58,240
pipeline right so just to show what

604
00:22:58,240 --> 00:23:02,640
exactly that is so if i go back to

605
00:23:02,640 --> 00:23:05,440
here this is our sign pipeline and if we

606
00:23:05,440 --> 00:23:06,840
go to

607
00:23:06,840 --> 00:23:10,799
unsigned what we should see

608
00:23:10,799 --> 00:23:14,799
is it's using a different image registry

609
00:23:14,799 --> 00:23:17,120
to run execute this pipeline bundle

610
00:23:17,120 --> 00:23:19,840
right so what should happen is again

611
00:23:19,840 --> 00:23:21,280
because of that you know missing

612
00:23:21,280 --> 00:23:24,159
signature check that should get blocked

613
00:23:24,159 --> 00:23:27,679
so let's go ahead and try that

614
00:23:30,480 --> 00:23:32,799
yeah so here we're seeing one of the you

615
00:23:32,799 --> 00:23:35,600
know because we are using a public key

616
00:23:35,600 --> 00:23:37,280
to match it saying there's no valid

617
00:23:37,280 --> 00:23:38,559
signatures

618
00:23:38,559 --> 00:23:40,880
which internally kiverno integrates with

619
00:23:40,880 --> 00:23:43,440
cosign from six store it's making that

620
00:23:43,440 --> 00:23:45,760
call and validating that pipeline bundle

621
00:23:45,760 --> 00:23:47,120
itself right

622
00:23:47,120 --> 00:23:49,440
so that's more or less how you would go

623
00:23:49,440 --> 00:23:51,840
ahead and secure this entire pipeline as

624
00:23:51,840 --> 00:23:53,919
you can see here where it's still

625
00:23:53,919 --> 00:23:56,159
continuing it's towards the final steps

626
00:23:56,159 --> 00:23:58,559
of it completing so again depending on

627
00:23:58,559 --> 00:23:59,919
you know because it pulls a lot of

628
00:23:59,919 --> 00:24:02,960
information uh these it might take a

629
00:24:02,960 --> 00:24:05,039
little bit longer to complete but i

630
00:24:05,039 --> 00:24:08,240
think you know overall the idea or it

631
00:24:08,240 --> 00:24:09,520
should be

632
00:24:09,520 --> 00:24:11,120
fairly you know i guess clear through

633
00:24:11,120 --> 00:24:12,960
the policies et cetera in terms of what

634
00:24:12,960 --> 00:24:14,559
needs to be checked

635
00:24:14,559 --> 00:24:16,960
so with that let's go back you know into

636
00:24:16,960 --> 00:24:19,200
the slides and we'll wrap up and

637
00:24:19,200 --> 00:24:21,520
we'll come back and check

638
00:24:21,520 --> 00:24:25,600
um on the execution maybe after

639
00:24:25,600 --> 00:24:27,360
stripper if you want to

640
00:24:27,360 --> 00:24:29,039
summarize

641
00:24:29,039 --> 00:24:30,559
yeah so uh

642
00:24:30,559 --> 00:24:32,480
i mean to summarize here we are talking

643
00:24:32,480 --> 00:24:35,279
about techton right but as we mentioned

644
00:24:35,279 --> 00:24:36,720
right it's applicable to other ci

645
00:24:36,720 --> 00:24:39,200
systems but techno is a powerful ci cd

646
00:24:39,200 --> 00:24:41,520
solution right it's built and operated

647
00:24:41,520 --> 00:24:43,440
natively on kubernetes

648
00:24:43,440 --> 00:24:45,360
ci system needs to be secure right we

649
00:24:45,360 --> 00:24:46,880
need to treat them just like our

650
00:24:46,880 --> 00:24:50,000
production workload and not just the uh

651
00:24:50,000 --> 00:24:51,919
integrity but also the configurations we

652
00:24:51,919 --> 00:24:53,039
need to make sure they are configured

653
00:24:53,039 --> 00:24:55,520
properly whatever we are executing

654
00:24:55,520 --> 00:24:57,840
they are signed they can be trusted and

655
00:24:57,840 --> 00:24:59,360
of course the kiwano policies are the

656
00:24:59,360 --> 00:25:00,720
perfect fit to

657
00:25:00,720 --> 00:25:02,720
achieve this right which allows us to

658
00:25:02,720 --> 00:25:04,720
perform the validation mutate generate

659
00:25:04,720 --> 00:25:07,200
and verify images

660
00:25:07,200 --> 00:25:08,320
and

661
00:25:08,320 --> 00:25:10,799
all this demo it's available on the

662
00:25:10,799 --> 00:25:12,400
github so

663
00:25:12,400 --> 00:25:13,919
if you want to try it out it has

664
00:25:13,919 --> 00:25:16,480
instructions all the policies are there

665
00:25:16,480 --> 00:25:17,440
you can

666
00:25:17,440 --> 00:25:18,960
try

667
00:25:18,960 --> 00:25:21,200
any closing notes jim

668
00:25:21,200 --> 00:25:22,799
now let's just check one more time to

669
00:25:22,799 --> 00:25:25,760
see if the pipeline completed uh

670
00:25:25,760 --> 00:25:27,840
but otherwise you know i think we're

671
00:25:27,840 --> 00:25:30,240
done with what we wanted to demo

672
00:25:30,240 --> 00:25:32,720
and happy to take any questions i think

673
00:25:32,720 --> 00:25:36,400
it actually completed yeah

674
00:25:36,799 --> 00:25:38,480
all the tasks are done the pipeline is

675
00:25:38,480 --> 00:25:40,320
done so there you go

676
00:25:40,320 --> 00:25:43,279
yeah all right any questions thoughts

677
00:25:43,279 --> 00:25:45,840
feedback

678
00:25:48,240 --> 00:25:51,480
thank you

679
00:26:00,559 --> 00:26:02,960
um yes it is actually in the git repo

680
00:26:02,960 --> 00:26:06,320
itself so yeah

681
00:26:06,960 --> 00:26:09,279
but don't use it as is create your own

682
00:26:09,279 --> 00:26:11,840
please you know

683
00:26:12,799 --> 00:26:16,400
any other questions for anyone

684
00:26:18,320 --> 00:26:20,320
all right if not thank you very much

685
00:26:20,320 --> 00:26:23,480
take care

