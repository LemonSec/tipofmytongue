1
00:00:00,320 --> 00:00:03,360
all right so we are back

2
00:00:03,360 --> 00:00:04,880
this time it's with little bite-sized

3
00:00:04,880 --> 00:00:06,080
pieces so we're going to be having a

4
00:00:06,080 --> 00:00:08,160
bunch of lightning talks

5
00:00:08,160 --> 00:00:10,480
so next up we have zayn asgar who is

6
00:00:10,480 --> 00:00:14,400
going to be talking about pixie

7
00:00:15,599 --> 00:00:17,410
okay

8
00:00:17,410 --> 00:00:20,800
[Applause]

9
00:00:20,800 --> 00:00:22,880
hi everyone today i'll talk about data

10
00:00:22,880 --> 00:00:26,480
exfiltration on the edge with pixi um so

11
00:00:26,480 --> 00:00:29,279
a little bit about me i'm zane um and

12
00:00:29,279 --> 00:00:31,920
the general manager and uh

13
00:00:31,920 --> 00:00:33,760
vp at new relic working on the pixi and

14
00:00:33,760 --> 00:00:35,600
open ecosystem teams

15
00:00:35,600 --> 00:00:37,360
um i was originally the co-founder and

16
00:00:37,360 --> 00:00:39,360
ceo of pixie labs which was acquired by

17
00:00:39,360 --> 00:00:41,040
new relic

18
00:00:41,040 --> 00:00:42,399
and i'm also an adjunct professor of

19
00:00:42,399 --> 00:00:44,480
computer science at stanford

20
00:00:44,480 --> 00:00:45,520
so

21
00:00:45,520 --> 00:00:46,960
before i get started a little bit of a

22
00:00:46,960 --> 00:00:48,800
disclaimer i know i'm in an audience

23
00:00:48,800 --> 00:00:51,600
full of security folks and you know i'm

24
00:00:51,600 --> 00:00:53,840
not a security expert so

25
00:00:53,840 --> 00:00:54,960
there are probably a lot of holes in

26
00:00:54,960 --> 00:00:56,559
this but i just want to put that out

27
00:00:56,559 --> 00:00:57,440
there

28
00:00:57,440 --> 00:00:58,960
and the contents of this talk are not

29
00:00:58,960 --> 00:01:00,719
meant to be used in production

30
00:01:00,719 --> 00:01:02,320
our goal is to demonstrate some ideas

31
00:01:02,320 --> 00:01:05,119
and start some discussions not to try to

32
00:01:05,119 --> 00:01:09,280
push this towards a production use case

33
00:01:09,280 --> 00:01:11,119
so what is

34
00:01:11,119 --> 00:01:13,840
the data exfiltration risk so you know

35
00:01:13,840 --> 00:01:15,119
we think that data exfiltration is a

36
00:01:15,119 --> 00:01:16,720
huge risk and that means that you're

37
00:01:16,720 --> 00:01:18,720
leaking in information outside of your

38
00:01:18,720 --> 00:01:21,600
cluster so for example you might be

39
00:01:21,600 --> 00:01:23,280
sending credit cards social security

40
00:01:23,280 --> 00:01:25,040
numbers phone numbers and other other

41
00:01:25,040 --> 00:01:27,280
identifiable information outside of your

42
00:01:27,280 --> 00:01:29,200
kubernetes cluster or even within your

43
00:01:29,200 --> 00:01:30,640
services where it should not be

44
00:01:30,640 --> 00:01:31,759
happening

45
00:01:31,759 --> 00:01:33,439
um and ultimately you know this can come

46
00:01:33,439 --> 00:01:36,479
back and and cost you know in forms of

47
00:01:36,479 --> 00:01:37,920
probably frozen money because of all the

48
00:01:37,920 --> 00:01:39,280
data loss and

49
00:01:39,280 --> 00:01:40,880
potential customer trust loss that

50
00:01:40,880 --> 00:01:42,240
you'll have

51
00:01:42,240 --> 00:01:43,680
so the question right here is wouldn't

52
00:01:43,680 --> 00:01:45,600
it be great if sensitive data leaving

53
00:01:45,600 --> 00:01:48,079
your cluster could be found

54
00:01:48,079 --> 00:01:51,200
in a in a transparent way and you know

55
00:01:51,200 --> 00:01:52,479
we say that it all starts with

56
00:01:52,479 --> 00:01:54,159
observability

57
00:01:54,159 --> 00:01:55,680
mostly because pixi is originally a

58
00:01:55,680 --> 00:01:58,079
performance observability tool and we're

59
00:01:58,079 --> 00:02:00,000
trying to extend it to do some more use

60
00:02:00,000 --> 00:02:02,719
cases so what is fixie probably not a

61
00:02:02,719 --> 00:02:03,840
lot of folks in this community are

62
00:02:03,840 --> 00:02:05,759
familiar with that

63
00:02:05,759 --> 00:02:07,439
but we started out with our goal of

64
00:02:07,439 --> 00:02:09,038
performance debugging without manual

65
00:02:09,038 --> 00:02:10,399
instrumentation

66
00:02:10,399 --> 00:02:11,520
um

67
00:02:11,520 --> 00:02:13,760
so we do all the basic stuff like cpu

68
00:02:13,760 --> 00:02:15,280
memory network

69
00:02:15,280 --> 00:02:17,040
you know grab all message fans and

70
00:02:17,040 --> 00:02:18,239
latencies and you're probably seeing

71
00:02:18,239 --> 00:02:20,400
where this is going now

72
00:02:20,400 --> 00:02:22,560
and things like performance profiles

73
00:02:22,560 --> 00:02:24,640
uh but the three characteristics of pixi

74
00:02:24,640 --> 00:02:26,800
uh which i think make it very useful to

75
00:02:26,800 --> 00:02:28,720
do things in the security space

76
00:02:28,720 --> 00:02:30,720
so the first one of them is this this

77
00:02:30,720 --> 00:02:33,120
concept of zero instrumentation um

78
00:02:33,120 --> 00:02:34,800
there's another session going on next

79
00:02:34,800 --> 00:02:36,879
year in ebpf

80
00:02:36,879 --> 00:02:39,280
but pixie basically leverages ebpf to

81
00:02:39,280 --> 00:02:41,280
allow you to monitor your applications

82
00:02:41,280 --> 00:02:44,879
without doing any manual instrumentation

83
00:02:44,879 --> 00:02:46,480
and this level of instrumentation is

84
00:02:46,480 --> 00:02:48,640
pretty deep and not only allows you to

85
00:02:48,640 --> 00:02:51,360
capture things like here's the http

86
00:02:51,360 --> 00:02:53,760
message data but it can tell you you

87
00:02:53,760 --> 00:02:56,000
know what commands are getting executed

88
00:02:56,000 --> 00:02:57,280
what's actually contained in those

89
00:02:57,280 --> 00:02:58,879
message bodies

90
00:02:58,879 --> 00:03:00,480
and it can do all of this without having

91
00:03:00,480 --> 00:03:02,080
to change your application so you know

92
00:03:02,080 --> 00:03:05,040
that the observability always exists

93
00:03:05,040 --> 00:03:06,319
the other characteristics we think is

94
00:03:06,319 --> 00:03:08,159
useful is that we have a distributed

95
00:03:08,159 --> 00:03:09,599
architecture

96
00:03:09,599 --> 00:03:11,599
which means that we can take a look at a

97
00:03:11,599 --> 00:03:13,280
lot of data since you can deploy this on

98
00:03:13,280 --> 00:03:15,120
every single node you don't have to

99
00:03:15,120 --> 00:03:17,519
worry about having bottlenecks

100
00:03:17,519 --> 00:03:19,519
for looking at what's for actually

101
00:03:19,519 --> 00:03:21,519
inspecting the data

102
00:03:21,519 --> 00:03:23,120
and the third thing is this concept

103
00:03:23,120 --> 00:03:24,560
around the scriptable interface you can

104
00:03:24,560 --> 00:03:26,239
actually write scripts which can look

105
00:03:26,239 --> 00:03:29,360
for um which can look for uh your data

106
00:03:29,360 --> 00:03:31,040
loss

107
00:03:31,040 --> 00:03:32,799
so very quickly i'll talk about you know

108
00:03:32,799 --> 00:03:34,400
very high level diagram of the pixy

109
00:03:34,400 --> 00:03:36,000
architecture so

110
00:03:36,000 --> 00:03:37,440
at the highest layer you know you have

111
00:03:37,440 --> 00:03:40,720
our apis uis and clis uh there's a cloud

112
00:03:40,720 --> 00:03:42,959
system to help orchestrate all this

113
00:03:42,959 --> 00:03:44,560
but most of the heavy lifting happens

114
00:03:44,560 --> 00:03:46,159
down here with the collector and

115
00:03:46,159 --> 00:03:48,000
aggregator and the actual kubernetes

116
00:03:48,000 --> 00:03:49,840
nodes we deploy this thing called the

117
00:03:49,840 --> 00:03:52,159
pixie edge module on every single node

118
00:03:52,159 --> 00:03:54,080
there's a data collector based on ebpf

119
00:03:54,080 --> 00:03:56,000
that collects information across all

120
00:03:56,000 --> 00:03:58,159
your pods running on kubernetes

121
00:03:58,159 --> 00:04:00,159
and then we store this information you

122
00:04:00,159 --> 00:04:01,519
know in like a ring buffer so we can

123
00:04:01,519 --> 00:04:06,000
query it later uh and run analysis on it

124
00:04:06,000 --> 00:04:07,439
um and everything inside of pixie

125
00:04:07,439 --> 00:04:08,959
descriptable with a language designed to

126
00:04:08,959 --> 00:04:11,599
do data analysis and machine learning

127
00:04:11,599 --> 00:04:13,840
so it's basically valid python valid

128
00:04:13,840 --> 00:04:15,280
pandas

129
00:04:15,280 --> 00:04:17,040
and you can essentially operate on data

130
00:04:17,040 --> 00:04:18,639
frames i'm not going to go into too much

131
00:04:18,639 --> 00:04:19,680
detail about this there's more

132
00:04:19,680 --> 00:04:22,160
information available

133
00:04:22,160 --> 00:04:25,759
available on our website or github repo

134
00:04:25,759 --> 00:04:27,199
so

135
00:04:27,199 --> 00:04:28,720
quick note on how can observability

136
00:04:28,720 --> 00:04:30,479
catch data leaks so the first thing

137
00:04:30,479 --> 00:04:33,120
we're going to do is use pixi to trace

138
00:04:33,120 --> 00:04:34,320
all the traffic on your kubernetes

139
00:04:34,320 --> 00:04:36,880
cluster uh we can actually do this for

140
00:04:36,880 --> 00:04:40,000
both encrypted and unencrypted traffic

141
00:04:40,000 --> 00:04:41,520
um

142
00:04:41,520 --> 00:04:42,960
more information about that you know in

143
00:04:42,960 --> 00:04:45,120
our documentation the second thing we're

144
00:04:45,120 --> 00:04:46,960
going to do is run a script to find

145
00:04:46,960 --> 00:04:49,440
messages that have sensitive information

146
00:04:49,440 --> 00:04:51,280
for example credit card numbers social

147
00:04:51,280 --> 00:04:52,800
security numbers things like email

148
00:04:52,800 --> 00:04:54,720
addresses and then we're going to filter

149
00:04:54,720 --> 00:04:56,720
the traffic to things that are egressing

150
00:04:56,720 --> 00:04:59,360
your kubernetes cluster

151
00:04:59,360 --> 00:05:00,880
and lastly we're going to look at the

152
00:05:00,880 --> 00:05:03,120
egress of this sensitive data to see if

153
00:05:03,120 --> 00:05:06,000
it's actually legitimate

154
00:05:06,000 --> 00:05:08,240
so here's the demo scenario

155
00:05:08,240 --> 00:05:09,840
and we're almost uh obviously none of

156
00:05:09,840 --> 00:05:11,680
the talk uh so we have a kubernetes

157
00:05:11,680 --> 00:05:14,080
cluster running a legitimate pod that's

158
00:05:14,080 --> 00:05:17,120
making ssl requests to the stripe api

159
00:05:17,120 --> 00:05:19,680
then we have two malicious fonts one of

160
00:05:19,680 --> 00:05:23,199
those making http requests um

161
00:05:23,199 --> 00:05:27,120
to the post test server and another

162
00:05:27,120 --> 00:05:29,199
malicious bot that's making https

163
00:05:29,199 --> 00:05:31,120
requests and we're gonna basically try

164
00:05:31,120 --> 00:05:32,560
to see if you can find that in our

165
00:05:32,560 --> 00:05:35,039
kubernetes cluster

166
00:05:35,039 --> 00:05:39,560
so with that i'll switch over to a demo

167
00:05:41,440 --> 00:05:43,120
i don't know why i hit refresh there but

168
00:05:43,120 --> 00:05:45,199
anyways so i have my demo cluster pulled

169
00:05:45,199 --> 00:05:48,240
up um so pixie takes like about five

170
00:05:48,240 --> 00:05:49,759
minutes install and since we don't

171
00:05:49,759 --> 00:05:51,120
require you to change any code you'll

172
00:05:51,120 --> 00:05:52,639
immediately be able to see all all the

173
00:05:52,639 --> 00:05:54,800
data

174
00:05:54,800 --> 00:05:56,240
if you go down here we have a list of

175
00:05:56,240 --> 00:05:58,240
our our namespaces

176
00:05:58,240 --> 00:06:01,039
and i'm running this data exfiltration

177
00:06:01,039 --> 00:06:02,560
demo over here

178
00:06:02,560 --> 00:06:03,919
you can see that there's some legitimate

179
00:06:03,919 --> 00:06:08,719
stripe egress going to some ip and then

180
00:06:08,880 --> 00:06:10,720
there is some malicious egress pods

181
00:06:10,720 --> 00:06:12,240
talking to some other ip but this isn't

182
00:06:12,240 --> 00:06:13,759
entirely that useful it's just telling

183
00:06:13,759 --> 00:06:16,080
us there's some communication happening

184
00:06:16,080 --> 00:06:17,520
i think i mentioned earlier that pixie

185
00:06:17,520 --> 00:06:19,440
works on its concept of scripts so we

186
00:06:19,440 --> 00:06:21,919
have a script over here called

187
00:06:21,919 --> 00:06:24,639
egress so i can look for pii egress this

188
00:06:24,639 --> 00:06:26,160
is a beta script

189
00:06:26,160 --> 00:06:29,280
so if i run the script

190
00:06:29,280 --> 00:06:31,440
we're seeing a ton of http traffic going

191
00:06:31,440 --> 00:06:33,759
to various ips

192
00:06:33,759 --> 00:06:35,360
we can turn on some better dns

193
00:06:35,360 --> 00:06:37,440
resolution because pixi traces dns

194
00:06:37,440 --> 00:06:38,880
traffic

195
00:06:38,880 --> 00:06:40,400
and with that

196
00:06:40,400 --> 00:06:41,520
we should be able to see that there's

197
00:06:41,520 --> 00:06:44,160
some http traffic flowing to stripe and

198
00:06:44,160 --> 00:06:46,080
then this yellow bar means there's mixed

199
00:06:46,080 --> 00:06:48,800
traffic between http and https flowing

200
00:06:48,800 --> 00:06:50,479
to ptsv2

201
00:06:50,479 --> 00:06:53,440
if i go over here

202
00:06:53,599 --> 00:06:54,800
we should actually be able to see an

203
00:06:54,800 --> 00:06:57,120
example request so an example request

204
00:06:57,120 --> 00:06:58,960
that's leaking the name credit card

205
00:06:58,960 --> 00:07:00,400
information and phone

206
00:07:00,400 --> 00:07:01,440
number

207
00:07:01,440 --> 00:07:02,720
if everyone's freaking out with the data

208
00:07:02,720 --> 00:07:04,080
that we're looking at

209
00:07:04,080 --> 00:07:06,319
uh we do have capabilities to obfuscate

210
00:07:06,319 --> 00:07:08,319
that so you can't see it in the ui

211
00:07:08,319 --> 00:07:10,400
um but essentially we found the the

212
00:07:10,400 --> 00:07:11,520
request

213
00:07:11,520 --> 00:07:14,000
um and we can we can trace it regardless

214
00:07:14,000 --> 00:07:16,240
of like i said oop sorry i meant to go

215
00:07:16,240 --> 00:07:17,599
down here

216
00:07:17,599 --> 00:07:19,360
um you can go over here and see what

217
00:07:19,360 --> 00:07:23,039
type of protocol it is and get some more

218
00:07:23,039 --> 00:07:25,759
sorry let's click

219
00:07:25,759 --> 00:07:27,039
um

220
00:07:27,039 --> 00:07:29,199
get some more more details about about

221
00:07:29,199 --> 00:07:31,759
what's what's happening

222
00:07:31,759 --> 00:07:34,160
that's all i had for

223
00:07:34,160 --> 00:07:36,400
the demo

224
00:07:36,400 --> 00:07:38,319
one of the things i want to say is with

225
00:07:38,319 --> 00:07:41,280
ebpf this is really only the beginning

226
00:07:41,280 --> 00:07:42,800
there's lots of other things you can do

227
00:07:42,800 --> 00:07:44,800
and other capabilities built in

228
00:07:44,800 --> 00:07:45,919
so one of them you know things like

229
00:07:45,919 --> 00:07:48,080
monitoring file accesses system calls

230
00:07:48,080 --> 00:07:50,000
process execution

231
00:07:50,000 --> 00:07:52,000
look at what files are being accessed

232
00:07:52,000 --> 00:07:54,240
and which information is leaking

233
00:07:54,240 --> 00:07:56,080
and all of that can be built in

234
00:07:56,080 --> 00:07:59,120
at the bpf layer

235
00:07:59,120 --> 00:08:01,039
and with that that's all i all i have

236
00:08:01,039 --> 00:08:02,720
and please check out our website and

237
00:08:02,720 --> 00:08:05,680
github for more information

238
00:08:05,680 --> 00:08:08,680
thanks

239
00:08:15,759 --> 00:08:17,680
any

240
00:08:17,680 --> 00:08:20,160
testing

241
00:08:21,120 --> 00:08:24,160
testing all right there we go

242
00:08:24,800 --> 00:08:25,680
uh

243
00:08:25,680 --> 00:08:27,759
the question is what is the performance

244
00:08:27,759 --> 00:08:29,280
overhead of this

245
00:08:29,280 --> 00:08:32,080
yeah so that really depends on

246
00:08:32,080 --> 00:08:34,640
uh what level of things you're scanning

247
00:08:34,640 --> 00:08:36,320
um the performance overhead of actually

248
00:08:36,320 --> 00:08:38,240
collecting the data um our target and

249
00:08:38,240 --> 00:08:40,640
pixie is under five percent um since

250
00:08:40,640 --> 00:08:41,839
we're mostly capturing the stuff at the

251
00:08:41,839 --> 00:08:44,320
kernel level it's very efficient

252
00:08:44,320 --> 00:08:45,279
um

253
00:08:45,279 --> 00:08:46,880
but yeah our target's under five percent

254
00:08:46,880 --> 00:08:48,320
we usually try to keep it under like two

255
00:08:48,320 --> 00:08:50,720
to three

256
00:08:53,519 --> 00:08:56,720
any other questions okay

257
00:09:02,399 --> 00:09:04,720
uh hello uh so with all this uh

258
00:09:04,720 --> 00:09:07,120
sensitive data are we just sending that

259
00:09:07,120 --> 00:09:09,600
all into the cloud or can you host it

260
00:09:09,600 --> 00:09:12,320
on-prem kind of keep it in-house as well

261
00:09:12,320 --> 00:09:15,360
so two things one is you can host uh

262
00:09:15,360 --> 00:09:17,200
everything on-prem so everything is

263
00:09:17,200 --> 00:09:19,279
available uh both the cloud slide and

264
00:09:19,279 --> 00:09:22,640
the uh stuff that's deployed um

265
00:09:22,640 --> 00:09:24,480
jumping back to this we actually don't

266
00:09:24,480 --> 00:09:26,080
send any data to the cloud even when

267
00:09:26,080 --> 00:09:27,680
you're running scripts all the data is

268
00:09:27,680 --> 00:09:29,920
being run within your cluster anyways

269
00:09:29,920 --> 00:09:32,160
um and if you do view stuff in the ui

270
00:09:32,160 --> 00:09:33,600
it's end to end encrypted so the cloud

271
00:09:33,600 --> 00:09:37,480
can't actually see the data

272
00:09:47,839 --> 00:09:50,480
i don't see any others all right thank

273
00:09:50,480 --> 00:09:52,710
you

274
00:09:52,710 --> 00:09:57,059
[Applause]

