1
00:00:00,160 --> 00:00:01,680
hello

2
00:00:01,680 --> 00:00:03,360
and i would like to talk about signing

3
00:00:03,360 --> 00:00:06,240
and validating serverless functions

4
00:00:06,240 --> 00:00:08,000
so i prepared like a kind of an

5
00:00:08,000 --> 00:00:09,599
introduction a few slides just talk

6
00:00:09,599 --> 00:00:12,719
about uh code signing why it's important

7
00:00:12,719 --> 00:00:14,320
uh but i think after all these talks

8
00:00:14,320 --> 00:00:16,320
today

9
00:00:16,320 --> 00:00:18,800
we can skip this very basic introduction

10
00:00:18,800 --> 00:00:19,520
but

11
00:00:19,520 --> 00:00:21,520
i think you know one key takeaway i

12
00:00:21,520 --> 00:00:24,000
would take from this slide is that

13
00:00:24,000 --> 00:00:26,240
there's increasing attack and increasing

14
00:00:26,240 --> 00:00:28,640
no interest in attacking ci cd pipelines

15
00:00:28,640 --> 00:00:30,960
couldn't be modified can be changed you

16
00:00:30,960 --> 00:00:32,479
heard a lot about it

17
00:00:32,479 --> 00:00:36,320
we can move ahead uh openssf

18
00:00:36,320 --> 00:00:38,239
was founded to address those supply

19
00:00:38,239 --> 00:00:40,160
chain threats

20
00:00:40,160 --> 00:00:42,000
project six store started independently

21
00:00:42,000 --> 00:00:44,320
now it's part of ssf

22
00:00:44,320 --> 00:00:45,840
openness have to address the code

23
00:00:45,840 --> 00:00:48,480
pipeline phase and i'm sure there'll be

24
00:00:48,480 --> 00:00:50,399
a few more talks even later today about

25
00:00:50,399 --> 00:00:52,480
it

26
00:00:52,719 --> 00:00:55,520
and sig stories of course looking how to

27
00:00:55,520 --> 00:00:57,360
sign and leverage

28
00:00:57,360 --> 00:01:00,160
this information in ci cd pipeline

29
00:01:00,160 --> 00:01:01,920
how does six to work and again it's very

30
00:01:01,920 --> 00:01:04,239
very just on a nutshell so it can all be

31
00:01:04,239 --> 00:01:06,000
you know on the same

32
00:01:06,000 --> 00:01:08,159
uh line and just like as a small

33
00:01:08,159 --> 00:01:10,560
background so six story is a collection

34
00:01:10,560 --> 00:01:13,680
of tools uh created a very nice

35
00:01:13,680 --> 00:01:16,159
uh model of you know keyless signing

36
00:01:16,159 --> 00:01:18,799
model it also has the classical

37
00:01:18,799 --> 00:01:20,960
uh you know pub uh the classical signing

38
00:01:20,960 --> 00:01:23,119
was private and public key

39
00:01:23,119 --> 00:01:25,600
but if using you know the killer signing

40
00:01:25,600 --> 00:01:27,360
uh you can use full co which give you a

41
00:01:27,360 --> 00:01:30,000
root certificate authority together with

42
00:01:30,000 --> 00:01:32,000
open id connect uh you could get a

43
00:01:32,000 --> 00:01:34,960
timestamp certificate then cosign uh can

44
00:01:34,960 --> 00:01:36,880
use this for signing creating a

45
00:01:36,880 --> 00:01:39,520
signature record a transparency log

46
00:01:39,520 --> 00:01:40,960
which should be constantly you know

47
00:01:40,960 --> 00:01:43,759
query and monitor uh to get verification

48
00:01:43,759 --> 00:01:46,479
and provenance um and as i said you know

49
00:01:46,479 --> 00:01:48,640
cosine can also be used

50
00:01:48,640 --> 00:01:50,799
in traditional key pair in case that

51
00:01:50,799 --> 00:01:53,119
your ci cd doesn't support the keyless

52
00:01:53,119 --> 00:01:54,560
signing model

53
00:01:54,560 --> 00:01:56,320
and you want to use in traditional way

54
00:01:56,320 --> 00:01:58,960
okay that's just the introduction we can

55
00:01:58,960 --> 00:02:00,560
move to the real

56
00:02:00,560 --> 00:02:02,640
topic of my

57
00:02:02,640 --> 00:02:04,000
of my talk

58
00:02:04,000 --> 00:02:04,880
now

59
00:02:04,880 --> 00:02:07,200
serverless why serverless are different

60
00:02:07,200 --> 00:02:09,280
what makes them you know different than

61
00:02:09,280 --> 00:02:11,760
everything we heard until now that you

62
00:02:11,760 --> 00:02:12,959
know everybody talk about you know how

63
00:02:12,959 --> 00:02:15,440
to identify you know the hashes what we

64
00:02:15,440 --> 00:02:16,959
use so container images typically

65
00:02:16,959 --> 00:02:18,800
identify with their hash

66
00:02:18,800 --> 00:02:21,120
it's very easy uh today it's a very

67
00:02:21,120 --> 00:02:23,440
common practice in kubernetes to

68
00:02:23,440 --> 00:02:25,599
validate those images before deployment

69
00:02:25,599 --> 00:02:27,520
so it's almost like you know build in

70
00:02:27,520 --> 00:02:29,280
whether using an open source tool like

71
00:02:29,280 --> 00:02:31,680
gatekeeper or kiverno whether using your

72
00:02:31,680 --> 00:02:33,680
own proprietary thing this is a

73
00:02:33,680 --> 00:02:37,040
classical you know security precautions

74
00:02:37,040 --> 00:02:38,879
being used by almost everyone to

75
00:02:38,879 --> 00:02:41,120
validate the images you know or were not

76
00:02:41,120 --> 00:02:42,640
changed or tampered

77
00:02:42,640 --> 00:02:45,280
now in serverless functions usually you

78
00:02:45,280 --> 00:02:47,680
upload your source code into your cloud

79
00:02:47,680 --> 00:02:50,480
account so there is no hashes now my

80
00:02:50,480 --> 00:02:52,000
friend here on the on the right side

81
00:02:52,000 --> 00:02:53,680
talked about drifts

82
00:02:53,680 --> 00:02:55,440
in your you know cloud you know

83
00:02:55,440 --> 00:02:57,440
deployments and it apply also for

84
00:02:57,440 --> 00:02:59,040
serverless you know you deploy with one

85
00:02:59,040 --> 00:03:02,000
permission eventually you get some drift

86
00:03:02,000 --> 00:03:03,680
to get some changes so you probably

87
00:03:03,680 --> 00:03:06,159
don't want just to sign you know your

88
00:03:06,159 --> 00:03:07,840
code you also want to sign the

89
00:03:07,840 --> 00:03:10,000
deployment file whether using you know a

90
00:03:10,000 --> 00:03:12,480
cloud formation template with using any

91
00:03:12,480 --> 00:03:13,760
other infrastructure of the code you

92
00:03:13,760 --> 00:03:16,000
want maybe also to sign it to verify

93
00:03:16,000 --> 00:03:19,120
that even those uh artifacts were not

94
00:03:19,120 --> 00:03:21,920
were not uh changed so this is something

95
00:03:21,920 --> 00:03:24,080
which is probably

96
00:03:24,080 --> 00:03:25,920
a preliminary need

97
00:03:25,920 --> 00:03:27,599
now in serverless there is one more

98
00:03:27,599 --> 00:03:30,319
challenge because the cloud providers

99
00:03:30,319 --> 00:03:32,560
don't give you this admission controller

100
00:03:32,560 --> 00:03:34,720
those give you this like validation

101
00:03:34,720 --> 00:03:37,200
function that can validate any action

102
00:03:37,200 --> 00:03:40,319
before you start executing the code

103
00:03:40,319 --> 00:03:41,120
so

104
00:03:41,120 --> 00:03:43,200
those are the challenges why serverless

105
00:03:43,200 --> 00:03:44,640
is like a slightly

106
00:03:44,640 --> 00:03:47,200
different use case than any container

107
00:03:47,200 --> 00:03:51,200
image or the classical uh you know

108
00:03:51,200 --> 00:03:53,360
signing and verification process that we

109
00:03:53,360 --> 00:03:56,080
do now there is one exception in aws so

110
00:03:56,080 --> 00:03:57,200
aws

111
00:03:57,200 --> 00:03:59,040
has its own built-in solution it's

112
00:03:59,040 --> 00:04:01,760
called code signing it's a great uh step

113
00:04:01,760 --> 00:04:04,239
to secure serverless functions uh you

114
00:04:04,239 --> 00:04:06,640
can use code signing from the functions

115
00:04:06,640 --> 00:04:09,360
um you can sign your code okay and then

116
00:04:09,360 --> 00:04:12,080
upload the signed code into the cloud

117
00:04:12,080 --> 00:04:14,480
account or to a three bucket then you

118
00:04:14,480 --> 00:04:17,358
need to create a signing profile which

119
00:04:17,358 --> 00:04:19,600
using you know the iem permissions to

120
00:04:19,600 --> 00:04:21,759
identify who and what can be signed and

121
00:04:21,759 --> 00:04:22,560
then

122
00:04:22,560 --> 00:04:25,199
you can apply this signing profile to

123
00:04:25,199 --> 00:04:27,440
any lambda function that you want and it

124
00:04:27,440 --> 00:04:28,639
verifies

125
00:04:28,639 --> 00:04:30,479
that the lambda is signed and then

126
00:04:30,479 --> 00:04:32,720
before it execute it verify that it's

127
00:04:32,720 --> 00:04:34,160
signed and it's and it's secure so this

128
00:04:34,160 --> 00:04:35,600
is a great approach

129
00:04:35,600 --> 00:04:37,680
uh what i would like to present is a an

130
00:04:37,680 --> 00:04:39,840
alternative approach

131
00:04:39,840 --> 00:04:43,040
which using sigstor to sign it so you

132
00:04:43,040 --> 00:04:45,759
can use six store and cosign to sign

133
00:04:45,759 --> 00:04:48,320
serverless functions in their deployment

134
00:04:48,320 --> 00:04:50,000
file it's a standard tool so it can be

135
00:04:50,000 --> 00:04:52,400
used for any you know cloud provider not

136
00:04:52,400 --> 00:04:54,240
just aws

137
00:04:54,240 --> 00:04:56,240
it's designed to be used in ci cd so

138
00:04:56,240 --> 00:04:58,560
it's very easy to implement and edit

139
00:04:58,560 --> 00:05:00,960
as part of your cd so it's really simple

140
00:05:00,960 --> 00:05:02,960
uh you have the keyless

141
00:05:02,960 --> 00:05:05,360
signing option which is slightly safer

142
00:05:05,360 --> 00:05:07,120
it's very nice to implement it's

143
00:05:07,120 --> 00:05:08,000
slightly

144
00:05:08,000 --> 00:05:10,800
still challenging to deploy but um it's

145
00:05:10,800 --> 00:05:13,280
a very nice and safer option and of

146
00:05:13,280 --> 00:05:14,960
course you can extend it not just to

147
00:05:14,960 --> 00:05:17,199
sign the function code you can also sign

148
00:05:17,199 --> 00:05:19,199
you know the same deployment file

149
00:05:19,199 --> 00:05:21,680
but six are still at the moment like

150
00:05:21,680 --> 00:05:23,919
appropriate validation option it has a

151
00:05:23,919 --> 00:05:25,680
validation admission controller for

152
00:05:25,680 --> 00:05:28,800
kubernetes it lacks a validation option

153
00:05:28,800 --> 00:05:29,680
for

154
00:05:29,680 --> 00:05:32,160
serverless functions

155
00:05:32,160 --> 00:05:34,800
so what we did and this is uh in cisco

156
00:05:34,800 --> 00:05:35,520
in

157
00:05:35,520 --> 00:05:36,960
in the emerging and technology

158
00:05:36,960 --> 00:05:39,759
technology innovation team we created an

159
00:05:39,759 --> 00:05:42,400
open source validation function

160
00:05:42,400 --> 00:05:44,000
and we created the whole template for

161
00:05:44,000 --> 00:05:46,080
this validation mechanism

162
00:05:46,080 --> 00:05:48,800
so how how does it work

163
00:05:48,800 --> 00:05:51,680
so again use cosine

164
00:05:51,680 --> 00:05:54,160
bulb option to sign your code or assign

165
00:05:54,160 --> 00:05:55,919
any you know artifact that you want in

166
00:05:55,919 --> 00:05:58,720
your ci cd you can use the key pair

167
00:05:58,720 --> 00:06:01,600
private and public or the key list

168
00:06:01,600 --> 00:06:04,560
which in turn requires to deploy record

169
00:06:04,560 --> 00:06:06,720
uh in your environment or at least have

170
00:06:06,720 --> 00:06:07,919
access to it

171
00:06:07,919 --> 00:06:09,440
um store the certificate and the

172
00:06:09,440 --> 00:06:12,479
signature in a secret storage uh in this

173
00:06:12,479 --> 00:06:14,880
template we use it for km we use the we

174
00:06:14,880 --> 00:06:17,759
use the in aws so use kms for it

175
00:06:17,759 --> 00:06:18,720
and then

176
00:06:18,720 --> 00:06:20,319
you need to create like a small

177
00:06:20,319 --> 00:06:23,919
mechanism for alert and eventing so

178
00:06:23,919 --> 00:06:26,240
you need to get notification for any

179
00:06:26,240 --> 00:06:28,080
function creation or modification so in

180
00:06:28,080 --> 00:06:30,000
this case what we did we used the

181
00:06:30,000 --> 00:06:32,560
cloudtrail with the eventbridge so we

182
00:06:32,560 --> 00:06:34,560
created a rule that only

183
00:06:34,560 --> 00:06:35,680
trigger

184
00:06:35,680 --> 00:06:37,680
create an event a trigger function only

185
00:06:37,680 --> 00:06:40,080
when there is a new cloud function or

186
00:06:40,080 --> 00:06:43,680
modification to uh to a lambda function

187
00:06:43,680 --> 00:06:45,600
now this rule allow us to invoke a

188
00:06:45,600 --> 00:06:48,400
validating function so what we wrote is

189
00:06:48,400 --> 00:06:50,720
a validating function this violating

190
00:06:50,720 --> 00:06:54,000
function take uh the the key whether the

191
00:06:54,000 --> 00:06:55,440
key or the certificate take it from the

192
00:06:55,440 --> 00:06:57,599
kms calculate

193
00:06:57,599 --> 00:06:59,759
uh for this for the function which you

194
00:06:59,759 --> 00:07:01,280
deploy the function which you updated

195
00:07:01,280 --> 00:07:03,120
calculate the hash and calculate you

196
00:07:03,120 --> 00:07:06,639
know if if the same key matches and then

197
00:07:06,639 --> 00:07:08,800
it provides an output which can be used

198
00:07:08,800 --> 00:07:12,000
to whether you want to allow or to block

199
00:07:12,000 --> 00:07:14,560
uh the function invocation process so

200
00:07:14,560 --> 00:07:16,479
it's you know it's like we created like

201
00:07:16,479 --> 00:07:18,720
sort of an admission controller that can

202
00:07:18,720 --> 00:07:21,440
be used for aws account using the native

203
00:07:21,440 --> 00:07:23,919
tools like cloudtrail and eventbranch

204
00:07:23,919 --> 00:07:25,520
you can use the same thing

205
00:07:25,520 --> 00:07:29,680
uh for in in azure and or in google

206
00:07:29,680 --> 00:07:31,759
cloud

207
00:07:31,759 --> 00:07:33,120
so

208
00:07:33,120 --> 00:07:34,639
what i would just say that you know

209
00:07:34,639 --> 00:07:37,599
supply chain the risk is increasing

210
00:07:37,599 --> 00:07:39,759
serverless are special use cases it's

211
00:07:39,759 --> 00:07:40,960
much harder

212
00:07:40,960 --> 00:07:43,440
to validate them you can use open source

213
00:07:43,440 --> 00:07:45,039
tool like sigstor which for code

214
00:07:45,039 --> 00:07:47,840
staining you can use open clarity uh

215
00:07:47,840 --> 00:07:49,759
it's an open source you know repository

216
00:07:49,759 --> 00:07:51,840
we can find templates you can find

217
00:07:51,840 --> 00:07:53,520
violating function going to be uploaded

218
00:07:53,520 --> 00:07:55,919
in the next few days uh and we encourage

219
00:07:55,919 --> 00:07:58,879
everyone to go ahead and use it uh give

220
00:07:58,879 --> 00:08:01,280
us good feedback uh we'll be happy to

221
00:08:01,280 --> 00:08:02,879
fix and modify it could be for we're

222
00:08:02,879 --> 00:08:04,960
gonna plan to upload vitamin function

223
00:08:04,960 --> 00:08:08,080
for any uh cloud provider thank you very

224
00:08:08,080 --> 00:08:11,080
much

225
00:08:15,840 --> 00:08:17,840
yeah thanks ariel this was really good

226
00:08:17,840 --> 00:08:19,680
so uh i have one question so does it

227
00:08:19,680 --> 00:08:21,199
have any performance impact because

228
00:08:21,199 --> 00:08:23,280
typically people see with serverless

229
00:08:23,280 --> 00:08:25,120
they you need to execute very fast right

230
00:08:25,120 --> 00:08:27,599
if you are adding these additional steps

231
00:08:27,599 --> 00:08:28,800
exactly so

232
00:08:28,800 --> 00:08:30,479
yes it has a performance impact this is

233
00:08:30,479 --> 00:08:31,280
why

234
00:08:31,280 --> 00:08:33,200
we in the validator function we use the

235
00:08:33,200 --> 00:08:35,039
keeper the public private keeper so it's

236
00:08:35,039 --> 00:08:37,360
likely traditional mode but then you can

237
00:08:37,360 --> 00:08:39,120
really deploy it locally and kind of a

238
00:08:39,120 --> 00:08:41,760
minimal performance impact

239
00:08:41,760 --> 00:08:44,240
okay interesting

240
00:08:44,240 --> 00:08:47,200
any other questions

241
00:08:48,800 --> 00:08:50,640
okay let's thank you very much

242
00:08:50,640 --> 00:08:53,640
okay

243
00:08:55,760 --> 00:08:57,040
um hello

244
00:08:57,040 --> 00:09:00,240
do you manage the some custom uh root

245
00:09:00,240 --> 00:09:02,880
certificate uh for the key management of

246
00:09:02,880 --> 00:09:04,480
the six store

247
00:09:04,480 --> 00:09:07,600
to create the certificate to sign your

248
00:09:07,600 --> 00:09:09,519
your lambda function

249
00:09:09,519 --> 00:09:11,760
or you're using just the default one

250
00:09:11,760 --> 00:09:13,040
cosine

251
00:09:13,040 --> 00:09:14,240
so i'm not sure i heard the question can

252
00:09:14,240 --> 00:09:17,360
you just repeat so you you you sign okay

253
00:09:17,360 --> 00:09:19,200
you you sign the

254
00:09:19,200 --> 00:09:21,680
the damn the function would be a six

255
00:09:21,680 --> 00:09:22,880
door

256
00:09:22,880 --> 00:09:25,279
sign or whatever yes but which kind of

257
00:09:25,279 --> 00:09:27,440
certificate you use the default one or a

258
00:09:27,440 --> 00:09:29,440
custom certificate from a root

259
00:09:29,440 --> 00:09:31,120
certificate okay so you can use both

260
00:09:31,120 --> 00:09:32,720
right you can use their own if it's a

261
00:09:32,720 --> 00:09:34,240
killer signing or you can use your own

262
00:09:34,240 --> 00:09:35,839
if it's you know you want to make it

263
00:09:35,839 --> 00:09:37,600
simpler to deployment so at the moment

264
00:09:37,600 --> 00:09:39,279
the keyless is only working with certain

265
00:09:39,279 --> 00:09:41,120
frameworks like you know github action

266
00:09:41,120 --> 00:09:43,519
so we use you know the classical

267
00:09:43,519 --> 00:09:45,519
traditional mode if you want to get

268
00:09:45,519 --> 00:09:46,720
universal

269
00:09:46,720 --> 00:09:50,080
but both options are available

270
00:09:50,080 --> 00:09:52,320
yeah thanks ariel

271
00:09:52,320 --> 00:09:55,720
thank you very much

