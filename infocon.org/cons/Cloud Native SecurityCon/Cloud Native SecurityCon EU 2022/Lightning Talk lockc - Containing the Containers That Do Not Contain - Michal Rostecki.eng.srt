1
00:00:00,240 --> 00:00:03,120
yes so hello everyone i'm michael

2
00:00:03,120 --> 00:00:05,839
dostetski and i would like to talk about

3
00:00:05,839 --> 00:00:08,480
the project loxi which is trying to

4
00:00:08,480 --> 00:00:10,559
contain the containers which do not

5
00:00:10,559 --> 00:00:12,400
contain

6
00:00:12,400 --> 00:00:15,040
before i dig into the project a bit

7
00:00:15,040 --> 00:00:16,560
about myself

8
00:00:16,560 --> 00:00:18,320
i'm michael dostetski

9
00:00:18,320 --> 00:00:20,480
my nickname in open source communities

10
00:00:20,480 --> 00:00:22,320
is wadodovsky

11
00:00:22,320 --> 00:00:24,640
i'm a software engineer at deep fence

12
00:00:24,640 --> 00:00:27,599
and nowadays i rewrite mostly in rust

13
00:00:27,599 --> 00:00:30,400
and it became my favorite language

14
00:00:30,400 --> 00:00:33,120
although i have a huge background in go

15
00:00:33,120 --> 00:00:36,320
c and python

16
00:00:37,520 --> 00:00:38,960
what

17
00:00:38,960 --> 00:00:42,920
oh really oh

18
00:00:57,520 --> 00:00:59,440
oh okay

19
00:00:59,440 --> 00:01:02,879
i apologize for that uh so yeah that was

20
00:01:02,879 --> 00:01:06,000
the first slide

21
00:01:06,000 --> 00:01:08,960
it was about me and yeah here uh on this

22
00:01:08,960 --> 00:01:11,200
collocated event we talk about container

23
00:01:11,200 --> 00:01:13,439
security the fact that we have this

24
00:01:13,439 --> 00:01:16,880
collocated event proves so much how this

25
00:01:16,880 --> 00:01:19,280
space is emerging and how much good

26
00:01:19,280 --> 00:01:20,880
progress we have here

27
00:01:20,880 --> 00:01:23,280
although i must say that

28
00:01:23,280 --> 00:01:25,360
the most of initiatives and most of

29
00:01:25,360 --> 00:01:27,600
projects in kubernetes about security

30
00:01:27,600 --> 00:01:29,840
are focusing either on securing

31
00:01:29,840 --> 00:01:31,600
kubernetes api

32
00:01:31,600 --> 00:01:32,560
or

33
00:01:32,560 --> 00:01:35,600
finding vulnerabilities in images

34
00:01:35,600 --> 00:01:36,640
and

35
00:01:36,640 --> 00:01:38,720
the project i'm going to talk about is

36
00:01:38,720 --> 00:01:41,119
trying to cover the other area

37
00:01:41,119 --> 00:01:43,280
it's it's trying to cover container

38
00:01:43,280 --> 00:01:45,759
runtimes and everything which is closer

39
00:01:45,759 --> 00:01:49,119
to the linux kernel and try to enforce

40
00:01:49,119 --> 00:01:51,200
security policies there

41
00:01:51,200 --> 00:01:52,640
and

42
00:01:52,640 --> 00:01:56,000
it also aims to do it in run container

43
00:01:56,000 --> 00:01:58,479
runtime agnostic and container engine

44
00:01:58,479 --> 00:02:01,600
agnostic way in the long term

45
00:02:01,600 --> 00:02:04,960
uh you've probably heard a lot about

46
00:02:04,960 --> 00:02:08,720
ebpf either on kubecon or any kubernetes

47
00:02:08,720 --> 00:02:10,399
related conference

48
00:02:10,399 --> 00:02:13,120
but to briefly describe it

49
00:02:13,120 --> 00:02:15,200
it's a technology coming from the linux

50
00:02:15,200 --> 00:02:16,560
kernel

51
00:02:16,560 --> 00:02:19,680
which allows to run sandbox programs

52
00:02:19,680 --> 00:02:21,840
inside the linux kernel and those

53
00:02:21,840 --> 00:02:25,680
programs are triggered by various events

54
00:02:25,680 --> 00:02:28,800
it can be the event of calling a kernel

55
00:02:28,800 --> 00:02:32,319
function it can be an event related to

56
00:02:32,319 --> 00:02:34,959
incoming network packet in the system

57
00:02:34,959 --> 00:02:38,480
and ebpf is event driven so ebpf allows

58
00:02:38,480 --> 00:02:41,200
you to write programs which are

59
00:02:41,200 --> 00:02:44,080
triggered by specific kernel event

60
00:02:44,080 --> 00:02:46,959
which gets the context of that event and

61
00:02:46,959 --> 00:02:48,879
does something with it

62
00:02:48,879 --> 00:02:52,800
and ebpf is already it has many years

63
00:02:52,800 --> 00:02:54,560
it's widely adopted

64
00:02:54,560 --> 00:02:56,640
there is the most known project called

65
00:02:56,640 --> 00:02:58,159
celium which is

66
00:02:58,159 --> 00:03:00,879
using it with great success for

67
00:03:00,879 --> 00:03:03,200
um for networking for kubernetes

68
00:03:03,200 --> 00:03:04,640
networking

69
00:03:04,640 --> 00:03:06,480
there are also several projects for

70
00:03:06,480 --> 00:03:09,120
example project falco which is

71
00:03:09,120 --> 00:03:11,280
leveraging it for

72
00:03:11,280 --> 00:03:13,920
observing potentially malicious behavior

73
00:03:13,920 --> 00:03:16,000
in the system

74
00:03:16,000 --> 00:03:17,760
although there are many security

75
00:03:17,760 --> 00:03:20,239
projects which already use ebpf for

76
00:03:20,239 --> 00:03:22,319
observing the events and

77
00:03:22,319 --> 00:03:24,239
malicious behavior

78
00:03:24,239 --> 00:03:26,799
the question is whether eppf could be

79
00:03:26,799 --> 00:03:29,760
used also for preventing such behavior

80
00:03:29,760 --> 00:03:30,560
and

81
00:03:30,560 --> 00:03:34,400
actually enforcing policies and

82
00:03:34,400 --> 00:03:36,000
cutting of the attacker from the

83
00:03:36,000 --> 00:03:37,760
containers

84
00:03:37,760 --> 00:03:40,640
and before i come with straightforward

85
00:03:40,640 --> 00:03:42,799
answer to that question

86
00:03:42,799 --> 00:03:45,440
i will explain the another concept in

87
00:03:45,440 --> 00:03:47,200
the linux kernel

88
00:03:47,200 --> 00:03:49,200
which is called lsm

89
00:03:49,200 --> 00:03:52,239
which stands for linux security modules

90
00:03:52,239 --> 00:03:53,200
and

91
00:03:53,200 --> 00:03:55,519
most of you probably know

92
00:03:55,519 --> 00:03:57,840
the two popular security systems in

93
00:03:57,840 --> 00:03:59,360
linux

94
00:03:59,360 --> 00:04:02,560
one is s linux the other is up armor

95
00:04:02,560 --> 00:04:06,640
and both of them are built on top lsm

96
00:04:06,640 --> 00:04:10,080
and lsm is an api in the kernel

97
00:04:10,080 --> 00:04:12,720
which provides various hooks

98
00:04:12,720 --> 00:04:14,560
inside their linux kernel

99
00:04:14,560 --> 00:04:17,199
which led programmers which would let

100
00:04:17,199 --> 00:04:20,238
developers of security security systems

101
00:04:20,238 --> 00:04:22,479
to decide whether some particular action

102
00:04:22,479 --> 00:04:24,639
is allowed to happen

103
00:04:24,639 --> 00:04:26,000
and

104
00:04:26,000 --> 00:04:29,280
huge examples of lsm hooks are

105
00:04:29,280 --> 00:04:30,080
there's

106
00:04:30,080 --> 00:04:33,440
a hook for opening a file so

107
00:04:33,440 --> 00:04:36,000
for example as linux or up armor are

108
00:04:36,000 --> 00:04:38,560
triggered by the event when you

109
00:04:38,560 --> 00:04:40,639
are opening some file in the operating

110
00:04:40,639 --> 00:04:44,000
system it's getting the data what the

111
00:04:44,000 --> 00:04:46,960
file is who is initiating that

112
00:04:46,960 --> 00:04:50,479
file opening action and based on that

113
00:04:50,479 --> 00:04:53,040
security systems are making a decision

114
00:04:53,040 --> 00:04:54,639
whether it's

115
00:04:54,639 --> 00:04:56,400
it looks safe to them

116
00:04:56,400 --> 00:05:00,800
or whether it's a malicious behavior and

117
00:05:00,800 --> 00:05:03,280
they want to deny it

118
00:05:03,280 --> 00:05:04,720
and

119
00:05:04,720 --> 00:05:07,360
well for the most of time

120
00:05:07,360 --> 00:05:09,680
development of linux security modules

121
00:05:09,680 --> 00:05:11,759
involved either writing your kernel

122
00:05:11,759 --> 00:05:14,160
module which would have to be loads with

123
00:05:14,160 --> 00:05:15,919
ls mall for example

124
00:05:15,919 --> 00:05:17,199
or

125
00:05:17,199 --> 00:05:19,680
contributing to the linux kernel source

126
00:05:19,680 --> 00:05:22,720
tree and s linux and up armor actually

127
00:05:22,720 --> 00:05:24,320
have

128
00:05:24,320 --> 00:05:26,880
kernel modules inside the upstream

129
00:05:26,880 --> 00:05:29,280
kernel source code so they are developed

130
00:05:29,280 --> 00:05:31,039
together with the

131
00:05:31,039 --> 00:05:32,639
linux kernel

132
00:05:32,639 --> 00:05:33,840
developers

133
00:05:33,840 --> 00:05:35,120
patches of

134
00:05:35,120 --> 00:05:37,280
s linux and armor developers are

135
00:05:37,280 --> 00:05:38,479
eventually

136
00:05:38,479 --> 00:05:40,160
ending up

137
00:05:40,160 --> 00:05:43,120
in the star wars review and linux kernel

138
00:05:43,120 --> 00:05:44,479
3

139
00:05:44,479 --> 00:05:47,280
but that was for the majority of time

140
00:05:47,280 --> 00:05:50,560
although since kernel 5.7

141
00:05:50,560 --> 00:05:53,600
there is a new type of bpf programs

142
00:05:53,600 --> 00:05:57,360
which actually can leverage lsm hooks so

143
00:05:57,360 --> 00:05:58,800
nowadays

144
00:05:58,800 --> 00:06:01,120
there is no need anymore for writing

145
00:06:01,120 --> 00:06:04,960
kernel modules or control on or

146
00:06:04,960 --> 00:06:07,520
modifying the kernel source code

147
00:06:07,520 --> 00:06:08,880
nowadays

148
00:06:08,880 --> 00:06:11,440
you can write your external bpf program

149
00:06:11,440 --> 00:06:15,120
which is attaching to lsn hooks and

150
00:06:15,120 --> 00:06:18,720
write your own policy engine that way

151
00:06:18,720 --> 00:06:21,440
and you can just load it uh when you are

152
00:06:21,440 --> 00:06:23,759
a realtor user in the system and you

153
00:06:23,759 --> 00:06:26,240
have your own ls mbpf programs you can

154
00:06:26,240 --> 00:06:28,639
just load them and they work on the

155
00:06:28,639 --> 00:06:32,880
kernel if the kernel is recent enough

156
00:06:32,880 --> 00:06:36,880
and that technology is used by loxi and

157
00:06:36,880 --> 00:06:39,199
lox is the project which is trying to

158
00:06:39,199 --> 00:06:41,280
use ebpf lsm

159
00:06:41,280 --> 00:06:44,479
to make containers more secure to make

160
00:06:44,479 --> 00:06:46,720
containers hardened

161
00:06:46,720 --> 00:06:47,600
and

162
00:06:47,600 --> 00:06:50,080
loxi is also using the other thing the

163
00:06:50,080 --> 00:06:52,720
other exciting technology related to a

164
00:06:52,720 --> 00:06:57,360
bpf it's using aya and aya is a rust

165
00:06:57,360 --> 00:06:59,840
library which lets you write bpf

166
00:06:59,840 --> 00:07:02,560
programs purely in rust

167
00:07:02,560 --> 00:07:05,280
both eppf part and user space part there

168
00:07:05,280 --> 00:07:06,319
is no

169
00:07:06,319 --> 00:07:09,120
coding and see needed and there is no

170
00:07:09,120 --> 00:07:12,479
need to use sleep bpf everything is

171
00:07:12,479 --> 00:07:14,319
done in pure rust

172
00:07:14,319 --> 00:07:17,120
and everything you need to build bpf

173
00:07:17,120 --> 00:07:19,919
programs with aya is just having

174
00:07:19,919 --> 00:07:22,160
uh cargo and rust nightly on your

175
00:07:22,160 --> 00:07:23,199
machine

176
00:07:23,199 --> 00:07:25,360
so that's pretty cool i think

177
00:07:25,360 --> 00:07:26,160
and

178
00:07:26,160 --> 00:07:30,000
loxi is aiming to secure containers and

179
00:07:30,000 --> 00:07:32,479
it's doing so by detecting currency

180
00:07:32,479 --> 00:07:33,599
processes

181
00:07:33,599 --> 00:07:35,759
tracking their children and forcing

182
00:07:35,759 --> 00:07:37,599
policies on them

183
00:07:37,599 --> 00:07:40,560
and for now the approach which looks he

184
00:07:40,560 --> 00:07:43,680
took with implementing policies is that

185
00:07:43,680 --> 00:07:46,319
it comes with three predefined policies

186
00:07:46,319 --> 00:07:48,800
inspired by say port security admission

187
00:07:48,800 --> 00:07:51,199
controller in abstract humanities

188
00:07:51,199 --> 00:07:55,280
so these are restricted baseline

189
00:07:55,280 --> 00:07:57,199
policies which are meant for regular

190
00:07:57,199 --> 00:07:59,039
applications running in kubernetes

191
00:07:59,039 --> 00:08:01,520
cluster and the privileged one where

192
00:08:01,520 --> 00:08:03,280
everything is allowed and that

193
00:08:03,280 --> 00:08:06,479
privileged policy is meant mostly for

194
00:08:06,479 --> 00:08:09,520
let's say the part of infrastructure cni

195
00:08:09,520 --> 00:08:10,879
plugins

196
00:08:10,879 --> 00:08:13,759
service meshes or anything which

197
00:08:13,759 --> 00:08:16,560
needs to do something more than regular

198
00:08:16,560 --> 00:08:19,039
containers should be allowed to do

199
00:08:19,039 --> 00:08:21,360
inside kubernetes cluster

200
00:08:21,360 --> 00:08:24,479
and uh to briefly step by step describe

201
00:08:24,479 --> 00:08:27,599
carloxy works is that

202
00:08:27,599 --> 00:08:30,479
there is one bpf program

203
00:08:30,479 --> 00:08:33,440
and there is fa notify

204
00:08:33,440 --> 00:08:36,080
mechanism which is tracking neurancy

205
00:08:36,080 --> 00:08:37,279
processes

206
00:08:37,279 --> 00:08:39,120
so when

207
00:08:39,120 --> 00:08:41,599
a new runc create and transit start

208
00:08:41,599 --> 00:08:43,440
process comes in in the system on the

209
00:08:43,440 --> 00:08:45,680
kubernetes node

210
00:08:45,680 --> 00:08:48,160
or on the node where we are using docker

211
00:08:48,160 --> 00:08:49,519
then

212
00:08:49,519 --> 00:08:52,839
loxi is being aware of that

213
00:08:52,839 --> 00:08:56,480
and um it's getting the container id

214
00:08:56,480 --> 00:08:58,880
and pid of the transient process which

215
00:08:58,880 --> 00:09:00,320
is starting

216
00:09:00,320 --> 00:09:03,360
and based on that it's trying to figure

217
00:09:03,360 --> 00:09:05,519
out whether what's the context of that

218
00:09:05,519 --> 00:09:08,160
container whether it's running in docker

219
00:09:08,160 --> 00:09:10,399
or whether it's running in kubernetes if

220
00:09:10,399 --> 00:09:12,240
it's running in kubernetes it's trying

221
00:09:12,240 --> 00:09:14,640
to figure out the policy which should be

222
00:09:14,640 --> 00:09:17,200
applied there and after figuring that

223
00:09:17,200 --> 00:09:20,880
out it's saving the information about

224
00:09:20,880 --> 00:09:23,279
the initial process runs the process

225
00:09:23,279 --> 00:09:25,360
content container and policy level into

226
00:09:25,360 --> 00:09:29,279
bpf maps and afterwards there are other

227
00:09:29,279 --> 00:09:33,519
lsmbpf programs which based on that

228
00:09:33,519 --> 00:09:35,200
when there is a

229
00:09:35,200 --> 00:09:37,680
lsm hook triggered in the system they

230
00:09:37,680 --> 00:09:39,920
are firstly checking whether the given

231
00:09:39,920 --> 00:09:42,240
process is containerized and if it's

232
00:09:42,240 --> 00:09:45,200
containerized then it's uh applying

233
00:09:45,200 --> 00:09:48,320
policies uh according to

234
00:09:48,320 --> 00:09:50,240
according to logic which is present in

235
00:09:50,240 --> 00:09:53,279
loxi codebase

236
00:09:54,720 --> 00:09:55,839
and

237
00:09:55,839 --> 00:09:59,760
for now loxi is able to enforce policies

238
00:09:59,760 --> 00:10:02,720
on byte mounts so it's able to prevent

239
00:10:02,720 --> 00:10:06,240
baseline and restricted containers from

240
00:10:06,240 --> 00:10:08,640
binding and from bind mounting anything

241
00:10:08,640 --> 00:10:10,720
from the host file system

242
00:10:10,720 --> 00:10:14,480
it also is able to restrict some

243
00:10:14,480 --> 00:10:16,560
potentially

244
00:10:16,560 --> 00:10:19,360
some directories from being accessed

245
00:10:19,360 --> 00:10:20,959
which can potentially leak some

246
00:10:20,959 --> 00:10:23,120
information about the host because for

247
00:10:23,120 --> 00:10:24,720
example like

248
00:10:24,720 --> 00:10:27,760
there is csfs

249
00:10:27,760 --> 00:10:30,399
and directory inside containers which

250
00:10:30,399 --> 00:10:33,200
has i did identical content with the

251
00:10:33,200 --> 00:10:34,800
host file system

252
00:10:34,800 --> 00:10:38,480
so the goal of log c is for every such

253
00:10:38,480 --> 00:10:40,640
an unnamed based

254
00:10:40,640 --> 00:10:43,279
uh directory which can potentially leak

255
00:10:43,279 --> 00:10:45,120
information from the host

256
00:10:45,120 --> 00:10:48,560
loxi is trying to hide them

257
00:10:48,560 --> 00:10:51,200
loxi is also preventing the access to

258
00:10:51,200 --> 00:10:52,880
kernel syslog

259
00:10:52,880 --> 00:10:54,240
because

260
00:10:54,240 --> 00:10:56,880
in on many container runtimes and many

261
00:10:56,880 --> 00:10:59,839
kubernetes clusters you're able to

262
00:10:59,839 --> 00:11:02,720
execute the mask inside container

263
00:11:02,720 --> 00:11:03,680
and

264
00:11:03,680 --> 00:11:06,240
loxy is also coming with the policies

265
00:11:06,240 --> 00:11:07,519
about

266
00:11:07,519 --> 00:11:10,480
user id so it prevents from logging as

267
00:11:10,480 --> 00:11:12,160
root

268
00:11:12,160 --> 00:11:14,000
this is how the policy level can be

269
00:11:14,000 --> 00:11:16,240
applied on kubernetes

270
00:11:16,240 --> 00:11:19,839
and the future plan for loxi is

271
00:11:19,839 --> 00:11:21,440
to

272
00:11:21,440 --> 00:11:23,680
allow executing only specific binaries

273
00:11:23,680 --> 00:11:25,360
in the end every point for

274
00:11:25,360 --> 00:11:27,760
for example

275
00:11:27,760 --> 00:11:30,640
there is a plan of for making the most

276
00:11:30,640 --> 00:11:33,120
of container file system read only

277
00:11:33,120 --> 00:11:35,360
immutable

278
00:11:35,360 --> 00:11:37,440
the plan is to support more container

279
00:11:37,440 --> 00:11:39,360
runtimes because for now only neurons is

280
00:11:39,360 --> 00:11:44,079
supported and more container engines

281
00:11:44,160 --> 00:11:46,079
we also plan to

282
00:11:46,079 --> 00:11:49,040
leverage ebpf lsm attached to c groups

283
00:11:49,040 --> 00:11:52,639
and maybe also a good plan would be to

284
00:11:52,639 --> 00:11:54,399
develop loxi in the direction of

285
00:11:54,399 --> 00:11:57,120
providing a policy language

286
00:11:57,120 --> 00:11:59,440
do i have some time for small demo yet

287
00:11:59,440 --> 00:12:03,200
or not really all right

288
00:12:03,279 --> 00:12:04,240
okay

289
00:12:04,240 --> 00:12:05,600
so

290
00:12:05,600 --> 00:12:08,320
here i have a kubernetes cluster which

291
00:12:08,320 --> 00:12:10,800
is running loxi

292
00:12:10,800 --> 00:12:13,040
so

293
00:12:13,360 --> 00:12:15,360
we can get

294
00:12:15,360 --> 00:12:17,519
lots of it and for now it's just an

295
00:12:17,519 --> 00:12:20,000
empty k3s cluster

296
00:12:20,000 --> 00:12:22,880
let's try to look for lox he locks in

297
00:12:22,880 --> 00:12:25,279
the separate terminal here

298
00:12:25,279 --> 00:12:28,959
for that you can we can use journal ctl

299
00:12:28,959 --> 00:12:31,040
a fu lock c

300
00:12:31,040 --> 00:12:33,120
and here are the locks

301
00:12:33,120 --> 00:12:34,240
and

302
00:12:34,240 --> 00:12:37,200
i prepared two types of demons of

303
00:12:37,200 --> 00:12:40,959
deployments so there is one deployment

304
00:12:40,959 --> 00:12:42,639
with engine x

305
00:12:42,639 --> 00:12:45,120
which should fail and that's because

306
00:12:45,120 --> 00:12:45,870
it's using the

307
00:12:45,870 --> 00:12:47,360
[Music]

308
00:12:47,360 --> 00:12:49,760
default container image of engine x

309
00:12:49,760 --> 00:12:51,920
which is running as root and by default

310
00:12:51,920 --> 00:12:55,519
loxi is enforcing a good practice of

311
00:12:55,519 --> 00:12:57,440
logging as a regular user inside

312
00:12:57,440 --> 00:12:59,200
containers not running

313
00:12:59,200 --> 00:13:01,600
regular applications as a route

314
00:13:01,600 --> 00:13:06,200
so when we try to deploy it

315
00:13:08,000 --> 00:13:10,240
um

316
00:13:10,959 --> 00:13:13,839
loxi should prevent it from running and

317
00:13:13,839 --> 00:13:15,760
let's see whether that works yeah it's

318
00:13:15,760 --> 00:13:18,480
crashing but also there is another

319
00:13:18,480 --> 00:13:20,959
engine x should succeed which is based

320
00:13:20,959 --> 00:13:22,959
on bitnami image with

321
00:13:22,959 --> 00:13:25,040
regular user running

322
00:13:25,040 --> 00:13:28,959
and it's succeeding

323
00:13:33,040 --> 00:13:34,720
thank you for listening

324
00:13:34,720 --> 00:13:37,200
i invite you to check our documentation

325
00:13:37,200 --> 00:13:40,959
which is on loxiproject github.io

326
00:13:40,959 --> 00:13:43,279
we have a github repository where you

327
00:13:43,279 --> 00:13:45,040
can check out the code and the

328
00:13:45,040 --> 00:13:47,600
discussion about the project is

329
00:13:47,600 --> 00:13:50,880
taking place on rus cloud native discord

330
00:13:50,880 --> 00:13:53,440
server where we have a dedicated channel

331
00:13:53,440 --> 00:13:55,040
for the project

332
00:13:55,040 --> 00:13:57,030
thank you very much for listening

333
00:13:57,030 --> 00:14:02,389
[Applause]

