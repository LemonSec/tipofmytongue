1
00:00:00,080 --> 00:00:02,800
so i'm going to talk about git bomb uh

2
00:00:02,800 --> 00:00:04,640
and the title is repurposed purpose

3
00:00:04,640 --> 00:00:07,919
because we are using existing technology

4
00:00:07,919 --> 00:00:10,639
for a slightly new purpose and i'll

5
00:00:10,639 --> 00:00:13,040
explain why

6
00:00:13,040 --> 00:00:16,200
to start

7
00:00:16,239 --> 00:00:17,600
excuse me

8
00:00:17,600 --> 00:00:20,000
um i might not look like or be your sort

9
00:00:20,000 --> 00:00:21,840
of average security expert in a space

10
00:00:21,840 --> 00:00:24,000
i've been doing open source for

11
00:00:24,000 --> 00:00:26,240
20-ish years across a bunch of different

12
00:00:26,240 --> 00:00:29,199
projects from hardware up to

13
00:00:29,199 --> 00:00:31,599
in the cloud and orchestration

14
00:00:31,599 --> 00:00:32,558
but

15
00:00:32,558 --> 00:00:35,200
not security specifically but i have

16
00:00:35,200 --> 00:00:37,040
been studying a lot of concepts and in

17
00:00:37,040 --> 00:00:38,640
the history here and i want to start

18
00:00:38,640 --> 00:00:40,960
with a little history lesson for folks

19
00:00:40,960 --> 00:00:42,160
who are kind of newer to the space or

20
00:00:42,160 --> 00:00:44,399
newer to software and open source going

21
00:00:44,399 --> 00:00:46,559
back to 1984

22
00:00:46,559 --> 00:00:48,800
in a wonderful touring lecture after a

23
00:00:48,800 --> 00:00:50,800
supreme court case on

24
00:00:50,800 --> 00:00:53,120
hackers

25
00:00:53,120 --> 00:00:56,079
ken thompson pointed out that

26
00:00:56,079 --> 00:00:57,840
you really can't trust code if you

27
00:00:57,840 --> 00:00:59,359
didn't write it yourself and you

28
00:00:59,359 --> 00:01:00,879
probably shouldn't trust code anybody

29
00:01:00,879 --> 00:01:03,280
else wrote and that goes not just for

30
00:01:03,280 --> 00:01:04,799
software in our clouds but all the way

31
00:01:04,799 --> 00:01:07,280
down to the firmware in our systems that

32
00:01:07,280 --> 00:01:09,200
you can't really know what's in it if

33
00:01:09,200 --> 00:01:11,680
you didn't build it yourself since then

34
00:01:11,680 --> 00:01:13,200
so much of the work we've been doing and

35
00:01:13,200 --> 00:01:15,200
all of the work in cloud native security

36
00:01:15,200 --> 00:01:16,799
and supply chain security is focused on

37
00:01:16,799 --> 00:01:19,360
solving that question

38
00:01:19,360 --> 00:01:21,200
a decade or so later dorothy denning

39
00:01:21,200 --> 00:01:23,360
pointed out that trust is a declaration

40
00:01:23,360 --> 00:01:25,680
made by an observer it is not a property

41
00:01:25,680 --> 00:01:27,920
inherent in the thing found a property

42
00:01:27,920 --> 00:01:29,439
in the observed

43
00:01:29,439 --> 00:01:31,200
so when we are signing things or

44
00:01:31,200 --> 00:01:33,840
creating attestations with sgx or things

45
00:01:33,840 --> 00:01:36,000
like that this is transitive trust

46
00:01:36,000 --> 00:01:38,320
someone else is making an observation

47
00:01:38,320 --> 00:01:40,240
and then a declaration then we are

48
00:01:40,240 --> 00:01:42,320
trusting their observation because we

49
00:01:42,320 --> 00:01:43,840
trust that person

50
00:01:43,840 --> 00:01:45,759
the trust is not an inherent property in

51
00:01:45,759 --> 00:01:46,799
the thing

52
00:01:46,799 --> 00:01:49,200
so with all of with that long history in

53
00:01:49,200 --> 00:01:50,640
mind

54
00:01:50,640 --> 00:01:52,799
jumping into the specifics about a year

55
00:01:52,799 --> 00:01:55,360
ago i stepped squarely into supply chain

56
00:01:55,360 --> 00:01:57,360
security and tried to take a beginner's

57
00:01:57,360 --> 00:01:59,520
mind approach just listen learn see

58
00:01:59,520 --> 00:02:01,600
what's out there understand what uh

59
00:02:01,600 --> 00:02:03,040
architectures other people have been

60
00:02:03,040 --> 00:02:04,479
building in this space

61
00:02:04,479 --> 00:02:06,719
and if you feel lost like this is just a

62
00:02:06,719 --> 00:02:08,479
tingled web there's so much stuff going

63
00:02:08,479 --> 00:02:10,080
on don't worry you're really not alone a

64
00:02:10,080 --> 00:02:12,879
lot of people feel that way

65
00:02:12,879 --> 00:02:15,599
and at the heart of this

66
00:02:15,599 --> 00:02:17,680
tapestry of projects what we're all

67
00:02:17,680 --> 00:02:19,760
trying to answer is the question am i

68
00:02:19,760 --> 00:02:21,520
safe

69
00:02:21,520 --> 00:02:23,360
can i download this open source package

70
00:02:23,360 --> 00:02:24,959
can i use this

71
00:02:24,959 --> 00:02:26,000
thing

72
00:02:26,000 --> 00:02:27,920
in a way that does not compromise my

73
00:02:27,920 --> 00:02:29,840
safety

74
00:02:29,840 --> 00:02:33,599
and well if it's that complex sometimes

75
00:02:33,599 --> 00:02:35,840
complex models can be made simpler

76
00:02:35,840 --> 00:02:38,480
simply by changing our perspective

77
00:02:38,480 --> 00:02:40,000
just like in physics you look at it from

78
00:02:40,000 --> 00:02:42,000
a different angle and you reduce the

79
00:02:42,000 --> 00:02:43,760
number of variables and it gets easier

80
00:02:43,760 --> 00:02:47,040
to solve so i began asking a few simple

81
00:02:47,040 --> 00:02:49,440
questions as i looked at this domain

82
00:02:49,440 --> 00:02:51,760
this crazy tapestry of stuff

83
00:02:51,760 --> 00:02:53,680
and three simple questions really what

84
00:02:53,680 --> 00:02:56,160
it boils down to identity what is the

85
00:02:56,160 --> 00:02:58,959
software artifact dependency what's in

86
00:02:58,959 --> 00:03:01,680
it all the way down all the fractal

87
00:03:01,680 --> 00:03:04,560
layers of dependencies across different

88
00:03:04,560 --> 00:03:06,560
languages and ecosystems and package

89
00:03:06,560 --> 00:03:07,920
formats

90
00:03:07,920 --> 00:03:10,080
what's at the bottom of that and what's

91
00:03:10,080 --> 00:03:11,840
all in between and are those things

92
00:03:11,840 --> 00:03:14,239
vulnerable do they make me not safe and

93
00:03:14,239 --> 00:03:17,440
metadata is what else is known about it

94
00:03:17,440 --> 00:03:19,680
so digging in

95
00:03:19,680 --> 00:03:21,599
an artifact

96
00:03:21,599 --> 00:03:23,519
in this definition is any software

97
00:03:23,519 --> 00:03:25,920
object of interest and all artifacts are

98
00:03:25,920 --> 00:03:27,280
representable as an array of bytes

99
00:03:27,280 --> 00:03:28,959
because computers

100
00:03:28,959 --> 00:03:30,640
this could be a source code file it

101
00:03:30,640 --> 00:03:32,319
could be in python it could be in java

102
00:03:32,319 --> 00:03:33,680
could be pre-compiled it could be a

103
00:03:33,680 --> 00:03:35,920
shared object file it could be an rpm or

104
00:03:35,920 --> 00:03:37,760
debian package these are all software

105
00:03:37,760 --> 00:03:39,280
artifacts

106
00:03:39,280 --> 00:03:41,440
and they're all represented in computers

107
00:03:41,440 --> 00:03:44,480
as an array of bytes therefore

108
00:03:44,480 --> 00:03:48,239
two artifacts are equivalent only if

109
00:03:48,239 --> 00:03:50,560
the byte array representations of those

110
00:03:50,560 --> 00:03:52,959
artifacts are equivalent

111
00:03:52,959 --> 00:03:54,640
right it should therefore be possible to

112
00:03:54,640 --> 00:03:56,640
identify these with some sort of a

113
00:03:56,640 --> 00:03:58,840
unique id like a

114
00:03:58,840 --> 00:04:02,879
hash so artifact ids should have these

115
00:04:02,879 --> 00:04:05,040
three characteristics they are canonical

116
00:04:05,040 --> 00:04:07,120
unique and immutable

117
00:04:07,120 --> 00:04:08,879
by which i mean

118
00:04:08,879 --> 00:04:10,720
independent parties presented with the

119
00:04:10,720 --> 00:04:12,080
same

120
00:04:12,080 --> 00:04:16,560
byte arrays can derive the same identity

121
00:04:16,560 --> 00:04:19,199
they are unique non-equivalent artifacts

122
00:04:19,199 --> 00:04:21,759
have different identities and they are

123
00:04:21,759 --> 00:04:24,880
immutable and identified artifacts

124
00:04:24,880 --> 00:04:27,040
well if you change the bytes you change

125
00:04:27,040 --> 00:04:29,840
the identity

126
00:04:30,639 --> 00:04:33,440
with those three properties in mind what

127
00:04:33,440 --> 00:04:35,440
are some non-solutions to software

128
00:04:35,440 --> 00:04:36,800
identity

129
00:04:36,800 --> 00:04:38,320
it turns out to file a name is not

130
00:04:38,320 --> 00:04:40,560
unique canonical or immutable because

131
00:04:40,560 --> 00:04:41,840
two people can have the same file in

132
00:04:41,840 --> 00:04:44,080
different directories or just rename the

133
00:04:44,080 --> 00:04:45,919
file so that doesn't work

134
00:04:45,919 --> 00:04:48,479
the url or the perl also doesn't work

135
00:04:48,479 --> 00:04:49,680
because you can change what's on the

136
00:04:49,680 --> 00:04:52,639
other end of that or use multiple urls

137
00:04:52,639 --> 00:04:55,680
to refer to the same bytes

138
00:04:55,680 --> 00:04:56,560
uh

139
00:04:56,560 --> 00:04:58,800
late last year the ntia in the u.s

140
00:04:58,800 --> 00:05:00,560
issued a set of requirements called the

141
00:05:00,560 --> 00:05:02,639
minimum elements of an s-bomb a software

142
00:05:02,639 --> 00:05:04,960
bill of materials those minimum elements

143
00:05:04,960 --> 00:05:06,800
are component name version and supplier

144
00:05:06,800 --> 00:05:09,360
also not unique doesn't work so that's

145
00:05:09,360 --> 00:05:11,759
kind of sad what does work it turns out

146
00:05:11,759 --> 00:05:14,240
git already solved this problem

147
00:05:14,240 --> 00:05:16,240
most of us use git most source codes

148
00:05:16,240 --> 00:05:19,360
already in and get under the hood

149
00:05:19,360 --> 00:05:21,440
git computes an object id for every

150
00:05:21,440 --> 00:05:24,160
artifact stored in a git repository that

151
00:05:24,160 --> 00:05:25,840
function as we know we all love it on

152
00:05:25,840 --> 00:05:27,440
github we can search for that hash and

153
00:05:27,440 --> 00:05:29,199
find an object

154
00:05:29,199 --> 00:05:30,000
so

155
00:05:30,000 --> 00:05:32,320
why not recycle that

156
00:05:32,320 --> 00:05:33,919
if you don't know and most people use

157
00:05:33,919 --> 00:05:35,759
git never look under the hood it's

158
00:05:35,759 --> 00:05:38,240
actually a merkle tree masquerading as a

159
00:05:38,240 --> 00:05:40,240
version control system and a merkle tree

160
00:05:40,240 --> 00:05:42,960
is just a tree structure and data data

161
00:05:42,960 --> 00:05:45,520
structure where a leaf node is labeled

162
00:05:45,520 --> 00:05:47,840
with the cryptographic hash of the data

163
00:05:47,840 --> 00:05:50,160
and every non-leaf node is labeled with

164
00:05:50,160 --> 00:05:52,240
the hashes of the tree underneath it

165
00:05:52,240 --> 00:05:54,960
this has some really fun properties like

166
00:05:54,960 --> 00:05:57,199
if you and i have huge

167
00:05:57,199 --> 00:05:59,360
storage arrays of data we can just

168
00:05:59,360 --> 00:06:01,520
compare the merkle trees and we know

169
00:06:01,520 --> 00:06:03,120
it's the same data we don't have to

170
00:06:03,120 --> 00:06:05,360
actually compare all the data so that's

171
00:06:05,360 --> 00:06:07,840
useful which is why git works so well

172
00:06:07,840 --> 00:06:10,720
so with git bomb we're proposing to just

173
00:06:10,720 --> 00:06:12,800
reuse that existing tech rather than

174
00:06:12,800 --> 00:06:14,479
inventing new tech it's great it's

175
00:06:14,479 --> 00:06:16,479
worked we all rely on it for so much

176
00:06:16,479 --> 00:06:18,319
stuff

177
00:06:18,319 --> 00:06:20,240
we should just use the git oid they get

178
00:06:20,240 --> 00:06:23,520
oid to identify our software artifacts

179
00:06:23,520 --> 00:06:25,919
second simplifying question and i hope i

180
00:06:25,919 --> 00:06:27,520
don't run over time too much uh

181
00:06:27,520 --> 00:06:29,680
dependencies what's in it from source

182
00:06:29,680 --> 00:06:31,280
code to executable the nice things about

183
00:06:31,280 --> 00:06:32,720
a merkle tree is you can link them

184
00:06:32,720 --> 00:06:35,520
together even across languages and we

185
00:06:35,520 --> 00:06:37,199
can abstract that or generalize it to

186
00:06:37,199 --> 00:06:39,039
just a tree

187
00:06:39,039 --> 00:06:42,160
metadata what else is known about it um

188
00:06:42,160 --> 00:06:43,680
all the other stuff

189
00:06:43,680 --> 00:06:45,520
so we've been working with the spdx

190
00:06:45,520 --> 00:06:47,919
community to make sure that metadata and

191
00:06:47,919 --> 00:06:50,880
spdxs bonds can refer to

192
00:06:50,880 --> 00:06:52,560
objects by their get oid and you can

193
00:06:52,560 --> 00:06:55,199
refer to a leaf node or the end artifact

194
00:06:55,199 --> 00:06:56,960
or any intermediate artifact it all

195
00:06:56,960 --> 00:06:57,840
works

196
00:06:57,840 --> 00:07:00,000
so you have your s-bombs for metadata

197
00:07:00,000 --> 00:07:03,120
and your git bomb for the artifact tree

198
00:07:03,120 --> 00:07:05,840
why is this so cool

199
00:07:05,840 --> 00:07:06,960
because

200
00:07:06,960 --> 00:07:09,840
when there's a cbe like log4j if you

201
00:07:09,840 --> 00:07:13,039
associate it to the software id the

202
00:07:13,039 --> 00:07:16,400
gitoid that has those three properties

203
00:07:16,400 --> 00:07:19,440
you can then find it in any tree of

204
00:07:19,440 --> 00:07:22,240
software anywhere with different

205
00:07:22,240 --> 00:07:24,800
s-bonds because i might give you a jvm

206
00:07:24,800 --> 00:07:26,240
and someone else might give you a jpm

207
00:07:26,240 --> 00:07:29,120
they both have log4j somewhere deep in

208
00:07:29,120 --> 00:07:30,479
that tree

209
00:07:30,479 --> 00:07:32,960
get bomb would help you find that

210
00:07:32,960 --> 00:07:35,840
so git bomb is a tool a minimalistic

211
00:07:35,840 --> 00:07:36,720
scheme

212
00:07:36,720 --> 00:07:39,360
specifically for build tools to build a

213
00:07:39,360 --> 00:07:42,560
compact artifact dependency graph

214
00:07:42,560 --> 00:07:45,039
that can track every source code file

215
00:07:45,039 --> 00:07:49,440
from the very beginning to the very end

216
00:07:49,440 --> 00:07:50,479
embed

217
00:07:50,479 --> 00:07:53,759
an identifier for that unique tree

218
00:07:53,759 --> 00:07:56,400
in the artifact that was produced so the

219
00:07:56,400 --> 00:07:58,319
docker image manifest could have a

220
00:07:58,319 --> 00:08:00,560
little identifier you can then look up

221
00:08:00,560 --> 00:08:02,639
that identifier and find the merkle tree

222
00:08:02,639 --> 00:08:04,879
of everything that was used to build

223
00:08:04,879 --> 00:08:07,599
that docker image for example

224
00:08:07,599 --> 00:08:08,960
and we can do this in a language

225
00:08:08,960 --> 00:08:12,400
heterogeneous way across everything and

226
00:08:12,400 --> 00:08:15,440
really cool part zero developer effort

227
00:08:15,440 --> 00:08:17,360
instead of having to adopt a new ci

228
00:08:17,360 --> 00:08:18,479
system or

229
00:08:18,479 --> 00:08:22,240
learn a new tool for generating s-bombs

230
00:08:22,240 --> 00:08:24,720
our approach is to focus on a small

231
00:08:24,720 --> 00:08:26,479
bounded set of projects

232
00:08:26,479 --> 00:08:28,400
that already have large communities and

233
00:08:28,400 --> 00:08:30,720
often funding behind them

234
00:08:30,720 --> 00:08:32,640
the language ecosystems like python and

235
00:08:32,640 --> 00:08:35,440
java and go and rust and the build tools

236
00:08:35,440 --> 00:08:38,559
like gcc and llvm

237
00:08:38,559 --> 00:08:40,799
add a small change there

238
00:08:40,799 --> 00:08:43,200
and everybody in the world benefits and

239
00:08:43,200 --> 00:08:45,920
this happens automatically

240
00:08:45,920 --> 00:08:48,160
so we already have four proof concepts

241
00:08:48,160 --> 00:08:50,560
running for this we've done it for llvm

242
00:08:50,560 --> 00:08:52,800
uh gcc and ld

243
00:08:52,800 --> 00:08:55,200
we've added some stuff in go

244
00:08:55,200 --> 00:08:56,560
this isn't upstream yet these are just

245
00:08:56,560 --> 00:08:58,080
our proof of concepts on github you can

246
00:08:58,080 --> 00:09:00,080
grab them from those urls you should

247
00:09:00,080 --> 00:09:03,120
definitely trust my qr codes

248
00:09:03,120 --> 00:09:05,680
and the fourth one bom sh is a really

249
00:09:05,680 --> 00:09:08,320
cool set of python and bash scripts that

250
00:09:08,320 --> 00:09:10,640
use s trace that in theory should be

251
00:09:10,640 --> 00:09:12,399
able to instrument any build process now

252
00:09:12,399 --> 00:09:13,760
it's kind of slower because it's running

253
00:09:13,760 --> 00:09:15,279
from outside

254
00:09:15,279 --> 00:09:16,080
we'd

255
00:09:16,080 --> 00:09:17,920
suggest people run this inside the build

256
00:09:17,920 --> 00:09:20,160
tool instead of observing it because

257
00:09:20,160 --> 00:09:22,000
well that's the source of truth but

258
00:09:22,000 --> 00:09:24,160
here's a poc you could use

259
00:09:24,160 --> 00:09:26,080
and bomb message already includes a way

260
00:09:26,080 --> 00:09:27,680
to cross-reference

261
00:09:27,680 --> 00:09:30,160
the get void of all your files against

262
00:09:30,160 --> 00:09:31,839
cv databases

263
00:09:31,839 --> 00:09:33,680
now most cv databases today don't have

264
00:09:33,680 --> 00:09:35,279
this metadata but if you do and you can

265
00:09:35,279 --> 00:09:36,720
build them yourself if you have one you

266
00:09:36,720 --> 00:09:38,640
can cross-reference so that's really

267
00:09:38,640 --> 00:09:41,200
cool and you know it's an open community

268
00:09:41,200 --> 00:09:43,200
you're all welcome to join get involved

269
00:09:43,200 --> 00:09:45,440
we'd love specifically more language

270
00:09:45,440 --> 00:09:47,200
ecosystems and build tools to come join

271
00:09:47,200 --> 00:09:49,920
our meetings and make sure that the spec

272
00:09:49,920 --> 00:09:52,000
we're building right now includes

273
00:09:52,000 --> 00:09:53,600
everything you would need for your

274
00:09:53,600 --> 00:09:56,399
ecosystem so this works for everybody

275
00:09:56,399 --> 00:09:57,440
thanks so much for listening you can

276
00:09:57,440 --> 00:09:59,890
find me on twitter slack etc

277
00:09:59,890 --> 00:10:06,480
[Applause]

278
00:10:06,480 --> 00:10:07,760
this was really

279
00:10:07,760 --> 00:10:09,920
informative this was really interesting

280
00:10:09,920 --> 00:10:10,880
uh

281
00:10:10,880 --> 00:10:13,040
we have time for one question maybe if

282
00:10:13,040 --> 00:10:16,760
anyone has any questions

283
00:10:27,120 --> 00:10:28,720
how do you think you're going to use it

284
00:10:28,720 --> 00:10:30,399
for searching

285
00:10:30,399 --> 00:10:34,160
for artifacts i can't hear you sorry

286
00:10:34,160 --> 00:10:35,279
how are you going to use it for

287
00:10:35,279 --> 00:10:37,200
searching for artifacts

288
00:10:37,200 --> 00:10:38,560
how do you the question i think is how

289
00:10:38,560 --> 00:10:39,920
do you use it for searching for

290
00:10:39,920 --> 00:10:41,040
artifacts

291
00:10:41,040 --> 00:10:44,000
um if a build process is or is

292
00:10:44,000 --> 00:10:46,720
instrumented with this

293
00:10:46,720 --> 00:10:49,360
the produced git bomb trees

294
00:10:49,360 --> 00:10:51,600
would then need to be uploaded somewhere

295
00:10:51,600 --> 00:10:54,240
whether it's git hub or

296
00:10:54,240 --> 00:10:55,839
some sort of a universal shared file

297
00:10:55,839 --> 00:10:57,200
system we have some we have actually

298
00:10:57,200 --> 00:10:58,800
proof of concept right now about using

299
00:10:58,800 --> 00:11:00,720
global fs for this and then you can

300
00:11:00,720 --> 00:11:02,720
search that

301
00:11:02,720 --> 00:11:03,760
cool

302
00:11:03,760 --> 00:11:07,880
thanks again yeah thanks

