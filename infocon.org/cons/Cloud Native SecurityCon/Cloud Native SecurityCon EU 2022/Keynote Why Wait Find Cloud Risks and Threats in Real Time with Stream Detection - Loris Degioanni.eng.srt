1
00:00:00,080 --> 00:00:02,800
good morning everyone my name is uh

2
00:00:02,800 --> 00:00:05,680
loris dejani i'm cto and founder at

3
00:00:05,680 --> 00:00:08,639
sysdig sysdig is a leading provider in

4
00:00:08,639 --> 00:00:12,559
container kubernetes and cloud security

5
00:00:12,559 --> 00:00:13,360
and

6
00:00:13,360 --> 00:00:16,720
of course we're hiring

7
00:00:16,720 --> 00:00:18,720
today

8
00:00:18,720 --> 00:00:20,960
i'm going to talk about

9
00:00:20,960 --> 00:00:23,840
detecting threats in cloud environments

10
00:00:23,840 --> 00:00:24,960
and in particular in cloud

11
00:00:24,960 --> 00:00:27,519
infrastructures and i want to start by

12
00:00:27,519 --> 00:00:29,599
just you know recapping you know what

13
00:00:29,599 --> 00:00:32,640
you can do in with the majority of cloud

14
00:00:32,640 --> 00:00:34,320
providers typically cloud providers

15
00:00:34,320 --> 00:00:35,280
offer

16
00:00:35,280 --> 00:00:39,120
standardized opinionated facilities for

17
00:00:39,120 --> 00:00:40,800
collection of logs from different

18
00:00:40,800 --> 00:00:43,680
services that are ideal

19
00:00:43,680 --> 00:00:44,559
for

20
00:00:44,559 --> 00:00:46,480
collecting information that can be used

21
00:00:46,480 --> 00:00:48,719
to detect threads in

22
00:00:48,719 --> 00:00:51,760
cloud infrastructures for example in

23
00:00:51,760 --> 00:00:54,399
amazon we have cloudtrail every cloud

24
00:00:54,399 --> 00:00:57,120
provider has similar services and cloud

25
00:00:57,120 --> 00:00:58,320
trade is very nice because it

26
00:00:58,320 --> 00:01:00,160
automatically collects in a standard

27
00:01:00,160 --> 00:01:02,559
format logs from multiple services and

28
00:01:02,559 --> 00:01:04,959
puts them in

29
00:01:04,959 --> 00:01:07,119
a cheap storage for example

30
00:01:07,119 --> 00:01:09,280
s3 on aws

31
00:01:09,280 --> 00:01:10,640
now what we do

32
00:01:10,640 --> 00:01:12,479
after that is a little bit more

33
00:01:12,479 --> 00:01:14,640
complicated because this log needs to be

34
00:01:14,640 --> 00:01:16,799
essentially collected parsed and treated

35
00:01:16,799 --> 00:01:18,880
in some way and very often the way

36
00:01:18,880 --> 00:01:19,840
people

37
00:01:19,840 --> 00:01:22,400
hunt for threats in these logs is

38
00:01:22,400 --> 00:01:26,799
they take them they move them to a login

39
00:01:26,799 --> 00:01:29,280
backend which requires both bandwidth

40
00:01:29,280 --> 00:01:31,920
cost and storage cost and then they

41
00:01:31,920 --> 00:01:33,680
essentially create

42
00:01:33,680 --> 00:01:36,479
alerts or rules or something like that

43
00:01:36,479 --> 00:01:38,960
based on that

44
00:01:38,960 --> 00:01:42,799
i argue or i propose a better way to do

45
00:01:42,799 --> 00:01:43,840
this

46
00:01:43,840 --> 00:01:46,320
and a way that is based completely on

47
00:01:46,320 --> 00:01:49,040
open source and it's based on

48
00:01:49,040 --> 00:01:52,560
falco which is a cloud native foundation

49
00:01:52,560 --> 00:01:54,399
incubating project

50
00:01:54,399 --> 00:01:55,520
and

51
00:01:55,520 --> 00:01:58,000
the best way to that i have to describe

52
00:01:58,000 --> 00:02:01,600
falco is falco is the security camera

53
00:02:01,600 --> 00:02:04,320
for modern apps falco is deployed by

54
00:02:04,320 --> 00:02:07,040
many many thousands of users around the

55
00:02:07,040 --> 00:02:08,479
world from you know

56
00:02:08,479 --> 00:02:09,679
small

57
00:02:09,679 --> 00:02:12,640
single single machine deployments to

58
00:02:12,640 --> 00:02:14,720
giant scale deployments in some of the

59
00:02:14,720 --> 00:02:16,400
of the biggest

60
00:02:16,400 --> 00:02:19,120
companies in the world and falco is

61
00:02:19,120 --> 00:02:20,879
based on

62
00:02:20,879 --> 00:02:22,959
some core principles

63
00:02:22,959 --> 00:02:26,239
the idea of collecting granular data

64
00:02:26,239 --> 00:02:28,239
traditionally coming from containers and

65
00:02:28,239 --> 00:02:30,480
for system calls using for example ebpf

66
00:02:30,480 --> 00:02:32,480
as a source of collection

67
00:02:32,480 --> 00:02:34,319
the idea of enriching this data with

68
00:02:34,319 --> 00:02:38,160
context for example kubernetes metadata

69
00:02:38,160 --> 00:02:42,000
context the the idea of having uh robust

70
00:02:42,000 --> 00:02:44,080
defaults and something that works very

71
00:02:44,080 --> 00:02:46,160
well out of the box to detect threats

72
00:02:46,160 --> 00:02:48,480
into runtime security but also have a

73
00:02:48,480 --> 00:02:50,959
nice language for extensibility

74
00:02:50,959 --> 00:02:53,920
and falco is optimized for real time and

75
00:02:53,920 --> 00:02:56,000
runtime security

76
00:02:56,000 --> 00:03:00,400
it's simple and is designed to work at

77
00:03:00,400 --> 00:03:03,040
the edge and move as little data as

78
00:03:03,040 --> 00:03:06,879
possible falco traditionally works for

79
00:03:06,879 --> 00:03:08,239
containers

80
00:03:08,239 --> 00:03:09,920
and

81
00:03:09,920 --> 00:03:12,239
virtual machines and sits on every

82
00:03:12,239 --> 00:03:14,319
single endpoint and is able to capture

83
00:03:14,319 --> 00:03:16,000
the data from multiple containers by

84
00:03:16,000 --> 00:03:18,000
sitting in the kernel of the of the

85
00:03:18,000 --> 00:03:19,920
operating system and these these are

86
00:03:19,920 --> 00:03:22,319
some examples of detections of rules

87
00:03:22,319 --> 00:03:24,000
that you have with falco you know a

88
00:03:24,000 --> 00:03:26,720
shell is running in a container

89
00:03:26,720 --> 00:03:29,120
somebody is modifying a system binary

90
00:03:29,120 --> 00:03:31,760
somebody is trying to escape a container

91
00:03:31,760 --> 00:03:34,959
and so on and so forth so very granular

92
00:03:34,959 --> 00:03:37,120
real-time detection that's why i call it

93
00:03:37,120 --> 00:03:38,959
a security camera

94
00:03:38,959 --> 00:03:41,120
what we've done recently as falco

95
00:03:41,120 --> 00:03:43,040
community is

96
00:03:43,040 --> 00:03:45,280
with extended falco this diagram shows

97
00:03:45,280 --> 00:03:46,480
essentially you know the flow of

98
00:03:46,480 --> 00:03:49,200
information from falcon typically uh

99
00:03:49,200 --> 00:03:51,120
historically falco is capturing system

100
00:03:51,120 --> 00:03:52,879
calls using either a kernel module or an

101
00:03:52,879 --> 00:03:55,280
ebpf probe we've extended it through a

102
00:03:55,280 --> 00:03:56,720
plug-in system

103
00:03:56,720 --> 00:03:59,439
so that it's essentially possible now to

104
00:03:59,439 --> 00:04:01,680
collect it to arbitrary sources and

105
00:04:01,680 --> 00:04:04,640
we've created for example a plug-in for

106
00:04:04,640 --> 00:04:06,080
cloudtrail

107
00:04:06,080 --> 00:04:07,200
and

108
00:04:07,200 --> 00:04:09,519
now thanks to this plugin you can very

109
00:04:09,519 --> 00:04:12,879
easily take falco connected

110
00:04:12,879 --> 00:04:15,040
automatically to your source of logs in

111
00:04:15,040 --> 00:04:16,720
cloudtrail and without having to copy

112
00:04:16,720 --> 00:04:19,040
the data without having to put them in a

113
00:04:19,040 --> 00:04:21,358
sim tool or in a login tool and so on

114
00:04:21,358 --> 00:04:23,840
falco in real time can just see at the

115
00:04:23,840 --> 00:04:25,520
stream of events that cloudtrail is

116
00:04:25,520 --> 00:04:28,160
producing and this is an example for

117
00:04:28,160 --> 00:04:31,040
example of overall uh i'm not trying to

118
00:04:31,040 --> 00:04:33,440
teach you the falco syntax it's not r

119
00:04:33,440 --> 00:04:35,120
but this is not the scope here but as

120
00:04:35,120 --> 00:04:37,120
you can see this is a rule that detects

121
00:04:37,120 --> 00:04:39,040
a console again without multi-factor

122
00:04:39,040 --> 00:04:40,960
authentication and as you can see you

123
00:04:40,960 --> 00:04:43,360
know uh the condition is typically like

124
00:04:43,360 --> 00:04:46,000
the the the rule the the actual filter

125
00:04:46,000 --> 00:04:48,560
that falco looks uh in in the events and

126
00:04:48,560 --> 00:04:50,400
as you can see it's pretty readable and

127
00:04:50,400 --> 00:04:53,040
allows you to express uh essentially

128
00:04:53,040 --> 00:04:55,520
falco rules using clutter events of

129
00:04:55,520 --> 00:04:57,280
course you can write your own cloud real

130
00:04:57,280 --> 00:04:59,520
events you don't have to because falco

131
00:04:59,520 --> 00:05:03,120
comes equipped with a nice set of

132
00:05:03,120 --> 00:05:04,639
default rules that

133
00:05:04,639 --> 00:05:07,520
allow you to detect a bunch of stuff

134
00:05:07,520 --> 00:05:08,720
including

135
00:05:08,720 --> 00:05:10,400
configuration changes

136
00:05:10,400 --> 00:05:13,039
unusual behavior from from users data

137
00:05:13,039 --> 00:05:14,800
exfiltration for example from history

138
00:05:14,800 --> 00:05:17,680
buckets somebody may be making an extra

139
00:05:17,680 --> 00:05:19,360
bucket public or somebody accessing

140
00:05:19,360 --> 00:05:21,199
sensitive data on the bucket all of this

141
00:05:21,199 --> 00:05:23,600
kind of stuff is already part of the

142
00:05:23,600 --> 00:05:25,440
default rules that you get

143
00:05:25,440 --> 00:05:28,080
when you deploy falco for

144
00:05:28,080 --> 00:05:31,199
cloudflare security

145
00:05:31,520 --> 00:05:34,799
to summarize uh

146
00:05:35,360 --> 00:05:36,400
we

147
00:05:36,400 --> 00:05:39,039
have something that uh

148
00:05:39,039 --> 00:05:41,840
compared to maybe the traditional way of

149
00:05:41,840 --> 00:05:44,320
doing things first of all leverages a

150
00:05:44,320 --> 00:05:45,520
tool that is

151
00:05:45,520 --> 00:05:48,800
a cncf tool that is free as a free beer

152
00:05:48,800 --> 00:05:49,840
and free as

153
00:05:49,840 --> 00:05:51,520
free speech

154
00:05:51,520 --> 00:05:53,360
is real time

155
00:05:53,360 --> 00:05:55,840
and responsive so it doesn't need to

156
00:05:55,840 --> 00:05:58,479
index the data it doesn't need to

157
00:05:58,479 --> 00:06:00,639
treat the data before it generates the

158
00:06:00,639 --> 00:06:03,120
alerts but is able to in few seconds

159
00:06:03,120 --> 00:06:05,360
essentially to notify you when there's

160
00:06:05,360 --> 00:06:07,520
something wrong going in your cloud

161
00:06:07,520 --> 00:06:10,160
infrastructure and this is a very good

162
00:06:10,160 --> 00:06:12,240
complement to like i don't know cloud

163
00:06:12,240 --> 00:06:14,960
security posture management tools that

164
00:06:14,960 --> 00:06:17,199
maybe look at apis and do this kind of

165
00:06:17,199 --> 00:06:18,560
stuff because

166
00:06:18,560 --> 00:06:20,800
the use of uh real-time security and

167
00:06:20,800 --> 00:06:23,440
runtime security with falco is

168
00:06:23,440 --> 00:06:27,120
very uh instantaneous and uh and

169
00:06:27,120 --> 00:06:30,880
immediate uh provides full coverage and

170
00:06:30,880 --> 00:06:32,479
it's very interesting because now with

171
00:06:32,479 --> 00:06:36,400
falco you have protection both for

172
00:06:36,400 --> 00:06:37,440
the

173
00:06:37,440 --> 00:06:40,240
workloads for the containers

174
00:06:40,240 --> 00:06:42,880
and with the same tool with the same

175
00:06:42,880 --> 00:06:45,360
syntax with the same deployment you also

176
00:06:45,360 --> 00:06:46,960
have coverage for the cloud

177
00:06:46,960 --> 00:06:49,120
infrastructure where very often your

178
00:06:49,120 --> 00:06:51,120
kubernetes your containers

179
00:06:51,120 --> 00:06:53,120
your virtual machines run

180
00:06:53,120 --> 00:06:55,360
falco is efficient

181
00:06:55,360 --> 00:06:59,120
therefore it's very cheap

182
00:06:59,120 --> 00:07:01,280
don't doesn't store data requires very

183
00:07:01,280 --> 00:07:03,280
little cpu because it's uh it's very

184
00:07:03,280 --> 00:07:05,360
optimized for like ebpf system called

185
00:07:05,360 --> 00:07:06,880
treatment

186
00:07:06,880 --> 00:07:08,560
it's scalable

187
00:07:08,560 --> 00:07:11,360
so it's designed to work at scale in big

188
00:07:11,360 --> 00:07:13,840
infrastructures and of course you know

189
00:07:13,840 --> 00:07:17,759
it allows to avoid expensive copies and

190
00:07:17,759 --> 00:07:19,759
data movements so it's also

191
00:07:19,759 --> 00:07:21,120
very affordable

192
00:07:21,120 --> 00:07:23,199
i could keep talking about that but uh i

193
00:07:23,199 --> 00:07:24,400
think i

194
00:07:24,400 --> 00:07:26,880
just concluding by giving you some

195
00:07:26,880 --> 00:07:28,560
pointers uh

196
00:07:28,560 --> 00:07:30,800
the first one is the falco website the

197
00:07:30,800 --> 00:07:34,639
second one is the community where uh

198
00:07:34,639 --> 00:07:37,120
myself and all of the other falco

199
00:07:37,120 --> 00:07:38,479
contributors and maintainers get

200
00:07:38,479 --> 00:07:40,240
together we have a slack channel we have

201
00:07:40,240 --> 00:07:42,000
a weekly zoom call

202
00:07:42,000 --> 00:07:45,120
and we're always welcome to see

203
00:07:45,120 --> 00:07:48,240
both new contributors but also new users

204
00:07:48,240 --> 00:07:50,479
that give us feedback so these are the

205
00:07:50,479 --> 00:07:51,599
links

206
00:07:51,599 --> 00:07:54,400
thank you for listening and

207
00:07:54,400 --> 00:07:56,040
happy security

208
00:07:56,040 --> 00:07:59,910
[Applause]

