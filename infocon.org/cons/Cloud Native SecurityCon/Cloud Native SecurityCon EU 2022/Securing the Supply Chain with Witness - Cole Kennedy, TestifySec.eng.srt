1
00:00:00,000 --> 00:00:01,199
hello everyone i hope you're having a

2
00:00:01,199 --> 00:00:03,040
great con i'm here today to talk to you

3
00:00:03,040 --> 00:00:05,680
about witness it's a new framework for

4
00:00:05,680 --> 00:00:10,320
supply chain security from testify sec

5
00:00:11,360 --> 00:00:13,840
my name is cole kennedy i am the ceo

6
00:00:13,840 --> 00:00:16,880
testify sec we were founded about seven

7
00:00:16,880 --> 00:00:19,359
months ago and uh we were founded really

8
00:00:19,359 --> 00:00:22,000
to solve this problem around uh

9
00:00:22,000 --> 00:00:24,560
uh supply chain security uh with respect

10
00:00:24,560 --> 00:00:26,960
to software and vendors and and other

11
00:00:26,960 --> 00:00:29,119
compliance concerns

12
00:00:29,119 --> 00:00:31,760
uh you know our team is growing uh you

13
00:00:31,760 --> 00:00:32,960
know it's probably probably gonna be

14
00:00:32,960 --> 00:00:35,360
bigger uh next week uh so we're really

15
00:00:35,360 --> 00:00:37,600
excited to have everybody on board as we

16
00:00:37,600 --> 00:00:39,760
as we solve this problem um you know

17
00:00:39,760 --> 00:00:41,680
it's not just me here is we have a great

18
00:00:41,680 --> 00:00:43,760
team of experts um and you know we got a

19
00:00:43,760 --> 00:00:46,320
lot of plans coming up

20
00:00:46,320 --> 00:00:48,800
um so but here on top here to talk to

21
00:00:48,800 --> 00:00:51,039
you about witness um you know we started

22
00:00:51,039 --> 00:00:53,840
working on witness uh after kubecon last

23
00:00:53,840 --> 00:00:56,480
year mikhail and i sat down

24
00:00:56,480 --> 00:00:58,719
and really looked at the complexity of

25
00:00:58,719 --> 00:01:01,199
you know solving this uh supply chain

26
00:01:01,199 --> 00:01:03,199
problem right how do we

27
00:01:03,199 --> 00:01:05,760
how do we verify that artifacts are what

28
00:01:05,760 --> 00:01:08,320
we expect them to be um so we created

29
00:01:08,320 --> 00:01:10,240
this at the station framework it

30
00:01:10,240 --> 00:01:12,000
implements the in total spec including

31
00:01:12,000 --> 00:01:16,240
the ite 5 ide 6 ite 7.

32
00:01:16,240 --> 00:01:18,320
you know myself mikhail worked together

33
00:01:18,320 --> 00:01:19,680
with community

34
00:01:19,680 --> 00:01:21,840
around some of these specs and did some

35
00:01:21,840 --> 00:01:24,080
implementation in in the upstream

36
00:01:24,080 --> 00:01:25,520
repositories

37
00:01:25,520 --> 00:01:26,400
um

38
00:01:26,400 --> 00:01:28,479
we also use open policy agent we changed

39
00:01:28,479 --> 00:01:31,600
the layout uh specification from the uh

40
00:01:31,600 --> 00:01:33,759
standard nintendo layout to something

41
00:01:33,759 --> 00:01:35,439
that was a little bit more flexible it

42
00:01:35,439 --> 00:01:38,079
allowed us to use some tools uh

43
00:01:38,079 --> 00:01:40,159
you know that have come about since that

44
00:01:40,159 --> 00:01:42,399
that layout was created

45
00:01:42,399 --> 00:01:44,880
and we also have extensible support for

46
00:01:44,880 --> 00:01:46,560
different back ends in different types

47
00:01:46,560 --> 00:01:49,280
of a testers uh so right now we support

48
00:01:49,280 --> 00:01:51,360
recore as a one of our plugable back

49
00:01:51,360 --> 00:01:53,439
ends and then we have several testers

50
00:01:53,439 --> 00:01:56,399
that we go over go over a little bit

51
00:01:56,399 --> 00:01:58,719
and really what we wanted to do was

52
00:01:58,719 --> 00:02:00,560
provide a framework that was robust

53
00:02:00,560 --> 00:02:03,200
enough to meet salsa level for

54
00:02:03,200 --> 00:02:06,079
providence requirements and eventually

55
00:02:06,079 --> 00:02:08,399
uh meet also level four be able to

56
00:02:08,399 --> 00:02:11,120
automate the um guarantees around salsa

57
00:02:11,120 --> 00:02:12,800
on the floor and be able to create

58
00:02:12,800 --> 00:02:16,160
policy against those types of um

59
00:02:16,160 --> 00:02:17,760
constraints

60
00:02:17,760 --> 00:02:19,680
so what is salsa level for providence

61
00:02:19,680 --> 00:02:21,760
requirement so we need to have all that

62
00:02:21,760 --> 00:02:23,760
providence need to be available we we

63
00:02:23,760 --> 00:02:25,760
meet that by publishing that providence

64
00:02:25,760 --> 00:02:27,599
to recore we need to make sure that

65
00:02:27,599 --> 00:02:29,920
province is authenticated

66
00:02:29,920 --> 00:02:32,080
we sign all the providence within

67
00:02:32,080 --> 00:02:35,360
witness uh with either spiffy spire or

68
00:02:35,360 --> 00:02:38,319
you know for machine identity or we use

69
00:02:38,319 --> 00:02:40,959
full cl for for user identity

70
00:02:40,959 --> 00:02:42,319
you know met kind of coincides with

71
00:02:42,319 --> 00:02:44,160
service generated provenance right with

72
00:02:44,160 --> 00:02:46,400
the whole point of witness and in total

73
00:02:46,400 --> 00:02:48,720
is to automatically generate

74
00:02:48,720 --> 00:02:50,720
the inputs and the outputs of a

75
00:02:50,720 --> 00:02:53,280
compilation process so we do that by

76
00:02:53,280 --> 00:02:56,360
implementing the antenna spec uh

77
00:02:56,360 --> 00:02:58,640
non-falsifiable right that that goes

78
00:02:58,640 --> 00:02:59,680
into

79
00:02:59,680 --> 00:03:02,239
uh our ability um

80
00:03:02,239 --> 00:03:04,480
to use short-lived certificates or

81
00:03:04,480 --> 00:03:06,720
short-lived keys as well as a time stamp

82
00:03:06,720 --> 00:03:09,120
from record to ensure that you know

83
00:03:09,120 --> 00:03:11,360
these access stations are signed but not

84
00:03:11,360 --> 00:03:13,040
only that the private key material that

85
00:03:13,040 --> 00:03:15,120
they're used to sign

86
00:03:15,120 --> 00:03:16,800
is protected

87
00:03:16,800 --> 00:03:18,560
and then finally we want to make sure

88
00:03:18,560 --> 00:03:21,200
that all the dependencies is complete

89
00:03:21,200 --> 00:03:23,440
right we have a full build materials of

90
00:03:23,440 --> 00:03:26,159
what went into that build and we do that

91
00:03:26,159 --> 00:03:28,400
through our uh tracing ability within

92
00:03:28,400 --> 00:03:29,680
witness

93
00:03:29,680 --> 00:03:31,440
um so let's go over witnesses trust

94
00:03:31,440 --> 00:03:33,360
monger right you know see the turtle

95
00:03:33,360 --> 00:03:35,280
there because it really joe cross is all

96
00:03:35,280 --> 00:03:36,720
about you know finding that bottom

97
00:03:36,720 --> 00:03:37,680
turtle

98
00:03:37,680 --> 00:03:39,680
and getting rid of it and we do that by

99
00:03:39,680 --> 00:03:43,680
implementing spiffy spire um to uh

100
00:03:43,680 --> 00:03:46,000
authenticate identities

101
00:03:46,000 --> 00:03:48,640
machine identities rather than using the

102
00:03:48,640 --> 00:03:51,840
token so we use remote attestation

103
00:03:51,840 --> 00:03:53,200
to

104
00:03:53,200 --> 00:03:55,439
verify the identity of the machines that

105
00:03:55,439 --> 00:03:58,239
are doing the build process

106
00:03:58,239 --> 00:04:00,959
second we we incrementally establish

107
00:04:00,959 --> 00:04:03,360
trust with these cryptographic documents

108
00:04:03,360 --> 00:04:06,239
um so if you're running a build uh on

109
00:04:06,239 --> 00:04:08,959
git lab on aws infrastructure you have

110
00:04:08,959 --> 00:04:10,879
two cryptographic documents available to

111
00:04:10,879 --> 00:04:12,879
you right you have the aws metadata

112
00:04:12,879 --> 00:04:15,760
service and then you also have that jwt

113
00:04:15,760 --> 00:04:18,320
that get that provided so we use those

114
00:04:18,320 --> 00:04:19,918
documents as well as other data that's

115
00:04:19,918 --> 00:04:21,680
available within the system in the

116
00:04:21,680 --> 00:04:23,199
process to

117
00:04:23,199 --> 00:04:25,199
create these at the stations

118
00:04:25,199 --> 00:04:27,520
and then you know like i said above

119
00:04:27,520 --> 00:04:29,440
right we use these ephemeral short-lived

120
00:04:29,440 --> 00:04:31,600
signing keys to sign these attestations

121
00:04:31,600 --> 00:04:35,199
but um signing um automated workloads

122
00:04:35,199 --> 00:04:38,160
hardware keys very very difficult um by

123
00:04:38,160 --> 00:04:39,919
introducing spiffy spire we kind of

124
00:04:39,919 --> 00:04:41,840
solve some of these problems and we're

125
00:04:41,840 --> 00:04:44,320
able to automate the process of signing

126
00:04:44,320 --> 00:04:46,880
these attestations while retaining trust

127
00:04:46,880 --> 00:04:50,320
and protecting that private key material

128
00:04:50,320 --> 00:04:51,919
so we're talking about signers we

129
00:04:51,919 --> 00:04:53,600
actually support multiple signers right

130
00:04:53,600 --> 00:04:55,360
now and hopefully in the near future

131
00:04:55,360 --> 00:04:56,560
we'll support

132
00:04:56,560 --> 00:04:57,520
more

133
00:04:57,520 --> 00:04:59,360
but the way the siding works is that we

134
00:04:59,360 --> 00:05:01,120
take all these these documents these at

135
00:05:01,120 --> 00:05:03,280
the station and bundle them together

136
00:05:03,280 --> 00:05:06,320
into one json file then we sign that

137
00:05:06,320 --> 00:05:08,840
using the dsse

138
00:05:08,840 --> 00:05:12,080
envelope um and we need some keys to

139
00:05:12,080 --> 00:05:14,560
actually do that signing so while we say

140
00:05:14,560 --> 00:05:16,720
keyless right we actually do receive

141
00:05:16,720 --> 00:05:20,560
keys from um from focio right we receive

142
00:05:20,560 --> 00:05:22,639
the signing certificate from pulsa when

143
00:05:22,639 --> 00:05:24,400
we sign the stuff with those user

144
00:05:24,400 --> 00:05:26,720
identities and then you know in the ci

145
00:05:26,720 --> 00:05:28,479
process that doesn't always work so well

146
00:05:28,479 --> 00:05:32,080
so we implement uh spiffy spire to

147
00:05:32,080 --> 00:05:34,560
actually verify workload identity of

148
00:05:34,560 --> 00:05:36,160
whatever the builder container or the

149
00:05:36,160 --> 00:05:37,759
builder agent

150
00:05:37,759 --> 00:05:39,600
to make sure that hey yes this is

151
00:05:39,600 --> 00:05:41,919
exactly what i want to build my my

152
00:05:41,919 --> 00:05:44,960
binary and i trust it um and then

153
00:05:44,960 --> 00:05:46,400
finally because we're using those short

154
00:05:46,400 --> 00:05:48,160
lived keys so certificates are only

155
00:05:48,160 --> 00:05:50,160
valid for very short periods of time i

156
00:05:50,160 --> 00:05:53,199
mean order of minutes or hours maybe

157
00:05:53,199 --> 00:05:55,039
right so that workload's probably going

158
00:05:55,039 --> 00:05:57,199
to get scheduled when that certificate

159
00:05:57,199 --> 00:05:59,280
has expired so we need a different way

160
00:05:59,280 --> 00:06:01,039
to make sure that

161
00:06:01,039 --> 00:06:03,199
those attestations were signed during

162
00:06:03,199 --> 00:06:05,280
the certificate validity period

163
00:06:05,280 --> 00:06:08,160
and we do that by by

164
00:06:08,160 --> 00:06:10,160
doing another time step on top of that

165
00:06:10,160 --> 00:06:12,479
signature right now this capability is

166
00:06:12,479 --> 00:06:15,280
fulfilled by recore when we upload the

167
00:06:15,280 --> 00:06:18,000
attestation to recore

168
00:06:18,000 --> 00:06:19,840
that attestation

169
00:06:19,840 --> 00:06:22,080
then receives a time stamp and distorted

170
00:06:22,080 --> 00:06:24,880
on the law for non-repudiation

171
00:06:24,880 --> 00:06:25,919
so we talked a little bit about

172
00:06:25,919 --> 00:06:28,800
cryptographic document support right so

173
00:06:28,800 --> 00:06:30,800
during the witness attestation process

174
00:06:30,800 --> 00:06:32,479
we look through we look for these

175
00:06:32,479 --> 00:06:35,039
different types of documents um

176
00:06:35,039 --> 00:06:36,800
so like i said if you're running on git

177
00:06:36,800 --> 00:06:39,440
lab we find that jwt that has all the

178
00:06:39,440 --> 00:06:41,440
information about that

179
00:06:41,440 --> 00:06:44,080
that ci runner in and

180
00:06:44,080 --> 00:06:46,400
what what generated it so we could tell

181
00:06:46,400 --> 00:06:48,400
who did the la who made the last commit

182
00:06:48,400 --> 00:06:52,240
on that by by expecting that jwt

183
00:06:52,240 --> 00:06:55,360
we can figure out what project

184
00:06:55,360 --> 00:06:57,039
that came from

185
00:06:57,039 --> 00:06:59,599
uh we can

186
00:06:59,599 --> 00:07:00,880
identify

187
00:07:00,880 --> 00:07:02,720
all different sorts of permissions and

188
00:07:02,720 --> 00:07:04,880
information metadata about that that

189
00:07:04,880 --> 00:07:06,560
running process that we can then apply

190
00:07:06,560 --> 00:07:09,039
policy to same goes with the aws

191
00:07:09,039 --> 00:07:10,800
metadata service right we take that

192
00:07:10,800 --> 00:07:13,440
metadata and put it into a json document

193
00:07:13,440 --> 00:07:15,759
that we assign well this gives us these

194
00:07:15,759 --> 00:07:18,080
trusted selectors that we can then

195
00:07:18,080 --> 00:07:21,039
establish policy against um

196
00:07:21,039 --> 00:07:22,960
we'll go through this a little bit more

197
00:07:22,960 --> 00:07:25,360
but currently we support google cloud

198
00:07:25,360 --> 00:07:26,560
aws

199
00:07:26,560 --> 00:07:28,880
generic jwt tokens

200
00:07:28,880 --> 00:07:30,800
as well as git lab

201
00:07:30,800 --> 00:07:33,759
we encourage uh contributors to to add

202
00:07:33,759 --> 00:07:35,680
additional testers to witness

203
00:07:35,680 --> 00:07:37,280
and just reach out if you need help with

204
00:07:37,280 --> 00:07:38,720
that

205
00:07:38,720 --> 00:07:40,479
then finally the last part of witness

206
00:07:40,479 --> 00:07:42,000
and this is really the most exciting

207
00:07:42,000 --> 00:07:43,599
part of it is we need something to do

208
00:07:43,599 --> 00:07:45,120
with all these attestations right how

209
00:07:45,120 --> 00:07:47,919
can we make them actionable to improve

210
00:07:47,919 --> 00:07:49,919
our security posture posture and

211
00:07:49,919 --> 00:07:53,120
efficiency so we have a policy engine

212
00:07:53,120 --> 00:07:55,120
embedded within witness it's witness

213
00:07:55,120 --> 00:07:58,080
verified but policies define you know

214
00:07:58,080 --> 00:08:00,400
what attestations must be

215
00:08:00,400 --> 00:08:02,879
satisfied so within that policy document

216
00:08:02,879 --> 00:08:04,800
you may say you want to get lab at the

217
00:08:04,800 --> 00:08:07,120
station for this stuff you want a gcp at

218
00:08:07,120 --> 00:08:09,280
the station for this step and then you

219
00:08:09,280 --> 00:08:11,440
want a command run at the station that

220
00:08:11,440 --> 00:08:14,160
has a trace on it so you define that and

221
00:08:14,160 --> 00:08:17,039
then within those attestations right you

222
00:08:17,039 --> 00:08:18,400
can also

223
00:08:18,400 --> 00:08:19,440
attach

224
00:08:19,440 --> 00:08:21,599
regal policies that must

225
00:08:21,599 --> 00:08:24,319
pass in order for that policy to be

226
00:08:24,319 --> 00:08:25,599
satisfied

227
00:08:25,599 --> 00:08:28,639
so now we have this trusted sign data

228
00:08:28,639 --> 00:08:30,720
that we can evaluate with our policy

229
00:08:30,720 --> 00:08:33,599
engine to understand whether uh this

230
00:08:33,599 --> 00:08:35,760
workload meets our policy or does not

231
00:08:35,760 --> 00:08:37,039
and then we can decide what we want to

232
00:08:37,039 --> 00:08:38,399
do with that

233
00:08:38,399 --> 00:08:40,640
and then the last part of this is that

234
00:08:40,640 --> 00:08:42,399
we also enforce the cryptographic

235
00:08:42,399 --> 00:08:45,200
identities that are allowed to execute

236
00:08:45,200 --> 00:08:47,120
and what this means is that hey we

237
00:08:47,120 --> 00:08:49,440
inspect the public certificate that was

238
00:08:49,440 --> 00:08:50,720
used to sign

239
00:08:50,720 --> 00:08:52,160
um

240
00:08:52,160 --> 00:08:55,279
sign that at the station and we can

241
00:08:55,279 --> 00:08:57,440
uh

242
00:08:57,440 --> 00:08:59,120
check the certificate constraints on

243
00:08:59,120 --> 00:09:01,200
that to see you know who signed it if

244
00:09:01,200 --> 00:09:02,880
they were allowed to sign it

245
00:09:02,880 --> 00:09:04,399
we also

246
00:09:04,399 --> 00:09:06,160
embed the certificate authorities that

247
00:09:06,160 --> 00:09:09,760
we trust within that policy

248
00:09:09,760 --> 00:09:12,080
so kind of a blown out picture a lot of

249
00:09:12,080 --> 00:09:15,040
words on the screen so

250
00:09:15,040 --> 00:09:17,839
to backtrack what we do is we take these

251
00:09:17,839 --> 00:09:20,080
um identity documents whether it be the

252
00:09:20,080 --> 00:09:22,560
cloud instant metadata some sort of a

253
00:09:22,560 --> 00:09:24,399
jwt

254
00:09:24,399 --> 00:09:26,080
along with the source files and

255
00:09:26,080 --> 00:09:27,519
materials

256
00:09:27,519 --> 00:09:29,440
we create and that's attestations for

257
00:09:29,440 --> 00:09:31,760
all of those we execute the command that

258
00:09:31,760 --> 00:09:33,440
we specify

259
00:09:33,440 --> 00:09:35,120
and then this command during when that

260
00:09:35,120 --> 00:09:36,800
command is executed we trace all the

261
00:09:36,800 --> 00:09:38,480
materials that go in and out of that

262
00:09:38,480 --> 00:09:40,640
command and then we bundle all these

263
00:09:40,640 --> 00:09:42,800
together what we call an attestation

264
00:09:42,800 --> 00:09:45,040
collection this attestation collection

265
00:09:45,040 --> 00:09:46,399
is signed

266
00:09:46,399 --> 00:09:48,959
by a key provider and then up uploaded

267
00:09:48,959 --> 00:09:52,479
to a back-end store

268
00:09:53,120 --> 00:09:55,040
we'll blow it out a little bit more for

269
00:09:55,040 --> 00:09:57,680
more um

270
00:09:57,680 --> 00:09:59,760
a ci approach what this looks like right

271
00:09:59,760 --> 00:10:02,000
so record is our evidence like we're

272
00:10:02,000 --> 00:10:04,160
normalizing all of our evidence putting

273
00:10:04,160 --> 00:10:06,079
it in recore and then we're able to

274
00:10:06,079 --> 00:10:08,640
evaluate policy against that normalized

275
00:10:08,640 --> 00:10:09,839
evidence

276
00:10:09,839 --> 00:10:13,360
witness verify is a library

277
00:10:13,360 --> 00:10:15,839
and so we're currently working on a

278
00:10:15,839 --> 00:10:18,160
admission controller that will enforce

279
00:10:18,160 --> 00:10:20,079
these policy documents

280
00:10:20,079 --> 00:10:22,720
in a kubernetes environment but really

281
00:10:22,720 --> 00:10:25,279
the library can be implemented in just

282
00:10:25,279 --> 00:10:26,800
about any piece of software where you

283
00:10:26,800 --> 00:10:28,880
need to verify the providence

284
00:10:28,880 --> 00:10:32,000
of whatever you're running

285
00:10:32,000 --> 00:10:33,600
so i'm going to go through a few use

286
00:10:33,600 --> 00:10:35,040
cases and hopefully this will give you a

287
00:10:35,040 --> 00:10:36,560
little bit better understanding of

288
00:10:36,560 --> 00:10:39,360
exactly how witness fits into your

289
00:10:39,360 --> 00:10:41,440
environment

290
00:10:41,440 --> 00:10:42,480
so

291
00:10:42,480 --> 00:10:43,519
one of the

292
00:10:43,519 --> 00:10:45,279
most important things we want to do is

293
00:10:45,279 --> 00:10:47,600
that make sure that all of our software

294
00:10:47,600 --> 00:10:49,279
is built on the physical machines that

295
00:10:49,279 --> 00:10:51,519
we trust right these machines are part

296
00:10:51,519 --> 00:10:53,519
of our system security plan these

297
00:10:53,519 --> 00:10:55,600
machines that have been you know

298
00:10:55,600 --> 00:10:57,120
attested to

299
00:10:57,120 --> 00:10:59,839
our chief information security officer

300
00:10:59,839 --> 00:11:01,839
we should make sure that our builds are

301
00:11:01,839 --> 00:11:03,920
actually coming off of that and

302
00:11:03,920 --> 00:11:06,640
we don't have a rogue developer that is

303
00:11:06,640 --> 00:11:09,519
bypassing the ci process in order to get

304
00:11:09,519 --> 00:11:11,680
his feature into production

305
00:11:11,680 --> 00:11:13,040
so

306
00:11:13,040 --> 00:11:14,640
what we want to do here is we want to

307
00:11:14,640 --> 00:11:18,079
take uh we create a gc we create a regal

308
00:11:18,079 --> 00:11:21,279
module specific to our gcp project right

309
00:11:21,279 --> 00:11:23,839
we can see here at testify sac our gcp

310
00:11:23,839 --> 00:11:25,600
project that number is three two four

311
00:11:25,600 --> 00:11:27,760
three two two two so

312
00:11:27,760 --> 00:11:30,640
when we apply this policy into into our

313
00:11:30,640 --> 00:11:32,800
mission controller any of the builds

314
00:11:32,800 --> 00:11:34,800
that don't have an attestation that

315
00:11:34,800 --> 00:11:37,360
prove that it was built at least once on

316
00:11:37,360 --> 00:11:38,959
our infrastructure

317
00:11:38,959 --> 00:11:40,959
will not get admitted

318
00:11:40,959 --> 00:11:43,040
into the cluster and that workload will

319
00:11:43,040 --> 00:11:45,920
not be executed

320
00:11:49,360 --> 00:11:51,920
next we want to verify that an artifact

321
00:11:51,920 --> 00:11:53,440
actually did pass

322
00:11:53,440 --> 00:11:57,279
on static analysis testing um so in a

323
00:11:57,279 --> 00:11:59,519
lot of organizations you may have you

324
00:11:59,519 --> 00:12:02,720
know dozens of ci systems right and to

325
00:12:02,720 --> 00:12:05,440
understand you know the compliance of

326
00:12:05,440 --> 00:12:07,360
each artifact that comes out of each of

327
00:12:07,360 --> 00:12:09,760
those ci systems it's a really difficult

328
00:12:09,760 --> 00:12:11,440
task so instead what we're going to do

329
00:12:11,440 --> 00:12:12,720
is we're going to create some policy

330
00:12:12,720 --> 00:12:13,920
that says hey

331
00:12:13,920 --> 00:12:15,680
every single artifact that goes into our

332
00:12:15,680 --> 00:12:17,279
production system

333
00:12:17,279 --> 00:12:19,120
must have a snick

334
00:12:19,120 --> 00:12:22,800
priority score of less than 510. so now

335
00:12:22,800 --> 00:12:25,519
we create this policy and we uh we

336
00:12:25,519 --> 00:12:27,120
implement it within our admission

337
00:12:27,120 --> 00:12:29,600
controllers in kubernetes cluster now

338
00:12:29,600 --> 00:12:32,399
this means that any any of the workloads

339
00:12:32,399 --> 00:12:33,120
that

340
00:12:33,120 --> 00:12:34,959
are are scheduled

341
00:12:34,959 --> 00:12:35,839
must

342
00:12:35,839 --> 00:12:38,880
must pass our policy for static analysis

343
00:12:38,880 --> 00:12:41,040
right we're not allowed to bypass this

344
00:12:41,040 --> 00:12:43,600
because the developers in a hurry or

345
00:12:43,600 --> 00:12:46,000
maybe there's a misconfiguration

346
00:12:46,000 --> 00:12:50,160
or some other situation that's happening

347
00:12:51,600 --> 00:12:53,519
finally this is this is this is

348
00:12:53,519 --> 00:12:55,360
something that is usually very very

349
00:12:55,360 --> 00:12:58,639
difficult to mitigate against and if

350
00:12:58,639 --> 00:13:01,920
uh your compiler was compromised or has

351
00:13:01,920 --> 00:13:04,560
a critical vulnerability

352
00:13:04,560 --> 00:13:06,399
that transfers that vulnerability

353
00:13:06,399 --> 00:13:08,480
into your software it's going to be

354
00:13:08,480 --> 00:13:10,240
really difficult to sift through

355
00:13:10,240 --> 00:13:11,839
everything in production to figure out

356
00:13:11,839 --> 00:13:14,000
exactly what was compiled by that

357
00:13:14,000 --> 00:13:16,720
malicious or vulnerable compiler

358
00:13:16,720 --> 00:13:19,600
but if you have tracing enabled

359
00:13:19,600 --> 00:13:22,639
within witness while your ci process is

360
00:13:22,639 --> 00:13:24,560
running right we actually collect that

361
00:13:24,560 --> 00:13:26,480
information so

362
00:13:26,480 --> 00:13:28,000
we have the

363
00:13:28,000 --> 00:13:31,920
the digest of every single process

364
00:13:31,920 --> 00:13:33,120
that

365
00:13:33,120 --> 00:13:35,200
that happened during the sea during this

366
00:13:35,200 --> 00:13:36,959
step of this year process as well as all

367
00:13:36,959 --> 00:13:39,199
the files that went into that all the

368
00:13:39,199 --> 00:13:41,839
intermediate files and all the outputs

369
00:13:41,839 --> 00:13:43,920
and we can take those digests and

370
00:13:43,920 --> 00:13:45,760
compare them against vulnerability

371
00:13:45,760 --> 00:13:48,079
database or or different threat

372
00:13:48,079 --> 00:13:50,880
databases to understand a

373
00:13:50,880 --> 00:13:53,120
more granular risk level of that

374
00:13:53,120 --> 00:13:55,440
workload

375
00:13:55,440 --> 00:13:58,720
so i'm going to go into a demo now

376
00:13:58,720 --> 00:14:01,199
what we've done is we've taken the spire

377
00:14:01,199 --> 00:14:04,160
project the cncf spire project and we

378
00:14:04,160 --> 00:14:06,399
use this internally of

379
00:14:06,399 --> 00:14:09,040
at testify so we really want and it's

380
00:14:09,040 --> 00:14:11,519
probably the most critical security

381
00:14:11,519 --> 00:14:13,920
component of our system

382
00:14:13,920 --> 00:14:16,160
so in order for us to trust it we want

383
00:14:16,160 --> 00:14:18,639
to make sure that

384
00:14:18,639 --> 00:14:20,560
the spire server running

385
00:14:20,560 --> 00:14:23,519
on our infrastructure was built by us

386
00:14:23,519 --> 00:14:25,440
was approved by

387
00:14:25,440 --> 00:14:28,240
myself or another engineer that that has

388
00:14:28,240 --> 00:14:30,800
that approval status and that it passes

389
00:14:30,800 --> 00:14:33,440
the static analysis testing

390
00:14:33,440 --> 00:14:35,519
and then we verify that before we we

391
00:14:35,519 --> 00:14:38,399
push it off into production

392
00:14:38,399 --> 00:14:40,560
now it's time for a demo the first thing

393
00:14:40,560 --> 00:14:42,560
we're going to show you is a

394
00:14:42,560 --> 00:14:44,800
an attestation of a developer's commit

395
00:14:44,800 --> 00:14:46,240
and we're going to use that at the

396
00:14:46,240 --> 00:14:48,720
station to verify in our in our ci

397
00:14:48,720 --> 00:14:50,800
pipeline that

398
00:14:50,800 --> 00:14:52,639
a developer that we trust actually

399
00:14:52,639 --> 00:14:54,320
created that commit so we can kick off

400
00:14:54,320 --> 00:14:56,880
the rest of that pipeline

401
00:14:56,880 --> 00:14:58,160
so the first thing we're going to do is

402
00:14:58,160 --> 00:15:00,399
actually you know create a file and then

403
00:15:00,399 --> 00:15:03,680
we're going to commit that file

404
00:15:06,720 --> 00:15:08,720
so what you're going to see here is we

405
00:15:08,720 --> 00:15:10,959
have a post commit hook

406
00:15:10,959 --> 00:15:14,240
that runs witness

407
00:15:14,240 --> 00:15:16,639
and witnesses is configured in the in

408
00:15:16,639 --> 00:15:19,040
the commit hook to actually do an oidc

409
00:15:19,040 --> 00:15:21,519
uh credential verification with uh

410
00:15:21,519 --> 00:15:22,959
fulcio where it's going to get those

411
00:15:22,959 --> 00:15:24,480
certificates

412
00:15:24,480 --> 00:15:26,959
and sign that at the station

413
00:15:26,959 --> 00:15:29,120
uh

414
00:15:29,120 --> 00:15:31,360
so we can see right that at the station

415
00:15:31,360 --> 00:15:33,199
working now we should have

416
00:15:33,199 --> 00:15:34,000
uh

417
00:15:34,000 --> 00:15:37,199
a ci pipeline kicking off here

418
00:15:37,199 --> 00:15:41,199
oh we got to push it first right

419
00:15:41,199 --> 00:15:43,680
all right so we'll go ahead and push it

420
00:15:43,680 --> 00:15:45,279
and then that should be kicking off here

421
00:15:45,279 --> 00:15:47,839
pretty soon

422
00:15:51,839 --> 00:15:53,040
we'll go ahead and look at this clone

423
00:15:53,040 --> 00:15:55,839
step

424
00:16:01,600 --> 00:16:03,040
now you can see this clone step

425
00:16:03,040 --> 00:16:05,199
succeeded because we used the correct

426
00:16:05,199 --> 00:16:06,720
credentials

427
00:16:06,720 --> 00:16:08,480
when we made this commit now let's try

428
00:16:08,480 --> 00:16:10,079
it again and use some incorrect

429
00:16:10,079 --> 00:16:13,959
credentials and see what happens

430
00:16:27,040 --> 00:16:28,880
we'll go ahead and

431
00:16:28,880 --> 00:16:31,120
use my personal credentials here

432
00:16:31,120 --> 00:16:35,560
those are not specified on the policy

433
00:16:56,000 --> 00:16:59,120
and there you see uh this step failed

434
00:16:59,120 --> 00:17:01,519
because we use the wrong credentials to

435
00:17:01,519 --> 00:17:02,880
make that uh

436
00:17:02,880 --> 00:17:05,839
commit attestation

437
00:17:20,240 --> 00:17:22,160
for our next demonstration what we want

438
00:17:22,160 --> 00:17:24,880
to do is we want to make sure that

439
00:17:24,880 --> 00:17:27,039
all of our spire agents

440
00:17:27,039 --> 00:17:29,200
actually get compiled on infrastructure

441
00:17:29,200 --> 00:17:31,200
that we trust right we want to make sure

442
00:17:31,200 --> 00:17:33,679
that you know it's not

443
00:17:33,679 --> 00:17:35,520
being compiled in some developers

444
00:17:35,520 --> 00:17:37,600
computers sitting underneath their desk

445
00:17:37,600 --> 00:17:40,400
um or by a malicious actor right we want

446
00:17:40,400 --> 00:17:41,760
to make sure that

447
00:17:41,760 --> 00:17:43,679
everything that goes in production

448
00:17:43,679 --> 00:17:44,400
uh

449
00:17:44,400 --> 00:17:46,480
gets built on a production system on our

450
00:17:46,480 --> 00:17:49,280
production ci system where we have our

451
00:17:49,280 --> 00:17:50,640
our checks

452
00:17:50,640 --> 00:17:54,400
and we have our our we're in compliance

453
00:17:54,400 --> 00:17:55,600
so let's go ahead and see what that

454
00:17:55,600 --> 00:17:58,080
looks like

455
00:17:58,080 --> 00:18:01,520
what we're gonna do is we're going to go

456
00:18:01,520 --> 00:18:03,520
let's go here in the build agent and we

457
00:18:03,520 --> 00:18:06,000
can see that we have some attestation

458
00:18:06,000 --> 00:18:08,160
data that was generated so let's go

459
00:18:08,160 --> 00:18:11,200
ahead and take a look at that

460
00:18:11,200 --> 00:18:13,919
we have a little attestation viewer here

461
00:18:13,919 --> 00:18:16,720
that we created

462
00:18:23,280 --> 00:18:26,320
so we look at the gcp iit at the station

463
00:18:26,320 --> 00:18:28,240
we can see we have a json file with a

464
00:18:28,240 --> 00:18:30,400
bunch of trusted selectors

465
00:18:30,400 --> 00:18:32,160
and one of those lectures that we have

466
00:18:32,160 --> 00:18:35,440
is that this build was created in this

467
00:18:35,440 --> 00:18:38,160
specific project id

468
00:18:38,160 --> 00:18:40,640
now and if you go look at our

469
00:18:40,640 --> 00:18:43,640
repository

470
00:18:47,679 --> 00:18:49,600
you see

471
00:18:49,600 --> 00:18:51,919
right that matches what's in our policy

472
00:18:51,919 --> 00:18:54,320
so let's go ahead and see what this

473
00:18:54,320 --> 00:18:55,679
looks like to do this offline

474
00:18:55,679 --> 00:18:58,559
verification of our policy uh as well as

475
00:18:58,559 --> 00:19:00,240
we'll go change a couple things around

476
00:19:00,240 --> 00:19:02,400
and see if our policy still

477
00:19:02,400 --> 00:19:05,039
still passes

478
00:19:07,200 --> 00:19:08,799
so as part of the last step of the

479
00:19:08,799 --> 00:19:10,480
pipeline we actually publish these

480
00:19:10,480 --> 00:19:12,240
artifacts

481
00:19:12,240 --> 00:19:13,919
so feel free to go ahead and download

482
00:19:13,919 --> 00:19:15,520
these yourself

483
00:19:15,520 --> 00:19:17,919
but we we publish the public key that

484
00:19:17,919 --> 00:19:20,720
corresponds to the policy

485
00:19:20,720 --> 00:19:23,600
we publish the policy and then alongside

486
00:19:23,600 --> 00:19:25,600
that we publish the artifacts that we

487
00:19:25,600 --> 00:19:28,320
can verify

488
00:19:34,960 --> 00:19:37,039
so we've actually downloaded some of

489
00:19:37,039 --> 00:19:39,120
these artifacts ahead of time so the

490
00:19:39,120 --> 00:19:40,320
first thing we're going to do is

491
00:19:40,320 --> 00:19:42,640
actually uh verify

492
00:19:42,640 --> 00:19:44,720
the spire agent and we're going to

493
00:19:44,720 --> 00:19:48,160
verify that it was built on that gcp

494
00:19:48,160 --> 00:19:49,679
project id

495
00:19:49,679 --> 00:19:51,600
and that passes all the other concerns

496
00:19:51,600 --> 00:19:53,600
that we have in our policy

497
00:19:53,600 --> 00:19:55,520
i'm always doing right now is it's uh

498
00:19:55,520 --> 00:19:58,080
looking in record for all those at the

499
00:19:58,080 --> 00:19:59,679
stations and then as part of those

500
00:19:59,679 --> 00:20:02,080
attestations some of them will get more

501
00:20:02,080 --> 00:20:03,679
references we call these back

502
00:20:03,679 --> 00:20:05,520
preferences to things like the pipeline

503
00:20:05,520 --> 00:20:06,400
url

504
00:20:06,400 --> 00:20:08,640
or the commit hash where we can we can

505
00:20:08,640 --> 00:20:10,640
go and find more attestations that may

506
00:20:10,640 --> 00:20:14,000
correspond uh to that ci pipeline uh

507
00:20:14,000 --> 00:20:15,840
essentially building out the entire

508
00:20:15,840 --> 00:20:18,000
providence graph required to satisfy

509
00:20:18,000 --> 00:20:21,240
that policy

510
00:20:22,559 --> 00:20:24,720
you can see verification succeeded if we

511
00:20:24,720 --> 00:20:26,880
look at any of these uh indexes right

512
00:20:26,880 --> 00:20:28,799
here you'll see that hey when we go

513
00:20:28,799 --> 00:20:30,799
there that's that actually that's a sign

514
00:20:30,799 --> 00:20:32,159
attestation

515
00:20:32,159 --> 00:20:34,880
um

516
00:20:34,880 --> 00:20:36,480
for that artifact

517
00:20:36,480 --> 00:20:39,120
and that step

518
00:20:39,360 --> 00:20:42,559
so what happens if

519
00:20:46,000 --> 00:20:49,840
we change that right

520
00:20:52,080 --> 00:20:54,960
so here we've actually changed the gcp

521
00:20:54,960 --> 00:20:55,919
uh

522
00:20:55,919 --> 00:20:59,280
number in the policy

523
00:20:59,280 --> 00:21:00,880
and we're gonna go ahead and see if this

524
00:21:00,880 --> 00:21:04,080
one's verifies

525
00:21:12,720 --> 00:21:14,960
and there we go right we don't have the

526
00:21:14,960 --> 00:21:17,360
evidence we need to satisfy

527
00:21:17,360 --> 00:21:20,080
that policy

528
00:21:20,880 --> 00:21:22,640
finally i want to show what what we do

529
00:21:22,640 --> 00:21:24,559
with tracing so let's go ahead and pull

530
00:21:24,559 --> 00:21:28,280
up an attestation

531
00:21:30,880 --> 00:21:32,080
right

532
00:21:32,080 --> 00:21:34,799
so this is a command run attestation we

533
00:21:34,799 --> 00:21:36,480
see this is the command

534
00:21:36,480 --> 00:21:38,320
that we're running we're building

535
00:21:38,320 --> 00:21:40,240
the spire agent we can see exactly the

536
00:21:40,240 --> 00:21:43,280
parameters that were passed into it

537
00:21:43,280 --> 00:21:45,440
but more than that we're running a trace

538
00:21:45,440 --> 00:21:46,880
on this process and we have full

539
00:21:46,880 --> 00:21:48,159
permissions over it because we're

540
00:21:48,159 --> 00:21:50,400
actually wrapping it

541
00:21:50,400 --> 00:21:52,960
and this allows us to grab

542
00:21:52,960 --> 00:21:55,520
you know all the sub processes

543
00:21:55,520 --> 00:21:57,840
uh all the executors

544
00:21:57,840 --> 00:22:00,159
as well as all the open files

545
00:22:00,159 --> 00:22:02,880
that went in and out of that this

546
00:22:02,880 --> 00:22:04,480
this process

547
00:22:04,480 --> 00:22:06,799
so this gives us a lot of information

548
00:22:06,799 --> 00:22:09,760
about possible vulnerabilities

549
00:22:09,760 --> 00:22:12,240
that may be introduced into our system

550
00:22:12,240 --> 00:22:14,799
and this is we can create policy against

551
00:22:14,799 --> 00:22:17,600
these items just like anything else so

552
00:22:17,600 --> 00:22:19,120
if there's a malicious compiler that's

553
00:22:19,120 --> 00:22:20,480
identified

554
00:22:20,480 --> 00:22:22,640
we can now backtrack and find

555
00:22:22,640 --> 00:22:24,400
everything in our system that was

556
00:22:24,400 --> 00:22:26,720
compiled using that malicious compiler

557
00:22:26,720 --> 00:22:28,480
wow and another situation where this

558
00:22:28,480 --> 00:22:30,320
works out really well is something like

559
00:22:30,320 --> 00:22:33,120
heartbleed right we want to figure out

560
00:22:33,120 --> 00:22:34,799
um

561
00:22:34,799 --> 00:22:36,559
all the different

562
00:22:36,559 --> 00:22:38,000
all the different places where the

563
00:22:38,000 --> 00:22:40,320
vulnerable version of openssl was

564
00:22:40,320 --> 00:22:42,640
compiled into our software right this is

565
00:22:42,640 --> 00:22:45,039
really really difficult to do unless we

566
00:22:45,039 --> 00:22:46,880
have really good accounting of what went

567
00:22:46,880 --> 00:22:48,559
into our software and that's what we're

568
00:22:48,559 --> 00:22:50,000
doing here we're accounting for

569
00:22:50,000 --> 00:22:52,640
everything that that goes in and keeping

570
00:22:52,640 --> 00:22:56,080
track of it so we can look that up later

571
00:22:56,080 --> 00:22:58,080
um

572
00:22:58,080 --> 00:22:59,200
with that that's end of our

573
00:22:59,200 --> 00:23:01,600
demonstration and uh let us know if you

574
00:23:01,600 --> 00:23:03,440
have any questions we'll be on the live

575
00:23:03,440 --> 00:23:05,120
stream and then i think we have someone

576
00:23:05,120 --> 00:23:07,600
there in person too um so if you see

577
00:23:07,600 --> 00:23:08,880
frederick around

578
00:23:08,880 --> 00:23:12,520
make sure you say hi

