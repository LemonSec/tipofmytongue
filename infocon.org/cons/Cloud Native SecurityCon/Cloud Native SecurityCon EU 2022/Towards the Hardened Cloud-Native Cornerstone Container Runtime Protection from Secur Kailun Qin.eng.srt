1
00:00:00,000 --> 00:00:01,839
hello everyone thanks for joining this

2
00:00:01,839 --> 00:00:05,279
cloud native security conference session

3
00:00:05,279 --> 00:00:07,440
my name is kailan ching i'm a cloud

4
00:00:07,440 --> 00:00:09,519
software engineer at intel

5
00:00:09,519 --> 00:00:11,519
with a focus on security and

6
00:00:11,519 --> 00:00:14,000
confidential computing

7
00:00:14,000 --> 00:00:16,320
my topic today is towards the hardened

8
00:00:16,320 --> 00:00:18,320
cloud native cornerstone

9
00:00:18,320 --> 00:00:20,480
container runtime protection from

10
00:00:20,480 --> 00:00:23,600
security to privacy

11
00:00:23,600 --> 00:00:26,000
i'd like to hereby thankfully tremendous

12
00:00:26,000 --> 00:00:28,560
help received from my teammates while

13
00:00:28,560 --> 00:00:31,840
building these contents

14
00:00:31,840 --> 00:00:34,160
so firstly let's jump into the question

15
00:00:34,160 --> 00:00:37,440
about our main character today

16
00:00:37,440 --> 00:00:39,840
the cloud native cornerstone container

17
00:00:39,840 --> 00:00:42,879
how secure it is

18
00:00:43,040 --> 00:00:44,879
we may not have a direct answer right

19
00:00:44,879 --> 00:00:45,920
away

20
00:00:45,920 --> 00:00:47,600
but let's take a look at the container

21
00:00:47,600 --> 00:00:48,640
security

22
00:00:48,640 --> 00:00:51,680
from different views

23
00:00:52,239 --> 00:00:54,000
let's start with the container security

24
00:00:54,000 --> 00:00:57,120
risks from users view

25
00:00:57,120 --> 00:00:59,120
here is the chart from a white paper of

26
00:00:59,120 --> 00:01:02,000
tencent cloud in 2021

27
00:01:02,000 --> 00:01:04,239
which illustrates the container security

28
00:01:04,239 --> 00:01:06,720
risks that users are most concerned

29
00:01:06,720 --> 00:01:09,119
about

30
00:01:09,600 --> 00:01:11,760
in this chart we can find that the

31
00:01:11,760 --> 00:01:13,280
container escape

32
00:01:13,280 --> 00:01:15,840
which is part of the runtime security

33
00:01:15,840 --> 00:01:18,159
together with the image security and

34
00:01:18,159 --> 00:01:20,560
cluster intrusion are the top three

35
00:01:20,560 --> 00:01:24,080
concerns raised by users

36
00:01:24,720 --> 00:01:27,119
however it is really hard to address the

37
00:01:27,119 --> 00:01:28,799
risks before knowing the potential

38
00:01:28,799 --> 00:01:30,240
threats

39
00:01:30,240 --> 00:01:32,240
a systematic analysis of canadian

40
00:01:32,240 --> 00:01:35,520
threats is therefore needed

41
00:01:35,520 --> 00:01:37,840
here we present the threat model which

42
00:01:37,840 --> 00:01:39,680
was given by open web application

43
00:01:39,680 --> 00:01:43,280
security project lwasp on docker

44
00:01:43,280 --> 00:01:45,759
in 2019

45
00:01:45,759 --> 00:01:47,360
the threads of containers have been

46
00:01:47,360 --> 00:01:49,600
categorized into six aspects according

47
00:01:49,600 --> 00:01:51,920
to owasp

48
00:01:51,920 --> 00:01:54,560
kernel exploits container outbreak

49
00:01:54,560 --> 00:01:56,079
denial of service

50
00:01:56,079 --> 00:01:57,759
and network threats

51
00:01:57,759 --> 00:02:00,399
also possible poison images and

52
00:02:00,399 --> 00:02:03,360
compromising secrets

53
00:02:03,360 --> 00:02:05,600
it's easy to understand that most of

54
00:02:05,600 --> 00:02:07,520
these threats are happening or can

55
00:02:07,520 --> 00:02:10,080
eventually lead to security risks

56
00:02:10,080 --> 00:02:13,520
at the wrong time of containers

57
00:02:14,239 --> 00:02:16,560
in fact the threat model of containers

58
00:02:16,560 --> 00:02:19,920
can be further extended in several ways

59
00:02:19,920 --> 00:02:23,200
to complete the owsp threat model

60
00:02:23,200 --> 00:02:25,360
first the end-to-end flow of containers

61
00:02:25,360 --> 00:02:28,319
should be considered including the cncd

62
00:02:28,319 --> 00:02:29,520
phases

63
00:02:29,520 --> 00:02:32,000
as well as the code and image management

64
00:02:32,000 --> 00:02:34,160
where supply chain kind of attacks can

65
00:02:34,160 --> 00:02:36,879
happen

66
00:02:36,879 --> 00:02:39,599
secondly a stride analysis can be

67
00:02:39,599 --> 00:02:40,640
applied

68
00:02:40,640 --> 00:02:44,239
to more fine-graded layers of containers

69
00:02:44,239 --> 00:02:46,239
where we should be able to understand

70
00:02:46,239 --> 00:02:49,040
when and how spoofing tempering

71
00:02:49,040 --> 00:02:52,000
repudiation and information disclosure

72
00:02:52,000 --> 00:02:55,760
and so on can occur in which layer

73
00:02:55,760 --> 00:02:58,560
moreover with the evolution of attacks

74
00:02:58,560 --> 00:03:01,280
and varied user scenarios we should take

75
00:03:01,280 --> 00:03:03,519
stronger security targets and more

76
00:03:03,519 --> 00:03:06,000
advanced attacker assumptions into our

77
00:03:06,000 --> 00:03:08,319
account

78
00:03:08,319 --> 00:03:10,000
with this extended continuous threat

79
00:03:10,000 --> 00:03:11,519
modeling

80
00:03:11,519 --> 00:03:13,040
then let's take another look from an

81
00:03:13,040 --> 00:03:14,560
attacker's view

82
00:03:14,560 --> 00:03:16,239
how does the running container look like

83
00:03:16,239 --> 00:03:18,879
in their eyes

84
00:03:18,879 --> 00:03:21,599
a container can run in a vm or directly

85
00:03:21,599 --> 00:03:24,080
on top of the bare metal depending on

86
00:03:24,080 --> 00:03:27,120
the deployment schemes

87
00:03:27,120 --> 00:03:29,280
while in this diagram there are a host

88
00:03:29,280 --> 00:03:31,280
of attack vectors

89
00:03:31,280 --> 00:03:32,879
for instance

90
00:03:32,879 --> 00:03:35,120
vulnerable code exploits

91
00:03:35,120 --> 00:03:37,040
can occur in almost everywhere the code

92
00:03:37,040 --> 00:03:39,360
runs

93
00:03:39,360 --> 00:03:40,560
in addition

94
00:03:40,560 --> 00:03:43,360
bad and uncompliant configurations

95
00:03:43,360 --> 00:03:47,599
can expose a large attack surface

96
00:03:47,599 --> 00:03:49,440
also the running containers can be

97
00:03:49,440 --> 00:03:53,599
connected with insecure networking

98
00:03:53,760 --> 00:03:55,040
besides

99
00:03:55,040 --> 00:03:57,280
containers can be using compromised

100
00:03:57,280 --> 00:04:00,480
images leaking secrets and escaping from

101
00:04:00,480 --> 00:04:03,439
their security boundaries

102
00:04:03,439 --> 00:04:05,599
it's also worth mentioning that in some

103
00:04:05,599 --> 00:04:06,799
scenarios

104
00:04:06,799 --> 00:04:09,840
even the hosts i mean the hosts kernels

105
00:04:09,840 --> 00:04:14,599
and os's themselves can be malicious

106
00:04:14,640 --> 00:04:16,959
so with these attack surface

107
00:04:16,959 --> 00:04:18,880
surfaces exposed

108
00:04:18,880 --> 00:04:20,720
we are able to summarize the possible

109
00:04:20,720 --> 00:04:24,320
attack paths or scenarios of containers

110
00:04:24,320 --> 00:04:25,680
so firstly

111
00:04:25,680 --> 00:04:28,000
the first attack scenario is the intro

112
00:04:28,000 --> 00:04:29,919
container attack

113
00:04:29,919 --> 00:04:32,560
where the user's applications can be

114
00:04:32,560 --> 00:04:34,800
attacked by the language runtime or

115
00:04:34,800 --> 00:04:36,240
libraries running within the same

116
00:04:36,240 --> 00:04:38,160
container

117
00:04:38,160 --> 00:04:40,000
the second attack scenario is called

118
00:04:40,000 --> 00:04:42,240
intercontainer attack where containers

119
00:04:42,240 --> 00:04:45,199
are able to attack each other

120
00:04:45,199 --> 00:04:47,280
the third one is called container to

121
00:04:47,280 --> 00:04:49,759
host and host to container attack

122
00:04:49,759 --> 00:04:51,600
this is one of the most common attack

123
00:04:51,600 --> 00:04:53,919
scenarios

124
00:04:53,919 --> 00:04:55,840
well the fourth attack is called

125
00:04:55,840 --> 00:04:57,919
container to container wrong time or

126
00:04:57,919 --> 00:05:01,039
sometimes container engine attack

127
00:05:01,039 --> 00:05:03,840
the fifth one is host to runtime attack

128
00:05:03,840 --> 00:05:06,000
and finally we have the last one we call

129
00:05:06,000 --> 00:05:08,560
it cluster or cloud attack

130
00:05:08,560 --> 00:05:10,880
where attacks can be launched through

131
00:05:10,880 --> 00:05:14,400
cross-host networks

132
00:05:15,600 --> 00:05:17,759
after having a thorough analysis of our

133
00:05:17,759 --> 00:05:20,320
enemies the next question is

134
00:05:20,320 --> 00:05:22,320
how can we defend against all these

135
00:05:22,320 --> 00:05:24,000
threats

136
00:05:24,000 --> 00:05:26,400
so let's try to put a shield on the

137
00:05:26,400 --> 00:05:28,960
containers

138
00:05:29,600 --> 00:05:32,560
one first attempt is to apply the best

139
00:05:32,560 --> 00:05:35,520
practices of container hardening

140
00:05:35,520 --> 00:05:37,919
such as using secure mapping following

141
00:05:37,919 --> 00:05:40,400
mutable paradigm and so on as suggested

142
00:05:40,400 --> 00:05:43,360
by owasp

143
00:05:43,360 --> 00:05:45,120
this best practice

144
00:05:45,120 --> 00:05:47,759
can help avoid at least

145
00:05:47,759 --> 00:05:49,680
or at least mitigate several types of

146
00:05:49,680 --> 00:05:53,160
container threats

147
00:05:53,520 --> 00:05:56,240
a second short can be given by fully

148
00:05:56,240 --> 00:05:57,919
leveraging the container security

149
00:05:57,919 --> 00:05:58,960
features

150
00:05:58,960 --> 00:06:00,560
that we have so far in the container

151
00:06:00,560 --> 00:06:02,639
ecosystem

152
00:06:02,639 --> 00:06:05,360
the security features include the ones

153
00:06:05,360 --> 00:06:07,039
applied to the images

154
00:06:07,039 --> 00:06:08,639
cluster environments

155
00:06:08,639 --> 00:06:10,160
demand and the core components of

156
00:06:10,160 --> 00:06:11,360
containers

157
00:06:11,360 --> 00:06:14,880
and to the containers themselves

158
00:06:14,880 --> 00:06:16,800
let's revisit here the software-based

159
00:06:16,800 --> 00:06:18,479
security features

160
00:06:18,479 --> 00:06:21,280
of containers themselves for example

161
00:06:21,280 --> 00:06:23,199
we have c groups and namespacing the

162
00:06:23,199 --> 00:06:25,360
kernel space which are the foundations

163
00:06:25,360 --> 00:06:27,360
of containers

164
00:06:27,360 --> 00:06:29,280
beyond these two there are also

165
00:06:29,280 --> 00:06:31,360
capability mechanisms

166
00:06:31,360 --> 00:06:33,360
and cisco restriction mechanisms like

167
00:06:33,360 --> 00:06:35,840
sitcom

168
00:06:35,919 --> 00:06:38,639
in addition mandatory access controls

169
00:06:38,639 --> 00:06:39,840
mac

170
00:06:39,840 --> 00:06:42,240
can be enabled by linux security modules

171
00:06:42,240 --> 00:06:44,880
lsm

172
00:06:45,199 --> 00:06:46,960
it's also containing uid and gid

173
00:06:46,960 --> 00:06:50,960
management and usernamespace remap etc

174
00:06:50,960 --> 00:06:53,360
we can build up a more security hardened

175
00:06:53,360 --> 00:06:55,919
container

176
00:06:58,000 --> 00:06:59,759
what else can we try

177
00:06:59,759 --> 00:07:03,199
in production runtime security detection

178
00:07:03,199 --> 00:07:06,000
which monitors and reports out abnormal

179
00:07:06,000 --> 00:07:08,240
container behaviors such as high-risk

180
00:07:08,240 --> 00:07:10,560
systems and file tempering is usually

181
00:07:10,560 --> 00:07:13,280
deployed in production

182
00:07:13,280 --> 00:07:15,520
a series of vulnerability mitigations in

183
00:07:15,520 --> 00:07:17,840
kernel and applications

184
00:07:17,840 --> 00:07:21,440
can be utilized in parallel

185
00:07:21,440 --> 00:07:24,160
note that image scanning and encryption

186
00:07:24,160 --> 00:07:25,840
are two practical enhancements for

187
00:07:25,840 --> 00:07:30,639
images to help raise the security bar

188
00:07:30,639 --> 00:07:32,639
it's worth highlighting that

189
00:07:32,639 --> 00:07:34,400
hardware-based container security

190
00:07:34,400 --> 00:07:35,919
techniques

191
00:07:35,919 --> 00:07:38,080
like virtualized secure containers are

192
00:07:38,080 --> 00:07:40,319
regarded as very helpful

193
00:07:40,319 --> 00:07:42,319
for defending against the container

194
00:07:42,319 --> 00:07:43,759
escape

195
00:07:43,759 --> 00:07:46,319
and for world looking trusty execution

196
00:07:46,319 --> 00:07:47,759
environment-based confidential

197
00:07:47,759 --> 00:07:50,000
containers appealing to address the

198
00:07:50,000 --> 00:07:52,000
privacy concerns

199
00:07:52,000 --> 00:07:54,560
which will talk about them further later

200
00:07:54,560 --> 00:07:56,840
in this

201
00:07:56,840 --> 00:08:00,000
talk with all this black magic

202
00:08:00,000 --> 00:08:01,599
our container is free from security

203
00:08:01,599 --> 00:08:04,319
threats today

204
00:08:04,400 --> 00:08:06,560
unfortunately the answer might be a

205
00:08:06,560 --> 00:08:09,680
little bit annoying and disappointing

206
00:08:09,680 --> 00:08:12,160
but the truth is that the containers are

207
00:08:12,160 --> 00:08:14,080
far from secure

208
00:08:14,080 --> 00:08:17,280
one of the first reasons is that through

209
00:08:17,280 --> 00:08:20,319
even though designed almost perfectly

210
00:08:20,319 --> 00:08:22,240
but we lack security feature deployment

211
00:08:22,240 --> 00:08:24,800
in real production environment

212
00:08:24,800 --> 00:08:27,120
this can be due to their high energy

213
00:08:27,120 --> 00:08:30,800
barrier low roi and stability concerns

214
00:08:30,800 --> 00:08:33,279
and so on

215
00:08:33,279 --> 00:08:35,279
the investigation from tension cloud

216
00:08:35,279 --> 00:08:37,360
found out that there are still seven

217
00:08:37,360 --> 00:08:39,760
percent of users are still running

218
00:08:39,760 --> 00:08:42,080
without any security capabilities

219
00:08:42,080 --> 00:08:45,120
which can be very terrible

220
00:08:45,120 --> 00:08:47,200
furthermore some advanced security

221
00:08:47,200 --> 00:08:49,680
capabilities that we introduced just now

222
00:08:49,680 --> 00:08:51,279
are not yet a use

223
00:08:51,279 --> 00:08:55,839
to tackle with the advanced exploits

224
00:08:56,560 --> 00:08:59,040
besides the shortage of deployment

225
00:08:59,040 --> 00:09:01,120
another important fact that cannot be

226
00:09:01,120 --> 00:09:03,839
ignored is that the weaknesses are still

227
00:09:03,839 --> 00:09:06,000
across every layer

228
00:09:06,000 --> 00:09:07,680
the kernel layer

229
00:09:07,680 --> 00:09:09,200
the container layer and the

230
00:09:09,200 --> 00:09:11,360
orchestration layer

231
00:09:11,360 --> 00:09:15,279
even in this year or the past 2021 cves

232
00:09:15,279 --> 00:09:17,360
that can lead to container escape and

233
00:09:17,360 --> 00:09:19,839
privilege exclamation still come up very

234
00:09:19,839 --> 00:09:22,080
very frequently in the kernel layer and

235
00:09:22,080 --> 00:09:24,080
the container layer

236
00:09:24,080 --> 00:09:25,920
the content layer where the core

237
00:09:25,920 --> 00:09:28,240
container components like docker

238
00:09:28,240 --> 00:09:30,720
container d and run c are lying in

239
00:09:30,720 --> 00:09:32,080
are still facing a huge number of

240
00:09:32,080 --> 00:09:33,519
vulnerabilities

241
00:09:33,519 --> 00:09:35,839
not only the container escape privilege

242
00:09:35,839 --> 00:09:38,160
escalation but also in the command

243
00:09:38,160 --> 00:09:42,560
execution their mounts and configs

244
00:09:42,560 --> 00:09:43,600
even the

245
00:09:43,600 --> 00:09:45,680
virtualized secure containers like kata

246
00:09:45,680 --> 00:09:47,839
containers which were thought to be more

247
00:09:47,839 --> 00:09:51,200
secure are found to be not immune from

248
00:09:51,200 --> 00:09:54,480
some advanced hacks

249
00:09:54,880 --> 00:09:56,320
well in short

250
00:09:56,320 --> 00:09:58,320
the container on time security is yet

251
00:09:58,320 --> 00:10:00,640
another canon mouse game

252
00:10:00,640 --> 00:10:02,560
let's then deep dive into what are the

253
00:10:02,560 --> 00:10:04,480
recent advances of defense security

254
00:10:04,480 --> 00:10:06,640
techniques in the container world in

255
00:10:06,640 --> 00:10:09,120
response to the varied requirements and

256
00:10:09,120 --> 00:10:12,079
advanced attacks

257
00:10:12,240 --> 00:10:14,320
in real world

258
00:10:14,320 --> 00:10:16,959
inoculates and trusted process can

259
00:10:16,959 --> 00:10:19,760
sometimes become malicious during its

260
00:10:19,760 --> 00:10:22,480
lifetime because of bugs have been

261
00:10:22,480 --> 00:10:24,880
exploited by attackers or just triggered

262
00:10:24,880 --> 00:10:28,800
by or used misused by users

263
00:10:28,800 --> 00:10:30,839
a series of sandboxing mechanical

264
00:10:30,839 --> 00:10:33,680
mechanisms are therefore invented to

265
00:10:33,680 --> 00:10:36,240
help isolate a software component from

266
00:10:36,240 --> 00:10:38,800
the rest of the system

267
00:10:38,800 --> 00:10:40,880
in this picture we are comparing

268
00:10:40,880 --> 00:10:43,200
different sandboxing mechanisms

269
00:10:43,200 --> 00:10:45,440
and we will introduce today a recently

270
00:10:45,440 --> 00:10:49,519
one called landlock which has some

271
00:10:49,519 --> 00:10:52,399
advantages in performance fine grain

272
00:10:52,399 --> 00:10:55,600
control embedded policy and unprivileged

273
00:10:55,600 --> 00:10:57,680
use

274
00:10:57,680 --> 00:10:58,959
different from

275
00:10:58,959 --> 00:11:01,360
a mandatory access control mac provided

276
00:11:01,360 --> 00:11:04,560
by linux security module lsm in kernel

277
00:11:04,560 --> 00:11:07,279
then log is the first mac available to

278
00:11:07,279 --> 00:11:10,160
unprivileged processes on learning syncs

279
00:11:10,160 --> 00:11:12,320
513.

280
00:11:12,320 --> 00:11:15,040
landlord is such a sandboxing technique

281
00:11:15,040 --> 00:11:17,760
to restrict ambient rights according to

282
00:11:17,760 --> 00:11:19,839
the kernel semantic for example global

283
00:11:19,839 --> 00:11:22,880
file system accesses a set of processes

284
00:11:22,880 --> 00:11:25,200
to complete the limitations of the

285
00:11:25,200 --> 00:11:27,680
c-comp

286
00:11:27,760 --> 00:11:29,760
it also helps create a safe security

287
00:11:29,760 --> 00:11:32,959
sandboxes as new security layers

288
00:11:32,959 --> 00:11:34,959
in addition to the existing system-wide

289
00:11:34,959 --> 00:11:37,680
access controls

290
00:11:37,680 --> 00:11:39,839
so with landlock we are

291
00:11:39,839 --> 00:11:42,480
also able to compose success controls

292
00:11:42,480 --> 00:11:44,640
from multiple tenants for example system

293
00:11:44,640 --> 00:11:48,959
domains app developers and cloud clients

294
00:11:48,959 --> 00:11:50,800
it's a really interesting technique to

295
00:11:50,800 --> 00:11:53,200
enable built-in application sandboxing

296
00:11:53,200 --> 00:11:55,839
to protect against explorable

297
00:11:55,839 --> 00:11:58,240
in trusted applications via embedded

298
00:11:58,240 --> 00:11:59,360
policy

299
00:11:59,360 --> 00:12:01,279
or directly against untrusted

300
00:12:01,279 --> 00:12:02,480
applications

301
00:12:02,480 --> 00:12:06,639
via sandboxes or container managers

302
00:12:06,720 --> 00:12:08,959
the container on time is such a case

303
00:12:08,959 --> 00:12:12,720
that can benefit from landlock a lot

304
00:12:12,720 --> 00:12:14,880
equipping containers with landlocked is

305
00:12:14,880 --> 00:12:16,959
an ongoing effort happening in the wrong

306
00:12:16,959 --> 00:12:20,880
time spec and the wrong c communities

307
00:12:20,880 --> 00:12:22,959
here in this diagram we are

308
00:12:22,959 --> 00:12:25,040
demonstrating the schema in the runtime

309
00:12:25,040 --> 00:12:27,519
spec where users can specify the lan

310
00:12:27,519 --> 00:12:29,440
lock unprivileged set

311
00:12:29,440 --> 00:12:31,200
access control settings for the

312
00:12:31,200 --> 00:12:34,000
container process

313
00:12:34,000 --> 00:12:36,639
the users firstly need to identify a set

314
00:12:36,639 --> 00:12:39,519
of rules and define them as a rule set

315
00:12:39,519 --> 00:12:42,160
so in general the rule set is basically

316
00:12:42,160 --> 00:12:44,320
the actions or objects that need to be

317
00:12:44,320 --> 00:12:47,200
handled or restricted

318
00:12:47,200 --> 00:12:49,519
next the rules field specifies the

319
00:12:49,519 --> 00:12:51,279
security policies to be added to

320
00:12:51,279 --> 00:12:53,360
existing rule set

321
00:12:53,360 --> 00:12:55,360
and pass beneath is the only supported

322
00:12:55,360 --> 00:12:56,480
currently

323
00:12:56,480 --> 00:12:58,399
which is an array of

324
00:12:58,399 --> 00:13:01,519
the file hierarchy type rules

325
00:13:01,519 --> 00:13:03,279
in each rule

326
00:13:03,279 --> 00:13:05,200
users can specify a fine-grained

327
00:13:05,200 --> 00:13:07,360
approach of the file's hierarchies to

328
00:13:07,360 --> 00:13:09,760
restrict and the actions are allowed for

329
00:13:09,760 --> 00:13:11,680
each one

330
00:13:11,680 --> 00:13:15,200
a best effort control is also provided

331
00:13:15,200 --> 00:13:17,120
to help the runtime enforce the

332
00:13:17,120 --> 00:13:19,920
strongest rules configured up to the

333
00:13:19,920 --> 00:13:24,079
kernel which is currently supported

334
00:13:24,560 --> 00:13:27,600
in general unpredicted sandboxing can be

335
00:13:27,600 --> 00:13:31,040
enabled through this approach

336
00:13:31,440 --> 00:13:34,079
then let's take a look at an advanced

337
00:13:34,079 --> 00:13:36,880
attack called crossht attack

338
00:13:36,880 --> 00:13:39,040
ht here stands for hyper threading or

339
00:13:39,040 --> 00:13:40,720
hyperthreads

340
00:13:40,720 --> 00:13:42,399
a cross-hd attack

341
00:13:42,399 --> 00:13:44,399
involves the attacker and the victim

342
00:13:44,399 --> 00:13:46,639
running on different types of threats of

343
00:13:46,639 --> 00:13:48,720
the same core

344
00:13:48,720 --> 00:13:51,680
mds and l1tf are examples

345
00:13:51,680 --> 00:13:54,320
of such attacks where an attacker is

346
00:13:54,320 --> 00:13:56,720
able to steal secrets from another

347
00:13:56,720 --> 00:13:58,079
co-located

348
00:13:58,079 --> 00:13:59,440
hyperthread

349
00:13:59,440 --> 00:14:02,800
through some set channels

350
00:14:02,800 --> 00:14:05,600
the only full mitigation of cross ht

351
00:14:05,600 --> 00:14:08,320
attacks is to disable ht

352
00:14:08,320 --> 00:14:10,240
which is considered to be extremely

353
00:14:10,240 --> 00:14:13,040
inefficient

354
00:14:14,480 --> 00:14:17,600
cross scheduling since linux 514 is a

355
00:14:17,600 --> 00:14:20,160
scheduler feature that can mitigate some

356
00:14:20,160 --> 00:14:22,800
but not all cross hd attacks

357
00:14:22,800 --> 00:14:25,279
it allows http to be enabled or turned

358
00:14:25,279 --> 00:14:28,399
on safely by ensuring that only tasks in

359
00:14:28,399 --> 00:14:31,839
a user designated untrusted group can

360
00:14:31,839 --> 00:14:34,480
share a call

361
00:14:35,199 --> 00:14:37,199
this increase in core sharing can also

362
00:14:37,199 --> 00:14:39,440
improve performance however it is not

363
00:14:39,440 --> 00:14:41,120
guaranteed that the performance will

364
00:14:41,120 --> 00:14:42,399
always improve

365
00:14:42,399 --> 00:14:44,720
so that is seen to be the case with the

366
00:14:44,720 --> 00:14:47,440
number of real-world workloads

367
00:14:47,440 --> 00:14:48,959
but in theory

368
00:14:48,959 --> 00:14:51,199
cost scheduling aims to perform at least

369
00:14:51,199 --> 00:14:53,440
as good as when have us writing is

370
00:14:53,440 --> 00:14:56,079
disabled

371
00:14:56,160 --> 00:14:58,079
the basic concept of course scheduling

372
00:14:58,079 --> 00:15:00,160
is to allow user space to define groups

373
00:15:00,160 --> 00:15:03,199
of tasks and can share a core

374
00:15:03,199 --> 00:15:05,600
from this diagram here

375
00:15:05,600 --> 00:15:07,680
we can observe that some tasks are

376
00:15:07,680 --> 00:15:09,120
grouped together

377
00:15:09,120 --> 00:15:12,160
the grouped tasks are holding the same

378
00:15:12,160 --> 00:15:15,680
so-called task cookies

379
00:15:15,680 --> 00:15:17,600
tasks from the same group

380
00:15:17,600 --> 00:15:20,720
for example t1 and t5 can be scheduled

381
00:15:20,720 --> 00:15:22,880
on the same core

382
00:15:22,880 --> 00:15:25,040
there are two other rules the first one

383
00:15:25,040 --> 00:15:28,240
is that never mixing on the same core

384
00:15:28,240 --> 00:15:30,480
tasks from different groups

385
00:15:30,480 --> 00:15:33,680
for instance t6 and t7 on the right of

386
00:15:33,680 --> 00:15:35,759
the diagram will never be scheduled onto

387
00:15:35,759 --> 00:15:37,680
the same floor

388
00:15:37,680 --> 00:15:40,399
another one is to never mix on the same

389
00:15:40,399 --> 00:15:43,440
call the tasks that one is grouped and

390
00:15:43,440 --> 00:15:44,800
another one

391
00:15:44,800 --> 00:15:48,240
which is not or ungrouped

392
00:15:48,240 --> 00:15:51,680
some cpu threads may stay idle even if

393
00:15:51,680 --> 00:15:53,680
run queue is not empty

394
00:15:53,680 --> 00:15:56,639
in this diagram we can find that ta and

395
00:15:56,639 --> 00:16:00,320
t9 are in this case

396
00:16:00,320 --> 00:16:02,240
know that co-scheduling can also help

397
00:16:02,240 --> 00:16:04,480
with some performance use cases but we

398
00:16:04,480 --> 00:16:06,639
will not elaborate them here in this

399
00:16:06,639 --> 00:16:09,639
topic

400
00:16:09,759 --> 00:16:11,120
enhancing containers with core

401
00:16:11,120 --> 00:16:12,560
scheduling support

402
00:16:12,560 --> 00:16:14,880
is also raised in the runtime spec and

403
00:16:14,880 --> 00:16:17,600
around c communities

404
00:16:17,600 --> 00:16:20,000
in this schema users are allowed to

405
00:16:20,000 --> 00:16:21,839
configure the course scheduling options

406
00:16:21,839 --> 00:16:23,839
for the container

407
00:16:23,839 --> 00:16:25,759
by coursegate users are allowed to

408
00:16:25,759 --> 00:16:28,480
define the following operations

409
00:16:28,480 --> 00:16:30,480
the create

410
00:16:30,480 --> 00:16:32,639
field can choose whether to create a new

411
00:16:32,639 --> 00:16:34,160
unique cookie

412
00:16:34,160 --> 00:16:36,800
for the process in the container

413
00:16:36,800 --> 00:16:40,320
the share to field specified the pids

414
00:16:40,320 --> 00:16:41,440
that

415
00:16:41,440 --> 00:16:43,120
the course get cookie of the current

416
00:16:43,120 --> 00:16:44,800
process should push to

417
00:16:44,800 --> 00:16:47,839
and share form specifies the pids that

418
00:16:47,839 --> 00:16:49,839
the calls get copied of the current

419
00:16:49,839 --> 00:16:52,639
process should prove from

420
00:16:52,639 --> 00:16:54,959
all these provide support for setting

421
00:16:54,959 --> 00:16:57,440
and copying cost scheduling task cookies

422
00:16:57,440 --> 00:16:59,440
between the container processes

423
00:16:59,440 --> 00:17:01,839
and the threads processes and the

424
00:17:01,839 --> 00:17:04,400
process groups which helps define groups

425
00:17:04,400 --> 00:17:06,799
of tasks that can be co-scheduled onto

426
00:17:06,799 --> 00:17:09,439
the same core according to the basic

427
00:17:09,439 --> 00:17:13,199
concept that we mentioned just now

428
00:17:13,520 --> 00:17:15,039
the hardware software code design is

429
00:17:15,039 --> 00:17:16,959
another merging advance in the container

430
00:17:16,959 --> 00:17:18,480
security enhancement

431
00:17:18,480 --> 00:17:20,720
that is worth introducing here in our

432
00:17:20,720 --> 00:17:22,480
talk

433
00:17:22,480 --> 00:17:24,160
for instance the control flow

434
00:17:24,160 --> 00:17:26,000
enforcement technology

435
00:17:26,000 --> 00:17:28,160
deliver cpu level

436
00:17:28,160 --> 00:17:31,039
level security capabilities to help

437
00:17:31,039 --> 00:17:35,039
protect against quantum malware attacks

438
00:17:35,039 --> 00:17:37,039
and they have been a challenge to

439
00:17:37,039 --> 00:17:40,480
mitigate with software alone

440
00:17:40,480 --> 00:17:42,240
cet offers

441
00:17:42,240 --> 00:17:44,880
two key capabilities to help define

442
00:17:44,880 --> 00:17:47,520
against control flow hijacking malware

443
00:17:47,520 --> 00:17:50,960
here we can find these two technologies

444
00:17:50,960 --> 00:17:52,960
the first one is called indirect branch

445
00:17:52,960 --> 00:17:55,760
tracking ibt and the second one is

446
00:17:55,760 --> 00:17:57,600
called shadow stack

447
00:17:57,600 --> 00:17:59,520
we call it ss

448
00:17:59,520 --> 00:18:02,799
you can see from the left left part that

449
00:18:02,799 --> 00:18:04,880
the ibt delivers indirect branch

450
00:18:04,880 --> 00:18:07,760
protection to defend against jump or

451
00:18:07,760 --> 00:18:10,080
core oriented programming we often call

452
00:18:10,080 --> 00:18:12,720
them gop or copy attacks

453
00:18:12,720 --> 00:18:14,400
you can see from the picture

454
00:18:14,400 --> 00:18:16,640
that ibt will prevent attacks from

455
00:18:16,640 --> 00:18:19,679
jumping to arbitrary addresses

456
00:18:19,679 --> 00:18:22,240
and the ss technology on the right

457
00:18:22,240 --> 00:18:24,640
delivers the return address protection

458
00:18:24,640 --> 00:18:26,960
to help defend against return-oriented

459
00:18:26,960 --> 00:18:28,960
programming we often call them rope

460
00:18:28,960 --> 00:18:30,400
attacks

461
00:18:30,400 --> 00:18:32,640
in this picture we notice that ss will

462
00:18:32,640 --> 00:18:35,200
block call if return addresses on both

463
00:18:35,200 --> 00:18:37,760
sets don't match

464
00:18:37,760 --> 00:18:39,760
these types of attack methods are part

465
00:18:39,760 --> 00:18:42,480
of a class of malware referred to as

466
00:18:42,480 --> 00:18:44,240
memory safety issues

467
00:18:44,240 --> 00:18:46,080
and include tactics

468
00:18:46,080 --> 00:18:48,320
such as the corruption of step buffer

469
00:18:48,320 --> 00:18:51,039
overflow and use after free

470
00:18:51,039 --> 00:18:53,039
there may be widely used techniques in

471
00:18:53,039 --> 00:18:55,679
large classes of vulnerable

472
00:18:55,679 --> 00:18:59,440
exploits in the container world

473
00:18:59,840 --> 00:19:02,080
and most recently data breaches have

474
00:19:02,080 --> 00:19:02,880
been

475
00:19:02,880 --> 00:19:05,120
increasing which is constantly suffering

476
00:19:05,120 --> 00:19:06,480
enterprises

477
00:19:06,480 --> 00:19:09,360
and regulators and customers

478
00:19:09,360 --> 00:19:11,120
for containers

479
00:19:11,120 --> 00:19:13,360
which are the de facto vehicles carrying

480
00:19:13,360 --> 00:19:15,600
a variety of workloads today

481
00:19:15,600 --> 00:19:17,520
are facing rising concerns about the

482
00:19:17,520 --> 00:19:19,039
privacy or the protection of

483
00:19:19,039 --> 00:19:20,559
confidential

484
00:19:20,559 --> 00:19:23,039
code and data within them apart from the

485
00:19:23,039 --> 00:19:25,679
security concerns

486
00:19:25,679 --> 00:19:28,400
the consequently the augmented threat

487
00:19:28,400 --> 00:19:30,240
model has come into being in this

488
00:19:30,240 --> 00:19:32,400
context

489
00:19:32,400 --> 00:19:34,720
different from the original threat model

490
00:19:34,720 --> 00:19:37,520
which considers the host to be benign

491
00:19:37,520 --> 00:19:39,840
and includes the host software stack

492
00:19:39,840 --> 00:19:42,880
into the trusted computing base tcb

493
00:19:42,880 --> 00:19:44,720
the intention of this thread model is to

494
00:19:44,720 --> 00:19:46,480
prevent the whole software stack from

495
00:19:46,480 --> 00:19:48,880
accessing container data and code while

496
00:19:48,880 --> 00:19:51,200
in use

497
00:19:51,200 --> 00:19:53,120
a new technology called confidential

498
00:19:53,120 --> 00:19:55,679
computing makes it all possible to

499
00:19:55,679 --> 00:19:59,200
provide isolation runtime encryption and

500
00:19:59,200 --> 00:20:01,280
verifiability at the same time to fill

501
00:20:01,280 --> 00:20:03,600
in this blank

502
00:20:03,600 --> 00:20:05,440
with confidential computing we are able

503
00:20:05,440 --> 00:20:07,280
to completely remove the whole software

504
00:20:07,280 --> 00:20:09,760
stack from the container tcb

505
00:20:09,760 --> 00:20:12,799
this includes the host software

506
00:20:12,799 --> 00:20:13,840
which are

507
00:20:13,840 --> 00:20:17,600
host firmware kernel os hypervisor which

508
00:20:17,600 --> 00:20:20,400
are all out of the tcb and only the

509
00:20:20,400 --> 00:20:23,679
tenant can see and modify its data

510
00:20:23,679 --> 00:20:26,320
we can see that infrastructure owner

511
00:20:26,320 --> 00:20:28,640
sometimes this csp cloud service

512
00:20:28,640 --> 00:20:30,880
providers themselves are not even

513
00:20:30,880 --> 00:20:34,320
trusted in this case

514
00:20:34,320 --> 00:20:36,000
now with additional support in the

515
00:20:36,000 --> 00:20:37,440
container runtime

516
00:20:37,440 --> 00:20:39,679
a two-way sandbox for seamless security

517
00:20:39,679 --> 00:20:41,840
and privacy we call them confidential

518
00:20:41,840 --> 00:20:44,320
containers can be constructed based on

519
00:20:44,320 --> 00:20:46,480
hardware based trusted execution

520
00:20:46,480 --> 00:20:48,720
environment

521
00:20:48,720 --> 00:20:50,400
there are in general two types of

522
00:20:50,400 --> 00:20:52,960
confidential containers we can see

523
00:20:52,960 --> 00:20:54,960
them in this diagram

524
00:20:54,960 --> 00:20:56,720
the first one is called process based

525
00:20:56,720 --> 00:20:59,919
and the second one is called vm-based

526
00:20:59,919 --> 00:21:01,440
the process-based confidential

527
00:21:01,440 --> 00:21:04,080
containers can be built on top of intel

528
00:21:04,080 --> 00:21:06,480
sgx for example

529
00:21:06,480 --> 00:21:08,640
process-based isolation is beneficial by

530
00:21:08,640 --> 00:21:11,520
joining the isolation boundary exactly

531
00:21:11,520 --> 00:21:13,919
around each container process

532
00:21:13,919 --> 00:21:15,919
and this reduces the trusted computing

533
00:21:15,919 --> 00:21:16,799
base

534
00:21:16,799 --> 00:21:18,880
to some extent

535
00:21:18,880 --> 00:21:21,120
in contrast the vm-based confidential

536
00:21:21,120 --> 00:21:23,280
containers can be more straightforward

537
00:21:23,280 --> 00:21:25,440
with the hardware will augment directly

538
00:21:25,440 --> 00:21:27,840
the vm-based secure containers for

539
00:21:27,840 --> 00:21:29,840
example cutter containers to guarantee

540
00:21:29,840 --> 00:21:32,480
confidentiality and integrity based on

541
00:21:32,480 --> 00:21:34,720
that

542
00:21:34,720 --> 00:21:37,200
additionally image management and the

543
00:21:37,200 --> 00:21:39,919
test station services should be provided

544
00:21:39,919 --> 00:21:42,159
to firstly ensure that the container

545
00:21:42,159 --> 00:21:46,159
image is always encrypted or signed

546
00:21:46,159 --> 00:21:47,760
i mean the container images should be

547
00:21:47,760 --> 00:21:49,679
protected in some

548
00:21:49,679 --> 00:21:50,799
cases

549
00:21:50,799 --> 00:21:52,559
and their post processing

550
00:21:52,559 --> 00:21:54,159
is also need to be

551
00:21:54,159 --> 00:21:56,799
protected

552
00:21:57,039 --> 00:21:59,760
and secondly the ability to test the

553
00:21:59,760 --> 00:22:01,360
confidential containers

554
00:22:01,360 --> 00:22:04,320
which run on top of genuine and trusted

555
00:22:04,320 --> 00:22:06,640
hardware should be guaranteed and the

556
00:22:06,640 --> 00:22:11,720
workload is exactly expected

557
00:22:12,000 --> 00:22:14,000
here we are unable to dive into every

558
00:22:14,000 --> 00:22:16,400
single detail of the potential gaps that

559
00:22:16,400 --> 00:22:20,000
the original containers need to fill in

560
00:22:20,000 --> 00:22:22,240
but we list a few of them from a bird's

561
00:22:22,240 --> 00:22:24,320
eye view

562
00:22:24,320 --> 00:22:26,960
firstly confidential container runtimes

563
00:22:26,960 --> 00:22:28,720
need to

564
00:22:28,720 --> 00:22:30,720
adapt to different hardware based

565
00:22:30,720 --> 00:22:31,840
encryption

566
00:22:31,840 --> 00:22:34,240
they should also support attestation key

567
00:22:34,240 --> 00:22:37,280
provisioning and the secure agent apis

568
00:22:37,280 --> 00:22:38,400
which are

569
00:22:38,400 --> 00:22:40,720
strictly limited to confidential

570
00:22:40,720 --> 00:22:43,280
containers

571
00:22:43,679 --> 00:22:46,000
also for confidential container images

572
00:22:46,000 --> 00:22:48,400
the image service offloading layer

573
00:22:48,400 --> 00:22:51,200
encryption and security context need to

574
00:22:51,200 --> 00:22:53,280
be added to adapt to the confidential

575
00:22:53,280 --> 00:22:55,919
computing usages

576
00:22:55,919 --> 00:22:58,400
for confidential container os is

577
00:22:58,400 --> 00:23:00,960
minimized tcp and unified onclick

578
00:23:00,960 --> 00:23:04,960
abstractions as the top two requirements

579
00:23:04,960 --> 00:23:06,640
we should also know that confidential

580
00:23:06,640 --> 00:23:09,679
container orchestration and monitoring

581
00:23:09,679 --> 00:23:12,320
especially for the logging debugging

582
00:23:12,320 --> 00:23:14,880
error management and potential migration

583
00:23:14,880 --> 00:23:17,120
vci guarantees

584
00:23:17,120 --> 00:23:19,039
should also be considered by the

585
00:23:19,039 --> 00:23:22,600
confidential containers

586
00:23:23,120 --> 00:23:24,880
you may have the ambition to achieve a

587
00:23:24,880 --> 00:23:27,840
further stronger strain model

588
00:23:27,840 --> 00:23:29,919
yes indeed it should be possible

589
00:23:29,919 --> 00:23:31,919
ultimately

590
00:23:31,919 --> 00:23:33,760
imagine we'd like to extend an intro

591
00:23:33,760 --> 00:23:35,360
container with more fine-grained

592
00:23:35,360 --> 00:23:36,640
isolation

593
00:23:36,640 --> 00:23:38,880
in this case for example we'd like to

594
00:23:38,880 --> 00:23:40,880
only consider the sensitive data

595
00:23:40,880 --> 00:23:43,679
compartment within this container and

596
00:23:43,679 --> 00:23:46,720
the hardware it runs on to be trusted

597
00:23:46,720 --> 00:23:49,200
where with all the others including the

598
00:23:49,200 --> 00:23:52,240
libraries and references by the comp

599
00:23:52,240 --> 00:23:55,760
department can be malicious

600
00:23:55,760 --> 00:23:58,559
actually multiple fine-grained isolation

601
00:23:58,559 --> 00:24:01,600
techniques are already available

602
00:24:01,600 --> 00:24:04,720
to help this dream come true

603
00:24:04,720 --> 00:24:06,720
they often have different execution of

604
00:24:06,720 --> 00:24:08,240
switching overheads

605
00:24:08,240 --> 00:24:10,080
so one of the

606
00:24:10,080 --> 00:24:12,159
challenges here is to balance between

607
00:24:12,159 --> 00:24:14,559
security and performance for different

608
00:24:14,559 --> 00:24:17,039
container workloads

609
00:24:17,039 --> 00:24:19,200
one example is to integrate or combine

610
00:24:19,200 --> 00:24:21,200
the memory protection keys as known as

611
00:24:21,200 --> 00:24:23,600
mpk with containers

612
00:24:23,600 --> 00:24:26,080
this mpk is able to tag memory pages

613
00:24:26,080 --> 00:24:28,880
within the containers using p keys

614
00:24:28,880 --> 00:24:30,000
within

615
00:24:30,000 --> 00:24:33,200
a permission register called pkru

616
00:24:33,200 --> 00:24:35,360
which is provided to allow the user

617
00:24:35,360 --> 00:24:37,840
space instruction to update pkru so that

618
00:24:37,840 --> 00:24:40,159
letting the hardware to enforce the

619
00:24:40,159 --> 00:24:42,240
isolation between the compartments

620
00:24:42,240 --> 00:24:46,039
within the containers

621
00:24:46,480 --> 00:24:48,799
well i think we might be

622
00:24:48,799 --> 00:24:50,880
getting the right feeling that advances

623
00:24:50,880 --> 00:24:53,760
of container security will never stop

624
00:24:53,760 --> 00:24:55,679
just as new attack measures will

625
00:24:55,679 --> 00:24:58,000
continue to emerge

626
00:24:58,000 --> 00:25:00,080
the future of container security still

627
00:25:00,080 --> 00:25:02,400
has a lot to explore and it's worth

628
00:25:02,400 --> 00:25:04,799
checking out

629
00:25:04,799 --> 00:25:06,480
that's all for my talk thanks for

630
00:25:06,480 --> 00:25:10,600
listening any questions

