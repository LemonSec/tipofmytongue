1
00:00:00,240 --> 00:00:03,120
all right so continuing on

2
00:00:03,120 --> 00:00:06,080
so now we have steve judd and chris

3
00:00:06,080 --> 00:00:08,080
clarkson they are going to be talking

4
00:00:08,080 --> 00:00:09,519
about what's inside of your container

5
00:00:09,519 --> 00:00:13,360
image and dependency auditing

6
00:00:15,679 --> 00:00:17,119
good afternoon everyone i'm chris

7
00:00:17,119 --> 00:00:18,640
clarkson security engineering lead at

8
00:00:18,640 --> 00:00:20,240
improvable defence

9
00:00:20,240 --> 00:00:22,400
and i'm steve jurd i'm the tech lead and

10
00:00:22,400 --> 00:00:24,960
i work for a company called jet stack

11
00:00:24,960 --> 00:00:26,160
so

12
00:00:26,160 --> 00:00:27,920
we to set the scene on

13
00:00:27,920 --> 00:00:29,760
how we start out on this work we started

14
00:00:29,760 --> 00:00:31,519
looking at our supply chain as many

15
00:00:31,519 --> 00:00:33,520
people have talked about today

16
00:00:33,520 --> 00:00:35,680
asking ourselves these four questions

17
00:00:35,680 --> 00:00:37,520
what makes up our products

18
00:00:37,520 --> 00:00:39,440
how much that product is from open

19
00:00:39,440 --> 00:00:41,200
source how much is from inner source how

20
00:00:41,200 --> 00:00:43,040
much is proprietary

21
00:00:43,040 --> 00:00:44,559
where those components come from do they

22
00:00:44,559 --> 00:00:46,960
come from gitlab github bitbucket or

23
00:00:46,960 --> 00:00:49,200
somewhere else

24
00:00:49,200 --> 00:00:50,960
where are these components used so what

25
00:00:50,960 --> 00:00:52,239
environment are they used in is that

26
00:00:52,239 --> 00:00:54,399
development is it production is it test

27
00:00:54,399 --> 00:00:56,239
and in one in what context is it an

28
00:00:56,239 --> 00:00:58,160
observability context is it the actual

29
00:00:58,160 --> 00:01:00,399
application running and finally who has

30
00:01:00,399 --> 00:01:02,719
control over those components

31
00:01:02,719 --> 00:01:06,240
can they retract it republish it edit it

32
00:01:06,240 --> 00:01:08,640
and or add other other code to it and

33
00:01:08,640 --> 00:01:10,240
what uh what risk does that open us up

34
00:01:10,240 --> 00:01:12,720
to as consumers of that component

35
00:01:12,720 --> 00:01:15,119
why is this important well to start with

36
00:01:15,119 --> 00:01:17,040
responding to the landscape as some have

37
00:01:17,040 --> 00:01:18,560
mentioned today

38
00:01:18,560 --> 00:01:22,080
there's been quite a few uh open source

39
00:01:22,080 --> 00:01:22,960
sorry

40
00:01:22,960 --> 00:01:25,040
supply chain vulnerabilities and issues

41
00:01:25,040 --> 00:01:27,360
appeared so you've logged for shell and

42
00:01:27,360 --> 00:01:28,400
so

43
00:01:28,400 --> 00:01:31,200
the solar winds issues

44
00:01:31,200 --> 00:01:34,320
so we we decided to take advantage of

45
00:01:34,320 --> 00:01:36,000
not being affected as much so that we

46
00:01:36,000 --> 00:01:37,520
could start working on the maturity as a

47
00:01:37,520 --> 00:01:39,680
team in an organization and factoring

48
00:01:39,680 --> 00:01:42,320
open source security and

49
00:01:42,320 --> 00:01:44,240
supply chain security into our led

50
00:01:44,240 --> 00:01:46,079
defensive model

51
00:01:46,079 --> 00:01:48,159
also it allows us to get a better in get

52
00:01:48,159 --> 00:01:49,759
get a better idea of what's in our

53
00:01:49,759 --> 00:01:51,280
product as we as we sell it and what

54
00:01:51,280 --> 00:01:53,040
kind of differences that are making the

55
00:01:53,040 --> 00:01:54,320
different use cases that our customers

56
00:01:54,320 --> 00:01:56,240
put it to

57
00:01:56,240 --> 00:01:58,000
next up we need to better serve our

58
00:01:58,000 --> 00:02:00,079
customers uh we deal with uh government

59
00:02:00,079 --> 00:02:01,600
agencies in various varying

60
00:02:01,600 --> 00:02:03,840
jurisdictions so their legislative and

61
00:02:03,840 --> 00:02:05,840
compliance requirements

62
00:02:05,840 --> 00:02:07,920
often have an impact on how we deal with

63
00:02:07,920 --> 00:02:09,199
how we deal with these these kind of

64
00:02:09,199 --> 00:02:10,479
issues

65
00:02:10,479 --> 00:02:12,560
our u.s colleagues for example

66
00:02:12,560 --> 00:02:13,840
they're they're subject to president

67
00:02:13,840 --> 00:02:15,680
biden's executive order on cyber

68
00:02:15,680 --> 00:02:17,520
security which means an improvement

69
00:02:17,520 --> 00:02:18,640
everyone that deals with the federal

70
00:02:18,640 --> 00:02:20,239
government has to have a better answer

71
00:02:20,239 --> 00:02:22,080
when it comes to supply chain management

72
00:02:22,080 --> 00:02:25,120
vulnerability management and the like

73
00:02:25,120 --> 00:02:26,879
we also want to give our heroes a rest

74
00:02:26,879 --> 00:02:28,800
so whenever there's an issue you've got

75
00:02:28,800 --> 00:02:30,239
a small group of people with a knowledge

76
00:02:30,239 --> 00:02:32,239
and experience and the skill who know

77
00:02:32,239 --> 00:02:33,760
what to do and when to do it if an issue

78
00:02:33,760 --> 00:02:35,680
arises we'd rather have those people on

79
00:02:35,680 --> 00:02:38,160
more complex and more fulfilling pieces

80
00:02:38,160 --> 00:02:40,319
of work so we need to make this easier

81
00:02:40,319 --> 00:02:42,000
more accessible to our broader response

82
00:02:42,000 --> 00:02:43,519
teams and that that means we've got to

83
00:02:43,519 --> 00:02:44,720
capture the information and make it

84
00:02:44,720 --> 00:02:47,680
available so anyone can get notified

85
00:02:47,680 --> 00:02:49,680
and respond accordingly

86
00:02:49,680 --> 00:02:50,640
finally

87
00:02:50,640 --> 00:02:51,599
the uh

88
00:02:51,599 --> 00:02:53,120
the commercial engagement so both in our

89
00:02:53,120 --> 00:02:55,440
current markets and our emerging markets

90
00:02:55,440 --> 00:02:57,360
we've got we're looking at how we deal

91
00:02:57,360 --> 00:02:59,120
with the increased number of uh requests

92
00:02:59,120 --> 00:03:01,680
for s-bomb and vulnerability management

93
00:03:01,680 --> 00:03:03,040
and

94
00:03:03,040 --> 00:03:04,800
we do we have to answer the fact that as

95
00:03:04,800 --> 00:03:06,959
an industry we realize this is we can't

96
00:03:06,959 --> 00:03:08,560
go on as we have been we've got to have

97
00:03:08,560 --> 00:03:11,519
a better story for this

98
00:03:12,239 --> 00:03:13,920
what do we want to achieve from this so

99
00:03:13,920 --> 00:03:16,159
first of all a component a component

100
00:03:16,159 --> 00:03:17,760
inventory we need to know what we've got

101
00:03:17,760 --> 00:03:19,120
we need to know what we're selling and

102
00:03:19,120 --> 00:03:21,360
we need to know what is going downstream

103
00:03:21,360 --> 00:03:22,640
to our customers

104
00:03:22,640 --> 00:03:24,400
so we need to know who created it where

105
00:03:24,400 --> 00:03:25,519
it came from or what version it's

106
00:03:25,519 --> 00:03:27,680
running at so that allows us then to

107
00:03:27,680 --> 00:03:29,200
model against that what vulnerabilities

108
00:03:29,200 --> 00:03:30,400
we might be carrying what we might

109
00:03:30,400 --> 00:03:32,159
introduce but also what might be

110
00:03:32,159 --> 00:03:35,120
introduced downstream

111
00:03:35,840 --> 00:03:37,120
we want as i mentioned we want to

112
00:03:37,120 --> 00:03:38,319
understand those vulnerabilities and

113
00:03:38,319 --> 00:03:40,319
track those and be proactive

114
00:03:40,319 --> 00:03:42,879
in how we notify people downstream

115
00:03:42,879 --> 00:03:44,640
and in addition to that the licenses

116
00:03:44,640 --> 00:03:46,959
that we're working with so some of our

117
00:03:46,959 --> 00:03:48,879
customers have difficulty in complying

118
00:03:48,879 --> 00:03:50,480
with certain of the open source licenses

119
00:03:50,480 --> 00:03:52,159
so we need to know which ones are those

120
00:03:52,159 --> 00:03:53,920
we carry with us so that we can work

121
00:03:53,920 --> 00:03:55,360
with the customers

122
00:03:55,360 --> 00:03:57,200
and mitigate those kind of risks

123
00:03:57,200 --> 00:03:58,799
and finally the discoverability of these

124
00:03:58,799 --> 00:04:02,239
issues we need a single pane of glass to

125
00:04:02,239 --> 00:04:03,680
allow people to see

126
00:04:03,680 --> 00:04:05,439
the issues that we might have the the

127
00:04:05,439 --> 00:04:06,959
components that we've got the licenses

128
00:04:06,959 --> 00:04:08,640
that we've got in a single pane of glass

129
00:04:08,640 --> 00:04:10,080
rather than these individual siloed

130
00:04:10,080 --> 00:04:12,400
applications that we're that currently

131
00:04:12,400 --> 00:04:13,680
currently deployed across our

132
00:04:13,680 --> 00:04:15,599
infrastructure

133
00:04:15,599 --> 00:04:17,358
brilliant thanks chris

134
00:04:17,358 --> 00:04:19,358
so in the last half of this talk i'm

135
00:04:19,358 --> 00:04:21,440
going to go through how do we deliver on

136
00:04:21,440 --> 00:04:23,440
these requirements for improbable so

137
00:04:23,440 --> 00:04:26,000
basically i've split it into five

138
00:04:26,000 --> 00:04:28,240
steps and the aim is by the end of this

139
00:04:28,240 --> 00:04:29,840
you should be able to go away

140
00:04:29,840 --> 00:04:33,440
understanding how we can get to a way of

141
00:04:33,440 --> 00:04:35,680
auditing our dependencies so that you

142
00:04:35,680 --> 00:04:37,280
could potentially apply in your

143
00:04:37,280 --> 00:04:39,440
organization

144
00:04:39,440 --> 00:04:42,080
so the first step is you need to be

145
00:04:42,080 --> 00:04:44,400
investing in using only a trusted image

146
00:04:44,400 --> 00:04:47,600
image registry in your own organization

147
00:04:47,600 --> 00:04:49,520
so essentially as you can see from the

148
00:04:49,520 --> 00:04:52,320
diagram rather than getting

149
00:04:52,320 --> 00:04:55,280
your images direct from external

150
00:04:55,280 --> 00:04:58,000
sources such as docker hub or key you're

151
00:04:58,000 --> 00:05:00,000
pulling them direct from your trusted

152
00:05:00,000 --> 00:05:01,520
registry

153
00:05:01,520 --> 00:05:03,680
so that gives you a couple of benefits

154
00:05:03,680 --> 00:05:05,440
first of which is that you've now got

155
00:05:05,440 --> 00:05:08,240
much more control and insight into the

156
00:05:08,240 --> 00:05:10,240
images which you're using in your

157
00:05:10,240 --> 00:05:12,560
organization though clearly this means

158
00:05:12,560 --> 00:05:14,720
that all of your developers and ci

159
00:05:14,720 --> 00:05:17,759
pipelines and kubernetes clusters do

160
00:05:17,759 --> 00:05:19,680
need to pull from your trusted registry

161
00:05:19,680 --> 00:05:22,160
only and the second benefit is that

162
00:05:22,160 --> 00:05:24,720
you're much less impacted if there were

163
00:05:24,720 --> 00:05:26,880
some problems with an upstream registry

164
00:05:26,880 --> 00:05:28,400
for example if the registry was

165
00:05:28,400 --> 00:05:30,639
unavailable for a period of time or if

166
00:05:30,639 --> 00:05:32,560
they deleted one of the images that you

167
00:05:32,560 --> 00:05:35,440
were dependent on

168
00:05:36,160 --> 00:05:39,280
so step number two once an image is

169
00:05:39,280 --> 00:05:41,680
added into your registry you want to be

170
00:05:41,680 --> 00:05:44,720
generating a software bill of materials

171
00:05:44,720 --> 00:05:47,039
um so we've had quite a lot of really

172
00:05:47,039 --> 00:05:48,720
interesting talks today about what an

173
00:05:48,720 --> 00:05:50,800
s-bomb is so the parts that are of

174
00:05:50,800 --> 00:05:53,199
interest to us specifically are the list

175
00:05:53,199 --> 00:05:55,919
of dependencies that are con that the

176
00:05:55,919 --> 00:05:58,400
the s-bomb tells us are contained within

177
00:05:58,400 --> 00:06:01,199
that image so to in order to generate

178
00:06:01,199 --> 00:06:02,960
that s-bomb we're using a tool from

179
00:06:02,960 --> 00:06:05,280
anchor called sift and we use the

180
00:06:05,280 --> 00:06:08,560
cyclone dx format

181
00:06:08,560 --> 00:06:12,560
so once we've got this s-bomb generated

182
00:06:12,560 --> 00:06:13,600
then

183
00:06:13,600 --> 00:06:15,360
we need to be

184
00:06:15,360 --> 00:06:18,560
evaluating the licenses that that images

185
00:06:18,560 --> 00:06:20,880
image contains and also the

186
00:06:20,880 --> 00:06:23,280
vulnerabilities that it contains we use

187
00:06:23,280 --> 00:06:25,280
a tool from owasp called dependency

188
00:06:25,280 --> 00:06:28,240
track and that helps us perform manage

189
00:06:28,240 --> 00:06:31,039
and store these evaluations

190
00:06:31,039 --> 00:06:34,000
dependency track also contains a policy

191
00:06:34,000 --> 00:06:37,600
engine and we are a pla we are basically

192
00:06:37,600 --> 00:06:40,400
applying a security policy and we use

193
00:06:40,400 --> 00:06:43,280
dependency track to tell us whether a

194
00:06:43,280 --> 00:06:46,800
newly added image uh meets our policies

195
00:06:46,800 --> 00:06:49,840
or not

196
00:06:50,880 --> 00:06:53,199
so armed with the information about

197
00:06:53,199 --> 00:06:55,440
whether the policy is compliant or not

198
00:06:55,440 --> 00:06:58,319
if it's not we can issue an alert to the

199
00:06:58,319 --> 00:07:00,080
security team so that they can do

200
00:07:00,080 --> 00:07:01,840
further evaluation and possibly

201
00:07:01,840 --> 00:07:04,240
investigate mitigations

202
00:07:04,240 --> 00:07:07,280
if the if the image is compliant then we

203
00:07:07,280 --> 00:07:10,000
do a couple of things first of all we

204
00:07:10,000 --> 00:07:12,960
sign both the image and the s-bomb using

205
00:07:12,960 --> 00:07:15,840
a tool from sigstor called cosine the

206
00:07:15,840 --> 00:07:18,319
reason we do this is that so in the

207
00:07:18,319 --> 00:07:21,039
future if we want to verify that that

208
00:07:21,039 --> 00:07:23,199
image and s-bomb have not been tampered

209
00:07:23,199 --> 00:07:25,680
with since we did the evaluation we can

210
00:07:25,680 --> 00:07:26,880
now do so

211
00:07:26,880 --> 00:07:29,840
and then the second thing that we do is

212
00:07:29,840 --> 00:07:33,599
create a compliance attestation and the

213
00:07:33,599 --> 00:07:36,000
reason for this is that in a future

214
00:07:36,000 --> 00:07:38,080
phase we will be able to use an

215
00:07:38,080 --> 00:07:40,960
admission controller like kyverno or

216
00:07:40,960 --> 00:07:43,759
gatekeeper to be able to ensure that

217
00:07:43,759 --> 00:07:46,560
only images that have this attestation

218
00:07:46,560 --> 00:07:49,280
can be uh deployed into our kubernetes

219
00:07:49,280 --> 00:07:51,758
clusters

220
00:07:52,160 --> 00:07:54,720
and then the final step which i feel

221
00:07:54,720 --> 00:07:56,479
kind of me

222
00:07:56,479 --> 00:07:59,360
comes in very conveniently with the

223
00:07:59,360 --> 00:08:00,240
vex

224
00:08:00,240 --> 00:08:03,360
talk earlier is to maintain an inventory

225
00:08:03,360 --> 00:08:05,280
of all of the dependencies that you're

226
00:08:05,280 --> 00:08:07,840
using in your environment and this is to

227
00:08:07,840 --> 00:08:10,000
answer those two questions when a new

228
00:08:10,000 --> 00:08:12,400
significant cve comes along

229
00:08:12,400 --> 00:08:15,680
am i affected by the cve um what what

230
00:08:15,680 --> 00:08:17,680
dependencies are affected in my

231
00:08:17,680 --> 00:08:20,000
organization and where are those

232
00:08:20,000 --> 00:08:23,199
dependencies used in my environment

233
00:08:23,199 --> 00:08:25,520
so hopefully at the end this is

234
00:08:25,520 --> 00:08:27,840
basically the end of my talk so uh

235
00:08:27,840 --> 00:08:29,680
hopefully you've now got enough

236
00:08:29,680 --> 00:08:31,919
information to be able to appreciate how

237
00:08:31,919 --> 00:08:34,559
you can apply a lot of the tooling and

238
00:08:34,559 --> 00:08:36,200
the uh

239
00:08:36,200 --> 00:08:38,399
specifications and the concepts that

240
00:08:38,399 --> 00:08:41,599
you've been uh talked about today in

241
00:08:41,599 --> 00:08:44,320
your own organizations so thank you very

242
00:08:44,320 --> 00:08:46,399
much and if you've got further questions

243
00:08:46,399 --> 00:08:48,800
about supply chain security either visit

244
00:08:48,800 --> 00:08:51,200
the jetstat.io website because there's

245
00:08:51,200 --> 00:08:52,959
now a new toolkit that we've launched

246
00:08:52,959 --> 00:08:56,000
just today or myself and chris are at

247
00:08:56,000 --> 00:08:57,839
the jet stack booth for the rest of this

248
00:08:57,839 --> 00:09:00,240
conference thank you for your time

249
00:09:00,240 --> 00:09:03,399
thank you

