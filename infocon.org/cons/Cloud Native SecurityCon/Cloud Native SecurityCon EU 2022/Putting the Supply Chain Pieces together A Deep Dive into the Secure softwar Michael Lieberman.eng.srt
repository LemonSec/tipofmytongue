1
00:00:00,160 --> 00:00:02,000
hi i'm michael lieberman and i'm a

2
00:00:02,000 --> 00:00:04,560
supply chain security engineer

3
00:00:04,560 --> 00:00:06,480
this presentation and demo is on putting

4
00:00:06,480 --> 00:00:08,720
the supply chain pieces together a deep

5
00:00:08,720 --> 00:00:12,639
dive into the secure software factory

6
00:00:12,639 --> 00:00:14,000
i will talk through what the secure

7
00:00:14,000 --> 00:00:15,759
software factory reference architecture

8
00:00:15,759 --> 00:00:16,480
is

9
00:00:16,480 --> 00:00:18,400
what ssf and implementation of that

10
00:00:18,400 --> 00:00:20,560
architecture is and finally there will

11
00:00:20,560 --> 00:00:22,480
be a short demo showing off some of what

12
00:00:22,480 --> 00:00:25,359
ssf can do

13
00:00:25,680 --> 00:00:26,480
so

14
00:00:26,480 --> 00:00:29,279
what is the secure software factory well

15
00:00:29,279 --> 00:00:30,400
at a high level

16
00:00:30,400 --> 00:00:32,238
the secure software factory is a cloud

17
00:00:32,238 --> 00:00:34,320
native but technology agnostic reference

18
00:00:34,320 --> 00:00:36,559
architecture for building software while

19
00:00:36,559 --> 00:00:38,320
tracking provenance

20
00:00:38,320 --> 00:00:39,840
in other words it's a reference

21
00:00:39,840 --> 00:00:41,280
reference architecture that takes your

22
00:00:41,280 --> 00:00:43,440
continuous integration and build systems

23
00:00:43,440 --> 00:00:44,879
and helps fill in the supply chain

24
00:00:44,879 --> 00:00:47,120
security gaps like helping provide a

25
00:00:47,120 --> 00:00:49,360
chain of custody for your project from

26
00:00:49,360 --> 00:00:51,920
source code to package software

27
00:00:51,920 --> 00:00:53,680
this chain of custody can then be used

28
00:00:53,680 --> 00:00:55,680
to help prove that your artifact went

29
00:00:55,680 --> 00:00:57,039
through all the appropriate build

30
00:00:57,039 --> 00:00:59,680
pipeline steps with appropriate controls

31
00:00:59,680 --> 00:01:00,800
applied to them

32
00:01:00,800 --> 00:01:03,039
as well as be used for analysis later in

33
00:01:03,039 --> 00:01:04,640
the event of a discovered supply chain

34
00:01:04,640 --> 00:01:07,760
vulnerability or attack

35
00:01:09,439 --> 00:01:10,479
all right

36
00:01:10,479 --> 00:01:12,000
let's take a look at what the secure

37
00:01:12,000 --> 00:01:14,240
software factory is within the context

38
00:01:14,240 --> 00:01:15,920
of your broader software delivery

39
00:01:15,920 --> 00:01:17,200
environment

40
00:01:17,200 --> 00:01:19,360
as you can see here in blue the secure

41
00:01:19,360 --> 00:01:21,119
software factory more or less takes the

42
00:01:21,119 --> 00:01:22,560
place of your continuous integration or

43
00:01:22,560 --> 00:01:24,560
build system

44
00:01:24,560 --> 00:01:26,640
it pulls in source code from your source

45
00:01:26,640 --> 00:01:28,960
code control pulls in dependencies from

46
00:01:28,960 --> 00:01:30,640
artifact storage

47
00:01:30,640 --> 00:01:32,479
performs various actions on them like

48
00:01:32,479 --> 00:01:34,640
lint scans

49
00:01:34,640 --> 00:01:37,439
and eventually the build

50
00:01:37,439 --> 00:01:39,600
it then packages the software up

51
00:01:39,600 --> 00:01:42,799
and pushes it out to artifact storage

52
00:01:42,799 --> 00:01:44,960
the area the areas where things might

53
00:01:44,960 --> 00:01:47,680
begin to differ from a normal ci system

54
00:01:47,680 --> 00:01:50,000
is the inclusion of iam at the top

55
00:01:50,000 --> 00:01:51,200
and the emission controller at the

56
00:01:51,200 --> 00:01:52,720
bottom

57
00:01:52,720 --> 00:01:54,720
iem here provides identities to the

58
00:01:54,720 --> 00:01:56,240
components within the secure software

59
00:01:56,240 --> 00:01:58,560
factory and you can use those identities

60
00:01:58,560 --> 00:02:00,000
to sign attestations on what is

61
00:02:00,000 --> 00:02:01,840
happening within the pipelines that run

62
00:02:01,840 --> 00:02:05,840
inside of the secure software factory

63
00:02:05,840 --> 00:02:07,759
the production and mission controller

64
00:02:07,759 --> 00:02:10,000
can then be used to validate that only

65
00:02:10,000 --> 00:02:12,160
artifacts that have valid attestations

66
00:02:12,160 --> 00:02:14,000
signed by trusted identities from the

67
00:02:14,000 --> 00:02:16,400
secure software factory are authorized

68
00:02:16,400 --> 00:02:19,280
to run in production

69
00:02:21,360 --> 00:02:24,160
now let's dive in a layer deeper

70
00:02:24,160 --> 00:02:26,959
uh into what the secure software factory

71
00:02:26,959 --> 00:02:28,959
actually is

72
00:02:28,959 --> 00:02:30,560
this might be a bit hard to read but you

73
00:02:30,560 --> 00:02:33,440
can follow along in the cncf secure

74
00:02:33,440 --> 00:02:35,280
software factory reference architecture

75
00:02:35,280 --> 00:02:37,040
document

76
00:02:37,040 --> 00:02:39,360
the core of the secure software factory

77
00:02:39,360 --> 00:02:41,360
is the build environment which is here

78
00:02:41,360 --> 00:02:43,920
in the center

79
00:02:44,239 --> 00:02:46,640
and then from the top and going

80
00:02:46,640 --> 00:02:48,239
counterclockwise

81
00:02:48,239 --> 00:02:49,760
first up you can see that there's a

82
00:02:49,760 --> 00:02:51,599
pipeline framework which orchestrates

83
00:02:51,599 --> 00:02:53,120
the builds happening within the build

84
00:02:53,120 --> 00:02:54,640
environments

85
00:02:54,640 --> 00:02:56,800
these are build pipelines defined as

86
00:02:56,800 --> 00:02:58,959
code for example tecton jenkins or

87
00:02:58,959 --> 00:03:01,760
github actions

88
00:03:01,760 --> 00:03:04,400
unlike a ci system with no or minimal

89
00:03:04,400 --> 00:03:05,519
controls

90
00:03:05,519 --> 00:03:07,360
what types of builds and steps are

91
00:03:07,360 --> 00:03:08,640
allowed to operate in the build

92
00:03:08,640 --> 00:03:10,560
environment are constrained by an

93
00:03:10,560 --> 00:03:14,480
emission controller like kiverno or oppa

94
00:03:14,879 --> 00:03:16,400
this admission controller would have

95
00:03:16,400 --> 00:03:18,400
policy defined as code intended to

96
00:03:18,400 --> 00:03:20,319
constrain what is allowed to run within

97
00:03:20,319 --> 00:03:22,239
the pipelines

98
00:03:22,239 --> 00:03:23,680
this allows you to have greater

99
00:03:23,680 --> 00:03:25,280
confidence that if you support a

100
00:03:25,280 --> 00:03:27,519
specific signed and a tested version of

101
00:03:27,519 --> 00:03:29,760
a build tool only that version is

102
00:03:29,760 --> 00:03:32,720
allowed to run in your builds

103
00:03:32,720 --> 00:03:34,799
if you require all pipelines to include

104
00:03:34,799 --> 00:03:36,560
the step that generates a software bill

105
00:03:36,560 --> 00:03:38,159
of materials

106
00:03:38,159 --> 00:03:39,599
you can enforce it through an emission

107
00:03:39,599 --> 00:03:43,119
controller with appropriate policy

108
00:03:44,400 --> 00:03:46,799
next up are the attesters and pipeline

109
00:03:46,799 --> 00:03:48,239
observer

110
00:03:48,239 --> 00:03:49,680
a common attack against build

111
00:03:49,680 --> 00:03:51,840
environments is having those bills

112
00:03:51,840 --> 00:03:54,080
misreport their own output

113
00:03:54,080 --> 00:03:56,159
you can imagine a compromised build

114
00:03:56,159 --> 00:03:58,239
could generate standard output and a

115
00:03:58,239 --> 00:03:59,360
report

116
00:03:59,360 --> 00:04:01,599
and report its runtime parameters to

117
00:04:01,599 --> 00:04:04,400
look identical to a real build

118
00:04:04,400 --> 00:04:06,879
a pipeline observer helps in this case

119
00:04:06,879 --> 00:04:08,720
by being a separate component that has

120
00:04:08,720 --> 00:04:10,560
access to record what is happening in

121
00:04:10,560 --> 00:04:12,319
the build environment instead of the

122
00:04:12,319 --> 00:04:13,760
build environment

123
00:04:13,760 --> 00:04:15,680
itself reporting

124
00:04:15,680 --> 00:04:17,759
itself reporting its own

125
00:04:17,759 --> 00:04:19,519
output

126
00:04:19,519 --> 00:04:21,199
it doesn't prevent every case of this

127
00:04:21,199 --> 00:04:24,560
sort of attack but it does help

128
00:04:24,560 --> 00:04:26,880
an example of a pipeline observer would

129
00:04:26,880 --> 00:04:30,479
be something like techton chains

130
00:04:31,520 --> 00:04:33,600
the pipeline observer gets much better

131
00:04:33,600 --> 00:04:35,280
however when paired with node and

132
00:04:35,280 --> 00:04:37,360
workload attesters

133
00:04:37,360 --> 00:04:39,280
the noda tester will validate that the

134
00:04:39,280 --> 00:04:41,040
build is running on approved hardware

135
00:04:41,040 --> 00:04:43,440
for example a kubernetes node you run

136
00:04:43,440 --> 00:04:46,320
versus one spun up by an attacker

137
00:04:46,320 --> 00:04:48,560
the workload a tester on the other hand

138
00:04:48,560 --> 00:04:51,040
will validate that a build workload pod

139
00:04:51,040 --> 00:04:52,960
or container has not been tampered with

140
00:04:52,960 --> 00:04:54,960
after initial orchestration

141
00:04:54,960 --> 00:04:56,639
this means if someone attempts to modify

142
00:04:56,639 --> 00:04:58,400
the kubernetes pod while a build is

143
00:04:58,400 --> 00:05:00,479
running a workload a tester will be able

144
00:05:00,479 --> 00:05:02,960
to detect will be able to detect that

145
00:05:02,960 --> 00:05:05,840
and not sign off on the build

146
00:05:05,840 --> 00:05:08,479
the most common set of attesters is

147
00:05:08,479 --> 00:05:11,360
spire which generates spiffy identities

148
00:05:11,360 --> 00:05:13,120
which are short-lived identities that

149
00:05:13,120 --> 00:05:15,199
essentially live only for the lifetime

150
00:05:15,199 --> 00:05:17,199
of an individual build step and are

151
00:05:17,199 --> 00:05:18,800
linked to the parameters of the build

152
00:05:18,800 --> 00:05:21,199
steps pod

153
00:05:21,199 --> 00:05:23,039
these short-lived identities help by

154
00:05:23,039 --> 00:05:25,039
both reducing attack surface and

155
00:05:25,039 --> 00:05:26,960
limiting blast radius

156
00:05:26,960 --> 00:05:28,639
the attack surface is limited by the

157
00:05:28,639 --> 00:05:30,639
fact that the identity is bound by both

158
00:05:30,639 --> 00:05:33,680
its short lifetime and by only

159
00:05:33,680 --> 00:05:36,080
uh and by only being valid against the

160
00:05:36,080 --> 00:05:38,720
initial configuration of the pod

161
00:05:38,720 --> 00:05:40,880
the blast radius is also limited because

162
00:05:40,880 --> 00:05:42,880
if an attack somehow does compromise the

163
00:05:42,880 --> 00:05:44,880
build step and get access to the signing

164
00:05:44,880 --> 00:05:47,759
secret that signing secret is valid only

165
00:05:47,759 --> 00:05:50,479
for a very short period of time and also

166
00:05:50,479 --> 00:05:52,479
only valid against signing the output of

167
00:05:52,479 --> 00:05:55,520
the compromise pod

168
00:05:56,800 --> 00:05:58,639
the previous components

169
00:05:58,639 --> 00:06:01,199
mentioned help you enforce what build

170
00:06:01,199 --> 00:06:03,360
workloads are allowed to run

171
00:06:03,360 --> 00:06:06,880
as well as validating

172
00:06:06,880 --> 00:06:08,639
as well as validating that those build

173
00:06:08,639 --> 00:06:10,800
environment workloads were spun up on

174
00:06:10,800 --> 00:06:13,039
appropriate infrastructure with allowed

175
00:06:13,039 --> 00:06:14,960
build parameters

176
00:06:14,960 --> 00:06:16,880
but what happens if the build tool

177
00:06:16,880 --> 00:06:20,960
itself for example go build or maven

178
00:06:20,960 --> 00:06:22,880
turns out to be doing something bad how

179
00:06:22,880 --> 00:06:24,639
how can we detect that

180
00:06:24,639 --> 00:06:25,680
that's where

181
00:06:25,680 --> 00:06:27,919
runtime visibility comes in

182
00:06:27,919 --> 00:06:30,319
by using ebpf and other tracing tools

183
00:06:30,319 --> 00:06:33,120
like tracy or falco you can monitor what

184
00:06:33,120 --> 00:06:35,440
is happening within the build itself

185
00:06:35,440 --> 00:06:37,039
so if a build is attempting to reach out

186
00:06:37,039 --> 00:06:39,759
to malware.com or something your runtime

187
00:06:39,759 --> 00:06:42,560
visibility should be able to detect it

188
00:06:42,560 --> 00:06:44,479
you can also use runtime visibility in

189
00:06:44,479 --> 00:06:45,440
helping

190
00:06:45,440 --> 00:06:47,680
provide profiles for what your builds

191
00:06:47,680 --> 00:06:48,960
normally do

192
00:06:48,960 --> 00:06:50,560
you can run build and air gapped in

193
00:06:50,560 --> 00:06:52,000
other isolated environments while

194
00:06:52,000 --> 00:06:54,560
tracing their runtime characteristics

195
00:06:54,560 --> 00:06:56,400
you can then use these recorded profiles

196
00:06:56,400 --> 00:06:58,400
to detect anomalous behavior in builds

197
00:06:58,400 --> 00:07:00,479
in the future if a build's memory

198
00:07:00,479 --> 00:07:03,039
syscalls follow a particular pattern

199
00:07:03,039 --> 00:07:05,680
and then later on you start noticing

200
00:07:05,680 --> 00:07:06,960
they're doing something quite different

201
00:07:06,960 --> 00:07:08,800
like writing unknown data to executable

202
00:07:08,800 --> 00:07:10,479
memory

203
00:07:10,479 --> 00:07:12,000
this should help you be able to detect

204
00:07:12,000 --> 00:07:13,840
that

205
00:07:13,840 --> 00:07:16,319
these components all together help fill

206
00:07:16,319 --> 00:07:18,080
in the supply chain

207
00:07:18,080 --> 00:07:22,080
gaps in your ci and build systems

208
00:07:23,520 --> 00:07:26,000
now let's take a look at what an example

209
00:07:26,000 --> 00:07:27,440
build looks like

210
00:07:27,440 --> 00:07:29,680
when using the secure software factory

211
00:07:29,680 --> 00:07:31,120
architecture

212
00:07:31,120 --> 00:07:33,039
you shouldn't change your pipelines to

213
00:07:33,039 --> 00:07:34,720
no longer do things like security

214
00:07:34,720 --> 00:07:37,280
linting sas and das scans are similar

215
00:07:37,280 --> 00:07:38,960
keep running security focused build

216
00:07:38,960 --> 00:07:40,000
steps

217
00:07:40,000 --> 00:07:41,680
the key thing that the secure software

218
00:07:41,680 --> 00:07:43,280
factory does for us

219
00:07:43,280 --> 00:07:46,160
is help you generate provenance around

220
00:07:46,160 --> 00:07:48,000
your supply chain that you can have some

221
00:07:48,000 --> 00:07:49,599
confidence around

222
00:07:49,599 --> 00:07:51,840
as this diagram shows each step is

223
00:07:51,840 --> 00:07:54,000
recorded by the pipeline observer the

224
00:07:54,000 --> 00:07:56,000
pipeline observer signs attestations

225
00:07:56,000 --> 00:07:57,919
regarding each step and forwards that

226
00:07:57,919 --> 00:08:00,879
metadata over to some storage

227
00:08:00,879 --> 00:08:02,879
this can often be a transparency log

228
00:08:02,879 --> 00:08:05,440
like recore a document database like

229
00:08:05,440 --> 00:08:06,800
mongodb

230
00:08:06,800 --> 00:08:08,560
or even be packaged up alongside your

231
00:08:08,560 --> 00:08:10,080
artifact itself

232
00:08:10,080 --> 00:08:11,759
for example it is common to push

233
00:08:11,759 --> 00:08:13,840
attestation to live excite live

234
00:08:13,840 --> 00:08:16,000
alongside your container images in an

235
00:08:16,000 --> 00:08:18,960
oci registry

236
00:08:19,039 --> 00:08:21,120
by recording each of these steps

237
00:08:21,120 --> 00:08:23,360
and pushing them out you can begin to

238
00:08:23,360 --> 00:08:25,120
generate a chain of custody around what

239
00:08:25,120 --> 00:08:26,720
is happening in your build

240
00:08:26,720 --> 00:08:29,120
if your build artifact step reports the

241
00:08:29,120 --> 00:08:30,560
hash of its output as something

242
00:08:30,560 --> 00:08:33,200
different than what the publish artifact

243
00:08:33,200 --> 00:08:34,559
step does

244
00:08:34,559 --> 00:08:36,880
then you know something has gone wrong

245
00:08:36,880 --> 00:08:39,200
this also helps you enforce that if a

246
00:08:39,200 --> 00:08:40,799
piece of metadata is missing like an

247
00:08:40,799 --> 00:08:42,958
s-bomb you can deny that artifact from

248
00:08:42,958 --> 00:08:46,399
being authorized for production

249
00:08:48,320 --> 00:08:49,760
now we've gone through what the secure

250
00:08:49,760 --> 00:08:53,519
software factory is but what is ssf

251
00:08:53,519 --> 00:08:55,519
ssf is an implementation of the secure

252
00:08:55,519 --> 00:08:57,920
software factory reference architecture

253
00:08:57,920 --> 00:09:00,000
the main the name might still change but

254
00:09:00,000 --> 00:09:02,000
for now it's ssf

255
00:09:02,000 --> 00:09:05,040
um ssf is a tool contributed by city to

256
00:09:05,040 --> 00:09:07,360
the open source security foundation a

257
00:09:07,360 --> 00:09:10,240
sibling to the cncf

258
00:09:10,240 --> 00:09:12,320
its purpose is to act as both a system

259
00:09:12,320 --> 00:09:14,160
for people to use to help secure their

260
00:09:14,160 --> 00:09:16,240
internal builds and software supply

261
00:09:16,240 --> 00:09:18,720
chain as well as being a project with a

262
00:09:18,720 --> 00:09:20,880
secure supply chain

263
00:09:20,880 --> 00:09:22,560
we plan to do this by following the

264
00:09:22,560 --> 00:09:24,320
various best practices and standards

265
00:09:24,320 --> 00:09:26,000
defined in open source groups like the

266
00:09:26,000 --> 00:09:29,680
cncf and openssf

267
00:09:31,519 --> 00:09:33,279
some of the best practices for supply

268
00:09:33,279 --> 00:09:35,360
chain security today can be enforced in

269
00:09:35,360 --> 00:09:38,399
various you know sas build tools however

270
00:09:38,399 --> 00:09:40,080
that often doesn't necessarily fit the

271
00:09:40,080 --> 00:09:42,240
needs of some organizations and projects

272
00:09:42,240 --> 00:09:44,000
that might not be able to be allowed to

273
00:09:44,000 --> 00:09:45,200
use sas

274
00:09:45,200 --> 00:09:47,360
this is also an issue for folks who are

275
00:09:47,360 --> 00:09:50,000
required to enforce

276
00:09:50,000 --> 00:09:51,600
different sorts of policy that are not

277
00:09:51,600 --> 00:09:54,240
supported by some of these other tools

278
00:09:54,240 --> 00:09:57,839
ssf tries to help out here by enforcing

279
00:09:57,839 --> 00:09:59,440
enforcing policy at multiple different

280
00:09:59,440 --> 00:10:02,399
levels there are the ssf defaults

281
00:10:02,399 --> 00:10:04,720
which are supply chain best practices

282
00:10:04,720 --> 00:10:06,320
that should be enforced regardless of an

283
00:10:06,320 --> 00:10:08,240
organization's individual requirements

284
00:10:08,240 --> 00:10:10,399
these are things like pinning to a hash

285
00:10:10,399 --> 00:10:12,560
for a container image instead of using

286
00:10:12,560 --> 00:10:15,360
the tag latest or that all build

287
00:10:15,360 --> 00:10:17,600
pipelines must contain an s-bomb

288
00:10:17,600 --> 00:10:19,839
generation step

289
00:10:19,839 --> 00:10:21,839
an individual organization whether it's

290
00:10:21,839 --> 00:10:24,959
a company or organization like cncf

291
00:10:24,959 --> 00:10:27,200
might try to enforce high-level

292
00:10:27,200 --> 00:10:28,880
governance rules on all teams and

293
00:10:28,880 --> 00:10:31,120
projects that fall underneath them

294
00:10:31,120 --> 00:10:33,440
these are things like naming schemes

295
00:10:33,440 --> 00:10:35,600
allowed programming languages and

296
00:10:35,600 --> 00:10:38,160
versions of build tools

297
00:10:38,160 --> 00:10:39,600
underneath that there might be further

298
00:10:39,600 --> 00:10:41,360
restrictions based on an individual's

299
00:10:41,360 --> 00:10:43,040
team's requirements

300
00:10:43,040 --> 00:10:45,360
an organization might say python java

301
00:10:45,360 --> 00:10:47,360
and go have all been approved but a

302
00:10:47,360 --> 00:10:49,440
specific team might say that only go is

303
00:10:49,440 --> 00:10:52,160
allowed for their project

304
00:10:52,160 --> 00:10:53,519
you can then further constrain

305
00:10:53,519 --> 00:10:55,440
configuration and policy to individual

306
00:10:55,440 --> 00:10:57,360
projects so a new project under a team

307
00:10:57,360 --> 00:11:00,000
that uses go might be might be required

308
00:11:00,000 --> 00:11:03,680
to use version 1.18 or above

309
00:11:03,680 --> 00:11:05,680
these constraints help organizations

310
00:11:05,680 --> 00:11:07,839
teams and projects better enforce rules

311
00:11:07,839 --> 00:11:10,160
and controls and thus help increase the

312
00:11:10,160 --> 00:11:12,000
covenant confidence in what the

313
00:11:12,000 --> 00:11:14,240
providence attestations are telling you

314
00:11:14,240 --> 00:11:17,279
is in fact true

315
00:11:19,839 --> 00:11:22,480
now how does ssf handle and use this

316
00:11:22,480 --> 00:11:24,720
configuration

317
00:11:24,720 --> 00:11:26,560
it does so by using a configuration

318
00:11:26,560 --> 00:11:28,399
language called q

319
00:11:28,399 --> 00:11:29,200
q

320
00:11:29,200 --> 00:11:31,519
if you're not aware is a language that

321
00:11:31,519 --> 00:11:33,279
has been seen as a successor to google's

322
00:11:33,279 --> 00:11:35,360
internal configuration language and

323
00:11:35,360 --> 00:11:37,920
similar languages like jsonnet

324
00:11:37,920 --> 00:11:39,200
it helps us

325
00:11:39,200 --> 00:11:41,279
instead it helps us by instead of having

326
00:11:41,279 --> 00:11:43,440
to write individual yaml for both our

327
00:11:43,440 --> 00:11:45,360
techton pipelines as well as kiverno

328
00:11:45,360 --> 00:11:48,560
policy as code to enforce the rules we

329
00:11:48,560 --> 00:11:49,279
can

330
00:11:49,279 --> 00:11:50,800
enforce the rules

331
00:11:50,800 --> 00:11:52,880
we can write specifications in queue

332
00:11:52,880 --> 00:11:55,760
which lets us easily generate interfaces

333
00:11:55,760 --> 00:11:57,440
so a lot of the cross management of

334
00:11:57,440 --> 00:12:00,240
kiverno config maps tecton tasks and

335
00:12:00,240 --> 00:12:02,320
pipelines can all be managed from a

336
00:12:02,320 --> 00:12:04,800
single set of specifications

337
00:12:04,800 --> 00:12:06,720
as mentioned in the previous slide those

338
00:12:06,720 --> 00:12:09,600
specifications can be further refined as

339
00:12:09,600 --> 00:12:11,920
we need to for individual teams or

340
00:12:11,920 --> 00:12:14,399
projects

341
00:12:17,120 --> 00:12:18,399
all right

342
00:12:18,399 --> 00:12:21,279
now let's take a quick look at what ssf

343
00:12:21,279 --> 00:12:23,440
looks like in action

344
00:12:23,440 --> 00:12:25,600
um if you want to you can follow along

345
00:12:25,600 --> 00:12:29,920
at the git repo listed here

346
00:12:34,880 --> 00:12:38,639
all right so i already have

347
00:12:38,639 --> 00:12:40,959
ssf running which is running on mini

348
00:12:40,959 --> 00:12:43,279
cube so if i just

349
00:12:43,279 --> 00:12:45,600
quickly show off

350
00:12:45,600 --> 00:12:46,880
mini cube status here you can see

351
00:12:46,880 --> 00:12:49,519
there's a mini cube running and if i run

352
00:12:49,519 --> 00:12:52,519
uh

353
00:12:55,440 --> 00:12:57,839
whoops

354
00:12:58,320 --> 00:12:59,360
you can see you know there's a bunch of

355
00:12:59,360 --> 00:13:00,639
different name spaces with a bunch of

356
00:13:00,639 --> 00:13:03,440
different things in them

357
00:13:04,880 --> 00:13:08,240
all right so i already have um the

358
00:13:08,240 --> 00:13:09,760
initial configuration set up so it

359
00:13:09,760 --> 00:13:11,360
already has a key

360
00:13:11,360 --> 00:13:14,800
uh for this particular build setup um

361
00:13:14,800 --> 00:13:16,880
and i'm just going to run an example

362
00:13:16,880 --> 00:13:19,120
build packs build here and to be clear

363
00:13:19,120 --> 00:13:21,440
this is mostly just running

364
00:13:21,440 --> 00:13:24,000
techton but it's running it within the

365
00:13:24,000 --> 00:13:26,880
context of sort of a secure software

366
00:13:26,880 --> 00:13:29,600
factory configuration and setup so it's

367
00:13:29,600 --> 00:13:30,959
running with all the various best

368
00:13:30,959 --> 00:13:33,279
practices you would want to have

369
00:13:33,279 --> 00:13:36,160
set up in this and it also has all the

370
00:13:36,160 --> 00:13:38,560
other sorts of uh associated tools you

371
00:13:38,560 --> 00:13:41,680
might want to have um

372
00:13:41,680 --> 00:13:42,880
running here

373
00:13:42,880 --> 00:13:44,880
and then uh you know there's certain

374
00:13:44,880 --> 00:13:46,160
things that haven't

375
00:13:46,160 --> 00:13:48,399
actually been deployed out to

376
00:13:48,399 --> 00:13:51,199
um ssf yet like runtime visibility but

377
00:13:51,199 --> 00:13:53,440
it is one of the things on that are

378
00:13:53,440 --> 00:13:55,199
currently being worked on

379
00:13:55,199 --> 00:13:56,480
so while that's

380
00:13:56,480 --> 00:13:58,959
running i can show you the logs here oh

381
00:13:58,959 --> 00:14:01,839
actually it ran and completed already

382
00:14:01,839 --> 00:14:03,839
this is just sort of the build logs here

383
00:14:03,839 --> 00:14:06,079
you can see it generated this image

384
00:14:06,079 --> 00:14:08,600
which um you know it's using

385
00:14:08,600 --> 00:14:11,199
ttl.sh which if you're not aware of it's

386
00:14:11,199 --> 00:14:14,720
just a free sort of test

387
00:14:14,720 --> 00:14:17,040
registry for you know pushing out images

388
00:14:17,040 --> 00:14:19,040
that you want to expire so

389
00:14:19,040 --> 00:14:21,760
for the sake of this demo very uh

390
00:14:21,760 --> 00:14:23,519
straightforward

391
00:14:23,519 --> 00:14:26,079
and i can go and validate that techton

392
00:14:26,079 --> 00:14:27,120
chains here which is one of the

393
00:14:27,120 --> 00:14:28,880
components of ssf

394
00:14:28,880 --> 00:14:32,480
has come through and signed yes it has

395
00:14:32,480 --> 00:14:35,440
so if i run a couple of these

396
00:14:35,440 --> 00:14:38,560
other commands here

397
00:14:39,680 --> 00:14:40,720
just to

398
00:14:40,720 --> 00:14:42,000
and all i'm just doing is just getting

399
00:14:42,000 --> 00:14:44,959
the image url and and task run

400
00:14:44,959 --> 00:14:46,160
to make some of these other commands a

401
00:14:46,160 --> 00:14:48,000
little easier

402
00:14:48,000 --> 00:14:50,560
so if i run crane which is a

403
00:14:50,560 --> 00:14:52,639
a tool to just that allows me to

404
00:14:52,639 --> 00:14:55,199
manipulate and see what's inside of an

405
00:14:55,199 --> 00:14:58,160
oci registry i can see that hey i have

406
00:14:58,160 --> 00:15:00,000
an image here

407
00:15:00,000 --> 00:15:03,040
and this image uh contains a latest and

408
00:15:03,040 --> 00:15:05,839
it contains a dot att which if you're

409
00:15:05,839 --> 00:15:07,519
not familiar with is just sort of a

410
00:15:07,519 --> 00:15:11,279
cosine sorry sigstor based at a station

411
00:15:11,279 --> 00:15:13,600
and it also contains a signature here

412
00:15:13,600 --> 00:15:15,440
and now if i want to go and validate

413
00:15:15,440 --> 00:15:16,399
that

414
00:15:16,399 --> 00:15:18,079
this image has been signed with the

415
00:15:18,079 --> 00:15:19,199
appropriate

416
00:15:19,199 --> 00:15:20,480
signature

417
00:15:20,480 --> 00:15:21,600
um

418
00:15:21,600 --> 00:15:24,000
i can go and validate that right i can

419
00:15:24,000 --> 00:15:27,519
go and check that yep it has been signed

420
00:15:27,519 --> 00:15:29,519
cosine is saying yes

421
00:15:29,519 --> 00:15:32,480
you know based on this key

422
00:15:32,480 --> 00:15:34,240
yes sorry based on this

423
00:15:34,240 --> 00:15:35,519
public key

424
00:15:35,519 --> 00:15:38,000
yes it has been signed

425
00:15:38,000 --> 00:15:40,880
that's a valid signature and then what i

426
00:15:40,880 --> 00:15:42,800
can do here is i can also validate that

427
00:15:42,800 --> 00:15:44,880
there is a valid attestation with a

428
00:15:44,880 --> 00:15:47,680
valid signature

429
00:15:50,480 --> 00:15:51,279
yep

430
00:15:51,279 --> 00:15:54,720
and so it's able to say that as well

431
00:15:54,720 --> 00:15:56,560
but now let's go and actually take a

432
00:15:56,560 --> 00:15:59,040
look at what that attestation is is

433
00:15:59,040 --> 00:16:00,720
telling us

434
00:16:00,720 --> 00:16:03,759
so i can download that at a station

435
00:16:03,759 --> 00:16:06,720
and you know essentially base64 decoded

436
00:16:06,720 --> 00:16:09,279
and fetch out the actual data that's in

437
00:16:09,279 --> 00:16:11,600
there so as you can see in here you know

438
00:16:11,600 --> 00:16:14,320
i have the name of the image

439
00:16:14,320 --> 00:16:16,880
i have a digest of the image and this is

440
00:16:16,880 --> 00:16:18,720
um for those who aren't familiar this is

441
00:16:18,720 --> 00:16:21,519
a salsa at a station

442
00:16:21,519 --> 00:16:23,199
and what this tells us is it tells us

443
00:16:23,199 --> 00:16:24,639
all sorts of nice little bits of

444
00:16:24,639 --> 00:16:26,639
information this information is coming

445
00:16:26,639 --> 00:16:29,600
out of stuff like techton chains

446
00:16:29,600 --> 00:16:31,440
but

447
00:16:31,440 --> 00:16:34,800
in here i'm able to do things like

448
00:16:34,800 --> 00:16:36,800
i'm able to see what are the environment

449
00:16:36,800 --> 00:16:38,320
variables right

450
00:16:38,320 --> 00:16:40,720
i'm able to go and check

451
00:16:40,720 --> 00:16:43,440
uh stuff like

452
00:16:43,440 --> 00:16:46,560
what was the entry point for the build

453
00:16:46,560 --> 00:16:48,320
uh what was

454
00:16:48,320 --> 00:16:51,040
um i can also check

455
00:16:51,040 --> 00:16:52,079
uh

456
00:16:52,079 --> 00:16:53,920
in here what was the builder for the

457
00:16:53,920 --> 00:16:55,920
build right like

458
00:16:55,920 --> 00:16:58,240
um in this case it's using you know this

459
00:16:58,240 --> 00:17:00,000
sample builder image

460
00:17:00,000 --> 00:17:02,320
uh and i can do all sorts of other

461
00:17:02,320 --> 00:17:03,920
things i can see when the build started

462
00:17:03,920 --> 00:17:05,679
when it finished and all of this

463
00:17:05,679 --> 00:17:07,599
metadata is super useful

464
00:17:07,599 --> 00:17:10,640
to me when sort of figuring out you know

465
00:17:10,640 --> 00:17:13,119
did something happen to my build right

466
00:17:13,119 --> 00:17:14,559
if if

467
00:17:14,559 --> 00:17:16,079
i expected

468
00:17:16,079 --> 00:17:18,720
you know a particular builder to be you

469
00:17:18,720 --> 00:17:20,160
know if i expected to use a different

470
00:17:20,160 --> 00:17:22,880
kind of builder and it didn't match this

471
00:17:22,880 --> 00:17:25,039
well then i know something went wrong

472
00:17:25,039 --> 00:17:27,359
right and i can use all of this metadata

473
00:17:27,359 --> 00:17:29,120
coming out of here and you can imagine

474
00:17:29,120 --> 00:17:30,960
if i generated an s-bomb i would have a

475
00:17:30,960 --> 00:17:32,559
similar sort of attestation that looks

476
00:17:32,559 --> 00:17:35,440
like this that has all the metadata

477
00:17:35,440 --> 00:17:39,120
associated with um that s-bomb

478
00:17:39,120 --> 00:17:41,039
and i'd be able to go and validate that

479
00:17:41,039 --> 00:17:42,559
you know did that was that s-bomb

480
00:17:42,559 --> 00:17:43,760
generated by

481
00:17:43,760 --> 00:17:46,400
a build tool that i you know um

482
00:17:46,400 --> 00:17:47,600
that i trust

483
00:17:47,600 --> 00:17:48,880
if yes

484
00:17:48,880 --> 00:17:51,840
then hey great you know we can approve

485
00:17:51,840 --> 00:17:53,440
this sort of thing to go to the next

486
00:17:53,440 --> 00:17:56,000
level to be promoted to production

487
00:17:56,000 --> 00:17:58,880
whatever um if i notice that you know

488
00:17:58,880 --> 00:18:00,799
it's using a

489
00:18:00,799 --> 00:18:02,960
tool that hasn't been approved

490
00:18:02,960 --> 00:18:04,960
we can control that through stuff like

491
00:18:04,960 --> 00:18:07,919
policy as code

492
00:18:08,640 --> 00:18:09,919
all right

493
00:18:09,919 --> 00:18:11,120
so

494
00:18:11,120 --> 00:18:12,960
just to kind of quickly show a little

495
00:18:12,960 --> 00:18:14,559
bit of what this configuration looks

496
00:18:14,559 --> 00:18:15,440
like

497
00:18:15,440 --> 00:18:19,679
well the configuration here um is

498
00:18:19,679 --> 00:18:21,840
uh all in queue

499
00:18:21,840 --> 00:18:24,720
and it looks very similar to json

500
00:18:24,720 --> 00:18:27,919
but what this actually does is using our

501
00:18:27,919 --> 00:18:30,160
the rest of our tooling it allows us to

502
00:18:30,160 --> 00:18:33,600
generate um the yaml configuration for

503
00:18:33,600 --> 00:18:34,720
tecton

504
00:18:34,720 --> 00:18:37,280
as well as other things like um you know

505
00:18:37,280 --> 00:18:39,760
if we wanted to generate a associated

506
00:18:39,760 --> 00:18:42,720
policy with the build we can do that all

507
00:18:42,720 --> 00:18:44,799
by sort of generating a single sort of

508
00:18:44,799 --> 00:18:47,840
specification here

509
00:18:47,840 --> 00:18:48,880
um

510
00:18:48,880 --> 00:18:50,720
and so all of this

511
00:18:50,720 --> 00:18:52,720
sort of stuff

512
00:18:52,720 --> 00:18:55,200
allows us to then sort of have some

513
00:18:55,200 --> 00:18:58,799
increased confidence around uh that you

514
00:18:58,799 --> 00:19:02,160
know a build happened in uh

515
00:19:02,160 --> 00:19:04,480
in the right order with the right build

516
00:19:04,480 --> 00:19:07,440
steps with the right controls um and

517
00:19:07,440 --> 00:19:09,360
that all of those different things

518
00:19:09,360 --> 00:19:11,360
happened with the right identities

519
00:19:11,360 --> 00:19:15,600
signing off on on those things and then

520
00:19:15,600 --> 00:19:17,440
you know those sorts of things help

521
00:19:17,440 --> 00:19:19,039
provide increased confidence and so when

522
00:19:19,039 --> 00:19:21,200
you go to production you can start to

523
00:19:21,200 --> 00:19:22,799
you know ask

524
00:19:22,799 --> 00:19:24,960
via also policy is code using stuff like

525
00:19:24,960 --> 00:19:27,440
emission controllers you can say

526
00:19:27,440 --> 00:19:29,919
does it have a valid you know salsa

527
00:19:29,919 --> 00:19:31,600
attestation does it have a valid

528
00:19:31,600 --> 00:19:35,200
signature does it have a valid um

529
00:19:35,200 --> 00:19:36,400
s-bomb

530
00:19:36,400 --> 00:19:38,559
does it have a valid sas and das scan

531
00:19:38,559 --> 00:19:41,600
with appropriate attestations um do

532
00:19:41,600 --> 00:19:44,080
those sas and das scans you know meet

533
00:19:44,080 --> 00:19:46,640
our policy you know for for no

534
00:19:46,640 --> 00:19:48,640
vulnerabilities discovered or whatever

535
00:19:48,640 --> 00:19:49,840
right

536
00:19:49,840 --> 00:19:50,640
um

537
00:19:50,640 --> 00:19:53,440
assuming the answer is yes for all those

538
00:19:53,440 --> 00:19:55,520
then you can

539
00:19:55,520 --> 00:19:56,799
have increased confidence that

540
00:19:56,799 --> 00:19:58,960
everything looks good that your supply

541
00:19:58,960 --> 00:20:01,760
chain is secure and you can then um

542
00:20:01,760 --> 00:20:02,880
approve it

543
00:20:02,880 --> 00:20:05,520
and uh you know do something akin to you

544
00:20:05,520 --> 00:20:06,960
know what google calls binary

545
00:20:06,960 --> 00:20:09,120
authorization but the basic idea just

546
00:20:09,120 --> 00:20:10,559
sort of being you know you can sort of

547
00:20:10,559 --> 00:20:13,840
stamp your artifact um

548
00:20:13,840 --> 00:20:15,520
uh for for

549
00:20:15,520 --> 00:20:18,320
uh for use

550
00:20:18,320 --> 00:20:22,640
anyway um that's about it all i have uh

551
00:20:22,640 --> 00:20:25,440
right now and i wanted to then um open

552
00:20:25,440 --> 00:20:29,400
it up for questions

