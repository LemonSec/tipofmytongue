1
00:00:00,080 --> 00:00:02,000
hello everyone thanks a lot for coming

2
00:00:02,000 --> 00:00:04,080
today i hope you are having a great time

3
00:00:04,080 --> 00:00:05,440
at the conference

4
00:00:05,440 --> 00:00:07,600
i could not make it to valencia today so

5
00:00:07,600 --> 00:00:09,280
what you're going to see next is a

6
00:00:09,280 --> 00:00:10,800
version of this talk that i recorded a

7
00:00:10,800 --> 00:00:12,880
couple of weeks ago just for you

8
00:00:12,880 --> 00:00:15,040
that said i am hanging in the chat right

9
00:00:15,040 --> 00:00:16,880
now so i'm looking forward to the

10
00:00:16,880 --> 00:00:18,400
questions and the discussions that we're

11
00:00:18,400 --> 00:00:19,920
going to have together

12
00:00:19,920 --> 00:00:22,720
let's get started

13
00:00:23,840 --> 00:00:25,840
today we're going to talk about strategy

14
00:00:25,840 --> 00:00:27,199
which is an open source tool that we

15
00:00:27,199 --> 00:00:28,800
released here at datadog a couple of

16
00:00:28,800 --> 00:00:30,800
months ago we're going to see why we

17
00:00:30,800 --> 00:00:33,040
built it how you can use it and some

18
00:00:33,040 --> 00:00:34,960
background on more advanced usage as

19
00:00:34,960 --> 00:00:36,000
well

20
00:00:36,000 --> 00:00:38,399
my name is christoph stefanie deroper i

21
00:00:38,399 --> 00:00:40,239
work as a cloud security researcher and

22
00:00:40,239 --> 00:00:42,640
advocate at datadog feel free to send me

23
00:00:42,640 --> 00:00:44,559
any message email if you want to discuss

24
00:00:44,559 --> 00:00:46,640
this if you want to challenge

25
00:00:46,640 --> 00:00:48,640
some of the things that i say today

26
00:00:48,640 --> 00:00:50,000
and yes

27
00:00:50,000 --> 00:00:52,239
today we'll start by introducing a few

28
00:00:52,239 --> 00:00:54,079
things around detection engineering

29
00:00:54,079 --> 00:00:56,320
purple teaming then we'll move to some

30
00:00:56,320 --> 00:00:58,320
of the pain points of purple teaming in

31
00:00:58,320 --> 00:00:59,680
the cloud

32
00:00:59,680 --> 00:01:02,000
which led us to build stratus rating

33
00:01:02,000 --> 00:01:03,760
so we'll see how we built it what it

34
00:01:03,760 --> 00:01:05,600
looks like we'll continue with a small

35
00:01:05,600 --> 00:01:08,159
demo and finally we'll discuss a few

36
00:01:08,159 --> 00:01:11,360
more advanced use cases

37
00:01:11,360 --> 00:01:13,360
i want to stop for a bit on

38
00:01:13,360 --> 00:01:15,600
how as an industry we work on detecting

39
00:01:15,600 --> 00:01:17,360
malicious activity

40
00:01:17,360 --> 00:01:20,479
a few years ago we used to um to use

41
00:01:20,479 --> 00:01:22,720
mostly indicators of compromise things

42
00:01:22,720 --> 00:01:25,680
like hashes ip addresses binary names

43
00:01:25,680 --> 00:01:28,000
things like that because the idea is

44
00:01:28,000 --> 00:01:30,159
that it's pretty easy to share those

45
00:01:30,159 --> 00:01:32,960
across organizations and that if you

46
00:01:32,960 --> 00:01:35,200
share that with partners organization

47
00:01:35,200 --> 00:01:37,360
it's easy for them to prevent some

48
00:01:37,360 --> 00:01:39,280
attacks because a lot of that is going

49
00:01:39,280 --> 00:01:41,280
to reuse the same infrastructure the

50
00:01:41,280 --> 00:01:42,880
same binaries

51
00:01:42,880 --> 00:01:45,200
is going to get caught more easily

52
00:01:45,200 --> 00:01:46,079
and

53
00:01:46,079 --> 00:01:49,040
as time goes by we noticed that hashes

54
00:01:49,040 --> 00:01:51,520
ip addresses domain names are pretty

55
00:01:51,520 --> 00:01:53,840
easy for attackers to change

56
00:01:53,840 --> 00:01:56,000
if you think about binary hash it's very

57
00:01:56,000 --> 00:01:58,079
simple to change single bytes changes

58
00:01:58,079 --> 00:02:00,159
and the word hash is not the same

59
00:02:00,159 --> 00:02:02,079
for ip addresses is the same domain

60
00:02:02,079 --> 00:02:04,640
names iftar and this figure here you see

61
00:02:04,640 --> 00:02:06,640
is called the pyramid of pain and

62
00:02:06,640 --> 00:02:09,440
basically as you move up this pyramid

63
00:02:09,440 --> 00:02:11,680
things become much harder to change for

64
00:02:11,680 --> 00:02:12,959
an attacker

65
00:02:12,959 --> 00:02:15,040
and if you think about the tools or the

66
00:02:15,040 --> 00:02:16,800
way that they work maybe how they

67
00:02:16,800 --> 00:02:19,280
persist how they exfiltrate data which

68
00:02:19,280 --> 00:02:20,800
is something that they are typically not

69
00:02:20,800 --> 00:02:22,560
going to change easily

70
00:02:22,560 --> 00:02:24,480
and for defenders it's a bit around the

71
00:02:24,480 --> 00:02:25,680
opposite

72
00:02:25,680 --> 00:02:27,440
if you think about a hash or an ip

73
00:02:27,440 --> 00:02:30,000
address it's pretty simple to detect if

74
00:02:30,000 --> 00:02:31,599
you think about tools and behaviors it

75
00:02:31,599 --> 00:02:35,519
gets harder so generally as an industry

76
00:02:35,519 --> 00:02:37,599
we've been moving towards

77
00:02:37,599 --> 00:02:39,920
detecting not only hashes ip addresses

78
00:02:39,920 --> 00:02:41,680
domain names and this kind of indicators

79
00:02:41,680 --> 00:02:43,840
of compromise but also more behavioral

80
00:02:43,840 --> 00:02:46,400
things and so there are a few models

81
00:02:46,400 --> 00:02:48,959
that exist to to model

82
00:02:48,959 --> 00:02:51,040
how attackers work what behaviors they

83
00:02:51,040 --> 00:02:53,280
have the most famous is of course micro

84
00:02:53,280 --> 00:02:55,599
attack which is also a version for cloud

85
00:02:55,599 --> 00:02:57,040
and for containers

86
00:02:57,040 --> 00:02:58,640
there's also the kubernetes threat

87
00:02:58,640 --> 00:02:59,680
matrix

88
00:02:59,680 --> 00:03:01,680
from microsoft

89
00:03:01,680 --> 00:03:04,080
that basically is focused on kubernetes

90
00:03:04,080 --> 00:03:07,200
and containerized environments

91
00:03:07,200 --> 00:03:08,080
now

92
00:03:08,080 --> 00:03:10,239
on purple teaming for sure it's a

93
00:03:10,239 --> 00:03:11,440
buzzword

94
00:03:11,440 --> 00:03:13,360
so i just want to stop to demystify it a

95
00:03:13,360 --> 00:03:14,720
little bit

96
00:03:14,720 --> 00:03:16,640
a lot of organization used to have a

97
00:03:16,640 --> 00:03:18,560
blue team and a team that wouldn't

98
00:03:18,560 --> 00:03:20,560
really work together and the way it

99
00:03:20,560 --> 00:03:22,000
would work is that the team would

100
00:03:22,000 --> 00:03:23,920
simulate some attacker behavior and the

101
00:03:23,920 --> 00:03:26,640
blue team is left to detect it and to

102
00:03:26,640 --> 00:03:27,920
prevent it

103
00:03:27,920 --> 00:03:29,519
and purple teaming is really about

104
00:03:29,519 --> 00:03:31,680
making these two teams collaborate

105
00:03:31,680 --> 00:03:34,640
exchange information empower each other

106
00:03:34,640 --> 00:03:35,680
and

107
00:03:35,680 --> 00:03:37,360
that's that's what i want to use as a

108
00:03:37,360 --> 00:03:38,720
definition

109
00:03:38,720 --> 00:03:40,959
and i want to also underline that purple

110
00:03:40,959 --> 00:03:43,200
teaming is supposed to be a mentality a

111
00:03:43,200 --> 00:03:46,000
way of working and not a team by itself

112
00:03:46,000 --> 00:03:49,200
so for this presentation i want to

113
00:03:49,200 --> 00:03:50,000
to

114
00:03:50,000 --> 00:03:51,680
define it as

115
00:03:51,680 --> 00:03:53,840
empowering defenders to understand

116
00:03:53,840 --> 00:03:56,159
reproduce and detect common attacker

117
00:03:56,159 --> 00:03:58,080
tactics and you will see that also

118
00:03:58,080 --> 00:04:01,599
sometimes abbreviated as ttp

119
00:04:01,599 --> 00:04:04,159
now the way that this usually works

120
00:04:04,159 --> 00:04:06,080
let's say i want to detect a specific

121
00:04:06,080 --> 00:04:08,000
kind of attack

122
00:04:08,000 --> 00:04:10,159
i'm going to first try to reproduce it

123
00:04:10,159 --> 00:04:12,000
to see how it works i'm going to see

124
00:04:12,000 --> 00:04:14,159
what kind of logs do i have what kind of

125
00:04:14,159 --> 00:04:16,238
alerts can i leverage anything that i

126
00:04:16,238 --> 00:04:18,320
have to detect that so i'm going to

127
00:04:18,320 --> 00:04:20,399
craft this detection and i'm going to

128
00:04:20,399 --> 00:04:22,639
iterate on this feedback loop to make my

129
00:04:22,639 --> 00:04:24,880
detection better

130
00:04:24,880 --> 00:04:26,479
and the main issue that we see is that

131
00:04:26,479 --> 00:04:28,479
reproducing the attacks is pretty hard

132
00:04:28,479 --> 00:04:31,040
in the context of cloud environments

133
00:04:31,040 --> 00:04:33,199
if we take an example let's say that we

134
00:04:33,199 --> 00:04:35,520
want to detect when vpc flow logs are

135
00:04:35,520 --> 00:04:38,479
removed vpc flow logs is

136
00:04:38,479 --> 00:04:41,120
a construct in aws where you can have

137
00:04:41,120 --> 00:04:43,199
some net flow data on your network

138
00:04:43,199 --> 00:04:45,360
traffic so it's pretty interesting for

139
00:04:45,360 --> 00:04:47,040
an attacker to try to remove that so

140
00:04:47,040 --> 00:04:49,919
that they can cover the tracks

141
00:04:49,919 --> 00:04:51,680
so if we want to reproduce that first

142
00:04:51,680 --> 00:04:54,960
thing we do we create a vpc in aws

143
00:04:54,960 --> 00:04:58,639
then we go ahead we enable vpc flow logs

144
00:04:58,639 --> 00:05:00,720
and this gives us a state where we are

145
00:05:00,720 --> 00:05:02,639
ready to operate the attack

146
00:05:02,639 --> 00:05:04,560
first step we will produce it we can

147
00:05:04,560 --> 00:05:07,120
just delete vpc flow logs

148
00:05:07,120 --> 00:05:09,520
that's the theory right but if we go to

149
00:05:09,520 --> 00:05:11,680
the aws console and we do it it looks

150
00:05:11,680 --> 00:05:12,800
like this

151
00:05:12,800 --> 00:05:15,199
we create a vpc we give it a name an ap

152
00:05:15,199 --> 00:05:16,479
range

153
00:05:16,479 --> 00:05:18,400
then we go to flow logs we create the

154
00:05:18,400 --> 00:05:20,320
flow lock configuration

155
00:05:20,320 --> 00:05:22,160
then we are asked for a few things where

156
00:05:22,160 --> 00:05:24,320
do we want to send the logs the

157
00:05:24,320 --> 00:05:26,240
destination log group name but we don't

158
00:05:26,240 --> 00:05:28,800
have any the item role to use we don't

159
00:05:28,800 --> 00:05:31,680
have any so we go to the documentation

160
00:05:31,680 --> 00:05:33,759
we see that we need to use an item role

161
00:05:33,759 --> 00:05:35,759
that has a specific policy

162
00:05:35,759 --> 00:05:37,680
so that the vpc flow log service can

163
00:05:37,680 --> 00:05:40,080
write to our logging things

164
00:05:40,080 --> 00:05:42,080
okay then we see that we need to attach

165
00:05:42,080 --> 00:05:44,560
a trust policy to the role that allows

166
00:05:44,560 --> 00:05:47,759
the vpc flux configuration to assume it

167
00:05:47,759 --> 00:05:49,280
and you know at this point we are not

168
00:05:49,280 --> 00:05:52,400
really doing what we wanted anymore and

169
00:05:52,400 --> 00:05:54,400
in the end what we noticed is that we

170
00:05:54,400 --> 00:05:55,919
spend a lot of times

171
00:05:55,919 --> 00:05:57,199
setting up the right cloud

172
00:05:57,199 --> 00:06:00,319
infrastructure configuring things

173
00:06:00,319 --> 00:06:02,479
and actually very little time testing

174
00:06:02,479 --> 00:06:04,080
our threat detection

175
00:06:04,080 --> 00:06:05,840
so that's an issue because it means it's

176
00:06:05,840 --> 00:06:07,600
hard to iterate on this circle it's hard

177
00:06:07,600 --> 00:06:08,960
to reproduce your attack techniques it's

178
00:06:08,960 --> 00:06:11,039
hard to make sure that you can clean up

179
00:06:11,039 --> 00:06:12,960
everything you need

180
00:06:12,960 --> 00:06:14,479
so that's really around these two

181
00:06:14,479 --> 00:06:16,479
challenges that we built stratus a team

182
00:06:16,479 --> 00:06:19,120
first one being how do we handle complex

183
00:06:19,120 --> 00:06:21,520
testing prerequisites in aws in

184
00:06:21,520 --> 00:06:24,160
kubernetes and second one is

185
00:06:24,160 --> 00:06:26,319
as an industry we have to be very honest

186
00:06:26,319 --> 00:06:28,000
that the cloud and containers are still

187
00:06:28,000 --> 00:06:30,240
a pretty new topic so we don't have a

188
00:06:30,240 --> 00:06:32,800
lot of good data on incidents in the

189
00:06:32,800 --> 00:06:35,280
wild so for defenders it's hard to say

190
00:06:35,280 --> 00:06:37,520
what to prioritize

191
00:06:37,520 --> 00:06:40,080
and this brings us to strategic

192
00:06:40,080 --> 00:06:41,360
and i'd like to say that strategy

193
00:06:41,360 --> 00:06:43,440
strategy is something that allows you to

194
00:06:43,440 --> 00:06:46,800
help with purple teaming in the cloud

195
00:06:46,800 --> 00:06:48,639
sagittarium first it has a very nice

196
00:06:48,639 --> 00:06:50,160
logo

197
00:06:50,160 --> 00:06:51,759
it's an open source project that i like

198
00:06:51,759 --> 00:06:54,560
to pitch as atomic rating for the cloud

199
00:06:54,560 --> 00:06:56,639
atomic team is a project by red canary

200
00:06:56,639 --> 00:06:59,039
which is focused on endpoints and it

201
00:06:59,039 --> 00:07:00,800
allows you to reproduce some common

202
00:07:00,800 --> 00:07:02,960
attack techniques very easily

203
00:07:02,960 --> 00:07:05,520
and we try to be the same for the cloud

204
00:07:05,520 --> 00:07:07,360
it's written in go so it's a single

205
00:07:07,360 --> 00:07:09,039
binary that you can download through

206
00:07:09,039 --> 00:07:11,680
homebrew or directly from github and run

207
00:07:11,680 --> 00:07:14,080
without installing anything else

208
00:07:14,080 --> 00:07:17,520
it's packaged with a few cloud attack

209
00:07:17,520 --> 00:07:19,520
that comes with the binary

210
00:07:19,520 --> 00:07:21,840
and currently it supports aws and

211
00:07:21,840 --> 00:07:24,479
kubernetes

212
00:07:24,560 --> 00:07:25,919
the first question that we had when

213
00:07:25,919 --> 00:07:28,000
building it was what kind of attack

214
00:07:28,000 --> 00:07:30,160
techniques do we want to package and the

215
00:07:30,160 --> 00:07:32,319
philosophy what we ended up is two

216
00:07:32,319 --> 00:07:34,479
things first we want all the attack

217
00:07:34,479 --> 00:07:36,479
techniques to be as good

218
00:07:36,479 --> 00:07:37,840
and as you'll see in a bit they are

219
00:07:37,840 --> 00:07:39,520
defined as go code and they are from

220
00:07:39,520 --> 00:07:40,319
code

221
00:07:40,319 --> 00:07:42,960
then we want to be very opinionated and

222
00:07:42,960 --> 00:07:44,879
intentional about the attack techniques

223
00:07:44,879 --> 00:07:46,319
that we have

224
00:07:46,319 --> 00:07:47,919
vaccine we want is we want them to be

225
00:07:47,919 --> 00:07:49,919
actionable for defenders so as a

226
00:07:49,919 --> 00:07:52,160
defender you should be able to go

227
00:07:52,160 --> 00:07:54,479
to the status quo team documentation and

228
00:07:54,479 --> 00:07:56,960
to understand things to like

229
00:07:56,960 --> 00:08:00,000
to better understand what it does and

230
00:08:00,000 --> 00:08:01,759
how the attack techniques in the cloud

231
00:08:01,759 --> 00:08:02,639
work

232
00:08:02,639 --> 00:08:04,080
and second thing we want them to be

233
00:08:04,080 --> 00:08:06,479
threat informed essentially we don't

234
00:08:06,479 --> 00:08:07,599
want

235
00:08:07,599 --> 00:08:09,599
attack techniques that are super new

236
00:08:09,599 --> 00:08:11,120
that no one uses

237
00:08:11,120 --> 00:08:13,039
and that no one should care about so we

238
00:08:13,039 --> 00:08:14,879
try to prioritize a lot attacks that

239
00:08:14,879 --> 00:08:17,280
have been seen in the wild that are used

240
00:08:17,280 --> 00:08:19,759
by pentesters by returners by offensive

241
00:08:19,759 --> 00:08:22,080
tools

242
00:08:22,160 --> 00:08:24,400
so again strategy is really around these

243
00:08:24,400 --> 00:08:27,120
two things first the catalog of cloud

244
00:08:27,120 --> 00:08:28,400
attack techniques

245
00:08:28,400 --> 00:08:30,160
and in some sense it's similar to my

246
00:08:30,160 --> 00:08:31,840
true attack

247
00:08:31,840 --> 00:08:34,320
except that we are not scared about

248
00:08:34,320 --> 00:08:37,120
going very deep and being very specific

249
00:08:37,120 --> 00:08:40,240
to a single cloud provider like aws

250
00:08:40,240 --> 00:08:42,799
whereas my attack is more trying to get

251
00:08:42,799 --> 00:08:44,560
like the common ground and not trying to

252
00:08:44,560 --> 00:08:47,600
be too specific to a single service

253
00:08:47,600 --> 00:08:49,519
and second thing is to have an easy way

254
00:08:49,519 --> 00:08:51,760
to reproduce the attack techniques in a

255
00:08:51,760 --> 00:08:53,279
live environment

256
00:08:53,279 --> 00:08:55,120
so typically it's going to work like

257
00:08:55,120 --> 00:08:56,959
this you're going to take stratusrat

258
00:08:56,959 --> 00:09:00,560
team point it at your aws account or to

259
00:09:00,560 --> 00:09:02,560
an existing humanities cluster and

260
00:09:02,560 --> 00:09:04,080
you're going to use it to reproduce some

261
00:09:04,080 --> 00:09:07,320
attack techniques

262
00:09:08,480 --> 00:09:12,080
currently stratus rating has 23 aws

263
00:09:12,080 --> 00:09:15,120
attacks and six kubernetes one you can

264
00:09:15,120 --> 00:09:16,560
see the full list on the website

265
00:09:16,560 --> 00:09:19,519
stratustration.cloud

266
00:09:19,519 --> 00:09:21,920
it has the user guide the reference of

267
00:09:21,920 --> 00:09:24,080
all the attack techniques on the left

268
00:09:24,080 --> 00:09:26,640
you will see they are sorted by platform

269
00:09:26,640 --> 00:09:28,560
so you have some for aws and if you

270
00:09:28,560 --> 00:09:29,920
scroll down you will see them for

271
00:09:29,920 --> 00:09:32,080
humanities

272
00:09:32,080 --> 00:09:34,000
now let's stop for a minute and have a

273
00:09:34,000 --> 00:09:36,399
look at a specific attack technique see

274
00:09:36,399 --> 00:09:38,320
what it looks like and how it's

275
00:09:38,320 --> 00:09:39,839
implemented

276
00:09:39,839 --> 00:09:41,760
this one is going to be about stopping a

277
00:09:41,760 --> 00:09:44,720
clockwise trial cloudtrail is a way in

278
00:09:44,720 --> 00:09:47,360
aws that you can log all the api calls

279
00:09:47,360 --> 00:09:49,760
that are made to aws and it's super

280
00:09:49,760 --> 00:09:51,839
important for defenders

281
00:09:51,839 --> 00:09:53,600
so it's interesting for an attacker to

282
00:09:53,600 --> 00:09:55,519
stop it so that your defenders are

283
00:09:55,519 --> 00:09:57,360
basically blind

284
00:09:57,360 --> 00:09:58,720
first thing you will see if you go to

285
00:09:58,720 --> 00:10:00,800
the documentation of an attack technique

286
00:10:00,800 --> 00:10:03,519
is the name the platform

287
00:10:03,519 --> 00:10:05,120
when you will see the mapping to my true

288
00:10:05,120 --> 00:10:06,480
attack

289
00:10:06,480 --> 00:10:08,000
you will see a description about what it

290
00:10:08,000 --> 00:10:09,440
does how it works

291
00:10:09,440 --> 00:10:11,120
and finally you will see some detection

292
00:10:11,120 --> 00:10:13,360
leads and the idea here is not to give a

293
00:10:13,360 --> 00:10:16,240
precise a precise rule it's more to say

294
00:10:16,240 --> 00:10:17,680
which lock sources you have at your

295
00:10:17,680 --> 00:10:21,680
disposal to try to detect that

296
00:10:21,680 --> 00:10:23,519
first thing you will see then is the

297
00:10:23,519 --> 00:10:25,600
terraform code and this telephone call

298
00:10:25,600 --> 00:10:27,839
is completely hidden so as an end user

299
00:10:27,839 --> 00:10:29,440
you will never see it

300
00:10:29,440 --> 00:10:30,839
but it's how it's

301
00:10:30,839 --> 00:10:33,360
implemented so

302
00:10:33,360 --> 00:10:35,040
this alpha code is going to handle the

303
00:10:35,040 --> 00:10:36,640
prerequisite infrastructure that you

304
00:10:36,640 --> 00:10:39,360
need to be able to reproduce the attack

305
00:10:39,360 --> 00:10:40,720
typically here

306
00:10:40,720 --> 00:10:43,519
the attack is around stopping a trailer

307
00:10:43,519 --> 00:10:45,519
so first you need a child

308
00:10:45,519 --> 00:10:47,600
and you need an s3 bucket to which the

309
00:10:47,600 --> 00:10:49,360
logs are going to be sent you need to

310
00:10:49,360 --> 00:10:50,320
have the right role the right

311
00:10:50,320 --> 00:10:52,800
permissions so that this works smoothly

312
00:10:52,800 --> 00:10:54,160
and the goal of that is way to

313
00:10:54,160 --> 00:10:56,399
encapsulate all this complexity so that

314
00:10:56,399 --> 00:10:58,079
you can just say

315
00:10:58,079 --> 00:10:59,760
go ahead prepare this infrastructure for

316
00:10:59,760 --> 00:11:02,240
me and i want to be ready to reproduce

317
00:11:02,240 --> 00:11:04,079
the attack again this is totally

318
00:11:04,079 --> 00:11:05,440
transparent so

319
00:11:05,440 --> 00:11:07,200
stratified team doesn't mess with your

320
00:11:07,200 --> 00:11:08,880
terraform version

321
00:11:08,880 --> 00:11:10,320
it doesn't require you to install

322
00:11:10,320 --> 00:11:12,880
terraform beforehand and it uses a

323
00:11:12,880 --> 00:11:14,720
terraform wrapper that is written by

324
00:11:14,720 --> 00:11:17,360
hashicorp which basically downloads its

325
00:11:17,360 --> 00:11:20,079
own teraform binary and takes care of

326
00:11:20,079 --> 00:11:22,560
everything you need

327
00:11:22,560 --> 00:11:25,040
then we have the attack as code that is

328
00:11:25,040 --> 00:11:27,440
written in go so in an imperative way

329
00:11:27,440 --> 00:11:30,320
using the aws or kubernetes sdk

330
00:11:30,320 --> 00:11:32,079
and this is really what the attack is

331
00:11:32,079 --> 00:11:35,360
about so now that i have my trail ready

332
00:11:35,360 --> 00:11:37,440
i know that to approach the attack i

333
00:11:37,440 --> 00:11:40,160
need to stop it

334
00:11:40,480 --> 00:11:42,640
and in terms of life cycle an attack

335
00:11:42,640 --> 00:11:44,480
technique is going to live through three

336
00:11:44,480 --> 00:11:47,120
life cycles first is going to be called

337
00:11:47,120 --> 00:11:48,800
this is the initial state where you

338
00:11:48,800 --> 00:11:50,880
didn't start to work with it

339
00:11:50,880 --> 00:11:53,600
then it's going to be warm and warm is

340
00:11:53,600 --> 00:11:55,279
the state where your prerequisite

341
00:11:55,279 --> 00:11:57,200
infrastructure is ready

342
00:11:57,200 --> 00:12:00,480
so here to warm up this attack technique

343
00:12:00,480 --> 00:12:02,160
my terraform is going to create an s3

344
00:12:02,160 --> 00:12:05,440
packet and a cultural trade

345
00:12:05,440 --> 00:12:07,920
then once we're ready we can go ahead

346
00:12:07,920 --> 00:12:10,800
and detonate it and detonate is about

347
00:12:10,800 --> 00:12:13,360
reproducing executing simulating this

348
00:12:13,360 --> 00:12:15,839
attack and this is just stopping the

349
00:12:15,839 --> 00:12:18,639
cultural trail

350
00:12:19,200 --> 00:12:21,120
there are a few tools that that can be

351
00:12:21,120 --> 00:12:22,800
quite similar to stratus rating so i

352
00:12:22,800 --> 00:12:24,399
just want to comment on it

353
00:12:24,399 --> 00:12:26,639
and there is a page that explains this

354
00:12:26,639 --> 00:12:28,320
into more detail

355
00:12:28,320 --> 00:12:30,720
so atomic team is more focused on

356
00:12:30,720 --> 00:12:32,000
endpoints

357
00:12:32,000 --> 00:12:34,560
leonidas by f-secure is a great tool

358
00:12:34,560 --> 00:12:36,560
it's a bit more complex to set up and

359
00:12:36,560 --> 00:12:40,959
also has more features paku is more of a

360
00:12:40,959 --> 00:12:43,279
penetration test framework

361
00:12:43,279 --> 00:12:45,440
guarantee tester is a big bash script

362
00:12:45,440 --> 00:12:46,800
basically that you can use to test

363
00:12:46,800 --> 00:12:49,760
guardity but it's specific to gadology

364
00:12:49,760 --> 00:12:51,760
and cloud goat is more of a set of

365
00:12:51,760 --> 00:12:53,519
vulnerable scenarios that you can deploy

366
00:12:53,519 --> 00:12:55,920
yourself

367
00:12:56,399 --> 00:12:59,600
now it's time for the demo

368
00:13:01,440 --> 00:13:03,760
let's start with the github repository

369
00:13:03,760 --> 00:13:05,519
on the repository you will have the

370
00:13:05,519 --> 00:13:08,000
source code the instructions to install

371
00:13:08,000 --> 00:13:09,920
it so typically you can install it

372
00:13:09,920 --> 00:13:12,079
through homebrew you can download one of

373
00:13:12,079 --> 00:13:13,440
the pre-built binaries that are

374
00:13:13,440 --> 00:13:16,720
available for linux mac and windows

375
00:13:16,720 --> 00:13:19,279
or you can also use the docker image

376
00:13:19,279 --> 00:13:22,000
what is it here

377
00:13:22,000 --> 00:13:23,440
there's also a website

378
00:13:23,440 --> 00:13:25,040
stratostrateam.cod

379
00:13:25,040 --> 00:13:26,720
and if you go there you will see that

380
00:13:26,720 --> 00:13:29,040
you have a user guide you have

381
00:13:29,040 --> 00:13:31,279
frequently asked questions around the

382
00:13:31,279 --> 00:13:33,279
permissions that you need how it works

383
00:13:33,279 --> 00:13:35,120
with its state

384
00:13:35,120 --> 00:13:36,880
how can you package your own attack

385
00:13:36,880 --> 00:13:38,800
technique and some questions around the

386
00:13:38,800 --> 00:13:40,160
design choices

387
00:13:40,160 --> 00:13:41,839
then there is the comparison with

388
00:13:41,839 --> 00:13:43,920
overtools that is a bit more detailed

389
00:13:43,920 --> 00:13:46,160
about what we did in in the slides

390
00:13:46,160 --> 00:13:49,040
again on how to contribute

391
00:13:49,040 --> 00:13:50,959
and in the user guide you will find some

392
00:13:50,959 --> 00:13:53,760
installation instructions some examples

393
00:13:53,760 --> 00:13:55,279
some work through on how to use it with

394
00:13:55,279 --> 00:13:57,680
aws which is just quite simple as we'll

395
00:13:57,680 --> 00:14:00,079
see in a bit and some references around

396
00:14:00,079 --> 00:14:02,639
the commands

397
00:14:02,639 --> 00:14:05,120
as well as a troubleshooting guide

398
00:14:05,120 --> 00:14:06,959
and some more information on how to use

399
00:14:06,959 --> 00:14:08,560
it programmatically and we'll see that

400
00:14:08,560 --> 00:14:10,079
in a bit

401
00:14:10,079 --> 00:14:12,800
now the interesting part is around the

402
00:14:12,800 --> 00:14:14,959
attack techniques reference

403
00:14:14,959 --> 00:14:16,560
so if you go there you will see first

404
00:14:16,560 --> 00:14:18,079
the listing of all the attack techniques

405
00:14:18,079 --> 00:14:19,519
that we have

406
00:14:19,519 --> 00:14:22,320
iws for humanities

407
00:14:22,320 --> 00:14:23,440
you have some more background on the

408
00:14:23,440 --> 00:14:25,519
philosophy of what we expect from all

409
00:14:25,519 --> 00:14:27,440
these attack techniques so we want them

410
00:14:27,440 --> 00:14:29,600
to be granular we want them to emulate

411
00:14:29,600 --> 00:14:31,920
actual attacker activity and we want

412
00:14:31,920 --> 00:14:33,680
them to be self-sufficient meaning that

413
00:14:33,680 --> 00:14:35,600
we should be able to reuse any of these

414
00:14:35,600 --> 00:14:37,680
attack techniques without making any

415
00:14:37,680 --> 00:14:38,880
assumptions

416
00:14:38,880 --> 00:14:41,199
around the state of your aws account or

417
00:14:41,199 --> 00:14:43,519
humanities cluster

418
00:14:43,519 --> 00:14:46,160
if you click on one of the supported

419
00:14:46,160 --> 00:14:48,880
platforms aws or communities you will

420
00:14:48,880 --> 00:14:50,720
have a listing that is organized around

421
00:14:50,720 --> 00:14:52,720
major attack tactics so we have

422
00:14:52,720 --> 00:14:54,560
credentialed access defense evasion

423
00:14:54,560 --> 00:14:56,839
discovery execution expression

424
00:14:56,839 --> 00:14:59,760
persistence privilege escalation

425
00:14:59,760 --> 00:15:01,760
and if we select one of the attack

426
00:15:01,760 --> 00:15:02,800
techniques

427
00:15:02,800 --> 00:15:05,279
let's say we want to have the one that

428
00:15:05,279 --> 00:15:08,800
exfiltrates an amazon machine image

429
00:15:08,800 --> 00:15:10,079
we will have

430
00:15:10,079 --> 00:15:11,920
the platform the mitral attack mapping

431
00:15:11,920 --> 00:15:13,360
the description

432
00:15:13,360 --> 00:15:15,120
the command line that we can just copy

433
00:15:15,120 --> 00:15:17,600
paste in our terminal

434
00:15:17,600 --> 00:15:21,279
and some leads on how to detect it

435
00:15:22,320 --> 00:15:26,600
now if we go to our terminal

436
00:15:27,279 --> 00:15:28,959
we see that i have strategies version

437
00:15:28,959 --> 00:15:30,639
170 installed

438
00:15:30,639 --> 00:15:32,800
first thing i can do is to do a

439
00:15:32,800 --> 00:15:34,720
scratches list to see the attack

440
00:15:34,720 --> 00:15:36,959
techniques that i have packaged in my

441
00:15:36,959 --> 00:15:38,480
binary

442
00:15:38,480 --> 00:15:40,240
if i want i can be a bit more specific i

443
00:15:40,240 --> 00:15:44,639
can do stratos list or specific platform

444
00:15:44,639 --> 00:15:46,399
this will give me only their tactics for

445
00:15:46,399 --> 00:15:49,519
aws and also for a specific multi-attack

446
00:15:49,519 --> 00:15:51,199
technique let's say i want to see the

447
00:15:51,199 --> 00:15:53,120
attack teachings i have for aws for

448
00:15:53,120 --> 00:15:55,199
persistence

449
00:15:55,199 --> 00:15:58,160
now if you do stretch your status

450
00:15:58,160 --> 00:15:59,759
you will see the statutes of each of

451
00:15:59,759 --> 00:16:01,519
your attack techniques so here i can see

452
00:16:01,519 --> 00:16:03,279
they are all called because i didn't

453
00:16:03,279 --> 00:16:05,279
start to work with any of these

454
00:16:05,279 --> 00:16:06,720
so what i'm going to do now is i'm going

455
00:16:06,720 --> 00:16:09,199
to select two attack techniques

456
00:16:09,199 --> 00:16:10,480
so this one

457
00:16:10,480 --> 00:16:13,120
is filtration of an ami

458
00:16:13,120 --> 00:16:16,320
and i'm going to warm it up

459
00:16:18,639 --> 00:16:20,480
now what's going to happen is that

460
00:16:20,480 --> 00:16:22,079
stratified team is going to instrument

461
00:16:22,079 --> 00:16:24,079
terraform under the hood it's going to

462
00:16:24,079 --> 00:16:26,320
do a terraform apply of my prerequisites

463
00:16:26,320 --> 00:16:27,839
and here the prerequisites are going to

464
00:16:27,839 --> 00:16:30,800
be just an amazon machine image but i

465
00:16:30,800 --> 00:16:34,479
need to be able to reproduce the attack

466
00:16:34,560 --> 00:16:37,040
all right now it's telling me my ami is

467
00:16:37,040 --> 00:16:39,120
ready i'm going to warm up another

468
00:16:39,120 --> 00:16:41,839
attack technique this one

469
00:16:41,839 --> 00:16:43,680
which is going to be around

470
00:16:43,680 --> 00:16:46,000
backdooring an s3 bucket policy

471
00:16:46,000 --> 00:16:47,519
okay so doing the warm up is going to

472
00:16:47,519 --> 00:16:49,680
create an s3 bucket and doing the

473
00:16:49,680 --> 00:16:51,120
detonation is going to backdoor the

474
00:16:51,120 --> 00:16:53,920
bucket policy

475
00:16:57,600 --> 00:16:59,839
i see that it has created my s3 bucket

476
00:16:59,839 --> 00:17:02,839
and if i do a stratus

477
00:17:02,839 --> 00:17:05,119
status i will see that these two attack

478
00:17:05,119 --> 00:17:07,280
techniques are now warm so it considers

479
00:17:07,280 --> 00:17:08,799
that they are ready to be used they are

480
00:17:08,799 --> 00:17:11,439
ready to be designated if i go to my aws

481
00:17:11,439 --> 00:17:13,520
console and i look at my list of amazon

482
00:17:13,520 --> 00:17:15,119
machine images

483
00:17:15,119 --> 00:17:17,359
i will see that now i have an ami

484
00:17:17,359 --> 00:17:19,359
created by status rat team

485
00:17:19,359 --> 00:17:21,839
similarly for my s3 bucket if i go there

486
00:17:21,839 --> 00:17:24,319
and i search for them

487
00:17:24,319 --> 00:17:26,400
i will see i have one bucket created by

488
00:17:26,400 --> 00:17:28,480
stratus red team

489
00:17:28,480 --> 00:17:30,720
now we'll go ahead and we do

490
00:17:30,720 --> 00:17:32,400
instead of a warm-up

491
00:17:32,400 --> 00:17:34,080
we're going to do the detonation we'll

492
00:17:34,080 --> 00:17:36,160
do stratus

493
00:17:36,160 --> 00:17:38,720
detonate

494
00:17:38,720 --> 00:17:40,240
and it's going to tell me okay i have

495
00:17:40,240 --> 00:17:42,720
backboard your bucket policy

496
00:17:42,720 --> 00:17:45,440
similarly for the other one

497
00:17:45,440 --> 00:17:48,559
we're going to detonate this one

498
00:17:50,080 --> 00:17:52,320
and it's going to exfiltrate my ami by

499
00:17:52,320 --> 00:17:54,400
sharing it with an external account so

500
00:17:54,400 --> 00:17:56,799
again if now i do a strategy status

501
00:17:56,799 --> 00:17:58,320
i will see that my two attack techniques

502
00:17:58,320 --> 00:18:00,080
are detonated

503
00:18:00,080 --> 00:18:02,480
and if i go back to my aws console

504
00:18:02,480 --> 00:18:05,679
if i go to my amazon machine image

505
00:18:05,679 --> 00:18:08,000
and i look at the permissions so i need

506
00:18:08,000 --> 00:18:10,880
to refresh it first

507
00:18:11,679 --> 00:18:13,760
i will see that it has been shared with

508
00:18:13,760 --> 00:18:16,480
an external aws account id

509
00:18:16,480 --> 00:18:18,000
which is a simulation of my attack

510
00:18:18,000 --> 00:18:19,600
technique

511
00:18:19,600 --> 00:18:21,840
i go to my s3 bucket

512
00:18:21,840 --> 00:18:24,320
and i look at the bucket policy

513
00:18:24,320 --> 00:18:26,240
i see that it has been backdoored to

514
00:18:26,240 --> 00:18:28,080
allow the access from an external aws

515
00:18:28,080 --> 00:18:30,480
account as well

516
00:18:30,480 --> 00:18:32,080
and now to clean up all this

517
00:18:32,080 --> 00:18:34,640
infrastructure i just need to do

518
00:18:34,640 --> 00:18:35,760
status

519
00:18:35,760 --> 00:18:37,840
detonate of these two things

520
00:18:37,840 --> 00:18:41,039
sorry status clean

521
00:18:41,760 --> 00:18:43,919
of this guy

522
00:18:43,919 --> 00:18:46,480
and this guy

523
00:18:47,280 --> 00:18:48,880
and now i see that the attack things are

524
00:18:48,880 --> 00:18:51,200
called so i am confident that i don't

525
00:18:51,200 --> 00:18:53,919
have any infrastructure left in my aws

526
00:18:53,919 --> 00:18:54,880
account

527
00:18:54,880 --> 00:18:57,760
and that's it so what we have done is we

528
00:18:57,760 --> 00:18:59,919
have reproduced two attack techniques

529
00:18:59,919 --> 00:19:02,480
very easily we use the warm up then the

530
00:19:02,480 --> 00:19:04,799
detonate command but if we just do

531
00:19:04,799 --> 00:19:07,120
stratus detonate it's going to warm it

532
00:19:07,120 --> 00:19:08,799
up and then detonate it

533
00:19:08,799 --> 00:19:10,880
and in the end we just do a clean up and

534
00:19:10,880 --> 00:19:12,799
it works the same it's going to remove

535
00:19:12,799 --> 00:19:14,559
all the infrastructure and make sure

536
00:19:14,559 --> 00:19:16,720
everything is cleaned up

537
00:19:16,720 --> 00:19:18,880
now that we have a good idea of

538
00:19:18,880 --> 00:19:21,120
how to use traduscratin i want to touch

539
00:19:21,120 --> 00:19:23,360
a bit on some more advanced use cases

540
00:19:23,360 --> 00:19:25,280
that you can do with satisfaction

541
00:19:25,280 --> 00:19:26,640
first one is going to be around

542
00:19:26,640 --> 00:19:28,799
continuous detection testing

543
00:19:28,799 --> 00:19:31,120
so if we look at the typical

544
00:19:31,120 --> 00:19:32,640
logs pipeline

545
00:19:32,640 --> 00:19:35,200
for iws is going to look like that

546
00:19:35,200 --> 00:19:37,039
you have a cloud trail trail that is

547
00:19:37,039 --> 00:19:39,679
running logging to an sfl bucket

548
00:19:39,679 --> 00:19:40,880
you have something that is going to

549
00:19:40,880 --> 00:19:42,960
forward your logs to a logs management

550
00:19:42,960 --> 00:19:45,280
solution to a cm

551
00:19:45,280 --> 00:19:47,360
the logs are going to be passed

552
00:19:47,360 --> 00:19:49,120
your detection rules are going to run on

553
00:19:49,120 --> 00:19:51,039
these parts logs and you're going to get

554
00:19:51,039 --> 00:19:53,600
some alerts the issue with that is that

555
00:19:53,600 --> 00:19:56,240
it's pretty sure that at some point

556
00:19:56,240 --> 00:19:58,080
something is going to break

557
00:19:58,080 --> 00:20:00,000
maybe your trade is not going to log it

558
00:20:00,000 --> 00:20:02,080
anymore maybe the permissions on the

559
00:20:02,080 --> 00:20:04,720
extra bucket are going to be messed up

560
00:20:04,720 --> 00:20:06,400
etc etc

561
00:20:06,400 --> 00:20:08,799
so how can we test that and the idea is

562
00:20:08,799 --> 00:20:12,240
to consider all of this as a black box

563
00:20:12,240 --> 00:20:14,960
to poke from one end using statusrt team

564
00:20:14,960 --> 00:20:17,440
and from the other side try to use the

565
00:20:17,440 --> 00:20:19,840
api of your sim of your logs management

566
00:20:19,840 --> 00:20:22,320
solution to confirm that an alert is

567
00:20:22,320 --> 00:20:24,159
created

568
00:20:24,159 --> 00:20:25,039
and

569
00:20:25,039 --> 00:20:26,880
we can do that using the programmatic

570
00:20:26,880 --> 00:20:29,120
interface of status reteam

571
00:20:29,120 --> 00:20:31,360
basically you can use strategist team as

572
00:20:31,360 --> 00:20:34,360
a go library so if you go get

573
00:20:34,360 --> 00:20:36,559
github.com.org team you can use it from

574
00:20:36,559 --> 00:20:37,679
your code

575
00:20:37,679 --> 00:20:38,640
and

576
00:20:38,640 --> 00:20:40,480
there is some automatically generated

577
00:20:40,480 --> 00:20:42,640
good documentation as well so it looks

578
00:20:42,640 --> 00:20:44,559
like that basically

579
00:20:44,559 --> 00:20:46,799
you are going to say get the instance of

580
00:20:46,799 --> 00:20:48,960
stratus get the attack technique that is

581
00:20:48,960 --> 00:20:52,000
called aws something

582
00:20:52,000 --> 00:20:54,480
then you can say at the end of my code i

583
00:20:54,480 --> 00:20:55,679
want to make sure it's going to be

584
00:20:55,679 --> 00:20:58,080
cleaned up automatically

585
00:20:58,080 --> 00:20:59,840
you warm it up

586
00:20:59,840 --> 00:21:01,840
finally you can detonate it so it's

587
00:21:01,840 --> 00:21:03,919
basically the same as we did in the demo

588
00:21:03,919 --> 00:21:04,880
except that we can do it

589
00:21:04,880 --> 00:21:06,799
programmatically as well

590
00:21:06,799 --> 00:21:08,559
and once we have that

591
00:21:08,559 --> 00:21:11,039
we can basically poke from one end so

592
00:21:11,039 --> 00:21:12,320
detonate the attack technique

593
00:21:12,320 --> 00:21:13,760
programmatically

594
00:21:13,760 --> 00:21:16,159
satisfy team is going to inject a unique

595
00:21:16,159 --> 00:21:18,559
identifier in the user agent

596
00:21:18,559 --> 00:21:20,480
and then we can go ahead and look in our

597
00:21:20,480 --> 00:21:22,799
cm if we have an alert

598
00:21:22,799 --> 00:21:25,200
for what we expect but corresponds to

599
00:21:25,200 --> 00:21:27,919
the logs with the same unique identifier

600
00:21:27,919 --> 00:21:29,520
so typically in cloudtrail you're going

601
00:21:29,520 --> 00:21:31,840
to be able to see the user agent

602
00:21:31,840 --> 00:21:34,240
and this allows it to correlate this

603
00:21:34,240 --> 00:21:36,880
specific run of strategic with alert

604
00:21:36,880 --> 00:21:39,280
that we get and once we confirm the

605
00:21:39,280 --> 00:21:41,280
alert is there we're happy because we

606
00:21:41,280 --> 00:21:43,280
know that we triggered an attack the

607
00:21:43,280 --> 00:21:45,200
real one and what we have earlier that

608
00:21:45,200 --> 00:21:47,039
we expect

609
00:21:47,039 --> 00:21:48,480
it's going to look like that typically

610
00:21:48,480 --> 00:21:50,720
so you detonate the attack technique

611
00:21:50,720 --> 00:21:52,640
you query the security layers of your

612
00:21:52,640 --> 00:21:55,760
sim of your logs management solution

613
00:21:55,760 --> 00:21:57,360
and once you have it

614
00:21:57,360 --> 00:21:59,039
so typically it's going to take a few

615
00:21:59,039 --> 00:22:01,120
seconds for kubernetes it's going to

616
00:22:01,120 --> 00:22:03,280
take more around five to ten minutes for

617
00:22:03,280 --> 00:22:04,960
club trail you're going to see the

618
00:22:04,960 --> 00:22:07,039
alerts you can mark it as raid you can

619
00:22:07,039 --> 00:22:08,960
archive it you can close it

620
00:22:08,960 --> 00:22:10,559
and at this point you're happy because

621
00:22:10,559 --> 00:22:12,720
you confirmed that this is working end

622
00:22:12,720 --> 00:22:14,559
to end

623
00:22:14,559 --> 00:22:16,559
what's nice with it is that you can run

624
00:22:16,559 --> 00:22:18,400
inside a continuous integration you can

625
00:22:18,400 --> 00:22:21,200
run that on a nightly basis

626
00:22:21,200 --> 00:22:22,799
and you can have some kind of dashboard

627
00:22:22,799 --> 00:22:25,120
where you say today i tested these

628
00:22:25,120 --> 00:22:26,880
attack techniques they worked they

629
00:22:26,880 --> 00:22:28,400
didn't work you can have smaller space

630
00:22:28,400 --> 00:22:30,640
on that so i think it's a nice way to

631
00:22:30,640 --> 00:22:32,320
make sure that your most important

632
00:22:32,320 --> 00:22:34,159
attack techniques are being detected as

633
00:22:34,159 --> 00:22:36,559
you expect and to be alerted when it's

634
00:22:36,559 --> 00:22:39,879
not the case

635
00:22:40,080 --> 00:22:41,360
to conclude

636
00:22:41,360 --> 00:22:43,600
um around what's next

637
00:22:43,600 --> 00:22:45,679
so first thing is that we want to add

638
00:22:45,679 --> 00:22:47,360
some additional attack techniques for

639
00:22:47,360 --> 00:22:50,480
aws for humanities

640
00:22:50,480 --> 00:22:52,720
we want to add support for azure and

641
00:22:52,720 --> 00:22:54,960
possibly for gcp

642
00:22:54,960 --> 00:22:56,640
and finally we are super eager to hear

643
00:22:56,640 --> 00:22:58,960
about the community in terms of what

644
00:22:58,960 --> 00:23:01,280
attack techniques we should add so

645
00:23:01,280 --> 00:23:03,280
typically things that you can see in the

646
00:23:03,280 --> 00:23:05,280
wild or things that you see used by red

647
00:23:05,280 --> 00:23:08,400
teams by pentesters by tooling so the

648
00:23:08,400 --> 00:23:10,240
best ways to contribute is to obtain an

649
00:23:10,240 --> 00:23:13,280
issue on the repository and to propose

650
00:23:13,280 --> 00:23:14,720
the attack technique and then we will be

651
00:23:14,720 --> 00:23:17,120
locked on implementing that

652
00:23:17,120 --> 00:23:18,799
so thanks a lot

653
00:23:18,799 --> 00:23:21,280
i'm super happy that you showed up today

654
00:23:21,280 --> 00:23:23,120
i'm hanging out in the chat to answer

655
00:23:23,120 --> 00:23:26,159
any questions to discuss anything

656
00:23:26,159 --> 00:23:28,559
so feel free to ask questions and go

657
00:23:28,559 --> 00:23:30,559
ahead and visit the website the

658
00:23:30,559 --> 00:23:32,799
repository and feel free to send me a

659
00:23:32,799 --> 00:23:35,360
message if you want to discuss anything

660
00:23:35,360 --> 00:23:39,280
thanks a lot and have a great day

