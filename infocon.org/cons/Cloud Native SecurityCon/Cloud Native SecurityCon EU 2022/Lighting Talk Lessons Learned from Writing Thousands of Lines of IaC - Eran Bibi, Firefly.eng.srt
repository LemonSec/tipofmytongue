1
00:00:00,320 --> 00:00:03,040
welcome thank you for being here my name

2
00:00:03,040 --> 00:00:05,520
is iran bibi and i'm the co-founder of

3
00:00:05,520 --> 00:00:08,160
firefly before that i was the head of

4
00:00:08,160 --> 00:00:10,559
devops at aqua security

5
00:00:10,559 --> 00:00:12,719
and i have a lot of experience with

6
00:00:12,719 --> 00:00:15,679
writing infrastructure as code i think

7
00:00:15,679 --> 00:00:18,320
from the last seven years

8
00:00:18,320 --> 00:00:20,640
and i have few lessons learned that i

9
00:00:20,640 --> 00:00:22,560
would like to share with you i only have

10
00:00:22,560 --> 00:00:25,680
10 minutes so i pinpoint those only to

11
00:00:25,680 --> 00:00:27,439
three lessons

12
00:00:27,439 --> 00:00:31,160
focusing on security

13
00:00:33,600 --> 00:00:36,480
so the first part will be talking about

14
00:00:36,480 --> 00:00:39,840
state file state file in a nutshell for

15
00:00:39,840 --> 00:00:41,680
anyone that doesn't familiar is one of

16
00:00:41,680 --> 00:00:43,680
the component that involved

17
00:00:43,680 --> 00:00:45,360
infrastructure as code

18
00:00:45,360 --> 00:00:47,680
so the stat file being used in order to

19
00:00:47,680 --> 00:00:49,039
the compiler

20
00:00:49,039 --> 00:00:51,920
for example the terraform or the pulumi

21
00:00:51,920 --> 00:00:54,719
to map the infrastructure into the

22
00:00:54,719 --> 00:00:57,120
actual state of the cloud

23
00:00:57,120 --> 00:00:59,839
one of the pitfalls

24
00:01:09,380 --> 00:01:11,119
[Music]

25
00:01:11,119 --> 00:01:12,640
on provisioning

26
00:01:12,640 --> 00:01:15,680
cloud resources

27
00:01:15,840 --> 00:01:18,799
but you need to be alerted that if this

28
00:01:18,799 --> 00:01:20,400
state file

29
00:01:20,400 --> 00:01:23,360
be exposed or a third party have a

30
00:01:23,360 --> 00:01:25,520
scanning capability on the place that

31
00:01:25,520 --> 00:01:26,960
you are put in your state file for

32
00:01:26,960 --> 00:01:31,040
example an s3 bucket or some data store

33
00:01:31,040 --> 00:01:35,200
that third party might be having your

34
00:01:35,200 --> 00:01:38,159
either access key to deploy stuff on

35
00:01:38,159 --> 00:01:39,680
your aws

36
00:01:39,680 --> 00:01:41,119
environment

37
00:01:41,119 --> 00:01:44,000
or your database credential

38
00:01:44,000 --> 00:01:46,320
and in other cases after

39
00:01:46,320 --> 00:01:47,600
certificate

40
00:01:47,600 --> 00:01:49,360
so a state file is something very

41
00:01:49,360 --> 00:01:52,079
sensitive it's a clear text file uh

42
00:01:52,079 --> 00:01:54,880
format in a json but you need to make

43
00:01:54,880 --> 00:01:58,079
sure nobody even access or at least have

44
00:01:58,079 --> 00:02:01,759
the the option to read that file beside

45
00:02:01,759 --> 00:02:02,640
the

46
00:02:02,640 --> 00:02:06,240
infrastructure as code compiler

47
00:02:06,240 --> 00:02:08,160
the second lesson is about

48
00:02:08,160 --> 00:02:09,919
infrastructure drift

49
00:02:09,919 --> 00:02:13,040
so drift is a state when the actual

50
00:02:13,040 --> 00:02:15,599
configuration on the cloud

51
00:02:15,599 --> 00:02:18,400
diverged from the stuff that you planned

52
00:02:18,400 --> 00:02:20,720
to be that's sitting on your source

53
00:02:20,720 --> 00:02:23,680
control and this is something

54
00:02:23,680 --> 00:02:25,599
surprisingly very common

55
00:02:25,599 --> 00:02:27,520
you are deploying infrastructure

56
00:02:27,520 --> 00:02:30,000
everything is aligned your code is

57
00:02:30,000 --> 00:02:31,760
basically reflect the stuff that you

58
00:02:31,760 --> 00:02:34,560
have on the cloud but over time

59
00:02:34,560 --> 00:02:36,560
because a lot of people have access to

60
00:02:36,560 --> 00:02:38,720
the cloud or a third-party application

61
00:02:38,720 --> 00:02:41,200
have a permission to alter the cloud

62
00:02:41,200 --> 00:02:43,680
you may find those differences and in

63
00:02:43,680 --> 00:02:45,760
some of the cases drift can be a

64
00:02:45,760 --> 00:02:48,319
security vulnerability

65
00:02:48,319 --> 00:02:50,720
let me show you an example in the left

66
00:02:50,720 --> 00:02:53,599
side we have a terrible manifest

67
00:02:53,599 --> 00:02:54,959
declaring

68
00:02:54,959 --> 00:02:55,680
an

69
00:02:55,680 --> 00:02:57,599
dns record

70
00:02:57,599 --> 00:03:00,159
a role for dns record with a permission

71
00:03:00,159 --> 00:03:01,360
to list

72
00:03:01,360 --> 00:03:02,640
the dns

73
00:03:02,640 --> 00:03:05,360
however over time when i access the

74
00:03:05,360 --> 00:03:07,599
cloud console and i see what the actual

75
00:03:07,599 --> 00:03:09,120
configuration is

76
00:03:09,120 --> 00:03:11,360
i can notice there is a slight change

77
00:03:11,360 --> 00:03:14,480
it's only one line that said route 53

78
00:03:14,480 --> 00:03:15,760
asterisks

79
00:03:15,760 --> 00:03:18,400
basically giving a full access

80
00:03:18,400 --> 00:03:21,200
to the specific role so any

81
00:03:21,200 --> 00:03:23,920
service any machine that have assigned

82
00:03:23,920 --> 00:03:26,080
uh to that specific role

83
00:03:26,080 --> 00:03:28,319
if you look on the git you think it's a

84
00:03:28,319 --> 00:03:30,720
read-only access but on the real-life

85
00:03:30,720 --> 00:03:32,720
scenario it's basically a full

86
00:03:32,720 --> 00:03:35,200
permission

87
00:03:36,400 --> 00:03:38,959
the third lesson is about

88
00:03:38,959 --> 00:03:43,760
models so models is a very

89
00:03:43,760 --> 00:03:46,159
easy way to use infrastructure as code

90
00:03:46,159 --> 00:03:48,959
instead of writing repeatedly the same

91
00:03:48,959 --> 00:03:50,959
lines over and over

92
00:03:50,959 --> 00:03:53,200
you can basically grab something that is

93
00:03:53,200 --> 00:03:56,319
out there online on some registry on

94
00:03:56,319 --> 00:03:58,959
some public git repository and utilize

95
00:03:58,959 --> 00:04:01,200
it for your project

96
00:04:01,200 --> 00:04:04,319
so the advantages of using models is is

97
00:04:04,319 --> 00:04:05,439
is huge

98
00:04:05,439 --> 00:04:08,239
it's easy to use it's outer

99
00:04:08,239 --> 00:04:10,640
you can save a lot of development time

100
00:04:10,640 --> 00:04:15,040
because somebody else already written it

101
00:04:15,040 --> 00:04:17,358
but it can be so it can be a malicious

102
00:04:17,358 --> 00:04:20,079
in some cases and also might include

103
00:04:20,079 --> 00:04:23,040
misconfiguration

104
00:04:24,160 --> 00:04:26,080
this is an example

105
00:04:26,080 --> 00:04:29,440
of a tearful module that exists on

106
00:04:29,440 --> 00:04:30,560
terraform

107
00:04:30,560 --> 00:04:33,600
registry that basically giving

108
00:04:33,600 --> 00:04:35,120
cross-account

109
00:04:35,120 --> 00:04:37,199
access to the attacker

110
00:04:37,199 --> 00:04:39,600
so the developer without the right

111
00:04:39,600 --> 00:04:41,600
tooling in place that doesn't have the

112
00:04:41,600 --> 00:04:45,759
context that with those few iem roles

113
00:04:45,759 --> 00:04:48,320
that this specific module is creating is

114
00:04:48,320 --> 00:04:51,199
also creating additional iam role that

115
00:04:51,199 --> 00:04:53,040
giving cross account

116
00:04:53,040 --> 00:04:55,919
to an attacker account so it's very easy

117
00:04:55,919 --> 00:04:58,240
to make mistakes when taking something

118
00:04:58,240 --> 00:04:59,600
from online

119
00:04:59,600 --> 00:05:01,759
if you are using module you see only the

120
00:05:01,759 --> 00:05:02,720
line

121
00:05:02,720 --> 00:05:05,039
that having the import of the module you

122
00:05:05,039 --> 00:05:06,800
don't see the content and you don't have

123
00:05:06,800 --> 00:05:08,960
the visibility or at least the typical

124
00:05:08,960 --> 00:05:10,960
developer that doesn't have the right

125
00:05:10,960 --> 00:05:12,720
tooling doesn't have the visibility to

126
00:05:12,720 --> 00:05:13,520
know

127
00:05:13,520 --> 00:05:16,160
that even if you're doing a small test

128
00:05:16,160 --> 00:05:18,560
and deploy it on a sandbox account

129
00:05:18,560 --> 00:05:21,199
somebody else can take over this account

130
00:05:21,199 --> 00:05:25,039
and use it for malicious activity

131
00:05:25,039 --> 00:05:26,720
to wrap everything up

132
00:05:26,720 --> 00:05:29,520
few takeaways for state file make sure

133
00:05:29,520 --> 00:05:32,000
you are putting it in a safe place and

134
00:05:32,000 --> 00:05:34,320
have encryption in place

135
00:05:34,320 --> 00:05:37,039
that even if someone have an access is

136
00:05:37,039 --> 00:05:38,639
not able to

137
00:05:38,639 --> 00:05:41,039
read the file

138
00:05:41,039 --> 00:05:44,080
also just verify if you already have a

139
00:05:44,080 --> 00:05:46,000
third party application that scanning

140
00:05:46,000 --> 00:05:47,120
your cloud

141
00:05:47,120 --> 00:05:48,639
already have

142
00:05:48,639 --> 00:05:51,199
access to those state file and

143
00:05:51,199 --> 00:05:53,360
you should know that

144
00:05:53,360 --> 00:05:55,840
it's most probably that they have your

145
00:05:55,840 --> 00:05:58,880
aws access keys and other uh type of

146
00:05:58,880 --> 00:06:00,720
sensitive data

147
00:06:00,720 --> 00:06:02,560
for infrastructure drift you have two

148
00:06:02,560 --> 00:06:04,720
options either monitor for drift

149
00:06:04,720 --> 00:06:07,039
implement some drift detection tooling

150
00:06:07,039 --> 00:06:09,759
or to use something that will reconcile

151
00:06:09,759 --> 00:06:11,199
automatically

152
00:06:11,199 --> 00:06:14,000
the state of your git into the the cloud

153
00:06:14,000 --> 00:06:17,039
this is a methodology more in the

154
00:06:17,039 --> 00:06:18,800
githubs way

155
00:06:18,800 --> 00:06:20,479
and for the public model

156
00:06:20,479 --> 00:06:23,039
just use one of your

157
00:06:23,039 --> 00:06:24,720
one of those

158
00:06:24,720 --> 00:06:27,360
security scanning tools even for models

159
00:06:27,360 --> 00:06:29,759
and make sure nobody will have the

160
00:06:29,759 --> 00:06:33,280
option in your organization to utilize

161
00:06:33,280 --> 00:06:36,319
unauthorized module directly from uh the

162
00:06:36,319 --> 00:06:38,479
web

163
00:06:38,479 --> 00:06:40,479
that's it hope you enjoyed the talk you

164
00:06:40,479 --> 00:06:43,039
can find me later on uh

165
00:06:43,039 --> 00:06:46,880
outside and tomorrow in firefly booth

166
00:06:46,880 --> 00:06:49,840
take care

167
00:06:52,160 --> 00:06:53,039
yeah

168
00:06:53,039 --> 00:06:55,039
thanks iran this was really informative

169
00:06:55,039 --> 00:06:56,960
i think we have time for maybe a

170
00:06:56,960 --> 00:06:59,199
question if anyone has any questions for

171
00:06:59,199 --> 00:07:00,960
iran

172
00:07:00,960 --> 00:07:03,520
or maybe i have one question right so

173
00:07:03,520 --> 00:07:06,160
you talk about this uh these takeaways

174
00:07:06,160 --> 00:07:08,000
right so do you see any automations any

175
00:07:08,000 --> 00:07:10,000
tools that are already available to do

176
00:07:10,000 --> 00:07:12,000
do that like i see there are a lot of

177
00:07:12,000 --> 00:07:13,919
things scanning we can do on the static

178
00:07:13,919 --> 00:07:16,919
file

179
00:07:18,080 --> 00:07:19,039
yeah

180
00:07:19,039 --> 00:07:22,080
so yes there is a few popular open

181
00:07:22,080 --> 00:07:23,440
source tooling for scanning

182
00:07:23,440 --> 00:07:26,720
infrastructures code you have a tfsec of

183
00:07:26,720 --> 00:07:28,880
aqua security you have checkoff

184
00:07:28,880 --> 00:07:32,160
of bridge crew and you also have

185
00:07:32,160 --> 00:07:34,680
tool that we wrote in firefly called

186
00:07:34,680 --> 00:07:37,199
validiac.com and basically an online

187
00:07:37,199 --> 00:07:39,759
validator for your configuration

188
00:07:39,759 --> 00:07:42,080
and it's very easy to implement using

189
00:07:42,080 --> 00:07:43,680
the ci

190
00:07:43,680 --> 00:07:46,160
um i think you also need to make sure

191
00:07:46,160 --> 00:07:48,400
everybody is aware about this uh

192
00:07:48,400 --> 00:07:50,240
specific scenario of using module

193
00:07:50,240 --> 00:07:51,280
because

194
00:07:51,280 --> 00:07:54,879
sometimes uh a developer utilizing and

195
00:07:54,879 --> 00:07:56,720
not scanning because it's not going

196
00:07:56,720 --> 00:07:59,440
through the cicd but you need only one

197
00:07:59,440 --> 00:08:01,440
time that have some

198
00:08:01,440 --> 00:08:03,680
malicious configuration in your cloud in

199
00:08:03,680 --> 00:08:05,919
order to have the attacker option to

200
00:08:05,919 --> 00:08:08,960
access your aws so it's very easy to buy

201
00:08:08,960 --> 00:08:11,680
bypass those scanning tools

202
00:08:11,680 --> 00:08:13,599
yeah

203
00:08:13,599 --> 00:08:15,919
thanks iran yeah

204
00:08:15,919 --> 00:08:18,880
bye-bye

205
00:08:18,880 --> 00:08:21,980
[Applause]

