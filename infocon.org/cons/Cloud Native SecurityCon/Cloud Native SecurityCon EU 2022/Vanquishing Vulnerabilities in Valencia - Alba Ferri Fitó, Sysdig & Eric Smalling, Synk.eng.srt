1
00:00:00,080 --> 00:00:01,520
i'm eric smalling i'm a developer

2
00:00:01,520 --> 00:00:04,560
advocate at sneak um and albert i'm alba

3
00:00:04,560 --> 00:00:06,560
ferry i'm a senior product marketing

4
00:00:06,560 --> 00:00:08,480
manager at csd

5
00:00:08,480 --> 00:00:10,080
and we are here today to talk about

6
00:00:10,080 --> 00:00:11,440
vanquishing vulnerabilities here in

7
00:00:11,440 --> 00:00:13,360
vulnera and in valencia yeah not in

8
00:00:13,360 --> 00:00:15,360
vulnerability we're not in vulnerability

9
00:00:15,360 --> 00:00:17,520
um quick agenda just uh we don't have a

10
00:00:17,520 --> 00:00:19,039
lot of time so hopefully i don't go too

11
00:00:19,039 --> 00:00:21,680
fast uh we're gonna first talk we'll

12
00:00:21,680 --> 00:00:22,960
quickly talk some terminology but i

13
00:00:22,960 --> 00:00:24,240
think everyone here knows what a lot of

14
00:00:24,240 --> 00:00:26,320
that is um then i'm gonna get right into

15
00:00:26,320 --> 00:00:28,320
a demonstration of a remote code

16
00:00:28,320 --> 00:00:31,039
execution um i'm going to demonstrate a

17
00:00:31,039 --> 00:00:33,120
log4j log4shell

18
00:00:33,120 --> 00:00:34,800
exploit so that you can see if you've

19
00:00:34,800 --> 00:00:37,680
not seen it before how ridiculously easy

20
00:00:37,680 --> 00:00:39,040
it is to do

21
00:00:39,040 --> 00:00:40,399
and then we're going to talk about some

22
00:00:40,399 --> 00:00:42,000
proactive measures you can use to

23
00:00:42,000 --> 00:00:43,840
minimize blast radius for

24
00:00:43,840 --> 00:00:45,360
vulnerabilities like that that you

25
00:00:45,360 --> 00:00:47,520
didn't see coming zero days or things

26
00:00:47,520 --> 00:00:48,480
that were just

27
00:00:48,480 --> 00:00:50,320
uh that you don't know if you have or

28
00:00:50,320 --> 00:00:52,719
not then alba's going to talk then about

29
00:00:52,719 --> 00:00:54,160
detecting that kind of behavior for

30
00:00:54,160 --> 00:00:55,440
anything that slips by so that you can

31
00:00:55,440 --> 00:00:57,039
be alerted should something be happening

32
00:00:57,039 --> 00:00:58,640
in your cluster

33
00:00:58,640 --> 00:01:00,719
so as i said most of this terminology

34
00:01:00,719 --> 00:01:02,719
everybody in this room understands the

35
00:01:02,719 --> 00:01:05,199
main one i'm going to talk about today

36
00:01:05,199 --> 00:01:06,720
for at least my side of the talk is

37
00:01:06,720 --> 00:01:08,080
mitigation

38
00:01:08,080 --> 00:01:10,240
counter measures you can use to prevent

39
00:01:10,240 --> 00:01:11,439
a threat

40
00:01:11,439 --> 00:01:14,080
or at least reduce its impact to you in

41
00:01:14,080 --> 00:01:15,920
the real world

42
00:01:15,920 --> 00:01:19,040
so enough talk in slides let's uh get to

43
00:01:19,040 --> 00:01:20,640
a demo

44
00:01:20,640 --> 00:01:23,119
so what you're seeing here is a j2 let

45
00:01:23,119 --> 00:01:24,840
me set the scene kind of we have a j2ee

46
00:01:24,840 --> 00:01:27,040
application two-tier it's got a

47
00:01:27,040 --> 00:01:29,360
front-end that's obviously in java and

48
00:01:29,360 --> 00:01:31,920
then a mysql backend running in separate

49
00:01:31,920 --> 00:01:34,560
pods on a kubernetes cluster out in eks

50
00:01:34,560 --> 00:01:36,960
and please conference wi-fi

51
00:01:36,960 --> 00:01:38,159
stay working otherwise we'll have to

52
00:01:38,159 --> 00:01:39,439
drop to a recording and i hate doing

53
00:01:39,439 --> 00:01:40,400
that

54
00:01:40,400 --> 00:01:41,280
so

55
00:01:41,280 --> 00:01:43,439
on the center here we have octet writing

56
00:01:43,439 --> 00:01:45,840
just monitoring the logs of this java

57
00:01:45,840 --> 00:01:46,960
application

58
00:01:46,960 --> 00:01:48,320
and then on the left you'll see what's

59
00:01:48,320 --> 00:01:49,680
going to happen over there in a minute

60
00:01:49,680 --> 00:01:52,720
so i'm going to sign into my application

61
00:01:52,720 --> 00:01:54,960
and of course my one password has locked

62
00:01:54,960 --> 00:01:57,280
out so

63
00:01:57,280 --> 00:02:00,719
here we go this is

64
00:02:00,880 --> 00:02:04,240
unmomento for favor

65
00:02:04,240 --> 00:02:06,799
clear my session out try that again

66
00:02:06,799 --> 00:02:08,639
so we're gonna log in

67
00:02:08,639 --> 00:02:10,560
proof that i'm doing it live so this

68
00:02:10,560 --> 00:02:12,239
again is just a simple application if

69
00:02:12,239 --> 00:02:13,440
you've seen any of my talks before

70
00:02:13,440 --> 00:02:15,280
you've probably seen this uh it's just a

71
00:02:15,280 --> 00:02:17,520
to-do list and if i search for something

72
00:02:17,520 --> 00:02:19,599
like a car to do

73
00:02:19,599 --> 00:02:21,440
you'll see that it finds that and it

74
00:02:21,440 --> 00:02:23,520
shows the car and if i come back over

75
00:02:23,520 --> 00:02:25,680
here

76
00:02:25,680 --> 00:02:28,319
and again live demos let me refresh this

77
00:02:28,319 --> 00:02:29,920
page

78
00:02:29,920 --> 00:02:31,599
sometimes octane loses its connection

79
00:02:31,599 --> 00:02:32,400
when

80
00:02:32,400 --> 00:02:34,800
wi-fi goes in and out

81
00:02:34,800 --> 00:02:37,040
oops

82
00:02:37,040 --> 00:02:41,040
ah come on octa there we go logs

83
00:02:41,040 --> 00:02:42,720
okay well octan's not gonna cooperate

84
00:02:42,720 --> 00:02:44,800
with me so we'll just open another

85
00:02:44,800 --> 00:02:46,239
terminal

86
00:02:46,239 --> 00:02:48,000
and do this

87
00:02:48,000 --> 00:02:50,560
the good old-fashioned way

88
00:02:50,560 --> 00:02:53,360
logs follow

89
00:02:53,360 --> 00:02:55,760
java goof

90
00:02:55,760 --> 00:02:58,799
come on autocomplete

91
00:02:59,840 --> 00:03:01,120
remember what i said about conference

92
00:03:01,120 --> 00:03:03,599
wi-fi there we go

93
00:03:03,599 --> 00:03:05,120
good grief

94
00:03:05,120 --> 00:03:06,879
not found

95
00:03:06,879 --> 00:03:08,879
i must have bounced my pod since i did

96
00:03:08,879 --> 00:03:11,679
that last there we go

97
00:03:12,720 --> 00:03:14,640
there we go ignore the errors before

98
00:03:14,640 --> 00:03:15,519
that

99
00:03:15,519 --> 00:03:16,480
again

100
00:03:16,480 --> 00:03:19,360
so we see searching for car has happened

101
00:03:19,360 --> 00:03:20,879
ignore all this other stuff from the

102
00:03:20,879 --> 00:03:22,959
test runs i've done but what we're what

103
00:03:22,959 --> 00:03:25,840
we have here is the application is very

104
00:03:25,840 --> 00:03:27,920
likely logging what we do as we go along

105
00:03:27,920 --> 00:03:30,239
all of our applications do that what the

106
00:03:30,239 --> 00:03:31,840
interesting thing about the log4j

107
00:03:31,840 --> 00:03:33,440
vulnerability if you aren't you know we

108
00:03:33,440 --> 00:03:35,200
haven't looked into what it was and why

109
00:03:35,200 --> 00:03:36,080
it's so

110
00:03:36,080 --> 00:03:38,560
pernicious is that

111
00:03:38,560 --> 00:03:41,120
it allowed a jndi or java naming

112
00:03:41,120 --> 00:03:43,440
discovery interface lookup

113
00:03:43,440 --> 00:03:46,080
using an ldap external server and what

114
00:03:46,080 --> 00:03:47,360
happens is you come in here and i'm

115
00:03:47,360 --> 00:03:48,879
going to use this and copy the string

116
00:03:48,879 --> 00:03:50,799
because it's easier than typing it

117
00:03:50,799 --> 00:03:52,480
it allows me to insert something here

118
00:03:52,480 --> 00:03:54,640
instead of a normal string

119
00:03:54,640 --> 00:03:56,000
to search for i'm searching for an

120
00:03:56,000 --> 00:03:58,319
interpolated thing so you've got to grow

121
00:03:58,319 --> 00:04:01,280
that font for you i've got a curly a

122
00:04:01,280 --> 00:04:03,519
dollar curly brace and then i've got the

123
00:04:03,519 --> 00:04:05,200
protocol for ldap and i'm pointing to

124
00:04:05,200 --> 00:04:07,200
this ldap server somewhere on a dark web

125
00:04:07,200 --> 00:04:09,200
domain

126
00:04:09,200 --> 00:04:12,000
called with a context of remote shell

127
00:04:12,000 --> 00:04:14,080
now before i start that i'm going to go

128
00:04:14,080 --> 00:04:16,798
to this other tab over here

129
00:04:16,798 --> 00:04:18,399
and this is just another instance

130
00:04:18,399 --> 00:04:20,478
running in ec2 somewhere it doesn't

131
00:04:20,478 --> 00:04:22,000
matter where it is i'm just listening

132
00:04:22,000 --> 00:04:26,320
with nat cat on port 9000 in this case

133
00:04:26,320 --> 00:04:29,360
now if i hit go here

134
00:04:29,360 --> 00:04:30,960
you see a connection has happened i do

135
00:04:30,960 --> 00:04:34,880
an ls i now have a shell into the tomcat

136
00:04:34,880 --> 00:04:37,600
server that is running on that um

137
00:04:37,600 --> 00:04:39,360
that that application is running in i

138
00:04:39,360 --> 00:04:41,280
can pull my environment so i can see all

139
00:04:41,280 --> 00:04:43,360
sorts of nice information there

140
00:04:43,360 --> 00:04:44,479
including the fact that i'm in a

141
00:04:44,479 --> 00:04:46,320
kubernetes cluster because of all the

142
00:04:46,320 --> 00:04:48,000
environmental variables that fit that

143
00:04:48,000 --> 00:04:49,280
there's all sorts of meat juicy

144
00:04:49,280 --> 00:04:50,880
information here i can get at i can get

145
00:04:50,880 --> 00:04:52,400
at the internal

146
00:04:52,400 --> 00:04:54,560
ip of the api server for the control

147
00:04:54,560 --> 00:04:56,560
plane in this cluster

148
00:04:56,560 --> 00:04:57,919
let's see what else i can see let's do a

149
00:04:57,919 --> 00:04:59,280
df

150
00:04:59,280 --> 00:05:02,560
hey it looks like since this is pre 124

151
00:05:02,560 --> 00:05:04,960
kubernetes the default service account

152
00:05:04,960 --> 00:05:06,800
token might be out there so let's copy

153
00:05:06,800 --> 00:05:09,759
that and see if i can see that

154
00:05:09,759 --> 00:05:11,010
slash token

155
00:05:11,010 --> 00:05:12,160
[Music]

156
00:05:12,160 --> 00:05:15,360
and there it is so i can start as a bad

157
00:05:15,360 --> 00:05:17,759
actor start expanding my exploit remote

158
00:05:17,759 --> 00:05:19,919
code execution exploits happen you're

159
00:05:19,919 --> 00:05:22,240
going to have them occasionally

160
00:05:22,240 --> 00:05:24,000
that's why a you need to stay patched

161
00:05:24,000 --> 00:05:25,600
and it's obviously important to scan

162
00:05:25,600 --> 00:05:27,199
your code scan your containers make sure

163
00:05:27,199 --> 00:05:28,639
that as they come up you're patching

164
00:05:28,639 --> 00:05:30,320
those and getting them out of the way

165
00:05:30,320 --> 00:05:32,160
but as it has happened with many

166
00:05:32,160 --> 00:05:34,880
companies with this exploit in december

167
00:05:34,880 --> 00:05:36,320
they were caught off guard it happened

168
00:05:36,320 --> 00:05:38,880
so fast and so many people were

169
00:05:38,880 --> 00:05:40,000
vulnerable

170
00:05:40,000 --> 00:05:41,840
that everyone was scrambling to figure

171
00:05:41,840 --> 00:05:44,400
out do i have this problem and what the

172
00:05:44,400 --> 00:05:46,240
heck do i do before i can get this patch

173
00:05:46,240 --> 00:05:47,280
out the door

174
00:05:47,280 --> 00:05:48,080
so

175
00:05:48,080 --> 00:05:49,120
what are some of the other things i can

176
00:05:49,120 --> 00:05:50,320
do here

177
00:05:50,320 --> 00:05:52,000
i could use that to try going after the

178
00:05:52,000 --> 00:05:55,120
the api but who am i let's see what's uh

179
00:05:55,120 --> 00:05:58,080
user i'm oh i'm root that's handy

180
00:05:58,080 --> 00:06:00,319
if you didn't know many open source

181
00:06:00,319 --> 00:06:02,720
official images out on the main

182
00:06:02,720 --> 00:06:04,800
registries do default in docker

183
00:06:04,800 --> 00:06:07,199
containers by default default to

184
00:06:07,199 --> 00:06:09,840
root user you should well we'll get into

185
00:06:09,840 --> 00:06:12,000
why that's good or bad in a minute uh

186
00:06:12,000 --> 00:06:14,880
let's see can i touch a file in

187
00:06:14,880 --> 00:06:16,800
a directory

188
00:06:16,800 --> 00:06:20,800
and do an ls ltr on etsy

189
00:06:20,800 --> 00:06:22,800
yes i just created a foo

190
00:06:22,800 --> 00:06:23,840
you can see that's the bottom of the

191
00:06:23,840 --> 00:06:26,080
screen i created a foo file in the etsy

192
00:06:26,080 --> 00:06:27,840
directory this tells me not only the a

193
00:06:27,840 --> 00:06:29,440
yes i am root i have the ability to do

194
00:06:29,440 --> 00:06:31,440
that it's a read write file system in

195
00:06:31,440 --> 00:06:33,520
this container so i can do things to it

196
00:06:33,520 --> 00:06:37,120
let's say let's see if i can run

197
00:06:38,960 --> 00:06:42,880
nmap oops if i can type

198
00:06:44,639 --> 00:06:46,720
oh come on wi-fi so i have nmap

199
00:06:46,720 --> 00:06:49,360
available that's cool um let's see if i

200
00:06:49,360 --> 00:06:51,120
have curl available just while i'm

201
00:06:51,120 --> 00:06:53,599
typing things

202
00:06:53,599 --> 00:06:55,680
let's do i don't know google that's

203
00:06:55,680 --> 00:06:58,560
always a good one to check

204
00:07:00,080 --> 00:07:02,400
and yes so i have curl available at my

205
00:07:02,400 --> 00:07:03,919
disposal i happen to have nmap on this

206
00:07:03,919 --> 00:07:05,280
box this is because i was hacking on it

207
00:07:05,280 --> 00:07:06,639
earlier honestly that wasn't supposed to

208
00:07:06,639 --> 00:07:08,720
already be there let's pretend and nmap

209
00:07:08,720 --> 00:07:09,919
wasn't there

210
00:07:09,919 --> 00:07:13,520
i wonder if i can even just do this

211
00:07:15,360 --> 00:07:17,440
yes so i have access to app repositories

212
00:07:17,440 --> 00:07:18,880
whether it be on the internet or some

213
00:07:18,880 --> 00:07:21,360
you know company internal um so i can

214
00:07:21,360 --> 00:07:23,599
start expanding my exploit very easily

215
00:07:23,599 --> 00:07:24,880
on this machine

216
00:07:24,880 --> 00:07:25,759
um

217
00:07:25,759 --> 00:07:28,000
so as i said let's say you're at this

218
00:07:28,000 --> 00:07:29,360
company and you're freaking out now

219
00:07:29,360 --> 00:07:30,880
because this exploit has come out in

220
00:07:30,880 --> 00:07:32,479
december and you're trying to figure out

221
00:07:32,479 --> 00:07:34,080
what could have happened what do i need

222
00:07:34,080 --> 00:07:35,440
to do well if you there's some

223
00:07:35,440 --> 00:07:37,199
mitigation things you could have done

224
00:07:37,199 --> 00:07:39,759
ahead of time to minimize a lot of what

225
00:07:39,759 --> 00:07:41,680
i just showed you

226
00:07:41,680 --> 00:07:43,280
first of all

227
00:07:43,280 --> 00:07:45,440
this uh the image i'm using if i were to

228
00:07:45,440 --> 00:07:47,039
go look at the docker file this is an

229
00:07:47,039 --> 00:07:49,199
official tomcat image at version

230
00:07:49,199 --> 00:07:50,160
whatever

231
00:07:50,160 --> 00:07:52,240
and that you would think would have you

232
00:07:52,240 --> 00:07:54,160
know the jdk the

233
00:07:54,160 --> 00:07:55,840
bits of the uh distribution but it's

234
00:07:55,840 --> 00:07:57,759
also going to have things like curl as

235
00:07:57,759 --> 00:07:58,720
you saw

236
00:07:58,720 --> 00:08:00,560
it's got bash in there it's got w good

237
00:08:00,560 --> 00:08:01,919
it could even have vim who knows what

238
00:08:01,919 --> 00:08:03,680
all is in this thing it's a very fat

239
00:08:03,680 --> 00:08:05,520
container and by being a fat container

240
00:08:05,520 --> 00:08:07,919
you're giving a lot of tools to bad

241
00:08:07,919 --> 00:08:10,080
actors to use against you what you

242
00:08:10,080 --> 00:08:11,840
really want to do is try to stick to

243
00:08:11,840 --> 00:08:14,160
smaller image sizes to start with you

244
00:08:14,160 --> 00:08:16,240
ideally just want the open jdk

245
00:08:16,240 --> 00:08:17,919
now maybe you want to have a shell in

246
00:08:17,919 --> 00:08:19,520
there for things that you need to run as

247
00:08:19,520 --> 00:08:21,039
part of your startup or whatever but

248
00:08:21,039 --> 00:08:22,879
minimize that image size down so you're

249
00:08:22,879 --> 00:08:25,840
not providing tools to the uh to the bad

250
00:08:25,840 --> 00:08:28,160
actors uh to do this there are many

251
00:08:28,160 --> 00:08:29,360
there's too many things to talk about in

252
00:08:29,360 --> 00:08:30,639
this the short time we have today but

253
00:08:30,639 --> 00:08:32,479
you can look at slim images you could

254
00:08:32,479 --> 00:08:33,839
look at distro-less images from the

255
00:08:33,839 --> 00:08:35,599
google open source folks those are very

256
00:08:35,599 --> 00:08:37,839
minimal images um just make sure they

257
00:08:37,839 --> 00:08:39,279
work for your team you don't want to go

258
00:08:39,279 --> 00:08:40,958
to distal list and then i'll say oh i

259
00:08:40,958 --> 00:08:42,320
need this other tool and then you've got

260
00:08:42,320 --> 00:08:43,919
to build it from binary and include it

261
00:08:43,919 --> 00:08:45,440
yourself and become sysadmins as

262
00:08:45,440 --> 00:08:47,120
developers that's not always the best

263
00:08:47,120 --> 00:08:48,399
solution but find the right solution

264
00:08:48,399 --> 00:08:49,920
that minimizes

265
00:08:49,920 --> 00:08:51,600
the image size understand how layers

266
00:08:51,600 --> 00:08:53,680
work if you're new to containers

267
00:08:53,680 --> 00:08:55,600
you might think that i can just put a

268
00:08:55,600 --> 00:08:57,760
run rm curl and get rid of that curl

269
00:08:57,760 --> 00:08:59,839
that's not how it works it just hides it

270
00:08:59,839 --> 00:09:01,600
in the images and if somebody were like

271
00:09:01,600 --> 00:09:04,000
in yesterday's ctf demonstration

272
00:09:04,000 --> 00:09:05,279
somebody were to start up a privileged

273
00:09:05,279 --> 00:09:07,680
container i now can mount the host file

274
00:09:07,680 --> 00:09:10,080
system very very easily and get at those

275
00:09:10,080 --> 00:09:12,959
hidden layers that are in the uh var

276
00:09:12,959 --> 00:09:13,920
run

277
00:09:13,920 --> 00:09:15,839
containity whatever directories

278
00:09:15,839 --> 00:09:17,839
um i know i'm running out of time so i'm

279
00:09:17,839 --> 00:09:19,279
going to hurry up here practice good

280
00:09:19,279 --> 00:09:20,880
build strategies if you're if you're

281
00:09:20,880 --> 00:09:22,240
using docker files use multi-stage

282
00:09:22,240 --> 00:09:23,920
builds so that your final stage can be

283
00:09:23,920 --> 00:09:26,000
as minimal as you want you can make it

284
00:09:26,000 --> 00:09:27,600
uh in most places you want to have

285
00:09:27,600 --> 00:09:29,040
repeatable builds so that every time you

286
00:09:29,040 --> 00:09:30,560
build from a given commit hash you get

287
00:09:30,560 --> 00:09:32,640
the same image out so it's predictable

288
00:09:32,640 --> 00:09:34,240
and deterministic and look at

289
00:09:34,240 --> 00:09:35,839
alternative tools if you're a java shop

290
00:09:35,839 --> 00:09:38,640
i'm a big fan of jib which is a 100 java

291
00:09:38,640 --> 00:09:40,959
based uh image building tool that you

292
00:09:40,959 --> 00:09:43,279
can put right into your maven or gradle

293
00:09:43,279 --> 00:09:46,320
tools if you're in go look at co ko

294
00:09:46,320 --> 00:09:47,680
there's a bunch of other tools you could

295
00:09:47,680 --> 00:09:48,959
be using that you can really standardize

296
00:09:48,959 --> 00:09:50,640
to your organization's needs and then

297
00:09:50,640 --> 00:09:52,399
finally there is entire conferences

298
00:09:52,399 --> 00:09:54,080
dedicated to this now i can't go into

299
00:09:54,080 --> 00:09:56,720
secure supply chain in two seconds but

300
00:09:56,720 --> 00:09:57,920
what i want to mention here is you want

301
00:09:57,920 --> 00:09:59,680
to make sure that wherever your images

302
00:09:59,680 --> 00:10:01,279
are coming from you have an audit trail

303
00:10:01,279 --> 00:10:03,760
for them a chain of custody if you will

304
00:10:03,760 --> 00:10:06,160
and only automation should be putting

305
00:10:06,160 --> 00:10:08,160
those images into whatever managed

306
00:10:08,160 --> 00:10:10,399
registries you're using eric's

307
00:10:10,399 --> 00:10:12,959
docker build based image should never be

308
00:10:12,959 --> 00:10:14,800
being shipped to anybody anywhere that's

309
00:10:14,800 --> 00:10:16,800
important

310
00:10:16,800 --> 00:10:18,160
now let's talk about actual things you

311
00:10:18,160 --> 00:10:20,240
can do to minimize what i did there

312
00:10:20,240 --> 00:10:22,399
beyond smaller images

313
00:10:22,399 --> 00:10:24,399
don't run as root in your containers uh

314
00:10:24,399 --> 00:10:26,800
it's very very rare that you need and

315
00:10:26,800 --> 00:10:28,480
especially in business e-commerce type

316
00:10:28,480 --> 00:10:30,160
applications that you need to have a

317
00:10:30,160 --> 00:10:31,839
root user running your application you

318
00:10:31,839 --> 00:10:33,279
might have something very specific and

319
00:10:33,279 --> 00:10:34,800
that's a topic we could talk about at

320
00:10:34,800 --> 00:10:36,000
the booth later

321
00:10:36,000 --> 00:10:37,440
but um

322
00:10:37,440 --> 00:10:39,519
you probably don't need it so switch to

323
00:10:39,519 --> 00:10:41,040
a lower privileged user because when

324
00:10:41,040 --> 00:10:43,200
you're uid 0 in a container even though

325
00:10:43,200 --> 00:10:46,079
you're contained you're uid0 and if you

326
00:10:46,079 --> 00:10:47,440
can break out into the file system of

327
00:10:47,440 --> 00:10:48,959
the host as you can

328
00:10:48,959 --> 00:10:50,560
you can imagine what you can do

329
00:10:50,560 --> 00:10:51,760
privileged containers as we saw

330
00:10:51,760 --> 00:10:53,440
yesterday again in the ctf

331
00:10:53,440 --> 00:10:54,560
training

332
00:10:54,560 --> 00:10:55,760
if you've got a privilege container you

333
00:10:55,760 --> 00:10:58,399
own the box you have access to mount

334
00:10:58,399 --> 00:10:59,839
devices from the root you all sorts of

335
00:10:59,839 --> 00:11:02,800
stuff just unless you're like falco or

336
00:11:02,800 --> 00:11:05,200
or something that needs privilege access

337
00:11:05,200 --> 00:11:06,640
you don't need privilege

338
00:11:06,640 --> 00:11:08,079
linux capabilities are the same kind of

339
00:11:08,079 --> 00:11:10,320
thing most business applications can

340
00:11:10,320 --> 00:11:13,440
safely drop all capabilities

341
00:11:13,440 --> 00:11:14,959
just add back the ones you need if you

342
00:11:14,959 --> 00:11:17,040
can't run without a netcap ad for some

343
00:11:17,040 --> 00:11:18,399
reason figure out why you need that

344
00:11:18,399 --> 00:11:19,279
because that's kind of odd for a

345
00:11:19,279 --> 00:11:21,680
business app but just to add the

346
00:11:21,680 --> 00:11:23,519
capabilities you need and then finally

347
00:11:23,519 --> 00:11:25,600
the read only root file system being

348
00:11:25,600 --> 00:11:27,680
immutable is a good thing in many ways

349
00:11:27,680 --> 00:11:28,959
it's not none of these are silver

350
00:11:28,959 --> 00:11:30,800
bullets but it does make life harder i

351
00:11:30,800 --> 00:11:33,519
would not have been able to run apt get

352
00:11:33,519 --> 00:11:35,200
update or install or any of those kinds

353
00:11:35,200 --> 00:11:37,920
of tools if i'm trying to modify mutate

354
00:11:37,920 --> 00:11:39,360
a file system that's read only from the

355
00:11:39,360 --> 00:11:40,839
beginning

356
00:11:40,839 --> 00:11:43,279
um so but the big one i want to really

357
00:11:43,279 --> 00:11:45,040
hit on is network policy a lot of us in

358
00:11:45,040 --> 00:11:47,040
security discussions don't really we

359
00:11:47,040 --> 00:11:48,640
kind of ignore network policy or for

360
00:11:48,640 --> 00:11:50,720
developers like myself first time i look

361
00:11:50,720 --> 00:11:51,920
at network policy i'm like i'm not a

362
00:11:51,920 --> 00:11:53,279
network admin i don't understand how to

363
00:11:53,279 --> 00:11:55,040
do firewalls i don't know it's not that

364
00:11:55,040 --> 00:11:56,800
hard network policy is one of my

365
00:11:56,800 --> 00:11:59,120
favorite tools and for log4j it was a

366
00:11:59,120 --> 00:12:00,880
it's a great way to minimize the blast

367
00:12:00,880 --> 00:12:02,800
radius because what was the happy path

368
00:12:02,800 --> 00:12:04,320
of what should have been happening was

369
00:12:04,320 --> 00:12:07,040
user hits web app web hits db that's the

370
00:12:07,040 --> 00:12:08,639
network path that should be happening

371
00:12:08,639 --> 00:12:10,480
but what's really happening is the web

372
00:12:10,480 --> 00:12:12,399
app is then sending a connection out to

373
00:12:12,399 --> 00:12:14,880
an ldap server or a quasi ldips or a fo

374
00:12:14,880 --> 00:12:17,519
one and then it is returning and then

375
00:12:17,519 --> 00:12:19,279
calling another

376
00:12:19,279 --> 00:12:22,480
http server that's returning a evil

377
00:12:22,480 --> 00:12:24,480
object which in turn is then calling

378
00:12:24,480 --> 00:12:26,320
back out to some port somewhere in this

379
00:12:26,320 --> 00:12:28,880
case it was my other ec2 instance those

380
00:12:28,880 --> 00:12:30,880
orange connection lines should not be

381
00:12:30,880 --> 00:12:31,920
happening

382
00:12:31,920 --> 00:12:34,000
network policy allows you to specify

383
00:12:34,000 --> 00:12:37,360
ingress and egress rules for tcp udp

384
00:12:37,360 --> 00:12:39,279
across your your deployment and you can

385
00:12:39,279 --> 00:12:41,519
just say hey using selectors what can

386
00:12:41,519 --> 00:12:43,200
what pods can and can't talk to each

387
00:12:43,200 --> 00:12:46,639
other i'm a fan of the deny all style

388
00:12:46,639 --> 00:12:48,000
pattern where you start with nothing

389
00:12:48,000 --> 00:12:49,920
working everything is broken obviously

390
00:12:49,920 --> 00:12:51,519
the app doesn't work here but no ingress

391
00:12:51,519 --> 00:12:53,839
or egress from the pods is allowed

392
00:12:53,839 --> 00:12:55,600
you want to allow dns so you have

393
00:12:55,600 --> 00:12:57,519
service discovery but beyond that

394
00:12:57,519 --> 00:12:58,800
nothing is allowed

395
00:12:58,800 --> 00:13:01,279
then you explicitly just add the rules

396
00:13:01,279 --> 00:13:03,600
you need for your application to work in

397
00:13:03,600 --> 00:13:05,519
this case i need traffic to come in from

398
00:13:05,519 --> 00:13:07,920
users obviously and i need traffic to

399
00:13:07,920 --> 00:13:09,680
leave a web app towards a database and i

400
00:13:09,680 --> 00:13:11,360
need traffic into the database only from

401
00:13:11,360 --> 00:13:13,120
the web app if you want to see what that

402
00:13:13,120 --> 00:13:14,800
would look like if you're new to network

403
00:13:14,800 --> 00:13:20,760
policies i have another tab somewhere

404
00:13:21,360 --> 00:13:24,720
i have too many screens open

405
00:13:25,279 --> 00:13:28,240
actually has this one right here

406
00:13:28,560 --> 00:13:29,600
though i'm not going to go through the

407
00:13:29,600 --> 00:13:31,519
minutia of all the manifest here but you

408
00:13:31,519 --> 00:13:32,959
can see i've broken this up for the

409
00:13:32,959 --> 00:13:35,839
granular granularly to be legible but we

410
00:13:35,839 --> 00:13:37,600
have a denial policy that's saying for

411
00:13:37,600 --> 00:13:39,279
the empty pod selector meaning all the

412
00:13:39,279 --> 00:13:40,720
pods in whatever name space i deploy

413
00:13:40,720 --> 00:13:42,079
this to

414
00:13:42,079 --> 00:13:43,920
ingress egress ingress the empty list

415
00:13:43,920 --> 00:13:46,399
means no ingress to anything egress the

416
00:13:46,399 --> 00:13:47,279
only

417
00:13:47,279 --> 00:13:49,360
egress you're allowed is to port 53. in

418
00:13:49,360 --> 00:13:50,800
real world i'd be more specific than

419
00:13:50,800 --> 00:13:53,040
this to say the cube dns but for this

420
00:13:53,040 --> 00:13:54,560
demo that's what i have

421
00:13:54,560 --> 00:13:57,600
then uh we want to egress to from the

422
00:13:57,600 --> 00:14:00,320
java goof web app only to i'm sorry

423
00:14:00,320 --> 00:14:02,800
ingress only to port 8080 that's where

424
00:14:02,800 --> 00:14:04,959
my tomcat server is listening

425
00:14:04,959 --> 00:14:06,720
and then finally we want to say egress

426
00:14:06,720 --> 00:14:10,320
out of the java web app to the javadb

427
00:14:10,320 --> 00:14:11,839
now again i could be more specific and

428
00:14:11,839 --> 00:14:14,639
say ports and whatnot and then similarly

429
00:14:14,639 --> 00:14:17,360
into the javadb from the java web app

430
00:14:17,360 --> 00:14:19,040
and if we apply that

431
00:14:19,040 --> 00:14:20,079
let me

432
00:14:20,079 --> 00:14:23,279
quit out of that and do okay apply

433
00:14:23,279 --> 00:14:26,560
k is alias to cube ctl because i'm lazy

434
00:14:26,560 --> 00:14:27,600
and

435
00:14:27,600 --> 00:14:28,639
denial

436
00:14:28,639 --> 00:14:31,600
if i apply this

437
00:14:31,600 --> 00:14:33,040
and i have no idea what my time is

438
00:14:33,040 --> 00:14:35,600
hopefully i'm not getting all your time

439
00:14:35,600 --> 00:14:38,000
um

440
00:14:38,240 --> 00:14:39,600
in fact i'm worried about time if i

441
00:14:39,600 --> 00:14:43,279
apply that now if i go over back to my

442
00:14:43,279 --> 00:14:45,120
web app and just hit this again what

443
00:14:45,120 --> 00:14:46,480
you're going to see is it's spinning now

444
00:14:46,480 --> 00:14:48,639
that orange line coming out of this box

445
00:14:48,639 --> 00:14:51,440
here is now blocked and anybody

446
00:14:51,440 --> 00:14:54,000
attacking yes i'm still vulnerable but

447
00:14:54,000 --> 00:14:55,680
i've mitigated and i've shrunk that

448
00:14:55,680 --> 00:14:58,560
blast radius now i've turned an rce into

449
00:14:58,560 --> 00:15:00,880
a potential denial of service maybe if

450
00:15:00,880 --> 00:15:02,480
they machine gun me right now and eat up

451
00:15:02,480 --> 00:15:04,079
a whole bunch of threads but it's still

452
00:15:04,079 --> 00:15:05,519
better than somebody having a shell in

453
00:15:05,519 --> 00:15:07,920
my my cluster so simple things like that

454
00:15:07,920 --> 00:15:10,079
can be done to help

455
00:15:10,079 --> 00:15:11,440
mitigate these things and finally

456
00:15:11,440 --> 00:15:12,560
enforce these kinds of things i'm

457
00:15:12,560 --> 00:15:14,079
talking about with something like either

458
00:15:14,079 --> 00:15:16,480
okay gatekeeper k verno pod security

459
00:15:16,480 --> 00:15:17,839
admission is the new one coming in next

460
00:15:17,839 --> 00:15:19,920
release uh if you're using psps that's

461
00:15:19,920 --> 00:15:21,519
great but they're deprecated move to one

462
00:15:21,519 --> 00:15:22,399
of these

463
00:15:22,399 --> 00:15:25,360
and with that i am going to hand over to

464
00:15:25,360 --> 00:15:26,639
i'll buck because

465
00:15:26,639 --> 00:15:27,920
we're running out time

466
00:15:27,920 --> 00:15:30,000
thank you

467
00:15:30,000 --> 00:15:32,320
okay

468
00:15:33,360 --> 00:15:36,800
so with the time that i have left i'm

469
00:15:36,800 --> 00:15:39,759
going to be talking can you hear me fine

470
00:15:39,759 --> 00:15:42,240
is it working yeah i'm going to be

471
00:15:42,240 --> 00:15:45,920
talking about detecting errand behavior

472
00:15:45,920 --> 00:15:48,800
all those security controls and best

473
00:15:48,800 --> 00:15:51,759
practices that eric walk us through are

474
00:15:51,759 --> 00:15:55,600
super valuable when we want to

475
00:15:55,600 --> 00:15:57,600
minimize the blight radio when we want

476
00:15:57,600 --> 00:15:58,560
to

477
00:15:58,560 --> 00:16:01,759
protect our applications

478
00:16:01,759 --> 00:16:04,720
dev teams should really pay attention to

479
00:16:04,720 --> 00:16:07,040
all of these advices when they are

480
00:16:07,040 --> 00:16:09,279
building the applications like not

481
00:16:09,279 --> 00:16:11,680
running containers as root if you can

482
00:16:11,680 --> 00:16:14,639
dropping capabilities not leaving

483
00:16:14,639 --> 00:16:16,959
network tools that hackers can use in

484
00:16:16,959 --> 00:16:19,920
case they break in and also using

485
00:16:19,920 --> 00:16:23,040
admission controller as a last frontier

486
00:16:23,040 --> 00:16:25,120
before sending applications to

487
00:16:25,120 --> 00:16:26,480
production

488
00:16:26,480 --> 00:16:29,120
but many of those

489
00:16:29,120 --> 00:16:32,639
are or apply better in the development

490
00:16:32,639 --> 00:16:36,480
lab phases of the application life cycle

491
00:16:36,480 --> 00:16:38,959
and that is what is known in the field

492
00:16:38,959 --> 00:16:40,160
as

493
00:16:40,160 --> 00:16:43,120
shift security left

494
00:16:43,120 --> 00:16:46,240
but to detect errand behavior

495
00:16:46,240 --> 00:16:49,279
we want to look at the other side of the

496
00:16:49,279 --> 00:16:52,079
infinite loop we want to

497
00:16:52,079 --> 00:16:53,360
look at

498
00:16:53,360 --> 00:16:55,839
productive environments here is where we

499
00:16:55,839 --> 00:16:58,240
want to detect error behavior when we

500
00:16:58,240 --> 00:17:02,240
have our workloads running in production

501
00:17:02,240 --> 00:17:05,679
before we knew the log4j library had

502
00:17:05,679 --> 00:17:08,400
such a big vulnerability or even the

503
00:17:08,400 --> 00:17:11,039
most recent one the spring for shell we

504
00:17:11,039 --> 00:17:13,119
didn't know our applications were at

505
00:17:13,119 --> 00:17:14,799
risk right

506
00:17:14,799 --> 00:17:16,880
uh well actually many of the

507
00:17:16,880 --> 00:17:19,039
applications running in productive

508
00:17:19,039 --> 00:17:21,119
environments right now are affected by

509
00:17:21,119 --> 00:17:23,839
vulnerabilities but they are still uh

510
00:17:23,839 --> 00:17:26,079
hidden or haven't been detected yet

511
00:17:26,079 --> 00:17:29,120
right so how can we

512
00:17:29,120 --> 00:17:30,400
be sure

513
00:17:30,400 --> 00:17:33,520
that we are protected how can we shield

514
00:17:33,520 --> 00:17:35,840
right

515
00:17:36,000 --> 00:17:38,000
we said in the beginning when we were

516
00:17:38,000 --> 00:17:39,280
going through the

517
00:17:39,280 --> 00:17:43,360
terminology that a thread is a path a

518
00:17:43,360 --> 00:17:45,840
theoretical path a way that a

519
00:17:45,840 --> 00:17:48,960
vulnerability is exploited and we show

520
00:17:48,960 --> 00:17:50,960
in the demo uh

521
00:17:50,960 --> 00:17:54,480
that uh how how to exploit the log4j

522
00:17:54,480 --> 00:17:57,919
vulnerability so it became a real threat

523
00:17:57,919 --> 00:17:58,880
right

524
00:17:58,880 --> 00:18:00,559
um

525
00:18:00,559 --> 00:18:03,760
we saw processes opening a reversal in a

526
00:18:03,760 --> 00:18:06,400
container and

527
00:18:06,400 --> 00:18:09,120
using network tools like nmap well in

528
00:18:09,120 --> 00:18:11,120
this case it wasn't there but nmap and

529
00:18:11,120 --> 00:18:14,320
cool whatever we saw processes uh

530
00:18:14,320 --> 00:18:18,080
writing below sensitive folders and even

531
00:18:18,080 --> 00:18:21,360
the access of application repositories

532
00:18:21,360 --> 00:18:23,360
right so um

533
00:18:23,360 --> 00:18:26,240
we need to find ways to

534
00:18:26,240 --> 00:18:29,120
detect these suspicious activity so

535
00:18:29,120 --> 00:18:32,799
that's how we can uh find out that we

536
00:18:32,799 --> 00:18:36,799
are being attacked right so in order to

537
00:18:36,799 --> 00:18:40,080
shift right to protect our environment

538
00:18:40,080 --> 00:18:42,480
uh we need to be very aware of this

539
00:18:42,480 --> 00:18:44,160
errand behavior

540
00:18:44,160 --> 00:18:47,600
uh but also uh we need to know what is

541
00:18:47,600 --> 00:18:48,480
the

542
00:18:48,480 --> 00:18:53,360
normal uh way our workloads uh behave

543
00:18:53,360 --> 00:18:56,960
right and when we think on containerized

544
00:18:56,960 --> 00:19:00,400
applications well we add that layer of

545
00:19:00,400 --> 00:19:03,200
abstraction uh maybe two or three layers

546
00:19:03,200 --> 00:19:05,280
if you're using kubernetes right but

547
00:19:05,280 --> 00:19:08,880
that's why they are so easy to use uh at

548
00:19:08,880 --> 00:19:12,480
in the same time we have uh cabbage

549
00:19:12,480 --> 00:19:14,799
which is that limited

550
00:19:14,799 --> 00:19:17,440
visibility doesn't let us you know see

551
00:19:17,440 --> 00:19:19,919
it through us as good as we could in a

552
00:19:19,919 --> 00:19:24,720
normal host right so um

553
00:19:24,720 --> 00:19:26,160
the

554
00:19:26,160 --> 00:19:28,480
if we know what are the normal

555
00:19:28,480 --> 00:19:31,360
conditions of our workloads we could be

556
00:19:31,360 --> 00:19:34,799
alerted with that when that uh behavior

557
00:19:34,799 --> 00:19:39,639
deviates from what is normal

558
00:19:40,480 --> 00:19:41,440
so

559
00:19:41,440 --> 00:19:44,320
for that you can use a

560
00:19:44,320 --> 00:19:47,600
thread detection engine like falco right

561
00:19:47,600 --> 00:19:50,080
falco is the first

562
00:19:50,080 --> 00:19:52,799
runtime security project that joined the

563
00:19:52,799 --> 00:19:54,400
cncf

564
00:19:54,400 --> 00:19:58,080
in an incubation level project

565
00:19:58,080 --> 00:20:01,360
it works in a streamlined fashion way

566
00:20:01,360 --> 00:20:03,760
and you can use it as a

567
00:20:03,760 --> 00:20:07,039
kernel module or ebpf program

568
00:20:07,039 --> 00:20:09,760
and it is built on top of two open

569
00:20:09,760 --> 00:20:12,080
source libraries let's see if i can

570
00:20:12,080 --> 00:20:14,640
pronounce them libs cup that's the easy

571
00:20:14,640 --> 00:20:18,080
one and leave since

572
00:20:18,080 --> 00:20:19,440
these

573
00:20:19,440 --> 00:20:21,840
libraries lets you intercept all the

574
00:20:21,840 --> 00:20:24,559
activity happening in a host and then

575
00:20:24,559 --> 00:20:28,960
using uh rules and and filters you can

576
00:20:28,960 --> 00:20:33,360
send it to the uh rules engine right um

577
00:20:33,360 --> 00:20:36,080
because that is what we need we we

578
00:20:36,080 --> 00:20:37,280
need to

579
00:20:37,280 --> 00:20:40,400
be alerted as soon as suspicious

580
00:20:40,400 --> 00:20:42,720
activity happens in your production

581
00:20:42,720 --> 00:20:46,480
environment uh we need this real-time

582
00:20:46,480 --> 00:20:49,440
detection right and

583
00:20:49,440 --> 00:20:53,039
falco comes with a lot of

584
00:20:53,039 --> 00:20:55,919
default rules out of the box and

585
00:20:55,919 --> 00:20:57,919
talking about the four rules can i ask

586
00:20:57,919 --> 00:21:00,159
you eric to pull out the messages that

587
00:21:00,159 --> 00:21:01,600
we had

588
00:21:01,600 --> 00:21:03,520
while doing the demo because we didn't

589
00:21:03,520 --> 00:21:06,640
tell you but we had a falco

590
00:21:06,640 --> 00:21:09,280
installation in the same cluster so

591
00:21:09,280 --> 00:21:11,679
let's see if we find

592
00:21:11,679 --> 00:21:12,720
anything

593
00:21:12,720 --> 00:21:15,039
ah it's gonna fail i'm just gonna pull a

594
00:21:15,039 --> 00:21:16,559
recording of when we did this before

595
00:21:16,559 --> 00:21:20,159
okay so you can see it so yeah here uh

596
00:21:20,159 --> 00:21:23,840
we have uh the notice known system

597
00:21:23,840 --> 00:21:26,559
binary send network uh traffic and that

598
00:21:26,559 --> 00:21:30,400
is when we send the ngi uh stream string

599
00:21:30,400 --> 00:21:33,840
in the web search form right and then i

600
00:21:33,840 --> 00:21:36,720
think we also had uh

601
00:21:36,720 --> 00:21:39,760
the right below edc

602
00:21:39,760 --> 00:21:41,520
two or three lines

603
00:21:41,520 --> 00:21:42,720
below that

604
00:21:42,720 --> 00:21:43,840
and

605
00:21:43,840 --> 00:21:46,559
also when we were accessing the the

606
00:21:46,559 --> 00:21:49,440
application repository so just with the

607
00:21:49,440 --> 00:21:52,159
with this um out-of-the-box rules you

608
00:21:52,159 --> 00:21:54,799
can start detecting uh suspicious

609
00:21:54,799 --> 00:21:57,039
activity i think we can go back to the

610
00:21:57,039 --> 00:21:58,880
slides

611
00:21:58,880 --> 00:22:00,799
okay

612
00:22:00,799 --> 00:22:01,520
so

613
00:22:01,520 --> 00:22:02,720
yeah

614
00:22:02,720 --> 00:22:06,159
but what happens if you want to

615
00:22:06,159 --> 00:22:10,960
detect suspicious activity that

616
00:22:11,039 --> 00:22:14,720
is not included in the activity that is

617
00:22:14,720 --> 00:22:17,039
happening in a host right

618
00:22:17,039 --> 00:22:19,600
uh because at the end vulnerability

619
00:22:19,600 --> 00:22:20,720
exploits

620
00:22:20,720 --> 00:22:24,799
can affect a wide range of targets okay

621
00:22:24,799 --> 00:22:26,480
so um

622
00:22:26,480 --> 00:22:29,039
let's say you want to monitor config

623
00:22:29,039 --> 00:22:32,400
changes that could be suspicious in a

624
00:22:32,400 --> 00:22:34,880
cloud account okay that information is

625
00:22:34,880 --> 00:22:36,720
not in the c schools

626
00:22:36,720 --> 00:22:37,520
um

627
00:22:37,520 --> 00:22:40,559
so for to extend falco

628
00:22:40,559 --> 00:22:41,919
behavior

629
00:22:41,919 --> 00:22:44,320
they release a very cool functionality

630
00:22:44,320 --> 00:22:47,200
called the falco plugins falco plugins

631
00:22:47,200 --> 00:22:49,919
are shared libraries that let us add

632
00:22:49,919 --> 00:22:52,480
different data sources and filtering

633
00:22:52,480 --> 00:22:55,520
fields so we can use the same falco

634
00:22:55,520 --> 00:22:57,760
rules engine to detect suspicious

635
00:22:57,760 --> 00:23:00,480
activity happening in other environments

636
00:23:00,480 --> 00:23:02,799
right so um

637
00:23:02,799 --> 00:23:06,840
let's say that a hacker finds your cloud

638
00:23:06,840 --> 00:23:10,240
credentials in a github repo i know this

639
00:23:10,240 --> 00:23:12,480
is very unlikely to happen but let's

640
00:23:12,480 --> 00:23:15,919
pretend so with that information a lot

641
00:23:15,919 --> 00:23:19,200
of damage can be done right or even

642
00:23:19,200 --> 00:23:21,679
better let's say that

643
00:23:21,679 --> 00:23:24,960
a hacker exploit a vulnerability that is

644
00:23:24,960 --> 00:23:27,919
in your workloads so it becomes a real

645
00:23:27,919 --> 00:23:29,280
threat again

646
00:23:29,280 --> 00:23:31,679
and then using lateral movement

647
00:23:31,679 --> 00:23:33,840
techniques they jump to the cloud

648
00:23:33,840 --> 00:23:35,600
account

649
00:23:35,600 --> 00:23:36,480
so

650
00:23:36,480 --> 00:23:38,559
having those credentials they can spin

651
00:23:38,559 --> 00:23:41,679
up a new uh cluster they can create

652
00:23:41,679 --> 00:23:44,000
additional users for later use or they

653
00:23:44,000 --> 00:23:46,559
can even access sensitive information

654
00:23:46,559 --> 00:23:49,279
that you may be storing in your packets

655
00:23:49,279 --> 00:23:50,559
so

656
00:23:50,559 --> 00:23:54,799
these are also threats at runtime right

657
00:23:54,799 --> 00:23:56,880
i don't know if you remember the octa

658
00:23:56,880 --> 00:24:00,000
bridge that it happened two months ago

659
00:24:00,000 --> 00:24:02,240
for those of you who do not know octa is

660
00:24:02,240 --> 00:24:04,640
an identity provider is the one that

661
00:24:04,640 --> 00:24:07,520
avoids us to be able to login every time

662
00:24:07,520 --> 00:24:10,960
we change an application within

663
00:24:10,960 --> 00:24:13,120
our environment well

664
00:24:13,120 --> 00:24:15,840
the community knew about the

665
00:24:15,840 --> 00:24:17,840
falco plugin so they release a new

666
00:24:17,840 --> 00:24:21,039
plugin that you can use the octa

667
00:24:21,039 --> 00:24:24,320
log events so you can detect if

668
00:24:24,320 --> 00:24:26,640
suspicious activity is going on so if

669
00:24:26,640 --> 00:24:29,600
you're an octa user and

670
00:24:29,600 --> 00:24:34,159
you wonder if your credentials were

671
00:24:34,159 --> 00:24:36,080
compromised you can use the plugin to

672
00:24:36,080 --> 00:24:39,679
see if something where is still going on

673
00:24:39,679 --> 00:24:42,000
in your in your account right

674
00:24:42,000 --> 00:24:44,880
uh so everyone can write their own

675
00:24:44,880 --> 00:24:47,200
plugin pretty easy

676
00:24:47,200 --> 00:24:50,480
and then for my last slide i want to go

677
00:24:50,480 --> 00:24:53,200
back to the vulnerability topic here

678
00:24:53,200 --> 00:24:55,760
when i was presenting falco i said that

679
00:24:55,760 --> 00:24:58,320
it's built on top of two open source

680
00:24:58,320 --> 00:25:00,480
libraries well you can use those

681
00:25:00,480 --> 00:25:02,240
libraries

682
00:25:02,240 --> 00:25:05,360
as a baseline for very cool projects and

683
00:25:05,360 --> 00:25:07,279
if you want to know more about these

684
00:25:07,279 --> 00:25:10,000
projects uh talk to me after

685
00:25:10,000 --> 00:25:12,080
but today i'm just bringing one of the

686
00:25:12,080 --> 00:25:15,360
possibilities and it is using those

687
00:25:15,360 --> 00:25:19,120
libraries as a runtime intelligence

688
00:25:19,120 --> 00:25:22,240
data source runtime intelligence is a

689
00:25:22,240 --> 00:25:24,799
technique that brings intelligence

690
00:25:24,799 --> 00:25:27,760
knowledge about the behavior of the

691
00:25:27,760 --> 00:25:30,240
software of the workloads at runtime

692
00:25:30,240 --> 00:25:31,600
right so

693
00:25:31,600 --> 00:25:34,080
with that you

694
00:25:34,080 --> 00:25:34,960
can

695
00:25:34,960 --> 00:25:38,400
get information about the commands that

696
00:25:38,400 --> 00:25:41,840
are being used packages libraries that

697
00:25:41,840 --> 00:25:45,760
are loaded in memory so if you

698
00:25:45,760 --> 00:25:48,960
deal with the vulnerability nightmare

699
00:25:48,960 --> 00:25:51,840
right of having to fix vulnerabilities

700
00:25:51,840 --> 00:25:54,159
and and

701
00:25:54,159 --> 00:25:56,880
prioritize different tasks maybe it's a

702
00:25:56,880 --> 00:25:59,200
good idea you take this in consideration

703
00:25:59,200 --> 00:26:02,880
because uh it will help you um

704
00:26:02,880 --> 00:26:06,159
prioritizing risk and just focusing on

705
00:26:06,159 --> 00:26:07,919
what you really

706
00:26:07,919 --> 00:26:09,600
need to to

707
00:26:09,600 --> 00:26:12,799
fix right it can ask i can answer things

708
00:26:12,799 --> 00:26:14,480
like um

709
00:26:14,480 --> 00:26:17,600
for all the libraries that you have in

710
00:26:17,600 --> 00:26:20,559
an application how many of those are

711
00:26:20,559 --> 00:26:23,200
really loaded in memory because at the

712
00:26:23,200 --> 00:26:25,840
end they're not as many as we think and

713
00:26:25,840 --> 00:26:27,360
then for the ones that are loaded in

714
00:26:27,360 --> 00:26:30,640
memory how many of those have an actual

715
00:26:30,640 --> 00:26:33,279
exploit because sometimes cves are

716
00:26:33,279 --> 00:26:36,159
published more like a theoretical thread

717
00:26:36,159 --> 00:26:39,120
but in reality there's no exploit on it

718
00:26:39,120 --> 00:26:41,600
so just focus on the ones that can

719
00:26:41,600 --> 00:26:44,480
really pose a risk to your workloads

720
00:26:44,480 --> 00:26:46,880
and uh also

721
00:26:46,880 --> 00:26:48,080
when we think about fixing

722
00:26:48,080 --> 00:26:50,240
vulnerabilities what we need is like a

723
00:26:50,240 --> 00:26:53,200
new fits a new package version right so

724
00:26:53,200 --> 00:26:54,559
again if

725
00:26:54,559 --> 00:26:56,720
that package that is loaded in memory

726
00:26:56,720 --> 00:26:59,200
that has an exploit if it doesn't have a

727
00:26:59,200 --> 00:27:01,760
fix i'm not saying you should forget but

728
00:27:01,760 --> 00:27:04,960
you can use that information to you know

729
00:27:04,960 --> 00:27:07,360
clear some of the noise that you have in

730
00:27:07,360 --> 00:27:09,279
your uh super long list of

731
00:27:09,279 --> 00:27:11,120
vulnerabilities to fix

732
00:27:11,120 --> 00:27:14,640
and with that i think we're done and we

733
00:27:14,640 --> 00:27:17,120
made it

734
00:27:17,120 --> 00:27:21,479
okay thank you very much

735
00:27:24,480 --> 00:27:26,480
what are we finding yeah yeah this was

736
00:27:26,480 --> 00:27:28,960
really nice talk uh

737
00:27:28,960 --> 00:27:30,960
any questions from the audience i think

738
00:27:30,960 --> 00:27:32,840
we have time for maybe couple of

739
00:27:32,840 --> 00:27:36,000
questions i didn't use them

740
00:27:37,360 --> 00:27:38,799
well we'll be our we will be in our

741
00:27:38,799 --> 00:27:40,559
booths uh throughout the week so right

742
00:27:40,559 --> 00:27:42,559
next to each other sneak in sustain so

743
00:27:42,559 --> 00:27:44,720
come see us yeah okay yeah thank you

744
00:27:44,720 --> 00:27:47,760
thanks eric thanks

