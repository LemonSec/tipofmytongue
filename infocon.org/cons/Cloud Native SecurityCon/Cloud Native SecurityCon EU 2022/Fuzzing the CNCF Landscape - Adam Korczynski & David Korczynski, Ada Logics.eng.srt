1
00:00:00,160 --> 00:00:01,839
okay good morning everyone thank you

2
00:00:01,839 --> 00:00:03,919
very much for coming to our talk on

3
00:00:03,919 --> 00:00:07,200
fussing the cncf's landscape

4
00:00:07,200 --> 00:00:10,160
my name is adam and i work with david at

5
00:00:10,160 --> 00:00:11,840
adalogix

6
00:00:11,840 --> 00:00:14,719
and over the course of the almost la of

7
00:00:14,719 --> 00:00:16,480
the last almost two years we have been

8
00:00:16,480 --> 00:00:17,600
working

9
00:00:17,600 --> 00:00:20,000
on securing and

10
00:00:20,000 --> 00:00:21,840
we have been working on improving the

11
00:00:21,840 --> 00:00:23,760
security posture of

12
00:00:23,760 --> 00:00:28,240
cncf projects by way of fosting

13
00:00:28,960 --> 00:00:31,840
the work has been funded by

14
00:00:31,840 --> 00:00:34,960
the cncf and in this talk we will

15
00:00:34,960 --> 00:00:37,200
present some of the experiences and the

16
00:00:37,200 --> 00:00:39,360
results that have come out of this

17
00:00:39,360 --> 00:00:41,760
and we will

18
00:00:41,760 --> 00:00:42,960
look forward

19
00:00:42,960 --> 00:00:45,920
and consider where we are in the

20
00:00:45,920 --> 00:00:49,760
greater picture of this work

21
00:00:49,760 --> 00:00:52,320
a quick run-through of what we will go

22
00:00:52,320 --> 00:00:55,120
through in this talk

23
00:00:55,120 --> 00:00:56,480
a quick

24
00:00:56,480 --> 00:00:58,239
forcing intro for those that are

25
00:00:58,239 --> 00:01:01,359
unfamiliar with fussing

26
00:01:01,359 --> 00:01:03,760
next we will go through the

27
00:01:03,760 --> 00:01:05,438
oss first project

28
00:01:05,438 --> 00:01:07,920
and why it is so important for the

29
00:01:07,920 --> 00:01:10,560
open source

30
00:01:10,840 --> 00:01:15,200
ecosystem we will touch upon and go into

31
00:01:15,200 --> 00:01:16,080
the

32
00:01:16,080 --> 00:01:21,039
state of forcing cncf projects

33
00:01:23,360 --> 00:01:27,119
and in that regard we will go into how

34
00:01:27,119 --> 00:01:30,159
we how to foster cncf project and how we

35
00:01:30,159 --> 00:01:31,119
approach

36
00:01:31,119 --> 00:01:32,159
that

37
00:01:32,159 --> 00:01:33,439
challenge

38
00:01:33,439 --> 00:01:35,680
and and some of the results that have

39
00:01:35,680 --> 00:01:37,360
come out of this

40
00:01:37,360 --> 00:01:40,880
and lastly we will consider future work

41
00:01:40,880 --> 00:01:41,930
in terms of

42
00:01:41,930 --> 00:01:43,439
[Music]

43
00:01:43,439 --> 00:01:46,000
in the perspective of where we what the

44
00:01:46,000 --> 00:01:48,240
work that has been done now and where we

45
00:01:48,240 --> 00:01:50,799
will be going next

46
00:01:50,799 --> 00:01:52,240
and uh

47
00:01:52,240 --> 00:01:54,079
and also just to note here uh we'll

48
00:01:54,079 --> 00:01:55,759
present a lot of work that we have been

49
00:01:55,759 --> 00:01:57,680
doing but we will also touch upon

50
00:01:57,680 --> 00:02:00,240
projects and data where we are just like

51
00:02:00,240 --> 00:02:02,079
tiny pieces of of the whole puzzle

52
00:02:02,079 --> 00:02:03,920
because there are other people fussing

53
00:02:03,920 --> 00:02:06,000
uh various uncf projects and

54
00:02:06,000 --> 00:02:08,399
they deserve a huge amount of credit in

55
00:02:08,399 --> 00:02:11,599
the data that we show as well

56
00:02:13,280 --> 00:02:15,760
okay so i'm david and i'm going to give

57
00:02:15,760 --> 00:02:18,080
a quick intro to fussing

58
00:02:18,080 --> 00:02:20,720
and the main reason for this is amongst

59
00:02:20,720 --> 00:02:24,480
other reasons to

60
00:02:24,640 --> 00:02:27,120
kind of argue why it's useful to people

61
00:02:27,120 --> 00:02:28,800
who might be interested in fussing but

62
00:02:28,800 --> 00:02:31,200
not but might not believe it's

63
00:02:31,200 --> 00:02:33,040
it's really working

64
00:02:33,040 --> 00:02:33,840
and

65
00:02:33,840 --> 00:02:35,280
how many here are familiar with fussing

66
00:02:35,280 --> 00:02:38,080
how many have heard about it before

67
00:02:38,080 --> 00:02:40,720
okay so around i wanna say 40 or

68
00:02:40,720 --> 00:02:41,840
something

69
00:02:41,840 --> 00:02:42,959
how many have never heard about

70
00:02:42,959 --> 00:02:44,560
fossiling before

71
00:02:44,560 --> 00:02:46,879
okay so certainly i think maybe this

72
00:02:46,879 --> 00:02:49,599
talk is jumping a little bit too too

73
00:02:49,599 --> 00:02:50,959
ahead then

74
00:02:50,959 --> 00:02:51,920
so

75
00:02:51,920 --> 00:02:54,640
so fussing from a high point of view is

76
00:02:54,640 --> 00:02:57,840
like automating test case generation

77
00:02:57,840 --> 00:03:00,319
so it's very similar to

78
00:03:00,319 --> 00:03:02,400
writing test unit tests or integration

79
00:03:02,400 --> 00:03:04,640
tests but it's a way to kind of like

80
00:03:04,640 --> 00:03:06,000
generalize

81
00:03:06,000 --> 00:03:08,239
the input that a test case

82
00:03:08,239 --> 00:03:09,440
uses

83
00:03:09,440 --> 00:03:11,840
so on the left here you see traditional

84
00:03:11,840 --> 00:03:14,400
ways of of of testing

85
00:03:14,400 --> 00:03:16,480
let's say my api

86
00:03:16,480 --> 00:03:18,239
and if you were to test that with

87
00:03:18,239 --> 00:03:20,239
various different inputs you would just

88
00:03:20,239 --> 00:03:22,720
have you know a set of lines in your

89
00:03:22,720 --> 00:03:24,879
code that says that calls my api with

90
00:03:24,879 --> 00:03:27,360
with the different inputs

91
00:03:27,360 --> 00:03:29,200
and the way you would generalize this in

92
00:03:29,200 --> 00:03:31,280
fussing is you would have this

93
00:03:31,280 --> 00:03:33,200
essentially a loop that calls into my

94
00:03:33,200 --> 00:03:35,440
api but instead of giving a specific

95
00:03:35,440 --> 00:03:38,720
input you would just ask the first to

96
00:03:38,720 --> 00:03:40,799
give you this input like

97
00:03:40,799 --> 00:03:43,120
you will ask the first to give you some

98
00:03:43,120 --> 00:03:45,760
input and that will then connect

99
00:03:45,760 --> 00:03:47,280
the point is then that the fossa can

100
00:03:47,280 --> 00:03:49,920
generate all sorts of inputs

101
00:03:49,920 --> 00:03:51,920
and this is um

102
00:03:51,920 --> 00:03:54,480
the input that the fossa will generate

103
00:03:54,480 --> 00:03:56,400
is often considered to be just random

104
00:03:56,400 --> 00:03:58,480
input but in fact it's kind of input

105
00:03:58,480 --> 00:04:01,519
that has been constructed

106
00:04:01,519 --> 00:04:03,760
by way of a very complex system

107
00:04:03,760 --> 00:04:05,760
underneath that is the fussing engine

108
00:04:05,760 --> 00:04:06,560
which

109
00:04:06,560 --> 00:04:09,599
approximates in a sense a very useful

110
00:04:09,599 --> 00:04:11,280
input for for the files that if one can

111
00:04:11,280 --> 00:04:12,959
argue but

112
00:04:12,959 --> 00:04:15,360
how this will look in actual code is

113
00:04:15,360 --> 00:04:17,279
right there so here we have the simplest

114
00:04:17,279 --> 00:04:18,798
case of uh

115
00:04:18,798 --> 00:04:22,240
um flush driver in the go language where

116
00:04:22,240 --> 00:04:24,240
you just have a function called fuss and

117
00:04:24,240 --> 00:04:26,479
this will then be called by the fussing

118
00:04:26,479 --> 00:04:28,320
engine which is kind of like underlying

119
00:04:28,320 --> 00:04:29,440
in your program

120
00:04:29,440 --> 00:04:31,360
with default input and then you just

121
00:04:31,360 --> 00:04:33,840
called my api so this is the exact way

122
00:04:33,840 --> 00:04:35,360
that you would um

123
00:04:35,360 --> 00:04:39,360
write a fossa for my api in golang

124
00:04:39,360 --> 00:04:42,240
so i said before there's this

125
00:04:42,240 --> 00:04:44,479
there's this myth that fussing is just

126
00:04:44,479 --> 00:04:46,720
random input it's not going to work to

127
00:04:46,720 --> 00:04:47,520
my

128
00:04:47,520 --> 00:04:49,360
application that uses highly complex

129
00:04:49,360 --> 00:04:51,440
data data types

130
00:04:51,440 --> 00:04:53,840
and this is a this is kind of like a

131
00:04:53,840 --> 00:04:55,440
response we often hear when we approach

132
00:04:55,440 --> 00:04:58,160
cncf projects especially cncf projects

133
00:04:58,160 --> 00:04:59,280
that are not

134
00:04:59,280 --> 00:05:00,560
that are written in memory safe

135
00:05:00,560 --> 00:05:03,039
languages so in memory unsafe languages

136
00:05:03,039 --> 00:05:05,759
cnc plus plus fusing has been around for

137
00:05:05,759 --> 00:05:07,520
for quite a number of years now years

138
00:05:07,520 --> 00:05:09,280
now i think

139
00:05:09,280 --> 00:05:10,880
fasting was first started around 30

140
00:05:10,880 --> 00:05:13,440
years ago but it has really had this

141
00:05:13,440 --> 00:05:15,600
evolution or resurgence in a sense the

142
00:05:15,600 --> 00:05:16,400
last

143
00:05:16,400 --> 00:05:18,960
15 years or so where this coverage

144
00:05:18,960 --> 00:05:21,600
guided fussing came to be

145
00:05:21,600 --> 00:05:23,280
so we often get this

146
00:05:23,280 --> 00:05:24,880
response when we say we would like to

147
00:05:24,880 --> 00:05:27,600
foster a project we often get a very

148
00:05:27,600 --> 00:05:29,440
sort of critical view from us

149
00:05:29,440 --> 00:05:31,039
it's not going to work because it's just

150
00:05:31,039 --> 00:05:33,600
random testing and it's just a false

151
00:05:33,600 --> 00:05:35,440
notion in a sense

152
00:05:35,440 --> 00:05:37,520
there are hundreds of academic papers in

153
00:05:37,520 --> 00:05:39,919
the last decade exploring how to improve

154
00:05:39,919 --> 00:05:43,680
fussing and it did start 30 years ago

155
00:05:43,680 --> 00:05:46,000
with basically just cutting from random

156
00:05:46,000 --> 00:05:47,840
and using that as input to your program

157
00:05:47,840 --> 00:05:50,160
but that's not how it is anymore it's a

158
00:05:50,160 --> 00:05:54,639
highly structured tools that try to

159
00:05:54,639 --> 00:05:57,280
pick the right inputs to your code such

160
00:05:57,280 --> 00:05:59,600
that you will execute essentially

161
00:05:59,600 --> 00:06:01,280
as much of the underlying code as

162
00:06:01,280 --> 00:06:02,639
possible

163
00:06:02,639 --> 00:06:03,520
and

164
00:06:03,520 --> 00:06:05,120
when i say modern day fosters here i

165
00:06:05,120 --> 00:06:09,120
really refer to coverage-guided fossus

166
00:06:09,120 --> 00:06:09,919
so

167
00:06:09,919 --> 00:06:11,919
like underlying principles in coverage

168
00:06:11,919 --> 00:06:14,479
guided fasting is that you have a given

169
00:06:14,479 --> 00:06:15,520
corpus

170
00:06:15,520 --> 00:06:18,319
which is just a set of test cases

171
00:06:18,319 --> 00:06:20,080
and these are the test cases that you

172
00:06:20,080 --> 00:06:22,400
work from when you want to generate new

173
00:06:22,400 --> 00:06:26,080
input to a a an api

174
00:06:26,080 --> 00:06:27,280
and

175
00:06:27,280 --> 00:06:28,880
the fuzzer will start with a given

176
00:06:28,880 --> 00:06:30,720
corpus it could be just

177
00:06:30,720 --> 00:06:32,160
a random element

178
00:06:32,160 --> 00:06:34,240
and then it will start to exec

179
00:06:34,240 --> 00:06:36,080
and then you will have to compile your

180
00:06:36,080 --> 00:06:38,240
code so your target project that you

181
00:06:38,240 --> 00:06:39,759
want to analyze you have to compile that

182
00:06:39,759 --> 00:06:41,360
in a certain way

183
00:06:41,360 --> 00:06:43,759
such that essentially the compiler can

184
00:06:43,759 --> 00:06:46,639
insert extra code into your program that

185
00:06:46,639 --> 00:06:48,479
the foster will use to

186
00:06:48,479 --> 00:06:51,120
essentially trace execution

187
00:06:51,120 --> 00:06:53,120
in the target and it's then going to use

188
00:06:53,120 --> 00:06:56,240
this i i ability to

189
00:06:56,240 --> 00:06:58,400
track execution in the program to

190
00:06:58,400 --> 00:07:01,039
identify whether a given test case is

191
00:07:01,039 --> 00:07:03,120
good or bad and the way he's going to do

192
00:07:03,120 --> 00:07:05,360
this is it's going to uh

193
00:07:05,360 --> 00:07:08,960
pick c's from the from the corpus

194
00:07:08,960 --> 00:07:11,199
it will execute the program with that

195
00:07:11,199 --> 00:07:13,520
seed and then it will track what was the

196
00:07:13,520 --> 00:07:15,280
kind like let's say let's just call it

197
00:07:15,280 --> 00:07:18,479
execution path of that program okay

198
00:07:18,479 --> 00:07:20,240
then it will save the execution path

199
00:07:20,240 --> 00:07:22,240
into kind of like a set of we have

200
00:07:22,240 --> 00:07:24,880
explored this already then the next time

201
00:07:24,880 --> 00:07:27,199
it will so like just run again

202
00:07:27,199 --> 00:07:30,000
pick a new seed from the corbus mutate

203
00:07:30,000 --> 00:07:32,240
that seed so that means just modified

204
00:07:32,240 --> 00:07:34,560
randomly in a sense and then it will

205
00:07:34,560 --> 00:07:36,639
execute the program again and again

206
00:07:36,639 --> 00:07:37,520
trace

207
00:07:37,520 --> 00:07:39,759
did did we see a new trace in the

208
00:07:39,759 --> 00:07:42,319
program it's not really traces but

209
00:07:42,319 --> 00:07:43,599
i think it's more intuitive to think of

210
00:07:43,599 --> 00:07:44,560
it that way

211
00:07:44,560 --> 00:07:47,520
and if there is a new coverage say a new

212
00:07:47,520 --> 00:07:50,000
trace with this new input then it will

213
00:07:50,000 --> 00:07:52,879
save that seed into the core bus

214
00:07:52,879 --> 00:07:54,720
but if if there isn't

215
00:07:54,720 --> 00:07:56,800
new coverage they will just kind of like

216
00:07:56,800 --> 00:07:58,800
forget about that seed and the main

217
00:07:58,800 --> 00:08:00,319
point is that you

218
00:08:00,319 --> 00:08:03,840
build up this corpus iteratively

219
00:08:03,840 --> 00:08:06,160
where each seed in the corpus

220
00:08:06,160 --> 00:08:08,720
essentially executes the target program

221
00:08:08,720 --> 00:08:10,479
in a unique way

222
00:08:10,479 --> 00:08:11,280
and

223
00:08:11,280 --> 00:08:13,680
the benefit of this is that you will

224
00:08:13,680 --> 00:08:16,639
reduce the complexity for

225
00:08:16,639 --> 00:08:19,039
uh like exploring the code i'm going to

226
00:08:19,039 --> 00:08:20,479
try to argue that through a small

227
00:08:20,479 --> 00:08:21,680
example here

228
00:08:21,680 --> 00:08:23,120
so say for example you have a program

229
00:08:23,120 --> 00:08:24,479
that checks

230
00:08:24,479 --> 00:08:26,800
that has four conditions that checks a

231
00:08:26,800 --> 00:08:27,840
byte

232
00:08:27,840 --> 00:08:31,280
in each like in a given uh data buffer

233
00:08:31,280 --> 00:08:33,440
and if you were to guess

234
00:08:33,440 --> 00:08:34,880
for uh

235
00:08:34,880 --> 00:08:38,399
four bytes correctly say uh a b c d just

236
00:08:38,399 --> 00:08:41,039
four characters you would have a a a an

237
00:08:41,039 --> 00:08:43,599
input space of 2 to 32 because a byte is

238
00:08:43,599 --> 00:08:44,959
8 bits

239
00:08:44,959 --> 00:08:47,519
and 4 bytes is plus 32 bits which is 2

240
00:08:47,519 --> 00:08:48,800
to 32

241
00:08:48,800 --> 00:08:50,480
but because we have this notion of core

242
00:08:50,480 --> 00:08:52,880
bus and coverage guided we have to guess

243
00:08:52,880 --> 00:08:55,839
each byte essentially one at the time

244
00:08:55,839 --> 00:08:57,200
and

245
00:08:57,200 --> 00:08:59,120
when we are to guess one byte there's

246
00:08:59,120 --> 00:09:01,440
two to the eighth chances of getting it

247
00:09:01,440 --> 00:09:04,160
correctly okay so that's

248
00:09:04,160 --> 00:09:04,959
one

249
00:09:04,959 --> 00:09:07,200
uh that's you have a chance of one out

250
00:09:07,200 --> 00:09:10,000
of 256 to guess the first bite correctly

251
00:09:10,000 --> 00:09:11,440
so let's say we get the first bite

252
00:09:11,440 --> 00:09:13,519
correctly then we save that seed in our

253
00:09:13,519 --> 00:09:15,600
corbus and we just call our current seed

254
00:09:15,600 --> 00:09:17,680
so like at data buffer with a and then

255
00:09:17,680 --> 00:09:19,519
we have to guess the next one and that's

256
00:09:19,519 --> 00:09:20,399
again

257
00:09:20,399 --> 00:09:22,160
to guess the next byte we again have a

258
00:09:22,160 --> 00:09:25,200
chance of one of 256 of guessing it

259
00:09:25,200 --> 00:09:26,399
correctly

260
00:09:26,399 --> 00:09:28,320
and that kind of keeps going

261
00:09:28,320 --> 00:09:30,000
until we have guest

262
00:09:30,000 --> 00:09:32,000
abcd correctly

263
00:09:32,000 --> 00:09:34,000
and again the reason we do that is

264
00:09:34,000 --> 00:09:36,640
because we save whenever we see that we

265
00:09:36,640 --> 00:09:38,320
guessed it correctly we save that and we

266
00:09:38,320 --> 00:09:41,279
move on to guess the next byte

267
00:09:41,279 --> 00:09:43,360
so the point is that we have we have to

268
00:09:43,360 --> 00:09:45,040
guess a maximum

269
00:09:45,040 --> 00:09:47,360
256 times four times

270
00:09:47,360 --> 00:09:50,399
which is 1024 which is much less than 2

271
00:09:50,399 --> 00:09:52,160
to 32.

272
00:09:52,160 --> 00:09:53,600
and that's kind of the ideas behind

273
00:09:53,600 --> 00:09:55,360
coverage guided fusing and why it

274
00:09:55,360 --> 00:09:57,760
reduces the complexity of exploring a

275
00:09:57,760 --> 00:10:00,720
program from just random guessing

276
00:10:00,720 --> 00:10:01,839
and this is

277
00:10:01,839 --> 00:10:04,160
this this thing is called coverage

278
00:10:04,160 --> 00:10:05,360
guided fusing and that's kind of like

279
00:10:05,360 --> 00:10:07,120
one of the breakthroughs and fussing

280
00:10:07,120 --> 00:10:08,959
that essentially made it much more

281
00:10:08,959 --> 00:10:11,839
applicable and what almost everybody

282
00:10:11,839 --> 00:10:14,240
uses today

283
00:10:14,240 --> 00:10:15,279
okay

284
00:10:15,279 --> 00:10:16,399
so

285
00:10:16,399 --> 00:10:19,279
which box can you uncover with fussing

286
00:10:19,279 --> 00:10:21,680
fundamentally faucets are just test case

287
00:10:21,680 --> 00:10:24,160
generators they explore the code they

288
00:10:24,160 --> 00:10:26,160
don't actually detect the box

289
00:10:26,160 --> 00:10:27,839
the thing that detects the box is just

290
00:10:27,839 --> 00:10:30,399
what how the program executes

291
00:10:30,399 --> 00:10:32,320
and we then have this concept of

292
00:10:32,320 --> 00:10:35,200
sanitizers in memory safe languages and

293
00:10:35,200 --> 00:10:36,880
these sanitizers are essentially kind of

294
00:10:36,880 --> 00:10:38,800
like block oracles that you compile into

295
00:10:38,800 --> 00:10:40,560
your code which can check for things

296
00:10:40,560 --> 00:10:42,320
such as

297
00:10:42,320 --> 00:10:44,240
buffer overflows

298
00:10:44,240 --> 00:10:46,480
valid invalid dereferences

299
00:10:46,480 --> 00:10:48,320
and use after freeze and all these kind

300
00:10:48,320 --> 00:10:50,240
of things which are common things in in

301
00:10:50,240 --> 00:10:52,959
memory safe memory unsafe languages

302
00:10:52,959 --> 00:10:54,720
in memory safe languages which is what

303
00:10:54,720 --> 00:10:56,399
most of the cncf projects have written

304
00:10:56,399 --> 00:10:58,800
in in particular go you will you will be

305
00:10:58,800 --> 00:11:00,320
finding you you essentially don't have

306
00:11:00,320 --> 00:11:02,480
sanitizers so the things that you find

307
00:11:02,480 --> 00:11:04,640
at the moment are stuff such as encore

308
00:11:04,640 --> 00:11:06,640
encode exceptions out of bounds

309
00:11:06,640 --> 00:11:09,120
nail pointed references timeouts

310
00:11:09,120 --> 00:11:11,360
in some sense deadlocks and other memory

311
00:11:11,360 --> 00:11:13,120
issues and these are kind of the things

312
00:11:13,120 --> 00:11:14,800
you can expect when you fast when you

313
00:11:14,800 --> 00:11:17,920
fuss a a a golang project you can also

314
00:11:17,920 --> 00:11:19,600
do various things such as behavioral

315
00:11:19,600 --> 00:11:21,200
testing but i don't think i will go into

316
00:11:21,200 --> 00:11:22,640
that now

317
00:11:22,640 --> 00:11:24,320
um but point being

318
00:11:24,320 --> 00:11:25,279
uh

319
00:11:25,279 --> 00:11:27,760
you can expect you the fastest will not

320
00:11:27,760 --> 00:11:29,839
detect an issue in itself it's actually

321
00:11:29,839 --> 00:11:31,760
when the pro you will just explore the

322
00:11:31,760 --> 00:11:32,959
program the various ways that it

323
00:11:32,959 --> 00:11:35,120
executes and then potentially you will

324
00:11:35,120 --> 00:11:36,959
find that if you execute it this way it

325
00:11:36,959 --> 00:11:38,079
will throw and they'll point at their

326
00:11:38,079 --> 00:11:40,480
reference

327
00:11:40,480 --> 00:11:41,279
okay

328
00:11:41,279 --> 00:11:43,760
so fusses are pretty complex to to to

329
00:11:43,760 --> 00:11:45,120
manage

330
00:11:45,120 --> 00:11:47,279
uh as i said we need to have this core

331
00:11:47,279 --> 00:11:48,560
bus and

332
00:11:48,560 --> 00:11:50,639
we the faster will build up the corpus

333
00:11:50,639 --> 00:11:53,200
over time as it explores the code

334
00:11:53,200 --> 00:11:55,040
and that also means

335
00:11:55,040 --> 00:11:57,440
you shouldn't run the fuzzer from an

336
00:11:57,440 --> 00:11:59,279
empty corbus whenever you run it you

337
00:11:59,279 --> 00:12:00,800
kind of have to incrementally build it

338
00:12:00,800 --> 00:12:03,519
up over like each day over the years and

339
00:12:03,519 --> 00:12:04,480
so on

340
00:12:04,480 --> 00:12:06,480
and there's also a lot of other issues

341
00:12:06,480 --> 00:12:09,279
that comes with managing fuses such as

342
00:12:09,279 --> 00:12:10,399
you know how do you keep track of all

343
00:12:10,399 --> 00:12:13,040
the bugs how do you report things and

344
00:12:13,040 --> 00:12:14,639
how do you share results between

345
00:12:14,639 --> 00:12:15,760
everybody

346
00:12:15,760 --> 00:12:18,720
and this is what we have oss was for so

347
00:12:18,720 --> 00:12:20,880
oss first is a

348
00:12:20,880 --> 00:12:23,839
service run by google which is oss i

349
00:12:23,839 --> 00:12:26,399
think it's open source

350
00:12:26,399 --> 00:12:28,720
software first thing thank you and it's

351
00:12:28,720 --> 00:12:30,880
essentially a git repository where you

352
00:12:30,880 --> 00:12:32,399
upload

353
00:12:32,399 --> 00:12:35,279
a docker file you upload a build script

354
00:12:35,279 --> 00:12:37,440
and then you to a given folder in this

355
00:12:37,440 --> 00:12:39,920
github repository and then google will

356
00:12:39,920 --> 00:12:41,519
just start running all the files that

357
00:12:41,519 --> 00:12:44,000
the given build script will build

358
00:12:44,000 --> 00:12:46,399
so this is where the vast majority of

359
00:12:46,399 --> 00:12:48,079
open source projects are being fussed by

360
00:12:48,079 --> 00:12:50,720
way off now and i think that ocs first

361
00:12:50,720 --> 00:12:53,279
has around 600 open source projects so

362
00:12:53,279 --> 00:12:55,200
essentially all the the very security

363
00:12:55,200 --> 00:12:56,720
critical ones and all the ones that we

364
00:12:56,720 --> 00:12:57,839
will be talking about this case in in

365
00:12:57,839 --> 00:13:00,320
this talk is also on those sensors

366
00:13:00,320 --> 00:13:02,160
and yeah we have a link here to how to

367
00:13:02,160 --> 00:13:04,240
integrate into ocs first

368
00:13:04,240 --> 00:13:05,680
please check it out

369
00:13:05,680 --> 00:13:08,000
oss first might be a little bit large

370
00:13:08,000 --> 00:13:09,440
because there's a

371
00:13:09,440 --> 00:13:11,519
it's just it's just in a sense a big big

372
00:13:11,519 --> 00:13:13,120
framework that that lies on the

373
00:13:13,120 --> 00:13:15,680
underneath it and some maintainers are

374
00:13:15,680 --> 00:13:16,959
actually not that interested in getting

375
00:13:16,959 --> 00:13:18,639
into us oss first because they feel it's

376
00:13:18,639 --> 00:13:20,800
a little bit too heavy

377
00:13:20,800 --> 00:13:22,560
the same developers of oss first has

378
00:13:22,560 --> 00:13:24,160
developed this concept called clusterful

379
00:13:24,160 --> 00:13:26,800
slide which essentially runs and manages

380
00:13:26,800 --> 00:13:28,959
all of your fusses in your ci and you

381
00:13:28,959 --> 00:13:30,800
don't have to uh

382
00:13:30,800 --> 00:13:32,639
to like do the whole integration into

383
00:13:32,639 --> 00:13:34,399
ourselves first and clusterful slide is

384
00:13:34,399 --> 00:13:36,160
also straightforward to integrate into

385
00:13:36,160 --> 00:13:38,079
your project so if you're an open source

386
00:13:38,079 --> 00:13:42,000
maintainer or similar check it out

387
00:13:42,000 --> 00:13:42,800
okay

388
00:13:42,800 --> 00:13:44,560
so uh

389
00:13:44,560 --> 00:13:46,720
i think i've already talked about this

390
00:13:46,720 --> 00:13:48,800
let's now talk about the cncf landscape

391
00:13:48,800 --> 00:13:51,439
being fast

392
00:13:54,079 --> 00:13:56,079
so yeah so here we see an overview of

393
00:13:56,079 --> 00:13:57,839
the cncf projects that are currently

394
00:13:57,839 --> 00:14:00,839
integrated in towards espos

395
00:14:00,839 --> 00:14:02,639
and a

396
00:14:02,639 --> 00:14:05,680
quick note istio will also fall on this

397
00:14:05,680 --> 00:14:08,399
list once it joins

398
00:14:08,399 --> 00:14:10,240
ideologics we have written a lot of

399
00:14:10,240 --> 00:14:12,720
fossils for istio which also has

400
00:14:12,720 --> 00:14:15,120
resulted in a high severity finding

401
00:14:15,120 --> 00:14:16,560
we have a blog post about that on our

402
00:14:16,560 --> 00:14:18,560
blog it's a pretty interesting case if

403
00:14:18,560 --> 00:14:20,800
you are a go developer

404
00:14:20,800 --> 00:14:23,360
so i encourage you to check that out

405
00:14:23,360 --> 00:14:25,920
there might be a cncf

406
00:14:25,920 --> 00:14:27,839
project at least i can think of at least

407
00:14:27,839 --> 00:14:29,040
one that

408
00:14:29,040 --> 00:14:31,600
do have fosters and do a pretty good job

409
00:14:31,600 --> 00:14:34,320
at writing forces

410
00:14:34,320 --> 00:14:36,560
and maintaining them and making sure

411
00:14:36,560 --> 00:14:38,480
that they are not broken

412
00:14:38,480 --> 00:14:40,160
but

413
00:14:40,160 --> 00:14:44,240
not all cncf projects that do uh

414
00:14:44,240 --> 00:14:46,560
maintain a fussing suite integrated into

415
00:14:46,560 --> 00:14:49,440
a ss first and because of that it's it's

416
00:14:49,440 --> 00:14:51,279
uh

417
00:14:51,279 --> 00:14:53,519
it's a little um

418
00:14:53,519 --> 00:14:55,760
difficult to say that

419
00:14:55,760 --> 00:14:57,120
that they that these projects are

420
00:14:57,120 --> 00:14:59,519
running their fossils correctly

421
00:14:59,519 --> 00:15:01,680
for the reasons that david

422
00:15:01,680 --> 00:15:03,040
mentioned because running the

423
00:15:03,040 --> 00:15:04,880
phosphorous especially once you get

424
00:15:04,880 --> 00:15:07,199
start having 10 20 30 fossa's in your

425
00:15:07,199 --> 00:15:09,760
system in your project

426
00:15:09,760 --> 00:15:11,519
it becomes a very complex task to run

427
00:15:11,519 --> 00:15:13,199
these fossils so

428
00:15:13,199 --> 00:15:15,519
if you can think of a project here that

429
00:15:15,519 --> 00:15:16,890
do a good job at

430
00:15:16,890 --> 00:15:18,320
[Music]

431
00:15:18,320 --> 00:15:20,399
maintaining a fusing suite but it's not

432
00:15:20,399 --> 00:15:22,560
on this list that is the reason

433
00:15:22,560 --> 00:15:25,120
and if you are such a project please

434
00:15:25,120 --> 00:15:26,639
reach out to us and we'll be happy to

435
00:15:26,639 --> 00:15:28,480
integrate your project into assess first

436
00:15:28,480 --> 00:15:30,480
for you

437
00:15:30,480 --> 00:15:33,120
so let's talk about how to foster a cncf

438
00:15:33,120 --> 00:15:35,199
project and this is the approach that we

439
00:15:35,199 --> 00:15:36,230
take

440
00:15:36,230 --> 00:15:38,560
[Music]

441
00:15:38,560 --> 00:15:39,360
yeah

442
00:15:39,360 --> 00:15:42,320
that is our practical uh approach uh to

443
00:15:42,320 --> 00:15:43,440
pretty much

444
00:15:43,440 --> 00:15:46,800
all cncf projects that we approach that

445
00:15:46,800 --> 00:15:49,120
uh have done no prior work uh with

446
00:15:49,120 --> 00:15:51,759
forcing uh david mentioned we have

447
00:15:51,759 --> 00:15:53,519
worked on some projects that have worked

448
00:15:53,519 --> 00:15:55,120
on forcing for years

449
00:15:55,120 --> 00:15:56,410
um and

450
00:15:56,410 --> 00:15:57,759
[Music]

451
00:15:57,759 --> 00:15:58,790
that

452
00:15:58,790 --> 00:16:00,079
[Music]

453
00:16:00,079 --> 00:16:02,160
that is another story so so this is more

454
00:16:02,160 --> 00:16:04,880
in terms of taking a project from zero

455
00:16:04,880 --> 00:16:07,600
to having a pretty solid fussing setup

456
00:16:07,600 --> 00:16:09,759
so we start with an initial integration

457
00:16:09,759 --> 00:16:10,880
and

458
00:16:10,880 --> 00:16:13,920
to us that means um we start by writing

459
00:16:13,920 --> 00:16:16,000
a few initial forces

460
00:16:16,000 --> 00:16:18,480
and merge them into the cncf fussing

461
00:16:18,480 --> 00:16:21,839
repository where we maintain all fossa's

462
00:16:21,839 --> 00:16:23,360
that we write

463
00:16:23,360 --> 00:16:24,399
for

464
00:16:24,399 --> 00:16:27,440
for the cncf projects

465
00:16:27,440 --> 00:16:29,680
we are we open for contributions there

466
00:16:29,680 --> 00:16:31,040
and

467
00:16:31,040 --> 00:16:33,040
please check it out if you if you if you

468
00:16:33,040 --> 00:16:34,160
wish to

469
00:16:34,160 --> 00:16:35,360
next we

470
00:16:35,360 --> 00:16:37,440
integrate the project into oss first so

471
00:16:37,440 --> 00:16:39,440
the fossils run continuously

472
00:16:39,440 --> 00:16:42,399
and on in the oces force integration we

473
00:16:42,399 --> 00:16:45,199
instruct um voices first to

474
00:16:45,199 --> 00:16:47,360
put the latest master branch or release

475
00:16:47,360 --> 00:16:48,880
branch and

476
00:16:48,880 --> 00:16:50,800
pull the faucets from the cncf fusion

477
00:16:50,800 --> 00:16:53,759
repository so that

478
00:16:53,759 --> 00:16:56,160
so that we can work uh on

479
00:16:56,160 --> 00:16:58,079
the forces through the cncf fusing

480
00:16:58,079 --> 00:17:00,480
repository and oss first will catch

481
00:17:00,480 --> 00:17:02,839
those updates

482
00:17:02,839 --> 00:17:05,199
continuously uh the next step is we

483
00:17:05,199 --> 00:17:07,679
write a lot of us to to get coverage up

484
00:17:07,679 --> 00:17:08,959
and uh

485
00:17:08,959 --> 00:17:10,160
um

486
00:17:10,160 --> 00:17:13,039
yeah i mean at this point we we we have

487
00:17:13,039 --> 00:17:15,359
made the initial integration and

488
00:17:15,359 --> 00:17:18,160
uh we the next step is really to

489
00:17:18,160 --> 00:17:20,079
increase coverage of the whole project

490
00:17:20,079 --> 00:17:23,359
starting with complex

491
00:17:23,359 --> 00:17:26,000
parts of the code base

492
00:17:26,000 --> 00:17:28,079
finally we

493
00:17:28,079 --> 00:17:30,960
we work on delivering this over to the

494
00:17:30,960 --> 00:17:33,520
project maintainers and owners and if we

495
00:17:33,520 --> 00:17:37,280
the goal on this final step is to

496
00:17:37,280 --> 00:17:39,919
make the owners take charge of the the

497
00:17:39,919 --> 00:17:41,840
process the project owners take charge

498
00:17:41,840 --> 00:17:45,200
of the fusing from here we want it is

499
00:17:45,200 --> 00:17:47,650
our goal that it is the project's uh

500
00:17:47,650 --> 00:17:49,840
[Music]

501
00:17:49,840 --> 00:17:51,600
it is the projects uh

502
00:17:51,600 --> 00:17:53,360
that that they take complete ownership

503
00:17:53,360 --> 00:17:54,640
and they can do whatever they want the

504
00:17:54,640 --> 00:17:57,760
lead fosters modify fosters if they if

505
00:17:57,760 --> 00:17:59,360
they see it fit

506
00:17:59,360 --> 00:18:01,440
um and and in this

507
00:18:01,440 --> 00:18:03,919
step here step three we work with the

508
00:18:03,919 --> 00:18:06,320
projects on doing that

509
00:18:06,320 --> 00:18:07,760
so there are some pros and cons of

510
00:18:07,760 --> 00:18:09,760
having someone like ossa data logics

511
00:18:09,760 --> 00:18:12,240
integrate a cncf project uh

512
00:18:12,240 --> 00:18:14,320
integrate fusing into our cncf project

513
00:18:14,320 --> 00:18:16,960
and one of one of the pros is that we

514
00:18:16,960 --> 00:18:18,320
have a lot of

515
00:18:18,320 --> 00:18:19,919
experience with fussing

516
00:18:19,919 --> 00:18:21,600
uh i think a datalogics we have

517
00:18:21,600 --> 00:18:24,160
contributed fosus to more than 200 open

518
00:18:24,160 --> 00:18:25,039
source

519
00:18:25,039 --> 00:18:27,039
security projects sorry open source

520
00:18:27,039 --> 00:18:30,799
projects um so and we have you know gone

521
00:18:30,799 --> 00:18:33,200
down rabbit holes we have seen what uh

522
00:18:33,200 --> 00:18:35,360
you know what how how to quickly get

523
00:18:35,360 --> 00:18:38,720
from zero to one um and effectively

524
00:18:38,720 --> 00:18:41,440
but of course we don't have the year

525
00:18:41,440 --> 00:18:43,440
months and years of experience that the

526
00:18:43,440 --> 00:18:45,679
project maintainers do

527
00:18:45,679 --> 00:18:47,919
and

528
00:18:48,480 --> 00:18:50,080
yeah naturally

529
00:18:50,080 --> 00:18:51,760
on the third one as well

530
00:18:51,760 --> 00:18:54,080
maintainers don't have

531
00:18:54,080 --> 00:18:56,270
that much time to first

532
00:18:56,270 --> 00:18:57,520
[Music]

533
00:18:57,520 --> 00:18:59,840
you know learn about fossiling and how

534
00:18:59,840 --> 00:19:01,039
to uh

535
00:19:01,039 --> 00:19:04,160
best integrate it into that project um

536
00:19:04,160 --> 00:19:06,160
they have plenty to do already

537
00:19:06,160 --> 00:19:09,200
um i believe we had a project where they

538
00:19:09,200 --> 00:19:11,840
had had had a github issue

539
00:19:11,840 --> 00:19:14,080
uh on um the fact that they should

540
00:19:14,080 --> 00:19:15,679
integrate fussing into that project for

541
00:19:15,679 --> 00:19:18,320
two years this this issue had been open

542
00:19:18,320 --> 00:19:19,919
and um

543
00:19:19,919 --> 00:19:21,760
at data logic we were able to pretty

544
00:19:21,760 --> 00:19:25,039
quickly get fusing started and

545
00:19:25,039 --> 00:19:27,200
the the engagement resulted in a high

546
00:19:27,200 --> 00:19:30,080
severity cv

547
00:19:30,480 --> 00:19:31,700
so yeah um

548
00:19:31,700 --> 00:19:34,829
[Music]

549
00:19:35,919 --> 00:19:38,559
yeah i think that's it for this one uh

550
00:19:38,559 --> 00:19:41,200
yeah so so in in terms of uh the last

551
00:19:41,200 --> 00:19:43,440
step in the process of integrating of uh

552
00:19:43,440 --> 00:19:45,600
working with the cncf projects

553
00:19:45,600 --> 00:19:48,080
uh a few things that we do uh when we

554
00:19:48,080 --> 00:19:49,760
when we wish to hand over the fusing

555
00:19:49,760 --> 00:19:52,000
suites to the projects themselves is

556
00:19:52,000 --> 00:19:55,280
that we encourage so uh we work from

557
00:19:55,280 --> 00:19:58,880
the cnc cncf fusion repo initially and

558
00:19:58,880 --> 00:20:00,480
we encourage the maintainers to move the

559
00:20:00,480 --> 00:20:03,360
forces upstream to

560
00:20:03,360 --> 00:20:07,200
integrate into the test suite ci

561
00:20:07,200 --> 00:20:09,679
nightly builds etc

562
00:20:09,679 --> 00:20:11,679
and

563
00:20:11,679 --> 00:20:14,559
which will make maintenance

564
00:20:14,559 --> 00:20:16,240
easier and

565
00:20:16,240 --> 00:20:17,440
should

566
00:20:17,440 --> 00:20:19,760
help the projects avoid downtime in

567
00:20:19,760 --> 00:20:22,480
their in their forces

568
00:20:22,480 --> 00:20:24,159
there will often be a

569
00:20:24,159 --> 00:20:25,840
a list of bugs

570
00:20:25,840 --> 00:20:27,440
found in in this

571
00:20:27,440 --> 00:20:29,520
engagement and

572
00:20:29,520 --> 00:20:31,679
osspos has capabilities to reproduce

573
00:20:31,679 --> 00:20:33,440
these very easily and

574
00:20:33,440 --> 00:20:35,039
this this

575
00:20:35,039 --> 00:20:36,559
this will

576
00:20:36,559 --> 00:20:38,080
be something that will help projects

577
00:20:38,080 --> 00:20:39,039
with

578
00:20:39,039 --> 00:20:42,159
we encourage uh projects to write fosus

579
00:20:42,159 --> 00:20:44,080
specific for that

580
00:20:44,080 --> 00:20:46,240
project

581
00:20:46,240 --> 00:20:48,559
and simply simply further develop the

582
00:20:48,559 --> 00:20:50,559
whole uh forcing setup

583
00:20:50,559 --> 00:20:52,880
how how the project see fit

584
00:20:52,880 --> 00:20:55,760
a quick note on if on our gopher's

585
00:20:55,760 --> 00:20:57,440
header

586
00:20:57,440 --> 00:20:59,919
project if you are a

587
00:20:59,919 --> 00:21:01,360
project that

588
00:21:01,360 --> 00:21:03,520
is that is implemented in go we have a

589
00:21:03,520 --> 00:21:04,559
very

590
00:21:04,559 --> 00:21:06,799
neat little

591
00:21:06,799 --> 00:21:08,640
library here that makes it quite easy to

592
00:21:08,640 --> 00:21:11,200
for structured data types

593
00:21:11,200 --> 00:21:13,360
you simply

594
00:21:13,360 --> 00:21:15,679
initiate a

595
00:21:15,679 --> 00:21:18,080
consumer where you after which you can

596
00:21:18,080 --> 00:21:20,480
quickly create random

597
00:21:20,480 --> 00:21:23,280
or pseudo-random

598
00:21:23,280 --> 00:21:26,480
versions of structs maps slices and much

599
00:21:26,480 --> 00:21:29,360
more so a quick note on that if you wish

600
00:21:29,360 --> 00:21:31,760
to use that

601
00:21:31,760 --> 00:21:33,039
okay so

602
00:21:33,039 --> 00:21:34,640
hello hello

603
00:21:34,640 --> 00:21:36,720
all right so um you can fast a lot of

604
00:21:36,720 --> 00:21:38,559
different projects written in a lot of

605
00:21:38,559 --> 00:21:40,240
different languages and essentially oss

606
00:21:40,240 --> 00:21:41,840
first supports all

607
00:21:41,840 --> 00:21:44,400
supports projects within golang cnc plus

608
00:21:44,400 --> 00:21:47,520
rust python and java java

609
00:21:47,520 --> 00:21:50,880
and the bugs you look for in various

610
00:21:50,880 --> 00:21:52,080
the box you look for in a project kind

611
00:21:52,080 --> 00:21:54,159
of depends on the language that you are

612
00:21:54,159 --> 00:21:55,200
fussing

613
00:21:55,200 --> 00:21:56,159
and

614
00:21:56,159 --> 00:21:57,440
threat models of the projects that you

615
00:21:57,440 --> 00:21:59,919
are fussing may not always be present so

616
00:21:59,919 --> 00:22:01,679
you can go multiple ways when you are to

617
00:22:01,679 --> 00:22:03,440
say foster project you can either kind

618
00:22:03,440 --> 00:22:04,400
of like

619
00:22:04,400 --> 00:22:06,400
extrapolate from the testing suite that

620
00:22:06,400 --> 00:22:07,919
they have you can you can try to

621
00:22:07,919 --> 00:22:09,679
identify the whole and the result of

622
00:22:09,679 --> 00:22:11,520
that is that you will find most likely a

623
00:22:11,520 --> 00:22:13,360
lot of bugs but may not be securely

624
00:22:13,360 --> 00:22:15,280
relevant bucks because you might not so

625
00:22:15,280 --> 00:22:18,000
like attack the threat model in a sense

626
00:22:18,000 --> 00:22:19,520
um and

627
00:22:19,520 --> 00:22:21,440
ccf projects are often written in memory

628
00:22:21,440 --> 00:22:23,520
saved languages which means that if you

629
00:22:23,520 --> 00:22:26,400
are looking to fast cncf projects most

630
00:22:26,400 --> 00:22:28,799
likely you will turn into go or

631
00:22:28,799 --> 00:22:31,760
say mainly go to be honest

632
00:22:31,760 --> 00:22:33,440
but at the same time even if you are

633
00:22:33,440 --> 00:22:35,360
fussing a project written in goal line

634
00:22:35,360 --> 00:22:37,200
you can always look for the dependencies

635
00:22:37,200 --> 00:22:40,159
of a given project so for example flux

636
00:22:40,159 --> 00:22:41,120
it's a

637
00:22:41,120 --> 00:22:43,679
git ups tool that is based on that it's

638
00:22:43,679 --> 00:22:45,679
written in go and it's a so like a bunch

639
00:22:45,679 --> 00:22:48,000
of custom kubernetes operators

640
00:22:48,000 --> 00:22:49,520
controllers sorry

641
00:22:49,520 --> 00:22:50,320
and

642
00:22:50,320 --> 00:22:51,679
that depends

643
00:22:51,679 --> 00:22:54,480
flux depends on the other go project

644
00:22:54,480 --> 00:22:57,120
called get to go and get to go itself

645
00:22:57,120 --> 00:22:58,799
depends on the library called libgit

646
00:22:58,799 --> 00:23:02,320
which has sixty thousand lines of c of c

647
00:23:02,320 --> 00:23:04,000
or super splash code i can't remember

648
00:23:04,000 --> 00:23:06,799
which essentially means even if you are

649
00:23:06,799 --> 00:23:09,360
just interested in fussing memory unsafe

650
00:23:09,360 --> 00:23:12,640
projects you can still go for a lot of

651
00:23:12,640 --> 00:23:13,600
um

652
00:23:13,600 --> 00:23:15,360
say cncf projects that may not be

653
00:23:15,360 --> 00:23:16,640
written in

654
00:23:16,640 --> 00:23:18,240
memory unsafe languages because they

655
00:23:18,240 --> 00:23:20,880
will have dependencies to memory unsafe

656
00:23:20,880 --> 00:23:22,880
languages

657
00:23:22,880 --> 00:23:24,880
okay so what are the results here and

658
00:23:24,880 --> 00:23:26,080
the results we are going to present in

659
00:23:26,080 --> 00:23:27,280
this section

660
00:23:27,280 --> 00:23:28,960
is essentially

661
00:23:28,960 --> 00:23:32,159
the data given to us by oss first on

662
00:23:32,159 --> 00:23:35,039
this url so they make all of the results

663
00:23:35,039 --> 00:23:37,720
publicly available by on

664
00:23:37,720 --> 00:23:39,280
box.chromium.org

665
00:23:39,280 --> 00:23:41,440
and you can use the following query to

666
00:23:41,440 --> 00:23:42,240
uh

667
00:23:42,240 --> 00:23:44,080
essentially get the results that that

668
00:23:44,080 --> 00:23:45,919
we're going to show and i want to just

669
00:23:45,919 --> 00:23:48,080
give a note here that this is an

670
00:23:48,080 --> 00:23:50,159
overapproximation from the perspective

671
00:23:50,159 --> 00:23:53,520
of the results are the results but

672
00:23:53,520 --> 00:23:56,159
it will be the fusses will like

673
00:23:56,159 --> 00:23:58,480
not necessarily only find legit bugs the

674
00:23:58,480 --> 00:24:00,480
forces themselves can have issues which

675
00:24:00,480 --> 00:24:03,039
will be reported as a bug in this manner

676
00:24:03,039 --> 00:24:05,039
the engines can sometimes have an issue

677
00:24:05,039 --> 00:24:07,919
which will also report a bug so take it

678
00:24:07,919 --> 00:24:09,440
with a little bit of grain of salt and

679
00:24:09,440 --> 00:24:11,039
don't expect that all these numbers

680
00:24:11,039 --> 00:24:14,559
constitute exploitable bucks

681
00:24:14,559 --> 00:24:18,320
so these are the results on uh from from

682
00:24:18,320 --> 00:24:19,919
oss first reported

683
00:24:19,919 --> 00:24:22,000
and potentially what we can see here is

684
00:24:22,000 --> 00:24:23,600
that there are two projects envoy and

685
00:24:23,600 --> 00:24:26,159
phonebit written in c plus and c and

686
00:24:26,159 --> 00:24:28,240
they have approximately

687
00:24:28,240 --> 00:24:31,200
well above 200 bucks each reported

688
00:24:31,200 --> 00:24:33,520
and notice again that this is this does

689
00:24:33,520 --> 00:24:34,559
include

690
00:24:34,559 --> 00:24:37,840
security box and also non-security box

691
00:24:37,840 --> 00:24:40,080
as set by oss first so if you look at

692
00:24:40,080 --> 00:24:42,240
the query you can see i have this it's

693
00:24:42,240 --> 00:24:44,320
like type here

694
00:24:44,320 --> 00:24:46,720
where we both include security and box

695
00:24:46,720 --> 00:24:49,760
security types so it's not just security

696
00:24:49,760 --> 00:24:52,720
types and this includes all forms of

697
00:24:52,720 --> 00:24:54,559
well all forms of memory corruption

698
00:24:54,559 --> 00:24:57,360
issues that you can imagine

699
00:24:57,360 --> 00:24:59,360
and notice here that

700
00:24:59,360 --> 00:25:01,279
envoy has been fussing for i think they

701
00:25:01,279 --> 00:25:03,120
first integrated into ss first since

702
00:25:03,120 --> 00:25:05,440
2016 and i believe that the team has

703
00:25:05,440 --> 00:25:07,679
done like a tremendous job in in getting

704
00:25:07,679 --> 00:25:10,000
fussing all over their project so in the

705
00:25:10,000 --> 00:25:11,679
sense that there's a lot of box it's a

706
00:25:11,679 --> 00:25:13,919
good sign from the perspective of they

707
00:25:13,919 --> 00:25:16,960
have analyzed a lot of their code base

708
00:25:16,960 --> 00:25:18,480
we didn't have all of the the golang

709
00:25:18,480 --> 00:25:19,840
projects here and you can see that the

710
00:25:19,840 --> 00:25:22,799
numbers are uh quite a bit lower but

711
00:25:22,799 --> 00:25:24,799
this is also a reference to they are not

712
00:25:24,799 --> 00:25:26,799
as like mature in their fussing approach

713
00:25:26,799 --> 00:25:27,760
as

714
00:25:27,760 --> 00:25:29,200
the two other projects that i mentioned

715
00:25:29,200 --> 00:25:30,240
here

716
00:25:30,240 --> 00:25:31,440
but these are the numbers that you can

717
00:25:31,440 --> 00:25:32,400
expect

718
00:25:32,400 --> 00:25:33,440
and

719
00:25:33,440 --> 00:25:35,600
in a sense it also goes to show

720
00:25:35,600 --> 00:25:37,120
there is some

721
00:25:37,120 --> 00:25:38,880
there will be work involved here because

722
00:25:38,880 --> 00:25:40,720
imagine sitting at the receiving end of

723
00:25:40,720 --> 00:25:43,360
envoy and you have to analyze 860 bucks

724
00:25:43,360 --> 00:25:45,279
to verify how to fix them or et cetera

725
00:25:45,279 --> 00:25:47,440
et cetera a lot of them will also be

726
00:25:47,440 --> 00:25:48,480
like

727
00:25:48,480 --> 00:25:50,559
issues from the oss site that will be

728
00:25:50,559 --> 00:25:53,120
fixed by itself in a sense um but there

729
00:25:53,120 --> 00:25:54,799
will be a lot of work for for for the

730
00:25:54,799 --> 00:25:57,840
developers to to deal with this stuff

731
00:25:57,840 --> 00:26:00,240
so if we are to plot the issues that are

732
00:26:00,240 --> 00:26:01,760
reported here we can plug them based on

733
00:26:01,760 --> 00:26:04,400
how many issues are closed on this

734
00:26:04,400 --> 00:26:06,400
monorail so the database that i've just

735
00:26:06,400 --> 00:26:07,279
shown

736
00:26:07,279 --> 00:26:09,360
or and also how many are open and in

737
00:26:09,360 --> 00:26:12,000
that sense we can see how often

738
00:26:12,000 --> 00:26:14,320
bugs so like get introduced or like get

739
00:26:14,320 --> 00:26:16,080
found by the fusses and how often they

740
00:26:16,080 --> 00:26:17,679
are so like fixed

741
00:26:17,679 --> 00:26:19,440
so here we have a project called argo

742
00:26:19,440 --> 00:26:20,400
and

743
00:26:20,400 --> 00:26:22,000
the red graph that you see up here is

744
00:26:22,000 --> 00:26:25,440
the amount of box closed on the database

745
00:26:25,440 --> 00:26:27,440
that means whenever a bug is fixed it

746
00:26:27,440 --> 00:26:29,600
will turn from open to closed

747
00:26:29,600 --> 00:26:31,679
so close is just going to go upwards

748
00:26:31,679 --> 00:26:33,600
depending on how many bucks gets found

749
00:26:33,600 --> 00:26:34,640
and fixed

750
00:26:34,640 --> 00:26:37,919
whereas the blue one the blue is like

751
00:26:37,919 --> 00:26:40,480
line shows how many issues are open so

752
00:26:40,480 --> 00:26:42,000
ideally it will go a little bit up and

753
00:26:42,000 --> 00:26:43,840
then it will hopefully go down depending

754
00:26:43,840 --> 00:26:46,000
on how fast the bugs are fixed and here

755
00:26:46,000 --> 00:26:48,640
we have an example of say uh

756
00:26:48,640 --> 00:26:50,720
when fussing was introduced

757
00:26:50,720 --> 00:26:52,240
quickly a lot of bucks was found but

758
00:26:52,240 --> 00:26:54,720
they were also very very fast to fix it

759
00:26:54,720 --> 00:26:56,400
and we can also see that it's kind of a

760
00:26:56,400 --> 00:26:57,840
like a rhythmic

761
00:26:57,840 --> 00:26:59,679
curve the red one which means that the

762
00:26:59,679 --> 00:27:01,200
fossils will find a lot of bugs in the

763
00:27:01,200 --> 00:27:03,200
beginning and then it will start to fade

764
00:27:03,200 --> 00:27:05,200
out as they kind of have explored all of

765
00:27:05,200 --> 00:27:06,559
their potential

766
00:27:06,559 --> 00:27:09,120
or get to explore all of their potential

767
00:27:09,120 --> 00:27:12,080
we have another project here kubernetes

768
00:27:12,080 --> 00:27:14,240
and notice that the the so the x-axis

769
00:27:14,240 --> 00:27:16,559
shows the date and the y-axis shows the

770
00:27:16,559 --> 00:27:17,279
uh

771
00:27:17,279 --> 00:27:19,840
the amount of issues closed or opened

772
00:27:19,840 --> 00:27:21,520
and here you can see so like a similar

773
00:27:21,520 --> 00:27:23,120
graph it

774
00:27:23,120 --> 00:27:25,520
looked rhythmic in a sense and there are

775
00:27:25,520 --> 00:27:28,480
a few bugs still open in the kubernetes

776
00:27:28,480 --> 00:27:29,760
bug tracker

777
00:27:29,760 --> 00:27:31,919
we then have an example of link d2 proxy

778
00:27:31,919 --> 00:27:33,679
where you can see that again the red

779
00:27:33,679 --> 00:27:36,159
graph will have a logarithmic sign but

780
00:27:36,159 --> 00:27:38,159
also a logarithmic curve

781
00:27:38,159 --> 00:27:40,000
but you can also see that they are very

782
00:27:40,000 --> 00:27:42,159
fast at fixing the box whenever bugs

783
00:27:42,159 --> 00:27:44,399
occur the next day is fixed so it's kind

784
00:27:44,399 --> 00:27:46,080
of like a great

785
00:27:46,080 --> 00:27:48,080
they they do it really well the legacy

786
00:27:48,080 --> 00:27:49,679
team but at the same time you can also

787
00:27:49,679 --> 00:27:51,440
see

788
00:27:51,440 --> 00:27:54,000
bugs kind of stopped being found

789
00:27:54,000 --> 00:27:56,559
let's say uh six months ago and you can

790
00:27:56,559 --> 00:27:58,640
ask why most likely that's because they

791
00:27:58,640 --> 00:28:00,159
don't contribute new fusses to their

792
00:28:00,159 --> 00:28:02,240
code base which is also an interesting

793
00:28:02,240 --> 00:28:04,320
uh a thought so if you were to for

794
00:28:04,320 --> 00:28:05,840
example if you knew how to fast rush

795
00:28:05,840 --> 00:28:07,760
projects most likely you could go and

796
00:28:07,760 --> 00:28:10,559
and and help them out

797
00:28:10,559 --> 00:28:13,120
fluent bit another example and again we

798
00:28:13,120 --> 00:28:14,799
see it it's like

799
00:28:14,799 --> 00:28:17,279
they

800
00:28:17,279 --> 00:28:19,520
the blue bar keeps being low whereas the

801
00:28:19,520 --> 00:28:21,520
box keep increasing and that's also a

802
00:28:21,520 --> 00:28:24,399
sign of whenever uh so like whenever a

803
00:28:24,399 --> 00:28:26,880
bug is found and fixed

804
00:28:26,880 --> 00:28:28,399
that one gets put you know put on the

805
00:28:28,399 --> 00:28:30,320
ripper but the blue one kind of stays

806
00:28:30,320 --> 00:28:32,399
constant and that means every time a bug

807
00:28:32,399 --> 00:28:35,039
is fixed a new one is found so when when

808
00:28:35,039 --> 00:28:37,200
your first find finds a bug it will kind

809
00:28:37,200 --> 00:28:39,279
of like run into that bug all the time

810
00:28:39,279 --> 00:28:40,720
so it will kind of redetect it all the

811
00:28:40,720 --> 00:28:43,120
time when you then fix it it can finally

812
00:28:43,120 --> 00:28:44,640
progress further into coverage and

813
00:28:44,640 --> 00:28:46,640
that's why like the red will continue to

814
00:28:46,640 --> 00:28:49,840
grow whereas the blue line stays stable

815
00:28:49,840 --> 00:28:50,080
um

816
00:28:50,080 --> 00:28:51,360
[Music]

817
00:28:51,360 --> 00:28:54,720
and here is the envoy project uh yeah

818
00:28:54,720 --> 00:28:58,679
fusion rack give that

819
00:29:00,000 --> 00:29:02,080
yeah

820
00:29:02,080 --> 00:29:04,159
yeah so let's talk about where we'll go

821
00:29:04,159 --> 00:29:06,240
from here

822
00:29:06,240 --> 00:29:08,480
let's zoom out a little bit in terms of

823
00:29:08,480 --> 00:29:09,760
where we are in the

824
00:29:09,760 --> 00:29:11,840
greater scheme of things here as david

825
00:29:11,840 --> 00:29:12,960
mentioned

826
00:29:12,960 --> 00:29:15,360
over the last 10 15 years a lot of work

827
00:29:15,360 --> 00:29:17,039
has been done in

828
00:29:17,039 --> 00:29:20,960
making fussing generally available for

829
00:29:20,960 --> 00:29:23,039
for open source projects for the open

830
00:29:23,039 --> 00:29:25,440
source community

831
00:29:25,440 --> 00:29:27,520
that that has included writing really

832
00:29:27,520 --> 00:29:30,720
really great fussing engines sanitizers

833
00:29:30,720 --> 00:29:33,120
and bringing these um

834
00:29:33,120 --> 00:29:35,200
this technology to other languages to

835
00:29:35,200 --> 00:29:37,360
all sorts of languages as david already

836
00:29:37,360 --> 00:29:38,320
mentioned

837
00:29:38,320 --> 00:29:40,880
so we have quite a mature

838
00:29:40,880 --> 00:29:42,480
fussing engines now

839
00:29:42,480 --> 00:29:44,080
but of course we are seeing changes in

840
00:29:44,080 --> 00:29:47,200
this as well for example with go18118

841
00:29:47,200 --> 00:29:49,360
where the fusing engine is

842
00:29:49,360 --> 00:29:50,320
getting

843
00:29:50,320 --> 00:29:52,960
integrated into the language itself

844
00:29:52,960 --> 00:29:55,200
so next over over the

845
00:29:55,200 --> 00:29:56,559
last few years we have worked on

846
00:29:56,559 --> 00:29:58,640
bringing these forcing capabilities to

847
00:29:58,640 --> 00:30:00,480
the cncf projects

848
00:30:00,480 --> 00:30:03,520
um and

849
00:30:03,520 --> 00:30:05,360
and in in and

850
00:30:05,360 --> 00:30:06,799
like you see that that is like more or

851
00:30:06,799 --> 00:30:08,960
less where we are in in that in that

852
00:30:08,960 --> 00:30:11,120
story uh so let's talk about the next

853
00:30:11,120 --> 00:30:12,720
steps what what will happen over the

854
00:30:12,720 --> 00:30:14,799
next couple of years uh like we

855
00:30:14,799 --> 00:30:16,640
mentioned we want to see main

856
00:30:16,640 --> 00:30:18,640
maintainers involved it will make a huge

857
00:30:18,640 --> 00:30:21,039
difference for difference for in terms

858
00:30:21,039 --> 00:30:23,600
of taking forcing from

859
00:30:23,600 --> 00:30:25,679
the initial step to

860
00:30:25,679 --> 00:30:27,600
to to really approaching it from a

861
00:30:27,600 --> 00:30:29,679
domain

862
00:30:29,679 --> 00:30:30,799
specific

863
00:30:30,799 --> 00:30:34,399
knowledge kind of approach

864
00:30:34,399 --> 00:30:37,360
next we will see more box bug oracles

865
00:30:37,360 --> 00:30:40,559
and sanitizers for memory save languages

866
00:30:40,559 --> 00:30:42,559
um there are

867
00:30:42,559 --> 00:30:44,720
a bunch of of vulnerabilities that

868
00:30:44,720 --> 00:30:46,880
fosters don't detect they do they check

869
00:30:46,880 --> 00:30:48,399
some but there are a lot they don't

870
00:30:48,399 --> 00:30:49,919
detect and we want to find those

871
00:30:49,919 --> 00:30:51,410
automatically

872
00:30:51,410 --> 00:30:52,640
[Music]

873
00:30:52,640 --> 00:30:54,480
next

874
00:30:54,480 --> 00:30:55,679
yeah

875
00:30:55,679 --> 00:30:56,880
again

876
00:30:56,880 --> 00:30:59,279
mature forcing even more based on what

877
00:30:59,279 --> 00:31:01,200
has been done now

878
00:31:01,200 --> 00:31:02,960
and that involves involving involving

879
00:31:02,960 --> 00:31:04,720
the community and the maintainers could

880
00:31:04,720 --> 00:31:06,720
i just could i just interrupt here so

881
00:31:06,720 --> 00:31:08,880
with regards to this uh could you go one

882
00:31:08,880 --> 00:31:11,279
back with regards to this bug oracle's

883
00:31:11,279 --> 00:31:13,440
uh standard sizes one important point to

884
00:31:13,440 --> 00:31:14,960
highlight here is that we have java

885
00:31:14,960 --> 00:31:17,039
fussing available but it didn't detect

886
00:31:17,039 --> 00:31:18,960
the lock for j issue

887
00:31:18,960 --> 00:31:21,120
then they the developers of this uh java

888
00:31:21,120 --> 00:31:22,880
fussing engine came up with a bug oracle

889
00:31:22,880 --> 00:31:25,279
to detect command injections and they

890
00:31:25,279 --> 00:31:26,640
found uh

891
00:31:26,640 --> 00:31:28,720
lock4j in a matter of minutes with that

892
00:31:28,720 --> 00:31:30,399
it's like the new bug oracle and you'll

893
00:31:30,399 --> 00:31:32,480
see a lot more of that where people will

894
00:31:32,480 --> 00:31:34,320
try to identify those type of like high

895
00:31:34,320 --> 00:31:36,480
level issues that may not be

896
00:31:36,480 --> 00:31:38,240
just detectable by the program crashing

897
00:31:38,240 --> 00:31:40,799
for example

898
00:31:45,440 --> 00:31:47,919
yeah so i i i guess we have already gone

899
00:31:47,919 --> 00:31:50,480
through the maintainer involvement um

900
00:31:50,480 --> 00:31:52,240
that is one of the steps that we will uh

901
00:31:52,240 --> 00:31:53,039
cons

902
00:31:53,039 --> 00:31:54,559
that we want to see over the next couple

903
00:31:54,559 --> 00:31:55,679
of years

904
00:31:55,679 --> 00:31:58,559
um but yeah so david had an example of a

905
00:31:58,559 --> 00:32:00,720
real world scenario

906
00:32:00,720 --> 00:32:03,519
where a bug detector was improved to to

907
00:32:03,519 --> 00:32:06,000
detect new vulnerabilities

908
00:32:06,000 --> 00:32:07,600
and

909
00:32:07,600 --> 00:32:09,360
let's talk about like some possible

910
00:32:09,360 --> 00:32:10,720
scenarios where

911
00:32:10,720 --> 00:32:11,600
that will

912
00:32:11,600 --> 00:32:13,679
occur in the

913
00:32:13,679 --> 00:32:16,240
in the cloud native space that that the

914
00:32:16,240 --> 00:32:18,559
cnc projects can benefit from so when we

915
00:32:18,559 --> 00:32:21,120
talk about uh bug oracles or sensors we

916
00:32:21,120 --> 00:32:23,120
consider it from an from a perspective

917
00:32:23,120 --> 00:32:26,159
of uh it being integrated like into

918
00:32:26,159 --> 00:32:28,720
fusing where the

919
00:32:28,720 --> 00:32:31,600
the developers of foss harnesses and the

920
00:32:31,600 --> 00:32:34,480
tests itself don't have to tweak or uh

921
00:32:34,480 --> 00:32:37,279
change settings of the photos but

922
00:32:37,279 --> 00:32:39,200
the same frost test can be used to

923
00:32:39,200 --> 00:32:42,240
detect all these different uh

924
00:32:42,240 --> 00:32:44,720
box and vulnerabilities

925
00:32:44,720 --> 00:32:46,399
so for example now and go as david

926
00:32:46,399 --> 00:32:49,600
mentioned we detect the we have a list a

927
00:32:49,600 --> 00:32:51,840
series of box that can detect

928
00:32:51,840 --> 00:32:53,760
automatically like out of ranges out of

929
00:32:53,760 --> 00:32:55,200
memories timeout

930
00:32:55,200 --> 00:32:57,440
nailed the references etc

931
00:32:57,440 --> 00:32:58,799
but let's let's

932
00:32:58,799 --> 00:33:01,120
it's very likely that we'll see a race

933
00:33:01,120 --> 00:33:04,240
condition sanitizer for example that

934
00:33:04,240 --> 00:33:06,559
will not only detect possible race

935
00:33:06,559 --> 00:33:09,360
conditions but might also try to slow

936
00:33:09,360 --> 00:33:11,600
down a program in order to

937
00:33:11,600 --> 00:33:12,880
win a race and

938
00:33:12,880 --> 00:33:15,679
produce a

939
00:33:15,840 --> 00:33:18,480
complete reproducible test case

940
00:33:18,480 --> 00:33:20,399
next logging we have a series of

941
00:33:20,399 --> 00:33:21,679
vulnerabilities

942
00:33:21,679 --> 00:33:23,600
associated with logging

943
00:33:23,600 --> 00:33:26,000
for example can can users

944
00:33:26,000 --> 00:33:27,039
input

945
00:33:27,039 --> 00:33:28,960
arbitrary data

946
00:33:28,960 --> 00:33:30,799
into the logs and thus

947
00:33:30,799 --> 00:33:33,519
create fake log entries

948
00:33:33,519 --> 00:33:34,720
to

949
00:33:34,720 --> 00:33:35,600
to

950
00:33:35,600 --> 00:33:38,399
prevent an audit trail

951
00:33:38,399 --> 00:33:39,679
file handling

952
00:33:39,679 --> 00:33:41,919
that seems that is a big issue also in

953
00:33:41,919 --> 00:33:43,519
the cncf

954
00:33:43,519 --> 00:33:45,200
landscape

955
00:33:45,200 --> 00:33:47,279
i believe that the talk after hours is

956
00:33:47,279 --> 00:33:49,600
about a

957
00:33:49,600 --> 00:33:52,640
vulnerability associated uh to

958
00:33:52,640 --> 00:33:53,440
to

959
00:33:53,440 --> 00:33:55,120
file handling so i encourage you to

960
00:33:55,120 --> 00:33:56,880
check that out but basically can we read

961
00:33:56,880 --> 00:33:58,880
arbitrary files can we write uh

962
00:33:58,880 --> 00:34:01,039
arbitrary files on the system uh that

963
00:34:01,039 --> 00:34:03,120
we're not supposed to command injections

964
00:34:03,120 --> 00:34:05,440
we added the logics we found a

965
00:34:05,440 --> 00:34:08,000
suv in a high severe severe city i

966
00:34:08,000 --> 00:34:10,399
believe in flocks

967
00:34:10,399 --> 00:34:11,599
last winter

968
00:34:11,599 --> 00:34:12,639
and

969
00:34:12,639 --> 00:34:14,239
that that could i think believe they

970
00:34:14,239 --> 00:34:18,079
found another one just last week um and

971
00:34:18,079 --> 00:34:20,719
yeah it continues to be an issue in in

972
00:34:20,719 --> 00:34:22,079
the uh

973
00:34:22,079 --> 00:34:24,480
in the memory saved languages and uh we

974
00:34:24,480 --> 00:34:27,119
it would be it is we might see a bug

975
00:34:27,119 --> 00:34:29,839
oracle sanitizer that will find these

976
00:34:29,839 --> 00:34:31,280
these bugs

977
00:34:31,280 --> 00:34:33,679
so the main point here is that

978
00:34:33,679 --> 00:34:36,320
when we get these sanitizers into the

979
00:34:36,320 --> 00:34:38,800
the fusing itself into fuzzing itself

980
00:34:38,800 --> 00:34:40,879
where developers don't have to do

981
00:34:40,879 --> 00:34:43,520
anything extra to to

982
00:34:43,520 --> 00:34:45,199
make use of these

983
00:34:45,199 --> 00:34:47,760
sanitizers because we have coverage of

984
00:34:47,760 --> 00:34:50,000
all these cncf projects

985
00:34:50,000 --> 00:34:52,000
they they will benefit from from these

986
00:34:52,000 --> 00:34:54,879
new developments immediately and that

987
00:34:54,879 --> 00:34:56,719
will have a massive impact so a single

988
00:34:56,719 --> 00:34:57,920
um

989
00:34:57,920 --> 00:35:00,720
a single sanitizer will be piped out to

990
00:35:00,720 --> 00:35:04,240
to all these uh cncf projects uh without

991
00:35:04,240 --> 00:35:06,880
much or any uh further work

992
00:35:06,880 --> 00:35:08,640
so the point is so the point here is

993
00:35:08,640 --> 00:35:10,960
that we already have hundreds of fusses

994
00:35:10,960 --> 00:35:12,640
now for cntf projects but there are a

995
00:35:12,640 --> 00:35:14,880
lot of attacks that are not necessarily

996
00:35:14,880 --> 00:35:16,400
caught which actually could get caught

997
00:35:16,400 --> 00:35:18,000
even by the kobus that exists in the

998
00:35:18,000 --> 00:35:20,320
current versus and if you come up now

999
00:35:20,320 --> 00:35:21,760
the next step is if you come up with

1000
00:35:21,760 --> 00:35:23,359
these bug oracles

1001
00:35:23,359 --> 00:35:25,440
all these fusses will be able to find

1002
00:35:25,440 --> 00:35:27,359
say whatever bug your bug oracle may

1003
00:35:27,359 --> 00:35:30,359
find

1004
00:35:30,720 --> 00:35:31,920
i think

1005
00:35:31,920 --> 00:35:34,079
i think that's it we'll leave this uh

1006
00:35:34,079 --> 00:35:35,280
conclusion

1007
00:35:35,280 --> 00:35:37,599
as such but in short we fussed a lot of

1008
00:35:37,599 --> 00:35:38,640
projects

1009
00:35:38,640 --> 00:35:41,200
found a lot of bugs it works really well

1010
00:35:41,200 --> 00:35:42,960
it's not fully automated as you can see

1011
00:35:42,960 --> 00:35:44,800
that there's a lot of bugs to digest it

1012
00:35:44,800 --> 00:35:46,880
takes time to write these verses so you

1013
00:35:46,880 --> 00:35:48,640
will often hear fuzzing as security

1014
00:35:48,640 --> 00:35:50,480
automation but

1015
00:35:50,480 --> 00:35:52,560
it automates a part you still have to do

1016
00:35:52,560 --> 00:35:54,160
a lot of work yourself

1017
00:35:54,160 --> 00:35:55,200
um

1018
00:35:55,200 --> 00:35:56,720
i think that's it

1019
00:35:56,720 --> 00:35:59,839
thank you

