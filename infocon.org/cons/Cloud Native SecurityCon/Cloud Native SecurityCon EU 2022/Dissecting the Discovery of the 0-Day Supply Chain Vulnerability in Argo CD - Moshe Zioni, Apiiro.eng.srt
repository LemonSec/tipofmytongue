1
00:00:00,240 --> 00:00:02,960
hey everyone wow i'm loud okay

2
00:00:02,960 --> 00:00:04,640
welcome back hopefully you got some

3
00:00:04,640 --> 00:00:06,480
coffee and water and whatever else there

4
00:00:06,480 --> 00:00:07,919
may have been out there

5
00:00:07,919 --> 00:00:10,800
um so we're starting up again so

6
00:00:10,800 --> 00:00:13,679
next we have moshe leone and if you

7
00:00:13,679 --> 00:00:16,000
hadn't heard about the argo cd zero day

8
00:00:16,000 --> 00:00:20,320
vulnerability you are going to now

9
00:00:20,320 --> 00:00:22,000
thank you

10
00:00:22,000 --> 00:00:24,160
so hello everyone

11
00:00:24,160 --> 00:00:25,359
thank you for the introduction i'm

12
00:00:25,359 --> 00:00:28,000
honored i'm pretty excited to be here

13
00:00:28,000 --> 00:00:29,599
to be honest this is the first time

14
00:00:29,599 --> 00:00:31,760
since uh kovi that i'm actually speaking

15
00:00:31,760 --> 00:00:33,440
to a crowd so that's

16
00:00:33,440 --> 00:00:35,120
amazing by itself and thank you for

17
00:00:35,120 --> 00:00:36,239
being here

18
00:00:36,239 --> 00:00:38,239
we're going to dissect the uh discovery

19
00:00:38,239 --> 00:00:40,480
of the agua city supply chain attack

20
00:00:40,480 --> 00:00:41,360
um

21
00:00:41,360 --> 00:00:43,120
first of all my name is mushatsiyoni i

22
00:00:43,120 --> 00:00:46,399
said vp of security research at apiro

23
00:00:46,399 --> 00:00:49,200
um doing appsec security for the past 20

24
00:00:49,200 --> 00:00:51,760
plus years on multiple fields if it's

25
00:00:51,760 --> 00:00:53,600
with appsec

26
00:00:53,600 --> 00:00:55,199
insert response

27
00:00:55,199 --> 00:00:57,520
d fear melbourne analysis and others

28
00:00:57,520 --> 00:00:59,680
and if you'd like you can contact me

29
00:00:59,680 --> 00:01:03,039
on email or twitter i'm active on both

30
00:01:03,039 --> 00:01:06,080
what are we going to go over today

31
00:01:06,080 --> 00:01:08,400
is first of all to lay the ground for

32
00:01:08,400 --> 00:01:09,840
the upcoming

33
00:01:09,840 --> 00:01:12,240
items of what is ago cd we're not going

34
00:01:12,240 --> 00:01:15,040
to go full of a full course of what is

35
00:01:15,040 --> 00:01:16,720
adversity but just the basics that will

36
00:01:16,720 --> 00:01:18,880
have a common ground to start from to

37
00:01:18,880 --> 00:01:21,200
understand what is the the attack

38
00:01:21,200 --> 00:01:23,280
originated from why does the

39
00:01:23,280 --> 00:01:24,720
vulnerability that we are going to

40
00:01:24,720 --> 00:01:26,400
discuss here matters

41
00:01:26,400 --> 00:01:27,920
maybe more than than other

42
00:01:27,920 --> 00:01:29,600
vulnerabilities maybe not

43
00:01:29,600 --> 00:01:31,280
and then going through the discovery

44
00:01:31,280 --> 00:01:33,200
itself what are the discovery steps some

45
00:01:33,200 --> 00:01:35,040
basics about how

46
00:01:35,040 --> 00:01:36,880
vulnerabilities are being discovered but

47
00:01:36,880 --> 00:01:39,680
also how this specific vulnerability

48
00:01:39,680 --> 00:01:43,119
what led to the discovery of it

49
00:01:43,119 --> 00:01:45,040
eventually of course to tie the knot

50
00:01:45,040 --> 00:01:46,640
over on everything we're going to

51
00:01:46,640 --> 00:01:48,399
discuss the attack scenario and some

52
00:01:48,399 --> 00:01:50,960
extended scenarios that to be honest we

53
00:01:50,960 --> 00:01:53,680
didn't discuss up until now

54
00:01:53,680 --> 00:01:56,240
and then go through remediation steps

55
00:01:56,240 --> 00:01:59,280
and suggestions that we can go with long

56
00:01:59,280 --> 00:02:02,079
term remediations as well

57
00:02:02,079 --> 00:02:03,840
for the better of the agua city project

58
00:02:03,840 --> 00:02:05,680
and maybe other projects

59
00:02:05,680 --> 00:02:07,439
we're going to sum up everything and of

60
00:02:07,439 --> 00:02:08,878
course i hope that we'll have some time

61
00:02:08,878 --> 00:02:11,599
for q a

62
00:02:11,840 --> 00:02:14,160
so let's start with the basics what is

63
00:02:14,160 --> 00:02:17,760
argo cd as said argo cd is a cncf

64
00:02:17,760 --> 00:02:18,879
project

65
00:02:18,879 --> 00:02:21,680
it's covering github's automations and

66
00:02:21,680 --> 00:02:23,760
by that continuous delivery specifically

67
00:02:23,760 --> 00:02:26,160
in open source of course uh which is

68
00:02:26,160 --> 00:02:27,920
pretty unique in this arena most of the

69
00:02:27,920 --> 00:02:30,000
cd systems are not open source and agua

70
00:02:30,000 --> 00:02:32,879
city is maybe the the most prominent uh

71
00:02:32,879 --> 00:02:34,560
example of that as an open source

72
00:02:34,560 --> 00:02:36,080
project

73
00:02:36,080 --> 00:02:38,400
then it's also true cloud native meaning

74
00:02:38,400 --> 00:02:40,000
that it's built for the cloud it's built

75
00:02:40,000 --> 00:02:42,400
to be on kubernetes itself and by that

76
00:02:42,400 --> 00:02:45,200
the platform is very uh native to many

77
00:02:45,200 --> 00:02:48,080
cloud native uh native for many uh cloud

78
00:02:48,080 --> 00:02:49,920
applications that would like to have

79
00:02:49,920 --> 00:02:51,599
this kind of packaging on common

80
00:02:51,599 --> 00:02:53,760
languages manifests

81
00:02:53,760 --> 00:02:57,040
and tools the project itself is using

82
00:02:57,040 --> 00:02:59,680
multiple very common uh open source

83
00:02:59,680 --> 00:03:02,560
projects by itself like jsonnet casenet

84
00:03:02,560 --> 00:03:05,440
helm charts especially and by that this

85
00:03:05,440 --> 00:03:07,680
is this is makes the curve of loading

86
00:03:07,680 --> 00:03:08,800
and

87
00:03:08,800 --> 00:03:10,480
implementing algo city a very very

88
00:03:10,480 --> 00:03:11,680
efficient one

89
00:03:11,680 --> 00:03:13,599
and lastly it is it also allows

90
00:03:13,599 --> 00:03:16,239
multi-tenant multi-users and by that

91
00:03:16,239 --> 00:03:18,560
we can conclude on what is exactly argo

92
00:03:18,560 --> 00:03:20,959
city is providing for organizations

93
00:03:20,959 --> 00:03:23,360
more than just the city system but also

94
00:03:23,360 --> 00:03:25,519
covering a lot of security aspects of

95
00:03:25,519 --> 00:03:27,360
the whole ordeal

96
00:03:27,360 --> 00:03:29,040
by that when when you are discussing

97
00:03:29,040 --> 00:03:31,360
security with argo cd we are discussing

98
00:03:31,360 --> 00:03:33,120
what kind of storing we'll have for our

99
00:03:33,120 --> 00:03:34,720
repositories

100
00:03:34,720 --> 00:03:36,720
if we have a role-based

101
00:03:36,720 --> 00:03:38,159
authentication

102
00:03:38,159 --> 00:03:40,480
or we have something else how do we

103
00:03:40,480 --> 00:03:42,319
deploy those kind of instances

104
00:03:42,319 --> 00:03:44,000
especially when we are discussing

105
00:03:44,000 --> 00:03:45,360
different environments that's where

106
00:03:45,360 --> 00:03:47,760
github comes into place because we need

107
00:03:47,760 --> 00:03:49,519
to tweak those kind of variables and by

108
00:03:49,519 --> 00:03:51,840
that needs to be automated or at least

109
00:03:51,840 --> 00:03:54,560
as full as we can to be automated and by

110
00:03:54,560 --> 00:03:57,040
that argo is providing this kind of

111
00:03:57,040 --> 00:03:59,120
health monitoring as well to those kind

112
00:03:59,120 --> 00:04:00,720
of instances

113
00:04:00,720 --> 00:04:02,879
secrets management is part of the

114
00:04:02,879 --> 00:04:05,280
advocacy i would say umbrella term not

115
00:04:05,280 --> 00:04:07,360
specifically for the for the argo cd

116
00:04:07,360 --> 00:04:09,519
project there are several plugins and

117
00:04:09,519 --> 00:04:12,080
stuff that are connected to the audio cd

118
00:04:12,080 --> 00:04:13,599
ecosystem that will provide you with

119
00:04:13,599 --> 00:04:16,160
secret management within it but if not

120
00:04:16,160 --> 00:04:18,798
you you also have the native way of of

121
00:04:18,798 --> 00:04:20,399
managing the the secrets and we are

122
00:04:20,399 --> 00:04:22,479
going to get deeper into that because

123
00:04:22,479 --> 00:04:24,639
that's the culprit of

124
00:04:24,639 --> 00:04:26,080
the vulnerability

125
00:04:26,080 --> 00:04:27,919
lastly it is widely connected to

126
00:04:27,919 --> 00:04:31,600
different ci and other sas systems

127
00:04:31,600 --> 00:04:34,639
and that's why agua city is so good for

128
00:04:34,639 --> 00:04:36,720
many purposes

129
00:04:36,720 --> 00:04:38,800
why does the cve that we are discussing

130
00:04:38,800 --> 00:04:40,840
right now 2022

131
00:04:40,840 --> 00:04:44,560
24348 is important or matters for us

132
00:04:44,560 --> 00:04:47,520
especially uh for me and we as we are we

133
00:04:47,520 --> 00:04:49,520
are discussing with many of

134
00:04:49,520 --> 00:04:51,680
our contacts about supply chain attacks

135
00:04:51,680 --> 00:04:53,520
and of course this has been trending on

136
00:04:53,520 --> 00:04:55,520
the news but more than that it's there

137
00:04:55,520 --> 00:04:58,320
is a specific the specific um

138
00:04:58,320 --> 00:05:00,880
item of why it's being trending the why

139
00:05:00,880 --> 00:05:02,479
is that we have much more detections and

140
00:05:02,479 --> 00:05:04,800
we are much much more aware and for me

141
00:05:04,800 --> 00:05:07,280
this is an awareness act like being into

142
00:05:07,280 --> 00:05:09,360
the discussing the supply chain attack

143
00:05:09,360 --> 00:05:11,759
is very very important that's not to say

144
00:05:11,759 --> 00:05:13,919
that this vulnerability is the mega

145
00:05:13,919 --> 00:05:16,320
vulnerability of everything it's not uh

146
00:05:16,320 --> 00:05:17,919
that said it is a high impact

147
00:05:17,919 --> 00:05:20,320
vulnerability and should be discussed

148
00:05:20,320 --> 00:05:22,240
in a very serious manner but not to

149
00:05:22,240 --> 00:05:24,400
examine or exaggerate or

150
00:05:24,400 --> 00:05:27,199
over hyping it it is not a something

151
00:05:27,199 --> 00:05:29,120
that you need to call home right now and

152
00:05:29,120 --> 00:05:31,120
to understand if you have something

153
00:05:31,120 --> 00:05:32,720
take the time to understand if you have

154
00:05:32,720 --> 00:05:34,000
the limitations and we'll discuss

155
00:05:34,000 --> 00:05:37,039
remediation at the end

156
00:05:37,199 --> 00:05:39,280
a pattern that it targets the critical

157
00:05:39,280 --> 00:05:41,840
aspects of a supply chain not that not

158
00:05:41,840 --> 00:05:43,759
just a supply chain attack but it also

159
00:05:43,759 --> 00:05:47,120
covers the cd system uh by that it comes

160
00:05:47,120 --> 00:05:49,360
with a very native way of attacking that

161
00:05:49,360 --> 00:05:51,759
so that means that you do not need a

162
00:05:51,759 --> 00:05:53,600
special port to be open you don't need

163
00:05:53,600 --> 00:05:55,600
something that is out of the default but

164
00:05:55,600 --> 00:05:58,319
you need some some instances of algo cd

165
00:05:58,319 --> 00:05:59,520
that will be

166
00:05:59,520 --> 00:06:01,680
discussed further and by that kind of

167
00:06:01,680 --> 00:06:03,280
infrastructure that makes this very very

168
00:06:03,280 --> 00:06:05,120
much interesting and and complying to

169
00:06:05,120 --> 00:06:07,199
the trend of not just attacking the

170
00:06:07,199 --> 00:06:09,120
supply chain attack but also by the

171
00:06:09,120 --> 00:06:12,080
supply chain infrastructure

172
00:06:12,080 --> 00:06:14,080
um and lastly on this kind of list of

173
00:06:14,080 --> 00:06:16,800
why why it matters uh the utilization of

174
00:06:16,800 --> 00:06:18,560
the payload itself is also interesting

175
00:06:18,560 --> 00:06:21,520
because we are utilizing helm charts uh

176
00:06:21,520 --> 00:06:23,759
specifically but also we'll get to the

177
00:06:23,759 --> 00:06:25,759
extended version of what kind of other

178
00:06:25,759 --> 00:06:27,440
attacks we have and you'll see that

179
00:06:27,440 --> 00:06:29,600
everything that we are covering here is

180
00:06:29,600 --> 00:06:31,919
as said is using the

181
00:06:31,919 --> 00:06:34,720
most proper way of utilizing

182
00:06:34,720 --> 00:06:36,400
cicd systems

183
00:06:36,400 --> 00:06:38,880
namely again the helm charts and by that

184
00:06:38,880 --> 00:06:42,240
you'll see the extension as well

185
00:06:42,240 --> 00:06:44,560
lastly on this slide the developability

186
00:06:44,560 --> 00:06:46,000
encompasses a lot of what we discussed

187
00:06:46,000 --> 00:06:48,160
so far about the cicd systems and its

188
00:06:48,160 --> 00:06:50,160
culprits and why it's very important for

189
00:06:50,160 --> 00:06:52,560
us to follow up on those kind of attacks

190
00:06:52,560 --> 00:06:54,960
uh it's it was that it was fixed on

191
00:06:54,960 --> 00:06:57,440
january this year and since then we have

192
00:06:57,440 --> 00:06:58,479
seen

193
00:06:58,479 --> 00:07:00,800
much more interest about supply chain uh

194
00:07:00,800 --> 00:07:02,560
not because of that but we see more and

195
00:07:02,560 --> 00:07:04,720
more instances of those kind of attacks

196
00:07:04,720 --> 00:07:07,680
happening because it's a very lucrative

197
00:07:07,680 --> 00:07:10,240
attack path for attackers in terms of

198
00:07:10,240 --> 00:07:12,479
merely roi

199
00:07:12,479 --> 00:07:15,599
lastly as we will see

200
00:07:15,599 --> 00:07:17,759
this this specific vulnerability was

201
00:07:17,759 --> 00:07:19,360
actually predicted by the developers so

202
00:07:19,360 --> 00:07:21,199
developers were

203
00:07:21,199 --> 00:07:23,039
were ready for this kind of attacks at

204
00:07:23,039 --> 00:07:25,120
least in the metagame so they will be

205
00:07:25,120 --> 00:07:27,680
able to to comply with that that said of

206
00:07:27,680 --> 00:07:29,759
course nothing is perfect and by that we

207
00:07:29,759 --> 00:07:32,160
found a way of circumventing this kind

208
00:07:32,160 --> 00:07:33,840
of uh of

209
00:07:33,840 --> 00:07:37,759
defense and throating it all together

210
00:07:37,759 --> 00:07:40,560
um so let's discuss the discovery itself

211
00:07:40,560 --> 00:07:43,599
how the racist strategy goes nothing

212
00:07:43,599 --> 00:07:45,360
more different than anything else that

213
00:07:45,360 --> 00:07:47,280
said there is maybe some basics that

214
00:07:47,280 --> 00:07:49,599
that researchers can can agree on what

215
00:07:49,599 --> 00:07:52,479
is the basic research routine i split

216
00:07:52,479 --> 00:07:54,720
into three just for convenience but

217
00:07:54,720 --> 00:07:56,960
this this is more of a personal uh thing

218
00:07:56,960 --> 00:07:59,280
but again we are going over that but in

219
00:07:59,280 --> 00:08:00,960
general we go through a phase called

220
00:08:00,960 --> 00:08:03,280
exploration we just want to skim through

221
00:08:03,280 --> 00:08:05,120
and to understand the ecosystem to

222
00:08:05,120 --> 00:08:07,120
understand the uh the code base remember

223
00:08:07,120 --> 00:08:09,120
i'm not a developer of august cd meaning

224
00:08:09,120 --> 00:08:10,560
that i'm not familiar with the code as

225
00:08:10,560 --> 00:08:12,639
much as the developers are and and the

226
00:08:12,639 --> 00:08:14,720
community itself which is a huge

227
00:08:14,720 --> 00:08:16,720
community so we'll uh

228
00:08:16,720 --> 00:08:18,160
we'll have to go through this kind of

229
00:08:18,160 --> 00:08:20,240
exploration step to explore to

230
00:08:20,240 --> 00:08:21,840
understand the ecosystem to talk the

231
00:08:21,840 --> 00:08:23,840
talk at least to understand what is what

232
00:08:23,840 --> 00:08:25,520
is going on monday that we are going

233
00:08:25,520 --> 00:08:27,520
through documentations and we are going

234
00:08:27,520 --> 00:08:28,319
through

235
00:08:28,319 --> 00:08:29,919
other items that will provide us more

236
00:08:29,919 --> 00:08:31,759
more insights about how development

237
00:08:31,759 --> 00:08:34,320
occurs because we are into the thing

238
00:08:34,320 --> 00:08:36,719
that is called we can't go through the

239
00:08:36,719 --> 00:08:38,719
old code base you can do that but it's

240
00:08:38,719 --> 00:08:40,479
first of all it's very boring process

241
00:08:40,479 --> 00:08:42,320
and it's more of a automating process

242
00:08:42,320 --> 00:08:44,240
but more than that it's not efficient

243
00:08:44,240 --> 00:08:46,080
for you to discuss actually what needs

244
00:08:46,080 --> 00:08:48,880
to be secure to have security reviews

245
00:08:48,880 --> 00:08:51,200
you will have to consider what what is

246
00:08:51,200 --> 00:08:53,200
deserving security review that means

247
00:08:53,200 --> 00:08:54,640
that you have some kind of a risk level

248
00:08:54,640 --> 00:08:56,959
for each commit maybe to each uh feature

249
00:08:56,959 --> 00:08:59,760
that you have and by that the to um

250
00:08:59,760 --> 00:09:01,920
enforce the security review on those

251
00:09:01,920 --> 00:09:03,519
specifically to some degree that you

252
00:09:03,519 --> 00:09:05,040
would like and by that you'll be much

253
00:09:05,040 --> 00:09:06,399
more efficient and that's exactly what

254
00:09:06,399 --> 00:09:08,720
we did right now we were here we are we

255
00:09:08,720 --> 00:09:10,480
understood what is going on what kind of

256
00:09:10,480 --> 00:09:13,440
development were on the ago cd platform

257
00:09:13,440 --> 00:09:15,680
until that that point in time and

258
00:09:15,680 --> 00:09:18,080
understood what is what is uh what is

259
00:09:18,080 --> 00:09:19,920
wrong or what is uh the sniff test is

260
00:09:19,920 --> 00:09:22,240
called what is smelly a bit so by that

261
00:09:22,240 --> 00:09:24,240
we'll follow up after the exploration

262
00:09:24,240 --> 00:09:26,080
step that we just covered

263
00:09:26,080 --> 00:09:27,920
we we actually go through the tutorials

264
00:09:27,920 --> 00:09:29,600
themselves and build the model meaning

265
00:09:29,600 --> 00:09:32,720
that we have those we actually have uh

266
00:09:32,720 --> 00:09:36,399
instances of uh of aqua cd uh at our lab

267
00:09:36,399 --> 00:09:38,720
and by that trying to of course uh play

268
00:09:38,720 --> 00:09:41,040
with that a very basic routine but but

269
00:09:41,040 --> 00:09:42,399
more than that to understand what is

270
00:09:42,399 --> 00:09:44,080
extended to this kind of ecosystem what

271
00:09:44,080 --> 00:09:45,680
kind of plugins there are what is the

272
00:09:45,680 --> 00:09:47,360
default systems what kind of tweaks you

273
00:09:47,360 --> 00:09:49,839
can go through what is the basic things

274
00:09:49,839 --> 00:09:51,600
that many people are going through once

275
00:09:51,600 --> 00:09:53,279
the using ago city this is an important

276
00:09:53,279 --> 00:09:54,720
part because first of all once you have

277
00:09:54,720 --> 00:09:56,320
a vulnerability you would like to ask

278
00:09:56,320 --> 00:09:58,720
yourselves how common this vulnerability

279
00:09:58,720 --> 00:10:01,360
is how scary it is and second

280
00:10:01,360 --> 00:10:04,160
if not common uh what kind of scenarios

281
00:10:04,160 --> 00:10:06,560
will will will need to be uh will need

282
00:10:06,560 --> 00:10:08,959
to be converged into the issue that is

283
00:10:08,959 --> 00:10:11,040
is handled right here and by that the

284
00:10:11,040 --> 00:10:12,800
vulnerability will take effect or maybe

285
00:10:12,800 --> 00:10:14,800
a greater effect than before

286
00:10:14,800 --> 00:10:16,800
uh so this is the second the second step

287
00:10:16,800 --> 00:10:18,560
to actually realize the use cases to

288
00:10:18,560 --> 00:10:20,480
draw them out to to have this kind of

289
00:10:20,480 --> 00:10:22,720
infestation of flow charts and it's also

290
00:10:22,720 --> 00:10:24,480
important because as we discussed before

291
00:10:24,480 --> 00:10:26,320
we need to be very focused on what would

292
00:10:26,320 --> 00:10:28,240
what we would like to research because

293
00:10:28,240 --> 00:10:30,079
we would like to be efficient and by

294
00:10:30,079 --> 00:10:31,839
that once you we have the use cases

295
00:10:31,839 --> 00:10:34,160
placed out we can actually say okay this

296
00:10:34,160 --> 00:10:36,000
is the use case all the logic would like

297
00:10:36,000 --> 00:10:38,320
to attack and remember once we someone

298
00:10:38,320 --> 00:10:40,720
discussing the vulnerability many turn

299
00:10:40,720 --> 00:10:42,959
to talking about the um

300
00:10:42,959 --> 00:10:44,800
the actual vector of attack like a

301
00:10:44,800 --> 00:10:46,399
remote or crude execution or the helm

302
00:10:46,399 --> 00:10:48,560
charts but that's that's merely

303
00:10:48,560 --> 00:10:50,000
important if you don't have the

304
00:10:50,000 --> 00:10:51,839
realization of what is the the business

305
00:10:51,839 --> 00:10:54,079
logic you are going to attack so the use

306
00:10:54,079 --> 00:10:56,640
cases are based on business logic mostly

307
00:10:56,640 --> 00:10:58,079
most of the time and by that you are

308
00:10:58,079 --> 00:10:59,440
following up with the dive into the

309
00:10:59,440 --> 00:11:01,279
mechanics of those kind of business

310
00:11:01,279 --> 00:11:02,720
logics

311
00:11:02,720 --> 00:11:05,279
uh some very very basics uh maybe

312
00:11:05,279 --> 00:11:07,200
terminologies here sources and six is

313
00:11:07,200 --> 00:11:09,120
very important part of it to understand

314
00:11:09,120 --> 00:11:10,640
once you have this kind of use cases you

315
00:11:10,640 --> 00:11:12,800
would like to see where where what kind

316
00:11:12,800 --> 00:11:15,279
of impact it can have at a maximum like

317
00:11:15,279 --> 00:11:17,519
what are the uh think of it that's

318
00:11:17,519 --> 00:11:19,279
called sync because the function itself

319
00:11:19,279 --> 00:11:21,279
sinks into something like file system

320
00:11:21,279 --> 00:11:23,200
maybe some maybe some kind of a network

321
00:11:23,200 --> 00:11:25,680
traffic etc but the source itself is the

322
00:11:25,680 --> 00:11:27,519
input that you are providing so from now

323
00:11:27,519 --> 00:11:29,120
on i'm going to call to call it input

324
00:11:29,120 --> 00:11:30,720
parsing just for the sake of it but

325
00:11:30,720 --> 00:11:32,880
remember this is a very uh thorough

326
00:11:32,880 --> 00:11:35,279
method that will that everyone has

327
00:11:35,279 --> 00:11:37,120
and lastly development history is very

328
00:11:37,120 --> 00:11:38,399
important because you have much more

329
00:11:38,399 --> 00:11:40,320
context you cover you are covering that

330
00:11:40,320 --> 00:11:42,399
as part of your exploration but once you

331
00:11:42,399 --> 00:11:44,320
have this kind of homing down into

332
00:11:44,320 --> 00:11:47,760
specific use cases and by the dipping

333
00:11:47,760 --> 00:11:49,680
diving into those kind of mechanics you

334
00:11:49,680 --> 00:11:51,760
will also want to have a very good

335
00:11:51,760 --> 00:11:54,079
understanding of what what followed

336
00:11:54,079 --> 00:11:56,000
until now to understand what kind of

337
00:11:56,000 --> 00:11:58,079
development history were under those

338
00:11:58,079 --> 00:11:59,600
kind of features

339
00:11:59,600 --> 00:12:01,760
and unless they had said what is passing

340
00:12:01,760 --> 00:12:03,680
the sniff test what this is more of an

341
00:12:03,680 --> 00:12:05,120
experienced thing but it's it's a

342
00:12:05,120 --> 00:12:07,120
necessary to understand what kind of

343
00:12:07,120 --> 00:12:09,440
attacks are i'm presuming i'm going to

344
00:12:09,440 --> 00:12:11,839
look for in those kind of logics and and

345
00:12:11,839 --> 00:12:13,519
maybe something else triggered the sniff

346
00:12:13,519 --> 00:12:16,079
test as we see right now something else

347
00:12:16,079 --> 00:12:19,120
in in our case triggered the specific

348
00:12:19,120 --> 00:12:22,240
sniff test uh to be positive

349
00:12:22,240 --> 00:12:24,560
um okay so first of all we are going to

350
00:12:24,560 --> 00:12:26,560
go through the parsing itself so we we

351
00:12:26,560 --> 00:12:29,120
hung down on into specific use case but

352
00:12:29,120 --> 00:12:31,120
maybe the most common use case of agua

353
00:12:31,120 --> 00:12:34,320
cd is getting a manifest in and by this

354
00:12:34,320 --> 00:12:36,399
kind of manifest it's being parsed by

355
00:12:36,399 --> 00:12:38,160
the helm chart itself is being passed

356
00:12:38,160 --> 00:12:40,480
into those those uh fields and the

357
00:12:40,480 --> 00:12:42,720
fields that themselves are acting upon

358
00:12:42,720 --> 00:12:45,040
that to to deliver the application and

359
00:12:45,040 --> 00:12:47,519
to uh after that of course to

360
00:12:47,519 --> 00:12:48,800
maintain it

361
00:12:48,800 --> 00:12:51,440
on the cloud now once you have that we

362
00:12:51,440 --> 00:12:53,600
are going to we are going through the

363
00:12:53,600 --> 00:12:55,200
actual hem charts and understand what

364
00:12:55,200 --> 00:12:57,360
kind of quirks we are going to find in

365
00:12:57,360 --> 00:12:59,200
this kind of helm charts now remember

366
00:12:59,200 --> 00:13:01,120
that those kind of charts are controlled

367
00:13:01,120 --> 00:13:03,600
by the user so the user can um can

368
00:13:03,600 --> 00:13:05,600
provide algo cd with any kind of chart

369
00:13:05,600 --> 00:13:08,480
that she wants and by that to follow up

370
00:13:08,480 --> 00:13:10,320
on what kind of builder she wants to

371
00:13:10,320 --> 00:13:11,600
build by that

372
00:13:11,600 --> 00:13:14,240
and we found by that the installation

373
00:13:14,240 --> 00:13:16,959
itself consists of a cluster if you have

374
00:13:16,959 --> 00:13:19,200
uh the common input of the helm chart is

375
00:13:19,200 --> 00:13:20,800
providing you with all the manifest that

376
00:13:20,800 --> 00:13:24,079
you need and then we found out that the

377
00:13:24,079 --> 00:13:25,839
an actual discussion that went on the

378
00:13:25,839 --> 00:13:27,839
thread themselves about

379
00:13:27,839 --> 00:13:30,079
something called the value files on helm

380
00:13:30,079 --> 00:13:32,160
chart this is a very specific

381
00:13:32,160 --> 00:13:34,000
part of the standard that the value

382
00:13:34,000 --> 00:13:36,880
fields is a list of values that will

383
00:13:36,880 --> 00:13:40,320
give you either um excuse me value files

384
00:13:40,320 --> 00:13:43,600
give you a list of file paths uh it can

385
00:13:43,600 --> 00:13:46,800
also be an http path so we're going to

386
00:13:46,800 --> 00:13:48,800
go back to that in a second

387
00:13:48,800 --> 00:13:50,320
and those kind of paths are useful

388
00:13:50,320 --> 00:13:52,079
because you don't want to have all the

389
00:13:52,079 --> 00:13:54,000
secrets or all the values into one place

390
00:13:54,000 --> 00:13:55,279
because if you have different

391
00:13:55,279 --> 00:13:57,360
environments and if someone else like a

392
00:13:57,360 --> 00:13:59,440
different team like devops is maybe

393
00:13:59,440 --> 00:14:00,959
controlling this kind of value file and

394
00:14:00,959 --> 00:14:02,720
you don't want to mix the two and it's a

395
00:14:02,720 --> 00:14:04,560
very good practice overall to have those

396
00:14:04,560 --> 00:14:06,560
kind of things splitted so if you have

397
00:14:06,560 --> 00:14:10,000
the value files list there uh the actual

398
00:14:10,000 --> 00:14:12,000
thing that will happen by the argo cd is

399
00:14:12,000 --> 00:14:13,760
that they will take those kind of

400
00:14:13,760 --> 00:14:16,320
strings and going to search search for

401
00:14:16,320 --> 00:14:19,760
those kind of files or websites and read

402
00:14:19,760 --> 00:14:21,440
those values from there the values can

403
00:14:21,440 --> 00:14:24,160
be by the way either json or any kind of

404
00:14:24,160 --> 00:14:25,199
yaml

405
00:14:25,199 --> 00:14:27,120
and by that you can you have some

406
00:14:27,120 --> 00:14:29,279
variability about what can be controlled

407
00:14:29,279 --> 00:14:31,839
by those kind of value files now why

408
00:14:31,839 --> 00:14:33,600
it's interesting and why it caught our

409
00:14:33,600 --> 00:14:34,560
eyes

410
00:14:34,560 --> 00:14:36,560
because uh it's important to understand

411
00:14:36,560 --> 00:14:39,440
that the uh the actual repositories that

412
00:14:39,440 --> 00:14:42,240
are holding on the agua cd system the

413
00:14:42,240 --> 00:14:44,480
adversity is split into bot into pods

414
00:14:44,480 --> 00:14:46,959
one of the parts is called argo cd repo

415
00:14:46,959 --> 00:14:48,800
server and this reaper server is

416
00:14:48,800 --> 00:14:51,040
monolithic meaning it's it has some kind

417
00:14:51,040 --> 00:14:52,560
of a file structure a very deterministic

418
00:14:52,560 --> 00:14:53,920
one so you can predict those kind of

419
00:14:53,920 --> 00:14:55,120
file structures if you know the

420
00:14:55,120 --> 00:14:57,199
application name that's all you need

421
00:14:57,199 --> 00:14:59,920
and and by that if you have like

422
00:14:59,920 --> 00:15:01,440
kind some kind of a

423
00:15:01,440 --> 00:15:03,920
path traversal to another file you can

424
00:15:03,920 --> 00:15:06,160
read other files on the systems now

425
00:15:06,160 --> 00:15:08,399
fortunately enough on the common system

426
00:15:08,399 --> 00:15:11,199
of argo cd there is no yaml or json file

427
00:15:11,199 --> 00:15:12,720
that you can just read from the system

428
00:15:12,720 --> 00:15:14,800
and gain some some kind of a god mode

429
00:15:14,800 --> 00:15:17,199
control that said if the system is

430
00:15:17,199 --> 00:15:19,680
multi-tenant and multi-user as many many

431
00:15:19,680 --> 00:15:22,079
of the common infrastructures are you

432
00:15:22,079 --> 00:15:24,800
can potentially maybe read other files

433
00:15:24,800 --> 00:15:27,279
on the system now that's why it's

434
00:15:27,279 --> 00:15:28,639
interesting

435
00:15:28,639 --> 00:15:31,120
that said the it wasn't also interesting

436
00:15:31,120 --> 00:15:32,880
just for us it was interesting for these

437
00:15:32,880 --> 00:15:35,279
developers in 2019 we found the thread

438
00:15:35,279 --> 00:15:37,120
that was what that was discussing that's

439
00:15:37,120 --> 00:15:39,519
exactly the the exact case of this kind

440
00:15:39,519 --> 00:15:41,440
of exploitation

441
00:15:41,440 --> 00:15:43,759
one for one uh the developer wrote what

442
00:15:43,759 --> 00:15:45,839
is concerning me here is this type of

443
00:15:45,839 --> 00:15:48,720
behavior can be used as a directory

444
00:15:48,720 --> 00:15:50,959
reversal attack and he is completely

445
00:15:50,959 --> 00:15:51,920
right

446
00:15:51,920 --> 00:15:54,320
potentially this can this can be used as

447
00:15:54,320 --> 00:15:56,639
a traversal attack he shows here

448
00:15:56,639 --> 00:15:58,959
a uh dot dot slash which means it will

449
00:15:58,959 --> 00:16:02,000
go through to uh some kind of a

450
00:16:02,000 --> 00:16:04,639
parent directory and and so forth and

451
00:16:04,639 --> 00:16:07,120
they started to discuss how can we start

452
00:16:07,120 --> 00:16:09,040
how can we manifest that into code and

453
00:16:09,040 --> 00:16:11,199
how can we protect on a sanity check on

454
00:16:11,199 --> 00:16:13,360
those kind of values and they they

455
00:16:13,360 --> 00:16:15,360
commit those values and kudos to to the

456
00:16:15,360 --> 00:16:17,360
team there it's a very great start to

457
00:16:17,360 --> 00:16:18,880
begin with so you have this kind of

458
00:16:18,880 --> 00:16:20,480
notion of security within the developer

459
00:16:20,480 --> 00:16:21,440
team

460
00:16:21,440 --> 00:16:23,199
and they implement this kind of sanity

461
00:16:23,199 --> 00:16:24,240
checks

462
00:16:24,240 --> 00:16:26,399
on the files themselves

463
00:16:26,399 --> 00:16:28,399
let's map out what kind of sanity checks

464
00:16:28,399 --> 00:16:30,160
are going on on this system and and by

465
00:16:30,160 --> 00:16:33,120
that also how can we foil that so first

466
00:16:33,120 --> 00:16:35,440
of all there is one file named path

467
00:16:35,440 --> 00:16:37,759
traversal which you can you can um of

468
00:16:37,759 --> 00:16:40,000
course understand what it means to do uh

469
00:16:40,000 --> 00:16:41,680
which goes through several security

470
00:16:41,680 --> 00:16:42,880
checks and the security checks

471
00:16:42,880 --> 00:16:45,759
themselves are waterfall based so if one

472
00:16:45,759 --> 00:16:48,880
it doesn't doesn't um doesn't uh have a

473
00:16:48,880 --> 00:16:52,320
tool it becomes false in the actual uh

474
00:16:52,320 --> 00:16:54,880
test it it can be broken it can be maybe

475
00:16:54,880 --> 00:16:56,720
something else but they tried to do it

476
00:16:56,720 --> 00:16:58,800
it's a fail open meaning that once you

477
00:16:58,800 --> 00:17:00,720
have something you will you will kill it

478
00:17:00,720 --> 00:17:02,480
as much as you can in terms of cleanup

479
00:17:02,480 --> 00:17:04,559
and by in that and that way it will be

480
00:17:04,559 --> 00:17:05,839
safe to use

481
00:17:05,839 --> 00:17:07,839
most of the time so the first phase and

482
00:17:07,839 --> 00:17:09,520
the most important phase is what is

483
00:17:09,520 --> 00:17:11,359
called file path clean file path is a

484
00:17:11,359 --> 00:17:13,520
golang

485
00:17:13,520 --> 00:17:15,919
library and the clean is very common way

486
00:17:15,919 --> 00:17:17,760
of cleaning up those kind of strings

487
00:17:17,760 --> 00:17:19,280
once you have a string you would like to

488
00:17:19,280 --> 00:17:21,679
have it very common way uh by the

489
00:17:21,679 --> 00:17:24,240
standard and this is what clean does so

490
00:17:24,240 --> 00:17:26,000
this is the first and maybe the most

491
00:17:26,000 --> 00:17:29,120
important phase of path reversal cleanup

492
00:17:29,120 --> 00:17:31,520
the second one is the parse path that's

493
00:17:31,520 --> 00:17:33,520
that way you are going to split the path

494
00:17:33,520 --> 00:17:36,320
itself on the file component um and and

495
00:17:36,320 --> 00:17:38,400
step three is that there is a is

496
00:17:38,400 --> 00:17:40,559
requested under current root which is

497
00:17:40,559 --> 00:17:42,320
mean which means that it's going to

498
00:17:42,320 --> 00:17:44,640
compare the path that you just broken up

499
00:17:44,640 --> 00:17:45,600
for the

500
00:17:45,600 --> 00:17:47,039
actual um

501
00:17:47,039 --> 00:17:49,120
value and going to compare it with the

502
00:17:49,120 --> 00:17:51,679
act with the actual pwd the directory

503
00:17:51,679 --> 00:17:52,880
that the

504
00:17:52,880 --> 00:17:54,799
system is residing or reading from right

505
00:17:54,799 --> 00:17:56,960
now and by that if they have a match

506
00:17:56,960 --> 00:17:59,600
it's okay it is a subdirectory under

507
00:17:59,600 --> 00:18:02,160
this directory and if not it's going to

508
00:18:02,160 --> 00:18:04,400
fail

509
00:18:04,400 --> 00:18:07,360
okay so those are the the three steps um

510
00:18:07,360 --> 00:18:09,840
and by that i omitted the the last part

511
00:18:09,840 --> 00:18:11,919
it's just going to fix the trailing if

512
00:18:11,919 --> 00:18:14,000
it was just a directory it will add a

513
00:18:14,000 --> 00:18:15,679
slash at the end

514
00:18:15,679 --> 00:18:16,720
now

515
00:18:16,720 --> 00:18:19,120
so far so good we've we've actually

516
00:18:19,120 --> 00:18:20,960
implemented just for research purposes

517
00:18:20,960 --> 00:18:22,720
we've implemented this code a very light

518
00:18:22,720 --> 00:18:24,880
one on a different script and we

519
00:18:24,880 --> 00:18:26,799
actually ran through those kind of steps

520
00:18:26,799 --> 00:18:29,679
many times on a high level debug system

521
00:18:29,679 --> 00:18:31,679
um this is a very common practice as

522
00:18:31,679 --> 00:18:34,080
well so you have a very rapid way of

523
00:18:34,080 --> 00:18:36,000
fuzzing it maybe manually but at least

524
00:18:36,000 --> 00:18:38,480
you have this kind of you are cleaning

525
00:18:38,480 --> 00:18:40,480
up the table from any kind of noise from

526
00:18:40,480 --> 00:18:42,320
other system components and by that you

527
00:18:42,320 --> 00:18:44,559
can differentiate what is actually

528
00:18:44,559 --> 00:18:46,080
happening

529
00:18:46,080 --> 00:18:48,960
um so we haven't found so much something

530
00:18:48,960 --> 00:18:51,039
very very crucial in this kind of path

531
00:18:51,039 --> 00:18:53,600
so the past reversal on the face of it

532
00:18:53,600 --> 00:18:54,799
works

533
00:18:54,799 --> 00:18:56,880
that said there is another part uh of

534
00:18:56,880 --> 00:18:59,440
the uh of this um uh kind of cleanup

535
00:18:59,440 --> 00:19:00,960
which is

536
00:19:00,960 --> 00:19:02,880
which is very very important is the

537
00:19:02,880 --> 00:19:04,799
repository actual

538
00:19:04,799 --> 00:19:05,760
um

539
00:19:05,760 --> 00:19:07,280
reading of the repository and by the

540
00:19:07,280 --> 00:19:10,080
helm chart itself so where it starts on

541
00:19:10,080 --> 00:19:11,919
on other way to look at it what calls

542
00:19:11,919 --> 00:19:15,360
the path uh traversal.go the actual

543
00:19:15,360 --> 00:19:17,840
function that goes there so the first

544
00:19:17,840 --> 00:19:19,919
the first thing that happens once the

545
00:19:19,919 --> 00:19:23,360
value field value files field uh is

546
00:19:23,360 --> 00:19:25,919
shown is going to iterate through each

547
00:19:25,919 --> 00:19:27,760
of those kind of list items

548
00:19:27,760 --> 00:19:29,360
and each list item is going to go

549
00:19:29,360 --> 00:19:31,760
through parse request uri

550
00:19:31,760 --> 00:19:33,600
which is maybe the most important part

551
00:19:33,600 --> 00:19:35,200
of this presentation password pass

552
00:19:35,200 --> 00:19:37,679
request uri is the thing that is going

553
00:19:37,679 --> 00:19:39,600
to split through what is going to go

554
00:19:39,600 --> 00:19:42,320
through path traversal and what is not

555
00:19:42,320 --> 00:19:44,400
uh other than that it is going to check

556
00:19:44,400 --> 00:19:46,559
if the path is absolute and not

557
00:19:46,559 --> 00:19:47,520
relative

558
00:19:47,520 --> 00:19:50,320
and uh and and lastly if the enforce the

559
00:19:50,320 --> 00:19:52,480
current truth is happening or not in if

560
00:19:52,480 --> 00:19:54,240
it's if it's not in our current route

561
00:19:54,240 --> 00:19:56,320
it's going to change it to current truth

562
00:19:56,320 --> 00:19:58,000
and then load the file and what's

563
00:19:58,000 --> 00:20:00,080
happening again it's going to check for

564
00:20:00,080 --> 00:20:01,679
the path is absolute it's going to go

565
00:20:01,679 --> 00:20:03,600
through the security checks and by that

566
00:20:03,600 --> 00:20:06,320
going to return to the to the original

567
00:20:06,320 --> 00:20:09,039
code and then load the uh the value the

568
00:20:09,039 --> 00:20:12,000
value file if it's uh if all

569
00:20:12,000 --> 00:20:14,400
went well now why i mentioned the parse

570
00:20:14,400 --> 00:20:16,159
request uri is very very important

571
00:20:16,159 --> 00:20:18,320
because as mentioned before those kind

572
00:20:18,320 --> 00:20:21,280
of values can have http https values as

573
00:20:21,280 --> 00:20:23,120
well and for a good reason maybe you

574
00:20:23,120 --> 00:20:24,799
have those kind of values somewhere on

575
00:20:24,799 --> 00:20:26,640
github and you want to uh to pull from

576
00:20:26,640 --> 00:20:27,440
there

577
00:20:27,440 --> 00:20:28,799
as i said maybe it's a different team

578
00:20:28,799 --> 00:20:30,240
maybe it's a different package you would

579
00:20:30,240 --> 00:20:32,640
like to load and by that you will have

580
00:20:32,640 --> 00:20:34,159
this kind of control this is a very

581
00:20:34,159 --> 00:20:35,520
basic it ops

582
00:20:35,520 --> 00:20:37,840
and very common git ops

583
00:20:37,840 --> 00:20:38,880
request

584
00:20:38,880 --> 00:20:41,679
um and why it's important because here

585
00:20:41,679 --> 00:20:43,280
here is the step that you need to be

586
00:20:43,280 --> 00:20:45,280
very very careful and really understand

587
00:20:45,280 --> 00:20:46,799
what is going on

588
00:20:46,799 --> 00:20:50,000
so reading the actual documentation from

589
00:20:50,000 --> 00:20:53,039
golang uh paris request uri is as i said

590
00:20:53,039 --> 00:20:54,880
this is a goal and the library nothing

591
00:20:54,880 --> 00:20:58,080
uh related to algo cd internally

592
00:20:58,080 --> 00:21:00,720
that that the uri password is parsing a

593
00:21:00,720 --> 00:21:04,240
raw url into a uri structure

594
00:21:04,240 --> 00:21:07,200
it assumes that url has received an http

595
00:21:07,200 --> 00:21:10,480
request so the url is interpreted only

596
00:21:10,480 --> 00:21:13,360
as an absolute uri or an or an absolute

597
00:21:13,360 --> 00:21:15,039
path

598
00:21:15,039 --> 00:21:18,240
if you noticed um you can you can you

599
00:21:18,240 --> 00:21:20,559
can somehow mix the two and think that

600
00:21:20,559 --> 00:21:24,159
the default of parsing the uri is going

601
00:21:24,159 --> 00:21:25,280
going to be

602
00:21:25,280 --> 00:21:28,000
uh the absolute path but that's

603
00:21:28,000 --> 00:21:30,080
what will happen if i'm going to present

604
00:21:30,080 --> 00:21:31,440
an absolute path

605
00:21:31,440 --> 00:21:34,640
uh to the 2d parse request uri

606
00:21:34,640 --> 00:21:36,640
simply put the parse request uri will

607
00:21:36,640 --> 00:21:38,720
think of it as a uri

608
00:21:38,720 --> 00:21:41,360
and by that will not will ignore it as

609
00:21:41,360 --> 00:21:44,000
an absolute path altogether so i'll be

610
00:21:44,000 --> 00:21:45,679
able to input absolute pattern it will

611
00:21:45,679 --> 00:21:47,760
never go through the path that reversal

612
00:21:47,760 --> 00:21:50,080
go uh functions

613
00:21:50,080 --> 00:21:51,440
and by that

614
00:21:51,440 --> 00:21:53,200
that's pretty easy for now once you

615
00:21:53,200 --> 00:21:54,480
understand that those kind of

616
00:21:54,480 --> 00:21:55,760
application repositories are

617
00:21:55,760 --> 00:21:58,000
deterministic that you can first see

618
00:21:58,000 --> 00:21:59,360
them in terms of if you have the

619
00:21:59,360 --> 00:22:01,360
application name you are you can you can

620
00:22:01,360 --> 00:22:04,080
contrast construct the whole path to it

621
00:22:04,080 --> 00:22:05,520
and by that to read those kind of

622
00:22:05,520 --> 00:22:07,919
secrets and also not mentioning not

623
00:22:07,919 --> 00:22:10,400
mentioning here that the actual

624
00:22:10,400 --> 00:22:11,520
uh

625
00:22:11,520 --> 00:22:13,760
error returned if you have an error it's

626
00:22:13,760 --> 00:22:15,679
very verbose so you can understand from

627
00:22:15,679 --> 00:22:17,280
it a lot about the system structure a

628
00:22:17,280 --> 00:22:19,120
lot of about the files that are residing

629
00:22:19,120 --> 00:22:20,799
or not residing and by that you can

630
00:22:20,799 --> 00:22:23,280
enumerate those to have a better uh to

631
00:22:23,280 --> 00:22:25,120
have a better homing down onto the

632
00:22:25,120 --> 00:22:27,360
target that you have in mind

633
00:22:27,360 --> 00:22:29,919
and as said all of that together comes

634
00:22:29,919 --> 00:22:32,720
into a circumvention of the actual

635
00:22:32,720 --> 00:22:35,039
uh platform and by that you can read

636
00:22:35,039 --> 00:22:38,080
secrets uh about of the other

637
00:22:38,080 --> 00:22:39,919
applications and as i said we're going

638
00:22:39,919 --> 00:22:41,600
to go through some extended if you have

639
00:22:41,600 --> 00:22:44,400
the time some extended attacks uh

640
00:22:44,400 --> 00:22:46,240
besides that but this is the most

641
00:22:46,240 --> 00:22:47,919
important one and common one in our

642
00:22:47,919 --> 00:22:49,360
discussion

643
00:22:49,360 --> 00:22:51,760
to close up the attack flow uh so an

644
00:22:51,760 --> 00:22:53,200
attacker which is a user or an

645
00:22:53,200 --> 00:22:54,720
authorized user on the system and a

646
00:22:54,720 --> 00:22:56,159
different other authorized user on the

647
00:22:56,159 --> 00:22:57,200
system

648
00:22:57,200 --> 00:22:58,640
logs into the

649
00:22:58,640 --> 00:23:01,679
system and provide it with a malicious

650
00:23:01,679 --> 00:23:03,200
helm chart

651
00:23:03,200 --> 00:23:04,240
yaml

652
00:23:04,240 --> 00:23:06,000
and by that the helm chart will point

653
00:23:06,000 --> 00:23:08,480
into different files it can be like

654
00:23:08,480 --> 00:23:10,880
thousands of files and read a different

655
00:23:10,880 --> 00:23:13,440
files on the system and once a file is

656
00:23:13,440 --> 00:23:14,320
um

657
00:23:14,320 --> 00:23:16,880
is processed as if the system can

658
00:23:16,880 --> 00:23:18,799
process a file it will load those kind

659
00:23:18,799 --> 00:23:20,559
of values and will gain insight in those

660
00:23:20,559 --> 00:23:23,360
kind of secrets and again it's going to

661
00:23:23,360 --> 00:23:24,880
because of the absolute pattern that we

662
00:23:24,880 --> 00:23:26,559
are going to provide it with it's going

663
00:23:26,559 --> 00:23:29,440
to traverse the path reversal traversal

664
00:23:29,440 --> 00:23:31,919
and but reversal algorithm and by that

665
00:23:31,919 --> 00:23:33,840
is going to uh to actually get to the

666
00:23:33,840 --> 00:23:36,000
files then the attacker will read it off

667
00:23:36,000 --> 00:23:38,400
screen or under the api because it will

668
00:23:38,400 --> 00:23:40,480
be present on on their new application

669
00:23:40,480 --> 00:23:42,000
that they try to build with the helm

670
00:23:42,000 --> 00:23:44,559
chart and and the whole circle comes in

671
00:23:44,559 --> 00:23:46,320
to close

672
00:23:46,320 --> 00:23:48,880
uh the extension of those of this attack

673
00:23:48,880 --> 00:23:51,200
is uh maybe two extensions one is that

674
00:23:51,200 --> 00:23:51,840
we

675
00:23:51,840 --> 00:23:53,360
not mentioned here but there is another

676
00:23:53,360 --> 00:23:55,120
variation to the attack that the actual

677
00:23:55,120 --> 00:23:58,480
agua cities ago cd uh people found by by

678
00:23:58,480 --> 00:24:00,159
themselves that there isn't a

679
00:24:00,159 --> 00:24:02,720
possibility of the helm child to be uh

680
00:24:02,720 --> 00:24:04,720
presented as a compressed helm chart and

681
00:24:04,720 --> 00:24:07,679
a compressed helmshop can also be using

682
00:24:07,679 --> 00:24:10,640
a potentially a sim links within the

683
00:24:10,640 --> 00:24:12,559
files that are within the compressed

684
00:24:12,559 --> 00:24:13,520
tarball

685
00:24:13,520 --> 00:24:15,520
and those kind of siblings can also be

686
00:24:15,520 --> 00:24:18,559
interpreted to uh to different uh

687
00:24:18,559 --> 00:24:20,240
paths and you can point to different

688
00:24:20,240 --> 00:24:22,159
paths on the file system but again this

689
00:24:22,159 --> 00:24:23,840
is a much more extended i would say a

690
00:24:23,840 --> 00:24:25,919
bit more complicated but but a very

691
00:24:25,919 --> 00:24:28,400
valid attack path the second one is that

692
00:24:28,400 --> 00:24:31,279
not only repositories are are residing

693
00:24:31,279 --> 00:24:34,320
on the ripple server uh and one uh a

694
00:24:34,320 --> 00:24:36,240
very crucial example is that plugins are

695
00:24:36,240 --> 00:24:37,679
also can be presented or at least

696
00:24:37,679 --> 00:24:40,320
plug-in uh files can be presented on the

697
00:24:40,320 --> 00:24:42,559
repo server itself i won't go into

698
00:24:42,559 --> 00:24:44,720
details of why but this is again a very

699
00:24:44,720 --> 00:24:46,640
common scenario once you are installing

700
00:24:46,640 --> 00:24:48,960
some some plugins on the system and if

701
00:24:48,960 --> 00:24:50,400
those plugins have values that you would

702
00:24:50,400 --> 00:24:52,559
like to keep a secret those can be read

703
00:24:52,559 --> 00:24:54,720
if they are under json or uml that can

704
00:24:54,720 --> 00:24:56,400
be read by the same attack

705
00:24:56,400 --> 00:24:58,640
path

706
00:24:58,720 --> 00:25:00,400
uh remediation

707
00:25:00,400 --> 00:25:02,240
uh so first of all as uh as i said

708
00:25:02,240 --> 00:25:04,640
remediation is the uh first of all you

709
00:25:04,640 --> 00:25:07,600
have to have a multi-user uh on a system

710
00:25:07,600 --> 00:25:08,960
you need to see that you don't have any

711
00:25:08,960 --> 00:25:10,480
other users that you are not familiar

712
00:25:10,480 --> 00:25:12,720
with or not necessary users that will

713
00:25:12,720 --> 00:25:15,200
minimize the risk and of course if

714
00:25:15,200 --> 00:25:17,039
planned for an upgrade for the igo city

715
00:25:17,039 --> 00:25:20,080
system starting from 2.2.24

716
00:25:20,080 --> 00:25:22,000
and above you'll be

717
00:25:22,000 --> 00:25:24,640
uh the cve is not relevant to those

718
00:25:24,640 --> 00:25:26,880
um in general the path reversal

719
00:25:26,880 --> 00:25:28,480
traversal ingestion system was

720
00:25:28,480 --> 00:25:31,360
completely replaced on as an overhaul uh

721
00:25:31,360 --> 00:25:34,320
by the agua city folks um and by that

722
00:25:34,320 --> 00:25:36,159
it's the the attack is not relevant at

723
00:25:36,159 --> 00:25:38,000
least for for the time being and this

724
00:25:38,000 --> 00:25:39,520
kind of attacks is not relevant to the

725
00:25:39,520 --> 00:25:41,200
old path traversal

726
00:25:41,200 --> 00:25:42,240
issue and it's

727
00:25:42,240 --> 00:25:43,840
it is much more robust right now and

728
00:25:43,840 --> 00:25:45,919
much a bit more generic in the way it

729
00:25:45,919 --> 00:25:47,679
was written

730
00:25:47,679 --> 00:25:49,840
long-term remediation is more of the out

731
00:25:49,840 --> 00:25:51,760
for the advocacy and the community but

732
00:25:51,760 --> 00:25:53,440
of course the monolithic

733
00:25:53,440 --> 00:25:55,840
and flat in terms of permissions

734
00:25:55,840 --> 00:25:58,159
file system for the repo server it's a

735
00:25:58,159 --> 00:26:00,159
very dangerous culprit for for future

736
00:26:00,159 --> 00:26:02,960
attacks as well so uh i i would like to

737
00:26:02,960 --> 00:26:04,480
see some kind of architectural change

738
00:26:04,480 --> 00:26:06,480
and we're actually discussing some of

739
00:26:06,480 --> 00:26:07,840
that those on

740
00:26:07,840 --> 00:26:09,440
several threads

741
00:26:09,440 --> 00:26:12,159
and and lastly implement the file level

742
00:26:12,159 --> 00:26:14,559
permission model uh for the if you

743
00:26:14,559 --> 00:26:16,240
especially if you have an rack if you

744
00:26:16,240 --> 00:26:17,760
have something that you can you can

745
00:26:17,760 --> 00:26:20,320
control or maybe from user perspective

746
00:26:20,320 --> 00:26:22,400
so you'll be able to split those into

747
00:26:22,400 --> 00:26:24,559
different levels

748
00:26:24,559 --> 00:26:26,799
and for organizations audit your files

749
00:26:26,799 --> 00:26:28,400
audit your users so you'll be able to

750
00:26:28,400 --> 00:26:30,159
catch those kind of attempts once

751
00:26:30,159 --> 00:26:31,840
something is happening and that's not

752
00:26:31,840 --> 00:26:34,080
supposed to be on the system

753
00:26:34,080 --> 00:26:36,720
as a summary and conclusion for that uh

754
00:26:36,720 --> 00:26:39,520
helm chart yaml itself many facts

755
00:26:39,520 --> 00:26:42,000
manifests can contain malicious uh

756
00:26:42,000 --> 00:26:43,840
fields those malicious fields can

757
00:26:43,840 --> 00:26:45,919
can lead to secrets revealing on systems

758
00:26:45,919 --> 00:26:49,440
that are using multi-user approaches and

759
00:26:49,440 --> 00:26:51,360
since sensitive data can be exposed by

760
00:26:51,360 --> 00:26:54,000
that the path traversal was suspected

761
00:26:54,000 --> 00:26:56,159
and also of course the the big takeaway

762
00:26:56,159 --> 00:26:58,159
here is is of course you need those kind

763
00:26:58,159 --> 00:27:00,159
of tests by the community and if i can

764
00:27:00,159 --> 00:27:02,000
contribute something to the community

765
00:27:02,000 --> 00:27:04,400
this is my contribution

766
00:27:04,400 --> 00:27:06,720
and the special thanks for the argo cd

767
00:27:06,720 --> 00:27:09,039
uh folks that were more than amazing

768
00:27:09,039 --> 00:27:11,760
i've been through maybe tens uh of those

769
00:27:11,760 --> 00:27:14,320
kind of cve disclosures this was the

770
00:27:14,320 --> 00:27:16,880
fastest most professional um engagement

771
00:27:16,880 --> 00:27:19,520
i had in years uh so thank you for that

772
00:27:19,520 --> 00:27:21,840
for the uh seriousness you take the your

773
00:27:21,840 --> 00:27:23,200
and professionalism you take the

774
00:27:23,200 --> 00:27:26,559
security of your users and ecosystem

775
00:27:26,559 --> 00:27:28,240
so thank you for that and thank you for

776
00:27:28,240 --> 00:27:31,200
the organizers uh to have me on stage

777
00:27:31,200 --> 00:27:32,760
thank you for listening

778
00:27:32,760 --> 00:27:36,399
[Applause]

779
00:27:36,399 --> 00:27:38,479
you

