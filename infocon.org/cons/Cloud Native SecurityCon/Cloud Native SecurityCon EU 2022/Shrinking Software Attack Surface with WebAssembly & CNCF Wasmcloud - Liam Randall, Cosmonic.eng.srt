1
00:00:00,080 --> 00:00:02,560
okay so um we've got a lot of ground to

2
00:00:02,560 --> 00:00:03,600
cover and i'm not going to waste

3
00:00:03,600 --> 00:00:06,000
anybody's time at least i hope not

4
00:00:06,000 --> 00:00:09,519
so this is me uh i'm a longtime security

5
00:00:09,519 --> 00:00:12,320
entrepreneur and engineer i was

6
00:00:12,320 --> 00:00:13,040
the

7
00:00:13,040 --> 00:00:15,200
founder of the brozee company if you're

8
00:00:15,200 --> 00:00:16,239
familiar with that that's one of the

9
00:00:16,239 --> 00:00:18,160
open source communities i built about 15

10
00:00:18,160 --> 00:00:20,560
years ago it was the first check into

11
00:00:20,560 --> 00:00:22,400
osquery and convinced mike and zach to

12
00:00:22,400 --> 00:00:24,800
leave and start the os query movement

13
00:00:24,800 --> 00:00:26,240
that is manifested in a couple of

14
00:00:26,240 --> 00:00:28,080
companies i created one of the first

15
00:00:28,080 --> 00:00:29,519
kubernetes companies that was called

16
00:00:29,519 --> 00:00:31,359
critical stack it was a security

17
00:00:31,359 --> 00:00:33,120
ordinance distro actually we used this

18
00:00:33,120 --> 00:00:34,960
amazing little project called psyllium

19
00:00:34,960 --> 00:00:37,520
which now of course has its uh own life

20
00:00:37,520 --> 00:00:40,239
uh and i'm also an investor in cloud

21
00:00:40,239 --> 00:00:42,719
custodian which i open sourced and put

22
00:00:42,719 --> 00:00:45,200
into the cncf while i was at capital one

23
00:00:45,200 --> 00:00:47,440
i helped to co-create wasn't cloud which

24
00:00:47,440 --> 00:00:49,200
we're going to talk about today

25
00:00:49,200 --> 00:00:51,840
and i'm the ceo of cosmonic father of

26
00:00:51,840 --> 00:00:53,440
three i make wine beer and cheese i'm

27
00:00:53,440 --> 00:00:54,879
happy to talk about any of those things

28
00:00:54,879 --> 00:00:56,239
later

29
00:00:56,239 --> 00:00:57,840
so we've got a busy agenda today and

30
00:00:57,840 --> 00:00:59,280
i've kind of broken this out into a

31
00:00:59,280 --> 00:01:00,879
couple of little stories to bring

32
00:01:00,879 --> 00:01:03,199
everybody along together we're going to

33
00:01:03,199 --> 00:01:05,280
start at the beginning with where we are

34
00:01:05,280 --> 00:01:07,040
with the abstraction of containers and

35
00:01:07,040 --> 00:01:08,080
we're going to talk about some of the

36
00:01:08,080 --> 00:01:10,880
leaky abstractions some of the

37
00:01:10,880 --> 00:01:11,840
easy

38
00:01:11,840 --> 00:01:14,159
opportunities that we have to make the

39
00:01:14,159 --> 00:01:16,720
current landscape better

40
00:01:16,720 --> 00:01:19,200
so let's get started with containers and

41
00:01:19,200 --> 00:01:20,799
their assumptions

42
00:01:20,799 --> 00:01:23,600
over the last 20 years of tech we've all

43
00:01:23,600 --> 00:01:26,159
seen these increasing abstractions these

44
00:01:26,159 --> 00:01:28,640
bottoms up platforms that started maybe

45
00:01:28,640 --> 00:01:31,200
in the late 90s with the rise of vmware

46
00:01:31,200 --> 00:01:33,200
and the virtualization products that

47
00:01:33,200 --> 00:01:35,520
quickly transitioned into aws uh and

48
00:01:35,520 --> 00:01:36,960
into the cloud

49
00:01:36,960 --> 00:01:39,200
and it's been a pattern we've gone along

50
00:01:39,200 --> 00:01:40,560
and we've said hey we have this common

51
00:01:40,560 --> 00:01:43,119
infrastructure like the cpu why don't we

52
00:01:43,119 --> 00:01:44,720
share it and make it a platform so we

53
00:01:44,720 --> 00:01:46,799
can continue to build higher to pull

54
00:01:46,799 --> 00:01:49,200
things out of the lives of developers

55
00:01:49,200 --> 00:01:50,720
and the blue on the bottom are the

56
00:01:50,720 --> 00:01:52,479
things we continue to pull out of the

57
00:01:52,479 --> 00:01:54,560
lives of each and every developer or at

58
00:01:54,560 --> 00:01:56,640
least that's the idea i don't think that

59
00:01:56,640 --> 00:01:58,560
we always do a great job but we've done

60
00:01:58,560 --> 00:02:00,240
the same thing with operating systems

61
00:02:00,240 --> 00:02:03,360
containers cloud apis and kubernetes but

62
00:02:03,360 --> 00:02:05,040
the question is

63
00:02:05,040 --> 00:02:08,160
is where do we go from here

64
00:02:08,160 --> 00:02:10,000
now the thing to observe about each one

65
00:02:10,000 --> 00:02:12,319
of these abstractions is is that they

66
00:02:12,319 --> 00:02:14,239
bring a certain number of assumptions

67
00:02:14,239 --> 00:02:17,040
with them so no abstraction is sort of

68
00:02:17,040 --> 00:02:19,520
opinion free and containers bring two

69
00:02:19,520 --> 00:02:21,520
key assumptions one that you're compiled

70
00:02:21,520 --> 00:02:23,840
for a specific cpu the second that

71
00:02:23,840 --> 00:02:25,120
you're going to be running on linux and

72
00:02:25,120 --> 00:02:26,239
you're going to have some sort of linux

73
00:02:26,239 --> 00:02:28,160
oriented security model we'll see that

74
00:02:28,160 --> 00:02:30,720
the modern landscape doesn't really hold

75
00:02:30,720 --> 00:02:32,800
up and today and all day yesterday

76
00:02:32,800 --> 00:02:34,800
you've seen example after example of

77
00:02:34,800 --> 00:02:37,120
these leaky abstractions like log 4j

78
00:02:37,120 --> 00:02:39,519
when you think about above the stack

79
00:02:39,519 --> 00:02:41,200
bleeding into the about the bottom of

80
00:02:41,200 --> 00:02:42,879
the stack here

81
00:02:42,879 --> 00:02:45,680
so let's talk about the attack surface

82
00:02:45,680 --> 00:02:47,760
you've seen a couple examples of this

83
00:02:47,760 --> 00:02:49,360
today so i'll just rush through this one

84
00:02:49,360 --> 00:02:51,760
quickly but i quickly pulled together a

85
00:02:51,760 --> 00:02:54,160
webshell that i wrote in go to simulate

86
00:02:54,160 --> 00:02:56,239
some sort of a vulnerable library and

87
00:02:56,239 --> 00:02:57,840
i've done this example and i can give

88
00:02:57,840 --> 00:02:59,440
you a script if you'd like to do this in

89
00:02:59,440 --> 00:03:00,879
your environment where you can pivot

90
00:03:00,879 --> 00:03:02,640
through your cloud infrastructure and

91
00:03:02,640 --> 00:03:04,159
all of those sorts of things

92
00:03:04,159 --> 00:03:06,159
it's up on my github but there's three

93
00:03:06,159 --> 00:03:07,280
layers that we're going to work with

94
00:03:07,280 --> 00:03:08,480
here today we're going to work with the

95
00:03:08,480 --> 00:03:10,319
container layer

96
00:03:10,319 --> 00:03:12,159
which we're going to look at of course

97
00:03:12,159 --> 00:03:14,239
the obvious idea of shrinking the attack

98
00:03:14,239 --> 00:03:15,920
surface through using

99
00:03:15,920 --> 00:03:17,920
smaller and smaller containers but we'll

100
00:03:17,920 --> 00:03:19,599
talk about the lower bound there and

101
00:03:19,599 --> 00:03:21,519
what's left then we're going to talk

102
00:03:21,519 --> 00:03:23,840
about this vulnerable library which is a

103
00:03:23,840 --> 00:03:26,319
web shell and go there's a forward slash

104
00:03:26,319 --> 00:03:28,879
exact parameter and it simply will take

105
00:03:28,879 --> 00:03:30,319
whatever you pass to that and then

106
00:03:30,319 --> 00:03:33,200
execute it and then there's our business

107
00:03:33,200 --> 00:03:35,440
logic which we unfortunately can't take

108
00:03:35,440 --> 00:03:36,720
out of the application because that's

109
00:03:36,720 --> 00:03:40,319
the whole point of the application

110
00:03:40,480 --> 00:03:42,159
so let's take a look at this

111
00:03:42,159 --> 00:03:43,920
web shell real fast

112
00:03:43,920 --> 00:03:44,640
so

113
00:03:44,640 --> 00:03:46,799
it's running here

114
00:03:46,799 --> 00:03:48,239
there it is in my github if any would

115
00:03:48,239 --> 00:03:49,760
like to pull the code

116
00:03:49,760 --> 00:03:51,599
as well as the other examples but i've

117
00:03:51,599 --> 00:03:53,360
got it essentially running in a few

118
00:03:53,360 --> 00:03:55,360
different containers there's a fedora

119
00:03:55,360 --> 00:03:58,080
container here there is an ubuntu an

120
00:03:58,080 --> 00:04:00,159
alpine and a from scratch and the

121
00:04:00,159 --> 00:04:02,480
general concept is still the same right

122
00:04:02,480 --> 00:04:04,959
with any of these containers you know

123
00:04:04,959 --> 00:04:08,480
you can hit forward slash exec

124
00:04:09,200 --> 00:04:11,760
and you can simply pass commands in so i

125
00:04:11,760 --> 00:04:15,120
could pack pass in ls i could pass in

126
00:04:15,120 --> 00:04:16,959
you know whatever we wanted to do we

127
00:04:16,959 --> 00:04:18,160
could start pivoting through the

128
00:04:18,160 --> 00:04:20,880
infrastructure downloading binaries

129
00:04:20,880 --> 00:04:23,120
and of course the story that everyone in

130
00:04:23,120 --> 00:04:24,960
here i think knows is that by the time

131
00:04:24,960 --> 00:04:27,360
we get to the alpine container there's

132
00:04:27,360 --> 00:04:28,720
nothing

133
00:04:28,720 --> 00:04:31,680
left running in that alpine container

134
00:04:31,680 --> 00:04:33,120
so i'm sorry when we get to the from

135
00:04:33,120 --> 00:04:35,040
scratch container right the from scratch

136
00:04:35,040 --> 00:04:37,680
container doesn't have any operating

137
00:04:37,680 --> 00:04:39,680
system components with it it's this

138
00:04:39,680 --> 00:04:42,320
embracing this principle of having the

139
00:04:42,320 --> 00:04:45,360
smallest surface area possible to attack

140
00:04:45,360 --> 00:04:46,960
and if we try to pass you know even a

141
00:04:46,960 --> 00:04:48,560
simple command here

142
00:04:48,560 --> 00:04:51,040
like ls it just craps out and it says

143
00:04:51,040 --> 00:04:53,199
hey there is no ls because the only

144
00:04:53,199 --> 00:04:55,759
thing in this container is this binary

145
00:04:55,759 --> 00:04:58,800
and that's a great and all from a

146
00:04:58,800 --> 00:05:00,560
perspective of

147
00:05:00,560 --> 00:05:02,960
that particular application

148
00:05:02,960 --> 00:05:05,680
but as a class of problems we're stuck

149
00:05:05,680 --> 00:05:08,080
with these vulnerable libraries because

150
00:05:08,080 --> 00:05:09,440
of the way that we build our

151
00:05:09,440 --> 00:05:10,800
applications

152
00:05:10,800 --> 00:05:12,880
think about all the things that you need

153
00:05:12,880 --> 00:05:14,800
to do once you get to the operating

154
00:05:14,800 --> 00:05:16,880
system to get an effective application

155
00:05:16,880 --> 00:05:20,320
running web servers database connections

156
00:05:20,320 --> 00:05:22,960
logging security compliance risk

157
00:05:22,960 --> 00:05:25,919
management aren't those things common as

158
00:05:25,919 --> 00:05:28,720
well just as common in enterprises as

159
00:05:28,720 --> 00:05:31,759
the operating systems

160
00:05:32,800 --> 00:05:35,199
so if we start to think about what goes

161
00:05:35,199 --> 00:05:37,520
above that stack there in the yellow we

162
00:05:37,520 --> 00:05:39,600
sort of have this obvious problem that

163
00:05:39,600 --> 00:05:41,600
maybe we're not done with abstractions

164
00:05:41,600 --> 00:05:42,960
and we're doing this with things like

165
00:05:42,960 --> 00:05:44,639
istio when you think about doing a layer

166
00:05:44,639 --> 00:05:46,080
3 abstraction we'll look at that in a

167
00:05:46,080 --> 00:05:49,039
second and below that stack because

168
00:05:49,039 --> 00:05:51,520
containers aren't really a full

169
00:05:51,520 --> 00:05:53,360
abstraction away from the underlying

170
00:05:53,360 --> 00:05:54,800
platform you bring with it the

171
00:05:54,800 --> 00:05:56,319
assumptions that you're running on linux

172
00:05:56,319 --> 00:05:58,080
you bring with it the assumptions that

173
00:05:58,080 --> 00:06:00,319
you have a security model that is tied

174
00:06:00,319 --> 00:06:01,840
to linux you actually have two

175
00:06:01,840 --> 00:06:04,000
additional problems there and does this

176
00:06:04,000 --> 00:06:06,720
really fit the modern landscape

177
00:06:06,720 --> 00:06:09,280
so let's talk about today's world

178
00:06:09,280 --> 00:06:11,280
if the last 10 years of security was

179
00:06:11,280 --> 00:06:13,520
dominated by this great lift and shift

180
00:06:13,520 --> 00:06:14,800
into the cloud

181
00:06:14,800 --> 00:06:16,720
the next 10 years of security will be

182
00:06:16,720 --> 00:06:19,280
dominated by this great movement and

183
00:06:19,280 --> 00:06:21,520
build out to where the data is to where

184
00:06:21,520 --> 00:06:24,160
the users are and there's a large number

185
00:06:24,160 --> 00:06:25,440
of reasons for that that we'll talk

186
00:06:25,440 --> 00:06:27,600
about momentarily but even if we were to

187
00:06:27,600 --> 00:06:29,360
build the same application for say

188
00:06:29,360 --> 00:06:31,600
samsung televisions

189
00:06:31,600 --> 00:06:34,400
a website or an edge provider

190
00:06:34,400 --> 00:06:36,319
we have a number of things above

191
00:06:36,319 --> 00:06:38,880
kubernetes and above containers

192
00:06:38,880 --> 00:06:41,360
that become domain specific

193
00:06:41,360 --> 00:06:42,800
each one of those will have you know

194
00:06:42,800 --> 00:06:45,360
cloud fair and fastly will have their

195
00:06:45,360 --> 00:06:47,680
own sql implementation on the edge or

196
00:06:47,680 --> 00:06:49,280
their key value store

197
00:06:49,280 --> 00:06:51,680
in aws you might use redis who knows

198
00:06:51,680 --> 00:06:52,880
what you're going to use down on that

199
00:06:52,880 --> 00:06:56,000
edge on that edge device there

200
00:06:56,000 --> 00:06:58,400
but regardless of what industry you're

201
00:06:58,400 --> 00:07:00,880
here from today every application you

202
00:07:00,880 --> 00:07:03,360
build embraces even more assumptions

203
00:07:03,360 --> 00:07:04,560
than that

204
00:07:04,560 --> 00:07:06,880
all of your customers because of their

205
00:07:06,880 --> 00:07:08,160
experience with the fangs want

206
00:07:08,160 --> 00:07:10,400
applications that are mobile first that

207
00:07:10,400 --> 00:07:13,599
are real time that are available 24 7

208
00:07:13,599 --> 00:07:15,280
that are personalized and proactive and

209
00:07:15,280 --> 00:07:18,000
increasingly enriched by ai and ml

210
00:07:18,000 --> 00:07:20,639
and what that means is is that if you

211
00:07:20,639 --> 00:07:22,639
own those platforms in security for

212
00:07:22,639 --> 00:07:24,960
those platforms your developers have a

213
00:07:24,960 --> 00:07:27,599
common set of requirements above you and

214
00:07:27,599 --> 00:07:29,759
that is an opportunity for you if we

215
00:07:29,759 --> 00:07:31,680
play these forward

216
00:07:31,680 --> 00:07:33,520
even the idea of being available means

217
00:07:33,520 --> 00:07:34,800
you'll be running in at least two

218
00:07:34,800 --> 00:07:35,840
regions

219
00:07:35,840 --> 00:07:38,400
if not multiple clouds and the problem

220
00:07:38,400 --> 00:07:40,560
or opportunity if you will even gets

221
00:07:40,560 --> 00:07:42,560
more than that when you think about all

222
00:07:42,560 --> 00:07:45,199
of the other reasons that the compute is

223
00:07:45,199 --> 00:07:47,759
going to the edge where the data is it's

224
00:07:47,759 --> 00:07:50,240
not just latency and determinism

225
00:07:50,240 --> 00:07:53,120
or performance it's also regulatory

226
00:07:53,120 --> 00:07:54,960
there was an excellent observation

227
00:07:54,960 --> 00:07:58,400
earlier today around the consequences of

228
00:07:58,400 --> 00:07:59,919
data locality

229
00:07:59,919 --> 00:08:01,840
of requirements like you have in china

230
00:08:01,840 --> 00:08:04,639
now that the data no longer leaves

231
00:08:04,639 --> 00:08:07,039
for processing or for storage

232
00:08:07,039 --> 00:08:09,120
so if your developers are serving those

233
00:08:09,120 --> 00:08:11,599
markets or increasingly even european

234
00:08:11,599 --> 00:08:14,479
markets you need to deliver your

235
00:08:14,479 --> 00:08:18,000
execution your applications to clouds

236
00:08:18,000 --> 00:08:20,319
that may not be your preference

237
00:08:20,319 --> 00:08:22,639
if you're an aws shop you may be

238
00:08:22,639 --> 00:08:24,879
required to build on tencent or an

239
00:08:24,879 --> 00:08:27,039
alibaba

240
00:08:27,039 --> 00:08:29,039
i've played this forward this was the

241
00:08:29,039 --> 00:08:30,720
second performing article on the new

242
00:08:30,720 --> 00:08:32,640
stack last year if you follow that qr

243
00:08:32,640 --> 00:08:35,120
code you can read a six or eight pager

244
00:08:35,120 --> 00:08:36,719
about it that kind of walk through those

245
00:08:36,719 --> 00:08:39,279
challenges in a little bit more detail

246
00:08:39,279 --> 00:08:41,760
but the big idea is that

247
00:08:41,760 --> 00:08:44,480
kubernetes gives you portable execution

248
00:08:44,480 --> 00:08:47,040
containers give you portable operating

249
00:08:47,040 --> 00:08:49,200
systems to a point

250
00:08:49,200 --> 00:08:53,120
but applications are not portable

251
00:08:53,120 --> 00:08:54,959
and it really highlights that there's

252
00:08:54,959 --> 00:08:56,480
actually three big problems that you're

253
00:08:56,480 --> 00:08:57,920
dealing with

254
00:08:57,920 --> 00:09:00,560
the line above where your platforms now

255
00:09:00,560 --> 00:09:03,600
are applications and a ton of garbage

256
00:09:03,600 --> 00:09:06,000
and that garbage continues to be found

257
00:09:06,000 --> 00:09:07,839
vulnerable over and over and over again

258
00:09:07,839 --> 00:09:10,240
and it's common garbage and below that

259
00:09:10,240 --> 00:09:12,640
line because you're using containers

260
00:09:12,640 --> 00:09:15,120
you are embracing this these two

261
00:09:15,120 --> 00:09:17,120
assumptions in the platform about

262
00:09:17,120 --> 00:09:19,519
portability and the portability of your

263
00:09:19,519 --> 00:09:20,720
security

264
00:09:20,720 --> 00:09:22,880
there are times when you want to bring

265
00:09:22,880 --> 00:09:25,680
your applications to places where you

266
00:09:25,680 --> 00:09:28,160
don't have a cpu or below the lower

267
00:09:28,160 --> 00:09:29,760
bound of kubernetes

268
00:09:29,760 --> 00:09:31,519
think about ios

269
00:09:31,519 --> 00:09:34,000
or inside of web browsers possibly the

270
00:09:34,000 --> 00:09:36,880
two most popular deployment platforms on

271
00:09:36,880 --> 00:09:39,519
the planet period and neither of those

272
00:09:39,519 --> 00:09:42,640
uses containers

273
00:09:43,120 --> 00:09:45,279
so let's introduce webassembly now just

274
00:09:45,279 --> 00:09:46,800
by a show of hand who has heard of

275
00:09:46,800 --> 00:09:48,800
webassembly this is going to be like a

276
00:09:48,800 --> 00:09:50,320
linear function that falls off super

277
00:09:50,320 --> 00:09:53,120
fast who's using webassembly

278
00:09:53,120 --> 00:09:54,800
one person two

279
00:09:54,800 --> 00:09:56,640
alan allen spoke at webassembly day

280
00:09:56,640 --> 00:09:57,760
yesterday

281
00:09:57,760 --> 00:09:59,519
not very many people

282
00:09:59,519 --> 00:10:01,360
well let me shock you and let you know

283
00:10:01,360 --> 00:10:03,519
that you're already using webassembly

284
00:10:03,519 --> 00:10:06,640
who's using envoy

285
00:10:06,959 --> 00:10:08,720
you're using webassembly

286
00:10:08,720 --> 00:10:11,200
uh who's using kube warden

287
00:10:11,200 --> 00:10:12,399
anybody

288
00:10:12,399 --> 00:10:13,760
you would be using webassembly if you

289
00:10:13,760 --> 00:10:14,800
were we'll get we'll get to more

290
00:10:14,800 --> 00:10:15,920
deployments

291
00:10:15,920 --> 00:10:17,680
finton ryan the gartner analyst who's

292
00:10:17,680 --> 00:10:19,920
covering webassembly wrote webassembly

293
00:10:19,920 --> 00:10:21,440
is the one technology you don't need a

294
00:10:21,440 --> 00:10:23,120
strategy to adopt

295
00:10:23,120 --> 00:10:25,760
because you're already using it

296
00:10:25,760 --> 00:10:27,839
so let me shock you with this big idea

297
00:10:27,839 --> 00:10:29,839
behind webassembly and stop me if you've

298
00:10:29,839 --> 00:10:31,839
heard this one before write once run

299
00:10:31,839 --> 00:10:32,880
anywhere

300
00:10:32,880 --> 00:10:36,160
right java silverlight flash we've tried

301
00:10:36,160 --> 00:10:37,440
that

302
00:10:37,440 --> 00:10:39,360
those were all um

303
00:10:39,360 --> 00:10:41,440
initiatives that were begun by single

304
00:10:41,440 --> 00:10:43,600
companies that were plug-in based that

305
00:10:43,600 --> 00:10:46,320
you had to bring those capabilities to

306
00:10:46,320 --> 00:10:48,399
your deployment environment and the

307
00:10:48,399 --> 00:10:50,320
problem there there was many problems

308
00:10:50,320 --> 00:10:51,920
but one competitors weren't going to

309
00:10:51,920 --> 00:10:53,600
embrace each other

310
00:10:53,600 --> 00:10:55,519
containers were marvelous because they

311
00:10:55,519 --> 00:10:57,519
got baked into the linux internal c

312
00:10:57,519 --> 00:10:59,600
groups and name spaces so we have this

313
00:10:59,600 --> 00:11:01,680
common platform of deployment to build

314
00:11:01,680 --> 00:11:04,240
on and the vision behind web assembly

315
00:11:04,240 --> 00:11:06,240
that you already have today as an

316
00:11:06,240 --> 00:11:08,800
opportunity is is that webassembly is

317
00:11:08,800 --> 00:11:10,880
already running and supported on all of

318
00:11:10,880 --> 00:11:12,399
your devices

319
00:11:12,399 --> 00:11:14,800
it runs on all of your mobile browsers

320
00:11:14,800 --> 00:11:17,040
all of the major ones anyway on both

321
00:11:17,040 --> 00:11:19,760
mobile and your desktop versions

322
00:11:19,760 --> 00:11:22,800
so you've seen early adopters rush to

323
00:11:22,800 --> 00:11:25,440
embrace webassembly like adobe like

324
00:11:25,440 --> 00:11:28,240
google folks that understand the impact

325
00:11:28,240 --> 00:11:30,800
and are launching product suites on the

326
00:11:30,800 --> 00:11:33,680
that sort of seamlessly blend this idea

327
00:11:33,680 --> 00:11:36,240
between front ends and back ends because

328
00:11:36,240 --> 00:11:38,399
there's really a common run time that

329
00:11:38,399 --> 00:11:40,079
now transcends the deployment

330
00:11:40,079 --> 00:11:41,920
environment now webassembly is pretty

331
00:11:41,920 --> 00:11:43,600
cool unlike java it doesn't come with a

332
00:11:43,600 --> 00:11:46,000
language it's a compilation target so

333
00:11:46,000 --> 00:11:48,480
theoretically all languages and today

334
00:11:48,480 --> 00:11:51,279
many languages can be ported directly

335
00:11:51,279 --> 00:11:54,000
into webassembly it's incredibly fast

336
00:11:54,000 --> 00:11:55,519
safe and secure think of it like a

337
00:11:55,519 --> 00:11:57,680
portable cpu that you can put inside of

338
00:11:57,680 --> 00:12:00,399
things including other applications one

339
00:12:00,399 --> 00:12:03,440
of the big use cases it's polyglot and

340
00:12:03,440 --> 00:12:05,120
because it's so small and it doesn't

341
00:12:05,120 --> 00:12:06,800
include all the overhead of starting a

342
00:12:06,800 --> 00:12:09,680
container going from zero to one or the

343
00:12:09,680 --> 00:12:12,720
cold start problem is uh minimalized

344
00:12:12,720 --> 00:12:15,120
with a web assembly this article linked

345
00:12:15,120 --> 00:12:17,120
here talks about the sort of cold start

346
00:12:17,120 --> 00:12:20,639
time between even optimized containers

347
00:12:20,639 --> 00:12:23,600
versus a web assembly

348
00:12:23,600 --> 00:12:25,760
but uh let's talk about the two problems

349
00:12:25,760 --> 00:12:28,399
below the line below the platform here

350
00:12:28,399 --> 00:12:30,320
when we talked about that landscape that

351
00:12:30,320 --> 00:12:34,000
transcended uh edge computing and uh

352
00:12:34,000 --> 00:12:36,480
data centers and clouds uh they went all

353
00:12:36,480 --> 00:12:38,399
the way down to the endpoints i want to

354
00:12:38,399 --> 00:12:40,880
point out that that is a problem a

355
00:12:40,880 --> 00:12:42,720
portability problem that you have even

356
00:12:42,720 --> 00:12:44,240
if you're in a single cloud provider

357
00:12:44,240 --> 00:12:45,279
today

358
00:12:45,279 --> 00:12:47,760
think about if you're in aws and you'd

359
00:12:47,760 --> 00:12:49,600
like to start using those new gravitron

360
00:12:49,600 --> 00:12:51,120
cpus

361
00:12:51,120 --> 00:12:52,880
because containers have an assumption

362
00:12:52,880 --> 00:12:54,800
that you're compiled and built for a

363
00:12:54,800 --> 00:12:57,200
specific cpu you're setting up another

364
00:12:57,200 --> 00:12:59,680
whole pipeline to build an armed version

365
00:12:59,680 --> 00:13:01,519
to run on those cpus

366
00:13:01,519 --> 00:13:05,440
and uh alibaba has an arm cpu an x86 and

367
00:13:05,440 --> 00:13:06,959
a risk 5.

368
00:13:06,959 --> 00:13:07,760
the

369
00:13:07,760 --> 00:13:10,800
increasing number and diversity of cpus

370
00:13:10,800 --> 00:13:12,880
that we see is going to continue to

371
00:13:12,880 --> 00:13:14,079
accelerate

372
00:13:14,079 --> 00:13:16,639
both amazon and google have custom gpus

373
00:13:16,639 --> 00:13:18,160
and tpus now

374
00:13:18,160 --> 00:13:20,399
so this is a problem or opportunity for

375
00:13:20,399 --> 00:13:21,680
you to embrace from the portability

376
00:13:21,680 --> 00:13:22,880
perspective

377
00:13:22,880 --> 00:13:24,880
well let's talk about the security model

378
00:13:24,880 --> 00:13:27,120
that comes with webassembly

379
00:13:27,120 --> 00:13:29,839
webassembly is deny by default for

380
00:13:29,839 --> 00:13:32,720
everything and this is a concept that

381
00:13:32,720 --> 00:13:34,639
you're already familiar with this

382
00:13:34,639 --> 00:13:37,120
capability driven security model the

383
00:13:37,120 --> 00:13:39,920
idea that to get access to anything you

384
00:13:39,920 --> 00:13:42,560
need explicit permission from a user and

385
00:13:42,560 --> 00:13:45,120
you're already embracing this idea when

386
00:13:45,120 --> 00:13:48,000
you install web apps or when you browse

387
00:13:48,000 --> 00:13:50,880
to a web version of a i'm sorry when you

388
00:13:50,880 --> 00:13:53,199
install native ios apps here or when you

389
00:13:53,199 --> 00:13:56,880
browse to a native version of a web web

390
00:13:56,880 --> 00:13:58,880
version of an app and it says this app

391
00:13:58,880 --> 00:14:01,040
wants to use your microphone

392
00:14:01,040 --> 00:14:04,320
this app wants to move you know use your

393
00:14:04,320 --> 00:14:06,560
uh you know use your capabilities here

394
00:14:06,560 --> 00:14:08,000
and if you want a peek of what the

395
00:14:08,000 --> 00:14:09,519
future looks like

396
00:14:09,519 --> 00:14:11,920
simply a glance at

397
00:14:11,920 --> 00:14:14,160
your chrome settings here for each page

398
00:14:14,160 --> 00:14:16,880
and you can start to see that

399
00:14:16,880 --> 00:14:19,440
modern web browsers are presenting an

400
00:14:19,440 --> 00:14:21,920
abstracted set of capabilities that are

401
00:14:21,920 --> 00:14:24,880
common to the applications above them

402
00:14:24,880 --> 00:14:27,199
and that explicit level of permission

403
00:14:27,199 --> 00:14:29,600
the future of computing looks more like

404
00:14:29,600 --> 00:14:32,480
this than it does the cloud apis that

405
00:14:32,480 --> 00:14:35,279
you're building on now

406
00:14:35,279 --> 00:14:37,279
so for those first two problems that we

407
00:14:37,279 --> 00:14:39,600
talked about that are below the stack

408
00:14:39,600 --> 00:14:42,720
webassembly gives you increasing options

409
00:14:42,720 --> 00:14:44,880
and this is not a docker or container

410
00:14:44,880 --> 00:14:46,639
versus webassembly

411
00:14:46,639 --> 00:14:49,279
talk or even opportunity because you can

412
00:14:49,279 --> 00:14:51,040
go turtles all the way down if you want

413
00:14:51,040 --> 00:14:53,199
you can take webassembly or our

414
00:14:53,199 --> 00:14:55,120
framework wasmcloud you can put it in a

415
00:14:55,120 --> 00:14:57,279
container you can run it on kubernetes

416
00:14:57,279 --> 00:14:59,600
you can run that in the cloud on real

417
00:14:59,600 --> 00:15:01,680
hardware or manage virtual hardware all

418
00:15:01,680 --> 00:15:02,959
the way down

419
00:15:02,959 --> 00:15:05,120
and you still get most of the benefits

420
00:15:05,120 --> 00:15:07,519
that are here

421
00:15:07,519 --> 00:15:09,360
and when we talked about

422
00:15:09,360 --> 00:15:11,199
the places where you're already using

423
00:15:11,199 --> 00:15:13,760
webassembly or wasm for short you're

424
00:15:13,760 --> 00:15:15,680
already embracing it everywhere who's

425
00:15:15,680 --> 00:15:16,880
using

426
00:15:16,880 --> 00:15:19,920
aws amazon prime right to watch videos

427
00:15:19,920 --> 00:15:22,800
right you have a samsung tv a sony tv

428
00:15:22,800 --> 00:15:25,040
they did this incredible blog post about

429
00:15:25,040 --> 00:15:27,760
how they're using webassembly to deploy

430
00:15:27,760 --> 00:15:31,600
capabilities down to over 8 000 unique

431
00:15:31,600 --> 00:15:34,320
cpu os combinations that are out in the

432
00:15:34,320 --> 00:15:35,279
field

433
00:15:35,279 --> 00:15:37,680
that's a good example of a

434
00:15:37,680 --> 00:15:39,839
cutting edge company that is embracing

435
00:15:39,839 --> 00:15:42,399
this mentality in delivering solutions

436
00:15:42,399 --> 00:15:44,160
uh to their customers

437
00:15:44,160 --> 00:15:47,040
a crosslit is a project that a developer

438
00:15:47,040 --> 00:15:49,440
on our team taylor thomas

439
00:15:49,440 --> 00:15:50,880
works on with a variety of other

440
00:15:50,880 --> 00:15:52,959
developers it enables direct

441
00:15:52,959 --> 00:15:55,040
orchestration of webassembly in

442
00:15:55,040 --> 00:15:57,759
kubernetes and things like envoy or kube

443
00:15:57,759 --> 00:16:00,720
warden and many other cncf projects are

444
00:16:00,720 --> 00:16:02,959
taking webassembly and embedding it

445
00:16:02,959 --> 00:16:06,079
inside of their own applications why

446
00:16:06,079 --> 00:16:07,680
because of all the reasons that we just

447
00:16:07,680 --> 00:16:08,880
talked about

448
00:16:08,880 --> 00:16:10,399
if you want to customize your

449
00:16:10,399 --> 00:16:12,639
application if you're building some sort

450
00:16:12,639 --> 00:16:15,120
of a message queue expect all of these

451
00:16:15,120 --> 00:16:17,440
message queue type things like infineon

452
00:16:17,440 --> 00:16:18,320
or

453
00:16:18,320 --> 00:16:21,120
whatever they are to put a webassembly

454
00:16:21,120 --> 00:16:22,320
inside of them so that you could

455
00:16:22,320 --> 00:16:24,800
customize streams on the fly if you're a

456
00:16:24,800 --> 00:16:27,360
platform builder what would you want you

457
00:16:27,360 --> 00:16:29,519
would want a technology that

458
00:16:29,519 --> 00:16:31,759
is maybe polyglot is fast safe and

459
00:16:31,759 --> 00:16:34,480
secure so webassembly fits a lot of a

460
00:16:34,480 --> 00:16:37,199
lot of the bill there

461
00:16:37,199 --> 00:16:39,920
so let's talk about the problems above

462
00:16:39,920 --> 00:16:41,920
the stack which i will colloquially call

463
00:16:41,920 --> 00:16:43,920
boilerplate farming and i would just

464
00:16:43,920 --> 00:16:45,120
observe that the problem with

465
00:16:45,120 --> 00:16:46,720
applications is that they're full of

466
00:16:46,720 --> 00:16:48,639
code

467
00:16:48,639 --> 00:16:50,320
and by that i simply mean that they're

468
00:16:50,320 --> 00:16:53,279
full of the wrong types of code

469
00:16:53,279 --> 00:16:54,800
because webassembly gives us some

470
00:16:54,800 --> 00:16:56,720
opportunities for the portability and a

471
00:16:56,720 --> 00:16:58,959
security model that's portability

472
00:16:58,959 --> 00:17:01,920
but what about the disaster that is this

473
00:17:01,920 --> 00:17:04,319
top layer here now

474
00:17:04,319 --> 00:17:06,720
right this idea that we take these

475
00:17:06,720 --> 00:17:09,119
applications and we tightly couple them

476
00:17:09,119 --> 00:17:11,679
with a specific set of dependencies

477
00:17:11,679 --> 00:17:15,919
you bake log4j in not a generic logger

478
00:17:15,919 --> 00:17:17,039
you bake

479
00:17:17,039 --> 00:17:19,720
call outs to bash in not some

480
00:17:19,720 --> 00:17:21,760
[Music]

481
00:17:21,760 --> 00:17:25,119
execution a call out you bake specific

482
00:17:25,119 --> 00:17:27,599
database drivers in

483
00:17:27,599 --> 00:17:29,440
these problems that we leave in the

484
00:17:29,440 --> 00:17:31,440
hands of developers and the nightmares

485
00:17:31,440 --> 00:17:33,919
they make for us the security teams the

486
00:17:33,919 --> 00:17:36,559
platform builders are

487
00:17:36,559 --> 00:17:38,960
many because it's not just the common

488
00:17:38,960 --> 00:17:40,880
technical requirements that end up in

489
00:17:40,880 --> 00:17:42,000
that layer

490
00:17:42,000 --> 00:17:44,960
as security teams we bring requirements

491
00:17:44,960 --> 00:17:47,120
such as logging such as business

492
00:17:47,120 --> 00:17:50,000
objectives performance monitoring all of

493
00:17:50,000 --> 00:17:52,480
these other things become a a new common

494
00:17:52,480 --> 00:17:56,559
platform that we're building on top of

495
00:17:56,559 --> 00:17:59,679
and i've had the pleasure of of getting

496
00:17:59,679 --> 00:18:02,160
to check out all the code at a number of

497
00:18:02,160 --> 00:18:06,240
large organizations uh think um you know

498
00:18:06,240 --> 00:18:07,919
organizations that have

499
00:18:07,919 --> 00:18:11,120
20 to 30 000 unique applications

500
00:18:11,120 --> 00:18:13,440
in this specific organization

501
00:18:13,440 --> 00:18:15,280
and the shocking thing that i found out

502
00:18:15,280 --> 00:18:18,480
when i was doing this research was that

503
00:18:18,480 --> 00:18:21,520
for most enterprises the vast majority

504
00:18:21,520 --> 00:18:24,000
of your code base is not only open

505
00:18:24,000 --> 00:18:24,880
source

506
00:18:24,880 --> 00:18:26,400
but it's common open source and that

507
00:18:26,400 --> 00:18:28,880
makes sense you're not terrible people

508
00:18:28,880 --> 00:18:30,640
right you want to give your developers a

509
00:18:30,640 --> 00:18:32,240
you might be terrible people but you

510
00:18:32,240 --> 00:18:33,679
want to give your developers a good

511
00:18:33,679 --> 00:18:35,919
starting point a place where they can

512
00:18:35,919 --> 00:18:38,160
pick up as a template and build their

513
00:18:38,160 --> 00:18:39,840
applications

514
00:18:39,840 --> 00:18:41,840
but what we're doing is we're then

515
00:18:41,840 --> 00:18:44,720
taking those vulnerabilities like log 4j

516
00:18:44,720 --> 00:18:46,480
and instead of managing them at a

517
00:18:46,480 --> 00:18:49,200
platform layer we're managing them on an

518
00:18:49,200 --> 00:18:52,559
application by application basis

519
00:18:52,559 --> 00:18:55,039
and above the stack this is quite

520
00:18:55,039 --> 00:18:57,280
possibly the biggest opportunity in your

521
00:18:57,280 --> 00:18:59,919
organization because your developers are

522
00:18:59,919 --> 00:19:02,160
overwhelmed with managing this common

523
00:19:02,160 --> 00:19:03,039
code

524
00:19:03,039 --> 00:19:04,080
these

525
00:19:04,080 --> 00:19:06,880
uh non-functional requirements that we

526
00:19:06,880 --> 00:19:09,919
have a constitute the bulk of the code

527
00:19:09,919 --> 00:19:12,000
and the bulk of the work around them

528
00:19:12,000 --> 00:19:14,480
think about all the demos today

529
00:19:14,480 --> 00:19:17,440
how many of those demonstrations of

530
00:19:17,440 --> 00:19:19,600
and even yesterday and the days before

531
00:19:19,600 --> 00:19:21,360
talked about functional requirements for

532
00:19:21,360 --> 00:19:23,520
an application you know like compute the

533
00:19:23,520 --> 00:19:25,440
interest rate or

534
00:19:25,440 --> 00:19:26,960
um you know

535
00:19:26,960 --> 00:19:29,039
get the firmware from the tractor you

536
00:19:29,039 --> 00:19:30,480
know something along those lines some

537
00:19:30,480 --> 00:19:33,280
business requirement they weren't

538
00:19:33,280 --> 00:19:34,880
they keep talking people keep

539
00:19:34,880 --> 00:19:36,720
demonstrating and talking about the

540
00:19:36,720 --> 00:19:38,640
systematic requirements that are

541
00:19:38,640 --> 00:19:40,799
non-functional in nature and if we can

542
00:19:40,799 --> 00:19:43,120
move those to the platform layer then we

543
00:19:43,120 --> 00:19:45,760
have an opportunity to update them once

544
00:19:45,760 --> 00:19:48,799
in the platforms versus doing the same

545
00:19:48,799 --> 00:19:50,960
work over and over and over and over

546
00:19:50,960 --> 00:19:52,720
again on an application by application

547
00:19:52,720 --> 00:19:54,640
basis

548
00:19:54,640 --> 00:19:57,120
so when we think about this platform gap

549
00:19:57,120 --> 00:20:00,320
the idea is is to continue to converge

550
00:20:00,320 --> 00:20:01,760
and make the platforms healthier and

551
00:20:01,760 --> 00:20:04,080
this honestly is not that crazy or new

552
00:20:04,080 --> 00:20:05,360
of an idea

553
00:20:05,360 --> 00:20:07,200
istio for example

554
00:20:07,200 --> 00:20:09,679
takes this concept and says look

555
00:20:09,679 --> 00:20:11,200
at layer 3

556
00:20:11,200 --> 00:20:13,360
we have many common requirements so

557
00:20:13,360 --> 00:20:15,440
let's stop putting those in each and

558
00:20:15,440 --> 00:20:17,039
every application

559
00:20:17,039 --> 00:20:18,640
and dapper which is a tool kit from

560
00:20:18,640 --> 00:20:21,120
microsoft does that in a very tightly

561
00:20:21,120 --> 00:20:23,600
coupled way for kubernetes

562
00:20:23,600 --> 00:20:27,120
my question to you is if layer 3 is good

563
00:20:27,120 --> 00:20:28,320
why don't we turn it all the way up to

564
00:20:28,320 --> 00:20:29,919
layer 7.

565
00:20:29,919 --> 00:20:31,360
and that's the idea that we have with

566
00:20:31,360 --> 00:20:32,720
wasmcloud

567
00:20:32,720 --> 00:20:35,600
is to provide a framework that leverages

568
00:20:35,600 --> 00:20:38,640
web assembly that gives developers all

569
00:20:38,640 --> 00:20:40,480
of the functional uh non-functional

570
00:20:40,480 --> 00:20:43,679
requirements included in the stack

571
00:20:43,679 --> 00:20:45,520
so we launched webassembly i'm sorry we

572
00:20:45,520 --> 00:20:47,520
launched wasmcloud out of capital one in

573
00:20:47,520 --> 00:20:49,039
2019

574
00:20:49,039 --> 00:20:49,919
and

575
00:20:49,919 --> 00:20:52,240
the community has absolutely exploded in

576
00:20:52,240 --> 00:20:54,000
the last few years

577
00:20:54,000 --> 00:20:56,880
now wasm cloud is a framework for web

578
00:20:56,880 --> 00:20:59,280
assembly and you can do the same thing

579
00:20:59,280 --> 00:21:01,440
that you're doing in um

580
00:21:01,440 --> 00:21:02,960
webassembly today that you're doing in

581
00:21:02,960 --> 00:21:05,280
your current apps you could take all of

582
00:21:05,280 --> 00:21:06,159
your

583
00:21:06,159 --> 00:21:08,640
libraries and compile them all down into

584
00:21:08,640 --> 00:21:10,799
webassembly and what's going to happen

585
00:21:10,799 --> 00:21:13,440
when those libraries are vulnerable

586
00:21:13,440 --> 00:21:14,640
you're going to have to rebuild and

587
00:21:14,640 --> 00:21:17,039
redeploy those applications

588
00:21:17,039 --> 00:21:19,039
so our vision and our view for the

589
00:21:19,039 --> 00:21:21,679
future is an area where we let

590
00:21:21,679 --> 00:21:24,080
developers write their functional

591
00:21:24,080 --> 00:21:26,480
requirements and we leave everything

592
00:21:26,480 --> 00:21:28,640
else to the platform

593
00:21:28,640 --> 00:21:30,559
our idea is is that then your binaries

594
00:21:30,559 --> 00:21:32,400
are not only universally portable but

595
00:21:32,400 --> 00:21:33,919
they're more secure they're

596
00:21:33,919 --> 00:21:36,000
significantly less expensive domain on a

597
00:21:36,000 --> 00:21:38,720
per application by application basis

598
00:21:38,720 --> 00:21:41,120
they can easily move across clouds edges

599
00:21:41,120 --> 00:21:42,480
and boundaries

600
00:21:42,480 --> 00:21:44,000
and ultimately it increases the

601
00:21:44,000 --> 00:21:45,840
development velocity of your

602
00:21:45,840 --> 00:21:47,760
organizations

603
00:21:47,760 --> 00:21:51,200
these are real numbers uh from actual uh

604
00:21:51,200 --> 00:21:53,120
pocs that we'll talk about here at the

605
00:21:53,120 --> 00:21:54,400
end there's a whole bunch of videos

606
00:21:54,400 --> 00:21:56,799
yesterday we had a whole webassembly day

607
00:21:56,799 --> 00:21:58,400
here at kubecon

608
00:21:58,400 --> 00:22:00,400
and there were a large number of

609
00:22:00,400 --> 00:22:02,320
wasmcloud things that were

610
00:22:02,320 --> 00:22:03,919
demoed yesterday

611
00:22:03,919 --> 00:22:07,200
but the world that you live in now today

612
00:22:07,200 --> 00:22:09,120
the dirty secret is is that every

613
00:22:09,120 --> 00:22:11,440
application starts with 20 000 lines of

614
00:22:11,440 --> 00:22:13,200
someone else's code

615
00:22:13,200 --> 00:22:15,679
that you then saddle a team to develop

616
00:22:15,679 --> 00:22:16,960
and maintain

617
00:22:16,960 --> 00:22:18,880
there are some solutions and efforts

618
00:22:18,880 --> 00:22:22,799
like automated vulnerability patching or

619
00:22:22,799 --> 00:22:25,280
templating or building custom ci cd

620
00:22:25,280 --> 00:22:27,919
platforms that automate these things but

621
00:22:27,919 --> 00:22:30,880
you're ultimately embedding 20 000 lines

622
00:22:30,880 --> 00:22:32,080
of

623
00:22:32,080 --> 00:22:34,400
executable code in each and every

624
00:22:34,400 --> 00:22:35,919
application

625
00:22:35,919 --> 00:22:38,320
with wasm cloud the only thing that the

626
00:22:38,320 --> 00:22:39,919
developers need to write is their

627
00:22:39,919 --> 00:22:42,080
business logic everything else comes in

628
00:22:42,080 --> 00:22:44,159
like a set of lego blocks if you want

629
00:22:44,159 --> 00:22:47,120
sql you just import the sql contract on

630
00:22:47,120 --> 00:22:48,880
the other side of that contract it

631
00:22:48,880 --> 00:22:51,360
absolutely gets connected to a specific

632
00:22:51,360 --> 00:22:53,919
database but our sql provider for

633
00:22:53,919 --> 00:22:56,960
example can easily be moved from

634
00:22:56,960 --> 00:23:00,400
rds type databases postgres mysql

635
00:23:00,400 --> 00:23:02,960
into databases you're running yourself

636
00:23:02,960 --> 00:23:04,320
azure

637
00:23:04,320 --> 00:23:06,000
dynamodb

638
00:23:06,000 --> 00:23:08,159
single store and other databases for

639
00:23:08,159 --> 00:23:10,080
example and our other capability

640
00:23:10,080 --> 00:23:13,760
providers are very similar to that

641
00:23:14,080 --> 00:23:15,840
so this increasing abstraction let's

642
00:23:15,840 --> 00:23:17,280
talk a little bit about what this looks

643
00:23:17,280 --> 00:23:18,159
like

644
00:23:18,159 --> 00:23:19,120
so

645
00:23:19,120 --> 00:23:22,720
wasm cloud is to webassembly what react

646
00:23:22,720 --> 00:23:23,919
is to

647
00:23:23,919 --> 00:23:25,760
uh html

648
00:23:25,760 --> 00:23:28,240
it's a template a framework you can use

649
00:23:28,240 --> 00:23:29,679
to get started

650
00:23:29,679 --> 00:23:31,679
to build your applications

651
00:23:31,679 --> 00:23:33,840
uh so we'll go through all of the

652
00:23:33,840 --> 00:23:37,600
various components here so i like to

653
00:23:37,600 --> 00:23:39,440
help people understand webassembly by

654
00:23:39,440 --> 00:23:42,159
saying think of it like a virtual cpu

655
00:23:42,159 --> 00:23:44,240
and it's not even that complicated or

656
00:23:44,240 --> 00:23:46,240
advanced of a cpu yet

657
00:23:46,240 --> 00:23:48,720
it's a very risk-oriented type

658
00:23:48,720 --> 00:23:50,640
architecture but there are simdi and

659
00:23:50,640 --> 00:23:52,799
mimdi proposals that will eventually i

660
00:23:52,799 --> 00:23:54,720
think be included in the specification

661
00:23:54,720 --> 00:23:55,679
here

662
00:23:55,679 --> 00:23:57,440
it's very fast it's very small but it's

663
00:23:57,440 --> 00:23:59,120
also very simple it doesn't deal with

664
00:23:59,120 --> 00:24:00,960
complex data types it doesn't include an

665
00:24:00,960 --> 00:24:02,400
operating system

666
00:24:02,400 --> 00:24:04,480
now there is a draft standard that's on

667
00:24:04,480 --> 00:24:06,640
the way that's called wazi which is the

668
00:24:06,640 --> 00:24:08,960
webassembly system interface and you can

669
00:24:08,960 --> 00:24:10,640
think of this kind of like a virtual

670
00:24:10,640 --> 00:24:13,679
posix environment think of it as

671
00:24:13,679 --> 00:24:15,679
giving you those common abstractions

672
00:24:15,679 --> 00:24:20,240
like open a file open network socket

673
00:24:20,240 --> 00:24:22,159
that you can use to build higher

674
00:24:22,159 --> 00:24:23,600
applications

675
00:24:23,600 --> 00:24:24,720
but i don't think that's the right

676
00:24:24,720 --> 00:24:26,320
abstraction for you and it's certainly

677
00:24:26,320 --> 00:24:27,520
not the right abstraction for your

678
00:24:27,520 --> 00:24:29,760
developers what your developers really

679
00:24:29,760 --> 00:24:31,679
want are much larger building blocks

680
00:24:31,679 --> 00:24:32,400
like

681
00:24:32,400 --> 00:24:34,720
sql like message queue

682
00:24:34,720 --> 00:24:36,400
like

683
00:24:36,400 --> 00:24:39,200
a logger and those are the things that

684
00:24:39,200 --> 00:24:42,400
we've baked into wasm cloud so wasmcloud

685
00:24:42,400 --> 00:24:44,960
is this framework that underneath uses a

686
00:24:44,960 --> 00:24:46,640
variety of other projects including

687
00:24:46,640 --> 00:24:47,600
gnats

688
00:24:47,600 --> 00:24:49,679
and elixir but to the developers they

689
00:24:49,679 --> 00:24:51,600
don't need to know anything about that

690
00:24:51,600 --> 00:24:53,520
we just deliver a model that lets them

691
00:24:53,520 --> 00:24:56,000
start with their language and then write

692
00:24:56,000 --> 00:24:58,720
a simple business logic

693
00:24:58,720 --> 00:25:01,679
the capabilities are hot swappable

694
00:25:01,679 --> 00:25:04,320
they can hold state here but above this

695
00:25:04,320 --> 00:25:06,720
we actually enforce a stateless paradigm

696
00:25:06,720 --> 00:25:08,640
so when you think about holding state if

697
00:25:08,640 --> 00:25:10,960
you wanted to recurse through say

698
00:25:10,960 --> 00:25:12,960
records returned from a database or

699
00:25:12,960 --> 00:25:14,880
something like that you can absolutely

700
00:25:14,880 --> 00:25:16,480
do those things here

701
00:25:16,480 --> 00:25:18,400
most powerfully

702
00:25:18,400 --> 00:25:21,760
wasmcloud goes where you want to take it

703
00:25:21,760 --> 00:25:23,760
there are lots of models out here that

704
00:25:23,760 --> 00:25:25,440
are very similar to wasmcloud when you

705
00:25:25,440 --> 00:25:27,760
look at fastly has an edge product that

706
00:25:27,760 --> 00:25:29,760
lives in their walled garden and

707
00:25:29,760 --> 00:25:32,080
cloudflare has an edge product that

708
00:25:32,080 --> 00:25:33,840
lives in in a world garden and they are

709
00:25:33,840 --> 00:25:35,520
wonderful products

710
00:25:35,520 --> 00:25:37,600
but you can't take those products into

711
00:25:37,600 --> 00:25:40,880
your devices or into your clouds or into

712
00:25:40,880 --> 00:25:43,039
your kubernetes and i think one of the

713
00:25:43,039 --> 00:25:45,360
reasons driving the explosive growth of

714
00:25:45,360 --> 00:25:48,480
wasmcloud is the simple fact that

715
00:25:48,480 --> 00:25:50,400
we believe in better together

716
00:25:50,400 --> 00:25:52,559
we ship helm charts right you can start

717
00:25:52,559 --> 00:25:55,039
in your kubernetes or manage kubernetes

718
00:25:55,039 --> 00:25:57,840
we ship charts for gnome or plug-ins for

719
00:25:57,840 --> 00:25:59,440
nomad

720
00:25:59,440 --> 00:26:01,600
lots of other types of integrations like

721
00:26:01,600 --> 00:26:03,760
that to bring the compute to where you

722
00:26:03,760 --> 00:26:05,760
are today

723
00:26:05,760 --> 00:26:07,919
like many good open source projects this

724
00:26:07,919 --> 00:26:08,640
is

725
00:26:08,640 --> 00:26:10,880
a completely plugable so we ship the

726
00:26:10,880 --> 00:26:12,960
most common lego blocks that you need

727
00:26:12,960 --> 00:26:15,919
based on our statistical analysis of

728
00:26:15,919 --> 00:26:18,480
microservices at the large organizations

729
00:26:18,480 --> 00:26:20,799
that we're working with now but we've

730
00:26:20,799 --> 00:26:22,320
had many

731
00:26:22,320 --> 00:26:24,799
companies for example bmw presented on

732
00:26:24,799 --> 00:26:27,360
saturday at cloud native rejects about

733
00:26:27,360 --> 00:26:29,200
bringing machine learning capabilities

734
00:26:29,200 --> 00:26:31,840
to wasm cloud they implemented this

735
00:26:31,840 --> 00:26:33,679
awesome project called wazi nn in

736
00:26:33,679 --> 00:26:35,760
conjunction with intel and that gave you

737
00:26:35,760 --> 00:26:37,279
both tensorflow

738
00:26:37,279 --> 00:26:39,200
as well as microsoft onyx models that

739
00:26:39,200 --> 00:26:42,240
are now portable across these edges

740
00:26:42,240 --> 00:26:45,039
alan here in the audience

741
00:26:45,039 --> 00:26:47,039
he did a presentation yesterday at wasm

742
00:26:47,039 --> 00:26:49,120
day where he talked about building a

743
00:26:49,120 --> 00:26:51,760
capability provider for bevy the online

744
00:26:51,760 --> 00:26:54,000
gaming engine so

745
00:26:54,000 --> 00:26:56,640
it's extendable to any type of coupling

746
00:26:56,640 --> 00:26:57,919
that you would want

747
00:26:57,919 --> 00:27:00,480
whether it's a tight or not

748
00:27:00,480 --> 00:27:02,159
now above this when we get to the

749
00:27:02,159 --> 00:27:04,080
business logic

750
00:27:04,080 --> 00:27:06,720
we suddenly now enforce this stateless

751
00:27:06,720 --> 00:27:08,240
and reactive approach and that's

752
00:27:08,240 --> 00:27:10,400
powerful and important because it means

753
00:27:10,400 --> 00:27:11,360
when you think about those

754
00:27:11,360 --> 00:27:12,720
non-functional requirements about

755
00:27:12,720 --> 00:27:15,600
availability and scalability when you

756
00:27:15,600 --> 00:27:17,679
want more x you can simply scale it

757
00:27:17,679 --> 00:27:19,760
vertically within your process

758
00:27:19,760 --> 00:27:21,919
or horizontally across multiple

759
00:27:21,919 --> 00:27:25,520
processes and wasmcloud includes a

760
00:27:25,520 --> 00:27:27,520
network between those capability

761
00:27:27,520 --> 00:27:30,480
providers based on gnats and your logic

762
00:27:30,480 --> 00:27:32,720
so that wasm cloud host can easily live

763
00:27:32,720 --> 00:27:35,440
across clouds edges or devices

764
00:27:35,440 --> 00:27:38,240
makes it very fast very easy and very

765
00:27:38,240 --> 00:27:39,840
portable

766
00:27:39,840 --> 00:27:41,520
so i'll talk about a couple quick case

767
00:27:41,520 --> 00:27:42,640
studies and then i think we'll have just

768
00:27:42,640 --> 00:27:44,559
a couple minutes for questions

769
00:27:44,559 --> 00:27:46,080
at the end here

770
00:27:46,080 --> 00:27:48,399
our community is blown up please

771
00:27:48,399 --> 00:27:50,960
follow any of the qr codes or go to

772
00:27:50,960 --> 00:27:52,720
github forward slash wasmcloud or

773
00:27:52,720 --> 00:27:54,399
wasmcloud.com

774
00:27:54,399 --> 00:27:57,520
and you can join in at the last

775
00:27:57,520 --> 00:28:00,080
kubecon a bank came and did this awesome

776
00:28:00,080 --> 00:28:03,679
failover between aws and gcp it's a 20

777
00:28:03,679 --> 00:28:05,360
minute talk if you're interested in

778
00:28:05,360 --> 00:28:07,520
seeing this work watch them tell the

779
00:28:07,520 --> 00:28:10,640
wasm cloud story they're on fire with it

780
00:28:10,640 --> 00:28:12,960
just yesterday adobe spoke at cloud

781
00:28:12,960 --> 00:28:15,679
native webassembly day and they did this

782
00:28:15,679 --> 00:28:17,919
awesome demo for background removal

783
00:28:17,919 --> 00:28:19,520
where

784
00:28:19,520 --> 00:28:21,760
they are able to take microservices they

785
00:28:21,760 --> 00:28:24,399
were running in a cloud provider and run

786
00:28:24,399 --> 00:28:27,039
them in a customer's browser

787
00:28:27,039 --> 00:28:29,039
and why that's powerful is it's not only

788
00:28:29,039 --> 00:28:31,039
good it's the same algorithm it's not

789
00:28:31,039 --> 00:28:33,200
only faster it's you don't need to

790
00:28:33,200 --> 00:28:35,200
upload the picture to a cloud and back

791
00:28:35,200 --> 00:28:37,760
it's 40 milliseconds versus 400 but it's

792
00:28:37,760 --> 00:28:39,200
also cheaper

793
00:28:39,200 --> 00:28:40,720
because they're no longer paying for the

794
00:28:40,720 --> 00:28:42,840
compute because it crossed that

795
00:28:42,840 --> 00:28:45,440
threshold right this is a new paradigm

796
00:28:45,440 --> 00:28:47,039
remember that moment when you had to

797
00:28:47,039 --> 00:28:49,200
wrap your brain around containers

798
00:28:49,200 --> 00:28:50,399
you're ready to wrap your brain around

799
00:28:50,399 --> 00:28:52,159
web assembly because it's already here

800
00:28:52,159 --> 00:28:53,279
and you're already using it today

801
00:28:53,279 --> 00:28:55,840
whether you want to or not and then

802
00:28:55,840 --> 00:28:58,000
i already mentioned the bmw one uh so

803
00:28:58,000 --> 00:29:00,240
i'll go and pause here and if we have a

804
00:29:00,240 --> 00:29:03,840
couple a moment for a couple questions

805
00:29:06,240 --> 00:29:08,159
mike in the front

806
00:29:08,159 --> 00:29:10,480
hello yeah thanks liam this was really

807
00:29:10,480 --> 00:29:12,799
informative uh i mean

808
00:29:12,799 --> 00:29:15,279
at least for me i knew about vasom cloud

809
00:29:15,279 --> 00:29:17,200
in parts but this actually gave the

810
00:29:17,200 --> 00:29:19,520
bigger picture

811
00:29:19,520 --> 00:29:22,960
so let's thank speaker

812
00:29:23,440 --> 00:29:26,679
thank you

813
00:29:27,600 --> 00:29:29,600
uh one last note if you'd like to get

814
00:29:29,600 --> 00:29:31,520
some hands-on experience with either

815
00:29:31,520 --> 00:29:34,320
webassembly or wasmcloud we've launched

816
00:29:34,320 --> 00:29:37,120
a new playground at labs.cosmonic.com

817
00:29:37,120 --> 00:29:38,799
where you can do real-time interactive

818
00:29:38,799 --> 00:29:41,039
tutorials i'll be hanging out all day

819
00:29:41,039 --> 00:29:42,399
i'd love to take any questions you have

820
00:29:42,399 --> 00:29:44,890
up there thank you so much for your time

821
00:29:44,890 --> 00:29:48,459
[Applause]

